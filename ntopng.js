!function(){"use strict";Date.prototype.format=function(e){var t={"M+":this.getMonth()+1,"d+":this.getDate(),"h+":this.getHours(),"m+":this.getMinutes(),"s+":this.getSeconds(),"q+":Math.floor((this.getMonth()+3)/3),S:this.getMilliseconds()};for(var a in/(y+)/.test(e)&&(e=e.replace(RegExp.$1,(this.getFullYear()+"").substr(4-RegExp.$1.length))),t)new RegExp("("+a+")").test(e)&&(e=e.replace(RegExp.$1,1==RegExp.$1.length?t[a]:("00"+t[a]).substr((""+t[a]).length)));return e},jQuery.fn.extend({disable:function(e){return this.each((function(){var t=$(this);t.is("input, button, textarea, select")?this.disabled=e:t.toggleClass("disabled",e)}))}});const e=.005,t={ipv4:String.raw`^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$`,ipv6:String.raw`^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$|^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*)$`,domainName:String.raw`^(([a-zA-Z]{1})|([a-zA-Z]{1}[a-zA-Z]{1})|([a-zA-Z]{1}[0-9]{1})|([0-9]{1}[a-zA-Z]{1})|([a-zA-Z0-9][-_\.a-zA-Z0-9]{1,61}[a-zA-Z0-9]))\.([a-zA-Z]{2,13}|[a-zA-Z0-9-]{2,30}\.[a-zA-Z]{2,3})`,port:String.raw`^([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$`,latency:String.raw`^([0-9]*[.])?[0-9]+$`,url:String.raw`^(https?\:\/\/[^\/\s]+(\/.*)?)$`,emailUrl:String.raw`^smtps?:\/\/[-a-zA-Z0-9:.]{1,256}+$`,macAddress:String.raw`^([0-9A-Fa-f]{2}:){5}([0-9A-Fa-f]{2})$`,hostname:String.raw`^[a-zA-Z0-9._:\-]{3,250}|^[a-zA-Z0-9._:\-]{3,250}@[0-9]{0,5}`,username:String.raw`^[a-zA-Z0-9._@!-?]{3,30}$`,singleword:String.raw`^(?=[a-zA-Z0-9._:\-]{3,253}$)(?!.*[_.:\-]{2})[^_.:\-].*[^_.:\-]$`,email:String.raw`^([a-zA-Z0-9.!#$%&'*+-/=?^_${"`"}{|}~]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*)$`,https:String.raw`^https?:\/\/.+$`,token:String.raw`^[0-9a-f]{32}`,score:String.raw`^[0-9]{1,5}`,telegram_channel:String.raw`^[0-9\-]{1,15}`,password:String.raw`^[\w\/$!\/()=?^*@_-]{5,31}$`,tls_certificate:String.raw`^[^=,]+=[^=,]+(,\s[^=,]+=[^=,]+)*$`,domain_name_not_strict:String.raw`^[a-zA-Z0-9\-_~]+((\.[a-zA-Z0-9\-_~]+)+)$`,non_quoted_text:String.raw`^[a-zA-Z0-9.-_]+$`};class a{static toggleOverlays(e=500){$(".overlay").toggle(e)}static showOverlays(e=500){$(".overlay").fadeIn(e)}static hideOverlays(e=500){$(".overlay").fadeOut(e)}static get REGEXES(){return t}static getIPv4RegexWithCIDR(){const e=t.ipv4.length;return`${t.ipv4.substring(0,e-1)}(\\/?)(\\b([0-9]|[12][0-9]|3[0-2])?\\b)$`}static getIPv6RegexWithCIDR(){const e=t.ipv6.length;return`${t.ipv6.substring(0,e-1)}(\\/?)\\b([0-9]|[1-9][0-9]|1[01][0-9]|12[0-8])?\\b$`}static async resolveDNS(e="ntop.org"){try{const t=await fetch(`${http_prefix}/lua/rest/v2/get/dns/resolve.lua?hostname=${e}`);return await t.json()}catch(e){console.error(`Something went wrong when resolving hostname: ${e}`)}return{rc:-1,rc_str:"FAILED_HTTP_REQUEST"}}static initDataPatterns(){$("input[data-pattern]").each((function(){const e=$(this).data("pattern");if(!e)return void console.warn("An empty data-pattern on an input was found!",this);const a=e.split("|").map((e=>t[e].toString())).join("|");$(this).attr("pattern",a),$(this).removeAttr("data-pattern")}))}static is_good_ipv4(e){return new RegExp(t.ipv4).test(e)}static is_good_ipv6(e){return new RegExp(t.ipv6).test(e)}static is_mac_address(e){return new RegExp(t.macAddress).test(e)}static isNumeric(e){return/^\d+$/.test(e)}static is_network_mask(e,t){var n,l=e.split("/"),s=null;if(2!=l.length){if(!t)return null;n=e}else{if(n=l[0],!a.isNumeric(l[1]))return null;if((s=parseInt(l[1]))<0)return null}if(a.is_good_ipv4(n)){if(null===s)s=32;else if(s>32)return null;return{type:"ipv4",address:n,mask:s}}if(a.is_good_ipv6(l[0])){if(null===s)s=128;else if(s>128)return!1;return{type:"ipv6",address:n,mask:s}}return null}static fbits(t){const a=["bps","Kbps","Mbps","Gbps","Tbps"];if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 bps";var n=Math.log(t)/Math.log(1e3),l=parseInt(Math.floor(n));if(l<0||isNaN(l))l=0;else if(l>=a.length)return"> "+a[a.length-1];if(l<=1)return Math.round(t/Math.pow(1e3,l)*100)/100+" "+a[l];var s=parseFloat(t/Math.pow(1e3,l)).toFixed(2);return s%1==0&&(s=Math.round(s)),s+" "+a[l]}static export_rate(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 exps/s";var n=a.scaleValue(t,["exp/s","Kexp/s"],1e3);return Math.round(100*n[0])/100+" "+n[1]}static exports_format(t){if(void 0===t)return"-";var n=i18n_ext.exports.toLowerCase(),l=[n,"K "+n];if(0==t)return"0";if(t>0&&t<e)return"< 0.005 exps/s";var s=a.scaleValue(t,l,1e3);return Math.round(100*s[0])/100+" "+s[1]}static fbits_from_bytes(e){return void 0===e?"-":a.fbits(8*e)}static fpackets(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 pps";var n=a.scaleValue(t,["pps","Kpps","Mpps","Gpps","Tpps"],1e3);return Math.round(100*n[0])/100+" "+n[1]}static fpoints(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 pt/s";var n=a.scaleValue(t,["pt/s","Kpt/s","Mpt/s","Gpt/s","Tpt/s"],1e3);return Math.round(100*n[0])/100+" "+n[1]}static fflows(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 fps";var n=a.scaleValue(t,["fps","Kfps","Mfps","Gfps","Tfps"],1e3);return Math.round(100*n[0])/100+" "+n[1]}static fmsgs(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 mps";var n=a.scaleValue(t,["msg/s","Kmsg/s","Msg/s","Gmsg/s","Tmsg/s"],1e3);return Math.round(100*n[0])/100+" "+n[1]}static fmillis(e){if(void 0===e)return"-";const t=a.scaleValue(e,["ms"],1e3);return Math.round(100*t[0])/100+" "+t[1]}static fnone(e){return void 0===e?"-":Math.round(100*e)/100}static falerts(e){return void 0===e?"-":Math.round(100*e)/100+" alerts/s"}static fint(e){return void 0===e?"-":Math.round(e).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")}static ffloat(e){return void 0===e?"-":(Math.round(100*e)/100).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")}static fpercent(e){return void 0===e?"-":Math.round(100*e)/100+" %"}static fdate(e){return new Date(1e3*e)}static capitaliseFirstLetter(e){return e.charAt(0).toUpperCase()+e.slice(1)}static get_trend(e,t){return void 0===e||void 0===t||e==t?'<i class="fas fa-minus"></i>':e>t?'<i class="fas fa-arrow-up"></i>':'<i class="fas fa-arrow-down"></i>'}static abbreviateString(e,t){return e?e.length<t?e:e.substring(0,t)+"...":""}static toFixed2(e){return e?e.toFixed(2):""}static bytesToSize(e){if(void 0===e)return"-";var t=1024,a=1048576,n=1073741824,l=1099511627776;return e>=0&&e<t?parseFloat(e.toFixed(2))+" Bytes":e>=t&&e<a?parseFloat((e/t).toFixed(2))+" KB":e>=a&&e<n?parseFloat((e/a).toFixed(2))+" MB":e>=n&&e<l?parseFloat((e/n).toFixed(2))+" GB":e>=l?parseFloat((e/l).toFixed(2))+" TB":parseFloat(e.toFixed(2))+" Bytes"}static drawTrend(e,t,a){return e==t?'<i class="fas fa-minus"></i>':e>t?'<i class="fas fa-arrow-up"'+a+"></i>":'<i class="fas fa-arrow-down"></i>'}static toggleAllTabs(e){!0===e?$("#historical-tabs-container").find("li").removeClass("disabled").find("a").attr("data-toggle","tab"):$("#historical-tabs-container").find("li").addClass("disabled").find("a").removeAttr("data-toggle")}static disableAllDropdownsAndTabs(){$("select").each((function(){$(this).prop("disabled",!0)})),a.toggleAllTabs(!1)}static enableAllDropdownsAndTabs(){$("select").each((function(){$(this).prop("disabled",!1)})),a.toggleAllTabs(!0)}static capitalize(e){return e&&e[0].toUpperCase()+e.slice(1)}static addCommas(e){for(var t=(e+="").split("."),a=t[0],n=t.length>1?"."+t[1]:"",l=/(\d+)(\d{3})/;l.test(a);)a=a.replace(l,"$1,$2");return a+n}static scaleValue(e,t,a,n){if(0==e)return[0,t[0]];let l=n?10*n:10;var s=parseInt(Math.floor(Math.log(e)/Math.log(a)));return s<0||isNaN(s)?s=0:s>=t.length&&(s=t.length-1),[Math.round(e/Math.pow(a,s)*l)/l,t[s]]}static formatValue(t,n){if(0==t)return"0";if(t>0&&t<e)return"< "+e;null==n&&(n=0);var l=a.scaleValue(t,["","K","M","G","T"],1e3,n);return l[0]+l[1]}static formatPackets(e){return a.addCommas(e.toFixed(0))+" Pkts"}static bytesToVolume(t){if(0==t)return"0 Bytes";if(t>0&&t<e)return"< 0.005 Bytes";var n=a.scaleValue(t,["Bytes","KB","MB","GB","TB"],1024);return parseFloat(n[0])+" "+n[1]}static bytesToVolumeAndLabel(e){if(0==e)return"0 Bytes";var t=parseInt(Math.floor(Math.log(e)/Math.log(1024)));return[(e/Math.pow(1024,t)).toFixed(2),["Bytes","KB","MB","GB","TB"][t]]}static bitsToSize(t,n){n=n||1e3;if(0==t)return"0 bps";if(t>0&&t<e)return"< 0.005 bps";var l=a.scaleValue(t,["bps","Kbps","Mbps","Gbps","Tbps"],n);return l[0].toFixed(2)+" "+l[1]}static secondsToTime(e){if(e<1)return"< 1 sec";let t=Math.floor(e/86400),a=Math.floor(e/3600-24*t),n=Math.floor(e/60-1440*t-60*a),l=e%60,s="",i=[];if(t>0){let e=Math.floor(t/365);e>0&&(t%=365,s=e+" year",e>1&&(s+="s"),i.push(s),s=""),s=t+" day",t>1&&(s+="s"),i.push(s),s=""}return a>0&&(a<10&&(s="0"),s+=a+":"),n<10&&(s+="0"),s+=n+":",l<10&&(s+="0"),s+=l,i.push(s),i.join(", ")}static msecToTime(e){return e>=1e3?a.secondsToTime(e/1e3):(Math.round(1e3*e)/1e3).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")+" ms"}static epoch2Seen(e){var t=new Date(1e3*e),n=Math.floor((new Date).getTime()/1e3-e);return t.format("dd/MM/yyyy hh:mm:ss")+" ["+a.secondsToTime(n)+" ago]"}static graphGetXAxisTicksFormat(e){return e<=86400?"%H:%M:%S":e<=172800?"%b %e, %H:%M:%S":"%b %e"}static paramsExtend(e,t){return $.extend({},e,t)}static paramsToForm(e,t){for(var a in e=$(e),t){if(t.hasOwnProperty(a))$('<input type="hidden" name="'+a+'" value="'+t[a]+'">').appendTo(e)}return e}static paramsPairsEncode(e){var t=0,a={};for(var n in e)a["key_"+t]=n,a["val_"+t]=e[n],t+=1;return a}static hostkey2hostInfo(e){return(e=(e=(e=e.replace(/____/g,":")).replace(/___/g,"/")).replace(/__/g,".")).split("@")}static handle_tab_state(e,t){$("a",e).click((function(e){e.preventDefault()})),$(" > li > a",e).on("shown.bs.tab",(function(e){var t=$(e.target).attr("href").substr(1);history.replaceState?history.replaceState(null,null,"#"+t):window.location.hash=t}));var a=window.location.hash;a||(a="#"+t),$('a[href="'+a+'"]',e).tab("show")}static _add_find_host_link(e,t,a){$("<input>").attr({type:"hidden",id:t,name:t,value:a}).appendTo(e)}static makeFindHostBeforeSubmitCallback(e){return function(t,n){return n.context&&"historical"==n.context?(t.attr("action",e+"/lua/pro/db_search.lua"),"ip"==n.type?a._add_find_host_link(t,"ip",n.ip):"mac"==n.type?a._add_find_host_link(t,"mac",n.mac):"community_id"==n.type?a._add_find_host_link(t,"community_id",n.community_id):"ja3_client"==n.type?a._add_find_host_link(t,"ja3_client",n.ja3_client):"ja3_server"==n.type?a._add_find_host_link(t,"ja3_server",n.ja3_server):a._add_find_host_link(t,"name",n.hostname?n.hostname:n.name)):"mac"==n.type?t.attr("action",e+"/lua/mac_details.lua"):"network"==n.type?(t.attr("action",e+"/lua/hosts_stats.lua"),a._add_find_host_link(t,"network",n.network)):"snmp"==n.type?(t.attr("action",e+"/lua/pro/enterprise/snmp_interface_details.lua"),a._add_find_host_link(t,"snmp_port_idx",n.snmp_port_idx)):"snmp_device"==n.type?t.attr("action",e+"/lua/pro/enterprise/snmp_device_details.lua"):"asn"==n.type?(t.attr("action",e+"/lua/hosts_stats.lua"),a._add_find_host_link(t,"asn",n.asn)):(t.attr("action",e+"/lua/host_details.lua"),a._add_find_host_link(t,"mode","restore")),!0}}static tstampToDateString(e,t,a){a=a||0;var n=parseInt(e.html())+a,l=d3.time.format(t)(new Date(1e3*n));return e.html(l).removeClass("hidden"),l}static noHtml(e){return e.replace(/<[^>]+>/g,"")}static cleanCustomHostUrl(e){return e.replace(/^http:\/\//gi,"").replace(/^https:\/\//gi,"").replace(/^www\./gi,"").replace(/[^0-9a-zA-Z\.:\/_-]/gi,"")}static parseQuery(e){for(var t={},a=("?"===e[0]?e.substr(1):e).split("&"),n=0;n<a.length;n++){var l=a[n].split("=");t[decodeURIComponent(l[0])]=decodeURIComponent(l[1]||"")}return t}static getHistoryParameters(e){var t=a.parseQuery(window.location.search),n=$.extend(t,e),l="?"+$.param(n,!0);return[location.protocol,"//",location.host,location.pathname].join("")+l}static check_status_code(e,t,a){const n=200!=e;if(n&&null!=a){let n=i18n_ext.request_failed_message;e&&t&&(n+=`: ${e} - ${t}`),a.text(n).show()}else n&&null==a&&alert(`${i18n_ext.request_failed_message}: ${e} - ${t}`);return n}static importModalHelper(e){if(!e.loadConfigXHR)throw"importModalHelper:: Missing 'loadConfigXHR' param";$("input#import-input").on("change",(function(){$(this).val().replace("C:\\fakepath\\",""),$("#btn-confirm-import").removeAttr("disabled")})),$("#import-modal").on("hidden.bs.modal",(function(){$("#import-input").val(""),$("#import-error").hide().removeClass("text-warning").addClass("invalid-feedback"),$("#btn-confirm-import").attr("disabled","disabled")})),$("#import-modal").on("submit","form",(function(t){t.preventDefault();const a=$("#btn-confirm-import");a.attr("disabled","");const n=$("#import-input")[0].files[0];if(!n)return $("#import-error").text(`${i18n_ext.no_file}`).show(),void a.removeAttr("disabled");const l=new FileReader;l.readAsText(n,"UTF-8"),l.onload=function(){let t=null;try{t=JSON.parse(l.result)}catch(e){}if(!t)return $("#import-error").text(i18n_ext.rest_consts[responseJSON.rc_str]||"Not Implemented Yet").show(),void a.removeAttr("disabled");e.loadConfigXHR(l.result).done(((t,a,n)=>{if(t.rc<0)return void $("#import-error").text(t.rc_str).show();e.successCallback&&e.successCallback(t);const l="all"==$("input[name='configuration']:checked").val()?i18n("manage_configurations.messages.import_all_success"):i18n("manage_configurations.messages.import_success");ToastUtils.showToast({id:"import-configuration-alert",level:"success",title:i18n("success"),body:l,delay:2e3}),$("#import-modal").modal("hide")})).fail((({responseJSON:t})=>{e.failureCallback&&e.failureCallback(t),t&&t.rc>0||(-28==t.rc&&$("#import-error").removeClass("invalid-feedback").addClass("text-warning"),$("#import-error").text(i18n_ext.rest_consts[t.rc_str]||i18n_ext.FAILED_HTTP_REQUEST).show())})).always((()=>{a.removeAttr("disabled")}))}}))}static serializeFormArray(e){const t={};return e.forEach((e=>{e.name.includes("[]")||("string"==typeof e.value&&(e.value=e.value.trim()),t[e.name]=e.value)})),t}static cleanForm(e){$(e).find("input,select,textarea").each((function(e,t){$(this).removeClass("is-valid").removeClass("is-invalid")})),$(e)[0].reset()}static fetchWithTimeout(e,t={},a=5e3){const n=new AbortController,l={...t,signal:n.signal};return setTimeout((()=>{n.abort()}),a),fetch(e,l).then((e=>{if(!e.ok)throw new Error(`${e.status}: ${e.statusText}`);return e})).catch((e=>{if("AbortError"===e.name)throw new Error("Response timed out")}))}static setPref(e,t,a,n){if(null==e)return void console.warn("An action key must be defined to set a preference!");const l=()=>{},s=$.post(`${http_prefix}/lua/update_prefs.lua`,{action:e,csrf:t});s.done(a||l),s.fail(n||l)}static arrayToListString(e,t){return null==e?"":e.length>t?e.slice(0,t).join(", ")+` ${i18n_ext.and_x_more.replace("$num",e.length-t)}`:e.slice(0,t).join(", ")}static buildURL(e,t={},a=!1,n={}){const l=new URL(e,window.location);for(const[e,a]of Object.entries(t))(a||0===a)&&l.searchParams.set(e,a);if(a){const e=new URL(window.location.href);for(const[t,a]of Object.entries(n))a&&e.searchParams.set(t,a);l.searchParams.set("referer",e.toString())}return l.toString()}static getEditPoolLink(e,t){const a=new URL(e,window.location);return a.searchParams.set("pool_id",t),a.toString()}static getPoolLink(e,t=0){return`${http_prefix}/lua/rest/v2/get/${e}/pools.lua?pool=${t}`}static async getPool(e,t=0){if(null===e)throw"A pool type must be defined!";try{const n=await fetch(a.getPoolLink(e,t)),l=await n.json();return l.rc<0?[!1,{}]:[!0,l.rsp[0]]}catch(e){return[!1,{}]}}static saveElementScale(e,t={width:0,height:0}){const n=a.generateScaleElementKey(e);localStorage.setItem(n,JSON.stringify(t))}static generateScaleElementKey(e){let t;const a=location.pathname,n=e.attr("id");if(""!==n)t=n;else{t=e.attr("class")}return`${t}-${a}-scale`}static loadElementScale(e){const t=a.generateScaleElementKey(e),n=localStorage.getItem(t);if(null!=n)return JSON.parse(n)}static fillFieldIfValid(e,t){void 0===t?e.val(""):e.val(t)}static copyToClipboard(e,t){const a=document.createElement("textarea");a.value=e,a.setAttribute("readonly",""),a.style.position="absolute",a.style.left="-9999px",document.body.appendChild(a),a.select(),document.execCommand("copy"),document.body.removeChild(a),$(t).attr("title","Copied!").tooltip("dispose").tooltip().tooltip("show"),$(t).removeAttr("data-bs-original-title"),$(t).attr("title",e)}static stripTags(e){let t=document.createElement("div");return t.innerHTML=e,t.textContent||t.innerText||""}static shortenLabel(e,t,a){let n=e;if(e.length>t+5){let l=t;if(a){l=e.lastIndexOf(a);const s=e.slice(l);t>l&&(t=l),n=e.slice(0,t)+"... "+s}else n=e.slice(0,t)+"..."}return n}static sortAlphabetically(e,t){const a=e.label.toUpperCase(),n=t.label.toUpperCase();return a<n?-1:a>n?1:0}static formatNameValue(e,t,a){let n=e;return e!=t&&(a&&"number"==typeof a&&(n=shortenLabel(n,a,".")),n=`${n} [${t}]`),n}static removeVlan(e){let t=e;const a=t.lastIndexOf("@");if(-1!=a){0==t.slice(a+1)&&(t=t.slice(0,a))}return t}static createProgressBar(e){return`<div class="d-flex flex-row align-items-center">\n              <div class="col-9 progress">\n                <div class="progress-bar bg-warning" aria-valuenow="${e}" aria-valuemin="0" aria-valuemax="100" style="width: ${e}%;">\n                </div>\n              </div>\n              <div class="col"> ${e} %</div>\n            </div>`}static createBreakdown(e,t,a,n){return`<div class="d-flex flex-row">\n              <div class="col-12 progress">\n                <div class="progress-bar bg-warning" aria-valuenow="${e}" aria-valuemin="0" aria-valuemax="100" style="width: ${e}%;">${a}</div>\n                <div class="progress-bar bg-success" aria-valuenow="${t}" aria-valuemin="0" aria-valuemax="100" style="width: ${t}%;">${n}</div>\n              </div>\n            </div>`}static getNumTableRows(){return[10,20,50,100]}static formatApexChartLabelFromXandName({series:e,seriesIndex:t,dataPointIndex:a,w:n}){const l=n.config.series[t].data[a],s=l.name,i=l.y;return`\n    <div class='apexcharts-theme-light apexcharts-active' id='test'>\n        <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n            ${l.meta.label}\n        </div>\n        <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n            <div class='apexcharts-tooltip-text text-left'>\n                <b>${n.config.xaxis.title.text}</b>: ${s}\n            </div>\n            <div class='apexcharts-tooltip-text text-left'>\n                <b>${n.config.yaxis[0].title.text}</b>: ${i}\n            </div>\n        </div>\n    </div>\n    `}static apexChartJumpToAlerts(e,t,a){const{seriesIndex:n,dataPointIndex:l}=a,{series:s}=a.config;if(-1===n)return;if(void 0===s)return;const i=s[n],o=i.base_url||s[0].base_url,r=i.start_url||s[0].start_url;if(null!=o&&null!=r){const e=i.data[l].meta.url_query;location.href=`${o}?${r}${e}`}}static formatApexChartLabelFromXandY({series:e,seriesIndex:t,dataPointIndex:a,w:n}){const l=n.config.series[t].data[a],s=l.x,i=l.y;return`\n      <div class='apexcharts-theme-light apexcharts-active' id='test'>\n          <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n              ${l.meta.label}\n          </div>\n          <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n              <div class='apexcharts-tooltip-text text-left'>\n                  <b>${n.config.xaxis.title.text}</b>: ${s}\n              </div>\n              <div class='apexcharts-tooltip-text text-left'>\n                  <b>${n.config.yaxis[0].title.text}</b>: ${i}\n              </div>\n          </div>\n      </div>\n    `}}function n(e,t){var a=$("thead th",$(e)).filter((function(){return"none"!=$(this).css("display")})).length;$("tbody",$(e)).html('<tr class="emptyRow"><td colspan="'+a+'"><i>'+t+"</i></td></tr>")}function l(e){return $("tr:not(.emptyRow)",$(e)).length-1}function s(e){return 0==l(e)}function i(e){return $("table",$("#dt-top-details",$(e)).parent())}function o(e,t,a,n,l,s=!0,i=""){0==$("td:nth-child("+e+")",$(this)).find("div.d-flex").length&&($("td:nth-child("+e+")",$(this)).empty(),$("td:nth-child("+e+")",$(this)).append($("<div class='d-flex justify-content-center'></div>"))),$("td:nth-child("+e+")",$(this)).find(".d-flex").append('<a href="'+l+`" title='${i}' data-placement="bottom" class="btn btn-sm mx-1 ${a} ${s?"":"disabled"}" onclick="`+n+'" role="button">'+t+"</a>")}function r(e,t){return e.data("datatable").options.columns.findIndex((function(e){return e.field===t}))}$((function(){a.initDataPatterns()}));var c=Object.freeze({__proto__:null,draw_processes_graph:function(e,t,a){var n,l={},s=e+"/lua/get_processes_graph_data.lua?host="+a;d3.json(s,(function(s,i){if(s)return console.warn(s);var o;(n=i).forEach((function(t){o=-1==t.source_pid?e+"/lua/host_details.lua?host="+t.source:e+"/lua/process_details.lua?pid="+t.source_pid+"&pid_name="+t.source_name+"&host="+a+"&page=flows",t.source=l[t.source]||(l[t.source]={name:t.source_name,num:t.source,link:o,type:t.source_type,pid:t.source_pid}),o=-1==t.target_pid?e+"/lua/host_details.lua?host="+t.target:e+"/lua/process_details.lua?pid="+t.target_pid+"&pid_name="+t.target_name+"&host="+a+"&page=flows",t.target=l[t.target]||(l[t.target]={name:t.target_name,num:t.target,link:o,type:t.target_type,pid:t.target_pid})}));var r=d3.scale.category10();r.proc="red",r.host="lightsteelblue";var c=d3.layout.force().nodes(d3.values(l)).links(n).size([960,500]).linkDistance(120).charge(-400).on("tick",(function(){d.attr("d",f),p.attr("transform",m),_.attr("transform",m)})).start(),u=d3.select("#"+t).append("svg").attr("id","ebpf_graph").attr("width",960).attr("height",500);u.append("defs").selectAll("marker").data(["proc2proc","proc2host","host2proc","host2host"]).enter().append("marker").attr("id",(function(e){return e})).attr("viewBox","0 -5 20 20").attr("refX",15).attr("refY",-1.5).attr("markerWidth",6).attr("markerHeight",6).attr("orient","auto").append("path").attr("d","M0,-5L10,0L0,5");var d=u.append("g").selectAll("path").data(c.links()).enter().append("path").attr("class",(function(e){return"link "+e.type})).attr("marker-end",(function(e){return"url(#"+e.type+")"})),p=u.append("g").selectAll("circle").data(c.nodes()).enter().append("circle").attr("class","ebpf_circle").attr("r",15).style("fill",(function(e){return r[e.type]})).call(c.drag).on("dblclick",(function(e){window.location.href=e.link})),_=u.append("g").selectAll("text").data(c.nodes()).enter().append("text").attr("class","ebpf_text").attr("x",12).attr("y","0.5rem").style("font-size","1rem").text((function(e){return e.pid>=0?e.name+" [pid: "+e.pid+"]":e.name}));function f(e){var t=e.target.x-e.source.x,a=e.target.y-e.source.y,n=Math.sqrt(t*t+a*a);return"M"+e.source.x+","+e.source.y+"A"+n+","+n+" 0 0,1 "+e.target.x+","+e.target.y}function m(e){return"translate("+e.x+","+e.y+")"}}))}});class u{constructor(e,t){if(void 0===t.csrf)throw new Error("ModalHandler::Missing CSRF token!");this.element=e,this.dialog=$(e).closest(".modal"),this.options=t,this.csrf=t.csrf,this.dontDisableSubmit=t.dontDisableSubmit,this.observer=new MutationObserver((e=>{this.bindFormValidation(),this.toggleFormSubmission(),this.initDataPatterns()})),this.observer.observe(this.element[0],{childList:!0,subtree:!0}),this.initialState=null,this.currentState=null,this.firstCloseAttempt=!1,this.isSubmitting=!1;if(0==$(this.element).find("[type='submit']").length)throw new Error("ModalHandler::The submit button was not found inside the form!");this.toggleFormSubmission()}initDataPatterns(){NtopUtils.initDataPatterns()}createFormSnapshot(){const e={inputs:{},hidden:[]};return $(this.element).find('textarea,select,input[type!="radio"]').each((function(){const t=$(this).prop("nodeName").toLowerCase(),a=$(this).attr("name");e.inputs[`${t}[name='${a}']`]=$(this).val()})),$(this.element).find("[style='display: none;'], span.invalid-feedback").each((function(){e.hidden.push($(this))})),e}compareFormSnaphsot(e,t){if(null==e||null==t)return!0;for(let[a,n]of Object.entries(e.inputs))if(t.inputs[a]!=n)return!1;return!0}delegateModalClosing(){const e=this;$(this.dialog).find("button.cancel").off("click").click((function(){e.firstCloseAttempt=!1,$(e.element)[0].reportValidity(),$(e.dialog).find(".confirm-closing").fadeOut(100,(function(){$(e.dialog).find("button.btn-close").fadeIn(100)}))})),$(this.dialog).off("hide.bs.modal").on("hide.bs.modal",(function(t){e.isSubmitting?t.preventDefault():e.compareFormSnaphsot(e.currentState,e.initialState)||e.firstCloseAttempt||(t.preventDefault(),e.firstCloseAttempt=!0,$(e.dialog).find("button.btn-close").fadeOut(100,(function(){$(e.dialog).find(".confirm-closing").fadeIn(100)})))})),$(this.dialog).off("hidden.bs.modal").on("hidden.bs.modal",(function(t){for(const[t,a]of Object.entries(e.initialState.inputs))$(e.dialog).find(t).val(a),$(e.dialog).find(t).removeClass("is-invalid");e.initialState.hidden.forEach((e=>{e.hide()})),e.element.find("[type='submit']").attr("disabled","disabled"),e.currentState=null,e.firstCloseAttempt=!1,$(e.dialog).find(".confirm-closing").fadeOut(100,(function(){$(e.dialog).find("button.btn-close").fadeIn(100)})),e.cleanForm()}))}fillFormModal(){return this.options.loadFormData()}invokeModalInit(e={}){const t=this;this.delegateModalClosing(),this.data=e||this.fillFormModal(),this.options.onModalInit(this.data,this),$(this.element).parents(".modal").on("show.bs.modal",(function(){t.options.onModalShow()})),this.initialState=this.createFormSnapshot(),this.currentState=null,this.delegateResetButton()}delegateSubmit(){this.bindFormValidation();const e=this;this.submitHandler=function(t){e.options.isSyncRequest||(t.preventDefault(),t.stopPropagation(),e.makeRequest())},$(this.element).on("submit",this.submitHandler)}bindFormValidation(){const e=this;$(this.element).find("input,select,textarea").each((async function(t,a){const n=$(this);let l=-1;const s=async e=>e.data.resolveDNS&&n.val().match(NtopUtils.REGEXES.domainName)?await(async()=>{const e=n.parent().find(".spinner-border");n.attr("readonly",!0),e.show();const t=await NtopUtils.resolveDNS($(a).val());return n.removeAttr("readonly"),e.hide(),t.rc<0?(a.setCustomValidity(t.rc_str),[!1,t.rc_str_hr]):(a.setCustomValidity(""),[!0,"Success"])})():e.data.cannotBeEmpty&&e.isInputEmpty?(a.setCustomValidity("Please fill the input."),[!1,e.data.validationEmptyMessage||i18n_ext.missing_field]):a.validity.patternMismatch?(a.setCustomValidity("Pattern mismatch."),[!1,e.data.validationMessage||i18n_ext.invalid_field]):a.validity.rangeOverflow?(a.setCustomValidity("Value exceed the maximum value."),[!1,e.data.rangeOverflowMessage||i18n_ext.invalid_field]):a.validity.rangeUnderflow?(a.setCustomValidity("Value is under the minimum value."),[!1,e.data.rangeUnderflowMessage||i18n_ext.invalid_field]):(a.setCustomValidity(""),[!0,"Success"]),i=async()=>{const e={data:{validationMessage:n.data("validationMessage"),validationEmptyMessage:n.data("validationEmptyMessage"),cannotBeEmpty:"required"===n.attr("required")||1==n.data("validationNotEmpty"),resolveDNS:n.data("validationResolvedns"),rangeOverflowMessage:n.data("validationRangeOverflowMessage"),rangeUnderflowMessage:n.data("validationUnderflowOverflowMessage")},isInputEmpty:"string"==typeof n.val()&&""==n.val().trim()},[t,a]=await s(e);let l=n.parent().find(".invalid-feedback");0==l.length&&(l=$("<span class='invalid-feedback'></span>")),t?(n.removeClass("is-invalid"),l.fadeOut(500,(function(){$(this).remove()}))):(n.addClass("is-invalid"),n.parent().append(l),l.text(a))};$(this).off("input").on("input",(function(t){e.currentState=e.createFormSnapshot(),-1!=l&&clearTimeout(l),n.attr("formnovalidate")||(l=setTimeout((()=>{i(),e.toggleFormSubmission()}),300),e.firstCloseAttempt=!1)})),$(this).off("invalid").on("invalid",(function(e){e.preventDefault(),n.attr("formnovalidate")||i()}))}))}getModalID(){return $(this.element).parents(".modal").attr("id")}toggleFormSubmission(){let e=!0;$(this.element).find("input:not(:disabled),select:not(:disabled),textarea:not(:disabled)").each((function(t,a){e&=a.validity.valid})),e?$(this.element).find("[type='submit'],[type='test']").removeAttr("disabled"):$(this.element).find("[type='submit'],[type='test']").attr("disabled","disabled")}cleanForm(){$(this.element).find("input,textarea,select").each((function(e,t){$(this).removeClass("is-valid").removeClass("is-invalid")})),$(this.element)[0].reset()}makeRequest(){const e=$(this.element).find(".invalid-feedback"),t=$(this.element).find("[type='submit']");let a=this.options.beforeSumbit(this.data);a.csrf=this.csrf,a=$.extend(a,this.options.submitOptions),t.attr("disabled","disabled");const n=this;if(this.options.endpoint){let l;l="post"==n.options.method?$.ajax({url:this.options.endpoint,data:JSON.stringify(a),method:n.options.method,dataType:"json",contentType:"application/json; charset=utf-8"}):$.get(this.options.endpoint,a),this.isSubmitting=!0,l.done((function(t,l){n.isSubmitting=!1,n.currentState=null,n.options.resetAfterSubmit&&n.cleanForm(),e.hide();n.options.onSubmitSuccess(t,a,n)&&(n.dialog.modal?n.dialog.modal("hide"):(n.dialog[0].hidden=!0,$(".modal-backdrop.fade.show").remove())),$(n.element).off("submit",n.submitHandler),n.delegateSubmit()})).fail((function(t,l,s){n.isSubmitting=!1;const i=t.responseJSON;void 0!==i.rc&&i.rc<0&&e.html(i.rc_str_hr).show(),n.options.onSubmitError(i,a,l,s)})).always((function(e){t.removeAttr("disabled")}))}else{n.currentState=null,e.hide();n.options.onSubmitSuccess({},a,n)&&(n.dialog.modal?n.dialog.modal("hide"):n.dialog[0].hidden=!0),$(n.element).off("submit",n.submitHandler),n.delegateSubmit(),t.removeAttr("disabled")}}delegateResetButton(){const e=this,t=$(this.element).find("[type='reset']");if(0==t.length)return;const a=NtopUtils.serializeFormArray($(this.element).serializeArray());t.click((function(t){t.preventDefault(),$(e.element).find("input:visible,select").each((function(e,t){const n=$(t).attr("name");$(t).val(a[n]).removeClass("is-invalid").removeClass("is-valid")}))}))}}const d={no_formatting:{id:"no_formatting",um:null,step:null,decimal:null,scale_values:null},number:{id:"number",um:["","K","M","G","T"],step:1e3,decimal:null,scale_values:null},bytes:{id:"bytes",um:["B","KB","MB","GB","TB","PB","EB"],step:1024,decimal:2,scale_values:null,absolute_value:!0},bps:{id:"bps",um:["bps","Kbps","Mbps","Gbps","Tbps","Pbps"],step:1e3,decimal:2,scale_values:8,absolute_value:!0},fps:{id:"fps",um:["flows/s","Kflows/s","Mflows/s","Gflows/s"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},pps:{id:"pps",um:["pps","Kpps","Mpps","Gpps","Tpps"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},ms:{id:"ms",um:["ms","s"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},percentage:{id:"percentage",um:["%"],step:101,decimal:0,scale_values:null,max_value:100,absolute_value:!0}};function p(e){let t=d[e],a=3;null!=t.decimal&&t.decimal>0&&(a=6);let n=0;return null!=t.um&&(n=Math.max(...t.um.map((e=>e.length)))),a+1+n}function _(e,t){let a=d[e];if(e==d.no_formatting.id||null==t)return null;null!=a.scale_values&&(t*=a.scale_values);let n=a.step;t<0&&(t*=-1);let l=0,s=a.um;for(;t>=n&&l<s.length;)t/=n,l+=1;return l}function f(e,t,a){let n=d[e];t|=n.absolute_value;return function(l){if(null==l)return"";if(e==d.no_formatting.id)return l;null!=n.scale_values&&(l*=n.scale_values);let s=l<0;s&&(l*=-1);let i=n.step,o=n.decimal,r=n.um,c=0;for(null!=n.max_value&&l>n.max_value&&(l=n.max_value);l>=i&&c<r.length&&!a||null!=a&&c<a;)l/=i,c+=1;return null!=o&&o>0?(l*=Math.pow(10,o),l=Math.round(l),l=(l/=Math.pow(10,o)).toFixed(o)):l=Math.round(l),s&&!t&&(l*=-1),`${`${l}`} ${`${r[c]}`}`}}const m={types:d,getUnitMeasureLen:p,getFormatter:f,getScaleFactorIndex:_};window.NtopUtils=a,window.datatableInitRefreshRows=function(e,t,a,n){var l=e.data("datatable"),s=l.resultset.data,i=e.data("dt-rr-timer"),o=e.data("dt-rr-ajax");n=n||{},i&&(clearInterval(i),e.removeData("dt-rr-timer")),o&&(o.abort(),e.removeData("dt-rr-ajax"));var c=[],u={};for(var d in s){var p=s[d];if(p[t]){var _=p[t];u[_]=d,c.push(_)}}if(!c)return!1;var f={custom_hosts:c.join(",")},m=l.options.url,h=!0,v=function(a){if("string"==typeof a&&(a=JSON.parse(a)),a){for(var s in a.data){var i=a.data[s],o=i[t];if(o&&u[o]){var c=u[o],d=l.rows[c],p=$("td",d);for(var _ in i){var f=p[r(e,_)],m=$(f),v=m.data("dt-rr-cur-val")||$(f).html(),g=n[_],b=i[_],y="";g&&(parseFloat(b)!=b&&console.warn("Invalid number: "+b),h||(y=" "+NtopUtils.drawTrend(parseFloat(b),parseFloat(v))),m.data("dt-rr-cur-val",b),b=g(b)),$(f).html(0!=b?b+y:"")}}}h=!1,e.removeData("dt-rr-ajax")}else console.error("Bad JSON result")};e.data("dt-rr-timer",setInterval((function(){e.data("dt-rr-ajax")||e.data("dt-rr-ajax",$.ajax({type:"GET",url:m,data:f,cache:!1,success:v}))}),a)),v(l.resultset)},window.datatableForEachRow=function(e,t){$("tr:not(:first)",e).each((function(e){var a;if("function"==typeof t)t.bind(this)(e);else for(a=0;a<t.length;a++)t[a].bind(this)(e)}))},window.datatableIsEmpty=s,window.datatableRemoveEmptyRow=function(e){$("tbody tr.emptyRow",$(e)).remove()},window.datatableAddEmptyRow=n,window.datatableGetNumDisplayedItems=l,window.datatableGetByForm=i,window.datatableUndoAddRow=function(e,t,a,l){a&&$(a).removeAttr("disabled").removeClass("disabled");var o=$(e).closest("form");$(e).remove(),aysUpdateForm(o);var r=i(o);s(r)&&n(r,t),l&&window[l](e)},window.datatableAddButtonCallback=o,window.datatableAddDeleteButtonCallback=function(e,t,a){o.bind(this)(e,a,"btn-danger",t,"javascript:void(0)",!0,"Delete")},window.datatableAddActionButtonCallback=function(e,t,a,n=!0,l=""){o.bind(this)(e,a,"btn-info",t,"javascript:void(0)",n,l)},window.datatableAddFilterButtonCallback=function(e,t,a,n="",l=!0){o.bind(this)(e,a,"btn-warning",t,"javascript:void(0)",l,n)},window.datatableAddLinkButtonCallback=function(e,t,a,n=""){o.bind(this)(e,a,"btn-info","",t,!0,n)},window.datatableMakeSelectUnique=function(e,t,a){function n(e,t,a,n){$("[id^="+t+"]").each((function(){var t=a($(this));t[0]!=e[0]&&n(t)}))}function l(e,t){if(t)e.removeAttr("disabled");else{var a=e.closest("select"),n=a.val()==e.val();if(e.attr("disabled","disabled"),n){var l=a.find("option:not([disabled])").first().val();a.val(l),a.attr("data-old-val",l)}}}function s(e,t,a){var s=$(this).attr("data-old-val")||"",i=$(this).val()||"",o=[];s==i&&(s=""),n($(this),e,t,(function(e){l(e.find("option[value='"+s+"']"),!0),l(e.find("option[value='"+i+"']"),!1),o.push(e)})),a($(this),s,i,o,l),$(this).attr("data-old-val",i)}var i=(a=NtopUtils.paramsExtend({on_change:$.noop,selector_fn:function(e){return e.find("select").first()}},a)).selector_fn(e);i.on("change",(function(){s.bind(this)(t,a.selector_fn,a.on_change)})),i.on("remove",(function(){$(this).val("").trigger("change")})),function(e,t,a){e.val(""),n(e,t,a,(function(e){e.trigger("change")}));var l=e.find("option:not([disabled])").first().val();e.val(l),e.trigger("change")}(i,t,a.selector_fn)},window.datatableIsLastPage=function(e){var t=$("#dt-bottom-details .pagination li:nth-last-child(3)",$(e));return!(1==t.length&&0==t.hasClass("active"))},window.datatableGetColumn=function(e,t,a){var n=e.data("datatable").resultset.data.filter((function(e){return e[t]===a}));if(n)return n[0]},window.datatableGetColumnIndex=r,window.$.fn.modalHandler=function(e){if(1!=this.length)throw new Error("Only a form element can by initialized!");const t=$.extend({csrf:"",endpoint:"",resetAfterSubmit:!0,dontDisableSubmit:!1,isSyncRequest:!1,method:"get",loadFormData:function(){},onModalInit:function(e){},onModalShow:function(){},beforeSumbit:function(){return{}},onSubmitSuccess:function(e){},onSubmitError:function(e,t,a){},onModalReset:function(e){}},e),a=new u(this,t);return a.delegateSubmit(),a},window.ebpfUtils=c,window.ntopFormatterUtils=m;var h={};window.makeUniqueValidator=function(e){return function(t){var a=t.val(),n=0;return!a||(e(t).each((function(){$(this).val()==a&&(n+=1)})),1==n)}},window.memberValueValidator=function(e){var t=e.val();return""===t||(NtopUtils.is_mac_address(t)||NtopUtils.is_network_mask(t,!0))},window.makePasswordPatternValidator=function(e){return function(t){return!t.val()||$(t).val().match(e)}},window.passwordMatchValidator=function(e){var t=$(e).closest("form").find("[data-passwordmatch]").not(e);return!e.val()||!t.val()||t.val()===e.val()},window.poolnameValidator=function(e){return!e.val()||$(e).val().match(/^[a-z0-9_]*$/)},window.passwordMatchRecheck=function(e){var t=$(e).find("[data-passwordmatch]"),a=0;t.each((function(){""!=$(this).val()&&a++})),a==t.length&&t.trigger("input")},window.hostOrMacValidator=function(e){var t=e.val();return""===t||(NtopUtils.is_mac_address(t)||NtopUtils.is_good_ipv4(t)||NtopUtils.is_good_ipv6(t))},window.ipAddressValidator=function(e){var t=e.val();return""===t||(NtopUtils.is_good_ipv4(t)||NtopUtils.is_good_ipv6(t))},window.bpfValidator=function(e,t=!1){var a=e.val();if(""===a.trim())return!0;var n=e.attr("name");h[n]||(h[n]={ajax_obj:null,valid:!0,timer:null,submit_remind:!1,last_val:null});var l=h[n],s=function(){l.timer=null;var e=function(e){l.ajax_obj=null,l.valid=e,l.last_val=a};l.last_val!==a?(l.ajax_obj&&l.ajax_obj.abort(),l.ajax_obj=$.ajax({type:"GET",url:`${http_prefix}/lua/pro/rest/v2/check/filter.lua`,async:!t,data:{query:a},error:function(){e(l.valid)},success:function(t){var a=!!t.response;e(a)}})):e(l.valid)};return t?s():l.last_val===a||(l.timer&&(clearTimeout(l.timer),l.submit_remind=!1),l.timer=setTimeout(s,250)),l.valid};const v=function(){let e={},t=[];return{ready:function(a){e[a]=!0,t.filter((e=>e.component_name==a)).forEach((e=>e.resolve())),t=t.filter((e=>e.component_name!=a))},on_ready:function(a){return new Promise(((n,l)=>{e[a]?n():t.push({resolve:n,component_name:a,completed:!1})}))}}}(),b=function(){let e={};return{is_array:function(e){return Array.isArray(e)},is_object:function(e){return"object"==typeof e&&!this.is_array(e)&&null!==e},clone:function(e){if(null==e)return null;if(this.is_object(e))return $.extend(!0,{},e);if(Array.isArray(e)){let t=[];for(let a=0;a<e.length;a+=1){let n=this.clone(e[a]);t.push(n)}return t}return e},object_to_array:function(e){if(null==e)return[];let t=[];for(let a in e)t.push(e[a]);return t},check_and_set_default_interval_time:function(e){if(null==x.get_url_entry("epoch_begin")||null==x.get_url_entry("epoch_end")){let e=Number.parseInt((Date.now()-18e5)/1e3),t=Number.parseInt(Date.now()/1e3);x.set_key_to_url("epoch_begin",e),x.set_key_to_url("epoch_end",t)}},from_utc_s_to_server_date:function(e){let t=1e3*e,a=new Date(t).getTimezoneOffset(),n=moment.tz(t,ntop_zoneinfo)._offset;return new Date(t+1e3*(n+a)*60)},from_utc_to_server_date_format:function(e,t){null==t&&(t="DD/MMM/YYYY HH:mm");let a=y.get_status(),n=a.epoch_begin,l=a.epoch_end;if(null!=n&&null!=l){let e=Number.parseInt(n);Number.parseInt(l)-e<=300&&(t="DD/MMM/YYYY HH:mm:ss")}let s=moment.tz(e,ntop_zoneinfo);return moment(e).format(t),s.format(t)},copy_object_keys:function(e,t,a=!1){if(null!=e)for(let n in e)null!=e[n]&&(1==a&&this.is_object(e[n])&&this.is_object(t[n])?this.copy_object_keys(e[n],t[n],a):t[n]=e[n])},set_http_globals_headers(t){e=t},http_request:async function(t,a,n,l){try{null==a&&(a={}),null==a.headers&&(a.headers={}),null!=a&&null!=a.headers&&null!=e&&(a.headers={...a.headers,...e});let n=await fetch(t,a);if(0==n.ok)return console.error(`http_request ${t}\n ok == false`),console.error(n),null;let s=await n.json();return 1==l?s:s.rsp}catch(e){if(console.error(e),1==n)throw e;return null}},download_URI:function(e,t){var a=document.createElement("a");a.download=t,a.href=e,document.body.appendChild(a),a.click(),document.body.removeChild(a)},get_random_string:function(){return Math.random().toString(16).substr(2,8)},string_hash_code:function(e){let t,a,n=0;if(0===e.length)return n;for(t=0;t<e.length;t++)a=e.charCodeAt(t),n=(n<<5)-n+a,n|=0;return n},mod:function(e,t){return(e%=t)<0&&(e+=t),e}}}(),y=function(){let e={},t={};const a=e=>b.clone(e),n=function(e,n){for(let l in t){if(l==n)continue;(0,t[l])(a(e))}};return{get_status:function(){return a(e)},update_subscribers:function(){const e=this.get_status();n(e)},on_status_change:function(e,n,l){if(t[e]=n,1==l){let e=this.get_status();n(a(e))}},replace_status:function(t,a){!function(t){e=t}(t),n(t,a)},add_obj_to_status:function(e,t){let a=this.get_status();b.copy_object_keys(e,a),this.replace_status(a,t)},add_value_to_status:function(e,t,a){let n=this.get_status();n[e]=t,this.replace_status(n,a)}}}(),w={},x=function(){let e={};return b.copy_object_keys(w,e),{get_url_params:function(){return window.location.search.substring(1)},get_url_search_params:function(e){null==e&&(e=this.get_url_params());return new URLSearchParams(e)},get_url_entries:function(e){return this.get_url_search_params(e).entries()},get_url_entry:function(e,t){let a=this.get_url_entries(t);for(const[t,n]of a)if(t==e)return n;return null},get_url_object:function(e){let t=this.get_url_entries(e),a={};for(const[e,n]of t)a[e]=n;return a},reload_url:function(){window.location.reload()},go_to_url:function(e){window.history.pushState({},"",window.location),window.location.replace(e)},replace_url:function(e){window.history.replaceState({},null,`?${e}`)},replace_url_and_reload:function(e){this.replace_url(e),this.reload_url()},serialize_param:function(e,t){return null==t&&(t=""),`${e}=${encodeURIComponent(t)}`},set_custom_key_serializer:function(t,a){e[t]=a},obj_to_url_params:function(t){let a=[];const n=this.serialize_param;for(let l in t){let s=e[l];null==s&&(s=n);let i=s(l,t[l]);a.push(i)}return a.join("&")},delete_params:function(e){let t=this.get_url_search_params();e.forEach((e=>{t.delete(e)})),this.replace_url(t.toString())},set_key_to_url:function(e,t){null==t&&(t="");let a=this.get_url_search_params();a.set(e,t),this.replace_url(a.toString())},add_obj_to_url:function(e,t){let a=this.obj_to_url_params(e),n=this.get_url_search_params(t),l=this.get_url_entries(a);for(const[e,t]of l)n.set(e,t);let s=n.toString();if(null!=t)return s;this.replace_url(s)}}}(),k={EPOCH_CHANGE:"epoch_change",FILTERS_CHANGE:"filters_change"},S={EPOCH_CHANGE:function(e,t){return e.epoch_begin!=t.epoch_begin||e.epoch_end!=t.epoch_end},FILTERS_CHANGE:function(e,t){return null==e.filters&&null!=t.filters||null!=e.filters&&null==t.filters||null!=e.filters&&null!=t.filters&&(e.filters.length!=t.filters.length||e.filters.some((e=>null==t.filters.find((t=>t.id==e.id)))))}},C=function(){const e="events_manager";let t={},a={};const n=e=>b.clone(e),l=function(e,t,a){for(let l in e){if(l==a)continue;(0,e[l])(n(t))}};y.on_status_change(e,(function(e){for(let n in k){if(1==(0,S[n])(e,t)){let t=a[n];l(t,e)}}t=e}),!0);const s=function(e,t,n){let s=a[e];null!=s&&l(s,t,n)},i=function(e,t,l,s){if(null==a[t]&&(a[t]={}),1==s){let e=y.get_status();l(n(e))}a[t][e]=l};return{emit_custom_event:function(e,t){s(e,t)},on_custom_event:function(e,t,a){i(e,t,a)},emit_event:function(t,a,n){s(t,a,n),y.add_obj_to_status(a,e)},on_event_change:function(e,t,a,n){i(e,t,a,n)}}}();function N(e,t,a,n,l){this.name=e,this.update_url=t,this.url_params=a,this.units=n,this.refresh=l,this.pieInterval;let s=[],i="",o=[],r=[],c=[];var u=[],d=[],p=[],_=function(e,t){var a=500,n=325,l=52,s=14,i=250,o=116;$(e).hasClass("pie-chart-small")&&(n=250,l=(o=(a=330)/5+15)/2);var r=d3.layout.pie().value((function(e){return 0==e.value&&(e.value=1),e.value})),c=d3.scale.category20(),u=d3.svg.arc().startAngle((function(e){return e.startAngle})).endAngle((function(e){return e.endAngle})).innerRadius(l).outerRadius(o),d=d3.select(e).append("svg:svg").attr("width",a).attr("height",n).attr("viewBox","0 0 "+a+" "+n).attr("preserveAspectRatio","xMidYMid"),p=d.append("svg:g").attr("class","arc").attr("transform","translate("+a/2+","+n/2+")"),_=d.append("svg:g").attr("class","label_group").attr("transform","translate("+a/2+","+n/2+")"),f=d.append("svg:g").attr("class","center_group").attr("transform","translate("+a/2+","+n/2+")");p.append("svg:circle").attr("fill","#EFEFEF").attr("r",o),f.append("svg:circle").attr("fill","white").attr("r",l);var m=null,h=null;t&&(f.append("svg:text").attr("class","label").attr("dy",-15).attr("text-anchor","middle").text("TOTAL"),h=f.append("svg:text").attr("class","total").attr("dy",7).attr("text-anchor","middle").text("Waiting..."),m=f.append("svg:text").attr("class","units").attr("dy",21).attr("text-anchor","middle").text(t));return[p,r,h,m,c,i,u,_,f,o,s]}(e,n),f=_[0],m=_[1],h=_[2],v=_[4],g=_[5],b=_[6],y=_[7],w=_[9],x=_[10];function k(e,t){return e.label<t.label?-1:e.label>t.label?1:0}function S(e,t){var a,n;d[t]?(a=d[t].startAngle,n=d[t].endAngle):!d[t]&&d[t-1]?(a=d[t-1].endAngle,n=d[t-1].endAngle):!d[t-1]&&d.length>0?(a=d[d.length-1].endAngle,n=d[d.length-1].endAngle):(a=0,n=0);t=d3.interpolate({startAngle:a,endAngle:n},{startAngle:e.startAngle,endAngle:e.endAngle});return function(e){var a=t(e);return b(a)}}function C(e,t){s0=2*Math.PI,e0=2*Math.PI;t=d3.interpolate({startAngle:e.startAngle,endAngle:e.endAngle},{startAngle:s0,endAngle:e0});return function(e){var a=t(e);return b(a)}}function N(e,t){var a;a=d[t]?(d[t].startAngle+d[t].endAngle-Math.PI)/2:!d[t]&&d[t-1]?(d[t-1].startAngle+d[t-1].endAngle-Math.PI)/2:!d[t-1]&&d.length>0?(d[d.length-1].startAngle+d[d.length-1].endAngle-Math.PI)/2:0;var n=(e.startAngle+e.endAngle-Math.PI)/2,l=d3.interpolateNumber(a,n);return function(e){var t=l(e);return"translate("+Math.cos(t)*(w+x)+","+Math.sin(t)*(w+x)+")"}}this.update=function(){$.ajax({type:"GET",url:this.update_url,data:this.url_params,success:function(e){let t;"object"==typeof e?t=e:"string"==typeof e&&(t=jQuery.parseJSON(e)),t&&function(e){e.rsp&&(e=e.rsp);e.sort(k),s=e,d=p,u=m(s);var t=0;function a(e,a,n){return e.name=s[a].label,e.value=s[a].value,e.url=s[a].url,t+=e.value,e.value>0}(p=u.filter(a)).length>0&&d.length>0&&(f.selectAll("circle").remove(),h&&h.text((function(){return(t/1024).toFixed(1)})),i=f.selectAll("path").data(p),i.enter().append("svg:path").attr("stroke","white").attr("stroke-width",.5).attr("fill",(function(e,t){return v(t)})).transition().duration(g).attrTween("d",S),i.transition().duration(g).attrTween("d",S),i.exit().transition().duration(g).attrTween("d",C).remove(),o=y.selectAll("line").data(p),o.enter().append("svg:line").attr("x1",0).attr("x2",0).attr("y1",-w-3).attr("y2",-w-8).attr("stroke","gray").attr("transform",(function(e){return"rotate("+(e.startAngle+e.endAngle)/2*(180/Math.PI)+")"})),o.transition().duration(g).attr("transform",(function(e){return"rotate("+(e.startAngle+e.endAngle)/2*(180/Math.PI)+")"})),o.exit().remove(),r=y.selectAll("text.value").data(p).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?5:-7})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){return(e.value/t*100).toFixed(1)+"%"})),r.enter().append("svg:text").attr("class","value").attr("transform",(function(e){return"translate("+Math.cos((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+","+Math.sin((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+")"})).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?5:-7})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){if(t<=1)return"";return(e.value/t*100).toFixed(1)+"%"})),r.transition().duration(g).attrTween("transform",N),r.exit().remove(),c=y.selectAll("text.units").data(p).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?17:5})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){return e.name})).on("click",(function(e){e.url&&(window.location.href=e.url)})),c.enter().append("svg:text").attr("class","units").attr("transform",(function(e){return"translate("+Math.cos((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+","+Math.sin((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+")"})).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?17:5})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){return e.name})).on("click",(function(e){e.url&&(window.location.href=e.url)})),c.transition().duration(g).attrTween("transform",N),c.exit().remove())}(t)}})},this.update(),this.update()}window.ntopng_events=k,window.ntopng_events_manager=C,window.ntopng_status_manager=y,window.ntopng_utility=b,window.ntopng_url_manager=x,window.ntopng_sync=v,window.ntopng_custom_events={SHOW_MODAL_FILTERS:"show_modal_filters",MODAL_FILTERS_APPLY:"modal_filters_apply",SHOW_GLOBAL_ALERT_INFO:"show_global_alert_info",VIS_DATA_LOADED:"vis_data_loaded",CHANGE_PAGE_TITLE:"change_page_title",DATATABLE_LOADED:"datatable_loaded",GET_INTERFACE_FATA:"get_interface_data"},N.prototype.setUrlParams=function(e){this.url_params=e,this.forceUpdate()},N.prototype.forceUpdate=function(e){this.stopInterval(),this.update(),this.startInterval()},N.prototype.setInterval=function(e){this.pieInterval=e},N.prototype.stopInterval=function(){clearInterval(this.pieInterval)},N.prototype.startInterval=function(){this.pieInterval=setInterval(this.update(),this.refresh)};const A={},T={db_analyze:function(e,t,a){const{dataPointIndex:n}=a,{filter:l}=a.w.config;let s;if(a.w.config.filtering_labels&&(s=a.w.config.filtering_labels[n]),a.w.config.labels&&a.w.config.labels[n],0==l.length||void 0===s)return;let i=ntopng_status_manager.get_status().filters;i.push({id:l[0],operator:"eq",value:s}),ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:i})},none:function(e,t,a){},standard:function(e,t,a){const{seriesIndex:n,dataPointIndex:l}=a,{series:s}=a.w.config;if(-1===n)return;if(void 0===s)return;const i=s[n];if(void 0!==i.base_url){const e=i.start_url||"",t=i.data[l].meta.url_query;location.href=`${i.base_url}?${e}${t}`}}},E={format_bytes:function(e,{config:t,seriesIndex:a,dataPointIndex:n}){return NtopUtils.bytesToSize(e)},format_pkts:function(e,{config:t,seriesIndex:a,dataPointIndex:n}){return NtopUtils.formatPackets(e)},format_value:function(e,{config:t,seriesIndex:a,dataPointIndex:n}){return NtopUtils.formatValue(e)},format_multiple_date:function(e,{config:t,seriesIndex:a,dataPointIndex:n}){return new Date(e[0])+" - "+new Date(e[1])},format_label_from_xy:function({series:e,seriesIndex:t,dataPointIndex:a,w:n}){const l=n.config.series[t].data[a],s=l.x,i=l.y;return`\n            <div class='apexcharts-theme-light apexcharts-active' id='test'>\n                <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n                    ${l.meta.label}\n                </div>\n                <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${n.config.xaxis.title.text}</b>: ${s}\n                    </div>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${n.config.yaxis[0].title.text}</b>: ${i}\n                    </div>\n                </div>\n            </div>`},format_label_from_xname:function({series:e,seriesIndex:t,dataPointIndex:a,w:n}){const l=n.config.series[t].data[a],s=l.name,i=l.y;return`\n            <div class='apexcharts-theme-light apexcharts-active' id='test'>\n                <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n                    ${l.meta.label}\n                </div>\n                <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${n.config.xaxis.title.text}</b>: ${s}\n                    </div>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${n.config.yaxis[0].title.text}</b>: ${i}\n                    </div>\n                </div>\n            </div>`}},P=E.format_value;class I{static registerWidget(e){if(null===e)throw new Error("The passed widget reference is null!");if(e.name in A)throw new Error(`The widget ${e.name} is already defined!`);A[e.name]=e}static getWidgetByName(e){if(e in A)return A[e];throw new Error(`Widget ${e} not found!`)}}class M{constructor(e,t={},a=0,n={}){this._fetchedData=[],this.name=e,this._updateTime=a,this._datasource=t,this._additionalParams=n}async init(){I.registerWidget(this),this._fetchedData=await this._fetchData(),this._updateTime>0&&setInterval((async()=>{await this.update(this._datasource.params)}),this._updateTime)}async destroy(){}async destroyAndUpdate(e={}){await this.destroy(),await this.update(e)}async updateByUrl(e){const t=new URL(`${location.origin}${this._datasource.name}`);let a=ntopng_url_manager.get_url_entries(e);for(const[e,n]of a)t.searchParams.set(e,n);this._datasource.endpoint=t.pathname+t.search,this._fetchedData=await this._fetchData()}async update(e={}){const t=new URL(`${location.origin}${this._datasource.name}`);for(const[a,n]of Object.entries(e))t.searchParams.set(a,n);this._datasource.endpoint=t.pathname+t.search,this._fetchedData=await this._fetchData()}async _fetchData(){const e=await fetch(`${http_prefix}${this._datasource.endpoint}`);return await e.json()}}const U=(e,t)=>{let a=t.position().top;const n=e.height(),l=$(window).height();if(n+a>=l){const s=l-a;s<=150?a=a-n+t.outerHeight():e.css({"max-height":s-20,"overflow-y":"auto"})}e.css("top",`${a}px`)};$(window).on("scroll",(function(){$("#n-navbar").height();$(this).scrollTop()>=32?$("#n-navbar").addClass("scrolled bg-light"):$("#n-navbar").removeClass("scrolled bg-light")})),$((()=>{const e=()=>{if(0==$(".sidebar-close-layer").length){const e=$("<div class='sidebar-close-layer' style='display:none'></div>");e.on("click",(function(){$("#n-sidebar").removeClass("active"),e.fadeOut((function(){$(this).remove()}))})),$("#wrapper").append(e),e.fadeIn()}else $(".sidebar-close-layer").fadeOut((function(){$(this).remove()}));$("#n-sidebar").toggleClass("active")};$("#n-sidebar a.submenu").bind({mouseenter:function(){let e=$(this).parent().find("div[id$='submenu']");U(e,$(this)),e.show()},mouseleave:function(){$(this).parent().find("div[id$='submenu']").hide()}}),$("div[id$='submenu']").bind({mouseenter:function(){$(this).show()},mouseleave:function(){$(this).hide()}}),$("button[data-bs-toggle='sidebar']").on("click",(function(){e()}))})),$(window).on("resize",(function(){const e=$("#n-sidebar").find("div.show[id$='submenu']");if(e.length>0){const t=e.parent().find("a[data-bs-toggle='collapse']");U(e,t)}}));const O=function(){const e={series:[],chart:{height:"100%",width:"100%",toolbar:{tools:{zoomout:!1,download:!1,zoomin:!1,zoom:" ",selection:!1,pan:!1,reset:!1}},events:{}},xaxis:{tooltip:{enabled:!1}},yaxis:{labels:{show:!0,style:{colors:[],fontSize:"11px",fontWeight:400,cssClass:""}},title:{rotate:-90,offsetY:0,offsetX:0,style:{fontSize:"11px",fontWeight:900,cssClass:""}},tooltip:{enabled:!1}},grid:{show:!1},legend:{show:!0}},t=function(e){e.xaxis.labels.formatter=function(e,{series:t,seriesIndex:a,dataPointIndex:n,w:l}){return b.from_utc_to_server_date_format(e)}},n=function(){let t=b.clone(e);return b.copy_object_keys({chart:{stacked:!0,type:"bar",zoom:{enabled:!0,type:"x"}},tooltip:{x:{format:"dd MMM yyyy HH:mm:ss"},y:{}},xaxis:{labels:{show:!0,datetimeUTC:!1,formatter:null},axisTicks:{show:!1},type:"datetime",axisBorder:{show:!0},convertedCatToNumeric:!1},dataLabels:{enabled:!1},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"}},t,!0),t}(),l=function(){let t=b.clone(e);return b.copy_object_keys({chart:{stacked:!0,type:"area",zoom:{enabled:!0,type:"x"}},tooltip:{x:{format:"dd MMM yyyy HH:mm:ss"},y:{}},xaxis:{labels:{show:!0,datetimeUTC:!1,formatter:null},axisTicks:{show:!1},type:"datetime",axisBorder:{show:!0},convertedCatToNumeric:!1},dataLabels:{enabled:!1},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"}},t,!0),t}(),s=function(){let t=b.clone(e),n={chart:{stacked:!0,type:"polarArea",height:400},yaxis:{show:!0,labels:{formatter:a.bytesToSize}},dataLabels:{enabled:!0,formatter:function(e,t){return e?`${e.toFixed(1)}%`:"0%"}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},tooltip:{y:{formatter:a.bytesToSize}}};return b.copy_object_keys(n,t,!0),t}(),i=function(){let t=b.clone(e),n={chart:{stacked:!0,type:"donut",height:400},yaxis:{show:!0,labels:{formatter:a.bytesToSize}},dataLabels:{enabled:!0,formatter:function(e,t){return e?`${e.toFixed(1)}%`:"0%"}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},tooltip:{y:{formatter:a.bytesToSize}}};return b.copy_object_keys(n,t,!0),t}(),o=function(){let t=b.clone(e),n={chart:{stacked:!0,type:"pie",height:400},yaxis:{show:!0,labels:{formatter:a.bytesToSize}},dataLabels:{enabled:!0,formatter:function(e,t){return e?`${e.toFixed(1)}%`:"0%"}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},tooltip:{y:{formatter:a.bytesToSize}}};return b.copy_object_keys(n,t,!0),t}(),r=function(){let t=b.clone(e);return b.copy_object_keys({chart:{type:"line",zoom:{enabled:!0,type:"x"}},tooltip:{shared:!0,x:{format:"dd MMM yyyy HH:mm:ss"},y:{}},xaxis:{labels:{show:!1,datetimeUTC:!1,formatter:null},axisTicks:{show:!0},type:"datetime",axisBorder:{show:!0},convertedCatToNumeric:!1},stroke:{show:!0,width:2,curve:"smooth"},grid:{show:!0},dataLabels:{enabled:!1}},t,!0),t}(),c=function({series:e,seriesIndex:t,dataPointIndex:a,w:n}){const l=n.config.series[t].data[a],s=l.name,i=l.y;return`\n          <div class='apexcharts-theme-light apexcharts-active' id='test'>\n              <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n                  ${l.meta.label}\n              </div>\n              <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n                  <div class='apexcharts-tooltip-text text-left'>\n                      <b>${n.config.xaxis.title.text}</b>: ${s}\n                  </div>\n                  <div class='apexcharts-tooltip-text text-left'>\n                      <b>${n.config.yaxis[0].title.text}</b>: ${i}\n                  </div>\n              </div>\n          </div>`},u=function(){let t=b.clone(e),a={chart:{width:"100%",height:"100%",stacked:!0,type:"bubble",zoom:{autoScaleYaxis:!0}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},events:{dataPointSelection:"standard"},grid:{padding:{left:6}},xaxis:{type:"numeric",labels:{}},yaxis:{type:"numeric",forceNiceScale:!0,labels:{}},dataLabels:{enabled:!1},tooltip:{custom:c}};return b.copy_object_keys(a,t,!0),t}();return{typeChart:{TS_LINE:"TS_LINE",TS_STACKED:"TS_STACKED",TS_COLUMN:"TS_COLUMN",PIE:"PIE",DONUT:"DONUT",RADAR:"RADAR",BUBBLE:"BUBBLE",BASE:"BASE"},newChart:function(c){let d,p={};if(c==this.typeChart.TS_STACKED)p=b.clone(l),t(p);else if(c==this.typeChart.TS_LINE)p=b.clone(r),t(p);else if(c==this.typeChart.TS_COLUMN)p=b.clone(n),t(p);else if(c==this.typeChart.PIE)p=b.clone(o);else if(c==this.typeChart.DONUT)p=b.clone(i);else if(c==this.typeChart.POLAR)p=b.clone(s);else if(c==this.typeChart.BUBBLE)p=b.clone(u);else{if(c!=this.typeChart.BASE)throw`ntopChartApex::newChart: chart type = ${c} unsupported`;p=b.clone(e)}return{drawChart:function(e,t){if(t.yaxis&&t.yaxis.labels&&t.yaxis.labels.formatter){const e=t.yaxis.labels.formatter;"formatValue"==e?t.yaxis.labels.formatter=a.formatValue:"bytesToSize"==e&&(t.yaxis.labels.formatter=a.bytesToSize)}b.copy_object_keys(t,p,!0),d=new ApexCharts(e,p),d.render()},to_data_uri:async function(e){if(null==d)return;return(await d.dataURI(e)).imgURI},destroyChart:function(){null!=d&&d.destroy()},updateChart:function(e){null!=d&&d.updateOptions(e,!1,!1,!1)},updateSeries:function(e){null!=d&&d.updateSeries(e)},registerEvent:function(e,t,a=!1){p.chart.events[e]=t,1==a&&d.updateOptions(p)}}}}}(),j=function(){let e={};return{addHandler:function(t){let a=e[t.handlerId];return null==a&&(a=[],e[t.handlerId]=a),a.push((()=>{t.onClick()})),`window['_DataTableButtonsOnClick']('${t.handlerId}', '${a.length-1}')`},getHandler:function(t,a){let n=e[t];return null==n?null:n[a]},deleteHandlersById:function(t){e[t]=null}}}();window._DataTableButtonsOnClick=function(e,t){let a=j.getHandler(e,t);null!=a&&a()};class F{static getStdDatatableConfig(e=[],t="<'row'<'col-sm-2 d-inline-block'l><'col-sm-10 text-end d-inline-block'<'dt-search'f>B>rtip>"){return 0==e.length&&(t="fBrtip"),{dom:t,pagingType:"full_numbers",lengthMenu:[[10,20,50,100],[10,20,50,100]],language:{search:i18n.script_search,paginate:{previous:"&lt;",next:"&gt;",first:"«",last:"»"}},saveState:!0,responsive:!0,buttons:{buttons:e,dom:{button:{className:"btn btn-link"},container:{className:"d-inline-block"}}}}}static createLinkCallback(e){let t="";return t=`onclick="${j.addHandler(e.handler)}"`,`<a href=#\n                   ${t}>\n                   ${e.text||""}\n                </a>`}static createActionButtons(e=[]){const t=[];e.forEach(((e,a)=>{let n="";if(e.handler){n=`onclick="${j.addHandler(e.handler)}"`}let l=`\n            <li>\n                <a\n                    ${e.href||e.modal?`href='${e.href||e.modal}'`:""}\n                    ${n}\n                    ${e.onclick?`onclick='${e.onclick}'`:""}\n                    ${e.modal?"data-bs-toggle='modal'":""}\n                    class='dropdown-item ${e.class?e.class:""}'\n                    ${e.hidden?"style='display: none'":""}\n                    ${e.external?"target='_about'":""}\n                    >\n                    <i class='fas ${e.icon}'></i> ${e.title||""}\n                </a>\n            </li>\n            `;t.push(l)}));return`<div class='dropdown'><button type="button" class="btn btn-sm btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false"><i class="fas fa-align-justify"></i></button>${`<ul class="dropdown-menu">${t.join("")}</ul>`}</div>`}static deleteButtonHandlers(e){j.deleteHandlersById(e)}static setAjaxConfig(e,t,a="",n="get",l={}){return e.ajax={url:t,type:n,dataSrc:a,data:function(e){return $.extend({},e,l)}},e}static extendConfig(e,t){return t.hasFilters&&(t.stateSaveCallback=function(e,t){localStorage.setItem("DataTables_"+e.sInstance,JSON.stringify(t))},t.stateLoadCallback=function(e){return JSON.parse(localStorage.getItem("DataTables_"+e.sInstance))},t.stateSaveParams=function(e,t){$("[data-filter]").each((function(){const e=$(this).find("li.active").data("filter-key");e&&(t.filters||(t.filters={}),t.filters[$(this).data("filter")]=e)}))}),$.extend({},e,t)}static secondsToHHMMSS(e){const t=e=>`${e}`.padStart(2,"0"),a=e%60,n=Math.floor(e/60)%60;return`${t(Math.floor(e/3600))}:${t(n)}:${t(a)}`}static openEditModalByQuery(e){const t=new URLSearchParams(window.location.search);if(!t.has(e.paramName))return;const a=t.get(e.paramName),n=e.datatableInstance.data().toArray().find((t=>t[e.paramName]==a));if("function"==typeof e.cancelIf&&e.cancelIf(n))return;const l=$(`#${e.modalHandler.getModalID()}`);if(void 0!==n&&(e.modalHandler.invokeModalInit(n),l.modal("show")),!t.has("referer"))return void l.on("hidden.bs.modal",(function(t){const a=new URL(window.location.href);a.searchParams.delete(e.paramName),history.replaceState({},"",a.toString())}));const s=t.get("referer");l.on("hidden.bs.modal",(function(e){window.location=s}))}static addToggleColumnsDropdown(e,t=((e,t)=>{})){if(void 0===e)throw"The $table is undefined!";const a=e.table().node().id;F._loadColumnsVisibility(e).then((function(n){let l=[-1];n.success?l=n.columns.map((e=>parseInt(e))):console.warn(n.message);const s=[],i=[],o=$(e.context[0].nTableWrapper);e.columns().every((function(t){e.column(t).visible()?s.push({index:t,name:this.header().textContent,label:this.i18n.name}):i.push(t)}));const r=$('\n                <div class="btn-group">\n                    <button type="button" class="btn btn-link dropdown-toggle" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\n                        <i class="fas fa-eye"></i>\n                    </button>\n                </div>\n            '),c=$('<div class="dropdown-menu dropdown-menu-right" style=\'width: max-content;\'><h6 class="dropdown-header">Show Columns</h6></div>'),u=$("<div class='px-4'></div>");for(let n=0;n<s.length;n++){const o=s[n];if(""==o.name)continue;const r=`toggle-${o.name.split().join("_")}`,c=-1===l.indexOf(o.index);if(!c){e.column(o.index).visible(!1)}const d=$(`<input class="form-check-input" ${c?"checked":""} type="checkbox" id="${r}">`),p=$(`\n                    <div class="form-check form-switch">\n                        <label class="form-check-label" for="${r}">\n                            ${o.name}\n                        </label>\n                    </div>\n                `);d.on("change",(function(n){$(".overlay").toggle(500);const l=e.column(o.index);l.visible(!l.visible());const s=l.visible(),r=[];e.columns().every((function(t){e.column(t).visible()||-1!==i.indexOf(t)||r.push(t)})),$.post(`${http_prefix}/lua/datatable_columns.lua`,{action:"save",table:a,columns:r.join(","),csrf:window.__CSRF_DATATABLE__}).then((function(e){e.success||console.warn(e.message)})),void 0!==t&&t(l,s)})),p.prepend(d),u.append(p)}c.on("click.bs.dropdown",(function(e){e.stopPropagation()})),r.append(c.append(u)),o.find(".dt-search").parent().append(r)}))}static async _loadColumnsVisibility(e){const t=e.table().node().id;return $.get(`${http_prefix}/lua/datatable_columns.lua?table=${t}&action=load`)}}class D{static alertSeverityAndType(e,t,a){return`${D.formatValueLabel(e,t,a)} ${D.formatValueLabel(a.alert_id,t,a)}`}static hideIfZero(e,t,n){let l=void 0!==e.color?e.color:"#aaa",s=void 0!==e.value?e.value:e;"display"===t&&0===parseInt(s)&&(l="#aaa");let i=`<span style='color: ${l}'>${a.fint(s)}</span>`;return void 0!==e.url&&(i=`<a href="${e.url}">${i}</a>`),i}static secondsToTime(e,t,n){return"display"===t?a.secondsToTime(e):e}static filterize(e,t,n,l,s,i,o,r){if(null!=o){if(o){return`<a class='tag-filter' data-tag-key='${e}' title='${s||t}' data-tag-value='${t}' data-tag-label='${l||n||t}' href='#'>${i||n||t}</a> <a href='${a.buildURL(`${http_prefix}/lua/pro/enterprise/snmp_device_details.lua?host=${t}`)}'data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`}return`<a class='tag-filter' data-tag-key='${e}' title='${s||t}' data-tag-value='${t}' data-tag-label='${l||n||t}' href='#'>${i||n||t}</a> <a href='${a.buildURL(`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${r}&snmp_port_idx=${t}`)}'data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`}return`<a class='tag-filter' data-tag-key='${e}' title='${s||t}' data-tag-value='${t}' data-tag-label='${l||n||t}' href='#'>${i||n||t}</a>`}static formatValueLabel(e,t,a){if("display"!==t)return e.value;let n=e.label;return e.color&&(n=`<span class='font-weight-bold' style='color: ${e.color}'>${n}</span>`),n}static formatMessage(e,t,a){if("display"!==t)return e.value;let n=e.descr;return e.shorten_descr&&(n=`<span title="${e.descr}">${e.shorten_descr}</span>`),n}static formatSubtype(e,t,a){if("display"!==t)return e;return D.filterize("subtype",e,e)}static getFormatGenericField(e){return function(t,a,n){if("display"!==a)return t.value;let l="";return void 0!==t.reference&&(l=t.reference),D.filterize(e,n[e].value,n[e].label,n[e].label,n[e].label)+" "+l}}static formatSNMPInterface(e,t,a){if("display"!==t)return e.value;let n=D.filterize("snmp_interface",e.value,e.label,e.label,e.label,null,!1,a.ip);return e.color&&(n=`<span class='font-weight-bold' style='color: ${e.color}'>${n}</span>`),n}static formatSNMPIP(e,t,a){return"display"!==t?e:D.filterize("ip",e,e,e,e,null,!0)}static formatProbeIP(e,t,a){if("display"!==t)return e;return D.filterize("probe_ip",e.value,e.label,e.label,e.label_long)}static formatHost(e,t,a){if("display"!==t)return e;let n="";void 0!==e.reference&&(n=e.reference);let l,s,i="";return e.label&&e.label!=e.value?(l="name",s=e.label_long,i=D.filterize("name",e.label_long,e.label,e.label,e.label_long)):(l="ip",s=e.value,i=D.filterize("ip",e.value,e.label,e.label,e.label_long)),a.vlan_id&&""!=a.vlan_id&&"0"!=a.vlan_id&&(i=D.filterize(l,`${s}@${a.vlan_id}`,`${e.label}@${a.vlan_id}`,`${e.label}@${a.vlan_id}`,`${e.label_long}@${a.vlan_id}`)),e.country&&(i+=D.filterize("country",e.country,e.country,e.country,e.country,' <img src="'+http_prefix+'/dist/images/blank.gif" class="flag flag-'+e.country.toLowerCase()+'"></a> ')),a.role&&"attacker"==a.role.value?i=i+" "+D.filterize("role",a.role.value,'<i class="fas fa-skull" title="'+a.role.label+'"></i>',a.role.label):a.role&&"victim"==a.role.value&&(i=i+" "+D.filterize("role",a.role.value,'<i class="fas fa-sad-tear" title="'+a.role.label+'"></i>',a.role.label)),a.role_cli_srv&&"client"==a.role_cli_srv.value?i=i+" "+D.filterize("role_cli_srv",a.role_cli_srv.value,'<i class="fas fa-long-arrow-alt-right" title="'+a.role_cli_srv.label+'"></i>',a.role_cli_srv.label):a.role_cli_srv&&"server"==a.role_cli_srv.value&&(i=i+" "+D.filterize("role_cli_srv",a.role_cli_srv.value,'<i class="fas fa-long-arrow-alt-left" title="'+a.role_cli_srv.label+'"></i>',a.role_cli_srv.label)),i+" "+n}static filterizeVlan(e,t,n,l,s,i){let o=l,r=s,c=i;return e.vlan&&0!=e.vlan.value&&(o=`${l}@${e.vlan.value}`,r=`${s}@${e.vlan.label}`,c=`${i}@${e.vlan.title}`),r=a.shortenLabel(r,16,"."),D.filterize(n,o,r,r,c)}static formatFlowTuple(e,t,a){let n=e.active_url?`<a href="${e.active_url}"><i class="fas fa-stream"></i></a>`:"",l="";if(e.cli_ip.name){let t="";e.cli_ip.label_long&&(t=e.cli_ip.value+" ["+e.cli_ip.label_long+"]"),l=D.filterizeVlan(e,a,"cli_name",e.cli_ip.name,e.cli_ip.label,t)}else l=D.filterizeVlan(e,a,"cli_ip",e.cli_ip.value,e.cli_ip.label,e.cli_ip.label_long);let s="";e.cli_ip.country&&"nil"!==e.cli_ip.country&&(s=D.filterize("cli_country",e.cli_ip.country,e.cli_ip.country,e.cli_ip.country,e.cli_ip.country,' <img src="'+http_prefix+'/dist/images/blank.gif" class="flag flag-'+e.cli_ip.country.toLowerCase()+'"></a> '));let i=e.cli_port&&e.cli_port>0?":"+D.filterize("cli_port",e.cli_port,e.cli_port):"",o="";1==e.cli_ip.blacklisted&&(o=" <i class='fas fa-ban fa-sm' title='"+i18n("hosts_stats.blacklisted")+"'></i>");let r="";if(e.srv_ip.name){let t="";e.srv_ip.label_long&&(t=e.srv_ip.value+" ["+e.srv_ip.label_long+"]"),r=D.filterizeVlan(e,a,"srv_name",e.srv_ip.name,e.srv_ip.label,t)}else r=D.filterizeVlan(e,a,"srv_ip",e.srv_ip.value,e.srv_ip.label,e.srv_ip.label_long);let c=e.cli_port&&e.cli_port>0?":"+D.filterize("srv_port",e.srv_port,e.srv_port):"",u="";e.srv_ip.country&&"nil"!==e.srv_ip.country&&(u=D.filterize("srv_country",e.srv_ip.country,e.srv_ip.country,e.srv_ip.country,e.srv_ip.country,' <img src="'+http_prefix+'/dist/images/blank.gif" class="flag flag-'+e.srv_ip.country.toLowerCase()+'"></a> '));let d="";1==e.srv_ip.blacklisted&&(d=" <i class='fas fa-ban fa-sm' title='"+i18n("hosts_stats.blacklisted")+"'></i>");let p="",_="";return a.cli_role&&("attacker"==a.cli_role.value?p+=D.filterize("role","attacker",'<i class="fas fa-skull" title="'+a.cli_role.label+'"></i>',a.cli_role.tag_label):"victim"==a.cli_role.value&&(p+=D.filterize("role","victim",'<i class="fas fa-sad-tear" title="'+a.cli_role.label+'"></i>',a.cli_role.tag_label))),a.srv_role&&("attacker"==a.srv_role.value?_+=D.filterize("role","attacker",'<i class="fas fa-skull" title="'+a.srv_role.label+'"></i>',a.srv_role.tag_label):"victim"==a.srv_role.value&&(_+=D.filterize("role","victim",'<i class="fas fa-sad-tear" title="'+a.srv_role.label+'"></i>',a.srv_role.tag_label))),`${n} ${l}${o}${s}${i} ${p} ${e.cli_ip.reference} <i class="fas fa-exchange-alt fa-lg" aria-hidden="true"></i> ${r}${d}${u}${c} ${_} ${e.srv_ip.reference}`}static formatNameDescription(e,t,a){if("display"!==t)return e.name;return D.filterize("alert_id",e.value,e.name,e.fullname,e.fullname)}static applyCellStyle(e,t,a,n,l){t.highlight&&$(e).css("border-left","5px solid "+t.highlight)}}function L(e,t){const a=Object.create(null),n=e.split(",");for(let e=0;e<n.length;e++)a[n[e]]=!0;return t?e=>!!a[e.toLowerCase()]:e=>!!a[e]}window.do_pie=function(e,t,a,n,l){var s=new N(e,t,a,n,l);return l&&s.setInterval(setInterval((function(){s.update()}),l)),s},window.DataTableUtils=F,window.DataTableFiltersMenu=class{constructor({tableAPI:e,filterMenuKey:t,filterTitle:a,filters:n,columnIndex:l,icon:s=null,extraAttributes:i="",id:o=null,url:r=null,urlParams:c=null,removeAllEntry:u=!1,callbackFunction:d=null}){this.rawFilters=n,this.tableAPI=e,this.filterTitle=a,this.icon=s,this.filterMenuKey=t,this.columnIndex=l,this.preventUpdate=!1,this.currentFilterSelected=void 0,this.$datatableWrapper=$(e.context[0].nTableWrapper),this.extraAttributes=i,this.id=o,this.url=r,this.urlParams,this.removeAllEntry=u,this.callbackFunction=d}get selectedFilter(){return this.currentFilterSelected}init(){const e=this;return this.$datatableWrapper.on("init.dt",(function(){e._render(e.rawFilters)})),this.tableAPI.on("draw",(function(){e._update()})),e}_countEntries(e,t=[]){void 0===e&&console.error("DataTableFiltersMenu::_countEntries() => the passed regex is undefined!");const a=new RegExp(e);return t.filter((e=>a.test(e))).length}_createMenuEntry(e){const t=this;let a=$(`<li class='dropdown-item pointer'>${e.label} </li>`);if(t.url){if(a=$(`<li class='dropdown-item pointer'><a href=# class='p-1 standard-color'>${e.label} </li>`),1==e.currently_active){0==t.$dropdown.title.parent().find("i.fas").length&&t.$dropdown.title.parent().prepend("<i class='fas fa-filter'></i>");const n=a.html();t.$dropdown.title.html(n),t.$dropdown.container.find("li").removeClass("active"),"all"!==e.key&&a.addClass("active")}}else if(void 0!==e.regex&&(void 0===e.countable||e.countable)){const t=this.tableAPI.columns(this.columnIndex).data()[0],n=this._countEntries(e.regex,t),l=$(`<span class='counter'>(${n})</span>`);0==n&&a.hide(),a.append(l)}return a.on("click",(function(n){0==t.$dropdown.title.parent().find("i.fas").length&&t.$dropdown.title.parent().prepend("<i class='fas fa-filter'></i>");const l=a.html();if(t.$dropdown.title.html(l),t.$dropdown.container.find("li").removeClass("active"),"all"!==e.key&&a.addClass("active"),t.callbackFunction)return t.callbackFunction(t.tableAPI,e),void(e.callback&&e.callback());if(t.url){t.urlParams=window.location.search;const a=new URLSearchParams(t.urlParams);a.set(t.filterMenuKey,null!=typeof e.id?e.id:""),t.url,a.toString(),window.history.pushState("","",window.location.pathname+"?"+a.toString()),location.reload()}else t.preventUpdate=!0,e.callback&&e.callback(),t.tableAPI.column(t.columnIndex).search(e.regex,!0,!1).draw(),t.currentFilterSelected=e})),a}_createFilters(e){const t={};for(const a of e){const e=this._createMenuEntry(a);t[a.key]={filter:a,$node:e}}return t}_render(e){if(void 0===this.columnIndex)$(`<span id="${this.id}" ${this.extraAttributes} title="${this.filterTitle}">${this.icon||this.filterTitle}</span>`).insertBefore(this.$datatableWrapper.find(".dataTables_filter").parent());else{const t=$(`<div id='${this.filterMenuKey}_dropdown' class='dropdown d-inline'></div>`),a=$("<button class='btn-link btn dropdown-toggle' data-bs-toggle=\"dropdown\" type='button'></button>"),n=$(`<span class='filter-title'>${this.filterTitle}</span>`);a.append(n),this.$dropdown={container:t,title:n,button:a},this.filters=this._createFilters(e);const l=$(`<ul class='dropdown-menu dropdown-menu-lg-end scrollable-dropdown' id='${this.filterMenuKey}_dropdown_menu'></ul>`);for(const[e,t]of Object.entries(this.filters))l.append(t.$node);if(!this.removeAllEntry){const e=this._generateAllFilter();l.prepend(this._createMenuEntry(e))}t.append(a),t.append(l),t.insertBefore(this.$datatableWrapper.find(".dataTables_filter").parent()),this._selectFilterFromState(this.filterMenuKey)}}_selectFilterFromState(e){this.tableAPI.state&&this.tableAPI.state.loaded()&&this.tableAPI.state.loaded().filters&&tableAPI.state.save()}_generateAllFilter(){return{key:"all",label:i18n_ext.all,regex:"",countable:!1,callback:()=>{this.$dropdown.title.parent().find("i.fas.fa-filter").remove(),this.$dropdown.title.html(`${this.filterTitle}`)}}}_update(){if(void 0!==this.filters)if(this.preventUpdate)this.preventUpdate=!1;else for(const[e,t]of Object.entries(this.filters)){if(0==t.countable||0==t.filter.countable)continue;const e=this.tableAPI.columns(this.columnIndex).data()[0],a=this._countEntries(t.filter.regex,e);0==a?t.$node.hide():t.$node.show(),t.$node.find(".counter").text(`(${a})`),this.$dropdown.button.find(".counter").text(`(${a})`)}}},window.DataTableRenders=D,window.ChartWidget=class extends M{constructor(e,t="line",a={},n=0,l={}){super(e,a,n,l),this._chartType=t,this._chart={},this._$htmlChart=document.querySelector(`#canvas-widget-${e}`)}static registerEventCallback(e,t,a){setTimeout((async()=>{try{const n=I.getWidgetByName(e),l={chart:{events:{[t]:a}}};await n._chart.updateOptions(l)}catch(e){}}),1e3)}_generateConfig(){const e={series:[],tooltip:{enabledOnSeries:[0],x:{show:!0,format:"dd/MM/yyyy HH:mm:ss"},y:{formatter:function(e,{series:t,seriesIndex:a,dataPointIndex:n,w:l}){return e}},z:{show:!1}},chart:{type:this._chartType,events:{},height:"100%",toolbar:{show:!1}},xaxis:{labels:{style:{fontSize:"14px"}},tooltip:{enabled:!0,formatter:function(e){return e}}},yaxis:{labels:{style:{fontSize:"14px"}},tooltip:{enabled:!0,formatter:function(e){return e}}},zaxis:{labels:{style:{fontSize:"14px"}},tooltip:{enabled:!0}},dataLabels:{enabled:!0,style:{fontSize:"14px"}},labels:[],legend:{show:!0,fontSize:"14px",position:"bottom",onItemClick:{toggleDataSeries:!0}},plotOptions:{bar:{borderRadius:4,horizontal:!0}},noData:{text:"No Data",align:"center",verticalAlign:"middle",style:{fontSize:"24px"}}};if(this._additionalParams&&this._additionalParams.apex){return Object.assign(e,this._additionalParams.apex)}return e}_buildTooltip(e,t){if(e.tooltip.y={formatter:function(e,{series:t,seriesIndex:a,dataPointIndex:n,w:l}){return e}},t.tooltip){for(const a in t.tooltip)if("x"===a||"y"===a||"z"===a){const n=t.tooltip[a].formatter;e.tooltip[a]||(e.tooltip[a]={}),e.tooltip[a].formatter=E[n]||NtopUtils[n]}t.tooltip.custom&&(e.tooltip.custom=E[t.tooltip.custom]||NtopUtils[t.tooltip.custom])}}_buildAxisFormatter(e,t){const a=e[t];if(void 0!==a&&void 0!==a.labels&&void 0!==a.labels.ntop_utils_formatter&&"none"!==a.labels.ntop_utils_formatter){const e=a.labels.ntop_utils_formatter;void 0===NtopUtils[e]?console.error(`xaxis: Formatting function '${e}' didn't found inside NtopUtils.`):a.labels.formatter=NtopUtils[e]}}_buildDataLabels(e,t){if(t.dataLabels)for(const[a,n]of Object.entries(t.dataLabels))e.dataLabels[a]=n;let a=e.dataLabels.formatter;a&&E[a]&&(e.dataLabels.formatter=E[a])}_buildConfig(){const e=this._generateConfig(),t=this._fetchedData.rsp,a=["series","xaxis","yaxis","colors","labels","fill","filter","filtering_labels"];for(const n of a)void 0!==t[n]&&(void 0!==e[n]?e[n]=Object.assign(e[n],t[n]):e[n]=t[n]);if(t.events)for(const a in t.events)e.chart.events[a]=T[t.events[a]];return void 0!==t.horizontal_chart&&(e.plotOptions.bar.horizontal=t.horizontal_chart),this._buildTooltip(e,t),this._buildAxisFormatter(e,"xaxis"),this._buildAxisFormatter(e,"yaxis"),this._buildDataLabels(e,t),e}_initializeChart(){const e=this._buildConfig();this._chartConfig=e,this._chart=new ApexCharts(this._$htmlChart,this._chartConfig),this._chart.render()}async init(){await super.init(),this._initializeChart()}async destroy(){await super.destroy(),this._chart.destroy(),this._chart=null}async update(e={}){if(void 0!==this._chartConfig&&(e?await super.update(e):await super.updateByUrl(),null!=this._chart)){const{colors:e,series:t,dataLabels:a,labels:n,xaxis:l,filtering_labels:s}=this._fetchedData.rsp;if(this._chartConfig.colors=e,this._chartConfig.series=t,l&&l.categories&&(this._chartConfig.xaxis.categories=l.categories),s&&(this._chartConfig.filtering_labels=s),a){let e=this._chartConfig.dataLabels.formatter;this._chartConfig.dataLabels.formatter=e&&E[e]?E[e]:P}n&&(this._chartConfig.labels=n),this._chart.updateOptions(this._chartConfig,!0)}}async destroyAndUpdate(e={}){await super.destroyAndUpdate(e),this._initializeChart()}},window.WidgetUtils=I,window.ntopChartApex=O,$((function(){function e(e){if("mousedown"==e.type&&(e.metaKey||e.ctrlKey||2!==e.which))return;const t=$(this).data("id");$.post(`${http_prefix}/lua/update_blog_posts.lua`,{blog_notification_id:t,csrf:window.__BLOG_NOTIFICATION_CSRF__},(e=>{if(e.success){$(this).off("click").off("mousedown").attr("data-read","true").data("read","true").find(".badge").remove();const e=$(".blog-notification[data-read='false']").length;0==e?$(".notification-bell").remove():$(".notification-bell").html(e)}}))}$(".blog-notification[data-read='false']").on("click",e).on("mousedown",e)}));const R=L("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt"),z=L("itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly");function B(e){return!!e||""===e}function V(e){if(_e(e)){const t={};for(let a=0;a<e.length;a++){const n=e[a],l=ge(n)?G(n):V(n);if(l)for(const e in l)t[e]=l[e]}return t}return ge(e)||ye(e)?e:void 0}const q=/;(?![^(]*\))/g,H=/:(.+)/;function G(e){const t={};return e.split(q).forEach((e=>{if(e){const a=e.split(H);a.length>1&&(t[a[0].trim()]=a[1].trim())}})),t}function W(e){let t="";if(ge(e))t=e;else if(_e(e))for(let a=0;a<e.length;a++){const n=W(e[a]);n&&(t+=n+" ")}else if(ye(e))for(const a in e)e[a]&&(t+=a+" ");return t.trim()}function K(e){if(!e)return null;let{class:t,style:a}=e;return t&&!ge(t)&&(e.class=W(t)),a&&(e.style=V(a)),e}const J=L("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot"),Y=L("svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view"),Z=L("area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr");function X(e,t){if(e===t)return!0;let a=he(e),n=he(t);if(a||n)return!(!a||!n)&&e.getTime()===t.getTime();if(a=be(e),n=be(t),a||n)return e===t;if(a=_e(e),n=_e(t),a||n)return!(!a||!n)&&function(e,t){if(e.length!==t.length)return!1;let a=!0;for(let n=0;a&&n<e.length;n++)a=X(e[n],t[n]);return a}(e,t);if(a=ye(e),n=ye(t),a||n){if(!a||!n)return!1;if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const a in e){const n=e.hasOwnProperty(a),l=t.hasOwnProperty(a);if(n&&!l||!n&&l||!X(e[a],t[a]))return!1}}return String(e)===String(t)}function Q(e,t){return e.findIndex((e=>X(e,t)))}const ee=e=>ge(e)?e:null==e?"":_e(e)||ye(e)&&(e.toString===xe||!ve(e.toString))?JSON.stringify(e,te,2):String(e),te=(e,t)=>t&&t.__v_isRef?te(e,t.value):fe(t)?{[`Map(${t.size})`]:[...t.entries()].reduce(((e,[t,a])=>(e[`${t} =>`]=a,e)),{})}:me(t)?{[`Set(${t.size})`]:[...t.values()]}:!ye(t)||_e(t)||$e(t)?t:String(t),ae={},ne=[],le=()=>{},se=()=>!1,ie=/^on[^a-z]/,oe=e=>ie.test(e),re=e=>e.startsWith("onUpdate:"),ce=Object.assign,ue=(e,t)=>{const a=e.indexOf(t);a>-1&&e.splice(a,1)},de=Object.prototype.hasOwnProperty,pe=(e,t)=>de.call(e,t),_e=Array.isArray,fe=e=>"[object Map]"===ke(e),me=e=>"[object Set]"===ke(e),he=e=>"[object Date]"===ke(e),ve=e=>"function"==typeof e,ge=e=>"string"==typeof e,be=e=>"symbol"==typeof e,ye=e=>null!==e&&"object"==typeof e,we=e=>ye(e)&&ve(e.then)&&ve(e.catch),xe=Object.prototype.toString,ke=e=>xe.call(e),$e=e=>"[object Object]"===ke(e),Se=e=>ge(e)&&"NaN"!==e&&"-"!==e[0]&&""+parseInt(e,10)===e,Ce=L(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),Ne=L("bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo"),Ae=e=>{const t=Object.create(null);return a=>t[a]||(t[a]=e(a))},Te=/-(\w)/g,Ee=Ae((e=>e.replace(Te,((e,t)=>t?t.toUpperCase():"")))),Pe=/\B([A-Z])/g,Ie=Ae((e=>e.replace(Pe,"-$1").toLowerCase())),Me=Ae((e=>e.charAt(0).toUpperCase()+e.slice(1))),Ue=Ae((e=>e?`on${Me(e)}`:"")),Oe=(e,t)=>!Object.is(e,t),je=(e,t)=>{for(let a=0;a<e.length;a++)e[a](t)},Fe=(e,t,a)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:a})},De=e=>{const t=parseFloat(e);return isNaN(t)?e:t};let Le,Re;class ze{constructor(e=!1){this.active=!0,this.effects=[],this.cleanups=[],!e&&Re&&(this.parent=Re,this.index=(Re.scopes||(Re.scopes=[])).push(this)-1)}run(e){if(this.active){const t=Re;try{return Re=this,e()}finally{Re=t}}}on(){Re=this}off(){Re=this.parent}stop(e){if(this.active){let t,a;for(t=0,a=this.effects.length;t<a;t++)this.effects[t].stop();for(t=0,a=this.cleanups.length;t<a;t++)this.cleanups[t]();if(this.scopes)for(t=0,a=this.scopes.length;t<a;t++)this.scopes[t].stop(!0);if(this.parent&&!e){const e=this.parent.scopes.pop();e&&e!==this&&(this.parent.scopes[this.index]=e,e.index=this.index)}this.active=!1}}}function Be(e){return new ze(e)}function Ve(e,t=Re){t&&t.active&&t.effects.push(e)}function qe(){return Re}function He(e){Re&&Re.cleanups.push(e)}const Ge=e=>{const t=new Set(e);return t.w=0,t.n=0,t},We=e=>(e.w&Xe)>0,Ke=e=>(e.n&Xe)>0,Je=new WeakMap;let Ye,Ze=0,Xe=1;const Qe=Symbol(""),et=Symbol("");class tt{constructor(e,t=null,a){this.fn=e,this.scheduler=t,this.active=!0,this.deps=[],this.parent=void 0,Ve(this,a)}run(){if(!this.active)return this.fn();let e=Ye,t=st;for(;e;){if(e===this)return;e=e.parent}try{return this.parent=Ye,Ye=this,st=!0,Xe=1<<++Ze,Ze<=30?(({deps:e})=>{if(e.length)for(let t=0;t<e.length;t++)e[t].w|=Xe})(this):at(this),this.fn()}finally{Ze<=30&&(e=>{const{deps:t}=e;if(t.length){let a=0;for(let n=0;n<t.length;n++){const l=t[n];We(l)&&!Ke(l)?l.delete(e):t[a++]=l,l.w&=~Xe,l.n&=~Xe}t.length=a}})(this),Xe=1<<--Ze,Ye=this.parent,st=t,this.parent=void 0,this.deferStop&&this.stop()}}stop(){Ye===this?this.deferStop=!0:this.active&&(at(this),this.onStop&&this.onStop(),this.active=!1)}}function at(e){const{deps:t}=e;if(t.length){for(let a=0;a<t.length;a++)t[a].delete(e);t.length=0}}function nt(e,t){e.effect&&(e=e.effect.fn);const a=new tt(e);t&&(ce(a,t),t.scope&&Ve(a,t.scope)),t&&t.lazy||a.run();const n=a.run.bind(a);return n.effect=a,n}function lt(e){e.effect.stop()}let st=!0;const it=[];function ot(){it.push(st),st=!1}function rt(){const e=it.pop();st=void 0===e||e}function ct(e,t,a){if(st&&Ye){let t=Je.get(e);t||Je.set(e,t=new Map);let n=t.get(a);n||t.set(a,n=Ge()),ut(n)}}function ut(e,t){let a=!1;Ze<=30?Ke(e)||(e.n|=Xe,a=!We(e)):a=!e.has(Ye),a&&(e.add(Ye),Ye.deps.push(e))}function dt(e,t,a,n,l,s){const i=Je.get(e);if(!i)return;let o=[];if("clear"===t)o=[...i.values()];else if("length"===a&&_e(e))i.forEach(((e,t)=>{("length"===t||t>=n)&&o.push(e)}));else switch(void 0!==a&&o.push(i.get(a)),t){case"add":_e(e)?Se(a)&&o.push(i.get("length")):(o.push(i.get(Qe)),fe(e)&&o.push(i.get(et)));break;case"delete":_e(e)||(o.push(i.get(Qe)),fe(e)&&o.push(i.get(et)));break;case"set":fe(e)&&o.push(i.get(Qe))}if(1===o.length)o[0]&&pt(o[0]);else{const e=[];for(const t of o)t&&e.push(...t);pt(Ge(e))}}function pt(e,t){const a=_e(e)?e:[...e];for(const e of a)e.computed&&_t(e);for(const e of a)e.computed||_t(e)}function _t(e,t){(e!==Ye||e.allowRecurse)&&(e.scheduler?e.scheduler():e.run())}const ft=L("__proto__,__v_isRef,__isVue"),mt=new Set(Object.getOwnPropertyNames(Symbol).filter((e=>"arguments"!==e&&"caller"!==e)).map((e=>Symbol[e])).filter(be)),ht=wt(),vt=wt(!1,!0),gt=wt(!0),bt=wt(!0,!0),yt=function(){const e={};return["includes","indexOf","lastIndexOf"].forEach((t=>{e[t]=function(...e){const a=oa(this);for(let e=0,t=this.length;e<t;e++)ct(a,0,e+"");const n=a[t](...e);return-1===n||!1===n?a[t](...e.map(oa)):n}})),["push","pop","shift","unshift","splice"].forEach((t=>{e[t]=function(...e){ot();const a=oa(this)[t].apply(this,e);return rt(),a}})),e}();function wt(e=!1,t=!1){return function(a,n,l){if("__v_isReactive"===n)return!e;if("__v_isReadonly"===n)return e;if("__v_isShallow"===n)return t;if("__v_raw"===n&&l===(e?t?Zt:Yt:t?Jt:Kt).get(a))return a;const s=_e(a);if(!e&&s&&pe(yt,n))return Reflect.get(yt,n,l);const i=Reflect.get(a,n,l);return(be(n)?mt.has(n):ft(n))?i:(e||ct(a,0,n),t?i:_a(i)?s&&Se(n)?i:i.value:ye(i)?e?ea(i):Xt(i):i)}}function xt(e=!1){return function(t,a,n,l){let s=t[a];if(la(s)&&_a(s)&&!_a(n))return!1;if(!e&&!la(n)&&(sa(n)||(n=oa(n),s=oa(s)),!_e(t)&&_a(s)&&!_a(n)))return s.value=n,!0;const i=_e(t)&&Se(a)?Number(a)<t.length:pe(t,a),o=Reflect.set(t,a,n,l);return t===oa(l)&&(i?Oe(n,s)&&dt(t,"set",a,n):dt(t,"add",a,n)),o}}const kt={get:ht,set:xt(),deleteProperty:function(e,t){const a=pe(e,t),n=Reflect.deleteProperty(e,t);return n&&a&&dt(e,"delete",t,void 0),n},has:function(e,t){const a=Reflect.has(e,t);return be(t)&&mt.has(t)||ct(e,0,t),a},ownKeys:function(e){return ct(e,0,_e(e)?"length":Qe),Reflect.ownKeys(e)}},$t={get:gt,set:(e,t)=>!0,deleteProperty:(e,t)=>!0},St=ce({},kt,{get:vt,set:xt(!0)}),Ct=ce({},$t,{get:bt}),Nt=e=>e,At=e=>Reflect.getPrototypeOf(e);function Tt(e,t,a=!1,n=!1){const l=oa(e=e.__v_raw),s=oa(t);a||(t!==s&&ct(l,0,t),ct(l,0,s));const{has:i}=At(l),o=n?Nt:a?ua:ca;return i.call(l,t)?o(e.get(t)):i.call(l,s)?o(e.get(s)):void(e!==l&&e.get(t))}function Et(e,t=!1){const a=this.__v_raw,n=oa(a),l=oa(e);return t||(e!==l&&ct(n,0,e),ct(n,0,l)),e===l?a.has(e):a.has(e)||a.has(l)}function Pt(e,t=!1){return e=e.__v_raw,!t&&ct(oa(e),0,Qe),Reflect.get(e,"size",e)}function It(e){e=oa(e);const t=oa(this);return At(t).has.call(t,e)||(t.add(e),dt(t,"add",e,e)),this}function Mt(e,t){t=oa(t);const a=oa(this),{has:n,get:l}=At(a);let s=n.call(a,e);s||(e=oa(e),s=n.call(a,e));const i=l.call(a,e);return a.set(e,t),s?Oe(t,i)&&dt(a,"set",e,t):dt(a,"add",e,t),this}function Ut(e){const t=oa(this),{has:a,get:n}=At(t);let l=a.call(t,e);l||(e=oa(e),l=a.call(t,e)),n&&n.call(t,e);const s=t.delete(e);return l&&dt(t,"delete",e,void 0),s}function Ot(){const e=oa(this),t=0!==e.size,a=e.clear();return t&&dt(e,"clear",void 0,void 0),a}function jt(e,t){return function(a,n){const l=this,s=l.__v_raw,i=oa(s),o=t?Nt:e?ua:ca;return!e&&ct(i,0,Qe),s.forEach(((e,t)=>a.call(n,o(e),o(t),l)))}}function Ft(e,t,a){return function(...n){const l=this.__v_raw,s=oa(l),i=fe(s),o="entries"===e||e===Symbol.iterator&&i,r="keys"===e&&i,c=l[e](...n),u=a?Nt:t?ua:ca;return!t&&ct(s,0,r?et:Qe),{next(){const{value:e,done:t}=c.next();return t?{value:e,done:t}:{value:o?[u(e[0]),u(e[1])]:u(e),done:t}},[Symbol.iterator](){return this}}}}function Dt(e){return function(...t){return"delete"!==e&&this}}const[Lt,Rt,zt,Bt]=function(){const e={get(e){return Tt(this,e)},get size(){return Pt(this)},has:Et,add:It,set:Mt,delete:Ut,clear:Ot,forEach:jt(!1,!1)},t={get(e){return Tt(this,e,!1,!0)},get size(){return Pt(this)},has:Et,add:It,set:Mt,delete:Ut,clear:Ot,forEach:jt(!1,!0)},a={get(e){return Tt(this,e,!0)},get size(){return Pt(this,!0)},has(e){return Et.call(this,e,!0)},add:Dt("add"),set:Dt("set"),delete:Dt("delete"),clear:Dt("clear"),forEach:jt(!0,!1)},n={get(e){return Tt(this,e,!0,!0)},get size(){return Pt(this,!0)},has(e){return Et.call(this,e,!0)},add:Dt("add"),set:Dt("set"),delete:Dt("delete"),clear:Dt("clear"),forEach:jt(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach((l=>{e[l]=Ft(l,!1,!1),a[l]=Ft(l,!0,!1),t[l]=Ft(l,!1,!0),n[l]=Ft(l,!0,!0)})),[e,a,t,n]}();function Vt(e,t){const a=t?e?Bt:zt:e?Rt:Lt;return(t,n,l)=>"__v_isReactive"===n?!e:"__v_isReadonly"===n?e:"__v_raw"===n?t:Reflect.get(pe(a,n)&&n in t?a:t,n,l)}const qt={get:Vt(!1,!1)},Ht={get:Vt(!1,!0)},Gt={get:Vt(!0,!1)},Wt={get:Vt(!0,!0)},Kt=new WeakMap,Jt=new WeakMap,Yt=new WeakMap,Zt=new WeakMap;function Xt(e){return la(e)?e:aa(e,!1,kt,qt,Kt)}function Qt(e){return aa(e,!1,St,Ht,Jt)}function ea(e){return aa(e,!0,$t,Gt,Yt)}function ta(e){return aa(e,!0,Ct,Wt,Zt)}function aa(e,t,a,n,l){if(!ye(e))return e;if(e.__v_raw&&(!t||!e.__v_isReactive))return e;const s=l.get(e);if(s)return s;const i=function(e){return e.__v_skip||!Object.isExtensible(e)?0:function(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}((e=>ke(e).slice(8,-1))(e))}(e);if(0===i)return e;const o=new Proxy(e,2===i?n:a);return l.set(e,o),o}function na(e){return la(e)?na(e.__v_raw):!(!e||!e.__v_isReactive)}function la(e){return!(!e||!e.__v_isReadonly)}function sa(e){return!(!e||!e.__v_isShallow)}function ia(e){return na(e)||la(e)}function oa(e){const t=e&&e.__v_raw;return t?oa(t):e}function ra(e){return Fe(e,"__v_skip",!0),e}const ca=e=>ye(e)?Xt(e):e,ua=e=>ye(e)?ea(e):e;function da(e){st&&Ye&&ut((e=oa(e)).dep||(e.dep=Ge()))}function pa(e,t){(e=oa(e)).dep&&pt(e.dep)}function _a(e){return!(!e||!0!==e.__v_isRef)}function fa(e){return ha(e,!1)}function ma(e){return ha(e,!0)}function ha(e,t){return _a(e)?e:new va(e,t)}class va{constructor(e,t){this.__v_isShallow=t,this.dep=void 0,this.__v_isRef=!0,this._rawValue=t?e:oa(e),this._value=t?e:ca(e)}get value(){return da(this),this._value}set value(e){e=this.__v_isShallow?e:oa(e),Oe(e,this._rawValue)&&(this._rawValue=e,this._value=this.__v_isShallow?e:ca(e),pa(this))}}function ga(e){pa(e)}function ba(e){return _a(e)?e.value:e}const ya={get:(e,t,a)=>ba(Reflect.get(e,t,a)),set:(e,t,a,n)=>{const l=e[t];return _a(l)&&!_a(a)?(l.value=a,!0):Reflect.set(e,t,a,n)}};function wa(e){return na(e)?e:new Proxy(e,ya)}class xa{constructor(e){this.dep=void 0,this.__v_isRef=!0;const{get:t,set:a}=e((()=>da(this)),(()=>pa(this)));this._get=t,this._set=a}get value(){return this._get()}set value(e){this._set(e)}}function ka(e){return new xa(e)}function $a(e){const t=_e(e)?new Array(e.length):{};for(const a in e)t[a]=Ca(e,a);return t}class Sa{constructor(e,t,a){this._object=e,this._key=t,this._defaultValue=a,this.__v_isRef=!0}get value(){const e=this._object[this._key];return void 0===e?this._defaultValue:e}set value(e){this._object[this._key]=e}}function Ca(e,t,a){const n=e[t];return _a(n)?n:new Sa(e,t,a)}class Na{constructor(e,t,a,n){this._setter=t,this.dep=void 0,this.__v_isRef=!0,this._dirty=!0,this.effect=new tt(e,(()=>{this._dirty||(this._dirty=!0,pa(this))})),this.effect.computed=this,this.effect.active=this._cacheable=!n,this.__v_isReadonly=a}get value(){const e=oa(this);return da(e),!e._dirty&&e._cacheable||(e._dirty=!1,e._value=e.effect.run()),e._value}set value(e){this._setter(e)}}const Aa=[];function Ta(e,...t){ot();const a=Aa.length?Aa[Aa.length-1].component:null,n=a&&a.appContext.config.warnHandler,l=function(){let e=Aa[Aa.length-1];if(!e)return[];const t=[];for(;e;){const a=t[0];a&&a.vnode===e?a.recurseCount++:t.push({vnode:e,recurseCount:0});const n=e.component&&e.component.parent;e=n&&n.vnode}return t}();if(n)Ia(n,a,11,[e+t.join(""),a&&a.proxy,l.map((({vnode:e})=>`at <${bi(a,e.type)}>`)).join("\n"),l]);else{const a=[`[Vue warn]: ${e}`,...t];l.length&&a.push("\n",...function(e){const t=[];return e.forEach(((e,a)=>{t.push(...0===a?[]:["\n"],...function({vnode:e,recurseCount:t}){const a=t>0?`... (${t} recursive calls)`:"",n=` at <${bi(e.component,e.type,!!e.component&&null==e.component.parent)}`,l=">"+a;return e.props?[n,...Ea(e.props),l]:[n+l]}(e))})),t}(l)),console.warn(...a)}rt()}function Ea(e){const t=[],a=Object.keys(e);return a.slice(0,3).forEach((a=>{t.push(...Pa(a,e[a]))})),a.length>3&&t.push(" ..."),t}function Pa(e,t,a){return ge(t)?(t=JSON.stringify(t),a?t:[`${e}=${t}`]):"number"==typeof t||"boolean"==typeof t||null==t?a?t:[`${e}=${t}`]:_a(t)?(t=Pa(e,oa(t.value),!0),a?t:[`${e}=Ref<`,t,">"]):ve(t)?[`${e}=fn${t.name?`<${t.name}>`:""}`]:(t=oa(t),a?t:[`${e}=`,t])}function Ia(e,t,a,n){let l;try{l=n?e(...n):e()}catch(e){Ua(e,t,a)}return l}function Ma(e,t,a,n){if(ve(e)){const l=Ia(e,t,a,n);return l&&we(l)&&l.catch((e=>{Ua(e,t,a)})),l}const l=[];for(let s=0;s<e.length;s++)l.push(Ma(e[s],t,a,n));return l}function Ua(e,t,a,n=!0){if(t){let n=t.parent;const l=t.proxy,s=a;for(;n;){const t=n.ec;if(t)for(let a=0;a<t.length;a++)if(!1===t[a](e,l,s))return;n=n.parent}const i=t.appContext.config.errorHandler;if(i)return void Ia(i,null,10,[e,l,s])}!function(e,t,a,n=!0){console.error(e)}(e,0,0,n)}let Oa=!1,ja=!1;const Fa=[];let Da=0;const La=[];let Ra=null,za=0;const Ba=[];let Va=null,qa=0;const Ha=Promise.resolve();let Ga=null,Wa=null;function Ka(e){const t=Ga||Ha;return e?t.then(this?e.bind(this):e):t}function Ja(e){Fa.length&&Fa.includes(e,Oa&&e.allowRecurse?Da+1:Da)||e===Wa||(null==e.id?Fa.push(e):Fa.splice(function(e){let t=Da+1,a=Fa.length;for(;t<a;){const n=t+a>>>1;tn(Fa[n])<e?t=n+1:a=n}return t}(e.id),0,e),Ya())}function Ya(){Oa||ja||(ja=!0,Ga=Ha.then(an))}function Za(e,t,a,n){_e(e)?a.push(...e):t&&t.includes(e,e.allowRecurse?n+1:n)||a.push(e),Ya()}function Xa(e){Za(e,Va,Ba,qa)}function Qa(e,t=null){if(La.length){for(Wa=t,Ra=[...new Set(La)],La.length=0,za=0;za<Ra.length;za++)Ra[za]();Ra=null,za=0,Wa=null,Qa(e,t)}}function en(e){if(Qa(),Ba.length){const e=[...new Set(Ba)];if(Ba.length=0,Va)return void Va.push(...e);for(Va=e,Va.sort(((e,t)=>tn(e)-tn(t))),qa=0;qa<Va.length;qa++)Va[qa]();Va=null,qa=0}}const tn=e=>null==e.id?1/0:e.id;function an(e){ja=!1,Oa=!0,Qa(e),Fa.sort(((e,t)=>tn(e)-tn(t)));try{for(Da=0;Da<Fa.length;Da++){const e=Fa[Da];e&&!1!==e.active&&Ia(e,null,14)}}finally{Da=0,Fa.length=0,en(),Oa=!1,Ga=null,(Fa.length||La.length||Ba.length)&&an(e)}}let nn,ln=[];function sn(e,t){var a,n;nn=e,nn?(nn.enabled=!0,ln.forEach((({event:e,args:t})=>nn.emit(e,...t))),ln=[]):"undefined"!=typeof window&&window.HTMLElement&&!(null===(n=null===(a=window.navigator)||void 0===a?void 0:a.userAgent)||void 0===n?void 0:n.includes("jsdom"))?((t.__VUE_DEVTOOLS_HOOK_REPLAY__=t.__VUE_DEVTOOLS_HOOK_REPLAY__||[]).push((e=>{sn(e,t)})),setTimeout((()=>{nn||(t.__VUE_DEVTOOLS_HOOK_REPLAY__=null,ln=[])}),3e3)):ln=[]}function on(e,t,...a){if(e.isUnmounted)return;const n=e.vnode.props||ae;let l=a;const s=t.startsWith("update:"),i=s&&t.slice(7);if(i&&i in n){const e=`${"modelValue"===i?"model":i}Modifiers`,{number:t,trim:s}=n[e]||ae;s&&(l=a.map((e=>e.trim()))),t&&(l=a.map(De))}let o,r=n[o=Ue(t)]||n[o=Ue(Ee(t))];!r&&s&&(r=n[o=Ue(Ie(t))]),r&&Ma(r,e,6,l);const c=n[o+"Once"];if(c){if(e.emitted){if(e.emitted[o])return}else e.emitted={};e.emitted[o]=!0,Ma(c,e,6,l)}}function rn(e,t,a=!1){const n=t.emitsCache,l=n.get(e);if(void 0!==l)return l;const s=e.emits;let i={},o=!1;if(!ve(e)){const n=e=>{const a=rn(e,t,!0);a&&(o=!0,ce(i,a))};!a&&t.mixins.length&&t.mixins.forEach(n),e.extends&&n(e.extends),e.mixins&&e.mixins.forEach(n)}return s||o?(_e(s)?s.forEach((e=>i[e]=null)):ce(i,s),n.set(e,i),i):(n.set(e,null),null)}function cn(e,t){return!(!e||!oe(t))&&(t=t.slice(2).replace(/Once$/,""),pe(e,t[0].toLowerCase()+t.slice(1))||pe(e,Ie(t))||pe(e,t))}let un=null,dn=null;function pn(e){const t=un;return un=e,dn=e&&e.type.__scopeId||null,t}function _n(e){dn=e}function fn(){dn=null}const mn=e=>hn;function hn(e,t=un,a){if(!t)return e;if(e._n)return e;const n=(...a)=>{n._d&&Ms(-1);const l=pn(t),s=e(...a);return pn(l),n._d&&Ms(1),s};return n._n=!0,n._c=!0,n._d=!0,n}function vn(e){const{type:t,vnode:a,proxy:n,withProxy:l,props:s,propsOptions:[i],slots:o,attrs:r,emit:c,render:u,renderCache:d,data:p,setupState:_,ctx:f,inheritAttrs:m}=e;let h,v;const g=pn(e);try{if(4&a.shapeFlag){const e=l||n;h=Ys(u.call(e,e,d,s,_,p,f)),v=r}else{h=Ys(t(s,t.length>1?{attrs:r,slots:o,emit:c}:null)),v=t.props?r:gn(r)}}catch(t){As.length=0,Ua(t,e,1),h=qs(Cs)}let b=h;if(v&&!1!==m){const e=Object.keys(v),{shapeFlag:t}=b;e.length&&7&t&&(i&&e.some(re)&&(v=bn(v,i)),b=Gs(b,v))}return a.dirs&&(b=Gs(b),b.dirs=b.dirs?b.dirs.concat(a.dirs):a.dirs),a.transition&&(b.transition=a.transition),h=b,pn(g),h}const gn=e=>{let t;for(const a in e)("class"===a||"style"===a||oe(a))&&((t||(t={}))[a]=e[a]);return t},bn=(e,t)=>{const a={};for(const n in e)re(n)&&n.slice(9)in t||(a[n]=e[n]);return a};function yn(e,t,a){const n=Object.keys(t);if(n.length!==Object.keys(e).length)return!0;for(let l=0;l<n.length;l++){const s=n[l];if(t[s]!==e[s]&&!cn(a,s))return!0}return!1}function wn({vnode:e,parent:t},a){for(;t&&t.subTree===e;)(e=t.vnode).el=a,t=t.parent}const xn=e=>e.__isSuspense,kn={name:"Suspense",__isSuspense:!0,process(e,t,a,n,l,s,i,o,r,c){null==e?function(e,t,a,n,l,s,i,o,r){const{p:c,o:{createElement:u}}=r,d=u("div"),p=e.suspense=Sn(e,l,n,t,d,a,s,i,o,r);c(null,p.pendingBranch=e.ssContent,d,null,n,p,s,i),p.deps>0?($n(e,"onPending"),$n(e,"onFallback"),c(null,e.ssFallback,t,a,n,null,s,i),An(p,e.ssFallback)):p.resolve()}(t,a,n,l,s,i,o,r,c):function(e,t,a,n,l,s,i,o,{p:r,um:c,o:{createElement:u}}){const d=t.suspense=e.suspense;d.vnode=t,t.el=e.el;const p=t.ssContent,_=t.ssFallback,{activeBranch:f,pendingBranch:m,isInFallback:h,isHydrating:v}=d;if(m)d.pendingBranch=p,Ds(p,m)?(r(m,p,d.hiddenContainer,null,l,d,s,i,o),d.deps<=0?d.resolve():h&&(r(f,_,a,n,l,null,s,i,o),An(d,_))):(d.pendingId++,v?(d.isHydrating=!1,d.activeBranch=m):c(m,l,d),d.deps=0,d.effects.length=0,d.hiddenContainer=u("div"),h?(r(null,p,d.hiddenContainer,null,l,d,s,i,o),d.deps<=0?d.resolve():(r(f,_,a,n,l,null,s,i,o),An(d,_))):f&&Ds(p,f)?(r(f,p,a,n,l,d,s,i,o),d.resolve(!0)):(r(null,p,d.hiddenContainer,null,l,d,s,i,o),d.deps<=0&&d.resolve()));else if(f&&Ds(p,f))r(f,p,a,n,l,d,s,i,o),An(d,p);else if($n(t,"onPending"),d.pendingBranch=p,d.pendingId++,r(null,p,d.hiddenContainer,null,l,d,s,i,o),d.deps<=0)d.resolve();else{const{timeout:e,pendingId:t}=d;e>0?setTimeout((()=>{d.pendingId===t&&d.fallback(_)}),e):0===e&&d.fallback(_)}}(e,t,a,n,l,i,o,r,c)},hydrate:function(e,t,a,n,l,s,i,o,r){const c=t.suspense=Sn(t,n,a,e.parentNode,document.createElement("div"),null,l,s,i,o,!0),u=r(e,c.pendingBranch=t.ssContent,a,c,s,i);return 0===c.deps&&c.resolve(),u},create:Sn,normalize:function(e){const{shapeFlag:t,children:a}=e,n=32&t;e.ssContent=Cn(n?a.default:a),e.ssFallback=n?Cn(a.fallback):qs(Cs)}};function $n(e,t){const a=e.props&&e.props[t];ve(a)&&a()}function Sn(e,t,a,n,l,s,i,o,r,c,u=!1){const{p:d,m:p,um:_,n:f,o:{parentNode:m,remove:h}}=c,v=De(e.props&&e.props.timeout),g={vnode:e,parent:t,parentComponent:a,isSVG:i,container:n,hiddenContainer:l,anchor:s,deps:0,pendingId:0,timeout:"number"==typeof v?v:-1,activeBranch:null,pendingBranch:null,isInFallback:!0,isHydrating:u,isUnmounted:!1,effects:[],resolve(e=!1){const{vnode:t,activeBranch:a,pendingBranch:n,pendingId:l,effects:s,parentComponent:i,container:o}=g;if(g.isHydrating)g.isHydrating=!1;else if(!e){const e=a&&n.transition&&"out-in"===n.transition.mode;e&&(a.transition.afterLeave=()=>{l===g.pendingId&&p(n,o,t,0)});let{anchor:t}=g;a&&(t=f(a),_(a,i,g,!0)),e||p(n,o,t,0)}An(g,n),g.pendingBranch=null,g.isInFallback=!1;let r=g.parent,c=!1;for(;r;){if(r.pendingBranch){r.effects.push(...s),c=!0;break}r=r.parent}c||Xa(s),g.effects=[],$n(t,"onResolve")},fallback(e){if(!g.pendingBranch)return;const{vnode:t,activeBranch:a,parentComponent:n,container:l,isSVG:s}=g;$n(t,"onFallback");const i=f(a),c=()=>{g.isInFallback&&(d(null,e,l,i,n,null,s,o,r),An(g,e))},u=e.transition&&"out-in"===e.transition.mode;u&&(a.transition.afterLeave=c),g.isInFallback=!0,_(a,n,null,!0),u||c()},move(e,t,a){g.activeBranch&&p(g.activeBranch,e,t,a),g.container=e},next:()=>g.activeBranch&&f(g.activeBranch),registerDep(e,t){const a=!!g.pendingBranch;a&&g.deps++;const n=e.vnode.el;e.asyncDep.catch((t=>{Ua(t,e,0)})).then((l=>{if(e.isUnmounted||g.isUnmounted||g.pendingId!==e.suspenseId)return;e.asyncResolved=!0;const{vnode:s}=e;di(e,l,!1),n&&(s.el=n);const o=!n&&e.subTree.el;t(e,s,m(n||e.subTree.el),n?null:f(e.subTree),g,i,r),o&&h(o),wn(e,s.el),a&&0==--g.deps&&g.resolve()}))},unmount(e,t){g.isUnmounted=!0,g.activeBranch&&_(g.activeBranch,a,e,t),g.pendingBranch&&_(g.pendingBranch,a,e,t)}};return g}function Cn(e){let t;if(ve(e)){const a=Is&&e._c;a&&(e._d=!1,Es()),e=e(),a&&(e._d=!0,t=Ts,Ps())}if(_e(e)){const t=function(e){let t;for(let a=0;a<e.length;a++){const n=e[a];if(!Fs(n))return;if(n.type!==Cs||"v-if"===n.children){if(t)return;t=n}}return t}(e);e=t}return e=Ys(e),t&&!e.dynamicChildren&&(e.dynamicChildren=t.filter((t=>t!==e))),e}function Nn(e,t){t&&t.pendingBranch?_e(e)?t.effects.push(...e):t.effects.push(e):Xa(e)}function An(e,t){e.activeBranch=t;const{vnode:a,parentComponent:n}=e,l=a.el=t.el;n&&n.subTree===a&&(n.vnode.el=l,wn(n,l))}function Tn(e,t){if(ni){let a=ni.provides;const n=ni.parent&&ni.parent.provides;n===a&&(a=ni.provides=Object.create(n)),a[e]=t}}function En(e,t,a=!1){const n=ni||un;if(n){const l=null==n.parent?n.vnode.appContext&&n.vnode.appContext.provides:n.parent.provides;if(l&&e in l)return l[e];if(arguments.length>1)return a&&ve(t)?t.call(n.proxy):t}}function Pn(e,t){return jn(e,null,t)}function In(e,t){return jn(e,null,{flush:"post"})}function Mn(e,t){return jn(e,null,{flush:"sync"})}const Un={};function On(e,t,a){return jn(e,t,a)}function jn(e,t,{immediate:a,deep:n,flush:l}=ae){const s=ni;let i,o,r=!1,c=!1;if(_a(e)?(i=()=>e.value,r=sa(e)):na(e)?(i=()=>e,n=!0):_e(e)?(c=!0,r=e.some((e=>na(e)||sa(e))),i=()=>e.map((e=>_a(e)?e.value:na(e)?Ln(e):ve(e)?Ia(e,s,2):void 0))):i=ve(e)?t?()=>Ia(e,s,2):()=>{if(!s||!s.isUnmounted)return o&&o(),Ma(e,s,3,[u])}:le,t&&n){const e=i;i=()=>Ln(e())}let u=e=>{o=f.onStop=()=>{Ia(e,s,4)}},d=c?[]:Un;const p=()=>{if(f.active)if(t){const e=f.run();(n||r||(c?e.some(((e,t)=>Oe(e,d[t]))):Oe(e,d)))&&(o&&o(),Ma(t,s,3,[e,d===Un?void 0:d,u]),d=e)}else f.run()};let _;p.allowRecurse=!!t,_="sync"===l?p:"post"===l?()=>_s(p,s&&s.suspense):()=>function(e){Za(e,Ra,La,za)}(p);const f=new tt(i,_);return t?a?p():d=f.run():"post"===l?_s(f.run.bind(f),s&&s.suspense):f.run(),()=>{f.stop(),s&&s.scope&&ue(s.scope.effects,f)}}function Fn(e,t,a){const n=this.proxy,l=ge(e)?e.includes(".")?Dn(n,e):()=>n[e]:e.bind(n,n);let s;ve(t)?s=t:(s=t.handler,a=t);const i=ni;si(this);const o=jn(l,s.bind(n),a);return i?si(i):ii(),o}function Dn(e,t){const a=t.split(".");return()=>{let t=e;for(let e=0;e<a.length&&t;e++)t=t[a[e]];return t}}function Ln(e,t){if(!ye(e)||e.__v_skip)return e;if((t=t||new Set).has(e))return e;if(t.add(e),_a(e))Ln(e.value,t);else if(_e(e))for(let a=0;a<e.length;a++)Ln(e[a],t);else if(me(e)||fe(e))e.forEach((e=>{Ln(e,t)}));else if($e(e))for(const a in e)Ln(e[a],t);return e}function Rn(){const e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return dl((()=>{e.isMounted=!0})),fl((()=>{e.isUnmounting=!0})),e}const zn=[Function,Array],Bn={name:"BaseTransition",props:{mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:zn,onEnter:zn,onAfterEnter:zn,onEnterCancelled:zn,onBeforeLeave:zn,onLeave:zn,onAfterLeave:zn,onLeaveCancelled:zn,onBeforeAppear:zn,onAppear:zn,onAfterAppear:zn,onAppearCancelled:zn},setup(e,{slots:t}){const a=li(),n=Rn();let l;return()=>{const s=t.default&&Kn(t.default(),!0);if(!s||!s.length)return;let i=s[0];if(s.length>1)for(const e of s)if(e.type!==Cs){i=e;break}const o=oa(e),{mode:r}=o;if(n.isLeaving)return Hn(i);const c=Gn(i);if(!c)return Hn(i);const u=qn(c,o,n,a);Wn(c,u);const d=a.subTree,p=d&&Gn(d);let _=!1;const{getTransitionKey:f}=c.type;if(f){const e=f();void 0===l?l=e:e!==l&&(l=e,_=!0)}if(p&&p.type!==Cs&&(!Ds(c,p)||_)){const e=qn(p,o,n,a);if(Wn(p,e),"out-in"===r)return n.isLeaving=!0,e.afterLeave=()=>{n.isLeaving=!1,a.update()},Hn(i);"in-out"===r&&c.type!==Cs&&(e.delayLeave=(e,t,a)=>{Vn(n,p)[String(p.key)]=p,e._leaveCb=()=>{t(),e._leaveCb=void 0,delete u.delayedLeave},u.delayedLeave=a})}return i}}};function Vn(e,t){const{leavingVNodes:a}=e;let n=a.get(t.type);return n||(n=Object.create(null),a.set(t.type,n)),n}function qn(e,t,a,n){const{appear:l,mode:s,persisted:i=!1,onBeforeEnter:o,onEnter:r,onAfterEnter:c,onEnterCancelled:u,onBeforeLeave:d,onLeave:p,onAfterLeave:_,onLeaveCancelled:f,onBeforeAppear:m,onAppear:h,onAfterAppear:v,onAppearCancelled:g}=t,b=String(e.key),y=Vn(a,e),w=(e,t)=>{e&&Ma(e,n,9,t)},x=(e,t)=>{const a=t[1];w(e,t),_e(e)?e.every((e=>e.length<=1))&&a():e.length<=1&&a()},k={mode:s,persisted:i,beforeEnter(t){let n=o;if(!a.isMounted){if(!l)return;n=m||o}t._leaveCb&&t._leaveCb(!0);const s=y[b];s&&Ds(e,s)&&s.el._leaveCb&&s.el._leaveCb(),w(n,[t])},enter(e){let t=r,n=c,s=u;if(!a.isMounted){if(!l)return;t=h||r,n=v||c,s=g||u}let i=!1;const o=e._enterCb=t=>{i||(i=!0,w(t?s:n,[e]),k.delayedLeave&&k.delayedLeave(),e._enterCb=void 0)};t?x(t,[e,o]):o()},leave(t,n){const l=String(e.key);if(t._enterCb&&t._enterCb(!0),a.isUnmounting)return n();w(d,[t]);let s=!1;const i=t._leaveCb=a=>{s||(s=!0,n(),w(a?f:_,[t]),t._leaveCb=void 0,y[l]===e&&delete y[l])};y[l]=e,p?x(p,[t,i]):i()},clone:e=>qn(e,t,a,n)};return k}function Hn(e){if(Qn(e))return(e=Gs(e)).children=null,e}function Gn(e){return Qn(e)?e.children?e.children[0]:void 0:e}function Wn(e,t){6&e.shapeFlag&&e.component?Wn(e.component.subTree,t):128&e.shapeFlag?(e.ssContent.transition=t.clone(e.ssContent),e.ssFallback.transition=t.clone(e.ssFallback)):e.transition=t}function Kn(e,t=!1,a){let n=[],l=0;for(let s=0;s<e.length;s++){let i=e[s];const o=null==a?i.key:String(a)+String(null!=i.key?i.key:s);i.type===$s?(128&i.patchFlag&&l++,n=n.concat(Kn(i.children,t,o))):(t||i.type!==Cs)&&n.push(null!=o?Gs(i,{key:o}):i)}if(l>1)for(let e=0;e<n.length;e++)n[e].patchFlag=-2;return n}function Jn(e){return ve(e)?{setup:e,name:e.name}:e}const Yn=e=>!!e.type.__asyncLoader;function Zn(e){ve(e)&&(e={loader:e});const{loader:t,loadingComponent:a,errorComponent:n,delay:l=200,timeout:s,suspensible:i=!0,onError:o}=e;let r,c=null,u=0;const d=()=>{let e;return c||(e=c=t().catch((e=>{if(e=e instanceof Error?e:new Error(String(e)),o)return new Promise(((t,a)=>{o(e,(()=>t((u++,c=null,d()))),(()=>a(e)),u+1)}));throw e})).then((t=>e!==c&&c?c:(t&&(t.__esModule||"Module"===t[Symbol.toStringTag])&&(t=t.default),r=t,t))))};return Jn({name:"AsyncComponentWrapper",__asyncLoader:d,get __asyncResolved(){return r},setup(){const e=ni;if(r)return()=>Xn(r,e);const t=t=>{c=null,Ua(t,e,13,!n)};if(i&&e.suspense)return d().then((t=>()=>Xn(t,e))).catch((e=>(t(e),()=>n?qs(n,{error:e}):null)));const o=fa(!1),u=fa(),p=fa(!!l);return l&&setTimeout((()=>{p.value=!1}),l),null!=s&&setTimeout((()=>{if(!o.value&&!u.value){const e=new Error(`Async component timed out after ${s}ms.`);t(e),u.value=e}}),s),d().then((()=>{o.value=!0,e.parent&&Qn(e.parent.vnode)&&Ja(e.parent.update)})).catch((e=>{t(e),u.value=e})),()=>o.value&&r?Xn(r,e):u.value&&n?qs(n,{error:u.value}):a&&!p.value?qs(a):void 0}})}function Xn(e,{vnode:{ref:t,props:a,children:n}}){const l=qs(e,a,n);return l.ref=t,l}const Qn=e=>e.type.__isKeepAlive,el={name:"KeepAlive",__isKeepAlive:!0,props:{include:[String,RegExp,Array],exclude:[String,RegExp,Array],max:[String,Number]},setup(e,{slots:t}){const a=li(),n=a.ctx,l=new Map,s=new Set;let i=null;const o=a.suspense,{renderer:{p:r,m:c,um:u,o:{createElement:d}}}=n,p=d("div");function _(e){il(e),u(e,a,o,!0)}function f(e){l.forEach(((t,a)=>{const n=gi(t.type);!n||e&&e(n)||m(a)}))}function m(e){const t=l.get(e);i&&t.type===i.type?i&&il(i):_(t),l.delete(e),s.delete(e)}n.activate=(e,t,a,n,l)=>{const s=e.component;c(e,t,a,0,o),r(s.vnode,e,t,a,s,o,n,e.slotScopeIds,l),_s((()=>{s.isDeactivated=!1,s.a&&je(s.a);const t=e.props&&e.props.onVnodeMounted;t&&ei(t,s.parent,e)}),o)},n.deactivate=e=>{const t=e.component;c(e,p,null,1,o),_s((()=>{t.da&&je(t.da);const a=e.props&&e.props.onVnodeUnmounted;a&&ei(a,t.parent,e),t.isDeactivated=!0}),o)},On((()=>[e.include,e.exclude]),(([e,t])=>{e&&f((t=>tl(e,t))),t&&f((e=>!tl(t,e)))}),{flush:"post",deep:!0});let h=null;const v=()=>{null!=h&&l.set(h,ol(a.subTree))};return dl(v),_l(v),fl((()=>{l.forEach((e=>{const{subTree:t,suspense:n}=a,l=ol(t);if(e.type!==l.type)_(e);else{il(l);const e=l.component.da;e&&_s(e,n)}}))})),()=>{if(h=null,!t.default)return null;const a=t.default(),n=a[0];if(a.length>1)return i=null,a;if(!Fs(n)||!(4&n.shapeFlag||128&n.shapeFlag))return i=null,n;let o=ol(n);const r=o.type,c=gi(Yn(o)?o.type.__asyncResolved||{}:r),{include:u,exclude:d,max:p}=e;if(u&&(!c||!tl(u,c))||d&&c&&tl(d,c))return i=o,n;const _=null==o.key?r:o.key,f=l.get(_);return o.el&&(o=Gs(o),128&n.shapeFlag&&(n.ssContent=o)),h=_,f?(o.el=f.el,o.component=f.component,o.transition&&Wn(o,o.transition),o.shapeFlag|=512,s.delete(_),s.add(_)):(s.add(_),p&&s.size>parseInt(p,10)&&m(s.values().next().value)),o.shapeFlag|=256,i=o,xn(n.type)?n:o}}};function tl(e,t){return _e(e)?e.some((e=>tl(e,t))):ge(e)?e.split(",").includes(t):!!e.test&&e.test(t)}function al(e,t){ll(e,"a",t)}function nl(e,t){ll(e,"da",t)}function ll(e,t,a=ni){const n=e.__wdc||(e.__wdc=()=>{let t=a;for(;t;){if(t.isDeactivated)return;t=t.parent}return e()});if(rl(t,n,a),a){let e=a.parent;for(;e&&e.parent;)Qn(e.parent.vnode)&&sl(n,t,a,e),e=e.parent}}function sl(e,t,a,n){const l=rl(t,e,n,!0);ml((()=>{ue(n[t],l)}),a)}function il(e){let t=e.shapeFlag;256&t&&(t-=256),512&t&&(t-=512),e.shapeFlag=t}function ol(e){return 128&e.shapeFlag?e.ssContent:e}function rl(e,t,a=ni,n=!1){if(a){const l=a[e]||(a[e]=[]),s=t.__weh||(t.__weh=(...n)=>{if(a.isUnmounted)return;ot(),si(a);const l=Ma(t,a,e,n);return ii(),rt(),l});return n?l.unshift(s):l.push(s),s}}const cl=e=>(t,a=ni)=>(!ui||"sp"===e)&&rl(e,t,a),ul=cl("bm"),dl=cl("m"),pl=cl("bu"),_l=cl("u"),fl=cl("bum"),ml=cl("um"),hl=cl("sp"),vl=cl("rtg"),gl=cl("rtc");function bl(e,t=ni){rl("ec",e,t)}function yl(e,t){const a=un;if(null===a)return e;const n=hi(a)||a.proxy,l=e.dirs||(e.dirs=[]);for(let e=0;e<t.length;e++){let[a,s,i,o=ae]=t[e];ve(a)&&(a={mounted:a,updated:a}),a.deep&&Ln(s),l.push({dir:a,instance:n,value:s,oldValue:void 0,arg:i,modifiers:o})}return e}function wl(e,t,a,n){const l=e.dirs,s=t&&t.dirs;for(let i=0;i<l.length;i++){const o=l[i];s&&(o.oldValue=s[i].value);let r=o.dir[n];r&&(ot(),Ma(r,a,8,[e.el,o,e,t]),rt())}}function xl(e,t){return Cl("components",e,!0,t)||e}const kl=Symbol();function $l(e){return ge(e)?Cl("components",e,!1)||e:e||kl}function Sl(e){return Cl("directives",e)}function Cl(e,t,a=!0,n=!1){const l=un||ni;if(l){const a=l.type;if("components"===e){const e=gi(a,!1);if(e&&(e===t||e===Ee(t)||e===Me(Ee(t))))return a}const s=Nl(l[e]||a[e],t)||Nl(l.appContext[e],t);return!s&&n?a:s}}function Nl(e,t){return e&&(e[t]||e[Ee(t)]||e[Me(Ee(t))])}function Al(e,t,a,n){let l;const s=a&&a[n];if(_e(e)||ge(e)){l=new Array(e.length);for(let a=0,n=e.length;a<n;a++)l[a]=t(e[a],a,void 0,s&&s[a])}else if("number"==typeof e){l=new Array(e);for(let a=0;a<e;a++)l[a]=t(a+1,a,void 0,s&&s[a])}else if(ye(e))if(e[Symbol.iterator])l=Array.from(e,((e,a)=>t(e,a,void 0,s&&s[a])));else{const a=Object.keys(e);l=new Array(a.length);for(let n=0,i=a.length;n<i;n++){const i=a[n];l[n]=t(e[i],i,n,s&&s[n])}}else l=[];return a&&(a[n]=l),l}function Tl(e,t){for(let a=0;a<t.length;a++){const n=t[a];if(_e(n))for(let t=0;t<n.length;t++)e[n[t].name]=n[t].fn;else n&&(e[n.name]=n.fn)}return e}function El(e,t,a={},n,l){if(un.isCE||un.parent&&Yn(un.parent)&&un.parent.isCE)return qs("slot","default"===t?null:{name:t},n&&n());let s=e[t];s&&s._c&&(s._d=!1),Es();const i=s&&Pl(s(a)),o=js($s,{key:a.key||`_${t}`},i||(n?n():[]),i&&1===e._?64:-2);return!l&&o.scopeId&&(o.slotScopeIds=[o.scopeId+"-s"]),s&&s._c&&(s._d=!0),o}function Pl(e){return e.some((e=>!Fs(e)||e.type!==Cs&&!(e.type===$s&&!Pl(e.children))))?e:null}function Il(e){const t={};for(const a in e)t[Ue(a)]=e[a];return t}const Ml=e=>e?oi(e)?hi(e)||e.proxy:Ml(e.parent):null,Ul=ce(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>e.props,$attrs:e=>e.attrs,$slots:e=>e.slots,$refs:e=>e.refs,$parent:e=>Ml(e.parent),$root:e=>Ml(e.root),$emit:e=>e.emit,$options:e=>Rl(e),$forceUpdate:e=>e.f||(e.f=()=>Ja(e.update)),$nextTick:e=>e.n||(e.n=Ka.bind(e.proxy)),$watch:e=>Fn.bind(e)}),Ol={get({_:e},t){const{ctx:a,setupState:n,data:l,props:s,accessCache:i,type:o,appContext:r}=e;let c;if("$"!==t[0]){const o=i[t];if(void 0!==o)switch(o){case 1:return n[t];case 2:return l[t];case 4:return a[t];case 3:return s[t]}else{if(n!==ae&&pe(n,t))return i[t]=1,n[t];if(l!==ae&&pe(l,t))return i[t]=2,l[t];if((c=e.propsOptions[0])&&pe(c,t))return i[t]=3,s[t];if(a!==ae&&pe(a,t))return i[t]=4,a[t];Fl&&(i[t]=0)}}const u=Ul[t];let d,p;return u?("$attrs"===t&&ct(e,0,t),u(e)):(d=o.__cssModules)&&(d=d[t])?d:a!==ae&&pe(a,t)?(i[t]=4,a[t]):(p=r.config.globalProperties,pe(p,t)?p[t]:void 0)},set({_:e},t,a){const{data:n,setupState:l,ctx:s}=e;return l!==ae&&pe(l,t)?(l[t]=a,!0):n!==ae&&pe(n,t)?(n[t]=a,!0):!(pe(e.props,t)||"$"===t[0]&&t.slice(1)in e||(s[t]=a,0))},has({_:{data:e,setupState:t,accessCache:a,ctx:n,appContext:l,propsOptions:s}},i){let o;return!!a[i]||e!==ae&&pe(e,i)||t!==ae&&pe(t,i)||(o=s[0])&&pe(o,i)||pe(n,i)||pe(Ul,i)||pe(l.config.globalProperties,i)},defineProperty(e,t,a){return null!=a.get?e._.accessCache[t]=0:pe(a,"value")&&this.set(e,t,a.value,null),Reflect.defineProperty(e,t,a)}},jl=ce({},Ol,{get(e,t){if(t!==Symbol.unscopables)return Ol.get(e,t,e)},has:(e,t)=>"_"!==t[0]&&!R(t)});let Fl=!0;function Dl(e,t,a){Ma(_e(e)?e.map((e=>e.bind(t.proxy))):e.bind(t.proxy),t,a)}function Ll(e,t,a,n){const l=n.includes(".")?Dn(a,n):()=>a[n];if(ge(e)){const a=t[e];ve(a)&&On(l,a)}else if(ve(e))On(l,e.bind(a));else if(ye(e))if(_e(e))e.forEach((e=>Ll(e,t,a,n)));else{const n=ve(e.handler)?e.handler.bind(a):t[e.handler];ve(n)&&On(l,n,e)}}function Rl(e){const t=e.type,{mixins:a,extends:n}=t,{mixins:l,optionsCache:s,config:{optionMergeStrategies:i}}=e.appContext,o=s.get(t);let r;return o?r=o:l.length||a||n?(r={},l.length&&l.forEach((e=>zl(r,e,i,!0))),zl(r,t,i)):r=t,s.set(t,r),r}function zl(e,t,a,n=!1){const{mixins:l,extends:s}=t;s&&zl(e,s,a,!0),l&&l.forEach((t=>zl(e,t,a,!0)));for(const l in t)if(n&&"expose"===l);else{const n=Bl[l]||a&&a[l];e[l]=n?n(e[l],t[l]):t[l]}return e}const Bl={data:Vl,props:Gl,emits:Gl,methods:Gl,computed:Gl,beforeCreate:Hl,created:Hl,beforeMount:Hl,mounted:Hl,beforeUpdate:Hl,updated:Hl,beforeDestroy:Hl,beforeUnmount:Hl,destroyed:Hl,unmounted:Hl,activated:Hl,deactivated:Hl,errorCaptured:Hl,serverPrefetch:Hl,components:Gl,directives:Gl,watch:function(e,t){if(!e)return t;if(!t)return e;const a=ce(Object.create(null),e);for(const n in t)a[n]=Hl(e[n],t[n]);return a},provide:Vl,inject:function(e,t){return Gl(ql(e),ql(t))}};function Vl(e,t){return t?e?function(){return ce(ve(e)?e.call(this,this):e,ve(t)?t.call(this,this):t)}:t:e}function ql(e){if(_e(e)){const t={};for(let a=0;a<e.length;a++)t[e[a]]=e[a];return t}return e}function Hl(e,t){return e?[...new Set([].concat(e,t))]:t}function Gl(e,t){return e?ce(ce(Object.create(null),e),t):t}function Wl(e,t,a,n){const[l,s]=e.propsOptions;let i,o=!1;if(t)for(let r in t){if(Ce(r))continue;const c=t[r];let u;l&&pe(l,u=Ee(r))?s&&s.includes(u)?(i||(i={}))[u]=c:a[u]=c:cn(e.emitsOptions,r)||r in n&&c===n[r]||(n[r]=c,o=!0)}if(s){const t=oa(a),n=i||ae;for(let i=0;i<s.length;i++){const o=s[i];a[o]=Kl(l,t,o,n[o],e,!pe(n,o))}}return o}function Kl(e,t,a,n,l,s){const i=e[a];if(null!=i){const e=pe(i,"default");if(e&&void 0===n){const e=i.default;if(i.type!==Function&&ve(e)){const{propsDefaults:s}=l;a in s?n=s[a]:(si(l),n=s[a]=e.call(null,t),ii())}else n=e}i[0]&&(s&&!e?n=!1:!i[1]||""!==n&&n!==Ie(a)||(n=!0))}return n}function Jl(e,t,a=!1){const n=t.propsCache,l=n.get(e);if(l)return l;const s=e.props,i={},o=[];let r=!1;if(!ve(e)){const n=e=>{r=!0;const[a,n]=Jl(e,t,!0);ce(i,a),n&&o.push(...n)};!a&&t.mixins.length&&t.mixins.forEach(n),e.extends&&n(e.extends),e.mixins&&e.mixins.forEach(n)}if(!s&&!r)return n.set(e,ne),ne;if(_e(s))for(let e=0;e<s.length;e++){const t=Ee(s[e]);Yl(t)&&(i[t]=ae)}else if(s)for(const e in s){const t=Ee(e);if(Yl(t)){const a=s[e],n=i[t]=_e(a)||ve(a)?{type:a}:a;if(n){const e=Ql(Boolean,n.type),a=Ql(String,n.type);n[0]=e>-1,n[1]=a<0||e<a,(e>-1||pe(n,"default"))&&o.push(t)}}}const c=[i,o];return n.set(e,c),c}function Yl(e){return"$"!==e[0]}function Zl(e){const t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:null===e?"null":""}function Xl(e,t){return Zl(e)===Zl(t)}function Ql(e,t){return _e(t)?t.findIndex((t=>Xl(t,e))):ve(t)&&Xl(t,e)?0:-1}const es=e=>"_"===e[0]||"$stable"===e,ts=e=>_e(e)?e.map(Ys):[Ys(e)],as=(e,t,a)=>{if(t._n)return t;const n=hn(((...e)=>ts(t(...e))),a);return n._c=!1,n},ns=(e,t,a)=>{const n=e._ctx;for(const a in e){if(es(a))continue;const l=e[a];if(ve(l))t[a]=as(0,l,n);else if(null!=l){const e=ts(l);t[a]=()=>e}}},ls=(e,t)=>{const a=ts(t);e.slots.default=()=>a};function ss(){return{app:null,config:{isNativeTag:se,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let is=0;function os(e,t){return function(a,n=null){ve(a)||(a=Object.assign({},a)),null==n||ye(n)||(n=null);const l=ss(),s=new Set;let i=!1;const o=l.app={_uid:is++,_component:a,_props:n,_container:null,_context:l,_instance:null,version:Fi,get config(){return l.config},set config(e){},use:(e,...t)=>(s.has(e)||(e&&ve(e.install)?(s.add(e),e.install(o,...t)):ve(e)&&(s.add(e),e(o,...t))),o),mixin:e=>(l.mixins.includes(e)||l.mixins.push(e),o),component:(e,t)=>t?(l.components[e]=t,o):l.components[e],directive:(e,t)=>t?(l.directives[e]=t,o):l.directives[e],mount(s,r,c){if(!i){const u=qs(a,n);return u.appContext=l,r&&t?t(u,s):e(u,s,c),i=!0,o._container=s,s.__vue_app__=o,hi(u.component)||u.component.proxy}},unmount(){i&&(e(null,o._container),delete o._container.__vue_app__)},provide:(e,t)=>(l.provides[e]=t,o)};return o}}function rs(e,t,a,n,l=!1){if(_e(e))return void e.forEach(((e,s)=>rs(e,t&&(_e(t)?t[s]:t),a,n,l)));if(Yn(n)&&!l)return;const s=4&n.shapeFlag?hi(n.component)||n.component.proxy:n.el,i=l?null:s,{i:o,r:r}=e,c=t&&t.r,u=o.refs===ae?o.refs={}:o.refs,d=o.setupState;if(null!=c&&c!==r&&(ge(c)?(u[c]=null,pe(d,c)&&(d[c]=null)):_a(c)&&(c.value=null)),ve(r))Ia(r,o,12,[i,u]);else{const t=ge(r),n=_a(r);if(t||n){const o=()=>{if(e.f){const a=t?u[r]:r.value;l?_e(a)&&ue(a,s):_e(a)?a.includes(s)||a.push(s):t?(u[r]=[s],pe(d,r)&&(d[r]=u[r])):(r.value=[s],e.k&&(u[e.k]=r.value))}else t?(u[r]=i,pe(d,r)&&(d[r]=i)):n&&(r.value=i,e.k&&(u[e.k]=i))};i?(o.id=-1,_s(o,a)):o()}}}let cs=!1;const us=e=>/svg/.test(e.namespaceURI)&&"foreignObject"!==e.tagName,ds=e=>8===e.nodeType;function ps(e){const{mt:t,p:a,o:{patchProp:n,createText:l,nextSibling:s,parentNode:i,remove:o,insert:r,createComment:c}}=e,u=(a,n,o,c,h,v=!1)=>{const g=ds(a)&&"["===a.data,b=()=>f(a,n,o,c,h,g),{type:y,ref:w,shapeFlag:x,patchFlag:k}=n,$=a.nodeType;n.el=a,-2===k&&(v=!1,n.dynamicChildren=null);let S=null;switch(y){case Ss:3!==$?""===n.children?(r(n.el=l(""),i(a),a),S=a):S=b():(a.data!==n.children&&(cs=!0,a.data=n.children),S=s(a));break;case Cs:S=8!==$||g?b():s(a);break;case Ns:if(1===$||3===$){S=a;const e=!n.children.length;for(let t=0;t<n.staticCount;t++)e&&(n.children+=1===S.nodeType?S.outerHTML:S.data),t===n.staticCount-1&&(n.anchor=S),S=s(S);return S}S=b();break;case $s:S=g?_(a,n,o,c,h,v):b();break;default:if(1&x)S=1!==$||n.type.toLowerCase()!==a.tagName.toLowerCase()?b():d(a,n,o,c,h,v);else if(6&x){n.slotScopeIds=h;const e=i(a);if(t(n,e,null,o,c,us(e),v),S=g?m(a):s(a),S&&ds(S)&&"teleport end"===S.data&&(S=s(S)),Yn(n)){let t;g?(t=qs($s),t.anchor=S?S.previousSibling:e.lastChild):t=3===a.nodeType?Ws(""):qs("div"),t.el=a,n.component.subTree=t}}else 64&x?S=8!==$?b():n.type.hydrate(a,n,o,c,h,v,e,p):128&x&&(S=n.type.hydrate(a,n,o,c,us(i(a)),h,v,e,u))}return null!=w&&rs(w,null,c,n),S},d=(e,t,a,l,s,i)=>{i=i||!!t.dynamicChildren;const{type:r,props:c,patchFlag:u,shapeFlag:d,dirs:_}=t,f="input"===r&&_||"option"===r;if(f||-1!==u){if(_&&wl(t,null,a,"created"),c)if(f||!i||48&u)for(const t in c)(f&&t.endsWith("value")||oe(t)&&!Ce(t))&&n(e,t,null,c[t],!1,void 0,a);else c.onClick&&n(e,"onClick",null,c.onClick,!1,void 0,a);let r;if((r=c&&c.onVnodeBeforeMount)&&ei(r,a,t),_&&wl(t,null,a,"beforeMount"),((r=c&&c.onVnodeMounted)||_)&&Nn((()=>{r&&ei(r,a,t),_&&wl(t,null,a,"mounted")}),l),16&d&&(!c||!c.innerHTML&&!c.textContent)){let n=p(e.firstChild,t,e,a,l,s,i);for(;n;){cs=!0;const e=n;n=n.nextSibling,o(e)}}else 8&d&&e.textContent!==t.children&&(cs=!0,e.textContent=t.children)}return e.nextSibling},p=(e,t,n,l,s,i,o)=>{o=o||!!t.dynamicChildren;const r=t.children,c=r.length;for(let t=0;t<c;t++){const c=o?r[t]:r[t]=Ys(r[t]);if(e)e=u(e,c,l,s,i,o);else{if(c.type===Ss&&!c.children)continue;cs=!0,a(null,c,n,null,l,s,us(n),i)}}return e},_=(e,t,a,n,l,o)=>{const{slotScopeIds:u}=t;u&&(l=l?l.concat(u):u);const d=i(e),_=p(s(e),t,d,a,n,l,o);return _&&ds(_)&&"]"===_.data?s(t.anchor=_):(cs=!0,r(t.anchor=c("]"),d,_),_)},f=(e,t,n,l,r,c)=>{if(cs=!0,t.el=null,c){const t=m(e);for(;;){const a=s(e);if(!a||a===t)break;o(a)}}const u=s(e),d=i(e);return o(e),a(null,t,d,u,n,l,us(d),r),u},m=e=>{let t=0;for(;e;)if((e=s(e))&&ds(e)&&("["===e.data&&t++,"]"===e.data)){if(0===t)return s(e);t--}return e};return[(e,t)=>{if(!t.hasChildNodes())return a(null,e,t),en(),void(t._vnode=e);cs=!1,u(t.firstChild,e,null,null,null),en(),t._vnode=e,cs&&console.error("Hydration completed but contains mismatches.")},u]}const _s=Nn;function fs(e){return hs(e)}function ms(e){return hs(e,ps)}function hs(e,t){(Le||(Le="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{})).__VUE__=!0;const{insert:a,remove:n,patchProp:l,createElement:s,createText:i,createComment:o,setText:r,setElementText:c,parentNode:u,nextSibling:d,setScopeId:p=le,cloneNode:_,insertStaticContent:f}=e,m=(e,t,a,n=null,l=null,s=null,i=!1,o=null,r=!!t.dynamicChildren)=>{if(e===t)return;e&&!Ds(e,t)&&(n=z(e),j(e,l,s,!0),e=null),-2===t.patchFlag&&(r=!1,t.dynamicChildren=null);const{type:c,ref:u,shapeFlag:d}=t;switch(c){case Ss:h(e,t,a,n);break;case Cs:v(e,t,a,n);break;case Ns:null==e&&g(t,a,n,i);break;case $s:C(e,t,a,n,l,s,i,o,r);break;default:1&d?b(e,t,a,n,l,s,i,o,r):6&d?N(e,t,a,n,l,s,i,o,r):(64&d||128&d)&&c.process(e,t,a,n,l,s,i,o,r,V)}null!=u&&l&&rs(u,e&&e.ref,s,t||e,!t)},h=(e,t,n,l)=>{if(null==e)a(t.el=i(t.children),n,l);else{const a=t.el=e.el;t.children!==e.children&&r(a,t.children)}},v=(e,t,n,l)=>{null==e?a(t.el=o(t.children||""),n,l):t.el=e.el},g=(e,t,a,n)=>{[e.el,e.anchor]=f(e.children,t,a,n,e.el,e.anchor)},b=(e,t,a,n,l,s,i,o,r)=>{i=i||"svg"===t.type,null==e?y(t,a,n,l,s,i,o,r):k(e,t,l,s,i,o,r)},y=(e,t,n,i,o,r,u,d)=>{let p,f;const{type:m,props:h,shapeFlag:v,transition:g,patchFlag:b,dirs:y}=e;if(e.el&&void 0!==_&&-1===b)p=e.el=_(e.el);else{if(p=e.el=s(e.type,r,h&&h.is,h),8&v?c(p,e.children):16&v&&x(e.children,p,null,i,o,r&&"foreignObject"!==m,u,d),y&&wl(e,null,i,"created"),h){for(const t in h)"value"===t||Ce(t)||l(p,t,null,h[t],r,e.children,i,o,R);"value"in h&&l(p,"value",null,h.value),(f=h.onVnodeBeforeMount)&&ei(f,i,e)}w(p,e,e.scopeId,u,i)}y&&wl(e,null,i,"beforeMount");const k=(!o||o&&!o.pendingBranch)&&g&&!g.persisted;k&&g.beforeEnter(p),a(p,t,n),((f=h&&h.onVnodeMounted)||k||y)&&_s((()=>{f&&ei(f,i,e),k&&g.enter(p),y&&wl(e,null,i,"mounted")}),o)},w=(e,t,a,n,l)=>{if(a&&p(e,a),n)for(let t=0;t<n.length;t++)p(e,n[t]);if(l&&t===l.subTree){const t=l.vnode;w(e,t,t.scopeId,t.slotScopeIds,l.parent)}},x=(e,t,a,n,l,s,i,o,r=0)=>{for(let c=r;c<e.length;c++){const r=e[c]=o?Zs(e[c]):Ys(e[c]);m(null,r,t,a,n,l,s,i,o)}},k=(e,t,a,n,s,i,o)=>{const r=t.el=e.el;let{patchFlag:u,dynamicChildren:d,dirs:p}=t;u|=16&e.patchFlag;const _=e.props||ae,f=t.props||ae;let m;a&&vs(a,!1),(m=f.onVnodeBeforeUpdate)&&ei(m,a,t,e),p&&wl(t,e,a,"beforeUpdate"),a&&vs(a,!0);const h=s&&"foreignObject"!==t.type;if(d?$(e.dynamicChildren,d,r,a,n,h,i):o||I(e,t,r,null,a,n,h,i,!1),u>0){if(16&u)S(r,t,_,f,a,n,s);else if(2&u&&_.class!==f.class&&l(r,"class",null,f.class,s),4&u&&l(r,"style",_.style,f.style,s),8&u){const i=t.dynamicProps;for(let t=0;t<i.length;t++){const o=i[t],c=_[o],u=f[o];u===c&&"value"!==o||l(r,o,c,u,s,e.children,a,n,R)}}1&u&&e.children!==t.children&&c(r,t.children)}else o||null!=d||S(r,t,_,f,a,n,s);((m=f.onVnodeUpdated)||p)&&_s((()=>{m&&ei(m,a,t,e),p&&wl(t,e,a,"updated")}),n)},$=(e,t,a,n,l,s,i)=>{for(let o=0;o<t.length;o++){const r=e[o],c=t[o],d=r.el&&(r.type===$s||!Ds(r,c)||70&r.shapeFlag)?u(r.el):a;m(r,c,d,null,n,l,s,i,!0)}},S=(e,t,a,n,s,i,o)=>{if(a!==n){for(const r in n){if(Ce(r))continue;const c=n[r],u=a[r];c!==u&&"value"!==r&&l(e,r,u,c,o,t.children,s,i,R)}if(a!==ae)for(const r in a)Ce(r)||r in n||l(e,r,a[r],null,o,t.children,s,i,R);"value"in n&&l(e,"value",a.value,n.value)}},C=(e,t,n,l,s,o,r,c,u)=>{const d=t.el=e?e.el:i(""),p=t.anchor=e?e.anchor:i("");let{patchFlag:_,dynamicChildren:f,slotScopeIds:m}=t;m&&(c=c?c.concat(m):m),null==e?(a(d,n,l),a(p,n,l),x(t.children,n,p,s,o,r,c,u)):_>0&&64&_&&f&&e.dynamicChildren?($(e.dynamicChildren,f,n,s,o,r,c),(null!=t.key||s&&t===s.subTree)&&gs(e,t,!0)):I(e,t,n,p,s,o,r,c,u)},N=(e,t,a,n,l,s,i,o,r)=>{t.slotScopeIds=o,null==e?512&t.shapeFlag?l.ctx.activate(t,a,n,i,r):A(t,a,n,l,s,i,r):T(e,t,r)},A=(e,t,a,n,l,s,i)=>{const o=e.component=function(e,t,a){const n=e.type,l=(t?t.appContext:e.appContext)||ti,s={uid:ai++,vnode:e,type:n,parent:t,appContext:l,root:null,next:null,subTree:null,effect:null,update:null,scope:new ze(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:t?t.provides:Object.create(l.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:Jl(n,l),emitsOptions:rn(n,l),emit:null,emitted:null,propsDefaults:ae,inheritAttrs:n.inheritAttrs,ctx:ae,data:ae,props:ae,attrs:ae,slots:ae,refs:ae,setupState:ae,setupContext:null,suspense:a,suspenseId:a?a.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return s.ctx={_:s},s.root=t?t.root:s,s.emit=on.bind(null,s),e.ce&&e.ce(s),s}(e,n,l);if(Qn(e)&&(o.ctx.renderer=V),function(e,t=!1){ui=t;const{props:a,children:n}=e.vnode,l=oi(e);(function(e,t,a,n=!1){const l={},s={};Fe(s,Rs,1),e.propsDefaults=Object.create(null),Wl(e,t,l,s);for(const t in e.propsOptions[0])t in l||(l[t]=void 0);e.props=a?n?l:Qt(l):e.type.props?l:s,e.attrs=s})(e,a,l,t),((e,t)=>{if(32&e.vnode.shapeFlag){const a=t._;a?(e.slots=oa(t),Fe(t,"_",a)):ns(t,e.slots={})}else e.slots={},t&&ls(e,t);Fe(e.slots,Rs,1)})(e,n),l&&function(e,t){const a=e.type;e.accessCache=Object.create(null),e.proxy=ra(new Proxy(e.ctx,Ol));const{setup:n}=a;if(n){const a=e.setupContext=n.length>1?mi(e):null;si(e),ot();const l=Ia(n,e,0,[e.props,a]);if(rt(),ii(),we(l)){if(l.then(ii,ii),t)return l.then((a=>{di(e,a,t)})).catch((t=>{Ua(t,e,0)}));e.asyncDep=l}else di(e,l,t)}else fi(e,t)}(e,t),ui=!1}(o),o.asyncDep){if(l&&l.registerDep(o,E),!e.el){const e=o.subTree=qs(Cs);v(null,e,t,a)}}else E(o,e,t,a,l,s,i)},T=(e,t,a)=>{const n=t.component=e.component;if(function(e,t,a){const{props:n,children:l,component:s}=e,{props:i,children:o,patchFlag:r}=t,c=s.emitsOptions;if(t.dirs||t.transition)return!0;if(!(a&&r>=0))return!(!l&&!o||o&&o.$stable)||n!==i&&(n?!i||yn(n,i,c):!!i);if(1024&r)return!0;if(16&r)return n?yn(n,i,c):!!i;if(8&r){const e=t.dynamicProps;for(let t=0;t<e.length;t++){const a=e[t];if(i[a]!==n[a]&&!cn(c,a))return!0}}return!1}(e,t,a)){if(n.asyncDep&&!n.asyncResolved)return void P(n,t,a);n.next=t,function(e){const t=Fa.indexOf(e);t>Da&&Fa.splice(t,1)}(n.update),n.update()}else t.el=e.el,n.vnode=t},E=(e,t,a,n,l,s,i)=>{const o=e.effect=new tt((()=>{if(e.isMounted){let t,{next:a,bu:n,u:o,parent:r,vnode:c}=e,d=a;vs(e,!1),a?(a.el=c.el,P(e,a,i)):a=c,n&&je(n),(t=a.props&&a.props.onVnodeBeforeUpdate)&&ei(t,r,a,c),vs(e,!0);const p=vn(e),_=e.subTree;e.subTree=p,m(_,p,u(_.el),z(_),e,l,s),a.el=p.el,null===d&&wn(e,p.el),o&&_s(o,l),(t=a.props&&a.props.onVnodeUpdated)&&_s((()=>ei(t,r,a,c)),l)}else{let i;const{el:o,props:r}=t,{bm:c,m:u,parent:d}=e,p=Yn(t);if(vs(e,!1),c&&je(c),!p&&(i=r&&r.onVnodeBeforeMount)&&ei(i,d,t),vs(e,!0),o&&H){const a=()=>{e.subTree=vn(e),H(o,e.subTree,e,l,null)};p?t.type.__asyncLoader().then((()=>!e.isUnmounted&&a())):a()}else{const i=e.subTree=vn(e);m(null,i,a,n,e,l,s),t.el=i.el}if(u&&_s(u,l),!p&&(i=r&&r.onVnodeMounted)){const e=t;_s((()=>ei(i,d,e)),l)}(256&t.shapeFlag||d&&Yn(d.vnode)&&256&d.vnode.shapeFlag)&&e.a&&_s(e.a,l),e.isMounted=!0,t=a=n=null}}),(()=>Ja(r)),e.scope),r=e.update=()=>o.run();r.id=e.uid,vs(e,!0),r()},P=(e,t,a)=>{t.component=e;const n=e.vnode.props;e.vnode=t,e.next=null,function(e,t,a,n){const{props:l,attrs:s,vnode:{patchFlag:i}}=e,o=oa(l),[r]=e.propsOptions;let c=!1;if(!(n||i>0)||16&i){let n;Wl(e,t,l,s)&&(c=!0);for(const s in o)t&&(pe(t,s)||(n=Ie(s))!==s&&pe(t,n))||(r?!a||void 0===a[s]&&void 0===a[n]||(l[s]=Kl(r,o,s,void 0,e,!0)):delete l[s]);if(s!==o)for(const e in s)t&&pe(t,e)||(delete s[e],c=!0)}else if(8&i){const a=e.vnode.dynamicProps;for(let n=0;n<a.length;n++){let i=a[n];if(cn(e.emitsOptions,i))continue;const u=t[i];if(r)if(pe(s,i))u!==s[i]&&(s[i]=u,c=!0);else{const t=Ee(i);l[t]=Kl(r,o,t,u,e,!1)}else u!==s[i]&&(s[i]=u,c=!0)}}c&&dt(e,"set","$attrs")}(e,t.props,n,a),((e,t,a)=>{const{vnode:n,slots:l}=e;let s=!0,i=ae;if(32&n.shapeFlag){const e=t._;e?a&&1===e?s=!1:(ce(l,t),a||1!==e||delete l._):(s=!t.$stable,ns(t,l)),i=t}else t&&(ls(e,t),i={default:1});if(s)for(const e in l)es(e)||e in i||delete l[e]})(e,t.children,a),ot(),Qa(void 0,e.update),rt()},I=(e,t,a,n,l,s,i,o,r=!1)=>{const u=e&&e.children,d=e?e.shapeFlag:0,p=t.children,{patchFlag:_,shapeFlag:f}=t;if(_>0){if(128&_)return void U(u,p,a,n,l,s,i,o,r);if(256&_)return void M(u,p,a,n,l,s,i,o,r)}8&f?(16&d&&R(u,l,s),p!==u&&c(a,p)):16&d?16&f?U(u,p,a,n,l,s,i,o,r):R(u,l,s,!0):(8&d&&c(a,""),16&f&&x(p,a,n,l,s,i,o,r))},M=(e,t,a,n,l,s,i,o,r)=>{const c=(e=e||ne).length,u=(t=t||ne).length,d=Math.min(c,u);let p;for(p=0;p<d;p++){const n=t[p]=r?Zs(t[p]):Ys(t[p]);m(e[p],n,a,null,l,s,i,o,r)}c>u?R(e,l,s,!0,!1,d):x(t,a,n,l,s,i,o,r,d)},U=(e,t,a,n,l,s,i,o,r)=>{let c=0;const u=t.length;let d=e.length-1,p=u-1;for(;c<=d&&c<=p;){const n=e[c],u=t[c]=r?Zs(t[c]):Ys(t[c]);if(!Ds(n,u))break;m(n,u,a,null,l,s,i,o,r),c++}for(;c<=d&&c<=p;){const n=e[d],c=t[p]=r?Zs(t[p]):Ys(t[p]);if(!Ds(n,c))break;m(n,c,a,null,l,s,i,o,r),d--,p--}if(c>d){if(c<=p){const e=p+1,d=e<u?t[e].el:n;for(;c<=p;)m(null,t[c]=r?Zs(t[c]):Ys(t[c]),a,d,l,s,i,o,r),c++}}else if(c>p)for(;c<=d;)j(e[c],l,s,!0),c++;else{const _=c,f=c,h=new Map;for(c=f;c<=p;c++){const e=t[c]=r?Zs(t[c]):Ys(t[c]);null!=e.key&&h.set(e.key,c)}let v,g=0;const b=p-f+1;let y=!1,w=0;const x=new Array(b);for(c=0;c<b;c++)x[c]=0;for(c=_;c<=d;c++){const n=e[c];if(g>=b){j(n,l,s,!0);continue}let u;if(null!=n.key)u=h.get(n.key);else for(v=f;v<=p;v++)if(0===x[v-f]&&Ds(n,t[v])){u=v;break}void 0===u?j(n,l,s,!0):(x[u-f]=c+1,u>=w?w=u:y=!0,m(n,t[u],a,null,l,s,i,o,r),g++)}const k=y?function(e){const t=e.slice(),a=[0];let n,l,s,i,o;const r=e.length;for(n=0;n<r;n++){const r=e[n];if(0!==r){if(l=a[a.length-1],e[l]<r){t[n]=l,a.push(n);continue}for(s=0,i=a.length-1;s<i;)o=s+i>>1,e[a[o]]<r?s=o+1:i=o;r<e[a[s]]&&(s>0&&(t[n]=a[s-1]),a[s]=n)}}for(s=a.length,i=a[s-1];s-- >0;)a[s]=i,i=t[i];return a}(x):ne;for(v=k.length-1,c=b-1;c>=0;c--){const e=f+c,d=t[e],p=e+1<u?t[e+1].el:n;0===x[c]?m(null,d,a,p,l,s,i,o,r):y&&(v<0||c!==k[v]?O(d,a,p,2):v--)}}},O=(e,t,n,l,s=null)=>{const{el:i,type:o,transition:r,children:c,shapeFlag:u}=e;if(6&u)O(e.component.subTree,t,n,l);else if(128&u)e.suspense.move(t,n,l);else if(64&u)o.move(e,t,n,V);else if(o!==$s)if(o!==Ns)if(2!==l&&1&u&&r)if(0===l)r.beforeEnter(i),a(i,t,n),_s((()=>r.enter(i)),s);else{const{leave:e,delayLeave:l,afterLeave:s}=r,o=()=>a(i,t,n),c=()=>{e(i,(()=>{o(),s&&s()}))};l?l(i,o,c):c()}else a(i,t,n);else(({el:e,anchor:t},n,l)=>{let s;for(;e&&e!==t;)s=d(e),a(e,n,l),e=s;a(t,n,l)})(e,t,n);else{a(i,t,n);for(let e=0;e<c.length;e++)O(c[e],t,n,l);a(e.anchor,t,n)}},j=(e,t,a,n=!1,l=!1)=>{const{type:s,props:i,ref:o,children:r,dynamicChildren:c,shapeFlag:u,patchFlag:d,dirs:p}=e;if(null!=o&&rs(o,null,a,e,!0),256&u)return void t.ctx.deactivate(e);const _=1&u&&p,f=!Yn(e);let m;if(f&&(m=i&&i.onVnodeBeforeUnmount)&&ei(m,t,e),6&u)L(e.component,a,n);else{if(128&u)return void e.suspense.unmount(a,n);_&&wl(e,null,t,"beforeUnmount"),64&u?e.type.remove(e,t,a,l,V,n):c&&(s!==$s||d>0&&64&d)?R(c,t,a,!1,!0):(s===$s&&384&d||!l&&16&u)&&R(r,t,a),n&&F(e)}(f&&(m=i&&i.onVnodeUnmounted)||_)&&_s((()=>{m&&ei(m,t,e),_&&wl(e,null,t,"unmounted")}),a)},F=e=>{const{type:t,el:a,anchor:l,transition:s}=e;if(t===$s)return void D(a,l);if(t===Ns)return void(({el:e,anchor:t})=>{let a;for(;e&&e!==t;)a=d(e),n(e),e=a;n(t)})(e);const i=()=>{n(a),s&&!s.persisted&&s.afterLeave&&s.afterLeave()};if(1&e.shapeFlag&&s&&!s.persisted){const{leave:t,delayLeave:n}=s,l=()=>t(a,i);n?n(e.el,i,l):l()}else i()},D=(e,t)=>{let a;for(;e!==t;)a=d(e),n(e),e=a;n(t)},L=(e,t,a)=>{const{bum:n,scope:l,update:s,subTree:i,um:o}=e;n&&je(n),l.stop(),s&&(s.active=!1,j(i,e,t,a)),o&&_s(o,t),_s((()=>{e.isUnmounted=!0}),t),t&&t.pendingBranch&&!t.isUnmounted&&e.asyncDep&&!e.asyncResolved&&e.suspenseId===t.pendingId&&(t.deps--,0===t.deps&&t.resolve())},R=(e,t,a,n=!1,l=!1,s=0)=>{for(let i=s;i<e.length;i++)j(e[i],t,a,n,l)},z=e=>6&e.shapeFlag?z(e.component.subTree):128&e.shapeFlag?e.suspense.next():d(e.anchor||e.el),B=(e,t,a)=>{null==e?t._vnode&&j(t._vnode,null,null,!0):m(t._vnode||null,e,t,null,null,null,a),en(),t._vnode=e},V={p:m,um:j,m:O,r:F,mt:A,mc:x,pc:I,pbc:$,n:z,o:e};let q,H;return t&&([q,H]=t(V)),{render:B,hydrate:q,createApp:os(B,q)}}function vs({effect:e,update:t},a){e.allowRecurse=t.allowRecurse=a}function gs(e,t,a=!1){const n=e.children,l=t.children;if(_e(n)&&_e(l))for(let e=0;e<n.length;e++){const t=n[e];let s=l[e];1&s.shapeFlag&&!s.dynamicChildren&&((s.patchFlag<=0||32===s.patchFlag)&&(s=l[e]=Zs(l[e]),s.el=t.el),a||gs(t,s))}}const bs=e=>e&&(e.disabled||""===e.disabled),ys=e=>"undefined"!=typeof SVGElement&&e instanceof SVGElement,ws=(e,t)=>{const a=e&&e.to;return ge(a)?t?t(a):null:a};function xs(e,t,a,{o:{insert:n},m:l},s=2){0===s&&n(e.targetAnchor,t,a);const{el:i,anchor:o,shapeFlag:r,children:c,props:u}=e,d=2===s;if(d&&n(i,t,a),(!d||bs(u))&&16&r)for(let e=0;e<c.length;e++)l(c[e],t,a,2);d&&n(o,t,a)}const ks={__isTeleport:!0,process(e,t,a,n,l,s,i,o,r,c){const{mc:u,pc:d,pbc:p,o:{insert:_,querySelector:f,createText:m}}=c,h=bs(t.props);let{shapeFlag:v,children:g,dynamicChildren:b}=t;if(null==e){const e=t.el=m(""),c=t.anchor=m("");_(e,a,n),_(c,a,n);const d=t.target=ws(t.props,f),p=t.targetAnchor=m("");d&&(_(p,d),i=i||ys(d));const b=(e,t)=>{16&v&&u(g,e,t,l,s,i,o,r)};h?b(a,c):d&&b(d,p)}else{t.el=e.el;const n=t.anchor=e.anchor,u=t.target=e.target,_=t.targetAnchor=e.targetAnchor,m=bs(e.props),v=m?a:u,g=m?n:_;if(i=i||ys(u),b?(p(e.dynamicChildren,b,v,l,s,i,o),gs(e,t,!0)):r||d(e,t,v,g,l,s,i,o,!1),h)m||xs(t,a,n,c,1);else if((t.props&&t.props.to)!==(e.props&&e.props.to)){const e=t.target=ws(t.props,f);e&&xs(t,e,null,c,0)}else m&&xs(t,u,_,c,1)}},remove(e,t,a,n,{um:l,o:{remove:s}},i){const{shapeFlag:o,children:r,anchor:c,targetAnchor:u,target:d,props:p}=e;if(d&&s(u),(i||!bs(p))&&(s(c),16&o))for(let e=0;e<r.length;e++){const n=r[e];l(n,t,a,!0,!!n.dynamicChildren)}},move:xs,hydrate:function(e,t,a,n,l,s,{o:{nextSibling:i,parentNode:o,querySelector:r}},c){const u=t.target=ws(t.props,r);if(u){const r=u._lpa||u.firstChild;if(16&t.shapeFlag)if(bs(t.props))t.anchor=c(i(e),t,o(e),a,n,l,s),t.targetAnchor=r;else{t.anchor=i(e);let o=r;for(;o;)if(o=i(o),o&&8===o.nodeType&&"teleport anchor"===o.data){t.targetAnchor=o,u._lpa=t.targetAnchor&&i(t.targetAnchor);break}c(r,t,u,a,n,l,s)}}return t.anchor&&i(t.anchor)}},$s=Symbol(void 0),Ss=Symbol(void 0),Cs=Symbol(void 0),Ns=Symbol(void 0),As=[];let Ts=null;function Es(e=!1){As.push(Ts=e?null:[])}function Ps(){As.pop(),Ts=As[As.length-1]||null}let Is=1;function Ms(e){Is+=e}function Us(e){return e.dynamicChildren=Is>0?Ts||ne:null,Ps(),Is>0&&Ts&&Ts.push(e),e}function Os(e,t,a,n,l,s){return Us(Vs(e,t,a,n,l,s,!0))}function js(e,t,a,n,l){return Us(qs(e,t,a,n,l,!0))}function Fs(e){return!!e&&!0===e.__v_isVNode}function Ds(e,t){return e.type===t.type&&e.key===t.key}function Ls(e){}const Rs="__vInternal",zs=({key:e})=>null!=e?e:null,Bs=({ref:e,ref_key:t,ref_for:a})=>null!=e?ge(e)||_a(e)||ve(e)?{i:un,r:e,k:t,f:!!a}:e:null;function Vs(e,t=null,a=null,n=0,l=null,s=(e===$s?0:1),i=!1,o=!1){const r={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&zs(t),ref:t&&Bs(t),scopeId:dn,slotScopeIds:null,children:a,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:s,patchFlag:n,dynamicProps:l,dynamicChildren:null,appContext:null};return o?(Xs(r,a),128&s&&e.normalize(r)):a&&(r.shapeFlag|=ge(a)?8:16),Is>0&&!i&&Ts&&(r.patchFlag>0||6&s)&&32!==r.patchFlag&&Ts.push(r),r}const qs=function(e,t=null,a=null,n=0,l=null,s=!1){if(e&&e!==kl||(e=Cs),Fs(e)){const n=Gs(e,t,!0);return a&&Xs(n,a),Is>0&&!s&&Ts&&(6&n.shapeFlag?Ts[Ts.indexOf(e)]=n:Ts.push(n)),n.patchFlag|=-2,n}var i;if(ve(i=e)&&"__vccOpts"in i&&(e=e.__vccOpts),t){t=Hs(t);let{class:e,style:a}=t;e&&!ge(e)&&(t.class=W(e)),ye(a)&&(ia(a)&&!_e(a)&&(a=ce({},a)),t.style=V(a))}return Vs(e,t,a,n,l,ge(e)?1:xn(e)?128:(e=>e.__isTeleport)(e)?64:ye(e)?4:ve(e)?2:0,s,!0)};function Hs(e){return e?ia(e)||Rs in e?ce({},e):e:null}function Gs(e,t,a=!1){const{props:n,ref:l,patchFlag:s,children:i}=e,o=t?Qs(n||{},t):n;return{__v_isVNode:!0,__v_skip:!0,type:e.type,props:o,key:o&&zs(o),ref:t&&t.ref?a&&l?_e(l)?l.concat(Bs(t)):[l,Bs(t)]:Bs(t):l,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:i,target:e.target,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==$s?-1===s?16:16|s:s,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:e.transition,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&Gs(e.ssContent),ssFallback:e.ssFallback&&Gs(e.ssFallback),el:e.el,anchor:e.anchor}}function Ws(e=" ",t=0){return qs(Ss,null,e,t)}function Ks(e,t){const a=qs(Ns,null,e);return a.staticCount=t,a}function Js(e="",t=!1){return t?(Es(),js(Cs,null,e)):qs(Cs,null,e)}function Ys(e){return null==e||"boolean"==typeof e?qs(Cs):_e(e)?qs($s,null,e.slice()):"object"==typeof e?Zs(e):qs(Ss,null,String(e))}function Zs(e){return null===e.el||e.memo?e:Gs(e)}function Xs(e,t){let a=0;const{shapeFlag:n}=e;if(null==t)t=null;else if(_e(t))a=16;else if("object"==typeof t){if(65&n){const a=t.default;return void(a&&(a._c&&(a._d=!1),Xs(e,a()),a._c&&(a._d=!0)))}{a=32;const n=t._;n||Rs in t?3===n&&un&&(1===un.slots._?t._=1:(t._=2,e.patchFlag|=1024)):t._ctx=un}}else ve(t)?(t={default:t,_ctx:un},a=32):(t=String(t),64&n?(a=16,t=[Ws(t)]):a=8);e.children=t,e.shapeFlag|=a}function Qs(...e){const t={};for(let a=0;a<e.length;a++){const n=e[a];for(const e in n)if("class"===e)t.class!==n.class&&(t.class=W([t.class,n.class]));else if("style"===e)t.style=V([t.style,n.style]);else if(oe(e)){const a=t[e],l=n[e];!l||a===l||_e(a)&&a.includes(l)||(t[e]=a?[].concat(a,l):l)}else""!==e&&(t[e]=n[e])}return t}function ei(e,t,a,n=null){Ma(e,t,7,[a,n])}const ti=ss();let ai=0,ni=null;const li=()=>ni||un,si=e=>{ni=e,e.scope.on()},ii=()=>{ni&&ni.scope.off(),ni=null};function oi(e){return 4&e.vnode.shapeFlag}let ri,ci,ui=!1;function di(e,t,a){ve(t)?e.render=t:ye(t)&&(e.setupState=wa(t)),fi(e,a)}function pi(e){ri=e,ci=e=>{e.render._rc&&(e.withProxy=new Proxy(e.ctx,jl))}}const _i=()=>!ri;function fi(e,t,a){const n=e.type;if(!e.render){if(!t&&ri&&!n.render){const t=n.template;if(t){const{isCustomElement:a,compilerOptions:l}=e.appContext.config,{delimiters:s,compilerOptions:i}=n,o=ce(ce({isCustomElement:a,delimiters:s},l),i);n.render=ri(t,o)}}e.render=n.render||le,ci&&ci(e)}si(e),ot(),function(e){const t=Rl(e),a=e.proxy,n=e.ctx;Fl=!1,t.beforeCreate&&Dl(t.beforeCreate,e,"bc");const{data:l,computed:s,methods:i,watch:o,provide:r,inject:c,created:u,beforeMount:d,mounted:p,beforeUpdate:_,updated:f,activated:m,deactivated:h,beforeUnmount:v,unmounted:g,render:b,renderTracked:y,renderTriggered:w,errorCaptured:x,serverPrefetch:k,expose:$,inheritAttrs:S,components:C,directives:N}=t;if(c&&function(e,t,a=le,n=!1){_e(e)&&(e=ql(e));for(const a in e){const l=e[a];let s;s=ye(l)?"default"in l?En(l.from||a,l.default,!0):En(l.from||a):En(l),_a(s)&&n?Object.defineProperty(t,a,{enumerable:!0,configurable:!0,get:()=>s.value,set:e=>s.value=e}):t[a]=s}}(c,n,null,e.appContext.config.unwrapInjectedRef),i)for(const e in i){const t=i[e];ve(t)&&(n[e]=t.bind(a))}if(l){const t=l.call(a,a);ye(t)&&(e.data=Xt(t))}if(Fl=!0,s)for(const e in s){const t=s[e],l=ve(t)?t.bind(a,a):ve(t.get)?t.get.bind(a,a):le,i=!ve(t)&&ve(t.set)?t.set.bind(a):le,o=yi({get:l,set:i});Object.defineProperty(n,e,{enumerable:!0,configurable:!0,get:()=>o.value,set:e=>o.value=e})}if(o)for(const e in o)Ll(o[e],n,a,e);if(r){const e=ve(r)?r.call(a):r;Reflect.ownKeys(e).forEach((t=>{Tn(t,e[t])}))}function A(e,t){_e(t)?t.forEach((t=>e(t.bind(a)))):t&&e(t.bind(a))}if(u&&Dl(u,e,"c"),A(ul,d),A(dl,p),A(pl,_),A(_l,f),A(al,m),A(nl,h),A(bl,x),A(gl,y),A(vl,w),A(fl,v),A(ml,g),A(hl,k),_e($))if($.length){const t=e.exposed||(e.exposed={});$.forEach((e=>{Object.defineProperty(t,e,{get:()=>a[e],set:t=>a[e]=t})}))}else e.exposed||(e.exposed={});b&&e.render===le&&(e.render=b),null!=S&&(e.inheritAttrs=S),C&&(e.components=C),N&&(e.directives=N)}(e),rt(),ii()}function mi(e){let t;return{get attrs(){return t||(t=function(e){return new Proxy(e.attrs,{get:(t,a)=>(ct(e,0,"$attrs"),t[a])})}(e))},slots:e.slots,emit:e.emit,expose:t=>{e.exposed=t||{}}}}function hi(e){if(e.exposed)return e.exposeProxy||(e.exposeProxy=new Proxy(wa(ra(e.exposed)),{get:(t,a)=>a in t?t[a]:a in Ul?Ul[a](e):void 0}))}const vi=/(?:^|[-_])(\w)/g;function gi(e,t=!0){return ve(e)?e.displayName||e.name:e.name||t&&e.__name}function bi(e,t,a=!1){let n=gi(t);if(!n&&t.__file){const e=t.__file.match(/([^/\\]+)\.\w+$/);e&&(n=e[1])}if(!n&&e&&e.parent){const a=e=>{for(const a in e)if(e[a]===t)return a};n=a(e.components||e.parent.type.components)||a(e.appContext.components)}return n?n.replace(vi,(e=>e.toUpperCase())).replace(/[-_]/g,""):a?"App":"Anonymous"}const yi=(e,t)=>function(e,t,a=!1){let n,l;const s=ve(e);return s?(n=e,l=le):(n=e.get,l=e.set),new Na(n,l,s||!l,a)}(e,0,ui);function wi(){return null}function xi(){return null}function ki(e){}function $i(e,t){return null}function Si(){return Ni().slots}function Ci(){return Ni().attrs}function Ni(){const e=li();return e.setupContext||(e.setupContext=mi(e))}function Ai(e,t){const a=_e(e)?e.reduce(((e,t)=>(e[t]={},e)),{}):e;for(const e in t){const n=a[e];n?_e(n)||ve(n)?a[e]={type:n,default:t[e]}:n.default=t[e]:null===n&&(a[e]={default:t[e]})}return a}function Ti(e,t){const a={};for(const n in e)t.includes(n)||Object.defineProperty(a,n,{enumerable:!0,get:()=>e[n]});return a}function Ei(e){const t=li();let a=e();return ii(),we(a)&&(a=a.catch((e=>{throw si(t),e}))),[a,()=>si(t)]}function Pi(e,t,a){const n=arguments.length;return 2===n?ye(t)&&!_e(t)?Fs(t)?qs(e,null,[t]):qs(e,t):qs(e,null,t):(n>3?a=Array.prototype.slice.call(arguments,2):3===n&&Fs(a)&&(a=[a]),qs(e,t,a))}const Ii=Symbol(""),Mi=()=>{{const e=En(Ii);return e||Ta("Server rendering context not provided. Make sure to only call useSSRContext() conditionally in the server build."),e}};function Ui(){}function Oi(e,t,a,n){const l=a[n];if(l&&ji(l,e))return l;const s=t();return s.memo=e.slice(),a[n]=s}function ji(e,t){const a=e.memo;if(a.length!=t.length)return!1;for(let e=0;e<a.length;e++)if(Oe(a[e],t[e]))return!1;return Is>0&&Ts&&Ts.push(e),!0}const Fi="3.2.37",Di="undefined"!=typeof document?document:null,Li=Di&&Di.createElement("template"),Ri={insert:(e,t,a)=>{t.insertBefore(e,a||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,a,n)=>{const l=t?Di.createElementNS("http://www.w3.org/2000/svg",e):Di.createElement(e,a?{is:a}:void 0);return"select"===e&&n&&null!=n.multiple&&l.setAttribute("multiple",n.multiple),l},createText:e=>Di.createTextNode(e),createComment:e=>Di.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>Di.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},cloneNode(e){const t=e.cloneNode(!0);return"_value"in e&&(t._value=e._value),t},insertStaticContent(e,t,a,n,l,s){const i=a?a.previousSibling:t.lastChild;if(l&&(l===s||l.nextSibling))for(;t.insertBefore(l.cloneNode(!0),a),l!==s&&(l=l.nextSibling););else{Li.innerHTML=n?`<svg>${e}</svg>`:e;const l=Li.content;if(n){const e=l.firstChild;for(;e.firstChild;)l.appendChild(e.firstChild);l.removeChild(e)}t.insertBefore(l,a)}return[i?i.nextSibling:t.firstChild,a?a.previousSibling:t.lastChild]}},zi=/\s*!important$/;function Bi(e,t,a){if(_e(a))a.forEach((a=>Bi(e,t,a)));else if(null==a&&(a=""),t.startsWith("--"))e.setProperty(t,a);else{const n=function(e,t){const a=qi[t];if(a)return a;let n=Ee(t);if("filter"!==n&&n in e)return qi[t]=n;n=Me(n);for(let a=0;a<Vi.length;a++){const l=Vi[a]+n;if(l in e)return qi[t]=l}return t}(e,t);zi.test(a)?e.setProperty(Ie(n),a.replace(zi,""),"important"):e[n]=a}}const Vi=["Webkit","Moz","ms"],qi={},Hi="http://www.w3.org/1999/xlink",[Gi,Wi]=(()=>{let e=Date.now,t=!1;if("undefined"!=typeof window){Date.now()>document.createEvent("Event").timeStamp&&(e=performance.now.bind(performance));const a=navigator.userAgent.match(/firefox\/(\d+)/i);t=!!(a&&Number(a[1])<=53)}return[e,t]})();let Ki=0;const Ji=Promise.resolve(),Yi=()=>{Ki=0};function Zi(e,t,a,n){e.addEventListener(t,a,n)}const Xi=/(?:Once|Passive|Capture)$/,Qi=/^on[a-z]/;function eo(e,t){const a=Jn(e);class n extends no{constructor(e){super(a,e,t)}}return n.def=a,n}const to=e=>eo(e,nr),ao="undefined"!=typeof HTMLElement?HTMLElement:class{};class no extends ao{constructor(e,t={},a){super(),this._def=e,this._props=t,this._instance=null,this._connected=!1,this._resolved=!1,this._numberProps=null,this.shadowRoot&&a?a(this._createVNode(),this.shadowRoot):this.attachShadow({mode:"open"})}connectedCallback(){this._connected=!0,this._instance||this._resolveDef()}disconnectedCallback(){this._connected=!1,Ka((()=>{this._connected||(ar(null,this.shadowRoot),this._instance=null)}))}_resolveDef(){if(this._resolved)return;this._resolved=!0;for(let e=0;e<this.attributes.length;e++)this._setAttr(this.attributes[e].name);new MutationObserver((e=>{for(const t of e)this._setAttr(t.attributeName)})).observe(this,{attributes:!0});const e=e=>{const{props:t,styles:a}=e,n=!_e(t),l=t?n?Object.keys(t):t:[];let s;if(n)for(const e in this._props){const a=t[e];(a===Number||a&&a.type===Number)&&(this._props[e]=De(this._props[e]),(s||(s=Object.create(null)))[e]=!0)}this._numberProps=s;for(const e of Object.keys(this))"_"!==e[0]&&this._setProp(e,this[e],!0,!1);for(const e of l.map(Ee))Object.defineProperty(this,e,{get(){return this._getProp(e)},set(t){this._setProp(e,t)}});this._applyStyles(a),this._update()},t=this._def.__asyncLoader;t?t().then(e):e(this._def)}_setAttr(e){let t=this.getAttribute(e);this._numberProps&&this._numberProps[e]&&(t=De(t)),this._setProp(Ee(e),t,!1)}_getProp(e){return this._props[e]}_setProp(e,t,a=!0,n=!0){t!==this._props[e]&&(this._props[e]=t,n&&this._instance&&this._update(),a&&(!0===t?this.setAttribute(Ie(e),""):"string"==typeof t||"number"==typeof t?this.setAttribute(Ie(e),t+""):t||this.removeAttribute(Ie(e))))}_update(){ar(this._createVNode(),this.shadowRoot)}_createVNode(){const e=qs(this._def,ce({},this._props));return this._instance||(e.ce=e=>{this._instance=e,e.isCE=!0,e.emit=(e,...t)=>{this.dispatchEvent(new CustomEvent(e,{detail:t}))};let t=this;for(;t=t&&(t.parentNode||t.host);)if(t instanceof no){e.parent=t._instance;break}}),e}_applyStyles(e){e&&e.forEach((e=>{const t=document.createElement("style");t.textContent=e,this.shadowRoot.appendChild(t)}))}}function lo(e="$style"){{const t=li();if(!t)return ae;const a=t.type.__cssModules;if(!a)return ae;return a[e]||ae}}function so(e){const t=li();if(!t)return;const a=()=>io(t.subTree,e(t.proxy));In(a),dl((()=>{const e=new MutationObserver(a);e.observe(t.subTree.el.parentNode,{childList:!0}),ml((()=>e.disconnect()))}))}function io(e,t){if(128&e.shapeFlag){const a=e.suspense;e=a.activeBranch,a.pendingBranch&&!a.isHydrating&&a.effects.push((()=>{io(a.activeBranch,t)}))}for(;e.component;)e=e.component.subTree;if(1&e.shapeFlag&&e.el)oo(e.el,t);else if(e.type===$s)e.children.forEach((e=>io(e,t)));else if(e.type===Ns){let{el:a,anchor:n}=e;for(;a&&(oo(a,t),a!==n);)a=a.nextSibling}}function oo(e,t){if(1===e.nodeType){const a=e.style;for(const e in t)a.setProperty(`--${e}`,t[e])}}const ro=(e,{slots:t})=>Pi(Bn,fo(e),t);ro.displayName="Transition";const co={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},uo=ro.props=ce({},Bn.props,co),po=(e,t=[])=>{_e(e)?e.forEach((e=>e(...t))):e&&e(...t)},_o=e=>!!e&&(_e(e)?e.some((e=>e.length>1)):e.length>1);function fo(e){const t={};for(const a in e)a in co||(t[a]=e[a]);if(!1===e.css)return t;const{name:a="v",type:n,duration:l,enterFromClass:s=`${a}-enter-from`,enterActiveClass:i=`${a}-enter-active`,enterToClass:o=`${a}-enter-to`,appearFromClass:r=s,appearActiveClass:c=i,appearToClass:u=o,leaveFromClass:d=`${a}-leave-from`,leaveActiveClass:p=`${a}-leave-active`,leaveToClass:_=`${a}-leave-to`}=e,f=function(e){if(null==e)return null;if(ye(e))return[mo(e.enter),mo(e.leave)];{const t=mo(e);return[t,t]}}(l),m=f&&f[0],h=f&&f[1],{onBeforeEnter:v,onEnter:g,onEnterCancelled:b,onLeave:y,onLeaveCancelled:w,onBeforeAppear:x=v,onAppear:k=g,onAppearCancelled:$=b}=t,S=(e,t,a)=>{vo(e,t?u:o),vo(e,t?c:i),a&&a()},C=(e,t)=>{e._isLeaving=!1,vo(e,d),vo(e,_),vo(e,p),t&&t()},N=e=>(t,a)=>{const l=e?k:g,i=()=>S(t,e,a);po(l,[t,i]),go((()=>{vo(t,e?r:s),ho(t,e?u:o),_o(l)||yo(t,n,m,i)}))};return ce(t,{onBeforeEnter(e){po(v,[e]),ho(e,s),ho(e,i)},onBeforeAppear(e){po(x,[e]),ho(e,r),ho(e,c)},onEnter:N(!1),onAppear:N(!0),onLeave(e,t){e._isLeaving=!0;const a=()=>C(e,t);ho(e,d),$o(),ho(e,p),go((()=>{e._isLeaving&&(vo(e,d),ho(e,_),_o(y)||yo(e,n,h,a))})),po(y,[e,a])},onEnterCancelled(e){S(e,!1),po(b,[e])},onAppearCancelled(e){S(e,!0),po($,[e])},onLeaveCancelled(e){C(e),po(w,[e])}})}function mo(e){return De(e)}function ho(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.add(t))),(e._vtc||(e._vtc=new Set)).add(t)}function vo(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.remove(t)));const{_vtc:a}=e;a&&(a.delete(t),a.size||(e._vtc=void 0))}function go(e){requestAnimationFrame((()=>{requestAnimationFrame(e)}))}let bo=0;function yo(e,t,a,n){const l=e._endId=++bo,s=()=>{l===e._endId&&n()};if(a)return setTimeout(s,a);const{type:i,timeout:o,propCount:r}=wo(e,t);if(!i)return n();const c=i+"end";let u=0;const d=()=>{e.removeEventListener(c,p),s()},p=t=>{t.target===e&&++u>=r&&d()};setTimeout((()=>{u<r&&d()}),o+1),e.addEventListener(c,p)}function wo(e,t){const a=window.getComputedStyle(e),n=e=>(a[e]||"").split(", "),l=n("transitionDelay"),s=n("transitionDuration"),i=xo(l,s),o=n("animationDelay"),r=n("animationDuration"),c=xo(o,r);let u=null,d=0,p=0;return"transition"===t?i>0&&(u="transition",d=i,p=s.length):"animation"===t?c>0&&(u="animation",d=c,p=r.length):(d=Math.max(i,c),u=d>0?i>c?"transition":"animation":null,p=u?"transition"===u?s.length:r.length:0),{type:u,timeout:d,propCount:p,hasTransform:"transition"===u&&/\b(transform|all)(,|$)/.test(a.transitionProperty)}}function xo(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max(...t.map(((t,a)=>ko(t)+ko(e[a]))))}function ko(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function $o(){return document.body.offsetHeight}const So=new WeakMap,Co=new WeakMap,No={name:"TransitionGroup",props:ce({},uo,{tag:String,moveClass:String}),setup(e,{slots:t}){const a=li(),n=Rn();let l,s;return _l((()=>{if(!l.length)return;const t=e.moveClass||`${e.name||"v"}-move`;if(!function(e,t,a){const n=e.cloneNode();e._vtc&&e._vtc.forEach((e=>{e.split(/\s+/).forEach((e=>e&&n.classList.remove(e)))})),a.split(/\s+/).forEach((e=>e&&n.classList.add(e))),n.style.display="none";const l=1===t.nodeType?t:t.parentNode;l.appendChild(n);const{hasTransform:s}=wo(n);return l.removeChild(n),s}(l[0].el,a.vnode.el,t))return;l.forEach(Ao),l.forEach(To);const n=l.filter(Eo);$o(),n.forEach((e=>{const a=e.el,n=a.style;ho(a,t),n.transform=n.webkitTransform=n.transitionDuration="";const l=a._moveCb=e=>{e&&e.target!==a||e&&!/transform$/.test(e.propertyName)||(a.removeEventListener("transitionend",l),a._moveCb=null,vo(a,t))};a.addEventListener("transitionend",l)}))})),()=>{const i=oa(e),o=fo(i);let r=i.tag||$s;l=s,s=t.default?Kn(t.default()):[];for(let e=0;e<s.length;e++){const t=s[e];null!=t.key&&Wn(t,qn(t,o,n,a))}if(l)for(let e=0;e<l.length;e++){const t=l[e];Wn(t,qn(t,o,n,a)),So.set(t,t.el.getBoundingClientRect())}return qs(r,null,s)}}};function Ao(e){const t=e.el;t._moveCb&&t._moveCb(),t._enterCb&&t._enterCb()}function To(e){Co.set(e,e.el.getBoundingClientRect())}function Eo(e){const t=So.get(e),a=Co.get(e),n=t.left-a.left,l=t.top-a.top;if(n||l){const t=e.el.style;return t.transform=t.webkitTransform=`translate(${n}px,${l}px)`,t.transitionDuration="0s",e}}const Po=e=>{const t=e.props["onUpdate:modelValue"]||!1;return _e(t)?e=>je(t,e):t};function Io(e){e.target.composing=!0}function Mo(e){const t=e.target;t.composing&&(t.composing=!1,t.dispatchEvent(new Event("input")))}const Uo={created(e,{modifiers:{lazy:t,trim:a,number:n}},l){e._assign=Po(l);const s=n||l.props&&"number"===l.props.type;Zi(e,t?"change":"input",(t=>{if(t.target.composing)return;let n=e.value;a&&(n=n.trim()),s&&(n=De(n)),e._assign(n)})),a&&Zi(e,"change",(()=>{e.value=e.value.trim()})),t||(Zi(e,"compositionstart",Io),Zi(e,"compositionend",Mo),Zi(e,"change",Mo))},mounted(e,{value:t}){e.value=null==t?"":t},beforeUpdate(e,{value:t,modifiers:{lazy:a,trim:n,number:l}},s){if(e._assign=Po(s),e.composing)return;if(document.activeElement===e&&"range"!==e.type){if(a)return;if(n&&e.value.trim()===t)return;if((l||"number"===e.type)&&De(e.value)===t)return}const i=null==t?"":t;e.value!==i&&(e.value=i)}},Oo={deep:!0,created(e,t,a){e._assign=Po(a),Zi(e,"change",(()=>{const t=e._modelValue,a=Ro(e),n=e.checked,l=e._assign;if(_e(t)){const e=Q(t,a),s=-1!==e;if(n&&!s)l(t.concat(a));else if(!n&&s){const a=[...t];a.splice(e,1),l(a)}}else if(me(t)){const e=new Set(t);n?e.add(a):e.delete(a),l(e)}else l(zo(e,n))}))},mounted:jo,beforeUpdate(e,t,a){e._assign=Po(a),jo(e,t,a)}};function jo(e,{value:t,oldValue:a},n){e._modelValue=t,_e(t)?e.checked=Q(t,n.props.value)>-1:me(t)?e.checked=t.has(n.props.value):t!==a&&(e.checked=X(t,zo(e,!0)))}const Fo={created(e,{value:t},a){e.checked=X(t,a.props.value),e._assign=Po(a),Zi(e,"change",(()=>{e._assign(Ro(e))}))},beforeUpdate(e,{value:t,oldValue:a},n){e._assign=Po(n),t!==a&&(e.checked=X(t,n.props.value))}},Do={deep:!0,created(e,{value:t,modifiers:{number:a}},n){const l=me(t);Zi(e,"change",(()=>{const t=Array.prototype.filter.call(e.options,(e=>e.selected)).map((e=>a?De(Ro(e)):Ro(e)));e._assign(e.multiple?l?new Set(t):t:t[0])})),e._assign=Po(n)},mounted(e,{value:t}){Lo(e,t)},beforeUpdate(e,t,a){e._assign=Po(a)},updated(e,{value:t}){Lo(e,t)}};function Lo(e,t){const a=e.multiple;if(!a||_e(t)||me(t)){for(let n=0,l=e.options.length;n<l;n++){const l=e.options[n],s=Ro(l);if(a)l.selected=_e(t)?Q(t,s)>-1:t.has(s);else if(X(Ro(l),t))return void(e.selectedIndex!==n&&(e.selectedIndex=n))}a||-1===e.selectedIndex||(e.selectedIndex=-1)}}function Ro(e){return"_value"in e?e._value:e.value}function zo(e,t){const a=t?"_trueValue":"_falseValue";return a in e?e[a]:t}const Bo={created(e,t,a){Vo(e,t,a,null,"created")},mounted(e,t,a){Vo(e,t,a,null,"mounted")},beforeUpdate(e,t,a,n){Vo(e,t,a,n,"beforeUpdate")},updated(e,t,a,n){Vo(e,t,a,n,"updated")}};function Vo(e,t,a,n,l){const s=function(e,t){switch(e){case"SELECT":return Do;case"TEXTAREA":return Uo;default:switch(t){case"checkbox":return Oo;case"radio":return Fo;default:return Uo}}}(e.tagName,a.props&&a.props.type)[l];s&&s(e,t,a,n)}const qo=["ctrl","shift","alt","meta"],Ho={stop:e=>e.stopPropagation(),prevent:e=>e.preventDefault(),self:e=>e.target!==e.currentTarget,ctrl:e=>!e.ctrlKey,shift:e=>!e.shiftKey,alt:e=>!e.altKey,meta:e=>!e.metaKey,left:e=>"button"in e&&0!==e.button,middle:e=>"button"in e&&1!==e.button,right:e=>"button"in e&&2!==e.button,exact:(e,t)=>qo.some((a=>e[`${a}Key`]&&!t.includes(a)))},Go=(e,t)=>(a,...n)=>{for(let e=0;e<t.length;e++){const n=Ho[t[e]];if(n&&n(a,t))return}return e(a,...n)},Wo={esc:"escape",space:" ",up:"arrow-up",left:"arrow-left",right:"arrow-right",down:"arrow-down",delete:"backspace"},Ko=(e,t)=>a=>{if(!("key"in a))return;const n=Ie(a.key);return t.some((e=>e===n||Wo[e]===n))?e(a):void 0},Jo={beforeMount(e,{value:t},{transition:a}){e._vod="none"===e.style.display?"":e.style.display,a&&t?a.beforeEnter(e):Yo(e,t)},mounted(e,{value:t},{transition:a}){a&&t&&a.enter(e)},updated(e,{value:t,oldValue:a},{transition:n}){!t!=!a&&(n?t?(n.beforeEnter(e),Yo(e,!0),n.enter(e)):n.leave(e,(()=>{Yo(e,!1)})):Yo(e,t))},beforeUnmount(e,{value:t}){Yo(e,t)}};function Yo(e,t){e.style.display=t?e._vod:"none"}const Zo=ce({patchProp:(e,t,a,n,l=!1,s,i,o,r)=>{"class"===t?function(e,t,a){const n=e._vtc;n&&(t=(t?[t,...n]:[...n]).join(" ")),null==t?e.removeAttribute("class"):a?e.setAttribute("class",t):e.className=t}(e,n,l):"style"===t?function(e,t,a){const n=e.style,l=ge(a);if(a&&!l){for(const e in a)Bi(n,e,a[e]);if(t&&!ge(t))for(const e in t)null==a[e]&&Bi(n,e,"")}else{const s=n.display;l?t!==a&&(n.cssText=a):t&&e.removeAttribute("style"),"_vod"in e&&(n.display=s)}}(e,a,n):oe(t)?re(t)||function(e,t,a,n,l=null){const s=e._vei||(e._vei={}),i=s[t];if(n&&i)i.value=n;else{const[a,o]=function(e){let t;if(Xi.test(e)){let a;for(t={};a=e.match(Xi);)e=e.slice(0,e.length-a[0].length),t[a[0].toLowerCase()]=!0}return[Ie(e.slice(2)),t]}(t);if(n){const i=s[t]=function(e,t){const a=e=>{const n=e.timeStamp||Gi();(Wi||n>=a.attached-1)&&Ma(function(e,t){if(_e(t)){const a=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{a.call(e),e._stopped=!0},t.map((e=>t=>!t._stopped&&e&&e(t)))}return t}(e,a.value),t,5,[e])};return a.value=e,a.attached=Ki||(Ji.then(Yi),Ki=Gi()),a}(n,l);Zi(e,a,i,o)}else i&&(function(e,t,a,n){e.removeEventListener(t,a,n)}(e,a,i,o),s[t]=void 0)}}(e,t,0,n,i):("."===t[0]?(t=t.slice(1),1):"^"===t[0]?(t=t.slice(1),0):function(e,t,a,n){return n?"innerHTML"===t||"textContent"===t||!!(t in e&&Qi.test(t)&&ve(a)):"spellcheck"!==t&&"draggable"!==t&&"translate"!==t&&("form"!==t&&(("list"!==t||"INPUT"!==e.tagName)&&(("type"!==t||"TEXTAREA"!==e.tagName)&&((!Qi.test(t)||!ge(a))&&t in e))))}(e,t,n,l))?function(e,t,a,n,l,s,i){if("innerHTML"===t||"textContent"===t)return n&&i(n,l,s),void(e[t]=null==a?"":a);if("value"===t&&"PROGRESS"!==e.tagName&&!e.tagName.includes("-")){e._value=a;const n=null==a?"":a;return e.value===n&&"OPTION"!==e.tagName||(e.value=n),void(null==a&&e.removeAttribute(t))}let o=!1;if(""===a||null==a){const n=typeof e[t];"boolean"===n?a=B(a):null==a&&"string"===n?(a="",o=!0):"number"===n&&(a=0,o=!0)}try{e[t]=a}catch(e){}o&&e.removeAttribute(t)}(e,t,n,s,i,o,r):("true-value"===t?e._trueValue=n:"false-value"===t&&(e._falseValue=n),function(e,t,a,n,l){if(n&&t.startsWith("xlink:"))null==a?e.removeAttributeNS(Hi,t.slice(6,t.length)):e.setAttributeNS(Hi,t,a);else{const n=z(t);null==a||n&&!B(a)?e.removeAttribute(t):e.setAttribute(t,n?"":a)}}(e,t,n,l))}},Ri);let Xo,Qo=!1;function er(){return Xo||(Xo=fs(Zo))}function tr(){return Xo=Qo?Xo:ms(Zo),Qo=!0,Xo}const ar=(...e)=>{er().render(...e)},nr=(...e)=>{tr().hydrate(...e)},lr=(...e)=>{const t=er().createApp(...e),{mount:a}=t;return t.mount=e=>{const n=ir(e);if(!n)return;const l=t._component;ve(l)||l.render||l.template||(l.template=n.innerHTML),n.innerHTML="";const s=a(n,!1,n instanceof SVGElement);return n instanceof Element&&(n.removeAttribute("v-cloak"),n.setAttribute("data-v-app","")),s},t},sr=(...e)=>{const t=tr().createApp(...e),{mount:a}=t;return t.mount=e=>{const t=ir(e);if(t)return a(t,!0,t instanceof SVGElement)},t};function ir(e){return ge(e)?document.querySelector(e):e}const or=le;var rr=Object.freeze({__proto__:null,render:ar,hydrate:nr,createApp:lr,createSSRApp:sr,initDirectivesForSSR:or,defineCustomElement:eo,defineSSRCustomElement:to,VueElement:no,useCssModule:lo,useCssVars:so,Transition:ro,TransitionGroup:No,vModelText:Uo,vModelCheckbox:Oo,vModelRadio:Fo,vModelSelect:Do,vModelDynamic:Bo,withModifiers:Go,withKeys:Ko,vShow:Jo,reactive:Xt,ref:fa,readonly:ea,unref:ba,proxyRefs:wa,isRef:_a,toRef:Ca,toRefs:$a,isProxy:ia,isReactive:na,isReadonly:la,isShallow:sa,customRef:ka,triggerRef:ga,shallowRef:ma,shallowReactive:Qt,shallowReadonly:ta,markRaw:ra,toRaw:oa,effect:nt,stop:lt,ReactiveEffect:tt,effectScope:Be,EffectScope:ze,getCurrentScope:qe,onScopeDispose:He,computed:yi,watch:On,watchEffect:Pn,watchPostEffect:In,watchSyncEffect:Mn,onBeforeMount:ul,onMounted:dl,onBeforeUpdate:pl,onUpdated:_l,onBeforeUnmount:fl,onUnmounted:ml,onActivated:al,onDeactivated:nl,onRenderTracked:gl,onRenderTriggered:vl,onErrorCaptured:bl,onServerPrefetch:hl,provide:Tn,inject:En,nextTick:Ka,defineComponent:Jn,defineAsyncComponent:Zn,useAttrs:Ci,useSlots:Si,defineProps:wi,defineEmits:xi,defineExpose:ki,withDefaults:$i,mergeDefaults:Ai,createPropsRestProxy:Ti,withAsyncContext:Ei,getCurrentInstance:li,h:Pi,createVNode:qs,cloneVNode:Gs,mergeProps:Qs,isVNode:Fs,Fragment:$s,Text:Ss,Comment:Cs,Static:Ns,Teleport:ks,Suspense:kn,KeepAlive:el,BaseTransition:Bn,withDirectives:yl,useSSRContext:Mi,ssrContextKey:Ii,createRenderer:fs,createHydrationRenderer:ms,queuePostFlushCb:Xa,warn:Ta,handleError:Ua,callWithErrorHandling:Ia,callWithAsyncErrorHandling:Ma,resolveComponent:xl,resolveDirective:Sl,resolveDynamicComponent:$l,registerRuntimeCompiler:pi,isRuntimeOnly:_i,useTransitionState:Rn,resolveTransitionHooks:qn,setTransitionHooks:Wn,getTransitionRawChildren:Kn,initCustomFormatter:Ui,get devtools(){return nn},setDevtoolsHook:sn,withCtx:hn,pushScopeId:_n,popScopeId:fn,withScopeId:mn,renderList:Al,toHandlers:Il,renderSlot:El,createSlots:Tl,withMemo:Oi,isMemoSame:ji,openBlock:Es,createBlock:js,setBlockTracking:Ms,createTextVNode:Ws,createCommentVNode:Js,createStaticVNode:Ks,createElementVNode:Vs,createElementBlock:Os,guardReactiveProps:Hs,toDisplayString:ee,camelize:Ee,capitalize:Me,toHandlerKey:Ue,normalizeProps:K,normalizeClass:W,normalizeStyle:V,transformVNodeArgs:Ls,version:Fi,ssrUtils:null,resolveFilter:null,compatUtils:null});function cr(e){throw e}function ur(e){}function dr(e,t,a,n){const l=new SyntaxError(String(e));return l.code=e,l.loc=t,l}const pr=Symbol(""),_r=Symbol(""),fr=Symbol(""),mr=Symbol(""),hr=Symbol(""),vr=Symbol(""),gr=Symbol(""),br=Symbol(""),yr=Symbol(""),wr=Symbol(""),xr=Symbol(""),kr=Symbol(""),$r=Symbol(""),Sr=Symbol(""),Cr=Symbol(""),Nr=Symbol(""),Ar=Symbol(""),Tr=Symbol(""),Er=Symbol(""),Pr=Symbol(""),Ir=Symbol(""),Mr=Symbol(""),Ur=Symbol(""),Or=Symbol(""),jr=Symbol(""),Fr=Symbol(""),Dr=Symbol(""),Lr=Symbol(""),Rr=Symbol(""),zr=Symbol(""),Br=Symbol(""),Vr=Symbol(""),qr=Symbol(""),Hr=Symbol(""),Gr=Symbol(""),Wr=Symbol(""),Kr=Symbol(""),Jr=Symbol(""),Yr=Symbol(""),Zr={[pr]:"Fragment",[_r]:"Teleport",[fr]:"Suspense",[mr]:"KeepAlive",[hr]:"BaseTransition",[vr]:"openBlock",[gr]:"createBlock",[br]:"createElementBlock",[yr]:"createVNode",[wr]:"createElementVNode",[xr]:"createCommentVNode",[kr]:"createTextVNode",[$r]:"createStaticVNode",[Sr]:"resolveComponent",[Cr]:"resolveDynamicComponent",[Nr]:"resolveDirective",[Ar]:"resolveFilter",[Tr]:"withDirectives",[Er]:"renderList",[Pr]:"renderSlot",[Ir]:"createSlots",[Mr]:"toDisplayString",[Ur]:"mergeProps",[Or]:"normalizeClass",[jr]:"normalizeStyle",[Fr]:"normalizeProps",[Dr]:"guardReactiveProps",[Lr]:"toHandlers",[Rr]:"camelize",[zr]:"capitalize",[Br]:"toHandlerKey",[Vr]:"setBlockTracking",[qr]:"pushScopeId",[Hr]:"popScopeId",[Gr]:"withCtx",[Wr]:"unref",[Kr]:"isRef",[Jr]:"withMemo",[Yr]:"isMemoSame"},Xr={source:"",start:{line:1,column:1,offset:0},end:{line:1,column:1,offset:0}};function Qr(e,t,a,n,l,s,i,o=!1,r=!1,c=!1,u=Xr){return e&&(o?(e.helper(vr),e.helper(Ac(e.inSSR,c))):e.helper(Nc(e.inSSR,c)),i&&e.helper(Tr)),{type:13,tag:t,props:a,children:n,patchFlag:l,dynamicProps:s,directives:i,isBlock:o,disableTracking:r,isComponent:c,loc:u}}function ec(e,t=Xr){return{type:17,loc:t,elements:e}}function tc(e,t=Xr){return{type:15,loc:t,properties:e}}function ac(e,t){return{type:16,loc:Xr,key:ge(e)?nc(e,!0):e,value:t}}function nc(e,t=!1,a=Xr,n=0){return{type:4,loc:a,content:e,isStatic:t,constType:t?3:n}}function lc(e,t=Xr){return{type:8,loc:t,children:e}}function sc(e,t=[],a=Xr){return{type:14,loc:a,callee:e,arguments:t}}function ic(e,t,a=!1,n=!1,l=Xr){return{type:18,params:e,returns:t,newline:a,isSlot:n,loc:l}}function oc(e,t,a,n=!0){return{type:19,test:e,consequent:t,alternate:a,newline:n,loc:Xr}}const rc=e=>4===e.type&&e.isStatic,cc=(e,t)=>e===t||e===Ie(t);function uc(e){return cc(e,"Teleport")?_r:cc(e,"Suspense")?fr:cc(e,"KeepAlive")?mr:cc(e,"BaseTransition")?hr:void 0}const dc=/^\d|[^\$\w]/,pc=e=>!dc.test(e),_c=/[A-Za-z_$\xA0-\uFFFF]/,fc=/[\.\?\w$\xA0-\uFFFF]/,mc=/\s+[.[]\s*|\s*[.[]\s+/g,hc=e=>{e=e.trim().replace(mc,(e=>e.trim()));let t=0,a=[],n=0,l=0,s=null;for(let i=0;i<e.length;i++){const o=e.charAt(i);switch(t){case 0:if("["===o)a.push(t),t=1,n++;else if("("===o)a.push(t),t=2,l++;else if(!(0===i?_c:fc).test(o))return!1;break;case 1:"'"===o||'"'===o||"`"===o?(a.push(t),t=3,s=o):"["===o?n++:"]"===o&&(--n||(t=a.pop()));break;case 2:if("'"===o||'"'===o||"`"===o)a.push(t),t=3,s=o;else if("("===o)l++;else if(")"===o){if(i===e.length-1)return!1;--l||(t=a.pop())}break;case 3:o===s&&(t=a.pop(),s=null)}}return!n&&!l};function vc(e,t,a){const n={source:e.source.slice(t,t+a),start:gc(e.start,e.source,t),end:e.end};return null!=a&&(n.end=gc(e.start,e.source,t+a)),n}function gc(e,t,a=t.length){return bc(ce({},e),t,a)}function bc(e,t,a=t.length){let n=0,l=-1;for(let e=0;e<a;e++)10===t.charCodeAt(e)&&(n++,l=e);return e.offset+=a,e.line+=n,e.column=-1===l?e.column+a:a-l,e}function yc(e,t,a=!1){for(let n=0;n<e.props.length;n++){const l=e.props[n];if(7===l.type&&(a||l.exp)&&(ge(t)?l.name===t:t.test(l.name)))return l}}function wc(e,t,a=!1,n=!1){for(let l=0;l<e.props.length;l++){const s=e.props[l];if(6===s.type){if(a)continue;if(s.name===t&&(s.value||n))return s}else if("bind"===s.name&&(s.exp||n)&&xc(s.arg,t))return s}}function xc(e,t){return!(!e||!rc(e)||e.content!==t)}function kc(e){return 5===e.type||2===e.type}function $c(e){return 7===e.type&&"slot"===e.name}function Sc(e){return 1===e.type&&3===e.tagType}function Cc(e){return 1===e.type&&2===e.tagType}function Nc(e,t){return e||t?yr:wr}function Ac(e,t){return e||t?gr:br}const Tc=new Set([Fr,Dr]);function Ec(e,t=[]){if(e&&!ge(e)&&14===e.type){const a=e.callee;if(!ge(a)&&Tc.has(a))return Ec(e.arguments[0],t.concat(e))}return[e,t]}function Pc(e,t,a){let n,l,s=13===e.type?e.props:e.arguments[2],i=[];if(s&&!ge(s)&&14===s.type){const e=Ec(s);s=e[0],i=e[1],l=i[i.length-1]}if(null==s||ge(s))n=tc([t]);else if(14===s.type){const e=s.arguments[0];ge(e)||15!==e.type?s.callee===Lr?n=sc(a.helper(Ur),[tc([t]),s]):s.arguments.unshift(tc([t])):e.properties.unshift(t),!n&&(n=s)}else if(15===s.type){let e=!1;if(4===t.key.type){const a=t.key.content;e=s.properties.some((e=>4===e.key.type&&e.key.content===a))}e||s.properties.unshift(t),n=s}else n=sc(a.helper(Ur),[tc([t]),s]),l&&l.callee===Dr&&(l=i[i.length-2]);13===e.type?l?l.arguments[0]=n:e.props=n:l?l.arguments[0]=n:e.arguments[2]=n}function Ic(e,t){return`_${t}_${e.replace(/[^\w]/g,((t,a)=>"-"===t?"_":e.charCodeAt(a).toString()))}`}function Mc(e,{helper:t,removeHelper:a,inSSR:n}){e.isBlock||(e.isBlock=!0,a(Nc(n,e.isComponent)),t(vr),t(Ac(n,e.isComponent)))}const Uc=/&(gt|lt|amp|apos|quot);/g,Oc={gt:">",lt:"<",amp:"&",apos:"'",quot:'"'},jc={delimiters:["{{","}}"],getNamespace:()=>0,getTextMode:()=>0,isVoidTag:se,isPreTag:se,isCustomElement:se,decodeEntities:e=>e.replace(Uc,((e,t)=>Oc[t])),onError:cr,onWarn:ur,comments:!1};function Fc(e,t,a){const n=Xc(a),l=n?n.ns:0,s=[];for(;!nu(e,t,a);){const i=e.source;let o;if(0===t||1===t)if(!e.inVPre&&Qc(i,e.options.delimiters[0]))o=Wc(e,t);else if(0===t&&"<"===i[0])if(1===i.length);else if("!"===i[1])o=Qc(i,"\x3c!--")?Rc(e):Qc(i,"<!DOCTYPE")?zc(e):Qc(i,"<![CDATA[")&&0!==l?Lc(e,a):zc(e);else if("/"===i[1])if(2===i.length);else{if(">"===i[2]){eu(e,3);continue}if(/[a-z]/i.test(i[2])){qc(e,1,n);continue}o=zc(e)}else/[a-z]/i.test(i[1])?o=Bc(e,a):"?"===i[1]&&(o=zc(e));if(o||(o=Kc(e,t)),_e(o))for(let e=0;e<o.length;e++)Dc(s,o[e]);else Dc(s,o)}let i=!1;if(2!==t&&1!==t){const t="preserve"!==e.options.whitespace;for(let a=0;a<s.length;a++){const n=s[a];if(e.inPre||2!==n.type)3!==n.type||e.options.comments||(i=!0,s[a]=null);else if(/[^\t\r\n\f ]/.test(n.content))t&&(n.content=n.content.replace(/[\t\r\n\f ]+/g," "));else{const e=s[a-1],l=s[a+1];!e||!l||t&&(3===e.type||3===l.type||1===e.type&&1===l.type&&/[\r\n]/.test(n.content))?(i=!0,s[a]=null):n.content=" "}}if(e.inPre&&n&&e.options.isPreTag(n.tag)){const e=s[0];e&&2===e.type&&(e.content=e.content.replace(/^\r?\n/,""))}}return i?s.filter(Boolean):s}function Dc(e,t){if(2===t.type){const a=Xc(e);if(a&&2===a.type&&a.loc.end.offset===t.loc.start.offset)return a.content+=t.content,a.loc.end=t.loc.end,void(a.loc.source+=t.loc.source)}e.push(t)}function Lc(e,t){eu(e,9);const a=Fc(e,3,t);return 0===e.source.length||eu(e,3),a}function Rc(e){const t=Yc(e);let a;const n=/--(\!)?>/.exec(e.source);if(n){a=e.source.slice(4,n.index);const t=e.source.slice(0,n.index);let l=1,s=0;for(;-1!==(s=t.indexOf("\x3c!--",l));)eu(e,s-l+1),l=s+1;eu(e,n.index+n[0].length-l+1)}else a=e.source.slice(4),eu(e,e.source.length);return{type:3,content:a,loc:Zc(e,t)}}function zc(e){const t=Yc(e),a="?"===e.source[1]?1:2;let n;const l=e.source.indexOf(">");return-1===l?(n=e.source.slice(a),eu(e,e.source.length)):(n=e.source.slice(a,l),eu(e,l+1)),{type:3,content:n,loc:Zc(e,t)}}function Bc(e,t){const a=e.inPre,n=e.inVPre,l=Xc(t),s=qc(e,0,l),i=e.inPre&&!a,o=e.inVPre&&!n;if(s.isSelfClosing||e.options.isVoidTag(s.tag))return i&&(e.inPre=!1),o&&(e.inVPre=!1),s;t.push(s);const r=e.options.getTextMode(s,l),c=Fc(e,r,t);if(t.pop(),s.children=c,lu(e.source,s.tag))qc(e,1,l);else if(0===e.source.length&&"script"===s.tag.toLowerCase()){const e=c[0];e&&Qc(e.loc.source,"\x3c!--")}return s.loc=Zc(e,s.loc.start),i&&(e.inPre=!1),o&&(e.inVPre=!1),s}const Vc=L("if,else,else-if,for,slot");function qc(e,t,a){const n=Yc(e),l=/^<\/?([a-z][^\t\r\n\f />]*)/i.exec(e.source),s=l[1],i=e.options.getNamespace(s,a);eu(e,l[0].length),tu(e);const o=Yc(e),r=e.source;e.options.isPreTag(s)&&(e.inPre=!0);let c=Hc(e,t);0===t&&!e.inVPre&&c.some((e=>7===e.type&&"pre"===e.name))&&(e.inVPre=!0,ce(e,o),e.source=r,c=Hc(e,t).filter((e=>"v-pre"!==e.name)));let u=!1;if(0===e.source.length||(u=Qc(e.source,"/>"),eu(e,u?2:1)),1===t)return;let d=0;return e.inVPre||("slot"===s?d=2:"template"===s?c.some((e=>7===e.type&&Vc(e.name)))&&(d=3):function(e,t,a){const n=a.options;if(n.isCustomElement(e))return!1;if("component"===e||/^[A-Z]/.test(e)||uc(e)||n.isBuiltInComponent&&n.isBuiltInComponent(e)||n.isNativeTag&&!n.isNativeTag(e))return!0;for(let e=0;e<t.length;e++){const a=t[e];if(6===a.type){if("is"===a.name&&a.value&&a.value.content.startsWith("vue:"))return!0}else{if("is"===a.name)return!0;"bind"===a.name&&xc(a.arg,"is")}}}(s,c,e)&&(d=1)),{type:1,ns:i,tag:s,tagType:d,props:c,isSelfClosing:u,children:[],loc:Zc(e,n),codegenNode:void 0}}function Hc(e,t){const a=[],n=new Set;for(;e.source.length>0&&!Qc(e.source,">")&&!Qc(e.source,"/>");){if(Qc(e.source,"/")){eu(e,1),tu(e);continue}const l=Gc(e,n);6===l.type&&l.value&&"class"===l.name&&(l.value.content=l.value.content.replace(/\s+/g," ").trim()),0===t&&a.push(l),/^[^\t\r\n\f />]/.test(e.source),tu(e)}return a}function Gc(e,t){const a=Yc(e),n=/^[^\t\r\n\f />][^\t\r\n\f />=]*/.exec(e.source)[0];t.has(n),t.add(n);{const e=/["'<]/g;for(;e.exec(n););}let l;eu(e,n.length),/^[\t\r\n\f ]*=/.test(e.source)&&(tu(e),eu(e,1),tu(e),l=function(e){const t=Yc(e);let a;const n=e.source[0],l='"'===n||"'"===n;if(l){eu(e,1);const t=e.source.indexOf(n);-1===t?a=Jc(e,e.source.length,4):(a=Jc(e,t,4),eu(e,1))}else{const t=/^[^\t\r\n\f >]+/.exec(e.source);if(!t)return;const n=/["'<=`]/g;for(;n.exec(t[0]););a=Jc(e,t[0].length,4)}return{content:a,isQuoted:l,loc:Zc(e,t)}}(e));const s=Zc(e,a);if(!e.inVPre&&/^(v-[A-Za-z0-9-]|:|\.|@|#)/.test(n)){const t=/(?:^v-([a-z0-9-]+))?(?:(?::|^\.|^@|^#)(\[[^\]]+\]|[^\.]+))?(.+)?$/i.exec(n);let i,o=Qc(n,"."),r=t[1]||(o||Qc(n,":")?"bind":Qc(n,"@")?"on":"slot");if(t[2]){const l="slot"===r,s=n.lastIndexOf(t[2]),o=Zc(e,au(e,a,s),au(e,a,s+t[2].length+(l&&t[3]||"").length));let c=t[2],u=!0;c.startsWith("[")?(u=!1,c=c.endsWith("]")?c.slice(1,c.length-1):c.slice(1)):l&&(c+=t[3]||""),i={type:4,content:c,isStatic:u,constType:u?3:0,loc:o}}if(l&&l.isQuoted){const e=l.loc;e.start.offset++,e.start.column++,e.end=gc(e.start,l.content),e.source=e.source.slice(1,-1)}const c=t[3]?t[3].slice(1).split("."):[];return o&&c.push("prop"),{type:7,name:r,exp:l&&{type:4,content:l.content,isStatic:!1,constType:0,loc:l.loc},arg:i,modifiers:c,loc:s}}return!e.inVPre&&Qc(n,"v-"),{type:6,name:n,value:l&&{type:2,content:l.content,loc:l.loc},loc:s}}function Wc(e,t){const[a,n]=e.options.delimiters,l=e.source.indexOf(n,a.length);if(-1===l)return;const s=Yc(e);eu(e,a.length);const i=Yc(e),o=Yc(e),r=l-a.length,c=e.source.slice(0,r),u=Jc(e,r,t),d=u.trim(),p=u.indexOf(d);return p>0&&bc(i,c,p),bc(o,c,r-(u.length-d.length-p)),eu(e,n.length),{type:5,content:{type:4,isStatic:!1,constType:0,content:d,loc:Zc(e,i,o)},loc:Zc(e,s)}}function Kc(e,t){const a=3===t?["]]>"]:["<",e.options.delimiters[0]];let n=e.source.length;for(let t=0;t<a.length;t++){const l=e.source.indexOf(a[t],1);-1!==l&&n>l&&(n=l)}const l=Yc(e);return{type:2,content:Jc(e,n,t),loc:Zc(e,l)}}function Jc(e,t,a){const n=e.source.slice(0,t);return eu(e,t),2!==a&&3!==a&&n.includes("&")?e.options.decodeEntities(n,4===a):n}function Yc(e){const{column:t,line:a,offset:n}=e;return{column:t,line:a,offset:n}}function Zc(e,t,a){return{start:t,end:a=a||Yc(e),source:e.originalSource.slice(t.offset,a.offset)}}function Xc(e){return e[e.length-1]}function Qc(e,t){return e.startsWith(t)}function eu(e,t){const{source:a}=e;bc(e,a,t),e.source=a.slice(t)}function tu(e){const t=/^[\t\r\n\f ]+/.exec(e.source);t&&eu(e,t[0].length)}function au(e,t,a){return gc(t,e.originalSource.slice(t.offset,a),a)}function nu(e,t,a){const n=e.source;switch(t){case 0:if(Qc(n,"</"))for(let e=a.length-1;e>=0;--e)if(lu(n,a[e].tag))return!0;break;case 1:case 2:{const e=Xc(a);if(e&&lu(n,e.tag))return!0;break}case 3:if(Qc(n,"]]>"))return!0}return!n}function lu(e,t){return Qc(e,"</")&&e.slice(2,2+t.length).toLowerCase()===t.toLowerCase()&&/[\t\r\n\f />]/.test(e[2+t.length]||">")}function su(e,t){ou(e,t,iu(e,e.children[0]))}function iu(e,t){const{children:a}=e;return 1===a.length&&1===t.type&&!Cc(t)}function ou(e,t,a=!1){const{children:n}=e,l=n.length;let s=0;for(let e=0;e<n.length;e++){const l=n[e];if(1===l.type&&0===l.tagType){const e=a?0:ru(l,t);if(e>0){if(e>=2){l.codegenNode.patchFlag="-1",l.codegenNode=t.hoist(l.codegenNode),s++;continue}}else{const e=l.codegenNode;if(13===e.type){const a=_u(e);if((!a||512===a||1===a)&&du(l,t)>=2){const a=pu(l);a&&(e.props=t.hoist(a))}e.dynamicProps&&(e.dynamicProps=t.hoist(e.dynamicProps))}}}else 12===l.type&&ru(l.content,t)>=2&&(l.codegenNode=t.hoist(l.codegenNode),s++);if(1===l.type){const e=1===l.tagType;e&&t.scopes.vSlot++,ou(l,t),e&&t.scopes.vSlot--}else if(11===l.type)ou(l,t,1===l.children.length);else if(9===l.type)for(let e=0;e<l.branches.length;e++)ou(l.branches[e],t,1===l.branches[e].children.length)}s&&t.transformHoist&&t.transformHoist(n,t,e),s&&s===l&&1===e.type&&0===e.tagType&&e.codegenNode&&13===e.codegenNode.type&&_e(e.codegenNode.children)&&(e.codegenNode.children=t.hoist(ec(e.codegenNode.children)))}function ru(e,t){const{constantCache:a}=t;switch(e.type){case 1:if(0!==e.tagType)return 0;const n=a.get(e);if(void 0!==n)return n;const l=e.codegenNode;if(13!==l.type)return 0;if(l.isBlock&&"svg"!==e.tag&&"foreignObject"!==e.tag)return 0;if(_u(l))return a.set(e,0),0;{let n=3;const s=du(e,t);if(0===s)return a.set(e,0),0;s<n&&(n=s);for(let l=0;l<e.children.length;l++){const s=ru(e.children[l],t);if(0===s)return a.set(e,0),0;s<n&&(n=s)}if(n>1)for(let l=0;l<e.props.length;l++){const s=e.props[l];if(7===s.type&&"bind"===s.name&&s.exp){const l=ru(s.exp,t);if(0===l)return a.set(e,0),0;l<n&&(n=l)}}if(l.isBlock){for(let t=0;t<e.props.length;t++)if(7===e.props[t].type)return a.set(e,0),0;t.removeHelper(vr),t.removeHelper(Ac(t.inSSR,l.isComponent)),l.isBlock=!1,t.helper(Nc(t.inSSR,l.isComponent))}return a.set(e,n),n}case 2:case 3:return 3;case 9:case 11:case 10:default:return 0;case 5:case 12:return ru(e.content,t);case 4:return e.constType;case 8:let s=3;for(let a=0;a<e.children.length;a++){const n=e.children[a];if(ge(n)||be(n))continue;const l=ru(n,t);if(0===l)return 0;l<s&&(s=l)}return s}}const cu=new Set([Or,jr,Fr,Dr]);function uu(e,t){if(14===e.type&&!ge(e.callee)&&cu.has(e.callee)){const a=e.arguments[0];if(4===a.type)return ru(a,t);if(14===a.type)return uu(a,t)}return 0}function du(e,t){let a=3;const n=pu(e);if(n&&15===n.type){const{properties:e}=n;for(let n=0;n<e.length;n++){const{key:l,value:s}=e[n],i=ru(l,t);if(0===i)return i;let o;if(i<a&&(a=i),o=4===s.type?ru(s,t):14===s.type?uu(s,t):0,0===o)return o;o<a&&(a=o)}}return a}function pu(e){const t=e.codegenNode;if(13===t.type)return t.props}function _u(e){const t=e.patchFlag;return t?parseInt(t,10):void 0}function fu(e,t){const a=function(e,{filename:t="",prefixIdentifiers:a=!1,hoistStatic:n=!1,cacheHandlers:l=!1,nodeTransforms:s=[],directiveTransforms:i={},transformHoist:o=null,isBuiltInComponent:r=le,isCustomElement:c=le,expressionPlugins:u=[],scopeId:d=null,slotted:p=!0,ssr:_=!1,inSSR:f=!1,ssrCssVars:m="",bindingMetadata:h=ae,inline:v=!1,isTS:g=!1,onError:b=cr,onWarn:y=ur,compatConfig:w}){const x=t.replace(/\?.*$/,"").match(/([^/\\]+)\.\w+$/),k={selfName:x&&Me(Ee(x[1])),prefixIdentifiers:a,hoistStatic:n,cacheHandlers:l,nodeTransforms:s,directiveTransforms:i,transformHoist:o,isBuiltInComponent:r,isCustomElement:c,expressionPlugins:u,scopeId:d,slotted:p,ssr:_,inSSR:f,ssrCssVars:m,bindingMetadata:h,inline:v,isTS:g,onError:b,onWarn:y,compatConfig:w,root:e,helpers:new Map,components:new Set,directives:new Set,hoists:[],imports:[],constantCache:new Map,temps:0,cached:0,identifiers:Object.create(null),scopes:{vFor:0,vSlot:0,vPre:0,vOnce:0},parent:null,currentNode:e,childIndex:0,inVOnce:!1,helper(e){const t=k.helpers.get(e)||0;return k.helpers.set(e,t+1),e},removeHelper(e){const t=k.helpers.get(e);if(t){const a=t-1;a?k.helpers.set(e,a):k.helpers.delete(e)}},helperString:e=>`_${Zr[k.helper(e)]}`,replaceNode(e){k.parent.children[k.childIndex]=k.currentNode=e},removeNode(e){const t=e?k.parent.children.indexOf(e):k.currentNode?k.childIndex:-1;e&&e!==k.currentNode?k.childIndex>t&&(k.childIndex--,k.onNodeRemoved()):(k.currentNode=null,k.onNodeRemoved()),k.parent.children.splice(t,1)},onNodeRemoved:()=>{},addIdentifiers(e){},removeIdentifiers(e){},hoist(e){ge(e)&&(e=nc(e)),k.hoists.push(e);const t=nc(`_hoisted_${k.hoists.length}`,!1,e.loc,2);return t.hoisted=e,t},cache:(e,t=!1)=>function(e,t,a=!1){return{type:20,index:e,value:t,isVNode:a,loc:Xr}}(k.cached++,e,t)};return k}(e,t);mu(e,a),t.hoistStatic&&su(e,a),t.ssr||function(e,t){const{helper:a}=t,{children:n}=e;if(1===n.length){const a=n[0];if(iu(e,a)&&a.codegenNode){const n=a.codegenNode;13===n.type&&Mc(n,t),e.codegenNode=n}else e.codegenNode=a}else if(n.length>1){let n=64;e.codegenNode=Qr(t,a(pr),void 0,e.children,n+"",void 0,void 0,!0,void 0,!1)}}(e,a),e.helpers=[...a.helpers.keys()],e.components=[...a.components],e.directives=[...a.directives],e.imports=a.imports,e.hoists=a.hoists,e.temps=a.temps,e.cached=a.cached}function mu(e,t){t.currentNode=e;const{nodeTransforms:a}=t,n=[];for(let l=0;l<a.length;l++){const s=a[l](e,t);if(s&&(_e(s)?n.push(...s):n.push(s)),!t.currentNode)return;e=t.currentNode}switch(e.type){case 3:t.ssr||t.helper(xr);break;case 5:t.ssr||t.helper(Mr);break;case 9:for(let a=0;a<e.branches.length;a++)mu(e.branches[a],t);break;case 10:case 11:case 1:case 0:!function(e,t){let a=0;const n=()=>{a--};for(;a<e.children.length;a++){const l=e.children[a];ge(l)||(t.parent=e,t.childIndex=a,t.onNodeRemoved=n,mu(l,t))}}(e,t)}t.currentNode=e;let l=n.length;for(;l--;)n[l]()}function hu(e,t){const a=ge(e)?t=>t===e:t=>e.test(t);return(e,n)=>{if(1===e.type){const{props:l}=e;if(3===e.tagType&&l.some($c))return;const s=[];for(let i=0;i<l.length;i++){const o=l[i];if(7===o.type&&a(o.name)){l.splice(i,1),i--;const a=t(e,o,n);a&&s.push(a)}}return s}}}const vu=e=>`${Zr[e]}: _${Zr[e]}`;function gu(e,t,{helper:a,push:n,newline:l,isTS:s}){const i=a("component"===t?Sr:Nr);for(let a=0;a<e.length;a++){let o=e[a];const r=o.endsWith("__self");r&&(o=o.slice(0,-6)),n(`const ${Ic(o,t)} = ${i}(${JSON.stringify(o)}${r?", true":""})${s?"!":""}`),a<e.length-1&&l()}}function bu(e,t){const a=e.length>3||!1;t.push("["),a&&t.indent(),yu(e,t,a),a&&t.deindent(),t.push("]")}function yu(e,t,a=!1,n=!0){const{push:l,newline:s}=t;for(let i=0;i<e.length;i++){const o=e[i];ge(o)?l(o):_e(o)?bu(o,t):wu(o,t),i<e.length-1&&(a?(n&&l(","),s()):n&&l(", "))}}function wu(e,t){if(ge(e))t.push(e);else if(be(e))t.push(t.helper(e));else switch(e.type){case 1:case 9:case 11:case 12:wu(e.codegenNode,t);break;case 2:!function(e,t){t.push(JSON.stringify(e.content),e)}(e,t);break;case 4:xu(e,t);break;case 5:!function(e,t){const{push:a,helper:n,pure:l}=t;l&&a("/*#__PURE__*/"),a(`${n(Mr)}(`),wu(e.content,t),a(")")}(e,t);break;case 8:ku(e,t);break;case 3:!function(e,t){const{push:a,helper:n,pure:l}=t;l&&a("/*#__PURE__*/"),a(`${n(xr)}(${JSON.stringify(e.content)})`,e)}(e,t);break;case 13:!function(e,t){const{push:a,helper:n,pure:l}=t,{tag:s,props:i,children:o,patchFlag:r,dynamicProps:c,directives:u,isBlock:d,disableTracking:p,isComponent:_}=e;u&&a(n(Tr)+"("),d&&a(`(${n(vr)}(${p?"true":""}), `),l&&a("/*#__PURE__*/");a(n(d?Ac(t.inSSR,_):Nc(t.inSSR,_))+"(",e),yu(function(e){let t=e.length;for(;t--&&null==e[t];);return e.slice(0,t+1).map((e=>e||"null"))}([s,i,o,r,c]),t),a(")"),d&&a(")"),u&&(a(", "),wu(u,t),a(")"))}(e,t);break;case 14:!function(e,t){const{push:a,helper:n,pure:l}=t,s=ge(e.callee)?e.callee:n(e.callee);l&&a("/*#__PURE__*/"),a(s+"(",e),yu(e.arguments,t),a(")")}(e,t);break;case 15:!function(e,t){const{push:a,indent:n,deindent:l,newline:s}=t,{properties:i}=e;if(!i.length)return void a("{}",e);const o=i.length>1||!1;a(o?"{":"{ "),o&&n();for(let e=0;e<i.length;e++){const{key:n,value:l}=i[e];$u(n,t),a(": "),wu(l,t),e<i.length-1&&(a(","),s())}o&&l(),a(o?"}":" }")}(e,t);break;case 17:!function(e,t){bu(e.elements,t)}(e,t);break;case 18:!function(e,t){const{push:a,indent:n,deindent:l}=t,{params:s,returns:i,body:o,newline:r,isSlot:c}=e;c&&a(`_${Zr[Gr]}(`),a("(",e),_e(s)?yu(s,t):s&&wu(s,t),a(") => "),(r||o)&&(a("{"),n()),i?(r&&a("return "),_e(i)?bu(i,t):wu(i,t)):o&&wu(o,t),(r||o)&&(l(),a("}")),c&&a(")")}(e,t);break;case 19:!function(e,t){const{test:a,consequent:n,alternate:l,newline:s}=e,{push:i,indent:o,deindent:r,newline:c}=t;if(4===a.type){const e=!pc(a.content);e&&i("("),xu(a,t),e&&i(")")}else i("("),wu(a,t),i(")");s&&o(),t.indentLevel++,s||i(" "),i("? "),wu(n,t),t.indentLevel--,s&&c(),s||i(" "),i(": ");const u=19===l.type;u||t.indentLevel++,wu(l,t),u||t.indentLevel--,s&&r(!0)}(e,t);break;case 20:!function(e,t){const{push:a,helper:n,indent:l,deindent:s,newline:i}=t;a(`_cache[${e.index}] || (`),e.isVNode&&(l(),a(`${n(Vr)}(-1),`),i()),a(`_cache[${e.index}] = `),wu(e.value,t),e.isVNode&&(a(","),i(),a(`${n(Vr)}(1),`),i(),a(`_cache[${e.index}]`),s()),a(")")}(e,t);break;case 21:yu(e.body,t,!0,!1)}}function xu(e,t){const{content:a,isStatic:n}=e;t.push(n?JSON.stringify(a):a,e)}function ku(e,t){for(let a=0;a<e.children.length;a++){const n=e.children[a];ge(n)?t.push(n):wu(n,t)}}function $u(e,t){const{push:a}=t;8===e.type?(a("["),ku(e,t),a("]")):e.isStatic?a(pc(e.content)?e.content:JSON.stringify(e.content),e):a(`[${e.content}]`,e)}const Su=hu(/^(if|else|else-if)$/,((e,t,a)=>function(e,t,a,n){if("else"===t.name||t.exp&&t.exp.content.trim()||(t.exp=nc("true",!1,t.exp?t.exp.loc:e.loc)),"if"===t.name){const l=Cu(e,t),s={type:9,loc:e.loc,branches:[l]};if(a.replaceNode(s),n)return n(s,l,!0)}else{const l=a.parent.children;let s=l.indexOf(e);for(;s-- >=-1;){const i=l[s];if(!i||2!==i.type||i.content.trim().length){if(i&&9===i.type){a.removeNode();const l=Cu(e,t);i.branches.push(l);const s=n&&n(i,l,!1);mu(l,a),s&&s(),a.currentNode=null}break}a.removeNode(i)}}}(e,t,a,((e,t,n)=>{const l=a.parent.children;let s=l.indexOf(e),i=0;for(;s-- >=0;){const e=l[s];e&&9===e.type&&(i+=e.branches.length)}return()=>{if(n)e.codegenNode=Nu(t,i,a);else{const n=function(e){for(;;)if(19===e.type){if(19!==e.alternate.type)return e;e=e.alternate}else 20===e.type&&(e=e.value)}(e.codegenNode);n.alternate=Nu(t,i+e.branches.length-1,a)}}}))));function Cu(e,t){const a=3===e.tagType;return{type:10,loc:e.loc,condition:"else"===t.name?void 0:t.exp,children:a&&!yc(e,"for")?e.children:[e],userKey:wc(e,"key"),isTemplateIf:a}}function Nu(e,t,a){return e.condition?oc(e.condition,Au(e,t,a),sc(a.helper(xr),['""',"true"])):Au(e,t,a)}function Au(e,t,a){const{helper:n}=a,l=ac("key",nc(`${t}`,!1,Xr,2)),{children:s}=e,i=s[0];if(1!==s.length||1!==i.type){if(1===s.length&&11===i.type){const e=i.codegenNode;return Pc(e,l,a),e}{let t=64;return Qr(a,n(pr),tc([l]),s,t+"",void 0,void 0,!0,!1,!1,e.loc)}}{const e=i.codegenNode,t=14===(o=e).type&&o.callee===Jr?o.arguments[1].returns:o;return 13===t.type&&Mc(t,a),Pc(t,l,a),e}var o}const Tu=hu("for",((e,t,a)=>{const{helper:n,removeHelper:l}=a;return function(e,t,a,n){if(!t.exp)return;const l=Mu(t.exp);if(!l)return;const{scopes:s}=a,{source:i,value:o,key:r,index:c}=l,u={type:11,loc:t.loc,source:i,valueAlias:o,keyAlias:r,objectIndexAlias:c,parseResult:l,children:Sc(e)?e.children:[e]};a.replaceNode(u),s.vFor++;const d=n&&n(u);return()=>{s.vFor--,d&&d()}}(e,t,a,(t=>{const s=sc(n(Er),[t.source]),i=Sc(e),o=yc(e,"memo"),r=wc(e,"key"),c=r&&(6===r.type?nc(r.value.content,!0):r.exp),u=r?ac("key",c):null,d=4===t.source.type&&t.source.constType>0,p=d?64:r?128:256;return t.codegenNode=Qr(a,n(pr),void 0,s,p+"",void 0,void 0,!0,!d,!1,e.loc),()=>{let r;const{children:p}=t,_=1!==p.length||1!==p[0].type,f=Cc(e)?e:i&&1===e.children.length&&Cc(e.children[0])?e.children[0]:null;if(f?(r=f.codegenNode,i&&u&&Pc(r,u,a)):_?r=Qr(a,n(pr),u?tc([u]):void 0,e.children,"64",void 0,void 0,!0,void 0,!1):(r=p[0].codegenNode,i&&u&&Pc(r,u,a),r.isBlock!==!d&&(r.isBlock?(l(vr),l(Ac(a.inSSR,r.isComponent))):l(Nc(a.inSSR,r.isComponent))),r.isBlock=!d,r.isBlock?(n(vr),n(Ac(a.inSSR,r.isComponent))):n(Nc(a.inSSR,r.isComponent))),o){const e=ic(Ou(t.parseResult,[nc("_cached")]));e.body={type:21,body:[lc(["const _memo = (",o.exp,")"]),lc(["if (_cached",...c?[" && _cached.key === ",c]:[],` && ${a.helperString(Yr)}(_cached, _memo)) return _cached`]),lc(["const _item = ",r]),nc("_item.memo = _memo"),nc("return _item")],loc:Xr},s.arguments.push(e,nc("_cache"),nc(String(a.cached++)))}else s.arguments.push(ic(Ou(t.parseResult),r,!0))}}))})),Eu=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,Pu=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,Iu=/^\(|\)$/g;function Mu(e,t){const a=e.loc,n=e.content,l=n.match(Eu);if(!l)return;const[,s,i]=l,o={source:Uu(a,i.trim(),n.indexOf(i,s.length)),value:void 0,key:void 0,index:void 0};let r=s.trim().replace(Iu,"").trim();const c=s.indexOf(r),u=r.match(Pu);if(u){r=r.replace(Pu,"").trim();const e=u[1].trim();let t;if(e&&(t=n.indexOf(e,c+r.length),o.key=Uu(a,e,t)),u[2]){const l=u[2].trim();l&&(o.index=Uu(a,l,n.indexOf(l,o.key?t+e.length:c+r.length)))}}return r&&(o.value=Uu(a,r,c)),o}function Uu(e,t,a){return nc(t,!1,vc(e,a,t.length))}function Ou({value:e,key:t,index:a},n=[]){return function(e){let t=e.length;for(;t--&&!e[t];);return e.slice(0,t+1).map(((e,t)=>e||nc("_".repeat(t+1),!1)))}([e,t,a,...n])}const ju=nc("undefined",!1),Fu=(e,t)=>{if(1===e.type&&(1===e.tagType||3===e.tagType)){if(yc(e,"slot"))return t.scopes.vSlot++,()=>{t.scopes.vSlot--}}},Du=(e,t,a)=>ic(e,t,!1,!0,t.length?t[0].loc:a);function Lu(e,t,a=Du){t.helper(Gr);const{children:n,loc:l}=e,s=[],i=[];let o=t.scopes.vSlot>0||t.scopes.vFor>0;const r=yc(e,"slot",!0);if(r){const{arg:e,exp:t}=r;e&&!rc(e)&&(o=!0),s.push(ac(e||nc("default",!0),a(t,n,l)))}let c=!1,u=!1;const d=[],p=new Set;for(let e=0;e<n.length;e++){const l=n[e];let _;if(!Sc(l)||!(_=yc(l,"slot",!0))){3!==l.type&&d.push(l);continue}if(r)break;c=!0;const{children:f,loc:m}=l,{arg:h=nc("default",!0),exp:v}=_;let g;rc(h)?g=h?h.content:"default":o=!0;const b=a(v,f,m);let y,w,x;if(y=yc(l,"if"))o=!0,i.push(oc(y.exp,Ru(h,b),ju));else if(w=yc(l,/^else(-if)?$/,!0)){let t,a=e;for(;a--&&(t=n[a],3===t.type););if(t&&Sc(t)&&yc(t,"if")){n.splice(e,1),e--;let t=i[i.length-1];for(;19===t.alternate.type;)t=t.alternate;t.alternate=w.exp?oc(w.exp,Ru(h,b),ju):Ru(h,b)}}else if(x=yc(l,"for")){o=!0;const e=x.parseResult||Mu(x.exp);e&&i.push(sc(t.helper(Er),[e.source,ic(Ou(e),Ru(h,b),!0)]))}else{if(g){if(p.has(g))continue;p.add(g),"default"===g&&(u=!0)}s.push(ac(h,b))}}if(!r){const e=(e,t)=>ac("default",a(e,t,l));c?d.length&&d.some((e=>Bu(e)))&&(u||s.push(e(void 0,d))):s.push(e(void 0,n))}const _=o?2:zu(e.children)?3:1;let f=tc(s.concat(ac("_",nc(_+"",!1))),l);return i.length&&(f=sc(t.helper(Ir),[f,ec(i)])),{slots:f,hasDynamicSlots:o}}function Ru(e,t){return tc([ac("name",e),ac("fn",t)])}function zu(e){for(let t=0;t<e.length;t++){const a=e[t];switch(a.type){case 1:if(2===a.tagType||zu(a.children))return!0;break;case 9:if(zu(a.branches))return!0;break;case 10:case 11:if(zu(a.children))return!0}}return!1}function Bu(e){return 2!==e.type&&12!==e.type||(2===e.type?!!e.content.trim():Bu(e.content))}const Vu=new WeakMap,qu=(e,t)=>function(){if(1!==(e=t.currentNode).type||0!==e.tagType&&1!==e.tagType)return;const{tag:a,props:n}=e,l=1===e.tagType;let s=l?function(e,t,a=!1){let{tag:n}=e;const l=Ku(n),s=wc(e,"is");if(s)if(l){const e=6===s.type?s.value&&nc(s.value.content,!0):s.exp;if(e)return sc(t.helper(Cr),[e])}else 6===s.type&&s.value.content.startsWith("vue:")&&(n=s.value.content.slice(4));const i=!l&&yc(e,"is");if(i&&i.exp)return sc(t.helper(Cr),[i.exp]);const o=uc(n)||t.isBuiltInComponent(n);return o?(a||t.helper(o),o):(t.helper(Sr),t.components.add(n),Ic(n,"component"))}(e,t):`"${a}"`;const i=ye(s)&&s.callee===Cr;let o,r,c,u,d,p,_=0,f=i||s===_r||s===fr||!l&&("svg"===a||"foreignObject"===a);if(n.length>0){const a=Hu(e,t,void 0,l,i);o=a.props,_=a.patchFlag,d=a.dynamicPropNames;const n=a.directives;p=n&&n.length?ec(n.map((e=>function(e,t){const a=[],n=Vu.get(e);n?a.push(t.helperString(n)):(t.helper(Nr),t.directives.add(e.name),a.push(Ic(e.name,"directive")));const{loc:l}=e;if(e.exp&&a.push(e.exp),e.arg&&(e.exp||a.push("void 0"),a.push(e.arg)),Object.keys(e.modifiers).length){e.arg||(e.exp||a.push("void 0"),a.push("void 0"));const t=nc("true",!1,l);a.push(tc(e.modifiers.map((e=>ac(e,t))),l))}return ec(a,e.loc)}(e,t)))):void 0,a.shouldUseBlock&&(f=!0)}if(e.children.length>0)if(s===mr&&(f=!0,_|=1024),l&&s!==_r&&s!==mr){const{slots:a,hasDynamicSlots:n}=Lu(e,t);r=a,n&&(_|=1024)}else if(1===e.children.length&&s!==_r){const a=e.children[0],n=a.type,l=5===n||8===n;l&&0===ru(a,t)&&(_|=1),r=l||2===n?a:e.children}else r=e.children;0!==_&&(c=String(_),d&&d.length&&(u=function(e){let t="[";for(let a=0,n=e.length;a<n;a++)t+=JSON.stringify(e[a]),a<n-1&&(t+=", ");return t+"]"}(d))),e.codegenNode=Qr(t,s,o,r,c,u,p,!!f,!1,l,e.loc)};function Hu(e,t,a=e.props,n,l,s=!1){const{tag:i,loc:o,children:r}=e;let c=[];const u=[],d=[],p=r.length>0;let _=!1,f=0,m=!1,h=!1,v=!1,g=!1,b=!1,y=!1;const w=[],x=({key:e,value:a})=>{if(rc(e)){const s=e.content,i=oe(s);if(!i||n&&!l||"onclick"===s.toLowerCase()||"onUpdate:modelValue"===s||Ce(s)||(g=!0),i&&Ce(s)&&(y=!0),20===a.type||(4===a.type||8===a.type)&&ru(a,t)>0)return;"ref"===s?m=!0:"class"===s?h=!0:"style"===s?v=!0:"key"===s||w.includes(s)||w.push(s),!n||"class"!==s&&"style"!==s||w.includes(s)||w.push(s)}else b=!0};for(let n=0;n<a.length;n++){const l=a[n];if(6===l.type){const{loc:e,name:a,value:n}=l;let s=!0;if("ref"===a&&(m=!0,t.scopes.vFor>0&&c.push(ac(nc("ref_for",!0),nc("true")))),"is"===a&&(Ku(i)||n&&n.content.startsWith("vue:")))continue;c.push(ac(nc(a,!0,vc(e,0,a.length)),nc(n?n.content:"",s,n?n.loc:e)))}else{const{name:a,arg:n,exp:r,loc:f}=l,m="bind"===a,h="on"===a;if("slot"===a)continue;if("once"===a||"memo"===a)continue;if("is"===a||m&&xc(n,"is")&&Ku(i))continue;if(h&&s)continue;if((m&&xc(n,"key")||h&&p&&xc(n,"vue:before-update"))&&(_=!0),m&&xc(n,"ref")&&t.scopes.vFor>0&&c.push(ac(nc("ref_for",!0),nc("true"))),!n&&(m||h)){b=!0,r&&(c.length&&(u.push(tc(Gu(c),o)),c=[]),u.push(m?r:{type:14,loc:f,callee:t.helper(Lr),arguments:[r]}));continue}const v=t.directiveTransforms[a];if(v){const{props:a,needRuntime:n}=v(l,e,t);!s&&a.forEach(x),c.push(...a),n&&(d.push(l),be(n)&&Vu.set(l,n))}else Ne(a)||(d.push(l),p&&(_=!0))}}let k;if(u.length?(c.length&&u.push(tc(Gu(c),o)),k=u.length>1?sc(t.helper(Ur),u,o):u[0]):c.length&&(k=tc(Gu(c),o)),b?f|=16:(h&&!n&&(f|=2),v&&!n&&(f|=4),w.length&&(f|=8),g&&(f|=32)),_||0!==f&&32!==f||!(m||y||d.length>0)||(f|=512),!t.inSSR&&k)switch(k.type){case 15:let e=-1,a=-1,n=!1;for(let t=0;t<k.properties.length;t++){const l=k.properties[t].key;rc(l)?"class"===l.content?e=t:"style"===l.content&&(a=t):l.isHandlerKey||(n=!0)}const l=k.properties[e],s=k.properties[a];n?k=sc(t.helper(Fr),[k]):(l&&!rc(l.value)&&(l.value=sc(t.helper(Or),[l.value])),s&&(v||4===s.value.type&&"["===s.value.content.trim()[0]||17===s.value.type)&&(s.value=sc(t.helper(jr),[s.value])));break;case 14:break;default:k=sc(t.helper(Fr),[sc(t.helper(Dr),[k])])}return{props:k,directives:d,patchFlag:f,dynamicPropNames:w,shouldUseBlock:_}}function Gu(e){const t=new Map,a=[];for(let n=0;n<e.length;n++){const l=e[n];if(8===l.key.type||!l.key.isStatic){a.push(l);continue}const s=l.key.content,i=t.get(s);i?("style"===s||"class"===s||oe(s))&&Wu(i,l):(t.set(s,l),a.push(l))}return a}function Wu(e,t){17===e.value.type?e.value.elements.push(t.value):e.value=ec([e.value,t.value],e.loc)}function Ku(e){return"component"===e||"Component"===e}const Ju=(e,t)=>{if(Cc(e)){const{children:a,loc:n}=e,{slotName:l,slotProps:s}=function(e,t){let a,n='"default"';const l=[];for(let t=0;t<e.props.length;t++){const a=e.props[t];6===a.type?a.value&&("name"===a.name?n=JSON.stringify(a.value.content):(a.name=Ee(a.name),l.push(a))):"bind"===a.name&&xc(a.arg,"name")?a.exp&&(n=a.exp):("bind"===a.name&&a.arg&&rc(a.arg)&&(a.arg.content=Ee(a.arg.content)),l.push(a))}if(l.length>0){const{props:n,directives:s}=Hu(e,t,l,!1,!1);a=n}return{slotName:n,slotProps:a}}(e,t),i=[t.prefixIdentifiers?"_ctx.$slots":"$slots",l,"{}","undefined","true"];let o=2;s&&(i[2]=s,o=3),a.length&&(i[3]=ic([],a,!1,!1,n),o=4),t.scopeId&&!t.slotted&&(o=5),i.splice(o),e.codegenNode=sc(t.helper(Pr),i,n)}},Yu=/^\s*([\w$_]+|(async\s*)?\([^)]*?\))\s*=>|^\s*(async\s+)?function(?:\s+[\w$]+)?\s*\(/,Zu=(e,t,a,n)=>{const{loc:l,modifiers:s,arg:i}=e;let o;if(4===i.type)if(i.isStatic){let e=i.content;e.startsWith("vue:")&&(e=`vnode-${e.slice(4)}`),o=nc(Ue(Ee(e)),!0,i.loc)}else o=lc([`${a.helperString(Br)}(`,i,")"]);else o=i,o.children.unshift(`${a.helperString(Br)}(`),o.children.push(")");let r=e.exp;r&&!r.content.trim()&&(r=void 0);let c=a.cacheHandlers&&!r&&!a.inVOnce;if(r){const e=hc(r.content),t=!(e||Yu.test(r.content)),a=r.content.includes(";");(t||c&&e)&&(r=lc([`${t?"$event":"(...args)"} => ${a?"{":"("}`,r,a?"}":")"]))}let u={props:[ac(o,r||nc("() => {}",!1,l))]};return n&&(u=n(u)),c&&(u.props[0].value=a.cache(u.props[0].value)),u.props.forEach((e=>e.key.isHandlerKey=!0)),u},Xu=(e,t,a)=>{const{exp:n,modifiers:l,loc:s}=e,i=e.arg;return 4!==i.type?(i.children.unshift("("),i.children.push(') || ""')):i.isStatic||(i.content=`${i.content} || ""`),l.includes("camel")&&(4===i.type?i.content=i.isStatic?Ee(i.content):`${a.helperString(Rr)}(${i.content})`:(i.children.unshift(`${a.helperString(Rr)}(`),i.children.push(")"))),a.inSSR||(l.includes("prop")&&Qu(i,"."),l.includes("attr")&&Qu(i,"^")),!n||4===n.type&&!n.content.trim()?{props:[ac(i,nc("",!0,s))]}:{props:[ac(i,n)]}},Qu=(e,t)=>{4===e.type?e.content=e.isStatic?t+e.content:`\`${t}\${${e.content}}\``:(e.children.unshift(`'${t}' + (`),e.children.push(")"))},ed=(e,t)=>{if(0===e.type||1===e.type||11===e.type||10===e.type)return()=>{const a=e.children;let n,l=!1;for(let e=0;e<a.length;e++){const t=a[e];if(kc(t)){l=!0;for(let l=e+1;l<a.length;l++){const s=a[l];if(!kc(s)){n=void 0;break}n||(n=a[e]=lc([t],t.loc)),n.children.push(" + ",s),a.splice(l,1),l--}}}if(l&&(1!==a.length||0!==e.type&&(1!==e.type||0!==e.tagType||e.props.find((e=>7===e.type&&!t.directiveTransforms[e.name])))))for(let e=0;e<a.length;e++){const n=a[e];if(kc(n)||8===n.type){const l=[];2===n.type&&" "===n.content||l.push(n),t.ssr||0!==ru(n,t)||l.push("1"),a[e]={type:12,content:n,loc:n.loc,codegenNode:sc(t.helper(kr),l)}}}}},td=new WeakSet,ad=(e,t)=>{if(1===e.type&&yc(e,"once",!0)){if(td.has(e)||t.inVOnce)return;return td.add(e),t.inVOnce=!0,t.helper(Vr),()=>{t.inVOnce=!1;const e=t.currentNode;e.codegenNode&&(e.codegenNode=t.cache(e.codegenNode,!0))}}},nd=(e,t,a)=>{const{exp:n,arg:l}=e;if(!n)return ld();const s=n.loc.source,i=4===n.type?n.content:s;if(!i.trim()||!hc(i))return ld();const o=l||nc("modelValue",!0),r=l?rc(l)?`onUpdate:${l.content}`:lc(['"onUpdate:" + ',l]):"onUpdate:modelValue";let c;c=lc([(a.isTS?"($event: any)":"$event")+" => ((",n,") = $event)"]);const u=[ac(o,e.exp),ac(r,c)];if(e.modifiers.length&&1===t.tagType){const t=e.modifiers.map((e=>(pc(e)?e:JSON.stringify(e))+": true")).join(", "),a=l?rc(l)?`${l.content}Modifiers`:lc([l,' + "Modifiers"']):"modelModifiers";u.push(ac(a,nc(`{ ${t} }`,!1,e.loc,2)))}return ld(u)};function ld(e=[]){return{props:e}}const sd=new WeakSet,id=(e,t)=>{if(1===e.type){const a=yc(e,"memo");if(!a||sd.has(e))return;return sd.add(e),()=>{const n=e.codegenNode||t.currentNode.codegenNode;n&&13===n.type&&(1!==e.tagType&&Mc(n,t),e.codegenNode=sc(t.helper(Jr),[a.exp,ic(void 0,n),"_cache",String(t.cached++)]))}}};function od(e,t={}){const a=t.onError||cr,n="module"===t.mode;!0===t.prefixIdentifiers?a(dr(46)):n&&a(dr(47)),t.cacheHandlers&&a(dr(48)),t.scopeId&&!n&&a(dr(49));const l=ge(e)?function(e,t={}){const a=function(e,t){const a=ce({},jc);let n;for(n in t)a[n]=void 0===t[n]?jc[n]:t[n];return{options:a,column:1,line:1,offset:0,originalSource:e,source:e,inPre:!1,inVPre:!1,onWarn:a.onWarn}}(e,t),n=Yc(a);return function(e,t=Xr){return{type:0,children:e,helpers:[],components:[],directives:[],hoists:[],imports:[],cached:0,temps:0,codegenNode:void 0,loc:t}}(Fc(a,0,[]),Zc(a,n))}(e,t):e,[s,i]=[[ad,Su,id,Tu,Ju,qu,Fu,ed],{on:Zu,bind:Xu,model:nd}];return fu(l,ce({},t,{prefixIdentifiers:!1,nodeTransforms:[...s,...t.nodeTransforms||[]],directiveTransforms:ce({},i,t.directiveTransforms||{})})),function(e,t={}){const a=function(e,{mode:t="function",prefixIdentifiers:a="module"===t,sourceMap:n=!1,filename:l="template.vue.html",scopeId:s=null,optimizeImports:i=!1,runtimeGlobalName:o="Vue",runtimeModuleName:r="vue",ssrRuntimeModuleName:c="vue/server-renderer",ssr:u=!1,isTS:d=!1,inSSR:p=!1}){const _={mode:t,prefixIdentifiers:a,sourceMap:n,filename:l,scopeId:s,optimizeImports:i,runtimeGlobalName:o,runtimeModuleName:r,ssrRuntimeModuleName:c,ssr:u,isTS:d,inSSR:p,source:e.loc.source,code:"",column:1,line:1,offset:0,indentLevel:0,pure:!1,map:void 0,helper:e=>`_${Zr[e]}`,push(e,t){_.code+=e},indent(){f(++_.indentLevel)},deindent(e=!1){e?--_.indentLevel:f(--_.indentLevel)},newline(){f(_.indentLevel)}};function f(e){_.push("\n"+"  ".repeat(e))}return _}(e,t);t.onContextCreated&&t.onContextCreated(a);const{mode:n,push:l,prefixIdentifiers:s,indent:i,deindent:o,newline:r,ssr:c}=a,u=e.helpers.length>0,d=!s&&"module"!==n;if(function(e,t){const{push:a,newline:n,runtimeGlobalName:l}=t,s=l;e.helpers.length>0&&(a(`const _Vue = ${s}\n`),e.hoists.length)&&a(`const { ${[yr,wr,xr,kr,$r].filter((t=>e.helpers.includes(t))).map(vu).join(", ")} } = _Vue\n`),function(e,t){if(!e.length)return;t.pure=!0;const{push:a,newline:n}=t;n();for(let l=0;l<e.length;l++){const s=e[l];s&&(a(`const _hoisted_${l+1} = `),wu(s,t),n())}t.pure=!1}(e.hoists,t),n(),a("return ")}(e,a),l(`function ${c?"ssrRender":"render"}(${(c?["_ctx","_push","_parent","_attrs"]:["_ctx","_cache"]).join(", ")}) {`),i(),d&&(l("with (_ctx) {"),i(),u&&(l(`const { ${e.helpers.map(vu).join(", ")} } = _Vue`),l("\n"),r())),e.components.length&&(gu(e.components,"component",a),(e.directives.length||e.temps>0)&&r()),e.directives.length&&(gu(e.directives,"directive",a),e.temps>0&&r()),e.temps>0){l("let ");for(let t=0;t<e.temps;t++)l(`${t>0?", ":""}_temp${t}`)}return(e.components.length||e.directives.length||e.temps)&&(l("\n"),r()),c||l("return "),e.codegenNode?wu(e.codegenNode,a):l("null"),d&&(o(),l("}")),o(),l("}"),{ast:e,code:a.code,preamble:"",map:a.map?a.map.toJSON():void 0}}(l,ce({},t,{prefixIdentifiers:!1}))}const rd=Symbol(""),cd=Symbol(""),ud=Symbol(""),dd=Symbol(""),pd=Symbol(""),_d=Symbol(""),fd=Symbol(""),md=Symbol(""),hd=Symbol(""),vd=Symbol("");var gd;let bd;gd={[rd]:"vModelRadio",[cd]:"vModelCheckbox",[ud]:"vModelText",[dd]:"vModelSelect",[pd]:"vModelDynamic",[_d]:"withModifiers",[fd]:"withKeys",[md]:"vShow",[hd]:"Transition",[vd]:"TransitionGroup"},Object.getOwnPropertySymbols(gd).forEach((e=>{Zr[e]=gd[e]}));const yd=L("style,iframe,script,noscript",!0),wd={isVoidTag:Z,isNativeTag:e=>J(e)||Y(e),isPreTag:e=>"pre"===e,decodeEntities:function(e,t=!1){return bd||(bd=document.createElement("div")),t?(bd.innerHTML=`<div foo="${e.replace(/"/g,"&quot;")}">`,bd.children[0].getAttribute("foo")):(bd.innerHTML=e,bd.textContent)},isBuiltInComponent:e=>cc(e,"Transition")?hd:cc(e,"TransitionGroup")?vd:void 0,getNamespace(e,t){let a=t?t.ns:0;if(t&&2===a)if("annotation-xml"===t.tag){if("svg"===e)return 1;t.props.some((e=>6===e.type&&"encoding"===e.name&&null!=e.value&&("text/html"===e.value.content||"application/xhtml+xml"===e.value.content)))&&(a=0)}else/^m(?:[ions]|text)$/.test(t.tag)&&"mglyph"!==e&&"malignmark"!==e&&(a=0);else t&&1===a&&("foreignObject"!==t.tag&&"desc"!==t.tag&&"title"!==t.tag||(a=0));if(0===a){if("svg"===e)return 1;if("math"===e)return 2}return a},getTextMode({tag:e,ns:t}){if(0===t){if("textarea"===e||"title"===e)return 1;if(yd(e))return 2}return 0}},xd=(e,t)=>{const a=G(e);return nc(JSON.stringify(a),!1,t,3)},kd=L("passive,once,capture"),$d=L("stop,prevent,self,ctrl,shift,alt,meta,exact,middle"),Sd=L("left,right"),Cd=L("onkeyup,onkeydown,onkeypress",!0),Nd=(e,t)=>rc(e)&&"onclick"===e.content.toLowerCase()?nc(t,!0):4!==e.type?lc(["(",e,`) === "onClick" ? "${t}" : (`,e,")"]):e,Ad=(e,t)=>{1!==e.type||0!==e.tagType||"script"!==e.tag&&"style"!==e.tag||t.removeNode()},Td=[e=>{1===e.type&&e.props.forEach(((t,a)=>{6===t.type&&"style"===t.name&&t.value&&(e.props[a]={type:7,name:"bind",arg:nc("style",!0,t.loc),exp:xd(t.value.content,t.loc),modifiers:[],loc:t.loc})}))}],Ed={cloak:()=>({props:[]}),html:(e,t,a)=>{const{exp:n,loc:l}=e;return t.children.length&&(t.children.length=0),{props:[ac(nc("innerHTML",!0,l),n||nc("",!0))]}},text:(e,t,a)=>{const{exp:n,loc:l}=e;return t.children.length&&(t.children.length=0),{props:[ac(nc("textContent",!0),n?ru(n,a)>0?n:sc(a.helperString(Mr),[n],l):nc("",!0))]}},model:(e,t,a)=>{const n=nd(e,t,a);if(!n.props.length||1===t.tagType)return n;const{tag:l}=t,s=a.isCustomElement(l);if("input"===l||"textarea"===l||"select"===l||s){let e=ud,i=!1;if("input"===l||s){const a=wc(t,"type");if(a){if(7===a.type)e=pd;else if(a.value)switch(a.value.content){case"radio":e=rd;break;case"checkbox":e=cd;break;case"file":i=!0}}else(function(e){return e.props.some((e=>!(7!==e.type||"bind"!==e.name||e.arg&&4===e.arg.type&&e.arg.isStatic)))})(t)&&(e=pd)}else"select"===l&&(e=dd);i||(n.needRuntime=a.helper(e))}return n.props=n.props.filter((e=>!(4===e.key.type&&"modelValue"===e.key.content))),n},on:(e,t,a)=>Zu(e,0,a,(t=>{const{modifiers:n}=e;if(!n.length)return t;let{key:l,value:s}=t.props[0];const{keyModifiers:i,nonKeyModifiers:o,eventOptionModifiers:r}=((e,t,a,n)=>{const l=[],s=[],i=[];for(let a=0;a<t.length;a++){const n=t[a];kd(n)?i.push(n):Sd(n)?rc(e)?Cd(e.content)?l.push(n):s.push(n):(l.push(n),s.push(n)):$d(n)?s.push(n):l.push(n)}return{keyModifiers:l,nonKeyModifiers:s,eventOptionModifiers:i}})(l,n);if(o.includes("right")&&(l=Nd(l,"onContextmenu")),o.includes("middle")&&(l=Nd(l,"onMouseup")),o.length&&(s=sc(a.helper(_d),[s,JSON.stringify(o)])),!i.length||rc(l)&&!Cd(l.content)||(s=sc(a.helper(fd),[s,JSON.stringify(i)])),r.length){const e=r.map(Me).join("");l=rc(l)?nc(`${l.content}${e}`,!0):lc(["(",l,`) + "${e}"`])}return{props:[ac(l,s)]}})),show:(e,t,a)=>({props:[],needRuntime:a.helper(md)})},Pd=Object.create(null);function Id(e,t){if(!ge(e)){if(!e.nodeType)return le;e=e.innerHTML}const a=e,n=Pd[a];if(n)return n;if("#"===e[0]){const t=document.querySelector(e);e=t?t.innerHTML:""}const{code:l}=function(e,t={}){return od(e,ce({},wd,t,{nodeTransforms:[Ad,...Td,...t.nodeTransforms||[]],directiveTransforms:ce({},Ed,t.directiveTransforms||{}),transformHoist:null}))}(e,ce({hoistStatic:!0,onError:void 0,onWarn:le},t)),s=new Function("Vue",l)(rr);return s._rc=!0,Pd[a]=s}pi(Id);var Md=Object.freeze({__proto__:null,BaseTransition:Bn,Comment:Cs,EffectScope:ze,Fragment:$s,KeepAlive:el,ReactiveEffect:tt,Static:Ns,Suspense:kn,Teleport:ks,Text:Ss,Transition:ro,TransitionGroup:No,VueElement:no,callWithAsyncErrorHandling:Ma,callWithErrorHandling:Ia,camelize:Ee,capitalize:Me,cloneVNode:Gs,compatUtils:null,compile:Id,computed:yi,createApp:lr,createBlock:js,createCommentVNode:Js,createElementBlock:Os,createElementVNode:Vs,createHydrationRenderer:ms,createPropsRestProxy:Ti,createRenderer:fs,createSSRApp:sr,createSlots:Tl,createStaticVNode:Ks,createTextVNode:Ws,createVNode:qs,customRef:ka,defineAsyncComponent:Zn,defineComponent:Jn,defineCustomElement:eo,defineEmits:xi,defineExpose:ki,defineProps:wi,defineSSRCustomElement:to,get devtools(){return nn},effect:nt,effectScope:Be,getCurrentInstance:li,getCurrentScope:qe,getTransitionRawChildren:Kn,guardReactiveProps:Hs,h:Pi,handleError:Ua,hydrate:nr,initCustomFormatter:Ui,initDirectivesForSSR:or,inject:En,isMemoSame:ji,isProxy:ia,isReactive:na,isReadonly:la,isRef:_a,isRuntimeOnly:_i,isShallow:sa,isVNode:Fs,markRaw:ra,mergeDefaults:Ai,mergeProps:Qs,nextTick:Ka,normalizeClass:W,normalizeProps:K,normalizeStyle:V,onActivated:al,onBeforeMount:ul,onBeforeUnmount:fl,onBeforeUpdate:pl,onDeactivated:nl,onErrorCaptured:bl,onMounted:dl,onRenderTracked:gl,onRenderTriggered:vl,onScopeDispose:He,onServerPrefetch:hl,onUnmounted:ml,onUpdated:_l,openBlock:Es,popScopeId:fn,provide:Tn,proxyRefs:wa,pushScopeId:_n,queuePostFlushCb:Xa,reactive:Xt,readonly:ea,ref:fa,registerRuntimeCompiler:pi,render:ar,renderList:Al,renderSlot:El,resolveComponent:xl,resolveDirective:Sl,resolveDynamicComponent:$l,resolveFilter:null,resolveTransitionHooks:qn,setBlockTracking:Ms,setDevtoolsHook:sn,setTransitionHooks:Wn,shallowReactive:Qt,shallowReadonly:ta,shallowRef:ma,ssrContextKey:Ii,ssrUtils:null,stop:lt,toDisplayString:ee,toHandlerKey:Ue,toHandlers:Il,toRaw:oa,toRef:Ca,toRefs:$a,transformVNodeArgs:Ls,triggerRef:ga,unref:ba,useAttrs:Ci,useCssModule:lo,useCssVars:so,useSSRContext:Mi,useSlots:Si,useTransitionState:Rn,vModelCheckbox:Oo,vModelDynamic:Bo,vModelRadio:Fo,vModelSelect:Do,vModelText:Uo,vShow:Jo,version:Fi,warn:Ta,watch:On,watchEffect:Pn,watchPostEffect:In,watchSyncEffect:Mn,withAsyncContext:Ei,withCtx:hn,withDefaults:$i,withDirectives:yl,withKeys:Ko,withMemo:Oi,withModifiers:Go,withScopeId:mn}),Ud={components:{},props:{id:String,chart_type:String,register_on_status_change:Boolean,base_url_request:String,get_params_url_request:Function,get_custom_chart_options:Function},emits:["apply","hidden","showed","chart_reloaded","zoom"],created(){},beforeUnmount(){this.chart.destroyChart()},data:()=>({chart:null,chart_options:null,from_zoom:!1}),async mounted(){await this.init(),ntopng_sync.ready(this.$props.id)},methods:{init:async function(){let e=ntopng_status_manager.get_status(),t=this.get_url_request(e);this.register_on_status_change&&this.register_status(e),await this.draw_chart(t)},get_data_uri:async function(e){if(null==this.chart)return null;return await this.chart.to_data_uri()},download_chart_png:async function(e,t){if(null==this.chart)return;let a=await this.chart.to_data_uri();downloadURI(a,e)},register_status:function(e){let t=this.get_url_request(e);ntopng_status_manager.on_status_change(this.id,(e=>{1==this.from_zoom&&(this.from_zoom=!1);let a=this.get_url_request(e);a!=t?(t=a,this.update_chart(a)):t=a}),!1)},get_url_request:function(e){let t;return null!=this.get_params_url_request?(null==e&&(e=ntopng_status_manager.get_status()),t=this.get_params_url_request(e)):t=ntopng_url_manager.get_url_params(),`${this.base_url_request}?${t}`},draw_chart:async function(e){let t=ntopChartApex,a=this.chart_type;null==a&&(a=t.typeChart.TS_STACKED),this.chart=t.newChart(a);let n=this;this.chart.registerEvent("zoomed",(function(e,t){n.on_zoomed(e,t)}));let l=await this.get_chart_options(e);this.chart.drawChart(this.$refs.chart,l)},update_chart:async function(e){let t=await this.get_chart_options(e);this.chart.updateChart(t)},update_chart_options:function(e){this.chart.updateChart(e)},update_chart_series:function(e){null!=e&&this.chart.updateSeries(e)},get_chart_options:async function(e){let t;return t=null==this.get_custom_chart_options?await ntopng_utility.http_request(e):await this.get_custom_chart_options(e),this.$emit("chart_reloaded",t),t},on_zoomed:function(e,{xaxis:t,yaxis:a}){this.from_zoom=!0;const n=moment(t.min),l=moment(t.max);let s={epoch_begin:Number.parseInt(n.unix()),epoch_end:Number.parseInt(l.unix())};ntopng_events_manager.emit_event(ntopng_events.EPOCH_CHANGE,s,this.id),this.$emit("zoom",s)}}};const Od={style:{width:"100%"},ref:"chart"};Ud.render=function(e,t,a,n,l,s){return Es(),Os("div",Od,null,512)},Ud.__file="http_src/vue/chart.vue";const jd=["selected","value","disabled"],Fd=["label"],Dd=["selected","value","disabled"];var Ld={__name:"select-search",props:{id:String,options:Array,selected_option:Object,disable_change:Boolean},emits:["update:selected_option","select_option"],setup(e,{expose:t,emit:a}){const n=e,l=fa(null),s=fa([]),i=fa([]),o=fa({});function r(){return null==n.selected_option?n.options[0]:n.selected_option}function c(e){null==e&&(e=r()),o.value=e,null==o.value.value&&(o.value.value=e.label)}function u(e){let t;return null==e&&(e=r()),t=e.value?e.value:e.label,t}On((()=>n.selected_option),((e,t)=>{c(e);let a=l.value,n=u(e);$(a).val(n),$(a).trigger("change")}),{flush:"pre"});let d=!0;function p(){!function(){if(s.value=[],i.value=[],null==n.options)return;let e={};n.options.forEach((t=>{let a={...t};0!=a.value&&"0"!=a.value||(a.value=null),null==a.value&&(a.value=a.label),null==t.group?s.value.push(a):(null==e[t.group]&&(e[t.group]={group:a.group,options:[]}),e[t.group].options.push(a))})),i.value=ntopng_utility.object_to_array(e)}(),c()}On((()=>n.options),((e,t)=>{1!=n.disable_change&&null!=e&&p()}),{flush:"pre"}),dl((()=>{n.options&&(n.disable_change&&d||p())})),On([s,i],((e,t)=>{_()}),{flush:"post"});const _=()=>{let e=l.value;0==d&&f(),$(e).hasClass("select2-hidden-accessible")||($(e).select2({width:"100%",height:"500px",theme:"bootstrap-5",dropdownParent:$(e).parent(),dropdownAutoWidth:!0}),$(e).on("select2:select",(function(e){let t=e.params.data.element._value,l=function(e){null==e&&(e=u());let t=s.value.find((t=>t.value==e));if(null!=t)return t;for(let a=0;a<i.value.length;a+=1)if(t=i.value[a].options.find((t=>t.value==e)),null!=t)return t;return null}(t),o=n.options.find((e=>e.label==l.label));t!=n.selected_option&&(a("update:selected_option",o),a("select_option",o))}))),d=!1};function f(){try{$(l.value).select2("destroy"),$(l.value).off("select2:select")}catch(e){console.error("Destroy select-search catch error:"),console.error(e)}}return t({render:_}),fl((()=>{f()})),(e,t)=>(Es(),Os("select",{class:"select2 form-select",ref_key:"select2",ref:l,required:"",name:"filter_type"},[(Es(!0),Os($s,null,Al(s.value,((e,t)=>(Es(),Os("option",{class:"ntopng-dropdown-min-width no-wrap",selected:e.value==o.value.value,value:e.value,disabled:e.disabled},ee(e.label),9,jd)))),256)),(Es(!0),Os($s,null,Al(i.value,((e,t)=>(Es(),Os("optgroup",{label:e.group},[(Es(!0),Os($s,null,Al(e.options,((e,t)=>(Es(),Os("option",{selected:e.value==o.value.value,value:e.value,disabled:e.disabled},ee(e.label),9,Dd)))),256))],8,Fd)))),256))],512))},__file:"http_src/vue/select-search.vue"},Rd={components:{"select-search":Ld},props:{id:String,enable_refresh:Boolean},watch:{enable_refresh:function(e,t){1==e?this.start_refresh():null!=this.refresh_interval&&(clearInterval(this.refresh_interval),this.refresh_interval=null)}},emits:["epoch_change"],created(){},mounted(){let e=ntopng_url_manager.get_url_entry("epoch_begin"),t=ntopng_url_manager.get_url_entry("epoch_end");null!=e&&null!=t&&ntopng_events_manager.emit_event(ntopng_events.EPOCH_CHANGE,{epoch_begin:Number.parseInt(e),epoch_end:Number.parseInt(t)},this.$props.id);let a=this,n=(e,t)=>flatpickr($(this.$refs[e]),{enableTime:!0,dateFormat:"d/m/Y H:i",time_24hr:!0,clickOpens:!0,onChange:function(e,t,n){a.enable_apply=!0,a.wrong_date=a.flat_begin_date.selectedDates[0].getTime()>a.flat_end_date.selectedDates[0].getTime()}});this.flat_begin_date=n("begin-date"),this.flat_end_date=n("end-date"),ntopng_events_manager.on_event_change(this.$props.id,ntopng_events.EPOCH_CHANGE,(e=>this.on_status_updated(e)),!0),ntopng_sync.ready(this.$props.id),this.enable_refresh&&this.start_refresh()},methods:{start_refresh:function(){this.refresh_interval=setInterval((()=>{let e=this.selected_time_option?.value;this.enable_refresh&&null!=e&&"custom"!=e&&(this.update_from_interval=!0,this.change_select_time(!0))}),1e3*this.refresh_interval_seconds)},utc_s_to_server_date:function(e){let t=1e3*e,a=new Date(t).getTimezoneOffset(),n=moment.tz(t,ntop_zoneinfo)._offset;return new Date(t+1e3*(n+a)*60)},server_date_to_date:function(e,t){let a=e.getTime(),n=e.getTimezoneOffset(),l=moment.tz(a,ntop_zoneinfo)._offset;return new Date(a-1e3*(l+n)*60)},on_status_updated:function(e){let t=Date.now(),a=t-18e5;null!=e.epoch_end&&null!=e.epoch_begin&&Number.parseInt(e.epoch_end)>Number.parseInt(e.epoch_begin)?(e.epoch_begin=Number.parseInt(e.epoch_begin),e.epoch_end=Number.parseInt(e.epoch_end),t=1e3*e.epoch_end,a=1e3*e.epoch_begin):(e.epoch_end=this.get_utc_seconds(t),e.epoch_begin=this.get_utc_seconds(a),ntopng_url_manager.add_obj_to_url(e),this.emit_epoch_change(e,this.$props.id)),this.flat_begin_date.setDate(this.utc_s_to_server_date(e.epoch_begin)),this.flat_end_date.setDate(this.utc_s_to_server_date(e.epoch_end)),this.set_select_time_value(a,t),this.epoch_status={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end},0==this.update_from_interval&&this.add_status_in_history(this.epoch_status),this.enable_apply=!1,this.update_from_interval=!1,ntopng_url_manager.add_obj_to_url(this.epoch_status)},set_select_time_value:function(e,t){let a=this.get_select_values();const n=60,l=this.get_utc_seconds(Date.now()),s=this.get_utc_seconds(t),i=this.get_utc_seconds(e);this.is_between(s,l,n)?this.is_between(i,l-a.min_5,n)?this.select_time_value="min_5":this.is_between(i,l-a.min_30,n)?this.select_time_value="min_30":this.is_between(i,l-a.hour,n)?this.select_time_value="hour":this.is_between(i,l-a.day,n)?this.select_time_value="day":this.is_between(i,l-a.week,n)?this.select_time_value="week":this.is_between(i,l-a.month,n)?this.select_time_value="month":this.is_between(i,l-a.year,n)?this.select_time_value="year":this.select_time_value="custom":this.select_time_value="custom",this.time_preset_list.forEach((e=>{e.currently_active=!1,e.value==this.select_time_value&&(this.selected_time_option=e,e.currently_active=!0)}))},apply:function(){let e=this.get_utc_seconds(Date.now()),t=this.server_date_to_date(this.flat_begin_date.selectedDates[0]),a=this.get_utc_seconds(t.getTime()),n=this.server_date_to_date(this.flat_end_date.selectedDates[0]),l=this.get_utc_seconds(n.getTime());l>e&&(l=e);let s={epoch_begin:a,epoch_end:l};this.emit_epoch_change(s)},change_select_time:function(e){let t=this.get_select_values()[this.selected_time_option.value],a=this.get_utc_seconds(Date.now()),n={epoch_begin:a-t,epoch_end:a,refresh_data:e};this.emit_epoch_change(n)},get_select_values:function(){return{min_5:300,min_30:1800,hour:3600,day:this.get_last_day_seconds(),week:this.get_last_week_seconds(),month:this.get_last_month_seconds(),year:this.get_last_year_seconds()}},get_utc_seconds:function(e){return Number.parseInt(e/1e3)},is_between:function(e,t,a){return e>=t-a&&e<=t},get_last_day_seconds:function(){let e=new Date;return this.get_utc_seconds(Date.now()-e.setDate(e.getDate()-1))},get_last_week_seconds:function(){let e=new Date;return this.get_utc_seconds(Date.now()-e.setDate(e.getDate()-7))},get_last_month_seconds:function(){let e=new Date;return this.get_utc_seconds(Date.now()-e.setMonth(e.getMonth()-1))},get_last_year_seconds:function(){let e=new Date;return this.get_utc_seconds(Date.now()-e.setMonth(e.getMonth()-12))},zoom:function(e){if(null==this.epoch_status)return;let t=(this.epoch_status.epoch_end-this.epoch_status.epoch_begin)/e,a=this.epoch_status.epoch_end/2+this.epoch_status.epoch_begin/2;this.epoch_status.epoch_begin=a-t/2,this.epoch_status.epoch_end=a+t/2;let n=this.get_utc_seconds(Date.now());this.epoch_status.epoch_end>n&&(this.epoch_status.epoch_end=n),this.epoch_status.epoch_end=Number.parseInt(this.epoch_status.epoch_end),this.epoch_status.epoch_begin=Number.parseInt(this.epoch_status.epoch_begin),this.epoch_status.epoch_begin==this.epoch_status.epoch_end&&(this.epoch_status.epoch_begin-=2),this.emit_epoch_change(this.epoch_status)},jump_time_back:function(){if(null==this.epoch_status)return;this.epoch_status.epoch_begin-=1800,this.epoch_status.epoch_end-=1800,this.emit_epoch_change(this.epoch_status)},jump_time_ahead:function(){if(null==this.epoch_status)return;let e=this.epoch_status.epoch_end,t=this.get_utc_seconds(Date.now());this.epoch_status.epoch_end+=1800,this.epoch_status.epoch_end>t&&(this.epoch_status.epoch_end=t),this.epoch_status.epoch_begin+=this.epoch_status.epoch_end-e,this.emit_epoch_change(this.epoch_status)},emit_epoch_change:function(e,t){null!=e.epoch_end&&null!=e.epoch_begin&&(this.wrong_date=!1,e.epoch_begin>e.epoch_end?this.wrong_date=!0:(t!=this.id&&this.on_status_updated(e),ntopng_events_manager.emit_event(ntopng_events.EPOCH_CHANGE,e,this.id),this.$emit("epoch_change",e)))},add_status_in_history:function(e){this.history_last_status=this.history[this.history.length-1],this.history.length>5&&this.history.shift(),this.history.push(e)},apply_status_by_history:function(){null!=this.history_last_status&&(this.history.pop(),this.history.pop(),this.emit_epoch_change(this.history_last_status))}},data:()=>({i18n:e=>i18n(e),epoch_status:null,refresh_interval:null,refresh_interval_seconds:60,update_from_interval:!1,history:[],history_last_status:null,enable_apply:!1,select_time_value:"min_5",selected_time_option:{value:"min_5",label:i18n("show_alerts.presets.5_min"),currently_active:!1},wrong_date:!1,flat_begin_date:null,flat_end_date:null,time_preset_list:[{value:"min_5",label:i18n("show_alerts.presets.5_min"),currently_active:!1},{value:"min_30",label:i18n("show_alerts.presets.30_min"),currently_active:!0},{value:"hour",label:i18n("show_alerts.presets.hour"),currently_active:!1},{value:"day",label:i18n("show_alerts.presets.day"),currently_active:!1},{value:"week",label:i18n("show_alerts.presets.week"),currently_active:!1},{value:"month",label:i18n("show_alerts.presets.month"),currently_active:!1},{value:"year",label:i18n("show_alerts.presets.year"),currently_active:!1},{value:"custom",label:i18n("show_alerts.presets.custom"),currently_active:!1,disabled:!0}]})};const zd=e=>(_n("data-v-bc6f1430"),e=e(),fn(),e),Bd={class:"input-group"},Vd={class:"form-group"},qd={class:"controls d-flex flex-wrap"},Hd={class:"btn-group me-auto btn-group-sm"},Gd={class:"btn-group ms-2"},Wd=zd((()=>Vs("span",{class:"input-group-text"},[Vs("i",{class:"fas fa-calendar-alt"})],-1))),Kd={class:"flatpickr flatpickr-input",type:"text",placeholder:"Choose a date..","data-id":"datetime",ref:"begin-date"},Jd=zd((()=>Vs("span",{class:"input-group-text"},[Vs("i",{class:"fas fa-long-arrow-alt-right"})],-1))),Yd={class:"flatpickr flatpickr-input",type:"text",placeholder:"Choose a date..","data-id":"datetime",ref:"end-date"},Zd=["title"],Xd=[zd((()=>Vs("i",{class:"fas fa-exclamation-circle"},null,-1)))],Qd={class:"d-flex align-items-center ms-2"},ep=["disabled"],tp={class:"btn-group"},ap=["title"],np=[zd((()=>Vs("i",{class:"fas fa-long-arrow-alt-left"},null,-1)))],lp=["title"],sp=[zd((()=>Vs("i",{class:"fas fa-long-arrow-alt-right"},null,-1)))],ip=["title"],op=[zd((()=>Vs("i",{class:"fas fa-search-plus"},null,-1)))],rp=["title"],cp=[zd((()=>Vs("i",{class:"fas fa-search-minus"},null,-1)))],up=["disabled","title"],dp=[zd((()=>Vs("i",{class:"fas fa-undo"},null,-1)))],pp=["disabled","title"],_p=[zd((()=>Vs("i",{class:"fas fa-sync"},null,-1)))];function fp(e,t){void 0===t&&(t={});var a=t.insertAt;if(e&&"undefined"!=typeof document){var n=document.head||document.getElementsByTagName("head")[0],l=document.createElement("style");l.type="text/css","top"===a&&n.firstChild?n.insertBefore(l,n.firstChild):n.appendChild(l),l.styleSheet?l.styleSheet.cssText=e:l.appendChild(document.createTextNode(e))}}fp("\n.date_time_input[data-v-bc6f1430] {\n  width: 10.5rem;\n  max-width: 10.5rem;\n  min-width: 10.5rem;\n}\n"),Rd.render=function(e,t,a,n,l,s){const i=xl("select-search");return Es(),Os("div",Bd,[Vs("div",Vd,[Vs("div",qd,[Vs("div",Hd,[El(e.$slots,"begin"),qs(i,{selected_option:l.selected_time_option,"onUpdate:selected_option":t[0]||(t[0]=e=>l.selected_time_option=e),id:"time_preset_range_picker",options:l.time_preset_list,onSelect_option:t[1]||(t[1]=e=>s.change_select_time(null))},null,8,["selected_option","options"]),Vs("div",Gd,[Wd,Vs("input",Kd,null,512),Js(' <input ref="begin-date" @change="enable_apply=true" @change="change_begin_date" type="date" class="date_time_input begin-timepicker form-control border-right-0 fix-safari-input"> '),Js(' <input ref="begin-time" @change="enable_apply=true" type="time" class="date_time_input begin-timepicker form-control border-right-0 fix-safari-input"> '),Jd,Vs("input",Yd,null,512),Js(' <input ref="end-date" @change="enable_apply=true" type="date" class="date_time_input end-timepicker form-control border-left-0 fix-safari-input" style="width: 2.5rem;"> '),Js(' <input ref="end-time" @change="enable_apply=true" type="time" class="date_time_input end-timepicker form-control border-left-0 fix-safari-input"> '),yl(Vs("span",{title:l.i18n("wrong_date_range"),style:{"margin-left":"0.2rem",color:"red"}},Xd,8,Zd),[[Jo,l.wrong_date]])]),Vs("div",Qd,[Vs("button",{disabled:!l.enable_apply||l.wrong_date,onClick:t[2]||(t[2]=(...e)=>s.apply&&s.apply(...e)),class:"btn btn-sm btn-primary"},ee(l.i18n("apply")),9,ep),Vs("div",tp,[Vs("button",{onClick:t[3]||(t[3]=e=>s.jump_time_back()),class:"btn btn-sm btn-link",ref:"btn-jump-time-back",title:l.i18n("date_time_range_picker.btn_move_left")},np,8,ap),Vs("button",{onClick:t[4]||(t[4]=e=>s.jump_time_ahead()),class:"btn btn-sm btn-link me-2",ref:"btn-jump-time-ahead",title:l.i18n("date_time_range_picker.btn_move_right")},sp,8,lp),Vs("button",{onClick:t[5]||(t[5]=e=>s.zoom(2)),class:"btn btn-sm btn-link",ref:"btn-zoom-in",title:l.i18n("date_time_range_picker.btn_zoom_in")},op,8,ip),Vs("button",{onClick:t[6]||(t[6]=e=>s.zoom(.5)),class:"btn btn-sm btn-link",ref:"btn-zoom-out",title:l.i18n("date_time_range_picker.btn_zoom_out")},cp,8,rp),Vs("button",{disabled:null==l.history_last_status,onClick:t[7]||(t[7]=e=>s.apply_status_by_history()),class:"btn btn-sm btn-link",title:l.i18n("date_time_range_picker.btn_undo")},dp,8,up),Vs("button",{disabled:"custom"==l.select_time_value,onClick:t[8]||(t[8]=e=>s.change_select_time()),class:"btn btn-sm btn-link",title:l.i18n("date_time_range_picker.btn_refresh")},_p,8,pp),El(e.$slots,"extra_buttons")])])])])])])},Rd.__scopeId="data-v-bc6f1430",Rd.__file="http_src/vue/data-time-range-picker.vue";var mp=Jn({components:{},props:{id:String},emits:["hidden","showed"],created(){},data:()=>({}),mounted(){let e=this;$(this.$refs.modal_id).on("shown.bs.modal",(function(t){e.$emit("showed")})),$(this.$refs.modal_id).on("hidden.bs.modal",(function(t){e.$emit("hidden")})),ntopng_sync.ready(this.$props.id)},methods:{show:function(){$(this.$refs.modal_id).modal("show")},preventEnter:function(){},close:function(){$(this.$refs.modal_id).modal("hide")}}});const hp={class:"modal-dialog modal-dialog-centered modal-lg",role:"document"},vp={class:"modal-content"},gp={class:"modal-header"},bp={class:"modal-title"},yp=Vs("div",{class:"modal-close"},[Vs("button",{type:"button",class:"btn-close","data-bs-dismiss":"modal","aria-label":"Close"})],-1),wp={class:"modal-body"},xp={class:"modal-footer"},kp=Vs("div",{class:"mr-auto"},null,-1),$p=Vs("div",{class:"alert alert-info test-feedback w-100",style:{display:"none"}},null,-1);mp.render=function(e,t,a,n,l,s){return Es(),Os("div",{onSubmit:t[0]||(t[0]=Go(((...t)=>e.preventEnter&&e.preventEnter(...t)),["prevent"])),class:"modal fade",ref:"modal_id",tabindex:"-1",role:"dialog","aria-labelledby":"dt-add-filter-modal-title","aria-hidden":"true"},[Vs("div",hp,[Vs("div",vp,[Vs("div",gp,[Vs("h5",bp,[El(e.$slots,"title")]),yp]),Vs("div",wp,[El(e.$slots,"body")]),Vs("div",xp,[kp,El(e.$slots,"footer"),$p])])])],544)},mp.__file="http_src/vue/modal.vue";const Sp=e=>(_n("data-v-089b0491"),e=e(),fn(),e),Cp=Sp((()=>Vs("a",{target:"_newtab",href:"#",style:{},class:"nav-item text-muted"},[Vs("i",{class:"fas fa-question-circle",style:{"margin-left":"28rem","padding-top":"0.8rem"}})],-1))),Np={class:"nav nav-tabs"},Ap=["disabled"],Tp={key:0,style:{"min-height":"8.5rem"}},Ep={class:"form-group ms-2 me-2 mt-3 row"},Pp={class:"col-form-label col-sm-4"},Ip={class:"col-sm-6"},Mp=["pattern"],Up={key:1,style:{"min-height":"8.5rem"}},Op={class:"form-group ms-2 me-2 mt-3 row"},jp={class:"col-form-label col-sm-4"},Fp={class:"col-sm-8"},Dp={value:"name"},Lp={value:"date"},Rp={class:"form-group ms-2 me-2 mt-3 row"},zp={class:"col-form-label col-sm-4"},Bp={class:"col-sm-8"},Vp=["value"],qp={class:"form-group ms-2 me-2 mt-3 row"},Hp={class:"custom-control custom-switch"},Gp={class:"custom-control-label ms-1 form-check-label"},Wp=["disabled"],Kp=["disabled"],Jp=["disabled"];var Yp={__name:"modal-snapshot",props:{csrf:String,page:String},emits:["added_snapshot","deleted_snapshot","deleted_all_snapshots"],setup(e,{expose:t,emit:a}){const n=e,l=fa(null),s=fa("add"),i=fa(""),o=fa(!1),r=fa(""),c=fa(!0),u=fa(""),d=fa(""),p=fa([]),_=fa("date");let f=NtopUtils.REGEXES.singleword;const m=yi((()=>!new RegExp(f).test(d.value))),h=yi((()=>""==i.value));function v(){if(null!=n.page)return n.page;let e="alerts";return null!=window.location.toString().match(/alert_stats.lua/)||(e="flows"),e}let g=null;function b(){g!=_.value&&(p.value.sort(((e,t)=>"name"==_.value?e.name.localeCompare(t.name):e.utc-t.utc)),p.value.length>0&&(i.value=p.value[0]),g=_.value)}let y=!0;const w=async()=>{let e;if(c.value)e=ntopng_url_manager.get_url_params();else{let t=ntopng_url_manager.get_url_object();delete t.epoch_begin,delete t.epoch_end,e=ntopng_url_manager.obj_to_url_params(t)}let t=v(),l={snapshot_name:d.value,filters:e,page:t};l.csrf=n.csrf;let s=`${http_prefix}/lua/pro/rest/v2/add/filters/snapshot.lua`;try{let e={"Content-Type":"application/json"};await ntopng_utility.http_request(s,{method:"post",headers:e,body:JSON.stringify(l)}),y=!0}catch(e){console.error(e)}$(),a("added_snapshots",l)},x=()=>{$();let e=i.value.filters;if(1==o.value){let t=ntopng_status_manager.get_status(),a=ntopng_url_manager.get_url_object(e);a.epoch_begin=t.epoch_begin,a.epoch_end=t.epoch_end,e=ntopng_url_manager.obj_to_url_params(a)}ntopng_url_manager.replace_url_and_reload(e)},k=async e=>{let t=i.value.name;1==e&&(t="*");let l={snapshot_name:t,page:v()};l.csrf=n.csrf;let s=`${http_prefix}/lua/pro/rest/v2/delete/filters/snapshot.lua`;try{let e={"Content-Type":"application/json"};await ntopng_utility.http_request(s,{method:"post",headers:e,body:JSON.stringify(l)}),y=!0}catch(e){console.error(e)}a(1==e?"deleted_all_snapshots":"deleted_snapshot",l),$()},$=()=>{l.value.close()};t({show:()=>{!async function(){s.value="add",d.value="",c.value=!0,o.value=!1;let e=ntopng_status_manager.get_status(),t=S("snapshots.save_time"),a=ntopng_utility.from_utc_to_server_date_format(1e3*e.epoch_begin,"DD/MM/YYYY HH:mm"),n=ntopng_utility.from_utc_to_server_date_format(1e3*e.epoch_end,"DD/MM/YYYY HH:mm");t=t.replace(/\%begin_time/,a),t=t.replace(/\%end_time/,n),u.value=t;let l=S("snapshots.apply_time");if(l=l.replace(/\%begin_time/,a),l=l.replace(/\%end_time/,n),r.value=l,y){y=!1;let e=v(),t=`${http_prefix}/lua/pro/rest/v2/get/filters/snapshots.lua?page=${e}`,a=await ntopng_utility.http_request(t);p.value=ntopng_utility.object_to_array(a)}b(),p.value.length>0&&(i.value=p.value[0])}(),l.value.show()},close:$}),dl((()=>{}));const S=e=>i18n(e);return(e,t)=>(Es(),js(mp,{onShowed:t[8]||(t[8]=e=>{}),ref_key:"modal_id",ref:l},{title:hn((()=>[Ws(ee(S("snapshots.manage"))+" ",1),Cp])),body:hn((()=>[Vs("ul",Np,[Vs("li",{class:"nav-item",onClick:t[0]||(t[0]=e=>s.value="add")},[Vs("a",{class:W(["nav-link",{active:"add"==s.value}]),href:"#"},ee(S("snapshots.add")),3)]),Vs("li",{class:"nav-item",onClick:t[1]||(t[1]=e=>(e=>{0==p.value.length&&"select"==e||(s.value=e)})("select"))},[Vs("a",{disabled:0==p.value.length,class:W(["nav-link",{active:"select"==s.value,"not-allowed":0==p.value.length}]),href:"#"},ee(S("snapshots.manage")),11,Ap)])]),"add"==s.value?(Es(),Os("div",Tp,[Vs("div",Ep,[Vs("label",Pp,[Vs("b",null,ee(S("snapshots.name"))+":",1)]),Vs("div",Ip,[yl(Vs("input",{pattern:ba(f),placeholder:"",required:"",type:"text",class:"form-control","onUpdate:modelValue":t[2]||(t[2]=e=>d.value=e)},null,8,Mp),[[Uo,d.value]])])]),Js(' <div class="form-group ms-2 me-2 mt-3 row"> '),Js(' \t<div class="custom-control custom-switch"> '),Js(' \t  <input type="checkbox" class="custom-control-input whitespace form-check-input" v-model="save_time"> '),Js(' \t  <label class="custom-control-label ms-1 form-check-label">{{save_time_text}}</label> '),Js(" \t</div> "),Js(" </div>       ")])):Js("v-if",!0),Js(" action add "),"select"==s.value?(Es(),Os("div",Up,[Vs("div",Op,[Vs("label",jp,[Vs("b",null,ee(S("snapshots.order_by")),1)]),Vs("div",Fp,[yl(Vs("select",{class:"form-select",onClick:t[3]||(t[3]=e=>b()),"onUpdate:modelValue":t[4]||(t[4]=e=>_.value=e)},[Vs("option",Dp,ee(S("snapshots.name")),1),Vs("option",Lp,ee(S("snapshots.date")),1)],512),[[Do,_.value]])])]),Vs("div",Rp,[Vs("label",zp,[Vs("b",null,ee(S("snapshots.select")),1)]),Vs("div",Bp,[yl(Vs("select",{class:"form-select","onUpdate:modelValue":t[5]||(t[5]=e=>i.value=e)},[(Es(!0),Os($s,null,Al(p.value,(e=>(Es(),Os("option",{value:e},ee(function(e){let t=1e3*e.utc,a=ntopng_utility.from_utc_to_server_date_format(t,"DD/MM/YYYY");return`${e.name} (${a})`}(e)),9,Vp)))),256))],512),[[Do,i.value]])])]),Vs("div",qp,[Vs("div",Hp,[yl(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input","onUpdate:modelValue":t[6]||(t[6]=e=>o.value=e)},null,512),[[Oo,o.value]]),Vs("label",Gp,ee(r.value),1)])])])):Js("v-if",!0),Js(" action select ")])),footer:hn((()=>["add"==s.value?(Es(),Os("button",{key:0,type:"button",onClick:w,disabled:ba(m),class:"btn btn-primary"},ee(S("snapshots.add")),9,Wp)):Js("v-if",!0),"select"==s.value?(Es(),Os("button",{key:1,onClick:t[7]||(t[7]=e=>k(!0)),type:"button",style:{"text-align":"left","margin-left":"0px"},class:"btn btn-danger start-0 position-absolute ms-3"},ee(S("snapshots.delete_all")),1)):Js("v-if",!0),"select"==s.value?(Es(),Os("button",{key:2,type:"button",onClick:k,disabled:ba(h),class:"btn btn-danger"},ee(S("snapshots.delete")),9,Kp)):Js("v-if",!0),"select"==s.value?(Es(),Os("button",{key:3,type:"button",onClick:x,disabled:ba(h),class:"btn btn-primary"},ee(S("snapshots.apply")),9,Jp)):Js("v-if",!0)])),_:1},512))}};fp("\ninput[data-v-089b0491]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-089b0491] {\n  cursor: not-allowed;\n}\n"),Yp.__scopeId="data-v-089b0491",Yp.__file="http_src/vue/modal-snapshot.vue";const Zp=e=>(_n("data-v-185590b6"),e=e(),fn(),e),Xp={class:"form-group ms-2 me-2 mt-3 row"},Qp={class:"col-11"},e_={class:"col-form-label"},t_=[Zp((()=>Vs("button",{type:"button",class:"btn border"},[Vs("span",null,[Vs("i",{class:"fas fa-trash"})])],-1)))],a_={class:"container"},n_={class:"row custom-ms me-2 mt-1"},l_={class:"col-5"},s_=["onUpdate:modelValue"],i_={class:"custom-control-label ms-1 form-check-label"},o_={class:"col-2"},r_=["onUpdate:modelValue"],c_=Zp((()=>Vs("label",{class:"custom-control-label ms-1 form-check-label"},"Past ",-1))),u_={class:"col-2"},d_=["onUpdate:modelValue"],p_=Zp((()=>Vs("label",{class:"custom-control-label ms-1 form-check-label"},"Avg ",-1))),__={class:"col-3"},f_=["onUpdate:modelValue"],m_=Zp((()=>Vs("label",{class:"custom-control-label ms-1 form-check-label"},"95th Perc ",-1)));var h_={__name:"list-timeseries",props:{id:String,timeseries:Array,title:String,show_delete_button:Boolean},emits:["delete_ts","update:timeseries"],setup(e,{emit:t}){const a=e;function n(){t("update:timeseries",a.timeseries)}function l(){t("delete_ts",a.id)}return(t,a)=>(Es(),Os("div",null,[Vs("div",Xp,[Vs("div",Qp,[Vs("label",e_,[Vs("b",null,ee(e.title),1)])]),e.show_delete_button?(Es(),Os("div",{key:0,class:"col-1",onClick:l},t_)):Js("v-if",!0)]),Vs("div",a_,[(Es(!0),Os($s,null,Al(e.timeseries,(e=>(Es(),Os("div",n_,[Vs("div",l_,[yl(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:n,"onUpdate:modelValue":t=>e.raw=t},null,40,s_),[[Oo,e.raw]]),Vs("label",i_,ee(e.label),1)]),Vs("div",o_,[yl(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:n,"onUpdate:modelValue":t=>e.past=t},null,40,r_),[[Oo,e.past]]),c_]),Vs("div",u_,[yl(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:n,"onUpdate:modelValue":t=>e.avg=t},null,40,d_),[[Oo,e.avg]]),p_]),Vs("div",__,[yl(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:n,"onUpdate:modelValue":t=>e.perc_95=t},null,40,f_),[[Oo,e.perc_95]]),m_])])))),256))])]))}};fp("\n.custom-ms[data-v-185590b6] {\n  margin-left: 2rem !important;\n}\n.inline-block[data-v-185590b6] {\n    display: inline-block;\n    margin-right: 1rem;\n}\n.border[data-v-185590b6] {\n    border-style: solid !important;\n}\n"),h_.__scopeId="data-v-185590b6",h_.__file="http_src/vue/list-timeseries.vue";const v_=m.getFormatter(m.types.bytes.id),g_="page-stats-action-link",b_="page-stats-action-jump-historical",y_={table_value:"interface",title:i18n("page_stats.top.top_applications"),view:"top_protocols",default_sorting_columns:1,default:!0,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("application"),name:"application",data:"protocol",handlerId:g_,render:function(e,t,a){let n=this,l={handlerId:g_,onClick:function(){let e=`top:${a.ts_schema}`;n.add_metric_from_metric_schema(e,a.ts_query)}};return F.createLinkCallback({text:e.label,handler:l})}},{columnName:i18n("traffic"),name:"traffic",className:"text-end",data:"traffic",orderable:!0,render:e=>a.bytesToSize(e)},{columnName:i18n("percentage"),name:"traffic_perc",className:"text-center",data:"percentage",orderable:!1,render:e=>{const t=e.toFixed(1);return a.createProgressBar(t)}},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:b_,render_if:function(e){return e.is_history_enabled},render:function(e,t,a){let n=this;const l={handlerId:b_,onClick:function(){n.status;let e=x.serialize_param("l7proto",`${a.protocol.id};eq`),t=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${n.status.epoch_begin}&epoch_end=${n.status.epoch_end}&${e}`,l=n.source_type,s=n.source_array,i="",o=l.source_def_array.map(((e,t)=>{let a=s[t];return"ifid"==e.value?x.serialize_param("ifid",a.value):"host"==e.value?x.serialize_param("ip",`${a.value};eq`):void 0}));i=o.join("&"),t=`${t}&${i}`,window.open(t)}};return F.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:l}])}}]},w_={table_value:"interface",title:i18n("page_stats.top.top_categories"),view:"top_categories",default_sorting_columns:2,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("category"),name:"category",data:"category",handlerId:g_,render:function(e,t,a){let n=this,l={handlerId:g_,onClick:function(){let e=`top:${a.ts_schema}`;n.add_metric_from_metric_schema(e,a.ts_query)}};return F.createLinkCallback({text:e.label,handler:l})}},{columnName:i18n("traffic"),name:"traffic",className:"text-end",data:"traffic",orderable:!0,render:e=>v_(e)},{columnName:i18n("percentage"),name:"traffic_perc",className:"text-center",data:"percentage",render:e=>{const t=e.toFixed(1);return a.createProgressBar(t)}},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:b_,render_if:function(e){return e.is_history_enabled},render:function(e,t,a){let n=this;const l={handlerId:b_,onClick:function(){n.status;let e=x.serialize_param("l7cat",`${a.category.id};eq`),t=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${n.status.epoch_begin}&epoch_end=${n.status.epoch_end}&${e}`,l=n.source_type,s=n.source_array,i="",o=l.source_def_array.map(((e,t)=>{let a=s[t];return"ifid"==e.value?x.serialize_param("ifid",a.value):"host"==e.value?x.serialize_param("ip",`${a.value};eq`):void 0}));i=o.join("&"),t=`${t}&${i}`,window.open(t)}};return F.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:l}])}}]},x_=[y_,w_,{table_value:"interface",title:i18n("page_stats.top.top_senders"),view:"top_senders",default_sorting_columns:1,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("page_stats.top.host_name"),name:"host_name",data:"host",handlerId:g_,render:function(e,t,a){let n=this,l=e.label,s="",i={handlerId:g_,onClick:async function(){n.add_ts_group_from_source_value_dict("host",a.tags,"host:traffic")}};return n.sources_types_enabled.host&&e.is_local&&(l=F.createLinkCallback({text:e.label,handler:i})),e.is_available&&(s=` <a href="/lua/host_details.lua?host=${e.id}" data-bs-toggle="tooltip" title=""><i class="fas fa-laptop"></i></a>`),`${l}${s}`}},{columnName:i18n("page_stats.top.sent"),name:"sent",className:"text-end",data:"traffic",orderable:!0,render:e=>v_(e)},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:b_,render_if:function(e){return e.is_history_enabled},render:function(e,t,a){let n=this;const l=a.host.id,s=a.host.is_local,i={handlerId:b_,onClick:function(){n.status;let e=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${n.status.epoch_begin}&epoch_end=${n.status.epoch_end}`;n.source_type,n.source_array;let t="",l=[];for(let e in a.tags){let t=a.tags[e],n="";"ifid"==e?n=x.serialize_param(e,t):"host"==e&&(n=x.serialize_param("ip",`${t};eq`)),l.push(n)}t=l.join("&"),e=`${e}&${t}`,window.open(e)}},o={handlerId:b_,onClick:function(){const e=x.get_url_entry("ifid"),t=`${http_prefix}/lua/host_details.lua?host=${l}&page=historical&ts_query=ifid:${e},host:${l}&ts_schema=host:details&epoch_begin=${n.status.epoch_begin}&epoch_end=${n.status.epoch_end}`;window.open(t)}},r=[{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:i}];return n.sources_types_enabled.host&&s&&r.push({class:"dropdown-item",href:"#",title:i18n("db_explorer.host_data"),handler:o}),F.createActionButtons(r)}}]},{table_value:"interface",title:i18n("page_stats.top.top_receivers"),view:"top_receivers",default_sorting_columns:1,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("page_stats.top.host_name"),name:"host_name",data:"host",handlerId:g_,render:function(e,t,a){let n=this,l=e.label,s="",i={handlerId:g_,onClick:async function(){n.add_ts_group_from_source_value_dict("host",a.tags,"host:traffic")}};return n.sources_types_enabled.host&&e.is_local&&(l=F.createLinkCallback({text:e.label,handler:i})),e.is_available&&(s=` <a href="/lua/host_details.lua?host=${e.id}" data-bs-toggle="tooltip" title=""><i class="fas fa-laptop"></i></a>`),`${l}${s}`}},{columnName:i18n("page_stats.top.received"),name:"received",className:"text-end",data:"traffic",orderable:!0,render:e=>v_(e)},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:b_,render_if:function(e){return e.is_history_enabled},render:function(e,t,a){let n=this;const l=a.host.id,s=a.host.is_local,i={handlerId:b_,onClick:function(){n.status;let e=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${n.status.epoch_begin}&epoch_end=${n.status.epoch_end}`;n.source_type,n.source_array;let t="",l=[];for(let e in a.tags){let t=a.tags[e],n="";"ifid"==e?n=x.serialize_param(e,t):"host"==e&&(n=x.serialize_param("ip",`${t};eq`)),l.push(n)}t=l.join("&"),e=`${e}&${t}`,window.open(e)}},o={handlerId:b_,onClick:function(){const e=x.get_url_entry("ifid"),t=`${http_prefix}/lua/host_details.lua?host=${l}&page=historical&ts_query=ifid:${e},host:${l}&ts_schema=host:details&epoch_begin=${n.status.epoch_begin}&epoch_end=${n.status.epoch_end}`;window.open(t)}},r=[{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:i}];return n.sources_types_enabled.host&&s&&r.push({class:"dropdown-item",href:"#",title:i18n("db_explorer.host_data"),handler:o}),F.createActionButtons(r)}}]}];let k_=x_.find((e=>"top_protocols"==e.view));null!=k_&&(k_=b.clone(k_),k_.table_value="host");const $_=[k_],S_=m.getFormatter(m.types.bytes.id),C_=m.getFormatter(m.types.bps.id),N_="page-stats-action-link",A_={table_value:"snmp",table_source_def_value_dict:{ifid:!0,device:!0,if_index:!1},title:i18n("page_stats.top.top_interfaces"),view:"top_snmp_ifaces",default_sorting_columns:4,columnDefs:[{type:"file-size",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3}],f_get_label:e=>{let t,a=e.source_type.source_def_array;for(let n=0;n<a.length;n+=1)if("device"==a[n].value){t=e.source_array[n].label;break}return`${i18n("page_stats.top.top_interfaces")} - SNMP ${i18n("page_stats.source_def.device")} ${t}`},default:!0,columns:[{columnName:i18n("interface"),name:"interface",data:"interface",handlerId:N_,render:function(e,t,a){let n=this,l={handlerId:N_,onClick:function(){n.add_ts_group_from_source_value_dict("snmp_interface",a.tags,"snmp_if:traffic")}},s=`${e.label} (${e.id})`;return F.createLinkCallback({text:s,handler:l})}},{columnName:i18n("page_stats.top.sent"),name:"sent",className:"text-end",data:"sent",orderable:!0,render:e=>S_(e)},{columnName:i18n("page_stats.top.received"),name:"received",className:"text-end",data:"rcvd",orderable:!0,render:e=>S_(e)},{columnName:i18n("traffic"),name:"traffic",className:"text-end",data:"total",orderable:!0,render:e=>S_(e)},{columnName:i18n("percentage"),name:"traffic_perc",className:"text-center",data:"percentage",render:e=>{const t=e.toFixed(1);return a.createProgressBar(t)}},{columnName:i18n("page_stats.top.throughput"),name:"throughput",className:"text-end",data:"throughput",orderable:!0,render:e=>C_(e)}]},T_=[A_],E_={hide:"hide",select:"select",input:"input"},P_={ifid:e=>{let t=e.ifname;return null!=e.name&&(t=e.name),{label:t,value:e.ifid}},pool:e=>{let t=e.pool_id;return null!=e.name&&(t=e.name),{label:t,value:e.pool_id}},am_host:e=>({label:`${e.label} ${e.measurement}`,value:`${e.host},metric:${e.measurement_key}`})},I_={interface:x_,host:$_,snmp_interface:T_,snmp_device:T_},M_=[{id:"interface",regex_page_url:"lua/if_stats",label:i18n("page_stats.source_def.interface"),query:"iface",source_def_array:[{main_source_def:!0,label:i18n("page_stats.source_def.interface"),regex_type:null,sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",sources_function:null,value:"ifid",value_url:null,value_map_sources_res:null,disable_tskey:null,f_get_value_url:null,f_set_value_url:null,ui_type:E_.select}]},{id:"host",regex_page_url:"lua/host_details",label:i18n("page_stats.source_def.host"),table_value:"host",query:"host",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:E_.select},{main_source_def:!0,label:i18n("page_stats.source_def.host"),regex_type:"ip",value:"host",ui_type:E_.input}]},{id:"mac",regex_page_url:"lua/mac_details",label:i18n("page_stats.source_def.mac"),query:"mac",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:E_.select},{main_source_def:!0,label:i18n("page_stats.source_def.mac"),regex_type:"macAddress",value:"mac",value_url:"host",ui_type:E_.input}]},{id:"network",regex_page_url:"lua/network_details",label:i18n("page_stats.source_def.network"),query:"subnet",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:E_.select},{main_source_def:!0,label:i18n("page_stats.source_def.network"),regex_type:"text",value:"subnet",ui_type:E_.input}]},{id:"as",regex_page_url:"lua/as_details",label:i18n("page_stats.source_def.as"),query:"asn",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:E_.select},{main_source_def:!0,label:i18n("page_stats.source_def.as"),regex_type:"text",value:"asn",ui_type:E_.input}]},{id:"country",regex_page_url:"lua/country_details",label:i18n("page_stats.source_def.country"),query:"country",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:E_.select},{main_source_def:!0,label:i18n("page_stats.source_def.country"),regex_type:"text",value:"country",ui_type:E_.input}]},{id:"os",regex_page_url:"lua/os_details",label:i18n("page_stats.source_def.os"),query:"os",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:E_.select},{main_source_def:!0,label:i18n("page_stats.source_def.os"),regex_type:"text",value:"os",ui_type:E_.input}]},{id:"vlan",regex_page_url:"lua/vlan_details",label:i18n("page_stats.source_def.vlan"),query:"vlan",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:E_.select},{main_source_def:!0,label:i18n("page_stats.source_def.vlan"),regex_type:"text",value:"vlan",ui_type:E_.input}]},{id:"pool",regex_page_url:"lua/pool_details",label:i18n("page_stats.source_def.pool"),query:"host_pool",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:E_.select},{main_source_def:!0,label:i18n("page_stats.source_def.pool"),sources_url:"lua/rest/v2/get/host/pools.lua",value:"pool",ui_type:E_.select}]},{id:"system",regex_page_url:"lua/system_stats",label:i18n("page_stats.source_def.system"),query:"system",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"System",value:-1}],value:"ifid",ui_type:E_.hide}]},{id:"profile",regex_page_url:"lua/profile_details",label:i18n("page_stats.source_def.profile"),query:"profile",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:E_.select},{main_source_def:!0,label:i18n("page_stats.source_def.profile"),regex_type:"text",value:"profile",ui_type:E_.input}]},{id:"redis",regex_page_url:"lua/monitor/redis_monitor.lua",label:i18n("page_stats.source_def.redis"),query:"redis",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"Redis",value:-1}],value:"ifid",ui_type:E_.hide}]},{id:"influx",regex_page_url:"lua/monitor/influxdb_monitor.lua",label:i18n("page_stats.source_def.influx"),query:"influxdb",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"Influx",value:-1}],value:"ifid",ui_type:E_.hide}]},{id:"active_monitoring",regex_page_url:"lua/monitor/active_monitoring_monitor.lua",label:i18n("page_stats.source_def.active_monitoring"),query:"am",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"",value:-1}],value:"ifid",ui_type:E_.hide},{main_source_def:!0,label:i18n("page_stats.source_def.active_monitoring"),sources_url:"lua/rest/v2/get/am_host/list.lua",value:"host",disable_tskey:!0,value_map_sources_res:"am_host",ui_type:E_.select}]},{id:"snmp_interface",id_group:"snmp",regex_page_url:"lua/pro/enterprise/snmp_interface_details",label:i18n("page_stats.source_def.snmp_interface"),query:"snmp_interface",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"",value:-1}],value:"ifid",ui_type:E_.hide},{label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"host",ui_type:E_.input},{main_source_def:!0,label:i18n("page_stats.source_def.snmp_interface"),regex_type:"text",value:"if_index",value_url:"snmp_port_idx",ui_type:E_.input}]},{id:"snmp_device",id_group:"snmp",regex_page_url:"lua/pro/enterprise/snmp_device_details",label:i18n("page_stats.source_def.snmp_device"),query:"snmp_device",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"",value:-1}],value:"ifid",ui_type:E_.hide},{main_source_def:!0,label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"host",ui_type:E_.input}]},{id:"flow_device",regex_page_url:"lua/pro/enterprise/flowdevices_stats",label:i18n("page_stats.source_def.flow_device"),query:"flowdev",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:E_.select},{main_source_def:!0,label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:E_.input}]},{id:"flow_interface",regex_page_url:"lua/pro/enterprise/flowdevice_interface_details",label:i18n("page_stats.source_def.flow_interface"),query:"flowdev_port",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:E_.select},{label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:E_.input},{main_source_def:!0,label:i18n("page_stats.source_def.port"),regex_type:"port",value:"port",value_url:"snmp_port_idx",ui_type:E_.input}]},{id:"sflow_device",regex_page_url:"lua/pro/enterprise/sflowdevices_stats",label:i18n("page_stats.source_def.sflow_device"),query:"sflowdev",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:E_.select},{main_source_def:!0,label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:E_.input}]},{id:"sflow_interface",regex_page_url:"lua/pro/enterprise/sflowdevice_interface_details",label:i18n("page_stats.source_def.sflow_interface"),query:"sflowdev_port",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:E_.select},{label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:E_.input},{main_source_def:!0,label:i18n("page_stats.source_def.port"),regex_type:"port",value:"port",value_url:"snmp_port_idx",ui_type:E_.input}]},{id:"observation_point",regex_page_url:"lua/pro/enterprise/observation_points",label:i18n("page_stats.source_def.observation_point"),query:"obs_point",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:E_.select},{main_source_def:!0,label:i18n("page_stats.source_def.observation_point"),regex_type:"text",value:"obs_point",value_url:"observation_point",ui_type:E_.input}]},{id:"pod",regex_page_url:"lua/pod_details",label:i18n("page_stats.source_def.pod"),query:"pod",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:E_.select},{main_source_def:!0,label:i18n("page_stats.source_def.pod"),regex_type:"text",value:"pod",ui_type:E_.input}]},{id:"container",regex_page_url:"lua/container_details",label:i18n("page_stats.source_def.container"),query:"container",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:E_.select},{main_source_def:!0,label:i18n("page_stats.source_def.container"),regex_type:"text",value:"container",ui_type:E_.input}]}],U_={ui_types:E_,sources_url_el_to_source:P_,sources_types:M_,sources_types_tables:I_},O_=e=>{let t=[];e.forEach((e=>{let a=function(e){let t=[];e.timeseries.forEach((e=>{t.push(`${e.id}=${e.raw}:${e.past}:${e.avg}:${e.perc_95}`)}));let a=e.metric.schema;null!=e.metric.query&&(a=`${a}+${e.metric.query}`);let n=t.join("|"),l=e.source_array.map((e=>e.value)).join("+"),s=`${e.source_type.id};${l};${a};${n}`;return s}(e);t.push(a)}));let a=t.join(";;");x.set_key_to_url("timeseries_groups",a)};const j_=(e,t,a)=>{let n=L_(e,t,a),l=[];for(let e in a.timeseries){let t=a.timeseries[e];l.push({id:e,label:t.label,raw:!0,past:!1,avg:!1,perc_95:!1})}return{id:n,source_type:e,source_array:t,metric:a,timeseries:l}},F_=async(e,t,a)=>{let n=Q_(),l=await V_(e,n),s=await X_(e,n,l),i=af(s,t,a);return[j_(n,l,i)]};async function D_(e){let t=e.split(";"),a=t[0],n=t[1].split("+"),l=t[2].split("+");l.length<2&&l.push(null);let s=t[3],i=B_(a),o=await H_(http_prefix,i,n),r=await ef(http_prefix,i,o,l[0],l[1]),c=function(e,t){let a=e.split("|"),n=/(.+)=(.+):(.+):(.+):(.+)/,l=[];return a.forEach((e=>{let a=n.exec(e),s=a[1],i=t.timeseries[s].label,o=JSON.parse(a[2]),r=JSON.parse(a[3]),c=JSON.parse(a[4]),u=JSON.parse(a[5]);l.push({id:s,label:i,raw:o,past:r,avg:c,perc_95:u})})),l}(s,r);return{id:L_(i,o,r),source_type:i,source_array:o,metric:r,timeseries:c}}const L_=(e,t,a,n,l)=>{let s="";null!=a&&(s=a.schema,null!=a.query&&(s=`${s} - ${a.query}`));let i=e.source_def_array,o=t.map(((e,t)=>{let a=i[t].value;return null==n||n[a]?e.value:null})).filter((e=>null!=e)).join("_"),r=e.id;return l&&null!=e.id_group&&(r=e.id_group),`${r} - ${o} - ${s}`};const R_=U_.sources_url_el_to_source,z_=U_.sources_types,B_=e=>z_.find((t=>t.id==e)),V_=async(e,t)=>{let a=J_(t);return await H_(e,t,a)};async function q_(e,t,a){let n=t.source_def_array.map((e=>a[e.value]));return await H_(e,t,n)}const H_=async(e,t,a)=>{null==t&&(t=Q_());let n,l=[];for(let s=0;s<a.length;s+=1){let i=a[s],o=t.source_def_array[s];if(o.sources_url||o.sources_function){let a=[];a=o.sources_url?await W_(e,t.id,o):o.sources_function(),n=a.find((e=>e.value==i)),null==n&&(n=a[0])}else n={label:i,value:i};l.push(n)}return l};let G_={};const W_=async(e,t,n)=>{let l=`${t}_${n.value}`;if(null==G_[l])if(n.sources_url){let t=`${e}/${n.sources_url}`;G_[l]=b.http_request(t)}else{if(!n.sources_function)return[];G_[l]=n.sources_function()}let s=await G_[l];if(n.sources_url){let e=R_[n.value_map_sources_res];if(null==e&&(e=R_[n.value]),null==e)throw`:Error: metrics-manager.js, missing sources_url_to_source ${n.value} key`;s=s.map((t=>e(t)))}return s.sort(a.sortAlphabetically)};function K_(e,t){e.source_def_array.forEach((e=>{let a=t[e.value];null!=a&&(null!=e.f_set_value_url?e.f_set_value_url():null!=e.value_url?x.set_key_to_url(e.value_url,a):x.set_key_to_url(e.value,a))}))}const J_=e=>(null==e&&(e=Q_()),e.source_def_array.map((e=>{if(null!=e.f_get_value_url)return e.f_get_value_url();let t=e.value_url;return null==t&&(t=e.value),x.get_url_entry(t)})));let Y_={},Z_=null;const X_=async(e,t,a)=>{let n=`${x.get_url_entry("epoch_begin")}_${x.get_url_entry("epoch_end")}`;null==t&&(t=Q_()),null==a&&(a=await V_(e,t));let l=function(e,t,a){let n=t.source_def_array.map(((e,t)=>`${e.value}=${a[t].value}`)).join("&");return`${e}/lua/rest/v2/get/timeseries/type/consts.lua?query=${t.query}&${n}`}(e,t,a),s=function(e,t){let a=t.map((e=>e.value)).join("_");return`${e.id}_${a}`}(t,a);n!=Z_&&(Y_[s]=null,Z_=n),null==Y_[s]&&(Y_[s]=b.http_request(l));let i=await Y_[s];return null==i?[{}]:(0==i.some((e=>1==e.default_visible))&&(i[0].default_visible=!0),b.clone(i))},Q_=()=>{let e=window.location.pathname;for(let t=0;t<z_.length;t+=1){if(1==new RegExp(z_[t].regex_page_url).test(e))return z_[t]}throw`source_type not found for ${e}`},ef=async(e,t,a,n,l)=>(await X_(e,t,a)).find((e=>e.schema==n&&e.query==l)),tf=(e,t)=>{null==t&&(t=Q_());let a={};t.source_def_array.forEach((e=>a[e.value]=!0));let n=e.split(",");for(let e=0;e<n.length;e+=1){let t=n[e].split(":")[0];if(null==a[t])return n[e]}return null},af=(e,t,a)=>{let n;return null!=t&&(n=e.find((e=>e.schema==t&&(null==a||e.query==a)))),null==n&&(n=e.find((e=>1==e.default_visible))),null!=n?n:e[0]},nf={set_timeseries_groups_in_url:O_,get_timeseries_groups_from_url:async(e,t)=>{if(null==t&&(t=x.get_url_entry("timeseries_groups")),null==t||""==t)return null;let a=t.split(";;");return!a?.length>0?null:Promise.all(a.map((async e=>await D_(e))))},get_default_timeseries_groups:F_,get_ts_group:j_,get_ts_group_id:L_,sources_types:z_,sources_types_tables:U_.sources_types_tables,get_source_type_from_id:B_,get_current_page_source_type:Q_,get_sources:W_,get_default_source_array:V_,get_source_array_from_value_dict:q_,get_source_array_from_value_array:H_,get_default_source_value_array:J_,get_metrics:X_,get_metric_from_schema:ef,get_metric_query_from_ts_query:tf,get_default_metric:af,set_source_value_object_in_url:K_,ui_types:U_.ui_types};function lf(e,t){let a=e.start,n=1e3*e.step;e.series.forEach((e=>{e.name=e.label,delete e.type;let t=1e3*a;e.data=e.data.map((e=>{let a={x:t,y:e};return t+=n,a}))})),e.xaxis={labels:{show:!0},axisTicks:{show:!0}},e.yaxis={labels:{formatter:m.getFormatter(t.measure_unit)},axisBorder:{show:!0},title:{text:t.measure_unit}}}function sf(e){return`${e.label}`}function of(e,t){return"number"==e?t:e}function rf(e,t,a,n){null==e&&(e=t);let l="";if(null!=e&&(l=`${e} `),0==n)return e;let s=bf(a);return`${`${a.source_array[s].label}`} ${l}(${of(a.metric.measure_unit,a.metric.scale)})`}function cf(e){return`${e.measure_unit}_${e.scale}`}const uf=["#C6D9FD","#90EE90","#EE8434","#C95D63","#AE8799","#717EC3","#496DDB","#5A7ADE","#6986E1","#7791E4","#839BE6","#8EA4E8"];function df(e,t,a){if(1==a)return void function(e,t){let a={min:0,max:Number.MIN_SAFE_INTEGER,invert_direction:!1},n=[];t.forEach((e=>{e.data.forEach(((e,t)=>{n.length<=t&&n.push(0),n[t]+=e.y}))})),n.forEach((e=>{a.max=Math.max(a.max,e),a.min=Math.min(a.min,e)})),e.forEach((e=>{e.min=a.min,e.max=a.max}))}(e,t);let n={},l={};for(let a=0;a<t.length;a+=1){let s=t[a],i=e[a],o=i.seriesName;null==n[o]&&(n[o]=[],l[o]={min:0,max:Number.MIN_SAFE_INTEGER,invert_direction:!1}),n[o].push(i);let r=l[o];s.data.forEach((e=>{r.max=Math.max(r.max,e.y),r.min=Math.min(r.min,e.y)})),r.invert_direction|=s.invert_direction}let s=(e,t)=>{if(0==e||null==e||e==Number.MAX_SAFE_INTEGER||e==Number.MIN_SAFE_INTEGER)return 0;let a=e/100*3;return t&&e>0||!t&&e<0?e+a:e-a};for(let e in n){let t=n[e],a=l[e];a.min=s(a.min,!1),a.max=s(a.max,!0),t.forEach((e=>{let t=Math.abs(a.min),n=Math.abs(a.max);t>n?(e.min=a.min,e.max=t):t<n&&1==a.invert_direction?(e.min=-1*n,e.max=a.max):(e.min=a.min,e.max=a.max)}))}}const pf={"1_chart_x_metric":{value:"1_chart_x_metric",label:i18n("page_stats.layout_1_per_1")},"1_chart_x_yaxis":{value:"1_chart_x_yaxis",label:i18n("page_stats.layout_1_per_y")},"1_chart":{value:"1_chart",label:i18n("page_stats.layout_1_per_all")}};function _f(e){return pf[e]||null}function ff(e,t,a,n){if(a.value==pf["1_chart_x_metric"].value)return mf(e,t,a,n);let l=function(e,t){let a=[],n=[],l=[],s=[];return t.forEach(((t,i)=>{1==t.metric.draw_stacked?(a.push(e[i]),n.push(t)):(l.push(e[i]),s.push(t))})),{stacked:{tsOptionsArray:a,tsGroupsArray:n},not_stacked:{tsOptionsArray:l,tsGroupsArray:s}}}(e,t);return[...mf(l.stacked.tsOptionsArray,l.stacked.tsGroupsArray,pf["1_chart_x_metric"],n),...mf(l.not_stacked.tsOptionsArray,l.not_stacked.tsGroupsArray,a,n)]}function mf(e,t,a,n){if(a.value==pf["1_chart"].value){let a=[vf(e,t,n)];return hf(a),a}if(a.value==pf["1_chart_x_yaxis"].value){let a={};t.forEach(((t,n)=>{let l=cf(t.metric),s={tsGroup:t,tsOptions:e[n]};null==a[l]?a[l]=[s]:a[l].push(s)}));let l=[];for(let e in a){let t=a[e],s=t.map((e=>e.tsOptions)),i=t.map((e=>e.tsGroup)),o=vf(s,i,n);l.push(o)}return hf(l),l}if(a.value==pf["1_chart_x_metric"].value){let a=[];return e.forEach(((e,l)=>{let s=vf([e],[t[l]],n);a.push(s)})),hf(a),a}return[]}function hf(e){let t=1==e.length;e.forEach((e=>{t||e.yaxis.filter((e=>e.show)).forEach((e=>{e.labels.minWidth=60})),e.yaxis.length<2||(e.yaxis.forEach((e=>{e.labels.offsetX=-20})),e.grid.padding.left=-7)}))}function vf(e,t,a){if(e.length!=t.length)return void console.error(`Error in timeseries-utils:tsArrayToApexOptions: tsOptionsArray ${e} different length from tsGrpupsArray ${t}`);let n=[],l=[],s={},i={};!function(e){e[0]?.source?.name}(t);let o=null,r=!1;e.forEach(((e,c)=>{let u=t[c];c>0&&(o="line"),r|=u.metric.draw_stacked;let d=function(e,t,a,n,l){let s=1e3*e.start,i=1e3*e.step,o=[],r=Object.keys(t.metric.timeseries);return"top"!=t.metric.type&&e.series?.length!=r.length&&(e.series=r.map(((t,a)=>{let n=e.series.find((e=>sf(e)==t));return null!=n?n:{label:t,data:[null]}}))),e.series.forEach(((r,c)=>{let u=sf(r),d=t.metric.timeseries[u];if(null==d)throw`Impossible find timeserie_id = ${u} in metric metadata (id,schema,query) = (${metric.id},${metric.schema},${metric.id})`;let p=1;1==d.invert_direction&&(p=-1);let _=e=>{let t=s,a=e.map((e=>{let a={x:t,y:e*p};return null==e&&(a.y=null),t+=i,a}));return a},f=t.timeseries?.find((e=>e.id==u)),m=d.label;null!=r.ext_label&&"top"==t.metric.type&&(m=r.ext_label);let h=rf(m,u,t,a);if(null==f||1==f.raw){let e=_(r.data),t=d.draw_type;null==t&&null!=n?t=n:null==t&&(t="area");let a={id:u,colorPalette:0,color:d.color,type:t,name:h,data:e,invert_direction:d.invert_direction};o.push(a)}if(1==f?.past&&b.is_object(e.additional_series)){let t=b.object_to_array(e.additional_series)[0],a={id:u,colorPalette:1,type:"line",name:`${h} ${l} Ago`,data:_(t),dashed:!0,invert_direction:d.invert_direction};o.push(a)}let v=(e,t,a)=>{if(null==a)return null;null!=a&&(a*=p);let n=s;return{id:t,name:`${h} (${e})`,colorPalette:1,type:"line",data:r.data.map((e=>{let t={x:n,y:a};return n+=i,t})),invert_direction:d.invert_direction}};if(1==f?.avg){let t=e.statistics?.by_serie[c].average,a=v("Avg",u,t);o.push(a)}if(1==f?.perc_95){let t=e.statistics?.by_serie[c]["95th_percentile"],a=v("95th Perc",u,t);o.push(a)}})),o}(e,u,!0,o,a);n=n.concat(d);let p=function(e,t,a,n){let l=t.metric,s=cf(l),i=!1,o=Object.keys(a).length,r=[];for(let e in t.metric.timeseries)i|=t.metric.timeseries[e].invert_direction;return e.forEach((e=>{let i=a[s],c=0,u=null;if(null!=e.data){let t=e.data.map((e=>null==e.y?0:Math.abs(e.y)));c=Math.max.apply(Math,t),u=m.getScaleFactorIndex(l.measure_unit,c)}if(null==i){n[s]=u;let l={seriesName:e.name,show:!0,labels:{},axisTicks:{show:!0},axisBorder:{show:!0},title:{text:of(t.metric.measure_unit,t.metric.scale)},opposite:o%2==1};a[s]=l.seriesName,r.push(l)}else r.push({seriesName:i,labels:{},show:!1});n[s]=Math.max(n[s],u)})),r.forEach((e=>e.labels.formatter=m.getFormatter(l.measure_unit,i,n[s]))),r}(d,u,s,i);l=l.concat(p)})),function(e){let t=0,a=0,n=uf,l=d3v7.schemeCategory10;e.forEach((e=>{0==e.colorPalette?(e.color=n[t%n.length],t+=1):1==e.colorPalette&&(e.color=l[a%l.length],a+=1)}))}(n),df(l,n,r);let c=function(e,t,a){return{chart:{id:b.get_random_string(),stacked:a,group:"timeseries"},grid:{padding:{},row:{}},fill:{opacity:.9,type:"solid",pattern:{strokeWidth:10}},markers:{size:2.5,strokeWidth:1,strokeColors:e.map((e=>e.color))},stroke:{show:!0,lineCap:"butt",width:3,dashArray:e.map((e=>e.dashed?4:0))},legend:{show:!0,showForSingleSeries:!0,position:"top",horizontalAlign:"right",onItemClick:{toggleDataSeries:!1}},series:e,yaxis:t,xaxis:{labels:{show:!0},axisTicks:{show:!0}}}}(n,l,r);return c}function gf(e,t,a){let n=e.source_type.source_def_array.map(((t,n)=>{if(null!=a&&!a[t.value])return null;let l=e.source_array[n].value;return`${t.value}:${l}`})).filter((e=>null!=e)).join(",");return t||null==e.metric.query||(n=`${n},${e.metric.query}`),n}function bf(e){let t=e.source_type.source_def_array;for(let e=0;e<t.length;e+=1){if(1==t[e].main_source_def)return e}return 0}async function yf(e,t,a,n,l){let s,i={epoch_begin:t.epoch_begin,epoch_end:t.epoch_end};if(l){let t={zoom:a,initial_point:!0,limit:180,version:4,ts_compare:a},l=`${e}/lua/pro/rest/v2/get/timeseries/ts_multi.lua`,o={ts_requests:n.map((e=>{let t=bf(e),a={ts_query:gf(e),ts_schema:`${e.metric.schema}`};return e.source_type.source_def_array[t].disable_tskey||(a.tskey=e.source_array[t].value),a})),...i,...t},r={"Content-Type":"application/json"};s=await b.http_request(l,{method:"post",headers:r,body:JSON.stringify(o)})}else{let t=`${e}/lua/rest/v2/get/timeseries/ts.lua`,l=`ts_compare=${a}&version=4&zoom=${a}&initial_point=true&limit=180`,o=n[0],r=bf(o),c=gf(o),u={...i,ts_query:c,ts_schema:`${o.metric.schema}`};o.source_type.source_def_array[r].disable_tskey||(u.tskey=o.source_array[r].value);let d=`${t}?${x.add_obj_to_url(u,l)}`;s=[await b.http_request(d)]}return s}const wf={groupsOptionsModesEnum:pf,tsToApexOptions:lf,tsArrayToApexOptions:vf,tsArrayToApexOptionsArray:ff,getGroupOptionMode:_f,getSerieId:sf,getSerieName:rf,getTsChartsOptions:yf,getTsQuery:gf,getMainSourceDefIndex:bf},xf=a;function kf(e){if("text"==e)return".*";if("vlan"==e){return String.raw`@(([1-9])|([1-9][0-9]{1,2})|([1-3][0-9]{3})|(40[0-8][0-9])|(409[0-5]))`}if("ip"==e||"cidr"==e){let t=kf("vlan"),a=xf.REGEXES.ipv4,n=a.replace("$",`${t}$`),l=xf.REGEXES.ipv6,s=l.replaceAll("$",`${t}$`);if("cidr"==e){let e=String.raw`(\/(([1-9])|([1-2][0-9])|(3[0-2])))`,n=a.replace("$",`${e}$`),s=a.replace("$",`${e}${t}$`),i=String.raw`(\/(([1-9])|([1-9][0-9])|(1[0-1][0-9])|(12[0-8])))`;return`(${n}|${s}|${l.replaceAll("$",`${i}$`)}|${l.replaceAll("$",`${i}${t}$`)})`}return`(${a})|(${n})|(${l})|(${s})`}if("mac"==e)return xf.REGEXES.macAddress;if("ip,cidr"==e){return`(${kf("ip")})|(${kf("cidr")})`}return xf.REGEXES[e]}const $f={get_data_pattern:kf},Sf={class:"nav nav-tabs"},Cf={class:"form-group ms-2 me-2 mt-3 row"},Nf={class:"form-group row"},Af={class:"col-form-label col-sm-4"},Tf={class:"col-sm-8"},Ef={key:0,class:"form-group ms-2 me-2 mb-2 mt-3 row"},Pf={class:"form-group row"},If={class:"col-form-label col-sm-4"},Mf={class:"col-sm-8"},Uf=["title"],Of={key:0,class:"form-group mt-2 row"},jf={class:"col-form-label col-sm-4"},Ff={class:"col-sm-8"},Df={key:1,class:"form-group mt-2 row"},Lf={class:"col-form-label col-sm-4"},Rf={class:"col-sm-8"},zf=["onUpdate:modelValue","pattern"],Bf={class:"form-group row mt-2",style:{"text-align":"end"}},Vf={class:"col-sm-12"},qf=["disabled"],Hf={class:"form-group ms-2 me-2 mt-3 row"},Gf={class:"form-group row"},Wf={class:"col-form-label col-sm-4"},Kf={class:"col-sm-8"};var Jf={__name:"modal-timeseries",props:{sources_types_enabled:Object},emits:["apply"],setup(e,{expose:t,emit:a}){const n=e,l=fa(null),s=fa(null),i=fa("select");let o=nf.get_current_page_source_type();const r=nf.sources_types,c=fa(o),u=nf.ui_types,d=fa([]),p=fa([]),_=fa([]),f=fa(""),m=fa([]),h=fa(!1),v=yi((()=>{if(0==h.value)return!1;for(let e=0;e<m.value.length;e+=1){let t=m.value[e];if(null==t)continue;let a=new RegExp(t),n=_.value[e];if(0==a.test(n))return!1}return!0})),g=fa(!1),y=fa([]),w=fa({}),x=fa([]),k=fa([]);let $=null;ul((()=>{r.forEach((e=>{n.sources_types_enabled[e.id]}))})),dl((async()=>{$=async function(){await C(),P()}()}));function S(e){i.value=e}async function C(){h.value=!1,function(){let e=c.value?.source_def_array.map((e=>e.regex_type));null==e&&(e=[]);m.value=e.map((e=>null==e?null:$f.get_data_pattern(e)))}(),function(){let e=c.value;g.value=e.source_def_array.map((e=>e.ui_type==u.hide)).every((e=>1==e))}(),await async function(){let e=c.value.source_def_array,t=[];for(let a=0;a<e.length;a+=1){let n=await nf.get_sources(http_prefix,c.value.id,e[a]);t.push(n)}let a=await nf.get_default_source_array(http_prefix,c.value);p.value=a,d.value=t,_.value=a.map((e=>e.value)),T()}(),await E()}async function N(){h.value=!1,_.value.forEach(((e,t)=>{if(c.value.source_def_array[t].ui_type==u.input){let a=p.value[t];a.value=e,a.label=e}})),await async function(){await E()}(),T()}function A(){h.value=!0}function T(){f.value=`${p.value.filter((e=>null!=e.label&&""!=e.label)).map((e=>e.label)).join(" - ")}`}async function E(){y.value=await nf.get_metrics(http_prefix,c.value,p.value),y.value.sort(NtopUtils.sortAlphabetically),w.value=nf.get_default_metric(y.value),P()}function P(e){k.value=[];let t=w.value.timeseries;for(let e in t)k.value.push({id:e,label:t[e].label,raw:!0,past:!1,avg:!1,perc_95:!1})}function I(e){let t=e.source_type.label,a=wf.getMainSourceDefIndex(e);return`${t} - ${e.source_array[a].label} - ${e.metric.label}`}function M(e){let t,a,n;return null==e?(t=c.value,a=p.value,n=w.value):(t=e.source_type,a=e.source_array,n=e.metric),nf.get_ts_group_id(t,a,n)}const U=e=>{x.value=x.value.filter((t=>M(t)!=e))},O=(e,t)=>{let n=x.value.findIndex((t=>t.id==e.id));n<0?x.value.push(e):x.value[n]=e,t&&a("apply",x.value)},j=()=>{if("add"==i.value){let e={id:M(),source_type:c.value,source_array:b.clone(p.value),metric:w.value,timeseries:b.clone(k.value)};O(e)}a("apply",x.value),F()},F=()=>{l.value.close()},D=e=>i18n(e);return t({show:async e=>{x.value=e,await $,i.value="select",l.value.show()},close:F,add_ts_group:O,set_timeseries_groups:(e,t)=>{x.value=e,t&&a("apply",x.value)}}),(e,t)=>(Es(),js(mp,{onShowed:t[10]||(t[10]=e=>{}),ref_key:"modal_id",ref:l},{title:hn((()=>[Ws(ee(D("modal_timeseries.title")),1)])),body:hn((()=>[Vs("ul",Sf,[Vs("li",{class:"nav-item",onClick:t[0]||(t[0]=e=>S("add"))},[Vs("a",{class:W(["nav-link",{active:"add"==i.value}]),href:"#"},ee(D("modal_timeseries.add_timeseries")),3)]),Vs("li",{class:"nav-item",onClick:t[1]||(t[1]=e=>S("select"))},[Vs("a",{class:W(["nav-link",{active:"select"==i.value}]),href:"#"},ee(D("modal_timeseries.manage_timeseries")),3)])]),Js(" action add "),"add"==i.value?(Es(),Os($s,{key:0},[Js(" Sources Types "),Vs("div",Cf,[Vs("div",Nf,[Vs("label",Af,[Vs("b",null,ee(D("modal_timeseries.source_type")),1)]),Vs("div",Tf,[qs(Ld,{selected_option:c.value,"onUpdate:selected_option":t[2]||(t[2]=e=>c.value=e),onSelect_option:t[3]||(t[3]=e=>C()),options:ba(r)},null,8,["selected_option","options"])])])]),Js(" Sources "),g.value?Js("v-if",!0):(Es(),Os("div",Ef,[Vs("div",Pf,[Vs("label",If,[Vs("b",null,ee(D("modal_timeseries.source")),1)]),Vs("div",Mf,[yl(Vs("input",{class:"form-control","onUpdate:modelValue":t[4]||(t[4]=e=>f.value=e),title:f.value,style:{overflow:"hidden","text-overflow":"ellipsis","white-space":"nowrap"},type:"text",disabled:""},null,8,Uf),[[Uo,f.value]])])]),(Es(!0),Os($s,null,Al(c.value.source_def_array,((e,a)=>(Es(),Os($s,null,[Js(" select "),e.ui_type==ba(u).select?(Es(),Os("div",Of,[Vs("label",jf,[Vs("b",null,ee(e.label)+" "+ee(a),1)]),Vs("div",Ff,[qs(Ld,{selected_option:p.value[a],"onUpdate:selected_option":e=>p.value[a]=e,onSelect_option:t[5]||(t[5]=e=>A()),options:d.value[a]},null,8,["selected_option","onUpdate:selected_option","options"])])])):Js("v-if",!0),Js(" end select "),Js(" input text "),e.ui_type==ba(u).input?(Es(),Os("div",Df,[Vs("label",Lf,[Vs("b",null,ee(e.label),1)]),Vs("div",Rf,[yl(Vs("input",{class:"form-control",onInput:t[6]||(t[6]=e=>A()),"onUpdate:modelValue":e=>_.value[a]=e,pattern:m.value[a],required:"",type:"text",placeholder:""},null,40,zf),[[Uo,_.value[a]]])])])):Js("v-if",!0),Js(" input text ")],64)))),256)),yl(Vs("div",Bf,[Vs("div",Vf,[Vs("button",{type:"button",onClick:N,disabled:0==ba(v),class:"btn btn-primary"},ee(D("modal_timeseries.apply_source")),9,qf)])],512),[[Jo,ba(v)]])])),Js(" end Sources "),Js(" Metrics "),Vs("div",Hf,[Vs("div",Gf,[Vs("label",Wf,[Vs("b",null,ee(D("modal_timeseries.metric")),1)]),Vs("div",Kf,[qs(Ld,{ref_key:"select_search_metrics",ref:s,onSelect_option:t[7]||(t[7]=e=>P()),selected_option:w.value,"onUpdate:selected_option":t[8]||(t[8]=e=>w.value=e),options:y.value},null,8,["selected_option","options"])])])]),qs(h_,{id:"",title:D("modal_timeseries.timeseries_list"),timeseries:k.value,"onUpdate:timeseries":t[9]||(t[9]=e=>k.value=e)},null,8,["title","timeseries"])],64)):Js("v-if",!0),Js(" action == add "),Js(" action select"),"select"==i.value?(Es(),Os($s,{key:1},[(Es(!0),Os($s,null,Al(x.value,(e=>(Es(),js(h_,{id:M(e),title:I(e),timeseries:e.timeseries,"onUpdate:timeseries":t=>e.timeseries=t,show_delete_button:x.value.length>1,onDelete_ts:U},null,8,["id","title","timeseries","onUpdate:timeseries","show_delete_button"])))),256)),Js(" v-for timeseries_groups_added ")],64)):Js("v-if",!0),Js(" action == select ")])),footer:hn((()=>[yl(Vs("button",{type:"button",onClick:j,class:"btn btn-primary"},ee(D("modal_timeseries.add")),513),[[Jo,"add"==i.value]]),yl(Vs("button",{type:"button",onClick:j,class:"btn btn-primary"},ee(D("modal_timeseries.apply")),513),[[Jo,"select"==i.value]])])),_:1},512))}};fp("\ninput[data-v-103cd911]:invalid {\n  border-color: #ff0000;\n}\n.custom-margin[data-v-103cd911] {\nmargin-left: -0.4rem;\n}\n.warn[data-v-103cd911] {\nborder-color: #ffd500;\nborder-style: solid;\n}\n"),Jf.__scopeId="data-v-103cd911",Jf.__file="http_src/vue/modal-timeseries.vue";var Yf=Jn({components:{modal:mp},props:{id:String},updated(){},data(){return{description:"",invalid_bpf:!1,bpf_filter:"",extract_now:!0,show_menu:!0,i18n:e=>i18n(e),id_modal:`${this.$props.id}_modal`}},emits:["apply"],created(){},mounted(){},methods:{pad2_number:function(e){return String(e).padStart(2,"0")},format_date:function(e){let t=e.valueOf();return ntopng_utility.from_utc_to_server_date_format(t)},apply:async function(){if(null!=this.bpf_filter&&""!=this.bpf_filter){let e=`${http_prefix}/lua/pro/rest/v2/check/filter.lua?query=${this.bpf_filter}`,t=await ntopng_utility.http_request(e,null,!1,!0);if(this.invalid_bpf=!t.response,1==this.invalid_bpf)return}let e={ifid:ntopng_url_manager.get_url_entry("ifid"),epoch_begin:ntopng_url_manager.get_url_entry("epoch_begin"),epoch_end:ntopng_url_manager.get_url_entry("epoch_end"),bpf_filter:this.bpf_filter},t=ntopng_url_manager.obj_to_url_params(e);if(1==this.extract_now){let e=`${http_prefix}/lua/rest/v2/get/pcap/live_extraction.lua?${t}`;window.open(e,"_self",!1)}else{let e=`${http_prefix}/lua/traffic_extraction.lua?${t}`,a=(await ntopng_utility.http_request(e,null,!1,!0)).id,n=i18n("traffic_recording.extraction_scheduled"),l=i18n("traffic_recording.traffic_extraction_jobs"),s=`<a href="/lua/if_stats.lua?ifid=${ntopng_url_manager.get_url_entry("ifid")}&page=traffic_recording&tab=jobs&job_id=${a}">${l}</a>`;n=n.replace("%{page}",s),n=`${n} ${a}`,ntopng_events_manager.emit_custom_event(ntopng_custom_events.SHOW_GLOBAL_ALERT_INFO,{text_html:n,type:"alert-success"})}this.$refs.modal.close()},show:async function(e){if(null==e){let t=ntopng_url_manager.get_url_params(),a=`${http_prefix}/lua/pro/rest/v2/get/db/filter/bpf.lua?${t}`,n=await ntopng_utility.http_request(a);if(null==n||null==n.bpf)return void console.error(`modal-traffic-extraction: ${a} return null value`);e=n.bpf}let t=ntopng_status_manager.get_status();if(null==t.epoch_begin||null==t.epoch_end)return void console.error("modal-traffic-extraction: epoch_begin and epoch_end undefined in url");let a=new Date(1e3*t.epoch_begin),n=new Date(1e3*t.epoch_end),l=i18n("traffic_recording.about_to_download_flow");l=l.replace("%{date_begin}",this.format_date(a)),l=l.replace("%{date_end}",this.format_date(n)),this.description=l,this.bpf_filter=e,this.$refs.modal.show()},show_hide_menu:function(){this.show_menu=!this.show_menu}}});const Zf=e=>(_n("data-v-0be978c4"),e=e(),fn(),e),Xf=["innerHTML"],Qf={style:{height:"95%"}},em={class:"tab-content",style:{height:"100%"}},tm={class:"row"},am={class:"form-group mb-3 col-md-3 has-feedback"},nm={class:"form-group mb-3 col-md-9 text-right asd"},lm={class:"radio-inline",style:{"margin-left":"1rem"}},sm={class:"radio-inline"},im={class:"row",id:"pcapDownloadModal_advanced",style:{}},om={class:"form-group mb-3 col-md-12 has-feedback"},rm=Zf((()=>Vs("br",null,null,-1))),cm={class:"form-label"},um=Zf((()=>Vs("a",{class:"ntopng-external-link",href:"https://www.ntop.org/guides/n2disk/filters.html"},[Vs("i",{class:"fas fa-external-link-alt"})],-1))),dm={class:"input-group"},pm=Zf((()=>Vs("span",{class:"input-group-addon"},[Vs("span",{class:"glyphicon glyphicon-filter"})],-1))),_m=Zf((()=>Vs("br",null,null,-1))),fm={class:"form-label"},mm=Zf((()=>Vs("br",null,null,-1))),hm=Zf((()=>Vs("ul",null,[Vs("li",null,[Ws("Host: "),Vs("i",null,"host 192.168.1.2")]),Vs("li",null,[Ws("HTTP: "),Vs("i",null,"tcp and port 80")]),Vs("li",null,[Ws("Traffic between hosts: "),Vs("i",null,"ip host 192.168.1.1 and 192.168.1.2")]),Vs("li",null,[Ws("Traffic from an host to another: "),Vs("i",null,"ip src 192.168.1.1 and dst 192.168.1.2")])],-1)));fp("\ninput ~ .alert[data-v-0be978c4] {\n  display: none;\n}\ninput:invalid ~ .alert[data-v-0be978c4] {\n  display: block;\n}\n"),Yf.render=function(e,t,a,n,l,s){const i=xl("modal");return Es(),js(i,{id:e.id_modal,onApply:e.apply,ref:"modal"},{title:hn((()=>[Ws(ee(e.i18n("traffic_recording.pcap_extract")),1)])),body:hn((()=>[Vs("div",{class:"alert alert-info",innerHTML:e.description},null,8,Xf),Vs("form",Qf,[Vs("div",em,[Vs("div",tm,[Vs("div",am,[Vs("button",{class:"btn btn-sm btn-secondary",type:"button",onClick:t[0]||(t[0]=(...t)=>e.show_hide_menu&&e.show_hide_menu(...t))},[Ws(ee(e.i18n("advanced")),1),Vs("i",{class:W({"fas fa-caret-down":e.show_menu,"fas fa-caret-up":!e.show_menu})},null,2)])]),Vs("div",nm,[Vs("label",lm,[yl(Vs("input",{type:"radio",name:"extract_now","onUpdate:modelValue":t[1]||(t[1]=t=>e.extract_now=t),value:"true",checked:""},null,512),[[Fo,e.extract_now]]),Ws(" "+ee(e.i18n("traffic_recording.extract_now")),1)]),Vs("label",sm,[yl(Vs("input",{type:"radio",name:"extract_now","onUpdate:modelValue":t[2]||(t[2]=t=>e.extract_now=t),value:"false"},null,512),[[Fo,e.extract_now]]),Ws(" "+ee(e.i18n("traffic_recording.queue_as_job")),1)])])]),yl(Vs("div",im,[Vs("div",om,[rm,Vs("label",cm,[Ws(ee(e.i18n("traffic_recording.filter_bpf"))+" ",1),um]),Vs("div",dm,[pm,yl(Vs("input",{name:"bpf_filter","onUpdate:modelValue":t[3]||(t[3]=t=>e.bpf_filter=t),class:"form-control input-sm","data-bpf":"bpf",autocomplete:"off",spellcheck:"false"},null,512),[[Uo,e.bpf_filter]]),yl(Vs("span",{style:{margin:"0px",padding:"0",display:"block"},class:"invalid-feedback"},ee(e.i18n("invalid_value")),513),[[Jo,e.invalid_bpf]])]),_m,Vs("label",fm,ee(e.i18n("traffic_recording.filter_examples"))+":",1),mm,hm])],512),[[Jo,e.show_menu]])])])])),footer:hn((()=>[Vs("button",{type:"button",onClick:t[4]||(t[4]=(...t)=>e.apply&&e.apply(...t)),class:"btn btn-primary"},ee(e.i18n("apply")),1)])),_:1},8,["id","onApply"])},Yf.__scopeId="data-v-0be978c4",Yf.__file="http_src/vue/modal-traffic-extraction.vue";const vm={class:"form-group mt-2 row"},gm={class:"col-form-label col-sm-4"},bm={class:"col-sm-6"},ym={class:"col-form-label col-sm-2"},wm=["disabled"];var xm={__name:"modal-download-file",props:{title:String,ext:String},emits:["download"],setup(e,{expose:t,emit:a}){const n=e,l=fa(null),s=fa(""),i=String.raw`^[^~${"`"}!@#$%^&*|+-=?;:'"\\,.<>\/{}()\[\]\s]+$`,o=yi((()=>new RegExp(i).test(s.value)));function r(){let e=`${s.value}.${n.ext}`;a("download",e),c()}const c=()=>{l.value.close()};t({show:e=>{null==e&&(e=""),e=(e=e.replaceAll(/[-=?;:\s]/g,"_")).replaceAll(/[`~!@#$%^&*|+-=?;:'",\.<>\s\/{}\[\]()]/g,""),s.value=e,l.value.show()},close:c}),dl((()=>{}));const u=e=>i18n(e);return(e,t)=>(Es(),js(mp,{ref_key:"modal_id",ref:l},{title:hn((()=>[Ws(ee(n.title),1)])),body:hn((()=>[Vs("div",vm,[Vs("label",gm,[Vs("b",null,ee(u("modal_download_file.filename"))+":",1)]),Vs("div",bm,[yl(Vs("input",{class:"form-control",required:"",pattern:i,"onUpdate:modelValue":t[0]||(t[0]=e=>s.value=e),type:"text",placeholder:""},null,512),[[Uo,s.value]])]),Vs("label",ym," ."+ee(n.ext),1)])])),footer:hn((()=>[Vs("button",{type:"button",onClick:r,class:"btn btn-primary",disabled:0==ba(o)},ee(u("modal_download_file.download")),9,wm)])),_:1},512))}};fp("\ninput[data-v-59120eb8]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-59120eb8] {\n  cursor: not-allowed;\n}\n"),xm.__scopeId="data-v-59120eb8",xm.__file="http_src/vue/modal-download-file.vue";var km=Jn({components:{},props:{id:String,global:Boolean},emits:[],created(){},data:()=>({show_alert:!1,i18n:e=>i18n(e),body:"",alert_type:"alert-success"}),mounted(){1==this.global&&ntopng_events_manager.on_custom_event(this.$props.id,ntopng_custom_events.SHOW_GLOBAL_ALERT_INFO,(e=>{null!=e.type&&(this.alert_type=e.type),null!=e.timeout&&setTimeout((()=>{this.close()}),1e3*e.timeout),this.show(e.text_html)}))},methods:{close:function(){this.show_alert=!1},show:function(e,t){this.show_alert=!0,this.body=e,null!=t&&(this.alert_type=t)}}});const $m=["innerHTML"];km.render=function(e,t,a,n,l,s){return 1==e.show_alert?(Es(),Os("div",{key:0,style:{width:"100%"},class:W(["alert alert-dismissable",e.alert_type])},[Vs("span",{innerHTML:e.body},null,8,$m),Vs("button",{type:"button",onClick:t[0]||(t[0]=(...t)=>e.close&&e.close(...t)),class:"btn-close","aria-label":"Close"})],2)):Js("v-if",!0)},km.__file="http_src/vue/alert-info.vue";const Sm=function(e,{props:t,children:a,element:n,app:l}={}){let s=n,i=qs(e,t,a);l&&l._context&&(i.appContext=l._context),s?ar(i,s):"undefined"!=typeof document&&ar(i,s=document.createElement("div"));return{vNode:i,destroy:()=>{s&&ar(null,s),s=null,i=null},el:s}},Cm={key:0},Nm={class:"text-center"},Am=Vs("tbody",null,null,-1);var Tm={__name:"datatable",props:{id:String,table_buttons:Array,columns_config:Array,data_url:String,enable_search:Boolean,filter_buttons:{type:Array,required:!1},table_config:{type:Object,required:!1},base_url:String,base_params:Object},emits:["drawed"],setup(e,{expose:t,emit:a}){const n=e,l=li(),s=Si(),i=(e,t)=>{if((t||n.id)&&null!=e.dir){const a=[e.col,e.dir],l=`${t||n.id}_sorting_preferences`;localStorage.setItem(l,a)}},o=e=>{let t=null;if(e||n.id){const a=`${e||n.id}_sorting_preferences`,l=localStorage.getItem(a);if(l){const e=l.split(",");2==e.length&&(t=[Number(e[0]),e[1]])}}return t};let r=n.base_params;const c=fa(null),u=o()||[0,"asc"];let d=null;dl((()=>{!function(){let e=!1,t={serverSide:!1,scrollX:!1,destroy:!0,searching:n.enable_search,order:[u],pagingType:"full_numbers",columns:n.columns_config,autoWidth:!1,responsive:!0,ajax:{method:"get",url:n.data_url,dataSrc:"rsp",data:(e,t)=>{if(0==Object.keys(e).length)return;const a=t.oInstance.api(),n=e.order[0].column,l=a.column(n).name()||void 0;return e.order&&(e.order=e.order[0].dir,e.sort=l),void 0!==e.columns&&delete e.columns,void 0!==e.search&&(e.map_search=e.search.value,delete e.search),e},beforeSend:function(){NtopUtils.showOverlays()}},drawCallback:function(e){NtopUtils.hideOverlays(),a("drawed"),ntopng_events_manager.emit_custom_event(ntopng_custom_events.DATATABLE_LOADED),i(e.aLastSort[0])}};for(const e in n.table_config||{})t[e]=n.table_config[e];let l=DataTableUtils.getStdDatatableConfig(n.table_buttons);l=DataTableUtils.extendConfig(l,t),d=$(c.value).DataTable(l),_();for(const t of n.filter_buttons||[]){const a=x.get_url_entry(t.filterMenuKey);if(a&&""!=a){let n=0;t.filters.forEach((e=>{e.currently_active=!1,n+=1,e.id==a&&(e.currently_active=!0,n-=1)})),n==t.filters.length&&(x.set_key_to_url(t.filterMenuKey,""),e=!0)}new DataTableFiltersMenu({filterTitle:t.filterTitle,tableAPI:d,filters:t.filters,filterMenuKey:t.filterMenuKey,columnIndex:t.columnIndex,url:n.data_url,id:t.id,removeAllEntry:t.removeAllEntry,callbackFunction:t.callbackFunction}).init()}if(e&&n.base_params){const e=x.get_url_entries();for(const[t,a]of e)r[t]=a;d.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,r)),f()}}()}));let p=null;function _(){if(null==p&&(p=function(){if(null==d)return;let e=$(d.context[0].nTableWrapper);return $($(".row .text-end",e).children()[0])}()),null==s||null==s.menu)return;let e=s.menu();if(null==e||0==e.length)return;let t=s.menu()[0],a=$("<div class='d-inline-block'></div>")[0];const{vNode:n,el:i}=Sm(t,{app:l?.appContext?.app,element:a});let o=$(d.context[0].nTableWrapper);$($(".row .text-end",o).children()[0]).append(i)}const f=()=>{null!=d&&d.ajax.reload()},m=e=>{DataTableUtils.deleteButtonHandlers(e)};let h=!1;const v=()=>{d.clear(),d.destroy(!0),h=!0,n.columns_config.filter((e=>null!=e.handlerId)).forEach((e=>{m(e.handlerId)}))};return t({reload:f,delete_button_handlers:m,destroy_table:v,update_url:e=>{null!=d&&d.ajax.url(e)},refresh_menu:()=>{let e=$(d.context[0].nTableWrapper);$($(".row .text-end",e).children()[0]).html(""),_()},is_last_sorting_available:e=>null!=o(e),load_last_sort:o,save_last_sort:i}),fl((()=>{1!=h&&v()})),(t,a)=>(Es(),Os($s,null,[(Es(),Os("div",Cm,[Js(' <slot name="menu"></slot> ')])),Vs("div",null,[Vs("table",{ref_key:"table_id",ref:c,class:"table w-100 table-striped table-hover table-bordered"},[Vs("thead",null,[Vs("tr",null,[(Es(!0),Os($s,null,Al(e.columns_config,(e=>(Es(),Os("th",Nm,ee(e.columnName),1)))),256))])]),Am],512)])],64))},__file:"http_src/vue/datatable.vue"};const Em={class:"table table-hover table-borderless mb-0"},Pm=["innerHTML"],Im=["innerHTML"];var Mm={__name:"bootstrap-table",props:{id:String,columns:Array,rows:Array,print_html_column:Function,print_html_row:Function},setup:e=>(t,a)=>(Es(),Os("table",Em,[Vs("thead",null,[Vs("tr",null,[(Es(!0),Os($s,null,Al(e.columns,(t=>(Es(),Os("th",{scope:"col",innerHTML:e.print_html_column(t)},null,8,Pm)))),256))])]),Vs("tbody",null,[(Es(!0),Os($s,null,Al(e.rows,(t=>(Es(),Os("tr",null,[(Es(!0),Os($s,null,Al(e.columns,(a=>(Es(),Os("td",{scope:"col",innerHTML:e.print_html_row(a,t)},null,8,Im)))),256))])))),256))])])),__file:"http_src/vue/bootstrap-table.vue"};const Um=e=>(_n("data-v-937058e4"),e=e(),fn(),e),Om={class:"col-12 mb-2 mt-2"},jm={class:"card h-100 overflow-hidden"},Fm=["title"],Dm=[Um((()=>Vs("i",{class:"fas fa-lg fa-camera-retro"},null,-1)))],Lm=["title"],Rm=[Um((()=>Vs("i",{class:"fas fa-lg fa-download"},null,-1)))],zm=["title"],Bm=[Um((()=>Vs("i",{class:"fas fa-lg fa-file-image"},null,-1)))],Vm=["title"],qm=[Um((()=>Vs("i",{class:"fas fa-lg fa-table"},null,-1)))],Hm={class:"form-group ms-1 me-1 mt-1"},Gm={class:"inline select2-size me-2 mt-2"},Wm={class:"inline select2-size me-2 mt-2"},Km={key:0,class:"mt-4 card card-shadow"},Jm={class:"card-body"},Ym={key:1,class:"mt-4 card card-shadow"},Zm={class:"card-body"},Xm={key:0,class:"inline select2-size me-2 mt-2"};var Qm={__name:"page-stats",props:{csrf:String,is_ntop_pro:Boolean,source_value_object:Object,sources_types_enabled:Object,sources_types_top_enabled:Object,enable_snapshots:Boolean,is_history_enabled:Boolean,traffic_extraction_permitted:Boolean,is_dark_mode:Boolean},setup(e){const t=e;b.check_and_set_default_interval_time();const n=e=>i18n(e);let l="date_time_picker",s=ntopChartApex.typeChart.TS_LINE;fa({}),fa(!1);const i=fa([]),o=fa(null),r=fa(null),c=fa(null),u=fa(null),d=fa(null),p=fa([]),_=fa({});nf.get_current_page_source_type();const f=fa(!1);fa(!1);const h=fa([]),v=b.object_to_array(wf.groupsOptionsModesEnum),g=fa(function(){let e=x.get_url_entry("timeseries_groups_mode");if(null!=e&&""!=e)return wf.getGroupOptionMode(e);return v[0]}());let w=null;const k={label:i18n("page_stats.custom_metrics"),currently_active:!1},$="timeseries",S=fa(!1);ul((async()=>{!function(){if(null==t.source_value_object)return;let e=nf.get_current_page_source_type();nf.set_source_value_object_in_url(e,t.source_value_object)}()})),dl((async()=>{!async function(){let e,t,a=!0,n=await nf.get_timeseries_groups_from_url(http_prefix);if(null==n){a=!1,e=x.get_url_entry("ts_schema");let l=x.get_url_entry("ts_query");null!=l&&""!=l&&(t=nf.get_metric_query_from_ts_query(l)),""==e&&(e=null),n=await nf.get_default_timeseries_groups(http_prefix,e,t)}p.value=await N(a),_.value=1==a?k:nf.get_default_metric(p.value,e,t);S.value=!0,await q(n,!0,!0)}(),await Promise.all([ntopng_sync.on_ready(l)])}));let C=null;async function N(e,n){if(!n&&C==e)return l.value;let l=await nf.get_metrics(http_prefix);if(e&&l.push(k),(null==L||n)&&(L=await async function(){if(!t.enable_snapshots)return;let e=`${http_prefix}/lua/pro/rest/v2/get/filters/snapshots.lua?page=${$}`,a=await b.http_request(e),n=b.object_to_array(a).map((e=>({...e,is_snapshot:!0,label:`${e.name}`,group:"Snapshots"})));return n}()),t.enable_snapshots){L.forEach((e=>l.push(e)))}return l.sort(a.sortAlphabetically),l}async function A(e){let t=nf.get_current_page_source_type(),a=await nf.get_default_source_array(http_prefix,t);return[nf.get_ts_group(t,a,e)]}const T=async(e,t,a)=>{let n=nf.get_source_type_from_id(e),l=await nf.get_source_array_from_value_dict(http_prefix,n,t),s=await nf.get_metric_from_schema(http_prefix,n,l,a);P(nf.get_ts_group(n,l,s))},E=async(e,t)=>{let a=p.value.find((a=>a.schema==e&&a.query==t));null!=a?P((await A(a))[0]):console.error(`metric = ${e}, query = ${t} not found.`)};function P(e){c.value.set_timeseries_groups(w),c.value.add_ts_group(e,!0)}async function I(e){if(1==e.is_snapshot){let t=e.filters,a=x.get_url_entry("timeseries_groups",t),n=await nf.get_timeseries_groups_from_url(http_prefix,a);g.value=wf.getGroupOptionMode(x.get_url_entry("timeseries_groups_mode",t)),await q(n,!0,!1)}else await async function(){let e=await async function(){return A(_.value)}();await q(e,!0,!1)}(),z(!1)}function M(e){let a=_.value.label==k.label;q(w,!0,!1,e.refresh_data),async function(){if(!t.is_ntop_pro)return;let e=W.value?.table_config_def;if(null==e)return;let a=H(e.ts_group,e.table_def.table_value,e.table_def.view,e.table_source_def_value_dict);r.value.update_url(a),r.value.reload()}(),z(a,!0)}function U(e){}function O(){u.value.show()}function j(){null!=w&&c.value.show(w)}function F(e){return async t=>h.value[e].chart_options}let D,L=null;function R(){z(_.value.label==k.label,!0)}async function z(e,t){p.value=await N(e,t),e&&(_.value=k)}async function B(e){z(!0),await q(e,!0,!0)}function V(){q(w,!1,!1)}async function q(e,a,n,l){let s=y.get_status(),o=function(e){let t=Number.parseInt((e.epoch_end-e.epoch_begin)/60);return t<=5?"5m":t<=30?"30m":t<=60?"1h":t<=1440?"1d":t<=10080?"1w":t<=43200?"1M":"1Y"}(s);a&&(D=await wf.getTsChartsOptions(http_prefix,s,o,e,t.is_ntop_pro)),function(e,t){e.forEach(((e,a)=>{let n=t[a],l=n?.query?.label;if(null!=l){let t=wf.getMainSourceDefIndex(e);e.source_array[t].label=l}}))}(e,D);let r=wf.tsArrayToApexOptionsArray(D,e,g.value,o);l?function(e){e.forEach(((e,t)=>{i.value[t].update_chart_series(e?.series)}))}(r):function(e){h.value=e.map(((e,t)=>({key:b.get_random_string(),chart_options:e})))}(r),function(e,t,a){let n=!0;if(f.value=t.map((e=>!e.source_type.disable_stats)).reduce(((e,t)=>e|t),!1),!f.value)return;const l=e=>"bps"==e?"bytes":e;J.value=[],e.forEach(((e,s)=>{let i=t[s];1!=i.source_type.disable_stats&&e.series.forEach(((t,s)=>{let o,r=wf.getSerieId(t),c=i.metric.timeseries[r],u=m.getFormatter(i.metric.measure_unit);if("top"==i.metric.type?o=e.statistics:e?.statistics?.by_serie?.length>s&&(o=e.statistics.by_serie[s]),null==o||"top"==i.metric.type&&s>0)return;let d=wf.getSerieName(c.label,r,i,n),p=l(i.metric.measure_unit),_=m.getFormatter(p);if(null!=o.total){a.epoch_end,a.epoch_begin;o.average}let f={metric:d,total:_(o.total),perc_95:u(o["95th_percentile"]),avg:u(o.average),max:u(o.max_val),min:u(o.min_val)};J.value.push(f)}))}))}(D,e,s),n&&function(e,a){if(!t.is_ntop_pro)return;null==e&&(e=w);null==a&&(a=y.get_status());let n=nf.sources_types_tables,l={};e.forEach((e=>{e.source_type;let t=nf.get_ts_group_id(e.source_type,e.source_array);l[t]=e}));let s={};G.value=[];for(let e in l){let i=l[e],o=wf.getMainSourceDefIndex(i),r=i.source_array[o],c=i.source_type,u=n[c.id];null!=u&&u.forEach((e=>{let n=t.sources_types_top_enabled[e.table_value];if(null==n)return;if(!n[e.view])return;let l=e.table_source_def_value_dict,o=H(i,e.table_value,e.view,l,a),u=nf.get_ts_group_id(i.source_type,i.source_array,null,l,!0);if(u=`${u}_${e.view}`,null!=s[u])return;s[u]=!0;let d,p=`${e.table_value}_${e.view}_${u}`;d=null==e.f_get_label?`${e.title} - ${c.label} ${r.label}`:e.f_get_label(i);const _={ts_group:i,table_def:e,table_buttons:[],data_url:o,enable_search:!0,table_config:{serverSide:!1,order:[[e.default_sorting_columns,"desc"]],columnDefs:e.columnDefs||[]}};_.columns_config=e.columns.map((e=>{let n={is_history_enabled:t.is_history_enabled},l={visible:!e.render_if||e.render_if(n),...e};return null==l.className&&(l.className="text-nowrap"),null==l.responsivePriority&&(l.responsivePriority=1),l.render=e.render.bind({add_metric_from_metric_schema:E,add_ts_group_from_source_value_dict:T,sources_types_enabled:t.sources_types_enabled,status:a,source_type:c,source_array:i.source_array}),l}));let f={value:p,label:d,table_config_def:_};G.value.push(f)}))}if(null!=W.value&&G.value.find((e=>e.value==W.value.value)))return;W.value=G.value.find((e=>1==e.table_config_def.default)),null==W.value&&(W.value=G.value[0])}(e,s),w=e,x.set_key_to_url("timeseries_groups_mode",g.value.value),nf.set_timeseries_groups_in_url(w)}function H(e,t,a,n,l){null==l&&(l=y.get_status());let s=wf.getTsQuery(e,!0,n),i=`${http_prefix}/lua/pro/rest/v2/get/${t}/top/ts_stats.lua`,o={zoom:"5m",ts_query:s,epoch_begin:`${l.epoch_begin}`,epoch_end:`${l.epoch_end}`,detail_view:`${a}`,new_charts:"true"};return`${i}?${x.add_obj_to_url(o,"")}`}const G=fa([]),W=fa({});let K=[{id:"metric",label:n("page_stats.metric")},{id:"avg",label:n("page_stats.average")},{id:"perc_95",label:n("page_stats.95_perc")},{id:"max",label:n("page_stats.max")},{id:"min",label:n("page_stats.min")},{id:"total",label:n("page_stats.total")}];const J=fa([]);function Y(){let e=y.get_status(),t={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end},a=x.obj_to_url_params(t);const n=`${http_prefix}/lua/pro/db_search.lua?${a}`;x.go_to_url(n)}const Z=fa(null);function X(){Z.value.show()}function Q(){if(!D?.length)return;let e=w[0],t=wf.getSerieName(null,null,e);d.value.show(t)}async function ee(e){let t=i.value.map((async e=>{let t=await e.get_data_uri();return new Promise(((e,a)=>{let n=new Image;n.src=t,n.onload=function(){e(n)}}))})),a=0,n=await Promise.all(t);n.forEach((e=>{a+=e.height}));let l=document.createElement("canvas"),s=l.getContext("2d");l.width=n[0].width,l.height=a,a=0,n.forEach((e=>{s.drawImage(e,0,a,e.width,e.height),a+=e.height})),b.download_URI(l.toDataURL(),e)}return(t,a)=>(Es(),Os($s,null,[Vs("div",Om,[qs(km),Vs("div",jm,[qs(Rd,{style:{"margin-top":"0.5rem"},id:ba(l),enable_refresh:!0,ref_key:"date_time_picker",ref:o,onEpoch_change:M},{begin:hn((()=>[])),extra_buttons:hn((()=>[e.enable_snapshots?(Es(),Os("button",{key:0,class:"btn btn-link btn-sm",onClick:O,title:n("page_stats.manage_snapshots_btn")},Dm,8,Fm)):Js("v-if",!0),e.traffic_extraction_permitted?(Es(),Os("button",{key:1,class:"btn btn-link btn-sm",onClick:X,title:n("traffic_recording.pcap_download")},Rm,8,Lm)):Js("v-if",!0),Vs("button",{class:"btn btn-link btn-sm",onClick:Q,title:n("page_stats.title_modal_download_file")},Bm,8,zm),e.is_history_enabled?(Es(),Os("button",{key:2,class:"btn btn-link btn-sm",onClick:Y,title:n("page_stats.historical_flows")},qm,8,Vm)):Js("v-if",!0)])),_:1},8,["id"]),Js(" select metric "),yl(Vs("div",Hm,[Vs("div",Gm,[qs(Ld,{selected_option:_.value,"onUpdate:selected_option":a[0]||(a[0]=e=>_.value=e),options:p.value,onSelect_option:I},null,8,["selected_option","options"])]),Vs("div",Wm,[qs(Ld,{selected_option:g.value,"onUpdate:selected_option":a[1]||(a[1]=e=>g.value=e),options:ba(v),onSelect_option:V},null,8,["selected_option","options"])]),e.is_ntop_pro?(Es(),Os("button",{key:0,type:"button",onClick:j,class:"btn btn-sm btn-primary inline",style:{"vertical-align":"super"}}," Manage Timeseries ")):Js("v-if",!0)],512),[[Jo,S.value]]),(Es(!0),Os($s,null,Al(h.value,((e,t)=>(Es(),Os("div",{key:e.key,class:"m-3",style:{height:"300px"}},[qs(Ud,{id:ba("chart")+t,ref_for:!0,ref:e=>{i.value[t]=e},chart_type:ba(s),register_on_status_change:!1,get_custom_chart_options:F(t),onZoom:M,onChart_reloaded:U},null,8,["id","chart_type","get_custom_chart_options"])])))),128))]),f.value?(Es(),Os("div",Km,[Vs("div",Jm,[qs(Mm,{id:"page_stats_bootstrap_table",columns:ba(K),rows:J.value,print_html_column:e=>function(e){return e.label}(e),print_html_row:(e,t)=>function(e,t){return t[e.id]}(e,t)},null,8,["columns","rows","print_html_column","print_html_row"])])])):Js("v-if",!0),e.is_ntop_pro?(Es(),Os("div",Ym,[Vs("div",Zm,[W.value?.table_config_def?(Es(),Os("div",Xm,[qs(Ld,{selected_option:W.value,"onUpdate:selected_option":a[2]||(a[2]=e=>W.value=e),options:G.value},null,8,["selected_option","options"])])):Js("v-if",!0),W.value?.table_config_def?(Es(),js(Tm,{key:W.value?.value,ref_key:"top_table_ref",ref:r,table_buttons:W.value.table_config_def.table_button,columns_config:W.value.table_config_def.columns_config,data_url:W.value.table_config_def.data_url,enable_search:W.value.table_config_def.enable_search,table_config:W.value.table_config_def.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])):Js("v-if",!0)])])):Js("v-if",!0)]),e.enable_snapshots?(Es(),js(Yp,{key:0,ref_key:"modal_snapshot",ref:u,csrf:e.csrf,page:$,onAdded_snapshot:R,onDeleted_snapshots:R,onDeleted_all_snapshots:R},null,8,["csrf"])):Js("v-if",!0),e.is_ntop_pro?(Es(),js(Jf,{key:1,ref_key:"modal_timeseries",ref:c,sources_types_enabled:e.sources_types_enabled,onApply:B},null,8,["sources_types_enabled"])):Js("v-if",!0),qs(Yf,{id:"page_stats_modal_traffic_extraction",ref_key:"modal_traffic_extraction",ref:Z},null,512),qs(xm,{ref_key:"modal_download_file",ref:d,title:n("page_stats.title_modal_download_file"),ext:"png",onDownload:ee},null,8,["title"])],64))}};fp("\n.inline[data-v-937058e4] {\n    display: inline-block;\n}\n.select2-size[data-v-937058e4] {\n    min-width: 18rem;\n}\n"),Qm.__scopeId="data-v-937058e4",Qm.__file="http_src/vue/page-stats.vue";var eh=Jn({components:{},props:{id:String,tab_list:Array},emits:["click_item"],created(){},data:()=>({old_tab:null}),mounted(){let e=null;this.$props.tab_list.forEach((function(t){t.active&&(e=t)})),this.old_tab=e||this.$props.tab_list[0],ntopng_sync.ready(this.$props.id)},methods:{change_tab:function(e){(null!=e.id&&this.old_tab.id!=e.id||null!=e.name&&this.old_tab.name!=e.name)&&(this.old_tab=e,this.$emit("click_item",e))}}});const th={class:"card-header mb-2"},ah={class:"nav nav-tabs card-header-tabs",role:"tablist"},nh=["onClick"],lh=["onClick"];eh.render=function(e,t,a,n,l,s){return Es(),Os("div",th,[Vs("ul",ah,[(Es(!0),Os($s,null,Al(e.tab_list,(t=>(Es(),Os($s,null,[t.active?(Es(),Os("li",{key:0,onClick:a=>e.change_tab(t),class:W([{active:t.active},"nav-item nav-link"])},ee(t.title),11,nh)):(Es(),Os("a",{key:1,onClick:a=>e.change_tab(t),href:"#",class:"nav-item nav-link"},ee(t.title),9,lh))],64)))),256))])])},eh.__file="http_src/vue/tab-list.vue";var sh={__name:"modal-delete-confirm",props:{body:String,title:String},emits:["delete"],setup(e,{expose:t,emit:a}){const n=fa(null),l=()=>{a("delete"),s()},s=()=>{n.value.close()};t({show:()=>{n.value.show()},close:s}),dl((()=>{}));const i=e=>i18n(e);return(t,a)=>(Es(),js(mp,{onShowed:a[0]||(a[0]=e=>{}),ref_key:"modal_id",ref:n},{title:hn((()=>[Ws(ee(e.title),1)])),body:hn((()=>[Ws(ee(e.body),1)])),footer:hn((()=>[Vs("button",{type:"button",onClick:l,class:"btn btn-danger"},ee(i("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-confirm.vue"};const ih="change_asset_table_tab_event";var oh={components:{datatable:Tm,"modal-delete-confirm":sh,"tab-list":eh},props:{page_csrf:String,url_params:Object,view:String,table_filters:Array},created(){x.set_key_to_url("asset_family",this.$props.url_params.asset_family),this.asset_table_tab=x.get_url_entry("view")||"centrality",x.set_key_to_url("view",this.service_table_tab),this.tab_list.forEach((e=>{this.asset_table_tab==e.id&&(e.active=!0)})),function(e){const t=[];let a=[];e.get_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,url_params),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,n,l){e.reload_table()}});let n=url_params;n.view="standard";let l={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,n),enable_search:!0},s=[];for(let t of e.$props.table_filters||[])t.callbackFunction=(a,l)=>{n.view=e.asset_table_tab,n[t.filterMenuKey]=l.id,x.set_key_to_url(t.filterMenuKey,l.id),a.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,n)),NtopUtils.showOverlays(),a.ajax.reload(),NtopUtils.hideOverlays()},s.push(t);a=[{columnName:i18n("map_page.client"),name:"client",data:"client",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.server"),name:"server",data:"server",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.asset_family"),name:"family",data:"family",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.last_seen"),name:"last_seen",data:"last_seen",className:"text-center",responsivePriority:2}];let i=ntopng_utility.clone(l);i.table_config={serverSide:!1,order:[[3,"desc"]]},i.columns_config=a,i.table_filters=s,e.config_devices_standard=i,n.view="centrality",l.data_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,n),a=[{columnName:i18n("map_page.host"),name:"host",data:"host",className:"text-nowrap",render:(e,t)=>e.label,responsivePriority:1},{columnName:i18n("map_page.asset_total_edges"),name:"total_edges",data:"total_edges",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.asset_in_edges"),name:"in_edges",data:"in_edges",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.asset_out_edges"),name:"out_edges",data:"out_edges",className:"text-center",responsivePriority:2}];let o=ntopng_utility.clone(l);o.table_config={serverSide:!1,order:[[1,"desc"]]},o.columns_config=a,o.table_filters=s,console.log(i),console.log(o),e.config_devices_centrality=o}(this)},mounted(){C.on_custom_event("page_asset_table",ntopng_custom_events.DATATABLE_LOADED,(()=>{x.get_url_entry("host")&&this.hide_dropdowns()})),C.on_custom_event("change_asset_table_tab",ih,(e=>{let t=this.get_active_table();x.set_key_to_url("view",e),t.destroy_table(),this.asset_table_tab=e})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog()))},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null,title_delete:i18n("map_page.delete_assets"),body_delete:i18n("map_page.delete_assets_message"),title_download:i18n("map_page.download"),body_download:i18n("map_page.download_message"),get_url:null,asset_table_tab:null,tab_list:[{title:i18n("map_page.standard_view"),active:"standard"==view,id:"standard"},{title:i18n("map_page.centrality_view"),active:"centrality"==view,id:"centrality"}]}),methods:{destroy:function(){this.get_active_table().destroy_table()},click_item:function(e){this.tab_list.forEach((e=>e.active=!1)),e.active=!0,C.emit_custom_event(ih,e.id)},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",page:this.url_params.page,csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)}),this.reload_table()}catch(e){this.reload_table()}},hide_dropdowns:function(){$("#network_dropdown").removeClass("d-inline"),$("#vlan_id_dropdown").removeClass("d-inline"),$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},get_active_table:function(){return this.$refs[`table_asset_${this.asset_table_tab}`]},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()}}};const rh={class:"row"},ch={class:"col-md-12 col-lg-12"},uh=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),dh={class:"card"},ph=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),_h={class:"card-body"},fh={id:"table_asset"},mh={class:"card-footer"},hh={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},vh=Vs("i",{class:"fas fa-trash"},null,-1),gh=["href"],bh=[Vs("i",{class:"fas fa-download"},null,-1)];oh.render=function(e,t,a,n,l,s){const i=xl("modal-delete-confirm"),o=xl("tab-list"),r=xl("datatable");return Es(),Os("div",rh,[Vs("div",ch,[uh,Vs("div",dh,[ph,Vs("div",_h,[Vs("div",fh,[qs(i,{ref:"modal_delete_all",title:l.title_delete,body:l.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),qs(o,{ref:"asset_tab_list",id:"asset_tab_list",tab_list:l.tab_list,onClick_item:s.click_item},null,8,["tab_list","onClick_item"]),"standard"==l.asset_table_tab?(Es(),js(r,{key:0,ref:"table_asset_standard",table_buttons:l.config_devices_standard.table_buttons,columns_config:l.config_devices_standard.columns_config,data_url:l.config_devices_standard.data_url,enable_search:l.config_devices_standard.enable_search,filter_buttons:l.config_devices_standard.table_filters},{default:hn((()=>[Ws(' :table_config="config_devices_standard.table_config"> ')])),_:1},8,["table_buttons","columns_config","data_url","enable_search","filter_buttons"])):Js("v-if",!0),"centrality"==l.asset_table_tab?(Es(),js(r,{key:1,ref:"table_asset_centrality",table_buttons:l.config_devices_centrality.table_buttons,columns_config:l.config_devices_centrality.columns_config,data_url:l.config_devices_centrality.data_url,enable_search:l.config_devices_centrality.enable_search,filter_buttons:l.config_devices_centrality.table_filters},{default:hn((()=>[Ws(' :table_config="config_devices_centrality.table_config"> ')])),_:1},8,["table_buttons","columns_config","data_url","enable_search","filter_buttons"])):Js("v-if",!0)])]),Vs("div",mh,[Vs("button",hh,[vh,Ws(" "+ee(l.i18n("map_page.delete_assets")),1)]),Vs("a",{href:l.get_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"asset_map.json",target:"_blank"},bh,8,gh)])])])])},oh.__file="http_src/vue/page-asset-table.vue";var yh={components:{datatable:Tm,"modal-delete-confirm":sh},props:{page_csrf:String,url_params:Object,view:String,table_filters:Array,is_admin:Boolean},created(){!function(e){const t=[];let a=[],n=0;e.get_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,url_params),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,n,l){e.reload_table()}});let l=ntopng_utility.clone(url_params);l.view=null;let s={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l),enable_search:!0},i=[];for(let t of e.$props.table_filters||[])t.callbackFunction=(e,a)=>{l[t.filterMenuKey]=a.id,x.set_key_to_url(t.filterMenuKey,a.id),e.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l)),NtopUtils.showOverlays(),e.ajax.reload(),NtopUtils.hideOverlays()},i.push(t);a=[{columnName:i18n("map_page.last_seen"),name:"last_seen",data:"last_seen",className:"text-center text-nowrap",render:(e,t)=>e.value,responsivePriority:2},{columnName:i18n("map_page.client"),name:"client",data:"client",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.server"),name:"server",data:"server",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.port"),name:"port",data:"port",className:"text-center",responsivePriority:4},{columnName:i18n("map_page.protocol"),name:"l7proto",data:"protocol",className:"text-nowrap",responsivePriority:3},{columnName:i18n("map_page.first_seen"),name:"first_seen",data:"first_seen",visible:!1,responsivePriority:3},{columnName:i18n("map_page.observations"),name:"observations",data:"observations",className:"text-center",responsivePriority:4},{columnName:i18n("map_page.frequency"),name:"frequency",data:"frequency",className:"text-center",orderable:!0,responsivePriority:4,render:(e,t,a)=>"sort"==t||"type"==t?e:e+" sec"}],n=6;let o={serverSide:!0,order:[[n,"desc"]]},r=ntopng_utility.clone(s);r.table_buttons=s.table_buttons,r.data_url=`${r.data_url}`,r.columns_config=a,r.table_filters=i,r.table_config=ntopng_utility.clone(o),e.config_devices_standard=r}(this)},mounted(){$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),ntopng_events_manager.on_custom_event("page_periodicity_table",ntopng_custom_events.DATATABLE_LOADED,(()=>{x.get_url_entry("host")&&this.hide_dropdowns()}))},data:()=>({i18n:e=>i18n(e),base_url:`${http_prefix}/lua/pro/enterprise/get_map.lua`,config_devices_standard:null,config_devices_centrality:null,title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_download:i18n("map_page.download"),body_download:i18n("map_page.download_message"),get_url:null}),methods:{hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden"),$("#network_dropdown").removeClass("d-inline"),$("#vlan_id_dropdown").removeClass("d-inline")},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",page:this.url_params.page,csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)}),this.reload_table()}catch(e){this.reload_table()}},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},destroy:function(){this.get_active_table().destroy_table()},get_active_table:function(){return this.$refs.table_periodicity},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()}}};const wh={class:"row"},xh={class:"col-md-12 col-lg-12"},kh=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),$h={class:"card"},Sh=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Ch={class:"card-body"},Nh={id:"periodicity-table"},Ah={class:"card-footer"},Th={key:0,type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Eh=Vs("i",{class:"fas fa-trash"},null,-1),Ph=["href"],Ih=[Vs("i",{class:"fas fa-download"},null,-1)];yh.render=function(e,t,a,n,l,s){const i=xl("modal-delete-confirm"),o=xl("datatable");return Es(),Os("div",wh,[Vs("div",xh,[kh,Vs("div",$h,[Sh,Vs("div",Ch,[Vs("div",Nh,[qs(i,{ref:"modal_delete_all",title:l.title_delete,body:l.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),qs(o,{ref:"table_periodicity",table_buttons:l.config_devices_standard.table_buttons,columns_config:l.config_devices_standard.columns_config,data_url:l.config_devices_standard.data_url,enable_search:l.config_devices_standard.enable_search,filter_buttons:l.config_devices_standard.table_filters,table_config:l.config_devices_standard.table_config,base_url:l.base_url,base_params:a.url_params},null,8,["table_buttons","columns_config","data_url","enable_search","filter_buttons","table_config","base_url","base_params"])])]),Vs("div",Ah,[a.is_admin?(Es(),Os("button",Th,[Eh,Ws(" "+ee(l.i18n("map_page.delete_services")),1)])):Js("v-if",!0),Vs("a",{href:l.get_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"periodicity_map.json",target:"_blank"},Ih,8,Ph)])])])])},yh.__file="http_src/vue/page-periodicity-table.vue";const Mh={autoResize:!0,nodes:{shape:"dot",scaling:{min:10,max:30,label:{min:15,max:15}},shadow:!1},edges:{width:.15,color:{inherit:"from"},smooth:{type:"continuous",roundness:0}},interaction:{tooltipDelay:150,hideEdgesOnDrag:!0,hideEdgesOnZoom:!0,hover:!0,tooltipDelay:0},physics:{barnesHut:{springConstant:0,avoidOverlap:.3,gravitationalConstant:-1e3,damping:.65,centralGravity:0},stabilization:{onlyDynamicEdges:!1}},groups:{unknown:{shape:"dot"},printer:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},video:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},workstation:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},laptop:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},tablet:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},phone:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},tv:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},networking:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},wifi:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},nas:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},multimedia:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},iot:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}}}},Uh=function(e,t,a,n){$.post(`${http_prefix}/lua/pro/enterprise/switch_service_state.lua`,{service_id:e,service_status:t,csrf:n}).then((e=>{e.success&&a&&a()}))},Oh=function(){return Mh},jh="change_service_table_tab_event";var Fh={components:{datatable:Tm,"modal-delete-confirm":sh,"tab-list":eh},props:{page_csrf:String,url_params:Object,view:String,table_filters:Array,is_admin:Boolean,service_acceptance:Array},created(){this.service_table_tab=x.get_url_entry("view")||"centrality",x.set_key_to_url("view",this.service_table_tab),this.tab_list.forEach((e=>{this.service_table_tab==e.id&&(e.active=!0)})),function(e){const t=[];let a=[],n=0;e.get_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,url_params),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,n,l){e.reload_table()}});let l=url_params;l.view="standard";let s={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l),enable_search:!0},i=[];for(let t of e.$props.table_filters||[])t.callbackFunction=(a,n)=>{l.view=e.service_table_tab,l[t.filterMenuKey]=n.id,x.set_key_to_url(t.filterMenuKey,n.id),a.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l)),NtopUtils.showOverlays(),a.ajax.reload(),NtopUtils.hideOverlays()},i.push(t);a=[{columnName:i18n("map_page.last_seen"),name:"last_seen",data:"last_seen",className:"text-center text-nowrap",render:(e,t)=>e.value,responsivePriority:2,createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("map_page.client"),name:"client",data:"client",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.server"),name:"server",data:"server",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.port"),name:"port",data:"port",className:"text-center",responsivePriority:4},{columnName:i18n("map_page.protocol"),name:"l7proto",data:"protocol",className:"text-nowrap",responsivePriority:3},{columnName:i18n("map_page.first_seen"),name:"first_seen",data:"first_seen",visible:!1,responsivePriority:3},{columnName:i18n("map_page.num_uses"),name:"num_uses",data:"num_uses",className:"text-center text-nowrap",responsivePriority:4},{columnName:i18n("map_page.info"),name:"info",data:"info",responsivePriority:5}],n=6,e.is_admin&&a.push({columnName:i18n("map_page.status"),name:"service_acceptance",data:"service_acceptance",className:"text-center",orderable:!1,responsivePriority:1,render:(t,a,n)=>e.create_action_buttons(t,a,n)});let o={serverSide:!0,order:[[n,"desc"]]},r=ntopng_utility.clone(s);r.table_buttons=s.table_buttons,r.data_url=`${r.data_url}`,r.columns_config=a,r.table_filters=i,r.table_config=ntopng_utility.clone(o),e.config_devices_standard=r,l.view="centrality",s.data_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l),a=[{columnName:i18n("map_page.host"),name:"host",data:"host",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.total_edges"),name:"total_edges",data:"total_edges",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.rank"),name:"rank",data:"rank",className:"text-center",responsivePriority:2},{columnName:i18n("map_page.in_edges"),name:"in_edges",data:"in_edges",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.out_edges"),name:"out_edges",data:"out_edges",className:"text-center",responsivePriority:2}],n=2,o.order=[[n,"desc"]],r=ntopng_utility.clone(s),r.table_buttons=s.table_buttons,r.data_url=`${r.data_url}`,r.columns_config=a,r.table_filters=i,r.table_config=ntopng_utility.clone(o),e.config_devices_centrality=r}(this)},mounted(){C.on_custom_event("page_service_table",ntopng_custom_events.DATATABLE_LOADED,(()=>{x.get_url_entry("host")&&this.hide_dropdowns()})),C.on_custom_event("change_service_table_tab",jh,(e=>{let t=this.get_active_table();x.set_key_to_url("view",e),t.delete_button_handlers(this.service_table_tab),t.destroy_table(),this.service_table_tab=e})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog()))},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null,title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),get_url:null,service_table_tab:null,tab_list:[{title:i18n("map_page.standard_view"),active:"standard"==view,id:"standard"},{title:i18n("map_page.centrality_view"),active:"centrality"==view,id:"centrality"}]}),methods:{hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden"),$("#network_dropdown").removeClass("d-inline"),$("#vlan_id_dropdown").removeClass("d-inline")},destroy:function(){let e=this.get_active_table();e.delete_button_handlers(this.service_table_tab),e.destroy_table()},click_item:function(e){this.tab_list.forEach((e=>e.active=!1)),e.active=!0,C.emit_custom_event(jh,e.id)},create_action_buttons:function(e,t,a){const n=this.reload_table,l=this.$props.page_csrf,s={onClick:()=>{Uh(a.hash_id,this.$props.service_acceptance[0].id,n,l)}},i={onClick:()=>{Uh(a.hash_id,this.$props.service_acceptance[1].id,n,l)}},o={onClick:()=>{Uh(a.hash_id,this.$props.service_acceptance[2].id,n,l)}};if("display"!==t)return e;const r=a.acceptance,c={class:"dropdown-item",href:"#",title:this.$props.service_acceptance[0].label,handler:s},u={class:"dropdown-item",href:"#",title:this.$props.service_acceptance[1].label,handler:i},d={class:"dropdown-item disabled",href:"#",title:this.$props.service_acceptance[2].label,handler:o};switch(r){case 0:c.class="dropdown-item active";break;case 1:u.class="dropdown-item active";break;case 2:d.class="dropdown-item active disabled"}return DataTableUtils.createActionButtons([d,c,u])},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",page:this.url_params.page,csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)}),this.reload_table()}catch(e){this.reload_table()}},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},get_active_table:function(){return this.$refs[`table_service_${this.service_table_tab}`]},switch_to_standard:function(){this.url_params.view="standard",document.location.href=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/network_maps.lua`,url_params)},switch_to_centrality:function(){this.url_params.view="centrality",document.location.href=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/network_maps.lua`,url_params)},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()}}};const Dh={class:"row"},Lh={class:"col-md-12 col-lg-12"},Rh=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),zh={class:"card"},Bh=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Vh={class:"card-body"},qh={id:"table_service"},Hh={class:"card-footer"},Gh={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Wh=Vs("i",{class:"fas fa-trash"},null,-1),Kh=["href"],Jh=[Vs("i",{class:"fas fa-download"},null,-1)];Fh.render=function(e,t,a,n,l,s){const i=xl("modal-delete-confirm"),o=xl("tab-list"),r=xl("datatable");return Es(),Os("div",Dh,[Vs("div",Lh,[Rh,Vs("div",zh,[Bh,Vs("div",Vh,[Vs("div",qh,[qs(i,{ref:"modal_delete_all",title:l.title_delete,body:l.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),qs(o,{ref:"service_tab_list",id:"service_tab_list",tab_list:l.tab_list,onClick_item:s.click_item},null,8,["tab_list","onClick_item"]),"standard"==l.service_table_tab?(Es(),js(r,{key:0,ref:"table_service_standard",table_buttons:l.config_devices_standard.table_buttons,columns_config:l.config_devices_standard.columns_config,data_url:l.config_devices_standard.data_url,enable_search:l.config_devices_standard.enable_search,filter_buttons:l.config_devices_standard.table_filters,table_config:l.config_devices_standard.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","filter_buttons","table_config"])):Js("v-if",!0),"centrality"==l.service_table_tab?(Es(),js(r,{key:1,ref:"table_service_centrality",table_buttons:l.config_devices_centrality.table_buttons,columns_config:l.config_devices_centrality.columns_config,data_url:l.config_devices_centrality.data_url,enable_search:l.config_devices_centrality.enable_search,filter_buttons:l.config_devices_centrality.table_filters,table_config:l.config_devices_centrality.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","filter_buttons","table_config"])):Js("v-if",!0)])]),Vs("div",Hh,[Js('\n        {% if is_admin then %}\n          <form class="d-inline" id=\'switch-state-form\'>\n            <div class="form-group mb-3 d-inline">\n              <label>{* i18n("map_page.set_state", {label = "<span class=\'count\'></span>"}) *}</label>\n              <select name="new_state" class="form-select d-inline" style="width: 16rem" {{ ternary(map.services_num == 0, "disabled=\'disabled\'", "") }}>\n              {% for _, status in pairsByField(map.filters.service_status_filters, label, asc_insensitive) do %}\n                <option value="{{ status.id }}">{* status.label *}</option>\n              {% end %}\n              </select>\n              <button class="btn btn-secondary d-inline" class="btn-switch-state" {{ ternary(map.services_num == 0, "disabled=\'disabled\'", "") }}>\n                <i class="fas fa-random"></i> {{ i18n("set") }}\n              </button>\n            </div>\n          </form>\n        {% end %}\n    '),Vs("button",Gh,[Wh,Ws(" "+ee(l.i18n("map_page.delete_services")),1)]),Vs("a",{href:l.get_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"service_map.json",target:"_blank"},Jh,8,Kh)])])])])},Fh.__file="http_src/vue/page-service-table.vue";const Yh={id:"empty-map-message",class:"alert alert-info",hidden:""},Zh=["id"];var Xh={__name:"network-map",props:{empty_message:String,event_listeners:Object,page_csrf:String,url:String,url_params:Object,map_id:String},setup(e,{expose:t}){const a=e,n={ifid:a.url_params.ifid,action:"load_graph",map:a.url_params.map_id};let l=null,s={},i={},o=null,r=!1,c=null,u={},d=!1;dl((async()=>{_(),u=a.url_params,o=document.getElementById(a.map_id);const e=NtopUtils.buildURL(a.url,u);await $.get(e,n,(function(e){const{nodes:t,edges:a,max_entry_reached:n}=e.rsp;r=n,s=new vis.DataSet(t),i=new vis.DataSet(a);const c={nodes:s,edges:i};p(c),l=new vis.Network(o,c,Oh()),m(),f()}))})),fl((()=>{1!=d&&g()}));const p=e=>{0==e.nodes.length&&0==e.edges.length?$("#empty-map-message").removeAttr("hidden"):$("#empty-map-message").attr("hidden","hidden")},_=()=>{const e=NtopUtils.loadElementScale($(".resizable-y-container"));if(void 0!==e)$(".resizable-y-container").width(e.width),$(".resizable-y-container").height(e.height),$(".resizable-y-container").on("mouseup",(function(){const e={width:$(".resizable-y-container").width(),height:$(".resizable-y-container").height()};NtopUtils.saveElementScale($(this),e)})),$('button[data-toggle="tooltip"]').tooltip();else{const e={width:$(".resizable-y-container").width(),height:$(".resizable-y-container").height()};NtopUtils.saveElementScale($(this),e)}},f=()=>{l.on("hoverEdge",(function(){$(".vis-tooltip").css("position","absolute")})),l.on("doubleClick",(function(e){(e=>{const t=e.id.split("@");u.host=t[0],u.vlan_id=t[1],x.set_key_to_url("host",u.host),x.set_key_to_url("vlan_id",u.vlan_id),C.emit_custom_event(ntopng_custom_events.CHANGE_PAGE_TITLE,e),b()})(s.get(e.nodes[0]))})),l.on("zoom",(function(e){c=h()})),l.on("dragEnd",(function(e){v()})),l.on("afterDrawing",(function(e){C.emit_custom_event(ntopng_custom_events.VIS_DATA_LOADED)}));for(const e in a.event_listeners||{})l.on(e,a.event_listeners[e])},m=()=>{if(!l)return;const e=l.getPositions(l.body.data.nodes.map((e=>e.id))),t={positions:e,network:{scale:l.getScale(),position:l.getViewPosition()}};$.post(a.url,{...u,csrf:a.page_csrf,JSON:JSON.stringify(t),action:"save_view"})},h=()=>(l.getScale()<=.15&&l.moveTo({scale:.4,position:{x:0,y:0},animation:{duration:1e3,easingFunction:"easeInOutCubic"}}),clearTimeout(c),setTimeout(m)),v=()=>{c&&clearTimeout(c),m()},g=()=>{l&&l.destroy(!0),d=!0},b=async()=>{const e=NtopUtils.buildURL(a.url,u);await $.get(e,n,(function(e){const{nodes:t,edges:a,max_entry_reached:n}=e.rsp;r=n,s=new vis.DataSet(t),i=new vis.DataSet(a);const o={nodes:s,edges:i};p(o),l&&l.setData(o),m()}))};return t({reload:b,destroy:g,is_max_entry_reached:()=>r,autolayout:()=>{void 0!==l?l instanceof vis.Network?(l.stabilize(),setTimeout((()=>{m()}),1e3)):console.error("Not a vis.Network instance!"):console.error("The network is undefined!")},update_url_params:e=>{u=e}}),(t,a)=>(Es(),Os($s,null,[Vs("div",Yh,ee(e.empty_message),1),Vs("div",{class:"d-flex justify-content-center align-items-center resizable-y-container",style:{width:"100%",height:"60vh"},id:e.map_id},null,8,Zh)],64))},__file:"http_src/vue/network-map.vue"},Qh={__name:"modal-autolayout-confirm",props:{body:String,title:String},emits:["autolayout"],setup(e,{expose:t,emit:a}){const n=fa(null),l=()=>{a("autolayout"),s()},s=()=>{n.value.close()};t({show:()=>{n.value.show()},close:s}),dl((()=>{}));const i=e=>i18n(e);return(t,a)=>(Es(),js(mp,{onShowed:a[0]||(a[0]=e=>{}),ref_key:"modal_id",ref:n},{title:hn((()=>[Ws(ee(e.title),1)])),body:hn((()=>[Ws(ee(e.body),1)])),footer:hn((()=>[Vs("button",{type:"button",onClick:l,class:"btn btn-primary"},ee(i("confirm")),1)])),_:1},512))},__file:"http_src/vue/modal-autolayout-confirm.vue"};const ev="change_filter_event";var tv={components:{"network-map":Xh,"modal-delete-confirm":sh,"modal-autolayout-confirm":Qh,"select-search":Ld},props:{page_csrf:String,ifid:Number,url_params:Object,map_id:String,is_admin:Boolean,all_filter_list:Object},created(){!function(e){for(const t in e.$props.all_filter_list){e.filter_list.push(e.$props.all_filter_list[t]);const a=ntopng_url_manager.get_url_entry(t);for(let[n,l]of Object.entries(e.$props.all_filter_list[t]))l.filter_name=t,a?l.id==a&&e.active_filter_list.push(l):1==l.currently_active&&e.active_filter_list.push(l)}e.get_url=`${http_prefix}/lua/pro/rest/v2/get/interface/map/data.lua`,e.download_url=NtopUtils.buildURL(e.get_url,e.$props.url_params),e.event_listeners={}}(this)},mounted(){const e=this.max_entry_reached,t=this.reload_map;this.$props.url_params.host&&""!=this.$props.url_params.host&&this.hide_dropdowns(),C.on_custom_event("page_service_map",ntopng_custom_events.CHANGE_PAGE_TITLE,(e=>{this.hide_dropdowns()})),C.on_custom_event("change_filter_event",ev,(e=>{this.active_filter_list[e.id]=e,ntopng_url_manager.set_key_to_url(e.filter_name,e.key),this.url_params[e.filter_name]=e.key,this.update_and_reload_map()})),C.on_custom_event(this.get_map(),ntopng_custom_events.VIS_DATA_LOADED,(t=>{e()?$("#max-entries-reached").removeAttr("hidden"):$("#max-entries-reached").attr("hidden","hidden"),NtopUtils.hideOverlays()}));let a=ntopng_url_manager.get_url_entries();for(const[e,t]of a)this.url_params[e]=t;$("#reload-graph").click((function(e){t()})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),$("#autolayout").click((()=>this.show_autolayout_dialog()))},data:()=>({i18n:e=>i18n(e),container:null,update_view_state_id:null,get_url:null,download_url:null,filter_list:[],active_filter_list:[],event_listeners:{},title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_autolayout:i18n("map_page.autolayout_services"),body_autolayout:i18n("map_page.autolayout_services_message"),no_services_message:i18n("map_page.no_services"),max_entry_title:i18n("max_entries_reached")}),methods:{destroy:function(){this.get_map().destroy()},click_item:function(e){C.emit_custom_event(ev,e)},get_map:function(){return this.$refs.service_map},max_entry_reached:function(){return this.get_map().is_max_entry_reached()},reload_map:async function(){NtopUtils.showOverlays();let e=this.get_map();await e.reload()},update_and_reload_map:async function(){let e=this.get_map();NtopUtils.showOverlays(),e.update_url_params(this.url_params),await e.reload()},autolayout:function(){this.get_map().autolayout()},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_autolayout_dialog:function(){this.$refs.modal_autolayout.show()},hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)})}finally{this.reload_map()}}}};const av={class:"row"},nv={class:"col-md-12 col-lg-12"},lv={class:"card card-shadow"},sv=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),iv={class:"card-body"},ov={id:"table_service"},rv={class:"d-flex align-items-center justify-content-end mb-2"},cv=["title"],uv=[Vs("i",{class:"text-danger fa-solid fa-triangle-exclamation"},null,-1)],dv={class:"d-flex ms-auto"},pv={class:"m-1"},_v=Vs("button",{type:"button",id:"reload-graph",class:"btn btn-link btn-reload-graph"},[Vs("i",{class:"fas fa-sync"})],-1),fv=Vs("button",{type:"button",id:"autolayout",class:"btn btn-link btn-stabilize"},[Vs("i",{class:"fas fa-magic"})],-1),mv={class:"card-footer"},hv={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},vv=Vs("i",{class:"fas fa-trash"},null,-1),gv=["href"],bv=[Vs("i",{class:"fas fa-download"},null,-1)];tv.render=function(e,t,a,n,l,s){const i=xl("select-search"),o=xl("modal-delete-confirm"),r=xl("modal-autolayout-confirm"),c=xl("network-map");return Es(),Os("div",av,[Vs("div",nv,[Vs("div",lv,[sv,Vs("div",iv,[Vs("div",ov,[Vs("div",rv,[Vs("button",{id:"max-entries-reached",type:"button",class:"btn btn-link",title:l.max_entry_title,disabled:"",hidden:""},uv,8,cv),Vs("div",dv,[(Es(!0),Os($s,null,Al(l.filter_list,((e,t)=>(Es(),Os("div",pv,[qs(i,{selected_option:l.active_filter_list[t],"onUpdate:selected_option":e=>l.active_filter_list[t]=e,options:l.filter_list[t],onSelect_option:s.click_item},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256))]),_v,fv]),qs(o,{ref:"modal_delete_all",title:l.title_delete,body:l.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),qs(r,{ref:"modal_autolayout",title:l.title_autolayout,body:l.body_autolayout,onAutolayout:s.reload_map},null,8,["title","body","onAutolayout"]),qs(c,{ref:"service_map",empty_message:l.no_services_message,event_listeners:l.event_listeners,page_csrf:a.page_csrf,url:l.get_url,url_params:a.url_params,map_id:a.map_id},null,8,["empty_message","event_listeners","page_csrf","url","url_params","map_id"])])]),Vs("div",mv,[Vs("button",hv,[vv,Ws(" "+ee(l.i18n("map_page.delete_services")),1)]),Vs("a",{href:l.download_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"service_map.json",target:"_blank"},bv,8,gv)])])])])},tv.__file="http_src/vue/page-service-map.vue";const yv="change_filter_event";var wv={components:{"network-map":Xh,"modal-delete-confirm":sh,"modal-autolayout-confirm":Qh,"select-search":Ld},props:{page_csrf:String,ifid:Number,url_params:Object,map_id:String,is_admin:Boolean,all_filter_list:Object},created(){!function(e){for(const t in e.$props.all_filter_list){e.filter_list.push(e.$props.all_filter_list[t]);const a=ntopng_url_manager.get_url_entry(t);for(let[n,l]of Object.entries(e.$props.all_filter_list[t]))l.filter_name=t,a?l.id==a&&e.active_filter_list.push(l):1==l.currently_active&&e.active_filter_list.push(l)}e.get_url=`${http_prefix}/lua/pro/rest/v2/get/interface/map/data.lua`,e.download_url=NtopUtils.buildURL(e.get_url,e.updated_url_params),e.event_listeners={}}(this)},mounted(){this.updated_url_params=this.$props.url_params;let e=ntopng_url_manager.get_url_entries();for(const[t,a]of e)this.updated_url_params[t]=a;const t=this.max_entry_reached,a=this.reload_map;this.update_and_reload_map(),this.$props.url_params.host&&""!=this.$props.url_params.host&&this.hide_dropdowns(),C.on_custom_event("page_periodicity_map",ntopng_custom_events.CHANGE_PAGE_TITLE,(e=>{this.hide_dropdowns()})),C.on_custom_event("change_filter_event",yv,(e=>{this.active_filter_list[e.id]=e,ntopng_url_manager.set_key_to_url(e.filter_name,e.key),this.url_params[e.filter_name]=e.key,this.update_and_reload_map()})),C.on_custom_event(this.get_map(),ntopng_custom_events.VIS_DATA_LOADED,(e=>{t()?$("#max-entries-reached").removeAttr("hidden"):$("#max-entries-reached").attr("hidden","hidden"),NtopUtils.hideOverlays()})),$("#reload-graph").click((function(e){a()})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),$("#autolayout").click((()=>this.show_autolayout_dialog()))},data:()=>({i18n:e=>i18n(e),container:null,update_view_state_id:null,get_url:null,download_url:null,updated_url_params:{},filter_list:[],active_filter_list:[],event_listeners:{},title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_autolayout:i18n("map_page.autolayout_services"),body_autolayout:i18n("map_page.autolayout_services_message"),no_services_message:i18n("map_page.no_services"),max_entry_title:i18n("max_entries_reached")}),methods:{destroy:function(){this.get_map().destroy()},click_item:function(e){C.emit_custom_event(yv,e)},get_map:function(){return this.$refs.periodicity_map},max_entry_reached:function(){return this.get_map().is_max_entry_reached()},reload_map:async function(){NtopUtils.showOverlays();let e=this.get_map();await e.reload()},hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},update_and_reload_map:async function(){let e=this.get_map();NtopUtils.showOverlays(),e.update_url_params(this.updated_url_params),await e.reload()},autolayout:function(){this.get_map().autolayout()},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_autolayout_dialog:function(){this.$refs.modal_autolayout.show()},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.updated_url_params.ifid,action:"reset",csrf:this.$props.page_csrf,map:this.updated_url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)})}finally{this.reload_map()}}}};const xv={class:"row"},kv={class:"col-md-12 col-lg-12"},$v={class:"card card-shadow"},Sv=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Cv={class:"card-body"},Nv={id:"table_periodicity"},Av={class:"d-flex align-items-center justify-content-end mb-2"},Tv=["title"],Ev=[Vs("i",{class:"text-danger fa-solid fa-triangle-exclamation"},null,-1)],Pv={class:"d-flex ms-auto"},Iv={class:"m-1"},Mv=Vs("button",{type:"button",id:"reload-graph",class:"btn btn-link btn-reload-graph"},[Vs("i",{class:"fas fa-sync"})],-1),Uv=Vs("button",{type:"button",id:"autolayout",class:"btn btn-link btn-stabilize"},[Vs("i",{class:"fas fa-magic"})],-1),Ov={class:"card-footer"},jv={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Fv=Vs("i",{class:"fas fa-trash"},null,-1),Dv=["href"],Lv=[Vs("i",{class:"fas fa-download"},null,-1)];wv.render=function(e,t,a,n,l,s){const i=xl("select-search"),o=xl("modal-delete-confirm"),r=xl("modal-autolayout-confirm"),c=xl("network-map");return Es(),Os("div",xv,[Vs("div",kv,[Vs("div",$v,[Sv,Vs("div",Cv,[Vs("div",Nv,[Vs("div",Av,[Vs("button",{id:"max-entries-reached",type:"button",class:"btn btn-link",title:l.max_entry_title,disabled:"",hidden:""},Ev,8,Tv),Vs("div",Pv,[(Es(!0),Os($s,null,Al(l.filter_list,((e,t)=>(Es(),Os("div",Iv,[qs(i,{selected_option:l.active_filter_list[t],"onUpdate:selected_option":e=>l.active_filter_list[t]=e,options:l.filter_list[t],onSelect_option:s.click_item},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256))]),Mv,Uv]),qs(o,{ref:"modal_delete_all",title:l.title_delete,body:l.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),qs(r,{ref:"modal_autolayout",title:l.title_autolayout,body:l.body_autolayout,onAutolayout:s.reload_map},null,8,["title","body","onAutolayout"]),qs(c,{ref:"periodicity_map",empty_message:l.no_services_message,event_listeners:l.event_listeners,page_csrf:a.page_csrf,url:l.get_url,url_params:a.url_params,map_id:a.map_id},null,8,["empty_message","event_listeners","page_csrf","url","url_params","map_id"])])]),Vs("div",Ov,[Vs("button",jv,[Fv,Ws(" "+ee(l.i18n("map_page.delete_services")),1)]),Vs("a",{href:l.download_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"periodicity_map.json",target:"_blank"},Lv,8,Dv)])])])])},wv.__file="http_src/vue/page-periodicity-map.vue";const Rv="change_filter_event";var zv={components:{"network-map":Xh,"modal-delete-confirm":sh,"modal-autolayout-confirm":Qh,"select-search":Ld},props:{page_csrf:String,ifid:Number,url_params:Object,map_id:String,is_admin:Boolean,all_filter_list:Object},created(){!function(e){for(const t in e.$props.all_filter_list){e.filter_list.push(e.$props.all_filter_list[t]);const a=x.get_url_entry(t);for(let[n,l]of Object.entries(e.$props.all_filter_list[t]))l.filter_name=t,a?l.id==a&&e.active_filter_list.push(l):1==l.currently_active&&e.active_filter_list.push(l)}e.get_url=`${http_prefix}/lua/pro/rest/v2/get/interface/map/data.lua`,e.download_url=NtopUtils.buildURL(e.get_url,e.$props.url_params),e.event_listeners={}}(this)},mounted(){const e=this.max_entry_reached,t=this.reload_map;this.$props.url_params.host&&""!=this.$props.url_params.host&&this.hide_dropdowns(),C.on_custom_event("page_service_map",ntopng_custom_events.CHANGE_PAGE_TITLE,(e=>{this.hide_dropdowns()})),C.on_custom_event("change_filter_event",Rv,(e=>{this.active_filter_list[e.id]=e,x.set_key_to_url(e.filter_name,e.key),this.url_params[e.filter_name]=e.key,this.update_and_reload_map()})),C.on_custom_event(this.get_map(),ntopng_custom_events.VIS_DATA_LOADED,(t=>{e()?$("#max-entries-reached").removeAttr("hidden"):$("#max-entries-reached").attr("hidden","hidden"),NtopUtils.hideOverlays()}));let a=x.get_url_entries();for(const[e,t]of a)this.url_params[e]=t;$("#reload-graph").click((function(e){t()})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),$("#autolayout").click((()=>this.show_autolayout_dialog()))},data:()=>({i18n:e=>i18n(e),container:null,update_view_state_id:null,get_url:null,download_url:null,filter_list:[],active_filter_list:[],event_listeners:{},title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_autolayout:i18n("map_page.autolayout_services"),body_autolayout:i18n("map_page.autolayout_services_message"),no_services_message:i18n("map_page.no_services"),max_entry_title:i18n("max_entries_reached")}),methods:{destroy:function(){this.get_map().destroy()},click_item:function(e){C.emit_custom_event(Rv,e)},get_map:function(){return this.$refs.asset_map},hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},max_entry_reached:function(){return this.get_map().is_max_entry_reached()},reload_map:async function(){NtopUtils.showOverlays();let e=this.get_map();await e.reload()},update_and_reload_map:async function(){let e=this.get_map();NtopUtils.showOverlays(),e.update_url_params(this.url_params),await e.reload()},autolayout:function(){this.get_map().autolayout()},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_autolayout_dialog:function(){this.$refs.modal_autolayout.show()},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)})}finally{NtopUtils.showOverlays(),this.reload_map()}}}};const Bv={class:"row"},Vv={class:"col-md-12 col-lg-12"},qv={class:"card card-shadow"},Hv=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Gv={class:"card-body"},Wv={id:"table_asset"},Kv={class:"d-flex align-items-center justify-content-end mb-2"},Jv=["title"],Yv=[Vs("i",{class:"text-danger fa-solid fa-triangle-exclamation"},null,-1)],Zv={class:"d-flex ms-auto"},Xv={class:"m-1"},Qv=Vs("button",{type:"button",id:"reload-graph",class:"btn btn-link btn-reload-graph"},[Vs("i",{class:"fas fa-sync"})],-1),eg=Vs("button",{type:"button",id:"autolayout",class:"btn btn-link btn-stabilize"},[Vs("i",{class:"fas fa-magic"})],-1),tg={class:"card-footer"},ag={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},ng=Vs("i",{class:"fas fa-trash"},null,-1),lg=["href"],sg=[Vs("i",{class:"fas fa-download"},null,-1)];zv.render=function(e,t,a,n,l,s){const i=xl("select-search"),o=xl("modal-delete-confirm"),r=xl("modal-autolayout-confirm"),c=xl("network-map");return Es(),Os("div",Bv,[Vs("div",Vv,[Vs("div",qv,[Hv,Vs("div",Gv,[Vs("div",Wv,[Vs("div",Kv,[Vs("button",{id:"max-entries-reached",type:"button",class:"btn btn-link",title:l.max_entry_title,disabled:"",hidden:""},Yv,8,Jv),Vs("div",Zv,[(Es(!0),Os($s,null,Al(l.filter_list,((e,t)=>(Es(),Os("div",Xv,[qs(i,{selected_option:l.active_filter_list[t],"onUpdate:selected_option":e=>l.active_filter_list[t]=e,options:l.filter_list[t],onSelect_option:s.click_item},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256))]),Qv,eg]),qs(o,{ref:"modal_delete_all",title:l.title_delete,body:l.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),qs(r,{ref:"modal_autolayout",title:l.title_autolayout,body:l.body_autolayout,onAutolayout:s.reload_map},null,8,["title","body","onAutolayout"]),qs(c,{ref:"asset_map",empty_message:l.no_services_message,event_listeners:l.event_listeners,page_csrf:a.page_csrf,url:l.get_url,url_params:a.url_params,map_id:a.map_id},null,8,["empty_message","event_listeners","page_csrf","url","url_params","map_id"])])]),Vs("div",tg,[Vs("button",ag,[ng,Ws(" "+ee(l.i18n("map_page.delete_services")),1)]),Vs("a",{href:l.download_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"asset_map.json",target:"_blank"},sg,8,lg)])])])])},zv.__file="http_src/vue/page-asset-map.vue";var ig=Jn({components:{},props:{id:String,main_title:Object,secondary_title_list:Array,help_link:String,items_table:Array},emits:["click_item"],created(){},data:()=>({}),mounted(){ntopng_sync.ready(this.$props.id)},methods:{}});const og={class:"navbar navbar-shadow navbar-expand-lg navbar-light bg-light px-2 mb-2"},rg={class:"me-1 text-nowrap",style:{"font-size":"1.1rem"}},cg=["href","title"],ug=["title"],dg=["href","title"],pg=["title"],_g=Vs("span",{class:"text-muted ms-1 d-none d-lg-inline d-md-none"},"|",-1),fg=Vs("button",{class:"navbar-toggler",type:"button"},[Vs("span",{class:"navbar-toggler-icon"})],-1),mg={class:"collapse navbar-collapse scroll-x",id:"navbarNav"},hg={class:"navbar-nav"},vg=["onClick"],gg={key:0,class:"badge rounded-pill bg-dark",style:{float:"right","margin-bottom":"-10px"}},bg=["onClick"],yg={key:0,class:"badge rounded-pill bg-dark",style:{float:"right","margin-bottom":"-10px"}},wg={class:"navbar-nav ms-auto"},xg=Vs("a",{href:"javascript:history.back()",class:"nav-item nav-link text-muted"},[Vs("i",{class:"fas fa-arrow-left"})],-1),kg=["href"],$g=[Vs("i",{class:"fas fa-question-circle"},null,-1)];ig.render=function(e,t,a,n,l,s){return Es(),Os("nav",og,[Vs("span",rg,[Vs("i",{class:W(e.main_title.icon)},null,2),e.main_title.href?(Es(),Os("a",{key:0,href:e.main_title.href,title:e.main_title.title},ee(e.main_title.label),9,cg)):(Es(),Os("span",{key:1,title:e.main_title.title},ee(e.main_title.label),9,ug)),(Es(!0),Os($s,null,Al(e.secondary_title_list,(e=>(Es(),Os($s,null,[Ws(" / "),e.href?(Es(),Os("a",{key:0,href:e.href,title:e.title},[Ws(ee(e.label)+" ",1),e.icon?(Es(),Os("i",{key:0,class:W(e.icon)},null,2)):Js("v-if",!0)],8,dg)):(Es(),Os("span",{key:1,title:e.title},ee(e.label),9,pg))],64)))),256))]),_g,fg,Vs("div",mg,[Vs("ul",hg,[(Es(!0),Os($s,null,Al(e.items_table,(e=>(Es(),Os($s,null,[e.active?(Es(),Os("li",{key:0,onClick:t=>this.$emit("click_item",e),class:W([{active:e.active},"nav-item nav-link"])},[e.badge_num>0?(Es(),Os("span",gg,ee(e.badge_num),1)):Js("v-if",!0),Vs("b",null,[Vs("i",{class:W(e.icon)},null,2),Ws(" "+ee(e.label),1)])],10,vg)):(Es(),Os("a",{key:1,onClick:t=>this.$emit("click_item",e),href:"#",class:"nav-item nav-link"},[e.badge_num>0?(Es(),Os("span",yg,ee(e.badge_num),1)):Js("v-if",!0),Vs("i",{class:W(e.icon)},null,2),Ws(" "+ee(e.label),1)],8,bg))],64)))),256))]),Vs("ul",wg,[xg,Vs("a",{target:"_newtab",href:e.help_link,class:"nav-item nav-link text-muted"},$g,8,kg)])])])},ig.__file="http_src/vue/page-navbar.vue";const Sg={class:"form-group mb-3 row"},Cg={class:"col-form-label col-sm-4"},Ng={class:"col-sm-7"},Ag=Vs("div",{class:"invalid-feedback"},null,-1),Tg={class:"form-group mb-3 row"},Eg={class:"col-form-label col-sm-4 pt-2"},Pg={class:"form-switch col-sm-7 pt-2 ps-3"},Ig={class:"col-form-label"};var Mg={__name:"modal-add-device-exclusion",props:{body:String,title:String,footer:String,list_notes:String},emits:["add"],setup(e,{expose:t,emit:a}){const n=fa(""),l=fa(""),s=fa(null),i=()=>{a("add",{mac_list:n.value,trigger_alerts:l.value}),o()},o=()=>{s.value.close()};t({show:()=>{n.value="",s.value.show()},close:o}),dl((()=>{}));const r=e=>i18n(e);return(t,a)=>(Es(),js(mp,{onShowed:a[2]||(a[2]=e=>{}),ref_key:"modal_id",ref:s},{title:hn((()=>[Ws(ee(e.title),1)])),body:hn((()=>[Vs("div",Sg,[Vs("label",Cg,ee(e.body),1),Vs("div",Ng,[yl(Vs("textarea",{name:"items-list",id:"itemslist-textarea",class:"w-100 form-control",rows:"6","onUpdate:modelValue":a[0]||(a[0]=e=>n.value=e)},null,512),[[Uo,n.value]]),Vs("small",null,ee(e.list_notes),1),Ag])]),Vs("div",Tg,[Vs("label",Eg,ee(r("edit_check.trigger_device_disconnected_alert")),1),Vs("div",Pg,[yl(Vs("input",{type:"checkbox",class:"form-check-input ms-0","onUpdate:modelValue":a[1]||(a[1]=e=>l.value=e)},null,512),[[Oo,l.value]])]),Vs("small",Ig,ee(r("edit_check.trigger_device_disconnected_alert_descr")),1)])])),footer:hn((()=>[Ws(ee(r("host_details.notes"))+": "+ee(e.footer)+" ",1),Vs("button",{type:"button",onClick:i,class:"btn btn-primary"},ee(r("add")),1)])),_:1},512))},__file:"http_src/vue/modal-add-device-exclusion.vue"};const Ug={class:"form-group mb-3 row"},Og={class:"col-form-label col-sm-4"},jg={class:"col-sm-7"},Fg={class:"form-group mb-3 row"},Dg={class:"col-form-label col-sm-4"},Lg={class:"col-sm-7"},Rg={value:"allowed"},zg={value:"denied"},Bg={class:"form-group mb-3 row"},Vg={class:"col-form-label col-sm-4 pt-2"},qg={class:"form-switch col-sm-7 pt-2 ps-3"},Hg={class:"col-form-label"};var Gg={__name:"modal-edit-device-exclusion",props:{title:String},emits:["edit"],setup(e,{expose:t,emit:a}){const n=fa(""),l=fa(""),s=fa(""),i=fa(null),o=()=>{a("edit",{mac_alias:n.value,mac_status:l.value,trigger_alerts:s.value}),r()},r=()=>{i.value.close()};t({show:e=>{l.value=e.status,n.value=e.mac_address_label.label,s.value=e.trigger_alert||!1,i.value.show()},close:r}),dl((()=>{}));const c=e=>i18n(e);return(t,a)=>(Es(),js(mp,{onShowed:a[3]||(a[3]=e=>{}),ref_key:"modal_id",ref:i},{title:hn((()=>[Ws(ee(e.title),1)])),body:hn((()=>[Vs("div",Ug,[Vs("label",Og,ee(c("edit_check.device_alias")),1),Vs("div",jg,[yl(Vs("input",{type:"text",name:"custom_name",class:"form-control",placeholder:"{{_i18n('custom_name')}}","onUpdate:modelValue":a[0]||(a[0]=e=>n.value=e)},null,512),[[Uo,n.value]])])]),Vs("div",Fg,[Vs("label",Dg,ee(c("edit_check.device_status")),1),Vs("div",Lg,[yl(Vs("select",{name:"device_status",class:"form-select","onUpdate:modelValue":a[1]||(a[1]=e=>l.value=e)},[Vs("option",Rg,ee(c("allowed")),1),Vs("option",zg,ee(c("denied")),1)],512),[[Do,l.value]])])]),Vs("div",Bg,[Vs("label",Vg,ee(c("edit_check.trigger_device_disconnected_alert")),1),Vs("div",qg,[yl(Vs("input",{type:"checkbox",class:"form-check-input ms-0","onUpdate:modelValue":a[2]||(a[2]=e=>s.value=e)},null,512),[[Oo,s.value]])]),Vs("small",Hg,ee(c("edit_check.trigger_device_disconnected_alert_descr")),1)])])),footer:hn((()=>[Vs("button",{type:"button",onClick:o,class:"btn btn-primary"},ee(c("edit")),1)])),_:1},512))},__file:"http_src/vue/modal-edit-device-exclusion.vue"},Wg={components:{"page-navbar":ig,datatable:Tm,"modal-delete-confirm":sh,"modal-add-device-exclusion":Mg,"modal-edit-device-exclusion":Gg},props:{page_csrf:String,is_clickhouse_enabled:Boolean},created(){!function(e){const t=[];t.push({text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(t,a,n,l){e.show_add_device_dialog()}}),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,n,l){e.reload_table()}});let a={table_buttons:t,columns_config:[],data_url:`${http_prefix}/lua/pro/rest/v2/get/device/exclusion.lua`,enable_search:!0},n=ntopng_utility.clone(a);n.table_buttons=a.table_buttons,n.data_url=`${n.data_url}`,n.columns_config=[{sortable:!1,searchable:!1,visible:!1,data:"mac_address",type:"mac-address",responsivePriority:1},{columnName:i18n("edit_check.excluded_device"),data:"mac_address_label",type:"mac-address",className:"text-nowrap",sortable:!0,searchable:!0,createdCell:DataTableRenders.applyCellStyle,responsivePriority:1,render:function(e,t,a){let n=e.label;return e.label!==e.mac&&(n=n+" ["+e.mac+"]"),e.url&&(n=`<a href='${e.url}' title='${e.mac}'>${n}</a>`),n}},{columnName:i18n("first_seen"),data:"first_seen",type:"time",sortable:!0,searchable:!0,className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,a){return 0==e.timestamp?"":e.data}},{columnName:i18n("last_seen"),data:"last_seen",type:"time",sortable:!0,searchable:!0,className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,a){return 0==e.timestamp?"":e.data}},{columnName:i18n("edit_check.device_status"),data:"status",type:"status",sortable:!0,searchable:!0,className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,a){return i18n(e)}},{columnName:i18n("edit_check.trigger_alert"),data:"trigger_alert",type:"boolean",sortable:!0,searchable:!0,className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,a){return e?'<i class="fas fa-check text-success"></i>':'<i class="fas fa-times text-danger"></i>'}},{targets:-1,columnName:i18n("action"),data:null,name:"actions",className:"text-center text-nowrap",sortable:!1,responsivePriority:1,render:function(t,a,n){let l={handlerId:"delete_device",onClick:()=>{let a=`${i18n("edit_check.delete_device_exclusion")} ${t.mac_address_label.label}`;e.show_delete_dialog(i18n("edit_check.device_exclusion"),a,t)}},s={handlerId:"edit_device",onClick:()=>{e.show_edit_device_dialog(t)}},i={onClick:()=>{const e=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${t.first_seen.timestamp}&epoch_end=${t.last_seen.timestamp}&mac=${t.mac_address};eq`;window.open(e,"_blank")}};return DataTableUtils.createActionButtons([{class:"pointer",handler:i,icon:"fa-stream",title:i18n("db_explorer.historical_data"),hidden:!isClickhouseEnabled},{class:"btn-secondary",handler:s,icon:"fa-edit",title:i18n("edit"),class:"pointer"},{class:"btn-danger",handler:l,icon:"fa-trash",title:i18n("delete"),class:"pointer"}])}}],e.config_devices=n}(this)},mounted(){this.learning_status(),$("#btn-delete-all-devices").click((()=>this.show_delete_all_dialog()))},data:()=>({i18n:e=>i18n(e),config_devices:null,navbar_context:{main_title:{label:i18n("edit_check.device_exclusion_list"),icon:"fas fa-bell-slash"},base_url:"#",items_table:[{active:!0,label:i18n("devices"),id:"devices"}]},title_delete:"",body_delete:"",title_delete_all:i18n("edit_check.delete_all_device_exclusions"),body_delete_all:i18n("edit_check.delete_all_device_exclusions_message"),title_add:i18n("edit_check.add_device_exclusion"),body_add:i18n("edit_check.add_device_exclusion_message"),footer_add:i18n("edit_check.add_device_exclusion_notes"),list_notes_add:i18n("edit_check.add_device_exclusion_list_notes"),title_edit:i18n("edit_check.edit_device_exclusion"),learning_message:i18n("edit_check.learning"),row_to_delete:null,row_to_edit:null}),methods:{add_device:async function(e){e.mac_list=e.mac_list.replace(/(?:\t| )/g,""),e.mac_list=e.mac_list.replace(/(?:\r\n|\r|\n)/g,","),e.csrf=this.$props.page_csrf;let t=`${http_prefix}/lua/pro/rest/v2/add/device/exclusion.lua`;try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(t,{method:"post",headers:a,body:JSON.stringify(e)}),this.reload_table()}catch(e){console.error(e)}},delete_all:async function(){let e=`${http_prefix}/lua/pro/rest/v2/delete/device/exclusion.lua`,t={device:"all",csrf:this.$props.page_csrf};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)}),this.reload_table()}catch(e){console.error(e)}},delete_row:async function(){let e={device:this.row_to_delete.mac_address,csrf:this.$props.page_csrf},t=`${http_prefix}/lua/pro/rest/v2/delete/device/exclusion.lua`;try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(t,{method:"post",headers:a,body:JSON.stringify(e)}),setTimeout((()=>this.reload_table()),300)}catch(e){console.error(e)}},edit_row:async function(e){let t=this.row_to_edit;e.mac_alias=e.mac_alias.replace(/(?:\t| )/g,""),e.csrf=this.$props.page_csrf,e.mac=t.mac_address;let a=`${http_prefix}/lua/pro/rest/v2/edit/device/exclusion.lua`;try{let t={"Content-Type":"application/json"};await ntopng_utility.http_request(a,{method:"post",headers:t,body:JSON.stringify(e)}),setTimeout((()=>this.reload_table()),300)}catch(e){console.error(e)}},learning_status:async function(){let e=`${http_prefix}/lua/pro/rest/v2/get/device/learning_status.lua`;try{let t={"Content-Type":"application/json"};(await ntopng_utility.http_request(e,{method:"get",headers:t})).learning_done?$("#devices-learning-status").attr("hidden","hidden"):$("#devices-learning-status").removeAttr("hidden")}catch(e){console.error(e)}},reload_table:function(){this.get_active_table().reload(),this.learning_status()},get_active_table:function(){return this.$refs.table_devices_exclusion},show_add_device_dialog:function(){this.$refs.modal_add_device.show()},show_edit_device_dialog:function(e){this.row_to_edit=e,this.$refs.modal_edit_device.show(e)},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_delete_dialog:function(e,t,a){this.row_to_delete=a,this.title_delete=e,this.body_delete=t,this.$refs.modal_delete_confirm.show()}}};const Kg={id:"navbar"},Jg={class:"row"},Yg={class:"col-md-12 col-lg-12"},Zg=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),Xg={class:"card"},Qg={class:"card-body"},eb={id:"devices-learning-status",class:"alert alert-info",hidden:""},tb={id:"table_devices_vue"},ab={class:"card-footer"},nb={type:"button",id:"btn-delete-all-devices",class:"btn btn-danger"},lb=Vs("i",{class:"fas fa-trash"},null,-1);Wg.render=function(e,t,a,n,l,s){const i=xl("page-navbar"),o=xl("modal-delete-confirm"),r=xl("modal-add-device-exclusion"),c=xl("modal-edit-device-exclusion"),u=xl("datatable");return Es(),Os($s,null,[Vs("div",Kg,[qs(i,{id:"page_navbar",main_title:l.navbar_context.main_title,base_url:l.navbar_context.base_url,help_link:l.navbar_context.help_link,items_table:l.navbar_context.items_table,onClick_item:e.click_item},null,8,["main_title","base_url","help_link","items_table","onClick_item"])]),Vs("div",Jg,[Vs("div",Yg,[Zg,Vs("div",Xg,[Vs("div",Qg,[Vs("div",eb,ee(l.learning_message),1),Vs("div",tb,[qs(o,{ref:"modal_delete_confirm",title:l.title_delete,body:l.body_delete,onDelete:s.delete_row},null,8,["title","body","onDelete"]),qs(o,{ref:"modal_delete_all",title:l.title_delete_all,body:l.body_delete_all,onDelete:s.delete_all},null,8,["title","body","onDelete"]),qs(r,{ref:"modal_add_device",title:l.title_add,body:l.body_add,footer:l.footer_add,list_notes:l.list_notes_add,onAdd:s.add_device},null,8,["title","body","footer","list_notes","onAdd"]),qs(c,{ref:"modal_edit_device",title:l.title_edit,onEdit:s.edit_row},null,8,["title","onEdit"]),qs(u,{ref:"table_devices_exclusion",table_buttons:l.config_devices.table_buttons,columns_config:l.config_devices.columns_config,data_url:l.config_devices.data_url,enable_search:l.config_devices.enable_search},null,8,["table_buttons","columns_config","data_url","enable_search"])])]),Vs("div",ab,[Vs("button",nb,[lb,Ws(" "+ee(l.i18n("edit_check.delete_all_device_exclusions")),1)])])])])])],64)},Wg.__file="http_src/vue/page-device-exclusions.vue";var sb={components:{datatable:Tm},props:{page_csrf:String,url_params:Object},created(){!function(e){const t=[];let a=[],n=3;t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,n,l){e.reload_table()}});let l={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/fingerprint/data.lua`,url_params),enable_search:!0};a=[{columnName:i18n("ja3_client_fingerprint"),name:"ja3",data:"ja3",className:"text-nowrap",render:(e,t)=>`<a class="ntopng-external-link" href="https://sslbl.abuse.ch/ja3-fingerprints/${e}">${e} <i class="fas fa-external-link-alt"></i></a>`,responsivePriority:0,createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("status"),name:"is_malicious",data:"is_malicious",className:"text-nowrap text-center",responsivePriority:0,render:(e,t)=>e?`<i class="fa-solid fa-face-frown text-danger" title="${i18n("malicious")}"></i>`:`<i class="fa-solid fa-face-smile text-success" title="${i18n("ok")}"></i>`},{columnName:i18n("app_name"),name:"app_name",data:"app_name",className:"text-nowrap text-right",responsivePriority:1},{columnName:i18n("num_uses"),name:"num_uses",data:"num_uses",className:"text-nowrap text-right",responsivePriority:1,render:e=>NtopUtils.formatValue(e)}];let s={serverSide:!1,order:[[n,"desc"]]},i=ntopng_utility.clone(l);i.table_buttons=l.table_buttons,i.data_url=`${i.data_url}`,i.columns_config=a,i.table_config=ntopng_utility.clone(s),e.config_devices_standard=i}(this)},mounted(){},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null}),methods:{reload_table:function(){this.get_active_table().reload()},get_active_table:function(){return this.$refs.table_fingerprint}}};const ib={class:"row"},ob={class:"col-md-12 col-lg-12"},rb=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),cb={class:"card"},ub={class:"card-body"},db={id:"table_host_tls"},pb={class:"card-footer"};sb.render=function(e,t,a,n,l,s){const i=xl("datatable");return Es(),Os("div",ib,[Vs("div",ob,[rb,Vs("div",cb,[Vs("div",ub,[Vs("div",db,[qs(i,{ref:"table_fingerprint",table_buttons:l.config_devices_standard.table_buttons,columns_config:l.config_devices_standard.columns_config,data_url:l.config_devices_standard.data_url,enable_search:l.config_devices_standard.enable_search,table_config:l.config_devices_standard.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])]),Vs("div",pb,[Vs("b",null,ee(l.i18n("fingerprint_note")),1)])])])])},sb.__file="http_src/vue/page-host-tls.vue";var _b={components:{datatable:Tm},props:{page_csrf:String,url_params:Object},created(){!function(e){const t=[];let a=[],n=3;t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,n,l){e.reload_table()}});let l={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/fingerprint/data.lua`,url_params),enable_search:!0};a=[{columnName:i18n("hassh_fingerprint"),name:"ja3",data:"ja3",className:"text-nowrap",render:(e,t)=>`<a class="ntopng-external-link" href="https://sslbl.abuse.ch/ja3-fingerprints/${e}">${e} <i class="fas fa-external-link-alt"></i></a>`,responsivePriority:0,createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("status"),name:"is_malicious",data:"is_malicious",className:"text-nowrap text-center",responsivePriority:0,render:(e,t)=>e?`<i class="fa-solid fa-face-frown text-danger" title="${i18n("malicious")}"></i>`:`<i class="fa-solid fa-face-smile text-success" title="${i18n("ok")}"></i>`},{columnName:i18n("app_name"),name:"app_name",data:"app_name",className:"text-nowrap text-right",responsivePriority:1},{columnName:i18n("num_uses"),name:"num_uses",data:"num_uses",className:"text-nowrap text-right",responsivePriority:1,render:e=>NtopUtils.formatValue(e)}];let s={serverSide:!1,order:[[n,"desc"]]},i=ntopng_utility.clone(l);i.table_buttons=l.table_buttons,i.data_url=`${i.data_url}`,i.columns_config=a,i.table_config=ntopng_utility.clone(s),e.config_devices_standard=i}(this)},mounted(){},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null}),methods:{reload_table:function(){this.get_active_table().reload()},get_active_table:function(){return this.$refs.table_hassh}}};const fb={class:"row"},mb={class:"col-md-12 col-lg-12"},hb=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),vb={class:"card"},gb={class:"card-body"},bb={id:"table_host_ssh"};_b.render=function(e,t,a,n,l,s){const i=xl("datatable");return Es(),Os("div",fb,[Vs("div",mb,[hb,Vs("div",vb,[Vs("div",gb,[Vs("div",bb,[qs(i,{ref:"table_hassh",table_buttons:l.config_devices_standard.table_buttons,columns_config:l.config_devices_standard.columns_config,data_url:l.config_devices_standard.data_url,enable_search:l.config_devices_standard.enable_search,table_config:l.config_devices_standard.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])])])])])},_b.__file="http_src/vue/page-host-ssh.vue";const yb="change_map_event";var wb={components:{"page-periodicity-map":wv,"page-periodicity-table":yh,"page-asset-map":zv,"page-asset-table":oh,"page-service-map":tv,"page-service-table":Fh,"page-navbar":ig},props:{page_csrf:String,base_url_params:Object,ifid:Number,is_admin:Boolean,map_id:String,view:String,navbar_info:Object,service_acceptance:Array,service_map_filter_list:Object,service_table_filter_list:Array,periodicity_map_filter_list:Object,periodicity_table_filter_list:Array,asset_map_filter_list:Object,asset_table_filter_list:Array},created(){this.url_params=this.$props.base_url_params,this.active_tab=this.$props.map_id,this.page=this.url_params.page,this.updated_view=this.$props.view,asset_map_filter_list&&asset_table_filter_list&&(this.navbar_context.items_table.push({active:!1,label:i18n("asset_map"),id:"asset_map",page:"graph"}),this.navbar_context.items_table.push({active:!1,label:i18n("asset_table"),id:"asset_map",page:"table"})),this.navbar_context.items_table.forEach((e=>{e.id==this.active_tab&&e.page==this.page?e.active=!0:e.active=!1}))},mounted(){const e=this.format_navbar_title;e(this.$props.navbar_info),ntopng_events_manager.on_custom_event("page_navbar",ntopng_custom_events.CHANGE_PAGE_TITLE,(t=>{e({selected_iface:this.$props.navbar_info.selected_iface,selected_host:t})})),ntopng_events_manager.on_custom_event("change_service_table_tab",yb,(t=>{x.set_key_to_url("map",t.id),x.set_key_to_url("page",t.page),"table"==t.page&&this.destroy(),this.active_tab=t.id,this.page=t.page,this.url_params.map=t.id,this.url_params.page=t.page,this.updated_view=x.get_url_entry("view"),e()}))},data:()=>({i18n:e=>i18n(e),active_tab:null,page:null,url_params:{},updated_view:null,navbar_node:{},navbar_context:{main_title:{label:" "+i18n("maps"),icon:"fas fa-map"},secondary_title_list:[],items_table:[{active:!0,label:i18n("service_map"),id:"service_map",page:"graph"},{active:!1,label:i18n("service_table"),id:"service_map",page:"table"},{active:!1,label:i18n("periodicity_map"),id:"periodicity_map",page:"graph"},{active:!1,label:i18n("periodicity_table"),id:"periodicity_map",page:"table"}]}}),methods:{destroy:function(){this.get_active_tab().destroy()},format_navbar_title:function(e){if(e?this.navbar_node=e:e=this.navbar_node,this.navbar_context.secondary_title_list=[{label:e.selected_iface.label,title:NtopUtils.shortenLabel(`${e.selected_iface.label}`,16)}],e.selected_host&&""!=e.selected_host.id){const t=e.selected_host.label,a=NtopUtils.removeVlan(e.selected_host.id);this.navbar_context.secondary_title_list[0].href=`${http_prefix}/lua/pro/enterprise/network_maps.lua?map=${this.active_tab}&page=${this.page}&ifid=${this.$props.ifid}`,this.navbar_context.secondary_title_list.push({label:`${NtopUtils.formatNameValue(t,a)}`,title:`${e.selected_host.label}`,href:e.selected_host.is_active?`${http_prefix}/lua/host_details.lua?host=${a}`:null,icon:"fa-solid fa-laptop",target_blank:"true"})}},get_active_tab:function(){return this.$refs[this.active_tab+"_"+this.page]},click_item:function(e){e.id==this.active_tab&&e.page==this.page||(this.navbar_context.items_table.forEach((e=>e.active=!1)),e.active=!0,ntopng_events_manager.emit_custom_event(yb,e))}}};wb.render=function(e,t,a,n,l,s){const i=xl("page-navbar"),o=xl("page-service-map"),r=xl("page-service-table"),c=xl("page-periodicity-map"),u=xl("page-periodicity-table"),d=xl("page-asset-map"),p=xl("page-asset-table");return Es(),Os($s,null,[qs(i,{id:"page_navbar",main_title:l.navbar_context.main_title,secondary_title_list:l.navbar_context.secondary_title_list,help_link:l.navbar_context.help_link,items_table:l.navbar_context.items_table,onClick_item:s.click_item},null,8,["main_title","secondary_title_list","help_link","items_table","onClick_item"]),"service_map"==l.active_tab&&"graph"==l.page?(Es(),js(o,{key:0,ref:"service_map_graph",page_csrf:a.page_csrf,url_params:l.url_params,ifid:a.ifid,is_admin:a.is_admin,map_id:a.map_id,all_filter_list:a.service_map_filter_list},null,8,["page_csrf","url_params","ifid","is_admin","map_id","all_filter_list"])):Js("v-if",!0),"service_map"==l.active_tab&&"table"==l.page?(Es(),js(r,{key:1,ref:"service_map_table",page_csrf:a.page_csrf,url_params:l.url_params,view:l.updated_view,table_filters:a.service_table_filter_list,is_admin:a.is_admin,service_acceptance:a.service_acceptance},null,8,["page_csrf","url_params","view","table_filters","is_admin","service_acceptance"])):Js("v-if",!0),"periodicity_map"==l.active_tab&&"graph"==l.page?(Es(),js(c,{key:2,ref:"periodicity_map_graph",page_csrf:a.page_csrf,url_params:l.url_params,ifid:a.ifid,is_admin:a.is_admin,map_id:a.map_id,all_filter_list:a.periodicity_map_filter_list},null,8,["page_csrf","url_params","ifid","is_admin","map_id","all_filter_list"])):Js("v-if",!0),"periodicity_map"==l.active_tab&&"table"==l.page?(Es(),js(u,{key:3,ref:"periodicity_map_table",page_csrf:a.page_csrf,url_params:l.url_params,view:l.updated_view,table_filters:a.periodicity_table_filter_list,is_admin:a.is_admin},null,8,["page_csrf","url_params","view","table_filters","is_admin"])):Js("v-if",!0),a.asset_map_filter_list&&a.asset_table_filter_list?(Es(),Os($s,{key:4},["asset_map"==l.active_tab&&"graph"==l.page?(Es(),js(d,{key:0,ref:"asset_map_graph",page_csrf:a.page_csrf,url_params:l.url_params,ifid:a.ifid,is_admin:a.is_admin,map_id:a.map_id,all_filter_list:a.asset_map_filter_list},null,8,["page_csrf","url_params","ifid","is_admin","map_id","all_filter_list"])):Js("v-if",!0),"asset_map"==l.active_tab&&"table"==l.page?(Es(),js(p,{key:1,ref:"asset_map_table",page_csrf:a.page_csrf,url_params:l.url_params,view:l.updated_view,table_filters:a.asset_table_filter_list},null,8,["page_csrf","url_params","view","table_filters"])):Js("v-if",!0)],64)):Js("v-if",!0)],64)},wb.__file="http_src/vue/page-home-map.vue";const xb=["width","height"],kb=[Vs("defs",null,null,-1),Vs("g",{class:"nodes",style:{stroke:"#000",strokeOpacity:"0.5"}},null,-1),Vs("g",{class:"links",style:{stroke:"#000",strokeOpacity:"0.3",fill:"none"}},null,-1),Vs("g",{class:"texts"},null,-1)];var $b={__name:"page-sankey",props:{width:Number,height:Number},setup(e){const t=e,a=d3v7,n=fa(null),l=fa({});return ul((async()=>{})),dl((async()=>{!async function(){const e=a.scaleOrdinal(a.schemeCategory10);let s=await async function(){let e={nodes:[{index:0,name:"Liikevaihto",hours:"100%"},{index:1,name:"Kiinteät kulut",hours:"85%"},{index:2,name:"Muuttuvat kulut",hours:"3:00"},{index:3,name:"Palkkakulut",hours:"1:20"},{index:4,name:"Muut kiinte",hours:"1:40"},{index:5,name:"Kate",hours:"1:40"}],links:[{source:0,target:1,value:75,hours:"+1:00"},{source:0,target:2,value:10,hours:"+2:00"},{source:1,target:3,value:69,hours:"+1:20"},{source:1,target:4,value:6,hours:"+1:40"},{source:0,target:5,value:15,hours:"+1:40"}]};e=function(e){let t=[],a=[],n={};const l=(e,a,l)=>{if(null!=n[e])return;let s=t.length;n[e]=s;let i={index:s,name:e,href:a,color:l};t.push(i)},s=(e,t,l,s)=>{let i={source:n[e],target:n[t],value:l,label:s};a.push(i)};return e.forEach((e=>{l(e.source,e.source_link,e.source_color),l(e.target,e.target_link,e.target_color),s(e.source,e.target,e.value,e.link)})),{nodes:t,links:a}}([{link_color:"#e377c2",source_color:"#e377c2",source_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=IGMP",target:"224.0.0.251",source:"IGMP",link:"IGMP",target_link:"/lua/host_details.lua?host=224.0.0.251&vlan=0",target_node:"224.0.0.251",source_node:"192.168.1.7",value:60},{link_color:"#e377c2",source_link:"/lua/host_details.lua?host=192.168.1.7&vlan=0",target:"IGMP",source:"192.168.1.7",link:"IGMP",target_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=IGMP",target_node:"224.0.0.2",target_color:"#e377c2",source_node:"192.168.1.7",value:120},{link_color:"#e377c2",source_color:"#e377c2",source_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=IGMP",target:"224.0.0.2",source:"IGMP",link:"IGMP",target_link:"/lua/host_details.lua?host=224.0.0.2&vlan=0",target_node:"224.0.0.2",source_node:"192.168.1.7",value:60},{link_color:"#bcbd22",source_link:"/lua/host_details.lua?host=192.168.1.7&vlan=0",target:"MDNS",source:"192.168.1.7",link:"MDNS",target_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=MDNS",target_node:"224.0.0.251",target_color:"#bcbd22",source_node:"192.168.1.7",value:396},{link_color:"#bcbd22",source_color:"#bcbd22",source_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=MDNS",target:"224.0.0.251",source:"MDNS",link:"MDNS",target_link:"/lua/host_details.lua?host=224.0.0.251&vlan=0",target_node:"224.0.0.251",source_node:"192.168.1.7",value:396}]);return e}();const i=function(){let e=t.width;null==e&&(e=window.innerWidth-200);let a=t.height;null==a&&(a=window.innerHeight-50);return{width:e,height:a}}();l.value=i;const{links:o,nodes:r}=function(e,t,n){return a.sankey().nodeAlign(a.sankeyCenter).nodeWidth(10).nodePadding(10).extent([[0,5],[t,n]])(e)}(s,i.width-10,i.height-5);a.select(n.value).select("g.nodes").selectAll("rect").data(r).join((t=>{const n=t.append("rect");n.attr("x",(e=>e.x0)).attr("y",(e=>e.y0)),n.transition(a.easeLinear).delay(1e3).duration(500).attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("dataIndex",(e=>e.index)).attr("fill",(t=>e(t.index/r.length))),n.append("title").text((e=>`${e.name}\n${e.hours}`))}),(t=>t.transition(a.easeLinear).delay(500).duration(500).attr("x",(e=>e.x0)).attr("y",(e=>e.y0)).attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("dataIndex",(e=>e.index)).attr("fill",(t=>e(t.index/r.length))).select("title").text((e=>`${e.name}\n${e.hours}`))),(e=>e.transition(a.easeLinear).duration(500).style("opacity",0).remove())).on("dblclick",(function(e){})),a.select(n.value).select("g.texts").selectAll("text").data(r).join((t=>{t.append("text").transition(a.easeLinear).delay(1e3).duration(500).attr("x",(e=>e.x0<i.width/2?e.x1+6:e.x0-6)).attr("y",(e=>(e.y1+e.y0)/2)).attr("fill",(t=>a.rgb(e(t.index/r.length)).darker())).attr("alignment-baseline","middle").attr("text-anchor",(e=>e.x0<i.width/2?"start":"end")).attr("font-size",9).text((e=>e.name))}),(t=>t.transition(a.easeLinear).delay(500).duration(500).attr("x",(e=>e.x0<i.width/2?e.x1+6:e.x0-6)).attr("y",(e=>(e.y1+e.y0)/2)).attr("fill",(t=>a.rgb(e(t.index/r.length)).darker())).attr("text-anchor",(e=>e.x0<i.width/2?"start":"end")).attr("font-size",9).text((e=>e.name))),(e=>e.transition(a.easeLinear).duration(500).style("opacity",0).remove())),a.select(n.value).select("defs").selectAll("linearGradient").data(o).join((t=>{const a=t.append("linearGradient");a.attr("id",(e=>`gradient-${e.index}`)).attr("gradientUnits","userSpaceOnUse").attr("x1",(e=>e.source.x1)).attr("x2",(e=>e.target.x0)),a.append("stop").attr("offset","0").attr("stop-color",(t=>e(t.source.index/r.length))),a.append("stop").attr("offset","100%").attr("stop-color",(t=>e(t.target.index/r.length)))}),(t=>{t.attr("id",(e=>`gradient-${e.index}`)).attr("gradientUnits","userSpaceOnUse").attr("x1",(e=>e.source.x1)).attr("x2",(e=>e.target.x0)),t.selectAll("stop").remove(),t.append("stop").attr("offset","0").attr("stop-color",(t=>e(t.source.index/r.length))),t.append("stop").attr("offset","100%").attr("stop-color",(t=>e(t.target.index/r.length)))}),(e=>e.remove())),a.select(n.value).select("g.links").selectAll("path").data(o).join((e=>{const t=e.append("path");t.transition(a.easeLinear).delay(1e3).duration(500).attr("d",a.sankeyLinkHorizontal()).attr("stroke",(e=>`url(#gradient-${e.index}`)).attr("stroke-width",(e=>e.width)),t.append("title").text((e=>`${e.hours}`))}),(e=>e.transition(a.easeLinear).delay(500).duration(500).attr("d",a.sankeyLinkHorizontal()).attr("stroke",(e=>`url(#gradient-${e.index}`)).attr("stroke-width",(e=>e.width)).select("title").text((e=>`${e.hours}`))),(e=>e.transition(a.easeLinear).duration(500).style("opacity",0).remove()))}()})),(e,t)=>(Es(),Os("div",null,[(Es(),Os("svg",{ref_key:"sankey_chart_ref",ref:n,width:l.value.width,height:l.value.height,style:{margin:"10px"}},kb,8,xb))]))}};fp("\n.node rect {\n  fill-opacity: 0.9;\n  shape-rendering: crispEdges;\n}\n.node text {\n  pointer-events: none;\n  text-shadow: 0 1px 0 #fff;\n}\n.link {\n  fill: none;\n  stroke: #000;\n  stroke-opacity: 0.2;\n}\n.link:hover {\n  stroke-opacity: 0.5;\n}\n"),$b.__file="http_src/vue/page-sankey.vue";const Sb="change_applications_tab_event";var Cb={components:{chart:Ud,datatable:Tm,"modal-delete-confirm":sh,"tab-list":eh},props:{page_csrf:String,url_params:Object,view:String,is_ch_enabled:Boolean},created(){this.applications_tab=x.get_url_entry("view")||this.$props.view,this.tab_list.forEach((e=>{this.applications_tab==e.id?e.active=!0:e.active=!1})),function(e){const t=[];t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,n,l){e.reload_table()}});let a=url_params;a.view="applications";let n={table_buttons:t,data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/l7/data.lua`,a),enable_search:!0,table_config:{serverSide:!1,order:[[6,"desc"]],columnDefs:[{type:"time-uni",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3},{type:"file-size",targets:5}]}},l=[{columnName:i18n("host_details.application"),targets:0,width:"20",name:"application",data:"application",className:"text-nowrap",responsivePriority:1,render:t=>`<a href="${http_prefix}/lua/host_details.lua?host=${e.$props.url_params.host}@${e.$props.url_params.vlan}&ts_schema=host:ndpi&page=historical&protocol=${t.label}" target="_blank">${t.label}</a>`},{columnName:i18n("host_details.duration"),targets:1,width:"10",name:"duration",data:"duration",className:"text-nowrap",responsivePriority:1,render:e=>NtopUtils.secondsToTime(e)},{columnName:i18n("host_details.sent"),targets:2,width:"10",name:"sent",data:"bytes_sent",className:"text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.rcvd"),targets:3,width:"10",name:"rcvd",data:"bytes_rcvd",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.breakdown"),targets:4,width:"10",name:"breakdown",data:"breakdown",orderable:!1,className:"text-center text-nowrap",responsivePriority:2,render:(e,t,a)=>{const n=100*a.bytes_sent/a.tot_bytes,l=100*a.bytes_rcvd/a.tot_bytes;return NtopUtils.createBreakdown(n,l,i18n("host_details.sent"),i18n("host_details.rcvd"))}},{columnName:i18n("host_details.tot_bytes"),targets:5,width:"20",name:"tot_bytes",data:"tot_bytes",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.tot_percentage"),targets:6,width:"20",name:"percentage",data:"percentage",className:"text-center text-nowrap",responsivePriority:2,render:e=>{const t=e.toFixed(1);return NtopUtils.createProgressBar(t)}}];is_ch_enabled&&e.add_action_column(l,"l7proto","application");let s=ntopng_utility.clone(n);s.columns_config=l,e.config_devices_applications=s,a.view="categories",n.data_url=NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/l7/data.lua`,a),l=[{columnName:i18n("host_details.category"),targets:0,width:"20",name:"category",data:"category",className:"text-nowrap",responsivePriority:1,render:t=>`<a href="${http_prefix}/lua/host_details.lua?host=${e.$props.url_params.host}@${e.$props.url_params.vlan}&ts_schema=host:ndpi_categories&page=historical&category=${t.label}" target="_blank">${t.label}</a>`},{columnName:i18n("host_details.applications"),targets:0,width:"20",name:"applications",data:"applications",orderable:!1,className:"text-nowrap",responsivePriority:1,render:e=>`${e.label||""} <a href="${http_prefix}/${e.href}${e.category_id}">${e.more_protos||""}</a>`},{columnName:i18n("host_details.duration"),targets:0,width:"15",name:"duration",data:"duration",className:"text-nowrap",responsivePriority:1,render:e=>NtopUtils.secondsToTime(e)},{columnName:i18n("host_details.tot_bytes"),targets:0,width:"20",name:"tot_bytes",data:"tot_bytes",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.tot_percentage"),targets:0,width:"25",name:"percentage",data:"percentage",width:"20%",className:"text-center text-nowrap",responsivePriority:2,render:e=>{const t=e.toFixed(1);return NtopUtils.createProgressBar(t)}}],is_ch_enabled&&e.add_action_column(l,"l7cat","category");let i=ntopng_utility.clone(n);i.columns_config=l,i.table_config.order=[[4,"desc"]],i.table_config.columnDefs=[{type:"time-uni",targets:2},{type:"file-size",targets:3}],e.config_devices_categories=i}(this)},mounted(){C.on_custom_event("change_applications_tab_event",Sb,(e=>{let t=this.get_active_table();x.set_key_to_url("view",e.id),t.destroy_table(),this.applications_tab=e.id}))},data(){return{i18n:e=>i18n(e),applications_tab:null,config_devices_applications:null,config_devices_categories:null,chart_options:[{title:i18n("graphs.top_10_ndpi_protocols"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l7/proto_data.lua`,tab:"applications",id:"top_applications"},{title:i18n("graphs.top_breed"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l7/breed_data.lua`,tab:"applications",id:"top_breed"},{title:i18n("graphs.top_10_ndpi_categories"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l7/cat_data.lua`,tab:"categories",id:"top_categories"},{title:i18n("graphs.top_breed"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l7/breed_data.lua`,tab:"categories",id:"top_breed"}],tab_list:[{title:i18n("host_details.applications_tab"),active:"applications"==this.$props.view,id:"applications"},{title:i18n("host_details.categories_tab"),active:"categories"==this.$props.view,id:"categories"}]}},methods:{add_action_column:function(e,t,a){const n=`${this.$props.url_params.host}`,l=`${this.$props.url_params.vlan}`,s=`${this.$props.url_params.ifid}`;let i="page-stats-action-jump-historical";e.push({columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:i,render:(e,o,r)=>{const c={handlerId:i,onClick:()=>{let e=`${http_prefix}/lua/pro/db_search.lua?ifid=${s}&${t}=${r[a].id};eq&ip=${n};eq`;0!=l&&(e=`${e}&vlan_id=${l};eq`),window.open(e)}};return DataTableUtils.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:c}])}})},destroy:function(){this.get_active_table().destroy_table()},click_item:function(e){this.tab_list.forEach((e=>e.active=!1)),e.active=!0,C.emit_custom_event(Sb,e)},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},get_active_table:function(){return this.$refs[`table_host_${this.applications_tab}`]},get_f_get_custom_chart_options:()=>(console.log("get_f_"),async e=>charts_options_items.value[chart_index].chart_options)}};const Nb={class:"row"},Ab={class:"col-md-12 col-lg-12"},Tb={class:"card"},Eb=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Pb={class:"card-body"},Ib={id:"host_details_applications"},Mb={class:"row mb-4 mt-4",id:"host_details_applications"},Ub={class:"col-6"},Ob={key:0,class:"widget-name"};Cb.render=function(e,t,a,n,l,s){const i=xl("tab-list"),o=xl("chart"),r=xl("datatable");return Es(),Os("div",Nb,[Vs("div",Ab,[Vs("div",Tb,[Eb,Vs("div",Pb,[Vs("div",Ib,[qs(i,{ref:"host_details_applications_tab_list",id:"host_details_applications_tab_list",tab_list:l.tab_list,onClick_item:s.click_item},null,8,["tab_list","onClick_item"]),Vs("div",Mb,[(Es(!0),Os($s,null,Al(l.chart_options,(e=>(Es(),Os("div",Ub,[e.tab==l.applications_tab?(Es(),Os("h3",Ob,ee(e.title),1)):Js("v-if",!0),e.tab==l.applications_tab?(Es(),js(o,{key:1,id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!1},null,8,["id","chart_type","base_url_request"])):Js("v-if",!0)])))),256))]),"applications"==l.applications_tab?(Es(),js(r,{key:0,ref:"table_host_applications",table_buttons:l.config_devices_applications.table_buttons,columns_config:l.config_devices_applications.columns_config,data_url:l.config_devices_applications.data_url,enable_search:l.config_devices_applications.enable_search,table_config:l.config_devices_applications.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])):Js("v-if",!0),"categories"==l.applications_tab?(Es(),js(r,{key:1,ref:"table_host_categories",table_buttons:l.config_devices_categories.table_buttons,columns_config:l.config_devices_categories.columns_config,data_url:l.config_devices_categories.data_url,enable_search:l.config_devices_categories.enable_search,table_config:l.config_devices_categories.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])):Js("v-if",!0)])])])])])},Cb.__file="http_src/vue/page-host-details-applications.vue";const jb={class:"row"},Fb={class:"col-md-12 col-lg-12"},Db={class:"card"},Lb=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Rb={class:"card-body"},zb={id:"host_details_traffic"},Bb={class:"row mb-4 mt-4",id:"host_details_traffic"},Vb={class:"col-4"},qb={class:"widget-name"};var Hb={__name:"page-host-details-traffic",props:{page_csrf:String},setup(e){const t=fa(null);fa([]);const a=fa({}),n=()=>{t.value.reload()};ul((async()=>{!function(e){const t=[];let l={};l.host=x.get_url_entry("host"),l.vlan=x.get_url_entry("vlan"),l.ifid=x.get_url_entry("ifid"),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,a,l){n()}});let s={table_buttons:t,data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/l4/data.lua`,l),enable_search:!0,table_config:{serverSide:!1,order:[[6,"desc"]],columnDefs:[{type:"time-uni",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3},{type:"file-size",targets:5}]}},i=[{columnName:i18n("protocol"),targets:0,name:"protocol",data:"protocol",className:"text-nowrap",responsivePriority:1},{columnName:i18n("chart"),targets:1,name:"historical",data:"historical",className:"text-nowrap",responsivePriority:1},{columnName:i18n("traffic_labels.bytes_sent"),targets:2,name:"sent",data:"bytes_sent",className:"text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("traffic_labels.bytes_rcvd"),targets:3,name:"rcvd",data:"bytes_rcvd",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("traffic_labels.breakdown"),targets:4,name:"breakdown",data:"breakdown",orderable:!1,className:"text-center text-nowrap",responsivePriority:2,render:(e,t,a)=>{const n=100*a.bytes_sent/a.total_bytes,l=100*a.bytes_rcvd/a.total_bytes;return NtopUtils.createBreakdown(n,l,i18n("host_details.sent"),i18n("host_details.rcvd"))}},{columnName:i18n("traffic_labels.total_bytes"),targets:5,name:"tot_bytes",data:"total_bytes",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("traffic_labels.total_percentage"),targets:6,width:"20%",name:"percentage",data:"total_percentage",className:"text-center text-nowrap",responsivePriority:2,render:e=>{const t=e.toFixed(1);return NtopUtils.createProgressBar(t)}}],o=ntopng_utility.clone(s);o.columns_config=i,a.value=o}()})),ml((async()=>{t.value.destroy_table()}));const l=[{title:i18n("graphs.l4_proto"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l4/proto_data.lua`,id:"traffic_protos"},{title:i18n("graphs.contacted_hosts"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l4/contacted_hosts_data.lua`,id:"contacted_hosts"},{title:i18n("graphs.traffic"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l4/traffic_data.lua`,id:"traffic"}];return(e,n)=>(Es(),Os("div",jb,[Vs("div",Fb,[Vs("div",Db,[Lb,Vs("div",Rb,[Vs("div",zb,[Vs("div",Bb,[(Es(),Os($s,null,Al(l,(e=>Vs("div",Vb,[Vs("h3",qb,ee(e.title),1),qs(Ud,{id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!1},null,8,["id","chart_type","base_url_request"])]))),64))]),qs(Tm,{ref_key:"traffic_table",ref:t,table_buttons:a.value.table_buttons,columns_config:a.value.columns_config,data_url:a.value.data_url,enable_search:a.value.enable_search,table_config:a.value.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])])])])]))},__file:"http_src/vue/page-host-details-traffic.vue"};const Gb={class:"row"},Wb={class:"col-md-12 col-lg-12"},Kb={class:"card"},Jb=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Yb={class:"card-body"},Zb={class:"row"},Xb={class:"col-6 mb-4 mt-4"},Qb={class:"widget-name"};var ey={__name:"page-host-details-packets",props:{page_csrf:String,url_params:Object},setup(e){const t=[{title:i18n("graphs.packets_sent"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/packets/sent_data.lua`,id:"packets_sent"},{title:i18n("graphs.packets_rcvd"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/packets/rcvd_data.lua`,id:"packets_rcvd"},{title:i18n("graphs.tcp_flags"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/packets/tcp_flags_data.lua`,id:"tcp_flags"},{title:i18n("graphs.arp_distribution"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/packets/arp_data.lua`,id:"arp_requests"}];function n(e,t,n){a.hideOverlays()}return dl((()=>{})),(e,a)=>(Es(),Os("div",Gb,[Vs("div",Wb,[Vs("div",Kb,[Jb,Vs("div",Yb,[Vs("div",Zb,[(Es(),Os($s,null,Al(t,(e=>Vs("div",Xb,[Vs("h3",Qb,ee(e.title),1),qs(Ud,{id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!1,onChart_reloaded:n},null,8,["id","chart_type","base_url_request"])]))),64))])])])])]))},__file:"http_src/vue/page-host-details-packets.vue"};const ty=[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])],-1)];var ay={__name:"loading",props:{},setup(e,{expose:t}){const a=fa(null);return t({hide_loading:function(e=500){$(a.value).fadeOut(e)},show_loading:function(e=500){$(a.value).fadeIn(e)}}),(e,t)=>(Es(),Os("div",{ref_key:"overlay",ref:a,class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},ty,512))},__file:"http_src/vue/loading.vue"};const ny={key:0,class:"alert alert-info",id:"empty-message"},ly=["width","height"],sy=[Vs("g",{class:"nodes",style:{stroke:"#000",strokeOpacity:"0.5"}},null,-1),Vs("g",{class:"links",style:{stroke:"#000",strokeOpacity:"0.3",fill:"none"}},null,-1)];var iy={__name:"sankey_3",props:{no_data_message:String,width:Number,height:Number,sankey_data:Object},emits:["node_click","update_width","update_height"],setup(e,{expose:t,emit:a}){const n=e,l=d3v7,s=10,i=fa(!1),o=fa(null),r=fa({});function c(e){e&&($(".nodes",o.value).empty(),$(".links",o.value).empty()),null!=n.sankey_data.nodes&&null!=n.sankey_data.links&&0!=n.sankey_data.length&&0!=n.sankey_data.links.length&&p()}ul((async()=>{})),dl((async()=>{c(),window.addEventListener("resize",(()=>c(!0)))})),On((()=>n.sankey_data),((e,t)=>{c(!0)}));let u=null,d=null;async function p(){const e=l.scaleOrdinal(l.schemeCategory10);let t=n.sankey_data;const i=function(){a("update_width");let e=n.width;null==e&&(e=$(o.value).parent().parent().width()-10);a("update_height");let t=n.height;null==t&&(t=$(o.value).parent().parent().height()-80);return{width:e,height:t}}();var c,p;r.value=i,c=i.width-10,p=i.height-5,u=l.sankey().nodeAlign(l.sankeyCenter).nodeWidth(10).nodePadding(s).extent([[0,5],[c,p]]),d=u(t);const{links:h,nodes:v}=d;let g=l.select(o.value).select("g.nodes").selectAll("g").data(v).join((e=>e.append("g"))).attr("transform",(e=>`translate(${e.x0}, ${e.y0})`));l.zoom().scaleExtent([1,40]).on("zoom",m),g.append("rect").attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("dataIndex",(e=>e.index)).attr("fill",(t=>e(t.index/v.length))).attr("class","sankey-node").attr("style","cursor:move;"),l.selectAll("rect").append("title").text((e=>`${e.label}`)),g.data(v).append("text").attr("class","label").style("pointer-events","auto").attr("style","cursor:pointer;").style("fill-opacity",(function(e){return 1})).attr("fill",(e=>"#000")).attr("x",(e=>e.x0<i.width/2?e.x1-e.x0+6:-6)).attr("y",(e=>(e.y1-e.y0)/2)).attr("alignment-baseline","middle").attr("text-anchor",(e=>e.x0<i.width/2?"start":"end")).attr("font-size",12).text((e=>e.label)).on("click",(function(e,t){a("node_click",t.data)})),g.call(l.drag().subject((e=>e)).on("start",_).on("drag",f));const b=l.select(o.value).select("g.links").selectAll("g").data(h).join((e=>e.append("g")));let y=b.append("linearGradient");y.attr("id",(e=>`gradient-${e.index}`)).attr("gradientUnits","userSpaceOnUse").attr("x1",(e=>e.source.x1)).attr("x2",(e=>e.target.x0)),y.append("stop").attr("offset","0").attr("stop-color",(t=>e(t.source.index/v.length))),y.append("stop").attr("offset","100%").attr("stop-color",(t=>e(t.target.index/v.length))),b.append("path").style("pointer-events","none").attr("class","sankey-link").attr("d",l.sankeyLinkHorizontal()).attr("stroke-width",(e=>Math.max(1,e.width))).attr("stroke",(e=>`url(#gradient-${e.index}`)),b.append("title").text((e=>`${e.label}`))}function _(e,t){t.__x=e.x,t.__y=e.y,t.__x0=t.x0,t.__y0=t.y0,t.__x1=t.x1,t.__y1=t.y1}function f(e,t){l.select(this).attr("transform",(function(t){const a=e.x-t.__x,n=e.y-t.__y,i=r.value.width,o=r.value.width;return t.x0=t.__x0+a,t.x1=t.__x1+a,t.y0=t.__y0+n,t.y1=t.__y1+n,t.x0<0&&(t.x0=0,t.x1=s),t.x1>i&&(t.x0=i-s,t.x1=i),t.y0<0&&(t.y0=0,t.y1=t.__y1-t.__y0),t.y1>o&&(t.y0=o-(t.__y1-t.__y0),t.y1=o),u.update(d),l.selectAll(".sankey-link").attr("d",l.sankeyLinkHorizontal()),`translate(${t.x0}, ${t.y0})`}))}function m({transform:e}){g.attr("transform",e)}const h=e=>i18n(e);return t({draw_sankey:p,set_no_data_flag:function(e){i.value=e}}),(t,a)=>(Es(),Os($s,null,[i.value?(Es(),Os("div",ny,ee(e.no_data_message||h("flows_page.no_data")),1)):Js("v-if",!0),Vs("div",null,[(Es(),Os("svg",{ref_key:"sankey_chart_ref",ref:o,width:r.value.width,height:r.value.height,style:{margin:"10px"}},sy,8,ly))])],64))}};fp("\n/* .node rect { */\n/*   fill-opacity: 0.9; */\n/*   shape-rendering: crispEdges; */\n/* } */\n\n/* .node text { */\n/*   pointer-events: none; */\n/*   text-shadow: 0 1px 0 #fff; */\n/* } */\n\n/* path.link.link2 { */\n/*     all: initial; */\n/*     fill: unset; */\n/*     stroke: unset; */\n/*     stroke-opacity: unset; */\n/*     stroke-width: unset; */\n/* } */\n\n/* .link:hover { */\n/*   stroke-opacity: 0.5; */\n/* } */\n"),iy.__file="http_src/vue/sankey_3.vue";let oy=d3v7;const ry={align:"justify",nodeId:e=>e.id,nodeTitle:e=>`${e.id}`,nodeGroup:e=>e.id.split(/\W/)[0],nodeAlign:oy.sankeyJustify,nodeWidth:15,nodePadding:10,nodeLabel:e=>e.id,nodeLabelPadding:6,nodeStroke:"currentColor",linkSource:({source:e})=>e,linkTarget:({target:e})=>e,linkSourceNode:({source_node:e})=>e,linkTargetNode:({target_node:e})=>e,linkPath:oy.sankeyLinkHorizontal(),linkValue:({value:e})=>e,linkLink:({link:e})=>e,linkTitle:e=>`${e.source_node} → ${e.target_node} : ${e.link}\n${e.value}`,linkColor:({link_color:e})=>e,sourceColor:({source_color:e})=>e||"",targetColor:({target_color:e})=>e||"",sourceLink:({source_link:e})=>e||"",targetLink:({target_link:e})=>e||"",linkStrokeOpacity:.5,linkMixBlendMode:"multiply",colors:oy.schemeTableau10,width:1200,height:600,marginTop:5,marginRight:1,marginBottom:5,marginLeft:1},cy=e=>`${i18n("flow")}: ${e.source_node} → ${e.target_node}\n${i18n("protocol")}: ${e.link}\n${i18n("traffic")}: ${a.bytesToSize(e.value)}`,uy={formatFlowTitle:cy,get_data:async function(){return{}},getDefaultSankeySettings:function(){return ry}},dy={class:"row"},py={class:"col-md-12 col-lg-12"},_y={class:"card card-shadow"},fy={class:"card-body"},my={class:"align-items-center justify-content-end mb-3",style:{height:"70vh"}},hy={class:"d-flex align-items-center mb-2"},vy={class:"d-flex no-wrap ms-auto"},gy={class:"m-1"},by={style:{"min-width":"16rem"}},yy={class:"my-auto me-1"},wy=Vs("label",{class:"my-auto me-1"},null,-1),xy=[Vs("span",null,[Vs("i",{class:"fas fa-sync"})],-1)];var ky={__name:"page-host-details-flow-sankey",props:{is_local:Boolean},setup(e){const t=e,a=e=>i18n(e),n=`${http_prefix}/lua/pro/rest/v2/get/host/flows/data.lua`,l=fa(null),s=fa(null),i=[{filter_name:"hosts_type",key:3,id:"local_origin_remote_target",title:a("flows_page.local_cli_remote_srv"),label:a("flows_page.local_cli_remote_srv"),filter_icon:!1,countable:!1},{filter_name:"hosts_type",key:4,id:"remote_origin_local_target",title:a("flows_page.local_srv_remote_cli"),label:a("flows_page.local_srv_remote_cli"),filter_icon:!1,countable:!1},{filter_name:"hosts_type",key:5,id:"all_hosts",title:a("flows_page.all_flows"),label:a("flows_page.all_flows"),filter_icon:!1,countable:!1}];t.is_local?i.unshift({filter_name:"hosts_type",key:1,id:"local_only",title:a("flows_page.local_only"),label:a("flows_page.local_only"),filter_icon:!1,countable:!1}):i.unshift({filter_name:"hosts_type",key:2,id:"remote_only",title:a("flows_page.remote_only"),label:a("flows_page.remote_only"),filter_icon:!1,countable:!1});const o=fa(i[0]),r=fa({});function c(e){if(1==e.is_link_node)return;let t={host:e.info.ip,vlan:e.info.vlan},a=x.obj_to_url_params(t);const n=`${http_prefix}/lua/host_details.lua?${a}`;x.go_to_url(n)}ul((()=>{})),dl((()=>{u()}));const u=function(){let e=o.value;x.set_key_to_url(e.filter_name,e.id),async function(){s.value.show_loading();let e=await async function(){const e=function(){let e={host:x.get_url_entry("host"),vlan:x.get_url_entry("vlan"),ifid:x.get_url_entry("ifid"),hosts_type:x.get_url_entry("hosts_type")},t=x.obj_to_url_params(e),a=`${n}?${t}`;return a}();let t=await b.http_request(e);t=function(e){let t=e=>console.error(`link (source: ${e.source_node_id}, target: ${e.target_node_id}) removed for not existing source/target node`),a=function(e,t){let a={};e.nodes.forEach((e=>a[e.node_id]=!0));let n=e=>null!=a[e.source_node_id]&&null!=a[e.target_node_id],l=function(e,t,a){return e.filter((e=>{const n=t(e);return 0==n&&null!=a&&a(e),n}))}(e.links,n,t);return l}(e,t);return{nodes:e.nodes,links:a}}(t);let a=x.get_url_entry("host"),s=function(e,t){if(0==e.nodes.length&&0==e.links.length)return e;let a={};e.nodes.forEach((e=>a[e.node_id]=e));const n=e=>{if(e.source_node_id==t)return-1;if(e.target_node_id==t)return 1;throw`Wrong direction link ${e.source_node_id} -> ${e.target_node_id}`},l=(e,a)=>e==t?e:`${a}_${e}`;let s={},i={nodes:[],links:[]};e.links.forEach((e=>{let t,o=n(e),r={source_node_id:l(e.source_node_id,o),target_node_id:l(e.target_node_id,o),label:e.label,value:e.value,data:e};if(-1==o){let n=a[e.target_node_id];t={node_id:r.target_node_id,label:n.label,data:n}}else{let n=a[e.source_node_id];t={node_id:r.source_node_id,label:n.label,data:n}}i.links.push(r),null==s[t.node_id]&&(s[t.node_id]=!0,i.nodes.push(t))}));let o=a[t];i.nodes.push({node_id:o.node_id,label:o.label,data:o}),i.nodes.forEach((e=>a[e.node_id]=e));const r=e=>`${n(e)}_${e.label}`;let c={};i.links.forEach((e=>{let t=r(e),n=c[t];null==n&&(n={id:t,label:e.label,data:{...e,is_link_node:!0},node_links:[]},c[t]=n),n.node_links.push({source:a[e.source_node_id],target:a[e.target_node_id],value:p(e)})}));let u=i.nodes.map((e=>e)),d=[];for(let e in c){let t=c[e],a={node_id:t.id,label:t.label,data:t.data};u.push(a),t.node_links.forEach((e=>{d.push({source_node_id:e.source.node_id,target_node_id:a.node_id,label:`${e.source.label} - ${e.target.label}: ${a.label}`,value:e.value,data:e}),d.push({source_node_id:a.node_id,target_node_id:e.target.node_id,label:`${e.source.label} - ${e.target.label}: ${a.label}`,value:e.value,data:e})}))}let _={},f=[];u.map(((e,t)=>{let a={index:t,node_id:e.node_id,label:e.label,data:e.data};_[e.node_id]=a,f.push(a)}));let m=d.map((e=>{let t=_[e.source_node_id],a=_[e.target_node_id];return{source:t.index,target:a.index,source_node_id:t.index,target_node_id:a.index,value:e.value,label:e.label}}));return{nodes:f,links:m}}(t,a);return s.links.length>0&&s.nodes.length>0?l.value.set_no_data_flag(!1):l.value.set_no_data_flag(!0),s}();r.value=e,s.value.hide_loading()}()},d=function(){u()};function p(e){return e.data?.info?.traffic}return(e,t)=>(Es(),Os("div",dy,[Vs("div",py,[Vs("div",_y,[qs(ay,{ref_key:"loading",ref:s},null,512),Vs("div",fy,[Vs("div",my,[Vs("div",hy,[Vs("div",vy,[Vs("div",gy,[Vs("div",by,[Vs("label",yy,ee(a("hosts"))+": ",1),qs(Ld,{selected_option:o.value,"onUpdate:selected_option":t[0]||(t[0]=e=>o.value=e),options:i,onSelect_option:u},null,8,["selected_option"])])]),Vs("div",null,[wy,Vs("div",null,[Vs("button",{class:"btn btn-link m-1",tabindex:"0",type:"button",onClick:d},xy)])])])]),qs(iy,{ref_key:"sankey_chart",ref:l,onNode_click:c,sankey_data:r.value},null,8,["sankey_data"])])])])])]))},__file:"http_src/vue/page-host-details-flow-sankey.vue"};const $y={id:"script-description",class:"notes bg-light border",role:"alert"};var Sy={__name:"note-list",props:{note_list:Array},setup(e){const t=e,a=e=>i18n(e);return(e,n)=>(Es(),Os("div",$y,[Vs("b",null,ee(a("notes")),1),Vs("ul",null,[(Es(!0),Os($s,null,Al(t.note_list,(e=>(Es(),Os("li",null,ee(e),1)))),256))])]))},__file:"http_src/vue/note-list.vue"};const Cy={class:"form-group ms-2 me-2 mt-3 row"},Ny={class:"col-form-label col-sm-2"},Ay={class:"col-sm-10"},Ty={class:"btn-group btn-group-toggle","data-bs-toggle":"buttons"},Ey={key:0,class:"form-group ms-2 me-2 mt-3 row"},Py={class:"col-form-label col-sm-2"},Iy={class:"col-sm-10"},My=["placeholder"],Uy={key:1,class:"form-group ms-2 me-2 mt-3 row"},Oy={class:"col-form-label col-sm-2"},jy={class:"col-10"},Fy={key:2,class:"form-group ms-2 me-2 mt-3 row"},Dy={class:"col-form-label col-sm-2"},Ly={key:0,class:"col-10"},Ry={key:1,class:"col-10"},zy={key:3,class:"form-group ms-2 me-2 mt-3 row"},By={class:"col-form-label col-sm-2"},Vy={class:"col-10"},qy={class:"form-group ms-2 me-2 mt-3 row",style:{"margin-top":"3px"}},Hy={class:"col-form-label col-sm-2"},Gy={class:"col-sm-3"},Wy={class:"btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},Ky=["value","id"],Jy=["id","for"],Yy=["value","id"],Zy=["id","for"],Xy=["value","id"],Qy=["id","for"],ew={class:"col-sm-2 btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},tw=["value","id"],aw=["id","for"],nw={key:4,class:"message alert alert-warning mt-3"},lw=["disabled"],sw=["disabled"];var iw={__name:"modal-add-host-rules",props:{metric_list:Array,ifid_list:Array,interface_metric_list:Array,frequency_list:Array,init_func:Function},emits:["add","edit"],setup(e,{expose:t,emit:a}){const n=e;fa(""),fa("");const l=fa(null),s=i18n("if_stats_config.add_host_rules_title"),i=i18n("if_stats_config.host_placeholder"),o=fa(!1),r=e=>i18n(e),c=fa([]),u=fa(null),d=fa(null),p=fa([]),_=fa([]),f=fa([]),m=fa(null),h=fa(null),v=fa({}),g=fa({}),b=fa({}),y=fa({}),w=fa(!0),x=fa({}),k=fa(!0),$=fa("hosts"),S=fa(!1),C=[r("if_stats_config.note_1"),r("if_stats_config.note_2"),r("if_stats_config.note_3"),r("if_stats_config.note_4"),r("if_stats_config.note_5")],N=fa([{title:r("volume"),label:r("volume"),id:"volume",active:!0},{title:r("throughput"),label:r("throughput"),id:"throughput",active:!1},{title:r("percentage"),label:r("percentage"),id:"percentage",acrive:!1}]),A=fa([{title:r("kb"),label:r("kb"),id:"kb",value:1024,active:!1},{title:r("mb"),label:r("mb"),id:"mb",value:1048576,active:!1},{title:r("gb"),label:r("gb"),id:"gb",value:1073741824,active:!0,default_active:!0}]),T=fa([{title:r("kbps"),label:r("kbps"),id:"kbps",value:1e3,active:!1},{title:r("mbps"),label:r("mbps"),id:"mbps",value:1e6,active:!1},{title:r("gbps"),label:r("gbps"),id:"gbps",value:1e9,active:!0,default_active:!0}]),E=fa([{title:"+",label:">",id:"plus",value:1,active:!1},{title:"-",label:"<",id:"minus",value:-1,active:!0,default_active:!0}]),P=[{title:"+",label:"%",id:"plus",value:1,active:!0}],I=fa(null),M=fa(null);function U(e){e.forEach((e=>e.active=1==e.default_active))}const O=e=>{$.value=e},j=()=>{let e=new RegExp($f.get_data_pattern("ip"));w.value=!(e.test(I.value)||"*"===I.value)},F=e=>{const t=e.target.id;E.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1}))},D=e=>{const t=e.target.id;"throughput"==x.value.id?T.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):"volume"==x.value.id?A.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):"percentage"==x.value.id&&P.forEach((e=>{e.id===t?e.active=!0:e.active=!1}))},L=e=>{let t="";"Host"==$.value&&(t=I.value);const n=g.value.id,l=v.value.id,s="Host"==$.value?v.value.label:y.value.label,i=y.value.id,o=$.value,r=b.value.id,c=b.value.label;let u,d,p,_,f=x.value.id,m="Host"==$.value?v.value.extra_metric?v.value.extra_metric:null:y.value.extra_metric?y.value.extra_metric:null;!1===k.value&&(f="",m="",p=M.value.value),"throughput"==f?(E.value.forEach((e=>{e.active&&(d=e.value)})),_=parseInt(d),T.value.forEach((e=>{e.active&&(u=e.value)})),p=u*parseInt(M.value.value)/8):"volume"==f?(E.value.forEach((e=>{e.active&&(d=e.value)})),_=parseInt(d),A.value.forEach((e=>{e.active&&(u=e.value)})),p=u*parseInt(M.value.value)):"percentage"==f?(E.value.forEach((e=>{e.active&&(d=e.value)})),_=parseInt(d),p=_*parseInt(M.value.value)):_=1;let h="add";1==e&&(h="edit"),"Host"==$.value?a(h,{host:t,frequency:n,metric:l,metric_label:s,threshold:p,metric_type:f,extra_metric:m,rule_type:o,rule_threshold_sign:_}):a(h,{frequency:n,metric:i,metric_label:s,threshold:p,metric_type:f,extra_metric:m,rule_type:o,interface:r,ifname:c,rule_threshold_sign:_}),z()},R=()=>{L(!0)},z=()=>{l.value.close()};return ul((()=>{N.value.forEach((e=>{e.active&&(x.value=e)}))})),t({show:e=>{I.value="",b.value=p.value[0],v.value=c.value[0],y.value=_.value[0],g.value=f.value[0],x.value=N.value[0],N.value.forEach((e=>e.active=!1)),N.value[0].active=!0,U(A.value),U(T.value),U(E.value),$.value="Host",w.value=!0,M.value.value=1,null!=e&&(e=>{null!=e&&(S.value=!0,w.value=!1,E.value.forEach((t=>{t.active=t.value==e.threshold_sign})),N.value.forEach((t=>{t.id==e.metric_type?(t.active=!0,x.value=t):t.active=!1})),"volume"==e.metric_type?A.value.forEach((t=>{if(e.threshold%t.value==0){let a=e.threshold/t.value;a<1024?(t.active=!0,M.value.value=0==a?1:a):t.active=!1}else t.active=!1})):"throughput"==e.metric_type?(e.threshold=8*e.threshold,T.value.forEach((t=>{if(e.threshold%t.value==0){let a=e.threshold/t.value;a<1e3?(t.active=!0,M.value.value=0==a?1:a):t.active=!1}else t.active=!1}))):M.value.value=e.threshold,$.value=e.rule_type,"interface"==$.value?(p.value.forEach((t=>{t.id==e.target&&(b.value=t)})),null!=e.extra_metric?_.value.forEach((t=>{t.id==e.metric&&t.extra_metric==e.extra_metric&&(y.value=t)})):_.value.forEach((t=>{t.id==e.metric&&(y.value=t)}))):(I.value=e.target,null!=e.extra_metric?c.value.forEach((t=>{t.id==e.metric&&t.extra_metric==e.extra_metric&&(v.value=t)})):c.value.forEach((t=>{t.id==e.metric&&(v.value=t)}))))})(e),l.value.show()},close:z,metricsLoaded:(e,t,a,l,s)=>{o.value=!0,c.value=e,_.value=a,p.value=function(e){let t=[];return e.forEach((e=>{let a={id:e.ifid,label:e.name};t.push(a)})),t}(t),f.value=n.frequency_list,g.value=f.value[0],v.value=c.value[0],b.value=p.value[0],l&&(u.value=l),s&&(d.value=s)}}),(e,t)=>(Es(),js(mp,{onShowed:t[10]||(t[10]=e=>{}),ref_key:"modal_id",ref:l},{title:hn((()=>[Ws(ee(ba(s)),1)])),body:hn((()=>[Js(" Target information, here an IP is put "),Vs("div",Cy,[Vs("label",Ny,[Vs("b",null,ee(r("if_stats_config.add_rules_type")),1)]),Vs("div",Ay,[Vs("div",Ty,[Vs("label",{class:W(["btn",["Host"==$.value?"btn-primary active":"btn-secondary"]])},[Vs("input",{class:"btn-check",type:"radio",name:"rule_type",value:"hosts",onClick:t[0]||(t[0]=e=>O("Host"))}),Ws(" "+ee(r("if_stats_config.add_rules_type_host")),1)],2),Vs("label",{class:W(["btn",["interface"==$.value?"btn-primary active":"btn-secondary"]])},[Vs("input",{onClick:t[1]||(t[1]=e=>O("interface")),class:"btn-check",type:"radio",name:"rule_type",value:"interface"}),Ws(" "+ee(r("if_stats_config.add_rules_type_interface")),1)],2)])])]),"Host"==$.value?(Es(),Os("div",Ey,[Vs("label",Py,[Vs("b",null,ee(r("if_stats_config.target")),1)]),Vs("div",Iy,[yl(Vs("input",{"onUpdate:modelValue":t[2]||(t[2]=e=>I.value=e),onInput:j,class:"form-control",type:"text",placeholder:ba(i),required:""},null,40,My),[[Uo,I.value]])])])):Js("v-if",!0),"interface"==$.value?(Es(),Os("div",Uy,[Vs("label",Oy,[Vs("b",null,ee(r("if_stats_config.target_interface")),1)]),Vs("div",jy,[qs(Ld,{selected_option:b.value,"onUpdate:selected_option":t[3]||(t[3]=e=>b.value=e),options:p.value},null,8,["selected_option","options"])])])):Js("v-if",!0),Js(" Metric information, here a metric is selected (e.g. DNS traffic) "),o.value?(Es(),Os("div",Fy,[Vs("label",Dy,[Vs("b",null,ee(r("if_stats_config.metric")),1)]),"Host"==$.value?(Es(),Os("div",Ly,[qs(Ld,{selected_option:v.value,"onUpdate:selected_option":t[4]||(t[4]=e=>v.value=e),onSelect_option:t[5]||(t[5]=e=>{1==v.value.show_volume?k.value=!0:k.value=!1}),options:c.value},null,8,["selected_option","options"])])):(Es(),Os("div",Ry,[qs(Ld,{selected_option:y.value,"onUpdate:selected_option":t[6]||(t[6]=e=>y.value=e),onSelect_option:t[7]||(t[7]=e=>{1==y.value.show_volume?k.value=!0:k.value=!1}),options:_.value},null,8,["selected_option","options"])]))])):Js("v-if",!0),Js(" Frequency information, a frequency of 1 day, 5 minute or 1 hour for example "),o.value?(Es(),Os("div",zy,[Vs("label",By,[Vs("b",null,ee(r("if_stats_config.frequency")),1)]),Vs("div",Vy,[qs(Ld,{selected_option:g.value,"onUpdate:selected_option":t[8]||(t[8]=e=>g.value=e),options:f.value},null,8,["selected_option","options"])])])):Js("v-if",!0),Js(" Threshold information, maximum amount of bytes "),Vs("div",qy,[Vs("label",Hy,[Vs("b",null,ee(r("if_stats_config.threshold")),1)]),k.value?(Es(),Os($s,{key:0},[Vs("div",Gy,[qs(Ld,{selected_option:x.value,"onUpdate:selected_option":t[9]||(t[9]=e=>x.value=e),options:N.value},null,8,["selected_option","options"])]),Vs("div",{class:W(["col-3",["throughput"==x.value.id?"p-0":""]])},[Vs("div",Wy,["throughput"==x.value.id?(Es(!0),Os($s,{key:0},Al(T.value,(e=>(Es(),Os($s,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:m,name:"threshold_measure"},null,8,Ky),Vs("label",{class:W(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:D,for:e.id},ee(e.label),11,Jy)],64)))),256)):Js("v-if",!0),"percentage"==x.value.id?(Es(),Os($s,{key:1},Al(P,(e=>(Es(),Os($s,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:m,name:"threshold_measure"},null,8,Yy),Vs("label",{class:W(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:D,for:e.id},ee(e.label),11,Zy)],64)))),64)):Js("v-if",!0),"volume"==x.value.id?(Es(!0),Os($s,{key:2},Al(A.value,(e=>(Es(),Os($s,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:m,name:"threshold_measure"},null,8,Xy),Vs("label",{class:W(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:D,for:e.id},ee(e.label),11,Qy)],64)))),256)):Js("v-if",!0)])],2),Vs("div",ew,[(Es(!0),Os($s,null,Al(E.value,(e=>(Es(),Os($s,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_sign",ref:h,name:"threshold_sign"},null,8,tw),Vs("label",{class:W(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:F,for:e.id},ee(e.label),11,aw)],64)))),256))])],64)):Js("v-if",!0),Vs("div",{class:W([k.value?"col-sm-2":"col-sm-8"])},["percentage"==x.value.id?(Es(),Os("input",{key:0,value:"1",ref_key:"threshold",ref:M,type:"number",name:"threshold",class:"form-control",max:"100",min:"1",required:""},null,512)):(Es(),Os("input",{key:1,value:"1",ref_key:"threshold",ref:M,type:"number",name:"threshold",class:"form-control",max:"1023",min:"1",required:""},null,512))],2)]),"percentage"==x.value.id?(Es(),Os("div",nw,ee(r("show_alerts.host_rules_percentage")),1)):Js("v-if",!0)])),footer:hn((()=>[qs(Sy,{note_list:C}),0==S.value?(Es(),Os("button",{key:0,type:"button",onClick:L,class:"btn btn-primary",disabled:w.value&&"Host"==$.value},ee(r("add")),9,lw)):(Es(),Os("button",{key:1,type:"button",onClick:R,class:"btn btn-primary",disabled:w.value&&"Host"==$.value},ee(r("apply")),9,sw))])),_:1},512))},__file:"http_src/vue/modal-add-host-rules.vue"};const ow={class:"row"},rw={class:"col-md-12 col-lg-12"},cw={class:"card"},uw=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),dw={class:"card-body"},pw={class:"mb-4"},_w={id:"host_rules"},fw={class:"card-footer"};var mw={__name:"page-host-rules",props:{page_csrf:String,ifid:String},setup(e){const t=e,n=fa(null),l=fa(null),s=fa(null),i=e=>i18n(e),o=fa({}),r=fa({}),c=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua`,u=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?is_ifname=true`,d=`${http_prefix}/lua/rest/v2/get/ntopng/interfaces.lua`,p=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_data.lua`,_=`${http_prefix}/lua/pro/rest/v2/add/interface/host_rules/add_host_rule.lua`,f=`${http_prefix}/lua/pro/rest/v2/delete/interface/host_rules/delete_host_rule.lua`,m=[i("if_stats_config.generic_notes_1"),i("if_stats_config.generic_notes_2"),i("if_stats_config.generic_notes_3")],h={ifid:t.ifid,csrf:t.page_csrf};let v={},g=i("if_stats_config.delete_host_rules_title");i("if_stats_config.edit_local_network_rules");let b=i("if_stats_config.delete_host_rules_description"),y=[],w=[],x=[];const k=[{title:i18n("show_alerts.5_min"),label:i18n("show_alerts.5_min"),id:"5min"},{title:i18n("show_alerts.hourly"),label:i18n("show_alerts.hourly"),id:"hour"},{title:i18n("show_alerts.daily"),label:i18n("show_alerts.daily"),id:"day"}];async function S(e){await A(),await T(e)}const C=function(){const e=r.value;return r.value=null,e},N=function(){n.value.reload()},A=async function(){const e=o.value,t=a.buildURL(f,{...h,rule_id:e.id,rule_type:e.rule_type});await $.post(t,(function(e,t){N()}))},T=async function(e){const t=a.buildURL(_,{...h,...e});await $.post(t,(function(e,t){N()}))},E=function(e){let t={handlerId:"delete_host",onClick:()=>{var t;t=e,o.value=t,l.value.show()}},a={handlerId:"edit_rule",onClick:()=>{var t;t=e,r.value=t,o.value=t,s.value.show(t)}};return DataTableUtils.createActionButtons([{class:"btn-secondary",handler:a,icon:"fa-edit",title:i18n("edit"),class:"pointer"},{class:"btn-danger",handler:t,icon:"fa-trash",title:i18n("delete"),class:"pointer"}])},P=function(){const e=[];e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(){N()}},{text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){s.value.show()}});const t=[{columnName:i("id"),visible:!1,targets:0,name:"id",data:"id",className:"text-nowrap",responsivePriority:1},{columnName:i("if_stats_config.target"),targets:1,width:"20",name:"target",data:"target",className:"text-nowrap",responsivePriority:1,render:function(e,t,a){return function(e,t){let a="";return a=t.rule_type&&"interface"==t.rule_type?t.selected_iface:t.target,a}(0,a)}},{columnName:i("if_stats_config.rule_type"),targets:2,width:"20",name:"rule_type",data:"rule_type",className:"text-center",responsivePriority:1,render:function(e,t,a){return function(e,t){let a="";return a=t.rule_type&&"interface"==t.rule_type?"<span class='badge bg-secondary'>Interface <i class='fas fa-ethernet'></i></span>":"<span class='badge bg-secondary'>Host <i class='fas fa-laptop'></i></span>",a}(0,a)}},{columnName:i("if_stats_config.metric"),targets:3,width:"10",name:"metric",data:"metric",className:"text-center",responsivePriority:1,render:function(e,t,a){return function(e,t){let a=e;return t.metric_label?a=t.metric_label:"interface"!=t.rule_type?y.forEach((n=>{n.id==e&&(t.extra_metric?t.extra_metric==n.extra_metric&&(a=n.label):a=n.label)})):w.forEach((n=>{n.id==e&&(t.extra_metric?t.extra_metric==n.extra_metric&&(a=n.label):a=n.label)})),a}(e,a)}},{columnName:i("if_stats_config.frequency"),targets:4,width:"10",name:"frequency",data:"frequency",className:"text-center",responsivePriority:1,render:function(e){return function(e){let t="";return k.forEach((a=>{e==a.id&&(t=a.title)})),t}(e)}},{columnName:i("if_stats_config.threshold"),targets:5,width:"10",name:"threshold",data:"threshold",className:"text-end",responsivePriority:1,render:function(e,t,n){return function(e,t){let n=parseInt(e),l="> ";return t.threshold_sign&&"-1"==t.threshold_sign&&(l="< "),t.metric_type&&"throughput"==t.metric_type?n=l+a.bitsToSize(8*e):t.metric_type&&"volume"==t.metric_type?n=l+a.bytesToSize(e):t.metric_type&&"percentage"==t.metric_type?(e<0&&(e*=-1),n=l+a.fpercent(e)):n=e,n}(e,n)}},{columnName:i("metric_type"),visible:!1,targets:6,name:"metric_type",data:"metric_type",className:"text-nowrap",responsivePriority:1},{columnName:i("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return E(a)}}],n={table_buttons:e,data_url:a.buildURL(p,h),enable_search:!0,columns_config:t,table_config:{scrollX:!1,serverSide:!1,order:[[1,"desc"]],columnDefs:t}};v=n};return ul((async()=>{P(),await async function(){const e=a.buildURL(c,h);await $.get(e,(function(e,t){y=e.rsp}))}(),await async function(){const e=a.buildURL(d,h);await $.get(e,(function(e,t){x=e.rsp}))}(),await async function(){const e=a.buildURL(u,h);await $.get(e,(function(e,t){w=e.rsp}))}(),s.value.metricsLoaded(y,x,w)})),ml((()=>{n.value.destroy_table()})),(e,t)=>(Es(),Os("div",ow,[Vs("div",rw,[Vs("div",cw,[uw,Vs("div",dw,[Vs("div",pw,[Vs("h4",null,ee(i("if_stats_config.traffic_rules")),1)]),Vs("div",_w,[qs(sh,{ref_key:"modal_delete_confirm",ref:l,title:ba(g),body:ba(b),onDelete:A},null,8,["title","body"]),qs(iw,{ref_key:"modal_add_host_rule",ref:s,metric_list:ba(y),interface_metric_list:ba(w),frequency_list:k,init_func:C,onAdd:T,onEdit:S},null,8,["metric_list","interface_metric_list"]),qs(Tm,{ref_key:"table_host_rules",ref:n,table_buttons:ba(v).table_buttons,columns_config:ba(v).columns_config,data_url:ba(v).data_url,enable_search:ba(v).enable_search,table_config:ba(v).table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])]),Vs("div",fw,[qs(Sy,{note_list:m})])])])]))},__file:"http_src/vue/page-host-rules.vue"};const hw={class:"row"},vw={class:"col-md-12 col-lg-12"},gw={class:"card"},bw=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),yw={class:"card-body"},ww={id:"host_details_ports"},xw={class:"row mb-4 mt-4",id:"host_details_ports"},kw={class:"col-6"};var $w={__name:"page-host-details-ports",props:{page_csrf:String},setup(e){fa(null),fa([]),fa({});const t=e=>i18n(e);ul((async()=>{await async function(){let e={};e.host=x.get_url_entry("host"),e.vlan=x.get_url_entry("vlan"),e.ifid=x.get_url_entry("ifid"),n.forEach((t=>{let n={...t.extra_params,...e};$.get(a.buildURL(t.url,n),(async function(e,a){let n=[];e.rsp.forEach((e=>{const t=e.port_info.port,a=e.port_info.l7_proto;n.push({label:`${t} (${a})`})})),t.stats_rows=n}))}))}()})),dl((async()=>{a.hideOverlays()})),ml((async()=>{traffic_table.value.destroy_table()})),i18n("graphs.cli_ports"),ntopChartApex.typeChart.DONUT,http_prefix,i18n("graphs.srv_ports"),ntopChartApex.typeChart.DONUT,http_prefix;const n=[{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"cli_port_flows",extra_params:{mode:"local",protocol:"tcp"},columns:[{id:"active_server_tcp_ports",label:t("ports_page.active_server_tcp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]},{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"cli_port_flows",extra_params:{mode:"local",protocol:"udp"},columns:[{id:"active_server_udp_ports",label:t("ports_page.active_server_udp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]},{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"srv_port_flows",extra_params:{mode:"remote",protocol:"tcp"},columns:[{id:"client_contacted_server_tcp_ports",label:t("ports_page.client_contacted_server_tcp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]},{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"srv_port_flows",extra_params:{mode:"remote",protocol:"udp"},columns:[{id:"client_contacted_server_udp_ports",label:t("ports_page.client_contacted_server_udp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]}];return(e,t)=>(Es(),Os("div",hw,[Vs("div",vw,[Vs("div",gw,[bw,Vs("div",yw,[Vs("div",ww,[Vs("div",xw,[(Es(),Os($s,null,Al(n,(e=>Vs("div",kw,[qs(Mm,{id:e.id,columns:e.columns,rows:e.stats_rows,print_html_column:e=>function(e){return e.label}(e),print_html_row:(e,t)=>function(e,t){return t.label}(0,t)},null,8,["id","columns","rows","print_html_column","print_html_row"])]))),64))])])])])])]))},__file:"http_src/vue/page-host-details-ports.vue"};const Sw={class:"row"},Cw={class:"col-12"},Nw={class:"card"},Aw={class:"card-body"},Tw={class:"align-items-center justify-content-end mb-3",style:{height:"70vh"}},Ew={class:"d-flex ms-auto flex-row-reverse"},Pw=Vs("label",{class:"my-auto me-1"},null,-1),Iw=[Vs("span",null,[Vs("i",{class:"fas fa-sync"})],-1)],Mw={key:0,class:"m-1"},Uw={style:{"min-width":"14rem"}},Ow={class:"my-auto me-1"};var jw={__name:"page-alert-analysis",props:{ifid:String,page_csrf:String,charts_options:Array,available_filters:Object},setup(e){const t=e,n=e=>i18n(e),l=fa(null),s=ntopChartApex.typeChart.BUBBLE,i=`${http_prefix}/lua/pro/rest/v2/charts/alert/analysis.lua`,o="alerts-map",r={},c=fa(null),u=function(){let e="";const t={bubble_mode:x.get_url_entry("bubble_mode"),timeframe:x.get_url_entry("timeframe"),vlan:x.get_url_entry("vlan"),ifid:x.get_url_entry("ifid")};for(const[a,n]of Object.entries(t))e=`${e}&${a}=${n}`;return e},d=function(){l.value.show_loading(),c.value.update_chart(`${i}?${u()}`),l.value.hide_loading()},p=function(){return async e=>{let n=function(e){let n={};if(t.charts_options.forEach((t=>{t.mode_id==e&&(n=t)})),n&&n.chart&&n.chart.ntop_events){n.chart.events=n.chart.events||{};for(const[e,t]of Object.entries(n.chart.ntop_events))null!=t&&(n.chart.events[e]=a[t]||a.fnone)}return n&&n.xaxis&&n.xaxis.labels&&n.xaxis.labels.ntop_utils_formatter&&(n.xaxis.labels.formatter=a[n.xaxis.labels.ntop_utils_formatter]||a.fnone),n&&n.yaxis&&n.yaxis.labels&&n.yaxis.labels.ntop_utils_formatter&&(n.yaxis.labels.formatter=a[n.yaxis.labels.ntop_utils_formatter]||a.fnone),n&&n.tooltip&&n.tooltip.ntop_utils_formatter&&(n.tooltip.custom=a[n.tooltip.ntop_utils_formatter]),n}(Number(r.bubble_mode.id));const l=await ntopng_utility.http_request(e);return n.series=l.series||{},n}},_=function(e){l.value.show_loading(),x.set_key_to_url(e.filter_name,e.id),c.value.update_chart(`${i}?${u()}`),l.value.hide_loading()};return ul((()=>{const e=x.get_url_entry("timeframe"),a=x.get_url_entry("vlan");x.get_url_entry("bubble_mode")||x.set_key_to_url("bubble_mode",0),e||x.set_key_to_url("timeframe",300),a||x.set_key_to_url("vlan",0),x.set_key_to_url("ifid",t.ifid);for(const[e,a]of Object.entries(t.available_filters))a.forEach((t=>{t.filter_name=e,t.currently_active&&(r[e]=t)}))})),dl((()=>{l.value.hide_loading()})),(t,a)=>(Es(),Os("div",Sw,[Vs("div",Cw,[Vs("div",Nw,[qs(ay,{ref_key:"loading",ref:l},null,512),Vs("div",Aw,[Vs("div",Tw,[Vs("div",Ew,[Vs("div",null,[Pw,Vs("div",null,[Vs("button",{class:"btn btn-link m-1",tabindex:"0",type:"button",onClick:d},Iw)])]),(Es(!0),Os($s,null,Al(e.available_filters,((e,t,a)=>(Es(),Os($s,null,[e.length>0?(Es(),Os("div",Mw,[Vs("div",Uw,[Vs("label",Ow,ee(n("bubble_map."+t))+": ",1),qs(Ld,{selected_option:r[t],"onUpdate:selected_option":e=>r[t]=e,options:e,onSelect_option:_},null,8,["selected_option","onUpdate:selected_option","options"])])])):Js("v-if",!0)],64)))),256))]),Vs("div",{id:o,style:{height:"90%"}},[qs(Ud,{ref_key:"bubble_chart",ref:c,id:o,chart_type:ba(s),base_url_request:i,get_params_url_request:u,get_custom_chart_options:p(),register_on_status_change:!1},null,8,["chart_type","get_custom_chart_options"])])])])])])]))},__file:"http_src/vue/page-alert-analysis.vue"};const Fw={class:"row"},Dw={class:"col-12"},Lw={class:"card"},Rw={class:"card-body"},zw={class:"align-items-center justify-content-end mb-3",style:{height:"70vh"}},Bw={class:"d-flex ms-auto flex-row-reverse"},Vw=Vs("label",{class:"my-auto me-1"},null,-1),qw={class:"m-1"},Hw={key:0,style:{"min-width":"15rem"}},Gw={class:"my-auto me-1"};var Ww={__name:"page-host-map",props:{ifid:String,page_csrf:String,charts_options:Array,available_filters:Object},setup(e){const t=e,n=e=>i18n(e),l=ntopChartApex.typeChart.BUBBLE,s=`${http_prefix}/lua/rest/v2/charts/host/map.lua`,i="alerts-map",o={},r=fa(null),c=function(){let e="";const t={bubble_mode:x.get_url_entry("bubble_mode"),ifid:x.get_url_entry("ifid")};for(const[a,n]of Object.entries(t))e=`${e}&${a}=${n}`;return e},u=function(){return async e=>{let n=function(e){let n={};if(t.charts_options.forEach((t=>{t.mode_id==e&&(n=t)})),n&&n.chart&&n.chart.ntop_events){n.chart.events=n.chart.events||{};for(const[e,t]of Object.entries(n.chart.ntop_events))null!=t&&(n.chart.events[e]=a[t]||a.fnone)}return n&&n.xaxis&&n.xaxis.labels&&n.xaxis.labels.ntop_utils_formatter&&(n.xaxis.labels.formatter=a[n.xaxis.labels.ntop_utils_formatter]||a.fnone),n&&n.yaxis&&n.yaxis.labels&&n.yaxis.labels.ntop_utils_formatter&&(n.yaxis.labels.formatter=a[n.yaxis.labels.ntop_utils_formatter]||a.fnone),n&&n.tooltip&&n.tooltip.ntop_utils_formatter&&(n.tooltip.custom=a[n.tooltip.ntop_utils_formatter]),n}(Number(o.bubble_mode.id));const l=await ntopng_utility.http_request(e);return n.series=l.series||{},n}},d=function(e){x.set_key_to_url(e.filter_name,e.id),r.value.update_chart(`${s}?${c()}`)};return ul((()=>{x.get_url_entry("bubble_mode")||x.set_key_to_url("bubble_mode",0),x.set_key_to_url("ifid",t.ifid);for(const[e,a]of Object.entries(t.available_filters))a.forEach((t=>{t.filter_name=e,t.currently_active&&(o[e]=t)}))})),(t,a)=>(Es(),Os("div",Fw,[Vs("div",Dw,[Vs("div",Lw,[Vs("div",Rw,[Vs("div",zw,[Vs("div",Bw,[Vw,(Es(!0),Os($s,null,Al(e.available_filters,((e,t,a)=>(Es(),Os("div",qw,[e.length>0?(Es(),Os("div",Hw,[Vs("label",Gw,ee(n("bubble_map."+t))+": ",1),qs(Ld,{selected_option:o[t],"onUpdate:selected_option":e=>o[t]=e,options:e,onSelect_option:d},null,8,["selected_option","onUpdate:selected_option","options"])])):Js("v-if",!0)])))),256))]),Vs("div",{id:i,style:{height:"90%"}},[qs(Ud,{ref_key:"bubble_chart",ref:r,id:i,chart_type:ba(l),base_url_request:s,get_params_url_request:c,get_custom_chart_options:u(),register_on_status_change:!1},null,8,["chart_type","get_custom_chart_options"])])])])])])]))},__file:"http_src/vue/page-host-map.vue"};const Kw={class:"row"},Jw={class:"col-md-12 col-lg-12"},Yw={class:"card card-shadow"},Zw={class:"card-body"},Xw={class:"d-flex align-items-center flex-row-reverse mb-2"},Qw=Vs("label",{class:"my-auto me-1"},null,-1),ex=[Vs("span",null,[Vs("i",{class:"fas fa-sync"})],-1)],tx={key:0,class:"m-1"},ax={style:{"min-width":"14rem"}},nx={class:"my-auto me-1"},lx=["title"],sx=[Vs("button",{type:"button",class:"btn btn-link",disabled:""},[Vs("i",{class:"text-danger fa-solid fa-triangle-exclamation"})],-1)];var ix={__name:"page-vlan-ports-sankey",props:{ifid:Number,available_filters:Object},setup(e){const t=e,a={},n=e=>i18n(e),l=fa(!1),s=n("ports_analysis.max_entries"),i=n("ports_analysis.no_data"),o=fa(null),r=fa(null),c=fa(null),u=fa(null),d=fa({}),p=`${http_prefix}/lua/pro/rest/v2/get/vlan/live_ports.lua`,_=`${http_prefix}/lua/pro/rest/v2/get/vlan/historical_ports.lua`,f=fa(null);function m(e){1!=e.is_link_node&&e.link&&x.go_to_url(e.link)}ul((()=>{const e=x.get_url_entry("timeframe"),n=x.get_url_entry("vlan");x.get_url_entry("l4proto"),e||x.set_key_to_url("timeframe","none"),n||x.set_key_to_url("vlan","none"),n||x.set_key_to_url("l4proto","none"),x.set_key_to_url("ifid",t.ifid);for(const[e,n]of Object.entries(t.available_filters))n.forEach((t=>{t.filter_name=e,t.currently_active&&(a[e]=t)}))})),dl((()=>{y(),w(),g()}));const h=function(){g()},v=function(e){x.set_key_to_url(e.filter_name,e.id),g()},g=function(){!async function(){f.value.show_loading();let e=await async function(){const e=function(){let e=x.get_url_entry("vlan"),t=x.get_url_entry("timeframe"),a=x.get_url_entry("l4proto");"none"==e&&(e="");"none"==t&&(t="");"none"==a&&(a="");let n="",l={ifid:x.get_url_entry("ifid"),vlan:e,timeframe:t,l4proto:a},s=x.obj_to_url_params(l);n=""==t?`${p}?${s}`:`${_}?${s}`;return n}();let t=await b.http_request(e);(function(e){l.value=e.max_entries_reached})(t),t=function(e){let t=e=>console.error(`link (source: ${e.source_node_id}, target: ${e.target_node_id}) removed for not existing source/target node`),a=function(e,t){let a={};e.nodes.forEach((e=>a[e.node_id]=!0));let n=e=>null!=a[e.source_node_id]&&null!=a[e.target_node_id],l=function(e,t,a){return e.filter((e=>{const n=t(e);return 0==n&&null!=a&&a(e),n}))}(e.links,n,t);return l}(e,t);return{nodes:e.nodes,links:a}}(t);const a=function(e){let t={},a={};e.nodes.forEach((e=>t[e.node_id]=e));let n=e=>`${e.source_node_id}_${e.label}`;e.links.forEach((e=>{let l=n(e),s=a[l];null==s&&(s={id:l,label:e.label,link:e.optional_info.link,node_links:[]},a[l]=s),s.node_links.push({source:t[e.source_node_id],target:t[e.target_node_id],value:e.value})}));let l=e.nodes.map((e=>e)),s=[];for(let e in a){let t=a[e],n={node_id:t.id,label:t.label,link:t.link};l.push(n),t.node_links.forEach((e=>{s.push({source_node_id:e.source.node_id,target_node_id:n.node_id,label:`${e.source.label} - ${e.target.label}: ${n.label}`,value:e.value}),s.push({source_node_id:n.node_id,target_node_id:e.target.node_id,label:`${e.source.label} - ${e.target.label}: ${n.label}`,value:e.value})}))}let i=l.map(((e,t)=>({index:t,label:e.label,data:e}))),o={};i.forEach(((e,t)=>o[e.data.node_id]=e));let r=s.map((e=>({source:o[e.source_node_id].index,target:o[e.target_node_id].index,value:e.value,label:e.label})));return{nodes:i,links:r}}(t);return a.links.length>0&&a.nodes.length>0?o.value.set_no_data_flag(!1):o.value.set_no_data_flag(!0),a}();d.value=e,f.value.hide_loading()}()};function y(){u.value=$(r.value).height()-100}function w(){c.value=$(r.value).width()-10}return(t,p)=>(Es(),Os("div",Kw,[Vs("div",Jw,[Vs("div",Yw,[qs(ay,{ref_key:"loading",ref:f},null,512),Vs("div",Zw,[Vs("div",{class:"align-items-center justify-content-end mb-2",style:{height:"70vh"},ref_key:"body_div",ref:r},[Vs("div",Xw,[Vs("div",null,[Qw,Vs("div",null,[Vs("button",{class:"btn btn-link m-1",tabindex:"0",type:"button",onClick:h},ex)])]),(Es(!0),Os($s,null,Al(e.available_filters,((e,t,l)=>(Es(),Os($s,null,[e.length>0?(Es(),Os("div",tx,[Vs("div",ax,[Vs("label",nx,ee(n("ports_analysis."+t))+": ",1),qs(Ld,{selected_option:a[t],"onUpdate:selected_option":e=>a[t]=e,options:e,onSelect_option:v},null,8,["selected_option","onUpdate:selected_option","options"])])])):Js("v-if",!0)],64)))),256)),1==l.value?(Es(),Os("div",{key:0,class:"mt-auto m-1",title:ba(s),style:{cursor:"help"}},sx,8,lx)):Js("v-if",!0)]),qs(iy,{ref_key:"sankey_chart",ref:o,width:c.value,height:u.value,no_data_message:ba(i),sankey_data:d.value,onUpdate_width:w,onUpdate_height:y,onNode_click:m},null,8,["width","height","no_data_message","sankey_data"])],512)])])])]))},__file:"http_src/vue/page-vlan-ports-sankey.vue"};const ox={class:"row"},rx={class:"col-md-12 col-lg-12"},cx={class:"card card-shadow"},ux={class:"card-body"},dx={id:"aggregated_live_flows"},px={class:"d-flex align-items-center"},_x={class:"d-flex no-wrap ms-auto",style:{"text-align":"left","margin-right":"1rem","min-width":"20rem"}},fx={class:"my-auto me-1"};var mx={__name:"page-aggregated-live-flows",props:{is_ntop_enterprise_m:Boolean,vlans:Array,ifid:Number,aggregation_criteria:String,page:Number,sort:String,order:String,start:Number,length:Number},setup(e){const t=e,n=e=>i18n(e),l=[{label:n("application_proto"),value:1,param:"application_protocol",table_id:"aggregated_app_proto",enterprise_m:!1},{label:n("client"),value:2,param:"client",table_id:"aggregated_client",enterprise_m:!1},{label:n("server"),value:3,param:"server",table_id:"aggregated_server",enterprise_m:!1},{label:n("client_server"),value:4,param:"client_server",table_id:"aggregated_client_server",enterprise_m:!0},{label:n("application_proto_client_server"),value:5,param:"app_client_server",table_id:"aggregated_app_client_server",enterprise_m:!0},{label:n("info"),value:6,param:"info",table_id:"aggregated_info",enterprise_m:!0}],s=function(){if(t.is_ntop_enterprise_m)return fa(l);{let e=[];return l.forEach((t=>{t.enterprise_m||e.push(t)})),fa(e)}}();const i=fa(l[0]);function o(){x.set_key_to_url("aggregation_criteria",i.value.param),d.aggregation_criteria=i.value.param,v(d)}const r=fa(null),c=fa({}),u=fa(null);let d={};const p=function(e,t){return t.client_name.alerted&&(t.client_name.complete_label=" <i class='fas fa-exclamation-triangle' style='color: #B94A48;'></i>"+t.client_name.complete_label),t.client_name.label&&""!=t.client_name.label?t.is_client_in_mem?`<a href="${http_prefix}/lua/flows_stats.lua?client=${t.client_name.id}">${t.client_name.label}</a>`+t.client_name.complete_label+` <a href="${http_prefix}/lua/host_details.lua?host=${t.client_name.id}" data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`:`<label>${t.client_name.label}</label>`+t.client_name.complete_label:t.is_client_in_mem?`<a href="${http_prefix}/lua/flows_stats.lua?client=${e.id}">${e.label}</a>`+t.client_name.complete_label+` <a href="${http_prefix}/lua/host_details.lua?host=${t.client_name.id}" data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`:`<label>${e.label}</label>`+t.client_name.complete_label},_=function(e,t){return t.server_name.alerted&&(t.server_name.complete_label=" <i class='fas fa-exclamation-triangle' style='color: #B94A48;'></i>"+t.server_name.complete_label),t.server_name.label&&""!=t.server_name.label?t.is_server_in_mem?`<a href="${http_prefix}/lua/flows_stats.lua?server=${t.server_name.id}">${t.server_name.label}</a>`+t.server_name.complete_label+` <a href="${http_prefix}/lua/host_details.lua?host=${t.server_name.id}" data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`:`<label>${t.server_name.label}</label>`+t.server_name.complete_label:t.is_server_in_mem?`<a href="${http_prefix}/lua/flows_stats.lua?server=${e.id}">${e.label}</a>`+t.server_name.complete_label+` <a href="${http_prefix}/lua/host_details.lua?host=${t.server_name.id}" data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`:`<label>${e.label}</label>`+t.server_name.complete_label},f=function(e,t){let a="";return 1==i.value.value?a=`${http_prefix}/lua/flows_stats.lua?application=${t.application.id}`:2==i.value.value?a=`${http_prefix}/lua/flows_stats.lua?client=${t.client_name.id}`:3==i.value.value?a=`${http_prefix}/lua/flows_stats.lua?server=${t.server_name.id}`:4==i.value.value?a=`${http_prefix}/lua/flows_stats.lua?client=${t.client_name.id}&server=${t.server_name.id}`:5==i.value.value?a=`${http_prefix}/lua/flows_stats.lua?application=${t.application.id}&client=${t.client_name.id}&server=${t.server_name.id}`:6==i.value.value&&(a=`${http_prefix}/lua/flows_stats.lua?flow_info=${t.info.id}`),`<a href=${a} class="btn btn-sm btn-info" ><i class= 'fas fa-stream'></i></a>`},m=`${http_prefix}/lua/rest/v2/get/flow/aggregated_live_flows.lua`,h=()=>{u.value.reload()};async function v(e){const l=[];let s=x.obj_to_url_params(e);l.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,a,n){h()}});const o=[];t.vlans.length>0&&o.push({filterTitle:n("map_page.vlans"),filters:t.vlans,filterMenuKey:"vlan_id",columnIndex:0,removeAllEntry:!0,callbackFunction:(e,a)=>{if(0!=a.id){let n={ifid:x.get_url_entry("ifid")||t.ifid,vlan_id:a.id,aggregation_criteria:i.value.param};x.set_key_to_url("vlan_id",a.id),e.ajax.url(`${m}?${x.obj_to_url_params(n)}`),r.value.show_loading(),e.ajax.reload(),r.value.hide_loading()}}});let d=8;1!=i.value.value&&(d=7),5==i.value.value&&(d=10);let v=i.value.table_id,g={table_buttons:l,data_url:`${m}?${s}`,enable_search:!0,table_filters:o,id:v,table_config:{serverSide:!0,responsive:!1,scrollX:!0,columnDefs:[{type:"file-size",targets:6},{type:"file-size",targets:7},{type:"file-size",targets:8}]}};(null==u.value||null!=u.value&&!u.value.is_last_sorting_available(v))&&(g.table_config.order=[[d,e.order]]);let b=[];b.push({orderable:!1,targets:0,name:"flows_icon",data:"client",className:"text-center",responsivePriority:1,render:(e,t,a)=>f(e,a)}),1==i.value.value?b.push({columnName:i18n("application_proto"),targets:0,name:"application",data:"application",className:"text-nowrap",responsivePriority:1,render:e=>`<label>${e.complete_label}</label>`}):2==i.value.value?b.push({columnName:i18n("client"),targets:0,name:"client",data:"client",className:"text-nowrap",responsivePriority:1,render:(e,t,a)=>p(e,a)}):3==i.value.value?b.push({columnName:i18n("last_server"),targets:0,name:"server",data:"server",className:"text-nowrap",responsivePriority:1,render:(e,t,a)=>_(e,a)}):t.is_ntop_enterprise_m&&(4==i.value.value?b.push({columnName:i18n("client"),targets:0,name:"client",data:"client",className:"text-nowrap",responsivePriority:1,render:(e,t,a)=>p(e,a)},{columnName:i18n("last_server"),targets:0,name:"server",data:"server",className:"text-nowrap",responsivePriority:1,render:(e,t,a)=>_(e,a)}):5==i.value.value?b.push({columnName:i18n("application_proto"),targets:0,name:"application",data:"application",className:"text-nowrap",responsivePriority:1,render:e=>`<label>${e.complete_label}</label>`},{columnName:i18n("client"),targets:0,name:"client",data:"client",className:"text-nowrap",responsivePriority:1,render:(e,t,a)=>p(e,a)},{columnName:i18n("last_server"),targets:0,name:"server",data:"server",className:"text-nowrap",responsivePriority:1,render:(e,t,a)=>_(e,a)}):6==i.value.value&&b.push({columnName:i18n("info"),targets:0,name:"info",data:"info",className:"text-nowrap",responsivePriority:1,render:e=>`<label>${e.label}</label>`})),t.vlans.length>0&&(b.push({columnName:i18n("vlan"),targets:0,name:"vlan_id",data:"vlan_id",className:"text-nowrap text-center",responsivePriority:1,render:e=>0===e.id?"":`<a href="${http_prefix}/lua/flows_stats.lua?vlan=${e.id}">${e.label}</a>`}),d>1&&(d+=1),(null==u.value||null!=u.value&&!u.value.is_last_sorting_available(v))&&(g.table_config.order=[[d,e.order]]),g.table_config.columnDefs=[{type:"file-size",targets:7},{type:"file-size",targets:8},{type:"file-size",targets:9}]),b.push({columnName:i18n("flows"),targets:0,name:"flows",data:"flows",className:"text-nowrap text-center",responsivePriority:1},{columnName:i18n("total_score"),targets:0,name:"score",data:"tot_score",className:"text-nowrap text-center",responsivePriority:1}),2!=i.value.value&&4!=i.value.value&&b.push({columnName:i18n("clients"),targets:0,name:"num_clients",data:"num_clients",className:"text-nowrap text-center",responsivePriority:1}),3!=i.value.value&&4!=i.value.value&&b.push({columnName:i18n("servers"),targets:0,name:"num_servers",data:"num_servers",className:"text-nowrap text-center",responsivePriority:1}),b.push({columnName:i18n("breakdown"),targets:0,sorting:!1,name:"breakdown",data:"breakdown",className:"text-nowrap text-center",responsivePriority:1,render:e=>a.createBreakdown(e.percentage_bytes_sent,e.percentage_bytes_rcvd,i18n("sent"),i18n("rcvd"))},{columnName:i18n("traffic_sent"),targets:0,name:"bytes_sent",data:"bytes_sent",className:"text-nowrap text-end",responsivePriority:1,render:e=>a.bytesToSize(e)},{columnName:i18n("traffic_rcvd"),targets:0,name:"bytes_rcvd",data:"bytes_rcvd",className:"text-nowrap text-end",responsivePriority:1,render:e=>a.bytesToSize(e)},{columnName:i18n("total_traffic"),targets:0,name:"tot_traffic",data:"tot_traffic",className:"text-nowrap text-end",responsivePriority:1,render:e=>a.bytesToSize(e)}),g.columns_config=b,c.value=g}return ul((async()=>{d=function(){let e={ifid:x.get_url_entry("ifid")||t.ifid,vlan_id:x.get_url_entry("vlan_id")||t.vlans,aggregation_criteria:x.get_url_entry("aggregation_criteria")||i.value.param,page:x.get_url_entry("page")||t.page,sort:x.get_url_entry("sort")||t.sort,order:x.get_url_entry("order")||t.order,start:x.get_url_entry("start")||t.start,length:x.get_url_entry("length")||t.length};i.value=l.find((t=>t.param==e.aggregation_criteria));for(const t in e)x.set_key_to_url(t,e[t]);return e}(),await v(d),function(){for(const e in d)x.set_key_to_url(e,d[e])}()})),(e,t)=>(Es(),Os("div",ox,[Vs("div",rx,[Vs("div",cx,[qs(ay,{ref_key:"loading",ref:r},null,512),Vs("div",ux,[Vs("div",dx,[(Es(),js(Tm,{ref_key:"table_aggregated_live_flows",ref:u,id:c.value.id,key:c.value.data_url,table_buttons:c.value.table_buttons,columns_config:c.value.columns_config,data_url:c.value.data_url,filter_buttons:c.value.table_filters,enable_search:c.value.enable_search,table_config:c.value.table_config},{menu:hn((()=>[Vs("div",px,[Vs("div",_x,[Vs("label",fx,ee(n("criteria_filter"))+": ",1),qs(Ld,{selected_option:i.value,"onUpdate:selected_option":t[0]||(t[0]=e=>i.value=e),options:ba(s),onSelect_option:o},null,8,["selected_option","options"])])])])),_:1},8,["id","table_buttons","columns_config","data_url","filter_buttons","enable_search","table_config"]))])])])])]))},__file:"http_src/vue/page-aggregated-live-flows.vue"};const hx={id:"aggregated_live_flows"};var vx={__name:"page-test-table",props:{url:String,ifid:Number,columns_config:Array},setup(e){const t=e,a=fa({}),n=fa(null);return ul((()=>{!function(){const e=[];let l={ifid:ntopng_url_manager.get_url_entry("ifid")||t.ifid},s=ntopng_url_manager.obj_to_url_params(l);e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,a,l){n.value.reload()}});let i={table_buttons:e,data_url:`${t.url}?${s}`,enable_search:!0};i.columns_config=t.columns_config,a.value=i}()})),(e,t)=>(Es(),Os("div",hx,[qs(Tm,{ref_key:"table_test",ref:n,table_buttons:a.value.table_buttons,columns_config:a.value.columns_config,data_url:a.value.data_url,filter_buttons:a.value.table_filters,enable_search:a.value.enable_search,table_config:a.value.table_config},null,8,["table_buttons","columns_config","data_url","filter_buttons","enable_search","table_config"])]))},__file:"http_src/vue/page-test-table.vue"};const gx={class:"dropdown",style:{display:"inline-block"}},bx={class:"btn btn-link dropdown-toggle",type:"button",id:"id","data-bs-toggle":"dropdown","aria-expanded":"false"},yx={class:"dropdown-menu","aria-labelledby":"id",style:{overflow:"scroll","max-height":"20rem"}};var wx={__name:"dropdown",props:{id:String},setup(e,{expose:t}){const a=li(),n=Si(),l=fa([]),s=fa([]);return t({load_menu:function(){if(l.value=[],null==n||null==n.menu)return;let e=n.menu();null!=e&&0!=e.length&&(e.forEach((e=>{let t=e,n=$("<div></div>")[0];const{vNode:s,el:i}=Sm(t,{app:a?.appContext?.app,element:n});l.value.push(i)})),Ka((()=>{l.value.forEach(((e,t)=>{let a=s.value[t];$(a).append(e)}))})))}}),(e,t)=>(Es(),Os("div",gx,[Vs("button",bx,[El(e.$slots,"title")]),Vs("ul",yx,[Js(' <slot name="menu"></slot> '),(Es(!0),Os($s,null,Al(l.value,((e,t)=>(Es(),Os("li",{ref_for:!0,ref:e=>{s.value[t]=e}},null,512)))),256))])]))},__file:"http_src/vue/dropdown.vue"};const xx={class:"row",style:{"margin-left":"-2px","margin-right":"-2px","margin-top":"1rem","margin-bottom":"-1rem"}},kx={class:"col-sm-12 col-md-5"},$x={class:"dataTables_info",role:"status","aria-live":"polite"},Sx={class:"col-sm-12 col-md-7"},Cx={class:"dataTables_paginate paging_simple_numbers",style:{display:"flex","justify-content":"flex-end"}},Nx={class:"pagination"},Ax={class:"paginate_button page-item previous"},Tx=["onClick"],Ex={class:"paginate_button page-item previous"};var Px={__name:"select_table_page",props:{total_rows:Number,per_page:Number},emits:["change_active_page"],setup(e,{emit:t}){const a=e,n=6,l=fa(0),s=fa(0),i=fa(0),o=fa(0),r="Pages %active_page of %total_pages, number of rows %total_rows",c=fa("");function u(){if(null==a.total_rows)return;let e=a.per_page;i.value=Number.parseInt((a.total_rows+e-1)/e),o.value=0,s.value=n,l.value=0,i.value<s.value&&(s.value=i.value),p()}function d(e,a){o.value=e,null!=a&&(l.value=a),o.value==l.value&&l.value>0&&(l.value-=1);let n=l.value+s.value-1;o.value==n&&i.value-1>n&&(l.value+=1),p(),t("change_active_page",o.value)}function p(){c.value=r.replace("%active_page",_(`${o.value+1}`)).replace("%total_pages",_(`${i.value}`)).replace("%total_rows",_(`${a.total_rows}`))}function _(e){return e.replace(/(.)(?=(\d{3})+$)/g,"$1,")}return dl((()=>{u()})),On((()=>[a.total_rows,a.per_page]),((e,t)=>{u()}),{flush:"pre"}),(e,t)=>(Es(),Os($s,null,[Js(" PerPage "),Vs("div",xx,[Js(" div col-md-5 "),Vs("div",kx,[Vs("div",$x,ee(c.value),1)]),Js(" div col-md-5 "),Js(" start div col-sm-12 "),yl(Vs("div",Sx,[Vs("div",Cx,[Vs("ul",Nx,[yl(Vs("li",Ax,[Vs("a",{href:"javascript:void(0);",onClick:t[0]||(t[0]=e=>d(0,0)),"aria-controls":"default-datatable","data-dt-idx":"0",tabindex:"0",class:"page-link"}," « ")],512),[[Jo,o.value>=s.value-1]]),Vs("li",{class:W(["paginate_button page-item previous",{disabled:0==o.value}])},[Vs("a",{href:"javascript:void(0);",onClick:t[1]||(t[1]=e=>{d(o.value-1)}),"aria-controls":"default-datatable","data-dt-idx":"0",tabindex:"0",class:"page-link"}," < ")],2),(Es(!0),Os($s,null,Al(s.value,(e=>(Es(),Os("li",{onClick:t=>d(l.value+e-1),class:W([{active:o.value==l.value+e-1},"paginate_button page-item"])},[(Es(),Os("a",{href:"javascript:void(0);","aria-controls":"default-datatable","data-dt-idx":"1",tabindex:"0",class:"page-link",key:l.value},ee(l.value+e),1))],10,Tx)))),256)),Vs("li",{class:W(["paginate_button page-item next",{disabled:o.value==i.value-1}]),id:"default-datatable_next"},[Vs("a",{href:"javascript:void(0);",onClick:t[2]||(t[2]=e=>{d(o.value+1)}),"aria-controls":"default-datatable","data-dt-idx":"7",tabindex:"0",class:"page-link"}," > ")],2),yl(Vs("li",Ex,[Vs("a",{href:"javascript:void(0);",onClick:t[3]||(t[3]=e=>d(i.value-1,i.value-s.value)),"aria-controls":"default-datatable","data-dt-idx":"0",tabindex:"0",class:"page-link"}," » ")],512),[[Jo,o.value<i.value-s.value+1]])])])],512),[[Jo,i.value>0]]),Js(" end div col-md-7 ")]),Js(" PerPage ")],2112))},__file:"http_src/vue/select_table_page.vue"};const Ix=e=>(_n("data-v-61956e9e"),e=e(),fn(),e),Mx={class:"button-group mb-2"},Ux={style:{float:"left"}},Ox=["value"],jx={style:{"text-align":"right"}},Fx=[Ix((()=>Vs("i",{class:"fas fa-refresh"},null,-1)))],Dx=Ix((()=>Vs("i",{class:"fas fa-eye"},null,-1))),Lx={class:"form-check form-switch ms-1"},Rx=["onUpdate:modelValue","onClick"],zx=["innerHTML"],Bx={class:"",style:{width:"100%",overflow:"scroll"}},Vx=["onClick"],qx={style:{display:"flex"}},Hx=["innerHTML"],Gx={class:"fa fa-fw fa-sort-up"},Wx={class:"fa fa-fw fa-sort-down"},Kx={key:0,scope:"col"},Jx=["innerHTML"];var Yx={__name:"table",props:{id:String,columns:Array,get_rows:Function,print_column_name:Function,print_html_row:Function,f_sort_rows:Function,paging:Boolean},setup(e){const t=e,a=fa(!0),n=fa(null),l=fa(null);let s=0,i=[];const o=fa([]),r=fa([]),c=fa(0),u=[10,20,40,50,80,100],d=fa(10);async function p(e){s=e,1==t.paging?await m():h()}function _(e,a){if(e.sort=(e.sort+1)%3,o.value.filter(((e,t)=>t!=a)).forEach((e=>e.sort=0)),0==e.sort)return;if(t.paging)return void m();let n=function(){if(null!=t.f_sort_rows)return t.f_sort_rows;return(e,a,n)=>{let l=t.print_html_row(e.data,a),s=t.print_html_row(e.data,n);return 1==e.sort?l.localeCompare(s):s.localeCompare(l)}}();i=i.sort(((t,a)=>n(e,t,a))),h()}function f(){m()}async function m(){let e=await t.get_rows(s,d.value,o.value);c.value=e.rows.length,1==t.paging&&(c.value=e.total_rows),i=e.rows,h()}function h(){let e=s*d.value;r.value=i.slice(e,e+d.value)}return dl((async()=>{o.value=t.columns.map(((e,t)=>({visible:!0,sort:0,order:t,data:e}))),await m(),$(n.value).resizableColumns(),l.value.load_menu()})),(s,i)=>(Es(),Os($s,null,[Vs("div",Mx,[Js(" TableHeader "),Vs("div",Ux,[Vs("label",null,[Ws(" Show "),yl(Vs("select",{"onUpdate:modelValue":i[0]||(i[0]=e=>d.value=e),onClick:i[1]||(i[1]=e=>f())},[(Es(),Os($s,null,Al(u,(e=>Vs("option",{value:e},ee(e),9,Ox))),64))],512),[[Do,d.value]]),Ws(" Entries ")])]),Vs("div",jx,[Vs("button",{class:"btn btn-link me-1",type:"button",onClick:f},Fx),qs(wx,{id:e.id,ref_key:"dropdown",ref:l},{title:hn((()=>[Dx])),menu:hn((()=>[(Es(!0),Os($s,null,Al(o.value,(l=>(Es(),Os("div",Lx,[yl(Vs("input",{class:"form-check-input","onUpdate:modelValue":e=>l.visible=e,onClick:e=>async function(e){t.paging&&await m(),a.value=!1,await Ka(),a.value=!0,await Ka(),setTimeout((async()=>{await Ka(),$(n.value).resizableColumns()}),0)}(),checked:"",type:"checkbox",id:"toggle-Begin"},null,8,Rx),[[Oo,l.visible]]),Vs("label",{class:"form-check-label",for:"toggle-Begin",innerHTML:e.print_column_name(l.data)},null,8,zx)])))),256))])),_:1},8,["id"]),Js(" Dropdown columns ")])]),Js(" TableHeader "),Vs("div",Bx,[Js(" Table SelectTablePage "),a.value?(Es(),Os("table",{key:0,ref_key:"table",ref:n,class:"table table-striped table-bordered mb-0"},[Js(" Table "),Vs("thead",null,[Vs("tr",null,[(Es(!0),Os($s,null,Al(o.value,((t,a)=>(Es(),Os($s,null,[t.visible?(Es(),Os("th",{key:0,scope:"col",style:{cursor:"pointer"},onClick:e=>_(t,a)},[Vs("div",qx,[Vs("span",{innerHTML:e.print_column_name(t.data),class:"wrap-column"},null,8,Hx),Js(' <i v-show="col.sort == 0" class="fa fa-fw fa-sort"></i> '),yl(Vs("i",Gx,null,512),[[Jo,1==t.sort]]),yl(Vs("i",Wx,null,512),[[Jo,2==t.sort]])])],8,Vx)):Js("v-if",!0)],64)))),256))])]),Vs("tbody",null,[(Es(!0),Os($s,null,Al(r.value,(t=>(Es(),Os("tr",null,[(Es(!0),Os($s,null,Al(o.value,(a=>(Es(),Os($s,null,[a.visible?(Es(),Os("td",Kx,[Vs("div",{class:"wrap-column",innerHTML:e.print_html_row(a.data,t)},null,8,Jx)])):Js("v-if",!0)],64)))),256))])))),256))])],512)):Js("v-if",!0),Js(" Table ")]),Js(" Table and SelectTablePage "),Vs("div",null,[qs(Px,{total_rows:c.value,per_page:d.value,onChange_active_page:p},null,8,["total_rows","per_page"])])],64))}};fp("\n.wrap-column[data-v-61956e9e] {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  width:100%;\n}\n/*table {\n    table-layout:fixed;\n    display: block;\n    overflow-x: auto;\n    white-space: nowrap;\n}*/\n"),Yx.__scopeId="data-v-61956e9e",Yx.__file="http_src/vue/table.vue";const Zx=[{name:"first_seen",data:"first_seen"},{name:"last_seen",data:"last_seen"},{name:"l4proto",data:"l4proto"},{name:"l7proto",data:"l7proto"},{name:"score",data:"score"},{name:"flow",data:"flow",orderable:!1},{name:"packets",data:"packets"},{name:"bytes",data:"bytes"},{name:"throughput",data:"throughput"},{name:"cli_asn",data:"cli_asn"},{name:"srv_asn",data:"srv_asn"},{name:"l7cat",data:"l7cat"},{name:"alert_id",data:"alert_id"},{name:"flow_risk",data:"flow_risk"},{name:"src2dst_tcp_flags",data:"src2dst_tcp_flags"},{name:"dst2src_tcp_flags",data:"dst2src_tcp_flags"},{name:"cli_nw_latency",data:"cli_nw_latency"},{name:"srv_nw_latency",data:"srv_nw_latency"},{name:"info",data:"info"},{name:"observation_point_id",data:"observation_point_id",className:"no-wrap"},{name:"probe_ip",data:"probe_ip"},{name:"cli_network",data:"cli_network"},{name:"srv_network",data:"srv_network"},{name:"cli_host_pool_id",data:"cli_host_pool_id"},{name:"srv_host_pool_id",data:"srv_host_pool_id"},{name:"input_snmp",data:"input_snmp"},{name:"output_snmp",data:"output_snmp"},{name:"cli_country",data:"cli_country"},{name:"srv_country",data:"srv_country"},{name:"community_id",data:"community_id"}],Xx=e=>i18n(e);const Qx={wrap_datatable_columns_config:function(e){return function(e){let t=Xx(e.name);return null==t||""==t?"Test":`${t}`}}},ek={class:"mt-4 card card-shadow"},tk={class:"card-body",style:{}};var ak={__name:"page-test-new-table",props:{url:String,ifid:Number,columns_config:Array},setup(e){const t=Zx,a={columns:t,get_rows:(e,a,n)=>async function(e,a,n){let l=[];for(let e=0;e<1e4;e+=1){let a={};t.forEach(((t,n)=>{a[t.name]="djaskldasj klasdjkldasj askdljkasdl",0==n&&(a[t.name]=`${e+1}`)})),l.push(a)}return{rows:l,total_rows:l.length}}(),print_column_name:Qx.wrap_datatable_columns_config(t),print_html_row:(e,t)=>function(e,t){return t[e.name]}(e,t)};return fa({}),fa(null),ul((()=>{})),(e,t)=>(Es(),Os($s,null,[Js(' <div id="aggregated_live_flows">           '),Js(' <Datatable ref="table_test" '),Js(' \t     :table_buttons="table_config.table_buttons" '),Js(' \t     :columns_config="table_config.columns_config" '),Js(' \t     :data_url="table_config.data_url" '),Js(' \t     :filter_buttons="table_config.table_filters" '),Js(' \t     :enable_search="table_config.enable_search" '),Js(' \t     :table_config="table_config.table_config"> '),Js(" </Datatable> "),Js(" </div> "),Vs("div",ek,[Js(' <div class="card-body" style="width: 100%;overflow: scroll;"> '),Vs("div",tk,[qs(Yx,{id:"page-test",columns:a.columns,get_rows:a.get_rows,print_column_name:e=>a.print_column_name(e),print_html_row:(e,t)=>a.print_html_row(e,t),paging:!1},null,8,["columns","get_rows","print_column_name","print_html_row"])])])],2112))},__file:"http_src/vue/page-test-new-table.vue"};const nk={class:"container-fluid"},lk={class:"row form-group mb-3"},sk={class:"col col-md-12"},ik={class:"form-label"},ok={class:"row form-group mb-3"},rk={class:"col col-md-6"},ck={class:"form-label"},uk={class:"col col-md-6"},dk={class:"form-label"},pk={key:0},_k={key:1},fk=["pattern"],mk={class:"row form-group mb-3"},hk={class:"col col-md-6"},vk={class:"form-label"},gk={class:"col col-md-6"},bk={class:"form-label"},yk={key:0},wk={key:1},xk=["pattern"],kk={class:"row form-group mb-3"},$k={class:"col col-md-12"},Sk={class:"form-label"},Ck={class:"row form-group mb-3"},Nk={class:"col col-md-12"},Ak={class:"form-label"},Tk=["disabled"];var Ek={__name:"modal-nedge-add-rule-config",props:{},emits:["edit","add"],setup(e,{expose:t,emit:a}){const n=e=>i18n(e),l=fa(null),s=fa(""),i=[{label:n("nedge.page_rules_config.modal_rule_config.ip"),value:"ip",default:!0},{label:n("nedge.page_rules_config.modal_rule_config.cidr"),value:"cidr"},{label:n("interface"),value:"interface"}];let o="source_to_dest";const r=[{label:n("nedge.page_rules_config.bidirectional"),value:"bidirectional",bidirectional:!0},{label:n("nedge.page_rules_config.source_to_dest"),value:"source_to_dest",bidirectional:!1}],c=fa({});let u="accept";const d=[{label:n("nedge.page_rules_config.accept"),value:"accept"},{label:n("nedge.page_rules_config.deny"),value:"deny"}],p=fa({}),_=fa(0),f=fa(0),m=fa({}),h=fa(""),v=fa(""),g=fa({}),y=fa(""),w=fa(""),x=`${http_prefix}/lua/rest/v2/get/nedge/interfaces.lua`;let k;const $=fa([]),S=fa({}),C=fa({}),N=fa(""),A=yi((()=>M(m.value,v.value,h.value))),T=yi((()=>M(g.value,w.value,y.value))),E=fa(!0);async function P(e){let t=null;null!=e&&(t=e.source.value),"interface"==m.value.value?(await O(),S.value=null!=t?$.value.find((e=>e.value==t)):$.value[0]):(v.value=null!=e?e.source.value:"",j(h,m.value.value))}async function I(e){let t=null;null!=e&&(t=e.destination.value),"interface"==g.value.value?(await O(),C.value=null!=t?$.value.find((e=>e.value==t)):$.value[0]):(w.value=null!=e?e.destination.value:"",j(y,g.value.value))}function M(e,t,a){if("interface"==e.value)return!0;return new RegExp(a).test(t)}let U=!1;async function O(){if(1==U)return;null==k&&(k=b.http_request(x));let e=await k;$.value=e.filter((e=>"lan"==e.role)).map((e=>({label:e.label,value:e.ifname}))),U=!0}function j(e,t){e.value=$f.get_data_pattern(t)}const F=()=>{let e=m.value.value,t=v.value;"interface"==e&&(t=S.value.value);let n=g.value.value,l=w.value;"interface"==n&&(l=C.value.value);let s={src_type:e,src_value:t,dst_type:n,dst_value:l,policy:p.value.value,bidirectional:"bidirectional"==c.value.value},i="add";0==E.value&&(s.rule_id=_.value,s.new_rule_id=f.value,i="edit"),a(i,s),D()},D=()=>{l.value.close()};return t({show:(e,t)=>{!function(e,t){E.value=null==e,null!=t&&(u=t.value);if(0==E.value)s.value=n("nedge.page_rules_config.modal_rule_config.title_edit"),N.value=n("edit"),m.value=i.find((t=>t.value==e.source.type)),g.value=i.find((t=>t.value==e.destination.type)),c.value=r.find((t=>t.bidirectional==e.bidirectional)),p.value=d.find((t=>t.value==e.action)),_.value=e.rule_id,f.value=e.rule_id;else{s.value=n("nedge.page_rules_config.modal_rule_config.title_add"),N.value=n("add");let e=i.find((e=>1==e.default));m.value=e,g.value=e,c.value=r.find((e=>e.value==o)),p.value=d.find((e=>e.value!=u))}P(e),I(e)}(e,t),l.value.show()},close:D}),dl((()=>{})),(e,t)=>(Es(),js(mp,{onShowed:t[12]||(t[12]=e=>{}),ref_key:"modal_id",ref:l},{title:hn((()=>[Ws(ee(s.value),1)])),body:hn((()=>[Vs("div",nk,[Js(" Rule ID "),yl(Vs("div",lk,[Vs("div",sk,[Vs("label",ik,ee(n("nedge.page_rules_config.rule_id")),1),yl(Vs("input",{type:"text",class:"form-control","onUpdate:modelValue":t[0]||(t[0]=e=>f.value=e)},null,512),[[Uo,f.value]]),yl(Vs("input",{type:"hidden",class:"form-control","onUpdate:modelValue":t[1]||(t[1]=e=>_.value=e)},null,512),[[Uo,_.value]])])],512),[[Jo,!E.value]]),Js(" Source "),Vs("div",ok,[Vs("div",rk,[Vs("label",ck,ee(n("nedge.page_rules_config.modal_rule_config.source_type")),1),qs(Ld,{selected_option:m.value,"onUpdate:selected_option":t[2]||(t[2]=e=>m.value=e),onSelect_option:t[3]||(t[3]=e=>P()),options:i},null,8,["selected_option"])]),Vs("div",uk,[Vs("label",dk,ee(n("nedge.page_rules_config.source")),1),"interface"==m.value.value?(Es(),Os("div",pk,[qs(Ld,{selected_option:S.value,"onUpdate:selected_option":t[4]||(t[4]=e=>S.value=e),options:$.value},null,8,["selected_option","options"])])):(Es(),Os("div",_k,[yl(Vs("input",{type:"text",class:"form-control",pattern:h.value,"onUpdate:modelValue":t[5]||(t[5]=e=>v.value=e)},null,8,fk),[[Uo,v.value]])]))])]),Js(" Dest "),Vs("div",mk,[Vs("div",hk,[Vs("label",vk,ee(n("nedge.page_rules_config.modal_rule_config.dest_type")),1),qs(Ld,{selected_option:g.value,"onUpdate:selected_option":t[6]||(t[6]=e=>g.value=e),onSelect_option:t[7]||(t[7]=e=>I()),options:i},null,8,["selected_option"])]),Vs("div",gk,[Vs("label",bk,ee(n("nedge.page_rules_config.dest")),1),"interface"==g.value.value?(Es(),Os("div",yk,[qs(Ld,{selected_option:C.value,"onUpdate:selected_option":t[8]||(t[8]=e=>C.value=e),options:$.value},null,8,["selected_option","options"])])):(Es(),Os("div",wk,[yl(Vs("input",{type:"text",class:"form-control",pattern:y.value,"onUpdate:modelValue":t[9]||(t[9]=e=>w.value=e)},null,8,xk),[[Uo,w.value]])]))])]),Js(" Direction "),Vs("div",kk,[Vs("div",$k,[Vs("label",Sk,ee(n("nedge.page_rules_config.direction")),1),qs(Ld,{selected_option:c.value,"onUpdate:selected_option":t[10]||(t[10]=e=>c.value=e),options:r},null,8,["selected_option"])])]),Js(" Action "),Vs("div",Ck,[Vs("div",Nk,[Vs("label",Ak,ee(n("nedge.page_rules_config.action")),1),qs(Ld,{selected_option:p.value,"onUpdate:selected_option":t[11]||(t[11]=e=>p.value=e),options:d},null,8,["selected_option"])])])])])),footer:hn((()=>[Vs("button",{type:"button",disabled:!ba(A)||!ba(T),onClick:F,class:"btn btn-primary"},ee(N.value),9,Tk)])),_:1},512))}};fp("\ninput[data-v-50692d68]:invalid {\n  border-color: #ff0000;\n}\n"),Ek.__scopeId="data-v-50692d68",Ek.__file="http_src/vue/modal-nedge-add-rule-config.vue";const Pk={class:"container-fluid"},Ik={class:"row form-group mb-3"},Mk={class:"col col-md-12"},Uk={class:"form-label"};var Ok={__name:"modal-nedge-change-default-policy",emits:["apply"],setup(e,{expose:t,emit:a}){const n=fa(null),l=e=>i18n(e),s=l("nedge.page_rules_config.modal_change_default_policy.title"),i=[{label:l("nedge.page_rules_config.accept"),value:"accept"},{label:l("nedge.page_rules_config.deny"),value:"deny"}],o=fa({}),r=()=>{n.value.close()};function c(){a("apply",o.value.value),r()}return t({show:e=>{o.value=i.find((t=>t.value==e.value)),n.value.show()},close:r}),(e,t)=>(Es(),js(mp,{onShowed:t[1]||(t[1]=e=>{}),ref_key:"modal_id",ref:n},{title:hn((()=>[Ws(ee(ba(s)),1)])),body:hn((()=>[Vs("div",Pk,[Js(" Default Policy "),Vs("div",Ik,[Vs("div",Mk,[Vs("label",Uk,ee(l("nedge.page_rules_config.default policy")),1),qs(Ld,{selected_option:o.value,"onUpdate:selected_option":t[0]||(t[0]=e=>o.value=e),options:i},null,8,["selected_option"])])])])])),footer:hn((()=>[Vs("button",{type:"button",onClick:c,class:"btn btn-primary"},ee(l("apply")),1)])),_:1},512))},__file:"http_src/vue/modal-nedge-change-default-policy.vue"};const jk={class:"mb-2"},Fk=Vs("br",null,null,-1),Dk={class:"d-inline-block"},Lk={key:0,style:{color:"green"}},Rk={key:1,style:{color:"red"}},zk=[Vs("i",{class:"fas fa-cog"},null,-1)],Bk={id:"aggregated_live_flows"};var Vk={__name:"page-nedge-rules-config",props:{url:String,ifid:Number,csrf:String,columns_config:Array},setup(e){const t=e,a=e=>i18n(e),n=500,l=fa({}),s=fa(null),i=fa(null),o=fa(null),r=fa({});function c(e){_(e,`${http_prefix}/lua/rest/v2/edit/nedge/policy/rule.lua`)}function u(e){_(e,`${http_prefix}/lua/rest/v2/add/nedge/policy/rule.lua`)}async function d(e){if(null==e){const t=`${http_prefix}/lua/rest/v2/get/nedge/policy/default.lua`;e=(await b.http_request(t)).default_policy}r.value="accept"==e?{value:e,label:a("nedge.page_rules_config.accept")}:{value:e,label:a("nedge.page_rules_config.deny")}}async function p(e){const a=`${http_prefix}/lua/rest/v2/set/nedge/policy/default.lua`;let n=JSON.stringify({default_policy:e,csrf:t.csrf});await b.http_request(a,{method:"post",headers:{"Content-Type":"application/json"},body:n}),d(e),h()}function _(e,a){let n=JSON.stringify({...e,csrf:t.csrf});b.http_request(a,{method:"post",headers:{"Content-Type":"application/json"},body:n}),h()}function f(){o.value.show(r.value)}ul((async()=>{!function(){const e=[];let n={ifid:x.get_url_entry("ifid")||t.ifid},s=x.obj_to_url_params(n);e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,a,n){h()}},{text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){i.value.show(null,r.value)}});let o={table_buttons:e,data_url:`${t.url}?${s}`,enable_search:!1},c=[{columnName:a("nedge.page_rules_config.rule_id"),targets:0,name:"rule_id",data:"rule_id",className:"text-nowrap text-center",responsivePriority:1},{columnName:a("nedge.page_rules_config.source"),targets:0,name:"source",data:"source",className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,a){return null!=e.label&&""!=e.label?e.label:e.value}},{columnName:a("nedge.page_rules_config.dest"),targets:0,name:"dest",data:"destination",className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,a){return null!=e.label&&""!=e.label?e.label:e.value}},{columnName:a("nedge.page_rules_config.direction"),targets:0,name:"bidirectional",data:"bidirectional",className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,n){return a(1==e?"nedge.page_rules_config.bidirectional":"nedge.page_rules_config.source_to_dest")}},{columnName:a("nedge.page_rules_config.action"),targets:0,name:"action",data:"action",className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,n){let l="red",s=a("nedge.page_rules_config.deny");return"accept"==e&&(l="green",s=a("nedge.page_rules_config.accept")),`<span style="color:${l};">${s}</span>`}}].map((e=>e));c.push({columnName:a("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return m(a)}}),o.columns_config=c,l.value=o}(),d()}));const m=function(e){let a={handlerId:"delete_host",onClick:()=>{!async function(e){const a=`${http_prefix}/lua/rest/v2/delete/nedge/policy/rule.lua`;let n={"Content-Type":"application/json"},l=JSON.stringify({rule_id:e.rule_id,csrf:t.csrf});b.http_request(a,{method:"post",headers:n,body:l}),h()}(e)}},n={handlerId:"edit_rule",onClick:()=>{i.value.show(e)}};return DataTableUtils.createActionButtons([{class:"btn-secondary",handler:n,handlerId:"edit_rule",icon:"fa-edit",title:i18n("edit")},{class:"btn-danger",handler:a,handlerId:"delete_rule",icon:"fa-trash",title:i18n("delete")}])};function h(){setTimeout((()=>{x.reload_url()}),n)}return(e,t)=>(Es(),Os($s,null,[Vs("div",jk,[Vs("h2",null,ee(a("nedge.rules_config_title")),1),Fk,Vs("h5",Dk,[Ws(ee(a("nedge.page_rules_config.default policy"))+" ",1),"accept"==r.value?.value?(Es(),Os("span",Lk,ee(r.value?.label),1)):Js("v-if",!0),"deny"==r.value?.value?(Es(),Os("span",Rk,ee(r.value?.label),1)):Js("v-if",!0),Vs("small",null,[Vs("a",{href:"javascript:void(0)",style:{"margin-left":"0.5rem"},onClick:f},zk)])])]),Vs("div",Bk,[qs(Tm,{ref_key:"table_rules",ref:s,table_buttons:l.value.table_buttons,columns_config:l.value.columns_config,data_url:l.value.data_url,filter_buttons:l.value.table_filters,enable_search:l.value.enable_search,table_config:l.value.table_config},null,8,["table_buttons","columns_config","data_url","filter_buttons","enable_search","table_config"])]),qs(Ek,{ref_key:"modal_add_rule_config",ref:i,onAdd:u,onEdit:c},null,512),qs(Ok,{ref_key:"modal_change_default_policy",ref:o,onApply:p},null,512)],64))},__file:"http_src/vue/page-nedge-rules-config.vue"};const qk={key:0,class:"form-group ms-2 me-2 mt-3 row"},Hk={class:"col-form-label col-sm-4"},Gk={class:"col-8"},Wk={key:1,class:"form-group ms-2 me-2 mt-3 row"},Kk={class:"col-form-label col-sm-4"},Jk={class:"col-8"},Yk={class:"form-group ms-2 me-2 mt-3 row"},Zk={class:"col-form-label col-sm-4"},Xk={class:"col-8"},Qk=["placeholder"],e$=["disabled"],t$=["disabled"];var a$={__name:"modal-add-application",props:{page_csrf:String,ifid:String},emits:["add"],setup(e,{expose:t,emit:a}){const n=fa(null),l=fa(!1),s=e=>i18n(e),i=fa(!0);let o=i18n("add_application");const r=fa(i18n("details.custom_rules_placeholder")),c=fa({}),u=fa([]),d=fa(""),p=fa(""),_=fa(null),f=fa({}),m=[s("custom_categories.each_host_separate_line"),s("custom_categories.host_domain_or_port"),s("custom_categories.example_port_range"),s("custom_categories.domain_names_substrings")];const h=()=>{1==v()&&1==g()?i.value=!1:i.value=!0},v=()=>/^[A-Za-z0-9]*$/.test(p.value),g=()=>{let e=!0;return d.value.split("\n").forEach((t=>{e=e&&(/^((tcp|udp):(6553[0-5]|655[0-2][0-9]\d|65[0-4](\d){2}|6[0-4](\d){3}|[1-5](\d){4}|[1-9](\d){0,3}))$/.test(t)||/^((tcp|udp):(6553[0-5]|655[0-2][0-9]\d|65[0-4](\d){2}|6[0-4](\d){3}|[1-5](\d){4}|[1-9](\d){0,3})-(6553[0-5]|655[0-2][0-9]\d|65[0-4](\d){2}|6[0-4](\d){3}|[1-5](\d){4}|[1-9](\d){0,3}))$/.test(t)||/^((?!.* ).*)$/.test(t)||/^((([0-9][0-9]?|[0-1][0-9][0-9]|[2][0-4][0-9]|[2][5][0-5])\.){3}([0-9][0-9]?|[0-1][0-9][0-9]|[2][0-4][0-9]|[2][5][0-5])|[a-zA-Z0-9]*):(6553[0-5]|655[0-2][0-9]\d|65[0-4](\d){2}|6[0-4](\d){3}|[1-5](\d){4}|[1-9](\d){0,3})$/.test(t))})),e},b=()=>{a("add",{l7_proto_id:_.value,protocol_alias:p.value,category:c.value.id,custom_rules:d.value,is_edit_page:l.value}),y()},y=()=>{n.value.close()};return ul((()=>{})),t({show:e=>{p.value="",c.value=u.value[0],d.value="",l.value=!1,o=i18n("add_application"),null!=e&&(_.value=e.application_id,l.value=!0,o=i18n("edit_application"),function(e){c.value={id:e.category_id,label:e.category},d.value=e.custom_rules.replace(",","\n"),f.value=e,p.value=e.application}(e)),n.value.show()},close:y,loadCategoryList:e=>{u.value=function(e){let t=[];return e.sort(((e,t)=>e.name<t.name?-1:e.name>t.name?1:0)).forEach((e=>{let a={id:e.cat_id,label:e.name};t.push(a)})),t}(e)}}),(e,t)=>(Es(),js(mp,{onShowed:t[4]||(t[4]=e=>{}),ref_key:"modal_id",ref:n},{title:hn((()=>[Ws(ee(ba(o)),1)])),body:hn((()=>[yl(Vs("input",{class:"form-control",type:"text","onUpdate:modelValue":t[0]||(t[0]=e=>_.value=e),spellcheck:"false",hidden:""},null,512),[[Uo,_.value]]),0==l.value?(Es(),Os("div",qk,[Vs("label",Hk,[Vs("b",null,ee(s("app_name")),1)]),Vs("div",Gk,[yl(Vs("input",{class:"form-control",type:"text","onUpdate:modelValue":t[1]||(t[1]=e=>p.value=e),onInput:h,spellcheck:"false"},null,544),[[Uo,p.value]])])])):(Es(),Os("div",Wk,[Vs("label",Kk,[Vs("b",null,ee(s("category")),1)]),Vs("div",Jk,[qs(Ld,{selected_option:c.value,"onUpdate:selected_option":t[2]||(t[2]=e=>c.value=e),options:u.value},null,8,["selected_option","options"])])])),Vs("div",Yk,[Vs("label",Zk,[Vs("b",null,ee(s("category_custom_rule")),1)]),Vs("div",Xk,[yl(Vs("textarea",{class:"form-control",onInput:h,placeholder:r.value,rows:"6","onUpdate:modelValue":t[3]||(t[3]=e=>d.value=e),spellcheck:"false"},null,40,Qk),[[Uo,d.value]])])])])),footer:hn((()=>[qs(Sy,{note_list:m}),0==l.value?(Es(),Os("button",{key:0,type:"button",onClick:b,class:"btn btn-primary",disabled:i.value},ee(s("add")),9,e$)):(Es(),Os("button",{key:1,type:"button",onClick:b,class:"btn btn-primary",disabled:i.value},ee(s("apply")),9,t$))])),_:1},512))},__file:"http_src/vue/modal-add-application.vue"},n$={__name:"modal-delete-application",emits:["remove"],setup(e,{expose:t,emit:a}){const n=fa(null),l=e=>i18n(e),s=i18n("custom_categories.delete_app"),i=i18n("custom_categories.delete_app_confirm"),o=fa(null),r=()=>{a("remove",{protocol_alias:o.value}),c()},c=()=>{n.value.close()};return t({show:e=>{null!=e&&(o.value=e.application),n.value.show()},close:c}),(e,t)=>(Es(),js(mp,{onShowed:t[1]||(t[1]=t=>e.showed()),ref_key:"modal_id",ref:n},{title:hn((()=>[Ws(ee(ba(s)),1)])),body:hn((()=>[Ws(ee(ba(i)),1)])),footer:hn((()=>[Vs("button",{type:"button",onClick:r,class:"btn btn-primary"},ee(l("delete")),1)])),default:hn((()=>[yl(Vs("input",{class:"form-control",type:"text","onUpdate:modelValue":t[0]||(t[0]=e=>o.value=e),spellcheck:"false",hidden:""},null,512),[[Uo,o.value]])])),_:1},512))},__file:"http_src/vue/modal-delete-application.vue"};const l$=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1);var s$={__name:"page-edit-applications",props:{page_csrf:String,ifid:String,has_protos_file:Boolean},setup(e){const t=e,a=fa(null),n=fa(null),l=fa(null),s=fa({}),i=fa([]),o=fa(null),r=fa(!0);let c="";const u=`${http_prefix}/lua/rest/v2/get/l7/category/consts.lua`,d=`${http_prefix}/lua/rest/v2/edit/application/application.lua`,p=`${http_prefix}/lua/rest/v2/delete/application/application.lua`,_=e=>i18n(e),f=async e=>{const a={csrf:t.page_csrf,ifid:t.ifid},n=NtopUtils.buildURL(p,{...a,...e});await $.get(n,(function(e,t){v(i18n("custom_categories.succesfully_removed"))}))},m=async e=>{const a=e.is_edit_page;e.is_edit_page=null;const n={csrf:t.page_csrf,ifid:t.ifid},l=NtopUtils.buildURL(d,{...n,...e});await $.get(l,(function(e,t){"success"==t&&v(a?i18n("custom_categories.succesfully_edited"):i18n("custom_categories.succesfully_added"))}))},h=e=>{l.value.show(e)},v=e=>{c=e,r.value=!1,setTimeout((()=>{r.value=!0,g()}),4e3)},g=()=>{a.value.reload()};ul((async()=>{!function(){const e=[];t.has_protos_file&&e.push({text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){h()}});e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(){g()}});let a={table_buttons:e,data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/ntopng/applications.lua`,{ifid:t.ifid}),enable_search:!0,table_config:{serverSide:!1,order:[[0,"asc"]]}},n=[{columnName:i18n("application"),name:"application",data:"application",className:"text-nowrap",responsivePriority:1},{columnName:i18n("category"),name:"category",data:"category",className:"text-nowrap",responsivePriority:1,render:function(e,t,a){return e}},{columnName:i18n("custom_categories.custom_hosts"),name:"custom_rules",data:"custom_rules",className:"text-nowrap",responsivePriority:2},{visible:!1,name:"application_hosts",data:"application_hosts"},{visible:!1,name:"application_id",data:"application_id"},{visible:!1,name:"category_id",data:"category_id"},{columnName:_("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return b(a)}}],l=ntopng_utility.clone(a);l.columns_config=n,s.value=l}()})),dl((async()=>{await(async()=>{await $.get(u,(function(e,t){i.value=e.rsp})),l.value.loadCategoryList(i.value)})()})),ml((async()=>{a.value.destroy_table()}));const b=function(e){const t=[{class:"btn-secondary",handler:{handlerId:"edit_rule",onClick:()=>{h(e)}},icon:"fa-edit",title:i18n("edit"),class:"pointer"}];if(e.is_custom){let a={handlerId:"delete_rule",onClick:()=>{var t;t=e,n.value.show(t)}};t.push({class:"btn-secondary",handler:a,icon:"fa-trash",title:i18n("delete"),class:"pointer"})}return DataTableUtils.createActionButtons(t)};return(t,u)=>(Es(),Os($s,null,[l$,yl(Vs("div",{ref_key:"update_message",ref:o,class:"alert alert-info"},ee(ba(c)),513),[[Jo,!r.value]]),qs(a$,{ref_key:"modal_add_application",ref:l,category_list:i.value,page_csrf:e.page_csrf,ifid:e.ifid,onAdd:m},null,8,["category_list","page_csrf","ifid"]),qs(n$,{ref_key:"modal_delete_application",ref:n,onRemove:f},null,512),qs(Tm,{ref_key:"applications_table",ref:a,table_buttons:s.value.table_buttons,columns_config:s.value.columns_config,data_url:s.value.data_url,enable_search:s.value.enable_search,table_config:s.value.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])],64))},__file:"http_src/vue/page-edit-applications.vue"},i$={components:{modal:mp,"select-search":Ld},props:{id:String,filters_options:Array},updated(){},data(){return{i18n:e=>i18n(e),jQuery:$,id_modal:`${this.$props.id}_modal`,filter_type_selected:[],filter_type_label_selected:null,operator_selected:[],option_selected:[],input_value:null,data_pattern_selected:null,input_required:!1,options_to_show:null,operators_to_show:[]}},emits:["apply"],created(){},async mounted(){await ntopng_sync.on_ready(this.id_modal),ntopng_events_manager.on_custom_event(this.$props.id,ntopng_custom_events.SHOW_MODAL_FILTERS,(e=>this.show(e))),ntopng_sync.ready(this.$props.id)},methods:{show:function(e){null!=this.$props.filters_options&&0!=this.$props.filters_options.length&&(null!=e?(this.filter_type_selected=e,this.change_filter(e)):(this.filter_type_selected=this.$props.filters_options[0],this.change_filter()),this.$refs.modal.show())},post_change:function(e,t){e.id&&this.$props.filters_options&&(this.filter_type_selected=this.$props.filters_options.find((t=>t.id==e.id))),e.value&&(this.options_to_show?this.option_selected=this.options_to_show.find((t=>t.value==e.value)):(this.option_selected=[],this.input_value=e.value,this.data_pattern_selected=this.get_data_pattern(t))),e.operator&&this.operators_to_show&&(this.operator_selected=this.operators_to_show.find((t=>t.id==e.operator)))},change_operator_type:function(e){e!=[]&&(this.operator_selected=e)},change_data_filter:function(e){e!=[]&&(this.option_selected=e)},change_filter:function(e){this.options_to_show=null,this.option_selected=null,this.input_value=null;let t=this.$props.filters_options.find((e=>e.id==this.filter_type_selected.id));null!=t&&(this.operators_to_show=t.operators,this.filter_type_label_selected=t.label,null!=t.options?(this.options_to_show=t.options.sort(((e,t)=>null==e||null==e.label?-1:null==t||null==t.label?1:e.label.toString().localeCompare(t.label.toString()))),this.option_selected||(this.option_selected=this.options_to_show[0])):(this.options_to_show=null,this.data_pattern_selected=this.get_data_pattern(t.value_type)),t.operators&&0==this.operator_selected.length&&(this.operator_selected=t.operators[0]),null!=e&&this.post_change(e,t.value_type))},get_data_pattern:function(e){return this.input_required=!0,"text"==e?(this.input_required=!1,".*"):$f.get_data_pattern(e)},check_disable_apply:function(){let e=new RegExp(this.data_pattern_selected);return!this.options_to_show&&(this.input_required&&(null==this.input_value||""==this.input_value)||0==e.test(this.input_value))},apply:function(){let e=this.input_value,t=this.input_value;if(null==e||null!=this.option_selected&&0!=this.option_selected.length){let a=this.filters_options.find((e=>e.id==this.filter_type_selected.id)),n=a.options.find((e=>e.value==this.option_selected.value));e=n.value,t=n.value_label||n.label}else null==e&&(e="");let a={id:this.filter_type_selected.id,label:this.filter_type_label_selected,operator:this.operator_selected.id,value:e,value_label:t};this.$emit("apply",a),ntopng_events_manager.emit_custom_event(ntopng_custom_events.MODAL_FILTERS_APPLY,a),this.close()},close:function(){this.$refs.modal.close()}}};const o$=e=>(_n("data-v-3119c83e"),e=e(),fn(),e),r$={autocomplete:"off"},c$={class:"form-group row"},u$=o$((()=>Vs("label",{class:"col-form-label col-sm-3",for:"dt-filter-type-select"},[Vs("b",null,"Filter")],-1))),d$={class:"col-sm-8"},p$=o$((()=>Vs("hr",null,null,-1))),_$={class:"dt-filter-template-container form-group row"},f$={class:"col-form-label col-sm-3"},m$={class:"col-sm-8"},h$={class:"input-group mb-3"},v$={class:"input-group-prepend col-sm-3"},g$={key:0,class:"col-sm-9"},b$=["pattern","required"],y$={style:{margin:"0px",padding:"0"},class:"alert invalid-feedback"},w$=["disabled"];fp("\ninput ~ .alert[data-v-3119c83e] {\n  display: none;\n}\ninput:invalid ~ .alert[data-v-3119c83e] {\n  display: block;\n}\n"),i$.render=function(e,t,a,n,l,s){const i=xl("select-search"),o=xl("modal");return Es(),js(o,{id:l.id_modal,ref:"modal"},{title:hn((()=>[Ws(ee(l.i18n("alerts_dashboard.add_filter")),1)])),body:hn((()=>[Vs("form",r$,[Vs("div",c$,[u$,Vs("div",d$,[qs(i,{selected_option:l.filter_type_selected,"onUpdate:selected_option":t[0]||(t[0]=e=>l.filter_type_selected=e),id:"filter_type",options:a.filters_options,onSelect_option:t[1]||(t[1]=e=>s.change_filter())},null,8,["selected_option","options"])])]),p$,Vs("div",_$,[Vs("label",f$,[Vs("b",null,ee(l.filter_type_label_selected),1)]),Vs("div",m$,[Vs("div",h$,[Vs("div",v$,[qs(i,{selected_option:l.operator_selected,"onUpdate:selected_option":t[2]||(t[2]=e=>l.operator_selected=e),id:"operator_filter",options:l.operators_to_show,onSelect_option:s.change_operator_type},null,8,["selected_option","options","onSelect_option"])]),l.options_to_show?(Es(),Os("div",g$,[qs(i,{selected_option:l.option_selected,"onUpdate:selected_option":t[3]||(t[3]=e=>l.option_selected=e),id:"data_filter",options:l.options_to_show,onSelect_option:s.change_data_filter},null,8,["selected_option","options","onSelect_option"])])):(Es(),Os($s,{key:1},[yl(Vs("input",{"onUpdate:modelValue":t[4]||(t[4]=e=>l.input_value=e),pattern:l.data_pattern_selected,name:"value",required:l.input_required,type:"text",class:"form-control"},null,8,b$),[[Uo,l.input_value]]),Vs("span",y$,ee(l.i18n("invalid_value")),1)],64))]),Js(" end div input-group mb-3 ")]),Js(" end div form-group-row ")])])])),footer:hn((()=>[Vs("button",{type:"button",disabled:s.check_disable_apply(),onClick:t[5]||(t[5]=(...e)=>s.apply&&s.apply(...e)),class:"btn btn-primary"},ee(l.i18n("apply")),9,w$)])),_:1},8,["id"])},i$.__scopeId="data-v-3119c83e",i$.__file="http_src/vue/modal-filters.vue";let x$,k$,$$=[];const S$=!0;let C$,N$,A$=null!=window.location.toString().match(/alert_stats.lua/),T$={value:ntopng_url_manager.get_url_entry("query_preset"),count:ntopng_url_manager.get_url_entry("count")};null==T$.value&&(T$.value="");let E$=ntopng_url_manager.get_url_entry("status");null!=E$&&""!=E$||(E$="historical");const P$=!A$;let I$=function(e){let t=ntopng_url_manager.get_url_entry("page");return null==t&&(t=e?"all":"overview"),t}(A$);const M$=async function(){$$=await async function(e,t){let a;if(e)a=`${base_path}/lua/rest/v2/get/alert/filter/consts.lua?page=${t}`;else{let e=ntopng_url_manager.get_url_entry("query_preset");null==e&&(e=""),a=`${base_path}/lua/pro/rest/v2/get/db/filter/consts.lua?page=${t}&query_preset=${e}`}return await ntopng_utility.http_request(a)}(A$,I$),$$.filter((e=>null==e.label)).forEach((e=>{console.error(`label not defined for filter ${JSON.stringify(e)}`),e.label=""})),$$.sort(((e,t)=>e.label.localeCompare(t.label))),i18n_ext.tags={},x$={},k$={},$$.forEach((e=>{i18n_ext.tags[e.id]=e.label,e.operators.forEach((e=>x$[e.id]=e.label)),k$[e.id]=e.operators.map((e=>e.id))}));let e=ntopng_url_manager.get_url_entries(),t=[];for(const[a,n]of e){let e=$$.find((e=>e.id==a));if(null!=e){n.split(",").forEach((a=>{let[n,l]=a.split(";");null==l||null==n||""==l||null!=e.options&&null==e.options.find((e=>e.value==n))||t.push({id:e.id,operator:l,value:n})}))}}return t};var U$={props:{id:String},components:{"data-time-range-picker":Rd,"modal-filters":i$},created(){},async mounted(){let e=ntopng_sync.on_ready(this.id_data_time_range_picker);if(ntopng_sync.on_ready(this.id_modal_filters),await e,this.enable_query_presets&&await async function(e){let t=e.page,a=`${base_path}/lua/pro/rest/v2/get/db/preset/consts.lua?page=${t}`,n=await ntopng_utility.http_request(a),l=n[0].list.map((e=>({value:e.id,name:e.name,count:e.count,builtin:!0})));if(n.length>1&&n[1].list.forEach((e=>{let t={value:e.id,name:e.name,count:e.count};l.push(t)})),null==e.query_preset||""==e.query_preset.value)e.query_preset=l[0];else{let t=l.find((t=>t.value==e.query_preset.value));e.query_preset=t}return ntopng_url_manager.set_key_to_url("query_preset",e.query_preset.value),ntopng_url_manager.set_key_to_url("count",e.query_preset.count),e.query_presets=l,n}(this),"all"!=this.page){let e=await M$();N$=function(e){const t=new Tagify(e.$refs.tagify,{duplicates:!0,delimiters:null,dropdown:{enabled:1,classname:"extra-properties"},autoComplete:{enabled:!1},templates:{tag:function(e){try{return`<tag title='${e.value}' contenteditable='false' spellcheck="false" class='tagify__tag ${e.class?e.class:""}' ${this.getAttributes(e)}>\n                        <x title='remove tag' class='tagify__tag__removeBtn'></x>\n                        <div>\n                            ${e.label?`<b>${e.label}</b>&nbsp;`:""}\n                            ${!S$&&e.operators?`<select class='operator'>${e.operators.map((t=>`<option ${e.selectedOperator===t?"selected":""} value='${t}'>${x$[t]}</option>`)).join()}</select>`:`<b class='operator'>${e.selectedOperator?x$[e.selectedOperator]:"="}</b>`}&nbsp;\n                            <span class='tagify__tag-text'>${e.value}</span>\n                        </div>\n                    </tag>`}catch(e){console.error(`An error occured when creating a new tag: ${e}`)}}},validate:function(e){return void 0!==e.key&&void 0!==e.selectedOperator&&void 0!==e.value}});$(document).ready((function(){t.addTags(C$)}));const a=async function(e){"number"==typeof e.realValue&&(e.realValue=""+e.realValue),"number"==typeof e.value&&(e.value=""+e.value);let a=t.getTagElms().find((t=>t.getAttribute("key")===e.key&&t.getAttribute("realValue")===e.realValue));void 0===t.tagData(a)&&(k$[e.key]&&!Array.isArray(k$[e.key])&&(e.operators=k$[e.key].operators),e.selectedOperator||(e.selectedOperator="eq"),t.addTags([e]))};return t.on("remove",(async function(e){const t=e.detail.data.key,a=e.detail.data.realValue,n=ntopng_status_manager.get_status();if(void 0===t)return;if(null==n.filters)return;const l=n.filters.filter((e=>e.id!=t||e.id==t&&e.value!=a));ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:l})})),t.on("add",(async function(e){const a=e.detail;if(void 0===a.data)return;return a.data.key?void 0:(t.removeTags([e.detail.tag]),e.preventDefault(),void e.stopPropagation())})),t.on("click",(async function(t){const a=t.detail;if(void 0===a.data)return;if(void 0===a.data.key)return;const n=a.data;e.edit_tag=n,ntopng_events_manager.emit_custom_event(ntopng_custom_events.SHOW_MODAL_FILTERS,{id:n.key,operator:n.selectedOperator,value:n.realValue})})),t.on("edit:updated",(async function(e){console.warn("UPDATED")})),$("tags").on("change","select.operator",(async function(e){console.warn("TAGS change")})),{tagify:t,addFilterTag:a}}(this),ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:e}),ntopng_events_manager.on_event_change(this.$props.id,ntopng_events.FILTERS_CHANGE,(e=>this.reload_status(e)),!0)}this.modal_data=$$,ntopng_sync.ready(this.$props.id)},data(){return{i18n:i18n,id_modal_filters:`${this.$props.id}_modal_filters`,id_data_time_range_picker:`${this.$props.id}_data-time-range-picker`,show_filters:!1,edit_tag:null,is_alert_stats_url:A$,query_presets:[],query_preset:T$,status_view:E$,enable_query_presets:P$,page:I$,modal_data:[],last_filters:[]}},methods:{is_filter_defined:function(e){return null!=k$[e.id]},update_status_view:function(e){ntopng_url_manager.set_key_to_url("status",e),ntopng_url_manager.reload_url()},update_select_query_presets:function(){ntopng_url_manager.get_url_params(),ntopng_url_manager.set_key_to_url("query_preset",this.query_preset.value),ntopng_url_manager.set_key_to_url("count",this.query_preset.count),ntopng_url_manager.reload_url()},show_modal_filters:function(){this.$refs.modal_filters.show()},remove_filters:function(){ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:[]})},reload_status:function(e){let t=e.filters;if(null==t)return;ntopng_url_manager.delete_params($$.map((e=>e.id))),N$.tagify.removeAllTags();let a=function(e){if(null==e)return{};let t={};e.forEach((e=>{let a=t[e.id];null==a&&(a=[],t[e.id]=a),a.push(e)}));let a={};for(let e in t){let n=t[e].filter((e=>null!=e.value&&null!=e.operator&&""!=e.operator)).map((e=>`${e.value};${e.operator}`)).join(",");a[e]=n}return a}(t);ntopng_url_manager.add_obj_to_url(a),t.forEach((e=>{let t=function(e){let t=$$.find((t=>t.id==e.id));null==t&&console.error("create_tag_from_filter: filter const not found;");let a=e.value;if(null!=t.options){let n=t.options.find((t=>t.value==e.value));null!=n&&(a=n.label)}const n={label:t.label,key:t.id,value:a,realValue:e.value,title:`${t.label}${e.operator}${a}`,selectedOperator:e.operator};return""==n.value&&(n.value="''"),null==n.realValue||null==n.selectedOperator||""==n.selectedOperator?null:n}(e);null!=t&&N$.addFilterTag(t)})),this.last_filters=t},apply_modal:function(e){let t=ntopng_status_manager.get_status().filters;null==t&&(t=[]),null!=this.edit_tag&&(t=t.filter((e=>e.id!=this.edit_tag.key||e.value!=this.edit_tag.realValue)),this.edit_tag=null),t.push(e),ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:t})}}};const O$=e=>(_n("data-v-aaee59ea"),e=e(),fn(),e),j$={style:{width:"100%"}},F$={class:"mb-1"},D$={key:0,class:"d-flex align-items-center me-2"},L$={class:"btn-group",id:"statusSwitch",role:"group"},R$=["value"],z$=["label"],B$=["value"],V$={key:0,class:"d-flex mt-1",style:{width:"100%"}},q$=["placeholder"],H$=[O$((()=>Vs("span",null,[Vs("i",{class:"fas fa-plus","data-original-title":"",title:"Add Filter"})],-1)))],G$=[O$((()=>Vs("i",{class:"fas fa-times"},null,-1)))];fp("\n.tagify__input[data-v-aaee59ea] {\n  min-width: 175px;\n}\n.tagify__tag[data-v-aaee59ea] {\n  white-space: nowrap;\n  margin: 3px 0px 5px 5px;\n}\n.tagify__tag select.operator[data-v-aaee59ea] {\n  margin: 0px 4px;\n  border: 1px solid #c4c4c4;\n  border-radius: 4px;\n}\n.tagify__tag b.operator[data-v-aaee59ea] {\n  margin: 0px 4px;\n  background-color: white;\n  border: 1px solid #c4c4c4;\n  border-radius: 4px;\n  padding: 0.05em 0.2em;\n}\n.tagify__tag > div[data-v-aaee59ea] {\n  display: flex;\n  align-items: center;\n}\n"),U$.render=function(e,t,a,n,l,s){const i=xl("modal-filters"),o=xl("data-time-range-picker");return Es(),Os("div",j$,[Vs("div",F$,[qs(i,{filters_options:l.modal_data,onApply:s.apply_modal,ref:"modal_filters",id:l.id_modal_filters},null,8,["filters_options","onApply","id"]),qs(o,{id:l.id_data_time_range_picker},{begin:hn((()=>[l.is_alert_stats_url?(Es(),Os("div",D$,[Vs("div",L$,[Vs("a",{href:"#",onClick:t[0]||(t[0]=e=>s.update_status_view("historical")),class:W(["btn btn-sm",{active:"historical"==l.status_view,"btn-seconday":"historical"!=l.status_view,"btn-primary":"historical"==l.status_view}])},"Past",2),Vs("a",{href:"#",onClick:t[1]||(t[1]=e=>s.update_status_view("acknowledged")),class:W(["btn btn-sm",{active:"acknowledged"==l.status_view,"btn-seconday":"acknowledged"!=l.status_view,"btn-primary":"acknowledged"==l.status_view}])},"Ack",2),"flow"!=l.page?(Es(),Os("a",{key:0,href:"#",onClick:t[2]||(t[2]=e=>s.update_status_view("engaged")),class:W(["btn btn-sm",{active:"engaged"==l.status_view,"btn-seconday":"engaged"!=l.status_view,"btn-primary":"engaged"==l.status_view}])},"Engaged",2)):Js("v-if",!0)])])):Js("v-if",!0),l.enable_query_presets?yl((Es(),Os("select",{key:1,class:"me-2 form-select","onUpdate:modelValue":t[3]||(t[3]=e=>l.query_preset=e),onChange:t[4]||(t[4]=e=>s.update_select_query_presets())},[(Es(!0),Os($s,null,Al(l.query_presets,(e=>(Es(),Os($s,null,[1==e.builtin?(Es(),Os("option",{key:0,value:e},ee(e.name),9,R$)):Js("v-if",!0)],64)))),256)),"analysis"!=l.page?(Es(),Os("optgroup",{key:0,label:l.i18n("queries.queries")},[(Es(!0),Os($s,null,Al(l.query_presets,(e=>(Es(),Os($s,null,[e.builtin?Js("v-if",!0):(Es(),Os("option",{key:0,value:e},ee(e.name),9,B$))],64)))),256))],8,z$)):Js("v-if",!0)],544)),[[Do,l.query_preset]]):Js("v-if",!0)])),extra_buttons:hn((()=>[El(e.$slots,"extra_range_buttons")])),_:3},8,["id"])]),Js(" tagify "),"all"!=l.page?(Es(),Os("div",V$,[Vs("input",{class:"w-100 form-control h-auto",name:"tags",ref:"tagify",placeholder:l.i18n("show_alerts.filters")},null,8,q$),yl(Vs("button",{class:"btn btn-link","aria-controls":"flow-alerts-table",type:"button",id:"btn-add-alert-filter",onClick:t[5]||(t[5]=(...e)=>s.show_modal_filters&&s.show_modal_filters(...e))},H$,512),[[Jo,l.modal_data&&l.modal_data.length>0]]),yl(Vs("button",{"data-bs-toggle":"tooltip","data-placement":"bottom",title:"{{ i18n('show_alerts.remove_filters') }}",onClick:t[6]||(t[6]=(...e)=>s.remove_filters&&s.remove_filters(...e)),class:"btn ms-1 my-auto btn-sm btn-remove-tags"},G$,512),[[Jo,l.modal_data&&l.modal_data.length>0]])])):Js("v-if",!0),Js(" end tagify ")])},U$.__scopeId="data-v-aaee59ea",U$.__file="http_src/vue/range-picker.vue";var W$={components:{},props:{chart_options:Object},watch:{chart_options:function(e,t){this.reloaded_table()}},emits:[],created(){},data:()=>({total:0,percentile_sent:0,percentile_rcvd:0,avg_sent:0,avg_rcvd:0,max_sent:0,max_rcvd:0}),async mounted(){},methods:{reloaded_table:function(){let e=ntopChartApex.chartOptionsUtility.getApexYFormatter(ntopChartApex.chartOptionsUtility.apexYFormatterTypes.bps.id),t=ntopChartApex.chartOptionsUtility.getApexYFormatter(ntopChartApex.chartOptionsUtility.apexYFormatterTypes.bytes.id),a=this.chart_options.statistics.total,n=this.chart_options.statistics.by_serie[0].max_val,l=this.chart_options.statistics.by_serie[1].max_val,s=this.chart_options.statistics.by_serie[0].average,i=this.chart_options.statistics.by_serie[1].average,o=this.chart_options.statistics.by_serie[0]["95th_percentile"],r=this.chart_options.statistics.by_serie[1]["95th_percentile"];this.max_sent=e(8*n),this.max_rcvd=e(8*l),this.avg_sent=e(8*s),this.avg_rcvd=e(8*i),this.percentile_sent=e(8*o),this.percentile_rcvd=e(8*r),this.total=t(a)}}};const K$={class:"table table-borderless graph-statistics mb-2",style:{}},J$=Vs("thead",{class:"text-center"},[Vs("tr",null,[Vs("th",{class:"graph-val-total-title fs-6",style:{"border-left-width":"1px","border-top-width":"1px"}}," Total:"),Vs("th",{class:"graph-val-95percentile-title fs-6",style:{"border-left-width":"1px","border-top-width":"1px"}},[Ws("95th "),Vs("a",{href:"https://en.wikipedia.org/wiki/Percentile"},"Percentile"),Ws(":")]),Vs("th",{class:"graph-val-average-title fs-6",style:{"border-left-width":"1px","border-top-width":"1px"}},"Average:"),Vs("th",{class:"graph-val-max-title fs-6",style:{"border-left-width":"1px","border-top-width":"1px","border-right-width":"1px"}},"Max:")])],-1),Y$={class:"graph-val-total text-center",style:{"border-width":"1px"}},Z$={class:"graph-val-95percentile text-center",style:{"border-top-width":"1px","border-right-width":"1px","border-bottom-width":"1px"}},X$=Vs("br",null,null,-1),Q$={class:"graph-val-average text-center",style:{"border-top-width":"1px","border-right-width":"1px","border-bottom-width":"1px"}},eS=Vs("br",null,null,-1),tS={class:"graph-val-max text-center",style:{"border-bottom-width":"1px","border-top-width":"1px","border-right-width":"1px"}},aS=Vs("br",null,null,-1);W$.render=function(e,t,a,n,l,s){return Es(),Os("div",null,[Vs("table",K$,[J$,Vs("tbody",null,[Vs("tr",null,[Vs("td",Y$,[Vs("span",null,ee(l.total),1)]),Vs("td",Z$,[Vs("span",null,[Ws(ee(l.percentile_sent)+" [Sent]",1),X$,Ws(ee(l.percentile_rcvd)+" [Rcvd]",1)])]),Vs("td",Q$,[Vs("span",null,[Ws(ee(l.avg_sent)+" Kbit/s [Sent]",1),eS,Ws(ee(l.avg_rcvd)+" [Rcvd]",1)])]),Js(' <td class="graph-val-min" style="display:none;border-bottom-width: 1px;border-top-width: 1px;border-right-width: 1px;">nil: <span></span></td> '),Vs("td",tS,[Vs("span",null,[Ws(ee(l.max_sent)+" [Sent]",1),aS,Ws(ee(l.max_rcvd)+" [Rcvd]",1)])])])])])])},W$.__file="http_src/vue/simple-table.vue";const nS={key:0,class:"alert alert-info",id:"empty-message"},lS=["id"];var sS={__name:"sankey",props:{id:String,page_csrf:String,url:String,url_params:Array,extra_settings:Object},setup(e,{expose:t}){const a=e,n=fa(!1);const l=e=>i18n(e);return dl((()=>{})),t({updateData:async function(e){NtopUtils.showOverlays();const t=function(){let e={};return a.url_params.forEach((t=>{e[t]=ntopng_url_manager.get_url_entry(t)})),NtopUtils.buildURL(a.url,e)}();await $.get(t,(function(e,t){const l=e.rsp;if(l.length>0){let e=function(e){let t={...uy.getDefaultSankeySettings(),...a.extra_settings};const n=d3v7.map(e,t.linkSource).map(A),l=d3v7.map(e,t.linkTarget).map(A),s=d3v7.map(e,t.linkSourceNode).map(A),i=d3v7.map(e,t.linkTargetNode).map(A),o=d3v7.map(e,t.linkLink).map(A),r=d3v7.map(e,t.linkValue),c=d3v7.map(e,t.linkColor),u=d3v7.map(e,t.sourceColor),d=d3v7.map(e,t.targetColor),p=d3v7.map(e,t.sourceLink),_=d3v7.map(e,t.targetLink);let f=e,m=Array.from(d3v7.union(n,l),(e=>({id:e})));const h=d3v7.map(m,t.nodeId).map(A);t.nodeGroups=d3v7.map(m,t.nodeGroup).map(A),m=d3v7.map(m,((e,t)=>({id:h[t]}))),f=d3v7.map(f,((e,t)=>({source:n[t],target:l[t],value:r[t],source_node:s[t],target_node:i[t],link:o[t],color:c[t],source_color:u[t],target_color:d[t],source_link:p[t],target_link:_[t]})));const v=d3v7.scaleOrdinal(t.nodeGroups,t.colors),g=d3v7.map(m,t.nodeLabel),b=d3v7.map(m,t.nodeTitle),y=d3v7.map(f,t.linkTitle);let w=d3v7.sankey().nodeId((({index:e})=>h[e])).nodeAlign(t.nodeAlign).nodeWidth(t.nodeWidth).nodePadding(t.nodePadding).extent([[t.marginLeft,t.marginTop],[t.width-t.marginRight,t.height-t.marginBottom]])({nodes:m,links:f});const x=d3v7.create("svg").attr("viewBox",[0,0,t.width,t.height]).attr("style","max-width: 100%; height: 60vh; height: intrinsic;");let k,$;const S=t.width,C=x.append("g").attr("fill","none").attr("stroke-opacity",t.linkStrokeOpacity).selectAll("g").data(f).join("g").style("mix-blend-mode",t.linkMixBlendMode).append("path").attr("d",t.linkPath).attr("stroke",(({color:e})=>e)).attr("stroke-width",(({width:e})=>Math.max(1,e))).call(y?e=>e.append("title").text((({index:e})=>y[e])):()=>{}),N=d3v7.drag().on("start",(function(e,t){const a=d3v7.select(this);k=a.attr("x")-e.x,$=a.attr("y")-e.y})).on("drag",(function(e,t){d3v7.select(this).attr("x",e.x+k).attr("y",e.y+$),w=d3v7.sankey().update(w),C.selectAll("path").data(w.links,(function(e){return e}))}));function A(e){return null!==e&&"object"==typeof e?e.valueOf():e}return x.append("g").attr("stroke",t.nodeStroke).attr("stroke-width",t.nodeStrokeWidth).attr("stroke-opacity",t.nodeStrokeOpacity).attr("stroke-linejoin",t.nodeStrokeLinejoin).selectAll("rect").data(m).join("rect").call(N).on("dblclick",(function(e){const t=(e=e.currentTarget.__data__).sourceLinks,a=e.targetLinks,n=t&&t[0]?t[0]:a[0];n&&(n.source.id===e.id?n.source_link&&""!==n.source_link&&window.open(n.source_link,"_blank"):n.target.id===e.id&&n.target_link&&""!==n.target_link&&window.open(n.target_link,"_blank"))})).attr("x",(e=>e.x0)).attr("y",(e=>e.y0)).attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("cursor","pointer").attr("fill",(e=>{const a=e.sourceLinks;let n=v(t.nodeGroups[e.index]);return a&&a[0]&&(a[0].source.id===e.id?a[0].source_color&&""!==a[0].source_color&&(n=a[0].source_color):a[0].target.id===e.id&&a[0].target_color&&""!==a[0].target_color&&(n=a[0].target_color)),n})).append("title").text((({index:e})=>b[e])),x.append("g").attr("font-family","sans-serif").attr("font-size",10).selectAll("text").data(m).join("text").attr("x",(e=>e.x0<S/2?e.x1+t.nodeLabelPadding:e.x0-t.nodeLabelPadding)).attr("y",(e=>(e.y1+e.y0)/2)).attr("dy","0.35em").attr("text-anchor",(e=>e.x0<t.width/2?"start":"end")).text((({index:e})=>g[e])),Object.assign(x.node(),{scales:{color:v}})}(l);n.value=!1,$(`#${a.id}`).empty(),$(`#${a.id}`).append(e)}else $(`#${a.id}`).empty(),n.value=!0})),NtopUtils.hideOverlays()}}),(t,a)=>(Es(),Os($s,null,[n.value?(Es(),Os("div",nS,ee(l("flows_page.no_data")),1)):Js("v-if",!0),Vs("div",{class:"d-flex justify-content-center align-items-center",id:e.id},null,8,lS)],64))},__file:"http_src/vue/sankey.vue"};const iS=e=>(_n("data-v-7e5acce0"),e=e(),fn(),e),oS={class:"mb-3 row"},rS={class:"col-form-label col-sm-4"},cS={class:"col-sm-6"},uS={class:"btn-group btn-group-toggle","data-bs-toggle":"buttons"},dS=iS((()=>Vs("hr",null,null,-1))),pS={class:"host-alert-fields"},_S={class:"mb-3 row"},fS={class:"col-form-label col-sm-4"},mS={class:"col-sm-6"},hS={value:""},vS={value:"0"},gS={disabled:""},bS=["value"],yS={class:"flow-alert-fields"},wS={class:"mb-3 row"},xS={class:"col-form-label col-sm-4"},kS={class:"col-sm-6"},$S={value:""},SS={value:"0"},CS={disabled:""},NS=["value"],AS={key:0,class:"ip-fields"},TS={class:"mb-3 row"},ES={class:"col-form-label col-sm-4"},PS={class:"col-sm-6"},IS=["pattern"],MS={key:1,class:"network-fields"},US={class:"mb-3 row"},OS={class:"col-form-label col-sm-4"},jS={class:"col-sm-4 pr-0"},FS=["pattern"],DS={class:"col-sm-2 ps-4 pe-0"},LS=iS((()=>Vs("span",{class:"me-2"},"/",-1))),RS={class:"mb-3 row"},zS={class:"col-form-label col-sm-4"},BS={class:"col-sm-6"},VS={class:"mb-3 row"},qS={class:"col-form-label col-sm-4"},HS={key:0},GS={key:1},WS={class:"col-sm-6"},KS=["pattern"],JS=["pattern"],YS=iS((()=>Vs("hr",{class:"separator mt-5"},null,-1))),ZS={class:"form-group row"},XS={class:"col-form-label"},QS={class:"mt-1"},eC=["placeholder"],tC=["disabled"];var aC={__name:"modal-add-check-exclusion",props:{alert_exclusions_page:String,host_alert_types:Array,flow_alert_types:Array},emits:["add"],setup(e,{expose:t,emit:a}){const n=e,l=fa(null);fa(null);const s=fa("ip"),i=fa(""),o=fa(""),r=fa(0),c=fa(""),u=fa(""),d=fa(""),p=fa(""),_=fa(null),f=i18n("details.comment_placeholder"),m=fa(null),h=fa(null);function v(e){if("text"==e)return NtopUtils.REGEXES.non_quoted_text;if("ip"==e){let e=NtopUtils.REGEXES.ipv4,t=e.replace("$","@[0-9]{0,5}$"),a=NtopUtils.REGEXES.ipv6,n=a.replaceAll("$","@[0-9]{0,5}$");return`(${e})|(${t})|(${a})|(${n})`}return"hostname"==e?`${NtopUtils.REGEXES.singleword}|[a-zA-Z0-9._-]{3,250}@[0-9]{0,5}$`:"certificate"==e?NtopUtils.REGEXES.tls_certificate:NtopUtils.REGEXES[e]}let g=v("ip"),b=v("text"),y=v("certificate");const w=e=>{s.value=e},x=()=>{let e=null,t=!0;return"hosts"==n.alert_exclusions_page?(e=new RegExp(g),t="ip"==s.value?null==i.value||""==i.value||0==e.test(i.value)||""==u.value&&""==d.value:null==o.value||""==o.value||0==e.test(o.value)||""==u.value&&""==d.value||null==p.value||""==p.value||parseInt(p.value)<1||parseInt(p.value)>127):"domain_names"==n.alert_exclusions_page?(e=new RegExp(b),t=null==c.value||""==c.value||0==e.test(c.value)):"tls_certificate"==n.alert_exclusions_page&&(e=new RegExp(y),t=null==c.value||""==c.value||0==e.test(c.value)),t},k=()=>{l.value.close()},$=()=>{let e,t=i.value;"hosts"==n.alert_exclusions_page?("network"==s.value&&(t=`${o.value}/${p.value}`),null!=r.value&&0!=r.value&&(t=`${t}@${r.value}`),e={alert_addr:t,host_alert_key:u.value,flow_alert_key:d.value}):"domain_names"==n.alert_exclusions_page?e={alert_domain:c.value}:"tls_certificate"==n.alert_exclusions_page&&(e={alert_certificate:c.value}),e.label=_.value,m.value&&(e.old_type=h.value.type,e.old_subdir=h.value.subdir,e.old_alert_domain=h.value.alert_domain,e.old_alert_certificate=h.value.alert_certificate,e.old_alert_addr=h.value.alert_addr,e.old_flow_alert_key=h.value.flow_alert_key,e.old_host_alert_key=h.value.host_alert_key),a("add",e),k()};t({show:e=>{if(e)if(m.value=!0,h.value=e,_.value=e.label,"host"==e.type){let t=e.alert_addr.split("/"),a=e.alert_addr.split("@");t.length>1?(s.value="network",o.value=t[0],p.value=t[1],i.value=""):(s.value="ip",i.value=a[0],o.value="",p.value=""),a.length>1?r.value=a[1]:r.value=0,null!=e.host_alert_key?u.value=""+e.host_alert_key:u.value="",null!=e.flow_alert_key?d.value=""+e.flow_alert_key:d.value=""}else"domain"==e.type?c.value=e.alert_domain:c.value=e.alert_certificate;else s.value="ip",i.value="",o.value="",r.value=0,u.value="",d.value="",p.value="",c.value="",_.value="";l.value.show()},close:k}),dl((()=>{}));const S=e=>i18n(e);return(t,a)=>(Es(),js(mp,{onShowed:a[11]||(a[11]=e=>{}),ref_key:"modal_id",ref:l},{title:hn((()=>[Ws(ee(S("check_exclusion.add_exclusion")),1)])),body:hn((()=>["hosts"==e.alert_exclusions_page?(Es(),Os($s,{key:0},[Js(" modal hosts "),Vs("div",oS,[Vs("label",rS,[Vs("b",null,ee(S("check_exclusion.member_type")),1)]),Vs("div",cS,[Vs("div",uS,[Vs("label",{class:W([{active:"ip"==s.value},"btn btn-secondary"])},[Vs("input",{class:"btn-check",type:"radio",name:"member_type",value:"ip",onClick:a[0]||(a[0]=e=>w("ip"))}),Ws(" "+ee(S("check_exclusion.ip_address")),1)],2),Vs("label",{class:W([{active:"network"==s.value},"btn btn-secondary"])},[Vs("input",{onClick:a[1]||(a[1]=e=>w("network")),class:"btn-check",type:"radio",name:"member_type",value:"network"}),Ws(" "+ee(S("check_exclusion.network")),1)],2)])])]),dS,Vs("div",pS,[Vs("div",_S,[Vs("label",fS,[Vs("b",null,ee(S("check_exclusion.host_alert_type")),1)]),Vs("div",mS,[yl(Vs("select",{name:"value",class:"form-select alert-select","onUpdate:modelValue":a[2]||(a[2]=e=>u.value=e)},[Vs("option",hS,ee(S("check_exclusion.none")),1),Vs("option",vS,ee(S("check_exclusion.exclude_all_alerts")),1),Vs("option",gS,ee(S("check_exclusion.spacing_bar")),1),(Es(!0),Os($s,null,Al(e.host_alert_types,(e=>(Es(),Os($s,null,[null!=e?(Es(),Os("option",{key:0,value:e.alert_id},ee(e.label),9,bS)):Js("v-if",!0)],64)))),256))],512),[[Do,u.value]])])])]),Vs("div",yS,[Vs("div",wS,[Vs("label",xS,[Vs("b",null,ee(S("check_exclusion.flow_alert_type")),1)]),Vs("div",kS,[yl(Vs("select",{id:"flow-alert-select",name:"value",class:"form-select alert-select","onUpdate:modelValue":a[3]||(a[3]=e=>d.value=e)},[Vs("option",$S,ee(S("check_exclusion.none")),1),Vs("option",SS,ee(S("check_exclusion.exclude_all_alerts")),1),Vs("option",CS,ee(S("check_exclusion.spacing_bar")),1),(Es(!0),Os($s,null,Al(e.flow_alert_types,(e=>(Es(),Os($s,null,[null!=e?(Es(),Os("option",{key:0,value:e.alert_id},ee(e.label),9,NS)):Js("v-if",!0)],64)))),256))],512),[[Do,d.value]])])])]),"ip"==s.value?(Es(),Os("div",AS,[Vs("div",TS,[Vs("label",ES,[Vs("b",null,ee(S("check_exclusion.ip_address")),1)]),Vs("div",PS,[yl(Vs("input",{pattern:ba(g),placeholder:"192.168.1.1",required:"",type:"text",name:"ip_address",class:"form-control","onUpdate:modelValue":a[4]||(a[4]=e=>i.value=e)},null,8,IS),[[Uo,i.value]])])])])):Js("v-if",!0),"network"==s.value?(Es(),Os("div",MS,[Vs("div",US,[Vs("label",OS,[Vs("b",null,ee(S("check_exclusion.network")),1)]),Vs("div",jS,[yl(Vs("input",{required:"",style:{width:"calc(100% - 10px)"},name:"network",class:"form-control d-inline",placeholder:"172.16.0.0",pattern:ba(g),"onUpdate:modelValue":a[5]||(a[5]=e=>o.value=e)},null,8,FS),[[Uo,o.value]])]),Vs("div",DS,[LS,yl(Vs("input",{placeholder:"24",required:"",class:"form-control d-inline w-75",min:"1",max:"127",type:"number",name:"cidr","onUpdate:modelValue":a[6]||(a[6]=e=>p.value=e)},null,512),[[Uo,p.value]])])])])):Js("v-if",!0),Vs("div",RS,[Vs("label",zS,[Vs("b",null,ee(S("vlan")),1)]),Vs("div",BS,[yl(Vs("input",{placeholder:"0",min:"0",type:"number","onUpdate:modelValue":a[7]||(a[7]=e=>r.value=e),class:"form-control"},null,512),[[Uo,r.value]])])])],64)):Js("v-if",!0),Js(" mdoal hosts "),"hosts"!=e.alert_exclusions_page?(Es(),Os($s,{key:1},[Js(" modal domain_names"),Vs("div",null,[Vs("div",VS,[Vs("label",qS,["domain_names"==e.alert_exclusions_page?(Es(),Os("b",HS,ee(S("check_exclusion.domain")),1)):Js("v-if",!0),"tls_certificate"==e.alert_exclusions_page?(Es(),Os("b",GS,ee(S("check_exclusion.tls_certificate")),1)):Js("v-if",!0)]),Vs("div",WS,["domain_names"==e.alert_exclusions_page?yl((Es(),Os("input",{key:0,placeholder:"",pattern:ba(b),required:"",type:"text",name:"ip_address",class:"form-control","onUpdate:modelValue":a[8]||(a[8]=e=>c.value=e)},null,8,KS)),[[Uo,c.value]]):Js("v-if",!0),"tls_certificate"==e.alert_exclusions_page?yl((Es(),Os("input",{key:1,placeholder:"CN=813845657003339838, O=Code42, OU=TEST, ST=MN, C=U",pattern:ba(y),required:"",type:"text",name:"ip_address",class:"form-control","onUpdate:modelValue":a[9]||(a[9]=e=>c.value=e)},null,8,JS)),[[Uo,c.value]]):Js("v-if",!0)])])])],64)):Js("v-if",!0),Js(" modal comment"),YS,Vs("div",ZS,[Vs("div",null,[Vs("label",XS,[Vs("b",null,ee(S("show_alerts.add_a_comment")),1)])]),Vs("div",QS,[yl(Vs("textarea",{placeholder:ba(f),id:"alert-label",name:"label",rows:"3",class:"form-control",type:"text","onUpdate:modelValue":a[10]||(a[10]=e=>_.value=e),maxlength:"450"},null,8,eC),[[Uo,_.value]])])])])),footer:hn((()=>[Vs("button",{type:"button",disabled:x(),onClick:$,class:"btn btn-primary"},ee(S("add")),9,tC)])),_:1},512))}};fp("\ninput[data-v-7e5acce0]:invalid {\n  border-color: #ff0000;\n}  \n"),aC.__scopeId="data-v-7e5acce0",aC.__file="http_src/vue/modal-add-check-exclusion.vue";const nC=e=>(_n("data-v-19c5b1f1"),e=e(),fn(),e),lC=["innerHTML"],sC={class:"form-group mb-3"},iC=["innerHTML"],oC={class:"alert_label"},rC={class:"form-check"},cC={class:"form-check-label"},uC={key:0,class:"form-check"},dC={class:"form-check-label"},pC={class:"form-check"},_C={class:"form-check-label"},fC={class:"form-check"},mC={class:"form-check-label"},hC={key:0,class:"exclude-domain-certificate"},vC={class:"alert_label"},gC={key:0,class:"form-check"},bC={class:"form-check-label whitespace"},yC=["pattern","disabled"],wC={key:1,class:"form-check"},xC={class:"form-check-label whitespace"},kC=["disabled","pattern"],$C={key:0,class:"form-group row"},SC={class:"col-form-label"},CC={class:"mt-1"},NC=["placeholder"],AC={class:"separator"},TC=nC((()=>Vs("hr",{class:"separator"},null,-1))),EC={class:"form-group mb-3"},PC={class:"custom-control custom-switch"},IC={class:"custom-control-label"},MC={class:"alert alert-warning border",role:"alert"},UC=["disabled"];var OC={__name:"modal-alerts-filter",props:{alert:Object,page:String},emits:["exclude"],setup(e,{expose:t,emit:a}){const n=e,l=fa(null),s=fa("any"),i=fa(!0),o=fa(null),r=fa(null),c=fa(null),u=i18n("details.comment_placeholder");On((()=>n.alert),((e,t)=>{null!=e&&(s.value="any",i.value=!0,o.value=""==e.info?.value?null:e.info?.value,r.value=""==e.info?.issuerdn?null:e.info?.issuerdn)}));const d=()=>{if("domain"==s.value){let e=new RegExp(m);return null==o.value||0==e.test(o.value)}if("certificate"==s.value){let e=new RegExp(h);return null==r.value||0==e.test(r.value)}return!1},p=yi((()=>n.alert?.alert_name)),_=yi((()=>{let e={value:"",label:""};if("host"!=n.page||null==n.alert)return e;let t=n.alert;return e.value=t.ip.value,null!=t.vlan&&null!=t.vlan.value&&0!=t.vlan.value&&(e.value=e.value+"@"+t.vlan.value),e.label=t.ip.label?`${t.ip.label} (${t.ip.value})`:t.ip.value,e})),f=yi((()=>{let e={cli_value:"",cli_label:"",srv_value:"",srv_label:""};if("flow"!=n.page||null==n.alert)return e;let t=n.alert;e.cli_value=t.flow.cli_ip.value,e.srv_value=t.flow.srv_ip.value;let a=`${t.flow.cli_ip.label||t.flow.cli_ip.value}`,l=`${t.flow.srv_ip.label||t.flow.srv_ip.value}`;return null!=t.flow.vlan&&null!=t.flow.vlan.value&&0!=t.flow.vlan.value&&(a=`${a}@${t.flow.vlan.label}`,l=`${l}@${t.flow.vlan.label}`,e.cli_value=e.cli_value+"@"+t.flow.vlan.value,e.srv_value=e.srv_value+"@"+t.flow.vlan.value),a!==e.cli_value&&(a=`${a} (${e.cli_value})`),l!==e.srv_value&&(l=`${l} (${e.srv_value})`),e.cli_label=a,e.srv_label=l,e}));let m=NtopUtils.REGEXES.domain_name_not_strict,h=NtopUtils.REGEXES.tls_certificate;const v=()=>{let e=n.page,t="domain"==s.value||"certificate"==s.value?s.value:"host",l={delete_alerts:i.value,label:c.value,type:t},u=null;"host"==t?("host"==s.value?u=_.value.value:"server_host"==s.value?u=f.value.srv_value:"client_host"==s.value&&(u=f.value.cli_value),l.alert_addr=u,"flow"==e?l.flow_alert_key=n.alert.alert_id.value:"host"==e&&(l.host_alert_key=n.alert.alert_id.value)):"domain"==t?(l.delete_alerts=!1,l.alert_domain=o.value):"certificate"==t&&(l.delete_alerts=!1,l.alert_certificate=r.value),g(),a("exclude",l)},g=()=>{l.value.close()};t({show:()=>{c.value="",l.value.show()},close:g}),dl((()=>{}));const b=e=>i18n(e);return(t,a)=>(Es(),js(mp,{onShowed:a[10]||(a[10]=e=>{}),ref_key:"modal_id",ref:l},{title:hn((()=>[Ws(ee(b("exclude_check"))+": ",1),Vs("span",{innerHTML:ba(p)},null,8,lC)])),body:hn((()=>[Vs("div",sC,[Vs("div",null,[Vs("label",null,[Ws(ee(b("exclude_check"))+' "',1),Vs("b",{innerHTML:ba(p)},null,8,iC),Ws('". '),Vs("span",oC,ee(b("exclude_for"))+":",1)]),Vs("div",rC,[yl(Vs("input",{class:"form-check-input",type:"radio",value:"any","onUpdate:modelValue":a[0]||(a[0]=e=>s.value=e)},null,512),[[Fo,s.value]]),Vs("label",cC,[Vs("span",null,ee(b("show_alerts.filter_disable_check")),1)])]),"host"==e.page?(Es(),Os("div",uC,[yl(Vs("input",{class:"form-check-input",type:"radio",value:"host","onUpdate:modelValue":a[1]||(a[1]=e=>s.value=e)},null,512),[[Fo,s.value]]),Vs("label",dC,[Vs("span",null,ee(ba(_).label),1)])])):Js("v-if",!0),"flow"==e.page?(Es(),Os($s,{key:1},[Vs("div",pC,[yl(Vs("input",{class:"form-check-input",type:"radio",value:"client_host","onUpdate:modelValue":a[2]||(a[2]=e=>s.value=e)},null,512),[[Fo,s.value]]),Vs("label",_C,[Vs("span",null,ee(b("client"))+": "+ee(ba(f).cli_label),1)])]),Vs("div",fC,[yl(Vs("input",{class:"form-check-input",type:"radio",value:"server_host","onUpdate:modelValue":a[3]||(a[3]=e=>s.value=e)},null,512),[[Fo,s.value]]),Vs("label",mC,[Vs("span",null,ee(b("server"))+": "+ee(ba(f).srv_label),1)])])],64)):Js("v-if",!0)]),null!=o.value||null!=r.value?(Es(),Os("div",hC,[Vs("label",null,[Vs("span",vC,ee(b("check_exclusion.exclude_all_checks_for"))+":",1)]),null!=o.value?(Es(),Os("div",gC,[yl(Vs("input",{class:"form-check-input",type:"radio",value:"domain","onUpdate:modelValue":a[4]||(a[4]=e=>s.value=e)},null,512),[[Fo,s.value]]),Vs("label",bC,[Vs("span",null,ee(b("check_exclusion.domain"))+":",1)]),yl(Vs("input",{type:"text",pattern:ba(m),disabled:"domain"!=s.value,required:"","onUpdate:modelValue":a[5]||(a[5]=e=>o.value=e),class:"form-check-label custom-width"},null,8,yC),[[Uo,o.value]])])):Js("v-if",!0),null!=r.value?(Es(),Os("div",wC,[yl(Vs("input",{class:"form-check-input",type:"radio",value:"certificate","onUpdate:modelValue":a[6]||(a[6]=e=>s.value=e)},null,512),[[Fo,s.value]]),Vs("label",xC,[Vs("span",null,ee(b("check_exclusion.tls_certificate"))+":",1)]),yl(Vs("input",{type:"text",disabled:"certificate"!=s.value,"onUpdate:modelValue":a[7]||(a[7]=e=>r.value=e),pattern:ba(h),required:"",class:"form-check-label custom-width"},null,8,kC),[[Uo,r.value]])])):Js("v-if",!0)])):Js("v-if",!0)]),"any"!=s.value?(Es(),Os("div",$C,[Vs("div",null,[Vs("label",SC,[Vs("b",null,ee(b("show_alerts.add_a_comment")),1)])]),Vs("div",CC,[yl(Vs("textarea",{placeholder:ba(u),id:"alert-label",name:"label",rows:"3",class:"form-control",type:"text","onUpdate:modelValue":a[8]||(a[8]=e=>c.value=e),maxlength:"450"},null,8,NC),[[Uo,c.value]])])])):Js("v-if",!0),yl(Vs("hr",AC,null,512),[[Jo,i.value]]),"domain"!=s.value&&"certificate"!=s.value?(Es(),Os($s,{key:1},[yl(Vs("div",{class:"message alert alert-danger"},ee(b("show_alerts.confirm_delete_filtered_alerts")),513),[[Jo,i.value]]),TC,Vs("div",EC,[Vs("div",PC,[yl(Vs("input",{type:"checkbox",class:"custom-control-input whitespace","onUpdate:modelValue":a[9]||(a[9]=e=>i.value=e)},null,512),[[Oo,i.value]]),Vs("label",IC,ee(b("delete_disabled_alerts")),1)])])],64)):Js("v-if",!0),Vs("div",MC,ee(b("show_alerts.confirm_filter_alert")),1)])),footer:hn((()=>[Vs("button",{type:"button",onClick:v,disabled:d(),class:"btn btn-warning"},ee(b("filter")),9,UC)])),_:1},512))}};fp("\n.whitespace[data-v-19c5b1f1] {\n  margin-right: 0.2rem;\n}\n.custom-width[data-v-19c5b1f1] {\n  display: block;\n  min-width: 100%;\n}\ninput[data-v-19c5b1f1]:invalid {\n  border-color: #ff0000;\n}\n.exclude-domain-certificate[data-v-19c5b1f1] {\n  margin-top: 0.4rem;\n}\n"),OC.__scopeId="data-v-19c5b1f1",OC.__file="http_src/vue/modal-alerts-filter.vue";let jC={PageStats:Qm,PageAssetTable:oh,PagePeriodicityTable:yh,PageServiceTable:Fh,PageServiceMap:tv,PagePeriodicityMap:wv,PageAssetMap:zv,PageDeviceExclusions:Wg,PageHostTLS:sb,PageHostSSH:_b,PageHomeMap:wb,PageSankey:$b,PageHostRules:mw,PageAlertAnalysis:jw,PageHostMap:Ww,PageEditApplications:s$,PageVLANPortsFlowSankey:ix,PageTestTable:vx,PageTestNewTable:ak,NedgeRulesConfig:Vk,PageHostDetailsApplications:Cb,PageHostDetailsTraffic:Hb,PageHostDetailsPackets:ey,PageHostDetailsFlowSankey:ky,PageHostDetailsPorts:$w,PageAggregatedLiveFlows:mx,AlertInfo:km,Chart:Ud,Datatable:Tm,DateTimeRangePicker:Rd,NetworkMap:Xh,RangePicker:U$,PageNavbar:ig,SimpleTable:W$,SelectSearch:Ld,TabList:eh,Sankey:sS,NoteList:Sy,Loading:ay,ListTimeseries:h_,Modal:mp,ModalAddCheckExclusion:aC,ModalAlertsFilter:OC,ModalFilters:i$,ModalTimeseries:Jf,ModalTrafficExtraction:Yf,ModalDeleteConfirm:sh,ModalSnapshot:Yp,ModalAddDeviceExclusion:Mg,ModalEditDeviceExclusion:Gg,ModalAddHostRules:iw,ModalAddApplication:a$,ModalDeleteApplication:n$,Vue:Md};window.ntopVue=jC;var FC=["html","clone","append","<div />",'<div><hr><div style="margin-left: auto;margin-right: auto;padding-left: var(--bs-gutter-x,.75rem);padding-right: var(--bs-gutter-x,.75rem);width: 100%;"><div class="row mt-2"><div class="col-12 col-md-4 pl-md-0 text-center text-md-start"><span style="font-size: .875em;"><a href="https://www.ntop.org/products/traffic-analysis/ntop/" target="_blank" id="footer-ntop-version"></a> | <span id="footer-ntop-github"></span></span></div><div class="col-12 col-md-4 text-center"><span style="font-size: .875em;" id="footer-ntop-age"></span></div><div class="col-12 col-md-4 text-center text-md-end pr-md-0"><span style="font-size: .875em;"><i class="fas fa-clock" title="Server Time"></i> <div class="d-inline-block" id="footer-network-clock"></div> UTC | Uptime: <div class="d-inline-block" id="footer-network-uptime"></div></span></div></div></div></div>',"ntopng_release_info","|","split","#footer-ntop-version","#footer-ntop-github","© 1998-","ntop_age_to"," - ntop","#footer-ntop-age","body div main","parent","#footer-network-clock","","#footer-network-uptime","remove","localtime","uptime","chart_colors","on_custom_event","ready"];function DC(){const e=e=>$(FC[3])[FC[2]]($(e)[FC[1]]())[FC[0]]();let t=FC[4];const a=(()=>{let a=$(t),n=i18n(FC[5])[FC[7]](FC[6]);$(FC[8],a)[FC[0]](n[0]),$(FC[9],a)[FC[0]](n[1]);let l=`${FC[10]}${i18n(FC[11])}${FC[12]}`;return $(FC[13],a)[FC[0]](l),e(a)})(),n=()=>{$(FC[14])[FC[2]](a)};n();const l=()=>$(FC[16])[FC[15]]()[FC[15]]()[FC[15]]()[FC[15]]()[FC[15]]();ntopng_events_manager[FC[23]](FC[22],ntopng_custom_events.GET_INTERFACE_DATA,(t=>{0==(()=>{let t=l();if(null==t)return!1;let n=t[FC[1]]();$(FC[16],n)[FC[0]](FC[17]),$(FC[18],n)[FC[0]](FC[17]);const s=e(n);return a===s})()&&((()=>{let e=l();null!=e&&e[FC[19]]()})(),n()),(e=>{$(FC[16])[FC[0]](e[FC[20]]),$(FC[18])[FC[0]](e[FC[21]])})(t)}))}$(document)[FC[24]]((()=>DC()))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
