!function(){"use strict";Date.prototype.format=function(e){var t={"M+":this.getMonth()+1,"d+":this.getDate(),"h+":this.getHours(),"m+":this.getMinutes(),"s+":this.getSeconds(),"q+":Math.floor((this.getMonth()+3)/3),S:this.getMilliseconds()};for(var n in/(y+)/.test(e)&&(e=e.replace(RegExp.$1,(this.getFullYear()+"").substr(4-RegExp.$1.length))),t)new RegExp("("+n+")").test(e)&&(e=e.replace(RegExp.$1,1==RegExp.$1.length?t[n]:("00"+t[n]).substr((""+t[n]).length)));return e},jQuery.fn.extend({disable:function(e){return this.each((function(){var t=$(this);t.is("input, button, textarea, select")?this.disabled=e:t.toggleClass("disabled",e)}))}});const e=.005,t={ipv4:"^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",ipv6:"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$|^s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:)))(%.+)?s*$",domainName:"^(([a-zA-Z]{1})|([a-zA-Z]{1}[a-zA-Z]{1})|([a-zA-Z]{1}[0-9]{1})|([0-9]{1}[a-zA-Z]{1})|([a-zA-Z0-9][-_.a-zA-Z0-9]{1,61}[a-zA-Z0-9])).([a-zA-Z]{2,13}|[a-zA-Z0-9-]{2,30}.[a-zA-Z]{2,3})",port:"^([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$",latency:"^([0-9]*[.])?[0-9]+$",url:"^(https?://[^/\\s]+(/.*)?)$",emailUrl:"^smtps?://[-a-zA-Z0-9:.]{1,256}+$",macAddress:"^([0-9A-Fa-f]{2}:){5}([0-9A-Fa-f]{2})$",hostname:"^[a-zA-Z0-9._:-]{3,250}|^[a-zA-Z0-9._:-]{3,250}@[0-9]{0,5}",username:"^[a-zA-Z0-9._@!-?]{3,30}$",singleword:"^(?=[a-zA-Z0-9._:-]{3,253}$)(?!.*[_.:-]{2})[^_.:-].*[^_.:-]$",email:"^([a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:.[a-zA-Z0-9-]+)*)$",https:"^https?://.+$",token:"^[0-9a-f]{32}",score:"^[0-9]{1,5}",telegram_channel:"^[0-9-]{1,15}",password:"^[w/$!/()=?^*@_-]{5,31}$",tls_certificate:String.raw`^[^=,]+=[^=,]+(,\s[^=,]+=[^=,]+)*$`,domain_name_not_strict:String.raw`^[a-zA-Z0-9\-_~]+((\.[a-zA-Z0-9\-_~]+)+)$`,non_quoted_text:"^[a-zA-Z0-9.-_]+$"};class n{static toggleOverlays(e=500){$(".overlay").toggle(e)}static showOverlays(e=500){$(".overlay").fadeIn(e)}static hideOverlays(e=500){$(".overlay").fadeOut(e)}static get REGEXES(){return t}static getIPv4RegexWithCIDR(){const e=t.ipv4.length;return`${t.ipv4.substring(0,e-1)}(\\/?)(\\b([0-9]|[12][0-9]|3[0-2])?\\b)$`}static getIPv6RegexWithCIDR(){const e=t.ipv6.length;return`${t.ipv6.substring(0,e-1)}(\\/?)\\b([0-9]|[1-9][0-9]|1[01][0-9]|12[0-8])?\\b$`}static async resolveDNS(e="ntop.org"){try{const t=await fetch(`${http_prefix}/lua/rest/v2/get/dns/resolve.lua?hostname=${e}`);return await t.json()}catch(e){console.error(`Something went wrong when resolving hostname: ${e}`)}return{rc:-1,rc_str:"FAILED_HTTP_REQUEST"}}static initDataPatterns(){$("input[data-pattern]").each((function(){const e=$(this).data("pattern");if(!e)return void console.warn("An empty data-pattern on an input was found!",this);const n=e.split("|").map((e=>t[e].toString())).join("|");$(this).attr("pattern",n),$(this).removeAttr("data-pattern")}))}static is_good_ipv4(e){return new RegExp(t.ipv4).test(e)}static is_good_ipv6(e){return new RegExp(t.ipv6).test(e)}static is_mac_address(e){return new RegExp(t.macAddress).test(e)}static isNumeric(e){return/^\d+$/.test(e)}static is_network_mask(e,t){var a,l=e.split("/"),s=null;if(2!=l.length){if(!t)return null;a=e}else{if(a=l[0],!n.isNumeric(l[1]))return null;if((s=parseInt(l[1]))<0)return null}if(n.is_good_ipv4(a)){if(null===s)s=32;else if(s>32)return null;return{type:"ipv4",address:a,mask:s}}if(n.is_good_ipv6(l[0])){if(null===s)s=128;else if(s>128)return!1;return{type:"ipv6",address:a,mask:s}}return null}static fbits(t){const n=["bps","Kbps","Mbps","Gbps","Tbps"];if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 bps";var a=Math.log(t)/Math.log(1e3),l=parseInt(Math.floor(a));if(l<0||isNaN(l))l=0;else if(l>=n.length)return"> "+n[n.length-1];if(l<=1)return Math.round(t/Math.pow(1e3,l)*100)/100+" "+n[l];var s=parseFloat(t/Math.pow(1e3,l)).toFixed(2);return s%1==0&&(s=Math.round(s)),s+" "+n[l]}static export_rate(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 exps/s";var a=n.scaleValue(t,["exp/s","Kexp/s"],1e3);return Math.round(100*a[0])/100+" "+a[1]}static exports_format(t){if(void 0===t)return"-";var a=i18n_ext.exports.toLowerCase(),l=[a,"K "+a];if(0==t)return"0";if(t>0&&t<e)return"< 0.005 exps/s";var s=n.scaleValue(t,l,1e3);return Math.round(100*s[0])/100+" "+s[1]}static fbits_from_bytes(e){return void 0===e?"-":n.fbits(8*e)}static fpackets(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 pps";var a=n.scaleValue(t,["pps","Kpps","Mpps","Gpps","Tpps"],1e3);return Math.round(100*a[0])/100+" "+a[1]}static fpoints(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 pt/s";var a=n.scaleValue(t,["pt/s","Kpt/s","Mpt/s","Gpt/s","Tpt/s"],1e3);return Math.round(100*a[0])/100+" "+a[1]}static fflows(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 fps";var a=n.scaleValue(t,["fps","Kfps","Mfps","Gfps","Tfps"],1e3);return Math.round(100*a[0])/100+" "+a[1]}static fmsgs(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 mps";var a=n.scaleValue(t,["msg/s","Kmsg/s","Msg/s","Gmsg/s","Tmsg/s"],1e3);return Math.round(100*a[0])/100+" "+a[1]}static fmillis(e){if(void 0===e)return"-";const t=n.scaleValue(e,["ms"],1e3);return Math.round(100*t[0])/100+" "+t[1]}static fnone(e){return void 0===e?"-":Math.round(100*e)/100}static falerts(e){return void 0===e?"-":Math.round(100*e)/100+" alerts/s"}static fint(e){return void 0===e?"-":Math.round(e).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")}static ffloat(e){return void 0===e?"-":(Math.round(100*e)/100).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")}static fpercent(e){return void 0===e?"-":Math.round(100*e)/100+"%"}static fdate(e){return new Date(1e3*e)}static capitaliseFirstLetter(e){return e.charAt(0).toUpperCase()+e.slice(1)}static get_trend(e,t){return void 0===e||void 0===t||e==t?'<i class="fas fa-minus"></i>':e>t?'<i class="fas fa-arrow-up"></i>':'<i class="fas fa-arrow-down"></i>'}static abbreviateString(e,t){return e?e.length<t?e:e.substring(0,t)+"...":""}static toFixed2(e){return e?e.toFixed(2):""}static bytesToSize(e){if(void 0===e)return"-";var t=1024,n=1048576,a=1073741824,l=1099511627776;return e>=0&&e<t?parseFloat(e.toFixed(2))+" Bytes":e>=t&&e<n?parseFloat((e/t).toFixed(2))+" KB":e>=n&&e<a?parseFloat((e/n).toFixed(2))+" MB":e>=a&&e<l?parseFloat((e/a).toFixed(2))+" GB":e>=l?parseFloat((e/l).toFixed(2))+" TB":parseFloat(e.toFixed(2))+" Bytes"}static drawTrend(e,t,n){return e==t?'<i class="fas fa-minus"></i>':e>t?'<i class="fas fa-arrow-up"'+n+"></i>":'<i class="fas fa-arrow-down"></i>'}static toggleAllTabs(e){!0===e?$("#historical-tabs-container").find("li").removeClass("disabled").find("a").attr("data-toggle","tab"):$("#historical-tabs-container").find("li").addClass("disabled").find("a").removeAttr("data-toggle")}static disableAllDropdownsAndTabs(){$("select").each((function(){$(this).prop("disabled",!0)})),n.toggleAllTabs(!1)}static enableAllDropdownsAndTabs(){$("select").each((function(){$(this).prop("disabled",!1)})),n.toggleAllTabs(!0)}static capitalize(e){return e&&e[0].toUpperCase()+e.slice(1)}static addCommas(e){for(var t=(e+="").split("."),n=t[0],a=t.length>1?"."+t[1]:"",l=/(\d+)(\d{3})/;l.test(n);)n=n.replace(l,"$1,$2");return n+a}static scaleValue(e,t,n,a){if(0==e)return[0,t[0]];let l=a?10*a:10;var s=parseInt(Math.floor(Math.log(e)/Math.log(n)));return s<0||isNaN(s)?s=0:s>=t.length&&(s=t.length-1),[Math.round(e/Math.pow(n,s)*l)/l,t[s]]}static formatValue(t,a){if(0==t)return"0";if(t>0&&t<e)return"< 0.005";null==a&&(a=0);var l=n.scaleValue(t,["","K","M","G","T"],1e3,a);return l[0]+l[1]}static formatPackets(e){return n.addCommas(e.toFixed(0))+" Pkts"}static bytesToVolume(t){if(0==t)return"0 Bytes";if(t>0&&t<e)return"< 0.005 Bytes";var a=n.scaleValue(t,["Bytes","KB","MB","GB","TB"],1024);return parseFloat(a[0])+" "+a[1]}static bytesToVolumeAndLabel(e){if(0==e)return"0 Bytes";var t=parseInt(Math.floor(Math.log(e)/Math.log(1024)));return[(e/Math.pow(1024,t)).toFixed(2),["Bytes","KB","MB","GB","TB"][t]]}static bitsToSize(t,a){a=a||1e3;if(0==t)return"0 bps";if(t>0&&t<e)return"< 0.005 bps";var l=n.scaleValue(t,["bps","Kbps","Mbps","Gbps","Tbps"],a);return l[0].toFixed(2)+" "+l[1]}static secondsToTime(e){if(e<1)return"< 1 sec";let t=Math.floor(e/86400),n=Math.floor(e/3600-24*t),a=Math.floor(e/60-1440*t-60*n),l=e%60,s="",i=[];if(t>0){let e=Math.floor(t/365);e>0&&(t%=365,s=e+" year",e>1&&(s+="s"),i.push(s),s=""),s=t+" day",t>1&&(s+="s"),i.push(s),s=""}return n>0&&(n<10&&(s="0"),s+=n+":"),a<10&&(s+="0"),s+=a+":",l<10&&(s+="0"),s+=l,i.push(s),i.join(", ")}static msecToTime(e){return e>=1e3?n.secondsToTime(e/1e3):(Math.round(1e3*e)/1e3).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")+" ms"}static epoch2Seen(e){var t=new Date(1e3*e),a=Math.floor((new Date).getTime()/1e3-e);return t.format("dd/MM/yyyy hh:mm:ss")+" ["+n.secondsToTime(a)+" ago]"}static graphGetXAxisTicksFormat(e){return e<=86400?"%H:%M:%S":e<=172800?"%b %e, %H:%M:%S":"%b %e"}static paramsExtend(e,t){return $.extend({},e,t)}static paramsToForm(e,t){for(var n in e=$(e),t){if(t.hasOwnProperty(n))$('<input type="hidden" name="'+n+'" value="'+t[n]+'">').appendTo(e)}return e}static paramsPairsEncode(e){var t=0,n={};for(var a in e)n["key_"+t]=a,n["val_"+t]=e[a],t+=1;return n}static hostkey2hostInfo(e){return(e=(e=(e=e.replace(/____/g,":")).replace(/___/g,"/")).replace(/__/g,".")).split("@")}static handle_tab_state(e,t){$("a",e).click((function(e){e.preventDefault()})),$(" > li > a",e).on("shown.bs.tab",(function(e){var t=$(e.target).attr("href").substr(1);history.replaceState?history.replaceState(null,null,"#"+t):window.location.hash=t}));var n=window.location.hash;n||(n="#"+t),$('a[href="'+n+'"]',e).tab("show")}static _add_find_host_link(e,t,n){$("<input>").attr({type:"hidden",id:t,name:t,value:n}).appendTo(e)}static makeFindHostBeforeSubmitCallback(e){return function(t,a){return a.context&&"historical"==a.context?(t.attr("action",e+"/lua/pro/db_search.lua"),"ip"==a.type?n._add_find_host_link(t,"ip",a.ip):"mac"==a.type?n._add_find_host_link(t,"mac",a.mac):n._add_find_host_link(t,"name",a.hostname?a.hostname:a.name)):"mac"==a.type?t.attr("action",e+"/lua/mac_details.lua"):"network"==a.type?(t.attr("action",e+"/lua/hosts_stats.lua"),n._add_find_host_link(t,"network",a.network)):"snmp"==a.type?(t.attr("action",e+"/lua/pro/enterprise/snmp_interface_details.lua"),n._add_find_host_link(t,"snmp_port_idx",a.snmp_port_idx)):"snmp_device"==a.type?t.attr("action",e+"/lua/pro/enterprise/snmp_device_details.lua"):"asn"==a.type?(t.attr("action",e+"/lua/hosts_stats.lua"),n._add_find_host_link(t,"asn",a.asn)):(t.attr("action",e+"/lua/host_details.lua"),n._add_find_host_link(t,"mode","restore")),!0}}static tstampToDateString(e,t,n){n=n||0;var a=parseInt(e.html())+n,l=d3.time.format(t)(new Date(1e3*a));return e.html(l).removeClass("hidden"),l}static noHtml(e){return e.replace(/<[^>]+>/g,"")}static cleanCustomHostUrl(e){return e.replace(/^http:\/\//gi,"").replace(/^https:\/\//gi,"").replace(/^www\./gi,"").replace(/[^0-9a-zA-Z\.:\/_-]/gi,"")}static parseQuery(e){for(var t={},n=("?"===e[0]?e.substr(1):e).split("&"),a=0;a<n.length;a++){var l=n[a].split("=");t[decodeURIComponent(l[0])]=decodeURIComponent(l[1]||"")}return t}static getHistoryParameters(e){var t=n.parseQuery(window.location.search),a=$.extend(t,e),l="?"+$.param(a,!0);return[location.protocol,"//",location.host,location.pathname].join("")+l}static check_status_code(e,t,n){const a=200!=e;if(a&&null!=n){let a=i18n_ext.request_failed_message;e&&t&&(a+=`: ${e} - ${t}`),n.text(a).show()}else a&&null==n&&alert(`${i18n_ext.request_failed_message}: ${e} - ${t}`);return a}static importModalHelper(e){if(!e.loadConfigXHR)throw"importModalHelper:: Missing 'loadConfigXHR' param";$("input#import-input").on("change",(function(){$(this).val().replace("C:\\fakepath\\",""),$("#btn-confirm-import").removeAttr("disabled")})),$("#import-modal").on("hidden.bs.modal",(function(){$("#import-input").val(""),$("#import-error").hide().removeClass("text-warning").addClass("invalid-feedback"),$("#btn-confirm-import").attr("disabled","disabled")})),$("#import-modal").on("submit","form",(function(t){t.preventDefault();const n=$("#btn-confirm-import");n.attr("disabled","");const a=$("#import-input")[0].files[0];if(!a)return $("#import-error").text(`${i18n_ext.no_file}`).show(),void n.removeAttr("disabled");const l=new FileReader;l.readAsText(a,"UTF-8"),l.onload=function(){let t=null;try{t=JSON.parse(l.result)}catch(e){}if(!t)return $("#import-error").text(i18n_ext.rest_consts[responseJSON.rc_str]||"Not Implemented Yet").show(),void n.removeAttr("disabled");e.loadConfigXHR(l.result).done(((t,n,a)=>{if(t.rc<0)return void $("#import-error").text(t.rc_str).show();e.successCallback&&e.successCallback(t);const l="all"==$("input[name='configuration']:checked").val()?i18n_ext.manage_configurations.messagges.import_all_success:i18n_ext.manage_configurations.messagges.import_success;ToastUtils.showToast({id:"import-configuration-alert",level:"success",title:i18n_ext.success,body:l,delay:2e3}),$("#import-modal").modal("hide")})).fail((({responseJSON:t})=>{e.failureCallback&&e.failureCallback(t),t&&t.rc>0||(-28==t.rc&&$("#import-error").removeClass("invalid-feedback").addClass("text-warning"),$("#import-error").text(i18n_ext.rest_consts[t.rc_str]||i18n_ext.FAILED_HTTP_REQUEST).show())})).always((()=>{n.removeAttr("disabled")}))}}))}static serializeFormArray(e){const t={};return e.forEach((e=>{e.name.includes("[]")||("string"==typeof e.value&&(e.value=e.value.trim()),t[e.name]=e.value)})),t}static cleanForm(e){$(e).find("input,select,textarea").each((function(e,t){$(this).removeClass("is-valid").removeClass("is-invalid")})),$(e)[0].reset()}static fetchWithTimeout(e,t={},n=5e3){const a=new AbortController,l={...t,signal:a.signal};return setTimeout((()=>{a.abort()}),n),fetch(e,l).then((e=>{if(!e.ok)throw new Error(`${e.status}: ${e.statusText}`);return e})).catch((e=>{if("AbortError"===e.name)throw new Error("Response timed out")}))}static setPref(e,t,n,a){if(null==e)return void console.warn("An action key must be defined to set a preference!");const l=()=>{},s=$.post(`${http_prefix}/lua/update_prefs.lua`,{action:e,csrf:t});s.done(n||l),s.fail(a||l)}static arrayToListString(e,t){return null==e?"":e.length>t?e.slice(0,t).join(", ")+` ${i18n_ext.and_x_more.replace("$num",e.length-t)}`:e.slice(0,t).join(", ")}static buildURL(e,t={},n=!1,a={}){const l=new URL(e,window.location);for(const[e,n]of Object.entries(t))(n||0===n)&&l.searchParams.set(e,n);if(n){const e=new URL(window.location.href);for(const[t,n]of Object.entries(a))n&&e.searchParams.set(t,n);l.searchParams.set("referer",e.toString())}return l.toString()}static getEditPoolLink(e,t){const n=new URL(e,window.location);return n.searchParams.set("pool_id",t),n.toString()}static getPoolLink(e,t=0){return`${http_prefix}/lua/rest/v2/get/${e}/pools.lua?pool=${t}`}static async getPool(e,t=0){if(null===e)throw"A pool type must be defined!";try{const a=await fetch(n.getPoolLink(e,t)),l=await a.json();return l.rc<0?[!1,{}]:[!0,l.rsp[0]]}catch(e){return[!1,{}]}}static saveElementScale(e,t={width:0,height:0}){const a=n.generateScaleElementKey(e);localStorage.setItem(a,JSON.stringify(t))}static generateScaleElementKey(e){let t;const n=location.pathname,a=e.attr("id");if(""!==a)t=a;else{t=e.attr("class")}return`${t}-${n}-scale`}static loadElementScale(e){const t=n.generateScaleElementKey(e),a=localStorage.getItem(t);if(null!=a)return JSON.parse(a)}static fillFieldIfValid(e,t){void 0===t?e.val(""):e.val(t)}static copyToClipboard(e,t){const n=document.createElement("textarea");n.value=e,n.setAttribute("readonly",""),n.style.position="absolute",n.style.left="-9999px",document.body.appendChild(n),n.select(),document.execCommand("copy"),document.body.removeChild(n),$(t).attr("title","Copied!").tooltip("dispose").tooltip().tooltip("show"),$(t).removeAttr("data-bs-original-title"),$(t).attr("title",e)}static stripTags(e){let t=document.createElement("div");return t.innerHTML=e,t.textContent||t.innerText||""}static shortenLabel(e,t,n){let a=e;if(e.length>t+5){let l=t;if(n){l=e.lastIndexOf(n);const s=e.slice(l);t>l&&(t=l),a=e.slice(0,t)+"... "+s}else a=e.slice(0,t)+"..."}return a}static sortAlphabetically(e,t){const n=e.label.toUpperCase(),a=t.label.toUpperCase();return n<a?-1:n>a?1:0}static createProgressBar(e){return`<div class="d-flex flex-row">\n              <div class="col-9 progress">\n                <div class="progress-bar bg-warning" aria-valuenow="${e}" aria-valuemin="0" aria-valuemax="100" style="width: ${e}%;">\n                </div>\n              </div>\n              <div class="col ms-3"> ${e} %</div>\n            </div>`}static createBreakdown(e,t,n,a){return`<div class="d-flex flex-row">\n              <div class="col-12 progress">\n                <div class="progress-bar bg-warning" aria-valuenow="${e}" aria-valuemin="0" aria-valuemax="100" style="width: ${e}%;">${n}</div>\n                <div class="progress-bar bg-success" aria-valuenow="${t}" aria-valuemin="0" aria-valuemax="100" style="width: ${t}%;">${a}</div>\n              </div>\n            </div>`}static getNumTableRows(){return[10,20,50,100]}}function a(e,t){var n=$("thead th",$(e)).filter((function(){return"none"!=$(this).css("display")})).length;$("tbody",$(e)).html('<tr class="emptyRow"><td colspan="'+n+'"><i>'+t+"</i></td></tr>")}function l(e){return $("tr:not(.emptyRow)",$(e)).length-1}function s(e){return 0==l(e)}function i(e){return $("table",$("#dt-top-details",$(e)).parent())}function o(e,t,n,a,l,s=!0,i=""){0==$("td:nth-child("+e+")",$(this)).find("div.d-flex").length&&($("td:nth-child("+e+")",$(this)).empty(),$("td:nth-child("+e+")",$(this)).append($("<div class='d-flex justify-content-center'></div>"))),$("td:nth-child("+e+")",$(this)).find(".d-flex").append('<a href="'+l+`" title='${i}' data-placement="bottom" class="btn btn-sm mx-1 ${n} ${s?"":"disabled"}" onclick="`+a+'" role="button">'+t+"</a>")}function r(e,t){return e.data("datatable").options.columns.findIndex((function(e){return e.field===t}))}$((function(){n.initDataPatterns()}));var c=Object.freeze({__proto__:null,draw_processes_graph:function(e,t,n){var a,l={},s=e+"/lua/get_processes_graph_data.lua?host="+n;d3.json(s,(function(s,i){if(s)return console.warn(s);var o;(a=i).forEach((function(t){o=-1==t.source_pid?e+"/lua/host_details.lua?host="+t.source:e+"/lua/process_details.lua?pid="+t.source_pid+"&pid_name="+t.source_name+"&host="+n+"&page=flows",t.source=l[t.source]||(l[t.source]={name:t.source_name,num:t.source,link:o,type:t.source_type,pid:t.source_pid}),o=-1==t.target_pid?e+"/lua/host_details.lua?host="+t.target:e+"/lua/process_details.lua?pid="+t.target_pid+"&pid_name="+t.target_name+"&host="+n+"&page=flows",t.target=l[t.target]||(l[t.target]={name:t.target_name,num:t.target,link:o,type:t.target_type,pid:t.target_pid})}));var r=d3.scale.category10();r.proc="red",r.host="lightsteelblue";var c=d3.layout.force().nodes(d3.values(l)).links(a).size([960,500]).linkDistance(120).charge(-400).on("tick",(function(){d.attr("d",f),p.attr("transform",h),_.attr("transform",h)})).start(),u=d3.select("#"+t).append("svg").attr("id","ebpf_graph").attr("width",960).attr("height",500);u.append("defs").selectAll("marker").data(["proc2proc","proc2host","host2proc","host2host"]).enter().append("marker").attr("id",(function(e){return e})).attr("viewBox","0 -5 20 20").attr("refX",15).attr("refY",-1.5).attr("markerWidth",6).attr("markerHeight",6).attr("orient","auto").append("path").attr("d","M0,-5L10,0L0,5");var d=u.append("g").selectAll("path").data(c.links()).enter().append("path").attr("class",(function(e){return"link "+e.type})).attr("marker-end",(function(e){return"url(#"+e.type+")"})),p=u.append("g").selectAll("circle").data(c.nodes()).enter().append("circle").attr("class","ebpf_circle").attr("r",15).style("fill",(function(e){return r[e.type]})).call(c.drag).on("dblclick",(function(e){window.location.href=e.link})),_=u.append("g").selectAll("text").data(c.nodes()).enter().append("text").attr("class","ebpf_text").attr("x",12).attr("y","0.5rem").style("font-size","1rem").text((function(e){return e.pid>=0?e.name+" [pid: "+e.pid+"]":e.name}));function f(e){var t=e.target.x-e.source.x,n=e.target.y-e.source.y,a=Math.sqrt(t*t+n*n);return"M"+e.source.x+","+e.source.y+"A"+a+","+a+" 0 0,1 "+e.target.x+","+e.target.y}function h(e){return"translate("+e.x+","+e.y+")"}}))}});history.state&&history.state.zoom_level;class u{constructor(e,t){if(void 0===t.csrf)throw new Error("ModalHandler::Missing CSRF token!");this.element=e,this.dialog=$(e).closest(".modal"),this.options=t,this.csrf=t.csrf,this.dontDisableSubmit=t.dontDisableSubmit,this.observer=new MutationObserver((e=>{this.bindFormValidation(),this.toggleFormSubmission(),this.initDataPatterns()})),this.observer.observe(this.element[0],{childList:!0,subtree:!0}),this.initialState=null,this.currentState=null,this.firstCloseAttempt=!1,this.isSubmitting=!1;if(0==$(this.element).find("[type='submit']").length)throw new Error("ModalHandler::The submit button was not found inside the form!");this.toggleFormSubmission()}initDataPatterns(){NtopUtils.initDataPatterns()}createFormSnapshot(){const e={inputs:{},hidden:[]};return $(this.element).find('textarea,select,input[type!="radio"]').each((function(){const t=$(this).prop("nodeName").toLowerCase(),n=$(this).attr("name");e.inputs[`${t}[name='${n}']`]=$(this).val()})),$(this.element).find("[style='display: none;'], span.invalid-feedback").each((function(){e.hidden.push($(this))})),e}compareFormSnaphsot(e,t){if(null==e||null==t)return!0;for(let[n,a]of Object.entries(e.inputs))if(t.inputs[n]!=a)return!1;return!0}delegateModalClosing(){const e=this;$(this.dialog).find("button.cancel").off("click").click((function(){e.firstCloseAttempt=!1,$(e.element)[0].reportValidity(),$(e.dialog).find(".confirm-closing").fadeOut(100,(function(){$(e.dialog).find("button.btn-close").fadeIn(100)}))})),$(this.dialog).off("hide.bs.modal").on("hide.bs.modal",(function(t){e.isSubmitting?t.preventDefault():e.compareFormSnaphsot(e.currentState,e.initialState)||e.firstCloseAttempt||(t.preventDefault(),e.firstCloseAttempt=!0,$(e.dialog).find("button.btn-close").fadeOut(100,(function(){$(e.dialog).find(".confirm-closing").fadeIn(100)})))})),$(this.dialog).off("hidden.bs.modal").on("hidden.bs.modal",(function(t){for(const[t,n]of Object.entries(e.initialState.inputs))$(e.dialog).find(t).val(n),$(e.dialog).find(t).removeClass("is-invalid");e.initialState.hidden.forEach((e=>{e.hide()})),e.element.find("[type='submit']").attr("disabled","disabled"),e.currentState=null,e.firstCloseAttempt=!1,$(e.dialog).find(".confirm-closing").fadeOut(100,(function(){$(e.dialog).find("button.btn-close").fadeIn(100)})),e.cleanForm()}))}fillFormModal(){return this.options.loadFormData()}invokeModalInit(e={}){const t=this;this.delegateModalClosing(),this.data=e||this.fillFormModal(),this.options.onModalInit(this.data,this),$(this.element).parents(".modal").on("show.bs.modal",(function(){t.options.onModalShow()})),this.initialState=this.createFormSnapshot(),this.currentState=null,this.delegateResetButton()}delegateSubmit(){this.bindFormValidation();const e=this;this.submitHandler=function(t){e.options.isSyncRequest||(t.preventDefault(),t.stopPropagation(),e.makeRequest())},$(this.element).on("submit",this.submitHandler)}bindFormValidation(){const e=this;$(this.element).find("input,select,textarea").each((async function(t,n){const a=$(this);let l=-1;const s=async e=>e.data.resolveDNS&&a.val().match(NtopUtils.REGEXES.domainName)?await(async()=>{const e=a.parent().find(".spinner-border");a.attr("readonly",!0),e.show();const t=await NtopUtils.resolveDNS($(n).val());return a.removeAttr("readonly"),e.hide(),t.rc<0?(n.setCustomValidity(t.rc_str),[!1,t.rc_str_hr]):(n.setCustomValidity(""),[!0,"Success"])})():e.data.cannotBeEmpty&&e.isInputEmpty?(n.setCustomValidity("Please fill the input."),[!1,e.data.validationEmptyMessage||i18n_ext.missing_field]):n.validity.patternMismatch?(n.setCustomValidity("Pattern mismatch."),[!1,e.data.validationMessage||i18n_ext.invalid_field]):n.validity.rangeOverflow?(n.setCustomValidity("Value exceed the maximum value."),[!1,e.data.rangeOverflowMessage||i18n_ext.invalid_field]):n.validity.rangeUnderflow?(n.setCustomValidity("Value is under the minimum value."),[!1,e.data.rangeUnderflowMessage||i18n_ext.invalid_field]):(n.setCustomValidity(""),[!0,"Success"]),i=async()=>{const e={data:{validationMessage:a.data("validationMessage"),validationEmptyMessage:a.data("validationEmptyMessage"),cannotBeEmpty:"required"===a.attr("required")||1==a.data("validationNotEmpty"),resolveDNS:a.data("validationResolvedns"),rangeOverflowMessage:a.data("validationRangeOverflowMessage"),rangeUnderflowMessage:a.data("validationUnderflowOverflowMessage")},isInputEmpty:"string"==typeof a.val()&&""==a.val().trim()},[t,n]=await s(e);let l=a.parent().find(".invalid-feedback");0==l.length&&(l=$("<span class='invalid-feedback'></span>")),t?(a.removeClass("is-invalid"),l.fadeOut(500,(function(){$(this).remove()}))):(a.addClass("is-invalid"),a.parent().append(l),l.text(n))};$(this).off("input").on("input",(function(t){e.currentState=e.createFormSnapshot(),-1!=l&&clearTimeout(l),a.attr("formnovalidate")||(l=setTimeout((()=>{i(),e.toggleFormSubmission()}),300),e.firstCloseAttempt=!1)})),$(this).off("invalid").on("invalid",(function(e){e.preventDefault(),a.attr("formnovalidate")||i()}))}))}getModalID(){return $(this.element).parents(".modal").attr("id")}toggleFormSubmission(){let e=!0;$(this.element).find("input:not(:disabled),select:not(:disabled),textarea:not(:disabled)").each((function(t,n){e&=n.validity.valid})),e?$(this.element).find("[type='submit'],[type='test']").removeAttr("disabled"):$(this.element).find("[type='submit'],[type='test']").attr("disabled","disabled")}cleanForm(){$(this.element).find("input,textarea,select").each((function(e,t){$(this).removeClass("is-valid").removeClass("is-invalid")})),$(this.element)[0].reset()}makeRequest(){const e=$(this.element).find(".invalid-feedback"),t=$(this.element).find("[type='submit']");let n=this.options.beforeSumbit(this.data);n.csrf=this.csrf,n=$.extend(n,this.options.submitOptions),t.attr("disabled","disabled");const a=this;if(this.options.endpoint){let l;l="post"==a.options.method?$.ajax({url:this.options.endpoint,data:JSON.stringify(n),method:a.options.method,dataType:"json",contentType:"application/json; charset=utf-8"}):$.get(this.options.endpoint,n),this.isSubmitting=!0,l.done((function(t,l){a.isSubmitting=!1,a.currentState=null,a.options.resetAfterSubmit&&a.cleanForm(),e.hide();a.options.onSubmitSuccess(t,n,a)&&(a.dialog.modal?a.dialog.modal("hide"):(a.dialog[0].hidden=!0,$(".modal-backdrop.fade.show").remove())),$(a.element).off("submit",a.submitHandler),a.delegateSubmit()})).fail((function(t,l,s){a.isSubmitting=!1;const i=t.responseJSON;void 0!==i.rc&&i.rc<0&&e.html(i.rc_str_hr).show(),a.options.onSubmitError(i,n,l,s)})).always((function(e){t.removeAttr("disabled")}))}else{a.currentState=null,e.hide();a.options.onSubmitSuccess({},n,a)&&(a.dialog.modal?a.dialog.modal("hide"):a.dialog[0].hidden=!0),$(a.element).off("submit",a.submitHandler),a.delegateSubmit(),t.removeAttr("disabled")}}delegateResetButton(){const e=this,t=$(this.element).find("[type='reset']");if(0==t.length)return;const n=NtopUtils.serializeFormArray($(this.element).serializeArray());t.click((function(t){t.preventDefault(),$(e.element).find("input:visible,select").each((function(e,t){const a=$(t).attr("name");$(t).val(n[a]).removeClass("is-invalid").removeClass("is-valid")}))}))}}const d={no_formatting:{id:"no_formatting",um:null,step:null,decimal:null,scale_values:null},number:{id:"number",um:["","K","M","G","T"],step:1e3,decimal:null,scale_values:null},bytes:{id:"bytes",um:["B","KB","MB","GB","TB"],step:1024,decimal:2,scale_values:null},bytes_network:{id:"bytes_network",um:["B","KB","MB","GB","TB"],step:1e3,decimal:2,scale_values:null},bps:{id:"bps",um:["bps","Kbps","Mbps","Gbps","Tbps"],step:1e3,decimal:2,scale_values:8},fps:{id:"fps",um:["flows/s","Kflows/s","Mflows/s","Gflows/s"],step:1e3,decimal:2,scale_values:null},pps:{id:"pps",um:["pps","Kpps","Mpps","Gpps","Tpps"],step:1e3,decimal:2,scale_values:null},ms:{id:"ms",um:["ms","Kms","Mms","Gms","Tms"],step:1e3,decimal:2,scale_values:null},percentage:{id:"percentage",um:["%"],step:101,decimal:0,scale_values:null,max_value:100}};function p(e){let t=d[e],n=3;null!=t.decimal&&t.decimal>0&&(n=6);let a=0;return null!=t.um&&(a=Math.max(...t.um.map((e=>e.length)))),n+1+a}function _(e,t){let n=d[e];return function(a){if(null==a)return"";if(e==d.no_formatting.id)return a;null!=n.scale_values&&(a*=n.scale_values);let l=a<0;l&&(a*=-1);let s=n.step,i=n.decimal,o=n.um,r=0;for(null!=n.max_value&&a>n.max_value&&(a=n.max_value);a>=s&&r<o.length;)a/=s,r+=1;return null!=i&&i>0?(a*=Math.pow(10,i),a=Math.round(a),a=(a/=Math.pow(10,i)).toFixed(i)):a=Math.round(a),l&&!t&&(a*=-1),`${`${a}`} ${`${o[r]}`}`}}const f={types:d,getUnitMeasureLen:p,getFormatter:_};window.NtopUtils=n,window.datatableInitRefreshRows=function(e,t,n,a){var l=e.data("datatable"),s=l.resultset.data,i=e.data("dt-rr-timer"),o=e.data("dt-rr-ajax");a=a||{},i&&(clearInterval(i),e.removeData("dt-rr-timer")),o&&(o.abort(),e.removeData("dt-rr-ajax"));var c=[],u={};for(var d in s){var p=s[d];if(p[t]){var _=p[t];u[_]=d,c.push(_)}}if(!c)return!1;var f={custom_hosts:c.join(",")},h=l.options.url,m=!0,g=function(n){if("string"==typeof n&&(n=JSON.parse(n)),n){for(var s in n.data){var i=n.data[s],o=i[t];if(o&&u[o]){var c=u[o],d=l.rows[c],p=$("td",d);for(var _ in i){var f=p[r(e,_)],h=$(f),g=h.data("dt-rr-cur-val")||$(f).html(),v=a[_],b=i[_],y="";v&&(parseFloat(b)!=b&&console.warn("Invalid number: "+b),m||(y=" "+NtopUtils.drawTrend(parseFloat(b),parseFloat(g))),h.data("dt-rr-cur-val",b),b=v(b)),$(f).html(0!=b?b+y:"")}}}m=!1,e.removeData("dt-rr-ajax")}else console.error("Bad JSON result")};e.data("dt-rr-timer",setInterval((function(){e.data("dt-rr-ajax")||e.data("dt-rr-ajax",$.ajax({type:"GET",url:h,data:f,cache:!1,success:g}))}),n)),g(l.resultset)},window.datatableForEachRow=function(e,t){$("tr:not(:first)",e).each((function(e){var n;if("function"==typeof t)t.bind(this)(e);else for(n=0;n<t.length;n++)t[n].bind(this)(e)}))},window.datatableIsEmpty=s,window.datatableRemoveEmptyRow=function(e){$("tbody tr.emptyRow",$(e)).remove()},window.datatableAddEmptyRow=a,window.datatableGetNumDisplayedItems=l,window.datatableGetByForm=i,window.datatableUndoAddRow=function(e,t,n,l){n&&$(n).removeAttr("disabled").removeClass("disabled");var o=$(e).closest("form");$(e).remove(),aysUpdateForm(o);var r=i(o);s(r)&&a(r,t),l&&window[l](e)},window.datatableAddButtonCallback=o,window.datatableAddDeleteButtonCallback=function(e,t,n){o.bind(this)(e,n,"btn-danger",t,"javascript:void(0)",!0,"Delete")},window.datatableAddActionButtonCallback=function(e,t,n,a=!0,l=""){o.bind(this)(e,n,"btn-info",t,"javascript:void(0)",a,l)},window.datatableAddFilterButtonCallback=function(e,t,n,a="",l=!0){o.bind(this)(e,n,"btn-warning",t,"javascript:void(0)",l,a)},window.datatableAddLinkButtonCallback=function(e,t,n,a=""){o.bind(this)(e,n,"btn-info","",t,!0,a)},window.datatableMakeSelectUnique=function(e,t,n){function a(e,t,n,a){$("[id^="+t+"]").each((function(){var t=n($(this));t[0]!=e[0]&&a(t)}))}function l(e,t){if(t)e.removeAttr("disabled");else{var n=e.closest("select"),a=n.val()==e.val();if(e.attr("disabled","disabled"),a){var l=n.find("option:not([disabled])").first().val();n.val(l),n.attr("data-old-val",l)}}}function s(e,t,n){var s=$(this).attr("data-old-val")||"",i=$(this).val()||"",o=[];s==i&&(s=""),a($(this),e,t,(function(e){l(e.find("option[value='"+s+"']"),!0),l(e.find("option[value='"+i+"']"),!1),o.push(e)})),n($(this),s,i,o,l),$(this).attr("data-old-val",i)}var i=(n=NtopUtils.paramsExtend({on_change:$.noop,selector_fn:function(e){return e.find("select").first()}},n)).selector_fn(e);i.on("change",(function(){s.bind(this)(t,n.selector_fn,n.on_change)})),i.on("remove",(function(){$(this).val("").trigger("change")})),function(e,t,n){e.val(""),a(e,t,n,(function(e){e.trigger("change")}));var l=e.find("option:not([disabled])").first().val();e.val(l),e.trigger("change")}(i,t,n.selector_fn)},window.datatableIsLastPage=function(e){var t=$("#dt-bottom-details .pagination li:nth-last-child(3)",$(e));return!(1==t.length&&0==t.hasClass("active"))},window.datatableGetColumn=function(e,t,n){var a=e.data("datatable").resultset.data.filter((function(e){return e[t]===n}));if(a)return a[0]},window.datatableGetColumnIndex=r,window.$.fn.modalHandler=function(e){if(1!=this.length)throw new Error("Only a form element can by initialized!");const t=$.extend({csrf:"",endpoint:"",resetAfterSubmit:!0,dontDisableSubmit:!1,isSyncRequest:!1,method:"get",loadFormData:function(){},onModalInit:function(e){},onModalShow:function(){},beforeSumbit:function(){return{}},onSubmitSuccess:function(e){},onSubmitError:function(e,t,n){},onModalReset:function(e){}},e),n=new u(this,t);return n.delegateSubmit(),n},window.ebpfUtils=c,window.ntopFormatterUtils=f;var h={};window.makeUniqueValidator=function(e){return function(t){var n=t.val(),a=0;return!n||(e(t).each((function(){$(this).val()==n&&(a+=1)})),1==a)}},window.memberValueValidator=function(e){var t=e.val();return""===t||(NtopUtils.is_mac_address(t)||NtopUtils.is_network_mask(t,!0))},window.makePasswordPatternValidator=function(e){return function(t){return!t.val()||$(t).val().match(e)}},window.passwordMatchValidator=function(e){var t=$(e).closest("form").find("[data-passwordmatch]").not(e);return!e.val()||!t.val()||t.val()===e.val()},window.poolnameValidator=function(e){return!e.val()||$(e).val().match(/^[a-z0-9_]*$/)},window.passwordMatchRecheck=function(e){var t=$(e).find("[data-passwordmatch]"),n=0;t.each((function(){""!=$(this).val()&&n++})),n==t.length&&t.trigger("input")},window.hostOrMacValidator=function(e){var t=e.val();return""===t||(NtopUtils.is_mac_address(t)||NtopUtils.is_good_ipv4(t)||NtopUtils.is_good_ipv6(t))},window.ipAddressValidator=function(e){var t=e.val();return""===t||(NtopUtils.is_good_ipv4(t)||NtopUtils.is_good_ipv6(t))},window.bpfValidator=function(e,t=!1){var n=e.val();if(""===n.trim())return!0;var a=e.attr("name");h[a]||(h[a]={ajax_obj:null,valid:!0,timer:null,submit_remind:!1,last_val:null});var l=h[a],s=function(){l.timer=null;var e=function(e){l.ajax_obj=null,l.valid=e,l.last_val=n};l.last_val!==n?(l.ajax_obj&&l.ajax_obj.abort(),l.ajax_obj=$.ajax({type:"GET",url:`${http_prefix}/lua/pro/rest/v2/check/filter.lua`,async:!t,data:{query:n},error:function(){e(l.valid)},success:function(t){var n=!!t.response;e(n)}})):e(l.valid)};return t?s():l.last_val===n||(l.timer&&(clearTimeout(l.timer),l.submit_remind=!1),l.timer=setTimeout(s,250)),l.valid};const m=function(){let e={},t=[];return{ready:function(n){e[n]=!0,t.filter((e=>e.component_name==n)).forEach((e=>e.resolve())),t=t.filter((e=>e.component_name!=n))},on_ready:function(n){return new Promise(((a,l)=>{e[n]?a():t.push({resolve:a,component_name:n,completed:!1})}))}}}(),g=function(){let e={};return{is_array:function(e){return Array.isArray(e)},is_object:function(e){return"object"==typeof e&&!this.is_array(e)&&null!==e},clone:function(e){if(null==e)return null;if(this.is_object(e))return $.extend(!0,{},e);if(Array.isArray(e)){let t=[];for(let n=0;n<e.length;n+=1){let a=this.clone(e[n]);t.push(a)}return t}return e},object_to_array:function(e){if(null==e)return[];let t=[];for(let n in e)t.push(e[n]);return t},check_and_set_default_interval_time:function(e){if(null==y.get_url_entry("epoch_begin")||null==y.get_url_entry("epoch_end")){let e=Number.parseInt((Date.now()-18e5)/1e3),t=Number.parseInt(Date.now()/1e3);y.set_key_to_url("epoch_begin",e),y.set_key_to_url("epoch_end",t)}},from_utc_s_to_server_date:function(e){let t=1e3*e,n=new Date(t).getTimezoneOffset(),a=moment.tz(t,ntop_zoneinfo)._offset;return new Date(t+1e3*(a+n)*60)},from_utc_to_server_date_format:function(e,t){null==t&&(t="DD/MMM/YYYY HH:mm");let n=moment.tz(e,ntop_zoneinfo);return moment(e).format(t),n.format(t)},copy_object_keys:function(e,t,n=!1){if(null!=e)for(let a in e)null!=e[a]&&(1==n&&this.is_object(e[a])&&this.is_object(t[a])?this.copy_object_keys(e[a],t[a],n):t[a]=e[a])},set_http_globals_headers(t){e=t},http_request:async function(t,n,a,l){try{null==n&&(n={}),null==n.headers&&(n.headers={}),null!=n&&null!=n.headers&&null!=e&&(n.headers={...n.headers,...e});let a=await fetch(t,n);if(0==a.ok)return console.error(`http_request ${t}\n ok == false`),console.error(a),null;let s=await a.json();return 1==l?s:s.rsp}catch(e){if(console.error(e),1==a)throw e;return null}},download_URI:function(e,t){var n=document.createElement("a");n.download=t,n.href=e,document.body.appendChild(n),n.click(),document.body.removeChild(n)},get_random_string:function(){return Math.random().toString(16).substr(2,8)},string_hash_code:function(e){let t,n,a=0;if(0===e.length)return a;for(t=0;t<e.length;t++)n=e.charCodeAt(t),a=(a<<5)-a+n,a|=0;return a},mod:function(e,t){return(e%=t)<0&&(e+=t),e}}}(),v=function(){let e={},t={};const n=e=>g.clone(e),a=function(e,a){for(let l in t){if(l==a)continue;(0,t[l])(n(e))}};return{get_status:function(){return n(e)},update_subscribers:function(){const e=this.get_status();a(e)},on_status_change:function(e,a,l){if(t[e]=a,1==l){let e=this.get_status();a(n(e))}},replace_status:function(t,n){!function(t){e=t}(t),a(t,n)},add_obj_to_status:function(e,t){let n=this.get_status();g.copy_object_keys(e,n),this.replace_status(n,t)},add_value_to_status:function(e,t,n){let a=this.get_status();a[e]=t,this.replace_status(a,n)}}}(),b={},y=function(){let e={};return g.copy_object_keys(b,e),{get_url_params:function(){return window.location.search.substring(1)},get_url_search_params:function(e){null==e&&(e=this.get_url_params());return new URLSearchParams(e)},get_url_entries:function(e){return this.get_url_search_params(e).entries()},get_url_entry:function(e,t){let n=this.get_url_entries(t);for(const[t,a]of n)if(t==e)return a;return null},get_url_object:function(e){let t=this.get_url_entries(e),n={};for(const[e,a]of t)n[e]=a;return n},reload_url:function(){window.location.reload()},replace_url:function(e){window.history.replaceState({},null,`?${e}`)},replace_url_and_reload:function(e){this.replace_url(e),this.reload_url()},serialize_param:function(e,t){return null==t&&(t=""),`${e}=${encodeURIComponent(t)}`},set_custom_key_serializer:function(t,n){e[t]=n},obj_to_url_params:function(t){let n=[];const a=this.serialize_param;for(let l in t){let s=e[l];null==s&&(s=a);let i=s(l,t[l]);n.push(i)}return n.join("&")},delete_params:function(e){let t=this.get_url_search_params();e.forEach((e=>{t.delete(e)})),this.replace_url(t.toString())},set_key_to_url:function(e,t){null==t&&(t="");let n=this.get_url_search_params();n.set(e,t),this.replace_url(n.toString())},add_obj_to_url:function(e,t){let n=this.obj_to_url_params(e),a=this.get_url_search_params(t),l=this.get_url_entries(n);for(const[e,t]of l)a.set(e,t);let s=a.toString();if(null!=t)return s;this.replace_url(s)}}}(),w={EPOCH_CHANGE:"epoch_change",FILTERS_CHANGE:"filters_change"},x={EPOCH_CHANGE:function(e,t){return e.epoch_begin!=t.epoch_begin||e.epoch_end!=t.epoch_end},FILTERS_CHANGE:function(e,t){return null==e.filters&&null!=t.filters||null!=e.filters&&null==t.filters||null!=e.filters&&null!=t.filters&&(e.filters.length!=t.filters.length||e.filters.some((e=>null==t.filters.find((t=>t.id==e.id)))))}},k=function(){const e="events_manager";let t={},n={};const a=e=>g.clone(e),l=function(e,t,n){for(let l in e){if(l==n)continue;(0,e[l])(a(t))}};v.on_status_change(e,(function(e){for(let a in w){if(1==(0,x[a])(e,t)){let t=n[a];l(t,e)}}t=e}),!0);const s=function(e,t,a){let s=n[e];null!=s&&l(s,t,a)},i=function(e,t,l,s){if(null==n[t]&&(n[t]={}),1==s){let e=v.get_status();l(a(e))}n[t][e]=l};return{emit_custom_event:function(e,t){s(e,t)},on_custom_event:function(e,t,n){i(e,t,n)},emit_event:function(t,n,a){s(t,n,a),v.add_obj_to_status(n,e)},on_event_change:function(e,t,n,a){i(e,t,n,a)}}}();function S(e,t,n,a,l){this.name=e,this.update_url=t,this.url_params=n,this.units=a,this.refresh=l,this.pieInterval;let s=[],i="",o=[],r=[],c=[];var u=[],d=[],p=[],_=function(e,t){var n=500,a=325,l=52,s=14,i=250,o=116;$(e).hasClass("pie-chart-small")&&(a=250,l=(o=(n=330)/5+15)/2);var r=d3.layout.pie().value((function(e){return 0==e.value&&(e.value=1),e.value})),c=d3.scale.category20(),u=d3.svg.arc().startAngle((function(e){return e.startAngle})).endAngle((function(e){return e.endAngle})).innerRadius(l).outerRadius(o),d=d3.select(e).append("svg:svg").attr("width",n).attr("height",a).attr("viewBox","0 0 "+n+" "+a).attr("preserveAspectRatio","xMidYMid"),p=d.append("svg:g").attr("class","arc").attr("transform","translate("+n/2+","+a/2+")"),_=d.append("svg:g").attr("class","label_group").attr("transform","translate("+n/2+","+a/2+")"),f=d.append("svg:g").attr("class","center_group").attr("transform","translate("+n/2+","+a/2+")");p.append("svg:circle").attr("fill","#EFEFEF").attr("r",o),f.append("svg:circle").attr("fill","white").attr("r",l);var h=null,m=null;t&&(f.append("svg:text").attr("class","label").attr("dy",-15).attr("text-anchor","middle").text("TOTAL"),m=f.append("svg:text").attr("class","total").attr("dy",7).attr("text-anchor","middle").text("Waiting..."),h=f.append("svg:text").attr("class","units").attr("dy",21).attr("text-anchor","middle").text(t));return[p,r,m,h,c,i,u,_,f,o,s]}(e,a),f=_[0],h=_[1],m=_[2],g=_[4],v=_[5],b=_[6],y=_[7],w=_[9],x=_[10];function k(e,t){return e.label<t.label?-1:e.label>t.label?1:0}function S(e,t){var n,a;d[t]?(n=d[t].startAngle,a=d[t].endAngle):!d[t]&&d[t-1]?(n=d[t-1].endAngle,a=d[t-1].endAngle):!d[t-1]&&d.length>0?(n=d[d.length-1].endAngle,a=d[d.length-1].endAngle):(n=0,a=0);t=d3.interpolate({startAngle:n,endAngle:a},{startAngle:e.startAngle,endAngle:e.endAngle});return function(e){var n=t(e);return b(n)}}function C(e,t){s0=2*Math.PI,e0=2*Math.PI;t=d3.interpolate({startAngle:e.startAngle,endAngle:e.endAngle},{startAngle:s0,endAngle:e0});return function(e){var n=t(e);return b(n)}}function N(e,t){var n;n=d[t]?(d[t].startAngle+d[t].endAngle-Math.PI)/2:!d[t]&&d[t-1]?(d[t-1].startAngle+d[t-1].endAngle-Math.PI)/2:!d[t-1]&&d.length>0?(d[d.length-1].startAngle+d[d.length-1].endAngle-Math.PI)/2:0;var a=(e.startAngle+e.endAngle-Math.PI)/2,l=d3.interpolateNumber(n,a);return function(e){var t=l(e);return"translate("+Math.cos(t)*(w+x)+","+Math.sin(t)*(w+x)+")"}}this.update=function(){$.ajax({type:"GET",url:this.update_url,data:this.url_params,success:function(e){let t;"object"==typeof e?t=e:"string"==typeof e&&(t=jQuery.parseJSON(e)),t&&function(e){e.rsp&&(e=e.rsp);e.sort(k),s=e,d=p,u=h(s);var t=0;function n(e,n,a){return e.name=s[n].label,e.value=s[n].value,e.url=s[n].url,t+=e.value,e.value>0}(p=u.filter(n)).length>0&&d.length>0&&(f.selectAll("circle").remove(),m&&m.text((function(){return(t/1024).toFixed(1)})),i=f.selectAll("path").data(p),i.enter().append("svg:path").attr("stroke","white").attr("stroke-width",.5).attr("fill",(function(e,t){return g(t)})).transition().duration(v).attrTween("d",S),i.transition().duration(v).attrTween("d",S),i.exit().transition().duration(v).attrTween("d",C).remove(),o=y.selectAll("line").data(p),o.enter().append("svg:line").attr("x1",0).attr("x2",0).attr("y1",-w-3).attr("y2",-w-8).attr("stroke","gray").attr("transform",(function(e){return"rotate("+(e.startAngle+e.endAngle)/2*(180/Math.PI)+")"})),o.transition().duration(v).attr("transform",(function(e){return"rotate("+(e.startAngle+e.endAngle)/2*(180/Math.PI)+")"})),o.exit().remove(),r=y.selectAll("text.value").data(p).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?5:-7})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){return(e.value/t*100).toFixed(1)+"%"})),r.enter().append("svg:text").attr("class","value").attr("transform",(function(e){return"translate("+Math.cos((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+","+Math.sin((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+")"})).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?5:-7})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){if(t<=1)return"";return(e.value/t*100).toFixed(1)+"%"})),r.transition().duration(v).attrTween("transform",N),r.exit().remove(),c=y.selectAll("text.units").data(p).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?17:5})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){return e.name})).on("click",(function(e){e.url&&(window.location.href=e.url)})),c.enter().append("svg:text").attr("class","units").attr("transform",(function(e){return"translate("+Math.cos((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+","+Math.sin((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+")"})).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?17:5})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){return e.name})).on("click",(function(e){e.url&&(window.location.href=e.url)})),c.transition().duration(v).attrTween("transform",N),c.exit().remove())}(t)}})},this.update(),this.update()}window.ntopng_events=w,window.ntopng_events_manager=k,window.ntopng_status_manager=v,window.ntopng_utility=g,window.ntopng_url_manager=y,window.ntopng_sync=m,window.ntopng_custom_events={SHOW_MODAL_FILTERS:"show_modal_filters",MODAL_FILTERS_APPLY:"modal_filters_apply",SHOW_GLOBAL_ALERT_INFO:"show_global_alert_info",VIS_DATA_LOADED:"vis_data_loaded",CHANGE_PAGE_TITLE:"change_page_title",DATATABLE_LOADED:"datatable_loaded"},S.prototype.setUrlParams=function(e){this.url_params=e,this.forceUpdate()},S.prototype.forceUpdate=function(e){this.stopInterval(),this.update(),this.startInterval()},S.prototype.setInterval=function(e){this.pieInterval=e},S.prototype.stopInterval=function(){clearInterval(this.pieInterval)},S.prototype.startInterval=function(){this.pieInterval=setInterval(this.update(),this.refresh)};const C={},N={db_analyze:function(e,t,n){const{dataPointIndex:a}=n,{filter:l}=n.w.config;let s;if(n.w.config.filtering_labels&&(s=n.w.config.filtering_labels[a]),n.w.config.labels&&n.w.config.labels[a],0==l.length||void 0===s)return;let i=ntopng_status_manager.get_status().filters;i.push({id:l[0],operator:"eq",value:s}),ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:i})},none:function(e,t,n){},standard:function(e,t,n){const{seriesIndex:a,dataPointIndex:l}=n,{series:s}=n.w.config;if(-1===a)return;if(void 0===s)return;const i=s[a];if(void 0!==i.base_url){const e=i.data[l].meta.url_query;location.href=`${i.base_url}?${e}`}}},A={format_bytes:function(e,{config:t,seriesIndex:n,dataPointIndex:a}){return NtopUtils.bytesToSize(e)},format_pkts:function(e,{config:t,seriesIndex:n,dataPointIndex:a}){return NtopUtils.formatPackets(e)},format_value:function(e,{config:t,seriesIndex:n,dataPointIndex:a}){return NtopUtils.formatValue(e)},format_multiple_date:function(e,{config:t,seriesIndex:n,dataPointIndex:a}){return new Date(e[0])+" - "+new Date(e[1])},format_label_from_xy:function({series:e,seriesIndex:t,dataPointIndex:n,w:a}){const l=a.config.series[t].data[n],s=l.x,i=l.y;return`\n            <div class='apexcharts-theme-light apexcharts-active' id='test'>\n                <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n                    ${l.meta.label}\n                </div>\n                <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${a.config.xaxis.title.text}</b>: ${s}\n                    </div>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${a.config.yaxis[0].title.text}</b>: ${i}\n                    </div>\n                </div>\n            </div>`}},T=A.format_value;class E{static registerWidget(e){if(null===e)throw new Error("The passed widget reference is null!");if(e.name in C)throw new Error(`The widget ${e.name} is already defined!`);C[e.name]=e}static getWidgetByName(e){if(e in C)return C[e];throw new Error(`Widget ${e} not found!`)}}const P=(e,t)=>{let n=t.position().top;const a=e.height(),l=$(window).height();if(a+n>=l){const s=l-n;s<=150?n=n-a+t.outerHeight():e.css({"max-height":s-20,"overflow-y":"auto"})}e.css("top",`${n}px`)};$(window).on("scroll",(function(){$("#n-navbar").height();$(this).scrollTop()>=32?$("#n-navbar").addClass("scrolled bg-light"):$("#n-navbar").removeClass("scrolled bg-light")})),$((()=>{const e=()=>{if(0==$(".sidebar-close-layer").length){const e=$("<div class='sidebar-close-layer' style='display:none'></div>");e.on("click",(function(){$("#n-sidebar").removeClass("active"),e.fadeOut((function(){$(this).remove()}))})),$("#wrapper").append(e),e.fadeIn()}else $(".sidebar-close-layer").fadeOut((function(){$(this).remove()}));$("#n-sidebar").toggleClass("active")};$("#n-sidebar a.submenu").bind({mouseenter:function(){let e=$(this).parent().find("div[id$='submenu']");P(e,$(this)),e.show()},mouseleave:function(){$(this).parent().find("div[id$='submenu']").hide()}}),$("div[id$='submenu']").bind({mouseenter:function(){$(this).show()},mouseleave:function(){$(this).hide()}}),$("button[data-bs-toggle='sidebar']").on("click",(function(){e()}))})),$(window).on("resize",(function(){const e=$("#n-sidebar").find("div.show[id$='submenu']");if(e.length>0){const t=e.parent().find("a[data-bs-toggle='collapse']");P(e,t)}}));const I=function(){const e={series:[],chart:{height:"100%",width:"100%",toolbar:{tools:{zoomout:!1,download:!1,zoomin:!1,zoom:" ",selection:!1,pan:!1,reset:!1}},events:{}},xaxis:{tooltip:{enabled:!1}},yaxis:{labels:{show:!0,style:{colors:[],fontSize:"11px",fontWeight:400,cssClass:""}},title:{rotate:-90,offsetY:0,offsetX:0,style:{fontSize:"11px",fontWeight:900,cssClass:""}},tooltip:{enabled:!1}},grid:{show:!1},legend:{show:!0}},t=function(e){e.xaxis.labels.formatter=function(e,{series:t,seriesIndex:n,dataPointIndex:a,w:l}){return g.from_utc_to_server_date_format(e)}},a=function(){let t=g.clone(e);return g.copy_object_keys({chart:{stacked:!0,type:"area",zoom:{enabled:!0,type:"x"}},tooltip:{x:{format:"dd MMM yyyy HH:mm:ss"},y:{}},xaxis:{labels:{show:!0,datetimeUTC:!1,formatter:null},axisTicks:{show:!1},type:"datetime",axisBorder:{show:!0},convertedCatToNumeric:!1},dataLabels:{enabled:!1},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"}},t,!0),t}(),l=function(){let t=g.clone(e),a={chart:{stacked:!0,type:"polarArea",height:400},yaxis:{show:!0,labels:{formatter:n.bytesToSize}},dataLabels:{enabled:!0,formatter:function(e,t){return e?`${e.toFixed(1)}%`:"0%"}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},tooltip:{y:{formatter:n.bytesToSize}}};return g.copy_object_keys(a,t,!0),t}(),s=function(){let t=g.clone(e);return g.copy_object_keys({chart:{type:"line",zoom:{enabled:!0,type:"x"}},tooltip:{shared:!0,x:{format:"dd MMM yyyy HH:mm:ss"},y:{}},xaxis:{labels:{show:!1,datetimeUTC:!1,formatter:null},axisTicks:{show:!0},type:"datetime",axisBorder:{show:!0},convertedCatToNumeric:!1},stroke:{show:!0,width:2,curve:"smooth"},grid:{show:!0},dataLabels:{enabled:!1}},t,!0),t}();return{typeChart:{TS_LINE:"TS_LINE",TS_STACKED:"TS_STACKED",PIE:"PIE",BASE:"BASE"},newChart:function(i){let o,r={};if(i==this.typeChart.TS_STACKED)r=g.clone(a),t(r);else if(i==this.typeChart.TS_LINE)r=g.clone(s),t(r);else if(i==this.typeChart.PIE)r=g.clone(l);else{if(i!=this.typeChart.BASE)throw`ntopChartApex::newChart: chart type = ${i} unsupported`;r=g.clone(e)}return{drawChart:function(e,t){if(t.yaxis&&t.yaxis.labels&&t.yaxis.labels.formatter){const e=t.yaxis.labels.formatter;"formatValue"==e?t.yaxis.labels.formatter=n.formatValue:"bytesToSize"==e&&(t.yaxis.labels.formatter=n.bytesToSize)}g.copy_object_keys(t,r,!0),o=new ApexCharts(e,r),o.render()},to_data_uri:async function(e){if(null==o)return;return(await o.dataURI(e)).imgURI},destroyChart:function(){null!=o&&o.destroy()},updateChart:function(e){null!=o&&o.updateOptions(e,!0)},registerEvent:function(e,t,n=!1){r.chart.events[e]=t,1==n&&o.updateOptions(r)}}}}}(),M=function(){let e={};return{addHandler:function(t){let n=e[t.handlerId];return null==n&&(n=[],e[t.handlerId]=n),n.push((()=>{t.onClick()})),`window['_DataTableButtonsOnClick']('${t.handlerId}', '${n.length-1}')`},getHandler:function(t,n){let a=e[t];return null==a?null:a[n]},deleteHandlersById:function(t){e[t]=null}}}();window._DataTableButtonsOnClick=function(e,t){let n=M.getHandler(e,t);null!=n&&n()};class O{static getStdDatatableConfig(e=[],t="<'row'<'col-sm-2 d-inline-block'l><'col-sm-10 text-end d-inline-block'<'dt-search'f>B>rtip>"){return 0==e.length&&(t="fBrtip"),{dom:t,pagingType:"full_numbers",lengthMenu:[[10,20,50,100],[10,20,50,100]],language:{search:i18n.script_search,paginate:{previous:"&lt;",next:"&gt;",first:"«",last:"»"}},saveState:!0,responsive:!0,buttons:{buttons:e,dom:{button:{className:"btn btn-link"},container:{className:"d-inline-block"}}}}}static createLinkCallback(e){let t="";return t=`onclick="${M.addHandler(e.handler)}"`,`<a href=#\n                   ${t}>\n                   ${e.text||""}\n                </a>`}static createActionButtons(e=[]){const t=[];e.forEach(((e,n)=>{let a="";if(e.handler){a=`onclick="${M.addHandler(e.handler)}"`}let l=`\n            <li>\n                <a\n                    ${e.href||e.modal?`href='${e.href||e.modal}'`:""}\n                    ${a}\n                    ${e.onclick?`onclick='${e.onclick}'`:""}\n                    ${e.modal?"data-bs-toggle='modal'":""}\n                    class='dropdown-item ${e.class?e.class:""}'\n                    ${e.hidden?"style='display: none'":""}\n                    ${e.external?"target='_about'":""}\n                    >\n                    <i class='fas ${e.icon}'></i> ${e.title||""}\n                </a>\n            </li>\n            `;t.push(l)}));return`<div class='dropdown'><button type="button" class="btn btn-sm btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false"><i class="fas fa-align-justify"></i></button>${`<ul class="dropdown-menu">${t.join("")}</ul>`}</div>`}static deleteButtonHandlers(e){M.deleteHandlersById(e)}static setAjaxConfig(e,t,n="",a="get",l={}){return e.ajax={url:t,type:a,dataSrc:n,data:function(e){return $.extend({},e,l)}},e}static extendConfig(e,t){return t.hasFilters&&(t.stateSaveCallback=function(e,t){localStorage.setItem("DataTables_"+e.sInstance,JSON.stringify(t))},t.stateLoadCallback=function(e){return JSON.parse(localStorage.getItem("DataTables_"+e.sInstance))},t.stateSaveParams=function(e,t){$("[data-filter]").each((function(){const e=$(this).find("li.active").data("filter-key");e&&(t.filters||(t.filters={}),t.filters[$(this).data("filter")]=e)}))}),$.extend({},e,t)}static secondsToHHMMSS(e){const t=e=>`${e}`.padStart(2,"0"),n=e%60,a=Math.floor(e/60)%60;return`${t(Math.floor(e/3600))}:${t(a)}:${t(n)}`}static openEditModalByQuery(e){const t=new URLSearchParams(window.location.search);if(!t.has(e.paramName))return;const n=t.get(e.paramName),a=e.datatableInstance.data().toArray().find((t=>t[e.paramName]==n));if("function"==typeof e.cancelIf&&e.cancelIf(a))return;const l=$(`#${e.modalHandler.getModalID()}`);if(void 0!==a&&(e.modalHandler.invokeModalInit(a),l.modal("show")),!t.has("referer"))return void l.on("hidden.bs.modal",(function(t){const n=new URL(window.location.href);n.searchParams.delete(e.paramName),history.replaceState({},"",n.toString())}));const s=t.get("referer");l.on("hidden.bs.modal",(function(e){window.location=s}))}static addToggleColumnsDropdown(e,t=((e,t)=>{})){if(void 0===e)throw"The $table is undefined!";const n=e.table().node().id;O._loadColumnsVisibility(e).then((function(a){let l=[-1];a.success?l=a.columns.map((e=>parseInt(e))):console.warn(a.message);const s=[],i=[],o=$(e.context[0].nTableWrapper);e.columns().every((function(t){e.column(t).visible()?s.push({index:t,name:this.header().textContent,label:this.i18n.name}):i.push(t)}));const r=$('\n                <div class="btn-group">\n                    <button type="button" class="btn btn-link dropdown-toggle" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\n                        <i class="fas fa-eye"></i>\n                    </button>\n                </div>\n            '),c=$('<div class="dropdown-menu dropdown-menu-right" style=\'width: max-content;\'><h6 class="dropdown-header">Show Columns</h6></div>'),u=$("<div class='px-4'></div>");for(let a=0;a<s.length;a++){const o=s[a];if(""==o.name)continue;const r=`toggle-${o.name.split().join("_")}`,c=-1===l.indexOf(o.index);if(!c){e.column(o.index).visible(!1)}const d=$(`<input class="form-check-input" ${c?"checked":""} type="checkbox" id="${r}">`),p=$(`\n                    <div class="form-check form-switch">\n                        <label class="form-check-label" for="${r}">\n                            ${o.name}\n                        </label>\n                    </div>\n                `);d.on("change",(function(a){$(".overlay").toggle(500);const l=e.column(o.index);l.visible(!l.visible());const s=l.visible(),r=[];e.columns().every((function(t){e.column(t).visible()||-1!==i.indexOf(t)||r.push(t)})),$.post(`${http_prefix}/lua/datatable_columns.lua`,{action:"save",table:n,columns:r.join(","),csrf:window.__CSRF_DATATABLE__}).then((function(e){e.success||console.warn(e.message)})),void 0!==t&&t(l,s)})),p.prepend(d),u.append(p)}c.on("click.bs.dropdown",(function(e){e.stopPropagation()})),r.append(c.append(u)),o.find(".dt-search").parent().append(r)}))}static async _loadColumnsVisibility(e){const t=e.table().node().id;return $.get(`${http_prefix}/lua/datatable_columns.lua?table=${t}&action=load`)}}class U{static alertSeverityAndType(e,t,n){return`${U.formatValueLabel(e,t,n)} ${U.formatValueLabel(n.alert_id,t,n)}`}static hideIfZero(e,t,a){let l=void 0!==e.color?e.color:"#aaa",s=void 0!==e.value?e.value:e;"display"===t&&0===parseInt(s)&&(l="#aaa");let i=`<span style='color: ${l}'>${n.fint(s)}</span>`;return void 0!==e.url&&(i=`<a href="${e.url}">${i}</a>`),i}static secondsToTime(e,t,a){return"display"===t?n.secondsToTime(e):e}static filterize(e,t,n,a,l,s){return`<a class='tag-filter' data-tag-key='${e}' title='${l||t}' data-tag-value='${t}' data-tag-label='${a||n||t}' href='#'>${s||n||t}</a>`}static formatValueLabel(e,t,n){if("display"!==t)return e.value;let a=e.label;return e.color&&(a=`<span class='font-weight-bold' style='color: ${e.color}'>${a}</span>`),a}static formatMessage(e,t,n){if("display"!==t)return e.value;let a=e.descr;return e.shorten_descr&&(a=`<span title="${e.descr}">${e.shorten_descr}</span>`),a}static formatSubtype(e,t,n){if("display"!==t)return e;return U.filterize("subtype",e,e)}static getFormatGenericField(e){return function(t,n,a){if("display"!==n)return t.value;let l="";return void 0!==t.reference&&(l=t.reference),U.filterize(e,a[e].value,a[e].label,a[e].label,a[e].label)+" "+l}}static formatSNMPInterface(e,t,n){if("display"!==t)return e.value;let a=U.filterize("snmp_interface",e.value,e.label,e.label,e.label);return e.color&&(a=`<span class='font-weight-bold' style='color: ${e.color}'>${a}</span>`),a}static formatSNMPIP(e,t,n){return"display"!==t?e:U.filterize("ip",e,e,e,e)}static formatProbeIP(e,t,n){if("display"!==t)return e;return U.filterize("probe_ip",e.value,e.label,e.label,e.label_long)}static formatHost(e,t,n){if("display"!==t)return e;let a="";void 0!==e.reference&&(a=e.reference);let l,s,i="";return e.label&&e.label!=e.value?(l="name",s=e.label_long,i=U.filterize("name",e.label_long,e.label,e.label,e.label_long)):(l="ip",s=e.value,i=U.filterize("ip",e.value,e.label,e.label,e.label_long)),n.vlan_id&&""!=n.vlan_id&&"0"!=n.vlan_id&&(i=U.filterize(l,`${s}@${n.vlan_id}`,`${e.label}@${n.vlan_id}`,`${e.label}@${n.vlan_id}`,`${e.label_long}@${n.vlan_id}`)),e.country&&(i+=U.filterize("country",e.country,e.country,e.country,e.country,' <img src="'+http_prefix+'/dist/images/blank.gif" class="flag flag-'+e.country.toLowerCase()+'"></a> ')),n.role&&"attacker"==n.role.value?i=i+" "+U.filterize("role",n.role.value,'<i class="fas fa-skull" title="'+n.role.label+'"></i>',n.role.label):n.role&&"victim"==n.role.value&&(i=i+" "+U.filterize("role",n.role.value,'<i class="fas fa-sad-tear" title="'+n.role.label+'"></i>',n.role.label)),n.role_cli_srv&&"client"==n.role_cli_srv.value?i=i+" "+U.filterize("role_cli_srv",n.role_cli_srv.value,'<i class="fas fa-long-arrow-alt-right" title="'+n.role_cli_srv.label+'"></i>',n.role_cli_srv.label):n.role_cli_srv&&"server"==n.role_cli_srv.value&&(i=i+" "+U.filterize("role_cli_srv",n.role_cli_srv.value,'<i class="fas fa-long-arrow-alt-left" title="'+n.role_cli_srv.label+'"></i>',n.role_cli_srv.label)),i+" "+a}static filterizeVlan(e,t,a,l,s,i){let o=l,r=s,c=i;return e.vlan&&0!=e.vlan.value&&(o=`${l}@${e.vlan.value}`,r=`${s}@${e.vlan.label}`,c=`${i}@${e.vlan.title}`),r=n.shortenLabel(r,16,"."),U.filterize(a,o,r,r,c)}static formatFlowTuple(e,t,n){let a=e.active_url?`<a href="${e.active_url}"><i class="fas fa-stream"></i></a>`:"",l="";if(e.cli_ip.name){let t="";e.cli_ip.label_long&&(t=e.cli_ip.value+" ["+e.cli_ip.label_long+"]"),l=U.filterizeVlan(e,n,"cli_name",e.cli_ip.name,e.cli_ip.label,t)}else l=U.filterizeVlan(e,n,"cli_ip",e.cli_ip.value,e.cli_ip.label,e.cli_ip.label_long);let s="";e.cli_ip.country&&"nil"!==e.cli_ip.country&&(s=U.filterize("cli_country",e.cli_ip.country,e.cli_ip.country,e.cli_ip.country,e.cli_ip.country,' <img src="'+http_prefix+'/dist/images/blank.gif" class="flag flag-'+e.cli_ip.country.toLowerCase()+'"></a> '));let i=e.cli_port&&e.cli_port>0?":"+U.filterize("cli_port",e.cli_port,e.cli_port):"",o="";1==e.cli_ip.blacklisted&&(o=" <i class='fas fa-ban fa-sm' title='"+i18n("hosts_stats.blacklisted")+"'></i>");let r="";if(e.srv_ip.name){let t="";e.srv_ip.label_long&&(t=e.srv_ip.value+" ["+e.srv_ip.label_long+"]"),r=U.filterizeVlan(e,n,"srv_name",e.srv_ip.name,e.srv_ip.label,t)}else r=U.filterizeVlan(e,n,"srv_ip",e.srv_ip.value,e.srv_ip.label,e.srv_ip.label_long);let c=e.cli_port&&e.cli_port>0?":"+U.filterize("srv_port",e.srv_port,e.srv_port):"",u="";e.srv_ip.country&&"nil"!==e.srv_ip.country&&(u=U.filterize("srv_country",e.srv_ip.country,e.srv_ip.country,e.srv_ip.country,e.srv_ip.country,' <img src="'+http_prefix+'/dist/images/blank.gif" class="flag flag-'+e.srv_ip.country.toLowerCase()+'"></a> '));let d="";1==e.srv_ip.blacklisted&&(d=" <i class='fas fa-ban fa-sm' title='"+i18n("hosts_stats.blacklisted")+"'></i>");let p="",_="";return n.cli_role&&("attacker"==n.cli_role.value?p+=U.filterize("role","attacker",'<i class="fas fa-skull" title="'+n.cli_role.label+'"></i>',n.cli_role.tag_label):"victim"==n.cli_role.value&&(p+=U.filterize("role","victim",'<i class="fas fa-sad-tear" title="'+n.cli_role.label+'"></i>',n.cli_role.tag_label))),n.srv_role&&("attacker"==n.srv_role.value?_+=U.filterize("role","attacker",'<i class="fas fa-skull" title="'+n.srv_role.label+'"></i>',n.srv_role.tag_label):"victim"==n.srv_role.value&&(_+=U.filterize("role","victim",'<i class="fas fa-sad-tear" title="'+n.srv_role.label+'"></i>',n.srv_role.tag_label))),`${a} ${l}${o}${s}${i} ${p} ${e.cli_ip.reference} <i class="fas fa-exchange-alt fa-lg" aria-hidden="true"></i> ${r}${d}${u}${c} ${_} ${e.srv_ip.reference}`}static formatNameDescription(e,t,n){if("display"!==t)return e.name;return U.filterize("alert_id",e.value,e.name,e.fullname,e.fullname)}static applyCellStyle(e,t,n,a,l){t.highlight&&$(e).css("border-left","5px solid "+t.highlight)}}function F(e,t){const n=Object.create(null),a=e.split(",");for(let e=0;e<a.length;e++)n[a[e]]=!0;return t?e=>!!n[e.toLowerCase()]:e=>!!n[e]}window.do_pie=function(e,t,n,a,l){var s=new S(e,t,n,a,l);return l&&s.setInterval(setInterval((function(){s.update()}),l)),s},window.DataTableUtils=O,window.DataTableFiltersMenu=class{constructor({tableAPI:e,filterMenuKey:t,filterTitle:n,filters:a,columnIndex:l,icon:s=null,extraAttributes:i="",id:o=null,url:r=null,urlParams:c=null,removeAllEntry:u=!1,callbackFunction:d=null}){this.rawFilters=a,this.tableAPI=e,this.filterTitle=n,this.icon=s,this.filterMenuKey=t,this.columnIndex=l,this.preventUpdate=!1,this.currentFilterSelected=void 0,this.$datatableWrapper=$(e.context[0].nTableWrapper),this.extraAttributes=i,this.id=o,this.url=r,this.urlParams,this.removeAllEntry=u,this.callbackFunction=d}get selectedFilter(){return this.currentFilterSelected}init(){const e=this;return this.$datatableWrapper.on("init.dt",(function(){e._render(e.rawFilters)})),this.tableAPI.on("draw",(function(){e._update()})),e}_countEntries(e,t=[]){void 0===e&&console.error("DataTableFiltersMenu::_countEntries() => the passed regex is undefined!");const n=new RegExp(e);return t.filter((e=>n.test(e))).length}_createMenuEntry(e){const t=this;let n=$(`<li class='dropdown-item pointer'>${e.label} </li>`);if(t.url){if(n=$(`<li class='dropdown-item pointer'><a href=# class='p-1 standard-color'>${e.label} </li>`),1==e.currently_active){0==t.$dropdown.title.parent().find("i.fas").length&&t.$dropdown.title.parent().prepend("<i class='fas fa-filter'></i>");const a=n.html();t.$dropdown.title.html(a),t.$dropdown.container.find("li").removeClass("active"),"all"!==e.key&&n.addClass("active")}}else if(void 0!==e.regex&&(void 0===e.countable||e.countable)){const t=this.tableAPI.columns(this.columnIndex).data()[0],a=this._countEntries(e.regex,t),l=$(`<span class='counter'>(${a})</span>`);0==a&&n.hide(),n.append(l)}return n.on("click",(function(a){0==t.$dropdown.title.parent().find("i.fas").length&&t.$dropdown.title.parent().prepend("<i class='fas fa-filter'></i>");const l=n.html();if(t.$dropdown.title.html(l),t.$dropdown.container.find("li").removeClass("active"),"all"!==e.key&&n.addClass("active"),t.callbackFunction)return t.callbackFunction(t.tableAPI,e),void(e.callback&&e.callback());if(t.url){t.urlParams=window.location.search;const n=new URLSearchParams(t.urlParams);n.set(t.filterMenuKey,null!=typeof e.id?e.id:""),t.url,n.toString(),window.history.pushState("","",window.location.pathname+"?"+n.toString()),location.reload()}else t.preventUpdate=!0,e.callback&&e.callback(),t.tableAPI.column(t.columnIndex).search(e.regex,!0,!1).draw(),t.currentFilterSelected=e})),n}_createFilters(e){const t={};for(const n of e){const e=this._createMenuEntry(n);t[n.key]={filter:n,$node:e}}return t}_render(e){if(void 0===this.columnIndex)$(`<span id="${this.id}" ${this.extraAttributes} title="${this.filterTitle}">${this.icon||this.filterTitle}</span>`).insertBefore(this.$datatableWrapper.find(".dataTables_filter").parent());else{const t=$(`<div id='${this.filterMenuKey}_dropdown' class='dropdown d-inline'></div>`),n=$("<button class='btn-link btn dropdown-toggle' data-bs-toggle=\"dropdown\" type='button'></button>"),a=$(`<span class='filter-title'>${this.filterTitle}</span>`);n.append(a),this.$dropdown={container:t,title:a,button:n},this.filters=this._createFilters(e);const l=$(`<ul class='dropdown-menu dropdown-menu-lg-end scrollable-dropdown' id='${this.filterMenuKey}_dropdown_menu'></ul>`);for(const[e,t]of Object.entries(this.filters))l.append(t.$node);if(!this.removeAllEntry){const e=this._generateAllFilter();l.prepend(this._createMenuEntry(e))}t.append(n),t.append(l),t.insertBefore(this.$datatableWrapper.find(".dataTables_filter").parent()),this._selectFilterFromState(this.filterMenuKey)}}_selectFilterFromState(e){this.tableAPI.state&&this.tableAPI.state.loaded()&&this.tableAPI.state.loaded().filters&&tableAPI.state.save()}_generateAllFilter(){return{key:"all",label:i18n_ext.all,regex:"",countable:!1,callback:()=>{this.$dropdown.title.parent().find("i.fas.fa-filter").remove(),this.$dropdown.title.html(`${this.filterTitle}`)}}}_update(){if(void 0!==this.filters)if(this.preventUpdate)this.preventUpdate=!1;else for(const[e,t]of Object.entries(this.filters)){if(0==t.countable||0==t.filter.countable)continue;const e=this.tableAPI.columns(this.columnIndex).data()[0],n=this._countEntries(t.filter.regex,e);0==n?t.$node.hide():t.$node.show(),t.$node.find(".counter").text(`(${n})`),this.$dropdown.button.find(".counter").text(`(${n})`)}}},window.DataTableRenders=U,window.ChartWidget=class extends class{constructor(e,t={},n=0,a={}){this._fetchedData=[],this.name=e,this._updateTime=n,this._datasource=t,this._additionalParams=a}async init(){E.registerWidget(this),this._fetchedData=await this._fetchData(),this._updateTime>0&&setInterval((async()=>{await this.update(this._datasource.params)}),this._updateTime)}async destroy(){}async destroyAndUpdate(e={}){await this.destroy(),await this.update(e)}async updateByUrl(e){const t=new URL(`${location.origin}${this._datasource.name}`);let n=ntopng_url_manager.get_url_entries(e);for(const[e,a]of n)t.searchParams.set(e,a);this._datasource.endpoint=t.pathname+t.search,this._fetchedData=await this._fetchData()}async update(e={}){const t=new URL(`${location.origin}${this._datasource.name}`);for(const[n,a]of Object.entries(e))t.searchParams.set(n,a);this._datasource.endpoint=t.pathname+t.search,this._fetchedData=await this._fetchData()}async _fetchData(){const e=await fetch(`${http_prefix}${this._datasource.endpoint}`);return await e.json()}}{constructor(e,t="line",n={},a=0,l={}){super(e,n,a,l),this._chartType=t,this._chart={},this._$htmlChart=document.querySelector(`#canvas-widget-${e}`)}static registerEventCallback(e,t,n){setTimeout((async()=>{try{const a=E.getWidgetByName(e),l={chart:{events:{[t]:n}}};await a._chart.updateOptions(l)}catch(e){}}),1e3)}_generateConfig(){const e={series:[],tooltip:{enabledOnSeries:[0],x:{show:!0,format:"dd/MM/yyyy HH:mm:ss"},y:{formatter:function(e,{series:t,seriesIndex:n,dataPointIndex:a,w:l}){return e}},z:{show:!1}},chart:{type:this._chartType,events:{},height:"100%",toolbar:{show:!1}},xaxis:{labels:{style:{fontSize:"14px"}},tooltip:{enabled:!0,formatter:function(e){return e}}},yaxis:{labels:{style:{fontSize:"14px"}},tooltip:{enabled:!0,formatter:function(e){return e}}},zaxis:{labels:{style:{fontSize:"14px"}},tooltip:{enabled:!0}},dataLabels:{enabled:!0,style:{fontSize:"14px"}},labels:[],legend:{show:!0,fontSize:"14px",position:"bottom",onItemClick:{toggleDataSeries:!0}},plotOptions:{bar:{borderRadius:4,horizontal:!0}},noData:{text:"No Data",align:"center",verticalAlign:"middle",style:{fontSize:"24px"}}};if(this._additionalParams&&this._additionalParams.apex){return Object.assign(e,this._additionalParams.apex)}return e}_buildTooltip(e,t){if(e.tooltip.y={formatter:function(e,{series:t,seriesIndex:n,dataPointIndex:a,w:l}){return e}},t.tooltip){for(const n in t.tooltip)if("x"===n||"y"===n||"z"===n){const a=t.tooltip[n].formatter;e.tooltip[n]||(e.tooltip[n]={}),e.tooltip[n].formatter=A[a]||NtopUtils[a]}t.tooltip.custom&&(e.tooltip.custom=A[t.tooltip.custom]||NtopUtils[t.tooltip.custom])}}_buildAxisFormatter(e,t){const n=e[t];if(void 0!==n&&void 0!==n.labels&&void 0!==n.labels.ntop_utils_formatter&&"none"!==n.labels.ntop_utils_formatter){const e=n.labels.ntop_utils_formatter;void 0===NtopUtils[e]?console.error(`xaxis: Formatting function '${e}' didn't found inside NtopUtils.`):n.labels.formatter=NtopUtils[e]}}_buildDataLabels(e,t){if(t.dataLabels)for(const[n,a]of Object.entries(t.dataLabels))e.dataLabels[n]=a;let n=e.dataLabels.formatter;n&&A[n]&&(e.dataLabels.formatter=A[n])}_buildConfig(){const e=this._generateConfig(),t=this._fetchedData.rsp,n=["series","xaxis","yaxis","colors","labels","fill","filter","filtering_labels"];for(const a of n)void 0!==t[a]&&(void 0!==e[a]?e[a]=Object.assign(e[a],t[a]):e[a]=t[a]);if(t.events)for(const n in t.events)e.chart.events[n]=N[t.events[n]];return void 0!==t.horizontal_chart&&(e.plotOptions.bar.horizontal=t.horizontal_chart),this._buildTooltip(e,t),this._buildAxisFormatter(e,"xaxis"),this._buildAxisFormatter(e,"yaxis"),this._buildDataLabels(e,t),e}_initializeChart(){const e=this._buildConfig();this._chartConfig=e,this._chart=new ApexCharts(this._$htmlChart,this._chartConfig),this._chart.render()}async init(){await super.init(),this._initializeChart()}async destroy(){await super.destroy(),this._chart.destroy(),this._chart=null}async update(e={}){if(void 0!==this._chartConfig&&(e?await super.update(e):await super.updateByUrl(),null!=this._chart)){const{colors:e,series:t,dataLabels:n,labels:a,xaxis:l,filtering_labels:s}=this._fetchedData.rsp;if(this._chartConfig.colors=e,this._chartConfig.series=t,l&&l.categories&&(this._chartConfig.xaxis.categories=l.categories),s&&(this._chartConfig.filtering_labels=s),n){let e=this._chartConfig.dataLabels.formatter;this._chartConfig.dataLabels.formatter=e&&A[e]?A[e]:T}a&&(this._chartConfig.labels=a),this._chart.updateOptions(this._chartConfig,!0)}}async destroyAndUpdate(e={}){await super.destroyAndUpdate(e),this._initializeChart()}},window.WidgetUtils=E,window.ntopChartApex=I,$((function(){function e(e){if("mousedown"==e.type&&(e.metaKey||e.ctrlKey||2!==e.which))return;const t=$(this).data("id");$.post(`${http_prefix}/lua/update_blog_posts.lua`,{blog_notification_id:t,csrf:window.__BLOG_NOTIFICATION_CSRF__},(e=>{if(e.success){$(this).off("click").off("mousedown").attr("data-read","true").data("read","true").find(".badge").remove();const e=$(".blog-notification[data-read='false']").length;0==e?$(".notification-bell").remove():$(".notification-bell").html(e)}}))}$(".blog-notification[data-read='false']").on("click",e).on("mousedown",e)}));const R=F("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt"),D=F("itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly");function j(e){return!!e||""===e}function L(e){if(ue(e)){const t={};for(let n=0;n<e.length;n++){const a=e[n],l=he(a)?V(a):L(a);if(l)for(const e in l)t[e]=l[e]}return t}return he(e)||ge(e)?e:void 0}const z=/;(?![^(]*\))/g,B=/:(.+)/;function V(e){const t={};return e.split(z).forEach((e=>{if(e){const n=e.split(B);n.length>1&&(t[n[0].trim()]=n[1].trim())}})),t}function q(e){let t="";if(he(e))t=e;else if(ue(e))for(let n=0;n<e.length;n++){const a=q(e[n]);a&&(t+=a+" ")}else if(ge(e))for(const n in e)e[n]&&(t+=n+" ");return t.trim()}function H(e){if(!e)return null;let{class:t,style:n}=e;return t&&!he(t)&&(e.class=q(t)),n&&(e.style=L(n)),e}const G=F("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot"),K=F("svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view"),W=F("area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr");function J(e,t){if(e===t)return!0;let n=_e(e),a=_e(t);if(n||a)return!(!n||!a)&&e.getTime()===t.getTime();if(n=me(e),a=me(t),n||a)return e===t;if(n=ue(e),a=ue(t),n||a)return!(!n||!a)&&function(e,t){if(e.length!==t.length)return!1;let n=!0;for(let a=0;n&&a<e.length;a++)n=J(e[a],t[a]);return n}(e,t);if(n=ge(e),a=ge(t),n||a){if(!n||!a)return!1;if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const n in e){const a=e.hasOwnProperty(n),l=t.hasOwnProperty(n);if(a&&!l||!a&&l||!J(e[n],t[n]))return!1}}return String(e)===String(t)}function Y(e,t){return e.findIndex((e=>J(e,t)))}const X=e=>he(e)?e:null==e?"":ue(e)||ge(e)&&(e.toString===be||!fe(e.toString))?JSON.stringify(e,Z,2):String(e),Z=(e,t)=>t&&t.__v_isRef?Z(e,t.value):de(t)?{[`Map(${t.size})`]:[...t.entries()].reduce(((e,[t,n])=>(e[`${t} =>`]=n,e)),{})}:pe(t)?{[`Set(${t.size})`]:[...t.values()]}:!ge(t)||ue(t)||we(t)?t:String(t),Q={},ee=[],te=()=>{},ne=()=>!1,ae=/^on[^a-z]/,le=e=>ae.test(e),se=e=>e.startsWith("onUpdate:"),ie=Object.assign,oe=(e,t)=>{const n=e.indexOf(t);n>-1&&e.splice(n,1)},re=Object.prototype.hasOwnProperty,ce=(e,t)=>re.call(e,t),ue=Array.isArray,de=e=>"[object Map]"===ye(e),pe=e=>"[object Set]"===ye(e),_e=e=>"[object Date]"===ye(e),fe=e=>"function"==typeof e,he=e=>"string"==typeof e,me=e=>"symbol"==typeof e,ge=e=>null!==e&&"object"==typeof e,ve=e=>ge(e)&&fe(e.then)&&fe(e.catch),be=Object.prototype.toString,ye=e=>be.call(e),we=e=>"[object Object]"===ye(e),xe=e=>he(e)&&"NaN"!==e&&"-"!==e[0]&&""+parseInt(e,10)===e,ke=F(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),$e=F("bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo"),Se=e=>{const t=Object.create(null);return n=>t[n]||(t[n]=e(n))},Ce=/-(\w)/g,Ne=Se((e=>e.replace(Ce,((e,t)=>t?t.toUpperCase():"")))),Ae=/\B([A-Z])/g,Te=Se((e=>e.replace(Ae,"-$1").toLowerCase())),Ee=Se((e=>e.charAt(0).toUpperCase()+e.slice(1))),Pe=Se((e=>e?`on${Ee(e)}`:"")),Ie=(e,t)=>!Object.is(e,t),Me=(e,t)=>{for(let n=0;n<e.length;n++)e[n](t)},Oe=(e,t,n)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:n})},Ue=e=>{const t=parseFloat(e);return isNaN(t)?e:t};let Fe,Re;class De{constructor(e=!1){this.active=!0,this.effects=[],this.cleanups=[],!e&&Re&&(this.parent=Re,this.index=(Re.scopes||(Re.scopes=[])).push(this)-1)}run(e){if(this.active){const t=Re;try{return Re=this,e()}finally{Re=t}}}on(){Re=this}off(){Re=this.parent}stop(e){if(this.active){let t,n;for(t=0,n=this.effects.length;t<n;t++)this.effects[t].stop();for(t=0,n=this.cleanups.length;t<n;t++)this.cleanups[t]();if(this.scopes)for(t=0,n=this.scopes.length;t<n;t++)this.scopes[t].stop(!0);if(this.parent&&!e){const e=this.parent.scopes.pop();e&&e!==this&&(this.parent.scopes[this.index]=e,e.index=this.index)}this.active=!1}}}function je(e){return new De(e)}function Le(e,t=Re){t&&t.active&&t.effects.push(e)}function ze(){return Re}function Be(e){Re&&Re.cleanups.push(e)}const Ve=e=>{const t=new Set(e);return t.w=0,t.n=0,t},qe=e=>(e.w&Je)>0,He=e=>(e.n&Je)>0,Ge=new WeakMap;let Ke,We=0,Je=1;const Ye=Symbol(""),Xe=Symbol("");class Ze{constructor(e,t=null,n){this.fn=e,this.scheduler=t,this.active=!0,this.deps=[],this.parent=void 0,Le(this,n)}run(){if(!this.active)return this.fn();let e=Ke,t=nt;for(;e;){if(e===this)return;e=e.parent}try{return this.parent=Ke,Ke=this,nt=!0,Je=1<<++We,We<=30?(({deps:e})=>{if(e.length)for(let t=0;t<e.length;t++)e[t].w|=Je})(this):Qe(this),this.fn()}finally{We<=30&&(e=>{const{deps:t}=e;if(t.length){let n=0;for(let a=0;a<t.length;a++){const l=t[a];qe(l)&&!He(l)?l.delete(e):t[n++]=l,l.w&=~Je,l.n&=~Je}t.length=n}})(this),Je=1<<--We,Ke=this.parent,nt=t,this.parent=void 0,this.deferStop&&this.stop()}}stop(){Ke===this?this.deferStop=!0:this.active&&(Qe(this),this.onStop&&this.onStop(),this.active=!1)}}function Qe(e){const{deps:t}=e;if(t.length){for(let n=0;n<t.length;n++)t[n].delete(e);t.length=0}}function et(e,t){e.effect&&(e=e.effect.fn);const n=new Ze(e);t&&(ie(n,t),t.scope&&Le(n,t.scope)),t&&t.lazy||n.run();const a=n.run.bind(n);return a.effect=n,a}function tt(e){e.effect.stop()}let nt=!0;const at=[];function lt(){at.push(nt),nt=!1}function st(){const e=at.pop();nt=void 0===e||e}function it(e,t,n){if(nt&&Ke){let t=Ge.get(e);t||Ge.set(e,t=new Map);let a=t.get(n);a||t.set(n,a=Ve()),ot(a)}}function ot(e,t){let n=!1;We<=30?He(e)||(e.n|=Je,n=!qe(e)):n=!e.has(Ke),n&&(e.add(Ke),Ke.deps.push(e))}function rt(e,t,n,a,l,s){const i=Ge.get(e);if(!i)return;let o=[];if("clear"===t)o=[...i.values()];else if("length"===n&&ue(e))i.forEach(((e,t)=>{("length"===t||t>=a)&&o.push(e)}));else switch(void 0!==n&&o.push(i.get(n)),t){case"add":ue(e)?xe(n)&&o.push(i.get("length")):(o.push(i.get(Ye)),de(e)&&o.push(i.get(Xe)));break;case"delete":ue(e)||(o.push(i.get(Ye)),de(e)&&o.push(i.get(Xe)));break;case"set":de(e)&&o.push(i.get(Ye))}if(1===o.length)o[0]&&ct(o[0]);else{const e=[];for(const t of o)t&&e.push(...t);ct(Ve(e))}}function ct(e,t){const n=ue(e)?e:[...e];for(const e of n)e.computed&&ut(e);for(const e of n)e.computed||ut(e)}function ut(e,t){(e!==Ke||e.allowRecurse)&&(e.scheduler?e.scheduler():e.run())}const dt=F("__proto__,__v_isRef,__isVue"),pt=new Set(Object.getOwnPropertyNames(Symbol).filter((e=>"arguments"!==e&&"caller"!==e)).map((e=>Symbol[e])).filter(me)),_t=vt(),ft=vt(!1,!0),ht=vt(!0),mt=vt(!0,!0),gt=function(){const e={};return["includes","indexOf","lastIndexOf"].forEach((t=>{e[t]=function(...e){const n=ln(this);for(let e=0,t=this.length;e<t;e++)it(n,0,e+"");const a=n[t](...e);return-1===a||!1===a?n[t](...e.map(ln)):a}})),["push","pop","shift","unshift","splice"].forEach((t=>{e[t]=function(...e){lt();const n=ln(this)[t].apply(this,e);return st(),n}})),e}();function vt(e=!1,t=!1){return function(n,a,l){if("__v_isReactive"===a)return!e;if("__v_isReadonly"===a)return e;if("__v_isShallow"===a)return t;if("__v_raw"===a&&l===(e?t?Wt:Kt:t?Gt:Ht).get(n))return n;const s=ue(n);if(!e&&s&&ce(gt,a))return Reflect.get(gt,a,l);const i=Reflect.get(n,a,l);return(me(a)?pt.has(a):dt(a))?i:(e||it(n,0,a),t?i:dn(i)?s&&xe(a)?i:i.value:ge(i)?e?Xt(i):Jt(i):i)}}function bt(e=!1){return function(t,n,a,l){let s=t[n];if(tn(s)&&dn(s)&&!dn(a))return!1;if(!e&&!tn(a)&&(nn(a)||(a=ln(a),s=ln(s)),!ue(t)&&dn(s)&&!dn(a)))return s.value=a,!0;const i=ue(t)&&xe(n)?Number(n)<t.length:ce(t,n),o=Reflect.set(t,n,a,l);return t===ln(l)&&(i?Ie(a,s)&&rt(t,"set",n,a):rt(t,"add",n,a)),o}}const yt={get:_t,set:bt(),deleteProperty:function(e,t){const n=ce(e,t),a=Reflect.deleteProperty(e,t);return a&&n&&rt(e,"delete",t,void 0),a},has:function(e,t){const n=Reflect.has(e,t);return me(t)&&pt.has(t)||it(e,0,t),n},ownKeys:function(e){return it(e,0,ue(e)?"length":Ye),Reflect.ownKeys(e)}},wt={get:ht,set:(e,t)=>!0,deleteProperty:(e,t)=>!0},xt=ie({},yt,{get:ft,set:bt(!0)}),kt=ie({},wt,{get:mt}),$t=e=>e,St=e=>Reflect.getPrototypeOf(e);function Ct(e,t,n=!1,a=!1){const l=ln(e=e.__v_raw),s=ln(t);n||(t!==s&&it(l,0,t),it(l,0,s));const{has:i}=St(l),o=a?$t:n?rn:on;return i.call(l,t)?o(e.get(t)):i.call(l,s)?o(e.get(s)):void(e!==l&&e.get(t))}function Nt(e,t=!1){const n=this.__v_raw,a=ln(n),l=ln(e);return t||(e!==l&&it(a,0,e),it(a,0,l)),e===l?n.has(e):n.has(e)||n.has(l)}function At(e,t=!1){return e=e.__v_raw,!t&&it(ln(e),0,Ye),Reflect.get(e,"size",e)}function Tt(e){e=ln(e);const t=ln(this);return St(t).has.call(t,e)||(t.add(e),rt(t,"add",e,e)),this}function Et(e,t){t=ln(t);const n=ln(this),{has:a,get:l}=St(n);let s=a.call(n,e);s||(e=ln(e),s=a.call(n,e));const i=l.call(n,e);return n.set(e,t),s?Ie(t,i)&&rt(n,"set",e,t):rt(n,"add",e,t),this}function Pt(e){const t=ln(this),{has:n,get:a}=St(t);let l=n.call(t,e);l||(e=ln(e),l=n.call(t,e)),a&&a.call(t,e);const s=t.delete(e);return l&&rt(t,"delete",e,void 0),s}function It(){const e=ln(this),t=0!==e.size,n=e.clear();return t&&rt(e,"clear",void 0,void 0),n}function Mt(e,t){return function(n,a){const l=this,s=l.__v_raw,i=ln(s),o=t?$t:e?rn:on;return!e&&it(i,0,Ye),s.forEach(((e,t)=>n.call(a,o(e),o(t),l)))}}function Ot(e,t,n){return function(...a){const l=this.__v_raw,s=ln(l),i=de(s),o="entries"===e||e===Symbol.iterator&&i,r="keys"===e&&i,c=l[e](...a),u=n?$t:t?rn:on;return!t&&it(s,0,r?Xe:Ye),{next(){const{value:e,done:t}=c.next();return t?{value:e,done:t}:{value:o?[u(e[0]),u(e[1])]:u(e),done:t}},[Symbol.iterator](){return this}}}}function Ut(e){return function(...t){return"delete"!==e&&this}}const[Ft,Rt,Dt,jt]=function(){const e={get(e){return Ct(this,e)},get size(){return At(this)},has:Nt,add:Tt,set:Et,delete:Pt,clear:It,forEach:Mt(!1,!1)},t={get(e){return Ct(this,e,!1,!0)},get size(){return At(this)},has:Nt,add:Tt,set:Et,delete:Pt,clear:It,forEach:Mt(!1,!0)},n={get(e){return Ct(this,e,!0)},get size(){return At(this,!0)},has(e){return Nt.call(this,e,!0)},add:Ut("add"),set:Ut("set"),delete:Ut("delete"),clear:Ut("clear"),forEach:Mt(!0,!1)},a={get(e){return Ct(this,e,!0,!0)},get size(){return At(this,!0)},has(e){return Nt.call(this,e,!0)},add:Ut("add"),set:Ut("set"),delete:Ut("delete"),clear:Ut("clear"),forEach:Mt(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach((l=>{e[l]=Ot(l,!1,!1),n[l]=Ot(l,!0,!1),t[l]=Ot(l,!1,!0),a[l]=Ot(l,!0,!0)})),[e,n,t,a]}();function Lt(e,t){const n=t?e?jt:Dt:e?Rt:Ft;return(t,a,l)=>"__v_isReactive"===a?!e:"__v_isReadonly"===a?e:"__v_raw"===a?t:Reflect.get(ce(n,a)&&a in t?n:t,a,l)}const zt={get:Lt(!1,!1)},Bt={get:Lt(!1,!0)},Vt={get:Lt(!0,!1)},qt={get:Lt(!0,!0)},Ht=new WeakMap,Gt=new WeakMap,Kt=new WeakMap,Wt=new WeakMap;function Jt(e){return tn(e)?e:Qt(e,!1,yt,zt,Ht)}function Yt(e){return Qt(e,!1,xt,Bt,Gt)}function Xt(e){return Qt(e,!0,wt,Vt,Kt)}function Zt(e){return Qt(e,!0,kt,qt,Wt)}function Qt(e,t,n,a,l){if(!ge(e))return e;if(e.__v_raw&&(!t||!e.__v_isReactive))return e;const s=l.get(e);if(s)return s;const i=function(e){return e.__v_skip||!Object.isExtensible(e)?0:function(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}((e=>ye(e).slice(8,-1))(e))}(e);if(0===i)return e;const o=new Proxy(e,2===i?a:n);return l.set(e,o),o}function en(e){return tn(e)?en(e.__v_raw):!(!e||!e.__v_isReactive)}function tn(e){return!(!e||!e.__v_isReadonly)}function nn(e){return!(!e||!e.__v_isShallow)}function an(e){return en(e)||tn(e)}function ln(e){const t=e&&e.__v_raw;return t?ln(t):e}function sn(e){return Oe(e,"__v_skip",!0),e}const on=e=>ge(e)?Jt(e):e,rn=e=>ge(e)?Xt(e):e;function cn(e){nt&&Ke&&ot((e=ln(e)).dep||(e.dep=Ve()))}function un(e,t){(e=ln(e)).dep&&ct(e.dep)}function dn(e){return!(!e||!0!==e.__v_isRef)}function pn(e){return fn(e,!1)}function _n(e){return fn(e,!0)}function fn(e,t){return dn(e)?e:new hn(e,t)}class hn{constructor(e,t){this.__v_isShallow=t,this.dep=void 0,this.__v_isRef=!0,this._rawValue=t?e:ln(e),this._value=t?e:on(e)}get value(){return cn(this),this._value}set value(e){e=this.__v_isShallow?e:ln(e),Ie(e,this._rawValue)&&(this._rawValue=e,this._value=this.__v_isShallow?e:on(e),un(this))}}function mn(e){un(e)}function gn(e){return dn(e)?e.value:e}const vn={get:(e,t,n)=>gn(Reflect.get(e,t,n)),set:(e,t,n,a)=>{const l=e[t];return dn(l)&&!dn(n)?(l.value=n,!0):Reflect.set(e,t,n,a)}};function bn(e){return en(e)?e:new Proxy(e,vn)}class yn{constructor(e){this.dep=void 0,this.__v_isRef=!0;const{get:t,set:n}=e((()=>cn(this)),(()=>un(this)));this._get=t,this._set=n}get value(){return this._get()}set value(e){this._set(e)}}function wn(e){return new yn(e)}function xn(e){const t=ue(e)?new Array(e.length):{};for(const n in e)t[n]=$n(e,n);return t}class kn{constructor(e,t,n){this._object=e,this._key=t,this._defaultValue=n,this.__v_isRef=!0}get value(){const e=this._object[this._key];return void 0===e?this._defaultValue:e}set value(e){this._object[this._key]=e}}function $n(e,t,n){const a=e[t];return dn(a)?a:new kn(e,t,n)}class Sn{constructor(e,t,n,a){this._setter=t,this.dep=void 0,this.__v_isRef=!0,this._dirty=!0,this.effect=new Ze(e,(()=>{this._dirty||(this._dirty=!0,un(this))})),this.effect.computed=this,this.effect.active=this._cacheable=!a,this.__v_isReadonly=n}get value(){const e=ln(this);return cn(e),!e._dirty&&e._cacheable||(e._dirty=!1,e._value=e.effect.run()),e._value}set value(e){this._setter(e)}}const Cn=[];function Nn(e,...t){lt();const n=Cn.length?Cn[Cn.length-1].component:null,a=n&&n.appContext.config.warnHandler,l=function(){let e=Cn[Cn.length-1];if(!e)return[];const t=[];for(;e;){const n=t[0];n&&n.vnode===e?n.recurseCount++:t.push({vnode:e,recurseCount:0});const a=e.component&&e.component.parent;e=a&&a.vnode}return t}();if(a)En(a,n,11,[e+t.join(""),n&&n.proxy,l.map((({vnode:e})=>`at <${mi(n,e.type)}>`)).join("\n"),l]);else{const n=[`[Vue warn]: ${e}`,...t];l.length&&n.push("\n",...function(e){const t=[];return e.forEach(((e,n)=>{t.push(...0===n?[]:["\n"],...function({vnode:e,recurseCount:t}){const n=t>0?`... (${t} recursive calls)`:"",a=` at <${mi(e.component,e.type,!!e.component&&null==e.component.parent)}`,l=">"+n;return e.props?[a,...An(e.props),l]:[a+l]}(e))})),t}(l)),console.warn(...n)}st()}function An(e){const t=[],n=Object.keys(e);return n.slice(0,3).forEach((n=>{t.push(...Tn(n,e[n]))})),n.length>3&&t.push(" ..."),t}function Tn(e,t,n){return he(t)?(t=JSON.stringify(t),n?t:[`${e}=${t}`]):"number"==typeof t||"boolean"==typeof t||null==t?n?t:[`${e}=${t}`]:dn(t)?(t=Tn(e,ln(t.value),!0),n?t:[`${e}=Ref<`,t,">"]):fe(t)?[`${e}=fn${t.name?`<${t.name}>`:""}`]:(t=ln(t),n?t:[`${e}=`,t])}function En(e,t,n,a){let l;try{l=a?e(...a):e()}catch(e){In(e,t,n)}return l}function Pn(e,t,n,a){if(fe(e)){const l=En(e,t,n,a);return l&&ve(l)&&l.catch((e=>{In(e,t,n)})),l}const l=[];for(let s=0;s<e.length;s++)l.push(Pn(e[s],t,n,a));return l}function In(e,t,n,a=!0){if(t){let a=t.parent;const l=t.proxy,s=n;for(;a;){const t=a.ec;if(t)for(let n=0;n<t.length;n++)if(!1===t[n](e,l,s))return;a=a.parent}const i=t.appContext.config.errorHandler;if(i)return void En(i,null,10,[e,l,s])}!function(e,t,n,a=!0){console.error(e)}(e,0,0,a)}let Mn=!1,On=!1;const Un=[];let Fn=0;const Rn=[];let Dn=null,jn=0;const Ln=[];let zn=null,Bn=0;const Vn=Promise.resolve();let qn=null,Hn=null;function Gn(e){const t=qn||Vn;return e?t.then(this?e.bind(this):e):t}function Kn(e){Un.length&&Un.includes(e,Mn&&e.allowRecurse?Fn+1:Fn)||e===Hn||(null==e.id?Un.push(e):Un.splice(function(e){let t=Fn+1,n=Un.length;for(;t<n;){const a=t+n>>>1;Qn(Un[a])<e?t=a+1:n=a}return t}(e.id),0,e),Wn())}function Wn(){Mn||On||(On=!0,qn=Vn.then(ea))}function Jn(e,t,n,a){ue(e)?n.push(...e):t&&t.includes(e,e.allowRecurse?a+1:a)||n.push(e),Wn()}function Yn(e){Jn(e,zn,Ln,Bn)}function Xn(e,t=null){if(Rn.length){for(Hn=t,Dn=[...new Set(Rn)],Rn.length=0,jn=0;jn<Dn.length;jn++)Dn[jn]();Dn=null,jn=0,Hn=null,Xn(e,t)}}function Zn(e){if(Xn(),Ln.length){const e=[...new Set(Ln)];if(Ln.length=0,zn)return void zn.push(...e);for(zn=e,zn.sort(((e,t)=>Qn(e)-Qn(t))),Bn=0;Bn<zn.length;Bn++)zn[Bn]();zn=null,Bn=0}}const Qn=e=>null==e.id?1/0:e.id;function ea(e){On=!1,Mn=!0,Xn(e),Un.sort(((e,t)=>Qn(e)-Qn(t)));try{for(Fn=0;Fn<Un.length;Fn++){const e=Un[Fn];e&&!1!==e.active&&En(e,null,14)}}finally{Fn=0,Un.length=0,Zn(),Mn=!1,qn=null,(Un.length||Rn.length||Ln.length)&&ea(e)}}let ta,na=[];function aa(e,t){var n,a;ta=e,ta?(ta.enabled=!0,na.forEach((({event:e,args:t})=>ta.emit(e,...t))),na=[]):"undefined"!=typeof window&&window.HTMLElement&&!(null===(a=null===(n=window.navigator)||void 0===n?void 0:n.userAgent)||void 0===a?void 0:a.includes("jsdom"))?((t.__VUE_DEVTOOLS_HOOK_REPLAY__=t.__VUE_DEVTOOLS_HOOK_REPLAY__||[]).push((e=>{aa(e,t)})),setTimeout((()=>{ta||(t.__VUE_DEVTOOLS_HOOK_REPLAY__=null,na=[])}),3e3)):na=[]}function la(e,t,...n){if(e.isUnmounted)return;const a=e.vnode.props||Q;let l=n;const s=t.startsWith("update:"),i=s&&t.slice(7);if(i&&i in a){const e=`${"modelValue"===i?"model":i}Modifiers`,{number:t,trim:s}=a[e]||Q;s&&(l=n.map((e=>e.trim()))),t&&(l=n.map(Ue))}let o,r=a[o=Pe(t)]||a[o=Pe(Ne(t))];!r&&s&&(r=a[o=Pe(Te(t))]),r&&Pn(r,e,6,l);const c=a[o+"Once"];if(c){if(e.emitted){if(e.emitted[o])return}else e.emitted={};e.emitted[o]=!0,Pn(c,e,6,l)}}function sa(e,t,n=!1){const a=t.emitsCache,l=a.get(e);if(void 0!==l)return l;const s=e.emits;let i={},o=!1;if(!fe(e)){const a=e=>{const n=sa(e,t,!0);n&&(o=!0,ie(i,n))};!n&&t.mixins.length&&t.mixins.forEach(a),e.extends&&a(e.extends),e.mixins&&e.mixins.forEach(a)}return s||o?(ue(s)?s.forEach((e=>i[e]=null)):ie(i,s),a.set(e,i),i):(a.set(e,null),null)}function ia(e,t){return!(!e||!le(t))&&(t=t.slice(2).replace(/Once$/,""),ce(e,t[0].toLowerCase()+t.slice(1))||ce(e,Te(t))||ce(e,t))}let oa=null,ra=null;function ca(e){const t=oa;return oa=e,ra=e&&e.type.__scopeId||null,t}function ua(e){ra=e}function da(){ra=null}const pa=e=>_a;function _a(e,t=oa,n){if(!t)return e;if(e._n)return e;const a=(...n)=>{a._d&&Es(-1);const l=ca(t),s=e(...n);return ca(l),a._d&&Es(1),s};return a._n=!0,a._c=!0,a._d=!0,a}function fa(e){const{type:t,vnode:n,proxy:a,withProxy:l,props:s,propsOptions:[i],slots:o,attrs:r,emit:c,render:u,renderCache:d,data:p,setupState:_,ctx:f,inheritAttrs:h}=e;let m,g;const v=ca(e);try{if(4&n.shapeFlag){const e=l||a;m=Ks(u.call(e,e,d,s,_,p,f)),g=r}else{m=Ks(t(s,t.length>1?{attrs:r,slots:o,emit:c}:null)),g=t.props?r:ha(r)}}catch(t){Ss.length=0,In(t,e,1),m=zs(ks)}let b=m;if(g&&!1!==h){const e=Object.keys(g),{shapeFlag:t}=b;e.length&&7&t&&(i&&e.some(se)&&(g=ma(g,i)),b=Vs(b,g))}return n.dirs&&(b=Vs(b),b.dirs=b.dirs?b.dirs.concat(n.dirs):n.dirs),n.transition&&(b.transition=n.transition),m=b,ca(v),m}const ha=e=>{let t;for(const n in e)("class"===n||"style"===n||le(n))&&((t||(t={}))[n]=e[n]);return t},ma=(e,t)=>{const n={};for(const a in e)se(a)&&a.slice(9)in t||(n[a]=e[a]);return n};function ga(e,t,n){const a=Object.keys(t);if(a.length!==Object.keys(e).length)return!0;for(let l=0;l<a.length;l++){const s=a[l];if(t[s]!==e[s]&&!ia(n,s))return!0}return!1}function va({vnode:e,parent:t},n){for(;t&&t.subTree===e;)(e=t.vnode).el=n,t=t.parent}const ba=e=>e.__isSuspense,ya={name:"Suspense",__isSuspense:!0,process(e,t,n,a,l,s,i,o,r,c){null==e?function(e,t,n,a,l,s,i,o,r){const{p:c,o:{createElement:u}}=r,d=u("div"),p=e.suspense=xa(e,l,a,t,d,n,s,i,o,r);c(null,p.pendingBranch=e.ssContent,d,null,a,p,s,i),p.deps>0?(wa(e,"onPending"),wa(e,"onFallback"),c(null,e.ssFallback,t,n,a,null,s,i),Sa(p,e.ssFallback)):p.resolve()}(t,n,a,l,s,i,o,r,c):function(e,t,n,a,l,s,i,o,{p:r,um:c,o:{createElement:u}}){const d=t.suspense=e.suspense;d.vnode=t,t.el=e.el;const p=t.ssContent,_=t.ssFallback,{activeBranch:f,pendingBranch:h,isInFallback:m,isHydrating:g}=d;if(h)d.pendingBranch=p,Us(p,h)?(r(h,p,d.hiddenContainer,null,l,d,s,i,o),d.deps<=0?d.resolve():m&&(r(f,_,n,a,l,null,s,i,o),Sa(d,_))):(d.pendingId++,g?(d.isHydrating=!1,d.activeBranch=h):c(h,l,d),d.deps=0,d.effects.length=0,d.hiddenContainer=u("div"),m?(r(null,p,d.hiddenContainer,null,l,d,s,i,o),d.deps<=0?d.resolve():(r(f,_,n,a,l,null,s,i,o),Sa(d,_))):f&&Us(p,f)?(r(f,p,n,a,l,d,s,i,o),d.resolve(!0)):(r(null,p,d.hiddenContainer,null,l,d,s,i,o),d.deps<=0&&d.resolve()));else if(f&&Us(p,f))r(f,p,n,a,l,d,s,i,o),Sa(d,p);else if(wa(t,"onPending"),d.pendingBranch=p,d.pendingId++,r(null,p,d.hiddenContainer,null,l,d,s,i,o),d.deps<=0)d.resolve();else{const{timeout:e,pendingId:t}=d;e>0?setTimeout((()=>{d.pendingId===t&&d.fallback(_)}),e):0===e&&d.fallback(_)}}(e,t,n,a,l,i,o,r,c)},hydrate:function(e,t,n,a,l,s,i,o,r){const c=t.suspense=xa(t,a,n,e.parentNode,document.createElement("div"),null,l,s,i,o,!0),u=r(e,c.pendingBranch=t.ssContent,n,c,s,i);return 0===c.deps&&c.resolve(),u},create:xa,normalize:function(e){const{shapeFlag:t,children:n}=e,a=32&t;e.ssContent=ka(a?n.default:n),e.ssFallback=a?ka(n.fallback):zs(ks)}};function wa(e,t){const n=e.props&&e.props[t];fe(n)&&n()}function xa(e,t,n,a,l,s,i,o,r,c,u=!1){const{p:d,m:p,um:_,n:f,o:{parentNode:h,remove:m}}=c,g=Ue(e.props&&e.props.timeout),v={vnode:e,parent:t,parentComponent:n,isSVG:i,container:a,hiddenContainer:l,anchor:s,deps:0,pendingId:0,timeout:"number"==typeof g?g:-1,activeBranch:null,pendingBranch:null,isInFallback:!0,isHydrating:u,isUnmounted:!1,effects:[],resolve(e=!1){const{vnode:t,activeBranch:n,pendingBranch:a,pendingId:l,effects:s,parentComponent:i,container:o}=v;if(v.isHydrating)v.isHydrating=!1;else if(!e){const e=n&&a.transition&&"out-in"===a.transition.mode;e&&(n.transition.afterLeave=()=>{l===v.pendingId&&p(a,o,t,0)});let{anchor:t}=v;n&&(t=f(n),_(n,i,v,!0)),e||p(a,o,t,0)}Sa(v,a),v.pendingBranch=null,v.isInFallback=!1;let r=v.parent,c=!1;for(;r;){if(r.pendingBranch){r.effects.push(...s),c=!0;break}r=r.parent}c||Yn(s),v.effects=[],wa(t,"onResolve")},fallback(e){if(!v.pendingBranch)return;const{vnode:t,activeBranch:n,parentComponent:a,container:l,isSVG:s}=v;wa(t,"onFallback");const i=f(n),c=()=>{v.isInFallback&&(d(null,e,l,i,a,null,s,o,r),Sa(v,e))},u=e.transition&&"out-in"===e.transition.mode;u&&(n.transition.afterLeave=c),v.isInFallback=!0,_(n,a,null,!0),u||c()},move(e,t,n){v.activeBranch&&p(v.activeBranch,e,t,n),v.container=e},next:()=>v.activeBranch&&f(v.activeBranch),registerDep(e,t){const n=!!v.pendingBranch;n&&v.deps++;const a=e.vnode.el;e.asyncDep.catch((t=>{In(t,e,0)})).then((l=>{if(e.isUnmounted||v.isUnmounted||v.pendingId!==e.suspenseId)return;e.asyncResolved=!0;const{vnode:s}=e;ri(e,l,!1),a&&(s.el=a);const o=!a&&e.subTree.el;t(e,s,h(a||e.subTree.el),a?null:f(e.subTree),v,i,r),o&&m(o),va(e,s.el),n&&0==--v.deps&&v.resolve()}))},unmount(e,t){v.isUnmounted=!0,v.activeBranch&&_(v.activeBranch,n,e,t),v.pendingBranch&&_(v.pendingBranch,n,e,t)}};return v}function ka(e){let t;if(fe(e)){const n=Ts&&e._c;n&&(e._d=!1,Ns()),e=e(),n&&(e._d=!0,t=Cs,As())}if(ue(e)){const t=function(e){let t;for(let n=0;n<e.length;n++){const a=e[n];if(!Os(a))return;if(a.type!==ks||"v-if"===a.children){if(t)return;t=a}}return t}(e);e=t}return e=Ks(e),t&&!e.dynamicChildren&&(e.dynamicChildren=t.filter((t=>t!==e))),e}function $a(e,t){t&&t.pendingBranch?ue(e)?t.effects.push(...e):t.effects.push(e):Yn(e)}function Sa(e,t){e.activeBranch=t;const{vnode:n,parentComponent:a}=e,l=n.el=t.el;a&&a.subTree===n&&(a.vnode.el=l,va(a,l))}function Ca(e,t){if(ei){let n=ei.provides;const a=ei.parent&&ei.parent.provides;a===n&&(n=ei.provides=Object.create(a)),n[e]=t}}function Na(e,t,n=!1){const a=ei||oa;if(a){const l=null==a.parent?a.vnode.appContext&&a.vnode.appContext.provides:a.parent.provides;if(l&&e in l)return l[e];if(arguments.length>1)return n&&fe(t)?t.call(a.proxy):t}}function Aa(e,t){return Ma(e,null,t)}function Ta(e,t){return Ma(e,null,{flush:"post"})}function Ea(e,t){return Ma(e,null,{flush:"sync"})}const Pa={};function Ia(e,t,n){return Ma(e,t,n)}function Ma(e,t,{immediate:n,deep:a,flush:l}=Q){const s=ei;let i,o,r=!1,c=!1;if(dn(e)?(i=()=>e.value,r=nn(e)):en(e)?(i=()=>e,a=!0):ue(e)?(c=!0,r=e.some((e=>en(e)||nn(e))),i=()=>e.map((e=>dn(e)?e.value:en(e)?Fa(e):fe(e)?En(e,s,2):void 0))):i=fe(e)?t?()=>En(e,s,2):()=>{if(!s||!s.isUnmounted)return o&&o(),Pn(e,s,3,[u])}:te,t&&a){const e=i;i=()=>Fa(e())}let u=e=>{o=f.onStop=()=>{En(e,s,4)}},d=c?[]:Pa;const p=()=>{if(f.active)if(t){const e=f.run();(a||r||(c?e.some(((e,t)=>Ie(e,d[t]))):Ie(e,d)))&&(o&&o(),Pn(t,s,3,[e,d===Pa?void 0:d,u]),d=e)}else f.run()};let _;p.allowRecurse=!!t,_="sync"===l?p:"post"===l?()=>us(p,s&&s.suspense):()=>function(e){Jn(e,Dn,Rn,jn)}(p);const f=new Ze(i,_);return t?n?p():d=f.run():"post"===l?us(f.run.bind(f),s&&s.suspense):f.run(),()=>{f.stop(),s&&s.scope&&oe(s.scope.effects,f)}}function Oa(e,t,n){const a=this.proxy,l=he(e)?e.includes(".")?Ua(a,e):()=>a[e]:e.bind(a,a);let s;fe(t)?s=t:(s=t.handler,n=t);const i=ei;ni(this);const o=Ma(l,s.bind(a),n);return i?ni(i):ai(),o}function Ua(e,t){const n=t.split(".");return()=>{let t=e;for(let e=0;e<n.length&&t;e++)t=t[n[e]];return t}}function Fa(e,t){if(!ge(e)||e.__v_skip)return e;if((t=t||new Set).has(e))return e;if(t.add(e),dn(e))Fa(e.value,t);else if(ue(e))for(let n=0;n<e.length;n++)Fa(e[n],t);else if(pe(e)||de(e))e.forEach((e=>{Fa(e,t)}));else if(we(e))for(const n in e)Fa(e[n],t);return e}function Ra(){const e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return rl((()=>{e.isMounted=!0})),dl((()=>{e.isUnmounting=!0})),e}const Da=[Function,Array],ja={name:"BaseTransition",props:{mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:Da,onEnter:Da,onAfterEnter:Da,onEnterCancelled:Da,onBeforeLeave:Da,onLeave:Da,onAfterLeave:Da,onLeaveCancelled:Da,onBeforeAppear:Da,onAppear:Da,onAfterAppear:Da,onAppearCancelled:Da},setup(e,{slots:t}){const n=ti(),a=Ra();let l;return()=>{const s=t.default&&Ha(t.default(),!0);if(!s||!s.length)return;let i=s[0];if(s.length>1)for(const e of s)if(e.type!==ks){i=e;break}const o=ln(e),{mode:r}=o;if(a.isLeaving)return Ba(i);const c=Va(i);if(!c)return Ba(i);const u=za(c,o,a,n);qa(c,u);const d=n.subTree,p=d&&Va(d);let _=!1;const{getTransitionKey:f}=c.type;if(f){const e=f();void 0===l?l=e:e!==l&&(l=e,_=!0)}if(p&&p.type!==ks&&(!Us(c,p)||_)){const e=za(p,o,a,n);if(qa(p,e),"out-in"===r)return a.isLeaving=!0,e.afterLeave=()=>{a.isLeaving=!1,n.update()},Ba(i);"in-out"===r&&c.type!==ks&&(e.delayLeave=(e,t,n)=>{La(a,p)[String(p.key)]=p,e._leaveCb=()=>{t(),e._leaveCb=void 0,delete u.delayedLeave},u.delayedLeave=n})}return i}}};function La(e,t){const{leavingVNodes:n}=e;let a=n.get(t.type);return a||(a=Object.create(null),n.set(t.type,a)),a}function za(e,t,n,a){const{appear:l,mode:s,persisted:i=!1,onBeforeEnter:o,onEnter:r,onAfterEnter:c,onEnterCancelled:u,onBeforeLeave:d,onLeave:p,onAfterLeave:_,onLeaveCancelled:f,onBeforeAppear:h,onAppear:m,onAfterAppear:g,onAppearCancelled:v}=t,b=String(e.key),y=La(n,e),w=(e,t)=>{e&&Pn(e,a,9,t)},x=(e,t)=>{const n=t[1];w(e,t),ue(e)?e.every((e=>e.length<=1))&&n():e.length<=1&&n()},k={mode:s,persisted:i,beforeEnter(t){let a=o;if(!n.isMounted){if(!l)return;a=h||o}t._leaveCb&&t._leaveCb(!0);const s=y[b];s&&Us(e,s)&&s.el._leaveCb&&s.el._leaveCb(),w(a,[t])},enter(e){let t=r,a=c,s=u;if(!n.isMounted){if(!l)return;t=m||r,a=g||c,s=v||u}let i=!1;const o=e._enterCb=t=>{i||(i=!0,w(t?s:a,[e]),k.delayedLeave&&k.delayedLeave(),e._enterCb=void 0)};t?x(t,[e,o]):o()},leave(t,a){const l=String(e.key);if(t._enterCb&&t._enterCb(!0),n.isUnmounting)return a();w(d,[t]);let s=!1;const i=t._leaveCb=n=>{s||(s=!0,a(),w(n?f:_,[t]),t._leaveCb=void 0,y[l]===e&&delete y[l])};y[l]=e,p?x(p,[t,i]):i()},clone:e=>za(e,t,n,a)};return k}function Ba(e){if(Ya(e))return(e=Vs(e)).children=null,e}function Va(e){return Ya(e)?e.children?e.children[0]:void 0:e}function qa(e,t){6&e.shapeFlag&&e.component?qa(e.component.subTree,t):128&e.shapeFlag?(e.ssContent.transition=t.clone(e.ssContent),e.ssFallback.transition=t.clone(e.ssFallback)):e.transition=t}function Ha(e,t=!1,n){let a=[],l=0;for(let s=0;s<e.length;s++){let i=e[s];const o=null==n?i.key:String(n)+String(null!=i.key?i.key:s);i.type===ws?(128&i.patchFlag&&l++,a=a.concat(Ha(i.children,t,o))):(t||i.type!==ks)&&a.push(null!=o?Vs(i,{key:o}):i)}if(l>1)for(let e=0;e<a.length;e++)a[e].patchFlag=-2;return a}function Ga(e){return fe(e)?{setup:e,name:e.name}:e}const Ka=e=>!!e.type.__asyncLoader;function Wa(e){fe(e)&&(e={loader:e});const{loader:t,loadingComponent:n,errorComponent:a,delay:l=200,timeout:s,suspensible:i=!0,onError:o}=e;let r,c=null,u=0;const d=()=>{let e;return c||(e=c=t().catch((e=>{if(e=e instanceof Error?e:new Error(String(e)),o)return new Promise(((t,n)=>{o(e,(()=>t((u++,c=null,d()))),(()=>n(e)),u+1)}));throw e})).then((t=>e!==c&&c?c:(t&&(t.__esModule||"Module"===t[Symbol.toStringTag])&&(t=t.default),r=t,t))))};return Ga({name:"AsyncComponentWrapper",__asyncLoader:d,get __asyncResolved(){return r},setup(){const e=ei;if(r)return()=>Ja(r,e);const t=t=>{c=null,In(t,e,13,!a)};if(i&&e.suspense)return d().then((t=>()=>Ja(t,e))).catch((e=>(t(e),()=>a?zs(a,{error:e}):null)));const o=pn(!1),u=pn(),p=pn(!!l);return l&&setTimeout((()=>{p.value=!1}),l),null!=s&&setTimeout((()=>{if(!o.value&&!u.value){const e=new Error(`Async component timed out after ${s}ms.`);t(e),u.value=e}}),s),d().then((()=>{o.value=!0,e.parent&&Ya(e.parent.vnode)&&Kn(e.parent.update)})).catch((e=>{t(e),u.value=e})),()=>o.value&&r?Ja(r,e):u.value&&a?zs(a,{error:u.value}):n&&!p.value?zs(n):void 0}})}function Ja(e,{vnode:{ref:t,props:n,children:a}}){const l=zs(e,n,a);return l.ref=t,l}const Ya=e=>e.type.__isKeepAlive,Xa={name:"KeepAlive",__isKeepAlive:!0,props:{include:[String,RegExp,Array],exclude:[String,RegExp,Array],max:[String,Number]},setup(e,{slots:t}){const n=ti(),a=n.ctx,l=new Map,s=new Set;let i=null;const o=n.suspense,{renderer:{p:r,m:c,um:u,o:{createElement:d}}}=a,p=d("div");function _(e){al(e),u(e,n,o,!0)}function f(e){l.forEach(((t,n)=>{const a=hi(t.type);!a||e&&e(a)||h(n)}))}function h(e){const t=l.get(e);i&&t.type===i.type?i&&al(i):_(t),l.delete(e),s.delete(e)}a.activate=(e,t,n,a,l)=>{const s=e.component;c(e,t,n,0,o),r(s.vnode,e,t,n,s,o,a,e.slotScopeIds,l),us((()=>{s.isDeactivated=!1,s.a&&Me(s.a);const t=e.props&&e.props.onVnodeMounted;t&&Xs(t,s.parent,e)}),o)},a.deactivate=e=>{const t=e.component;c(e,p,null,1,o),us((()=>{t.da&&Me(t.da);const n=e.props&&e.props.onVnodeUnmounted;n&&Xs(n,t.parent,e),t.isDeactivated=!0}),o)},Ia((()=>[e.include,e.exclude]),(([e,t])=>{e&&f((t=>Za(e,t))),t&&f((e=>!Za(t,e)))}),{flush:"post",deep:!0});let m=null;const g=()=>{null!=m&&l.set(m,ll(n.subTree))};return rl(g),ul(g),dl((()=>{l.forEach((e=>{const{subTree:t,suspense:a}=n,l=ll(t);if(e.type!==l.type)_(e);else{al(l);const e=l.component.da;e&&us(e,a)}}))})),()=>{if(m=null,!t.default)return null;const n=t.default(),a=n[0];if(n.length>1)return i=null,n;if(!Os(a)||!(4&a.shapeFlag||128&a.shapeFlag))return i=null,a;let o=ll(a);const r=o.type,c=hi(Ka(o)?o.type.__asyncResolved||{}:r),{include:u,exclude:d,max:p}=e;if(u&&(!c||!Za(u,c))||d&&c&&Za(d,c))return i=o,a;const _=null==o.key?r:o.key,f=l.get(_);return o.el&&(o=Vs(o),128&a.shapeFlag&&(a.ssContent=o)),m=_,f?(o.el=f.el,o.component=f.component,o.transition&&qa(o,o.transition),o.shapeFlag|=512,s.delete(_),s.add(_)):(s.add(_),p&&s.size>parseInt(p,10)&&h(s.values().next().value)),o.shapeFlag|=256,i=o,ba(a.type)?a:o}}};function Za(e,t){return ue(e)?e.some((e=>Za(e,t))):he(e)?e.split(",").includes(t):!!e.test&&e.test(t)}function Qa(e,t){tl(e,"a",t)}function el(e,t){tl(e,"da",t)}function tl(e,t,n=ei){const a=e.__wdc||(e.__wdc=()=>{let t=n;for(;t;){if(t.isDeactivated)return;t=t.parent}return e()});if(sl(t,a,n),n){let e=n.parent;for(;e&&e.parent;)Ya(e.parent.vnode)&&nl(a,t,n,e),e=e.parent}}function nl(e,t,n,a){const l=sl(t,e,a,!0);pl((()=>{oe(a[t],l)}),n)}function al(e){let t=e.shapeFlag;256&t&&(t-=256),512&t&&(t-=512),e.shapeFlag=t}function ll(e){return 128&e.shapeFlag?e.ssContent:e}function sl(e,t,n=ei,a=!1){if(n){const l=n[e]||(n[e]=[]),s=t.__weh||(t.__weh=(...a)=>{if(n.isUnmounted)return;lt(),ni(n);const l=Pn(t,n,e,a);return ai(),st(),l});return a?l.unshift(s):l.push(s),s}}const il=e=>(t,n=ei)=>(!oi||"sp"===e)&&sl(e,t,n),ol=il("bm"),rl=il("m"),cl=il("bu"),ul=il("u"),dl=il("bum"),pl=il("um"),_l=il("sp"),fl=il("rtg"),hl=il("rtc");function ml(e,t=ei){sl("ec",e,t)}function gl(e,t){const n=oa;if(null===n)return e;const a=_i(n)||n.proxy,l=e.dirs||(e.dirs=[]);for(let e=0;e<t.length;e++){let[n,s,i,o=Q]=t[e];fe(n)&&(n={mounted:n,updated:n}),n.deep&&Fa(s),l.push({dir:n,instance:a,value:s,oldValue:void 0,arg:i,modifiers:o})}return e}function vl(e,t,n,a){const l=e.dirs,s=t&&t.dirs;for(let i=0;i<l.length;i++){const o=l[i];s&&(o.oldValue=s[i].value);let r=o.dir[a];r&&(lt(),Pn(r,n,8,[e.el,o,e,t]),st())}}function bl(e,t){return kl("components",e,!0,t)||e}const yl=Symbol();function wl(e){return he(e)?kl("components",e,!1)||e:e||yl}function xl(e){return kl("directives",e)}function kl(e,t,n=!0,a=!1){const l=oa||ei;if(l){const n=l.type;if("components"===e){const e=hi(n,!1);if(e&&(e===t||e===Ne(t)||e===Ee(Ne(t))))return n}const s=$l(l[e]||n[e],t)||$l(l.appContext[e],t);return!s&&a?n:s}}function $l(e,t){return e&&(e[t]||e[Ne(t)]||e[Ee(Ne(t))])}function Sl(e,t,n,a){let l;const s=n&&n[a];if(ue(e)||he(e)){l=new Array(e.length);for(let n=0,a=e.length;n<a;n++)l[n]=t(e[n],n,void 0,s&&s[n])}else if("number"==typeof e){l=new Array(e);for(let n=0;n<e;n++)l[n]=t(n+1,n,void 0,s&&s[n])}else if(ge(e))if(e[Symbol.iterator])l=Array.from(e,((e,n)=>t(e,n,void 0,s&&s[n])));else{const n=Object.keys(e);l=new Array(n.length);for(let a=0,i=n.length;a<i;a++){const i=n[a];l[a]=t(e[i],i,a,s&&s[a])}}else l=[];return n&&(n[a]=l),l}function Cl(e,t){for(let n=0;n<t.length;n++){const a=t[n];if(ue(a))for(let t=0;t<a.length;t++)e[a[t].name]=a[t].fn;else a&&(e[a.name]=a.fn)}return e}function Nl(e,t,n={},a,l){if(oa.isCE||oa.parent&&Ka(oa.parent)&&oa.parent.isCE)return zs("slot","default"===t?null:{name:t},a&&a());let s=e[t];s&&s._c&&(s._d=!1),Ns();const i=s&&Al(s(n)),o=Ms(ws,{key:n.key||`_${t}`},i||(a?a():[]),i&&1===e._?64:-2);return!l&&o.scopeId&&(o.slotScopeIds=[o.scopeId+"-s"]),s&&s._c&&(s._d=!0),o}function Al(e){return e.some((e=>!Os(e)||e.type!==ks&&!(e.type===ws&&!Al(e.children))))?e:null}function Tl(e){const t={};for(const n in e)t[Pe(n)]=e[n];return t}const El=e=>e?li(e)?_i(e)||e.proxy:El(e.parent):null,Pl=ie(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>e.props,$attrs:e=>e.attrs,$slots:e=>e.slots,$refs:e=>e.refs,$parent:e=>El(e.parent),$root:e=>El(e.root),$emit:e=>e.emit,$options:e=>Rl(e),$forceUpdate:e=>e.f||(e.f=()=>Kn(e.update)),$nextTick:e=>e.n||(e.n=Gn.bind(e.proxy)),$watch:e=>Oa.bind(e)}),Il={get({_:e},t){const{ctx:n,setupState:a,data:l,props:s,accessCache:i,type:o,appContext:r}=e;let c;if("$"!==t[0]){const o=i[t];if(void 0!==o)switch(o){case 1:return a[t];case 2:return l[t];case 4:return n[t];case 3:return s[t]}else{if(a!==Q&&ce(a,t))return i[t]=1,a[t];if(l!==Q&&ce(l,t))return i[t]=2,l[t];if((c=e.propsOptions[0])&&ce(c,t))return i[t]=3,s[t];if(n!==Q&&ce(n,t))return i[t]=4,n[t];Ol&&(i[t]=0)}}const u=Pl[t];let d,p;return u?("$attrs"===t&&it(e,0,t),u(e)):(d=o.__cssModules)&&(d=d[t])?d:n!==Q&&ce(n,t)?(i[t]=4,n[t]):(p=r.config.globalProperties,ce(p,t)?p[t]:void 0)},set({_:e},t,n){const{data:a,setupState:l,ctx:s}=e;return l!==Q&&ce(l,t)?(l[t]=n,!0):a!==Q&&ce(a,t)?(a[t]=n,!0):!(ce(e.props,t)||"$"===t[0]&&t.slice(1)in e||(s[t]=n,0))},has({_:{data:e,setupState:t,accessCache:n,ctx:a,appContext:l,propsOptions:s}},i){let o;return!!n[i]||e!==Q&&ce(e,i)||t!==Q&&ce(t,i)||(o=s[0])&&ce(o,i)||ce(a,i)||ce(Pl,i)||ce(l.config.globalProperties,i)},defineProperty(e,t,n){return null!=n.get?e._.accessCache[t]=0:ce(n,"value")&&this.set(e,t,n.value,null),Reflect.defineProperty(e,t,n)}},Ml=ie({},Il,{get(e,t){if(t!==Symbol.unscopables)return Il.get(e,t,e)},has:(e,t)=>"_"!==t[0]&&!R(t)});let Ol=!0;function Ul(e,t,n){Pn(ue(e)?e.map((e=>e.bind(t.proxy))):e.bind(t.proxy),t,n)}function Fl(e,t,n,a){const l=a.includes(".")?Ua(n,a):()=>n[a];if(he(e)){const n=t[e];fe(n)&&Ia(l,n)}else if(fe(e))Ia(l,e.bind(n));else if(ge(e))if(ue(e))e.forEach((e=>Fl(e,t,n,a)));else{const a=fe(e.handler)?e.handler.bind(n):t[e.handler];fe(a)&&Ia(l,a,e)}}function Rl(e){const t=e.type,{mixins:n,extends:a}=t,{mixins:l,optionsCache:s,config:{optionMergeStrategies:i}}=e.appContext,o=s.get(t);let r;return o?r=o:l.length||n||a?(r={},l.length&&l.forEach((e=>Dl(r,e,i,!0))),Dl(r,t,i)):r=t,s.set(t,r),r}function Dl(e,t,n,a=!1){const{mixins:l,extends:s}=t;s&&Dl(e,s,n,!0),l&&l.forEach((t=>Dl(e,t,n,!0)));for(const l in t)if(a&&"expose"===l);else{const a=jl[l]||n&&n[l];e[l]=a?a(e[l],t[l]):t[l]}return e}const jl={data:Ll,props:Vl,emits:Vl,methods:Vl,computed:Vl,beforeCreate:Bl,created:Bl,beforeMount:Bl,mounted:Bl,beforeUpdate:Bl,updated:Bl,beforeDestroy:Bl,beforeUnmount:Bl,destroyed:Bl,unmounted:Bl,activated:Bl,deactivated:Bl,errorCaptured:Bl,serverPrefetch:Bl,components:Vl,directives:Vl,watch:function(e,t){if(!e)return t;if(!t)return e;const n=ie(Object.create(null),e);for(const a in t)n[a]=Bl(e[a],t[a]);return n},provide:Ll,inject:function(e,t){return Vl(zl(e),zl(t))}};function Ll(e,t){return t?e?function(){return ie(fe(e)?e.call(this,this):e,fe(t)?t.call(this,this):t)}:t:e}function zl(e){if(ue(e)){const t={};for(let n=0;n<e.length;n++)t[e[n]]=e[n];return t}return e}function Bl(e,t){return e?[...new Set([].concat(e,t))]:t}function Vl(e,t){return e?ie(ie(Object.create(null),e),t):t}function ql(e,t,n,a){const[l,s]=e.propsOptions;let i,o=!1;if(t)for(let r in t){if(ke(r))continue;const c=t[r];let u;l&&ce(l,u=Ne(r))?s&&s.includes(u)?(i||(i={}))[u]=c:n[u]=c:ia(e.emitsOptions,r)||r in a&&c===a[r]||(a[r]=c,o=!0)}if(s){const t=ln(n),a=i||Q;for(let i=0;i<s.length;i++){const o=s[i];n[o]=Hl(l,t,o,a[o],e,!ce(a,o))}}return o}function Hl(e,t,n,a,l,s){const i=e[n];if(null!=i){const e=ce(i,"default");if(e&&void 0===a){const e=i.default;if(i.type!==Function&&fe(e)){const{propsDefaults:s}=l;n in s?a=s[n]:(ni(l),a=s[n]=e.call(null,t),ai())}else a=e}i[0]&&(s&&!e?a=!1:!i[1]||""!==a&&a!==Te(n)||(a=!0))}return a}function Gl(e,t,n=!1){const a=t.propsCache,l=a.get(e);if(l)return l;const s=e.props,i={},o=[];let r=!1;if(!fe(e)){const a=e=>{r=!0;const[n,a]=Gl(e,t,!0);ie(i,n),a&&o.push(...a)};!n&&t.mixins.length&&t.mixins.forEach(a),e.extends&&a(e.extends),e.mixins&&e.mixins.forEach(a)}if(!s&&!r)return a.set(e,ee),ee;if(ue(s))for(let e=0;e<s.length;e++){const t=Ne(s[e]);Kl(t)&&(i[t]=Q)}else if(s)for(const e in s){const t=Ne(e);if(Kl(t)){const n=s[e],a=i[t]=ue(n)||fe(n)?{type:n}:n;if(a){const e=Yl(Boolean,a.type),n=Yl(String,a.type);a[0]=e>-1,a[1]=n<0||e<n,(e>-1||ce(a,"default"))&&o.push(t)}}}const c=[i,o];return a.set(e,c),c}function Kl(e){return"$"!==e[0]}function Wl(e){const t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:null===e?"null":""}function Jl(e,t){return Wl(e)===Wl(t)}function Yl(e,t){return ue(t)?t.findIndex((t=>Jl(t,e))):fe(t)&&Jl(t,e)?0:-1}const Xl=e=>"_"===e[0]||"$stable"===e,Zl=e=>ue(e)?e.map(Ks):[Ks(e)],Ql=(e,t,n)=>{if(t._n)return t;const a=_a(((...e)=>Zl(t(...e))),n);return a._c=!1,a},es=(e,t,n)=>{const a=e._ctx;for(const n in e){if(Xl(n))continue;const l=e[n];if(fe(l))t[n]=Ql(0,l,a);else if(null!=l){const e=Zl(l);t[n]=()=>e}}},ts=(e,t)=>{const n=Zl(t);e.slots.default=()=>n};function ns(){return{app:null,config:{isNativeTag:ne,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let as=0;function ls(e,t){return function(n,a=null){fe(n)||(n=Object.assign({},n)),null==a||ge(a)||(a=null);const l=ns(),s=new Set;let i=!1;const o=l.app={_uid:as++,_component:n,_props:a,_container:null,_context:l,_instance:null,version:Oi,get config(){return l.config},set config(e){},use:(e,...t)=>(s.has(e)||(e&&fe(e.install)?(s.add(e),e.install(o,...t)):fe(e)&&(s.add(e),e(o,...t))),o),mixin:e=>(l.mixins.includes(e)||l.mixins.push(e),o),component:(e,t)=>t?(l.components[e]=t,o):l.components[e],directive:(e,t)=>t?(l.directives[e]=t,o):l.directives[e],mount(s,r,c){if(!i){const u=zs(n,a);return u.appContext=l,r&&t?t(u,s):e(u,s,c),i=!0,o._container=s,s.__vue_app__=o,_i(u.component)||u.component.proxy}},unmount(){i&&(e(null,o._container),delete o._container.__vue_app__)},provide:(e,t)=>(l.provides[e]=t,o)};return o}}function ss(e,t,n,a,l=!1){if(ue(e))return void e.forEach(((e,s)=>ss(e,t&&(ue(t)?t[s]:t),n,a,l)));if(Ka(a)&&!l)return;const s=4&a.shapeFlag?_i(a.component)||a.component.proxy:a.el,i=l?null:s,{i:o,r:r}=e,c=t&&t.r,u=o.refs===Q?o.refs={}:o.refs,d=o.setupState;if(null!=c&&c!==r&&(he(c)?(u[c]=null,ce(d,c)&&(d[c]=null)):dn(c)&&(c.value=null)),fe(r))En(r,o,12,[i,u]);else{const t=he(r),a=dn(r);if(t||a){const o=()=>{if(e.f){const n=t?u[r]:r.value;l?ue(n)&&oe(n,s):ue(n)?n.includes(s)||n.push(s):t?(u[r]=[s],ce(d,r)&&(d[r]=u[r])):(r.value=[s],e.k&&(u[e.k]=r.value))}else t?(u[r]=i,ce(d,r)&&(d[r]=i)):a&&(r.value=i,e.k&&(u[e.k]=i))};i?(o.id=-1,us(o,n)):o()}}}let is=!1;const os=e=>/svg/.test(e.namespaceURI)&&"foreignObject"!==e.tagName,rs=e=>8===e.nodeType;function cs(e){const{mt:t,p:n,o:{patchProp:a,createText:l,nextSibling:s,parentNode:i,remove:o,insert:r,createComment:c}}=e,u=(n,a,o,c,m,g=!1)=>{const v=rs(n)&&"["===n.data,b=()=>f(n,a,o,c,m,v),{type:y,ref:w,shapeFlag:x,patchFlag:k}=a,$=n.nodeType;a.el=n,-2===k&&(g=!1,a.dynamicChildren=null);let S=null;switch(y){case xs:3!==$?""===a.children?(r(a.el=l(""),i(n),n),S=n):S=b():(n.data!==a.children&&(is=!0,n.data=a.children),S=s(n));break;case ks:S=8!==$||v?b():s(n);break;case $s:if(1===$||3===$){S=n;const e=!a.children.length;for(let t=0;t<a.staticCount;t++)e&&(a.children+=1===S.nodeType?S.outerHTML:S.data),t===a.staticCount-1&&(a.anchor=S),S=s(S);return S}S=b();break;case ws:S=v?_(n,a,o,c,m,g):b();break;default:if(1&x)S=1!==$||a.type.toLowerCase()!==n.tagName.toLowerCase()?b():d(n,a,o,c,m,g);else if(6&x){a.slotScopeIds=m;const e=i(n);if(t(a,e,null,o,c,os(e),g),S=v?h(n):s(n),S&&rs(S)&&"teleport end"===S.data&&(S=s(S)),Ka(a)){let t;v?(t=zs(ws),t.anchor=S?S.previousSibling:e.lastChild):t=3===n.nodeType?qs(""):zs("div"),t.el=n,a.component.subTree=t}}else 64&x?S=8!==$?b():a.type.hydrate(n,a,o,c,m,g,e,p):128&x&&(S=a.type.hydrate(n,a,o,c,os(i(n)),m,g,e,u))}return null!=w&&ss(w,null,c,a),S},d=(e,t,n,l,s,i)=>{i=i||!!t.dynamicChildren;const{type:r,props:c,patchFlag:u,shapeFlag:d,dirs:_}=t,f="input"===r&&_||"option"===r;if(f||-1!==u){if(_&&vl(t,null,n,"created"),c)if(f||!i||48&u)for(const t in c)(f&&t.endsWith("value")||le(t)&&!ke(t))&&a(e,t,null,c[t],!1,void 0,n);else c.onClick&&a(e,"onClick",null,c.onClick,!1,void 0,n);let r;if((r=c&&c.onVnodeBeforeMount)&&Xs(r,n,t),_&&vl(t,null,n,"beforeMount"),((r=c&&c.onVnodeMounted)||_)&&$a((()=>{r&&Xs(r,n,t),_&&vl(t,null,n,"mounted")}),l),16&d&&(!c||!c.innerHTML&&!c.textContent)){let a=p(e.firstChild,t,e,n,l,s,i);for(;a;){is=!0;const e=a;a=a.nextSibling,o(e)}}else 8&d&&e.textContent!==t.children&&(is=!0,e.textContent=t.children)}return e.nextSibling},p=(e,t,a,l,s,i,o)=>{o=o||!!t.dynamicChildren;const r=t.children,c=r.length;for(let t=0;t<c;t++){const c=o?r[t]:r[t]=Ks(r[t]);if(e)e=u(e,c,l,s,i,o);else{if(c.type===xs&&!c.children)continue;is=!0,n(null,c,a,null,l,s,os(a),i)}}return e},_=(e,t,n,a,l,o)=>{const{slotScopeIds:u}=t;u&&(l=l?l.concat(u):u);const d=i(e),_=p(s(e),t,d,n,a,l,o);return _&&rs(_)&&"]"===_.data?s(t.anchor=_):(is=!0,r(t.anchor=c("]"),d,_),_)},f=(e,t,a,l,r,c)=>{if(is=!0,t.el=null,c){const t=h(e);for(;;){const n=s(e);if(!n||n===t)break;o(n)}}const u=s(e),d=i(e);return o(e),n(null,t,d,u,a,l,os(d),r),u},h=e=>{let t=0;for(;e;)if((e=s(e))&&rs(e)&&("["===e.data&&t++,"]"===e.data)){if(0===t)return s(e);t--}return e};return[(e,t)=>{if(!t.hasChildNodes())return n(null,e,t),Zn(),void(t._vnode=e);is=!1,u(t.firstChild,e,null,null,null),Zn(),t._vnode=e,is&&console.error("Hydration completed but contains mismatches.")},u]}const us=$a;function ds(e){return _s(e)}function ps(e){return _s(e,cs)}function _s(e,t){(Fe||(Fe="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{})).__VUE__=!0;const{insert:n,remove:a,patchProp:l,createElement:s,createText:i,createComment:o,setText:r,setElementText:c,parentNode:u,nextSibling:d,setScopeId:p=te,cloneNode:_,insertStaticContent:f}=e,h=(e,t,n,a=null,l=null,s=null,i=!1,o=null,r=!!t.dynamicChildren)=>{if(e===t)return;e&&!Us(e,t)&&(a=z(e),F(e,l,s,!0),e=null),-2===t.patchFlag&&(r=!1,t.dynamicChildren=null);const{type:c,ref:u,shapeFlag:d}=t;switch(c){case xs:m(e,t,n,a);break;case ks:g(e,t,n,a);break;case $s:null==e&&v(t,n,a,i);break;case ws:C(e,t,n,a,l,s,i,o,r);break;default:1&d?b(e,t,n,a,l,s,i,o,r):6&d?N(e,t,n,a,l,s,i,o,r):(64&d||128&d)&&c.process(e,t,n,a,l,s,i,o,r,V)}null!=u&&l&&ss(u,e&&e.ref,s,t||e,!t)},m=(e,t,a,l)=>{if(null==e)n(t.el=i(t.children),a,l);else{const n=t.el=e.el;t.children!==e.children&&r(n,t.children)}},g=(e,t,a,l)=>{null==e?n(t.el=o(t.children||""),a,l):t.el=e.el},v=(e,t,n,a)=>{[e.el,e.anchor]=f(e.children,t,n,a,e.el,e.anchor)},b=(e,t,n,a,l,s,i,o,r)=>{i=i||"svg"===t.type,null==e?y(t,n,a,l,s,i,o,r):k(e,t,l,s,i,o,r)},y=(e,t,a,i,o,r,u,d)=>{let p,f;const{type:h,props:m,shapeFlag:g,transition:v,patchFlag:b,dirs:y}=e;if(e.el&&void 0!==_&&-1===b)p=e.el=_(e.el);else{if(p=e.el=s(e.type,r,m&&m.is,m),8&g?c(p,e.children):16&g&&x(e.children,p,null,i,o,r&&"foreignObject"!==h,u,d),y&&vl(e,null,i,"created"),m){for(const t in m)"value"===t||ke(t)||l(p,t,null,m[t],r,e.children,i,o,L);"value"in m&&l(p,"value",null,m.value),(f=m.onVnodeBeforeMount)&&Xs(f,i,e)}w(p,e,e.scopeId,u,i)}y&&vl(e,null,i,"beforeMount");const k=(!o||o&&!o.pendingBranch)&&v&&!v.persisted;k&&v.beforeEnter(p),n(p,t,a),((f=m&&m.onVnodeMounted)||k||y)&&us((()=>{f&&Xs(f,i,e),k&&v.enter(p),y&&vl(e,null,i,"mounted")}),o)},w=(e,t,n,a,l)=>{if(n&&p(e,n),a)for(let t=0;t<a.length;t++)p(e,a[t]);if(l&&t===l.subTree){const t=l.vnode;w(e,t,t.scopeId,t.slotScopeIds,l.parent)}},x=(e,t,n,a,l,s,i,o,r=0)=>{for(let c=r;c<e.length;c++){const r=e[c]=o?Ws(e[c]):Ks(e[c]);h(null,r,t,n,a,l,s,i,o)}},k=(e,t,n,a,s,i,o)=>{const r=t.el=e.el;let{patchFlag:u,dynamicChildren:d,dirs:p}=t;u|=16&e.patchFlag;const _=e.props||Q,f=t.props||Q;let h;n&&fs(n,!1),(h=f.onVnodeBeforeUpdate)&&Xs(h,n,t,e),p&&vl(t,e,n,"beforeUpdate"),n&&fs(n,!0);const m=s&&"foreignObject"!==t.type;if(d?$(e.dynamicChildren,d,r,n,a,m,i):o||I(e,t,r,null,n,a,m,i,!1),u>0){if(16&u)S(r,t,_,f,n,a,s);else if(2&u&&_.class!==f.class&&l(r,"class",null,f.class,s),4&u&&l(r,"style",_.style,f.style,s),8&u){const i=t.dynamicProps;for(let t=0;t<i.length;t++){const o=i[t],c=_[o],u=f[o];u===c&&"value"!==o||l(r,o,c,u,s,e.children,n,a,L)}}1&u&&e.children!==t.children&&c(r,t.children)}else o||null!=d||S(r,t,_,f,n,a,s);((h=f.onVnodeUpdated)||p)&&us((()=>{h&&Xs(h,n,t,e),p&&vl(t,e,n,"updated")}),a)},$=(e,t,n,a,l,s,i)=>{for(let o=0;o<t.length;o++){const r=e[o],c=t[o],d=r.el&&(r.type===ws||!Us(r,c)||70&r.shapeFlag)?u(r.el):n;h(r,c,d,null,a,l,s,i,!0)}},S=(e,t,n,a,s,i,o)=>{if(n!==a){for(const r in a){if(ke(r))continue;const c=a[r],u=n[r];c!==u&&"value"!==r&&l(e,r,u,c,o,t.children,s,i,L)}if(n!==Q)for(const r in n)ke(r)||r in a||l(e,r,n[r],null,o,t.children,s,i,L);"value"in a&&l(e,"value",n.value,a.value)}},C=(e,t,a,l,s,o,r,c,u)=>{const d=t.el=e?e.el:i(""),p=t.anchor=e?e.anchor:i("");let{patchFlag:_,dynamicChildren:f,slotScopeIds:h}=t;h&&(c=c?c.concat(h):h),null==e?(n(d,a,l),n(p,a,l),x(t.children,a,p,s,o,r,c,u)):_>0&&64&_&&f&&e.dynamicChildren?($(e.dynamicChildren,f,a,s,o,r,c),(null!=t.key||s&&t===s.subTree)&&hs(e,t,!0)):I(e,t,a,p,s,o,r,c,u)},N=(e,t,n,a,l,s,i,o,r)=>{t.slotScopeIds=o,null==e?512&t.shapeFlag?l.ctx.activate(t,n,a,i,r):A(t,n,a,l,s,i,r):T(e,t,r)},A=(e,t,n,a,l,s,i)=>{const o=e.component=function(e,t,n){const a=e.type,l=(t?t.appContext:e.appContext)||Zs,s={uid:Qs++,vnode:e,type:a,parent:t,appContext:l,root:null,next:null,subTree:null,effect:null,update:null,scope:new De(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:t?t.provides:Object.create(l.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:Gl(a,l),emitsOptions:sa(a,l),emit:null,emitted:null,propsDefaults:Q,inheritAttrs:a.inheritAttrs,ctx:Q,data:Q,props:Q,attrs:Q,slots:Q,refs:Q,setupState:Q,setupContext:null,suspense:n,suspenseId:n?n.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return s.ctx={_:s},s.root=t?t.root:s,s.emit=la.bind(null,s),e.ce&&e.ce(s),s}(e,a,l);if(Ya(e)&&(o.ctx.renderer=V),function(e,t=!1){oi=t;const{props:n,children:a}=e.vnode,l=li(e);(function(e,t,n,a=!1){const l={},s={};Oe(s,Rs,1),e.propsDefaults=Object.create(null),ql(e,t,l,s);for(const t in e.propsOptions[0])t in l||(l[t]=void 0);e.props=n?a?l:Yt(l):e.type.props?l:s,e.attrs=s})(e,n,l,t),((e,t)=>{if(32&e.vnode.shapeFlag){const n=t._;n?(e.slots=ln(t),Oe(t,"_",n)):es(t,e.slots={})}else e.slots={},t&&ts(e,t);Oe(e.slots,Rs,1)})(e,a),l&&function(e,t){const n=e.type;e.accessCache=Object.create(null),e.proxy=sn(new Proxy(e.ctx,Il));const{setup:a}=n;if(a){const n=e.setupContext=a.length>1?pi(e):null;ni(e),lt();const l=En(a,e,0,[e.props,n]);if(st(),ai(),ve(l)){if(l.then(ai,ai),t)return l.then((n=>{ri(e,n,t)})).catch((t=>{In(t,e,0)}));e.asyncDep=l}else ri(e,l,t)}else di(e,t)}(e,t),oi=!1}(o),o.asyncDep){if(l&&l.registerDep(o,E),!e.el){const e=o.subTree=zs(ks);g(null,e,t,n)}}else E(o,e,t,n,l,s,i)},T=(e,t,n)=>{const a=t.component=e.component;if(function(e,t,n){const{props:a,children:l,component:s}=e,{props:i,children:o,patchFlag:r}=t,c=s.emitsOptions;if(t.dirs||t.transition)return!0;if(!(n&&r>=0))return!(!l&&!o||o&&o.$stable)||a!==i&&(a?!i||ga(a,i,c):!!i);if(1024&r)return!0;if(16&r)return a?ga(a,i,c):!!i;if(8&r){const e=t.dynamicProps;for(let t=0;t<e.length;t++){const n=e[t];if(i[n]!==a[n]&&!ia(c,n))return!0}}return!1}(e,t,n)){if(a.asyncDep&&!a.asyncResolved)return void P(a,t,n);a.next=t,function(e){const t=Un.indexOf(e);t>Fn&&Un.splice(t,1)}(a.update),a.update()}else t.el=e.el,a.vnode=t},E=(e,t,n,a,l,s,i)=>{const o=e.effect=new Ze((()=>{if(e.isMounted){let t,{next:n,bu:a,u:o,parent:r,vnode:c}=e,d=n;fs(e,!1),n?(n.el=c.el,P(e,n,i)):n=c,a&&Me(a),(t=n.props&&n.props.onVnodeBeforeUpdate)&&Xs(t,r,n,c),fs(e,!0);const p=fa(e),_=e.subTree;e.subTree=p,h(_,p,u(_.el),z(_),e,l,s),n.el=p.el,null===d&&va(e,p.el),o&&us(o,l),(t=n.props&&n.props.onVnodeUpdated)&&us((()=>Xs(t,r,n,c)),l)}else{let i;const{el:o,props:r}=t,{bm:c,m:u,parent:d}=e,p=Ka(t);if(fs(e,!1),c&&Me(c),!p&&(i=r&&r.onVnodeBeforeMount)&&Xs(i,d,t),fs(e,!0),o&&H){const n=()=>{e.subTree=fa(e),H(o,e.subTree,e,l,null)};p?t.type.__asyncLoader().then((()=>!e.isUnmounted&&n())):n()}else{const i=e.subTree=fa(e);h(null,i,n,a,e,l,s),t.el=i.el}if(u&&us(u,l),!p&&(i=r&&r.onVnodeMounted)){const e=t;us((()=>Xs(i,d,e)),l)}(256&t.shapeFlag||d&&Ka(d.vnode)&&256&d.vnode.shapeFlag)&&e.a&&us(e.a,l),e.isMounted=!0,t=n=a=null}}),(()=>Kn(r)),e.scope),r=e.update=()=>o.run();r.id=e.uid,fs(e,!0),r()},P=(e,t,n)=>{t.component=e;const a=e.vnode.props;e.vnode=t,e.next=null,function(e,t,n,a){const{props:l,attrs:s,vnode:{patchFlag:i}}=e,o=ln(l),[r]=e.propsOptions;let c=!1;if(!(a||i>0)||16&i){let a;ql(e,t,l,s)&&(c=!0);for(const s in o)t&&(ce(t,s)||(a=Te(s))!==s&&ce(t,a))||(r?!n||void 0===n[s]&&void 0===n[a]||(l[s]=Hl(r,o,s,void 0,e,!0)):delete l[s]);if(s!==o)for(const e in s)t&&ce(t,e)||(delete s[e],c=!0)}else if(8&i){const n=e.vnode.dynamicProps;for(let a=0;a<n.length;a++){let i=n[a];if(ia(e.emitsOptions,i))continue;const u=t[i];if(r)if(ce(s,i))u!==s[i]&&(s[i]=u,c=!0);else{const t=Ne(i);l[t]=Hl(r,o,t,u,e,!1)}else u!==s[i]&&(s[i]=u,c=!0)}}c&&rt(e,"set","$attrs")}(e,t.props,a,n),((e,t,n)=>{const{vnode:a,slots:l}=e;let s=!0,i=Q;if(32&a.shapeFlag){const e=t._;e?n&&1===e?s=!1:(ie(l,t),n||1!==e||delete l._):(s=!t.$stable,es(t,l)),i=t}else t&&(ts(e,t),i={default:1});if(s)for(const e in l)Xl(e)||e in i||delete l[e]})(e,t.children,n),lt(),Xn(void 0,e.update),st()},I=(e,t,n,a,l,s,i,o,r=!1)=>{const u=e&&e.children,d=e?e.shapeFlag:0,p=t.children,{patchFlag:_,shapeFlag:f}=t;if(_>0){if(128&_)return void O(u,p,n,a,l,s,i,o,r);if(256&_)return void M(u,p,n,a,l,s,i,o,r)}8&f?(16&d&&L(u,l,s),p!==u&&c(n,p)):16&d?16&f?O(u,p,n,a,l,s,i,o,r):L(u,l,s,!0):(8&d&&c(n,""),16&f&&x(p,n,a,l,s,i,o,r))},M=(e,t,n,a,l,s,i,o,r)=>{const c=(e=e||ee).length,u=(t=t||ee).length,d=Math.min(c,u);let p;for(p=0;p<d;p++){const a=t[p]=r?Ws(t[p]):Ks(t[p]);h(e[p],a,n,null,l,s,i,o,r)}c>u?L(e,l,s,!0,!1,d):x(t,n,a,l,s,i,o,r,d)},O=(e,t,n,a,l,s,i,o,r)=>{let c=0;const u=t.length;let d=e.length-1,p=u-1;for(;c<=d&&c<=p;){const a=e[c],u=t[c]=r?Ws(t[c]):Ks(t[c]);if(!Us(a,u))break;h(a,u,n,null,l,s,i,o,r),c++}for(;c<=d&&c<=p;){const a=e[d],c=t[p]=r?Ws(t[p]):Ks(t[p]);if(!Us(a,c))break;h(a,c,n,null,l,s,i,o,r),d--,p--}if(c>d){if(c<=p){const e=p+1,d=e<u?t[e].el:a;for(;c<=p;)h(null,t[c]=r?Ws(t[c]):Ks(t[c]),n,d,l,s,i,o,r),c++}}else if(c>p)for(;c<=d;)F(e[c],l,s,!0),c++;else{const _=c,f=c,m=new Map;for(c=f;c<=p;c++){const e=t[c]=r?Ws(t[c]):Ks(t[c]);null!=e.key&&m.set(e.key,c)}let g,v=0;const b=p-f+1;let y=!1,w=0;const x=new Array(b);for(c=0;c<b;c++)x[c]=0;for(c=_;c<=d;c++){const a=e[c];if(v>=b){F(a,l,s,!0);continue}let u;if(null!=a.key)u=m.get(a.key);else for(g=f;g<=p;g++)if(0===x[g-f]&&Us(a,t[g])){u=g;break}void 0===u?F(a,l,s,!0):(x[u-f]=c+1,u>=w?w=u:y=!0,h(a,t[u],n,null,l,s,i,o,r),v++)}const k=y?function(e){const t=e.slice(),n=[0];let a,l,s,i,o;const r=e.length;for(a=0;a<r;a++){const r=e[a];if(0!==r){if(l=n[n.length-1],e[l]<r){t[a]=l,n.push(a);continue}for(s=0,i=n.length-1;s<i;)o=s+i>>1,e[n[o]]<r?s=o+1:i=o;r<e[n[s]]&&(s>0&&(t[a]=n[s-1]),n[s]=a)}}for(s=n.length,i=n[s-1];s-- >0;)n[s]=i,i=t[i];return n}(x):ee;for(g=k.length-1,c=b-1;c>=0;c--){const e=f+c,d=t[e],p=e+1<u?t[e+1].el:a;0===x[c]?h(null,d,n,p,l,s,i,o,r):y&&(g<0||c!==k[g]?U(d,n,p,2):g--)}}},U=(e,t,a,l,s=null)=>{const{el:i,type:o,transition:r,children:c,shapeFlag:u}=e;if(6&u)U(e.component.subTree,t,a,l);else if(128&u)e.suspense.move(t,a,l);else if(64&u)o.move(e,t,a,V);else if(o!==ws)if(o!==$s)if(2!==l&&1&u&&r)if(0===l)r.beforeEnter(i),n(i,t,a),us((()=>r.enter(i)),s);else{const{leave:e,delayLeave:l,afterLeave:s}=r,o=()=>n(i,t,a),c=()=>{e(i,(()=>{o(),s&&s()}))};l?l(i,o,c):c()}else n(i,t,a);else(({el:e,anchor:t},a,l)=>{let s;for(;e&&e!==t;)s=d(e),n(e,a,l),e=s;n(t,a,l)})(e,t,a);else{n(i,t,a);for(let e=0;e<c.length;e++)U(c[e],t,a,l);n(e.anchor,t,a)}},F=(e,t,n,a=!1,l=!1)=>{const{type:s,props:i,ref:o,children:r,dynamicChildren:c,shapeFlag:u,patchFlag:d,dirs:p}=e;if(null!=o&&ss(o,null,n,e,!0),256&u)return void t.ctx.deactivate(e);const _=1&u&&p,f=!Ka(e);let h;if(f&&(h=i&&i.onVnodeBeforeUnmount)&&Xs(h,t,e),6&u)j(e.component,n,a);else{if(128&u)return void e.suspense.unmount(n,a);_&&vl(e,null,t,"beforeUnmount"),64&u?e.type.remove(e,t,n,l,V,a):c&&(s!==ws||d>0&&64&d)?L(c,t,n,!1,!0):(s===ws&&384&d||!l&&16&u)&&L(r,t,n),a&&R(e)}(f&&(h=i&&i.onVnodeUnmounted)||_)&&us((()=>{h&&Xs(h,t,e),_&&vl(e,null,t,"unmounted")}),n)},R=e=>{const{type:t,el:n,anchor:l,transition:s}=e;if(t===ws)return void D(n,l);if(t===$s)return void(({el:e,anchor:t})=>{let n;for(;e&&e!==t;)n=d(e),a(e),e=n;a(t)})(e);const i=()=>{a(n),s&&!s.persisted&&s.afterLeave&&s.afterLeave()};if(1&e.shapeFlag&&s&&!s.persisted){const{leave:t,delayLeave:a}=s,l=()=>t(n,i);a?a(e.el,i,l):l()}else i()},D=(e,t)=>{let n;for(;e!==t;)n=d(e),a(e),e=n;a(t)},j=(e,t,n)=>{const{bum:a,scope:l,update:s,subTree:i,um:o}=e;a&&Me(a),l.stop(),s&&(s.active=!1,F(i,e,t,n)),o&&us(o,t),us((()=>{e.isUnmounted=!0}),t),t&&t.pendingBranch&&!t.isUnmounted&&e.asyncDep&&!e.asyncResolved&&e.suspenseId===t.pendingId&&(t.deps--,0===t.deps&&t.resolve())},L=(e,t,n,a=!1,l=!1,s=0)=>{for(let i=s;i<e.length;i++)F(e[i],t,n,a,l)},z=e=>6&e.shapeFlag?z(e.component.subTree):128&e.shapeFlag?e.suspense.next():d(e.anchor||e.el),B=(e,t,n)=>{null==e?t._vnode&&F(t._vnode,null,null,!0):h(t._vnode||null,e,t,null,null,null,n),Zn(),t._vnode=e},V={p:h,um:F,m:U,r:R,mt:A,mc:x,pc:I,pbc:$,n:z,o:e};let q,H;return t&&([q,H]=t(V)),{render:B,hydrate:q,createApp:ls(B,q)}}function fs({effect:e,update:t},n){e.allowRecurse=t.allowRecurse=n}function hs(e,t,n=!1){const a=e.children,l=t.children;if(ue(a)&&ue(l))for(let e=0;e<a.length;e++){const t=a[e];let s=l[e];1&s.shapeFlag&&!s.dynamicChildren&&((s.patchFlag<=0||32===s.patchFlag)&&(s=l[e]=Ws(l[e]),s.el=t.el),n||hs(t,s))}}const ms=e=>e&&(e.disabled||""===e.disabled),gs=e=>"undefined"!=typeof SVGElement&&e instanceof SVGElement,vs=(e,t)=>{const n=e&&e.to;return he(n)?t?t(n):null:n};function bs(e,t,n,{o:{insert:a},m:l},s=2){0===s&&a(e.targetAnchor,t,n);const{el:i,anchor:o,shapeFlag:r,children:c,props:u}=e,d=2===s;if(d&&a(i,t,n),(!d||ms(u))&&16&r)for(let e=0;e<c.length;e++)l(c[e],t,n,2);d&&a(o,t,n)}const ys={__isTeleport:!0,process(e,t,n,a,l,s,i,o,r,c){const{mc:u,pc:d,pbc:p,o:{insert:_,querySelector:f,createText:h}}=c,m=ms(t.props);let{shapeFlag:g,children:v,dynamicChildren:b}=t;if(null==e){const e=t.el=h(""),c=t.anchor=h("");_(e,n,a),_(c,n,a);const d=t.target=vs(t.props,f),p=t.targetAnchor=h("");d&&(_(p,d),i=i||gs(d));const b=(e,t)=>{16&g&&u(v,e,t,l,s,i,o,r)};m?b(n,c):d&&b(d,p)}else{t.el=e.el;const a=t.anchor=e.anchor,u=t.target=e.target,_=t.targetAnchor=e.targetAnchor,h=ms(e.props),g=h?n:u,v=h?a:_;if(i=i||gs(u),b?(p(e.dynamicChildren,b,g,l,s,i,o),hs(e,t,!0)):r||d(e,t,g,v,l,s,i,o,!1),m)h||bs(t,n,a,c,1);else if((t.props&&t.props.to)!==(e.props&&e.props.to)){const e=t.target=vs(t.props,f);e&&bs(t,e,null,c,0)}else h&&bs(t,u,_,c,1)}},remove(e,t,n,a,{um:l,o:{remove:s}},i){const{shapeFlag:o,children:r,anchor:c,targetAnchor:u,target:d,props:p}=e;if(d&&s(u),(i||!ms(p))&&(s(c),16&o))for(let e=0;e<r.length;e++){const a=r[e];l(a,t,n,!0,!!a.dynamicChildren)}},move:bs,hydrate:function(e,t,n,a,l,s,{o:{nextSibling:i,parentNode:o,querySelector:r}},c){const u=t.target=vs(t.props,r);if(u){const r=u._lpa||u.firstChild;if(16&t.shapeFlag)if(ms(t.props))t.anchor=c(i(e),t,o(e),n,a,l,s),t.targetAnchor=r;else{t.anchor=i(e);let o=r;for(;o;)if(o=i(o),o&&8===o.nodeType&&"teleport anchor"===o.data){t.targetAnchor=o,u._lpa=t.targetAnchor&&i(t.targetAnchor);break}c(r,t,u,n,a,l,s)}}return t.anchor&&i(t.anchor)}},ws=Symbol(void 0),xs=Symbol(void 0),ks=Symbol(void 0),$s=Symbol(void 0),Ss=[];let Cs=null;function Ns(e=!1){Ss.push(Cs=e?null:[])}function As(){Ss.pop(),Cs=Ss[Ss.length-1]||null}let Ts=1;function Es(e){Ts+=e}function Ps(e){return e.dynamicChildren=Ts>0?Cs||ee:null,As(),Ts>0&&Cs&&Cs.push(e),e}function Is(e,t,n,a,l,s){return Ps(Ls(e,t,n,a,l,s,!0))}function Ms(e,t,n,a,l){return Ps(zs(e,t,n,a,l,!0))}function Os(e){return!!e&&!0===e.__v_isVNode}function Us(e,t){return e.type===t.type&&e.key===t.key}function Fs(e){}const Rs="__vInternal",Ds=({key:e})=>null!=e?e:null,js=({ref:e,ref_key:t,ref_for:n})=>null!=e?he(e)||dn(e)||fe(e)?{i:oa,r:e,k:t,f:!!n}:e:null;function Ls(e,t=null,n=null,a=0,l=null,s=(e===ws?0:1),i=!1,o=!1){const r={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&Ds(t),ref:t&&js(t),scopeId:ra,slotScopeIds:null,children:n,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:s,patchFlag:a,dynamicProps:l,dynamicChildren:null,appContext:null};return o?(Js(r,n),128&s&&e.normalize(r)):n&&(r.shapeFlag|=he(n)?8:16),Ts>0&&!i&&Cs&&(r.patchFlag>0||6&s)&&32!==r.patchFlag&&Cs.push(r),r}const zs=function(e,t=null,n=null,a=0,l=null,s=!1){if(e&&e!==yl||(e=ks),Os(e)){const a=Vs(e,t,!0);return n&&Js(a,n),Ts>0&&!s&&Cs&&(6&a.shapeFlag?Cs[Cs.indexOf(e)]=a:Cs.push(a)),a.patchFlag|=-2,a}var i;if(fe(i=e)&&"__vccOpts"in i&&(e=e.__vccOpts),t){t=Bs(t);let{class:e,style:n}=t;e&&!he(e)&&(t.class=q(e)),ge(n)&&(an(n)&&!ue(n)&&(n=ie({},n)),t.style=L(n))}return Ls(e,t,n,a,l,he(e)?1:ba(e)?128:(e=>e.__isTeleport)(e)?64:ge(e)?4:fe(e)?2:0,s,!0)};function Bs(e){return e?an(e)||Rs in e?ie({},e):e:null}function Vs(e,t,n=!1){const{props:a,ref:l,patchFlag:s,children:i}=e,o=t?Ys(a||{},t):a;return{__v_isVNode:!0,__v_skip:!0,type:e.type,props:o,key:o&&Ds(o),ref:t&&t.ref?n&&l?ue(l)?l.concat(js(t)):[l,js(t)]:js(t):l,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:i,target:e.target,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==ws?-1===s?16:16|s:s,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:e.transition,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&Vs(e.ssContent),ssFallback:e.ssFallback&&Vs(e.ssFallback),el:e.el,anchor:e.anchor}}function qs(e=" ",t=0){return zs(xs,null,e,t)}function Hs(e,t){const n=zs($s,null,e);return n.staticCount=t,n}function Gs(e="",t=!1){return t?(Ns(),Ms(ks,null,e)):zs(ks,null,e)}function Ks(e){return null==e||"boolean"==typeof e?zs(ks):ue(e)?zs(ws,null,e.slice()):"object"==typeof e?Ws(e):zs(xs,null,String(e))}function Ws(e){return null===e.el||e.memo?e:Vs(e)}function Js(e,t){let n=0;const{shapeFlag:a}=e;if(null==t)t=null;else if(ue(t))n=16;else if("object"==typeof t){if(65&a){const n=t.default;return void(n&&(n._c&&(n._d=!1),Js(e,n()),n._c&&(n._d=!0)))}{n=32;const a=t._;a||Rs in t?3===a&&oa&&(1===oa.slots._?t._=1:(t._=2,e.patchFlag|=1024)):t._ctx=oa}}else fe(t)?(t={default:t,_ctx:oa},n=32):(t=String(t),64&a?(n=16,t=[qs(t)]):n=8);e.children=t,e.shapeFlag|=n}function Ys(...e){const t={};for(let n=0;n<e.length;n++){const a=e[n];for(const e in a)if("class"===e)t.class!==a.class&&(t.class=q([t.class,a.class]));else if("style"===e)t.style=L([t.style,a.style]);else if(le(e)){const n=t[e],l=a[e];!l||n===l||ue(n)&&n.includes(l)||(t[e]=n?[].concat(n,l):l)}else""!==e&&(t[e]=a[e])}return t}function Xs(e,t,n,a=null){Pn(e,t,7,[n,a])}const Zs=ns();let Qs=0,ei=null;const ti=()=>ei||oa,ni=e=>{ei=e,e.scope.on()},ai=()=>{ei&&ei.scope.off(),ei=null};function li(e){return 4&e.vnode.shapeFlag}let si,ii,oi=!1;function ri(e,t,n){fe(t)?e.render=t:ge(t)&&(e.setupState=bn(t)),di(e,n)}function ci(e){si=e,ii=e=>{e.render._rc&&(e.withProxy=new Proxy(e.ctx,Ml))}}const ui=()=>!si;function di(e,t,n){const a=e.type;if(!e.render){if(!t&&si&&!a.render){const t=a.template;if(t){const{isCustomElement:n,compilerOptions:l}=e.appContext.config,{delimiters:s,compilerOptions:i}=a,o=ie(ie({isCustomElement:n,delimiters:s},l),i);a.render=si(t,o)}}e.render=a.render||te,ii&&ii(e)}ni(e),lt(),function(e){const t=Rl(e),n=e.proxy,a=e.ctx;Ol=!1,t.beforeCreate&&Ul(t.beforeCreate,e,"bc");const{data:l,computed:s,methods:i,watch:o,provide:r,inject:c,created:u,beforeMount:d,mounted:p,beforeUpdate:_,updated:f,activated:h,deactivated:m,beforeUnmount:g,unmounted:v,render:b,renderTracked:y,renderTriggered:w,errorCaptured:x,serverPrefetch:k,expose:$,inheritAttrs:S,components:C,directives:N}=t;if(c&&function(e,t,n=te,a=!1){ue(e)&&(e=zl(e));for(const n in e){const l=e[n];let s;s=ge(l)?"default"in l?Na(l.from||n,l.default,!0):Na(l.from||n):Na(l),dn(s)&&a?Object.defineProperty(t,n,{enumerable:!0,configurable:!0,get:()=>s.value,set:e=>s.value=e}):t[n]=s}}(c,a,null,e.appContext.config.unwrapInjectedRef),i)for(const e in i){const t=i[e];fe(t)&&(a[e]=t.bind(n))}if(l){const t=l.call(n,n);ge(t)&&(e.data=Jt(t))}if(Ol=!0,s)for(const e in s){const t=s[e],l=fe(t)?t.bind(n,n):fe(t.get)?t.get.bind(n,n):te,i=!fe(t)&&fe(t.set)?t.set.bind(n):te,o=gi({get:l,set:i});Object.defineProperty(a,e,{enumerable:!0,configurable:!0,get:()=>o.value,set:e=>o.value=e})}if(o)for(const e in o)Fl(o[e],a,n,e);if(r){const e=fe(r)?r.call(n):r;Reflect.ownKeys(e).forEach((t=>{Ca(t,e[t])}))}function A(e,t){ue(t)?t.forEach((t=>e(t.bind(n)))):t&&e(t.bind(n))}if(u&&Ul(u,e,"c"),A(ol,d),A(rl,p),A(cl,_),A(ul,f),A(Qa,h),A(el,m),A(ml,x),A(hl,y),A(fl,w),A(dl,g),A(pl,v),A(_l,k),ue($))if($.length){const t=e.exposed||(e.exposed={});$.forEach((e=>{Object.defineProperty(t,e,{get:()=>n[e],set:t=>n[e]=t})}))}else e.exposed||(e.exposed={});b&&e.render===te&&(e.render=b),null!=S&&(e.inheritAttrs=S),C&&(e.components=C),N&&(e.directives=N)}(e),st(),ai()}function pi(e){let t;return{get attrs(){return t||(t=function(e){return new Proxy(e.attrs,{get:(t,n)=>(it(e,0,"$attrs"),t[n])})}(e))},slots:e.slots,emit:e.emit,expose:t=>{e.exposed=t||{}}}}function _i(e){if(e.exposed)return e.exposeProxy||(e.exposeProxy=new Proxy(bn(sn(e.exposed)),{get:(t,n)=>n in t?t[n]:n in Pl?Pl[n](e):void 0}))}const fi=/(?:^|[-_])(\w)/g;function hi(e,t=!0){return fe(e)?e.displayName||e.name:e.name||t&&e.__name}function mi(e,t,n=!1){let a=hi(t);if(!a&&t.__file){const e=t.__file.match(/([^/\\]+)\.\w+$/);e&&(a=e[1])}if(!a&&e&&e.parent){const n=e=>{for(const n in e)if(e[n]===t)return n};a=n(e.components||e.parent.type.components)||n(e.appContext.components)}return a?a.replace(fi,(e=>e.toUpperCase())).replace(/[-_]/g,""):n?"App":"Anonymous"}const gi=(e,t)=>function(e,t,n=!1){let a,l;const s=fe(e);return s?(a=e,l=te):(a=e.get,l=e.set),new Sn(a,l,s||!l,n)}(e,0,oi);function vi(){return null}function bi(){return null}function yi(e){}function wi(e,t){return null}function xi(){return $i().slots}function ki(){return $i().attrs}function $i(){const e=ti();return e.setupContext||(e.setupContext=pi(e))}function Si(e,t){const n=ue(e)?e.reduce(((e,t)=>(e[t]={},e)),{}):e;for(const e in t){const a=n[e];a?ue(a)||fe(a)?n[e]={type:a,default:t[e]}:a.default=t[e]:null===a&&(n[e]={default:t[e]})}return n}function Ci(e,t){const n={};for(const a in e)t.includes(a)||Object.defineProperty(n,a,{enumerable:!0,get:()=>e[a]});return n}function Ni(e){const t=ti();let n=e();return ai(),ve(n)&&(n=n.catch((e=>{throw ni(t),e}))),[n,()=>ni(t)]}function Ai(e,t,n){const a=arguments.length;return 2===a?ge(t)&&!ue(t)?Os(t)?zs(e,null,[t]):zs(e,t):zs(e,null,t):(a>3?n=Array.prototype.slice.call(arguments,2):3===a&&Os(n)&&(n=[n]),zs(e,t,n))}const Ti=Symbol(""),Ei=()=>{{const e=Na(Ti);return e||Nn("Server rendering context not provided. Make sure to only call useSSRContext() conditionally in the server build."),e}};function Pi(){}function Ii(e,t,n,a){const l=n[a];if(l&&Mi(l,e))return l;const s=t();return s.memo=e.slice(),n[a]=s}function Mi(e,t){const n=e.memo;if(n.length!=t.length)return!1;for(let e=0;e<n.length;e++)if(Ie(n[e],t[e]))return!1;return Ts>0&&Cs&&Cs.push(e),!0}const Oi="3.2.37",Ui="undefined"!=typeof document?document:null,Fi=Ui&&Ui.createElement("template"),Ri={insert:(e,t,n)=>{t.insertBefore(e,n||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,n,a)=>{const l=t?Ui.createElementNS("http://www.w3.org/2000/svg",e):Ui.createElement(e,n?{is:n}:void 0);return"select"===e&&a&&null!=a.multiple&&l.setAttribute("multiple",a.multiple),l},createText:e=>Ui.createTextNode(e),createComment:e=>Ui.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>Ui.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},cloneNode(e){const t=e.cloneNode(!0);return"_value"in e&&(t._value=e._value),t},insertStaticContent(e,t,n,a,l,s){const i=n?n.previousSibling:t.lastChild;if(l&&(l===s||l.nextSibling))for(;t.insertBefore(l.cloneNode(!0),n),l!==s&&(l=l.nextSibling););else{Fi.innerHTML=a?`<svg>${e}</svg>`:e;const l=Fi.content;if(a){const e=l.firstChild;for(;e.firstChild;)l.appendChild(e.firstChild);l.removeChild(e)}t.insertBefore(l,n)}return[i?i.nextSibling:t.firstChild,n?n.previousSibling:t.lastChild]}},Di=/\s*!important$/;function ji(e,t,n){if(ue(n))n.forEach((n=>ji(e,t,n)));else if(null==n&&(n=""),t.startsWith("--"))e.setProperty(t,n);else{const a=function(e,t){const n=zi[t];if(n)return n;let a=Ne(t);if("filter"!==a&&a in e)return zi[t]=a;a=Ee(a);for(let n=0;n<Li.length;n++){const l=Li[n]+a;if(l in e)return zi[t]=l}return t}(e,t);Di.test(n)?e.setProperty(Te(a),n.replace(Di,""),"important"):e[a]=n}}const Li=["Webkit","Moz","ms"],zi={},Bi="http://www.w3.org/1999/xlink",[Vi,qi]=(()=>{let e=Date.now,t=!1;if("undefined"!=typeof window){Date.now()>document.createEvent("Event").timeStamp&&(e=performance.now.bind(performance));const n=navigator.userAgent.match(/firefox\/(\d+)/i);t=!!(n&&Number(n[1])<=53)}return[e,t]})();let Hi=0;const Gi=Promise.resolve(),Ki=()=>{Hi=0};function Wi(e,t,n,a){e.addEventListener(t,n,a)}const Ji=/(?:Once|Passive|Capture)$/,Yi=/^on[a-z]/;function Xi(e,t){const n=Ga(e);class a extends eo{constructor(e){super(n,e,t)}}return a.def=n,a}const Zi=e=>Xi(e,er),Qi="undefined"!=typeof HTMLElement?HTMLElement:class{};class eo extends Qi{constructor(e,t={},n){super(),this._def=e,this._props=t,this._instance=null,this._connected=!1,this._resolved=!1,this._numberProps=null,this.shadowRoot&&n?n(this._createVNode(),this.shadowRoot):this.attachShadow({mode:"open"})}connectedCallback(){this._connected=!0,this._instance||this._resolveDef()}disconnectedCallback(){this._connected=!1,Gn((()=>{this._connected||(Qo(null,this.shadowRoot),this._instance=null)}))}_resolveDef(){if(this._resolved)return;this._resolved=!0;for(let e=0;e<this.attributes.length;e++)this._setAttr(this.attributes[e].name);new MutationObserver((e=>{for(const t of e)this._setAttr(t.attributeName)})).observe(this,{attributes:!0});const e=e=>{const{props:t,styles:n}=e,a=!ue(t),l=t?a?Object.keys(t):t:[];let s;if(a)for(const e in this._props){const n=t[e];(n===Number||n&&n.type===Number)&&(this._props[e]=Ue(this._props[e]),(s||(s=Object.create(null)))[e]=!0)}this._numberProps=s;for(const e of Object.keys(this))"_"!==e[0]&&this._setProp(e,this[e],!0,!1);for(const e of l.map(Ne))Object.defineProperty(this,e,{get(){return this._getProp(e)},set(t){this._setProp(e,t)}});this._applyStyles(n),this._update()},t=this._def.__asyncLoader;t?t().then(e):e(this._def)}_setAttr(e){let t=this.getAttribute(e);this._numberProps&&this._numberProps[e]&&(t=Ue(t)),this._setProp(Ne(e),t,!1)}_getProp(e){return this._props[e]}_setProp(e,t,n=!0,a=!0){t!==this._props[e]&&(this._props[e]=t,a&&this._instance&&this._update(),n&&(!0===t?this.setAttribute(Te(e),""):"string"==typeof t||"number"==typeof t?this.setAttribute(Te(e),t+""):t||this.removeAttribute(Te(e))))}_update(){Qo(this._createVNode(),this.shadowRoot)}_createVNode(){const e=zs(this._def,ie({},this._props));return this._instance||(e.ce=e=>{this._instance=e,e.isCE=!0,e.emit=(e,...t)=>{this.dispatchEvent(new CustomEvent(e,{detail:t}))};let t=this;for(;t=t&&(t.parentNode||t.host);)if(t instanceof eo){e.parent=t._instance;break}}),e}_applyStyles(e){e&&e.forEach((e=>{const t=document.createElement("style");t.textContent=e,this.shadowRoot.appendChild(t)}))}}function to(e="$style"){{const t=ti();if(!t)return Q;const n=t.type.__cssModules;if(!n)return Q;return n[e]||Q}}function no(e){const t=ti();if(!t)return;const n=()=>ao(t.subTree,e(t.proxy));Ta(n),rl((()=>{const e=new MutationObserver(n);e.observe(t.subTree.el.parentNode,{childList:!0}),pl((()=>e.disconnect()))}))}function ao(e,t){if(128&e.shapeFlag){const n=e.suspense;e=n.activeBranch,n.pendingBranch&&!n.isHydrating&&n.effects.push((()=>{ao(n.activeBranch,t)}))}for(;e.component;)e=e.component.subTree;if(1&e.shapeFlag&&e.el)lo(e.el,t);else if(e.type===ws)e.children.forEach((e=>ao(e,t)));else if(e.type===$s){let{el:n,anchor:a}=e;for(;n&&(lo(n,t),n!==a);)n=n.nextSibling}}function lo(e,t){if(1===e.nodeType){const n=e.style;for(const e in t)n.setProperty(`--${e}`,t[e])}}const so=(e,{slots:t})=>Ai(ja,uo(e),t);so.displayName="Transition";const io={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},oo=so.props=ie({},ja.props,io),ro=(e,t=[])=>{ue(e)?e.forEach((e=>e(...t))):e&&e(...t)},co=e=>!!e&&(ue(e)?e.some((e=>e.length>1)):e.length>1);function uo(e){const t={};for(const n in e)n in io||(t[n]=e[n]);if(!1===e.css)return t;const{name:n="v",type:a,duration:l,enterFromClass:s=`${n}-enter-from`,enterActiveClass:i=`${n}-enter-active`,enterToClass:o=`${n}-enter-to`,appearFromClass:r=s,appearActiveClass:c=i,appearToClass:u=o,leaveFromClass:d=`${n}-leave-from`,leaveActiveClass:p=`${n}-leave-active`,leaveToClass:_=`${n}-leave-to`}=e,f=function(e){if(null==e)return null;if(ge(e))return[po(e.enter),po(e.leave)];{const t=po(e);return[t,t]}}(l),h=f&&f[0],m=f&&f[1],{onBeforeEnter:g,onEnter:v,onEnterCancelled:b,onLeave:y,onLeaveCancelled:w,onBeforeAppear:x=g,onAppear:k=v,onAppearCancelled:$=b}=t,S=(e,t,n)=>{fo(e,t?u:o),fo(e,t?c:i),n&&n()},C=(e,t)=>{e._isLeaving=!1,fo(e,d),fo(e,_),fo(e,p),t&&t()},N=e=>(t,n)=>{const l=e?k:v,i=()=>S(t,e,n);ro(l,[t,i]),ho((()=>{fo(t,e?r:s),_o(t,e?u:o),co(l)||go(t,a,h,i)}))};return ie(t,{onBeforeEnter(e){ro(g,[e]),_o(e,s),_o(e,i)},onBeforeAppear(e){ro(x,[e]),_o(e,r),_o(e,c)},onEnter:N(!1),onAppear:N(!0),onLeave(e,t){e._isLeaving=!0;const n=()=>C(e,t);_o(e,d),wo(),_o(e,p),ho((()=>{e._isLeaving&&(fo(e,d),_o(e,_),co(y)||go(e,a,m,n))})),ro(y,[e,n])},onEnterCancelled(e){S(e,!1),ro(b,[e])},onAppearCancelled(e){S(e,!0),ro($,[e])},onLeaveCancelled(e){C(e),ro(w,[e])}})}function po(e){return Ue(e)}function _o(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.add(t))),(e._vtc||(e._vtc=new Set)).add(t)}function fo(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.remove(t)));const{_vtc:n}=e;n&&(n.delete(t),n.size||(e._vtc=void 0))}function ho(e){requestAnimationFrame((()=>{requestAnimationFrame(e)}))}let mo=0;function go(e,t,n,a){const l=e._endId=++mo,s=()=>{l===e._endId&&a()};if(n)return setTimeout(s,n);const{type:i,timeout:o,propCount:r}=vo(e,t);if(!i)return a();const c=i+"end";let u=0;const d=()=>{e.removeEventListener(c,p),s()},p=t=>{t.target===e&&++u>=r&&d()};setTimeout((()=>{u<r&&d()}),o+1),e.addEventListener(c,p)}function vo(e,t){const n=window.getComputedStyle(e),a=e=>(n[e]||"").split(", "),l=a("transitionDelay"),s=a("transitionDuration"),i=bo(l,s),o=a("animationDelay"),r=a("animationDuration"),c=bo(o,r);let u=null,d=0,p=0;return"transition"===t?i>0&&(u="transition",d=i,p=s.length):"animation"===t?c>0&&(u="animation",d=c,p=r.length):(d=Math.max(i,c),u=d>0?i>c?"transition":"animation":null,p=u?"transition"===u?s.length:r.length:0),{type:u,timeout:d,propCount:p,hasTransform:"transition"===u&&/\b(transform|all)(,|$)/.test(n.transitionProperty)}}function bo(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max(...t.map(((t,n)=>yo(t)+yo(e[n]))))}function yo(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function wo(){return document.body.offsetHeight}const xo=new WeakMap,ko=new WeakMap,$o={name:"TransitionGroup",props:ie({},oo,{tag:String,moveClass:String}),setup(e,{slots:t}){const n=ti(),a=Ra();let l,s;return ul((()=>{if(!l.length)return;const t=e.moveClass||`${e.name||"v"}-move`;if(!function(e,t,n){const a=e.cloneNode();e._vtc&&e._vtc.forEach((e=>{e.split(/\s+/).forEach((e=>e&&a.classList.remove(e)))})),n.split(/\s+/).forEach((e=>e&&a.classList.add(e))),a.style.display="none";const l=1===t.nodeType?t:t.parentNode;l.appendChild(a);const{hasTransform:s}=vo(a);return l.removeChild(a),s}(l[0].el,n.vnode.el,t))return;l.forEach(So),l.forEach(Co);const a=l.filter(No);wo(),a.forEach((e=>{const n=e.el,a=n.style;_o(n,t),a.transform=a.webkitTransform=a.transitionDuration="";const l=n._moveCb=e=>{e&&e.target!==n||e&&!/transform$/.test(e.propertyName)||(n.removeEventListener("transitionend",l),n._moveCb=null,fo(n,t))};n.addEventListener("transitionend",l)}))})),()=>{const i=ln(e),o=uo(i);let r=i.tag||ws;l=s,s=t.default?Ha(t.default()):[];for(let e=0;e<s.length;e++){const t=s[e];null!=t.key&&qa(t,za(t,o,a,n))}if(l)for(let e=0;e<l.length;e++){const t=l[e];qa(t,za(t,o,a,n)),xo.set(t,t.el.getBoundingClientRect())}return zs(r,null,s)}}};function So(e){const t=e.el;t._moveCb&&t._moveCb(),t._enterCb&&t._enterCb()}function Co(e){ko.set(e,e.el.getBoundingClientRect())}function No(e){const t=xo.get(e),n=ko.get(e),a=t.left-n.left,l=t.top-n.top;if(a||l){const t=e.el.style;return t.transform=t.webkitTransform=`translate(${a}px,${l}px)`,t.transitionDuration="0s",e}}const Ao=e=>{const t=e.props["onUpdate:modelValue"]||!1;return ue(t)?e=>Me(t,e):t};function To(e){e.target.composing=!0}function Eo(e){const t=e.target;t.composing&&(t.composing=!1,t.dispatchEvent(new Event("input")))}const Po={created(e,{modifiers:{lazy:t,trim:n,number:a}},l){e._assign=Ao(l);const s=a||l.props&&"number"===l.props.type;Wi(e,t?"change":"input",(t=>{if(t.target.composing)return;let a=e.value;n&&(a=a.trim()),s&&(a=Ue(a)),e._assign(a)})),n&&Wi(e,"change",(()=>{e.value=e.value.trim()})),t||(Wi(e,"compositionstart",To),Wi(e,"compositionend",Eo),Wi(e,"change",Eo))},mounted(e,{value:t}){e.value=null==t?"":t},beforeUpdate(e,{value:t,modifiers:{lazy:n,trim:a,number:l}},s){if(e._assign=Ao(s),e.composing)return;if(document.activeElement===e&&"range"!==e.type){if(n)return;if(a&&e.value.trim()===t)return;if((l||"number"===e.type)&&Ue(e.value)===t)return}const i=null==t?"":t;e.value!==i&&(e.value=i)}},Io={deep:!0,created(e,t,n){e._assign=Ao(n),Wi(e,"change",(()=>{const t=e._modelValue,n=Ro(e),a=e.checked,l=e._assign;if(ue(t)){const e=Y(t,n),s=-1!==e;if(a&&!s)l(t.concat(n));else if(!a&&s){const n=[...t];n.splice(e,1),l(n)}}else if(pe(t)){const e=new Set(t);a?e.add(n):e.delete(n),l(e)}else l(Do(e,a))}))},mounted:Mo,beforeUpdate(e,t,n){e._assign=Ao(n),Mo(e,t,n)}};function Mo(e,{value:t,oldValue:n},a){e._modelValue=t,ue(t)?e.checked=Y(t,a.props.value)>-1:pe(t)?e.checked=t.has(a.props.value):t!==n&&(e.checked=J(t,Do(e,!0)))}const Oo={created(e,{value:t},n){e.checked=J(t,n.props.value),e._assign=Ao(n),Wi(e,"change",(()=>{e._assign(Ro(e))}))},beforeUpdate(e,{value:t,oldValue:n},a){e._assign=Ao(a),t!==n&&(e.checked=J(t,a.props.value))}},Uo={deep:!0,created(e,{value:t,modifiers:{number:n}},a){const l=pe(t);Wi(e,"change",(()=>{const t=Array.prototype.filter.call(e.options,(e=>e.selected)).map((e=>n?Ue(Ro(e)):Ro(e)));e._assign(e.multiple?l?new Set(t):t:t[0])})),e._assign=Ao(a)},mounted(e,{value:t}){Fo(e,t)},beforeUpdate(e,t,n){e._assign=Ao(n)},updated(e,{value:t}){Fo(e,t)}};function Fo(e,t){const n=e.multiple;if(!n||ue(t)||pe(t)){for(let a=0,l=e.options.length;a<l;a++){const l=e.options[a],s=Ro(l);if(n)l.selected=ue(t)?Y(t,s)>-1:t.has(s);else if(J(Ro(l),t))return void(e.selectedIndex!==a&&(e.selectedIndex=a))}n||-1===e.selectedIndex||(e.selectedIndex=-1)}}function Ro(e){return"_value"in e?e._value:e.value}function Do(e,t){const n=t?"_trueValue":"_falseValue";return n in e?e[n]:t}const jo={created(e,t,n){Lo(e,t,n,null,"created")},mounted(e,t,n){Lo(e,t,n,null,"mounted")},beforeUpdate(e,t,n,a){Lo(e,t,n,a,"beforeUpdate")},updated(e,t,n,a){Lo(e,t,n,a,"updated")}};function Lo(e,t,n,a,l){const s=function(e,t){switch(e){case"SELECT":return Uo;case"TEXTAREA":return Po;default:switch(t){case"checkbox":return Io;case"radio":return Oo;default:return Po}}}(e.tagName,n.props&&n.props.type)[l];s&&s(e,t,n,a)}const zo=["ctrl","shift","alt","meta"],Bo={stop:e=>e.stopPropagation(),prevent:e=>e.preventDefault(),self:e=>e.target!==e.currentTarget,ctrl:e=>!e.ctrlKey,shift:e=>!e.shiftKey,alt:e=>!e.altKey,meta:e=>!e.metaKey,left:e=>"button"in e&&0!==e.button,middle:e=>"button"in e&&1!==e.button,right:e=>"button"in e&&2!==e.button,exact:(e,t)=>zo.some((n=>e[`${n}Key`]&&!t.includes(n)))},Vo=(e,t)=>(n,...a)=>{for(let e=0;e<t.length;e++){const a=Bo[t[e]];if(a&&a(n,t))return}return e(n,...a)},qo={esc:"escape",space:" ",up:"arrow-up",left:"arrow-left",right:"arrow-right",down:"arrow-down",delete:"backspace"},Ho=(e,t)=>n=>{if(!("key"in n))return;const a=Te(n.key);return t.some((e=>e===a||qo[e]===a))?e(n):void 0},Go={beforeMount(e,{value:t},{transition:n}){e._vod="none"===e.style.display?"":e.style.display,n&&t?n.beforeEnter(e):Ko(e,t)},mounted(e,{value:t},{transition:n}){n&&t&&n.enter(e)},updated(e,{value:t,oldValue:n},{transition:a}){!t!=!n&&(a?t?(a.beforeEnter(e),Ko(e,!0),a.enter(e)):a.leave(e,(()=>{Ko(e,!1)})):Ko(e,t))},beforeUnmount(e,{value:t}){Ko(e,t)}};function Ko(e,t){e.style.display=t?e._vod:"none"}const Wo=ie({patchProp:(e,t,n,a,l=!1,s,i,o,r)=>{"class"===t?function(e,t,n){const a=e._vtc;a&&(t=(t?[t,...a]:[...a]).join(" ")),null==t?e.removeAttribute("class"):n?e.setAttribute("class",t):e.className=t}(e,a,l):"style"===t?function(e,t,n){const a=e.style,l=he(n);if(n&&!l){for(const e in n)ji(a,e,n[e]);if(t&&!he(t))for(const e in t)null==n[e]&&ji(a,e,"")}else{const s=a.display;l?t!==n&&(a.cssText=n):t&&e.removeAttribute("style"),"_vod"in e&&(a.display=s)}}(e,n,a):le(t)?se(t)||function(e,t,n,a,l=null){const s=e._vei||(e._vei={}),i=s[t];if(a&&i)i.value=a;else{const[n,o]=function(e){let t;if(Ji.test(e)){let n;for(t={};n=e.match(Ji);)e=e.slice(0,e.length-n[0].length),t[n[0].toLowerCase()]=!0}return[Te(e.slice(2)),t]}(t);if(a){const i=s[t]=function(e,t){const n=e=>{const a=e.timeStamp||Vi();(qi||a>=n.attached-1)&&Pn(function(e,t){if(ue(t)){const n=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{n.call(e),e._stopped=!0},t.map((e=>t=>!t._stopped&&e&&e(t)))}return t}(e,n.value),t,5,[e])};return n.value=e,n.attached=Hi||(Gi.then(Ki),Hi=Vi()),n}(a,l);Wi(e,n,i,o)}else i&&(function(e,t,n,a){e.removeEventListener(t,n,a)}(e,n,i,o),s[t]=void 0)}}(e,t,0,a,i):("."===t[0]?(t=t.slice(1),1):"^"===t[0]?(t=t.slice(1),0):function(e,t,n,a){return a?"innerHTML"===t||"textContent"===t||!!(t in e&&Yi.test(t)&&fe(n)):"spellcheck"!==t&&"draggable"!==t&&"translate"!==t&&("form"!==t&&(("list"!==t||"INPUT"!==e.tagName)&&(("type"!==t||"TEXTAREA"!==e.tagName)&&((!Yi.test(t)||!he(n))&&t in e))))}(e,t,a,l))?function(e,t,n,a,l,s,i){if("innerHTML"===t||"textContent"===t)return a&&i(a,l,s),void(e[t]=null==n?"":n);if("value"===t&&"PROGRESS"!==e.tagName&&!e.tagName.includes("-")){e._value=n;const a=null==n?"":n;return e.value===a&&"OPTION"!==e.tagName||(e.value=a),void(null==n&&e.removeAttribute(t))}let o=!1;if(""===n||null==n){const a=typeof e[t];"boolean"===a?n=j(n):null==n&&"string"===a?(n="",o=!0):"number"===a&&(n=0,o=!0)}try{e[t]=n}catch(e){}o&&e.removeAttribute(t)}(e,t,a,s,i,o,r):("true-value"===t?e._trueValue=a:"false-value"===t&&(e._falseValue=a),function(e,t,n,a,l){if(a&&t.startsWith("xlink:"))null==n?e.removeAttributeNS(Bi,t.slice(6,t.length)):e.setAttributeNS(Bi,t,n);else{const a=D(t);null==n||a&&!j(n)?e.removeAttribute(t):e.setAttribute(t,a?"":n)}}(e,t,a,l))}},Ri);let Jo,Yo=!1;function Xo(){return Jo||(Jo=ds(Wo))}function Zo(){return Jo=Yo?Jo:ps(Wo),Yo=!0,Jo}const Qo=(...e)=>{Xo().render(...e)},er=(...e)=>{Zo().hydrate(...e)},tr=(...e)=>{const t=Xo().createApp(...e),{mount:n}=t;return t.mount=e=>{const a=ar(e);if(!a)return;const l=t._component;fe(l)||l.render||l.template||(l.template=a.innerHTML),a.innerHTML="";const s=n(a,!1,a instanceof SVGElement);return a instanceof Element&&(a.removeAttribute("v-cloak"),a.setAttribute("data-v-app","")),s},t},nr=(...e)=>{const t=Zo().createApp(...e),{mount:n}=t;return t.mount=e=>{const t=ar(e);if(t)return n(t,!0,t instanceof SVGElement)},t};function ar(e){return he(e)?document.querySelector(e):e}const lr=te;var sr=Object.freeze({__proto__:null,render:Qo,hydrate:er,createApp:tr,createSSRApp:nr,initDirectivesForSSR:lr,defineCustomElement:Xi,defineSSRCustomElement:Zi,VueElement:eo,useCssModule:to,useCssVars:no,Transition:so,TransitionGroup:$o,vModelText:Po,vModelCheckbox:Io,vModelRadio:Oo,vModelSelect:Uo,vModelDynamic:jo,withModifiers:Vo,withKeys:Ho,vShow:Go,reactive:Jt,ref:pn,readonly:Xt,unref:gn,proxyRefs:bn,isRef:dn,toRef:$n,toRefs:xn,isProxy:an,isReactive:en,isReadonly:tn,isShallow:nn,customRef:wn,triggerRef:mn,shallowRef:_n,shallowReactive:Yt,shallowReadonly:Zt,markRaw:sn,toRaw:ln,effect:et,stop:tt,ReactiveEffect:Ze,effectScope:je,EffectScope:De,getCurrentScope:ze,onScopeDispose:Be,computed:gi,watch:Ia,watchEffect:Aa,watchPostEffect:Ta,watchSyncEffect:Ea,onBeforeMount:ol,onMounted:rl,onBeforeUpdate:cl,onUpdated:ul,onBeforeUnmount:dl,onUnmounted:pl,onActivated:Qa,onDeactivated:el,onRenderTracked:hl,onRenderTriggered:fl,onErrorCaptured:ml,onServerPrefetch:_l,provide:Ca,inject:Na,nextTick:Gn,defineComponent:Ga,defineAsyncComponent:Wa,useAttrs:ki,useSlots:xi,defineProps:vi,defineEmits:bi,defineExpose:yi,withDefaults:wi,mergeDefaults:Si,createPropsRestProxy:Ci,withAsyncContext:Ni,getCurrentInstance:ti,h:Ai,createVNode:zs,cloneVNode:Vs,mergeProps:Ys,isVNode:Os,Fragment:ws,Text:xs,Comment:ks,Static:$s,Teleport:ys,Suspense:ya,KeepAlive:Xa,BaseTransition:ja,withDirectives:gl,useSSRContext:Ei,ssrContextKey:Ti,createRenderer:ds,createHydrationRenderer:ps,queuePostFlushCb:Yn,warn:Nn,handleError:In,callWithErrorHandling:En,callWithAsyncErrorHandling:Pn,resolveComponent:bl,resolveDirective:xl,resolveDynamicComponent:wl,registerRuntimeCompiler:ci,isRuntimeOnly:ui,useTransitionState:Ra,resolveTransitionHooks:za,setTransitionHooks:qa,getTransitionRawChildren:Ha,initCustomFormatter:Pi,get devtools(){return ta},setDevtoolsHook:aa,withCtx:_a,pushScopeId:ua,popScopeId:da,withScopeId:pa,renderList:Sl,toHandlers:Tl,renderSlot:Nl,createSlots:Cl,withMemo:Ii,isMemoSame:Mi,openBlock:Ns,createBlock:Ms,setBlockTracking:Es,createTextVNode:qs,createCommentVNode:Gs,createStaticVNode:Hs,createElementVNode:Ls,createElementBlock:Is,guardReactiveProps:Bs,toDisplayString:X,camelize:Ne,capitalize:Ee,toHandlerKey:Pe,normalizeProps:H,normalizeClass:q,normalizeStyle:L,transformVNodeArgs:Fs,version:Oi,ssrUtils:null,resolveFilter:null,compatUtils:null});function ir(e){throw e}function or(e){}function rr(e,t,n,a){const l=new SyntaxError(String(e));return l.code=e,l.loc=t,l}const cr=Symbol(""),ur=Symbol(""),dr=Symbol(""),pr=Symbol(""),_r=Symbol(""),fr=Symbol(""),hr=Symbol(""),mr=Symbol(""),gr=Symbol(""),vr=Symbol(""),br=Symbol(""),yr=Symbol(""),wr=Symbol(""),xr=Symbol(""),kr=Symbol(""),$r=Symbol(""),Sr=Symbol(""),Cr=Symbol(""),Nr=Symbol(""),Ar=Symbol(""),Tr=Symbol(""),Er=Symbol(""),Pr=Symbol(""),Ir=Symbol(""),Mr=Symbol(""),Or=Symbol(""),Ur=Symbol(""),Fr=Symbol(""),Rr=Symbol(""),Dr=Symbol(""),jr=Symbol(""),Lr=Symbol(""),zr=Symbol(""),Br=Symbol(""),Vr=Symbol(""),qr=Symbol(""),Hr=Symbol(""),Gr=Symbol(""),Kr=Symbol(""),Wr={[cr]:"Fragment",[ur]:"Teleport",[dr]:"Suspense",[pr]:"KeepAlive",[_r]:"BaseTransition",[fr]:"openBlock",[hr]:"createBlock",[mr]:"createElementBlock",[gr]:"createVNode",[vr]:"createElementVNode",[br]:"createCommentVNode",[yr]:"createTextVNode",[wr]:"createStaticVNode",[xr]:"resolveComponent",[kr]:"resolveDynamicComponent",[$r]:"resolveDirective",[Sr]:"resolveFilter",[Cr]:"withDirectives",[Nr]:"renderList",[Ar]:"renderSlot",[Tr]:"createSlots",[Er]:"toDisplayString",[Pr]:"mergeProps",[Ir]:"normalizeClass",[Mr]:"normalizeStyle",[Or]:"normalizeProps",[Ur]:"guardReactiveProps",[Fr]:"toHandlers",[Rr]:"camelize",[Dr]:"capitalize",[jr]:"toHandlerKey",[Lr]:"setBlockTracking",[zr]:"pushScopeId",[Br]:"popScopeId",[Vr]:"withCtx",[qr]:"unref",[Hr]:"isRef",[Gr]:"withMemo",[Kr]:"isMemoSame"},Jr={source:"",start:{line:1,column:1,offset:0},end:{line:1,column:1,offset:0}};function Yr(e,t,n,a,l,s,i,o=!1,r=!1,c=!1,u=Jr){return e&&(o?(e.helper(fr),e.helper(Sc(e.inSSR,c))):e.helper($c(e.inSSR,c)),i&&e.helper(Cr)),{type:13,tag:t,props:n,children:a,patchFlag:l,dynamicProps:s,directives:i,isBlock:o,disableTracking:r,isComponent:c,loc:u}}function Xr(e,t=Jr){return{type:17,loc:t,elements:e}}function Zr(e,t=Jr){return{type:15,loc:t,properties:e}}function Qr(e,t){return{type:16,loc:Jr,key:he(e)?ec(e,!0):e,value:t}}function ec(e,t=!1,n=Jr,a=0){return{type:4,loc:n,content:e,isStatic:t,constType:t?3:a}}function tc(e,t=Jr){return{type:8,loc:t,children:e}}function nc(e,t=[],n=Jr){return{type:14,loc:n,callee:e,arguments:t}}function ac(e,t,n=!1,a=!1,l=Jr){return{type:18,params:e,returns:t,newline:n,isSlot:a,loc:l}}function lc(e,t,n,a=!0){return{type:19,test:e,consequent:t,alternate:n,newline:a,loc:Jr}}const sc=e=>4===e.type&&e.isStatic,ic=(e,t)=>e===t||e===Te(t);function oc(e){return ic(e,"Teleport")?ur:ic(e,"Suspense")?dr:ic(e,"KeepAlive")?pr:ic(e,"BaseTransition")?_r:void 0}const rc=/^\d|[^\$\w]/,cc=e=>!rc.test(e),uc=/[A-Za-z_$\xA0-\uFFFF]/,dc=/[\.\?\w$\xA0-\uFFFF]/,pc=/\s+[.[]\s*|\s*[.[]\s+/g,_c=e=>{e=e.trim().replace(pc,(e=>e.trim()));let t=0,n=[],a=0,l=0,s=null;for(let i=0;i<e.length;i++){const o=e.charAt(i);switch(t){case 0:if("["===o)n.push(t),t=1,a++;else if("("===o)n.push(t),t=2,l++;else if(!(0===i?uc:dc).test(o))return!1;break;case 1:"'"===o||'"'===o||"`"===o?(n.push(t),t=3,s=o):"["===o?a++:"]"===o&&(--a||(t=n.pop()));break;case 2:if("'"===o||'"'===o||"`"===o)n.push(t),t=3,s=o;else if("("===o)l++;else if(")"===o){if(i===e.length-1)return!1;--l||(t=n.pop())}break;case 3:o===s&&(t=n.pop(),s=null)}}return!a&&!l};function fc(e,t,n){const a={source:e.source.slice(t,t+n),start:hc(e.start,e.source,t),end:e.end};return null!=n&&(a.end=hc(e.start,e.source,t+n)),a}function hc(e,t,n=t.length){return mc(ie({},e),t,n)}function mc(e,t,n=t.length){let a=0,l=-1;for(let e=0;e<n;e++)10===t.charCodeAt(e)&&(a++,l=e);return e.offset+=n,e.line+=a,e.column=-1===l?e.column+n:n-l,e}function gc(e,t,n=!1){for(let a=0;a<e.props.length;a++){const l=e.props[a];if(7===l.type&&(n||l.exp)&&(he(t)?l.name===t:t.test(l.name)))return l}}function vc(e,t,n=!1,a=!1){for(let l=0;l<e.props.length;l++){const s=e.props[l];if(6===s.type){if(n)continue;if(s.name===t&&(s.value||a))return s}else if("bind"===s.name&&(s.exp||a)&&bc(s.arg,t))return s}}function bc(e,t){return!(!e||!sc(e)||e.content!==t)}function yc(e){return 5===e.type||2===e.type}function wc(e){return 7===e.type&&"slot"===e.name}function xc(e){return 1===e.type&&3===e.tagType}function kc(e){return 1===e.type&&2===e.tagType}function $c(e,t){return e||t?gr:vr}function Sc(e,t){return e||t?hr:mr}const Cc=new Set([Or,Ur]);function Nc(e,t=[]){if(e&&!he(e)&&14===e.type){const n=e.callee;if(!he(n)&&Cc.has(n))return Nc(e.arguments[0],t.concat(e))}return[e,t]}function Ac(e,t,n){let a,l,s=13===e.type?e.props:e.arguments[2],i=[];if(s&&!he(s)&&14===s.type){const e=Nc(s);s=e[0],i=e[1],l=i[i.length-1]}if(null==s||he(s))a=Zr([t]);else if(14===s.type){const e=s.arguments[0];he(e)||15!==e.type?s.callee===Fr?a=nc(n.helper(Pr),[Zr([t]),s]):s.arguments.unshift(Zr([t])):e.properties.unshift(t),!a&&(a=s)}else if(15===s.type){let e=!1;if(4===t.key.type){const n=t.key.content;e=s.properties.some((e=>4===e.key.type&&e.key.content===n))}e||s.properties.unshift(t),a=s}else a=nc(n.helper(Pr),[Zr([t]),s]),l&&l.callee===Ur&&(l=i[i.length-2]);13===e.type?l?l.arguments[0]=a:e.props=a:l?l.arguments[0]=a:e.arguments[2]=a}function Tc(e,t){return`_${t}_${e.replace(/[^\w]/g,((t,n)=>"-"===t?"_":e.charCodeAt(n).toString()))}`}function Ec(e,{helper:t,removeHelper:n,inSSR:a}){e.isBlock||(e.isBlock=!0,n($c(a,e.isComponent)),t(fr),t(Sc(a,e.isComponent)))}const Pc=/&(gt|lt|amp|apos|quot);/g,Ic={gt:">",lt:"<",amp:"&",apos:"'",quot:'"'},Mc={delimiters:["{{","}}"],getNamespace:()=>0,getTextMode:()=>0,isVoidTag:ne,isPreTag:ne,isCustomElement:ne,decodeEntities:e=>e.replace(Pc,((e,t)=>Ic[t])),onError:ir,onWarn:or,comments:!1};function Oc(e,t,n){const a=Jc(n),l=a?a.ns:0,s=[];for(;!eu(e,t,n);){const i=e.source;let o;if(0===t||1===t)if(!e.inVPre&&Yc(i,e.options.delimiters[0]))o=qc(e,t);else if(0===t&&"<"===i[0])if(1===i.length);else if("!"===i[1])o=Yc(i,"\x3c!--")?Rc(e):Yc(i,"<!DOCTYPE")?Dc(e):Yc(i,"<![CDATA[")&&0!==l?Fc(e,n):Dc(e);else if("/"===i[1])if(2===i.length);else{if(">"===i[2]){Xc(e,3);continue}if(/[a-z]/i.test(i[2])){zc(e,1,a);continue}o=Dc(e)}else/[a-z]/i.test(i[1])?o=jc(e,n):"?"===i[1]&&(o=Dc(e));if(o||(o=Hc(e,t)),ue(o))for(let e=0;e<o.length;e++)Uc(s,o[e]);else Uc(s,o)}let i=!1;if(2!==t&&1!==t){const t="preserve"!==e.options.whitespace;for(let n=0;n<s.length;n++){const a=s[n];if(e.inPre||2!==a.type)3!==a.type||e.options.comments||(i=!0,s[n]=null);else if(/[^\t\r\n\f ]/.test(a.content))t&&(a.content=a.content.replace(/[\t\r\n\f ]+/g," "));else{const e=s[n-1],l=s[n+1];!e||!l||t&&(3===e.type||3===l.type||1===e.type&&1===l.type&&/[\r\n]/.test(a.content))?(i=!0,s[n]=null):a.content=" "}}if(e.inPre&&a&&e.options.isPreTag(a.tag)){const e=s[0];e&&2===e.type&&(e.content=e.content.replace(/^\r?\n/,""))}}return i?s.filter(Boolean):s}function Uc(e,t){if(2===t.type){const n=Jc(e);if(n&&2===n.type&&n.loc.end.offset===t.loc.start.offset)return n.content+=t.content,n.loc.end=t.loc.end,void(n.loc.source+=t.loc.source)}e.push(t)}function Fc(e,t){Xc(e,9);const n=Oc(e,3,t);return 0===e.source.length||Xc(e,3),n}function Rc(e){const t=Kc(e);let n;const a=/--(\!)?>/.exec(e.source);if(a){n=e.source.slice(4,a.index);const t=e.source.slice(0,a.index);let l=1,s=0;for(;-1!==(s=t.indexOf("\x3c!--",l));)Xc(e,s-l+1),l=s+1;Xc(e,a.index+a[0].length-l+1)}else n=e.source.slice(4),Xc(e,e.source.length);return{type:3,content:n,loc:Wc(e,t)}}function Dc(e){const t=Kc(e),n="?"===e.source[1]?1:2;let a;const l=e.source.indexOf(">");return-1===l?(a=e.source.slice(n),Xc(e,e.source.length)):(a=e.source.slice(n,l),Xc(e,l+1)),{type:3,content:a,loc:Wc(e,t)}}function jc(e,t){const n=e.inPre,a=e.inVPre,l=Jc(t),s=zc(e,0,l),i=e.inPre&&!n,o=e.inVPre&&!a;if(s.isSelfClosing||e.options.isVoidTag(s.tag))return i&&(e.inPre=!1),o&&(e.inVPre=!1),s;t.push(s);const r=e.options.getTextMode(s,l),c=Oc(e,r,t);if(t.pop(),s.children=c,tu(e.source,s.tag))zc(e,1,l);else if(0===e.source.length&&"script"===s.tag.toLowerCase()){const e=c[0];e&&Yc(e.loc.source,"\x3c!--")}return s.loc=Wc(e,s.loc.start),i&&(e.inPre=!1),o&&(e.inVPre=!1),s}const Lc=F("if,else,else-if,for,slot");function zc(e,t,n){const a=Kc(e),l=/^<\/?([a-z][^\t\r\n\f />]*)/i.exec(e.source),s=l[1],i=e.options.getNamespace(s,n);Xc(e,l[0].length),Zc(e);const o=Kc(e),r=e.source;e.options.isPreTag(s)&&(e.inPre=!0);let c=Bc(e,t);0===t&&!e.inVPre&&c.some((e=>7===e.type&&"pre"===e.name))&&(e.inVPre=!0,ie(e,o),e.source=r,c=Bc(e,t).filter((e=>"v-pre"!==e.name)));let u=!1;if(0===e.source.length||(u=Yc(e.source,"/>"),Xc(e,u?2:1)),1===t)return;let d=0;return e.inVPre||("slot"===s?d=2:"template"===s?c.some((e=>7===e.type&&Lc(e.name)))&&(d=3):function(e,t,n){const a=n.options;if(a.isCustomElement(e))return!1;if("component"===e||/^[A-Z]/.test(e)||oc(e)||a.isBuiltInComponent&&a.isBuiltInComponent(e)||a.isNativeTag&&!a.isNativeTag(e))return!0;for(let e=0;e<t.length;e++){const n=t[e];if(6===n.type){if("is"===n.name&&n.value&&n.value.content.startsWith("vue:"))return!0}else{if("is"===n.name)return!0;"bind"===n.name&&bc(n.arg,"is")}}}(s,c,e)&&(d=1)),{type:1,ns:i,tag:s,tagType:d,props:c,isSelfClosing:u,children:[],loc:Wc(e,a),codegenNode:void 0}}function Bc(e,t){const n=[],a=new Set;for(;e.source.length>0&&!Yc(e.source,">")&&!Yc(e.source,"/>");){if(Yc(e.source,"/")){Xc(e,1),Zc(e);continue}const l=Vc(e,a);6===l.type&&l.value&&"class"===l.name&&(l.value.content=l.value.content.replace(/\s+/g," ").trim()),0===t&&n.push(l),/^[^\t\r\n\f />]/.test(e.source),Zc(e)}return n}function Vc(e,t){const n=Kc(e),a=/^[^\t\r\n\f />][^\t\r\n\f />=]*/.exec(e.source)[0];t.has(a),t.add(a);{const e=/["'<]/g;for(;e.exec(a););}let l;Xc(e,a.length),/^[\t\r\n\f ]*=/.test(e.source)&&(Zc(e),Xc(e,1),Zc(e),l=function(e){const t=Kc(e);let n;const a=e.source[0],l='"'===a||"'"===a;if(l){Xc(e,1);const t=e.source.indexOf(a);-1===t?n=Gc(e,e.source.length,4):(n=Gc(e,t,4),Xc(e,1))}else{const t=/^[^\t\r\n\f >]+/.exec(e.source);if(!t)return;const a=/["'<=`]/g;for(;a.exec(t[0]););n=Gc(e,t[0].length,4)}return{content:n,isQuoted:l,loc:Wc(e,t)}}(e));const s=Wc(e,n);if(!e.inVPre&&/^(v-[A-Za-z0-9-]|:|\.|@|#)/.test(a)){const t=/(?:^v-([a-z0-9-]+))?(?:(?::|^\.|^@|^#)(\[[^\]]+\]|[^\.]+))?(.+)?$/i.exec(a);let i,o=Yc(a,"."),r=t[1]||(o||Yc(a,":")?"bind":Yc(a,"@")?"on":"slot");if(t[2]){const l="slot"===r,s=a.lastIndexOf(t[2]),o=Wc(e,Qc(e,n,s),Qc(e,n,s+t[2].length+(l&&t[3]||"").length));let c=t[2],u=!0;c.startsWith("[")?(u=!1,c=c.endsWith("]")?c.slice(1,c.length-1):c.slice(1)):l&&(c+=t[3]||""),i={type:4,content:c,isStatic:u,constType:u?3:0,loc:o}}if(l&&l.isQuoted){const e=l.loc;e.start.offset++,e.start.column++,e.end=hc(e.start,l.content),e.source=e.source.slice(1,-1)}const c=t[3]?t[3].slice(1).split("."):[];return o&&c.push("prop"),{type:7,name:r,exp:l&&{type:4,content:l.content,isStatic:!1,constType:0,loc:l.loc},arg:i,modifiers:c,loc:s}}return!e.inVPre&&Yc(a,"v-"),{type:6,name:a,value:l&&{type:2,content:l.content,loc:l.loc},loc:s}}function qc(e,t){const[n,a]=e.options.delimiters,l=e.source.indexOf(a,n.length);if(-1===l)return;const s=Kc(e);Xc(e,n.length);const i=Kc(e),o=Kc(e),r=l-n.length,c=e.source.slice(0,r),u=Gc(e,r,t),d=u.trim(),p=u.indexOf(d);return p>0&&mc(i,c,p),mc(o,c,r-(u.length-d.length-p)),Xc(e,a.length),{type:5,content:{type:4,isStatic:!1,constType:0,content:d,loc:Wc(e,i,o)},loc:Wc(e,s)}}function Hc(e,t){const n=3===t?["]]>"]:["<",e.options.delimiters[0]];let a=e.source.length;for(let t=0;t<n.length;t++){const l=e.source.indexOf(n[t],1);-1!==l&&a>l&&(a=l)}const l=Kc(e);return{type:2,content:Gc(e,a,t),loc:Wc(e,l)}}function Gc(e,t,n){const a=e.source.slice(0,t);return Xc(e,t),2!==n&&3!==n&&a.includes("&")?e.options.decodeEntities(a,4===n):a}function Kc(e){const{column:t,line:n,offset:a}=e;return{column:t,line:n,offset:a}}function Wc(e,t,n){return{start:t,end:n=n||Kc(e),source:e.originalSource.slice(t.offset,n.offset)}}function Jc(e){return e[e.length-1]}function Yc(e,t){return e.startsWith(t)}function Xc(e,t){const{source:n}=e;mc(e,n,t),e.source=n.slice(t)}function Zc(e){const t=/^[\t\r\n\f ]+/.exec(e.source);t&&Xc(e,t[0].length)}function Qc(e,t,n){return hc(t,e.originalSource.slice(t.offset,n),n)}function eu(e,t,n){const a=e.source;switch(t){case 0:if(Yc(a,"</"))for(let e=n.length-1;e>=0;--e)if(tu(a,n[e].tag))return!0;break;case 1:case 2:{const e=Jc(n);if(e&&tu(a,e.tag))return!0;break}case 3:if(Yc(a,"]]>"))return!0}return!a}function tu(e,t){return Yc(e,"</")&&e.slice(2,2+t.length).toLowerCase()===t.toLowerCase()&&/[\t\r\n\f />]/.test(e[2+t.length]||">")}function nu(e,t){lu(e,t,au(e,e.children[0]))}function au(e,t){const{children:n}=e;return 1===n.length&&1===t.type&&!kc(t)}function lu(e,t,n=!1){const{children:a}=e,l=a.length;let s=0;for(let e=0;e<a.length;e++){const l=a[e];if(1===l.type&&0===l.tagType){const e=n?0:su(l,t);if(e>0){if(e>=2){l.codegenNode.patchFlag="-1",l.codegenNode=t.hoist(l.codegenNode),s++;continue}}else{const e=l.codegenNode;if(13===e.type){const n=uu(e);if((!n||512===n||1===n)&&ru(l,t)>=2){const n=cu(l);n&&(e.props=t.hoist(n))}e.dynamicProps&&(e.dynamicProps=t.hoist(e.dynamicProps))}}}else 12===l.type&&su(l.content,t)>=2&&(l.codegenNode=t.hoist(l.codegenNode),s++);if(1===l.type){const e=1===l.tagType;e&&t.scopes.vSlot++,lu(l,t),e&&t.scopes.vSlot--}else if(11===l.type)lu(l,t,1===l.children.length);else if(9===l.type)for(let e=0;e<l.branches.length;e++)lu(l.branches[e],t,1===l.branches[e].children.length)}s&&t.transformHoist&&t.transformHoist(a,t,e),s&&s===l&&1===e.type&&0===e.tagType&&e.codegenNode&&13===e.codegenNode.type&&ue(e.codegenNode.children)&&(e.codegenNode.children=t.hoist(Xr(e.codegenNode.children)))}function su(e,t){const{constantCache:n}=t;switch(e.type){case 1:if(0!==e.tagType)return 0;const a=n.get(e);if(void 0!==a)return a;const l=e.codegenNode;if(13!==l.type)return 0;if(l.isBlock&&"svg"!==e.tag&&"foreignObject"!==e.tag)return 0;if(uu(l))return n.set(e,0),0;{let a=3;const s=ru(e,t);if(0===s)return n.set(e,0),0;s<a&&(a=s);for(let l=0;l<e.children.length;l++){const s=su(e.children[l],t);if(0===s)return n.set(e,0),0;s<a&&(a=s)}if(a>1)for(let l=0;l<e.props.length;l++){const s=e.props[l];if(7===s.type&&"bind"===s.name&&s.exp){const l=su(s.exp,t);if(0===l)return n.set(e,0),0;l<a&&(a=l)}}if(l.isBlock){for(let t=0;t<e.props.length;t++)if(7===e.props[t].type)return n.set(e,0),0;t.removeHelper(fr),t.removeHelper(Sc(t.inSSR,l.isComponent)),l.isBlock=!1,t.helper($c(t.inSSR,l.isComponent))}return n.set(e,a),a}case 2:case 3:return 3;case 9:case 11:case 10:default:return 0;case 5:case 12:return su(e.content,t);case 4:return e.constType;case 8:let s=3;for(let n=0;n<e.children.length;n++){const a=e.children[n];if(he(a)||me(a))continue;const l=su(a,t);if(0===l)return 0;l<s&&(s=l)}return s}}const iu=new Set([Ir,Mr,Or,Ur]);function ou(e,t){if(14===e.type&&!he(e.callee)&&iu.has(e.callee)){const n=e.arguments[0];if(4===n.type)return su(n,t);if(14===n.type)return ou(n,t)}return 0}function ru(e,t){let n=3;const a=cu(e);if(a&&15===a.type){const{properties:e}=a;for(let a=0;a<e.length;a++){const{key:l,value:s}=e[a],i=su(l,t);if(0===i)return i;let o;if(i<n&&(n=i),o=4===s.type?su(s,t):14===s.type?ou(s,t):0,0===o)return o;o<n&&(n=o)}}return n}function cu(e){const t=e.codegenNode;if(13===t.type)return t.props}function uu(e){const t=e.patchFlag;return t?parseInt(t,10):void 0}function du(e,t){const n=function(e,{filename:t="",prefixIdentifiers:n=!1,hoistStatic:a=!1,cacheHandlers:l=!1,nodeTransforms:s=[],directiveTransforms:i={},transformHoist:o=null,isBuiltInComponent:r=te,isCustomElement:c=te,expressionPlugins:u=[],scopeId:d=null,slotted:p=!0,ssr:_=!1,inSSR:f=!1,ssrCssVars:h="",bindingMetadata:m=Q,inline:g=!1,isTS:v=!1,onError:b=ir,onWarn:y=or,compatConfig:w}){const x=t.replace(/\?.*$/,"").match(/([^/\\]+)\.\w+$/),k={selfName:x&&Ee(Ne(x[1])),prefixIdentifiers:n,hoistStatic:a,cacheHandlers:l,nodeTransforms:s,directiveTransforms:i,transformHoist:o,isBuiltInComponent:r,isCustomElement:c,expressionPlugins:u,scopeId:d,slotted:p,ssr:_,inSSR:f,ssrCssVars:h,bindingMetadata:m,inline:g,isTS:v,onError:b,onWarn:y,compatConfig:w,root:e,helpers:new Map,components:new Set,directives:new Set,hoists:[],imports:[],constantCache:new Map,temps:0,cached:0,identifiers:Object.create(null),scopes:{vFor:0,vSlot:0,vPre:0,vOnce:0},parent:null,currentNode:e,childIndex:0,inVOnce:!1,helper(e){const t=k.helpers.get(e)||0;return k.helpers.set(e,t+1),e},removeHelper(e){const t=k.helpers.get(e);if(t){const n=t-1;n?k.helpers.set(e,n):k.helpers.delete(e)}},helperString:e=>`_${Wr[k.helper(e)]}`,replaceNode(e){k.parent.children[k.childIndex]=k.currentNode=e},removeNode(e){const t=e?k.parent.children.indexOf(e):k.currentNode?k.childIndex:-1;e&&e!==k.currentNode?k.childIndex>t&&(k.childIndex--,k.onNodeRemoved()):(k.currentNode=null,k.onNodeRemoved()),k.parent.children.splice(t,1)},onNodeRemoved:()=>{},addIdentifiers(e){},removeIdentifiers(e){},hoist(e){he(e)&&(e=ec(e)),k.hoists.push(e);const t=ec(`_hoisted_${k.hoists.length}`,!1,e.loc,2);return t.hoisted=e,t},cache:(e,t=!1)=>function(e,t,n=!1){return{type:20,index:e,value:t,isVNode:n,loc:Jr}}(k.cached++,e,t)};return k}(e,t);pu(e,n),t.hoistStatic&&nu(e,n),t.ssr||function(e,t){const{helper:n}=t,{children:a}=e;if(1===a.length){const n=a[0];if(au(e,n)&&n.codegenNode){const a=n.codegenNode;13===a.type&&Ec(a,t),e.codegenNode=a}else e.codegenNode=n}else if(a.length>1){let a=64;e.codegenNode=Yr(t,n(cr),void 0,e.children,a+"",void 0,void 0,!0,void 0,!1)}}(e,n),e.helpers=[...n.helpers.keys()],e.components=[...n.components],e.directives=[...n.directives],e.imports=n.imports,e.hoists=n.hoists,e.temps=n.temps,e.cached=n.cached}function pu(e,t){t.currentNode=e;const{nodeTransforms:n}=t,a=[];for(let l=0;l<n.length;l++){const s=n[l](e,t);if(s&&(ue(s)?a.push(...s):a.push(s)),!t.currentNode)return;e=t.currentNode}switch(e.type){case 3:t.ssr||t.helper(br);break;case 5:t.ssr||t.helper(Er);break;case 9:for(let n=0;n<e.branches.length;n++)pu(e.branches[n],t);break;case 10:case 11:case 1:case 0:!function(e,t){let n=0;const a=()=>{n--};for(;n<e.children.length;n++){const l=e.children[n];he(l)||(t.parent=e,t.childIndex=n,t.onNodeRemoved=a,pu(l,t))}}(e,t)}t.currentNode=e;let l=a.length;for(;l--;)a[l]()}function _u(e,t){const n=he(e)?t=>t===e:t=>e.test(t);return(e,a)=>{if(1===e.type){const{props:l}=e;if(3===e.tagType&&l.some(wc))return;const s=[];for(let i=0;i<l.length;i++){const o=l[i];if(7===o.type&&n(o.name)){l.splice(i,1),i--;const n=t(e,o,a);n&&s.push(n)}}return s}}}const fu=e=>`${Wr[e]}: _${Wr[e]}`;function hu(e,t,{helper:n,push:a,newline:l,isTS:s}){const i=n("component"===t?xr:$r);for(let n=0;n<e.length;n++){let o=e[n];const r=o.endsWith("__self");r&&(o=o.slice(0,-6)),a(`const ${Tc(o,t)} = ${i}(${JSON.stringify(o)}${r?", true":""})${s?"!":""}`),n<e.length-1&&l()}}function mu(e,t){const n=e.length>3||!1;t.push("["),n&&t.indent(),gu(e,t,n),n&&t.deindent(),t.push("]")}function gu(e,t,n=!1,a=!0){const{push:l,newline:s}=t;for(let i=0;i<e.length;i++){const o=e[i];he(o)?l(o):ue(o)?mu(o,t):vu(o,t),i<e.length-1&&(n?(a&&l(","),s()):a&&l(", "))}}function vu(e,t){if(he(e))t.push(e);else if(me(e))t.push(t.helper(e));else switch(e.type){case 1:case 9:case 11:case 12:vu(e.codegenNode,t);break;case 2:!function(e,t){t.push(JSON.stringify(e.content),e)}(e,t);break;case 4:bu(e,t);break;case 5:!function(e,t){const{push:n,helper:a,pure:l}=t;l&&n("/*#__PURE__*/"),n(`${a(Er)}(`),vu(e.content,t),n(")")}(e,t);break;case 8:yu(e,t);break;case 3:!function(e,t){const{push:n,helper:a,pure:l}=t;l&&n("/*#__PURE__*/"),n(`${a(br)}(${JSON.stringify(e.content)})`,e)}(e,t);break;case 13:!function(e,t){const{push:n,helper:a,pure:l}=t,{tag:s,props:i,children:o,patchFlag:r,dynamicProps:c,directives:u,isBlock:d,disableTracking:p,isComponent:_}=e;u&&n(a(Cr)+"("),d&&n(`(${a(fr)}(${p?"true":""}), `),l&&n("/*#__PURE__*/");n(a(d?Sc(t.inSSR,_):$c(t.inSSR,_))+"(",e),gu(function(e){let t=e.length;for(;t--&&null==e[t];);return e.slice(0,t+1).map((e=>e||"null"))}([s,i,o,r,c]),t),n(")"),d&&n(")"),u&&(n(", "),vu(u,t),n(")"))}(e,t);break;case 14:!function(e,t){const{push:n,helper:a,pure:l}=t,s=he(e.callee)?e.callee:a(e.callee);l&&n("/*#__PURE__*/"),n(s+"(",e),gu(e.arguments,t),n(")")}(e,t);break;case 15:!function(e,t){const{push:n,indent:a,deindent:l,newline:s}=t,{properties:i}=e;if(!i.length)return void n("{}",e);const o=i.length>1||!1;n(o?"{":"{ "),o&&a();for(let e=0;e<i.length;e++){const{key:a,value:l}=i[e];wu(a,t),n(": "),vu(l,t),e<i.length-1&&(n(","),s())}o&&l(),n(o?"}":" }")}(e,t);break;case 17:!function(e,t){mu(e.elements,t)}(e,t);break;case 18:!function(e,t){const{push:n,indent:a,deindent:l}=t,{params:s,returns:i,body:o,newline:r,isSlot:c}=e;c&&n(`_${Wr[Vr]}(`),n("(",e),ue(s)?gu(s,t):s&&vu(s,t),n(") => "),(r||o)&&(n("{"),a()),i?(r&&n("return "),ue(i)?mu(i,t):vu(i,t)):o&&vu(o,t),(r||o)&&(l(),n("}")),c&&n(")")}(e,t);break;case 19:!function(e,t){const{test:n,consequent:a,alternate:l,newline:s}=e,{push:i,indent:o,deindent:r,newline:c}=t;if(4===n.type){const e=!cc(n.content);e&&i("("),bu(n,t),e&&i(")")}else i("("),vu(n,t),i(")");s&&o(),t.indentLevel++,s||i(" "),i("? "),vu(a,t),t.indentLevel--,s&&c(),s||i(" "),i(": ");const u=19===l.type;u||t.indentLevel++,vu(l,t),u||t.indentLevel--,s&&r(!0)}(e,t);break;case 20:!function(e,t){const{push:n,helper:a,indent:l,deindent:s,newline:i}=t;n(`_cache[${e.index}] || (`),e.isVNode&&(l(),n(`${a(Lr)}(-1),`),i()),n(`_cache[${e.index}] = `),vu(e.value,t),e.isVNode&&(n(","),i(),n(`${a(Lr)}(1),`),i(),n(`_cache[${e.index}]`),s()),n(")")}(e,t);break;case 21:gu(e.body,t,!0,!1)}}function bu(e,t){const{content:n,isStatic:a}=e;t.push(a?JSON.stringify(n):n,e)}function yu(e,t){for(let n=0;n<e.children.length;n++){const a=e.children[n];he(a)?t.push(a):vu(a,t)}}function wu(e,t){const{push:n}=t;8===e.type?(n("["),yu(e,t),n("]")):e.isStatic?n(cc(e.content)?e.content:JSON.stringify(e.content),e):n(`[${e.content}]`,e)}const xu=_u(/^(if|else|else-if)$/,((e,t,n)=>function(e,t,n,a){if("else"===t.name||t.exp&&t.exp.content.trim()||(t.exp=ec("true",!1,t.exp?t.exp.loc:e.loc)),"if"===t.name){const l=ku(e,t),s={type:9,loc:e.loc,branches:[l]};if(n.replaceNode(s),a)return a(s,l,!0)}else{const l=n.parent.children;let s=l.indexOf(e);for(;s-- >=-1;){const i=l[s];if(!i||2!==i.type||i.content.trim().length){if(i&&9===i.type){n.removeNode();const l=ku(e,t);i.branches.push(l);const s=a&&a(i,l,!1);pu(l,n),s&&s(),n.currentNode=null}break}n.removeNode(i)}}}(e,t,n,((e,t,a)=>{const l=n.parent.children;let s=l.indexOf(e),i=0;for(;s-- >=0;){const e=l[s];e&&9===e.type&&(i+=e.branches.length)}return()=>{if(a)e.codegenNode=$u(t,i,n);else{const a=function(e){for(;;)if(19===e.type){if(19!==e.alternate.type)return e;e=e.alternate}else 20===e.type&&(e=e.value)}(e.codegenNode);a.alternate=$u(t,i+e.branches.length-1,n)}}}))));function ku(e,t){const n=3===e.tagType;return{type:10,loc:e.loc,condition:"else"===t.name?void 0:t.exp,children:n&&!gc(e,"for")?e.children:[e],userKey:vc(e,"key"),isTemplateIf:n}}function $u(e,t,n){return e.condition?lc(e.condition,Su(e,t,n),nc(n.helper(br),['""',"true"])):Su(e,t,n)}function Su(e,t,n){const{helper:a}=n,l=Qr("key",ec(`${t}`,!1,Jr,2)),{children:s}=e,i=s[0];if(1!==s.length||1!==i.type){if(1===s.length&&11===i.type){const e=i.codegenNode;return Ac(e,l,n),e}{let t=64;return Yr(n,a(cr),Zr([l]),s,t+"",void 0,void 0,!0,!1,!1,e.loc)}}{const e=i.codegenNode,t=14===(o=e).type&&o.callee===Gr?o.arguments[1].returns:o;return 13===t.type&&Ec(t,n),Ac(t,l,n),e}var o}const Cu=_u("for",((e,t,n)=>{const{helper:a,removeHelper:l}=n;return function(e,t,n,a){if(!t.exp)return;const l=Eu(t.exp);if(!l)return;const{scopes:s}=n,{source:i,value:o,key:r,index:c}=l,u={type:11,loc:t.loc,source:i,valueAlias:o,keyAlias:r,objectIndexAlias:c,parseResult:l,children:xc(e)?e.children:[e]};n.replaceNode(u),s.vFor++;const d=a&&a(u);return()=>{s.vFor--,d&&d()}}(e,t,n,(t=>{const s=nc(a(Nr),[t.source]),i=xc(e),o=gc(e,"memo"),r=vc(e,"key"),c=r&&(6===r.type?ec(r.value.content,!0):r.exp),u=r?Qr("key",c):null,d=4===t.source.type&&t.source.constType>0,p=d?64:r?128:256;return t.codegenNode=Yr(n,a(cr),void 0,s,p+"",void 0,void 0,!0,!d,!1,e.loc),()=>{let r;const{children:p}=t,_=1!==p.length||1!==p[0].type,f=kc(e)?e:i&&1===e.children.length&&kc(e.children[0])?e.children[0]:null;if(f?(r=f.codegenNode,i&&u&&Ac(r,u,n)):_?r=Yr(n,a(cr),u?Zr([u]):void 0,e.children,"64",void 0,void 0,!0,void 0,!1):(r=p[0].codegenNode,i&&u&&Ac(r,u,n),r.isBlock!==!d&&(r.isBlock?(l(fr),l(Sc(n.inSSR,r.isComponent))):l($c(n.inSSR,r.isComponent))),r.isBlock=!d,r.isBlock?(a(fr),a(Sc(n.inSSR,r.isComponent))):a($c(n.inSSR,r.isComponent))),o){const e=ac(Iu(t.parseResult,[ec("_cached")]));e.body={type:21,body:[tc(["const _memo = (",o.exp,")"]),tc(["if (_cached",...c?[" && _cached.key === ",c]:[],` && ${n.helperString(Kr)}(_cached, _memo)) return _cached`]),tc(["const _item = ",r]),ec("_item.memo = _memo"),ec("return _item")],loc:Jr},s.arguments.push(e,ec("_cache"),ec(String(n.cached++)))}else s.arguments.push(ac(Iu(t.parseResult),r,!0))}}))})),Nu=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,Au=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,Tu=/^\(|\)$/g;function Eu(e,t){const n=e.loc,a=e.content,l=a.match(Nu);if(!l)return;const[,s,i]=l,o={source:Pu(n,i.trim(),a.indexOf(i,s.length)),value:void 0,key:void 0,index:void 0};let r=s.trim().replace(Tu,"").trim();const c=s.indexOf(r),u=r.match(Au);if(u){r=r.replace(Au,"").trim();const e=u[1].trim();let t;if(e&&(t=a.indexOf(e,c+r.length),o.key=Pu(n,e,t)),u[2]){const l=u[2].trim();l&&(o.index=Pu(n,l,a.indexOf(l,o.key?t+e.length:c+r.length)))}}return r&&(o.value=Pu(n,r,c)),o}function Pu(e,t,n){return ec(t,!1,fc(e,n,t.length))}function Iu({value:e,key:t,index:n},a=[]){return function(e){let t=e.length;for(;t--&&!e[t];);return e.slice(0,t+1).map(((e,t)=>e||ec("_".repeat(t+1),!1)))}([e,t,n,...a])}const Mu=ec("undefined",!1),Ou=(e,t)=>{if(1===e.type&&(1===e.tagType||3===e.tagType)){if(gc(e,"slot"))return t.scopes.vSlot++,()=>{t.scopes.vSlot--}}},Uu=(e,t,n)=>ac(e,t,!1,!0,t.length?t[0].loc:n);function Fu(e,t,n=Uu){t.helper(Vr);const{children:a,loc:l}=e,s=[],i=[];let o=t.scopes.vSlot>0||t.scopes.vFor>0;const r=gc(e,"slot",!0);if(r){const{arg:e,exp:t}=r;e&&!sc(e)&&(o=!0),s.push(Qr(e||ec("default",!0),n(t,a,l)))}let c=!1,u=!1;const d=[],p=new Set;for(let e=0;e<a.length;e++){const l=a[e];let _;if(!xc(l)||!(_=gc(l,"slot",!0))){3!==l.type&&d.push(l);continue}if(r)break;c=!0;const{children:f,loc:h}=l,{arg:m=ec("default",!0),exp:g}=_;let v;sc(m)?v=m?m.content:"default":o=!0;const b=n(g,f,h);let y,w,x;if(y=gc(l,"if"))o=!0,i.push(lc(y.exp,Ru(m,b),Mu));else if(w=gc(l,/^else(-if)?$/,!0)){let t,n=e;for(;n--&&(t=a[n],3===t.type););if(t&&xc(t)&&gc(t,"if")){a.splice(e,1),e--;let t=i[i.length-1];for(;19===t.alternate.type;)t=t.alternate;t.alternate=w.exp?lc(w.exp,Ru(m,b),Mu):Ru(m,b)}}else if(x=gc(l,"for")){o=!0;const e=x.parseResult||Eu(x.exp);e&&i.push(nc(t.helper(Nr),[e.source,ac(Iu(e),Ru(m,b),!0)]))}else{if(v){if(p.has(v))continue;p.add(v),"default"===v&&(u=!0)}s.push(Qr(m,b))}}if(!r){const e=(e,t)=>Qr("default",n(e,t,l));c?d.length&&d.some((e=>ju(e)))&&(u||s.push(e(void 0,d))):s.push(e(void 0,a))}const _=o?2:Du(e.children)?3:1;let f=Zr(s.concat(Qr("_",ec(_+"",!1))),l);return i.length&&(f=nc(t.helper(Tr),[f,Xr(i)])),{slots:f,hasDynamicSlots:o}}function Ru(e,t){return Zr([Qr("name",e),Qr("fn",t)])}function Du(e){for(let t=0;t<e.length;t++){const n=e[t];switch(n.type){case 1:if(2===n.tagType||Du(n.children))return!0;break;case 9:if(Du(n.branches))return!0;break;case 10:case 11:if(Du(n.children))return!0}}return!1}function ju(e){return 2!==e.type&&12!==e.type||(2===e.type?!!e.content.trim():ju(e.content))}const Lu=new WeakMap,zu=(e,t)=>function(){if(1!==(e=t.currentNode).type||0!==e.tagType&&1!==e.tagType)return;const{tag:n,props:a}=e,l=1===e.tagType;let s=l?function(e,t,n=!1){let{tag:a}=e;const l=Hu(a),s=vc(e,"is");if(s)if(l){const e=6===s.type?s.value&&ec(s.value.content,!0):s.exp;if(e)return nc(t.helper(kr),[e])}else 6===s.type&&s.value.content.startsWith("vue:")&&(a=s.value.content.slice(4));const i=!l&&gc(e,"is");if(i&&i.exp)return nc(t.helper(kr),[i.exp]);const o=oc(a)||t.isBuiltInComponent(a);return o?(n||t.helper(o),o):(t.helper(xr),t.components.add(a),Tc(a,"component"))}(e,t):`"${n}"`;const i=ge(s)&&s.callee===kr;let o,r,c,u,d,p,_=0,f=i||s===ur||s===dr||!l&&("svg"===n||"foreignObject"===n);if(a.length>0){const n=Bu(e,t,void 0,l,i);o=n.props,_=n.patchFlag,d=n.dynamicPropNames;const a=n.directives;p=a&&a.length?Xr(a.map((e=>function(e,t){const n=[],a=Lu.get(e);a?n.push(t.helperString(a)):(t.helper($r),t.directives.add(e.name),n.push(Tc(e.name,"directive")));const{loc:l}=e;if(e.exp&&n.push(e.exp),e.arg&&(e.exp||n.push("void 0"),n.push(e.arg)),Object.keys(e.modifiers).length){e.arg||(e.exp||n.push("void 0"),n.push("void 0"));const t=ec("true",!1,l);n.push(Zr(e.modifiers.map((e=>Qr(e,t))),l))}return Xr(n,e.loc)}(e,t)))):void 0,n.shouldUseBlock&&(f=!0)}if(e.children.length>0)if(s===pr&&(f=!0,_|=1024),l&&s!==ur&&s!==pr){const{slots:n,hasDynamicSlots:a}=Fu(e,t);r=n,a&&(_|=1024)}else if(1===e.children.length&&s!==ur){const n=e.children[0],a=n.type,l=5===a||8===a;l&&0===su(n,t)&&(_|=1),r=l||2===a?n:e.children}else r=e.children;0!==_&&(c=String(_),d&&d.length&&(u=function(e){let t="[";for(let n=0,a=e.length;n<a;n++)t+=JSON.stringify(e[n]),n<a-1&&(t+=", ");return t+"]"}(d))),e.codegenNode=Yr(t,s,o,r,c,u,p,!!f,!1,l,e.loc)};function Bu(e,t,n=e.props,a,l,s=!1){const{tag:i,loc:o,children:r}=e;let c=[];const u=[],d=[],p=r.length>0;let _=!1,f=0,h=!1,m=!1,g=!1,v=!1,b=!1,y=!1;const w=[],x=({key:e,value:n})=>{if(sc(e)){const s=e.content,i=le(s);if(!i||a&&!l||"onclick"===s.toLowerCase()||"onUpdate:modelValue"===s||ke(s)||(v=!0),i&&ke(s)&&(y=!0),20===n.type||(4===n.type||8===n.type)&&su(n,t)>0)return;"ref"===s?h=!0:"class"===s?m=!0:"style"===s?g=!0:"key"===s||w.includes(s)||w.push(s),!a||"class"!==s&&"style"!==s||w.includes(s)||w.push(s)}else b=!0};for(let a=0;a<n.length;a++){const l=n[a];if(6===l.type){const{loc:e,name:n,value:a}=l;let s=!0;if("ref"===n&&(h=!0,t.scopes.vFor>0&&c.push(Qr(ec("ref_for",!0),ec("true")))),"is"===n&&(Hu(i)||a&&a.content.startsWith("vue:")))continue;c.push(Qr(ec(n,!0,fc(e,0,n.length)),ec(a?a.content:"",s,a?a.loc:e)))}else{const{name:n,arg:a,exp:r,loc:f}=l,h="bind"===n,m="on"===n;if("slot"===n)continue;if("once"===n||"memo"===n)continue;if("is"===n||h&&bc(a,"is")&&Hu(i))continue;if(m&&s)continue;if((h&&bc(a,"key")||m&&p&&bc(a,"vue:before-update"))&&(_=!0),h&&bc(a,"ref")&&t.scopes.vFor>0&&c.push(Qr(ec("ref_for",!0),ec("true"))),!a&&(h||m)){b=!0,r&&(c.length&&(u.push(Zr(Vu(c),o)),c=[]),u.push(h?r:{type:14,loc:f,callee:t.helper(Fr),arguments:[r]}));continue}const g=t.directiveTransforms[n];if(g){const{props:n,needRuntime:a}=g(l,e,t);!s&&n.forEach(x),c.push(...n),a&&(d.push(l),me(a)&&Lu.set(l,a))}else $e(n)||(d.push(l),p&&(_=!0))}}let k;if(u.length?(c.length&&u.push(Zr(Vu(c),o)),k=u.length>1?nc(t.helper(Pr),u,o):u[0]):c.length&&(k=Zr(Vu(c),o)),b?f|=16:(m&&!a&&(f|=2),g&&!a&&(f|=4),w.length&&(f|=8),v&&(f|=32)),_||0!==f&&32!==f||!(h||y||d.length>0)||(f|=512),!t.inSSR&&k)switch(k.type){case 15:let e=-1,n=-1,a=!1;for(let t=0;t<k.properties.length;t++){const l=k.properties[t].key;sc(l)?"class"===l.content?e=t:"style"===l.content&&(n=t):l.isHandlerKey||(a=!0)}const l=k.properties[e],s=k.properties[n];a?k=nc(t.helper(Or),[k]):(l&&!sc(l.value)&&(l.value=nc(t.helper(Ir),[l.value])),s&&(g||4===s.value.type&&"["===s.value.content.trim()[0]||17===s.value.type)&&(s.value=nc(t.helper(Mr),[s.value])));break;case 14:break;default:k=nc(t.helper(Or),[nc(t.helper(Ur),[k])])}return{props:k,directives:d,patchFlag:f,dynamicPropNames:w,shouldUseBlock:_}}function Vu(e){const t=new Map,n=[];for(let a=0;a<e.length;a++){const l=e[a];if(8===l.key.type||!l.key.isStatic){n.push(l);continue}const s=l.key.content,i=t.get(s);i?("style"===s||"class"===s||le(s))&&qu(i,l):(t.set(s,l),n.push(l))}return n}function qu(e,t){17===e.value.type?e.value.elements.push(t.value):e.value=Xr([e.value,t.value],e.loc)}function Hu(e){return"component"===e||"Component"===e}const Gu=(e,t)=>{if(kc(e)){const{children:n,loc:a}=e,{slotName:l,slotProps:s}=function(e,t){let n,a='"default"';const l=[];for(let t=0;t<e.props.length;t++){const n=e.props[t];6===n.type?n.value&&("name"===n.name?a=JSON.stringify(n.value.content):(n.name=Ne(n.name),l.push(n))):"bind"===n.name&&bc(n.arg,"name")?n.exp&&(a=n.exp):("bind"===n.name&&n.arg&&sc(n.arg)&&(n.arg.content=Ne(n.arg.content)),l.push(n))}if(l.length>0){const{props:a,directives:s}=Bu(e,t,l,!1,!1);n=a}return{slotName:a,slotProps:n}}(e,t),i=[t.prefixIdentifiers?"_ctx.$slots":"$slots",l,"{}","undefined","true"];let o=2;s&&(i[2]=s,o=3),n.length&&(i[3]=ac([],n,!1,!1,a),o=4),t.scopeId&&!t.slotted&&(o=5),i.splice(o),e.codegenNode=nc(t.helper(Ar),i,a)}},Ku=/^\s*([\w$_]+|(async\s*)?\([^)]*?\))\s*=>|^\s*(async\s+)?function(?:\s+[\w$]+)?\s*\(/,Wu=(e,t,n,a)=>{const{loc:l,modifiers:s,arg:i}=e;let o;if(4===i.type)if(i.isStatic){let e=i.content;e.startsWith("vue:")&&(e=`vnode-${e.slice(4)}`),o=ec(Pe(Ne(e)),!0,i.loc)}else o=tc([`${n.helperString(jr)}(`,i,")"]);else o=i,o.children.unshift(`${n.helperString(jr)}(`),o.children.push(")");let r=e.exp;r&&!r.content.trim()&&(r=void 0);let c=n.cacheHandlers&&!r&&!n.inVOnce;if(r){const e=_c(r.content),t=!(e||Ku.test(r.content)),n=r.content.includes(";");(t||c&&e)&&(r=tc([`${t?"$event":"(...args)"} => ${n?"{":"("}`,r,n?"}":")"]))}let u={props:[Qr(o,r||ec("() => {}",!1,l))]};return a&&(u=a(u)),c&&(u.props[0].value=n.cache(u.props[0].value)),u.props.forEach((e=>e.key.isHandlerKey=!0)),u},Ju=(e,t,n)=>{const{exp:a,modifiers:l,loc:s}=e,i=e.arg;return 4!==i.type?(i.children.unshift("("),i.children.push(') || ""')):i.isStatic||(i.content=`${i.content} || ""`),l.includes("camel")&&(4===i.type?i.content=i.isStatic?Ne(i.content):`${n.helperString(Rr)}(${i.content})`:(i.children.unshift(`${n.helperString(Rr)}(`),i.children.push(")"))),n.inSSR||(l.includes("prop")&&Yu(i,"."),l.includes("attr")&&Yu(i,"^")),!a||4===a.type&&!a.content.trim()?{props:[Qr(i,ec("",!0,s))]}:{props:[Qr(i,a)]}},Yu=(e,t)=>{4===e.type?e.content=e.isStatic?t+e.content:`\`${t}\${${e.content}}\``:(e.children.unshift(`'${t}' + (`),e.children.push(")"))},Xu=(e,t)=>{if(0===e.type||1===e.type||11===e.type||10===e.type)return()=>{const n=e.children;let a,l=!1;for(let e=0;e<n.length;e++){const t=n[e];if(yc(t)){l=!0;for(let l=e+1;l<n.length;l++){const s=n[l];if(!yc(s)){a=void 0;break}a||(a=n[e]=tc([t],t.loc)),a.children.push(" + ",s),n.splice(l,1),l--}}}if(l&&(1!==n.length||0!==e.type&&(1!==e.type||0!==e.tagType||e.props.find((e=>7===e.type&&!t.directiveTransforms[e.name])))))for(let e=0;e<n.length;e++){const a=n[e];if(yc(a)||8===a.type){const l=[];2===a.type&&" "===a.content||l.push(a),t.ssr||0!==su(a,t)||l.push("1"),n[e]={type:12,content:a,loc:a.loc,codegenNode:nc(t.helper(yr),l)}}}}},Zu=new WeakSet,Qu=(e,t)=>{if(1===e.type&&gc(e,"once",!0)){if(Zu.has(e)||t.inVOnce)return;return Zu.add(e),t.inVOnce=!0,t.helper(Lr),()=>{t.inVOnce=!1;const e=t.currentNode;e.codegenNode&&(e.codegenNode=t.cache(e.codegenNode,!0))}}},ed=(e,t,n)=>{const{exp:a,arg:l}=e;if(!a)return td();const s=a.loc.source,i=4===a.type?a.content:s;if(!i.trim()||!_c(i))return td();const o=l||ec("modelValue",!0),r=l?sc(l)?`onUpdate:${l.content}`:tc(['"onUpdate:" + ',l]):"onUpdate:modelValue";let c;c=tc([(n.isTS?"($event: any)":"$event")+" => ((",a,") = $event)"]);const u=[Qr(o,e.exp),Qr(r,c)];if(e.modifiers.length&&1===t.tagType){const t=e.modifiers.map((e=>(cc(e)?e:JSON.stringify(e))+": true")).join(", "),n=l?sc(l)?`${l.content}Modifiers`:tc([l,' + "Modifiers"']):"modelModifiers";u.push(Qr(n,ec(`{ ${t} }`,!1,e.loc,2)))}return td(u)};function td(e=[]){return{props:e}}const nd=new WeakSet,ad=(e,t)=>{if(1===e.type){const n=gc(e,"memo");if(!n||nd.has(e))return;return nd.add(e),()=>{const a=e.codegenNode||t.currentNode.codegenNode;a&&13===a.type&&(1!==e.tagType&&Ec(a,t),e.codegenNode=nc(t.helper(Gr),[n.exp,ac(void 0,a),"_cache",String(t.cached++)]))}}};function ld(e,t={}){const n=t.onError||ir,a="module"===t.mode;!0===t.prefixIdentifiers?n(rr(46)):a&&n(rr(47)),t.cacheHandlers&&n(rr(48)),t.scopeId&&!a&&n(rr(49));const l=he(e)?function(e,t={}){const n=function(e,t){const n=ie({},Mc);let a;for(a in t)n[a]=void 0===t[a]?Mc[a]:t[a];return{options:n,column:1,line:1,offset:0,originalSource:e,source:e,inPre:!1,inVPre:!1,onWarn:n.onWarn}}(e,t),a=Kc(n);return function(e,t=Jr){return{type:0,children:e,helpers:[],components:[],directives:[],hoists:[],imports:[],cached:0,temps:0,codegenNode:void 0,loc:t}}(Oc(n,0,[]),Wc(n,a))}(e,t):e,[s,i]=[[Qu,xu,ad,Cu,Gu,zu,Ou,Xu],{on:Wu,bind:Ju,model:ed}];return du(l,ie({},t,{prefixIdentifiers:!1,nodeTransforms:[...s,...t.nodeTransforms||[]],directiveTransforms:ie({},i,t.directiveTransforms||{})})),function(e,t={}){const n=function(e,{mode:t="function",prefixIdentifiers:n="module"===t,sourceMap:a=!1,filename:l="template.vue.html",scopeId:s=null,optimizeImports:i=!1,runtimeGlobalName:o="Vue",runtimeModuleName:r="vue",ssrRuntimeModuleName:c="vue/server-renderer",ssr:u=!1,isTS:d=!1,inSSR:p=!1}){const _={mode:t,prefixIdentifiers:n,sourceMap:a,filename:l,scopeId:s,optimizeImports:i,runtimeGlobalName:o,runtimeModuleName:r,ssrRuntimeModuleName:c,ssr:u,isTS:d,inSSR:p,source:e.loc.source,code:"",column:1,line:1,offset:0,indentLevel:0,pure:!1,map:void 0,helper:e=>`_${Wr[e]}`,push(e,t){_.code+=e},indent(){f(++_.indentLevel)},deindent(e=!1){e?--_.indentLevel:f(--_.indentLevel)},newline(){f(_.indentLevel)}};function f(e){_.push("\n"+"  ".repeat(e))}return _}(e,t);t.onContextCreated&&t.onContextCreated(n);const{mode:a,push:l,prefixIdentifiers:s,indent:i,deindent:o,newline:r,ssr:c}=n,u=e.helpers.length>0,d=!s&&"module"!==a;if(function(e,t){const{push:n,newline:a,runtimeGlobalName:l}=t,s=l;e.helpers.length>0&&(n(`const _Vue = ${s}\n`),e.hoists.length)&&n(`const { ${[gr,vr,br,yr,wr].filter((t=>e.helpers.includes(t))).map(fu).join(", ")} } = _Vue\n`),function(e,t){if(!e.length)return;t.pure=!0;const{push:n,newline:a}=t;a();for(let l=0;l<e.length;l++){const s=e[l];s&&(n(`const _hoisted_${l+1} = `),vu(s,t),a())}t.pure=!1}(e.hoists,t),a(),n("return ")}(e,n),l(`function ${c?"ssrRender":"render"}(${(c?["_ctx","_push","_parent","_attrs"]:["_ctx","_cache"]).join(", ")}) {`),i(),d&&(l("with (_ctx) {"),i(),u&&(l(`const { ${e.helpers.map(fu).join(", ")} } = _Vue`),l("\n"),r())),e.components.length&&(hu(e.components,"component",n),(e.directives.length||e.temps>0)&&r()),e.directives.length&&(hu(e.directives,"directive",n),e.temps>0&&r()),e.temps>0){l("let ");for(let t=0;t<e.temps;t++)l(`${t>0?", ":""}_temp${t}`)}return(e.components.length||e.directives.length||e.temps)&&(l("\n"),r()),c||l("return "),e.codegenNode?vu(e.codegenNode,n):l("null"),d&&(o(),l("}")),o(),l("}"),{ast:e,code:n.code,preamble:"",map:n.map?n.map.toJSON():void 0}}(l,ie({},t,{prefixIdentifiers:!1}))}const sd=Symbol(""),id=Symbol(""),od=Symbol(""),rd=Symbol(""),cd=Symbol(""),ud=Symbol(""),dd=Symbol(""),pd=Symbol(""),_d=Symbol(""),fd=Symbol("");var hd;let md;hd={[sd]:"vModelRadio",[id]:"vModelCheckbox",[od]:"vModelText",[rd]:"vModelSelect",[cd]:"vModelDynamic",[ud]:"withModifiers",[dd]:"withKeys",[pd]:"vShow",[_d]:"Transition",[fd]:"TransitionGroup"},Object.getOwnPropertySymbols(hd).forEach((e=>{Wr[e]=hd[e]}));const gd=F("style,iframe,script,noscript",!0),vd={isVoidTag:W,isNativeTag:e=>G(e)||K(e),isPreTag:e=>"pre"===e,decodeEntities:function(e,t=!1){return md||(md=document.createElement("div")),t?(md.innerHTML=`<div foo="${e.replace(/"/g,"&quot;")}">`,md.children[0].getAttribute("foo")):(md.innerHTML=e,md.textContent)},isBuiltInComponent:e=>ic(e,"Transition")?_d:ic(e,"TransitionGroup")?fd:void 0,getNamespace(e,t){let n=t?t.ns:0;if(t&&2===n)if("annotation-xml"===t.tag){if("svg"===e)return 1;t.props.some((e=>6===e.type&&"encoding"===e.name&&null!=e.value&&("text/html"===e.value.content||"application/xhtml+xml"===e.value.content)))&&(n=0)}else/^m(?:[ions]|text)$/.test(t.tag)&&"mglyph"!==e&&"malignmark"!==e&&(n=0);else t&&1===n&&("foreignObject"!==t.tag&&"desc"!==t.tag&&"title"!==t.tag||(n=0));if(0===n){if("svg"===e)return 1;if("math"===e)return 2}return n},getTextMode({tag:e,ns:t}){if(0===t){if("textarea"===e||"title"===e)return 1;if(gd(e))return 2}return 0}},bd=(e,t)=>{const n=V(e);return ec(JSON.stringify(n),!1,t,3)},yd=F("passive,once,capture"),wd=F("stop,prevent,self,ctrl,shift,alt,meta,exact,middle"),xd=F("left,right"),kd=F("onkeyup,onkeydown,onkeypress",!0),$d=(e,t)=>sc(e)&&"onclick"===e.content.toLowerCase()?ec(t,!0):4!==e.type?tc(["(",e,`) === "onClick" ? "${t}" : (`,e,")"]):e,Sd=(e,t)=>{1!==e.type||0!==e.tagType||"script"!==e.tag&&"style"!==e.tag||t.removeNode()},Cd=[e=>{1===e.type&&e.props.forEach(((t,n)=>{6===t.type&&"style"===t.name&&t.value&&(e.props[n]={type:7,name:"bind",arg:ec("style",!0,t.loc),exp:bd(t.value.content,t.loc),modifiers:[],loc:t.loc})}))}],Nd={cloak:()=>({props:[]}),html:(e,t,n)=>{const{exp:a,loc:l}=e;return t.children.length&&(t.children.length=0),{props:[Qr(ec("innerHTML",!0,l),a||ec("",!0))]}},text:(e,t,n)=>{const{exp:a,loc:l}=e;return t.children.length&&(t.children.length=0),{props:[Qr(ec("textContent",!0),a?su(a,n)>0?a:nc(n.helperString(Er),[a],l):ec("",!0))]}},model:(e,t,n)=>{const a=ed(e,t,n);if(!a.props.length||1===t.tagType)return a;const{tag:l}=t,s=n.isCustomElement(l);if("input"===l||"textarea"===l||"select"===l||s){let e=od,i=!1;if("input"===l||s){const n=vc(t,"type");if(n){if(7===n.type)e=cd;else if(n.value)switch(n.value.content){case"radio":e=sd;break;case"checkbox":e=id;break;case"file":i=!0}}else(function(e){return e.props.some((e=>!(7!==e.type||"bind"!==e.name||e.arg&&4===e.arg.type&&e.arg.isStatic)))})(t)&&(e=cd)}else"select"===l&&(e=rd);i||(a.needRuntime=n.helper(e))}return a.props=a.props.filter((e=>!(4===e.key.type&&"modelValue"===e.key.content))),a},on:(e,t,n)=>Wu(e,0,n,(t=>{const{modifiers:a}=e;if(!a.length)return t;let{key:l,value:s}=t.props[0];const{keyModifiers:i,nonKeyModifiers:o,eventOptionModifiers:r}=((e,t,n,a)=>{const l=[],s=[],i=[];for(let n=0;n<t.length;n++){const a=t[n];yd(a)?i.push(a):xd(a)?sc(e)?kd(e.content)?l.push(a):s.push(a):(l.push(a),s.push(a)):wd(a)?s.push(a):l.push(a)}return{keyModifiers:l,nonKeyModifiers:s,eventOptionModifiers:i}})(l,a);if(o.includes("right")&&(l=$d(l,"onContextmenu")),o.includes("middle")&&(l=$d(l,"onMouseup")),o.length&&(s=nc(n.helper(ud),[s,JSON.stringify(o)])),!i.length||sc(l)&&!kd(l.content)||(s=nc(n.helper(dd),[s,JSON.stringify(i)])),r.length){const e=r.map(Ee).join("");l=sc(l)?ec(`${l.content}${e}`,!0):tc(["(",l,`) + "${e}"`])}return{props:[Qr(l,s)]}})),show:(e,t,n)=>({props:[],needRuntime:n.helper(pd)})},Ad=Object.create(null);function Td(e,t){if(!he(e)){if(!e.nodeType)return te;e=e.innerHTML}const n=e,a=Ad[n];if(a)return a;if("#"===e[0]){const t=document.querySelector(e);e=t?t.innerHTML:""}const{code:l}=function(e,t={}){return ld(e,ie({},vd,t,{nodeTransforms:[Sd,...Cd,...t.nodeTransforms||[]],directiveTransforms:ie({},Nd,t.directiveTransforms||{}),transformHoist:null}))}(e,ie({hoistStatic:!0,onError:void 0,onWarn:te},t)),s=new Function("Vue",l)(sr);return s._rc=!0,Ad[n]=s}ci(Td);var Ed=Object.freeze({__proto__:null,BaseTransition:ja,Comment:ks,EffectScope:De,Fragment:ws,KeepAlive:Xa,ReactiveEffect:Ze,Static:$s,Suspense:ya,Teleport:ys,Text:xs,Transition:so,TransitionGroup:$o,VueElement:eo,callWithAsyncErrorHandling:Pn,callWithErrorHandling:En,camelize:Ne,capitalize:Ee,cloneVNode:Vs,compatUtils:null,compile:Td,computed:gi,createApp:tr,createBlock:Ms,createCommentVNode:Gs,createElementBlock:Is,createElementVNode:Ls,createHydrationRenderer:ps,createPropsRestProxy:Ci,createRenderer:ds,createSSRApp:nr,createSlots:Cl,createStaticVNode:Hs,createTextVNode:qs,createVNode:zs,customRef:wn,defineAsyncComponent:Wa,defineComponent:Ga,defineCustomElement:Xi,defineEmits:bi,defineExpose:yi,defineProps:vi,defineSSRCustomElement:Zi,get devtools(){return ta},effect:et,effectScope:je,getCurrentInstance:ti,getCurrentScope:ze,getTransitionRawChildren:Ha,guardReactiveProps:Bs,h:Ai,handleError:In,hydrate:er,initCustomFormatter:Pi,initDirectivesForSSR:lr,inject:Na,isMemoSame:Mi,isProxy:an,isReactive:en,isReadonly:tn,isRef:dn,isRuntimeOnly:ui,isShallow:nn,isVNode:Os,markRaw:sn,mergeDefaults:Si,mergeProps:Ys,nextTick:Gn,normalizeClass:q,normalizeProps:H,normalizeStyle:L,onActivated:Qa,onBeforeMount:ol,onBeforeUnmount:dl,onBeforeUpdate:cl,onDeactivated:el,onErrorCaptured:ml,onMounted:rl,onRenderTracked:hl,onRenderTriggered:fl,onScopeDispose:Be,onServerPrefetch:_l,onUnmounted:pl,onUpdated:ul,openBlock:Ns,popScopeId:da,provide:Ca,proxyRefs:bn,pushScopeId:ua,queuePostFlushCb:Yn,reactive:Jt,readonly:Xt,ref:pn,registerRuntimeCompiler:ci,render:Qo,renderList:Sl,renderSlot:Nl,resolveComponent:bl,resolveDirective:xl,resolveDynamicComponent:wl,resolveFilter:null,resolveTransitionHooks:za,setBlockTracking:Es,setDevtoolsHook:aa,setTransitionHooks:qa,shallowReactive:Yt,shallowReadonly:Zt,shallowRef:_n,ssrContextKey:Ti,ssrUtils:null,stop:tt,toDisplayString:X,toHandlerKey:Pe,toHandlers:Tl,toRaw:ln,toRef:$n,toRefs:xn,transformVNodeArgs:Fs,triggerRef:mn,unref:gn,useAttrs:ki,useCssModule:to,useCssVars:no,useSSRContext:Ei,useSlots:xi,useTransitionState:Ra,vModelCheckbox:Io,vModelDynamic:jo,vModelRadio:Oo,vModelSelect:Uo,vModelText:Po,vShow:Go,version:Oi,warn:Nn,watch:Ia,watchEffect:Aa,watchPostEffect:Ta,watchSyncEffect:Ea,withAsyncContext:Ni,withCtx:_a,withDefaults:wi,withDirectives:gl,withKeys:Ho,withMemo:Ii,withModifiers:Vo,withScopeId:pa}),Pd={components:{},props:{id:String,chart_type:String,register_on_status_change:Boolean,base_url_request:String,get_params_url_request:Function,get_custom_chart_options:Function},emits:["apply","hidden","showed","chart_reloaded","zoom"],created(){},beforeUnmount(){this.chart.destroyChart()},data:()=>({chart:null,chart_options:null,from_zoom:!1}),async mounted(){await this.init(),ntopng_sync.ready(this.$props.id)},methods:{init:async function(){let e=ntopng_status_manager.get_status(),t=this.get_url_request(e);this.register_on_status_change&&this.register_status(e),await this.draw_chart(t)},get_data_uri:async function(e){if(null==this.chart)return null;return await this.chart.to_data_uri()},download_chart_png:async function(e,t){if(null==this.chart)return;let n=await this.chart.to_data_uri();downloadURI(n,e)},register_status:function(e){let t=this.get_url_request(e);ntopng_status_manager.on_status_change(this.id,(e=>{1==this.from_zoom&&(this.from_zoom=!1);let n=this.get_url_request(e);n!=t?(t=n,this.update_chart(n)):t=n}),!1)},get_url_request:function(e){let t;return null!=this.get_params_url_request?(null==e&&(e=ntopng_status_manager.get_status()),t=this.get_params_url_request(e)):t=ntopng_url_manager.get_url_params(),`${this.base_url_request}?${t}`},draw_chart:async function(e){let t=ntopChartApex,n=this.chart_type;null==n&&(n=t.typeChart.TS_STACKED),this.chart=t.newChart(n),this.chart.registerEvent("zoomed",((e,t)=>this.on_zoomed(e,t)));let a=await this.get_chart_options(e);this.chart.drawChart(this.$refs.chart,a)},update_chart:async function(e){let t=await this.get_chart_options(e);this.chart.updateChart(t)},get_chart_options:async function(e){let t;return t=null==this.get_custom_chart_options?await ntopng_utility.http_request(e):await this.get_custom_chart_options(e),this.$emit("chart_reloaded",t),t},on_zoomed:function(e,{xaxis:t,yaxis:n}){this.from_zoom=!0;const a=moment(t.min),l=moment(t.max);let s={epoch_begin:Number.parseInt(a.unix()),epoch_end:Number.parseInt(l.unix())};ntopng_events_manager.emit_event(ntopng_events.EPOCH_CHANGE,s,this.id),this.$emit("zoom",s)}}};const Id={style:{width:"100%"},ref:"chart"};Pd.render=function(e,t,n,a,l,s){return Ns(),Is("div",Id,null,512)},Pd.__file="http_src/vue/chart.vue";const Md=["selected","value","disabled"],Od=["label"],Ud=["selected","value","disabled"];var Fd={__name:"select-search",props:{id:String,options:Array,selected_option:Object,disable_change:Boolean},emits:["update:selected_option","select_option"],setup(e,{expose:t,emit:n}){const a=e,l=pn(null),s=pn([]),i=pn([]),o=pn({});function r(){return null==a.selected_option?a.options[0]:a.selected_option}function c(e){null==e&&(e=r()),o.value=e,null==o.value.value&&(o.value.value=e.label)}function u(e){let t;return null==e&&(e=r()),t=e.value?e.value:e.label,t}Ia((()=>a.selected_option),((e,t)=>{c(e);let n=l.value,a=u(e);$(n).val(a),$(n).trigger("change")}),{flush:"pre"});let d=!0;function p(){!function(){if(s.value=[],i.value=[],null==a.options)return;let e={};a.options.forEach((t=>{let n={...t};0!=n.value&&"0"!=n.value||(n.value=null),null==n.value&&(n.value=n.label),null==t.group?s.value.push(n):(null==e[t.group]&&(e[t.group]={group:n.group,options:[]}),e[t.group].options.push(n))})),i.value=ntopng_utility.object_to_array(e)}(),c()}Ia((()=>a.options),((e,t)=>{1!=a.disable_change&&null!=e&&p()}),{flush:"pre"}),rl((()=>{a.options&&(a.disable_change&&d||p())})),Ia([s,i],((e,t)=>{_()}),{flush:"post"});const _=()=>{let e=l.value;0==d&&f(),$(e).hasClass("select2-hidden-accessible")||($(e).select2({width:"100%",height:"500px",theme:"bootstrap-5",dropdownParent:$(e).parent(),dropdownAutoWidth:!0}),$(e).on("select2:select",(function(e){let t=e.params.data.element._value,l=function(e){null==e&&(e=u());let t=s.value.find((t=>t.value==e));if(null!=t)return t;for(let n=0;n<i.value.length;n+=1)if(t=i.value[n].options.find((t=>t.value==e)),null!=t)return t;return null}(t),o=a.options.find((e=>e.label==l.label));t!=a.selected_option&&(n("update:selected_option",o),n("select_option",o))}))),d=!1};function f(){try{$(l.value).select2("destroy"),$(l.value).off("select2:select")}catch(e){console.error("Destroy select-search catch error:"),console.error(e)}}return t({render:_}),dl((()=>{f()})),(e,t)=>(Ns(),Is("select",{class:"select2 form-select",ref_key:"select2",ref:l,required:"",name:"filter_type"},[(Ns(!0),Is(ws,null,Sl(s.value,((e,t)=>(Ns(),Is("option",{selected:e.value==o.value.value,value:e.value,disabled:e.disabled},X(e.label),9,Md)))),256)),(Ns(!0),Is(ws,null,Sl(i.value,((e,t)=>(Ns(),Is("optgroup",{label:e.group},[(Ns(!0),Is(ws,null,Sl(e.options,((t,n)=>(Ns(),Is("option",{selected:e.value==o.value.value,value:t.value,disabled:t.disabled},X(t.label),9,Ud)))),256))],8,Od)))),256))],512))},__file:"http_src/vue/select-search.vue"},Rd={components:{"select-search":Fd},props:{id:String,enable_refresh:Boolean},watch:{enable_refresh:function(e,t){1==e?this.start_refresh():null!=this.refresh_interval&&(clearInterval(this.refresh_interval),this.refresh_interval=null)}},emits:["epoch_change"],created(){},mounted(){let e=ntopng_url_manager.get_url_entry("epoch_begin"),t=ntopng_url_manager.get_url_entry("epoch_end");null!=e&&null!=t&&ntopng_events_manager.emit_event(ntopng_events.EPOCH_CHANGE,{epoch_begin:Number.parseInt(e),epoch_end:Number.parseInt(t)},this.$props.id);let n=this,a=(e,t)=>flatpickr($(this.$refs[e]),{enableTime:!0,dateFormat:"d/m/Y H:i",time_24hr:!0,clickOpens:!0,onChange:function(e,t,a){n.enable_apply=!0,n.wrong_date=n.flat_begin_date.selectedDates[0].getTime()>n.flat_end_date.selectedDates[0].getTime()}});this.flat_begin_date=a("begin-date"),this.flat_end_date=a("end-date"),ntopng_events_manager.on_event_change(this.$props.id,ntopng_events.EPOCH_CHANGE,(e=>this.on_status_updated(e)),!0),ntopng_sync.ready(this.$props.id),this.enable_refresh&&this.start_refresh()},methods:{start_refresh:function(){this.refresh_interval=setInterval((()=>{let e=this.selected_time_option?.value;this.enable_refresh&&null!=e&&"custom"!=e&&(this.update_from_interval=!0,this.change_select_time())}),this.refresh_interval_seconds)},utc_s_to_server_date:function(e){let t=1e3*e,n=new Date(t).getTimezoneOffset(),a=moment.tz(t,ntop_zoneinfo)._offset;return new Date(t+1e3*(a+n)*60)},server_date_to_date:function(e,t){let n=e.getTime(),a=e.getTimezoneOffset(),l=moment.tz(n,ntop_zoneinfo)._offset;return new Date(n-1e3*(l+a)*60)},on_status_updated:function(e){let t=Date.now(),n=t-18e5;null!=e.epoch_end&&null!=e.epoch_begin&&Number.parseInt(e.epoch_end)>Number.parseInt(e.epoch_begin)?(e.epoch_begin=Number.parseInt(e.epoch_begin),e.epoch_end=Number.parseInt(e.epoch_end),t=1e3*e.epoch_end,n=1e3*e.epoch_begin):(e.epoch_end=this.get_utc_seconds(t),e.epoch_begin=this.get_utc_seconds(n),ntopng_url_manager.add_obj_to_url(e),this.emit_epoch_change(e,this.$props.id)),this.flat_begin_date.setDate(this.utc_s_to_server_date(e.epoch_begin)),this.flat_end_date.setDate(this.utc_s_to_server_date(e.epoch_end)),this.set_select_time_value(n,t),this.epoch_status={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end},0==this.update_from_interval&&this.add_status_in_history(this.epoch_status),this.enable_apply=!1,this.update_from_interval=!1,ntopng_url_manager.add_obj_to_url(this.epoch_status)},set_select_time_value:function(e,t){let n=this.get_select_values();const a=60,l=this.get_utc_seconds(Date.now()),s=this.get_utc_seconds(t),i=this.get_utc_seconds(e);this.is_between(s,l,a)?this.is_between(i,l-n.min_5,a)?this.select_time_value="min_5":this.is_between(i,l-n.min_30,a)?this.select_time_value="min_30":this.is_between(i,l-n.hour,a)?this.select_time_value="hour":this.is_between(i,l-n.day,a)?this.select_time_value="day":this.is_between(i,l-n.week,a)?this.select_time_value="week":this.is_between(i,l-n.month,a)?this.select_time_value="month":this.is_between(i,l-n.year,a)?this.select_time_value="year":this.select_time_value="custom":this.select_time_value="custom",this.time_preset_list.forEach((e=>{e.currently_active=!1,e.value==this.select_time_value&&(this.selected_time_option=e,e.currently_active=!0)}))},apply:function(){let e=this.get_utc_seconds(Date.now()),t=this.server_date_to_date(this.flat_begin_date.selectedDates[0]),n=this.get_utc_seconds(t.getTime()),a=this.server_date_to_date(this.flat_end_date.selectedDates[0]),l=this.get_utc_seconds(a.getTime());l>e&&(l=e);let s={epoch_begin:n,epoch_end:l};this.emit_epoch_change(s)},change_select_time:function(){let e=this.get_select_values()[this.selected_time_option.value],t=this.get_utc_seconds(Date.now()),n={epoch_begin:t-e,epoch_end:t};this.emit_epoch_change(n)},get_select_values:function(){return{min_5:300,min_30:1800,hour:3600,day:this.get_last_day_seconds(),week:this.get_last_week_seconds(),month:this.get_last_month_seconds(),year:this.get_last_year_seconds()}},get_utc_seconds:function(e){return Number.parseInt(e/1e3)},is_between:function(e,t,n){return e>=t-n&&e<=t},get_last_day_seconds:function(){let e=new Date;return this.get_utc_seconds(Date.now()-e.setDate(e.getDate()-1))},get_last_week_seconds:function(){let e=new Date;return this.get_utc_seconds(Date.now()-e.setDate(e.getDate()-7))},get_last_month_seconds:function(){let e=new Date;return this.get_utc_seconds(Date.now()-e.setMonth(e.getMonth()-1))},get_last_year_seconds:function(){let e=new Date;return this.get_utc_seconds(Date.now()-e.setMonth(e.getMonth()-12))},zoom:function(e){if(null==this.epoch_status)return;let t=(this.epoch_status.epoch_end-this.epoch_status.epoch_begin)/e,n=this.epoch_status.epoch_end/2+this.epoch_status.epoch_begin/2;this.epoch_status.epoch_begin=n-t/2,this.epoch_status.epoch_end=n+t/2;let a=this.get_utc_seconds(Date.now());this.epoch_status.epoch_end>a&&(this.epoch_status.epoch_end=a),this.epoch_status.epoch_end=Number.parseInt(this.epoch_status.epoch_end),this.epoch_status.epoch_begin=Number.parseInt(this.epoch_status.epoch_begin),this.epoch_status.epoch_begin==this.epoch_status.epoch_end&&(this.epoch_status.epoch_begin-=2),this.emit_epoch_change(this.epoch_status)},jump_time_back:function(){if(null==this.epoch_status)return;this.epoch_status.epoch_begin-=1800,this.epoch_status.epoch_end-=1800,this.emit_epoch_change(this.epoch_status)},jump_time_ahead:function(){if(null==this.epoch_status)return;let e=this.epoch_status.epoch_end,t=this.get_utc_seconds(Date.now());this.epoch_status.epoch_end+=1800,this.epoch_status.epoch_end>t&&(this.epoch_status.epoch_end=t),this.epoch_status.epoch_begin+=this.epoch_status.epoch_end-e,this.emit_epoch_change(this.epoch_status)},emit_epoch_change:function(e,t){null!=e.epoch_end&&null!=e.epoch_begin&&(this.wrong_date=!1,e.epoch_begin>e.epoch_end?this.wrong_date=!0:(t!=this.id&&this.on_status_updated(e),ntopng_events_manager.emit_event(ntopng_events.EPOCH_CHANGE,e,this.id),this.$emit("epoch_change",e)))},add_status_in_history:function(e){this.history_last_status=this.history[this.history.length-1],this.history.length>5&&this.history.shift(),this.history.push(e)},apply_status_by_history:function(){null!=this.history_last_status&&(this.history.pop(),this.history.pop(),this.emit_epoch_change(this.history_last_status))}},data:()=>({i18n:e=>i18n(e),epoch_status:null,refresh_interval:null,refresh_interval_seconds:6e4,update_from_interval:!1,history:[],history_last_status:null,enable_apply:!1,select_time_value:"min_5",selected_time_option:{value:"min_5",label:i18n("show_alerts.presets.5_min"),currently_active:!1},wrong_date:!1,flat_begin_date:null,flat_end_date:null,time_preset_list:[{value:"min_5",label:i18n("show_alerts.presets.5_min"),currently_active:!1},{value:"min_30",label:i18n("show_alerts.presets.30_min"),currently_active:!0},{value:"hour",label:i18n("show_alerts.presets.hour"),currently_active:!1},{value:"day",label:i18n("show_alerts.presets.day"),currently_active:!1},{value:"week",label:i18n("show_alerts.presets.week"),currently_active:!1},{value:"month",label:i18n("show_alerts.presets.month"),currently_active:!1},{value:"year",label:i18n("show_alerts.presets.year"),currently_active:!1},{value:"custom",label:i18n("show_alerts.presets.custom"),currently_active:!1,disabled:!0}]})};const Dd=e=>(ua("data-v-bc6f1430"),e=e(),da(),e),jd={class:"input-group"},Ld={class:"form-group"},zd={class:"controls d-flex flex-wrap"},Bd={class:"btn-group me-auto btn-group-sm"},Vd={class:"btn-group ms-2"},qd=Dd((()=>Ls("span",{class:"input-group-text"},[Ls("i",{class:"fas fa-calendar-alt"})],-1))),Hd={class:"flatpickr flatpickr-input",type:"text",placeholder:"Choose a date..","data-id":"datetime",ref:"begin-date"},Gd=Dd((()=>Ls("span",{class:"input-group-text"},[Ls("i",{class:"fas fa-long-arrow-alt-right"})],-1))),Kd={class:"flatpickr flatpickr-input",type:"text",placeholder:"Choose a date..","data-id":"datetime",ref:"end-date"},Wd=["title"],Jd=[Dd((()=>Ls("i",{class:"fas fa-exclamation-circle"},null,-1)))],Yd={class:"d-flex align-items-center ms-2"},Xd=["disabled"],Zd={class:"btn-group"},Qd=["title"],ep=[Dd((()=>Ls("i",{class:"fas fa-long-arrow-alt-left"},null,-1)))],tp=["title"],np=[Dd((()=>Ls("i",{class:"fas fa-long-arrow-alt-right"},null,-1)))],ap=["title"],lp=[Dd((()=>Ls("i",{class:"fas fa-search-plus"},null,-1)))],sp=["title"],ip=[Dd((()=>Ls("i",{class:"fas fa-search-minus"},null,-1)))],op=["disabled","title"],rp=[Dd((()=>Ls("i",{class:"fas fa-undo"},null,-1)))],cp=["disabled","title"],up=[Dd((()=>Ls("i",{class:"fas fa-sync"},null,-1)))];function dp(e,t){void 0===t&&(t={});var n=t.insertAt;if(e&&"undefined"!=typeof document){var a=document.head||document.getElementsByTagName("head")[0],l=document.createElement("style");l.type="text/css","top"===n&&a.firstChild?a.insertBefore(l,a.firstChild):a.appendChild(l),l.styleSheet?l.styleSheet.cssText=e:l.appendChild(document.createTextNode(e))}}dp("\n.date_time_input[data-v-bc6f1430] {\n  width: 10.5rem;\n  max-width: 10.5rem;\n  min-width: 10.5rem;\n}\n"),Rd.render=function(e,t,n,a,l,s){const i=bl("select-search");return Ns(),Is("div",jd,[Ls("div",Ld,[Ls("div",zd,[Ls("div",Bd,[Nl(e.$slots,"begin"),zs(i,{selected_option:l.selected_time_option,"onUpdate:selected_option":t[0]||(t[0]=e=>l.selected_time_option=e),id:"time_preset_range_picker",options:l.time_preset_list,onSelect_option:s.change_select_time},null,8,["selected_option","options","onSelect_option"]),Ls("div",Vd,[qd,Ls("input",Hd,null,512),Gs(' <input ref="begin-date" @change="enable_apply=true" @change="change_begin_date" type="date" class="date_time_input begin-timepicker form-control border-right-0 fix-safari-input"> '),Gs(' <input ref="begin-time" @change="enable_apply=true" type="time" class="date_time_input begin-timepicker form-control border-right-0 fix-safari-input"> '),Gd,Ls("input",Kd,null,512),Gs(' <input ref="end-date" @change="enable_apply=true" type="date" class="date_time_input end-timepicker form-control border-left-0 fix-safari-input" style="width: 2.5rem;"> '),Gs(' <input ref="end-time" @change="enable_apply=true" type="time" class="date_time_input end-timepicker form-control border-left-0 fix-safari-input"> '),gl(Ls("span",{title:l.i18n("wrong_date_range"),style:{"margin-left":"0.2rem",color:"red"}},Jd,8,Wd),[[Go,l.wrong_date]])]),Ls("div",Yd,[Ls("button",{disabled:!l.enable_apply||l.wrong_date,onClick:t[1]||(t[1]=(...e)=>s.apply&&s.apply(...e)),class:"btn btn-sm btn-primary"},X(l.i18n("apply")),9,Xd),Ls("div",Zd,[Ls("button",{onClick:t[2]||(t[2]=e=>s.jump_time_back()),class:"btn btn-sm btn-link",ref:"btn-jump-time-back",title:l.i18n("date_time_range_picker.btn_move_left")},ep,8,Qd),Ls("button",{onClick:t[3]||(t[3]=e=>s.jump_time_ahead()),class:"btn btn-sm btn-link me-2",ref:"btn-jump-time-ahead",title:l.i18n("date_time_range_picker.btn_move_right")},np,8,tp),Ls("button",{onClick:t[4]||(t[4]=e=>s.zoom(2)),class:"btn btn-sm btn-link",ref:"btn-zoom-in",title:l.i18n("date_time_range_picker.btn_zoom_in")},lp,8,ap),Ls("button",{onClick:t[5]||(t[5]=e=>s.zoom(.5)),class:"btn btn-sm btn-link",ref:"btn-zoom-out",title:l.i18n("date_time_range_picker.btn_zoom_out")},ip,8,sp),Ls("button",{disabled:null==l.history_last_status,onClick:t[6]||(t[6]=e=>s.apply_status_by_history()),class:"btn btn-sm btn-link",title:l.i18n("date_time_range_picker.btn_undo")},rp,8,op),Ls("button",{disabled:"custom"==l.select_time_value,onClick:t[7]||(t[7]=e=>s.change_select_time()),class:"btn btn-sm btn-link",title:l.i18n("date_time_range_picker.btn_refresh")},up,8,cp),Nl(e.$slots,"extra_buttons")])])])])])])},Rd.__scopeId="data-v-bc6f1430",Rd.__file="http_src/vue/data-time-range-picker.vue";var pp=Ga({components:{},props:{id:String},emits:["hidden","showed"],created(){},data:()=>({}),mounted(){let e=this;$(this.$refs.modal_id).on("shown.bs.modal",(function(t){e.$emit("showed")})),$(this.$refs.modal_id).on("hidden.bs.modal",(function(t){e.$emit("hidden")})),ntopng_sync.ready(this.$props.id)},methods:{show:function(){$(this.$refs.modal_id).modal("show")},preventEnter:function(){},close:function(){$(this.$refs.modal_id).modal("hide")}}});const _p={class:"modal-dialog modal-dialog-centered modal-lg",role:"document"},fp={class:"modal-content"},hp={class:"modal-header"},mp={class:"modal-title"},gp=Ls("div",{class:"modal-close"},[Ls("button",{type:"button",class:"btn-close","data-bs-dismiss":"modal","aria-label":"Close"})],-1),vp={class:"modal-body"},bp={class:"modal-footer"},yp=Ls("div",{class:"mr-auto"},null,-1),wp=Ls("div",{class:"alert alert-info test-feedback w-100",style:{display:"none"}},null,-1);pp.render=function(e,t,n,a,l,s){return Ns(),Is("div",{onSubmit:t[0]||(t[0]=Vo(((...t)=>e.preventEnter&&e.preventEnter(...t)),["prevent"])),class:"modal fade",ref:"modal_id",tabindex:"-1",role:"dialog","aria-labelledby":"dt-add-filter-modal-title","aria-hidden":"true"},[Ls("div",_p,[Ls("div",fp,[Ls("div",hp,[Ls("h5",mp,[Nl(e.$slots,"title")]),gp]),Ls("div",vp,[Nl(e.$slots,"body")]),Ls("div",bp,[yp,Nl(e.$slots,"footer"),wp])])])],544)},pp.__file="http_src/vue/modal.vue";const xp=e=>(ua("data-v-089b0491"),e=e(),da(),e),kp=xp((()=>Ls("a",{target:"_newtab",href:"#",style:{},class:"nav-item text-muted"},[Ls("i",{class:"fas fa-question-circle",style:{"margin-left":"28rem","padding-top":"0.8rem"}})],-1))),$p={class:"nav nav-tabs"},Sp=["disabled"],Cp={key:0,style:{"min-height":"8.5rem"}},Np={class:"form-group ms-2 me-2 mt-3 row"},Ap={class:"col-form-label col-sm-4"},Tp={class:"col-sm-6"},Ep=["pattern"],Pp={key:1,style:{"min-height":"8.5rem"}},Ip={class:"form-group ms-2 me-2 mt-3 row"},Mp={class:"col-form-label col-sm-4"},Op={class:"col-sm-8"},Up={value:"name"},Fp={value:"date"},Rp={class:"form-group ms-2 me-2 mt-3 row"},Dp={class:"col-form-label col-sm-4"},jp={class:"col-sm-8"},Lp=["value"],zp={class:"form-group ms-2 me-2 mt-3 row"},Bp={class:"custom-control custom-switch"},Vp={class:"custom-control-label ms-1 form-check-label"},qp=["disabled"],Hp=["disabled"],Gp=["disabled"];var Kp={__name:"modal-snapshot",props:{csrf:String,page:String},emits:["added_snapshot","deleted_snapshot","deleted_all_snapshots"],setup(e,{expose:t,emit:n}){const a=e,l=pn(null),s=pn("add"),i=pn(""),o=pn(!1),r=pn(""),c=pn(!0),u=pn(""),d=pn(""),p=pn([]),_=pn("date");let f=NtopUtils.REGEXES.singleword;const h=gi((()=>!new RegExp(f).test(d.value))),m=gi((()=>""==i.value));function g(){if(null!=a.page)return a.page;let e="alerts";return null!=window.location.toString().match(/alert_stats.lua/)||(e="flows"),e}let v=null;function b(){v!=_.value&&(p.value.sort(((e,t)=>"name"==_.value?e.name.localeCompare(t.name):e.utc-t.utc)),p.value.length>0&&(i.value=p.value[0]),v=_.value)}let y=!0;const w=async()=>{let e;if(c.value)e=ntopng_url_manager.get_url_params();else{let t=ntopng_url_manager.get_url_object();delete t.epoch_begin,delete t.epoch_end,e=ntopng_url_manager.obj_to_url_params(t)}let t=g(),l={snapshot_name:d.value,filters:e,page:t};l.csrf=a.csrf;let s=`${http_prefix}/lua/pro/rest/v2/add/filters/snapshot.lua`;try{let e={"Content-Type":"application/json"};await ntopng_utility.http_request(s,{method:"post",headers:e,body:JSON.stringify(l)}),y=!0}catch(e){console.error(e)}$(),n("added_snapshots",l)},x=()=>{$();let e=i.value.filters;if(1==o.value){let t=ntopng_status_manager.get_status(),n=ntopng_url_manager.get_url_object(e);n.epoch_begin=t.epoch_begin,n.epoch_end=t.epoch_end,e=ntopng_url_manager.obj_to_url_params(n)}ntopng_url_manager.replace_url_and_reload(e)},k=async e=>{let t=i.value.name;1==e&&(t="*");let l={snapshot_name:t,page:g()};l.csrf=a.csrf;let s=`${http_prefix}/lua/pro/rest/v2/delete/filters/snapshot.lua`;try{let e={"Content-Type":"application/json"};await ntopng_utility.http_request(s,{method:"post",headers:e,body:JSON.stringify(l)}),y=!0}catch(e){console.error(e)}n(1==e?"deleted_all_snapshots":"deleted_snapshot",l),$()},$=()=>{l.value.close()};t({show:()=>{!async function(){s.value="add",d.value="",c.value=!0,o.value=!1;let e=ntopng_status_manager.get_status(),t=S("snapshots.save_time"),n=ntopng_utility.from_utc_to_server_date_format(1e3*e.epoch_begin,"DD/MM/YYYY HH:mm"),a=ntopng_utility.from_utc_to_server_date_format(1e3*e.epoch_end,"DD/MM/YYYY HH:mm");t=t.replace(/\%begin_time/,n),t=t.replace(/\%end_time/,a),u.value=t;let l=S("snapshots.apply_time");if(l=l.replace(/\%begin_time/,n),l=l.replace(/\%end_time/,a),r.value=l,y){y=!1;let e=g(),t=`${http_prefix}/lua/pro/rest/v2/get/filters/snapshots.lua?page=${e}`,n=await ntopng_utility.http_request(t);p.value=ntopng_utility.object_to_array(n)}b(),p.value.length>0&&(i.value=p.value[0])}(),l.value.show()},close:$}),rl((()=>{}));const S=e=>i18n(e);return(e,t)=>(Ns(),Ms(pp,{onShowed:t[8]||(t[8]=e=>{}),ref_key:"modal_id",ref:l},{title:_a((()=>[qs(X(S("snapshots.manage"))+" ",1),kp])),body:_a((()=>[Ls("ul",$p,[Ls("li",{class:"nav-item",onClick:t[0]||(t[0]=e=>s.value="add")},[Ls("a",{class:q(["nav-link",{active:"add"==s.value}]),href:"#"},X(S("snapshots.add")),3)]),Ls("li",{class:"nav-item",onClick:t[1]||(t[1]=e=>(e=>{0==p.value.length&&"select"==e||(s.value=e)})("select"))},[Ls("a",{disabled:0==p.value.length,class:q(["nav-link",{active:"select"==s.value,"not-allowed":0==p.value.length}]),href:"#"},X(S("snapshots.manage")),11,Sp)])]),"add"==s.value?(Ns(),Is("div",Cp,[Ls("div",Np,[Ls("label",Ap,[Ls("b",null,X(S("snapshots.name"))+":",1)]),Ls("div",Tp,[gl(Ls("input",{pattern:gn(f),placeholder:"",required:"",type:"text",class:"form-control","onUpdate:modelValue":t[2]||(t[2]=e=>d.value=e)},null,8,Ep),[[Po,d.value]])])]),Gs(' <div class="form-group ms-2 me-2 mt-3 row"> '),Gs(' \t<div class="custom-control custom-switch"> '),Gs(' \t  <input type="checkbox" class="custom-control-input whitespace form-check-input" v-model="save_time"> '),Gs(' \t  <label class="custom-control-label ms-1 form-check-label">{{save_time_text}}</label> '),Gs(" \t</div> "),Gs(" </div>       ")])):Gs("v-if",!0),Gs(" action add "),"select"==s.value?(Ns(),Is("div",Pp,[Ls("div",Ip,[Ls("label",Mp,[Ls("b",null,X(S("snapshots.order_by")),1)]),Ls("div",Op,[gl(Ls("select",{class:"form-select",onClick:t[3]||(t[3]=e=>b()),"onUpdate:modelValue":t[4]||(t[4]=e=>_.value=e)},[Ls("option",Up,X(S("snapshots.name")),1),Ls("option",Fp,X(S("snapshots.date")),1)],512),[[Uo,_.value]])])]),Ls("div",Rp,[Ls("label",Dp,[Ls("b",null,X(S("snapshots.select")),1)]),Ls("div",jp,[gl(Ls("select",{class:"form-select","onUpdate:modelValue":t[5]||(t[5]=e=>i.value=e)},[(Ns(!0),Is(ws,null,Sl(p.value,(e=>(Ns(),Is("option",{value:e},X(function(e){let t=1e3*e.utc,n=ntopng_utility.from_utc_to_server_date_format(t,"DD/MM/YYYY");return`${e.name} (${n})`}(e)),9,Lp)))),256))],512),[[Uo,i.value]])])]),Ls("div",zp,[Ls("div",Bp,[gl(Ls("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input","onUpdate:modelValue":t[6]||(t[6]=e=>o.value=e)},null,512),[[Io,o.value]]),Ls("label",Vp,X(r.value),1)])])])):Gs("v-if",!0),Gs(" action select ")])),footer:_a((()=>["add"==s.value?(Ns(),Is("button",{key:0,type:"button",onClick:w,disabled:gn(h),class:"btn btn-primary"},X(S("snapshots.add")),9,qp)):Gs("v-if",!0),"select"==s.value?(Ns(),Is("button",{key:1,onClick:t[7]||(t[7]=e=>k(!0)),type:"button",style:{"text-align":"left","margin-left":"0px"},class:"btn btn-danger start-0 position-absolute ms-3"},X(S("snapshots.delete_all")),1)):Gs("v-if",!0),"select"==s.value?(Ns(),Is("button",{key:2,type:"button",onClick:k,disabled:gn(m),class:"btn btn-danger"},X(S("snapshots.delete")),9,Hp)):Gs("v-if",!0),"select"==s.value?(Ns(),Is("button",{key:3,type:"button",onClick:x,disabled:gn(m),class:"btn btn-primary"},X(S("snapshots.apply")),9,Gp)):Gs("v-if",!0)])),_:1},512))}};dp("\ninput[data-v-089b0491]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-089b0491] {\n  cursor: not-allowed;\n}\n"),Kp.__scopeId="data-v-089b0491",Kp.__file="http_src/vue/modal-snapshot.vue";const Wp=e=>(ua("data-v-185590b6"),e=e(),da(),e),Jp={class:"form-group ms-2 me-2 mt-3 row"},Yp={class:"col-11"},Xp={class:"col-form-label"},Zp=[Wp((()=>Ls("button",{type:"button",class:"btn border"},[Ls("span",null,[Ls("i",{class:"fas fa-trash"})])],-1)))],Qp={class:"container"},e_={class:"row custom-ms me-2 mt-1"},t_={class:"col-5"},n_=["onUpdate:modelValue"],a_={class:"custom-control-label ms-1 form-check-label"},l_={class:"col-2"},s_=["onUpdate:modelValue"],i_=Wp((()=>Ls("label",{class:"custom-control-label ms-1 form-check-label"},"Past ",-1))),o_={class:"col-2"},r_=["onUpdate:modelValue"],c_=Wp((()=>Ls("label",{class:"custom-control-label ms-1 form-check-label"},"Avg ",-1))),u_={class:"col-3"},d_=["onUpdate:modelValue"],p_=Wp((()=>Ls("label",{class:"custom-control-label ms-1 form-check-label"},"95th Perc ",-1)));var __={__name:"list-timeseries",props:{id:String,timeseries:Array,title:String,show_delete_button:Boolean},emits:["delete_ts","update:timeseries"],setup(e,{emit:t}){const n=e;function a(){console.log(n.timeseries),t("update:timeseries",n.timeseries)}function l(){t("delete_ts",n.id)}return(t,n)=>(Ns(),Is("div",null,[Ls("div",Jp,[Ls("div",Yp,[Ls("label",Xp,[Ls("b",null,X(e.title),1)])]),e.show_delete_button?(Ns(),Is("div",{key:0,class:"col-1",onClick:l},Zp)):Gs("v-if",!0)]),Ls("div",Qp,[(Ns(!0),Is(ws,null,Sl(e.timeseries,(e=>(Ns(),Is("div",e_,[Ls("div",t_,[gl(Ls("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:a,"onUpdate:modelValue":t=>e.raw=t},null,40,n_),[[Io,e.raw]]),Ls("label",a_,X(e.label),1)]),Ls("div",l_,[gl(Ls("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:a,"onUpdate:modelValue":t=>e.past=t},null,40,s_),[[Io,e.past]]),i_]),Ls("div",o_,[gl(Ls("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:a,"onUpdate:modelValue":t=>e.avg=t},null,40,r_),[[Io,e.avg]]),c_]),Ls("div",u_,[gl(Ls("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:a,"onUpdate:modelValue":t=>e.perc_95=t},null,40,d_),[[Io,e.perc_95]]),p_])])))),256))])]))}};dp("\n.custom-ms[data-v-185590b6] {\n  margin-left: 2rem !important;\n}\n.inline-block[data-v-185590b6] {\n    display: inline-block;\n    margin-right: 1rem;\n}\n.border[data-v-185590b6] {\n    border-style: solid !important;\n}\n"),__.__scopeId="data-v-185590b6",__.__file="http_src/vue/list-timeseries.vue";const f_=f.getFormatter(f.types.bytes.id),h_="page-stats-action-link",m_="page-stats-action-jump-historical",g_={table_value:"interface",title:i18n("page_stats.top.top_applications"),view:"top_protocols",default_sorting_columns:2,default:!0,columns:[{columnName:i18n("application"),name:"application",data:"protocol",handlerId:h_,render:function(e,t,n){let a=this,l={handlerId:h_,onClick:function(){console.log(e),console.log(n);let t=`top:${n.ts_schema}`;a.add_metric_from_metric_schema(t,n.ts_query)}};return O.createLinkCallback({text:e.label,handler:l})}},{columnName:i18n("traffic"),name:"traffic",data:"traffic",orderable:!1,render:e=>f_(e)},{columnName:i18n("percentage"),name:"traffic_perc",data:"percentage",render:e=>{const t=e.toFixed(1);return n.createProgressBar(t)}},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:m_,render_if:function(e){return e.is_history_enabled},render:function(e,t,n){let a=this;const l={handlerId:m_,onClick:function(){a.status;let e=y.serialize_param("l7proto",`${n.protocol.id};eq`),t=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${a.status.epoch_begin}&epoch_end=${a.status.epoch_end}&${e}`,l=a.source_type,s=a.source_array,i="",o=l.source_def_array.map(((e,t)=>{let n=s[t];return"ifid"==e.value?y.serialize_param("ifid",n.value):"host"==e.value?y.serialize_param("ip",`${n.value};eq`):void 0}));i=o.join("&"),t=`${t}&${i}`,console.log(t),window.open(t)}};return O.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:l}])}}]},v_={table_value:"interface",title:i18n("page_stats.top.top_categories"),view:"top_categories",default_sorting_columns:2,columns:[{columnName:i18n("page_stats.top.category"),name:"category",data:"category",handlerId:h_,render:function(e,t,n){let a=this,l={handlerId:h_,onClick:function(){console.log(e),console.log(n);let t=`top:${n.ts_schema}`;a.add_metric_from_metric_schema(t,n.ts_query)}};return O.createLinkCallback({text:e.label,handler:l})}},{columnName:i18n("traffic"),name:"traffic",data:"traffic",orderable:!1,render:e=>f_(e)},{columnName:i18n("percentage"),name:"traffic_perc",data:"percentage",render:e=>{const t=e.toFixed(1);return n.createProgressBar(t)}},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:m_,render_if:function(e){return e.is_history_enabled},render:function(e,t,n){let a=this;const l={handlerId:m_,onClick:function(){a.status;let e=y.serialize_param("l7cat",`${n.category.id};eq`),t=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${a.status.epoch_begin}&epoch_end=${a.status.epoch_end}&${e}`,l=a.source_type,s=a.source_array,i="",o=l.source_def_array.map(((e,t)=>{let n=s[t];return"ifid"==e.value?y.serialize_param("ifid",n.value):"host"==e.value?y.serialize_param("ip",`${n.value};eq`):void 0}));i=o.join("&"),t=`${t}&${i}`,console.log(t),window.open(t)}};return O.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:l}])}}]},b_=[g_,v_,{table_value:"interface",title:i18n("page_stats.top.top_senders"),view:"top_senders",default_sorting_columns:2,columns:[{columnName:i18n("page_stats.top.host_name"),name:"host_name",data:"host",handlerId:h_,render:function(e,t,n){let a=this,l={handlerId:h_,onClick:async function(){console.log(e),console.log(n);a.add_ts_group_from_source_value_dict("host",n.tags,"host:traffic")}};return a.sources_types_enabled.host?O.createLinkCallback({text:e.label,handler:l}):e.label}},{columnName:i18n("page_stats.top.sent"),name:"sent",data:"traffic",orderable:!1,render:e=>f_(e)},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:m_,render_if:function(e){return e.is_history_enabled},render:function(e,t,n){let a=this;const l={handlerId:m_,onClick:function(){a.status;let e=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${a.status.epoch_begin}&epoch_end=${a.status.epoch_end}`;a.source_type,a.source_array;let t="",l=[];for(let e in n.tags){let t=n.tags[e],a="";"ifid"==e?a=y.serialize_param(e,t):"host"==e&&(a=y.serialize_param("ip",`${t};eq`)),l.push(a)}t=l.join("&"),e=`${e}&${t}`,console.log(e),window.open(e)}};return O.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:l}])}}]},{table_value:"interface",title:i18n("page_stats.top.top_receivers"),view:"top_receivers",default_sorting_columns:2,columns:[{columnName:i18n("page_stats.top.host_name"),name:"host_name",data:"host",handlerId:h_,render:function(e,t,n){let a=this,l={handlerId:h_,onClick:async function(){console.log(e),console.log(n);a.add_ts_group_from_source_value_dict("host",n.tags,"host:traffic")}};return a.sources_types_enabled.host?O.createLinkCallback({text:e.label,handler:l}):e.label}},{columnName:i18n("page_stats.top.received"),name:"received",data:"traffic",orderable:!1,render:e=>f_(e)},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:m_,render_if:function(e){return e.is_history_enabled},render:function(e,t,n){let a=this;const l={handlerId:m_,onClick:function(){a.status;let e=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${a.status.epoch_begin}&epoch_end=${a.status.epoch_end}`;a.source_type,a.source_array;let t="",l=[];for(let e in n.tags){let t=n.tags[e],a="";"ifid"==e?a=y.serialize_param(e,t):"host"==e&&(a=y.serialize_param("ip",`${t};eq`)),l.push(a)}t=l.join("&"),e=`${e}&${t}`,console.log(e),window.open(e)}};return O.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:l}])}}]}];let y_=b_.find((e=>"top_protocols"==e.view));null!=y_&&(y_=g.clone(y_),y_.table_value="host");const w_=[y_],x_=f.getFormatter(f.types.bytes.id),k_=f.getFormatter(f.types.bps.id),$_="page-stats-action-link",S_={table_value:"snmp",table_source_def_value_dict:{ifid:!0,device:!0,if_index:!1},title:i18n("page_stats.top.top_interfaces"),view:"top_snmp_ifaces",default_sorting_columns:4,f_get_label:e=>{let t,n=e.source_type.source_def_array;for(let a=0;a<n.length;a+=1)if("device"==n[a].value){t=e.source_array[a].label;break}return`${i18n("page_stats.top.top_interfaces")} - SNMP ${i18n("page_stats.source_def.device")} ${t}`},default:!0,columns:[{columnName:i18n("interface"),name:"interface",data:"interface",handlerId:$_,render:function(e,t,n){let a=this,l={handlerId:$_,onClick:function(){a.add_ts_group_from_source_value_dict("snmp_interface",n.tags,"snmp_if:traffic")}},s=`${e.label} (${e.id})`;return O.createLinkCallback({text:s,handler:l})}},{columnName:i18n("page_stats.top.sent"),name:"sent",data:"sent",orderable:!0,render:e=>x_(e)},{columnName:i18n("page_stats.top.received"),name:"received",data:"rcvd",orderable:!0,render:e=>x_(e)},{columnName:i18n("traffic"),name:"traffic",data:"total",orderable:!0,render:e=>x_(e)},{columnName:i18n("percentage"),name:"traffic_perc",data:"percentage",render:e=>{const t=e.toFixed(1);return n.createProgressBar(t)}},{columnName:i18n("page_stats.top.throughput"),name:"throughput",data:"throughput",orderable:!0,render:e=>k_(e)}]},C_=[S_],N_={hide:"hide",select:"select",input:"input"},A_={ifid:e=>{let t=e.ifname;return null!=e.name&&(t=e.name),{label:t,value:e.ifid}},pool:e=>{let t=e.pool_id;return null!=e.name&&(t=e.name),{label:t,value:e.pool_id}},am_host:e=>({label:`${e.label} ${e.measurement}`,value:`${e.host},metric:${e.measurement_key}`})},T_={interface:b_,host:w_,snmp_interface:C_,snmp_device:C_},E_=[{id:"interface",regex_page_url:"lua/if_stats",label:i18n("page_stats.source_def.interface"),query:"iface",source_def_array:[{main_source_def:!0,label:i18n("page_stats.source_def.interface"),regex_type:null,sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",sources_function:null,value:"ifid",value_url:null,value_map_sources_res:null,disable_tskey:null,f_get_value_url:null,f_set_value_url:null,ui_type:N_.select}]},{id:"host",regex_page_url:"lua/host_details",label:i18n("page_stats.source_def.host"),table_value:"host",query:"host",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:N_.select},{main_source_def:!0,label:i18n("page_stats.source_def.host"),regex_type:"ip",value:"host",ui_type:N_.input}]},{id:"mac",regex_page_url:"lua/mac_details",label:i18n("page_stats.source_def.mac"),query:"mac",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:N_.select},{main_source_def:!0,label:i18n("page_stats.source_def.mac"),regex_type:"macAddress",value:"mac",value_url:"host",ui_type:N_.input}]},{id:"network",regex_page_url:"lua/network_details",label:i18n("page_stats.source_def.network"),query:"subnet",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:N_.select},{main_source_def:!0,label:i18n("page_stats.source_def.network"),regex_type:"text",value:"subnet",ui_type:N_.input}]},{id:"as",regex_page_url:"lua/as_details",label:i18n("page_stats.source_def.as"),query:"asn",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:N_.select},{main_source_def:!0,label:i18n("page_stats.source_def.as"),regex_type:"text",value:"asn",ui_type:N_.input}]},{id:"country",regex_page_url:"lua/country_details",label:i18n("page_stats.source_def.country"),query:"country",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:N_.select},{main_source_def:!0,label:i18n("page_stats.source_def.country"),regex_type:"text",value:"country",ui_type:N_.input}]},{id:"os",regex_page_url:"lua/os_details",label:i18n("page_stats.source_def.os"),query:"os",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:N_.select},{main_source_def:!0,label:i18n("page_stats.source_def.os"),regex_type:"text",value:"os",ui_type:N_.input}]},{id:"vlan",regex_page_url:"lua/vlan_details",label:i18n("page_stats.source_def.vlan"),query:"vlan",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:N_.select},{main_source_def:!0,label:i18n("page_stats.source_def.vlan"),regex_type:"text",value:"vlan",ui_type:N_.input}]},{id:"pool",regex_page_url:"lua/pool_details",label:i18n("page_stats.source_def.pool"),query:"host_pool",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:N_.select},{main_source_def:!0,label:i18n("page_stats.source_def.pool"),sources_url:"lua/rest/v2/get/host/pools.lua",value:"pool",ui_type:N_.select}]},{id:"system",regex_page_url:"lua/system_stats",label:i18n("page_stats.source_def.system"),query:"system",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"System",value:-1}],value:"ifid",ui_type:N_.hide}]},{id:"profile",regex_page_url:"lua/profile_details",label:i18n("page_stats.source_def.profile"),query:"profile",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:N_.select},{main_source_def:!0,label:i18n("page_stats.source_def.profile"),regex_type:"text",value:"profile",ui_type:N_.input}]},{id:"redis",regex_page_url:"lua/monitor/redis_monitor.lua",label:i18n("page_stats.source_def.redis"),query:"redis",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"Redis",value:-1}],value:"ifid",ui_type:N_.hide}]},{id:"influx",regex_page_url:"lua/monitor/influxdb_monitor.lua",label:i18n("page_stats.source_def.influx"),query:"influxdb",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"Influx",value:-1}],value:"ifid",ui_type:N_.hide}]},{id:"active_monitoring",regex_page_url:"lua/monitor/active_monitoring_monitor.lua",label:i18n("page_stats.source_def.active_monitoring"),query:"am",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"",value:-1}],value:"ifid",ui_type:N_.hide},{main_source_def:!0,label:i18n("page_stats.source_def.active_monitoring"),sources_url:"lua/rest/v2/get/am_host/list.lua",value:"host",disable_tskey:!0,value_map_sources_res:"am_host",ui_type:N_.select}]},{id:"snmp_interface",id_group:"snmp",regex_page_url:"lua/pro/enterprise/snmp_interface_details",label:i18n("page_stats.source_def.snmp_interface"),query:"snmp_interface",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"",value:-1}],value:"ifid",ui_type:N_.hide},{label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"host",ui_type:N_.input},{main_source_def:!0,label:i18n("page_stats.source_def.snmp_interface"),regex_type:"text",value:"if_index",value_url:"snmp_port_idx",ui_type:N_.input}]},{id:"snmp_device",id_group:"snmp",regex_page_url:"lua/pro/enterprise/snmp_device_details",label:i18n("page_stats.source_def.snmp_device"),query:"snmp_device",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"",value:-1}],value:"ifid",ui_type:N_.hide},{main_source_def:!0,label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"host",ui_type:N_.input}]},{id:"flow_device",regex_page_url:"lua/pro/enterprise/flowdevices_stats",label:i18n("page_stats.source_def.flow_device"),query:"flowdev",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:N_.select},{main_source_def:!0,label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:N_.input}]},{id:"flow_interface",regex_page_url:"lua/pro/enterprise/flowdevice_interface_details",label:i18n("page_stats.source_def.flow_interface"),query:"flowdev_port",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:N_.select},{label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:N_.input},{main_source_def:!0,label:i18n("page_stats.source_def.port"),regex_type:"port",value:"port",value_url:"snmp_port_idx",ui_type:N_.input}]},{id:"sflow_device",regex_page_url:"lua/pro/enterprise/sflowdevices_stats",label:i18n("page_stats.source_def.sflow_device"),query:"sflowdev",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:N_.select},{main_source_def:!0,label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:N_.input}]},{id:"sflow_interface",regex_page_url:"lua/pro/enterprise/sflowdevice_interface_details",label:i18n("page_stats.source_def.sflow_interface"),query:"sflowdev_port",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:N_.select},{label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:N_.input},{main_source_def:!0,label:i18n("page_stats.source_def.port"),regex_type:"port",value:"port",value_url:"snmp_port_idx",ui_type:N_.input}]},{id:"observation_point",regex_page_url:"lua/pro/enterprise/observation_points",label:i18n("page_stats.source_def.observation_point"),query:"obs_point",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:N_.select},{main_source_def:!0,label:i18n("page_stats.source_def.observation_point"),regex_type:"text",value:"obs_point",value_url:"observation_point",ui_type:N_.input}]},{id:"pod",regex_page_url:"lua/pod_details",label:i18n("page_stats.source_def.pod"),query:"pod",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:N_.select},{main_source_def:!0,label:i18n("page_stats.source_def.pod"),regex_type:"text",value:"pod",ui_type:N_.input}]},{id:"container",regex_page_url:"lua/container_details",label:i18n("page_stats.source_def.container"),query:"container",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:N_.select},{main_source_def:!0,label:i18n("page_stats.source_def.container"),regex_type:"text",value:"container",ui_type:N_.input}]}],P_={ui_types:N_,sources_url_el_to_source:A_,sources_types:E_,sources_types_tables:T_},I_=e=>{let t=[];e.forEach((e=>{let n=function(e){let t=[];e.timeseries.forEach((e=>{t.push(`${e.id}=${e.raw}:${e.past}:${e.avg}:${e.perc_95}`)}));let n=e.metric.schema;null!=e.metric.query&&(n=`${n}+${e.metric.query}`);let a=t.join("|"),l=e.source_array.map((e=>e.value)).join("+");return`${e.source_type.id};${l};${n};${a}`}(e);t.push(n)}));let n=t.join(";;");y.set_key_to_url("timeseries_groups",n)};const M_=async(e,t)=>{if(null==t&&(t=y.get_url_entry("timeseries_groups")),null==t||""==t)return null;let n=t.split(";;");if(!n?.length>0)return null;let a=Promise.all(n.map((async e=>await F_(e))));return a},O_=(e,t,n)=>{let a=R_(e,t,n),l=[];for(let e in n.timeseries){let t=n.timeseries[e];l.push({id:e,label:t.label,raw:!0,past:!1,avg:!1,perc_95:!1})}return{id:a,source_type:e,source_array:t,metric:n,timeseries:l}},U_=async(e,t)=>{let n=X_(),a=await z_(e,n),l=await Y_(e,n,a),s=Q_(l,t);return[O_(n,a,s)]};async function F_(e){let t=e.split(";"),n=t[0],a=t[1].split("+"),l=t[2].split("+");l.length<2&&l.push(null);let s=t[3],i=L_(n),o=await V_(http_prefix,i,a),r=await Z_(http_prefix,i,o,l[0],l[1]),c=function(e,t){let n=e.split("|"),a=/(.+)=(.+):(.+):(.+):(.+)/,l=[];return n.forEach((e=>{let n=a.exec(e),s=n[1],i=t.timeseries[s].label,o=JSON.parse(n[2]),r=JSON.parse(n[3]),c=JSON.parse(n[4]),u=JSON.parse(n[5]);l.push({id:s,label:i,raw:o,past:r,avg:c,perc_95:u})})),l}(s,r);return{id:R_(i,o,r),source_type:i,source_array:o,metric:r,timeseries:c}}const R_=(e,t,n,a,l)=>{let s="";null!=n&&(s=n.schema,null!=n.query&&(s=`${s} - ${n.query}`));let i=e.source_def_array,o=t.map(((e,t)=>{let n=i[t].value;return null==a||a[n]?e.value:null})).filter((e=>null!=e)).join("_"),r=e.id;return l&&null!=e.id_group&&(r=e.id_group),`${r} - ${o} - ${s}`};const D_=P_.sources_url_el_to_source,j_=P_.sources_types,L_=e=>j_.find((t=>t.id==e)),z_=async(e,t)=>{let n=K_(t);return await V_(e,t,n)};async function B_(e,t,n){let a=t.source_def_array.map((e=>n[e.value]));return await V_(e,t,a)}const V_=async(e,t,n)=>{null==t&&(t=X_());let a,l=[];for(let s=0;s<n.length;s+=1){let i=n[s],o=t.source_def_array[s];if(o.sources_url||o.sources_function){let n=[];n=o.sources_url?await H_(e,t.id,o):o.sources_function(),a=n.find((e=>e.value==i)),null==a&&(a=n[0])}else a={label:i,value:i};l.push(a)}return l};let q_={};const H_=async(e,t,a)=>{let l=`${t}_${a.value}`;if(null==q_[l])if(a.sources_url){let t=`${e}/${a.sources_url}`;q_[l]=g.http_request(t)}else{if(!a.sources_function)return[];q_[l]=a.sources_function()}let s=await q_[l];if(a.sources_url){let e=D_[a.value_map_sources_res];if(null==e&&(e=D_[a.value]),null==e)throw`:Error: metrics-manager.js, missing sources_url_to_source ${a.value} key`;s=s.map((t=>e(t)))}return s.sort(n.sortAlphabetically)};function G_(e,t){e.source_def_array.forEach((e=>{let n=t[e.value];null!=n&&(null!=e.f_set_value_url?e.f_set_value_url():null!=e.value_url?y.set_key_to_url(e.value_url,n):y.set_key_to_url(e.value,n))}))}const K_=e=>(null==e&&(e=X_()),e.source_def_array.map((e=>{if(null!=e.f_get_value_url)return e.f_get_value_url();let t=e.value_url;return null==t&&(t=e.value),y.get_url_entry(t)})));let W_={},J_=null;const Y_=async(e,t,n)=>{let a=`${y.get_url_entry("epoch_begin")}_${y.get_url_entry("epoch_end")}`;null==t&&(t=X_()),null==n&&(n=await z_(e,t));let l=function(e,t,n){let a=t.source_def_array.map(((e,t)=>`${e.value}=${n[t].value}`)).join("&");return`${e}/lua/rest/v2/get/timeseries/type/consts.lua?query=${t.query}&${a}`}(e,t,n),s=function(e,t){let n=t.map((e=>e.value)).join("_");return`${e.id}_${n}`}(t,n);a!=J_&&(W_[s]=null,J_=a),null==W_[s]&&(W_[s]=g.http_request(l));let i=await W_[s];return 0==i.some((e=>1==e.default_visible))&&(i[0].default_visible=!0),g.clone(i)},X_=()=>{let e=window.location.pathname;for(let t=0;t<j_.length;t+=1){if(1==new RegExp(j_[t].regex_page_url).test(e))return j_[t]}throw`source_type not found for ${e}`},Z_=async(e,t,n,a,l)=>(await Y_(e,t,n)).find((e=>e.schema==a&&e.query==l)),Q_=(e,t)=>{let n;return null!=t&&(n=e.find((e=>e.schema==t))),null==n&&(n=e.find((e=>1==e.default_visible))),null!=n?n:e[0]},ef={set_timeseries_groups_in_url:I_,get_timeseries_groups_from_url:M_,get_default_timeseries_groups:U_,get_ts_group:O_,get_ts_group_id:R_,sources_types:j_,sources_types_tables:P_.sources_types_tables,get_source_type_from_id:L_,get_current_page_source_type:X_,get_sources:H_,get_default_source_array:z_,get_source_array_from_value_dict:B_,get_source_array_from_value_array:V_,get_default_source_value_array:K_,get_metrics:Y_,get_metric_from_schema:Z_,get_default_metric:Q_,set_source_value_object_in_url:G_,ui_types:P_.ui_types};function tf(e,t){let n=e.start,a=1e3*e.step;e.series.forEach((e=>{e.name=e.label,delete e.type;let t=1e3*n;e.data=e.data.map((e=>{let n={x:t,y:e};return t+=a,n}))})),e.xaxis={labels:{show:!0},axisTicks:{show:!0}},e.yaxis={labels:{formatter:f.getFormatter(t.measure_unit)},axisBorder:{show:!0},title:{text:t.measure_unit}}}function nf(e){return`${e.label}`}function af(e,t){return"number"==e?t:e}function lf(e,t,n,a){null==e&&(e=t);let l="";if(null!=e&&(l=`${e} `),0==a)return e;let s=ff(n);return`${`${n.source_array[s].label}`} ${l}(${af(n.metric.measure_unit,n.metric.scale)})`}function sf(e){return`${e.measure_unit}_${e.scale}`}const of=["#C6D9FD","#90EE90","#EE8434","#C95D63","#AE8799","#717EC3","#496DDB","#5A7ADE","#6986E1","#7791E4","#839BE6","#8EA4E8"];const rf={"1_chart":{value:"1_chart",label:i18n("page_stats.layout_1_per_all")},"1_chart_x_yaxis":{value:"1_chart_x_yaxis",label:i18n("page_stats.layout_1_per_y")},"1_chart_x_metric":{value:"1_chart_x_metric",label:i18n("page_stats.layout_1_per_1")}};function cf(e){return rf[e]||null}function uf(e,t,n,a){if(n.value==rf["1_chart"].value){let n=[pf(e,t,a)];return df(n),n}if(n.value==rf["1_chart_x_yaxis"].value){let n={};t.forEach(((t,a)=>{let l=sf(t.metric),s={tsGroup:t,tsOptions:e[a]};null==n[l]?n[l]=[s]:n[l].push(s)}));let l=[];for(let e in n){let t=n[e],s=t.map((e=>e.tsOptions)),i=t.map((e=>e.tsGroup)),o=pf(s,i,a);l.push(o)}return df(l),l}if(n.value==rf["1_chart_x_metric"].value){let n=[];return e.forEach(((e,l)=>{let s=pf([e],[t[l]],a);n.push(s)})),df(n),n}return[]}function df(e){let t=1==e.length;e.forEach((e=>{t||e.yaxis.filter((e=>e.show)).forEach((e=>{e.labels.minWidth=60})),e.yaxis.length<2||(e.yaxis.forEach((e=>{e.labels.offsetX=-20})),e.grid.padding.left=-7)}))}function pf(e,t,n){if(e.length!=t.length)return void console.error(`Error in timeseries-utils:tsArrayToApexOptions: tsOptionsArray ${e} different length from tsGrpupsArray ${t}`);let a=[],l=[],s={};!function(e){e[0]?.source?.name}(t);let i=null;e.forEach(((e,o)=>{let r=t[o];o>0&&(i="line");let c=function(e,t,n,a,l){let s=1e3*e.start,i=1e3*e.step,o=[],r=Object.keys(t.metric.timeseries);return"top"!=t.metric.type&&e.series?.length!=r.length&&(e.series=r.map(((t,n)=>{let a=e.series.find((e=>nf(e)==t));return null!=a?a:{label:t,data:[null]}}))),e.series.forEach(((r,c)=>{let u=nf(r),d=t.metric.timeseries[u],p=1;1==d.invert_direction&&(p=-1);let _=e=>{let t=s,n=e.map((e=>{let n={x:t,y:e*p};return t+=i,n}));return n},f=t.timeseries?.find((e=>e.id==u)),h=d.label;null!=r.ext_label&&"top"==t.metric.type&&(h=r.ext_label);let m=lf(h,u,t,n);if(null==f||1==f.raw){let e=_(r.data),t=d.draw_type;null==t&&null!=a?t=a:null==t&&(t="area");let n={id:u,colorPalette:0,color:d.color,type:t,name:m,data:e};o.push(n)}if(1==f?.past&&g.is_object(e.additional_series)){let t=g.object_to_array(e.additional_series)[0],n={id:u,colorPalette:1,color:d.color,type:"line",name:`${m} ${l} Ago`,data:_(t)};o.push(n)}let v=(e,t,n)=>{if(null==n)return null;let a=`${m} (${e})`;null!=n&&(n*=p);let l=s,o=r.data.map((e=>{let t={x:l,y:n};return l+=i,t}));return{id:t,name:a,colorPalette:1,color:d.color,type:"line",data:o}};if(1==f?.avg){let t=e.statistics?.by_serie[c].average,n=v("Avg",u,t);o.push(n)}if(1==f?.perc_95){let t=e.statistics?.by_serie[c]["95th_percentile"],n=v("95th Perc",u,t);o.push(n)}})),o}(e,r,!0,i,n);a=a.concat(c);let u=function(e,t,n){let a=t.metric,l=sf(a),s=!1,i=Object.keys(n).length,o=[];for(let e in t.metric.timeseries)s|=t.metric.timeseries[e].invert_direction;return e.forEach((e=>{let r=n[l];if(null==r){let r={seriesName:e.name,show:!0,labels:{formatter:f.getFormatter(a.measure_unit,s)},axisTicks:{show:!0},axisBorder:{show:!0},title:{text:af(t.metric.measure_unit,t.metric.scale)},opposite:i%2==1};n[l]=r.seriesName,o.push(r)}else o.push({seriesName:r,labels:{formatter:f.getFormatter(a.measure_unit,s)},show:!1})})),o}(c,r,s);l=l.concat(u)})),function(e){let t=0,n=0,a=of,l=d3v7.schemeCategory10;e.forEach((e=>{0==e.colorPalette?(e.color=a[t%a.length],t+=1):1==e.colorPalette&&(e.color=l[n%l.length],n+=1)}))}(a),function(e,t){let n={},a={};for(let l=0;l<t.length;l+=1){let s=t[l],i=e[l],o=i.seriesName;null==n[o]&&(n[o]=[],a[o]={min:Number.MAX_SAFE_INTEGER,max:Number.MIN_SAFE_INTEGER}),n[o].push(i);let r=a[o];s.data.forEach((e=>{r.max=Math.max(r.max,e.y),r.min=Math.min(r.min,e.y)}))}let l=(e,t)=>{if(0==e||null==e||e==Number.MAX_SAFE_INTEGER||e==Number.MIN_SAFE_INTEGER)return 0;let n=e/100*3;return t&&e>0||!t&&e<0?e+n:e-n};for(let e in n){let t=n[e],s=a[e];s.min=l(s.min,!1),s.max=l(s.max,!0),t.forEach((e=>{e.min=s.min,e.max=s.max}))}}(l,a);let o=function(e,t){return{chart:{id:g.get_random_string(),group:"timeseries"},grid:{padding:{},row:{}},fill:{opacity:.9,type:"solid",pattern:{strokeWidth:10}},stroke:{show:!0,lineCap:"butt",width:4},legend:{show:!0,showForSingleSeries:!0,position:"top",horizontalAlign:"right",onItemClick:{toggleDataSeries:!1}},series:e,yaxis:t,xaxis:{labels:{show:!0},axisTicks:{show:!0}}}}(a,l);return o}function _f(e,t,n){let a=e.source_type.source_def_array.map(((t,a)=>{if(null!=n&&!n[t.value])return null;let l=e.source_array[a].value;return`${t.value}:${l}`})).filter((e=>null!=e)).join(",");return t||null==e.metric.query||(a=`${a},${e.metric.query}`),a}function ff(e){let t=e.source_type.source_def_array;for(let e=0;e<t.length;e+=1){if(1==t[e].main_source_def)return e}return 0}async function hf(e,t,n,a,l){let s,i={epoch_begin:t.epoch_begin,epoch_end:t.epoch_end};if(l){let t={zoom:n,initial_point:!0,limit:180,version:4,ts_compare:n},l=`${e}/lua/pro/rest/v2/get/timeseries/ts_multi.lua`,o={ts_requests:a.map((e=>{let t=ff(e),n={ts_query:_f(e),ts_schema:`${e.metric.schema}`};return e.source_type.source_def_array[t].disable_tskey||(n.tskey=e.source_array[t].value),n})),...i,...t},r={"Content-Type":"application/json"};s=await g.http_request(l,{method:"post",headers:r,body:JSON.stringify(o)})}else{let t=`${e}/lua/rest/v2/get/timeseries/ts.lua`,l=`ts_compare=${n}&version=4&zoom=${n}&initial_point=true&limit=180`,o=a[0],r=ff(o),c=_f(o),u={...i,ts_query:c,ts_schema:`${o.metric.schema}`};o.source_type.source_def_array[r].disable_tskey||(u.tskey=o.source_array[r].value);let d=`${t}?${y.add_obj_to_url(u,l)}`;s=[await g.http_request(d)]}return s}const mf={groupsOptionsModesEnum:rf,tsToApexOptions:tf,tsArrayToApexOptions:pf,tsArrayToApexOptionsArray:uf,getGroupOptionMode:cf,getSerieId:nf,getSerieName:lf,getTsChartsOptions:hf,getTsQuery:_f,getMainSourceDefIndex:ff},gf=n;function vf(e){if("text"==e)return".*";if("ip"==e){let e=gf.REGEXES.ipv4,t=e.replace("$","@[0-9]{0,5}$"),n=gf.REGEXES.ipv6,a=n.replaceAll("$","@[0-9]{0,5}$");return`(${e})|(${t})|(${n})|(${a})`}return gf.REGEXES[e]}const bf={get_data_pattern:vf},yf={class:"nav nav-tabs"},wf={class:"form-group ms-2 me-2 mt-3 row"},xf={class:"form-group row"},kf={class:"col-form-label col-sm-4"},$f={class:"col-sm-8"},Sf={key:0,class:"form-group ms-2 me-2 mb-2 mt-3 row"},Cf={class:"form-group row"},Nf={class:"col-form-label col-sm-4"},Af={class:"col-sm-8"},Tf=["title"],Ef={key:0,class:"form-group mt-2 row"},Pf={class:"col-form-label col-sm-4"},If={class:"col-sm-8"},Mf={key:1,class:"form-group mt-2 row"},Of={class:"col-form-label col-sm-4"},Uf={class:"col-sm-8"},Ff=["onUpdate:modelValue","pattern"],Rf={class:"form-group row mt-2",style:{"text-align":"end"}},Df={class:"col-sm-12"},jf=["disabled"],Lf={class:"form-group ms-2 me-2 mt-3 row"},zf={class:"form-group row"},Bf={class:"col-form-label col-sm-4"},Vf={class:"col-sm-8"};var qf={__name:"modal-timeseries",props:{sources_types_enabled:Object},emits:["apply"],setup(e,{expose:t,emit:n}){const a=e,l=pn(null),s=pn(null),i=pn("select");let o=ef.get_current_page_source_type();const r=ef.sources_types,c=pn(o),u=ef.ui_types,d=pn([]),p=pn([]),_=pn([]),f=pn(""),h=pn([]),m=pn(!1),v=gi((()=>{if(0==m.value)return!1;for(let e=0;e<h.value.length;e+=1){let t=h.value[e];if(null==t)continue;let n=new RegExp(t),a=_.value[e];if(0==n.test(a))return!1}return!0})),b=pn(!1),y=pn([]),w=pn({}),x=pn([]),k=pn([]);let $=null;ol((()=>{r.forEach((e=>{let t=a.sources_types_enabled[e.id];null!=t&&0!=t||(e.disabled=!0)}))})),rl((async()=>{$=async function(){console.log("INIT MODAL TIMESERIES"),await C(),P()}()}));function S(e){i.value=e}async function C(){m.value=!1,function(){let e=c.value?.source_def_array.map((e=>e.regex_type));null==e&&(e=[]);h.value=e.map((e=>null==e?null:bf.get_data_pattern(e)))}(),function(){let e=c.value;b.value=e.source_def_array.map((e=>e.ui_type==u.hide)).every((e=>1==e))}(),await async function(){let e=c.value.source_def_array,t=[];for(let n=0;n<e.length;n+=1){let a=await ef.get_sources(http_prefix,c.value.id,e[n]);t.push(a)}let n=await ef.get_default_source_array(http_prefix,c.value);p.value=n,d.value=t,_.value=n.map((e=>e.value)),T()}(),await E()}async function N(){m.value=!1,_.value.forEach(((e,t)=>{if(c.value.source_def_array[t].ui_type==u.input){let n=p.value[t];n.value=e,n.label=e}})),await async function(){await E()}(),T()}function A(){m.value=!0}function T(){f.value=`${p.value.filter((e=>null!=e.label&&""!=e.label)).map((e=>e.label)).join(" - ")}`}async function E(){y.value=await ef.get_metrics(http_prefix,c.value,p.value),y.value.sort(NtopUtils.sortAlphabetically),w.value=ef.get_default_metric(y.value)}function P(e){k.value=[];let t=w.value.timeseries;for(let e in t)k.value.push({id:e,label:t[e].label,raw:!0,past:!1,avg:!1,perc_95:!1})}function I(e){let t=e.source_type.label,n=mf.getMainSourceDefIndex(e);return`${t} - ${e.source_array[n].label} - ${e.metric.label}`}function M(e){let t,n,a;null==e?(t=c.value,n=p.value,a=w.value):(t=e.source_type,n=e.source_array,a=e.metric);let l=ef.get_ts_group_id(t,n,a);return console.log(`modal-timeseries: id = ${l}`),l}const O=e=>{x.value=x.value.filter((t=>M(t)!=e))},U=(e,t)=>{let a=x.value.findIndex((t=>t.id==e.id));a<0?x.value.push(e):x.value[a]=e,t&&n("apply",x.value)},F=()=>{if("add"==i.value){let e={id:M(),source_type:c.value,source_array:p.value,metric:w.value,timeseries:g.clone(k.value)};U(e)}n("apply",x.value),R()},R=()=>{l.value.close()},D=e=>i18n(e);return t({show:async e=>{console.log(w.value),x.value=e,await $,i.value="select",l.value.show()},close:R,add_ts_group:U,set_timeseries_groups:(e,t)=>{x.value=e,t&&n("apply",x.value)}}),(e,t)=>(Ns(),Ms(pp,{onShowed:t[10]||(t[10]=e=>{}),ref_key:"modal_id",ref:l},{title:_a((()=>[qs(X(D("modal_timeseries.title")),1)])),body:_a((()=>[Ls("ul",yf,[Ls("li",{class:"nav-item",onClick:t[0]||(t[0]=e=>S("add"))},[Ls("a",{class:q(["nav-link",{active:"add"==i.value}]),href:"#"},X(D("modal_timeseries.add_timeseries")),3)]),Ls("li",{class:"nav-item",onClick:t[1]||(t[1]=e=>S("select"))},[Ls("a",{class:q(["nav-link",{active:"select"==i.value}]),href:"#"},X(D("modal_timeseries.manage_timeseries")),3)])]),Gs(" action add "),"add"==i.value?(Ns(),Is(ws,{key:0},[Gs(" Sources Types "),Ls("div",wf,[Ls("div",xf,[Ls("label",kf,[Ls("b",null,X(D("modal_timeseries.source_type")),1)]),Ls("div",$f,[zs(Fd,{selected_option:c.value,"onUpdate:selected_option":t[2]||(t[2]=e=>c.value=e),onSelect_option:t[3]||(t[3]=e=>C()),options:gn(r)},null,8,["selected_option","options"])])])]),Gs(" Sources "),b.value?Gs("v-if",!0):(Ns(),Is("div",Sf,[Ls("div",Cf,[Ls("label",Nf,[Ls("b",null,X(D("modal_timeseries.source")),1)]),Ls("div",Af,[gl(Ls("input",{class:"form-control","onUpdate:modelValue":t[4]||(t[4]=e=>f.value=e),title:f.value,style:{overflow:"hidden","text-overflow":"ellipsis","white-space":"nowrap"},type:"text",disabled:""},null,8,Tf),[[Po,f.value]])])]),(Ns(!0),Is(ws,null,Sl(c.value.source_def_array,((e,n)=>(Ns(),Is(ws,null,[Gs(" select "),e.ui_type==gn(u).select?(Ns(),Is("div",Ef,[Ls("label",Pf,[Ls("b",null,X(e.label),1)]),Ls("div",If,[zs(Fd,{selected_option:p.value[n],"onUpdate:selected_option":e=>p.value[n]=e,onSelect_option:t[5]||(t[5]=e=>A()),options:d.value[n]},null,8,["selected_option","onUpdate:selected_option","options"])])])):Gs("v-if",!0),Gs(" end select "),Gs(" input text "),e.ui_type==gn(u).input?(Ns(),Is("div",Mf,[Ls("label",Of,[Ls("b",null,X(e.label),1)]),Ls("div",Uf,[gl(Ls("input",{class:"form-control",onInput:t[6]||(t[6]=e=>A()),"onUpdate:modelValue":e=>_.value[n]=e,pattern:h.value[n],required:"",type:"text",placeholder:""},null,40,Ff),[[Po,_.value[n]]])])])):Gs("v-if",!0),Gs(" input text ")],64)))),256)),gl(Ls("div",Rf,[Ls("div",Df,[Ls("button",{type:"button",onClick:N,disabled:0==gn(v),class:"btn btn-primary"},X(D("modal_timeseries.apply_source")),9,jf)])],512),[[Go,gn(v)]])])),Gs(" end Sources "),Gs(" Metrics "),Ls("div",Lf,[Ls("div",zf,[Ls("label",Bf,[Ls("b",null,X(D("modal_timeseries.metric")),1)]),Ls("div",Vf,[zs(Fd,{ref_key:"select_search_metrics",ref:s,onSelect_option:t[7]||(t[7]=e=>P()),selected_option:w.value,"onUpdate:selected_option":t[8]||(t[8]=e=>w.value=e),options:y.value},null,8,["selected_option","options"])])])]),zs(__,{id:"",title:D("modal_timeseries.timeseries_list"),timeseries:k.value,"onUpdate:timeseries":t[9]||(t[9]=e=>k.value=e)},null,8,["title","timeseries"])],64)):Gs("v-if",!0),Gs(" action == add "),Gs(" action select"),"select"==i.value?(Ns(),Is(ws,{key:1},[(Ns(!0),Is(ws,null,Sl(x.value,(e=>(Ns(),Ms(__,{id:M(e),title:I(e),timeseries:e.timeseries,"onUpdate:timeseries":t=>e.timeseries=t,show_delete_button:x.value.length>1,onDelete_ts:O},null,8,["id","title","timeseries","onUpdate:timeseries","show_delete_button"])))),256)),Gs(" v-for timeseries_groups_added ")],64)):Gs("v-if",!0),Gs(" action == select ")])),footer:_a((()=>[gl(Ls("button",{type:"button",onClick:F,class:"btn btn-primary"},X(D("modal_timeseries.add")),513),[[Go,"add"==i.value]]),gl(Ls("button",{type:"button",onClick:F,class:"btn btn-primary"},X(D("modal_timeseries.apply")),513),[[Go,"select"==i.value]])])),_:1},512))}};dp("\ninput[data-v-103cd911]:invalid {\n  border-color: #ff0000;\n}\n.custom-margin[data-v-103cd911] {\nmargin-left: -0.4rem;\n}\n.warn[data-v-103cd911] {\nborder-color: #ffd500;\nborder-style: solid;\n}\n"),qf.__scopeId="data-v-103cd911",qf.__file="http_src/vue/modal-timeseries.vue";var Hf=Ga({components:{modal:pp},props:{id:String},updated(){},data(){return{description:"",invalid_bpf:!1,bpf_filter:"",extract_now:!0,show_menu:!0,i18n:e=>i18n(e),id_modal:`${this.$props.id}_modal`}},emits:["apply"],created(){},mounted(){},methods:{pad2_number:function(e){return String(e).padStart(2,"0")},format_date:function(e){let t=e.valueOf();return ntopng_utility.from_utc_to_server_date_format(t)},apply:async function(){if(null!=this.bpf_filter&&""!=this.bpf_filter){let e=`${http_prefix}/lua/pro/rest/v2/check/filter.lua?query=${this.bpf_filter}`,t=await ntopng_utility.http_request(e,null,!1,!0);if(this.invalid_bpf=!t.response,1==this.invalid_bpf)return}let e={ifid:ntopng_url_manager.get_url_entry("ifid"),epoch_begin:ntopng_url_manager.get_url_entry("epoch_begin"),epoch_end:ntopng_url_manager.get_url_entry("epoch_end"),bpf_filter:this.bpf_filter},t=ntopng_url_manager.obj_to_url_params(e);if(1==this.extract_now){let e=`${http_prefix}/lua/rest/v2/get/pcap/live_extraction.lua?${t}`;window.open(e,"_self",!1)}else{let e=`${http_prefix}/lua/traffic_extraction.lua?${t}`,n=(await ntopng_utility.http_request(e,null,!1,!0)).id,a=i18n("traffic_recording.extraction_scheduled"),l=i18n("traffic_recording.traffic_extraction_jobs"),s=`<a href="/lua/if_stats.lua?ifid=${ntopng_url_manager.get_url_entry("ifid")}&page=traffic_recording&tab=jobs&job_id=${n}">${l}</a>`;a=a.replace("%{page}",s),a=`${a} ${n}`,ntopng_events_manager.emit_custom_event(ntopng_custom_events.SHOW_GLOBAL_ALERT_INFO,a)}this.$refs.modal.close()},show:async function(e){if(null==e){let t=ntopng_url_manager.get_url_params(),n=`${http_prefix}/lua/pro/rest/v2/get/db/filter/bpf.lua?${t}`,a=await ntopng_utility.http_request(n);if(null==a||null==a.bpf)return void console.error(`modal-traffic-extraction: ${n} return null value`);e=a.bpf}let t=ntopng_status_manager.get_status();if(null==t.epoch_begin||null==t.epoch_end)return void console.error("modal-traffic-extraction: epoch_begin and epoch_end undefined in url");let n=new Date(1e3*t.epoch_begin),a=new Date(1e3*t.epoch_end),l=i18n("traffic_recording.about_to_download_flow");l=l.replace("%{date_begin}",this.format_date(n)),l=l.replace("%{date_end}",this.format_date(a)),this.description=l,this.bpf_filter=e,this.$refs.modal.show()},show_hide_menu:function(){this.show_menu=!this.show_menu}}});const Gf=e=>(ua("data-v-0be978c4"),e=e(),da(),e),Kf=["innerHTML"],Wf={style:{height:"95%"}},Jf={class:"tab-content",style:{height:"100%"}},Yf={class:"row"},Xf={class:"form-group mb-3 col-md-3 has-feedback"},Zf={class:"form-group mb-3 col-md-9 text-right asd"},Qf={class:"radio-inline",style:{"margin-left":"1rem"}},eh={class:"radio-inline"},th={class:"row",id:"pcapDownloadModal_advanced",style:{}},nh={class:"form-group mb-3 col-md-12 has-feedback"},ah=Gf((()=>Ls("br",null,null,-1))),lh={class:"form-label"},sh=Gf((()=>Ls("a",{class:"ntopng-external-link",href:"https://www.ntop.org/guides/n2disk/filters.html"},[Ls("i",{class:"fas fa-external-link-alt"})],-1))),ih={class:"input-group"},oh=Gf((()=>Ls("span",{class:"input-group-addon"},[Ls("span",{class:"glyphicon glyphicon-filter"})],-1))),rh=Gf((()=>Ls("br",null,null,-1))),ch={class:"form-label"},uh=Gf((()=>Ls("br",null,null,-1))),dh=Gf((()=>Ls("ul",null,[Ls("li",null,[qs("Host: "),Ls("i",null,"host 192.168.1.2")]),Ls("li",null,[qs("HTTP: "),Ls("i",null,"tcp and port 80")]),Ls("li",null,[qs("Traffic between hosts: "),Ls("i",null,"ip host 192.168.1.1 and 192.168.1.2")]),Ls("li",null,[qs("Traffic from an host to another: "),Ls("i",null,"ip src 192.168.1.1 and dst 192.168.1.2")])],-1)));dp("\ninput ~ .alert[data-v-0be978c4] {\n  display: none;\n}\ninput:invalid ~ .alert[data-v-0be978c4] {\n  display: block;\n}\n"),Hf.render=function(e,t,n,a,l,s){const i=bl("modal");return Ns(),Ms(i,{id:e.id_modal,onApply:e.apply,ref:"modal"},{title:_a((()=>[qs(X(e.i18n("traffic_recording.pcap_extract")),1)])),body:_a((()=>[Ls("div",{class:"alert alert-info",innerHTML:e.description},null,8,Kf),Ls("form",Wf,[Ls("div",Jf,[Ls("div",Yf,[Ls("div",Xf,[Ls("button",{class:"btn btn-sm btn-secondary",type:"button",onClick:t[0]||(t[0]=(...t)=>e.show_hide_menu&&e.show_hide_menu(...t))},[qs(X(e.i18n("advanced")),1),Ls("i",{class:q({"fas fa-caret-down":e.show_menu,"fas fa-caret-up":!e.show_menu})},null,2)])]),Ls("div",Zf,[Ls("label",Qf,[gl(Ls("input",{type:"radio",name:"extract_now","onUpdate:modelValue":t[1]||(t[1]=t=>e.extract_now=t),value:"true",checked:""},null,512),[[Oo,e.extract_now]]),qs(" "+X(e.i18n("traffic_recording.extract_now")),1)]),Ls("label",eh,[gl(Ls("input",{type:"radio",name:"extract_now","onUpdate:modelValue":t[2]||(t[2]=t=>e.extract_now=t),value:"false"},null,512),[[Oo,e.extract_now]]),qs(" "+X(e.i18n("traffic_recording.queue_as_job")),1)])])]),gl(Ls("div",th,[Ls("div",nh,[ah,Ls("label",lh,[qs(X(e.i18n("traffic_recording.filter_bpf"))+" ",1),sh]),Ls("div",ih,[oh,gl(Ls("input",{name:"bpf_filter","onUpdate:modelValue":t[3]||(t[3]=t=>e.bpf_filter=t),class:"form-control input-sm","data-bpf":"bpf",autocomplete:"off",spellcheck:"false"},null,512),[[Po,e.bpf_filter]]),gl(Ls("span",{style:{margin:"0px",padding:"0",display:"block"},class:"invalid-feedback"},X(e.i18n("invalid_value")),513),[[Go,e.invalid_bpf]])]),rh,Ls("label",ch,X(e.i18n("traffic_recording.filter_examples"))+":",1),uh,dh])],512),[[Go,e.show_menu]])])])])),footer:_a((()=>[Ls("button",{type:"button",onClick:t[4]||(t[4]=(...t)=>e.apply&&e.apply(...t)),class:"btn btn-primary"},X(e.i18n("apply")),1)])),_:1},8,["id","onApply"])},Hf.__scopeId="data-v-0be978c4",Hf.__file="http_src/vue/modal-traffic-extraction.vue";const ph={class:"form-group mt-2 row"},_h={class:"col-form-label col-sm-4"},fh={class:"col-sm-6"},hh={class:"col-form-label col-sm-2"},mh=["disabled"];var gh={__name:"modal-download-file",props:{title:String,ext:String},emits:["download"],setup(e,{expose:t,emit:n}){const a=e,l=pn(null),s=pn(""),i="^[^`~!@#$%^&*|+-=?;:'\",.<>/{}()\\[\\]\\s]+$",o=gi((()=>new RegExp("^[^`~!@#$%^&*|+-=?;:'\",.<>/{}()\\[\\]\\s]+$").test(s.value)));function r(){let e=`${s.value}.${a.ext}`;n("download",e),c()}const c=()=>{l.value.close()};t({show:e=>{null==e&&(e=""),e=(e=e.replaceAll(/[-=?;:\s]/g,"_")).replaceAll(/[`~!@#$%^&*|+-=?;:'",.<>\s\/\{\}\[\]\(\)]/g,""),s.value=e,l.value.show()},close:c}),rl((()=>{}));const u=e=>i18n(e);return(e,t)=>(Ns(),Ms(pp,{ref_key:"modal_id",ref:l},{title:_a((()=>[qs(X(a.title),1)])),body:_a((()=>[Ls("div",ph,[Ls("label",_h,[Ls("b",null,X(u("modal_download_file.filename"))+":",1)]),Ls("div",fh,[gl(Ls("input",{class:"form-control",required:"",pattern:i,"onUpdate:modelValue":t[0]||(t[0]=e=>s.value=e),type:"text",placeholder:""},null,512),[[Po,s.value]])]),Ls("label",hh," ."+X(a.ext),1)])])),footer:_a((()=>[Ls("button",{type:"button",onClick:r,class:"btn btn-primary",disabled:0==gn(o)},X(u("modal_download_file.download")),9,mh)])),_:1},512))}};dp("\ninput[data-v-59120eb8]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-59120eb8] {\n  cursor: not-allowed;\n}\n"),gh.__scopeId="data-v-59120eb8",gh.__file="http_src/vue/modal-download-file.vue";var vh=Ga({components:{},props:{id:String},emits:[],created(){},data:()=>({show_alert:!1,i18n:e=>i18n(e),body:""}),mounted(){ntopng_events_manager.on_custom_event(this.$props.id,ntopng_custom_events.SHOW_GLOBAL_ALERT_INFO,(e=>this.show(e)))},methods:{close:function(){this.show_alert=!1},show:function(e){this.show_alert=!0,this.body=e}}});const bh={key:0,style:{width:"100%"},class:"alert alert-success alert-dismissable"},yh=["innerHTML"];vh.render=function(e,t,n,a,l,s){return 1==e.show_alert?(Ns(),Is("div",bh,[Ls("span",{innerHTML:e.body},null,8,yh),Ls("button",{type:"button",onClick:t[0]||(t[0]=(...t)=>e.close&&e.close(...t)),class:"btn-close","aria-label":"Close"})])):Gs("v-if",!0)},vh.__file="http_src/vue/alert-info.vue";const wh={class:"text-center"},xh=Ls("tbody",null,null,-1);var kh={__name:"datatable",props:{table_buttons:Array,columns_config:Array,data_url:String,enable_search:Boolean,filter_buttons:{type:Array,required:!1},table_config:{type:Object,required:!1},base_url:String,base_params:Object},setup(e,{expose:t}){const n=e;let a=n.base_params;const l=pn(null);function s(){!function(){let e,t=JSON.parse(localStorage.getItem(l.value))||[];0!==t.length&&n.columns_config.forEach((function(n){e=t.find((function(e){return e.targets===n.targets})),e&&(n.width=e.width+"px")}))}();let e=!1,t={serverSide:!1,scrollX:!1,destroy:!0,searching:n.enable_search,order:[[0,"asc"]],pagingType:"full_numbers",columnDefs:n.columns_config,columns:n.columns_config,autoWidth:!1,responsive:!0,ajax:{method:"get",url:n.data_url,dataSrc:"rsp",data:(e,t)=>{if(0==Object.keys(e).length)return;const n=t.oInstance.api(),a=e.order[0].column,l=n.column(a).name()||void 0;return e.order&&(e.order=e.order[0].dir,e.sort=l),void 0!==e.columns&&delete e.columns,void 0!==e.search&&(e.map_search=e.search.value,delete e.search),e},beforeSend:function(){NtopUtils.showOverlays()}},initComplete:function(e){$("#"+l.value.id+"_wrapper .dataTables_scrollHead thead th").resizable({handles:"e",alsoResize:"#"+l.value.id+"_wrapper .dataTables_scrollHead table",stop:function(){var e,t,n,a;a=JSON.parse(localStorage.getItem(l.value))||[],i.columns().every((function(l){n=a.findIndex((function(e){return e.targets===l})),t=this.header(),e=$(t).width(),-1!==n?a[n].width=e:a.push({targets:l,width:e})})),localStorage.setItem(l.value,JSON.stringify(a)),s()}})},drawCallback:function(e){NtopUtils.hideOverlays(),ntopng_events_manager.emit_custom_event(ntopng_custom_events.DATATABLE_LOADED)}};for(const e in n.table_config||{})t[e]=n.table_config[e];let r=DataTableUtils.getStdDatatableConfig(n.table_buttons);r=DataTableUtils.extendConfig(r,t),i=$(l.value).DataTable(r);for(const t of n.filter_buttons||[]){const a=y.get_url_entry(t.filterMenuKey);if(a&&""!=a){let n=0;t.filters.forEach((e=>{e.currently_active=!1,n+=1,e.id==a&&(e.currently_active=!0,n-=1)})),n==t.filters.length&&(y.set_key_to_url(t.filterMenuKey,""),e=!0)}new DataTableFiltersMenu({filterTitle:t.filterTitle,tableAPI:i,filters:t.filters,filterMenuKey:t.filterMenuKey,columnIndex:t.columnIndex,url:n.data_url,id:t.id,removeAllEntry:t.removeAllEntry,callbackFunction:t.callbackFunction}).init()}if(e&&n.base_params){const e=y.get_url_entries();for(const[t,n]of e)a[t]=n;i.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,a)),o()}}let i=null;rl((()=>{s()}));const o=()=>{null!=i&&i.ajax.reload()},r=e=>{DataTableUtils.deleteButtonHandlers(e)};let c=!1;const u=()=>{i.clear(),i.destroy(!0),c=!0,n.columns_config.filter((e=>null!=e.handlerId)).forEach((e=>{r(e.handlerId)}))};return t({reload:o,delete_button_handlers:r,destroy_table:u,update_url:e=>{null!=i&&i.ajax.url(e)}}),dl((()=>{1!=c&&u()})),(t,n)=>(Ns(),Is("div",null,[Ls("table",{ref_key:"table_id",ref:l,class:"table w-100 table-striped table-hover table-bordered"},[Ls("thead",null,[Ls("tr",null,[(Ns(!0),Is(ws,null,Sl(e.columns_config,(e=>(Ns(),Is("th",wh,X(e.columnName),1)))),256))])]),xh],512)]))},__file:"http_src/vue/datatable.vue"};const $h={class:"table table-hover table-borderless mb-0"},Sh=["innerHTML"],Ch=["innerHTML"];var Nh={__name:"bootstrap-table",props:{id:String,columns:Array,rows:Array,print_html_column:Function,print_html_row:Function},setup:e=>(t,n)=>(Ns(),Is("table",$h,[Ls("thead",null,[Ls("tr",null,[(Ns(!0),Is(ws,null,Sl(e.columns,(t=>(Ns(),Is("th",{scope:"col",innerHTML:e.print_html_column(t)},null,8,Sh)))),256))])]),Ls("tbody",null,[(Ns(!0),Is(ws,null,Sl(e.rows,(t=>(Ns(),Is("tr",null,[(Ns(!0),Is(ws,null,Sl(e.columns,(n=>(Ns(),Is("td",{scope:"col",innerHTML:e.print_html_row(n,t)},null,8,Ch)))),256))])))),256))])])),__file:"http_src/vue/bootstrap-table.vue"};const Ah=e=>(ua("data-v-937058e4"),e=e(),da(),e),Th={class:"col-12 mb-2 mt-2"},Eh={class:"card h-100 overflow-hidden"},Ph=["title"],Ih=[Ah((()=>Ls("i",{class:"fas fa-lg fa-camera-retro"},null,-1)))],Mh=["title"],Oh=[Ah((()=>Ls("i",{class:"fas fa-lg fa-download"},null,-1)))],Uh=["title"],Fh=[Ah((()=>Ls("i",{class:"fas fa-lg fa-file-image"},null,-1)))],Rh={class:"form-group ms-1 me-1 mt-1"},Dh={class:"inline select2-size me-2 mt-2"},jh={class:"inline select2-size me-2 mt-2"},Lh={key:0,class:"mt-4 card card-shadow"},zh={class:"card-body"},Bh={key:1,class:"mt-4 card card-shadow"},Vh={class:"card-body"},qh={key:0,class:"inline select2-size me-2 mt-2"};var Hh={__name:"page-stats",props:{csrf:String,is_ntop_pro:Boolean,source_value_object:Object,sources_types_enabled:Object,sources_types_top_enabled:Object,enable_snapshots:Boolean,is_history_enabled:Boolean,traffic_extraction_permitted:Boolean},setup(e){const t=e;g.check_and_set_default_interval_time();const a=e=>i18n(e);let l="date_time_picker",s=ntopChartApex.typeChart.TS_LINE;pn({}),pn(!1);const i=pn([]),o=pn(null),r=pn(null),c=pn(null),u=pn(null),d=pn(null),p=pn([]),_=pn({});ef.get_current_page_source_type();const h=pn(!1);pn(!1);const m=pn([]),b=g.object_to_array(mf.groupsOptionsModesEnum),w=pn(function(){let e=y.get_url_entry("timeseries_groups_mode");if(null!=e&&""!=e)return mf.getGroupOptionMode(e);return b[0]}());let x=null;const k={label:i18n("page_stats.custom_metrics"),currently_active:!1},$="timeseries",S=pn(!1);ol((async()=>{!function(){if(null==t.source_value_object)return;let e=ef.get_current_page_source_type();ef.set_source_value_object_in_url(e,t.source_value_object)}()})),rl((async()=>{!async function(){let e,t=!0,n=await ef.get_timeseries_groups_from_url(http_prefix);null==n&&(t=!1,e=y.get_url_entry("ts_schema"),""==e&&(e=null),n=await ef.get_default_timeseries_groups(http_prefix,e));p.value=await C(t),_.value=1==t?k:ef.get_default_metric(p.value,e);S.value=!0,await V(n,!0,!0)}(),await Promise.all([ntopng_sync.on_ready(l)])}));async function C(e,a){if(!a&&null==e)return l.value;let l=await ef.get_metrics(http_prefix);if(e&&l.push(k),(null==D||a)&&(D=await async function(){if(!t.enable_snapshots)return;let e=`${http_prefix}/lua/pro/rest/v2/get/filters/snapshots.lua?page=timeseries`,n=await g.http_request(e),a=g.object_to_array(n),l=a.map((e=>({...e,is_snapshot:!0,label:`${e.name}`,group:"Snapshots"})));return console.log(a),l}()),t.enable_snapshots){D.forEach((e=>l.push(e)))}return l.sort(n.sortAlphabetically),l}async function N(e){let t=ef.get_current_page_source_type(),n=await ef.get_default_source_array(http_prefix,t);return[ef.get_ts_group(t,n,e)]}const A=async(e,t,n)=>{let a=ef.get_source_type_from_id(e),l=await ef.get_source_array_from_value_dict(http_prefix,a,t),s=await ef.get_metric_from_schema(http_prefix,a,l,n);E(ef.get_ts_group(a,l,s))},T=async(e,t)=>{let n=p.value.find((n=>n.schema==e&&n.query==t));null!=n?E((await N(n))[0]):console.error(`metric = ${e}, query = ${t} not found.`)};function E(e){c.value.set_timeseries_groups(x),c.value.add_ts_group(e,!0)}async function P(e){if(1==e.is_snapshot){let t=e.filters,n=y.get_url_entry("timeseries_groups",t),a=await ef.get_timeseries_groups_from_url(http_prefix,n);w.value=mf.getGroupOptionMode(y.get_url_entry("timeseries_groups_mode",t)),await V(a,!0,!1)}else await async function(){let e=await async function(){return N(_.value)}();await V(e,!0,!1)}(),L(!1)}function I(e){console.log(e);let n=_.value.label==k.label;V(x,!0,!1),async function(){if(!t.is_ntop_pro)return;let e=G.value?.table_config_def;if(null==e)return;let n=q(e.ts_group,e.table_def.table_value,e.table_def.view,e.table_source_def_value_dict);r.value.update_url(n),r.value.reload()}(),L(n,!0)}function M(e){console.log("chart reloaded")}function O(){u.value.show()}function U(){null!=x&&c.value.show(x)}function F(e){return console.log("get_f_"),async t=>(console.log("get_charts_options"),m.value[e].chart_options)}let R,D=null;function j(){L(_.value.label==k.label,!0)}async function L(e,t){p.value=await C(e,t),e&&(_.value=k)}async function z(e){console.log("apply modal-timeseries in page-stats"),L(!0),await V(e,!0,!0)}function B(){V(x,!1,!1)}async function V(e,n,a){let l=v.get_status(),s=function(e){let t=Number.parseInt((e.epoch_end-e.epoch_begin)/60);return t<=5?"5m":t<=30?"30m":t<=60?"1h":t<=1440?"1d":t<=10080?"1w":t<=43200?"1M":"1Y"}(l);n&&(R=await mf.getTsChartsOptions(http_prefix,l,s,e,t.is_ntop_pro)),console.log(R),console.log(e),function(e,t){e.forEach(((e,n)=>{let a=t[n]?.query?.label;if(null!=a){let t=mf.getMainSourceDefIndex(e);e.source_array[t].label=a}}))}(e,R),function(e){m.value=e.map(((e,t)=>({key:g.get_random_string(),chart_options:e})))}(mf.tsArrayToApexOptionsArray(R,e,w.value,s)),function(e,t,n){let a=!0;if(h.value=t.map((e=>!e.source_type.disable_stats)).reduce(((e,t)=>e|t),!1),!h.value)return;const l=e=>"bps"==e?"bytes_network":e;W.value=[],e.forEach(((e,s)=>{let i=t[s];1!=i.source_type.disable_stats&&e.series.forEach(((t,s)=>{let o,r=mf.getSerieId(t),c=i.metric.timeseries[r],u=f.getFormatter(i.metric.measure_unit);if(o="top"==i.metric.type?e.statistics:e.statistics?.by_serie[s],null==o||"top"==i.metric.type&&s>0)return;let d=mf.getSerieName(c.label,r,i,a),p=null,_=l(i.metric.measure_unit),h=f.getFormatter(_);if(null!=o.total){p=(n.epoch_end-n.epoch_begin)*o.average}let m={metric:d,total:h(p),perc_95:u(o["95th_percentile"]),avg:u(o.average),max:u(o.max_val),min:u(o.min_val)};W.value.push(m)}))}))}(R,e,l),a&&function(e,n){if(!t.is_ntop_pro)return;null==e&&(e=x);null==n&&(n=v.get_status());let a=ef.sources_types_tables,l={};e.forEach((e=>{e.source_type;let t=ef.get_ts_group_id(e.source_type,e.source_array);l[t]=e}));let s={};H.value=[];for(let e in l){let i=l[e],o=mf.getMainSourceDefIndex(i),r=i.source_array[o],c=i.source_type,u=a[c.id];null!=u&&u.forEach((e=>{let a=t.sources_types_top_enabled[e.table_value];if(null==a)return;if(!a[e.view])return;let l=e.table_source_def_value_dict,o=q(i,e.table_value,e.view,l,n),u=ef.get_ts_group_id(i.source_type,i.source_array,null,l,!0);if(u=`${u}_${e.view}`,null!=s[u])return;s[u]=!0;let d,p=`${e.table_value}_${e.view}_${u}`;d=null==e.f_get_label?`${e.title} - ${c.label} ${r.label}`:e.f_get_label(i);const _={ts_group:i,table_def:e,table_buttons:[],data_url:o,enable_search:!0,table_config:{serverSide:!1,order:[[e.default_sorting_columns,"desc"]]}};_.columns_config=e.columns.map((e=>{let a={is_history_enabled:t.is_history_enabled},l={visible:!e.render_if||e.render_if(a),...e};return null==l.className&&(l.className="text-nowrap"),null==l.responsivePriority&&(l.responsivePriority=1),l.render=e.render.bind({add_metric_from_metric_schema:T,add_ts_group_from_source_value_dict:A,sources_types_enabled:t.sources_types_enabled,status:n,source_type:c,source_array:i.source_array}),l}));let f={value:p,label:d,table_config_def:_};H.value.push(f)}))}if(null!=G.value&&H.value.find((e=>e.value==G.value.value)))return;G.value=H.value.find((e=>1==e.table_config_def.default)),null==G.value&&(G.value=H.value[0])}(e,l),x=e,console.log("SET last_timeseries_groups_loaded"),console.log(x),y.set_key_to_url("timeseries_groups_mode",w.value.value),ef.set_timeseries_groups_in_url(x)}function q(e,t,n,a,l){null==l&&(l=v.get_status());let s=mf.getTsQuery(e,!0,a),i=`${http_prefix}/lua/pro/rest/v2/get/${t}/top/ts_stats.lua`,o={zoom:"5m",ts_query:s,epoch_begin:`${l.epoch_begin}`,epoch_end:`${l.epoch_end}`,detail_view:`${n}`,new_charts:"true"};return`${i}?${y.add_obj_to_url(o,"")}`}const H=pn([]),G=pn({});let K=[{id:"metric",label:a("page_stats.metric")},{id:"avg",label:a("page_stats.average")},{id:"perc_95",label:a("page_stats.95_perc")},{id:"max",label:a("page_stats.max")},{id:"min",label:a("page_stats.min")},{id:"total",label:a("page_stats.total")}];const W=pn([]);const J=pn(null);function Y(){J.value.show()}function X(){if(!R?.length)return;let e=x[0],t=mf.getSerieName(null,null,e);d.value.show(t)}async function Z(e){let t=i.value.map((async e=>{let t=await e.get_data_uri();return new Promise(((e,n)=>{let a=new Image;a.src=t,a.onload=function(){e(a)}}))})),n=0,a=await Promise.all(t);a.forEach((e=>{n+=e.height}));let l=document.createElement("canvas"),s=l.getContext("2d");l.width=a[0].width,l.height=n,n=0,a.forEach((e=>{s.drawImage(e,0,n,e.width,e.height),n+=e.height})),g.download_URI(l.toDataURL(),e)}return(t,n)=>(Ns(),Is(ws,null,[Ls("div",Th,[zs(vh),Ls("div",Eh,[zs(Rd,{style:{"margin-top":"0.5rem"},id:gn(l),enable_refresh:!0,ref_key:"date_time_picker",ref:o,onEpoch_change:I},{begin:_a((()=>[])),extra_buttons:_a((()=>[e.enable_snapshots?(Ns(),Is("button",{key:0,class:"btn btn-link btn-sm",onClick:O,title:a("page_stats.manage_snapshots_btn")},Ih,8,Ph)):Gs("v-if",!0),e.traffic_extraction_permitted?(Ns(),Is("button",{key:1,class:"btn btn-link btn-sm",onClick:Y,title:a("traffic_recording.pcap_download")},Oh,8,Mh)):Gs("v-if",!0),Ls("button",{class:"btn btn-link btn-sm",onClick:X,title:a("page_stats.title_modal_download_file")},Fh,8,Uh)])),_:1},8,["id"]),Gs(" select metric "),gl(Ls("div",Rh,[Ls("div",Dh,[zs(Fd,{selected_option:_.value,"onUpdate:selected_option":n[0]||(n[0]=e=>_.value=e),options:p.value,onSelect_option:P},null,8,["selected_option","options"])]),Ls("div",jh,[zs(Fd,{selected_option:w.value,"onUpdate:selected_option":n[1]||(n[1]=e=>w.value=e),options:gn(b),onSelect_option:B},null,8,["selected_option","options"])]),e.is_ntop_pro?(Ns(),Is("button",{key:0,type:"button",onClick:U,class:"btn btn-sm btn-primary inline",style:{"vertical-align":"super"}}," Manage Timeseries ")):Gs("v-if",!0)],512),[[Go,S.value]]),(Ns(!0),Is(ws,null,Sl(m.value,((e,t)=>(Ns(),Is("div",{key:e.key,class:"m-3",style:{height:"300px"}},[zs(Pd,{id:gn("chart")+t,ref_for:!0,ref:e=>{i.value[t]=e},chart_type:gn(s),register_on_status_change:!1,get_custom_chart_options:F(t),onZoom:I,onChart_reloaded:M},null,8,["id","chart_type","get_custom_chart_options"])])))),128))]),h.value?(Ns(),Is("div",Lh,[Ls("div",zh,[zs(Nh,{id:"page_stats_bootstrap_table",columns:gn(K),rows:W.value,print_html_column:e=>function(e){return e.label}(e),print_html_row:(e,t)=>function(e,t){return t[e.id]}(e,t)},null,8,["columns","rows","print_html_column","print_html_row"])])])):Gs("v-if",!0),e.is_ntop_pro?(Ns(),Is("div",Bh,[Ls("div",Vh,[G.value?.table_config_def?(Ns(),Is("div",qh,[zs(Fd,{selected_option:G.value,"onUpdate:selected_option":n[2]||(n[2]=e=>G.value=e),options:H.value},null,8,["selected_option","options"])])):Gs("v-if",!0),G.value?.table_config_def?(Ns(),Ms(kh,{key:G.value?.value,ref_key:"top_table_ref",ref:r,table_buttons:G.value.table_config_def.table_button,columns_config:G.value.table_config_def.columns_config,data_url:G.value.table_config_def.data_url,enable_search:G.value.table_config_def.enable_search,table_config:G.value.table_config_def.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])):Gs("v-if",!0)])])):Gs("v-if",!0)]),e.enable_snapshots?(Ns(),Ms(Kp,{key:0,ref_key:"modal_snapshot",ref:u,csrf:e.csrf,page:$,onAdded_snapshot:j,onDeleted_snapshots:j,onDeleted_all_snapshots:j},null,8,["csrf"])):Gs("v-if",!0),e.is_ntop_pro?(Ns(),Ms(qf,{key:1,ref_key:"modal_timeseries",ref:c,sources_types_enabled:e.sources_types_enabled,onApply:z},null,8,["sources_types_enabled"])):Gs("v-if",!0),zs(Hf,{id:"page_stats_modal_traffic_extraction",ref_key:"modal_traffic_extraction",ref:J},null,512),zs(gh,{ref_key:"modal_download_file",ref:d,title:a("page_stats.title_modal_download_file"),ext:"png",onDownload:Z},null,8,["title"])],64))}};dp("\n.inline[data-v-937058e4] {\n    display: inline-block;\n}\n.select2-size[data-v-937058e4] {\n    min-width: 18rem;\n}\n"),Hh.__scopeId="data-v-937058e4",Hh.__file="http_src/vue/page-stats.vue";var Gh=Ga({components:{},props:{id:String,tab_list:Array},emits:["click_item"],created(){},data:()=>({old_tab:null}),mounted(){let e;this.tab_list.forEach((function(t){t.active&&(e=t)})),null==e&&(e=this.tab_list[0]),this.old_tab=e.id||e.name,ntopng_sync.ready(this.$props.id)},methods:{change_tab:function(e){e.id&&this.old_tab==e.id||e.name&&this.old_tab==e.name||(this.old_tab=e.id||e.name,this.$emit("click_item",e))}}});const Kh={class:"card-header mb-2"},Wh={class:"nav nav-tabs card-header-tabs",role:"tablist"},Jh=["onClick"],Yh=["onClick"];Gh.render=function(e,t,n,a,l,s){return Ns(),Is("div",Kh,[Ls("ul",Wh,[(Ns(!0),Is(ws,null,Sl(e.tab_list,(t=>(Ns(),Is(ws,null,[t.active?(Ns(),Is("li",{key:0,onClick:n=>e.change_tab(t),class:q([{active:t.active},"nav-item nav-link"])},X(t.title),11,Jh)):(Ns(),Is("a",{key:1,onClick:n=>e.change_tab(t),href:"#",class:"nav-item nav-link"},X(t.title),9,Yh))],64)))),256))])])},Gh.__file="http_src/vue/tab-list.vue";var Xh={__name:"modal-delete-confirm",props:{body:String,title:String},emits:["delete"],setup(e,{expose:t,emit:n}){const a=pn(null),l=()=>{n("delete"),s()},s=()=>{a.value.close()};t({show:()=>{a.value.show()},close:s}),rl((()=>{}));const i=e=>i18n(e);return(t,n)=>(Ns(),Ms(pp,{onShowed:n[0]||(n[0]=e=>{}),ref_key:"modal_id",ref:a},{title:_a((()=>[qs(X(e.title),1)])),body:_a((()=>[qs(X(e.body),1)])),footer:_a((()=>[Ls("button",{type:"button",onClick:l,class:"btn btn-danger"},X(i("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-confirm.vue"};const Zh="change_asset_table_tab_event";var Qh={components:{datatable:kh,"modal-delete-confirm":Xh,"tab-list":Gh},props:{page_csrf:String,url_params:Object,view:String,table_filters:Array},created(){y.set_key_to_url("asset_family",this.$props.url_params.asset_family),function(e){const t=[];let n=[];e.get_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,url_params),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,n,a,l){e.reload_table()}});let a=url_params;a.view="standard";let l={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,a),enable_search:!0},s=[];for(let t of e.$props.table_filters||[])t.callbackFunction=(n,l)=>{a.view=e.asset_table_tab,a[t.filterMenuKey]=l.id,y.set_key_to_url(t.filterMenuKey,l.id),n.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,a)),NtopUtils.showOverlays(),n.ajax.reload(),NtopUtils.hideOverlays()},s.push(t);n=[{columnName:i18n("map_page.client"),name:"client",data:"client",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.server"),name:"server",data:"server",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.asset_family"),name:"family",data:"family",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.last_seen"),name:"last_seen",data:"last_seen",className:"text-center",responsivePriority:2}];let i=ntopng_utility.clone(l);i.table_config={serverSide:!1,order:[[3,"desc"]]},i.columns_config=n,i.table_filters=s,e.config_devices_standard=i,a.view="centrality",l.data_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,a),n=[{columnName:i18n("map_page.host"),name:"host",data:"host",className:"text-nowrap",render:(e,t)=>e.label,responsivePriority:1},{columnName:i18n("map_page.asset_total_edges"),name:"total_edges",data:"total_edges",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.asset_in_edges"),name:"in_edges",data:"in_edges",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.asset_out_edges"),name:"out_edges",data:"out_edges",className:"text-center",responsivePriority:2}];let o=ntopng_utility.clone(l);o.table_config={serverSide:!1,order:[[1,"desc"]]},o.columns_config=n,o.table_filters=s,console.log(i),console.log(o),e.config_devices_centrality=o}(this)},mounted(){this.asset_table_tab=y.get_url_entry("view")||"standard",this.tab_list.forEach((e=>{this.asset_table_tab==e.id?e.active=!0:e.active=!1})),k.on_custom_event("page_asset_table",ntopng_custom_events.DATATABLE_LOADED,(()=>{y.get_url_entry("host")&&this.hide_dropdowns()})),k.on_custom_event("change_asset_table_tab",Zh,(e=>{let t=this.get_active_table();y.set_key_to_url("view",e),t.destroy_table(),this.asset_table_tab=e})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog()))},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null,title_delete:i18n("map_page.delete_assets"),body_delete:i18n("map_page.delete_assets_message"),title_download:i18n("map_page.download"),body_download:i18n("map_page.download_message"),get_url:null,asset_table_tab:null,tab_list:[{title:i18n("map_page.standard_view"),active:"standard"==view,id:"standard"},{title:i18n("map_page.centrality_view"),active:"centrality"==view,id:"centrality"}]}),methods:{destroy:function(){this.get_active_table().destroy_table()},click_item:function(e){this.tab_list.forEach((e=>e.active=!1)),e.active=!0,k.emit_custom_event(Zh,e.id)},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",page:this.url_params.page,csrf:this.$props.page_csrf,map:this.url_params.map};try{let n={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:n,body:JSON.stringify(t)}),this.reload_table()}catch(e){this.reload_table()}},hide_dropdowns:function(){$("#network_dropdown").removeClass("d-inline"),$("#vlan_id_dropdown").removeClass("d-inline"),$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},get_active_table:function(){return this.$refs[`table_asset_${this.asset_table_tab}`]},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()}}};const em={class:"row"},tm={class:"col-md-12 col-lg-12"},nm=Ls("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),am={class:"card"},lm=Ls("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Ls("div",{class:"text-center"},[Ls("div",{class:"spinner-border text-primary mt-5",role:"status"},[Ls("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),sm={class:"card-body"},im={id:"table_asset"},om=qs(' :table_config="config_devices_standard.table_config"> '),rm=qs(' :table_config="config_devices_centrality.table_config"> '),cm={class:"card-footer"},um={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},dm=Ls("i",{class:"fas fa-trash"},null,-1),pm=["href"],_m=[Ls("i",{class:"fas fa-download"},null,-1)];Qh.render=function(e,t,n,a,l,s){const i=bl("modal-delete-confirm"),o=bl("tab-list"),r=bl("datatable");return Ns(),Is("div",em,[Ls("div",tm,[nm,Ls("div",am,[lm,Ls("div",sm,[Ls("div",im,[zs(i,{ref:"modal_delete_all",title:l.title_delete,body:l.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),zs(o,{ref:"asset_tab_list",id:"asset_tab_list",tab_list:l.tab_list,onClick_item:s.click_item},null,8,["tab_list","onClick_item"]),"standard"==l.asset_table_tab?(Ns(),Ms(r,{key:0,ref:"table_asset_standard",table_buttons:l.config_devices_standard.table_buttons,columns_config:l.config_devices_standard.columns_config,data_url:l.config_devices_standard.data_url,enable_search:l.config_devices_standard.enable_search,filter_buttons:l.config_devices_standard.table_filters},{default:_a((()=>[om])),_:1},8,["table_buttons","columns_config","data_url","enable_search","filter_buttons"])):Gs("v-if",!0),"centrality"==l.asset_table_tab?(Ns(),Ms(r,{key:1,ref:"table_asset_centrality",table_buttons:l.config_devices_centrality.table_buttons,columns_config:l.config_devices_centrality.columns_config,data_url:l.config_devices_centrality.data_url,enable_search:l.config_devices_centrality.enable_search,filter_buttons:l.config_devices_centrality.table_filters},{default:_a((()=>[rm])),_:1},8,["table_buttons","columns_config","data_url","enable_search","filter_buttons"])):Gs("v-if",!0)])]),Ls("div",cm,[Ls("button",um,[dm,qs(" "+X(l.i18n("map_page.delete_assets")),1)]),Ls("a",{href:l.get_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"asset_map.json",target:"_blank"},_m,8,pm)])])])])},Qh.__file="http_src/vue/page-asset-table.vue";var fm={components:{datatable:kh,"modal-delete-confirm":Xh},props:{page_csrf:String,url_params:Object,view:String,table_filters:Array,is_admin:Boolean},created(){!function(e){const t=[];let n=[],a=0;e.get_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,url_params),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,n,a,l){e.reload_table()}});let l=ntopng_utility.clone(url_params);l.view=null;let s={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l),enable_search:!0},i=[];for(let t of e.$props.table_filters||[])t.callbackFunction=(e,n)=>{l[t.filterMenuKey]=n.id,y.set_key_to_url(t.filterMenuKey,n.id),e.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l)),NtopUtils.showOverlays(),e.ajax.reload(),NtopUtils.hideOverlays()},i.push(t);n=[{columnName:i18n("map_page.last_seen"),name:"last_seen",data:"last_seen",className:"text-center text-nowrap",render:(e,t)=>e.value,responsivePriority:2},{columnName:i18n("map_page.client"),name:"client",data:"client",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.server"),name:"server",data:"server",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.port"),name:"port",data:"port",className:"text-center",responsivePriority:4},{columnName:i18n("map_page.protocol"),name:"l7proto",data:"protocol",className:"text-nowrap",responsivePriority:3},{columnName:i18n("map_page.first_seen"),name:"first_seen",data:"first_seen",visible:!1,responsivePriority:3},{columnName:i18n("map_page.observations"),name:"observations",data:"observations",className:"text-center",responsivePriority:4},{columnName:i18n("map_page.frequency"),name:"frequency",data:"frequency",className:"text-center",orderable:!0,responsivePriority:4,render:(e,t,n)=>"sort"==t||"type"==t?e:e+" sec"}],a=6;let o={serverSide:!0,order:[[a,"desc"]]},r=ntopng_utility.clone(s);r.table_buttons=s.table_buttons,r.data_url=`${r.data_url}`,r.columns_config=n,r.table_filters=i,r.table_config=ntopng_utility.clone(o),e.config_devices_standard=r}(this)},mounted(){$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),ntopng_events_manager.on_custom_event("page_periodicity_table",ntopng_custom_events.DATATABLE_LOADED,(()=>{y.get_url_entry("host")&&this.hide_dropdowns()}))},data:()=>({i18n:e=>i18n(e),base_url:`${http_prefix}/lua/pro/enterprise/get_map.lua`,config_devices_standard:null,config_devices_centrality:null,title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_download:i18n("map_page.download"),body_download:i18n("map_page.download_message"),get_url:null}),methods:{hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden"),$("#network_dropdown").removeClass("d-inline"),$("#vlan_id_dropdown").removeClass("d-inline")},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",page:this.url_params.page,csrf:this.$props.page_csrf,map:this.url_params.map};try{let n={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:n,body:JSON.stringify(t)}),this.reload_table()}catch(e){this.reload_table()}},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},destroy:function(){this.get_active_table().destroy_table()},get_active_table:function(){return this.$refs.table_periodicity},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()}}};const hm={class:"row"},mm={class:"col-md-12 col-lg-12"},gm=Ls("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),vm={class:"card"},bm=Ls("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Ls("div",{class:"text-center"},[Ls("div",{class:"spinner-border text-primary mt-5",role:"status"},[Ls("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),ym={class:"card-body"},wm={id:"periodicity-table"},xm={class:"card-footer"},km={key:0,type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},$m=Ls("i",{class:"fas fa-trash"},null,-1),Sm=["href"],Cm=[Ls("i",{class:"fas fa-download"},null,-1)];fm.render=function(e,t,n,a,l,s){const i=bl("modal-delete-confirm"),o=bl("datatable");return Ns(),Is("div",hm,[Ls("div",mm,[gm,Ls("div",vm,[bm,Ls("div",ym,[Ls("div",wm,[zs(i,{ref:"modal_delete_all",title:l.title_delete,body:l.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),zs(o,{ref:"table_periodicity",table_buttons:l.config_devices_standard.table_buttons,columns_config:l.config_devices_standard.columns_config,data_url:l.config_devices_standard.data_url,enable_search:l.config_devices_standard.enable_search,filter_buttons:l.config_devices_standard.table_filters,table_config:l.config_devices_standard.table_config,base_url:l.base_url,base_params:n.url_params},null,8,["table_buttons","columns_config","data_url","enable_search","filter_buttons","table_config","base_url","base_params"])])]),Ls("div",xm,[n.is_admin?(Ns(),Is("button",km,[$m,qs(" "+X(l.i18n("map_page.delete_services")),1)])):Gs("v-if",!0),Ls("a",{href:l.get_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"periodicity_map.json",target:"_blank"},Cm,8,Sm)])])])])},fm.__file="http_src/vue/page-periodicity-table.vue";const Nm={autoResize:!0,nodes:{shape:"dot",scaling:{min:10,max:30,label:{min:15,max:15}},shadow:!1},edges:{width:.15,color:{inherit:"from"},smooth:{type:"continuous",roundness:0}},interaction:{tooltipDelay:150,hideEdgesOnDrag:!0,hideEdgesOnZoom:!0,hover:!0,tooltipDelay:0},physics:{barnesHut:{springConstant:0,avoidOverlap:.3,gravitationalConstant:-1e3,damping:.65,centralGravity:0},stabilization:{onlyDynamicEdges:!1}},groups:{unknown:{shape:"dot"},printer:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},video:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},workstation:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},laptop:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},tablet:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},phone:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},tv:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},networking:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},wifi:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},nas:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},multimedia:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},iot:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}}}},Am=function(e,t,n,a){$.post(`${http_prefix}/lua/pro/enterprise/switch_service_state.lua`,{service_id:e,service_status:t,csrf:a}).then((e=>{e.success&&n&&n()}))},Tm=function(){return Nm},Em="change_service_table_tab_event";var Pm={components:{datatable:kh,"modal-delete-confirm":Xh,"tab-list":Gh},props:{page_csrf:String,url_params:Object,view:String,table_filters:Array,is_admin:Boolean,service_acceptance:Array},created(){!function(e){const t=[];let n=[],a=0;e.get_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,url_params),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,n,a,l){e.reload_table()}});let l=url_params;l.view="standard";let s={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l),enable_search:!0},i=[];for(let t of e.$props.table_filters||[])t.callbackFunction=(n,a)=>{l.view=e.service_table_tab,l[t.filterMenuKey]=a.id,y.set_key_to_url(t.filterMenuKey,a.id),n.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l)),NtopUtils.showOverlays(),n.ajax.reload(),NtopUtils.hideOverlays()},i.push(t);n=[{columnName:i18n("map_page.last_seen"),name:"last_seen",data:"last_seen",className:"text-center text-nowrap",render:(e,t)=>e.value,responsivePriority:2,createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("map_page.client"),name:"client",data:"client",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.server"),name:"server",data:"server",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.port"),name:"port",data:"port",className:"text-center",responsivePriority:4},{columnName:i18n("map_page.protocol"),name:"l7proto",data:"protocol",className:"text-nowrap",responsivePriority:3},{columnName:i18n("map_page.first_seen"),name:"first_seen",data:"first_seen",visible:!1,responsivePriority:3},{columnName:i18n("map_page.num_uses"),name:"num_uses",data:"num_uses",className:"text-center text-nowrap",responsivePriority:4},{columnName:i18n("map_page.info"),name:"info",data:"info",responsivePriority:5}],a=6,e.is_admin&&n.push({columnName:i18n("map_page.status"),name:"service_acceptance",data:"service_acceptance",className:"text-center",orderable:!1,responsivePriority:1,render:(t,n,a)=>e.create_action_buttons(t,n,a)});let o={serverSide:!0,order:[[a,"desc"]]},r=ntopng_utility.clone(s);r.table_buttons=s.table_buttons,r.data_url=`${r.data_url}`,r.columns_config=n,r.table_filters=i,r.table_config=ntopng_utility.clone(o),e.config_devices_standard=r,l.view="centrality",s.data_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l),n=[{columnName:i18n("map_page.host"),name:"host",data:"host",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.total_edges"),name:"total_edges",data:"total_edges",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.rank"),name:"rank",data:"rank",className:"text-center",responsivePriority:2},{columnName:i18n("map_page.in_edges"),name:"in_edges",data:"in_edges",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.out_edges"),name:"out_edges",data:"out_edges",className:"text-center",responsivePriority:2}],a=2,o.order=[[a,"desc"]],r=ntopng_utility.clone(s),r.table_buttons=s.table_buttons,r.data_url=`${r.data_url}`,r.columns_config=n,r.table_filters=i,r.table_config=ntopng_utility.clone(o),e.config_devices_centrality=r}(this)},mounted(){this.service_table_tab=this.$props.url_params.view,this.tab_list.forEach((e=>{this.service_table_tab==e.id?e.active=!0:e.active=!1})),k.on_custom_event("page_service_table",ntopng_custom_events.DATATABLE_LOADED,(()=>{y.get_url_entry("host")&&this.hide_dropdowns()})),k.on_custom_event("change_service_table_tab",Em,(e=>{let t=this.get_active_table();y.set_key_to_url("view",e),t.delete_button_handlers(this.service_table_tab),t.destroy_table(),this.service_table_tab=e})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog()))},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null,title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),get_url:null,service_table_tab:null,tab_list:[{title:i18n("map_page.standard_view"),active:"standard"==view,id:"standard"},{title:i18n("map_page.centrality_view"),active:"centrality"==view,id:"centrality"}]}),methods:{hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden"),$("#network_dropdown").removeClass("d-inline"),$("#vlan_id_dropdown").removeClass("d-inline")},destroy:function(){let e=this.get_active_table();e.delete_button_handlers(this.service_table_tab),e.destroy_table()},click_item:function(e){this.tab_list.forEach((e=>e.active=!1)),e.active=!0,k.emit_custom_event(Em,e.id)},create_action_buttons:function(e,t,n){const a=this.reload_table,l=this.$props.page_csrf,s={onClick:()=>{Am(n.hash_id,this.$props.service_acceptance[0].id,a,l)}},i={onClick:()=>{Am(n.hash_id,this.$props.service_acceptance[1].id,a,l)}},o={onClick:()=>{Am(n.hash_id,this.$props.service_acceptance[2].id,a,l)}};if("display"!==t)return e;const r=n.acceptance,c={class:"dropdown-item",href:"#",title:this.$props.service_acceptance[0].label,handler:s},u={class:"dropdown-item",href:"#",title:this.$props.service_acceptance[1].label,handler:i},d={class:"dropdown-item disabled",href:"#",title:this.$props.service_acceptance[2].label,handler:o};switch(r){case 0:c.class="dropdown-item active";break;case 1:u.class="dropdown-item active";break;case 2:d.class="dropdown-item active disabled"}return DataTableUtils.createActionButtons([d,c,u])},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",page:this.url_params.page,csrf:this.$props.page_csrf,map:this.url_params.map};try{let n={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:n,body:JSON.stringify(t)}),this.reload_table()}catch(e){this.reload_table()}},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},get_active_table:function(){return this.$refs[`table_service_${this.service_table_tab}`]},switch_to_standard:function(){this.url_params.view="standard",document.location.href=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/network_maps.lua`,url_params)},switch_to_centrality:function(){this.url_params.view="centrality",document.location.href=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/network_maps.lua`,url_params)},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()}}};const Im={class:"row"},Mm={class:"col-md-12 col-lg-12"},Om=Ls("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),Um={class:"card"},Fm=Ls("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Ls("div",{class:"text-center"},[Ls("div",{class:"spinner-border text-primary mt-5",role:"status"},[Ls("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Rm={class:"card-body"},Dm={id:"table_service"},jm={class:"card-footer"},Lm={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},zm=Ls("i",{class:"fas fa-trash"},null,-1),Bm=["href"],Vm=[Ls("i",{class:"fas fa-download"},null,-1)];Pm.render=function(e,t,n,a,l,s){const i=bl("modal-delete-confirm"),o=bl("tab-list"),r=bl("datatable");return Ns(),Is("div",Im,[Ls("div",Mm,[Om,Ls("div",Um,[Fm,Ls("div",Rm,[Ls("div",Dm,[zs(i,{ref:"modal_delete_all",title:l.title_delete,body:l.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),zs(o,{ref:"service_tab_list",id:"service_tab_list",tab_list:l.tab_list,onClick_item:s.click_item},null,8,["tab_list","onClick_item"]),"standard"==l.service_table_tab?(Ns(),Ms(r,{key:0,ref:"table_service_standard",table_buttons:l.config_devices_standard.table_buttons,columns_config:l.config_devices_standard.columns_config,data_url:l.config_devices_standard.data_url,enable_search:l.config_devices_standard.enable_search,filter_buttons:l.config_devices_standard.table_filters,table_config:l.config_devices_standard.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","filter_buttons","table_config"])):Gs("v-if",!0),"centrality"==l.service_table_tab?(Ns(),Ms(r,{key:1,ref:"table_service_centrality",table_buttons:l.config_devices_centrality.table_buttons,columns_config:l.config_devices_centrality.columns_config,data_url:l.config_devices_centrality.data_url,enable_search:l.config_devices_centrality.enable_search,filter_buttons:l.config_devices_centrality.table_filters,table_config:l.config_devices_centrality.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","filter_buttons","table_config"])):Gs("v-if",!0)])]),Ls("div",jm,[Gs('\n        {% if is_admin then %}\n          <form class="d-inline" id=\'switch-state-form\'>\n            <div class="form-group mb-3 d-inline">\n              <label>{* i18n("map_page.set_state", {label = "<span class=\'count\'></span>"}) *}</label>\n              <select name="new_state" class="form-select d-inline" style="width: 16rem" {{ ternary(map.services_num == 0, "disabled=\'disabled\'", "") }}>\n              {% for _, status in pairsByField(map.filters.service_status_filters, label, asc_insensitive) do %}\n                <option value="{{ status.id }}">{* status.label *}</option>\n              {% end %}\n              </select>\n              <button class="btn btn-secondary d-inline" class="btn-switch-state" {{ ternary(map.services_num == 0, "disabled=\'disabled\'", "") }}>\n                <i class="fas fa-random"></i> {{ i18n("set") }}\n              </button>\n            </div>\n          </form>\n        {% end %}\n    '),Ls("button",Lm,[zm,qs(" "+X(l.i18n("map_page.delete_services")),1)]),Ls("a",{href:l.get_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"service_map.json",target:"_blank"},Vm,8,Bm)])])])])},Pm.__file="http_src/vue/page-service-table.vue";const qm={id:"empty-map-message",class:"alert alert-info",hidden:""},Hm=["id"];var Gm={__name:"network-map",props:{empty_message:String,event_listeners:Object,page_csrf:String,url:String,url_params:Object,map_id:String},setup(e,{expose:t}){const n=e,a={ifid:n.url_params.ifid,action:"load_graph",map:n.url_params.map_id};let l=null,s={},i={},o=null,r=!1,c=null,u={},d=!1;rl((async()=>{_(),u=n.url_params,o=document.getElementById(n.map_id);const e=NtopUtils.buildURL(n.url,u);await $.get(e,a,(function(e){const{nodes:t,edges:n,max_entry_reached:a}=e.rsp;r=a,s=new vis.DataSet(t),i=new vis.DataSet(n);const c={nodes:s,edges:i};p(c),l=new vis.Network(o,c,Tm()),h(),f(),k.emit_custom_event(ntopng_custom_events.VIS_DATA_LOADED)}))})),dl((()=>{1!=d&&v()}));const p=e=>{0==e.nodes.length&&0==e.edges.length?$("#empty-map-message").removeAttr("hidden"):$("#empty-map-message").attr("hidden","hidden")},_=()=>{const e=NtopUtils.loadElementScale($(".resizable-y-container"));if(void 0!==e)$(".resizable-y-container").width(e.width),$(".resizable-y-container").height(e.height),$(".resizable-y-container").on("mouseup",(function(){const e={width:$(".resizable-y-container").width(),height:$(".resizable-y-container").height()};NtopUtils.saveElementScale($(this),e)})),$('button[data-toggle="tooltip"]').tooltip();else{const e={width:$(".resizable-y-container").width(),height:$(".resizable-y-container").height()};NtopUtils.saveElementScale($(this),e)}},f=()=>{l.on("hoverEdge",(function(){$(".vis-tooltip").css("position","absolute")})),l.on("doubleClick",(function(e){(e=>{const t=e.id.split("@");u.host=t[0],u.vlan_id=t[1],y.set_key_to_url("host",u.host),y.set_key_to_url("vlan_id",u.vlan_id),k.emit_custom_event(ntopng_custom_events.CHANGE_PAGE_TITLE,e),b()})(s.get(e.nodes[0]))})),l.on("zoom",(function(e){c=m()})),l.on("dragEnd",(function(e){g()}));for(const e in n.event_listeners||{})l.on(e,n.event_listeners[e])},h=()=>{if(!l)return;const e=l.getPositions(l.body.data.nodes.map((e=>e.id))),t={positions:e,network:{scale:l.getScale(),position:l.getViewPosition()}};$.post(n.url,{...u,csrf:n.page_csrf,JSON:JSON.stringify(t),action:"save_view"})},m=()=>(l.getScale()<=.15&&l.moveTo({scale:.4,position:{x:0,y:0},animation:{duration:1e3,easingFunction:"easeInOutCubic"}}),clearTimeout(c),setTimeout(h)),g=()=>{c&&clearTimeout(c),h()},v=()=>{l.destroy(!0),d=!0},b=async()=>{console.log(u);const e=NtopUtils.buildURL(n.url,u);await $.get(e,a,(function(e){const{nodes:t,edges:n,max_entry_reached:a}=e.rsp;r=a,s=new vis.DataSet(t),i=new vis.DataSet(n);const o={nodes:s,edges:i};p(o),l&&l.setData(o),k.emit_custom_event(ntopng_custom_events.VIS_DATA_LOADED),h()}))};return t({reload:b,destroy:v,is_max_entry_reached:()=>r,autolayout:()=>{void 0!==l?l instanceof vis.Network?(l.stabilize(),setTimeout((()=>{h()}),1e3)):console.error("Not a vis.Network instance!"):console.error("The network is undefined!")},update_url_params:e=>{u=e}}),(t,n)=>(Ns(),Is(ws,null,[Ls("div",qm,X(e.empty_message),1),Ls("div",{class:"d-flex justify-content-center align-items-center resizable-y-container",style:{width:"100%",height:"60vh"},id:e.map_id},null,8,Hm)],64))},__file:"http_src/vue/network-map.vue"},Km={__name:"modal-autolayout-confirm",props:{body:String,title:String},emits:["autolayout"],setup(e,{expose:t,emit:n}){const a=pn(null),l=()=>{n("autolayout"),s()},s=()=>{a.value.close()};t({show:()=>{a.value.show()},close:s}),rl((()=>{}));const i=e=>i18n(e);return(t,n)=>(Ns(),Ms(pp,{onShowed:n[0]||(n[0]=e=>{}),ref_key:"modal_id",ref:a},{title:_a((()=>[qs(X(e.title),1)])),body:_a((()=>[qs(X(e.body),1)])),footer:_a((()=>[Ls("button",{type:"button",onClick:l,class:"btn btn-primary"},X(i("confirm")),1)])),_:1},512))},__file:"http_src/vue/modal-autolayout-confirm.vue"};const Wm="change_filter_event";var Jm={components:{"network-map":Gm,"modal-delete-confirm":Xh,"modal-autolayout-confirm":Km,"select-search":Fd},props:{page_csrf:String,ifid:Number,url_params:Object,map_id:String,is_admin:Boolean,all_filter_list:Object},created(){!function(e){for(const t in e.$props.all_filter_list){e.filter_list.push(e.$props.all_filter_list[t]);const n=ntopng_url_manager.get_url_entry(t);for(let[a,l]of Object.entries(e.$props.all_filter_list[t]))l.filter_name=t,n?l.id==n&&e.active_filter_list.push(l):1==l.currently_active&&e.active_filter_list.push(l)}e.get_url=`${http_prefix}/lua/pro/rest/v2/get/interface/map/data.lua`,e.download_url=NtopUtils.buildURL(e.get_url,e.$props.url_params),e.event_listeners={}}(this)},mounted(){const e=this.max_entry_reached,t=this.reload_map;this.$props.url_params.host&&""!=this.$props.url_params.host&&this.hide_dropdowns(),k.on_custom_event("page_service_map",ntopng_custom_events.CHANGE_PAGE_TITLE,(e=>{this.hide_dropdowns()})),k.on_custom_event("change_filter_event",Wm,(e=>{this.active_filter_list[e.id]=e,ntopng_url_manager.set_key_to_url(e.filter_name,e.key),this.url_params[e.filter_name]=e.key,this.update_and_reload_map()})),k.on_custom_event(this.get_map(),ntopng_custom_events.VIS_DATA_LOADED,(t=>{e()?$("#max-entries-reached").removeAttr("hidden"):$("#max-entries-reached").attr("hidden","hidden")}));let n=ntopng_url_manager.get_url_entries();for(const[e,t]of n)this.url_params[e]=t;$("#reload-graph").click((function(e){t()})),setTimeout((()=>NtopUtils.hideOverlays()),0),$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),$("#autolayout").click((()=>this.show_autolayout_dialog()))},data:()=>({i18n:e=>i18n(e),container:null,update_view_state_id:null,get_url:null,download_url:null,filter_list:[],active_filter_list:[],event_listeners:{},title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_autolayout:i18n("map_page.autolayout_services"),body_autolayout:i18n("map_page.autolayout_services_message"),no_services_message:i18n("map_page.no_services"),max_entry_title:i18n("max_entries_reached")}),methods:{destroy:function(){this.get_map().destroy()},click_item:function(e){k.emit_custom_event(Wm,e)},get_map:function(){return this.$refs.service_map},max_entry_reached:function(){return this.get_map().is_max_entry_reached()},reload_map:async function(){NtopUtils.showOverlays();let e=this.get_map();await e.reload(),NtopUtils.hideOverlays()},update_and_reload_map:async function(){let e=this.get_map();NtopUtils.showOverlays(),e.update_url_params(this.url_params),await e.reload(),NtopUtils.hideOverlays()},autolayout:function(){this.get_map().autolayout()},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_autolayout_dialog:function(){this.$refs.modal_autolayout.show()},hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",csrf:this.$props.page_csrf,map:this.url_params.map};try{let n={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:n,body:JSON.stringify(t)})}finally{this.reload_map()}}}};const Ym={class:"row"},Xm={class:"col-md-12 col-lg-12"},Zm={class:"card card-shadow"},Qm=Ls("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Ls("div",{class:"text-center"},[Ls("div",{class:"spinner-border text-primary mt-5",role:"status"},[Ls("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),eg={class:"card-body"},tg={id:"table_service"},ng={class:"d-flex align-items-center justify-content-end mb-2"},ag=["title"],lg=[Ls("i",{class:"text-danger fa-solid fa-triangle-exclamation"},null,-1)],sg={class:"d-flex ms-auto"},ig={class:"m-1"},og=Ls("button",{type:"button",id:"reload-graph",class:"btn btn-link btn-reload-graph"},[Ls("i",{class:"fas fa-sync"})],-1),rg=Ls("button",{type:"button",id:"autolayout",class:"btn btn-link btn-stabilize"},[Ls("i",{class:"fas fa-magic"})],-1),cg={class:"card-footer"},ug={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},dg=Ls("i",{class:"fas fa-trash"},null,-1),pg=["href"],_g=[Ls("i",{class:"fas fa-download"},null,-1)];Jm.render=function(e,t,n,a,l,s){const i=bl("select-search"),o=bl("modal-delete-confirm"),r=bl("modal-autolayout-confirm"),c=bl("network-map");return Ns(),Is("div",Ym,[Ls("div",Xm,[Ls("div",Zm,[Qm,Ls("div",eg,[Ls("div",tg,[Ls("div",ng,[Ls("button",{id:"max-entries-reached",type:"button",class:"btn btn-link",title:l.max_entry_title,disabled:"",hidden:""},lg,8,ag),Ls("div",sg,[(Ns(!0),Is(ws,null,Sl(l.filter_list,((e,t)=>(Ns(),Is("div",ig,[zs(i,{selected_option:l.active_filter_list[t],"onUpdate:selected_option":e=>l.active_filter_list[t]=e,options:l.filter_list[t],onSelect_option:s.click_item},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256))]),og,rg]),zs(o,{ref:"modal_delete_all",title:l.title_delete,body:l.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),zs(r,{ref:"modal_autolayout",title:l.title_autolayout,body:l.body_autolayout,onAutolayout:s.reload_map},null,8,["title","body","onAutolayout"]),zs(c,{ref:"service_map",empty_message:l.no_services_message,event_listeners:l.event_listeners,page_csrf:n.page_csrf,url:l.get_url,url_params:n.url_params,map_id:n.map_id},null,8,["empty_message","event_listeners","page_csrf","url","url_params","map_id"])])]),Ls("div",cg,[Ls("button",ug,[dg,qs(" "+X(l.i18n("map_page.delete_services")),1)]),Ls("a",{href:l.download_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"service_map.json",target:"_blank"},_g,8,pg)])])])])},Jm.__file="http_src/vue/page-service-map.vue";const fg="change_filter_event";var hg={components:{"network-map":Gm,"modal-delete-confirm":Xh,"modal-autolayout-confirm":Km,"select-search":Fd},props:{page_csrf:String,ifid:Number,url_params:Object,map_id:String,is_admin:Boolean,all_filter_list:Object},created(){!function(e){for(const t in e.$props.all_filter_list){e.filter_list.push(e.$props.all_filter_list[t]);const n=ntopng_url_manager.get_url_entry(t);for(let[a,l]of Object.entries(e.$props.all_filter_list[t]))l.filter_name=t,n?l.id==n&&e.active_filter_list.push(l):1==l.currently_active&&e.active_filter_list.push(l)}e.get_url=`${http_prefix}/lua/pro/rest/v2/get/interface/map/data.lua`,e.download_url=NtopUtils.buildURL(e.get_url,e.updated_url_params),e.event_listeners={}}(this)},mounted(){this.updated_url_params=this.$props.url_params;let e=ntopng_url_manager.get_url_entries();for(const[t,n]of e)this.updated_url_params[t]=n;const t=this.max_entry_reached,n=this.reload_map;this.update_and_reload_map(),this.$props.url_params.host&&""!=this.$props.url_params.host&&this.hide_dropdowns(),k.on_custom_event("page_periodicity_map",ntopng_custom_events.CHANGE_PAGE_TITLE,(e=>{this.hide_dropdowns()})),k.on_custom_event("change_filter_event",fg,(e=>{this.active_filter_list[e.id]=e,ntopng_url_manager.set_key_to_url(e.filter_name,e.key),this.url_params[e.filter_name]=e.key,this.update_and_reload_map()})),k.on_custom_event(this.get_map(),ntopng_custom_events.VIS_DATA_LOADED,(e=>{t()?$("#max-entries-reached").removeAttr("hidden"):$("#max-entries-reached").attr("hidden","hidden")})),$("#reload-graph").click((function(e){n()})),setTimeout((()=>NtopUtils.hideOverlays()),0),$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),$("#autolayout").click((()=>this.show_autolayout_dialog()))},data:()=>({i18n:e=>i18n(e),container:null,update_view_state_id:null,get_url:null,download_url:null,updated_url_params:{},filter_list:[],active_filter_list:[],event_listeners:{},title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_autolayout:i18n("map_page.autolayout_services"),body_autolayout:i18n("map_page.autolayout_services_message"),no_services_message:i18n("map_page.no_services"),max_entry_title:i18n("max_entries_reached")}),methods:{destroy:function(){this.get_map().destroy()},click_item:function(e){k.emit_custom_event(fg,e)},get_map:function(){return this.$refs.periodicity_map},max_entry_reached:function(){return this.get_map().is_max_entry_reached()},reload_map:async function(){NtopUtils.showOverlays();let e=this.get_map();await e.reload(),NtopUtils.hideOverlays()},hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},update_and_reload_map:async function(){let e=this.get_map();NtopUtils.showOverlays(),e.update_url_params(this.updated_url_params),await e.reload(),NtopUtils.hideOverlays()},autolayout:function(){this.get_map().autolayout()},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_autolayout_dialog:function(){this.$refs.modal_autolayout.show()},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.updated_url_params.ifid,action:"reset",csrf:this.$props.page_csrf,map:this.updated_url_params.map};try{let n={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:n,body:JSON.stringify(t)})}finally{this.reload_map()}}}};const mg={class:"row"},gg={class:"col-md-12 col-lg-12"},vg={class:"card card-shadow"},bg=Ls("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Ls("div",{class:"text-center"},[Ls("div",{class:"spinner-border text-primary mt-5",role:"status"},[Ls("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),yg={class:"card-body"},wg={id:"table_periodicity"},xg={class:"d-flex align-items-center justify-content-end mb-2"},kg=["title"],$g=[Ls("i",{class:"text-danger fa-solid fa-triangle-exclamation"},null,-1)],Sg={class:"d-flex ms-auto"},Cg={class:"m-1"},Ng=Ls("button",{type:"button",id:"reload-graph",class:"btn btn-link btn-reload-graph"},[Ls("i",{class:"fas fa-sync"})],-1),Ag=Ls("button",{type:"button",id:"autolayout",class:"btn btn-link btn-stabilize"},[Ls("i",{class:"fas fa-magic"})],-1),Tg={class:"card-footer"},Eg={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Pg=Ls("i",{class:"fas fa-trash"},null,-1),Ig=["href"],Mg=[Ls("i",{class:"fas fa-download"},null,-1)];hg.render=function(e,t,n,a,l,s){const i=bl("select-search"),o=bl("modal-delete-confirm"),r=bl("modal-autolayout-confirm"),c=bl("network-map");return Ns(),Is("div",mg,[Ls("div",gg,[Ls("div",vg,[bg,Ls("div",yg,[Ls("div",wg,[Ls("div",xg,[Ls("button",{id:"max-entries-reached",type:"button",class:"btn btn-link",title:l.max_entry_title,disabled:"",hidden:""},$g,8,kg),Ls("div",Sg,[(Ns(!0),Is(ws,null,Sl(l.filter_list,((e,t)=>(Ns(),Is("div",Cg,[zs(i,{selected_option:l.active_filter_list[t],"onUpdate:selected_option":e=>l.active_filter_list[t]=e,options:l.filter_list[t],onSelect_option:s.click_item},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256))]),Ng,Ag]),zs(o,{ref:"modal_delete_all",title:l.title_delete,body:l.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),zs(r,{ref:"modal_autolayout",title:l.title_autolayout,body:l.body_autolayout,onAutolayout:s.reload_map},null,8,["title","body","onAutolayout"]),zs(c,{ref:"periodicity_map",empty_message:l.no_services_message,event_listeners:l.event_listeners,page_csrf:n.page_csrf,url:l.get_url,url_params:n.url_params,map_id:n.map_id},null,8,["empty_message","event_listeners","page_csrf","url","url_params","map_id"])])]),Ls("div",Tg,[Ls("button",Eg,[Pg,qs(" "+X(l.i18n("map_page.delete_services")),1)]),Ls("a",{href:l.download_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"periodicity_map.json",target:"_blank"},Mg,8,Ig)])])])])},hg.__file="http_src/vue/page-periodicity-map.vue";const Og="change_filter_event";var Ug={components:{"network-map":Gm,"modal-delete-confirm":Xh,"modal-autolayout-confirm":Km,"select-search":Fd},props:{page_csrf:String,ifid:Number,url_params:Object,map_id:String,is_admin:Boolean,all_filter_list:Object},created(){!function(e){for(const t in e.$props.all_filter_list){e.filter_list.push(e.$props.all_filter_list[t]);const n=y.get_url_entry(t);for(let[a,l]of Object.entries(e.$props.all_filter_list[t]))l.filter_name=t,n?l.id==n&&e.active_filter_list.push(l):1==l.currently_active&&e.active_filter_list.push(l)}e.get_url=`${http_prefix}/lua/pro/rest/v2/get/interface/map/data.lua`,e.download_url=NtopUtils.buildURL(e.get_url,e.$props.url_params),e.event_listeners={}}(this)},mounted(){const e=this.max_entry_reached,t=this.reload_map;this.$props.url_params.host&&""!=this.$props.url_params.host&&this.hide_dropdowns(),k.on_custom_event("page_service_map",ntopng_custom_events.CHANGE_PAGE_TITLE,(e=>{this.hide_dropdowns()})),k.on_custom_event("change_filter_event",Og,(e=>{this.active_filter_list[e.id]=e,y.set_key_to_url(e.filter_name,e.key),this.url_params[e.filter_name]=e.key,this.update_and_reload_map()})),k.on_custom_event(this.get_map(),ntopng_custom_events.VIS_DATA_LOADED,(t=>{e()?$("#max-entries-reached").removeAttr("hidden"):$("#max-entries-reached").attr("hidden","hidden")}));let n=y.get_url_entries();for(const[e,t]of n)this.url_params[e]=t;$("#reload-graph").click((function(e){t()})),NtopUtils.hideOverlays(),$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),$("#autolayout").click((()=>this.show_autolayout_dialog()))},data:()=>({i18n:e=>i18n(e),container:null,update_view_state_id:null,get_url:null,download_url:null,filter_list:[],active_filter_list:[],event_listeners:{},title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_autolayout:i18n("map_page.autolayout_services"),body_autolayout:i18n("map_page.autolayout_services_message"),no_services_message:i18n("map_page.no_services"),max_entry_title:i18n("max_entries_reached")}),methods:{destroy:function(){this.get_map().destroy()},click_item:function(e){k.emit_custom_event(Og,e)},get_map:function(){return this.$refs.asset_map},hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},max_entry_reached:function(){return this.get_map().is_max_entry_reached()},reload_map:async function(){NtopUtils.showOverlays();let e=this.get_map();await e.reload(),NtopUtils.hideOverlays()},update_and_reload_map:async function(){let e=this.get_map();NtopUtils.showOverlays(),e.update_url_params(this.url_params),await e.reload(),NtopUtils.hideOverlays()},autolayout:function(){this.get_map().autolayout()},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_autolayout_dialog:function(){this.$refs.modal_autolayout.show()},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",csrf:this.$props.page_csrf,map:this.url_params.map};try{let n={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:n,body:JSON.stringify(t)})}finally{NtopUtils.showOverlays(),this.reload_map(),NtopUtils.hideOverlays()}}}};const Fg={class:"row"},Rg={class:"col-md-12 col-lg-12"},Dg={class:"card card-shadow"},jg=Ls("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Ls("div",{class:"text-center"},[Ls("div",{class:"spinner-border text-primary mt-5",role:"status"},[Ls("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Lg={class:"card-body"},zg={id:"table_asset"},Bg={class:"d-flex align-items-center justify-content-end mb-2"},Vg=["title"],qg=[Ls("i",{class:"text-danger fa-solid fa-triangle-exclamation"},null,-1)],Hg={class:"d-flex ms-auto"},Gg={class:"m-1"},Kg=Ls("button",{type:"button",id:"reload-graph",class:"btn btn-link btn-reload-graph"},[Ls("i",{class:"fas fa-sync"})],-1),Wg=Ls("button",{type:"button",id:"autolayout",class:"btn btn-link btn-stabilize"},[Ls("i",{class:"fas fa-magic"})],-1),Jg={class:"card-footer"},Yg={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Xg=Ls("i",{class:"fas fa-trash"},null,-1),Zg=["href"],Qg=[Ls("i",{class:"fas fa-download"},null,-1)];Ug.render=function(e,t,n,a,l,s){const i=bl("select-search"),o=bl("modal-delete-confirm"),r=bl("modal-autolayout-confirm"),c=bl("network-map");return Ns(),Is("div",Fg,[Ls("div",Rg,[Ls("div",Dg,[jg,Ls("div",Lg,[Ls("div",zg,[Ls("div",Bg,[Ls("button",{id:"max-entries-reached",type:"button",class:"btn btn-link",title:l.max_entry_title,disabled:"",hidden:""},qg,8,Vg),Ls("div",Hg,[(Ns(!0),Is(ws,null,Sl(l.filter_list,((e,t)=>(Ns(),Is("div",Gg,[zs(i,{selected_option:l.active_filter_list[t],"onUpdate:selected_option":e=>l.active_filter_list[t]=e,options:l.filter_list[t],onSelect_option:s.click_item},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256))]),Kg,Wg]),zs(o,{ref:"modal_delete_all",title:l.title_delete,body:l.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),zs(r,{ref:"modal_autolayout",title:l.title_autolayout,body:l.body_autolayout,onAutolayout:s.reload_map},null,8,["title","body","onAutolayout"]),zs(c,{ref:"asset_map",empty_message:l.no_services_message,event_listeners:l.event_listeners,page_csrf:n.page_csrf,url:l.get_url,url_params:n.url_params,map_id:n.map_id},null,8,["empty_message","event_listeners","page_csrf","url","url_params","map_id"])])]),Ls("div",Jg,[Ls("button",Yg,[Xg,qs(" "+X(l.i18n("map_page.delete_services")),1)]),Ls("a",{href:l.download_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"asset_map.json",target:"_blank"},Qg,8,Zg)])])])])},Ug.__file="http_src/vue/page-asset-map.vue";var ev=Ga({components:{},props:{id:String,main_title:Object,secondary_title_list:Array,help_link:String,items_table:Array},emits:["click_item"],created(){},data:()=>({}),mounted(){ntopng_sync.ready(this.$props.id)},methods:{}});const tv={class:"navbar navbar-shadow navbar-expand-lg navbar-light bg-light px-2 mb-2"},nv={class:"me-1 text-nowrap",style:{"font-size":"1.1rem"}},av=["href","title"],lv=["title"],sv=qs(" / "),iv=["href","title"],ov=["title"],rv=Ls("span",{class:"text-muted ms-1 d-none d-lg-inline d-md-none"},"|",-1),cv=Ls("button",{class:"navbar-toggler",type:"button"},[Ls("span",{class:"navbar-toggler-icon"})],-1),uv={class:"collapse navbar-collapse scroll-x",id:"navbarNav"},dv={class:"navbar-nav"},pv=["onClick"],_v={key:0,class:"badge rounded-pill bg-dark",style:{float:"right","margin-bottom":"-10px"}},fv=["onClick"],hv={key:0,class:"badge rounded-pill bg-dark",style:{float:"right","margin-bottom":"-10px"}},mv={class:"navbar-nav ms-auto"},gv=Ls("a",{href:"javascript:history.back()",class:"nav-item nav-link text-muted"},[Ls("i",{class:"fas fa-arrow-left"})],-1),vv=["href"],bv=[Ls("i",{class:"fas fa-question-circle"},null,-1)];ev.render=function(e,t,n,a,l,s){return Ns(),Is("nav",tv,[Ls("span",nv,[Ls("i",{class:q(e.main_title.icon)},null,2),e.main_title.href?(Ns(),Is("a",{key:0,href:e.main_title.href,title:e.main_title.title},X(e.main_title.label),9,av)):(Ns(),Is("span",{key:1,title:e.main_title.title},X(e.main_title.label),9,lv)),(Ns(!0),Is(ws,null,Sl(e.secondary_title_list,(e=>(Ns(),Is(ws,null,[sv,e.href?(Ns(),Is("a",{key:0,href:e.href,title:e.title},X(e.label),9,iv)):(Ns(),Is("span",{key:1,title:e.title},X(e.label),9,ov))],64)))),256))]),rv,cv,Ls("div",uv,[Ls("ul",dv,[(Ns(!0),Is(ws,null,Sl(e.items_table,(e=>(Ns(),Is(ws,null,[e.active?(Ns(),Is("li",{key:0,onClick:t=>this.$emit("click_item",e),class:q([{active:e.active},"nav-item nav-link"])},[e.badge_num>0?(Ns(),Is("span",_v,X(e.badge_num),1)):Gs("v-if",!0),Ls("b",null,[Ls("i",{class:q(e.icon)},null,2),qs(" "+X(e.label),1)])],10,pv)):(Ns(),Is("a",{key:1,onClick:t=>this.$emit("click_item",e),href:"#",class:"nav-item nav-link"},[e.badge_num>0?(Ns(),Is("span",hv,X(e.badge_num),1)):Gs("v-if",!0),Ls("i",{class:q(e.icon)},null,2),qs(" "+X(e.label),1)],8,fv))],64)))),256))]),Ls("ul",mv,[gv,Ls("a",{target:"_newtab",href:e.help_link,class:"nav-item nav-link text-muted"},bv,8,vv)])])])},ev.__file="http_src/vue/page-navbar.vue";const yv={class:"form-group mb-3 row"},wv={class:"col-form-label col-sm-4"},xv={class:"col-sm-7"},kv=Ls("div",{class:"invalid-feedback"},null,-1),$v={class:"form-group mb-3 row"},Sv={class:"col-form-label col-sm-4 pt-2"},Cv={class:"form-switch col-sm-7 pt-2 ps-3"},Nv={class:"col-form-label"};var Av={__name:"modal-add-device-exclusion",props:{body:String,title:String,footer:String,list_notes:String},emits:["add"],setup(e,{expose:t,emit:n}){const a=pn(""),l=pn(""),s=pn(null),i=()=>{n("add",{mac_list:a.value,trigger_alerts:l.value}),o()},o=()=>{s.value.close()};t({show:()=>{a.value="",s.value.show()},close:o}),rl((()=>{}));const r=e=>i18n(e);return(t,n)=>(Ns(),Ms(pp,{onShowed:n[2]||(n[2]=e=>{}),ref_key:"modal_id",ref:s},{title:_a((()=>[qs(X(e.title),1)])),body:_a((()=>[Ls("div",yv,[Ls("label",wv,X(e.body),1),Ls("div",xv,[gl(Ls("textarea",{name:"items-list",id:"itemslist-textarea",class:"w-100 form-control",rows:"6","onUpdate:modelValue":n[0]||(n[0]=e=>a.value=e)},null,512),[[Po,a.value]]),Ls("small",null,X(e.list_notes),1),kv])]),Ls("div",$v,[Ls("label",Sv,X(r("edit_check.trigger_device_disconnected_alert")),1),Ls("div",Cv,[gl(Ls("input",{type:"checkbox",class:"form-check-input ms-0","onUpdate:modelValue":n[1]||(n[1]=e=>l.value=e)},null,512),[[Io,l.value]])]),Ls("small",Nv,X(r("edit_check.trigger_device_disconnected_alert_descr")),1)])])),footer:_a((()=>[qs(X(r("host_details.notes"))+": "+X(e.footer)+" ",1),Ls("button",{type:"button",onClick:i,class:"btn btn-primary"},X(r("add")),1)])),_:1},512))},__file:"http_src/vue/modal-add-device-exclusion.vue"};const Tv={class:"form-group mb-3 row"},Ev={class:"col-form-label col-sm-4"},Pv={class:"col-sm-7"},Iv={class:"form-group mb-3 row"},Mv={class:"col-form-label col-sm-4"},Ov={class:"col-sm-7"},Uv={value:"allowed"},Fv={value:"denied"},Rv={class:"form-group mb-3 row"},Dv={class:"col-form-label col-sm-4 pt-2"},jv={class:"form-switch col-sm-7 pt-2 ps-3"},Lv={class:"col-form-label"};var zv={__name:"modal-edit-device-exclusion",props:{title:String},emits:["edit"],setup(e,{expose:t,emit:n}){const a=pn(""),l=pn(""),s=pn(""),i=pn(null),o=()=>{n("edit",{mac_alias:a.value,mac_status:l.value,trigger_alerts:s.value}),r()},r=()=>{i.value.close()};t({show:e=>{l.value=e.status,a.value=e.mac_address_label.label,s.value=e.trigger_alert||!1,i.value.show()},close:r}),rl((()=>{}));const c=e=>i18n(e);return(t,n)=>(Ns(),Ms(pp,{onShowed:n[3]||(n[3]=e=>{}),ref_key:"modal_id",ref:i},{title:_a((()=>[qs(X(e.title),1)])),body:_a((()=>[Ls("div",Tv,[Ls("label",Ev,X(c("edit_check.device_alias")),1),Ls("div",Pv,[gl(Ls("input",{type:"text",name:"custom_name",class:"form-control",placeholder:"{{_i18n('custom_name')}}","onUpdate:modelValue":n[0]||(n[0]=e=>a.value=e)},null,512),[[Po,a.value]])])]),Ls("div",Iv,[Ls("label",Mv,X(c("edit_check.device_status")),1),Ls("div",Ov,[gl(Ls("select",{name:"device_status",class:"form-select","onUpdate:modelValue":n[1]||(n[1]=e=>l.value=e)},[Ls("option",Uv,X(c("allowed")),1),Ls("option",Fv,X(c("denied")),1)],512),[[Uo,l.value]])])]),Ls("div",Rv,[Ls("label",Dv,X(c("edit_check.trigger_device_disconnected_alert")),1),Ls("div",jv,[gl(Ls("input",{type:"checkbox",class:"form-check-input ms-0","onUpdate:modelValue":n[2]||(n[2]=e=>s.value=e)},null,512),[[Io,s.value]])]),Ls("small",Lv,X(c("edit_check.trigger_device_disconnected_alert_descr")),1)])])),footer:_a((()=>[Ls("button",{type:"button",onClick:o,class:"btn btn-primary"},X(c("edit")),1)])),_:1},512))},__file:"http_src/vue/modal-edit-device-exclusion.vue"},Bv={components:{"page-navbar":ev,datatable:kh,"modal-delete-confirm":Xh,"modal-add-device-exclusion":Av,"modal-edit-device-exclusion":zv},props:{page_csrf:String,is_clickhouse_enabled:Boolean},created(){!function(e){const t=[];t.push({text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(t,n,a,l){e.show_add_device_dialog()}}),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,n,a,l){e.reload_table()}});let n={table_buttons:t,columns_config:[],data_url:`${http_prefix}/lua/pro/rest/v2/get/device/exclusion.lua`,enable_search:!0},a=ntopng_utility.clone(n);a.table_buttons=n.table_buttons,a.data_url=`${a.data_url}`,a.columns_config=[{sortable:!1,searchable:!1,visible:!1,data:"mac_address",type:"mac-address",responsivePriority:1},{columnName:i18n("edit_check.excluded_device"),data:"mac_address_label",type:"mac-address",className:"text-nowrap",sortable:!0,searchable:!0,createdCell:DataTableRenders.applyCellStyle,responsivePriority:1,render:function(e,t,n){let a=e.label;return e.label!==e.mac&&(a=a+" ["+e.mac+"]"),e.url&&(a=`<a href='${e.url}' title='${e.mac}'>${a}</a>`),a}},{columnName:i18n("first_seen"),data:"first_seen",type:"time",sortable:!0,searchable:!0,className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,n){return e.data}},{columnName:i18n("last_seen"),data:"last_seen",type:"time",sortable:!0,searchable:!0,className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,n){return e.data}},{columnName:i18n("edit_check.device_status"),data:"status",type:"status",sortable:!0,searchable:!0,className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,n){return i18n(e)}},{columnName:i18n("edit_check.trigger_alert"),data:"trigger_alert",type:"boolean",sortable:!0,searchable:!0,className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,n){return e?'<i class="fas fa-check text-success"></i>':'<i class="fas fa-times text-danger"></i>'}},{targets:-1,columnName:i18n("action"),data:null,name:"actions",className:"text-center text-nowrap",sortable:!1,responsivePriority:1,render:function(t,n,a){let l={handlerId:"delete_device",onClick:()=>{let n=`${i18n("edit_check.delete_device_exclusion")} ${t.mac_address_label.label}`;e.show_delete_dialog(i18n("edit_check.device_exclusion"),n,t)}},s={handlerId:"edit_device",onClick:()=>{e.show_edit_device_dialog(t)}},i={onClick:()=>{const e=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${t.first_seen.timestamp}&epoch_end=${t.last_seen.timestamp}&mac=${t.mac_address};eq`;window.open(e,"_blank")}};return DataTableUtils.createActionButtons([{class:"pointer",handler:i,icon:"fa-stream",title:i18n("db_explorer.historical_data"),hidden:!isClickhouseEnabled},{class:"btn-secondary",handler:s,icon:"fa-edit",title:i18n("edit"),class:"pointer"},{class:"btn-danger",handler:l,icon:"fa-trash",title:i18n("delete"),class:"pointer"}])}}],e.config_devices=a}(this)},mounted(){this.learning_status(),$("#btn-delete-all-devices").click((()=>this.show_delete_all_dialog()))},data:()=>({i18n:e=>i18n(e),config_devices:null,navbar_context:{main_title:{label:i18n("edit_check.device_exclusion_list"),icon:"fas fa-bell-slash"},base_url:"#",items_table:[{active:!0,label:i18n("devices"),id:"devices"}]},title_delete:"",body_delete:"",title_delete_all:i18n("edit_check.delete_all_device_exclusions"),body_delete_all:i18n("edit_check.delete_all_device_exclusions_message"),title_add:i18n("edit_check.add_device_exclusion"),body_add:i18n("edit_check.add_device_exclusion_message"),footer_add:i18n("edit_check.add_device_exclusion_notes"),list_notes_add:i18n("edit_check.add_device_exclusion_list_notes"),title_edit:i18n("edit_check.edit_device_exclusion"),learning_message:i18n("edit_check.learning"),row_to_delete:null,row_to_edit:null}),methods:{add_device:async function(e){e.mac_list=e.mac_list.replace(/(?:\t| )/g,""),e.mac_list=e.mac_list.replace(/(?:\r\n|\r|\n)/g,","),e.csrf=this.$props.page_csrf;let t=`${http_prefix}/lua/pro/rest/v2/add/device/exclusion.lua`;try{let n={"Content-Type":"application/json"};await ntopng_utility.http_request(t,{method:"post",headers:n,body:JSON.stringify(e)}),this.reload_table()}catch(e){console.error(e)}},delete_all:async function(){let e=`${http_prefix}/lua/pro/rest/v2/delete/device/exclusion.lua`,t={device:"all",csrf:this.$props.page_csrf};try{let n={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:n,body:JSON.stringify(t)}),this.reload_table()}catch(e){console.error(e)}},delete_row:async function(){let e={device:this.row_to_delete.mac_address,csrf:this.$props.page_csrf},t=`${http_prefix}/lua/pro/rest/v2/delete/device/exclusion.lua`;try{let n={"Content-Type":"application/json"};await ntopng_utility.http_request(t,{method:"post",headers:n,body:JSON.stringify(e)}),setTimeout((()=>this.reload_table()),300)}catch(e){console.error(e)}},edit_row:async function(e){let t=this.row_to_edit;e.mac_alias=e.mac_alias.replace(/(?:\t| )/g,""),e.csrf=this.$props.page_csrf,e.mac=t.mac_address;let n=`${http_prefix}/lua/pro/rest/v2/edit/device/exclusion.lua`;try{let t={"Content-Type":"application/json"};await ntopng_utility.http_request(n,{method:"post",headers:t,body:JSON.stringify(e)}),setTimeout((()=>this.reload_table()),300)}catch(e){console.error(e)}},learning_status:async function(){let e=`${http_prefix}/lua/pro/rest/v2/get/device/learning_status.lua`;try{let t={"Content-Type":"application/json"};(await ntopng_utility.http_request(e,{method:"get",headers:t})).learning_done?$("#devices-learning-status").attr("hidden","hidden"):$("#devices-learning-status").removeAttr("hidden")}catch(e){console.error(e)}},reload_table:function(){this.get_active_table().reload(),this.learning_status()},get_active_table:function(){return this.$refs.table_devices_exclusion},show_add_device_dialog:function(){this.$refs.modal_add_device.show()},show_edit_device_dialog:function(e){this.row_to_edit=e,this.$refs.modal_edit_device.show(e)},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_delete_dialog:function(e,t,n){this.row_to_delete=n,this.title_delete=e,this.body_delete=t,this.$refs.modal_delete_confirm.show()}}};const Vv={id:"navbar"},qv={class:"row"},Hv={class:"col-md-12 col-lg-12"},Gv=Ls("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),Kv={class:"card"},Wv={class:"card-body"},Jv={id:"devices-learning-status",class:"alert alert-info",hidden:""},Yv={id:"table_devices_vue"},Xv={class:"card-footer"},Zv={type:"button",id:"btn-delete-all-devices",class:"btn btn-danger"},Qv=Ls("i",{class:"fas fa-trash"},null,-1);Bv.render=function(e,t,n,a,l,s){const i=bl("page-navbar"),o=bl("modal-delete-confirm"),r=bl("modal-add-device-exclusion"),c=bl("modal-edit-device-exclusion"),u=bl("datatable");return Ns(),Is(ws,null,[Ls("div",Vv,[zs(i,{id:"page_navbar",main_title:l.navbar_context.main_title,base_url:l.navbar_context.base_url,help_link:l.navbar_context.help_link,items_table:l.navbar_context.items_table,onClick_item:e.click_item},null,8,["main_title","base_url","help_link","items_table","onClick_item"])]),Ls("div",qv,[Ls("div",Hv,[Gv,Ls("div",Kv,[Ls("div",Wv,[Ls("div",Jv,X(l.learning_message),1),Ls("div",Yv,[zs(o,{ref:"modal_delete_confirm",title:l.title_delete,body:l.body_delete,onDelete:s.delete_row},null,8,["title","body","onDelete"]),zs(o,{ref:"modal_delete_all",title:l.title_delete_all,body:l.body_delete_all,onDelete:s.delete_all},null,8,["title","body","onDelete"]),zs(r,{ref:"modal_add_device",title:l.title_add,body:l.body_add,footer:l.footer_add,list_notes:l.list_notes_add,onAdd:s.add_device},null,8,["title","body","footer","list_notes","onAdd"]),zs(c,{ref:"modal_edit_device",title:l.title_edit,onEdit:s.edit_row},null,8,["title","onEdit"]),zs(u,{ref:"table_devices_exclusion",table_buttons:l.config_devices.table_buttons,columns_config:l.config_devices.columns_config,data_url:l.config_devices.data_url,enable_search:l.config_devices.enable_search},null,8,["table_buttons","columns_config","data_url","enable_search"])])]),Ls("div",Xv,[Ls("button",Zv,[Qv,qs(" "+X(l.i18n("edit_check.delete_all_device_exclusions")),1)])])])])])],64)},Bv.__file="http_src/vue/page-device-exclusions.vue";var eb={components:{datatable:kh},props:{page_csrf:String,url_params:Object},created(){!function(e){const t=[];let n=[],a=3;t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,n,a,l){e.reload_table()}});let l={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/fingerprint/data.lua`,url_params),enable_search:!0};n=[{columnName:i18n("ja3_client_fingerprint"),name:"ja3",data:"ja3",className:"text-nowrap",render:(e,t)=>`<a class="ntopng-external-link" href="https://sslbl.abuse.ch/ja3-fingerprints/${e}">${e} <i class="fas fa-external-link-alt"></i></a>`,responsivePriority:0,createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("status"),name:"is_malicious",data:"is_malicious",className:"text-nowrap text-center",responsivePriority:0,render:(e,t)=>e?`<i class="fa-solid fa-face-frown text-danger" title="${i18n("malicious")}"></i>`:`<i class="fa-solid fa-face-smile text-success" title="${i18n("ok")}"></i>`},{columnName:i18n("app_name"),name:"app_name",data:"app_name",className:"text-nowrap text-right",responsivePriority:1},{columnName:i18n("num_uses"),name:"num_uses",data:"num_uses",className:"text-nowrap text-right",responsivePriority:1,render:e=>NtopUtils.formatValue(e)}];let s={serverSide:!1,order:[[a,"desc"]]},i=ntopng_utility.clone(l);i.table_buttons=l.table_buttons,i.data_url=`${i.data_url}`,i.columns_config=n,i.table_config=ntopng_utility.clone(s),e.config_devices_standard=i}(this)},mounted(){},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null}),methods:{reload_table:function(){this.get_active_table().reload()},get_active_table:function(){return this.$refs.table_fingerprint}}};const tb={class:"row"},nb={class:"col-md-12 col-lg-12"},ab=Ls("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),lb={class:"card"},sb={class:"card-body"},ib={id:"table_host_tls"},ob={class:"card-footer"};eb.render=function(e,t,n,a,l,s){const i=bl("datatable");return Ns(),Is("div",tb,[Ls("div",nb,[ab,Ls("div",lb,[Ls("div",sb,[Ls("div",ib,[zs(i,{ref:"table_fingerprint",table_buttons:l.config_devices_standard.table_buttons,columns_config:l.config_devices_standard.columns_config,data_url:l.config_devices_standard.data_url,enable_search:l.config_devices_standard.enable_search,table_config:l.config_devices_standard.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])]),Ls("div",ob,[Ls("b",null,X(l.i18n("fingerprint_note")),1)])])])])},eb.__file="http_src/vue/page-host-tls.vue";var rb={components:{datatable:kh},props:{page_csrf:String,url_params:Object},created(){!function(e){const t=[];let n=[],a=3;t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,n,a,l){e.reload_table()}});let l={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/fingerprint/data.lua`,url_params),enable_search:!0};n=[{columnName:i18n("hassh_fingerprint"),name:"ja3",data:"ja3",className:"text-nowrap",render:(e,t)=>`<a class="ntopng-external-link" href="https://sslbl.abuse.ch/ja3-fingerprints/${e}">${e} <i class="fas fa-external-link-alt"></i></a>`,responsivePriority:0,createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("status"),name:"is_malicious",data:"is_malicious",className:"text-nowrap text-center",responsivePriority:0,render:(e,t)=>e?`<i class="fa-solid fa-face-frown text-danger" title="${i18n("malicious")}"></i>`:`<i class="fa-solid fa-face-smile text-success" title="${i18n("ok")}"></i>`},{columnName:i18n("app_name"),name:"app_name",data:"app_name",className:"text-nowrap text-right",responsivePriority:1},{columnName:i18n("num_uses"),name:"num_uses",data:"num_uses",className:"text-nowrap text-right",responsivePriority:1,render:e=>NtopUtils.formatValue(e)}];let s={serverSide:!1,order:[[a,"desc"]]},i=ntopng_utility.clone(l);i.table_buttons=l.table_buttons,i.data_url=`${i.data_url}`,i.columns_config=n,i.table_config=ntopng_utility.clone(s),e.config_devices_standard=i}(this)},mounted(){},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null}),methods:{reload_table:function(){this.get_active_table().reload()},get_active_table:function(){return this.$refs.table_hassh}}};const cb={class:"row"},ub={class:"col-md-12 col-lg-12"},db=Ls("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),pb={class:"card"},_b={class:"card-body"},fb={id:"table_host_ssh"};rb.render=function(e,t,n,a,l,s){const i=bl("datatable");return Ns(),Is("div",cb,[Ls("div",ub,[db,Ls("div",pb,[Ls("div",_b,[Ls("div",fb,[zs(i,{ref:"table_hassh",table_buttons:l.config_devices_standard.table_buttons,columns_config:l.config_devices_standard.columns_config,data_url:l.config_devices_standard.data_url,enable_search:l.config_devices_standard.enable_search,table_config:l.config_devices_standard.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])])])])])},rb.__file="http_src/vue/page-host-ssh.vue";const hb="change_map_event";var mb={components:{"page-periodicity-map":hg,"page-periodicity-table":fm,"page-asset-map":Ug,"page-asset-table":Qh,"page-service-map":Jm,"page-service-table":Pm,"page-navbar":ev},props:{page_csrf:String,base_url_params:Object,ifid:Number,is_admin:Boolean,map_id:String,view:String,navbar_info:Object,service_acceptance:Array,service_map_filter_list:Object,service_table_filter_list:Array,periodicity_map_filter_list:Object,periodicity_table_filter_list:Array,asset_map_filter_list:Object,asset_table_filter_list:Array},created(){this.url_params=this.$props.base_url_params,this.active_tab=this.$props.map_id,this.page=this.url_params.page,this.updated_view=this.$props.view,asset_map_filter_list&&asset_table_filter_list&&(this.navbar_context.items_table.push({active:!1,label:i18n("asset_map"),id:"asset_map",page:"graph"}),this.navbar_context.items_table.push({active:!1,label:i18n("asset_table"),id:"asset_map",page:"table"})),this.navbar_context.items_table.forEach((e=>{e.id==this.active_tab&&e.page==this.page?e.active=!0:e.active=!1}))},mounted(){const e=this.format_navbar_title;e(this.$props.navbar_info),ntopng_events_manager.on_custom_event("page_navbar",ntopng_custom_events.CHANGE_PAGE_TITLE,(t=>{e({selected_iface:this.$props.navbar_info.selected_iface,selected_host:t})})),ntopng_events_manager.on_custom_event("change_service_table_tab",hb,(t=>{y.set_key_to_url("map",t.id),y.set_key_to_url("page",t.page),"table"==t.page&&this.destroy(),this.active_tab=t.id,this.page=t.page,this.url_params.map=t.id,this.url_params.page=t.page,this.updated_view=y.get_url_entry("view"),e()}))},data:()=>({i18n:e=>i18n(e),active_tab:null,page:null,url_params:{},updated_view:null,navbar_node:{},navbar_context:{main_title:{label:" "+i18n("maps"),icon:"fas fa-map"},secondary_title_list:[],items_table:[{active:!0,label:i18n("service_map"),id:"service_map",page:"graph"},{active:!1,label:i18n("service_table"),id:"service_map",page:"table"},{active:!1,label:i18n("periodicity_map"),id:"periodicity_map",page:"graph"},{active:!1,label:i18n("periodicity_table"),id:"periodicity_map",page:"table"}]}}),methods:{destroy:function(){this.get_active_tab().destroy()},format_navbar_title:function(e){e?this.navbar_node=e:e=this.navbar_node,this.navbar_context.secondary_title_list=[{label:e.selected_iface.label,title:NtopUtils.shortenLabel(`${e.selected_iface.label}`,16)}],e.selected_host&&""!=e.selected_host.id&&(this.navbar_context.secondary_title_list[0].href=`${http_prefix}/lua/pro/enterprise/network_maps.lua?map=${this.active_tab}&page=${this.page}&ifid=${this.$props.ifid}`,this.navbar_context.secondary_title_list.push({label:NtopUtils.shortenLabel(`${e.selected_host.label}`,16,"."),title:`${e.selected_host.label}`,href:e.selected_host.is_active?`${http_prefix}/lua/host_details.lua?host=${e.selected_host.id}`:null,target_blank:"true"}))},get_active_tab:function(){return this.$refs[this.active_tab+"_"+this.page]},click_item:function(e){this.navbar_context.items_table.forEach((e=>e.active=!1)),e.active=!0,ntopng_events_manager.emit_custom_event(hb,e)}}};mb.render=function(e,t,n,a,l,s){const i=bl("page-navbar"),o=bl("page-service-map"),r=bl("page-service-table"),c=bl("page-periodicity-map"),u=bl("page-periodicity-table"),d=bl("page-asset-map"),p=bl("page-asset-table");return Ns(),Is(ws,null,[zs(i,{id:"page_navbar",main_title:l.navbar_context.main_title,secondary_title_list:l.navbar_context.secondary_title_list,help_link:l.navbar_context.help_link,items_table:l.navbar_context.items_table,onClick_item:s.click_item},null,8,["main_title","secondary_title_list","help_link","items_table","onClick_item"]),"service_map"==l.active_tab&&"graph"==l.page?(Ns(),Ms(o,{key:0,ref:"service_map_graph",page_csrf:n.page_csrf,url_params:l.url_params,ifid:n.ifid,is_admin:n.is_admin,map_id:n.map_id,all_filter_list:n.service_map_filter_list},null,8,["page_csrf","url_params","ifid","is_admin","map_id","all_filter_list"])):Gs("v-if",!0),"service_map"==l.active_tab&&"table"==l.page?(Ns(),Ms(r,{key:1,ref:"service_map_table",page_csrf:n.page_csrf,url_params:l.url_params,view:l.updated_view,table_filters:n.service_table_filter_list,is_admin:n.is_admin,service_acceptance:n.service_acceptance},null,8,["page_csrf","url_params","view","table_filters","is_admin","service_acceptance"])):Gs("v-if",!0),"periodicity_map"==l.active_tab&&"graph"==l.page?(Ns(),Ms(c,{key:2,ref:"periodicity_map_graph",page_csrf:n.page_csrf,url_params:l.url_params,ifid:n.ifid,is_admin:n.is_admin,map_id:n.map_id,all_filter_list:n.periodicity_map_filter_list},null,8,["page_csrf","url_params","ifid","is_admin","map_id","all_filter_list"])):Gs("v-if",!0),"periodicity_map"==l.active_tab&&"table"==l.page?(Ns(),Ms(u,{key:3,ref:"periodicity_map_table",page_csrf:n.page_csrf,url_params:l.url_params,view:l.updated_view,table_filters:n.periodicity_table_filter_list,is_admin:n.is_admin},null,8,["page_csrf","url_params","view","table_filters","is_admin"])):Gs("v-if",!0),n.asset_map_filter_list&&n.asset_table_filter_list?(Ns(),Is(ws,{key:4},["asset_map"==l.active_tab&&"graph"==l.page?(Ns(),Ms(d,{key:0,ref:"asset_map_graph",page_csrf:n.page_csrf,url_params:l.url_params,ifid:n.ifid,is_admin:n.is_admin,map_id:n.map_id,all_filter_list:n.asset_map_filter_list},null,8,["page_csrf","url_params","ifid","is_admin","map_id","all_filter_list"])):Gs("v-if",!0),"asset_map"==l.active_tab&&"table"==l.page?(Ns(),Ms(p,{key:1,ref:"asset_map_table",page_csrf:n.page_csrf,url_params:l.url_params,view:l.updated_view,table_filters:n.asset_table_filter_list},null,8,["page_csrf","url_params","view","table_filters"])):Gs("v-if",!0)],64)):Gs("v-if",!0)],64)},mb.__file="http_src/vue/page-home-map.vue";const gb={id:"my_dataviz"};var vb={__name:"page-sankey",props:{},setup(e){ol((async()=>{}));let t=d3v7;return rl((async()=>{var e=10,n=10,a=10,l=10,s=450-l-n,i=480-e-a,o=t.select("#my_dataviz").append("svg").attr("width",s+l+n).attr("height",i+e+a).append("g").attr("transform","translate("+l+","+e+")");let r={nodes:[{node:0,name:"node0"},{node:1,name:"node1"},{node:2,name:"node2"},{node:3,name:"node3"},{node:4,name:"node4"}],links:[{source:0,target:2,value:2},{source:1,target:2,value:2},{source:1,target:3,value:2},{source:0,target:4,value:2},{source:2,target:3,value:2},{source:2,target:4,value:2},{source:3,target:4,value:4}]};console.log(r);var c=t.scaleOrdinal(t.schemeCategory10),u=t.sankey().nodeWidth(36).nodePadding(290).size([s,i]);u.nodes(r.nodes).links(r.links);var d=o.append("g").selectAll(".link").data(r.links).enter().append("path").attr("class","link").style("stroke-width",(function(e){return Math.max(1,e.dy)})).sort((function(e,t){return t.dy-e.dy})),p=o.append("g").selectAll(".node").data(r.nodes).enter().append("g").attr("class","node").attr("transform",(function(e){return"translate("+e.x+","+e.y+")"})).call(t.drag().subject((function(e){return e})).on("start",(function(){this.parentNode.appendChild(this)})).on("drag",(function(e){t.select(this).attr("transform","translate("+e.x+","+(e.y=Math.max(0,Math.min(i-e.dy,t.event.y)))+")"),u.relayout(),d.attr("d",u.link())})));p.append("rect").attr("height",(function(e){return e.dy})).attr("width",u.nodeWidth()).style("fill",(function(e){return e.color=c(e.name.replace(/ .*/,""))})).style("stroke",(function(e){return t.rgb(e.color).darker(2)})).append("title").text((function(e){return e.name+"\nThere is "+e.value+" stuff in this node"})),p.append("text").attr("x",-6).attr("y",(function(e){return e.dy/2})).attr("dy",".35em").attr("text-anchor","end").attr("transform",null).text((function(e){return e.name})).filter((function(e){return e.x<s/2})).attr("x",6+u.nodeWidth()).attr("text-anchor","start")})),(e,t)=>(Ns(),Is("div",gb))}};dp("\n.node rect {\n  fill-opacity: 0.9;\n  shape-rendering: crispEdges;\n}\n.node text {\n  pointer-events: none;\n  text-shadow: 0 1px 0 #fff;\n}\n.link {\n  fill: none;\n  stroke: #000;\n  stroke-opacity: 0.2;\n}\n.link:hover {\n  stroke-opacity: 0.5;\n}\n"),vb.__file="http_src/vue/page-sankey.vue";const bb="change_applications_tab_event";var yb={components:{chart:Pd,datatable:kh,"modal-delete-confirm":Xh,"tab-list":Gh},props:{page_csrf:String,url_params:Object,view:String,is_ch_enabled:Boolean},created(){this.applications_tab=y.get_url_entry("view")||this.$props.view,this.tab_list.forEach((e=>{this.applications_tab==e.id?e.active=!0:e.active=!1})),function(e){const t=[];t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,n,a,l){e.reload_table()}});let n=url_params;n.view="applications";let a={table_buttons:t,data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/l7/data.lua`,n),enable_search:!0,table_config:{serverSide:!1,order:[[6,"desc"]],columnDefs:[{type:"time-uni",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3},{type:"file-size",targets:5}]}},l=[{columnName:i18n("host_details.application"),targets:0,width:"20",name:"application",data:"application",className:"text-nowrap",responsivePriority:1,render:t=>`<a href="${http_prefix}/lua/host_details.lua?host=${e.$props.url_params.host}@${e.$props.url_params.vlan}&ts_schema=host:ndpi&page=historical&protocol=${t.label}" target="_blank">${t.label}</a>`},{columnName:i18n("host_details.duration"),targets:1,width:"10",name:"duration",data:"duration",className:"text-nowrap",responsivePriority:1,render:e=>NtopUtils.secondsToTime(e)},{columnName:i18n("host_details.sent"),targets:2,width:"10",name:"sent",data:"bytes_sent",className:"text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.rcvd"),targets:3,width:"10",name:"rcvd",data:"bytes_rcvd",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.breakdown"),targets:4,width:"10",name:"breakdown",data:"breakdown",orderable:!1,className:"text-center text-nowrap",responsivePriority:2,render:(e,t,n)=>{const a=100*n.bytes_sent/n.tot_bytes,l=100*n.bytes_rcvd/n.tot_bytes;return NtopUtils.createBreakdown(a,l,i18n("host_details.sent"),i18n("host_details.rcvd"))}},{columnName:i18n("host_details.tot_bytes"),targets:5,width:"20",name:"tot_bytes",data:"tot_bytes",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.tot_percentage"),targets:6,width:"20",name:"percentage",data:"percentage",className:"text-center text-nowrap",responsivePriority:2,render:e=>{const t=e.toFixed(1);return NtopUtils.createProgressBar(t)}}];is_ch_enabled&&e.add_action_column(l,"l7proto","application");let s=ntopng_utility.clone(a);s.columns_config=l,e.config_devices_applications=s,n.view="categories",a.data_url=NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/l7/data.lua`,n),l=[{columnName:i18n("host_details.category"),targets:0,width:"20",name:"category",data:"category",className:"text-nowrap",responsivePriority:1,render:t=>`<a href="${http_prefix}/lua/host_details.lua?host=${e.$props.url_params.host}@${e.$props.url_params.vlan}&ts_schema=host:ndpi_categories&page=historical&category=${t.label}" target="_blank">${t.label}</a>`},{columnName:i18n("host_details.applications"),targets:0,width:"20",name:"applications",data:"applications",orderable:!1,className:"text-nowrap",responsivePriority:1,render:e=>`${e.label||""} <a href="${http_prefix}/${e.href}${e.category_id}">${e.more_protos||""}</a>`},{columnName:i18n("host_details.duration"),targets:0,width:"15",name:"duration",data:"duration",className:"text-nowrap",responsivePriority:1,render:e=>NtopUtils.secondsToTime(e)},{columnName:i18n("host_details.tot_bytes"),targets:0,width:"20",name:"tot_bytes",data:"tot_bytes",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.tot_percentage"),targets:0,width:"25",name:"percentage",data:"percentage",width:"20%",className:"text-center text-nowrap",responsivePriority:2,render:e=>{const t=e.toFixed(1);return NtopUtils.createProgressBar(t)}}],is_ch_enabled&&e.add_action_column(l,"l7cat","category");let i=ntopng_utility.clone(a);i.columns_config=l,i.table_config.order=[[4,"desc"]],i.table_config.columnDefs=[{type:"time-uni",targets:2},{type:"file-size",targets:3}],e.config_devices_categories=i}(this)},mounted(){k.on_custom_event("change_applications_tab_event",bb,(e=>{let t=this.get_active_table();y.set_key_to_url("view",e.id),t.destroy_table(),this.applications_tab=e.id}))},data(){return{i18n:e=>i18n(e),applications_tab:null,config_devices_applications:null,config_devices_categories:null,chart_options:[{title:i18n("graphs.top_10_ndpi_protocols"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/l7/proto_data.lua`,tab:"applications",id:"top_applications"},{title:i18n("graphs.top_breed"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/l7/breed_data.lua`,tab:"applications",id:"top_breed"},{title:i18n("graphs.top_10_ndpi_categories"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/l7/cat_data.lua`,tab:"categories",id:"top_categories"},{title:i18n("graphs.top_breed"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/l7/breed_data.lua`,tab:"categories",id:"top_breed"}],tab_list:[{title:i18n("host_details.applications_tab"),active:"applications"==this.$props.view,id:"applications"},{title:i18n("host_details.categories_tab"),active:"categories"==this.$props.view,id:"categories"}]}},methods:{add_action_column:function(e,t,n){const a=`${this.$props.url_params.host}`,l=`${this.$props.url_params.vlan}`,s=`${this.$props.url_params.ifid}`;let i="page-stats-action-jump-historical";e.push({columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:i,render:(e,o,r)=>{const c={handlerId:i,onClick:()=>{let e=`${http_prefix}/lua/pro/db_search.lua?ifid=${s}&${t}=${r[n].id};eq&ip=${a};eq`;0!=l&&(e=`${e}&vlan_id=${l};eq`),window.open(e)}};return DataTableUtils.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:c}])}})},destroy:function(){this.get_active_table().destroy_table()},click_item:function(e){this.tab_list.forEach((e=>e.active=!1)),e.active=!0,k.emit_custom_event(bb,e)},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},get_active_table:function(){return this.$refs[`table_host_${this.applications_tab}`]},get_f_get_custom_chart_options:()=>(console.log("get_f_"),async e=>charts_options_items.value[chart_index].chart_options)}};const wb={class:"row"},xb={class:"col-md-12 col-lg-12"},kb={class:"card"},$b=Ls("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Ls("div",{class:"text-center"},[Ls("div",{class:"spinner-border text-primary mt-5",role:"status"},[Ls("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Sb={class:"card-body"},Cb={id:"host_details_applications"},Nb={class:"row mb-4 mt-4",id:"host_details_applications"},Ab={class:"col-6"},Tb={key:0,class:"widget-name"};yb.render=function(e,t,n,a,l,s){const i=bl("tab-list"),o=bl("chart"),r=bl("datatable");return Ns(),Is("div",wb,[Ls("div",xb,[Ls("div",kb,[$b,Ls("div",Sb,[Ls("div",Cb,[zs(i,{ref:"host_details_applications_tab_list",id:"host_details_applications_tab_list",tab_list:l.tab_list,onClick_item:s.click_item},null,8,["tab_list","onClick_item"]),Ls("div",Nb,[(Ns(!0),Is(ws,null,Sl(l.chart_options,(e=>(Ns(),Is("div",Ab,[e.tab==l.applications_tab?(Ns(),Is("h3",Tb,X(e.title),1)):Gs("v-if",!0),e.tab==l.applications_tab?(Ns(),Ms(o,{key:1,id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!1},null,8,["id","chart_type","base_url_request"])):Gs("v-if",!0)])))),256))]),"applications"==l.applications_tab?(Ns(),Ms(r,{key:0,ref:"table_host_applications",table_buttons:l.config_devices_applications.table_buttons,columns_config:l.config_devices_applications.columns_config,data_url:l.config_devices_applications.data_url,enable_search:l.config_devices_applications.enable_search,table_config:l.config_devices_applications.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])):Gs("v-if",!0),"categories"==l.applications_tab?(Ns(),Ms(r,{key:1,ref:"table_host_categories",table_buttons:l.config_devices_categories.table_buttons,columns_config:l.config_devices_categories.columns_config,data_url:l.config_devices_categories.data_url,enable_search:l.config_devices_categories.enable_search,table_config:l.config_devices_categories.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])):Gs("v-if",!0)])])])])])},yb.__file="http_src/vue/page-host-details-applications.vue";const Eb={class:"row"},Pb={class:"col-md-12 col-lg-12"},Ib={class:"card"},Mb=Ls("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Ls("div",{class:"text-center"},[Ls("div",{class:"spinner-border text-primary mt-5",role:"status"},[Ls("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Ob={class:"card-body"},Ub={id:"host_details_traffic"},Fb={class:"row mb-4 mt-4",id:"host_details_traffic"},Rb={class:"col-4"},Db={class:"widget-name"};var jb={__name:"page-host-details-traffic",props:{page_csrf:String},setup(e){const t=pn(null);pn([]);const n=pn({});ol((async()=>{!function(e){const a=[];let l={};l.host=y.get_url_entry("host"),l.vlan=y.get_url_entry("vlan"),l.ifid=y.get_url_entry("ifid"),a.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,n,a,l){t.value.reload()}});let s={table_buttons:a,data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/l4/data.lua`,l),enable_search:!0,table_config:{serverSide:!1,order:[[6,"desc"]],columnDefs:[{type:"time-uni",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3},{type:"file-size",targets:5}]}},i=[{columnName:i18n("protocol"),targets:0,width:"10",name:"protocol",data:"protocol",className:"text-nowrap",responsivePriority:1},{columnName:i18n("chart"),targets:1,width:"10",name:"historical",data:"historical",className:"text-nowrap",responsivePriority:1},{columnName:i18n("traffic_labels.bytes_sent"),targets:2,width:"10",name:"sent",data:"bytes_sent",className:"text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("traffic_labels.bytes_rcvd"),targets:3,width:"10",name:"rcvd",data:"bytes_rcvd",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("traffic_labels.breakdown"),targets:4,width:"20",name:"breakdown",data:"breakdown",orderable:!1,className:"text-center text-nowrap",responsivePriority:2,render:(e,t,n)=>{const a=100*n.bytes_sent/n.total_bytes,l=100*n.bytes_rcvd/n.total_bytes;return NtopUtils.createBreakdown(a,l,i18n("host_details.sent"),i18n("host_details.rcvd"))}},{columnName:i18n("traffic_labels.total_bytes"),targets:5,width:"20",name:"tot_bytes",data:"total_bytes",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("traffic_labels.total_percentage"),targets:6,width:"20",name:"percentage",data:"total_percentage",className:"text-center text-nowrap",responsivePriority:2,render:e=>{const t=e.toFixed(1);return NtopUtils.createProgressBar(t)}}],o=ntopng_utility.clone(s);o.columns_config=i,n.value=o}()})),pl((async()=>{t.value.destroy_table()}));const a=[{title:i18n("graphs.l4_proto"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/l4/proto_data.lua`,id:"traffic_protos"},{title:i18n("graphs.contacted_hosts"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/l4/contacted_hosts_data.lua`,id:"contacted_hosts"},{title:i18n("graphs.traffic"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/l4/traffic_data.lua`,id:"traffic"}];return(e,l)=>(Ns(),Is("div",Eb,[Ls("div",Pb,[Ls("div",Ib,[Mb,Ls("div",Ob,[Ls("div",Ub,[Ls("div",Fb,[(Ns(),Is(ws,null,Sl(a,(e=>Ls("div",Rb,[Ls("h3",Db,X(e.title),1),zs(Pd,{id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!1},null,8,["id","chart_type","base_url_request"])]))),64))]),zs(kh,{ref_key:"traffic_table",ref:t,table_buttons:n.value.table_buttons,columns_config:n.value.columns_config,data_url:n.value.data_url,enable_search:n.value.enable_search,table_config:n.value.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])])])])]))},__file:"http_src/vue/page-host-details-traffic.vue"};const Lb={class:"row"},zb={class:"col-md-12 col-lg-12"},Bb={class:"card"},Vb=Ls("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Ls("div",{class:"text-center"},[Ls("div",{class:"spinner-border text-primary mt-5",role:"status"},[Ls("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),qb={class:"card-body"},Hb={class:"row"},Gb={class:"col-6 mb-4 mt-4"},Kb={class:"widget-name"};var Wb={__name:"page-host-details-packets",props:{page_csrf:String,url_params:Object},setup(e){const t=[{title:i18n("graphs.packets_sent"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/packets/sent_data.lua`,id:"packets_sent"},{title:i18n("graphs.packets_rcvd"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/packets/rcvd_data.lua`,id:"packets_rcvd"},{title:i18n("graphs.tcp_flags"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/packets/tcp_flags_data.lua`,id:"tcp_flags"},{title:i18n("graphs.arp_distribution"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/packets/arp_data.lua`,id:"arp_requests"}];function a(e,t,a){n.hideOverlays()}return rl((()=>{})),(e,n)=>(Ns(),Is("div",Lb,[Ls("div",zb,[Ls("div",Bb,[Vb,Ls("div",qb,[Ls("div",Hb,[(Ns(),Is(ws,null,Sl(t,(e=>Ls("div",Gb,[Ls("h3",Kb,X(e.title),1),zs(Pd,{id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!1,onChart_reloaded:a},null,8,["id","chart_type","base_url_request"])]))),64))])])])])]))},__file:"http_src/vue/page-host-details-packets.vue"};let Jb=d3v7;const Yb={align:"justify",nodeId:e=>e.id,nodeTitle:e=>`${e.id}`,nodeGroup:e=>e.id.split(/\W/)[0],nodeAlign:Jb.sankeyJustify,nodeWidth:15,nodePadding:10,nodeLabel:e=>e.id,nodeLabelPadding:6,nodeStroke:"currentColor",linkSource:({source:e})=>e,linkTarget:({target:e})=>e,linkSourceNode:({source_node:e})=>e,linkTargetNode:({target_node:e})=>e,linkPath:Jb.sankeyLinkHorizontal(),linkValue:({value:e})=>e,linkLink:({link:e})=>e,linkTitle:e=>`${e.source_node} → ${e.target_node} : ${e.link}\n${e.value}`,linkColor:({link_color:e})=>e,sourceColor:({source_color:e})=>e||"",targetColor:({target_color:e})=>e||"",sourceLink:({source_link:e})=>e||"",targetLink:({target_link:e})=>e||"",linkStrokeOpacity:.5,linkMixBlendMode:"multiply",colors:Jb.schemeTableau10,width:1200,height:600,marginTop:5,marginRight:1,marginBottom:5,marginLeft:1},Xb=e=>`${i18n("flow")}: ${e.source_node} → ${e.target_node}\n${i18n("protocol")}: ${e.link}\n${i18n("traffic")}: ${n.bytesToSize(e.value)}`,Zb={formatFlowTitle:Xb,getDefaultSankeySettings:function(){return Yb}},Qb={key:0,class:"alert alert-info",id:"empty-message"},ey=["id"];var ty={__name:"sankey",props:{id:String,page_csrf:String,url:String,url_params:Array,extra_settings:Object},setup(e,{expose:t}){const n=e,a=pn(!1);const l=e=>i18n(e);return rl((()=>{})),t({updateData:async function(e){NtopUtils.showOverlays();const t=function(){let e={};return n.url_params.forEach((t=>{e[t]=ntopng_url_manager.get_url_entry(t)})),NtopUtils.buildURL(n.url,e)}();await $.get(t,(function(e,t){const l=e.rsp;if(l.length>0){let e=function(e){let t={...Zb.getDefaultSankeySettings(),...n.extra_settings};const a=d3v7.map(e,t.linkSource).map(A),l=d3v7.map(e,t.linkTarget).map(A),s=d3v7.map(e,t.linkSourceNode).map(A),i=d3v7.map(e,t.linkTargetNode).map(A),o=d3v7.map(e,t.linkLink).map(A),r=d3v7.map(e,t.linkValue),c=d3v7.map(e,t.linkColor),u=d3v7.map(e,t.sourceColor),d=d3v7.map(e,t.targetColor),p=d3v7.map(e,t.sourceLink),_=d3v7.map(e,t.targetLink);let f=e,h=Array.from(d3v7.union(a,l),(e=>({id:e})));const m=d3v7.map(h,t.nodeId).map(A);t.nodeGroups=d3v7.map(h,t.nodeGroup).map(A),h=d3v7.map(h,((e,t)=>({id:m[t]}))),f=d3v7.map(f,((e,t)=>({source:a[t],target:l[t],value:r[t],source_node:s[t],target_node:i[t],link:o[t],color:c[t],source_color:u[t],target_color:d[t],source_link:p[t],target_link:_[t]})));const g=d3v7.scaleOrdinal(t.nodeGroups,t.colors),v=d3v7.map(h,t.nodeLabel),b=d3v7.map(h,t.nodeTitle),y=d3v7.map(f,t.linkTitle);let w=d3v7.sankey().nodeId((({index:e})=>m[e])).nodeAlign(t.nodeAlign).nodeWidth(t.nodeWidth).nodePadding(t.nodePadding).extent([[t.marginLeft,t.marginTop],[t.width-t.marginRight,t.height-t.marginBottom]])({nodes:h,links:f});const x=d3v7.create("svg").attr("viewBox",[0,0,t.width,t.height]).attr("style","max-width: 100%; height: 60vh; height: intrinsic;");let k,$;const S=t.width,C=x.append("g").attr("fill","none").attr("stroke-opacity",t.linkStrokeOpacity).selectAll("g").data(f).join("g").style("mix-blend-mode",t.linkMixBlendMode).append("path").attr("d",t.linkPath).attr("stroke",(({color:e})=>e)).attr("stroke-width",(({width:e})=>Math.max(1,e))).call(y?e=>e.append("title").text((({index:e})=>y[e])):()=>{}),N=d3v7.drag().on("start",(function(e,t){const n=d3v7.select(this);k=n.attr("x")-e.x,$=n.attr("y")-e.y})).on("drag",(function(e,t){d3v7.select(this).attr("x",e.x+k).attr("y",e.y+$),w=d3v7.sankey().update(w),C.selectAll("path").data(w.links,(function(e){return e}))}));function A(e){return null!==e&&"object"==typeof e?e.valueOf():e}return x.append("g").attr("stroke",t.nodeStroke).attr("stroke-width",t.nodeStrokeWidth).attr("stroke-opacity",t.nodeStrokeOpacity).attr("stroke-linejoin",t.nodeStrokeLinejoin).selectAll("rect").data(h).join("rect").call(N).on("dblclick",(function(e){const t=(e=e.currentTarget.__data__).sourceLinks,n=e.targetLinks,a=t&&t[0]?t[0]:n[0];a&&(a.source.id===e.id?a.source_link&&""!==a.source_link&&window.open(a.source_link,"_blank"):a.target.id===e.id&&a.target_link&&""!==a.target_link&&window.open(a.target_link,"_blank"))})).attr("x",(e=>e.x0)).attr("y",(e=>e.y0)).attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("cursor","pointer").attr("fill",(e=>{const n=e.sourceLinks;let a=g(t.nodeGroups[e.index]);return n&&n[0]&&(n[0].source.id===e.id?n[0].source_color&&""!==n[0].source_color&&(a=n[0].source_color):n[0].target.id===e.id&&n[0].target_color&&""!==n[0].target_color&&(a=n[0].target_color)),a})).append("title").text((({index:e})=>b[e])),x.append("g").attr("font-family","sans-serif").attr("font-size",10).selectAll("text").data(h).join("text").attr("x",(e=>e.x0<S/2?e.x1+t.nodeLabelPadding:e.x0-t.nodeLabelPadding)).attr("y",(e=>(e.y1+e.y0)/2)).attr("dy","0.35em").attr("text-anchor",(e=>e.x0<t.width/2?"start":"end")).text((({index:e})=>v[e])),Object.assign(x.node(),{scales:{color:g}})}(l);a.value=!1,$(`#${n.id}`).empty(),$(`#${n.id}`).append(e)}else $(`#${n.id}`).empty(),a.value=!0})),NtopUtils.hideOverlays()}}),(t,n)=>(Ns(),Is(ws,null,[a.value?(Ns(),Is("div",Qb,X(l("flows_page.no_data")),1)):Gs("v-if",!0),Ls("div",{class:"d-flex justify-content-center align-items-center",id:e.id},null,8,ey)],64))},__file:"http_src/vue/sankey.vue"};const ny={class:"row"},ay={class:"col-md-12 col-lg-12"},ly={class:"card card-shadow"},sy=Ls("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Ls("div",{class:"text-center"},[Ls("div",{class:"spinner-border text-primary mt-5",role:"status"},[Ls("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),iy={class:"card-body"},oy={class:"d-flex align-items-center mb-2"},ry={class:"d-flex no-wrap"};var cy={__name:"page-host-details-flow-sankey",props:{page_csrf:String,url:String,url_params:Object},setup(e){const t=e,n=pn(null),a={},l=e=>i18n(e),s=[{filter_name:"hosts_type",key:1,id:"local_only",title:l("flows_page.local_only"),label:l("flows_page.local_only"),currently_active:!0,filter_icon:!1,countable:!1},{filter_name:"hosts_type",key:2,id:"local_origin_remote_target",title:l("flows_page.local_cli_remote_srv"),label:l("flows_page.local_cli_remote_srv"),currently_active:!1,filter_icon:!1,countable:!1},{filter_name:"hosts_type",key:3,id:"remote_origin_local_target",title:l("flows_page.local_srv_remote_cli"),label:l("flows_page.local_srv_remote_cli"),currently_active:!1,filter_icon:!1,countable:!1},{filter_name:"hosts_type",key:4,id:"all_hosts",title:l("flows_page.all_flows"),label:l("flows_page.all_flows"),currently_active:!1,filter_icon:!1,countable:!1}];let i=s[0];const o=function(e){ntopng_url_manager.set_key_to_url(e.filter_name,e.id),function(e){e?i=e:s.forEach((e=>{1==e.currently_active&&(i=e)}))}(e),n.value.updateData()};return ol((()=>{})),rl((()=>{a.linkTitle=Zb.formatFlowTitle,o(i)})),(e,l)=>(Ns(),Is("div",ny,[Ls("div",ay,[Ls("div",ly,[sy,Ls("div",iy,[Ls("div",oy,[Ls("div",ry,[Ls("div",null,[zs(Fd,{selected_option:gn(i),"onUpdate:selected_option":l[0]||(l[0]=e=>dn(i)?i.value=e:i=e),options:s,onSelect_option:o},null,8,["selected_option"])])])]),zs(ty,{ref_key:"flow_sankey",ref:n,id:"flow-sankey",page_csrf:t.page_csrf,url:t.url,url_params:t.url_params,extra_settings:a},null,8,["page_csrf","url","url_params"])])])])]))},__file:"http_src/vue/page-host-details-flow-sankey.vue"};const uy={id:"script-description",class:"notes bg-light border",role:"alert"};var dy={__name:"note-list",props:{note_list:Array},setup(e){const t=e,n=e=>i18n(e);return(e,a)=>(Ns(),Is("div",uy,[Ls("b",null,X(n("notes")),1),Ls("ul",null,[(Ns(!0),Is(ws,null,Sl(t.note_list,(e=>(Ns(),Is("li",null,X(e),1)))),256))])]))},__file:"http_src/vue/note-list.vue"};const py={class:"form-group ms-2 me-2 mt-3 row"},_y={class:"col-form-label col-sm-4"},fy={class:"col-sm-8"},hy={key:0,class:"form-group ms-2 me-2 mt-3 row"},my={class:"col-form-label col-sm-4"},gy={class:"col-8"},vy={key:1,class:"form-group ms-2 me-2 mt-3 row"},by={class:"col-form-label col-sm-4"},yy={class:"col-8"},wy={class:"form-group ms-2 me-2 mt-3 row"},xy={class:"col-form-label col-sm-4"},ky={class:"col-3"},$y={class:"btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},Sy=["value","id"],Cy=["id","for"],Ny=["value","id"],Ay=["id","for"];var Ty={__name:"modal-add-host-rules",props:{metric_list:Array,frequency_list:Array},emits:["add"],setup(e,{expose:t,emit:n}){const a=e;pn(""),pn("");const l=pn(null),s=i18n("if_stats_config.add_host_rules_title"),i=pn(!1),o=e=>i18n(e),r=pn([]),c=pn([]),u=pn(null),d=pn({}),p=pn({}),_=pn(!0),f=pn({}),h=pn(!0),m=[o("if_stats_config.note_1"),o("if_stats_config.note_2"),o("if_stats_config.note_3"),o("if_stats_config.note_4")],g=[{title:o("volume"),label:o("volume"),id:"volume",active:!0},{title:o("throughput"),label:o("throughput"),id:"throughput",active:!1}],v=[{title:o("kb"),label:o("kb"),id:"kb",value:1024,active:!1},{title:o("mb"),label:o("mb"),id:"mb",value:1048576,active:!1},{title:o("gb"),label:o("gb"),id:"gb",value:1073741824,active:!0}],b=[{title:o("kbps"),label:o("kbps"),id:"kbps",value:1e3,active:!1},{title:o("mbps"),label:o("mbps"),id:"mbps",value:1e6,active:!1},{title:o("gbps"),label:o("gbps"),id:"gbps",value:1e9,active:!0}],y=pn(null),w=pn(null),x=()=>{let e=new RegExp(bf.get_data_pattern("ip"));_.value=!(e.test(y.value.value)||"*"===y.value.value)},k=e=>{const t=e.target.id;"throughput"==f.value.id?b.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):v.forEach((e=>{e.id===t?e.active=!0:e.active=!1})),Array.from(e.target.parentElement.children).forEach((e=>{"LABEL"==e.tagName&&(e.id==t?(e.classList.remove("btn-secondary"),e.classList.add("btn-primary"),e.classList.add("active")):(e.classList.add("btn-secondary"),e.classList.remove("btn-primary"),e.classList.remove("active")))}))},$=()=>{const e=y.value.value,t=p.value.id,a=d.value.id;let l,s,i=f.value.id,o=d.value.extra_metric?d.value.extra_metric:null;!1===h.value&&(i="",o="",s=w.value.value),"throughput"==i?(b.forEach((e=>{e.active&&(l=e.value)})),s=l*parseInt(w.value.value)/8):"volume"==i&&(v.forEach((e=>{e.active&&(l=e.value)})),s=l*parseInt(w.value.value)),n("add",{host:e,frequency:t,metric:a,threshold:s,metric_type:i,extra_metric:o}),S()},S=()=>{l.value.close()};return ol((()=>{f.value=g[0]})),t({show:()=>{l.value.show()},close:S,metricsLoaded:e=>{i.value=!0,r.value=e,c.value=a.frequency_list,p.value=c.value[0],d.value=r.value[0]}}),(e,t)=>(Ns(),Ms(pp,{onShowed:t[4]||(t[4]=e=>{}),ref_key:"modal_id",ref:l},{title:_a((()=>[qs(X(gn(s)),1)])),body:_a((()=>[Gs(" Target information, here an IP is put "),Ls("div",py,[Ls("label",_y,[Ls("b",null,X(o("if_stats_config.target")),1)]),Ls("div",fy,[Ls("input",{ref_key:"host",ref:y,onInput:x,class:"form-control",type:"text",placeholder:"A local host IP or '*' for checking all local hosts",required:""},null,544)])]),Gs(" Metric information, here a metric is selected (e.g. DNS traffic) "),i.value?(Ns(),Is("div",hy,[Ls("label",my,[Ls("b",null,X(o("if_stats_config.metric")),1)]),Ls("div",gy,[zs(Fd,{selected_option:d.value,"onUpdate:selected_option":t[0]||(t[0]=e=>d.value=e),onSelect_option:t[1]||(t[1]=e=>{1==d.value.show_volume?h.value=!0:h.value=!1}),options:r.value},null,8,["selected_option","options"])])])):Gs("v-if",!0),Gs(" Frequency information, a frequency of 1 day, 5 minute or 1 hour for example "),i.value?(Ns(),Is("div",vy,[Ls("label",by,[Ls("b",null,X(o("if_stats_config.frequency")),1)]),Ls("div",yy,[zs(Fd,{selected_option:p.value,"onUpdate:selected_option":t[2]||(t[2]=e=>p.value=e),options:c.value},null,8,["selected_option","options"])])])):Gs("v-if",!0),Gs(" Threshold information, maximum amount of bytes "),Ls("div",wy,[Ls("label",xy,[Ls("b",null,X(o("if_stats_config.threshold")),1)]),h.value?(Ns(),Is(ws,{key:0},[Ls("div",ky,[zs(Fd,{selected_option:f.value,"onUpdate:selected_option":t[3]||(t[3]=e=>f.value=e),options:g},null,8,["selected_option"])]),Ls("div",{class:q(["col-3",["throughput"==f.value.id?"p-0":""]])},[Ls("div",$y,["throughput"==f.value.id?(Ns(),Is(ws,{key:0},Sl(b,(e=>(Ns(),Is(ws,null,[Ls("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:u,name:"threshold_measure"},null,8,Sy),Ls("label",{class:q(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:k,for:e.id},X(e.label),11,Cy)],64)))),64)):(Ns(),Is(ws,{key:1},Sl(v,(e=>(Ns(),Is(ws,null,[Ls("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:u,name:"threshold_measure"},null,8,Ny),Ls("label",{class:q(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:k,for:e.id},X(e.label),11,Ay)],64)))),64))])],2)],64)):Gs("v-if",!0),Ls("div",{class:q([h.value?"col-2":"col-8"])},[Ls("input",{value:"1",ref_key:"threshold",ref:w,type:"number",name:"threshold",class:"form-control",max:"1023",min:"1",required:""},null,512)],2)])])),footer:_a((()=>[zs(dy,{note_list:m}),Ls("button",{type:"button",onClick:$,class:q(["btn btn-primary",[_.value?"disabled":""]])},X(o("add")),3)])),_:1},512))},__file:"http_src/vue/modal-add-host-rules.vue"};const Ey={class:"row"},Py={class:"col-md-12 col-lg-12"},Iy={class:"card"},My=Ls("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Ls("div",{class:"text-center"},[Ls("div",{class:"spinner-border text-primary mt-5",role:"status"},[Ls("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Oy={class:"card-body"},Uy={class:"mb-4"},Fy={id:"host_rules"},Ry={class:"card-footer"};var Dy={__name:"page-host-rules",props:{page_csrf:String,ifid:String},setup(e){const t=e,a=pn(null),l=pn(null),s=pn(null),i=e=>i18n(e),o=pn({}),r=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua`,c=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_data.lua`,u=`${http_prefix}/lua/pro/rest/v2/add/interface/host_rules/add_host_rule.lua`,d=`${http_prefix}/lua/pro/rest/v2/delete/interface/host_rules/delete_host_rule.lua`,p=[i("if_stats_config.generic_notes_1"),i("if_stats_config.generic_notes_2"),i("if_stats_config.generic_notes_3")],_={ifid:t.ifid,csrf:t.page_csrf};let f={},h=i("if_stats_config.delete_host_rules_title"),m=i("if_stats_config.delete_host_rules_description"),g=[];const v=[{title:i18n("show_alerts.5_min"),label:i18n("show_alerts.5_min"),id:"5min"},{title:i18n("show_alerts.hourly"),label:i18n("show_alerts.hourly"),id:"hour"},{title:i18n("show_alerts.daily"),label:i18n("show_alerts.daily"),id:"day"}],b=function(){a.value.reload()},y=async function(){const e=o.value,t=n.buildURL(d,{..._,rule_id:e.id});await $.post(t,(function(e,t){b()}))},w=async function(e){const t=n.buildURL(u,{..._,...e});await $.post(t,(function(e,t){b()}))},x=function(e){let t={handlerId:"delete_host",onClick:()=>{var t;t=e,o.value=t,l.value.show()}};return DataTableUtils.createActionButtons([{class:"btn-danger",handler:t,icon:"fa-trash",title:i18n("delete"),class:"pointer"}])},k=function(){const e=[];e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(){b()}},{text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){s.value.show()}});const t=[{columnName:i("id"),visible:!1,targets:0,name:"id",data:"id",className:"text-nowrap",responsivePriority:1},{columnName:i("if_stats_config.target"),targets:1,width:"20",name:"target",data:"target",className:"text-nowrap",responsivePriority:1},{columnName:i("if_stats_config.metric"),targets:2,width:"10",name:"metric",data:"metric",className:"text-nowrap",responsivePriority:1,render:function(e,t,n){return function(e,t){let n=e;return g.forEach((a=>{a.id==e&&(t.extra_metric?t.extra_metric==a.extra_metric&&(n=a.label):n=a.label)})),n}(e,n)}},{columnName:i("if_stats_config.frequency"),targets:3,width:"10",name:"frequency",data:"frequency",className:"text-nowrap",responsivePriority:1,render:function(e){return function(e){let t="";return v.forEach((n=>{e==n.id&&(t=n.title)})),t}(e)}},{columnName:i("if_stats_config.threshold"),targets:4,width:"10",name:"threshold",data:"threshold",className:"text-nowrap",responsivePriority:1,render:function(e,t,a){return function(e,t){let a=parseInt(e);return a=t.metric_type&&"throughput"==t.metric_type?n.bitsToSize(8*e):t.metric_type&&"volume"==t.metric_type?n.bytesToSize(e):e,a}(e,a)}},{columnName:i("metric_type"),visible:!1,targets:5,name:"metric_type",data:"metric_type",className:"text-nowrap",responsivePriority:1},{columnName:i("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,n){return x(n)}}],a={table_buttons:e,data_url:n.buildURL(c,_),enable_search:!0,columns_config:t,table_config:{scrollX:!1,serverSide:!1,order:[[1,"desc"]],columnDefs:t}};f=a};return ol((async()=>{k(),await async function(){const e=n.buildURL(r,_);await $.get(e,(function(e,t){g=e.rsp}))}(),s.value.metricsLoaded(g)})),pl((()=>{a.value.destroy_table()})),(e,t)=>(Ns(),Is("div",Ey,[Ls("div",Py,[Ls("div",Iy,[My,Ls("div",Oy,[Ls("div",Uy,[Ls("h4",null,X(i("if_stats_config.host_rules")),1)]),Ls("div",Fy,[zs(Xh,{ref_key:"modal_delete_confirm",ref:l,title:gn(h),body:gn(m),onDelete:y},null,8,["title","body"]),zs(Ty,{ref_key:"modal_add_host_rule",ref:s,metric_list:gn(g),frequency_list:v,onAdd:w},null,8,["metric_list"]),zs(kh,{ref_key:"table_host_rules",ref:a,table_buttons:gn(f).table_buttons,columns_config:gn(f).columns_config,data_url:gn(f).data_url,enable_search:gn(f).enable_search,table_config:gn(f).table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])]),Ls("div",Ry,[zs(dy,{note_list:p})])])])]))},__file:"http_src/vue/page-host-rules.vue"};const jy={class:"row"},Ly={class:"col-md-12 col-lg-12"},zy={class:"card"},By=Ls("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Ls("div",{class:"text-center"},[Ls("div",{class:"spinner-border text-primary mt-5",role:"status"},[Ls("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Vy={class:"card-body"},qy={id:"host_details_ports"},Hy={class:"row mb-4 mt-4",id:"host_details_ports"},Gy={class:"col-6 mb-3"},Ky={class:"widget-name"},Wy={class:"col-3 mt-5"},Jy={class:"widget-name"};var Yy={__name:"page-host-details-ports",props:{page_csrf:String},setup(e){pn(null),pn([]),pn({});ol((async()=>{!function(){let e={};e.host=y.get_url_entry("host"),e.vlan=y.get_url_entry("vlan"),e.ifid=y.get_url_entry("ifid"),n.forEach((t=>{let n={...t.extra_params,...e};t.config={table_buttons:{},data_url:NtopUtils.buildURL(t.url,n),enable_search:!1,table_config:{scrollX:!1,serverSide:!1,columnDefs:t.columns},columns_config:t.columns}}))}()})),pl((async()=>{traffic_table.value.destroy_table()}));const t=[{title:i18n("graphs.cli_ports"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/port/cli_port_data.lua`,id:"cli_port_flows"},{title:i18n("graphs.srv_ports"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/port/srv_port_data.lua`,id:"srv_port_flows"}],n=[{title:i18n("ports_page.active_server_tcp_ports"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"cli_port_flows",extra_params:{mode:"local",protocol:"tcp"},columns:[{columnName:i18n("port_application"),targets:1,orderable:!1,width:"10",data:"port_info",className:"text-nowrap text-center",responsivePriority:1,render:e=>`<a href="/lua/flows_stats.lua?port=${e.port}">${e.port} (${e.l7_proto})</a>`},{visible:!1}]},{title:i18n("ports_page.active_server_udp_ports"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"cli_port_flows",extra_params:{mode:"local",protocol:"udp"},columns:[{columnName:i18n("port_application"),targets:1,orderable:!1,width:"10",data:"port_info",className:"text-nowrap text-center",responsivePriority:1,render:e=>`<a href="/lua/flows_stats.lua?port=${e.port}">${e.port} (${e.l7_proto})</a>`},{visible:!1}]},{title:i18n("ports_page.client_contacted_server_tcp_ports"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"srv_port_flows",extra_params:{mode:"remote",protocol:"tcp"},columns:[{columnName:i18n("port_application"),targets:1,orderable:!1,width:"10",data:"port_info",className:"text-nowrap text-center",responsivePriority:1,render:e=>`<a href="/lua/flows_stats.lua?port=${e.port}">${e.port} (${e.l7_proto})</a>`},{visible:!1}]},{title:i18n("ports_page.client_contacted_server_udp_ports"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"srv_port_flows",extra_params:{mode:"remote",protocol:"udp"},columns:[{columnName:i18n("port_application"),targets:1,orderable:!1,width:"10",data:"port_info",className:"text-nowrap text-center",responsivePriority:1,render:e=>`<a href="/lua/flows_stats.lua?port=${e.port}">${e.port} (${e.l7_proto})</a>`},{visible:!1}]}];return(e,a)=>(Ns(),Is("div",jy,[Ls("div",Ly,[Ls("div",zy,[By,Ls("div",Vy,[Ls("div",qy,[Ls("div",Hy,[(Ns(),Is(ws,null,Sl(t,(e=>Ls("div",Gy,[Ls("h3",Ky,X(e.title),1),zs(Pd,{id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!1},null,8,["id","chart_type","base_url_request"])]))),64)),(Ns(),Is(ws,null,Sl(n,(e=>Ls("div",Wy,[Ls("h3",Jy,X(e.title),1),zs(kh,{id:e.id,columns_config:e.config.columns_config,data_url:e.config.data_url,enable_search:e.config.enable_search,table_config:e.config.table_config},null,8,["id","columns_config","data_url","enable_search","table_config"])]))),64))])])])])])]))},__file:"http_src/vue/page-host-details-ports.vue"},Xy={components:{modal:pp,"select-search":Fd},props:{id:String,filters_options:Array},updated(){},data(){return{i18n:e=>i18n(e),jQuery:$,id_modal:`${this.$props.id}_modal`,filter_type_selected:[],filter_type_label_selected:null,operator_selected:[],option_selected:[],input_value:null,data_pattern_selected:null,input_required:!1,options_to_show:null,operators_to_show:[]}},emits:["apply"],created(){},async mounted(){await ntopng_sync.on_ready(this.id_modal),ntopng_events_manager.on_custom_event(this.$props.id,ntopng_custom_events.SHOW_MODAL_FILTERS,(e=>this.show(e))),ntopng_sync.ready(this.$props.id)},methods:{show:function(e){null!=this.$props.filters_options&&0!=this.$props.filters_options.length&&(null!=e?(this.filter_type_selected=e,this.change_filter(e)):(this.filter_type_selected=this.$props.filters_options[0],this.change_filter()),this.$refs.modal.show())},post_change:function(e){e.id&&this.$props.filters_options&&(this.filter_type_selected=this.$props.filters_options.find((t=>t.id==e.id))),e.value&&(this.options_to_show?this.option_selected=this.options_to_show.find((t=>t.value==e.value)):(this.option_selected=[],this.input_value=e.value,this.data_pattern_selected=this.get_data_pattern(e.value_type))),e.operator&&this.operators_to_show&&(this.operator_selected=this.operators_to_show.find((t=>t.id==e.operator)))},change_operator_type:function(e){e!=[]&&(this.operator_selected=e)},change_data_filter:function(e){e!=[]&&(this.option_selected=e)},change_filter:function(e){this.options_to_show=null,this.option_selected=null,this.input_value=null;let t=this.$props.filters_options.find((e=>e.id==this.filter_type_selected.id));null!=t&&(this.operators_to_show=t.operators,this.filter_type_label_selected=t.label,null!=t.options?(this.options_to_show=t.options.sort(((e,t)=>null==e||null==e.label?-1:null==t||null==t.label?1:e.label.toString().localeCompare(t.label.toString()))),this.option_selected||(this.option_selected=this.options_to_show[0])):(this.options_to_show=null,this.data_pattern_selected=this.get_data_pattern(t.value_type)),t.operators&&0==this.operator_selected.length&&(this.operator_selected=t.operators[0]),null!=e&&this.post_change(e))},get_data_pattern:function(e){if(this.input_required=!0,"text"==e)return this.input_required=!1,".*";if("ip"==e){let e=NtopUtils.REGEXES.ipv4,t=e.replace("$","@[0-9]{0,5}$"),n=NtopUtils.REGEXES.ipv6,a=n.replaceAll("$","@[0-9]{0,5}$");return`(${e})|(${t})|(${n})|(${a})`}return NtopUtils.REGEXES[e]},check_disable_apply:function(){let e=new RegExp(this.data_pattern_selected);return!this.options_to_show&&(this.input_required&&(null==this.input_value||""==this.input_value)||0==e.test(this.input_value))},apply:function(){let e=this.input_value,t=this.input_value;if(null==e||null!=this.option_selected&&0!=this.option_selected.length){let n=this.filters_options.find((e=>e.id==this.filter_type_selected.id)),a=n.options.find((e=>e.value==this.option_selected.value));e=a.value,t=a.value_label||a.label}else null==e&&(e="");let n={id:this.filter_type_selected.id,label:this.filter_type_label_selected,operator:this.operator_selected.id,value:e,value_label:t};this.$emit("apply",n),ntopng_events_manager.emit_custom_event(ntopng_custom_events.MODAL_FILTERS_APPLY,n),this.close()},close:function(){this.$refs.modal.close()}}};const Zy=e=>(ua("data-v-3119c83e"),e=e(),da(),e),Qy={autocomplete:"off"},ew={class:"form-group row"},tw=Zy((()=>Ls("label",{class:"col-form-label col-sm-3",for:"dt-filter-type-select"},[Ls("b",null,"Filter")],-1))),nw={class:"col-sm-8"},aw=Zy((()=>Ls("hr",null,null,-1))),lw={class:"dt-filter-template-container form-group row"},sw={class:"col-form-label col-sm-3"},iw={class:"col-sm-8"},ow={class:"input-group mb-3"},rw={class:"input-group-prepend col-sm-3"},cw={key:0,class:"col-sm-9"},uw=["pattern","required"],dw={style:{margin:"0px",padding:"0"},class:"alert invalid-feedback"},pw=["disabled"];dp("\ninput ~ .alert[data-v-3119c83e] {\n  display: none;\n}\ninput:invalid ~ .alert[data-v-3119c83e] {\n  display: block;\n}\n"),Xy.render=function(e,t,n,a,l,s){const i=bl("select-search"),o=bl("modal");return Ns(),Ms(o,{id:l.id_modal,ref:"modal"},{title:_a((()=>[qs(X(l.i18n("alerts_dashboard.add_filter")),1)])),body:_a((()=>[Ls("form",Qy,[Ls("div",ew,[tw,Ls("div",nw,[zs(i,{selected_option:l.filter_type_selected,"onUpdate:selected_option":t[0]||(t[0]=e=>l.filter_type_selected=e),id:"filter_type",options:n.filters_options,onSelect_option:t[1]||(t[1]=e=>s.change_filter())},null,8,["selected_option","options"])])]),aw,Ls("div",lw,[Ls("label",sw,[Ls("b",null,X(l.filter_type_label_selected),1)]),Ls("div",iw,[Ls("div",ow,[Ls("div",rw,[zs(i,{selected_option:l.operator_selected,"onUpdate:selected_option":t[2]||(t[2]=e=>l.operator_selected=e),id:"operator_filter",options:l.operators_to_show,onSelect_option:s.change_operator_type},null,8,["selected_option","options","onSelect_option"])]),l.options_to_show?(Ns(),Is("div",cw,[zs(i,{selected_option:l.option_selected,"onUpdate:selected_option":t[3]||(t[3]=e=>l.option_selected=e),id:"data_filter",options:l.options_to_show,onSelect_option:s.change_data_filter},null,8,["selected_option","options","onSelect_option"])])):(Ns(),Is(ws,{key:1},[gl(Ls("input",{"onUpdate:modelValue":t[4]||(t[4]=e=>l.input_value=e),pattern:l.data_pattern_selected,name:"value",required:l.input_required,type:"text",class:"form-control"},null,8,uw),[[Po,l.input_value]]),Ls("span",dw,X(l.i18n("invalid_value")),1)],64))]),Gs(" end div input-group mb-3 ")]),Gs(" end div form-group-row ")])])])),footer:_a((()=>[Ls("button",{type:"button",disabled:s.check_disable_apply(),onClick:t[5]||(t[5]=(...e)=>s.apply&&s.apply(...e)),class:"btn btn-primary"},X(l.i18n("apply")),9,pw)])),_:1},8,["id"])},Xy.__scopeId="data-v-3119c83e",Xy.__file="http_src/vue/modal-filters.vue";let _w,fw,hw=[];let mw,gw,vw=null!=window.location.toString().match(/alert_stats.lua/),bw={value:ntopng_url_manager.get_url_entry("query_preset"),count:ntopng_url_manager.get_url_entry("count")};null==bw.value&&(bw.value="");let yw=ntopng_url_manager.get_url_entry("status");null!=yw&&""!=yw||(yw="historical");const ww=!vw;let xw=function(e){let t=ntopng_url_manager.get_url_entry("page");return null==t&&(t=e?"all":"overview"),t}(vw);const kw=async function(){hw=await async function(e,t){let n;if(e)n=`${base_path}/lua/rest/v2/get/alert/filter/consts.lua?page=${t}`;else{let e=ntopng_url_manager.get_url_entry("query_preset");null==e&&(e=""),n=`${base_path}/lua/pro/rest/v2/get/db/filter/consts.lua?page=${t}&query_preset=${e}`}return await ntopng_utility.http_request(n)}(vw,xw),hw.filter((e=>null==e.label)).forEach((e=>{console.error(`label not defined for filter ${JSON.stringify(e)}`),e.label=""})),hw.sort(((e,t)=>e.label.localeCompare(t.label))),i18n_ext.tags={},_w={},fw={},hw.forEach((e=>{i18n_ext.tags[e.id]=e.label,e.operators.forEach((e=>_w[e.id]=e.label)),fw[e.id]=e.operators.map((e=>e.id))}));let e=ntopng_url_manager.get_url_entries(),t=[];for(const[n,a]of e){let e=hw.find((e=>e.id==n));if(null!=e){a.split(",").forEach((n=>{let[a,l]=n.split(";");null==l||null==a||""==l||null!=e.options&&null==e.options.find((e=>e.value==a))||t.push({id:e.id,operator:l,value:a})}))}}return t};var $w={props:{id:String},components:{"data-time-range-picker":Rd,"modal-filters":Xy},created(){},async mounted(){let e=ntopng_sync.on_ready(this.id_data_time_range_picker);if(ntopng_sync.on_ready(this.id_modal_filters),await e,this.enable_query_presets&&await async function(e){let t=e.page,n=`${base_path}/lua/pro/rest/v2/get/db/preset/consts.lua?page=${t}`,a=await ntopng_utility.http_request(n),l=a[0].list.map((e=>({value:e.id,name:e.name,count:e.count,builtin:!0})));if(a.length>1&&a[1].list.forEach((e=>{let t={value:e.id,name:e.name,count:e.count};l.push(t)})),null==e.query_preset||""==e.query_preset.value)e.query_preset=l[0];else{let t=l.find((t=>t.value==e.query_preset.value));e.query_preset=t}return ntopng_url_manager.set_key_to_url("query_preset",e.query_preset.value),ntopng_url_manager.set_key_to_url("count",e.query_preset.count),e.query_presets=l,a}(this),"all"!=this.page){let e=await kw();gw=function(e){const t=new Tagify(e.$refs.tagify,{duplicates:!0,delimiters:null,dropdown:{enabled:1,classname:"extra-properties"},autoComplete:{enabled:!1},templates:{tag:function(e){try{return`<tag title='${e.value}' contenteditable='false' spellcheck="false" class='tagify__tag ${e.class?e.class:""}' ${this.getAttributes(e)}>\n                        <x title='remove tag' class='tagify__tag__removeBtn'></x>\n                        <div>\n                            ${e.label?`<b>${e.label}</b>&nbsp;`:""}\n                            <b class='operator'>${e.selectedOperator?_w[e.selectedOperator]:"="}</b>&nbsp;\n                            <span class='tagify__tag-text'>${e.value}</span>\n                        </div>\n                    </tag>`}catch(e){console.error(`An error occured when creating a new tag: ${e}`)}}},validate:function(e){return void 0!==e.key&&void 0!==e.selectedOperator&&void 0!==e.value}});$(document).ready((function(){t.addTags(mw)}));const n=async function(e){"number"==typeof e.realValue&&(e.realValue=""+e.realValue),"number"==typeof e.value&&(e.value=""+e.value);let n=t.getTagElms().find((t=>t.getAttribute("key")===e.key&&t.getAttribute("realValue")===e.realValue));void 0===t.tagData(n)&&(fw[e.key]&&!Array.isArray(fw[e.key])&&(e.operators=fw[e.key].operators),e.selectedOperator||(e.selectedOperator="eq"),t.addTags([e]))};return t.on("remove",(async function(e){const t=e.detail.data.key,n=e.detail.data.realValue,a=ntopng_status_manager.get_status();if(void 0===t)return;if(null==a.filters)return;const l=a.filters.filter((e=>e.id!=t||e.id==t&&e.value!=n));ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:l})})),t.on("add",(async function(e){const n=e.detail;if(void 0===n.data)return;return n.data.key?void 0:(t.removeTags([e.detail.tag]),e.preventDefault(),void e.stopPropagation())})),t.on("click",(async function(t){const n=t.detail;if(void 0===n.data)return;if(void 0===n.data.key)return;const a=n.data;e.edit_tag=a,ntopng_events_manager.emit_custom_event(ntopng_custom_events.SHOW_MODAL_FILTERS,{id:a.key,operator:a.selectedOperator,value:a.realValue})})),t.on("edit:updated",(async function(e){console.warn("UPDATED")})),$("tags").on("change","select.operator",(async function(e){console.warn("TAGS change")})),{tagify:t,addFilterTag:n}}(this),ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:e}),ntopng_events_manager.on_event_change(this.$props.id,ntopng_events.FILTERS_CHANGE,(e=>this.reload_status(e)),!0)}this.modal_data=hw,ntopng_sync.ready(this.$props.id)},data(){return{i18n:i18n,id_modal_filters:`${this.$props.id}_modal_filters`,id_data_time_range_picker:`${this.$props.id}_data-time-range-picker`,show_filters:!1,edit_tag:null,is_alert_stats_url:vw,query_presets:[],query_preset:bw,status_view:yw,enable_query_presets:ww,page:xw,modal_data:[],last_filters:[]}},methods:{is_filter_defined:function(e){return null!=fw[e.id]},update_status_view:function(e){ntopng_url_manager.set_key_to_url("status",e),ntopng_url_manager.reload_url()},update_select_query_presets:function(){ntopng_url_manager.get_url_params(),ntopng_url_manager.set_key_to_url("query_preset",this.query_preset.value),ntopng_url_manager.set_key_to_url("count",this.query_preset.count),ntopng_url_manager.reload_url()},show_modal_filters:function(){this.$refs.modal_filters.show()},remove_filters:function(){ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:[]})},reload_status:function(e){let t=e.filters;if(null==t)return;ntopng_url_manager.delete_params(hw.map((e=>e.id))),gw.tagify.removeAllTags();let n=function(e){if(null==e)return{};let t={};e.forEach((e=>{let n=t[e.id];null==n&&(n=[],t[e.id]=n),n.push(e)}));let n={};for(let e in t){let a=t[e].filter((e=>null!=e.value&&null!=e.operator&&""!=e.operator)).map((e=>`${e.value};${e.operator}`)).join(",");n[e]=a}return n}(t);ntopng_url_manager.add_obj_to_url(n),t.forEach((e=>{let t=function(e){let t=hw.find((t=>t.id==e.id));null==t&&console.error("create_tag_from_filter: filter const not found;");let n=e.value;if(null!=t.options){let a=t.options.find((t=>t.value==e.value));null!=a&&(n=a.label)}const a={label:t.label,key:t.id,value:n,realValue:e.value,title:`${t.label}${e.operator}${n}`,selectedOperator:e.operator};return""==a.value&&(a.value="''"),null==a.realValue||null==a.selectedOperator||""==a.selectedOperator?null:a}(e);null!=t&&gw.addFilterTag(t)})),this.last_filters=t},apply_modal:function(e){let t=ntopng_status_manager.get_status().filters;null==t&&(t=[]),null!=this.edit_tag&&(t=t.filter((e=>e.id!=this.edit_tag.key||e.value!=this.edit_tag.realValue)),this.edit_tag=null),t.push(e),ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:t})}}};const Sw=e=>(ua("data-v-aaee59ea"),e=e(),da(),e),Cw={style:{width:"100%"}},Nw={class:"mb-1"},Aw={key:0,class:"d-flex align-items-center me-2"},Tw={class:"btn-group",id:"statusSwitch",role:"group"},Ew=["value"],Pw=["label"],Iw=["value"],Mw={key:0,class:"d-flex mt-1",style:{width:"100%"}},Ow=["placeholder"],Uw=[Sw((()=>Ls("span",null,[Ls("i",{class:"fas fa-plus","data-original-title":"",title:"Add Filter"})],-1)))],Fw=[Sw((()=>Ls("i",{class:"fas fa-times"},null,-1)))];dp("\n.tagify__input[data-v-aaee59ea] {\n  min-width: 175px;\n}\n.tagify__tag[data-v-aaee59ea] {\n  white-space: nowrap;\n  margin: 3px 0px 5px 5px;\n}\n.tagify__tag select.operator[data-v-aaee59ea] {\n  margin: 0px 4px;\n  border: 1px solid #c4c4c4;\n  border-radius: 4px;\n}\n.tagify__tag b.operator[data-v-aaee59ea] {\n  margin: 0px 4px;\n  background-color: white;\n  border: 1px solid #c4c4c4;\n  border-radius: 4px;\n  padding: 0.05em 0.2em;\n}\n.tagify__tag > div[data-v-aaee59ea] {\n  display: flex;\n  align-items: center;\n}\n"),$w.render=function(e,t,n,a,l,s){const i=bl("modal-filters"),o=bl("data-time-range-picker");return Ns(),Is("div",Cw,[Ls("div",Nw,[zs(i,{filters_options:l.modal_data,onApply:s.apply_modal,ref:"modal_filters",id:l.id_modal_filters},null,8,["filters_options","onApply","id"]),zs(o,{id:l.id_data_time_range_picker},{begin:_a((()=>[l.is_alert_stats_url?(Ns(),Is("div",Aw,[Ls("div",Tw,[Ls("a",{href:"#",onClick:t[0]||(t[0]=e=>s.update_status_view("historical")),class:q(["btn btn-sm",{active:"historical"==l.status_view,"btn-seconday":"historical"!=l.status_view,"btn-primary":"historical"==l.status_view}])},"Past",2),Ls("a",{href:"#",onClick:t[1]||(t[1]=e=>s.update_status_view("acknowledged")),class:q(["btn btn-sm",{active:"acknowledged"==l.status_view,"btn-seconday":"acknowledged"!=l.status_view,"btn-primary":"acknowledged"==l.status_view}])},"Ack",2),"flow"!=l.page?(Ns(),Is("a",{key:0,href:"#",onClick:t[2]||(t[2]=e=>s.update_status_view("engaged")),class:q(["btn btn-sm",{active:"engaged"==l.status_view,"btn-seconday":"engaged"!=l.status_view,"btn-primary":"engaged"==l.status_view}])},"Engaged",2)):Gs("v-if",!0)])])):Gs("v-if",!0),l.enable_query_presets?gl((Ns(),Is("select",{key:1,class:"me-2 form-select","onUpdate:modelValue":t[3]||(t[3]=e=>l.query_preset=e),onChange:t[4]||(t[4]=e=>s.update_select_query_presets())},[(Ns(!0),Is(ws,null,Sl(l.query_presets,(e=>(Ns(),Is(ws,null,[1==e.builtin?(Ns(),Is("option",{key:0,value:e},X(e.name),9,Ew)):Gs("v-if",!0)],64)))),256)),"analysis"!=l.page?(Ns(),Is("optgroup",{key:0,label:l.i18n("queries.queries")},[(Ns(!0),Is(ws,null,Sl(l.query_presets,(e=>(Ns(),Is(ws,null,[e.builtin?Gs("v-if",!0):(Ns(),Is("option",{key:0,value:e},X(e.name),9,Iw))],64)))),256))],8,Pw)):Gs("v-if",!0)],544)),[[Uo,l.query_preset]]):Gs("v-if",!0)])),extra_buttons:_a((()=>[Nl(e.$slots,"extra_range_buttons")])),_:3},8,["id"])]),Gs(" tagify "),"all"!=l.page?(Ns(),Is("div",Mw,[Ls("input",{class:"w-100 form-control h-auto",name:"tags",ref:"tagify",placeholder:l.i18n("show_alerts.filters")},null,8,Ow),gl(Ls("button",{class:"btn btn-link","aria-controls":"flow-alerts-table",type:"button",id:"btn-add-alert-filter",onClick:t[5]||(t[5]=(...e)=>s.show_modal_filters&&s.show_modal_filters(...e))},Uw,512),[[Go,l.modal_data&&l.modal_data.length>0]]),gl(Ls("button",{"data-bs-toggle":"tooltip","data-placement":"bottom",title:"{{ i18n('show_alerts.remove_filters') }}",onClick:t[6]||(t[6]=(...e)=>s.remove_filters&&s.remove_filters(...e)),class:"btn ms-1 my-auto btn-sm btn-remove-tags"},Fw,512),[[Go,l.modal_data&&l.modal_data.length>0]])])):Gs("v-if",!0),Gs(" end tagify ")])},$w.__scopeId="data-v-aaee59ea",$w.__file="http_src/vue/range-picker.vue";var Rw={components:{},props:{chart_options:Object},watch:{chart_options:function(e,t){this.reloaded_table()}},emits:[],created(){},data:()=>({total:0,percentile_sent:0,percentile_rcvd:0,avg_sent:0,avg_rcvd:0,max_sent:0,max_rcvd:0}),async mounted(){console.log("Mounted Simple table")},methods:{reloaded_table:function(){let e=ntopChartApex.chartOptionsUtility.getApexYFormatter(ntopChartApex.chartOptionsUtility.apexYFormatterTypes.bps.id),t=ntopChartApex.chartOptionsUtility.getApexYFormatter(ntopChartApex.chartOptionsUtility.apexYFormatterTypes.bytes.id);console.log("reloaded table called"),console.log(this.chart_options.statistics.by_serie),console.log("OBJECT KEYS");let n=this.chart_options.statistics.total,a=this.chart_options.statistics.by_serie[0].max_val,l=this.chart_options.statistics.by_serie[1].max_val,s=this.chart_options.statistics.by_serie[0].average,i=this.chart_options.statistics.by_serie[1].average,o=this.chart_options.statistics.by_serie[0]["95th_percentile"],r=this.chart_options.statistics.by_serie[1]["95th_percentile"];this.max_sent=e(8*a),this.max_rcvd=e(8*l),this.avg_sent=e(8*s),this.avg_rcvd=e(8*i),this.percentile_sent=e(8*o),this.percentile_rcvd=e(8*r),this.total=t(n)}}};const Dw={class:"table table-borderless graph-statistics mb-2",style:{}},jw=Ls("thead",{class:"text-center"},[Ls("tr",null,[Ls("th",{class:"graph-val-total-title fs-6",style:{"border-left-width":"1px","border-top-width":"1px"}}," Total:"),Ls("th",{class:"graph-val-95percentile-title fs-6",style:{"border-left-width":"1px","border-top-width":"1px"}},[qs("95th "),Ls("a",{href:"https://en.wikipedia.org/wiki/Percentile"},"Percentile"),qs(":")]),Ls("th",{class:"graph-val-average-title fs-6",style:{"border-left-width":"1px","border-top-width":"1px"}},"Average:"),Ls("th",{class:"graph-val-max-title fs-6",style:{"border-left-width":"1px","border-top-width":"1px","border-right-width":"1px"}},"Max:")])],-1),Lw={class:"graph-val-total text-center",style:{"border-width":"1px"}},zw={class:"graph-val-95percentile text-center",style:{"border-top-width":"1px","border-right-width":"1px","border-bottom-width":"1px"}},Bw=Ls("br",null,null,-1),Vw={class:"graph-val-average text-center",style:{"border-top-width":"1px","border-right-width":"1px","border-bottom-width":"1px"}},qw=Ls("br",null,null,-1),Hw={class:"graph-val-max text-center",style:{"border-bottom-width":"1px","border-top-width":"1px","border-right-width":"1px"}},Gw=Ls("br",null,null,-1);Rw.render=function(e,t,n,a,l,s){return Ns(),Is("div",null,[Ls("table",Dw,[jw,Ls("tbody",null,[Ls("tr",null,[Ls("td",Lw,[Ls("span",null,X(l.total),1)]),Ls("td",zw,[Ls("span",null,[qs(X(l.percentile_sent)+" [Sent]",1),Bw,qs(X(l.percentile_rcvd)+" [Rcvd]",1)])]),Ls("td",Vw,[Ls("span",null,[qs(X(l.avg_sent)+" Kbit/s [Sent]",1),qw,qs(X(l.avg_rcvd)+" [Rcvd]",1)])]),Gs(' <td class="graph-val-min" style="display:none;border-bottom-width: 1px;border-top-width: 1px;border-right-width: 1px;">nil: <span></span></td> '),Ls("td",Hw,[Ls("span",null,[qs(X(l.max_sent)+" [Sent]",1),Gw,qs(X(l.max_rcvd)+" [Rcvd]",1)])])])])])])},Rw.__file="http_src/vue/simple-table.vue";const Kw=e=>(ua("data-v-7e5acce0"),e=e(),da(),e),Ww={class:"mb-3 row"},Jw={class:"col-form-label col-sm-4"},Yw={class:"col-sm-6"},Xw={class:"btn-group btn-group-toggle","data-bs-toggle":"buttons"},Zw=Kw((()=>Ls("hr",null,null,-1))),Qw={class:"host-alert-fields"},ex={class:"mb-3 row"},tx={class:"col-form-label col-sm-4"},nx={class:"col-sm-6"},ax={value:""},lx={value:"0"},sx={disabled:""},ix=["value"],ox={class:"flow-alert-fields"},rx={class:"mb-3 row"},cx={class:"col-form-label col-sm-4"},ux={class:"col-sm-6"},dx={value:""},px={value:"0"},_x={disabled:""},fx=["value"],hx={key:0,class:"ip-fields"},mx={class:"mb-3 row"},gx={class:"col-form-label col-sm-4"},vx={class:"col-sm-6"},bx=["pattern"],yx={key:1,class:"network-fields"},wx={class:"mb-3 row"},xx={class:"col-form-label col-sm-4"},kx={class:"col-sm-4 pr-0"},$x=["pattern"],Sx={class:"col-sm-2 ps-4 pe-0"},Cx=Kw((()=>Ls("span",{class:"me-2"},"/",-1))),Nx={class:"mb-3 row"},Ax={class:"col-form-label col-sm-4"},Tx={class:"col-sm-6"},Ex={class:"mb-3 row"},Px={class:"col-form-label col-sm-4"},Ix={key:0},Mx={key:1},Ox={class:"col-sm-6"},Ux=["pattern"],Fx=["pattern"],Rx=["disabled"];var Dx={__name:"modal-add-check-exclusion",props:{alert_exclusions_page:String,host_alert_types:Array,flow_alert_types:Array},emits:["add"],setup(e,{expose:t,emit:n}){const a=e,l=pn(null),s=pn("ip"),i=pn(""),o=pn(""),r=pn(0),c=pn(""),u=pn(""),d=pn(""),p=pn("");function _(e){if("text"==e)return NtopUtils.REGEXES.non_quoted_text;if("ip"==e){let e=NtopUtils.REGEXES.ipv4,t=e.replace("$","@[0-9]{0,5}$"),n=NtopUtils.REGEXES.ipv6,a=n.replaceAll("$","@[0-9]{0,5}$");return`(${e})|(${t})|(${n})|(${a})`}return"hostname"==e?`${NtopUtils.REGEXES.singleword}|[a-zA-Z0-9._-]{3,250}@[0-9]{0,5}$`:"certificate"==e?NtopUtils.REGEXES.tls_certificate:NtopUtils.REGEXES[e]}let f=_("ip"),h=_("text"),m=_("certificate");const g=e=>{s.value=e},v=()=>{let e=null,t=!0;return"hosts"==a.alert_exclusions_page?(e=new RegExp(f),t="ip"==s.value?null==i.value||""==i.value||0==e.test(i.value)||""==u.value&&""==d.value:null==o.value||""==o.value||0==e.test(o.value)||""==u.value&&""==d.value||null==p.value||""==p.value||parseInt(p.value)<1||parseInt(p.value)>127):"domain_names"==a.alert_exclusions_page?(e=new RegExp(h),t=null==c.value||""==c.value||0==e.test(c.value)):"tls_certificate"==a.alert_exclusions_page&&(e=new RegExp(m),t=null==c.value||""==c.value||0==e.test(c.value)),t},b=()=>{l.value.close()},y=()=>{let e,t=i.value;"hosts"==a.alert_exclusions_page?("network"==s.value&&(t=`${o.value}/${p.value}`),null!=r.value&&0!=r.value&&(t=`${t}@${r.value}`),e={alert_addr:t,host_alert_key:u.value,flow_alert_key:d.value}):"domain_names"==a.alert_exclusions_page?e={alert_domain:c.value}:"tls_certificate"==a.alert_exclusions_page&&(e={alert_certificate:c.value}),n("add",e),b()};t({show:()=>{s.value="ip",i.value="",o.value="",r.value=0,u.value="",d.value="",p.value="",c.value="",l.value.show()},close:b}),rl((()=>{}));const w=e=>i18n(e);return(t,n)=>(Ns(),Ms(pp,{onShowed:n[10]||(n[10]=e=>{}),ref_key:"modal_id",ref:l},{title:_a((()=>[qs(X(w("check_exclusion.add_exclusion")),1)])),body:_a((()=>["hosts"==e.alert_exclusions_page?(Ns(),Is(ws,{key:0},[Gs(" modal hosts "),Ls("div",Ww,[Ls("label",Jw,[Ls("b",null,X(w("check_exclusion.member_type")),1)]),Ls("div",Yw,[Ls("div",Xw,[Ls("label",{class:q([{active:"ip"==s.value},"btn btn-secondary"])},[Ls("input",{class:"btn-check",type:"radio",name:"member_type",value:"ip",onClick:n[0]||(n[0]=e=>g("ip"))}),qs(" "+X(w("check_exclusion.ip_address")),1)],2),Ls("label",{class:q([{active:"network"==s.value},"btn btn-secondary"])},[Ls("input",{onClick:n[1]||(n[1]=e=>g("network")),class:"btn-check",type:"radio",name:"member_type",value:"network"}),qs(" "+X(w("check_exclusion.network")),1)],2)])])]),Zw,Ls("div",Qw,[Ls("div",ex,[Ls("label",tx,[Ls("b",null,X(w("check_exclusion.host_alert_type")),1)]),Ls("div",nx,[gl(Ls("select",{name:"value",class:"form-select alert-select","onUpdate:modelValue":n[2]||(n[2]=e=>u.value=e)},[Ls("option",ax,X(w("check_exclusion.none")),1),Ls("option",lx,X(w("check_exclusion.exclude_all_alerts")),1),Ls("option",sx,X(w("check_exclusion.spacing_bar")),1),(Ns(!0),Is(ws,null,Sl(e.host_alert_types,(e=>(Ns(),Is(ws,null,[null!=e?(Ns(),Is("option",{key:0,value:e.alert_id},X(e.label),9,ix)):Gs("v-if",!0)],64)))),256))],512),[[Uo,u.value]])])])]),Ls("div",ox,[Ls("div",rx,[Ls("label",cx,[Ls("b",null,X(w("check_exclusion.flow_alert_type")),1)]),Ls("div",ux,[gl(Ls("select",{id:"flow-alert-select",name:"value",class:"form-select alert-select","onUpdate:modelValue":n[3]||(n[3]=e=>d.value=e)},[Ls("option",dx,X(w("check_exclusion.none")),1),Ls("option",px,X(w("check_exclusion.exclude_all_alerts")),1),Ls("option",_x,X(w("check_exclusion.spacing_bar")),1),(Ns(!0),Is(ws,null,Sl(e.flow_alert_types,(e=>(Ns(),Is(ws,null,[null!=e?(Ns(),Is("option",{key:0,value:e.alert_id},X(e.label),9,fx)):Gs("v-if",!0)],64)))),256))],512),[[Uo,d.value]])])])]),"ip"==s.value?(Ns(),Is("div",hx,[Ls("div",mx,[Ls("label",gx,[Ls("b",null,X(w("check_exclusion.ip_address")),1)]),Ls("div",vx,[gl(Ls("input",{pattern:gn(f),placeholder:"192.168.1.1",required:"",type:"text",name:"ip_address",class:"form-control","onUpdate:modelValue":n[4]||(n[4]=e=>i.value=e)},null,8,bx),[[Po,i.value]])])])])):Gs("v-if",!0),"network"==s.value?(Ns(),Is("div",yx,[Ls("div",wx,[Ls("label",xx,[Ls("b",null,X(w("check_exclusion.network")),1)]),Ls("div",kx,[gl(Ls("input",{required:"",style:{width:"calc(100% - 10px)"},name:"network",class:"form-control d-inline",placeholder:"172.16.0.0",pattern:gn(f),"onUpdate:modelValue":n[5]||(n[5]=e=>o.value=e)},null,8,$x),[[Po,o.value]])]),Ls("div",Sx,[Cx,gl(Ls("input",{placeholder:"24",required:"",class:"form-control d-inline w-75",min:"1",max:"127",type:"number",name:"cidr","onUpdate:modelValue":n[6]||(n[6]=e=>p.value=e)},null,512),[[Po,p.value]])])])])):Gs("v-if",!0),Ls("div",Nx,[Ls("label",Ax,[Ls("b",null,X(w("vlan")),1)]),Ls("div",Tx,[gl(Ls("input",{placeholder:"0",min:"0",type:"number","onUpdate:modelValue":n[7]||(n[7]=e=>r.value=e),class:"form-control"},null,512),[[Po,r.value]])])])],64)):Gs("v-if",!0),Gs(" mdoal hosts "),"hosts"!=e.alert_exclusions_page?(Ns(),Is(ws,{key:1},[Gs(" modal domain_names"),Ls("div",null,[Ls("div",Ex,[Ls("label",Px,["domain_names"==e.alert_exclusions_page?(Ns(),Is("b",Ix,X(w("check_exclusion.domain")),1)):Gs("v-if",!0),"tls_certificate"==e.alert_exclusions_page?(Ns(),Is("b",Mx,X(w("check_exclusion.tls_certificate")),1)):Gs("v-if",!0)]),Ls("div",Ox,["domain_names"==e.alert_exclusions_page?gl((Ns(),Is("input",{key:0,placeholder:"",pattern:gn(h),required:"",type:"text",name:"ip_address",class:"form-control","onUpdate:modelValue":n[8]||(n[8]=e=>c.value=e)},null,8,Ux)),[[Po,c.value]]):Gs("v-if",!0),"tls_certificate"==e.alert_exclusions_page?gl((Ns(),Is("input",{key:1,placeholder:"CN=813845657003339838, O=Code42, OU=TEST, ST=MN, C=U",pattern:gn(m),required:"",type:"text",name:"ip_address",class:"form-control","onUpdate:modelValue":n[9]||(n[9]=e=>c.value=e)},null,8,Fx)),[[Po,c.value]]):Gs("v-if",!0)])])])],64)):Gs("v-if",!0),Gs(" modal domain_names")])),footer:_a((()=>[Ls("button",{type:"button",disabled:v(),onClick:y,class:"btn btn-primary"},X(w("add")),9,Rx)])),_:1},512))}};dp("\ninput[data-v-7e5acce0]:invalid {\n  border-color: #ff0000;\n}  \n"),Dx.__scopeId="data-v-7e5acce0",Dx.__file="http_src/vue/modal-add-check-exclusion.vue";const jx=e=>(ua("data-v-19c5b1f1"),e=e(),da(),e),Lx=["innerHTML"],zx={class:"form-group mb-3"},Bx=["innerHTML"],Vx=qs('". '),qx={class:"alert_label"},Hx={class:"form-check"},Gx={class:"form-check-label"},Kx={key:0,class:"form-check"},Wx={class:"form-check-label"},Jx={class:"form-check"},Yx={class:"form-check-label"},Xx={class:"form-check"},Zx={class:"form-check-label"},Qx={key:0,class:"exclude-domain-certificate"},ek={class:"alert_label"},tk={key:0,class:"form-check"},nk={class:"form-check-label whitespace"},ak=["pattern","disabled"],lk={key:1,class:"form-check"},sk={class:"form-check-label whitespace"},ik=["disabled","pattern"],ok=jx((()=>Ls("hr",{class:"separator"},null,-1))),rk={class:"form-group mb-3"},ck={class:"custom-control custom-switch"},uk={class:"custom-control-label"},dk={class:"alert alert-warning border",role:"alert"},pk=["disabled"];var _k={__name:"modal-alerts-filter",props:{alert:Object,page:String},emits:["exclude"],setup(e,{expose:t,emit:n}){const a=e,l=pn(null),s=pn("any"),i=pn(!0),o=pn(null),r=pn(null);Ia((()=>a.alert),((e,t)=>{null!=e&&(s.value="any",i.value=!0,o.value=""==e.info?.value?null:e.info?.value,r.value=""==e.info?.issuerdn?null:e.info?.issuerdn)}));const c=()=>{if("domain"==s.value){let e=new RegExp(_);return null==o.value||0==e.test(o.value)}if("certificate"==s.value){let e=new RegExp(f);return null==r.value||0==e.test(r.value)}return!1},u=gi((()=>a.alert?.alert_name)),d=gi((()=>{let e={value:"",label:""};if("host"!=a.page||null==a.alert)return e;let t=a.alert;return e.value=t.ip.value,null!=t.vlan&&null!=t.vlan.value&&0!=t.vlan.value&&(e.value=e.value+"@"+t.vlan.value),e.label=t.ip.label?`${t.ip.label} (${t.ip.value})`:t.ip.value,e})),p=gi((()=>{let e={cli_value:"",cli_label:"",srv_value:"",srv_label:""};if("flow"!=a.page||null==a.alert)return e;let t=a.alert;e.cli_value=t.flow.cli_ip.value,e.srv_value=t.flow.srv_ip.value;let n=`${t.flow.cli_ip.label||t.flow.cli_ip.value}`,l=`${t.flow.srv_ip.label||t.flow.srv_ip.value}`;return null!=t.flow.vlan&&null!=t.flow.vlan.value&&0!=t.flow.vlan.value&&(n=`${n}@${t.flow.vlan.label}`,l=`${l}@${t.flow.vlan.label}`,e.cli_value=e.cli_value+"@"+t.flow.vlan.value,e.srv_value=e.srv_value+"@"+t.flow.vlan.value),n!==e.cli_value&&(n=`${n} (${e.cli_value})`),l!==e.srv_value&&(l=`${l} (${e.srv_value})`),e.cli_label=n,e.srv_label=l,e}));let _=NtopUtils.REGEXES.non_quoted_text,f=NtopUtils.REGEXES.tls_certificate;const h=()=>{let e=a.page,t="domain"==s.value||"certificate"==s.value?s.value:"host",l={delete_alerts:i.value,type:t},c=null;"host"==t?("host"==s.value?c=d.value.value:"server_host"==s.value?c=p.value.srv_value:"client_host"==s.value&&(c=p.value.cli_value),l.alert_addr=c,"flow"==e?l.flow_alert_key=a.alert.alert_id.value:"host"==e&&(l.host_alert_key=a.alert.alert_id.value)):"domain"==t?(l.delete_alerts=!1,l.alert_domain=o.value):"certificate"==t&&(l.delete_alerts=!1,l.alert_certificate=r.value),m(),n("exclude",l)},m=()=>{l.value.close()};t({show:()=>{l.value.show()},close:m}),rl((()=>{}));const g=e=>i18n(e);return(t,n)=>(Ns(),Ms(pp,{onShowed:n[9]||(n[9]=e=>{}),ref_key:"modal_id",ref:l},{title:_a((()=>[qs(X(g("exclude_check"))+": ",1),Ls("span",{innerHTML:gn(u)},null,8,Lx)])),body:_a((()=>[Ls("div",zx,[Ls("div",null,[Ls("label",null,[qs(X(g("exclude_check"))+' "',1),Ls("b",{innerHTML:gn(u)},null,8,Bx),Vx,Ls("span",qx,X(g("exclude_for"))+":",1)]),Ls("div",Hx,[gl(Ls("input",{class:"form-check-input",type:"radio",value:"any","onUpdate:modelValue":n[0]||(n[0]=e=>s.value=e)},null,512),[[Oo,s.value]]),Ls("label",Gx,[Ls("span",null,X(g("show_alerts.filter_disable_check")),1)])]),"host"==e.page?(Ns(),Is("div",Kx,[gl(Ls("input",{class:"form-check-input",type:"radio",value:"host","onUpdate:modelValue":n[1]||(n[1]=e=>s.value=e)},null,512),[[Oo,s.value]]),Ls("label",Wx,[Ls("span",null,X(gn(d).label),1)])])):Gs("v-if",!0),"flow"==e.page?(Ns(),Is(ws,{key:1},[Ls("div",Jx,[gl(Ls("input",{class:"form-check-input",type:"radio",value:"client_host","onUpdate:modelValue":n[2]||(n[2]=e=>s.value=e)},null,512),[[Oo,s.value]]),Ls("label",Yx,[Ls("span",null,X(g("client"))+": "+X(gn(p).cli_label),1)])]),Ls("div",Xx,[gl(Ls("input",{class:"form-check-input",type:"radio",value:"server_host","onUpdate:modelValue":n[3]||(n[3]=e=>s.value=e)},null,512),[[Oo,s.value]]),Ls("label",Zx,[Ls("span",null,X(g("server"))+": "+X(gn(p).srv_label),1)])])],64)):Gs("v-if",!0)]),null!=o.value||null!=r.value?(Ns(),Is("div",Qx,[Ls("label",null,[Ls("span",ek,X(g("check_exclusion.exclude_all_checks_for"))+":",1)]),null!=o.value?(Ns(),Is("div",tk,[gl(Ls("input",{class:"form-check-input",type:"radio",value:"domain","onUpdate:modelValue":n[4]||(n[4]=e=>s.value=e)},null,512),[[Oo,s.value]]),Ls("label",nk,[Ls("span",null,X(g("check_exclusion.domain"))+":",1)]),gl(Ls("input",{type:"text",pattern:gn(_),disabled:"domain"!=s.value,required:"","onUpdate:modelValue":n[5]||(n[5]=e=>o.value=e),class:"form-check-label custom-width"},null,8,ak),[[Po,o.value]])])):Gs("v-if",!0),null!=r.value?(Ns(),Is("div",lk,[gl(Ls("input",{class:"form-check-input",type:"radio",value:"certificate","onUpdate:modelValue":n[6]||(n[6]=e=>s.value=e)},null,512),[[Oo,s.value]]),Ls("label",sk,[Ls("span",null,X(g("check_exclusion.tls_certificate"))+":",1)]),gl(Ls("input",{type:"text",disabled:"certificate"!=s.value,"onUpdate:modelValue":n[7]||(n[7]=e=>r.value=e),pattern:gn(f),required:"",class:"form-check-label custom-width"},null,8,ik),[[Po,r.value]])])):Gs("v-if",!0)])):Gs("v-if",!0)]),"domain"!=s.value&&"certificate"!=s.value?(Ns(),Is(ws,{key:0},[gl(Ls("div",{class:"message alert alert-danger"},X(g("show_alerts.confirm_delete_filtered_alerts")),513),[[Go,i.value]]),ok,Ls("div",rk,[Ls("div",ck,[gl(Ls("input",{type:"checkbox",class:"custom-control-input whitespace","onUpdate:modelValue":n[8]||(n[8]=e=>i.value=e)},null,512),[[Io,i.value]]),Ls("label",uk,X(g("delete_disabled_alerts")),1)])])],64)):Gs("v-if",!0),Ls("div",dk,X(g("show_alerts.confirm_filter_alert")),1)])),footer:_a((()=>[Ls("button",{type:"button",onClick:h,disabled:c(),class:"btn btn-warning"},X(g("filter")),9,pk)])),_:1},512))}};dp("\n.whitespace[data-v-19c5b1f1] {\n  margin-right: 0.2rem;\n}\n.custom-width[data-v-19c5b1f1] {\n  display: block;\n  min-width: 100%;\n}\ninput[data-v-19c5b1f1]:invalid {\n  border-color: #ff0000;\n}\n.exclude-domain-certificate[data-v-19c5b1f1] {\n  margin-top: 0.4rem;\n}\n"),_k.__scopeId="data-v-19c5b1f1",_k.__file="http_src/vue/modal-alerts-filter.vue";let fk={PageStats:Hh,PageAssetTable:Qh,PagePeriodicityTable:fm,PageServiceTable:Pm,PageServiceMap:Jm,PagePeriodicityMap:hg,PageAssetMap:Ug,PageDeviceExclusions:Bv,PageHostTLS:eb,PageHostSSH:rb,PageHomeMap:mb,PageSankey:vb,PageHostRules:Dy,PageHostDetailsApplications:yb,PageHostDetailsTraffic:jb,PageHostDetailsPackets:Wb,PageHostDetailsFlowSankey:cy,PageHostDetailsPorts:Yy,AlertInfo:vh,Chart:Pd,Datatable:kh,DateTimeRangePicker:Rd,NetworkMap:Gm,RangePicker:$w,PageNavbar:ev,SimpleTable:Rw,SelectSearch:Fd,TabList:Gh,Sankey:ty,NoteList:dy,ListTimeseries:__,Modal:pp,ModalAddCheckExclusion:Dx,ModalAlertsFilter:_k,ModalFilters:Xy,ModalTimeseries:qf,ModalTrafficExtraction:Hf,ModalDeleteConfirm:Xh,ModalSnapshot:Kp,ModalAddDeviceExclusion:Av,ModalEditDeviceExclusion:zv,ModalAddHostRules:Ty,Vue:Ed};window.ntopVue=fk}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
