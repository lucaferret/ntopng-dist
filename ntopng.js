!function(){"use strict";Date.prototype.format=function(e){var t={"M+":this.getMonth()+1,"d+":this.getDate(),"h+":this.getHours(),"m+":this.getMinutes(),"s+":this.getSeconds(),"q+":Math.floor((this.getMonth()+3)/3),S:this.getMilliseconds()};for(var n in/(y+)/.test(e)&&(e=e.replace(RegExp.$1,(this.getFullYear()+"").substr(4-RegExp.$1.length))),t)new RegExp("("+n+")").test(e)&&(e=e.replace(RegExp.$1,1==RegExp.$1.length?t[n]:("00"+t[n]).substr((""+t[n]).length)));return e},jQuery.fn.extend({disable:function(e){return this.each((function(){var t=$(this);t.is("input, button, textarea, select")?this.disabled=e:t.toggleClass("disabled",e)}))}});const e=.005,t={ipv4:"^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",ipv6:"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\:){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$|^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$",domainName:"^(([a-zA-Z]{1})|([a-zA-Z]{1}[a-zA-Z]{1})|([a-zA-Z]{1}[0-9]{1})|([0-9]{1}[a-zA-Z]{1})|([a-zA-Z0-9][-_\\.a-zA-Z0-9]{1,61}[a-zA-Z0-9]))\\.([a-zA-Z]{2,13}|[a-zA-Z0-9-]{2,30}\\.[a-zA-Z]{2,3})",port:"^([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$",latency:"^([0-9]*[.])?[0-9]+$",url:"^(https?://[^/\\s]+(/.*)?)$",emailUrl:"^smtps?://[-a-zA-Z0-9:.]{1,256}+$",macAddress:"^([0-9A-Fa-f]{2}:){5}([0-9A-Fa-f]{2})$",hostname:"^[a-zA-Z0-9._:-]{3,250}|^[a-zA-Z0-9._:-]{3,250}@[0-9]{0,5}",username:"^[a-zA-Z0-9._@!-?]{3,30}$",singleword:"^(?=[a-zA-Z0-9._:-]{3,253}$)(?!.*[_.:-]{2})[^_.:-].*[^_.:-]$",email:"^([a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*)$",https:"^https?://.+$",token:"^[0-9a-f]{32}",score:"^[0-9]{1,5}",telegram_channel:"^[0-9-]{1,15}",password:"^[w/$!/()=?^*@_-]{5,31}$",tls_certificate:String.raw`^[^=,]+=[^=,]+(,\s[^=,]+=[^=,]+)*$`,domain_name_not_strict:String.raw`^[a-zA-Z0-9\-_~]+((\.[a-zA-Z0-9\-_~]+)+)$`,non_quoted_text:"^[a-zA-Z0-9.-_]+$"};class n{static toggleOverlays(e=500){$(".overlay").toggle(e)}static showOverlays(e=500){$(".overlay").fadeIn(e)}static hideOverlays(e=500){$(".overlay").fadeOut(e)}static get REGEXES(){return t}static getIPv4RegexWithCIDR(){const e=t.ipv4.length;return`${t.ipv4.substring(0,e-1)}(\\/?)(\\b([0-9]|[12][0-9]|3[0-2])?\\b)$`}static getIPv6RegexWithCIDR(){const e=t.ipv6.length;return`${t.ipv6.substring(0,e-1)}(\\/?)\\b([0-9]|[1-9][0-9]|1[01][0-9]|12[0-8])?\\b$`}static async resolveDNS(e="ntop.org"){try{const t=await fetch(`${http_prefix}/lua/rest/v2/get/dns/resolve.lua?hostname=${e}`);return await t.json()}catch(e){console.error(`Something went wrong when resolving hostname: ${e}`)}return{rc:-1,rc_str:"FAILED_HTTP_REQUEST"}}static initDataPatterns(){$("input[data-pattern]").each((function(){const e=$(this).data("pattern");if(!e)return void console.warn("An empty data-pattern on an input was found!",this);const n=e.split("|").map((e=>t[e].toString())).join("|");$(this).attr("pattern",n),$(this).removeAttr("data-pattern")}))}static is_good_ipv4(e){return new RegExp(t.ipv4).test(e)}static is_good_ipv6(e){return new RegExp(t.ipv6).test(e)}static is_mac_address(e){return new RegExp(t.macAddress).test(e)}static isNumeric(e){return/^\d+$/.test(e)}static is_network_mask(e,t){var a,l=e.split("/"),s=null;if(2!=l.length){if(!t)return null;a=e}else{if(a=l[0],!n.isNumeric(l[1]))return null;if((s=parseInt(l[1]))<0)return null}if(n.is_good_ipv4(a)){if(null===s)s=32;else if(s>32)return null;return{type:"ipv4",address:a,mask:s}}if(n.is_good_ipv6(l[0])){if(null===s)s=128;else if(s>128)return!1;return{type:"ipv6",address:a,mask:s}}return null}static fbits(t){const n=["bps","Kbps","Mbps","Gbps","Tbps"];if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 bps";var a=Math.log(t)/Math.log(1e3),l=parseInt(Math.floor(a));if(l<0||isNaN(l))l=0;else if(l>=n.length)return"> "+n[n.length-1];if(l<=1)return Math.round(t/Math.pow(1e3,l)*100)/100+" "+n[l];var s=parseFloat(t/Math.pow(1e3,l)).toFixed(2);return s%1==0&&(s=Math.round(s)),s+" "+n[l]}static export_rate(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 exps/s";var a=n.scaleValue(t,["exp/s","Kexp/s"],1e3);return Math.round(100*a[0])/100+" "+a[1]}static exports_format(t){if(void 0===t)return"-";var a=i18n_ext.exports.toLowerCase(),l=[a,"K "+a];if(0==t)return"0";if(t>0&&t<e)return"< 0.005 exps/s";var s=n.scaleValue(t,l,1e3);return Math.round(100*s[0])/100+" "+s[1]}static fbits_from_bytes(e){return void 0===e?"-":n.fbits(8*e)}static fpackets(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 pps";var a=n.scaleValue(t,["pps","Kpps","Mpps","Gpps","Tpps"],1e3);return Math.round(100*a[0])/100+" "+a[1]}static fpoints(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 pt/s";var a=n.scaleValue(t,["pt/s","Kpt/s","Mpt/s","Gpt/s","Tpt/s"],1e3);return Math.round(100*a[0])/100+" "+a[1]}static fflows(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 fps";var a=n.scaleValue(t,["fps","Kfps","Mfps","Gfps","Tfps"],1e3);return Math.round(100*a[0])/100+" "+a[1]}static fmsgs(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 mps";var a=n.scaleValue(t,["msg/s","Kmsg/s","Msg/s","Gmsg/s","Tmsg/s"],1e3);return Math.round(100*a[0])/100+" "+a[1]}static fmillis(e){if(void 0===e)return"-";const t=n.scaleValue(e,["ms"],1e3);return Math.round(100*t[0])/100+" "+t[1]}static fnone(e){return void 0===e?"-":Math.round(100*e)/100}static falerts(e){return void 0===e?"-":Math.round(100*e)/100+" alerts/s"}static fint(e){return void 0===e?"-":Math.round(e).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")}static ffloat(e){return void 0===e?"-":(Math.round(100*e)/100).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")}static fpercent(e){return void 0===e?"-":Math.round(100*e)/100+"%"}static fdate(e){return new Date(1e3*e)}static capitaliseFirstLetter(e){return e.charAt(0).toUpperCase()+e.slice(1)}static get_trend(e,t){return void 0===e||void 0===t||e==t?'<i class="fas fa-minus"></i>':e>t?'<i class="fas fa-arrow-up"></i>':'<i class="fas fa-arrow-down"></i>'}static abbreviateString(e,t){return e?e.length<t?e:e.substring(0,t)+"...":""}static toFixed2(e){return e?e.toFixed(2):""}static bytesToSize(e){if(void 0===e)return"-";var t=1024,n=1048576,a=1073741824,l=1099511627776;return e>=0&&e<t?parseFloat(e.toFixed(2))+" Bytes":e>=t&&e<n?parseFloat((e/t).toFixed(2))+" KB":e>=n&&e<a?parseFloat((e/n).toFixed(2))+" MB":e>=a&&e<l?parseFloat((e/a).toFixed(2))+" GB":e>=l?parseFloat((e/l).toFixed(2))+" TB":parseFloat(e.toFixed(2))+" Bytes"}static drawTrend(e,t,n){return e==t?'<i class="fas fa-minus"></i>':e>t?'<i class="fas fa-arrow-up"'+n+"></i>":'<i class="fas fa-arrow-down"></i>'}static toggleAllTabs(e){!0===e?$("#historical-tabs-container").find("li").removeClass("disabled").find("a").attr("data-toggle","tab"):$("#historical-tabs-container").find("li").addClass("disabled").find("a").removeAttr("data-toggle")}static disableAllDropdownsAndTabs(){$("select").each((function(){$(this).prop("disabled",!0)})),n.toggleAllTabs(!1)}static enableAllDropdownsAndTabs(){$("select").each((function(){$(this).prop("disabled",!1)})),n.toggleAllTabs(!0)}static capitalize(e){return e&&e[0].toUpperCase()+e.slice(1)}static addCommas(e){for(var t=(e+="").split("."),n=t[0],a=t.length>1?"."+t[1]:"",l=/(\d+)(\d{3})/;l.test(n);)n=n.replace(l,"$1,$2");return n+a}static scaleValue(e,t,n,a){if(0==e)return[0,t[0]];let l=a?10*a:10;var s=parseInt(Math.floor(Math.log(e)/Math.log(n)));return s<0||isNaN(s)?s=0:s>=t.length&&(s=t.length-1),[Math.round(e/Math.pow(n,s)*l)/l,t[s]]}static formatValue(t,a){if(0==t)return"0";if(t>0&&t<e)return"< 0.005";null==a&&(a=0);var l=n.scaleValue(t,["","K","M","G","T"],1e3,a);return l[0]+l[1]}static formatPackets(e){return n.addCommas(e.toFixed(0))+" Pkts"}static bytesToVolume(t){if(0==t)return"0 Bytes";if(t>0&&t<e)return"< 0.005 Bytes";var a=n.scaleValue(t,["Bytes","KB","MB","GB","TB"],1024);return parseFloat(a[0])+" "+a[1]}static bytesToVolumeAndLabel(e){if(0==e)return"0 Bytes";var t=parseInt(Math.floor(Math.log(e)/Math.log(1024)));return[(e/Math.pow(1024,t)).toFixed(2),["Bytes","KB","MB","GB","TB"][t]]}static bitsToSize(t,a){a=a||1e3;if(0==t)return"0 bps";if(t>0&&t<e)return"< 0.005 bps";var l=n.scaleValue(t,["bps","Kbps","Mbps","Gbps","Tbps"],a);return l[0].toFixed(2)+" "+l[1]}static secondsToTime(e){if(e<1)return"< 1 sec";let t=Math.floor(e/86400),n=Math.floor(e/3600-24*t),a=Math.floor(e/60-1440*t-60*n),l=e%60,s="",i=[];if(t>0){let e=Math.floor(t/365);e>0&&(t%=365,s=e+" year",e>1&&(s+="s"),i.push(s),s=""),s=t+" day",t>1&&(s+="s"),i.push(s),s=""}return n>0&&(n<10&&(s="0"),s+=n+":"),a<10&&(s+="0"),s+=a+":",l<10&&(s+="0"),s+=l,i.push(s),i.join(", ")}static msecToTime(e){return e>=1e3?n.secondsToTime(e/1e3):(Math.round(1e3*e)/1e3).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")+" ms"}static epoch2Seen(e){var t=new Date(1e3*e),a=Math.floor((new Date).getTime()/1e3-e);return t.format("dd/MM/yyyy hh:mm:ss")+" ["+n.secondsToTime(a)+" ago]"}static graphGetXAxisTicksFormat(e){return e<=86400?"%H:%M:%S":e<=172800?"%b %e, %H:%M:%S":"%b %e"}static paramsExtend(e,t){return $.extend({},e,t)}static paramsToForm(e,t){for(var n in e=$(e),t){if(t.hasOwnProperty(n))$('<input type="hidden" name="'+n+'" value="'+t[n]+'">').appendTo(e)}return e}static paramsPairsEncode(e){var t=0,n={};for(var a in e)n["key_"+t]=a,n["val_"+t]=e[a],t+=1;return n}static hostkey2hostInfo(e){return(e=(e=(e=e.replace(/____/g,":")).replace(/___/g,"/")).replace(/__/g,".")).split("@")}static handle_tab_state(e,t){$("a",e).click((function(e){e.preventDefault()})),$(" > li > a",e).on("shown.bs.tab",(function(e){var t=$(e.target).attr("href").substr(1);history.replaceState?history.replaceState(null,null,"#"+t):window.location.hash=t}));var n=window.location.hash;n||(n="#"+t),$('a[href="'+n+'"]',e).tab("show")}static _add_find_host_link(e,t,n){$("<input>").attr({type:"hidden",id:t,name:t,value:n}).appendTo(e)}static makeFindHostBeforeSubmitCallback(e){return function(t,a){return a.context&&"historical"==a.context?(t.attr("action",e+"/lua/pro/db_search.lua"),"ip"==a.type?n._add_find_host_link(t,"ip",a.ip):"mac"==a.type?n._add_find_host_link(t,"mac",a.mac):n._add_find_host_link(t,"name",a.hostname?a.hostname:a.name)):"mac"==a.type?t.attr("action",e+"/lua/mac_details.lua"):"network"==a.type?(t.attr("action",e+"/lua/hosts_stats.lua"),n._add_find_host_link(t,"network",a.network)):"snmp"==a.type?(t.attr("action",e+"/lua/pro/enterprise/snmp_interface_details.lua"),n._add_find_host_link(t,"snmp_port_idx",a.snmp_port_idx)):"snmp_device"==a.type?t.attr("action",e+"/lua/pro/enterprise/snmp_device_details.lua"):"asn"==a.type?(t.attr("action",e+"/lua/hosts_stats.lua"),n._add_find_host_link(t,"asn",a.asn)):(t.attr("action",e+"/lua/host_details.lua"),n._add_find_host_link(t,"mode","restore")),!0}}static tstampToDateString(e,t,n){n=n||0;var a=parseInt(e.html())+n,l=d3.time.format(t)(new Date(1e3*a));return e.html(l).removeClass("hidden"),l}static noHtml(e){return e.replace(/<[^>]+>/g,"")}static cleanCustomHostUrl(e){return e.replace(/^http:\/\//gi,"").replace(/^https:\/\//gi,"").replace(/^www\./gi,"").replace(/[^0-9a-zA-Z\.:\/_-]/gi,"")}static parseQuery(e){for(var t={},n=("?"===e[0]?e.substr(1):e).split("&"),a=0;a<n.length;a++){var l=n[a].split("=");t[decodeURIComponent(l[0])]=decodeURIComponent(l[1]||"")}return t}static getHistoryParameters(e){var t=n.parseQuery(window.location.search),a=$.extend(t,e),l="?"+$.param(a,!0);return[location.protocol,"//",location.host,location.pathname].join("")+l}static check_status_code(e,t,n){const a=200!=e;if(a&&null!=n){let a=i18n_ext.request_failed_message;e&&t&&(a+=`: ${e} - ${t}`),n.text(a).show()}else a&&null==n&&alert(`${i18n_ext.request_failed_message}: ${e} - ${t}`);return a}static importModalHelper(e){if(!e.loadConfigXHR)throw"importModalHelper:: Missing 'loadConfigXHR' param";$("input#import-input").on("change",(function(){$(this).val().replace("C:\\fakepath\\",""),$("#btn-confirm-import").removeAttr("disabled")})),$("#import-modal").on("hidden.bs.modal",(function(){$("#import-input").val(""),$("#import-error").hide().removeClass("text-warning").addClass("invalid-feedback"),$("#btn-confirm-import").attr("disabled","disabled")})),$("#import-modal").on("submit","form",(function(t){t.preventDefault();const n=$("#btn-confirm-import");n.attr("disabled","");const a=$("#import-input")[0].files[0];if(!a)return $("#import-error").text(`${i18n_ext.no_file}`).show(),void n.removeAttr("disabled");const l=new FileReader;l.readAsText(a,"UTF-8"),l.onload=function(){let t=null;try{t=JSON.parse(l.result)}catch(e){}if(!t)return $("#import-error").text(i18n_ext.rest_consts[responseJSON.rc_str]||"Not Implemented Yet").show(),void n.removeAttr("disabled");e.loadConfigXHR(l.result).done(((t,n,a)=>{if(t.rc<0)return void $("#import-error").text(t.rc_str).show();e.successCallback&&e.successCallback(t);const l="all"==$("input[name='configuration']:checked").val()?i18n_ext.manage_configurations.messagges.import_all_success:i18n_ext.manage_configurations.messagges.import_success;ToastUtils.showToast({id:"import-configuration-alert",level:"success",title:i18n_ext.success,body:l,delay:2e3}),$("#import-modal").modal("hide")})).fail((({responseJSON:t})=>{e.failureCallback&&e.failureCallback(t),t&&t.rc>0||(-28==t.rc&&$("#import-error").removeClass("invalid-feedback").addClass("text-warning"),$("#import-error").text(i18n_ext.rest_consts[t.rc_str]||i18n_ext.FAILED_HTTP_REQUEST).show())})).always((()=>{n.removeAttr("disabled")}))}}))}static serializeFormArray(e){const t={};return e.forEach((e=>{e.name.includes("[]")||("string"==typeof e.value&&(e.value=e.value.trim()),t[e.name]=e.value)})),t}static cleanForm(e){$(e).find("input,select,textarea").each((function(e,t){$(this).removeClass("is-valid").removeClass("is-invalid")})),$(e)[0].reset()}static fetchWithTimeout(e,t={},n=5e3){const a=new AbortController,l={...t,signal:a.signal};return setTimeout((()=>{a.abort()}),n),fetch(e,l).then((e=>{if(!e.ok)throw new Error(`${e.status}: ${e.statusText}`);return e})).catch((e=>{if("AbortError"===e.name)throw new Error("Response timed out")}))}static setPref(e,t,n,a){if(null==e)return void console.warn("An action key must be defined to set a preference!");const l=()=>{},s=$.post(`${http_prefix}/lua/update_prefs.lua`,{action:e,csrf:t});s.done(n||l),s.fail(a||l)}static arrayToListString(e,t){return null==e?"":e.length>t?e.slice(0,t).join(", ")+` ${i18n_ext.and_x_more.replace("$num",e.length-t)}`:e.slice(0,t).join(", ")}static buildURL(e,t={},n=!1,a={}){const l=new URL(e,window.location);for(const[e,n]of Object.entries(t))(n||0===n)&&l.searchParams.set(e,n);if(n){const e=new URL(window.location.href);for(const[t,n]of Object.entries(a))n&&e.searchParams.set(t,n);l.searchParams.set("referer",e.toString())}return l.toString()}static getEditPoolLink(e,t){const n=new URL(e,window.location);return n.searchParams.set("pool_id",t),n.toString()}static getPoolLink(e,t=0){return`${http_prefix}/lua/rest/v2/get/${e}/pools.lua?pool=${t}`}static async getPool(e,t=0){if(null===e)throw"A pool type must be defined!";try{const a=await fetch(n.getPoolLink(e,t)),l=await a.json();return l.rc<0?[!1,{}]:[!0,l.rsp[0]]}catch(e){return[!1,{}]}}static saveElementScale(e,t={width:0,height:0}){const a=n.generateScaleElementKey(e);localStorage.setItem(a,JSON.stringify(t))}static generateScaleElementKey(e){let t;const n=location.pathname,a=e.attr("id");if(""!==a)t=a;else{t=e.attr("class")}return`${t}-${n}-scale`}static loadElementScale(e){const t=n.generateScaleElementKey(e),a=localStorage.getItem(t);if(null!=a)return JSON.parse(a)}static fillFieldIfValid(e,t){void 0===t?e.val(""):e.val(t)}static copyToClipboard(e,t){const n=document.createElement("textarea");n.value=e,n.setAttribute("readonly",""),n.style.position="absolute",n.style.left="-9999px",document.body.appendChild(n),n.select(),document.execCommand("copy"),document.body.removeChild(n),$(t).attr("title","Copied!").tooltip("dispose").tooltip().tooltip("show"),$(t).removeAttr("data-bs-original-title"),$(t).attr("title",e)}static stripTags(e){let t=document.createElement("div");return t.innerHTML=e,t.textContent||t.innerText||""}static shortenLabel(e,t,n){let a=e;if(e.length>t+5){let l=t;if(n){l=e.lastIndexOf(n);const s=e.slice(l);t>l&&(t=l),a=e.slice(0,t)+"... "+s}else a=e.slice(0,t)+"..."}return a}static sortAlphabetically(e,t){const n=e.label.toUpperCase(),a=t.label.toUpperCase();return n<a?-1:n>a?1:0}static createProgressBar(e){return`<div class="d-flex flex-row align-items-center">\n              <div class="col-9 progress">\n                <div class="progress-bar bg-warning" aria-valuenow="${e}" aria-valuemin="0" aria-valuemax="100" style="width: ${e}%;">\n                </div>\n              </div>\n              <div class="col"> ${e} %</div>\n            </div>`}static createBreakdown(e,t,n,a){return`<div class="d-flex flex-row">\n              <div class="col-12 progress">\n                <div class="progress-bar bg-warning" aria-valuenow="${e}" aria-valuemin="0" aria-valuemax="100" style="width: ${e}%;">${n}</div>\n                <div class="progress-bar bg-success" aria-valuenow="${t}" aria-valuemin="0" aria-valuemax="100" style="width: ${t}%;">${a}</div>\n              </div>\n            </div>`}static getNumTableRows(){return[10,20,50,100]}static formatApexChartLabelFromXandName({series:e,seriesIndex:t,dataPointIndex:n,w:a}){const l=a.config.series[t].data[n],s=l.name,i=l.y;return`\n    <div class='apexcharts-theme-light apexcharts-active' id='test'>\n        <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n            ${l.meta.label}\n        </div>\n        <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n            <div class='apexcharts-tooltip-text text-left'>\n                <b>${a.config.xaxis.title.text}</b>: ${s}\n            </div>\n            <div class='apexcharts-tooltip-text text-left'>\n                <b>${a.config.yaxis[0].title.text}</b>: ${i}\n            </div>\n        </div>\n    </div>\n    `}static apexChartJumpToAlerts(e,t,n){const{seriesIndex:a,dataPointIndex:l}=n,{series:s}=n.config;if(-1===a)return;if(void 0===s)return;const i=s[a];if(void 0!==i.base_url){const e=i.start_url||"",t=i.data[l].meta.url_query;location.href=`${i.base_url}?${e}${t}`}}static formatApexChartLabelFromXandY({series:e,seriesIndex:t,dataPointIndex:n,w:a}){const l=a.config.series[t].data[n],s=l.x,i=l.y;return`\n      <div class='apexcharts-theme-light apexcharts-active' id='test'>\n          <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n              ${l.meta.label}\n          </div>\n          <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n              <div class='apexcharts-tooltip-text text-left'>\n                  <b>${a.config.xaxis.title.text}</b>: ${s}\n              </div>\n              <div class='apexcharts-tooltip-text text-left'>\n                  <b>${a.config.yaxis[0].title.text}</b>: ${i}\n              </div>\n          </div>\n      </div>\n    `}}function a(e,t){var n=$("thead th",$(e)).filter((function(){return"none"!=$(this).css("display")})).length;$("tbody",$(e)).html('<tr class="emptyRow"><td colspan="'+n+'"><i>'+t+"</i></td></tr>")}function l(e){return $("tr:not(.emptyRow)",$(e)).length-1}function s(e){return 0==l(e)}function i(e){return $("table",$("#dt-top-details",$(e)).parent())}function o(e,t,n,a,l,s=!0,i=""){0==$("td:nth-child("+e+")",$(this)).find("div.d-flex").length&&($("td:nth-child("+e+")",$(this)).empty(),$("td:nth-child("+e+")",$(this)).append($("<div class='d-flex justify-content-center'></div>"))),$("td:nth-child("+e+")",$(this)).find(".d-flex").append('<a href="'+l+`" title='${i}' data-placement="bottom" class="btn btn-sm mx-1 ${n} ${s?"":"disabled"}" onclick="`+a+'" role="button">'+t+"</a>")}function r(e,t){return e.data("datatable").options.columns.findIndex((function(e){return e.field===t}))}$((function(){n.initDataPatterns()}));var c=Object.freeze({__proto__:null,draw_processes_graph:function(e,t,n){var a,l={},s=e+"/lua/get_processes_graph_data.lua?host="+n;d3.json(s,(function(s,i){if(s)return console.warn(s);var o;(a=i).forEach((function(t){o=-1==t.source_pid?e+"/lua/host_details.lua?host="+t.source:e+"/lua/process_details.lua?pid="+t.source_pid+"&pid_name="+t.source_name+"&host="+n+"&page=flows",t.source=l[t.source]||(l[t.source]={name:t.source_name,num:t.source,link:o,type:t.source_type,pid:t.source_pid}),o=-1==t.target_pid?e+"/lua/host_details.lua?host="+t.target:e+"/lua/process_details.lua?pid="+t.target_pid+"&pid_name="+t.target_name+"&host="+n+"&page=flows",t.target=l[t.target]||(l[t.target]={name:t.target_name,num:t.target,link:o,type:t.target_type,pid:t.target_pid})}));var r=d3.scale.category10();r.proc="red",r.host="lightsteelblue";var c=d3.layout.force().nodes(d3.values(l)).links(a).size([960,500]).linkDistance(120).charge(-400).on("tick",(function(){d.attr("d",f),p.attr("transform",h),_.attr("transform",h)})).start(),u=d3.select("#"+t).append("svg").attr("id","ebpf_graph").attr("width",960).attr("height",500);u.append("defs").selectAll("marker").data(["proc2proc","proc2host","host2proc","host2host"]).enter().append("marker").attr("id",(function(e){return e})).attr("viewBox","0 -5 20 20").attr("refX",15).attr("refY",-1.5).attr("markerWidth",6).attr("markerHeight",6).attr("orient","auto").append("path").attr("d","M0,-5L10,0L0,5");var d=u.append("g").selectAll("path").data(c.links()).enter().append("path").attr("class",(function(e){return"link "+e.type})).attr("marker-end",(function(e){return"url(#"+e.type+")"})),p=u.append("g").selectAll("circle").data(c.nodes()).enter().append("circle").attr("class","ebpf_circle").attr("r",15).style("fill",(function(e){return r[e.type]})).call(c.drag).on("dblclick",(function(e){window.location.href=e.link})),_=u.append("g").selectAll("text").data(c.nodes()).enter().append("text").attr("class","ebpf_text").attr("x",12).attr("y","0.5rem").style("font-size","1rem").text((function(e){return e.pid>=0?e.name+" [pid: "+e.pid+"]":e.name}));function f(e){var t=e.target.x-e.source.x,n=e.target.y-e.source.y,a=Math.sqrt(t*t+n*n);return"M"+e.source.x+","+e.source.y+"A"+a+","+a+" 0 0,1 "+e.target.x+","+e.target.y}function h(e){return"translate("+e.x+","+e.y+")"}}))}});history.state&&history.state.zoom_level;class u{constructor(e,t){if(void 0===t.csrf)throw new Error("ModalHandler::Missing CSRF token!");this.element=e,this.dialog=$(e).closest(".modal"),this.options=t,this.csrf=t.csrf,this.dontDisableSubmit=t.dontDisableSubmit,this.observer=new MutationObserver((e=>{this.bindFormValidation(),this.toggleFormSubmission(),this.initDataPatterns()})),this.observer.observe(this.element[0],{childList:!0,subtree:!0}),this.initialState=null,this.currentState=null,this.firstCloseAttempt=!1,this.isSubmitting=!1;if(0==$(this.element).find("[type='submit']").length)throw new Error("ModalHandler::The submit button was not found inside the form!");this.toggleFormSubmission()}initDataPatterns(){NtopUtils.initDataPatterns()}createFormSnapshot(){const e={inputs:{},hidden:[]};return $(this.element).find('textarea,select,input[type!="radio"]').each((function(){const t=$(this).prop("nodeName").toLowerCase(),n=$(this).attr("name");e.inputs[`${t}[name='${n}']`]=$(this).val()})),$(this.element).find("[style='display: none;'], span.invalid-feedback").each((function(){e.hidden.push($(this))})),e}compareFormSnaphsot(e,t){if(null==e||null==t)return!0;for(let[n,a]of Object.entries(e.inputs))if(t.inputs[n]!=a)return!1;return!0}delegateModalClosing(){const e=this;$(this.dialog).find("button.cancel").off("click").click((function(){e.firstCloseAttempt=!1,$(e.element)[0].reportValidity(),$(e.dialog).find(".confirm-closing").fadeOut(100,(function(){$(e.dialog).find("button.btn-close").fadeIn(100)}))})),$(this.dialog).off("hide.bs.modal").on("hide.bs.modal",(function(t){e.isSubmitting?t.preventDefault():e.compareFormSnaphsot(e.currentState,e.initialState)||e.firstCloseAttempt||(t.preventDefault(),e.firstCloseAttempt=!0,$(e.dialog).find("button.btn-close").fadeOut(100,(function(){$(e.dialog).find(".confirm-closing").fadeIn(100)})))})),$(this.dialog).off("hidden.bs.modal").on("hidden.bs.modal",(function(t){for(const[t,n]of Object.entries(e.initialState.inputs))$(e.dialog).find(t).val(n),$(e.dialog).find(t).removeClass("is-invalid");e.initialState.hidden.forEach((e=>{e.hide()})),e.element.find("[type='submit']").attr("disabled","disabled"),e.currentState=null,e.firstCloseAttempt=!1,$(e.dialog).find(".confirm-closing").fadeOut(100,(function(){$(e.dialog).find("button.btn-close").fadeIn(100)})),e.cleanForm()}))}fillFormModal(){return this.options.loadFormData()}invokeModalInit(e={}){const t=this;this.delegateModalClosing(),this.data=e||this.fillFormModal(),this.options.onModalInit(this.data,this),$(this.element).parents(".modal").on("show.bs.modal",(function(){t.options.onModalShow()})),this.initialState=this.createFormSnapshot(),this.currentState=null,this.delegateResetButton()}delegateSubmit(){this.bindFormValidation();const e=this;this.submitHandler=function(t){e.options.isSyncRequest||(t.preventDefault(),t.stopPropagation(),e.makeRequest())},$(this.element).on("submit",this.submitHandler)}bindFormValidation(){const e=this;$(this.element).find("input,select,textarea").each((async function(t,n){const a=$(this);let l=-1;const s=async e=>e.data.resolveDNS&&a.val().match(NtopUtils.REGEXES.domainName)?await(async()=>{const e=a.parent().find(".spinner-border");a.attr("readonly",!0),e.show();const t=await NtopUtils.resolveDNS($(n).val());return a.removeAttr("readonly"),e.hide(),t.rc<0?(n.setCustomValidity(t.rc_str),[!1,t.rc_str_hr]):(n.setCustomValidity(""),[!0,"Success"])})():e.data.cannotBeEmpty&&e.isInputEmpty?(n.setCustomValidity("Please fill the input."),[!1,e.data.validationEmptyMessage||i18n_ext.missing_field]):n.validity.patternMismatch?(n.setCustomValidity("Pattern mismatch."),[!1,e.data.validationMessage||i18n_ext.invalid_field]):n.validity.rangeOverflow?(n.setCustomValidity("Value exceed the maximum value."),[!1,e.data.rangeOverflowMessage||i18n_ext.invalid_field]):n.validity.rangeUnderflow?(n.setCustomValidity("Value is under the minimum value."),[!1,e.data.rangeUnderflowMessage||i18n_ext.invalid_field]):(n.setCustomValidity(""),[!0,"Success"]),i=async()=>{const e={data:{validationMessage:a.data("validationMessage"),validationEmptyMessage:a.data("validationEmptyMessage"),cannotBeEmpty:"required"===a.attr("required")||1==a.data("validationNotEmpty"),resolveDNS:a.data("validationResolvedns"),rangeOverflowMessage:a.data("validationRangeOverflowMessage"),rangeUnderflowMessage:a.data("validationUnderflowOverflowMessage")},isInputEmpty:"string"==typeof a.val()&&""==a.val().trim()},[t,n]=await s(e);let l=a.parent().find(".invalid-feedback");0==l.length&&(l=$("<span class='invalid-feedback'></span>")),t?(a.removeClass("is-invalid"),l.fadeOut(500,(function(){$(this).remove()}))):(a.addClass("is-invalid"),a.parent().append(l),l.text(n))};$(this).off("input").on("input",(function(t){e.currentState=e.createFormSnapshot(),-1!=l&&clearTimeout(l),a.attr("formnovalidate")||(l=setTimeout((()=>{i(),e.toggleFormSubmission()}),300),e.firstCloseAttempt=!1)})),$(this).off("invalid").on("invalid",(function(e){e.preventDefault(),a.attr("formnovalidate")||i()}))}))}getModalID(){return $(this.element).parents(".modal").attr("id")}toggleFormSubmission(){let e=!0;$(this.element).find("input:not(:disabled),select:not(:disabled),textarea:not(:disabled)").each((function(t,n){e&=n.validity.valid})),e?$(this.element).find("[type='submit'],[type='test']").removeAttr("disabled"):$(this.element).find("[type='submit'],[type='test']").attr("disabled","disabled")}cleanForm(){$(this.element).find("input,textarea,select").each((function(e,t){$(this).removeClass("is-valid").removeClass("is-invalid")})),$(this.element)[0].reset()}makeRequest(){const e=$(this.element).find(".invalid-feedback"),t=$(this.element).find("[type='submit']");let n=this.options.beforeSumbit(this.data);n.csrf=this.csrf,n=$.extend(n,this.options.submitOptions),t.attr("disabled","disabled");const a=this;if(this.options.endpoint){let l;l="post"==a.options.method?$.ajax({url:this.options.endpoint,data:JSON.stringify(n),method:a.options.method,dataType:"json",contentType:"application/json; charset=utf-8"}):$.get(this.options.endpoint,n),this.isSubmitting=!0,l.done((function(t,l){a.isSubmitting=!1,a.currentState=null,a.options.resetAfterSubmit&&a.cleanForm(),e.hide();a.options.onSubmitSuccess(t,n,a)&&(a.dialog.modal?a.dialog.modal("hide"):(a.dialog[0].hidden=!0,$(".modal-backdrop.fade.show").remove())),$(a.element).off("submit",a.submitHandler),a.delegateSubmit()})).fail((function(t,l,s){a.isSubmitting=!1;const i=t.responseJSON;void 0!==i.rc&&i.rc<0&&e.html(i.rc_str_hr).show(),a.options.onSubmitError(i,n,l,s)})).always((function(e){t.removeAttr("disabled")}))}else{a.currentState=null,e.hide();a.options.onSubmitSuccess({},n,a)&&(a.dialog.modal?a.dialog.modal("hide"):a.dialog[0].hidden=!0),$(a.element).off("submit",a.submitHandler),a.delegateSubmit(),t.removeAttr("disabled")}}delegateResetButton(){const e=this,t=$(this.element).find("[type='reset']");if(0==t.length)return;const n=NtopUtils.serializeFormArray($(this.element).serializeArray());t.click((function(t){t.preventDefault(),$(e.element).find("input:visible,select").each((function(e,t){const a=$(t).attr("name");$(t).val(n[a]).removeClass("is-invalid").removeClass("is-valid")}))}))}}const d={no_formatting:{id:"no_formatting",um:null,step:null,decimal:null,scale_values:null},number:{id:"number",um:["","K","M","G","T"],step:1e3,decimal:null,scale_values:null},bytes:{id:"bytes",um:["B","KB","MB","GB","TB"],step:1024,decimal:2,scale_values:null},bytes_network:{id:"bytes_network",um:["B","KB","MB","GB","TB"],step:1e3,decimal:2,scale_values:null},bps:{id:"bps",um:["bps","Kbps","Mbps","Gbps","Tbps"],step:1e3,decimal:2,scale_values:8},fps:{id:"fps",um:["flows/s","Kflows/s","Mflows/s","Gflows/s"],step:1e3,decimal:2,scale_values:null},pps:{id:"pps",um:["pps","Kpps","Mpps","Gpps","Tpps"],step:1e3,decimal:2,scale_values:null},ms:{id:"ms",um:["ms","Kms","Mms","Gms","Tms"],step:1e3,decimal:2,scale_values:null},percentage:{id:"percentage",um:["%"],step:101,decimal:0,scale_values:null,max_value:100}};function p(e){let t=d[e],n=3;null!=t.decimal&&t.decimal>0&&(n=6);let a=0;return null!=t.um&&(a=Math.max(...t.um.map((e=>e.length)))),n+1+a}function _(e,t){let n=d[e];return function(a){if(null==a)return"";if(e==d.no_formatting.id)return a;null!=n.scale_values&&(a*=n.scale_values);let l=a<0;l&&(a*=-1);let s=n.step,i=n.decimal,o=n.um,r=0;for(null!=n.max_value&&a>n.max_value&&(a=n.max_value);a>=s&&r<o.length;)a/=s,r+=1;return null!=i&&i>0?(a*=Math.pow(10,i),a=Math.round(a),a=(a/=Math.pow(10,i)).toFixed(i)):a=Math.round(a),l&&!t&&(a*=-1),`${`${a}`} ${`${o[r]}`}`}}const f={types:d,getUnitMeasureLen:p,getFormatter:_};window.NtopUtils=n,window.datatableInitRefreshRows=function(e,t,n,a){var l=e.data("datatable"),s=l.resultset.data,i=e.data("dt-rr-timer"),o=e.data("dt-rr-ajax");a=a||{},i&&(clearInterval(i),e.removeData("dt-rr-timer")),o&&(o.abort(),e.removeData("dt-rr-ajax"));var c=[],u={};for(var d in s){var p=s[d];if(p[t]){var _=p[t];u[_]=d,c.push(_)}}if(!c)return!1;var f={custom_hosts:c.join(",")},h=l.options.url,m=!0,g=function(n){if("string"==typeof n&&(n=JSON.parse(n)),n){for(var s in n.data){var i=n.data[s],o=i[t];if(o&&u[o]){var c=u[o],d=l.rows[c],p=$("td",d);for(var _ in i){var f=p[r(e,_)],h=$(f),g=h.data("dt-rr-cur-val")||$(f).html(),v=a[_],b=i[_],y="";v&&(parseFloat(b)!=b&&console.warn("Invalid number: "+b),m||(y=" "+NtopUtils.drawTrend(parseFloat(b),parseFloat(g))),h.data("dt-rr-cur-val",b),b=v(b)),$(f).html(0!=b?b+y:"")}}}m=!1,e.removeData("dt-rr-ajax")}else console.error("Bad JSON result")};e.data("dt-rr-timer",setInterval((function(){e.data("dt-rr-ajax")||e.data("dt-rr-ajax",$.ajax({type:"GET",url:h,data:f,cache:!1,success:g}))}),n)),g(l.resultset)},window.datatableForEachRow=function(e,t){$("tr:not(:first)",e).each((function(e){var n;if("function"==typeof t)t.bind(this)(e);else for(n=0;n<t.length;n++)t[n].bind(this)(e)}))},window.datatableIsEmpty=s,window.datatableRemoveEmptyRow=function(e){$("tbody tr.emptyRow",$(e)).remove()},window.datatableAddEmptyRow=a,window.datatableGetNumDisplayedItems=l,window.datatableGetByForm=i,window.datatableUndoAddRow=function(e,t,n,l){n&&$(n).removeAttr("disabled").removeClass("disabled");var o=$(e).closest("form");$(e).remove(),aysUpdateForm(o);var r=i(o);s(r)&&a(r,t),l&&window[l](e)},window.datatableAddButtonCallback=o,window.datatableAddDeleteButtonCallback=function(e,t,n){o.bind(this)(e,n,"btn-danger",t,"javascript:void(0)",!0,"Delete")},window.datatableAddActionButtonCallback=function(e,t,n,a=!0,l=""){o.bind(this)(e,n,"btn-info",t,"javascript:void(0)",a,l)},window.datatableAddFilterButtonCallback=function(e,t,n,a="",l=!0){o.bind(this)(e,n,"btn-warning",t,"javascript:void(0)",l,a)},window.datatableAddLinkButtonCallback=function(e,t,n,a=""){o.bind(this)(e,n,"btn-info","",t,!0,a)},window.datatableMakeSelectUnique=function(e,t,n){function a(e,t,n,a){$("[id^="+t+"]").each((function(){var t=n($(this));t[0]!=e[0]&&a(t)}))}function l(e,t){if(t)e.removeAttr("disabled");else{var n=e.closest("select"),a=n.val()==e.val();if(e.attr("disabled","disabled"),a){var l=n.find("option:not([disabled])").first().val();n.val(l),n.attr("data-old-val",l)}}}function s(e,t,n){var s=$(this).attr("data-old-val")||"",i=$(this).val()||"",o=[];s==i&&(s=""),a($(this),e,t,(function(e){l(e.find("option[value='"+s+"']"),!0),l(e.find("option[value='"+i+"']"),!1),o.push(e)})),n($(this),s,i,o,l),$(this).attr("data-old-val",i)}var i=(n=NtopUtils.paramsExtend({on_change:$.noop,selector_fn:function(e){return e.find("select").first()}},n)).selector_fn(e);i.on("change",(function(){s.bind(this)(t,n.selector_fn,n.on_change)})),i.on("remove",(function(){$(this).val("").trigger("change")})),function(e,t,n){e.val(""),a(e,t,n,(function(e){e.trigger("change")}));var l=e.find("option:not([disabled])").first().val();e.val(l),e.trigger("change")}(i,t,n.selector_fn)},window.datatableIsLastPage=function(e){var t=$("#dt-bottom-details .pagination li:nth-last-child(3)",$(e));return!(1==t.length&&0==t.hasClass("active"))},window.datatableGetColumn=function(e,t,n){var a=e.data("datatable").resultset.data.filter((function(e){return e[t]===n}));if(a)return a[0]},window.datatableGetColumnIndex=r,window.$.fn.modalHandler=function(e){if(1!=this.length)throw new Error("Only a form element can by initialized!");const t=$.extend({csrf:"",endpoint:"",resetAfterSubmit:!0,dontDisableSubmit:!1,isSyncRequest:!1,method:"get",loadFormData:function(){},onModalInit:function(e){},onModalShow:function(){},beforeSumbit:function(){return{}},onSubmitSuccess:function(e){},onSubmitError:function(e,t,n){},onModalReset:function(e){}},e),n=new u(this,t);return n.delegateSubmit(),n},window.ebpfUtils=c,window.ntopFormatterUtils=f;var h={};window.makeUniqueValidator=function(e){return function(t){var n=t.val(),a=0;return!n||(e(t).each((function(){$(this).val()==n&&(a+=1)})),1==a)}},window.memberValueValidator=function(e){var t=e.val();return""===t||(NtopUtils.is_mac_address(t)||NtopUtils.is_network_mask(t,!0))},window.makePasswordPatternValidator=function(e){return function(t){return!t.val()||$(t).val().match(e)}},window.passwordMatchValidator=function(e){var t=$(e).closest("form").find("[data-passwordmatch]").not(e);return!e.val()||!t.val()||t.val()===e.val()},window.poolnameValidator=function(e){return!e.val()||$(e).val().match(/^[a-z0-9_]*$/)},window.passwordMatchRecheck=function(e){var t=$(e).find("[data-passwordmatch]"),n=0;t.each((function(){""!=$(this).val()&&n++})),n==t.length&&t.trigger("input")},window.hostOrMacValidator=function(e){var t=e.val();return""===t||(NtopUtils.is_mac_address(t)||NtopUtils.is_good_ipv4(t)||NtopUtils.is_good_ipv6(t))},window.ipAddressValidator=function(e){var t=e.val();return""===t||(NtopUtils.is_good_ipv4(t)||NtopUtils.is_good_ipv6(t))},window.bpfValidator=function(e,t=!1){var n=e.val();if(""===n.trim())return!0;var a=e.attr("name");h[a]||(h[a]={ajax_obj:null,valid:!0,timer:null,submit_remind:!1,last_val:null});var l=h[a],s=function(){l.timer=null;var e=function(e){l.ajax_obj=null,l.valid=e,l.last_val=n};l.last_val!==n?(l.ajax_obj&&l.ajax_obj.abort(),l.ajax_obj=$.ajax({type:"GET",url:`${http_prefix}/lua/pro/rest/v2/check/filter.lua`,async:!t,data:{query:n},error:function(){e(l.valid)},success:function(t){var n=!!t.response;e(n)}})):e(l.valid)};return t?s():l.last_val===n||(l.timer&&(clearTimeout(l.timer),l.submit_remind=!1),l.timer=setTimeout(s,250)),l.valid};const m=function(){let e={},t=[];return{ready:function(n){e[n]=!0,t.filter((e=>e.component_name==n)).forEach((e=>e.resolve())),t=t.filter((e=>e.component_name!=n))},on_ready:function(n){return new Promise(((a,l)=>{e[n]?a():t.push({resolve:a,component_name:n,completed:!1})}))}}}(),v=function(){let e={};return{is_array:function(e){return Array.isArray(e)},is_object:function(e){return"object"==typeof e&&!this.is_array(e)&&null!==e},clone:function(e){if(null==e)return null;if(this.is_object(e))return $.extend(!0,{},e);if(Array.isArray(e)){let t=[];for(let n=0;n<e.length;n+=1){let a=this.clone(e[n]);t.push(a)}return t}return e},object_to_array:function(e){if(null==e)return[];let t=[];for(let n in e)t.push(e[n]);return t},check_and_set_default_interval_time:function(e){if(null==w.get_url_entry("epoch_begin")||null==w.get_url_entry("epoch_end")){let e=Number.parseInt((Date.now()-18e5)/1e3),t=Number.parseInt(Date.now()/1e3);w.set_key_to_url("epoch_begin",e),w.set_key_to_url("epoch_end",t)}},from_utc_s_to_server_date:function(e){let t=1e3*e,n=new Date(t).getTimezoneOffset(),a=moment.tz(t,ntop_zoneinfo)._offset;return new Date(t+1e3*(a+n)*60)},from_utc_to_server_date_format:function(e,t){null==t&&(t="DD/MMM/YYYY HH:mm");let n=moment.tz(e,ntop_zoneinfo);return moment(e).format(t),n.format(t)},copy_object_keys:function(e,t,n=!1){if(null!=e)for(let a in e)null!=e[a]&&(1==n&&this.is_object(e[a])&&this.is_object(t[a])?this.copy_object_keys(e[a],t[a],n):t[a]=e[a])},set_http_globals_headers(t){e=t},http_request:async function(t,n,a,l){try{null==n&&(n={}),null==n.headers&&(n.headers={}),null!=n&&null!=n.headers&&null!=e&&(n.headers={...n.headers,...e});let a=await fetch(t,n);if(0==a.ok)return console.error(`http_request ${t}\n ok == false`),console.error(a),null;let s=await a.json();return 1==l?s:s.rsp}catch(e){if(console.error(e),1==a)throw e;return null}},download_URI:function(e,t){var n=document.createElement("a");n.download=t,n.href=e,document.body.appendChild(n),n.click(),document.body.removeChild(n)},get_random_string:function(){return Math.random().toString(16).substr(2,8)},string_hash_code:function(e){let t,n,a=0;if(0===e.length)return a;for(t=0;t<e.length;t++)n=e.charCodeAt(t),a=(a<<5)-a+n,a|=0;return a},mod:function(e,t){return(e%=t)<0&&(e+=t),e}}}(),b=function(){let e={},t={};const n=e=>v.clone(e),a=function(e,a){for(let l in t){if(l==a)continue;(0,t[l])(n(e))}};return{get_status:function(){return n(e)},update_subscribers:function(){const e=this.get_status();a(e)},on_status_change:function(e,a,l){if(t[e]=a,1==l){let e=this.get_status();a(n(e))}},replace_status:function(t,n){!function(t){e=t}(t),a(t,n)},add_obj_to_status:function(e,t){let n=this.get_status();v.copy_object_keys(e,n),this.replace_status(n,t)},add_value_to_status:function(e,t,n){let a=this.get_status();a[e]=t,this.replace_status(a,n)}}}(),y={},w=function(){let e={};return v.copy_object_keys(y,e),{get_url_params:function(){return window.location.search.substring(1)},get_url_search_params:function(e){null==e&&(e=this.get_url_params());return new URLSearchParams(e)},get_url_entries:function(e){return this.get_url_search_params(e).entries()},get_url_entry:function(e,t){let n=this.get_url_entries(t);for(const[t,a]of n)if(t==e)return a;return null},get_url_object:function(e){let t=this.get_url_entries(e),n={};for(const[e,a]of t)n[e]=a;return n},reload_url:function(){window.location.reload()},go_to_url:function(e){window.history.pushState({},"",window.location),window.location.replace(e)},replace_url:function(e){window.history.replaceState({},null,`?${e}`)},replace_url_and_reload:function(e){this.replace_url(e),this.reload_url()},serialize_param:function(e,t){return null==t&&(t=""),`${e}=${encodeURIComponent(t)}`},set_custom_key_serializer:function(t,n){e[t]=n},obj_to_url_params:function(t){let n=[];const a=this.serialize_param;for(let l in t){let s=e[l];null==s&&(s=a);let i=s(l,t[l]);n.push(i)}return n.join("&")},delete_params:function(e){let t=this.get_url_search_params();e.forEach((e=>{t.delete(e)})),this.replace_url(t.toString())},set_key_to_url:function(e,t){null==t&&(t="");let n=this.get_url_search_params();n.set(e,t),this.replace_url(n.toString())},add_obj_to_url:function(e,t){let n=this.obj_to_url_params(e),a=this.get_url_search_params(t),l=this.get_url_entries(n);for(const[e,t]of l)a.set(e,t);let s=a.toString();if(null!=t)return s;this.replace_url(s)}}}(),x={EPOCH_CHANGE:"epoch_change",FILTERS_CHANGE:"filters_change"},k={EPOCH_CHANGE:function(e,t){return e.epoch_begin!=t.epoch_begin||e.epoch_end!=t.epoch_end},FILTERS_CHANGE:function(e,t){return null==e.filters&&null!=t.filters||null!=e.filters&&null==t.filters||null!=e.filters&&null!=t.filters&&(e.filters.length!=t.filters.length||e.filters.some((e=>null==t.filters.find((t=>t.id==e.id)))))}},S=function(){const e="events_manager";let t={},n={};const a=e=>v.clone(e),l=function(e,t,n){for(let l in e){if(l==n)continue;(0,e[l])(a(t))}};b.on_status_change(e,(function(e){for(let a in x){if(1==(0,k[a])(e,t)){let t=n[a];l(t,e)}}t=e}),!0);const s=function(e,t,a){let s=n[e];null!=s&&l(s,t,a)},i=function(e,t,l,s){if(null==n[t]&&(n[t]={}),1==s){let e=b.get_status();l(a(e))}n[t][e]=l};return{emit_custom_event:function(e,t){s(e,t)},on_custom_event:function(e,t,n){i(e,t,n)},emit_event:function(t,n,a){s(t,n,a),b.add_obj_to_status(n,e)},on_event_change:function(e,t,n,a){i(e,t,n,a)}}}();function C(e,t,n,a,l){this.name=e,this.update_url=t,this.url_params=n,this.units=a,this.refresh=l,this.pieInterval;let s=[],i="",o=[],r=[],c=[];var u=[],d=[],p=[],_=function(e,t){var n=500,a=325,l=52,s=14,i=250,o=116;$(e).hasClass("pie-chart-small")&&(a=250,l=(o=(n=330)/5+15)/2);var r=d3.layout.pie().value((function(e){return 0==e.value&&(e.value=1),e.value})),c=d3.scale.category20(),u=d3.svg.arc().startAngle((function(e){return e.startAngle})).endAngle((function(e){return e.endAngle})).innerRadius(l).outerRadius(o),d=d3.select(e).append("svg:svg").attr("width",n).attr("height",a).attr("viewBox","0 0 "+n+" "+a).attr("preserveAspectRatio","xMidYMid"),p=d.append("svg:g").attr("class","arc").attr("transform","translate("+n/2+","+a/2+")"),_=d.append("svg:g").attr("class","label_group").attr("transform","translate("+n/2+","+a/2+")"),f=d.append("svg:g").attr("class","center_group").attr("transform","translate("+n/2+","+a/2+")");p.append("svg:circle").attr("fill","#EFEFEF").attr("r",o),f.append("svg:circle").attr("fill","white").attr("r",l);var h=null,m=null;t&&(f.append("svg:text").attr("class","label").attr("dy",-15).attr("text-anchor","middle").text("TOTAL"),m=f.append("svg:text").attr("class","total").attr("dy",7).attr("text-anchor","middle").text("Waiting..."),h=f.append("svg:text").attr("class","units").attr("dy",21).attr("text-anchor","middle").text(t));return[p,r,m,h,c,i,u,_,f,o,s]}(e,a),f=_[0],h=_[1],m=_[2],g=_[4],v=_[5],b=_[6],y=_[7],w=_[9],x=_[10];function k(e,t){return e.label<t.label?-1:e.label>t.label?1:0}function S(e,t){var n,a;d[t]?(n=d[t].startAngle,a=d[t].endAngle):!d[t]&&d[t-1]?(n=d[t-1].endAngle,a=d[t-1].endAngle):!d[t-1]&&d.length>0?(n=d[d.length-1].endAngle,a=d[d.length-1].endAngle):(n=0,a=0);t=d3.interpolate({startAngle:n,endAngle:a},{startAngle:e.startAngle,endAngle:e.endAngle});return function(e){var n=t(e);return b(n)}}function C(e,t){s0=2*Math.PI,e0=2*Math.PI;t=d3.interpolate({startAngle:e.startAngle,endAngle:e.endAngle},{startAngle:s0,endAngle:e0});return function(e){var n=t(e);return b(n)}}function N(e,t){var n;n=d[t]?(d[t].startAngle+d[t].endAngle-Math.PI)/2:!d[t]&&d[t-1]?(d[t-1].startAngle+d[t-1].endAngle-Math.PI)/2:!d[t-1]&&d.length>0?(d[d.length-1].startAngle+d[d.length-1].endAngle-Math.PI)/2:0;var a=(e.startAngle+e.endAngle-Math.PI)/2,l=d3.interpolateNumber(n,a);return function(e){var t=l(e);return"translate("+Math.cos(t)*(w+x)+","+Math.sin(t)*(w+x)+")"}}this.update=function(){$.ajax({type:"GET",url:this.update_url,data:this.url_params,success:function(e){let t;"object"==typeof e?t=e:"string"==typeof e&&(t=jQuery.parseJSON(e)),t&&function(e){e.rsp&&(e=e.rsp);e.sort(k),s=e,d=p,u=h(s);var t=0;function n(e,n,a){return e.name=s[n].label,e.value=s[n].value,e.url=s[n].url,t+=e.value,e.value>0}(p=u.filter(n)).length>0&&d.length>0&&(f.selectAll("circle").remove(),m&&m.text((function(){return(t/1024).toFixed(1)})),i=f.selectAll("path").data(p),i.enter().append("svg:path").attr("stroke","white").attr("stroke-width",.5).attr("fill",(function(e,t){return g(t)})).transition().duration(v).attrTween("d",S),i.transition().duration(v).attrTween("d",S),i.exit().transition().duration(v).attrTween("d",C).remove(),o=y.selectAll("line").data(p),o.enter().append("svg:line").attr("x1",0).attr("x2",0).attr("y1",-w-3).attr("y2",-w-8).attr("stroke","gray").attr("transform",(function(e){return"rotate("+(e.startAngle+e.endAngle)/2*(180/Math.PI)+")"})),o.transition().duration(v).attr("transform",(function(e){return"rotate("+(e.startAngle+e.endAngle)/2*(180/Math.PI)+")"})),o.exit().remove(),r=y.selectAll("text.value").data(p).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?5:-7})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){return(e.value/t*100).toFixed(1)+"%"})),r.enter().append("svg:text").attr("class","value").attr("transform",(function(e){return"translate("+Math.cos((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+","+Math.sin((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+")"})).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?5:-7})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){if(t<=1)return"";return(e.value/t*100).toFixed(1)+"%"})),r.transition().duration(v).attrTween("transform",N),r.exit().remove(),c=y.selectAll("text.units").data(p).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?17:5})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){return e.name})).on("click",(function(e){e.url&&(window.location.href=e.url)})),c.enter().append("svg:text").attr("class","units").attr("transform",(function(e){return"translate("+Math.cos((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+","+Math.sin((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+")"})).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?17:5})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){return e.name})).on("click",(function(e){e.url&&(window.location.href=e.url)})),c.transition().duration(v).attrTween("transform",N),c.exit().remove())}(t)}})},this.update(),this.update()}window.ntopng_events=x,window.ntopng_events_manager=S,window.ntopng_status_manager=b,window.ntopng_utility=v,window.ntopng_url_manager=w,window.ntopng_sync=m,window.ntopng_custom_events={SHOW_MODAL_FILTERS:"show_modal_filters",MODAL_FILTERS_APPLY:"modal_filters_apply",SHOW_GLOBAL_ALERT_INFO:"show_global_alert_info",VIS_DATA_LOADED:"vis_data_loaded",CHANGE_PAGE_TITLE:"change_page_title",DATATABLE_LOADED:"datatable_loaded",GET_INTERFACE_FATA:"get_interface_data"},C.prototype.setUrlParams=function(e){this.url_params=e,this.forceUpdate()},C.prototype.forceUpdate=function(e){this.stopInterval(),this.update(),this.startInterval()},C.prototype.setInterval=function(e){this.pieInterval=e},C.prototype.stopInterval=function(){clearInterval(this.pieInterval)},C.prototype.startInterval=function(){this.pieInterval=setInterval(this.update(),this.refresh)};const N={},A={db_analyze:function(e,t,n){const{dataPointIndex:a}=n,{filter:l}=n.w.config;let s;if(n.w.config.filtering_labels&&(s=n.w.config.filtering_labels[a]),n.w.config.labels&&n.w.config.labels[a],0==l.length||void 0===s)return;let i=ntopng_status_manager.get_status().filters;i.push({id:l[0],operator:"eq",value:s}),ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:i})},none:function(e,t,n){},standard:function(e,t,n){const{seriesIndex:a,dataPointIndex:l}=n,{series:s}=n.w.config;if(-1===a)return;if(void 0===s)return;const i=s[a];if(void 0!==i.base_url){const e=i.start_url||"",t=i.data[l].meta.url_query;location.href=`${i.base_url}?${e}${t}`}}},E={format_bytes:function(e,{config:t,seriesIndex:n,dataPointIndex:a}){return NtopUtils.bytesToSize(e)},format_pkts:function(e,{config:t,seriesIndex:n,dataPointIndex:a}){return NtopUtils.formatPackets(e)},format_value:function(e,{config:t,seriesIndex:n,dataPointIndex:a}){return NtopUtils.formatValue(e)},format_multiple_date:function(e,{config:t,seriesIndex:n,dataPointIndex:a}){return new Date(e[0])+" - "+new Date(e[1])},format_label_from_xy:function({series:e,seriesIndex:t,dataPointIndex:n,w:a}){const l=a.config.series[t].data[n],s=l.x,i=l.y;return`\n            <div class='apexcharts-theme-light apexcharts-active' id='test'>\n                <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n                    ${l.meta.label}\n                </div>\n                <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${a.config.xaxis.title.text}</b>: ${s}\n                    </div>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${a.config.yaxis[0].title.text}</b>: ${i}\n                    </div>\n                </div>\n            </div>`},format_label_from_xname:function({series:e,seriesIndex:t,dataPointIndex:n,w:a}){const l=a.config.series[t].data[n],s=l.name,i=l.y;return`\n            <div class='apexcharts-theme-light apexcharts-active' id='test'>\n                <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n                    ${l.meta.label}\n                </div>\n                <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${a.config.xaxis.title.text}</b>: ${s}\n                    </div>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${a.config.yaxis[0].title.text}</b>: ${i}\n                    </div>\n                </div>\n            </div>`}},T=E.format_value;class P{static registerWidget(e){if(null===e)throw new Error("The passed widget reference is null!");if(e.name in N)throw new Error(`The widget ${e.name} is already defined!`);N[e.name]=e}static getWidgetByName(e){if(e in N)return N[e];throw new Error(`Widget ${e} not found!`)}}const I=(e,t)=>{let n=t.position().top;const a=e.height(),l=$(window).height();if(a+n>=l){const s=l-n;s<=150?n=n-a+t.outerHeight():e.css({"max-height":s-20,"overflow-y":"auto"})}e.css("top",`${n}px`)};$(window).on("scroll",(function(){$("#n-navbar").height();$(this).scrollTop()>=32?$("#n-navbar").addClass("scrolled bg-light"):$("#n-navbar").removeClass("scrolled bg-light")})),$((()=>{const e=()=>{if(0==$(".sidebar-close-layer").length){const e=$("<div class='sidebar-close-layer' style='display:none'></div>");e.on("click",(function(){$("#n-sidebar").removeClass("active"),e.fadeOut((function(){$(this).remove()}))})),$("#wrapper").append(e),e.fadeIn()}else $(".sidebar-close-layer").fadeOut((function(){$(this).remove()}));$("#n-sidebar").toggleClass("active")};$("#n-sidebar a.submenu").bind({mouseenter:function(){let e=$(this).parent().find("div[id$='submenu']");I(e,$(this)),e.show()},mouseleave:function(){$(this).parent().find("div[id$='submenu']").hide()}}),$("div[id$='submenu']").bind({mouseenter:function(){$(this).show()},mouseleave:function(){$(this).hide()}}),$("button[data-bs-toggle='sidebar']").on("click",(function(){e()}))})),$(window).on("resize",(function(){const e=$("#n-sidebar").find("div.show[id$='submenu']");if(e.length>0){const t=e.parent().find("a[data-bs-toggle='collapse']");I(e,t)}}));const M=function(){const e={series:[],chart:{height:"100%",width:"100%",toolbar:{tools:{zoomout:!1,download:!1,zoomin:!1,zoom:" ",selection:!1,pan:!1,reset:!1}},events:{}},xaxis:{tooltip:{enabled:!1}},yaxis:{labels:{show:!0,style:{colors:[],fontSize:"11px",fontWeight:400,cssClass:""}},title:{rotate:-90,offsetY:0,offsetX:0,style:{fontSize:"11px",fontWeight:900,cssClass:""}},tooltip:{enabled:!1}},grid:{show:!1},legend:{show:!0}},t=function(e){e.xaxis.labels.formatter=function(e,{series:t,seriesIndex:n,dataPointIndex:a,w:l}){return v.from_utc_to_server_date_format(e)}},a=function(){let t=v.clone(e);return v.copy_object_keys({chart:{stacked:!0,type:"area",zoom:{enabled:!0,type:"x"}},tooltip:{x:{format:"dd MMM yyyy HH:mm:ss"},y:{}},xaxis:{labels:{show:!0,datetimeUTC:!1,formatter:null},axisTicks:{show:!1},type:"datetime",axisBorder:{show:!0},convertedCatToNumeric:!1},dataLabels:{enabled:!1},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"}},t,!0),t}(),l=function(){let t=v.clone(e),a={chart:{stacked:!0,type:"polarArea",height:400},yaxis:{show:!0,labels:{formatter:n.bytesToSize}},dataLabels:{enabled:!0,formatter:function(e,t){return e?`${e.toFixed(1)}%`:"0%"}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},tooltip:{y:{formatter:n.bytesToSize}}};return v.copy_object_keys(a,t,!0),t}(),s=function(){let t=v.clone(e);return v.copy_object_keys({chart:{type:"line",zoom:{enabled:!0,type:"x"}},tooltip:{shared:!0,x:{format:"dd MMM yyyy HH:mm:ss"},y:{}},xaxis:{labels:{show:!1,datetimeUTC:!1,formatter:null},axisTicks:{show:!0},type:"datetime",axisBorder:{show:!0},convertedCatToNumeric:!1},stroke:{show:!0,width:2,curve:"smooth"},grid:{show:!0},dataLabels:{enabled:!1}},t,!0),t}(),i=function({series:e,seriesIndex:t,dataPointIndex:n,w:a}){const l=a.config.series[t].data[n],s=l.name,i=l.y;return`\n          <div class='apexcharts-theme-light apexcharts-active' id='test'>\n              <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n                  ${l.meta.label}\n              </div>\n              <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n                  <div class='apexcharts-tooltip-text text-left'>\n                      <b>${a.config.xaxis.title.text}</b>: ${s}\n                  </div>\n                  <div class='apexcharts-tooltip-text text-left'>\n                      <b>${a.config.yaxis[0].title.text}</b>: ${i}\n                  </div>\n              </div>\n          </div>`},o=function(){let t=v.clone(e),n={chart:{width:"100%",height:"100%",stacked:!0,type:"bubble",zoom:{autoScaleYaxis:!0}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},events:{dataPointSelection:"standard"},grid:{padding:{left:6}},xaxis:{type:"numeric",labels:{}},yaxis:{type:"numeric",forceNiceScale:!0,labels:{}},dataLabels:{enabled:!1},tooltip:{custom:i}};return v.copy_object_keys(n,t,!0),t}();return{typeChart:{TS_LINE:"TS_LINE",TS_STACKED:"TS_STACKED",PIE:"PIE",BUBBLE:"BUBBLE",BASE:"BASE"},newChart:function(i){let r,c={};if(i==this.typeChart.TS_STACKED)c=v.clone(a),t(c);else if(i==this.typeChart.TS_LINE)c=v.clone(s),t(c);else if(i==this.typeChart.PIE)c=v.clone(l);else if(i==this.typeChart.BUBBLE)c=v.clone(o);else{if(i!=this.typeChart.BASE)throw`ntopChartApex::newChart: chart type = ${i} unsupported`;c=v.clone(e)}return{drawChart:function(e,t){if(t.yaxis&&t.yaxis.labels&&t.yaxis.labels.formatter){const e=t.yaxis.labels.formatter;"formatValue"==e?t.yaxis.labels.formatter=n.formatValue:"bytesToSize"==e&&(t.yaxis.labels.formatter=n.bytesToSize)}v.copy_object_keys(t,c,!0),r=new ApexCharts(e,c),r.render()},to_data_uri:async function(e){if(null==r)return;return(await r.dataURI(e)).imgURI},destroyChart:function(){null!=r&&r.destroy()},updateChart:function(e){null!=r&&r.updateOptions(e,!0)},registerEvent:function(e,t,n=!1){c.chart.events[e]=t,1==n&&r.updateOptions(c)}}}}}(),O=function(){let e={};return{addHandler:function(t){let n=e[t.handlerId];return null==n&&(n=[],e[t.handlerId]=n),n.push((()=>{t.onClick()})),`window['_DataTableButtonsOnClick']('${t.handlerId}', '${n.length-1}')`},getHandler:function(t,n){let a=e[t];return null==a?null:a[n]},deleteHandlersById:function(t){e[t]=null}}}();window._DataTableButtonsOnClick=function(e,t){let n=O.getHandler(e,t);null!=n&&n()};class U{static getStdDatatableConfig(e=[],t="<'row'<'col-sm-2 d-inline-block'l><'col-sm-10 text-end d-inline-block'<'dt-search'f>B>rtip>"){return 0==e.length&&(t="fBrtip"),{dom:t,pagingType:"full_numbers",lengthMenu:[[10,20,50,100],[10,20,50,100]],language:{search:i18n.script_search,paginate:{previous:"&lt;",next:"&gt;",first:"«",last:"»"}},saveState:!0,responsive:!0,buttons:{buttons:e,dom:{button:{className:"btn btn-link"},container:{className:"d-inline-block"}}}}}static createLinkCallback(e){let t="";return t=`onclick="${O.addHandler(e.handler)}"`,`<a href=#\n                   ${t}>\n                   ${e.text||""}\n                </a>`}static createActionButtons(e=[]){const t=[];e.forEach(((e,n)=>{let a="";if(e.handler){a=`onclick="${O.addHandler(e.handler)}"`}let l=`\n            <li>\n                <a\n                    ${e.href||e.modal?`href='${e.href||e.modal}'`:""}\n                    ${a}\n                    ${e.onclick?`onclick='${e.onclick}'`:""}\n                    ${e.modal?"data-bs-toggle='modal'":""}\n                    class='dropdown-item ${e.class?e.class:""}'\n                    ${e.hidden?"style='display: none'":""}\n                    ${e.external?"target='_about'":""}\n                    >\n                    <i class='fas ${e.icon}'></i> ${e.title||""}\n                </a>\n            </li>\n            `;t.push(l)}));return`<div class='dropdown'><button type="button" class="btn btn-sm btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false"><i class="fas fa-align-justify"></i></button>${`<ul class="dropdown-menu">${t.join("")}</ul>`}</div>`}static deleteButtonHandlers(e){O.deleteHandlersById(e)}static setAjaxConfig(e,t,n="",a="get",l={}){return e.ajax={url:t,type:a,dataSrc:n,data:function(e){return $.extend({},e,l)}},e}static extendConfig(e,t){return t.hasFilters&&(t.stateSaveCallback=function(e,t){localStorage.setItem("DataTables_"+e.sInstance,JSON.stringify(t))},t.stateLoadCallback=function(e){return JSON.parse(localStorage.getItem("DataTables_"+e.sInstance))},t.stateSaveParams=function(e,t){$("[data-filter]").each((function(){const e=$(this).find("li.active").data("filter-key");e&&(t.filters||(t.filters={}),t.filters[$(this).data("filter")]=e)}))}),$.extend({},e,t)}static secondsToHHMMSS(e){const t=e=>`${e}`.padStart(2,"0"),n=e%60,a=Math.floor(e/60)%60;return`${t(Math.floor(e/3600))}:${t(a)}:${t(n)}`}static openEditModalByQuery(e){const t=new URLSearchParams(window.location.search);if(!t.has(e.paramName))return;const n=t.get(e.paramName),a=e.datatableInstance.data().toArray().find((t=>t[e.paramName]==n));if("function"==typeof e.cancelIf&&e.cancelIf(a))return;const l=$(`#${e.modalHandler.getModalID()}`);if(void 0!==a&&(e.modalHandler.invokeModalInit(a),l.modal("show")),!t.has("referer"))return void l.on("hidden.bs.modal",(function(t){const n=new URL(window.location.href);n.searchParams.delete(e.paramName),history.replaceState({},"",n.toString())}));const s=t.get("referer");l.on("hidden.bs.modal",(function(e){window.location=s}))}static addToggleColumnsDropdown(e,t=((e,t)=>{})){if(void 0===e)throw"The $table is undefined!";const n=e.table().node().id;U._loadColumnsVisibility(e).then((function(a){let l=[-1];a.success?l=a.columns.map((e=>parseInt(e))):console.warn(a.message);const s=[],i=[],o=$(e.context[0].nTableWrapper);e.columns().every((function(t){e.column(t).visible()?s.push({index:t,name:this.header().textContent,label:this.i18n.name}):i.push(t)}));const r=$('\n                <div class="btn-group">\n                    <button type="button" class="btn btn-link dropdown-toggle" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\n                        <i class="fas fa-eye"></i>\n                    </button>\n                </div>\n            '),c=$('<div class="dropdown-menu dropdown-menu-right" style=\'width: max-content;\'><h6 class="dropdown-header">Show Columns</h6></div>'),u=$("<div class='px-4'></div>");for(let a=0;a<s.length;a++){const o=s[a];if(""==o.name)continue;const r=`toggle-${o.name.split().join("_")}`,c=-1===l.indexOf(o.index);if(!c){e.column(o.index).visible(!1)}const d=$(`<input class="form-check-input" ${c?"checked":""} type="checkbox" id="${r}">`),p=$(`\n                    <div class="form-check form-switch">\n                        <label class="form-check-label" for="${r}">\n                            ${o.name}\n                        </label>\n                    </div>\n                `);d.on("change",(function(a){$(".overlay").toggle(500);const l=e.column(o.index);l.visible(!l.visible());const s=l.visible(),r=[];e.columns().every((function(t){e.column(t).visible()||-1!==i.indexOf(t)||r.push(t)})),$.post(`${http_prefix}/lua/datatable_columns.lua`,{action:"save",table:n,columns:r.join(","),csrf:window.__CSRF_DATATABLE__}).then((function(e){e.success||console.warn(e.message)})),void 0!==t&&t(l,s)})),p.prepend(d),u.append(p)}c.on("click.bs.dropdown",(function(e){e.stopPropagation()})),r.append(c.append(u)),o.find(".dt-search").parent().append(r)}))}static async _loadColumnsVisibility(e){const t=e.table().node().id;return $.get(`${http_prefix}/lua/datatable_columns.lua?table=${t}&action=load`)}}class F{static alertSeverityAndType(e,t,n){return`${F.formatValueLabel(e,t,n)} ${F.formatValueLabel(n.alert_id,t,n)}`}static hideIfZero(e,t,a){let l=void 0!==e.color?e.color:"#aaa",s=void 0!==e.value?e.value:e;"display"===t&&0===parseInt(s)&&(l="#aaa");let i=`<span style='color: ${l}'>${n.fint(s)}</span>`;return void 0!==e.url&&(i=`<a href="${e.url}">${i}</a>`),i}static secondsToTime(e,t,a){return"display"===t?n.secondsToTime(e):e}static filterize(e,t,n,a,l,s){return`<a class='tag-filter' data-tag-key='${e}' title='${l||t}' data-tag-value='${t}' data-tag-label='${a||n||t}' href='#'>${s||n||t}</a>`}static formatValueLabel(e,t,n){if("display"!==t)return e.value;let a=e.label;return e.color&&(a=`<span class='font-weight-bold' style='color: ${e.color}'>${a}</span>`),a}static formatMessage(e,t,n){if("display"!==t)return e.value;let a=e.descr;return e.shorten_descr&&(a=`<span title="${e.descr}">${e.shorten_descr}</span>`),a}static formatSubtype(e,t,n){if("display"!==t)return e;return F.filterize("subtype",e,e)}static getFormatGenericField(e){return function(t,n,a){if("display"!==n)return t.value;let l="";return void 0!==t.reference&&(l=t.reference),F.filterize(e,a[e].value,a[e].label,a[e].label,a[e].label)+" "+l}}static formatSNMPInterface(e,t,n){if("display"!==t)return e.value;let a=F.filterize("snmp_interface",e.value,e.label,e.label,e.label);return e.color&&(a=`<span class='font-weight-bold' style='color: ${e.color}'>${a}</span>`),a}static formatSNMPIP(e,t,n){return"display"!==t?e:F.filterize("ip",e,e,e,e)}static formatProbeIP(e,t,n){if("display"!==t)return e;return F.filterize("probe_ip",e.value,e.label,e.label,e.label_long)}static formatHost(e,t,n){if("display"!==t)return e;let a="";void 0!==e.reference&&(a=e.reference);let l,s,i="";return e.label&&e.label!=e.value?(l="name",s=e.label_long,i=F.filterize("name",e.label_long,e.label,e.label,e.label_long)):(l="ip",s=e.value,i=F.filterize("ip",e.value,e.label,e.label,e.label_long)),n.vlan_id&&""!=n.vlan_id&&"0"!=n.vlan_id&&(i=F.filterize(l,`${s}@${n.vlan_id}`,`${e.label}@${n.vlan_id}`,`${e.label}@${n.vlan_id}`,`${e.label_long}@${n.vlan_id}`)),e.country&&(i+=F.filterize("country",e.country,e.country,e.country,e.country,' <img src="'+http_prefix+'/dist/images/blank.gif" class="flag flag-'+e.country.toLowerCase()+'"></a> ')),n.role&&"attacker"==n.role.value?i=i+" "+F.filterize("role",n.role.value,'<i class="fas fa-skull" title="'+n.role.label+'"></i>',n.role.label):n.role&&"victim"==n.role.value&&(i=i+" "+F.filterize("role",n.role.value,'<i class="fas fa-sad-tear" title="'+n.role.label+'"></i>',n.role.label)),n.role_cli_srv&&"client"==n.role_cli_srv.value?i=i+" "+F.filterize("role_cli_srv",n.role_cli_srv.value,'<i class="fas fa-long-arrow-alt-right" title="'+n.role_cli_srv.label+'"></i>',n.role_cli_srv.label):n.role_cli_srv&&"server"==n.role_cli_srv.value&&(i=i+" "+F.filterize("role_cli_srv",n.role_cli_srv.value,'<i class="fas fa-long-arrow-alt-left" title="'+n.role_cli_srv.label+'"></i>',n.role_cli_srv.label)),i+" "+a}static filterizeVlan(e,t,a,l,s,i){let o=l,r=s,c=i;return e.vlan&&0!=e.vlan.value&&(o=`${l}@${e.vlan.value}`,r=`${s}@${e.vlan.label}`,c=`${i}@${e.vlan.title}`),r=n.shortenLabel(r,16,"."),F.filterize(a,o,r,r,c)}static formatFlowTuple(e,t,n){let a=e.active_url?`<a href="${e.active_url}"><i class="fas fa-stream"></i></a>`:"",l="";if(e.cli_ip.name){let t="";e.cli_ip.label_long&&(t=e.cli_ip.value+" ["+e.cli_ip.label_long+"]"),l=F.filterizeVlan(e,n,"cli_name",e.cli_ip.name,e.cli_ip.label,t)}else l=F.filterizeVlan(e,n,"cli_ip",e.cli_ip.value,e.cli_ip.label,e.cli_ip.label_long);let s="";e.cli_ip.country&&"nil"!==e.cli_ip.country&&(s=F.filterize("cli_country",e.cli_ip.country,e.cli_ip.country,e.cli_ip.country,e.cli_ip.country,' <img src="'+http_prefix+'/dist/images/blank.gif" class="flag flag-'+e.cli_ip.country.toLowerCase()+'"></a> '));let i=e.cli_port&&e.cli_port>0?":"+F.filterize("cli_port",e.cli_port,e.cli_port):"",o="";1==e.cli_ip.blacklisted&&(o=" <i class='fas fa-ban fa-sm' title='"+i18n("hosts_stats.blacklisted")+"'></i>");let r="";if(e.srv_ip.name){let t="";e.srv_ip.label_long&&(t=e.srv_ip.value+" ["+e.srv_ip.label_long+"]"),r=F.filterizeVlan(e,n,"srv_name",e.srv_ip.name,e.srv_ip.label,t)}else r=F.filterizeVlan(e,n,"srv_ip",e.srv_ip.value,e.srv_ip.label,e.srv_ip.label_long);let c=e.cli_port&&e.cli_port>0?":"+F.filterize("srv_port",e.srv_port,e.srv_port):"",u="";e.srv_ip.country&&"nil"!==e.srv_ip.country&&(u=F.filterize("srv_country",e.srv_ip.country,e.srv_ip.country,e.srv_ip.country,e.srv_ip.country,' <img src="'+http_prefix+'/dist/images/blank.gif" class="flag flag-'+e.srv_ip.country.toLowerCase()+'"></a> '));let d="";1==e.srv_ip.blacklisted&&(d=" <i class='fas fa-ban fa-sm' title='"+i18n("hosts_stats.blacklisted")+"'></i>");let p="",_="";return n.cli_role&&("attacker"==n.cli_role.value?p+=F.filterize("role","attacker",'<i class="fas fa-skull" title="'+n.cli_role.label+'"></i>',n.cli_role.tag_label):"victim"==n.cli_role.value&&(p+=F.filterize("role","victim",'<i class="fas fa-sad-tear" title="'+n.cli_role.label+'"></i>',n.cli_role.tag_label))),n.srv_role&&("attacker"==n.srv_role.value?_+=F.filterize("role","attacker",'<i class="fas fa-skull" title="'+n.srv_role.label+'"></i>',n.srv_role.tag_label):"victim"==n.srv_role.value&&(_+=F.filterize("role","victim",'<i class="fas fa-sad-tear" title="'+n.srv_role.label+'"></i>',n.srv_role.tag_label))),`${a} ${l}${o}${s}${i} ${p} ${e.cli_ip.reference} <i class="fas fa-exchange-alt fa-lg" aria-hidden="true"></i> ${r}${d}${u}${c} ${_} ${e.srv_ip.reference}`}static formatNameDescription(e,t,n){if("display"!==t)return e.name;return F.filterize("alert_id",e.value,e.name,e.fullname,e.fullname)}static applyCellStyle(e,t,n,a,l){t.highlight&&$(e).css("border-left","5px solid "+t.highlight)}}function j(e,t){const n=Object.create(null),a=e.split(",");for(let e=0;e<a.length;e++)n[a[e]]=!0;return t?e=>!!n[e.toLowerCase()]:e=>!!n[e]}window.do_pie=function(e,t,n,a,l){var s=new C(e,t,n,a,l);return l&&s.setInterval(setInterval((function(){s.update()}),l)),s},window.DataTableUtils=U,window.DataTableFiltersMenu=class{constructor({tableAPI:e,filterMenuKey:t,filterTitle:n,filters:a,columnIndex:l,icon:s=null,extraAttributes:i="",id:o=null,url:r=null,urlParams:c=null,removeAllEntry:u=!1,callbackFunction:d=null}){this.rawFilters=a,this.tableAPI=e,this.filterTitle=n,this.icon=s,this.filterMenuKey=t,this.columnIndex=l,this.preventUpdate=!1,this.currentFilterSelected=void 0,this.$datatableWrapper=$(e.context[0].nTableWrapper),this.extraAttributes=i,this.id=o,this.url=r,this.urlParams,this.removeAllEntry=u,this.callbackFunction=d}get selectedFilter(){return this.currentFilterSelected}init(){const e=this;return this.$datatableWrapper.on("init.dt",(function(){e._render(e.rawFilters)})),this.tableAPI.on("draw",(function(){e._update()})),e}_countEntries(e,t=[]){void 0===e&&console.error("DataTableFiltersMenu::_countEntries() => the passed regex is undefined!");const n=new RegExp(e);return t.filter((e=>n.test(e))).length}_createMenuEntry(e){const t=this;let n=$(`<li class='dropdown-item pointer'>${e.label} </li>`);if(t.url){if(n=$(`<li class='dropdown-item pointer'><a href=# class='p-1 standard-color'>${e.label} </li>`),1==e.currently_active){0==t.$dropdown.title.parent().find("i.fas").length&&t.$dropdown.title.parent().prepend("<i class='fas fa-filter'></i>");const a=n.html();t.$dropdown.title.html(a),t.$dropdown.container.find("li").removeClass("active"),"all"!==e.key&&n.addClass("active")}}else if(void 0!==e.regex&&(void 0===e.countable||e.countable)){const t=this.tableAPI.columns(this.columnIndex).data()[0],a=this._countEntries(e.regex,t),l=$(`<span class='counter'>(${a})</span>`);0==a&&n.hide(),n.append(l)}return n.on("click",(function(a){0==t.$dropdown.title.parent().find("i.fas").length&&t.$dropdown.title.parent().prepend("<i class='fas fa-filter'></i>");const l=n.html();if(t.$dropdown.title.html(l),t.$dropdown.container.find("li").removeClass("active"),"all"!==e.key&&n.addClass("active"),t.callbackFunction)return t.callbackFunction(t.tableAPI,e),void(e.callback&&e.callback());if(t.url){t.urlParams=window.location.search;const n=new URLSearchParams(t.urlParams);n.set(t.filterMenuKey,null!=typeof e.id?e.id:""),t.url,n.toString(),window.history.pushState("","",window.location.pathname+"?"+n.toString()),location.reload()}else t.preventUpdate=!0,e.callback&&e.callback(),t.tableAPI.column(t.columnIndex).search(e.regex,!0,!1).draw(),t.currentFilterSelected=e})),n}_createFilters(e){const t={};for(const n of e){const e=this._createMenuEntry(n);t[n.key]={filter:n,$node:e}}return t}_render(e){if(void 0===this.columnIndex)$(`<span id="${this.id}" ${this.extraAttributes} title="${this.filterTitle}">${this.icon||this.filterTitle}</span>`).insertBefore(this.$datatableWrapper.find(".dataTables_filter").parent());else{const t=$(`<div id='${this.filterMenuKey}_dropdown' class='dropdown d-inline'></div>`),n=$("<button class='btn-link btn dropdown-toggle' data-bs-toggle=\"dropdown\" type='button'></button>"),a=$(`<span class='filter-title'>${this.filterTitle}</span>`);n.append(a),this.$dropdown={container:t,title:a,button:n},this.filters=this._createFilters(e);const l=$(`<ul class='dropdown-menu dropdown-menu-lg-end scrollable-dropdown' id='${this.filterMenuKey}_dropdown_menu'></ul>`);for(const[e,t]of Object.entries(this.filters))l.append(t.$node);if(!this.removeAllEntry){const e=this._generateAllFilter();l.prepend(this._createMenuEntry(e))}t.append(n),t.append(l),t.insertBefore(this.$datatableWrapper.find(".dataTables_filter").parent()),this._selectFilterFromState(this.filterMenuKey)}}_selectFilterFromState(e){this.tableAPI.state&&this.tableAPI.state.loaded()&&this.tableAPI.state.loaded().filters&&tableAPI.state.save()}_generateAllFilter(){return{key:"all",label:i18n_ext.all,regex:"",countable:!1,callback:()=>{this.$dropdown.title.parent().find("i.fas.fa-filter").remove(),this.$dropdown.title.html(`${this.filterTitle}`)}}}_update(){if(void 0!==this.filters)if(this.preventUpdate)this.preventUpdate=!1;else for(const[e,t]of Object.entries(this.filters)){if(0==t.countable||0==t.filter.countable)continue;const e=this.tableAPI.columns(this.columnIndex).data()[0],n=this._countEntries(t.filter.regex,e);0==n?t.$node.hide():t.$node.show(),t.$node.find(".counter").text(`(${n})`),this.$dropdown.button.find(".counter").text(`(${n})`)}}},window.DataTableRenders=F,window.ChartWidget=class extends class{constructor(e,t={},n=0,a={}){this._fetchedData=[],this.name=e,this._updateTime=n,this._datasource=t,this._additionalParams=a}async init(){P.registerWidget(this),this._fetchedData=await this._fetchData(),this._updateTime>0&&setInterval((async()=>{await this.update(this._datasource.params)}),this._updateTime)}async destroy(){}async destroyAndUpdate(e={}){await this.destroy(),await this.update(e)}async updateByUrl(e){const t=new URL(`${location.origin}${this._datasource.name}`);let n=ntopng_url_manager.get_url_entries(e);for(const[e,a]of n)t.searchParams.set(e,a);this._datasource.endpoint=t.pathname+t.search,this._fetchedData=await this._fetchData()}async update(e={}){const t=new URL(`${location.origin}${this._datasource.name}`);for(const[n,a]of Object.entries(e))t.searchParams.set(n,a);this._datasource.endpoint=t.pathname+t.search,this._fetchedData=await this._fetchData()}async _fetchData(){const e=await fetch(`${http_prefix}${this._datasource.endpoint}`);return await e.json()}}{constructor(e,t="line",n={},a=0,l={}){super(e,n,a,l),this._chartType=t,this._chart={},this._$htmlChart=document.querySelector(`#canvas-widget-${e}`)}static registerEventCallback(e,t,n){setTimeout((async()=>{try{const a=P.getWidgetByName(e),l={chart:{events:{[t]:n}}};await a._chart.updateOptions(l)}catch(e){}}),1e3)}_generateConfig(){const e={series:[],tooltip:{enabledOnSeries:[0],x:{show:!0,format:"dd/MM/yyyy HH:mm:ss"},y:{formatter:function(e,{series:t,seriesIndex:n,dataPointIndex:a,w:l}){return e}},z:{show:!1}},chart:{type:this._chartType,events:{},height:"100%",toolbar:{show:!1}},xaxis:{labels:{style:{fontSize:"14px"}},tooltip:{enabled:!0,formatter:function(e){return e}}},yaxis:{labels:{style:{fontSize:"14px"}},tooltip:{enabled:!0,formatter:function(e){return e}}},zaxis:{labels:{style:{fontSize:"14px"}},tooltip:{enabled:!0}},dataLabels:{enabled:!0,style:{fontSize:"14px"}},labels:[],legend:{show:!0,fontSize:"14px",position:"bottom",onItemClick:{toggleDataSeries:!0}},plotOptions:{bar:{borderRadius:4,horizontal:!0}},noData:{text:"No Data",align:"center",verticalAlign:"middle",style:{fontSize:"24px"}}};if(this._additionalParams&&this._additionalParams.apex){return Object.assign(e,this._additionalParams.apex)}return e}_buildTooltip(e,t){if(e.tooltip.y={formatter:function(e,{series:t,seriesIndex:n,dataPointIndex:a,w:l}){return e}},t.tooltip){for(const n in t.tooltip)if("x"===n||"y"===n||"z"===n){const a=t.tooltip[n].formatter;e.tooltip[n]||(e.tooltip[n]={}),e.tooltip[n].formatter=E[a]||NtopUtils[a]}t.tooltip.custom&&(e.tooltip.custom=E[t.tooltip.custom]||NtopUtils[t.tooltip.custom])}}_buildAxisFormatter(e,t){const n=e[t];if(void 0!==n&&void 0!==n.labels&&void 0!==n.labels.ntop_utils_formatter&&"none"!==n.labels.ntop_utils_formatter){const e=n.labels.ntop_utils_formatter;void 0===NtopUtils[e]?console.error(`xaxis: Formatting function '${e}' didn't found inside NtopUtils.`):n.labels.formatter=NtopUtils[e]}}_buildDataLabels(e,t){if(t.dataLabels)for(const[n,a]of Object.entries(t.dataLabels))e.dataLabels[n]=a;let n=e.dataLabels.formatter;n&&E[n]&&(e.dataLabels.formatter=E[n])}_buildConfig(){const e=this._generateConfig(),t=this._fetchedData.rsp,n=["series","xaxis","yaxis","colors","labels","fill","filter","filtering_labels"];for(const a of n)void 0!==t[a]&&(void 0!==e[a]?e[a]=Object.assign(e[a],t[a]):e[a]=t[a]);if(t.events)for(const n in t.events)e.chart.events[n]=A[t.events[n]];return void 0!==t.horizontal_chart&&(e.plotOptions.bar.horizontal=t.horizontal_chart),this._buildTooltip(e,t),this._buildAxisFormatter(e,"xaxis"),this._buildAxisFormatter(e,"yaxis"),this._buildDataLabels(e,t),e}_initializeChart(){const e=this._buildConfig();this._chartConfig=e,this._chart=new ApexCharts(this._$htmlChart,this._chartConfig),this._chart.render()}async init(){await super.init(),this._initializeChart()}async destroy(){await super.destroy(),this._chart.destroy(),this._chart=null}async update(e={}){if(void 0!==this._chartConfig&&(e?await super.update(e):await super.updateByUrl(),null!=this._chart)){const{colors:e,series:t,dataLabels:n,labels:a,xaxis:l,filtering_labels:s}=this._fetchedData.rsp;if(this._chartConfig.colors=e,this._chartConfig.series=t,l&&l.categories&&(this._chartConfig.xaxis.categories=l.categories),s&&(this._chartConfig.filtering_labels=s),n){let e=this._chartConfig.dataLabels.formatter;this._chartConfig.dataLabels.formatter=e&&E[e]?E[e]:T}a&&(this._chartConfig.labels=a),this._chart.updateOptions(this._chartConfig,!0)}}async destroyAndUpdate(e={}){await super.destroyAndUpdate(e),this._initializeChart()}},window.WidgetUtils=P,window.ntopChartApex=M,$((function(){function e(e){if("mousedown"==e.type&&(e.metaKey||e.ctrlKey||2!==e.which))return;const t=$(this).data("id");$.post(`${http_prefix}/lua/update_blog_posts.lua`,{blog_notification_id:t,csrf:window.__BLOG_NOTIFICATION_CSRF__},(e=>{if(e.success){$(this).off("click").off("mousedown").attr("data-read","true").data("read","true").find(".badge").remove();const e=$(".blog-notification[data-read='false']").length;0==e?$(".notification-bell").remove():$(".notification-bell").html(e)}}))}$(".blog-notification[data-read='false']").on("click",e).on("mousedown",e)}));const L=j("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt"),R=j("itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly");function D(e){return!!e||""===e}function z(e){if(de(e)){const t={};for(let n=0;n<e.length;n++){const a=e[n],l=me(a)?q(a):z(a);if(l)for(const e in l)t[e]=l[e]}return t}return me(e)||ve(e)?e:void 0}const B=/;(?![^(]*\))/g,V=/:(.+)/;function q(e){const t={};return e.split(B).forEach((e=>{if(e){const n=e.split(V);n.length>1&&(t[n[0].trim()]=n[1].trim())}})),t}function H(e){let t="";if(me(e))t=e;else if(de(e))for(let n=0;n<e.length;n++){const a=H(e[n]);a&&(t+=a+" ")}else if(ve(e))for(const n in e)e[n]&&(t+=n+" ");return t.trim()}function G(e){if(!e)return null;let{class:t,style:n}=e;return t&&!me(t)&&(e.class=H(t)),n&&(e.style=z(n)),e}const K=j("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot"),W=j("svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view"),J=j("area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr");function Y(e,t){if(e===t)return!0;let n=fe(e),a=fe(t);if(n||a)return!(!n||!a)&&e.getTime()===t.getTime();if(n=ge(e),a=ge(t),n||a)return e===t;if(n=de(e),a=de(t),n||a)return!(!n||!a)&&function(e,t){if(e.length!==t.length)return!1;let n=!0;for(let a=0;n&&a<e.length;a++)n=Y(e[a],t[a]);return n}(e,t);if(n=ve(e),a=ve(t),n||a){if(!n||!a)return!1;if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const n in e){const a=e.hasOwnProperty(n),l=t.hasOwnProperty(n);if(a&&!l||!a&&l||!Y(e[n],t[n]))return!1}}return String(e)===String(t)}function X(e,t){return e.findIndex((e=>Y(e,t)))}const Z=e=>me(e)?e:null==e?"":de(e)||ve(e)&&(e.toString===ye||!he(e.toString))?JSON.stringify(e,Q,2):String(e),Q=(e,t)=>t&&t.__v_isRef?Q(e,t.value):pe(t)?{[`Map(${t.size})`]:[...t.entries()].reduce(((e,[t,n])=>(e[`${t} =>`]=n,e)),{})}:_e(t)?{[`Set(${t.size})`]:[...t.values()]}:!ve(t)||de(t)||xe(t)?t:String(t),ee={},te=[],ne=()=>{},ae=()=>!1,le=/^on[^a-z]/,se=e=>le.test(e),ie=e=>e.startsWith("onUpdate:"),oe=Object.assign,re=(e,t)=>{const n=e.indexOf(t);n>-1&&e.splice(n,1)},ce=Object.prototype.hasOwnProperty,ue=(e,t)=>ce.call(e,t),de=Array.isArray,pe=e=>"[object Map]"===we(e),_e=e=>"[object Set]"===we(e),fe=e=>"[object Date]"===we(e),he=e=>"function"==typeof e,me=e=>"string"==typeof e,ge=e=>"symbol"==typeof e,ve=e=>null!==e&&"object"==typeof e,be=e=>ve(e)&&he(e.then)&&he(e.catch),ye=Object.prototype.toString,we=e=>ye.call(e),xe=e=>"[object Object]"===we(e),ke=e=>me(e)&&"NaN"!==e&&"-"!==e[0]&&""+parseInt(e,10)===e,$e=j(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),Se=j("bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo"),Ce=e=>{const t=Object.create(null);return n=>t[n]||(t[n]=e(n))},Ne=/-(\w)/g,Ae=Ce((e=>e.replace(Ne,((e,t)=>t?t.toUpperCase():"")))),Ee=/\B([A-Z])/g,Te=Ce((e=>e.replace(Ee,"-$1").toLowerCase())),Pe=Ce((e=>e.charAt(0).toUpperCase()+e.slice(1))),Ie=Ce((e=>e?`on${Pe(e)}`:"")),Me=(e,t)=>!Object.is(e,t),Oe=(e,t)=>{for(let n=0;n<e.length;n++)e[n](t)},Ue=(e,t,n)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:n})},Fe=e=>{const t=parseFloat(e);return isNaN(t)?e:t};let je,Le;class Re{constructor(e=!1){this.active=!0,this.effects=[],this.cleanups=[],!e&&Le&&(this.parent=Le,this.index=(Le.scopes||(Le.scopes=[])).push(this)-1)}run(e){if(this.active){const t=Le;try{return Le=this,e()}finally{Le=t}}}on(){Le=this}off(){Le=this.parent}stop(e){if(this.active){let t,n;for(t=0,n=this.effects.length;t<n;t++)this.effects[t].stop();for(t=0,n=this.cleanups.length;t<n;t++)this.cleanups[t]();if(this.scopes)for(t=0,n=this.scopes.length;t<n;t++)this.scopes[t].stop(!0);if(this.parent&&!e){const e=this.parent.scopes.pop();e&&e!==this&&(this.parent.scopes[this.index]=e,e.index=this.index)}this.active=!1}}}function De(e){return new Re(e)}function ze(e,t=Le){t&&t.active&&t.effects.push(e)}function Be(){return Le}function Ve(e){Le&&Le.cleanups.push(e)}const qe=e=>{const t=new Set(e);return t.w=0,t.n=0,t},He=e=>(e.w&Ye)>0,Ge=e=>(e.n&Ye)>0,Ke=new WeakMap;let We,Je=0,Ye=1;const Xe=Symbol(""),Ze=Symbol("");class Qe{constructor(e,t=null,n){this.fn=e,this.scheduler=t,this.active=!0,this.deps=[],this.parent=void 0,ze(this,n)}run(){if(!this.active)return this.fn();let e=We,t=at;for(;e;){if(e===this)return;e=e.parent}try{return this.parent=We,We=this,at=!0,Ye=1<<++Je,Je<=30?(({deps:e})=>{if(e.length)for(let t=0;t<e.length;t++)e[t].w|=Ye})(this):et(this),this.fn()}finally{Je<=30&&(e=>{const{deps:t}=e;if(t.length){let n=0;for(let a=0;a<t.length;a++){const l=t[a];He(l)&&!Ge(l)?l.delete(e):t[n++]=l,l.w&=~Ye,l.n&=~Ye}t.length=n}})(this),Ye=1<<--Je,We=this.parent,at=t,this.parent=void 0,this.deferStop&&this.stop()}}stop(){We===this?this.deferStop=!0:this.active&&(et(this),this.onStop&&this.onStop(),this.active=!1)}}function et(e){const{deps:t}=e;if(t.length){for(let n=0;n<t.length;n++)t[n].delete(e);t.length=0}}function tt(e,t){e.effect&&(e=e.effect.fn);const n=new Qe(e);t&&(oe(n,t),t.scope&&ze(n,t.scope)),t&&t.lazy||n.run();const a=n.run.bind(n);return a.effect=n,a}function nt(e){e.effect.stop()}let at=!0;const lt=[];function st(){lt.push(at),at=!1}function it(){const e=lt.pop();at=void 0===e||e}function ot(e,t,n){if(at&&We){let t=Ke.get(e);t||Ke.set(e,t=new Map);let a=t.get(n);a||t.set(n,a=qe()),rt(a)}}function rt(e,t){let n=!1;Je<=30?Ge(e)||(e.n|=Ye,n=!He(e)):n=!e.has(We),n&&(e.add(We),We.deps.push(e))}function ct(e,t,n,a,l,s){const i=Ke.get(e);if(!i)return;let o=[];if("clear"===t)o=[...i.values()];else if("length"===n&&de(e))i.forEach(((e,t)=>{("length"===t||t>=a)&&o.push(e)}));else switch(void 0!==n&&o.push(i.get(n)),t){case"add":de(e)?ke(n)&&o.push(i.get("length")):(o.push(i.get(Xe)),pe(e)&&o.push(i.get(Ze)));break;case"delete":de(e)||(o.push(i.get(Xe)),pe(e)&&o.push(i.get(Ze)));break;case"set":pe(e)&&o.push(i.get(Xe))}if(1===o.length)o[0]&&ut(o[0]);else{const e=[];for(const t of o)t&&e.push(...t);ut(qe(e))}}function ut(e,t){const n=de(e)?e:[...e];for(const e of n)e.computed&&dt(e);for(const e of n)e.computed||dt(e)}function dt(e,t){(e!==We||e.allowRecurse)&&(e.scheduler?e.scheduler():e.run())}const pt=j("__proto__,__v_isRef,__isVue"),_t=new Set(Object.getOwnPropertyNames(Symbol).filter((e=>"arguments"!==e&&"caller"!==e)).map((e=>Symbol[e])).filter(ge)),ft=bt(),ht=bt(!1,!0),mt=bt(!0),gt=bt(!0,!0),vt=function(){const e={};return["includes","indexOf","lastIndexOf"].forEach((t=>{e[t]=function(...e){const n=sn(this);for(let e=0,t=this.length;e<t;e++)ot(n,0,e+"");const a=n[t](...e);return-1===a||!1===a?n[t](...e.map(sn)):a}})),["push","pop","shift","unshift","splice"].forEach((t=>{e[t]=function(...e){st();const n=sn(this)[t].apply(this,e);return it(),n}})),e}();function bt(e=!1,t=!1){return function(n,a,l){if("__v_isReactive"===a)return!e;if("__v_isReadonly"===a)return e;if("__v_isShallow"===a)return t;if("__v_raw"===a&&l===(e?t?Jt:Wt:t?Kt:Gt).get(n))return n;const s=de(n);if(!e&&s&&ue(vt,a))return Reflect.get(vt,a,l);const i=Reflect.get(n,a,l);return(ge(a)?_t.has(a):pt(a))?i:(e||ot(n,0,a),t?i:pn(i)?s&&ke(a)?i:i.value:ve(i)?e?Zt(i):Yt(i):i)}}function yt(e=!1){return function(t,n,a,l){let s=t[n];if(nn(s)&&pn(s)&&!pn(a))return!1;if(!e&&!nn(a)&&(an(a)||(a=sn(a),s=sn(s)),!de(t)&&pn(s)&&!pn(a)))return s.value=a,!0;const i=de(t)&&ke(n)?Number(n)<t.length:ue(t,n),o=Reflect.set(t,n,a,l);return t===sn(l)&&(i?Me(a,s)&&ct(t,"set",n,a):ct(t,"add",n,a)),o}}const wt={get:ft,set:yt(),deleteProperty:function(e,t){const n=ue(e,t),a=Reflect.deleteProperty(e,t);return a&&n&&ct(e,"delete",t,void 0),a},has:function(e,t){const n=Reflect.has(e,t);return ge(t)&&_t.has(t)||ot(e,0,t),n},ownKeys:function(e){return ot(e,0,de(e)?"length":Xe),Reflect.ownKeys(e)}},xt={get:mt,set:(e,t)=>!0,deleteProperty:(e,t)=>!0},kt=oe({},wt,{get:ht,set:yt(!0)}),$t=oe({},xt,{get:gt}),St=e=>e,Ct=e=>Reflect.getPrototypeOf(e);function Nt(e,t,n=!1,a=!1){const l=sn(e=e.__v_raw),s=sn(t);n||(t!==s&&ot(l,0,t),ot(l,0,s));const{has:i}=Ct(l),o=a?St:n?cn:rn;return i.call(l,t)?o(e.get(t)):i.call(l,s)?o(e.get(s)):void(e!==l&&e.get(t))}function At(e,t=!1){const n=this.__v_raw,a=sn(n),l=sn(e);return t||(e!==l&&ot(a,0,e),ot(a,0,l)),e===l?n.has(e):n.has(e)||n.has(l)}function Et(e,t=!1){return e=e.__v_raw,!t&&ot(sn(e),0,Xe),Reflect.get(e,"size",e)}function Tt(e){e=sn(e);const t=sn(this);return Ct(t).has.call(t,e)||(t.add(e),ct(t,"add",e,e)),this}function Pt(e,t){t=sn(t);const n=sn(this),{has:a,get:l}=Ct(n);let s=a.call(n,e);s||(e=sn(e),s=a.call(n,e));const i=l.call(n,e);return n.set(e,t),s?Me(t,i)&&ct(n,"set",e,t):ct(n,"add",e,t),this}function It(e){const t=sn(this),{has:n,get:a}=Ct(t);let l=n.call(t,e);l||(e=sn(e),l=n.call(t,e)),a&&a.call(t,e);const s=t.delete(e);return l&&ct(t,"delete",e,void 0),s}function Mt(){const e=sn(this),t=0!==e.size,n=e.clear();return t&&ct(e,"clear",void 0,void 0),n}function Ot(e,t){return function(n,a){const l=this,s=l.__v_raw,i=sn(s),o=t?St:e?cn:rn;return!e&&ot(i,0,Xe),s.forEach(((e,t)=>n.call(a,o(e),o(t),l)))}}function Ut(e,t,n){return function(...a){const l=this.__v_raw,s=sn(l),i=pe(s),o="entries"===e||e===Symbol.iterator&&i,r="keys"===e&&i,c=l[e](...a),u=n?St:t?cn:rn;return!t&&ot(s,0,r?Ze:Xe),{next(){const{value:e,done:t}=c.next();return t?{value:e,done:t}:{value:o?[u(e[0]),u(e[1])]:u(e),done:t}},[Symbol.iterator](){return this}}}}function Ft(e){return function(...t){return"delete"!==e&&this}}const[jt,Lt,Rt,Dt]=function(){const e={get(e){return Nt(this,e)},get size(){return Et(this)},has:At,add:Tt,set:Pt,delete:It,clear:Mt,forEach:Ot(!1,!1)},t={get(e){return Nt(this,e,!1,!0)},get size(){return Et(this)},has:At,add:Tt,set:Pt,delete:It,clear:Mt,forEach:Ot(!1,!0)},n={get(e){return Nt(this,e,!0)},get size(){return Et(this,!0)},has(e){return At.call(this,e,!0)},add:Ft("add"),set:Ft("set"),delete:Ft("delete"),clear:Ft("clear"),forEach:Ot(!0,!1)},a={get(e){return Nt(this,e,!0,!0)},get size(){return Et(this,!0)},has(e){return At.call(this,e,!0)},add:Ft("add"),set:Ft("set"),delete:Ft("delete"),clear:Ft("clear"),forEach:Ot(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach((l=>{e[l]=Ut(l,!1,!1),n[l]=Ut(l,!0,!1),t[l]=Ut(l,!1,!0),a[l]=Ut(l,!0,!0)})),[e,n,t,a]}();function zt(e,t){const n=t?e?Dt:Rt:e?Lt:jt;return(t,a,l)=>"__v_isReactive"===a?!e:"__v_isReadonly"===a?e:"__v_raw"===a?t:Reflect.get(ue(n,a)&&a in t?n:t,a,l)}const Bt={get:zt(!1,!1)},Vt={get:zt(!1,!0)},qt={get:zt(!0,!1)},Ht={get:zt(!0,!0)},Gt=new WeakMap,Kt=new WeakMap,Wt=new WeakMap,Jt=new WeakMap;function Yt(e){return nn(e)?e:en(e,!1,wt,Bt,Gt)}function Xt(e){return en(e,!1,kt,Vt,Kt)}function Zt(e){return en(e,!0,xt,qt,Wt)}function Qt(e){return en(e,!0,$t,Ht,Jt)}function en(e,t,n,a,l){if(!ve(e))return e;if(e.__v_raw&&(!t||!e.__v_isReactive))return e;const s=l.get(e);if(s)return s;const i=function(e){return e.__v_skip||!Object.isExtensible(e)?0:function(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}((e=>we(e).slice(8,-1))(e))}(e);if(0===i)return e;const o=new Proxy(e,2===i?a:n);return l.set(e,o),o}function tn(e){return nn(e)?tn(e.__v_raw):!(!e||!e.__v_isReactive)}function nn(e){return!(!e||!e.__v_isReadonly)}function an(e){return!(!e||!e.__v_isShallow)}function ln(e){return tn(e)||nn(e)}function sn(e){const t=e&&e.__v_raw;return t?sn(t):e}function on(e){return Ue(e,"__v_skip",!0),e}const rn=e=>ve(e)?Yt(e):e,cn=e=>ve(e)?Zt(e):e;function un(e){at&&We&&rt((e=sn(e)).dep||(e.dep=qe()))}function dn(e,t){(e=sn(e)).dep&&ut(e.dep)}function pn(e){return!(!e||!0!==e.__v_isRef)}function _n(e){return hn(e,!1)}function fn(e){return hn(e,!0)}function hn(e,t){return pn(e)?e:new mn(e,t)}class mn{constructor(e,t){this.__v_isShallow=t,this.dep=void 0,this.__v_isRef=!0,this._rawValue=t?e:sn(e),this._value=t?e:rn(e)}get value(){return un(this),this._value}set value(e){e=this.__v_isShallow?e:sn(e),Me(e,this._rawValue)&&(this._rawValue=e,this._value=this.__v_isShallow?e:rn(e),dn(this))}}function gn(e){dn(e)}function vn(e){return pn(e)?e.value:e}const bn={get:(e,t,n)=>vn(Reflect.get(e,t,n)),set:(e,t,n,a)=>{const l=e[t];return pn(l)&&!pn(n)?(l.value=n,!0):Reflect.set(e,t,n,a)}};function yn(e){return tn(e)?e:new Proxy(e,bn)}class wn{constructor(e){this.dep=void 0,this.__v_isRef=!0;const{get:t,set:n}=e((()=>un(this)),(()=>dn(this)));this._get=t,this._set=n}get value(){return this._get()}set value(e){this._set(e)}}function xn(e){return new wn(e)}function kn(e){const t=de(e)?new Array(e.length):{};for(const n in e)t[n]=Sn(e,n);return t}class $n{constructor(e,t,n){this._object=e,this._key=t,this._defaultValue=n,this.__v_isRef=!0}get value(){const e=this._object[this._key];return void 0===e?this._defaultValue:e}set value(e){this._object[this._key]=e}}function Sn(e,t,n){const a=e[t];return pn(a)?a:new $n(e,t,n)}class Cn{constructor(e,t,n,a){this._setter=t,this.dep=void 0,this.__v_isRef=!0,this._dirty=!0,this.effect=new Qe(e,(()=>{this._dirty||(this._dirty=!0,dn(this))})),this.effect.computed=this,this.effect.active=this._cacheable=!a,this.__v_isReadonly=n}get value(){const e=sn(this);return un(e),!e._dirty&&e._cacheable||(e._dirty=!1,e._value=e.effect.run()),e._value}set value(e){this._setter(e)}}const Nn=[];function An(e,...t){st();const n=Nn.length?Nn[Nn.length-1].component:null,a=n&&n.appContext.config.warnHandler,l=function(){let e=Nn[Nn.length-1];if(!e)return[];const t=[];for(;e;){const n=t[0];n&&n.vnode===e?n.recurseCount++:t.push({vnode:e,recurseCount:0});const a=e.component&&e.component.parent;e=a&&a.vnode}return t}();if(a)Pn(a,n,11,[e+t.join(""),n&&n.proxy,l.map((({vnode:e})=>`at <${gi(n,e.type)}>`)).join("\n"),l]);else{const n=[`[Vue warn]: ${e}`,...t];l.length&&n.push("\n",...function(e){const t=[];return e.forEach(((e,n)=>{t.push(...0===n?[]:["\n"],...function({vnode:e,recurseCount:t}){const n=t>0?`... (${t} recursive calls)`:"",a=` at <${gi(e.component,e.type,!!e.component&&null==e.component.parent)}`,l=">"+n;return e.props?[a,...En(e.props),l]:[a+l]}(e))})),t}(l)),console.warn(...n)}it()}function En(e){const t=[],n=Object.keys(e);return n.slice(0,3).forEach((n=>{t.push(...Tn(n,e[n]))})),n.length>3&&t.push(" ..."),t}function Tn(e,t,n){return me(t)?(t=JSON.stringify(t),n?t:[`${e}=${t}`]):"number"==typeof t||"boolean"==typeof t||null==t?n?t:[`${e}=${t}`]:pn(t)?(t=Tn(e,sn(t.value),!0),n?t:[`${e}=Ref<`,t,">"]):he(t)?[`${e}=fn${t.name?`<${t.name}>`:""}`]:(t=sn(t),n?t:[`${e}=`,t])}function Pn(e,t,n,a){let l;try{l=a?e(...a):e()}catch(e){Mn(e,t,n)}return l}function In(e,t,n,a){if(he(e)){const l=Pn(e,t,n,a);return l&&be(l)&&l.catch((e=>{Mn(e,t,n)})),l}const l=[];for(let s=0;s<e.length;s++)l.push(In(e[s],t,n,a));return l}function Mn(e,t,n,a=!0){if(t){let a=t.parent;const l=t.proxy,s=n;for(;a;){const t=a.ec;if(t)for(let n=0;n<t.length;n++)if(!1===t[n](e,l,s))return;a=a.parent}const i=t.appContext.config.errorHandler;if(i)return void Pn(i,null,10,[e,l,s])}!function(e,t,n,a=!0){console.error(e)}(e,0,0,a)}let On=!1,Un=!1;const Fn=[];let jn=0;const Ln=[];let Rn=null,Dn=0;const zn=[];let Bn=null,Vn=0;const qn=Promise.resolve();let Hn=null,Gn=null;function Kn(e){const t=Hn||qn;return e?t.then(this?e.bind(this):e):t}function Wn(e){Fn.length&&Fn.includes(e,On&&e.allowRecurse?jn+1:jn)||e===Gn||(null==e.id?Fn.push(e):Fn.splice(function(e){let t=jn+1,n=Fn.length;for(;t<n;){const a=t+n>>>1;ea(Fn[a])<e?t=a+1:n=a}return t}(e.id),0,e),Jn())}function Jn(){On||Un||(Un=!0,Hn=qn.then(ta))}function Yn(e,t,n,a){de(e)?n.push(...e):t&&t.includes(e,e.allowRecurse?a+1:a)||n.push(e),Jn()}function Xn(e){Yn(e,Bn,zn,Vn)}function Zn(e,t=null){if(Ln.length){for(Gn=t,Rn=[...new Set(Ln)],Ln.length=0,Dn=0;Dn<Rn.length;Dn++)Rn[Dn]();Rn=null,Dn=0,Gn=null,Zn(e,t)}}function Qn(e){if(Zn(),zn.length){const e=[...new Set(zn)];if(zn.length=0,Bn)return void Bn.push(...e);for(Bn=e,Bn.sort(((e,t)=>ea(e)-ea(t))),Vn=0;Vn<Bn.length;Vn++)Bn[Vn]();Bn=null,Vn=0}}const ea=e=>null==e.id?1/0:e.id;function ta(e){Un=!1,On=!0,Zn(e),Fn.sort(((e,t)=>ea(e)-ea(t)));try{for(jn=0;jn<Fn.length;jn++){const e=Fn[jn];e&&!1!==e.active&&Pn(e,null,14)}}finally{jn=0,Fn.length=0,Qn(),On=!1,Hn=null,(Fn.length||Ln.length||zn.length)&&ta(e)}}let na,aa=[];function la(e,t){var n,a;na=e,na?(na.enabled=!0,aa.forEach((({event:e,args:t})=>na.emit(e,...t))),aa=[]):"undefined"!=typeof window&&window.HTMLElement&&!(null===(a=null===(n=window.navigator)||void 0===n?void 0:n.userAgent)||void 0===a?void 0:a.includes("jsdom"))?((t.__VUE_DEVTOOLS_HOOK_REPLAY__=t.__VUE_DEVTOOLS_HOOK_REPLAY__||[]).push((e=>{la(e,t)})),setTimeout((()=>{na||(t.__VUE_DEVTOOLS_HOOK_REPLAY__=null,aa=[])}),3e3)):aa=[]}function sa(e,t,...n){if(e.isUnmounted)return;const a=e.vnode.props||ee;let l=n;const s=t.startsWith("update:"),i=s&&t.slice(7);if(i&&i in a){const e=`${"modelValue"===i?"model":i}Modifiers`,{number:t,trim:s}=a[e]||ee;s&&(l=n.map((e=>e.trim()))),t&&(l=n.map(Fe))}let o,r=a[o=Ie(t)]||a[o=Ie(Ae(t))];!r&&s&&(r=a[o=Ie(Te(t))]),r&&In(r,e,6,l);const c=a[o+"Once"];if(c){if(e.emitted){if(e.emitted[o])return}else e.emitted={};e.emitted[o]=!0,In(c,e,6,l)}}function ia(e,t,n=!1){const a=t.emitsCache,l=a.get(e);if(void 0!==l)return l;const s=e.emits;let i={},o=!1;if(!he(e)){const a=e=>{const n=ia(e,t,!0);n&&(o=!0,oe(i,n))};!n&&t.mixins.length&&t.mixins.forEach(a),e.extends&&a(e.extends),e.mixins&&e.mixins.forEach(a)}return s||o?(de(s)?s.forEach((e=>i[e]=null)):oe(i,s),a.set(e,i),i):(a.set(e,null),null)}function oa(e,t){return!(!e||!se(t))&&(t=t.slice(2).replace(/Once$/,""),ue(e,t[0].toLowerCase()+t.slice(1))||ue(e,Te(t))||ue(e,t))}let ra=null,ca=null;function ua(e){const t=ra;return ra=e,ca=e&&e.type.__scopeId||null,t}function da(e){ca=e}function pa(){ca=null}const _a=e=>fa;function fa(e,t=ra,n){if(!t)return e;if(e._n)return e;const a=(...n)=>{a._d&&Ps(-1);const l=ua(t),s=e(...n);return ua(l),a._d&&Ps(1),s};return a._n=!0,a._c=!0,a._d=!0,a}function ha(e){const{type:t,vnode:n,proxy:a,withProxy:l,props:s,propsOptions:[i],slots:o,attrs:r,emit:c,render:u,renderCache:d,data:p,setupState:_,ctx:f,inheritAttrs:h}=e;let m,g;const v=ua(e);try{if(4&n.shapeFlag){const e=l||a;m=Ws(u.call(e,e,d,s,_,p,f)),g=r}else{m=Ws(t(s,t.length>1?{attrs:r,slots:o,emit:c}:null)),g=t.props?r:ma(r)}}catch(t){Cs.length=0,Mn(t,e,1),m=Bs($s)}let b=m;if(g&&!1!==h){const e=Object.keys(g),{shapeFlag:t}=b;e.length&&7&t&&(i&&e.some(ie)&&(g=ga(g,i)),b=qs(b,g))}return n.dirs&&(b=qs(b),b.dirs=b.dirs?b.dirs.concat(n.dirs):n.dirs),n.transition&&(b.transition=n.transition),m=b,ua(v),m}const ma=e=>{let t;for(const n in e)("class"===n||"style"===n||se(n))&&((t||(t={}))[n]=e[n]);return t},ga=(e,t)=>{const n={};for(const a in e)ie(a)&&a.slice(9)in t||(n[a]=e[a]);return n};function va(e,t,n){const a=Object.keys(t);if(a.length!==Object.keys(e).length)return!0;for(let l=0;l<a.length;l++){const s=a[l];if(t[s]!==e[s]&&!oa(n,s))return!0}return!1}function ba({vnode:e,parent:t},n){for(;t&&t.subTree===e;)(e=t.vnode).el=n,t=t.parent}const ya=e=>e.__isSuspense,wa={name:"Suspense",__isSuspense:!0,process(e,t,n,a,l,s,i,o,r,c){null==e?function(e,t,n,a,l,s,i,o,r){const{p:c,o:{createElement:u}}=r,d=u("div"),p=e.suspense=ka(e,l,a,t,d,n,s,i,o,r);c(null,p.pendingBranch=e.ssContent,d,null,a,p,s,i),p.deps>0?(xa(e,"onPending"),xa(e,"onFallback"),c(null,e.ssFallback,t,n,a,null,s,i),Ca(p,e.ssFallback)):p.resolve()}(t,n,a,l,s,i,o,r,c):function(e,t,n,a,l,s,i,o,{p:r,um:c,o:{createElement:u}}){const d=t.suspense=e.suspense;d.vnode=t,t.el=e.el;const p=t.ssContent,_=t.ssFallback,{activeBranch:f,pendingBranch:h,isInFallback:m,isHydrating:g}=d;if(h)d.pendingBranch=p,Fs(p,h)?(r(h,p,d.hiddenContainer,null,l,d,s,i,o),d.deps<=0?d.resolve():m&&(r(f,_,n,a,l,null,s,i,o),Ca(d,_))):(d.pendingId++,g?(d.isHydrating=!1,d.activeBranch=h):c(h,l,d),d.deps=0,d.effects.length=0,d.hiddenContainer=u("div"),m?(r(null,p,d.hiddenContainer,null,l,d,s,i,o),d.deps<=0?d.resolve():(r(f,_,n,a,l,null,s,i,o),Ca(d,_))):f&&Fs(p,f)?(r(f,p,n,a,l,d,s,i,o),d.resolve(!0)):(r(null,p,d.hiddenContainer,null,l,d,s,i,o),d.deps<=0&&d.resolve()));else if(f&&Fs(p,f))r(f,p,n,a,l,d,s,i,o),Ca(d,p);else if(xa(t,"onPending"),d.pendingBranch=p,d.pendingId++,r(null,p,d.hiddenContainer,null,l,d,s,i,o),d.deps<=0)d.resolve();else{const{timeout:e,pendingId:t}=d;e>0?setTimeout((()=>{d.pendingId===t&&d.fallback(_)}),e):0===e&&d.fallback(_)}}(e,t,n,a,l,i,o,r,c)},hydrate:function(e,t,n,a,l,s,i,o,r){const c=t.suspense=ka(t,a,n,e.parentNode,document.createElement("div"),null,l,s,i,o,!0),u=r(e,c.pendingBranch=t.ssContent,n,c,s,i);return 0===c.deps&&c.resolve(),u},create:ka,normalize:function(e){const{shapeFlag:t,children:n}=e,a=32&t;e.ssContent=$a(a?n.default:n),e.ssFallback=a?$a(n.fallback):Bs($s)}};function xa(e,t){const n=e.props&&e.props[t];he(n)&&n()}function ka(e,t,n,a,l,s,i,o,r,c,u=!1){const{p:d,m:p,um:_,n:f,o:{parentNode:h,remove:m}}=c,g=Fe(e.props&&e.props.timeout),v={vnode:e,parent:t,parentComponent:n,isSVG:i,container:a,hiddenContainer:l,anchor:s,deps:0,pendingId:0,timeout:"number"==typeof g?g:-1,activeBranch:null,pendingBranch:null,isInFallback:!0,isHydrating:u,isUnmounted:!1,effects:[],resolve(e=!1){const{vnode:t,activeBranch:n,pendingBranch:a,pendingId:l,effects:s,parentComponent:i,container:o}=v;if(v.isHydrating)v.isHydrating=!1;else if(!e){const e=n&&a.transition&&"out-in"===a.transition.mode;e&&(n.transition.afterLeave=()=>{l===v.pendingId&&p(a,o,t,0)});let{anchor:t}=v;n&&(t=f(n),_(n,i,v,!0)),e||p(a,o,t,0)}Ca(v,a),v.pendingBranch=null,v.isInFallback=!1;let r=v.parent,c=!1;for(;r;){if(r.pendingBranch){r.effects.push(...s),c=!0;break}r=r.parent}c||Xn(s),v.effects=[],xa(t,"onResolve")},fallback(e){if(!v.pendingBranch)return;const{vnode:t,activeBranch:n,parentComponent:a,container:l,isSVG:s}=v;xa(t,"onFallback");const i=f(n),c=()=>{v.isInFallback&&(d(null,e,l,i,a,null,s,o,r),Ca(v,e))},u=e.transition&&"out-in"===e.transition.mode;u&&(n.transition.afterLeave=c),v.isInFallback=!0,_(n,a,null,!0),u||c()},move(e,t,n){v.activeBranch&&p(v.activeBranch,e,t,n),v.container=e},next:()=>v.activeBranch&&f(v.activeBranch),registerDep(e,t){const n=!!v.pendingBranch;n&&v.deps++;const a=e.vnode.el;e.asyncDep.catch((t=>{Mn(t,e,0)})).then((l=>{if(e.isUnmounted||v.isUnmounted||v.pendingId!==e.suspenseId)return;e.asyncResolved=!0;const{vnode:s}=e;ci(e,l,!1),a&&(s.el=a);const o=!a&&e.subTree.el;t(e,s,h(a||e.subTree.el),a?null:f(e.subTree),v,i,r),o&&m(o),ba(e,s.el),n&&0==--v.deps&&v.resolve()}))},unmount(e,t){v.isUnmounted=!0,v.activeBranch&&_(v.activeBranch,n,e,t),v.pendingBranch&&_(v.pendingBranch,n,e,t)}};return v}function $a(e){let t;if(he(e)){const n=Ts&&e._c;n&&(e._d=!1,As()),e=e(),n&&(e._d=!0,t=Ns,Es())}if(de(e)){const t=function(e){let t;for(let n=0;n<e.length;n++){const a=e[n];if(!Us(a))return;if(a.type!==$s||"v-if"===a.children){if(t)return;t=a}}return t}(e);e=t}return e=Ws(e),t&&!e.dynamicChildren&&(e.dynamicChildren=t.filter((t=>t!==e))),e}function Sa(e,t){t&&t.pendingBranch?de(e)?t.effects.push(...e):t.effects.push(e):Xn(e)}function Ca(e,t){e.activeBranch=t;const{vnode:n,parentComponent:a}=e,l=n.el=t.el;a&&a.subTree===n&&(a.vnode.el=l,ba(a,l))}function Na(e,t){if(ti){let n=ti.provides;const a=ti.parent&&ti.parent.provides;a===n&&(n=ti.provides=Object.create(a)),n[e]=t}}function Aa(e,t,n=!1){const a=ti||ra;if(a){const l=null==a.parent?a.vnode.appContext&&a.vnode.appContext.provides:a.parent.provides;if(l&&e in l)return l[e];if(arguments.length>1)return n&&he(t)?t.call(a.proxy):t}}function Ea(e,t){return Oa(e,null,t)}function Ta(e,t){return Oa(e,null,{flush:"post"})}function Pa(e,t){return Oa(e,null,{flush:"sync"})}const Ia={};function Ma(e,t,n){return Oa(e,t,n)}function Oa(e,t,{immediate:n,deep:a,flush:l}=ee){const s=ti;let i,o,r=!1,c=!1;if(pn(e)?(i=()=>e.value,r=an(e)):tn(e)?(i=()=>e,a=!0):de(e)?(c=!0,r=e.some((e=>tn(e)||an(e))),i=()=>e.map((e=>pn(e)?e.value:tn(e)?ja(e):he(e)?Pn(e,s,2):void 0))):i=he(e)?t?()=>Pn(e,s,2):()=>{if(!s||!s.isUnmounted)return o&&o(),In(e,s,3,[u])}:ne,t&&a){const e=i;i=()=>ja(e())}let u=e=>{o=f.onStop=()=>{Pn(e,s,4)}},d=c?[]:Ia;const p=()=>{if(f.active)if(t){const e=f.run();(a||r||(c?e.some(((e,t)=>Me(e,d[t]))):Me(e,d)))&&(o&&o(),In(t,s,3,[e,d===Ia?void 0:d,u]),d=e)}else f.run()};let _;p.allowRecurse=!!t,_="sync"===l?p:"post"===l?()=>ds(p,s&&s.suspense):()=>function(e){Yn(e,Rn,Ln,Dn)}(p);const f=new Qe(i,_);return t?n?p():d=f.run():"post"===l?ds(f.run.bind(f),s&&s.suspense):f.run(),()=>{f.stop(),s&&s.scope&&re(s.scope.effects,f)}}function Ua(e,t,n){const a=this.proxy,l=me(e)?e.includes(".")?Fa(a,e):()=>a[e]:e.bind(a,a);let s;he(t)?s=t:(s=t.handler,n=t);const i=ti;ai(this);const o=Oa(l,s.bind(a),n);return i?ai(i):li(),o}function Fa(e,t){const n=t.split(".");return()=>{let t=e;for(let e=0;e<n.length&&t;e++)t=t[n[e]];return t}}function ja(e,t){if(!ve(e)||e.__v_skip)return e;if((t=t||new Set).has(e))return e;if(t.add(e),pn(e))ja(e.value,t);else if(de(e))for(let n=0;n<e.length;n++)ja(e[n],t);else if(_e(e)||pe(e))e.forEach((e=>{ja(e,t)}));else if(xe(e))for(const n in e)ja(e[n],t);return e}function La(){const e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return cl((()=>{e.isMounted=!0})),pl((()=>{e.isUnmounting=!0})),e}const Ra=[Function,Array],Da={name:"BaseTransition",props:{mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:Ra,onEnter:Ra,onAfterEnter:Ra,onEnterCancelled:Ra,onBeforeLeave:Ra,onLeave:Ra,onAfterLeave:Ra,onLeaveCancelled:Ra,onBeforeAppear:Ra,onAppear:Ra,onAfterAppear:Ra,onAppearCancelled:Ra},setup(e,{slots:t}){const n=ni(),a=La();let l;return()=>{const s=t.default&&Ga(t.default(),!0);if(!s||!s.length)return;let i=s[0];if(s.length>1)for(const e of s)if(e.type!==$s){i=e;break}const o=sn(e),{mode:r}=o;if(a.isLeaving)return Va(i);const c=qa(i);if(!c)return Va(i);const u=Ba(c,o,a,n);Ha(c,u);const d=n.subTree,p=d&&qa(d);let _=!1;const{getTransitionKey:f}=c.type;if(f){const e=f();void 0===l?l=e:e!==l&&(l=e,_=!0)}if(p&&p.type!==$s&&(!Fs(c,p)||_)){const e=Ba(p,o,a,n);if(Ha(p,e),"out-in"===r)return a.isLeaving=!0,e.afterLeave=()=>{a.isLeaving=!1,n.update()},Va(i);"in-out"===r&&c.type!==$s&&(e.delayLeave=(e,t,n)=>{za(a,p)[String(p.key)]=p,e._leaveCb=()=>{t(),e._leaveCb=void 0,delete u.delayedLeave},u.delayedLeave=n})}return i}}};function za(e,t){const{leavingVNodes:n}=e;let a=n.get(t.type);return a||(a=Object.create(null),n.set(t.type,a)),a}function Ba(e,t,n,a){const{appear:l,mode:s,persisted:i=!1,onBeforeEnter:o,onEnter:r,onAfterEnter:c,onEnterCancelled:u,onBeforeLeave:d,onLeave:p,onAfterLeave:_,onLeaveCancelled:f,onBeforeAppear:h,onAppear:m,onAfterAppear:g,onAppearCancelled:v}=t,b=String(e.key),y=za(n,e),w=(e,t)=>{e&&In(e,a,9,t)},x=(e,t)=>{const n=t[1];w(e,t),de(e)?e.every((e=>e.length<=1))&&n():e.length<=1&&n()},k={mode:s,persisted:i,beforeEnter(t){let a=o;if(!n.isMounted){if(!l)return;a=h||o}t._leaveCb&&t._leaveCb(!0);const s=y[b];s&&Fs(e,s)&&s.el._leaveCb&&s.el._leaveCb(),w(a,[t])},enter(e){let t=r,a=c,s=u;if(!n.isMounted){if(!l)return;t=m||r,a=g||c,s=v||u}let i=!1;const o=e._enterCb=t=>{i||(i=!0,w(t?s:a,[e]),k.delayedLeave&&k.delayedLeave(),e._enterCb=void 0)};t?x(t,[e,o]):o()},leave(t,a){const l=String(e.key);if(t._enterCb&&t._enterCb(!0),n.isUnmounting)return a();w(d,[t]);let s=!1;const i=t._leaveCb=n=>{s||(s=!0,a(),w(n?f:_,[t]),t._leaveCb=void 0,y[l]===e&&delete y[l])};y[l]=e,p?x(p,[t,i]):i()},clone:e=>Ba(e,t,n,a)};return k}function Va(e){if(Xa(e))return(e=qs(e)).children=null,e}function qa(e){return Xa(e)?e.children?e.children[0]:void 0:e}function Ha(e,t){6&e.shapeFlag&&e.component?Ha(e.component.subTree,t):128&e.shapeFlag?(e.ssContent.transition=t.clone(e.ssContent),e.ssFallback.transition=t.clone(e.ssFallback)):e.transition=t}function Ga(e,t=!1,n){let a=[],l=0;for(let s=0;s<e.length;s++){let i=e[s];const o=null==n?i.key:String(n)+String(null!=i.key?i.key:s);i.type===xs?(128&i.patchFlag&&l++,a=a.concat(Ga(i.children,t,o))):(t||i.type!==$s)&&a.push(null!=o?qs(i,{key:o}):i)}if(l>1)for(let e=0;e<a.length;e++)a[e].patchFlag=-2;return a}function Ka(e){return he(e)?{setup:e,name:e.name}:e}const Wa=e=>!!e.type.__asyncLoader;function Ja(e){he(e)&&(e={loader:e});const{loader:t,loadingComponent:n,errorComponent:a,delay:l=200,timeout:s,suspensible:i=!0,onError:o}=e;let r,c=null,u=0;const d=()=>{let e;return c||(e=c=t().catch((e=>{if(e=e instanceof Error?e:new Error(String(e)),o)return new Promise(((t,n)=>{o(e,(()=>t((u++,c=null,d()))),(()=>n(e)),u+1)}));throw e})).then((t=>e!==c&&c?c:(t&&(t.__esModule||"Module"===t[Symbol.toStringTag])&&(t=t.default),r=t,t))))};return Ka({name:"AsyncComponentWrapper",__asyncLoader:d,get __asyncResolved(){return r},setup(){const e=ti;if(r)return()=>Ya(r,e);const t=t=>{c=null,Mn(t,e,13,!a)};if(i&&e.suspense)return d().then((t=>()=>Ya(t,e))).catch((e=>(t(e),()=>a?Bs(a,{error:e}):null)));const o=_n(!1),u=_n(),p=_n(!!l);return l&&setTimeout((()=>{p.value=!1}),l),null!=s&&setTimeout((()=>{if(!o.value&&!u.value){const e=new Error(`Async component timed out after ${s}ms.`);t(e),u.value=e}}),s),d().then((()=>{o.value=!0,e.parent&&Xa(e.parent.vnode)&&Wn(e.parent.update)})).catch((e=>{t(e),u.value=e})),()=>o.value&&r?Ya(r,e):u.value&&a?Bs(a,{error:u.value}):n&&!p.value?Bs(n):void 0}})}function Ya(e,{vnode:{ref:t,props:n,children:a}}){const l=Bs(e,n,a);return l.ref=t,l}const Xa=e=>e.type.__isKeepAlive,Za={name:"KeepAlive",__isKeepAlive:!0,props:{include:[String,RegExp,Array],exclude:[String,RegExp,Array],max:[String,Number]},setup(e,{slots:t}){const n=ni(),a=n.ctx,l=new Map,s=new Set;let i=null;const o=n.suspense,{renderer:{p:r,m:c,um:u,o:{createElement:d}}}=a,p=d("div");function _(e){ll(e),u(e,n,o,!0)}function f(e){l.forEach(((t,n)=>{const a=mi(t.type);!a||e&&e(a)||h(n)}))}function h(e){const t=l.get(e);i&&t.type===i.type?i&&ll(i):_(t),l.delete(e),s.delete(e)}a.activate=(e,t,n,a,l)=>{const s=e.component;c(e,t,n,0,o),r(s.vnode,e,t,n,s,o,a,e.slotScopeIds,l),ds((()=>{s.isDeactivated=!1,s.a&&Oe(s.a);const t=e.props&&e.props.onVnodeMounted;t&&Zs(t,s.parent,e)}),o)},a.deactivate=e=>{const t=e.component;c(e,p,null,1,o),ds((()=>{t.da&&Oe(t.da);const n=e.props&&e.props.onVnodeUnmounted;n&&Zs(n,t.parent,e),t.isDeactivated=!0}),o)},Ma((()=>[e.include,e.exclude]),(([e,t])=>{e&&f((t=>Qa(e,t))),t&&f((e=>!Qa(t,e)))}),{flush:"post",deep:!0});let m=null;const g=()=>{null!=m&&l.set(m,sl(n.subTree))};return cl(g),dl(g),pl((()=>{l.forEach((e=>{const{subTree:t,suspense:a}=n,l=sl(t);if(e.type!==l.type)_(e);else{ll(l);const e=l.component.da;e&&ds(e,a)}}))})),()=>{if(m=null,!t.default)return null;const n=t.default(),a=n[0];if(n.length>1)return i=null,n;if(!Us(a)||!(4&a.shapeFlag||128&a.shapeFlag))return i=null,a;let o=sl(a);const r=o.type,c=mi(Wa(o)?o.type.__asyncResolved||{}:r),{include:u,exclude:d,max:p}=e;if(u&&(!c||!Qa(u,c))||d&&c&&Qa(d,c))return i=o,a;const _=null==o.key?r:o.key,f=l.get(_);return o.el&&(o=qs(o),128&a.shapeFlag&&(a.ssContent=o)),m=_,f?(o.el=f.el,o.component=f.component,o.transition&&Ha(o,o.transition),o.shapeFlag|=512,s.delete(_),s.add(_)):(s.add(_),p&&s.size>parseInt(p,10)&&h(s.values().next().value)),o.shapeFlag|=256,i=o,ya(a.type)?a:o}}};function Qa(e,t){return de(e)?e.some((e=>Qa(e,t))):me(e)?e.split(",").includes(t):!!e.test&&e.test(t)}function el(e,t){nl(e,"a",t)}function tl(e,t){nl(e,"da",t)}function nl(e,t,n=ti){const a=e.__wdc||(e.__wdc=()=>{let t=n;for(;t;){if(t.isDeactivated)return;t=t.parent}return e()});if(il(t,a,n),n){let e=n.parent;for(;e&&e.parent;)Xa(e.parent.vnode)&&al(a,t,n,e),e=e.parent}}function al(e,t,n,a){const l=il(t,e,a,!0);_l((()=>{re(a[t],l)}),n)}function ll(e){let t=e.shapeFlag;256&t&&(t-=256),512&t&&(t-=512),e.shapeFlag=t}function sl(e){return 128&e.shapeFlag?e.ssContent:e}function il(e,t,n=ti,a=!1){if(n){const l=n[e]||(n[e]=[]),s=t.__weh||(t.__weh=(...a)=>{if(n.isUnmounted)return;st(),ai(n);const l=In(t,n,e,a);return li(),it(),l});return a?l.unshift(s):l.push(s),s}}const ol=e=>(t,n=ti)=>(!ri||"sp"===e)&&il(e,t,n),rl=ol("bm"),cl=ol("m"),ul=ol("bu"),dl=ol("u"),pl=ol("bum"),_l=ol("um"),fl=ol("sp"),hl=ol("rtg"),ml=ol("rtc");function gl(e,t=ti){il("ec",e,t)}function vl(e,t){const n=ra;if(null===n)return e;const a=fi(n)||n.proxy,l=e.dirs||(e.dirs=[]);for(let e=0;e<t.length;e++){let[n,s,i,o=ee]=t[e];he(n)&&(n={mounted:n,updated:n}),n.deep&&ja(s),l.push({dir:n,instance:a,value:s,oldValue:void 0,arg:i,modifiers:o})}return e}function bl(e,t,n,a){const l=e.dirs,s=t&&t.dirs;for(let i=0;i<l.length;i++){const o=l[i];s&&(o.oldValue=s[i].value);let r=o.dir[a];r&&(st(),In(r,n,8,[e.el,o,e,t]),it())}}function yl(e,t){return $l("components",e,!0,t)||e}const wl=Symbol();function xl(e){return me(e)?$l("components",e,!1)||e:e||wl}function kl(e){return $l("directives",e)}function $l(e,t,n=!0,a=!1){const l=ra||ti;if(l){const n=l.type;if("components"===e){const e=mi(n,!1);if(e&&(e===t||e===Ae(t)||e===Pe(Ae(t))))return n}const s=Sl(l[e]||n[e],t)||Sl(l.appContext[e],t);return!s&&a?n:s}}function Sl(e,t){return e&&(e[t]||e[Ae(t)]||e[Pe(Ae(t))])}function Cl(e,t,n,a){let l;const s=n&&n[a];if(de(e)||me(e)){l=new Array(e.length);for(let n=0,a=e.length;n<a;n++)l[n]=t(e[n],n,void 0,s&&s[n])}else if("number"==typeof e){l=new Array(e);for(let n=0;n<e;n++)l[n]=t(n+1,n,void 0,s&&s[n])}else if(ve(e))if(e[Symbol.iterator])l=Array.from(e,((e,n)=>t(e,n,void 0,s&&s[n])));else{const n=Object.keys(e);l=new Array(n.length);for(let a=0,i=n.length;a<i;a++){const i=n[a];l[a]=t(e[i],i,a,s&&s[a])}}else l=[];return n&&(n[a]=l),l}function Nl(e,t){for(let n=0;n<t.length;n++){const a=t[n];if(de(a))for(let t=0;t<a.length;t++)e[a[t].name]=a[t].fn;else a&&(e[a.name]=a.fn)}return e}function Al(e,t,n={},a,l){if(ra.isCE||ra.parent&&Wa(ra.parent)&&ra.parent.isCE)return Bs("slot","default"===t?null:{name:t},a&&a());let s=e[t];s&&s._c&&(s._d=!1),As();const i=s&&El(s(n)),o=Os(xs,{key:n.key||`_${t}`},i||(a?a():[]),i&&1===e._?64:-2);return!l&&o.scopeId&&(o.slotScopeIds=[o.scopeId+"-s"]),s&&s._c&&(s._d=!0),o}function El(e){return e.some((e=>!Us(e)||e.type!==$s&&!(e.type===xs&&!El(e.children))))?e:null}function Tl(e){const t={};for(const n in e)t[Ie(n)]=e[n];return t}const Pl=e=>e?si(e)?fi(e)||e.proxy:Pl(e.parent):null,Il=oe(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>e.props,$attrs:e=>e.attrs,$slots:e=>e.slots,$refs:e=>e.refs,$parent:e=>Pl(e.parent),$root:e=>Pl(e.root),$emit:e=>e.emit,$options:e=>Ll(e),$forceUpdate:e=>e.f||(e.f=()=>Wn(e.update)),$nextTick:e=>e.n||(e.n=Kn.bind(e.proxy)),$watch:e=>Ua.bind(e)}),Ml={get({_:e},t){const{ctx:n,setupState:a,data:l,props:s,accessCache:i,type:o,appContext:r}=e;let c;if("$"!==t[0]){const o=i[t];if(void 0!==o)switch(o){case 1:return a[t];case 2:return l[t];case 4:return n[t];case 3:return s[t]}else{if(a!==ee&&ue(a,t))return i[t]=1,a[t];if(l!==ee&&ue(l,t))return i[t]=2,l[t];if((c=e.propsOptions[0])&&ue(c,t))return i[t]=3,s[t];if(n!==ee&&ue(n,t))return i[t]=4,n[t];Ul&&(i[t]=0)}}const u=Il[t];let d,p;return u?("$attrs"===t&&ot(e,0,t),u(e)):(d=o.__cssModules)&&(d=d[t])?d:n!==ee&&ue(n,t)?(i[t]=4,n[t]):(p=r.config.globalProperties,ue(p,t)?p[t]:void 0)},set({_:e},t,n){const{data:a,setupState:l,ctx:s}=e;return l!==ee&&ue(l,t)?(l[t]=n,!0):a!==ee&&ue(a,t)?(a[t]=n,!0):!(ue(e.props,t)||"$"===t[0]&&t.slice(1)in e||(s[t]=n,0))},has({_:{data:e,setupState:t,accessCache:n,ctx:a,appContext:l,propsOptions:s}},i){let o;return!!n[i]||e!==ee&&ue(e,i)||t!==ee&&ue(t,i)||(o=s[0])&&ue(o,i)||ue(a,i)||ue(Il,i)||ue(l.config.globalProperties,i)},defineProperty(e,t,n){return null!=n.get?e._.accessCache[t]=0:ue(n,"value")&&this.set(e,t,n.value,null),Reflect.defineProperty(e,t,n)}},Ol=oe({},Ml,{get(e,t){if(t!==Symbol.unscopables)return Ml.get(e,t,e)},has:(e,t)=>"_"!==t[0]&&!L(t)});let Ul=!0;function Fl(e,t,n){In(de(e)?e.map((e=>e.bind(t.proxy))):e.bind(t.proxy),t,n)}function jl(e,t,n,a){const l=a.includes(".")?Fa(n,a):()=>n[a];if(me(e)){const n=t[e];he(n)&&Ma(l,n)}else if(he(e))Ma(l,e.bind(n));else if(ve(e))if(de(e))e.forEach((e=>jl(e,t,n,a)));else{const a=he(e.handler)?e.handler.bind(n):t[e.handler];he(a)&&Ma(l,a,e)}}function Ll(e){const t=e.type,{mixins:n,extends:a}=t,{mixins:l,optionsCache:s,config:{optionMergeStrategies:i}}=e.appContext,o=s.get(t);let r;return o?r=o:l.length||n||a?(r={},l.length&&l.forEach((e=>Rl(r,e,i,!0))),Rl(r,t,i)):r=t,s.set(t,r),r}function Rl(e,t,n,a=!1){const{mixins:l,extends:s}=t;s&&Rl(e,s,n,!0),l&&l.forEach((t=>Rl(e,t,n,!0)));for(const l in t)if(a&&"expose"===l);else{const a=Dl[l]||n&&n[l];e[l]=a?a(e[l],t[l]):t[l]}return e}const Dl={data:zl,props:ql,emits:ql,methods:ql,computed:ql,beforeCreate:Vl,created:Vl,beforeMount:Vl,mounted:Vl,beforeUpdate:Vl,updated:Vl,beforeDestroy:Vl,beforeUnmount:Vl,destroyed:Vl,unmounted:Vl,activated:Vl,deactivated:Vl,errorCaptured:Vl,serverPrefetch:Vl,components:ql,directives:ql,watch:function(e,t){if(!e)return t;if(!t)return e;const n=oe(Object.create(null),e);for(const a in t)n[a]=Vl(e[a],t[a]);return n},provide:zl,inject:function(e,t){return ql(Bl(e),Bl(t))}};function zl(e,t){return t?e?function(){return oe(he(e)?e.call(this,this):e,he(t)?t.call(this,this):t)}:t:e}function Bl(e){if(de(e)){const t={};for(let n=0;n<e.length;n++)t[e[n]]=e[n];return t}return e}function Vl(e,t){return e?[...new Set([].concat(e,t))]:t}function ql(e,t){return e?oe(oe(Object.create(null),e),t):t}function Hl(e,t,n,a){const[l,s]=e.propsOptions;let i,o=!1;if(t)for(let r in t){if($e(r))continue;const c=t[r];let u;l&&ue(l,u=Ae(r))?s&&s.includes(u)?(i||(i={}))[u]=c:n[u]=c:oa(e.emitsOptions,r)||r in a&&c===a[r]||(a[r]=c,o=!0)}if(s){const t=sn(n),a=i||ee;for(let i=0;i<s.length;i++){const o=s[i];n[o]=Gl(l,t,o,a[o],e,!ue(a,o))}}return o}function Gl(e,t,n,a,l,s){const i=e[n];if(null!=i){const e=ue(i,"default");if(e&&void 0===a){const e=i.default;if(i.type!==Function&&he(e)){const{propsDefaults:s}=l;n in s?a=s[n]:(ai(l),a=s[n]=e.call(null,t),li())}else a=e}i[0]&&(s&&!e?a=!1:!i[1]||""!==a&&a!==Te(n)||(a=!0))}return a}function Kl(e,t,n=!1){const a=t.propsCache,l=a.get(e);if(l)return l;const s=e.props,i={},o=[];let r=!1;if(!he(e)){const a=e=>{r=!0;const[n,a]=Kl(e,t,!0);oe(i,n),a&&o.push(...a)};!n&&t.mixins.length&&t.mixins.forEach(a),e.extends&&a(e.extends),e.mixins&&e.mixins.forEach(a)}if(!s&&!r)return a.set(e,te),te;if(de(s))for(let e=0;e<s.length;e++){const t=Ae(s[e]);Wl(t)&&(i[t]=ee)}else if(s)for(const e in s){const t=Ae(e);if(Wl(t)){const n=s[e],a=i[t]=de(n)||he(n)?{type:n}:n;if(a){const e=Xl(Boolean,a.type),n=Xl(String,a.type);a[0]=e>-1,a[1]=n<0||e<n,(e>-1||ue(a,"default"))&&o.push(t)}}}const c=[i,o];return a.set(e,c),c}function Wl(e){return"$"!==e[0]}function Jl(e){const t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:null===e?"null":""}function Yl(e,t){return Jl(e)===Jl(t)}function Xl(e,t){return de(t)?t.findIndex((t=>Yl(t,e))):he(t)&&Yl(t,e)?0:-1}const Zl=e=>"_"===e[0]||"$stable"===e,Ql=e=>de(e)?e.map(Ws):[Ws(e)],es=(e,t,n)=>{if(t._n)return t;const a=fa(((...e)=>Ql(t(...e))),n);return a._c=!1,a},ts=(e,t,n)=>{const a=e._ctx;for(const n in e){if(Zl(n))continue;const l=e[n];if(he(l))t[n]=es(0,l,a);else if(null!=l){const e=Ql(l);t[n]=()=>e}}},ns=(e,t)=>{const n=Ql(t);e.slots.default=()=>n};function as(){return{app:null,config:{isNativeTag:ae,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let ls=0;function ss(e,t){return function(n,a=null){he(n)||(n=Object.assign({},n)),null==a||ve(a)||(a=null);const l=as(),s=new Set;let i=!1;const o=l.app={_uid:ls++,_component:n,_props:a,_container:null,_context:l,_instance:null,version:Ui,get config(){return l.config},set config(e){},use:(e,...t)=>(s.has(e)||(e&&he(e.install)?(s.add(e),e.install(o,...t)):he(e)&&(s.add(e),e(o,...t))),o),mixin:e=>(l.mixins.includes(e)||l.mixins.push(e),o),component:(e,t)=>t?(l.components[e]=t,o):l.components[e],directive:(e,t)=>t?(l.directives[e]=t,o):l.directives[e],mount(s,r,c){if(!i){const u=Bs(n,a);return u.appContext=l,r&&t?t(u,s):e(u,s,c),i=!0,o._container=s,s.__vue_app__=o,fi(u.component)||u.component.proxy}},unmount(){i&&(e(null,o._container),delete o._container.__vue_app__)},provide:(e,t)=>(l.provides[e]=t,o)};return o}}function is(e,t,n,a,l=!1){if(de(e))return void e.forEach(((e,s)=>is(e,t&&(de(t)?t[s]:t),n,a,l)));if(Wa(a)&&!l)return;const s=4&a.shapeFlag?fi(a.component)||a.component.proxy:a.el,i=l?null:s,{i:o,r:r}=e,c=t&&t.r,u=o.refs===ee?o.refs={}:o.refs,d=o.setupState;if(null!=c&&c!==r&&(me(c)?(u[c]=null,ue(d,c)&&(d[c]=null)):pn(c)&&(c.value=null)),he(r))Pn(r,o,12,[i,u]);else{const t=me(r),a=pn(r);if(t||a){const o=()=>{if(e.f){const n=t?u[r]:r.value;l?de(n)&&re(n,s):de(n)?n.includes(s)||n.push(s):t?(u[r]=[s],ue(d,r)&&(d[r]=u[r])):(r.value=[s],e.k&&(u[e.k]=r.value))}else t?(u[r]=i,ue(d,r)&&(d[r]=i)):a&&(r.value=i,e.k&&(u[e.k]=i))};i?(o.id=-1,ds(o,n)):o()}}}let os=!1;const rs=e=>/svg/.test(e.namespaceURI)&&"foreignObject"!==e.tagName,cs=e=>8===e.nodeType;function us(e){const{mt:t,p:n,o:{patchProp:a,createText:l,nextSibling:s,parentNode:i,remove:o,insert:r,createComment:c}}=e,u=(n,a,o,c,m,g=!1)=>{const v=cs(n)&&"["===n.data,b=()=>f(n,a,o,c,m,v),{type:y,ref:w,shapeFlag:x,patchFlag:k}=a,$=n.nodeType;a.el=n,-2===k&&(g=!1,a.dynamicChildren=null);let S=null;switch(y){case ks:3!==$?""===a.children?(r(a.el=l(""),i(n),n),S=n):S=b():(n.data!==a.children&&(os=!0,n.data=a.children),S=s(n));break;case $s:S=8!==$||v?b():s(n);break;case Ss:if(1===$||3===$){S=n;const e=!a.children.length;for(let t=0;t<a.staticCount;t++)e&&(a.children+=1===S.nodeType?S.outerHTML:S.data),t===a.staticCount-1&&(a.anchor=S),S=s(S);return S}S=b();break;case xs:S=v?_(n,a,o,c,m,g):b();break;default:if(1&x)S=1!==$||a.type.toLowerCase()!==n.tagName.toLowerCase()?b():d(n,a,o,c,m,g);else if(6&x){a.slotScopeIds=m;const e=i(n);if(t(a,e,null,o,c,rs(e),g),S=v?h(n):s(n),S&&cs(S)&&"teleport end"===S.data&&(S=s(S)),Wa(a)){let t;v?(t=Bs(xs),t.anchor=S?S.previousSibling:e.lastChild):t=3===n.nodeType?Hs(""):Bs("div"),t.el=n,a.component.subTree=t}}else 64&x?S=8!==$?b():a.type.hydrate(n,a,o,c,m,g,e,p):128&x&&(S=a.type.hydrate(n,a,o,c,rs(i(n)),m,g,e,u))}return null!=w&&is(w,null,c,a),S},d=(e,t,n,l,s,i)=>{i=i||!!t.dynamicChildren;const{type:r,props:c,patchFlag:u,shapeFlag:d,dirs:_}=t,f="input"===r&&_||"option"===r;if(f||-1!==u){if(_&&bl(t,null,n,"created"),c)if(f||!i||48&u)for(const t in c)(f&&t.endsWith("value")||se(t)&&!$e(t))&&a(e,t,null,c[t],!1,void 0,n);else c.onClick&&a(e,"onClick",null,c.onClick,!1,void 0,n);let r;if((r=c&&c.onVnodeBeforeMount)&&Zs(r,n,t),_&&bl(t,null,n,"beforeMount"),((r=c&&c.onVnodeMounted)||_)&&Sa((()=>{r&&Zs(r,n,t),_&&bl(t,null,n,"mounted")}),l),16&d&&(!c||!c.innerHTML&&!c.textContent)){let a=p(e.firstChild,t,e,n,l,s,i);for(;a;){os=!0;const e=a;a=a.nextSibling,o(e)}}else 8&d&&e.textContent!==t.children&&(os=!0,e.textContent=t.children)}return e.nextSibling},p=(e,t,a,l,s,i,o)=>{o=o||!!t.dynamicChildren;const r=t.children,c=r.length;for(let t=0;t<c;t++){const c=o?r[t]:r[t]=Ws(r[t]);if(e)e=u(e,c,l,s,i,o);else{if(c.type===ks&&!c.children)continue;os=!0,n(null,c,a,null,l,s,rs(a),i)}}return e},_=(e,t,n,a,l,o)=>{const{slotScopeIds:u}=t;u&&(l=l?l.concat(u):u);const d=i(e),_=p(s(e),t,d,n,a,l,o);return _&&cs(_)&&"]"===_.data?s(t.anchor=_):(os=!0,r(t.anchor=c("]"),d,_),_)},f=(e,t,a,l,r,c)=>{if(os=!0,t.el=null,c){const t=h(e);for(;;){const n=s(e);if(!n||n===t)break;o(n)}}const u=s(e),d=i(e);return o(e),n(null,t,d,u,a,l,rs(d),r),u},h=e=>{let t=0;for(;e;)if((e=s(e))&&cs(e)&&("["===e.data&&t++,"]"===e.data)){if(0===t)return s(e);t--}return e};return[(e,t)=>{if(!t.hasChildNodes())return n(null,e,t),Qn(),void(t._vnode=e);os=!1,u(t.firstChild,e,null,null,null),Qn(),t._vnode=e,os&&console.error("Hydration completed but contains mismatches.")},u]}const ds=Sa;function ps(e){return fs(e)}function _s(e){return fs(e,us)}function fs(e,t){(je||(je="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{})).__VUE__=!0;const{insert:n,remove:a,patchProp:l,createElement:s,createText:i,createComment:o,setText:r,setElementText:c,parentNode:u,nextSibling:d,setScopeId:p=ne,cloneNode:_,insertStaticContent:f}=e,h=(e,t,n,a=null,l=null,s=null,i=!1,o=null,r=!!t.dynamicChildren)=>{if(e===t)return;e&&!Fs(e,t)&&(a=z(e),F(e,l,s,!0),e=null),-2===t.patchFlag&&(r=!1,t.dynamicChildren=null);const{type:c,ref:u,shapeFlag:d}=t;switch(c){case ks:m(e,t,n,a);break;case $s:g(e,t,n,a);break;case Ss:null==e&&v(t,n,a,i);break;case xs:C(e,t,n,a,l,s,i,o,r);break;default:1&d?b(e,t,n,a,l,s,i,o,r):6&d?N(e,t,n,a,l,s,i,o,r):(64&d||128&d)&&c.process(e,t,n,a,l,s,i,o,r,V)}null!=u&&l&&is(u,e&&e.ref,s,t||e,!t)},m=(e,t,a,l)=>{if(null==e)n(t.el=i(t.children),a,l);else{const n=t.el=e.el;t.children!==e.children&&r(n,t.children)}},g=(e,t,a,l)=>{null==e?n(t.el=o(t.children||""),a,l):t.el=e.el},v=(e,t,n,a)=>{[e.el,e.anchor]=f(e.children,t,n,a,e.el,e.anchor)},b=(e,t,n,a,l,s,i,o,r)=>{i=i||"svg"===t.type,null==e?y(t,n,a,l,s,i,o,r):k(e,t,l,s,i,o,r)},y=(e,t,a,i,o,r,u,d)=>{let p,f;const{type:h,props:m,shapeFlag:g,transition:v,patchFlag:b,dirs:y}=e;if(e.el&&void 0!==_&&-1===b)p=e.el=_(e.el);else{if(p=e.el=s(e.type,r,m&&m.is,m),8&g?c(p,e.children):16&g&&x(e.children,p,null,i,o,r&&"foreignObject"!==h,u,d),y&&bl(e,null,i,"created"),m){for(const t in m)"value"===t||$e(t)||l(p,t,null,m[t],r,e.children,i,o,D);"value"in m&&l(p,"value",null,m.value),(f=m.onVnodeBeforeMount)&&Zs(f,i,e)}w(p,e,e.scopeId,u,i)}y&&bl(e,null,i,"beforeMount");const k=(!o||o&&!o.pendingBranch)&&v&&!v.persisted;k&&v.beforeEnter(p),n(p,t,a),((f=m&&m.onVnodeMounted)||k||y)&&ds((()=>{f&&Zs(f,i,e),k&&v.enter(p),y&&bl(e,null,i,"mounted")}),o)},w=(e,t,n,a,l)=>{if(n&&p(e,n),a)for(let t=0;t<a.length;t++)p(e,a[t]);if(l&&t===l.subTree){const t=l.vnode;w(e,t,t.scopeId,t.slotScopeIds,l.parent)}},x=(e,t,n,a,l,s,i,o,r=0)=>{for(let c=r;c<e.length;c++){const r=e[c]=o?Js(e[c]):Ws(e[c]);h(null,r,t,n,a,l,s,i,o)}},k=(e,t,n,a,s,i,o)=>{const r=t.el=e.el;let{patchFlag:u,dynamicChildren:d,dirs:p}=t;u|=16&e.patchFlag;const _=e.props||ee,f=t.props||ee;let h;n&&hs(n,!1),(h=f.onVnodeBeforeUpdate)&&Zs(h,n,t,e),p&&bl(t,e,n,"beforeUpdate"),n&&hs(n,!0);const m=s&&"foreignObject"!==t.type;if(d?$(e.dynamicChildren,d,r,n,a,m,i):o||I(e,t,r,null,n,a,m,i,!1),u>0){if(16&u)S(r,t,_,f,n,a,s);else if(2&u&&_.class!==f.class&&l(r,"class",null,f.class,s),4&u&&l(r,"style",_.style,f.style,s),8&u){const i=t.dynamicProps;for(let t=0;t<i.length;t++){const o=i[t],c=_[o],u=f[o];u===c&&"value"!==o||l(r,o,c,u,s,e.children,n,a,D)}}1&u&&e.children!==t.children&&c(r,t.children)}else o||null!=d||S(r,t,_,f,n,a,s);((h=f.onVnodeUpdated)||p)&&ds((()=>{h&&Zs(h,n,t,e),p&&bl(t,e,n,"updated")}),a)},$=(e,t,n,a,l,s,i)=>{for(let o=0;o<t.length;o++){const r=e[o],c=t[o],d=r.el&&(r.type===xs||!Fs(r,c)||70&r.shapeFlag)?u(r.el):n;h(r,c,d,null,a,l,s,i,!0)}},S=(e,t,n,a,s,i,o)=>{if(n!==a){for(const r in a){if($e(r))continue;const c=a[r],u=n[r];c!==u&&"value"!==r&&l(e,r,u,c,o,t.children,s,i,D)}if(n!==ee)for(const r in n)$e(r)||r in a||l(e,r,n[r],null,o,t.children,s,i,D);"value"in a&&l(e,"value",n.value,a.value)}},C=(e,t,a,l,s,o,r,c,u)=>{const d=t.el=e?e.el:i(""),p=t.anchor=e?e.anchor:i("");let{patchFlag:_,dynamicChildren:f,slotScopeIds:h}=t;h&&(c=c?c.concat(h):h),null==e?(n(d,a,l),n(p,a,l),x(t.children,a,p,s,o,r,c,u)):_>0&&64&_&&f&&e.dynamicChildren?($(e.dynamicChildren,f,a,s,o,r,c),(null!=t.key||s&&t===s.subTree)&&ms(e,t,!0)):I(e,t,a,p,s,o,r,c,u)},N=(e,t,n,a,l,s,i,o,r)=>{t.slotScopeIds=o,null==e?512&t.shapeFlag?l.ctx.activate(t,n,a,i,r):A(t,n,a,l,s,i,r):E(e,t,r)},A=(e,t,n,a,l,s,i)=>{const o=e.component=function(e,t,n){const a=e.type,l=(t?t.appContext:e.appContext)||Qs,s={uid:ei++,vnode:e,type:a,parent:t,appContext:l,root:null,next:null,subTree:null,effect:null,update:null,scope:new Re(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:t?t.provides:Object.create(l.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:Kl(a,l),emitsOptions:ia(a,l),emit:null,emitted:null,propsDefaults:ee,inheritAttrs:a.inheritAttrs,ctx:ee,data:ee,props:ee,attrs:ee,slots:ee,refs:ee,setupState:ee,setupContext:null,suspense:n,suspenseId:n?n.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return s.ctx={_:s},s.root=t?t.root:s,s.emit=sa.bind(null,s),e.ce&&e.ce(s),s}(e,a,l);if(Xa(e)&&(o.ctx.renderer=V),function(e,t=!1){ri=t;const{props:n,children:a}=e.vnode,l=si(e);(function(e,t,n,a=!1){const l={},s={};Ue(s,Ls,1),e.propsDefaults=Object.create(null),Hl(e,t,l,s);for(const t in e.propsOptions[0])t in l||(l[t]=void 0);e.props=n?a?l:Xt(l):e.type.props?l:s,e.attrs=s})(e,n,l,t),((e,t)=>{if(32&e.vnode.shapeFlag){const n=t._;n?(e.slots=sn(t),Ue(t,"_",n)):ts(t,e.slots={})}else e.slots={},t&&ns(e,t);Ue(e.slots,Ls,1)})(e,a),l&&function(e,t){const n=e.type;e.accessCache=Object.create(null),e.proxy=on(new Proxy(e.ctx,Ml));const{setup:a}=n;if(a){const n=e.setupContext=a.length>1?_i(e):null;ai(e),st();const l=Pn(a,e,0,[e.props,n]);if(it(),li(),be(l)){if(l.then(li,li),t)return l.then((n=>{ci(e,n,t)})).catch((t=>{Mn(t,e,0)}));e.asyncDep=l}else ci(e,l,t)}else pi(e,t)}(e,t),ri=!1}(o),o.asyncDep){if(l&&l.registerDep(o,T),!e.el){const e=o.subTree=Bs($s);g(null,e,t,n)}}else T(o,e,t,n,l,s,i)},E=(e,t,n)=>{const a=t.component=e.component;if(function(e,t,n){const{props:a,children:l,component:s}=e,{props:i,children:o,patchFlag:r}=t,c=s.emitsOptions;if(t.dirs||t.transition)return!0;if(!(n&&r>=0))return!(!l&&!o||o&&o.$stable)||a!==i&&(a?!i||va(a,i,c):!!i);if(1024&r)return!0;if(16&r)return a?va(a,i,c):!!i;if(8&r){const e=t.dynamicProps;for(let t=0;t<e.length;t++){const n=e[t];if(i[n]!==a[n]&&!oa(c,n))return!0}}return!1}(e,t,n)){if(a.asyncDep&&!a.asyncResolved)return void P(a,t,n);a.next=t,function(e){const t=Fn.indexOf(e);t>jn&&Fn.splice(t,1)}(a.update),a.update()}else t.el=e.el,a.vnode=t},T=(e,t,n,a,l,s,i)=>{const o=e.effect=new Qe((()=>{if(e.isMounted){let t,{next:n,bu:a,u:o,parent:r,vnode:c}=e,d=n;hs(e,!1),n?(n.el=c.el,P(e,n,i)):n=c,a&&Oe(a),(t=n.props&&n.props.onVnodeBeforeUpdate)&&Zs(t,r,n,c),hs(e,!0);const p=ha(e),_=e.subTree;e.subTree=p,h(_,p,u(_.el),z(_),e,l,s),n.el=p.el,null===d&&ba(e,p.el),o&&ds(o,l),(t=n.props&&n.props.onVnodeUpdated)&&ds((()=>Zs(t,r,n,c)),l)}else{let i;const{el:o,props:r}=t,{bm:c,m:u,parent:d}=e,p=Wa(t);if(hs(e,!1),c&&Oe(c),!p&&(i=r&&r.onVnodeBeforeMount)&&Zs(i,d,t),hs(e,!0),o&&H){const n=()=>{e.subTree=ha(e),H(o,e.subTree,e,l,null)};p?t.type.__asyncLoader().then((()=>!e.isUnmounted&&n())):n()}else{const i=e.subTree=ha(e);h(null,i,n,a,e,l,s),t.el=i.el}if(u&&ds(u,l),!p&&(i=r&&r.onVnodeMounted)){const e=t;ds((()=>Zs(i,d,e)),l)}(256&t.shapeFlag||d&&Wa(d.vnode)&&256&d.vnode.shapeFlag)&&e.a&&ds(e.a,l),e.isMounted=!0,t=n=a=null}}),(()=>Wn(r)),e.scope),r=e.update=()=>o.run();r.id=e.uid,hs(e,!0),r()},P=(e,t,n)=>{t.component=e;const a=e.vnode.props;e.vnode=t,e.next=null,function(e,t,n,a){const{props:l,attrs:s,vnode:{patchFlag:i}}=e,o=sn(l),[r]=e.propsOptions;let c=!1;if(!(a||i>0)||16&i){let a;Hl(e,t,l,s)&&(c=!0);for(const s in o)t&&(ue(t,s)||(a=Te(s))!==s&&ue(t,a))||(r?!n||void 0===n[s]&&void 0===n[a]||(l[s]=Gl(r,o,s,void 0,e,!0)):delete l[s]);if(s!==o)for(const e in s)t&&ue(t,e)||(delete s[e],c=!0)}else if(8&i){const n=e.vnode.dynamicProps;for(let a=0;a<n.length;a++){let i=n[a];if(oa(e.emitsOptions,i))continue;const u=t[i];if(r)if(ue(s,i))u!==s[i]&&(s[i]=u,c=!0);else{const t=Ae(i);l[t]=Gl(r,o,t,u,e,!1)}else u!==s[i]&&(s[i]=u,c=!0)}}c&&ct(e,"set","$attrs")}(e,t.props,a,n),((e,t,n)=>{const{vnode:a,slots:l}=e;let s=!0,i=ee;if(32&a.shapeFlag){const e=t._;e?n&&1===e?s=!1:(oe(l,t),n||1!==e||delete l._):(s=!t.$stable,ts(t,l)),i=t}else t&&(ns(e,t),i={default:1});if(s)for(const e in l)Zl(e)||e in i||delete l[e]})(e,t.children,n),st(),Zn(void 0,e.update),it()},I=(e,t,n,a,l,s,i,o,r=!1)=>{const u=e&&e.children,d=e?e.shapeFlag:0,p=t.children,{patchFlag:_,shapeFlag:f}=t;if(_>0){if(128&_)return void O(u,p,n,a,l,s,i,o,r);if(256&_)return void M(u,p,n,a,l,s,i,o,r)}8&f?(16&d&&D(u,l,s),p!==u&&c(n,p)):16&d?16&f?O(u,p,n,a,l,s,i,o,r):D(u,l,s,!0):(8&d&&c(n,""),16&f&&x(p,n,a,l,s,i,o,r))},M=(e,t,n,a,l,s,i,o,r)=>{const c=(e=e||te).length,u=(t=t||te).length,d=Math.min(c,u);let p;for(p=0;p<d;p++){const a=t[p]=r?Js(t[p]):Ws(t[p]);h(e[p],a,n,null,l,s,i,o,r)}c>u?D(e,l,s,!0,!1,d):x(t,n,a,l,s,i,o,r,d)},O=(e,t,n,a,l,s,i,o,r)=>{let c=0;const u=t.length;let d=e.length-1,p=u-1;for(;c<=d&&c<=p;){const a=e[c],u=t[c]=r?Js(t[c]):Ws(t[c]);if(!Fs(a,u))break;h(a,u,n,null,l,s,i,o,r),c++}for(;c<=d&&c<=p;){const a=e[d],c=t[p]=r?Js(t[p]):Ws(t[p]);if(!Fs(a,c))break;h(a,c,n,null,l,s,i,o,r),d--,p--}if(c>d){if(c<=p){const e=p+1,d=e<u?t[e].el:a;for(;c<=p;)h(null,t[c]=r?Js(t[c]):Ws(t[c]),n,d,l,s,i,o,r),c++}}else if(c>p)for(;c<=d;)F(e[c],l,s,!0),c++;else{const _=c,f=c,m=new Map;for(c=f;c<=p;c++){const e=t[c]=r?Js(t[c]):Ws(t[c]);null!=e.key&&m.set(e.key,c)}let g,v=0;const b=p-f+1;let y=!1,w=0;const x=new Array(b);for(c=0;c<b;c++)x[c]=0;for(c=_;c<=d;c++){const a=e[c];if(v>=b){F(a,l,s,!0);continue}let u;if(null!=a.key)u=m.get(a.key);else for(g=f;g<=p;g++)if(0===x[g-f]&&Fs(a,t[g])){u=g;break}void 0===u?F(a,l,s,!0):(x[u-f]=c+1,u>=w?w=u:y=!0,h(a,t[u],n,null,l,s,i,o,r),v++)}const k=y?function(e){const t=e.slice(),n=[0];let a,l,s,i,o;const r=e.length;for(a=0;a<r;a++){const r=e[a];if(0!==r){if(l=n[n.length-1],e[l]<r){t[a]=l,n.push(a);continue}for(s=0,i=n.length-1;s<i;)o=s+i>>1,e[n[o]]<r?s=o+1:i=o;r<e[n[s]]&&(s>0&&(t[a]=n[s-1]),n[s]=a)}}for(s=n.length,i=n[s-1];s-- >0;)n[s]=i,i=t[i];return n}(x):te;for(g=k.length-1,c=b-1;c>=0;c--){const e=f+c,d=t[e],p=e+1<u?t[e+1].el:a;0===x[c]?h(null,d,n,p,l,s,i,o,r):y&&(g<0||c!==k[g]?U(d,n,p,2):g--)}}},U=(e,t,a,l,s=null)=>{const{el:i,type:o,transition:r,children:c,shapeFlag:u}=e;if(6&u)U(e.component.subTree,t,a,l);else if(128&u)e.suspense.move(t,a,l);else if(64&u)o.move(e,t,a,V);else if(o!==xs)if(o!==Ss)if(2!==l&&1&u&&r)if(0===l)r.beforeEnter(i),n(i,t,a),ds((()=>r.enter(i)),s);else{const{leave:e,delayLeave:l,afterLeave:s}=r,o=()=>n(i,t,a),c=()=>{e(i,(()=>{o(),s&&s()}))};l?l(i,o,c):c()}else n(i,t,a);else(({el:e,anchor:t},a,l)=>{let s;for(;e&&e!==t;)s=d(e),n(e,a,l),e=s;n(t,a,l)})(e,t,a);else{n(i,t,a);for(let e=0;e<c.length;e++)U(c[e],t,a,l);n(e.anchor,t,a)}},F=(e,t,n,a=!1,l=!1)=>{const{type:s,props:i,ref:o,children:r,dynamicChildren:c,shapeFlag:u,patchFlag:d,dirs:p}=e;if(null!=o&&is(o,null,n,e,!0),256&u)return void t.ctx.deactivate(e);const _=1&u&&p,f=!Wa(e);let h;if(f&&(h=i&&i.onVnodeBeforeUnmount)&&Zs(h,t,e),6&u)R(e.component,n,a);else{if(128&u)return void e.suspense.unmount(n,a);_&&bl(e,null,t,"beforeUnmount"),64&u?e.type.remove(e,t,n,l,V,a):c&&(s!==xs||d>0&&64&d)?D(c,t,n,!1,!0):(s===xs&&384&d||!l&&16&u)&&D(r,t,n),a&&j(e)}(f&&(h=i&&i.onVnodeUnmounted)||_)&&ds((()=>{h&&Zs(h,t,e),_&&bl(e,null,t,"unmounted")}),n)},j=e=>{const{type:t,el:n,anchor:l,transition:s}=e;if(t===xs)return void L(n,l);if(t===Ss)return void(({el:e,anchor:t})=>{let n;for(;e&&e!==t;)n=d(e),a(e),e=n;a(t)})(e);const i=()=>{a(n),s&&!s.persisted&&s.afterLeave&&s.afterLeave()};if(1&e.shapeFlag&&s&&!s.persisted){const{leave:t,delayLeave:a}=s,l=()=>t(n,i);a?a(e.el,i,l):l()}else i()},L=(e,t)=>{let n;for(;e!==t;)n=d(e),a(e),e=n;a(t)},R=(e,t,n)=>{const{bum:a,scope:l,update:s,subTree:i,um:o}=e;a&&Oe(a),l.stop(),s&&(s.active=!1,F(i,e,t,n)),o&&ds(o,t),ds((()=>{e.isUnmounted=!0}),t),t&&t.pendingBranch&&!t.isUnmounted&&e.asyncDep&&!e.asyncResolved&&e.suspenseId===t.pendingId&&(t.deps--,0===t.deps&&t.resolve())},D=(e,t,n,a=!1,l=!1,s=0)=>{for(let i=s;i<e.length;i++)F(e[i],t,n,a,l)},z=e=>6&e.shapeFlag?z(e.component.subTree):128&e.shapeFlag?e.suspense.next():d(e.anchor||e.el),B=(e,t,n)=>{null==e?t._vnode&&F(t._vnode,null,null,!0):h(t._vnode||null,e,t,null,null,null,n),Qn(),t._vnode=e},V={p:h,um:F,m:U,r:j,mt:A,mc:x,pc:I,pbc:$,n:z,o:e};let q,H;return t&&([q,H]=t(V)),{render:B,hydrate:q,createApp:ss(B,q)}}function hs({effect:e,update:t},n){e.allowRecurse=t.allowRecurse=n}function ms(e,t,n=!1){const a=e.children,l=t.children;if(de(a)&&de(l))for(let e=0;e<a.length;e++){const t=a[e];let s=l[e];1&s.shapeFlag&&!s.dynamicChildren&&((s.patchFlag<=0||32===s.patchFlag)&&(s=l[e]=Js(l[e]),s.el=t.el),n||ms(t,s))}}const gs=e=>e&&(e.disabled||""===e.disabled),vs=e=>"undefined"!=typeof SVGElement&&e instanceof SVGElement,bs=(e,t)=>{const n=e&&e.to;return me(n)?t?t(n):null:n};function ys(e,t,n,{o:{insert:a},m:l},s=2){0===s&&a(e.targetAnchor,t,n);const{el:i,anchor:o,shapeFlag:r,children:c,props:u}=e,d=2===s;if(d&&a(i,t,n),(!d||gs(u))&&16&r)for(let e=0;e<c.length;e++)l(c[e],t,n,2);d&&a(o,t,n)}const ws={__isTeleport:!0,process(e,t,n,a,l,s,i,o,r,c){const{mc:u,pc:d,pbc:p,o:{insert:_,querySelector:f,createText:h}}=c,m=gs(t.props);let{shapeFlag:g,children:v,dynamicChildren:b}=t;if(null==e){const e=t.el=h(""),c=t.anchor=h("");_(e,n,a),_(c,n,a);const d=t.target=bs(t.props,f),p=t.targetAnchor=h("");d&&(_(p,d),i=i||vs(d));const b=(e,t)=>{16&g&&u(v,e,t,l,s,i,o,r)};m?b(n,c):d&&b(d,p)}else{t.el=e.el;const a=t.anchor=e.anchor,u=t.target=e.target,_=t.targetAnchor=e.targetAnchor,h=gs(e.props),g=h?n:u,v=h?a:_;if(i=i||vs(u),b?(p(e.dynamicChildren,b,g,l,s,i,o),ms(e,t,!0)):r||d(e,t,g,v,l,s,i,o,!1),m)h||ys(t,n,a,c,1);else if((t.props&&t.props.to)!==(e.props&&e.props.to)){const e=t.target=bs(t.props,f);e&&ys(t,e,null,c,0)}else h&&ys(t,u,_,c,1)}},remove(e,t,n,a,{um:l,o:{remove:s}},i){const{shapeFlag:o,children:r,anchor:c,targetAnchor:u,target:d,props:p}=e;if(d&&s(u),(i||!gs(p))&&(s(c),16&o))for(let e=0;e<r.length;e++){const a=r[e];l(a,t,n,!0,!!a.dynamicChildren)}},move:ys,hydrate:function(e,t,n,a,l,s,{o:{nextSibling:i,parentNode:o,querySelector:r}},c){const u=t.target=bs(t.props,r);if(u){const r=u._lpa||u.firstChild;if(16&t.shapeFlag)if(gs(t.props))t.anchor=c(i(e),t,o(e),n,a,l,s),t.targetAnchor=r;else{t.anchor=i(e);let o=r;for(;o;)if(o=i(o),o&&8===o.nodeType&&"teleport anchor"===o.data){t.targetAnchor=o,u._lpa=t.targetAnchor&&i(t.targetAnchor);break}c(r,t,u,n,a,l,s)}}return t.anchor&&i(t.anchor)}},xs=Symbol(void 0),ks=Symbol(void 0),$s=Symbol(void 0),Ss=Symbol(void 0),Cs=[];let Ns=null;function As(e=!1){Cs.push(Ns=e?null:[])}function Es(){Cs.pop(),Ns=Cs[Cs.length-1]||null}let Ts=1;function Ps(e){Ts+=e}function Is(e){return e.dynamicChildren=Ts>0?Ns||te:null,Es(),Ts>0&&Ns&&Ns.push(e),e}function Ms(e,t,n,a,l,s){return Is(zs(e,t,n,a,l,s,!0))}function Os(e,t,n,a,l){return Is(Bs(e,t,n,a,l,!0))}function Us(e){return!!e&&!0===e.__v_isVNode}function Fs(e,t){return e.type===t.type&&e.key===t.key}function js(e){}const Ls="__vInternal",Rs=({key:e})=>null!=e?e:null,Ds=({ref:e,ref_key:t,ref_for:n})=>null!=e?me(e)||pn(e)||he(e)?{i:ra,r:e,k:t,f:!!n}:e:null;function zs(e,t=null,n=null,a=0,l=null,s=(e===xs?0:1),i=!1,o=!1){const r={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&Rs(t),ref:t&&Ds(t),scopeId:ca,slotScopeIds:null,children:n,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:s,patchFlag:a,dynamicProps:l,dynamicChildren:null,appContext:null};return o?(Ys(r,n),128&s&&e.normalize(r)):n&&(r.shapeFlag|=me(n)?8:16),Ts>0&&!i&&Ns&&(r.patchFlag>0||6&s)&&32!==r.patchFlag&&Ns.push(r),r}const Bs=function(e,t=null,n=null,a=0,l=null,s=!1){if(e&&e!==wl||(e=$s),Us(e)){const a=qs(e,t,!0);return n&&Ys(a,n),Ts>0&&!s&&Ns&&(6&a.shapeFlag?Ns[Ns.indexOf(e)]=a:Ns.push(a)),a.patchFlag|=-2,a}var i;if(he(i=e)&&"__vccOpts"in i&&(e=e.__vccOpts),t){t=Vs(t);let{class:e,style:n}=t;e&&!me(e)&&(t.class=H(e)),ve(n)&&(ln(n)&&!de(n)&&(n=oe({},n)),t.style=z(n))}return zs(e,t,n,a,l,me(e)?1:ya(e)?128:(e=>e.__isTeleport)(e)?64:ve(e)?4:he(e)?2:0,s,!0)};function Vs(e){return e?ln(e)||Ls in e?oe({},e):e:null}function qs(e,t,n=!1){const{props:a,ref:l,patchFlag:s,children:i}=e,o=t?Xs(a||{},t):a;return{__v_isVNode:!0,__v_skip:!0,type:e.type,props:o,key:o&&Rs(o),ref:t&&t.ref?n&&l?de(l)?l.concat(Ds(t)):[l,Ds(t)]:Ds(t):l,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:i,target:e.target,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==xs?-1===s?16:16|s:s,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:e.transition,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&qs(e.ssContent),ssFallback:e.ssFallback&&qs(e.ssFallback),el:e.el,anchor:e.anchor}}function Hs(e=" ",t=0){return Bs(ks,null,e,t)}function Gs(e,t){const n=Bs(Ss,null,e);return n.staticCount=t,n}function Ks(e="",t=!1){return t?(As(),Os($s,null,e)):Bs($s,null,e)}function Ws(e){return null==e||"boolean"==typeof e?Bs($s):de(e)?Bs(xs,null,e.slice()):"object"==typeof e?Js(e):Bs(ks,null,String(e))}function Js(e){return null===e.el||e.memo?e:qs(e)}function Ys(e,t){let n=0;const{shapeFlag:a}=e;if(null==t)t=null;else if(de(t))n=16;else if("object"==typeof t){if(65&a){const n=t.default;return void(n&&(n._c&&(n._d=!1),Ys(e,n()),n._c&&(n._d=!0)))}{n=32;const a=t._;a||Ls in t?3===a&&ra&&(1===ra.slots._?t._=1:(t._=2,e.patchFlag|=1024)):t._ctx=ra}}else he(t)?(t={default:t,_ctx:ra},n=32):(t=String(t),64&a?(n=16,t=[Hs(t)]):n=8);e.children=t,e.shapeFlag|=n}function Xs(...e){const t={};for(let n=0;n<e.length;n++){const a=e[n];for(const e in a)if("class"===e)t.class!==a.class&&(t.class=H([t.class,a.class]));else if("style"===e)t.style=z([t.style,a.style]);else if(se(e)){const n=t[e],l=a[e];!l||n===l||de(n)&&n.includes(l)||(t[e]=n?[].concat(n,l):l)}else""!==e&&(t[e]=a[e])}return t}function Zs(e,t,n,a=null){In(e,t,7,[n,a])}const Qs=as();let ei=0,ti=null;const ni=()=>ti||ra,ai=e=>{ti=e,e.scope.on()},li=()=>{ti&&ti.scope.off(),ti=null};function si(e){return 4&e.vnode.shapeFlag}let ii,oi,ri=!1;function ci(e,t,n){he(t)?e.render=t:ve(t)&&(e.setupState=yn(t)),pi(e,n)}function ui(e){ii=e,oi=e=>{e.render._rc&&(e.withProxy=new Proxy(e.ctx,Ol))}}const di=()=>!ii;function pi(e,t,n){const a=e.type;if(!e.render){if(!t&&ii&&!a.render){const t=a.template;if(t){const{isCustomElement:n,compilerOptions:l}=e.appContext.config,{delimiters:s,compilerOptions:i}=a,o=oe(oe({isCustomElement:n,delimiters:s},l),i);a.render=ii(t,o)}}e.render=a.render||ne,oi&&oi(e)}ai(e),st(),function(e){const t=Ll(e),n=e.proxy,a=e.ctx;Ul=!1,t.beforeCreate&&Fl(t.beforeCreate,e,"bc");const{data:l,computed:s,methods:i,watch:o,provide:r,inject:c,created:u,beforeMount:d,mounted:p,beforeUpdate:_,updated:f,activated:h,deactivated:m,beforeUnmount:g,unmounted:v,render:b,renderTracked:y,renderTriggered:w,errorCaptured:x,serverPrefetch:k,expose:$,inheritAttrs:S,components:C,directives:N}=t;if(c&&function(e,t,n=ne,a=!1){de(e)&&(e=Bl(e));for(const n in e){const l=e[n];let s;s=ve(l)?"default"in l?Aa(l.from||n,l.default,!0):Aa(l.from||n):Aa(l),pn(s)&&a?Object.defineProperty(t,n,{enumerable:!0,configurable:!0,get:()=>s.value,set:e=>s.value=e}):t[n]=s}}(c,a,null,e.appContext.config.unwrapInjectedRef),i)for(const e in i){const t=i[e];he(t)&&(a[e]=t.bind(n))}if(l){const t=l.call(n,n);ve(t)&&(e.data=Yt(t))}if(Ul=!0,s)for(const e in s){const t=s[e],l=he(t)?t.bind(n,n):he(t.get)?t.get.bind(n,n):ne,i=!he(t)&&he(t.set)?t.set.bind(n):ne,o=vi({get:l,set:i});Object.defineProperty(a,e,{enumerable:!0,configurable:!0,get:()=>o.value,set:e=>o.value=e})}if(o)for(const e in o)jl(o[e],a,n,e);if(r){const e=he(r)?r.call(n):r;Reflect.ownKeys(e).forEach((t=>{Na(t,e[t])}))}function A(e,t){de(t)?t.forEach((t=>e(t.bind(n)))):t&&e(t.bind(n))}if(u&&Fl(u,e,"c"),A(rl,d),A(cl,p),A(ul,_),A(dl,f),A(el,h),A(tl,m),A(gl,x),A(ml,y),A(hl,w),A(pl,g),A(_l,v),A(fl,k),de($))if($.length){const t=e.exposed||(e.exposed={});$.forEach((e=>{Object.defineProperty(t,e,{get:()=>n[e],set:t=>n[e]=t})}))}else e.exposed||(e.exposed={});b&&e.render===ne&&(e.render=b),null!=S&&(e.inheritAttrs=S),C&&(e.components=C),N&&(e.directives=N)}(e),it(),li()}function _i(e){let t;return{get attrs(){return t||(t=function(e){return new Proxy(e.attrs,{get:(t,n)=>(ot(e,0,"$attrs"),t[n])})}(e))},slots:e.slots,emit:e.emit,expose:t=>{e.exposed=t||{}}}}function fi(e){if(e.exposed)return e.exposeProxy||(e.exposeProxy=new Proxy(yn(on(e.exposed)),{get:(t,n)=>n in t?t[n]:n in Il?Il[n](e):void 0}))}const hi=/(?:^|[-_])(\w)/g;function mi(e,t=!0){return he(e)?e.displayName||e.name:e.name||t&&e.__name}function gi(e,t,n=!1){let a=mi(t);if(!a&&t.__file){const e=t.__file.match(/([^/\\]+)\.\w+$/);e&&(a=e[1])}if(!a&&e&&e.parent){const n=e=>{for(const n in e)if(e[n]===t)return n};a=n(e.components||e.parent.type.components)||n(e.appContext.components)}return a?a.replace(hi,(e=>e.toUpperCase())).replace(/[-_]/g,""):n?"App":"Anonymous"}const vi=(e,t)=>function(e,t,n=!1){let a,l;const s=he(e);return s?(a=e,l=ne):(a=e.get,l=e.set),new Cn(a,l,s||!l,n)}(e,0,ri);function bi(){return null}function yi(){return null}function wi(e){}function xi(e,t){return null}function ki(){return Si().slots}function $i(){return Si().attrs}function Si(){const e=ni();return e.setupContext||(e.setupContext=_i(e))}function Ci(e,t){const n=de(e)?e.reduce(((e,t)=>(e[t]={},e)),{}):e;for(const e in t){const a=n[e];a?de(a)||he(a)?n[e]={type:a,default:t[e]}:a.default=t[e]:null===a&&(n[e]={default:t[e]})}return n}function Ni(e,t){const n={};for(const a in e)t.includes(a)||Object.defineProperty(n,a,{enumerable:!0,get:()=>e[a]});return n}function Ai(e){const t=ni();let n=e();return li(),be(n)&&(n=n.catch((e=>{throw ai(t),e}))),[n,()=>ai(t)]}function Ei(e,t,n){const a=arguments.length;return 2===a?ve(t)&&!de(t)?Us(t)?Bs(e,null,[t]):Bs(e,t):Bs(e,null,t):(a>3?n=Array.prototype.slice.call(arguments,2):3===a&&Us(n)&&(n=[n]),Bs(e,t,n))}const Ti=Symbol(""),Pi=()=>{{const e=Aa(Ti);return e||An("Server rendering context not provided. Make sure to only call useSSRContext() conditionally in the server build."),e}};function Ii(){}function Mi(e,t,n,a){const l=n[a];if(l&&Oi(l,e))return l;const s=t();return s.memo=e.slice(),n[a]=s}function Oi(e,t){const n=e.memo;if(n.length!=t.length)return!1;for(let e=0;e<n.length;e++)if(Me(n[e],t[e]))return!1;return Ts>0&&Ns&&Ns.push(e),!0}const Ui="3.2.37",Fi="undefined"!=typeof document?document:null,ji=Fi&&Fi.createElement("template"),Li={insert:(e,t,n)=>{t.insertBefore(e,n||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,n,a)=>{const l=t?Fi.createElementNS("http://www.w3.org/2000/svg",e):Fi.createElement(e,n?{is:n}:void 0);return"select"===e&&a&&null!=a.multiple&&l.setAttribute("multiple",a.multiple),l},createText:e=>Fi.createTextNode(e),createComment:e=>Fi.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>Fi.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},cloneNode(e){const t=e.cloneNode(!0);return"_value"in e&&(t._value=e._value),t},insertStaticContent(e,t,n,a,l,s){const i=n?n.previousSibling:t.lastChild;if(l&&(l===s||l.nextSibling))for(;t.insertBefore(l.cloneNode(!0),n),l!==s&&(l=l.nextSibling););else{ji.innerHTML=a?`<svg>${e}</svg>`:e;const l=ji.content;if(a){const e=l.firstChild;for(;e.firstChild;)l.appendChild(e.firstChild);l.removeChild(e)}t.insertBefore(l,n)}return[i?i.nextSibling:t.firstChild,n?n.previousSibling:t.lastChild]}},Ri=/\s*!important$/;function Di(e,t,n){if(de(n))n.forEach((n=>Di(e,t,n)));else if(null==n&&(n=""),t.startsWith("--"))e.setProperty(t,n);else{const a=function(e,t){const n=Bi[t];if(n)return n;let a=Ae(t);if("filter"!==a&&a in e)return Bi[t]=a;a=Pe(a);for(let n=0;n<zi.length;n++){const l=zi[n]+a;if(l in e)return Bi[t]=l}return t}(e,t);Ri.test(n)?e.setProperty(Te(a),n.replace(Ri,""),"important"):e[a]=n}}const zi=["Webkit","Moz","ms"],Bi={},Vi="http://www.w3.org/1999/xlink",[qi,Hi]=(()=>{let e=Date.now,t=!1;if("undefined"!=typeof window){Date.now()>document.createEvent("Event").timeStamp&&(e=performance.now.bind(performance));const n=navigator.userAgent.match(/firefox\/(\d+)/i);t=!!(n&&Number(n[1])<=53)}return[e,t]})();let Gi=0;const Ki=Promise.resolve(),Wi=()=>{Gi=0};function Ji(e,t,n,a){e.addEventListener(t,n,a)}const Yi=/(?:Once|Passive|Capture)$/,Xi=/^on[a-z]/;function Zi(e,t){const n=Ka(e);class a extends to{constructor(e){super(n,e,t)}}return a.def=n,a}const Qi=e=>Zi(e,tr),eo="undefined"!=typeof HTMLElement?HTMLElement:class{};class to extends eo{constructor(e,t={},n){super(),this._def=e,this._props=t,this._instance=null,this._connected=!1,this._resolved=!1,this._numberProps=null,this.shadowRoot&&n?n(this._createVNode(),this.shadowRoot):this.attachShadow({mode:"open"})}connectedCallback(){this._connected=!0,this._instance||this._resolveDef()}disconnectedCallback(){this._connected=!1,Kn((()=>{this._connected||(er(null,this.shadowRoot),this._instance=null)}))}_resolveDef(){if(this._resolved)return;this._resolved=!0;for(let e=0;e<this.attributes.length;e++)this._setAttr(this.attributes[e].name);new MutationObserver((e=>{for(const t of e)this._setAttr(t.attributeName)})).observe(this,{attributes:!0});const e=e=>{const{props:t,styles:n}=e,a=!de(t),l=t?a?Object.keys(t):t:[];let s;if(a)for(const e in this._props){const n=t[e];(n===Number||n&&n.type===Number)&&(this._props[e]=Fe(this._props[e]),(s||(s=Object.create(null)))[e]=!0)}this._numberProps=s;for(const e of Object.keys(this))"_"!==e[0]&&this._setProp(e,this[e],!0,!1);for(const e of l.map(Ae))Object.defineProperty(this,e,{get(){return this._getProp(e)},set(t){this._setProp(e,t)}});this._applyStyles(n),this._update()},t=this._def.__asyncLoader;t?t().then(e):e(this._def)}_setAttr(e){let t=this.getAttribute(e);this._numberProps&&this._numberProps[e]&&(t=Fe(t)),this._setProp(Ae(e),t,!1)}_getProp(e){return this._props[e]}_setProp(e,t,n=!0,a=!0){t!==this._props[e]&&(this._props[e]=t,a&&this._instance&&this._update(),n&&(!0===t?this.setAttribute(Te(e),""):"string"==typeof t||"number"==typeof t?this.setAttribute(Te(e),t+""):t||this.removeAttribute(Te(e))))}_update(){er(this._createVNode(),this.shadowRoot)}_createVNode(){const e=Bs(this._def,oe({},this._props));return this._instance||(e.ce=e=>{this._instance=e,e.isCE=!0,e.emit=(e,...t)=>{this.dispatchEvent(new CustomEvent(e,{detail:t}))};let t=this;for(;t=t&&(t.parentNode||t.host);)if(t instanceof to){e.parent=t._instance;break}}),e}_applyStyles(e){e&&e.forEach((e=>{const t=document.createElement("style");t.textContent=e,this.shadowRoot.appendChild(t)}))}}function no(e="$style"){{const t=ni();if(!t)return ee;const n=t.type.__cssModules;if(!n)return ee;return n[e]||ee}}function ao(e){const t=ni();if(!t)return;const n=()=>lo(t.subTree,e(t.proxy));Ta(n),cl((()=>{const e=new MutationObserver(n);e.observe(t.subTree.el.parentNode,{childList:!0}),_l((()=>e.disconnect()))}))}function lo(e,t){if(128&e.shapeFlag){const n=e.suspense;e=n.activeBranch,n.pendingBranch&&!n.isHydrating&&n.effects.push((()=>{lo(n.activeBranch,t)}))}for(;e.component;)e=e.component.subTree;if(1&e.shapeFlag&&e.el)so(e.el,t);else if(e.type===xs)e.children.forEach((e=>lo(e,t)));else if(e.type===Ss){let{el:n,anchor:a}=e;for(;n&&(so(n,t),n!==a);)n=n.nextSibling}}function so(e,t){if(1===e.nodeType){const n=e.style;for(const e in t)n.setProperty(`--${e}`,t[e])}}const io=(e,{slots:t})=>Ei(Da,po(e),t);io.displayName="Transition";const oo={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},ro=io.props=oe({},Da.props,oo),co=(e,t=[])=>{de(e)?e.forEach((e=>e(...t))):e&&e(...t)},uo=e=>!!e&&(de(e)?e.some((e=>e.length>1)):e.length>1);function po(e){const t={};for(const n in e)n in oo||(t[n]=e[n]);if(!1===e.css)return t;const{name:n="v",type:a,duration:l,enterFromClass:s=`${n}-enter-from`,enterActiveClass:i=`${n}-enter-active`,enterToClass:o=`${n}-enter-to`,appearFromClass:r=s,appearActiveClass:c=i,appearToClass:u=o,leaveFromClass:d=`${n}-leave-from`,leaveActiveClass:p=`${n}-leave-active`,leaveToClass:_=`${n}-leave-to`}=e,f=function(e){if(null==e)return null;if(ve(e))return[_o(e.enter),_o(e.leave)];{const t=_o(e);return[t,t]}}(l),h=f&&f[0],m=f&&f[1],{onBeforeEnter:g,onEnter:v,onEnterCancelled:b,onLeave:y,onLeaveCancelled:w,onBeforeAppear:x=g,onAppear:k=v,onAppearCancelled:$=b}=t,S=(e,t,n)=>{ho(e,t?u:o),ho(e,t?c:i),n&&n()},C=(e,t)=>{e._isLeaving=!1,ho(e,d),ho(e,_),ho(e,p),t&&t()},N=e=>(t,n)=>{const l=e?k:v,i=()=>S(t,e,n);co(l,[t,i]),mo((()=>{ho(t,e?r:s),fo(t,e?u:o),uo(l)||vo(t,a,h,i)}))};return oe(t,{onBeforeEnter(e){co(g,[e]),fo(e,s),fo(e,i)},onBeforeAppear(e){co(x,[e]),fo(e,r),fo(e,c)},onEnter:N(!1),onAppear:N(!0),onLeave(e,t){e._isLeaving=!0;const n=()=>C(e,t);fo(e,d),xo(),fo(e,p),mo((()=>{e._isLeaving&&(ho(e,d),fo(e,_),uo(y)||vo(e,a,m,n))})),co(y,[e,n])},onEnterCancelled(e){S(e,!1),co(b,[e])},onAppearCancelled(e){S(e,!0),co($,[e])},onLeaveCancelled(e){C(e),co(w,[e])}})}function _o(e){return Fe(e)}function fo(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.add(t))),(e._vtc||(e._vtc=new Set)).add(t)}function ho(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.remove(t)));const{_vtc:n}=e;n&&(n.delete(t),n.size||(e._vtc=void 0))}function mo(e){requestAnimationFrame((()=>{requestAnimationFrame(e)}))}let go=0;function vo(e,t,n,a){const l=e._endId=++go,s=()=>{l===e._endId&&a()};if(n)return setTimeout(s,n);const{type:i,timeout:o,propCount:r}=bo(e,t);if(!i)return a();const c=i+"end";let u=0;const d=()=>{e.removeEventListener(c,p),s()},p=t=>{t.target===e&&++u>=r&&d()};setTimeout((()=>{u<r&&d()}),o+1),e.addEventListener(c,p)}function bo(e,t){const n=window.getComputedStyle(e),a=e=>(n[e]||"").split(", "),l=a("transitionDelay"),s=a("transitionDuration"),i=yo(l,s),o=a("animationDelay"),r=a("animationDuration"),c=yo(o,r);let u=null,d=0,p=0;return"transition"===t?i>0&&(u="transition",d=i,p=s.length):"animation"===t?c>0&&(u="animation",d=c,p=r.length):(d=Math.max(i,c),u=d>0?i>c?"transition":"animation":null,p=u?"transition"===u?s.length:r.length:0),{type:u,timeout:d,propCount:p,hasTransform:"transition"===u&&/\b(transform|all)(,|$)/.test(n.transitionProperty)}}function yo(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max(...t.map(((t,n)=>wo(t)+wo(e[n]))))}function wo(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function xo(){return document.body.offsetHeight}const ko=new WeakMap,$o=new WeakMap,So={name:"TransitionGroup",props:oe({},ro,{tag:String,moveClass:String}),setup(e,{slots:t}){const n=ni(),a=La();let l,s;return dl((()=>{if(!l.length)return;const t=e.moveClass||`${e.name||"v"}-move`;if(!function(e,t,n){const a=e.cloneNode();e._vtc&&e._vtc.forEach((e=>{e.split(/\s+/).forEach((e=>e&&a.classList.remove(e)))})),n.split(/\s+/).forEach((e=>e&&a.classList.add(e))),a.style.display="none";const l=1===t.nodeType?t:t.parentNode;l.appendChild(a);const{hasTransform:s}=bo(a);return l.removeChild(a),s}(l[0].el,n.vnode.el,t))return;l.forEach(Co),l.forEach(No);const a=l.filter(Ao);xo(),a.forEach((e=>{const n=e.el,a=n.style;fo(n,t),a.transform=a.webkitTransform=a.transitionDuration="";const l=n._moveCb=e=>{e&&e.target!==n||e&&!/transform$/.test(e.propertyName)||(n.removeEventListener("transitionend",l),n._moveCb=null,ho(n,t))};n.addEventListener("transitionend",l)}))})),()=>{const i=sn(e),o=po(i);let r=i.tag||xs;l=s,s=t.default?Ga(t.default()):[];for(let e=0;e<s.length;e++){const t=s[e];null!=t.key&&Ha(t,Ba(t,o,a,n))}if(l)for(let e=0;e<l.length;e++){const t=l[e];Ha(t,Ba(t,o,a,n)),ko.set(t,t.el.getBoundingClientRect())}return Bs(r,null,s)}}};function Co(e){const t=e.el;t._moveCb&&t._moveCb(),t._enterCb&&t._enterCb()}function No(e){$o.set(e,e.el.getBoundingClientRect())}function Ao(e){const t=ko.get(e),n=$o.get(e),a=t.left-n.left,l=t.top-n.top;if(a||l){const t=e.el.style;return t.transform=t.webkitTransform=`translate(${a}px,${l}px)`,t.transitionDuration="0s",e}}const Eo=e=>{const t=e.props["onUpdate:modelValue"]||!1;return de(t)?e=>Oe(t,e):t};function To(e){e.target.composing=!0}function Po(e){const t=e.target;t.composing&&(t.composing=!1,t.dispatchEvent(new Event("input")))}const Io={created(e,{modifiers:{lazy:t,trim:n,number:a}},l){e._assign=Eo(l);const s=a||l.props&&"number"===l.props.type;Ji(e,t?"change":"input",(t=>{if(t.target.composing)return;let a=e.value;n&&(a=a.trim()),s&&(a=Fe(a)),e._assign(a)})),n&&Ji(e,"change",(()=>{e.value=e.value.trim()})),t||(Ji(e,"compositionstart",To),Ji(e,"compositionend",Po),Ji(e,"change",Po))},mounted(e,{value:t}){e.value=null==t?"":t},beforeUpdate(e,{value:t,modifiers:{lazy:n,trim:a,number:l}},s){if(e._assign=Eo(s),e.composing)return;if(document.activeElement===e&&"range"!==e.type){if(n)return;if(a&&e.value.trim()===t)return;if((l||"number"===e.type)&&Fe(e.value)===t)return}const i=null==t?"":t;e.value!==i&&(e.value=i)}},Mo={deep:!0,created(e,t,n){e._assign=Eo(n),Ji(e,"change",(()=>{const t=e._modelValue,n=Lo(e),a=e.checked,l=e._assign;if(de(t)){const e=X(t,n),s=-1!==e;if(a&&!s)l(t.concat(n));else if(!a&&s){const n=[...t];n.splice(e,1),l(n)}}else if(_e(t)){const e=new Set(t);a?e.add(n):e.delete(n),l(e)}else l(Ro(e,a))}))},mounted:Oo,beforeUpdate(e,t,n){e._assign=Eo(n),Oo(e,t,n)}};function Oo(e,{value:t,oldValue:n},a){e._modelValue=t,de(t)?e.checked=X(t,a.props.value)>-1:_e(t)?e.checked=t.has(a.props.value):t!==n&&(e.checked=Y(t,Ro(e,!0)))}const Uo={created(e,{value:t},n){e.checked=Y(t,n.props.value),e._assign=Eo(n),Ji(e,"change",(()=>{e._assign(Lo(e))}))},beforeUpdate(e,{value:t,oldValue:n},a){e._assign=Eo(a),t!==n&&(e.checked=Y(t,a.props.value))}},Fo={deep:!0,created(e,{value:t,modifiers:{number:n}},a){const l=_e(t);Ji(e,"change",(()=>{const t=Array.prototype.filter.call(e.options,(e=>e.selected)).map((e=>n?Fe(Lo(e)):Lo(e)));e._assign(e.multiple?l?new Set(t):t:t[0])})),e._assign=Eo(a)},mounted(e,{value:t}){jo(e,t)},beforeUpdate(e,t,n){e._assign=Eo(n)},updated(e,{value:t}){jo(e,t)}};function jo(e,t){const n=e.multiple;if(!n||de(t)||_e(t)){for(let a=0,l=e.options.length;a<l;a++){const l=e.options[a],s=Lo(l);if(n)l.selected=de(t)?X(t,s)>-1:t.has(s);else if(Y(Lo(l),t))return void(e.selectedIndex!==a&&(e.selectedIndex=a))}n||-1===e.selectedIndex||(e.selectedIndex=-1)}}function Lo(e){return"_value"in e?e._value:e.value}function Ro(e,t){const n=t?"_trueValue":"_falseValue";return n in e?e[n]:t}const Do={created(e,t,n){zo(e,t,n,null,"created")},mounted(e,t,n){zo(e,t,n,null,"mounted")},beforeUpdate(e,t,n,a){zo(e,t,n,a,"beforeUpdate")},updated(e,t,n,a){zo(e,t,n,a,"updated")}};function zo(e,t,n,a,l){const s=function(e,t){switch(e){case"SELECT":return Fo;case"TEXTAREA":return Io;default:switch(t){case"checkbox":return Mo;case"radio":return Uo;default:return Io}}}(e.tagName,n.props&&n.props.type)[l];s&&s(e,t,n,a)}const Bo=["ctrl","shift","alt","meta"],Vo={stop:e=>e.stopPropagation(),prevent:e=>e.preventDefault(),self:e=>e.target!==e.currentTarget,ctrl:e=>!e.ctrlKey,shift:e=>!e.shiftKey,alt:e=>!e.altKey,meta:e=>!e.metaKey,left:e=>"button"in e&&0!==e.button,middle:e=>"button"in e&&1!==e.button,right:e=>"button"in e&&2!==e.button,exact:(e,t)=>Bo.some((n=>e[`${n}Key`]&&!t.includes(n)))},qo=(e,t)=>(n,...a)=>{for(let e=0;e<t.length;e++){const a=Vo[t[e]];if(a&&a(n,t))return}return e(n,...a)},Ho={esc:"escape",space:" ",up:"arrow-up",left:"arrow-left",right:"arrow-right",down:"arrow-down",delete:"backspace"},Go=(e,t)=>n=>{if(!("key"in n))return;const a=Te(n.key);return t.some((e=>e===a||Ho[e]===a))?e(n):void 0},Ko={beforeMount(e,{value:t},{transition:n}){e._vod="none"===e.style.display?"":e.style.display,n&&t?n.beforeEnter(e):Wo(e,t)},mounted(e,{value:t},{transition:n}){n&&t&&n.enter(e)},updated(e,{value:t,oldValue:n},{transition:a}){!t!=!n&&(a?t?(a.beforeEnter(e),Wo(e,!0),a.enter(e)):a.leave(e,(()=>{Wo(e,!1)})):Wo(e,t))},beforeUnmount(e,{value:t}){Wo(e,t)}};function Wo(e,t){e.style.display=t?e._vod:"none"}const Jo=oe({patchProp:(e,t,n,a,l=!1,s,i,o,r)=>{"class"===t?function(e,t,n){const a=e._vtc;a&&(t=(t?[t,...a]:[...a]).join(" ")),null==t?e.removeAttribute("class"):n?e.setAttribute("class",t):e.className=t}(e,a,l):"style"===t?function(e,t,n){const a=e.style,l=me(n);if(n&&!l){for(const e in n)Di(a,e,n[e]);if(t&&!me(t))for(const e in t)null==n[e]&&Di(a,e,"")}else{const s=a.display;l?t!==n&&(a.cssText=n):t&&e.removeAttribute("style"),"_vod"in e&&(a.display=s)}}(e,n,a):se(t)?ie(t)||function(e,t,n,a,l=null){const s=e._vei||(e._vei={}),i=s[t];if(a&&i)i.value=a;else{const[n,o]=function(e){let t;if(Yi.test(e)){let n;for(t={};n=e.match(Yi);)e=e.slice(0,e.length-n[0].length),t[n[0].toLowerCase()]=!0}return[Te(e.slice(2)),t]}(t);if(a){const i=s[t]=function(e,t){const n=e=>{const a=e.timeStamp||qi();(Hi||a>=n.attached-1)&&In(function(e,t){if(de(t)){const n=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{n.call(e),e._stopped=!0},t.map((e=>t=>!t._stopped&&e&&e(t)))}return t}(e,n.value),t,5,[e])};return n.value=e,n.attached=Gi||(Ki.then(Wi),Gi=qi()),n}(a,l);Ji(e,n,i,o)}else i&&(function(e,t,n,a){e.removeEventListener(t,n,a)}(e,n,i,o),s[t]=void 0)}}(e,t,0,a,i):("."===t[0]?(t=t.slice(1),1):"^"===t[0]?(t=t.slice(1),0):function(e,t,n,a){return a?"innerHTML"===t||"textContent"===t||!!(t in e&&Xi.test(t)&&he(n)):"spellcheck"!==t&&"draggable"!==t&&"translate"!==t&&("form"!==t&&(("list"!==t||"INPUT"!==e.tagName)&&(("type"!==t||"TEXTAREA"!==e.tagName)&&((!Xi.test(t)||!me(n))&&t in e))))}(e,t,a,l))?function(e,t,n,a,l,s,i){if("innerHTML"===t||"textContent"===t)return a&&i(a,l,s),void(e[t]=null==n?"":n);if("value"===t&&"PROGRESS"!==e.tagName&&!e.tagName.includes("-")){e._value=n;const a=null==n?"":n;return e.value===a&&"OPTION"!==e.tagName||(e.value=a),void(null==n&&e.removeAttribute(t))}let o=!1;if(""===n||null==n){const a=typeof e[t];"boolean"===a?n=D(n):null==n&&"string"===a?(n="",o=!0):"number"===a&&(n=0,o=!0)}try{e[t]=n}catch(e){}o&&e.removeAttribute(t)}(e,t,a,s,i,o,r):("true-value"===t?e._trueValue=a:"false-value"===t&&(e._falseValue=a),function(e,t,n,a,l){if(a&&t.startsWith("xlink:"))null==n?e.removeAttributeNS(Vi,t.slice(6,t.length)):e.setAttributeNS(Vi,t,n);else{const a=R(t);null==n||a&&!D(n)?e.removeAttribute(t):e.setAttribute(t,a?"":n)}}(e,t,a,l))}},Li);let Yo,Xo=!1;function Zo(){return Yo||(Yo=ps(Jo))}function Qo(){return Yo=Xo?Yo:_s(Jo),Xo=!0,Yo}const er=(...e)=>{Zo().render(...e)},tr=(...e)=>{Qo().hydrate(...e)},nr=(...e)=>{const t=Zo().createApp(...e),{mount:n}=t;return t.mount=e=>{const a=lr(e);if(!a)return;const l=t._component;he(l)||l.render||l.template||(l.template=a.innerHTML),a.innerHTML="";const s=n(a,!1,a instanceof SVGElement);return a instanceof Element&&(a.removeAttribute("v-cloak"),a.setAttribute("data-v-app","")),s},t},ar=(...e)=>{const t=Qo().createApp(...e),{mount:n}=t;return t.mount=e=>{const t=lr(e);if(t)return n(t,!0,t instanceof SVGElement)},t};function lr(e){return me(e)?document.querySelector(e):e}const sr=ne;var ir=Object.freeze({__proto__:null,render:er,hydrate:tr,createApp:nr,createSSRApp:ar,initDirectivesForSSR:sr,defineCustomElement:Zi,defineSSRCustomElement:Qi,VueElement:to,useCssModule:no,useCssVars:ao,Transition:io,TransitionGroup:So,vModelText:Io,vModelCheckbox:Mo,vModelRadio:Uo,vModelSelect:Fo,vModelDynamic:Do,withModifiers:qo,withKeys:Go,vShow:Ko,reactive:Yt,ref:_n,readonly:Zt,unref:vn,proxyRefs:yn,isRef:pn,toRef:Sn,toRefs:kn,isProxy:ln,isReactive:tn,isReadonly:nn,isShallow:an,customRef:xn,triggerRef:gn,shallowRef:fn,shallowReactive:Xt,shallowReadonly:Qt,markRaw:on,toRaw:sn,effect:tt,stop:nt,ReactiveEffect:Qe,effectScope:De,EffectScope:Re,getCurrentScope:Be,onScopeDispose:Ve,computed:vi,watch:Ma,watchEffect:Ea,watchPostEffect:Ta,watchSyncEffect:Pa,onBeforeMount:rl,onMounted:cl,onBeforeUpdate:ul,onUpdated:dl,onBeforeUnmount:pl,onUnmounted:_l,onActivated:el,onDeactivated:tl,onRenderTracked:ml,onRenderTriggered:hl,onErrorCaptured:gl,onServerPrefetch:fl,provide:Na,inject:Aa,nextTick:Kn,defineComponent:Ka,defineAsyncComponent:Ja,useAttrs:$i,useSlots:ki,defineProps:bi,defineEmits:yi,defineExpose:wi,withDefaults:xi,mergeDefaults:Ci,createPropsRestProxy:Ni,withAsyncContext:Ai,getCurrentInstance:ni,h:Ei,createVNode:Bs,cloneVNode:qs,mergeProps:Xs,isVNode:Us,Fragment:xs,Text:ks,Comment:$s,Static:Ss,Teleport:ws,Suspense:wa,KeepAlive:Za,BaseTransition:Da,withDirectives:vl,useSSRContext:Pi,ssrContextKey:Ti,createRenderer:ps,createHydrationRenderer:_s,queuePostFlushCb:Xn,warn:An,handleError:Mn,callWithErrorHandling:Pn,callWithAsyncErrorHandling:In,resolveComponent:yl,resolveDirective:kl,resolveDynamicComponent:xl,registerRuntimeCompiler:ui,isRuntimeOnly:di,useTransitionState:La,resolveTransitionHooks:Ba,setTransitionHooks:Ha,getTransitionRawChildren:Ga,initCustomFormatter:Ii,get devtools(){return na},setDevtoolsHook:la,withCtx:fa,pushScopeId:da,popScopeId:pa,withScopeId:_a,renderList:Cl,toHandlers:Tl,renderSlot:Al,createSlots:Nl,withMemo:Mi,isMemoSame:Oi,openBlock:As,createBlock:Os,setBlockTracking:Ps,createTextVNode:Hs,createCommentVNode:Ks,createStaticVNode:Gs,createElementVNode:zs,createElementBlock:Ms,guardReactiveProps:Vs,toDisplayString:Z,camelize:Ae,capitalize:Pe,toHandlerKey:Ie,normalizeProps:G,normalizeClass:H,normalizeStyle:z,transformVNodeArgs:js,version:Ui,ssrUtils:null,resolveFilter:null,compatUtils:null});function or(e){throw e}function rr(e){}function cr(e,t,n,a){const l=new SyntaxError(String(e));return l.code=e,l.loc=t,l}const ur=Symbol(""),dr=Symbol(""),pr=Symbol(""),_r=Symbol(""),fr=Symbol(""),hr=Symbol(""),mr=Symbol(""),gr=Symbol(""),vr=Symbol(""),br=Symbol(""),yr=Symbol(""),wr=Symbol(""),xr=Symbol(""),kr=Symbol(""),$r=Symbol(""),Sr=Symbol(""),Cr=Symbol(""),Nr=Symbol(""),Ar=Symbol(""),Er=Symbol(""),Tr=Symbol(""),Pr=Symbol(""),Ir=Symbol(""),Mr=Symbol(""),Or=Symbol(""),Ur=Symbol(""),Fr=Symbol(""),jr=Symbol(""),Lr=Symbol(""),Rr=Symbol(""),Dr=Symbol(""),zr=Symbol(""),Br=Symbol(""),Vr=Symbol(""),qr=Symbol(""),Hr=Symbol(""),Gr=Symbol(""),Kr=Symbol(""),Wr=Symbol(""),Jr={[ur]:"Fragment",[dr]:"Teleport",[pr]:"Suspense",[_r]:"KeepAlive",[fr]:"BaseTransition",[hr]:"openBlock",[mr]:"createBlock",[gr]:"createElementBlock",[vr]:"createVNode",[br]:"createElementVNode",[yr]:"createCommentVNode",[wr]:"createTextVNode",[xr]:"createStaticVNode",[kr]:"resolveComponent",[$r]:"resolveDynamicComponent",[Sr]:"resolveDirective",[Cr]:"resolveFilter",[Nr]:"withDirectives",[Ar]:"renderList",[Er]:"renderSlot",[Tr]:"createSlots",[Pr]:"toDisplayString",[Ir]:"mergeProps",[Mr]:"normalizeClass",[Or]:"normalizeStyle",[Ur]:"normalizeProps",[Fr]:"guardReactiveProps",[jr]:"toHandlers",[Lr]:"camelize",[Rr]:"capitalize",[Dr]:"toHandlerKey",[zr]:"setBlockTracking",[Br]:"pushScopeId",[Vr]:"popScopeId",[qr]:"withCtx",[Hr]:"unref",[Gr]:"isRef",[Kr]:"withMemo",[Wr]:"isMemoSame"},Yr={source:"",start:{line:1,column:1,offset:0},end:{line:1,column:1,offset:0}};function Xr(e,t,n,a,l,s,i,o=!1,r=!1,c=!1,u=Yr){return e&&(o?(e.helper(hr),e.helper(Cc(e.inSSR,c))):e.helper(Sc(e.inSSR,c)),i&&e.helper(Nr)),{type:13,tag:t,props:n,children:a,patchFlag:l,dynamicProps:s,directives:i,isBlock:o,disableTracking:r,isComponent:c,loc:u}}function Zr(e,t=Yr){return{type:17,loc:t,elements:e}}function Qr(e,t=Yr){return{type:15,loc:t,properties:e}}function ec(e,t){return{type:16,loc:Yr,key:me(e)?tc(e,!0):e,value:t}}function tc(e,t=!1,n=Yr,a=0){return{type:4,loc:n,content:e,isStatic:t,constType:t?3:a}}function nc(e,t=Yr){return{type:8,loc:t,children:e}}function ac(e,t=[],n=Yr){return{type:14,loc:n,callee:e,arguments:t}}function lc(e,t,n=!1,a=!1,l=Yr){return{type:18,params:e,returns:t,newline:n,isSlot:a,loc:l}}function sc(e,t,n,a=!0){return{type:19,test:e,consequent:t,alternate:n,newline:a,loc:Yr}}const ic=e=>4===e.type&&e.isStatic,oc=(e,t)=>e===t||e===Te(t);function rc(e){return oc(e,"Teleport")?dr:oc(e,"Suspense")?pr:oc(e,"KeepAlive")?_r:oc(e,"BaseTransition")?fr:void 0}const cc=/^\d|[^\$\w]/,uc=e=>!cc.test(e),dc=/[A-Za-z_$\xA0-\uFFFF]/,pc=/[\.\?\w$\xA0-\uFFFF]/,_c=/\s+[.[]\s*|\s*[.[]\s+/g,fc=e=>{e=e.trim().replace(_c,(e=>e.trim()));let t=0,n=[],a=0,l=0,s=null;for(let i=0;i<e.length;i++){const o=e.charAt(i);switch(t){case 0:if("["===o)n.push(t),t=1,a++;else if("("===o)n.push(t),t=2,l++;else if(!(0===i?dc:pc).test(o))return!1;break;case 1:"'"===o||'"'===o||"`"===o?(n.push(t),t=3,s=o):"["===o?a++:"]"===o&&(--a||(t=n.pop()));break;case 2:if("'"===o||'"'===o||"`"===o)n.push(t),t=3,s=o;else if("("===o)l++;else if(")"===o){if(i===e.length-1)return!1;--l||(t=n.pop())}break;case 3:o===s&&(t=n.pop(),s=null)}}return!a&&!l};function hc(e,t,n){const a={source:e.source.slice(t,t+n),start:mc(e.start,e.source,t),end:e.end};return null!=n&&(a.end=mc(e.start,e.source,t+n)),a}function mc(e,t,n=t.length){return gc(oe({},e),t,n)}function gc(e,t,n=t.length){let a=0,l=-1;for(let e=0;e<n;e++)10===t.charCodeAt(e)&&(a++,l=e);return e.offset+=n,e.line+=a,e.column=-1===l?e.column+n:n-l,e}function vc(e,t,n=!1){for(let a=0;a<e.props.length;a++){const l=e.props[a];if(7===l.type&&(n||l.exp)&&(me(t)?l.name===t:t.test(l.name)))return l}}function bc(e,t,n=!1,a=!1){for(let l=0;l<e.props.length;l++){const s=e.props[l];if(6===s.type){if(n)continue;if(s.name===t&&(s.value||a))return s}else if("bind"===s.name&&(s.exp||a)&&yc(s.arg,t))return s}}function yc(e,t){return!(!e||!ic(e)||e.content!==t)}function wc(e){return 5===e.type||2===e.type}function xc(e){return 7===e.type&&"slot"===e.name}function kc(e){return 1===e.type&&3===e.tagType}function $c(e){return 1===e.type&&2===e.tagType}function Sc(e,t){return e||t?vr:br}function Cc(e,t){return e||t?mr:gr}const Nc=new Set([Ur,Fr]);function Ac(e,t=[]){if(e&&!me(e)&&14===e.type){const n=e.callee;if(!me(n)&&Nc.has(n))return Ac(e.arguments[0],t.concat(e))}return[e,t]}function Ec(e,t,n){let a,l,s=13===e.type?e.props:e.arguments[2],i=[];if(s&&!me(s)&&14===s.type){const e=Ac(s);s=e[0],i=e[1],l=i[i.length-1]}if(null==s||me(s))a=Qr([t]);else if(14===s.type){const e=s.arguments[0];me(e)||15!==e.type?s.callee===jr?a=ac(n.helper(Ir),[Qr([t]),s]):s.arguments.unshift(Qr([t])):e.properties.unshift(t),!a&&(a=s)}else if(15===s.type){let e=!1;if(4===t.key.type){const n=t.key.content;e=s.properties.some((e=>4===e.key.type&&e.key.content===n))}e||s.properties.unshift(t),a=s}else a=ac(n.helper(Ir),[Qr([t]),s]),l&&l.callee===Fr&&(l=i[i.length-2]);13===e.type?l?l.arguments[0]=a:e.props=a:l?l.arguments[0]=a:e.arguments[2]=a}function Tc(e,t){return`_${t}_${e.replace(/[^\w]/g,((t,n)=>"-"===t?"_":e.charCodeAt(n).toString()))}`}function Pc(e,{helper:t,removeHelper:n,inSSR:a}){e.isBlock||(e.isBlock=!0,n(Sc(a,e.isComponent)),t(hr),t(Cc(a,e.isComponent)))}const Ic=/&(gt|lt|amp|apos|quot);/g,Mc={gt:">",lt:"<",amp:"&",apos:"'",quot:'"'},Oc={delimiters:["{{","}}"],getNamespace:()=>0,getTextMode:()=>0,isVoidTag:ae,isPreTag:ae,isCustomElement:ae,decodeEntities:e=>e.replace(Ic,((e,t)=>Mc[t])),onError:or,onWarn:rr,comments:!1};function Uc(e,t,n){const a=Yc(n),l=a?a.ns:0,s=[];for(;!tu(e,t,n);){const i=e.source;let o;if(0===t||1===t)if(!e.inVPre&&Xc(i,e.options.delimiters[0]))o=Hc(e,t);else if(0===t&&"<"===i[0])if(1===i.length);else if("!"===i[1])o=Xc(i,"\x3c!--")?Lc(e):Xc(i,"<!DOCTYPE")?Rc(e):Xc(i,"<![CDATA[")&&0!==l?jc(e,n):Rc(e);else if("/"===i[1])if(2===i.length);else{if(">"===i[2]){Zc(e,3);continue}if(/[a-z]/i.test(i[2])){Bc(e,1,a);continue}o=Rc(e)}else/[a-z]/i.test(i[1])?o=Dc(e,n):"?"===i[1]&&(o=Rc(e));if(o||(o=Gc(e,t)),de(o))for(let e=0;e<o.length;e++)Fc(s,o[e]);else Fc(s,o)}let i=!1;if(2!==t&&1!==t){const t="preserve"!==e.options.whitespace;for(let n=0;n<s.length;n++){const a=s[n];if(e.inPre||2!==a.type)3!==a.type||e.options.comments||(i=!0,s[n]=null);else if(/[^\t\r\n\f ]/.test(a.content))t&&(a.content=a.content.replace(/[\t\r\n\f ]+/g," "));else{const e=s[n-1],l=s[n+1];!e||!l||t&&(3===e.type||3===l.type||1===e.type&&1===l.type&&/[\r\n]/.test(a.content))?(i=!0,s[n]=null):a.content=" "}}if(e.inPre&&a&&e.options.isPreTag(a.tag)){const e=s[0];e&&2===e.type&&(e.content=e.content.replace(/^\r?\n/,""))}}return i?s.filter(Boolean):s}function Fc(e,t){if(2===t.type){const n=Yc(e);if(n&&2===n.type&&n.loc.end.offset===t.loc.start.offset)return n.content+=t.content,n.loc.end=t.loc.end,void(n.loc.source+=t.loc.source)}e.push(t)}function jc(e,t){Zc(e,9);const n=Uc(e,3,t);return 0===e.source.length||Zc(e,3),n}function Lc(e){const t=Wc(e);let n;const a=/--(\!)?>/.exec(e.source);if(a){n=e.source.slice(4,a.index);const t=e.source.slice(0,a.index);let l=1,s=0;for(;-1!==(s=t.indexOf("\x3c!--",l));)Zc(e,s-l+1),l=s+1;Zc(e,a.index+a[0].length-l+1)}else n=e.source.slice(4),Zc(e,e.source.length);return{type:3,content:n,loc:Jc(e,t)}}function Rc(e){const t=Wc(e),n="?"===e.source[1]?1:2;let a;const l=e.source.indexOf(">");return-1===l?(a=e.source.slice(n),Zc(e,e.source.length)):(a=e.source.slice(n,l),Zc(e,l+1)),{type:3,content:a,loc:Jc(e,t)}}function Dc(e,t){const n=e.inPre,a=e.inVPre,l=Yc(t),s=Bc(e,0,l),i=e.inPre&&!n,o=e.inVPre&&!a;if(s.isSelfClosing||e.options.isVoidTag(s.tag))return i&&(e.inPre=!1),o&&(e.inVPre=!1),s;t.push(s);const r=e.options.getTextMode(s,l),c=Uc(e,r,t);if(t.pop(),s.children=c,nu(e.source,s.tag))Bc(e,1,l);else if(0===e.source.length&&"script"===s.tag.toLowerCase()){const e=c[0];e&&Xc(e.loc.source,"\x3c!--")}return s.loc=Jc(e,s.loc.start),i&&(e.inPre=!1),o&&(e.inVPre=!1),s}const zc=j("if,else,else-if,for,slot");function Bc(e,t,n){const a=Wc(e),l=/^<\/?([a-z][^\t\r\n\f />]*)/i.exec(e.source),s=l[1],i=e.options.getNamespace(s,n);Zc(e,l[0].length),Qc(e);const o=Wc(e),r=e.source;e.options.isPreTag(s)&&(e.inPre=!0);let c=Vc(e,t);0===t&&!e.inVPre&&c.some((e=>7===e.type&&"pre"===e.name))&&(e.inVPre=!0,oe(e,o),e.source=r,c=Vc(e,t).filter((e=>"v-pre"!==e.name)));let u=!1;if(0===e.source.length||(u=Xc(e.source,"/>"),Zc(e,u?2:1)),1===t)return;let d=0;return e.inVPre||("slot"===s?d=2:"template"===s?c.some((e=>7===e.type&&zc(e.name)))&&(d=3):function(e,t,n){const a=n.options;if(a.isCustomElement(e))return!1;if("component"===e||/^[A-Z]/.test(e)||rc(e)||a.isBuiltInComponent&&a.isBuiltInComponent(e)||a.isNativeTag&&!a.isNativeTag(e))return!0;for(let e=0;e<t.length;e++){const n=t[e];if(6===n.type){if("is"===n.name&&n.value&&n.value.content.startsWith("vue:"))return!0}else{if("is"===n.name)return!0;"bind"===n.name&&yc(n.arg,"is")}}}(s,c,e)&&(d=1)),{type:1,ns:i,tag:s,tagType:d,props:c,isSelfClosing:u,children:[],loc:Jc(e,a),codegenNode:void 0}}function Vc(e,t){const n=[],a=new Set;for(;e.source.length>0&&!Xc(e.source,">")&&!Xc(e.source,"/>");){if(Xc(e.source,"/")){Zc(e,1),Qc(e);continue}const l=qc(e,a);6===l.type&&l.value&&"class"===l.name&&(l.value.content=l.value.content.replace(/\s+/g," ").trim()),0===t&&n.push(l),/^[^\t\r\n\f />]/.test(e.source),Qc(e)}return n}function qc(e,t){const n=Wc(e),a=/^[^\t\r\n\f />][^\t\r\n\f />=]*/.exec(e.source)[0];t.has(a),t.add(a);{const e=/["'<]/g;for(;e.exec(a););}let l;Zc(e,a.length),/^[\t\r\n\f ]*=/.test(e.source)&&(Qc(e),Zc(e,1),Qc(e),l=function(e){const t=Wc(e);let n;const a=e.source[0],l='"'===a||"'"===a;if(l){Zc(e,1);const t=e.source.indexOf(a);-1===t?n=Kc(e,e.source.length,4):(n=Kc(e,t,4),Zc(e,1))}else{const t=/^[^\t\r\n\f >]+/.exec(e.source);if(!t)return;const a=/["'<=`]/g;for(;a.exec(t[0]););n=Kc(e,t[0].length,4)}return{content:n,isQuoted:l,loc:Jc(e,t)}}(e));const s=Jc(e,n);if(!e.inVPre&&/^(v-[A-Za-z0-9-]|:|\.|@|#)/.test(a)){const t=/(?:^v-([a-z0-9-]+))?(?:(?::|^\.|^@|^#)(\[[^\]]+\]|[^\.]+))?(.+)?$/i.exec(a);let i,o=Xc(a,"."),r=t[1]||(o||Xc(a,":")?"bind":Xc(a,"@")?"on":"slot");if(t[2]){const l="slot"===r,s=a.lastIndexOf(t[2]),o=Jc(e,eu(e,n,s),eu(e,n,s+t[2].length+(l&&t[3]||"").length));let c=t[2],u=!0;c.startsWith("[")?(u=!1,c=c.endsWith("]")?c.slice(1,c.length-1):c.slice(1)):l&&(c+=t[3]||""),i={type:4,content:c,isStatic:u,constType:u?3:0,loc:o}}if(l&&l.isQuoted){const e=l.loc;e.start.offset++,e.start.column++,e.end=mc(e.start,l.content),e.source=e.source.slice(1,-1)}const c=t[3]?t[3].slice(1).split("."):[];return o&&c.push("prop"),{type:7,name:r,exp:l&&{type:4,content:l.content,isStatic:!1,constType:0,loc:l.loc},arg:i,modifiers:c,loc:s}}return!e.inVPre&&Xc(a,"v-"),{type:6,name:a,value:l&&{type:2,content:l.content,loc:l.loc},loc:s}}function Hc(e,t){const[n,a]=e.options.delimiters,l=e.source.indexOf(a,n.length);if(-1===l)return;const s=Wc(e);Zc(e,n.length);const i=Wc(e),o=Wc(e),r=l-n.length,c=e.source.slice(0,r),u=Kc(e,r,t),d=u.trim(),p=u.indexOf(d);return p>0&&gc(i,c,p),gc(o,c,r-(u.length-d.length-p)),Zc(e,a.length),{type:5,content:{type:4,isStatic:!1,constType:0,content:d,loc:Jc(e,i,o)},loc:Jc(e,s)}}function Gc(e,t){const n=3===t?["]]>"]:["<",e.options.delimiters[0]];let a=e.source.length;for(let t=0;t<n.length;t++){const l=e.source.indexOf(n[t],1);-1!==l&&a>l&&(a=l)}const l=Wc(e);return{type:2,content:Kc(e,a,t),loc:Jc(e,l)}}function Kc(e,t,n){const a=e.source.slice(0,t);return Zc(e,t),2!==n&&3!==n&&a.includes("&")?e.options.decodeEntities(a,4===n):a}function Wc(e){const{column:t,line:n,offset:a}=e;return{column:t,line:n,offset:a}}function Jc(e,t,n){return{start:t,end:n=n||Wc(e),source:e.originalSource.slice(t.offset,n.offset)}}function Yc(e){return e[e.length-1]}function Xc(e,t){return e.startsWith(t)}function Zc(e,t){const{source:n}=e;gc(e,n,t),e.source=n.slice(t)}function Qc(e){const t=/^[\t\r\n\f ]+/.exec(e.source);t&&Zc(e,t[0].length)}function eu(e,t,n){return mc(t,e.originalSource.slice(t.offset,n),n)}function tu(e,t,n){const a=e.source;switch(t){case 0:if(Xc(a,"</"))for(let e=n.length-1;e>=0;--e)if(nu(a,n[e].tag))return!0;break;case 1:case 2:{const e=Yc(n);if(e&&nu(a,e.tag))return!0;break}case 3:if(Xc(a,"]]>"))return!0}return!a}function nu(e,t){return Xc(e,"</")&&e.slice(2,2+t.length).toLowerCase()===t.toLowerCase()&&/[\t\r\n\f />]/.test(e[2+t.length]||">")}function au(e,t){su(e,t,lu(e,e.children[0]))}function lu(e,t){const{children:n}=e;return 1===n.length&&1===t.type&&!$c(t)}function su(e,t,n=!1){const{children:a}=e,l=a.length;let s=0;for(let e=0;e<a.length;e++){const l=a[e];if(1===l.type&&0===l.tagType){const e=n?0:iu(l,t);if(e>0){if(e>=2){l.codegenNode.patchFlag="-1",l.codegenNode=t.hoist(l.codegenNode),s++;continue}}else{const e=l.codegenNode;if(13===e.type){const n=du(e);if((!n||512===n||1===n)&&cu(l,t)>=2){const n=uu(l);n&&(e.props=t.hoist(n))}e.dynamicProps&&(e.dynamicProps=t.hoist(e.dynamicProps))}}}else 12===l.type&&iu(l.content,t)>=2&&(l.codegenNode=t.hoist(l.codegenNode),s++);if(1===l.type){const e=1===l.tagType;e&&t.scopes.vSlot++,su(l,t),e&&t.scopes.vSlot--}else if(11===l.type)su(l,t,1===l.children.length);else if(9===l.type)for(let e=0;e<l.branches.length;e++)su(l.branches[e],t,1===l.branches[e].children.length)}s&&t.transformHoist&&t.transformHoist(a,t,e),s&&s===l&&1===e.type&&0===e.tagType&&e.codegenNode&&13===e.codegenNode.type&&de(e.codegenNode.children)&&(e.codegenNode.children=t.hoist(Zr(e.codegenNode.children)))}function iu(e,t){const{constantCache:n}=t;switch(e.type){case 1:if(0!==e.tagType)return 0;const a=n.get(e);if(void 0!==a)return a;const l=e.codegenNode;if(13!==l.type)return 0;if(l.isBlock&&"svg"!==e.tag&&"foreignObject"!==e.tag)return 0;if(du(l))return n.set(e,0),0;{let a=3;const s=cu(e,t);if(0===s)return n.set(e,0),0;s<a&&(a=s);for(let l=0;l<e.children.length;l++){const s=iu(e.children[l],t);if(0===s)return n.set(e,0),0;s<a&&(a=s)}if(a>1)for(let l=0;l<e.props.length;l++){const s=e.props[l];if(7===s.type&&"bind"===s.name&&s.exp){const l=iu(s.exp,t);if(0===l)return n.set(e,0),0;l<a&&(a=l)}}if(l.isBlock){for(let t=0;t<e.props.length;t++)if(7===e.props[t].type)return n.set(e,0),0;t.removeHelper(hr),t.removeHelper(Cc(t.inSSR,l.isComponent)),l.isBlock=!1,t.helper(Sc(t.inSSR,l.isComponent))}return n.set(e,a),a}case 2:case 3:return 3;case 9:case 11:case 10:default:return 0;case 5:case 12:return iu(e.content,t);case 4:return e.constType;case 8:let s=3;for(let n=0;n<e.children.length;n++){const a=e.children[n];if(me(a)||ge(a))continue;const l=iu(a,t);if(0===l)return 0;l<s&&(s=l)}return s}}const ou=new Set([Mr,Or,Ur,Fr]);function ru(e,t){if(14===e.type&&!me(e.callee)&&ou.has(e.callee)){const n=e.arguments[0];if(4===n.type)return iu(n,t);if(14===n.type)return ru(n,t)}return 0}function cu(e,t){let n=3;const a=uu(e);if(a&&15===a.type){const{properties:e}=a;for(let a=0;a<e.length;a++){const{key:l,value:s}=e[a],i=iu(l,t);if(0===i)return i;let o;if(i<n&&(n=i),o=4===s.type?iu(s,t):14===s.type?ru(s,t):0,0===o)return o;o<n&&(n=o)}}return n}function uu(e){const t=e.codegenNode;if(13===t.type)return t.props}function du(e){const t=e.patchFlag;return t?parseInt(t,10):void 0}function pu(e,t){const n=function(e,{filename:t="",prefixIdentifiers:n=!1,hoistStatic:a=!1,cacheHandlers:l=!1,nodeTransforms:s=[],directiveTransforms:i={},transformHoist:o=null,isBuiltInComponent:r=ne,isCustomElement:c=ne,expressionPlugins:u=[],scopeId:d=null,slotted:p=!0,ssr:_=!1,inSSR:f=!1,ssrCssVars:h="",bindingMetadata:m=ee,inline:g=!1,isTS:v=!1,onError:b=or,onWarn:y=rr,compatConfig:w}){const x=t.replace(/\?.*$/,"").match(/([^/\\]+)\.\w+$/),k={selfName:x&&Pe(Ae(x[1])),prefixIdentifiers:n,hoistStatic:a,cacheHandlers:l,nodeTransforms:s,directiveTransforms:i,transformHoist:o,isBuiltInComponent:r,isCustomElement:c,expressionPlugins:u,scopeId:d,slotted:p,ssr:_,inSSR:f,ssrCssVars:h,bindingMetadata:m,inline:g,isTS:v,onError:b,onWarn:y,compatConfig:w,root:e,helpers:new Map,components:new Set,directives:new Set,hoists:[],imports:[],constantCache:new Map,temps:0,cached:0,identifiers:Object.create(null),scopes:{vFor:0,vSlot:0,vPre:0,vOnce:0},parent:null,currentNode:e,childIndex:0,inVOnce:!1,helper(e){const t=k.helpers.get(e)||0;return k.helpers.set(e,t+1),e},removeHelper(e){const t=k.helpers.get(e);if(t){const n=t-1;n?k.helpers.set(e,n):k.helpers.delete(e)}},helperString:e=>`_${Jr[k.helper(e)]}`,replaceNode(e){k.parent.children[k.childIndex]=k.currentNode=e},removeNode(e){const t=e?k.parent.children.indexOf(e):k.currentNode?k.childIndex:-1;e&&e!==k.currentNode?k.childIndex>t&&(k.childIndex--,k.onNodeRemoved()):(k.currentNode=null,k.onNodeRemoved()),k.parent.children.splice(t,1)},onNodeRemoved:()=>{},addIdentifiers(e){},removeIdentifiers(e){},hoist(e){me(e)&&(e=tc(e)),k.hoists.push(e);const t=tc(`_hoisted_${k.hoists.length}`,!1,e.loc,2);return t.hoisted=e,t},cache:(e,t=!1)=>function(e,t,n=!1){return{type:20,index:e,value:t,isVNode:n,loc:Yr}}(k.cached++,e,t)};return k}(e,t);_u(e,n),t.hoistStatic&&au(e,n),t.ssr||function(e,t){const{helper:n}=t,{children:a}=e;if(1===a.length){const n=a[0];if(lu(e,n)&&n.codegenNode){const a=n.codegenNode;13===a.type&&Pc(a,t),e.codegenNode=a}else e.codegenNode=n}else if(a.length>1){let a=64;e.codegenNode=Xr(t,n(ur),void 0,e.children,a+"",void 0,void 0,!0,void 0,!1)}}(e,n),e.helpers=[...n.helpers.keys()],e.components=[...n.components],e.directives=[...n.directives],e.imports=n.imports,e.hoists=n.hoists,e.temps=n.temps,e.cached=n.cached}function _u(e,t){t.currentNode=e;const{nodeTransforms:n}=t,a=[];for(let l=0;l<n.length;l++){const s=n[l](e,t);if(s&&(de(s)?a.push(...s):a.push(s)),!t.currentNode)return;e=t.currentNode}switch(e.type){case 3:t.ssr||t.helper(yr);break;case 5:t.ssr||t.helper(Pr);break;case 9:for(let n=0;n<e.branches.length;n++)_u(e.branches[n],t);break;case 10:case 11:case 1:case 0:!function(e,t){let n=0;const a=()=>{n--};for(;n<e.children.length;n++){const l=e.children[n];me(l)||(t.parent=e,t.childIndex=n,t.onNodeRemoved=a,_u(l,t))}}(e,t)}t.currentNode=e;let l=a.length;for(;l--;)a[l]()}function fu(e,t){const n=me(e)?t=>t===e:t=>e.test(t);return(e,a)=>{if(1===e.type){const{props:l}=e;if(3===e.tagType&&l.some(xc))return;const s=[];for(let i=0;i<l.length;i++){const o=l[i];if(7===o.type&&n(o.name)){l.splice(i,1),i--;const n=t(e,o,a);n&&s.push(n)}}return s}}}const hu=e=>`${Jr[e]}: _${Jr[e]}`;function mu(e,t,{helper:n,push:a,newline:l,isTS:s}){const i=n("component"===t?kr:Sr);for(let n=0;n<e.length;n++){let o=e[n];const r=o.endsWith("__self");r&&(o=o.slice(0,-6)),a(`const ${Tc(o,t)} = ${i}(${JSON.stringify(o)}${r?", true":""})${s?"!":""}`),n<e.length-1&&l()}}function gu(e,t){const n=e.length>3||!1;t.push("["),n&&t.indent(),vu(e,t,n),n&&t.deindent(),t.push("]")}function vu(e,t,n=!1,a=!0){const{push:l,newline:s}=t;for(let i=0;i<e.length;i++){const o=e[i];me(o)?l(o):de(o)?gu(o,t):bu(o,t),i<e.length-1&&(n?(a&&l(","),s()):a&&l(", "))}}function bu(e,t){if(me(e))t.push(e);else if(ge(e))t.push(t.helper(e));else switch(e.type){case 1:case 9:case 11:case 12:bu(e.codegenNode,t);break;case 2:!function(e,t){t.push(JSON.stringify(e.content),e)}(e,t);break;case 4:yu(e,t);break;case 5:!function(e,t){const{push:n,helper:a,pure:l}=t;l&&n("/*#__PURE__*/"),n(`${a(Pr)}(`),bu(e.content,t),n(")")}(e,t);break;case 8:wu(e,t);break;case 3:!function(e,t){const{push:n,helper:a,pure:l}=t;l&&n("/*#__PURE__*/"),n(`${a(yr)}(${JSON.stringify(e.content)})`,e)}(e,t);break;case 13:!function(e,t){const{push:n,helper:a,pure:l}=t,{tag:s,props:i,children:o,patchFlag:r,dynamicProps:c,directives:u,isBlock:d,disableTracking:p,isComponent:_}=e;u&&n(a(Nr)+"("),d&&n(`(${a(hr)}(${p?"true":""}), `),l&&n("/*#__PURE__*/");n(a(d?Cc(t.inSSR,_):Sc(t.inSSR,_))+"(",e),vu(function(e){let t=e.length;for(;t--&&null==e[t];);return e.slice(0,t+1).map((e=>e||"null"))}([s,i,o,r,c]),t),n(")"),d&&n(")"),u&&(n(", "),bu(u,t),n(")"))}(e,t);break;case 14:!function(e,t){const{push:n,helper:a,pure:l}=t,s=me(e.callee)?e.callee:a(e.callee);l&&n("/*#__PURE__*/"),n(s+"(",e),vu(e.arguments,t),n(")")}(e,t);break;case 15:!function(e,t){const{push:n,indent:a,deindent:l,newline:s}=t,{properties:i}=e;if(!i.length)return void n("{}",e);const o=i.length>1||!1;n(o?"{":"{ "),o&&a();for(let e=0;e<i.length;e++){const{key:a,value:l}=i[e];xu(a,t),n(": "),bu(l,t),e<i.length-1&&(n(","),s())}o&&l(),n(o?"}":" }")}(e,t);break;case 17:!function(e,t){gu(e.elements,t)}(e,t);break;case 18:!function(e,t){const{push:n,indent:a,deindent:l}=t,{params:s,returns:i,body:o,newline:r,isSlot:c}=e;c&&n(`_${Jr[qr]}(`),n("(",e),de(s)?vu(s,t):s&&bu(s,t),n(") => "),(r||o)&&(n("{"),a()),i?(r&&n("return "),de(i)?gu(i,t):bu(i,t)):o&&bu(o,t),(r||o)&&(l(),n("}")),c&&n(")")}(e,t);break;case 19:!function(e,t){const{test:n,consequent:a,alternate:l,newline:s}=e,{push:i,indent:o,deindent:r,newline:c}=t;if(4===n.type){const e=!uc(n.content);e&&i("("),yu(n,t),e&&i(")")}else i("("),bu(n,t),i(")");s&&o(),t.indentLevel++,s||i(" "),i("? "),bu(a,t),t.indentLevel--,s&&c(),s||i(" "),i(": ");const u=19===l.type;u||t.indentLevel++,bu(l,t),u||t.indentLevel--,s&&r(!0)}(e,t);break;case 20:!function(e,t){const{push:n,helper:a,indent:l,deindent:s,newline:i}=t;n(`_cache[${e.index}] || (`),e.isVNode&&(l(),n(`${a(zr)}(-1),`),i()),n(`_cache[${e.index}] = `),bu(e.value,t),e.isVNode&&(n(","),i(),n(`${a(zr)}(1),`),i(),n(`_cache[${e.index}]`),s()),n(")")}(e,t);break;case 21:vu(e.body,t,!0,!1)}}function yu(e,t){const{content:n,isStatic:a}=e;t.push(a?JSON.stringify(n):n,e)}function wu(e,t){for(let n=0;n<e.children.length;n++){const a=e.children[n];me(a)?t.push(a):bu(a,t)}}function xu(e,t){const{push:n}=t;8===e.type?(n("["),wu(e,t),n("]")):e.isStatic?n(uc(e.content)?e.content:JSON.stringify(e.content),e):n(`[${e.content}]`,e)}const ku=fu(/^(if|else|else-if)$/,((e,t,n)=>function(e,t,n,a){if("else"===t.name||t.exp&&t.exp.content.trim()||(t.exp=tc("true",!1,t.exp?t.exp.loc:e.loc)),"if"===t.name){const l=$u(e,t),s={type:9,loc:e.loc,branches:[l]};if(n.replaceNode(s),a)return a(s,l,!0)}else{const l=n.parent.children;let s=l.indexOf(e);for(;s-- >=-1;){const i=l[s];if(!i||2!==i.type||i.content.trim().length){if(i&&9===i.type){n.removeNode();const l=$u(e,t);i.branches.push(l);const s=a&&a(i,l,!1);_u(l,n),s&&s(),n.currentNode=null}break}n.removeNode(i)}}}(e,t,n,((e,t,a)=>{const l=n.parent.children;let s=l.indexOf(e),i=0;for(;s-- >=0;){const e=l[s];e&&9===e.type&&(i+=e.branches.length)}return()=>{if(a)e.codegenNode=Su(t,i,n);else{const a=function(e){for(;;)if(19===e.type){if(19!==e.alternate.type)return e;e=e.alternate}else 20===e.type&&(e=e.value)}(e.codegenNode);a.alternate=Su(t,i+e.branches.length-1,n)}}}))));function $u(e,t){const n=3===e.tagType;return{type:10,loc:e.loc,condition:"else"===t.name?void 0:t.exp,children:n&&!vc(e,"for")?e.children:[e],userKey:bc(e,"key"),isTemplateIf:n}}function Su(e,t,n){return e.condition?sc(e.condition,Cu(e,t,n),ac(n.helper(yr),['""',"true"])):Cu(e,t,n)}function Cu(e,t,n){const{helper:a}=n,l=ec("key",tc(`${t}`,!1,Yr,2)),{children:s}=e,i=s[0];if(1!==s.length||1!==i.type){if(1===s.length&&11===i.type){const e=i.codegenNode;return Ec(e,l,n),e}{let t=64;return Xr(n,a(ur),Qr([l]),s,t+"",void 0,void 0,!0,!1,!1,e.loc)}}{const e=i.codegenNode,t=14===(o=e).type&&o.callee===Kr?o.arguments[1].returns:o;return 13===t.type&&Pc(t,n),Ec(t,l,n),e}var o}const Nu=fu("for",((e,t,n)=>{const{helper:a,removeHelper:l}=n;return function(e,t,n,a){if(!t.exp)return;const l=Pu(t.exp);if(!l)return;const{scopes:s}=n,{source:i,value:o,key:r,index:c}=l,u={type:11,loc:t.loc,source:i,valueAlias:o,keyAlias:r,objectIndexAlias:c,parseResult:l,children:kc(e)?e.children:[e]};n.replaceNode(u),s.vFor++;const d=a&&a(u);return()=>{s.vFor--,d&&d()}}(e,t,n,(t=>{const s=ac(a(Ar),[t.source]),i=kc(e),o=vc(e,"memo"),r=bc(e,"key"),c=r&&(6===r.type?tc(r.value.content,!0):r.exp),u=r?ec("key",c):null,d=4===t.source.type&&t.source.constType>0,p=d?64:r?128:256;return t.codegenNode=Xr(n,a(ur),void 0,s,p+"",void 0,void 0,!0,!d,!1,e.loc),()=>{let r;const{children:p}=t,_=1!==p.length||1!==p[0].type,f=$c(e)?e:i&&1===e.children.length&&$c(e.children[0])?e.children[0]:null;if(f?(r=f.codegenNode,i&&u&&Ec(r,u,n)):_?r=Xr(n,a(ur),u?Qr([u]):void 0,e.children,"64",void 0,void 0,!0,void 0,!1):(r=p[0].codegenNode,i&&u&&Ec(r,u,n),r.isBlock!==!d&&(r.isBlock?(l(hr),l(Cc(n.inSSR,r.isComponent))):l(Sc(n.inSSR,r.isComponent))),r.isBlock=!d,r.isBlock?(a(hr),a(Cc(n.inSSR,r.isComponent))):a(Sc(n.inSSR,r.isComponent))),o){const e=lc(Mu(t.parseResult,[tc("_cached")]));e.body={type:21,body:[nc(["const _memo = (",o.exp,")"]),nc(["if (_cached",...c?[" && _cached.key === ",c]:[],` && ${n.helperString(Wr)}(_cached, _memo)) return _cached`]),nc(["const _item = ",r]),tc("_item.memo = _memo"),tc("return _item")],loc:Yr},s.arguments.push(e,tc("_cache"),tc(String(n.cached++)))}else s.arguments.push(lc(Mu(t.parseResult),r,!0))}}))})),Au=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,Eu=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,Tu=/^\(|\)$/g;function Pu(e,t){const n=e.loc,a=e.content,l=a.match(Au);if(!l)return;const[,s,i]=l,o={source:Iu(n,i.trim(),a.indexOf(i,s.length)),value:void 0,key:void 0,index:void 0};let r=s.trim().replace(Tu,"").trim();const c=s.indexOf(r),u=r.match(Eu);if(u){r=r.replace(Eu,"").trim();const e=u[1].trim();let t;if(e&&(t=a.indexOf(e,c+r.length),o.key=Iu(n,e,t)),u[2]){const l=u[2].trim();l&&(o.index=Iu(n,l,a.indexOf(l,o.key?t+e.length:c+r.length)))}}return r&&(o.value=Iu(n,r,c)),o}function Iu(e,t,n){return tc(t,!1,hc(e,n,t.length))}function Mu({value:e,key:t,index:n},a=[]){return function(e){let t=e.length;for(;t--&&!e[t];);return e.slice(0,t+1).map(((e,t)=>e||tc("_".repeat(t+1),!1)))}([e,t,n,...a])}const Ou=tc("undefined",!1),Uu=(e,t)=>{if(1===e.type&&(1===e.tagType||3===e.tagType)){if(vc(e,"slot"))return t.scopes.vSlot++,()=>{t.scopes.vSlot--}}},Fu=(e,t,n)=>lc(e,t,!1,!0,t.length?t[0].loc:n);function ju(e,t,n=Fu){t.helper(qr);const{children:a,loc:l}=e,s=[],i=[];let o=t.scopes.vSlot>0||t.scopes.vFor>0;const r=vc(e,"slot",!0);if(r){const{arg:e,exp:t}=r;e&&!ic(e)&&(o=!0),s.push(ec(e||tc("default",!0),n(t,a,l)))}let c=!1,u=!1;const d=[],p=new Set;for(let e=0;e<a.length;e++){const l=a[e];let _;if(!kc(l)||!(_=vc(l,"slot",!0))){3!==l.type&&d.push(l);continue}if(r)break;c=!0;const{children:f,loc:h}=l,{arg:m=tc("default",!0),exp:g}=_;let v;ic(m)?v=m?m.content:"default":o=!0;const b=n(g,f,h);let y,w,x;if(y=vc(l,"if"))o=!0,i.push(sc(y.exp,Lu(m,b),Ou));else if(w=vc(l,/^else(-if)?$/,!0)){let t,n=e;for(;n--&&(t=a[n],3===t.type););if(t&&kc(t)&&vc(t,"if")){a.splice(e,1),e--;let t=i[i.length-1];for(;19===t.alternate.type;)t=t.alternate;t.alternate=w.exp?sc(w.exp,Lu(m,b),Ou):Lu(m,b)}}else if(x=vc(l,"for")){o=!0;const e=x.parseResult||Pu(x.exp);e&&i.push(ac(t.helper(Ar),[e.source,lc(Mu(e),Lu(m,b),!0)]))}else{if(v){if(p.has(v))continue;p.add(v),"default"===v&&(u=!0)}s.push(ec(m,b))}}if(!r){const e=(e,t)=>ec("default",n(e,t,l));c?d.length&&d.some((e=>Du(e)))&&(u||s.push(e(void 0,d))):s.push(e(void 0,a))}const _=o?2:Ru(e.children)?3:1;let f=Qr(s.concat(ec("_",tc(_+"",!1))),l);return i.length&&(f=ac(t.helper(Tr),[f,Zr(i)])),{slots:f,hasDynamicSlots:o}}function Lu(e,t){return Qr([ec("name",e),ec("fn",t)])}function Ru(e){for(let t=0;t<e.length;t++){const n=e[t];switch(n.type){case 1:if(2===n.tagType||Ru(n.children))return!0;break;case 9:if(Ru(n.branches))return!0;break;case 10:case 11:if(Ru(n.children))return!0}}return!1}function Du(e){return 2!==e.type&&12!==e.type||(2===e.type?!!e.content.trim():Du(e.content))}const zu=new WeakMap,Bu=(e,t)=>function(){if(1!==(e=t.currentNode).type||0!==e.tagType&&1!==e.tagType)return;const{tag:n,props:a}=e,l=1===e.tagType;let s=l?function(e,t,n=!1){let{tag:a}=e;const l=Gu(a),s=bc(e,"is");if(s)if(l){const e=6===s.type?s.value&&tc(s.value.content,!0):s.exp;if(e)return ac(t.helper($r),[e])}else 6===s.type&&s.value.content.startsWith("vue:")&&(a=s.value.content.slice(4));const i=!l&&vc(e,"is");if(i&&i.exp)return ac(t.helper($r),[i.exp]);const o=rc(a)||t.isBuiltInComponent(a);return o?(n||t.helper(o),o):(t.helper(kr),t.components.add(a),Tc(a,"component"))}(e,t):`"${n}"`;const i=ve(s)&&s.callee===$r;let o,r,c,u,d,p,_=0,f=i||s===dr||s===pr||!l&&("svg"===n||"foreignObject"===n);if(a.length>0){const n=Vu(e,t,void 0,l,i);o=n.props,_=n.patchFlag,d=n.dynamicPropNames;const a=n.directives;p=a&&a.length?Zr(a.map((e=>function(e,t){const n=[],a=zu.get(e);a?n.push(t.helperString(a)):(t.helper(Sr),t.directives.add(e.name),n.push(Tc(e.name,"directive")));const{loc:l}=e;if(e.exp&&n.push(e.exp),e.arg&&(e.exp||n.push("void 0"),n.push(e.arg)),Object.keys(e.modifiers).length){e.arg||(e.exp||n.push("void 0"),n.push("void 0"));const t=tc("true",!1,l);n.push(Qr(e.modifiers.map((e=>ec(e,t))),l))}return Zr(n,e.loc)}(e,t)))):void 0,n.shouldUseBlock&&(f=!0)}if(e.children.length>0)if(s===_r&&(f=!0,_|=1024),l&&s!==dr&&s!==_r){const{slots:n,hasDynamicSlots:a}=ju(e,t);r=n,a&&(_|=1024)}else if(1===e.children.length&&s!==dr){const n=e.children[0],a=n.type,l=5===a||8===a;l&&0===iu(n,t)&&(_|=1),r=l||2===a?n:e.children}else r=e.children;0!==_&&(c=String(_),d&&d.length&&(u=function(e){let t="[";for(let n=0,a=e.length;n<a;n++)t+=JSON.stringify(e[n]),n<a-1&&(t+=", ");return t+"]"}(d))),e.codegenNode=Xr(t,s,o,r,c,u,p,!!f,!1,l,e.loc)};function Vu(e,t,n=e.props,a,l,s=!1){const{tag:i,loc:o,children:r}=e;let c=[];const u=[],d=[],p=r.length>0;let _=!1,f=0,h=!1,m=!1,g=!1,v=!1,b=!1,y=!1;const w=[],x=({key:e,value:n})=>{if(ic(e)){const s=e.content,i=se(s);if(!i||a&&!l||"onclick"===s.toLowerCase()||"onUpdate:modelValue"===s||$e(s)||(v=!0),i&&$e(s)&&(y=!0),20===n.type||(4===n.type||8===n.type)&&iu(n,t)>0)return;"ref"===s?h=!0:"class"===s?m=!0:"style"===s?g=!0:"key"===s||w.includes(s)||w.push(s),!a||"class"!==s&&"style"!==s||w.includes(s)||w.push(s)}else b=!0};for(let a=0;a<n.length;a++){const l=n[a];if(6===l.type){const{loc:e,name:n,value:a}=l;let s=!0;if("ref"===n&&(h=!0,t.scopes.vFor>0&&c.push(ec(tc("ref_for",!0),tc("true")))),"is"===n&&(Gu(i)||a&&a.content.startsWith("vue:")))continue;c.push(ec(tc(n,!0,hc(e,0,n.length)),tc(a?a.content:"",s,a?a.loc:e)))}else{const{name:n,arg:a,exp:r,loc:f}=l,h="bind"===n,m="on"===n;if("slot"===n)continue;if("once"===n||"memo"===n)continue;if("is"===n||h&&yc(a,"is")&&Gu(i))continue;if(m&&s)continue;if((h&&yc(a,"key")||m&&p&&yc(a,"vue:before-update"))&&(_=!0),h&&yc(a,"ref")&&t.scopes.vFor>0&&c.push(ec(tc("ref_for",!0),tc("true"))),!a&&(h||m)){b=!0,r&&(c.length&&(u.push(Qr(qu(c),o)),c=[]),u.push(h?r:{type:14,loc:f,callee:t.helper(jr),arguments:[r]}));continue}const g=t.directiveTransforms[n];if(g){const{props:n,needRuntime:a}=g(l,e,t);!s&&n.forEach(x),c.push(...n),a&&(d.push(l),ge(a)&&zu.set(l,a))}else Se(n)||(d.push(l),p&&(_=!0))}}let k;if(u.length?(c.length&&u.push(Qr(qu(c),o)),k=u.length>1?ac(t.helper(Ir),u,o):u[0]):c.length&&(k=Qr(qu(c),o)),b?f|=16:(m&&!a&&(f|=2),g&&!a&&(f|=4),w.length&&(f|=8),v&&(f|=32)),_||0!==f&&32!==f||!(h||y||d.length>0)||(f|=512),!t.inSSR&&k)switch(k.type){case 15:let e=-1,n=-1,a=!1;for(let t=0;t<k.properties.length;t++){const l=k.properties[t].key;ic(l)?"class"===l.content?e=t:"style"===l.content&&(n=t):l.isHandlerKey||(a=!0)}const l=k.properties[e],s=k.properties[n];a?k=ac(t.helper(Ur),[k]):(l&&!ic(l.value)&&(l.value=ac(t.helper(Mr),[l.value])),s&&(g||4===s.value.type&&"["===s.value.content.trim()[0]||17===s.value.type)&&(s.value=ac(t.helper(Or),[s.value])));break;case 14:break;default:k=ac(t.helper(Ur),[ac(t.helper(Fr),[k])])}return{props:k,directives:d,patchFlag:f,dynamicPropNames:w,shouldUseBlock:_}}function qu(e){const t=new Map,n=[];for(let a=0;a<e.length;a++){const l=e[a];if(8===l.key.type||!l.key.isStatic){n.push(l);continue}const s=l.key.content,i=t.get(s);i?("style"===s||"class"===s||se(s))&&Hu(i,l):(t.set(s,l),n.push(l))}return n}function Hu(e,t){17===e.value.type?e.value.elements.push(t.value):e.value=Zr([e.value,t.value],e.loc)}function Gu(e){return"component"===e||"Component"===e}const Ku=(e,t)=>{if($c(e)){const{children:n,loc:a}=e,{slotName:l,slotProps:s}=function(e,t){let n,a='"default"';const l=[];for(let t=0;t<e.props.length;t++){const n=e.props[t];6===n.type?n.value&&("name"===n.name?a=JSON.stringify(n.value.content):(n.name=Ae(n.name),l.push(n))):"bind"===n.name&&yc(n.arg,"name")?n.exp&&(a=n.exp):("bind"===n.name&&n.arg&&ic(n.arg)&&(n.arg.content=Ae(n.arg.content)),l.push(n))}if(l.length>0){const{props:a,directives:s}=Vu(e,t,l,!1,!1);n=a}return{slotName:a,slotProps:n}}(e,t),i=[t.prefixIdentifiers?"_ctx.$slots":"$slots",l,"{}","undefined","true"];let o=2;s&&(i[2]=s,o=3),n.length&&(i[3]=lc([],n,!1,!1,a),o=4),t.scopeId&&!t.slotted&&(o=5),i.splice(o),e.codegenNode=ac(t.helper(Er),i,a)}},Wu=/^\s*([\w$_]+|(async\s*)?\([^)]*?\))\s*=>|^\s*(async\s+)?function(?:\s+[\w$]+)?\s*\(/,Ju=(e,t,n,a)=>{const{loc:l,modifiers:s,arg:i}=e;let o;if(4===i.type)if(i.isStatic){let e=i.content;e.startsWith("vue:")&&(e=`vnode-${e.slice(4)}`),o=tc(Ie(Ae(e)),!0,i.loc)}else o=nc([`${n.helperString(Dr)}(`,i,")"]);else o=i,o.children.unshift(`${n.helperString(Dr)}(`),o.children.push(")");let r=e.exp;r&&!r.content.trim()&&(r=void 0);let c=n.cacheHandlers&&!r&&!n.inVOnce;if(r){const e=fc(r.content),t=!(e||Wu.test(r.content)),n=r.content.includes(";");(t||c&&e)&&(r=nc([`${t?"$event":"(...args)"} => ${n?"{":"("}`,r,n?"}":")"]))}let u={props:[ec(o,r||tc("() => {}",!1,l))]};return a&&(u=a(u)),c&&(u.props[0].value=n.cache(u.props[0].value)),u.props.forEach((e=>e.key.isHandlerKey=!0)),u},Yu=(e,t,n)=>{const{exp:a,modifiers:l,loc:s}=e,i=e.arg;return 4!==i.type?(i.children.unshift("("),i.children.push(') || ""')):i.isStatic||(i.content=`${i.content} || ""`),l.includes("camel")&&(4===i.type?i.content=i.isStatic?Ae(i.content):`${n.helperString(Lr)}(${i.content})`:(i.children.unshift(`${n.helperString(Lr)}(`),i.children.push(")"))),n.inSSR||(l.includes("prop")&&Xu(i,"."),l.includes("attr")&&Xu(i,"^")),!a||4===a.type&&!a.content.trim()?{props:[ec(i,tc("",!0,s))]}:{props:[ec(i,a)]}},Xu=(e,t)=>{4===e.type?e.content=e.isStatic?t+e.content:`\`${t}\${${e.content}}\``:(e.children.unshift(`'${t}' + (`),e.children.push(")"))},Zu=(e,t)=>{if(0===e.type||1===e.type||11===e.type||10===e.type)return()=>{const n=e.children;let a,l=!1;for(let e=0;e<n.length;e++){const t=n[e];if(wc(t)){l=!0;for(let l=e+1;l<n.length;l++){const s=n[l];if(!wc(s)){a=void 0;break}a||(a=n[e]=nc([t],t.loc)),a.children.push(" + ",s),n.splice(l,1),l--}}}if(l&&(1!==n.length||0!==e.type&&(1!==e.type||0!==e.tagType||e.props.find((e=>7===e.type&&!t.directiveTransforms[e.name])))))for(let e=0;e<n.length;e++){const a=n[e];if(wc(a)||8===a.type){const l=[];2===a.type&&" "===a.content||l.push(a),t.ssr||0!==iu(a,t)||l.push("1"),n[e]={type:12,content:a,loc:a.loc,codegenNode:ac(t.helper(wr),l)}}}}},Qu=new WeakSet,ed=(e,t)=>{if(1===e.type&&vc(e,"once",!0)){if(Qu.has(e)||t.inVOnce)return;return Qu.add(e),t.inVOnce=!0,t.helper(zr),()=>{t.inVOnce=!1;const e=t.currentNode;e.codegenNode&&(e.codegenNode=t.cache(e.codegenNode,!0))}}},td=(e,t,n)=>{const{exp:a,arg:l}=e;if(!a)return nd();const s=a.loc.source,i=4===a.type?a.content:s;if(!i.trim()||!fc(i))return nd();const o=l||tc("modelValue",!0),r=l?ic(l)?`onUpdate:${l.content}`:nc(['"onUpdate:" + ',l]):"onUpdate:modelValue";let c;c=nc([(n.isTS?"($event: any)":"$event")+" => ((",a,") = $event)"]);const u=[ec(o,e.exp),ec(r,c)];if(e.modifiers.length&&1===t.tagType){const t=e.modifiers.map((e=>(uc(e)?e:JSON.stringify(e))+": true")).join(", "),n=l?ic(l)?`${l.content}Modifiers`:nc([l,' + "Modifiers"']):"modelModifiers";u.push(ec(n,tc(`{ ${t} }`,!1,e.loc,2)))}return nd(u)};function nd(e=[]){return{props:e}}const ad=new WeakSet,ld=(e,t)=>{if(1===e.type){const n=vc(e,"memo");if(!n||ad.has(e))return;return ad.add(e),()=>{const a=e.codegenNode||t.currentNode.codegenNode;a&&13===a.type&&(1!==e.tagType&&Pc(a,t),e.codegenNode=ac(t.helper(Kr),[n.exp,lc(void 0,a),"_cache",String(t.cached++)]))}}};function sd(e,t={}){const n=t.onError||or,a="module"===t.mode;!0===t.prefixIdentifiers?n(cr(46)):a&&n(cr(47)),t.cacheHandlers&&n(cr(48)),t.scopeId&&!a&&n(cr(49));const l=me(e)?function(e,t={}){const n=function(e,t){const n=oe({},Oc);let a;for(a in t)n[a]=void 0===t[a]?Oc[a]:t[a];return{options:n,column:1,line:1,offset:0,originalSource:e,source:e,inPre:!1,inVPre:!1,onWarn:n.onWarn}}(e,t),a=Wc(n);return function(e,t=Yr){return{type:0,children:e,helpers:[],components:[],directives:[],hoists:[],imports:[],cached:0,temps:0,codegenNode:void 0,loc:t}}(Uc(n,0,[]),Jc(n,a))}(e,t):e,[s,i]=[[ed,ku,ld,Nu,Ku,Bu,Uu,Zu],{on:Ju,bind:Yu,model:td}];return pu(l,oe({},t,{prefixIdentifiers:!1,nodeTransforms:[...s,...t.nodeTransforms||[]],directiveTransforms:oe({},i,t.directiveTransforms||{})})),function(e,t={}){const n=function(e,{mode:t="function",prefixIdentifiers:n="module"===t,sourceMap:a=!1,filename:l="template.vue.html",scopeId:s=null,optimizeImports:i=!1,runtimeGlobalName:o="Vue",runtimeModuleName:r="vue",ssrRuntimeModuleName:c="vue/server-renderer",ssr:u=!1,isTS:d=!1,inSSR:p=!1}){const _={mode:t,prefixIdentifiers:n,sourceMap:a,filename:l,scopeId:s,optimizeImports:i,runtimeGlobalName:o,runtimeModuleName:r,ssrRuntimeModuleName:c,ssr:u,isTS:d,inSSR:p,source:e.loc.source,code:"",column:1,line:1,offset:0,indentLevel:0,pure:!1,map:void 0,helper:e=>`_${Jr[e]}`,push(e,t){_.code+=e},indent(){f(++_.indentLevel)},deindent(e=!1){e?--_.indentLevel:f(--_.indentLevel)},newline(){f(_.indentLevel)}};function f(e){_.push("\n"+"  ".repeat(e))}return _}(e,t);t.onContextCreated&&t.onContextCreated(n);const{mode:a,push:l,prefixIdentifiers:s,indent:i,deindent:o,newline:r,ssr:c}=n,u=e.helpers.length>0,d=!s&&"module"!==a;if(function(e,t){const{push:n,newline:a,runtimeGlobalName:l}=t,s=l;e.helpers.length>0&&(n(`const _Vue = ${s}\n`),e.hoists.length)&&n(`const { ${[vr,br,yr,wr,xr].filter((t=>e.helpers.includes(t))).map(hu).join(", ")} } = _Vue\n`),function(e,t){if(!e.length)return;t.pure=!0;const{push:n,newline:a}=t;a();for(let l=0;l<e.length;l++){const s=e[l];s&&(n(`const _hoisted_${l+1} = `),bu(s,t),a())}t.pure=!1}(e.hoists,t),a(),n("return ")}(e,n),l(`function ${c?"ssrRender":"render"}(${(c?["_ctx","_push","_parent","_attrs"]:["_ctx","_cache"]).join(", ")}) {`),i(),d&&(l("with (_ctx) {"),i(),u&&(l(`const { ${e.helpers.map(hu).join(", ")} } = _Vue`),l("\n"),r())),e.components.length&&(mu(e.components,"component",n),(e.directives.length||e.temps>0)&&r()),e.directives.length&&(mu(e.directives,"directive",n),e.temps>0&&r()),e.temps>0){l("let ");for(let t=0;t<e.temps;t++)l(`${t>0?", ":""}_temp${t}`)}return(e.components.length||e.directives.length||e.temps)&&(l("\n"),r()),c||l("return "),e.codegenNode?bu(e.codegenNode,n):l("null"),d&&(o(),l("}")),o(),l("}"),{ast:e,code:n.code,preamble:"",map:n.map?n.map.toJSON():void 0}}(l,oe({},t,{prefixIdentifiers:!1}))}const id=Symbol(""),od=Symbol(""),rd=Symbol(""),cd=Symbol(""),ud=Symbol(""),dd=Symbol(""),pd=Symbol(""),_d=Symbol(""),fd=Symbol(""),hd=Symbol("");var md;let gd;md={[id]:"vModelRadio",[od]:"vModelCheckbox",[rd]:"vModelText",[cd]:"vModelSelect",[ud]:"vModelDynamic",[dd]:"withModifiers",[pd]:"withKeys",[_d]:"vShow",[fd]:"Transition",[hd]:"TransitionGroup"},Object.getOwnPropertySymbols(md).forEach((e=>{Jr[e]=md[e]}));const vd=j("style,iframe,script,noscript",!0),bd={isVoidTag:J,isNativeTag:e=>K(e)||W(e),isPreTag:e=>"pre"===e,decodeEntities:function(e,t=!1){return gd||(gd=document.createElement("div")),t?(gd.innerHTML=`<div foo="${e.replace(/"/g,"&quot;")}">`,gd.children[0].getAttribute("foo")):(gd.innerHTML=e,gd.textContent)},isBuiltInComponent:e=>oc(e,"Transition")?fd:oc(e,"TransitionGroup")?hd:void 0,getNamespace(e,t){let n=t?t.ns:0;if(t&&2===n)if("annotation-xml"===t.tag){if("svg"===e)return 1;t.props.some((e=>6===e.type&&"encoding"===e.name&&null!=e.value&&("text/html"===e.value.content||"application/xhtml+xml"===e.value.content)))&&(n=0)}else/^m(?:[ions]|text)$/.test(t.tag)&&"mglyph"!==e&&"malignmark"!==e&&(n=0);else t&&1===n&&("foreignObject"!==t.tag&&"desc"!==t.tag&&"title"!==t.tag||(n=0));if(0===n){if("svg"===e)return 1;if("math"===e)return 2}return n},getTextMode({tag:e,ns:t}){if(0===t){if("textarea"===e||"title"===e)return 1;if(vd(e))return 2}return 0}},yd=(e,t)=>{const n=q(e);return tc(JSON.stringify(n),!1,t,3)},wd=j("passive,once,capture"),xd=j("stop,prevent,self,ctrl,shift,alt,meta,exact,middle"),kd=j("left,right"),$d=j("onkeyup,onkeydown,onkeypress",!0),Sd=(e,t)=>ic(e)&&"onclick"===e.content.toLowerCase()?tc(t,!0):4!==e.type?nc(["(",e,`) === "onClick" ? "${t}" : (`,e,")"]):e,Cd=(e,t)=>{1!==e.type||0!==e.tagType||"script"!==e.tag&&"style"!==e.tag||t.removeNode()},Nd=[e=>{1===e.type&&e.props.forEach(((t,n)=>{6===t.type&&"style"===t.name&&t.value&&(e.props[n]={type:7,name:"bind",arg:tc("style",!0,t.loc),exp:yd(t.value.content,t.loc),modifiers:[],loc:t.loc})}))}],Ad={cloak:()=>({props:[]}),html:(e,t,n)=>{const{exp:a,loc:l}=e;return t.children.length&&(t.children.length=0),{props:[ec(tc("innerHTML",!0,l),a||tc("",!0))]}},text:(e,t,n)=>{const{exp:a,loc:l}=e;return t.children.length&&(t.children.length=0),{props:[ec(tc("textContent",!0),a?iu(a,n)>0?a:ac(n.helperString(Pr),[a],l):tc("",!0))]}},model:(e,t,n)=>{const a=td(e,t,n);if(!a.props.length||1===t.tagType)return a;const{tag:l}=t,s=n.isCustomElement(l);if("input"===l||"textarea"===l||"select"===l||s){let e=rd,i=!1;if("input"===l||s){const n=bc(t,"type");if(n){if(7===n.type)e=ud;else if(n.value)switch(n.value.content){case"radio":e=id;break;case"checkbox":e=od;break;case"file":i=!0}}else(function(e){return e.props.some((e=>!(7!==e.type||"bind"!==e.name||e.arg&&4===e.arg.type&&e.arg.isStatic)))})(t)&&(e=ud)}else"select"===l&&(e=cd);i||(a.needRuntime=n.helper(e))}return a.props=a.props.filter((e=>!(4===e.key.type&&"modelValue"===e.key.content))),a},on:(e,t,n)=>Ju(e,0,n,(t=>{const{modifiers:a}=e;if(!a.length)return t;let{key:l,value:s}=t.props[0];const{keyModifiers:i,nonKeyModifiers:o,eventOptionModifiers:r}=((e,t,n,a)=>{const l=[],s=[],i=[];for(let n=0;n<t.length;n++){const a=t[n];wd(a)?i.push(a):kd(a)?ic(e)?$d(e.content)?l.push(a):s.push(a):(l.push(a),s.push(a)):xd(a)?s.push(a):l.push(a)}return{keyModifiers:l,nonKeyModifiers:s,eventOptionModifiers:i}})(l,a);if(o.includes("right")&&(l=Sd(l,"onContextmenu")),o.includes("middle")&&(l=Sd(l,"onMouseup")),o.length&&(s=ac(n.helper(dd),[s,JSON.stringify(o)])),!i.length||ic(l)&&!$d(l.content)||(s=ac(n.helper(pd),[s,JSON.stringify(i)])),r.length){const e=r.map(Pe).join("");l=ic(l)?tc(`${l.content}${e}`,!0):nc(["(",l,`) + "${e}"`])}return{props:[ec(l,s)]}})),show:(e,t,n)=>({props:[],needRuntime:n.helper(_d)})},Ed=Object.create(null);function Td(e,t){if(!me(e)){if(!e.nodeType)return ne;e=e.innerHTML}const n=e,a=Ed[n];if(a)return a;if("#"===e[0]){const t=document.querySelector(e);e=t?t.innerHTML:""}const{code:l}=function(e,t={}){return sd(e,oe({},bd,t,{nodeTransforms:[Cd,...Nd,...t.nodeTransforms||[]],directiveTransforms:oe({},Ad,t.directiveTransforms||{}),transformHoist:null}))}(e,oe({hoistStatic:!0,onError:void 0,onWarn:ne},t)),s=new Function("Vue",l)(ir);return s._rc=!0,Ed[n]=s}ui(Td);var Pd=Object.freeze({__proto__:null,BaseTransition:Da,Comment:$s,EffectScope:Re,Fragment:xs,KeepAlive:Za,ReactiveEffect:Qe,Static:Ss,Suspense:wa,Teleport:ws,Text:ks,Transition:io,TransitionGroup:So,VueElement:to,callWithAsyncErrorHandling:In,callWithErrorHandling:Pn,camelize:Ae,capitalize:Pe,cloneVNode:qs,compatUtils:null,compile:Td,computed:vi,createApp:nr,createBlock:Os,createCommentVNode:Ks,createElementBlock:Ms,createElementVNode:zs,createHydrationRenderer:_s,createPropsRestProxy:Ni,createRenderer:ps,createSSRApp:ar,createSlots:Nl,createStaticVNode:Gs,createTextVNode:Hs,createVNode:Bs,customRef:xn,defineAsyncComponent:Ja,defineComponent:Ka,defineCustomElement:Zi,defineEmits:yi,defineExpose:wi,defineProps:bi,defineSSRCustomElement:Qi,get devtools(){return na},effect:tt,effectScope:De,getCurrentInstance:ni,getCurrentScope:Be,getTransitionRawChildren:Ga,guardReactiveProps:Vs,h:Ei,handleError:Mn,hydrate:tr,initCustomFormatter:Ii,initDirectivesForSSR:sr,inject:Aa,isMemoSame:Oi,isProxy:ln,isReactive:tn,isReadonly:nn,isRef:pn,isRuntimeOnly:di,isShallow:an,isVNode:Us,markRaw:on,mergeDefaults:Ci,mergeProps:Xs,nextTick:Kn,normalizeClass:H,normalizeProps:G,normalizeStyle:z,onActivated:el,onBeforeMount:rl,onBeforeUnmount:pl,onBeforeUpdate:ul,onDeactivated:tl,onErrorCaptured:gl,onMounted:cl,onRenderTracked:ml,onRenderTriggered:hl,onScopeDispose:Ve,onServerPrefetch:fl,onUnmounted:_l,onUpdated:dl,openBlock:As,popScopeId:pa,provide:Na,proxyRefs:yn,pushScopeId:da,queuePostFlushCb:Xn,reactive:Yt,readonly:Zt,ref:_n,registerRuntimeCompiler:ui,render:er,renderList:Cl,renderSlot:Al,resolveComponent:yl,resolveDirective:kl,resolveDynamicComponent:xl,resolveFilter:null,resolveTransitionHooks:Ba,setBlockTracking:Ps,setDevtoolsHook:la,setTransitionHooks:Ha,shallowReactive:Xt,shallowReadonly:Qt,shallowRef:fn,ssrContextKey:Ti,ssrUtils:null,stop:nt,toDisplayString:Z,toHandlerKey:Ie,toHandlers:Tl,toRaw:sn,toRef:Sn,toRefs:kn,transformVNodeArgs:js,triggerRef:gn,unref:vn,useAttrs:$i,useCssModule:no,useCssVars:ao,useSSRContext:Pi,useSlots:ki,useTransitionState:La,vModelCheckbox:Mo,vModelDynamic:Do,vModelRadio:Uo,vModelSelect:Fo,vModelText:Io,vShow:Ko,version:Ui,warn:An,watch:Ma,watchEffect:Ea,watchPostEffect:Ta,watchSyncEffect:Pa,withAsyncContext:Ai,withCtx:fa,withDefaults:xi,withDirectives:vl,withKeys:Go,withMemo:Mi,withModifiers:qo,withScopeId:_a}),Id={components:{},props:{id:String,chart_type:String,register_on_status_change:Boolean,base_url_request:String,get_params_url_request:Function,get_custom_chart_options:Function},emits:["apply","hidden","showed","chart_reloaded","zoom"],created(){},beforeUnmount(){this.chart.destroyChart()},data:()=>({chart:null,chart_options:null,from_zoom:!1}),async mounted(){await this.init(),ntopng_sync.ready(this.$props.id)},methods:{init:async function(){let e=ntopng_status_manager.get_status(),t=this.get_url_request(e);this.register_on_status_change&&this.register_status(e),await this.draw_chart(t)},get_data_uri:async function(e){if(null==this.chart)return null;return await this.chart.to_data_uri()},download_chart_png:async function(e,t){if(null==this.chart)return;let n=await this.chart.to_data_uri();downloadURI(n,e)},register_status:function(e){let t=this.get_url_request(e);ntopng_status_manager.on_status_change(this.id,(e=>{1==this.from_zoom&&(this.from_zoom=!1);let n=this.get_url_request(e);n!=t?(t=n,this.update_chart(n)):t=n}),!1)},get_url_request:function(e){let t;return null!=this.get_params_url_request?(null==e&&(e=ntopng_status_manager.get_status()),t=this.get_params_url_request(e)):t=ntopng_url_manager.get_url_params(),`${this.base_url_request}?${t}`},draw_chart:async function(e){let t=ntopChartApex,n=this.chart_type;null==n&&(n=t.typeChart.TS_STACKED),this.chart=t.newChart(n),this.chart.registerEvent("zoomed",((e,t)=>this.on_zoomed(e,t)));let a=await this.get_chart_options(e);this.chart.drawChart(this.$refs.chart,a)},update_chart:async function(e){let t=await this.get_chart_options(e);this.chart.updateChart(t)},get_chart_options:async function(e){let t;return t=null==this.get_custom_chart_options?await ntopng_utility.http_request(e):await this.get_custom_chart_options(e),this.$emit("chart_reloaded",t),t},on_zoomed:function(e,{xaxis:t,yaxis:n}){this.from_zoom=!0;const a=moment(t.min),l=moment(t.max);let s={epoch_begin:Number.parseInt(a.unix()),epoch_end:Number.parseInt(l.unix())};ntopng_events_manager.emit_event(ntopng_events.EPOCH_CHANGE,s,this.id),this.$emit("zoom",s)}}};const Md={style:{width:"100%"},ref:"chart"};Id.render=function(e,t,n,a,l,s){return As(),Ms("div",Md,null,512)},Id.__file="http_src/vue/chart.vue";const Od=["selected","value","disabled"],Ud=["label"],Fd=["selected","value","disabled"];var jd={__name:"select-search",props:{id:String,options:Array,selected_option:Object,disable_change:Boolean},emits:["update:selected_option","select_option"],setup(e,{expose:t,emit:n}){const a=e,l=_n(null),s=_n([]),i=_n([]),o=_n({});function r(){return null==a.selected_option?a.options[0]:a.selected_option}function c(e){null==e&&(e=r()),o.value=e,null==o.value.value&&(o.value.value=e.label)}function u(e){let t;return null==e&&(e=r()),t=e.value?e.value:e.label,t}Ma((()=>a.selected_option),((e,t)=>{c(e);let n=l.value,a=u(e);$(n).val(a),$(n).trigger("change")}),{flush:"pre"});let d=!0;function p(){!function(){if(s.value=[],i.value=[],null==a.options)return;let e={};a.options.forEach((t=>{let n={...t};0!=n.value&&"0"!=n.value||(n.value=null),null==n.value&&(n.value=n.label),null==t.group?s.value.push(n):(null==e[t.group]&&(e[t.group]={group:n.group,options:[]}),e[t.group].options.push(n))})),i.value=ntopng_utility.object_to_array(e)}(),c()}Ma((()=>a.options),((e,t)=>{1!=a.disable_change&&null!=e&&p()}),{flush:"pre"}),cl((()=>{a.options&&(a.disable_change&&d||p())})),Ma([s,i],((e,t)=>{_()}),{flush:"post"});const _=()=>{let e=l.value;0==d&&f(),$(e).hasClass("select2-hidden-accessible")||($(e).select2({width:"100%",height:"500px",theme:"bootstrap-5",dropdownParent:$(e).parent(),dropdownAutoWidth:!0}),$(e).on("select2:select",(function(e){let t=e.params.data.element._value,l=function(e){null==e&&(e=u());let t=s.value.find((t=>t.value==e));if(null!=t)return t;for(let n=0;n<i.value.length;n+=1)if(t=i.value[n].options.find((t=>t.value==e)),null!=t)return t;return null}(t),o=a.options.find((e=>e.label==l.label));t!=a.selected_option&&(n("update:selected_option",o),n("select_option",o))}))),d=!1};function f(){try{$(l.value).select2("destroy"),$(l.value).off("select2:select")}catch(e){console.error("Destroy select-search catch error:"),console.error(e)}}return t({render:_}),pl((()=>{f()})),(e,t)=>(As(),Ms("select",{class:"select2 form-select",ref_key:"select2",ref:l,required:"",name:"filter_type"},[(As(!0),Ms(xs,null,Cl(s.value,((e,t)=>(As(),Ms("option",{class:"ntopng-dropdown-min-width no-wrap",selected:e.value==o.value.value,value:e.value,disabled:e.disabled},Z(e.label),9,Od)))),256)),(As(!0),Ms(xs,null,Cl(i.value,((e,t)=>(As(),Ms("optgroup",{label:e.group},[(As(!0),Ms(xs,null,Cl(e.options,((e,t)=>(As(),Ms("option",{selected:e.value==o.value.value,value:e.value,disabled:e.disabled},Z(e.label),9,Fd)))),256))],8,Ud)))),256))],512))},__file:"http_src/vue/select-search.vue"},Ld={components:{"select-search":jd},props:{id:String,enable_refresh:Boolean},watch:{enable_refresh:function(e,t){1==e?this.start_refresh():null!=this.refresh_interval&&(clearInterval(this.refresh_interval),this.refresh_interval=null)}},emits:["epoch_change"],created(){},mounted(){let e=ntopng_url_manager.get_url_entry("epoch_begin"),t=ntopng_url_manager.get_url_entry("epoch_end");null!=e&&null!=t&&ntopng_events_manager.emit_event(ntopng_events.EPOCH_CHANGE,{epoch_begin:Number.parseInt(e),epoch_end:Number.parseInt(t)},this.$props.id);let n=this,a=(e,t)=>flatpickr($(this.$refs[e]),{enableTime:!0,dateFormat:"d/m/Y H:i",time_24hr:!0,clickOpens:!0,onChange:function(e,t,a){n.enable_apply=!0,n.wrong_date=n.flat_begin_date.selectedDates[0].getTime()>n.flat_end_date.selectedDates[0].getTime()}});this.flat_begin_date=a("begin-date"),this.flat_end_date=a("end-date"),ntopng_events_manager.on_event_change(this.$props.id,ntopng_events.EPOCH_CHANGE,(e=>this.on_status_updated(e)),!0),ntopng_sync.ready(this.$props.id),this.enable_refresh&&this.start_refresh()},methods:{start_refresh:function(){this.refresh_interval=setInterval((()=>{let e=this.selected_time_option?.value;this.enable_refresh&&null!=e&&"custom"!=e&&(this.update_from_interval=!0,this.change_select_time())}),this.refresh_interval_seconds)},utc_s_to_server_date:function(e){let t=1e3*e,n=new Date(t).getTimezoneOffset(),a=moment.tz(t,ntop_zoneinfo)._offset;return new Date(t+1e3*(a+n)*60)},server_date_to_date:function(e,t){let n=e.getTime(),a=e.getTimezoneOffset(),l=moment.tz(n,ntop_zoneinfo)._offset;return new Date(n-1e3*(l+a)*60)},on_status_updated:function(e){let t=Date.now(),n=t-18e5;null!=e.epoch_end&&null!=e.epoch_begin&&Number.parseInt(e.epoch_end)>Number.parseInt(e.epoch_begin)?(e.epoch_begin=Number.parseInt(e.epoch_begin),e.epoch_end=Number.parseInt(e.epoch_end),t=1e3*e.epoch_end,n=1e3*e.epoch_begin):(e.epoch_end=this.get_utc_seconds(t),e.epoch_begin=this.get_utc_seconds(n),ntopng_url_manager.add_obj_to_url(e),this.emit_epoch_change(e,this.$props.id)),this.flat_begin_date.setDate(this.utc_s_to_server_date(e.epoch_begin)),this.flat_end_date.setDate(this.utc_s_to_server_date(e.epoch_end)),this.set_select_time_value(n,t),this.epoch_status={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end},0==this.update_from_interval&&this.add_status_in_history(this.epoch_status),this.enable_apply=!1,this.update_from_interval=!1,ntopng_url_manager.add_obj_to_url(this.epoch_status)},set_select_time_value:function(e,t){let n=this.get_select_values();const a=60,l=this.get_utc_seconds(Date.now()),s=this.get_utc_seconds(t),i=this.get_utc_seconds(e);this.is_between(s,l,a)?this.is_between(i,l-n.min_5,a)?this.select_time_value="min_5":this.is_between(i,l-n.min_30,a)?this.select_time_value="min_30":this.is_between(i,l-n.hour,a)?this.select_time_value="hour":this.is_between(i,l-n.day,a)?this.select_time_value="day":this.is_between(i,l-n.week,a)?this.select_time_value="week":this.is_between(i,l-n.month,a)?this.select_time_value="month":this.is_between(i,l-n.year,a)?this.select_time_value="year":this.select_time_value="custom":this.select_time_value="custom",this.time_preset_list.forEach((e=>{e.currently_active=!1,e.value==this.select_time_value&&(this.selected_time_option=e,e.currently_active=!0)}))},apply:function(){let e=this.get_utc_seconds(Date.now()),t=this.server_date_to_date(this.flat_begin_date.selectedDates[0]),n=this.get_utc_seconds(t.getTime()),a=this.server_date_to_date(this.flat_end_date.selectedDates[0]),l=this.get_utc_seconds(a.getTime());l>e&&(l=e);let s={epoch_begin:n,epoch_end:l};this.emit_epoch_change(s)},change_select_time:function(){let e=this.get_select_values()[this.selected_time_option.value],t=this.get_utc_seconds(Date.now()),n={epoch_begin:t-e,epoch_end:t};this.emit_epoch_change(n)},get_select_values:function(){return{min_5:300,min_30:1800,hour:3600,day:this.get_last_day_seconds(),week:this.get_last_week_seconds(),month:this.get_last_month_seconds(),year:this.get_last_year_seconds()}},get_utc_seconds:function(e){return Number.parseInt(e/1e3)},is_between:function(e,t,n){return e>=t-n&&e<=t},get_last_day_seconds:function(){let e=new Date;return this.get_utc_seconds(Date.now()-e.setDate(e.getDate()-1))},get_last_week_seconds:function(){let e=new Date;return this.get_utc_seconds(Date.now()-e.setDate(e.getDate()-7))},get_last_month_seconds:function(){let e=new Date;return this.get_utc_seconds(Date.now()-e.setMonth(e.getMonth()-1))},get_last_year_seconds:function(){let e=new Date;return this.get_utc_seconds(Date.now()-e.setMonth(e.getMonth()-12))},zoom:function(e){if(null==this.epoch_status)return;let t=(this.epoch_status.epoch_end-this.epoch_status.epoch_begin)/e,n=this.epoch_status.epoch_end/2+this.epoch_status.epoch_begin/2;this.epoch_status.epoch_begin=n-t/2,this.epoch_status.epoch_end=n+t/2;let a=this.get_utc_seconds(Date.now());this.epoch_status.epoch_end>a&&(this.epoch_status.epoch_end=a),this.epoch_status.epoch_end=Number.parseInt(this.epoch_status.epoch_end),this.epoch_status.epoch_begin=Number.parseInt(this.epoch_status.epoch_begin),this.epoch_status.epoch_begin==this.epoch_status.epoch_end&&(this.epoch_status.epoch_begin-=2),this.emit_epoch_change(this.epoch_status)},jump_time_back:function(){if(null==this.epoch_status)return;this.epoch_status.epoch_begin-=1800,this.epoch_status.epoch_end-=1800,this.emit_epoch_change(this.epoch_status)},jump_time_ahead:function(){if(null==this.epoch_status)return;let e=this.epoch_status.epoch_end,t=this.get_utc_seconds(Date.now());this.epoch_status.epoch_end+=1800,this.epoch_status.epoch_end>t&&(this.epoch_status.epoch_end=t),this.epoch_status.epoch_begin+=this.epoch_status.epoch_end-e,this.emit_epoch_change(this.epoch_status)},emit_epoch_change:function(e,t){null!=e.epoch_end&&null!=e.epoch_begin&&(this.wrong_date=!1,e.epoch_begin>e.epoch_end?this.wrong_date=!0:(t!=this.id&&this.on_status_updated(e),ntopng_events_manager.emit_event(ntopng_events.EPOCH_CHANGE,e,this.id),this.$emit("epoch_change",e)))},add_status_in_history:function(e){this.history_last_status=this.history[this.history.length-1],this.history.length>5&&this.history.shift(),this.history.push(e)},apply_status_by_history:function(){null!=this.history_last_status&&(this.history.pop(),this.history.pop(),this.emit_epoch_change(this.history_last_status))}},data:()=>({i18n:e=>i18n(e),epoch_status:null,refresh_interval:null,refresh_interval_seconds:6e4,update_from_interval:!1,history:[],history_last_status:null,enable_apply:!1,select_time_value:"min_5",selected_time_option:{value:"min_5",label:i18n("show_alerts.presets.5_min"),currently_active:!1},wrong_date:!1,flat_begin_date:null,flat_end_date:null,time_preset_list:[{value:"min_5",label:i18n("show_alerts.presets.5_min"),currently_active:!1},{value:"min_30",label:i18n("show_alerts.presets.30_min"),currently_active:!0},{value:"hour",label:i18n("show_alerts.presets.hour"),currently_active:!1},{value:"day",label:i18n("show_alerts.presets.day"),currently_active:!1},{value:"week",label:i18n("show_alerts.presets.week"),currently_active:!1},{value:"month",label:i18n("show_alerts.presets.month"),currently_active:!1},{value:"year",label:i18n("show_alerts.presets.year"),currently_active:!1},{value:"custom",label:i18n("show_alerts.presets.custom"),currently_active:!1,disabled:!0}]})};const Rd=e=>(da("data-v-bc6f1430"),e=e(),pa(),e),Dd={class:"input-group"},zd={class:"form-group"},Bd={class:"controls d-flex flex-wrap"},Vd={class:"btn-group me-auto btn-group-sm"},qd={class:"btn-group ms-2"},Hd=Rd((()=>zs("span",{class:"input-group-text"},[zs("i",{class:"fas fa-calendar-alt"})],-1))),Gd={class:"flatpickr flatpickr-input",type:"text",placeholder:"Choose a date..","data-id":"datetime",ref:"begin-date"},Kd=Rd((()=>zs("span",{class:"input-group-text"},[zs("i",{class:"fas fa-long-arrow-alt-right"})],-1))),Wd={class:"flatpickr flatpickr-input",type:"text",placeholder:"Choose a date..","data-id":"datetime",ref:"end-date"},Jd=["title"],Yd=[Rd((()=>zs("i",{class:"fas fa-exclamation-circle"},null,-1)))],Xd={class:"d-flex align-items-center ms-2"},Zd=["disabled"],Qd={class:"btn-group"},ep=["title"],tp=[Rd((()=>zs("i",{class:"fas fa-long-arrow-alt-left"},null,-1)))],np=["title"],ap=[Rd((()=>zs("i",{class:"fas fa-long-arrow-alt-right"},null,-1)))],lp=["title"],sp=[Rd((()=>zs("i",{class:"fas fa-search-plus"},null,-1)))],ip=["title"],op=[Rd((()=>zs("i",{class:"fas fa-search-minus"},null,-1)))],rp=["disabled","title"],cp=[Rd((()=>zs("i",{class:"fas fa-undo"},null,-1)))],up=["disabled","title"],dp=[Rd((()=>zs("i",{class:"fas fa-sync"},null,-1)))];function pp(e,t){void 0===t&&(t={});var n=t.insertAt;if(e&&"undefined"!=typeof document){var a=document.head||document.getElementsByTagName("head")[0],l=document.createElement("style");l.type="text/css","top"===n&&a.firstChild?a.insertBefore(l,a.firstChild):a.appendChild(l),l.styleSheet?l.styleSheet.cssText=e:l.appendChild(document.createTextNode(e))}}pp("\n.date_time_input[data-v-bc6f1430] {\n  width: 10.5rem;\n  max-width: 10.5rem;\n  min-width: 10.5rem;\n}\n"),Ld.render=function(e,t,n,a,l,s){const i=yl("select-search");return As(),Ms("div",Dd,[zs("div",zd,[zs("div",Bd,[zs("div",Vd,[Al(e.$slots,"begin"),Bs(i,{selected_option:l.selected_time_option,"onUpdate:selected_option":t[0]||(t[0]=e=>l.selected_time_option=e),id:"time_preset_range_picker",options:l.time_preset_list,onSelect_option:s.change_select_time},null,8,["selected_option","options","onSelect_option"]),zs("div",qd,[Hd,zs("input",Gd,null,512),Ks(' <input ref="begin-date" @change="enable_apply=true" @change="change_begin_date" type="date" class="date_time_input begin-timepicker form-control border-right-0 fix-safari-input"> '),Ks(' <input ref="begin-time" @change="enable_apply=true" type="time" class="date_time_input begin-timepicker form-control border-right-0 fix-safari-input"> '),Kd,zs("input",Wd,null,512),Ks(' <input ref="end-date" @change="enable_apply=true" type="date" class="date_time_input end-timepicker form-control border-left-0 fix-safari-input" style="width: 2.5rem;"> '),Ks(' <input ref="end-time" @change="enable_apply=true" type="time" class="date_time_input end-timepicker form-control border-left-0 fix-safari-input"> '),vl(zs("span",{title:l.i18n("wrong_date_range"),style:{"margin-left":"0.2rem",color:"red"}},Yd,8,Jd),[[Ko,l.wrong_date]])]),zs("div",Xd,[zs("button",{disabled:!l.enable_apply||l.wrong_date,onClick:t[1]||(t[1]=(...e)=>s.apply&&s.apply(...e)),class:"btn btn-sm btn-primary"},Z(l.i18n("apply")),9,Zd),zs("div",Qd,[zs("button",{onClick:t[2]||(t[2]=e=>s.jump_time_back()),class:"btn btn-sm btn-link",ref:"btn-jump-time-back",title:l.i18n("date_time_range_picker.btn_move_left")},tp,8,ep),zs("button",{onClick:t[3]||(t[3]=e=>s.jump_time_ahead()),class:"btn btn-sm btn-link me-2",ref:"btn-jump-time-ahead",title:l.i18n("date_time_range_picker.btn_move_right")},ap,8,np),zs("button",{onClick:t[4]||(t[4]=e=>s.zoom(2)),class:"btn btn-sm btn-link",ref:"btn-zoom-in",title:l.i18n("date_time_range_picker.btn_zoom_in")},sp,8,lp),zs("button",{onClick:t[5]||(t[5]=e=>s.zoom(.5)),class:"btn btn-sm btn-link",ref:"btn-zoom-out",title:l.i18n("date_time_range_picker.btn_zoom_out")},op,8,ip),zs("button",{disabled:null==l.history_last_status,onClick:t[6]||(t[6]=e=>s.apply_status_by_history()),class:"btn btn-sm btn-link",title:l.i18n("date_time_range_picker.btn_undo")},cp,8,rp),zs("button",{disabled:"custom"==l.select_time_value,onClick:t[7]||(t[7]=e=>s.change_select_time()),class:"btn btn-sm btn-link",title:l.i18n("date_time_range_picker.btn_refresh")},dp,8,up),Al(e.$slots,"extra_buttons")])])])])])])},Ld.__scopeId="data-v-bc6f1430",Ld.__file="http_src/vue/data-time-range-picker.vue";var _p=Ka({components:{},props:{id:String},emits:["hidden","showed"],created(){},data:()=>({}),mounted(){let e=this;$(this.$refs.modal_id).on("shown.bs.modal",(function(t){e.$emit("showed")})),$(this.$refs.modal_id).on("hidden.bs.modal",(function(t){e.$emit("hidden")})),ntopng_sync.ready(this.$props.id)},methods:{show:function(){$(this.$refs.modal_id).modal("show")},preventEnter:function(){},close:function(){$(this.$refs.modal_id).modal("hide")}}});const fp={class:"modal-dialog modal-dialog-centered modal-lg",role:"document"},hp={class:"modal-content"},mp={class:"modal-header"},gp={class:"modal-title"},vp=zs("div",{class:"modal-close"},[zs("button",{type:"button",class:"btn-close","data-bs-dismiss":"modal","aria-label":"Close"})],-1),bp={class:"modal-body"},yp={class:"modal-footer"},wp=zs("div",{class:"mr-auto"},null,-1),xp=zs("div",{class:"alert alert-info test-feedback w-100",style:{display:"none"}},null,-1);_p.render=function(e,t,n,a,l,s){return As(),Ms("div",{onSubmit:t[0]||(t[0]=qo(((...t)=>e.preventEnter&&e.preventEnter(...t)),["prevent"])),class:"modal fade",ref:"modal_id",tabindex:"-1",role:"dialog","aria-labelledby":"dt-add-filter-modal-title","aria-hidden":"true"},[zs("div",fp,[zs("div",hp,[zs("div",mp,[zs("h5",gp,[Al(e.$slots,"title")]),vp]),zs("div",bp,[Al(e.$slots,"body")]),zs("div",yp,[wp,Al(e.$slots,"footer"),xp])])])],544)},_p.__file="http_src/vue/modal.vue";const kp=e=>(da("data-v-089b0491"),e=e(),pa(),e),$p=kp((()=>zs("a",{target:"_newtab",href:"#",style:{},class:"nav-item text-muted"},[zs("i",{class:"fas fa-question-circle",style:{"margin-left":"28rem","padding-top":"0.8rem"}})],-1))),Sp={class:"nav nav-tabs"},Cp=["disabled"],Np={key:0,style:{"min-height":"8.5rem"}},Ap={class:"form-group ms-2 me-2 mt-3 row"},Ep={class:"col-form-label col-sm-4"},Tp={class:"col-sm-6"},Pp=["pattern"],Ip={key:1,style:{"min-height":"8.5rem"}},Mp={class:"form-group ms-2 me-2 mt-3 row"},Op={class:"col-form-label col-sm-4"},Up={class:"col-sm-8"},Fp={value:"name"},jp={value:"date"},Lp={class:"form-group ms-2 me-2 mt-3 row"},Rp={class:"col-form-label col-sm-4"},Dp={class:"col-sm-8"},zp=["value"],Bp={class:"form-group ms-2 me-2 mt-3 row"},Vp={class:"custom-control custom-switch"},qp={class:"custom-control-label ms-1 form-check-label"},Hp=["disabled"],Gp=["disabled"],Kp=["disabled"];var Wp={__name:"modal-snapshot",props:{csrf:String,page:String},emits:["added_snapshot","deleted_snapshot","deleted_all_snapshots"],setup(e,{expose:t,emit:n}){const a=e,l=_n(null),s=_n("add"),i=_n(""),o=_n(!1),r=_n(""),c=_n(!0),u=_n(""),d=_n(""),p=_n([]),_=_n("date");let f=NtopUtils.REGEXES.singleword;const h=vi((()=>!new RegExp(f).test(d.value))),m=vi((()=>""==i.value));function g(){if(null!=a.page)return a.page;let e="alerts";return null!=window.location.toString().match(/alert_stats.lua/)||(e="flows"),e}let v=null;function b(){v!=_.value&&(p.value.sort(((e,t)=>"name"==_.value?e.name.localeCompare(t.name):e.utc-t.utc)),p.value.length>0&&(i.value=p.value[0]),v=_.value)}let y=!0;const w=async()=>{let e;if(c.value)e=ntopng_url_manager.get_url_params();else{let t=ntopng_url_manager.get_url_object();delete t.epoch_begin,delete t.epoch_end,e=ntopng_url_manager.obj_to_url_params(t)}let t=g(),l={snapshot_name:d.value,filters:e,page:t};l.csrf=a.csrf;let s=`${http_prefix}/lua/pro/rest/v2/add/filters/snapshot.lua`;try{let e={"Content-Type":"application/json"};await ntopng_utility.http_request(s,{method:"post",headers:e,body:JSON.stringify(l)}),y=!0}catch(e){console.error(e)}$(),n("added_snapshots",l)},x=()=>{$();let e=i.value.filters;if(1==o.value){let t=ntopng_status_manager.get_status(),n=ntopng_url_manager.get_url_object(e);n.epoch_begin=t.epoch_begin,n.epoch_end=t.epoch_end,e=ntopng_url_manager.obj_to_url_params(n)}ntopng_url_manager.replace_url_and_reload(e)},k=async e=>{let t=i.value.name;1==e&&(t="*");let l={snapshot_name:t,page:g()};l.csrf=a.csrf;let s=`${http_prefix}/lua/pro/rest/v2/delete/filters/snapshot.lua`;try{let e={"Content-Type":"application/json"};await ntopng_utility.http_request(s,{method:"post",headers:e,body:JSON.stringify(l)}),y=!0}catch(e){console.error(e)}n(1==e?"deleted_all_snapshots":"deleted_snapshot",l),$()},$=()=>{l.value.close()};t({show:()=>{!async function(){s.value="add",d.value="",c.value=!0,o.value=!1;let e=ntopng_status_manager.get_status(),t=S("snapshots.save_time"),n=ntopng_utility.from_utc_to_server_date_format(1e3*e.epoch_begin,"DD/MM/YYYY HH:mm"),a=ntopng_utility.from_utc_to_server_date_format(1e3*e.epoch_end,"DD/MM/YYYY HH:mm");t=t.replace(/\%begin_time/,n),t=t.replace(/\%end_time/,a),u.value=t;let l=S("snapshots.apply_time");if(l=l.replace(/\%begin_time/,n),l=l.replace(/\%end_time/,a),r.value=l,y){y=!1;let e=g(),t=`${http_prefix}/lua/pro/rest/v2/get/filters/snapshots.lua?page=${e}`,n=await ntopng_utility.http_request(t);p.value=ntopng_utility.object_to_array(n)}b(),p.value.length>0&&(i.value=p.value[0])}(),l.value.show()},close:$}),cl((()=>{}));const S=e=>i18n(e);return(e,t)=>(As(),Os(_p,{onShowed:t[8]||(t[8]=e=>{}),ref_key:"modal_id",ref:l},{title:fa((()=>[Hs(Z(S("snapshots.manage"))+" ",1),$p])),body:fa((()=>[zs("ul",Sp,[zs("li",{class:"nav-item",onClick:t[0]||(t[0]=e=>s.value="add")},[zs("a",{class:H(["nav-link",{active:"add"==s.value}]),href:"#"},Z(S("snapshots.add")),3)]),zs("li",{class:"nav-item",onClick:t[1]||(t[1]=e=>(e=>{0==p.value.length&&"select"==e||(s.value=e)})("select"))},[zs("a",{disabled:0==p.value.length,class:H(["nav-link",{active:"select"==s.value,"not-allowed":0==p.value.length}]),href:"#"},Z(S("snapshots.manage")),11,Cp)])]),"add"==s.value?(As(),Ms("div",Np,[zs("div",Ap,[zs("label",Ep,[zs("b",null,Z(S("snapshots.name"))+":",1)]),zs("div",Tp,[vl(zs("input",{pattern:vn(f),placeholder:"",required:"",type:"text",class:"form-control","onUpdate:modelValue":t[2]||(t[2]=e=>d.value=e)},null,8,Pp),[[Io,d.value]])])]),Ks(' <div class="form-group ms-2 me-2 mt-3 row"> '),Ks(' \t<div class="custom-control custom-switch"> '),Ks(' \t  <input type="checkbox" class="custom-control-input whitespace form-check-input" v-model="save_time"> '),Ks(' \t  <label class="custom-control-label ms-1 form-check-label">{{save_time_text}}</label> '),Ks(" \t</div> "),Ks(" </div>       ")])):Ks("v-if",!0),Ks(" action add "),"select"==s.value?(As(),Ms("div",Ip,[zs("div",Mp,[zs("label",Op,[zs("b",null,Z(S("snapshots.order_by")),1)]),zs("div",Up,[vl(zs("select",{class:"form-select",onClick:t[3]||(t[3]=e=>b()),"onUpdate:modelValue":t[4]||(t[4]=e=>_.value=e)},[zs("option",Fp,Z(S("snapshots.name")),1),zs("option",jp,Z(S("snapshots.date")),1)],512),[[Fo,_.value]])])]),zs("div",Lp,[zs("label",Rp,[zs("b",null,Z(S("snapshots.select")),1)]),zs("div",Dp,[vl(zs("select",{class:"form-select","onUpdate:modelValue":t[5]||(t[5]=e=>i.value=e)},[(As(!0),Ms(xs,null,Cl(p.value,(e=>(As(),Ms("option",{value:e},Z(function(e){let t=1e3*e.utc,n=ntopng_utility.from_utc_to_server_date_format(t,"DD/MM/YYYY");return`${e.name} (${n})`}(e)),9,zp)))),256))],512),[[Fo,i.value]])])]),zs("div",Bp,[zs("div",Vp,[vl(zs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input","onUpdate:modelValue":t[6]||(t[6]=e=>o.value=e)},null,512),[[Mo,o.value]]),zs("label",qp,Z(r.value),1)])])])):Ks("v-if",!0),Ks(" action select ")])),footer:fa((()=>["add"==s.value?(As(),Ms("button",{key:0,type:"button",onClick:w,disabled:vn(h),class:"btn btn-primary"},Z(S("snapshots.add")),9,Hp)):Ks("v-if",!0),"select"==s.value?(As(),Ms("button",{key:1,onClick:t[7]||(t[7]=e=>k(!0)),type:"button",style:{"text-align":"left","margin-left":"0px"},class:"btn btn-danger start-0 position-absolute ms-3"},Z(S("snapshots.delete_all")),1)):Ks("v-if",!0),"select"==s.value?(As(),Ms("button",{key:2,type:"button",onClick:k,disabled:vn(m),class:"btn btn-danger"},Z(S("snapshots.delete")),9,Gp)):Ks("v-if",!0),"select"==s.value?(As(),Ms("button",{key:3,type:"button",onClick:x,disabled:vn(m),class:"btn btn-primary"},Z(S("snapshots.apply")),9,Kp)):Ks("v-if",!0)])),_:1},512))}};pp("\ninput[data-v-089b0491]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-089b0491] {\n  cursor: not-allowed;\n}\n"),Wp.__scopeId="data-v-089b0491",Wp.__file="http_src/vue/modal-snapshot.vue";const Jp=e=>(da("data-v-185590b6"),e=e(),pa(),e),Yp={class:"form-group ms-2 me-2 mt-3 row"},Xp={class:"col-11"},Zp={class:"col-form-label"},Qp=[Jp((()=>zs("button",{type:"button",class:"btn border"},[zs("span",null,[zs("i",{class:"fas fa-trash"})])],-1)))],e_={class:"container"},t_={class:"row custom-ms me-2 mt-1"},n_={class:"col-5"},a_=["onUpdate:modelValue"],l_={class:"custom-control-label ms-1 form-check-label"},s_={class:"col-2"},i_=["onUpdate:modelValue"],o_=Jp((()=>zs("label",{class:"custom-control-label ms-1 form-check-label"},"Past ",-1))),r_={class:"col-2"},c_=["onUpdate:modelValue"],u_=Jp((()=>zs("label",{class:"custom-control-label ms-1 form-check-label"},"Avg ",-1))),d_={class:"col-3"},p_=["onUpdate:modelValue"],__=Jp((()=>zs("label",{class:"custom-control-label ms-1 form-check-label"},"95th Perc ",-1)));var f_={__name:"list-timeseries",props:{id:String,timeseries:Array,title:String,show_delete_button:Boolean},emits:["delete_ts","update:timeseries"],setup(e,{emit:t}){const n=e;function a(){console.log(n.timeseries),t("update:timeseries",n.timeseries)}function l(){t("delete_ts",n.id)}return(t,n)=>(As(),Ms("div",null,[zs("div",Yp,[zs("div",Xp,[zs("label",Zp,[zs("b",null,Z(e.title),1)])]),e.show_delete_button?(As(),Ms("div",{key:0,class:"col-1",onClick:l},Qp)):Ks("v-if",!0)]),zs("div",e_,[(As(!0),Ms(xs,null,Cl(e.timeseries,(e=>(As(),Ms("div",t_,[zs("div",n_,[vl(zs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:a,"onUpdate:modelValue":t=>e.raw=t},null,40,a_),[[Mo,e.raw]]),zs("label",l_,Z(e.label),1)]),zs("div",s_,[vl(zs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:a,"onUpdate:modelValue":t=>e.past=t},null,40,i_),[[Mo,e.past]]),o_]),zs("div",r_,[vl(zs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:a,"onUpdate:modelValue":t=>e.avg=t},null,40,c_),[[Mo,e.avg]]),u_]),zs("div",d_,[vl(zs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:a,"onUpdate:modelValue":t=>e.perc_95=t},null,40,p_),[[Mo,e.perc_95]]),__])])))),256))])]))}};pp("\n.custom-ms[data-v-185590b6] {\n  margin-left: 2rem !important;\n}\n.inline-block[data-v-185590b6] {\n    display: inline-block;\n    margin-right: 1rem;\n}\n.border[data-v-185590b6] {\n    border-style: solid !important;\n}\n"),f_.__scopeId="data-v-185590b6",f_.__file="http_src/vue/list-timeseries.vue";const h_=f.getFormatter(f.types.bytes.id),m_="page-stats-action-link",g_="page-stats-action-jump-historical",v_={table_value:"interface",title:i18n("page_stats.top.top_applications"),view:"top_protocols",default_sorting_columns:2,default:!0,columns:[{columnName:i18n("application"),name:"application",data:"protocol",handlerId:m_,render:function(e,t,n){let a=this,l={handlerId:m_,onClick:function(){console.log(e),console.log(n);let t=`top:${n.ts_schema}`;a.add_metric_from_metric_schema(t,n.ts_query)}};return U.createLinkCallback({text:e.label,handler:l})}},{columnName:i18n("traffic"),name:"traffic",data:"traffic",orderable:!1,render:e=>h_(e)},{columnName:i18n("percentage"),name:"traffic_perc",data:"percentage",render:e=>{const t=e.toFixed(1);return n.createProgressBar(t)}},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:g_,render_if:function(e){return e.is_history_enabled},render:function(e,t,n){let a=this;const l={handlerId:g_,onClick:function(){a.status;let e=w.serialize_param("l7proto",`${n.protocol.id};eq`),t=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${a.status.epoch_begin}&epoch_end=${a.status.epoch_end}&${e}`,l=a.source_type,s=a.source_array,i="",o=l.source_def_array.map(((e,t)=>{let n=s[t];return"ifid"==e.value?w.serialize_param("ifid",n.value):"host"==e.value?w.serialize_param("ip",`${n.value};eq`):void 0}));i=o.join("&"),t=`${t}&${i}`,console.log(t),window.open(t)}};return U.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:l}])}}]},b_={table_value:"interface",title:i18n("page_stats.top.top_categories"),view:"top_categories",default_sorting_columns:2,columns:[{columnName:i18n("page_stats.top.category"),name:"category",data:"category",handlerId:m_,render:function(e,t,n){let a=this,l={handlerId:m_,onClick:function(){console.log(e),console.log(n);let t=`top:${n.ts_schema}`;a.add_metric_from_metric_schema(t,n.ts_query)}};return U.createLinkCallback({text:e.label,handler:l})}},{columnName:i18n("traffic"),name:"traffic",data:"traffic",orderable:!1,render:e=>h_(e)},{columnName:i18n("percentage"),name:"traffic_perc",data:"percentage",render:e=>{const t=e.toFixed(1);return n.createProgressBar(t)}},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:g_,render_if:function(e){return e.is_history_enabled},render:function(e,t,n){let a=this;const l={handlerId:g_,onClick:function(){a.status;let e=w.serialize_param("l7cat",`${n.category.id};eq`),t=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${a.status.epoch_begin}&epoch_end=${a.status.epoch_end}&${e}`,l=a.source_type,s=a.source_array,i="",o=l.source_def_array.map(((e,t)=>{let n=s[t];return"ifid"==e.value?w.serialize_param("ifid",n.value):"host"==e.value?w.serialize_param("ip",`${n.value};eq`):void 0}));i=o.join("&"),t=`${t}&${i}`,console.log(t),window.open(t)}};return U.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:l}])}}]},y_=[v_,b_,{table_value:"interface",title:i18n("page_stats.top.top_senders"),view:"top_senders",default_sorting_columns:2,columns:[{columnName:i18n("page_stats.top.host_name"),name:"host_name",data:"host",handlerId:m_,render:function(e,t,n){let a=this,l={handlerId:m_,onClick:async function(){console.log(e),console.log(n);a.add_ts_group_from_source_value_dict("host",n.tags,"host:traffic")}};return a.sources_types_enabled.host?U.createLinkCallback({text:e.label,handler:l}):e.label}},{columnName:i18n("page_stats.top.sent"),name:"sent",data:"traffic",orderable:!1,render:e=>h_(e)},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:g_,render_if:function(e){return e.is_history_enabled},render:function(e,t,n){let a=this;const l={handlerId:g_,onClick:function(){a.status;let e=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${a.status.epoch_begin}&epoch_end=${a.status.epoch_end}`;a.source_type,a.source_array;let t="",l=[];for(let e in n.tags){let t=n.tags[e],a="";"ifid"==e?a=w.serialize_param(e,t):"host"==e&&(a=w.serialize_param("ip",`${t};eq`)),l.push(a)}t=l.join("&"),e=`${e}&${t}`,console.log(e),window.open(e)}};return U.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:l}])}}]},{table_value:"interface",title:i18n("page_stats.top.top_receivers"),view:"top_receivers",default_sorting_columns:2,columns:[{columnName:i18n("page_stats.top.host_name"),name:"host_name",data:"host",handlerId:m_,render:function(e,t,n){let a=this,l={handlerId:m_,onClick:async function(){console.log(e),console.log(n);a.add_ts_group_from_source_value_dict("host",n.tags,"host:traffic")}};return a.sources_types_enabled.host?U.createLinkCallback({text:e.label,handler:l}):e.label}},{columnName:i18n("page_stats.top.received"),name:"received",data:"traffic",orderable:!1,render:e=>h_(e)},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:g_,render_if:function(e){return e.is_history_enabled},render:function(e,t,n){let a=this;const l={handlerId:g_,onClick:function(){a.status;let e=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${a.status.epoch_begin}&epoch_end=${a.status.epoch_end}`;a.source_type,a.source_array;let t="",l=[];for(let e in n.tags){let t=n.tags[e],a="";"ifid"==e?a=w.serialize_param(e,t):"host"==e&&(a=w.serialize_param("ip",`${t};eq`)),l.push(a)}t=l.join("&"),e=`${e}&${t}`,console.log(e),window.open(e)}};return U.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:l}])}}]}];let w_=y_.find((e=>"top_protocols"==e.view));null!=w_&&(w_=v.clone(w_),w_.table_value="host");const x_=[w_],k_=f.getFormatter(f.types.bytes.id),$_=f.getFormatter(f.types.bps.id),S_="page-stats-action-link",C_={table_value:"snmp",table_source_def_value_dict:{ifid:!0,device:!0,if_index:!1},title:i18n("page_stats.top.top_interfaces"),view:"top_snmp_ifaces",default_sorting_columns:4,f_get_label:e=>{let t,n=e.source_type.source_def_array;for(let a=0;a<n.length;a+=1)if("device"==n[a].value){t=e.source_array[a].label;break}return`${i18n("page_stats.top.top_interfaces")} - SNMP ${i18n("page_stats.source_def.device")} ${t}`},default:!0,columns:[{columnName:i18n("interface"),name:"interface",data:"interface",handlerId:S_,render:function(e,t,n){let a=this,l={handlerId:S_,onClick:function(){a.add_ts_group_from_source_value_dict("snmp_interface",n.tags,"snmp_if:traffic")}},s=`${e.label} (${e.id})`;return U.createLinkCallback({text:s,handler:l})}},{columnName:i18n("page_stats.top.sent"),name:"sent",data:"sent",orderable:!0,render:e=>k_(e)},{columnName:i18n("page_stats.top.received"),name:"received",data:"rcvd",orderable:!0,render:e=>k_(e)},{columnName:i18n("traffic"),name:"traffic",data:"total",orderable:!0,render:e=>k_(e)},{columnName:i18n("percentage"),name:"traffic_perc",data:"percentage",render:e=>{const t=e.toFixed(1);return n.createProgressBar(t)}},{columnName:i18n("page_stats.top.throughput"),name:"throughput",data:"throughput",orderable:!0,render:e=>$_(e)}]},N_=[C_],A_={hide:"hide",select:"select",input:"input"},E_={ifid:e=>{let t=e.ifname;return null!=e.name&&(t=e.name),{label:t,value:e.ifid}},pool:e=>{let t=e.pool_id;return null!=e.name&&(t=e.name),{label:t,value:e.pool_id}},am_host:e=>({label:`${e.label} ${e.measurement}`,value:`${e.host},metric:${e.measurement_key}`})},T_={interface:y_,host:x_,snmp_interface:N_,snmp_device:N_},P_=[{id:"interface",regex_page_url:"lua/if_stats",label:i18n("page_stats.source_def.interface"),query:"iface",source_def_array:[{main_source_def:!0,label:i18n("page_stats.source_def.interface"),regex_type:null,sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",sources_function:null,value:"ifid",value_url:null,value_map_sources_res:null,disable_tskey:null,f_get_value_url:null,f_set_value_url:null,ui_type:A_.select}]},{id:"host",regex_page_url:"lua/host_details",label:i18n("page_stats.source_def.host"),table_value:"host",query:"host",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:A_.select},{main_source_def:!0,label:i18n("page_stats.source_def.host"),regex_type:"ip",value:"host",ui_type:A_.input}]},{id:"mac",regex_page_url:"lua/mac_details",label:i18n("page_stats.source_def.mac"),query:"mac",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:A_.select},{main_source_def:!0,label:i18n("page_stats.source_def.mac"),regex_type:"macAddress",value:"mac",value_url:"host",ui_type:A_.input}]},{id:"network",regex_page_url:"lua/network_details",label:i18n("page_stats.source_def.network"),query:"subnet",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:A_.select},{main_source_def:!0,label:i18n("page_stats.source_def.network"),regex_type:"text",value:"subnet",ui_type:A_.input}]},{id:"as",regex_page_url:"lua/as_details",label:i18n("page_stats.source_def.as"),query:"asn",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:A_.select},{main_source_def:!0,label:i18n("page_stats.source_def.as"),regex_type:"text",value:"asn",ui_type:A_.input}]},{id:"country",regex_page_url:"lua/country_details",label:i18n("page_stats.source_def.country"),query:"country",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:A_.select},{main_source_def:!0,label:i18n("page_stats.source_def.country"),regex_type:"text",value:"country",ui_type:A_.input}]},{id:"os",regex_page_url:"lua/os_details",label:i18n("page_stats.source_def.os"),query:"os",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:A_.select},{main_source_def:!0,label:i18n("page_stats.source_def.os"),regex_type:"text",value:"os",ui_type:A_.input}]},{id:"vlan",regex_page_url:"lua/vlan_details",label:i18n("page_stats.source_def.vlan"),query:"vlan",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:A_.select},{main_source_def:!0,label:i18n("page_stats.source_def.vlan"),regex_type:"text",value:"vlan",ui_type:A_.input}]},{id:"pool",regex_page_url:"lua/pool_details",label:i18n("page_stats.source_def.pool"),query:"host_pool",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:A_.select},{main_source_def:!0,label:i18n("page_stats.source_def.pool"),sources_url:"lua/rest/v2/get/host/pools.lua",value:"pool",ui_type:A_.select}]},{id:"system",regex_page_url:"lua/system_stats",label:i18n("page_stats.source_def.system"),query:"system",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"System",value:-1}],value:"ifid",ui_type:A_.hide}]},{id:"profile",regex_page_url:"lua/profile_details",label:i18n("page_stats.source_def.profile"),query:"profile",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:A_.select},{main_source_def:!0,label:i18n("page_stats.source_def.profile"),regex_type:"text",value:"profile",ui_type:A_.input}]},{id:"redis",regex_page_url:"lua/monitor/redis_monitor.lua",label:i18n("page_stats.source_def.redis"),query:"redis",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"Redis",value:-1}],value:"ifid",ui_type:A_.hide}]},{id:"influx",regex_page_url:"lua/monitor/influxdb_monitor.lua",label:i18n("page_stats.source_def.influx"),query:"influxdb",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"Influx",value:-1}],value:"ifid",ui_type:A_.hide}]},{id:"active_monitoring",regex_page_url:"lua/monitor/active_monitoring_monitor.lua",label:i18n("page_stats.source_def.active_monitoring"),query:"am",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"",value:-1}],value:"ifid",ui_type:A_.hide},{main_source_def:!0,label:i18n("page_stats.source_def.active_monitoring"),sources_url:"lua/rest/v2/get/am_host/list.lua",value:"host",disable_tskey:!0,value_map_sources_res:"am_host",ui_type:A_.select}]},{id:"snmp_interface",id_group:"snmp",regex_page_url:"lua/pro/enterprise/snmp_interface_details",label:i18n("page_stats.source_def.snmp_interface"),query:"snmp_interface",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"",value:-1}],value:"ifid",ui_type:A_.hide},{label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"host",ui_type:A_.input},{main_source_def:!0,label:i18n("page_stats.source_def.snmp_interface"),regex_type:"text",value:"if_index",value_url:"snmp_port_idx",ui_type:A_.input}]},{id:"snmp_device",id_group:"snmp",regex_page_url:"lua/pro/enterprise/snmp_device_details",label:i18n("page_stats.source_def.snmp_device"),query:"snmp_device",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"",value:-1}],value:"ifid",ui_type:A_.hide},{main_source_def:!0,label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"host",ui_type:A_.input}]},{id:"flow_device",regex_page_url:"lua/pro/enterprise/flowdevices_stats",label:i18n("page_stats.source_def.flow_device"),query:"flowdev",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:A_.select},{main_source_def:!0,label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:A_.input}]},{id:"flow_interface",regex_page_url:"lua/pro/enterprise/flowdevice_interface_details",label:i18n("page_stats.source_def.flow_interface"),query:"flowdev_port",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:A_.select},{label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:A_.input},{main_source_def:!0,label:i18n("page_stats.source_def.port"),regex_type:"port",value:"port",value_url:"snmp_port_idx",ui_type:A_.input}]},{id:"sflow_device",regex_page_url:"lua/pro/enterprise/sflowdevices_stats",label:i18n("page_stats.source_def.sflow_device"),query:"sflowdev",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:A_.select},{main_source_def:!0,label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:A_.input}]},{id:"sflow_interface",regex_page_url:"lua/pro/enterprise/sflowdevice_interface_details",label:i18n("page_stats.source_def.sflow_interface"),query:"sflowdev_port",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:A_.select},{label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:A_.input},{main_source_def:!0,label:i18n("page_stats.source_def.port"),regex_type:"port",value:"port",value_url:"snmp_port_idx",ui_type:A_.input}]},{id:"observation_point",regex_page_url:"lua/pro/enterprise/observation_points",label:i18n("page_stats.source_def.observation_point"),query:"obs_point",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:A_.select},{main_source_def:!0,label:i18n("page_stats.source_def.observation_point"),regex_type:"text",value:"obs_point",value_url:"observation_point",ui_type:A_.input}]},{id:"pod",regex_page_url:"lua/pod_details",label:i18n("page_stats.source_def.pod"),query:"pod",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:A_.select},{main_source_def:!0,label:i18n("page_stats.source_def.pod"),regex_type:"text",value:"pod",ui_type:A_.input}]},{id:"container",regex_page_url:"lua/container_details",label:i18n("page_stats.source_def.container"),query:"container",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:A_.select},{main_source_def:!0,label:i18n("page_stats.source_def.container"),regex_type:"text",value:"container",ui_type:A_.input}]}],I_={ui_types:A_,sources_url_el_to_source:E_,sources_types:P_,sources_types_tables:T_},M_=e=>{let t=[];e.forEach((e=>{let n=function(e){let t=[];e.timeseries.forEach((e=>{t.push(`${e.id}=${e.raw}:${e.past}:${e.avg}:${e.perc_95}`)}));let n=e.metric.schema;null!=e.metric.query&&(n=`${n}+${e.metric.query}`);let a=t.join("|"),l=e.source_array.map((e=>e.value)).join("+");return`${e.source_type.id};${l};${n};${a}`}(e);t.push(n)}));let n=t.join(";;");w.set_key_to_url("timeseries_groups",n)};const O_=(e,t,n)=>{let a=j_(e,t,n),l=[];for(let e in n.timeseries){let t=n.timeseries[e];l.push({id:e,label:t.label,raw:!0,past:!1,avg:!1,perc_95:!1})}return{id:a,source_type:e,source_array:t,metric:n,timeseries:l}},U_=async(e,t,n)=>{let a=X_(),l=await z_(e,a),s=await Y_(e,a,l),i=ef(s,t,n);return[O_(a,l,i)]};async function F_(e){let t=e.split(";"),n=t[0],a=t[1].split("+"),l=t[2].split("+");l.length<2&&l.push(null);let s=t[3],i=D_(n),o=await V_(http_prefix,i,a),r=await Z_(http_prefix,i,o,l[0],l[1]),c=function(e,t){let n=e.split("|"),a=/(.+)=(.+):(.+):(.+):(.+)/,l=[];return n.forEach((e=>{let n=a.exec(e),s=n[1],i=t.timeseries[s].label,o=JSON.parse(n[2]),r=JSON.parse(n[3]),c=JSON.parse(n[4]),u=JSON.parse(n[5]);l.push({id:s,label:i,raw:o,past:r,avg:c,perc_95:u})})),l}(s,r);return{id:j_(i,o,r),source_type:i,source_array:o,metric:r,timeseries:c}}const j_=(e,t,n,a,l)=>{let s="";null!=n&&(s=n.schema,null!=n.query&&(s=`${s} - ${n.query}`));let i=e.source_def_array,o=t.map(((e,t)=>{let n=i[t].value;return null==a||a[n]?e.value:null})).filter((e=>null!=e)).join("_"),r=e.id;return l&&null!=e.id_group&&(r=e.id_group),`${r} - ${o} - ${s}`};const L_=I_.sources_url_el_to_source,R_=I_.sources_types,D_=e=>R_.find((t=>t.id==e)),z_=async(e,t)=>{let n=K_(t);return await V_(e,t,n)};async function B_(e,t,n){let a=t.source_def_array.map((e=>n[e.value]));return await V_(e,t,a)}const V_=async(e,t,n)=>{null==t&&(t=X_());let a,l=[];for(let s=0;s<n.length;s+=1){let i=n[s],o=t.source_def_array[s];if(o.sources_url||o.sources_function){let n=[];n=o.sources_url?await H_(e,t.id,o):o.sources_function(),a=n.find((e=>e.value==i)),null==a&&(a=n[0])}else a={label:i,value:i};l.push(a)}return l};let q_={};const H_=async(e,t,a)=>{let l=`${t}_${a.value}`;if(null==q_[l])if(a.sources_url){let t=`${e}/${a.sources_url}`;q_[l]=v.http_request(t)}else{if(!a.sources_function)return[];q_[l]=a.sources_function()}let s=await q_[l];if(a.sources_url){let e=L_[a.value_map_sources_res];if(null==e&&(e=L_[a.value]),null==e)throw`:Error: metrics-manager.js, missing sources_url_to_source ${a.value} key`;s=s.map((t=>e(t)))}return s.sort(n.sortAlphabetically)};function G_(e,t){e.source_def_array.forEach((e=>{let n=t[e.value];null!=n&&(null!=e.f_set_value_url?e.f_set_value_url():null!=e.value_url?w.set_key_to_url(e.value_url,n):w.set_key_to_url(e.value,n))}))}const K_=e=>(null==e&&(e=X_()),e.source_def_array.map((e=>{if(null!=e.f_get_value_url)return e.f_get_value_url();let t=e.value_url;return null==t&&(t=e.value),w.get_url_entry(t)})));let W_={},J_=null;const Y_=async(e,t,n)=>{let a=`${w.get_url_entry("epoch_begin")}_${w.get_url_entry("epoch_end")}`;null==t&&(t=X_()),null==n&&(n=await z_(e,t));let l=function(e,t,n){let a=t.source_def_array.map(((e,t)=>`${e.value}=${n[t].value}`)).join("&");return`${e}/lua/rest/v2/get/timeseries/type/consts.lua?query=${t.query}&${a}`}(e,t,n),s=function(e,t){let n=t.map((e=>e.value)).join("_");return`${e.id}_${n}`}(t,n);a!=J_&&(W_[s]=null,J_=a),null==W_[s]&&(W_[s]=v.http_request(l));let i=await W_[s];return 0==i.some((e=>1==e.default_visible))&&(i[0].default_visible=!0),v.clone(i)},X_=()=>{let e=window.location.pathname;for(let t=0;t<R_.length;t+=1){if(1==new RegExp(R_[t].regex_page_url).test(e))return R_[t]}throw`source_type not found for ${e}`},Z_=async(e,t,n,a,l)=>(await Y_(e,t,n)).find((e=>e.schema==a&&e.query==l)),Q_=(e,t)=>{null==t&&(t=X_());let n={};t.source_def_array.forEach((e=>n[e.value]=!0));let a=e.split(",");for(let e=0;e<a.length;e+=1){let t=a[e].split(":")[0];if(null==n[t])return a[e]}return null},ef=(e,t,n)=>{let a;return null!=t&&(a=e.find((e=>e.schema==t&&(null==n||e.query==n)))),null==a&&(a=e.find((e=>1==e.default_visible))),null!=a?a:e[0]},tf={set_timeseries_groups_in_url:M_,get_timeseries_groups_from_url:async(e,t)=>{if(null==t&&(t=w.get_url_entry("timeseries_groups")),null==t||""==t)return null;let n=t.split(";;");return!n?.length>0?null:Promise.all(n.map((async e=>await F_(e))))},get_default_timeseries_groups:U_,get_ts_group:O_,get_ts_group_id:j_,sources_types:R_,sources_types_tables:I_.sources_types_tables,get_source_type_from_id:D_,get_current_page_source_type:X_,get_sources:H_,get_default_source_array:z_,get_source_array_from_value_dict:B_,get_source_array_from_value_array:V_,get_default_source_value_array:K_,get_metrics:Y_,get_metric_from_schema:Z_,get_metric_query_from_ts_query:Q_,get_default_metric:ef,set_source_value_object_in_url:G_,ui_types:I_.ui_types};function nf(e,t){let n=e.start,a=1e3*e.step;e.series.forEach((e=>{e.name=e.label,delete e.type;let t=1e3*n;e.data=e.data.map((e=>{let n={x:t,y:e};return t+=a,n}))})),e.xaxis={labels:{show:!0},axisTicks:{show:!0}},e.yaxis={labels:{formatter:f.getFormatter(t.measure_unit)},axisBorder:{show:!0},title:{text:t.measure_unit}}}function af(e){return`${e.label}`}function lf(e,t){return"number"==e?t:e}function sf(e,t,n,a){null==e&&(e=t);let l="";if(null!=e&&(l=`${e} `),0==a)return e;let s=hf(n);return`${`${n.source_array[s].label}`} ${l}(${lf(n.metric.measure_unit,n.metric.scale)})`}function of(e){return`${e.measure_unit}_${e.scale}`}const rf=["#C6D9FD","#90EE90","#EE8434","#C95D63","#AE8799","#717EC3","#496DDB","#5A7ADE","#6986E1","#7791E4","#839BE6","#8EA4E8"];const cf={"1_chart":{value:"1_chart",label:i18n("page_stats.layout_1_per_all")},"1_chart_x_yaxis":{value:"1_chart_x_yaxis",label:i18n("page_stats.layout_1_per_y")},"1_chart_x_metric":{value:"1_chart_x_metric",label:i18n("page_stats.layout_1_per_1")}};function uf(e){return cf[e]||null}function df(e,t,n,a){if(n.value==cf["1_chart"].value){let n=[_f(e,t,a)];return pf(n),n}if(n.value==cf["1_chart_x_yaxis"].value){let n={};t.forEach(((t,a)=>{let l=of(t.metric),s={tsGroup:t,tsOptions:e[a]};null==n[l]?n[l]=[s]:n[l].push(s)}));let l=[];for(let e in n){let t=n[e],s=t.map((e=>e.tsOptions)),i=t.map((e=>e.tsGroup)),o=_f(s,i,a);l.push(o)}return pf(l),l}if(n.value==cf["1_chart_x_metric"].value){let n=[];return e.forEach(((e,l)=>{let s=_f([e],[t[l]],a);n.push(s)})),pf(n),n}return[]}function pf(e){let t=1==e.length;e.forEach((e=>{t||e.yaxis.filter((e=>e.show)).forEach((e=>{e.labels.minWidth=60})),e.yaxis.length<2||(e.yaxis.forEach((e=>{e.labels.offsetX=-20})),e.grid.padding.left=-7)}))}function _f(e,t,n){if(e.length!=t.length)return void console.error(`Error in timeseries-utils:tsArrayToApexOptions: tsOptionsArray ${e} different length from tsGrpupsArray ${t}`);let a=[],l=[],s={};!function(e){e[0]?.source?.name}(t);let i=null;e.forEach(((e,o)=>{let r=t[o];o>0&&(i="line");let c=function(e,t,n,a,l){let s=1e3*e.start,i=1e3*e.step,o=[],r=Object.keys(t.metric.timeseries);return"top"!=t.metric.type&&e.series?.length!=r.length&&(e.series=r.map(((t,n)=>{let a=e.series.find((e=>af(e)==t));return null!=a?a:{label:t,data:[null]}}))),e.series.forEach(((r,c)=>{let u=af(r),d=t.metric.timeseries[u];if(null==d)throw`Impossible find timeserie_id = ${u} in metric metadata (id,schema,query) = (${metric.id},${metric.schema},${metric.id})`;let p=1;1==d.invert_direction&&(p=-1);let _=e=>{let t=s,n=e.map((e=>{let n={x:t,y:e*p};return t+=i,n}));return n},f=t.timeseries?.find((e=>e.id==u)),h=d.label;null!=r.ext_label&&"top"==t.metric.type&&(h=r.ext_label);let m=sf(h,u,t,n);if(null==f||1==f.raw){let e=_(r.data),t=d.draw_type;null==t&&null!=a?t=a:null==t&&(t="area");let n={id:u,colorPalette:0,color:d.color,type:t,name:m,data:e};o.push(n)}if(1==f?.past&&v.is_object(e.additional_series)){let t=v.object_to_array(e.additional_series)[0],n={id:u,colorPalette:1,color:d.color,type:"line",name:`${m} ${l} Ago`,data:_(t)};o.push(n)}let g=(e,t,n)=>{if(null==n)return null;let a=`${m} (${e})`;null!=n&&(n*=p);let l=s,o=r.data.map((e=>{let t={x:l,y:n};return l+=i,t}));return{id:t,name:a,colorPalette:1,color:d.color,type:"line",data:o}};if(1==f?.avg){let t=e.statistics?.by_serie[c].average,n=g("Avg",u,t);o.push(n)}if(1==f?.perc_95){let t=e.statistics?.by_serie[c]["95th_percentile"],n=g("95th Perc",u,t);o.push(n)}})),o}(e,r,!0,i,n);a=a.concat(c);let u=function(e,t,n){let a=t.metric,l=of(a),s=!1,i=Object.keys(n).length,o=[];for(let e in t.metric.timeseries)s|=t.metric.timeseries[e].invert_direction;return e.forEach((e=>{let r=n[l];if(null==r){let r={seriesName:e.name,show:!0,labels:{formatter:f.getFormatter(a.measure_unit,s)},axisTicks:{show:!0},axisBorder:{show:!0},title:{text:lf(t.metric.measure_unit,t.metric.scale)},opposite:i%2==1};n[l]=r.seriesName,o.push(r)}else o.push({seriesName:r,labels:{formatter:f.getFormatter(a.measure_unit,s)},show:!1})})),o}(c,r,s);l=l.concat(u)})),function(e){let t=0,n=0,a=rf,l=d3v7.schemeCategory10;e.forEach((e=>{0==e.colorPalette?(e.color=a[t%a.length],t+=1):1==e.colorPalette&&(e.color=l[n%l.length],n+=1)}))}(a),function(e,t){let n={},a={};for(let l=0;l<t.length;l+=1){let s=t[l],i=e[l],o=i.seriesName;null==n[o]&&(n[o]=[],a[o]={min:Number.MAX_SAFE_INTEGER,max:Number.MIN_SAFE_INTEGER}),n[o].push(i);let r=a[o];s.data.forEach((e=>{r.max=Math.max(r.max,e.y),r.min=Math.min(r.min,e.y)}))}let l=(e,t)=>{if(0==e||null==e||e==Number.MAX_SAFE_INTEGER||e==Number.MIN_SAFE_INTEGER)return 0;let n=e/100*3;return t&&e>0||!t&&e<0?e+n:e-n};for(let e in n){let t=n[e],s=a[e];s.min=l(s.min,!1),s.max=l(s.max,!0),t.forEach((e=>{e.min=s.min,e.max=s.max}))}}(l,a);let o=function(e,t){return{chart:{id:v.get_random_string(),group:"timeseries"},grid:{padding:{},row:{}},fill:{opacity:.9,type:"solid",pattern:{strokeWidth:10}},stroke:{show:!0,lineCap:"butt",width:4},legend:{show:!0,showForSingleSeries:!0,position:"top",horizontalAlign:"right",onItemClick:{toggleDataSeries:!1}},series:e,yaxis:t,xaxis:{labels:{show:!0},axisTicks:{show:!0}}}}(a,l);return o}function ff(e,t,n){let a=e.source_type.source_def_array.map(((t,a)=>{if(null!=n&&!n[t.value])return null;let l=e.source_array[a].value;return`${t.value}:${l}`})).filter((e=>null!=e)).join(",");return t||null==e.metric.query||(a=`${a},${e.metric.query}`),a}function hf(e){let t=e.source_type.source_def_array;for(let e=0;e<t.length;e+=1){if(1==t[e].main_source_def)return e}return 0}async function mf(e,t,n,a,l){let s,i={epoch_begin:t.epoch_begin,epoch_end:t.epoch_end};if(l){let t={zoom:n,initial_point:!0,limit:180,version:4,ts_compare:n},l=`${e}/lua/pro/rest/v2/get/timeseries/ts_multi.lua`,o={ts_requests:a.map((e=>{let t=hf(e),n={ts_query:ff(e),ts_schema:`${e.metric.schema}`};return e.source_type.source_def_array[t].disable_tskey||(n.tskey=e.source_array[t].value),n})),...i,...t},r={"Content-Type":"application/json"};s=await v.http_request(l,{method:"post",headers:r,body:JSON.stringify(o)})}else{let t=`${e}/lua/rest/v2/get/timeseries/ts.lua`,l=`ts_compare=${n}&version=4&zoom=${n}&initial_point=true&limit=180`,o=a[0],r=hf(o),c=ff(o),u={...i,ts_query:c,ts_schema:`${o.metric.schema}`};o.source_type.source_def_array[r].disable_tskey||(u.tskey=o.source_array[r].value);let d=`${t}?${w.add_obj_to_url(u,l)}`;s=[await v.http_request(d)]}return s}const gf={groupsOptionsModesEnum:cf,tsToApexOptions:nf,tsArrayToApexOptions:_f,tsArrayToApexOptionsArray:df,getGroupOptionMode:uf,getSerieId:af,getSerieName:sf,getTsChartsOptions:mf,getTsQuery:ff,getMainSourceDefIndex:hf},vf=n;function bf(e){if("text"==e)return".*";if("ip"==e){let e=vf.REGEXES.ipv4,t=e.replace("$","@[0-9]{0,5}$"),n=vf.REGEXES.ipv6,a=n.replaceAll("$","@[0-9]{0,5}$");return`(${e})|(${t})|(${n})|(${a})`}return vf.REGEXES[e]}const yf={get_data_pattern:bf},wf={class:"nav nav-tabs"},xf={class:"form-group ms-2 me-2 mt-3 row"},kf={class:"form-group row"},$f={class:"col-form-label col-sm-4"},Sf={class:"col-sm-8"},Cf={key:0,class:"form-group ms-2 me-2 mb-2 mt-3 row"},Nf={class:"form-group row"},Af={class:"col-form-label col-sm-4"},Ef={class:"col-sm-8"},Tf=["title"],Pf={key:0,class:"form-group mt-2 row"},If={class:"col-form-label col-sm-4"},Mf={class:"col-sm-8"},Of={key:1,class:"form-group mt-2 row"},Uf={class:"col-form-label col-sm-4"},Ff={class:"col-sm-8"},jf=["onUpdate:modelValue","pattern"],Lf={class:"form-group row mt-2",style:{"text-align":"end"}},Rf={class:"col-sm-12"},Df=["disabled"],zf={class:"form-group ms-2 me-2 mt-3 row"},Bf={class:"form-group row"},Vf={class:"col-form-label col-sm-4"},qf={class:"col-sm-8"};var Hf={__name:"modal-timeseries",props:{sources_types_enabled:Object},emits:["apply"],setup(e,{expose:t,emit:n}){const a=e,l=_n(null),s=_n(null),i=_n("select");let o=tf.get_current_page_source_type();const r=tf.sources_types,c=_n(o),u=tf.ui_types,d=_n([]),p=_n([]),_=_n([]),f=_n(""),h=_n([]),m=_n(!1),g=vi((()=>{if(0==m.value)return!1;for(let e=0;e<h.value.length;e+=1){let t=h.value[e];if(null==t)continue;let n=new RegExp(t),a=_.value[e];if(0==n.test(a))return!1}return!0})),b=_n(!1),y=_n([]),w=_n({}),x=_n([]),k=_n([]);let $=null;rl((()=>{r.forEach((e=>{let t=a.sources_types_enabled[e.id];null!=t&&0!=t||(e.disabled=!0)}))})),cl((async()=>{$=async function(){await C(),P()}()}));function S(e){i.value=e}async function C(){m.value=!1,function(){let e=c.value?.source_def_array.map((e=>e.regex_type));null==e&&(e=[]);h.value=e.map((e=>null==e?null:yf.get_data_pattern(e)))}(),function(){let e=c.value;b.value=e.source_def_array.map((e=>e.ui_type==u.hide)).every((e=>1==e))}(),await async function(){let e=c.value.source_def_array,t=[];for(let n=0;n<e.length;n+=1){let a=await tf.get_sources(http_prefix,c.value.id,e[n]);t.push(a)}let n=await tf.get_default_source_array(http_prefix,c.value);p.value=n,d.value=t,_.value=n.map((e=>e.value)),E()}(),await T()}async function N(){m.value=!1,_.value.forEach(((e,t)=>{if(c.value.source_def_array[t].ui_type==u.input){let n=p.value[t];n.value=e,n.label=e}})),await async function(){await T()}(),E()}function A(){m.value=!0}function E(){f.value=`${p.value.filter((e=>null!=e.label&&""!=e.label)).map((e=>e.label)).join(" - ")}`}async function T(){y.value=await tf.get_metrics(http_prefix,c.value,p.value),y.value.sort(NtopUtils.sortAlphabetically),w.value=tf.get_default_metric(y.value)}function P(e){k.value=[];let t=w.value.timeseries;for(let e in t)k.value.push({id:e,label:t[e].label,raw:!0,past:!1,avg:!1,perc_95:!1})}function I(e){let t=e.source_type.label,n=gf.getMainSourceDefIndex(e);return`${t} - ${e.source_array[n].label} - ${e.metric.label}`}function M(e){let t,n,a;return null==e?(t=c.value,n=p.value,a=w.value):(t=e.source_type,n=e.source_array,a=e.metric),tf.get_ts_group_id(t,n,a)}const O=e=>{x.value=x.value.filter((t=>M(t)!=e))},U=(e,t)=>{let a=x.value.findIndex((t=>t.id==e.id));a<0?x.value.push(e):x.value[a]=e,t&&n("apply",x.value)},F=()=>{if("add"==i.value){let e={id:M(),source_type:c.value,source_array:p.value,metric:w.value,timeseries:v.clone(k.value)};U(e)}n("apply",x.value),j()},j=()=>{l.value.close()},L=e=>i18n(e);return t({show:async e=>{x.value=e,await $,i.value="select",l.value.show()},close:j,add_ts_group:U,set_timeseries_groups:(e,t)=>{x.value=e,t&&n("apply",x.value)}}),(e,t)=>(As(),Os(_p,{onShowed:t[10]||(t[10]=e=>{}),ref_key:"modal_id",ref:l},{title:fa((()=>[Hs(Z(L("modal_timeseries.title")),1)])),body:fa((()=>[zs("ul",wf,[zs("li",{class:"nav-item",onClick:t[0]||(t[0]=e=>S("add"))},[zs("a",{class:H(["nav-link",{active:"add"==i.value}]),href:"#"},Z(L("modal_timeseries.add_timeseries")),3)]),zs("li",{class:"nav-item",onClick:t[1]||(t[1]=e=>S("select"))},[zs("a",{class:H(["nav-link",{active:"select"==i.value}]),href:"#"},Z(L("modal_timeseries.manage_timeseries")),3)])]),Ks(" action add "),"add"==i.value?(As(),Ms(xs,{key:0},[Ks(" Sources Types "),zs("div",xf,[zs("div",kf,[zs("label",$f,[zs("b",null,Z(L("modal_timeseries.source_type")),1)]),zs("div",Sf,[Bs(jd,{selected_option:c.value,"onUpdate:selected_option":t[2]||(t[2]=e=>c.value=e),onSelect_option:t[3]||(t[3]=e=>C()),options:vn(r)},null,8,["selected_option","options"])])])]),Ks(" Sources "),b.value?Ks("v-if",!0):(As(),Ms("div",Cf,[zs("div",Nf,[zs("label",Af,[zs("b",null,Z(L("modal_timeseries.source")),1)]),zs("div",Ef,[vl(zs("input",{class:"form-control","onUpdate:modelValue":t[4]||(t[4]=e=>f.value=e),title:f.value,style:{overflow:"hidden","text-overflow":"ellipsis","white-space":"nowrap"},type:"text",disabled:""},null,8,Tf),[[Io,f.value]])])]),(As(!0),Ms(xs,null,Cl(c.value.source_def_array,((e,n)=>(As(),Ms(xs,null,[Ks(" select "),e.ui_type==vn(u).select?(As(),Ms("div",Pf,[zs("label",If,[zs("b",null,Z(e.label),1)]),zs("div",Mf,[Bs(jd,{selected_option:p.value[n],"onUpdate:selected_option":e=>p.value[n]=e,onSelect_option:t[5]||(t[5]=e=>A()),options:d.value[n]},null,8,["selected_option","onUpdate:selected_option","options"])])])):Ks("v-if",!0),Ks(" end select "),Ks(" input text "),e.ui_type==vn(u).input?(As(),Ms("div",Of,[zs("label",Uf,[zs("b",null,Z(e.label),1)]),zs("div",Ff,[vl(zs("input",{class:"form-control",onInput:t[6]||(t[6]=e=>A()),"onUpdate:modelValue":e=>_.value[n]=e,pattern:h.value[n],required:"",type:"text",placeholder:""},null,40,jf),[[Io,_.value[n]]])])])):Ks("v-if",!0),Ks(" input text ")],64)))),256)),vl(zs("div",Lf,[zs("div",Rf,[zs("button",{type:"button",onClick:N,disabled:0==vn(g),class:"btn btn-primary"},Z(L("modal_timeseries.apply_source")),9,Df)])],512),[[Ko,vn(g)]])])),Ks(" end Sources "),Ks(" Metrics "),zs("div",zf,[zs("div",Bf,[zs("label",Vf,[zs("b",null,Z(L("modal_timeseries.metric")),1)]),zs("div",qf,[Bs(jd,{ref_key:"select_search_metrics",ref:s,onSelect_option:t[7]||(t[7]=e=>P()),selected_option:w.value,"onUpdate:selected_option":t[8]||(t[8]=e=>w.value=e),options:y.value},null,8,["selected_option","options"])])])]),Bs(f_,{id:"",title:L("modal_timeseries.timeseries_list"),timeseries:k.value,"onUpdate:timeseries":t[9]||(t[9]=e=>k.value=e)},null,8,["title","timeseries"])],64)):Ks("v-if",!0),Ks(" action == add "),Ks(" action select"),"select"==i.value?(As(),Ms(xs,{key:1},[(As(!0),Ms(xs,null,Cl(x.value,(e=>(As(),Os(f_,{id:M(e),title:I(e),timeseries:e.timeseries,"onUpdate:timeseries":t=>e.timeseries=t,show_delete_button:x.value.length>1,onDelete_ts:O},null,8,["id","title","timeseries","onUpdate:timeseries","show_delete_button"])))),256)),Ks(" v-for timeseries_groups_added ")],64)):Ks("v-if",!0),Ks(" action == select ")])),footer:fa((()=>[vl(zs("button",{type:"button",onClick:F,class:"btn btn-primary"},Z(L("modal_timeseries.add")),513),[[Ko,"add"==i.value]]),vl(zs("button",{type:"button",onClick:F,class:"btn btn-primary"},Z(L("modal_timeseries.apply")),513),[[Ko,"select"==i.value]])])),_:1},512))}};pp("\ninput[data-v-103cd911]:invalid {\n  border-color: #ff0000;\n}\n.custom-margin[data-v-103cd911] {\nmargin-left: -0.4rem;\n}\n.warn[data-v-103cd911] {\nborder-color: #ffd500;\nborder-style: solid;\n}\n"),Hf.__scopeId="data-v-103cd911",Hf.__file="http_src/vue/modal-timeseries.vue";var Gf=Ka({components:{modal:_p},props:{id:String},updated(){},data(){return{description:"",invalid_bpf:!1,bpf_filter:"",extract_now:!0,show_menu:!0,i18n:e=>i18n(e),id_modal:`${this.$props.id}_modal`}},emits:["apply"],created(){},mounted(){},methods:{pad2_number:function(e){return String(e).padStart(2,"0")},format_date:function(e){let t=e.valueOf();return ntopng_utility.from_utc_to_server_date_format(t)},apply:async function(){if(null!=this.bpf_filter&&""!=this.bpf_filter){let e=`${http_prefix}/lua/pro/rest/v2/check/filter.lua?query=${this.bpf_filter}`,t=await ntopng_utility.http_request(e,null,!1,!0);if(this.invalid_bpf=!t.response,1==this.invalid_bpf)return}let e={ifid:ntopng_url_manager.get_url_entry("ifid"),epoch_begin:ntopng_url_manager.get_url_entry("epoch_begin"),epoch_end:ntopng_url_manager.get_url_entry("epoch_end"),bpf_filter:this.bpf_filter},t=ntopng_url_manager.obj_to_url_params(e);if(1==this.extract_now){let e=`${http_prefix}/lua/rest/v2/get/pcap/live_extraction.lua?${t}`;window.open(e,"_self",!1)}else{let e=`${http_prefix}/lua/traffic_extraction.lua?${t}`,n=(await ntopng_utility.http_request(e,null,!1,!0)).id,a=i18n("traffic_recording.extraction_scheduled"),l=i18n("traffic_recording.traffic_extraction_jobs"),s=`<a href="/lua/if_stats.lua?ifid=${ntopng_url_manager.get_url_entry("ifid")}&page=traffic_recording&tab=jobs&job_id=${n}">${l}</a>`;a=a.replace("%{page}",s),a=`${a} ${n}`,ntopng_events_manager.emit_custom_event(ntopng_custom_events.SHOW_GLOBAL_ALERT_INFO,a)}this.$refs.modal.close()},show:async function(e){if(null==e){let t=ntopng_url_manager.get_url_params(),n=`${http_prefix}/lua/pro/rest/v2/get/db/filter/bpf.lua?${t}`,a=await ntopng_utility.http_request(n);if(null==a||null==a.bpf)return void console.error(`modal-traffic-extraction: ${n} return null value`);e=a.bpf}let t=ntopng_status_manager.get_status();if(null==t.epoch_begin||null==t.epoch_end)return void console.error("modal-traffic-extraction: epoch_begin and epoch_end undefined in url");let n=new Date(1e3*t.epoch_begin),a=new Date(1e3*t.epoch_end),l=i18n("traffic_recording.about_to_download_flow");l=l.replace("%{date_begin}",this.format_date(n)),l=l.replace("%{date_end}",this.format_date(a)),this.description=l,this.bpf_filter=e,this.$refs.modal.show()},show_hide_menu:function(){this.show_menu=!this.show_menu}}});const Kf=e=>(da("data-v-0be978c4"),e=e(),pa(),e),Wf=["innerHTML"],Jf={style:{height:"95%"}},Yf={class:"tab-content",style:{height:"100%"}},Xf={class:"row"},Zf={class:"form-group mb-3 col-md-3 has-feedback"},Qf={class:"form-group mb-3 col-md-9 text-right asd"},eh={class:"radio-inline",style:{"margin-left":"1rem"}},th={class:"radio-inline"},nh={class:"row",id:"pcapDownloadModal_advanced",style:{}},ah={class:"form-group mb-3 col-md-12 has-feedback"},lh=Kf((()=>zs("br",null,null,-1))),sh={class:"form-label"},ih=Kf((()=>zs("a",{class:"ntopng-external-link",href:"https://www.ntop.org/guides/n2disk/filters.html"},[zs("i",{class:"fas fa-external-link-alt"})],-1))),oh={class:"input-group"},rh=Kf((()=>zs("span",{class:"input-group-addon"},[zs("span",{class:"glyphicon glyphicon-filter"})],-1))),ch=Kf((()=>zs("br",null,null,-1))),uh={class:"form-label"},dh=Kf((()=>zs("br",null,null,-1))),ph=Kf((()=>zs("ul",null,[zs("li",null,[Hs("Host: "),zs("i",null,"host 192.168.1.2")]),zs("li",null,[Hs("HTTP: "),zs("i",null,"tcp and port 80")]),zs("li",null,[Hs("Traffic between hosts: "),zs("i",null,"ip host 192.168.1.1 and 192.168.1.2")]),zs("li",null,[Hs("Traffic from an host to another: "),zs("i",null,"ip src 192.168.1.1 and dst 192.168.1.2")])],-1)));pp("\ninput ~ .alert[data-v-0be978c4] {\n  display: none;\n}\ninput:invalid ~ .alert[data-v-0be978c4] {\n  display: block;\n}\n"),Gf.render=function(e,t,n,a,l,s){const i=yl("modal");return As(),Os(i,{id:e.id_modal,onApply:e.apply,ref:"modal"},{title:fa((()=>[Hs(Z(e.i18n("traffic_recording.pcap_extract")),1)])),body:fa((()=>[zs("div",{class:"alert alert-info",innerHTML:e.description},null,8,Wf),zs("form",Jf,[zs("div",Yf,[zs("div",Xf,[zs("div",Zf,[zs("button",{class:"btn btn-sm btn-secondary",type:"button",onClick:t[0]||(t[0]=(...t)=>e.show_hide_menu&&e.show_hide_menu(...t))},[Hs(Z(e.i18n("advanced")),1),zs("i",{class:H({"fas fa-caret-down":e.show_menu,"fas fa-caret-up":!e.show_menu})},null,2)])]),zs("div",Qf,[zs("label",eh,[vl(zs("input",{type:"radio",name:"extract_now","onUpdate:modelValue":t[1]||(t[1]=t=>e.extract_now=t),value:"true",checked:""},null,512),[[Uo,e.extract_now]]),Hs(" "+Z(e.i18n("traffic_recording.extract_now")),1)]),zs("label",th,[vl(zs("input",{type:"radio",name:"extract_now","onUpdate:modelValue":t[2]||(t[2]=t=>e.extract_now=t),value:"false"},null,512),[[Uo,e.extract_now]]),Hs(" "+Z(e.i18n("traffic_recording.queue_as_job")),1)])])]),vl(zs("div",nh,[zs("div",ah,[lh,zs("label",sh,[Hs(Z(e.i18n("traffic_recording.filter_bpf"))+" ",1),ih]),zs("div",oh,[rh,vl(zs("input",{name:"bpf_filter","onUpdate:modelValue":t[3]||(t[3]=t=>e.bpf_filter=t),class:"form-control input-sm","data-bpf":"bpf",autocomplete:"off",spellcheck:"false"},null,512),[[Io,e.bpf_filter]]),vl(zs("span",{style:{margin:"0px",padding:"0",display:"block"},class:"invalid-feedback"},Z(e.i18n("invalid_value")),513),[[Ko,e.invalid_bpf]])]),ch,zs("label",uh,Z(e.i18n("traffic_recording.filter_examples"))+":",1),dh,ph])],512),[[Ko,e.show_menu]])])])])),footer:fa((()=>[zs("button",{type:"button",onClick:t[4]||(t[4]=(...t)=>e.apply&&e.apply(...t)),class:"btn btn-primary"},Z(e.i18n("apply")),1)])),_:1},8,["id","onApply"])},Gf.__scopeId="data-v-0be978c4",Gf.__file="http_src/vue/modal-traffic-extraction.vue";const _h={class:"form-group mt-2 row"},fh={class:"col-form-label col-sm-4"},hh={class:"col-sm-6"},mh={class:"col-form-label col-sm-2"},gh=["disabled"];var vh={__name:"modal-download-file",props:{title:String,ext:String},emits:["download"],setup(e,{expose:t,emit:n}){const a=e,l=_n(null),s=_n(""),i="^[^`~!@#$%^&*|+-=?;:'\",.<>/{}()\\[\\]\\s]+$",o=vi((()=>new RegExp("^[^`~!@#$%^&*|+-=?;:'\",.<>/{}()\\[\\]\\s]+$").test(s.value)));function r(){let e=`${s.value}.${a.ext}`;n("download",e),c()}const c=()=>{l.value.close()};t({show:e=>{null==e&&(e=""),e=(e=e.replaceAll(/[-=?;:\s]/g,"_")).replaceAll(/[`~!@#$%^&*|+-=?;:'",.<>\s\/\{\}\[\]\(\)]/g,""),s.value=e,l.value.show()},close:c}),cl((()=>{}));const u=e=>i18n(e);return(e,t)=>(As(),Os(_p,{ref_key:"modal_id",ref:l},{title:fa((()=>[Hs(Z(a.title),1)])),body:fa((()=>[zs("div",_h,[zs("label",fh,[zs("b",null,Z(u("modal_download_file.filename"))+":",1)]),zs("div",hh,[vl(zs("input",{class:"form-control",required:"",pattern:i,"onUpdate:modelValue":t[0]||(t[0]=e=>s.value=e),type:"text",placeholder:""},null,512),[[Io,s.value]])]),zs("label",mh," ."+Z(a.ext),1)])])),footer:fa((()=>[zs("button",{type:"button",onClick:r,class:"btn btn-primary",disabled:0==vn(o)},Z(u("modal_download_file.download")),9,gh)])),_:1},512))}};pp("\ninput[data-v-59120eb8]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-59120eb8] {\n  cursor: not-allowed;\n}\n"),vh.__scopeId="data-v-59120eb8",vh.__file="http_src/vue/modal-download-file.vue";var bh=Ka({components:{},props:{id:String},emits:[],created(){},data:()=>({show_alert:!1,i18n:e=>i18n(e),body:""}),mounted(){ntopng_events_manager.on_custom_event(this.$props.id,ntopng_custom_events.SHOW_GLOBAL_ALERT_INFO,(e=>this.show(e)))},methods:{close:function(){this.show_alert=!1},show:function(e){this.show_alert=!0,this.body=e}}});const yh={key:0,style:{width:"100%"},class:"alert alert-success alert-dismissable"},wh=["innerHTML"];bh.render=function(e,t,n,a,l,s){return 1==e.show_alert?(As(),Ms("div",yh,[zs("span",{innerHTML:e.body},null,8,wh),zs("button",{type:"button",onClick:t[0]||(t[0]=(...t)=>e.close&&e.close(...t)),class:"btn-close","aria-label":"Close"})])):Ks("v-if",!0)},bh.__file="http_src/vue/alert-info.vue";const xh={class:"text-center"},kh=zs("tbody",null,null,-1);var $h={__name:"datatable",props:{table_buttons:Array,columns_config:Array,data_url:String,enable_search:Boolean,filter_buttons:{type:Array,required:!1},table_config:{type:Object,required:!1},base_url:String,base_params:Object},setup(e,{expose:t}){const n=e;let a=n.base_params;const l=_n(null);let s=null;cl((()=>{!function(){let e=!1,t={serverSide:!1,scrollX:!1,destroy:!0,searching:n.enable_search,order:[[0,"asc"]],pagingType:"full_numbers",columnDefs:n.columns_config,columns:n.columns_config,autoWidth:!1,responsive:!0,ajax:{method:"get",url:n.data_url,dataSrc:"rsp",data:(e,t)=>{if(0==Object.keys(e).length)return;const n=t.oInstance.api(),a=e.order[0].column,l=n.column(a).name()||void 0;return e.order&&(e.order=e.order[0].dir,e.sort=l),void 0!==e.columns&&delete e.columns,void 0!==e.search&&(e.map_search=e.search.value,delete e.search),e},beforeSend:function(){NtopUtils.showOverlays()}},drawCallback:function(e){NtopUtils.hideOverlays(),ntopng_events_manager.emit_custom_event(ntopng_custom_events.DATATABLE_LOADED)}};for(const e in n.table_config||{})t[e]=n.table_config[e];let o=DataTableUtils.getStdDatatableConfig(n.table_buttons);o=DataTableUtils.extendConfig(o,t),s=$(l.value).DataTable(o);for(const t of n.filter_buttons||[]){const a=w.get_url_entry(t.filterMenuKey);if(a&&""!=a){let n=0;t.filters.forEach((e=>{e.currently_active=!1,n+=1,e.id==a&&(e.currently_active=!0,n-=1)})),n==t.filters.length&&(w.set_key_to_url(t.filterMenuKey,""),e=!0)}new DataTableFiltersMenu({filterTitle:t.filterTitle,tableAPI:s,filters:t.filters,filterMenuKey:t.filterMenuKey,columnIndex:t.columnIndex,url:n.data_url,id:t.id,removeAllEntry:t.removeAllEntry,callbackFunction:t.callbackFunction}).init()}if(e&&n.base_params){const e=w.get_url_entries();for(const[t,n]of e)a[t]=n;s.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,a)),i()}}()}));const i=()=>{null!=s&&s.ajax.reload()},o=e=>{DataTableUtils.deleteButtonHandlers(e)};let r=!1;const c=()=>{s.clear(),s.destroy(!0),r=!0,n.columns_config.filter((e=>null!=e.handlerId)).forEach((e=>{o(e.handlerId)}))};return t({reload:i,delete_button_handlers:o,destroy_table:c,update_url:e=>{null!=s&&s.ajax.url(e)}}),pl((()=>{1!=r&&c()})),(t,n)=>(As(),Ms("div",null,[zs("table",{ref_key:"table_id",ref:l,class:"table w-100 table-striped table-hover table-bordered"},[zs("thead",null,[zs("tr",null,[(As(!0),Ms(xs,null,Cl(e.columns_config,(e=>(As(),Ms("th",xh,Z(e.columnName),1)))),256))])]),kh],512)]))},__file:"http_src/vue/datatable.vue"};const Sh={class:"table table-hover table-borderless mb-0"},Ch=["innerHTML"],Nh=["innerHTML"];var Ah={__name:"bootstrap-table",props:{id:String,columns:Array,rows:Array,print_html_column:Function,print_html_row:Function},setup:e=>(t,n)=>(As(),Ms("table",Sh,[zs("thead",null,[zs("tr",null,[(As(!0),Ms(xs,null,Cl(e.columns,(t=>(As(),Ms("th",{scope:"col",innerHTML:e.print_html_column(t)},null,8,Ch)))),256))])]),zs("tbody",null,[(As(!0),Ms(xs,null,Cl(e.rows,(t=>(As(),Ms("tr",null,[(As(!0),Ms(xs,null,Cl(e.columns,(n=>(As(),Ms("td",{scope:"col",innerHTML:e.print_html_row(n,t)},null,8,Nh)))),256))])))),256))])])),__file:"http_src/vue/bootstrap-table.vue"};const Eh=e=>(da("data-v-937058e4"),e=e(),pa(),e),Th={class:"col-12 mb-2 mt-2"},Ph={class:"card h-100 overflow-hidden"},Ih=["title"],Mh=[Eh((()=>zs("i",{class:"fas fa-lg fa-camera-retro"},null,-1)))],Oh=["title"],Uh=[Eh((()=>zs("i",{class:"fas fa-lg fa-download"},null,-1)))],Fh=["title"],jh=[Eh((()=>zs("i",{class:"fas fa-lg fa-file-image"},null,-1)))],Lh={class:"form-group ms-1 me-1 mt-1"},Rh={class:"inline select2-size me-2 mt-2"},Dh={class:"inline select2-size me-2 mt-2"},zh={key:0,class:"mt-4 card card-shadow"},Bh={class:"card-body"},Vh={key:1,class:"mt-4 card card-shadow"},qh={class:"card-body"},Hh={key:0,class:"inline select2-size me-2 mt-2"};var Gh={__name:"page-stats",props:{csrf:String,is_ntop_pro:Boolean,source_value_object:Object,sources_types_enabled:Object,sources_types_top_enabled:Object,enable_snapshots:Boolean,is_history_enabled:Boolean,traffic_extraction_permitted:Boolean},setup(e){const t=e;v.check_and_set_default_interval_time();const a=e=>i18n(e);let l="date_time_picker",s=ntopChartApex.typeChart.TS_LINE;_n({}),_n(!1);const i=_n([]),o=_n(null),r=_n(null),c=_n(null),u=_n(null),d=_n(null),p=_n([]),_=_n({});tf.get_current_page_source_type();const h=_n(!1);_n(!1);const m=_n([]),g=v.object_to_array(gf.groupsOptionsModesEnum),y=_n(function(){let e=w.get_url_entry("timeseries_groups_mode");if(null!=e&&""!=e)return gf.getGroupOptionMode(e);return g[0]}());let x=null;const k={label:i18n("page_stats.custom_metrics"),currently_active:!1},$="timeseries",S=_n(!1);rl((async()=>{!function(){if(null==t.source_value_object)return;let e=tf.get_current_page_source_type();tf.set_source_value_object_in_url(e,t.source_value_object)}()})),cl((async()=>{!async function(){let e,t,n=!0,a=await tf.get_timeseries_groups_from_url(http_prefix);if(null==a){n=!1,e=w.get_url_entry("ts_schema");let l=w.get_url_entry("ts_query");null!=l&&""!=l&&(t=tf.get_metric_query_from_ts_query(l)),""==e&&(e=null),a=await tf.get_default_timeseries_groups(http_prefix,e,t)}p.value=await C(n),_.value=1==n?k:tf.get_default_metric(p.value,e,t);S.value=!0,await V(a,!0,!0)}(),await Promise.all([ntopng_sync.on_ready(l)])}));async function C(e,a){if(!a&&null==e)return l.value;let l=await tf.get_metrics(http_prefix);if(e&&l.push(k),(null==L||a)&&(L=await async function(){if(!t.enable_snapshots)return;let e=`${http_prefix}/lua/pro/rest/v2/get/filters/snapshots.lua?page=timeseries`,n=await v.http_request(e),a=v.object_to_array(n).map((e=>({...e,is_snapshot:!0,label:`${e.name}`,group:"Snapshots"})));return a}()),t.enable_snapshots){L.forEach((e=>l.push(e)))}return l.sort(n.sortAlphabetically),l}async function N(e){let t=tf.get_current_page_source_type(),n=await tf.get_default_source_array(http_prefix,t);return[tf.get_ts_group(t,n,e)]}const A=async(e,t,n)=>{let a=tf.get_source_type_from_id(e),l=await tf.get_source_array_from_value_dict(http_prefix,a,t),s=await tf.get_metric_from_schema(http_prefix,a,l,n);T(tf.get_ts_group(a,l,s))},E=async(e,t)=>{let n=p.value.find((n=>n.schema==e&&n.query==t));null!=n?T((await N(n))[0]):console.error(`metric = ${e}, query = ${t} not found.`)};function T(e){c.value.set_timeseries_groups(x),c.value.add_ts_group(e,!0)}async function P(e){if(1==e.is_snapshot){let t=e.filters,n=w.get_url_entry("timeseries_groups",t),a=await tf.get_timeseries_groups_from_url(http_prefix,n);y.value=gf.getGroupOptionMode(w.get_url_entry("timeseries_groups_mode",t)),await V(a,!0,!1)}else await async function(){let e=await async function(){return N(_.value)}();await V(e,!0,!1)}(),D(!1)}function I(e){let n=_.value.label==k.label;V(x,!0,!1),async function(){if(!t.is_ntop_pro)return;let e=G.value?.table_config_def;if(null==e)return;let n=q(e.ts_group,e.table_def.table_value,e.table_def.view,e.table_source_def_value_dict);r.value.update_url(n),r.value.reload()}(),D(n,!0)}function M(e){}function O(){u.value.show()}function U(){null!=x&&c.value.show(x)}function F(e){return async t=>m.value[e].chart_options}let j,L=null;function R(){D(_.value.label==k.label,!0)}async function D(e,t){p.value=await C(e,t),e&&(_.value=k)}async function z(e){D(!0),await V(e,!0,!0)}function B(){V(x,!1,!1)}async function V(e,n,a){let l=b.get_status(),s=function(e){let t=Number.parseInt((e.epoch_end-e.epoch_begin)/60);return t<=5?"5m":t<=30?"30m":t<=60?"1h":t<=1440?"1d":t<=10080?"1w":t<=43200?"1M":"1Y"}(l);n&&(j=await gf.getTsChartsOptions(http_prefix,l,s,e,t.is_ntop_pro)),function(e,t){e.forEach(((e,n)=>{let a=t[n]?.query?.label;if(null!=a){let t=gf.getMainSourceDefIndex(e);e.source_array[t].label=a}}))}(e,j),function(e){m.value=e.map(((e,t)=>({key:v.get_random_string(),chart_options:e})))}(gf.tsArrayToApexOptionsArray(j,e,y.value,s)),function(e,t,n){let a=!0;if(h.value=t.map((e=>!e.source_type.disable_stats)).reduce(((e,t)=>e|t),!1),!h.value)return;const l=e=>"bps"==e?"bytes_network":e;W.value=[],e.forEach(((e,s)=>{let i=t[s];1!=i.source_type.disable_stats&&e.series.forEach(((t,o)=>{let r,c=gf.getSerieId(t),u=i.metric.timeseries[c],d=f.getFormatter(i.metric.measure_unit);if("top"==i.metric.type?r=e.statistics:e?.statistics?.by_serie?.length>s&&(r=e.statistics.by_serie[o]),null==r||"top"==i.metric.type&&o>0)return;let p=gf.getSerieName(u.label,c,i,a),_=null,h=l(i.metric.measure_unit),m=f.getFormatter(h);if(null!=r.total){_=(n.epoch_end-n.epoch_begin)*r.average}let g={metric:p,total:m(_),perc_95:d(r["95th_percentile"]),avg:d(r.average),max:d(r.max_val),min:d(r.min_val)};W.value.push(g)}))}))}(j,e,l),a&&function(e,n){if(!t.is_ntop_pro)return;null==e&&(e=x);null==n&&(n=b.get_status());let a=tf.sources_types_tables,l={};e.forEach((e=>{e.source_type;let t=tf.get_ts_group_id(e.source_type,e.source_array);l[t]=e}));let s={};H.value=[];for(let e in l){let i=l[e],o=gf.getMainSourceDefIndex(i),r=i.source_array[o],c=i.source_type,u=a[c.id];null!=u&&u.forEach((e=>{let a=t.sources_types_top_enabled[e.table_value];if(null==a)return;if(!a[e.view])return;let l=e.table_source_def_value_dict,o=q(i,e.table_value,e.view,l,n),u=tf.get_ts_group_id(i.source_type,i.source_array,null,l,!0);if(u=`${u}_${e.view}`,null!=s[u])return;s[u]=!0;let d,p=`${e.table_value}_${e.view}_${u}`;d=null==e.f_get_label?`${e.title} - ${c.label} ${r.label}`:e.f_get_label(i);const _={ts_group:i,table_def:e,table_buttons:[],data_url:o,enable_search:!0,table_config:{serverSide:!1,order:[[e.default_sorting_columns,"desc"]]}};_.columns_config=e.columns.map((e=>{let a={is_history_enabled:t.is_history_enabled},l={visible:!e.render_if||e.render_if(a),...e};return null==l.className&&(l.className="text-nowrap"),null==l.responsivePriority&&(l.responsivePriority=1),l.render=e.render.bind({add_metric_from_metric_schema:E,add_ts_group_from_source_value_dict:A,sources_types_enabled:t.sources_types_enabled,status:n,source_type:c,source_array:i.source_array}),l}));let f={value:p,label:d,table_config_def:_};H.value.push(f)}))}if(null!=G.value&&H.value.find((e=>e.value==G.value.value)))return;G.value=H.value.find((e=>1==e.table_config_def.default)),null==G.value&&(G.value=H.value[0])}(e,l),x=e,w.set_key_to_url("timeseries_groups_mode",y.value.value),tf.set_timeseries_groups_in_url(x)}function q(e,t,n,a,l){null==l&&(l=b.get_status());let s=gf.getTsQuery(e,!0,a),i=`${http_prefix}/lua/pro/rest/v2/get/${t}/top/ts_stats.lua`,o={zoom:"5m",ts_query:s,epoch_begin:`${l.epoch_begin}`,epoch_end:`${l.epoch_end}`,detail_view:`${n}`,new_charts:"true"};return`${i}?${w.add_obj_to_url(o,"")}`}const H=_n([]),G=_n({});let K=[{id:"metric",label:a("page_stats.metric")},{id:"avg",label:a("page_stats.average")},{id:"perc_95",label:a("page_stats.95_perc")},{id:"max",label:a("page_stats.max")},{id:"min",label:a("page_stats.min")},{id:"total",label:a("page_stats.total")}];const W=_n([]);const J=_n(null);function Y(){J.value.show()}function X(){if(!j?.length)return;let e=x[0],t=gf.getSerieName(null,null,e);d.value.show(t)}async function Z(e){let t=i.value.map((async e=>{let t=await e.get_data_uri();return new Promise(((e,n)=>{let a=new Image;a.src=t,a.onload=function(){e(a)}}))})),n=0,a=await Promise.all(t);a.forEach((e=>{n+=e.height}));let l=document.createElement("canvas"),s=l.getContext("2d");l.width=a[0].width,l.height=n,n=0,a.forEach((e=>{s.drawImage(e,0,n,e.width,e.height),n+=e.height})),v.download_URI(l.toDataURL(),e)}return(t,n)=>(As(),Ms(xs,null,[zs("div",Th,[Bs(bh),zs("div",Ph,[Bs(Ld,{style:{"margin-top":"0.5rem"},id:vn(l),enable_refresh:!0,ref_key:"date_time_picker",ref:o,onEpoch_change:I},{begin:fa((()=>[])),extra_buttons:fa((()=>[e.enable_snapshots?(As(),Ms("button",{key:0,class:"btn btn-link btn-sm",onClick:O,title:a("page_stats.manage_snapshots_btn")},Mh,8,Ih)):Ks("v-if",!0),e.traffic_extraction_permitted?(As(),Ms("button",{key:1,class:"btn btn-link btn-sm",onClick:Y,title:a("traffic_recording.pcap_download")},Uh,8,Oh)):Ks("v-if",!0),zs("button",{class:"btn btn-link btn-sm",onClick:X,title:a("page_stats.title_modal_download_file")},jh,8,Fh)])),_:1},8,["id"]),Ks(" select metric "),vl(zs("div",Lh,[zs("div",Rh,[Bs(jd,{selected_option:_.value,"onUpdate:selected_option":n[0]||(n[0]=e=>_.value=e),options:p.value,onSelect_option:P},null,8,["selected_option","options"])]),zs("div",Dh,[Bs(jd,{selected_option:y.value,"onUpdate:selected_option":n[1]||(n[1]=e=>y.value=e),options:vn(g),onSelect_option:B},null,8,["selected_option","options"])]),e.is_ntop_pro?(As(),Ms("button",{key:0,type:"button",onClick:U,class:"btn btn-sm btn-primary inline",style:{"vertical-align":"super"}}," Manage Timeseries ")):Ks("v-if",!0)],512),[[Ko,S.value]]),(As(!0),Ms(xs,null,Cl(m.value,((e,t)=>(As(),Ms("div",{key:e.key,class:"m-3",style:{height:"300px"}},[Bs(Id,{id:vn("chart")+t,ref_for:!0,ref:e=>{i.value[t]=e},chart_type:vn(s),register_on_status_change:!1,get_custom_chart_options:F(t),onZoom:I,onChart_reloaded:M},null,8,["id","chart_type","get_custom_chart_options"])])))),128))]),h.value?(As(),Ms("div",zh,[zs("div",Bh,[Bs(Ah,{id:"page_stats_bootstrap_table",columns:vn(K),rows:W.value,print_html_column:e=>function(e){return e.label}(e),print_html_row:(e,t)=>function(e,t){return t[e.id]}(e,t)},null,8,["columns","rows","print_html_column","print_html_row"])])])):Ks("v-if",!0),e.is_ntop_pro?(As(),Ms("div",Vh,[zs("div",qh,[G.value?.table_config_def?(As(),Ms("div",Hh,[Bs(jd,{selected_option:G.value,"onUpdate:selected_option":n[2]||(n[2]=e=>G.value=e),options:H.value},null,8,["selected_option","options"])])):Ks("v-if",!0),G.value?.table_config_def?(As(),Os($h,{key:G.value?.value,ref_key:"top_table_ref",ref:r,table_buttons:G.value.table_config_def.table_button,columns_config:G.value.table_config_def.columns_config,data_url:G.value.table_config_def.data_url,enable_search:G.value.table_config_def.enable_search,table_config:G.value.table_config_def.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])):Ks("v-if",!0)])])):Ks("v-if",!0)]),e.enable_snapshots?(As(),Os(Wp,{key:0,ref_key:"modal_snapshot",ref:u,csrf:e.csrf,page:$,onAdded_snapshot:R,onDeleted_snapshots:R,onDeleted_all_snapshots:R},null,8,["csrf"])):Ks("v-if",!0),e.is_ntop_pro?(As(),Os(Hf,{key:1,ref_key:"modal_timeseries",ref:c,sources_types_enabled:e.sources_types_enabled,onApply:z},null,8,["sources_types_enabled"])):Ks("v-if",!0),Bs(Gf,{id:"page_stats_modal_traffic_extraction",ref_key:"modal_traffic_extraction",ref:J},null,512),Bs(vh,{ref_key:"modal_download_file",ref:d,title:a("page_stats.title_modal_download_file"),ext:"png",onDownload:Z},null,8,["title"])],64))}};pp("\n.inline[data-v-937058e4] {\n    display: inline-block;\n}\n.select2-size[data-v-937058e4] {\n    min-width: 18rem;\n}\n"),Gh.__scopeId="data-v-937058e4",Gh.__file="http_src/vue/page-stats.vue";var Kh=Ka({components:{},props:{id:String,tab_list:Array},emits:["click_item"],created(){},data:()=>({old_tab:null}),mounted(){let e;this.tab_list.forEach((function(t){t.active&&(e=t)})),null==e&&(e=this.tab_list[0]),this.old_tab=e.id||e.name,ntopng_sync.ready(this.$props.id)},methods:{change_tab:function(e){e.id&&this.old_tab==e.id||e.name&&this.old_tab==e.name||(this.old_tab=e.id||e.name,this.$emit("click_item",e))}}});const Wh={class:"card-header mb-2"},Jh={class:"nav nav-tabs card-header-tabs",role:"tablist"},Yh=["onClick"],Xh=["onClick"];Kh.render=function(e,t,n,a,l,s){return As(),Ms("div",Wh,[zs("ul",Jh,[(As(!0),Ms(xs,null,Cl(e.tab_list,(t=>(As(),Ms(xs,null,[t.active?(As(),Ms("li",{key:0,onClick:n=>e.change_tab(t),class:H([{active:t.active},"nav-item nav-link"])},Z(t.title),11,Yh)):(As(),Ms("a",{key:1,onClick:n=>e.change_tab(t),href:"#",class:"nav-item nav-link"},Z(t.title),9,Xh))],64)))),256))])])},Kh.__file="http_src/vue/tab-list.vue";var Zh={__name:"modal-delete-confirm",props:{body:String,title:String},emits:["delete"],setup(e,{expose:t,emit:n}){const a=_n(null),l=()=>{n("delete"),s()},s=()=>{a.value.close()};t({show:()=>{a.value.show()},close:s}),cl((()=>{}));const i=e=>i18n(e);return(t,n)=>(As(),Os(_p,{onShowed:n[0]||(n[0]=e=>{}),ref_key:"modal_id",ref:a},{title:fa((()=>[Hs(Z(e.title),1)])),body:fa((()=>[Hs(Z(e.body),1)])),footer:fa((()=>[zs("button",{type:"button",onClick:l,class:"btn btn-danger"},Z(i("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-confirm.vue"};const Qh="change_asset_table_tab_event";var em={components:{datatable:$h,"modal-delete-confirm":Zh,"tab-list":Kh},props:{page_csrf:String,url_params:Object,view:String,table_filters:Array},created(){w.set_key_to_url("asset_family",this.$props.url_params.asset_family),function(e){const t=[];let n=[];e.get_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,url_params),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,n,a,l){e.reload_table()}});let a=url_params;a.view="standard";let l={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,a),enable_search:!0},s=[];for(let t of e.$props.table_filters||[])t.callbackFunction=(n,l)=>{a.view=e.asset_table_tab,a[t.filterMenuKey]=l.id,w.set_key_to_url(t.filterMenuKey,l.id),n.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,a)),NtopUtils.showOverlays(),n.ajax.reload(),NtopUtils.hideOverlays()},s.push(t);n=[{columnName:i18n("map_page.client"),name:"client",data:"client",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.server"),name:"server",data:"server",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.asset_family"),name:"family",data:"family",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.last_seen"),name:"last_seen",data:"last_seen",className:"text-center",responsivePriority:2}];let i=ntopng_utility.clone(l);i.table_config={serverSide:!1,order:[[3,"desc"]]},i.columns_config=n,i.table_filters=s,e.config_devices_standard=i,a.view="centrality",l.data_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,a),n=[{columnName:i18n("map_page.host"),name:"host",data:"host",className:"text-nowrap",render:(e,t)=>e.label,responsivePriority:1},{columnName:i18n("map_page.asset_total_edges"),name:"total_edges",data:"total_edges",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.asset_in_edges"),name:"in_edges",data:"in_edges",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.asset_out_edges"),name:"out_edges",data:"out_edges",className:"text-center",responsivePriority:2}];let o=ntopng_utility.clone(l);o.table_config={serverSide:!1,order:[[1,"desc"]]},o.columns_config=n,o.table_filters=s,console.log(i),console.log(o),e.config_devices_centrality=o}(this)},mounted(){this.asset_table_tab=w.get_url_entry("view")||"standard",this.tab_list.forEach((e=>{this.asset_table_tab==e.id?e.active=!0:e.active=!1})),S.on_custom_event("page_asset_table",ntopng_custom_events.DATATABLE_LOADED,(()=>{w.get_url_entry("host")&&this.hide_dropdowns()})),S.on_custom_event("change_asset_table_tab",Qh,(e=>{let t=this.get_active_table();w.set_key_to_url("view",e),t.destroy_table(),this.asset_table_tab=e})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog()))},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null,title_delete:i18n("map_page.delete_assets"),body_delete:i18n("map_page.delete_assets_message"),title_download:i18n("map_page.download"),body_download:i18n("map_page.download_message"),get_url:null,asset_table_tab:null,tab_list:[{title:i18n("map_page.standard_view"),active:"standard"==view,id:"standard"},{title:i18n("map_page.centrality_view"),active:"centrality"==view,id:"centrality"}]}),methods:{destroy:function(){this.get_active_table().destroy_table()},click_item:function(e){this.tab_list.forEach((e=>e.active=!1)),e.active=!0,S.emit_custom_event(Qh,e.id)},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",page:this.url_params.page,csrf:this.$props.page_csrf,map:this.url_params.map};try{let n={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:n,body:JSON.stringify(t)}),this.reload_table()}catch(e){this.reload_table()}},hide_dropdowns:function(){$("#network_dropdown").removeClass("d-inline"),$("#vlan_id_dropdown").removeClass("d-inline"),$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},get_active_table:function(){return this.$refs[`table_asset_${this.asset_table_tab}`]},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()}}};const tm={class:"row"},nm={class:"col-md-12 col-lg-12"},am=zs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),lm={class:"card"},sm=zs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[zs("div",{class:"text-center"},[zs("div",{class:"spinner-border text-primary mt-5",role:"status"},[zs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),im={class:"card-body"},om={id:"table_asset"},rm=Hs(' :table_config="config_devices_standard.table_config"> '),cm=Hs(' :table_config="config_devices_centrality.table_config"> '),um={class:"card-footer"},dm={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},pm=zs("i",{class:"fas fa-trash"},null,-1),_m=["href"],fm=[zs("i",{class:"fas fa-download"},null,-1)];em.render=function(e,t,n,a,l,s){const i=yl("modal-delete-confirm"),o=yl("tab-list"),r=yl("datatable");return As(),Ms("div",tm,[zs("div",nm,[am,zs("div",lm,[sm,zs("div",im,[zs("div",om,[Bs(i,{ref:"modal_delete_all",title:l.title_delete,body:l.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Bs(o,{ref:"asset_tab_list",id:"asset_tab_list",tab_list:l.tab_list,onClick_item:s.click_item},null,8,["tab_list","onClick_item"]),"standard"==l.asset_table_tab?(As(),Os(r,{key:0,ref:"table_asset_standard",table_buttons:l.config_devices_standard.table_buttons,columns_config:l.config_devices_standard.columns_config,data_url:l.config_devices_standard.data_url,enable_search:l.config_devices_standard.enable_search,filter_buttons:l.config_devices_standard.table_filters},{default:fa((()=>[rm])),_:1},8,["table_buttons","columns_config","data_url","enable_search","filter_buttons"])):Ks("v-if",!0),"centrality"==l.asset_table_tab?(As(),Os(r,{key:1,ref:"table_asset_centrality",table_buttons:l.config_devices_centrality.table_buttons,columns_config:l.config_devices_centrality.columns_config,data_url:l.config_devices_centrality.data_url,enable_search:l.config_devices_centrality.enable_search,filter_buttons:l.config_devices_centrality.table_filters},{default:fa((()=>[cm])),_:1},8,["table_buttons","columns_config","data_url","enable_search","filter_buttons"])):Ks("v-if",!0)])]),zs("div",um,[zs("button",dm,[pm,Hs(" "+Z(l.i18n("map_page.delete_assets")),1)]),zs("a",{href:l.get_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"asset_map.json",target:"_blank"},fm,8,_m)])])])])},em.__file="http_src/vue/page-asset-table.vue";var hm={components:{datatable:$h,"modal-delete-confirm":Zh},props:{page_csrf:String,url_params:Object,view:String,table_filters:Array,is_admin:Boolean},created(){!function(e){const t=[];let n=[],a=0;e.get_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,url_params),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,n,a,l){e.reload_table()}});let l=ntopng_utility.clone(url_params);l.view=null;let s={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l),enable_search:!0},i=[];for(let t of e.$props.table_filters||[])t.callbackFunction=(e,n)=>{l[t.filterMenuKey]=n.id,w.set_key_to_url(t.filterMenuKey,n.id),e.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l)),NtopUtils.showOverlays(),e.ajax.reload(),NtopUtils.hideOverlays()},i.push(t);n=[{columnName:i18n("map_page.last_seen"),name:"last_seen",data:"last_seen",className:"text-center text-nowrap",render:(e,t)=>e.value,responsivePriority:2},{columnName:i18n("map_page.client"),name:"client",data:"client",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.server"),name:"server",data:"server",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.port"),name:"port",data:"port",className:"text-center",responsivePriority:4},{columnName:i18n("map_page.protocol"),name:"l7proto",data:"protocol",className:"text-nowrap",responsivePriority:3},{columnName:i18n("map_page.first_seen"),name:"first_seen",data:"first_seen",visible:!1,responsivePriority:3},{columnName:i18n("map_page.observations"),name:"observations",data:"observations",className:"text-center",responsivePriority:4},{columnName:i18n("map_page.frequency"),name:"frequency",data:"frequency",className:"text-center",orderable:!0,responsivePriority:4,render:(e,t,n)=>"sort"==t||"type"==t?e:e+" sec"}],a=6;let o={serverSide:!0,order:[[a,"desc"]]},r=ntopng_utility.clone(s);r.table_buttons=s.table_buttons,r.data_url=`${r.data_url}`,r.columns_config=n,r.table_filters=i,r.table_config=ntopng_utility.clone(o),e.config_devices_standard=r}(this)},mounted(){$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),ntopng_events_manager.on_custom_event("page_periodicity_table",ntopng_custom_events.DATATABLE_LOADED,(()=>{w.get_url_entry("host")&&this.hide_dropdowns()}))},data:()=>({i18n:e=>i18n(e),base_url:`${http_prefix}/lua/pro/enterprise/get_map.lua`,config_devices_standard:null,config_devices_centrality:null,title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_download:i18n("map_page.download"),body_download:i18n("map_page.download_message"),get_url:null}),methods:{hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden"),$("#network_dropdown").removeClass("d-inline"),$("#vlan_id_dropdown").removeClass("d-inline")},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",page:this.url_params.page,csrf:this.$props.page_csrf,map:this.url_params.map};try{let n={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:n,body:JSON.stringify(t)}),this.reload_table()}catch(e){this.reload_table()}},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},destroy:function(){this.get_active_table().destroy_table()},get_active_table:function(){return this.$refs.table_periodicity},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()}}};const mm={class:"row"},gm={class:"col-md-12 col-lg-12"},vm=zs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),bm={class:"card"},ym=zs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[zs("div",{class:"text-center"},[zs("div",{class:"spinner-border text-primary mt-5",role:"status"},[zs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),wm={class:"card-body"},xm={id:"periodicity-table"},km={class:"card-footer"},$m={key:0,type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Sm=zs("i",{class:"fas fa-trash"},null,-1),Cm=["href"],Nm=[zs("i",{class:"fas fa-download"},null,-1)];hm.render=function(e,t,n,a,l,s){const i=yl("modal-delete-confirm"),o=yl("datatable");return As(),Ms("div",mm,[zs("div",gm,[vm,zs("div",bm,[ym,zs("div",wm,[zs("div",xm,[Bs(i,{ref:"modal_delete_all",title:l.title_delete,body:l.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Bs(o,{ref:"table_periodicity",table_buttons:l.config_devices_standard.table_buttons,columns_config:l.config_devices_standard.columns_config,data_url:l.config_devices_standard.data_url,enable_search:l.config_devices_standard.enable_search,filter_buttons:l.config_devices_standard.table_filters,table_config:l.config_devices_standard.table_config,base_url:l.base_url,base_params:n.url_params},null,8,["table_buttons","columns_config","data_url","enable_search","filter_buttons","table_config","base_url","base_params"])])]),zs("div",km,[n.is_admin?(As(),Ms("button",$m,[Sm,Hs(" "+Z(l.i18n("map_page.delete_services")),1)])):Ks("v-if",!0),zs("a",{href:l.get_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"periodicity_map.json",target:"_blank"},Nm,8,Cm)])])])])},hm.__file="http_src/vue/page-periodicity-table.vue";const Am={autoResize:!0,nodes:{shape:"dot",scaling:{min:10,max:30,label:{min:15,max:15}},shadow:!1},edges:{width:.15,color:{inherit:"from"},smooth:{type:"continuous",roundness:0}},interaction:{tooltipDelay:150,hideEdgesOnDrag:!0,hideEdgesOnZoom:!0,hover:!0,tooltipDelay:0},physics:{barnesHut:{springConstant:0,avoidOverlap:.3,gravitationalConstant:-1e3,damping:.65,centralGravity:0},stabilization:{onlyDynamicEdges:!1}},groups:{unknown:{shape:"dot"},printer:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},video:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},workstation:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},laptop:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},tablet:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},phone:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},tv:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},networking:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},wifi:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},nas:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},multimedia:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},iot:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}}}},Em=function(e,t,n,a){$.post(`${http_prefix}/lua/pro/enterprise/switch_service_state.lua`,{service_id:e,service_status:t,csrf:a}).then((e=>{e.success&&n&&n()}))},Tm=function(){return Am},Pm="change_service_table_tab_event";var Im={components:{datatable:$h,"modal-delete-confirm":Zh,"tab-list":Kh},props:{page_csrf:String,url_params:Object,view:String,table_filters:Array,is_admin:Boolean,service_acceptance:Array},created(){!function(e){const t=[];let n=[],a=0;e.get_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,url_params),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,n,a,l){e.reload_table()}});let l=url_params;l.view="standard";let s={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l),enable_search:!0},i=[];for(let t of e.$props.table_filters||[])t.callbackFunction=(n,a)=>{l.view=e.service_table_tab,l[t.filterMenuKey]=a.id,w.set_key_to_url(t.filterMenuKey,a.id),n.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l)),NtopUtils.showOverlays(),n.ajax.reload(),NtopUtils.hideOverlays()},i.push(t);n=[{columnName:i18n("map_page.last_seen"),name:"last_seen",data:"last_seen",className:"text-center text-nowrap",render:(e,t)=>e.value,responsivePriority:2,createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("map_page.client"),name:"client",data:"client",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.server"),name:"server",data:"server",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.port"),name:"port",data:"port",className:"text-center",responsivePriority:4},{columnName:i18n("map_page.protocol"),name:"l7proto",data:"protocol",className:"text-nowrap",responsivePriority:3},{columnName:i18n("map_page.first_seen"),name:"first_seen",data:"first_seen",visible:!1,responsivePriority:3},{columnName:i18n("map_page.num_uses"),name:"num_uses",data:"num_uses",className:"text-center text-nowrap",responsivePriority:4},{columnName:i18n("map_page.info"),name:"info",data:"info",responsivePriority:5}],a=6,e.is_admin&&n.push({columnName:i18n("map_page.status"),name:"service_acceptance",data:"service_acceptance",className:"text-center",orderable:!1,responsivePriority:1,render:(t,n,a)=>e.create_action_buttons(t,n,a)});let o={serverSide:!0,order:[[a,"desc"]]},r=ntopng_utility.clone(s);r.table_buttons=s.table_buttons,r.data_url=`${r.data_url}`,r.columns_config=n,r.table_filters=i,r.table_config=ntopng_utility.clone(o),e.config_devices_standard=r,l.view="centrality",s.data_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l),n=[{columnName:i18n("map_page.host"),name:"host",data:"host",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.total_edges"),name:"total_edges",data:"total_edges",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.rank"),name:"rank",data:"rank",className:"text-center",responsivePriority:2},{columnName:i18n("map_page.in_edges"),name:"in_edges",data:"in_edges",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.out_edges"),name:"out_edges",data:"out_edges",className:"text-center",responsivePriority:2}],a=2,o.order=[[a,"desc"]],r=ntopng_utility.clone(s),r.table_buttons=s.table_buttons,r.data_url=`${r.data_url}`,r.columns_config=n,r.table_filters=i,r.table_config=ntopng_utility.clone(o),e.config_devices_centrality=r}(this)},mounted(){this.service_table_tab=this.$props.url_params.view,this.tab_list.forEach((e=>{this.service_table_tab==e.id?e.active=!0:e.active=!1})),S.on_custom_event("page_service_table",ntopng_custom_events.DATATABLE_LOADED,(()=>{w.get_url_entry("host")&&this.hide_dropdowns()})),S.on_custom_event("change_service_table_tab",Pm,(e=>{let t=this.get_active_table();w.set_key_to_url("view",e),t.delete_button_handlers(this.service_table_tab),t.destroy_table(),this.service_table_tab=e})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog()))},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null,title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),get_url:null,service_table_tab:null,tab_list:[{title:i18n("map_page.standard_view"),active:"standard"==view,id:"standard"},{title:i18n("map_page.centrality_view"),active:"centrality"==view,id:"centrality"}]}),methods:{hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden"),$("#network_dropdown").removeClass("d-inline"),$("#vlan_id_dropdown").removeClass("d-inline")},destroy:function(){let e=this.get_active_table();e.delete_button_handlers(this.service_table_tab),e.destroy_table()},click_item:function(e){this.tab_list.forEach((e=>e.active=!1)),e.active=!0,S.emit_custom_event(Pm,e.id)},create_action_buttons:function(e,t,n){const a=this.reload_table,l=this.$props.page_csrf,s={onClick:()=>{Em(n.hash_id,this.$props.service_acceptance[0].id,a,l)}},i={onClick:()=>{Em(n.hash_id,this.$props.service_acceptance[1].id,a,l)}},o={onClick:()=>{Em(n.hash_id,this.$props.service_acceptance[2].id,a,l)}};if("display"!==t)return e;const r=n.acceptance,c={class:"dropdown-item",href:"#",title:this.$props.service_acceptance[0].label,handler:s},u={class:"dropdown-item",href:"#",title:this.$props.service_acceptance[1].label,handler:i},d={class:"dropdown-item disabled",href:"#",title:this.$props.service_acceptance[2].label,handler:o};switch(r){case 0:c.class="dropdown-item active";break;case 1:u.class="dropdown-item active";break;case 2:d.class="dropdown-item active disabled"}return DataTableUtils.createActionButtons([d,c,u])},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",page:this.url_params.page,csrf:this.$props.page_csrf,map:this.url_params.map};try{let n={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:n,body:JSON.stringify(t)}),this.reload_table()}catch(e){this.reload_table()}},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},get_active_table:function(){return this.$refs[`table_service_${this.service_table_tab}`]},switch_to_standard:function(){this.url_params.view="standard",document.location.href=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/network_maps.lua`,url_params)},switch_to_centrality:function(){this.url_params.view="centrality",document.location.href=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/network_maps.lua`,url_params)},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()}}};const Mm={class:"row"},Om={class:"col-md-12 col-lg-12"},Um=zs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),Fm={class:"card"},jm=zs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[zs("div",{class:"text-center"},[zs("div",{class:"spinner-border text-primary mt-5",role:"status"},[zs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Lm={class:"card-body"},Rm={id:"table_service"},Dm={class:"card-footer"},zm={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Bm=zs("i",{class:"fas fa-trash"},null,-1),Vm=["href"],qm=[zs("i",{class:"fas fa-download"},null,-1)];Im.render=function(e,t,n,a,l,s){const i=yl("modal-delete-confirm"),o=yl("tab-list"),r=yl("datatable");return As(),Ms("div",Mm,[zs("div",Om,[Um,zs("div",Fm,[jm,zs("div",Lm,[zs("div",Rm,[Bs(i,{ref:"modal_delete_all",title:l.title_delete,body:l.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Bs(o,{ref:"service_tab_list",id:"service_tab_list",tab_list:l.tab_list,onClick_item:s.click_item},null,8,["tab_list","onClick_item"]),"standard"==l.service_table_tab?(As(),Os(r,{key:0,ref:"table_service_standard",table_buttons:l.config_devices_standard.table_buttons,columns_config:l.config_devices_standard.columns_config,data_url:l.config_devices_standard.data_url,enable_search:l.config_devices_standard.enable_search,filter_buttons:l.config_devices_standard.table_filters,table_config:l.config_devices_standard.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","filter_buttons","table_config"])):Ks("v-if",!0),"centrality"==l.service_table_tab?(As(),Os(r,{key:1,ref:"table_service_centrality",table_buttons:l.config_devices_centrality.table_buttons,columns_config:l.config_devices_centrality.columns_config,data_url:l.config_devices_centrality.data_url,enable_search:l.config_devices_centrality.enable_search,filter_buttons:l.config_devices_centrality.table_filters,table_config:l.config_devices_centrality.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","filter_buttons","table_config"])):Ks("v-if",!0)])]),zs("div",Dm,[Ks('\n        {% if is_admin then %}\n          <form class="d-inline" id=\'switch-state-form\'>\n            <div class="form-group mb-3 d-inline">\n              <label>{* i18n("map_page.set_state", {label = "<span class=\'count\'></span>"}) *}</label>\n              <select name="new_state" class="form-select d-inline" style="width: 16rem" {{ ternary(map.services_num == 0, "disabled=\'disabled\'", "") }}>\n              {% for _, status in pairsByField(map.filters.service_status_filters, label, asc_insensitive) do %}\n                <option value="{{ status.id }}">{* status.label *}</option>\n              {% end %}\n              </select>\n              <button class="btn btn-secondary d-inline" class="btn-switch-state" {{ ternary(map.services_num == 0, "disabled=\'disabled\'", "") }}>\n                <i class="fas fa-random"></i> {{ i18n("set") }}\n              </button>\n            </div>\n          </form>\n        {% end %}\n    '),zs("button",zm,[Bm,Hs(" "+Z(l.i18n("map_page.delete_services")),1)]),zs("a",{href:l.get_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"service_map.json",target:"_blank"},qm,8,Vm)])])])])},Im.__file="http_src/vue/page-service-table.vue";const Hm={id:"empty-map-message",class:"alert alert-info",hidden:""},Gm=["id"];var Km={__name:"network-map",props:{empty_message:String,event_listeners:Object,page_csrf:String,url:String,url_params:Object,map_id:String},setup(e,{expose:t}){const n=e,a={ifid:n.url_params.ifid,action:"load_graph",map:n.url_params.map_id};let l=null,s={},i={},o=null,r=!1,c=null,u={},d=!1;cl((async()=>{_(),u=n.url_params,o=document.getElementById(n.map_id);const e=NtopUtils.buildURL(n.url,u);await $.get(e,a,(function(e){const{nodes:t,edges:n,max_entry_reached:a}=e.rsp;r=a,s=new vis.DataSet(t),i=new vis.DataSet(n);const c={nodes:s,edges:i};p(c),l=new vis.Network(o,c,Tm()),h(),f(),S.emit_custom_event(ntopng_custom_events.VIS_DATA_LOADED)}))})),pl((()=>{1!=d&&v()}));const p=e=>{0==e.nodes.length&&0==e.edges.length?$("#empty-map-message").removeAttr("hidden"):$("#empty-map-message").attr("hidden","hidden")},_=()=>{const e=NtopUtils.loadElementScale($(".resizable-y-container"));if(void 0!==e)$(".resizable-y-container").width(e.width),$(".resizable-y-container").height(e.height),$(".resizable-y-container").on("mouseup",(function(){const e={width:$(".resizable-y-container").width(),height:$(".resizable-y-container").height()};NtopUtils.saveElementScale($(this),e)})),$('button[data-toggle="tooltip"]').tooltip();else{const e={width:$(".resizable-y-container").width(),height:$(".resizable-y-container").height()};NtopUtils.saveElementScale($(this),e)}},f=()=>{l.on("hoverEdge",(function(){$(".vis-tooltip").css("position","absolute")})),l.on("doubleClick",(function(e){(e=>{const t=e.id.split("@");u.host=t[0],u.vlan_id=t[1],w.set_key_to_url("host",u.host),w.set_key_to_url("vlan_id",u.vlan_id),S.emit_custom_event(ntopng_custom_events.CHANGE_PAGE_TITLE,e),b()})(s.get(e.nodes[0]))})),l.on("zoom",(function(e){c=m()})),l.on("dragEnd",(function(e){g()}));for(const e in n.event_listeners||{})l.on(e,n.event_listeners[e])},h=()=>{if(!l)return;const e=l.getPositions(l.body.data.nodes.map((e=>e.id))),t={positions:e,network:{scale:l.getScale(),position:l.getViewPosition()}};$.post(n.url,{...u,csrf:n.page_csrf,JSON:JSON.stringify(t),action:"save_view"})},m=()=>(l.getScale()<=.15&&l.moveTo({scale:.4,position:{x:0,y:0},animation:{duration:1e3,easingFunction:"easeInOutCubic"}}),clearTimeout(c),setTimeout(h)),g=()=>{c&&clearTimeout(c),h()},v=()=>{l.destroy(!0),d=!0},b=async()=>{console.log(u);const e=NtopUtils.buildURL(n.url,u);await $.get(e,a,(function(e){const{nodes:t,edges:n,max_entry_reached:a}=e.rsp;r=a,s=new vis.DataSet(t),i=new vis.DataSet(n);const o={nodes:s,edges:i};p(o),l&&l.setData(o),S.emit_custom_event(ntopng_custom_events.VIS_DATA_LOADED),h()}))};return t({reload:b,destroy:v,is_max_entry_reached:()=>r,autolayout:()=>{void 0!==l?l instanceof vis.Network?(l.stabilize(),setTimeout((()=>{h()}),1e3)):console.error("Not a vis.Network instance!"):console.error("The network is undefined!")},update_url_params:e=>{u=e}}),(t,n)=>(As(),Ms(xs,null,[zs("div",Hm,Z(e.empty_message),1),zs("div",{class:"d-flex justify-content-center align-items-center resizable-y-container",style:{width:"100%",height:"60vh"},id:e.map_id},null,8,Gm)],64))},__file:"http_src/vue/network-map.vue"},Wm={__name:"modal-autolayout-confirm",props:{body:String,title:String},emits:["autolayout"],setup(e,{expose:t,emit:n}){const a=_n(null),l=()=>{n("autolayout"),s()},s=()=>{a.value.close()};t({show:()=>{a.value.show()},close:s}),cl((()=>{}));const i=e=>i18n(e);return(t,n)=>(As(),Os(_p,{onShowed:n[0]||(n[0]=e=>{}),ref_key:"modal_id",ref:a},{title:fa((()=>[Hs(Z(e.title),1)])),body:fa((()=>[Hs(Z(e.body),1)])),footer:fa((()=>[zs("button",{type:"button",onClick:l,class:"btn btn-primary"},Z(i("confirm")),1)])),_:1},512))},__file:"http_src/vue/modal-autolayout-confirm.vue"};const Jm="change_filter_event";var Ym={components:{"network-map":Km,"modal-delete-confirm":Zh,"modal-autolayout-confirm":Wm,"select-search":jd},props:{page_csrf:String,ifid:Number,url_params:Object,map_id:String,is_admin:Boolean,all_filter_list:Object},created(){!function(e){for(const t in e.$props.all_filter_list){e.filter_list.push(e.$props.all_filter_list[t]);const n=ntopng_url_manager.get_url_entry(t);for(let[a,l]of Object.entries(e.$props.all_filter_list[t]))l.filter_name=t,n?l.id==n&&e.active_filter_list.push(l):1==l.currently_active&&e.active_filter_list.push(l)}e.get_url=`${http_prefix}/lua/pro/rest/v2/get/interface/map/data.lua`,e.download_url=NtopUtils.buildURL(e.get_url,e.$props.url_params),e.event_listeners={}}(this)},mounted(){const e=this.max_entry_reached,t=this.reload_map;this.$props.url_params.host&&""!=this.$props.url_params.host&&this.hide_dropdowns(),S.on_custom_event("page_service_map",ntopng_custom_events.CHANGE_PAGE_TITLE,(e=>{this.hide_dropdowns()})),S.on_custom_event("change_filter_event",Jm,(e=>{this.active_filter_list[e.id]=e,ntopng_url_manager.set_key_to_url(e.filter_name,e.key),this.url_params[e.filter_name]=e.key,this.update_and_reload_map()})),S.on_custom_event(this.get_map(),ntopng_custom_events.VIS_DATA_LOADED,(t=>{e()?$("#max-entries-reached").removeAttr("hidden"):$("#max-entries-reached").attr("hidden","hidden")}));let n=ntopng_url_manager.get_url_entries();for(const[e,t]of n)this.url_params[e]=t;$("#reload-graph").click((function(e){t()})),setTimeout((()=>NtopUtils.hideOverlays()),0),$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),$("#autolayout").click((()=>this.show_autolayout_dialog()))},data:()=>({i18n:e=>i18n(e),container:null,update_view_state_id:null,get_url:null,download_url:null,filter_list:[],active_filter_list:[],event_listeners:{},title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_autolayout:i18n("map_page.autolayout_services"),body_autolayout:i18n("map_page.autolayout_services_message"),no_services_message:i18n("map_page.no_services"),max_entry_title:i18n("max_entries_reached")}),methods:{destroy:function(){this.get_map().destroy()},click_item:function(e){S.emit_custom_event(Jm,e)},get_map:function(){return this.$refs.service_map},max_entry_reached:function(){return this.get_map().is_max_entry_reached()},reload_map:async function(){NtopUtils.showOverlays();let e=this.get_map();await e.reload(),NtopUtils.hideOverlays()},update_and_reload_map:async function(){let e=this.get_map();NtopUtils.showOverlays(),e.update_url_params(this.url_params),await e.reload(),NtopUtils.hideOverlays()},autolayout:function(){this.get_map().autolayout()},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_autolayout_dialog:function(){this.$refs.modal_autolayout.show()},hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",csrf:this.$props.page_csrf,map:this.url_params.map};try{let n={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:n,body:JSON.stringify(t)})}finally{this.reload_map()}}}};const Xm={class:"row"},Zm={class:"col-md-12 col-lg-12"},Qm={class:"card card-shadow"},eg=zs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[zs("div",{class:"text-center"},[zs("div",{class:"spinner-border text-primary mt-5",role:"status"},[zs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),tg={class:"card-body"},ng={id:"table_service"},ag={class:"d-flex align-items-center justify-content-end mb-2"},lg=["title"],sg=[zs("i",{class:"text-danger fa-solid fa-triangle-exclamation"},null,-1)],ig={class:"d-flex ms-auto"},og={class:"m-1"},rg=zs("button",{type:"button",id:"reload-graph",class:"btn btn-link btn-reload-graph"},[zs("i",{class:"fas fa-sync"})],-1),cg=zs("button",{type:"button",id:"autolayout",class:"btn btn-link btn-stabilize"},[zs("i",{class:"fas fa-magic"})],-1),ug={class:"card-footer"},dg={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},pg=zs("i",{class:"fas fa-trash"},null,-1),_g=["href"],fg=[zs("i",{class:"fas fa-download"},null,-1)];Ym.render=function(e,t,n,a,l,s){const i=yl("select-search"),o=yl("modal-delete-confirm"),r=yl("modal-autolayout-confirm"),c=yl("network-map");return As(),Ms("div",Xm,[zs("div",Zm,[zs("div",Qm,[eg,zs("div",tg,[zs("div",ng,[zs("div",ag,[zs("button",{id:"max-entries-reached",type:"button",class:"btn btn-link",title:l.max_entry_title,disabled:"",hidden:""},sg,8,lg),zs("div",ig,[(As(!0),Ms(xs,null,Cl(l.filter_list,((e,t)=>(As(),Ms("div",og,[Bs(i,{selected_option:l.active_filter_list[t],"onUpdate:selected_option":e=>l.active_filter_list[t]=e,options:l.filter_list[t],onSelect_option:s.click_item},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256))]),rg,cg]),Bs(o,{ref:"modal_delete_all",title:l.title_delete,body:l.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Bs(r,{ref:"modal_autolayout",title:l.title_autolayout,body:l.body_autolayout,onAutolayout:s.reload_map},null,8,["title","body","onAutolayout"]),Bs(c,{ref:"service_map",empty_message:l.no_services_message,event_listeners:l.event_listeners,page_csrf:n.page_csrf,url:l.get_url,url_params:n.url_params,map_id:n.map_id},null,8,["empty_message","event_listeners","page_csrf","url","url_params","map_id"])])]),zs("div",ug,[zs("button",dg,[pg,Hs(" "+Z(l.i18n("map_page.delete_services")),1)]),zs("a",{href:l.download_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"service_map.json",target:"_blank"},fg,8,_g)])])])])},Ym.__file="http_src/vue/page-service-map.vue";const hg="change_filter_event";var mg={components:{"network-map":Km,"modal-delete-confirm":Zh,"modal-autolayout-confirm":Wm,"select-search":jd},props:{page_csrf:String,ifid:Number,url_params:Object,map_id:String,is_admin:Boolean,all_filter_list:Object},created(){!function(e){for(const t in e.$props.all_filter_list){e.filter_list.push(e.$props.all_filter_list[t]);const n=ntopng_url_manager.get_url_entry(t);for(let[a,l]of Object.entries(e.$props.all_filter_list[t]))l.filter_name=t,n?l.id==n&&e.active_filter_list.push(l):1==l.currently_active&&e.active_filter_list.push(l)}e.get_url=`${http_prefix}/lua/pro/rest/v2/get/interface/map/data.lua`,e.download_url=NtopUtils.buildURL(e.get_url,e.updated_url_params),e.event_listeners={}}(this)},mounted(){this.updated_url_params=this.$props.url_params;let e=ntopng_url_manager.get_url_entries();for(const[t,n]of e)this.updated_url_params[t]=n;const t=this.max_entry_reached,n=this.reload_map;this.update_and_reload_map(),this.$props.url_params.host&&""!=this.$props.url_params.host&&this.hide_dropdowns(),S.on_custom_event("page_periodicity_map",ntopng_custom_events.CHANGE_PAGE_TITLE,(e=>{this.hide_dropdowns()})),S.on_custom_event("change_filter_event",hg,(e=>{this.active_filter_list[e.id]=e,ntopng_url_manager.set_key_to_url(e.filter_name,e.key),this.url_params[e.filter_name]=e.key,this.update_and_reload_map()})),S.on_custom_event(this.get_map(),ntopng_custom_events.VIS_DATA_LOADED,(e=>{t()?$("#max-entries-reached").removeAttr("hidden"):$("#max-entries-reached").attr("hidden","hidden")})),$("#reload-graph").click((function(e){n()})),setTimeout((()=>NtopUtils.hideOverlays()),0),$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),$("#autolayout").click((()=>this.show_autolayout_dialog()))},data:()=>({i18n:e=>i18n(e),container:null,update_view_state_id:null,get_url:null,download_url:null,updated_url_params:{},filter_list:[],active_filter_list:[],event_listeners:{},title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_autolayout:i18n("map_page.autolayout_services"),body_autolayout:i18n("map_page.autolayout_services_message"),no_services_message:i18n("map_page.no_services"),max_entry_title:i18n("max_entries_reached")}),methods:{destroy:function(){this.get_map().destroy()},click_item:function(e){S.emit_custom_event(hg,e)},get_map:function(){return this.$refs.periodicity_map},max_entry_reached:function(){return this.get_map().is_max_entry_reached()},reload_map:async function(){NtopUtils.showOverlays();let e=this.get_map();await e.reload(),NtopUtils.hideOverlays()},hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},update_and_reload_map:async function(){let e=this.get_map();NtopUtils.showOverlays(),e.update_url_params(this.updated_url_params),await e.reload(),NtopUtils.hideOverlays()},autolayout:function(){this.get_map().autolayout()},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_autolayout_dialog:function(){this.$refs.modal_autolayout.show()},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.updated_url_params.ifid,action:"reset",csrf:this.$props.page_csrf,map:this.updated_url_params.map};try{let n={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:n,body:JSON.stringify(t)})}finally{this.reload_map()}}}};const gg={class:"row"},vg={class:"col-md-12 col-lg-12"},bg={class:"card card-shadow"},yg=zs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[zs("div",{class:"text-center"},[zs("div",{class:"spinner-border text-primary mt-5",role:"status"},[zs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),wg={class:"card-body"},xg={id:"table_periodicity"},kg={class:"d-flex align-items-center justify-content-end mb-2"},$g=["title"],Sg=[zs("i",{class:"text-danger fa-solid fa-triangle-exclamation"},null,-1)],Cg={class:"d-flex ms-auto"},Ng={class:"m-1"},Ag=zs("button",{type:"button",id:"reload-graph",class:"btn btn-link btn-reload-graph"},[zs("i",{class:"fas fa-sync"})],-1),Eg=zs("button",{type:"button",id:"autolayout",class:"btn btn-link btn-stabilize"},[zs("i",{class:"fas fa-magic"})],-1),Tg={class:"card-footer"},Pg={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Ig=zs("i",{class:"fas fa-trash"},null,-1),Mg=["href"],Og=[zs("i",{class:"fas fa-download"},null,-1)];mg.render=function(e,t,n,a,l,s){const i=yl("select-search"),o=yl("modal-delete-confirm"),r=yl("modal-autolayout-confirm"),c=yl("network-map");return As(),Ms("div",gg,[zs("div",vg,[zs("div",bg,[yg,zs("div",wg,[zs("div",xg,[zs("div",kg,[zs("button",{id:"max-entries-reached",type:"button",class:"btn btn-link",title:l.max_entry_title,disabled:"",hidden:""},Sg,8,$g),zs("div",Cg,[(As(!0),Ms(xs,null,Cl(l.filter_list,((e,t)=>(As(),Ms("div",Ng,[Bs(i,{selected_option:l.active_filter_list[t],"onUpdate:selected_option":e=>l.active_filter_list[t]=e,options:l.filter_list[t],onSelect_option:s.click_item},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256))]),Ag,Eg]),Bs(o,{ref:"modal_delete_all",title:l.title_delete,body:l.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Bs(r,{ref:"modal_autolayout",title:l.title_autolayout,body:l.body_autolayout,onAutolayout:s.reload_map},null,8,["title","body","onAutolayout"]),Bs(c,{ref:"periodicity_map",empty_message:l.no_services_message,event_listeners:l.event_listeners,page_csrf:n.page_csrf,url:l.get_url,url_params:n.url_params,map_id:n.map_id},null,8,["empty_message","event_listeners","page_csrf","url","url_params","map_id"])])]),zs("div",Tg,[zs("button",Pg,[Ig,Hs(" "+Z(l.i18n("map_page.delete_services")),1)]),zs("a",{href:l.download_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"periodicity_map.json",target:"_blank"},Og,8,Mg)])])])])},mg.__file="http_src/vue/page-periodicity-map.vue";const Ug="change_filter_event";var Fg={components:{"network-map":Km,"modal-delete-confirm":Zh,"modal-autolayout-confirm":Wm,"select-search":jd},props:{page_csrf:String,ifid:Number,url_params:Object,map_id:String,is_admin:Boolean,all_filter_list:Object},created(){!function(e){for(const t in e.$props.all_filter_list){e.filter_list.push(e.$props.all_filter_list[t]);const n=w.get_url_entry(t);for(let[a,l]of Object.entries(e.$props.all_filter_list[t]))l.filter_name=t,n?l.id==n&&e.active_filter_list.push(l):1==l.currently_active&&e.active_filter_list.push(l)}e.get_url=`${http_prefix}/lua/pro/rest/v2/get/interface/map/data.lua`,e.download_url=NtopUtils.buildURL(e.get_url,e.$props.url_params),e.event_listeners={}}(this)},mounted(){const e=this.max_entry_reached,t=this.reload_map;this.$props.url_params.host&&""!=this.$props.url_params.host&&this.hide_dropdowns(),S.on_custom_event("page_service_map",ntopng_custom_events.CHANGE_PAGE_TITLE,(e=>{this.hide_dropdowns()})),S.on_custom_event("change_filter_event",Ug,(e=>{this.active_filter_list[e.id]=e,w.set_key_to_url(e.filter_name,e.key),this.url_params[e.filter_name]=e.key,this.update_and_reload_map()})),S.on_custom_event(this.get_map(),ntopng_custom_events.VIS_DATA_LOADED,(t=>{e()?$("#max-entries-reached").removeAttr("hidden"):$("#max-entries-reached").attr("hidden","hidden")}));let n=w.get_url_entries();for(const[e,t]of n)this.url_params[e]=t;$("#reload-graph").click((function(e){t()})),NtopUtils.hideOverlays(),$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),$("#autolayout").click((()=>this.show_autolayout_dialog()))},data:()=>({i18n:e=>i18n(e),container:null,update_view_state_id:null,get_url:null,download_url:null,filter_list:[],active_filter_list:[],event_listeners:{},title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_autolayout:i18n("map_page.autolayout_services"),body_autolayout:i18n("map_page.autolayout_services_message"),no_services_message:i18n("map_page.no_services"),max_entry_title:i18n("max_entries_reached")}),methods:{destroy:function(){this.get_map().destroy()},click_item:function(e){S.emit_custom_event(Ug,e)},get_map:function(){return this.$refs.asset_map},hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},max_entry_reached:function(){return this.get_map().is_max_entry_reached()},reload_map:async function(){NtopUtils.showOverlays();let e=this.get_map();await e.reload(),NtopUtils.hideOverlays()},update_and_reload_map:async function(){let e=this.get_map();NtopUtils.showOverlays(),e.update_url_params(this.url_params),await e.reload(),NtopUtils.hideOverlays()},autolayout:function(){this.get_map().autolayout()},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_autolayout_dialog:function(){this.$refs.modal_autolayout.show()},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",csrf:this.$props.page_csrf,map:this.url_params.map};try{let n={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:n,body:JSON.stringify(t)})}finally{NtopUtils.showOverlays(),this.reload_map(),NtopUtils.hideOverlays()}}}};const jg={class:"row"},Lg={class:"col-md-12 col-lg-12"},Rg={class:"card card-shadow"},Dg=zs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[zs("div",{class:"text-center"},[zs("div",{class:"spinner-border text-primary mt-5",role:"status"},[zs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),zg={class:"card-body"},Bg={id:"table_asset"},Vg={class:"d-flex align-items-center justify-content-end mb-2"},qg=["title"],Hg=[zs("i",{class:"text-danger fa-solid fa-triangle-exclamation"},null,-1)],Gg={class:"d-flex ms-auto"},Kg={class:"m-1"},Wg=zs("button",{type:"button",id:"reload-graph",class:"btn btn-link btn-reload-graph"},[zs("i",{class:"fas fa-sync"})],-1),Jg=zs("button",{type:"button",id:"autolayout",class:"btn btn-link btn-stabilize"},[zs("i",{class:"fas fa-magic"})],-1),Yg={class:"card-footer"},Xg={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Zg=zs("i",{class:"fas fa-trash"},null,-1),Qg=["href"],ev=[zs("i",{class:"fas fa-download"},null,-1)];Fg.render=function(e,t,n,a,l,s){const i=yl("select-search"),o=yl("modal-delete-confirm"),r=yl("modal-autolayout-confirm"),c=yl("network-map");return As(),Ms("div",jg,[zs("div",Lg,[zs("div",Rg,[Dg,zs("div",zg,[zs("div",Bg,[zs("div",Vg,[zs("button",{id:"max-entries-reached",type:"button",class:"btn btn-link",title:l.max_entry_title,disabled:"",hidden:""},Hg,8,qg),zs("div",Gg,[(As(!0),Ms(xs,null,Cl(l.filter_list,((e,t)=>(As(),Ms("div",Kg,[Bs(i,{selected_option:l.active_filter_list[t],"onUpdate:selected_option":e=>l.active_filter_list[t]=e,options:l.filter_list[t],onSelect_option:s.click_item},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256))]),Wg,Jg]),Bs(o,{ref:"modal_delete_all",title:l.title_delete,body:l.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Bs(r,{ref:"modal_autolayout",title:l.title_autolayout,body:l.body_autolayout,onAutolayout:s.reload_map},null,8,["title","body","onAutolayout"]),Bs(c,{ref:"asset_map",empty_message:l.no_services_message,event_listeners:l.event_listeners,page_csrf:n.page_csrf,url:l.get_url,url_params:n.url_params,map_id:n.map_id},null,8,["empty_message","event_listeners","page_csrf","url","url_params","map_id"])])]),zs("div",Yg,[zs("button",Xg,[Zg,Hs(" "+Z(l.i18n("map_page.delete_services")),1)]),zs("a",{href:l.download_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"asset_map.json",target:"_blank"},ev,8,Qg)])])])])},Fg.__file="http_src/vue/page-asset-map.vue";var tv=Ka({components:{},props:{id:String,main_title:Object,secondary_title_list:Array,help_link:String,items_table:Array},emits:["click_item"],created(){},data:()=>({}),mounted(){ntopng_sync.ready(this.$props.id)},methods:{}});const nv={class:"navbar navbar-shadow navbar-expand-lg navbar-light bg-light px-2 mb-2"},av={class:"me-1 text-nowrap",style:{"font-size":"1.1rem"}},lv=["href","title"],sv=["title"],iv=Hs(" / "),ov=["href","title"],rv=["title"],cv=zs("span",{class:"text-muted ms-1 d-none d-lg-inline d-md-none"},"|",-1),uv=zs("button",{class:"navbar-toggler",type:"button"},[zs("span",{class:"navbar-toggler-icon"})],-1),dv={class:"collapse navbar-collapse scroll-x",id:"navbarNav"},pv={class:"navbar-nav"},_v=["onClick"],fv={key:0,class:"badge rounded-pill bg-dark",style:{float:"right","margin-bottom":"-10px"}},hv=["onClick"],mv={key:0,class:"badge rounded-pill bg-dark",style:{float:"right","margin-bottom":"-10px"}},gv={class:"navbar-nav ms-auto"},vv=zs("a",{href:"javascript:history.back()",class:"nav-item nav-link text-muted"},[zs("i",{class:"fas fa-arrow-left"})],-1),bv=["href"],yv=[zs("i",{class:"fas fa-question-circle"},null,-1)];tv.render=function(e,t,n,a,l,s){return As(),Ms("nav",nv,[zs("span",av,[zs("i",{class:H(e.main_title.icon)},null,2),e.main_title.href?(As(),Ms("a",{key:0,href:e.main_title.href,title:e.main_title.title},Z(e.main_title.label),9,lv)):(As(),Ms("span",{key:1,title:e.main_title.title},Z(e.main_title.label),9,sv)),(As(!0),Ms(xs,null,Cl(e.secondary_title_list,(e=>(As(),Ms(xs,null,[iv,e.href?(As(),Ms("a",{key:0,href:e.href,title:e.title},Z(e.label),9,ov)):(As(),Ms("span",{key:1,title:e.title},Z(e.label),9,rv))],64)))),256))]),cv,uv,zs("div",dv,[zs("ul",pv,[(As(!0),Ms(xs,null,Cl(e.items_table,(e=>(As(),Ms(xs,null,[e.active?(As(),Ms("li",{key:0,onClick:t=>this.$emit("click_item",e),class:H([{active:e.active},"nav-item nav-link"])},[e.badge_num>0?(As(),Ms("span",fv,Z(e.badge_num),1)):Ks("v-if",!0),zs("b",null,[zs("i",{class:H(e.icon)},null,2),Hs(" "+Z(e.label),1)])],10,_v)):(As(),Ms("a",{key:1,onClick:t=>this.$emit("click_item",e),href:"#",class:"nav-item nav-link"},[e.badge_num>0?(As(),Ms("span",mv,Z(e.badge_num),1)):Ks("v-if",!0),zs("i",{class:H(e.icon)},null,2),Hs(" "+Z(e.label),1)],8,hv))],64)))),256))]),zs("ul",gv,[vv,zs("a",{target:"_newtab",href:e.help_link,class:"nav-item nav-link text-muted"},yv,8,bv)])])])},tv.__file="http_src/vue/page-navbar.vue";const wv={class:"form-group mb-3 row"},xv={class:"col-form-label col-sm-4"},kv={class:"col-sm-7"},$v=zs("div",{class:"invalid-feedback"},null,-1),Sv={class:"form-group mb-3 row"},Cv={class:"col-form-label col-sm-4 pt-2"},Nv={class:"form-switch col-sm-7 pt-2 ps-3"},Av={class:"col-form-label"};var Ev={__name:"modal-add-device-exclusion",props:{body:String,title:String,footer:String,list_notes:String},emits:["add"],setup(e,{expose:t,emit:n}){const a=_n(""),l=_n(""),s=_n(null),i=()=>{n("add",{mac_list:a.value,trigger_alerts:l.value}),o()},o=()=>{s.value.close()};t({show:()=>{a.value="",s.value.show()},close:o}),cl((()=>{}));const r=e=>i18n(e);return(t,n)=>(As(),Os(_p,{onShowed:n[2]||(n[2]=e=>{}),ref_key:"modal_id",ref:s},{title:fa((()=>[Hs(Z(e.title),1)])),body:fa((()=>[zs("div",wv,[zs("label",xv,Z(e.body),1),zs("div",kv,[vl(zs("textarea",{name:"items-list",id:"itemslist-textarea",class:"w-100 form-control",rows:"6","onUpdate:modelValue":n[0]||(n[0]=e=>a.value=e)},null,512),[[Io,a.value]]),zs("small",null,Z(e.list_notes),1),$v])]),zs("div",Sv,[zs("label",Cv,Z(r("edit_check.trigger_device_disconnected_alert")),1),zs("div",Nv,[vl(zs("input",{type:"checkbox",class:"form-check-input ms-0","onUpdate:modelValue":n[1]||(n[1]=e=>l.value=e)},null,512),[[Mo,l.value]])]),zs("small",Av,Z(r("edit_check.trigger_device_disconnected_alert_descr")),1)])])),footer:fa((()=>[Hs(Z(r("host_details.notes"))+": "+Z(e.footer)+" ",1),zs("button",{type:"button",onClick:i,class:"btn btn-primary"},Z(r("add")),1)])),_:1},512))},__file:"http_src/vue/modal-add-device-exclusion.vue"};const Tv={class:"form-group mb-3 row"},Pv={class:"col-form-label col-sm-4"},Iv={class:"col-sm-7"},Mv={class:"form-group mb-3 row"},Ov={class:"col-form-label col-sm-4"},Uv={class:"col-sm-7"},Fv={value:"allowed"},jv={value:"denied"},Lv={class:"form-group mb-3 row"},Rv={class:"col-form-label col-sm-4 pt-2"},Dv={class:"form-switch col-sm-7 pt-2 ps-3"},zv={class:"col-form-label"};var Bv={__name:"modal-edit-device-exclusion",props:{title:String},emits:["edit"],setup(e,{expose:t,emit:n}){const a=_n(""),l=_n(""),s=_n(""),i=_n(null),o=()=>{n("edit",{mac_alias:a.value,mac_status:l.value,trigger_alerts:s.value}),r()},r=()=>{i.value.close()};t({show:e=>{l.value=e.status,a.value=e.mac_address_label.label,s.value=e.trigger_alert||!1,i.value.show()},close:r}),cl((()=>{}));const c=e=>i18n(e);return(t,n)=>(As(),Os(_p,{onShowed:n[3]||(n[3]=e=>{}),ref_key:"modal_id",ref:i},{title:fa((()=>[Hs(Z(e.title),1)])),body:fa((()=>[zs("div",Tv,[zs("label",Pv,Z(c("edit_check.device_alias")),1),zs("div",Iv,[vl(zs("input",{type:"text",name:"custom_name",class:"form-control",placeholder:"{{_i18n('custom_name')}}","onUpdate:modelValue":n[0]||(n[0]=e=>a.value=e)},null,512),[[Io,a.value]])])]),zs("div",Mv,[zs("label",Ov,Z(c("edit_check.device_status")),1),zs("div",Uv,[vl(zs("select",{name:"device_status",class:"form-select","onUpdate:modelValue":n[1]||(n[1]=e=>l.value=e)},[zs("option",Fv,Z(c("allowed")),1),zs("option",jv,Z(c("denied")),1)],512),[[Fo,l.value]])])]),zs("div",Lv,[zs("label",Rv,Z(c("edit_check.trigger_device_disconnected_alert")),1),zs("div",Dv,[vl(zs("input",{type:"checkbox",class:"form-check-input ms-0","onUpdate:modelValue":n[2]||(n[2]=e=>s.value=e)},null,512),[[Mo,s.value]])]),zs("small",zv,Z(c("edit_check.trigger_device_disconnected_alert_descr")),1)])])),footer:fa((()=>[zs("button",{type:"button",onClick:o,class:"btn btn-primary"},Z(c("edit")),1)])),_:1},512))},__file:"http_src/vue/modal-edit-device-exclusion.vue"},Vv={components:{"page-navbar":tv,datatable:$h,"modal-delete-confirm":Zh,"modal-add-device-exclusion":Ev,"modal-edit-device-exclusion":Bv},props:{page_csrf:String,is_clickhouse_enabled:Boolean},created(){!function(e){const t=[];t.push({text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(t,n,a,l){e.show_add_device_dialog()}}),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,n,a,l){e.reload_table()}});let n={table_buttons:t,columns_config:[],data_url:`${http_prefix}/lua/pro/rest/v2/get/device/exclusion.lua`,enable_search:!0},a=ntopng_utility.clone(n);a.table_buttons=n.table_buttons,a.data_url=`${a.data_url}`,a.columns_config=[{sortable:!1,searchable:!1,visible:!1,data:"mac_address",type:"mac-address",responsivePriority:1},{columnName:i18n("edit_check.excluded_device"),data:"mac_address_label",type:"mac-address",className:"text-nowrap",sortable:!0,searchable:!0,createdCell:DataTableRenders.applyCellStyle,responsivePriority:1,render:function(e,t,n){let a=e.label;return e.label!==e.mac&&(a=a+" ["+e.mac+"]"),e.url&&(a=`<a href='${e.url}' title='${e.mac}'>${a}</a>`),a}},{columnName:i18n("first_seen"),data:"first_seen",type:"time",sortable:!0,searchable:!0,className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,n){return e.data}},{columnName:i18n("last_seen"),data:"last_seen",type:"time",sortable:!0,searchable:!0,className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,n){return e.data}},{columnName:i18n("edit_check.device_status"),data:"status",type:"status",sortable:!0,searchable:!0,className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,n){return i18n(e)}},{columnName:i18n("edit_check.trigger_alert"),data:"trigger_alert",type:"boolean",sortable:!0,searchable:!0,className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,n){return e?'<i class="fas fa-check text-success"></i>':'<i class="fas fa-times text-danger"></i>'}},{targets:-1,columnName:i18n("action"),data:null,name:"actions",className:"text-center text-nowrap",sortable:!1,responsivePriority:1,render:function(t,n,a){let l={handlerId:"delete_device",onClick:()=>{let n=`${i18n("edit_check.delete_device_exclusion")} ${t.mac_address_label.label}`;e.show_delete_dialog(i18n("edit_check.device_exclusion"),n,t)}},s={handlerId:"edit_device",onClick:()=>{e.show_edit_device_dialog(t)}},i={onClick:()=>{const e=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${t.first_seen.timestamp}&epoch_end=${t.last_seen.timestamp}&mac=${t.mac_address};eq`;window.open(e,"_blank")}};return DataTableUtils.createActionButtons([{class:"pointer",handler:i,icon:"fa-stream",title:i18n("db_explorer.historical_data"),hidden:!isClickhouseEnabled},{class:"btn-secondary",handler:s,icon:"fa-edit",title:i18n("edit"),class:"pointer"},{class:"btn-danger",handler:l,icon:"fa-trash",title:i18n("delete"),class:"pointer"}])}}],e.config_devices=a}(this)},mounted(){this.learning_status(),$("#btn-delete-all-devices").click((()=>this.show_delete_all_dialog()))},data:()=>({i18n:e=>i18n(e),config_devices:null,navbar_context:{main_title:{label:i18n("edit_check.device_exclusion_list"),icon:"fas fa-bell-slash"},base_url:"#",items_table:[{active:!0,label:i18n("devices"),id:"devices"}]},title_delete:"",body_delete:"",title_delete_all:i18n("edit_check.delete_all_device_exclusions"),body_delete_all:i18n("edit_check.delete_all_device_exclusions_message"),title_add:i18n("edit_check.add_device_exclusion"),body_add:i18n("edit_check.add_device_exclusion_message"),footer_add:i18n("edit_check.add_device_exclusion_notes"),list_notes_add:i18n("edit_check.add_device_exclusion_list_notes"),title_edit:i18n("edit_check.edit_device_exclusion"),learning_message:i18n("edit_check.learning"),row_to_delete:null,row_to_edit:null}),methods:{add_device:async function(e){e.mac_list=e.mac_list.replace(/(?:\t| )/g,""),e.mac_list=e.mac_list.replace(/(?:\r\n|\r|\n)/g,","),e.csrf=this.$props.page_csrf;let t=`${http_prefix}/lua/pro/rest/v2/add/device/exclusion.lua`;try{let n={"Content-Type":"application/json"};await ntopng_utility.http_request(t,{method:"post",headers:n,body:JSON.stringify(e)}),this.reload_table()}catch(e){console.error(e)}},delete_all:async function(){let e=`${http_prefix}/lua/pro/rest/v2/delete/device/exclusion.lua`,t={device:"all",csrf:this.$props.page_csrf};try{let n={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:n,body:JSON.stringify(t)}),this.reload_table()}catch(e){console.error(e)}},delete_row:async function(){let e={device:this.row_to_delete.mac_address,csrf:this.$props.page_csrf},t=`${http_prefix}/lua/pro/rest/v2/delete/device/exclusion.lua`;try{let n={"Content-Type":"application/json"};await ntopng_utility.http_request(t,{method:"post",headers:n,body:JSON.stringify(e)}),setTimeout((()=>this.reload_table()),300)}catch(e){console.error(e)}},edit_row:async function(e){let t=this.row_to_edit;e.mac_alias=e.mac_alias.replace(/(?:\t| )/g,""),e.csrf=this.$props.page_csrf,e.mac=t.mac_address;let n=`${http_prefix}/lua/pro/rest/v2/edit/device/exclusion.lua`;try{let t={"Content-Type":"application/json"};await ntopng_utility.http_request(n,{method:"post",headers:t,body:JSON.stringify(e)}),setTimeout((()=>this.reload_table()),300)}catch(e){console.error(e)}},learning_status:async function(){let e=`${http_prefix}/lua/pro/rest/v2/get/device/learning_status.lua`;try{let t={"Content-Type":"application/json"};(await ntopng_utility.http_request(e,{method:"get",headers:t})).learning_done?$("#devices-learning-status").attr("hidden","hidden"):$("#devices-learning-status").removeAttr("hidden")}catch(e){console.error(e)}},reload_table:function(){this.get_active_table().reload(),this.learning_status()},get_active_table:function(){return this.$refs.table_devices_exclusion},show_add_device_dialog:function(){this.$refs.modal_add_device.show()},show_edit_device_dialog:function(e){this.row_to_edit=e,this.$refs.modal_edit_device.show(e)},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_delete_dialog:function(e,t,n){this.row_to_delete=n,this.title_delete=e,this.body_delete=t,this.$refs.modal_delete_confirm.show()}}};const qv={id:"navbar"},Hv={class:"row"},Gv={class:"col-md-12 col-lg-12"},Kv=zs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),Wv={class:"card"},Jv={class:"card-body"},Yv={id:"devices-learning-status",class:"alert alert-info",hidden:""},Xv={id:"table_devices_vue"},Zv={class:"card-footer"},Qv={type:"button",id:"btn-delete-all-devices",class:"btn btn-danger"},eb=zs("i",{class:"fas fa-trash"},null,-1);Vv.render=function(e,t,n,a,l,s){const i=yl("page-navbar"),o=yl("modal-delete-confirm"),r=yl("modal-add-device-exclusion"),c=yl("modal-edit-device-exclusion"),u=yl("datatable");return As(),Ms(xs,null,[zs("div",qv,[Bs(i,{id:"page_navbar",main_title:l.navbar_context.main_title,base_url:l.navbar_context.base_url,help_link:l.navbar_context.help_link,items_table:l.navbar_context.items_table,onClick_item:e.click_item},null,8,["main_title","base_url","help_link","items_table","onClick_item"])]),zs("div",Hv,[zs("div",Gv,[Kv,zs("div",Wv,[zs("div",Jv,[zs("div",Yv,Z(l.learning_message),1),zs("div",Xv,[Bs(o,{ref:"modal_delete_confirm",title:l.title_delete,body:l.body_delete,onDelete:s.delete_row},null,8,["title","body","onDelete"]),Bs(o,{ref:"modal_delete_all",title:l.title_delete_all,body:l.body_delete_all,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Bs(r,{ref:"modal_add_device",title:l.title_add,body:l.body_add,footer:l.footer_add,list_notes:l.list_notes_add,onAdd:s.add_device},null,8,["title","body","footer","list_notes","onAdd"]),Bs(c,{ref:"modal_edit_device",title:l.title_edit,onEdit:s.edit_row},null,8,["title","onEdit"]),Bs(u,{ref:"table_devices_exclusion",table_buttons:l.config_devices.table_buttons,columns_config:l.config_devices.columns_config,data_url:l.config_devices.data_url,enable_search:l.config_devices.enable_search},null,8,["table_buttons","columns_config","data_url","enable_search"])])]),zs("div",Zv,[zs("button",Qv,[eb,Hs(" "+Z(l.i18n("edit_check.delete_all_device_exclusions")),1)])])])])])],64)},Vv.__file="http_src/vue/page-device-exclusions.vue";var tb={components:{datatable:$h},props:{page_csrf:String,url_params:Object},created(){!function(e){const t=[];let n=[],a=3;t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,n,a,l){e.reload_table()}});let l={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/fingerprint/data.lua`,url_params),enable_search:!0};n=[{columnName:i18n("ja3_client_fingerprint"),name:"ja3",data:"ja3",className:"text-nowrap",render:(e,t)=>`<a class="ntopng-external-link" href="https://sslbl.abuse.ch/ja3-fingerprints/${e}">${e} <i class="fas fa-external-link-alt"></i></a>`,responsivePriority:0,createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("status"),name:"is_malicious",data:"is_malicious",className:"text-nowrap text-center",responsivePriority:0,render:(e,t)=>e?`<i class="fa-solid fa-face-frown text-danger" title="${i18n("malicious")}"></i>`:`<i class="fa-solid fa-face-smile text-success" title="${i18n("ok")}"></i>`},{columnName:i18n("app_name"),name:"app_name",data:"app_name",className:"text-nowrap text-right",responsivePriority:1},{columnName:i18n("num_uses"),name:"num_uses",data:"num_uses",className:"text-nowrap text-right",responsivePriority:1,render:e=>NtopUtils.formatValue(e)}];let s={serverSide:!1,order:[[a,"desc"]]},i=ntopng_utility.clone(l);i.table_buttons=l.table_buttons,i.data_url=`${i.data_url}`,i.columns_config=n,i.table_config=ntopng_utility.clone(s),e.config_devices_standard=i}(this)},mounted(){},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null}),methods:{reload_table:function(){this.get_active_table().reload()},get_active_table:function(){return this.$refs.table_fingerprint}}};const nb={class:"row"},ab={class:"col-md-12 col-lg-12"},lb=zs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),sb={class:"card"},ib={class:"card-body"},ob={id:"table_host_tls"},rb={class:"card-footer"};tb.render=function(e,t,n,a,l,s){const i=yl("datatable");return As(),Ms("div",nb,[zs("div",ab,[lb,zs("div",sb,[zs("div",ib,[zs("div",ob,[Bs(i,{ref:"table_fingerprint",table_buttons:l.config_devices_standard.table_buttons,columns_config:l.config_devices_standard.columns_config,data_url:l.config_devices_standard.data_url,enable_search:l.config_devices_standard.enable_search,table_config:l.config_devices_standard.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])]),zs("div",rb,[zs("b",null,Z(l.i18n("fingerprint_note")),1)])])])])},tb.__file="http_src/vue/page-host-tls.vue";var cb={components:{datatable:$h},props:{page_csrf:String,url_params:Object},created(){!function(e){const t=[];let n=[],a=3;t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,n,a,l){e.reload_table()}});let l={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/fingerprint/data.lua`,url_params),enable_search:!0};n=[{columnName:i18n("hassh_fingerprint"),name:"ja3",data:"ja3",className:"text-nowrap",render:(e,t)=>`<a class="ntopng-external-link" href="https://sslbl.abuse.ch/ja3-fingerprints/${e}">${e} <i class="fas fa-external-link-alt"></i></a>`,responsivePriority:0,createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("status"),name:"is_malicious",data:"is_malicious",className:"text-nowrap text-center",responsivePriority:0,render:(e,t)=>e?`<i class="fa-solid fa-face-frown text-danger" title="${i18n("malicious")}"></i>`:`<i class="fa-solid fa-face-smile text-success" title="${i18n("ok")}"></i>`},{columnName:i18n("app_name"),name:"app_name",data:"app_name",className:"text-nowrap text-right",responsivePriority:1},{columnName:i18n("num_uses"),name:"num_uses",data:"num_uses",className:"text-nowrap text-right",responsivePriority:1,render:e=>NtopUtils.formatValue(e)}];let s={serverSide:!1,order:[[a,"desc"]]},i=ntopng_utility.clone(l);i.table_buttons=l.table_buttons,i.data_url=`${i.data_url}`,i.columns_config=n,i.table_config=ntopng_utility.clone(s),e.config_devices_standard=i}(this)},mounted(){},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null}),methods:{reload_table:function(){this.get_active_table().reload()},get_active_table:function(){return this.$refs.table_hassh}}};const ub={class:"row"},db={class:"col-md-12 col-lg-12"},pb=zs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),_b={class:"card"},fb={class:"card-body"},hb={id:"table_host_ssh"};cb.render=function(e,t,n,a,l,s){const i=yl("datatable");return As(),Ms("div",ub,[zs("div",db,[pb,zs("div",_b,[zs("div",fb,[zs("div",hb,[Bs(i,{ref:"table_hassh",table_buttons:l.config_devices_standard.table_buttons,columns_config:l.config_devices_standard.columns_config,data_url:l.config_devices_standard.data_url,enable_search:l.config_devices_standard.enable_search,table_config:l.config_devices_standard.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])])])])])},cb.__file="http_src/vue/page-host-ssh.vue";const mb="change_map_event";var gb={components:{"page-periodicity-map":mg,"page-periodicity-table":hm,"page-asset-map":Fg,"page-asset-table":em,"page-service-map":Ym,"page-service-table":Im,"page-navbar":tv},props:{page_csrf:String,base_url_params:Object,ifid:Number,is_admin:Boolean,map_id:String,view:String,navbar_info:Object,service_acceptance:Array,service_map_filter_list:Object,service_table_filter_list:Array,periodicity_map_filter_list:Object,periodicity_table_filter_list:Array,asset_map_filter_list:Object,asset_table_filter_list:Array},created(){this.url_params=this.$props.base_url_params,this.active_tab=this.$props.map_id,this.page=this.url_params.page,this.updated_view=this.$props.view,asset_map_filter_list&&asset_table_filter_list&&(this.navbar_context.items_table.push({active:!1,label:i18n("asset_map"),id:"asset_map",page:"graph"}),this.navbar_context.items_table.push({active:!1,label:i18n("asset_table"),id:"asset_map",page:"table"})),this.navbar_context.items_table.forEach((e=>{e.id==this.active_tab&&e.page==this.page?e.active=!0:e.active=!1}))},mounted(){const e=this.format_navbar_title;e(this.$props.navbar_info),ntopng_events_manager.on_custom_event("page_navbar",ntopng_custom_events.CHANGE_PAGE_TITLE,(t=>{e({selected_iface:this.$props.navbar_info.selected_iface,selected_host:t})})),ntopng_events_manager.on_custom_event("change_service_table_tab",mb,(t=>{w.set_key_to_url("map",t.id),w.set_key_to_url("page",t.page),"table"==t.page&&this.destroy(),this.active_tab=t.id,this.page=t.page,this.url_params.map=t.id,this.url_params.page=t.page,this.updated_view=w.get_url_entry("view"),e()}))},data:()=>({i18n:e=>i18n(e),active_tab:null,page:null,url_params:{},updated_view:null,navbar_node:{},navbar_context:{main_title:{label:" "+i18n("maps"),icon:"fas fa-map"},secondary_title_list:[],items_table:[{active:!0,label:i18n("service_map"),id:"service_map",page:"graph"},{active:!1,label:i18n("service_table"),id:"service_map",page:"table"},{active:!1,label:i18n("periodicity_map"),id:"periodicity_map",page:"graph"},{active:!1,label:i18n("periodicity_table"),id:"periodicity_map",page:"table"}]}}),methods:{destroy:function(){this.get_active_tab().destroy()},format_navbar_title:function(e){e?this.navbar_node=e:e=this.navbar_node,this.navbar_context.secondary_title_list=[{label:e.selected_iface.label,title:NtopUtils.shortenLabel(`${e.selected_iface.label}`,16)}],e.selected_host&&""!=e.selected_host.id&&(this.navbar_context.secondary_title_list[0].href=`${http_prefix}/lua/pro/enterprise/network_maps.lua?map=${this.active_tab}&page=${this.page}&ifid=${this.$props.ifid}`,this.navbar_context.secondary_title_list.push({label:NtopUtils.shortenLabel(`${e.selected_host.label}`,16,"."),title:`${e.selected_host.label}`,href:e.selected_host.is_active?`${http_prefix}/lua/host_details.lua?host=${e.selected_host.id}`:null,target_blank:"true"}))},get_active_tab:function(){return this.$refs[this.active_tab+"_"+this.page]},click_item:function(e){this.navbar_context.items_table.forEach((e=>e.active=!1)),e.active=!0,ntopng_events_manager.emit_custom_event(mb,e)}}};gb.render=function(e,t,n,a,l,s){const i=yl("page-navbar"),o=yl("page-service-map"),r=yl("page-service-table"),c=yl("page-periodicity-map"),u=yl("page-periodicity-table"),d=yl("page-asset-map"),p=yl("page-asset-table");return As(),Ms(xs,null,[Bs(i,{id:"page_navbar",main_title:l.navbar_context.main_title,secondary_title_list:l.navbar_context.secondary_title_list,help_link:l.navbar_context.help_link,items_table:l.navbar_context.items_table,onClick_item:s.click_item},null,8,["main_title","secondary_title_list","help_link","items_table","onClick_item"]),"service_map"==l.active_tab&&"graph"==l.page?(As(),Os(o,{key:0,ref:"service_map_graph",page_csrf:n.page_csrf,url_params:l.url_params,ifid:n.ifid,is_admin:n.is_admin,map_id:n.map_id,all_filter_list:n.service_map_filter_list},null,8,["page_csrf","url_params","ifid","is_admin","map_id","all_filter_list"])):Ks("v-if",!0),"service_map"==l.active_tab&&"table"==l.page?(As(),Os(r,{key:1,ref:"service_map_table",page_csrf:n.page_csrf,url_params:l.url_params,view:l.updated_view,table_filters:n.service_table_filter_list,is_admin:n.is_admin,service_acceptance:n.service_acceptance},null,8,["page_csrf","url_params","view","table_filters","is_admin","service_acceptance"])):Ks("v-if",!0),"periodicity_map"==l.active_tab&&"graph"==l.page?(As(),Os(c,{key:2,ref:"periodicity_map_graph",page_csrf:n.page_csrf,url_params:l.url_params,ifid:n.ifid,is_admin:n.is_admin,map_id:n.map_id,all_filter_list:n.periodicity_map_filter_list},null,8,["page_csrf","url_params","ifid","is_admin","map_id","all_filter_list"])):Ks("v-if",!0),"periodicity_map"==l.active_tab&&"table"==l.page?(As(),Os(u,{key:3,ref:"periodicity_map_table",page_csrf:n.page_csrf,url_params:l.url_params,view:l.updated_view,table_filters:n.periodicity_table_filter_list,is_admin:n.is_admin},null,8,["page_csrf","url_params","view","table_filters","is_admin"])):Ks("v-if",!0),n.asset_map_filter_list&&n.asset_table_filter_list?(As(),Ms(xs,{key:4},["asset_map"==l.active_tab&&"graph"==l.page?(As(),Os(d,{key:0,ref:"asset_map_graph",page_csrf:n.page_csrf,url_params:l.url_params,ifid:n.ifid,is_admin:n.is_admin,map_id:n.map_id,all_filter_list:n.asset_map_filter_list},null,8,["page_csrf","url_params","ifid","is_admin","map_id","all_filter_list"])):Ks("v-if",!0),"asset_map"==l.active_tab&&"table"==l.page?(As(),Os(p,{key:1,ref:"asset_map_table",page_csrf:n.page_csrf,url_params:l.url_params,view:l.updated_view,table_filters:n.asset_table_filter_list},null,8,["page_csrf","url_params","view","table_filters"])):Ks("v-if",!0)],64)):Ks("v-if",!0)],64)},gb.__file="http_src/vue/page-home-map.vue";const vb=["width","height"],bb=[zs("defs",null,null,-1),zs("g",{class:"nodes",style:{stroke:"#000",strokeOpacity:"0.5"}},null,-1),zs("g",{class:"links",style:{stroke:"#000",strokeOpacity:"0.3",fill:"none"}},null,-1),zs("g",{class:"texts"},null,-1)];var yb={__name:"page-sankey",props:{width:Number,height:Number},setup(e){const t=e,n=d3v7,a=_n(null),l=_n({});return rl((async()=>{})),cl((async()=>{!async function(){const e=n.scaleOrdinal(n.schemeCategory10);let s=await async function(){let e={nodes:[{index:0,name:"Liikevaihto",hours:"100%"},{index:1,name:"Kiinteät kulut",hours:"85%"},{index:2,name:"Muuttuvat kulut",hours:"3:00"},{index:3,name:"Palkkakulut",hours:"1:20"},{index:4,name:"Muut kiinte",hours:"1:40"},{index:5,name:"Kate",hours:"1:40"}],links:[{source:0,target:1,value:75,hours:"+1:00"},{source:0,target:2,value:10,hours:"+2:00"},{source:1,target:3,value:69,hours:"+1:20"},{source:1,target:4,value:6,hours:"+1:40"},{source:0,target:5,value:15,hours:"+1:40"}]};e=function(e){let t=[],n=[],a={};const l=(e,n,l)=>{if(null!=a[e])return;let s=t.length;a[e]=s;let i={index:s,name:e,href:n,color:l};t.push(i)},s=(e,t,l,s)=>{let i={source:a[e],target:a[t],value:l,label:s};n.push(i)};return e.forEach((e=>{l(e.source,e.source_link,e.source_color),l(e.target,e.target_link,e.target_color),s(e.source,e.target,e.value,e.link)})),{nodes:t,links:n}}([{link_color:"#e377c2",source_color:"#e377c2",source_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=IGMP",target:"224.0.0.251",source:"IGMP",link:"IGMP",target_link:"/lua/host_details.lua?host=224.0.0.251&vlan=0",target_node:"224.0.0.251",source_node:"192.168.1.7",value:60},{link_color:"#e377c2",source_link:"/lua/host_details.lua?host=192.168.1.7&vlan=0",target:"IGMP",source:"192.168.1.7",link:"IGMP",target_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=IGMP",target_node:"224.0.0.2",target_color:"#e377c2",source_node:"192.168.1.7",value:120},{link_color:"#e377c2",source_color:"#e377c2",source_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=IGMP",target:"224.0.0.2",source:"IGMP",link:"IGMP",target_link:"/lua/host_details.lua?host=224.0.0.2&vlan=0",target_node:"224.0.0.2",source_node:"192.168.1.7",value:60},{link_color:"#bcbd22",source_link:"/lua/host_details.lua?host=192.168.1.7&vlan=0",target:"MDNS",source:"192.168.1.7",link:"MDNS",target_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=MDNS",target_node:"224.0.0.251",target_color:"#bcbd22",source_node:"192.168.1.7",value:396},{link_color:"#bcbd22",source_color:"#bcbd22",source_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=MDNS",target:"224.0.0.251",source:"MDNS",link:"MDNS",target_link:"/lua/host_details.lua?host=224.0.0.251&vlan=0",target_node:"224.0.0.251",source_node:"192.168.1.7",value:396}]);return e}();const i=function(){let e=t.width;null==e&&(e=window.innerWidth-200);let n=t.height;null==n&&(n=window.innerHeight-50);return{width:e,height:n}}();l.value=i;const{links:o,nodes:r}=function(e,t,a){return n.sankey().nodeAlign(n.sankeyCenter).nodeWidth(10).nodePadding(10).extent([[0,5],[t,a]])(e)}(s,i.width-10,i.height-5);n.select(a.value).select("g.nodes").selectAll("rect").data(r).join((t=>{const a=t.append("rect");a.attr("x",(e=>e.x0)).attr("y",(e=>e.y0)),a.transition(n.easeLinear).delay(1e3).duration(500).attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("dataIndex",(e=>e.index)).attr("fill",(t=>e(t.index/r.length))),a.append("title").text((e=>`${e.name}\n${e.hours}`))}),(t=>t.transition(n.easeLinear).delay(500).duration(500).attr("x",(e=>e.x0)).attr("y",(e=>e.y0)).attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("dataIndex",(e=>e.index)).attr("fill",(t=>e(t.index/r.length))).select("title").text((e=>`${e.name}\n${e.hours}`))),(e=>e.transition(n.easeLinear).duration(500).style("opacity",0).remove())).on("dblclick",(function(e){})),n.select(a.value).select("g.texts").selectAll("text").data(r).join((t=>{t.append("text").transition(n.easeLinear).delay(1e3).duration(500).attr("x",(e=>e.x0<i.width/2?e.x1+6:e.x0-6)).attr("y",(e=>(e.y1+e.y0)/2)).attr("fill",(t=>n.rgb(e(t.index/r.length)).darker())).attr("alignment-baseline","middle").attr("text-anchor",(e=>e.x0<i.width/2?"start":"end")).attr("font-size",9).text((e=>e.name))}),(t=>t.transition(n.easeLinear).delay(500).duration(500).attr("x",(e=>e.x0<i.width/2?e.x1+6:e.x0-6)).attr("y",(e=>(e.y1+e.y0)/2)).attr("fill",(t=>n.rgb(e(t.index/r.length)).darker())).attr("text-anchor",(e=>e.x0<i.width/2?"start":"end")).attr("font-size",9).text((e=>e.name))),(e=>e.transition(n.easeLinear).duration(500).style("opacity",0).remove())),n.select(a.value).select("defs").selectAll("linearGradient").data(o).join((t=>{const n=t.append("linearGradient");n.attr("id",(e=>`gradient-${e.index}`)).attr("gradientUnits","userSpaceOnUse").attr("x1",(e=>e.source.x1)).attr("x2",(e=>e.target.x0)),n.append("stop").attr("offset","0").attr("stop-color",(t=>e(t.source.index/r.length))),n.append("stop").attr("offset","100%").attr("stop-color",(t=>e(t.target.index/r.length)))}),(t=>{t.attr("id",(e=>`gradient-${e.index}`)).attr("gradientUnits","userSpaceOnUse").attr("x1",(e=>e.source.x1)).attr("x2",(e=>e.target.x0)),t.selectAll("stop").remove(),t.append("stop").attr("offset","0").attr("stop-color",(t=>e(t.source.index/r.length))),t.append("stop").attr("offset","100%").attr("stop-color",(t=>e(t.target.index/r.length)))}),(e=>e.remove())),n.select(a.value).select("g.links").selectAll("path").data(o).join((e=>{const t=e.append("path");t.transition(n.easeLinear).delay(1e3).duration(500).attr("d",n.sankeyLinkHorizontal()).attr("stroke",(e=>`url(#gradient-${e.index}`)).attr("stroke-width",(e=>e.width)),t.append("title").text((e=>`${e.hours}`))}),(e=>e.transition(n.easeLinear).delay(500).duration(500).attr("d",n.sankeyLinkHorizontal()).attr("stroke",(e=>`url(#gradient-${e.index}`)).attr("stroke-width",(e=>e.width)).select("title").text((e=>`${e.hours}`))),(e=>e.transition(n.easeLinear).duration(500).style("opacity",0).remove()))}()})),(e,t)=>(As(),Ms("div",null,[(As(),Ms("svg",{ref_key:"sankey_chart_ref",ref:a,width:l.value.width,height:l.value.height,style:{margin:"10px"}},bb,8,vb))]))}};pp("\n.node rect {\n  fill-opacity: 0.9;\n  shape-rendering: crispEdges;\n}\n.node text {\n  pointer-events: none;\n  text-shadow: 0 1px 0 #fff;\n}\n.link {\n  fill: none;\n  stroke: #000;\n  stroke-opacity: 0.2;\n}\n.link:hover {\n  stroke-opacity: 0.5;\n}\n"),yb.__file="http_src/vue/page-sankey.vue";const wb="change_applications_tab_event";var xb={components:{chart:Id,datatable:$h,"modal-delete-confirm":Zh,"tab-list":Kh},props:{page_csrf:String,url_params:Object,view:String,is_ch_enabled:Boolean},created(){this.applications_tab=w.get_url_entry("view")||this.$props.view,this.tab_list.forEach((e=>{this.applications_tab==e.id?e.active=!0:e.active=!1})),function(e){const t=[];t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,n,a,l){e.reload_table()}});let n=url_params;n.view="applications";let a={table_buttons:t,data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/l7/data.lua`,n),enable_search:!0,table_config:{serverSide:!1,order:[[6,"desc"]],columnDefs:[{type:"time-uni",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3},{type:"file-size",targets:5}]}},l=[{columnName:i18n("host_details.application"),targets:0,width:"20",name:"application",data:"application",className:"text-nowrap",responsivePriority:1,render:t=>`<a href="${http_prefix}/lua/host_details.lua?host=${e.$props.url_params.host}@${e.$props.url_params.vlan}&ts_schema=host:ndpi&page=historical&protocol=${t.label}" target="_blank">${t.label}</a>`},{columnName:i18n("host_details.duration"),targets:1,width:"10",name:"duration",data:"duration",className:"text-nowrap",responsivePriority:1,render:e=>NtopUtils.secondsToTime(e)},{columnName:i18n("host_details.sent"),targets:2,width:"10",name:"sent",data:"bytes_sent",className:"text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.rcvd"),targets:3,width:"10",name:"rcvd",data:"bytes_rcvd",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.breakdown"),targets:4,width:"10",name:"breakdown",data:"breakdown",orderable:!1,className:"text-center text-nowrap",responsivePriority:2,render:(e,t,n)=>{const a=100*n.bytes_sent/n.tot_bytes,l=100*n.bytes_rcvd/n.tot_bytes;return NtopUtils.createBreakdown(a,l,i18n("host_details.sent"),i18n("host_details.rcvd"))}},{columnName:i18n("host_details.tot_bytes"),targets:5,width:"20",name:"tot_bytes",data:"tot_bytes",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.tot_percentage"),targets:6,width:"20",name:"percentage",data:"percentage",className:"text-center text-nowrap",responsivePriority:2,render:e=>{const t=e.toFixed(1);return NtopUtils.createProgressBar(t)}}];is_ch_enabled&&e.add_action_column(l,"l7proto","application");let s=ntopng_utility.clone(a);s.columns_config=l,e.config_devices_applications=s,n.view="categories",a.data_url=NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/l7/data.lua`,n),l=[{columnName:i18n("host_details.category"),targets:0,width:"20",name:"category",data:"category",className:"text-nowrap",responsivePriority:1,render:t=>`<a href="${http_prefix}/lua/host_details.lua?host=${e.$props.url_params.host}@${e.$props.url_params.vlan}&ts_schema=host:ndpi_categories&page=historical&category=${t.label}" target="_blank">${t.label}</a>`},{columnName:i18n("host_details.applications"),targets:0,width:"20",name:"applications",data:"applications",orderable:!1,className:"text-nowrap",responsivePriority:1,render:e=>`${e.label||""} <a href="${http_prefix}/${e.href}${e.category_id}">${e.more_protos||""}</a>`},{columnName:i18n("host_details.duration"),targets:0,width:"15",name:"duration",data:"duration",className:"text-nowrap",responsivePriority:1,render:e=>NtopUtils.secondsToTime(e)},{columnName:i18n("host_details.tot_bytes"),targets:0,width:"20",name:"tot_bytes",data:"tot_bytes",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.tot_percentage"),targets:0,width:"25",name:"percentage",data:"percentage",width:"20%",className:"text-center text-nowrap",responsivePriority:2,render:e=>{const t=e.toFixed(1);return NtopUtils.createProgressBar(t)}}],is_ch_enabled&&e.add_action_column(l,"l7cat","category");let i=ntopng_utility.clone(a);i.columns_config=l,i.table_config.order=[[4,"desc"]],i.table_config.columnDefs=[{type:"time-uni",targets:2},{type:"file-size",targets:3}],e.config_devices_categories=i}(this)},mounted(){S.on_custom_event("change_applications_tab_event",wb,(e=>{let t=this.get_active_table();w.set_key_to_url("view",e.id),t.destroy_table(),this.applications_tab=e.id}))},data(){return{i18n:e=>i18n(e),applications_tab:null,config_devices_applications:null,config_devices_categories:null,chart_options:[{title:i18n("graphs.top_10_ndpi_protocols"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/l7/proto_data.lua`,tab:"applications",id:"top_applications"},{title:i18n("graphs.top_breed"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/l7/breed_data.lua`,tab:"applications",id:"top_breed"},{title:i18n("graphs.top_10_ndpi_categories"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/l7/cat_data.lua`,tab:"categories",id:"top_categories"},{title:i18n("graphs.top_breed"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/l7/breed_data.lua`,tab:"categories",id:"top_breed"}],tab_list:[{title:i18n("host_details.applications_tab"),active:"applications"==this.$props.view,id:"applications"},{title:i18n("host_details.categories_tab"),active:"categories"==this.$props.view,id:"categories"}]}},methods:{add_action_column:function(e,t,n){const a=`${this.$props.url_params.host}`,l=`${this.$props.url_params.vlan}`,s=`${this.$props.url_params.ifid}`;let i="page-stats-action-jump-historical";e.push({columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:i,render:(e,o,r)=>{const c={handlerId:i,onClick:()=>{let e=`${http_prefix}/lua/pro/db_search.lua?ifid=${s}&${t}=${r[n].id};eq&ip=${a};eq`;0!=l&&(e=`${e}&vlan_id=${l};eq`),window.open(e)}};return DataTableUtils.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:c}])}})},destroy:function(){this.get_active_table().destroy_table()},click_item:function(e){this.tab_list.forEach((e=>e.active=!1)),e.active=!0,S.emit_custom_event(wb,e)},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},get_active_table:function(){return this.$refs[`table_host_${this.applications_tab}`]},get_f_get_custom_chart_options:()=>(console.log("get_f_"),async e=>charts_options_items.value[chart_index].chart_options)}};const kb={class:"row"},$b={class:"col-md-12 col-lg-12"},Sb={class:"card"},Cb=zs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[zs("div",{class:"text-center"},[zs("div",{class:"spinner-border text-primary mt-5",role:"status"},[zs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Nb={class:"card-body"},Ab={id:"host_details_applications"},Eb={class:"row mb-4 mt-4",id:"host_details_applications"},Tb={class:"col-6"},Pb={key:0,class:"widget-name"};xb.render=function(e,t,n,a,l,s){const i=yl("tab-list"),o=yl("chart"),r=yl("datatable");return As(),Ms("div",kb,[zs("div",$b,[zs("div",Sb,[Cb,zs("div",Nb,[zs("div",Ab,[Bs(i,{ref:"host_details_applications_tab_list",id:"host_details_applications_tab_list",tab_list:l.tab_list,onClick_item:s.click_item},null,8,["tab_list","onClick_item"]),zs("div",Eb,[(As(!0),Ms(xs,null,Cl(l.chart_options,(e=>(As(),Ms("div",Tb,[e.tab==l.applications_tab?(As(),Ms("h3",Pb,Z(e.title),1)):Ks("v-if",!0),e.tab==l.applications_tab?(As(),Os(o,{key:1,id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!1},null,8,["id","chart_type","base_url_request"])):Ks("v-if",!0)])))),256))]),"applications"==l.applications_tab?(As(),Os(r,{key:0,ref:"table_host_applications",table_buttons:l.config_devices_applications.table_buttons,columns_config:l.config_devices_applications.columns_config,data_url:l.config_devices_applications.data_url,enable_search:l.config_devices_applications.enable_search,table_config:l.config_devices_applications.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])):Ks("v-if",!0),"categories"==l.applications_tab?(As(),Os(r,{key:1,ref:"table_host_categories",table_buttons:l.config_devices_categories.table_buttons,columns_config:l.config_devices_categories.columns_config,data_url:l.config_devices_categories.data_url,enable_search:l.config_devices_categories.enable_search,table_config:l.config_devices_categories.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])):Ks("v-if",!0)])])])])])},xb.__file="http_src/vue/page-host-details-applications.vue";const Ib={class:"row"},Mb={class:"col-md-12 col-lg-12"},Ob={class:"card"},Ub=zs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[zs("div",{class:"text-center"},[zs("div",{class:"spinner-border text-primary mt-5",role:"status"},[zs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Fb={class:"card-body"},jb={id:"host_details_traffic"},Lb={class:"row mb-4 mt-4",id:"host_details_traffic"},Rb={class:"col-4"},Db={class:"widget-name"};var zb={__name:"page-host-details-traffic",props:{page_csrf:String},setup(e){const t=_n(null);_n([]);const n=_n({});rl((async()=>{!function(e){const a=[];let l={};l.host=w.get_url_entry("host"),l.vlan=w.get_url_entry("vlan"),l.ifid=w.get_url_entry("ifid"),a.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,n,a,l){t.value.reload()}});let s={table_buttons:a,data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/l4/data.lua`,l),enable_search:!0,table_config:{serverSide:!1,order:[[6,"desc"]],columnDefs:[{type:"time-uni",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3},{type:"file-size",targets:5}]}},i=[{columnName:i18n("protocol"),targets:0,name:"protocol",data:"protocol",className:"text-nowrap",responsivePriority:1},{columnName:i18n("chart"),targets:1,name:"historical",data:"historical",className:"text-nowrap",responsivePriority:1},{columnName:i18n("traffic_labels.bytes_sent"),targets:2,name:"sent",data:"bytes_sent",className:"text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("traffic_labels.bytes_rcvd"),targets:3,name:"rcvd",data:"bytes_rcvd",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("traffic_labels.breakdown"),targets:4,name:"breakdown",data:"breakdown",orderable:!1,className:"text-center text-nowrap",responsivePriority:2,render:(e,t,n)=>{const a=100*n.bytes_sent/n.total_bytes,l=100*n.bytes_rcvd/n.total_bytes;return NtopUtils.createBreakdown(a,l,i18n("host_details.sent"),i18n("host_details.rcvd"))}},{columnName:i18n("traffic_labels.total_bytes"),targets:5,name:"tot_bytes",data:"total_bytes",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("traffic_labels.total_percentage"),targets:6,width:"20%",name:"percentage",data:"total_percentage",className:"text-center text-nowrap",responsivePriority:2,render:e=>{const t=e.toFixed(1);return NtopUtils.createProgressBar(t)}}],o=ntopng_utility.clone(s);o.columns_config=i,n.value=o}()})),_l((async()=>{t.value.destroy_table()}));const a=[{title:i18n("graphs.l4_proto"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/l4/proto_data.lua`,id:"traffic_protos"},{title:i18n("graphs.contacted_hosts"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/l4/contacted_hosts_data.lua`,id:"contacted_hosts"},{title:i18n("graphs.traffic"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/l4/traffic_data.lua`,id:"traffic"}];return(e,l)=>(As(),Ms("div",Ib,[zs("div",Mb,[zs("div",Ob,[Ub,zs("div",Fb,[zs("div",jb,[zs("div",Lb,[(As(),Ms(xs,null,Cl(a,(e=>zs("div",Rb,[zs("h3",Db,Z(e.title),1),Bs(Id,{id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!1},null,8,["id","chart_type","base_url_request"])]))),64))]),Bs($h,{ref_key:"traffic_table",ref:t,table_buttons:n.value.table_buttons,columns_config:n.value.columns_config,data_url:n.value.data_url,enable_search:n.value.enable_search,table_config:n.value.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])])])])]))},__file:"http_src/vue/page-host-details-traffic.vue"};const Bb={class:"row"},Vb={class:"col-md-12 col-lg-12"},qb={class:"card"},Hb=zs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[zs("div",{class:"text-center"},[zs("div",{class:"spinner-border text-primary mt-5",role:"status"},[zs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Gb={class:"card-body"},Kb={class:"row"},Wb={class:"col-6 mb-4 mt-4"},Jb={class:"widget-name"};var Yb={__name:"page-host-details-packets",props:{page_csrf:String,url_params:Object},setup(e){const t=[{title:i18n("graphs.packets_sent"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/packets/sent_data.lua`,id:"packets_sent"},{title:i18n("graphs.packets_rcvd"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/packets/rcvd_data.lua`,id:"packets_rcvd"},{title:i18n("graphs.tcp_flags"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/packets/tcp_flags_data.lua`,id:"tcp_flags"},{title:i18n("graphs.arp_distribution"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/packets/arp_data.lua`,id:"arp_requests"}];function a(e,t,a){n.hideOverlays()}return cl((()=>{})),(e,n)=>(As(),Ms("div",Bb,[zs("div",Vb,[zs("div",qb,[Hb,zs("div",Gb,[zs("div",Kb,[(As(),Ms(xs,null,Cl(t,(e=>zs("div",Wb,[zs("h3",Jb,Z(e.title),1),Bs(Id,{id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!1,onChart_reloaded:a},null,8,["id","chart_type","base_url_request"])]))),64))])])])])]))},__file:"http_src/vue/page-host-details-packets.vue"};const Xb={key:0,class:"alert alert-info",id:"empty-message"},Zb=["width","height"],Qb=[zs("g",{class:"nodes",style:{stroke:"#000",strokeOpacity:"0.5"}},null,-1),zs("g",{class:"links",style:{stroke:"#000",strokeOpacity:"0.3",fill:"none"}},null,-1)];var ey={__name:"sankey_3",props:{no_data_message:String,width:Number,height:Number,sankey_data:Object},emits:["node_click","update_width","update_height"],setup(e,{expose:t,emit:n}){const a=e,l=d3v7,s=_n(!1),i=_n(null),o=_n({});function r(e){e&&($(".nodes",i.value).empty(),$(".links",i.value).empty()),null!=a.sankey_data.nodes&&null!=a.sankey_data.links&&0!=a.sankey_data.length&&0!=a.sankey_data.links.length?(s.value=!1,d()):s.value=!0}rl((async()=>{})),cl((async()=>{r(),window.addEventListener("resize",(()=>r(!0)))})),Ma((()=>a.sankey_data),((e,t)=>{r(!0)}));let c=null,u=null;async function d(){const e=l.scaleOrdinal(l.schemeCategory10);let t=a.sankey_data;const s=function(){n("update_width");let e=a.width;null==e&&(e=$(i.value).parent().parent().width()-10);n("update_height");let t=a.height;null==t&&(t=$(i.value).parent().parent().height()-50);return{width:e,height:t}}();var r,d;o.value=s,r=s.width-10,d=s.height-5,c=l.sankey().nodeAlign(l.sankeyCenter).nodeWidth(10).nodePadding(10).extent([[0,5],[r,d]]),u=c(t);const{links:h,nodes:m}=u;let g=l.select(i.value).select("g.nodes").selectAll("g").data(m).join((e=>e.append("g"))).attr("transform",(e=>`translate(${e.x0}, ${e.y0})`));l.zoom().scaleExtent([1,40]).on("zoom",f),g.append("rect").attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("dataIndex",(e=>e.index)).attr("fill",(t=>e(t.index/m.length))).attr("class","sankey-node").attr("style","cursor:move;"),l.selectAll("rect").append("title").text((e=>`${e.label}`)),g.data(m).append("text").attr("class","label").style("pointer-events","auto").attr("style","cursor:pointer;").style("fill-opacity",(function(e){return 1})).attr("fill",(e=>"#000")).attr("x",(e=>e.x0<s.width/2?e.x1-e.x0+6:-6)).attr("y",(e=>(e.y1-e.y0)/2)).attr("alignment-baseline","middle").attr("text-anchor",(e=>e.x0<s.width/2?"start":"end")).attr("font-size",12).text((e=>e.label)).on("click",(function(e,t){n("node_click",t.data)})),g.call(l.drag().subject((e=>e)).on("start",p).on("drag",_));const v=l.select(i.value).select("g.links").selectAll("g").data(h).join((e=>e.append("g")));let b=v.append("linearGradient");b.attr("id",(e=>`gradient-${e.index}`)).attr("gradientUnits","userSpaceOnUse").attr("x1",(e=>e.source.x1)).attr("x2",(e=>e.target.x0)),b.append("stop").attr("offset","0").attr("stop-color",(t=>e(t.source.index/m.length))),b.append("stop").attr("offset","100%").attr("stop-color",(t=>e(t.target.index/m.length))),v.append("path").style("pointer-events","none").attr("class","sankey-link").attr("d",l.sankeyLinkHorizontal()).attr("stroke-width",(e=>Math.max(1,e.width))).attr("stroke",(e=>`url(#gradient-${e.index}`)),v.append("title").text((e=>`${e.label}`))}function p(e,t){t.__x=e.x,t.__y=e.y,t.__x0=t.x0,t.__y0=t.y0,t.__x1=t.x1,t.__y1=t.y1}function _(e,t){l.select(this).attr("transform",(function(t){const n=e.x-t.__x,a=e.y-t.__y,s=o.value.width,i=o.value.width;return t.x0=t.__x0+n,t.x1=t.__x1+n,t.y0=t.__y0+a,t.y1=t.__y1+a,t.x0<0&&(t.x0=0,t.x1=10),t.x1>s&&(t.x0=s-10,t.x1=s),t.y0<0&&(t.y0=0,t.y1=t.__y1-t.__y0),t.y1>i&&(t.y0=i-(t.__y1-t.__y0),t.y1=i),c.update(u),l.selectAll(".sankey-link").attr("d",l.sankeyLinkHorizontal()),`translate(${t.x0}, ${t.y0})`}))}function f({transform:e}){g.attr("transform",e)}const h=e=>i18n(e);return t({draw_sankey:d}),(t,n)=>(As(),Ms(xs,null,[s.value?(As(),Ms("div",Xb,Z(e.no_data_message||h("flows_page.no_data")),1)):Ks("v-if",!0),zs("div",null,[(As(),Ms("svg",{ref_key:"sankey_chart_ref",ref:i,width:o.value.width,height:o.value.height,style:{margin:"10px"}},Qb,8,Zb))])],64))}};pp("\n/* .node rect { */\n/*   fill-opacity: 0.9; */\n/*   shape-rendering: crispEdges; */\n/* } */\n\n/* .node text { */\n/*   pointer-events: none; */\n/*   text-shadow: 0 1px 0 #fff; */\n/* } */\n\n/* path.link.link2 { */\n/*     all: initial; */\n/*     fill: unset; */\n/*     stroke: unset; */\n/*     stroke-opacity: unset; */\n/*     stroke-width: unset; */\n/* } */\n\n/* .link:hover { */\n/*   stroke-opacity: 0.5; */\n/* } */\n"),ey.__file="http_src/vue/sankey_3.vue";let ty=d3v7;const ny={align:"justify",nodeId:e=>e.id,nodeTitle:e=>`${e.id}`,nodeGroup:e=>e.id.split(/\W/)[0],nodeAlign:ty.sankeyJustify,nodeWidth:15,nodePadding:10,nodeLabel:e=>e.id,nodeLabelPadding:6,nodeStroke:"currentColor",linkSource:({source:e})=>e,linkTarget:({target:e})=>e,linkSourceNode:({source_node:e})=>e,linkTargetNode:({target_node:e})=>e,linkPath:ty.sankeyLinkHorizontal(),linkValue:({value:e})=>e,linkLink:({link:e})=>e,linkTitle:e=>`${e.source_node} → ${e.target_node} : ${e.link}\n${e.value}`,linkColor:({link_color:e})=>e,sourceColor:({source_color:e})=>e||"",targetColor:({target_color:e})=>e||"",sourceLink:({source_link:e})=>e||"",targetLink:({target_link:e})=>e||"",linkStrokeOpacity:.5,linkMixBlendMode:"multiply",colors:ty.schemeTableau10,width:1200,height:600,marginTop:5,marginRight:1,marginBottom:5,marginLeft:1},ay=e=>`${i18n("flow")}: ${e.source_node} → ${e.target_node}\n${i18n("protocol")}: ${e.link}\n${i18n("traffic")}: ${n.bytesToSize(e.value)}`,ly={formatFlowTitle:ay,get_data:async function(){return{}},getDefaultSankeySettings:function(){return ny}},sy={class:"row"},iy={class:"col-md-12 col-lg-12"},oy={class:"card card-shadow"},ry={class:"card-body"},cy={class:"align-items-center justify-content-end mb-3",style:{height:"70vh"}},uy={class:"d-flex align-items-center mb-2"},dy={class:"d-flex no-wrap"};var py={__name:"page-host-details-flow-sankey",props:{is_local:Boolean},setup(e){const t=e,n=e=>i18n(e),a=`${http_prefix}/lua/pro/rest/v2/get/host/flows/data.lua`,l=[{filter_name:"hosts_type",key:3,id:"local_origin_remote_target",title:n("flows_page.local_cli_remote_srv"),label:n("flows_page.local_cli_remote_srv"),filter_icon:!1,countable:!1},{filter_name:"hosts_type",key:4,id:"remote_origin_local_target",title:n("flows_page.local_srv_remote_cli"),label:n("flows_page.local_srv_remote_cli"),filter_icon:!1,countable:!1},{filter_name:"hosts_type",key:5,id:"all_hosts",title:n("flows_page.all_flows"),label:n("flows_page.all_flows"),filter_icon:!1,countable:!1}];t.is_local?l.unshift({filter_name:"hosts_type",key:1,id:"local_only",title:n("flows_page.local_only"),label:n("flows_page.local_only"),filter_icon:!1,countable:!1}):l.unshift({filter_name:"hosts_type",key:2,id:"remote_only",title:n("flows_page.remote_only"),label:n("flows_page.remote_only"),filter_icon:!1,countable:!1});const s=_n(l[0]),i=_n({});function o(e){if(1==e.is_link_node)return;let t={host:e.info.ip,vlan:e.info.vlan},n=w.obj_to_url_params(t);const a=`${http_prefix}/lua/host_details.lua?${n}`;w.go_to_url(a),console.log(e)}rl((()=>{})),cl((()=>{r()}));const r=function(){let e=s.value;w.set_key_to_url(e.filter_name,e.id),async function(){let e=await async function(){const e=function(){let e={host:w.get_url_entry("host"),vlan:w.get_url_entry("vlan"),ifid:w.get_url_entry("ifid"),hosts_type:w.get_url_entry("hosts_type")},t=w.obj_to_url_params(e);return`${a}?${t}`}();let t=await v.http_request(e);console.log(t),t=function(e){let t=e=>console.error(`link (source: ${e.source_node_id}, target: ${e.target_node_id}) removed for not existing source/target node`),n=function(e,t){let n={};e.nodes.forEach((e=>n[e.node_id]=!0));let a=e=>null!=n[e.source_node_id]&&null!=n[e.target_node_id];return function(e,t,n){return e.filter((e=>{const a=t(e);return 0==a&&null!=n&&n(e),a}))}(e.links,a,t)}(e,t);return{nodes:e.nodes,links:n}}(t);let n=w.get_url_entry("host");return function(e,t){if(0==e.nodes.length&&0==e.links.length)return e;let n={};e.nodes.forEach((e=>n[e.node_id]=e));const a=e=>{if(e.source_node_id==t)return-1;if(e.target_node_id==t)return 1;throw`Wrong direction link ${e.source_node_id} -> ${e.target_node_id}`},l=(e,n)=>e==t?e:`${n}_${e}`;let s={},i={nodes:[],links:[]};e.links.forEach((e=>{let t,o=a(e),r={source_node_id:l(e.source_node_id,o),target_node_id:l(e.target_node_id,o),label:e.label,value:e.value,data:e};if(-1==o){let a=n[e.target_node_id];t={node_id:r.target_node_id,label:a.label,data:a}}else{let a=n[e.source_node_id];t={node_id:r.source_node_id,label:a.label,data:a}}i.links.push(r),null==s[t.node_id]&&(s[t.node_id]=!0,i.nodes.push(t))}));let o=n[t];i.nodes.push({node_id:o.node_id,label:o.label,data:o}),i.nodes.forEach((e=>n[e.node_id]=e));const r=e=>`${a(e)}_${e.label}`;let u={};i.links.forEach((e=>{let t=r(e),a=u[t];null==a&&(a={id:t,label:e.label,data:{...e,is_link_node:!0},node_links:[]},u[t]=a),a.node_links.push({source:n[e.source_node_id],target:n[e.target_node_id],value:c(e)})}));let d=i.nodes.map((e=>e)),p=[];for(let e in u){let t=u[e],n={node_id:t.id,label:t.label,data:t.data};d.push(n),t.node_links.forEach((e=>{p.push({source_node_id:e.source.node_id,target_node_id:n.node_id,label:`${e.source.label} - ${e.target.label}: ${n.label}`,value:e.value,data:e}),p.push({source_node_id:n.node_id,target_node_id:e.target.node_id,label:`${e.source.label} - ${e.target.label}: ${n.label}`,value:e.value,data:e})}))}let _={},f=[];d.map(((e,t)=>{let n={index:t,node_id:e.node_id,label:e.label,data:e.data};_[e.node_id]=n,f.push(n)}));let h=p.map((e=>{let t=_[e.source_node_id],n=_[e.target_node_id];return{source:t.index,target:n.index,source_node_id:t.index,target_node_id:n.index,value:e.value,label:e.label}}));return{nodes:f,links:h}}(t,n)}();0!=e.nodes.length&&0!=e.links.length||console.log("Empty Data");i.value=e}()};function c(e){return e.data?.info?.traffic}return(e,t)=>(As(),Ms("div",sy,[zs("div",iy,[zs("div",oy,[Ks(' <div class="overlay justify-content-center align-items-center position-absolute h-100 w-100"> '),Ks(' <div class="text-center"> '),Ks('   <div class="spinner-border text-primary mt-5" role="status"> '),Ks('     <span class="sr-only position-absolute">Loading...</span> '),Ks("   </div> "),Ks(" </div> "),Ks(" </div> "),zs("div",ry,[zs("div",cy,[zs("div",uy,[zs("div",dy,[zs("div",null,[Bs(jd,{selected_option:s.value,"onUpdate:selected_option":t[0]||(t[0]=e=>s.value=e),options:l,onSelect_option:r},null,8,["selected_option"])])])]),Bs(ey,{onNode_click:o,sankey_data:i.value},null,8,["sankey_data"])])])])])]))},__file:"http_src/vue/page-host-details-flow-sankey.vue"};const _y={id:"script-description",class:"notes bg-light border",role:"alert"};var fy={__name:"note-list",props:{note_list:Array},setup(e){const t=e,n=e=>i18n(e);return(e,a)=>(As(),Ms("div",_y,[zs("b",null,Z(n("notes")),1),zs("ul",null,[(As(!0),Ms(xs,null,Cl(t.note_list,(e=>(As(),Ms("li",null,Z(e),1)))),256))])]))},__file:"http_src/vue/note-list.vue"};const hy={class:"form-group ms-2 me-2 mt-3 row"},my={class:"col-form-label col-sm-4"},gy={class:"col-sm-8"},vy={key:0,class:"form-group ms-2 me-2 mt-3 row"},by={class:"col-form-label col-sm-4"},yy={class:"col-8"},wy={key:1,class:"form-group ms-2 me-2 mt-3 row"},xy={class:"col-form-label col-sm-4"},ky={class:"col-8"},$y={class:"form-group ms-2 me-2 mt-3 row"},Sy={class:"col-form-label col-sm-4"},Cy={class:"col-3"},Ny={class:"btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},Ay=["value","id"],Ey=["id","for"],Ty=["value","id"],Py=["id","for"];var Iy={__name:"modal-add-host-rules",props:{metric_list:Array,frequency_list:Array},emits:["add"],setup(e,{expose:t,emit:n}){const a=e;_n(""),_n("");const l=_n(null),s=i18n("if_stats_config.add_host_rules_title"),i=_n(!1),o=e=>i18n(e),r=_n([]),c=_n([]),u=_n(null),d=_n({}),p=_n({}),_=_n(!0),f=_n({}),h=_n(!0),m=[o("if_stats_config.note_1"),o("if_stats_config.note_2"),o("if_stats_config.note_3"),o("if_stats_config.note_4")],g=[{title:o("volume"),label:o("volume"),id:"volume",active:!0},{title:o("throughput"),label:o("throughput"),id:"throughput",active:!1}],v=[{title:o("kb"),label:o("kb"),id:"kb",value:1024,active:!1},{title:o("mb"),label:o("mb"),id:"mb",value:1048576,active:!1},{title:o("gb"),label:o("gb"),id:"gb",value:1073741824,active:!0}],b=[{title:o("kbps"),label:o("kbps"),id:"kbps",value:1e3,active:!1},{title:o("mbps"),label:o("mbps"),id:"mbps",value:1e6,active:!1},{title:o("gbps"),label:o("gbps"),id:"gbps",value:1e9,active:!0}],y=_n(null),w=_n(null);const x=()=>{let e=new RegExp(yf.get_data_pattern("ip"));_.value=!(e.test(y.value.value)||"*"===y.value.value)},k=e=>{const t=e.target.id;"throughput"==f.value.id?b.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):v.forEach((e=>{e.id===t?e.active=!0:e.active=!1})),Array.from(e.target.parentElement.children).forEach((e=>{"LABEL"==e.tagName&&(e.id==t?(e.classList.remove("btn-secondary"),e.classList.add("btn-primary"),e.classList.add("active")):(e.classList.add("btn-secondary"),e.classList.remove("btn-primary"),e.classList.remove("active")))}))},$=()=>{const e=y.value.value,t=p.value.id,a=d.value.id;let l,s,i=f.value.id,o=d.value.extra_metric?d.value.extra_metric:null;!1===h.value&&(i="",o="",s=w.value.value),"throughput"==i?(b.forEach((e=>{e.active&&(l=e.value)})),s=l*parseInt(w.value.value)/8):"volume"==i&&(v.forEach((e=>{e.active&&(l=e.value)})),s=l*parseInt(w.value.value)),n("add",{host:e,frequency:t,metric:a,threshold:s,metric_type:i,extra_metric:o}),S()},S=()=>{l.value.close()};return rl((()=>{f.value=g[0]})),t({show:()=>{y.value.value="",d.value=r.value[0],p.value=c.value[0],f.value=g[0],g.forEach((e=>e.active=!1)),g[0].active=!0,v.forEach((e=>e.active=!1)),v[v.length-1].active=!0,b.forEach((e=>e.active=!1)),b[b.length-1].active=!0,w.value.value=1,l.value.show()},close:S,metricsLoaded:e=>{i.value=!0,r.value=e,c.value=a.frequency_list,p.value=c.value[0],d.value=r.value[0]}}),(e,t)=>(As(),Os(_p,{onShowed:t[4]||(t[4]=e=>{}),ref_key:"modal_id",ref:l},{title:fa((()=>[Hs(Z(vn(s)),1)])),body:fa((()=>[Ks(" Target information, here an IP is put "),zs("div",hy,[zs("label",my,[zs("b",null,Z(o("if_stats_config.target")),1)]),zs("div",gy,[zs("input",{ref_key:"host",ref:y,onInput:x,class:"form-control",type:"text",placeholder:"A local host IP or '*' for checking all local hosts",required:""},null,544)])]),Ks(" Metric information, here a metric is selected (e.g. DNS traffic) "),i.value?(As(),Ms("div",vy,[zs("label",by,[zs("b",null,Z(o("if_stats_config.metric")),1)]),zs("div",yy,[Bs(jd,{selected_option:d.value,"onUpdate:selected_option":t[0]||(t[0]=e=>d.value=e),onSelect_option:t[1]||(t[1]=e=>{1==d.value.show_volume?h.value=!0:h.value=!1}),options:r.value},null,8,["selected_option","options"])])])):Ks("v-if",!0),Ks(" Frequency information, a frequency of 1 day, 5 minute or 1 hour for example "),i.value?(As(),Ms("div",wy,[zs("label",xy,[zs("b",null,Z(o("if_stats_config.frequency")),1)]),zs("div",ky,[Bs(jd,{selected_option:p.value,"onUpdate:selected_option":t[2]||(t[2]=e=>p.value=e),options:c.value},null,8,["selected_option","options"])])])):Ks("v-if",!0),Ks(" Threshold information, maximum amount of bytes "),zs("div",$y,[zs("label",Sy,[zs("b",null,Z(o("if_stats_config.threshold")),1)]),h.value?(As(),Ms(xs,{key:0},[zs("div",Cy,[Bs(jd,{selected_option:f.value,"onUpdate:selected_option":t[3]||(t[3]=e=>f.value=e),options:g},null,8,["selected_option"])]),zs("div",{class:H(["col-3",["throughput"==f.value.id?"p-0":""]])},[zs("div",Ny,["throughput"==f.value.id?(As(),Ms(xs,{key:0},Cl(b,(e=>(As(),Ms(xs,null,[zs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:u,name:"threshold_measure"},null,8,Ay),zs("label",{class:H(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:k,for:e.id},Z(e.label),11,Ey)],64)))),64)):(As(),Ms(xs,{key:1},Cl(v,(e=>(As(),Ms(xs,null,[zs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:u,name:"threshold_measure"},null,8,Ty),zs("label",{class:H(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:k,for:e.id},Z(e.label),11,Py)],64)))),64))])],2)],64)):Ks("v-if",!0),zs("div",{class:H([h.value?"col-2":"col-8"])},[zs("input",{value:"1",ref_key:"threshold",ref:w,type:"number",name:"threshold",class:"form-control",max:"1023",min:"1",required:""},null,512)],2)])])),footer:fa((()=>[Bs(fy,{note_list:m}),zs("button",{type:"button",onClick:$,class:H(["btn btn-primary",[_.value?"disabled":""]])},Z(o("add")),3)])),_:1},512))},__file:"http_src/vue/modal-add-host-rules.vue"};const My={class:"row"},Oy={class:"col-md-12 col-lg-12"},Uy={class:"card"},Fy=zs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[zs("div",{class:"text-center"},[zs("div",{class:"spinner-border text-primary mt-5",role:"status"},[zs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),jy={class:"card-body"},Ly={class:"mb-4"},Ry={id:"host_rules"},Dy={class:"card-footer"};var zy={__name:"page-host-rules",props:{page_csrf:String,ifid:String},setup(e){const t=e,a=_n(null),l=_n(null),s=_n(null),i=e=>i18n(e),o=_n({}),r=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua`,c=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_data.lua`,u=`${http_prefix}/lua/pro/rest/v2/add/interface/host_rules/add_host_rule.lua`,d=`${http_prefix}/lua/pro/rest/v2/delete/interface/host_rules/delete_host_rule.lua`,p=[i("if_stats_config.generic_notes_1"),i("if_stats_config.generic_notes_2"),i("if_stats_config.generic_notes_3")],_={ifid:t.ifid,csrf:t.page_csrf};let f={},h=i("if_stats_config.delete_host_rules_title"),m=i("if_stats_config.delete_host_rules_description"),g=[];const v=[{title:i18n("show_alerts.5_min"),label:i18n("show_alerts.5_min"),id:"5min"},{title:i18n("show_alerts.hourly"),label:i18n("show_alerts.hourly"),id:"hour"},{title:i18n("show_alerts.daily"),label:i18n("show_alerts.daily"),id:"day"}],b=function(){a.value.reload()},y=async function(){const e=o.value,t=n.buildURL(d,{..._,rule_id:e.id});await $.post(t,(function(e,t){b()}))},w=async function(e){const t=n.buildURL(u,{..._,...e});await $.post(t,(function(e,t){b()}))},x=function(e){let t={handlerId:"delete_host",onClick:()=>{var t;t=e,o.value=t,l.value.show()}};return DataTableUtils.createActionButtons([{class:"btn-danger",handler:t,icon:"fa-trash",title:i18n("delete"),class:"pointer"}])},k=function(){const e=[];e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(){b()}},{text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){s.value.show()}});const t=[{columnName:i("id"),visible:!1,targets:0,name:"id",data:"id",className:"text-nowrap",responsivePriority:1},{columnName:i("if_stats_config.target"),targets:1,width:"20",name:"target",data:"target",className:"text-nowrap",responsivePriority:1},{columnName:i("if_stats_config.metric"),targets:2,width:"10",name:"metric",data:"metric",className:"text-nowrap",responsivePriority:1,render:function(e,t,n){return function(e,t){let n=e;return g.forEach((a=>{a.id==e&&(t.extra_metric?t.extra_metric==a.extra_metric&&(n=a.label):n=a.label)})),n}(e,n)}},{columnName:i("if_stats_config.frequency"),targets:3,width:"10",name:"frequency",data:"frequency",className:"text-nowrap",responsivePriority:1,render:function(e){return function(e){let t="";return v.forEach((n=>{e==n.id&&(t=n.title)})),t}(e)}},{columnName:i("if_stats_config.threshold"),targets:4,width:"10",name:"threshold",data:"threshold",className:"text-nowrap",responsivePriority:1,render:function(e,t,a){return function(e,t){let a=parseInt(e);return a=t.metric_type&&"throughput"==t.metric_type?n.bitsToSize(8*e):t.metric_type&&"volume"==t.metric_type?n.bytesToSize(e):e,a}(e,a)}},{columnName:i("metric_type"),visible:!1,targets:5,name:"metric_type",data:"metric_type",className:"text-nowrap",responsivePriority:1},{columnName:i("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,n){return x(n)}}],a={table_buttons:e,data_url:n.buildURL(c,_),enable_search:!0,columns_config:t,table_config:{scrollX:!1,serverSide:!1,order:[[1,"desc"]],columnDefs:t}};f=a};return rl((async()=>{k(),await async function(){const e=n.buildURL(r,_);await $.get(e,(function(e,t){g=e.rsp}))}(),s.value.metricsLoaded(g)})),_l((()=>{a.value.destroy_table()})),(e,t)=>(As(),Ms("div",My,[zs("div",Oy,[zs("div",Uy,[Fy,zs("div",jy,[zs("div",Ly,[zs("h4",null,Z(i("if_stats_config.host_rules")),1)]),zs("div",Ry,[Bs(Zh,{ref_key:"modal_delete_confirm",ref:l,title:vn(h),body:vn(m),onDelete:y},null,8,["title","body"]),Bs(Iy,{ref_key:"modal_add_host_rule",ref:s,metric_list:vn(g),frequency_list:v,onAdd:w},null,8,["metric_list"]),Bs($h,{ref_key:"table_host_rules",ref:a,table_buttons:vn(f).table_buttons,columns_config:vn(f).columns_config,data_url:vn(f).data_url,enable_search:vn(f).enable_search,table_config:vn(f).table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])]),zs("div",Dy,[Bs(fy,{note_list:p})])])])]))},__file:"http_src/vue/page-host-rules.vue"};const By={class:"row"},Vy={class:"col-md-12 col-lg-12"},qy={class:"card"},Hy=zs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[zs("div",{class:"text-center"},[zs("div",{class:"spinner-border text-primary mt-5",role:"status"},[zs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Gy={class:"card-body"},Ky={id:"host_details_ports"},Wy={class:"row mb-4 mt-4",id:"host_details_ports"},Jy={class:"col-6"};var Yy={__name:"page-host-details-ports",props:{page_csrf:String},setup(e){_n(null),_n([]),_n({});const t=e=>i18n(e);rl((async()=>{await async function(){let e={};e.host=w.get_url_entry("host"),e.vlan=w.get_url_entry("vlan"),e.ifid=w.get_url_entry("ifid"),a.forEach((t=>{let a={...t.extra_params,...e};$.get(n.buildURL(t.url,a),(async function(e,n){let a=[];e.rsp.forEach((e=>{const t=e.port_info.port,n=e.port_info.l7_proto;a.push({label:`${t} (${n})`})})),t.stats_rows=a}))}))}()})),cl((async()=>{n.hideOverlays()})),_l((async()=>{traffic_table.value.destroy_table()})),i18n("graphs.cli_ports"),ntopChartApex.typeChart.PIE,http_prefix,i18n("graphs.srv_ports"),ntopChartApex.typeChart.PIE,http_prefix;const a=[{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"cli_port_flows",extra_params:{mode:"local",protocol:"tcp"},columns:[{id:"active_server_tcp_ports",label:t("ports_page.active_server_tcp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]},{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"cli_port_flows",extra_params:{mode:"local",protocol:"udp"},columns:[{id:"active_server_udp_ports",label:t("ports_page.active_server_udp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]},{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"srv_port_flows",extra_params:{mode:"remote",protocol:"tcp"},columns:[{id:"client_contacted_server_tcp_ports",label:t("ports_page.client_contacted_server_tcp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]},{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"srv_port_flows",extra_params:{mode:"remote",protocol:"udp"},columns:[{id:"client_contacted_server_udp_ports",label:t("ports_page.client_contacted_server_udp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]}];return(e,t)=>(As(),Ms("div",By,[zs("div",Vy,[zs("div",qy,[Hy,zs("div",Gy,[zs("div",Ky,[zs("div",Wy,[(As(),Ms(xs,null,Cl(a,(e=>zs("div",Jy,[Bs(Ah,{id:e.id,columns:e.columns,rows:e.stats_rows,print_html_column:e=>function(e){return e.label}(e),print_html_row:(e,t)=>function(e,t){return t.label}(0,t)},null,8,["id","columns","rows","print_html_column","print_html_row"])]))),64))])])])])])]))},__file:"http_src/vue/page-host-details-ports.vue"};const Xy={class:"row"},Zy={class:"col-12"},Qy={class:"card"},ew={class:"card-body"},tw={class:"align-items-center justify-content-end mb-3",style:{height:"70vh"}},nw={class:"d-flex ms-auto flex-row-reverse"},aw=zs("label",{class:"my-auto me-1"},null,-1),lw={class:"m-1"},sw={key:0,style:{"min-width":"14rem"}},iw={class:"my-auto me-1"};var ow={__name:"page-alert-analysis",props:{ifid:String,page_csrf:String,charts_options:Array,available_filters:Object},setup(e){const t=e,a=e=>i18n(e),l=ntopChartApex.typeChart.BUBBLE,s=`${http_prefix}/lua/pro/rest/v2/charts/alert/analysis.lua`,i="alerts-map",o={},r=_n(null),c=function(){let e="";const t={bubble_mode:w.get_url_entry("bubble_mode"),timeframe:w.get_url_entry("timeframe"),vlan:w.get_url_entry("vlan"),ifid:w.get_url_entry("ifid")};for(const[n,a]of Object.entries(t))e=`${e}&${n}=${a}`;return e},u=function(){return async e=>{let a=function(e){let a={};if(t.charts_options.forEach((t=>{t.mode_id==e&&(a=t)})),a&&a.chart&&a.chart.ntop_events){a.chart.events=a.chart.events||{};for(const[e,t]of Object.entries(a.chart.ntop_events))null!=t&&(a.chart.events[e]=n[t]||n.fnone)}return a&&a.xaxis&&a.xaxis.labels&&a.xaxis.labels.ntop_utils_formatter&&(a.xaxis.labels.formatter=n[a.xaxis.labels.ntop_utils_formatter]||n.fnone),a&&a.yaxis&&a.yaxis.labels&&a.yaxis.labels.ntop_utils_formatter&&(a.yaxis.labels.formatter=n[a.yaxis.labels.ntop_utils_formatter]||n.fnone),a&&a.tooltip&&a.tooltip.ntop_utils_formatter&&(a.tooltip.custom=n[a.tooltip.ntop_utils_formatter]),a}(Number(o.bubble_mode.id));const l=await ntopng_utility.http_request(e);return a.series=l.series||{},a}},d=function(e){w.set_key_to_url(e.filter_name,e.id),r.value.update_chart(`${s}?${c()}`)};return rl((()=>{const e=w.get_url_entry("timeframe"),n=w.get_url_entry("vlan");w.get_url_entry("bubble_mode")||w.set_key_to_url("bubble_mode",0),e||w.set_key_to_url("timeframe",300),n||w.set_key_to_url("vlan",0),w.set_key_to_url("ifid",t.ifid);for(const[e,n]of Object.entries(t.available_filters))n.forEach((t=>{t.filter_name=e,t.currently_active&&(o[e]=t)}))})),(t,n)=>(As(),Ms("div",Xy,[zs("div",Zy,[zs("div",Qy,[zs("div",ew,[zs("div",tw,[zs("div",nw,[aw,(As(!0),Ms(xs,null,Cl(e.available_filters,((e,t,n)=>(As(),Ms("div",lw,[e.length>0?(As(),Ms("div",sw,[zs("label",iw,Z(a("bubble_map."+t))+": ",1),Bs(jd,{selected_option:o[t],"onUpdate:selected_option":e=>o[t]=e,options:e,onSelect_option:d},null,8,["selected_option","onUpdate:selected_option","options"])])):Ks("v-if",!0)])))),256))]),zs("div",{id:i,style:{height:"90%"}},[Bs(Id,{ref_key:"bubble_chart",ref:r,id:i,chart_type:vn(l),base_url_request:s,get_params_url_request:c,get_custom_chart_options:u(),register_on_status_change:!1},null,8,["chart_type","get_custom_chart_options"])])])])])])]))},__file:"http_src/vue/page-alert-analysis.vue"};const rw={class:"row"},cw={class:"col-12"},uw={class:"card"},dw={class:"card-body"},pw={class:"align-items-center justify-content-end mb-3",style:{height:"70vh"}},_w={class:"d-flex ms-auto flex-row-reverse"},fw=zs("label",{class:"my-auto me-1"},null,-1),hw={class:"m-1"},mw={key:0,style:{"min-width":"15rem"}},gw={class:"my-auto me-1"};var vw={__name:"page-host-map",props:{ifid:String,page_csrf:String,charts_options:Array,available_filters:Object},setup(e){const t=e,a=e=>i18n(e),l=ntopChartApex.typeChart.BUBBLE,s=`${http_prefix}/lua/rest/v2/charts/host/map.lua`,i="alerts-map",o={},r=_n(null),c=function(){let e="";const t={bubble_mode:w.get_url_entry("bubble_mode"),ifid:w.get_url_entry("ifid")};for(const[n,a]of Object.entries(t))e=`${e}&${n}=${a}`;return e},u=function(){return async e=>{let a=function(e){let a={};if(t.charts_options.forEach((t=>{t.mode_id==e&&(a=t)})),a&&a.chart&&a.chart.ntop_events){a.chart.events=a.chart.events||{};for(const[e,t]of Object.entries(a.chart.ntop_events))null!=t&&(a.chart.events[e]=n[t]||n.fnone)}return a&&a.xaxis&&a.xaxis.labels&&a.xaxis.labels.ntop_utils_formatter&&(a.xaxis.labels.formatter=n[a.xaxis.labels.ntop_utils_formatter]||n.fnone),a&&a.yaxis&&a.yaxis.labels&&a.yaxis.labels.ntop_utils_formatter&&(a.yaxis.labels.formatter=n[a.yaxis.labels.ntop_utils_formatter]||n.fnone),a&&a.tooltip&&a.tooltip.ntop_utils_formatter&&(a.tooltip.custom=n[a.tooltip.ntop_utils_formatter]),a}(Number(o.bubble_mode.id));const l=await ntopng_utility.http_request(e);return a.series=l.series||{},a}},d=function(e){w.set_key_to_url(e.filter_name,e.id),r.value.update_chart(`${s}?${c()}`)};return rl((()=>{w.get_url_entry("bubble_mode")||w.set_key_to_url("bubble_mode",0),w.set_key_to_url("ifid",t.ifid);for(const[e,n]of Object.entries(t.available_filters))n.forEach((t=>{t.filter_name=e,t.currently_active&&(o[e]=t)}))})),(t,n)=>(As(),Ms("div",rw,[zs("div",cw,[zs("div",uw,[zs("div",dw,[zs("div",pw,[zs("div",_w,[fw,(As(!0),Ms(xs,null,Cl(e.available_filters,((e,t,n)=>(As(),Ms("div",hw,[e.length>0?(As(),Ms("div",mw,[zs("label",gw,Z(a("bubble_map."+t))+": ",1),Bs(jd,{selected_option:o[t],"onUpdate:selected_option":e=>o[t]=e,options:e,onSelect_option:d},null,8,["selected_option","onUpdate:selected_option","options"])])):Ks("v-if",!0)])))),256))]),zs("div",{id:i,style:{height:"90%"}},[Bs(Id,{ref_key:"bubble_chart",ref:r,id:i,chart_type:vn(l),base_url_request:s,get_params_url_request:c,get_custom_chart_options:u(),register_on_status_change:!1},null,8,["chart_type","get_custom_chart_options"])])])])])])]))},__file:"http_src/vue/page-host-map.vue"};const bw={class:"row"},yw={class:"col-md-12 col-lg-12"},ww={class:"card card-shadow"},xw={class:"card-body"},kw={class:"d-flex align-items-center flex-row-reverse mb-2"},$w={class:"m-1"},Sw={key:0,style:{"min-width":"14rem"}},Cw={class:"my-auto me-1"};var Nw={__name:"page-vlan-ports-sankey",props:{ifid:Number,available_filters:Object},setup(e){const t=e,n={},a=e=>i18n(e),l=a("ports_analysis.no_data"),s=_n(null),i=_n(null),o=_n(null),r=_n({}),c=`${http_prefix}/lua/pro/rest/v2/get/vlan/live_ports.lua`,u=`${http_prefix}/lua/pro/rest/v2/get/vlan/historical_ports.lua`;function d(e){1!=e.is_link_node&&e.link&&w.go_to_url(e.link)}rl((()=>{const e=w.get_url_entry("timeframe"),a=w.get_url_entry("vlan");w.get_url_entry("l4proto"),e||w.set_key_to_url("timeframe","none"),a||w.set_key_to_url("vlan","none"),a||w.set_key_to_url("l4proto","none"),w.set_key_to_url("ifid",t.ifid);for(const[e,a]of Object.entries(t.available_filters))a.forEach((t=>{t.filter_name=e,t.currently_active&&(n[e]=t)}))})),cl((()=>{m(),g(),_()}));const p=function(e){w.set_key_to_url(e.filter_name,e.id),_()},_=function(){!async function(){let e=await async function(){const e=function(){let e=w.get_url_entry("vlan"),t=w.get_url_entry("timeframe"),n=w.get_url_entry("l4proto");"none"==e&&(e="");"none"==t&&(t="");"none"==n&&(n="");let a="",l={ifid:w.get_url_entry("ifid"),vlan:e,timeframe:t,l4proto:n},s=w.obj_to_url_params(l);a=""==t?`${c}?${s}`:`${u}?${s}`;return a}();let t=await v.http_request(e);t=function(e){let t=e=>console.error(`link (source: ${e.source_node_id}, target: ${e.target_node_id}) removed for not existing source/target node`),n=function(e,t){let n={};e.nodes.forEach((e=>n[e.node_id]=!0));let a=e=>null!=n[e.source_node_id]&&null!=n[e.target_node_id];return h(e.links,a,t)}(e,t);return{nodes:e.nodes,links:n}}(t),t=function(e){let t={};e.links.forEach((e=>{let n=t[e.source_node_id];null==n&&(n=[],t[e.source_node_id]=n),n.push(e.target_node_id)}));let n={};e.nodes.forEach((e=>{n[e.node_id]={checked:!1,visited:!1}}));let a={},l=(e,t)=>`${e}_${t}`,s=(e,i)=>{let o=n[e];if(1==o.checked)return;if(1==o.visited){let t=l(i,e);return a[t]=!0,console.error(`Link (source: ${i}, target: ${e} ) is a circular link`),void(o.visited=!1)}o.visited=!0;let r=t[e];if(null!=r)for(let t=0;t<r.length;t+=1){let n=r[t];s(n,e)}o.visited=!1,o.checked=!0};e.nodes.forEach((e=>s(e.node_id)));let i=e=>{let t=l(e.source_node_id,e.target_node_id);return null==a[t]},o=e=>console.error(`link (source: ${e.source_node_id}, target: ${e.target_node_id}) removed for circular links`),r=h(e.links,i,o),c=e=>console.error(`node ${e.node_id} removed for circular links`);return{nodes:f({nodes:e.nodes,links:r},c),links:r}}(t);return function(e){let t={},n={};e.nodes.forEach((e=>t[e.node_id]=e));let a=e=>`${e.source_node_id}_${e.label}`;e.links.forEach((e=>{let l=a(e),s=n[l];null==s&&(s={id:l,label:e.label,link:e.optional_info.link,node_links:[]},n[l]=s),s.node_links.push({source:t[e.source_node_id],target:t[e.target_node_id],value:e.value})}));let l=e.nodes.map((e=>e)),s=[];for(let e in n){let t=n[e],a={node_id:t.id,label:t.label,link:t.link};l.push(a),t.node_links.forEach((e=>{s.push({source_node_id:e.source.node_id,target_node_id:a.node_id,label:`${e.source.label} - ${e.target.label}: ${a.label}`,value:e.value}),s.push({source_node_id:a.node_id,target_node_id:e.target.node_id,label:`${e.source.label} - ${e.target.label}: ${a.label}`,value:e.value})}))}let i=l.map(((e,t)=>({index:t,label:e.label,data:e}))),o={};i.forEach(((e,t)=>o[e.data.node_id]=e));let r=s.map((e=>({source:o[e.source_node_id].index,target:o[e.target_node_id].index,value:e.value,label:e.label})));return{nodes:i,links:r}}(t)}();r.value=e}()};function f(e,t){let n={},a={};e.links.forEach((e=>{n[e.source_node_id]=!0,a[e.target_node_id]=!0}));let l=h(e.nodes,(e=>1==n[e.node_id]||1==a[e.node_id]),t);return l}function h(e,t,n){return e.filter((e=>{const a=t(e);return 0==a&&null!=n&&n(e),a}))}function m(){o.value=$(s.value).height()-100}function g(){i.value=$(s.value).width()-10}return(t,c)=>(As(),Ms("div",bw,[zs("div",yw,[zs("div",ww,[Ks(' <div class="overlay justify-content-center align-items-center position-absolute h-100 w-100"> '),Ks(' <div class="text-center"> '),Ks('   <div class="spinner-border text-primary mt-5" role="status"> '),Ks('     <span class="sr-only position-absolute">Loading...</span> '),Ks("   </div> "),Ks(" </div> "),Ks(" </div> "),zs("div",xw,[zs("div",{class:"align-items-center justify-content-end mb-2",style:{height:"70vh"},ref_key:"body_div",ref:s},[zs("div",kw,[(As(!0),Ms(xs,null,Cl(e.available_filters,((e,t,l)=>(As(),Ms("div",$w,[e.length>0?(As(),Ms("div",Sw,[zs("label",Cw,Z(a("ports_analysis."+t))+": ",1),Bs(jd,{selected_option:n[t],"onUpdate:selected_option":e=>n[t]=e,options:e,onSelect_option:p},null,8,["selected_option","onUpdate:selected_option","options"])])):Ks("v-if",!0)])))),256))]),Bs(ey,{width:i.value,height:o.value,no_data_message:vn(l),onUpdate_width:g,onUpdate_height:m,onNode_click:d,sankey_data:r.value},null,8,["width","height","no_data_message","sankey_data"])],512)])])])]))},__file:"http_src/vue/page-vlan-ports-sankey.vue"},Aw={components:{modal:_p,"select-search":jd},props:{id:String,filters_options:Array},updated(){},data(){return{i18n:e=>i18n(e),jQuery:$,id_modal:`${this.$props.id}_modal`,filter_type_selected:[],filter_type_label_selected:null,operator_selected:[],option_selected:[],input_value:null,data_pattern_selected:null,input_required:!1,options_to_show:null,operators_to_show:[]}},emits:["apply"],created(){},async mounted(){await ntopng_sync.on_ready(this.id_modal),ntopng_events_manager.on_custom_event(this.$props.id,ntopng_custom_events.SHOW_MODAL_FILTERS,(e=>this.show(e))),ntopng_sync.ready(this.$props.id)},methods:{show:function(e){null!=this.$props.filters_options&&0!=this.$props.filters_options.length&&(null!=e?(this.filter_type_selected=e,this.change_filter(e)):(this.filter_type_selected=this.$props.filters_options[0],this.change_filter()),this.$refs.modal.show())},post_change:function(e){e.id&&this.$props.filters_options&&(this.filter_type_selected=this.$props.filters_options.find((t=>t.id==e.id))),e.value&&(this.options_to_show?this.option_selected=this.options_to_show.find((t=>t.value==e.value)):(this.option_selected=[],this.input_value=e.value,this.data_pattern_selected=this.get_data_pattern(e.value_type))),e.operator&&this.operators_to_show&&(this.operator_selected=this.operators_to_show.find((t=>t.id==e.operator)))},change_operator_type:function(e){e!=[]&&(this.operator_selected=e)},change_data_filter:function(e){e!=[]&&(this.option_selected=e)},change_filter:function(e){this.options_to_show=null,this.option_selected=null,this.input_value=null;let t=this.$props.filters_options.find((e=>e.id==this.filter_type_selected.id));null!=t&&(this.operators_to_show=t.operators,this.filter_type_label_selected=t.label,null!=t.options?(this.options_to_show=t.options.sort(((e,t)=>null==e||null==e.label?-1:null==t||null==t.label?1:e.label.toString().localeCompare(t.label.toString()))),this.option_selected||(this.option_selected=this.options_to_show[0])):(this.options_to_show=null,this.data_pattern_selected=this.get_data_pattern(t.value_type)),t.operators&&0==this.operator_selected.length&&(this.operator_selected=t.operators[0]),null!=e&&this.post_change(e))},get_data_pattern:function(e){if(this.input_required=!0,"text"==e)return this.input_required=!1,".*";if("ip"==e){let e=NtopUtils.REGEXES.ipv4,t=e.replace("$","@[0-9]{0,5}$"),n=NtopUtils.REGEXES.ipv6,a=n.replaceAll("$","@[0-9]{0,5}$");return`(${e})|(${t})|(${n})|(${a})`}return NtopUtils.REGEXES[e]},check_disable_apply:function(){let e=new RegExp(this.data_pattern_selected);return!this.options_to_show&&(this.input_required&&(null==this.input_value||""==this.input_value)||0==e.test(this.input_value))},apply:function(){let e=this.input_value,t=this.input_value;if(null==e||null!=this.option_selected&&0!=this.option_selected.length){let n=this.filters_options.find((e=>e.id==this.filter_type_selected.id)),a=n.options.find((e=>e.value==this.option_selected.value));e=a.value,t=a.value_label||a.label}else null==e&&(e="");let n={id:this.filter_type_selected.id,label:this.filter_type_label_selected,operator:this.operator_selected.id,value:e,value_label:t};this.$emit("apply",n),ntopng_events_manager.emit_custom_event(ntopng_custom_events.MODAL_FILTERS_APPLY,n),this.close()},close:function(){this.$refs.modal.close()}}};const Ew=e=>(da("data-v-3119c83e"),e=e(),pa(),e),Tw={autocomplete:"off"},Pw={class:"form-group row"},Iw=Ew((()=>zs("label",{class:"col-form-label col-sm-3",for:"dt-filter-type-select"},[zs("b",null,"Filter")],-1))),Mw={class:"col-sm-8"},Ow=Ew((()=>zs("hr",null,null,-1))),Uw={class:"dt-filter-template-container form-group row"},Fw={class:"col-form-label col-sm-3"},jw={class:"col-sm-8"},Lw={class:"input-group mb-3"},Rw={class:"input-group-prepend col-sm-3"},Dw={key:0,class:"col-sm-9"},zw=["pattern","required"],Bw={style:{margin:"0px",padding:"0"},class:"alert invalid-feedback"},Vw=["disabled"];pp("\ninput ~ .alert[data-v-3119c83e] {\n  display: none;\n}\ninput:invalid ~ .alert[data-v-3119c83e] {\n  display: block;\n}\n"),Aw.render=function(e,t,n,a,l,s){const i=yl("select-search"),o=yl("modal");return As(),Os(o,{id:l.id_modal,ref:"modal"},{title:fa((()=>[Hs(Z(l.i18n("alerts_dashboard.add_filter")),1)])),body:fa((()=>[zs("form",Tw,[zs("div",Pw,[Iw,zs("div",Mw,[Bs(i,{selected_option:l.filter_type_selected,"onUpdate:selected_option":t[0]||(t[0]=e=>l.filter_type_selected=e),id:"filter_type",options:n.filters_options,onSelect_option:t[1]||(t[1]=e=>s.change_filter())},null,8,["selected_option","options"])])]),Ow,zs("div",Uw,[zs("label",Fw,[zs("b",null,Z(l.filter_type_label_selected),1)]),zs("div",jw,[zs("div",Lw,[zs("div",Rw,[Bs(i,{selected_option:l.operator_selected,"onUpdate:selected_option":t[2]||(t[2]=e=>l.operator_selected=e),id:"operator_filter",options:l.operators_to_show,onSelect_option:s.change_operator_type},null,8,["selected_option","options","onSelect_option"])]),l.options_to_show?(As(),Ms("div",Dw,[Bs(i,{selected_option:l.option_selected,"onUpdate:selected_option":t[3]||(t[3]=e=>l.option_selected=e),id:"data_filter",options:l.options_to_show,onSelect_option:s.change_data_filter},null,8,["selected_option","options","onSelect_option"])])):(As(),Ms(xs,{key:1},[vl(zs("input",{"onUpdate:modelValue":t[4]||(t[4]=e=>l.input_value=e),pattern:l.data_pattern_selected,name:"value",required:l.input_required,type:"text",class:"form-control"},null,8,zw),[[Io,l.input_value]]),zs("span",Bw,Z(l.i18n("invalid_value")),1)],64))]),Ks(" end div input-group mb-3 ")]),Ks(" end div form-group-row ")])])])),footer:fa((()=>[zs("button",{type:"button",disabled:s.check_disable_apply(),onClick:t[5]||(t[5]=(...e)=>s.apply&&s.apply(...e)),class:"btn btn-primary"},Z(l.i18n("apply")),9,Vw)])),_:1},8,["id"])},Aw.__scopeId="data-v-3119c83e",Aw.__file="http_src/vue/modal-filters.vue";let qw,Hw,Gw=[];let Kw,Ww,Jw=null!=window.location.toString().match(/alert_stats.lua/),Yw={value:ntopng_url_manager.get_url_entry("query_preset"),count:ntopng_url_manager.get_url_entry("count")};null==Yw.value&&(Yw.value="");let Xw=ntopng_url_manager.get_url_entry("status");null!=Xw&&""!=Xw||(Xw="historical");const Zw=!Jw;let Qw=function(e){let t=ntopng_url_manager.get_url_entry("page");return null==t&&(t=e?"all":"overview"),t}(Jw);const ex=async function(){Gw=await async function(e,t){let n;if(e)n=`${base_path}/lua/rest/v2/get/alert/filter/consts.lua?page=${t}`;else{let e=ntopng_url_manager.get_url_entry("query_preset");null==e&&(e=""),n=`${base_path}/lua/pro/rest/v2/get/db/filter/consts.lua?page=${t}&query_preset=${e}`}return await ntopng_utility.http_request(n)}(Jw,Qw),Gw.filter((e=>null==e.label)).forEach((e=>{console.error(`label not defined for filter ${JSON.stringify(e)}`),e.label=""})),Gw.sort(((e,t)=>e.label.localeCompare(t.label))),i18n_ext.tags={},qw={},Hw={},Gw.forEach((e=>{i18n_ext.tags[e.id]=e.label,e.operators.forEach((e=>qw[e.id]=e.label)),Hw[e.id]=e.operators.map((e=>e.id))}));let e=ntopng_url_manager.get_url_entries(),t=[];for(const[n,a]of e){let e=Gw.find((e=>e.id==n));if(null!=e){a.split(",").forEach((n=>{let[a,l]=n.split(";");null==l||null==a||""==l||null!=e.options&&null==e.options.find((e=>e.value==a))||t.push({id:e.id,operator:l,value:a})}))}}return t};var tx={props:{id:String},components:{"data-time-range-picker":Ld,"modal-filters":Aw},created(){},async mounted(){let e=ntopng_sync.on_ready(this.id_data_time_range_picker);if(ntopng_sync.on_ready(this.id_modal_filters),await e,this.enable_query_presets&&await async function(e){let t=e.page,n=`${base_path}/lua/pro/rest/v2/get/db/preset/consts.lua?page=${t}`,a=await ntopng_utility.http_request(n),l=a[0].list.map((e=>({value:e.id,name:e.name,count:e.count,builtin:!0})));if(a.length>1&&a[1].list.forEach((e=>{let t={value:e.id,name:e.name,count:e.count};l.push(t)})),null==e.query_preset||""==e.query_preset.value)e.query_preset=l[0];else{let t=l.find((t=>t.value==e.query_preset.value));e.query_preset=t}return ntopng_url_manager.set_key_to_url("query_preset",e.query_preset.value),ntopng_url_manager.set_key_to_url("count",e.query_preset.count),e.query_presets=l,a}(this),"all"!=this.page){let e=await ex();Ww=function(e){const t=new Tagify(e.$refs.tagify,{duplicates:!0,delimiters:null,dropdown:{enabled:1,classname:"extra-properties"},autoComplete:{enabled:!1},templates:{tag:function(e){try{return`<tag title='${e.value}' contenteditable='false' spellcheck="false" class='tagify__tag ${e.class?e.class:""}' ${this.getAttributes(e)}>\n                        <x title='remove tag' class='tagify__tag__removeBtn'></x>\n                        <div>\n                            ${e.label?`<b>${e.label}</b>&nbsp;`:""}\n                            <b class='operator'>${e.selectedOperator?qw[e.selectedOperator]:"="}</b>&nbsp;\n                            <span class='tagify__tag-text'>${e.value}</span>\n                        </div>\n                    </tag>`}catch(e){console.error(`An error occured when creating a new tag: ${e}`)}}},validate:function(e){return void 0!==e.key&&void 0!==e.selectedOperator&&void 0!==e.value}});$(document).ready((function(){t.addTags(Kw)}));const n=async function(e){"number"==typeof e.realValue&&(e.realValue=""+e.realValue),"number"==typeof e.value&&(e.value=""+e.value);let n=t.getTagElms().find((t=>t.getAttribute("key")===e.key&&t.getAttribute("realValue")===e.realValue));void 0===t.tagData(n)&&(Hw[e.key]&&!Array.isArray(Hw[e.key])&&(e.operators=Hw[e.key].operators),e.selectedOperator||(e.selectedOperator="eq"),t.addTags([e]))};return t.on("remove",(async function(e){const t=e.detail.data.key,n=e.detail.data.realValue,a=ntopng_status_manager.get_status();if(void 0===t)return;if(null==a.filters)return;const l=a.filters.filter((e=>e.id!=t||e.id==t&&e.value!=n));ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:l})})),t.on("add",(async function(e){const n=e.detail;if(void 0===n.data)return;return n.data.key?void 0:(t.removeTags([e.detail.tag]),e.preventDefault(),void e.stopPropagation())})),t.on("click",(async function(t){const n=t.detail;if(void 0===n.data)return;if(void 0===n.data.key)return;const a=n.data;e.edit_tag=a,ntopng_events_manager.emit_custom_event(ntopng_custom_events.SHOW_MODAL_FILTERS,{id:a.key,operator:a.selectedOperator,value:a.realValue})})),t.on("edit:updated",(async function(e){console.warn("UPDATED")})),$("tags").on("change","select.operator",(async function(e){console.warn("TAGS change")})),{tagify:t,addFilterTag:n}}(this),ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:e}),ntopng_events_manager.on_event_change(this.$props.id,ntopng_events.FILTERS_CHANGE,(e=>this.reload_status(e)),!0)}this.modal_data=Gw,ntopng_sync.ready(this.$props.id)},data(){return{i18n:i18n,id_modal_filters:`${this.$props.id}_modal_filters`,id_data_time_range_picker:`${this.$props.id}_data-time-range-picker`,show_filters:!1,edit_tag:null,is_alert_stats_url:Jw,query_presets:[],query_preset:Yw,status_view:Xw,enable_query_presets:Zw,page:Qw,modal_data:[],last_filters:[]}},methods:{is_filter_defined:function(e){return null!=Hw[e.id]},update_status_view:function(e){ntopng_url_manager.set_key_to_url("status",e),ntopng_url_manager.reload_url()},update_select_query_presets:function(){ntopng_url_manager.get_url_params(),ntopng_url_manager.set_key_to_url("query_preset",this.query_preset.value),ntopng_url_manager.set_key_to_url("count",this.query_preset.count),ntopng_url_manager.reload_url()},show_modal_filters:function(){this.$refs.modal_filters.show()},remove_filters:function(){ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:[]})},reload_status:function(e){let t=e.filters;if(null==t)return;ntopng_url_manager.delete_params(Gw.map((e=>e.id))),Ww.tagify.removeAllTags();let n=function(e){if(null==e)return{};let t={};e.forEach((e=>{let n=t[e.id];null==n&&(n=[],t[e.id]=n),n.push(e)}));let n={};for(let e in t){let a=t[e].filter((e=>null!=e.value&&null!=e.operator&&""!=e.operator)).map((e=>`${e.value};${e.operator}`)).join(",");n[e]=a}return n}(t);ntopng_url_manager.add_obj_to_url(n),t.forEach((e=>{let t=function(e){let t=Gw.find((t=>t.id==e.id));null==t&&console.error("create_tag_from_filter: filter const not found;");let n=e.value;if(null!=t.options){let a=t.options.find((t=>t.value==e.value));null!=a&&(n=a.label)}const a={label:t.label,key:t.id,value:n,realValue:e.value,title:`${t.label}${e.operator}${n}`,selectedOperator:e.operator};return""==a.value&&(a.value="''"),null==a.realValue||null==a.selectedOperator||""==a.selectedOperator?null:a}(e);null!=t&&Ww.addFilterTag(t)})),this.last_filters=t},apply_modal:function(e){let t=ntopng_status_manager.get_status().filters;null==t&&(t=[]),null!=this.edit_tag&&(t=t.filter((e=>e.id!=this.edit_tag.key||e.value!=this.edit_tag.realValue)),this.edit_tag=null),t.push(e),ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:t})}}};const nx=e=>(da("data-v-aaee59ea"),e=e(),pa(),e),ax={style:{width:"100%"}},lx={class:"mb-1"},sx={key:0,class:"d-flex align-items-center me-2"},ix={class:"btn-group",id:"statusSwitch",role:"group"},ox=["value"],rx=["label"],cx=["value"],ux={key:0,class:"d-flex mt-1",style:{width:"100%"}},dx=["placeholder"],px=[nx((()=>zs("span",null,[zs("i",{class:"fas fa-plus","data-original-title":"",title:"Add Filter"})],-1)))],_x=[nx((()=>zs("i",{class:"fas fa-times"},null,-1)))];pp("\n.tagify__input[data-v-aaee59ea] {\n  min-width: 175px;\n}\n.tagify__tag[data-v-aaee59ea] {\n  white-space: nowrap;\n  margin: 3px 0px 5px 5px;\n}\n.tagify__tag select.operator[data-v-aaee59ea] {\n  margin: 0px 4px;\n  border: 1px solid #c4c4c4;\n  border-radius: 4px;\n}\n.tagify__tag b.operator[data-v-aaee59ea] {\n  margin: 0px 4px;\n  background-color: white;\n  border: 1px solid #c4c4c4;\n  border-radius: 4px;\n  padding: 0.05em 0.2em;\n}\n.tagify__tag > div[data-v-aaee59ea] {\n  display: flex;\n  align-items: center;\n}\n"),tx.render=function(e,t,n,a,l,s){const i=yl("modal-filters"),o=yl("data-time-range-picker");return As(),Ms("div",ax,[zs("div",lx,[Bs(i,{filters_options:l.modal_data,onApply:s.apply_modal,ref:"modal_filters",id:l.id_modal_filters},null,8,["filters_options","onApply","id"]),Bs(o,{id:l.id_data_time_range_picker},{begin:fa((()=>[l.is_alert_stats_url?(As(),Ms("div",sx,[zs("div",ix,[zs("a",{href:"#",onClick:t[0]||(t[0]=e=>s.update_status_view("historical")),class:H(["btn btn-sm",{active:"historical"==l.status_view,"btn-seconday":"historical"!=l.status_view,"btn-primary":"historical"==l.status_view}])},"Past",2),zs("a",{href:"#",onClick:t[1]||(t[1]=e=>s.update_status_view("acknowledged")),class:H(["btn btn-sm",{active:"acknowledged"==l.status_view,"btn-seconday":"acknowledged"!=l.status_view,"btn-primary":"acknowledged"==l.status_view}])},"Ack",2),"flow"!=l.page?(As(),Ms("a",{key:0,href:"#",onClick:t[2]||(t[2]=e=>s.update_status_view("engaged")),class:H(["btn btn-sm",{active:"engaged"==l.status_view,"btn-seconday":"engaged"!=l.status_view,"btn-primary":"engaged"==l.status_view}])},"Engaged",2)):Ks("v-if",!0)])])):Ks("v-if",!0),l.enable_query_presets?vl((As(),Ms("select",{key:1,class:"me-2 form-select","onUpdate:modelValue":t[3]||(t[3]=e=>l.query_preset=e),onChange:t[4]||(t[4]=e=>s.update_select_query_presets())},[(As(!0),Ms(xs,null,Cl(l.query_presets,(e=>(As(),Ms(xs,null,[1==e.builtin?(As(),Ms("option",{key:0,value:e},Z(e.name),9,ox)):Ks("v-if",!0)],64)))),256)),"analysis"!=l.page?(As(),Ms("optgroup",{key:0,label:l.i18n("queries.queries")},[(As(!0),Ms(xs,null,Cl(l.query_presets,(e=>(As(),Ms(xs,null,[e.builtin?Ks("v-if",!0):(As(),Ms("option",{key:0,value:e},Z(e.name),9,cx))],64)))),256))],8,rx)):Ks("v-if",!0)],544)),[[Fo,l.query_preset]]):Ks("v-if",!0)])),extra_buttons:fa((()=>[Al(e.$slots,"extra_range_buttons")])),_:3},8,["id"])]),Ks(" tagify "),"all"!=l.page?(As(),Ms("div",ux,[zs("input",{class:"w-100 form-control h-auto",name:"tags",ref:"tagify",placeholder:l.i18n("show_alerts.filters")},null,8,dx),vl(zs("button",{class:"btn btn-link","aria-controls":"flow-alerts-table",type:"button",id:"btn-add-alert-filter",onClick:t[5]||(t[5]=(...e)=>s.show_modal_filters&&s.show_modal_filters(...e))},px,512),[[Ko,l.modal_data&&l.modal_data.length>0]]),vl(zs("button",{"data-bs-toggle":"tooltip","data-placement":"bottom",title:"{{ i18n('show_alerts.remove_filters') }}",onClick:t[6]||(t[6]=(...e)=>s.remove_filters&&s.remove_filters(...e)),class:"btn ms-1 my-auto btn-sm btn-remove-tags"},_x,512),[[Ko,l.modal_data&&l.modal_data.length>0]])])):Ks("v-if",!0),Ks(" end tagify ")])},tx.__scopeId="data-v-aaee59ea",tx.__file="http_src/vue/range-picker.vue";var fx={components:{},props:{chart_options:Object},watch:{chart_options:function(e,t){this.reloaded_table()}},emits:[],created(){},data:()=>({total:0,percentile_sent:0,percentile_rcvd:0,avg_sent:0,avg_rcvd:0,max_sent:0,max_rcvd:0}),async mounted(){console.log("Mounted Simple table")},methods:{reloaded_table:function(){let e=ntopChartApex.chartOptionsUtility.getApexYFormatter(ntopChartApex.chartOptionsUtility.apexYFormatterTypes.bps.id),t=ntopChartApex.chartOptionsUtility.getApexYFormatter(ntopChartApex.chartOptionsUtility.apexYFormatterTypes.bytes.id);console.log("reloaded table called"),console.log(this.chart_options.statistics.by_serie),console.log("OBJECT KEYS");let n=this.chart_options.statistics.total,a=this.chart_options.statistics.by_serie[0].max_val,l=this.chart_options.statistics.by_serie[1].max_val,s=this.chart_options.statistics.by_serie[0].average,i=this.chart_options.statistics.by_serie[1].average,o=this.chart_options.statistics.by_serie[0]["95th_percentile"],r=this.chart_options.statistics.by_serie[1]["95th_percentile"];this.max_sent=e(8*a),this.max_rcvd=e(8*l),this.avg_sent=e(8*s),this.avg_rcvd=e(8*i),this.percentile_sent=e(8*o),this.percentile_rcvd=e(8*r),this.total=t(n)}}};const hx={class:"table table-borderless graph-statistics mb-2",style:{}},mx=zs("thead",{class:"text-center"},[zs("tr",null,[zs("th",{class:"graph-val-total-title fs-6",style:{"border-left-width":"1px","border-top-width":"1px"}}," Total:"),zs("th",{class:"graph-val-95percentile-title fs-6",style:{"border-left-width":"1px","border-top-width":"1px"}},[Hs("95th "),zs("a",{href:"https://en.wikipedia.org/wiki/Percentile"},"Percentile"),Hs(":")]),zs("th",{class:"graph-val-average-title fs-6",style:{"border-left-width":"1px","border-top-width":"1px"}},"Average:"),zs("th",{class:"graph-val-max-title fs-6",style:{"border-left-width":"1px","border-top-width":"1px","border-right-width":"1px"}},"Max:")])],-1),gx={class:"graph-val-total text-center",style:{"border-width":"1px"}},vx={class:"graph-val-95percentile text-center",style:{"border-top-width":"1px","border-right-width":"1px","border-bottom-width":"1px"}},bx=zs("br",null,null,-1),yx={class:"graph-val-average text-center",style:{"border-top-width":"1px","border-right-width":"1px","border-bottom-width":"1px"}},wx=zs("br",null,null,-1),xx={class:"graph-val-max text-center",style:{"border-bottom-width":"1px","border-top-width":"1px","border-right-width":"1px"}},kx=zs("br",null,null,-1);fx.render=function(e,t,n,a,l,s){return As(),Ms("div",null,[zs("table",hx,[mx,zs("tbody",null,[zs("tr",null,[zs("td",gx,[zs("span",null,Z(l.total),1)]),zs("td",vx,[zs("span",null,[Hs(Z(l.percentile_sent)+" [Sent]",1),bx,Hs(Z(l.percentile_rcvd)+" [Rcvd]",1)])]),zs("td",yx,[zs("span",null,[Hs(Z(l.avg_sent)+" Kbit/s [Sent]",1),wx,Hs(Z(l.avg_rcvd)+" [Rcvd]",1)])]),Ks(' <td class="graph-val-min" style="display:none;border-bottom-width: 1px;border-top-width: 1px;border-right-width: 1px;">nil: <span></span></td> '),zs("td",xx,[zs("span",null,[Hs(Z(l.max_sent)+" [Sent]",1),kx,Hs(Z(l.max_rcvd)+" [Rcvd]",1)])])])])])])},fx.__file="http_src/vue/simple-table.vue";const $x={key:0,class:"alert alert-info",id:"empty-message"},Sx=["id"];var Cx={__name:"sankey",props:{id:String,page_csrf:String,url:String,url_params:Array,extra_settings:Object},setup(e,{expose:t}){const n=e,a=_n(!1);const l=e=>i18n(e);return cl((()=>{})),t({updateData:async function(e){NtopUtils.showOverlays();const t=function(){let e={};return n.url_params.forEach((t=>{e[t]=ntopng_url_manager.get_url_entry(t)})),NtopUtils.buildURL(n.url,e)}();await $.get(t,(function(e,t){const l=e.rsp;if(l.length>0){let e=function(e){let t={...ly.getDefaultSankeySettings(),...n.extra_settings};const a=d3v7.map(e,t.linkSource).map(A),l=d3v7.map(e,t.linkTarget).map(A),s=d3v7.map(e,t.linkSourceNode).map(A),i=d3v7.map(e,t.linkTargetNode).map(A),o=d3v7.map(e,t.linkLink).map(A),r=d3v7.map(e,t.linkValue),c=d3v7.map(e,t.linkColor),u=d3v7.map(e,t.sourceColor),d=d3v7.map(e,t.targetColor),p=d3v7.map(e,t.sourceLink),_=d3v7.map(e,t.targetLink);let f=e,h=Array.from(d3v7.union(a,l),(e=>({id:e})));const m=d3v7.map(h,t.nodeId).map(A);t.nodeGroups=d3v7.map(h,t.nodeGroup).map(A),h=d3v7.map(h,((e,t)=>({id:m[t]}))),f=d3v7.map(f,((e,t)=>({source:a[t],target:l[t],value:r[t],source_node:s[t],target_node:i[t],link:o[t],color:c[t],source_color:u[t],target_color:d[t],source_link:p[t],target_link:_[t]})));const g=d3v7.scaleOrdinal(t.nodeGroups,t.colors),v=d3v7.map(h,t.nodeLabel),b=d3v7.map(h,t.nodeTitle),y=d3v7.map(f,t.linkTitle);let w=d3v7.sankey().nodeId((({index:e})=>m[e])).nodeAlign(t.nodeAlign).nodeWidth(t.nodeWidth).nodePadding(t.nodePadding).extent([[t.marginLeft,t.marginTop],[t.width-t.marginRight,t.height-t.marginBottom]])({nodes:h,links:f});const x=d3v7.create("svg").attr("viewBox",[0,0,t.width,t.height]).attr("style","max-width: 100%; height: 60vh; height: intrinsic;");let k,$;const S=t.width,C=x.append("g").attr("fill","none").attr("stroke-opacity",t.linkStrokeOpacity).selectAll("g").data(f).join("g").style("mix-blend-mode",t.linkMixBlendMode).append("path").attr("d",t.linkPath).attr("stroke",(({color:e})=>e)).attr("stroke-width",(({width:e})=>Math.max(1,e))).call(y?e=>e.append("title").text((({index:e})=>y[e])):()=>{}),N=d3v7.drag().on("start",(function(e,t){const n=d3v7.select(this);k=n.attr("x")-e.x,$=n.attr("y")-e.y})).on("drag",(function(e,t){d3v7.select(this).attr("x",e.x+k).attr("y",e.y+$),w=d3v7.sankey().update(w),C.selectAll("path").data(w.links,(function(e){return e}))}));function A(e){return null!==e&&"object"==typeof e?e.valueOf():e}return x.append("g").attr("stroke",t.nodeStroke).attr("stroke-width",t.nodeStrokeWidth).attr("stroke-opacity",t.nodeStrokeOpacity).attr("stroke-linejoin",t.nodeStrokeLinejoin).selectAll("rect").data(h).join("rect").call(N).on("dblclick",(function(e){const t=(e=e.currentTarget.__data__).sourceLinks,n=e.targetLinks,a=t&&t[0]?t[0]:n[0];a&&(a.source.id===e.id?a.source_link&&""!==a.source_link&&window.open(a.source_link,"_blank"):a.target.id===e.id&&a.target_link&&""!==a.target_link&&window.open(a.target_link,"_blank"))})).attr("x",(e=>e.x0)).attr("y",(e=>e.y0)).attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("cursor","pointer").attr("fill",(e=>{const n=e.sourceLinks;let a=g(t.nodeGroups[e.index]);return n&&n[0]&&(n[0].source.id===e.id?a=n[0].source_color&&""!==n[0].source_color?n[0].source_color:a:n[0].target.id===e.id&&(a=n[0].target_color&&""!==n[0].target_color?n[0].target_color:a)),a})).append("title").text((({index:e})=>b[e])),x.append("g").attr("font-family","sans-serif").attr("font-size",10).selectAll("text").data(h).join("text").attr("x",(e=>e.x0<S/2?e.x1+t.nodeLabelPadding:e.x0-t.nodeLabelPadding)).attr("y",(e=>(e.y1+e.y0)/2)).attr("dy","0.35em").attr("text-anchor",(e=>e.x0<t.width/2?"start":"end")).text((({index:e})=>v[e])),Object.assign(x.node(),{scales:{color:g}})}(l);a.value=!1,$(`#${n.id}`).empty(),$(`#${n.id}`).append(e)}else $(`#${n.id}`).empty(),a.value=!0})),NtopUtils.hideOverlays()}}),(t,n)=>(As(),Ms(xs,null,[a.value?(As(),Ms("div",$x,Z(l("flows_page.no_data")),1)):Ks("v-if",!0),zs("div",{class:"d-flex justify-content-center align-items-center",id:e.id},null,8,Sx)],64))},__file:"http_src/vue/sankey.vue"};const Nx=e=>(da("data-v-7e5acce0"),e=e(),pa(),e),Ax={class:"mb-3 row"},Ex={class:"col-form-label col-sm-4"},Tx={class:"col-sm-6"},Px={class:"btn-group btn-group-toggle","data-bs-toggle":"buttons"},Ix=Nx((()=>zs("hr",null,null,-1))),Mx={class:"host-alert-fields"},Ox={class:"mb-3 row"},Ux={class:"col-form-label col-sm-4"},Fx={class:"col-sm-6"},jx={value:""},Lx={value:"0"},Rx={disabled:""},Dx=["value"],zx={class:"flow-alert-fields"},Bx={class:"mb-3 row"},Vx={class:"col-form-label col-sm-4"},qx={class:"col-sm-6"},Hx={value:""},Gx={value:"0"},Kx={disabled:""},Wx=["value"],Jx={key:0,class:"ip-fields"},Yx={class:"mb-3 row"},Xx={class:"col-form-label col-sm-4"},Zx={class:"col-sm-6"},Qx=["pattern"],ek={key:1,class:"network-fields"},tk={class:"mb-3 row"},nk={class:"col-form-label col-sm-4"},ak={class:"col-sm-4 pr-0"},lk=["pattern"],sk={class:"col-sm-2 ps-4 pe-0"},ik=Nx((()=>zs("span",{class:"me-2"},"/",-1))),ok={class:"mb-3 row"},rk={class:"col-form-label col-sm-4"},ck={class:"col-sm-6"},uk={class:"mb-3 row"},dk={class:"col-form-label col-sm-4"},pk={key:0},_k={key:1},fk={class:"col-sm-6"},hk=["pattern"],mk=["pattern"],gk=["disabled"];var vk={__name:"modal-add-check-exclusion",props:{alert_exclusions_page:String,host_alert_types:Array,flow_alert_types:Array},emits:["add"],setup(e,{expose:t,emit:n}){const a=e,l=_n(null),s=_n("ip"),i=_n(""),o=_n(""),r=_n(0),c=_n(""),u=_n(""),d=_n(""),p=_n("");function _(e){if("text"==e)return NtopUtils.REGEXES.non_quoted_text;if("ip"==e){let e=NtopUtils.REGEXES.ipv4,t=e.replace("$","@[0-9]{0,5}$"),n=NtopUtils.REGEXES.ipv6,a=n.replaceAll("$","@[0-9]{0,5}$");return`(${e})|(${t})|(${n})|(${a})`}return"hostname"==e?`${NtopUtils.REGEXES.singleword}|[a-zA-Z0-9._-]{3,250}@[0-9]{0,5}$`:"certificate"==e?NtopUtils.REGEXES.tls_certificate:NtopUtils.REGEXES[e]}let f=_("ip"),h=_("text"),m=_("certificate");const g=e=>{s.value=e},v=()=>{let e=null,t=!0;return"hosts"==a.alert_exclusions_page?(e=new RegExp(f),t="ip"==s.value?null==i.value||""==i.value||0==e.test(i.value)||""==u.value&&""==d.value:null==o.value||""==o.value||0==e.test(o.value)||""==u.value&&""==d.value||null==p.value||""==p.value||parseInt(p.value)<1||parseInt(p.value)>127):"domain_names"==a.alert_exclusions_page?(e=new RegExp(h),t=null==c.value||""==c.value||0==e.test(c.value)):"tls_certificate"==a.alert_exclusions_page&&(e=new RegExp(m),t=null==c.value||""==c.value||0==e.test(c.value)),t},b=()=>{l.value.close()},y=()=>{let e,t=i.value;"hosts"==a.alert_exclusions_page?("network"==s.value&&(t=`${o.value}/${p.value}`),null!=r.value&&0!=r.value&&(t=`${t}@${r.value}`),e={alert_addr:t,host_alert_key:u.value,flow_alert_key:d.value}):"domain_names"==a.alert_exclusions_page?e={alert_domain:c.value}:"tls_certificate"==a.alert_exclusions_page&&(e={alert_certificate:c.value}),n("add",e),b()};t({show:()=>{s.value="ip",i.value="",o.value="",r.value=0,u.value="",d.value="",p.value="",c.value="",l.value.show()},close:b}),cl((()=>{}));const w=e=>i18n(e);return(t,n)=>(As(),Os(_p,{onShowed:n[10]||(n[10]=e=>{}),ref_key:"modal_id",ref:l},{title:fa((()=>[Hs(Z(w("check_exclusion.add_exclusion")),1)])),body:fa((()=>["hosts"==e.alert_exclusions_page?(As(),Ms(xs,{key:0},[Ks(" modal hosts "),zs("div",Ax,[zs("label",Ex,[zs("b",null,Z(w("check_exclusion.member_type")),1)]),zs("div",Tx,[zs("div",Px,[zs("label",{class:H([{active:"ip"==s.value},"btn btn-secondary"])},[zs("input",{class:"btn-check",type:"radio",name:"member_type",value:"ip",onClick:n[0]||(n[0]=e=>g("ip"))}),Hs(" "+Z(w("check_exclusion.ip_address")),1)],2),zs("label",{class:H([{active:"network"==s.value},"btn btn-secondary"])},[zs("input",{onClick:n[1]||(n[1]=e=>g("network")),class:"btn-check",type:"radio",name:"member_type",value:"network"}),Hs(" "+Z(w("check_exclusion.network")),1)],2)])])]),Ix,zs("div",Mx,[zs("div",Ox,[zs("label",Ux,[zs("b",null,Z(w("check_exclusion.host_alert_type")),1)]),zs("div",Fx,[vl(zs("select",{name:"value",class:"form-select alert-select","onUpdate:modelValue":n[2]||(n[2]=e=>u.value=e)},[zs("option",jx,Z(w("check_exclusion.none")),1),zs("option",Lx,Z(w("check_exclusion.exclude_all_alerts")),1),zs("option",Rx,Z(w("check_exclusion.spacing_bar")),1),(As(!0),Ms(xs,null,Cl(e.host_alert_types,(e=>(As(),Ms(xs,null,[null!=e?(As(),Ms("option",{key:0,value:e.alert_id},Z(e.label),9,Dx)):Ks("v-if",!0)],64)))),256))],512),[[Fo,u.value]])])])]),zs("div",zx,[zs("div",Bx,[zs("label",Vx,[zs("b",null,Z(w("check_exclusion.flow_alert_type")),1)]),zs("div",qx,[vl(zs("select",{id:"flow-alert-select",name:"value",class:"form-select alert-select","onUpdate:modelValue":n[3]||(n[3]=e=>d.value=e)},[zs("option",Hx,Z(w("check_exclusion.none")),1),zs("option",Gx,Z(w("check_exclusion.exclude_all_alerts")),1),zs("option",Kx,Z(w("check_exclusion.spacing_bar")),1),(As(!0),Ms(xs,null,Cl(e.flow_alert_types,(e=>(As(),Ms(xs,null,[null!=e?(As(),Ms("option",{key:0,value:e.alert_id},Z(e.label),9,Wx)):Ks("v-if",!0)],64)))),256))],512),[[Fo,d.value]])])])]),"ip"==s.value?(As(),Ms("div",Jx,[zs("div",Yx,[zs("label",Xx,[zs("b",null,Z(w("check_exclusion.ip_address")),1)]),zs("div",Zx,[vl(zs("input",{pattern:vn(f),placeholder:"192.168.1.1",required:"",type:"text",name:"ip_address",class:"form-control","onUpdate:modelValue":n[4]||(n[4]=e=>i.value=e)},null,8,Qx),[[Io,i.value]])])])])):Ks("v-if",!0),"network"==s.value?(As(),Ms("div",ek,[zs("div",tk,[zs("label",nk,[zs("b",null,Z(w("check_exclusion.network")),1)]),zs("div",ak,[vl(zs("input",{required:"",style:{width:"calc(100% - 10px)"},name:"network",class:"form-control d-inline",placeholder:"172.16.0.0",pattern:vn(f),"onUpdate:modelValue":n[5]||(n[5]=e=>o.value=e)},null,8,lk),[[Io,o.value]])]),zs("div",sk,[ik,vl(zs("input",{placeholder:"24",required:"",class:"form-control d-inline w-75",min:"1",max:"127",type:"number",name:"cidr","onUpdate:modelValue":n[6]||(n[6]=e=>p.value=e)},null,512),[[Io,p.value]])])])])):Ks("v-if",!0),zs("div",ok,[zs("label",rk,[zs("b",null,Z(w("vlan")),1)]),zs("div",ck,[vl(zs("input",{placeholder:"0",min:"0",type:"number","onUpdate:modelValue":n[7]||(n[7]=e=>r.value=e),class:"form-control"},null,512),[[Io,r.value]])])])],64)):Ks("v-if",!0),Ks(" mdoal hosts "),"hosts"!=e.alert_exclusions_page?(As(),Ms(xs,{key:1},[Ks(" modal domain_names"),zs("div",null,[zs("div",uk,[zs("label",dk,["domain_names"==e.alert_exclusions_page?(As(),Ms("b",pk,Z(w("check_exclusion.domain")),1)):Ks("v-if",!0),"tls_certificate"==e.alert_exclusions_page?(As(),Ms("b",_k,Z(w("check_exclusion.tls_certificate")),1)):Ks("v-if",!0)]),zs("div",fk,["domain_names"==e.alert_exclusions_page?vl((As(),Ms("input",{key:0,placeholder:"",pattern:vn(h),required:"",type:"text",name:"ip_address",class:"form-control","onUpdate:modelValue":n[8]||(n[8]=e=>c.value=e)},null,8,hk)),[[Io,c.value]]):Ks("v-if",!0),"tls_certificate"==e.alert_exclusions_page?vl((As(),Ms("input",{key:1,placeholder:"CN=813845657003339838, O=Code42, OU=TEST, ST=MN, C=U",pattern:vn(m),required:"",type:"text",name:"ip_address",class:"form-control","onUpdate:modelValue":n[9]||(n[9]=e=>c.value=e)},null,8,mk)),[[Io,c.value]]):Ks("v-if",!0)])])])],64)):Ks("v-if",!0),Ks(" modal domain_names")])),footer:fa((()=>[zs("button",{type:"button",disabled:v(),onClick:y,class:"btn btn-primary"},Z(w("add")),9,gk)])),_:1},512))}};pp("\ninput[data-v-7e5acce0]:invalid {\n  border-color: #ff0000;\n}  \n"),vk.__scopeId="data-v-7e5acce0",vk.__file="http_src/vue/modal-add-check-exclusion.vue";const bk=e=>(da("data-v-19c5b1f1"),e=e(),pa(),e),yk=["innerHTML"],wk={class:"form-group mb-3"},xk=["innerHTML"],kk=Hs('". '),$k={class:"alert_label"},Sk={class:"form-check"},Ck={class:"form-check-label"},Nk={key:0,class:"form-check"},Ak={class:"form-check-label"},Ek={class:"form-check"},Tk={class:"form-check-label"},Pk={class:"form-check"},Ik={class:"form-check-label"},Mk={key:0,class:"exclude-domain-certificate"},Ok={class:"alert_label"},Uk={key:0,class:"form-check"},Fk={class:"form-check-label whitespace"},jk=["pattern","disabled"],Lk={key:1,class:"form-check"},Rk={class:"form-check-label whitespace"},Dk=["disabled","pattern"],zk=bk((()=>zs("hr",{class:"separator"},null,-1))),Bk={class:"form-group mb-3"},Vk={class:"custom-control custom-switch"},qk={class:"custom-control-label"},Hk={class:"alert alert-warning border",role:"alert"},Gk=["disabled"];var Kk={__name:"modal-alerts-filter",props:{alert:Object,page:String},emits:["exclude"],setup(e,{expose:t,emit:n}){const a=e,l=_n(null),s=_n("any"),i=_n(!0),o=_n(null),r=_n(null);Ma((()=>a.alert),((e,t)=>{null!=e&&(s.value="any",i.value=!0,o.value=""==e.info?.value?null:e.info?.value,r.value=""==e.info?.issuerdn?null:e.info?.issuerdn)}));const c=()=>{if("domain"==s.value){let e=new RegExp(_);return null==o.value||0==e.test(o.value)}if("certificate"==s.value){let e=new RegExp(f);return null==r.value||0==e.test(r.value)}return!1},u=vi((()=>a.alert?.alert_name)),d=vi((()=>{let e={value:"",label:""};if("host"!=a.page||null==a.alert)return e;let t=a.alert;return e.value=t.ip.value,null!=t.vlan&&null!=t.vlan.value&&0!=t.vlan.value&&(e.value=e.value+"@"+t.vlan.value),e.label=t.ip.label?`${t.ip.label} (${t.ip.value})`:t.ip.value,e})),p=vi((()=>{let e={cli_value:"",cli_label:"",srv_value:"",srv_label:""};if("flow"!=a.page||null==a.alert)return e;let t=a.alert;e.cli_value=t.flow.cli_ip.value,e.srv_value=t.flow.srv_ip.value;let n=`${t.flow.cli_ip.label||t.flow.cli_ip.value}`,l=`${t.flow.srv_ip.label||t.flow.srv_ip.value}`;return null!=t.flow.vlan&&null!=t.flow.vlan.value&&0!=t.flow.vlan.value&&(n=`${n}@${t.flow.vlan.label}`,l=`${l}@${t.flow.vlan.label}`,e.cli_value=e.cli_value+"@"+t.flow.vlan.value,e.srv_value=e.srv_value+"@"+t.flow.vlan.value),n!==e.cli_value&&(n=`${n} (${e.cli_value})`),l!==e.srv_value&&(l=`${l} (${e.srv_value})`),e.cli_label=n,e.srv_label=l,e}));let _=NtopUtils.REGEXES.domain_name_not_strict,f=NtopUtils.REGEXES.tls_certificate;const h=()=>{let e=a.page,t="domain"==s.value||"certificate"==s.value?s.value:"host",l={delete_alerts:i.value,type:t},c=null;"host"==t?("host"==s.value?c=d.value.value:"server_host"==s.value?c=p.value.srv_value:"client_host"==s.value&&(c=p.value.cli_value),l.alert_addr=c,"flow"==e?l.flow_alert_key=a.alert.alert_id.value:"host"==e&&(l.host_alert_key=a.alert.alert_id.value)):"domain"==t?(l.delete_alerts=!1,l.alert_domain=o.value):"certificate"==t&&(l.delete_alerts=!1,l.alert_certificate=r.value),m(),n("exclude",l)},m=()=>{l.value.close()};t({show:()=>{l.value.show()},close:m}),cl((()=>{}));const g=e=>i18n(e);return(t,n)=>(As(),Os(_p,{onShowed:n[9]||(n[9]=e=>{}),ref_key:"modal_id",ref:l},{title:fa((()=>[Hs(Z(g("exclude_check"))+": ",1),zs("span",{innerHTML:vn(u)},null,8,yk)])),body:fa((()=>[zs("div",wk,[zs("div",null,[zs("label",null,[Hs(Z(g("exclude_check"))+' "',1),zs("b",{innerHTML:vn(u)},null,8,xk),kk,zs("span",$k,Z(g("exclude_for"))+":",1)]),zs("div",Sk,[vl(zs("input",{class:"form-check-input",type:"radio",value:"any","onUpdate:modelValue":n[0]||(n[0]=e=>s.value=e)},null,512),[[Uo,s.value]]),zs("label",Ck,[zs("span",null,Z(g("show_alerts.filter_disable_check")),1)])]),"host"==e.page?(As(),Ms("div",Nk,[vl(zs("input",{class:"form-check-input",type:"radio",value:"host","onUpdate:modelValue":n[1]||(n[1]=e=>s.value=e)},null,512),[[Uo,s.value]]),zs("label",Ak,[zs("span",null,Z(vn(d).label),1)])])):Ks("v-if",!0),"flow"==e.page?(As(),Ms(xs,{key:1},[zs("div",Ek,[vl(zs("input",{class:"form-check-input",type:"radio",value:"client_host","onUpdate:modelValue":n[2]||(n[2]=e=>s.value=e)},null,512),[[Uo,s.value]]),zs("label",Tk,[zs("span",null,Z(g("client"))+": "+Z(vn(p).cli_label),1)])]),zs("div",Pk,[vl(zs("input",{class:"form-check-input",type:"radio",value:"server_host","onUpdate:modelValue":n[3]||(n[3]=e=>s.value=e)},null,512),[[Uo,s.value]]),zs("label",Ik,[zs("span",null,Z(g("server"))+": "+Z(vn(p).srv_label),1)])])],64)):Ks("v-if",!0)]),null!=o.value||null!=r.value?(As(),Ms("div",Mk,[zs("label",null,[zs("span",Ok,Z(g("check_exclusion.exclude_all_checks_for"))+":",1)]),null!=o.value?(As(),Ms("div",Uk,[vl(zs("input",{class:"form-check-input",type:"radio",value:"domain","onUpdate:modelValue":n[4]||(n[4]=e=>s.value=e)},null,512),[[Uo,s.value]]),zs("label",Fk,[zs("span",null,Z(g("check_exclusion.domain"))+":",1)]),vl(zs("input",{type:"text",pattern:vn(_),disabled:"domain"!=s.value,required:"","onUpdate:modelValue":n[5]||(n[5]=e=>o.value=e),class:"form-check-label custom-width"},null,8,jk),[[Io,o.value]])])):Ks("v-if",!0),null!=r.value?(As(),Ms("div",Lk,[vl(zs("input",{class:"form-check-input",type:"radio",value:"certificate","onUpdate:modelValue":n[6]||(n[6]=e=>s.value=e)},null,512),[[Uo,s.value]]),zs("label",Rk,[zs("span",null,Z(g("check_exclusion.tls_certificate"))+":",1)]),vl(zs("input",{type:"text",disabled:"certificate"!=s.value,"onUpdate:modelValue":n[7]||(n[7]=e=>r.value=e),pattern:vn(f),required:"",class:"form-check-label custom-width"},null,8,Dk),[[Io,r.value]])])):Ks("v-if",!0)])):Ks("v-if",!0)]),"domain"!=s.value&&"certificate"!=s.value?(As(),Ms(xs,{key:0},[vl(zs("div",{class:"message alert alert-danger"},Z(g("show_alerts.confirm_delete_filtered_alerts")),513),[[Ko,i.value]]),zk,zs("div",Bk,[zs("div",Vk,[vl(zs("input",{type:"checkbox",class:"custom-control-input whitespace","onUpdate:modelValue":n[8]||(n[8]=e=>i.value=e)},null,512),[[Mo,i.value]]),zs("label",qk,Z(g("delete_disabled_alerts")),1)])])],64)):Ks("v-if",!0),zs("div",Hk,Z(g("show_alerts.confirm_filter_alert")),1)])),footer:fa((()=>[zs("button",{type:"button",onClick:h,disabled:c(),class:"btn btn-warning"},Z(g("filter")),9,Gk)])),_:1},512))}};pp("\n.whitespace[data-v-19c5b1f1] {\n  margin-right: 0.2rem;\n}\n.custom-width[data-v-19c5b1f1] {\n  display: block;\n  min-width: 100%;\n}\ninput[data-v-19c5b1f1]:invalid {\n  border-color: #ff0000;\n}\n.exclude-domain-certificate[data-v-19c5b1f1] {\n  margin-top: 0.4rem;\n}\n"),Kk.__scopeId="data-v-19c5b1f1",Kk.__file="http_src/vue/modal-alerts-filter.vue";let Wk={PageStats:Gh,PageAssetTable:em,PagePeriodicityTable:hm,PageServiceTable:Im,PageServiceMap:Ym,PagePeriodicityMap:mg,PageAssetMap:Fg,PageDeviceExclusions:Vv,PageHostTLS:tb,PageHostSSH:cb,PageHomeMap:gb,PageSankey:yb,PageHostRules:zy,PageAlertAnalysis:ow,PageHostMap:vw,PageVLANPortsFlowSankey:Nw,PageHostDetailsApplications:xb,PageHostDetailsTraffic:zb,PageHostDetailsPackets:Yb,PageHostDetailsFlowSankey:py,PageHostDetailsPorts:Yy,AlertInfo:bh,Chart:Id,Datatable:$h,DateTimeRangePicker:Ld,NetworkMap:Km,RangePicker:tx,PageNavbar:tv,SimpleTable:fx,SelectSearch:jd,TabList:Kh,Sankey:Cx,NoteList:fy,ListTimeseries:f_,Modal:_p,ModalAddCheckExclusion:vk,ModalAlertsFilter:Kk,ModalFilters:Aw,ModalTimeseries:Hf,ModalTrafficExtraction:Gf,ModalDeleteConfirm:Zh,ModalSnapshot:Wp,ModalAddDeviceExclusion:Ev,ModalEditDeviceExclusion:Bv,ModalAddHostRules:Iy,Vue:Pd};window.ntopVue=Wk;var Jk=["html","clone","append","<div />",'<div><hr><div style="margin-left: auto;margin-right: auto;padding-left: var(--bs-gutter-x,.75rem);padding-right: var(--bs-gutter-x,.75rem);width: 100%;"><div class="row mt-2"><div class="col-12 col-md-4 pl-md-0 text-center text-md-start"><span style="font-size: .875em;"><a href="https://www.ntop.org/products/traffic-analysis/ntop/" target="_blank" id="footer-ntop-version"></a> | <span id="footer-ntop-github"></span></span></div><div class="col-12 col-md-4 text-center"><span style="font-size: .875em;" id="footer-ntop-age"></span></div><div class="col-12 col-md-4 text-center text-md-end pr-md-0"><span style="font-size: .875em;"><i class="fas fa-clock" title="Server Time"></i> <div class="d-inline-block" id="footer-network-clock"></div> UTC | Uptime: <div class="d-inline-block" id="footer-network-uptime"></div></span></div></div></div></div>',"ntopng_release_info","|","split","#footer-ntop-version","#footer-ntop-github","© 1998-","ntop_age_to"," - ntop","#footer-ntop-age","body div main","parent","#footer-network-clock","","#footer-network-uptime","remove","localtime","uptime","chart_colors","on_custom_event","ready"];function Yk(){const e=e=>$(Jk[3])[Jk[2]]($(e)[Jk[1]]())[Jk[0]]();let t=Jk[4];const n=(()=>{let n=$(t),a=i18n(Jk[5])[Jk[7]](Jk[6]);$(Jk[8],n)[Jk[0]](a[0]),$(Jk[9],n)[Jk[0]](a[1]);let l=`${Jk[10]}${i18n(Jk[11])}${Jk[12]}`;return $(Jk[13],n)[Jk[0]](l),e(n)})(),a=()=>{$(Jk[14])[Jk[2]](n)};a();const l=()=>$(Jk[16])[Jk[15]]()[Jk[15]]()[Jk[15]]()[Jk[15]]()[Jk[15]]();ntopng_events_manager[Jk[23]](Jk[22],ntopng_custom_events.GET_INTERFACE_DATA,(t=>{0==(()=>{let t=l();if(null==t)return!1;let a=t[Jk[1]]();$(Jk[16],a)[Jk[0]](Jk[17]),$(Jk[18],a)[Jk[0]](Jk[17]);const s=e(a);return n===s})()&&((()=>{let e=l();null!=e&&e[Jk[19]]()})(),a()),(e=>{$(Jk[16])[Jk[0]](e[Jk[20]]),$(Jk[18])[Jk[0]](e[Jk[21]])})(t)}))}$(document)[Jk[24]]((()=>Yk()))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
