!function(){"use strict";Date.prototype.format=function(e){var t={"M+":this.getMonth()+1,"d+":this.getDate(),"h+":this.getHours(),"m+":this.getMinutes(),"s+":this.getSeconds(),"q+":Math.floor((this.getMonth()+3)/3),S:this.getMilliseconds()};for(var a in/(y+)/.test(e)&&(e=e.replace(RegExp.$1,(this.getFullYear()+"").substr(4-RegExp.$1.length))),t)new RegExp("("+a+")").test(e)&&(e=e.replace(RegExp.$1,1==RegExp.$1.length?t[a]:("00"+t[a]).substr((""+t[a]).length)));return e},jQuery.fn.extend({disable:function(e){return this.each((function(){var t=$(this);t.is("input, button, textarea, select")?this.disabled=e:t.toggleClass("disabled",e)}))}});const e=.005,t={ipv4:String.raw`^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$`,ipv6:String.raw`^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$|^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*)$`,domainName:String.raw`^([a-zA-Z]([a-zA-Z]|[0-9])?\.[a-zA-Z]{2,13}|[a-zA-Z0-9]([\-_.a-zA-Z0-9]{1,61}[a-zA-Z0-9])?\.[a-zA-Z]{2,13}|[a-zA-Z0-9]([\-_.a-zA-Z0-9]{1,61}[a-zA-Z0-9])?\.[a-zA-Z]{2,30}\.[a-zA-Z]{2,3})$`,port:String.raw`^([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$`,latency:String.raw`^([0-9]*[.])?[0-9]+$`,url:String.raw`^(https?\:\/\/[^\/\s]+(\/.*)?)$`,emailUrl:String.raw`^smtps?:\/\/[\-a-zA-Z0-9:.]{1,256}$`,macAddress:String.raw`^([0-9A-Fa-f]{2}:){5}([0-9A-Fa-f]{2})$`,hostname:String.raw`^(?!\s*$)[a-zA-Z0-9._: \-\/]{1,250}|^[a-zA-Z0-9._: \-\/]{1,250}@[0-9]{0,5}`,username:String.raw`^[a-zA-Z0-9._@!-?]{3,30}$`,singleword:String.raw`^(?=[a-zA-Z0-9._:\-]{3,253}$)(?!.*[_.:\-]{2})[^_.:\-].*[^_.:\-]$`,multiword:String.raw`^([a-zA-Z0-9._:\-\s]{3,253})$`,email:String.raw`^([a-zA-Z0-9.!#$%&'*+\-\/=?^_\`\|~]+@[a-zA-Z0-9\-]+(?:\.[a-zA-Z0-9\-]+)*)$|^[a-zA-Z\d.!#$%&'*+\-\/=?^_\`\|~]{1,128}$`,emailCommaList:String.raw`^((?:[a-zA-Z0-9.!#$%&'*+\-\/=?^_\`\|~]+@[a-zA-Z0-9\-]+(?:\.[a-zA-Z0-9\-]+)*)|([a-zA-Z\d.!#$%&'*+\-\/=?^_\`\|~]{1,128}))(?:,((?:[a-zA-Z0-9.!#$%&'*+\-\/=?^_\`\|~]+@[a-zA-Z0-9\-]+(?:\.[a-zA-Z0-9\-]+)*)|([a-zA-Z\d.!#$%&'*+\-\/=?^_\`\|~]{1,128})))*$`,https:String.raw`^https?:\/\/.+$`,token:String.raw`^[0-9a-f]{32}`,score:String.raw`^[0-9]{1,5}`,telegram_channel:String.raw`^[0-9\-]{1,15}`,password:String.raw`^[\w\/$!\/()=?^*@_-]{5,31}$`,tls_certificate:String.raw`^[^=,]+=[^=,]+(,\s[^=,]+=[^=,]+)*$`,domain_name_not_strict:String.raw`^[a-zA-Z0-9\-_~]+((\.[a-zA-Z0-9\-_~]+)+)$`,non_quoted_text:String.raw`^[a-zA-Z0-9.-_]+$`};class a{static toggleOverlays(e=500){$(".overlay").toggle(e)}static showOverlays(e=500){$(".overlay").fadeIn(e)}static hideOverlays(e=500){$(".overlay").fadeOut(e)}static get REGEXES(){return t}static getIPv4RegexWithCIDR(){const e=t.ipv4.length;return`${t.ipv4.substring(0,e-1)}(\\/?)(\\b([0-9]|[12][0-9]|3[0-2])?\\b)$`}static getIPv6RegexWithCIDR(){const e=t.ipv6.length;return`${t.ipv6.substring(0,e-1)}(\\/?)\\b([0-9]|[1-9][0-9]|1[01][0-9]|12[0-8])?\\b$`}static async resolveDNS(e="ntop.org"){try{const t=await fetch(`${http_prefix}/lua/rest/v2/get/dns/resolve.lua?hostname=${e}`);return await t.json()}catch(e){console.error(`Something went wrong when resolving hostname: ${e}`)}return{rc:-1,rc_str:"FAILED_HTTP_REQUEST"}}static initDataPatterns(){$("input[data-pattern]").each((function(){const e=$(this).data("pattern");if(!e)return void console.warn("An empty data-pattern on an input was found!",this);const a=e.split("|").map((e=>t[e].toString())).join("|");$(this).attr("pattern",a),$(this).removeAttr("data-pattern")}))}static is_good_ipv4(e){return new RegExp(t.ipv4).test(e)}static is_good_ipv6(e){return new RegExp(t.ipv6).test(e)}static is_mac_address(e){return new RegExp(t.macAddress).test(e)}static isNumeric(e){return/^\d+$/.test(e)}static is_network_mask(e,t){var l,n=e.split("/"),s=null;if(2!=n.length){if(!t)return null;l=e}else{if(l=n[0],!a.isNumeric(n[1]))return null;if((s=parseInt(n[1]))<0)return null}if(a.is_good_ipv4(l)){if(null===s)s=32;else if(s>32)return null;return{type:"ipv4",address:l,mask:s}}if(a.is_good_ipv6(n[0])){if(null===s)s=128;else if(s>128)return!1;return{type:"ipv6",address:l,mask:s}}return null}static fbits(t){const a=["bps","Kbps","Mbps","Gbps","Tbps"];if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 bps";var l=Math.log(t)/Math.log(1e3),n=parseInt(Math.floor(l));if(n<0||isNaN(n))n=0;else if(n>=a.length)return"> "+a[a.length-1];if(n<=1)return Math.round(t/Math.pow(1e3,n)*100)/100+" "+a[n];var s=parseFloat(t/Math.pow(1e3,n)).toFixed(2);return s%1==0&&(s=Math.round(s)),s+" "+a[n]}static export_rate(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 exps/s";var l=a.scaleValue(t,["exp/s","Kexp/s"],1e3);return Math.round(100*l[0])/100+" "+l[1]}static exports_format(t){if(void 0===t)return"-";var l=i18n_ext.exports.toLowerCase(),n=[l,"K "+l];if(0==t)return"0";if(t>0&&t<e)return"< 0.005 exps/s";var s=a.scaleValue(t,n,1e3);return Math.round(100*s[0])/100+" "+s[1]}static fbits_from_bytes(e){return void 0===e?"-":a.fbits(8*e)}static fpackets(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 pps";var l=a.scaleValue(t,["pps","Kpps","Mpps","Gpps","Tpps"],1e3);return Math.round(100*l[0])/100+" "+l[1]}static fpoints(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 pt/s";var l=a.scaleValue(t,["pt/s","Kpt/s","Mpt/s","Gpt/s","Tpt/s"],1e3);return Math.round(100*l[0])/100+" "+l[1]}static fflows(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 fps";var l=a.scaleValue(t,["fps","Kfps","Mfps","Gfps","Tfps"],1e3);return Math.round(100*l[0])/100+" "+l[1]}static fmsgs(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 mps";var l=a.scaleValue(t,["msg/s","Kmsg/s","Msg/s","Gmsg/s","Tmsg/s"],1e3);return Math.round(100*l[0])/100+" "+l[1]}static fmillis(e){if(void 0===e)return"-";const t=a.scaleValue(e,["ms"],1e3);return Math.round(100*t[0])/100+" "+t[1]}static fnone(e){return void 0===e?"-":Math.round(100*e)/100}static falerts(e){return void 0===e?"-":Math.round(100*e)/100+" alerts/s"}static fint(e){return void 0===e?"-":Math.round(e).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")}static ffloat(e){return void 0===e?"-":(Math.round(100*e)/100).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")}static fpercent(e){return void 0===e?"-":Math.round(100*e)/100+" %"}static percentage(e,t){if(t>0){var a=Math.round(1e4*e/t);if(a>0)return" [ "+a/100+" % ] "}return""}static fdate(e){return new Date(1e3*e)}static capitaliseFirstLetter(e){return e.charAt(0).toUpperCase()+e.slice(1)}static get_trend(e,t){return void 0===e||void 0===t||e==t?'<i class="fas fa-minus"></i>':e>t?'<i class="fas fa-arrow-up"></i>':'<i class="fas fa-arrow-down"></i>'}static abbreviateString(e,t){return e?e.length<t?e:e.substring(0,t)+"...":""}static toFixed2(e){return e?e.toFixed(2):""}static bytesToSize(e){if(void 0===e)return"-";var t=1024,a=1048576,l=1073741824,n=1099511627776;return e>=0&&e<t?0!=e?parseFloat(e.toFixed(2))+" Bytes":parseFloat(e)+" Bytes":e>=t&&e<a?parseFloat((e/t).toFixed(2))+" KB":e>=a&&e<l?parseFloat((e/a).toFixed(2))+" MB":e>=l&&e<n?parseFloat((e/l).toFixed(2))+" GB":e>=n?parseFloat((e/n).toFixed(2))+" TB":parseFloat(e.toFixed(2))+" Bytes"}static drawTrend(e,t,a){return e==t?'<i class="fas fa-minus"></i>':e>t?'<i class="fas fa-arrow-up"'+a+"></i>":'<i class="fas fa-arrow-down"></i>'}static toggleAllTabs(e){!0===e?$("#historical-tabs-container").find("li").removeClass("disabled").find("a").attr("data-toggle","tab"):$("#historical-tabs-container").find("li").addClass("disabled").find("a").removeAttr("data-toggle")}static disableAllDropdownsAndTabs(){$("select").each((function(){$(this).prop("disabled",!0)})),a.toggleAllTabs(!1)}static enableAllDropdownsAndTabs(){$("select").each((function(){$(this).prop("disabled",!1)})),a.toggleAllTabs(!0)}static capitalize(e){return e&&e[0].toUpperCase()+e.slice(1)}static addCommas(e){for(var t=(e+="").split("."),a=t[0],l=t.length>1?"."+t[1]:"",n=/(\d+)(\d{3})/;n.test(a);)a=a.replace(n,"$1,$2");return a+l}static scaleValue(e,t,a,l){if(0==e)return[0,t[0]];let n=l?10*l:10;var s=parseInt(Math.floor(Math.log(e)/Math.log(a)));return s<0||isNaN(s)?s=0:s>=t.length&&(s=t.length-1),[Math.round(e/Math.pow(a,s)*n)/n,t[s]]}static formatValue(t,l){if(0==t)return"0";if(t>0&&t<e)return"< "+e;null==l&&(l=0);var n=a.scaleValue(t,["","K","M","G","T"],1e3,l);return n[0]+n[1]}static formatPackets(e){return a.addCommas(e.toFixed(0))+" Pkts"}static bytesToVolume(t){if(0==t)return"0 Bytes";if(t>0&&t<e)return"< 0.005 Bytes";var l=a.scaleValue(t,["Bytes","KB","MB","GB","TB"],1024);return parseFloat(l[0])+" "+l[1]}static bytesToVolumeAndLabel(e){if(0==e)return"0 Bytes";var t=parseInt(Math.floor(Math.log(e)/Math.log(1024)));return[(e/Math.pow(1024,t)).toFixed(2),["Bytes","KB","MB","GB","TB"][t]]}static bitsToSize(t,l){l=l||1e3;if(0==t)return"0 bps";if(t>0&&t<e)return"< 0.005 bps";var n=a.scaleValue(t,["bps","Kbps","Mbps","Gbps","Tbps"],l);return n[0].toFixed(2)+" "+n[1]}static bitsToSize_no_comma(t,l){l=l||1e3;if(0==t)return"0 bps";if(t>0&&t<e)return"< 0.005 bps";var n=a.scaleValue(t,["bps","Kbps","Mbps","Gbps","Tbps"],l);return n[0]+" "+n[1]}static secondsToTime(e){if(e<1)return"< 1 sec";let t=Math.floor(e/86400),a=Math.floor(e/3600-24*t),l=Math.floor(e/60-1440*t-60*a),n=e%60,s="",o=[];if(t>0){let e=Math.floor(t/365);e>0&&(t%=365,s=e+" year",e>1&&(s+="s"),o.push(s),s=""),s=t+" day",t>1&&(s+="s"),o.push(s),s=""}return a>0&&(a<10&&(s="0"),s+=a+":"),l<10&&(s+="0"),s+=l+":",n<10&&(s+="0"),s+=n,o.push(s),o.join(", ")}static msecToTime(e){return e>=1e3?a.secondsToTime(e/1e3):(Math.round(1e3*e)/1e3).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")+" ms"}static epoch2Seen(e){var t=new Date(1e3*e),l=Math.floor((new Date).getTime()/1e3-e);return t.format("dd/MM/yyyy hh:mm:ss")+" ["+a.secondsToTime(l)+" ago]"}static graphGetXAxisTicksFormat(e){return e<=86400?"%H:%M:%S":e<=172800?"%b %e, %H:%M:%S":"%b %e"}static paramsExtend(e,t){return $.extend({},e,t)}static paramsToForm(e,t){for(var a in e=$(e),t){if(t.hasOwnProperty(a))$('<input type="hidden" name="'+a+'" value="'+t[a]+'">').appendTo(e)}return e}static paramsPairsEncode(e){var t=0,a={};for(var l in e)a["key_"+t]=l,a["val_"+t]=e[l],t+=1;return a}static hostkey2hostInfo(e){return(e=(e=(e=e.replace(/____/g,":")).replace(/___/g,"/")).replace(/__/g,".")).split("@")}static handle_tab_state(e,t){$("a",e).click((function(e){e.preventDefault()})),$(" > li > a",e).on("shown.bs.tab",(function(e){var t=$(e.target).attr("href").substr(1);history.replaceState?history.replaceState(null,null,"#"+t):window.location.hash=t}));var a=window.location.hash;a||(a="#"+t),$('a[href="'+a+'"]',e).tab("show")}static _add_find_host_link(e,t,a){$("<input>").attr({type:"hidden",id:t,name:t,value:a}).appendTo(e)}static makeFindHostBeforeSubmitCallback(e){return function(t,l){return l.context&&"historical"==l.context?(t.attr("action",e+"/lua/pro/db_search.lua"),"ip"==l.type?a._add_find_host_link(t,"ip",l.ip):"mac"==l.type?a._add_find_host_link(t,"mac",l.mac):"community_id"==l.type?a._add_find_host_link(t,"community_id",l.community_id):"ja3_client"==l.type?a._add_find_host_link(t,"ja3_client",l.ja3_client):"ja3_server"==l.type?a._add_find_host_link(t,"ja3_server",l.ja3_server):a._add_find_host_link(t,"name",l.hostname?l.hostname:l.name)):"mac"==l.type?t.attr("action",e+"/lua/mac_details.lua"):"network"==l.type?(t.attr("action",e+"/lua/hosts_stats.lua"),a._add_find_host_link(t,"network",l.network)):"snmp"==l.type?(t.attr("action",e+"/lua/pro/enterprise/snmp_interface_details.lua"),a._add_find_host_link(t,"snmp_port_idx",l.snmp_port_idx)):"snmp_device"==l.type?t.attr("action",e+"/lua/pro/enterprise/snmp_device_details.lua"):"asn"==l.type?(t.attr("action",e+"/lua/hosts_stats.lua"),a._add_find_host_link(t,"asn",l.asn)):(t.attr("action",e+"/lua/host_details.lua"),a._add_find_host_link(t,"mode","restore")),!0}}static tstampToDateString(e,t,a){a=a||0;var l=parseInt(e.html())+a,n=d3.time.format(t)(new Date(1e3*l));return e.html(n).removeClass("hidden"),n}static noHtml(e){return e.replace(/<[^>]+>/g,"")}static cleanCustomHostUrl(e){return e.replace(/^http:\/\//gi,"").replace(/^https:\/\//gi,"").replace(/^www\./gi,"").replace(/[^0-9a-zA-Z\.:\/_-]/gi,"")}static parseQuery(e){for(var t={},a=("?"===e[0]?e.substr(1):e).split("&"),l=0;l<a.length;l++){var n=a[l].split("=");t[decodeURIComponent(n[0])]=decodeURIComponent(n[1]||"")}return t}static getHistoryParameters(e){var t=a.parseQuery(window.location.search),l=$.extend(t,e),n="?"+$.param(l,!0);return[location.protocol,"//",location.host,location.pathname].join("")+n}static check_status_code(e,t,a){const l=200!=e;if(l&&null!=a){let l=i18n_ext.request_failed_message;e&&t&&(l+=`: ${e} - ${t}`),a.text(l).show()}else l&&null==a&&alert(`${i18n_ext.request_failed_message}: ${e} - ${t}`);return l}static importModalHelper(e){if(!e.loadConfigXHR)throw"importModalHelper:: Missing 'loadConfigXHR' param";$("input#import-input").on("change",(function(){$("#btn-confirm-import").removeAttr("disabled")})),$("#import-modal").on("hidden.bs.modal",(function(){$("#import-input").val(""),$("#import-error").hide().removeClass("text-warning").addClass("invalid-feedback"),$("#btn-confirm-import").attr("disabled","disabled")})),$("#import-modal").on("submit","form",(function(t){t.preventDefault();const a=$("#btn-confirm-import");a.attr("disabled","");const l=$("#import-input")[0].files[0];if(!l)return $("#import-error").text(`${i18n_ext.no_file}`).show(),void a.removeAttr("disabled");const n=new FileReader;n.readAsText(l,"UTF-8"),n.onload=function(){let t=null;try{t=JSON.parse(n.result)}catch(e){}if(!t)return $("#import-error").text(i18n_ext.rest_consts[responseJSON.rc_str]||"Not Implemented Yet").show(),void a.removeAttr("disabled");e.loadConfigXHR(n.result).done(((t,a,l)=>{if(t.rc<0)return void $("#import-error").text(t.rc_str).show();e.successCallback&&e.successCallback(t);const n="all"==$("input[name='configuration']:checked").val()?i18n("manage_configurations.messages.import_all_success"):i18n("manage_configurations.messages.import_success");ToastUtils.showToast({id:"import-configuration-alert",level:"success",title:i18n("success"),body:n,delay:2e3}),$("#import-modal").modal("hide")})).fail((({responseJSON:t})=>{e.failureCallback&&e.failureCallback(t),t&&t.rc>0||(-28==t.rc&&$("#import-error").removeClass("invalid-feedback").addClass("text-warning"),$("#import-error").text(i18n_ext.rest_consts[t.rc_str]||i18n_ext.FAILED_HTTP_REQUEST).show())})).always((()=>{a.removeAttr("disabled")}))}}))}static serializeFormArray(e){const t={};return e.forEach((e=>{e.name.includes("[]")||("string"==typeof e.value&&(e.value=e.value.trim()),t[e.name]=e.value)})),t}static cleanForm(e){$(e).find("input,select,textarea").each((function(e,t){$(this).removeClass("is-valid").removeClass("is-invalid")})),$(e)[0].reset()}static fetchWithTimeout(e,t={},a=5e3){const l={...t,signal:(new AbortController).signal};return fetch(e,l).then((e=>{if(!e.ok)throw new Error(`${e.status}: ${e.statusText}`);return e})).catch((e=>{if("AbortError"===e.name)throw new Error("Response timed out")}))}static setPref(e,t,a,l){if(null==e)return void console.warn("An action key must be defined to set a preference!");const n=()=>{},s=$.post(`${http_prefix}/lua/update_prefs.lua`,{action:e,csrf:t});s.done(a||n),s.fail(l||n)}static arrayToListString(e,t){return null==e?"":e.length>t?e.slice(0,t).join(", ")+` ${i18n_ext.and_x_more.replace("$num",e.length-t)}`:e.slice(0,t).join(", ")}static buildURL(e,t={},a=!1,l={}){const n=new URL(e,window.location);for(const[e,a]of Object.entries(t))(a||0===a)&&n.searchParams.set(e,a);if(a){const e=new URL(window.location.href);for(const[t,a]of Object.entries(l))a&&e.searchParams.set(t,a);n.searchParams.set("referer",e.toString())}return n.toString()}static getEditPoolLink(e,t){const a=new URL(e,window.location);return a.searchParams.set("pool_id",t),a.toString()}static getPoolLink(e,t=0){return`${http_prefix}/lua/rest/v2/get/${e}/pools.lua?pool=${t}`}static async getPool(e,t=0){if(null===e)throw"A pool type must be defined!";try{const l=await fetch(a.getPoolLink(e,t)),n=await l.json();return n.rc<0?[!1,{}]:[!0,n.rsp[0]]}catch(e){return[!1,{}]}}static saveElementScale(e,t={width:0,height:0}){const l=a.generateScaleElementKey(e);localStorage.setItem(l,JSON.stringify(t))}static generateScaleElementKey(e){let t;const a=location.pathname,l=e.attr("id");if(""!==l)t=l;else{t=e.attr("class")}return`${t}-${a}-scale`}static loadElementScale(e){const t=a.generateScaleElementKey(e),l=localStorage.getItem(t);if(null!=l)return JSON.parse(l)}static fillFieldIfValid(e,t){void 0===t?e.val(""):e.val(t)}static copyToClipboard(e,t){const a=document.createElement("textarea");a.value=e,a.setAttribute("readonly",""),a.style.position="absolute",a.style.left="-9999px",document.body.appendChild(a),a.select(),document.execCommand("copy"),document.body.removeChild(a),$(t).attr("title","Copied!").tooltip("dispose").tooltip().tooltip("show"),$(t).removeAttr("data-bs-original-title"),$(t).attr("title",e)}static stripTags(e){let t=document.createElement("div");return t.innerHTML=e,t.textContent||t.innerText||""}static shortenLabel(e,t,a){let l=e;if(e.length>t+5)if(a){let n=e.lastIndexOf(a);const s=e.slice(n);t>n&&(t=n),l=e.slice(0,t)+"... "+s}else l=e.slice(0,t)+"...";return l}static sortAlphabetically(e,t){const a=e.label?.toUpperCase(),l=t.label?.toUpperCase();return a<l?-1:a>l?1:0}static formatNameValue(e,t,a){let l=e;return e!=t&&(a&&"number"==typeof a&&(l=this.shortenLabel(l,a,".")),l=`${l} [${t}]`),l}static removeVlan(e){let t=e;const a=t.lastIndexOf("@");if(-1!=a){0==t.slice(a+1)&&(t=t.slice(0,a))}return t}static formatGenericObj(e,t){let a=e.label?e.label:e.value;return e.value,a}static formatCountry(e,t){let a=e.value;return`${e.label?e.label:e.value} <img src="/dist/images/blank.gif" class="flag flag-${a.toLowerCase()}">`}static formatHost(e,t,l){let n="";if(!e)return n;let s=e.ip;t.vlan_id&&t.vlan_id.value&&(s=s+"@"+t.vlan_id.value),n=e.label?e.label:e.value,t.vlan_id&&t.vlan_id.label&&(n+=`@${t.vlan_id.label}`);n=`<a href="${a.buildURL(`${http_prefix}/lua/host_details.lua`,{host:s})}">${n}</a>`;let o=l?t.cli_country:t.srv_country;return!o&&t.country&&(o=t.country),o&&o.value&&(n+=` <img src="${http_prefix}/dist/images/blank.gif" class="flag flag-${o.value.toLowerCase()}" title="${o.title}"></a>`),n}static formatNetwork(e,t){let l="";if(!e)return l;let n=e.value;l=e.label?e.label:e.value,t.vlan_id&&t.vlan_id.label&&(l+=`@${t.vlan_id.label}`);return l=`<a href="${a.buildURL(`${http_prefix}/lua/hosts_stats.lua`,{network:n})}">${l}</a>`,l}static convertIPAddress(e){var t,a,l,n,s,o,i;if(!e)return 0;if(l=2==(s=(e=e.replace(/<[\s\S]*?>/g,"")).split(":")).length?s[0].split("."):e.split("."),n=e.split(":"),o="",i="",4==l.length)for(t=0;t<l.length;t++)1==(a=l[t]).length?o+="00"+a:2==a.length?o+="0"+a:o+=a;else if(n.length>0){var r=0;for(t=0;t<n.length;t++)t>0&&(i+=":"),0===(a=n[t]).length?r+=0:1==a.length?(i+="000"+a,r+=4):2==a.length?(i+="00"+a,r+=4):3==a.length?(i+="0"+a,r+=4):(i+=a,r+=4);n=i.split(":");var c=0;for(t=0;t<n.length;t++)if(0===(a=n[t]).length&&0===c)for(var u=0;u<32-r;u++)o+="0",c=1;else o+=a}return o}static formatASN(e,t){let l="";if(!e)return l;let n=e.value;l=e.label?e.label:e.value;return l=`<a href="${a.buildURL(`${http_prefix}/lua/hosts_stats.lua`,{asn:n})}">${l}</a>`,l}static createProgressBar(e){return`<div class="d-flex flex-row align-items-center">\n              <div class="col-9 progress">\n                <div class="progress-bar bg-warning" aria-valuenow="${e}" aria-valuemin="0" aria-valuemax="100" style="width: ${e}%;">\n                </div>\n              </div>\n              <div class="col"> ${e} %</div>\n            </div>`}static createBreakdown(e,t,a,l){return`<div class="d-flex flex-row">\n              <div class="col-12 progress">\n                <div class="progress-bar bg-warning" aria-valuenow="${e}" aria-valuemin="0" aria-valuemax="100" style="width: ${e}%;">${a}</div>\n                <div class="progress-bar bg-success" aria-valuenow="${t}" aria-valuemin="0" aria-valuemax="100" style="width: ${t}%;">${l}</div>\n              </div>\n            </div>`}static getNumTableRows(){return[10,20,50,100]}static formatApexChartLabelFromXandName({series:e,seriesIndex:t,dataPointIndex:a,w:l}){const n=l.config.series[t].data[a],s=n.name,o=n.y;return`\n    <div class='apexcharts-theme-light apexcharts-active' id='test'>\n        <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n            ${n.meta.label}\n        </div>\n        <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n            <div class='apexcharts-tooltip-text text-left'>\n                <b>${l.config.xaxis.title.text}</b>: ${s}\n            </div>\n            <div class='apexcharts-tooltip-text text-left'>\n                <b>${l.config.yaxis[0].title.text}</b>: ${o}\n            </div>\n        </div>\n    </div>\n    `}static apexChartJumpToAlerts(e,t,a){const{seriesIndex:l,dataPointIndex:n}=a,{series:s}=a.config;if(-1===l)return;if(void 0===s)return;const o=s[l],i=o.base_url||s[0].base_url,r=o.start_url||s[0].start_url;if(null!=i&&null!=r){const e=o.data[n].meta.url_query;location.href=`${i}?${r}${e}`}}static apexChartJumpToHostDetails(e,t,a){const{seriesIndex:l,dataPointIndex:n}=a,{series:s}=a.config;if(-1===l)return;if(void 0===s)return;const o=s[l],i=o.base_url||s[0].base_url;if(null!=i){const e=`${i}?${o.data[n].meta.url_query}`;ntopng_url_manager.go_to_url(e)}}static formatApexChartLabelFromXandY({series:e,seriesIndex:t,dataPointIndex:a,w:l}){const n=l.config.series[t].data[a],s=n.x,o=n.y;return`\n      <div class='apexcharts-theme-light apexcharts-active' id='test'>\n          <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n              ${n.meta.label}\n          </div>\n          <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n              <div class='apexcharts-tooltip-text text-left'>\n                  <b>${l.config.xaxis.title.text}</b>: ${s}\n              </div>\n              <div class='apexcharts-tooltip-text text-left'>\n                  <b>${l.config.yaxis[0].title.text}</b>: ${o}\n              </div>\n          </div>\n      </div>\n    `}}function l(e,t){var a=$("thead th",$(e)).filter((function(){return"none"!=$(this).css("display")})).length;$("tbody",$(e)).html('<tr class="emptyRow"><td colspan="'+a+'"><i>'+t+"</i></td></tr>")}function n(e){return $("tr:not(.emptyRow)",$(e)).length-1}function s(e){return 0==n(e)}function o(e){return $("table",$("#dt-top-details",$(e)).parent())}function i(e,t,a,l,n,s=!0,o=""){0==$("td:nth-child("+e+")",$(this)).find("div.d-flex").length&&($("td:nth-child("+e+")",$(this)).empty(),$("td:nth-child("+e+")",$(this)).append($("<div class='d-flex justify-content-center'></div>"))),$("td:nth-child("+e+")",$(this)).find(".d-flex").append('<a href="'+n+`" title='${o}' data-placement="bottom" class="btn btn-sm mx-1 ${a} ${s?"":"disabled"}" onclick="`+l+'" role="button">'+t+"</a>")}function r(e,t){return e.data("datatable").options.columns.findIndex((function(e){return e.field===t}))}$((function(){a.initDataPatterns()}));var c=Object.freeze({__proto__:null,draw_processes_graph:function(e,t,a){var l,n={},s=e+"/lua/get_processes_graph_data.lua?host="+a;d3.json(s,(function(s,o){if(s)return console.warn(s);var i;(l=o).forEach((function(t){i=-1==t.source_pid?e+"/lua/host_details.lua?host="+t.source:e+"/lua/process_details.lua?pid="+t.source_pid+"&pid_name="+t.source_name+"&host="+a+"&page=flows",t.source=n[t.source]||(n[t.source]={name:t.source_name,num:t.source,link:i,type:t.source_type,pid:t.source_pid}),i=-1==t.target_pid?e+"/lua/host_details.lua?host="+t.target:e+"/lua/process_details.lua?pid="+t.target_pid+"&pid_name="+t.target_name+"&host="+a+"&page=flows",t.target=n[t.target]||(n[t.target]={name:t.target_name,num:t.target,link:i,type:t.target_type,pid:t.target_pid})}));var r=d3.scale.category10();r.proc="red",r.host="lightsteelblue";var c=d3.layout.force().nodes(d3.values(n)).links(l).size([960,500]).linkDistance(120).charge(-400).on("tick",(function(){d.attr("d",f),_.attr("transform",v),p.attr("transform",v)})).start(),u=d3.select("#"+t).append("svg").attr("id","ebpf_graph").attr("width",960).attr("height",500);u.append("defs").selectAll("marker").data(["proc2proc","proc2host","host2proc","host2host"]).enter().append("marker").attr("id",(function(e){return e})).attr("viewBox","0 -5 20 20").attr("refX",15).attr("refY",-1.5).attr("markerWidth",6).attr("markerHeight",6).attr("orient","auto").append("path").attr("d","M0,-5L10,0L0,5");var d=u.append("g").selectAll("path").data(c.links()).enter().append("path").attr("class",(function(e){return"link "+e.type})).attr("marker-end",(function(e){return"url(#"+e.type+")"})),_=u.append("g").selectAll("circle").data(c.nodes()).enter().append("circle").attr("class","ebpf_circle").attr("r",15).style("fill",(function(e){return r[e.type]})).call(c.drag).on("dblclick",(function(e){window.location.href=e.link})),p=u.append("g").selectAll("text").data(c.nodes()).enter().append("text").attr("class","ebpf_text").attr("x",12).attr("y","0.5rem").style("font-size","1rem").text((function(e){return e.pid>=0?e.name+" [pid: "+e.pid+"]":e.name}));function f(e){var t=e.target.x-e.source.x,a=e.target.y-e.source.y,l=Math.sqrt(t*t+a*a);return"M"+e.source.x+","+e.source.y+"A"+l+","+l+" 0 0,1 "+e.target.x+","+e.target.y}function v(e){return"translate("+e.x+","+e.y+")"}}))}});class u{constructor(e,t){if(void 0===t.csrf)throw new Error("ModalHandler::Missing CSRF token!");this.element=e,this.dialog=$(e).closest(".modal"),this.options=t,this.csrf=t.csrf,this.dontDisableSubmit=t.dontDisableSubmit,this.observer=new MutationObserver((e=>{this.bindFormValidation(),this.toggleFormSubmission(),this.initDataPatterns()})),this.observer.observe(this.element[0],{childList:!0,subtree:!0}),this.initialState=null,this.currentState=null,this.firstCloseAttempt=!1,this.isSubmitting=!1;if(0==$(this.element).find("[type='submit']").length)throw new Error("ModalHandler::The submit button was not found inside the form!");this.toggleFormSubmission()}initDataPatterns(){NtopUtils.initDataPatterns()}createFormSnapshot(){const e={inputs:{},hidden:[]};return $(this.element).find('textarea,select,input[type!="radio"]').each((function(){const t=$(this).prop("nodeName").toLowerCase(),a=$(this).attr("name");e.inputs[`${t}[name='${a}']`]=$(this).val()})),$(this.element).find("[style='display: none;'], span.invalid-feedback").each((function(){e.hidden.push($(this))})),e}compareFormSnaphsot(e,t){if(null==e||null==t)return!0;for(let[a,l]of Object.entries(e.inputs))if(t.inputs[a]!=l)return!1;return!0}delegateModalClosing(){const e=this;$(this.dialog).find("button.cancel").off("click").click((function(){e.firstCloseAttempt=!1,$(e.element)[0].reportValidity(),$(e.dialog).find(".confirm-closing").fadeOut(100,(function(){$(e.dialog).find("button.btn-close").fadeIn(100)}))})),$(this.dialog).off("hide.bs.modal").on("hide.bs.modal",(function(t){e.isSubmitting?t.preventDefault():e.compareFormSnaphsot(e.currentState,e.initialState)||e.firstCloseAttempt||(t.preventDefault(),e.firstCloseAttempt=!0,$(e.dialog).find("button.btn-close").fadeOut(100,(function(){$(e.dialog).find(".confirm-closing").fadeIn(100)})))})),$(this.dialog).off("hidden.bs.modal").on("hidden.bs.modal",(function(t){for(const[t,a]of Object.entries(e.initialState.inputs))$(e.dialog).find(t).val(a),$(e.dialog).find(t).removeClass("is-invalid");e.initialState.hidden.forEach((e=>{e.hide()})),e.element.find("[type='submit']").attr("disabled","disabled"),e.currentState=null,e.firstCloseAttempt=!1,$(e.dialog).find(".confirm-closing").fadeOut(100,(function(){$(e.dialog).find("button.btn-close").fadeIn(100)})),e.cleanForm()}))}fillFormModal(){return this.options.loadFormData()}invokeModalInit(e={}){const t=this;this.delegateModalClosing(),this.data=e||this.fillFormModal(),this.options.onModalInit(this.data,this),$(this.element).parents(".modal").on("show.bs.modal",(function(){t.options.onModalShow()})),this.initialState=this.createFormSnapshot(),this.currentState=null,this.delegateResetButton()}delegateSubmit(){this.bindFormValidation();const e=this;this.submitHandler=function(t){e.options.isSyncRequest||(t.preventDefault(),t.stopPropagation(),e.makeRequest())},$(this.element).on("submit",this.submitHandler)}bindFormValidation(){const e=this;$(this.element).find("input,select,textarea").each((async function(t,a){const l=$(this);let n=-1;const s=async e=>e.data.resolveDNS&&l.val().match(NtopUtils.REGEXES.domainName)?await(async()=>{const e=l.parent().find(".spinner-border");l.attr("readonly",!0),e.show();const t=await NtopUtils.resolveDNS($(a).val());return l.removeAttr("readonly"),e.hide(),t.rc<0?(a.setCustomValidity(t.rc_str),[!1,t.rc_str_hr]):(a.setCustomValidity(""),[!0,"Success"])})():e.data.cannotBeEmpty&&e.isInputEmpty?(a.setCustomValidity("Please fill the input."),[!1,e.data.validationEmptyMessage||i18n_ext.missing_field]):a.validity.patternMismatch?(a.setCustomValidity("Pattern mismatch."),[!1,e.data.validationMessage||i18n_ext.invalid_field]):a.validity.rangeOverflow?(a.setCustomValidity("Value exceed the maximum value."),[!1,e.data.rangeOverflowMessage||i18n_ext.invalid_field]):a.validity.rangeUnderflow?(a.setCustomValidity("Value is under the minimum value."),[!1,e.data.rangeUnderflowMessage||i18n_ext.invalid_field]):(a.setCustomValidity(""),[!0,"Success"]),o=async()=>{const e={data:{validationMessage:l.data("validationMessage"),validationEmptyMessage:l.data("validationEmptyMessage"),cannotBeEmpty:"required"===l.attr("required")||1==l.data("validationNotEmpty"),resolveDNS:l.data("validationResolvedns"),rangeOverflowMessage:l.data("validationRangeOverflowMessage"),rangeUnderflowMessage:l.data("validationUnderflowOverflowMessage")},isInputEmpty:"string"==typeof l.val()&&""==l.val().trim()},[t,a]=await s(e);let n=l.parent().find(".invalid-feedback");0==n.length&&(n=$("<span class='invalid-feedback'></span>")),t?(l.removeClass("is-invalid"),n.fadeOut(500,(function(){$(this).remove()}))):(l.addClass("is-invalid"),l.parent().append(n),n.text(a))};$(this).off("input").on("input",(function(t){e.currentState=e.createFormSnapshot(),-1!=n&&clearTimeout(n),l.attr("formnovalidate")||(n=setTimeout((()=>{o(),e.toggleFormSubmission()}),300),e.firstCloseAttempt=!1)})),$(this).off("invalid").on("invalid",(function(e){e.preventDefault(),l.attr("formnovalidate")||o()}))}))}getModalID(){return $(this.element).parents(".modal").attr("id")}toggleFormSubmission(){let e=!0;$(this.element).find("input:not(:disabled),select:not(:disabled),textarea:not(:disabled)").each((function(t,a){e&=a.validity.valid})),e?$(this.element).find("[type='submit'],[type='test']").removeAttr("disabled"):$(this.element).find("[type='submit'],[type='test']").attr("disabled","disabled")}cleanForm(){$(this.element).find("input,textarea,select").each((function(e,t){$(this).removeClass("is-valid").removeClass("is-invalid")})),$(this.element)[0].reset()}makeRequest(){const e=$(this.element).find(".invalid-feedback"),t=$(this.element).find("[type='submit']");let a=this.options.beforeSumbit(this.data);a.csrf=this.csrf,a=$.extend(a,this.options.submitOptions),t.attr("disabled","disabled");const l=this;if(this.options.endpoint){let n;n="post"==l.options.method?$.ajax({url:this.options.endpoint,data:JSON.stringify(a),method:l.options.method,dataType:"json",contentType:"application/json; charset=utf-8"}):$.get(this.options.endpoint,a),this.isSubmitting=!0,n.done((function(t,n){l.isSubmitting=!1,l.currentState=null,l.options.resetAfterSubmit&&l.cleanForm(),e.hide();l.options.onSubmitSuccess(t,a,l)&&(l.dialog.modal?l.dialog.modal("hide"):(l.dialog[0].hidden=!0,$(".modal-backdrop.fade.show").remove())),$(l.element).off("submit",l.submitHandler),l.delegateSubmit()})).fail((function(t,n,s){l.isSubmitting=!1;const o=t.responseJSON;void 0!==o.rc&&o.rc<0&&e.html(o.rc_str_hr).show(),l.options.onSubmitError(o,a,n,s)})).always((function(e){t.removeAttr("disabled")}))}else{l.currentState=null,e.hide();l.options.onSubmitSuccess({},a,l)&&(l.dialog.modal?l.dialog.modal("hide"):l.dialog[0].hidden=!0),$(l.element).off("submit",l.submitHandler),l.delegateSubmit(),t.removeAttr("disabled")}}delegateResetButton(){const e=this,t=$(this.element).find("[type='reset']");if(0==t.length)return;const a=NtopUtils.serializeFormArray($(this.element).serializeArray());t.click((function(t){t.preventDefault(),$(e.element).find("input:visible,select").each((function(e,t){const l=$(t).attr("name");$(t).val(a[l]).removeClass("is-invalid").removeClass("is-valid")}))}))}}const d={no_formatting:{id:"no_formatting",um:null,step:null,decimal:null,scale_values:null},number:{id:"number",um:["","K","M","G","T"],step:1e3,decimal:null,scale_values:null},full_number:{id:"number",um:["","K","M","G","T"],step:1e3,decimal:null,scale_values:null,thousands_sep:","},bytes:{id:"bytes",um:["B","KB","MB","GB","TB","PB","EB"],step:1024,decimal:2,scale_values:null,absolute_value:!0},bps:{id:"bps",um:["bps","Kbps","Mbps","Gbps","Tbps","Pbps"],step:1e3,decimal:2,scale_values:8,absolute_value:!0},flows:{id:"flows",um:["flows","Kflows","Mflows","Gflows"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},fps:{id:"fps",um:["flows/s","Kflows/s","Mflows/s","Gflows/s"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},alerts:{id:"alerts",um:["alerts","Kalerts","Malerts","Galerts"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},alertps:{id:"alertps",um:["alerts/s","Kalerts/s","Malerts/s","Galerts/s"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},hits:{id:"hits",um:["hits","Khits","Mhits","Ghits"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},hitss:{id:"hitss",um:["hits/s","Khits/s","Mhits/s","Ghits/s"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},packets:{id:"packets",um:["packets","Kpackets","Mpackets","Gpackets","Tpackets"],step:1e3,decimal:0,scale_values:null,absolute_value:!0},pps:{id:"pps",um:["pps","Kpps","Mpps","Gpps","Tpps"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},ms:{id:"ms",um:["ms","s"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},percentage:{id:"percentage",um:["%"],step:101,decimal:0,scale_values:null,max_value:100,absolute_value:!0}};function _(e){let t=d[e],a=3;null!=t.decimal&&t.decimal>0&&(a=6);let l=0;return null!=t.um&&(l=Math.max(...t.um.map((e=>e.length)))),a+1+l}function p(e,t){let a=d[e];if(e==d.no_formatting.id||null==t)return null;null!=a.scale_values&&(t*=a.scale_values);let l=a.step;t<0&&(t*=-1);let n=0,s=a.um;for(;t>=l&&n<s.length;)t/=l,n+=1;return n}function f(e,t,a){let l=d[e];if(null==l)return null;t|=l.absolute_value;return function(n){if(null==n)return"";if(e==d.no_formatting.id)return n;null!=l.scale_values&&(n*=l.scale_values);let s=n<0;if(s&&(n*=-1),null!=l.max_value&&n>l.max_value&&(n=l.max_value),l.thousands_sep){for(var o=(n+="").split("."),i=o[0],r=o.length>1?"."+o[1]:"",c=/(\d+)(\d{3})/;c.test(i);)i=i.replace(c,"$1,$2");return i+r}let u=l.step,_=l.decimal,p=l.um,f=0;for(;n>=u&&f<p.length&&!a||null!=a&&f<a;)n/=u,f+=1;return null!=_&&_>0?(n*=Math.pow(10,_),n=Math.round(n),n=(n/=Math.pow(10,_)).toFixed(_)):n=Math.round(n),s&&!t&&(n*=-1),`${`${n}`} ${`${p[f]}`}`}}const v={types:d,getUnitMeasureLen:_,getFormatter:f,getScaleFactorIndex:p};window.NtopUtils=a,window.datatableInitRefreshRows=function(e,t,a,l){var n=e.data("datatable"),s=n.resultset.data,o=e.data("dt-rr-timer"),i=e.data("dt-rr-ajax");l=l||{},o&&(clearInterval(o),e.removeData("dt-rr-timer")),i&&(i.abort(),e.removeData("dt-rr-ajax"));var c=[],u={};for(var d in s){var _=s[d];if(_[t]){var p=_[t];u[p]=d,c.push(p)}}var f={custom_hosts:c.join(",")},v=n.options.url,m=!0,h=function(a){if("string"==typeof a&&(a=JSON.parse(a)),a){for(var s in a.data){var o=a.data[s],i=o[t];if(i&&u[i]){var c=u[i],d=n.rows[c],_=$("td",d);for(var p in o){var f=_[r(e,p)],v=$(f),h=v.data("dt-rr-cur-val")||$(f).html(),g=l[p],b=o[p],y="";g&&(parseFloat(b)!=b&&console.warn("Invalid number: "+b),m||(y=" "+NtopUtils.drawTrend(parseFloat(b),parseFloat(h))),v.data("dt-rr-cur-val",b),b=g(b)),$(f).html(0!=b?b+y:"")}}}m=!1,e.removeData("dt-rr-ajax")}else console.error("Bad JSON result")};e.data("dt-rr-timer",setInterval((function(){e.data("dt-rr-ajax")||e.data("dt-rr-ajax",$.ajax({type:"GET",url:v,data:f,cache:!1,success:h}))}),a)),h(n.resultset)},window.datatableForEachRow=function(e,t){$("tr:not(:first)",e).each((function(e){var a;if("function"==typeof t)t.bind(this)(e);else for(a=0;a<t.length;a++)t[a].bind(this)(e)}))},window.datatableIsEmpty=s,window.datatableRemoveEmptyRow=function(e){$("tbody tr.emptyRow",$(e)).remove()},window.datatableAddEmptyRow=l,window.datatableGetNumDisplayedItems=n,window.datatableGetByForm=o,window.datatableUndoAddRow=function(e,t,a,n){a&&$(a).removeAttr("disabled").removeClass("disabled");var i=$(e).closest("form");$(e).remove(),aysUpdateForm(i);var r=o(i);s(r)&&l(r,t),n&&window[n](e)},window.datatableAddButtonCallback=i,window.datatableAddDeleteButtonCallback=function(e,t,a){i.bind(this)(e,a,"btn-danger",t,"javascript:void(0)",!0,"Delete")},window.datatableAddActionButtonCallback=function(e,t,a,l=!0,n=""){i.bind(this)(e,a,"btn-info",t,"javascript:void(0)",l,n)},window.datatableAddFilterButtonCallback=function(e,t,a,l="",n=!0){i.bind(this)(e,a,"btn-warning",t,"javascript:void(0)",n,l)},window.datatableAddLinkButtonCallback=function(e,t,a,l=""){i.bind(this)(e,a,"btn-info","",t,!0,l)},window.datatableMakeSelectUnique=function(e,t,a){function l(e,t,a,l){$("[id^="+t+"]").each((function(){var t=a($(this));t[0]!=e[0]&&l(t)}))}function n(e,t){if(t)e.removeAttr("disabled");else{var a=e.closest("select"),l=a.val()==e.val();if(e.attr("disabled","disabled"),l){var n=a.find("option:not([disabled])").first().val();a.val(n),a.attr("data-old-val",n)}}}function s(e,t,a){var s=$(this).attr("data-old-val")||"",o=$(this).val()||"",i=[];s==o&&(s=""),l($(this),e,t,(function(e){n(e.find("option[value='"+s+"']"),!0),n(e.find("option[value='"+o+"']"),!1),i.push(e)})),a($(this),s,o,i,n),$(this).attr("data-old-val",o)}var o=(a=NtopUtils.paramsExtend({on_change:$.noop,selector_fn:function(e){return e.find("select").first()}},a)).selector_fn(e);o.on("change",(function(){s.bind(this)(t,a.selector_fn,a.on_change)})),o.on("remove",(function(){$(this).val("").trigger("change")})),function(e,t,a){e.val(""),l(e,t,a,(function(e){e.trigger("change")}));var n=e.find("option:not([disabled])").first().val();e.val(n),e.trigger("change")}(o,t,a.selector_fn)},window.datatableIsLastPage=function(e){var t=$("#dt-bottom-details .pagination li:nth-last-child(3)",$(e));return!(1==t.length&&0==t.hasClass("active"))},window.datatableGetColumn=function(e,t,a){var l=e.data("datatable").resultset.data.filter((function(e){return e[t]===a}));if(l)return l[0]},window.datatableGetColumnIndex=r,window.$.fn.modalHandler=function(e){if(1!=this.length)throw new Error("Only a form element can by initialized!");const t=$.extend({csrf:"",endpoint:"",resetAfterSubmit:!0,dontDisableSubmit:!1,isSyncRequest:!1,method:"get",loadFormData:function(){},onModalInit:function(e){},onModalShow:function(){},beforeSumbit:function(){return{}},onSubmitSuccess:function(e){},onSubmitError:function(e,t,a){},onModalReset:function(e){}},e),a=new u(this,t);return a.delegateSubmit(),a},window.ebpfUtils=c,window.ntopFormatterUtils=v;var m={};window.makeUniqueValidator=function(e){return function(t){var a=t.val(),l=0;return!a||(e(t).each((function(){$(this).val()==a&&(l+=1)})),1==l)}},window.memberValueValidator=function(e){var t=e.val();return""===t||(NtopUtils.is_mac_address(t)||NtopUtils.is_network_mask(t,!0))},window.makePasswordPatternValidator=function(e){return function(t){return!t.val()||$(t).val().match(e)}},window.passwordMatchValidator=function(e){var t=$(e).closest("form").find("[data-passwordmatch]").not(e);return!e.val()||!t.val()||t.val()===e.val()},window.poolnameValidator=function(e){return!e.val()||$(e).val().match(/^[a-z0-9_]*$/)},window.passwordMatchRecheck=function(e){var t=$(e).find("[data-passwordmatch]"),a=0;t.each((function(){""!=$(this).val()&&a++})),a==t.length&&t.trigger("input")},window.hostOrMacValidator=function(e){var t=e.val();return""===t||(NtopUtils.is_mac_address(t)||NtopUtils.is_good_ipv4(t)||NtopUtils.is_good_ipv6(t))},window.ipAddressValidator=function(e){var t=e.val();return""===t||(NtopUtils.is_good_ipv4(t)||NtopUtils.is_good_ipv6(t))},window.bpfValidator=function(e,t=!1){var a=e.val();if(""===a.trim())return!0;var l=e.attr("name");m[l]||(m[l]={ajax_obj:null,valid:!0,timer:null,submit_remind:!1,last_val:null});var n=m[l],s=function(){n.timer=null;var e=function(e){n.ajax_obj=null,n.valid=e,n.last_val=a};n.last_val!==a?(n.ajax_obj&&n.ajax_obj.abort(),n.ajax_obj=$.ajax({type:"GET",url:`${http_prefix}/lua/pro/rest/v2/check/filter.lua`,async:!t,data:{query:a},error:function(){e(n.valid)},success:function(t){var a=!!t.response;e(a)}})):e(n.valid)};return t?s():n.last_val===a||(n.timer&&(clearTimeout(n.timer),n.submit_remind=!1),n.timer=setTimeout(s,250)),n.valid};const h=function(){let e={},t=[];return{ready:function(a){e[a]=!0,t.filter((e=>e.component_name==a)).forEach((e=>e.resolve())),t=t.filter((e=>e.component_name!=a))},on_ready:function(a){return new Promise(((l,n)=>{e[a]?l():t.push({resolve:l,component_name:a,completed:!1})}))}}}(),b=function(){let e={};return{is_array:function(e){return Array.isArray(e)},is_object:function(e){return"object"==typeof e&&!this.is_array(e)&&null!==e},clone:function(e){if(null==e)return null;if(this.is_object(e))return $.extend(!0,{},e);if(Array.isArray(e)){let t=[];for(let a=0;a<e.length;a+=1){let l=this.clone(e[a]);t.push(l)}return t}return e},object_to_array:function(e){if(null==e)return[];let t=[];for(let a in e)t.push(e[a]);return t},get_utc_seconds:function(e){return null==e&&(e=Date.now()),Number.parseInt(e/1e3)},get_timeframes_dict:function(){const e=60;let t=new Date,a=new Date,l=new Date,n=new Date;return{min:e,"5_min":300,"10_min":600,"30_min":1800,hour:3600,"2_hours":7200,"6_hours":21600,"12_hours":43200,day:this.get_utc_seconds(Date.now()-t.setDate(t.getDate()-1)),week:this.get_utc_seconds(Date.now()-a.setDate(a.getDate()-7)),month:this.get_utc_seconds(Date.now()-l.setMonth(l.getMonth()-1)),year:this.get_utc_seconds(Date.now()-n.setMonth(n.getMonth()-12))}},get_timeframe_from_timeframe_id:function(e){let t=this.get_timeframes_dict();if(null==t[e])throw`Wrong timeframe_id passed ${e}, valid intervals are: ${Object.keys(t).join(", ")}`;return t[e]},round_time_by_timeframe_id:function(e,t){return e-e%this.get_timeframe_from_timeframe_id(t)},set_default_time_interval:function(e="30_min",t){let a={epoch_begin:x.get_url_entry("epoch_begin"),epoch_end:x.get_url_entry("epoch_end")};const l=this.get_utc_seconds(Date.now());let n=this.get_timeframe_from_timeframe_id(e);return a.epoch_begin=l-n,a.epoch_end=l,null!=t&&(a.epoch_begin=this.round_time_by_timeframe_id(a.epoch_begin,t),a.epoch_end=this.round_time_by_timeframe_id(a.epoch_end,t)),x.set_key_to_url("epoch_begin",a.epoch_begin),x.set_key_to_url("epoch_end",a.epoch_end),a},check_and_set_default_time_interval:function(e="30_min",t,a=!1,l){let n=this.get_url_epoch_interval();return null==n.epoch_begin||null==n.epoch_end||null!=t&&1==t(n)?(n=this.set_default_time_interval(e,l),n):1==a?n:null},get_url_epoch_interval:function(){return{epoch_begin:x.get_url_entry("epoch_begin"),epoch_end:x.get_url_entry("epoch_end")}},from_utc_s_to_server_date:function(e){let t=1e3*e,a=new Date(t).getTimezoneOffset(),l=moment.tz(t,ntop_zoneinfo)._offset;return new Date(t+1e3*(l+a)*60)},get_date_format:async function(e,t,a){const l={csrf:t};let n=`${a}/lua/rest/v2/get/timeseries/date_format.lua`;const s=NtopUtils.buildURL(n,{is_range_picker:e});return await b.http_request(s,l)},from_utc_to_server_date_format:function(e,t){return null==t&&(t="DD/MMM/YYYY HH:mm"),moment.tz(e,ntop_zoneinfo).format(t)},copy_object_keys:function(e,t,a=!1){if(null!=e)for(let l in e)null!=e[l]&&"__proto__"!==l&&"constructor"!==l&&(1==a&&this.is_object(e[l])&&this.is_object(t[l])?this.copy_object_keys(e[l],t[l],a):t[l]=e[l])},get_cve_details_url:(e,t)=>"cve"==t?`https://nvd.nist.gov/vuln/detail/${e}`:"openvas"==t?`https://vulners.com/openvas/OPENVAS:${e}`:void 0,set_http_globals_headers(t){e=t},http_post_request:async function(e,t,a,l){if(null==t.csrf)throw`NULL csrf in ${e} POST request.`;return this.http_request(e,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)},a,l)},http_request:async function(t,a,l,n){try{null==a&&(a={}),null==a.headers&&(a.headers={}),null!=a.headers&&null!=e&&(a.headers={...a.headers,...e});let l=await fetch(t,a);if(!1===l.ok)return console.error(`http_request ${t}\n ok == false`),console.error(l),null;let s=await l.json();return!0===n?s:s.rsp}catch(e){if(console.error(e),console.error("URL: "+t),1==l)throw e;return null}},download_URI:function(e,t){var a=document.createElement("a");a.download=t,a.href=e,document.body.appendChild(a),a.click(),document.body.removeChild(a)},get_random_string:function(){return Math.random().toString(16).substr(2,8)},string_hash_code:function(e){let t,a,l=0;if(0===e.length)return l;for(t=0;t<e.length;t++)a=e.charCodeAt(t),l=(l<<5)-l+a,l|=0;return l},mod:function(e,t){return(e%=t)<0&&(e+=t),e}}}(),y=function(){let e={},t={};const a=e=>b.clone(e),l=function(e,l){for(let n in t){if(n==l)continue;(0,t[n])(a(e))}};return{get_status:function(t){return 1==t?e:a(e)},update_subscribers:function(){const e=this.get_status();l(e)},on_status_change:function(e,l,n){if(t[e]=l,1==n){let e=this.get_status();l(a(e))}},replace_status:function(t,a){!function(t){e=t}(t),l(t,a)},add_obj_to_status:function(e,t){let a=this.get_status();b.copy_object_keys(e,a),this.replace_status(a,t)},add_value_to_status:function(e,t,a){let l=this.get_status();l[e]=t,this.replace_status(l,a)}}}(),w={},x=function(){let e={};return b.copy_object_keys(w,e),{get_url_params:function(){return window.location.search.substring(1)},get_url_search_params:function(e){null==e&&(e=this.get_url_params());return new URLSearchParams(e)},get_url_entries:function(e){return this.get_url_search_params(e).entries()},get_url_entry:function(e,t){let a=this.get_url_entries(t);for(const[t,l]of a)if(t==e)return l;return null},get_url_object:function(e){let t=this.get_url_entries(e),a={};for(const[e,l]of t)a[e]=l;return a},open_new_window:function(e){null==e&&(e=window.location),window.open(e)},reload_url:function(){window.location.reload()},go_to_url:function(e){window.history.pushState({},"",window.location),window.location.replace(e)},replace_url:function(e){window.history.replaceState({},null,`?${e}`)},replace_url_and_reload:function(e){this.replace_url(e),this.reload_url()},serialize_param:function(e,t){return null==t&&(t=""),`${e}=${encodeURIComponent(t)}`},set_custom_key_serializer:function(t,a){e[t]=a},obj_to_url_params:function(t){let a=[];const l=this.serialize_param;for(let n in t){let s=e[n];null==s&&(s=l);let o=s(n,t[n]);a.push(o)}return a.join("&")},delete_params:function(e){let t=this.get_url_search_params();e.forEach((e=>{t.delete(e)})),this.replace_url(t.toString())},delete_key_from_url:function(e){let t=this.get_url_search_params();t.delete(e),this.replace_url(t.toString())},set_key_to_url:function(e,t){null==t&&(t="");let a=this.get_url_search_params();a.set(e,t),this.replace_url(a.toString())},add_obj_to_url:function(e,t){let a=this.obj_to_url_params(e),l=this.get_url_search_params(t),n=this.get_url_entries(a);for(const[e,t]of n)l.set(e,t);let s=l.toString();if(null!=t)return s;this.replace_url(s)}}}(),k={EPOCH_CHANGE:"epoch_change",FILTERS_CHANGE:"filters_change"},S={EPOCH_CHANGE:function(e,t){return e.epoch_begin!=t.epoch_begin||e.epoch_end!=t.epoch_end},FILTERS_CHANGE:function(e,t){return null==e.filters&&null!=t.filters||null!=e.filters&&null==t.filters||null!=e.filters&&null!=t.filters&&(e.filters.length!=t.filters.length||e.filters.some((e=>null==t.filters.find((t=>t.id==e.id)))))}},C={SHOW_MODAL_FILTERS:"show_modal_filters",MODAL_FILTERS_APPLY:"modal_filters_apply",SHOW_GLOBAL_ALERT_INFO:"show_global_alert_info",VIS_DATA_LOADED:"vis_data_loaded",CHANGE_PAGE_TITLE:"change_page_title",DATATABLE_LOADED:"datatable_loaded",GET_INTERFACE_FATA:"get_interface_data",COMPONENT_EPOCH_INTERVAL_CHANGE:"component_epoch_interval_change"},N=function(){const e="events_manager";let t={},a={};const l=e=>b.clone(e),n=function(e,t,a){for(let n in e){if(n==a)continue;(0,e[n])(l(t))}},s=(e,t)=>`${e}_${t}`;y.on_status_change(e,(function(e){for(let l in k){if(1==(0,S[l])(e,t)){let t=a[l];n(t,e)}}t=e}),!0);const o=function(e,t,l,o){null!=o&&(e=s(e,o));let i=a[e];null!=i&&n(i,t,l)},i=function(e,t,n,o,i){if(1==i&&(t=s(t,e)),null==a[t]&&(a[t]={}),1==o){let e=y.get_status();n(l(e))}a[t][e]=n};return{emit_custom_event:function(e,t,a){o(e,t,null,a)},on_custom_event:function(e,t,a,l){i(e,t,a,null,l)},emit_event:function(t,a,l){o(t,a,l),y.add_obj_to_status(a,e)},on_event_change:function(e,t,a,l){i(e,t,a,l)}}}();function A(e,t,a,l,n){this.name=e,this.update_url=t,this.url_params=a,this.units=l,this.refresh=n;let s=[],o="",i=[],r=[],c=[];var u=[],d=[],_=[],p=function(e,t){var a=500,l=325,n=52,s=14,o=250,i=116;$(e).hasClass("pie-chart-small")&&(l=250,n=(i=(a=330)/5+15)/2);var r=d3.layout.pie().value((function(e){return 0==e.value&&(e.value=1),e.value})),c=d3.scale.category20(),u=d3.svg.arc().startAngle((function(e){return e.startAngle})).endAngle((function(e){return e.endAngle})).innerRadius(n).outerRadius(i),d=d3.select(e).append("svg:svg").attr("width",a).attr("height",l).attr("viewBox","0 0 "+a+" "+l).attr("preserveAspectRatio","xMidYMid"),_=d.append("svg:g").attr("class","arc").attr("transform","translate("+a/2+","+l/2+")"),p=d.append("svg:g").attr("class","label_group").attr("transform","translate("+a/2+","+l/2+")"),f=d.append("svg:g").attr("class","center_group").attr("transform","translate("+a/2+","+l/2+")");_.append("svg:circle").attr("fill","#EFEFEF").attr("r",i),f.append("svg:circle").attr("fill","white").attr("r",n);var v=null,m=null;t&&(f.append("svg:text").attr("class","label").attr("dy",-15).attr("text-anchor","middle").text("TOTAL"),m=f.append("svg:text").attr("class","total").attr("dy",7).attr("text-anchor","middle").text("Waiting..."),v=f.append("svg:text").attr("class","units").attr("dy",21).attr("text-anchor","middle").text(t));return[_,r,m,v,c,o,u,p,f,i,s]}(e,l),f=p[0],v=p[1],m=p[2],h=p[4],g=p[5],b=p[6],y=p[7],w=p[9],x=p[10];function k(e,t){return e.label<t.label?-1:e.label>t.label?1:0}function S(e,t){var a,l;d[t]?(a=d[t].startAngle,l=d[t].endAngle):!d[t]&&d[t-1]?(a=d[t-1].endAngle,l=d[t-1].endAngle):!d[t-1]&&d.length>0?(a=d[d.length-1].endAngle,l=d[d.length-1].endAngle):(a=0,l=0);t=d3.interpolate({startAngle:a,endAngle:l},{startAngle:e.startAngle,endAngle:e.endAngle});return function(e){var a=t(e);return b(a)}}function C(e,t){s0=2*Math.PI,e0=2*Math.PI;t=d3.interpolate({startAngle:e.startAngle,endAngle:e.endAngle},{startAngle:s0,endAngle:e0});return function(e){var a=t(e);return b(a)}}function N(e,t){var a;a=d[t]?(d[t].startAngle+d[t].endAngle-Math.PI)/2:!d[t]&&d[t-1]?(d[t-1].startAngle+d[t-1].endAngle-Math.PI)/2:!d[t-1]&&d.length>0?(d[d.length-1].startAngle+d[d.length-1].endAngle-Math.PI)/2:0;var l=(e.startAngle+e.endAngle-Math.PI)/2,n=d3.interpolateNumber(a,l);return function(e){var t=n(e);return"translate("+Math.cos(t)*(w+x)+","+Math.sin(t)*(w+x)+")"}}this.update=function(){$.ajax({type:"GET",url:this.update_url,data:this.url_params,success:function(e){let t;"object"==typeof e?t=e:"string"==typeof e&&(t=jQuery.parseJSON(e)),t&&function(e){e.rsp&&(e=e.rsp);e.sort(k),s=e,d=_,u=v(s);var t=0;function a(e,a,l){return e.name=s[a].label,e.value=s[a].value,e.url=s[a].url,t+=e.value,e.value>0}(_=u.filter(a)).length>0&&d.length>0&&(f.selectAll("circle").remove(),m&&m.text((function(){return(t/1024).toFixed(1)})),o=f.selectAll("path").data(_),o.enter().append("svg:path").attr("stroke","white").attr("stroke-width",.5).attr("fill",(function(e,t){return h(t)})).transition().duration(g).attrTween("d",S),o.transition().duration(g).attrTween("d",S),o.exit().transition().duration(g).attrTween("d",C).remove(),i=y.selectAll("line").data(_),i.enter().append("svg:line").attr("x1",0).attr("x2",0).attr("y1",-w-3).attr("y2",-w-8).attr("stroke","gray").attr("transform",(function(e){return"rotate("+(e.startAngle+e.endAngle)/2*(180/Math.PI)+")"})),i.transition().duration(g).attr("transform",(function(e){return"rotate("+(e.startAngle+e.endAngle)/2*(180/Math.PI)+")"})),i.exit().remove(),r=y.selectAll("text.value").data(_).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?5:-7})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){return(e.value/t*100).toFixed(1)+"%"})),r.enter().append("svg:text").attr("class","value").attr("transform",(function(e){return"translate("+Math.cos((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+","+Math.sin((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+")"})).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?5:-7})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){if(t<=1)return"";return(e.value/t*100).toFixed(1)+"%"})),r.transition().duration(g).attrTween("transform",N),r.exit().remove(),c=y.selectAll("text.units").data(_).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?17:5})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){return e.name})).on("click",(function(e){e.url&&(window.location.href=e.url)})),c.enter().append("svg:text").attr("class","units").attr("transform",(function(e){return"translate("+Math.cos((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+","+Math.sin((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+")"})).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?17:5})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){return e.name})).on("click",(function(e){e.url&&(window.location.href=e.url)})),c.transition().duration(g).attrTween("transform",N),c.exit().remove())}(t)}})},this.update(),this.update()}window.ntopng_events=k,window.ntopng_events_manager=N,window.ntopng_status_manager=y,window.ntopng_utility=b,window.ntopng_url_manager=x,window.ntopng_sync=h,window.ntopng_custom_events=C,A.prototype.setUrlParams=function(e){this.url_params=e,this.forceUpdate()},A.prototype.forceUpdate=function(e){this.stopInterval(),this.update(),this.startInterval()},A.prototype.setInterval=function(e){this.pieInterval=e},A.prototype.stopInterval=function(){clearInterval(this.pieInterval)},A.prototype.startInterval=function(){this.pieInterval=setInterval(this.update(),this.refresh)};const E={},T={db_analyze:function(e,t,a){const{dataPointIndex:l}=a,{filter:n}=a.w.config;let s;if(a.w.config.filtering_labels&&(s=a.w.config.filtering_labels[l]),0==n.length||void 0===s)return;let o=ntopng_status_manager.get_status().filters;o.push({id:n[0],operator:"eq",value:s}),ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:o})},none:function(e,t,a){},standard:function(e,t,a){const{seriesIndex:l,dataPointIndex:n}=a,{series:s}=a.w.config;if(-1===l)return;if(void 0===s)return;const o=s[l];if(void 0!==o.base_url){const e=o.start_url||"",t=o.data[n].meta.url_query;location.href=`${o.base_url}?${e}${t}`}}},P={format_bytes:function(e,{config:t,seriesIndex:a,dataPointIndex:l}){return NtopUtils.bytesToSize(e)},format_pkts:function(e,{config:t,seriesIndex:a,dataPointIndex:l}){return NtopUtils.formatPackets(e)},format_value:function(e,{config:t,seriesIndex:a,dataPointIndex:l}){return NtopUtils.formatValue(e)},format_multiple_date:function(e,{config:t,seriesIndex:a,dataPointIndex:l}){return new Date(e[0])+" - "+new Date(e[1])},format_label_from_xy:function({series:e,seriesIndex:t,dataPointIndex:a,w:l}){const n=l.config.series[t].data[a],s=n.x,o=n.y;return`\n            <div class='apexcharts-theme-light apexcharts-active' id='test'>\n                <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n                    ${n.meta.label}\n                </div>\n                <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${l.config.xaxis.title.text}</b>: ${s}\n                    </div>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${l.config.yaxis[0].title.text}</b>: ${o}\n                    </div>\n                </div>\n            </div>`},format_label_from_xname:function({series:e,seriesIndex:t,dataPointIndex:a,w:l}){const n=l.config.series[t].data[a],s=n.name,o=n.y;return`\n            <div class='apexcharts-theme-light apexcharts-active' id='test'>\n                <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n                    ${n.meta.label}\n                </div>\n                <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${l.config.xaxis.title.text}</b>: ${s}\n                    </div>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${l.config.yaxis[0].title.text}</b>: ${o}\n                    </div>\n                </div>\n            </div>`}},U=P.format_value;class I{static registerWidget(e){if(null===e)throw new Error("The passed widget reference is null!");if(e.name in E)throw new Error(`The widget ${e.name} is already defined!`);E[e.name]=e}static getWidgetByName(e){if(e in E)return E[e];throw new Error(`Widget ${e} not found!`)}}class O{constructor(e,t={},a=0,l={}){this._fetchedData=[],this.name=e,this._updateTime=a,this._datasource=t,this._additionalParams=l}async init(){I.registerWidget(this),this._fetchedData=await this._fetchData(),this._updateTime>0&&setInterval((async()=>{await this.update(this._datasource.params)}),this._updateTime)}async destroy(){}async destroyAndUpdate(e={}){await this.destroy(),await this.update(e)}async updateByUrl(e){const t=new URL(`${location.origin}${this._datasource.name}`);let a=ntopng_url_manager.get_url_entries(e);for(const[e,l]of a)t.searchParams.set(e,l);this._datasource.endpoint=t.pathname+t.search,this._fetchedData=await this._fetchData()}async update(e={}){const t=new URL(`${location.origin}${this._datasource.name}`);for(const[a,l]of Object.entries(e))t.searchParams.set(a,l);this._datasource.endpoint=t.pathname+t.search,this._fetchedData=await this._fetchData()}async _fetchData(){const e=await fetch(`${http_prefix}${this._datasource.endpoint}`);return await e.json()}}const M=(e,t)=>{let a=t.position().top;const l=e.height(),n=$(window).height();if(l+a>=n){const s=n-a;s<=150?a=a-l+t.outerHeight():e.css({"max-height":s-20,"overflow-y":"auto"})}e.css("top",`${a}px`)};$(window).on("scroll",(function(){$(this).scrollTop()>=32?$("#n-navbar").addClass("scrolled bg-light"):$("#n-navbar").removeClass("scrolled bg-light")})),$((()=>{const e=()=>{if(0==$(".sidebar-close-layer").length){const e=$("<div class='sidebar-close-layer' style='display:none'></div>");e.on("click",(function(){$("#n-sidebar").removeClass("active"),e.fadeOut((function(){$(this).remove()}))})),$("#wrapper").append(e),e.fadeIn()}else $(".sidebar-close-layer").fadeOut((function(){$(this).remove()}));$("#n-sidebar").toggleClass("active")};$("#n-sidebar a.submenu").bind({mouseenter:function(){let e=$(this).parent().find("div[id$='submenu']");M(e,$(this)),e.show()},mouseleave:function(){$(this).parent().find("div[id$='submenu']").hide()}}),$("div[id$='submenu']").bind({mouseenter:function(){$(this).show()},mouseleave:function(){$(this).hide()}}),$("button[data-bs-toggle='sidebar']").on("click",(function(){e()}))})),$(window).on("resize",(function(){const e=$("#n-sidebar").find("div.show[id$='submenu']");if(e.length>0){const t=e.parent().find("a[data-bs-toggle='collapse']");M(e,t)}}));const L=function(){const e={series:[],chart:{height:"100%",width:"100%",toolbar:{tools:{zoomout:!1,download:!1,zoomin:!1,zoom:" ",selection:!1,pan:!1,reset:!1}},events:{}},xaxis:{tooltip:{enabled:!1}},yaxis:{labels:{show:!0,style:{colors:[],fontSize:"11px",fontWeight:400,cssClass:""}},title:{rotate:-90,offsetY:0,offsetX:0,style:{fontSize:"11px",fontWeight:900,cssClass:""}},tooltip:{enabled:!1}},grid:{show:!1},legend:{show:!0}},t=function(e){e.xaxis.labels.formatter=function(e,{series:t,seriesIndex:a,dataPointIndex:l,w:n}){return b.from_utc_to_server_date_format(e)}},l=function(){let t=b.clone(e);return b.copy_object_keys({chart:{stacked:!0,type:"bar",zoom:{enabled:!0,type:"x"}},tooltip:{x:{format:"dd MMM yyyy HH:mm:ss"},y:{}},xaxis:{labels:{show:!0,datetimeUTC:!1,formatter:null},axisTicks:{show:!1},type:"datetime",axisBorder:{show:!0},convertedCatToNumeric:!1},dataLabels:{enabled:!1},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"}},t,!0),t}(),n=function(){let t=b.clone(e);return b.copy_object_keys({chart:{stacked:!0,type:"area",zoom:{enabled:!0,type:"x"}},tooltip:{x:{format:"dd MMM yyyy HH:mm:ss"},y:{}},xaxis:{labels:{show:!0,datetimeUTC:!1,formatter:null},axisTicks:{show:!1},type:"datetime",axisBorder:{show:!0},convertedCatToNumeric:!1},dataLabels:{enabled:!1},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"}},t,!0),t}(),s=function(){let t=b.clone(e),l={chart:{stacked:!0,type:"polarArea",height:400},yaxis:{show:!0,labels:{formatter:a.bytesToSize}},dataLabels:{enabled:!0,formatter:function(e,t){return e?`${e.toFixed(1)}%`:"0%"}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},tooltip:{y:{formatter:a.bytesToSize}}};return b.copy_object_keys(l,t,!0),t}(),o=function(){let t=b.clone(e),l={chart:{stacked:!0,type:"donut",height:300},yaxis:{show:!0,labels:{formatter:a.bytesToSize}},dataLabels:{enabled:!0,formatter:function(e,t){return e?`${e.toFixed(1)}%`:"0%"}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},tooltip:{y:{formatter:v.getFormatter("number")}},noData:{text:"No Data",style:{color:void 0,fontSize:"24px",fontFamily:void 0}}};return b.copy_object_keys(l,t,!0),t}(),i=function(){let t=b.clone(e),l={chart:{stacked:!0,type:"radialBar",height:300},yaxis:{show:!0},dataLabels:{enabled:!0,formatter:function(e,t){return e}},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},tooltip:{y:{formatter:a.bytesToSize}},noData:{text:"No Data",style:{color:void 0,fontSize:"24px",fontFamily:void 0}},plotOptions:{radialBar:{offsetY:0,startAngle:0,endAngle:270,hollow:{margin:5,size:"30%",background:"transparent",image:void 0},dataLabels:{name:{show:!1},value:{show:!1}}}},legend:{show:!0,floating:!0,fontSize:"16px",position:"left",offsetX:160,offsetY:15,labels:{useSeriesColors:!0},markers:{size:0},formatter:function(e,t){return e+":  "+t.w.globals.series[t.seriesIndex]},itemMargin:{vertical:3}},responsive:[{breakpoint:480,options:{legend:{show:!1}}}]};return b.copy_object_keys(l,t,!0),t}(),r=function(){let t=b.clone(e),l={chart:{stacked:!0,type:"pie",height:400},yaxis:{show:!0,labels:{formatter:a.bytesToSize}},dataLabels:{enabled:!0,formatter:function(e,t){return e?`${e.toFixed(1)}%`:"0%"}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},tooltip:{y:{formatter:a.bytesToSize}}};return b.copy_object_keys(l,t,!0),t}(),c=function(){let t=b.clone(e);return b.copy_object_keys({chart:{type:"line",zoom:{enabled:!0,type:"x"}},tooltip:{shared:!0,x:{format:"dd MMM yyyy HH:mm:ss"},y:{}},xaxis:{labels:{show:!1,datetimeUTC:!1,formatter:null},axisTicks:{show:!0},type:"datetime",axisBorder:{show:!0},convertedCatToNumeric:!1},stroke:{show:!0,width:2,curve:"smooth"},grid:{show:!0},dataLabels:{enabled:!1}},t,!0),t}(),u=function({series:e,seriesIndex:t,dataPointIndex:a,w:l}){const n=l.config.series[t].data[a],s=n.name,o=n.y;return`\n          <div class='apexcharts-theme-light apexcharts-active' id='test'>\n              <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n                  ${n.meta.label}\n              </div>\n              <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n                  <div class='apexcharts-tooltip-text text-left'>\n                      <b>${l.config.xaxis.title.text}</b>: ${s}\n                  </div>\n                  <div class='apexcharts-tooltip-text text-left'>\n                      <b>${l.config.yaxis[0].title.text}</b>: ${o}\n                  </div>\n              </div>\n          </div>`},d=function(){let t=b.clone(e),a={chart:{width:"100%",height:"100%",stacked:!0,type:"bubble",zoom:{autoScaleYaxis:!0}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},events:{dataPointSelection:"standard"},grid:{padding:{left:6}},xaxis:{type:"numeric",labels:{}},yaxis:{type:"numeric",forceNiceScale:!0,labels:{}},dataLabels:{enabled:!1},tooltip:{custom:u}};return b.copy_object_keys(a,t,!0),t}();return{typeChart:{TS_LINE:"TS_LINE",TS_STACKED:"TS_STACKED",TS_COLUMN:"TS_COLUMN",PIE:"PIE",DONUT:"DONUT",RADIALBAR:"RADIALBAR",RADAR:"RADAR",BUBBLE:"BUBBLE",BASE:"BASE"},newChart:function(a){let u,_={};if(a==this.typeChart.TS_STACKED)_=b.clone(n),t(_);else if(a==this.typeChart.TS_LINE)_=b.clone(c),t(_);else if(a==this.typeChart.TS_COLUMN)_=b.clone(l),t(_);else if(a==this.typeChart.PIE)_=b.clone(r);else if(a==this.typeChart.DONUT)_=b.clone(o);else if(a==this.typeChart.RADIALBAR)_=b.clone(i);else if(a==this.typeChart.POLAR)_=b.clone(s);else if(a==this.typeChart.BUBBLE)_=b.clone(d);else{if(a!=this.typeChart.BASE)throw`ntopChartApex::newChart: chart type = ${a} unsupported`;_=b.clone(e)}const p=e=>{if("string"==typeof e?.yaxis?.labels?.formatter){const t=e.yaxis.labels.formatter;let a=v.getFormatter(t);null!=a?e.yaxis.labels.formatter=a:"formatValue"==t?e.yaxis.labels.formatter=v.getFormatter("number"):"bytesToSize"==t&&(e.yaxis.labels.formatter=v.getFormatter("bytes"))}};return{drawChart:function(e,t){p(t),b.copy_object_keys(t,_,!0),u=new ApexCharts(e,_),u.render()},to_data_uri:async function(e){if(null==u)return;return(await u.dataURI(e)).imgURI},destroyChart:function(){null!=u&&u.destroy()},updateChart:function(e){null!=u&&(p(e),u.updateOptions(e,!1,!1,!1))},updateSeries:function(e){null!=u&&u.updateSeries(e)},registerEvent:function(e,t,a=!1){_.chart.events[e]=t,1==a&&u.updateOptions(_)}}}}}(),R=function(){let e={};return{addHandler:function(t){let a=e[t.handlerId];return null==a&&(a=[],e[t.handlerId]=a),a.push((()=>{t.onClick()})),`window['_DataTableButtonsOnClick']('${t.handlerId}', '${a.length-1}')`},getHandler:function(t,a){let l=e[t];return null==l?null:l[a]},deleteHandlersById:function(t){e[t]=null}}}();window._DataTableButtonsOnClick=function(e,t){let a=R.getHandler(e,t);null!=a&&a()};class D{static getStdDatatableConfig(e=[],t="<'row'<'col-sm-2 d-inline-block'l><'col-sm-10 text-end d-inline-block'<'dt-search'f>B>rtip>"){return 0==e.length&&(t="fBrtip"),{dom:t,pagingType:"full_numbers",lengthMenu:[[10,20,50,100],[10,20,50,100]],language:{search:i18n.script_search,paginate:{previous:"&lt;",next:"&gt;",first:"«",last:"»"}},saveState:!0,responsive:!0,buttons:{buttons:e,dom:{button:{className:"btn btn-link"},container:{className:"d-inline-block"}}}}}static createLinkCallback(e){let t="";return t=`onclick="${R.addHandler(e.handler)}"`,`<a href=#\n                   ${t}>\n                   ${e.text||""}\n                </a>`}static createActionButtons(e=[]){const t=[];e.forEach(((e,a)=>{let l="";if(e.handler){l=`onclick="${R.addHandler(e.handler)}"`}let n=`\n            <li>\n                <a\n                    ${e.href||e.modal?`href='${e.href||e.modal}'`:""}\n                    ${l}\n                    ${e.onclick?`onclick='${e.onclick}'`:""}\n                    ${e.modal?"data-bs-toggle='modal'":""}\n                    class='dropdown-item ${e.class?e.class:""}'\n                    ${e.hidden?"style='display: none'":""}\n                    ${e.external?"target='_about'":""}\n                    >\n                    <i class='fas ${e.icon}'></i> ${e.title||""}\n                </a>\n            </li>\n            `;t.push(n)}));return`<div class='dropdown'><button type="button" class="btn btn-sm btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false"><i class="fas fa-align-justify"></i></button>${`<ul class="dropdown-menu">${t.join("")}</ul>`}</div>`}static deleteButtonHandlers(e){R.deleteHandlersById(e)}static setAjaxConfig(e,t,a="",l="get",n={}){return e.ajax={url:t,type:l,dataSrc:a,data:function(e){return $.extend({},e,n)}},e}static extendConfig(e,t){return t.hasFilters&&(t.stateSaveCallback=function(e,t){localStorage.setItem("DataTables_"+e.sInstance,JSON.stringify(t))},t.stateLoadCallback=function(e){return JSON.parse(localStorage.getItem("DataTables_"+e.sInstance))},t.stateSaveParams=function(e,t){$("[data-filter]").each((function(){const e=$(this).find("li.active").data("filter-key");e&&(t.filters||(t.filters={}),t.filters[$(this).data("filter")]=e)}))}),$.extend({},e,t)}static secondsToHHMMSS(e){const t=e=>`${e}`.padStart(2,"0"),a=e%60,l=Math.floor(e/60)%60;return`${t(Math.floor(e/3600))}:${t(l)}:${t(a)}`}static openEditModalByQuery(e){const t=new URLSearchParams(window.location.search);if(!t.has(e.paramName))return;const a=t.get(e.paramName),l=e.datatableInstance.data().toArray().find((t=>t[e.paramName]==a));if("function"==typeof e.cancelIf&&e.cancelIf(l))return;const n=$(`#${e.modalHandler.getModalID()}`);if(void 0!==l&&(e.modalHandler.invokeModalInit(l),n.modal("show")),!t.has("referer"))return void n.on("hidden.bs.modal",(function(t){const a=new URL(window.location.href);a.searchParams.delete(e.paramName),history.replaceState({},"",a.toString())}));const s=t.get("referer");n.on("hidden.bs.modal",(function(e){window.location=s}))}static addToggleColumnsDropdown(e,t=((e,t)=>{})){if(void 0===e)throw"The $table is undefined!";const a=e.table().node().id;D._loadColumnsVisibility(e).then((function(l){let n=[-1];l.success?n=l.columns.map((e=>parseInt(e))):console.warn(l.message);const s=[],o=[],i=$(e.context[0].nTableWrapper);e.columns().every((function(t){e.column(t).visible()?s.push({index:t,name:this.header().textContent,label:this.i18n.name}):o.push(t)}));const r=$('\n                <div class="btn-group">\n                    <button type="button" class="btn btn-link dropdown-toggle" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\n                        <i class="fas fa-eye"></i>\n                    </button>\n                </div>\n            '),c=$('<div class="dropdown-menu dropdown-menu-right" style=\'width: max-content;\'><h6 class="dropdown-header">Show Columns</h6></div>'),u=$("<div class='px-4'></div>");for(let l=0;l<s.length;l++){const i=s[l];if(""==i.name)continue;const r=`toggle-${i.name.split().join("_")}`,c=-1===n.indexOf(i.index);if(!c){e.column(i.index).visible(!1)}const d=$(`<input class="form-check-input" ${c?"checked":""} type="checkbox" id="${r}">`),_=$(`\n                    <div class="form-check form-switch">\n                        <label class="form-check-label" for="${r}">\n                            ${i.name}\n                        </label>\n                    </div>\n                `);d.on("change",(function(l){$(".overlay").toggle(500);const n=e.column(i.index);n.visible(!n.visible());const s=n.visible(),r=[];e.columns().every((function(t){e.column(t).visible()||-1!==o.indexOf(t)||r.push(t)})),$.post(`${http_prefix}/lua/datatable_columns.lua`,{action:"save",table:a,columns:r.join(","),csrf:window.__CSRF_DATATABLE__}).then((function(e){e.success||console.warn(e.message)})),void 0!==t&&t(n,s)})),_.prepend(d),u.append(_)}c.on("click.bs.dropdown",(function(e){e.stopPropagation()})),r.append(c.append(u)),i.find(".dt-search").parent().append(r)}))}static async _loadColumnsVisibility(e){const t=e.table().node().id;return $.get(`${http_prefix}/lua/datatable_columns.lua?table=${t}&action=load`)}}class F{static alertSeverityAndType(e,t,a){return`${F.formatValueLabel(e,t,a)} ${F.formatValueLabel(a.alert_id,t,a)}`}static hideIfZero(e,t,l,n){let s=void 0!==e.color?e.color:"#aaa",o=void 0!==e.value?e.value:e;"display"===t&&0===parseInt(o)&&(s="#aaa");let i=`<span style='color: ${s}'>${a.fint(o)}</span>`;return void 0!==e.url&&(i=`<a href="${e.url}">${i}</a>`),i}static secondsToTime(e,t,l,n){return"display"===t?a.secondsToTime(e):e}static filterize(e,t,l,n,s,o,i,r){let c=`<a class='tag-filter' data-tag-key='${e}' title='${s||t}' data-tag-value='${t}' data-tag-label='${n||l||t}' href='javascript:void(0)'>${o||l||t}</a>`;if(null!=i)if(i){if(t){c+=` <a href='${a.buildURL(`${http_prefix}/lua/pro/enterprise/snmp_device_details.lua?host=${t}`)}'data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`}}else if(r&&t){c+=` <a href='${a.buildURL(`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${r}&snmp_port_idx=${t}`)}'data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`}return c}static formatValueLabel(e,t,a,l){if("display"!==t)return e.value;let n=e.label;return 1==l&&0==e.value&&(n=""),e.color&&(n=`<span class='font-weight-bold' style='color: ${e.color}'>${n}</span>`),n}static formatCategory(e,t,a,l){if("display"!==t)return e.value;let n=`<a class='tag-filter' data-tag-key='alert_category' data-tag-value='${e.value}' data-tag-label='${e.label}' href='javascript:void(0)'><i class="fa fas ${e.icon}" title="${e.label}"></i></a>`;return 1==l&&0==e.value&&(n=""),n}static formatScore(e,t,a,l){if("display"!==t)return e.value;let n=e.label;return 1==l&&0==e.value&&(n=""),e.color&&(n=`<span class='font-weight-bold' style='color: ${e.color}'>${n}</span>`),`<a class='tag-filter' data-tag-key='score' title='${e.label}' data-tag-value='${e.value}' data-tag-label='${e.label}' href='javascript:void(0)'>${n}</a>`}static formatMessage(e,t,a,l){if("display"!==t)return e.value;let n=e.descr;return e.shorten_descr&&(n=`<span title="${e.descr}">${e.shorten_descr}</span>`),n}static formatTraffic(e,t,l,n){if("display"!==t)return e.total_bytes;return`${a.formatPackets(e.total_packets)} / ${a.bytesToVolume(e.total_bytes)}`}static formatSubtype(e,t,a,l){if("display"!==t)return e;return F.filterize("subtype",e,e)}static filterize_2(e,t,a,l,n,s){return null==t||0==t&&(null==a||""==a)?"":`<a class='tag-filter' data-tag-key='${e}' title='${n||t}' data-tag-value='${t}' data-tag-label='${l||a||t}' href='javascript:void(0)'>${s||a||t}</a>`}static getFormatGenericField(e,t){return function(a,l,n){if("display"!==l)return a.value;if(1==t&&0==a?.value)return"";let s="";return void 0!==a.reference&&(s=a.reference),F.filterize_2(e,n[e].value,n[e].label,n[e].label,n[e].label)+" "+s}}static formatSNMPInterface(e,t,a){if("display"!==t)return e.value;let l=F.filterize("snmp_interface",e.value,e.label,e.label,e.label,null,!1,a.ip);return e.color&&(l=`<span class='font-weight-bold' style='color: ${e.color}'>${l}</span>`),l}static formatSNMPIP(e,t,a,l){return"display"!==t?e:F.filterize("ip",e,e,e,e,null,!0)}static formatNetwork(e,t,a,l){return"display"!==t?e:F.filterize("network_name",e,e,e,e,null,!1)}static formatProbeIP(e,t,a,l){if("display"!==t)return e;return F.filterize("probe_ip",e.value,e.label,e.label,e.label_long)}static formatHost(e,t,a,l){if("display"!==t)return e;let n="";void 0!==e.reference&&(n=e.reference);let s,o,i="";return e.label&&e.label!=e.value?(s="name",o=e.label_long,i=F.filterize("name",e.label_long,e.label,e.label,e.label_long)):(s="ip",o=e.value,i=F.filterize("ip",e.value,e.label,e.label,e.label_long)),a.vlan_id&&""!=a.vlan_id&&"0"!=a.vlan_id&&(i=F.filterize(s,`${o}@${a.vlan_id}`,`${e.label}@${a.vlan_id}`,`${e.label}@${a.vlan_id}`,`${e.label_long}@${a.vlan_id}`)),e.country&&(i+=F.filterize("country",e.country,e.country,e.country,e.country,' <img src="'+http_prefix+'/dist/images/blank.gif" class="flag flag-'+e.country.toLowerCase()+'"></a> ')),a.role&&"attacker"==a.role.value?i=i+" "+F.filterize("role",a.role.value,'<i class="fas fa-skull" title="'+a.role.label+'"></i>',a.role.label):a.role&&"victim"==a.role.value&&(i=i+" "+F.filterize("role",a.role.value,'<i class="fas fa-sad-tear" title="'+a.role.label+'"></i>',a.role.label)),a.role_cli_srv&&"client"==a.role_cli_srv.value?i=i+" "+F.filterize("role_cli_srv",a.role_cli_srv.value,'<i class="fas fa-long-arrow-alt-right" title="'+a.role_cli_srv.label+'"></i>',a.role_cli_srv.label):a.role_cli_srv&&"server"==a.role_cli_srv.value&&(i=i+" "+F.filterize("role_cli_srv",a.role_cli_srv.value,'<i class="fas fa-long-arrow-alt-left" title="'+a.role_cli_srv.label+'"></i>',a.role_cli_srv.label)),i+" "+n}static filterizeVlan(e,t,l,n,s,o){let i=n,r=s,c=o;return e.vlan&&0!=e.vlan.value&&(i=`${n}@${e.vlan.value}`,r=`${s}@${e.vlan.label}`,c=`${o}@${e.vlan.title}`),r=a.shortenLabel(r,16,"."),F.filterize(l,i,r,r,c)}static formatFlowTuple(e,t,a,l){let n=e.active_url?`<a href="${e.active_url}"><i class="fas fa-stream"></i></a>`:"",s="";if(e.cli_ip.name){let t="";e.cli_ip.label_long&&(t=e.cli_ip.value+" ["+e.cli_ip.label_long+"]"),s=F.filterizeVlan(e,a,"cli_name",e.cli_ip.name,e.cli_ip.label,t)}else s=F.filterizeVlan(e,a,"cli_ip",e.cli_ip.value,e.cli_ip.label,e.cli_ip.label_long);let o="";e.cli_ip.country&&"nil"!==e.cli_ip.country&&(o=F.filterize("cli_country",e.cli_ip.country,e.cli_ip.country,e.cli_ip.country,e.cli_ip.country,' <img src="'+http_prefix+'/dist/images/blank.gif" class="flag flag-'+e.cli_ip.country.toLowerCase()+'"></a> '));let i=e.cli_port&&e.cli_port>0?":"+F.filterize("cli_port",e.cli_port,e.cli_port):"",r="";1==e.cli_ip.blacklisted&&(r=" <i class='fas fa-ban fa-sm' title='"+i18n("hosts_stats.blacklisted")+"'></i>");let c="";if(e.srv_ip.name){let t="";e.srv_ip.label_long&&(t=e.srv_ip.value+" ["+e.srv_ip.label_long+"]"),c=F.filterizeVlan(e,a,"srv_name",e.srv_ip.name,e.srv_ip.label,t)}else c=F.filterizeVlan(e,a,"srv_ip",e.srv_ip.value,e.srv_ip.label,e.srv_ip.label_long);let u=e.srv_port&&e.srv_port>0?":"+F.filterize("srv_port",e.srv_port,e.srv_port):"",d="";e.srv_ip.country&&"nil"!==e.srv_ip.country&&(d=F.filterize("srv_country",e.srv_ip.country,e.srv_ip.country,e.srv_ip.country,e.srv_ip.country,' <img src="'+http_prefix+'/dist/images/blank.gif" class="flag flag-'+e.srv_ip.country.toLowerCase()+'"></a> '));let _="";1==e.srv_ip.blacklisted&&(_=" <i class='fas fa-ban fa-sm' title='"+i18n("hosts_stats.blacklisted")+"'></i>");let p="",f="";return a.cli_role&&("attacker"==a.cli_role.value?p+=F.filterize("role","attacker",'<i class="fas fa-skull" title="'+a.cli_role.label+'"></i>',a.cli_role.tag_label):"victim"==a.cli_role.value&&(p+=F.filterize("role","victim",'<i class="fas fa-sad-tear" title="'+a.cli_role.label+'"></i>',a.cli_role.tag_label))),a.srv_role&&("attacker"==a.srv_role.value?f+=F.filterize("role","attacker",'<i class="fas fa-skull" title="'+a.srv_role.label+'"></i>',a.srv_role.tag_label):"victim"==a.srv_role.value&&(f+=F.filterize("role","victim",'<i class="fas fa-sad-tear" title="'+a.srv_role.label+'"></i>',a.srv_role.tag_label))),`${n} ${s}${r}${o}${i} ${p} ${e.cli_ip.reference} <i class="fas fa-exchange-alt fa-lg" aria-hidden="true"></i> ${c}${_}${d}${u} ${f} ${e.srv_ip.reference}`}static formatSubtypeValueLabel(e,t,a,l){if("display"!==t)return e.name;return F.filterize("subtype",e.value,e.name,e.fullname,e.fullname)}static formatNameDescription(e,t,a,l){if("display"!==t)return e.name;return F.filterize("alert_id",e.value,e.name,e.fullname,e.fullname)}static applyCellStyle(e,t,a,l,n){t.highlight&&$(e).css("border-left","5px solid "+t.highlight)}}function q(e,t){const a=Object.create(null),l=e.split(",");for(let e=0;e<l.length;e++)a[l[e]]=!0;return t?e=>!!a[e.toLowerCase()]:e=>!!a[e]}window.do_pie=function(e,t,a,l,n){var s=new A(e,t,a,l,n);return n&&s.setInterval(setInterval((function(){s.update()}),n)),s},window.DataTableUtils=D,window.DataTableFiltersMenu=class{constructor({tableAPI:e,filterMenuKey:t,filterTitle:a,filters:l,columnIndex:n,icon:s=null,extraAttributes:o="",id:i=null,url:r=null,urlParams:c=null,removeAllEntry:u=!1,callbackFunction:d=null}){this.rawFilters=l,this.tableAPI=e,this.filterTitle=a,this.icon=s,this.filterMenuKey=t,this.columnIndex=n,this.preventUpdate=!1,this.currentFilterSelected=void 0,this.$datatableWrapper=$(e.context[0].nTableWrapper),this.extraAttributes=o,this.id=i,this.url=r,this.removeAllEntry=u,this.callbackFunction=d}get selectedFilter(){return this.currentFilterSelected}init(){const e=this;return this.$datatableWrapper.on("init.dt",(function(){e._render(e.rawFilters)})),this.tableAPI.on("draw",(function(){e._update()})),e}_countEntries(e,t=[]){void 0===e&&console.error("DataTableFiltersMenu::_countEntries() => the passed regex is undefined!");const a=new RegExp(e);return t.filter((e=>a.test(e))).length}_createMenuEntry(e){const t=this;let a=$(`<li class='dropdown-item pointer'>${e.label} </li>`);if(t.url){if(a=$(`<li class='dropdown-item pointer'><a href=# class='p-1 standard-color'>${e.label} </li>`),1==e.currently_active){0==t.$dropdown.title.parent().find("i.fas").length&&t.$dropdown.title.parent().prepend("<i class='fas fa-filter'></i>");const l=a.html();t.$dropdown.title.html(l),t.$dropdown.container.find("li").removeClass("active"),"all"!==e.key&&a.addClass("active")}}else if(void 0!==e.regex&&(void 0===e.countable||e.countable)){const t=this.tableAPI.columns(this.columnIndex).data()[0],l=this._countEntries(e.regex,t),n=$(`<span class='counter'>(${l})</span>`);0==l&&a.hide(),a.append(n)}return a.on("click",(function(l){0==t.$dropdown.title.parent().find("i.fas").length&&t.$dropdown.title.parent().prepend("<i class='fas fa-filter'></i>");const n=a.html();if(t.$dropdown.title.html(n),t.$dropdown.container.find("li").removeClass("active"),"all"!==e.key&&a.addClass("active"),t.callbackFunction)return t.callbackFunction(t.tableAPI,e),void(e.callback&&e.callback());if(t.url){t.urlParams=window.location.search;const a=new URLSearchParams(t.urlParams);a.set(t.filterMenuKey,void 0!==e.id?e.id:""),window.history.pushState("","",window.location.pathname+"?"+a.toString()),location.reload()}else t.preventUpdate=!0,e.callback&&e.callback(),t.tableAPI.column(t.columnIndex).search(e.regex,!0,!1).draw(),t.currentFilterSelected=e})),a}_createFilters(e){const t={};for(const a of e){const e=this._createMenuEntry(a);t[a.key]={filter:a,$node:e}}return t}_render(e){if(void 0===this.columnIndex)$(`<span id="${this.id}" ${this.extraAttributes} title="${this.filterTitle}">${this.icon||this.filterTitle}</span>`).insertBefore(this.$datatableWrapper.find(".dataTables_filter").parent());else{const t=$(`<div id='${this.filterMenuKey}_dropdown' class='dropdown d-inline'></div>`),a=$("<button class='btn-link btn dropdown-toggle' data-bs-toggle=\"dropdown\" type='button'></button>"),l=$(`<span class='filter-title'>${this.filterTitle}</span>`);a.append(l),this.$dropdown={container:t,title:l,button:a},this.filters=this._createFilters(e);const n=$(`<ul class='dropdown-menu dropdown-menu-lg-end scrollable-dropdown' id='${this.filterMenuKey}_dropdown_menu'></ul>`);for(const[e,t]of Object.entries(this.filters))n.append(t.$node);if(!this.removeAllEntry){const e=this._generateAllFilter();n.prepend(this._createMenuEntry(e))}t.append(a),t.append(n),t.insertBefore(this.$datatableWrapper.find(".dataTables_filter").parent()),this._selectFilterFromState(this.filterMenuKey)}}_selectFilterFromState(e){this.tableAPI.state&&this.tableAPI.state.loaded()&&this.tableAPI.state.loaded().filters&&tableAPI.state.save()}_generateAllFilter(){return{key:"all",label:i18n_ext.all,regex:"",countable:!1,callback:()=>{this.$dropdown.title.parent().find("i.fas.fa-filter").remove(),this.$dropdown.title.html(`${this.filterTitle}`)}}}_update(){if(void 0!==this.filters)if(this.preventUpdate)this.preventUpdate=!1;else for(const[e,t]of Object.entries(this.filters)){if(0==t.countable||0==t.filter.countable)continue;const e=this.tableAPI.columns(this.columnIndex).data()[0],a=this._countEntries(t.filter.regex,e);0==a?t.$node.hide():t.$node.show(),t.$node.find(".counter").text(`(${a})`),this.$dropdown.button.find(".counter").text(`(${a})`)}}},window.DataTableRenders=F,window.ChartWidget=class extends O{constructor(e,t="line",a={},l=0,n={}){super(e,a,l,n),this._chartType=t,this._chart={},this._$htmlChart=document.querySelector(`#canvas-widget-${e}`)}static registerEventCallback(e,t,a){setTimeout((async()=>{try{const l=I.getWidgetByName(e),n={chart:{events:{[t]:a}}};await l._chart.updateOptions(n)}catch(e){}}),1e3)}_generateConfig(){const e={series:[],tooltip:{enabledOnSeries:[0],x:{show:!0,format:"dd/MM/yyyy HH:mm:ss"},y:{formatter:function(e,{series:t,seriesIndex:a,dataPointIndex:l,w:n}){return e}},z:{show:!1}},chart:{type:this._chartType,events:{},height:"100%",toolbar:{show:!1}},xaxis:{labels:{style:{fontSize:"14px"}},tooltip:{enabled:!0,formatter:function(e){return e}}},yaxis:{labels:{style:{fontSize:"14px"}},tooltip:{enabled:!0,formatter:function(e){return e}}},zaxis:{labels:{style:{fontSize:"14px"}},tooltip:{enabled:!0}},dataLabels:{enabled:!0,style:{fontSize:"14px"}},labels:[],legend:{show:!0,fontSize:"14px",position:"bottom",onItemClick:{toggleDataSeries:!0}},plotOptions:{bar:{borderRadius:4,horizontal:!0}},noData:{text:"No Data",align:"center",verticalAlign:"middle",style:{fontSize:"24px"}}};if(this._additionalParams&&this._additionalParams.apex){return Object.assign(e,this._additionalParams.apex)}return e}_buildTooltip(e,t){if(e.tooltip.y={formatter:function(e,{series:t,seriesIndex:a,dataPointIndex:l,w:n}){return e}},t.tooltip){for(const a in t.tooltip)if("x"===a||"y"===a||"z"===a){const l=t.tooltip[a].formatter;e.tooltip[a]||(e.tooltip[a]={}),e.tooltip[a].formatter=P[l]||NtopUtils[l]}t.tooltip.custom&&(e.tooltip.custom=P[t.tooltip.custom]||NtopUtils[t.tooltip.custom])}}_buildAxisFormatter(e,t){const a=e[t];if(void 0!==a&&void 0!==a.labels&&void 0!==a.labels.ntop_utils_formatter&&"none"!==a.labels.ntop_utils_formatter){const e=a.labels.ntop_utils_formatter;void 0===NtopUtils[e]?console.error(`xaxis: Formatting function '${e}' didn't found inside NtopUtils.`):a.labels.formatter=NtopUtils[e]}}_buildDataLabels(e,t){if(t.dataLabels)for(const[a,l]of Object.entries(t.dataLabels))e.dataLabels[a]=l;let a=e.dataLabels.formatter;a&&P[a]&&(e.dataLabels.formatter=P[a])}_buildConfig(){const e=this._generateConfig(),t=this._fetchedData.rsp,a=["series","xaxis","yaxis","colors","labels","fill","filter","filtering_labels"];for(const l of a)void 0!==t[l]&&(void 0!==e[l]?e[l]=Object.assign(e[l],t[l]):e[l]=t[l]);if(t.events)for(const a in t.events)e.chart.events[a]=T[t.events[a]];return void 0!==t.horizontal_chart&&(e.plotOptions.bar.horizontal=t.horizontal_chart),this._buildTooltip(e,t),this._buildAxisFormatter(e,"xaxis"),this._buildAxisFormatter(e,"yaxis"),this._buildDataLabels(e,t),e}_initializeChart(){const e=this._buildConfig();this._chartConfig=e,this._chart=new ApexCharts(this._$htmlChart,this._chartConfig),this._chart.render()}async init(){await super.init(),this._initializeChart()}async destroy(){await super.destroy(),this._chart.destroy(),this._chart=null}async update(e={}){if(void 0!==this._chartConfig&&(e?await super.update(e):await super.updateByUrl(),null!=this._chart)){const{colors:e,series:t,dataLabels:a,labels:l,xaxis:n,filtering_labels:s}=this._fetchedData.rsp;if(this._chartConfig.colors=e,this._chartConfig.series=t,n&&n.categories&&(this._chartConfig.xaxis.categories=n.categories),s&&(this._chartConfig.filtering_labels=s),a){let e=this._chartConfig.dataLabels.formatter;this._chartConfig.dataLabels.formatter=e&&P[e]?P[e]:U}l&&(this._chartConfig.labels=l),this._chart.updateOptions(this._chartConfig,!0)}}async destroyAndUpdate(e={}){await super.destroyAndUpdate(e),this._initializeChart()}},window.WidgetUtils=I,window.ntopChartApex=L,$((function(){function e(e){if("mousedown"==e.type&&(e.metaKey||e.ctrlKey||2!==e.which))return;const t=$(this).data("id");$.post(`${http_prefix}/lua/update_blog_posts.lua`,{blog_notification_id:t,csrf:window.__BLOG_NOTIFICATION_CSRF__},(e=>{if(e.success){$(this).off("click").off("mousedown").attr("data-read","true").data("read","true").find(".badge").remove();const e=$(".blog-notification[data-read='false']").length;0==e?$(".notification-bell").remove():$(".notification-bell").html(e)}}))}$(".blog-notification[data-read='false']").on("click",e).on("mousedown",e)}));const z=q("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt"),B=q("itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly");function V(e){return!!e||""===e}function H(e){if(ve(e)){const t={};for(let a=0;a<e.length;a++){const l=e[a],n=ye(l)?K(l):H(l);if(n)for(const e in n)t[e]=n[e]}return t}return ye(e)||xe(e)?e:void 0}const G=/;(?![^(]*\))/g,W=/:(.+)/;function K(e){const t={};return e.split(G).forEach((e=>{if(e){const a=e.split(W);a.length>1&&(t[a[0].trim()]=a[1].trim())}})),t}function J(e){let t="";if(ye(e))t=e;else if(ve(e))for(let a=0;a<e.length;a++){const l=J(e[a]);l&&(t+=l+" ")}else if(xe(e))for(const a in e)e[a]&&(t+=a+" ");return t.trim()}function Y(e){if(!e)return null;let{class:t,style:a}=e;return t&&!ye(t)&&(e.class=J(t)),a&&(e.style=H(a)),e}const Z=q("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot"),X=q("svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view"),Q=q("area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr");function ee(e,t){if(e===t)return!0;let a=ge(e),l=ge(t);if(a||l)return!(!a||!l)&&e.getTime()===t.getTime();if(a=we(e),l=we(t),a||l)return e===t;if(a=ve(e),l=ve(t),a||l)return!(!a||!l)&&function(e,t){if(e.length!==t.length)return!1;let a=!0;for(let l=0;a&&l<e.length;l++)a=ee(e[l],t[l]);return a}(e,t);if(a=xe(e),l=xe(t),a||l){if(!a||!l)return!1;if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const a in e){const l=e.hasOwnProperty(a),n=t.hasOwnProperty(a);if(l&&!n||!l&&n||!ee(e[a],t[a]))return!1}}return String(e)===String(t)}function te(e,t){return e.findIndex((e=>ee(e,t)))}const ae=e=>ye(e)?e:null==e?"":ve(e)||xe(e)&&(e.toString===$e||!be(e.toString))?JSON.stringify(e,le,2):String(e),le=(e,t)=>t&&t.__v_isRef?le(e,t.value):me(t)?{[`Map(${t.size})`]:[...t.entries()].reduce(((e,[t,a])=>(e[`${t} =>`]=a,e)),{})}:he(t)?{[`Set(${t.size})`]:[...t.values()]}:!xe(t)||ve(t)||Ce(t)?t:String(t),ne={},se=[],oe=()=>{},ie=()=>!1,re=/^on[^a-z]/,ce=e=>re.test(e),ue=e=>e.startsWith("onUpdate:"),de=Object.assign,_e=(e,t)=>{const a=e.indexOf(t);a>-1&&e.splice(a,1)},pe=Object.prototype.hasOwnProperty,fe=(e,t)=>pe.call(e,t),ve=Array.isArray,me=e=>"[object Map]"===Se(e),he=e=>"[object Set]"===Se(e),ge=e=>"[object Date]"===Se(e),be=e=>"function"==typeof e,ye=e=>"string"==typeof e,we=e=>"symbol"==typeof e,xe=e=>null!==e&&"object"==typeof e,ke=e=>xe(e)&&be(e.then)&&be(e.catch),$e=Object.prototype.toString,Se=e=>$e.call(e),Ce=e=>"[object Object]"===Se(e),Ne=e=>ye(e)&&"NaN"!==e&&"-"!==e[0]&&""+parseInt(e,10)===e,Ae=q(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),Ee=q("bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo"),Te=e=>{const t=Object.create(null);return a=>t[a]||(t[a]=e(a))},Pe=/-(\w)/g,Ue=Te((e=>e.replace(Pe,((e,t)=>t?t.toUpperCase():"")))),Ie=/\B([A-Z])/g,Oe=Te((e=>e.replace(Ie,"-$1").toLowerCase())),Me=Te((e=>e.charAt(0).toUpperCase()+e.slice(1))),je=Te((e=>e?`on${Me(e)}`:"")),Le=(e,t)=>!Object.is(e,t),Re=(e,t)=>{for(let a=0;a<e.length;a++)e[a](t)},De=(e,t,a)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:a})},Fe=e=>{const t=parseFloat(e);return isNaN(t)?e:t};let qe,ze;class Be{constructor(e=!1){this.active=!0,this.effects=[],this.cleanups=[],!e&&ze&&(this.parent=ze,this.index=(ze.scopes||(ze.scopes=[])).push(this)-1)}run(e){if(this.active){const t=ze;try{return ze=this,e()}finally{ze=t}}}on(){ze=this}off(){ze=this.parent}stop(e){if(this.active){let t,a;for(t=0,a=this.effects.length;t<a;t++)this.effects[t].stop();for(t=0,a=this.cleanups.length;t<a;t++)this.cleanups[t]();if(this.scopes)for(t=0,a=this.scopes.length;t<a;t++)this.scopes[t].stop(!0);if(this.parent&&!e){const e=this.parent.scopes.pop();e&&e!==this&&(this.parent.scopes[this.index]=e,e.index=this.index)}this.active=!1}}}function Ve(e){return new Be(e)}function He(e,t=ze){t&&t.active&&t.effects.push(e)}function Ge(){return ze}function We(e){ze&&ze.cleanups.push(e)}const Ke=e=>{const t=new Set(e);return t.w=0,t.n=0,t},Je=e=>(e.w&et)>0,Ye=e=>(e.n&et)>0,Ze=new WeakMap;let Xe,Qe=0,et=1;const tt=Symbol(""),at=Symbol("");class lt{constructor(e,t=null,a){this.fn=e,this.scheduler=t,this.active=!0,this.deps=[],this.parent=void 0,He(this,a)}run(){if(!this.active)return this.fn();let e=Xe,t=it;for(;e;){if(e===this)return;e=e.parent}try{return this.parent=Xe,Xe=this,it=!0,et=1<<++Qe,Qe<=30?(({deps:e})=>{if(e.length)for(let t=0;t<e.length;t++)e[t].w|=et})(this):nt(this),this.fn()}finally{Qe<=30&&(e=>{const{deps:t}=e;if(t.length){let a=0;for(let l=0;l<t.length;l++){const n=t[l];Je(n)&&!Ye(n)?n.delete(e):t[a++]=n,n.w&=~et,n.n&=~et}t.length=a}})(this),et=1<<--Qe,Xe=this.parent,it=t,this.parent=void 0,this.deferStop&&this.stop()}}stop(){Xe===this?this.deferStop=!0:this.active&&(nt(this),this.onStop&&this.onStop(),this.active=!1)}}function nt(e){const{deps:t}=e;if(t.length){for(let a=0;a<t.length;a++)t[a].delete(e);t.length=0}}function st(e,t){e.effect&&(e=e.effect.fn);const a=new lt(e);t&&(de(a,t),t.scope&&He(a,t.scope)),t&&t.lazy||a.run();const l=a.run.bind(a);return l.effect=a,l}function ot(e){e.effect.stop()}let it=!0;const rt=[];function ct(){rt.push(it),it=!1}function ut(){const e=rt.pop();it=void 0===e||e}function dt(e,t,a){if(it&&Xe){let t=Ze.get(e);t||Ze.set(e,t=new Map);let l=t.get(a);l||t.set(a,l=Ke()),_t(l)}}function _t(e,t){let a=!1;Qe<=30?Ye(e)||(e.n|=et,a=!Je(e)):a=!e.has(Xe),a&&(e.add(Xe),Xe.deps.push(e))}function pt(e,t,a,l,n,s){const o=Ze.get(e);if(!o)return;let i=[];if("clear"===t)i=[...o.values()];else if("length"===a&&ve(e))o.forEach(((e,t)=>{("length"===t||t>=l)&&i.push(e)}));else switch(void 0!==a&&i.push(o.get(a)),t){case"add":ve(e)?Ne(a)&&i.push(o.get("length")):(i.push(o.get(tt)),me(e)&&i.push(o.get(at)));break;case"delete":ve(e)||(i.push(o.get(tt)),me(e)&&i.push(o.get(at)));break;case"set":me(e)&&i.push(o.get(tt))}if(1===i.length)i[0]&&ft(i[0]);else{const e=[];for(const t of i)t&&e.push(...t);ft(Ke(e))}}function ft(e,t){const a=ve(e)?e:[...e];for(const e of a)e.computed&&vt(e);for(const e of a)e.computed||vt(e)}function vt(e,t){(e!==Xe||e.allowRecurse)&&(e.scheduler?e.scheduler():e.run())}const mt=q("__proto__,__v_isRef,__isVue"),ht=new Set(Object.getOwnPropertyNames(Symbol).filter((e=>"arguments"!==e&&"caller"!==e)).map((e=>Symbol[e])).filter(we)),gt=kt(),bt=kt(!1,!0),yt=kt(!0),wt=kt(!0,!0),xt=function(){const e={};return["includes","indexOf","lastIndexOf"].forEach((t=>{e[t]=function(...e){const a=ca(this);for(let e=0,t=this.length;e<t;e++)dt(a,0,e+"");const l=a[t](...e);return-1===l||!1===l?a[t](...e.map(ca)):l}})),["push","pop","shift","unshift","splice"].forEach((t=>{e[t]=function(...e){ct();const a=ca(this)[t].apply(this,e);return ut(),a}})),e}();function kt(e=!1,t=!1){return function(a,l,n){if("__v_isReactive"===l)return!e;if("__v_isReadonly"===l)return e;if("__v_isShallow"===l)return t;if("__v_raw"===l&&n===(e?t?Qt:Xt:t?Zt:Yt).get(a))return a;const s=ve(a);if(!e&&s&&fe(xt,l))return Reflect.get(xt,l,n);const o=Reflect.get(a,l,n);return(we(l)?ht.has(l):mt(l))?o:(e||dt(a,0,l),t?o:va(o)?s&&Ne(l)?o:o.value:xe(o)?e?aa(o):ea(o):o)}}function $t(e=!1){return function(t,a,l,n){let s=t[a];if(oa(s)&&va(s)&&!va(l))return!1;if(!e&&!oa(l)&&(ia(l)||(l=ca(l),s=ca(s)),!ve(t)&&va(s)&&!va(l)))return s.value=l,!0;const o=ve(t)&&Ne(a)?Number(a)<t.length:fe(t,a),i=Reflect.set(t,a,l,n);return t===ca(n)&&(o?Le(l,s)&&pt(t,"set",a,l):pt(t,"add",a,l)),i}}const St={get:gt,set:$t(),deleteProperty:function(e,t){const a=fe(e,t),l=Reflect.deleteProperty(e,t);return l&&a&&pt(e,"delete",t,void 0),l},has:function(e,t){const a=Reflect.has(e,t);return we(t)&&ht.has(t)||dt(e,0,t),a},ownKeys:function(e){return dt(e,0,ve(e)?"length":tt),Reflect.ownKeys(e)}},Ct={get:yt,set:(e,t)=>!0,deleteProperty:(e,t)=>!0},Nt=de({},St,{get:bt,set:$t(!0)}),At=de({},Ct,{get:wt}),Et=e=>e,Tt=e=>Reflect.getPrototypeOf(e);function Pt(e,t,a=!1,l=!1){const n=ca(e=e.__v_raw),s=ca(t);a||(t!==s&&dt(n,0,t),dt(n,0,s));const{has:o}=Tt(n),i=l?Et:a?_a:da;return o.call(n,t)?i(e.get(t)):o.call(n,s)?i(e.get(s)):void(e!==n&&e.get(t))}function Ut(e,t=!1){const a=this.__v_raw,l=ca(a),n=ca(e);return t||(e!==n&&dt(l,0,e),dt(l,0,n)),e===n?a.has(e):a.has(e)||a.has(n)}function It(e,t=!1){return e=e.__v_raw,!t&&dt(ca(e),0,tt),Reflect.get(e,"size",e)}function Ot(e){e=ca(e);const t=ca(this);return Tt(t).has.call(t,e)||(t.add(e),pt(t,"add",e,e)),this}function Mt(e,t){t=ca(t);const a=ca(this),{has:l,get:n}=Tt(a);let s=l.call(a,e);s||(e=ca(e),s=l.call(a,e));const o=n.call(a,e);return a.set(e,t),s?Le(t,o)&&pt(a,"set",e,t):pt(a,"add",e,t),this}function jt(e){const t=ca(this),{has:a,get:l}=Tt(t);let n=a.call(t,e);n||(e=ca(e),n=a.call(t,e)),l&&l.call(t,e);const s=t.delete(e);return n&&pt(t,"delete",e,void 0),s}function Lt(){const e=ca(this),t=0!==e.size,a=e.clear();return t&&pt(e,"clear",void 0,void 0),a}function Rt(e,t){return function(a,l){const n=this,s=n.__v_raw,o=ca(s),i=t?Et:e?_a:da;return!e&&dt(o,0,tt),s.forEach(((e,t)=>a.call(l,i(e),i(t),n)))}}function Dt(e,t,a){return function(...l){const n=this.__v_raw,s=ca(n),o=me(s),i="entries"===e||e===Symbol.iterator&&o,r="keys"===e&&o,c=n[e](...l),u=a?Et:t?_a:da;return!t&&dt(s,0,r?at:tt),{next(){const{value:e,done:t}=c.next();return t?{value:e,done:t}:{value:i?[u(e[0]),u(e[1])]:u(e),done:t}},[Symbol.iterator](){return this}}}}function Ft(e){return function(...t){return"delete"!==e&&this}}const[qt,zt,Bt,Vt]=function(){const e={get(e){return Pt(this,e)},get size(){return It(this)},has:Ut,add:Ot,set:Mt,delete:jt,clear:Lt,forEach:Rt(!1,!1)},t={get(e){return Pt(this,e,!1,!0)},get size(){return It(this)},has:Ut,add:Ot,set:Mt,delete:jt,clear:Lt,forEach:Rt(!1,!0)},a={get(e){return Pt(this,e,!0)},get size(){return It(this,!0)},has(e){return Ut.call(this,e,!0)},add:Ft("add"),set:Ft("set"),delete:Ft("delete"),clear:Ft("clear"),forEach:Rt(!0,!1)},l={get(e){return Pt(this,e,!0,!0)},get size(){return It(this,!0)},has(e){return Ut.call(this,e,!0)},add:Ft("add"),set:Ft("set"),delete:Ft("delete"),clear:Ft("clear"),forEach:Rt(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach((n=>{e[n]=Dt(n,!1,!1),a[n]=Dt(n,!0,!1),t[n]=Dt(n,!1,!0),l[n]=Dt(n,!0,!0)})),[e,a,t,l]}();function Ht(e,t){const a=t?e?Vt:Bt:e?zt:qt;return(t,l,n)=>"__v_isReactive"===l?!e:"__v_isReadonly"===l?e:"__v_raw"===l?t:Reflect.get(fe(a,l)&&l in t?a:t,l,n)}const Gt={get:Ht(!1,!1)},Wt={get:Ht(!1,!0)},Kt={get:Ht(!0,!1)},Jt={get:Ht(!0,!0)},Yt=new WeakMap,Zt=new WeakMap,Xt=new WeakMap,Qt=new WeakMap;function ea(e){return oa(e)?e:na(e,!1,St,Gt,Yt)}function ta(e){return na(e,!1,Nt,Wt,Zt)}function aa(e){return na(e,!0,Ct,Kt,Xt)}function la(e){return na(e,!0,At,Jt,Qt)}function na(e,t,a,l,n){if(!xe(e))return e;if(e.__v_raw&&(!t||!e.__v_isReactive))return e;const s=n.get(e);if(s)return s;const o=function(e){return e.__v_skip||!Object.isExtensible(e)?0:function(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}((e=>Se(e).slice(8,-1))(e))}(e);if(0===o)return e;const i=new Proxy(e,2===o?l:a);return n.set(e,i),i}function sa(e){return oa(e)?sa(e.__v_raw):!(!e||!e.__v_isReactive)}function oa(e){return!(!e||!e.__v_isReadonly)}function ia(e){return!(!e||!e.__v_isShallow)}function ra(e){return sa(e)||oa(e)}function ca(e){const t=e&&e.__v_raw;return t?ca(t):e}function ua(e){return De(e,"__v_skip",!0),e}const da=e=>xe(e)?ea(e):e,_a=e=>xe(e)?aa(e):e;function pa(e){it&&Xe&&_t((e=ca(e)).dep||(e.dep=Ke()))}function fa(e,t){(e=ca(e)).dep&&ft(e.dep)}function va(e){return!(!e||!0!==e.__v_isRef)}function ma(e){return ga(e,!1)}function ha(e){return ga(e,!0)}function ga(e,t){return va(e)?e:new ba(e,t)}class ba{constructor(e,t){this.__v_isShallow=t,this.dep=void 0,this.__v_isRef=!0,this._rawValue=t?e:ca(e),this._value=t?e:da(e)}get value(){return pa(this),this._value}set value(e){e=this.__v_isShallow?e:ca(e),Le(e,this._rawValue)&&(this._rawValue=e,this._value=this.__v_isShallow?e:da(e),fa(this))}}function ya(e){fa(e)}function wa(e){return va(e)?e.value:e}const xa={get:(e,t,a)=>wa(Reflect.get(e,t,a)),set:(e,t,a,l)=>{const n=e[t];return va(n)&&!va(a)?(n.value=a,!0):Reflect.set(e,t,a,l)}};function ka(e){return sa(e)?e:new Proxy(e,xa)}class $a{constructor(e){this.dep=void 0,this.__v_isRef=!0;const{get:t,set:a}=e((()=>pa(this)),(()=>fa(this)));this._get=t,this._set=a}get value(){return this._get()}set value(e){this._set(e)}}function Sa(e){return new $a(e)}function Ca(e){const t=ve(e)?new Array(e.length):{};for(const a in e)t[a]=Aa(e,a);return t}class Na{constructor(e,t,a){this._object=e,this._key=t,this._defaultValue=a,this.__v_isRef=!0}get value(){const e=this._object[this._key];return void 0===e?this._defaultValue:e}set value(e){this._object[this._key]=e}}function Aa(e,t,a){const l=e[t];return va(l)?l:new Na(e,t,a)}class Ea{constructor(e,t,a,l){this._setter=t,this.dep=void 0,this.__v_isRef=!0,this._dirty=!0,this.effect=new lt(e,(()=>{this._dirty||(this._dirty=!0,fa(this))})),this.effect.computed=this,this.effect.active=this._cacheable=!l,this.__v_isReadonly=a}get value(){const e=ca(this);return pa(e),!e._dirty&&e._cacheable||(e._dirty=!1,e._value=e.effect.run()),e._value}set value(e){this._setter(e)}}const Ta=[];function Pa(e,...t){ct();const a=Ta.length?Ta[Ta.length-1].component:null,l=a&&a.appContext.config.warnHandler,n=function(){let e=Ta[Ta.length-1];if(!e)return[];const t=[];for(;e;){const a=t[0];a&&a.vnode===e?a.recurseCount++:t.push({vnode:e,recurseCount:0});const l=e.component&&e.component.parent;e=l&&l.vnode}return t}();if(l)Oa(l,a,11,[e+t.join(""),a&&a.proxy,n.map((({vnode:e})=>`at <${xo(a,e.type)}>`)).join("\n"),n]);else{const a=[`[Vue warn]: ${e}`,...t];n.length&&a.push("\n",...function(e){const t=[];return e.forEach(((e,a)=>{t.push(...0===a?[]:["\n"],...function({vnode:e,recurseCount:t}){const a=t>0?`... (${t} recursive calls)`:"",l=` at <${xo(e.component,e.type,!!e.component&&null==e.component.parent)}`,n=">"+a;return e.props?[l,...Ua(e.props),n]:[l+n]}(e))})),t}(n)),console.warn(...a)}ut()}function Ua(e){const t=[],a=Object.keys(e);return a.slice(0,3).forEach((a=>{t.push(...Ia(a,e[a]))})),a.length>3&&t.push(" ..."),t}function Ia(e,t,a){return ye(t)?(t=JSON.stringify(t),a?t:[`${e}=${t}`]):"number"==typeof t||"boolean"==typeof t||null==t?a?t:[`${e}=${t}`]:va(t)?(t=Ia(e,ca(t.value),!0),a?t:[`${e}=Ref<`,t,">"]):be(t)?[`${e}=fn${t.name?`<${t.name}>`:""}`]:(t=ca(t),a?t:[`${e}=`,t])}function Oa(e,t,a,l){let n;try{n=l?e(...l):e()}catch(e){ja(e,t,a)}return n}function Ma(e,t,a,l){if(be(e)){const n=Oa(e,t,a,l);return n&&ke(n)&&n.catch((e=>{ja(e,t,a)})),n}const n=[];for(let s=0;s<e.length;s++)n.push(Ma(e[s],t,a,l));return n}function ja(e,t,a,l=!0){if(t){let l=t.parent;const n=t.proxy,s=a;for(;l;){const t=l.ec;if(t)for(let a=0;a<t.length;a++)if(!1===t[a](e,n,s))return;l=l.parent}const o=t.appContext.config.errorHandler;if(o)return void Oa(o,null,10,[e,n,s])}!function(e,t,a,l=!0){console.error(e)}(e,0,0,l)}let La=!1,Ra=!1;const Da=[];let Fa=0;const qa=[];let za=null,Ba=0;const Va=[];let Ha=null,Ga=0;const Wa=Promise.resolve();let Ka=null,Ja=null;function Ya(e){const t=Ka||Wa;return e?t.then(this?e.bind(this):e):t}function Za(e){Da.length&&Da.includes(e,La&&e.allowRecurse?Fa+1:Fa)||e===Ja||(null==e.id?Da.push(e):Da.splice(function(e){let t=Fa+1,a=Da.length;for(;t<a;){const l=t+a>>>1;ll(Da[l])<e?t=l+1:a=l}return t}(e.id),0,e),Xa())}function Xa(){La||Ra||(Ra=!0,Ka=Wa.then(nl))}function Qa(e,t,a,l){ve(e)?a.push(...e):t&&t.includes(e,e.allowRecurse?l+1:l)||a.push(e),Xa()}function el(e){Qa(e,Ha,Va,Ga)}function tl(e,t=null){if(qa.length){for(Ja=t,za=[...new Set(qa)],qa.length=0,Ba=0;Ba<za.length;Ba++)za[Ba]();za=null,Ba=0,Ja=null,tl(e,t)}}function al(e){if(tl(),Va.length){const e=[...new Set(Va)];if(Va.length=0,Ha)return void Ha.push(...e);for(Ha=e,Ha.sort(((e,t)=>ll(e)-ll(t))),Ga=0;Ga<Ha.length;Ga++)Ha[Ga]();Ha=null,Ga=0}}const ll=e=>null==e.id?1/0:e.id;function nl(e){Ra=!1,La=!0,tl(e),Da.sort(((e,t)=>ll(e)-ll(t)));try{for(Fa=0;Fa<Da.length;Fa++){const e=Da[Fa];e&&!1!==e.active&&Oa(e,null,14)}}finally{Fa=0,Da.length=0,al(),La=!1,Ka=null,(Da.length||qa.length||Va.length)&&nl(e)}}let sl,ol=[];function il(e,t){var a,l;sl=e,sl?(sl.enabled=!0,ol.forEach((({event:e,args:t})=>sl.emit(e,...t))),ol=[]):"undefined"!=typeof window&&window.HTMLElement&&!(null===(l=null===(a=window.navigator)||void 0===a?void 0:a.userAgent)||void 0===l?void 0:l.includes("jsdom"))?((t.__VUE_DEVTOOLS_HOOK_REPLAY__=t.__VUE_DEVTOOLS_HOOK_REPLAY__||[]).push((e=>{il(e,t)})),setTimeout((()=>{sl||(t.__VUE_DEVTOOLS_HOOK_REPLAY__=null,ol=[])}),3e3)):ol=[]}function rl(e,t,...a){if(e.isUnmounted)return;const l=e.vnode.props||ne;let n=a;const s=t.startsWith("update:"),o=s&&t.slice(7);if(o&&o in l){const e=`${"modelValue"===o?"model":o}Modifiers`,{number:t,trim:s}=l[e]||ne;s&&(n=a.map((e=>e.trim()))),t&&(n=a.map(Fe))}let i,r=l[i=je(t)]||l[i=je(Ue(t))];!r&&s&&(r=l[i=je(Oe(t))]),r&&Ma(r,e,6,n);const c=l[i+"Once"];if(c){if(e.emitted){if(e.emitted[i])return}else e.emitted={};e.emitted[i]=!0,Ma(c,e,6,n)}}function cl(e,t,a=!1){const l=t.emitsCache,n=l.get(e);if(void 0!==n)return n;const s=e.emits;let o={},i=!1;if(!be(e)){const l=e=>{const a=cl(e,t,!0);a&&(i=!0,de(o,a))};!a&&t.mixins.length&&t.mixins.forEach(l),e.extends&&l(e.extends),e.mixins&&e.mixins.forEach(l)}return s||i?(ve(s)?s.forEach((e=>o[e]=null)):de(o,s),l.set(e,o),o):(l.set(e,null),null)}function ul(e,t){return!(!e||!ce(t))&&(t=t.slice(2).replace(/Once$/,""),fe(e,t[0].toLowerCase()+t.slice(1))||fe(e,Oe(t))||fe(e,t))}let dl=null,_l=null;function pl(e){const t=dl;return dl=e,_l=e&&e.type.__scopeId||null,t}function fl(e){_l=e}function vl(){_l=null}const ml=e=>hl;function hl(e,t=dl,a){if(!t)return e;if(e._n)return e;const l=(...a)=>{l._d&&Ms(-1);const n=pl(t),s=e(...a);return pl(n),l._d&&Ms(1),s};return l._n=!0,l._c=!0,l._d=!0,l}function gl(e){const{type:t,vnode:a,proxy:l,withProxy:n,props:s,propsOptions:[o],slots:i,attrs:r,emit:c,render:u,renderCache:d,data:_,setupState:p,ctx:f,inheritAttrs:v}=e;let m,h;const g=pl(e);try{if(4&a.shapeFlag){const e=n||l;m=Xs(u.call(e,e,d,s,p,_,f)),h=r}else{m=Xs(t(s,t.length>1?{attrs:r,slots:i,emit:c}:null)),h=t.props?r:bl(r)}}catch(t){Ts.length=0,ja(t,e,1),m=Gs(As)}let b=m;if(h&&!1!==v){const e=Object.keys(h),{shapeFlag:t}=b;e.length&&7&t&&(o&&e.some(ue)&&(h=yl(h,o)),b=Ks(b,h))}return a.dirs&&(b=Ks(b),b.dirs=b.dirs?b.dirs.concat(a.dirs):a.dirs),a.transition&&(b.transition=a.transition),m=b,pl(g),m}const bl=e=>{let t;for(const a in e)("class"===a||"style"===a||ce(a))&&((t||(t={}))[a]=e[a]);return t},yl=(e,t)=>{const a={};for(const l in e)ue(l)&&l.slice(9)in t||(a[l]=e[l]);return a};function wl(e,t,a){const l=Object.keys(t);if(l.length!==Object.keys(e).length)return!0;for(let n=0;n<l.length;n++){const s=l[n];if(t[s]!==e[s]&&!ul(a,s))return!0}return!1}function xl({vnode:e,parent:t},a){for(;t&&t.subTree===e;)(e=t.vnode).el=a,t=t.parent}const kl=e=>e.__isSuspense,$l={name:"Suspense",__isSuspense:!0,process(e,t,a,l,n,s,o,i,r,c){null==e?function(e,t,a,l,n,s,o,i,r){const{p:c,o:{createElement:u}}=r,d=u("div"),_=e.suspense=Cl(e,n,l,t,d,a,s,o,i,r);c(null,_.pendingBranch=e.ssContent,d,null,l,_,s,o),_.deps>0?(Sl(e,"onPending"),Sl(e,"onFallback"),c(null,e.ssFallback,t,a,l,null,s,o),El(_,e.ssFallback)):_.resolve()}(t,a,l,n,s,o,i,r,c):function(e,t,a,l,n,s,o,i,{p:r,um:c,o:{createElement:u}}){const d=t.suspense=e.suspense;d.vnode=t,t.el=e.el;const _=t.ssContent,p=t.ssFallback,{activeBranch:f,pendingBranch:v,isInFallback:m,isHydrating:h}=d;if(v)d.pendingBranch=_,Fs(_,v)?(r(v,_,d.hiddenContainer,null,n,d,s,o,i),d.deps<=0?d.resolve():m&&(r(f,p,a,l,n,null,s,o,i),El(d,p))):(d.pendingId++,h?(d.isHydrating=!1,d.activeBranch=v):c(v,n,d),d.deps=0,d.effects.length=0,d.hiddenContainer=u("div"),m?(r(null,_,d.hiddenContainer,null,n,d,s,o,i),d.deps<=0?d.resolve():(r(f,p,a,l,n,null,s,o,i),El(d,p))):f&&Fs(_,f)?(r(f,_,a,l,n,d,s,o,i),d.resolve(!0)):(r(null,_,d.hiddenContainer,null,n,d,s,o,i),d.deps<=0&&d.resolve()));else if(f&&Fs(_,f))r(f,_,a,l,n,d,s,o,i),El(d,_);else if(Sl(t,"onPending"),d.pendingBranch=_,d.pendingId++,r(null,_,d.hiddenContainer,null,n,d,s,o,i),d.deps<=0)d.resolve();else{const{timeout:e,pendingId:t}=d;e>0?setTimeout((()=>{d.pendingId===t&&d.fallback(p)}),e):0===e&&d.fallback(p)}}(e,t,a,l,n,o,i,r,c)},hydrate:function(e,t,a,l,n,s,o,i,r){const c=t.suspense=Cl(t,l,a,e.parentNode,document.createElement("div"),null,n,s,o,i,!0),u=r(e,c.pendingBranch=t.ssContent,a,c,s,o);return 0===c.deps&&c.resolve(),u},create:Cl,normalize:function(e){const{shapeFlag:t,children:a}=e,l=32&t;e.ssContent=Nl(l?a.default:a),e.ssFallback=l?Nl(a.fallback):Gs(As)}};function Sl(e,t){const a=e.props&&e.props[t];be(a)&&a()}function Cl(e,t,a,l,n,s,o,i,r,c,u=!1){const{p:d,m:_,um:p,n:f,o:{parentNode:v,remove:m}}=c,h=Fe(e.props&&e.props.timeout),g={vnode:e,parent:t,parentComponent:a,isSVG:o,container:l,hiddenContainer:n,anchor:s,deps:0,pendingId:0,timeout:"number"==typeof h?h:-1,activeBranch:null,pendingBranch:null,isInFallback:!0,isHydrating:u,isUnmounted:!1,effects:[],resolve(e=!1){const{vnode:t,activeBranch:a,pendingBranch:l,pendingId:n,effects:s,parentComponent:o,container:i}=g;if(g.isHydrating)g.isHydrating=!1;else if(!e){const e=a&&l.transition&&"out-in"===l.transition.mode;e&&(a.transition.afterLeave=()=>{n===g.pendingId&&_(l,i,t,0)});let{anchor:t}=g;a&&(t=f(a),p(a,o,g,!0)),e||_(l,i,t,0)}El(g,l),g.pendingBranch=null,g.isInFallback=!1;let r=g.parent,c=!1;for(;r;){if(r.pendingBranch){r.effects.push(...s),c=!0;break}r=r.parent}c||el(s),g.effects=[],Sl(t,"onResolve")},fallback(e){if(!g.pendingBranch)return;const{vnode:t,activeBranch:a,parentComponent:l,container:n,isSVG:s}=g;Sl(t,"onFallback");const o=f(a),c=()=>{g.isInFallback&&(d(null,e,n,o,l,null,s,i,r),El(g,e))},u=e.transition&&"out-in"===e.transition.mode;u&&(a.transition.afterLeave=c),g.isInFallback=!0,p(a,l,null,!0),u||c()},move(e,t,a){g.activeBranch&&_(g.activeBranch,e,t,a),g.container=e},next:()=>g.activeBranch&&f(g.activeBranch),registerDep(e,t){const a=!!g.pendingBranch;a&&g.deps++;const l=e.vnode.el;e.asyncDep.catch((t=>{ja(t,e,0)})).then((n=>{if(e.isUnmounted||g.isUnmounted||g.pendingId!==e.suspenseId)return;e.asyncResolved=!0;const{vnode:s}=e;fo(e,n,!1),l&&(s.el=l);const i=!l&&e.subTree.el;t(e,s,v(l||e.subTree.el),l?null:f(e.subTree),g,o,r),i&&m(i),xl(e,s.el),a&&0==--g.deps&&g.resolve()}))},unmount(e,t){g.isUnmounted=!0,g.activeBranch&&p(g.activeBranch,a,e,t),g.pendingBranch&&p(g.pendingBranch,a,e,t)}};return g}function Nl(e){let t;if(be(e)){const a=Os&&e._c;a&&(e._d=!1,Us()),e=e(),a&&(e._d=!0,t=Ps,Is())}if(ve(e)){const t=function(e){let t;for(let a=0;a<e.length;a++){const l=e[a];if(!Ds(l))return;if(l.type!==As||"v-if"===l.children){if(t)return;t=l}}return t}(e);e=t}return e=Xs(e),t&&!e.dynamicChildren&&(e.dynamicChildren=t.filter((t=>t!==e))),e}function Al(e,t){t&&t.pendingBranch?ve(e)?t.effects.push(...e):t.effects.push(e):el(e)}function El(e,t){e.activeBranch=t;const{vnode:a,parentComponent:l}=e,n=a.el=t.el;l&&l.subTree===a&&(l.vnode.el=n,xl(l,n))}function Tl(e,t){if(so){let a=so.provides;const l=so.parent&&so.parent.provides;l===a&&(a=so.provides=Object.create(l)),a[e]=t}}function Pl(e,t,a=!1){const l=so||dl;if(l){const n=null==l.parent?l.vnode.appContext&&l.vnode.appContext.provides:l.parent.provides;if(n&&e in n)return n[e];if(arguments.length>1)return a&&be(t)?t.call(l.proxy):t}}function Ul(e,t){return Ll(e,null,t)}function Il(e,t){return Ll(e,null,{flush:"post"})}function Ol(e,t){return Ll(e,null,{flush:"sync"})}const Ml={};function jl(e,t,a){return Ll(e,t,a)}function Ll(e,t,{immediate:a,deep:l,flush:n}=ne){const s=so;let o,i,r=!1,c=!1;if(va(e)?(o=()=>e.value,r=ia(e)):sa(e)?(o=()=>e,l=!0):ve(e)?(c=!0,r=e.some((e=>sa(e)||ia(e))),o=()=>e.map((e=>va(e)?e.value:sa(e)?Fl(e):be(e)?Oa(e,s,2):void 0))):o=be(e)?t?()=>Oa(e,s,2):()=>{if(!s||!s.isUnmounted)return i&&i(),Ma(e,s,3,[u])}:oe,t&&l){const e=o;o=()=>Fl(e())}let u=e=>{i=f.onStop=()=>{Oa(e,s,4)}},d=c?[]:Ml;const _=()=>{if(f.active)if(t){const e=f.run();(l||r||(c?e.some(((e,t)=>Le(e,d[t]))):Le(e,d)))&&(i&&i(),Ma(t,s,3,[e,d===Ml?void 0:d,u]),d=e)}else f.run()};let p;_.allowRecurse=!!t,p="sync"===n?_:"post"===n?()=>vs(_,s&&s.suspense):()=>function(e){Qa(e,za,qa,Ba)}(_);const f=new lt(o,p);return t?a?_():d=f.run():"post"===n?vs(f.run.bind(f),s&&s.suspense):f.run(),()=>{f.stop(),s&&s.scope&&_e(s.scope.effects,f)}}function Rl(e,t,a){const l=this.proxy,n=ye(e)?e.includes(".")?Dl(l,e):()=>l[e]:e.bind(l,l);let s;be(t)?s=t:(s=t.handler,a=t);const o=so;io(this);const i=Ll(n,s.bind(l),a);return o?io(o):ro(),i}function Dl(e,t){const a=t.split(".");return()=>{let t=e;for(let e=0;e<a.length&&t;e++)t=t[a[e]];return t}}function Fl(e,t){if(!xe(e)||e.__v_skip)return e;if((t=t||new Set).has(e))return e;if(t.add(e),va(e))Fl(e.value,t);else if(ve(e))for(let a=0;a<e.length;a++)Fl(e[a],t);else if(he(e)||me(e))e.forEach((e=>{Fl(e,t)}));else if(Ce(e))for(const a in e)Fl(e[a],t);return e}function ql(){const e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return pn((()=>{e.isMounted=!0})),mn((()=>{e.isUnmounting=!0})),e}const zl=[Function,Array],Bl={name:"BaseTransition",props:{mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:zl,onEnter:zl,onAfterEnter:zl,onEnterCancelled:zl,onBeforeLeave:zl,onLeave:zl,onAfterLeave:zl,onLeaveCancelled:zl,onBeforeAppear:zl,onAppear:zl,onAfterAppear:zl,onAppearCancelled:zl},setup(e,{slots:t}){const a=oo(),l=ql();let n;return()=>{const s=t.default&&Jl(t.default(),!0);if(!s||!s.length)return;let o=s[0];if(s.length>1)for(const e of s)if(e.type!==As){o=e;break}const i=ca(e),{mode:r}=i;if(l.isLeaving)return Gl(o);const c=Wl(o);if(!c)return Gl(o);const u=Hl(c,i,l,a);Kl(c,u);const d=a.subTree,_=d&&Wl(d);let p=!1;const{getTransitionKey:f}=c.type;if(f){const e=f();void 0===n?n=e:e!==n&&(n=e,p=!0)}if(_&&_.type!==As&&(!Fs(c,_)||p)){const e=Hl(_,i,l,a);if(Kl(_,e),"out-in"===r)return l.isLeaving=!0,e.afterLeave=()=>{l.isLeaving=!1,a.update()},Gl(o);"in-out"===r&&c.type!==As&&(e.delayLeave=(e,t,a)=>{Vl(l,_)[String(_.key)]=_,e._leaveCb=()=>{t(),e._leaveCb=void 0,delete u.delayedLeave},u.delayedLeave=a})}return o}}};function Vl(e,t){const{leavingVNodes:a}=e;let l=a.get(t.type);return l||(l=Object.create(null),a.set(t.type,l)),l}function Hl(e,t,a,l){const{appear:n,mode:s,persisted:o=!1,onBeforeEnter:i,onEnter:r,onAfterEnter:c,onEnterCancelled:u,onBeforeLeave:d,onLeave:_,onAfterLeave:p,onLeaveCancelled:f,onBeforeAppear:v,onAppear:m,onAfterAppear:h,onAppearCancelled:g}=t,b=String(e.key),y=Vl(a,e),w=(e,t)=>{e&&Ma(e,l,9,t)},x=(e,t)=>{const a=t[1];w(e,t),ve(e)?e.every((e=>e.length<=1))&&a():e.length<=1&&a()},k={mode:s,persisted:o,beforeEnter(t){let l=i;if(!a.isMounted){if(!n)return;l=v||i}t._leaveCb&&t._leaveCb(!0);const s=y[b];s&&Fs(e,s)&&s.el._leaveCb&&s.el._leaveCb(),w(l,[t])},enter(e){let t=r,l=c,s=u;if(!a.isMounted){if(!n)return;t=m||r,l=h||c,s=g||u}let o=!1;const i=e._enterCb=t=>{o||(o=!0,w(t?s:l,[e]),k.delayedLeave&&k.delayedLeave(),e._enterCb=void 0)};t?x(t,[e,i]):i()},leave(t,l){const n=String(e.key);if(t._enterCb&&t._enterCb(!0),a.isUnmounting)return l();w(d,[t]);let s=!1;const o=t._leaveCb=a=>{s||(s=!0,l(),w(a?f:p,[t]),t._leaveCb=void 0,y[n]===e&&delete y[n])};y[n]=e,_?x(_,[t,o]):o()},clone:e=>Hl(e,t,a,l)};return k}function Gl(e){if(en(e))return(e=Ks(e)).children=null,e}function Wl(e){return en(e)?e.children?e.children[0]:void 0:e}function Kl(e,t){6&e.shapeFlag&&e.component?Kl(e.component.subTree,t):128&e.shapeFlag?(e.ssContent.transition=t.clone(e.ssContent),e.ssFallback.transition=t.clone(e.ssFallback)):e.transition=t}function Jl(e,t=!1,a){let l=[],n=0;for(let s=0;s<e.length;s++){let o=e[s];const i=null==a?o.key:String(a)+String(null!=o.key?o.key:s);o.type===Cs?(128&o.patchFlag&&n++,l=l.concat(Jl(o.children,t,i))):(t||o.type!==As)&&l.push(null!=i?Ks(o,{key:i}):o)}if(n>1)for(let e=0;e<l.length;e++)l[e].patchFlag=-2;return l}function Yl(e){return be(e)?{setup:e,name:e.name}:e}const Zl=e=>!!e.type.__asyncLoader;function Xl(e){be(e)&&(e={loader:e});const{loader:t,loadingComponent:a,errorComponent:l,delay:n=200,timeout:s,suspensible:o=!0,onError:i}=e;let r,c=null,u=0;const d=()=>{let e;return c||(e=c=t().catch((e=>{if(e=e instanceof Error?e:new Error(String(e)),i)return new Promise(((t,a)=>{i(e,(()=>t((u++,c=null,d()))),(()=>a(e)),u+1)}));throw e})).then((t=>e!==c&&c?c:(t&&(t.__esModule||"Module"===t[Symbol.toStringTag])&&(t=t.default),r=t,t))))};return Yl({name:"AsyncComponentWrapper",__asyncLoader:d,get __asyncResolved(){return r},setup(){const e=so;if(r)return()=>Ql(r,e);const t=t=>{c=null,ja(t,e,13,!l)};if(o&&e.suspense)return d().then((t=>()=>Ql(t,e))).catch((e=>(t(e),()=>l?Gs(l,{error:e}):null)));const i=ma(!1),u=ma(),_=ma(!!n);return n&&setTimeout((()=>{_.value=!1}),n),null!=s&&setTimeout((()=>{if(!i.value&&!u.value){const e=new Error(`Async component timed out after ${s}ms.`);t(e),u.value=e}}),s),d().then((()=>{i.value=!0,e.parent&&en(e.parent.vnode)&&Za(e.parent.update)})).catch((e=>{t(e),u.value=e})),()=>i.value&&r?Ql(r,e):u.value&&l?Gs(l,{error:u.value}):a&&!_.value?Gs(a):void 0}})}function Ql(e,{vnode:{ref:t,props:a,children:l}}){const n=Gs(e,a,l);return n.ref=t,n}const en=e=>e.type.__isKeepAlive,tn={name:"KeepAlive",__isKeepAlive:!0,props:{include:[String,RegExp,Array],exclude:[String,RegExp,Array],max:[String,Number]},setup(e,{slots:t}){const a=oo(),l=a.ctx,n=new Map,s=new Set;let o=null;const i=a.suspense,{renderer:{p:r,m:c,um:u,o:{createElement:d}}}=l,_=d("div");function p(e){rn(e),u(e,a,i,!0)}function f(e){n.forEach(((t,a)=>{const l=wo(t.type);!l||e&&e(l)||v(a)}))}function v(e){const t=n.get(e);o&&t.type===o.type?o&&rn(o):p(t),n.delete(e),s.delete(e)}l.activate=(e,t,a,l,n)=>{const s=e.component;c(e,t,a,0,i),r(s.vnode,e,t,a,s,i,l,e.slotScopeIds,n),vs((()=>{s.isDeactivated=!1,s.a&&Re(s.a);const t=e.props&&e.props.onVnodeMounted;t&&ao(t,s.parent,e)}),i)},l.deactivate=e=>{const t=e.component;c(e,_,null,1,i),vs((()=>{t.da&&Re(t.da);const a=e.props&&e.props.onVnodeUnmounted;a&&ao(a,t.parent,e),t.isDeactivated=!0}),i)},jl((()=>[e.include,e.exclude]),(([e,t])=>{e&&f((t=>an(e,t))),t&&f((e=>!an(t,e)))}),{flush:"post",deep:!0});let m=null;const h=()=>{null!=m&&n.set(m,cn(a.subTree))};return pn(h),vn(h),mn((()=>{n.forEach((e=>{const{subTree:t,suspense:l}=a,n=cn(t);if(e.type!==n.type)p(e);else{rn(n);const e=n.component.da;e&&vs(e,l)}}))})),()=>{if(m=null,!t.default)return null;const a=t.default(),l=a[0];if(a.length>1)return o=null,a;if(!Ds(l)||!(4&l.shapeFlag||128&l.shapeFlag))return o=null,l;let i=cn(l);const r=i.type,c=wo(Zl(i)?i.type.__asyncResolved||{}:r),{include:u,exclude:d,max:_}=e;if(u&&(!c||!an(u,c))||d&&c&&an(d,c))return o=i,l;const p=null==i.key?r:i.key,f=n.get(p);return i.el&&(i=Ks(i),128&l.shapeFlag&&(l.ssContent=i)),m=p,f?(i.el=f.el,i.component=f.component,i.transition&&Kl(i,i.transition),i.shapeFlag|=512,s.delete(p),s.add(p)):(s.add(p),_&&s.size>parseInt(_,10)&&v(s.values().next().value)),i.shapeFlag|=256,o=i,kl(l.type)?l:i}}};function an(e,t){return ve(e)?e.some((e=>an(e,t))):ye(e)?e.split(",").includes(t):!!e.test&&e.test(t)}function ln(e,t){sn(e,"a",t)}function nn(e,t){sn(e,"da",t)}function sn(e,t,a=so){const l=e.__wdc||(e.__wdc=()=>{let t=a;for(;t;){if(t.isDeactivated)return;t=t.parent}return e()});if(un(t,l,a),a){let e=a.parent;for(;e&&e.parent;)en(e.parent.vnode)&&on(l,t,a,e),e=e.parent}}function on(e,t,a,l){const n=un(t,e,l,!0);hn((()=>{_e(l[t],n)}),a)}function rn(e){let t=e.shapeFlag;256&t&&(t-=256),512&t&&(t-=512),e.shapeFlag=t}function cn(e){return 128&e.shapeFlag?e.ssContent:e}function un(e,t,a=so,l=!1){if(a){const n=a[e]||(a[e]=[]),s=t.__weh||(t.__weh=(...l)=>{if(a.isUnmounted)return;ct(),io(a);const n=Ma(t,a,e,l);return ro(),ut(),n});return l?n.unshift(s):n.push(s),s}}const dn=e=>(t,a=so)=>(!po||"sp"===e)&&un(e,t,a),_n=dn("bm"),pn=dn("m"),fn=dn("bu"),vn=dn("u"),mn=dn("bum"),hn=dn("um"),gn=dn("sp"),bn=dn("rtg"),yn=dn("rtc");function wn(e,t=so){un("ec",e,t)}function xn(e,t){const a=dl;if(null===a)return e;const l=bo(a)||a.proxy,n=e.dirs||(e.dirs=[]);for(let e=0;e<t.length;e++){let[a,s,o,i=ne]=t[e];be(a)&&(a={mounted:a,updated:a}),a.deep&&Fl(s),n.push({dir:a,instance:l,value:s,oldValue:void 0,arg:o,modifiers:i})}return e}function kn(e,t,a,l){const n=e.dirs,s=t&&t.dirs;for(let o=0;o<n.length;o++){const i=n[o];s&&(i.oldValue=s[o].value);let r=i.dir[l];r&&(ct(),Ma(r,a,8,[e.el,i,e,t]),ut())}}function $n(e,t){return An("components",e,!0,t)||e}const Sn=Symbol();function Cn(e){return ye(e)?An("components",e,!1)||e:e||Sn}function Nn(e){return An("directives",e)}function An(e,t,a=!0,l=!1){const n=dl||so;if(n){const a=n.type;if("components"===e){const e=wo(a,!1);if(e&&(e===t||e===Ue(t)||e===Me(Ue(t))))return a}const s=En(n[e]||a[e],t)||En(n.appContext[e],t);return!s&&l?a:s}}function En(e,t){return e&&(e[t]||e[Ue(t)]||e[Me(Ue(t))])}function Tn(e,t,a,l){let n;const s=a&&a[l];if(ve(e)||ye(e)){n=new Array(e.length);for(let a=0,l=e.length;a<l;a++)n[a]=t(e[a],a,void 0,s&&s[a])}else if("number"==typeof e){n=new Array(e);for(let a=0;a<e;a++)n[a]=t(a+1,a,void 0,s&&s[a])}else if(xe(e))if(e[Symbol.iterator])n=Array.from(e,((e,a)=>t(e,a,void 0,s&&s[a])));else{const a=Object.keys(e);n=new Array(a.length);for(let l=0,o=a.length;l<o;l++){const o=a[l];n[l]=t(e[o],o,l,s&&s[l])}}else n=[];return a&&(a[l]=n),n}function Pn(e,t){for(let a=0;a<t.length;a++){const l=t[a];if(ve(l))for(let t=0;t<l.length;t++)e[l[t].name]=l[t].fn;else l&&(e[l.name]=l.fn)}return e}function Un(e,t,a={},l,n){if(dl.isCE||dl.parent&&Zl(dl.parent)&&dl.parent.isCE)return Gs("slot","default"===t?null:{name:t},l&&l());let s=e[t];s&&s._c&&(s._d=!1),Us();const o=s&&In(s(a)),i=Rs(Cs,{key:a.key||`_${t}`},o||(l?l():[]),o&&1===e._?64:-2);return!n&&i.scopeId&&(i.slotScopeIds=[i.scopeId+"-s"]),s&&s._c&&(s._d=!0),i}function In(e){return e.some((e=>!Ds(e)||e.type!==As&&!(e.type===Cs&&!In(e.children))))?e:null}function On(e){const t={};for(const a in e)t[je(a)]=e[a];return t}const Mn=e=>e?co(e)?bo(e)||e.proxy:Mn(e.parent):null,jn=de(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>e.props,$attrs:e=>e.attrs,$slots:e=>e.slots,$refs:e=>e.refs,$parent:e=>Mn(e.parent),$root:e=>Mn(e.root),$emit:e=>e.emit,$options:e=>zn(e),$forceUpdate:e=>e.f||(e.f=()=>Za(e.update)),$nextTick:e=>e.n||(e.n=Ya.bind(e.proxy)),$watch:e=>Rl.bind(e)}),Ln={get({_:e},t){const{ctx:a,setupState:l,data:n,props:s,accessCache:o,type:i,appContext:r}=e;let c;if("$"!==t[0]){const i=o[t];if(void 0!==i)switch(i){case 1:return l[t];case 2:return n[t];case 4:return a[t];case 3:return s[t]}else{if(l!==ne&&fe(l,t))return o[t]=1,l[t];if(n!==ne&&fe(n,t))return o[t]=2,n[t];if((c=e.propsOptions[0])&&fe(c,t))return o[t]=3,s[t];if(a!==ne&&fe(a,t))return o[t]=4,a[t];Dn&&(o[t]=0)}}const u=jn[t];let d,_;return u?("$attrs"===t&&dt(e,0,t),u(e)):(d=i.__cssModules)&&(d=d[t])?d:a!==ne&&fe(a,t)?(o[t]=4,a[t]):(_=r.config.globalProperties,fe(_,t)?_[t]:void 0)},set({_:e},t,a){const{data:l,setupState:n,ctx:s}=e;return n!==ne&&fe(n,t)?(n[t]=a,!0):l!==ne&&fe(l,t)?(l[t]=a,!0):!(fe(e.props,t)||"$"===t[0]&&t.slice(1)in e||(s[t]=a,0))},has({_:{data:e,setupState:t,accessCache:a,ctx:l,appContext:n,propsOptions:s}},o){let i;return!!a[o]||e!==ne&&fe(e,o)||t!==ne&&fe(t,o)||(i=s[0])&&fe(i,o)||fe(l,o)||fe(jn,o)||fe(n.config.globalProperties,o)},defineProperty(e,t,a){return null!=a.get?e._.accessCache[t]=0:fe(a,"value")&&this.set(e,t,a.value,null),Reflect.defineProperty(e,t,a)}},Rn=de({},Ln,{get(e,t){if(t!==Symbol.unscopables)return Ln.get(e,t,e)},has:(e,t)=>"_"!==t[0]&&!z(t)});let Dn=!0;function Fn(e,t,a){Ma(ve(e)?e.map((e=>e.bind(t.proxy))):e.bind(t.proxy),t,a)}function qn(e,t,a,l){const n=l.includes(".")?Dl(a,l):()=>a[l];if(ye(e)){const a=t[e];be(a)&&jl(n,a)}else if(be(e))jl(n,e.bind(a));else if(xe(e))if(ve(e))e.forEach((e=>qn(e,t,a,l)));else{const l=be(e.handler)?e.handler.bind(a):t[e.handler];be(l)&&jl(n,l,e)}}function zn(e){const t=e.type,{mixins:a,extends:l}=t,{mixins:n,optionsCache:s,config:{optionMergeStrategies:o}}=e.appContext,i=s.get(t);let r;return i?r=i:n.length||a||l?(r={},n.length&&n.forEach((e=>Bn(r,e,o,!0))),Bn(r,t,o)):r=t,s.set(t,r),r}function Bn(e,t,a,l=!1){const{mixins:n,extends:s}=t;s&&Bn(e,s,a,!0),n&&n.forEach((t=>Bn(e,t,a,!0)));for(const n in t)if(l&&"expose"===n);else{const l=Vn[n]||a&&a[n];e[n]=l?l(e[n],t[n]):t[n]}return e}const Vn={data:Hn,props:Kn,emits:Kn,methods:Kn,computed:Kn,beforeCreate:Wn,created:Wn,beforeMount:Wn,mounted:Wn,beforeUpdate:Wn,updated:Wn,beforeDestroy:Wn,beforeUnmount:Wn,destroyed:Wn,unmounted:Wn,activated:Wn,deactivated:Wn,errorCaptured:Wn,serverPrefetch:Wn,components:Kn,directives:Kn,watch:function(e,t){if(!e)return t;if(!t)return e;const a=de(Object.create(null),e);for(const l in t)a[l]=Wn(e[l],t[l]);return a},provide:Hn,inject:function(e,t){return Kn(Gn(e),Gn(t))}};function Hn(e,t){return t?e?function(){return de(be(e)?e.call(this,this):e,be(t)?t.call(this,this):t)}:t:e}function Gn(e){if(ve(e)){const t={};for(let a=0;a<e.length;a++)t[e[a]]=e[a];return t}return e}function Wn(e,t){return e?[...new Set([].concat(e,t))]:t}function Kn(e,t){return e?de(de(Object.create(null),e),t):t}function Jn(e,t,a,l){const[n,s]=e.propsOptions;let o,i=!1;if(t)for(let r in t){if(Ae(r))continue;const c=t[r];let u;n&&fe(n,u=Ue(r))?s&&s.includes(u)?(o||(o={}))[u]=c:a[u]=c:ul(e.emitsOptions,r)||r in l&&c===l[r]||(l[r]=c,i=!0)}if(s){const t=ca(a),l=o||ne;for(let o=0;o<s.length;o++){const i=s[o];a[i]=Yn(n,t,i,l[i],e,!fe(l,i))}}return i}function Yn(e,t,a,l,n,s){const o=e[a];if(null!=o){const e=fe(o,"default");if(e&&void 0===l){const e=o.default;if(o.type!==Function&&be(e)){const{propsDefaults:s}=n;a in s?l=s[a]:(io(n),l=s[a]=e.call(null,t),ro())}else l=e}o[0]&&(s&&!e?l=!1:!o[1]||""!==l&&l!==Oe(a)||(l=!0))}return l}function Zn(e,t,a=!1){const l=t.propsCache,n=l.get(e);if(n)return n;const s=e.props,o={},i=[];let r=!1;if(!be(e)){const l=e=>{r=!0;const[a,l]=Zn(e,t,!0);de(o,a),l&&i.push(...l)};!a&&t.mixins.length&&t.mixins.forEach(l),e.extends&&l(e.extends),e.mixins&&e.mixins.forEach(l)}if(!s&&!r)return l.set(e,se),se;if(ve(s))for(let e=0;e<s.length;e++){const t=Ue(s[e]);Xn(t)&&(o[t]=ne)}else if(s)for(const e in s){const t=Ue(e);if(Xn(t)){const a=s[e],l=o[t]=ve(a)||be(a)?{type:a}:a;if(l){const e=ts(Boolean,l.type),a=ts(String,l.type);l[0]=e>-1,l[1]=a<0||e<a,(e>-1||fe(l,"default"))&&i.push(t)}}}const c=[o,i];return l.set(e,c),c}function Xn(e){return"$"!==e[0]}function Qn(e){const t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:null===e?"null":""}function es(e,t){return Qn(e)===Qn(t)}function ts(e,t){return ve(t)?t.findIndex((t=>es(t,e))):be(t)&&es(t,e)?0:-1}const as=e=>"_"===e[0]||"$stable"===e,ls=e=>ve(e)?e.map(Xs):[Xs(e)],ns=(e,t,a)=>{if(t._n)return t;const l=hl(((...e)=>ls(t(...e))),a);return l._c=!1,l},ss=(e,t,a)=>{const l=e._ctx;for(const a in e){if(as(a))continue;const n=e[a];if(be(n))t[a]=ns(0,n,l);else if(null!=n){const e=ls(n);t[a]=()=>e}}},os=(e,t)=>{const a=ls(t);e.slots.default=()=>a};function is(){return{app:null,config:{isNativeTag:ie,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let rs=0;function cs(e,t){return function(a,l=null){be(a)||(a=Object.assign({},a)),null==l||xe(l)||(l=null);const n=is(),s=new Set;let o=!1;const i=n.app={_uid:rs++,_component:a,_props:l,_container:null,_context:n,_instance:null,version:Fo,get config(){return n.config},set config(e){},use:(e,...t)=>(s.has(e)||(e&&be(e.install)?(s.add(e),e.install(i,...t)):be(e)&&(s.add(e),e(i,...t))),i),mixin:e=>(n.mixins.includes(e)||n.mixins.push(e),i),component:(e,t)=>t?(n.components[e]=t,i):n.components[e],directive:(e,t)=>t?(n.directives[e]=t,i):n.directives[e],mount(s,r,c){if(!o){const u=Gs(a,l);return u.appContext=n,r&&t?t(u,s):e(u,s,c),o=!0,i._container=s,s.__vue_app__=i,bo(u.component)||u.component.proxy}},unmount(){o&&(e(null,i._container),delete i._container.__vue_app__)},provide:(e,t)=>(n.provides[e]=t,i)};return i}}function us(e,t,a,l,n=!1){if(ve(e))return void e.forEach(((e,s)=>us(e,t&&(ve(t)?t[s]:t),a,l,n)));if(Zl(l)&&!n)return;const s=4&l.shapeFlag?bo(l.component)||l.component.proxy:l.el,o=n?null:s,{i:i,r:r}=e,c=t&&t.r,u=i.refs===ne?i.refs={}:i.refs,d=i.setupState;if(null!=c&&c!==r&&(ye(c)?(u[c]=null,fe(d,c)&&(d[c]=null)):va(c)&&(c.value=null)),be(r))Oa(r,i,12,[o,u]);else{const t=ye(r),l=va(r);if(t||l){const i=()=>{if(e.f){const a=t?u[r]:r.value;n?ve(a)&&_e(a,s):ve(a)?a.includes(s)||a.push(s):t?(u[r]=[s],fe(d,r)&&(d[r]=u[r])):(r.value=[s],e.k&&(u[e.k]=r.value))}else t?(u[r]=o,fe(d,r)&&(d[r]=o)):l&&(r.value=o,e.k&&(u[e.k]=o))};o?(i.id=-1,vs(i,a)):i()}}}let ds=!1;const _s=e=>/svg/.test(e.namespaceURI)&&"foreignObject"!==e.tagName,ps=e=>8===e.nodeType;function fs(e){const{mt:t,p:a,o:{patchProp:l,createText:n,nextSibling:s,parentNode:o,remove:i,insert:r,createComment:c}}=e,u=(a,l,i,c,m,h=!1)=>{const g=ps(a)&&"["===a.data,b=()=>f(a,l,i,c,m,g),{type:y,ref:w,shapeFlag:x,patchFlag:k}=l,$=a.nodeType;l.el=a,-2===k&&(h=!1,l.dynamicChildren=null);let S=null;switch(y){case Ns:3!==$?""===l.children?(r(l.el=n(""),o(a),a),S=a):S=b():(a.data!==l.children&&(ds=!0,a.data=l.children),S=s(a));break;case As:S=8!==$||g?b():s(a);break;case Es:if(1===$||3===$){S=a;const e=!l.children.length;for(let t=0;t<l.staticCount;t++)e&&(l.children+=1===S.nodeType?S.outerHTML:S.data),t===l.staticCount-1&&(l.anchor=S),S=s(S);return S}S=b();break;case Cs:S=g?p(a,l,i,c,m,h):b();break;default:if(1&x)S=1!==$||l.type.toLowerCase()!==a.tagName.toLowerCase()?b():d(a,l,i,c,m,h);else if(6&x){l.slotScopeIds=m;const e=o(a);if(t(l,e,null,i,c,_s(e),h),S=g?v(a):s(a),S&&ps(S)&&"teleport end"===S.data&&(S=s(S)),Zl(l)){let t;g?(t=Gs(Cs),t.anchor=S?S.previousSibling:e.lastChild):t=3===a.nodeType?Js(""):Gs("div"),t.el=a,l.component.subTree=t}}else 64&x?S=8!==$?b():l.type.hydrate(a,l,i,c,m,h,e,_):128&x&&(S=l.type.hydrate(a,l,i,c,_s(o(a)),m,h,e,u))}return null!=w&&us(w,null,c,l),S},d=(e,t,a,n,s,o)=>{o=o||!!t.dynamicChildren;const{type:r,props:c,patchFlag:u,shapeFlag:d,dirs:p}=t,f="input"===r&&p||"option"===r;if(f||-1!==u){if(p&&kn(t,null,a,"created"),c)if(f||!o||48&u)for(const t in c)(f&&t.endsWith("value")||ce(t)&&!Ae(t))&&l(e,t,null,c[t],!1,void 0,a);else c.onClick&&l(e,"onClick",null,c.onClick,!1,void 0,a);let r;if((r=c&&c.onVnodeBeforeMount)&&ao(r,a,t),p&&kn(t,null,a,"beforeMount"),((r=c&&c.onVnodeMounted)||p)&&Al((()=>{r&&ao(r,a,t),p&&kn(t,null,a,"mounted")}),n),16&d&&(!c||!c.innerHTML&&!c.textContent)){let l=_(e.firstChild,t,e,a,n,s,o);for(;l;){ds=!0;const e=l;l=l.nextSibling,i(e)}}else 8&d&&e.textContent!==t.children&&(ds=!0,e.textContent=t.children)}return e.nextSibling},_=(e,t,l,n,s,o,i)=>{i=i||!!t.dynamicChildren;const r=t.children,c=r.length;for(let t=0;t<c;t++){const c=i?r[t]:r[t]=Xs(r[t]);if(e)e=u(e,c,n,s,o,i);else{if(c.type===Ns&&!c.children)continue;ds=!0,a(null,c,l,null,n,s,_s(l),o)}}return e},p=(e,t,a,l,n,i)=>{const{slotScopeIds:u}=t;u&&(n=n?n.concat(u):u);const d=o(e),p=_(s(e),t,d,a,l,n,i);return p&&ps(p)&&"]"===p.data?s(t.anchor=p):(ds=!0,r(t.anchor=c("]"),d,p),p)},f=(e,t,l,n,r,c)=>{if(ds=!0,t.el=null,c){const t=v(e);for(;;){const a=s(e);if(!a||a===t)break;i(a)}}const u=s(e),d=o(e);return i(e),a(null,t,d,u,l,n,_s(d),r),u},v=e=>{let t=0;for(;e;)if((e=s(e))&&ps(e)&&("["===e.data&&t++,"]"===e.data)){if(0===t)return s(e);t--}return e};return[(e,t)=>{if(!t.hasChildNodes())return a(null,e,t),al(),void(t._vnode=e);ds=!1,u(t.firstChild,e,null,null,null),al(),t._vnode=e,ds&&console.error("Hydration completed but contains mismatches.")},u]}const vs=Al;function ms(e){return gs(e)}function hs(e){return gs(e,fs)}function gs(e,t){(qe||(qe="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{})).__VUE__=!0;const{insert:a,remove:l,patchProp:n,createElement:s,createText:o,createComment:i,setText:r,setElementText:c,parentNode:u,nextSibling:d,setScopeId:_=oe,cloneNode:p,insertStaticContent:f}=e,v=(e,t,a,l=null,n=null,s=null,o=!1,i=null,r=!!t.dynamicChildren)=>{if(e===t)return;e&&!Fs(e,t)&&(l=q(e),j(e,n,s,!0),e=null),-2===t.patchFlag&&(r=!1,t.dynamicChildren=null);const{type:c,ref:u,shapeFlag:d}=t;switch(c){case Ns:m(e,t,a,l);break;case As:h(e,t,a,l);break;case Es:null==e&&g(t,a,l,o);break;case Cs:C(e,t,a,l,n,s,o,i,r);break;default:1&d?b(e,t,a,l,n,s,o,i,r):6&d?N(e,t,a,l,n,s,o,i,r):(64&d||128&d)&&c.process(e,t,a,l,n,s,o,i,r,B)}null!=u&&n&&us(u,e&&e.ref,s,t||e,!t)},m=(e,t,l,n)=>{if(null==e)a(t.el=o(t.children),l,n);else{const a=t.el=e.el;t.children!==e.children&&r(a,t.children)}},h=(e,t,l,n)=>{null==e?a(t.el=i(t.children||""),l,n):t.el=e.el},g=(e,t,a,l)=>{[e.el,e.anchor]=f(e.children,t,a,l,e.el,e.anchor)},b=(e,t,a,l,n,s,o,i,r)=>{o=o||"svg"===t.type,null==e?y(t,a,l,n,s,o,i,r):k(e,t,n,s,o,i,r)},y=(e,t,l,o,i,r,u,d)=>{let _,f;const{type:v,props:m,shapeFlag:h,transition:g,patchFlag:b,dirs:y}=e;if(e.el&&void 0!==p&&-1===b)_=e.el=p(e.el);else{if(_=e.el=s(e.type,r,m&&m.is,m),8&h?c(_,e.children):16&h&&x(e.children,_,null,o,i,r&&"foreignObject"!==v,u,d),y&&kn(e,null,o,"created"),m){for(const t in m)"value"===t||Ae(t)||n(_,t,null,m[t],r,e.children,o,i,F);"value"in m&&n(_,"value",null,m.value),(f=m.onVnodeBeforeMount)&&ao(f,o,e)}w(_,e,e.scopeId,u,o)}y&&kn(e,null,o,"beforeMount");const k=(!i||i&&!i.pendingBranch)&&g&&!g.persisted;k&&g.beforeEnter(_),a(_,t,l),((f=m&&m.onVnodeMounted)||k||y)&&vs((()=>{f&&ao(f,o,e),k&&g.enter(_),y&&kn(e,null,o,"mounted")}),i)},w=(e,t,a,l,n)=>{if(a&&_(e,a),l)for(let t=0;t<l.length;t++)_(e,l[t]);if(n&&t===n.subTree){const t=n.vnode;w(e,t,t.scopeId,t.slotScopeIds,n.parent)}},x=(e,t,a,l,n,s,o,i,r=0)=>{for(let c=r;c<e.length;c++){const r=e[c]=i?Qs(e[c]):Xs(e[c]);v(null,r,t,a,l,n,s,o,i)}},k=(e,t,a,l,s,o,i)=>{const r=t.el=e.el;let{patchFlag:u,dynamicChildren:d,dirs:_}=t;u|=16&e.patchFlag;const p=e.props||ne,f=t.props||ne;let v;a&&bs(a,!1),(v=f.onVnodeBeforeUpdate)&&ao(v,a,t,e),_&&kn(t,e,a,"beforeUpdate"),a&&bs(a,!0);const m=s&&"foreignObject"!==t.type;if(d?$(e.dynamicChildren,d,r,a,l,m,o):i||U(e,t,r,null,a,l,m,o,!1),u>0){if(16&u)S(r,t,p,f,a,l,s);else if(2&u&&p.class!==f.class&&n(r,"class",null,f.class,s),4&u&&n(r,"style",p.style,f.style,s),8&u){const o=t.dynamicProps;for(let t=0;t<o.length;t++){const i=o[t],c=p[i],u=f[i];u===c&&"value"!==i||n(r,i,c,u,s,e.children,a,l,F)}}1&u&&e.children!==t.children&&c(r,t.children)}else i||null!=d||S(r,t,p,f,a,l,s);((v=f.onVnodeUpdated)||_)&&vs((()=>{v&&ao(v,a,t,e),_&&kn(t,e,a,"updated")}),l)},$=(e,t,a,l,n,s,o)=>{for(let i=0;i<t.length;i++){const r=e[i],c=t[i],d=r.el&&(r.type===Cs||!Fs(r,c)||70&r.shapeFlag)?u(r.el):a;v(r,c,d,null,l,n,s,o,!0)}},S=(e,t,a,l,s,o,i)=>{if(a!==l){for(const r in l){if(Ae(r))continue;const c=l[r],u=a[r];c!==u&&"value"!==r&&n(e,r,u,c,i,t.children,s,o,F)}if(a!==ne)for(const r in a)Ae(r)||r in l||n(e,r,a[r],null,i,t.children,s,o,F);"value"in l&&n(e,"value",a.value,l.value)}},C=(e,t,l,n,s,i,r,c,u)=>{const d=t.el=e?e.el:o(""),_=t.anchor=e?e.anchor:o("");let{patchFlag:p,dynamicChildren:f,slotScopeIds:v}=t;v&&(c=c?c.concat(v):v),null==e?(a(d,l,n),a(_,l,n),x(t.children,l,_,s,i,r,c,u)):p>0&&64&p&&f&&e.dynamicChildren?($(e.dynamicChildren,f,l,s,i,r,c),(null!=t.key||s&&t===s.subTree)&&ys(e,t,!0)):U(e,t,l,_,s,i,r,c,u)},N=(e,t,a,l,n,s,o,i,r)=>{t.slotScopeIds=i,null==e?512&t.shapeFlag?n.ctx.activate(t,a,l,o,r):A(t,a,l,n,s,o,r):E(e,t,r)},A=(e,t,a,l,n,s,o)=>{const i=e.component=function(e,t,a){const l=e.type,n=(t?t.appContext:e.appContext)||lo,s={uid:no++,vnode:e,type:l,parent:t,appContext:n,root:null,next:null,subTree:null,effect:null,update:null,scope:new Be(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:t?t.provides:Object.create(n.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:Zn(l,n),emitsOptions:cl(l,n),emit:null,emitted:null,propsDefaults:ne,inheritAttrs:l.inheritAttrs,ctx:ne,data:ne,props:ne,attrs:ne,slots:ne,refs:ne,setupState:ne,setupContext:null,suspense:a,suspenseId:a?a.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return s.ctx={_:s},s.root=t?t.root:s,s.emit=rl.bind(null,s),e.ce&&e.ce(s),s}(e,l,n);if(en(e)&&(i.ctx.renderer=B),function(e,t=!1){po=t;const{props:a,children:l}=e.vnode,n=co(e);(function(e,t,a,l=!1){const n={},s={};De(s,zs,1),e.propsDefaults=Object.create(null),Jn(e,t,n,s);for(const t in e.propsOptions[0])t in n||(n[t]=void 0);e.props=a?l?n:ta(n):e.type.props?n:s,e.attrs=s})(e,a,n,t),((e,t)=>{if(32&e.vnode.shapeFlag){const a=t._;a?(e.slots=ca(t),De(t,"_",a)):ss(t,e.slots={})}else e.slots={},t&&os(e,t);De(e.slots,zs,1)})(e,l),n&&function(e,t){const a=e.type;e.accessCache=Object.create(null),e.proxy=ua(new Proxy(e.ctx,Ln));const{setup:l}=a;if(l){const a=e.setupContext=l.length>1?go(e):null;io(e),ct();const n=Oa(l,e,0,[e.props,a]);if(ut(),ro(),ke(n)){if(n.then(ro,ro),t)return n.then((a=>{fo(e,a,t)})).catch((t=>{ja(t,e,0)}));e.asyncDep=n}else fo(e,n,t)}else ho(e,t)}(e,t),po=!1}(i),i.asyncDep){if(n&&n.registerDep(i,T),!e.el){const e=i.subTree=Gs(As);h(null,e,t,a)}}else T(i,e,t,a,n,s,o)},E=(e,t,a)=>{const l=t.component=e.component;if(function(e,t,a){const{props:l,children:n,component:s}=e,{props:o,children:i,patchFlag:r}=t,c=s.emitsOptions;if(t.dirs||t.transition)return!0;if(!(a&&r>=0))return!(!n&&!i||i&&i.$stable)||l!==o&&(l?!o||wl(l,o,c):!!o);if(1024&r)return!0;if(16&r)return l?wl(l,o,c):!!o;if(8&r){const e=t.dynamicProps;for(let t=0;t<e.length;t++){const a=e[t];if(o[a]!==l[a]&&!ul(c,a))return!0}}return!1}(e,t,a)){if(l.asyncDep&&!l.asyncResolved)return void P(l,t,a);l.next=t,function(e){const t=Da.indexOf(e);t>Fa&&Da.splice(t,1)}(l.update),l.update()}else t.el=e.el,l.vnode=t},T=(e,t,a,l,n,s,o)=>{const i=e.effect=new lt((()=>{if(e.isMounted){let t,{next:a,bu:l,u:i,parent:r,vnode:c}=e,d=a;bs(e,!1),a?(a.el=c.el,P(e,a,o)):a=c,l&&Re(l),(t=a.props&&a.props.onVnodeBeforeUpdate)&&ao(t,r,a,c),bs(e,!0);const _=gl(e),p=e.subTree;e.subTree=_,v(p,_,u(p.el),q(p),e,n,s),a.el=_.el,null===d&&xl(e,_.el),i&&vs(i,n),(t=a.props&&a.props.onVnodeUpdated)&&vs((()=>ao(t,r,a,c)),n)}else{let o;const{el:i,props:r}=t,{bm:c,m:u,parent:d}=e,_=Zl(t);if(bs(e,!1),c&&Re(c),!_&&(o=r&&r.onVnodeBeforeMount)&&ao(o,d,t),bs(e,!0),i&&H){const a=()=>{e.subTree=gl(e),H(i,e.subTree,e,n,null)};_?t.type.__asyncLoader().then((()=>!e.isUnmounted&&a())):a()}else{const o=e.subTree=gl(e);v(null,o,a,l,e,n,s),t.el=o.el}if(u&&vs(u,n),!_&&(o=r&&r.onVnodeMounted)){const e=t;vs((()=>ao(o,d,e)),n)}(256&t.shapeFlag||d&&Zl(d.vnode)&&256&d.vnode.shapeFlag)&&e.a&&vs(e.a,n),e.isMounted=!0,t=a=l=null}}),(()=>Za(r)),e.scope),r=e.update=()=>i.run();r.id=e.uid,bs(e,!0),r()},P=(e,t,a)=>{t.component=e;const l=e.vnode.props;e.vnode=t,e.next=null,function(e,t,a,l){const{props:n,attrs:s,vnode:{patchFlag:o}}=e,i=ca(n),[r]=e.propsOptions;let c=!1;if(!(l||o>0)||16&o){let l;Jn(e,t,n,s)&&(c=!0);for(const s in i)t&&(fe(t,s)||(l=Oe(s))!==s&&fe(t,l))||(r?!a||void 0===a[s]&&void 0===a[l]||(n[s]=Yn(r,i,s,void 0,e,!0)):delete n[s]);if(s!==i)for(const e in s)t&&fe(t,e)||(delete s[e],c=!0)}else if(8&o){const a=e.vnode.dynamicProps;for(let l=0;l<a.length;l++){let o=a[l];if(ul(e.emitsOptions,o))continue;const u=t[o];if(r)if(fe(s,o))u!==s[o]&&(s[o]=u,c=!0);else{const t=Ue(o);n[t]=Yn(r,i,t,u,e,!1)}else u!==s[o]&&(s[o]=u,c=!0)}}c&&pt(e,"set","$attrs")}(e,t.props,l,a),((e,t,a)=>{const{vnode:l,slots:n}=e;let s=!0,o=ne;if(32&l.shapeFlag){const e=t._;e?a&&1===e?s=!1:(de(n,t),a||1!==e||delete n._):(s=!t.$stable,ss(t,n)),o=t}else t&&(os(e,t),o={default:1});if(s)for(const e in n)as(e)||e in o||delete n[e]})(e,t.children,a),ct(),tl(void 0,e.update),ut()},U=(e,t,a,l,n,s,o,i,r=!1)=>{const u=e&&e.children,d=e?e.shapeFlag:0,_=t.children,{patchFlag:p,shapeFlag:f}=t;if(p>0){if(128&p)return void O(u,_,a,l,n,s,o,i,r);if(256&p)return void I(u,_,a,l,n,s,o,i,r)}8&f?(16&d&&F(u,n,s),_!==u&&c(a,_)):16&d?16&f?O(u,_,a,l,n,s,o,i,r):F(u,n,s,!0):(8&d&&c(a,""),16&f&&x(_,a,l,n,s,o,i,r))},I=(e,t,a,l,n,s,o,i,r)=>{const c=(e=e||se).length,u=(t=t||se).length,d=Math.min(c,u);let _;for(_=0;_<d;_++){const l=t[_]=r?Qs(t[_]):Xs(t[_]);v(e[_],l,a,null,n,s,o,i,r)}c>u?F(e,n,s,!0,!1,d):x(t,a,l,n,s,o,i,r,d)},O=(e,t,a,l,n,s,o,i,r)=>{let c=0;const u=t.length;let d=e.length-1,_=u-1;for(;c<=d&&c<=_;){const l=e[c],u=t[c]=r?Qs(t[c]):Xs(t[c]);if(!Fs(l,u))break;v(l,u,a,null,n,s,o,i,r),c++}for(;c<=d&&c<=_;){const l=e[d],c=t[_]=r?Qs(t[_]):Xs(t[_]);if(!Fs(l,c))break;v(l,c,a,null,n,s,o,i,r),d--,_--}if(c>d){if(c<=_){const e=_+1,d=e<u?t[e].el:l;for(;c<=_;)v(null,t[c]=r?Qs(t[c]):Xs(t[c]),a,d,n,s,o,i,r),c++}}else if(c>_)for(;c<=d;)j(e[c],n,s,!0),c++;else{const p=c,f=c,m=new Map;for(c=f;c<=_;c++){const e=t[c]=r?Qs(t[c]):Xs(t[c]);null!=e.key&&m.set(e.key,c)}let h,g=0;const b=_-f+1;let y=!1,w=0;const x=new Array(b);for(c=0;c<b;c++)x[c]=0;for(c=p;c<=d;c++){const l=e[c];if(g>=b){j(l,n,s,!0);continue}let u;if(null!=l.key)u=m.get(l.key);else for(h=f;h<=_;h++)if(0===x[h-f]&&Fs(l,t[h])){u=h;break}void 0===u?j(l,n,s,!0):(x[u-f]=c+1,u>=w?w=u:y=!0,v(l,t[u],a,null,n,s,o,i,r),g++)}const k=y?function(e){const t=e.slice(),a=[0];let l,n,s,o,i;const r=e.length;for(l=0;l<r;l++){const r=e[l];if(0!==r){if(n=a[a.length-1],e[n]<r){t[l]=n,a.push(l);continue}for(s=0,o=a.length-1;s<o;)i=s+o>>1,e[a[i]]<r?s=i+1:o=i;r<e[a[s]]&&(s>0&&(t[l]=a[s-1]),a[s]=l)}}for(s=a.length,o=a[s-1];s-- >0;)a[s]=o,o=t[o];return a}(x):se;for(h=k.length-1,c=b-1;c>=0;c--){const e=f+c,d=t[e],_=e+1<u?t[e+1].el:l;0===x[c]?v(null,d,a,_,n,s,o,i,r):y&&(h<0||c!==k[h]?M(d,a,_,2):h--)}}},M=(e,t,l,n,s=null)=>{const{el:o,type:i,transition:r,children:c,shapeFlag:u}=e;if(6&u)M(e.component.subTree,t,l,n);else if(128&u)e.suspense.move(t,l,n);else if(64&u)i.move(e,t,l,B);else if(i!==Cs)if(i!==Es)if(2!==n&&1&u&&r)if(0===n)r.beforeEnter(o),a(o,t,l),vs((()=>r.enter(o)),s);else{const{leave:e,delayLeave:n,afterLeave:s}=r,i=()=>a(o,t,l),c=()=>{e(o,(()=>{i(),s&&s()}))};n?n(o,i,c):c()}else a(o,t,l);else(({el:e,anchor:t},l,n)=>{let s;for(;e&&e!==t;)s=d(e),a(e,l,n),e=s;a(t,l,n)})(e,t,l);else{a(o,t,l);for(let e=0;e<c.length;e++)M(c[e],t,l,n);a(e.anchor,t,l)}},j=(e,t,a,l=!1,n=!1)=>{const{type:s,props:o,ref:i,children:r,dynamicChildren:c,shapeFlag:u,patchFlag:d,dirs:_}=e;if(null!=i&&us(i,null,a,e,!0),256&u)return void t.ctx.deactivate(e);const p=1&u&&_,f=!Zl(e);let v;if(f&&(v=o&&o.onVnodeBeforeUnmount)&&ao(v,t,e),6&u)D(e.component,a,l);else{if(128&u)return void e.suspense.unmount(a,l);p&&kn(e,null,t,"beforeUnmount"),64&u?e.type.remove(e,t,a,n,B,l):c&&(s!==Cs||d>0&&64&d)?F(c,t,a,!1,!0):(s===Cs&&384&d||!n&&16&u)&&F(r,t,a),l&&L(e)}(f&&(v=o&&o.onVnodeUnmounted)||p)&&vs((()=>{v&&ao(v,t,e),p&&kn(e,null,t,"unmounted")}),a)},L=e=>{const{type:t,el:a,anchor:n,transition:s}=e;if(t===Cs)return void R(a,n);if(t===Es)return void(({el:e,anchor:t})=>{let a;for(;e&&e!==t;)a=d(e),l(e),e=a;l(t)})(e);const o=()=>{l(a),s&&!s.persisted&&s.afterLeave&&s.afterLeave()};if(1&e.shapeFlag&&s&&!s.persisted){const{leave:t,delayLeave:l}=s,n=()=>t(a,o);l?l(e.el,o,n):n()}else o()},R=(e,t)=>{let a;for(;e!==t;)a=d(e),l(e),e=a;l(t)},D=(e,t,a)=>{const{bum:l,scope:n,update:s,subTree:o,um:i}=e;l&&Re(l),n.stop(),s&&(s.active=!1,j(o,e,t,a)),i&&vs(i,t),vs((()=>{e.isUnmounted=!0}),t),t&&t.pendingBranch&&!t.isUnmounted&&e.asyncDep&&!e.asyncResolved&&e.suspenseId===t.pendingId&&(t.deps--,0===t.deps&&t.resolve())},F=(e,t,a,l=!1,n=!1,s=0)=>{for(let o=s;o<e.length;o++)j(e[o],t,a,l,n)},q=e=>6&e.shapeFlag?q(e.component.subTree):128&e.shapeFlag?e.suspense.next():d(e.anchor||e.el),z=(e,t,a)=>{null==e?t._vnode&&j(t._vnode,null,null,!0):v(t._vnode||null,e,t,null,null,null,a),al(),t._vnode=e},B={p:v,um:j,m:M,r:L,mt:A,mc:x,pc:U,pbc:$,n:q,o:e};let V,H;return t&&([V,H]=t(B)),{render:z,hydrate:V,createApp:cs(z,V)}}function bs({effect:e,update:t},a){e.allowRecurse=t.allowRecurse=a}function ys(e,t,a=!1){const l=e.children,n=t.children;if(ve(l)&&ve(n))for(let e=0;e<l.length;e++){const t=l[e];let s=n[e];1&s.shapeFlag&&!s.dynamicChildren&&((s.patchFlag<=0||32===s.patchFlag)&&(s=n[e]=Qs(n[e]),s.el=t.el),a||ys(t,s))}}const ws=e=>e&&(e.disabled||""===e.disabled),xs=e=>"undefined"!=typeof SVGElement&&e instanceof SVGElement,ks=(e,t)=>{const a=e&&e.to;return ye(a)?t?t(a):null:a};function $s(e,t,a,{o:{insert:l},m:n},s=2){0===s&&l(e.targetAnchor,t,a);const{el:o,anchor:i,shapeFlag:r,children:c,props:u}=e,d=2===s;if(d&&l(o,t,a),(!d||ws(u))&&16&r)for(let e=0;e<c.length;e++)n(c[e],t,a,2);d&&l(i,t,a)}const Ss={__isTeleport:!0,process(e,t,a,l,n,s,o,i,r,c){const{mc:u,pc:d,pbc:_,o:{insert:p,querySelector:f,createText:v}}=c,m=ws(t.props);let{shapeFlag:h,children:g,dynamicChildren:b}=t;if(null==e){const e=t.el=v(""),c=t.anchor=v("");p(e,a,l),p(c,a,l);const d=t.target=ks(t.props,f),_=t.targetAnchor=v("");d&&(p(_,d),o=o||xs(d));const b=(e,t)=>{16&h&&u(g,e,t,n,s,o,i,r)};m?b(a,c):d&&b(d,_)}else{t.el=e.el;const l=t.anchor=e.anchor,u=t.target=e.target,p=t.targetAnchor=e.targetAnchor,v=ws(e.props),h=v?a:u,g=v?l:p;if(o=o||xs(u),b?(_(e.dynamicChildren,b,h,n,s,o,i),ys(e,t,!0)):r||d(e,t,h,g,n,s,o,i,!1),m)v||$s(t,a,l,c,1);else if((t.props&&t.props.to)!==(e.props&&e.props.to)){const e=t.target=ks(t.props,f);e&&$s(t,e,null,c,0)}else v&&$s(t,u,p,c,1)}},remove(e,t,a,l,{um:n,o:{remove:s}},o){const{shapeFlag:i,children:r,anchor:c,targetAnchor:u,target:d,props:_}=e;if(d&&s(u),(o||!ws(_))&&(s(c),16&i))for(let e=0;e<r.length;e++){const l=r[e];n(l,t,a,!0,!!l.dynamicChildren)}},move:$s,hydrate:function(e,t,a,l,n,s,{o:{nextSibling:o,parentNode:i,querySelector:r}},c){const u=t.target=ks(t.props,r);if(u){const r=u._lpa||u.firstChild;if(16&t.shapeFlag)if(ws(t.props))t.anchor=c(o(e),t,i(e),a,l,n,s),t.targetAnchor=r;else{t.anchor=o(e);let i=r;for(;i;)if(i=o(i),i&&8===i.nodeType&&"teleport anchor"===i.data){t.targetAnchor=i,u._lpa=t.targetAnchor&&o(t.targetAnchor);break}c(r,t,u,a,l,n,s)}}return t.anchor&&o(t.anchor)}},Cs=Symbol(void 0),Ns=Symbol(void 0),As=Symbol(void 0),Es=Symbol(void 0),Ts=[];let Ps=null;function Us(e=!1){Ts.push(Ps=e?null:[])}function Is(){Ts.pop(),Ps=Ts[Ts.length-1]||null}let Os=1;function Ms(e){Os+=e}function js(e){return e.dynamicChildren=Os>0?Ps||se:null,Is(),Os>0&&Ps&&Ps.push(e),e}function Ls(e,t,a,l,n,s){return js(Hs(e,t,a,l,n,s,!0))}function Rs(e,t,a,l,n){return js(Gs(e,t,a,l,n,!0))}function Ds(e){return!!e&&!0===e.__v_isVNode}function Fs(e,t){return e.type===t.type&&e.key===t.key}function qs(e){}const zs="__vInternal",Bs=({key:e})=>null!=e?e:null,Vs=({ref:e,ref_key:t,ref_for:a})=>null!=e?ye(e)||va(e)||be(e)?{i:dl,r:e,k:t,f:!!a}:e:null;function Hs(e,t=null,a=null,l=0,n=null,s=(e===Cs?0:1),o=!1,i=!1){const r={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&Bs(t),ref:t&&Vs(t),scopeId:_l,slotScopeIds:null,children:a,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:s,patchFlag:l,dynamicProps:n,dynamicChildren:null,appContext:null};return i?(eo(r,a),128&s&&e.normalize(r)):a&&(r.shapeFlag|=ye(a)?8:16),Os>0&&!o&&Ps&&(r.patchFlag>0||6&s)&&32!==r.patchFlag&&Ps.push(r),r}const Gs=function(e,t=null,a=null,l=0,n=null,s=!1){if(e&&e!==Sn||(e=As),Ds(e)){const l=Ks(e,t,!0);return a&&eo(l,a),Os>0&&!s&&Ps&&(6&l.shapeFlag?Ps[Ps.indexOf(e)]=l:Ps.push(l)),l.patchFlag|=-2,l}var o;if(be(o=e)&&"__vccOpts"in o&&(e=e.__vccOpts),t){t=Ws(t);let{class:e,style:a}=t;e&&!ye(e)&&(t.class=J(e)),xe(a)&&(ra(a)&&!ve(a)&&(a=de({},a)),t.style=H(a))}return Hs(e,t,a,l,n,ye(e)?1:kl(e)?128:(e=>e.__isTeleport)(e)?64:xe(e)?4:be(e)?2:0,s,!0)};function Ws(e){return e?ra(e)||zs in e?de({},e):e:null}function Ks(e,t,a=!1){const{props:l,ref:n,patchFlag:s,children:o}=e,i=t?to(l||{},t):l;return{__v_isVNode:!0,__v_skip:!0,type:e.type,props:i,key:i&&Bs(i),ref:t&&t.ref?a&&n?ve(n)?n.concat(Vs(t)):[n,Vs(t)]:Vs(t):n,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:o,target:e.target,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==Cs?-1===s?16:16|s:s,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:e.transition,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&Ks(e.ssContent),ssFallback:e.ssFallback&&Ks(e.ssFallback),el:e.el,anchor:e.anchor}}function Js(e=" ",t=0){return Gs(Ns,null,e,t)}function Ys(e,t){const a=Gs(Es,null,e);return a.staticCount=t,a}function Zs(e="",t=!1){return t?(Us(),Rs(As,null,e)):Gs(As,null,e)}function Xs(e){return null==e||"boolean"==typeof e?Gs(As):ve(e)?Gs(Cs,null,e.slice()):"object"==typeof e?Qs(e):Gs(Ns,null,String(e))}function Qs(e){return null===e.el||e.memo?e:Ks(e)}function eo(e,t){let a=0;const{shapeFlag:l}=e;if(null==t)t=null;else if(ve(t))a=16;else if("object"==typeof t){if(65&l){const a=t.default;return void(a&&(a._c&&(a._d=!1),eo(e,a()),a._c&&(a._d=!0)))}{a=32;const l=t._;l||zs in t?3===l&&dl&&(1===dl.slots._?t._=1:(t._=2,e.patchFlag|=1024)):t._ctx=dl}}else be(t)?(t={default:t,_ctx:dl},a=32):(t=String(t),64&l?(a=16,t=[Js(t)]):a=8);e.children=t,e.shapeFlag|=a}function to(...e){const t={};for(let a=0;a<e.length;a++){const l=e[a];for(const e in l)if("class"===e)t.class!==l.class&&(t.class=J([t.class,l.class]));else if("style"===e)t.style=H([t.style,l.style]);else if(ce(e)){const a=t[e],n=l[e];!n||a===n||ve(a)&&a.includes(n)||(t[e]=a?[].concat(a,n):n)}else""!==e&&(t[e]=l[e])}return t}function ao(e,t,a,l=null){Ma(e,t,7,[a,l])}const lo=is();let no=0,so=null;const oo=()=>so||dl,io=e=>{so=e,e.scope.on()},ro=()=>{so&&so.scope.off(),so=null};function co(e){return 4&e.vnode.shapeFlag}let uo,_o,po=!1;function fo(e,t,a){be(t)?e.render=t:xe(t)&&(e.setupState=ka(t)),ho(e,a)}function vo(e){uo=e,_o=e=>{e.render._rc&&(e.withProxy=new Proxy(e.ctx,Rn))}}const mo=()=>!uo;function ho(e,t,a){const l=e.type;if(!e.render){if(!t&&uo&&!l.render){const t=l.template;if(t){const{isCustomElement:a,compilerOptions:n}=e.appContext.config,{delimiters:s,compilerOptions:o}=l,i=de(de({isCustomElement:a,delimiters:s},n),o);l.render=uo(t,i)}}e.render=l.render||oe,_o&&_o(e)}io(e),ct(),function(e){const t=zn(e),a=e.proxy,l=e.ctx;Dn=!1,t.beforeCreate&&Fn(t.beforeCreate,e,"bc");const{data:n,computed:s,methods:o,watch:i,provide:r,inject:c,created:u,beforeMount:d,mounted:_,beforeUpdate:p,updated:f,activated:v,deactivated:m,beforeUnmount:h,unmounted:g,render:b,renderTracked:y,renderTriggered:w,errorCaptured:x,serverPrefetch:k,expose:$,inheritAttrs:S,components:C,directives:N}=t;if(c&&function(e,t,a=oe,l=!1){ve(e)&&(e=Gn(e));for(const a in e){const n=e[a];let s;s=xe(n)?"default"in n?Pl(n.from||a,n.default,!0):Pl(n.from||a):Pl(n),va(s)&&l?Object.defineProperty(t,a,{enumerable:!0,configurable:!0,get:()=>s.value,set:e=>s.value=e}):t[a]=s}}(c,l,null,e.appContext.config.unwrapInjectedRef),o)for(const e in o){const t=o[e];be(t)&&(l[e]=t.bind(a))}if(n){const t=n.call(a,a);xe(t)&&(e.data=ea(t))}if(Dn=!0,s)for(const e in s){const t=s[e],n=be(t)?t.bind(a,a):be(t.get)?t.get.bind(a,a):oe,o=!be(t)&&be(t.set)?t.set.bind(a):oe,i=ko({get:n,set:o});Object.defineProperty(l,e,{enumerable:!0,configurable:!0,get:()=>i.value,set:e=>i.value=e})}if(i)for(const e in i)qn(i[e],l,a,e);if(r){const e=be(r)?r.call(a):r;Reflect.ownKeys(e).forEach((t=>{Tl(t,e[t])}))}function A(e,t){ve(t)?t.forEach((t=>e(t.bind(a)))):t&&e(t.bind(a))}if(u&&Fn(u,e,"c"),A(_n,d),A(pn,_),A(fn,p),A(vn,f),A(ln,v),A(nn,m),A(wn,x),A(yn,y),A(bn,w),A(mn,h),A(hn,g),A(gn,k),ve($))if($.length){const t=e.exposed||(e.exposed={});$.forEach((e=>{Object.defineProperty(t,e,{get:()=>a[e],set:t=>a[e]=t})}))}else e.exposed||(e.exposed={});b&&e.render===oe&&(e.render=b),null!=S&&(e.inheritAttrs=S),C&&(e.components=C),N&&(e.directives=N)}(e),ut(),ro()}function go(e){let t;return{get attrs(){return t||(t=function(e){return new Proxy(e.attrs,{get:(t,a)=>(dt(e,0,"$attrs"),t[a])})}(e))},slots:e.slots,emit:e.emit,expose:t=>{e.exposed=t||{}}}}function bo(e){if(e.exposed)return e.exposeProxy||(e.exposeProxy=new Proxy(ka(ua(e.exposed)),{get:(t,a)=>a in t?t[a]:a in jn?jn[a](e):void 0}))}const yo=/(?:^|[-_])(\w)/g;function wo(e,t=!0){return be(e)?e.displayName||e.name:e.name||t&&e.__name}function xo(e,t,a=!1){let l=wo(t);if(!l&&t.__file){const e=t.__file.match(/([^/\\]+)\.\w+$/);e&&(l=e[1])}if(!l&&e&&e.parent){const a=e=>{for(const a in e)if(e[a]===t)return a};l=a(e.components||e.parent.type.components)||a(e.appContext.components)}return l?l.replace(yo,(e=>e.toUpperCase())).replace(/[-_]/g,""):a?"App":"Anonymous"}const ko=(e,t)=>function(e,t,a=!1){let l,n;const s=be(e);return s?(l=e,n=oe):(l=e.get,n=e.set),new Ea(l,n,s||!n,a)}(e,0,po);function $o(){return null}function So(){return null}function Co(e){}function No(e,t){return null}function Ao(){return To().slots}function Eo(){return To().attrs}function To(){const e=oo();return e.setupContext||(e.setupContext=go(e))}function Po(e,t){const a=ve(e)?e.reduce(((e,t)=>(e[t]={},e)),{}):e;for(const e in t){const l=a[e];l?ve(l)||be(l)?a[e]={type:l,default:t[e]}:l.default=t[e]:null===l&&(a[e]={default:t[e]})}return a}function Uo(e,t){const a={};for(const l in e)t.includes(l)||Object.defineProperty(a,l,{enumerable:!0,get:()=>e[l]});return a}function Io(e){const t=oo();let a=e();return ro(),ke(a)&&(a=a.catch((e=>{throw io(t),e}))),[a,()=>io(t)]}function Oo(e,t,a){const l=arguments.length;return 2===l?xe(t)&&!ve(t)?Ds(t)?Gs(e,null,[t]):Gs(e,t):Gs(e,null,t):(l>3?a=Array.prototype.slice.call(arguments,2):3===l&&Ds(a)&&(a=[a]),Gs(e,t,a))}const Mo=Symbol(""),jo=()=>{{const e=Pl(Mo);return e||Pa("Server rendering context not provided. Make sure to only call useSSRContext() conditionally in the server build."),e}};function Lo(){}function Ro(e,t,a,l){const n=a[l];if(n&&Do(n,e))return n;const s=t();return s.memo=e.slice(),a[l]=s}function Do(e,t){const a=e.memo;if(a.length!=t.length)return!1;for(let e=0;e<a.length;e++)if(Le(a[e],t[e]))return!1;return Os>0&&Ps&&Ps.push(e),!0}const Fo="3.2.37",qo="undefined"!=typeof document?document:null,zo=qo&&qo.createElement("template"),Bo={insert:(e,t,a)=>{t.insertBefore(e,a||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,a,l)=>{const n=t?qo.createElementNS("http://www.w3.org/2000/svg",e):qo.createElement(e,a?{is:a}:void 0);return"select"===e&&l&&null!=l.multiple&&n.setAttribute("multiple",l.multiple),n},createText:e=>qo.createTextNode(e),createComment:e=>qo.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>qo.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},cloneNode(e){const t=e.cloneNode(!0);return"_value"in e&&(t._value=e._value),t},insertStaticContent(e,t,a,l,n,s){const o=a?a.previousSibling:t.lastChild;if(n&&(n===s||n.nextSibling))for(;t.insertBefore(n.cloneNode(!0),a),n!==s&&(n=n.nextSibling););else{zo.innerHTML=l?`<svg>${e}</svg>`:e;const n=zo.content;if(l){const e=n.firstChild;for(;e.firstChild;)n.appendChild(e.firstChild);n.removeChild(e)}t.insertBefore(n,a)}return[o?o.nextSibling:t.firstChild,a?a.previousSibling:t.lastChild]}},Vo=/\s*!important$/;function Ho(e,t,a){if(ve(a))a.forEach((a=>Ho(e,t,a)));else if(null==a&&(a=""),t.startsWith("--"))e.setProperty(t,a);else{const l=function(e,t){const a=Wo[t];if(a)return a;let l=Ue(t);if("filter"!==l&&l in e)return Wo[t]=l;l=Me(l);for(let a=0;a<Go.length;a++){const n=Go[a]+l;if(n in e)return Wo[t]=n}return t}(e,t);Vo.test(a)?e.setProperty(Oe(l),a.replace(Vo,""),"important"):e[l]=a}}const Go=["Webkit","Moz","ms"],Wo={},Ko="http://www.w3.org/1999/xlink",[Jo,Yo]=(()=>{let e=Date.now,t=!1;if("undefined"!=typeof window){Date.now()>document.createEvent("Event").timeStamp&&(e=performance.now.bind(performance));const a=navigator.userAgent.match(/firefox\/(\d+)/i);t=!!(a&&Number(a[1])<=53)}return[e,t]})();let Zo=0;const Xo=Promise.resolve(),Qo=()=>{Zo=0};function ei(e,t,a,l){e.addEventListener(t,a,l)}const ti=/(?:Once|Passive|Capture)$/,ai=/^on[a-z]/;function li(e,t){const a=Yl(e);class l extends oi{constructor(e){super(a,e,t)}}return l.def=a,l}const ni=e=>li(e,sr),si="undefined"!=typeof HTMLElement?HTMLElement:class{};class oi extends si{constructor(e,t={},a){super(),this._def=e,this._props=t,this._instance=null,this._connected=!1,this._resolved=!1,this._numberProps=null,this.shadowRoot&&a?a(this._createVNode(),this.shadowRoot):this.attachShadow({mode:"open"})}connectedCallback(){this._connected=!0,this._instance||this._resolveDef()}disconnectedCallback(){this._connected=!1,Ya((()=>{this._connected||(nr(null,this.shadowRoot),this._instance=null)}))}_resolveDef(){if(this._resolved)return;this._resolved=!0;for(let e=0;e<this.attributes.length;e++)this._setAttr(this.attributes[e].name);new MutationObserver((e=>{for(const t of e)this._setAttr(t.attributeName)})).observe(this,{attributes:!0});const e=e=>{const{props:t,styles:a}=e,l=!ve(t),n=t?l?Object.keys(t):t:[];let s;if(l)for(const e in this._props){const a=t[e];(a===Number||a&&a.type===Number)&&(this._props[e]=Fe(this._props[e]),(s||(s=Object.create(null)))[e]=!0)}this._numberProps=s;for(const e of Object.keys(this))"_"!==e[0]&&this._setProp(e,this[e],!0,!1);for(const e of n.map(Ue))Object.defineProperty(this,e,{get(){return this._getProp(e)},set(t){this._setProp(e,t)}});this._applyStyles(a),this._update()},t=this._def.__asyncLoader;t?t().then(e):e(this._def)}_setAttr(e){let t=this.getAttribute(e);this._numberProps&&this._numberProps[e]&&(t=Fe(t)),this._setProp(Ue(e),t,!1)}_getProp(e){return this._props[e]}_setProp(e,t,a=!0,l=!0){t!==this._props[e]&&(this._props[e]=t,l&&this._instance&&this._update(),a&&(!0===t?this.setAttribute(Oe(e),""):"string"==typeof t||"number"==typeof t?this.setAttribute(Oe(e),t+""):t||this.removeAttribute(Oe(e))))}_update(){nr(this._createVNode(),this.shadowRoot)}_createVNode(){const e=Gs(this._def,de({},this._props));return this._instance||(e.ce=e=>{this._instance=e,e.isCE=!0,e.emit=(e,...t)=>{this.dispatchEvent(new CustomEvent(e,{detail:t}))};let t=this;for(;t=t&&(t.parentNode||t.host);)if(t instanceof oi){e.parent=t._instance;break}}),e}_applyStyles(e){e&&e.forEach((e=>{const t=document.createElement("style");t.textContent=e,this.shadowRoot.appendChild(t)}))}}function ii(e="$style"){{const t=oo();if(!t)return ne;const a=t.type.__cssModules;if(!a)return ne;return a[e]||ne}}function ri(e){const t=oo();if(!t)return;const a=()=>ci(t.subTree,e(t.proxy));Il(a),pn((()=>{const e=new MutationObserver(a);e.observe(t.subTree.el.parentNode,{childList:!0}),hn((()=>e.disconnect()))}))}function ci(e,t){if(128&e.shapeFlag){const a=e.suspense;e=a.activeBranch,a.pendingBranch&&!a.isHydrating&&a.effects.push((()=>{ci(a.activeBranch,t)}))}for(;e.component;)e=e.component.subTree;if(1&e.shapeFlag&&e.el)ui(e.el,t);else if(e.type===Cs)e.children.forEach((e=>ci(e,t)));else if(e.type===Es){let{el:a,anchor:l}=e;for(;a&&(ui(a,t),a!==l);)a=a.nextSibling}}function ui(e,t){if(1===e.nodeType){const a=e.style;for(const e in t)a.setProperty(`--${e}`,t[e])}}const di=(e,{slots:t})=>Oo(Bl,mi(e),t);di.displayName="Transition";const _i={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},pi=di.props=de({},Bl.props,_i),fi=(e,t=[])=>{ve(e)?e.forEach((e=>e(...t))):e&&e(...t)},vi=e=>!!e&&(ve(e)?e.some((e=>e.length>1)):e.length>1);function mi(e){const t={};for(const a in e)a in _i||(t[a]=e[a]);if(!1===e.css)return t;const{name:a="v",type:l,duration:n,enterFromClass:s=`${a}-enter-from`,enterActiveClass:o=`${a}-enter-active`,enterToClass:i=`${a}-enter-to`,appearFromClass:r=s,appearActiveClass:c=o,appearToClass:u=i,leaveFromClass:d=`${a}-leave-from`,leaveActiveClass:_=`${a}-leave-active`,leaveToClass:p=`${a}-leave-to`}=e,f=function(e){if(null==e)return null;if(xe(e))return[hi(e.enter),hi(e.leave)];{const t=hi(e);return[t,t]}}(n),v=f&&f[0],m=f&&f[1],{onBeforeEnter:h,onEnter:g,onEnterCancelled:b,onLeave:y,onLeaveCancelled:w,onBeforeAppear:x=h,onAppear:k=g,onAppearCancelled:$=b}=t,S=(e,t,a)=>{bi(e,t?u:i),bi(e,t?c:o),a&&a()},C=(e,t)=>{e._isLeaving=!1,bi(e,d),bi(e,p),bi(e,_),t&&t()},N=e=>(t,a)=>{const n=e?k:g,o=()=>S(t,e,a);fi(n,[t,o]),yi((()=>{bi(t,e?r:s),gi(t,e?u:i),vi(n)||xi(t,l,v,o)}))};return de(t,{onBeforeEnter(e){fi(h,[e]),gi(e,s),gi(e,o)},onBeforeAppear(e){fi(x,[e]),gi(e,r),gi(e,c)},onEnter:N(!1),onAppear:N(!0),onLeave(e,t){e._isLeaving=!0;const a=()=>C(e,t);gi(e,d),Ci(),gi(e,_),yi((()=>{e._isLeaving&&(bi(e,d),gi(e,p),vi(y)||xi(e,l,m,a))})),fi(y,[e,a])},onEnterCancelled(e){S(e,!1),fi(b,[e])},onAppearCancelled(e){S(e,!0),fi($,[e])},onLeaveCancelled(e){C(e),fi(w,[e])}})}function hi(e){return Fe(e)}function gi(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.add(t))),(e._vtc||(e._vtc=new Set)).add(t)}function bi(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.remove(t)));const{_vtc:a}=e;a&&(a.delete(t),a.size||(e._vtc=void 0))}function yi(e){requestAnimationFrame((()=>{requestAnimationFrame(e)}))}let wi=0;function xi(e,t,a,l){const n=e._endId=++wi,s=()=>{n===e._endId&&l()};if(a)return setTimeout(s,a);const{type:o,timeout:i,propCount:r}=ki(e,t);if(!o)return l();const c=o+"end";let u=0;const d=()=>{e.removeEventListener(c,_),s()},_=t=>{t.target===e&&++u>=r&&d()};setTimeout((()=>{u<r&&d()}),i+1),e.addEventListener(c,_)}function ki(e,t){const a=window.getComputedStyle(e),l=e=>(a[e]||"").split(", "),n=l("transitionDelay"),s=l("transitionDuration"),o=$i(n,s),i=l("animationDelay"),r=l("animationDuration"),c=$i(i,r);let u=null,d=0,_=0;return"transition"===t?o>0&&(u="transition",d=o,_=s.length):"animation"===t?c>0&&(u="animation",d=c,_=r.length):(d=Math.max(o,c),u=d>0?o>c?"transition":"animation":null,_=u?"transition"===u?s.length:r.length:0),{type:u,timeout:d,propCount:_,hasTransform:"transition"===u&&/\b(transform|all)(,|$)/.test(a.transitionProperty)}}function $i(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max(...t.map(((t,a)=>Si(t)+Si(e[a]))))}function Si(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function Ci(){return document.body.offsetHeight}const Ni=new WeakMap,Ai=new WeakMap,Ei={name:"TransitionGroup",props:de({},pi,{tag:String,moveClass:String}),setup(e,{slots:t}){const a=oo(),l=ql();let n,s;return vn((()=>{if(!n.length)return;const t=e.moveClass||`${e.name||"v"}-move`;if(!function(e,t,a){const l=e.cloneNode();e._vtc&&e._vtc.forEach((e=>{e.split(/\s+/).forEach((e=>e&&l.classList.remove(e)))})),a.split(/\s+/).forEach((e=>e&&l.classList.add(e))),l.style.display="none";const n=1===t.nodeType?t:t.parentNode;n.appendChild(l);const{hasTransform:s}=ki(l);return n.removeChild(l),s}(n[0].el,a.vnode.el,t))return;n.forEach(Ti),n.forEach(Pi);const l=n.filter(Ui);Ci(),l.forEach((e=>{const a=e.el,l=a.style;gi(a,t),l.transform=l.webkitTransform=l.transitionDuration="";const n=a._moveCb=e=>{e&&e.target!==a||e&&!/transform$/.test(e.propertyName)||(a.removeEventListener("transitionend",n),a._moveCb=null,bi(a,t))};a.addEventListener("transitionend",n)}))})),()=>{const o=ca(e),i=mi(o);let r=o.tag||Cs;n=s,s=t.default?Jl(t.default()):[];for(let e=0;e<s.length;e++){const t=s[e];null!=t.key&&Kl(t,Hl(t,i,l,a))}if(n)for(let e=0;e<n.length;e++){const t=n[e];Kl(t,Hl(t,i,l,a)),Ni.set(t,t.el.getBoundingClientRect())}return Gs(r,null,s)}}};function Ti(e){const t=e.el;t._moveCb&&t._moveCb(),t._enterCb&&t._enterCb()}function Pi(e){Ai.set(e,e.el.getBoundingClientRect())}function Ui(e){const t=Ni.get(e),a=Ai.get(e),l=t.left-a.left,n=t.top-a.top;if(l||n){const t=e.el.style;return t.transform=t.webkitTransform=`translate(${l}px,${n}px)`,t.transitionDuration="0s",e}}const Ii=e=>{const t=e.props["onUpdate:modelValue"]||!1;return ve(t)?e=>Re(t,e):t};function Oi(e){e.target.composing=!0}function Mi(e){const t=e.target;t.composing&&(t.composing=!1,t.dispatchEvent(new Event("input")))}const ji={created(e,{modifiers:{lazy:t,trim:a,number:l}},n){e._assign=Ii(n);const s=l||n.props&&"number"===n.props.type;ei(e,t?"change":"input",(t=>{if(t.target.composing)return;let l=e.value;a&&(l=l.trim()),s&&(l=Fe(l)),e._assign(l)})),a&&ei(e,"change",(()=>{e.value=e.value.trim()})),t||(ei(e,"compositionstart",Oi),ei(e,"compositionend",Mi),ei(e,"change",Mi))},mounted(e,{value:t}){e.value=null==t?"":t},beforeUpdate(e,{value:t,modifiers:{lazy:a,trim:l,number:n}},s){if(e._assign=Ii(s),e.composing)return;if(document.activeElement===e&&"range"!==e.type){if(a)return;if(l&&e.value.trim()===t)return;if((n||"number"===e.type)&&Fe(e.value)===t)return}const o=null==t?"":t;e.value!==o&&(e.value=o)}},Li={deep:!0,created(e,t,a){e._assign=Ii(a),ei(e,"change",(()=>{const t=e._modelValue,a=zi(e),l=e.checked,n=e._assign;if(ve(t)){const e=te(t,a),s=-1!==e;if(l&&!s)n(t.concat(a));else if(!l&&s){const a=[...t];a.splice(e,1),n(a)}}else if(he(t)){const e=new Set(t);l?e.add(a):e.delete(a),n(e)}else n(Bi(e,l))}))},mounted:Ri,beforeUpdate(e,t,a){e._assign=Ii(a),Ri(e,t,a)}};function Ri(e,{value:t,oldValue:a},l){e._modelValue=t,ve(t)?e.checked=te(t,l.props.value)>-1:he(t)?e.checked=t.has(l.props.value):t!==a&&(e.checked=ee(t,Bi(e,!0)))}const Di={created(e,{value:t},a){e.checked=ee(t,a.props.value),e._assign=Ii(a),ei(e,"change",(()=>{e._assign(zi(e))}))},beforeUpdate(e,{value:t,oldValue:a},l){e._assign=Ii(l),t!==a&&(e.checked=ee(t,l.props.value))}},Fi={deep:!0,created(e,{value:t,modifiers:{number:a}},l){const n=he(t);ei(e,"change",(()=>{const t=Array.prototype.filter.call(e.options,(e=>e.selected)).map((e=>a?Fe(zi(e)):zi(e)));e._assign(e.multiple?n?new Set(t):t:t[0])})),e._assign=Ii(l)},mounted(e,{value:t}){qi(e,t)},beforeUpdate(e,t,a){e._assign=Ii(a)},updated(e,{value:t}){qi(e,t)}};function qi(e,t){const a=e.multiple;if(!a||ve(t)||he(t)){for(let l=0,n=e.options.length;l<n;l++){const n=e.options[l],s=zi(n);if(a)n.selected=ve(t)?te(t,s)>-1:t.has(s);else if(ee(zi(n),t))return void(e.selectedIndex!==l&&(e.selectedIndex=l))}a||-1===e.selectedIndex||(e.selectedIndex=-1)}}function zi(e){return"_value"in e?e._value:e.value}function Bi(e,t){const a=t?"_trueValue":"_falseValue";return a in e?e[a]:t}const Vi={created(e,t,a){Hi(e,t,a,null,"created")},mounted(e,t,a){Hi(e,t,a,null,"mounted")},beforeUpdate(e,t,a,l){Hi(e,t,a,l,"beforeUpdate")},updated(e,t,a,l){Hi(e,t,a,l,"updated")}};function Hi(e,t,a,l,n){const s=function(e,t){switch(e){case"SELECT":return Fi;case"TEXTAREA":return ji;default:switch(t){case"checkbox":return Li;case"radio":return Di;default:return ji}}}(e.tagName,a.props&&a.props.type)[n];s&&s(e,t,a,l)}const Gi=["ctrl","shift","alt","meta"],Wi={stop:e=>e.stopPropagation(),prevent:e=>e.preventDefault(),self:e=>e.target!==e.currentTarget,ctrl:e=>!e.ctrlKey,shift:e=>!e.shiftKey,alt:e=>!e.altKey,meta:e=>!e.metaKey,left:e=>"button"in e&&0!==e.button,middle:e=>"button"in e&&1!==e.button,right:e=>"button"in e&&2!==e.button,exact:(e,t)=>Gi.some((a=>e[`${a}Key`]&&!t.includes(a)))},Ki=(e,t)=>(a,...l)=>{for(let e=0;e<t.length;e++){const l=Wi[t[e]];if(l&&l(a,t))return}return e(a,...l)},Ji={esc:"escape",space:" ",up:"arrow-up",left:"arrow-left",right:"arrow-right",down:"arrow-down",delete:"backspace"},Yi=(e,t)=>a=>{if(!("key"in a))return;const l=Oe(a.key);return t.some((e=>e===l||Ji[e]===l))?e(a):void 0},Zi={beforeMount(e,{value:t},{transition:a}){e._vod="none"===e.style.display?"":e.style.display,a&&t?a.beforeEnter(e):Xi(e,t)},mounted(e,{value:t},{transition:a}){a&&t&&a.enter(e)},updated(e,{value:t,oldValue:a},{transition:l}){!t!=!a&&(l?t?(l.beforeEnter(e),Xi(e,!0),l.enter(e)):l.leave(e,(()=>{Xi(e,!1)})):Xi(e,t))},beforeUnmount(e,{value:t}){Xi(e,t)}};function Xi(e,t){e.style.display=t?e._vod:"none"}const Qi=de({patchProp:(e,t,a,l,n=!1,s,o,i,r)=>{"class"===t?function(e,t,a){const l=e._vtc;l&&(t=(t?[t,...l]:[...l]).join(" ")),null==t?e.removeAttribute("class"):a?e.setAttribute("class",t):e.className=t}(e,l,n):"style"===t?function(e,t,a){const l=e.style,n=ye(a);if(a&&!n){for(const e in a)Ho(l,e,a[e]);if(t&&!ye(t))for(const e in t)null==a[e]&&Ho(l,e,"")}else{const s=l.display;n?t!==a&&(l.cssText=a):t&&e.removeAttribute("style"),"_vod"in e&&(l.display=s)}}(e,a,l):ce(t)?ue(t)||function(e,t,a,l,n=null){const s=e._vei||(e._vei={}),o=s[t];if(l&&o)o.value=l;else{const[a,i]=function(e){let t;if(ti.test(e)){let a;for(t={};a=e.match(ti);)e=e.slice(0,e.length-a[0].length),t[a[0].toLowerCase()]=!0}return[Oe(e.slice(2)),t]}(t);if(l){const o=s[t]=function(e,t){const a=e=>{const l=e.timeStamp||Jo();(Yo||l>=a.attached-1)&&Ma(function(e,t){if(ve(t)){const a=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{a.call(e),e._stopped=!0},t.map((e=>t=>!t._stopped&&e&&e(t)))}return t}(e,a.value),t,5,[e])};return a.value=e,a.attached=Zo||(Xo.then(Qo),Zo=Jo()),a}(l,n);ei(e,a,o,i)}else o&&(function(e,t,a,l){e.removeEventListener(t,a,l)}(e,a,o,i),s[t]=void 0)}}(e,t,0,l,o):("."===t[0]?(t=t.slice(1),1):"^"===t[0]?(t=t.slice(1),0):function(e,t,a,l){return l?"innerHTML"===t||"textContent"===t||!!(t in e&&ai.test(t)&&be(a)):"spellcheck"!==t&&"draggable"!==t&&"translate"!==t&&("form"!==t&&(("list"!==t||"INPUT"!==e.tagName)&&(("type"!==t||"TEXTAREA"!==e.tagName)&&((!ai.test(t)||!ye(a))&&t in e))))}(e,t,l,n))?function(e,t,a,l,n,s,o){if("innerHTML"===t||"textContent"===t)return l&&o(l,n,s),void(e[t]=null==a?"":a);if("value"===t&&"PROGRESS"!==e.tagName&&!e.tagName.includes("-")){e._value=a;const l=null==a?"":a;return e.value===l&&"OPTION"!==e.tagName||(e.value=l),void(null==a&&e.removeAttribute(t))}let i=!1;if(""===a||null==a){const l=typeof e[t];"boolean"===l?a=V(a):null==a&&"string"===l?(a="",i=!0):"number"===l&&(a=0,i=!0)}try{e[t]=a}catch(e){}i&&e.removeAttribute(t)}(e,t,l,s,o,i,r):("true-value"===t?e._trueValue=l:"false-value"===t&&(e._falseValue=l),function(e,t,a,l,n){if(l&&t.startsWith("xlink:"))null==a?e.removeAttributeNS(Ko,t.slice(6,t.length)):e.setAttributeNS(Ko,t,a);else{const l=B(t);null==a||l&&!V(a)?e.removeAttribute(t):e.setAttribute(t,l?"":a)}}(e,t,l,n))}},Bo);let er,tr=!1;function ar(){return er||(er=ms(Qi))}function lr(){return er=tr?er:hs(Qi),tr=!0,er}const nr=(...e)=>{ar().render(...e)},sr=(...e)=>{lr().hydrate(...e)},or=(...e)=>{const t=ar().createApp(...e),{mount:a}=t;return t.mount=e=>{const l=rr(e);if(!l)return;const n=t._component;be(n)||n.render||n.template||(n.template=l.innerHTML),l.innerHTML="";const s=a(l,!1,l instanceof SVGElement);return l instanceof Element&&(l.removeAttribute("v-cloak"),l.setAttribute("data-v-app","")),s},t},ir=(...e)=>{const t=lr().createApp(...e),{mount:a}=t;return t.mount=e=>{const t=rr(e);if(t)return a(t,!0,t instanceof SVGElement)},t};function rr(e){return ye(e)?document.querySelector(e):e}const cr=oe;var ur=Object.freeze({__proto__:null,render:nr,hydrate:sr,createApp:or,createSSRApp:ir,initDirectivesForSSR:cr,defineCustomElement:li,defineSSRCustomElement:ni,VueElement:oi,useCssModule:ii,useCssVars:ri,Transition:di,TransitionGroup:Ei,vModelText:ji,vModelCheckbox:Li,vModelRadio:Di,vModelSelect:Fi,vModelDynamic:Vi,withModifiers:Ki,withKeys:Yi,vShow:Zi,reactive:ea,ref:ma,readonly:aa,unref:wa,proxyRefs:ka,isRef:va,toRef:Aa,toRefs:Ca,isProxy:ra,isReactive:sa,isReadonly:oa,isShallow:ia,customRef:Sa,triggerRef:ya,shallowRef:ha,shallowReactive:ta,shallowReadonly:la,markRaw:ua,toRaw:ca,effect:st,stop:ot,ReactiveEffect:lt,effectScope:Ve,EffectScope:Be,getCurrentScope:Ge,onScopeDispose:We,computed:ko,watch:jl,watchEffect:Ul,watchPostEffect:Il,watchSyncEffect:Ol,onBeforeMount:_n,onMounted:pn,onBeforeUpdate:fn,onUpdated:vn,onBeforeUnmount:mn,onUnmounted:hn,onActivated:ln,onDeactivated:nn,onRenderTracked:yn,onRenderTriggered:bn,onErrorCaptured:wn,onServerPrefetch:gn,provide:Tl,inject:Pl,nextTick:Ya,defineComponent:Yl,defineAsyncComponent:Xl,useAttrs:Eo,useSlots:Ao,defineProps:$o,defineEmits:So,defineExpose:Co,withDefaults:No,mergeDefaults:Po,createPropsRestProxy:Uo,withAsyncContext:Io,getCurrentInstance:oo,h:Oo,createVNode:Gs,cloneVNode:Ks,mergeProps:to,isVNode:Ds,Fragment:Cs,Text:Ns,Comment:As,Static:Es,Teleport:Ss,Suspense:$l,KeepAlive:tn,BaseTransition:Bl,withDirectives:xn,useSSRContext:jo,ssrContextKey:Mo,createRenderer:ms,createHydrationRenderer:hs,queuePostFlushCb:el,warn:Pa,handleError:ja,callWithErrorHandling:Oa,callWithAsyncErrorHandling:Ma,resolveComponent:$n,resolveDirective:Nn,resolveDynamicComponent:Cn,registerRuntimeCompiler:vo,isRuntimeOnly:mo,useTransitionState:ql,resolveTransitionHooks:Hl,setTransitionHooks:Kl,getTransitionRawChildren:Jl,initCustomFormatter:Lo,get devtools(){return sl},setDevtoolsHook:il,withCtx:hl,pushScopeId:fl,popScopeId:vl,withScopeId:ml,renderList:Tn,toHandlers:On,renderSlot:Un,createSlots:Pn,withMemo:Ro,isMemoSame:Do,openBlock:Us,createBlock:Rs,setBlockTracking:Ms,createTextVNode:Js,createCommentVNode:Zs,createStaticVNode:Ys,createElementVNode:Hs,createElementBlock:Ls,guardReactiveProps:Ws,toDisplayString:ae,camelize:Ue,capitalize:Me,toHandlerKey:je,normalizeProps:Y,normalizeClass:J,normalizeStyle:H,transformVNodeArgs:qs,version:Fo,ssrUtils:null,resolveFilter:null,compatUtils:null});function dr(e){throw e}function _r(e){}function pr(e,t,a,l){const n=new SyntaxError(String(e));return n.code=e,n.loc=t,n}const fr=Symbol(""),vr=Symbol(""),mr=Symbol(""),hr=Symbol(""),gr=Symbol(""),br=Symbol(""),yr=Symbol(""),wr=Symbol(""),xr=Symbol(""),kr=Symbol(""),$r=Symbol(""),Sr=Symbol(""),Cr=Symbol(""),Nr=Symbol(""),Ar=Symbol(""),Er=Symbol(""),Tr=Symbol(""),Pr=Symbol(""),Ur=Symbol(""),Ir=Symbol(""),Or=Symbol(""),Mr=Symbol(""),jr=Symbol(""),Lr=Symbol(""),Rr=Symbol(""),Dr=Symbol(""),Fr=Symbol(""),qr=Symbol(""),zr=Symbol(""),Br=Symbol(""),Vr=Symbol(""),Hr=Symbol(""),Gr=Symbol(""),Wr=Symbol(""),Kr=Symbol(""),Jr=Symbol(""),Yr=Symbol(""),Zr=Symbol(""),Xr=Symbol(""),Qr={[fr]:"Fragment",[vr]:"Teleport",[mr]:"Suspense",[hr]:"KeepAlive",[gr]:"BaseTransition",[br]:"openBlock",[yr]:"createBlock",[wr]:"createElementBlock",[xr]:"createVNode",[kr]:"createElementVNode",[$r]:"createCommentVNode",[Sr]:"createTextVNode",[Cr]:"createStaticVNode",[Nr]:"resolveComponent",[Ar]:"resolveDynamicComponent",[Er]:"resolveDirective",[Tr]:"resolveFilter",[Pr]:"withDirectives",[Ur]:"renderList",[Ir]:"renderSlot",[Or]:"createSlots",[Mr]:"toDisplayString",[jr]:"mergeProps",[Lr]:"normalizeClass",[Rr]:"normalizeStyle",[Dr]:"normalizeProps",[Fr]:"guardReactiveProps",[qr]:"toHandlers",[zr]:"camelize",[Br]:"capitalize",[Vr]:"toHandlerKey",[Hr]:"setBlockTracking",[Gr]:"pushScopeId",[Wr]:"popScopeId",[Kr]:"withCtx",[Jr]:"unref",[Yr]:"isRef",[Zr]:"withMemo",[Xr]:"isMemoSame"},ec={source:"",start:{line:1,column:1,offset:0},end:{line:1,column:1,offset:0}};function tc(e,t,a,l,n,s,o,i=!1,r=!1,c=!1,u=ec){return e&&(i?(e.helper(br),e.helper(Tc(e.inSSR,c))):e.helper(Ec(e.inSSR,c)),o&&e.helper(Pr)),{type:13,tag:t,props:a,children:l,patchFlag:n,dynamicProps:s,directives:o,isBlock:i,disableTracking:r,isComponent:c,loc:u}}function ac(e,t=ec){return{type:17,loc:t,elements:e}}function lc(e,t=ec){return{type:15,loc:t,properties:e}}function nc(e,t){return{type:16,loc:ec,key:ye(e)?sc(e,!0):e,value:t}}function sc(e,t=!1,a=ec,l=0){return{type:4,loc:a,content:e,isStatic:t,constType:t?3:l}}function oc(e,t=ec){return{type:8,loc:t,children:e}}function ic(e,t=[],a=ec){return{type:14,loc:a,callee:e,arguments:t}}function rc(e,t,a=!1,l=!1,n=ec){return{type:18,params:e,returns:t,newline:a,isSlot:l,loc:n}}function cc(e,t,a,l=!0){return{type:19,test:e,consequent:t,alternate:a,newline:l,loc:ec}}const uc=e=>4===e.type&&e.isStatic,dc=(e,t)=>e===t||e===Oe(t);function _c(e){return dc(e,"Teleport")?vr:dc(e,"Suspense")?mr:dc(e,"KeepAlive")?hr:dc(e,"BaseTransition")?gr:void 0}const pc=/^\d|[^\$\w]/,fc=e=>!pc.test(e),vc=/[A-Za-z_$\xA0-\uFFFF]/,mc=/[\.\?\w$\xA0-\uFFFF]/,hc=/\s+[.[]\s*|\s*[.[]\s+/g,gc=e=>{e=e.trim().replace(hc,(e=>e.trim()));let t=0,a=[],l=0,n=0,s=null;for(let o=0;o<e.length;o++){const i=e.charAt(o);switch(t){case 0:if("["===i)a.push(t),t=1,l++;else if("("===i)a.push(t),t=2,n++;else if(!(0===o?vc:mc).test(i))return!1;break;case 1:"'"===i||'"'===i||"`"===i?(a.push(t),t=3,s=i):"["===i?l++:"]"===i&&(--l||(t=a.pop()));break;case 2:if("'"===i||'"'===i||"`"===i)a.push(t),t=3,s=i;else if("("===i)n++;else if(")"===i){if(o===e.length-1)return!1;--n||(t=a.pop())}break;case 3:i===s&&(t=a.pop(),s=null)}}return!l&&!n};function bc(e,t,a){const l={source:e.source.slice(t,t+a),start:yc(e.start,e.source,t),end:e.end};return null!=a&&(l.end=yc(e.start,e.source,t+a)),l}function yc(e,t,a=t.length){return wc(de({},e),t,a)}function wc(e,t,a=t.length){let l=0,n=-1;for(let e=0;e<a;e++)10===t.charCodeAt(e)&&(l++,n=e);return e.offset+=a,e.line+=l,e.column=-1===n?e.column+a:a-n,e}function xc(e,t,a=!1){for(let l=0;l<e.props.length;l++){const n=e.props[l];if(7===n.type&&(a||n.exp)&&(ye(t)?n.name===t:t.test(n.name)))return n}}function kc(e,t,a=!1,l=!1){for(let n=0;n<e.props.length;n++){const s=e.props[n];if(6===s.type){if(a)continue;if(s.name===t&&(s.value||l))return s}else if("bind"===s.name&&(s.exp||l)&&$c(s.arg,t))return s}}function $c(e,t){return!(!e||!uc(e)||e.content!==t)}function Sc(e){return 5===e.type||2===e.type}function Cc(e){return 7===e.type&&"slot"===e.name}function Nc(e){return 1===e.type&&3===e.tagType}function Ac(e){return 1===e.type&&2===e.tagType}function Ec(e,t){return e||t?xr:kr}function Tc(e,t){return e||t?yr:wr}const Pc=new Set([Dr,Fr]);function Uc(e,t=[]){if(e&&!ye(e)&&14===e.type){const a=e.callee;if(!ye(a)&&Pc.has(a))return Uc(e.arguments[0],t.concat(e))}return[e,t]}function Ic(e,t,a){let l,n,s=13===e.type?e.props:e.arguments[2],o=[];if(s&&!ye(s)&&14===s.type){const e=Uc(s);s=e[0],o=e[1],n=o[o.length-1]}if(null==s||ye(s))l=lc([t]);else if(14===s.type){const e=s.arguments[0];ye(e)||15!==e.type?s.callee===qr?l=ic(a.helper(jr),[lc([t]),s]):s.arguments.unshift(lc([t])):e.properties.unshift(t),!l&&(l=s)}else if(15===s.type){let e=!1;if(4===t.key.type){const a=t.key.content;e=s.properties.some((e=>4===e.key.type&&e.key.content===a))}e||s.properties.unshift(t),l=s}else l=ic(a.helper(jr),[lc([t]),s]),n&&n.callee===Fr&&(n=o[o.length-2]);13===e.type?n?n.arguments[0]=l:e.props=l:n?n.arguments[0]=l:e.arguments[2]=l}function Oc(e,t){return`_${t}_${e.replace(/[^\w]/g,((t,a)=>"-"===t?"_":e.charCodeAt(a).toString()))}`}function Mc(e,{helper:t,removeHelper:a,inSSR:l}){e.isBlock||(e.isBlock=!0,a(Ec(l,e.isComponent)),t(br),t(Tc(l,e.isComponent)))}const jc=/&(gt|lt|amp|apos|quot);/g,Lc={gt:">",lt:"<",amp:"&",apos:"'",quot:'"'},Rc={delimiters:["{{","}}"],getNamespace:()=>0,getTextMode:()=>0,isVoidTag:ie,isPreTag:ie,isCustomElement:ie,decodeEntities:e=>e.replace(jc,((e,t)=>Lc[t])),onError:dr,onWarn:_r,comments:!1};function Dc(e,t,a){const l=eu(a),n=l?l.ns:0,s=[];for(;!su(e,t,a);){const o=e.source;let i;if(0===t||1===t)if(!e.inVPre&&tu(o,e.options.delimiters[0]))i=Jc(e,t);else if(0===t&&"<"===o[0])if(1===o.length);else if("!"===o[1])i=tu(o,"\x3c!--")?zc(e):tu(o,"<!DOCTYPE")?Bc(e):tu(o,"<![CDATA[")&&0!==n?qc(e,a):Bc(e);else if("/"===o[1])if(2===o.length);else{if(">"===o[2]){au(e,3);continue}if(/[a-z]/i.test(o[2])){Gc(e,1,l);continue}i=Bc(e)}else/[a-z]/i.test(o[1])?i=Vc(e,a):"?"===o[1]&&(i=Bc(e));if(i||(i=Yc(e,t)),ve(i))for(let e=0;e<i.length;e++)Fc(s,i[e]);else Fc(s,i)}let o=!1;if(2!==t&&1!==t){const t="preserve"!==e.options.whitespace;for(let a=0;a<s.length;a++){const l=s[a];if(e.inPre||2!==l.type)3!==l.type||e.options.comments||(o=!0,s[a]=null);else if(/[^\t\r\n\f ]/.test(l.content))t&&(l.content=l.content.replace(/[\t\r\n\f ]+/g," "));else{const e=s[a-1],n=s[a+1];!e||!n||t&&(3===e.type||3===n.type||1===e.type&&1===n.type&&/[\r\n]/.test(l.content))?(o=!0,s[a]=null):l.content=" "}}if(e.inPre&&l&&e.options.isPreTag(l.tag)){const e=s[0];e&&2===e.type&&(e.content=e.content.replace(/^\r?\n/,""))}}return o?s.filter(Boolean):s}function Fc(e,t){if(2===t.type){const a=eu(e);if(a&&2===a.type&&a.loc.end.offset===t.loc.start.offset)return a.content+=t.content,a.loc.end=t.loc.end,void(a.loc.source+=t.loc.source)}e.push(t)}function qc(e,t){au(e,9);const a=Dc(e,3,t);return 0===e.source.length||au(e,3),a}function zc(e){const t=Xc(e);let a;const l=/--(\!)?>/.exec(e.source);if(l){a=e.source.slice(4,l.index);const t=e.source.slice(0,l.index);let n=1,s=0;for(;-1!==(s=t.indexOf("\x3c!--",n));)au(e,s-n+1),n=s+1;au(e,l.index+l[0].length-n+1)}else a=e.source.slice(4),au(e,e.source.length);return{type:3,content:a,loc:Qc(e,t)}}function Bc(e){const t=Xc(e),a="?"===e.source[1]?1:2;let l;const n=e.source.indexOf(">");return-1===n?(l=e.source.slice(a),au(e,e.source.length)):(l=e.source.slice(a,n),au(e,n+1)),{type:3,content:l,loc:Qc(e,t)}}function Vc(e,t){const a=e.inPre,l=e.inVPre,n=eu(t),s=Gc(e,0,n),o=e.inPre&&!a,i=e.inVPre&&!l;if(s.isSelfClosing||e.options.isVoidTag(s.tag))return o&&(e.inPre=!1),i&&(e.inVPre=!1),s;t.push(s);const r=e.options.getTextMode(s,n),c=Dc(e,r,t);if(t.pop(),s.children=c,ou(e.source,s.tag))Gc(e,1,n);else if(0===e.source.length&&"script"===s.tag.toLowerCase()){const e=c[0];e&&tu(e.loc.source,"\x3c!--")}return s.loc=Qc(e,s.loc.start),o&&(e.inPre=!1),i&&(e.inVPre=!1),s}const Hc=q("if,else,else-if,for,slot");function Gc(e,t,a){const l=Xc(e),n=/^<\/?([a-z][^\t\r\n\f />]*)/i.exec(e.source),s=n[1],o=e.options.getNamespace(s,a);au(e,n[0].length),lu(e);const i=Xc(e),r=e.source;e.options.isPreTag(s)&&(e.inPre=!0);let c=Wc(e,t);0===t&&!e.inVPre&&c.some((e=>7===e.type&&"pre"===e.name))&&(e.inVPre=!0,de(e,i),e.source=r,c=Wc(e,t).filter((e=>"v-pre"!==e.name)));let u=!1;if(0===e.source.length||(u=tu(e.source,"/>"),au(e,u?2:1)),1===t)return;let d=0;return e.inVPre||("slot"===s?d=2:"template"===s?c.some((e=>7===e.type&&Hc(e.name)))&&(d=3):function(e,t,a){const l=a.options;if(l.isCustomElement(e))return!1;if("component"===e||/^[A-Z]/.test(e)||_c(e)||l.isBuiltInComponent&&l.isBuiltInComponent(e)||l.isNativeTag&&!l.isNativeTag(e))return!0;for(let e=0;e<t.length;e++){const a=t[e];if(6===a.type){if("is"===a.name&&a.value&&a.value.content.startsWith("vue:"))return!0}else{if("is"===a.name)return!0;"bind"===a.name&&$c(a.arg,"is")}}}(s,c,e)&&(d=1)),{type:1,ns:o,tag:s,tagType:d,props:c,isSelfClosing:u,children:[],loc:Qc(e,l),codegenNode:void 0}}function Wc(e,t){const a=[],l=new Set;for(;e.source.length>0&&!tu(e.source,">")&&!tu(e.source,"/>");){if(tu(e.source,"/")){au(e,1),lu(e);continue}const n=Kc(e,l);6===n.type&&n.value&&"class"===n.name&&(n.value.content=n.value.content.replace(/\s+/g," ").trim()),0===t&&a.push(n),/^[^\t\r\n\f />]/.test(e.source),lu(e)}return a}function Kc(e,t){const a=Xc(e),l=/^[^\t\r\n\f />][^\t\r\n\f />=]*/.exec(e.source)[0];t.has(l),t.add(l);{const e=/["'<]/g;for(;e.exec(l););}let n;au(e,l.length),/^[\t\r\n\f ]*=/.test(e.source)&&(lu(e),au(e,1),lu(e),n=function(e){const t=Xc(e);let a;const l=e.source[0],n='"'===l||"'"===l;if(n){au(e,1);const t=e.source.indexOf(l);-1===t?a=Zc(e,e.source.length,4):(a=Zc(e,t,4),au(e,1))}else{const t=/^[^\t\r\n\f >]+/.exec(e.source);if(!t)return;const l=/["'<=`]/g;for(;l.exec(t[0]););a=Zc(e,t[0].length,4)}return{content:a,isQuoted:n,loc:Qc(e,t)}}(e));const s=Qc(e,a);if(!e.inVPre&&/^(v-[A-Za-z0-9-]|:|\.|@|#)/.test(l)){const t=/(?:^v-([a-z0-9-]+))?(?:(?::|^\.|^@|^#)(\[[^\]]+\]|[^\.]+))?(.+)?$/i.exec(l);let o,i=tu(l,"."),r=t[1]||(i||tu(l,":")?"bind":tu(l,"@")?"on":"slot");if(t[2]){const n="slot"===r,s=l.lastIndexOf(t[2]),i=Qc(e,nu(e,a,s),nu(e,a,s+t[2].length+(n&&t[3]||"").length));let c=t[2],u=!0;c.startsWith("[")?(u=!1,c=c.endsWith("]")?c.slice(1,c.length-1):c.slice(1)):n&&(c+=t[3]||""),o={type:4,content:c,isStatic:u,constType:u?3:0,loc:i}}if(n&&n.isQuoted){const e=n.loc;e.start.offset++,e.start.column++,e.end=yc(e.start,n.content),e.source=e.source.slice(1,-1)}const c=t[3]?t[3].slice(1).split("."):[];return i&&c.push("prop"),{type:7,name:r,exp:n&&{type:4,content:n.content,isStatic:!1,constType:0,loc:n.loc},arg:o,modifiers:c,loc:s}}return!e.inVPre&&tu(l,"v-"),{type:6,name:l,value:n&&{type:2,content:n.content,loc:n.loc},loc:s}}function Jc(e,t){const[a,l]=e.options.delimiters,n=e.source.indexOf(l,a.length);if(-1===n)return;const s=Xc(e);au(e,a.length);const o=Xc(e),i=Xc(e),r=n-a.length,c=e.source.slice(0,r),u=Zc(e,r,t),d=u.trim(),_=u.indexOf(d);return _>0&&wc(o,c,_),wc(i,c,r-(u.length-d.length-_)),au(e,l.length),{type:5,content:{type:4,isStatic:!1,constType:0,content:d,loc:Qc(e,o,i)},loc:Qc(e,s)}}function Yc(e,t){const a=3===t?["]]>"]:["<",e.options.delimiters[0]];let l=e.source.length;for(let t=0;t<a.length;t++){const n=e.source.indexOf(a[t],1);-1!==n&&l>n&&(l=n)}const n=Xc(e);return{type:2,content:Zc(e,l,t),loc:Qc(e,n)}}function Zc(e,t,a){const l=e.source.slice(0,t);return au(e,t),2!==a&&3!==a&&l.includes("&")?e.options.decodeEntities(l,4===a):l}function Xc(e){const{column:t,line:a,offset:l}=e;return{column:t,line:a,offset:l}}function Qc(e,t,a){return{start:t,end:a=a||Xc(e),source:e.originalSource.slice(t.offset,a.offset)}}function eu(e){return e[e.length-1]}function tu(e,t){return e.startsWith(t)}function au(e,t){const{source:a}=e;wc(e,a,t),e.source=a.slice(t)}function lu(e){const t=/^[\t\r\n\f ]+/.exec(e.source);t&&au(e,t[0].length)}function nu(e,t,a){return yc(t,e.originalSource.slice(t.offset,a),a)}function su(e,t,a){const l=e.source;switch(t){case 0:if(tu(l,"</"))for(let e=a.length-1;e>=0;--e)if(ou(l,a[e].tag))return!0;break;case 1:case 2:{const e=eu(a);if(e&&ou(l,e.tag))return!0;break}case 3:if(tu(l,"]]>"))return!0}return!l}function ou(e,t){return tu(e,"</")&&e.slice(2,2+t.length).toLowerCase()===t.toLowerCase()&&/[\t\r\n\f />]/.test(e[2+t.length]||">")}function iu(e,t){cu(e,t,ru(e,e.children[0]))}function ru(e,t){const{children:a}=e;return 1===a.length&&1===t.type&&!Ac(t)}function cu(e,t,a=!1){const{children:l}=e,n=l.length;let s=0;for(let e=0;e<l.length;e++){const n=l[e];if(1===n.type&&0===n.tagType){const e=a?0:uu(n,t);if(e>0){if(e>=2){n.codegenNode.patchFlag="-1",n.codegenNode=t.hoist(n.codegenNode),s++;continue}}else{const e=n.codegenNode;if(13===e.type){const a=vu(e);if((!a||512===a||1===a)&&pu(n,t)>=2){const a=fu(n);a&&(e.props=t.hoist(a))}e.dynamicProps&&(e.dynamicProps=t.hoist(e.dynamicProps))}}}else 12===n.type&&uu(n.content,t)>=2&&(n.codegenNode=t.hoist(n.codegenNode),s++);if(1===n.type){const e=1===n.tagType;e&&t.scopes.vSlot++,cu(n,t),e&&t.scopes.vSlot--}else if(11===n.type)cu(n,t,1===n.children.length);else if(9===n.type)for(let e=0;e<n.branches.length;e++)cu(n.branches[e],t,1===n.branches[e].children.length)}s&&t.transformHoist&&t.transformHoist(l,t,e),s&&s===n&&1===e.type&&0===e.tagType&&e.codegenNode&&13===e.codegenNode.type&&ve(e.codegenNode.children)&&(e.codegenNode.children=t.hoist(ac(e.codegenNode.children)))}function uu(e,t){const{constantCache:a}=t;switch(e.type){case 1:if(0!==e.tagType)return 0;const l=a.get(e);if(void 0!==l)return l;const n=e.codegenNode;if(13!==n.type)return 0;if(n.isBlock&&"svg"!==e.tag&&"foreignObject"!==e.tag)return 0;if(vu(n))return a.set(e,0),0;{let l=3;const s=pu(e,t);if(0===s)return a.set(e,0),0;s<l&&(l=s);for(let n=0;n<e.children.length;n++){const s=uu(e.children[n],t);if(0===s)return a.set(e,0),0;s<l&&(l=s)}if(l>1)for(let n=0;n<e.props.length;n++){const s=e.props[n];if(7===s.type&&"bind"===s.name&&s.exp){const n=uu(s.exp,t);if(0===n)return a.set(e,0),0;n<l&&(l=n)}}if(n.isBlock){for(let t=0;t<e.props.length;t++)if(7===e.props[t].type)return a.set(e,0),0;t.removeHelper(br),t.removeHelper(Tc(t.inSSR,n.isComponent)),n.isBlock=!1,t.helper(Ec(t.inSSR,n.isComponent))}return a.set(e,l),l}case 2:case 3:return 3;case 9:case 11:case 10:default:return 0;case 5:case 12:return uu(e.content,t);case 4:return e.constType;case 8:let s=3;for(let a=0;a<e.children.length;a++){const l=e.children[a];if(ye(l)||we(l))continue;const n=uu(l,t);if(0===n)return 0;n<s&&(s=n)}return s}}const du=new Set([Lr,Rr,Dr,Fr]);function _u(e,t){if(14===e.type&&!ye(e.callee)&&du.has(e.callee)){const a=e.arguments[0];if(4===a.type)return uu(a,t);if(14===a.type)return _u(a,t)}return 0}function pu(e,t){let a=3;const l=fu(e);if(l&&15===l.type){const{properties:e}=l;for(let l=0;l<e.length;l++){const{key:n,value:s}=e[l],o=uu(n,t);if(0===o)return o;let i;if(o<a&&(a=o),i=4===s.type?uu(s,t):14===s.type?_u(s,t):0,0===i)return i;i<a&&(a=i)}}return a}function fu(e){const t=e.codegenNode;if(13===t.type)return t.props}function vu(e){const t=e.patchFlag;return t?parseInt(t,10):void 0}function mu(e,t){const a=function(e,{filename:t="",prefixIdentifiers:a=!1,hoistStatic:l=!1,cacheHandlers:n=!1,nodeTransforms:s=[],directiveTransforms:o={},transformHoist:i=null,isBuiltInComponent:r=oe,isCustomElement:c=oe,expressionPlugins:u=[],scopeId:d=null,slotted:_=!0,ssr:p=!1,inSSR:f=!1,ssrCssVars:v="",bindingMetadata:m=ne,inline:h=!1,isTS:g=!1,onError:b=dr,onWarn:y=_r,compatConfig:w}){const x=t.replace(/\?.*$/,"").match(/([^/\\]+)\.\w+$/),k={selfName:x&&Me(Ue(x[1])),prefixIdentifiers:a,hoistStatic:l,cacheHandlers:n,nodeTransforms:s,directiveTransforms:o,transformHoist:i,isBuiltInComponent:r,isCustomElement:c,expressionPlugins:u,scopeId:d,slotted:_,ssr:p,inSSR:f,ssrCssVars:v,bindingMetadata:m,inline:h,isTS:g,onError:b,onWarn:y,compatConfig:w,root:e,helpers:new Map,components:new Set,directives:new Set,hoists:[],imports:[],constantCache:new Map,temps:0,cached:0,identifiers:Object.create(null),scopes:{vFor:0,vSlot:0,vPre:0,vOnce:0},parent:null,currentNode:e,childIndex:0,inVOnce:!1,helper(e){const t=k.helpers.get(e)||0;return k.helpers.set(e,t+1),e},removeHelper(e){const t=k.helpers.get(e);if(t){const a=t-1;a?k.helpers.set(e,a):k.helpers.delete(e)}},helperString:e=>`_${Qr[k.helper(e)]}`,replaceNode(e){k.parent.children[k.childIndex]=k.currentNode=e},removeNode(e){const t=e?k.parent.children.indexOf(e):k.currentNode?k.childIndex:-1;e&&e!==k.currentNode?k.childIndex>t&&(k.childIndex--,k.onNodeRemoved()):(k.currentNode=null,k.onNodeRemoved()),k.parent.children.splice(t,1)},onNodeRemoved:()=>{},addIdentifiers(e){},removeIdentifiers(e){},hoist(e){ye(e)&&(e=sc(e)),k.hoists.push(e);const t=sc(`_hoisted_${k.hoists.length}`,!1,e.loc,2);return t.hoisted=e,t},cache:(e,t=!1)=>function(e,t,a=!1){return{type:20,index:e,value:t,isVNode:a,loc:ec}}(k.cached++,e,t)};return k}(e,t);hu(e,a),t.hoistStatic&&iu(e,a),t.ssr||function(e,t){const{helper:a}=t,{children:l}=e;if(1===l.length){const a=l[0];if(ru(e,a)&&a.codegenNode){const l=a.codegenNode;13===l.type&&Mc(l,t),e.codegenNode=l}else e.codegenNode=a}else if(l.length>1){let l=64;e.codegenNode=tc(t,a(fr),void 0,e.children,l+"",void 0,void 0,!0,void 0,!1)}}(e,a),e.helpers=[...a.helpers.keys()],e.components=[...a.components],e.directives=[...a.directives],e.imports=a.imports,e.hoists=a.hoists,e.temps=a.temps,e.cached=a.cached}function hu(e,t){t.currentNode=e;const{nodeTransforms:a}=t,l=[];for(let n=0;n<a.length;n++){const s=a[n](e,t);if(s&&(ve(s)?l.push(...s):l.push(s)),!t.currentNode)return;e=t.currentNode}switch(e.type){case 3:t.ssr||t.helper($r);break;case 5:t.ssr||t.helper(Mr);break;case 9:for(let a=0;a<e.branches.length;a++)hu(e.branches[a],t);break;case 10:case 11:case 1:case 0:!function(e,t){let a=0;const l=()=>{a--};for(;a<e.children.length;a++){const n=e.children[a];ye(n)||(t.parent=e,t.childIndex=a,t.onNodeRemoved=l,hu(n,t))}}(e,t)}t.currentNode=e;let n=l.length;for(;n--;)l[n]()}function gu(e,t){const a=ye(e)?t=>t===e:t=>e.test(t);return(e,l)=>{if(1===e.type){const{props:n}=e;if(3===e.tagType&&n.some(Cc))return;const s=[];for(let o=0;o<n.length;o++){const i=n[o];if(7===i.type&&a(i.name)){n.splice(o,1),o--;const a=t(e,i,l);a&&s.push(a)}}return s}}}const bu=e=>`${Qr[e]}: _${Qr[e]}`;function yu(e,t,{helper:a,push:l,newline:n,isTS:s}){const o=a("component"===t?Nr:Er);for(let a=0;a<e.length;a++){let i=e[a];const r=i.endsWith("__self");r&&(i=i.slice(0,-6)),l(`const ${Oc(i,t)} = ${o}(${JSON.stringify(i)}${r?", true":""})${s?"!":""}`),a<e.length-1&&n()}}function wu(e,t){const a=e.length>3||!1;t.push("["),a&&t.indent(),xu(e,t,a),a&&t.deindent(),t.push("]")}function xu(e,t,a=!1,l=!0){const{push:n,newline:s}=t;for(let o=0;o<e.length;o++){const i=e[o];ye(i)?n(i):ve(i)?wu(i,t):ku(i,t),o<e.length-1&&(a?(l&&n(","),s()):l&&n(", "))}}function ku(e,t){if(ye(e))t.push(e);else if(we(e))t.push(t.helper(e));else switch(e.type){case 1:case 9:case 11:case 12:ku(e.codegenNode,t);break;case 2:!function(e,t){t.push(JSON.stringify(e.content),e)}(e,t);break;case 4:$u(e,t);break;case 5:!function(e,t){const{push:a,helper:l,pure:n}=t;n&&a("/*#__PURE__*/"),a(`${l(Mr)}(`),ku(e.content,t),a(")")}(e,t);break;case 8:Su(e,t);break;case 3:!function(e,t){const{push:a,helper:l,pure:n}=t;n&&a("/*#__PURE__*/"),a(`${l($r)}(${JSON.stringify(e.content)})`,e)}(e,t);break;case 13:!function(e,t){const{push:a,helper:l,pure:n}=t,{tag:s,props:o,children:i,patchFlag:r,dynamicProps:c,directives:u,isBlock:d,disableTracking:_,isComponent:p}=e;u&&a(l(Pr)+"("),d&&a(`(${l(br)}(${_?"true":""}), `),n&&a("/*#__PURE__*/");a(l(d?Tc(t.inSSR,p):Ec(t.inSSR,p))+"(",e),xu(function(e){let t=e.length;for(;t--&&null==e[t];);return e.slice(0,t+1).map((e=>e||"null"))}([s,o,i,r,c]),t),a(")"),d&&a(")"),u&&(a(", "),ku(u,t),a(")"))}(e,t);break;case 14:!function(e,t){const{push:a,helper:l,pure:n}=t,s=ye(e.callee)?e.callee:l(e.callee);n&&a("/*#__PURE__*/"),a(s+"(",e),xu(e.arguments,t),a(")")}(e,t);break;case 15:!function(e,t){const{push:a,indent:l,deindent:n,newline:s}=t,{properties:o}=e;if(!o.length)return void a("{}",e);const i=o.length>1||!1;a(i?"{":"{ "),i&&l();for(let e=0;e<o.length;e++){const{key:l,value:n}=o[e];Cu(l,t),a(": "),ku(n,t),e<o.length-1&&(a(","),s())}i&&n(),a(i?"}":" }")}(e,t);break;case 17:!function(e,t){wu(e.elements,t)}(e,t);break;case 18:!function(e,t){const{push:a,indent:l,deindent:n}=t,{params:s,returns:o,body:i,newline:r,isSlot:c}=e;c&&a(`_${Qr[Kr]}(`),a("(",e),ve(s)?xu(s,t):s&&ku(s,t),a(") => "),(r||i)&&(a("{"),l()),o?(r&&a("return "),ve(o)?wu(o,t):ku(o,t)):i&&ku(i,t),(r||i)&&(n(),a("}")),c&&a(")")}(e,t);break;case 19:!function(e,t){const{test:a,consequent:l,alternate:n,newline:s}=e,{push:o,indent:i,deindent:r,newline:c}=t;if(4===a.type){const e=!fc(a.content);e&&o("("),$u(a,t),e&&o(")")}else o("("),ku(a,t),o(")");s&&i(),t.indentLevel++,s||o(" "),o("? "),ku(l,t),t.indentLevel--,s&&c(),s||o(" "),o(": ");const u=19===n.type;u||t.indentLevel++,ku(n,t),u||t.indentLevel--,s&&r(!0)}(e,t);break;case 20:!function(e,t){const{push:a,helper:l,indent:n,deindent:s,newline:o}=t;a(`_cache[${e.index}] || (`),e.isVNode&&(n(),a(`${l(Hr)}(-1),`),o()),a(`_cache[${e.index}] = `),ku(e.value,t),e.isVNode&&(a(","),o(),a(`${l(Hr)}(1),`),o(),a(`_cache[${e.index}]`),s()),a(")")}(e,t);break;case 21:xu(e.body,t,!0,!1)}}function $u(e,t){const{content:a,isStatic:l}=e;t.push(l?JSON.stringify(a):a,e)}function Su(e,t){for(let a=0;a<e.children.length;a++){const l=e.children[a];ye(l)?t.push(l):ku(l,t)}}function Cu(e,t){const{push:a}=t;8===e.type?(a("["),Su(e,t),a("]")):e.isStatic?a(fc(e.content)?e.content:JSON.stringify(e.content),e):a(`[${e.content}]`,e)}const Nu=gu(/^(if|else|else-if)$/,((e,t,a)=>function(e,t,a,l){if("else"===t.name||t.exp&&t.exp.content.trim()||(t.exp=sc("true",!1,t.exp?t.exp.loc:e.loc)),"if"===t.name){const n=Au(e,t),s={type:9,loc:e.loc,branches:[n]};if(a.replaceNode(s),l)return l(s,n,!0)}else{const n=a.parent.children;let s=n.indexOf(e);for(;s-- >=-1;){const o=n[s];if(!o||2!==o.type||o.content.trim().length){if(o&&9===o.type){a.removeNode();const n=Au(e,t);o.branches.push(n);const s=l&&l(o,n,!1);hu(n,a),s&&s(),a.currentNode=null}break}a.removeNode(o)}}}(e,t,a,((e,t,l)=>{const n=a.parent.children;let s=n.indexOf(e),o=0;for(;s-- >=0;){const e=n[s];e&&9===e.type&&(o+=e.branches.length)}return()=>{if(l)e.codegenNode=Eu(t,o,a);else{const l=function(e){for(;;)if(19===e.type){if(19!==e.alternate.type)return e;e=e.alternate}else 20===e.type&&(e=e.value)}(e.codegenNode);l.alternate=Eu(t,o+e.branches.length-1,a)}}}))));function Au(e,t){const a=3===e.tagType;return{type:10,loc:e.loc,condition:"else"===t.name?void 0:t.exp,children:a&&!xc(e,"for")?e.children:[e],userKey:kc(e,"key"),isTemplateIf:a}}function Eu(e,t,a){return e.condition?cc(e.condition,Tu(e,t,a),ic(a.helper($r),['""',"true"])):Tu(e,t,a)}function Tu(e,t,a){const{helper:l}=a,n=nc("key",sc(`${t}`,!1,ec,2)),{children:s}=e,o=s[0];if(1!==s.length||1!==o.type){if(1===s.length&&11===o.type){const e=o.codegenNode;return Ic(e,n,a),e}{let t=64;return tc(a,l(fr),lc([n]),s,t+"",void 0,void 0,!0,!1,!1,e.loc)}}{const e=o.codegenNode,t=14===(i=e).type&&i.callee===Zr?i.arguments[1].returns:i;return 13===t.type&&Mc(t,a),Ic(t,n,a),e}var i}const Pu=gu("for",((e,t,a)=>{const{helper:l,removeHelper:n}=a;return function(e,t,a,l){if(!t.exp)return;const n=Mu(t.exp);if(!n)return;const{scopes:s}=a,{source:o,value:i,key:r,index:c}=n,u={type:11,loc:t.loc,source:o,valueAlias:i,keyAlias:r,objectIndexAlias:c,parseResult:n,children:Nc(e)?e.children:[e]};a.replaceNode(u),s.vFor++;const d=l&&l(u);return()=>{s.vFor--,d&&d()}}(e,t,a,(t=>{const s=ic(l(Ur),[t.source]),o=Nc(e),i=xc(e,"memo"),r=kc(e,"key"),c=r&&(6===r.type?sc(r.value.content,!0):r.exp),u=r?nc("key",c):null,d=4===t.source.type&&t.source.constType>0,_=d?64:r?128:256;return t.codegenNode=tc(a,l(fr),void 0,s,_+"",void 0,void 0,!0,!d,!1,e.loc),()=>{let r;const{children:_}=t,p=1!==_.length||1!==_[0].type,f=Ac(e)?e:o&&1===e.children.length&&Ac(e.children[0])?e.children[0]:null;if(f?(r=f.codegenNode,o&&u&&Ic(r,u,a)):p?r=tc(a,l(fr),u?lc([u]):void 0,e.children,"64",void 0,void 0,!0,void 0,!1):(r=_[0].codegenNode,o&&u&&Ic(r,u,a),r.isBlock!==!d&&(r.isBlock?(n(br),n(Tc(a.inSSR,r.isComponent))):n(Ec(a.inSSR,r.isComponent))),r.isBlock=!d,r.isBlock?(l(br),l(Tc(a.inSSR,r.isComponent))):l(Ec(a.inSSR,r.isComponent))),i){const e=rc(Lu(t.parseResult,[sc("_cached")]));e.body={type:21,body:[oc(["const _memo = (",i.exp,")"]),oc(["if (_cached",...c?[" && _cached.key === ",c]:[],` && ${a.helperString(Xr)}(_cached, _memo)) return _cached`]),oc(["const _item = ",r]),sc("_item.memo = _memo"),sc("return _item")],loc:ec},s.arguments.push(e,sc("_cache"),sc(String(a.cached++)))}else s.arguments.push(rc(Lu(t.parseResult),r,!0))}}))})),Uu=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,Iu=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,Ou=/^\(|\)$/g;function Mu(e,t){const a=e.loc,l=e.content,n=l.match(Uu);if(!n)return;const[,s,o]=n,i={source:ju(a,o.trim(),l.indexOf(o,s.length)),value:void 0,key:void 0,index:void 0};let r=s.trim().replace(Ou,"").trim();const c=s.indexOf(r),u=r.match(Iu);if(u){r=r.replace(Iu,"").trim();const e=u[1].trim();let t;if(e&&(t=l.indexOf(e,c+r.length),i.key=ju(a,e,t)),u[2]){const n=u[2].trim();n&&(i.index=ju(a,n,l.indexOf(n,i.key?t+e.length:c+r.length)))}}return r&&(i.value=ju(a,r,c)),i}function ju(e,t,a){return sc(t,!1,bc(e,a,t.length))}function Lu({value:e,key:t,index:a},l=[]){return function(e){let t=e.length;for(;t--&&!e[t];);return e.slice(0,t+1).map(((e,t)=>e||sc("_".repeat(t+1),!1)))}([e,t,a,...l])}const Ru=sc("undefined",!1),Du=(e,t)=>{if(1===e.type&&(1===e.tagType||3===e.tagType)){if(xc(e,"slot"))return t.scopes.vSlot++,()=>{t.scopes.vSlot--}}},Fu=(e,t,a)=>rc(e,t,!1,!0,t.length?t[0].loc:a);function qu(e,t,a=Fu){t.helper(Kr);const{children:l,loc:n}=e,s=[],o=[];let i=t.scopes.vSlot>0||t.scopes.vFor>0;const r=xc(e,"slot",!0);if(r){const{arg:e,exp:t}=r;e&&!uc(e)&&(i=!0),s.push(nc(e||sc("default",!0),a(t,l,n)))}let c=!1,u=!1;const d=[],_=new Set;for(let e=0;e<l.length;e++){const n=l[e];let p;if(!Nc(n)||!(p=xc(n,"slot",!0))){3!==n.type&&d.push(n);continue}if(r)break;c=!0;const{children:f,loc:v}=n,{arg:m=sc("default",!0),exp:h}=p;let g;uc(m)?g=m?m.content:"default":i=!0;const b=a(h,f,v);let y,w,x;if(y=xc(n,"if"))i=!0,o.push(cc(y.exp,zu(m,b),Ru));else if(w=xc(n,/^else(-if)?$/,!0)){let t,a=e;for(;a--&&(t=l[a],3===t.type););if(t&&Nc(t)&&xc(t,"if")){l.splice(e,1),e--;let t=o[o.length-1];for(;19===t.alternate.type;)t=t.alternate;t.alternate=w.exp?cc(w.exp,zu(m,b),Ru):zu(m,b)}}else if(x=xc(n,"for")){i=!0;const e=x.parseResult||Mu(x.exp);e&&o.push(ic(t.helper(Ur),[e.source,rc(Lu(e),zu(m,b),!0)]))}else{if(g){if(_.has(g))continue;_.add(g),"default"===g&&(u=!0)}s.push(nc(m,b))}}if(!r){const e=(e,t)=>nc("default",a(e,t,n));c?d.length&&d.some((e=>Vu(e)))&&(u||s.push(e(void 0,d))):s.push(e(void 0,l))}const p=i?2:Bu(e.children)?3:1;let f=lc(s.concat(nc("_",sc(p+"",!1))),n);return o.length&&(f=ic(t.helper(Or),[f,ac(o)])),{slots:f,hasDynamicSlots:i}}function zu(e,t){return lc([nc("name",e),nc("fn",t)])}function Bu(e){for(let t=0;t<e.length;t++){const a=e[t];switch(a.type){case 1:if(2===a.tagType||Bu(a.children))return!0;break;case 9:if(Bu(a.branches))return!0;break;case 10:case 11:if(Bu(a.children))return!0}}return!1}function Vu(e){return 2!==e.type&&12!==e.type||(2===e.type?!!e.content.trim():Vu(e.content))}const Hu=new WeakMap,Gu=(e,t)=>function(){if(1!==(e=t.currentNode).type||0!==e.tagType&&1!==e.tagType)return;const{tag:a,props:l}=e,n=1===e.tagType;let s=n?function(e,t,a=!1){let{tag:l}=e;const n=Yu(l),s=kc(e,"is");if(s)if(n){const e=6===s.type?s.value&&sc(s.value.content,!0):s.exp;if(e)return ic(t.helper(Ar),[e])}else 6===s.type&&s.value.content.startsWith("vue:")&&(l=s.value.content.slice(4));const o=!n&&xc(e,"is");if(o&&o.exp)return ic(t.helper(Ar),[o.exp]);const i=_c(l)||t.isBuiltInComponent(l);return i?(a||t.helper(i),i):(t.helper(Nr),t.components.add(l),Oc(l,"component"))}(e,t):`"${a}"`;const o=xe(s)&&s.callee===Ar;let i,r,c,u,d,_,p=0,f=o||s===vr||s===mr||!n&&("svg"===a||"foreignObject"===a);if(l.length>0){const a=Wu(e,t,void 0,n,o);i=a.props,p=a.patchFlag,d=a.dynamicPropNames;const l=a.directives;_=l&&l.length?ac(l.map((e=>function(e,t){const a=[],l=Hu.get(e);l?a.push(t.helperString(l)):(t.helper(Er),t.directives.add(e.name),a.push(Oc(e.name,"directive")));const{loc:n}=e;if(e.exp&&a.push(e.exp),e.arg&&(e.exp||a.push("void 0"),a.push(e.arg)),Object.keys(e.modifiers).length){e.arg||(e.exp||a.push("void 0"),a.push("void 0"));const t=sc("true",!1,n);a.push(lc(e.modifiers.map((e=>nc(e,t))),n))}return ac(a,e.loc)}(e,t)))):void 0,a.shouldUseBlock&&(f=!0)}if(e.children.length>0)if(s===hr&&(f=!0,p|=1024),n&&s!==vr&&s!==hr){const{slots:a,hasDynamicSlots:l}=qu(e,t);r=a,l&&(p|=1024)}else if(1===e.children.length&&s!==vr){const a=e.children[0],l=a.type,n=5===l||8===l;n&&0===uu(a,t)&&(p|=1),r=n||2===l?a:e.children}else r=e.children;0!==p&&(c=String(p),d&&d.length&&(u=function(e){let t="[";for(let a=0,l=e.length;a<l;a++)t+=JSON.stringify(e[a]),a<l-1&&(t+=", ");return t+"]"}(d))),e.codegenNode=tc(t,s,i,r,c,u,_,!!f,!1,n,e.loc)};function Wu(e,t,a=e.props,l,n,s=!1){const{tag:o,loc:i,children:r}=e;let c=[];const u=[],d=[],_=r.length>0;let p=!1,f=0,v=!1,m=!1,h=!1,g=!1,b=!1,y=!1;const w=[],x=({key:e,value:a})=>{if(uc(e)){const s=e.content,o=ce(s);if(!o||l&&!n||"onclick"===s.toLowerCase()||"onUpdate:modelValue"===s||Ae(s)||(g=!0),o&&Ae(s)&&(y=!0),20===a.type||(4===a.type||8===a.type)&&uu(a,t)>0)return;"ref"===s?v=!0:"class"===s?m=!0:"style"===s?h=!0:"key"===s||w.includes(s)||w.push(s),!l||"class"!==s&&"style"!==s||w.includes(s)||w.push(s)}else b=!0};for(let l=0;l<a.length;l++){const n=a[l];if(6===n.type){const{loc:e,name:a,value:l}=n;let s=!0;if("ref"===a&&(v=!0,t.scopes.vFor>0&&c.push(nc(sc("ref_for",!0),sc("true")))),"is"===a&&(Yu(o)||l&&l.content.startsWith("vue:")))continue;c.push(nc(sc(a,!0,bc(e,0,a.length)),sc(l?l.content:"",s,l?l.loc:e)))}else{const{name:a,arg:l,exp:r,loc:f}=n,v="bind"===a,m="on"===a;if("slot"===a)continue;if("once"===a||"memo"===a)continue;if("is"===a||v&&$c(l,"is")&&Yu(o))continue;if(m&&s)continue;if((v&&$c(l,"key")||m&&_&&$c(l,"vue:before-update"))&&(p=!0),v&&$c(l,"ref")&&t.scopes.vFor>0&&c.push(nc(sc("ref_for",!0),sc("true"))),!l&&(v||m)){b=!0,r&&(c.length&&(u.push(lc(Ku(c),i)),c=[]),u.push(v?r:{type:14,loc:f,callee:t.helper(qr),arguments:[r]}));continue}const h=t.directiveTransforms[a];if(h){const{props:a,needRuntime:l}=h(n,e,t);!s&&a.forEach(x),c.push(...a),l&&(d.push(n),we(l)&&Hu.set(n,l))}else Ee(a)||(d.push(n),_&&(p=!0))}}let k;if(u.length?(c.length&&u.push(lc(Ku(c),i)),k=u.length>1?ic(t.helper(jr),u,i):u[0]):c.length&&(k=lc(Ku(c),i)),b?f|=16:(m&&!l&&(f|=2),h&&!l&&(f|=4),w.length&&(f|=8),g&&(f|=32)),p||0!==f&&32!==f||!(v||y||d.length>0)||(f|=512),!t.inSSR&&k)switch(k.type){case 15:let e=-1,a=-1,l=!1;for(let t=0;t<k.properties.length;t++){const n=k.properties[t].key;uc(n)?"class"===n.content?e=t:"style"===n.content&&(a=t):n.isHandlerKey||(l=!0)}const n=k.properties[e],s=k.properties[a];l?k=ic(t.helper(Dr),[k]):(n&&!uc(n.value)&&(n.value=ic(t.helper(Lr),[n.value])),s&&(h||4===s.value.type&&"["===s.value.content.trim()[0]||17===s.value.type)&&(s.value=ic(t.helper(Rr),[s.value])));break;case 14:break;default:k=ic(t.helper(Dr),[ic(t.helper(Fr),[k])])}return{props:k,directives:d,patchFlag:f,dynamicPropNames:w,shouldUseBlock:p}}function Ku(e){const t=new Map,a=[];for(let l=0;l<e.length;l++){const n=e[l];if(8===n.key.type||!n.key.isStatic){a.push(n);continue}const s=n.key.content,o=t.get(s);o?("style"===s||"class"===s||ce(s))&&Ju(o,n):(t.set(s,n),a.push(n))}return a}function Ju(e,t){17===e.value.type?e.value.elements.push(t.value):e.value=ac([e.value,t.value],e.loc)}function Yu(e){return"component"===e||"Component"===e}const Zu=(e,t)=>{if(Ac(e)){const{children:a,loc:l}=e,{slotName:n,slotProps:s}=function(e,t){let a,l='"default"';const n=[];for(let t=0;t<e.props.length;t++){const a=e.props[t];6===a.type?a.value&&("name"===a.name?l=JSON.stringify(a.value.content):(a.name=Ue(a.name),n.push(a))):"bind"===a.name&&$c(a.arg,"name")?a.exp&&(l=a.exp):("bind"===a.name&&a.arg&&uc(a.arg)&&(a.arg.content=Ue(a.arg.content)),n.push(a))}if(n.length>0){const{props:l,directives:s}=Wu(e,t,n,!1,!1);a=l}return{slotName:l,slotProps:a}}(e,t),o=[t.prefixIdentifiers?"_ctx.$slots":"$slots",n,"{}","undefined","true"];let i=2;s&&(o[2]=s,i=3),a.length&&(o[3]=rc([],a,!1,!1,l),i=4),t.scopeId&&!t.slotted&&(i=5),o.splice(i),e.codegenNode=ic(t.helper(Ir),o,l)}},Xu=/^\s*([\w$_]+|(async\s*)?\([^)]*?\))\s*=>|^\s*(async\s+)?function(?:\s+[\w$]+)?\s*\(/,Qu=(e,t,a,l)=>{const{loc:n,modifiers:s,arg:o}=e;let i;if(4===o.type)if(o.isStatic){let e=o.content;e.startsWith("vue:")&&(e=`vnode-${e.slice(4)}`),i=sc(je(Ue(e)),!0,o.loc)}else i=oc([`${a.helperString(Vr)}(`,o,")"]);else i=o,i.children.unshift(`${a.helperString(Vr)}(`),i.children.push(")");let r=e.exp;r&&!r.content.trim()&&(r=void 0);let c=a.cacheHandlers&&!r&&!a.inVOnce;if(r){const e=gc(r.content),t=!(e||Xu.test(r.content)),a=r.content.includes(";");(t||c&&e)&&(r=oc([`${t?"$event":"(...args)"} => ${a?"{":"("}`,r,a?"}":")"]))}let u={props:[nc(i,r||sc("() => {}",!1,n))]};return l&&(u=l(u)),c&&(u.props[0].value=a.cache(u.props[0].value)),u.props.forEach((e=>e.key.isHandlerKey=!0)),u},ed=(e,t,a)=>{const{exp:l,modifiers:n,loc:s}=e,o=e.arg;return 4!==o.type?(o.children.unshift("("),o.children.push(') || ""')):o.isStatic||(o.content=`${o.content} || ""`),n.includes("camel")&&(4===o.type?o.content=o.isStatic?Ue(o.content):`${a.helperString(zr)}(${o.content})`:(o.children.unshift(`${a.helperString(zr)}(`),o.children.push(")"))),a.inSSR||(n.includes("prop")&&td(o,"."),n.includes("attr")&&td(o,"^")),!l||4===l.type&&!l.content.trim()?{props:[nc(o,sc("",!0,s))]}:{props:[nc(o,l)]}},td=(e,t)=>{4===e.type?e.content=e.isStatic?t+e.content:`\`${t}\${${e.content}}\``:(e.children.unshift(`'${t}' + (`),e.children.push(")"))},ad=(e,t)=>{if(0===e.type||1===e.type||11===e.type||10===e.type)return()=>{const a=e.children;let l,n=!1;for(let e=0;e<a.length;e++){const t=a[e];if(Sc(t)){n=!0;for(let n=e+1;n<a.length;n++){const s=a[n];if(!Sc(s)){l=void 0;break}l||(l=a[e]=oc([t],t.loc)),l.children.push(" + ",s),a.splice(n,1),n--}}}if(n&&(1!==a.length||0!==e.type&&(1!==e.type||0!==e.tagType||e.props.find((e=>7===e.type&&!t.directiveTransforms[e.name])))))for(let e=0;e<a.length;e++){const l=a[e];if(Sc(l)||8===l.type){const n=[];2===l.type&&" "===l.content||n.push(l),t.ssr||0!==uu(l,t)||n.push("1"),a[e]={type:12,content:l,loc:l.loc,codegenNode:ic(t.helper(Sr),n)}}}}},ld=new WeakSet,nd=(e,t)=>{if(1===e.type&&xc(e,"once",!0)){if(ld.has(e)||t.inVOnce)return;return ld.add(e),t.inVOnce=!0,t.helper(Hr),()=>{t.inVOnce=!1;const e=t.currentNode;e.codegenNode&&(e.codegenNode=t.cache(e.codegenNode,!0))}}},sd=(e,t,a)=>{const{exp:l,arg:n}=e;if(!l)return od();const s=l.loc.source,o=4===l.type?l.content:s;if(!o.trim()||!gc(o))return od();const i=n||sc("modelValue",!0),r=n?uc(n)?`onUpdate:${n.content}`:oc(['"onUpdate:" + ',n]):"onUpdate:modelValue";let c;c=oc([(a.isTS?"($event: any)":"$event")+" => ((",l,") = $event)"]);const u=[nc(i,e.exp),nc(r,c)];if(e.modifiers.length&&1===t.tagType){const t=e.modifiers.map((e=>(fc(e)?e:JSON.stringify(e))+": true")).join(", "),a=n?uc(n)?`${n.content}Modifiers`:oc([n,' + "Modifiers"']):"modelModifiers";u.push(nc(a,sc(`{ ${t} }`,!1,e.loc,2)))}return od(u)};function od(e=[]){return{props:e}}const id=new WeakSet,rd=(e,t)=>{if(1===e.type){const a=xc(e,"memo");if(!a||id.has(e))return;return id.add(e),()=>{const l=e.codegenNode||t.currentNode.codegenNode;l&&13===l.type&&(1!==e.tagType&&Mc(l,t),e.codegenNode=ic(t.helper(Zr),[a.exp,rc(void 0,l),"_cache",String(t.cached++)]))}}};function cd(e,t={}){const a=t.onError||dr,l="module"===t.mode;!0===t.prefixIdentifiers?a(pr(46)):l&&a(pr(47)),t.cacheHandlers&&a(pr(48)),t.scopeId&&!l&&a(pr(49));const n=ye(e)?function(e,t={}){const a=function(e,t){const a=de({},Rc);let l;for(l in t)a[l]=void 0===t[l]?Rc[l]:t[l];return{options:a,column:1,line:1,offset:0,originalSource:e,source:e,inPre:!1,inVPre:!1,onWarn:a.onWarn}}(e,t),l=Xc(a);return function(e,t=ec){return{type:0,children:e,helpers:[],components:[],directives:[],hoists:[],imports:[],cached:0,temps:0,codegenNode:void 0,loc:t}}(Dc(a,0,[]),Qc(a,l))}(e,t):e,[s,o]=[[nd,Nu,rd,Pu,Zu,Gu,Du,ad],{on:Qu,bind:ed,model:sd}];return mu(n,de({},t,{prefixIdentifiers:!1,nodeTransforms:[...s,...t.nodeTransforms||[]],directiveTransforms:de({},o,t.directiveTransforms||{})})),function(e,t={}){const a=function(e,{mode:t="function",prefixIdentifiers:a="module"===t,sourceMap:l=!1,filename:n="template.vue.html",scopeId:s=null,optimizeImports:o=!1,runtimeGlobalName:i="Vue",runtimeModuleName:r="vue",ssrRuntimeModuleName:c="vue/server-renderer",ssr:u=!1,isTS:d=!1,inSSR:_=!1}){const p={mode:t,prefixIdentifiers:a,sourceMap:l,filename:n,scopeId:s,optimizeImports:o,runtimeGlobalName:i,runtimeModuleName:r,ssrRuntimeModuleName:c,ssr:u,isTS:d,inSSR:_,source:e.loc.source,code:"",column:1,line:1,offset:0,indentLevel:0,pure:!1,map:void 0,helper:e=>`_${Qr[e]}`,push(e,t){p.code+=e},indent(){f(++p.indentLevel)},deindent(e=!1){e?--p.indentLevel:f(--p.indentLevel)},newline(){f(p.indentLevel)}};function f(e){p.push("\n"+"  ".repeat(e))}return p}(e,t);t.onContextCreated&&t.onContextCreated(a);const{mode:l,push:n,prefixIdentifiers:s,indent:o,deindent:i,newline:r,ssr:c}=a,u=e.helpers.length>0,d=!s&&"module"!==l;if(function(e,t){const{push:a,newline:l,runtimeGlobalName:n}=t,s=n;e.helpers.length>0&&(a(`const _Vue = ${s}\n`),e.hoists.length)&&a(`const { ${[xr,kr,$r,Sr,Cr].filter((t=>e.helpers.includes(t))).map(bu).join(", ")} } = _Vue\n`),function(e,t){if(!e.length)return;t.pure=!0;const{push:a,newline:l}=t;l();for(let n=0;n<e.length;n++){const s=e[n];s&&(a(`const _hoisted_${n+1} = `),ku(s,t),l())}t.pure=!1}(e.hoists,t),l(),a("return ")}(e,a),n(`function ${c?"ssrRender":"render"}(${(c?["_ctx","_push","_parent","_attrs"]:["_ctx","_cache"]).join(", ")}) {`),o(),d&&(n("with (_ctx) {"),o(),u&&(n(`const { ${e.helpers.map(bu).join(", ")} } = _Vue`),n("\n"),r())),e.components.length&&(yu(e.components,"component",a),(e.directives.length||e.temps>0)&&r()),e.directives.length&&(yu(e.directives,"directive",a),e.temps>0&&r()),e.temps>0){n("let ");for(let t=0;t<e.temps;t++)n(`${t>0?", ":""}_temp${t}`)}return(e.components.length||e.directives.length||e.temps)&&(n("\n"),r()),c||n("return "),e.codegenNode?ku(e.codegenNode,a):n("null"),d&&(i(),n("}")),i(),n("}"),{ast:e,code:a.code,preamble:"",map:a.map?a.map.toJSON():void 0}}(n,de({},t,{prefixIdentifiers:!1}))}const ud=Symbol(""),dd=Symbol(""),_d=Symbol(""),pd=Symbol(""),fd=Symbol(""),vd=Symbol(""),md=Symbol(""),hd=Symbol(""),gd=Symbol(""),bd=Symbol("");var yd;let wd;yd={[ud]:"vModelRadio",[dd]:"vModelCheckbox",[_d]:"vModelText",[pd]:"vModelSelect",[fd]:"vModelDynamic",[vd]:"withModifiers",[md]:"withKeys",[hd]:"vShow",[gd]:"Transition",[bd]:"TransitionGroup"},Object.getOwnPropertySymbols(yd).forEach((e=>{Qr[e]=yd[e]}));const xd=q("style,iframe,script,noscript",!0),kd={isVoidTag:Q,isNativeTag:e=>Z(e)||X(e),isPreTag:e=>"pre"===e,decodeEntities:function(e,t=!1){return wd||(wd=document.createElement("div")),t?(wd.innerHTML=`<div foo="${e.replace(/"/g,"&quot;")}">`,wd.children[0].getAttribute("foo")):(wd.innerHTML=e,wd.textContent)},isBuiltInComponent:e=>dc(e,"Transition")?gd:dc(e,"TransitionGroup")?bd:void 0,getNamespace(e,t){let a=t?t.ns:0;if(t&&2===a)if("annotation-xml"===t.tag){if("svg"===e)return 1;t.props.some((e=>6===e.type&&"encoding"===e.name&&null!=e.value&&("text/html"===e.value.content||"application/xhtml+xml"===e.value.content)))&&(a=0)}else/^m(?:[ions]|text)$/.test(t.tag)&&"mglyph"!==e&&"malignmark"!==e&&(a=0);else t&&1===a&&("foreignObject"!==t.tag&&"desc"!==t.tag&&"title"!==t.tag||(a=0));if(0===a){if("svg"===e)return 1;if("math"===e)return 2}return a},getTextMode({tag:e,ns:t}){if(0===t){if("textarea"===e||"title"===e)return 1;if(xd(e))return 2}return 0}},$d=(e,t)=>{const a=K(e);return sc(JSON.stringify(a),!1,t,3)},Sd=q("passive,once,capture"),Cd=q("stop,prevent,self,ctrl,shift,alt,meta,exact,middle"),Nd=q("left,right"),Ad=q("onkeyup,onkeydown,onkeypress",!0),Ed=(e,t)=>uc(e)&&"onclick"===e.content.toLowerCase()?sc(t,!0):4!==e.type?oc(["(",e,`) === "onClick" ? "${t}" : (`,e,")"]):e,Td=(e,t)=>{1!==e.type||0!==e.tagType||"script"!==e.tag&&"style"!==e.tag||t.removeNode()},Pd=[e=>{1===e.type&&e.props.forEach(((t,a)=>{6===t.type&&"style"===t.name&&t.value&&(e.props[a]={type:7,name:"bind",arg:sc("style",!0,t.loc),exp:$d(t.value.content,t.loc),modifiers:[],loc:t.loc})}))}],Ud={cloak:()=>({props:[]}),html:(e,t,a)=>{const{exp:l,loc:n}=e;return t.children.length&&(t.children.length=0),{props:[nc(sc("innerHTML",!0,n),l||sc("",!0))]}},text:(e,t,a)=>{const{exp:l,loc:n}=e;return t.children.length&&(t.children.length=0),{props:[nc(sc("textContent",!0),l?uu(l,a)>0?l:ic(a.helperString(Mr),[l],n):sc("",!0))]}},model:(e,t,a)=>{const l=sd(e,t,a);if(!l.props.length||1===t.tagType)return l;const{tag:n}=t,s=a.isCustomElement(n);if("input"===n||"textarea"===n||"select"===n||s){let e=_d,o=!1;if("input"===n||s){const a=kc(t,"type");if(a){if(7===a.type)e=fd;else if(a.value)switch(a.value.content){case"radio":e=ud;break;case"checkbox":e=dd;break;case"file":o=!0}}else(function(e){return e.props.some((e=>!(7!==e.type||"bind"!==e.name||e.arg&&4===e.arg.type&&e.arg.isStatic)))})(t)&&(e=fd)}else"select"===n&&(e=pd);o||(l.needRuntime=a.helper(e))}return l.props=l.props.filter((e=>!(4===e.key.type&&"modelValue"===e.key.content))),l},on:(e,t,a)=>Qu(e,0,a,(t=>{const{modifiers:l}=e;if(!l.length)return t;let{key:n,value:s}=t.props[0];const{keyModifiers:o,nonKeyModifiers:i,eventOptionModifiers:r}=((e,t,a,l)=>{const n=[],s=[],o=[];for(let a=0;a<t.length;a++){const l=t[a];Sd(l)?o.push(l):Nd(l)?uc(e)?Ad(e.content)?n.push(l):s.push(l):(n.push(l),s.push(l)):Cd(l)?s.push(l):n.push(l)}return{keyModifiers:n,nonKeyModifiers:s,eventOptionModifiers:o}})(n,l);if(i.includes("right")&&(n=Ed(n,"onContextmenu")),i.includes("middle")&&(n=Ed(n,"onMouseup")),i.length&&(s=ic(a.helper(vd),[s,JSON.stringify(i)])),!o.length||uc(n)&&!Ad(n.content)||(s=ic(a.helper(md),[s,JSON.stringify(o)])),r.length){const e=r.map(Me).join("");n=uc(n)?sc(`${n.content}${e}`,!0):oc(["(",n,`) + "${e}"`])}return{props:[nc(n,s)]}})),show:(e,t,a)=>({props:[],needRuntime:a.helper(hd)})},Id=Object.create(null);function Od(e,t){if(!ye(e)){if(!e.nodeType)return oe;e=e.innerHTML}const a=e,l=Id[a];if(l)return l;if("#"===e[0]){const t=document.querySelector(e);e=t?t.innerHTML:""}const{code:n}=function(e,t={}){return cd(e,de({},kd,t,{nodeTransforms:[Td,...Pd,...t.nodeTransforms||[]],directiveTransforms:de({},Ud,t.directiveTransforms||{}),transformHoist:null}))}(e,de({hoistStatic:!0,onError:void 0,onWarn:oe},t)),s=new Function("Vue",n)(ur);return s._rc=!0,Id[a]=s}vo(Od);var Md=Object.freeze({__proto__:null,BaseTransition:Bl,Comment:As,EffectScope:Be,Fragment:Cs,KeepAlive:tn,ReactiveEffect:lt,Static:Es,Suspense:$l,Teleport:Ss,Text:Ns,Transition:di,TransitionGroup:Ei,VueElement:oi,callWithAsyncErrorHandling:Ma,callWithErrorHandling:Oa,camelize:Ue,capitalize:Me,cloneVNode:Ks,compatUtils:null,compile:Od,computed:ko,createApp:or,createBlock:Rs,createCommentVNode:Zs,createElementBlock:Ls,createElementVNode:Hs,createHydrationRenderer:hs,createPropsRestProxy:Uo,createRenderer:ms,createSSRApp:ir,createSlots:Pn,createStaticVNode:Ys,createTextVNode:Js,createVNode:Gs,customRef:Sa,defineAsyncComponent:Xl,defineComponent:Yl,defineCustomElement:li,defineEmits:So,defineExpose:Co,defineProps:$o,defineSSRCustomElement:ni,get devtools(){return sl},effect:st,effectScope:Ve,getCurrentInstance:oo,getCurrentScope:Ge,getTransitionRawChildren:Jl,guardReactiveProps:Ws,h:Oo,handleError:ja,hydrate:sr,initCustomFormatter:Lo,initDirectivesForSSR:cr,inject:Pl,isMemoSame:Do,isProxy:ra,isReactive:sa,isReadonly:oa,isRef:va,isRuntimeOnly:mo,isShallow:ia,isVNode:Ds,markRaw:ua,mergeDefaults:Po,mergeProps:to,nextTick:Ya,normalizeClass:J,normalizeProps:Y,normalizeStyle:H,onActivated:ln,onBeforeMount:_n,onBeforeUnmount:mn,onBeforeUpdate:fn,onDeactivated:nn,onErrorCaptured:wn,onMounted:pn,onRenderTracked:yn,onRenderTriggered:bn,onScopeDispose:We,onServerPrefetch:gn,onUnmounted:hn,onUpdated:vn,openBlock:Us,popScopeId:vl,provide:Tl,proxyRefs:ka,pushScopeId:fl,queuePostFlushCb:el,reactive:ea,readonly:aa,ref:ma,registerRuntimeCompiler:vo,render:nr,renderList:Tn,renderSlot:Un,resolveComponent:$n,resolveDirective:Nn,resolveDynamicComponent:Cn,resolveFilter:null,resolveTransitionHooks:Hl,setBlockTracking:Ms,setDevtoolsHook:il,setTransitionHooks:Kl,shallowReactive:ta,shallowReadonly:la,shallowRef:ha,ssrContextKey:Mo,ssrUtils:null,stop:ot,toDisplayString:ae,toHandlerKey:je,toHandlers:On,toRaw:ca,toRef:Aa,toRefs:Ca,transformVNodeArgs:qs,triggerRef:ya,unref:wa,useAttrs:Eo,useCssModule:ii,useCssVars:ri,useSSRContext:jo,useSlots:Ao,useTransitionState:ql,vModelCheckbox:Li,vModelDynamic:Vi,vModelRadio:Di,vModelSelect:Fi,vModelText:ji,vShow:Zi,version:Fo,warn:Pa,watch:jl,watchEffect:Ul,watchPostEffect:Il,watchSyncEffect:Ol,withAsyncContext:Io,withCtx:hl,withDefaults:No,withDirectives:xn,withKeys:Yi,withMemo:Ro,withModifiers:Ki,withScopeId:ml});var jd={props:["content"],watch:{content:function(e,t){}},render(){return Oo(this.$props.content)},__file:"http_src/vue/vue_node.vue"};const Ld=["id"],Rd=["aria-labelledby"],Dd={class:"dropdown-item"};var Fd={__name:"dropdown",props:{id:String,auto_load:Boolean,button_class:String,button_style:String,f_on_open:Function,f_on_close:Function},emits:[],setup(e,{expose:t,emit:a}){const l=e,n=Ao(),s=ma([]);ma([]);const o=ma([]),i=ma(null),r=ma(null);let c=null;pn((()=>{c=$(i.value).parent().closest("div").css("overflow"),1==l.auto_load&&d();let e={dropdown:i.value,dropdown_button:r.value};$(i.value).on("show.bs.dropdown",(function(){$(i.value).parent().closest("div").css("overflow","visible"),null!=l.f_on_open&&l.f_on_open(e)})),$(i.value).on("hide.bs.dropdown",(function(){$(i.value).parent().closest("div").css("overflow",c),null!=l.f_on_close&&l.f_on_close(e)}))}));const u=ko((()=>null!=l.button_class?l.button_class:"btn-link"));async function d(){if(s.value=[],null==n||null==n.menu)return;let e=n.menu();null!=e&&0!=e.length&&("symbol"==typeof e[0].type&&(e=e[0].children),o.value=[],e.forEach((e=>{let t=e;o.value.push(t)})),await Ya())}return t({load_menu:d}),(t,a)=>(Us(),Ls("div",{class:"dropdown",ref_key:"dropdown",ref:i,style:{display:"inline-block"}},[Hs("button",{class:J(["btn dropdown-toggle",u.value]),style:H(e.button_style),type:"button",id:e.id,ref_key:"dropdown_button",ref:r,"aria-expanded":"false","data-bs-toggle":"dropdown"},[Un(t.$slots,"title")],14,Ld),Hs("ul",{class:"dropdown-menu","aria-labelledby":e.id,style:{"max-height":"25rem",overflow:"auto"}},[Zs(' <slot name="menu"></slot> '),Zs(' <li class="dropdown-item" v-for="(opt, i) in options" :ref="el => { menu[i] = el }"> '),Zs("   asd "),Zs("   </li> "),(Us(!0),Ls(Cs,null,Tn(o.value,((e,t)=>(Us(),Ls("li",Dd,[Gs(jd,{content:e},null,8,["content"])])))),256))],8,Rd)],512))},__file:"http_src/vue/dropdown.vue"};const qd=e=>i18n(e);function zd(e){const t={button_list:Vd(!0),button_array:Vd(!1)};return(e,a,l,n)=>{if(null==e.render_v_node_type&&null==e.render_v_func)return null;if(1==n)return!0;if(null!=e.render_v_func)return e.render_v_func(e,a,l,n);return(0,t[e.render_v_node_type])(e,a,l)}}function Bd(e){return(e,t,a)=>{if(null!=e.render_v_func)return null;if(1==a)return!0;let l;if(null!=e.data_field&&(l=t[e.data_field]),null!=e.zero_is_null&&null!=l&&0==l&&(l=""),null!=e.render_generic){return F.getFormatGenericField(e.render_generic,e.zero_is_null)(l,"display",t)}if(null!=e.render_func)return e.render_func(l,t);if(null!=e.render_type){if(null!=v.types[e.render_type])return e.render_func=v.getFormatter(e.render_type),e.render_func(l);if(null!=F[e.render_type])return F[e.render_type](l,"display",t,e.zero_is_null);throw`In column ${e.data_field} render_type: ${e.render_type} not found`}return l}}function Vd(e){return(t,a,l)=>{const n=e=>n=>{n.stopPropagation();let s={event_id:e,row:a,col:t};l.emit("custom_event",s)};let s=t.button_def_array.map((t=>{let s={};null!=t.attributes&&(s=t.attributes);let o=b.clone(t.class);null!=t.f_map_class&&(o=t.f_map_class(o,a));let i="";return null!=o&&o.length>0&&(i=o.join(" ")),0==e?l.h("button",{class:`btn btn-sm btn-secondary ${i}`,style:"margin-right:0.2rem;",onClick:n(t.event_id),...s},[l.h("span",{class:t.icon,style:"",title:qd(t.title_i18n)})]):l.h("a",{class:`${i} btn-sm`,onClick:n(t.event_id),style:"display:block;",...s},[l.h("span",{class:t.icon,style:"margin-right:0.2rem;cursor:pointer;"}),qd(t.title_i18n)])}));if(1==e){let e=l.h("span",{class:"fas fa-sm fa-align-justify"});return l.h(Fd,{auto_load:!0,button_style:"",button_class:"btn-secondary btn-sm"},{title:()=>e,menu:()=>s})}return l.h("div",{class:"button-group"},s)}}function Hd(e,t,a){let l=Wd(e);return async(n,s,o,i,r)=>{let c=o.find((e=>0!=e.sort)),u=o.filter((e=>1==e.visible)).map((e=>l(e))).join(","),d={start:n*s,length:s,map_search:i,visible_columns:u};if(null!=c&&(d.sort=l(c.data),d.order=1==c.sort?"asc":"desc"),null!=t){let e=t();d={...d,...e}}const _=x.obj_to_url_params(d),p=`${http_prefix}/${e.data_url}?${_}`;let f=await b.http_request(p,null,null,!0);null!=a&&a(d);let v=f.rsp;null!=e.rsp_records_field&&(v=f.rsp[e.rsp_records_field]);let m=f.query_info;return null!=e.rsp_query_info_field&&(m=f.rsp[e.rsp_query_info_field]),f.recordsFiltered>f.recordsTotal&&(f.recordsTotal=f.recordsFiltered),{total_rows:f.recordsTotal,rows:v,query_info:m}}}function Gd(e){return e=>null!=e.title_i18n?qd(e.title_i18n):null!=e.title?e.title:""}function Wd(e){return t=>null!=t.id?t.id:null!=t.data_field?t.data_field:e.columns.findIndex((e=>e==t))}const Kd={get_columns_from_datatable_columns:function(e,t){let a=t.map(((t,a)=>{t.data,e[a],null==t.orderable||t.orderable,null!=t.className&&t.className.split(" "),null!=t.render&&(t.render_func=(e,a)=>t.render(e,"display",a))}));return a},build_table:async function(e,t,a,l,n){let s=`${e}/tables_config/${t}.json?epoch_end=${Number.parseInt(Date.now()/1e3)}`,o=await b.http_request(s,null,null,!0);return null==o?{id:t,columns:[]}:(null!=a&&(o.columns=await a(o.columns)),{id:t,columns:o.columns,get_rows:Hd(o,l,n),get_column_id:Wd(o),print_column_name:Gd(),print_html_row:Bd(),print_vue_node_row:zd(),f_is_column_sortable:e=>e.sortable,f_get_column_classes:e=>{let t=e?.class;if(null!=t)return t;return[]},f_get_column_style:e=>{let t=e?.style;if(null!=t)return t;return""},display_empty_rows:o.display_empty_rows,enable_search:o.enable_search,default_sort:o.default_sort,show_autorefresh:o.show_autorefresh,paging:o.paging})}};let Jd={};async function Yd(e){return null==Jd[e]&&(Jd[e]=ntopng_utility.http_request(e)),await Jd[e]}const Zd=async function(e){e.filter((e=>null==e.label)).forEach((e=>{console.error(`label not defined for filter ${JSON.stringify(e)}`),e.label=""})),e.sort(((e,t)=>e.label.localeCompare(t.label))),i18n_ext.tags={},TAG_OPERATORS={},DEFINED_TAGS={},e.forEach((e=>{i18n_ext.tags[e.id]=e.label,e.operators.forEach((e=>TAG_OPERATORS[e.id]=e.label)),DEFINED_TAGS[e.id]=e.operators.map((e=>e.id))}));let t=ntopng_url_manager.get_url_entries(),a=[];for(const[e,l]of t){let t=FILTERS_CONST.find((t=>t.id==e));if(null!=t){l.split(",").forEach((e=>{let[l,n]=e.split(";");if(null==n||null==l||""==n||null!=t.options&&null==t.options.find((e=>e.value==l)))return;let s=l;"array"==t.value_type&&(s=t?.options?.find((e=>e.value==l))?.label),a.push({id:t.id,operator:n,value:l,label:t.label,value_label:s})}))}}return a};function Xd(e){let t={};e.forEach((e=>{let a=t[e.id];null==a&&(a=[],t[e.id]=a),a.push(e)}));let a={};for(let e in t){let l=t[e].filter((e=>null!=e.value&&null!=e.operator&&""!=e.operator)).map((e=>`${e.value};${e.operator}`)).join(",");a[e]=l}return a}const Qd={get_filter_const:Yd,get_filters_object:Xd,load_filters_data:Zd,tag_operator_label_dict:{eq:"=",neq:"!=",lt:"<",gt:">",gte:">=",lte:"<=",in:"contains",nin:"does not contain"}},e_=["multiple"],t_=["selected","value","disabled"],a_=["label"],l_=["selected","value","disabled"];var n_={__name:"select-search",props:{id:String,options:Array,selected_option:Object,selected_options:Array,multiple:Boolean,add_tag:Boolean,disable_change:Boolean},emits:["update:selected_option","update:selected_options","select_option","unselect_option","change_selected_options"],setup(e,{expose:t,emit:a}){const l=e,n=ma(null),s=ma([]),o=ma([]),i=ma({}),r=ma([]),c=ma(0);let u=!0;function d(){!function(){if(s.value=[],o.value=[],null==l.options)return;let e={};l.options.forEach((t=>{let a={...t};null==a.value&&(a.value=a.label),null==t.group?s.value.push(a):(null==e[t.group]&&(e[t.group]={group:a.group,options:[]}),e[t.group].options.push(a))})),o.value=ntopng_utility.object_to_array(e),c.value+=1}(),m(),v()}pn((()=>{l.options&&(l.disable_change&&u||d())})),jl((()=>l.selected_option),((e,t)=>{m(e),p()}),{flush:"pre"}),jl((()=>l.selected_options),((e,t)=>{v(),p()}),{flush:"pre"}),jl([c],((e,t)=>{_()}),{flush:"post"}),jl((()=>l.options),((e,t)=>{1!=l.disable_change&&null!=e&&d()}),{flush:"pre"});const _=()=>{let e=n.value;0==u&&w(),$(e).hasClass("select2-hidden-accessible")||($(e).select2({width:"100%",height:"500px",theme:"bootstrap-5",dropdownParent:$(e).parent(),dropdownAutoWidth:!0,tags:l.add_tag&&!l.multiple}),$(e).on("select2:select",(function(e){let t=e.params.data;if(null==t.element){let e={label:t.text,value:t.id};return a("update:selected_option",e),void a("select_option",e)}let n=t.element._value,s=y(n);if(n!=l.selected_option&&(a("update:selected_option",s),a("select_option",s)),!l.multiple)return;r.value=r.value.filter((e=>e!=n)),r.value.push(n);let o=b(r.value);a("update:selected_options",o),a("change_selected_options",o)})),$(e).on("select2:unselect",(function(e){let t=e.params.data.element._value;if(!l.multiple)return;r.value=r.value.filter((e=>e!=t));let n=y(t),s=b(r.value);a("unselect_option",n),a("update:selected_options",s),a("change_selected_options",s)}))),u=!1,p()};function p(){let e=n.value;if(l.multiple)$(e).val(r.value),$(e).trigger("change");else{let t=g(l.selected_option);$(e).val(t),$(e).trigger("change")}}function f(e){if(!l.multiple){const t=0==i.value.value||"0"==i.value.value;return e.value==i.value.value||t&&e.label==i.value.label}return null!=r.value.find((t=>t==e.value))||e.selected}function v(){null!=l.selected_options&&l.multiple&&(r.value=[],l.selected_options.forEach((e=>{let t=e.value||e.label;r.value.push(t)})))}function m(e){null!=e||l.multiple||(e=h()),i.value=e}function h(){return null==l.selected_option?l.options[0]:l.selected_option}function g(e){let t;return null==e&&(e=h()),t=null!=e.value?e.value:e.label,t}function b(e){let t=e.map((e=>y(e)));return t}function y(e){let t=function(e){null==e&&(e=g());let t=s.value.find((t=>t.value==e));if(null!=t)return t;for(let a=0;a<o.value.length;a+=1){if(t=o.value[a].options.find((t=>t.value==e)),null!=t)return t}return null}(e),a=l.options.find((e=>e.label==t.label));return a}function w(){try{$(n.value).select2("destroy"),$(n.value).off("select2:select")}catch(e){console.error("Destroy select-search catch error:"),console.error(e)}}return t({render:_}),mn((()=>{w()})),(t,a)=>(Us(),Ls("select",{class:"select2 form-select",ref_key:"select2",ref:n,required:"",name:"filter_type",multiple:e.multiple},[(Us(!0),Ls(Cs,null,Tn(s.value,((e,t)=>(Us(),Ls("option",{class:"ntopng-dropdown-min-width no-wrap",selected:f(e),value:e.value,disabled:e.disabled},ae(e.label),9,t_)))),256)),(Us(!0),Ls(Cs,null,Tn(o.value,((e,t)=>(Us(),Ls("optgroup",{label:e.group},[(Us(!0),Ls(Cs,null,Tn(e.options,((e,t)=>(Us(),Ls("option",{selected:f(e),value:e.value,disabled:e.disabled},ae(e.label),9,l_)))),256))],8,a_)))),256))],8,e_))},__file:"http_src/vue/select-search.vue"},s_=Yl({components:{},props:{id:String,main_title:Object,secondary_title_list:Array,help_link:String,items_table:Array},emits:["click_item"],created(){},data:()=>({}),mounted(){ntopng_sync.ready(this.$props.id)},methods:{}});const o_={class:"navbar navbar-shadow navbar-expand-lg navbar-light bg-light px-2 mb-2"},i_={class:"me-1 text-nowrap",style:{"font-size":"1.1rem"}},r_=["href","title"],c_=["title"],u_=["href","title"],d_=["title"],__=Hs("span",{class:"text-muted ms-1 d-none d-lg-inline d-md-none"},"|",-1),p_=Hs("button",{class:"navbar-toggler",type:"button"},[Hs("span",{class:"navbar-toggler-icon"})],-1),f_={class:"collapse navbar-collapse scroll-x",id:"navbarNav"},v_={class:"navbar-nav"},m_=["onClick"],h_={key:0,class:"badge rounded-pill bg-dark",style:{float:"right","margin-bottom":"-10px"}},g_=["onClick"],b_={key:0,class:"badge rounded-pill bg-dark",style:{float:"right","margin-bottom":"-10px"}},y_=["onClick"],w_={key:0,class:"badge rounded-pill bg-dark",style:{float:"right","margin-bottom":"-10px"}},x_={class:"navbar-nav ms-auto"},k_=Hs("a",{href:"javascript:history.back()",class:"nav-item nav-link text-muted"},[Hs("i",{class:"fas fa-arrow-left"})],-1),$_=["href"],S_=[Hs("i",{class:"fas fa-question-circle"},null,-1)];s_.render=function(e,t,a,l,n,s){return Us(),Ls("nav",o_,[Hs("span",i_,[Hs("i",{class:J(e.main_title.icon)},null,2),e.main_title.href?(Us(),Ls("a",{key:0,href:e.main_title.href,title:e.main_title.title},ae(e.main_title.label),9,r_)):(Us(),Ls("span",{key:1,title:e.main_title.title},ae(e.main_title.label),9,c_)),(Us(!0),Ls(Cs,null,Tn(e.secondary_title_list,(e=>(Us(),Ls(Cs,null,[Js(" / "),e.href?(Us(),Ls("a",{key:0,class:J(e.class),href:e.href,title:e.title},[Js(ae(e.label)+" ",1),e.icon?(Us(),Ls("i",{key:0,class:J(e.icon)},null,2)):Zs("v-if",!0)],10,u_)):(Us(),Ls("span",{key:1,title:e.title},ae(e.label),9,d_))],64)))),256))]),__,p_,Hs("div",f_,[Hs("ul",v_,[(Us(!0),Ls(Cs,null,Tn(e.items_table,(e=>(Us(),Ls(Cs,null,[e.active?(Us(),Ls(Cs,{key:0},[e.active?(Us(),Ls("li",{key:0,onClick:t=>this.$emit("click_item",e),class:J(["nav-item nav-link active",e.class])},[e.badge_num>0?(Us(),Ls("span",h_,ae(e.badge_num),1)):Zs("v-if",!0),Hs("b",null,[Hs("i",{class:J(e.icon)},null,2),Js(" "+ae(e.label),1)])],10,m_)):(Us(),Ls("li",{key:1,onClick:t=>this.$emit("click_item",e),class:J(["nav-item nav-link",e.class])},[e.badge_num>0?(Us(),Ls("span",b_,ae(e.badge_num),1)):Zs("v-if",!0),Hs("b",null,[Hs("i",{class:J(e.icon)},null,2),Js(" "+ae(e.label),1)])],10,g_))],64)):(Us(),Ls("a",{key:1,onClick:t=>this.$emit("click_item",e),href:"#",class:J(["nav-item nav-link",e.class])},[e.badge_num>0?(Us(),Ls("span",w_,ae(e.badge_num),1)):Zs("v-if",!0),Hs("i",{class:J(e.icon)},null,2),Js(" "+ae(e.label),1)],10,y_))],64)))),256))]),Hs("ul",x_,[k_,Hs("a",{target:"_newtab",href:e.help_link,class:"nav-item nav-link text-muted"},S_,8,$_)])])])},s_.__file="http_src/vue/page-navbar.vue";var C_=Yl({components:{},props:{id:String,global:Boolean,no_close_button:Boolean},emits:[],created(){},data:()=>({show_alert:!1,i18n:e=>i18n(e),body:"",alert_type:"alert-success"}),mounted(){1==this.global&&ntopng_events_manager.on_custom_event(this.$props.id,ntopng_custom_events.SHOW_GLOBAL_ALERT_INFO,(e=>{null!=e.type&&(this.alert_type=e.type),null!=e.timeout&&setTimeout((()=>{this.close()}),1e3*e.timeout),this.show(e.text_html)}))},methods:{close:function(){this.show_alert=!1},show:function(e,t){this.show_alert=!0,this.body=e,null!=t&&(this.alert_type=t)}}});const N_=["innerHTML"];C_.render=function(e,t,a,l,n,s){return 1==e.show_alert?(Us(),Ls("div",{key:0,style:{width:"100%"},class:J(["alert alert-dismissable",e.alert_type])},[Hs("span",{innerHTML:e.body},null,8,N_),e.no_close_button?Zs("v-if",!0):(Us(),Ls("button",{key:0,type:"button",onClick:t[0]||(t[0]=(...t)=>e.close&&e.close(...t)),class:"btn-close","aria-label":"Close"}))],2)):Zs("v-if",!0)},C_.__file="http_src/vue/alert-info.vue";var A_={components:{},props:{id:String,chart_type:String,register_on_status_change:Boolean,not_emit_global_status_update:Boolean,base_url_request:String,get_params_url_request:Function,get_custom_chart_options:Function,map_chart_options:Function,min_time_interval_id:String,round_time:Boolean},emits:["apply","hidden","showed","chart_reloaded","zoom"],created(){},beforeUnmount(){this.chart.destroyChart()},data:()=>({chart:null,chart_options:null,from_zoom:!1}),async mounted(){await this.init(),ntopng_sync.ready(this.$props.id)},methods:{init:async function(){let e=ntopng_status_manager.get_status(),t=this.get_url_request(e);this.register_on_status_change&&this.register_status(e),await this.draw_chart(t)},get_data_uri:async function(e){if(null==this.chart)return null;return await this.chart.to_data_uri()},download_chart_png:async function(e,t){if(null==this.chart)return;let a=await this.chart.to_data_uri();downloadURI(a,e)},register_status:function(e){let t=this.get_url_request(e);ntopng_status_manager.on_status_change(this.id,(e=>{1==this.from_zoom&&(this.from_zoom=!1);let a=this.get_url_request(e);a!=t?(t=a,this.update_chart(a)):t=a}),!1)},get_url_request:function(e){let t;return null!=this.get_params_url_request?(null==e&&(e=ntopng_status_manager.get_status()),t=this.get_params_url_request(e)):t=x.get_url_params(),`${this.base_url_request}?${t}`},draw_chart:async function(e){let t=ntopChartApex,a=this.chart_type;null==a&&(a=t.typeChart.TS_STACKED),this.chart=t.newChart(a);let l=this;this.chart.registerEvent("beforeZoom",(function(e,t){l.on_before_zoom(e,t)})),this.chart.registerEvent("zoomed",(function(e,t){l.on_zoomed(e,t)}));let n=await this.get_chart_options(e);this.chart.drawChart(this.$refs.chart,n)},update_chart:async function(e){null==e&&(e=this.get_url_request());let t=await this.get_chart_options(e);this.chart.updateChart(t)},update_chart_options:function(e){this.chart.updateChart(e)},update_chart_series:function(e){null!=e&&this.chart.updateSeries(e)},get_chart_options:async function(e){let t;return t=null==this.get_custom_chart_options?await b.http_request(e):await this.get_custom_chart_options(e),null!=this.map_chart_options&&(t=this.map_chart_options(t)),this.$emit("chart_reloaded",t),t},on_before_zoom:function(e,{xaxis:t,yaxis:a}){let l=this.get_epoch_from_xaxis_event(t);if(null!=this.min_time_interval_id){const e=b.get_timeframe_from_timeframe_id(this.min_time_interval_id);l.epoch_end-l.epoch_begin<e&&(l.epoch_end=l.epoch_end+e,l.epoch_end=l.epoch_end-l.epoch_end%e,l.epoch_begin=l.epoch_end-e),1==this.round_time&&(l.epoch_begin=b.round_time_by_timeframe_id(l.epoch_begin,this.min_time_interval_id),l.epoch_end=b.round_time_by_timeframe_id(l.epoch_end,this.min_time_interval_id)),t.min=1e3*l.epoch_begin,t.max=1e3*l.epoch_end}return t},on_zoomed:function(e,{xaxis:t,yaxis:a}){this.from_zoom=!0;const l=this.get_epoch_from_xaxis_event(t);this.not_emit_global_status_update||N.emit_event(ntopng_events.EPOCH_CHANGE,l,this.id),this.$emit("zoom",l)},get_epoch_from_xaxis_event:function(e){const t=moment(e.min),a=moment(e.max);return{epoch_begin:Number.parseInt(t.unix()),epoch_end:Number.parseInt(a.unix())}}}};const E_={style:{width:"100%"},ref:"chart"};A_.render=function(e,t,a,l,n,s){return Us(),Ls("div",E_,null,512)},A_.__file="http_src/vue/chart.vue";var T_={components:{"select-search":n_},props:{id:String,enable_refresh:Boolean,disabled_date_picker:Boolean,min_time_interval_id:String,round_time:Boolean,custom_time_interval_list:Array},computed:{invalid_date_message:function(){if(this.wrong_date)return this.i18n("wrong_date_range");if(this.wrong_min_interval){let e=this.i18n("wrong_min_interval");return e.replace("%time_interval",this.i18n(`show_alerts.presets.${this.min_time_interval_id}`)),e}}},watch:{enable_refresh:function(e,t){1==e?this.start_refresh():null!=this.refresh_interval&&(clearInterval(this.refresh_interval),this.refresh_interval=null)},min_time_interval_id:function(){},round_time:function(){}},emits:["epoch_change"],created(){},beforeMount(){if(null!=this.$props.custom_time_interval_list&&(this.time_preset_list=this.$props.custom_time_interval_list),null==this.min_time_interval_id)return void(this.time_preset_list_filtered=this.time_preset_list);const e=this.get_timeframes_available(),t=e[this.min_time_interval_id];this.time_preset_list_filtered=this.time_preset_list.filter((a=>"custom"==a.value||(null==t||e[a.value]>=t)))},mounted(){let e=x.get_url_entry("epoch_begin"),t=x.get_url_entry("epoch_end");null!=e&&null!=t&&this.emit_epoch_change({epoch_begin:Number.parseInt(e),epoch_end:Number.parseInt(t)},this.$props.id,!0);let a=this,l=(e,t)=>flatpickr($(this.$refs[e]),{enableTime:!0,dateFormat:"d/m/Y H:i",time_24hr:!0,clickOpens:!0,onChange:function(e,t,l){a.enable_apply=!0,a.wrong_date=a.flat_begin_date.selectedDates[0].getTime()>a.flat_end_date.selectedDates[0].getTime(),a.wrong_min_interval=a.min_time_interval_id&&a.get_utc_seconds(a.flat_end_date.selectedDates[0].getTime()-a.flat_begin_date.selectedDates[0].getTime()<b.get_timeframe_from_timeframe_id(a.min_time_interval_id))}});this.flat_begin_date=l("begin-date"),this.flat_end_date=l("end-date"),N.on_event_change(this.$props.id,ntopng_events.EPOCH_CHANGE,(e=>this.on_status_updated(e)),!0),ntopng_sync.ready(this.$props.id),this.enable_refresh&&this.start_refresh()},methods:{start_refresh:function(){this.refresh_interval=setInterval((()=>{let e=this.selected_time_option?.value;this.enable_refresh&&null!=e&&"custom"!=e&&(this.update_from_interval=!0,this.change_select_time(!0))}),1e3*this.refresh_interval_seconds)},utc_s_to_server_date:function(e){let t=1e3*e,a=new Date(t).getTimezoneOffset(),l=moment.tz(t,ntop_zoneinfo)._offset;return new Date(t+1e3*(l+a)*60)},server_date_to_date:function(e,t){let a=e.getTime(),l=e.getTimezoneOffset(),n=moment.tz(a,ntop_zoneinfo)._offset;return new Date(a-1e3*(n+l)*60)},on_status_updated:function(e){let t=Date.now(),a=t-18e5;null!=e.epoch_end&&null!=e.epoch_begin&&Number.parseInt(e.epoch_end)>Number.parseInt(e.epoch_begin)?(e.epoch_begin=Number.parseInt(e.epoch_begin),e.epoch_end=Number.parseInt(e.epoch_end),t=1e3*e.epoch_end,a=1e3*e.epoch_begin):(e.epoch_end=this.get_utc_seconds(t),e.epoch_begin=this.get_utc_seconds(a),x.add_obj_to_url(e),this.emit_epoch_change(e,this.$props.id)),this.flat_begin_date.setDate(this.utc_s_to_server_date(e.epoch_begin)),this.flat_end_date.setDate(this.utc_s_to_server_date(e.epoch_end)),this.set_select_time_value(a,t),this.epoch_status={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end},0==this.update_from_interval&&this.add_status_in_history(this.epoch_status),this.enable_apply=!1,this.update_from_interval=!1,x.add_obj_to_url(this.epoch_status)},set_select_time_value:function(e,t){const a=this.get_timeframes_available();let l=this.get_utc_seconds(Date.now());1==this.round_time&&null!=this.min_time_interval_id&&(l=this.round_time_by_min_interval(l));const n=this.get_utc_seconds(t),s=this.get_utc_seconds(e);if(this.is_between(n,l,60)){this.select_time_value=null;for(let e in a)this.is_between(s,l-a[e],60)&&(this.select_time_value=e);null==this.select_time_value&&(this.select_time_value="custom")}else this.select_time_value="custom";this.time_preset_list_filtered.forEach((e=>{e.currently_active=!1,e.value==this.select_time_value&&(this.selected_time_option=e,e.currently_active=!0)}))},apply:function(){let e=this.get_utc_seconds(Date.now()),t=this.server_date_to_date(this.flat_begin_date.selectedDates[0]),a=this.get_utc_seconds(t.getTime()),l=this.server_date_to_date(this.flat_end_date.selectedDates[0]),n=this.get_utc_seconds(l.getTime());n>e&&(n=e);let s={epoch_begin:a,epoch_end:n};this.emit_epoch_change(s)},change_select_time:function(e){let t=this.get_timeframes_available()[this.selected_time_option.value],a=this.get_utc_seconds(Date.now()),l={epoch_begin:a-t,epoch_end:a,refresh_data:e};this.emit_epoch_change(l)},get_timeframes_available:function(){const e=b.get_timeframes_dict(),t=this.time_preset_list.map((e=>e.value));let a={};return t.forEach((t=>{a[t]=e[t]})),a},get_utc_seconds:function(e){return b.get_utc_seconds(e)},is_between:function(e,t,a){return e>=t-a&&e<=t},zoom:function(e){if(null==this.epoch_status)return;let t=(this.epoch_status.epoch_end-this.epoch_status.epoch_begin)/e,a=this.epoch_status.epoch_end/2+this.epoch_status.epoch_begin/2;this.epoch_status.epoch_begin=a-t/2,this.epoch_status.epoch_end=a+t/2;let l=this.get_utc_seconds(Date.now());this.epoch_status.epoch_end>l&&(this.epoch_status.epoch_end=l),this.epoch_status.epoch_end=Number.parseInt(this.epoch_status.epoch_end),this.epoch_status.epoch_begin=Number.parseInt(this.epoch_status.epoch_begin),this.epoch_status.epoch_begin==this.epoch_status.epoch_end&&(this.epoch_status.epoch_begin-=2),this.emit_epoch_change(this.epoch_status)},jump_time_back:function(){if(null==this.epoch_status)return;this.epoch_status.epoch_begin-=1800,this.epoch_status.epoch_end-=1800,this.emit_epoch_change(this.epoch_status)},jump_time_ahead:function(){if(null==this.epoch_status)return;let e=this.epoch_status.epoch_end,t=this.get_utc_seconds(Date.now());this.epoch_status.epoch_end+=1800,this.epoch_status.epoch_end>t&&(this.epoch_status.epoch_end=t),this.epoch_status.epoch_begin+=this.epoch_status.epoch_end-e,this.emit_epoch_change(this.epoch_status)},emit_epoch_change:function(e,t,a){null!=e.epoch_end&&null!=e.epoch_begin&&(this.wrong_date=!1,e.epoch_begin>e.epoch_end?this.wrong_date=!0:(this.min_time_interval_id&&1==this.round_time&&(e.epoch_begin=this.round_time_by_min_interval(e.epoch_begin),e.epoch_end=this.round_time_by_min_interval(e.epoch_end)),t!=this.id&&this.on_status_updated(e),N.emit_event(ntopng_events.EPOCH_CHANGE,e,this.id),a||this.$emit("epoch_change",e)))},round_time_by_min_interval:function(e){return b.round_time_by_timeframe_id(e,this.min_time_interval_id)},add_status_in_history:function(e){this.history_last_status=this.history[this.history.length-1],this.history.length>5&&this.history.shift(),this.history.push(e)},apply_status_by_history:function(){null!=this.history_last_status&&(this.history.pop(),this.history.pop(),this.emit_epoch_change(this.history_last_status))}},data:()=>({i18n:e=>i18n(e),epoch_status:null,refresh_interval:null,refresh_interval_seconds:60,update_from_interval:!1,history:[],history_last_status:null,enable_apply:!1,select_time_value:"5_min",selected_time_option:{value:"5_min",label:i18n("show_alerts.presets.5_min"),currently_active:!1},wrong_date:!1,wrong_min_interval:!1,flat_begin_date:null,flat_end_date:null,time_preset_list:[{value:"5_min",label:i18n("show_alerts.presets.5_min"),currently_active:!1},{value:"10_min",label:i18n("show_alerts.presets.10_min"),currently_active:!1},{value:"30_min",label:i18n("show_alerts.presets.30_min"),currently_active:!0},{value:"hour",label:i18n("show_alerts.presets.hour"),currently_active:!1},{value:"2_hours",label:i18n("show_alerts.presets.2_hours"),currently_active:!1},{value:"6_hours",label:i18n("show_alerts.presets.6_hours"),currently_active:!1},{value:"12_hours",label:i18n("show_alerts.presets.12_hours"),currently_active:!1},{value:"day",label:i18n("show_alerts.presets.day"),currently_active:!1},{value:"week",label:i18n("show_alerts.presets.week"),currently_active:!1},{value:"month",label:i18n("show_alerts.presets.month"),currently_active:!1},{value:"year",label:i18n("show_alerts.presets.year"),currently_active:!1},{value:"custom",label:i18n("show_alerts.presets.custom"),currently_active:!1,disabled:!0}],time_preset_list_filtered:[]})};const P_=e=>(fl("data-v-6ae24a28"),e=e(),vl(),e),U_={class:"input-group"},I_={class:"form-group"},O_={class:"controls"},M_={class:"btn-group me-auto btn-group-sm flex-wrap d-flex"},j_={class:"btn-group ms-2"},L_=P_((()=>Hs("span",{class:"input-group-text"},[Hs("i",{class:"fas fa-calendar-alt"})],-1))),R_=["disabled"],D_=P_((()=>Hs("span",{class:"input-group-text"},[Hs("i",{class:"fas fa-long-arrow-alt-right"})],-1))),F_=["disabled"],q_=["title"],z_=[P_((()=>Hs("i",{class:"fas fa-exclamation-circle"},null,-1)))],B_={class:"d-flex align-items-center ms-2"},V_=["disabled"],H_={class:"btn-group"},G_=["disabled","title"],W_=[P_((()=>Hs("i",{class:"fas fa-long-arrow-alt-left"},null,-1)))],K_=["disabled","title"],J_=[P_((()=>Hs("i",{class:"fas fa-long-arrow-alt-right"},null,-1)))],Y_=["disabled","title"],Z_=[P_((()=>Hs("i",{class:"fas fa-search-plus"},null,-1)))],X_=["disabled","title"],Q_=[P_((()=>Hs("i",{class:"fas fa-search-minus"},null,-1)))],ep=["disabled","title"],tp=[P_((()=>Hs("i",{class:"fas fa-undo"},null,-1)))],ap=["disabled","title"],lp=[P_((()=>Hs("i",{class:"fas fa-sync"},null,-1)))];function np(e,t){void 0===t&&(t={});var a=t.insertAt;if(e&&"undefined"!=typeof document){var l=document.head||document.getElementsByTagName("head")[0],n=document.createElement("style");n.type="text/css","top"===a&&l.firstChild?l.insertBefore(n,l.firstChild):l.appendChild(n),n.styleSheet?n.styleSheet.cssText=e:n.appendChild(document.createTextNode(e))}}np("\n.date_time_input[data-v-6ae24a28] {\n    width: 10.5rem;\n    max-width: 10.5rem;\n    min-width: 10.5rem;\n}\n"),T_.render=function(e,t,a,l,n,s){const o=$n("select-search");return Us(),Ls("div",U_,[Hs("div",I_,[Hs("div",O_,[Hs("div",M_,[Un(e.$slots,"begin"),Hs("div",null,[Gs(o,{disabled:a.disabled_date_picker,selected_option:n.selected_time_option,"onUpdate:selected_option":t[0]||(t[0]=e=>n.selected_time_option=e),id:"time_preset_range_picker",options:n.time_preset_list_filtered,onSelect_option:t[1]||(t[1]=e=>s.change_select_time(null))},null,8,["disabled","selected_option","options"])]),Hs("div",j_,[L_,Hs("input",{disabled:a.disabled_date_picker,class:"flatpickr flatpickr-input form-control",type:"text",placeholder:"Choose a date..","data-id":"datetime",ref:"begin-date",style:{width:"10rem"}},null,8,R_),Zs(' <input ref="begin-date" @change="enable_apply=true" @change="change_begin_date" type="date" class="date_time_input begin-timepicker form-control border-right-0 fix-safari-input"> '),Zs(' <input ref="begin-time" @change="enable_apply=true" type="time" class="date_time_input begin-timepicker form-control border-right-0 fix-safari-input"> '),D_,Hs("input",{disabled:a.disabled_date_picker,class:"flatpickr flatpickr-input form-control",type:"text",placeholder:"Choose a date..","data-id":"datetime",ref:"end-date",style:{width:"10rem"}},null,8,F_),Zs(' <input ref="end-date" @change="enable_apply=true" type="date" class="date_time_input end-timepicker form-control border-left-0 fix-safari-input" style="width: 2.5rem;"> '),Zs(' <input ref="end-time" @change="enable_apply=true" type="time" class="date_time_input end-timepicker form-control border-left-0 fix-safari-input"> '),xn(Hs("span",{title:s.invalid_date_message,style:{"margin-left":"0.2rem",color:"red"}},z_,8,q_),[[Zi,n.wrong_date||n.wrong_min_interval]])]),Hs("div",B_,[Hs("button",{disabled:!n.enable_apply||n.wrong_date||n.wrong_min_interval,onClick:t[2]||(t[2]=(...e)=>s.apply&&s.apply(...e)),type:"button",class:"btn btn-sm btn-primary"},ae(n.i18n("apply")),9,V_),Hs("div",H_,[Hs("button",{disabled:a.disabled_date_picker,onClick:t[3]||(t[3]=e=>s.jump_time_back()),type:"button",class:"btn btn-sm btn-link",ref:"btn-jump-time-back",title:n.i18n("date_time_range_picker.btn_move_left")},W_,8,G_),Hs("button",{disabled:a.disabled_date_picker,onClick:t[4]||(t[4]=e=>s.jump_time_ahead()),type:"button",class:"btn btn-sm btn-link me-2",ref:"btn-jump-time-ahead",title:n.i18n("date_time_range_picker.btn_move_right")},J_,8,K_),Hs("button",{disabled:a.disabled_date_picker,onClick:t[5]||(t[5]=e=>s.zoom(2)),type:"button",class:"btn btn-sm btn-link",ref:"btn-zoom-in",title:n.i18n("date_time_range_picker.btn_zoom_in")},Z_,8,Y_),Hs("button",{disabled:a.disabled_date_picker,onClick:t[6]||(t[6]=e=>s.zoom(.5)),type:"button",class:"btn btn-sm btn-link",ref:"btn-zoom-out",title:n.i18n("date_time_range_picker.btn_zoom_out")},Q_,8,X_),Hs("button",{disabled:null==n.history_last_status||a.disabled_date_picker,type:"button",onClick:t[7]||(t[7]=e=>s.apply_status_by_history()),class:"btn btn-sm btn-link",title:n.i18n("date_time_range_picker.btn_undo")},tp,8,ep),Hs("button",{disabled:"custom"==n.select_time_value||a.disabled_date_picker,onClick:t[8]||(t[8]=e=>s.change_select_time()),type:"button",class:"btn btn-sm btn-link",title:n.i18n("date_time_range_picker.btn_refresh")},lp,8,ap),Un(e.$slots,"extra_buttons")])])])])])])},T_.__scopeId="data-v-6ae24a28",T_.__file="http_src/vue/date-time-range-picker.vue";var sp=Yl({components:{},props:{id:String},emits:["hidden","showed","closeModal","openModal"],created(){},data:()=>({}),mounted(){let e=this;$(this.$refs.modal_id).on("shown.bs.modal",(function(t){e.$emit("showed")})),$(this.$refs.modal_id).on("hidden.bs.modal",(function(t){e.$emit("hidden")})),ntopng_sync.ready(this.$props.id)},methods:{show:function(){$(this.$refs.modal_id).modal("show"),this.$emit("openModal")},preventEnter:function(){},close:function(){$(this.$refs.modal_id).modal("hide"),this.$emit("closeModal")}}});const op={class:"modal-dialog modal-dialog-centered modal-lg",role:"document"},ip={class:"modal-content"},rp={class:"modal-header"},cp={class:"modal-title"},up=Hs("div",{class:"modal-close"},[Hs("button",{type:"button",class:"btn-close","data-bs-dismiss":"modal","aria-label":"Close"})],-1),dp={class:"modal-body"},_p={class:"modal-footer"},pp=Hs("div",{class:"mr-auto"},null,-1),fp=Hs("div",{class:"alert alert-info test-feedback w-100",style:{display:"none"}},null,-1);sp.render=function(e,t,a,l,n,s){return Us(),Ls("div",{onSubmit:t[0]||(t[0]=Ki(((...t)=>e.preventEnter&&e.preventEnter(...t)),["prevent"])),class:"modal fade",ref:"modal_id",tabindex:"-1",role:"dialog","aria-labelledby":"dt-add-filter-modal-title","aria-hidden":"true"},[Hs("div",op,[Hs("div",ip,[Hs("div",rp,[Hs("h5",cp,[Un(e.$slots,"title")]),up]),Hs("div",dp,[Un(e.$slots,"body")]),Hs("div",_p,[pp,Un(e.$slots,"footer"),fp])])])],544)},sp.__file="http_src/vue/modal.vue";const vp={ipv4:String.raw`^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$`,ipv6:String.raw`^(?:(?:[a-fA-F\d]{1,4}:){7}(?:[a-fA-F\d]{1,4}|:)|(?:[a-fA-F\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|:[a-fA-F\d]{1,4}|:)|(?:[a-fA-F\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,2}|:)|(?:[a-fA-F\d]{1,4}:){4}(?:(?::[a-fA-F\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,3}|:)|(?:[a-fA-F\d]{1,4}:){3}(?:(?::[a-fA-F\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,4}|:)|(?:[a-fA-F\d]{1,4}:){2}(?:(?::[a-fA-F\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,5}|:)|(?:[a-fA-F\d]{1,4}:){1}(?:(?::[a-fA-F\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,6}|:)|(?::(?:(?::[a-fA-F\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,7}|:)))(?:%[0-9a-zA-Z]{1,})?$`,mac_address:String.raw`^([0-9A-Fa-f]{2}:){5}([0-9A-Fa-f]{2})$`,comma_separted_port_regex:String.raw`^(\d{1,5})(,\s*\d{1,5})*$`,port_range_regex:String.raw`^(\d{1,5})-(\d{1,5})$`,host_name:String.raw`^(?!\s*$)[a-zA-Z0-9._: \-\/]{1,250}|^[a-zA-Z0-9._: \-\/]{1,250}@[0-9]{0,5}`,singleword:String.raw`^(?=[a-zA-Z0-9._:\-]{3,253}$)(?!.*[_.:\-]{2})[^_.:\-].*[^_.:\-]$`},mp=e=>hp(e)||gp(e),hp=e=>new RegExp(vp.ipv4).test(e),gp=e=>new RegExp(vp.ipv6).test(e),bp=a;function yp(e){if("text"==e)return".*";if("vlan"==e){return String.raw`@(([1-9])|([1-9][0-9]{1,2})|([1-3][0-9]{3})|(40[0-8][0-9])|(409[0-5]))`}if("ip"==e||"cidr"==e){let t=yp("vlan"),a=bp.REGEXES.ipv4,l=a.replaceAll("$",`${t}$`),n=bp.REGEXES.ipv6,s=n.replaceAll("$",`${t}$`);if("cidr"==e){let e=String.raw`(\/(([1-9])|([1-2][0-9])|(3[0-2])))`,l=a.replaceAll("$",`${e}$`),s=a.replaceAll("$",`${e}${t}$`),o=String.raw`(\/(([1-9])|([1-9][0-9])|(1[0-1][0-9])|(12[0-8])))`;return`(${l}|${s}|${n.replaceAll("$",`${o}$`)}|${n.replaceAll("$",`${o}${t}$`)})`}return`(${a})|(${l})|(${n})|(${s})`}if("mac"==e)return bp.REGEXES.macAddress;if("ip,cidr"==e){return`(${yp("ip")})|(${yp("cidr")})`}return bp.REGEXES[e]}const wp={get_data_pattern:yp,validateIP:mp,validateIPv4:hp,validateIPv6:gp,validateHostName:e=>new RegExp(vp.host_name).test(e),validateCommaSeparatedPortList:e=>new RegExp(vp.comma_separted_port_regex).test(e),validatePortRange:e=>{const t=e.split("-",2),a=Number(t[0]),l=Number(t[1]);return!isNaN(a)&&!isNaN(l)&&(a>0&&a<l&&l<65536)},validateSingleWord:e=>new RegExp(vp.singleword).test(e)};var xp={components:{modal:sp,"select-search":n_},props:{id:String,filters_options:Array},updated(){},data(){return{i18n:e=>i18n(e),jQuery:$,id_modal:`${this.$props.id}_modal`,filter_type_selected:{},filter_type_label_selected:null,operator_selected:{},option_selected:{},input_value:null,input_type:null,data_pattern_selected:null,input_required:!1,options_to_show:null,operators_to_show:[]}},emits:["apply"],created(){},async mounted(){await ntopng_sync.on_ready(this.id_modal),ntopng_events_manager.on_custom_event(this.$props.id,ntopng_custom_events.SHOW_MODAL_FILTERS,(e=>this.show(e))),ntopng_sync.ready(this.$props.id)},methods:{show:function(e){null!=this.$props.filters_options&&0!=this.$props.filters_options.length&&(null!=e?(this.filter_type_selected=e,this.change_filter(e)):(this.filter_type_selected=this.$props.filters_options[0],this.change_filter()),this.$refs.modal.show())},post_change:function(e,t){e.id&&this.$props.filters_options&&(this.filter_type_selected=this.$props.filters_options.find((t=>t.id==e.id))),null!=e.value&&(this.options_to_show?this.option_selected=this.options_to_show.find((t=>t.value==e.value)):(this.option_selected={},this.input_value=e.value,this.data_pattern_selected=this.get_data_pattern(t))),e.operator&&this.operators_to_show&&(this.operator_selected=this.operators_to_show.find((t=>t.id==e.operator)))},change_operator_type:function(e){this.operator_selected=e},change_data_filter:function(e){this.option_selected=e},change_input_value:function(e){this.input_value=e},change_filter:function(e){this.options_to_show=null,this.option_selected=null,this.input_value=null;let t=this.$props.filters_options.find((e=>e.id==this.filter_type_selected.id));null!=t&&(this.input_type=t.type,this.operators_to_show=t.operators,this.filter_type_label_selected=t.label,"select"==this.input_type?(this.options_to_show=t.options.sort(((e,t)=>null==e||null==e.label?-1:null==t||null==t.label?1:e.label.toString().localeCompare(t.label.toString()))),this.option_selected=this.options_to_show[0]):"select-with-input"==this.input_type?(this.options_to_show=t.options?.sort(((e,t)=>null==e||null==e.label?-1:null==t||null==t.label?1:e.label.toString().localeCompare(t.label.toString()))),this.option_selected=this.options_to_show[0],this.data_pattern_selected=this.get_data_pattern(t.value_type)):(this.options_to_show=null,this.data_pattern_selected=this.get_data_pattern(t.value_type)),t.operators&&null==this.operator_selected?.id&&(this.operator_selected=t.operators[0]),null!=e&&this.post_change(e,t.value_type))},get_data_pattern:function(e){return this.input_required=!0,"text"==e?(this.input_required=!1,".*"):wp.get_data_pattern(e)},check_disable_apply:function(){let e=new RegExp(this.data_pattern_selected);return!this.options_to_show&&(this.input_required&&(null==this.input_value||""==this.input_value)||0==e.test(this.input_value))},apply:function(){let e=this.input_value,t=this.input_value;if(null==e||null!=this.option_selected?.value){let a=this.filters_options.find((e=>e.id==this.filter_type_selected.id)),l=a.options.find((e=>e.value==this.option_selected.value));null==l&&(l=this.option_selected),e=l.value,t=l.value_label||l.label}let a={id:this.filter_type_selected.id,label:this.filter_type_label_selected,operator:this.operator_selected.id,value:e,value_label:t};this.$emit("apply",a),ntopng_events_manager.emit_custom_event(ntopng_custom_events.MODAL_FILTERS_APPLY,a),this.close()},close:function(){this.$refs.modal.close()}}};const kp=e=>(fl("data-v-3119c83e"),e=e(),vl(),e),$p={autocomplete:"off"},Sp={class:"form-group row"},Cp=kp((()=>Hs("label",{class:"col-form-label col-sm-3",for:"dt-filter-type-select"},[Hs("b",null,"Filter")],-1))),Np={class:"col-sm-8"},Ap=kp((()=>Hs("hr",null,null,-1))),Ep={class:"dt-filter-template-container form-group row"},Tp={class:"col-form-label col-sm-3"},Pp={class:"col-sm-8"},Up={class:"input-group mb-3"},Ip={class:"input-group-prepend col-sm-3"},Op={key:0,class:"col-sm-9"},Mp={key:1,class:"col-sm-9"},jp=["pattern","required"],Lp={style:{margin:"0px",padding:"0"},class:"alert invalid-feedback"},Rp=["disabled"];np("\ninput ~ .alert[data-v-3119c83e] {\n  display: none;\n}\ninput:invalid ~ .alert[data-v-3119c83e] {\n  display: block;\n}\n"),xp.render=function(e,t,a,l,n,s){const o=$n("select-search"),i=$n("modal");return Us(),Rs(i,{id:n.id_modal,ref:"modal"},{title:hl((()=>[Js(ae(n.i18n("alerts_dashboard.add_filter")),1)])),body:hl((()=>[Hs("form",$p,[Hs("div",Sp,[Cp,Hs("div",Np,[Gs(o,{selected_option:n.filter_type_selected,"onUpdate:selected_option":t[0]||(t[0]=e=>n.filter_type_selected=e),id:"filter_type",options:a.filters_options,onSelect_option:t[1]||(t[1]=e=>s.change_filter())},null,8,["selected_option","options"])])]),Ap,Hs("div",Ep,[Hs("label",Tp,[Hs("b",null,ae(n.filter_type_label_selected),1)]),Hs("div",Pp,[Hs("div",Up,[Hs("div",Ip,[Gs(o,{selected_option:n.operator_selected,"onUpdate:selected_option":t[2]||(t[2]=e=>n.operator_selected=e),id:"operator_filter",options:n.operators_to_show,onSelect_option:s.change_operator_type},null,8,["selected_option","options","onSelect_option"])]),"select"==n.input_type?(Us(),Ls("div",Op,[Gs(o,{selected_option:n.option_selected,"onUpdate:selected_option":t[3]||(t[3]=e=>n.option_selected=e),id:"data_filter",options:n.options_to_show,onSelect_option:s.change_data_filter},null,8,["selected_option","options","onSelect_option"])])):"select-with-input"==n.input_type?(Us(),Ls("div",Mp,[Gs(o,{selected_option:n.option_selected,"onUpdate:selected_option":t[4]||(t[4]=e=>n.option_selected=e),id:"data_filter",add_tag:!0,pattern:n.data_pattern_selected,options:n.options_to_show,onSelect_option:s.change_data_filter},null,8,["selected_option","pattern","options","onSelect_option"])])):(Us(),Ls(Cs,{key:2},[xn(Hs("input",{"onUpdate:modelValue":t[5]||(t[5]=e=>n.input_value=e),pattern:n.data_pattern_selected,name:"value",required:n.input_required,type:"text",class:"form-control"},null,8,jp),[[ji,n.input_value]]),Hs("span",Lp,ae(n.i18n("invalid_value")),1)],64))]),Zs(" end div input-group mb-3 ")]),Zs(" end div form-group-row ")])])])),footer:hl((()=>[Hs("button",{type:"button",disabled:s.check_disable_apply(),onClick:t[6]||(t[6]=(...e)=>s.apply&&s.apply(...e)),class:"btn btn-primary"},ae(n.i18n("apply")),9,Rp)])),_:1},8,["id"])},xp.__scopeId="data-v-3119c83e",xp.__file="http_src/vue/modal-filters.vue";let Dp,Fp,qp,zp,Bp=[],Vp=null!=window.location.toString().match(/alert_stats.lua/),Hp=ntopng_url_manager.get_url_entry("status");null!=Hp&&""!=Hp||(Hp="historical");let Gp=function(e){let t=ntopng_url_manager.get_url_entry("page");return null==t&&(t=e?"all":"overview"),t}(Vp);const Wp=async function(){Bp=await async function(e,t){let a,l=ntopng_url_manager.get_url_entry("query_preset");if(null==l&&(l=""),e)a=`${http_prefix}/lua/rest/v2/get/alert/filter/consts.lua?page=${t}&query_preset=${l}`;else{let e=ntopng_url_manager.get_url_entry("aggregated");a=`${http_prefix}/lua/pro/rest/v2/get/db/filter/consts.lua?page=${t}&query_preset=${l}&aggregated=${e}`}return await ntopng_utility.http_request(a)}(Vp,Gp),Bp.filter((e=>null==e.label)).forEach((e=>{console.error(`label not defined for filter ${JSON.stringify(e)}`),e.label=""})),Bp.sort(((e,t)=>e.label.localeCompare(t.label))),i18n_ext.tags={},Dp={},Fp={},Bp.forEach((e=>{i18n_ext.tags[e.id]=e.label,e.operators.forEach((e=>Dp[e.id]=e.label)),Fp[e.id]=e.operators.map((e=>e.id))}));let e=ntopng_url_manager.get_url_entries(),t=[];for(const[a,l]of e){let e=Bp.find((e=>e.id==a));if(null!=e){l.split(",").forEach((a=>{let[l,n]=a.split(";");if(null==n||null==l||""==n||null!=e.options&&null==e.options.find((e=>e.value==l)))return;let s=l;"array"==e.value_type&&(s=e?.options?.find((e=>e.value==l))?.label),t.push({id:e.id,operator:n,value:l,label:e.label,value_label:s})}))}}return t};var Kp={props:{id:String,min_time_interval_id:String,round_time:Boolean},components:{"date-time-range-picker":T_,"modal-filters":xp},created(){},async mounted(){let e=ntopng_sync.on_ready(this.id_data_time_range_picker);if(ntopng_sync.on_ready(this.id_modal_filters),await e,"all"!=this.page){let e=await Wp();zp=function(e){const t=new Tagify(e.$refs.tagify,{duplicates:!0,delimiters:null,dropdown:{enabled:1,classname:"extra-properties"},autoComplete:{enabled:!1},templates:{tag:function(e){try{return`<tag title='${e.value}' contenteditable='false' spellcheck="false" class='tagify__tag'>\n                        <x title='remove tag' class='tagify__tag__removeBtn'></x>\n                        <div>\n                           <b>${e.label?e.label:e.key}</b>&nbsp;\n                           <b class='operator'>${e.selectedOperator?Dp[e.selectedOperator]:"="}</b>&nbsp;\n                            <span class='tagify__tag-text'>${e.value}</span>\n                        </div>\n                    </tag>`}catch(e){console.error(`An error occured when creating a new tag: ${e}`)}}},validate:function(e){return void 0!==e.key&&void 0!==e.selectedOperator&&void 0!==e.value}});$(document).ready((function(){t.addTags(qp)}));const a=async function(e){"number"==typeof e.realValue&&(e.realValue=""+e.realValue),"number"==typeof e.value&&(e.value=""+e.value);let a=t.getTagElms().find((t=>t.getAttribute("key")===e.key&&t.getAttribute("realValue")===e.realValue));void 0===t.tagData(a)&&(Fp[e.key]&&!Array.isArray(Fp[e.key])&&(e.operators=Fp[e.key].operators),e.selectedOperator||(e.selectedOperator="eq"),t.addTags([e]))};return t.on("remove",(async function(e){const t=e.detail.data.key,a=e.detail.data.realValue,l=ntopng_status_manager.get_status();if(void 0===t)return;if(null==l.filters)return;const n=l.filters.filter((e=>e.id!=t||e.id==t&&e.value!=a));ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:n})})),t.on("add",(async function(e){const a=e.detail;if(void 0===a.data)return;return a.data.key?void 0:(t.removeTags([e.detail.tag]),e.preventDefault(),void e.stopPropagation())})),t.on("click",(async function(t){const a=t.detail;if(void 0===a.data)return;if(void 0===a.data.key)return;const l=a.data;e.edit_tag=l,ntopng_events_manager.emit_custom_event(ntopng_custom_events.SHOW_MODAL_FILTERS,{id:l.key,operator:l.selectedOperator,value:l.realValue})})),t.on("edit:updated",(async function(e){console.warn("UPDATED")})),$("tags").on("change","select.operator",(async function(e){console.warn("TAGS change")})),{tagify:t,addFilterTag:a}}(this),ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:e}),ntopng_events_manager.on_event_change(this.$props.id,ntopng_events.FILTERS_CHANGE,(e=>this.reload_status(e)),!0)}this.modal_data=Bp,ntopng_sync.ready(this.$props.id)},data(){return{i18n:i18n,id_modal_filters:`${this.$props.id}_modal_filters`,id_data_time_range_picker:`${this.$props.id}_date-time-range-picker`,show_filters:!1,edit_tag:null,is_alert_stats_url:Vp,status_view:Hp,page:Gp,modal_data:[],last_filters:[]}},methods:{is_filter_defined:function(e){return null!=Fp[e.id]},update_status_view:function(e){ntopng_url_manager.set_key_to_url("status",e),ntopng_url_manager.reload_url()},show_modal_filters:function(){this.$refs.modal_filters.show()},remove_filters:function(){ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:[]})},reload_status:function(e){let t=e.filters;if(null==t)return;ntopng_url_manager.delete_params(Bp.map((e=>e.id))),zp.tagify.removeAllTags();let a=Qd.get_filters_object(t);ntopng_url_manager.add_obj_to_url(a),t.forEach((e=>{let t=function(e){let t=Bp.find((t=>t.id==e.id));null==t&&console.error("create_tag_from_filter: filter const not found;");let a=e.value;if(null!=t.options){let l=t.options.find((t=>t.value==e.value));null!=l&&(a=l.label)}const l={label:t.label,key:t.id,value:a,realValue:e.value,title:`${t.label}${e.operator}${a}`,selectedOperator:e.operator};return""==l.value&&(l.value="''"),null==l.realValue||null==l.selectedOperator||""==l.selectedOperator?null:l}(e);null!=t&&zp.addFilterTag(t)})),this.last_filters=t},apply_modal:function(e){let t=ntopng_status_manager.get_status().filters;null==t&&(t=[]),null!=this.edit_tag&&(t=t.filter((e=>e.id!=this.edit_tag.key||e.value!=this.edit_tag.realValue)),this.edit_tag=null),t.push(e),ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:t})}}};const Jp=e=>(fl("data-v-aaee59ea"),e=e(),vl(),e),Yp={style:{width:"100%"}},Zp={class:"mb-1"},Xp={key:0,style:{"margin-right":"0.1rem"},class:"d-flex align-items-center me-2"},Qp={class:"btn-group",id:"statusSwitch",role:"group"},ef=[Jp((()=>Hs("i",{class:"fa-solid fa-hourglass-half",title:"Engaged"},null,-1)))],tf=[Jp((()=>Hs("i",{class:"fa-regular fa-eye",title:"Require Attention"},null,-1)))],af=[Jp((()=>Hs("i",{class:"fa-solid fa-inbox",title:"All"},null,-1)))],lf={key:0,class:"d-flex mt-1",style:{width:"100%"}},nf=["placeholder"],sf=[Jp((()=>Hs("span",null,[Hs("i",{class:"fas fa-plus","data-original-title":"",title:"Add Filter"})],-1)))],of=[Jp((()=>Hs("i",{class:"fas fa-times"},null,-1)))];np("\n.tagify__input[data-v-aaee59ea] {\n    min-width: 175px;\n}\n.tagify__tag[data-v-aaee59ea] {\n    white-space: nowrap;\n    margin: 3px 0px 5px 5px;\n}\n.tagify__tag select.operator[data-v-aaee59ea] {\n    margin: 0px 4px;\n    border: 1px solid #c4c4c4;\n    border-radius: 4px;\n}\n.tagify__tag b.operator[data-v-aaee59ea] {\n    margin: 0px 4px;\n    background-color: white;\n    border: 1px solid #c4c4c4;\n    border-radius: 4px;\n    padding: 0.05em 0.2em;\n}\n.tagify__tag>div[data-v-aaee59ea] {\n    display: flex;\n    align-items: center;\n}\n"),Kp.render=function(e,t,a,l,n,s){const o=$n("modal-filters"),i=$n("date-time-range-picker");return Us(),Ls("div",Yp,[Hs("div",Zp,[Gs(o,{filters_options:n.modal_data,onApply:s.apply_modal,ref:"modal_filters",id:n.id_modal_filters},null,8,["filters_options","onApply","id"]),Gs(i,{id:n.id_data_time_range_picker,min_time_interval_id:a.min_time_interval_id,round_time:a.round_time},{begin:hl((()=>[n.is_alert_stats_url?(Us(),Ls("div",Xp,[Hs("div",Qp,["flow"!=n.page?(Us(),Ls("a",{key:0,href:"#",onClick:t[0]||(t[0]=e=>s.update_status_view("engaged")),class:J(["btn btn-sm",{active:"engaged"==n.status_view,"btn-seconday":"engaged"!=n.status_view,"btn-primary":"engaged"==n.status_view}])},ef,2)):Zs("v-if",!0),Hs("a",{href:"#",onClick:t[1]||(t[1]=e=>s.update_status_view("historical")),class:J(["btn btn-sm",{active:"historical"==n.status_view||"flow"==n.page&&"engaged"==n.status_view,"btn-seconday":"historical"!=n.status_view,"btn-primary":"historical"==n.status_view||"flow"==n.page&&"engaged"==n.status_view}])},tf,2),Zs(" <a href=\"#\" @click=\"update_status_view('acknowledged')\" class=\"btn btn-sm\"\n                                :class=\"{ 'active': status_view == 'acknowledged', 'btn-seconday': status_view != 'acknowledged', 'btn-primary': status_view == 'acknowledged' }\"><i class=\"fa-solid fa-check-double\" title=\"Acknowledged\"></i></a>"),Hs("a",{href:"#",onClick:t[2]||(t[2]=e=>s.update_status_view("any")),class:J(["btn btn-sm",{active:"any"==n.status_view,"btn-seconday":"any"!=n.status_view,"btn-primary":"any"==n.status_view}])},af,2)])])):Zs("v-if",!0),Un(e.$slots,"begin")])),extra_buttons:hl((()=>[Un(e.$slots,"extra_range_buttons")])),_:3},8,["id","min_time_interval_id","round_time"])]),Zs(" tagify "),"all"!=n.page?(Us(),Ls("div",lf,[Hs("input",{class:"w-100 form-control h-auto",name:"tags",ref:"tagify",placeholder:n.i18n("show_alerts.filters")},null,8,nf),xn(Hs("button",{class:"btn btn-link","aria-controls":"flow-alerts-table",type:"button",id:"btn-add-alert-filter",onClick:t[3]||(t[3]=(...e)=>s.show_modal_filters&&s.show_modal_filters(...e))},sf,512),[[Zi,n.modal_data&&n.modal_data.length>0]]),xn(Hs("button",{"data-bs-toggle":"tooltip","data-placement":"bottom",title:"{{ i18n('show_alerts.remove_filters') }}",onClick:t[4]||(t[4]=(...e)=>s.remove_filters&&s.remove_filters(...e)),class:"btn ms-1 my-auto btn-sm btn-remove-tags"},of,512),[[Zi,n.modal_data&&n.modal_data.length>0]])])):Zs("v-if",!0),Zs(" end tagify ")])},Kp.__scopeId="data-v-aaee59ea",Kp.__file="http_src/vue/range-picker.vue";const rf={class:"row",style:{"margin-left":"-2px","margin-right":"-2px","margin-top":"1rem","margin-bottom":"-1rem"}},cf={class:"col-sm-12 col-md-5"},uf={class:"dataTables_info",role:"status","aria-live":"polite"},df={class:"col-sm-12 col-md-7"},_f={class:"dataTables_paginate paging_simple_numbers",style:{display:"flex","justify-content":"flex-end"}},pf={class:"pagination"},ff={class:"paginate_button page-item previous"},vf=["onClick"],mf={href:"javascript:void(0);","aria-controls":"default-datatable","data-dt-idx":"1",tabindex:"0",class:"page-link"},hf={class:"paginate_button page-item previous"};var gf={__name:"select_table_page",props:{total_rows:Number,per_page:Number},emits:["change_active_page"],setup(e,{expose:t,emit:a}){const l=e,n=ma(0),s=ma(0),o=ma(0),i=ma(0),r=ma("");function c(){if(null==l.total_rows)return;let e=l.per_page;o.value=Number.parseInt((l.total_rows+e-1)/e),s.value=6,o.value<s.value&&(s.value=o.value),i.value>=o.value&&o.value>0&&(i.value=o.value-1,n.value=o.value-s.value,_(i.value)),p()}pn((()=>{c()})),jl((()=>[l.total_rows,l.per_page]),((e,t)=>{c()}),{flush:"pre",immediate:!0});const u=ko((()=>!(o.value<6)&&i.value>=s.value-1)),d=ko((()=>!(o.value<6)&&i.value<o.value-s.value+1));function _(e,t){null!=e&&(i.value=e),null!=t&&(n.value=t),i.value==n.value&&n.value>0&&(n.value-=1);const l=n.value+s.value-1;i.value==l&&o.value-1>l&&(n.value+=1),i.value>o.value-1&&0!=o.value&&(i.value=o.value-1,n.value=i.value),p(),a("change_active_page",i.value)}function p(){r.value="Showing page %active_page of %total_pages: total %total_rows rows".replace("%active_page",f(`${i.value+1}`)).replace("%total_pages",f(`${o.value}`)).replace("%total_rows",f(`${l.total_rows}`)).replace("%per_page",f(`${l.per_page}`))}function f(e){return e.replace(/(.)(?=(\d{3})+$)/g,"$1,")}return t({change_active_page:_}),(e,t)=>(Us(),Ls(Cs,null,[Zs(" PerPage "),Hs("div",rf,[Zs(" div col-md-5 "),Hs("div",cf,[Hs("div",uf,ae(r.value),1)]),Zs(" div col-md-5 "),Zs(" start div col-sm-12 "),xn(Hs("div",df,[Hs("div",_f,[Hs("ul",pf,[xn(Hs("li",ff,[Hs("a",{href:"javascript:void(0);",onClick:t[0]||(t[0]=e=>_(0,0)),"aria-controls":"default-datatable","data-dt-idx":"0",tabindex:"0",class:"page-link"}," « ")],512),[[Zi,u.value]]),Hs("li",{class:J(["paginate_button page-item previous",{disabled:0==i.value}])},[Hs("a",{href:"javascript:void(0);",onClick:t[1]||(t[1]=e=>{_(i.value-1)}),"aria-controls":"default-datatable","data-dt-idx":"0",tabindex:"0",class:"page-link"}," < ")],2),(Us(!0),Ls(Cs,null,Tn(s.value,(e=>(Us(),Ls("li",{onClick:t=>_(n.value+e-1),class:J([{active:i.value==n.value+e-1},"paginate_button page-item"])},[Hs("a",mf,ae(n.value+e),1),Zs('  :key="total_rows"')],10,vf)))),256)),Hs("li",{class:J(["paginate_button page-item next",{disabled:i.value==o.value-1}]),id:"default-datatable_next"},[Hs("a",{href:"javascript:void(0);",onClick:t[2]||(t[2]=e=>{_(i.value+1)}),"aria-controls":"default-datatable","data-dt-idx":"7",tabindex:"0",class:"page-link"}," > ")],2),xn(Hs("li",hf,[Hs("a",{href:"javascript:void(0);",onClick:t[3]||(t[3]=e=>_(o.value-1,o.value-s.value)),"aria-controls":"default-datatable","data-dt-idx":"0",tabindex:"0",class:"page-link"}," » ")],512),[[Zi,d.value]])])])],512),[[Zi,o.value>0]]),Zs(" end div col-md-7 ")]),Zs(" PerPage ")],2112))},__file:"http_src/vue/select_table_page.vue"};const bf={class:"text-center"},yf={class:"sr-only position-absolute"};var wf={__name:"loading",props:{styles:String},setup(e,{expose:t}){const a=i18n("loading"),l=ma(null);return t({hide_loading:function(e=500){$(l.value).fadeOut(e)},show_loading:function(e=500){$(l.value).fadeIn(e)}}),(t,n)=>(Us(),Ls("div",{ref_key:"overlay",ref:l,class:"overlay centered-message"},[Hs("div",bf,[Hs("div",{class:"spinner-border text-primary mt-6",style:H(e.styles),role:"status"},[Hs("span",yf,ae(wa(a)),1)],4)])],512))},__file:"http_src/vue/loading.vue"};const xf={class:"form-check form-switch ms-1",style:{"white-space":"nowrap"}},kf=["checked","title"],$f=["innerHTML"];var Sf={__name:"switch",props:{value:Boolean,title:String,label:String},emits:["update:value","change_value"],setup(e,{emit:t}){const a=e,l=ma(!1);return pn((()=>{l.value=a.value})),jl((()=>a.value),((e,t)=>{l.value=a.value}),{flush:"pre"}),(a,n)=>(Us(),Ls("div",xf,[Hs("input",{class:"form-check-input",style:{cursor:"pointer"},checked:1==l.value,onClick:n[0]||(n[0]=e=>(t("update:value",!l.value),void t("change_value",!l.value))),type:"checkbox",id:"toggle-Begin",title:e.title},null,8,kf),Hs("label",{class:"form-check-label",for:"toggle-Begin",innerHTML:e.label},null,8,$f)]))},__file:"http_src/vue/switch.vue"};const Cf=e=>(fl("data-v-61956e9e"),e=e(),vl(),e),Nf=["id"],Af={class:"button-group mb-2"},Ef={style:{float:"left","margin-top":"0.5rem"}},Tf=["value"],Pf=Cf((()=>Hs("div",{style:{"text-align":"right"},class:"form-group"},null,-1))),Uf={style:{"text-align":"right"},class:"form-group"},If={key:0,class:"d-inline"},Of=[Cf((()=>Hs("i",{class:"fas fa-columns"},null,-1)))],Mf=[Cf((()=>Hs("i",{class:"fas fa-refresh"},null,-1)))],jf={key:1,class:"d-inline-block"},Lf=Cf((()=>Hs("i",{class:"fas fa-eye"},null,-1))),Rf={class:"form-check form-switch ms-1"},Df=["checked","onClick","id"],Ff=["for","innerHTML"],qf={key:0,class:"centered-message"},zf=["innerHTML"],Bf=["data-resizable-columns-id"],Vf=["onClick","data-resizable-column-id"],Hf={style:{display:"flex"}},Gf=["innerHTML"],Wf={class:"fa fa-fw fa-sort-up"},Kf={class:"fa fa-fw fa-sort-down"},Jf={key:0,scope:"col",class:""},Yf=["innerHTML"],Zf={key:0,style:{},class:"",scope:"col"},Xf=[Cf((()=>Hs("div",{class:"wrap-column"},null,-1)))],Qf={key:1,class:"mt-2"},ev={class:"text-end"},tv={style:{},class:"query text-end"},av={class:"records"},lv={class:"text-start"},nv={id:"historical_flows_table-query-time",style:{},class:"query"},sv={class:"seconds"},ov=["title"];var iv={__name:"table",props:{id:String,columns:Array,get_rows:Function,get_column_id:Function,print_column_name:Function,print_html_row:Function,print_vue_node_row:Function,f_is_column_sortable:Function,f_sort_rows:Function,f_get_column_classes:Function,f_get_column_style:Function,enable_search:Boolean,display_empty_rows:Boolean,show_autorefresh:Number,default_sort:Object,csrf:String,paging:Boolean,display_message:Boolean,message_to_display:String},emits:["custom_event","loaded","rows_loaded"],setup(e,{expose:t,emit:a}){const l=e,n={emit:a,h:Oo,nextTick:Ya},s=e=>i18n(e);ma(!0);const o=ma(null),i=ma(null),r=ma(null);ma([]);let c=0,u=[];const d=ma([]),_=ma([]),p=ma(0),f=[10,20,40,50,80,100],v=ma(10),m=window.store,h=ma(""),g=ma(null),y=ma(!1),w=ma(null),k=ma(null),S=ma(!1),C=ma(!1),N=ma(!1);pn((async()=>{null!=l.columns&&T()}));const A=ko((()=>{if(null==l.show_autorefresh||l.show_autorefresh<=0)return"";return s("table.autorefresh").replace("%time",l.show_autorefresh)}));function E(e){return null!=e&&null!=e.id?e.id:"toggle-Begin"}async function T(){await async function(){let e=await async function(){if(null==l.csrf)return{};const e={table_id:l.id},t=x.obj_to_url_params(e),a=`${http_prefix}/lua/rest/v2/get/tables/user_columns_config.lua?${t}`;let n=await b.http_request(a),s={};return n.forEach((e=>{s[e.id]=e})),s}(),t=!0;for(let a in e)t&=e[a]?.sort;d.value=l.columns.map(((a,n)=>{let s=[],o="";null!=l.f_get_column_classes&&(s=l.f_get_column_classes(a)),null!=l.f_get_column_style&&(o=l.f_get_column_style(a));let i=l.get_column_id(a),r=e[i],c=r?.sort;return c=1==t&&null==c&&null!=l.default_sort&&i==l.default_sort.column_id?l.default_sort.sort:r?.sort?r?.sort:0,{id:i,visible:null==r?.visible||1==r?.visible,sort:c,sortable:Y(a),order:r?.order||n,classes:s,style:o,data:a}})),await j()}(),await K(),M(),await Ya(),r.value.load_menu(),a("loaded")}let P;function U(){0!=N.value?P=setInterval((()=>{q()}),1e3*l.show_autorefresh):clearInterval(P)}async function I(){await async function(){O.value+=1,await Ya()}(),M()}jl((()=>[l.id,l.columns]),((e,t)=>{T()}),{flush:"pre"});const O=ma(0);function M(){let e={store:m,minWidth:32};$(i.value).resizableColumns(e)}async function j(){if(null==l.csrf)return;let e={table_id:l.id,visible_columns_ids:[],csrf:l.csrf};e.visible_columns_ids=d.value.map(((e,t)=>({id:e.id,visible:e.visible,order:e.order,sort:e.sort})));const t=`${http_prefix}/lua/rest/v2/add/tables/user_columns_config.lua`;await b.http_post_request(t,e)}async function L(){l.columns.forEach((e=>{let t=`${l.id}-${l.get_column_id(e)}`;m.remove(t)})),await I()}function R(){D.value+=1,q(0)}const D=ma(0);const F=ma(0);async function q(e){null!=e&&(c=e),null==c&&(c=0),1==l.paging||z?await K():Z(),F.value+=1}let z=!1,B=!1;async function V(e){z=!0,B=e||!1,B?g.value.change_active_page():g.value.change_active_page(0,0),await Ya(),z=!1,B=!1}let G,W=!0;async function K(){y.value=!B;let e=await l.get_rows(c,v.value,d.value,h.value,W);w.value=null,null!=e.query_info&&(w.value=e.query_info),W=!1,p.value=e.rows.length,1==l.paging&&(p.value=e.total_rows),u=e.rows,Z(),y.value=!1,a("rows_loaded",e)}function Y(e){return null==l.f_is_column_sortable||l.f_is_column_sortable(e)}function Z(){let e=0;if(0==l.paging&&(e=c*v.value),0==l.paging){let e=null!=l.f_sort_rows?l.f_sort_rows:(e,t,a)=>{let n=l.print_html_row(e.data,t),s=l.print_html_row(e.data,a);return 1==e.sort?n.localeCompare(s):s.localeCompare(n)},t=function(){let e=d.value.find((e=>0!=e.sort));return e}();u=u.sort(((a,l)=>e(t,a,l)))}_.value=u.slice(e,e+v.value)}async function X(){let e=1e3;null!=G?clearTimeout(G):e=0,G=setTimeout((async()=>{await K(),G=null}),e)}function Q(e){NtopUtils.copyToClipboard(w.value.query,k.value)}return t({load_table:T,refresh_table:V,get_columns_defs:function(){return d.value},get_rows_num:function(){return p.value}}),(t,a)=>(Us(),Ls(Cs,null,[Un(t.$slots,"custom_header2"),Hs("div",{ref_key:"table_container",ref:o,id:e.id},[y.value?(Us(),Rs(wf,{key:0})):Zs("v-if",!0),Hs("div",Af,[Zs(" TableHeader "),Hs("div",Ef,[Hs("label",null,[Js(" Show "),xn(Hs("select",{"onUpdate:modelValue":a[0]||(a[0]=e=>v.value=e),onChange:R},[(Us(),Ls(Cs,null,Tn(f,(e=>Hs("option",{value:e},ae(e),9,Tf))),64))],544),[[Fi,v.value]]),Js(" Entries ")])]),Pf,Hs("div",Uf,[Un(t.$slots,"custom_header"),e.enable_search?(Us(),Ls("div",If,[Hs("label",null,[Js(ae(s("search"))+": ",1),xn(Hs("input",{type:"search","onUpdate:modelValue":a[1]||(a[1]=e=>h.value=e),onInput:X,class:""},null,544),[[ji,h.value]])])])):Zs("v-if",!0),Hs("button",{class:"btn btn-link me-1",type:"button",onClick:L},Of),Hs("button",{class:"btn btn-link me-1",type:"button",onClick:a[2]||(a[2]=e=>V())},Mf),e.show_autorefresh>0?(Us(),Ls("div",jf,[Gs(Sf,{value:N.value,"onUpdate:value":a[3]||(a[3]=e=>N.value=e),class:"me-2 mt-1",title:A.value,style:{},onChange_value:U},null,8,["value","title"])])):Zs("v-if",!0),Gs(Fd,{id:e.id+"_dropdown",ref_key:"dropdown",ref:r},{title:hl((()=>[Lf])),menu:hl((()=>[(Us(!0),Ls(Cs,null,Tn(d.value,(t=>(Us(),Ls("div",Rf,[Hs("input",{class:"form-check-input",style:{cursor:"pointer"},checked:1==t.visible,onClick:e=>async function(e){S.value=!0,e.visible=!e.visible,l.paging&&await K(),await I(),await j(),S.value=!1}(t),type:"checkbox",id:E(t)},null,8,Df),Hs("label",{class:"form-check-label",for:E(t),innerHTML:e.print_column_name(t.data)},null,8,Ff)])))),256))])),_:1},8,["id"]),Zs(" Dropdown columns ")])]),Zs(" TableHeader "),(Us(),Ls("div",{key:O.value,style:{overflow:"auto",width:"100%"}},[Zs(" Table "),1==e.display_message?(Us(),Ls("div",qf,[Hs("span",{innerHTML:e.message_to_display},null,8,zf)])):Zs("v-if",!0),Hs("table",{ref_key:"table",ref:i,class:J(["table table-striped table-bordered ml-0 mr-0 mb-0 ntopng-table",[e.display_message||y.value?"ntopng-gray-out":""]]),"data-resizable":"true","data-resizable-columns-id":e.id},[Zs(" Table "),Hs("thead",null,[Hs("tr",null,[(Us(!0),Ls(Cs,null,Tn(d.value,((t,a)=>(Us(),Ls(Cs,null,[t.visible?(Us(),Ls("th",{key:0,scope:"col",class:J({pointer:t.sortable,unset:!t.sortable}),style:{"white-space":"nowrap"},onClick:e=>async function(e,t){e.sortable&&(e.sort=(e.sort+1)%3,d.value.filter(((e,a)=>a!=t)).forEach((e=>e.sort=0)),0!=e.sort&&(l.paging?await K():Z(),await j()))}(t,a),"data-resizable-column-id":e.get_column_id(t.data)},[Hs("div",Hf,[Hs("span",{innerHTML:e.print_column_name(t.data),class:"wrap-column"},null,8,Gf),Zs(' <i v-show="col.sort == 0" class="fa fa-fw fa-sort"></i> '),xn(Hs("i",Wf,null,512),[[Zi,1==t.sort&&t.sortable]]),xn(Hs("i",Kf,null,512),[[Zi,2==t.sort&&t.sortable]])])],10,Vf)):Zs("v-if",!0)],64)))),256))])]),Hs("tbody",null,[S.value||C.value?Zs("v-if",!0):(Us(!0),Ls(Cs,{key:0},Tn(_.value,(t=>(Us(),Ls("tr",null,[(Us(!0),Ls(Cs,null,Tn(d.value,((a,l)=>(Us(),Ls(Cs,null,[a.visible?(Us(),Ls("td",Jf,[null!=e.print_html_row&&null!=e.print_html_row(a.data,t,!0)?(Us(),Ls("div",{key:0,class:J([a.classes,"wrap-column"]),style:H(a.style),innerHTML:e.print_html_row(a.data,t)},null,14,Yf)):Zs("v-if",!0),Hs("div",{style:H([a.style,{}]),class:J(["wrap-column margin-sm",a.classes])},[null!=e.print_vue_node_row&&null!=e.print_vue_node_row(a.data,t,n,!0)?(Us(),Rs(jd,{key:t,content:e.print_vue_node_row(a.data,t,n)},null,8,["content"])):Zs("v-if",!0)],6)])):Zs("v-if",!0)],64)))),256))])))),256)),e.display_empty_rows&&_.value.length<v.value?(Us(!0),Ls(Cs,{key:1},Tn(v.value-_.value.length,(e=>(Us(),Ls("tr",null,[(Us(!0),Ls(Cs,null,Tn(d.value,((e,t)=>(Us(),Ls(Cs,null,[e.visible?(Us(),Ls("td",Zf,Xf)):Zs("v-if",!0)],64)))),256))])))),256)):Zs("v-if",!0)])],10,Bf),Zs(" Table ")])),Zs(" Table div"),Hs("div",null,[(Us(),Rs(gf,{ref_key:"select_table_page",ref:g,key:D.value,total_rows:p.value,per_page:v.value,onChange_active_page:q},null,8,["total_rows","per_page"]))]),null!=w.value?(Us(),Ls("div",Qf,[Hs("div",ev,[Hs("small",tv,[Hs("span",av,ae(w.value.num_records_processed),1),Js(".")])]),Hs("div",lv,[Hs("small",nv,[Js("Query performed in "),Hs("span",sv,ae((w.value.query_duration_msec/1e3).toFixed(3)),1),Js(" seconds. "),Hs("span",{id:"historical_flows_table-query",style:{cursor:"pointer"},class:"badge bg-secondary",title:w.value.query,onClick:Q,ref_key:"query_info_sql_button",ref:k},"SQL",8,ov)])])])):Zs("v-if",!0)],8,Nf)],64))}};np("\n.sticky[data-v-61956e9e] {\n    position: sticky;\n    left: 0;\n    background-color: white;\n}\n.wrap-column[data-v-61956e9e] {\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow: hidden;\n    width: 100%;\n}\n.pointer[data-v-61956e9e] {\n    cursor: pointer;\n}\n.unset[data-v-61956e9e] {\n    cursor: unset;\n}\n.link-button[data-v-61956e9e] {\n    color: var(--bs-dropdown-link-color);\n    cursor: pointer;\n}\n.link-disabled[data-v-61956e9e] {\n    pointer-events: none;\n    color: #ccc;\n}\ntd[data-v-61956e9e] {\n    height: 2.5rem;\n}\n.margin-sm[data-v-61956e9e] {\n    margin-bottom: -0.25rem;\n    margin-top: -0.25rem;\n}\n"),iv.__scopeId="data-v-61956e9e",iv.__file="http_src/vue/table.vue";var rv={__name:"table-with-config",props:{table_config_id:String,table_id:String,csrf:String,f_map_config:Function,f_map_columns:Function,f_sort_rows:Function,get_extra_params_obj:Function,display_message:Boolean,message_to_display:String},emits:["custom_event","loaded","rows_loaded"],setup(e,{expose:t,emit:a}){const l=e,n=ma({}),s=ma(null),o=ma(!1);pn((async()=>{null==l.table_id&&null==l.table_config_id||r()})),jl((()=>[l.table_id,l.table_config_id]),((e,t)=>{r()}),{flush:"pre"});const i=ko((()=>null!=l.table_id?l.table_id:l.table_config_id));async function r(){o.value=!1,await Ya();let e=l.table_config_id;null==e&&(e=l.table_id),n.value=await Kd.build_table(http_prefix,e,l.f_map_columns,l.get_extra_params_obj),null!=l.f_map_config&&(n.value=l.f_map_config(n.value)),o.value=!0,await Ya()}function c(){a("loaded")}function u(e){a("custom_event",e)}function d(e){a("rows_loaded",e)}return t({refresh_table:e=>{s.value.refresh_table(e)},get_columns_defs:()=>null==s.value?[]:s.value.get_columns_defs(),get_rows_num:()=>s.value.get_rows_num()}),(t,a)=>o.value?(Us(),Rs(iv,{key:0,ref_key:"table",ref:s,id:i.value,columns:n.value.columns,get_rows:n.value.get_rows,get_column_id:n.value.get_column_id,print_column_name:n.value.print_column_name,print_html_row:n.value.print_html_row,print_vue_node_row:n.value.print_vue_node_row,f_is_column_sortable:n.value.f_is_column_sortable,f_get_column_classes:n.value.f_get_column_classes,f_get_column_style:n.value.f_get_column_style,display_empty_rows:n.value.display_empty_rows,f_sort_rows:e.f_sort_rows,enable_search:n.value.enable_search,default_sort:n.value.default_sort,show_autorefresh:n.value.show_autorefresh,paging:n.value.paging,csrf:e.csrf,display_message:e.display_message,message_to_display:e.message_to_display,onLoaded:c,onRows_loaded:d,onCustom_event:u},{custom_header:hl((()=>[Un(t.$slots,"custom_header")])),_:3},8,["id","columns","get_rows","get_column_id","print_column_name","print_html_row","print_vue_node_row","f_is_column_sortable","f_get_column_classes","f_get_column_style","display_empty_rows","f_sort_rows","enable_search","default_sort","show_autorefresh","paging","csrf","display_message","message_to_display"])):Zs("v-if",!0)},__file:"http_src/vue/table-with-config.vue"},cv={__name:"spinner",props:{size:String,show:Boolean},setup:e=>(pn((async()=>{})),(t,a)=>e.show?(Us(),Ls("div",{key:0,class:"spinner-border text-primary",style:H({width:e.size,height:e.size}),role:"status"},null,4)):Zs("v-if",!0)),__file:"http_src/vue/spinner.vue"};const uv={id:"script-description",class:"notes bg-light border",role:"alert"},dv=["innerHTML"];var _v={__name:"note-list",props:{note_list:Array},setup(e){const t=e,a=e=>i18n(e);return(e,l)=>(Us(),Ls("div",uv,[Hs("b",null,ae(a("notes")),1),Hs("ul",null,[(Us(!0),Ls(Cs,null,Tn(t.note_list,(e=>(Us(),Ls("li",{innerHTML:e},null,8,dv)))),256))])]))},__file:"http_src/vue/note-list.vue"},pv=Yl({components:{modal:sp},props:{id:String},updated(){},data(){return{description:"",invalid_bpf:!1,bpf_filter:"",extract_now:!0,show_menu:!0,data_available:0,i18n:e=>i18n(e),epoch_interval:null,id_modal:`${this.$props.id}_modal`}},emits:["apply"],created(){},mounted(){},methods:{pad2_number:function(e){return String(e).padStart(2,"0")},format_date:function(e){let t=e.valueOf();return ntopng_utility.from_utc_to_server_date_format(t)},apply:async function(){if(null!=this.bpf_filter&&""!=this.bpf_filter){let e=`${http_prefix}/lua/pro/rest/v2/check/filter.lua?query=${this.bpf_filter}`,t=await ntopng_utility.http_request(e,null,!1,!0);if(this.invalid_bpf=!t.response,1==this.invalid_bpf)return}let e={ifid:ntopng_url_manager.get_url_entry("ifid"),epoch_begin:this.epoch_interval.epoch_begin,epoch_end:this.epoch_interval.epoch_end,bpf_filter:this.bpf_filter},t=ntopng_url_manager.obj_to_url_params(e);if(1==this.extract_now){let e=`${http_prefix}/lua/rest/v2/get/pcap/live_extraction.lua?${t}`;window.open(e,"_self",!1)}else{let e=`${http_prefix}/lua/traffic_extraction.lua?${t}`,a=(await ntopng_utility.http_request(e,null,!1,!0)).id,l=i18n("traffic_recording.extraction_scheduled"),n=i18n("traffic_recording.traffic_extraction_jobs"),s=`<a href="/lua/if_stats.lua?ifid=${ntopng_url_manager.get_url_entry("ifid")}&page=traffic_recording&tab=jobs&job_id=${a}">${n}</a>`;l=l.replace("%{page}",s),l=`${l} ${a}`,ntopng_events_manager.emit_custom_event(ntopng_custom_events.SHOW_GLOBAL_ALERT_INFO,{text_html:l,type:"alert-success"})}this.close()},close:function(){this.$refs.modal.close(),setTimeout((()=>{this.data_available=0}),1e3)},show:async function(e,t){if(null==t){let e=ntopng_status_manager.get_status();if(null==e.epoch_begin||null==e.epoch_end)return void console.error("modal-traffic-extraction: epoch_begin and epoch_end undefined in url");t={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end}}this.epoch_interval=t;let a=ntopng_url_manager.obj_to_url_params(t),l=`${http_prefix}/lua/check_recording_data.lua?${a}`,n=await ntopng_utility.http_request(l,null,null,!0);if(0==n.available)return this.data_available=2,this.description=i18n("traffic_recording.no_recorded_data"),void this.$refs.modal.show();this.data_available=1;let s="";if(null!=n.info&&(s=n.info),null==e){let t=ntopng_url_manager.get_url_params(),a=`${http_prefix}/lua/pro/rest/v2/get/db/filter/bpf.lua?${t}`,l=await ntopng_utility.http_request(a);if(null==l||null==l.bpf)return void console.error(`modal-traffic-extraction: ${a} return null value`);e=l.bpf}this.set_descriptions(t.epoch_begin,t.epoch_end,s),this.bpf_filter=e,this.$refs.modal.show()},set_descriptions:function(e,t,a){let l=new Date(1e3*e),n=new Date(1e3*t),s=i18n("traffic_recording.about_to_download_flow");s=s.replace("%{date_begin}",this.format_date(l)),s=s.replace("%{date_end}",this.format_date(n)),s=s.replace("%{extra_info}",a),this.description=s},show_hide_menu:function(){this.show_menu=!this.show_menu}}});const fv=e=>(fl("data-v-0be978c4"),e=e(),vl(),e),vv=["innerHTML"],mv={key:0,style:{height:"95%"}},hv={class:"tab-content",style:{height:"100%"}},gv={class:"row"},bv={class:"form-group mb-3 col-md-3 has-feedback"},yv={class:"form-group mb-3 col-md-9 text-right asd"},wv={class:"radio-inline",style:{"margin-left":"1rem"}},xv={class:"radio-inline"},kv={class:"row",id:"pcapDownloadModal_advanced",style:{}},$v={class:"form-group mb-3 col-md-12 has-feedback"},Sv=fv((()=>Hs("br",null,null,-1))),Cv={class:"form-label"},Nv=fv((()=>Hs("a",{class:"ntopng-external-link",href:"https://www.ntop.org/guides/n2disk/filters.html"},[Hs("i",{class:"fas fa-external-link-alt"})],-1))),Av={class:"input-group"},Ev=fv((()=>Hs("span",{class:"input-group-addon"},[Hs("span",{class:"glyphicon glyphicon-filter"})],-1))),Tv=fv((()=>Hs("br",null,null,-1))),Pv={class:"form-label"},Uv=fv((()=>Hs("br",null,null,-1))),Iv=fv((()=>Hs("ul",null,[Hs("li",null,[Js("Host: "),Hs("i",null,"host 192.168.1.2")]),Hs("li",null,[Js("HTTP: "),Hs("i",null,"tcp and port 80")]),Hs("li",null,[Js("Traffic between hosts: "),Hs("i",null,"ip host 192.168.1.1 and 192.168.1.2")]),Hs("li",null,[Js("Traffic from an host to another: "),Hs("i",null,"ip src 192.168.1.1 and dst 192.168.1.2")])],-1)));np("\ninput ~ .alert[data-v-0be978c4] {\n  display: none;\n}\ninput:invalid ~ .alert[data-v-0be978c4] {\n  display: block;\n}\n"),pv.render=function(e,t,a,l,n,s){const o=$n("modal");return Us(),Rs(o,{id:e.id_modal,onApply:e.apply,ref:"modal"},{title:hl((()=>[Js(ae(e.i18n("traffic_recording.pcap_extract")),1)])),body:hl((()=>[Hs("div",{class:J(["alert",{"alert-info":2!=e.data_available,"alert-warning":2==e.data_available}]),innerHTML:e.description},null,10,vv),1==e.data_available?(Us(),Ls("form",mv,[Hs("div",hv,[Hs("div",gv,[Hs("div",bv,[Hs("button",{class:"btn btn-sm btn-secondary",type:"button",onClick:t[0]||(t[0]=(...t)=>e.show_hide_menu&&e.show_hide_menu(...t))},[Js(ae(e.i18n("advanced")),1),Hs("i",{class:J({"fas fa-caret-down":e.show_menu,"fas fa-caret-up":!e.show_menu})},null,2)])]),Hs("div",yv,[Hs("label",wv,[xn(Hs("input",{type:"radio",name:"extract_now","onUpdate:modelValue":t[1]||(t[1]=t=>e.extract_now=t),value:"true",checked:""},null,512),[[Di,e.extract_now]]),Js(" "+ae(e.i18n("traffic_recording.extract_now")),1)]),Hs("label",xv,[xn(Hs("input",{type:"radio",name:"extract_now","onUpdate:modelValue":t[2]||(t[2]=t=>e.extract_now=t),value:"false"},null,512),[[Di,e.extract_now]]),Js(" "+ae(e.i18n("traffic_recording.queue_as_job")),1)])])]),xn(Hs("div",kv,[Hs("div",$v,[Sv,Hs("label",Cv,[Js(ae(e.i18n("traffic_recording.filter_bpf"))+" ",1),Nv]),Hs("div",Av,[Ev,xn(Hs("input",{name:"bpf_filter","onUpdate:modelValue":t[3]||(t[3]=t=>e.bpf_filter=t),class:"form-control input-sm","data-bpf":"bpf",autocomplete:"off",spellcheck:"false"},null,512),[[ji,e.bpf_filter]]),xn(Hs("span",{style:{margin:"0px",padding:"0",display:"block"},class:"invalid-feedback"},ae(e.i18n("invalid_value")),513),[[Zi,e.invalid_bpf]])]),Tv,Hs("label",Pv,ae(e.i18n("traffic_recording.filter_examples"))+":",1),Uv,Iv])],512),[[Zi,e.show_menu]])])])):Zs("v-if",!0)])),footer:hl((()=>[xn(Hs("button",{type:"button",onClick:t[4]||(t[4]=(...t)=>e.apply&&e.apply(...t)),class:"btn btn-primary"},ae(e.i18n("apply")),513),[[Zi,2!=e.data_available]]),xn(Hs("button",{type:"button",onClick:t[5]||(t[5]=(...t)=>e.close&&e.close(...t)),class:"btn btn-primary"},ae(e.i18n("ok")),513),[[Zi,2==e.data_available]])])),_:1},8,["id","onApply"])},pv.__scopeId="data-v-0be978c4",pv.__file="http_src/vue/modal-traffic-extraction.vue";const Ov=e=>(fl("data-v-089b0491"),e=e(),vl(),e),Mv=Ov((()=>Hs("a",{target:"_newtab",href:"#",style:{},class:"nav-item text-muted"},[Hs("i",{class:"fas fa-question-circle",style:{"margin-left":"28rem","padding-top":"0.8rem"}})],-1))),jv={class:"nav nav-tabs"},Lv=["disabled"],Rv={key:0,style:{"min-height":"8.5rem"}},Dv={class:"form-group ms-2 me-2 mt-3 row"},Fv={class:"col-form-label col-sm-4"},qv={class:"col-sm-6"},zv=["pattern"],Bv={key:1,style:{"min-height":"8.5rem"}},Vv={class:"form-group ms-2 me-2 mt-3 row"},Hv={class:"col-form-label col-sm-4"},Gv={class:"col-sm-8"},Wv={value:"name"},Kv={value:"date"},Jv={class:"form-group ms-2 me-2 mt-3 row"},Yv={class:"col-form-label col-sm-4"},Zv={class:"col-sm-8"},Xv=["value"],Qv={class:"form-group ms-2 me-2 mt-3 row"},em={class:"custom-control custom-switch"},tm={class:"custom-control-label ms-1 form-check-label"},am=["disabled"],lm=["disabled"],nm=["disabled"];var sm={__name:"modal-snapshot",props:{csrf:String,page:String},emits:["added_snapshot","deleted_snapshot","deleted_all_snapshots"],setup(e,{expose:t,emit:a}){const l=e,n=ma(null),s=ma("add"),o=ma(""),i=ma(!1),r=ma(""),c=ma(!0),u=ma(""),d=ma(""),_=ma([]),p=ma("date");let f=NtopUtils.REGEXES.singleword;const v=ko((()=>!new RegExp(f).test(d.value))),m=ko((()=>""==o.value));function h(){if(null!=l.page)return l.page;let e="alerts";return null!=window.location.toString().match(/alert_stats.lua/)||(e="flows"),e}let g=null;function b(){g!=p.value&&(_.value.sort(((e,t)=>"name"==p.value?e.name.localeCompare(t.name):e.utc-t.utc)),_.value.length>0&&(o.value=_.value[0]),g=p.value)}let y=!0;const w=async()=>{let e;if(c.value)e=ntopng_url_manager.get_url_params();else{let t=ntopng_url_manager.get_url_object();delete t.epoch_begin,delete t.epoch_end,e=ntopng_url_manager.obj_to_url_params(t)}let t=h(),n={snapshot_name:d.value,filters:e,page:t};n.csrf=l.csrf;let s=`${http_prefix}/lua/pro/rest/v2/add/filters/snapshot.lua`;try{let e={"Content-Type":"application/json"};await ntopng_utility.http_request(s,{method:"post",headers:e,body:JSON.stringify(n)}),y=!0}catch(e){console.error(e)}$(),a("added_snapshots",n)},x=()=>{$();let e=o.value.filters;if(1==i.value){let t=ntopng_status_manager.get_status(),a=ntopng_url_manager.get_url_object(e);a.epoch_begin=t.epoch_begin,a.epoch_end=t.epoch_end,e=ntopng_url_manager.obj_to_url_params(a)}ntopng_url_manager.replace_url_and_reload(e)},k=async e=>{let t=o.value.name;1==e&&(t="*");let n={snapshot_name:t,page:h()};n.csrf=l.csrf;let s=`${http_prefix}/lua/pro/rest/v2/delete/filters/snapshot.lua`;try{let e={"Content-Type":"application/json"};await ntopng_utility.http_request(s,{method:"post",headers:e,body:JSON.stringify(n)}),y=!0}catch(e){console.error(e)}a(1==e?"deleted_all_snapshots":"deleted_snapshot",n),$()},$=()=>{n.value.close()};t({show:()=>{!async function(){s.value="add",d.value="",c.value=!0,i.value=!1;let e=ntopng_status_manager.get_status(),t=S("snapshots.save_time"),a=ntopng_utility.from_utc_to_server_date_format(1e3*e.epoch_begin,"DD/MM/YYYY HH:mm"),l=ntopng_utility.from_utc_to_server_date_format(1e3*e.epoch_end,"DD/MM/YYYY HH:mm");t=t.replace(/\%begin_time/,a),t=t.replace(/\%end_time/,l),u.value=t;let n=S("snapshots.apply_time");if(n=n.replace(/\%begin_time/,a),n=n.replace(/\%end_time/,l),r.value=n,y){y=!1;let e=h(),t=`${http_prefix}/lua/pro/rest/v2/get/filters/snapshots.lua?page=${e}`,a=await ntopng_utility.http_request(t);_.value=ntopng_utility.object_to_array(a)}b(),_.value.length>0&&(o.value=_.value[0])}(),n.value.show()},close:$}),pn((()=>{}));const S=e=>i18n(e);return(e,t)=>(Us(),Rs(sp,{onShowed:t[8]||(t[8]=e=>{}),ref_key:"modal_id",ref:n},{title:hl((()=>[Js(ae(S("snapshots.manage"))+" ",1),Mv])),body:hl((()=>[Hs("ul",jv,[Hs("li",{class:"nav-item",onClick:t[0]||(t[0]=e=>s.value="add")},[Hs("a",{class:J(["nav-link",{active:"add"==s.value}]),href:"#"},ae(S("snapshots.add")),3)]),Hs("li",{class:"nav-item",onClick:t[1]||(t[1]=e=>(e=>{0==_.value.length&&"select"==e||(s.value=e)})("select"))},[Hs("a",{disabled:0==_.value.length,class:J(["nav-link",{active:"select"==s.value,"not-allowed":0==_.value.length}]),href:"#"},ae(S("snapshots.manage")),11,Lv)])]),"add"==s.value?(Us(),Ls("div",Rv,[Hs("div",Dv,[Hs("label",Fv,[Hs("b",null,ae(S("snapshots.name"))+":",1)]),Hs("div",qv,[xn(Hs("input",{pattern:wa(f),placeholder:"",required:"",type:"text",class:"form-control","onUpdate:modelValue":t[2]||(t[2]=e=>d.value=e)},null,8,zv),[[ji,d.value]])])]),Zs(' <div class="form-group ms-2 me-2 mt-3 row"> '),Zs(' \t<div class="custom-control custom-switch"> '),Zs(' \t  <input type="checkbox" class="custom-control-input whitespace form-check-input" v-model="save_time"> '),Zs(' \t  <label class="custom-control-label ms-1 form-check-label">{{save_time_text}}</label> '),Zs(" \t</div> "),Zs(" </div>       ")])):Zs("v-if",!0),Zs(" action add "),"select"==s.value?(Us(),Ls("div",Bv,[Hs("div",Vv,[Hs("label",Hv,[Hs("b",null,ae(S("snapshots.order_by")),1)]),Hs("div",Gv,[xn(Hs("select",{class:"form-select",onChange:t[3]||(t[3]=e=>b()),"onUpdate:modelValue":t[4]||(t[4]=e=>p.value=e)},[Hs("option",Wv,ae(S("snapshots.name")),1),Hs("option",Kv,ae(S("snapshots.date")),1)],544),[[Fi,p.value]])])]),Hs("div",Jv,[Hs("label",Yv,[Hs("b",null,ae(S("snapshots.select")),1)]),Hs("div",Zv,[xn(Hs("select",{class:"form-select","onUpdate:modelValue":t[5]||(t[5]=e=>o.value=e)},[(Us(!0),Ls(Cs,null,Tn(_.value,(e=>(Us(),Ls("option",{value:e},ae(function(e){let t=1e3*e.utc,a=ntopng_utility.from_utc_to_server_date_format(t,"DD/MM/YYYY");return`${e.name} (${a})`}(e)),9,Xv)))),256))],512),[[Fi,o.value]])])]),Hs("div",Qv,[Hs("div",em,[xn(Hs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input","onUpdate:modelValue":t[6]||(t[6]=e=>i.value=e)},null,512),[[Li,i.value]]),Hs("label",tm,ae(r.value),1)])])])):Zs("v-if",!0),Zs(" action select ")])),footer:hl((()=>["add"==s.value?(Us(),Ls("button",{key:0,type:"button",onClick:w,disabled:v.value,class:"btn btn-primary"},ae(S("snapshots.add")),9,am)):Zs("v-if",!0),"select"==s.value?(Us(),Ls("button",{key:1,onClick:t[7]||(t[7]=e=>k(!0)),type:"button",style:{"text-align":"left","margin-left":"0px"},class:"btn btn-danger start-0 position-absolute ms-3"},ae(S("snapshots.delete_all")),1)):Zs("v-if",!0),"select"==s.value?(Us(),Ls("button",{key:2,type:"button",onClick:k,disabled:m.value,class:"btn btn-danger"},ae(S("snapshots.delete")),9,lm)):Zs("v-if",!0),"select"==s.value?(Us(),Ls("button",{key:3,type:"button",onClick:x,disabled:m.value,class:"btn btn-primary"},ae(S("snapshots.apply")),9,nm)):Zs("v-if",!0)])),_:1},512))}};np("\ninput[data-v-089b0491]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-089b0491] {\n  cursor: not-allowed;\n}\n"),sm.__scopeId="data-v-089b0491",sm.__file="http_src/vue/modal-snapshot.vue";const om=e=>(fl("data-v-19c5b1f1"),e=e(),vl(),e),im=["innerHTML"],rm={class:"form-group mb-3"},cm=["innerHTML"],um={class:"alert_label"},dm={class:"form-check"},_m={class:"form-check-label"},pm={key:0,class:"form-check"},fm={class:"form-check-label"},vm={class:"form-check"},mm={class:"form-check-label"},hm={class:"form-check"},gm={class:"form-check-label"},bm={key:0,class:"exclude-domain-certificate"},ym={class:"alert_label"},wm={key:0,class:"form-check"},xm={class:"form-check-label whitespace"},km=["pattern","disabled"],$m={key:1,class:"form-check"},Sm={class:"form-check-label whitespace"},Cm=["disabled","pattern"],Nm={key:0,class:"form-group row"},Am={class:"col-form-label"},Em={class:"mt-1"},Tm=["placeholder"],Pm={class:"separator"},Um=om((()=>Hs("hr",{class:"separator"},null,-1))),Im={class:"form-group mb-3"},Om={class:"custom-control custom-switch"},Mm={class:"custom-control-label"},jm={class:"alert alert-warning border",role:"alert"},Lm=["disabled"];var Rm={__name:"modal-alerts-filter",props:{alert:Object,page:String},emits:["exclude"],setup(e,{expose:t,emit:a}){const l=e,n=ma(null),s=ma("any"),o=ma(!0),i=ma(null),r=ma(null),c=ma(null),u=i18n("details.comment_placeholder");jl((()=>l.alert),((e,t)=>{null!=e&&(s.value="any",o.value=!0,i.value=""==e.info?.value?null:d(e.info?.value),r.value=""==e.info?.issuerdn?null:e.info?.issuerdn)}));const d=e=>{let t=e,a=e.split("://");a.length>1&&(t=a[1]),t=t.split(":")[0];let l=t.split("www.");return l.length>1&&(t=l[1]),t=t.split("/")[0],t},_=()=>{if("domain"==s.value){let e=new RegExp(m);return null==i.value||0==e.test(i.value)}if("certificate"==s.value){let e=new RegExp(h);return null==r.value||0==e.test(r.value)}return!1},p=ko((()=>l.alert?.alert_name)),f=ko((()=>{let e={value:"",label:""};if("host"!=l.page||null==l.alert)return e;let t=l.alert;return e.value=t.ip.value,null!=t.vlan&&null!=t.vlan.value&&0!=t.vlan.value&&(e.value=e.value+"@"+t.vlan.value),e.label=t.ip.label?`${t.ip.label} (${t.ip.value})`:t.ip.value,e})),v=ko((()=>{let e={cli_value:"",cli_label:"",srv_value:"",srv_label:""};if("flow"!=l.page||null==l.alert)return e;let t=l.alert;e.cli_value=t.flow.cli_ip.value,e.srv_value=t.flow.srv_ip.value;let a=`${t.flow.cli_ip.label||t.flow.cli_ip.value}`,n=`${t.flow.srv_ip.label||t.flow.srv_ip.value}`;return null!=t.flow.vlan&&null!=t.flow.vlan.value&&0!=t.flow.vlan.value&&(a=`${a}@${t.flow.vlan.label}`,n=`${n}@${t.flow.vlan.label}`,e.cli_value=e.cli_value+"@"+t.flow.vlan.value,e.srv_value=e.srv_value+"@"+t.flow.vlan.value),a!==e.cli_value&&(a=`${a} (${e.cli_value})`),n!==e.srv_value&&(n=`${n} (${e.srv_value})`),e.cli_label=a,e.srv_label=n,e}));let m=NtopUtils.REGEXES.domain_name_not_strict,h=NtopUtils.REGEXES.tls_certificate;const g=()=>{let e=l.page,t="domain"==s.value||"certificate"==s.value?s.value:"host",n={delete_alerts:o.value,label:c.value,type:t},u=null;"host"==t?("host"==s.value?u=f.value.value:"server_host"==s.value?u=v.value.srv_value:"client_host"==s.value&&(u=v.value.cli_value),n.alert_addr=u,"flow"==e?n.flow_alert_key=l.alert.alert_id.value:"host"==e&&(n.host_alert_key=l.alert.alert_id.value)):"domain"==t?(n.delete_alerts=!1,n.alert_domain=i.value):"certificate"==t&&(n.delete_alerts=!1,n.alert_certificate=r.value),b(),a("exclude",n)},b=()=>{n.value.close()};t({show:()=>{c.value="",n.value.show()},close:b}),pn((()=>{}));const y=e=>i18n(e);return(t,a)=>(Us(),Rs(sp,{onShowed:a[10]||(a[10]=e=>{}),ref_key:"modal_id",ref:n},{title:hl((()=>[Js(ae(y("exclude_check"))+": ",1),Hs("span",{innerHTML:p.value},null,8,im)])),body:hl((()=>[Hs("div",rm,[Hs("div",null,[Hs("label",null,[Js(ae(y("exclude_check"))+' "',1),Hs("b",{innerHTML:p.value},null,8,cm),Js('". '),Hs("span",um,ae(y("exclude_for"))+":",1)]),Hs("div",dm,[xn(Hs("input",{class:"form-check-input",type:"radio",value:"any","onUpdate:modelValue":a[0]||(a[0]=e=>s.value=e)},null,512),[[Di,s.value]]),Hs("label",_m,[Hs("span",null,ae(y("show_alerts.filter_disable_check")),1)])]),"host"==e.page?(Us(),Ls("div",pm,[xn(Hs("input",{class:"form-check-input",type:"radio",value:"host","onUpdate:modelValue":a[1]||(a[1]=e=>s.value=e)},null,512),[[Di,s.value]]),Hs("label",fm,[Hs("span",null,ae(f.value.label),1)])])):Zs("v-if",!0),"flow"==e.page?(Us(),Ls(Cs,{key:1},[Hs("div",vm,[xn(Hs("input",{class:"form-check-input",type:"radio",value:"client_host","onUpdate:modelValue":a[2]||(a[2]=e=>s.value=e)},null,512),[[Di,s.value]]),Hs("label",mm,[Hs("span",null,ae(y("client"))+": "+ae(v.value.cli_label),1)])]),Hs("div",hm,[xn(Hs("input",{class:"form-check-input",type:"radio",value:"server_host","onUpdate:modelValue":a[3]||(a[3]=e=>s.value=e)},null,512),[[Di,s.value]]),Hs("label",gm,[Hs("span",null,ae(y("server"))+": "+ae(v.value.srv_label),1)])])],64)):Zs("v-if",!0)]),null!=i.value||null!=r.value?(Us(),Ls("div",bm,[Hs("label",null,[Hs("span",ym,ae(y("check_exclusion.exclude_all_checks_for"))+":",1)]),null!=i.value?(Us(),Ls("div",wm,[xn(Hs("input",{class:"form-check-input",type:"radio",value:"domain","onUpdate:modelValue":a[4]||(a[4]=e=>s.value=e)},null,512),[[Di,s.value]]),Hs("label",xm,[Hs("span",null,ae(y("check_exclusion.domain"))+":",1)]),xn(Hs("input",{type:"text",pattern:wa(m),disabled:"domain"!=s.value,required:"","onUpdate:modelValue":a[5]||(a[5]=e=>i.value=e),class:"form-check-label custom-width"},null,8,km),[[ji,i.value]])])):Zs("v-if",!0),null!=r.value?(Us(),Ls("div",$m,[xn(Hs("input",{class:"form-check-input",type:"radio",value:"certificate","onUpdate:modelValue":a[6]||(a[6]=e=>s.value=e)},null,512),[[Di,s.value]]),Hs("label",Sm,[Hs("span",null,ae(y("check_exclusion.tls_certificate"))+":",1)]),xn(Hs("input",{type:"text",disabled:"certificate"!=s.value,"onUpdate:modelValue":a[7]||(a[7]=e=>r.value=e),pattern:wa(h),required:"",class:"form-check-label custom-width"},null,8,Cm),[[ji,r.value]])])):Zs("v-if",!0)])):Zs("v-if",!0)]),"any"!=s.value?(Us(),Ls("div",Nm,[Hs("div",null,[Hs("label",Am,[Hs("b",null,ae(y("show_alerts.add_a_comment")),1)])]),Hs("div",Em,[xn(Hs("textarea",{placeholder:wa(u),id:"alert-label",name:"label",rows:"3",class:"form-control",type:"text","onUpdate:modelValue":a[8]||(a[8]=e=>c.value=e),maxlength:"450"},null,8,Tm),[[ji,c.value]])])])):Zs("v-if",!0),xn(Hs("hr",Pm,null,512),[[Zi,o.value]]),"domain"!=s.value&&"certificate"!=s.value?(Us(),Ls(Cs,{key:1},[xn(Hs("div",{class:"message alert alert-danger"},ae(y("show_alerts.confirm_delete_filtered_alerts")),513),[[Zi,o.value]]),Um,Hs("div",Im,[Hs("div",Om,[xn(Hs("input",{type:"checkbox",class:"custom-control-input whitespace","onUpdate:modelValue":a[9]||(a[9]=e=>o.value=e)},null,512),[[Li,o.value]]),Hs("label",Mm,ae(y("delete_disabled_alerts")),1)])])],64)):Zs("v-if",!0),Hs("div",jm,ae(y("show_alerts.confirm_filter_alert")),1)])),footer:hl((()=>[Hs("button",{type:"button",onClick:g,disabled:_(),class:"btn btn-warning"},ae(y("filter")),9,Lm)])),_:1},512))}};np("\n.whitespace[data-v-19c5b1f1] {\n  margin-right: 0.2rem;\n}\n.custom-width[data-v-19c5b1f1] {\n  display: block;\n  min-width: 100%;\n}\ninput[data-v-19c5b1f1]:invalid {\n  border-color: #ff0000;\n}\n.exclude-domain-certificate[data-v-19c5b1f1] {\n  margin-top: 0.4rem;\n}\n"),Rm.__scopeId="data-v-19c5b1f1",Rm.__file="http_src/vue/modal-alerts-filter.vue";const Dm={class:"form-group row mb-2"},Fm={class:"col-sm-6"},qm={class:"col-form-label"},zm={class:"col-sm-6 mt-1"};var Bm={__name:"modal-acknowledge-alert",props:{context:Object,page:String},emits:["acknowledge"],setup(e,{expose:t,emit:a}){const l=e,n=e=>i18n(e),s=ma(null),o=ma(null),i=ma(""),r=ma("");async function c(){const e=`${http_prefix}/lua/rest/v2/acknowledge/${l.page}/alerts.lua`,t={csrf:l.context.csrf,ifid:l.context.ifid,label:i.value,row_id:u.value.row_id};await b.http_request(e,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}),a("acknowledge"),d()}pn((()=>{}));const u=ma({}),d=()=>{s.value.close()};return t({show:e=>{u.value=e;const t=$(`<span>${e.alert_id.label}</span>`);r.value=t.text().trim(),i.value=e.user_label;let a=n("show_alerts.confirm_acknowledge_alert");o.value.show(a,"alert-warning"),s.value.show()},close:d}),(e,t)=>(Us(),Rs(sp,{ref_key:"modal_id",ref:s},{title:hl((()=>[Js(ae(n("show_alerts.acknowledge_alert"))+": "+ae(r.value),1)])),body:hl((()=>[Hs("div",Dm,[Hs("div",Fm,[Hs("label",qm,[Hs("b",null,ae(n("show_alerts.add_a_comment")),1)])]),Hs("div",zm,[xn(Hs("input",{"onUpdate:modelValue":t[0]||(t[0]=e=>i.value=e),class:"form-control",type:"text",maxlength:"255"},null,512),[[ji,i.value]])])]),Gs(C_,{no_close_button:!0,ref_key:"alert_info",ref:o},null,512)])),footer:hl((()=>[Hs("button",{type:"button",onClick:c,class:"btn btn-primary"},ae(n("acknowledge")),1)])),_:1},512))},__file:"http_src/vue/modal-acknowledge-alert.vue"},Vm={__name:"modal-delete-alert",props:{context:Object,page:String},emits:["delete_alert"],setup(e,{expose:t,emit:a}){const l=e,n=e=>i18n(e),s=ma(null),o=ma(null),i=ma({});let r="historical";async function c(){const e=`${http_prefix}/lua/rest/v2/delete/${l.page}/alerts.lua`,t={csrf:l.context.csrf,ifid:l.context.ifid,status:r,row_id:i.value.row_id};await b.http_request(e,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}),a("delete_alert"),u()}pn((()=>{}));const u=()=>{s.value.close()};return t({show:(e,t)=>{i.value=e,r=t;let a=n("show_alerts.confirm_label_alert");o.value.show(a,"alert-danger"),s.value.show()},close:u}),(e,t)=>(Us(),Rs(sp,{ref_key:"modal_id",ref:s},{title:hl((()=>[Js(ae(n("show_alerts.delete_alert")),1)])),body:hl((()=>[Gs(C_,{no_close_button:!0,ref_key:"alert_info",ref:o},null,512)])),footer:hl((()=>[Hs("button",{type:"button",onClick:c,class:"btn btn-primary"},ae(n("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-alert.vue"};const Hm={class:"form-group row"},Gm={class:"col-sm-6"},Wm={class:"col-form-label"},Km={class:"col-sm-6"},Jm=["value"],Ym={class:"form-group row mb-2"},Zm={class:"col-sm-6"},Xm={class:"col-form-label"},Qm={class:"col-sm-6 mt-1"},eh=["value"];var th={__name:"modal-acknowledge-alerts",props:{page:String,context:Object},emits:["acknowledge_alerts"],setup(e,{expose:t,emit:a}){const l=e,n=e=>i18n(e),s=ma(null),o=ma(null),i=ma(""),r=ma("");ma([]),pn((()=>{}));async function c(){const e=`${http_prefix}/lua/rest/v2/acknowledge/${l.page}/alerts.lua`,t=x.get_url_object(),n={csrf:l.context.csrf,...t};await b.http_post_request(e,n),a("acknowledge_alerts"),u()}const u=()=>{s.value.close()};return t({show:e=>{i.value=b.from_utc_to_server_date_format(1e3*e.epoch_begin),r.value=b.from_utc_to_server_date_format(1e3*e.epoch_end);let t=n("show_alerts.confirm_acknowledge_alerts");o.value.show(t,"alert-danger"),s.value.show()},close:u}),(e,t)=>(Us(),Rs(sp,{ref_key:"modal_id",ref:s},{title:hl((()=>[Js(ae(n("acknowledge_alerts")),1)])),body:hl((()=>[Hs("div",Hm,[Hs("div",Gm,[Hs("label",Wm,[Hs("b",null,ae(n("date_from")),1)])]),Hs("div",Km,[Hs("input",{class:"form-control",type:"text",value:i.value,disabled:""},null,8,Jm)])]),Hs("div",Ym,[Hs("div",Zm,[Hs("label",Xm,[Hs("b",null,ae(n("date_from")),1)])]),Hs("div",Qm,[Hs("input",{class:"form-control",type:"text",value:r.value,disabled:""},null,8,eh)])]),Gs(C_,{no_close_button:!0,ref_key:"alert_info",ref:o},null,512)])),footer:hl((()=>[Hs("button",{type:"button",onClick:c,class:"btn btn-primary"},ae(n("acknowledge")),1)])),_:1},512))},__file:"http_src/vue/modal-acknowledge-alerts.vue"};const ah={class:"form-group row"},lh={class:"col-sm-6"},nh={class:"col-form-label"},sh={class:"col-sm-6"},oh=["value"],ih={class:"form-group row"},rh={class:"col-sm-6"},ch={class:"col-form-label"},uh={class:"col-sm-6 mt-1"},dh=["value"],_h={class:"form-group filters-list mb-2"},ph={class:"form-group row"},fh={class:"col-sm-6"},vh={class:"col-form-label"},mh={class:"col-sm-6 mt-1"},hh=["value"];var gh={__name:"modal-delete-alerts",props:{page:String,context:Object},emits:["delete_alerts"],setup(e,{expose:t,emit:a}){const l=e,n=e=>i18n(e),s=ma(null),o=ma(null),i=ma(""),r=ma(""),c=ma([]);pn((()=>{}));async function u(){const e=`${http_prefix}/lua/rest/v2/delete/${l.page}/alerts.lua`,t=x.get_url_object(),n={csrf:l.context.csrf,...t};await b.http_post_request(e,n),a("delete_alerts"),d()}const d=()=>{s.value.close()};return t({show:e=>{i.value=b.from_utc_to_server_date_format(1e3*e.epoch_begin),r.value=b.from_utc_to_server_date_format(1e3*e.epoch_end);const t=Qd.tag_operator_label_dict;c.value=e.filters.map((e=>({label:e.label,value:`${t[e.operator]} ${e.value_label}`})));let a=n("show_alerts.confirm_delete_alerts");o.value.show(a,"alert-danger"),s.value.show()},close:d}),(e,t)=>(Us(),Rs(sp,{ref_key:"modal_id",ref:s},{title:hl((()=>[Js(ae(n("delete_alerts")),1)])),body:hl((()=>[Hs("div",ah,[Hs("div",lh,[Hs("label",nh,[Hs("b",null,ae(n("date_from")),1)])]),Hs("div",sh,[Hs("input",{class:"form-control",type:"text",value:i.value,disabled:""},null,8,oh)])]),Hs("div",ih,[Hs("div",rh,[Hs("label",ch,[Hs("b",null,ae(n("date_from")),1)])]),Hs("div",uh,[Hs("input",{class:"form-control",type:"text",value:r.value,disabled:""},null,8,dh)])]),Hs("div",_h,[(Us(!0),Ls(Cs,null,Tn(c.value,(e=>(Us(),Ls("div",ph,[Hs("div",fh,[Hs("label",vh,[Hs("b",null,ae(e.label),1)])]),Hs("div",mh,[Hs("input",{class:"form-control",type:"text",value:e.value,disabled:""},null,8,hh)])])))),256))]),Gs(C_,{no_close_button:!0,ref_key:"alert_info",ref:o},null,512)])),footer:hl((()=>[Hs("button",{type:"button",onClick:u,class:"btn btn-primary"},ae(n("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-alerts.vue"};const bh={class:"row"},yh={class:"col-12"},wh={class:"mb-2"},xh={class:"w-100"},kh={clas:"range-container d-flex flex-wrap"},$h={class:"range-picker d-flex m-auto flex-wrap"},Sh={key:0,class:"ms-1 me-2"},Ch=["value"],Nh=["label"],Ah=["value"],Eh=["title"],Th=[Hs("i",{class:"fas fa-lg fa-link"},null,-1)],Ph=["title","href"],Uh=[Hs("i",{class:"fas fa-lg fa-file"},null,-1)],Ih=["title"],Oh=[Hs("i",{class:"fas fa-lg fa-download"},null,-1)],Mh=["title"],jh=[Hs("i",{class:"fas fa-lg fa-camera-retro"},null,-1)],Lh={class:"col-12"},Rh={class:"card card-shadow"},Dh={class:"card-body"},Fh={key:0,class:"row"},qh={class:"col-12 mb-2",id:"chart-vue"},zh={class:"card h-100 overflow-hidden"},Bh=Hs("div",null,null,-1),Vh=["title"],Hh=["onClick","title"],Gh={class:"card-footer"},Wh=Hs("i",{class:"fas fa fa-user-check"},null,-1),Kh=Hs("i",{class:"fas fa fa-trash"},null,-1);var Jh={__name:"page-alert-stats",props:{context:Object},setup(e){const t=e,a=e=>i18n(e),l=ma(null),n=ma(null),s=ma(null),o=ma(null),i=ma(null),r=ma(null),c=ma(null),u=ma(null),d=ma(null),_=ma(null),p=ma(null),f=ma(null),v=ma(0),m=ma(!1),g=ma(""),w=ma(null),k=t.context.ifid;let S;const N=ma(""),A=ma("");let E=`${http_prefix}/lua/pro/rest/v2/get/db/ts.lua`;const T=L.typeChart.TS_COLUMN,P=ma([]),U=ma([]),I=ma([a("show_alerts.alerts_info")]),O=ma({}),M=ma([]),j=ma(!1),R=ko((()=>{if(!t.context.show_chart||null==s.value)return"";if(v.value<0)throw"never run";const e=t.context.download.endpoint;let a=x.get_url_object(),l=s.value.get_columns_defs().filter((e=>e.visible)).map((e=>e.id)).join(",");a.format="txt",a.visible_columns=l;const n=x.obj_to_url_params(a);return`${location.origin}/${e}?${n}`}));function D(){return"page-alert-stats_query_presets"}async function q(e){1==t.context.show_cards&&1!=O.value.is_preset&&(P.value=await z("overview"))}async function z(e,t){const a=x.get_url_params(),l=`${http_prefix}/lua/pro/rest/v2/get/${S}/alert/top.lua?${a}&action=${e}`;return(await b.http_request(l)).map((t=>({id:t.name,label:t.label,title:t.tooltip,show_spinner:!1,data_loaded:"overview"!=e,options:t.value})))}_n((async()=>{g.value=`<div class="alert alert-success alert-dismissable"><span>${i18n("no_alerts_require_attention")}</span></div>`,t.context.is_va&&b.check_and_set_default_time_interval("day"),async function(){S=x.get_url_entry("page");const e=x.get_url_entry("status");null==S&&(S="all");"engaged"==e&&"flow"==S&&x.set_key_to_url("status","historical");E="snmp_device"==S?`${http_prefix}/lua/pro/rest/v2/get/snmp/device/alert/ts.lua`:`${http_prefix}/lua/rest/v2/get/${S}/alert/ts.lua`,O.value={value:x.get_url_entry("query_preset"),count:x.get_url_entry("count")},null==O.value.value&&(O.value.value="");N.value=`alert_${S}`,A.value=`${N.value}_${O.value.value}`}(),function(){null==x.get_url_entry("ifid")&&x.set_key_to_url("ifid",k);if(null==x.get_url_entry("epoch_begin")||null==x.get_url_entry("epoch_end")){let e=Number.parseInt((Date.now()-18e5)/1e3),t=Number.parseInt(Date.now()/1e3);x.set_key_to_url("epoch_begin",e),x.set_key_to_url("epoch_end",t)}"flow"==x.get_url_entry("page")&&"engaged"==x.get_url_entry("status")&&x.set_key_to_url("status","historical")}(),await async function(){if(!t.context.is_ntop_enterprise_l||"engaged"==x.get_url_entry("status"))return void h.ready(D());let e=`${http_prefix}/lua/pro/rest/v2/get/alert/preset/consts.lua?page=${S}`,a=await b.http_request(e);if(null==a||0==a.length)return M.value=[],x.set_key_to_url("query_preset",""),x.set_key_to_url("count",""),void h.ready(D());M.value=a[0].list.map((e=>({value:e.id,name:e.name,count:e.count,builtin:!0}))),a.length>1&&a[1].list.forEach((e=>{let t={value:e.id,name:e.name,count:e.count,is_preset:!0};M.value.push(t)}));if(null==O.value||""==O.value.value)O.value=M.value[0];else{let e=M.value.find((e=>e.value==O.value.value));O.value=e||M.value[0]}x.set_key_to_url("query_preset",O.value.value),x.set_key_to_url("count",O.value.count),h.ready(D())}(),j.value=!0,await q()})),pn((async()=>{!async function(){await h.on_ready("range_picker"),n.value.register_status(),y.on_status_change(S,(e=>{x.get_url_params(),s.value.refresh_table(),q()}),!1)}()}));const B=(e,t)=>a=>{!async function(e,t){if(e.show_spinner=!0,await Ya(),0==e.data_loaded){let a=await z(e.id);e.options=a.find((t=>t.id==e.id)).options,await Ya(),U.value[t].load_menu()}e.show_spinner=!1}(e,t)};function V(){$(`#${A.value}`).on("click","a.tag-filter",(async function(e){G(e,$(this))}))}const H=async e=>{await h.on_ready("page-alert-stats_query_presets");let a={l7_proto:(e,t)=>{let a="";if(void 0!==e.confidence){const t=e.confidence;a="DPI"==t?`<span class="badge bg-success" title="${t}">${t}</span>`:`<span class="badge bg-warning" title="${t}">${t}</span>`}return F.filterize("l7proto",e.value,e.label)+" "+`${a}`},info:(e,t)=>{let a="";return e.value&&(a=`<button class="btn btn-light btn-sm border ms-1" data-placement="bottom" onclick="\n                    const textArea = document.createElement('textarea');\n                    textArea.value = '${e.value}';    \n                    textArea.style.position = 'absolute';\n                    textArea.style.left = '-999999px';    \n                    document.body.prepend(textArea);\n                    textArea.select();\n                    document.execCommand('copy');"\n                    ><i class="fas fa-copy"></i></button>`),`${a} ${F.filterize("info",e.value,e.label)}`}},l=O.value.is_preset&&e.length>0;return l&&(e=[e[0]].concat(t.context.columns_def)),e.forEach((e=>{if(e.render_func=a[e.data_field],"actions"==e.id){if(1==l)return void(e.button_def_array=[{id:"expand",icon:"fas fa fa-search-plus",class:["link-button"],title_i18n:"db_search.expand_button",event_id:"click_button_expand"}]);const a={snmp_info:t.context.actions.show_snmp_info,info:t.context.actions.show_info,historical_data:t.context.actions.show_historical,acknowledge:t.context.actions.show_acknowledge,disable:t.context.actions.show_disable,settings:t.context.actions.show_settings,remove:t.context.actions.show_delete};e.button_def_array.forEach((e=>{a[e.id]||e.class.push("link-disabled")}))}})),e},G=(e,t)=>{let a,l;e.stopPropagation();let n="eq";null!=t.data("tagKey")&&(a=t.data("tagKey")),null!=t.data("tagRealvalue")?l=t.data("tagRealvalue"):null!=t.data("tagValue")&&(l=t.data("tagValue")),null!=t.data("tagOperator")&&(n=t.data("tagOperator")),W({id:a,value:l,operator:n})};function W(e){if(!r.value.is_filter_defined(e))throw`Filter ${e.value} not defined`;ntopng_events_manager.emit_custom_event(C.SHOW_MODAL_FILTERS,e)}const K=()=>x.get_url_object();function J(e){x.set_key_to_url("page",e.page_name),null!=window.location.toString().match(/alert_stats.lua/)&&function(){let e=y.get_status().filters;if(null==e)return;x.delete_params(e.map((e=>e.id)))}(),x.reload_url()}function Y(){const e=$(c.value),t=document.createElement("input");t.value=location.href,document.body.appendChild(t),t.select(),document.execCommand("copy"),document.body.removeChild(t),e.attr("title",`${a("copied")}!`).tooltip("dispose").tooltip().tooltip("show")}function Z(){o.value.show()}function X(){i.value.show()}async function Q(e){e.csrf=t.context.csrf;let l=`${http_prefix}/lua/pro/rest/v2/add/alert/exclusion.lua`;try{let t={"Content-Type":"application/json"};await b.http_request(l,{method:"post",headers:t,body:JSON.stringify(e)});x.get_url_params();setTimeout((()=>{ntopng_events_manager.emit_custom_event(C.SHOW_GLOBAL_ALERT_INFO,{text_html:a("check_exclusion.disable_warn"),type:"alert-info",timeout:2})}),1e3)}catch(e){console.error(e)}}function ee(){let e=s.value,t=n.value;setTimeout((()=>{e.refresh_table(),t.update_chart()}),1e3)}function te(e){null!=e?.rows&&(m.value=0==e.rows.length)}function le(e){let t={click_button_snmp_info:_e,click_button_info:pe,click_button_historical_flows:de,click_button_acknowledge:ue,click_button_disable:ce,click_button_settings:re,click_button_remove:ie,click_button_expand:ne};null!=t[e.event_id]&&t[e.event_id](e)}function ne(e){const t=e.row;x.set_key_to_url("query_preset",""),x.set_key_to_url("count","");let a=y.get_status().filters,l=t?.filter?.tag_filters;l?.length>0&&(l=l.map((e=>({id:e.id,operator:e.op,value:e.value}))),a=a.concat(l));let n={};a.forEach((e=>n[`${e.id}_${e.operator}_${e.value}`]=e)),a=b.object_to_array(n);let s=Qd.get_filters_object(a);x.add_obj_to_url(s),x.reload_url()}function se(){let e=y.get_status();p.value.show(e)}function oe(){let e=y.get_status();f.value.show(e)}function ie(e){const t=e.row;let a=fe();_.value.show(t,a)}function re(e){const t=e.row,a=$(t.msg.configset_ref).attr("href");window.location.href=a}function ce(e){!function(e){w.value=e,u.value.show()}(e.row)}function ue(e){const a=e.row;d.value.show(a,t.context)}function de(e){const t=e.row;t.link_to_past_flows?window.location.href=t.link_to_past_flows:window.location.href=`${http_prefix}/lua/pro/db_search.lua`}function _e(e){const t=e.row;let a="";a=null!=t.port.value?`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${t.ip}&snmp_port_idx=${t.port.value}`:`${http_prefix}/lua/pro/enterprise/snmp_device_details.lua?host=${t.ip}`,window.open(a,"_blank")}function pe(e){const a=e.row;let l=fe(),n={page:S,status:l,row_id:a.row_id,tstamp:a.tstamp.value},s=x.obj_to_url_params(n);const o=`${t.context.alert_details_url}?${s}`;window.open(o,"_blank")}function fe(){let e=x.get_url_entry("status");return null!=e&&""!=e||(e="historical"),e}return(t,v)=>(Us(),Ls(Cs,null,[Gs(s_,{id:"navbar",main_title:e.context.navbar.main_title,base_url:e.context.navbar.base_url,help_link:e.context.navbar.help_link,items_table:e.context.navbar.items_table,onClick_item:J},null,8,["main_title","base_url","help_link","items_table"]),Hs("div",bh,[Hs("div",yh,[Hs("div",wh,[Hs("div",xh,[Hs("div",kh,[Hs("div",$h,[Gs(C_,{id:"alert_info",global:!0,ref_key:"alert_info",ref:l},null,512),Gs(pv,{id:"modal_traffic_extraction",ref_key:"modal_traffic_extraction",ref:o},null,512),Gs(sm,{ref_key:"modal_snapshot",ref:i,csrf:e.context.csrf},null,8,["csrf"]),j.value?(Us(),Rs(Kp,{key:0,ref_key:"range_picker",ref:r,id:"range_picker"},{begin:hl((()=>[M.value.length>0?(Us(),Ls("div",Sh,[xn(Hs("select",{class:"me-2 form-select","onUpdate:modelValue":v[0]||(v[0]=e=>O.value=e),onChange:v[1]||(v[1]=e=>(x.get_url_params(),x.set_key_to_url("query_preset",O.value.value),x.set_key_to_url("count",O.value.count),void x.reload_url()))},[(Us(!0),Ls(Cs,null,Tn(M.value,(e=>(Us(),Ls(Cs,null,[1==e.builtin?(Us(),Ls("option",{key:0,value:e},ae(e.name),9,Ch)):Zs("v-if",!0)],64)))),256)),"analysis"!=wa(S)?(Us(),Ls("optgroup",{key:0,label:a("queries.queries")},[(Us(!0),Ls(Cs,null,Tn(M.value,(e=>(Us(),Ls(Cs,null,[e.builtin?Zs("v-if",!0):(Us(),Ls("option",{key:0,value:e},ae(e.name),9,Ah))],64)))),256))],8,Nh)):Zs("v-if",!0)],544),[[Fi,O.value]])])):Zs("v-if",!0)])),extra_range_buttons:hl((()=>[e.context.show_permalink?(Us(),Ls("button",{key:0,class:"btn btn-link btn-sm",onClick:Y,title:a("graphs.get_permanent_link"),ref_key:"permanent_link_button",ref:c},Th,8,Eh)):Zs("v-if",!0),e.context.show_download?(Us(),Ls("a",{key:1,class:"btn btn-link btn-sm",id:"dt-btn-download",title:a("graphs.download_records"),href:R.value},Uh,8,Ph)):Zs("v-if",!0),e.context.show_pcap_download?(Us(),Ls("button",{key:2,class:"btn btn-link btn-sm",onClick:Z,title:a("traffic_recording.pcap_download")},Oh,8,Ih)):Zs("v-if",!0),e.context.is_ntop_enterprise_m?(Us(),Ls("button",{key:3,class:"btn btn-link btn-sm",onClick:X,title:a("datatable.manage_snapshots")},jh,8,Mh)):Zs("v-if",!0)])),_:1},512)):Zs("v-if",!0)])])])])]),Hs("div",Lh,[Hs("div",Rh,[Hs("div",Dh,[e.context.show_chart?(Us(),Ls("div",Fh,[Hs("div",qh,[Hs("div",zh,[Gs(A_,{ref_key:"chart",ref:n,id:"chart_alert_stats",chart_type:wa(T),base_url_request:wa(E),register_on_status_change:!1},null,8,["chart_type","base_url_request"])])]),Bh,Gs(rv,{ref_key:"table_alerts",ref:s,table_config_id:N.value,table_id:A.value,csrf:e.context.csrf,f_map_columns:H,get_extra_params_obj:K,display_message:m.value,message_to_display:g.value,onLoaded:V,onCustom_event:le,onRows_loaded:te},{custom_header:hl((()=>[(Us(!0),Ls(Cs,null,Tn(P.value,((e,t)=>(Us(),Rs(Fd,{f_on_open:B(e,t),ref_for:!0,ref:e=>{U.value[t]=e}},{title:hl((()=>[Gs(cv,{show:e.show_spinner,size:"1rem",class:"me-1"},null,8,["show"]),Hs("a",{class:"ntopng-truncate",title:e.title},ae(e.label),9,Vh)])),menu:hl((()=>[(Us(!0),Ls(Cs,null,Tn(e.options,(e=>(Us(),Ls("a",{style:{cursor:"pointer",display:"block"},onClick:t=>function(e,t){t.stopPropagation(),W({id:e.key,value:e.value,operator:e.operator})}(e,t),class:"ntopng-truncate tag-filter",title:e.value},ae(e.label),9,Hh)))),256))])),_:2},1032,["f_on_open"])))),256)),Zs(" Dropdown columns ")])),_:1},8,["table_config_id","table_id","csrf","display_message","message_to_display"])])):Zs("v-if",!0)]),Zs(" card body "),xn(Hs("div",Gh,[e.context.show_acknowledge_all?(Us(),Ls("button",{key:0,onClick:se,class:"btn btn-primary me-1"},[Wh,Js(" "+ae(a("acknowledge_alerts")),1)])):Zs("v-if",!0),e.context.show_delete_all?(Us(),Ls("button",{key:1,onClick:oe,class:"btn btn-danger"},[Kh,Js(" "+ae(a("delete_alerts")),1)])):Zs("v-if",!0)],512),[[Zi,"all"!=wa(S)]]),Zs(" card footer ")]),Zs(" card-shadow ")]),Zs(" div col "),Gs(_v,{note_list:I.value},null,8,["note_list"])]),Zs(" div row "),Gs(Bm,{ref_key:"modal_acknowledge",ref:d,context:e.context,page:wa(S),onAcknowledge:ee},null,8,["context","page"]),Gs(Vm,{ref_key:"modal_delete",ref:_,context:e.context,page:wa(S),onDelete_alert:ee},null,8,["context","page"]),Gs(th,{ref_key:"modal_acknowledge_alerts",ref:p,context:e.context,page:wa(S),onAcknowledge_alerts:ee},null,8,["context","page"]),Gs(gh,{ref_key:"modal_delete_alerts",ref:f,context:e.context,page:wa(S),onDelete_alerts:ee},null,8,["context","page"]),Gs(Rm,{alert:w.value,page:wa(S),onExclude:Q,ref_key:"modal_alerts_filter",ref:u},null,8,["alert","page"])],64))},__file:"http_src/vue/page-alert-stats.vue"};const Yh={class:"row"},Zh={class:"col-12"},Xh={class:"mb-2"},Qh={class:"w-100"},eg={clas:"range-container d-flex flex-wrap"},tg={class:"range-picker d-flex m-auto flex-wrap"},ag={class:"ms-1 me-2"},lg=["value"],ng=["label"],sg=["value"],og=["title"],ig=[Hs("i",{class:"fas fa-lg fa-link"},null,-1)],rg=["title","href"],cg=[Hs("i",{class:"fas fa-lg fa-file"},null,-1)],ug=["title"],dg=[Hs("i",{class:"fas fa-lg fa-download"},null,-1)],_g=["title"],pg=[Hs("i",{class:"fas fa-lg fa-camera-retro"},null,-1)],fg={class:"col-12"},vg={class:"card card-shadow"},mg={class:"card-body"},hg={class:"row"},gg={key:0,class:"col-12 mb-2",id:"chart-vue"},bg=["title"],yg=["onClick","title"],wg={key:0,class:"card-footer"},xg={key:0,id:"dt-btn-acknowledge",disabled:!0,"data-bs-target":"#dt-acknowledge-modal","data-bs-toggle":"modal",class:"btn btn-primary me-1"},kg=Hs("i",{class:"fas fa fa-user-check"},null,-1),$g={key:1,id:"dt-btn-delete",disabled:!0,"data-bs-target":"#dt-delete-modal","data-bs-toggle":"modal",class:"btn btn-danger"},Sg=Hs("i",{class:"fas fa fa-trash"},null,-1);var Cg={__name:"page-flow-historical",props:{context:Object},setup(e){const t=e,l=e=>i18n(e),n=ma(null),s=ma(null),o=ma(null),i=ma(null),r=ma(null),c=ma(null),u=ma(null),d=ma(null),_=ma(null),p=ma(null),f=ma(null),m=t.context.ifid,g=ma(""),w=ma(""),k=ko((()=>{if(null==U.value?.value)return w.value;return`${w.value}_${U.value.value}`})),S=ko((()=>{if(q.value<0)throw"never run";const e=t.context.download.endpoint;let a=x.get_url_object(),l=o.value.get_columns_defs().filter((e=>e.visible)).map((e=>e.id)).join(",");a.format="txt",a.visible_columns=l;const n=x.obj_to_url_params(a);return`${location.origin}/${e}?${n}`}));let N=`${http_prefix}/lua/pro/rest/v2/get/db/ts.lua`;const A=ko((()=>"topk-timeseries"==t.context?.chart_type?"height:450px!important":"height:300px!important")),E=ko((()=>"topk-timeseries"==t.context?.chart_type?L.typeChart.TS_STACKED:L.typeChart.TS_COLUMN)),T=ma([]),P=ma([]),U=ma({}),I=ma([]);ma([]);const O=ma(!1),M=ma(!1),j=ma(l("datatable.aggregated")),R=ma(null),D=ma(!1),q=ma(0);function z(e){let t=e?.chart;return null!=t&&t.length>0?t[0]:{}}_n((async()=>{!function(){g.value=x.get_url_entry("page"),null==g.value&&(g.value="overview");N=`${http_prefix}/lua/pro/rest/v2/get/db/ts.lua`,U.value={value:x.get_url_entry("query_preset")},null==U.value.value&&(U.value.value="");w.value="flow_historical";"true"==x.get_url_entry("aggregated")&&(w.value="flow_historical_aggregated",M.value=!0,R.value="hour",D.value=!0)}(),function(){null==x.get_url_entry("ifid")&&x.set_key_to_url("ifid",m);if(0==M.value)b.check_and_set_default_time_interval();else{const e=e=>{let t=b.get_timeframe_from_timeframe_id(R.value);return e.epoch_end-e.epoch_begin<t},t=b.check_and_set_default_time_interval(R.value,e);null!=t&&(t.epoch_begin=b.round_time_by_timeframe_id(t.epoch_begin,R.value),t.epoch_end=b.round_time_by_timeframe_id(t.epoch_end,R.value),x.set_key_to_url("epoch_begin",t.epoch_begin),x.set_key_to_url("epoch_end",t.epoch_end))}"flow"==x.get_url_entry("page")&&"engaged"==x.get_url_entry("status")&&x.set_key_to_url("status","historical");null==x.get_url_entry("aggregated")&&x.set_key_to_url("aggregated","false")}(),await async function(){let e=`${http_prefix}/lua/pro/rest/v2/get/db/preset/consts.lua?page=${g.value}&aggregated=${M.value}`,t=await b.http_request(e);I.value=t[0].list.map((e=>{let t=z(e);return{value:e.id,name:e.name,count:t?.params?.count,chart_config:t,builtin:!0}})),t.length>1&&t[1].list.forEach((e=>{let t=z(e),a={value:e.id,name:e.name,count:t?.params?.count,chart_config:t,is_preset:!0};I.value.push(a)}));if(null==U.value||""==U.value.value)U.value=I.value[0];else{let e=I.value.find((e=>e.value==U.value.value));U.value=e||I.value[0]}x.set_key_to_url("query_preset",U.value.value),x.set_key_to_url("count",U.value.count),h.ready(pe())}(),O.value=!0})),pn((async()=>{!async function(){await h.on_ready("range_picker"),t.context.show_chart&&s.value.register_status();y.on_status_change(g.value,(e=>{x.get_url_params(),o.value.refresh_table(),G(),q.value+=1}),!1)}(),G()}));const B=async e=>{await h.on_ready(pe());let t=U.value.chart_config?.unit_measure;return null==t&&(t="number"),e.yaxis.labels.formatter=v.getFormatter(t),e};function V(){0==M.value?x.delete_params(["aggregated"]):x.set_key_to_url("aggregated","true"),x.reload_url()}async function G(e){1==t.context.show_cards&&(T.value=await W("overview"))}async function W(e,t){const a=x.get_url_params(),l=`${http_prefix}/lua/pro/rest/v2/get/flow/top.lua?${a}&action=${e}`;return(await b.http_request(l)).map((t=>({id:t.action||t.name,label:t.label,title:t.tooltip,show_spinner:!1,data_loaded:"overview"!=e,options:t.value})))}const K=(e,t)=>a=>{!async function(e,t){if(e.show_spinner=!0,await Ya(),0==e.data_loaded){let a=await W(e.id);e.options=a.find((t=>t.id==e.id)).options,await Ya(),P.value[t].load_menu()}e.show_spinner=!1}(e,t)};function J(){$(`#${k.value}`).on("click","a.tag-filter",(async function(e){Z(e,$(this))}))}const Y=async e=>{await h.on_ready(pe());const l=(e,t,a)=>void 0!==t&&0!=t.value?`<a class='tag-filter' data-tag-key='${e}' data-tag-value='${t.value}' title='${t.title}' href='javascript:void(0)'>${t.label}</a>`:"",n=(e,t,l)=>null==t||0==t?"":`<a class='tag-filter' data-tag-key='${e}' data-tag-value='${t}' href='javascript:void(0)'>${a.msecToTime(t)}</a>`;let s={first_seen:(e,t)=>{if(void 0!==e)return e.time},l7proto:(e,t)=>{let a="";if(void 0!==e.confidence){const t=e.confidence;a="DPI"==t?`<span class="badge bg-success" title="${t}">${t}</span>`:`<span class="badge bg-warning" title="${t}">${t}</span>`}return F.filterize("l7proto",e.value,e.label)+" "+`${a}`},asn:(e,t)=>l("asn",e),cli_asn:(e,t)=>l("cli_asn",e),srv_asn:(e,t)=>l("srv_asn",e),flow_risk:(e,t)=>{if(null==e)return"";let a=[];for(let t=0;t<e.length;t++){const l=e[t],n=l.label||l.value,s=l.help;a.push(`${n} ${s}`)}return a.join(", ")},cli_nw_latency:(e,t)=>n("cli_nw_latency",e),srv_nw_latency:(e,t)=>n("srv_nw_latency",e),info:(e,t)=>null==e?"":`<a class='tag-filter' data-tag-key='info' data-tag-value='${e.title}' title='${e.title}' href='javascript:void(0)'>${e.label}</a>`};return e=e.filter((e=>0!=t.context?.visible_columns[e.data_field])),U.value.is_preset&&e.length>0&&(e=[e[0]].concat(t.context.columns_def)),e.forEach((e=>{if(e.render_func=s[e.data_field],"actions"==e.id){const a={info:t.context.actions.show_info,historical_data:t.context.actions.show_historical,flow_alerts:t.context.actions.show_alerts,pcap_download:t.context.actions.show_pcap_download,row_data:t.context.is_enterprise_xl&&M.value};e.button_def_array.forEach((e=>{null!=a[e.id]&&0==a[e.id]&&e.class.push("link-disabled")}))}})),e},Z=(e,t)=>{let a,l;e.stopPropagation();let n="eq";null!=t.data("tagKey")&&(a=t.data("tagKey")),null!=t.data("tagRealvalue")?l=t.data("tagRealvalue"):null!=t.data("tagValue")&&(l=t.data("tagValue")),null!=t.data("tagOperator")&&(n=t.data("tagOperator")),X({id:a,value:l,operator:n})};function X(e){c.value.is_filter_defined(e)?ntopng_events_manager.emit_custom_event(C.SHOW_MODAL_FILTERS,e):(x.set_key_to_url("query_preset",""),x.set_key_to_url(e.id,`${e.value};${e.operator}`),x.reload_url())}const Q=()=>x.get_url_object();function ee(e){x.set_key_to_url("page",e.page_name),x.reload_url()}function te(){const e=$(u.value),t=document.createElement("input");t.value=location.href,document.body.appendChild(t),t.select(),document.execCommand("copy"),document.body.removeChild(t),e.attr("title",`${l("copied")}!`).tooltip("dispose").tooltip().tooltip("show")}function le(){i.value.show()}function ne(){r.value.show()}async function se(e){e.csrf=t.context.csrf;let a=`${http_prefix}/lua/pro/rest/v2/add/alert/exclusion.lua`;try{let t={"Content-Type":"application/json"};await b.http_request(a,{method:"post",headers:t,body:JSON.stringify(e)});x.get_url_params();setTimeout((()=>{ntopng_events_manager.emit_custom_event(C.SHOW_GLOBAL_ALERT_INFO,{text_html:l("check_exclusion.disable_warn"),type:"alert-info",timeout:2})}),1e3)}catch(e){console.error(e)}}function oe(e){let t=o.value,a=s.value;setTimeout((()=>{e||t.refresh_table(),a.update_chart()}),1e3)}function ie(e){let t={click_button_info:re,click_button_flow_alerts:de,click_button_historical_flows:ue,click_button_pcap_download:ce,click_button_flows:_e};null!=t[e.event_id]&&t[e.event_id](e)}function re(e){const t=e.row,a=`${http_prefix}/lua/pro/db_flow_details.lua?row_id=${t.rowid}&tstamp=${t.tstamp}&instance_name=${t.NTOPNG_INSTANCE_NAME}`;window.open(a,"_blank")}function ce(e){const t=e.row,a={epoch_begin:t?.filter?.epoch_begin,epoch_end:t?.filter?.epoch_end};i.value.show(t?.filter?.bpf,a)}function ue(e){const t=e.row;let a={};for(let e in t){let l=e;if(null!=t[e].tag_key&&""!=t[e].tag_key&&(l=t[e].tag_key),null==t[e].value&&""!=t[e].value)continue;let n=`${t[e].value};eq`;a[l]=n}x.set_key_to_url("query_preset",""),x.add_obj_to_url(a),x.reload_url()}function de(e){const t=e.row;t.alerts_url&&x.go_to_url(t.alerts_url)}function _e(e){const t=e.row,a=t.filter.epoch_begin,l=t.filter.epoch_end,n=t.flow.cli_ip.value,s=t.flow.srv_ip.value,o=t.flow.srv_port,i=t.probe_ip.value,r=t.NTOPNG_INSTANCE_NAME,c=t.vlan_id.value;let u=0!=c;const d=t.output_snmp.value;let _=0!=d;const p=t.input_snmp.value;let f=`${http_prefix}/lua/pro/db_search.lua?aggregated=false&epoch_begin=${a}&epoch_end=${l}&cli_ip=${n};eq&srv_ip=${s};eq&srv_port=${o};eq&probe_ip=${i};eq&instance_name=${r}`;u&&(f+=`&vlan_id=${c};eq`),0!=p&&(f+=`&input_snmp=${p};eq`),_&&(f+=`&output_snmp=${d};eq`),x.go_to_url(f)}function pe(){return"page-flow-historical_query_presets"}return(a,v)=>(Us(),Ls(Cs,null,[Gs(s_,{id:"navbar",main_title:e.context.navbar.main_title,base_url:e.context.navbar.base_url,help_link:e.context.navbar.help_link,items_table:e.context.navbar.items_table,onClick_item:ee},null,8,["main_title","base_url","help_link","items_table"]),Hs("div",Yh,[Hs("div",Zh,[Hs("div",Xh,[Hs("div",Qh,[Hs("div",eg,[Hs("div",tg,[Gs(C_,{id:"alert_info",global:!0,ref_key:"alert_info",ref:n},null,512),O.value?(Us(),Rs(Kp,{key:0,ref_key:"range_picker",ref:c,id:"range_picker",min_time_interval_id:R.value,round_time:D.value},{begin:hl((()=>[t.context.is_enterprise_xl?(Us(),Rs(Sf,{key:0,value:M.value,"onUpdate:value":v[0]||(v[0]=e=>M.value=e),class:"me-2 mt-1",change_label_side:!0,label:j.value,style:{},onChange_value:V},null,8,["value","label"])):Zs("v-if",!0),Hs("div",ag,[xn(Hs("select",{class:"me-2 form-select",style:{"min-width":"8rem"},"onUpdate:modelValue":v[1]||(v[1]=e=>U.value=e),onChange:v[2]||(v[2]=e=>(x.get_url_params(),x.set_key_to_url("query_preset",U.value.value),x.set_key_to_url("count",U.value.count),void x.reload_url()))},[(Us(!0),Ls(Cs,null,Tn(I.value,(e=>(Us(),Ls(Cs,null,[1==e.builtin?(Us(),Ls("option",{key:0,value:e},ae(e.name),9,lg)):Zs("v-if",!0)],64)))),256)),"analysis"!=g.value?(Us(),Ls("optgroup",{key:0,label:l("queries.queries")},[(Us(!0),Ls(Cs,null,Tn(I.value,(e=>(Us(),Ls(Cs,null,[e.builtin?Zs("v-if",!0):(Us(),Ls("option",{key:0,value:e},ae(e.name),9,sg))],64)))),256))],8,ng)):Zs("v-if",!0)],544),[[Fi,U.value]])])])),extra_range_buttons:hl((()=>[e.context.show_permalink?(Us(),Ls("button",{key:0,class:"btn btn-link btn-sm",onClick:te,title:l("graphs.get_permanent_link"),ref_key:"permanent_link_button",ref:u},ig,8,og)):Zs("v-if",!0),e.context.show_download?(Us(),Ls("a",{key:1,class:"btn btn-link btn-sm",title:l("graphs.download_records"),href:S.value},cg,8,rg)):Zs("v-if",!0),e.context.show_pcap_download?(Us(),Ls("button",{key:2,class:"btn btn-link btn-sm",onClick:le,title:l("traffic_recording.pcap_download")},dg,8,ug)):Zs("v-if",!0),e.context.is_ntop_enterprise_m?(Us(),Ls("button",{key:3,class:"btn btn-link btn-sm",onClick:ne,title:l("datatable.manage_snapshots")},pg,8,_g)):Zs("v-if",!0)])),_:1},8,["min_time_interval_id","round_time"])):Zs("v-if",!0)])])])])]),Hs("div",fg,[Hs("div",vg,[Hs("div",mg,[Hs("div",hg,[e.context.show_chart?(Us(),Ls("div",gg,[Hs("div",{class:"card overflow-hidden",style:H(A.value)},[Zs(' <div class="card h-300 overflow-hidden"> '),Gs(A_,{ref_key:"chart",ref:s,id:"chart_0",chart_type:E.value,base_url_request:wa(N),map_chart_options:B,register_on_status_change:!1,min_time_interval_id:R.value,round_time:D.value},null,8,["chart_type","base_url_request","min_time_interval_id","round_time"])],4)])):Zs("v-if",!0),Gs(rv,{ref_key:"table_flows",ref:o,table_id:k.value,table_config_id:w.value,csrf:e.context.csrf,f_map_columns:Y,get_extra_params_obj:Q,onLoaded:J,onCustom_event:ie},{custom_header:hl((()=>[(Us(!0),Ls(Cs,null,Tn(T.value,((e,t)=>(Us(),Rs(Fd,{f_on_open:K(e,t),ref_for:!0,ref:e=>{P.value[t]=e}},{title:hl((()=>[Gs(cv,{show:e.show_spinner,size:"1rem",class:"me-1"},null,8,["show"]),Hs("a",{class:"ntopng-truncate",title:e.title},ae(e.label),9,bg)])),menu:hl((()=>[(Us(!0),Ls(Cs,null,Tn(e.options,(e=>(Us(),Ls("a",{style:{cursor:"pointer",display:"block"},onClick:t=>function(e,t){t.stopPropagation(),X({id:e.key,value:e.value,operator:e.operator})}(e,t),class:"ntopng-truncate tag-filter",title:e.value},ae(e.label),9,yg)))),256))])),_:2},1032,["f_on_open"])))),256)),Zs(" Dropdown columns ")])),_:1},8,["table_id","table_config_id","csrf"])])]),Zs(" card body "),t.context.show_acknowledge_all||t.context.show_delete_all?(Us(),Ls("div",wg,[t.context.show_acknowledge_all?(Us(),Ls("button",xg,[kg,Js(" Acknowledge Alerts ")])):Zs("v-if",!0),t.context.show_delete_all?(Us(),Ls("button",$g,[Sg,Js(" Delete Alerts ")])):Zs("v-if",!0)])):Zs("v-if",!0),Zs(" card footer ")]),Zs(" card-shadow ")]),Zs(" div col ")]),Zs(" div row "),Gs(pv,{id:"modal_traffic_extraction",ref_key:"modal_traffic_extraction",ref:i},null,512),Gs(sm,{ref_key:"modal_snapshot",ref:r,csrf:e.context.csrf},null,8,["csrf"]),Gs(Bm,{ref_key:"modal_acknowledge",ref:_,context:e.context,onAcknowledge:oe},null,8,["context"]),Gs(Vm,{ref_key:"modal_delete",ref:p,context:e.context,onDelete_alert:oe},null,8,["context"]),Gs(Rm,{alert:f.value,page:g.value,onExclude:se,ref_key:"modal_alerts_filter",ref:d},null,8,["alert","page"])],64))},__file:"http_src/vue/page-flow-historical.vue"},Ng={components:{},props:{id:String,chart_type:String,register_on_status_change:Boolean,base_url_request:String,get_params_url_request:Function,get_custom_chart_options:Function,disable_pointer_events:Boolean},emits:["apply","hidden","showed","chart_reloaded","zoom"],created(){},beforeUnmount(){},data:()=>({chart:null,chart_options:null,from_zoom:!1,timeseries_visibility:null,timeseries_list:[]}),async mounted(){await this.init(),ntopng_sync.ready(this.$props.id)},methods:{init:async function(){let e=ntopng_status_manager.get_status(),t=this.get_url_request(e);this.register_on_status_change&&this.register_status(e),await this.draw_chart(t)},get_image:function(e){return Dygraph.Export.asPNG(this.chart,e,this.$refs.chart)},change_visibility:function(e,t){null!=this.timeseries_list[t]&&(this.timeseries_list[t].checked=e,this.chart.setVisibility(t,e))},register_status:function(e){let t=this.get_url_request(e);ntopng_status_manager.on_status_change(this.id,(e=>{1==this.from_zoom&&(this.from_zoom=!1);let a=this.get_url_request(e);a!=t?(t=a,this.update_chart(a)):t=a}),!1)},get_url_request:function(e){let t;return null!=this.$props.get_params_url_request?(null==e&&(e=ntopng_status_manager.get_status()),t=this.$props.get_params_url_request(e)):t=ntopng_url_manager.get_url_params(),`${this.$props.base_url_request||""}?${t}`},get_chart_options:async function(e){let t=null;const a=await ntopng_utility.get_date_format(!1,this.$props.csrf,http_prefix);return t=null==this.$props.get_custom_chart_options?await ntopng_utility.http_request(e):await this.$props.get_custom_chart_options(e),t.axes.x.axisLabelFormatter=function(e){return ntopng_utility.from_utc_to_server_date_format(e,a)},t.axes.x.valueFormatter=function(e){return ntopng_utility.from_utc_to_server_date_format(e,a)},t.axes.x.axisLabelWidth=90,this.$emit("chart_reloaded",t),t},draw_chart:async function(e){let t=await this.get_chart_options(e);const a=t.data||[];t.data=null,t.zoomCallback=this.on_zoomed,this.timeseries_list=[];let l=0;for(const e in t.series)this.timeseries_list.push({name:e,checked:!0,id:l,color:t.colors[l]+"!important"}),l+=1;this.chart=new Dygraph(this.$refs.chart,a,t)},update_chart:async function(e){let t=await this.get_chart_options(e);this.chart.updateChart(t)},update_chart_options:function(e){this.chart.updateChart(e)},update_chart_series:function(e){null!=e&&this.chart.updateOptions({file:e})},on_zoomed:function(e,t){this.from_zoom=!0;const a=moment(e),l=moment(t);let n={epoch_begin:Number.parseInt(a.unix()),epoch_end:Number.parseInt(l.unix())};ntopng_events_manager.emit_event(ntopng_events.EPOCH_CHANGE,n,this.id),this.$emit("zoom",n)}}};const Ag={style:{width:"100% height:380px"},class:"text-end mb-2"},Eg={class:"form-check-label form-control-sm"},Tg=["onClick","checked"],Pg={key:0,class:"mb-3",style:{width:"100%","pointer-events":"none"},ref:"chart"},Ug={key:1,class:"mb-3",style:{width:"100%"},ref:"chart"};Ng.render=function(e,t,a,l,n,s){return Us(),Ls(Cs,null,[Hs("div",Ag,[(Us(!0),Ls(Cs,null,Tn(n.timeseries_list,((e,t)=>(Us(),Ls("label",Eg,[Hs("input",{type:"checkbox",class:"form-check-input align-middle mt-0",onClick:a=>s.change_visibility(!e.checked,t),checked:e.checked,style:H([{"border-color":"#0d6efd"},{backgroundColor:e.color}])},null,12,Tg),Js(" "+ae(e.name),1)])))),256))]),1==a.disable_pointer_events?(Us(),Ls("div",Pg,null,512)):(Us(),Ls("div",Ug,null,512))],64)},Ng.__file="http_src/vue/timeseries-chart.vue";const Ig=e=>(fl("data-v-185590b6"),e=e(),vl(),e),Og={class:"form-group ms-2 me-2 mt-3 row"},Mg={class:"col-11"},jg={class:"col-form-label"},Lg=[Ig((()=>Hs("button",{type:"button",class:"btn border"},[Hs("span",null,[Hs("i",{class:"fas fa-trash"})])],-1)))],Rg={class:"container"},Dg={class:"row custom-ms me-2 mt-1"},Fg={class:"col-5"},qg=["onUpdate:modelValue"],zg={class:"custom-control-label ms-1 form-check-label"},Bg={class:"col-2"},Vg=["onUpdate:modelValue"],Hg=Ig((()=>Hs("label",{class:"custom-control-label ms-1 form-check-label"},"Past ",-1))),Gg={class:"col-2"},Wg=["onUpdate:modelValue"],Kg=Ig((()=>Hs("label",{class:"custom-control-label ms-1 form-check-label"},"Avg ",-1))),Jg={class:"col-3"},Yg=["onUpdate:modelValue"],Zg=Ig((()=>Hs("label",{class:"custom-control-label ms-1 form-check-label"},"95th Perc ",-1)));var Xg={__name:"list-timeseries",props:{id:String,timeseries:Array,title:String,show_delete_button:Boolean},emits:["delete_ts","update:timeseries"],setup(e,{emit:t}){const a=e;function l(){t("update:timeseries",a.timeseries)}function n(){t("delete_ts",a.id)}return(t,a)=>(Us(),Ls("div",null,[Hs("div",Og,[Hs("div",Mg,[Hs("label",jg,[Hs("b",null,ae(e.title),1)])]),e.show_delete_button?(Us(),Ls("div",{key:0,class:"col-1",onClick:n},Lg)):Zs("v-if",!0)]),Hs("div",Rg,[(Us(!0),Ls(Cs,null,Tn(e.timeseries,(e=>(Us(),Ls("div",Dg,[Hs("div",Fg,[xn(Hs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:l,"onUpdate:modelValue":t=>e.raw=t},null,40,qg),[[Li,e.raw]]),Hs("label",zg,ae(e.label),1)]),Hs("div",Bg,[xn(Hs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:l,"onUpdate:modelValue":t=>e.past=t},null,40,Vg),[[Li,e.past]]),Hg]),Hs("div",Gg,[xn(Hs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:l,"onUpdate:modelValue":t=>e.avg=t},null,40,Wg),[[Li,e.avg]]),Kg]),Hs("div",Jg,[xn(Hs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:l,"onUpdate:modelValue":t=>e.perc_95=t},null,40,Yg),[[Li,e.perc_95]]),Zg])])))),256))])]))}};np("\n.custom-ms[data-v-185590b6] {\n  margin-left: 2rem !important;\n}\n.inline-block[data-v-185590b6] {\n    display: inline-block;\n    margin-right: 1rem;\n}\n.border[data-v-185590b6] {\n    border-style: solid !important;\n}\n"),Xg.__scopeId="data-v-185590b6",Xg.__file="http_src/vue/list-timeseries.vue";const Qg=v.getFormatter(v.types.bytes.id),eb="page-stats-action-link",tb="page-stats-action-jump-historical",ab={table_value:"interface",title:i18n("page_stats.top.top_applications"),view:"top_protocols",default_sorting_columns:1,default:!0,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("application"),name:"application",data:"protocol",handlerId:eb,render:function(e,t,a){let l=this,n={handlerId:eb,onClick:function(){let e=`top:${a.ts_schema}`;l.add_metric_from_metric_schema(e,a.ts_query)}};return D.createLinkCallback({text:e.label,handler:n})}},{columnName:i18n("traffic"),name:"traffic",className:"text-end",data:"traffic",orderable:!0,render:e=>a.bytesToSize(e)},{columnName:i18n("percentage"),name:"traffic_perc",className:"text-center",data:"percentage",orderable:!1,render:e=>{const t=e.toFixed(1);return a.createProgressBar(t)}},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:tb,render_if:function(e){return e.is_history_enabled},render:function(e,t,a){let l=this;const n={handlerId:tb,onClick:function(){let e=x.serialize_param("l7proto",`${a.protocol.id};eq`),t=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}&${e}`,n=l.source_type,s=l.source_array,o="",i=n.source_def_array.map(((e,t)=>{let a=s[t];return"ifid"==e.value?x.serialize_param("ifid",a.value):"host"==e.value?x.serialize_param("ip",`${a.value};eq`):void 0}));o=i.join("&"),t=`${t}&${o}`,window.open(t)}};return D.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:n}])}}]},lb={table_value:"interface",title:i18n("page_stats.top.top_categories"),view:"top_categories",default_sorting_columns:2,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("category"),name:"category",data:"category",handlerId:eb,render:function(e,t,a){let l=this,n={handlerId:eb,onClick:function(){let e=`top:${a.ts_schema}`;l.add_metric_from_metric_schema(e,a.ts_query)}};return D.createLinkCallback({text:e.label,handler:n})}},{columnName:i18n("traffic"),name:"traffic",className:"text-end",data:"traffic",orderable:!0,render:e=>Qg(e)},{columnName:i18n("percentage"),name:"traffic_perc",className:"text-center",data:"percentage",render:e=>{const t=e.toFixed(1);return a.createProgressBar(t)}},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:tb,render_if:function(e){return e.is_history_enabled},render:function(e,t,a){let l=this;const n={handlerId:tb,onClick:function(){let e=x.serialize_param("l7cat",`${a.category.id};eq`),t=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}&${e}`,n=l.source_type,s=l.source_array,o="",i=n.source_def_array.map(((e,t)=>{let a=s[t];return"ifid"==e.value?x.serialize_param("ifid",a.value):"host"==e.value?x.serialize_param("ip",`${a.value};eq`):void 0}));o=i.join("&"),t=`${t}&${o}`,window.open(t)}};return D.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:n}])}}]},nb=[ab,lb,{table_value:"interface",title:i18n("page_stats.top.top_senders"),view:"top_senders",default_sorting_columns:1,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("page_stats.top.host_name"),name:"host_name",data:"host",handlerId:eb,render:function(e,t,a){let l=this,n=e.label,s="",o={handlerId:eb,onClick:async function(){l.add_ts_group_from_source_value_dict("host",a.tags,"host:traffic")}};return l.sources_types_enabled.host&&e.is_local&&(n=D.createLinkCallback({text:e.label,handler:o})),e.is_available&&(s=` <a href="/lua/host_details.lua?host=${e.id}" data-bs-toggle="tooltip" title=""><i class="fas fa-laptop"></i></a>`),`${n}${s}`}},{columnName:i18n("page_stats.top.sent"),name:"sent",className:"text-end",data:"traffic",orderable:!0,render:e=>Qg(e)},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:tb,render_if:function(e){return e.is_history_enabled},render:function(e,t,a){let l=this;const n=a.host.id,s=a.host.is_local,o={handlerId:tb,onClick:function(){let e=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}`,t="",n=[];for(let e in a.tags){let t=a.tags[e],l="";"ifid"==e?l=x.serialize_param(e,t):"host"==e&&(l=x.serialize_param("ip",`${t};eq`)),n.push(l)}t=n.join("&"),e=`${e}&${t}`,window.open(e)}},i={handlerId:tb,onClick:function(){const e=x.get_url_entry("ifid"),t=`${http_prefix}/lua/host_details.lua?host=${n}&page=historical&ts_query=ifid:${e},host:${n}&ts_schema=host:details&epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}`;window.open(t)}},r=[{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:o}];return l.sources_types_enabled.host&&s&&r.push({class:"dropdown-item",href:"#",title:i18n("db_explorer.host_data"),handler:i}),D.createActionButtons(r)}}]},{table_value:"interface",title:i18n("page_stats.top.top_receivers"),view:"top_receivers",default_sorting_columns:1,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("page_stats.top.host_name"),name:"host_name",data:"host",handlerId:eb,render:function(e,t,a){let l=this,n=e.label,s="",o={handlerId:eb,onClick:async function(){l.add_ts_group_from_source_value_dict("host",a.tags,"host:traffic")}};return l.sources_types_enabled.host&&e.is_local&&(n=D.createLinkCallback({text:e.label,handler:o})),e.is_available&&(s=` <a href="/lua/host_details.lua?host=${e.id}" data-bs-toggle="tooltip" title=""><i class="fas fa-laptop"></i></a>`),`${n}${s}`}},{columnName:i18n("page_stats.top.received"),name:"received",className:"text-end",data:"traffic",orderable:!0,render:e=>Qg(e)},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:tb,render_if:function(e){return e.is_history_enabled},render:function(e,t,a){let l=this;const n=a.host.id,s=a.host.is_local,o={handlerId:tb,onClick:function(){let e=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}`,t="",n=[];for(let e in a.tags){let t=a.tags[e],l="";"ifid"==e?l=x.serialize_param(e,t):"host"==e&&(l=x.serialize_param("ip",`${t};eq`)),n.push(l)}t=n.join("&"),e=`${e}&${t}`,window.open(e)}},i={handlerId:tb,onClick:function(){const e=x.get_url_entry("ifid"),t=`${http_prefix}/lua/host_details.lua?host=${n}&page=historical&ts_query=ifid:${e},host:${n}&ts_schema=host:details&epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}`;window.open(t)}},r=[{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:o}];return l.sources_types_enabled.host&&s&&r.push({class:"dropdown-item",href:"#",title:i18n("db_explorer.host_data"),handler:i}),D.createActionButtons(r)}}]}];let sb=nb.find((e=>"top_protocols"==e.view));null!=sb&&(sb=b.clone(sb),sb.table_value="host");const ob=[sb],ib=v.getFormatter(v.types.bytes.id),rb=v.getFormatter(v.types.bps.id),cb="page-stats-action-link",ub={table_value:"snmp",table_source_def_value_dict:{ifid:!0,device:!0,if_index:!1},title:i18n("page_stats.top.top_interfaces"),view:"top_snmp_ifaces",default_sorting_columns:4,columnDefs:[{type:"file-size",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3}],f_get_label:e=>{let t,a=e.source_type.source_def_array;for(let l=0;l<a.length;l+=1)if("device"==a[l].value){t=e.source_array[l].label;break}return`${i18n("page_stats.top.top_interfaces")} - SNMP ${i18n("page_stats.source_def.device")} ${t}`},default:!0,columns:[{columnName:i18n("interface_name"),name:"interface",data:"interface",handlerId:cb,render:function(e,t,a){let l=this,n={handlerId:cb,onClick:function(){l.add_ts_group_from_source_value_dict("snmp_interface",a.tags,"snmp_if:traffic")}},s=`${e.name}`;return D.createLinkCallback({text:s,handler:n})}},{columnName:i18n("interface_alias"),name:"interface",data:"interface",handlerId:cb,render:function(e){return`${e.alias}`}},{columnName:i18n("page_stats.top.sent"),name:"sent",className:"text-end",data:"sent",orderable:!0,render:e=>ib(e)},{columnName:i18n("page_stats.top.received"),name:"received",className:"text-end",data:"rcvd",orderable:!0,render:e=>ib(e)},{columnName:i18n("traffic"),name:"traffic",className:"text-end",data:"total",orderable:!0,render:e=>ib(e)},{columnName:i18n("downlink_usage"),name:"traffic_perc",className:"text-center no-wrap",data:"downlink_usage_percentage",render:e=>{const t=e.toFixed(1);return a.createProgressBar(t)}},{columnName:i18n("uplink_usage"),name:"traffic_perc",className:"text-center no-wrap",data:"uplink_usage_percentage",render:e=>{const t=e.toFixed(1);return a.createProgressBar(t)}},{columnName:i18n("page_stats.top.throughput"),name:"throughput",className:"text-end",data:"throughput",orderable:!0,render:e=>rb(e)}]},db=[ub],_b=v.getFormatter(v.types.bytes.id),pb=v.getFormatter(v.types.bps.id),fb="page-stats-action-link",vb={table_value:"flowdevice",table_source_def_value_dict:{ifid:!0,device:!0,if_index:!1},title:i18n("page_stats.top.top_interfaces"),view:"top_flowdev_ifaces",default_sorting_columns:4,columnDefs:[{type:"file-size",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3}],f_get_label:e=>{let t,a=e.source_type.source_def_array;for(let l=0;l<a.length;l+=1)if("device"==a[l].value){t=e.source_array[l].label;break}return`${i18n("page_stats.top.top_interfaces")} - Flow Exporter ${t}`},default:!0,columns:[{columnName:i18n("interface_name"),name:"interface",data:"interface",handlerId:fb,render:function(e,t,a){let l=this,n={handlerId:fb,onClick:function(){l.add_ts_group_from_source_value_dict("flow_interface",a.tags,"flowdev_port:traffic")}},s=`${e.label}`;return D.createLinkCallback({text:s,handler:n})}},{columnName:i18n("page_stats.top.sent"),name:"sent",className:"text-end",data:"sent",orderable:!0,render:e=>_b(e)},{columnName:i18n("page_stats.top.received"),name:"received",className:"text-end",data:"rcvd",orderable:!0,render:e=>_b(e)},{columnName:i18n("traffic"),name:"traffic",className:"text-end",data:"total",orderable:!0,render:e=>_b(e)},{columnName:i18n("percentage"),name:"traffic_perc",className:"text-center",data:"percentage",render:e=>{const t=e.toFixed(1);return a.createProgressBar(t)}},{columnName:i18n("page_stats.top.throughput"),name:"throughput",className:"text-end",data:"throughput",orderable:!0,render:e=>pb(e)}]},mb=[vb],hb={hide:"hide",select:"select",input:"input"},gb={ifid:e=>{let t=e.ifname;return null!=e.name&&(t=e.name),{label:t,value:e.ifid}},pool:e=>{let t=e.pool_id;return null!=e.name&&(t=e.name),{label:t,value:e.pool_id}},am_host:e=>({label:`${e.label} ${e.measurement}`,value:`${e.host},metric:${e.measurement_key}`}),blacklist:e=>{let t=`${e.column_name}`;return{label:t,value:t}},device:e=>({label:`${e.name}`,value:`${e.ip}`}),if_index:e=>""},bb={interface:nb,host:ob,snmp_interface:db,snmp_device:db,flow_device:mb,flow_interface:mb},yb=[{id:"interface",regex_page_url:"lua/if_stats",label:i18n("page_stats.source_def.interface"),query:"iface",f_map_ts_options:null,source_def_array:[{main_source_def:!0,label:i18n("page_stats.source_def.interface"),regex_type:null,sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",sources_function:null,value:"ifid",value_url:null,value_map_sources_res:null,disable_tskey:null,f_get_value_url:null,f_set_value_url:null,ui_type:hb.select}]},{id:"blacklist",regex_page_url:"lua/blacklists_stats",label:i18n("page_stats.source_def.blacklist"),query:"blacklist",f_map_ts_options:(e,t)=>(null==e.series||e.series.forEach((e=>{null!=t.metric.query?e.name=t.metric.label:(e.name=e.name.replaceAll("_"," "),e.type=void 0)})),e),source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"System",value:-1}],value:"ifid",ui_type:hb.hide}]},{id:"vulnerability_scan",regex_page_url:"lua/vulnerability_scan",label:i18n("page_stats.source_def.vuln_scan"),query:"am_vuln_scan",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"System",value:-1}],value:"ifid",ui_type:hb.hide}]},{id:"host",regex_page_url:"lua/host_details",label:i18n("page_stats.source_def.host"),table_value:"host",query:"host",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:hb.select},{main_source_def:!0,label:i18n("page_stats.source_def.host"),regex_type:"ip",value:"host",ui_type:hb.input}]},{id:"mac",regex_page_url:"lua/mac_details",label:i18n("page_stats.source_def.mac"),query:"mac",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:hb.select},{main_source_def:!0,label:i18n("page_stats.source_def.mac"),regex_type:"macAddress",value:"mac",value_url:"host",ui_type:hb.input}]},{id:"network",regex_page_url:"lua/network_details",label:i18n("page_stats.source_def.network"),query:"subnet",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:hb.select},{main_source_def:!0,label:i18n("page_stats.source_def.network"),regex_type:"text",value:"subnet",ui_type:hb.input}]},{id:"as",regex_page_url:"lua/as_details",label:i18n("page_stats.source_def.as"),query:"asn",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:hb.select},{main_source_def:!0,label:i18n("page_stats.source_def.as"),regex_type:"text",value:"asn",ui_type:hb.input}]},{id:"country",regex_page_url:"lua/country_details",label:i18n("page_stats.source_def.country"),query:"country",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:hb.select},{main_source_def:!0,label:i18n("page_stats.source_def.country"),regex_type:"text",value:"country",ui_type:hb.input}]},{id:"os",regex_page_url:"lua/os_details",label:i18n("page_stats.source_def.os"),query:"os",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:hb.select},{main_source_def:!0,label:i18n("page_stats.source_def.os"),regex_type:"text",value:"os",ui_type:hb.input}]},{id:"vlan",regex_page_url:"lua/vlan_details",label:i18n("page_stats.source_def.vlan"),query:"vlan",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:hb.select},{main_source_def:!0,label:i18n("page_stats.source_def.vlan"),regex_type:"text",value:"vlan",ui_type:hb.input}]},{id:"pool",regex_page_url:"lua/pool_details",label:i18n("page_stats.source_def.pool"),query:"host_pool",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:hb.select},{main_source_def:!0,label:i18n("page_stats.source_def.pool"),sources_url:"lua/rest/v2/get/host/pools.lua",value:"pool",ui_type:hb.select}]},{id:"system",regex_page_url:"lua/system_stats",label:i18n("page_stats.source_def.system"),query:"system",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"System",value:-1}],value:"ifid",ui_type:hb.hide}]},{id:"profile",regex_page_url:"lua/profile_details",label:i18n("page_stats.source_def.profile"),query:"profile",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:hb.select},{main_source_def:!0,label:i18n("page_stats.source_def.profile"),regex_type:"text",value:"profile",ui_type:hb.input}]},{id:"redis",regex_page_url:"lua/monitor/redis_monitor.lua",label:i18n("page_stats.source_def.redis"),query:"redis",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"Redis",value:-1}],value:"ifid",ui_type:hb.hide}]},{id:"influx",regex_page_url:"lua/monitor/influxdb_monitor.lua",label:i18n("page_stats.source_def.influx"),query:"influxdb",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"Influx",value:-1}],value:"ifid",ui_type:hb.hide}]},{id:"active_monitoring",regex_page_url:"lua/monitor/active_monitoring_monitor.lua",label:i18n("page_stats.source_def.active_monitoring"),query:"am",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"",value:-1}],value:"ifid",ui_type:hb.hide},{main_source_def:!0,label:i18n("page_stats.source_def.active_monitoring"),sources_url:"lua/rest/v2/get/am_host/list.lua",value:"host",disable_tskey:!0,value_map_sources_res:"am_host",ui_type:hb.select}]},{id:"snmp_interface",id_group:"snmp",regex_page_url:"lua/pro/enterprise/snmp_interface_details",label:i18n("page_stats.source_def.snmp_interface"),query:"snmp_interface",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"",value:-1}],value:"ifid",ui_type:hb.hide},{label:i18n("page_stats.source_def.device"),regex_type:"ip",sources_url:"lua/pro/rest/v2/get/snmp/device/list.lua",value:"device",value_url:"host",ui_type:hb.input},{main_source_def:!0,label:i18n("page_stats.source_def.snmp_interface"),regex_type:"text",value:"if_index",value_url:"snmp_port_idx",ui_type:hb.input}]},{id:"snmp_device",id_group:"snmp",regex_page_url:"lua/pro/enterprise/snmp_device_details",label:i18n("page_stats.source_def.snmp_device"),query:"snmp_device",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"",value:-1}],value:"ifid",ui_type:hb.hide},{main_source_def:!0,label:i18n("page_stats.source_def.device"),regex_type:"ip",sources_url:"lua/pro/rest/v2/get/snmp/device/list.lua",value:"device",value_url:"host",ui_type:hb.input}]},{id:"flow_device",regex_page_url:"lua/pro/enterprise/flowdevices_stats",label:i18n("page_stats.source_def.flow_device"),query:"flowdev",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:hb.select},{main_source_def:!0,label:i18n("page_stats.source_def.device"),sources_url:"lua/pro/rest/v2/get/flowdevices/list.lua",regex_type:"ip",value:"device",value_url:"ip",ui_type:hb.input}]},{id:"flow_interface",regex_page_url:"lua/pro/enterprise/flowdevice_interface_details",label:i18n("page_stats.source_def.flow_interface"),query:"flowdev_port",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:hb.select},{label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:hb.input},{main_source_def:!0,label:i18n("page_stats.source_def.port"),regex_type:"port",value:"port",value_url:"snmp_port_idx",ui_type:hb.input}]},{id:"sflow_device",regex_page_url:"lua/pro/enterprise/sflowdevices_stats",label:i18n("page_stats.source_def.sflow_device"),query:"sflowdev",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:hb.select},{main_source_def:!0,label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:hb.input}]},{id:"sflow_interface",regex_page_url:"lua/pro/enterprise/sflowdevice_interface_details",label:i18n("page_stats.source_def.sflow_interface"),query:"sflowdev_port",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:hb.select},{label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:hb.input},{main_source_def:!0,label:i18n("page_stats.source_def.port"),regex_type:"port",value:"port",value_url:"snmp_port_idx",ui_type:hb.input}]},{id:"observation_point",regex_page_url:"lua/pro/enterprise/observation_points",label:i18n("page_stats.source_def.observation_point"),query:"obs_point",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:hb.select},{main_source_def:!0,label:i18n("page_stats.source_def.observation_point"),regex_type:"text",value:"obs_point",value_url:"observation_point",ui_type:hb.input}]},{id:"pod",regex_page_url:"lua/pod_details",label:i18n("page_stats.source_def.pod"),query:"pod",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:hb.select},{main_source_def:!0,label:i18n("page_stats.source_def.pod"),regex_type:"text",value:"pod",ui_type:hb.input}]},{id:"container",regex_page_url:"lua/container_details",label:i18n("page_stats.source_def.container"),query:"container",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:hb.select},{main_source_def:!0,label:i18n("page_stats.source_def.container"),regex_type:"text",value:"container",ui_type:hb.input}]},{id:"nedge",regex_page_url:"lua/pro/nedge/if_stats.lua",label:i18n("page_stats.source_def.nedge"),query:"nedge",source_def_array:[{label:i18n("page_stats.source_def.interface"),regex_type:"text",value:"ifid",value_url:"ifname",ui_type:hb.input}]}],wb={ui_types:hb,sources_url_el_to_source:gb,sources_types:yb,sources_types_tables:bb},xb=e=>{let t=[];e.forEach((e=>{let a=function(e){let t=[];e.timeseries.forEach((e=>{t.push(`${e.id}=${e.raw}:${e.past}:${e.avg}:${e.perc_95}`)}));let a=e.metric.schema;null!=e.metric.query&&(a=`${a}+${e.metric.query}`);let l=t.join("|"),n=e.source_array.map((e=>e.value)).join("+"),s=`${e.source_type.id};${n};${a};${l}`;return s}(e);t.push(a)}));let a=t.join(";;");x.set_key_to_url("timeseries_groups",a)};const kb=(e,t,a)=>{let l=Cb(e,t,a),n=[];for(let e in a.timeseries){let t=a.timeseries[e];n.push({id:e,label:t.label,raw:!0,past:!1,avg:!1,perc_95:!1})}return{id:l,source_type:e,source_array:t,metric:a,timeseries:n}},$b=async(e,t,a)=>{let l=Fb(),n=await Tb(e,l),s=await Db(e,l,n),o=Bb(s,t,a);return[kb(l,n,o)]};async function Sb(e){let t=e.split(";"),a=t[0],l=t[1].split("+"),n=t[2].split("+");n.length<2&&n.push(null);let s=t[3],o=Eb(a),i=await Ub(http_prefix,o,l),r=await qb(http_prefix,o,i,n[0],n[1]),c=function(e,t){let a=e.split("|"),l=/(.+)=(.+):(.+):(.+):(.+)/,n=[];return a.forEach((e=>{let a=l.exec(e);if(a.length>0){let e=a[1],l=t.timeseries[e].label,s=JSON.parse(a[2]),o=JSON.parse(a[3]),i=JSON.parse(a[4]),r=JSON.parse(a[5]);n.push({id:e,label:l,raw:s,past:o,avg:i,perc_95:r})}})),n}(s,r);return{id:Cb(o,i,r),source_type:o,source_array:i,metric:r,timeseries:c}}const Cb=(e,t,a,l,n)=>{let s="";null!=a&&(s=a.schema,null!=a.query&&(s=`${s} - ${a.query}`));let o=e.source_def_array,i=t.map(((e,t)=>{let a=o[t].value;return null==l||l[a]?e.value:null})).filter((e=>null!=e)).join("_"),r=e.id;return n&&null!=e.id_group&&(r=e.id_group),`${r} - ${i} - ${s}`};const Nb=wb.sources_url_el_to_source,Ab=wb.sources_types,Eb=e=>Ab.find((t=>t.id==e)),Tb=async(e,t)=>{let a=jb(t);return await Ub(e,t,a)};async function Pb(e,t,a){let l=t.source_def_array.map((e=>a[e.value]));return await Ub(e,t,l)}const Ub=async(e,t,a)=>{null==t&&(t=Fb());let l,n=[];for(let s=0;s<a.length;s++){let o=a[s],i=t.source_def_array[s];if(i.sources_url||i.sources_function){let a=[];a=i.sources_url?await Ob(e,t.id,i):await i.sources_function(),l=a.find((e=>e.value==o)),null==l&&(l=a[0])}else l={label:o,value:o};n.push(l)}return n};let Ib={};const Ob=async(e,t,l)=>{let n=`${t}_${l.value}`;if(null==Ib[n])if(l.sources_url){let t=`${e}/${l.sources_url}`;Ib[n]=b.http_request(t)}else{if(!l.sources_function)return[];Ib[n]=l.sources_function()}let s=await Ib[n];if(l.sources_url){let e=Nb[l.value_map_sources_res];if(null==e&&(e=Nb[l.value]),null==e)throw`:Error: metrics-manager.js, missing sources_url_to_source ${l.value} key`;s=s.map((t=>e(t)))}return s.sort(a.sortAlphabetically)};function Mb(e,t){e.source_def_array.forEach((e=>{let a=t[e.value];null!=a&&(null!=e.f_set_value_url?e.f_set_value_url():null!=e.value_url?x.set_key_to_url(e.value_url,a):x.set_key_to_url(e.value,a))}))}const jb=e=>(null==e&&(e=Fb()),e.source_def_array.map((e=>{if(null!=e.f_get_value_url)return e.f_get_value_url();let t=e.value_url;return null==t&&(t=e.value),x.get_url_entry(t)})));let Lb={},Rb=null;const Db=async(e,t,a,l)=>{let n=l?.epoch_begin||x.get_url_entry("epoch_begin"),s=l?.epoch_end||x.get_url_entry("epoch_end"),o=`${n}_${s}`;null==t&&(t=Fb()),null==a&&(a=await Tb(e,t));let i=function(e,t,a,l){let n=t.source_def_array.map(((e,t)=>`${e.value}=${a[t].value}`)).join("&"),s="";return null!=l&&(s=`epoch_end=${l.epoch_end}&epoch_begin=${l.epoch_begin}`),`${e}/lua/rest/v2/get/timeseries/type/consts.lua?query=${t.query}&${n}&${s}`}(e,t,a,{epoch_begin:n,epoch_end:s}),r=function(e,t){let a=t.map((e=>e.value)).join("_");return`${e.id}_${a}`}(t,a);o!=Rb&&(Lb[r]=null,Rb=o),null==Lb[r]&&(Lb[r]=b.http_request(i));let c=await Lb[r];return null==c||0==c.length?[{}]:(0==c.some((e=>1==e.default_visible))&&(c[0].default_visible=!0),b.clone(c))},Fb=()=>{let e=window.location.pathname;for(let t=0;t<Ab.length;t+=1){if(1==new RegExp(Ab[t].regex_page_url).test(e))return Ab[t]}throw`source_type not found for ${e}`},qb=async(e,t,a,l,n,s)=>(await Db(e,t,a,s)).find((e=>e.schema==l&&e.query==n)),zb=(e,t)=>{null==t&&(t=Fb());let a={};t.source_def_array.forEach((e=>a[e.value]=!0));let l=e.split(",");for(let e=0;e<l.length;e+=1){let t=l[e].split(":")[0];if(null==a[t])return l[e]}return null},Bb=(e,t,a)=>{let l;return null!=t&&(l=e.find((e=>e.schema==t&&(null==a||e.query==a)))),null==l&&(l=e.find((e=>1==e.default_visible))),null!=l?l:e[0]},Vb={set_timeseries_groups_in_url:xb,get_timeseries_groups_from_url:async(e,t)=>{if(null==t&&(t=x.get_url_entry("timeseries_groups")),null==t||""==t)return null;let a=t.split(";;");return a.map((async e=>await Sb(e))),Promise.all(a.map((async e=>await Sb(e))))},get_default_timeseries_groups:$b,get_ts_group:kb,get_ts_group_id:Cb,sources_types:Ab,sources_types_tables:wb.sources_types_tables,get_source_type_from_id:Eb,get_current_page_source_type:Fb,get_sources:Ob,get_default_source_array:Tb,get_source_array_from_value_dict:Pb,get_source_array_from_value_array:Ub,get_default_source_value_array:jb,get_metrics:Db,get_metric_from_schema:qb,get_metric_query_from_ts_query:zb,get_default_metric:Bb,set_source_value_object_in_url:Mb,ui_types:wb.ui_types};Dygraph.Plugins.Legend.prototype.select=function(e){var t=e.selectedX,a=e.selectedPoints,l=e.selectedRow,n=e.dygraph.getOption("legend");if("never"!==n){var s=Dygraph.Plugins.Legend.generateLegendHTML(e.dygraph,t,a,this.one_em_width_,l);if(s instanceof Node&&s.nodeType===Node.DOCUMENT_FRAGMENT_NODE?(this.legend_div_.innerHTML="",this.legend_div_.appendChild(s)):this.legend_div_.innerHTML=s,this.legend_div_.style.display="","follow"===n){var o,i=e.dygraph.plotter_.area,r=this.legend_div_.offsetWidth,c=e.dygraph.getOptionForAxis("axisLabelWidth","y"),u=e.dygraph.getHighlightSeries();u?(o=a.find((e=>e.name===u)),o||(o=a[0])):o=a[0];const t=e.dygraph.getNumericOption("legendFollowOffsetX");var d=(o?.x?o.x:1)*i.w+t;d+r+1>i.w&&(d=d-2*t-r-(c-i.x)),this.legend_div_.style.left=c+d+"px",document.addEventListener("mousemove",(e=>{localStorage.setItem("timeseries-mouse-top-position",e.clientY+50+"px")})),this.legend_div_.style.top=localStorage.getItem("timeseries-mouse-top-position")}else if("onmouseover"===n&&this.is_generated_div_){i=e.dygraph.plotter_.area,r=this.legend_div_.offsetWidth;this.legend_div_.style.left=i.x+i.w-r-1+"px",this.legend_div_.style.top=i.y+"px"}}else this.legend_div_.style.display="none"};const Hb=["rgb(144, 238, 144)","rgb(25, 135, 84)","rgb(255, 193, 7)","rgb(220, 53, 69)"];function Gb(e,t,a){if(!t||!e)return function(e){const t=Dygraph.toRGB_(e);return t.r=Math.floor((255+t.r)/2),t.g=Math.floor((255+t.g)/2),t.b=Math.floor((255+t.b)/2),"rgb("+t.r+","+t.g+","+t.b+", 0.9)"}(a);const l=t/Hb.length;for(let t=1;t<Hb.length+1;t++)if(e<=l*t)return Hb[t-1]}function Wb(e){const t=e.drawingContext,a=e.points,l=e.dygraph.toDomYCoord(0),n=e.dygraph.user_attrs_.valueRange[1],s=e.color;let o=1/0;for(let e=1;e<a.length;e++){const t=a[e].canvasx-a[e-1].canvasx;t<o&&(o=t)}const i=Math.floor(.95*o);for(var r=0;r<a.length;r++){const e=a[r],o=e.canvasx,c=e.yval;t.fillStyle=Gb(c,n,s),t.fillRect(o-i/2,e.canvasy,i,l-e.canvasy),t.strokeRect(o-i/2,e.canvasy,i,l-e.canvasy)}}const Kb={barChartPlotter:Wb};function Jb(e){let t={};e.forEach(((e,a)=>{null==t[e]?t[e]=[a]:t[e].push(a)}));let a=b.clone(e);for(let e in t){let l=t[e];Yb(e,l.length).forEach(((e,t)=>{let n=l[t];a[n]=e}))}return a}function Yb(e,t){return[...Array(t).keys()].map(((a,l)=>function(e,t,a){let l=e.replace("#",""),n=parseInt(l.substring(0,2),16),s=parseInt(l.substring(2,4),16),o=parseInt(l.substring(4,6),16),i=Zb(n,t,a),r=Zb(s,t,a),c=Zb(o,t,a);return function(e,t,a){return"#"+Xb(e)+Xb(t)+Xb(a)}(i,r,c)}(e,l+1,t)))}function Zb(e,t,a){if(a<=1)return e;let l=Math.trunc(e/2),n=Math.trunc(e+(255-e)/2);return l+t*Math.trunc((n-l)/a)}function Xb(e){let t=e.toString(16);return 1==t.length?"0"+t:t}const Qb={transformColors:Jb};function ey(e){return{axisLabelFormatter:e,valueFormatter:function(t,a,l,n,s,o){const i=n.rawData_[s][o];let r="";return"object"==typeof i?(i.forEach((t=>{r=`${r} / ${e(t||0)}`})),r=r.substring(3)):r=e(t),r},axisLabelWidth:80}}function ty(e){const t=Qb.transformColors(e.colors),a=function(){let e="rgb(255, 255, 255)";return document.getElementsByClassName("body dark").length>0&&(e="rgb(13, 17, 23)"),e}(),l={labelsSeparateLines:!0,legend:"follow",connectSeparatedPoints:!0,includeZero:!0,drawPoints:!0,highlightSeriesBackgroundAlpha:.7,highlightSeriesOpts:{strokeWidth:2,pointSize:3,highlightCircleSize:6},axisLabelFontSize:12,axes:{x:{}}};return l.customBars=e.customBars,l.labels=e.labels,l.series=e.properties,l.data=e.serie,l.stackedGraph=e.stacked,l.valueRange=e.value_range,l.highlightSeriesBackgroundColor=a,l.colors=t,e.plotter&&(l.plotter=e.plotter),function(e,t){t.formatters.length>1?(e.axes.y1=ey(v.getFormatter(t.formatters[0])),e.axes.y2=ey(v.getFormatter(t.formatters[1]))):1==t.formatters.length&&(e.axes.y=ey(v.getFormatter(t.formatters[0])))}(l,e),l}function ay(e){switch(e){case"point":return{fillGraph:!1,customBars:!1,strokeWidth:0,pointSize:2};case"bounds":return{fillGraph:!1,strokeWidth:1,pointSize:1.5,fillAlpha:.5};case"line":return{fillGraph:!1,customBars:!1,strokeWidth:1.5,pointSize:1.5};default:return{fillGraph:!0,customBars:!1,strokeWidth:1,pointSize:1.5,fillAlpha:.5}}}const ly={buildChartOptions:ty,formatSerieProperties:ay},ny=["#C6D9FD","#90EE90","#EE8434","#C95D63","#AE8799","#717EC3","#496DDB","#5A7ADE","#6986E1","#7791E4","#839BE6","#8EA4E8"],sy={"95_perc":"#8EA4E8",avg:"#839BE6"};function oy(e){return`${e.id}`}function iy(e,t,a,l){null==e&&(e=t);let n="";if(null!=e&&(n=`${e}`),0==l)return e;let s=0,o=a.source_type.source_def_array;for(let e=0;e<o.length;e+=1){if(1==o[e].main_source_def){s=e;break}}return`${`${a.source_array[s].label}`} - ${n}`}function ry(e){if("bar"===e)return Kb.barChartPlotter}function cy(e,t,a,l){l.labels.push(e),l.properties[e]={},l.properties[e]=ly.formatSerieProperties(t),l.colors.push(a)}function uy(e,t,a,l,n,s,o,i){const r=t.statistics.average,c=t.statistics["95th_percentile"];let u=o;for(let t=0;t<l.length;t++){const o=l[t];if(e.serie[u]||(e.serie[u]=[{value:new Date(1e3*u),name:"Time"}]),null!==o?e.serie[u].push({value:o*n,name:i.serie_name}):e.serie[u].push({value:NaN,name:i.serie_name}),1==a?.avg&&e.serie[u].push({value:r*n,name:i.avg_name}),1==a?.perc_95&&e.serie[u].push({value:c*n,name:i.perc_name}),1==a?.past)for(const a in past_serie){const l=past_serie[a]?.series[j]?.data[t];l?e.serie[u].push({value:l*n,name:i.past_name}):e.serie[u].push({value:NaN,name:i.past_label})}u+=s}}function dy(e,t,a){const l=e.metric.chart_type||"filled",n=t.series||[],s=t.metadata.epoch_begin,o=t.metadata.epoch_step,{serie:i,color:r,formatter:c,serie_name:u,properties:d}=function(e,t){let a={},l=null,n=null,s={};return e.forEach(((e,o)=>{const i=oy(e),r=e.data||[],c=t.metric.timeseries[i],u=!0===c.invert_direction?1:-1;"metric"==c.type&&(n=iy(c.label,i,t,!0),s=ly.formatSerieProperties("bounds"),a={color:c.color,palette:0},l=t.metric.measure_unit);for(let e=0;e<r.length;e++){let t=null===t?NaN:r[e];null==r[e]&&(r[e]=[0,NaN,0]),"lower_bound"==c.type?r[e][0]=t*u:"metric"==c.type?r[e][1]=t*u:"upper_bound"==c.type&&(r[e][2]=t*u)}})),{serie:[],color:a,formatter:l,serie_name:n,properties:s}}(n,e);let _=s;const p=`${u} ${i18n("lower_value_upper")}`,f=a.formatters.find((e=>e==c));f||a.formatters.push(c),a.plotter=ry(l),a.customBars=!0,a.colors.push(r),a.labels.push(p),a.properties[p]=d,Object.keys(i).forEach((e=>{a.serie[_]||(a.serie[_]=[{value:new Date(1e3*_),name:"Time"},{value:i[e],name:p}]),_+=o}))}function _y(e,t,a,l){if(null!=e.source_type.f_map_ts_options){t=(0,e.source_type.f_map_ts_options)(t,e)}1==(e.metric.bounds||!1)?dy(e,t,l):function(e,t,a,l){const n=t.series||[],s=e.metric.chart_type||"filled",o=t.metadata.epoch_begin,i=t.metadata.epoch_step,r=e.metric.measure_unit,c=e.metric.max_value||null,u=e.metric.min_value||null;a.value_range=[u,c],a.plotter=ry(s),a.stacked||(a.stacked=e.metric.draw_stacked||!1),n.forEach(((t,n)=>{const c=t.data||[],u=e.timeseries[n],d=oy(t),_=e.metric.timeseries[d],p=!0===_.invert_direction?-1:1,f=function(e,t){let a=1==t.use_serie_name?e.name:t.label;return e.ext_label&&(a=e.ext_label),a}(t,_),v=iy(f,d,e,a.use_full_name),m=iy(f+" Avg",d,e,a.use_full_name),h=iy(f+" 95th Perc",d,e,a.use_full_name),g=iy(f+" "+l+" Ago",d,e,a.use_full_name);if(_.hidden)return;const b=a.formatters.find((e=>e==r));b||a.formatters.push(r),cy(v,s,{color:_.color,palette:0},a),1==u?.avg&&cy(m,"point",{color:sy.avg,palette:1},a),1==u?.perc_95&&cy(h,"point",{color:sy.perc_95,palette:1},a),1==u?.past&&cy(g,"line",{color:sy.past,palette:1},a),uy(a,t,u,c,p,i,o,{serie_name:v,avg_name:m,perc_name:h,past_name:g})}))}(e,t,l,a)}function py(e,t,a,l){const n={serie:[],formatters:[],labels:["Time"],colors:[],properties:[],stacked:!1,customBars:!1,use_full_name:null!=l&&l};return e.forEach(((e,l)=>{_y(t[l],e,a,n)})),function(e){const t=[];Object.keys(e.serie).forEach(((a,l)=>{t[l]=[],e.labels.forEach((n=>{let s=!1;for(let o=0;o<e.serie[a].length;o++)if(e.serie[a][o].name==n){t[l].push(e.serie[a][o].value),s=!0;break}0==s&&t[l].push(null)}))})),e.serie=t}(n),function(e){let t=e,a=0,l=0,n=ny,s=d3v7.schemeCategory10;t.forEach(((t,o)=>{0==t.palette?(e.find(((e,a)=>e.color===t.color&&a!==o))?e[o]=n[a%n.length]:e[o]=t.color,a+=1):1==t.palette&&(e[o]=s[l%s.length],l+=1)}))}(n.colors),ly.buildChartOptions(n)}const fy={formatSerie:py,getSerieId:oy,getSerieName:iy};function vy(e){return fy.getSerieId(e)}function my(e,t,a,l){return fy.getSerieName(e,t,a,l)}const hy={"1_chart_x_metric":{value:"1_chart_x_metric",label:i18n("page_stats.layout_1_per_1")},"1_chart_x_yaxis":{value:"1_chart_x_yaxis",label:i18n("page_stats.layout_1_per_y")}};function gy(e){return hy[e]||null}function by(e,t,a,l){if(a.value==hy["1_chart_x_metric"].value)return yy(e,t,a,l);let n=function(e,t){let a=[],l=[],n=[],s=[];return t.forEach(((t,o)=>{1==t.metric.draw_stacked?(a.push(e[o]),l.push(t)):(n.push(e[o]),s.push(t))})),{stacked:{tsOptionsArray:a,tsGroupsArray:l},not_stacked:{tsOptionsArray:n,tsGroupsArray:s}}}(e,t);return[...yy(n.stacked.tsOptionsArray,n.stacked.tsGroupsArray,a,l),...yy(n.not_stacked.tsOptionsArray,n.not_stacked.tsGroupsArray,a,l)]}function yy(e,t,a,l){let n=!1;if(a.value==hy["1_chart_x_yaxis"].value){let a={};t.forEach(((t,l)=>{let n=`${(s=t.metric).measure_unit}_${s.scale}`;var s;let o={tsGroup:t,tsOptions:e[l]};null==a[n]?a[n]=[o]:a[n].push(o)})),n=t.length>1||t.length>0&&!0===t[0].source_type.display_full_name;let s=[];for(let e in a){let t=a[e],o=t.map((e=>e.tsOptions)),i=t.map((e=>e.tsGroup)),r=wy(o,i,l,n);s.push(r)}return s}if(a.value==hy["1_chart_x_metric"].value){n=e.length>1||t.length>0&&!0===t[0].source_type.display_full_name;let a=[];return e.forEach(((e,s)=>{let o=wy([e],[t[s]],l,n);a.push(o)})),a}return[]}function wy(e,t,a,l){return fy.formatSerie(e,t,a,l)}function xy(e,t,a){let l=e.source_type.source_def_array.map(((t,l)=>{if(null!=a&&!a[t.value])return null;let n=e.source_array[l].value;return`${t.value}:${n}`})).filter((e=>null!=e)).join(",");return t||null==e.metric.query||(l=`${l},${e.metric.query}`),l}function ky(e){let t=e.source_type.source_def_array;for(let e=0;e<t.length;e+=1){if(1==t[e].main_source_def)return e}return 0}async function $y(e,t,a,l,n){let s,o={epoch_begin:t.epoch_begin,epoch_end:t.epoch_end};if(n){let t={zoom:a,limit:180,version:4,ts_compare:a},n=`${e}/lua/pro/rest/v2/get/timeseries/ts_multi.lua`,i={ts_requests:l.map((e=>{let t=ky(e),a={ts_query:xy(e),ts_schema:`${e.metric.schema}`};return e.source_type.source_def_array[t].disable_tskey||(a.tskey=e.source_array[t].value),a})),...o,...t},r={"Content-Type":"application/json"};s=await b.http_request(n,{method:"post",headers:r,body:JSON.stringify(i)})}else{let t=`${e}/lua/rest/v2/get/timeseries/ts.lua`,n=`ts_compare=${a}&version=4&zoom=${a}&limit=180`,i=l[0],r=ky(i),c=xy(i),u={...o,ts_query:c,ts_schema:`${i.metric.schema}`};i.source_type.source_def_array[r].disable_tskey||(u.tskey=i.source_array[r].value);let d=`${t}?${x.add_obj_to_url(u,n)}`;s=[await b.http_request(d)]}return s}const Sy={groupsOptionsModesEnum:hy,tsArrayToOptions:wy,tsArrayToOptionsArray:by,getGroupOptionMode:gy,getSerieId:vy,getSerieName:my,getTsChartsOptions:$y,getTsQuery:xy,getMainSourceDefIndex:ky},Cy={class:"nav nav-tabs"},Ny={class:"form-group ms-2 me-2 mt-3 row"},Ay={class:"form-group row"},Ey={class:"col-form-label col-sm-4"},Ty={class:"col-sm-8"},Py={key:0,class:"form-group ms-2 me-2 mb-2 mt-3 row"},Uy={class:"form-group row"},Iy={class:"col-form-label col-sm-4"},Oy={class:"col-sm-8"},My=["title"],jy={key:0,class:"form-group mt-2 row"},Ly={class:"col-form-label col-sm-4"},Ry={class:"col-sm-8"},Dy={key:1,class:"form-group mt-2 row"},Fy={class:"col-form-label col-sm-4"},qy={class:"col-sm-8"},zy=["onUpdate:modelValue","pattern"],By={class:"form-group row mt-2",style:{"text-align":"end"}},Vy={class:"col-sm-12"},Hy=["disabled"],Gy={class:"form-group ms-2 me-2 mt-3 row"},Wy={class:"form-group row"},Ky={class:"col-form-label col-sm-4"},Jy={class:"col-sm-8"};var Yy={__name:"modal-timeseries",props:{sources_types_enabled:Object},emits:["apply"],setup(e,{expose:t,emit:a}){const l=e,n=ma(null),s=ma(null),o=ma("select");let i=Vb.get_current_page_source_type();const r=Vb.sources_types,c=ma(i),u=Vb.ui_types,d=ma([]),_=ma([]),p=ma([]),f=ma(""),v=ma([]),m=ma(!1),h=ko((()=>{if(0==m.value)return!1;for(let e=0;e<v.value.length;e+=1){let t=v.value[e];if(null==t)continue;let a=new RegExp(t),l=p.value[e];if(0==a.test(l))return!1}return!0})),g=ma(!1),y=ma([]),w=ma({}),x=ma([]),k=ma([]);let $=null;_n((()=>{r.forEach((e=>{l.sources_types_enabled[e.id]}))})),pn((async()=>{$=async function(){await C(),P()}()}));function S(e){o.value=e}async function C(){m.value=!1,function(){let e=c.value?.source_def_array.map((e=>e.regex_type));null==e&&(e=[]);v.value=e.map((e=>null==e?null:wp.get_data_pattern(e)))}(),function(){let e=c.value;g.value=e.source_def_array.map((e=>e.ui_type==u.hide)).every((e=>1==e))}(),await async function(){let e=c.value.source_def_array,t=[];for(let a=0;a<e.length;a+=1){let l=await Vb.get_sources(http_prefix,c.value.id,e[a]);t.push(l)}let a=await Vb.get_default_source_array(http_prefix,c.value);_.value=a,d.value=t,p.value=a.map((e=>e.value)),E()}(),await T()}async function N(){m.value=!1,p.value.forEach(((e,t)=>{if(c.value.source_def_array[t].ui_type==u.input){let a=_.value[t];a.value=e,a.label=e}})),await async function(){await T()}(),E()}function A(){m.value=!0}function E(){f.value=`${_.value.filter((e=>null!=e.label&&""!=e.label)).map((e=>e.label)).join(" - ")}`}async function T(){y.value=await Vb.get_metrics(http_prefix,c.value,_.value),y.value.sort(NtopUtils.sortAlphabetically),w.value=Vb.get_default_metric(y.value),P()}function P(e){k.value=[];let t=w.value.timeseries;for(let e in t)k.value.push({id:e,label:t[e].label,raw:!0,past:!1,avg:!1,perc_95:!1})}function U(e){let t=e.source_type.label,a=Sy.getMainSourceDefIndex(e);return`${t} - ${e.source_array[a].label} - ${e.metric.label}`}function I(e){let t,a,l;return null==e?(t=c.value,a=_.value,l=w.value):(t=e.source_type,a=e.source_array,l=e.metric),Vb.get_ts_group_id(t,a,l)}const O=e=>{x.value=x.value.filter((t=>I(t)!=e))},M=(e,t)=>{let l=x.value.findIndex((t=>t.id==e.id));l<0?x.value.push(e):x.value[l]=e,t&&a("apply",x.value)},j=()=>{if("add"==o.value){let e={id:I(),source_type:c.value,source_array:b.clone(_.value),metric:w.value,timeseries:b.clone(k.value)};M(e)}a("apply",x.value),L()},L=()=>{n.value.close()},R=e=>i18n(e);return t({show:async e=>{x.value=e,await $,o.value="select",n.value.show()},close:L,add_ts_group:M,set_timeseries_groups:(e,t)=>{x.value=e,t&&a("apply",x.value)}}),(e,t)=>(Us(),Rs(sp,{onShowed:t[10]||(t[10]=e=>{}),ref_key:"modal_id",ref:n},{title:hl((()=>[Js(ae(R("modal_timeseries.title")),1)])),body:hl((()=>[Hs("ul",Cy,[Hs("li",{class:"nav-item",onClick:t[0]||(t[0]=e=>S("add"))},[Hs("a",{class:J(["nav-link",{active:"add"==o.value}]),href:"#"},ae(R("modal_timeseries.add_timeseries")),3)]),Hs("li",{class:"nav-item",onClick:t[1]||(t[1]=e=>S("select"))},[Hs("a",{class:J(["nav-link",{active:"select"==o.value}]),href:"#"},ae(R("modal_timeseries.manage_timeseries")),3)])]),Zs(" action add "),"add"==o.value?(Us(),Ls(Cs,{key:0},[Zs(" Sources Types "),Hs("div",Ny,[Hs("div",Ay,[Hs("label",Ey,[Hs("b",null,ae(R("modal_timeseries.source_type")),1)]),Hs("div",Ty,[Gs(n_,{selected_option:c.value,"onUpdate:selected_option":t[2]||(t[2]=e=>c.value=e),onSelect_option:t[3]||(t[3]=e=>C()),options:wa(r)},null,8,["selected_option","options"])])])]),Zs(" Sources "),g.value?Zs("v-if",!0):(Us(),Ls("div",Py,[Hs("div",Uy,[Hs("label",Iy,[Hs("b",null,ae(R("modal_timeseries.source")),1)]),Hs("div",Oy,[xn(Hs("input",{class:"form-control","onUpdate:modelValue":t[4]||(t[4]=e=>f.value=e),title:f.value,style:{overflow:"hidden","text-overflow":"ellipsis","white-space":"nowrap"},type:"text",disabled:""},null,8,My),[[ji,f.value]])])]),(Us(!0),Ls(Cs,null,Tn(c.value.source_def_array,((e,a)=>(Us(),Ls(Cs,null,[Zs(" select "),e.ui_type==wa(u).select?(Us(),Ls("div",jy,[Hs("label",Ly,[Hs("b",null,ae(e.label),1)]),Hs("div",Ry,[Gs(n_,{selected_option:_.value[a],"onUpdate:selected_option":e=>_.value[a]=e,onSelect_option:t[5]||(t[5]=e=>A()),options:d.value[a]},null,8,["selected_option","onUpdate:selected_option","options"])])])):Zs("v-if",!0),Zs(" end select "),Zs(" input text "),e.ui_type==wa(u).input?(Us(),Ls("div",Dy,[Hs("label",Fy,[Hs("b",null,ae(e.label),1)]),Hs("div",qy,[xn(Hs("input",{class:"form-control",onInput:t[6]||(t[6]=e=>A()),"onUpdate:modelValue":e=>p.value[a]=e,pattern:v.value[a],required:"",type:"text",placeholder:""},null,40,zy),[[ji,p.value[a]]])])])):Zs("v-if",!0),Zs(" input text ")],64)))),256)),xn(Hs("div",By,[Hs("div",Vy,[Hs("button",{type:"button",onClick:N,disabled:0==h.value,class:"btn btn-primary"},ae(R("modal_timeseries.apply_source")),9,Hy)])],512),[[Zi,h.value]])])),Zs(" end Sources "),Zs(" Metrics "),Hs("div",Gy,[Hs("div",Wy,[Hs("label",Ky,[Hs("b",null,ae(R("modal_timeseries.metric")),1)]),Hs("div",Jy,[Gs(n_,{ref_key:"select_search_metrics",ref:s,onSelect_option:t[7]||(t[7]=e=>P()),selected_option:w.value,"onUpdate:selected_option":t[8]||(t[8]=e=>w.value=e),options:y.value},null,8,["selected_option","options"])])])]),Gs(Xg,{title:R("modal_timeseries.timeseries_list"),timeseries:k.value,"onUpdate:timeseries":t[9]||(t[9]=e=>k.value=e)},null,8,["title","timeseries"])],64)):Zs("v-if",!0),Zs(" action == add "),Zs(" action select"),"select"==o.value?(Us(),Ls(Cs,{key:1},[(Us(!0),Ls(Cs,null,Tn(x.value,(e=>(Us(),Rs(Xg,{id:I(e),title:U(e),timeseries:e.timeseries,"onUpdate:timeseries":t=>e.timeseries=t,show_delete_button:x.value.length>1,onDelete_ts:O},null,8,["id","title","timeseries","onUpdate:timeseries","show_delete_button"])))),256)),Zs(" v-for timeseries_groups_added ")],64)):Zs("v-if",!0),Zs(" action == select ")])),footer:hl((()=>[xn(Hs("button",{type:"button",onClick:j,class:"btn btn-primary"},ae(R("modal_timeseries.add")),513),[[Zi,"add"==o.value]]),xn(Hs("button",{type:"button",onClick:j,class:"btn btn-primary"},ae(R("modal_timeseries.apply")),513),[[Zi,"select"==o.value]])])),_:1},512))}};np("\ninput[data-v-103cd911]:invalid {\n  border-color: #ff0000;\n}\n.custom-margin[data-v-103cd911] {\nmargin-left: -0.4rem;\n}\n.warn[data-v-103cd911] {\nborder-color: #ffd500;\nborder-style: solid;\n}\n"),Yy.__scopeId="data-v-103cd911",Yy.__file="http_src/vue/modal-timeseries.vue";const Zy={class:"form-group mt-2 row"},Xy={class:"col-form-label col-sm-4"},Qy={class:"col-sm-6"},ew={class:"col-form-label col-sm-2"},tw=["disabled"];var aw={__name:"modal-download-file",props:{title:String,ext:String},emits:["download"],setup(e,{expose:t,emit:a}){const l=e,n=ma(null),s=ma(""),o=String.raw`^[a-zA-Z_\-1-9]*$`,i=ko((()=>new RegExp(o).test(s.value)));function r(){let e=`${s.value}.${l.ext}`;a("download",e),c()}const c=()=>{n.value.close()};t({show:e=>{null==e&&(e=""),e=e.replaceAll(/[^a-zA-Z0-9]/g,"_"),s.value=e,n.value.show()},close:c}),pn((()=>{}));const u=e=>i18n(e);return(e,t)=>(Us(),Rs(sp,{ref_key:"modal_id",ref:n},{title:hl((()=>[Js(ae(l.title),1)])),body:hl((()=>[Hs("div",Zy,[Hs("label",Xy,[Hs("b",null,ae(u("modal_download_file.filename"))+":",1)]),Hs("div",Qy,[xn(Hs("input",{class:"form-control",pattern:o,"onUpdate:modelValue":t[0]||(t[0]=e=>s.value=e),type:"text",required:""},null,512),[[ji,s.value]])]),Hs("label",ew," ."+ae(l.ext),1)])])),footer:hl((()=>[Hs("button",{type:"button",onClick:r,class:"btn btn-primary",disabled:0==i.value},ae(u("modal_download_file.download")),9,tw)])),_:1},512))}};np("\ninput[data-v-59120eb8]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-59120eb8] {\n  cursor: not-allowed;\n}\n"),aw.__scopeId="data-v-59120eb8",aw.__file="http_src/vue/modal-download-file.vue";const lw={key:0},nw={class:"text-center"},sw=Hs("tbody",null,null,-1);var ow={__name:"datatable",props:{id:String,table_buttons:Array,columns_config:Array,data_url:String,enable_search:Boolean,filter_buttons:{type:Array,required:!1},table_config:{type:Object,required:!1},base_url:String,base_params:Object},emits:["drawed"],setup(e,{expose:t,emit:a}){const l=e,n=oo(),s=Ao(),o=(e,t)=>{if((t||l.id)&&null!=e.dir){const a=[e.col,e.dir],n=`${t||l.id}_sorting_preferences`;localStorage.setItem(n,a)}},i=e=>{let t=null;if(e||l.id){const a=`${e||l.id}_sorting_preferences`,n=localStorage.getItem(a);if(n){const e=n.split(",");2==e.length&&(t=[Number(e[0]),e[1]])}}return t};let r=l.base_params;const c=ma(null),u=i()||[0,"asc"];let d=null;pn((()=>{!function(){let e=!1,t={serverSide:!1,scrollX:!1,destroy:!0,searching:l.enable_search,order:[u],pagingType:"full_numbers",columns:l.columns_config,autoWidth:!1,responsive:!0,ajax:{method:"get",url:l.data_url,dataSrc:"rsp",data:(e,t)=>{if(0==Object.keys(e).length)return;const a=t.oInstance.api(),l=e.order[0].column,n=a.column(l).name()||void 0;return e.order&&(e.order=e.order[0].dir,e.sort=n),void 0!==e.columns&&delete e.columns,void 0!==e.search&&(e.map_search=e.search.value,delete e.search),e},beforeSend:function(){NtopUtils.showOverlays()}},drawCallback:function(e){NtopUtils.hideOverlays(),a("drawed"),ntopng_events_manager.emit_custom_event(ntopng_custom_events.DATATABLE_LOADED),o(e.aLastSort[0])}};for(const e in l.table_config||{})t[e]=l.table_config[e];let n=DataTableUtils.getStdDatatableConfig(l.table_buttons);n=DataTableUtils.extendConfig(n,t),d=$(c.value).DataTable(n),p();for(const t of l.filter_buttons||[]){const a=x.get_url_entry(t.filterMenuKey);if(a&&""!=a){let l=0;t.filters.forEach((e=>{e.currently_active=!1,l+=1,e.id==a&&(e.currently_active=!0,l-=1)})),l==t.filters.length&&(x.set_key_to_url(t.filterMenuKey,""),e=!0)}new DataTableFiltersMenu({filterTitle:t.filterTitle,tableAPI:d,filters:t.filters,filterMenuKey:t.filterMenuKey,columnIndex:t.columnIndex,url:l.data_url,id:t.id,removeAllEntry:t.removeAllEntry,callbackFunction:t.callbackFunction}).init()}if(e&&l.base_params){const e=x.get_url_entries();for(const[t,a]of e)r[t]=a;d.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,r)),f()}}()}));let _=null;function p(){if(null==_&&(_=function(){if(null==d)return;let e=$(d.context[0].nTableWrapper);return $($(".row .text-end",e).children()[0])}()),null==s||null==s.menu)return;let e=s.menu();if(null==e||0==e.length)return;let t=s.menu()[0],a=$("<div class='d-inline-block'></div>")[0];const{vNode:l,el:o}=function(e,{props:t,children:a,element:l,app:n}={}){let s=l,o=Gs(e,t,a);return n&&n._context&&(o.appContext=n._context),s?nr(o,s):"undefined"!=typeof document&&nr(o,s=document.createElement("div")),{vNode:o,destroy:()=>{s&&nr(null,s),s=null,o=null},el:s}}(t,{app:n?.appContext?.app,element:a});let i=$(d.context[0].nTableWrapper);$($(".row .text-end",i).children()[0]).append(o)}const f=()=>{null!=d&&d.ajax.reload()},v=e=>{DataTableUtils.deleteButtonHandlers(e)};let m=!1;const h=()=>{d.clear(),d.destroy(!0),m=!0,l.columns_config.filter((e=>null!=e.handlerId)).forEach((e=>{v(e.handlerId)}))};return t({reload:f,delete_button_handlers:v,destroy_table:h,update_url:e=>{null!=d&&d.ajax.url(e)},refresh_menu:()=>{let e=$(d.context[0].nTableWrapper);$($(".row .text-end",e).children()[0]).html(""),p()},is_last_sorting_available:e=>null!=i(e),load_last_sort:i,save_last_sort:o,search_value:function(e){null!=d&&d.search(e).draw()}}),mn((()=>{1!=m&&h()})),(t,a)=>(Us(),Ls(Cs,null,[(Us(),Ls("div",lw,[Zs(' <slot name="menu"></slot> ')])),Hs("div",null,[Hs("table",{ref_key:"table_id",ref:c,class:"table w-100 table-striped table-hover table-bordered"},[Hs("thead",null,[Hs("tr",null,[(Us(!0),Ls(Cs,null,Tn(e.columns_config,(e=>(Us(),Ls("th",nw,ae(e.columnName),1)))),256))])]),sw],512)])],64))},__file:"http_src/vue/datatable.vue"};const iw={key:0,class:"table table-striped table-bordered col-sm-12",style:{}},rw=["innerHTML"],cw={class:""},uw=["innerHTML"],dw=["innerHTML"],_w={class:"table table-striped table-bordered"},pw=["innerHTML"],fw=["colspan","innerHTML"];var vw={__name:"bootstrap-table",props:{id:String,columns:Array,rows:Array,print_html_column:Function,print_html_row:Function,print_html_title:Function,horizontal:Boolean,wrap_columns:Boolean},setup:e=>(t,a)=>(Us(),Ls(Cs,null,[Zs(" Normal table "),e.horizontal&&0!=e.horizontal?(Us(),Ls(Cs,{key:1},[Zs(" Horizontal table, with th on the rows "),Hs("table",_w,[Hs("tbody",null,[(Us(!0),Ls(Cs,null,Tn(e.rows,(t=>(Us(),Ls("tr",null,[Hs("th",{class:"col 5",innerHTML:e.print_html_title(t.name)},null,8,pw),(Us(!0),Ls(Cs,null,Tn(t.values,(a=>(Us(),Ls("td",{colspan:[t.values.length<=1?2:1],innerHTML:e.print_html_row(a)},null,8,fw)))),256))])))),256))])])],2112)):(Us(),Ls("table",iw,[Hs("thead",null,[Hs("tr",null,[(Us(!0),Ls(Cs,null,Tn(e.columns,(t=>(Us(),Ls("th",{scope:"col",class:J(t.class),innerHTML:e.print_html_column(t)},null,10,rw)))),256))])]),Hs("tbody",null,[(Us(!0),Ls(Cs,null,Tn(e.rows,(t=>(Us(),Ls("tr",cw,[1==e.wrap_columns?(Us(!0),Ls(Cs,{key:0},Tn(e.columns,(a=>(Us(),Ls("td",{scope:"col",style:{height:"2.5rem"},class:J(a.class)},[Hs("div",{class:"wrap-column",style:H(a.style),innerHTML:e.print_html_row(a,t)},null,12,uw)],2)))),256)):(Us(!0),Ls(Cs,{key:1},Tn(e.columns,(a=>(Us(),Ls("td",{scope:"col",class:J([a.class,"wrap_column"]),style:H(a.style),innerHTML:e.print_html_row(a,t)},null,14,dw)))),256))])))),256))])]))],2112))};np("\n.wrap-column[data-v-0533335c] {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  max-width:100%;\n}\n"),vw.__scopeId="data-v-0533335c",vw.__file="http_src/vue/bootstrap-table.vue";const mw=e=>(fl("data-v-937058e4"),e=e(),vl(),e),hw={class:"col-12 mb-2 mt-2"},gw={class:"card h-100 overflow-hidden"},bw=["title"],yw=[mw((()=>Hs("i",{class:"fas fa-lg fa-camera-retro"},null,-1)))],ww=["title"],xw=[mw((()=>Hs("i",{class:"fas fa-lg fa-download"},null,-1)))],kw=["disabled","title"],$w=[mw((()=>Hs("i",{class:"fas fa-lg fa-file-image"},null,-1)))],Sw=["title"],Cw=[mw((()=>Hs("i",{class:"fas fa-lg fa-table"},null,-1)))],Nw={class:"form-group ms-1 me-1 mt-1"},Aw={class:"inline select2-size me-2 mt-2"},Ew={class:"inline select2-size me-2 mt-2"},Tw={key:0,class:"mt-4 card card-shadow"},Pw={class:"card-body"},Uw={key:1,class:"mt-4 card card-shadow"},Iw={class:"card-body"},Ow={key:0,class:"inline select2-size me-2 mt-2"},Mw="timeseries";var jw={__name:"page-stats",props:{csrf:String,is_ntop_pro:Boolean,source_value_object:Object,sources_types_enabled:Object,sources_types_top_enabled:Object,enable_snapshots:Boolean,is_history_enabled:Boolean,traffic_extraction_permitted:Boolean,is_dark_mode:Boolean},setup(e){const t=e,l=e=>i18n(e);let n="date_time_picker",s=ntopChartApex.typeChart.TS_LINE;ma({}),ma(!1);const o=ma([]),i=ma(null),r=ma(null),c=ma(null),u=ma(null),d=ma(null),_=/^((?!chrome|android).)*safari/i.test(navigator.userAgent),p=l(_?"page_stats.download_image_disabled":"page_stats.title_modal_download_file"),f=ma(null),m=ma([]),h=ma({});Vb.get_current_page_source_type();const g=ma(!1);ma(!1);const w=ma([]),k=b.object_to_array(Sy.groupsOptionsModesEnum),$=ma(function(){let e=x.get_url_entry("timeseries_groups_mode");if(null!=e&&""!=e)return Sy.getGroupOptionMode(e);return k[0]}());let S=null;const C={label:i18n("page_stats.custom_metrics"),currently_active:!1},N=ma(!1),A=[{value:"10_min",label:i18n("show_alerts.presets.10_min"),currently_active:!1},{value:"30_min",label:i18n("show_alerts.presets.30_min"),currently_active:!0},{value:"hour",label:i18n("show_alerts.presets.hour"),currently_active:!1},{value:"2_hours",label:i18n("show_alerts.presets.2_hours"),currently_active:!1},{value:"6_hours",label:i18n("show_alerts.presets.6_hours"),currently_active:!1},{value:"12_hours",label:i18n("show_alerts.presets.12_hours"),currently_active:!1},{value:"day",label:i18n("show_alerts.presets.day"),currently_active:!1},{value:"week",label:i18n("show_alerts.presets.week"),currently_active:!1},{value:"month",label:i18n("show_alerts.presets.month"),currently_active:!1},{value:"year",label:i18n("show_alerts.presets.year"),currently_active:!1},{value:"custom",label:i18n("show_alerts.presets.custom"),currently_active:!1,disabled:!0}];_n((async()=>{if("va_historical"==x.get_url_entry("page")){let e=[];Y.forEach((t=>{t.va&&e.push(t)})),Y=e}t.source_value_object.is_va&&(f.value="hour",b.check_and_set_default_time_interval("day")),function(){if(null==t.source_value_object)return;let e=Vb.get_current_page_source_type();Vb.set_source_value_object_in_url(e,t.source_value_object)}()})),pn((async()=>{!async function(){let e,t,a=!0,l=await Vb.get_timeseries_groups_from_url(http_prefix);if(null==l){a=!1,e=x.get_url_entry("ts_schema");let n=x.get_url_entry("ts_query");null!=n&&""!=n&&(t=Vb.get_metric_query_from_ts_query(n)),""==e&&(e=null),l=await Vb.get_default_timeseries_groups(http_prefix,e,t)}m.value=await E(a),h.value=1==a?C:Vb.get_default_metric(m.value,e,t);N.value=!0,await G(l,!0,!0)}(),await Promise.all([ntopng_sync.on_ready(n)])}));async function E(e,l){let n=await Vb.get_metrics(http_prefix);if(!l&&null==e)return n.value;if(e&&n.push(C),(null==q||l)&&(q=await async function(){if(!t.enable_snapshots)return;let e=`${http_prefix}/lua/pro/rest/v2/get/filters/snapshots.lua?page=${Mw}`,a=await b.http_request(e),l=b.object_to_array(a).map((e=>({...e,is_snapshot:!0,label:`${e.name}`,group:"Snapshots"})));return l}()),t.enable_snapshots){q.forEach((e=>n.push(e)))}return n.length>0&&n.sort(a.sortAlphabetically),n}async function T(e){let t=Vb.get_current_page_source_type(),a=await Vb.get_default_source_array(http_prefix,t);return[Vb.get_ts_group(t,a,e)]}const P=async(e,t,a)=>{let l=Vb.get_source_type_from_id(e),n=await Vb.get_source_array_from_value_dict(http_prefix,l,t),s=await Vb.get_metric_from_schema(http_prefix,l,n,a);I(Vb.get_ts_group(l,n,s))},U=async(e,t)=>{let a=m.value.find((a=>a.schema==e&&a.query==t));null!=a?I((await T(a))[0]):console.error(`metric = ${e}, query = ${t} not found.`)};function I(e){c.value.set_timeseries_groups(S),c.value.add_ts_group(e,!0)}async function O(e){if(1==e.is_snapshot){let t=e.filters,a=x.get_url_entry("timeseries_groups",t),l=await Vb.get_timeseries_groups_from_url(http_prefix,a);$.value=Sy.getGroupOptionMode(x.get_url_entry("timeseries_groups_mode",t)),await G(l,!0,!1)}else await async function(){let e=await async function(){return T(h.value)}();await G(e,!0,!1)}(),B(!1)}function M(e){let a=h.value.label==C.label;G(S,!0,!1,e.refresh_data),async function(){if(!t.is_ntop_pro)return;let e=J.value?.table_config_def;if(null==e)return;let a=W(e.ts_group,e.table_def.table_value,e.table_def.view,e.table_source_def_value_dict);r.value.update_url(a),r.value.reload()}(),B(a,!0)}function j(e){}function L(){u.value.show()}function R(){null!=S&&c.value.show(S)}function D(e){return async t=>w.value[e].chart_options}let F,q=null;function z(){B(h.value.label==C.label,!0)}async function B(e,t){m.value=await E(e,t),e&&(h.value=C)}async function V(e){B(!0),await G(e,!0,!0)}function H(){G(S,!1,!1)}async function G(e,a,l,n){let s=y.get_status(),i=function(e){let t=Number.parseInt((e.epoch_end-e.epoch_begin)/60);return t<=5?"5m":t<=30?"30m":t<=60?"1h":t<=1440?"1d":t<=10080?"1w":t<=43200?"1M":"1Y"}(s);if(a){if(null==e)return e=[],void console.warn("Empty timeseries_groups request");F=await Sy.getTsChartsOptions(http_prefix,s,i,e,t.is_ntop_pro)}!function(e,t){e.forEach(((e,a)=>{let l=t[a],n=l?.metadata?.label;if(null!=n){let t=Sy.getMainSourceDefIndex(e);e.source_array[t].label=n}}))}(e,F);let r=Sy.tsArrayToOptionsArray(F,e,$.value,i);n?function(e){e.forEach(((e,t)=>{o.value[t].update_chart_series(e?.serie)}))}(r):function(e){w.value=e.map(((e,t)=>({key:b.get_random_string(),chart_options:e})))}(r),function(e,t,a){const l=e.length>1;if(g.value=t.map((e=>!e.source_type.disable_stats)).reduce(((e,t)=>e|t),!1),!g.value)return;const n=e=>{let t={bps:"bytes",fps:"flows",alertps:"alerts",hitss:"hits",pps:"packets"};return null!=t[e]?t[e]:e};Z.value=[],e.forEach(((e,a)=>{let s=t[a];1!=s.source_type.disable_stats&&e.series?.forEach(((e,t)=>{let a,o=Sy.getSerieId(e),i=s.metric.timeseries[o],r=v.getFormatter(s.metric.measure_unit),c=i.label;if(i.hidden)return;if(1==i.use_serie_name&&(c=e.name),e?.data.length>t&&(a=e.statistics),null==a)return;e.ext_label&&(c=e.ext_label),c=Sy.getSerieName(c,o,s,l);let u=n(s.metric.measure_unit),d={metric:c,total:v.getFormatter(u)(a.total),perc_95:r(a["95th_percentile"]),avg:r(a.average),max:r(a.max_val),min:r(a.min_val)};Z.value.push(d)}))}))}(F,e),l&&function(e,a){if(!t.is_ntop_pro)return;null==e&&(e=S);null==a&&(a=y.get_status());let l=Vb.sources_types_tables,n={};e.forEach((e=>{e.source_type;let t=Vb.get_ts_group_id(e.source_type,e.source_array);n[t]=e}));let s={};K.value=[];for(let e in n){let o=n[e],i=Sy.getMainSourceDefIndex(o),r=o.source_array[i],c=o.source_type,u=l[c.id];null!=u&&u.forEach((e=>{let l=t.sources_types_top_enabled[e.table_value];if(null==l)return;if(!l[e.view])return;let n=e.table_source_def_value_dict,i=W(o,e.table_value,e.view,n,a),u=Vb.get_ts_group_id(o.source_type,o.source_array,null,n,!0);if(u=`${u}_${e.view}`,null!=s[u])return;s[u]=!0;let d,_=`${e.table_value}_${e.view}_${u}`;d=null==e.f_get_label?`${e.title} - ${c.label} ${r.label}`:e.f_get_label(o);const p={ts_group:o,table_def:e,table_buttons:[],data_url:i,enable_search:!0,table_config:{serverSide:!1,order:[[e.default_sorting_columns,"desc"]],columnDefs:e.columnDefs||[]}};p.columns_config=e.columns.map((e=>{let l={is_history_enabled:t.is_history_enabled},n={visible:!e.render_if||e.render_if(l),...e};return null==n.className&&(n.className="text-nowrap"),null==n.responsivePriority&&(n.responsivePriority=1),n.render=e.render.bind({add_metric_from_metric_schema:U,add_ts_group_from_source_value_dict:P,sources_types_enabled:t.sources_types_enabled,status:a,source_type:c,source_array:o.source_array}),n}));let f={value:_,label:d,table_config_def:p};K.value.push(f)}))}if(null!=J.value&&K.value.find((e=>e.value==J.value.value)))return;J.value=K.value.find((e=>1==e.table_config_def.default)),null==J.value&&(J.value=K.value[0])}(e,s),S=e,x.set_key_to_url("timeseries_groups_mode",$.value.value),Vb.set_timeseries_groups_in_url(S)}function W(e,t,a,l,n){null==n&&(n=y.get_status());let s=Sy.getTsQuery(e,!0,l),o=`${http_prefix}/lua/pro/rest/v2/get/${t}/top/ts_stats.lua`,i={zoom:"5m",ts_query:s,epoch_begin:`${n.epoch_begin}`,epoch_end:`${n.epoch_end}`,detail_view:`${a}`,new_charts:"true"};return`${o}?${x.add_obj_to_url(i,"")}`}const K=ma([]),J=ma({});let Y=[{id:"metric",label:l("page_stats.metric"),va:!0},{id:"avg",label:l("page_stats.average"),class:"text-end",va:!0},{id:"perc_95",label:l("page_stats.95_perc"),class:"text-end",va:!0},{id:"max",label:l("page_stats.max"),class:"text-end",va:!0},{id:"min",label:l("page_stats.min"),class:"text-end",va:!0},{id:"total",label:l("page_stats.total"),class:"text-end",va:!1}];const Z=ma([]);function X(){let e=y.get_status(),t={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end},a=x.obj_to_url_params(t);const l=`${http_prefix}/lua/pro/db_search.lua?${a}`;x.go_to_url(l)}const Q=ma(null);function ee(){Q.value.show()}function te(){if(!F?.length)return;let e=S[0],t=Sy.getSerieName(null,null,e);d.value.show(t)}async function ae(e){let t=o.value.map((async e=>{let t=new Image;return e.get_image(t),new Promise((async(e,a)=>{t.onload=function(){e(t)}}))})),a=0,l=await Promise.all(t);l.forEach((e=>{a+=e.height}));let n=document.createElement("canvas"),s=n.getContext("2d");n.width=l[0].width,n.height=a,a=0,l.forEach((e=>{s.drawImage(e,0,a,e.width,e.height),a+=e.height})),b.download_URI(n.toDataURL(),e)}return(t,a)=>(Us(),Ls(Cs,null,[Hs("div",hw,[Gs(C_),Hs("div",gw,[Gs(T_,{style:{"margin-top":"0.5rem"},class:"ms-1",id:wa(n),enable_refresh:!0,ref_key:"date_time_picker",ref:i,onEpoch_change:M,min_time_interval_id:f.value,custom_time_interval_list:A},{begin:hl((()=>[])),extra_buttons:hl((()=>[e.enable_snapshots?(Us(),Ls("button",{key:0,class:"btn btn-link btn-sm",onClick:L,title:l("page_stats.manage_snapshots_btn")},yw,8,bw)):Zs("v-if",!0),e.traffic_extraction_permitted?(Us(),Ls("button",{key:1,class:"btn btn-link btn-sm",onClick:ee,title:l("traffic_recording.pcap_download")},xw,8,ww)):Zs("v-if",!0),Hs("button",{disabled:wa(_),class:"btn btn-link btn-sm",onClick:te,title:wa(p)},$w,8,kw),e.is_history_enabled?(Us(),Ls("button",{key:2,class:"btn btn-link btn-sm",onClick:X,title:l("page_stats.historical_flows")},Cw,8,Sw)):Zs("v-if",!0)])),_:1},8,["id","min_time_interval_id"]),Zs(" select metric "),xn(Hs("div",Nw,[Hs("div",Aw,[Gs(n_,{selected_option:h.value,"onUpdate:selected_option":a[0]||(a[0]=e=>h.value=e),options:m.value,onSelect_option:O},null,8,["selected_option","options"])]),Hs("div",Ew,[Gs(n_,{selected_option:$.value,"onUpdate:selected_option":a[1]||(a[1]=e=>$.value=e),options:wa(k),onSelect_option:H},null,8,["selected_option","options"])]),e.is_ntop_pro?(Us(),Ls("button",{key:0,type:"button",onClick:R,class:"btn btn-sm btn-primary inline",style:{"vertical-align":"super"}}," Manage Timeseries ")):Zs("v-if",!0)],512),[[Zi,N.value]]),(Us(!0),Ls(Cs,null,Tn(w.value,((e,t)=>(Us(),Rs(Ng,{key:e.key,id:wa("chart")+t,ref_for:!0,ref:e=>{o.value[t]=e},chart_type:wa(s),register_on_status_change:!1,get_custom_chart_options:D(t),onZoom:M,onChart_reloaded:j},null,8,["id","chart_type","get_custom_chart_options"])))),128))]),g.value?(Us(),Ls("div",Tw,[Hs("div",Pw,[Gs(vw,{id:"page_stats_bootstrap_table",columns:wa(Y),rows:Z.value,print_html_column:e=>function(e){return e.label}(e),print_html_row:(e,t)=>function(e,t){return t[e.id]}(e,t)},null,8,["columns","rows","print_html_column","print_html_row"])])])):Zs("v-if",!0),e.is_ntop_pro?(Us(),Ls("div",Uw,[Hs("div",Iw,[J.value?.table_config_def?(Us(),Ls("div",Ow,[Gs(n_,{selected_option:J.value,"onUpdate:selected_option":a[2]||(a[2]=e=>J.value=e),options:K.value},null,8,["selected_option","options"])])):Zs("v-if",!0),J.value?.table_config_def?(Us(),Rs(ow,{key:J.value?.value,ref_key:"top_table_ref",ref:r,table_buttons:J.value.table_config_def.table_button,columns_config:J.value.table_config_def.columns_config,data_url:J.value.table_config_def.data_url,enable_search:J.value.table_config_def.enable_search,table_config:J.value.table_config_def.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])):Zs("v-if",!0)])])):Zs("v-if",!0)]),e.enable_snapshots?(Us(),Rs(sm,{key:0,ref_key:"modal_snapshot",ref:u,csrf:e.csrf,page:Mw,onAdded_snapshot:z,onDeleted_snapshots:z,onDeleted_all_snapshots:z},null,8,["csrf"])):Zs("v-if",!0),e.is_ntop_pro?(Us(),Rs(Yy,{key:1,ref_key:"modal_timeseries",ref:c,sources_types_enabled:e.sources_types_enabled,onApply:V},null,8,["sources_types_enabled"])):Zs("v-if",!0),Gs(pv,{id:"page_stats_modal_traffic_extraction",ref_key:"modal_traffic_extraction",ref:Q},null,512),Gs(aw,{ref_key:"modal_download_file",ref:d,title:l("page_stats.title_modal_download_file"),ext:"png",onDownload:ae},null,8,["title"])],64))}};np("\n.inline[data-v-937058e4] {\n    display: inline-block;\n}\n.select2-size[data-v-937058e4] {\n    min-width: 18rem;\n}\n"),jw.__scopeId="data-v-937058e4",jw.__file="http_src/vue/page-stats.vue";var Lw=Yl({components:{},props:{id:String,tab_list:Array},emits:["click_item"],created(){},data:()=>({old_tab:null}),mounted(){let e=null;this.$props.tab_list.forEach((function(t){t.active&&(e=t)})),this.old_tab=e||this.$props.tab_list[0],ntopng_sync.ready(this.$props.id)},methods:{change_tab:function(e){(null!=e.id&&this.old_tab.id!=e.id||null!=e.name&&this.old_tab.name!=e.name)&&(this.old_tab=e,this.$emit("click_item",e))}}});const Rw={class:"card-header mb-2"},Dw={class:"nav nav-tabs card-header-tabs",role:"tablist"},Fw=["onClick"],qw=["onClick"];Lw.render=function(e,t,a,l,n,s){return Us(),Ls("div",Rw,[Hs("ul",Dw,[(Us(!0),Ls(Cs,null,Tn(e.tab_list,(t=>(Us(),Ls(Cs,null,[t.active?(Us(),Ls("li",{key:0,onClick:a=>e.change_tab(t),class:J([{active:t.active},"nav-item nav-link"])},ae(t.title),11,Fw)):(Us(),Ls("a",{key:1,onClick:a=>e.change_tab(t),href:"#",class:"nav-item nav-link"},ae(t.title),9,qw))],64)))),256))])])},Lw.__file="http_src/vue/tab-list.vue";var zw={__name:"modal-delete-confirm",props:{body:String,title:String},emits:["delete","delete_all"],setup(e,{expose:t,emit:a}){const l=e,n=ma(null);let s=ma(""),o=ma("");const i=()=>{a("delete"),r()},r=()=>{n.value.close()};t({show:(e,t)=>{null!=e&&null!=t?(s.value=e,o.value=t):(s.value=l.body,o.value=l.title),n.value.show()},close:r}),pn((()=>{}));const c=e=>i18n(e);return(e,t)=>(Us(),Rs(sp,{onShowed:t[0]||(t[0]=e=>{}),ref_key:"modal_id",ref:n},{title:hl((()=>[Js(ae(wa(o)),1)])),body:hl((()=>[Js(ae(wa(s)),1)])),footer:hl((()=>[Hs("button",{type:"button",onClick:i,class:"btn btn-danger"},ae(c("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-confirm.vue"};const Bw="change_asset_table_tab_event";var Vw={components:{datatable:ow,"modal-delete-confirm":zw,"tab-list":Lw},props:{page_csrf:String,url_params:Object,view:String,table_filters:Array},created(){x.set_key_to_url("asset_family",this.$props.url_params.asset_family),this.asset_table_tab=x.get_url_entry("view")||"centrality",x.set_key_to_url("view",this.service_table_tab),this.tab_list.forEach((e=>{this.asset_table_tab==e.id&&(e.active=!0)})),function(e){const t=[];let a=[];e.get_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,url_params),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let l=url_params;l.view="standard";let n={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l),enable_search:!0},s=[];for(let t of e.$props.table_filters||[])t.callbackFunction=(a,n)=>{l.view=e.asset_table_tab,l[t.filterMenuKey]=n.id,x.set_key_to_url(t.filterMenuKey,n.id),a.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l)),NtopUtils.showOverlays(),a.ajax.reload(),NtopUtils.hideOverlays()},s.push(t);a=[{columnName:i18n("actions"),name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(t,a,l){return e.create_action_button_historical_flow_link(t,a,l)}},{columnName:i18n("map_page.client"),name:"client",data:"client",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.server"),name:"server",data:"server",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.asset_family"),name:"family",data:"family",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.last_seen"),name:"last_seen",data:"last_seen",className:"text-center",responsivePriority:2}];let o=ntopng_utility.clone(n);o.table_config={serverSide:!1,order:[[4,"desc"]]},o.columns_config=a,o.table_filters=s,e.config_devices_standard=o,l.view="centrality",n.data_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l),a=[{columnName:i18n("map_page.host"),name:"host",data:"host",className:"text-nowrap",render:(e,t)=>e.label,responsivePriority:1},{columnName:i18n("map_page.asset_total_edges"),name:"total_edges",data:"total_edges",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.asset_in_edges"),name:"in_edges",data:"in_edges",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.asset_out_edges"),name:"out_edges",data:"out_edges",className:"text-center",responsivePriority:2}];let i=ntopng_utility.clone(n);i.table_config={serverSide:!1,order:[[1,"desc"]]},i.columns_config=a,i.table_filters=s,console.log(o),console.log(i),e.config_devices_centrality=i}(this)},mounted(){N.on_custom_event("page_asset_table",ntopng_custom_events.DATATABLE_LOADED,(()=>{x.get_url_entry("host")&&this.hide_dropdowns()})),N.on_custom_event("change_asset_table_tab",Bw,(e=>{let t=this.get_active_table();x.set_key_to_url("view",e),t.destroy_table(),this.asset_table_tab=e})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog()))},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null,title_delete:i18n("map_page.delete_assets"),body_delete:i18n("map_page.delete_assets_message"),title_download:i18n("map_page.download"),body_download:i18n("map_page.download_message"),get_url:null,asset_table_tab:null,tab_list:[{title:i18n("map_page.standard_view"),active:"standard"==view,id:"standard"},{title:i18n("map_page.centrality_view"),active:"centrality"==view,id:"centrality"}]}),methods:{destroy:function(){this.get_active_table().destroy_table()},click_item:function(e){this.tab_list.forEach((e=>e.active=!1)),e.active=!0,N.emit_custom_event(Bw,e.id)},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",page:this.url_params.page,csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)}),this.reload_table()}catch(e){this.reload_table()}},create_action_button_historical_flow_link:function(e,t,a){let l={handlerId:"historical_flow_link",onClick:()=>{!function(e){const t=e.client.split("host=")[1].split("&")[0],a=e.server.split("host=")[1].split("&")[0],l=e.epoch_end,n={epoch_begin:e.epoch_begin,epoch_end:l,srv_ip:`${a};eq`,cli_ip:`${t};eq`},s=x.obj_to_url_params(n);x.go_to_url(`${http_prefix}/lua/pro/db_search.lua?${s}`)}(a)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:l,icon:"fas fa-stream",title:i18n("db_explorer.historical_data")}])},hide_dropdowns:function(){$("#network_dropdown").removeClass("d-inline"),$("#vlan_id_dropdown").removeClass("d-inline"),$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},get_active_table:function(){return this.$refs[`table_asset_${this.asset_table_tab}`]},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()}}};const Hw={class:"row"},Gw={class:"col-md-12 col-lg-12"},Ww=Hs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),Kw={class:"card"},Jw=Hs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Hs("div",{class:"text-center"},[Hs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Hs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Yw={class:"card-body"},Zw={id:"table_asset"},Xw={class:"card-footer"},Qw={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},ex=Hs("i",{class:"fas fa-trash"},null,-1),tx=["href"],ax=[Hs("i",{class:"fas fa-download"},null,-1)];Vw.render=function(e,t,a,l,n,s){const o=$n("modal-delete-confirm"),i=$n("tab-list"),r=$n("datatable");return Us(),Ls("div",Hw,[Hs("div",Gw,[Ww,Hs("div",Kw,[Jw,Hs("div",Yw,[Hs("div",Zw,[Gs(o,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Gs(i,{ref:"asset_tab_list",id:"asset_tab_list",tab_list:n.tab_list,onClick_item:s.click_item},null,8,["tab_list","onClick_item"]),"standard"==n.asset_table_tab?(Us(),Rs(r,{key:0,ref:"table_asset_standard",table_buttons:n.config_devices_standard.table_buttons,columns_config:n.config_devices_standard.columns_config,data_url:n.config_devices_standard.data_url,enable_search:n.config_devices_standard.enable_search,filter_buttons:n.config_devices_standard.table_filters},{default:hl((()=>[Js(' :table_config="config_devices_standard.table_config"> ')])),_:1},8,["table_buttons","columns_config","data_url","enable_search","filter_buttons"])):Zs("v-if",!0),"centrality"==n.asset_table_tab?(Us(),Rs(r,{key:1,ref:"table_asset_centrality",table_buttons:n.config_devices_centrality.table_buttons,columns_config:n.config_devices_centrality.columns_config,data_url:n.config_devices_centrality.data_url,enable_search:n.config_devices_centrality.enable_search,filter_buttons:n.config_devices_centrality.table_filters},{default:hl((()=>[Js(' :table_config="config_devices_centrality.table_config"> ')])),_:1},8,["table_buttons","columns_config","data_url","enable_search","filter_buttons"])):Zs("v-if",!0)])]),Hs("div",Xw,[Hs("button",Qw,[ex,Js(" "+ae(n.i18n("map_page.delete_assets")),1)]),Hs("a",{href:n.get_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"asset_map.json",target:"_blank"},ax,8,tx)])])])])},Vw.__file="http_src/vue/page-asset-table.vue";var lx={components:{datatable:ow,"modal-delete-confirm":zw},props:{page_csrf:String,url_params:Object,view:String,table_filters:Array,is_admin:Boolean},created(){!function(e){const t=[];let a=[],l=0;e.get_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,url_params),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let n=ntopng_utility.clone(url_params);n.view=null;let s={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,n),enable_search:!0},o=[];for(let t of e.$props.table_filters||[])t.callbackFunction=(e,a)=>{n[t.filterMenuKey]=a.id,x.set_key_to_url(t.filterMenuKey,a.id),e.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,n)),NtopUtils.showOverlays(),e.ajax.reload(),NtopUtils.hideOverlays()},o.push(t);a=[{columnName:i18n("actions"),name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(t,a,l){return e.create_action_button_historical_flow_link(t,a,l)}},{columnName:i18n("map_page.last_seen"),name:"last_seen",data:"last_seen",className:"text-center text-nowrap",render:(e,t)=>e.value,responsivePriority:2},{columnName:i18n("map_page.client"),name:"client",data:"client",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.server"),name:"server",data:"server",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.port"),name:"port",data:"port",className:"text-center",responsivePriority:4},{columnName:i18n("map_page.protocol"),name:"l7proto",data:"protocol",className:"text-nowrap",responsivePriority:3},{columnName:i18n("map_page.first_seen"),name:"first_seen",data:"first_seen",visible:!1,responsivePriority:3},{columnName:i18n("duration"),name:"duration",data:"duration",className:"text-center text-nowrap",responsivePriority:3,orderable:!0},{columnName:i18n("map_page.observations"),name:"observations",data:"observations",className:"text-center",responsivePriority:4},{columnName:i18n("map_page.frequency"),name:"frequency",data:"frequency",className:"text-center",orderable:!0,responsivePriority:4,render:(e,t,a)=>"sort"==t||"type"==t?e:e+" sec"}],l=8;let i={serverSide:!0,order:[[l,"desc"]]},r=ntopng_utility.clone(s);r.table_buttons=s.table_buttons,r.data_url=`${r.data_url}`,r.columns_config=a,r.table_filters=o,r.table_config=ntopng_utility.clone(i),e.config_devices_standard=r}(this)},mounted(){$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),ntopng_events_manager.on_custom_event("page_periodicity_table",ntopng_custom_events.DATATABLE_LOADED,(()=>{x.get_url_entry("host")&&this.hide_dropdowns()}))},data:()=>({i18n:e=>i18n(e),base_url:`${http_prefix}/lua/pro/enterprise/get_map.lua`,config_devices_standard:null,config_devices_centrality:null,title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_download:i18n("map_page.download"),body_download:i18n("map_page.download_message"),get_url:null}),methods:{hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden"),$("#network_dropdown").removeClass("d-inline"),$("#vlan_id_dropdown").removeClass("d-inline")},create_action_button_historical_flow_link:function(e,t,a){let l={handlerId:"historical_flow_link",onClick:()=>{!function(e){const t=e.client.split("host=")[1].split(">")[0],a=t.substring(0,t.length-1),l=e.server.split("host=")[1].split(">")[0],n=l.substring(0,l.length-1),s=e.port,o=e.first_seen,i=e.last_seen.epoch_end,r={epoch_begin:o,epoch_end:i,srv_ip:`${n};eq`,cli_ip:`${a};eq`,srv_port:`${s};eq`},c=x.obj_to_url_params(r),u=`${http_prefix}/lua/pro/db_search.lua?${c}`;x.go_to_url(u)}(a)}},n={handlerId:"live_flow_link",onClick:()=>{!function(e){const t=e.client.split("host=")[1].split(">")[0],a=t.substring(0,t.length-1),l=e.server.split("host=")[1].split(">")[0],n=l.substring(0,l.length-1),s=e.port,o={server:`${n}`,client:`${a}`,port:`${s}`},i=x.obj_to_url_params(o),r=`${http_prefix}/lua/flows_stats.lua?${i}`;x.go_to_url(r)}(a)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:l,icon:"fas fa-stream",title:i18n("db_explorer.historical_data")},{class:"pointer",handler:n,icon:"fas fa-stream",title:i18n("live_flows")}])},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",page:this.url_params.page,csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)}),this.reload_table()}catch(e){this.reload_table()}},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},destroy:function(){this.get_active_table().destroy_table()},get_active_table:function(){return this.$refs.table_periodicity},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()}}};const nx={class:"row"},sx={class:"col-md-12 col-lg-12"},ox=Hs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),ix={class:"card"},rx=Hs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Hs("div",{class:"text-center"},[Hs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Hs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),cx={class:"card-body"},ux={id:"periodicity-table"},dx={class:"card-footer"},_x={key:0,type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},px=Hs("i",{class:"fas fa-trash"},null,-1),fx=["href"],vx=[Hs("i",{class:"fas fa-download"},null,-1)];lx.render=function(e,t,a,l,n,s){const o=$n("modal-delete-confirm"),i=$n("datatable");return Us(),Ls("div",nx,[Hs("div",sx,[ox,Hs("div",ix,[rx,Hs("div",cx,[Hs("div",ux,[Gs(o,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Gs(i,{ref:"table_periodicity",table_buttons:n.config_devices_standard.table_buttons,columns_config:n.config_devices_standard.columns_config,data_url:n.config_devices_standard.data_url,enable_search:n.config_devices_standard.enable_search,filter_buttons:n.config_devices_standard.table_filters,table_config:n.config_devices_standard.table_config,base_url:n.base_url,base_params:a.url_params},null,8,["table_buttons","columns_config","data_url","enable_search","filter_buttons","table_config","base_url","base_params"])])]),Hs("div",dx,[a.is_admin?(Us(),Ls("button",_x,[px,Js(" "+ae(n.i18n("map_page.delete_services")),1)])):Zs("v-if",!0),Hs("a",{href:n.get_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"periodicity_map.json",target:"_blank"},vx,8,fx)])])])])},lx.__file="http_src/vue/page-periodicity-table.vue";const mx={autoResize:!0,nodes:{shape:"dot",scaling:{min:10,max:30,label:{enabled:!0,min:8,max:30,drawThreshold:12}},font:{color:"#212529"},shadow:!1},edges:{width:.2,color:{inherit:"from"},smooth:{type:"continuous",roundness:0},arrows:{to:{enabled:!0,scaleFactor:.3}},arrowStrikethrough:!1,scaling:{min:1,max:5}},layout:{improvedLayout:!1},interaction:{hideEdgesOnDrag:!1,hideEdgesOnZoom:!0,hover:!1,tooltipDelay:0},physics:{enabled:!0,solver:"forceAtlas2Based",stabilization:{iterations:300,enabled:!0},forceAtlas2Based:{centralGravity:.01,springLength:100}},groups:{unknown:{shape:"dot"},printer:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},video:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},workstation:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},laptop:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},tablet:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},phone:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},tv:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},networking:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},wifi:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},nas:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},multimedia:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},iot:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}}}},hx=function(e,t,a,l){$.post(`${http_prefix}/lua/pro/enterprise/switch_service_state.lua`,{service_id:e,service_status:t,csrf:l}).then((e=>{e.success&&a&&a()}))},gx=function(){return mx},bx="change_service_table_tab_event";var yx={components:{datatable:ow,"modal-delete-confirm":zw,"tab-list":Lw},props:{page_csrf:String,url_params:Object,view:String,table_filters:Array,is_admin:Boolean,service_acceptance:Array},created(){this.service_table_tab=x.get_url_entry("view")||"standard",x.set_key_to_url("view",this.service_table_tab),this.tab_list.forEach((e=>{this.service_table_tab==e.id&&(e.active=!0)})),function(e){const t=[];let a=[],l=0;e.get_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,url_params),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let n=url_params;n.view="standard";let s={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,n),enable_search:!0},o=[];for(let t of e.$props.table_filters||[])t.callbackFunction=(a,l)=>{n.view=e.service_table_tab,n[t.filterMenuKey]=l.id,x.set_key_to_url(t.filterMenuKey,l.id),a.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,n)),NtopUtils.showOverlays(),a.ajax.reload(),NtopUtils.hideOverlays()},o.push(t);a=[{columnName:i18n("actions"),name:"actions",data:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(t,a,l){return e.create_action_button_historical_flow_link(t,a,l)},createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("map_page.last_seen"),name:"last_seen",data:"last_seen",className:"text-center text-nowrap",render:(e,t)=>e.value,responsivePriority:2},{columnName:i18n("map_page.client"),name:"client",data:"client",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.server"),name:"server",data:"server",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.port"),name:"port",data:"port",className:"text-center",responsivePriority:4},{columnName:i18n("map_page.protocol"),name:"l7proto",data:"protocol",className:"text-nowrap",responsivePriority:3},{columnName:i18n("map_page.first_seen"),name:"first_seen",data:"first_seen",visible:!1,responsivePriority:3},{columnName:i18n("map_page.num_uses"),name:"num_uses",data:"num_uses",className:"text-center text-nowrap",responsivePriority:4},{columnName:i18n("map_page.info"),name:"info",data:"info",responsivePriority:5}],l=7,e.is_admin&&a.push({columnName:i18n("map_page.status"),name:"service_acceptance",data:"service_acceptance",className:"text-center",orderable:!1,responsivePriority:1,render:(t,a,l)=>e.create_action_buttons(t,a,l)});let i={serverSide:!0,order:[[l,"desc"]]},r=ntopng_utility.clone(s);r.table_buttons=s.table_buttons,r.data_url=`${r.data_url}`,r.columns_config=a,r.table_filters=o,r.table_config=ntopng_utility.clone(i),e.config_devices_standard=r,n.view="centrality",s.data_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,n),a=[{columnName:i18n("map_page.host"),name:"host",data:"host",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.total_edges"),name:"total_edges",data:"total_edges",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.rank"),name:"rank",data:"rank",className:"text-center",responsivePriority:2},{columnName:i18n("map_page.in_edges"),name:"in_edges",data:"in_edges",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.out_edges"),name:"out_edges",data:"out_edges",className:"text-center",responsivePriority:2}],l=2,i.order=[[l,"desc"]],r=ntopng_utility.clone(s),r.table_buttons=s.table_buttons,r.data_url=`${r.data_url}`,r.columns_config=a,r.table_filters=o,r.table_config=ntopng_utility.clone(i),e.config_devices_centrality=r}(this)},mounted(){N.on_custom_event("page_service_table",ntopng_custom_events.DATATABLE_LOADED,(()=>{x.get_url_entry("host")&&this.hide_dropdowns()})),N.on_custom_event("change_service_table_tab",bx,(e=>{let t=this.get_active_table();x.set_key_to_url("view",e),t.delete_button_handlers(this.service_table_tab),t.destroy_table(),this.service_table_tab=e})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog()))},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null,title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),get_url:null,service_table_tab:null,tab_list:[{title:i18n("map_page.standard_view"),active:"standard"==view,id:"standard"},{title:i18n("map_page.centrality_view"),active:"centrality"==view,id:"centrality"}]}),methods:{hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden"),$("#network_dropdown").removeClass("d-inline"),$("#vlan_id_dropdown").removeClass("d-inline")},destroy:function(){let e=this.get_active_table();e.delete_button_handlers(this.service_table_tab),e.destroy_table()},click_item:function(e){this.tab_list.forEach((e=>e.active=!1)),e.active=!0,N.emit_custom_event(bx,e.id)},create_action_buttons:function(e,t,a){const l=this.reload_table,n=this.$props.page_csrf,s={onClick:()=>{hx(a.hash_id,this.$props.service_acceptance[0].id,l,n)}},o={onClick:()=>{hx(a.hash_id,this.$props.service_acceptance[1].id,l,n)}},i={onClick:()=>{hx(a.hash_id,this.$props.service_acceptance[2].id,l,n)}};if("display"!==t)return e;const r=a.acceptance,c={class:"dropdown-item",href:"#",title:this.$props.service_acceptance[0].label,handler:s},u={class:"dropdown-item",href:"#",title:this.$props.service_acceptance[1].label,handler:o},d={class:"dropdown-item disabled",href:"#",title:this.$props.service_acceptance[2].label,handler:i};switch(r){case 0:c.class="dropdown-item active";break;case 1:u.class="dropdown-item active";break;case 2:d.class="dropdown-item active disabled"}return DataTableUtils.createActionButtons([d,c,u])},create_action_button_historical_flow_link:function(e,t,a){let l={handlerId:"historical_flow_link",onClick:()=>{!function(e){const t=e.client.split("host=")[1].split(">")[0],a=t.substring(0,t.length-1),l=e.server.split("host=")[1].split(">")[0],n=l.substring(0,l.length-1),s=e.port,o=e.first_seen,i=e.last_seen.epoch_end,r={epoch_begin:o,epoch_end:i,srv_ip:`${n};eq`,cli_ip:`${a};eq`,srv_port:`${s};eq`},c=x.obj_to_url_params(r),u=`${http_prefix}/lua/pro/db_search.lua?${c}`;x.go_to_url(u)}(a)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:l,icon:"fas fa-stream",title:i18n("db_explorer.historical_data")}])},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",page:this.url_params.page,csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)}),this.reload_table()}catch(e){this.reload_table()}},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},get_active_table:function(){return this.$refs[`table_service_${this.service_table_tab}`]},switch_to_standard:function(){this.url_params.view="standard",document.location.href=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/network_maps.lua`,url_params)},switch_to_centrality:function(){this.url_params.view="centrality",document.location.href=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/network_maps.lua`,url_params)},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()}}};const wx={class:"row"},xx={class:"col-md-12 col-lg-12"},kx=Hs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),$x={class:"card"},Sx=Hs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Hs("div",{class:"text-center"},[Hs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Hs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Cx={class:"card-body"},Nx={id:"table_service"},Ax={class:"card-footer"},Ex={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Tx=Hs("i",{class:"fas fa-trash"},null,-1),Px=["href"],Ux=[Hs("i",{class:"fas fa-download"},null,-1)];yx.render=function(e,t,a,l,n,s){const o=$n("modal-delete-confirm"),i=$n("tab-list"),r=$n("datatable");return Us(),Ls("div",wx,[Hs("div",xx,[kx,Hs("div",$x,[Sx,Hs("div",Cx,[Hs("div",Nx,[Gs(o,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Gs(i,{ref:"service_tab_list",id:"service_tab_list",tab_list:n.tab_list,onClick_item:s.click_item},null,8,["tab_list","onClick_item"]),"standard"==n.service_table_tab?(Us(),Rs(r,{key:0,ref:"table_service_standard",table_buttons:n.config_devices_standard.table_buttons,columns_config:n.config_devices_standard.columns_config,data_url:n.config_devices_standard.data_url,enable_search:n.config_devices_standard.enable_search,filter_buttons:n.config_devices_standard.table_filters,table_config:n.config_devices_standard.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","filter_buttons","table_config"])):Zs("v-if",!0),"centrality"==n.service_table_tab?(Us(),Rs(r,{key:1,ref:"table_service_centrality",table_buttons:n.config_devices_centrality.table_buttons,columns_config:n.config_devices_centrality.columns_config,data_url:n.config_devices_centrality.data_url,enable_search:n.config_devices_centrality.enable_search,filter_buttons:n.config_devices_centrality.table_filters,table_config:n.config_devices_centrality.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","filter_buttons","table_config"])):Zs("v-if",!0)])]),Hs("div",Ax,[Zs('\n        {% if is_admin then %}\n          <form class="d-inline" id=\'switch-state-form\'>\n            <div class="form-group mb-3 d-inline">\n              <label>{* i18n("map_page.set_state", {label = "<span class=\'count\'></span>"}) *}</label>\n              <select name="new_state" class="form-select d-inline" style="width: 16rem" {{ ternary(map.services_num == 0, "disabled=\'disabled\'", "") }}>\n              {% for _, status in pairsByField(map.filters.service_status_filters, label, asc_insensitive) do %}\n                <option value="{{ status.id }}">{* status.label *}</option>\n              {% end %}\n              </select>\n              <button class="btn btn-secondary d-inline" class="btn-switch-state" {{ ternary(map.services_num == 0, "disabled=\'disabled\'", "") }}>\n                <i class="fas fa-random"></i> {{ i18n("set") }}\n              </button>\n            </div>\n          </form>\n        {% end %}\n    '),Hs("button",Ex,[Tx,Js(" "+ae(n.i18n("map_page.delete_services")),1)]),Hs("a",{href:n.get_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"service_map.json",target:"_blank"},Ux,8,Px)])])])])},yx.__file="http_src/vue/page-service-table.vue";const Ix={key:0,class:"alert alert-info"},Ox=["id"];var Mx={__name:"network-map",props:{empty_message:String,event_listeners:Object,page_csrf:String,url:String,url_params:Object,map_id:String},setup(e,{expose:t}){const a=e,l={ifid:a.url_params.ifid,action:"load_graph",map:a.url_params.map_id};let n={},s={},o=!1,i=null;const r=ma(!1),c=ma(!0),u=ma(!1),d=ma({}),_=ma(null),p=ma(null),f=ma(null);pn((async()=>{const e=document.getElementById(a.map_id);h(),await v(),p.value=gx(),i=new vis.Network(e,_.value,p.value),g()})),mn((()=>{1!=u.value&&b()}));const v=async()=>{d.value=a.url_params;const e=NtopUtils.buildURL(a.url,d.value);await $.get(e,l,(async function(e){const{nodes:t,edges:a,max_entry_reached:l}=e.rsp;r.value=l,n=new vis.DataSet(t.map((e=>(e.title=(e=>{const t=document.createElement("div");return t.innerHTML=`<b>${e.label}</b><br><br>${i18n("db_explorer.host_data")}: ${e.id}`,t})(e),e)))),s=new vis.DataSet(a),_.value={nodes:n,edges:s},f.value=n.get({returnType:"Object"}),m()}))},m=()=>{0==_.value?.nodes.length&&0==_.value?.edges.length?c.value=!0:c.value=!1},h=()=>{const e=NtopUtils.loadElementScale($(".resizable-y-container"));if(null!=e)$(".resizable-y-container").width(e.width),$(".resizable-y-container").height(e.height),$(".resizable-y-container").on("mouseup",(function(){const e={width:$(".resizable-y-container").width(),height:$(".resizable-y-container").height()};NtopUtils.saveElementScale($(this),e)}));else{const e={width:$(".resizable-y-container").width(),height:$(".resizable-y-container").height()};NtopUtils.saveElementScale($(this),e)}};const g=()=>{i.on("stabilizationIterationsDone",(function(){i.setOptions({physics:!1})})),i.on("click",(function(e){!function(e){if(e.nodes.length>0){var t,a;o=!0;var l=e.nodes[0];for(var s in f.value)f.value[s].old_color||(f.value[s].old_color=f.value[s].color),f.value[s].old_icon_color||(f.value[s].old_icon_color=f.value[s].icon),f.value[s].color="#c8c8c8",f.value[s].icon={color:"#c8c8c8"},void 0===f.value[s].hiddenLabel&&(f.value[s].hiddenLabel=f.value[s].label,f.value[s].label=void 0);var r=i.getConnectedNodes(l),c=[];for(t=1;t<2;t++)for(a=0;a<r.length;a++)c=c.concat(i.getConnectedNodes(r[a]));for(t=0;t<r.length;t++)f.value[r[t]].color=f.value[r[t]].old_color,f.value[r[t]].icon=f.value[r[t]].old_icon_color,void 0!==f.value[r[t]].hiddenLabel&&(f.value[r[t]].label=f.value[r[t]].hiddenLabel,f.value[r[t]].hiddenLabel=void 0);f.value[l].color=f.value[l].old_color,f.value[l].icon=f.value[l].old_icon_color,void 0!==f.value[l].hiddenLabel&&(f.value[l].label=f.value[l].hiddenLabel,f.value[l].hiddenLabel=void 0)}else if(!0===o){for(var s in f.value)f.value[s].color=f.value[s].old_color,f.value[s].icon=f.value[s].old_icon_color,void 0!==f.value[s].hiddenLabel&&(f.value[s].label=f.value[s].hiddenLabel,f.value[s].hiddenLabel=void 0);o=!1}var u=[];for(s in f.value)f.value.hasOwnProperty(s)&&u.push(f.value[s]);n.update(u)}(e)})),i.on("doubleClick",(function(e){(async e=>{const t=e.id.split("@");d.value.host=t[0],d.value.vlan_id=t[1],x.set_key_to_url("host",d.value.host),x.set_key_to_url("vlan_id",d.value.vlan_id),N.emit_custom_event(ntopng_custom_events.CHANGE_PAGE_TITLE,e),await y()})(n.get(e.nodes[0]))})),i.on("afterDrawing",(function(e){N.emit_custom_event(ntopng_custom_events.VIS_DATA_LOADED)}));for(const e in a.event_listeners||{})i.on(e,a.event_listeners[e])},b=()=>{null!=i&&i.destroy(!0),u.value=!0},y=async()=>{await v(),null!=i&&(i.setOptions({physics:p.value.physics}),i.setData(_.value))};return t({reload:y,destroy:b,is_max_entry_reached:()=>r.value,autolayout:()=>{null!=i?i instanceof vis.Network?i.stabilize():console.error("Not a vis.Network instance!"):console.error("The network is undefined!")},update_url_params:e=>{d.value=e}}),(t,a)=>(Us(),Ls(Cs,null,[c.value?(Us(),Ls("div",Ix,ae(e.empty_message),1)):Zs("v-if",!0),Hs("div",{class:"d-flex justify-content-center align-items-center resizable-y-container",style:{width:"100%",height:"60vh"},id:e.map_id},null,8,Ox)],64))},__file:"http_src/vue/network-map.vue"},jx={__name:"modal-autolayout-confirm",props:{body:String,title:String},emits:["autolayout"],setup(e,{expose:t,emit:a}){const l=ma(null),n=()=>{a("autolayout"),s()},s=()=>{l.value.close()};t({show:()=>{l.value.show()},close:s}),pn((()=>{}));const o=e=>i18n(e);return(t,a)=>(Us(),Rs(sp,{onShowed:a[0]||(a[0]=e=>{}),ref_key:"modal_id",ref:l},{title:hl((()=>[Js(ae(e.title),1)])),body:hl((()=>[Js(ae(e.body),1)])),footer:hl((()=>[Hs("button",{type:"button",onClick:n,class:"btn btn-primary"},ae(o("confirm")),1)])),_:1},512))},__file:"http_src/vue/modal-autolayout-confirm.vue"};const Lx="change_filter_event";var Rx={components:{"network-map":Mx,"modal-delete-confirm":zw,"modal-autolayout-confirm":jx,"select-search":n_},props:{page_csrf:String,ifid:Number,url_params:Object,map_id:String,is_admin:Boolean,all_filter_list:Object},created(){!function(e){for(const t in e.$props.all_filter_list){e.filter_list.push(e.$props.all_filter_list[t]);const a=ntopng_url_manager.get_url_entry(t);for(let[l,n]of Object.entries(e.$props.all_filter_list[t]))n.filter_name=t,a?n.id==a&&e.active_filter_list.push(n):1==n.currently_active&&e.active_filter_list.push(n)}e.get_url=`${http_prefix}/lua/pro/rest/v2/get/interface/map/data.lua`,e.download_url=NtopUtils.buildURL(e.get_url,e.$props.url_params),e.event_listeners={}}(this)},mounted(){const e=this.max_entry_reached,t=this.reload_map;this.$props.url_params.host&&""!=this.$props.url_params.host&&this.hide_dropdowns(),N.on_custom_event("page_service_map",ntopng_custom_events.CHANGE_PAGE_TITLE,(e=>{this.hide_dropdowns()})),N.on_custom_event("change_filter_event",Lx,(e=>{this.active_filter_list.forEach(((t,a)=>{t.filter_name==e.filter_name&&(this.active_filter_list[a]=e)})),ntopng_url_manager.set_key_to_url(e.filter_name,e.key),this.url_params[e.filter_name]=e.key,this.update_and_reload_map()})),N.on_custom_event(this.get_map(),ntopng_custom_events.VIS_DATA_LOADED,(t=>{e()?$("#max-entries-reached").removeAttr("hidden"):$("#max-entries-reached").attr("hidden","hidden"),NtopUtils.hideOverlays()}));let a=ntopng_url_manager.get_url_entries();for(const[e,t]of a)this.url_params[e]=t;$("#reload-graph").click((function(e){t()})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),$("#autolayout").click((()=>this.show_autolayout_dialog()))},data:()=>({i18n:e=>i18n(e),container:null,update_view_state_id:null,get_url:null,download_url:null,filter_list:[],active_filter_list:[],event_listeners:{},title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_autolayout:i18n("map_page.autolayout_services"),body_autolayout:i18n("map_page.autolayout_services_message"),no_services_message:i18n("map_page.no_services"),max_entry_title:i18n("max_entries_reached")}),methods:{destroy:function(){this.get_map().destroy()},click_item:function(e){N.emit_custom_event(Lx,e)},get_map:function(){return this.$refs.service_map},max_entry_reached:function(){return this.get_map().is_max_entry_reached()},reload_map:async function(){NtopUtils.showOverlays();let e=this.get_map();await e.reload()},update_and_reload_map:async function(){let e=this.get_map();NtopUtils.showOverlays(),e.update_url_params(this.url_params),await e.reload()},autolayout:function(){this.get_map().autolayout()},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_autolayout_dialog:function(){this.$refs.modal_autolayout.show()},hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)})}finally{this.reload_map()}}}};const Dx={class:"row"},Fx={class:"col-md-12 col-lg-12"},qx={class:"card card-shadow"},zx=Hs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Hs("div",{class:"text-center"},[Hs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Hs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Bx={class:"card-body"},Vx={id:"table_service"},Hx={class:"d-flex align-items-center justify-content-end mb-2"},Gx=["title"],Wx=[Hs("i",{class:"text-danger fa-solid fa-triangle-exclamation"},null,-1)],Kx={class:"d-flex ms-auto"},Jx={class:"m-1"},Yx=Hs("button",{type:"button",id:"reload-graph",class:"btn btn-link btn-reload-graph"},[Hs("i",{class:"fas fa-sync"})],-1),Zx=Hs("button",{type:"button",id:"autolayout",class:"btn btn-link btn-stabilize"},[Hs("i",{class:"fas fa-magic"})],-1),Xx={class:"card-footer"},Qx={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},ek=Hs("i",{class:"fas fa-trash"},null,-1),tk=["href"],ak=[Hs("i",{class:"fas fa-download"},null,-1)];Rx.render=function(e,t,a,l,n,s){const o=$n("select-search"),i=$n("modal-delete-confirm"),r=$n("modal-autolayout-confirm"),c=$n("network-map");return Us(),Ls("div",Dx,[Hs("div",Fx,[Hs("div",qx,[zx,Hs("div",Bx,[Hs("div",Vx,[Hs("div",Hx,[Hs("button",{id:"max-entries-reached",type:"button",class:"btn btn-link",title:n.max_entry_title,disabled:"",hidden:""},Wx,8,Gx),Hs("div",Kx,[(Us(!0),Ls(Cs,null,Tn(n.filter_list,((e,t)=>(Us(),Ls("div",Jx,[Gs(o,{selected_option:n.active_filter_list[t],"onUpdate:selected_option":e=>n.active_filter_list[t]=e,options:n.filter_list[t],onSelect_option:s.click_item},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256))]),Yx,Zx]),Gs(i,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Gs(r,{ref:"modal_autolayout",title:n.title_autolayout,body:n.body_autolayout,onAutolayout:s.reload_map},null,8,["title","body","onAutolayout"]),Gs(c,{ref:"service_map",empty_message:n.no_services_message,event_listeners:n.event_listeners,page_csrf:a.page_csrf,url:n.get_url,url_params:a.url_params,map_id:a.map_id},null,8,["empty_message","event_listeners","page_csrf","url","url_params","map_id"])])]),Hs("div",Xx,[Hs("button",Qx,[ek,Js(" "+ae(n.i18n("map_page.delete_services")),1)]),Hs("a",{href:n.download_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"service_map.json",target:"_blank"},ak,8,tk)])])])])},Rx.__file="http_src/vue/page-service-map.vue";const lk="change_filter_event";var nk={components:{"network-map":Mx,"modal-delete-confirm":zw,"modal-autolayout-confirm":jx,"select-search":n_},props:{page_csrf:String,ifid:Number,url_params:Object,map_id:String,is_admin:Boolean,all_filter_list:Object},created(){!function(e){for(const t in e.$props.all_filter_list){e.filter_list.push(e.$props.all_filter_list[t]);const a=ntopng_url_manager.get_url_entry(t);for(let[l,n]of Object.entries(e.$props.all_filter_list[t]))n.filter_name=t,a?n.id==a&&e.active_filter_list.push(n):1==n.currently_active&&e.active_filter_list.push(n)}e.get_url=`${http_prefix}/lua/pro/rest/v2/get/interface/map/data.lua`,e.download_url=NtopUtils.buildURL(e.get_url,e.updated_url_params),e.event_listeners={}}(this)},mounted(){this.updated_url_params=this.$props.url_params;let e=ntopng_url_manager.get_url_entries();for(const[t,a]of e)this.updated_url_params[t]=a;const t=this.max_entry_reached,a=this.reload_map;this.update_and_reload_map(),this.$props.url_params.host&&""!=this.$props.url_params.host&&this.hide_dropdowns(),N.on_custom_event("page_periodicity_map",ntopng_custom_events.CHANGE_PAGE_TITLE,(e=>{this.hide_dropdowns()})),N.on_custom_event("change_filter_event",lk,(e=>{this.active_filter_list.forEach(((t,a)=>{t.filter_name==e.filter_name&&(this.active_filter_list[a]=e)})),ntopng_url_manager.set_key_to_url(e.filter_name,e.key),this.url_params[e.filter_name]=e.key,this.update_and_reload_map()})),N.on_custom_event(this.get_map(),ntopng_custom_events.VIS_DATA_LOADED,(e=>{t()?$("#max-entries-reached").removeAttr("hidden"):$("#max-entries-reached").attr("hidden","hidden"),NtopUtils.hideOverlays()})),$("#reload-graph").click((function(e){a()})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),$("#autolayout").click((()=>this.show_autolayout_dialog()))},data:()=>({i18n:e=>i18n(e),container:null,update_view_state_id:null,get_url:null,download_url:null,updated_url_params:{},filter_list:[],active_filter_list:[],event_listeners:{},title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_autolayout:i18n("map_page.autolayout_services"),body_autolayout:i18n("map_page.autolayout_services_message"),no_services_message:i18n("map_page.no_services"),max_entry_title:i18n("max_entries_reached")}),methods:{destroy:function(){this.get_map().destroy()},click_item:function(e){N.emit_custom_event(lk,e)},get_map:function(){return this.$refs.periodicity_map},max_entry_reached:function(){return this.get_map().is_max_entry_reached()},reload_map:async function(){NtopUtils.showOverlays();let e=this.get_map();await e.reload()},hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},update_and_reload_map:async function(){let e=this.get_map();NtopUtils.showOverlays(),e.update_url_params(this.updated_url_params),await e.reload()},autolayout:function(){this.get_map().autolayout()},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_autolayout_dialog:function(){this.$refs.modal_autolayout.show()},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.updated_url_params.ifid,action:"reset",csrf:this.$props.page_csrf,map:this.updated_url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)})}finally{this.reload_map()}}}};const sk={class:"row"},ok={class:"col-md-12 col-lg-12"},ik={class:"card card-shadow"},rk=Hs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Hs("div",{class:"text-center"},[Hs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Hs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),ck={class:"card-body"},uk={id:"table_periodicity"},dk={class:"d-flex align-items-center justify-content-end mb-2"},_k=["title"],pk=[Hs("i",{class:"text-danger fa-solid fa-triangle-exclamation"},null,-1)],fk={class:"d-flex ms-auto"},vk={class:"m-1"},mk=Hs("button",{type:"button",id:"reload-graph",class:"btn btn-link btn-reload-graph"},[Hs("i",{class:"fas fa-sync"})],-1),hk=Hs("button",{type:"button",id:"autolayout",class:"btn btn-link btn-stabilize"},[Hs("i",{class:"fas fa-magic"})],-1),gk={class:"card-footer"},bk={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},yk=Hs("i",{class:"fas fa-trash"},null,-1),wk=["href"],xk=[Hs("i",{class:"fas fa-download"},null,-1)];nk.render=function(e,t,a,l,n,s){const o=$n("select-search"),i=$n("modal-delete-confirm"),r=$n("modal-autolayout-confirm"),c=$n("network-map");return Us(),Ls("div",sk,[Hs("div",ok,[Hs("div",ik,[rk,Hs("div",ck,[Hs("div",uk,[Hs("div",dk,[Hs("button",{id:"max-entries-reached",type:"button",class:"btn btn-link",title:n.max_entry_title,disabled:"",hidden:""},pk,8,_k),Hs("div",fk,[(Us(!0),Ls(Cs,null,Tn(n.filter_list,((e,t)=>(Us(),Ls("div",vk,[Gs(o,{selected_option:n.active_filter_list[t],"onUpdate:selected_option":e=>n.active_filter_list[t]=e,options:n.filter_list[t],onSelect_option:s.click_item},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256))]),mk,hk]),Gs(i,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Gs(r,{ref:"modal_autolayout",title:n.title_autolayout,body:n.body_autolayout,onAutolayout:s.reload_map},null,8,["title","body","onAutolayout"]),Gs(c,{ref:"periodicity_map",empty_message:n.no_services_message,event_listeners:n.event_listeners,page_csrf:a.page_csrf,url:n.get_url,url_params:a.url_params,map_id:a.map_id},null,8,["empty_message","event_listeners","page_csrf","url","url_params","map_id"])])]),Hs("div",gk,[Hs("button",bk,[yk,Js(" "+ae(n.i18n("map_page.delete_services")),1)]),Hs("a",{href:n.download_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"periodicity_map.json",target:"_blank"},xk,8,wk)])])])])},nk.__file="http_src/vue/page-periodicity-map.vue";const kk="change_filter_event";var $k={components:{"network-map":Mx,"modal-delete-confirm":zw,"modal-autolayout-confirm":jx,"select-search":n_},props:{page_csrf:String,ifid:Number,url_params:Object,map_id:String,is_admin:Boolean,all_filter_list:Object},created(){!function(e){for(const t in e.$props.all_filter_list){e.filter_list.push(e.$props.all_filter_list[t]);const a=x.get_url_entry(t);for(let[l,n]of Object.entries(e.$props.all_filter_list[t]))n.filter_name=t,a?n.id==a&&e.active_filter_list.push(n):1==n.currently_active&&e.active_filter_list.push(n)}e.get_url=`${http_prefix}/lua/pro/rest/v2/get/interface/map/data.lua`,e.download_url=NtopUtils.buildURL(e.get_url,e.$props.url_params),e.event_listeners={}}(this)},mounted(){const e=this.max_entry_reached,t=this.reload_map;this.$props.url_params.host&&""!=this.$props.url_params.host&&this.hide_dropdowns(),N.on_custom_event("page_service_map",ntopng_custom_events.CHANGE_PAGE_TITLE,(e=>{this.hide_dropdowns()})),N.on_custom_event("change_filter_event",kk,(e=>{this.active_filter_list.forEach(((t,a)=>{t.filter_name==e.filter_name&&(this.active_filter_list[a]=e)})),x.set_key_to_url(e.filter_name,e.key),this.url_params[e.filter_name]=e.key,this.update_and_reload_map()})),N.on_custom_event(this.get_map(),ntopng_custom_events.VIS_DATA_LOADED,(t=>{e()?$("#max-entries-reached").removeAttr("hidden"):$("#max-entries-reached").attr("hidden","hidden"),NtopUtils.hideOverlays()}));let a=x.get_url_entries();for(const[e,t]of a)this.url_params[e]=t;$("#reload-graph").click((function(e){t()})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),$("#autolayout").click((()=>this.show_autolayout_dialog()))},data:()=>({i18n:e=>i18n(e),container:null,update_view_state_id:null,get_url:null,download_url:null,filter_list:[],active_filter_list:[],event_listeners:{},title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_autolayout:i18n("map_page.autolayout_services"),body_autolayout:i18n("map_page.autolayout_services_message"),no_services_message:i18n("map_page.no_services"),max_entry_title:i18n("max_entries_reached")}),methods:{destroy:function(){this.get_map().destroy()},click_item:function(e){N.emit_custom_event(kk,e)},get_map:function(){return this.$refs.asset_map},hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},max_entry_reached:function(){return this.get_map().is_max_entry_reached()},reload_map:async function(){NtopUtils.showOverlays();let e=this.get_map();await e.reload()},update_and_reload_map:async function(){let e=this.get_map();NtopUtils.showOverlays(),e.update_url_params(this.url_params),await e.reload()},autolayout:function(){this.get_map().autolayout()},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_autolayout_dialog:function(){this.$refs.modal_autolayout.show()},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)})}finally{NtopUtils.showOverlays(),this.reload_map()}}}};const Sk={class:"row"},Ck={class:"col-md-12 col-lg-12"},Nk={class:"card card-shadow"},Ak=Hs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Hs("div",{class:"text-center"},[Hs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Hs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Ek={class:"card-body"},Tk={id:"table_asset"},Pk={class:"d-flex align-items-center justify-content-end mb-2"},Uk=["title"],Ik=[Hs("i",{class:"text-danger fa-solid fa-triangle-exclamation"},null,-1)],Ok={class:"d-flex ms-auto"},Mk={class:"m-1"},jk=Hs("button",{type:"button",id:"reload-graph",class:"btn btn-link btn-reload-graph"},[Hs("i",{class:"fas fa-sync"})],-1),Lk=Hs("button",{type:"button",id:"autolayout",class:"btn btn-link btn-stabilize"},[Hs("i",{class:"fas fa-magic"})],-1),Rk={class:"card-footer"},Dk={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Fk=Hs("i",{class:"fas fa-trash"},null,-1),qk=["href"],zk=[Hs("i",{class:"fas fa-download"},null,-1)];$k.render=function(e,t,a,l,n,s){const o=$n("select-search"),i=$n("modal-delete-confirm"),r=$n("modal-autolayout-confirm"),c=$n("network-map");return Us(),Ls("div",Sk,[Hs("div",Ck,[Hs("div",Nk,[Ak,Hs("div",Ek,[Hs("div",Tk,[Hs("div",Pk,[Hs("button",{id:"max-entries-reached",type:"button",class:"btn btn-link",title:n.max_entry_title,disabled:"",hidden:""},Ik,8,Uk),Hs("div",Ok,[(Us(!0),Ls(Cs,null,Tn(n.filter_list,((e,t)=>(Us(),Ls("div",Mk,[Gs(o,{selected_option:n.active_filter_list[t],"onUpdate:selected_option":e=>n.active_filter_list[t]=e,options:n.filter_list[t],onSelect_option:s.click_item},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256))]),jk,Lk]),Gs(i,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Gs(r,{ref:"modal_autolayout",title:n.title_autolayout,body:n.body_autolayout,onAutolayout:s.reload_map},null,8,["title","body","onAutolayout"]),Gs(c,{ref:"asset_map",empty_message:n.no_services_message,event_listeners:n.event_listeners,page_csrf:a.page_csrf,url:n.get_url,url_params:a.url_params,map_id:a.map_id},null,8,["empty_message","event_listeners","page_csrf","url","url_params","map_id"])])]),Hs("div",Rk,[Hs("button",Dk,[Fk,Js(" "+ae(n.i18n("map_page.delete_services")),1)]),Hs("a",{href:n.download_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"asset_map.json",target:"_blank"},zk,8,qk)])])])])},$k.__file="http_src/vue/page-asset-map.vue";const Bk={class:"form-group mb-3 row"},Vk={class:"col-form-label col-sm-4"},Hk={class:"col-sm-7"},Gk=Hs("div",{class:"invalid-feedback"},null,-1),Wk={class:"form-group mb-3 row"},Kk={class:"col-form-label col-sm-4 pt-2"},Jk={class:"form-switch col-sm-7 pt-2 ps-3"},Yk={class:"col-form-label"};var Zk={__name:"modal-add-device-exclusion",props:{body:String,title:String,footer:String,list_notes:String},emits:["add"],setup(e,{expose:t,emit:a}){const l=ma(""),n=ma(""),s=ma(null),o=()=>{a("add",{mac_list:l.value,trigger_alerts:n.value}),i()},i=()=>{s.value.close()};t({show:()=>{l.value="",s.value.show()},close:i}),pn((()=>{}));const r=e=>i18n(e);return(t,a)=>(Us(),Rs(sp,{onShowed:a[2]||(a[2]=e=>{}),ref_key:"modal_id",ref:s},{title:hl((()=>[Js(ae(e.title),1)])),body:hl((()=>[Hs("div",Bk,[Hs("label",Vk,ae(e.body),1),Hs("div",Hk,[xn(Hs("textarea",{name:"items-list",id:"itemslist-textarea",class:"w-100 form-control",rows:"6","onUpdate:modelValue":a[0]||(a[0]=e=>l.value=e)},null,512),[[ji,l.value]]),Hs("small",null,ae(e.list_notes),1),Gk])]),Hs("div",Wk,[Hs("label",Kk,ae(r("edit_check.trigger_device_disconnected_alert")),1),Hs("div",Jk,[xn(Hs("input",{type:"checkbox",class:"form-check-input ms-0","onUpdate:modelValue":a[1]||(a[1]=e=>n.value=e)},null,512),[[Li,n.value]])]),Hs("small",Yk,ae(r("edit_check.trigger_device_disconnected_alert_descr")),1)])])),footer:hl((()=>[Js(ae(r("host_details.notes"))+": "+ae(e.footer)+" ",1),Hs("button",{type:"button",onClick:o,class:"btn btn-primary"},ae(r("add")),1)])),_:1},512))},__file:"http_src/vue/modal-add-device-exclusion.vue"};const Xk={key:0,class:"form-group mb-3 row"},Qk={class:"col-form-label col-sm-4"},e$={class:"col-sm-7"},t$=["placeholder"],a$={class:"form-group mb-3 row"},l$={class:"col-form-label col-sm-4"},n$={class:"col-sm-7"},s$={class:"form-group mb-3 row"},o$={class:"col-form-label col-sm-4 pt-2"},i$={class:"form-switch col-sm-7 pt-2 ps-3"},r$={class:"col-form-label"};var c$={__name:"modal-edit-device-exclusion",props:{title:String,title_edit_all:String},emits:["edit"],setup(e,{expose:t,emit:a}){const l=ma(""),n=ma(""),s=ma(""),o=ma(i18n("if_stats_config.custom_name")),i=ma(null),r=e=>i18n(e),c=ma([{id:"allowed",value:"allowed",label:r("allowed")},{id:"denied",value:"denied",label:r("denied")}]),u=ma(!1),d=()=>{0==u.value?a("edit",{mac_alias:l.value,mac_status:n.value.value,trigger_alerts:s.value}):a("edit",{mac_status:n.value.value,trigger_alerts:s.value,mac_alias:"all"}),_()},_=()=>{i.value.close()};return t({show:e=>{if(null!=e){let t=null;c.value.forEach((a=>{a.id==e.status&&(t=a)})),n.value=t,l.value=e.mac_address.mac,s.value=e.trigger_alert||!1}else n.value=c.value[0],u.value=!0;i.value.show()},close:_}),pn((()=>{})),(t,a)=>(Us(),Rs(sp,{onShowed:a[3]||(a[3]=e=>{}),ref_key:"modal_id",ref:i},{title:hl((()=>[0==u.value?(Us(),Ls(Cs,{key:0},[Js(ae(e.title),1)],64)):(Us(),Ls(Cs,{key:1},[Js(ae(e.title_edit_all),1)],64))])),body:hl((()=>[0==u.value?(Us(),Ls("div",Xk,[Hs("label",Qk,ae(r("edit_check.device_alias")),1),Hs("div",e$,[xn(Hs("input",{type:"text",name:"custom_name",class:"form-control",placeholder:o.value,"onUpdate:modelValue":a[0]||(a[0]=e=>l.value=e)},null,8,t$),[[ji,l.value]])])])):Zs("v-if",!0),Hs("div",a$,[Hs("label",l$,ae(r("edit_check.device_status")),1),Hs("div",n$,[Gs(n_,{selected_option:n.value,"onUpdate:selected_option":a[1]||(a[1]=e=>n.value=e),options:c.value},null,8,["selected_option","options"])])]),Hs("div",s$,[Hs("label",o$,ae(r("edit_check.trigger_device_disconnected_alert")),1),Hs("div",i$,[xn(Hs("input",{type:"checkbox",class:"form-check-input ms-0","onUpdate:modelValue":a[2]||(a[2]=e=>s.value=e)},null,512),[[Li,s.value]])]),Hs("small",r$,ae(r("edit_check.trigger_device_disconnected_alert_descr")),1)])])),footer:hl((()=>[Hs("button",{type:"button",onClick:d,class:"btn btn-primary"},ae(r("edit")),1)])),_:1},512))},__file:"http_src/vue/modal-edit-device-exclusion.vue"};const u$={class:"row"},d$={class:"col-md-12 col-lg-12"},_$=Hs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),p$={class:"card"},f$={class:"card-body"},v$={key:0,class:"alert alert-info"},m$={id:"table_devices_vue"},h$=[Hs("i",{class:"fas fa-plus"},null,-1)],g$={class:"card-footer"},b$=Hs("i",{class:"fas fa-trash"},null,-1),y$=Hs("i",{class:"fas fa-edit"},null,-1);var w$={__name:"page-device-exclusions",props:{context:Object},setup(e){const t=e,a=ma(),l=ma(),n=ma(),s=ma(),o=ma(),i=ma("device_exclusions"),r=`${http_prefix}/lua/pro/rest/v2/add/device/exclusion.lua`,c=`${http_prefix}/lua/pro/rest/v2/delete/device/exclusion.lua`,u=`${http_prefix}/lua/pro/rest/v2/edit/device/exclusion.lua`,d=`${http_prefix}/lua/pro/rest/v2/get/device/learning_status.lua`,_=ma(!1),p=e=>i18n(e);let f="",v="",m=p("edit_check.delete_all_device_exclusions"),h=p("edit_check.delete_all_device_exclusions_message"),g=p("edit_check.add_device_exclusion"),b=p("edit_check.add_device_exclusion_message"),y=p("edit_check.add_device_exclusion_notes"),w=p("edit_check.add_device_exclusion_list_notes"),x=p("edit_check.edit_device_exclusion"),k=p("edit_check.edit_all_devices_status"),$=p("edit_check.learning"),S=ma(null),C=ma(null);const N={csrf:t.context.csrf,ifid:t.context.ifid};function A(e){let t={click_button_edit_device:T,click_button_historical_flows:P,click_button_delete:E};null!=t[e.event_id]&&t[e.event_id](e)}async function E(e){let t=`${i18n("edit_check.delete_device_exclusion")} ${e.row.mac_address.mac}`;S.value=e.row,v=t,f=i18n("edit_check.device_exclusion"),l.value.show(v,f)}async function T(e){C.value=e.row,o.value.show(C.value)}function P(e){const t=e.row,a=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${t.first_seen.timestamp}&epoch_end=${t.last_seen.timestamp}&mac=${t.mac_address.mac};eq&aggregated=false`;window.open(a,"_blank")}pn((async()=>{await L()}));const U=t.crsf,I=async function(){const e=S.value,t=NtopUtils.buildURL(c,{device:e.mac_address.mac});N.device={mac:e.mac_address.mac},await ntopng_utility.http_post_request(t,N),R()},O=async function(){n.value.show()},M=async function(){o.value.show()},j=async function(){const e=NtopUtils.buildURL(c,{device:"all"});await ntopng_utility.http_post_request(e,N),R()},L=async function(){(await ntopng_utility.http_request(d)).learning_done?_.value=!1:_.value=!0},R=async function(){await L(),a.value.refresh_table()};function D(){s.value.show()}const F=async function(e){let t=e;t.mac_list=t.mac_list.replace(/(?:\t| )/g,""),t.mac_list=t.mac_list.replace(/(?:\r\n|\r|\n)/g,",");const a=NtopUtils.buildURL(r,{...t});await ntopng_utility.http_post_request(a,N),R()},q=async function(e){let a=C.value;null!=a&&(e.mac_alias=e.mac_alias.replace(/(?:\t| )/g,"")),null!=a&&(e.mac=a.mac_address.mac),e.csrf=t.context.csrf;const l=NtopUtils.buildURL(u,{...e});await ntopng_utility.http_post_request(l,N),R()};function z(e,t,a){if(null!=e){let l=t[e.data.data_field],n=a[e.data.data_field];if("last_ip"==e.id)return""!=l&&(l=B(l),l=NtopUtils.convertIPAddress(l)),""!=n&&(n=B(n),n=NtopUtils.convertIPAddress(n)),1==e.sort?l.localeCompare(n):n.localeCompare(l);if("manufacturer"==e.id)return void 0===l&&(l=""),void 0===n&&(n=""),1==e.sort?l.localeCompare(n):n.localeCompare(l);if("mac_address"==e.id)return l=l.mac,n=n.mac,1==e.sort?l.localeCompare(n):n.localeCompare(l);if("first_seen"==e.id)return l=0==t.first_seen.timestamp?"":t.first_seen.data,n=0==a.first_seen.timestamp?"":a.first_seen.data,1==e.sort?l.localeCompare(n):n.localeCompare(l);if("last_seen"==e.id)return l=0==t.last_seen.timestamp?"":t.last_seen.data,n=0==a.last_seen.timestamp?"":a.last_seen.data,1==e.sort?l.localeCompare(n):n.localeCompare(l);if("status"==e.id)return 1==e.sort?l.localeCompare(n):n.localeCompare(l);if("trigger_alert"==e.id)return l=V(l),n=V(n),1==e.sort?l.localeCompare(n):n.localeCompare(l)}}function B(e){return e.split("host=")[1].split("'")[0]}function V(e){return e?"true":e?"true"==e||"false"==e?e:void 0:"false"}const H=async e=>{let t={mac_address:(e,t)=>{let a=e.mac,l=e.alias;return e.symbolic_mac&&e.symbolic_mac!=a&&(a=e.symbolic_mac),null!=l&&l!=a&&(a=`${a} (${l})`),null!=e.url&&(a=`<a href='${e.url}' title='${e.mac}'>${a}</a>`),a},first_seen:(e,t)=>0==e.timestamp?"":e.data,last_seen:(e,t)=>0==e.timestamp?"":e.data,status:(e,t)=>{const a=p(e);return"allowed"==e?`<span class="badge bg-success" title="${a}">${a}</span>`:`<span class="badge bg-danger" title="${a}">${a}</span>`},trigger_alert:(e,t)=>{let a=!1;return a="false"!=e&&e,a?'<i class="fas fa-check text-success"></i>':'<i class="fas fa-times text-danger"></i>'}};return e.forEach((e=>{e.render_func=t[e.data_field]})),e},G=()=>({ifid:ntopng_url_manager.get_url_entry("ifid")||t.context.ifid});const W=e=>e;return(e,t)=>(Us(),Ls("div",u$,[Hs("div",d$,[_$,Hs("div",p$,[Hs("div",f$,[_.value?(Us(),Ls("div",v$,ae(wa($)),1)):Zs("v-if",!0),Hs("div",m$,[Gs(zw,{ref_key:"modal_delete_confirm",ref:l,title:wa(f),body:wa(v),onDelete:I},null,8,["title","body"]),Gs(zw,{ref_key:"modal_delete_all",ref:n,title:wa(m),body:wa(h),onDelete:j},null,8,["title","body"]),Gs(Zk,{ref_key:"modal_add_device",ref:s,title:wa(g),body:wa(b),footer:wa(y),list_notes:wa(w),onAdd:F},null,8,["title","body","footer","list_notes"]),Gs(c$,{ref_key:"modal_edit_device",ref:o,title:wa(x),title_edit_all:wa(k),onEdit:q},null,8,["title","title_edit_all"]),Gs(rv,{ref_key:"table_device_exclusions",ref:a,csrf:wa(U),table_id:i.value,f_map_columns:H,get_extra_params_obj:G,f_map_config:W,f_sort_rows:z,onCustom_event:A},{custom_header:hl((()=>[Hs("button",{class:"btn btn-link",type:"button",ref:"add_device",onClick:D},h$,512)])),_:1},8,["csrf","table_id"])])]),Hs("div",g$,[Hs("button",{type:"button",onClick:O,class:"btn btn-danger me-1"},[b$,Js(" "+ae(p("edit_check.delete_all_device_exclusions")),1)]),Hs("button",{type:"button",onClick:M,class:"btn btn-secondary"},[y$,Js(" "+ae(p("edit_check.edit_all_devices_status")),1)])])])])]))},__file:"http_src/vue/page-device-exclusions.vue"},x$={components:{datatable:ow},props:{page_csrf:String,url_params:Object},created(){!function(e){const t=[];let a=[],l=3;t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let n={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/fingerprint/data.lua`,url_params),enable_search:!0};a=[{columnName:i18n("ja3_client_fingerprint"),name:"ja3",data:"ja3",className:"text-nowrap",render:(e,t)=>`<a class="ntopng-external-link" href="https://sslbl.abuse.ch/ja3-fingerprints/${e}">${e} <i class="fas fa-external-link-alt"></i></a>`,responsivePriority:0,createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("status"),name:"is_malicious",data:"is_malicious",className:"text-nowrap text-center",responsivePriority:0,render:(e,t)=>e?`<i class="fa-solid fa-face-frown text-danger" title="${i18n("malicious")}"></i>`:`<i class="fa-solid fa-face-smile text-success" title="${i18n("ok")}"></i>`},{columnName:i18n("app_name"),name:"app_name",data:"app_name",className:"text-nowrap text-right",responsivePriority:1},{columnName:i18n("num_uses"),name:"num_uses",data:"num_uses",className:"text-nowrap text-right",responsivePriority:1,render:e=>NtopUtils.formatValue(e)}];let s={serverSide:!1,order:[[l,"desc"]]},o=ntopng_utility.clone(n);o.table_buttons=n.table_buttons,o.data_url=`${o.data_url}`,o.columns_config=a,o.table_config=ntopng_utility.clone(s),e.config_devices_standard=o}(this)},mounted(){},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null}),methods:{reload_table:function(){this.get_active_table().reload()},get_active_table:function(){return this.$refs.table_fingerprint}}};const k$={class:"row"},$$={class:"col-md-12 col-lg-12"},S$=Hs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),C$={class:"card"},N$={class:"card-body"},A$={id:"table_host_tls"},E$={class:"card-footer"};x$.render=function(e,t,a,l,n,s){const o=$n("datatable");return Us(),Ls("div",k$,[Hs("div",$$,[S$,Hs("div",C$,[Hs("div",N$,[Hs("div",A$,[Gs(o,{ref:"table_fingerprint",table_buttons:n.config_devices_standard.table_buttons,columns_config:n.config_devices_standard.columns_config,data_url:n.config_devices_standard.data_url,enable_search:n.config_devices_standard.enable_search,table_config:n.config_devices_standard.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])]),Hs("div",E$,[Hs("b",null,ae(n.i18n("fingerprint_note")),1)])])])])},x$.__file="http_src/vue/page-host-tls.vue";var T$={components:{datatable:ow},props:{page_csrf:String,url_params:Object},created(){!function(e){const t=[];let a=[],l=3;t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let n={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/fingerprint/data.lua`,url_params),enable_search:!0};a=[{columnName:i18n("hassh_fingerprint"),name:"ja3",data:"ja3",className:"text-nowrap",render:(e,t)=>`<a class="ntopng-external-link" href="https://sslbl.abuse.ch/ja3-fingerprints/${e}">${e} <i class="fas fa-external-link-alt"></i></a>`,responsivePriority:0,createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("status"),name:"is_malicious",data:"is_malicious",className:"text-nowrap text-center",responsivePriority:0,render:(e,t)=>e?`<i class="fa-solid fa-face-frown text-danger" title="${i18n("malicious")}"></i>`:`<i class="fa-solid fa-face-smile text-success" title="${i18n("ok")}"></i>`},{columnName:i18n("app_name"),name:"app_name",data:"app_name",className:"text-nowrap text-right",responsivePriority:1},{columnName:i18n("num_uses"),name:"num_uses",data:"num_uses",className:"text-nowrap text-right",responsivePriority:1,render:e=>NtopUtils.formatValue(e)}];let s={serverSide:!1,order:[[l,"desc"]]},o=ntopng_utility.clone(n);o.table_buttons=n.table_buttons,o.data_url=`${o.data_url}`,o.columns_config=a,o.table_config=ntopng_utility.clone(s),e.config_devices_standard=o}(this)},mounted(){},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null}),methods:{reload_table:function(){this.get_active_table().reload()},get_active_table:function(){return this.$refs.table_hassh}}};const P$={class:"row"},U$={class:"col-md-12 col-lg-12"},I$=Hs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),O$={class:"card"},M$={class:"card-body"},j$={id:"table_host_ssh"};T$.render=function(e,t,a,l,n,s){const o=$n("datatable");return Us(),Ls("div",P$,[Hs("div",U$,[I$,Hs("div",O$,[Hs("div",M$,[Hs("div",j$,[Gs(o,{ref:"table_hassh",table_buttons:n.config_devices_standard.table_buttons,columns_config:n.config_devices_standard.columns_config,data_url:n.config_devices_standard.data_url,enable_search:n.config_devices_standard.enable_search,table_config:n.config_devices_standard.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])])])])])},T$.__file="http_src/vue/page-host-ssh.vue";const L$="change_map_event";var R$={components:{"page-periodicity-map":nk,"page-periodicity-table":lx,"page-asset-map":$k,"page-asset-table":Vw,"page-service-map":Rx,"page-service-table":yx,"page-navbar":s_},props:{page_csrf:String,base_url_params:Object,ifid:Number,is_admin:Boolean,map_id:String,view:String,navbar_info:Object,service_acceptance:Array,service_map_filter_list:Object,service_table_filter_list:Array,periodicity_map_filter_list:Object,periodicity_table_filter_list:Array,asset_map_filter_list:Object,asset_table_filter_list:Array},created(){this.url_params=this.$props.base_url_params,this.active_tab=this.$props.map_id,this.page=this.url_params.page,this.updated_view=this.$props.view,asset_map_filter_list&&asset_table_filter_list&&(this.navbar_context.items_table.push({active:!1,class:"disabled ps-0 pe-0",label:"-"}),this.navbar_context.items_table.push({active:!1,icon:"fas fa-lg fa-compass",class:"disabled pe-0",title:i18n("asset_map"),label:i18n("asset")+": "}),this.navbar_context.items_table.push({active:!1,label:i18n("map_format"),id:"asset_map",page:"graph"}),this.navbar_context.items_table.push({active:!1,class:"disabled ps-0 pe-0",label:"/"}),this.navbar_context.items_table.push({active:!1,label:i18n("table_format"),id:"asset_map",page:"table"})),this.navbar_context.items_table.forEach((e=>{e.id==this.active_tab&&e.page==this.page?e.active=!0:e.active=!1}))},mounted(){const e=this.format_navbar_title;e(this.$props.navbar_info),ntopng_events_manager.on_custom_event("page_navbar",ntopng_custom_events.CHANGE_PAGE_TITLE,(t=>{e({selected_iface:this.$props.navbar_info.selected_iface,selected_host:t})})),ntopng_events_manager.on_custom_event("change_service_table_tab",L$,(t=>{x.set_key_to_url("map",t.id),x.set_key_to_url("page",t.page),"table"==t.page&&this.destroy(),this.active_tab=t.id,this.page=t.page,this.url_params.map=t.id,this.url_params.page=t.page,this.updated_view=x.get_url_entry("view"),e()}))},data:()=>({i18n:e=>i18n(e),active_tab:null,page:null,url_params:{},updated_view:null,navbar_node:{},navbar_context:{main_title:{label:" "+i18n("maps"),icon:"fas fa-map"},secondary_title_list:[],items_table:[{active:!1,icon:"fas fa-lg fa-concierge-bell",class:"disabled pe-0",title:i18n("service_map"),label:i18n("service")+": "},{active:!0,label:i18n("map_format"),id:"service_map",page:"graph"},{active:!1,class:"disabled ps-0 pe-0",label:"/"},{active:!1,label:i18n("table_format"),id:"service_map",page:"table"},{active:!1,class:"disabled ps-0 pe-0",label:"-"},{active:!1,icon:"fas fa-lg fa-clock",class:"disabled pe-0",title:i18n("periodicity_map"),label:i18n("periodicity")+": "},{active:!1,label:i18n("map_format"),id:"periodicity_map",page:"graph"},{active:!1,class:"disabled ps-0 pe-0",label:"/"},{active:!1,label:i18n("table_format"),id:"periodicity_map",page:"table"}]}}),methods:{destroy:function(){this.get_active_tab().destroy()},format_navbar_title:function(e){if(e?this.navbar_node=e:e=this.navbar_node,this.navbar_context.secondary_title_list=[{label:e.selected_iface.label,title:NtopUtils.shortenLabel(`${e.selected_iface.label}`,16)}],e.selected_host&&""!=e.selected_host.id){const t=e.selected_host.label,a=NtopUtils.removeVlan(e.selected_host.id);this.navbar_context.secondary_title_list[0].href=`${http_prefix}/lua/pro/enterprise/network_maps.lua?map=${this.active_tab}&page=${this.page}&ifid=${this.$props.ifid}`,this.navbar_context.secondary_title_list.push({label:`${NtopUtils.formatNameValue(t,a)}`,title:`${e.selected_host.label}`,href:e.selected_host.is_active?`${http_prefix}/lua/host_details.lua?host=${a}`:null,icon:"fa-solid fa-laptop",target_blank:"true"})}},get_active_tab:function(){return this.$refs[this.active_tab+"_"+this.page]},click_item:function(e){e.id==this.active_tab&&e.page==this.page||(this.navbar_context.items_table.forEach((e=>e.active=!1)),e.active=!0,ntopng_events_manager.emit_custom_event(L$,e))}}};R$.render=function(e,t,a,l,n,s){const o=$n("page-navbar"),i=$n("page-service-map"),r=$n("page-service-table"),c=$n("page-periodicity-map"),u=$n("page-periodicity-table"),d=$n("page-asset-map"),_=$n("page-asset-table");return Us(),Ls(Cs,null,[Gs(o,{id:"page_navbar",main_title:n.navbar_context.main_title,secondary_title_list:n.navbar_context.secondary_title_list,help_link:n.navbar_context.help_link,items_table:n.navbar_context.items_table,onClick_item:s.click_item},null,8,["main_title","secondary_title_list","help_link","items_table","onClick_item"]),"service_map"==n.active_tab&&"graph"==n.page?(Us(),Rs(i,{key:0,ref:"service_map_graph",page_csrf:a.page_csrf,url_params:n.url_params,ifid:a.ifid,is_admin:a.is_admin,map_id:a.map_id,all_filter_list:a.service_map_filter_list},null,8,["page_csrf","url_params","ifid","is_admin","map_id","all_filter_list"])):Zs("v-if",!0),"service_map"==n.active_tab&&"table"==n.page?(Us(),Rs(r,{key:1,ref:"service_map_table",page_csrf:a.page_csrf,url_params:n.url_params,view:n.updated_view,table_filters:a.service_table_filter_list,is_admin:a.is_admin,service_acceptance:a.service_acceptance},null,8,["page_csrf","url_params","view","table_filters","is_admin","service_acceptance"])):Zs("v-if",!0),"periodicity_map"==n.active_tab&&"graph"==n.page?(Us(),Rs(c,{key:2,ref:"periodicity_map_graph",page_csrf:a.page_csrf,url_params:n.url_params,ifid:a.ifid,is_admin:a.is_admin,map_id:a.map_id,all_filter_list:a.periodicity_map_filter_list},null,8,["page_csrf","url_params","ifid","is_admin","map_id","all_filter_list"])):Zs("v-if",!0),"periodicity_map"==n.active_tab&&"table"==n.page?(Us(),Rs(u,{key:3,ref:"periodicity_map_table",page_csrf:a.page_csrf,url_params:n.url_params,view:n.updated_view,table_filters:a.periodicity_table_filter_list,is_admin:a.is_admin},null,8,["page_csrf","url_params","view","table_filters","is_admin"])):Zs("v-if",!0),a.asset_map_filter_list&&a.asset_table_filter_list?(Us(),Ls(Cs,{key:4},["asset_map"==n.active_tab&&"graph"==n.page?(Us(),Rs(d,{key:0,ref:"asset_map_graph",page_csrf:a.page_csrf,url_params:n.url_params,ifid:a.ifid,is_admin:a.is_admin,map_id:a.map_id,all_filter_list:a.asset_map_filter_list},null,8,["page_csrf","url_params","ifid","is_admin","map_id","all_filter_list"])):Zs("v-if",!0),"asset_map"==n.active_tab&&"table"==n.page?(Us(),Rs(_,{key:1,ref:"asset_map_table",page_csrf:a.page_csrf,url_params:n.url_params,view:n.updated_view,table_filters:a.asset_table_filter_list},null,8,["page_csrf","url_params","view","table_filters"])):Zs("v-if",!0)],64)):Zs("v-if",!0)],64)},R$.__file="http_src/vue/page-home-map.vue";const D$=["width","height"],F$=[Hs("defs",null,null,-1),Hs("g",{class:"nodes",style:{stroke:"#000",strokeOpacity:"0.5"}},null,-1),Hs("g",{class:"links",style:{stroke:"#000",strokeOpacity:"0.3",fill:"none"}},null,-1),Hs("g",{class:"texts"},null,-1)];var q$={__name:"page-sankey",props:{width:Number,height:Number},setup(e){const t=e,a=d3v7,l=ma(null),n=ma({});async function s(){return data=function(e){let t=[],a=[],l={};const n=(e,a,n)=>{if(null!=l[e])return;let s=t.length;l[e]=s;let o={index:s,name:e,href:a,color:n};t.push(o)},s=(e,t,n,s)=>{let o={source:l[e],target:l[t],value:n,label:s};a.push(o)};return e.forEach((e=>{n(e.source,e.source_link,e.source_color),n(e.target,e.target_link,e.target_color),s(e.source,e.target,e.value,e.link)})),{nodes:t,links:a}}([{link_color:"#e377c2",source_color:"#e377c2",source_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=IGMP",target:"224.0.0.251",source:"IGMP",link:"IGMP",target_link:"/lua/host_details.lua?host=224.0.0.251&vlan=0",target_node:"224.0.0.251",source_node:"192.168.1.7",value:60},{link_color:"#e377c2",source_link:"/lua/host_details.lua?host=192.168.1.7&vlan=0",target:"IGMP",source:"192.168.1.7",link:"IGMP",target_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=IGMP",target_node:"224.0.0.2",target_color:"#e377c2",source_node:"192.168.1.7",value:120},{link_color:"#e377c2",source_color:"#e377c2",source_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=IGMP",target:"224.0.0.2",source:"IGMP",link:"IGMP",target_link:"/lua/host_details.lua?host=224.0.0.2&vlan=0",target_node:"224.0.0.2",source_node:"192.168.1.7",value:60},{link_color:"#bcbd22",source_link:"/lua/host_details.lua?host=192.168.1.7&vlan=0",target:"MDNS",source:"192.168.1.7",link:"MDNS",target_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=MDNS",target_node:"224.0.0.251",target_color:"#bcbd22",source_node:"192.168.1.7",value:396},{link_color:"#bcbd22",source_color:"#bcbd22",source_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=MDNS",target:"224.0.0.251",source:"MDNS",link:"MDNS",target_link:"/lua/host_details.lua?host=224.0.0.251&vlan=0",target_node:"224.0.0.251",source_node:"192.168.1.7",value:396}]),data}return _n((async()=>{})),pn((async()=>{!async function(){const e=a.scaleOrdinal(a.schemeCategory10);let o=await s();const i=function(){let e=t.width;null==e&&(e=window.innerWidth-200);let a=t.height;null==a&&(a=window.innerHeight-50);return{width:e,height:a}}();n.value=i;const{links:r,nodes:c}=function(e,t,l){return a.sankey().nodeAlign(a.sankeyCenter).nodeWidth(10).nodePadding(10).extent([[0,5],[t,l]])(e)}(o,i.width-10,i.height-5);a.select(l.value).select("g.nodes").selectAll("rect").data(c).join((t=>{const l=t.append("rect");l.attr("x",(e=>e.x0)).attr("y",(e=>e.y0)),l.transition(a.easeLinear).delay(1e3).duration(500).attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("dataIndex",(e=>e.index)).attr("fill",(t=>e(t.index/c.length))),l.append("title").text((e=>`${e.name}\n${e.hours}`))}),(t=>t.transition(a.easeLinear).delay(500).duration(500).attr("x",(e=>e.x0)).attr("y",(e=>e.y0)).attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("dataIndex",(e=>e.index)).attr("fill",(t=>e(t.index/c.length))).select("title").text((e=>`${e.name}\n${e.hours}`))),(e=>e.transition(a.easeLinear).duration(500).style("opacity",0).remove())).on("dblclick",(function(e){})),a.select(l.value).select("g.texts").selectAll("text").data(c).join((t=>{t.append("text").transition(a.easeLinear).delay(1e3).duration(500).attr("x",(e=>e.x0<i.width/2?e.x1+6:e.x0-6)).attr("y",(e=>(e.y1+e.y0)/2)).attr("fill",(t=>a.rgb(e(t.index/c.length)).darker())).attr("alignment-baseline","middle").attr("text-anchor",(e=>e.x0<i.width/2?"start":"end")).attr("font-size",9).text((e=>e.name))}),(t=>t.transition(a.easeLinear).delay(500).duration(500).attr("x",(e=>e.x0<i.width/2?e.x1+6:e.x0-6)).attr("y",(e=>(e.y1+e.y0)/2)).attr("fill",(t=>a.rgb(e(t.index/c.length)).darker())).attr("text-anchor",(e=>e.x0<i.width/2?"start":"end")).attr("font-size",9).text((e=>e.name))),(e=>e.transition(a.easeLinear).duration(500).style("opacity",0).remove())),a.select(l.value).select("defs").selectAll("linearGradient").data(r).join((t=>{const a=t.append("linearGradient");a.attr("id",(e=>`gradient-${e.index}`)).attr("gradientUnits","userSpaceOnUse").attr("x1",(e=>e.source.x1)).attr("x2",(e=>e.target.x0)),a.append("stop").attr("offset","0").attr("stop-color",(t=>e(t.source.index/c.length))),a.append("stop").attr("offset","100%").attr("stop-color",(t=>e(t.target.index/c.length)))}),(t=>{t.attr("id",(e=>`gradient-${e.index}`)).attr("gradientUnits","userSpaceOnUse").attr("x1",(e=>e.source.x1)).attr("x2",(e=>e.target.x0)),t.selectAll("stop").remove(),t.append("stop").attr("offset","0").attr("stop-color",(t=>e(t.source.index/c.length))),t.append("stop").attr("offset","100%").attr("stop-color",(t=>e(t.target.index/c.length)))}),(e=>e.remove())),a.select(l.value).select("g.links").selectAll("path").data(r).join((e=>{const t=e.append("path");t.transition(a.easeLinear).delay(1e3).duration(500).attr("d",a.sankeyLinkHorizontal()).attr("stroke",(e=>`url(#gradient-${e.index}`)).attr("stroke-width",(e=>e.width)),t.append("title").text((e=>`${e.hours}`))}),(e=>e.transition(a.easeLinear).delay(500).duration(500).attr("d",a.sankeyLinkHorizontal()).attr("stroke",(e=>`url(#gradient-${e.index}`)).attr("stroke-width",(e=>e.width)).select("title").text((e=>`${e.hours}`))),(e=>e.transition(a.easeLinear).duration(500).style("opacity",0).remove()))}()})),(e,t)=>(Us(),Ls("div",null,[(Us(),Ls("svg",{ref_key:"sankey_chart_ref",ref:l,width:n.value.width,height:n.value.height,style:{margin:"10px"}},F$,8,D$))]))}};np("\n.node rect {\n  fill-opacity: 0.9;\n  shape-rendering: crispEdges;\n}\n.node text {\n  pointer-events: none;\n  text-shadow: 0 1px 0 #fff;\n}\n.link {\n  fill: none;\n  stroke: #000;\n  stroke-opacity: 0.2;\n}\n.link:hover {\n  stroke-opacity: 0.5;\n}\n"),q$.__file="http_src/vue/page-sankey.vue";const z$="change_applications_tab_event";var B$={components:{chart:A_,datatable:ow,"modal-delete-confirm":zw,"tab-list":Lw},props:{page_csrf:String,url_params:Object,view:String,is_ch_enabled:Boolean,is_locale:String,ts_l7_enabled:Boolean,ts_cat_enabled:Boolean},created(){this.applications_tab=x.get_url_entry("view")||this.$props.view,this.tab_list.forEach((e=>{this.applications_tab==e.id?e.active=!0:e.active=!1})),function(e){const t=[];t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let a=url_params;a.view="applications";let l={table_buttons:t,data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/l7/data.lua`,a),enable_search:!0,table_config:{serverSide:!1,order:[[6,"desc"]],columnDefs:[{type:"time-uni",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3},{type:"file-size",targets:5}]}},n=[{columnName:i18n("host_details.application"),targets:0,width:"20",name:"application",data:"application",className:"text-nowrap",responsivePriority:1,render:t=>"1"==e.$props.is_locale&&!0===e.$props.ts_l7_enabled?`<a href="${http_prefix}/lua/host_details.lua?host=${e.$props.url_params.host}@${e.$props.url_params.vlan}&page=historical&ifid=${e.$props.url_params.ifid}&protocol=${t.label}&ts_schema=host:ndpi" target="_blank">${t.label}</a>`:`${t.label}`},{columnName:i18n("host_details.duration"),targets:1,width:"10",name:"duration",data:"duration",className:"text-nowrap",responsivePriority:1,render:e=>NtopUtils.secondsToTime(e)},{columnName:i18n("host_details.sent"),targets:2,width:"10",name:"sent",data:"bytes_sent",className:"text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.rcvd"),targets:3,width:"10",name:"rcvd",data:"bytes_rcvd",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.breakdown"),targets:4,width:"10",name:"breakdown",data:"breakdown",orderable:!1,className:"text-center text-nowrap",responsivePriority:2,render:(e,t,a)=>{const l=100*a.bytes_sent/a.tot_bytes,n=100*a.bytes_rcvd/a.tot_bytes;return NtopUtils.createBreakdown(l,n,i18n("host_details.sent"),i18n("host_details.rcvd"))}},{columnName:i18n("host_details.tot_bytes"),targets:5,width:"20",name:"tot_bytes",data:"tot_bytes",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.tot_percentage"),targets:6,width:"20",name:"percentage",data:"percentage",className:"text-center text-nowrap",responsivePriority:2,render:e=>{const t=e.toFixed(1);return NtopUtils.createProgressBar(t)}}];is_ch_enabled&&e.add_action_column(n,"l7proto","application");let s=ntopng_utility.clone(l);s.columns_config=n,e.config_devices_applications=s,a.view="categories",l.data_url=NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/l7/data.lua`,a),n=[{columnName:i18n("host_details.category"),targets:0,name:"category",data:"category",className:"text-nowrap",responsivePriority:1,render:t=>"1"==e.$props.is_locale&&!0===e.$props.ts_cat_enabled?`<a href="${http_prefix}/lua/host_details.lua?host=${e.$props.url_params.host}@${e.$props.url_params.vlan}&ts_schema=host:ndpi_categories&page=historical&category=${t.label}" target="_blank">${t.label}</a>`:`${t.label}`},{columnName:i18n("host_details.applications"),targets:0,name:"applications",data:"applications",orderable:!1,className:"text-nowrap",responsivePriority:1,render:t=>"1"==e.$props.is_locale?`${t.label||""} <a href="${http_prefix}/${t.href}${t.category_id}">${t.more_protos||""}</a>`:`${t.label||""}`},{columnName:i18n("host_details.duration"),targets:0,name:"duration",data:"duration",className:"text-nowrap",responsivePriority:1,render:e=>NtopUtils.secondsToTime(e)},{columnName:i18n("host_details.tot_bytes"),targets:0,name:"tot_bytes",data:"tot_bytes",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.tot_percentage"),targets:0,name:"percentage",data:"percentage",className:"text-center text-nowrap",responsivePriority:2,render:e=>{const t=e.toFixed(1);return NtopUtils.createProgressBar(t)}}],is_ch_enabled&&e.add_action_column(n,"l7cat","category");let o=ntopng_utility.clone(l);o.columns_config=n,o.table_config.order=[[4,"desc"]],o.table_config.columnDefs=[{type:"time-uni",targets:2},{type:"file-size",targets:3}],e.config_devices_categories=o}(this)},mounted(){N.on_custom_event("change_applications_tab_event",z$,(e=>{let t=this.get_active_table();x.set_key_to_url("view",e.id),t.destroy_table(),this.applications_tab=e.id}))},data(){return{i18n:e=>i18n(e),applications_tab:null,config_devices_applications:null,config_devices_categories:null,chart_options:[{title:i18n("graphs.top_10_ndpi_protocols"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l7/proto_data.lua`,tab:"applications",id:"top_applications"},{title:i18n("graphs.top_breed"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l7/breed_data.lua`,tab:"applications",id:"top_breed"},{title:i18n("graphs.top_10_ndpi_categories"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l7/cat_data.lua`,tab:"categories",id:"top_categories"},{title:i18n("graphs.top_breed"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l7/breed_data.lua`,tab:"categories",id:"top_breed"}],tab_list:[{title:i18n("host_details.applications_tab"),active:"applications"==this.$props.view,id:"applications"},{title:i18n("host_details.categories_tab"),active:"categories"==this.$props.view,id:"categories"}]}},methods:{add_action_column:function(e,t,a){const l=`${this.$props.url_params.host}`,n=`${this.$props.url_params.vlan}`,s=`${this.$props.url_params.ifid}`;let o="page-stats-action-jump-historical";e.push({columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:o,render:(e,i,r)=>{const c={handlerId:o,onClick:()=>{let e=`${http_prefix}/lua/pro/db_search.lua?ifid=${s}&${t}=${r[a].id};eq&ip=${l};eq`;0!=n&&(e=`${e}&vlan_id=${n};eq`),window.open(e)}};return DataTableUtils.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:c}])}})},destroy:function(){this.get_active_table().destroy_table()},click_item:function(e){this.tab_list.forEach((e=>e.active=!1)),e.active=!0,N.emit_custom_event(z$,e)},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},get_active_table:function(){return this.$refs[`table_host_${this.applications_tab}`]},get_f_get_custom_chart_options:()=>(console.log("get_f_"),async e=>charts_options_items.value[chart_index].chart_options)}};const V$={class:"row"},H$={class:"col-md-12 col-lg-12"},G$={class:"card"},W$=Hs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Hs("div",{class:"text-center"},[Hs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Hs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),K$={class:"card-body"},J$={id:"host_details_applications"},Y$={class:"row mb-4 mt-4",id:"host_details_applications"},Z$={class:"col-6"},X$={key:0,class:"widget-name"};B$.render=function(e,t,a,l,n,s){const o=$n("tab-list"),i=$n("chart"),r=$n("datatable");return Us(),Ls("div",V$,[Hs("div",H$,[Hs("div",G$,[W$,Hs("div",K$,[Hs("div",J$,[Gs(o,{ref:"host_details_applications_tab_list",id:"host_details_applications_tab_list",tab_list:n.tab_list,onClick_item:s.click_item},null,8,["tab_list","onClick_item"]),Hs("div",Y$,[(Us(!0),Ls(Cs,null,Tn(n.chart_options,(e=>(Us(),Ls("div",Z$,[e.tab==n.applications_tab?(Us(),Ls("h3",X$,ae(e.title),1)):Zs("v-if",!0),e.tab==n.applications_tab?(Us(),Rs(i,{key:1,id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!1},null,8,["id","chart_type","base_url_request"])):Zs("v-if",!0)])))),256))]),"applications"==n.applications_tab?(Us(),Rs(r,{key:0,ref:"table_host_applications",table_buttons:n.config_devices_applications.table_buttons,columns_config:n.config_devices_applications.columns_config,data_url:n.config_devices_applications.data_url,enable_search:n.config_devices_applications.enable_search,table_config:n.config_devices_applications.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])):Zs("v-if",!0),"categories"==n.applications_tab?(Us(),Rs(r,{key:1,ref:"table_host_categories",table_buttons:n.config_devices_categories.table_buttons,columns_config:n.config_devices_categories.columns_config,data_url:n.config_devices_categories.data_url,enable_search:n.config_devices_categories.enable_search,table_config:n.config_devices_categories.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])):Zs("v-if",!0)])])])])])},B$.__file="http_src/vue/page-host-details-applications.vue";const Q$={class:"row"},eS={class:"col-md-12 col-lg-12"},tS={class:"card"},aS=Hs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Hs("div",{class:"text-center"},[Hs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Hs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),lS={class:"card-body"},nS={id:"host_details_traffic"},sS={class:"row mb-4 mt-4",id:"host_details_traffic"},oS={class:"col-4"},iS={class:"widget-name"};var rS={__name:"page-host-details-traffic",props:{page_csrf:String},setup(e){const t=ma(null);ma([]);const a=ma({});_n((async()=>{!function(e){const l=[];let n={};n.host=x.get_url_entry("host"),n.vlan=x.get_url_entry("vlan"),n.ifid=x.get_url_entry("ifid"),l.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,a,l,n){t.value.reload()}});let s={table_buttons:l,data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/l4/data.lua`,n),enable_search:!0,table_config:{serverSide:!1,order:[[6,"desc"]],columnDefs:[{type:"time-uni",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3},{type:"file-size",targets:5}]}},o=[{columnName:i18n("protocol"),targets:0,name:"protocol",data:"protocol",className:"text-nowrap",responsivePriority:1},{columnName:i18n("chart"),targets:1,name:"historical",data:"historical",className:"text-nowrap",responsivePriority:1},{columnName:i18n("traffic_labels.bytes_sent"),targets:2,name:"sent",data:"bytes_sent",className:"text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("traffic_labels.bytes_rcvd"),targets:3,name:"rcvd",data:"bytes_rcvd",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("traffic_labels.breakdown"),targets:4,name:"breakdown",data:"breakdown",orderable:!1,className:"text-center text-nowrap",responsivePriority:2,render:(e,t,a)=>{const l=100*a.bytes_sent/a.total_bytes,n=100*a.bytes_rcvd/a.total_bytes;return NtopUtils.createBreakdown(l,n,i18n("host_details.sent"),i18n("host_details.rcvd"))}},{columnName:i18n("traffic_labels.total_bytes"),targets:5,name:"tot_bytes",data:"total_bytes",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("traffic_labels.total_percentage"),targets:6,width:"20%",name:"percentage",data:"total_percentage",className:"text-center text-nowrap",responsivePriority:2,render:e=>{const t=e.toFixed(1);return NtopUtils.createProgressBar(t)}}],i=ntopng_utility.clone(s);i.columns_config=o,a.value=i}()})),hn((async()=>{t.value.destroy_table()}));const l=[{title:i18n("graphs.l4_proto"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l4/proto_data.lua`,id:"traffic_protos"},{title:i18n("graphs.contacted_hosts"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l4/contacted_hosts_data.lua`,id:"contacted_hosts"},{title:i18n("graphs.traffic"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l4/traffic_data.lua`,id:"traffic"}];return(e,n)=>(Us(),Ls("div",Q$,[Hs("div",eS,[Hs("div",tS,[aS,Hs("div",lS,[Hs("div",nS,[Hs("div",sS,[(Us(),Ls(Cs,null,Tn(l,(e=>Hs("div",oS,[Hs("h3",iS,ae(e.title),1),Gs(A_,{id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!1},null,8,["id","chart_type","base_url_request"])]))),64))]),Gs(ow,{ref_key:"traffic_table",ref:t,table_buttons:a.value.table_buttons,columns_config:a.value.columns_config,data_url:a.value.data_url,enable_search:a.value.enable_search,table_config:a.value.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])])])])]))},__file:"http_src/vue/page-host-details-traffic.vue"};const cS={class:"row"},uS={class:"col-md-12 col-lg-12"},dS={class:"card"},_S=Hs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Hs("div",{class:"text-center"},[Hs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Hs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),pS={class:"card-body"},fS={class:"row"},vS={class:"col-6 mb-4 mt-4"},mS={class:"widget-name"};var hS={__name:"page-host-details-packets",props:{page_csrf:String,url_params:Object},setup(e){const t=[{title:i18n("graphs.packets_sent"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/packets/sent_data.lua`,id:"packets_sent"},{title:i18n("graphs.packets_rcvd"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/packets/rcvd_data.lua`,id:"packets_rcvd"},{title:i18n("graphs.tcp_flags"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/packets/tcp_flags_data.lua`,id:"tcp_flags"},{title:i18n("graphs.arp_distribution"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/packets/arp_data.lua`,id:"arp_requests"}];function l(e,t,l){a.hideOverlays()}return pn((()=>{})),(e,a)=>(Us(),Ls("div",cS,[Hs("div",uS,[Hs("div",dS,[_S,Hs("div",pS,[Hs("div",fS,[(Us(),Ls(Cs,null,Tn(t,(e=>Hs("div",vS,[Hs("h3",mS,ae(e.title),1),Gs(A_,{id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!1,onChart_reloaded:l},null,8,["id","chart_type","base_url_request"])]))),64))])])])])]))},__file:"http_src/vue/page-host-details-packets.vue"};const gS={key:0,class:"alert alert-info",id:"empty-message"},bS=["width","height"],yS=[Hs("g",{class:"nodes",style:{stroke:"#000",strokeOpacity:"0.5"}},null,-1),Hs("g",{class:"links",style:{stroke:"#000",strokeOpacity:"0.3",fill:"none"}},null,-1)];var wS={__name:"sankey",props:{no_data_message:String,width:Number,height:Number,sankey_data:Object},emits:["node_click","update_width","update_height"],setup(e,{expose:t,emit:a}){const l=e,n=d3v7,s=ma(!1),o=ma(null),i=ma({});function r(e){e&&($(".nodes",o.value).empty(),$(".links",o.value).empty()),null!=l.sankey_data.nodes&&null!=l.sankey_data.links&&0!=l.sankey_data.length&&0!=l.sankey_data.links.length&&d()}_n((async()=>{})),pn((async()=>{r(),window.addEventListener("resize",(()=>r(!0)))})),jl((()=>l.sankey_data),((e,t)=>{r(!0)}));let c=null,u=null;async function d(){const e=n.scaleOrdinal(n.schemeCategory10);let t=l.sankey_data;const s=function(){a("update_width");let e=l.width;null==e&&(e=$(o.value).parent().parent().width()-10);a("update_height");let t=l.height;null==t&&(t=$(o.value).parent().parent().height()-80);return{width:e,height:t}}();var r,d;i.value=s,r=s.width-10,d=s.height-5,c=n.sankey().nodeAlign(n.sankeyCenter).nodeWidth(10).nodePadding(10).extent([[0,5],[r,d]]),u=c(t);const{links:v,nodes:m}=u;let h=n.select(o.value).select("g.nodes").selectAll("g").data(m).join((e=>e.append("g"))).attr("transform",(e=>`translate(${e.x0}, ${e.y0})`));n.zoom().scaleExtent([1,40]).on("zoom",f),h.append("rect").attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("dataIndex",(e=>e.index)).attr("fill",(t=>e(t.index/m.length))).attr("class","sankey-node").attr("style","cursor:move;"),n.selectAll("rect").append("title").text((e=>`${e?.label}`)),h.data(m).append("text").attr("class","label").style("pointer-events","auto").attr("style","cursor:pointer;").style("fill-opacity",(function(e){return 1})).attr("fill",(e=>"#000")).attr("x",(e=>e.x0<s.width/2?e.x1-e.x0+6:-6)).attr("y",(e=>(e.y1-e.y0)/2)).attr("alignment-baseline","middle").attr("text-anchor",(e=>e.x0<s.width/2?"start":"end")).attr("font-size",12).text((e=>e.label)).on("click",(function(e,t){a("node_click",t.data)})),h.call(n.drag().subject((e=>e)).on("start",_).on("drag",p));const g=n.select(o.value).select("g.links").selectAll("g").data(v).join((e=>e.append("g")));let b=g.append("linearGradient");b.attr("id",(e=>`gradient-${e.index}`)).attr("gradientUnits","userSpaceOnUse").attr("x1",(e=>e.source.x1)).attr("x2",(e=>e.target.x0)),b.append("stop").attr("offset","0").attr("stop-color",(t=>e(t.source.index/m.length))),b.append("stop").attr("offset","100%").attr("stop-color",(t=>e(t.target.index/m.length))),g.append("path").style("pointer-events","none").attr("class","sankey-link").attr("d",n.sankeyLinkHorizontal()).attr("stroke-width",(e=>Math.max(1,e.width))).attr("stroke",(e=>`url(#gradient-${e.index}`)),g.append("title").text((e=>`${e.label}`))}function _(e,t){t.__x=e.x,t.__y=e.y,t.__x0=t.x0,t.__y0=t.y0,t.__x1=t.x1,t.__y1=t.y1}function p(e,t){n.select(this).attr("transform",(function(t){const a=e.x-t.__x,l=e.y-t.__y,s=i.value.width,o=i.value.width;return t.x0=t.__x0+a,t.x1=t.__x1+a,t.y0=t.__y0+l,t.y1=t.__y1+l,t.x0<0&&(t.x0=0,t.x1=10),t.x1>s&&(t.x0=s-10,t.x1=s),t.y0<0&&(t.y0=0,t.y1=t.__y1-t.__y0),t.y1>o&&(t.y0=o-(t.__y1-t.__y0),t.y1=o),c.update(u),n.selectAll(".sankey-link").attr("d",n.sankeyLinkHorizontal()),`translate(${t.x0}, ${t.y0})`}))}function f({transform:e}){g.attr("transform",e)}const v=e=>i18n(e);return t({draw_sankey:d,set_no_data_flag:function(e){s.value=e}}),(t,a)=>(Us(),Ls(Cs,null,[s.value?(Us(),Ls("div",gS,ae(e.no_data_message||v("flows_page.no_data")),1)):Zs("v-if",!0),Hs("div",null,[(Us(),Ls("svg",{ref_key:"sankey_chart_ref",ref:o,width:i.value.width,height:i.value.height,style:{margin:"10px"}},yS,8,bS))])],64))}};np("\n/* .node rect { */\n/*   fill-opacity: 0.9; */\n/*   shape-rendering: crispEdges; */\n/* } */\n\n/* .node text { */\n/*   pointer-events: none; */\n/*   text-shadow: 0 1px 0 #fff; */\n/* } */\n\n/* path.link.link2 { */\n/*     all: initial; */\n/*     fill: unset; */\n/*     stroke: unset; */\n/*     stroke-opacity: unset; */\n/*     stroke-width: unset; */\n/* } */\n\n/* .link:hover { */\n/*   stroke-opacity: 0.5; */\n/* } */\n"),wS.__file="http_src/vue/sankey.vue";const xS={class:"row"},kS={class:"col-md-12 col-lg-12"},$S={class:"card card-shadow"},SS={class:"card-body"},CS={class:"d-flex align-items-center mb-2"},NS={class:"d-flex no-wrap ms-auto"},AS={class:"m-1"},ES={style:{"min-width":"16rem"}},TS={class:"my-auto me-1"},PS=Hs("label",{class:"my-auto me-1"},null,-1),US=[Hs("span",null,[Hs("i",{class:"fas fa-sync"})],-1)];var IS={__name:"page-host-details-flow-sankey",props:{is_local:Boolean},setup(e){const t=e,a=e=>i18n(e),l=`${http_prefix}/lua/pro/rest/v2/get/host/flows/data.lua`,n=ma(null),s=ma(!1),o=[{filter_name:"hosts_type",key:3,id:"local_origin_remote_target",title:a("flows_page.local_cli_remote_srv"),label:a("flows_page.local_cli_remote_srv"),filter_icon:!1,countable:!1},{filter_name:"hosts_type",key:4,id:"remote_origin_local_target",title:a("flows_page.local_srv_remote_cli"),label:a("flows_page.local_srv_remote_cli"),filter_icon:!1,countable:!1},{filter_name:"hosts_type",key:5,id:"all_hosts",title:a("flows_page.all_flows"),label:a("flows_page.all_flows"),filter_icon:!1,countable:!1}];t.is_local?o.unshift({filter_name:"hosts_type",key:1,id:"local_only",title:a("flows_page.local_only"),label:a("flows_page.local_only"),filter_icon:!1,countable:!1}):o.unshift({filter_name:"hosts_type",key:2,id:"remote_only",title:a("flows_page.remote_only"),label:a("flows_page.remote_only"),filter_icon:!1,countable:!1});const i=ma(o[3]),r=ma({});function c(e){if(1==e.is_link_node)return;let t={host:e.info.ip,vlan:e.info.vlan},a=x.obj_to_url_params(t);const l=`${http_prefix}/lua/host_details.lua?${a}`;x.go_to_url(l)}_n((()=>{})),pn((()=>{u()}));const u=function(){let e=i.value;x.set_key_to_url(e.filter_name,e.id),async function(){s.value=!0;let e=await async function(){const e=function(){let e={host:x.get_url_entry("host"),vlan:x.get_url_entry("vlan"),ifid:x.get_url_entry("ifid"),hosts_type:x.get_url_entry("hosts_type")},t=x.obj_to_url_params(e),a=`${l}?${t}`;return a}();let t=await b.http_request(e);t=function(e){let t=e=>console.error(`link (source: ${e.source_node_id}, target: ${e.target_node_id}) removed for not existing source/target node`),a=function(e,t){let a={};e.nodes.forEach((e=>a[e.node_id]=!0));let l=e=>null!=a[e.source_node_id]&&null!=a[e.target_node_id],n=function(e,t,a){return e.filter((e=>{const l=t(e);return 0==l&&null!=a&&a(e),l}))}(e.links,l,t);return n}(e,t);return{nodes:e.nodes,links:a}}(t);let a=x.get_url_entry("host"),s=function(e,t){if(0==e.nodes.length&&0==e.links.length)return e;let a={};e.nodes.forEach((e=>a[e.node_id]=e));const l=e=>{if(e.source_node_id==t)return-1;if(e.target_node_id==t)return 1;throw`Wrong direction link ${e.source_node_id} -> ${e.target_node_id}`},n=(e,a)=>e==t?e:`${a}_${e}`;let s={},o={nodes:[],links:[]};e.links.forEach((e=>{let t,i=l(e),r={source_node_id:n(e.source_node_id,i),target_node_id:n(e.target_node_id,i),label:e.label,value:e.value,data:e};if(-1==i){let l=a[e.target_node_id];t={node_id:r.target_node_id,label:l.label,data:l}}else{let l=a[e.source_node_id];t={node_id:r.source_node_id,label:l.label,data:l}}o.links.push(r),null==s[t.node_id]&&(s[t.node_id]=!0,o.nodes.push(t))}));let i=a[t];o.nodes.push({node_id:i.node_id,label:i.label,data:i}),o.nodes.forEach((e=>a[e.node_id]=e));const r=e=>`${l(e)}_${e.label}`;let c={};o.links.forEach((e=>{let t=r(e),l=c[t];null==l&&(l={id:t,label:e.label,data:{...e,is_link_node:!0},node_links:[]},c[t]=l),l.node_links.push({source:a[e.source_node_id],target:a[e.target_node_id],value:_(e)})}));let u=o.nodes.map((e=>e)),d=[];for(let e in c){let t=c[e],a={node_id:t.id,label:t.label,data:t.data};u.push(a),t.node_links.forEach((e=>{d.push({source_node_id:e.source.node_id,target_node_id:a.node_id,label:`${e.source.label} - ${e.target.label}: ${a.label}`,value:e.value,data:e}),d.push({source_node_id:a.node_id,target_node_id:e.target.node_id,label:`${e.source.label} - ${e.target.label}: ${a.label}`,value:e.value,data:e})}))}let p={},f=[];u.map(((e,t)=>{let a={index:t,node_id:e.node_id,label:e.label,data:e.data};p[e.node_id]=a,f.push(a)}));let v=d.map((e=>{let t=p[e.source_node_id],a=p[e.target_node_id];return{source:t.index,target:a.index,source_node_id:t.index,target_node_id:a.index,value:e.value,label:e.label}}));return{nodes:f,links:v}}(t,a);return s.links.length>0&&s.nodes.length>0?n.value.set_no_data_flag(!1):n.value.set_no_data_flag(!0),s}();r.value=e,s.value=!1}()},d=function(){u()};function _(e){return e.data?.info?.traffic}return(e,t)=>(Us(),Ls("div",xS,[Hs("div",kS,[Hs("div",$S,[s.value?(Us(),Rs(wf,{key:0})):Zs("v-if",!0),Hs("div",SS,[Hs("div",{class:J(["align-items-center justify-content-end mb-3",[s.value?"ntopng-gray-out":""]]),style:{height:"70vh"}},[Hs("div",CS,[Hs("div",NS,[Hs("div",AS,[Hs("div",ES,[Hs("label",TS,ae(a("hosts"))+": ",1),Gs(n_,{selected_option:i.value,"onUpdate:selected_option":t[0]||(t[0]=e=>i.value=e),options:o,onSelect_option:u},null,8,["selected_option","options","onSelect_option"])])]),Hs("div",null,[PS,Hs("div",null,[Hs("button",{class:"btn btn-link m-1",tabindex:"0",type:"button",onClick:t[1]||(t[1]=(...e)=>d&&d(...e))},US)])])])]),Gs(wS,{ref_key:"sankey_chart",ref:n,onNode_click:c,sankey_data:r.value},null,8,["onNode_click","sankey_data"])],2)])])])]))},__file:"http_src/vue/page-host-details-flow-sankey.vue"};const OS={isEmptyOrNull:e=>!(null!=e&&""!=e&&0!=e),isEmptyArrayOrNull:e=>!(null!=e&&0!==e.length)},MS={key:0,class:"alert alert-info alert-dismissable"},jS=Hs("span",{class:"text-info me-1"},null,-1),LS={class:"form-group ms-2 me-2 mt-3 row"},RS={class:"col-form-label col-sm-2"},DS={class:"col-sm-10"},FS={class:"btn-group btn-group-toggle","data-bs-toggle":"buttons"},qS={key:1,class:"form-group ms-2 me-2 mt-3 row"},zS={class:"col-form-label col-sm-2"},BS={class:"col-sm-10"},VS=["placeholder"],HS={key:2,class:"form-group ms-2 me-2 mt-3 row"},GS={class:"col-form-label col-sm-2"},WS={class:"col-sm-10"},KS={key:3,class:"form-group ms-2 me-2 mt-3 row"},JS={class:"col-form-label col-sm-2"},YS={class:"col-sm-10"},ZS={key:4,class:"form-group ms-2 me-2 mt-3 row"},XS={class:"col-form-label col-sm-2"},QS={class:"col-10"},eC={key:5,class:"form-group ms-2 me-2 mt-3 row"},tC={class:"col-form-label col-sm-2"},aC={class:"col-10"},lC={class:"col-form-label col-sm-2"},nC={class:"col-10"},sC={key:6,class:"form-group ms-2 me-2 mt-3 row"},oC={class:"col-form-label col-sm-2"},iC={key:0,class:"col-10"},rC={key:1,class:"col-10"},cC={key:2,class:"col-10"},uC={key:3,class:"col-10"},dC={key:4,class:"col-10"},_C={key:7,class:"form-group ms-2 me-2 mt-3 row"},pC={class:"col-form-label col-sm-2"},fC={class:"col-10"},vC={class:"form-group ms-2 me-2 mt-3 row",style:{"margin-top":"3px"}},mC={class:"col-form-label col-sm-2"},hC={class:"col-sm-3"},gC={class:"btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},bC=["value","id"],yC=["id","for"],wC=["value","id"],xC=["id","for"],kC=["value","id"],$C=["id","for"],SC={class:"col-sm-2 btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},CC=["value","id"],NC=["id","for"],AC={key:8,class:"message alert alert-warning mt-3"},EC=["disabled"],TC=["disabled"];var PC={__name:"modal-add-host-rules",props:{metric_list:Array,ifid_list:Array,flow_exporter_devices:Array,interface_metric_list:Array,flow_device_metric_list:Array,frequency_list:Array,init_func:Function,page_csrf:String},emits:["add","edit"],setup(e,{expose:t,emit:l}){const n=e;ma(""),ma("");let s=ma(!1),o=ma(!1);const i=ma(null);let r=i18n("if_stats_config.add_host_rules_title");const c=i18n("if_stats_config.host_placeholder"),u=ma(!1),d=e=>i18n(e),_=ma([]),p=ma(null),f=ma(null),v=ma([]),m=ma([]),h=ma([]),g=ma([]),b=ma([]),y=ma([]),w=ma([]),x=ma(null),k=ma(null),S=ma({}),C=ma({}),N=ma({}),A=ma({}),E=ma({}),T=ma({}),P=ma({}),U=ma({}),I=ma(!0),O=ma({}),M=ma(!0),j=ma("hosts"),L=ma(!1),R=ma(!1),D=ma(null),F=ma(null),q=ma(!1),z=ma(null),B=ma(null),V=ma({}),H=ma({}),G=ma({}),W=ma(null);let K=ma([]);const Y=[d("if_stats_config.note_1"),d("if_stats_config.note_2"),d("if_stats_config.note_3"),d("if_stats_config.note_4"),d("if_stats_config.note_5")],Z=ma([{title:d("volume"),label:d("volume"),id:"volume",active:!0},{title:d("throughput"),label:d("throughput"),id:"throughput",active:!1},{title:d("percentage"),label:d("percentage"),id:"percentage",active:!1}]),X=ma([{title:d("volume"),label:d("volume"),id:"volume",active:!0,measure_unit:"bps"},{title:d("throughput"),label:d("throughput"),id:"throughput",active:!1,measure_unit:"bps"},{title:d("percentage"),label:d("percentage"),id:"percentage",active:!1,measure_unit:"number"},{title:d("value"),label:d("value"),id:"value",active:!1,measure_unit:"number"}]),Q=ma([{title:d("percentage"),label:d("percentage"),id:"absolute_percentage",active:!1,measure_unit:"number"}]),ee=ma([{title:d("kb"),label:d("kb"),id:"kb",value:1024,active:!1},{title:d("mb"),label:d("mb"),id:"mb",value:1048576,active:!1},{title:d("gb"),label:d("gb"),id:"gb",value:1073741824,active:!0,default_active:!0}]),te=ma([{title:d("kbps"),label:d("kbps"),id:"kbps",value:1e3,active:!1},{title:d("mbps"),label:d("mbps"),id:"mbps",value:1e6,active:!1},{title:d("gbps"),label:d("gbps"),id:"gbps",value:1e9,active:!0,default_active:!0}]),le=ma([{title:"+",label:">",id:"plus",value:1,active:!1},{title:"-",label:"<",id:"minus",value:-1,active:!0,default_active:!0}]),ne=[{title:"+",label:"%",id:"plus",value:1,active:!0}],se=ma(null),oe=ma(null);function ie(e){e.forEach((e=>e.active=1==e.default_active))}n.page_csrf;const re=e=>{j.value=e,K.value=Z.value,"host_pool"==e||"CIDR"==e?(ue(),O.value="host_pool"==e?K.value[1]:K.value[0]):O.value=Z.value[0]},ce=()=>{let e=[];"flowdev_port:usage"==U.value.id?(Q.value.forEach((t=>{"number"==t.measure_unit&&e.push(t)})),K.value=e):(Z.value.forEach((t=>{"value"!=t.id&&e.push(t)})),K.value=e),O.value=K.value[0]},ue=e=>{let t=[];"host_pool"==j.value&&"bps"!=P.value.measure_unit||"CIDR"==j.value&&"bps"!=G.value.measure_unit?(X.value.forEach((e=>{"number"==e.measure_unit&&t.push(e)})),K.value=t):(X.value.forEach((e=>{"value"!=e.id&&t.push(e)})),K.value=t),null!=e&&0!=e||(O.value=K.value[0])},de=()=>{let e=new RegExp(wp.get_data_pattern("ip"));I.value=!(e.test(se.value)||"*"===se.value)},_e=e=>{const t=e.target.id;le.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1}))},pe=e=>{const t=e.target.id;"throughput"==O.value.id?te.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):"volume"==O.value.id?ee.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):"percentage"==O.value.id&&ne.forEach((e=>{e.id===t?e.active=!0:e.active=!1}))},fe=e=>{let t="";"interface"!=j.value&&(t=se.value);const a=C.value.id;let n=S.value.id,s=S.value.label;"interface"==j.value?(n=T.value.id,s=T.value.label):"host_pool"==j.value?(n=P.value.schema,s=P.value.label):"CIDR"==j.value&&(n=G.value.schema,s=G.value.label);const o=T.value.id,i=j.value,r=N.value.id,c=N.value.label;let u,d,_,p,f=O.value.id,v="Host"==j.value?S.value.extra_metric?S.value.extra_metric:null:T.value.extra_metric?T.value.extra_metric:null,m=e?F.value:null;!1===M.value&&(f="",v="",_=oe.value.value),"throughput"==f?(le.value.forEach((e=>{e.active&&(d=e.value)})),p=parseInt(d),te.value.forEach((e=>{e.active&&(u=e.value)})),_=u*parseInt(oe.value.value)):"volume"==f?(le.value.forEach((e=>{e.active&&(d=e.value)})),p=parseInt(d),ee.value.forEach((e=>{e.active&&(u=e.value)})),_=u*parseInt(oe.value.value)):"percentage"==f?(le.value.forEach((e=>{e.active&&(d=e.value)})),p=parseInt(d),_=p*parseInt(oe.value.value)):"value"!=f&&"absolute_percentage"!=f||(le.value.forEach((e=>{e.active&&(d=e.value)})),p=parseInt(d),_=p*parseInt(oe.value.value));let h="add";if(1==e&&(h="edit"),"Host"==j.value)l(h,{host:t,frequency:a,metric:n,metric_label:s,threshold:_,metric_type:f,extra_metric:v,rule_type:i,rule_threshold_sign:p,rule_id:m});else if("interface"==j.value)l(h,{frequency:a,metric:o,metric_label:s,threshold:_,metric_type:f,extra_metric:v,rule_type:i,interface:r,ifname:c,rule_threshold_sign:p,rule_id:m});else if("exporter"==j.value){const e=E.value.id,t=E.value.label,n=A.value.id,s=A.value.ifid;let o;U.value.id?o=y.value.find((e=>e.id==U.value.id)):(o=y.value.find((e=>null===e.id)),null!=e&&"*"!=e?(o=U.value,o.id="flowdev_port:traffic"):(o=U.value,o.id="flowdev:traffic"));let r=o.label;l(h,{host:n,frequency:a,metric:o.id,metric_label:r,threshold:_,metric_type:f,rule_type:i,interface:e,ifname:t,ifid:s,rule_threshold_sign:p,rule_id:m})}else if("CIDR"==j.value){t=H.value.id;const e=H.value.network_id;l(h,{host:t,frequency:a,metric:n,metric_label:s,threshold:_,metric_type:f,extra_metric:v,rule_type:i,rule_threshold_sign:p,rule_id:m,network:e})}else if("host_pool"==j.value){const e=V.value.id,t=V.value.label;l(h,{host_pool_id:e,host_pool_label:t,frequency:a,metric:n,metric_label:s,threshold:_,metric_type:f,extra_metric:v,rule_type:i,rule_threshold_sign:p,rule_id:m})}},ve=()=>{fe(!0)};async function me(){let e=[];const t=a.buildURL(`${http_prefix}/lua/pro/rest/v2/get/flowdevice/stats.lua?ip=${A.value.id}&ifid=${A.value.ifid}`);await $.get(t,(function(t,a){e=t.rsp}));const l=[{id:"*",value:"*",label:"*",timeseries_available:e[0]?.timeseries_available}];e.forEach((e=>{l.push({id:e.id,label:e.name,timeseries_available:e.timeseries_available})})),h.value=l,E.value=h.value[1],L.value=h.value[0]?.timeseries_available}const he=function(e){const t=[];return e.forEach((e=>{const a=e.probe_ip;t.push({id:a,label:a,value:a,ifid:e.ifid})})),t},ge=function(){me()};return _n((()=>{Z.value.forEach((e=>{e.active&&(O.value=e)})),q.value=!1})),t({show:e=>{null!=e?(e=>{null!=e&&(r=d("if_stats_config.edit_host_rules_title"),R.value=!0,F.value=e.row_id,I.value=!1,le.value.forEach((t=>{t.active=t.value==e.threshold_sign})),Z.value.forEach((t=>{t.id==e.metric_type?(t.active=!0,O.value=t):t.active=!1})),K.value=Z.value,"volume"==e.metric_type?ee.value.forEach((t=>{if(e.threshold%t.value==0){let a=e.threshold/t.value;a<1024?(t.active=!0,oe.value.value=0==a?1:a):t.active=!1}else t.active=!1})):"throughput"==e.metric_type?te.value.forEach((t=>{if(e.threshold%t.value==0){let a=e.threshold/t.value;a<1e3?(t.active=!0,oe.value.value=0==a?1:a):t.active=!1}else t.active=!1})):"percentage"==e.metric_type?oe.value.value=e.threshold:"value"!=e.metric_type&&"absolute_percentage"!=e.metric_type||(oe.value.value=e.threshold*e.threshold_sign),j.value=e.rule_type,"interface"==j.value?(v.value.forEach((t=>{t.id==e.target&&(N.value=t)})),null!=e.extra_metric?g.value.forEach((t=>{t.id==e.metric&&t.extra_metric==e.extra_metric&&(T.value=t)})):g.value.forEach((t=>{t.id==e.metric&&(T.value=t)}))):"exporter"==j.value?(m.value.forEach((t=>{t.id==e.target&&(A.value=t)})),h.value.forEach((t=>{t.id==e.flow_exp_ifid&&(E.value=t)}))):"Host"==j.value?(se.value=e.target,null!=e.extra_metric?_.value.forEach((t=>{e.metric.contains(t.id)&&t.extra_metric==e.extra_metric&&(S.value=t)})):_.value.forEach((t=>{t.id==e.metric&&(S.value=t)}))):"CIDR"==j.value?(B.value.forEach((t=>{t.id==e.target&&(H.value=t)})),W.value.forEach((t=>{t.label==e.metric_label&&(G.value=t)})),ue(!0),K.value.forEach((t=>{t.id==e.metric_type&&(O.value=t)}))):"host_pool"==j.value&&(z.value.forEach((t=>{t.id==e.target&&(V.value=t)})),b.value.forEach((t=>{t.label==e.metric_label&&(P.value=t)})),ue(),K.value.forEach((t=>{t.id==e.metric_type&&(O.value=t)}))))})(e):async function(){q.value=!1,se.value="",j.value="Host",N.value=v.value[0],S.value=_.value[0],T.value=g.value[0],U.value=y.value[0],R.value=!1,r=i18n("if_stats_config.add_host_rules_title"),C.value=w.value[0],O.value=Z.value[0],A.value=m.value[0],null!=A.value&&me(),Z.value.forEach((e=>e.active=!1)),Z.value[0].active=!0,null!=z.value&&(V.value=z.value[0]),P.value=b.value[0],null!=B.value&&(H.value=B.value[0]),null!=W.value&&(G.value=W.value[0]),ie(ee.value),ie(te.value),ie(le.value),j.value="Host",I.value=!0,oe.value.value=1,F.value=null,K.value=Z.value,"Host"==j||"interface"==j?O.vale=Z.value[0]:O.value=K.value[0]}(),i.value.show()},close:()=>{R.value=!1,q.value=!1,i.value.close()},metricsLoaded:async(e,t,a,l,i,r,c,d,h,x,k,$)=>{u.value=!0,_.value=e,g.value=a,v.value=function(e){let t=[];return e.forEach((e=>{let a={id:e.ifid,label:e.name};t.push(a)})),t}(t),w.value=n.frequency_list,C.value=w.value[0],S.value=_.value[0],N.value=v.value[0],D.value=r,c&&(p.value=c),d&&(f.value=d),m.value=he(l),OS.isEmptyArrayOrNull(h)||(s.value=!0),z.value=h,b.value=k,OS.isEmptyArrayOrNull(x)||(o.value=!0),B.value=x,W.value=$,y.value=i,A.value=m.value[0],null!=A.value&&me()},invalidAdd:()=>{q.value=!0}}),(e,t)=>(Us(),Rs(sp,{onShowed:t[22]||(t[22]=e=>{}),ref_key:"modal_id",ref:i},{title:hl((()=>[Js(ae(wa(r)),1)])),body:hl((()=>[q.value?(Us(),Ls("div",MS,[jS,Hs("span",null,ae(d("rule_already_present")),1)])):Zs("v-if",!0),Zs(" Target information, here an IP is put "),Hs("div",LS,[Hs("label",RS,[Hs("b",null,ae(d("if_stats_config.add_rules_type")),1)]),Hs("div",DS,[Hs("div",FS,[Hs("label",{class:J(["btn",["Host"==j.value?"btn-primary active":"btn-secondary"]])},[Hs("input",{class:"btn-check",type:"radio",name:"rule_type",value:"hosts",onClick:t[0]||(t[0]=e=>re("Host"))}),Js(" "+ae(d("if_stats_config.add_rules_type_host")),1)],2),Hs("label",{class:J(["btn",["interface"==j.value?"btn-primary active":"btn-secondary"]])},[Hs("input",{onClick:t[1]||(t[1]=e=>re("interface")),class:"btn-check",type:"radio",name:"rule_type",value:"interface"}),Js(" "+ae(d("if_stats_config.add_rules_type_interface")),1)],2),1==L.value?(Us(),Ls("label",{key:0,class:J(["btn",["exporter"==j.value?"btn-primary active":"btn-secondary"]])},[Hs("input",{onClick:t[2]||(t[2]=e=>re("exporter")),class:"btn-check",type:"radio",name:"rule_type",value:"exporter"}),Js(" "+ae(d("if_stats_config.add_rules_type_flow_exporter")),1)],2)):Zs("v-if",!0),1==wa(s)?(Us(),Ls("label",{key:1,class:J(["btn",["host_pool"==j.value?"btn-primary active":"btn-secondary"]])},[Hs("input",{onClick:t[3]||(t[3]=e=>re("host_pool")),class:"btn-check",type:"radio",name:"rule_type",value:"host_pool"}),Js(" "+ae(d("if_stats_config.add_rules_type_host_pool")),1)],2)):Zs("v-if",!0),1==wa(o)?(Us(),Ls("label",{key:2,class:J(["btn",["CIDR"==j.value?"btn-primary active":"btn-secondary"]])},[Hs("input",{onClick:t[4]||(t[4]=e=>re("CIDR")),class:"btn-check",type:"radio",name:"rule_type",value:"CIDR"}),Js(" "+ae(d("if_stats_config.add_rules_type_cidr")),1)],2)):Zs("v-if",!0)])])]),"Host"==j.value?(Us(),Ls("div",qS,[Hs("label",zS,[Hs("b",null,ae(d("if_stats_config.target")),1)]),Hs("div",BS,[xn(Hs("input",{"onUpdate:modelValue":t[5]||(t[5]=e=>se.value=e),onInput:de,class:"form-control",type:"text",placeholder:wa(c),required:""},null,40,VS),[[ji,se.value]])])])):Zs("v-if",!0),"CIDR"==j.value?(Us(),Ls("div",HS,[Hs("label",GS,[Hs("b",null,ae(d("if_stats_config.target")),1)]),Hs("div",WS,[Gs(n_,{selected_option:H.value,"onUpdate:selected_option":t[6]||(t[6]=e=>H.value=e),options:B.value},null,8,["selected_option","options"])])])):Zs("v-if",!0),"host_pool"==j.value?(Us(),Ls("div",KS,[Hs("label",JS,[Hs("b",null,ae(d("if_stats_config.target")),1)]),Hs("div",YS,[Gs(n_,{selected_option:V.value,"onUpdate:selected_option":t[7]||(t[7]=e=>V.value=e),options:z.value},null,8,["selected_option","options"])])])):Zs("v-if",!0),"interface"==j.value?(Us(),Ls("div",ZS,[Hs("label",XS,[Hs("b",null,ae(d("if_stats_config.target_interface")),1)]),Hs("div",QS,[Gs(n_,{selected_option:N.value,"onUpdate:selected_option":t[8]||(t[8]=e=>N.value=e),options:v.value},null,8,["selected_option","options"])])])):Zs("v-if",!0),"exporter"==j.value&&1==L.value?(Us(),Ls("div",eC,[Hs("label",tC,[Hs("b",null,ae(d("if_stats_config.target_exporter_device")),1)]),Hs("div",aC,[Gs(n_,{selected_option:A.value,"onUpdate:selected_option":t[9]||(t[9]=e=>A.value=e),options:m.value,onSelect_option:ge},null,8,["selected_option","options"])]),Hs("label",lC,[Hs("b",null,ae(d("if_stats_config.target_exporter_device_ifid")),1)]),Hs("div",nC,[Gs(n_,{selected_option:E.value,"onUpdate:selected_option":t[10]||(t[10]=e=>E.value=e),options:h.value},null,8,["selected_option","options"])])])):Zs("v-if",!0),Zs(" Metric information, here a metric is selected (e.g. DNS traffic) "),u.value?(Us(),Ls("div",sC,[Hs("label",oC,[Hs("b",null,ae(d("if_stats_config.metric")),1)]),"Host"==j.value?(Us(),Ls("div",iC,[Gs(n_,{selected_option:S.value,"onUpdate:selected_option":t[11]||(t[11]=e=>S.value=e),onSelect_option:t[12]||(t[12]=e=>{1==S.value.show_volume?M.value=!0:M.value=!1}),options:_.value},null,8,["selected_option","options"])])):"interface"==j.value?(Us(),Ls("div",rC,[Gs(n_,{selected_option:T.value,"onUpdate:selected_option":t[13]||(t[13]=e=>T.value=e),onSelect_option:t[14]||(t[14]=e=>{1==T.value.show_volume?M.value=!0:M.value=!1}),options:g.value},null,8,["selected_option","options"])])):"exporter"==j.value?(Us(),Ls("div",cC,[Gs(n_,{selected_option:U.value,"onUpdate:selected_option":t[15]||(t[15]=e=>U.value=e),onSelect_option:ce,options:y.value},null,8,["selected_option","options"])])):"host_pool"==j.value?(Us(),Ls("div",uC,[Gs(n_,{selected_option:P.value,"onUpdate:selected_option":t[16]||(t[16]=e=>P.value=e),onSelect_option:t[17]||(t[17]=e=>ue()),options:b.value},null,8,["selected_option","options"])])):"CIDR"==j.value?(Us(),Ls("div",dC,[Gs(n_,{selected_option:G.value,"onUpdate:selected_option":t[18]||(t[18]=e=>G.value=e),onSelect_option:t[19]||(t[19]=e=>ue()),options:W.value},null,8,["selected_option","options"])])):Zs("v-if",!0)])):Zs("v-if",!0),Zs(" Frequency information, a frequency of 1 day, 5 minute or 1 hour for example "),u.value?(Us(),Ls("div",_C,[Hs("label",pC,[Hs("b",null,ae(d("if_stats_config.frequency")),1)]),Hs("div",fC,[Gs(n_,{selected_option:C.value,"onUpdate:selected_option":t[20]||(t[20]=e=>C.value=e),options:w.value},null,8,["selected_option","options"])])])):Zs("v-if",!0),Zs(" Threshold information, maximum amount of bytes "),Hs("div",vC,[Hs("label",mC,[Hs("b",null,ae(d("if_stats_config.threshold")),1)]),M.value?(Us(),Ls(Cs,{key:0},[Hs("div",hC,[Gs(n_,{selected_option:O.value,"onUpdate:selected_option":t[21]||(t[21]=e=>O.value=e),options:wa(K)},null,8,["selected_option","options"])]),Hs("div",{class:J(["col-3",["throughput"==O.value.id?"p-0":""]])},[Hs("div",gC,["throughput"==O.value.id?(Us(!0),Ls(Cs,{key:0},Tn(te.value,(e=>(Us(),Ls(Cs,null,[Hs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:x,name:"threshold_measure"},null,8,bC),Hs("label",{class:J(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:pe,for:e.id},ae(e.label),11,yC)],64)))),256)):Zs("v-if",!0),"percentage"==O.value.id?(Us(),Ls(Cs,{key:1},Tn(ne,(e=>(Us(),Ls(Cs,null,[Hs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:x,name:"threshold_measure"},null,8,wC),Hs("label",{class:J(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:pe,for:e.id},ae(e.label),11,xC)],64)))),64)):Zs("v-if",!0),"volume"==O.value.id?(Us(!0),Ls(Cs,{key:2},Tn(ee.value,(e=>(Us(),Ls(Cs,null,[Hs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:x,name:"threshold_measure"},null,8,kC),Hs("label",{class:J(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:pe,for:e.id},ae(e.label),11,$C)],64)))),256)):Zs("v-if",!0)])],2),Hs("div",SC,[(Us(!0),Ls(Cs,null,Tn(le.value,(e=>(Us(),Ls(Cs,null,[Hs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_sign",ref:k,name:"threshold_sign"},null,8,CC),Hs("label",{class:J(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:_e,for:e.id},ae(e.label),11,NC)],64)))),256))])],64)):Zs("v-if",!0),Hs("div",{class:J([M.value?"col-sm-2":"col-sm-8"])},["percentage"==O.value.id?(Us(),Ls("input",{key:0,value:"1",ref_key:"threshold",ref:oe,type:"number",name:"threshold",class:"form-control",max:"100",min:"1",required:""},null,512)):(Us(),Ls("input",{key:1,value:"1",ref_key:"threshold",ref:oe,type:"number",name:"threshold",class:"form-control",max:"1023",min:"1",required:""},null,512))],2)]),"percentage"==O.value.id?(Us(),Ls("div",AC,ae(d("show_alerts.host_rules_percentage")),1)):Zs("v-if",!0)])),footer:hl((()=>[Gs(_v,{note_list:Y}),0==R.value?(Us(),Ls("button",{key:0,type:"button",onClick:fe,class:"btn btn-primary",disabled:I.value&&"Host"==j.value},ae(d("add")),9,EC)):(Us(),Ls("button",{key:1,type:"button",onClick:ve,class:"btn btn-primary",disabled:I.value&&"Host"==j.value},ae(d("apply")),9,TC))])),_:1},512))},__file:"http_src/vue/modal-add-host-rules.vue"};const UC={class:"row"},IC={class:"col-md-12 col-lg-12"},OC={class:"card"},MC=Hs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Hs("div",{class:"text-center"},[Hs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Hs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),jC={class:"card-body"},LC={class:"mb-4"},RC={id:"host_rules"},DC={class:"card-footer"};var FC={__name:"page-host-rules",props:{page_csrf:String,ifid:String},setup(e){const t=e,l=ma(null),n=ma(null),s=ma(null),o=e=>i18n(e),i=ma({}),r=ma({}),c=ma(!1),u=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=host`,d=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=interface`,_=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=host_pool`,p=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=CIDR`,f=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=exporter`,v=`${http_prefix}/lua/pro/rest/v2/get/flowdevices/stats.lua`;http_prefix;const m=`${http_prefix}/lua/rest/v2/get/host/pool/pools.lua`,h=`${http_prefix}/lua/rest/v2/get/network/networks.lua`,g=`${http_prefix}/lua/rest/v2/get/ntopng/interfaces.lua`,b=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_data.lua`,y=`${http_prefix}/lua/pro/rest/v2/add/interface/host_rules/add_host_rule.lua`,w=`${http_prefix}/lua/pro/rest/v2/delete/interface/host_rules/delete_host_rule.lua`,x=[o("if_stats_config.generic_notes_1"),o("if_stats_config.generic_notes_2"),o("if_stats_config.generic_notes_3")],k={ifid:t.ifid,csrf:t.page_csrf,gui:!0};let S={},C=o("if_stats_config.delete_host_rules_title");o("if_stats_config.edit_local_network_rules");let N=o("if_stats_config.delete_host_rules_description"),A=[],E=[],T=[],P=[],U=[],I=[],O=[],M=[],j=[];const L=[{title:i18n("show_alerts.5_min"),label:i18n("show_alerts.5_min"),id:"5min",value:"5min"},{title:i18n("show_alerts.hourly"),label:i18n("show_alerts.hourly"),id:"hour",value:"hour"},{title:i18n("show_alerts.daily"),label:i18n("show_alerts.daily"),id:"day",value:"day"}];async function R(e){await z(e)}const D=function(){const e=r.value;return r.value=null,e},F=function(){l.value.reload()},q=async function(){const e=i.value,t=a.buildURL(w,{...k,rule_id:e.id,rule_type:e.rule_type});await $.post(t,(function(e,t){F()}))},z=async function(e){const t=a.buildURL(y,{...e}),l=await ntopng_utility.http_post_request(t,k);c.value=l.rsp,0==c.value?(s.value.close(),F()):s.value.invalidAdd()},B=function(e){let t={handlerId:"delete_host",onClick:()=>{var t;t=e,i.value=t,n.value.show()}},a={handlerId:"edit_rule",onClick:()=>{var t;t=e,r.value=t,i.value=t,s.value.show(t)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:a,icon:"fa-edit",title:i18n("edit")},{class:"pointer",handler:t,icon:"fa-trash",title:i18n("delete")}])},V=function(){const e=[];e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(){F()}},{text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){s.value.show()}});const t=[{columnName:o("id"),visible:!1,targets:0,name:"id",data:"id",className:"text-nowrap",responsivePriority:1},{columnName:o("if_stats_config.target"),targets:1,width:"20",name:"target",data:"target",className:"text-nowrap",responsivePriority:1,render:function(e,t,a){return function(e,t){let a="";if(t.rule_type&&"interface"==t.rule_type)a=t.selected_iface;else if(!t.rule_type||"Host"!=t.rule_type&&"CIDR"!=t.rule_type)if("host_pool"==t.rule_type)a=t.host_pool_label;else if(t.rule_type&&"exporter"==t.rule_type&&"flowdev:traffic"==t.metric)a=t.target;else{let e=""!=t.flow_exp_ifid_name?t.flow_exp_ifid_name:t.flow_exp_ifid;a=t.target+" "+o("on_interface")+": "+e}else a=t.target;return a}(0,a)}},{columnName:o("if_stats_config.rule_type"),targets:2,width:"20",name:"rule_type",data:"rule_type",className:"text-center",responsivePriority:1,render:function(e,t,a){return function(e,t){let a="";return t.rule_type&&"interface"==t.rule_type?a="<span class='badge bg-secondary'>"+o("interface")+" <i class='fas fa-ethernet'></i></span>":t.rule_type&&"Host"==t.rule_type?a="<span class='badge bg-secondary'>"+o("about.host_checks_directory")+" <i class='fas fa-laptop'></i></span>":t.rule_type&&"host_pool"==t.rule_type?a="<span class='badge bg-secondary'>"+o("alert_entities.host_pool")+" <i class='fas fa-laptop'></i></span>":t.rule_type&&"CIDR"==t.rule_type?a="<span class='badge bg-secondary'>"+o("network")+" <i class='fas fa-laptop'></i></span>":t.rule_type&&"exporter"==t.rule_type&&"flowdev:traffic"==t.metric?a="<span class='badge bg-secondary'>"+o("flow_exporter_device")+" <i class='fas fa-laptop'></i></span>":t.rule_type&&"exporter"==t.rule_type&&"flowdev_port:traffic"==t.metric&&(a="<span class='badge bg-secondary'>"+o("interface_flow_exporter_device")+" <i class='fas fa-ethernet'></i></span>"),a}(0,a)}},{columnName:o("if_stats_config.metric"),targets:3,width:"10",name:"metric",data:"metric",className:"text-center",responsivePriority:1,render:function(e,t,a){return function(e,t){let a=e;return t.metric_label?a=t.metric_label:"interface"!=t.rule_type?A.forEach((l=>{l.id==e&&(t.extra_metric?t.extra_metric==l.extra_metric&&(a=l.label):a=l.label)})):E.forEach((l=>{l.id==e&&(t.extra_metric?t.extra_metric==l.extra_metric&&(a=l.label):a=l.label)})),a}(e,a)}},{columnName:o("if_stats_config.frequency"),targets:4,width:"10",name:"frequency",data:"frequency",className:"text-center",responsivePriority:1,render:function(e){return function(e){let t="";return L.forEach((a=>{e==a.id&&(t=a.title)})),t}(e)}},{columnName:o("if_stats_config.last_measurement"),targets:5,width:"10",name:"last_measurement",data:"last_measurement",className:"text-center",responsivePriority:1,render:function(e,t,l){return function(e,t){let l=parseInt(e);return"*"==t.target||null==e?"":(t.metric_type&&"throughput"==t.metric_type?l=a.bitsToSize(e):t.metric_type&&"volume"==t.metric_type?l=a.bytesToSize(e):t.metric_type&&"percentage"==t.metric_type&&(e<0&&(e*=-1),l=a.fpercent(e)),l)}(e,l)}},{columnName:o("if_stats_config.threshold"),targets:6,width:"10",name:"threshold",data:"threshold",className:"text-end",responsivePriority:1,render:function(e,t,l){return function(e,t){let l=parseInt(e),n="> ";return t.threshold_sign&&"-1"==t.threshold_sign&&(n="< "),t.metric_type&&"throughput"==t.metric_type?l=n+a.bitsToSize(e):t.metric_type&&"volume"==t.metric_type?l=n+a.bytesToSize(e):!t.metric_type||"percentage"!=t.metric_type&&"absolute_percentage"!=t.metric_type?t.metric_type&&"value"==t.metric_type&&(e<0&&(e*=-1),l=n+e):(e<0&&(e*=-1),l=n+a.fpercent(e)),l}(e,l)}},{columnName:o("metric_type"),visible:!1,targets:7,name:"metric_type",data:"metric_type",className:"text-nowrap",responsivePriority:1},{columnName:o("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return B(a)}}],l={table_buttons:e,data_url:a.buildURL(b,k),enable_search:!0,columns_config:t,table_config:{scrollX:!1,serverSide:!1,order:[[1,"desc"]],columnDefs:t}};S=l};return _n((async()=>{V(),await async function(){const e=a.buildURL(u,k);await $.get(e,(function(e,t){A=e.rsp}))}(),await async function(){const e=a.buildURL(g,k);await $.get(e,(function(e,t){P=e.rsp}))}(),await async function(){const e=a.buildURL(d,k);await $.get(e,(function(e,t){E=e.rsp}))}(),await async function(){const e=a.buildURL(f,{...k});await $.get(e,(function(e,t){I=e.rsp}))}(),await async function(){const e=a.buildURL(v,{...k});await $.get(e,(function(e,t){U=e.rsp}))}(),await async function(){const e=a.buildURL(m,k);let t;await $.get(e,(function(e,a){t=e.rsp})),t.sort(((e,t)=>e.label>t.label?1:t.label>e.label?-1:0)),O=t}(),await async function(){const e=a.buildURL(_,k);let t;await $.get(e,(function(e,a){t=e.rsp})),t.sort(((e,t)=>e.label>t.label?1:t.label>e.label?-1:0)),T=t}(),await async function(){const e=a.buildURL(h,k);let t;await $.get(e,(function(e,a){t=e.rsp})),t.sort(((e,t)=>e.label>t.label?1:t.label>e.label?-1:0)),M=t}(),await async function(){const e=a.buildURL(p,k);let t;await $.get(e,(function(e,a){t=e.rsp})),t.sort(((e,t)=>e.label>t.label?1:t.label>e.label?-1:0)),j=t}(),s.value.metricsLoaded(A,P,E,U,I,t.page_csrf,null,null,O,M,T,j)})),hn((()=>{l.value.destroy_table()})),(e,t)=>(Us(),Ls("div",UC,[Hs("div",IC,[Hs("div",OC,[MC,Hs("div",jC,[Hs("div",LC,[Hs("h4",null,ae(o("if_stats_config.traffic_rules")),1)]),Hs("div",RC,[Gs(zw,{ref_key:"modal_delete_confirm",ref:n,title:wa(C),body:wa(N),onDelete:q},null,8,["title","body"]),Gs(PC,{ref_key:"modal_add_host_rule",ref:s,metric_list:wa(A),interface_metric_list:wa(E),frequency_list:L,init_func:D,onAdd:z,onEdit:R},null,8,["metric_list","interface_metric_list"]),Gs(ow,{ref_key:"table_host_rules",ref:l,table_buttons:wa(S).table_buttons,columns_config:wa(S).columns_config,data_url:wa(S).data_url,enable_search:wa(S).enable_search,table_config:wa(S).table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])]),Hs("div",DC,[Gs(_v,{note_list:x})])])])]))},__file:"http_src/vue/page-host-rules.vue"};const qC={class:"row"},zC={class:"col-md-12 col-lg-12"},BC={class:"card"},VC=Hs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Hs("div",{class:"text-center"},[Hs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Hs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),HC={class:"card-body"},GC={id:"host_details_ports"},WC={class:"row mb-4 mt-4",id:"host_details_ports"},KC={class:"col-6"};var JC={__name:"page-host-details-ports",props:{page_csrf:String},setup(e){ma(null),ma([]),ma({});const t=e=>i18n(e);_n((async()=>{await async function(){let e={};e.host=x.get_url_entry("host"),e.vlan=x.get_url_entry("vlan"),e.ifid=x.get_url_entry("ifid"),l.forEach((t=>{let l={...t.extra_params,...e};$.get(a.buildURL(t.url,l),(async function(e,a){let l=[];e.rsp.forEach((e=>{const t=e.port_info.port,a=e.port_info.l7_proto;l.push({label:`${t} (${a})`})})),t.stats_rows=l}))}))}()})),pn((async()=>{a.hideOverlays()})),hn((async()=>{traffic_table.value.destroy_table()})),i18n("graphs.cli_ports"),ntopChartApex.typeChart.DONUT,http_prefix,i18n("graphs.srv_ports"),ntopChartApex.typeChart.DONUT,http_prefix;const l=[{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"cli_port_flows",extra_params:{mode:"local",protocol:"tcp"},columns:[{id:"active_server_tcp_ports",label:t("ports_page.active_server_tcp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]},{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"cli_port_flows",extra_params:{mode:"local",protocol:"udp"},columns:[{id:"active_server_udp_ports",label:t("ports_page.active_server_udp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]},{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"srv_port_flows",extra_params:{mode:"remote",protocol:"tcp"},columns:[{id:"client_contacted_server_tcp_ports",label:t("ports_page.client_contacted_server_tcp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]},{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"srv_port_flows",extra_params:{mode:"remote",protocol:"udp"},columns:[{id:"client_contacted_server_udp_ports",label:t("ports_page.client_contacted_server_udp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]}];return(e,t)=>(Us(),Ls("div",qC,[Hs("div",zC,[Hs("div",BC,[VC,Hs("div",HC,[Hs("div",GC,[Hs("div",WC,[(Us(),Ls(Cs,null,Tn(l,(e=>Hs("div",KC,[Gs(vw,{id:e.id,columns:e.columns,rows:e.stats_rows,print_html_column:e=>function(e){return e.label}(e),print_html_row:(e,t)=>function(e,t){return t.label}(0,t)},null,8,["id","columns","rows","print_html_column","print_html_row"])]))),64))])])])])])]))},__file:"http_src/vue/page-host-details-ports.vue"};const YC={class:"row"},ZC={class:"col-12"},XC={class:"card"},QC={class:"card-body"},eN={class:"align-items-center justify-content-end mb-3",style:{height:"70vh"}},tN={class:"d-flex ms-auto flex-row-reverse"},aN=Hs("label",{class:"my-auto me-1"},null,-1),lN=[Hs("span",null,[Hs("i",{class:"fas fa-sync"})],-1)],nN={key:0,class:"m-1"},sN={style:{"min-width":"14rem"}},oN={class:"my-auto me-1"},iN="alerts-map";var rN={__name:"page-alert-analysis",props:{ifid:String,page_csrf:String,charts_options:Array,available_filters:Object},setup(e){const t=e,l=e=>i18n(e),n=ma(!1),s=ntopChartApex.typeChart.BUBBLE,o=`${http_prefix}/lua/pro/rest/v2/charts/alert/analysis.lua`,i={},r=ma(null),c=function(){let e="";const t={bubble_mode:x.get_url_entry("bubble_mode"),timeframe:x.get_url_entry("timeframe"),vlan:x.get_url_entry("vlan"),ifid:x.get_url_entry("ifid")};for(const[a,l]of Object.entries(t))e=`${e}&${a}=${l}`;return e},u=function(){n.value=!0,r.value.update_chart(`${o}?${c()}`),n.value=!1},d=function(){return async e=>{let l=function(e){let l={};if(t.charts_options.forEach((t=>{t.mode_id==e&&(l=t)})),l&&l.chart&&l.chart.ntop_events){l.chart.events=l.chart.events||{};for(const[e,t]of Object.entries(l.chart.ntop_events))null!=t&&(l.chart.events[e]=a[t]||a.fnone)}return l&&l.xaxis&&l.xaxis.labels&&l.xaxis.labels.ntop_utils_formatter&&(l.xaxis.labels.formatter=a[l.xaxis.labels.ntop_utils_formatter]||a.fnone),l&&l.yaxis&&l.yaxis.labels&&l.yaxis.labels.ntop_utils_formatter&&(l.yaxis.labels.formatter=a[l.yaxis.labels.ntop_utils_formatter]||a.fnone),l&&l.tooltip&&l.tooltip.ntop_utils_formatter&&(l.tooltip.custom=a[l.tooltip.ntop_utils_formatter]),l}(Number(i.bubble_mode.id));const n=await ntopng_utility.http_request(e);return l.series=n.series||{},l}},_=function(e){n.value=!0,x.set_key_to_url(e.filter_name,e.id),r.value.update_chart(`${o}?${c()}`),n.value=!1};return _n((()=>{const e=x.get_url_entry("timeframe"),a=x.get_url_entry("vlan");x.get_url_entry("bubble_mode")||x.set_key_to_url("bubble_mode",0),e||x.set_key_to_url("timeframe",300),a||x.set_key_to_url("vlan",""),x.set_key_to_url("ifid",t.ifid);for(const[e,a]of Object.entries(t.available_filters))a.forEach((t=>{t.filter_name=e,t.currently_active&&(i[e]=t)}))})),pn((()=>{n.value=!1})),(t,a)=>(Us(),Ls("div",YC,[Hs("div",ZC,[Hs("div",XC,[Hs("div",QC,[Hs("div",eN,[Hs("div",tN,[Hs("div",null,[aN,Hs("div",null,[Hs("button",{class:"btn btn-link m-1",tabindex:"0",type:"button",onClick:u},lN)])]),(Us(!0),Ls(Cs,null,Tn(e.available_filters,((e,t,a)=>(Us(),Ls(Cs,null,[e.length>0?(Us(),Ls("div",nN,[Hs("div",sN,[Hs("label",oN,ae(l("bubble_map."+t))+": ",1),Gs(n_,{selected_option:i[t],"onUpdate:selected_option":e=>i[t]=e,options:e,onSelect_option:_},null,8,["selected_option","onUpdate:selected_option","options"])])])):Zs("v-if",!0)],64)))),256))]),n.value?(Us(),Rs(wf,{key:0})):Zs("v-if",!0),Hs("div",{id:iN,style:{height:"90%"},class:J([n.value?"ntopng-gray-out":""])},[Gs(A_,{ref_key:"bubble_chart",ref:r,id:iN,chart_type:wa(s),base_url_request:o,get_params_url_request:c,get_custom_chart_options:d(),register_on_status_change:!1},null,8,["chart_type","get_custom_chart_options"])],2)])])])])]))},__file:"http_src/vue/page-alert-analysis.vue"};const cN={class:"row"},uN={class:"col-12"},dN={class:"card"},_N={class:"card-body"},pN={class:"align-items-center justify-content-end mb-3",style:{height:"70vh"}},fN={class:"d-flex ms-auto flex-row-reverse"},vN=Hs("label",{class:"my-auto me-1"},null,-1),mN={class:"m-1"},hN={key:0,style:{"min-width":"18rem"}},gN={class:"my-auto me-1"},bN="alerts-map";var yN={__name:"page-host-map",props:{ifid:String,page_csrf:String,charts_options:Array,available_filters:Object},setup(e){const t=e,l=e=>i18n(e),n=ntopChartApex.typeChart.BUBBLE,s=`${http_prefix}/lua/rest/v2/charts/host/map.lua`,o={},i=ma(null),r=function(){let e="";const t={bubble_mode:x.get_url_entry("bubble_mode"),ifid:x.get_url_entry("ifid")};for(const[a,l]of Object.entries(t))e=`${e}&${a}=${l}`;return e},c=function(){return async e=>{let l=function(e){let l={};if(t.charts_options.forEach((t=>{t.mode_id==e&&(l=t)})),l&&l.chart&&l.chart.ntop_events){l.chart.events=l.chart.events||{};for(const[e,t]of Object.entries(l.chart.ntop_events))null!=t&&(l.chart.events[e]=a[t]||a.fnone)}return l&&l.xaxis&&l.xaxis.labels&&l.xaxis.labels.ntop_utils_formatter&&(l.xaxis.labels.formatter=a[l.xaxis.labels.ntop_utils_formatter]||a.fnone),l&&l.yaxis&&l.yaxis.labels&&l.yaxis.labels.ntop_utils_formatter&&(l.yaxis.labels.formatter=a[l.yaxis.labels.ntop_utils_formatter]||a.fnone),l&&l.tooltip&&l.tooltip.ntop_utils_formatter&&(l.tooltip.custom=a[l.tooltip.ntop_utils_formatter]),l}(Number(o.bubble_mode.id));const n=await ntopng_utility.http_request(e);return l.series=n.series||{},l}},u=function(e){x.set_key_to_url(e.filter_name,e.id),i.value.update_chart(`${s}?${r()}`)};return _n((()=>{x.get_url_entry("bubble_mode")||x.set_key_to_url("bubble_mode",0),x.set_key_to_url("ifid",t.ifid);for(const[e,a]of Object.entries(t.available_filters))a.forEach((t=>{t.filter_name=e,t.currently_active&&(o[e]=t)}))})),(t,a)=>(Us(),Ls("div",cN,[Hs("div",uN,[Hs("div",dN,[Hs("div",_N,[Hs("div",pN,[Hs("div",fN,[vN,(Us(!0),Ls(Cs,null,Tn(e.available_filters,((e,t,a)=>(Us(),Ls("div",mN,[e.length>0?(Us(),Ls("div",hN,[Hs("label",gN,ae(l("bubble_map."+t))+": ",1),Gs(n_,{selected_option:o[t],"onUpdate:selected_option":e=>o[t]=e,options:e,onSelect_option:u},null,8,["selected_option","onUpdate:selected_option","options"])])):Zs("v-if",!0)])))),256))]),Hs("div",{id:bN,style:{height:"90%"}},[Gs(A_,{ref_key:"bubble_chart",ref:i,id:bN,chart_type:wa(n),base_url_request:s,get_params_url_request:r,get_custom_chart_options:c(),register_on_status_change:!1},null,8,["chart_type","get_custom_chart_options"])])])])])])]))},__file:"http_src/vue/page-host-map.vue"};const wN={class:"row"},xN={class:"col-md-12 col-lg-12"},kN={class:"card card-shadow"},$N={class:"card-body"},SN={class:"d-flex align-items-center flex-row-reverse mb-2"},CN=Hs("label",{class:"my-auto me-1"},null,-1),NN=[Hs("span",null,[Hs("i",{class:"fas fa-sync"})],-1)],AN={key:0,class:"m-1"},EN={style:{"min-width":"14rem"}},TN={class:"my-auto me-1"},PN=["title"],UN=[Hs("button",{type:"button",class:"btn btn-link",disabled:""},[Hs("i",{class:"text-danger fa-solid fa-triangle-exclamation"})],-1)];var IN={__name:"page-vlan-ports-sankey",props:{ifid:Number,available_filters:Object},setup(e){const t=e,a={},l=e=>i18n(e),n=ma(!1),s=l("ports_analysis.max_entries"),o=l("ports_analysis.no_data"),i=ma(null),r=ma(null),c=ma(null),u=ma(null),d=ma({}),_=`${http_prefix}/lua/pro/rest/v2/get/vlan/live_ports.lua`,p=`${http_prefix}/lua/pro/rest/v2/get/vlan/historical_ports.lua`,f=ma(!1);function v(e){1!=e.is_link_node&&e.link&&x.go_to_url(e.link)}_n((()=>{const e=x.get_url_entry("timeframe"),l=x.get_url_entry("vlan");x.get_url_entry("l4proto"),e||x.set_key_to_url("timeframe","none"),l||x.set_key_to_url("vlan","none"),l||x.set_key_to_url("l4proto","none"),x.set_key_to_url("ifid",t.ifid);for(const[e,l]of Object.entries(t.available_filters))l.forEach((t=>{t.filter_name=e,t.currently_active&&(a[e]=t)}))})),pn((()=>{y(),w(),g()}));const m=function(){g()},h=function(e){x.set_key_to_url(e.filter_name,e.id),g()},g=function(){!async function(){f.value=!0;let e=await async function(){const e=function(){let e=x.get_url_entry("vlan"),t=x.get_url_entry("timeframe"),a=x.get_url_entry("l4proto");"none"==e&&(e="");"none"==t&&(t="");"none"==a&&(a="");let l="",n={ifid:x.get_url_entry("ifid"),vlan:e,timeframe:t,l4proto:a},s=x.obj_to_url_params(n);l=""==t?`${_}?${s}`:`${p}?${s}`;return l}();let t=await b.http_request(e);(function(e){n.value=e.max_entries_reached})(t),t=function(e){let t=e=>console.error(`link (source: ${e.source_node_id}, target: ${e.target_node_id}) removed for not existing source/target node`),a=function(e,t){let a={};e.nodes.forEach((e=>a[e.node_id]=!0));let l=e=>null!=a[e.source_node_id]&&null!=a[e.target_node_id],n=function(e,t,a){return e.filter((e=>{const l=t(e);return 0==l&&null!=a&&a(e),l}))}(e.links,l,t);return n}(e,t);return{nodes:e.nodes,links:a}}(t);const a=function(e){let t={},a={};e.nodes.forEach((e=>t[e.node_id]=e));let l=e=>`${e.source_node_id}_${e.label}`;e.links.forEach((e=>{let n=l(e),s=a[n];null==s&&(s={id:n,label:e.label,link:e.optional_info.link,node_links:[]},a[n]=s),s.node_links.push({source:t[e.source_node_id],target:t[e.target_node_id],value:e.value})}));let n=e.nodes.map((e=>e)),s=[];for(let e in a){let t=a[e],l={node_id:t.id,label:t.label,link:t.link};n.push(l),t.node_links.forEach((e=>{s.push({source_node_id:e.source.node_id,target_node_id:l.node_id,label:`${e.source.label} - ${e.target.label}: ${l.label}`,value:e.value}),s.push({source_node_id:l.node_id,target_node_id:e.target.node_id,label:`${e.source.label} - ${e.target.label}: ${l.label}`,value:e.value})}))}let o=n.map(((e,t)=>({index:t,label:e.label,data:e}))),i={};o.forEach(((e,t)=>i[e.data.node_id]=e));let r=s.map((e=>({source:i[e.source_node_id].index,target:i[e.target_node_id].index,value:e.value,label:e.label})));return{nodes:o,links:r}}(t);return a.links.length>0&&a.nodes.length>0?i.value.set_no_data_flag(!1):i.value.set_no_data_flag(!0),a}();d.value=e,f.value=!1}()};function y(){u.value=$(r.value).height()-100}function w(){c.value=$(r.value).width()-10}return(t,_)=>(Us(),Ls("div",wN,[Hs("div",xN,[Hs("div",kN,[f.value?(Us(),Rs(wf,{key:0})):Zs("v-if",!0),Hs("div",$N,[Hs("div",{class:J(["align-items-center justify-content-end mb-2",[f.value?"ntopng-gray-out":""]]),style:{height:"70vh"},ref_key:"body_div",ref:r},[Hs("div",SN,[Hs("div",null,[CN,Hs("div",null,[Hs("button",{class:"btn btn-link m-1",tabindex:"0",type:"button",onClick:m},NN)])]),(Us(!0),Ls(Cs,null,Tn(e.available_filters,((e,t,n)=>(Us(),Ls(Cs,null,[e.length>0?(Us(),Ls("div",AN,[Hs("div",EN,[Hs("label",TN,ae(l("ports_analysis."+t))+": ",1),Gs(n_,{selected_option:a[t],"onUpdate:selected_option":e=>a[t]=e,options:e,onSelect_option:h},null,8,["selected_option","onUpdate:selected_option","options"])])])):Zs("v-if",!0)],64)))),256)),1==n.value?(Us(),Ls("div",{key:0,class:"mt-auto m-1",title:wa(s),style:{cursor:"help"}},UN,8,PN)):Zs("v-if",!0)]),Gs(wS,{ref_key:"sankey_chart",ref:i,width:c.value,height:u.value,no_data_message:wa(o),sankey_data:d.value,onUpdate_width:w,onUpdate_height:y,onNode_click:v},null,8,["width","height","no_data_message","sankey_data"])],2)])])])]))},__file:"http_src/vue/page-vlan-ports-sankey.vue"};const ON={class:"row"},MN={class:"col-md-12 col-lg-12"},jN={class:"card card-shadow"},LN={class:"card-body"},RN={class:"d-flex align-items-center mb-2"},DN={class:"d-flex no-wrap",style:{"text-align":"left","margin-right":"1rem","min-width":"25rem"}},FN={class:"my-auto me-1"},qN=["title"],zN=["onClick","title"];var BN={__name:"page-aggregated-live-flows",props:{context:Object},setup(e){const t=e,l=ma(t.context.csrf),n=e=>i18n(e),s=[{label:n("application_proto"),value:1,param:"application_protocol",table_id:"aggregated_app_proto",enterprise_m:!1,search_enabled:!0},{label:n("client"),value:2,param:"client",table_id:"aggregated_client",enterprise_m:!1,search_enabled:!1},{label:n("client_server"),value:4,param:"client_server",table_id:"aggregated_client_server",enterprise_m:!0,search_enabled:!1},{label:n("client_server_application_proto"),value:5,param:"app_client_server",table_id:"aggregated_app_client_server",enterprise_m:!0,search_enabled:!0},{label:n("client_server_srv_port"),value:7,param:"client_server_srv_port",table_id:"aggregated_client_server_srv_port",enterprise_m:!1,search_enabled:!1},{label:n("info"),value:6,param:"info",table_id:"aggregated_info",enterprise_m:!0,search_enabled:!0},{label:n("server"),value:3,param:"server",table_id:"aggregated_server",enterprise_m:!1,search_enabled:!1}];ma(null);const o=ma(),i=ma([]),r=ma([]),c=ma("aggregated_live_flows"),u=ko((()=>{if(null==d.value?.value)return c.value;return`${c.value}_${d.value.value}`})),d=ma(s[0]),_=function(){if(t.context.is_ntop_enterprise_m)return ma(s);{let e=[];return s.forEach((t=>{t.enterprise_m||e.push(t)})),ma(e)}}();async function p(){x.set_key_to_url("aggregation_criteria",d.value.param)}_n((async()=>{!function(){let e=x.get_url_entry("aggregation_criteria");if(null==e||""==e)return;d.value=s.find((t=>t.param==e))}()})),pn((async()=>{!async function(e){i.value=await h("overview"),v()}()}));const f=()=>({ifid:x.get_url_entry("ifid")||t.context.ifid,vlan_id:x.get_url_entry("vlan_id"),deviceIP:x.get_url_entry("deviceIP"),aggregation_criteria:x.get_url_entry("aggregation_criteria")||d.value.param,host:x.get_url_entry("host")||t.context.host});function v(){i.value.forEach(((e,t)=>{null==e.basic_label&&(e.basic_label=e.label);const a=x.get_url_entry(e.id);null!=a&&e.options.forEach((t=>{t.value.toString()===a&&(e.label=`${e.basic_label}: ${t.label||t.value}`)}))}))}const m=(e,t)=>a=>{!async function(e,t){if(e.show_spinner=!0,await Ya(),0==e.data_loaded){let a=await h(e.id);e.options=a.find((t=>t.id==e.id)).options,await Ya(),r.value[t].load_menu()}e.show_spinner=!1}(e,t)};async function h(e,a){let l={ifid:x.get_url_entry("ifid")||t.context.ifid},n=x.obj_to_url_params(l),s=x.get_url_params();const o=`${http_prefix}/lua/rest/v2/get/flow/aggregated_live_flows_filters.lua?action=${e}&${s}&${n}`;return(await b.http_request(o)).map((t=>({id:t.action||t.name,label:t.label,title:t.tooltip,data_loaded:"overview"!=e,options:t.value,hidden:1==t.value.length})))}const g=e=>(e.enable_search=1==d.value.search_enabled,e),y=async e=>((e=[]).push({sortable:!1,title_i18n:"flows_page.live_flows",name:"flows_icon",data_field:"live_flows",class:["text-center"],responsivePriority:1,render_func:(e,t)=>$(e,t)}),1==d.value.value?e.push({title_i18n:"application_proto",sortable:!0,name:"application",data_field:"application",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>S(e,t)}):2==d.value.value?e.push({title_i18n:"client",sortable:!0,name:"client",data_field:"client",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>w(e)}):3==d.value.value?e.push({title_i18n:"last_server",sortable:!0,name:"server",data_field:"server",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>k(e,t)}):7==d.value.value?e.push({title_i18n:"client",sortable:!0,name:"client",data_field:"client",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>w(e)},{title_i18n:"last_server",sortable:!0,name:"server",data_field:"server",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>k(e,t)}):t.context.is_ntop_enterprise_m&&(4==d.value.value||7==d.value.value?e.push({title_i18n:"client",sortable:!0,name:"client",data_field:"client",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>w(e)},{title_i18n:"last_server",sortable:!0,name:"server",data_field:"server",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>k(e,t)}):5==d.value.value?e.push({title_i18n:"client",sortable:!0,name:"client",data_field:"client",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>w(e)},{title_i18n:"last_server",sortable:!0,name:"server",data_field:"server",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>k(e,t)},{title_i18n:"application_proto",sortable:!0,name:"application",data_field:"application",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>S(e,t)}):6==d.value.value&&e.push({title_i18n:"info",sortable:!0,name:"info",data_field:"info",class:["text-nowrap"],responsivePriority:1,render_func:e=>`${e.label}`})),t.context.vlans.length>2&&e.push({title_i18n:"vlan",sortable:!0,name:"vlan_id",data_field:"vlan_id",class:["text-nowrap ","text-center"],responsivePriority:1,render_func:e=>{if(0===e.id||null==e.id){const e=i18n("no_vlan");return`<a href="${http_prefix}/lua/flows_stats.lua?vlan=0">${e}</a>`}return`<a href="${http_prefix}/lua/flows_stats.lua?vlan=${e.id}">${e.label}</a>`}}),e.push({title_i18n:"flows",sortable:!0,name:"flows",data_field:"flows",class:["text-nowrap ","text-center"],responsivePriority:1},{title_i18n:"total_score",sortable:!0,name:"score",data_field:"tot_score",class:["text-center"],responsivePriority:1}),2!=d.value.value&&4!=d.value.value&&7!=d.value.value&&e.push({title_i18n:"clients",sortable:!0,name:"num_clients",data_field:"num_clients",class:["text-nowrap ","text-center"],responsivePriority:1}),3!=d.value.value&&4!=d.value.value&&7!=d.value.value&&e.push({title_i18n:"servers",sortable:!0,name:"num_servers",data_field:"num_servers",class:["text-nowrap ","text-center"],responsivePriority:1}),e.push({title_i18n:"breakdown",sortable:!1,name:"breakdown",data_field:"breakdown",class:["text-nowrap","text-center"],responsivePriority:1,render_func:e=>a.createBreakdown(e.percentage_bytes_sent,e.percentage_bytes_rcvd,i18n("sent"),i18n("rcvd"))},{title_i18n:"traffic_sent",sortable:!0,name:"bytes_sent",data_field:"bytes_sent",class:["text-nowrap","text-end"],responsivePriority:1,render_func:e=>a.bytesToSize(e)},{title_i18n:"traffic_rcvd",sortable:!0,name:"bytes_rcvd",data_field:"bytes_rcvd",class:["text-nowrap","text-end"],responsivePriority:1,render_func:e=>a.bytesToSize(e)},{title_i18n:"total_traffic",sortable:!0,name:"tot_traffic",data_field:"tot_traffic",class:["text-nowrap","text-end"],responsivePriority:1,render_func:e=>a.bytesToSize(e)}),e),w=function(e,t){let a="";return e.is_alerted&&(a="<i class='fas fa-exclamation-triangle' style='color: #B94A48;'></i>"),e.in_memory?`<a href="${http_prefix}/lua/flows_stats.lua?client=${e.ip}&vlan=${e.vlan_id}">${e.label}</a> ${a} ${e.extra_labels} <a href="${http_prefix}/lua/host_details.lua?host=${e.ip}&vlan=${e.vlan_id}" data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`:`${e.label} ${a} ${e.extra_labels}`},k=function(e,t){let a="";return e.is_alerted&&(a="<i class='fas fa-exclamation-triangle' style='color: #B94A48;'></i>"),e.in_memory?7==d.value.value&&null!=t.srv_port?`<a href="${http_prefix}/lua/flows_stats.lua?server=${e.ip}&vlan=${e.vlan_id}">${e.label}</a> ${a} ${e.extra_labels} <a href="${http_prefix}/lua/host_details.lua?host=${e.ip}&vlan=${e.vlan_id}" data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>:<a href="${http_prefix}/lua/flows_stats.lua?port=${t.srv_port.id}&vlan=${e.vlan_id}">${t.srv_port.label}</a>`:`<a href="${http_prefix}/lua/flows_stats.lua?server=${e.ip}&vlan=${e.vlan_id}">${e.label}</a> ${a} ${e.extra_labels} <a href="${http_prefix}/lua/host_details.lua?host=${e.ip}&vlan=${e.vlan_id}" data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`:7==d.value.value&&null!=t.srv_port?`${e.label} ${a} ${e.extra_labels}:${t.srv_port.label}`:`${e.label} ${a} ${e.extra_labels}`},$=function(e,a){let l="",n=!1;return null!=t.context.host&&""!=t.context.host&&(n=!0),1==d.value.value?(l=`${http_prefix}/lua/flows_stats.lua?application=${a.application.id}`,n&&(l=l+"&host="+t.context.host)):2==d.value.value?l=`${http_prefix}/lua/flows_stats.lua?client=${a.client.ip}&vlan=${a.client.vlan_id}`:3==d.value.value?l=`${http_prefix}/lua/flows_stats.lua?server=${a.server.ip}&vlan=${a.server.vlan_id}`:4==d.value.value?l=`${http_prefix}/lua/flows_stats.lua?client=${a.client.ip}&server=${a.server.ip}&vlan=${a.vlan_id.id}`:5==d.value.value?l=`${http_prefix}/lua/flows_stats.lua?application=${a.application.id}&client=${a.client.ip}&server=${a.server.ip}&vlan=${a.vlan_id.id}`:6==d.value.value?(l=`${http_prefix}/lua/flows_stats.lua?flow_info=${a.info.id}`,n&&(l=l+"&host="+t.context.host)):7==d.value.value&&(l=`${http_prefix}/lua/flows_stats.lua?client=${a.client.ip}&server=${a.server.ip}&vlan=${a.vlan_id.id}&srv_port=${a.srv_port.id}`),`<a href=${l} class="btn btn-sm btn-info" ><i class= 'fas fa-stream'></i></a>`},S=function(e,t){return 0==t.confidence?`${e.label_with_icons} <span class="badge bg-warning" title=" `+t.confidence_name+'">'+t.confidence_name+" </span>":t.confidence?`${e.label_with_icons} <span class="badge bg-success" title="`+t.confidence_name+' "> '+t.confidence_name+"</span>":void 0};return(e,t)=>(Us(),Ls("div",ON,[Hs("div",MN,[Hs("div",jN,[Hs("div",LN,[Hs("div",RN,[Hs("div",DN,[Hs("label",FN,ae(n("criteria_filter"))+": ",1),Gs(n_,{selected_option:d.value,"onUpdate:selected_option":t[0]||(t[0]=e=>d.value=e),options:wa(_),onSelect_option:p},null,8,["selected_option","options"])])]),Hs("div",null,[Gs(rv,{ref_key:"table_aggregated_live_flows",ref:o,csrf:l.value,table_id:u.value,table_config_id:c.value,f_map_columns:y,get_extra_params_obj:f,f_map_config:g},{custom_header:hl((()=>[(Us(!0),Ls(Cs,null,Tn(i.value,((e,t)=>(Us(),Rs(Fd,{f_on_open:m(e,t),ref_for:!0,ref:e=>{r.value[t]=e},hidden:e.hidden},{title:hl((()=>[Gs(cv,{show:e.show_spinner,size:"1rem",class:"me-1"},null,8,["show"]),Hs("a",{class:"ntopng-truncate",title:e.title},ae(e.label),9,qN)])),menu:hl((()=>[(Us(!0),Ls(Cs,null,Tn(e.options,(e=>(Us(),Ls("a",{style:{cursor:"pointer",display:"block"},onClick:t=>function(e,t){t.stopPropagation(),x.set_key_to_url(e.key,`${e.value}`),v(),o.value.refresh_table()}(e,t),class:"ntopng-truncate tag-filter",title:e.value},[null==e.count?(Us(),Ls(Cs,{key:0},[Js(ae(e.label),1)],64)):(Us(),Ls(Cs,{key:1},[Js(ae(e.label+" ("+e.count+")"),1)],64))],8,zN)))),256))])),_:2},1032,["f_on_open","hidden"])))),256))])),_:1},8,["csrf","table_id","table_config_id"])])])])])]))},__file:"http_src/vue/page-aggregated-live-flows.vue"};const VN={id:"aggregated_live_flows"};var HN={__name:"page-test-table",props:{url:String,ifid:Number,columns_config:Array},setup(e){const t=e,a=ma({}),l=ma(null);return _n((()=>{!function(){const e=[];let n={ifid:ntopng_url_manager.get_url_entry("ifid")||t.ifid},s=ntopng_url_manager.obj_to_url_params(n);e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,a,n){l.value.reload()}});let o={table_buttons:e,data_url:`${t.url}?${s}`,enable_search:!0};o.columns_config=t.columns_config,a.value=o}()})),(e,t)=>(Us(),Ls("div",VN,[Gs(ow,{ref_key:"table_test",ref:l,table_buttons:a.value.table_buttons,columns_config:a.value.columns_config,data_url:a.value.data_url,filter_buttons:a.value.table_filters,enable_search:a.value.enable_search,table_config:a.value.table_config},null,8,["table_buttons","columns_config","data_url","filter_buttons","enable_search","table_config"])]))},__file:"http_src/vue/page-test-table.vue"};const GN={class:"container-fluid"},WN={class:"row form-group mb-3"},KN={class:"col col-md-12"},JN={class:"form-label"},YN={class:"row form-group mb-3"},ZN={class:"col col-md-6"},XN={class:"form-label"},QN={class:"col col-md-6"},eA={class:"form-label"},tA={key:0},aA={key:1},lA=["pattern"],nA={class:"row form-group mb-3"},sA={class:"col col-md-6"},oA={class:"form-label"},iA={class:"col col-md-6"},rA={class:"form-label"},cA={key:0},uA={key:1},dA=["pattern"],_A={class:"row form-group mb-3"},pA={class:"col col-md-12"},fA={class:"form-label"},vA={class:"row form-group mb-3"},mA={class:"col col-md-12"},hA={class:"form-label"},gA=["disabled"];var bA={__name:"modal-nedge-add-rule-config",props:{},emits:["edit","add"],setup(e,{expose:t,emit:a}){const l=e=>i18n(e),n=ma(null),s=ma(""),o=[{label:l("nedge.page_rules_config.modal_rule_config.ip"),value:"ip",default:!0},{label:l("nedge.page_rules_config.modal_rule_config.cidr"),value:"cidr"},{label:l("interface"),value:"interface"}];let i="source_to_dest";const r=[{label:l("nedge.page_rules_config.bidirectional"),value:"bidirectional",bidirectional:!0},{label:l("nedge.page_rules_config.source_to_dest"),value:"source_to_dest",bidirectional:!1}],c=ma({});let u="accept";const d=[{label:l("nedge.page_rules_config.accept"),value:"accept"},{label:l("nedge.page_rules_config.deny"),value:"deny"}],_=ma({}),p=ma(0),f=ma(0),v=ma({}),m=ma(""),h=ma(""),g=ma({}),y=ma(""),w=ma(""),x=`${http_prefix}/lua/rest/v2/get/nedge/interfaces.lua`;let k;const $=ma([]),S=ma({}),C=ma({}),N=ma(""),A=ko((()=>I(v.value,h.value,m.value))),E=ko((()=>I(g.value,w.value,y.value))),T=ma(!0);async function P(e){let t=null;null!=e&&(t=e.source.value),"interface"==v.value.value?(await M(),S.value=null!=t?$.value.find((e=>e.value==t)):$.value[0]):(h.value=null!=e?e.source.value:"",j(m,v.value.value))}async function U(e){let t=null;null!=e&&(t=e.destination.value),"interface"==g.value.value?(await M(),C.value=null!=t?$.value.find((e=>e.value==t)):$.value[0]):(w.value=null!=e?e.destination.value:"",j(y,g.value.value))}function I(e,t,a){if("interface"==e.value)return!0;return new RegExp(a).test(t)}let O=!1;async function M(){if(1==O)return;null==k&&(k=b.http_request(x));let e=await k;$.value=e.filter((e=>"lan"==e.role)).map((e=>({label:e.label,value:e.ifname}))),O=!0}function j(e,t){e.value=wp.get_data_pattern(t)}const L=()=>{let e=v.value.value,t=h.value;"interface"==e&&(t=S.value.value);let l=g.value.value,n=w.value;"interface"==l&&(n=C.value.value);let s={src_type:e,src_value:t,dst_type:l,dst_value:n,policy:_.value.value,bidirectional:"bidirectional"==c.value.value},o="add";0==T.value&&(s.rule_id=p.value,s.new_rule_id=f.value,o="edit"),a(o,s),R()},R=()=>{n.value.close()};return t({show:(e,t)=>{!function(e,t){T.value=null==e,null!=t&&(u=t.value);if(0==T.value)s.value=l("nedge.page_rules_config.modal_rule_config.title_edit"),N.value=l("edit"),v.value=o.find((t=>t.value==e.source.type)),g.value=o.find((t=>t.value==e.destination.type)),c.value=r.find((t=>t.bidirectional==e.bidirectional)),_.value=d.find((t=>t.value==e.action)),p.value=e.rule_id,f.value=e.rule_id;else{s.value=l("nedge.page_rules_config.modal_rule_config.title_add"),N.value=l("add");let e=o.find((e=>1==e.default));v.value=e,g.value=e,c.value=r.find((e=>e.value==i)),_.value=d.find((e=>e.value!=u))}P(e),U(e)}(e,t),n.value.show()},close:R}),pn((()=>{})),(e,t)=>(Us(),Rs(sp,{onShowed:t[12]||(t[12]=e=>{}),ref_key:"modal_id",ref:n},{title:hl((()=>[Js(ae(s.value),1)])),body:hl((()=>[Hs("div",GN,[Zs(" Rule ID "),xn(Hs("div",WN,[Hs("div",KN,[Hs("label",JN,ae(l("nedge.page_rules_config.rule_id")),1),xn(Hs("input",{type:"text",class:"form-control","onUpdate:modelValue":t[0]||(t[0]=e=>f.value=e)},null,512),[[ji,f.value]]),xn(Hs("input",{type:"hidden",class:"form-control","onUpdate:modelValue":t[1]||(t[1]=e=>p.value=e)},null,512),[[ji,p.value]])])],512),[[Zi,!T.value]]),Zs(" Source "),Hs("div",YN,[Hs("div",ZN,[Hs("label",XN,ae(l("nedge.page_rules_config.modal_rule_config.source_type")),1),Gs(n_,{selected_option:v.value,"onUpdate:selected_option":t[2]||(t[2]=e=>v.value=e),onSelect_option:t[3]||(t[3]=e=>P()),options:o},null,8,["selected_option"])]),Hs("div",QN,[Hs("label",eA,ae(l("nedge.page_rules_config.source")),1),"interface"==v.value.value?(Us(),Ls("div",tA,[Gs(n_,{selected_option:S.value,"onUpdate:selected_option":t[4]||(t[4]=e=>S.value=e),options:$.value},null,8,["selected_option","options"])])):(Us(),Ls("div",aA,[xn(Hs("input",{type:"text",class:"form-control",pattern:m.value,"onUpdate:modelValue":t[5]||(t[5]=e=>h.value=e)},null,8,lA),[[ji,h.value]])]))])]),Zs(" Dest "),Hs("div",nA,[Hs("div",sA,[Hs("label",oA,ae(l("nedge.page_rules_config.modal_rule_config.dest_type")),1),Gs(n_,{selected_option:g.value,"onUpdate:selected_option":t[6]||(t[6]=e=>g.value=e),onSelect_option:t[7]||(t[7]=e=>U()),options:o},null,8,["selected_option"])]),Hs("div",iA,[Hs("label",rA,ae(l("nedge.page_rules_config.dest")),1),"interface"==g.value.value?(Us(),Ls("div",cA,[Gs(n_,{selected_option:C.value,"onUpdate:selected_option":t[8]||(t[8]=e=>C.value=e),options:$.value},null,8,["selected_option","options"])])):(Us(),Ls("div",uA,[xn(Hs("input",{type:"text",class:"form-control",pattern:y.value,"onUpdate:modelValue":t[9]||(t[9]=e=>w.value=e)},null,8,dA),[[ji,w.value]])]))])]),Zs(" Direction "),Hs("div",_A,[Hs("div",pA,[Hs("label",fA,ae(l("nedge.page_rules_config.direction")),1),Gs(n_,{selected_option:c.value,"onUpdate:selected_option":t[10]||(t[10]=e=>c.value=e),options:r},null,8,["selected_option"])])]),Zs(" Action "),Hs("div",vA,[Hs("div",mA,[Hs("label",hA,ae(l("nedge.page_rules_config.action")),1),Gs(n_,{selected_option:_.value,"onUpdate:selected_option":t[11]||(t[11]=e=>_.value=e),options:d},null,8,["selected_option"])])])])])),footer:hl((()=>[Hs("button",{type:"button",disabled:!A.value||!E.value,onClick:L,class:"btn btn-primary"},ae(N.value),9,gA)])),_:1},512))}};np("\ninput[data-v-50692d68]:invalid {\n  border-color: #ff0000;\n}\n"),bA.__scopeId="data-v-50692d68",bA.__file="http_src/vue/modal-nedge-add-rule-config.vue";const yA={class:"container-fluid"},wA={class:"row form-group mb-3"},xA={class:"col col-md-12"},kA={class:"form-label"};var $A={__name:"modal-nedge-change-default-policy",emits:["apply"],setup(e,{expose:t,emit:a}){const l=ma(null),n=e=>i18n(e),s=n("nedge.page_rules_config.modal_change_default_policy.title"),o=[{label:n("nedge.page_rules_config.accept"),value:"accept"},{label:n("nedge.page_rules_config.deny"),value:"deny"}],i=ma({}),r=()=>{l.value.close()};function c(){a("apply",i.value.value),r()}return t({show:e=>{i.value=o.find((t=>t.value==e.value)),l.value.show()},close:r}),(e,t)=>(Us(),Rs(sp,{onShowed:t[1]||(t[1]=e=>{}),ref_key:"modal_id",ref:l},{title:hl((()=>[Js(ae(wa(s)),1)])),body:hl((()=>[Hs("div",yA,[Zs(" Default Policy "),Hs("div",wA,[Hs("div",xA,[Hs("label",kA,ae(n("nedge.page_rules_config.default policy")),1),Gs(n_,{selected_option:i.value,"onUpdate:selected_option":t[0]||(t[0]=e=>i.value=e),options:o},null,8,["selected_option"])])])])])),footer:hl((()=>[Hs("button",{type:"button",onClick:c,class:"btn btn-primary"},ae(n("apply")),1)])),_:1},512))},__file:"http_src/vue/modal-nedge-change-default-policy.vue"};const SA={class:"mb-2"},CA=Hs("br",null,null,-1),NA={class:"d-inline-block"},AA={key:0,style:{color:"green"}},EA={key:1,style:{color:"red"}},TA=[Hs("i",{class:"fas fa-cog"},null,-1)],PA={id:"aggregated_live_flows"};var UA={__name:"page-nedge-rules-config",props:{url:String,ifid:Number,csrf:String,columns_config:Array},setup(e){const t=e,a=e=>i18n(e),l=ma({}),n=ma(null),s=ma(null),o=ma(null),i=ma({});function r(e){_(e,`${http_prefix}/lua/rest/v2/edit/nedge/policy/rule.lua`)}function c(e){_(e,`${http_prefix}/lua/rest/v2/add/nedge/policy/rule.lua`)}async function u(e){if(null==e){const t=`${http_prefix}/lua/rest/v2/get/nedge/policy/default.lua`;e=(await b.http_request(t)).default_policy}i.value="accept"==e?{value:e,label:a("nedge.page_rules_config.accept")}:{value:e,label:a("nedge.page_rules_config.deny")}}async function d(e){const a=`${http_prefix}/lua/rest/v2/set/nedge/policy/default.lua`;let l=JSON.stringify({default_policy:e,csrf:t.csrf});await b.http_request(a,{method:"post",headers:{"Content-Type":"application/json"},body:l}),u(e),v()}function _(e,a){let l=JSON.stringify({...e,csrf:t.csrf});b.http_request(a,{method:"post",headers:{"Content-Type":"application/json"},body:l}),v()}function p(){o.value.show(i.value)}_n((async()=>{!function(){const e=[];let n={ifid:x.get_url_entry("ifid")||t.ifid},o=x.obj_to_url_params(n);e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,a,l){v()}},{text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){s.value.show(null,i.value)}});let r={table_buttons:e,data_url:`${t.url}?${o}`,enable_search:!1},c=[{columnName:a("nedge.page_rules_config.rule_id"),targets:0,name:"rule_id",data:"rule_id",className:"text-nowrap text-center",responsivePriority:1},{columnName:a("nedge.page_rules_config.source"),targets:0,name:"source",data:"source",className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,a){return null!=e.label&&""!=e.label?e.label:e.value}},{columnName:a("nedge.page_rules_config.dest"),targets:0,name:"dest",data:"destination",className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,a){return null!=e.label&&""!=e.label?e.label:e.value}},{columnName:a("nedge.page_rules_config.direction"),targets:0,name:"bidirectional",data:"bidirectional",className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,l){return a(1==e?"nedge.page_rules_config.bidirectional":"nedge.page_rules_config.source_to_dest")}},{columnName:a("nedge.page_rules_config.action"),targets:0,name:"action",data:"action",className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,l){let n="red",s=a("nedge.page_rules_config.deny");return"accept"==e&&(n="green",s=a("nedge.page_rules_config.accept")),`<span style="color:${n};">${s}</span>`}}].map((e=>e));c.push({columnName:a("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return f(a)}}),r.columns_config=c,l.value=r}(),u()}));const f=function(e){let a={handlerId:"delete_host",onClick:()=>{!async function(e){const a=`${http_prefix}/lua/rest/v2/delete/nedge/policy/rule.lua`;let l={"Content-Type":"application/json"},n=JSON.stringify({rule_id:e.rule_id,csrf:t.csrf});b.http_request(a,{method:"post",headers:l,body:n}),v()}(e)}},l={handlerId:"edit_rule",onClick:()=>{s.value.show(e)}};return DataTableUtils.createActionButtons([{class:"btn-secondary",handler:l,handlerId:"edit_rule",icon:"fa-edit",title:i18n("edit")},{class:"btn-danger",handler:a,handlerId:"delete_rule",icon:"fa-trash",title:i18n("delete")}])};function v(){setTimeout((()=>{x.reload_url()}),500)}return(e,t)=>(Us(),Ls(Cs,null,[Hs("div",SA,[Hs("h2",null,ae(a("nedge.rules_config_title")),1),CA,Hs("h5",NA,[Js(ae(a("nedge.page_rules_config.default policy"))+" ",1),"accept"==i.value?.value?(Us(),Ls("span",AA,ae(i.value?.label),1)):Zs("v-if",!0),"deny"==i.value?.value?(Us(),Ls("span",EA,ae(i.value?.label),1)):Zs("v-if",!0),Hs("small",null,[Hs("a",{href:"javascript:void(0)",style:{"margin-left":"0.5rem"},onClick:p},TA)])])]),Hs("div",PA,[Gs(ow,{ref_key:"table_rules",ref:n,table_buttons:l.value.table_buttons,columns_config:l.value.columns_config,data_url:l.value.data_url,filter_buttons:l.value.table_filters,enable_search:l.value.enable_search,table_config:l.value.table_config},null,8,["table_buttons","columns_config","data_url","filter_buttons","enable_search","table_config"])]),Gs(bA,{ref_key:"modal_add_rule_config",ref:s,onAdd:c,onEdit:r},null,512),Gs($A,{ref_key:"modal_change_default_policy",ref:o,onApply:d},null,512)],64))},__file:"http_src/vue/page-nedge-rules-config.vue"};const IA={key:0,class:"form-group ms-2 me-2 mt-3 row"},OA={class:"col-form-label col-sm-4"},MA={class:"col-8"},jA={key:1,class:"form-group ms-2 me-2 mt-3 row"},LA={class:"col-form-label col-sm-4"},RA={class:"col-8"},DA={class:"form-group ms-2 me-2 mt-3 row"},FA={class:"col-form-label col-sm-4"},qA={class:"col-8"},zA=["placeholder"],BA=["disabled"],VA=["disabled"];var HA={__name:"modal-add-application",props:{page_csrf:String,ifid:String},emits:["add"],setup(e,{expose:t,emit:a}){const l=ma(null),n=ma(!1),s=e=>i18n(e),o=ma(!0);let i=ma(i18n("add_application"));const r=ma(i18n("details.custom_rules_placeholder")),c=ma({}),u=ma([]),d=ma(""),_=ma(""),p=ma(null);ma({});const f=[s("custom_categories.each_host_separate_line"),s("custom_categories.allowed_rules"),s("custom_categories.ip_address"),s("custom_categories.ip_address_port"),s("custom_categories.port"),s("custom_categories.port_range"),s("custom_categories.host_domain")];const v=()=>{1==m()&&1==h()?o.value=!1:o.value=!0},m=()=>/^[A-Za-z0-9]*$/.test(_.value),h=()=>{let e=!0;return d.value.split("\n").forEach((t=>{e=e&&(/^((tcp|udp):(6553[0-5]|655[0-2][0-9]\d|65[0-4](\d){2}|6[0-4](\d){3}|[1-5](\d){4}|[1-9](\d){0,3}))$/.test(t)||/^((tcp|udp):(6553[0-5]|655[0-2][0-9]\d|65[0-4](\d){2}|6[0-4](\d){3}|[1-5](\d){4}|[1-9](\d){0,3})-(6553[0-5]|655[0-2][0-9]\d|65[0-4](\d){2}|6[0-4](\d){3}|[1-5](\d){4}|[1-9](\d){0,3}))$/.test(t)||/^(ip):(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(t)||/^(ip):(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?):(6553[0-5]|655[0-2][0-9]\d|65[0-4](\d){2}|6[0-4](\d){3}|[1-5](\d){4}|[1-9](\d){0,3})$/.test(t)||/^((host):[a-zA-Z0-9]+)$/.test(t)||/(host):[a-zA-Z0-9].[a-zA-Z]/g.test(t)||""===t)})),e},g=()=>{a("add",{l7_proto_id:p.value,protocol_alias:_.value,category:c.value.id,custom_rules:d.value,is_edit_page:n.value}),b()},b=()=>{l.value.close()};return _n((()=>{})),t({show:e=>{_.value="",c.value=u.value[0],d.value="",n.value=!1,i.value=i18n("add_application"),null!=e&&(p.value=e.application_id,_.value=e.application,n.value=!0,i.value=`${i18n("edit_application")}: ${_.value}`,(e=>{let t=null;u.value.forEach((a=>{a.id==e.category_id&&(t=a)})),c.value=t,d.value=e.custom_rules})(e)),l.value.show(),v()},close:b,loadCategoryList:e=>{u.value=(e=>{let t=[];return e.forEach((e=>{t.push({id:e.cat_id,label:e.name,app_list:e.app_list})})),t=t.sort(((e,t)=>null==e||null==e.label?-1:null==t||null==t.label?1:e.label.toString().localeCompare(t.label.toString()))),t})(e)}}),(e,t)=>(Us(),Rs(sp,{onShowed:t[4]||(t[4]=e=>{}),ref_key:"modal_id",ref:l},{title:hl((()=>[Js(ae(wa(i)),1)])),body:hl((()=>[xn(Hs("input",{class:"form-control",type:"text","onUpdate:modelValue":t[0]||(t[0]=e=>p.value=e),spellcheck:"false",hidden:""},null,512),[[ji,p.value]]),0==n.value?(Us(),Ls("div",IA,[Hs("label",OA,[Hs("b",null,ae(s("app_name")),1)]),Hs("div",MA,[xn(Hs("input",{class:"form-control",type:"text","onUpdate:modelValue":t[1]||(t[1]=e=>_.value=e),onInput:v,spellcheck:"false"},null,544),[[ji,_.value]])])])):(Us(),Ls("div",jA,[Hs("label",LA,[Hs("b",null,ae(s("category")),1)]),Hs("div",RA,[Gs(n_,{selected_option:c.value,"onUpdate:selected_option":t[2]||(t[2]=e=>c.value=e),options:u.value},null,8,["selected_option","options"])])])),Hs("div",DA,[Hs("label",FA,[Hs("b",null,ae(s("category_custom_rule")),1)]),Hs("div",qA,[xn(Hs("textarea",{class:"form-control",onInput:v,placeholder:r.value,rows:"6","onUpdate:modelValue":t[3]||(t[3]=e=>d.value=e),spellcheck:"false"},null,40,zA),[[ji,d.value]])])])])),footer:hl((()=>[Gs(_v,{note_list:f}),0==n.value?(Us(),Ls("button",{key:0,type:"button",onClick:g,class:"btn btn-primary",disabled:o.value},ae(s("add")),9,BA)):(Us(),Ls("button",{key:1,type:"button",onClick:g,class:"btn btn-primary",disabled:o.value},ae(s("apply")),9,VA))])),_:1},512))},__file:"http_src/vue/modal-add-application.vue"},GA={__name:"modal-delete-application",emits:["remove"],setup(e,{expose:t,emit:a}){const l=ma(null),n=e=>i18n(e),s=ma(null);let o=ma(i18n("custom_categories.delete_app"));const i=i18n("custom_categories.delete_app_confirm"),r=()=>{a("remove",{protocol_alias:s.value}),c()},c=()=>{l.value.close()};return t({show:e=>{null!=e&&(s.value=e.application,o.value=`${i18n("custom_categories.delete_app")}: ${s.value}`),l.value.show()},close:c}),(e,t)=>(Us(),Rs(sp,{ref_key:"modal_id",ref:l},{title:hl((()=>[Js(ae(wa(o)),1)])),body:hl((()=>[Js(ae(wa(i)),1)])),footer:hl((()=>[Hs("button",{type:"button",onClick:r,class:"btn btn-primary"},ae(n("delete")),1)])),default:hl((()=>[xn(Hs("input",{class:"form-control",type:"text","onUpdate:modelValue":t[0]||(t[0]=e=>s.value=e),spellcheck:"false",hidden:""},null,512),[[ji,s.value]])])),_:1},512))},__file:"http_src/vue/modal-delete-application.vue"};const WA=Hs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Hs("div",{class:"text-center"},[Hs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Hs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1);var KA={__name:"page-edit-applications",props:{page_csrf:String,ifid:String,has_protos_file:Boolean},setup(e){const t=e,a=ma(null),l=ma(null),n=ma(null),s=ma({}),o=ma([]),i=ma(null),r=ma(!0);let c="";const u=`${http_prefix}/lua/rest/v2/get/l7/category/consts.lua`,d=`${http_prefix}/lua/rest/v2/edit/application/application.lua`,_=`${http_prefix}/lua/rest/v2/delete/application/application.lua`,p=e=>i18n(e),f=async e=>{const a={csrf:t.page_csrf,ifid:t.ifid},l=NtopUtils.buildURL(_,{...a,...e});await $.get(l,(function(e,t){h(i18n("custom_categories.succesfully_removed"))})),g()},v=async e=>{const a=e.is_edit_page;e.is_edit_page=null;const l={csrf:t.page_csrf,ifid:t.ifid},n=NtopUtils.buildURL(d,{...l,...e});await $.get(n,(function(e,t){"success"==t&&h(a?i18n("custom_categories.succesfully_edited"):i18n("custom_categories.succesfully_added"))})),g()},m=e=>{n.value.show(e)},h=e=>{c=e,r.value=!1,setTimeout((()=>{r.value=!0,g()}),4e3)},g=()=>{a.value.reload()};_n((async()=>{!function(){const e=[];t.has_protos_file&&e.push({text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){m()}});e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(){g()}});let a={table_buttons:e,data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/ntopng/applications.lua`,{ifid:t.ifid}),enable_search:!0,table_config:{serverSide:!1,order:[[0,"asc"]]}},n=[{columnName:i18n("application"),name:"application",data:"application",className:"text-nowrap",responsivePriority:1},{columnName:i18n("category"),name:"category",data:"category",className:"text-nowrap",responsivePriority:1,render:function(e,t,a){return e}},{columnName:i18n("custom_categories.custom_hosts"),name:"custom_rules",data:"custom_rules",className:"text-nowrap",responsivePriority:2},{visible:!1,name:"application_hosts",data:"application_hosts"},{visible:!1,name:"application_id",data:"application_id"},{visible:!1,name:"category_id",data:"category_id"},{columnName:p("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return function(e){let t={handlerId:"edit_rule",onClick:()=>{m(e)}};const a=[{class:"pointer",handler:t,icon:"fa-edit",title:i18n("edit")}];if(e.is_custom){let t={handlerId:"delete_rule",onClick:()=>{var t;t=e,l.value.show(t)}};a.push({class:"pointer",handler:t,icon:"fa-trash",title:i18n("delete")})}return DataTableUtils.createActionButtons(a)}(a)}}],o=ntopng_utility.clone(a);o.columns_config=n,s.value=o}()})),pn((async()=>{await(async()=>{await $.get(u,(function(e,t){o.value=e.rsp})),n.value.loadCategoryList(o.value)})();const e=ntopng_url_manager.get_url_entry("application");e&&(e=>{a.value.search_value(e)})(e)})),hn((async()=>{a.value.destroy_table()}));return(t,u)=>(Us(),Ls(Cs,null,[WA,xn(Hs("div",{ref_key:"update_message",ref:i,class:"alert alert-info"},ae(wa(c)),513),[[Zi,!r.value]]),Gs(HA,{ref_key:"modal_add_application",ref:n,category_list:o.value,page_csrf:e.page_csrf,ifid:e.ifid,onAdd:v},null,8,["category_list","page_csrf","ifid"]),Gs(GA,{ref_key:"modal_delete_application",ref:l,onRemove:f},null,512),Gs(ow,{ref_key:"applications_table",ref:a,table_buttons:s.value.table_buttons,columns_config:s.value.columns_config,data_url:s.value.data_url,enable_search:s.value.enable_search,table_config:s.value.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])],64))},__file:"http_src/vue/page-edit-applications.vue"};const JA={class:"row"},YA={class:"col-12"},ZA={class:"card card-shadow"},XA={class:"card-body"},QA={key:0,class:"alert alert-danger",role:"alert",id:"error-alert"},eE={key:2,class:"alert alert-info alert-dismissable"},tE=Hs("span",{class:"spinner-border spinner-border-sm text-info"},null,-1),aE=["innerHTML"],lE=["innerHTML"];var nE={__name:"page-network-discovery",props:{ifid:String},setup(e){const t=e,a=ma(!1),l=i18n("map_page.fetch_error"),n=ma(!1),s=ma(null),o=ma({}),i=ma(null),r=ma(""),c=i18n("discover.network_discovery_not_enabled"),u=ma(!1),d=i18n("discover.ghost_icon_descr"),_=i18n("discover.too_many_devices_descr"),p=ma(!1);let f;const v=[i18n("discover.discovery_running"),i18n("discover.protocols_note")],m=`${http_prefix}/lua/get_discover_progress.lua`,h=`${http_prefix}/lua/rest/v2/get/network/discovery/discover.lua`,g=`${http_prefix}/lua/rest/v2/get/network/discovery/run_discovery.lua`,b=async function(){u.value=!1,await $.get(NtopUtils.buildURL(m,{ifid:t.ifid}),(function(e,t){1==e.rsp.discovery_requested?(n.value=!0,""!=e.rsp.progress&&(i.value=e.rsp.progress)):(n.value=!1,i.value="",clearInterval(f)),(e=>{1==e.ghost_found&&0==p.value&&(v.unshift(d),p.value=!0),1==e.too_many_devices_message&&0==_.value&&(v.unshift(_),_.value=!0),0==e.ghost_found&&0==p.value&&(v.shift(),p.value=!1),0==e.too_many_devices_message&&1==_.value&&(v.shift(),_.value=!1),r.value=e.last_network_discovery})(e.rsp)}))};return pn((()=>{f=setInterval(b,3e3)})),_n((async()=>{!function(){let e={table_buttons:[{text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(){s.value.reload()}},{text:i18n("discover.start_discovery")+' <i class="fa-solid fa-play"></i>',action:function(){u.value=!1,$.get(NtopUtils.buildURL(g,{ifid:t.ifid}),(function(e){})),f=setInterval(b,1e3)}}],data_url:NtopUtils.buildURL(h,{ifid:t.ifid}),enable_search:!0,table_config:{serverSide:!1,order:[[0,"asc"]]}},a=[{columnName:i18n("ip_address"),name:"ip",data:"ip",className:"text-nowrap",responsivePriority:1},{columnName:i18n("name"),name:"name",data:"name",className:"text-nowrap text-center",responsivePriority:1},{columnName:i18n("mac_stats.manufacturer"),name:"manufacturer",data:"manufacturer",className:"text-nowrap",responsivePriority:2},{columnName:i18n("mac_address"),name:"mac_address",data:"mac_address",className:"text-nowrap",responsivePriority:2},{columnName:i18n("os"),name:"os",data:"os",className:"text-nowrap text-center",responsivePriority:2},{columnName:i18n("info"),name:"info",data:"info",className:"text-nowrap",responsivePriority:2},{columnName:i18n("device"),name:"device",data:"device",className:"text-nowrap",responsivePriority:2}],l=ntopng_utility.clone(e);l.columns_config=a,o.value=l}()})),hn((async()=>{s.value.destroy_table()})),(e,t)=>(Us(),Ls("div",JA,[Hs("div",YA,[Hs("div",ZA,[u.value?(Us(),Rs(wf,{key:0})):Zs("v-if",!0),Hs("div",XA,[a.value?(Us(),Ls("div",QA,ae(wa(l)),1)):Zs("v-if",!0),n.value?(Us(),Ls("div",eE,[tE,Js(" "+ae(wa(c))+" ",1),Hs("span",{innerHTML:i.value},null,8,aE)])):(Us(),Rs(ow,{key:1,ref_key:"network_discovery_table",ref:s,table_buttons:o.value.table_buttons,columns_config:o.value.columns_config,data_url:o.value.data_url,enable_search:o.value.enable_search,table_config:o.value.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])),Gs(_v,{note_list:v}),Zs(" Adding Extra Message "),Hs("div",{class:"p-1",innerHTML:r.value},null,8,lE)])])])]))},__file:"http_src/vue/page-network-discovery.vue"};const sE={class:"row"},oE={class:"col-md-12 col-lg-12"},iE={class:"card card-shadow"},rE={class:"card-body"},cE=Hs("div",{class:"d-flex align-items-center"},null,-1);var uE={__name:"page-manage-configurations-backup",props:{date_format:String},setup(e){const t=e,a=e=>i18n(e),l=ma(null),n=`${http_prefix}/lua/rest/v2/get/system/configurations/list_available_backups.lua`,s=ma({}),o=ma(!1);_n((async()=>{await async function(){const e=[];e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,a,n){o.value=!0,l.value.reload(),o.value=!1}});let i={table_buttons:e,data_url:`${n}`,enable_search:!0,id:"manage_configurations_backup",table_config:{serverSide:!0,responsive:!1,scrollX:!0,columnDefs:[{type:"file-size",targets:0}]}},r=[];r.push({columnName:a("backup_date"),orderable:!0,targets:0,name:"epoch",data:"epoch",className:"text-left",responsivePriority:1,render:(e,a,l)=>function(e,a){const l=1e3*e;let n="HH:MM:SS";return n="little_endian"==t.date_format?"DD/MM/YYYY "+n:"middle_endian"==t.date_format?"MM/DD/YYYY "+n:"YYYY/MM/DD "+n,ntopng_utility.from_utc_to_server_date_format(l,n)}(e)},{columnName:a("actions"),orderable:!1,width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return function(e){let t={handlerId:"download_backup_handler",onClick:()=>{var t;t=e,window.open(`${http_prefix}/lua/rest/v2/get/system/configurations/download_backup.lua?epoch=${t.epoch}&download=true`)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:t,icon:"fas fa-download fa-lg",title:i18n("download")}])}(a)}}),i.columns_config=r,s.value=i}()}));return(e,t)=>(Us(),Ls("div",sE,[Hs("div",oE,[Hs("div",iE,[Hs("div",rE,[o.value?(Us(),Rs(wf,{key:0})):Zs("v-if",!0),Hs("div",{id:"manage_configurations_backup",class:J([o.value?"ntopng-gray-out":""])},[(Us(),Rs(ow,{ref_key:"table_manage_configurations_backup",ref:l,id:s.value.id,key:s.value.data_url,table_buttons:s.value.table_buttons,columns_config:s.value.columns_config,data_url:s.value.data_url,table_config:s.value.table_config},{menu:hl((()=>[cE])),_:1},8,["id","table_buttons","columns_config","data_url","table_config"]))],2)])])])]))},__file:"http_src/vue/page-manage-configurations-backup.vue"};const dE={class:"form-group ms-2 me-2 mt-3 row"},_E={class:"col-form-label col-sm-2"},pE={class:"col-sm-10"},fE={class:"btn-group btn-group-toggle","data-bs-toggle":"buttons"},vE={class:"form-group ms-2 me-2 mt-3 row"},mE={class:"col-form-label col-sm-2"},hE={class:"col-10"},gE={key:0,class:"form-group ms-2 me-2 mt-3 row"},bE={class:"col-form-label col-sm-2"},yE={class:"col-10"},wE={class:"form-group ms-2 me-2 mt-3 row"},xE={class:"col-form-label col-sm-2"},kE={class:"col-10"},$E={class:"form-group ms-2 me-2 mt-3 row"},SE={class:"col-form-label col-sm-2"},CE={class:"col-10"},NE={class:"form-group ms-2 me-2 mt-3 row",style:{"margin-top":"3px"}},AE={class:"col-form-label col-sm-2"},EE={class:"col-sm-3"},TE={class:"btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},PE=["value","id"],UE=["id","for"],IE=["value","id"],OE=["id","for"],ME=["value","id"],jE=["id","for"],LE={key:0,class:"col-sm-2 btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},RE=["value","id"],DE=["id","for"],FE={key:1,class:"col-sm-2 btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},qE=["value","id"],zE=["id","for"],BE={key:1,class:"message alert alert-warning mt-3"},VE=["disabled"],HE=["disabled"];var GE={__name:"modal-add-snmp-device-rules",props:{ifid_list:Array,snmp_devices_list:Array,snmp_metric_list:Array,frequency_list:Array,init_func:Function,page_csrf:String},emits:["add","edit"],setup(e,{expose:t,emit:l}){const n=e;ma(""),ma("");const s=ma(null),o=e=>i18n(e);ma(null),ma(null);const i=ma([]),r=ma([]);let c=ma([]),u=ma(!0);const d=`${http_prefix}/lua/pro/rest/v2/get/snmp/device/available_interfaces.lua`,_=ma([]),p=ma(null),f=ma(null),v=ma({}),m=ma({}),h=ma({}),g=ma({}),b=ma({}),y=ma(!0),w=ma({}),x=ma(!0),k=ma("snmp"),S=ma(!1),C=ma(null);let N=ma([]),A=o("if_stats_config.add_host_rules_title");const E=[o("if_stats_config.note_snmp_device_rules.note_1"),o("if_stats_config.note_snmp_device_rules.note_2"),o("if_stats_config.note_snmp_device_rules.note_3"),o("if_stats_config.note_3"),o("if_stats_config.note_4"),o("if_stats_config.note_5")],T=ma([{title:o("volume"),label:o("volume"),id:"volume",active:!0},{title:o("throughput"),label:o("throughput"),id:"throughput",active:!1},{title:o("percentage"),label:o("percentage"),id:"percentage",active:!1},{title:o("packets"),label:o("packets"),id:"packets",active:!1}]),P=ma([{title:o("kb"),label:o("kb"),id:"kb",value:1024,active:!1},{title:o("mb"),label:o("mb"),id:"mb",value:1048576,active:!1},{title:o("gb"),label:o("gb"),id:"gb",value:1073741824,active:!0,default_active:!0}]),U=ma([{title:o("kbps"),label:o("kbps"),id:"kbps",value:1e3,active:!1},{title:o("mbps"),label:o("mbps"),id:"mbps",value:1e6,active:!1},{title:o("gbps"),label:o("gbps"),id:"gbps",value:1e9,active:!0,default_active:!0}]),I=ma([{title:"+",label:">",id:"plus",value:1,active:!1,absolute_value:!0},{title:"-",label:"<",id:"minus",value:-1,active:!0,default_active:!0}]),O=ma([{title:"+",label:">",id:"plus",value:1,active:!0,absolute_value:!0}]),M=[{title:"+",label:"%",id:"plus",value:1,active:!0}],j=ma(null),L=ma(null),R={csrf:n.page_csrf};function D(e){e.forEach((e=>e.active=1==e.default_active))}const F=e=>{const t=e.target.id;I.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1}))},q=e=>{const t=e.target.id;"throughput"==w.value.id?U.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):"volume"==w.value.id?P.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):"percentage"==w.value.id?M.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):w.value.id};async function z(e){const t=a.buildURL(d+"?host="+m.value.label_to_insert,R);let l=[];await $.get(t,(function(e,t){l=e.rsp}));let n=[];l.forEach((e=>{null!=e.name&&""!=e.name&&e.name!=e.id?n.push({label:e.name+" ("+e.id+")",id:e.id,name:e.name}):n.push({label:e.id,id:e.id,name:e.id})})),n.push({label:"*",id:"*",name:"*"}),n.sort((function(e,t){return e.label.toLowerCase()>t.label.toLowerCase()?1:e.label.toLowerCase()<t.label.toLowerCase()?-1:0})),null!=e&&n.forEach((t=>{t.id==e&&(h.value=t)})),c.value=n,"all"==m.value.label_to_insert?u.value=!1:u.value=!0}function B(){let e=[];"packets"==g.value.id?T.value.forEach((t=>{"percentage"!=t.id?t.active=!1:(t.active=!0,e.push(t),w.value=t)})):"errors"==g.value.id?T.value.forEach((t=>{"packets"!=t.id?t.active=!1:(t.active=!0,e.push(t),w.value=t)})):T.value.forEach((t=>{"packets"==t.id?t.active=!1:e.push(t)})),N.value=e}const V=e=>{"snmp"==k.value&&j.value;const t=b.value.id,a=g.value.id,n=g.value.label,s=m.value.label_to_insert,o=m.value.label,i=null==h.value||0===Object.entries(h.value).length?"*":h.value.id,r=null==h.value||0===Object.entries(h.value).length?"*":h.value.label;let c,u,d,_,p,f=w.value.id;!1===x.value&&(f="",tmp_extra_metric="",_=L.value.value),"throughput"==f?(I.value.forEach((e=>{e.active&&(d=e.value)})),p=parseInt(d),U.value.forEach((e=>{e.active&&(c=e.value,u=e.label)})),_=c*parseInt(L.value.value)/8):"volume"==f?(I.value.forEach((e=>{e.active&&(d=e.value)})),p=parseInt(d),P.value.forEach((e=>{e.active&&(c=e.value,u=e.label)})),_=c*parseInt(L.value.value)):"percentage"==f?(I.value.forEach((e=>{e.active&&(d=e.value)})),p=parseInt(d),_=p*parseInt(L.value.value),u="%"):(p=1,_=parseInt(L.value.value));let v="add";1==e&&(v="edit"),l(v,{frequency:t,metric:a,metric_label:n,threshold:_,metric_type:f,snmp_device:s,snmp_device_label:o,snmp_device_port:i,snmp_device_port_label:r,rule_threshold_sign:p,snmp_threshold_value:L.value.value,snmp_threshold_unit:u,snmp_metric_type_label:w.value.title}),G()},H=()=>{V(!0)},G=()=>{s.value.close()};return _n((()=>{T.value.forEach((e=>{e.active&&(w.value=e)}))})),t({show:e=>{null!=e?(e=>{null!=e&&(S.value=!0,A=o("if_stats_config.edit_host_rules_title"),y.value=!1,r.value.forEach((t=>{t.label_to_insert==e.device&&(m.value=t)})),I.value.forEach((t=>{t.active=t.value==e.threshold_sign})),i.value.forEach((t=>{t.id==e.metric&&(g.value=t)})),"volume"==e.metric_type?P.value.forEach((t=>{if(e.threshold%t.value==0){let a=e.threshold/t.value;a<1024?(t.active=!0,L.value.value=0==a?1:a):t.active=!1}else t.active=!1})):"throughput"==e.metric_type?(e.threshold=8*e.threshold,U.value.forEach((t=>{if(e.threshold%t.value==0){let a=e.threshold/t.value;a<1e3?(t.active=!0,L.value.value=0==a?1:a):t.active=!1}else t.active=!1}))):L.value.value=e.threshold,B(),N.value.forEach((t=>{t.id==e.metric_type?(w.value=t,t.active=!0):t.active=!1})),k.value=e.rule_type,r.value.forEach((t=>{t.label==e.device&&(m.value=t)})),_.value.forEach((t=>{t.id==e.frequency&&(b.value=t)})),z(e.device_port))})(e):async function(){S.value||(j.value="",v.value=i.value[0],m.value=null,m.value=r.value[0],z(),g.value=i.value[0],B(),b.value=_.value[0],w.value=T.value[0],T.value.forEach((e=>e.active=!1)),T.value[0].active=!0,D(P.value),D(U.value),D(I.value),k.value="snmp",y.value=!0,u.value=!1,L.value.value=1)}(),s.value.show()},close:G,metricsLoaded:(e,t,a)=>{r.value=function(e){let t=[];return e.data.forEach((e=>{null!=e.column_name&&""!=e.column_name&&"all"!=e.column_name?t.push({label:e.column_name+" ("+e.column_key+")",label_to_insert:e.column_key}):"all"==e.column_name?t.push({label:e.column_key,label_to_insert:e.column_name}):t.push({label:e.column_key,label_to_insert:e.column_key})})),t.sort((function(e,t){return e.label.toLowerCase()>t.label.toLowerCase()?1:e.label.toLowerCase()<t.label.toLowerCase()?-1:0})),t}(e),i.value=t,_.value=n.frequency_list,b.value=_.value[0],v.value=i.value[0],C.value=a}}),(e,t)=>(Us(),Rs(sp,{onShowed:t[8]||(t[8]=e=>{}),ref_key:"modal_id",ref:s},{title:hl((()=>[Js(ae(wa(A)),1)])),body:hl((()=>[Zs(" Target information, here an IP is put "),Hs("div",dE,[Hs("label",_E,[Hs("b",null,ae(o("if_stats_config.add_rules_type")),1)]),Hs("div",pE,[Hs("div",fE,[Hs("label",{class:J(["btn",["snmp"==k.value?"btn-primary active":"btn-secondary"]])},[Hs("input",{class:"btn-check",type:"radio",name:"rule_type",value:"snmp",onClick:t[0]||(t[0]=e=>{return t="snmp",void(k.value=t);var t})}),Js(" "+ae(o("if_stats_config.add_rules_type_snmp")),1)],2)])])]),Hs("div",vE,[Hs("label",mE,[Hs("b",null,ae(o("if_stats_config.snmp_device")),1)]),Hs("div",hE,[Gs(n_,{selected_option:m.value,"onUpdate:selected_option":t[1]||(t[1]=e=>m.value=e),onSelect_option:t[2]||(t[2]=e=>z()),options:r.value},null,8,["selected_option","options"])])]),1==wa(u)?(Us(),Ls("div",gE,[Hs("label",bE,[Hs("b",null,ae(o("if_stats_config.snmp_interface")),1)]),Hs("div",yE,[Gs(n_,{selected_option:h.value,"onUpdate:selected_option":t[3]||(t[3]=e=>h.value=e),options:wa(c)},null,8,["selected_option","options"])])])):Zs("v-if",!0),Hs("div",wE,[Hs("label",xE,[Hs("b",null,ae(o("if_stats_config.metric")),1)]),Hs("div",kE,[Gs(n_,{selected_option:g.value,"onUpdate:selected_option":t[4]||(t[4]=e=>g.value=e),onSelect_option:t[5]||(t[5]=e=>B()),options:i.value},null,8,["selected_option","options"])])]),Zs(" Frequency information, a frequency of 1 day, 5 minute or 1 hour for example "),Hs("div",$E,[Hs("label",SE,[Hs("b",null,ae(o("if_stats_config.frequency")),1)]),Hs("div",CE,[Gs(n_,{selected_option:b.value,"onUpdate:selected_option":t[6]||(t[6]=e=>b.value=e),options:_.value},null,8,["selected_option","options"])])]),Zs(" Threshold information, maximum amount of bytes "),Hs("div",NE,[Hs("label",AE,[Hs("b",null,ae(o("if_stats_config.threshold")),1)]),x.value?(Us(),Ls(Cs,{key:0},[Hs("div",EE,[Gs(n_,{selected_option:w.value,"onUpdate:selected_option":t[7]||(t[7]=e=>w.value=e),options:wa(N)},null,8,["selected_option","options"])]),Hs("div",{class:J(["col-3",["throughput"==w.value.id?"p-0":""]])},[Hs("div",TE,["throughput"==w.value.id&&"packets"!=w.value.id?(Us(!0),Ls(Cs,{key:0},Tn(U.value,(e=>(Us(),Ls(Cs,null,[Hs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:p,name:"threshold_measure"},null,8,PE),Hs("label",{class:J(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:q,for:e.id},ae(e.label),11,UE)],64)))),256)):Zs("v-if",!0),"percentage"==w.value.id&&"packets"!=w.value.id?(Us(),Ls(Cs,{key:1},Tn(M,(e=>(Us(),Ls(Cs,null,[Hs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:p,name:"threshold_measure"},null,8,IE),Hs("label",{class:J(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:q,for:e.id},ae(e.label),11,OE)],64)))),64)):Zs("v-if",!0),"volume"==w.value.id&&"packets"!=w.value.id?(Us(!0),Ls(Cs,{key:2},Tn(P.value,(e=>(Us(),Ls(Cs,null,[Hs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:p,name:"threshold_measure"},null,8,ME),Hs("label",{class:J(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:q,for:e.id},ae(e.label),11,jE)],64)))),256)):Zs("v-if",!0)])],2),"packets"!=w.value.id?(Us(),Ls("div",LE,[(Us(!0),Ls(Cs,null,Tn(I.value,(e=>(Us(),Ls(Cs,null,[Hs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_sign",ref:f,name:"threshold_sign"},null,8,RE),Hs("label",{class:J(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:F,for:e.id},ae(e.label),11,DE)],64)))),256))])):(Us(),Ls("div",FE,[(Us(!0),Ls(Cs,null,Tn(O.value,(e=>(Us(),Ls(Cs,null,[Hs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_sign",ref:f,name:"threshold_sign"},null,8,qE),Hs("label",{class:J(["btn",[e.absolute_value?"btn-primary active":"btn-secondary"]]),id:e.id,for:e.id},ae(e.label),11,zE)],64)))),256))]))],64)):Zs("v-if",!0),Hs("div",{class:J([x.value?"col-sm-2":"col-sm-8"])},["percentage"==w.value.id?(Us(),Ls("input",{key:0,value:"1",ref_key:"threshold",ref:L,type:"number",name:"threshold",class:"form-control",max:"100",min:"1",required:""},null,512)):(Us(),Ls("input",{key:1,value:"1",ref_key:"threshold",ref:L,type:"number",name:"threshold",class:"form-control",max:"1023",min:"1",required:""},null,512))],2)]),"percentage"==w.value.id?(Us(),Ls("div",BE,ae(o("show_alerts.host_rules_percentage")),1)):Zs("v-if",!0)])),footer:hl((()=>[Gs(_v,{note_list:E}),0==S.value?(Us(),Ls("button",{key:0,type:"button",onClick:V,class:"btn btn-primary",disabled:y.value&&"Host"==k.value},ae(o("add")),9,VE)):(Us(),Ls("button",{key:1,type:"button",onClick:H,class:"btn btn-primary",disabled:y.value&&"Host"==k.value},ae(o("apply")),9,HE))])),_:1},512))},__file:"http_src/vue/modal-add-snmp-device-rules.vue"};const WE={class:"row"},KE={class:"col-md-12 col-lg-12"},JE={class:"card"},YE=Hs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Hs("div",{class:"text-center"},[Hs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Hs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),ZE={class:"card-body"},XE={class:"mb-4"},QE={id:"host_rules"},eT={class:"card-footer"};var tT={__name:"page-snmp-device-rules",props:{page_csrf:String,ifid:String},setup(e){const t=e,l=ma(null),n=ma(null),s=ma(null),o=e=>i18n(e),i=ma({}),r=ma({}),c=`${http_prefix}/lua/pro/rest/v2/get/snmp/metric/rule_metrics.lua`,u=`${http_prefix}/lua/pro/enterprise/get_snmp_devices_list.lua`,d=`${http_prefix}/lua/pro/rest/v2/get/snmp/device/rules.lua`,_=`${http_prefix}/lua/pro/rest/v2/add/snmp/device/rule.lua`,p=`${http_prefix}/lua/pro/rest/v2/delete/snmp/device/rule.lua`,f=[o("if_stats_config.generic_notes_1"),o("if_stats_config.generic_notes_2"),o("if_stats_config.generic_notes_3")],v={ifid:t.ifid,csrf:t.page_csrf};let m={},h=o("if_stats_config.delete_host_rules_title");o("if_stats_config.edit_local_network_rules");let g=o("if_stats_config.delete_host_rules_description"),b=[],y=[];const w=[{title:i18n("show_alerts.5_min"),label:i18n("show_alerts.5_min"),id:"5min"},{title:i18n("show_alerts.hourly"),label:i18n("show_alerts.hourly"),id:"hour"},{title:i18n("show_alerts.daily"),label:i18n("show_alerts.daily"),id:"day"}];async function x(e){await C(),await N(e)}const k=function(){const e=r.value;return r.value=null,e},S=function(){l.value.reload()},C=async function(){const e=i.value,t=a.buildURL(p,{...v,rule_id:e.id,rule_type:e.rule_type});await $.post(t,(function(e,t){S()}))},N=async function(e){const t=a.buildURL(_,{...v,...e});await $.post(t,(function(e,t){S()}))},A=function(e){let t={handlerId:"delete_host",onClick:()=>{var t;t=e,i.value=t,n.value.show()}},a={handlerId:"edit_rule",onClick:()=>{var t;t=e,r.value=t,i.value=t,s.value.show(t)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:a,icon:"fa-edit",title:i18n("edit")},{class:"pointer",handler:t,icon:"fa-trash",title:i18n("delete")}])},E=function(){const e=[];e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(){S()}},{text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){s.value.show()}});const t=[{columnName:o("actions"),targets:0,width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return A(a)}},{columnName:o("id"),visible:!1,targets:1,name:"id",data:"id",className:"text-nowrap",responsivePriority:1},{columnName:o("if_stats_config.snmp_device"),targets:2,width:"20",name:"device",data:"device",className:"text-nowrap",responsivePriority:1,render:function(e,t,a){return function(e,t){return t.device_label}(0,a)}},{columnName:o("if_stats_config.snmp_interface"),targets:3,width:"20",name:"interface",data:"interface",className:"text-center",responsivePriority:1,render:function(e,t,a){return function(e,t){return t.device_port_label}(0,a)}},{columnName:o("if_stats_config.metric"),targets:4,width:"10",name:"metric",data:"metric",className:"text-center",responsivePriority:1,render:function(e,t,a){return function(e,t){let a=e;return t.metric_label&&t.metric_label!=e&&""!=t.metric_label&&(a=t.metric_label),a}(e,a)}},{columnName:o("if_stats_config.frequency"),targets:5,width:"10",name:"frequency",data:"frequency",className:"text-center",responsivePriority:1,render:function(e){return function(e){let t="";return w.forEach((a=>{e==a.id&&(t=a.title)})),t}(e)}},{columnName:o("if_stats_config.threshold"),targets:6,width:"10",name:"threshold",data:"threshold",className:"text-end",responsivePriority:1,render:function(e,t,l){return function(e,t){let l=parseInt(e),n="> ";return t.threshold_sign&&"-1"==t.threshold_sign&&(n="< "),t.metric_type&&"throughput"==t.metric_type?l=n+a.bitsToSize_no_comma(8*e):t.metric_type&&"volume"==t.metric_type?l=n+a.bytesToSize(e):t.metric_type&&"percentage"==t.metric_type?(e<0&&(e*=-1),l=n+a.fpercent(e)):l=n+e,l}(e,l)}},{columnName:o("metric_type"),visible:!1,targets:7,name:"metric_type",data:"metric_type",className:"text-nowrap",responsivePriority:1}],l={table_buttons:e,data_url:a.buildURL(d,v),enable_search:!0,columns_config:t,table_config:{scrollX:!1,serverSide:!1,order:[[1,"desc"]],columnDefs:t}};m=l};return _n((async()=>{E(),await async function(){const e=a.buildURL(c,v);await $.get(e,(function(e,t){b=e.rsp}))}(),await async function(){v.verbose=!0;const e=a.buildURL(u,v);await $.get(e,(function(e,t){y=e.rsp})),y.data.push({column_key:"*",column_name:"all"})}(),s.value.metricsLoaded(y,b,t.page_csrf)})),hn((()=>{l.value.destroy_table()})),(e,t)=>(Us(),Ls("div",WE,[Hs("div",KE,[Hs("div",JE,[YE,Hs("div",ZE,[Hs("div",XE,[Hs("h4",null,ae(o("if_stats_config.snmp_rules")),1)]),Hs("div",QE,[Gs(zw,{ref_key:"modal_delete_confirm",ref:n,title:wa(h),body:wa(g),onDelete:C},null,8,["title","body"]),Gs(GE,{ref_key:"modal_add_snmp_device_rule",ref:s,frequency_list:w,init_func:k,onAdd:N,onEdit:x},null,512),Gs(ow,{ref_key:"table_host_rules",ref:l,table_buttons:wa(m).table_buttons,columns_config:wa(m).columns_config,data_url:wa(m).data_url,enable_search:wa(m).enable_search,table_config:wa(m).table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])]),Hs("div",eT,[Gs(_v,{note_list:f})])])])]))},__file:"http_src/vue/page-snmp-device-rules.vue"};var aT={__name:"page-snmp-devices-interfaces-similarity",props:{context:Object},setup(e){const t=e,a=e=>i18n(e),l=[a("snmp.snmp_similarity_note"),a("snmp.snmp_similarity_time_note")];return pn((async()=>{Kd.build_table(http_prefix,"snmp_similarity_data")})),console.log(t.context),(e,t)=>(Us(),Ls(Cs,null,[Js(" Ciao Mondo "),Gs(_v,{note_list:l})],64))},__file:"http_src/vue/page-snmp-devices-interfaces-similarity.vue"};const lT={class:"row"},nT={class:"col-md-12 col-lg-12"},sT={class:"card card-shadow"},oT={class:"card-body"},iT={class:"d-flex mb-3"},rT={class:"d-flex align-items-center ml-2 mb-2"},cT={class:"d-flex no-wrap",style:{"text-align":"left","margin-right":"1rem","min-width":"25rem"}},uT={class:"my-auto me-1"},dT={class:"d-flex align-items-center mb-2"},_T={class:"d-flex no-wrap",style:{"text-align":"left","margin-right":"1rem","min-width":"25rem"}},pT={class:"my-auto me-1"},fT={class:"d-flex align-items-center mb-2"},vT={class:"d-flex no-wrap",style:{"text-align":"left","margin-right":"1rem","min-width":"25rem"}},mT={class:"my-auto me-1"},hT=["title"],gT=["onClick","title"];var bT={__name:"page-hosts-ports-analysis",props:{is_ntop_enterprise_m:Boolean,csrf:String,vlans:Array,ifid:Number,aggregation_criteria:String,page:Number,sort:String,order:String,start:Number,length:Number,host:String},setup(e){const t=e,l=ma([]),n=ma([]);ma({csrf:t.csrf,ifid:t.ifid});const s=e=>i18n(e),o=[{label:s("udp"),value:17,param:"udp",table_id:"udp_ports_analysis",enterprise_m:!1},{label:s("tcp"),value:6,param:"client",table_id:"tcp_ports_analysis",enterprise_m:!1}],i=ma(o[0]),r=ma("server_ports_analysis"),c=ma({}),u=ma({}),d=ma();let _=ma([]),p=ma([]);const f=function(){if(t.is_ntop_enterprise_m)return ma(o);{let e=[];return o.forEach((t=>{t.enterprise_m||e.push(t)})),ma(e)}}();pn((async()=>{!async function(e){l.value=await w("overview"),N()}();let e=x.get_url_entry("port"),t=x.get_url_entry("protocol");const a=x.get_url_entry("application");null!=e&&0!=e.localeCompare("")&&null!=t&&0!=t.localeCompare("")&&null!=a&&0!=a.localeCompare("")?(e=Number(e),t=Number(t),o.forEach((e=>{e.value==t&&(i.value=e)})),await A(!1,a,e)):(i.value=o[0],await A(!1),d.value.refresh_table())}));const v=()=>x.get_url_object();async function m(){await A(!1),d.value.refresh_table()}async function h(){await A(!0),d.value.refresh_table()}function g(){y(),d.value.refresh_table()}function y(){x.set_key_to_url("port",c.value.id)}async function w(e,t){let a=v(),l=x.obj_to_url_params(a);const n=`${http_prefix}/lua/pro/rest/v2/get/host/hosts_details_by_port_filters.lua?action=${e}&${l}`;return(await b.http_request(n)).map((t=>({id:t.action||t.name,label:t.label,title:t.tooltip,data_loaded:"overview"!=e,options:t.value,hidden:1==t.value.length})))}const k=(e,t)=>a=>{!async function(e,t){if(e.show_spinner=!0,await Ya(),0==e.data_loaded){let a=await w(e.id);e.options=a.find((t=>t.id==e.id)).options,await Ya(),n.value[t].load_menu()}e.show_spinner=!1}(e,t)};function $(e){let t={click_button_flows:S};null!=t[e.event_id]&&t[e.event_id](e)}function S(e){C(e.row.ip)}const C=function(e){let t={l4proto:i.value.value,server:e,port:c.value.id},a=x.obj_to_url_params(t);const l=`${http_prefix}/lua/flows_stats.lua?${a}`;x.go_to_url(`${l}`)};function N(){l.value.forEach(((e,t)=>{null==e.basic_label&&(e.basic_label=e.label);const a=x.get_url_entry(e.id);null!=a&&e.options.forEach((t=>{t.value.toString()===a&&(e.label=`${e.basic_label}: ${t.label||t.value}`)}))}))}async function A(e,t,a){x.set_key_to_url("protocol",i.value.value);const l=`${http_prefix}/lua/pro/rest/v2/get/host/server_ports.lua?protocol=`+i.value.value;let n=await b.http_request(l,null,null,!0),s=[];p.value=[],_.value=[],n.rsp.forEach((e=>{let t=e.l7_proto_name.split(".")[0];s.push({label:e.srv_port+"/"+t+" ("+e.n_hosts+")",id:e.srv_port,application:t,num_hosts:e.n_hosts,vlan_id:e.vlan_id})})),s.forEach((e=>{null==p.value.find((t=>0==t.id.localeCompare(e.application)))&&p.value.push({label:e.application,id:e.application,value:e.application})})),p.value.sort(((e,t)=>{let a=e.label.toLowerCase(),l=t.label.toLowerCase();return a<l?-1:a>l?1:0})),e||null!=t||(u.value=p.value[0]),e||null==t||p.value.forEach((e=>{e.label==t&&(u.value=e)})),x.set_key_to_url("application",u.value.id),s.forEach((e=>{e.application==u.value.label&&_.value.push({label:e.id+" ("+e.num_hosts+")",id:e.id,value:e.id,vlan_id:e.vlan_id,n_hosts:e.num_hosts})})),null!=a?_.value.forEach((e=>{e.id==a&&(c.value=e)})):c.value=_.value[0],y()}const E=async e=>{let t={ip:(e,t)=>{if(void 0!==e)return T(e,t)},name:(e,t)=>{if(void 0!==e)return U(e,t)},mac:(e,t)=>{if(void 0!==e)return P(e)},tot_traffic:(e,t)=>{if(void 0!==e)return a.bytesToSize(e)}};return e.forEach((e=>{e.render_func=t[e.data_field]})),e},T=function(e,t){return null!=e?0!=t.vlan_id?`<a href="${http_prefix}/lua/flows_stats.lua?server=${e}&vlan=${t.vlan_id}&port=${c.value.id}">${e}@${t.vlan_id}</a>`:`<a href="${http_prefix}/lua/flows_stats.lua?server=${e}&port=${c.value.id}">${e}</a>`:e},P=function(e,t){return null!=e?`<a href="${http_prefix}/lua/mac_details.lua?host=${e}">${e}</a>`:e},U=function(e,t){return null!=e?0!=t.vlan_id?`<a href="${http_prefix}/lua/host_details.lua?host=${t.ip}&vlan=${t.vlan_id}">${e}</a>`:`<a href="${http_prefix}/lua/host_details.lua?host=${t.ip}">${e}</a>`:e};return(t,a)=>(Us(),Ls("div",lT,[Hs("div",nT,[Hs("div",sT,[Hs("div",oT,[Hs("div",iT,[Hs("div",rT,[Hs("div",cT,[Hs("label",uT,ae(s("protocol"))+": ",1),Gs(n_,{selected_option:i.value,"onUpdate:selected_option":a[0]||(a[0]=e=>i.value=e),options:wa(f),onSelect_option:m},null,8,["selected_option","options"])])]),Hs("div",dT,[Hs("div",_T,[Hs("label",pT,ae(s("application"))+": ",1),Gs(n_,{selected_option:u.value,"onUpdate:selected_option":a[1]||(a[1]=e=>u.value=e),options:wa(p),onSelect_option:h},null,8,["selected_option","options"])])]),Hs("div",fT,[Hs("div",vT,[Hs("label",mT,ae(s("db_search.tags.srv_port"))+": ",1),Gs(n_,{selected_option:c.value,"onUpdate:selected_option":a[2]||(a[2]=e=>c.value=e),options:wa(_),onSelect_option:g},null,8,["selected_option","options"])])])]),Hs("div",null,[Gs(rv,{ref_key:"table_server_ports_analysis",ref:d,csrf:e.csrf,table_id:r.value,f_map_columns:E,get_extra_params_obj:v,onCustom_event:$},{custom_header:hl((()=>[(Us(!0),Ls(Cs,null,Tn(l.value,((e,t)=>(Us(),Rs(Fd,{f_on_open:k(e,t),ref_for:!0,ref:e=>{n.value[t]=e},hidden:e.hidden},{title:hl((()=>[Gs(cv,{show:e.show_spinner,size:"1rem",class:"me-1"},null,8,["show"]),Hs("a",{class:"ntopng-truncate",title:e.title},ae(e.label),9,hT)])),menu:hl((()=>[(Us(!0),Ls(Cs,null,Tn(e.options,(e=>(Us(),Ls("a",{style:{cursor:"pointer",display:"block"},onClick:t=>function(e,t){t.stopPropagation(),x.set_key_to_url(e.key,`${e.value}`),N(),d.value.refresh_table()}(e,t),class:"ntopng-truncate tag-filter",title:e.value},[null==e.count?(Us(),Ls(Cs,{key:0},[Js(ae(e.label),1)],64)):(Us(),Ls(Cs,{key:1},[Js(ae(e.label+" ("+e.count+")"),1)],64))],8,gT)))),256))])),_:2},1032,["f_on_open","hidden"])))),256))])),_:1},8,["csrf","table_id"])])])])])]))},__file:"http_src/vue/page-hosts-ports-analysis.vue"};const yT={class:"container-fluid"},wT={class:"row form-group mb-3"},xT={class:"col col-md-6"},kT={class:"form-label"},$T={class:"row form-group mb-3"},ST={class:"col col-md-6"},CT={key:0},NT={class:"col-form-label col-sm-10"},AT=["placeholder"],ET={class:"row form-group mb-3"},TT={class:"col col-md-6"},PT={key:0},UT={class:"col-form-label col-sm-10"},IT=["placeholder"],OT={class:"row form-group mb-3"},MT={class:"col col-md-6"},jT={class:"col-form-label col-sm-10"},LT=["disabled"];var RT={__name:"modal-nedge-add-repeater-config",props:{},emits:["edit","add"],setup(e,{expose:t,emit:a}){const l=e=>i18n(e),n=i18n("if_stats_config.multicast_ip_placeholder"),s=i18n("if_stats_config.port_placeholder"),o=ma(null),i=ma([]),r=ma(null),c=ma(null),u=ma({value:"mdns",label:"MDNS"}),d=ma(null),_=()=>{let e=new RegExp(wp.get_data_pattern("ip"));h.value=!(e.test(r.value)||"*"===r.value)},p=()=>{h.value=c<1||c>65535},f=ma(""),v=[{label:l("nedge.page_repeater_config.modal_repeater_config.mdns"),value:"mdns",default:!0},{label:l("nedge.page_repeater_config.modal_repeater_config.custom"),value:"custom"}],m=ma(0),h=ma(!0),g=ma(!0),y=ma({}),w=`${http_prefix}/lua/rest/v2/get/nedge/interfaces.lua`;let x;const k=ma([]),$=ma([]),S=ma(""),C=e=>{$.value=e,g.value=e.length<2},N=e=>{i.value=e},A=e=>{i.value=i.value.filter((t=>t.label!=e.label))},E=ma(!0);async function T(e){u.value=y.value,"custom"==u.value.value&&await U()}let P=!1;async function U(){if(1==P)return;null==x&&(x=b.http_request(w));let e=await x;k.value=e.filter((e=>"lan"==e.role)).map((e=>({label:e.label,value:e.ifname}))),P=!0}const I=()=>{let e=u.value.label,t={repeater_type:e};if("custom"==u.value.value){t={repeater_type:e,ip:r.value,port:c.value}}let l="add";0==E.value&&(t.repeater_id=m.value,l="edit");let n=[],s=[];$.value.forEach((e=>{n.push(e.value),e.value==e.label||e.label.includes(e.value)?s.push(e.label):s.push(e.label+" ("+e.value+")")}));const o=n.join(","),i=s.join(",");t.interfaces=o,t.interface_details=i,a(l,t),O()},O=()=>{o.value.close()};return t({show:e=>{!function(e){E.value=null==e,0==E.value?(f.value=l("nedge.page_rules_config.modal_rule_config.title_edit"),S.value=l("edit"),m.value=e.repeater_id,v.forEach((t=>{t.label==e.type&&(y.value=t)})),"custom"==y.value.value&&(r.value=e.ip,c.value=e.port),T()):(f.value=l("nedge.page_rules_config.modal_rule_config.title_add"),S.value=l("add"),v.find((e=>1==e.default)));if(0==E.value){const t=e.interfaces.split(",");let a=[];t.forEach((e=>{""!=e&&null!=e&&a.push(k.value.find((t=>t.value==e)))})),i.value=a}}(e),o.value.show()},close:O}),pn((async()=>{await U()})),(e,t)=>(Us(),Rs(sp,{onShowed:t[5]||(t[5]=e=>{}),ref_key:"modal_id",ref:o},{title:hl((()=>[Js(ae(f.value),1)])),body:hl((()=>[Hs("div",yT,[Zs(" Repeater Type "),Hs("div",wT,[Hs("div",xT,[Hs("label",kT,[Hs("b",null,ae(l("nedge.page_repeater_config.modal_repeater_config.repeater_type")),1)]),Gs(n_,{selected_option:y.value,"onUpdate:selected_option":t[0]||(t[0]=e=>y.value=e),onSelect_option:t[1]||(t[1]=e=>T()),options:v},null,8,["selected_option"])])]),Zs(" IP "),Hs("div",$T,[Hs("div",ST,["custom"==y.value.value?(Us(),Ls("div",CT,[Hs("label",NT,[Hs("b",null,ae(l("nedge.page_repeater_config.ip")),1)]),xn(Hs("input",{"onUpdate:modelValue":t[2]||(t[2]=e=>r.value=e),onInput:_,class:"form-control",type:"text",placeholder:wa(n),required:""},null,40,AT),[[ji,r.value]])])):Zs("v-if",!0)])]),Zs(" Port "),Hs("div",ET,[Hs("div",TT,["custom"==y.value.value?(Us(),Ls("div",PT,[Hs("label",UT,[Hs("b",null,ae(l("nedge.page_repeater_config.port")),1)]),xn(Hs("input",{"onUpdate:modelValue":t[3]||(t[3]=e=>c.value=e),onInput:p,class:"form-control",type:"text",placeholder:wa(s),required:""},null,40,IT),[[ji,c.value]])])):Zs("v-if",!0)])]),Hs("div",OT,[Hs("div",MT,[Hs("label",jT,[Hs("b",null,ae(l("nedge.page_repeater_config.interfaces")),1)]),Gs(n_,{ref_key:"interfaces_search",ref:d,selected_options:i.value,"onUpdate:selected_options":t[4]||(t[4]=e=>i.value=e),options:k.value,multiple:!0,onSelect_option:N,onUnselect_option:A,onChange_selected_options:C},null,8,["selected_options","options"])])])])])),footer:hl((()=>[Hs("button",{type:"button",disabled:g.value||h.value&&"custom"==u.value,onClick:I,class:"btn btn-primary"},ae(S.value),9,LT)])),_:1},512))}};np("\ninput[data-v-5b3dc248]:invalid {\n  border-color: #ff0000;\n}\n"),RT.__scopeId="data-v-5b3dc248",RT.__file="http_src/vue/modal-nedge-add-repeater-config.vue";const DT={class:"mb-2"},FT=Hs("br",null,null,-1),qT={id:"aggregated_live_flows"};var zT={__name:"page-nedge-repeaters-config",props:{url:String,ifid:Number,csrf:String,columns_config:Array},setup(e){const t=e,a=e=>i18n(e),l=ma({}),n=ma(null),s=ma(null);function o(e){r(e,`${http_prefix}/lua/rest/v2/edit/nedge/forwarder.lua`)}function i(e){r(e,`${http_prefix}/lua/rest/v2/add/nedge/forwarder.lua`)}function r(e,a){let l=JSON.stringify({...e,csrf:t.csrf});b.http_request(a,{method:"post",headers:{"Content-Type":"application/json"},body:l}),u()}_n((async()=>{!function(){const e=[];let n={ifid:x.get_url_entry("ifid")||t.ifid},o=x.obj_to_url_params(n);e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,a,l){u()}},{text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){s.value.show(null)}});let i={table_buttons:e,data_url:`${t.url}?${o}`,enable_search:!1},r=[{columnName:a("nedge.page_repeater_config.type"),targets:0,name:"type",data:"type",className:"text-nowrap text-left",responsivePriority:1},{columnName:a("nedge.page_repeater_config.ip"),targets:0,name:"ip",data:"ip",className:"text-nowrap text-left",responsivePriority:1},{columnName:a("nedge.page_repeater_config.port"),targets:0,name:"port",data:"port",className:"text-nowrap text-left",responsivePriority:1},{columnName:a("nedge.page_repeater_config.interfaces"),targets:0,name:"interfaces",data:"details",className:"text-nowrap text-left",responsivePriority:1,render:function(e,t,a){return function(e,t){return e.split(",").join(", ")}(e)}}].map((e=>e));r.push({columnName:a("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return c(a)}}),i.columns_config=r,l.value=i}()}));const c=function(e){let a={handlerId:"delete_host",onClick:()=>{!function(e){const a=`${http_prefix}/lua/rest/v2/delete/nedge/forwarder.lua`;let l={"Content-Type":"application/json"},n=JSON.stringify({repeater_id:e.repeater_id,csrf:t.csrf});b.http_request(a,{method:"post",headers:l,body:n}),u()}(e)}},l={handlerId:"edit_rule",onClick:()=>{s.value.show(e)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:l,handlerId:"edit_rule",icon:"fa-edit",title:i18n("edit")},{class:"pointer",handler:a,handlerId:"delete_rule",icon:"fa-trash",title:i18n("delete")}])};function u(){setTimeout((()=>{x.reload_url()}),500)}return(e,t)=>(Us(),Ls(Cs,null,[Hs("div",DT,[Hs("h2",null,ae(a("nedge.repeaters_config_title")),1),FT]),Hs("div",qT,[Gs(ow,{ref_key:"table_rules",ref:n,table_buttons:l.value.table_buttons,columns_config:l.value.columns_config,data_url:l.value.data_url,filter_buttons:l.value.table_filters,enable_search:l.value.enable_search,table_config:l.value.table_config},null,8,["table_buttons","columns_config","data_url","filter_buttons","enable_search","table_config"])]),Gs(RT,{ref_key:"modal_add_repeater_config",ref:s,onAdd:i,onEdit:o},null,512)],64))},__file:"http_src/vue/page-nedge-repeaters-config.vue"};const BT={key:0,class:"text-left"};var VT={__name:"modal-delete-inactive-host",props:{context:Object},emits:["delete_host"],setup(e,{expose:t,emit:a}){const l=e,n=e=>i18n(e),s=ma(null),o=ma(""),i=ma(""),r=ma(!1),c=ma(!1),u=ma({});async function d(){const e=`${http_prefix}/lua/rest/v2/delete/host/inactive_host.lua`,t={csrf:l.context.csrf,ifid:l.context.ifid,serial_key:u.value};const n=await b.http_request(e,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(n){c.value=!1,r.value=!0;let e="";n.deleted_hosts>1&&(e=". Number hosts deleted: "+n.deleted_hosts),i.value=i18n("succ_del_inactive_hosts")+e,a("delete_host"),_()}else c.value=!0,r.value=!0,i.value=i18n("err_del_inactive_hosts")}pn((()=>{}));const _=()=>{setTimeout((()=>{s.value.close()}),3e3)};return t({show:(e,t)=>{u.value=e,o.value=t,s.value.show()},close:_}),(e,t)=>(Us(),Rs(sp,{ref_key:"modal_id",ref:s},{title:hl((()=>[Js(ae(n("delete_inactive_host_title")),1)])),body:hl((()=>[Js(ae(o.value)+" ",1),r.value?(Us(),Ls("div",BT,[Hs("p",{class:J(["text-sm-start fs-6 fw-medium pt-3 m-0",c.value?"text-danger":"text-success"])},[Hs("small",null,ae(i.value),1)],2)])):Zs("v-if",!0)])),footer:hl((()=>[Hs("button",{type:"button",onClick:d,class:"btn btn-primary"},ae(n("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-inactive-host.vue"};const HT={class:"mt-3",style:{"max-width":"8rem"}},GT={key:0,class:"text-left"};var WT={__name:"modal-delete-inactive-host-epoch",props:{context:Object},emits:["delete_host"],setup(e,{expose:t,emit:a}){const l=e,n=e=>i18n(e);ma("csv");const s=ma(),o=ma(""),i=ma(!1),r=ma(!1),c=[{label:n("show_alerts.presets.5_min"),value:300},{label:n("show_alerts.presets.30_min"),value:1800},{label:n("show_alerts.presets.hour"),value:3600},{label:n("show_alerts.presets.2_hours"),value:7200},{label:n("show_alerts.presets.6_hours"),value:21600},{label:n("show_alerts.presets.12_hours"),value:43200},{label:n("show_alerts.presets.day"),value:86400},{label:n("show_alerts.presets.week"),value:604800}],u=ma();function d(e){s.value=e}async function _(){const e=`${http_prefix}/lua/rest/v2/delete/host/inactive_host.lua`,t={csrf:l.context.csrf,ifid:l.context.ifid,serial_key:s.value.value};const n=await b.http_request(e,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(n){r.value=!1,i.value=!0;let e="";n.deleted_hosts>1&&(e=". Number hosts deleted: "+n.deleted_hosts),o.value=i18n("succ_del_inactive_hosts")+e,a("delete_host"),p()}else r.value=!0,i.value=!0,o.value=i18n("err_del_inactive_hosts")}pn((()=>{s.value=c[0]}));const p=()=>{setTimeout((()=>{u.value.close()}),3e3)};return t({show:()=>{u.value.show()},close:p}),(e,t)=>(Us(),Rs(sp,{ref_key:"modal_id",ref:u},{title:hl((()=>[Js(ae(n("delete")),1)])),body:hl((()=>[Js(ae(n("delete_since"))+" ",1),Hs("div",HT,[Gs(n_,{selected_option:s.value,"onUpdate:selected_option":t[0]||(t[0]=e=>s.value=e),options:c,onSelect_option:d},null,8,["selected_option"])]),i.value?(Us(),Ls("div",GT,[Hs("p",{class:J(["text-sm-start fs-6 fw-medium pt-3 m-0",r.value?"text-danger":"text-success"])},[Hs("small",null,ae(o.value),1)],2)])):Zs("v-if",!0)])),footer:hl((()=>[Hs("button",{type:"button",onClick:_,class:"btn btn-primary"},ae(n("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-inactive-host-epoch.vue"};const KT={class:"mt-3",style:{"max-width":"8rem"}};var JT={__name:"modal-download-inactive-host",props:{context:Object},emits:["download"],setup(e,{expose:t,emit:a}){const l=e=>i18n(e);ma("csv");const n=ma(),s=[{label:l("csv"),value:"csv",param:"csv"},{label:l("json"),value:"json",param:"json"}],o=ma();function i(e){n.value=e}async function r(){let e=ntopng_url_manager.get_url_object(window.location.search);e.download=!0,e.format=n.value.value;const t=`${http_prefix}/lua/rest/v2/get/host/inactive_list.lua?`+ntopng_url_manager.obj_to_url_params(e);b.download_URI(t,"inactive_hosts."+n.value.value),a("download"),c()}pn((()=>{n.value=s[0]}));const c=()=>{o.value.close()};return t({show:()=>{o.value.show()},close:c}),(e,t)=>(Us(),Rs(sp,{ref_key:"modal_id",ref:o},{title:hl((()=>[Js(ae(l("download")),1)])),body:hl((()=>[Js(ae(l("download_format"))+" ",1),Hs("div",KT,[Gs(n_,{selected_option:n.value,"onUpdate:selected_option":t[0]||(t[0]=e=>n.value=e),options:s,onSelect_option:i},null,8,["selected_option"])])])),footer:hl((()=>[Hs("button",{type:"button",onClick:r,class:"btn btn-primary"},ae(l("download")),1)])),_:1},512))},__file:"http_src/vue/modal-download-inactive-host.vue"};const YT={class:"row"},ZT={class:"col-md-12 col-lg-12"},XT={class:"card card-shadow"},QT={class:"card-body"},eP={key:"1",class:"row mb-4 mt-4",id:"host_details_traffic"},tP={class:"col-4"},aP={class:"widget-name"},lP=["title"],nP=["onClick","title"],sP={class:"card-footer mt-3"},oP=Hs("i",{class:"fas fa-trash"},null,-1),iP=Hs("i",{class:"fas fa-trash"},null,-1),rP=[Hs("i",{class:"fas fa-download"},null,-1)],cP="change_applications_tab_event";var uP={__name:"page-inactive-hosts",props:{ifid:Number,csrf:String,show_historical:Boolean},setup(e){const t=e,a=e=>i18n(e),l=ma("inactive_hosts");ma(a("local_hosts_only"));const n=ma([]),s=ma([]),o=ma(),i=ma(),r=ma(),c=ma(),u=ma(),d=ma(),_=ma(),p=ma(!1),f=ma();ma();const v=ma({csrf:t.csrf,ifid:t.ifid}),m=[{ref:u,title:i18n("active_inactive"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/inactive/active_inactive.lua`,id:"active_inactive_distro"},{ref:d,title:i18n("inactivity_period"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/inactive/inactivity_period.lua`,id:"inactivity_period"},{ref:_,title:i18n("manufacturer"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/inactive/inactive_manufacturer.lua`,id:"inactive_manufacturer"}],h=ma([{title:i18n("table_view"),active:0==p.value,id:"table"},{title:i18n("chart_view"),active:1==p.value,id:"chart"}]);pn((async()=>{ntopng_events_manager.on_custom_event("change_applications_tab_event",cP,(e=>{x.set_key_to_url("view",e.id)})),async function(e){n.value=await y("overview"),g()}()}));function g(){n.value.forEach(((e,t)=>{null==e.basic_label&&(e.basic_label=e.label);const a=x.get_url_entry(e.id);null!=a?e.options.forEach((t=>{t.value.toString()===a&&(e.label=`${e.basic_label}: ${t.label||t.value}`)})):e.label=`${e.basic_label}: ${e.options[0].label||e.options[0].value}`}))}async function b(e,t){if(e.show_spinner=!0,await Ya(),0==e.data_loaded){let a=await y(e.id);e.options=a.find((t=>t.id==e.id)).options,await Ya(),s.value[t].load_menu()}e.show_spinner=!1}async function y(e){const t=x.get_url_params(),a=`${http_prefix}/lua/rest/v2/get/host/inactive_filters.lua?action=${e}&${t}`;return(await ntopng_utility.http_request(a)).map((t=>({id:t.action||t.name,label:t.label,title:t.tooltip,data_loaded:"overview"!=e,options:t.value,hidden:1==t.value.length})))}function w(){o.value.refresh_table()}function k(e){p.value=!p.value,h.value.forEach((e=>{e.active=!1,("table"==e.id&&0==p.value||"chart"==e.id&&1==p.value)&&(e.active=!0)})),ntopng_events_manager.emit_custom_event(cP,e)}const $=()=>x.get_url_object();function S(e){let t={click_button_historical_flows:T,click_button_delete:C};null!=t[e.event_id]&&t[e.event_id](e)}function C(e){const t=e.row.serial_key;r.value.show(t,i18n("delete_inactive_host",{host:e.row.host.ip_address.value}))}function N(){r.value.show("all",i18n("delete_all_inactive_hosts"))}function A(){c.value.show()}function E(){i.value.show()}function T(e){const t=e.row;let a="";0!=t.vlan&&(a=`@${t.vlan}`),window.location.href=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${t.epoch_begin-100}&epoch_end=${t.epoch_end+100}&ip=${t.ip_address.value||t.ip_address}${a};eq&mac=${t.mac_address.value||t.mac_address};eq`}const P=e=>{let a={mac_address:(e,t)=>{let a=e;return null!=e&&null!=e.url&&null!=e.name&&null!=e.value&&(a=`<a href='${http_prefix}${e.url}' title='${e.value}'>${e.name}</a>`),a},network:(e,t)=>{let a=e;return null!=e.url&&null!=e.name&&null!=e.value&&(a=`<a href='${http_prefix}${e.url}' title='${e.value}'>${e.name}</a>`),a},host:(e,t)=>{let a="";const l=e.ip_address;if(a=`<a href='${http_prefix}${l.url}' title='${l.value}'>${l.name}</a>`,null!=e.vlan&&""!=e.vlan.name){const t=e.vlan;a=null!=t.url?`${a}@<a href='${http_prefix}${t.url||"#"}' title='${t.value}'>${t.name}</a>`:`${a}@${t.name}`}return`${a} ${e.device_type}`}};return e.forEach((e=>{if(e.render_func=a[e.data_field],"actions"==e.id){const a={historical_data:t.show_historical};e.button_def_array.forEach((e=>{a[e.id]||e.class.push("disabled")}))}})),e};return(t,u)=>(Us(),Ls(Cs,null,[Hs("div",YT,[Hs("div",ZT,[Hs("div",XT,[Hs("div",QT,[Gs(Lw,{ref_key:"inactive_hosts_tab_list",ref:f,id:"inactive_hosts_tab_list",tab_list:h.value,onClick_item:k},null,8,["tab_list"]),Zs('\n          <div class="card card-shadow">\n            <div class="card-body p-1">\n              <transition name="component-fade" mode="out-in">\n                <div key="1" v-if="show_charts == true" class="row mb-4 mt-4" id="host_details_traffic">\n                  \n                </div>\n              </transition>\n            </div>\n          </div>\n          <div class="text-center" style="cursor: pointer;" @click="change_show_charts">\n            <i v-if="show_charts == false" class="fa-solid fa-angles-down"></i>\n            <i v-else class="fa-solid fa-angles-up"></i>\n          </div>\n          '),Hs("div",null,[1==p.value?(Us(),Ls("div",eP,[1==p.value?(Us(),Ls(Cs,{key:0},Tn(m,(e=>Hs("div",tP,[Hs("h3",aP,ae(e.title),1),Gs(A_,{ref_for:!0,ref:e.ref,id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!0},null,8,["id","chart_type","base_url_request"])]))),64)):Zs("v-if",!0)])):(Us(),Rs(rv,{key:1,ref_key:"table_inactive_hosts",ref:o,table_id:l.value,csrf:e.csrf,f_map_columns:P,get_extra_params_obj:$,onCustom_event:S},{custom_header:hl((()=>[(Us(!0),Ls(Cs,null,Tn(n.value,((e,t)=>{return Us(),Rs(Fd,{f_on_open:(a=e,l=t,e=>{b(a,l)}),ref_for:!0,ref:e=>{s.value[t]=e},hidden:e.hidden},{title:hl((()=>[Gs(cv,{show:e.show_spinner,size:"1rem",class:"me-1"},null,8,["show"]),Hs("a",{class:"ntopng-truncate",title:e.title},ae(e.label),9,lP)])),menu:hl((()=>[(Us(!0),Ls(Cs,null,Tn(e.options,(a=>(Us(),Ls("a",{style:{cursor:"pointer",display:"block"},onClick:l=>function(e,t,a,l){t.stopPropagation(),x.set_key_to_url(e.key,`${e.value}`),g(),o.value.refresh_table(),1==p.value&&m.forEach((e=>{e.ref.value[0].update_chart()})),b(a,l)}(a,l,e,t),class:"ntopng-truncate tag-filter",title:a.value},[null==a.count?(Us(),Ls(Cs,{key:0},[Js(ae(a.label),1)],64)):(Us(),Ls(Cs,{key:1},[Js(ae(a.label+" ("+a.count+")"),1)],64))],8,nP)))),256))])),_:2},1032,["f_on_open","hidden"]);var a,l})),256)),Zs(" Dropdown filters ")])),_:1},8,["table_id","csrf"]))]),Hs("div",sP,[Hs("button",{type:"button",ref:"delete_all",onClick:N,class:"btn btn-danger me-1"},[oP,Js(" "+ae(a("delete_all_entries")),1)],512),Hs("button",{type:"button",ref:"delete_older",onClick:A,class:"btn btn-danger me-1"},[iP,Js(" "+ae(a("delete_older")),1)],512),Hs("button",{type:"button",ref:"download",onClick:E,class:"btn btn-primary me-1"},rP,512)])])])])]),Gs(VT,{ref_key:"modal_delete",ref:r,context:v.value,onDelete_host:w},null,8,["context"]),Gs(WT,{ref_key:"modal_delete_older",ref:c,context:v.value,onDelete_host:w},null,8,["context"]),Gs(JT,{ref_key:"modal_download",ref:i,context:v.value},null,8,["context"])],64))},__file:"http_src/vue/page-inactive-hosts.vue"};const dP={class:"row"},_P={class:"col-md-12 col-lg-12"},pP={class:"mt-4 card card-shadow"},fP={class:"card-body"};var vP={__name:"page-inactive-host-details",props:{ifid:Number,csrf:String},setup(e){const t=ma("inactive_host_details"),a=ma([]),l=function(e){return e||""},n=function(e){let t=e.name||"";return e.url&&""!=e.url&&(t=`<a href="${http_prefix}${e.url}">${t}</>`),t};return pn((async()=>{const e=ntopng_url_manager.get_url_object(),t=ntopng_url_manager.obj_to_url_params(e),l=await ntopng_utility.http_request(`${http_prefix}/lua/rest/v2/get/host/inactive_host.lua?${t}`);a.value=l.host_info,$("#navbar_title").html("<i class='fas fa-laptop'></i> "+(e=>i18n(e))("host_details.host")+": "+l.host_name)})),(e,s)=>(Us(),Ls("div",dP,[Hs("div",_P,[Hs("div",pP,[Hs("div",fP,[Gs(vw,{horizontal:!0,id:t.value,rows:a.value,print_html_title:l,print_html_row:n},null,8,["id","rows"])])])])]))},__file:"http_src/vue/page-inactive-host-details.vue"};const mP={class:"table table-bordered table-striped"};var hP={__name:"page-flowdevice-config",props:{ifid:Number,csrf:String,flowdev_ip:String},setup(e){const t=e,a=e=>i18n(e),l=ma(null),n=ma(""),s=ma(!0),o=`${http_prefix}/lua/pro/rest/v2/get/flowdevice/alias.lua?flowdev_ip=${t.flowdev_ip}&ifid=${t.ifid}`,i=`${http_prefix}/lua/pro/rest/v2/set/flowdevice/alias.lua`;async function r(){const e=await ntopng_utility.http_request(`${o}`,{method:"get"});l.value.value=e||t.flowdev_ip,n.value=l.value.value}pn((async()=>{r()}));const c=async function(){const e={csrf:t.csrf,flowdev_ip:t.flowdev_ip,alias:l.value.value,ifid:t.ifid};await ntopng_utility.http_request(i,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}),r(),s.value=!0},u=function(){n.value==l.value.value?s.value=!0:s.value=!1};return(e,t)=>(Us(),Ls(Cs,null,[Hs("table",mP,[Hs("tr",null,[Hs("th",null,ae(a("flowdev_alias")),1),Hs("td",null,[Hs("input",{type:"text",ref_key:"custom_name",ref:l,class:"form-control",onInput:u},null,544)])])]),Hs("button",{class:J(["btn btn-primary",[s.value?"disabled":""]]),onClick:c,id:"save"},ae(a("save_settings")),3)],64))},__file:"http_src/vue/page-flowdevice-config.vue"};const gP={class:"table table-striped table-bordered col-sm-12"},bP={class:"col-3"},yP={class:"col-9"},wP={class:"d-flex ps-0"},xP={class:"col-3"},kP={class:"col-9"},$P={class:"d-flex ps-0"},SP={class:"d-flex align-items-center me-2"},CP={class:"col-3"},NP={class:"col-9"},AP={class:"d-flex ps-0"},EP={class:"d-flex align-items-center me-2"},TP=1e9;var PP={__name:"page-flowdevice-interface-config",props:{ifid:String,csrf:String,device_ip:String,port_index:String},setup(e){const t=e,a=e=>i18n(e),l=ma(null),n=ma(""),s=ma(null),o=ma(""),i=ma(null),r=ma(""),c=ma(!0),u=`${http_prefix}/lua/pro/rest/v2/get/flowdevice/interface/config.lua?device_ip=${t.device_ip}&port_index=${t.port_index}&ifid=${t.ifid}`,d=`${http_prefix}/lua/pro/rest/v2/set/flowdevice/interface/config.lua`;async function _(){const e=await ntopng_utility.http_request(`${u}`,{method:"get"});l.value.value=e.alias,n.value=l.value.value,s.value.value=e.uplink_speed/TP,o.value=s.value.value,i.value.value=e.downlink_speed/TP,r.value=i.value.value}pn((async()=>{_()}));const p=async function(){const e={ifid:t.ifid,csrf:t.csrf,device_ip:t.device_ip,port_index:t.port_index,alias:l.value.value,uplink_speed:Number(s.value.value)*TP,downlink_speed:Number(i.value.value)*TP};await ntopng_utility.http_request(d,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}),_(),c.value=!0},f=function(){n.value==l.value.value&&o.value==s.value.value&&r.value==i.value.value?c.value=!0:c.value=!1};return(e,t)=>(Us(),Ls(Cs,null,[Hs("table",gP,[Hs("tbody",null,[Hs("tr",null,[Hs("th",bP,ae(a("interface_alias")),1),Hs("td",yP,[Hs("div",wP,[Hs("input",{type:"text",ref_key:"custom_name",ref:l,class:"form-control",style:{width:"16rem"},onInput:f},null,544)])])]),Hs("tr",null,[Hs("th",xP,ae(a("interface_uplink_speed")),1),Hs("td",kP,[Hs("div",$P,[Hs("label",SP,ae(a("gbit")),1),Hs("input",{ref_key:"uplink_speed",ref:s,class:"form-control text-end",type:"number",min:"0",step:"0.01",style:{width:"8rem"},onInput:f},null,544)])])]),Hs("tr",null,[Hs("th",CP,ae(a("interface_downlink_speed")),1),Hs("td",NP,[Hs("div",AP,[Hs("label",EP,ae(a("gbit")),1),Hs("input",{ref_key:"downlink_speed",ref:i,class:"form-control text-end",type:"number",min:"0",step:"0.001",style:{width:"8rem"},onInput:f},null,544)])])])])]),Hs("button",{class:J(["btn btn-primary d-flex ms-auto",[c.value?"disabled":""]]),onClick:p,id:"save"},ae(a("save_settings")),3)],64))},__file:"http_src/vue/page-flowdevice-interface-config.vue"},UP={__name:"modal-delete-scan-confirm",props:{body:String,title:String},emits:["delete","delete_all"],setup(e,{expose:t,emit:a}){const l=ma(null),n=ma(""),s=ma(""),o=ma(""),i=ma(!0),r=[i18n("note_scan_host")],c=()=>{"delete_all"==o.value?a("delete_all"):"delete_single_row"==o.value||"delete_single_report"==o.value?a("delete"):"scan_all_rows"==o.value?a("scan_all_rows"):"scan_row"==o.value&&a("scan_row"),u()},u=()=>{l.value.close()};t({show:(e,t)=>{i.value=!1,o.value=e,"delete_all"==e?(s.value=i18n("delete_all_entries"),n.value=t):"delete_single_row"==e?(s.value=i18n("delete_vs_host_title"),n.value=t):"scan_all_rows"==e?(s.value=i18n("scan_all_hosts_title"),n.value=t):"scan_row"==e?(i.value=!0,s.value=i18n("scan_host_title"),n.value=t):"delete_single_report"==e&&(s.value=i18n("hosts_stats.page_scan_hosts.reports_page.delete_title"),n.value=i18n("hosts_stats.page_scan_hosts.reports_page.delete_description")),l.value.show()},close:u}),pn((()=>{}));const d=e=>i18n(e);return(e,t)=>(Us(),Rs(sp,{onShowed:t[0]||(t[0]=e=>{}),ref_key:"modal_id",ref:l},{title:hl((()=>[Js(ae(s.value),1)])),body:hl((()=>[Js(ae(n.value)+" ",1),i.value?(Us(),Rs(_v,{key:0,note_list:r})):Zs("v-if",!0)])),footer:hl((()=>["delete_all"==o.value||"delete_single_row"==o.value||"delete_single_report"==o.value?(Us(),Ls("button",{key:0,type:"button",onClick:c,class:"btn btn-danger"},ae(d("delete")),1)):(Us(),Ls("button",{key:1,type:"button",onClick:c,class:"btn btn-primary"},ae(d("hosts_stats.page_scan_hosts.schedule_scan")),1))])),_:1},512))},__file:"http_src/vue/modal-delete-scan-confirm.vue"};const IP={class:"form-group ms-2 me-2 mt-3 row"},OP={class:"col-form-label col-sm-4"},MP={class:"col-8"};var jP={__name:"modal-update-periodicity-scan",props:{title:String},emits:["update"],setup(e,{expose:t,emit:a}){const l=ma(null),n=ma([{id:"disabled",label:i18n("hosts_stats.page_scan_hosts.disabled")},{id:"1day",label:i18n("hosts_stats.page_scan_hosts.every_night")},{id:"1week",label:i18n("hosts_stats.page_scan_hosts.every_week")}]);let s=ma(n.value[0]);const o=()=>{a("update",{scan_frequency:s.value.id}),i()},i=()=>{l.value.close()};t({show:e=>{l.value.show()},close:i}),pn((()=>{}));const r=e=>i18n(e);return(t,a)=>(Us(),Rs(sp,{onShowed:a[1]||(a[1]=e=>{}),ref_key:"modal_id",ref:l},{title:hl((()=>[Js(ae(e.title),1)])),body:hl((()=>[Hs("div",IP,[Hs("label",OP,[Hs("b",null,ae(r("hosts_stats.page_scan_hosts.automatic_scan")),1)]),Hs("div",MP,[Gs(n_,{selected_option:wa(s),"onUpdate:selected_option":a[0]||(a[0]=e=>va(s)?s.value=e:s=e),options:n.value},null,8,["selected_option","options"])])])])),footer:hl((()=>[Hs("button",{type:"button",onClick:o,class:"btn btn-secondary me-4"},ae(r("hosts_stats.page_scan_hosts.update_all")),1)])),_:1},512))},__file:"http_src/vue/modal-update-periodicity-scan.vue"};const LP={class:"form-group ms-2 me-2 mt-3 row"},RP={class:"col-form-label col-sm-2"},DP={class:"col-sm-8"},FP=["disabled","placeholder"],qP={class:"col-sm-2"},zP={class:"form-group ms-2 me-2 mt-3 row"},BP={class:"col-form-label col-sm-2"},VP={class:"col-sm-10"},HP=["placeholder"],GP={class:"form-group ms-2 me-2 mt-3 row"},WP={class:"col-form-label col-sm-2"},KP={class:"col-10"},JP={key:0,class:"form-group ms-2 me-2 mt-3 row"},YP={class:"col-form-label col-sm-2"},ZP={class:"col-10"},XP={key:1,class:"form-group ms-2 me-2 mt-3 row"},QP={class:"col-form-label col-sm-2"},eU={class:"col-10"},tU={class:"mt-4"},aU={key:0,class:"me-auto text-danger d-inline"},lU=["disabled"],nU=["disabled"],sU="32";var oU={__name:"modal-add-vs-host",props:{context:Object},emits:["add","edit"],setup(e,{expose:t,emit:l}){const n=e=>i18n(e),s=ma(i18n("hosts_stats.page_scan_hosts.add_host")),o=ma(i18n("hosts_stats.page_scan_hosts.host_not_resolved")),i=i18n("hosts_stats.page_scan_hosts.host_placeholder"),r=i18n("hosts_stats.page_scan_hosts.ports_placeholder"),c=[n("hosts_stats.page_scan_hosts.notes.note_1"),n("hosts_stats.page_scan_hosts.notes.note_2"),n("hosts_stats.page_scan_hosts.notes.note_3"),n("hosts_stats.page_scan_hosts.notes.note_3_1")],u=[n("hosts_stats.page_scan_hosts.notes.note_1"),n("hosts_stats.page_scan_hosts.notes.note_2"),n("hosts_stats.page_scan_hosts.notes.note_3"),n("hosts_stats.page_scan_hosts.notes.note_3_1"),n("hosts_stats.page_scan_hosts.notes.note_4")],d=ma(null),_=ma({}),p=ma([]),f=ma(""),v=ma(""),m=ma(!1),h=ma(!1),g=ma([]),b=ma([]),y=ma(null),w=ma(null),x=ma(null),k=ma(!1),$=ma(null),S=ma(!0),C=ma(!0),N=ma(!0),A=ma(!1),E=ma(!1),T=ma([{id:"disabled",label:i18n("hosts_stats.page_scan_hosts.disabled")},{id:"1day",label:i18n("hosts_stats.page_scan_hosts.every_night")},{id:"1week",label:i18n("hosts_stats.page_scan_hosts.every_week")}]),P=ma([{id:"24",label:"/24"},{id:"32",label:"/32"},{id:"128",label:"/128"}]),U=ma(P.value[1]),I=ma(T.value[0]),O=ma(!1),M=ma(!1),j=e=>{p.value=e,N.value=p.value.length>0},L=e=>{p.value=p.value.filter((t=>t.id!=e.id)),N.value=p.value.length>0},R=()=>{const e=wp.validateIPv4(w.value),t=wp.validateIPv6(w.value),a=wp.validateHostName(w.value);"ipv4_netscan"==_.value.id?(e&&(A.value=!0,N.value=p.value&&p.value.length>0),N.value=!0):e?(A.value=!0,w.value.endsWith(0)||(U.value=P.value.find((e=>e.id==sU)))):t?(U.value=P.value[2],A.value=!0,U.value=P.value.find((e=>"128"==e.id))):a?(A.value=!0,U.value=P.value.find((e=>e.id==sU))):A.value=!1},D=()=>{wp.validatePortRange(x.value)||wp.validateCommaSeparatedPortList(x.value)||OS.isEmptyOrNull(x.value)?S.value=!0:S.value=!1};const F=()=>{q(!0)},q=async e=>{const t=x.value,n=_.value.id,s=!0===e?"edit":"add",i=!0===e?v.value:null;let r=w.value,c=!0;m.value=!0,wp.validateIP(w.value)||(A.value=!1,r=await async function(e){const t=`${http_prefix}/lua/rest/v2/get/host/resolve_host_name.lua`,l=a.buildURL(t,{host:e});return await ntopng_utility.http_request(l)}(w.value),"no_success"===r&&(c=!1,o.value=w.value+" "+i18n("hosts_stats.page_scan_hosts.host_not_resolved"),O.value=!0,setTimeout((()=>{O.value=!1}),4e3)),A.value=!0);let u=[];p.value.forEach((e=>{u.push(e.id)}));const d=u.join(",");m.value=c,c&&l(s,{host:r,scan_type:n,scan_ports:t,cidr:U.value.id,scan_frequency:$?I.value.id:null,scan_id:i,discovered_host_scan_type:d})};return pn((()=>{console.log("CIAO MONDO2")})),t({show:(e,t)=>{w.value="",x.value="",S.value=!0,C.value=!0,A.value=!1,m.value=!1,k.value=!1,_.value=g.value[0],p.value=[],U.value=P.value[1],v.value=null,h.value=!1,O.value=!1,E.value=!1,N.value=!E.value,s.value=i18n("hosts_stats.page_scan_hosts.add_host"),OS.isEmptyOrNull(e)||(s.value=i18n("hosts_stats.page_scan_hosts.edit_host_title"),(e=>{if(h.value=!0,w.value=e.host,x.value=e.ports,A.value=!0,S.value=!0,v.value=e.id,_.value=g.value.find((t=>t.id==e.scan_type)),null!=e.discovered_host_scan_type){const t=e.discovered_host_scan_type.split(",");let a,l=[];t.forEach((e=>{a=b.value.find((t=>t.id==e)),l.push(a)})),p.value=l}"ipv4_netscan"==_.value.id?U.value=P.value.find((e=>"24"==e.id)):wp.validateIPv4(e.host)?U.value=P.value.find((e=>e.id==sU)):U.value=P.value.find((e=>"128"==e.id)),C.value=!0,$&&(I.value=T.value.find((t=>t.id==e.scan_frequency)))})(e)),OS.isEmptyOrNull(t)||(w.value=t,A.value=!0),d.value.show()},close:()=>{M.value=!1,d.value.close()},metricsLoaded:async(e,t,a)=>{const l=e.sort(((e,t)=>e.label.localeCompare(t.label)));y.value=t,g.value=l,b.value=l.filter((e=>"ipv4_netscan"!=e.id)),$.value=a,_.value=g.value[0]}}),(e,t)=>(Us(),Rs(sp,{ref_key:"modal_id",ref:d},{title:hl((()=>[Js(ae(s.value),1)])),body:hl((()=>[Zs(" Target information, here an IP is put "),Hs("div",LP,[Hs("label",RP,[Hs("b",null,ae(n("hosts_stats.page_scan_hosts.host_or_network")),1)]),Hs("div",DP,[xn(Hs("input",{"onUpdate:modelValue":t[0]||(t[0]=e=>w.value=e),onInput:R,disabled:h.value,class:"form-control",type:"text",placeholder:wa(i),required:""},null,40,FP),[[ji,w.value]])]),Hs("div",qP,[Gs(n_,{selected_option:U.value,"onUpdate:selected_option":t[1]||(t[1]=e=>U.value=e),disabled:h.value||E.value,options:P.value},null,8,["selected_option","disabled","options"])])]),Hs("div",zP,[Hs("label",BP,[Hs("b",null,ae(n("hosts_stats.page_scan_hosts.ports")),1)]),Hs("div",VP,[xn(Hs("input",{"onUpdate:modelValue":t[2]||(t[2]=e=>x.value=e),onFocusout:D,class:J(["form-control",!0===f.value?"ntopng-hide-placeholder":""]),type:"text",placeholder:wa(r),required:""},null,42,HP),[[ji,x.value]])])]),Hs("div",GP,[Hs("label",WP,[Hs("b",null,ae(n("hosts_stats.page_scan_hosts.scan_type")),1)]),Hs("div",KP,[Gs(n_,{selected_option:_.value,"onUpdate:selected_option":t[3]||(t[3]=e=>_.value=e),options:g.value,disabled:h.value,onSelect_option:t[4]||(t[4]=e=>{"ipv4_netscan"==_.value.id?(U.value=P.value.find((e=>"24"==e.id)),E.value=!0,N.value=!1):(E.value=!1,N.value=!0)})},null,8,["selected_option","options","disabled"])])]),"ipv4_netscan"==_.value.id?(Us(),Ls("div",JP,[Hs("label",YP,[Hs("b",null,ae(n("hosts_stats.page_scan_hosts.host_discovered_scan_type")),1)]),Hs("div",ZP,[Gs(n_,{selected_options:p.value,"onUpdate:selected_options":t[5]||(t[5]=e=>p.value=e),onChange_selected_options:j,onUnselect_option:L,options:b.value,multiple:!0},null,8,["selected_options","options"])])])):Zs("v-if",!0),1==$.value?(Us(),Ls("div",XP,[Hs("label",QP,[Hs("b",null,ae(n("hosts_stats.page_scan_hosts.periodicity")),1)]),Hs("div",eU,[Gs(n_,{selected_option:I.value,"onUpdate:selected_option":t[6]||(t[6]=e=>I.value=e),options:T.value},null,8,["selected_option","options"])])])):Zs("v-if",!0),Hs("div",tU,[0==$.value?(Us(),Rs(_v,{key:0,note_list:c})):(Us(),Rs(_v,{key:1,note_list:u}))])])),footer:hl((()=>[O.value?(Us(),Ls("div",aU,ae(o.value),1)):Zs("v-if",!0),Hs("div",null,[Gs(cv,{show:m.value,size:"1rem",class:"me-2"},null,8,["show"]),0==h.value?(Us(),Ls("button",{key:0,type:"button",onClick:q,class:"btn btn-primary",disabled:!(C.value&&A.value&&S.value&&N.value)},ae(n("add")),9,lU)):(Us(),Ls("button",{key:1,type:"button",onClick:F,class:"btn btn-primary",disabled:!(C.value&&A.value&&S.value&&N.value)},ae(n("apply")),9,nU))])])),_:1},512))},__file:"http_src/vue/modal-add-vs-host.vue"};const iU=(e,t)=>1==t.is_ok_last_scan&&null!=t.last_scan&&null!=t.last_scan.time?e:"",rU=(e,t)=>{let a="";if(1==t.is_ok_last_scan&&null!=t.last_scan&&null!=t.last_scan.time){const t=Number(e);let l="";null!=e&&(l=0==t?"green":t<3.9?"grey":t<7?"yellow":"red",0!=t&&(a=`<FONT COLOR=${l}>${e}`))}return a},cU=(e,t,a)=>{if(t&&a.is_down)return"";if(void 0!==e){let t=e;return t=i18n("hosts_stats.page_scan_hosts.scan_type_list."+e),t}},uU=(e,t)=>3==t.is_ok_last_scan?"":void 0!==e&&void 0!==e.time?e.time:void 0!==e?e:i18n("hosts_stats.page_scan_hosts.not_yet"),dU=(e,t)=>3==t.is_ok_last_scan?"":void 0!==t.last_scan&&void 0!==t.last_scan.duration?t.last_scan.duration:i18n("hosts_stats.page_scan_hosts.not_yet"),_U=e=>{let t="";return null==e||"disabled"==e?"":(t="1day"==e?i18n("hosts_stats.page_scan_hosts.daily"):i18n("hosts_stats.page_scan_hosts.weekly"),`<span class="badge bg-secondary" title="${t}">${t}</span>`)},pU=e=>{let t="";return 2==e?(t=i18n("hosts_stats.page_scan_hosts.scheduled"),`<span class="badge bg-dark" title="${t}">${t}</span>`):4==e?(t=i18n("hosts_stats.page_scan_hosts.scanning"),`<span class="badge bg-info" title="${t}">${t}</span>`):3==e||null==e?(t=i18n("hosts_stats.page_scan_hosts.not_scanned"),`<span class="badge bg-primary" title="${t}">${t}</span>`):1==e?(t=i18n("hosts_stats.page_scan_hosts.success"),`<span class="badge bg-success" title="${t}">${t}</span>`):0==e?(t=i18n("hosts_stats.page_scan_hosts.error"),`<span class="badge bg-danger" title="${t}">${t}</span>`):5==e?(t=i18n("hosts_stats.page_scan_hosts.failed"),`<span class="badge bg-warning" title="${t}">${t}</span>`):void 0},fU=e=>{let t="";return null!=e&&e.forEach((e=>{""==t?t=e:t+=`, ${e}`})),t},vU=(e,t,a)=>{let l=null;switch(e){case 4:l=` <span class="badge bg-secondary"><i class="fa-solid fa-ghost" title='${fU(t)}'></i></span></div>`;break;case 3:l=` <span class="badge bg-secondary"><i class="fa-solid fa-filter" title='${fU(a)}'></i></span>`}return l},mU=(e,t)=>{0==e&&0==t.udp_ports&&t.scan_type.contains("udp")&&(e=t.num_open_ports);let a="";if(null==e||e<=0)return a;if(1==t.is_ok_last_scan&&null!=t.last_scan&&null!=t.last_scan.time&&(a=`${e}`,t.host_in_mem)){const e=vU(t.udp_ports_case,t.udp_ports_unused,t.udp_filtered_ports);null!=e&&(a+=e)}return a},hU=(e,t)=>{0==e&&0==t.tcp_ports&&t.scan_type.contains("tcp")&&(e=t.num_open_ports);let a="";if(null==e||e<=0)return a;if(1==t.is_ok_last_scan&&null!=t.last_scan&&null!=t.last_scan.time&&(a=`${e}`,t.host_in_mem)){const e=vU(t.tcp_ports_case,t.tcp_ports_unused,t.tcp_ports_filtered);null!=e&&(a+=e)}return a},gU=(e,t,a,l)=>{let n=e.split(" ")[0].split("/")[0],s=((e,t,a,l)=>{let n="";return null!=a&&a.forEach((t=>{e==Number(t)&&(n="unused")})),""!=n||null!=l&&l.forEach((t=>{e==Number(t)&&(n="filtered")})),n})(Number(n),0,a,l),o=null;switch(s){case"unused":o=` &nbsp;<span class="badge bg-secondary" title='${i18n("hosts_stats.page_scan_hosts.unused_port")}'><i class="fa-solid fa-ghost"></i></span>`;break;case"filtered":o=` &nbsp;<span class="badge bg-primary" title='${i18n("hosts_stats.page_scan_hosts.filtered_port")}'><i class="fa-solid fa-filter"></i></span>`}return o},bU=(e,t,a,l)=>{let n={host:e,scan_type:t,scan_return_result:!0,page:"show_result",scan_date:a,epoch:l};return`${`${http_prefix}/lua/vulnerability_scan.lua`}?${ntopng_url_manager.obj_to_url_params(n)}`},yU=(e,t,a)=>{let l=e,n=5==t.is_ok_last_scan&&null!=t.is_down&&1==t.is_down;if((1==t.is_ok_last_scan||n)&&null!=t.last_scan&&null!=t.last_scan.time){let a=bU(e,t.scan_type,t.last_scan.time.replace(" ","_"),t.last_scan.epoch);"ipv4_netscan"==t.scan_type&&(e+="/24"),l=`<a href="${a}">${e}</a>`,n&&(l=`<a href="${a}">${e} <i class="fas fa-exclamation-triangle" style='color: #B94A48;'></i> </a>`)}return l};function wU(e){if("number"==typeof e)return e;if("string"==typeof e){if(""==e)return 0;e=e.split(",").join(""),e=parseInt(e)}else e=0;return e}const xU=function(e,t,a){return t==e&&1==a&&(t=99999999999),t},kU=function(e,t,a){return e=wU(e),t=wU(t),1==a?e-t:t-e},$U=function(e,t,a,l){return e=xU(l,e,a),t=xU(l,t,a),kU(e,t,a)},SU={sortByIP:function(e,t,a){return e=NtopUtils.convertIPAddress(e),t=NtopUtils.convertIPAddress(t),1==a?e.localeCompare(t):t.localeCompare(e)},sortByName:function(e,t,a){return 1==a?e?.localeCompare(t):t?.localeCompare(e)},sortByNumber:kU,sortByNumberWithNormalizationValue:$U},CU={class:"row"},NU={class:"col-md-12 col-lg-12"},AU={key:0,class:"alert alert-info alert-dismissable"},EU={class:"card card-shadow"},TU={class:"card-body"},PU={key:0,class:"alert alert-info alert-dismissable"},UU=Hs("span",{class:"spinner-border spinner-border-sm text-info me-1"},null,-1),IU={key:1,class:"alert alert-success alert-dismissable"},OU=Hs("span",{class:"text-success me-1"},null,-1),MU={key:2,class:"alert alert-danger alert-dismissable"},jU=Hs("span",{class:"text-danger me-1"},null,-1),LU={id:"hosts_to_scan"},RU=[Hs("i",{class:"fas fa-plus"},null,-1)],DU={class:"card-footer mt-3"},FU=Hs("i",{class:"fas fa-trash"},null,-1),qU=Hs("i",{class:"fas fa-clock-rotate-left"},null,-1),zU={class:"card-footer"};var BU={__name:"page-vulnerability-scan",props:{context:Object},setup(e){const t=e,a=e=>i18n(e),l=[i18n("hosts_stats.page_scan_hosts.notes.generic_notes_1").replaceAll("${http_prefix}",`${http_prefix}`)],n=ma(i18n("scan_host_inserted")),s=ma(i18n("scan_host_already_inserted")),o=ma(""),i=ma(i18n("hosts_stats.page_scan_hosts.enable_clickhouse")),r=i18n("hosts_stats.page_scan_hosts.delete_host_title"),c=i18n("hosts_stats.page_scan_hosts.delete_host_description"),u=i18n("hosts_stats.page_scan_hosts.update_periodicity_title"),d=`${http_prefix}/lua/rest/v2/add/host/to_scan.lua`,_=`${http_prefix}/lua/rest/v2/edit/host/update_va_scan_period.lua`,p=`${http_prefix}/lua/rest/v2/delete/host/delete_host_to_scan.lua`,f=`${http_prefix}/lua/rest/v2/exec/host/schedule_vulnerability_scan.lua`,v=`${http_prefix}/lua/rest/v2/get/host/vulnerability_scan_type_list.lua`,m=`${http_prefix}/lua/vulnerability_scan.lua`,h=`${http_prefix}/lua/rest/v2/get/host/vulnerability_scan_result.lua`,g=`${http_prefix}/lua/rest/v2/get/host/vulnerability_scan_status.lua`,y=ma("hosts_to_scan"),w=ma(),k=ma(),$=ma(),S=ma(),C=ma(0),N=ma(null),A=ma({}),E=ma({}),T=ma(!1),P=ma(!1),U=ma(!1),I=ma(!1),O=ma(!1),M={csrf:t.context.csrf},j=ma({csrf:t.context.csrf,ifid:t.context.ifid,is_enterprise_l:t.context.is_enterprise_l});let L=[],R=null;function D(){null!=t.context.host&&""!=t.context.host?$.value.show(null,t.context.host):$.value.show()}function F(e){null!=e?w.value.refresh_table(e):w.value.refresh_table(!0)}_n((()=>{R=Promise.all([oe(),ie()])})),pn((async()=>{await R,await $.value.metricsLoaded(L,t.context.ifid,t.context.is_enterprise_l),null!=t.context.host&&$.value.show(null,t.context.host),U.value=!t.context.is_clickhouse_enabled,setInterval(Q,1e4)}));const q=()=>x.get_url_object();function z(e){let t={click_button_edit_host:K,click_button_delete:G,click_button_scan:W,click_button_download:ve,click_button_show_result:me};null!=t[e.event_id]&&t[e.event_id](e)}function B(e,t){return SU.sortByIP(e.host,t.host,1)}function V(e,t){let a=t[e.data.data_field];var l;return"duration"==e.id?a=void 0===t.last_scan?-1:t.last_scan.duration_epoch:"last_scan"==e.id?a=void 0===t.last_scan?0:t.last_scan.epoch:"is_ok_last_scan"==e.id?a=function(e,t){let a="";a=2==e?i18n("hosts_stats.page_scan_hosts.scheduled"):4==e?i18n("hosts_stats.page_scan_hosts.scanning"):3==e||null==e?i18n("hosts_stats.page_scan_hosts.not_scanned"):1==e?i18n("hosts_stats.page_scan_hosts.success"):5==e?i18n("hosts_stats.page_scan_hosts.failed"):i18n("hosts_stats.page_scan_hosts.error");return a+t.id}(a,t):"scan_frequency"==e.id?a="1day"==(l=a)?i18n("hosts_stats.page_scan_hosts.daily"):"1week"==l?i18n("hosts_stats.page_scan_hosts.weekly"):"":"max_score_cve"!=e.id&&"num_vulnerabilities_found"!=e.id&&"tcp_ports"!=e.id&&"udp_ports"!=e.id||1!=t.is_ok_last_scan&&5!=t.is_ok_last_scan&&(a=0),a}function H(e,t,a){if(null!=e){let l=V(e,t),n=V(e,a);if(l==n)return B(t,a);if("host"==e.id)return SU.sortByIP(l,n,e.sort);if("host_name"==e.id)return SU.sortByName(l,n,e.sort);if("num_vulnerabilities_found"==e.id){const t=0;return SU.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("tcp_ports"==e.id||"udp_ports"==e.id){const t=0;return SU.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("duration"==e.id){const t=-1;return SU.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("last_scan"==e.id){const t=0;return SU.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("is_ok_last_scan"==e.id)return SU.sortByName(l,n,e.sort);if("max_score_cve"==e.id){const t=0;return SU.sortByNumberWithNormalizationValue(l,n,e.sort,t)}return e.id,SU.sortByName(l,n,e.sort)}return B(t,a)}function G(e){I.value=!1,O.value=!1,ne(),A.value=e.row,k.value.show("delete_single_row",i18n("delete_vs_host"))}function W(e){I.value=!1,O.value=!1,ne(),E.value=e.row;const t=`${i18n("scan_host")}`;k.value.show("scan_row",t)}function K(e){$.value.show(e.row)}function Y(){I.value=!1,O.value=!1,ne(),k.value.show("delete_all",i18n("delete_all_vs_hosts"))}async function Z(e){e.is_edit=!0,await le(e)}function X(){!0===I.value&&(I.value=!1),!0===O.value&&(O.value=!1)}function Q(){ie()}function ee(){C.value=w.value.get_rows_num()}const te=e=>((e,t,a,l)=>{const n={download:!0,show_result:!0};let s={host:(e,t)=>yU(e,t),scan_type:(e,a)=>cU(e,a,t),last_scan:(e,t)=>uU(e,t),duration:(e,t)=>dU(e,t),scan_frequency:e=>_U(e),is_ok_last_scan:e=>pU(e),max_score_cve:(e,t)=>rU(e,t),tcp_ports:(e,t)=>hU(e,t),udp_ports:(e,t)=>mU(e,t),num_vulnerabilities_found:(e,t)=>iU(e,t)};return e.forEach((e=>{e.render_func=s[e.data_field],"actions"==e.id&&e.button_def_array.forEach((e=>{e.f_map_class=(t,a)=>(t=t.filter((e=>"link-disabled"!=e)),(3==a.is_ok_last_scan||null==a.is_ok_last_scan||null==a.last_scan||null!=a.last_scan&&null==a.last_scan.time)&&n[e.id]&&t.push("link-disabled"),t)}))})),e})(e,L,0,t.context.ifid),le=async function(e){const t=NtopUtils.buildURL(d,{...e}),a=await b.http_post_request(t,M);if($.value.close(),!0===a.rsp)null!=e.cidr?n.value=i18n("scan_host_updated").replace("%{host}",`${e.host}/${e.cidr}`):n.value=i18n("scan_host_updated").replace("%{host}",`${e.host}`),I.value=!0,O.value=!1,setTimeout(X,1e4),F(!1);else{null!=e.cidr?s.value=i18n("scan_host_already_inserted").replace("%{host}",`${e.host}/${e.cidr}`):s.value=i18n("scan_host_already_inserted").replace("%{host}",`${e.host}`);let t="";L.forEach((a=>{a.id==e.scan_type&&(t=a.label)})),s.value=i18n("scan_host_already_inserted").replace("%{scan_type}",`${t}`),O.value=!0,I.value=!1,setTimeout(X,1e4)}!0!==e.is_edit&&F(!1)},ne=function(e){null!=e&&0!=e&&(o.value=i18n("scan_in_progress").replace("total",`${e}`))},se=async function(e){const t=NtopUtils.buildURL(_,{...e});await b.http_post_request(t,M),I.value=!1,O.value=!1,ne(),F(!1)},oe=async function(){const e=NtopUtils.buildURL(v,{...M}),t=await b.http_request(e);L=t.rsp},ie=async function(){const e=NtopUtils.buildURL(g,{...M}),t=await b.http_request(e);I.value=!1,O.value=!1,ne(t.rsp.total_in_progress),null==N.value&&(N.value=t.rsp.total_in_progress);const a=0==t.rsp.total_in_progress&&N.value>0;N.value=t.rsp.total_in_progress,T.value=N.value>0&&!1===P.value,!0===T.value?setTimeout((function(){F(!0)}),2e3):a&&setTimeout((function(){F(!0)}),5e3)},re=function(){k.value.show("scan_all_rows",i18n("scan_all_hosts")),F(!1)},ce=function(){S.value.show()},ue=async function(){const e=E.value;await de(e.host,e.scan_type,e.ports,e.id),F(!0)},de=async function(e,t,a,l){const n=NtopUtils.buildURL(f,{host:e,scan_type:t,scan_single_host:!0,scan_ports:a,scan_id:l});await b.http_post_request(n,M)};async function _e(){const e=NtopUtils.buildURL(f,{scan_single_host:!1});await b.http_post_request(e,M),F(!1)}const pe=async function(){const e=A.value,t=NtopUtils.buildURL(p,{host:e.host,scan_type:e.scan_type,delete_all_scan_hosts:!1,scan_id:e.id});await b.http_post_request(t,M),F(!1)},fe=async function(){const e=NtopUtils.buildURL(p,{delete_all_scan_hosts:!0});await b.http_post_request(e,M),F(!1)};function ve(e){const t={host:e.row.host,scan_type:e.row.scan_type,epoch:e.row.last_scan.epoch},a=x.obj_to_url_params(t),l=`${h}?${a}`;b.download_URI(l)}function me(e){const t=e.row.host,a=e.row.last_scan.time.replace(" ","_"),l={host:t,scan_type:e.row.scan_type,scan_return_result:!0,page:"show_result",epoch:e.row.last_scan.epoch,scan_date:a},n=x.obj_to_url_params(l),s=`${m}?${n}`;x.go_to_url(s)}function he(e){P.value=e}return(e,d)=>(Us(),Ls(Cs,null,[Hs("div",CU,[Hs("div",NU,[U.value?(Us(),Ls("div",AU,[Hs("span",null,ae(i.value),1)])):Zs("v-if",!0),Hs("div",EU,[Hs("div",TU,[T.value?(Us(),Ls("div",PU,[UU,Hs("span",null,ae(o.value),1)])):Zs("v-if",!0),I.value?(Us(),Ls("div",IU,[OU,Hs("span",null,ae(n.value),1)])):Zs("v-if",!0),O.value?(Us(),Ls("div",MU,[jU,Hs("span",null,ae(s.value),1)])):Zs("v-if",!0),Hs("div",LU,[Gs(UP,{ref_key:"modal_delete_confirm",ref:k,title:wa(r),body:wa(c),onDelete:pe,onDelete_all:fe,onScan_row:ue,onScan_all_rows:_e},null,8,["title","body"]),Gs(jP,{ref_key:"modal_update_perioditicy_scan",ref:S,title:wa(u),onUpdate:se},null,8,["title"]),Gs(rv,{ref_key:"table_hosts_to_scan",ref:w,table_id:y.value,csrf:j.value.csrf,f_map_columns:te,get_extra_params_obj:q,f_sort_rows:H,onCustom_event:z,onRows_loaded:ee},{custom_header:hl((()=>[Hs("button",{class:"btn btn-link",type:"button",ref:"add_host",onClick:D},RU,512)])),_:1},8,["table_id","csrf"])])]),Hs("div",DU,[Hs("button",{type:"button",ref:"delete_all",onClick:Y,class:J(["btn btn-danger me-1",{disabled:0==C.value}])},[FU,Js(" "+ae(a("delete_all_entries")),1)],2),Hs("button",{type:"button",ref:"scan_all",onClick:re,class:J(["btn btn-primary me-1",{disabled:0==C.value}])},[qU,Js(" "+ae(a("hosts_stats.page_scan_hosts.schedule_all_scan")),1)],2),t.context.is_enterprise_l?(Us(),Ls("button",{key:0,type:"button",ref:"update_all",onClick:ce,class:J(["btn btn-secondary me-1",{disabled:0==C.value}])},ae(a("hosts_stats.page_scan_hosts.update_periodicity_title")),3)):Zs("v-if",!0)]),Hs("div",zU,[Gs(_v,{note_list:l})])])])]),Gs(oU,{ref_key:"modal_add",ref:$,context:j.value,onAdd:le,onEdit:Z,onCloseModal:d[0]||(d[0]=e=>he(!1)),onOpenModal:d[1]||(d[1]=e=>he(!0)),onHidden:d[2]||(d[2]=e=>he(!1))},null,8,["context"])],64))},__file:"http_src/vue/page-vulnerability-scan.vue"};const VU={class:"row"},HU={class:"col-md-12 col-lg-12"},GU={class:"card card-shadow"},WU=["innerHTML"],KU=["innerHTML"];var JU={__name:"page-host-vs-result",props:{context:Object},setup(e){const t=e,a=`${http_prefix}/lua/rest/v2/get/host/vulnerability_scan_result.lua`;ma(null);const l=ma(!1),n=ma(""),s=ma(""),o=ma(""),i=ma("");return ma([]),_n((async()=>{await async function(e,r,c,u){l.value=!0;let d={host:e,scan_type:r,scan_return_result:!0,epoch:u},_=ntopng_url_manager.obj_to_url_params(d),p=`${a}?${_}`,f=await ntopng_utility.http_request(p);n.value=f.rsp,s.value=`<pre>${n.value}</pre>`,"ipv4_netscan"==r&&(e+="/24");const v="true"===t.context.is_in_mem||1==t.context.is_in_mem?`${e} <a href="${http_prefix}/lua/host_details.lua?host=${e}"><i class = "fas fa-laptop"></i></a>`:e;i.value=i18n("hosts_stats.page_scan_hosts.vs_result").replace("%{host}",v),null!=c&&(c=c.replaceAll("_"," ")),i.value=i.value.replace("%{date}",c),o.value=i.value,l.value=!1}(t.context.host,t.context.scan_type,t.context.date,t.context.epoch)})),(e,t)=>(Us(),Ls("div",VU,[Hs("div",HU,[Hs("div",GU,[Hs("h3",{class:"d-inline-block pt-3 ps-3",innerHTML:o.value},null,8,WU),l.value?(Us(),Rs(wf,{key:0})):Zs("v-if",!0),Hs("div",{class:J(["card-body",[l.value?"ntopng-gray-out":""]]),innerHTML:s.value},null,10,KU)])])]))},__file:"http_src/vue/page-host-vs-result.vue"};const YU={class:"row"},ZU={class:"col-md-12 col-lg-12"},XU={class:"card card-shadow"},QU={class:"card-body"},eI={id:"open_ports"};var tI={__name:"page-open-ports",props:{context:Object},setup(e){const t=e,a=`${http_prefix}/lua/vulnerability_scan.lua`,l=ma("open_ports"),n=e=>e,s=ma();t.context.csrf;const o=ma({csrf:t.context.csrf,ifid:t.context.ifid,is_enterprise_l:t.context.is_enterprise_l}),i=()=>x.get_url_object();function r(e){let t={click_button_show_hosts:f};null!=t[e.event_id]&&t[e.event_id](e)}function c(e,t){let a={title_i18n:"port",data_field:"port",sortable:!0,class:["text-nowrap","text-end"]},l=e[a.data_field],n=t[a.data_field];return l=_(l),n=_(n),l-n}function u(e,t,a){if(null!=e){let l=t[e.data.data_field],n=a[e.data.data_field];return"port"==e.id?(l=_(l),n=_(n),1==e.sort?l-n:n-l):"count_host"==e.id||"cves"==e.id?(l=d(l),n=d(n),l==n?c(t,a):1==e.sort?l-n:n-l):("hosts"==e.id||(null!=l||(l=""),null!=n||(n="")),l==n?c(t,a):1==e.sort?l.localeCompare(n):n.localeCompare(l))}return c(t,a)}function d(e){let t=0;return""===e||null===e||NaN===e||void 0===e?t=0:(e=e.split(",").join(""),t=parseInt(e)),t}function _(e){return""!=e&&null!=e&&NaN!=e&&null!=e||(e=0),e=parseInt(e)}const p=e=>{let t={hosts:(e,t)=>{let l="";const n=e.split(", "),s=n.length;let o=0;for(;o<5&&o<s;){const e=n[o].split("|"),t=e[0],s=e[1],i=e[2].replace(" ","_"),r="true"===e[3],c=e[4];let u="";e.length>5&&(u=e[5]);let d={host:t,scan_type:s,scan_return_result:!0,page:"show_result",epoch:c,scan_date:i},_=x.obj_to_url_params(d),p=`${a}?${_}`;const f=""!=u?0==r?`${u}  <span class="badge bg-secondary">${i18n("ipv6")}</span>`:u:t;l+=""==l?`<a href="${p}">${f}</a>`:`, <a href="${p}">${f}</a>`,o++}return s>5&&(l+="..."),l}};return e.forEach((e=>{e.render_func=t[e.data_field]})),e};async function f(e){let t={port:e.row.port_number},l=x.obj_to_url_params(t),n=`${a}?${l}`;x.go_to_url(n)}return(e,t)=>(Us(),Ls("div",YU,[Hs("div",ZU,[Hs("div",XU,[Hs("div",QU,[Hs("div",eI,[Gs(rv,{ref_key:"table_open_ports",ref:s,table_id:l.value,csrf:o.value.csrf,f_map_columns:p,get_extra_params_obj:i,f_sort_rows:u,f_map_config:n,onCustom_event:r},null,8,["table_id","csrf"])])])])])]))},__file:"http_src/vue/page-open-ports.vue"};const aI={class:"form-group ms-2 me-2 mt-3 row"},lI={class:"col-form-label col-sm-2"},nI={class:"col-sm-10"},sI={class:"form-group ms-2 me-2 mt-3 row"},oI={class:"col-form-label col-sm-2"},iI={class:"col-sm-10"},rI={class:"mt-4"},cI=["disabled"];var uI={__name:"modal-edit-vs-report",props:{context:Object},emits:["add","edit"],setup(e,{expose:t,emit:a}){const l=e=>i18n(e),n=ma(i18n("hosts_stats.page_scan_hosts.reports_page.edit_report")),s=ma(null),o=ma(null),i=ma(null),r=ma(null),c=ma(!1),u=[l("hosts_stats.page_scan_hosts.reports_page.notes.note_1")],d=()=>{const e=r.value.epoch,t=i.value.replaceAll(" ","_");a("edit",{report_title:t,epoch_end:e}),s.value.close()},_=()=>{const e=i.value.split(" ").every((e=>wp.validateSingleWord(e)));c.value=e};return t({show:e=>{o.value="",i.value="",r.value=null,(e=>{r.value=e,o.value=e.report_date,i.value=e.name})(e),s.value.show()},close:()=>{s.value.close()}}),(e,t)=>(Us(),Rs(sp,{ref_key:"modal_id",ref:s},{title:hl((()=>[Js(ae(n.value),1)])),body:hl((()=>[Zs(" Target information, here an IP is put "),Hs("div",aI,[Hs("label",lI,[Hs("b",null,ae(l("hosts_stats.page_scan_hosts.reports_page.date")),1)]),Hs("div",nI,[xn(Hs("input",{"onUpdate:modelValue":t[0]||(t[0]=e=>o.value=e),disabled:!0,class:"form-control",type:"text"},null,512),[[ji,o.value]])])]),Hs("div",sI,[Hs("label",oI,[Hs("b",null,ae(l("hosts_stats.page_scan_hosts.reports_page.name")),1)]),Hs("div",iI,[xn(Hs("input",{"onUpdate:modelValue":t[1]||(t[1]=e=>i.value=e),class:"form-control",type:"text",onInput:_,required:""},null,544),[[ji,i.value]])])]),Hs("div",rI,[Gs(_v,{note_list:u})])])),footer:hl((()=>[Hs("div",null,[Hs("button",{type:"button",onClick:d,disabled:!c.value,class:"btn btn-primary"},ae(l("apply")),9,cI)])])),_:1},512))},__file:"http_src/vue/modal-edit-vs-report.vue"};const dI={class:"row"},_I={class:"col-md-12 col-lg-12"},pI={class:"card card-shadow"},fI={class:"card-body"},vI={id:"vs_reports"};var mI={__name:"page-vulnerability-scan-report",props:{context:Object},setup(e){const t=e,a=e=>i18n(e);i18n("hosts_stats.page_scan_hosts.notes.generic_notes_1").replaceAll("${http_prefix}",`${http_prefix}`);const l=a("hosts_stats.page_scan_hosts.report_page.delete_title"),n=a("hosts_stats.page_scan_hosts.report_page.delete_description"),s=`${http_prefix}/lua/enterprise/vulnerability_scan_report.lua`,o=`${http_prefix}/lua/pro/rest/v2/delete/vs/report.lua`,i=`${http_prefix}/lua/pro/rest/v2/edit/vs/report.lua`,r=ma("vs_reports"),c=ma(),u=ma(),d=ma(),_=ma(0),p=ma({}),f={csrf:t.context.csrf},v=ma({csrf:t.context.csrf,ifid:t.context.ifid});function m(){c.value.refresh_table()}const h=()=>x.get_url_object();function g(e){let t={click_button_edit:S,click_button_delete:$};null!=t[e.event_id]&&t[e.event_id](e)}function y(e,t){let a=t[e.data.data_field];return"report_date"==e.data.data_field&&(a=t.epoch),"name"==e.data.data_field&&(a=function(e,t){let a=e;e.startsWith("Report of")&&(a="report_"+t);return a}(t.name,t.epoch)),a}function w(e,t){return SU.sortByNumber(e.epoch,t.epoch,0)}function k(e,t,a){if(null!=e){let l=y(e,t),n=y(e,a);return l==n?w(t,a):"report_date"==e.id||"tcp_ports"==e.id||"udp_ports"==e.id||"cves"==e.id?SU.sortByNumber(l,n,e.sort):"name"==e.id?SU.sortByName(l,n,e.sort):"num_hosts"==e.id?SU.sortByNumber(l,n,e.sort):SU.sortByName(l,n,e.sort)}return w(t,a)}function $(e){p.value=e.row,d.value.show("delete_single_report")}function S(e){u.value.show(e.row)}async function C(e){await N(e)}const N=async function(e){const t=NtopUtils.buildURL(i,{...e});await b.http_post_request(t,f),m()};function A(){_.value=c.value.get_rows_num()}const E=e=>{let t={report_date:(e,t)=>`<a href="${NtopUtils.buildURL(s,{printable:!1,epoch_end:t.epoch,epoch_begin:t.epoch})}">${e}</a>`};return e.forEach((e=>{e.render_func=t[e.data_field]})),e},T=async function(){const e=p.value,t=NtopUtils.buildURL(o,{epoch:e.epoch});await b.http_post_request(t,f),m()};return(e,t)=>(Us(),Ls(Cs,null,[Hs("div",dI,[Hs("div",_I,[Hs("div",pI,[Hs("div",fI,[Hs("div",vI,[Gs(UP,{ref_key:"modal_delete_confirm",ref:d,title:wa(l),body:wa(n),onDelete:T},null,8,["title","body"]),Gs(rv,{ref_key:"table_vs_reports",ref:c,table_id:r.value,csrf:v.value.csrf,f_map_columns:E,get_extra_params_obj:h,f_sort_rows:k,onCustom_event:g,onRows_loaded:A},null,8,["table_id","csrf"])])])])])]),Gs(uI,{ref_key:"modal_edit",ref:u,context:v.value,onEdit:C},null,8,["context"])],64))},__file:"http_src/vue/page-vulnerability-scan-report.vue"};const hI={style:{"min-height":"8.5rem"}},gI={class:"form-group ms-2 me-2 mt-3 row"},bI={class:"col-form-label col-sm-4"},yI={class:"col-sm-6"},wI=["pattern"],xI=["disabled"];var kI={__name:"modal-file-save",props:{csrf:String,title:String,get_suggested_file_name:Function,store_file:Function,allow_spaces:Boolean},emits:["file_stored"],setup(e,{expose:t,emit:a}){const l=e,n=ma(null),s=ma("");ma("date");let o=NtopUtils.REGEXES.singleword;const i=ko((()=>!new RegExp(o).test(s.value)));const r=async()=>{l.store_file(s.value),a("file_stored",s.value),c()},c=()=>{n.value.close()};t({show:()=>{!async function(){s.value=l.get_suggested_file_name()}(),n.value.show()},close:c}),pn((()=>{o=l.allow_spaces?NtopUtils.REGEXES.multiword:NtopUtils.REGEXES.singleword}));const u=e=>i18n(e);return(t,a)=>(Us(),Rs(sp,{onShowed:a[1]||(a[1]=e=>{}),ref_key:"modal_id",ref:n},{title:hl((()=>[Js(ae(e.title),1)])),body:hl((()=>[Hs("div",hI,[Hs("div",gI,[Hs("label",bI,[Hs("b",null,ae(u("name"))+":",1)]),Hs("div",yI,[xn(Hs("input",{pattern:wa(o),placeholder:"",required:"",type:"text",class:"form-control","onUpdate:modelValue":a[0]||(a[0]=e=>s.value=e)},null,8,wI),[[ji,s.value]])])])])])),footer:hl((()=>[Hs("button",{type:"button",onClick:r,disabled:i.value,class:"btn btn-primary"},ae(u("save")),9,xI)])),_:1},512))}};np("\ninput[data-v-87fda19e]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-87fda19e] {\n  cursor: not-allowed;\n}\n"),kI.__scopeId="data-v-87fda19e",kI.__file="http_src/vue/modal-file-save.vue";const $I={class:"form-group ms-2 me-2 mt-3 row"},SI={class:"col-form-label col-sm-4"},CI={class:"col-sm-8"},NI={value:"name"},AI={value:"date"},EI={class:"form-group ms-2 me-2 mt-3 row"},TI={class:"col-form-label col-sm-4"},PI={class:"col-sm-8"},UI=["disabled"],II=["disabled"];var OI={__name:"modal-file-open",props:{csrf:String,title:String,file_title:String,list_files:Function,open_file:Function,delete_file:Function},emits:["file_deleted"],setup(e,{expose:t,emit:a}){const l=e,n=ma(null),s=ma({}),o=ma(""),i=ma([]),r=ma("date");NtopUtils.REGEXES.singleword;const c=ko((()=>""==s.value));function u(){i.value=i.value.sort(((e,t)=>"name"==r.value?e.name.localeCompare(t.name):t.epoch-e.epoch)),i.value.length>0&&(s.value=i.value[0])}const d=()=>{p(),l.open_file(s.value.name)},_=async e=>{let t=s.value.name;1==e&&(t="*"),l.delete_file(t)&&a("file_deleted",t),p()},p=()=>{n.value.close()};t({show:()=>{!async function(){o.value="",i.value=await l.list_files(),i.value.forEach((e=>e.label=function(e){let t=1e3*e.epoch,a=ntopng_utility.from_utc_to_server_date_format(t,"DD/MM/YYYY");return`${e.name} (${a})`}(e))),u(),i.value.length>0&&(s.value=i.value[0])}(),n.value.show()},close:p}),pn((()=>{}));const f=e=>i18n(e);return(t,a)=>(Us(),Rs(sp,{onShowed:a[4]||(a[4]=e=>{}),ref_key:"modal_id",ref:n},{title:hl((()=>[Js(ae(e.title),1)])),body:hl((()=>[Hs("div",$I,[Hs("label",SI,[Hs("b",null,ae(f("order_by")),1)]),Hs("div",CI,[xn(Hs("select",{class:"form-select",onChange:a[0]||(a[0]=e=>u()),"onUpdate:modelValue":a[1]||(a[1]=e=>r.value=e)},[Hs("option",NI,ae(f("name")),1),Hs("option",AI,ae(f("date")),1)],544),[[Fi,r.value]])])]),Hs("div",EI,[Hs("label",TI,[Hs("b",null,ae(e.file_title),1)]),Hs("div",PI,[Gs(n_,{selected_option:s.value,"onUpdate:selected_option":a[2]||(a[2]=e=>s.value=e),options:i.value},null,8,["selected_option","options"])])])])),footer:hl((()=>[Hs("button",{onClick:a[3]||(a[3]=e=>_(!0)),type:"button",style:{"text-align":"left","margin-left":"0px"},class:"btn btn-danger start-0 position-absolute ms-3"},ae(f("delete_all_entries")),1),Hs("button",{type:"button",onClick:_,disabled:c.value,class:"btn btn-danger"},ae(f("delete")),9,UI),Hs("button",{type:"button",onClick:d,disabled:c.value,class:"btn btn-primary"},ae(f("open")),9,II)])),_:1},512))}};np("\ninput[data-v-1976657e]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-1976657e] {\n  cursor: not-allowed;\n}\n"),OI.__scopeId="data-v-1976657e",OI.__file="http_src/vue/modal-file-open.vue";const MI=e=>(fl("data-v-9db8ba96"),e=e(),vl(),e),jI={class:"form-group ms-2 me-2 mt-3 row"},LI={class:"col-form-label col-sm-4"},RI={class:"col-sm-8"},DI=MI((()=>Hs("span",null," ",-1))),FI=["disabled"];var qI={__name:"modal-file-upload",props:{csrf:String,title:String,file_title:String,upload_file:Function},emits:["file_uploaded"],setup(e,{expose:t,emit:a}){const l=e,n=ma(null),s=ma(""),o=ma(""),i=ma(null);function r(){i.value.click()}function c(e){const t=e.target.files;o.value=t[0].name;const l=new FileReader;l.addEventListener("load",(()=>{s.value=l.result})),l.readAsText(t[0]),a("file_uploaded",o.value)}const u=()=>{d(),l.upload_file(s.value)},d=()=>{n.value.close()};t({show:()=>{!async function(){o.value="",s.value=""}(),n.value.show()},close:d}),pn((()=>{}));const _=e=>i18n(e);return(t,a)=>(Us(),Rs(sp,{onShowed:a[0]||(a[0]=e=>{}),ref_key:"modal_id",ref:n},{title:hl((()=>[Js(ae(e.title),1)])),body:hl((()=>[Hs("div",jI,[Hs("label",LI,[Hs("b",null,ae(e.file_title),1)]),Hs("div",RI,[Hs("button",{type:"button",onClick:r,class:"btn btn-primary"},ae(_("upload")),1),DI,xn(Hs("small",null,"No file selected",512),[[Zi,!s.value]]),xn(Hs("small",null,ae(o.value),513),[[Zi,o.value]]),Hs("input",{ref_key:"file_input",ref:i,type:"file",accept:"application/JSON",onChange:c,style:{display:"none"}},null,544)])])])),footer:hl((()=>[Hs("button",{type:"button",onClick:u,disabled:!s.value,class:"btn btn-primary"},ae(_("open")),9,FI)])),_:1},512))}};np("\ninput[data-v-9db8ba96]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-9db8ba96] {\n  cursor: not-allowed;\n}\n"),qI.__scopeId="data-v-9db8ba96",qI.__file="http_src/vue/modal-file-upload.vue";const zI={class:"form-group ms-2 me-2 mt-3 row",style:{"overflow-y":"scroll",height:"45vh"}},BI=["onClick"],VI={class:"card-body"},HI={class:"form-group wizard-form-group"},GI={class:"form-text text-muted"};var WI={__name:"modal-select-component",props:{csrf:String,title:String,list_components:Function,add_component:Function},emits:[],setup(e,{expose:t,emit:a}){const l=e,n=ma(null),s=ma({}),o=ma([]);ma("date");function i(e){switch(e){case"pie":return"fa-solid fa-chart-pie";case"table":return"fa-solid fa-table";case"timeseries":return"fa-solid fa-chart-line";default:return""}}const r=()=>{n.value.close()};t({show:()=>{!async function(){o.value=await l.list_components(),o.value.length>0&&(s.value=o.value[0])}(),n.value.show()},close:r}),pn((()=>{}));const c=e=>i18n(e);return(t,a)=>(Us(),Rs(sp,{onShowed:a[0]||(a[0]=e=>{}),ref_key:"modal_id",ref:n},{title:hl((()=>[Js(ae(e.title),1)])),body:hl((()=>[Hs("div",zI,[(Us(!0),Ls(Cs,null,Tn(o.value,(e=>(Us(),Ls("div",{class:J(["card w-100 wizard-card",{"wizard-selected":s.value==e}])},[Hs("a",{class:"wizard-link",href:"#",onClick:t=>{s.value=e,r(),l.add_component(s.value)}},[Hs("div",VI,[Hs("div",HI,[Hs("h5",null,[Hs("i",{class:J(i(e.component))},null,2),Js(" "+ae(c(e.i18n_name)),1)]),Hs("small",GI,ae(c(e.i18n_descr)),1)])])],8,BI)],2)))),256))])])),footer:hl((()=>[])),_:1},512))}};np("\ninput[data-v-16713f39]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-16713f39] {\n  cursor: not-allowed;\n}\n"),WI.__scopeId="data-v-16713f39",WI.__file="http_src/vue/modal-select-component.vue";const KI={class:"mb-1 me-3",style:{position:"absolute",bottom:"0px",right:"0px"}};var JI={__name:"dashboard-box",props:{color:String,width:Number,height:Number},setup(e){const t=e,a=ko((()=>`col-${t.width||4}`)),l=ko((()=>{let e="";return t.color&&(e=`bg-${t.color}`),`row-${t.height||4} ${e}`}));return(e,t)=>(Us(),Ls("div",{class:J([a.value,"widget-box-main-dashboard"])},[Hs("div",{class:J([l.value,"widget-box"]),style:{position:"relative"}},[Zs(" title "),Un(e.$slots,"box_title"),Zs(" content "),Un(e.$slots,"box_content"),Zs(" footer "),Hs("div",KI,[Un(e.$slots,"box_footer")])],2)],2))},__file:"http_src/vue/dashboard-box.vue"},YI={__name:"dashboard-empty",props:{id:String,i18n_title:String,ifid:String,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function,filters:Object},setup(e){const t=e;async function a(){}return jl((()=>[t.epoch_begin,t.epoch_end,t.filters]),((e,t)=>{a()}),{flush:"pre",deep:!0}),_n((()=>{a()})),pn((()=>{})),(e,t)=>(Us(),Ls("div"))},__file:"http_src/vue/dashboard-empty.vue"};const ZI={class:"table-responsive",style:{"margin-left":"-1rem","margin-right":"-1rem"}};var XI={__name:"dashboard-table",props:{id:String,i18n_title:String,ifid:String,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function,filters:Object},setup(e){const t=e,l=ma("simple_table"),n=ma([]),s=ko((()=>{let e=t.params.columns.map((e=>(!e.style&&e.data_type&&("bytes"==e.data_type||"date"==e.data_type?e.style="text-align: right":"count_score"==e.data_type&&(e.style="text-align: center")),{...e})));return e[0].class=(e[0].class?e[0].class+" ":"")+"first-col-width",e}));jl((()=>[t.epoch_begin,t.epoch_end,t.filters]),((e,t)=>{c()}),{flush:"pre",deep:!0}),_n((()=>{c()})),pn((()=>{}));const o=function(e){return e.i18n_name?(e=>i18n(e))(e.i18n_name):""},i={throughput:function(e,t){return"name"==e.id?t.url?`<a href='${t.url}'>${t.name}</a>`:t.name:"throughput"==e.id?t.throughput_type&&"pps"==t.throughput_type?a.fpackets(t[e.id]):t.throughput_type&&"bps"==t.throughput_type?a.bitsToSize(t[e.id]):t.throughput:""},db_search:function(e,t){if("host"==e.data_type)return a.formatHost(t[e.id],t,"cli_ip"==e.id);if("network"==e.data_type)return a.formatNetwork(t[e.id],t);if("asn"==e.data_type)return a.formatASN(t[e.id],t);if("country"==e.data_type)return a.formatCountry(t[e.id],t);if(v.types[e.data_type]){return v.getFormatter(e.data_type)(t[e.id])}return"object"==typeof t[e.id]?a.formatGenericObj(t[e.id],t):t[e.id]},vs_scan_result:function(e,a){return"host"==e.id?yU(a[e.id],a,t.ifid):"last_scan"==e.id?uU(a[e.id],a):"duration"==e.id?dU(a[e.id],a):"scan_frequency"==e.id?_U(a[e.id]):"is_ok_last_scan"==e.id?pU(a[e.id]):"tcp_ports"==e.id?hU(a[e.id],a):"udp_ports"==e.id?mU(a[e.id],a):"scan_type"==e.id?cU(a[e.id],!0,a):"hosts"==e.id?((e,t)=>{const a=e.split(", ");let l="",n=new Map;return a.forEach((e=>{let t=e.split("|");n.set(t.length>5&&null!=t[5]&&""!=t[5]?t[5]:t[0],{scan_type:t[1],ip:t[0],date:t[2].replace(" ","_"),is_ipv4:"true"==t[3],epoch:t[4]})})),n=new Map([...n.entries()].sort()),n.forEach(((e,t)=>{let a=bU(e.ip,e.scan_type,e.date,e.epoch);e.is_ipv4?l+=`<li> <a href="${a}">${t}</a></li>`:l+=`<li> <a href="${a}">${t} <span class="badge bg-secondary">${i18n("ipv6")}</span></a></li>`})),l})(a[e.id]):"cve"==e.id||"cve_list"==e.id?((e,t)=>{let a="",l=0;if(1==t.is_ok_last_scan&&null!=t.last_scan&&null!=t.last_scan.time&&null!=e){let n=new Map;e.forEach((e=>{let t=e.split("|"),a=0;t.length>1&&(a=Number(t[1])),n.set(t[0],a)})),n=new Map([...n.entries()].sort(((e,t)=>t[1]-e[1]))),n.forEach(((e,n)=>{if(!(l<100))return a;{let s="";s=0==e?"bg-success":e<3.9?"bg-secondary":e<7?"bg-warning":"bg-danger";const o=ntopng_utility.get_cve_details_url(n,t.scan_type);a+=`<li  title='${i18n("hosts_stats.page_scan_hosts.report.cves_title")}'>\n                        <a href="${o}"><span class="badge ${s}">${n} </span></a> \n                        (${e})\n                    </li>`,l++}}))}return a})(a[e.id],a):"port"==e.id?((e,t)=>{let a=e;return null!=t.port_label&&t.port_label!=e&&(a+=` (${t.port_label})`),a})(a[e.id],a):"max_score_cve"==e.id?rU(a[e.id],a):"num_vulnerabilities_found"==e.id?iU(a[e.id],a):"tcp_udp_ports_list"==e.id?((e,t,a)=>{let l=new Map;if(1==a.is_ok_last_scan&&null!=a.last_scan&&null!=a.last_scan.time&&null!=e){const t=e.split(",");let n="",s="";t.forEach((e=>{if(null!=e&&""!=e){if(n=e,s=e,a.host_in_mem){const t=gU(e,0,a.tcp_ports_unused,a.tcp_ports_filtered);null!=t&&(n+=t)}n=`<li>${n}</li>`,l.set(e,{port_label:n,port_id:Number(s.split("/")[0])})}})),null!=a.tcp_ports_filtered&&a.tcp_ports_filtered.forEach((e=>{n=e+="/tcp",s=e,a.host_in_mem&&(n+=` <span class="badge bg-primary" title='${i18n("hosts_stats.page_scan_hosts.filtered_port")}'><i class="fa-solid fa-filter"></i></span>`),n=`<li>${n}</li>`,l.set(e,{port_label:n,port_id:Number(s.split("/")[0])})}))}if(1==a.is_ok_last_scan&&null!=a.last_scan&&null!=a.last_scan.time&&null!=t){const e=t.split(",");let n="",s="";e.forEach((e=>{if(null!=e&&""!=e){if(n=e,s=e,a.host_in_mem){const t=gU(e,0,a.udp_ports_unused,a.udp_ports_filtered);null!=t&&(n+=t)}n=`<li>${n}</li>`,l.set(e,{port_label:n,port_id:Number(s.split("/")[0])})}})),null!=a.udp_filtered_ports&&a.udp_ports_filtered.forEach((e=>{n=e+="/udp",s=e,a.host_in_mem&&(n+=` <span class="badge bg-primary" title='${i18n("hosts_stats.page_scan_hosts.filtered_port")}'><i class="fa-solid fa-filter"></i></span>`),n=`<li>${e}</li>`,l.set(e,{port_label:n,port_id:Number(s.split("/")[0])})}))}let n="";return l=new Map([...l.entries()].sort(((e,t)=>e[1].port_id-t[1].port_id))),l.forEach(((e,t)=>{n+=`${e.port_label}`})),n})(a.tcp_ports_list,a.udp_ports_list,a):"discovered_hosts"==e.id?(e=>{const t=e.split(",");let a="";return t.forEach((e=>{""!=e&&(a+=`<li>${e}</li>`)})),a})(a[e.id]):a[e.id]}},r=function(e,a){if(t.params&&t.params.table_type&&i[t.params.table_type]){return(0,i[t.params.table_type])(e,a)}return a[e.id]?a[e.id]:""};async function c(){const e={ifid:t.ifid,epoch_begin:t.epoch_begin,epoch_end:t.epoch_end,...t.params.url_params,...t.filters},a=ntopng_url_manager.obj_to_url_params(e);let l=await t.get_component_data(`${http_prefix}${t.params.url}`,a),s=[];if(s="db_search"==t.params.table_type?l.records:l,"vs_scan_result"!=t.params.table_type){const e=t.max_height?t.max_height/4*6:6;s=s.slice(0,e)}n.value=s}return(e,t)=>(Us(),Ls("div",ZI,[Gs(vw,{id:l.value,columns:s.value,rows:n.value,print_html_column:o,print_html_row:r,wrap_columns:!0},null,8,["id","columns","rows"])]))}};np("\n.first-col-width {\n    /* max-width: 100% !important; */\n}\n@media print and (max-width: 210mm) {\ntd.first-col-width {\n\tmax-width: 55mm !important;\n}\n}\n@media print and (min-width: 211mm) {\ntd.first-col-width {\n\tmax-width: 95mm !important;\n}\n}\n\n/* @media print and (max-width: 148mm){ */\n/* } */\n\n"),XI.__file="http_src/vue/dashboard-table.vue";const QI={class:"d-flex align-items-center justify-content-between"},eO=["href"],tO={class:"fw-normal text-white"},aO={class:"subtitle text-white text-sm text mb-0 h5"},lO={class:"flex-shrink-0 ms-3"};var nO={__name:"dashboard-badge",props:{id:String,i18n_title:String,ifid:String,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function,set_component_attr:Function,filters:Object},setup(e){const t=e,a=ma(""),l=ma(""),n=ma(""),s=ma("#");async function o(){if(t.params.url){const e={ifid:t.ifid,epoch_begin:t.epoch_begin,epoch_end:t.epoch_end,...t.params.url_params,...t.filters},l=ntopng_url_manager.obj_to_url_params(e);let n=await t.get_component_data(`${http_prefix}${t.params.url}`,l),o=n[t.params.counter_path],i=n[t.params.counter_formatter];i||(i="number");let r=v.getFormatter(i);if(a.value=r(o),o&&t.set_component_attr("active",!0),t.params.link){const e={ifid:t.ifid,epoch_begin:t.epoch_begin,epoch_end:t.epoch_end,...t.params.link.url_params},a=ntopng_url_manager.obj_to_url_params(e);s.value=`${http_prefix}${t.params.link.url}?${a}`}}}return jl((()=>[t.epoch_begin,t.epoch_end,t.filters]),((e,t)=>{o()}),{flush:"pre",deep:!0}),_n((()=>{!function(){t.params.i18n_name&&(l.value=(e=>i18n(e))(t.params.i18n_name));t.params.icon&&(n.value=t.params.icon+" fa-2xl");o()}()})),pn((()=>{})),(e,t)=>(Us(),Ls("div",QI,[Hs("div",null,[Hs("a",{href:s.value},[Hs("h4",tO,ae(a.value),1),Hs("p",aO,ae(l.value),1)],8,eO)]),Hs("div",lO,[Hs("i",{class:J(["text-white",n.value])},null,2)])]))},__file:"http_src/vue/dashboard-badge.vue"},sO={__name:"dashboard-pie",props:{id:String,i18n_title:String,ifid:String,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function,filters:Object},setup(e){const t=e,a=ma(ntopChartApex.typeChart.DONUT),l=ma(null),n=ko((()=>`${http_prefix}${t.params.url}`));function s(){const e=n.value,a=(()=>{const e={ifid:t.ifid,epoch_begin:t.epoch_begin,epoch_end:t.epoch_end,new_charts:!0,...t.params.url_params,...t.filters};let a=ntopng_url_manager.obj_to_url_params(e);return a=a.replaceAll("%24IFID%24",t.ifid),a})();return t.get_component_data(e,a)}return jl((()=>[t.epoch_begin,t.epoch_end,t.filters]),((e,t)=>{!async function(){l.value.update_chart()}()}),{flush:"pre",deep:!0}),_n((()=>{})),pn((()=>{})),(t,o)=>(Us(),Ls("div",null,[Gs(A_,{ref_key:"chart",ref:l,id:e.id,chart_type:a.value,base_url_request:n.value,get_custom_chart_options:s,register_on_status_change:!1},null,8,["id","chart_type","base_url_request"])]))},__file:"http_src/vue/dashboard-pie.vue"};var oO={__name:"dashboard-timeseries",props:{id:String,i18n_title:String,ifid:String,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function,csrf:String,filters:Object},setup(e){const t=e,a=ma(ntopChartApex.typeChart.TS_LINE),l=ma(null),n=ma([]),s=Sy.getGroupOptionMode("1_chart_x_yaxis"),o=ma(null),i=ma([]),r=ko((()=>`${http_prefix}${t.params.url}`));function c(e,t){let a={};for(const l in e)e[l].contains("$IFID$")?a[l]=e[l].replace("$IFID$",t):a[l]=e[l];return a}async function u(e){if(i.value.length>0)return;(await ntopng_utility.http_request(`${http_prefix}/lua/rest/v2/get/ntopng/interfaces.lua`)||[]).forEach((t=>{let a=c(e,t.ifid);a.source_def=[t.ifid],i.value.push(a)}))}async function d(e){if(i.value.length>0)return;const a=await ntopng_utility.http_request(`${http_prefix}/lua/pro/rest/v2/get/flowdevices/stats.lua?ifid=${t.ifid}&gui=true`)||[];a&&a.forEach((t=>{if(t){let a=function(e,t){let a={};for(const l in e)e[l].contains("$EXPORTER$")?a[l]=e[l].replace("$EXPORTER$",t):a[l]=e[l];return a}(e,t.probe_ip);a=c(a,t.ifid),a.source_def=[t.ifid,t.probe_ip],i.value.push(a)}}))}async function _(e){if(i.value.length>0)return;const a=await ntopng_utility.http_request(`${http_prefix}/lua/rest/v2/get/network/networks.lua?ifid=${t.ifid}`)||[];a&&a.forEach((a=>{if(a){let l=function(e,t){let a={};for(const l in e)e[l].contains("$NETWORK$")?a[l]=e[l].replace("$NETWORK$",t):a[l]=e[l];return a}(e,a.id);l=c(l,t.ifid),l.source_def=[t.ifid,a.id],i.value.push(l)}}))}async function p(e,a){const l={epoch_begin:t.epoch_begin,epoch_end:t.epoch_end},n=Vb.get_source_type_from_id(t.params?.source_type),s=await Vb.get_source_array_from_value_array(http_prefix,n,a),o=await Vb.get_metric_from_schema(http_prefix,n,s,e,null,l);return Vb.get_ts_group(n,s,o)}async function f(){await async function(){i.value=[];const e=t.params.post_params?.ts_requests;for(const a in e||{})switch(a){case"$ANY_IFID$":await u(e[a]);break;case"$ANY_EXPORTER$":await d(e[a]);break;case"$ANY_NETWORK$":await _(e[a]);break;default:let l=c(e[a],t.ifid);l.source_def=[t.ifid],i.value.push(l)}}(),await async function(){if(0==n.value.length)for(const e of i.value){const t=e?.ts_schema,a=e.source_def;delete e.source_def;const l=await p(t,a);n.value.push(l)}}(),function(){for(const e of i.value)e.source_def&&delete e.source_def}();const e=r.value,a={csrf:t.csrf,ifid:t.ifid,epoch_begin:t.epoch_begin,epoch_end:t.epoch_end,...t.params.post_params,ts_requests:i.value};let l=await t.get_component_data(e,"",a);return l=Sy.tsArrayToOptionsArray(l,n.value,s,""),l[0]&&(l[0].height=o.value),l?.[0]}return jl((()=>[t.epoch_begin,t.epoch_end,t.filters]),((e,t)=>{!async function(){if(l.value){const e=await f();l.value.update_chart_series(e.data)}}()}),{flush:"pre",deep:!0}),_n((async()=>{await async function(){o.value=62.5*(t.max_height||4)}()})),pn((async()=>{})),(t,n)=>(Us(),Ls("div",null,[Gs(Ng,{ref_key:"chart",ref:l,id:e.id,chart_type:a.value,base_url_request:r.value,get_custom_chart_options:f,register_on_status_change:!1,disable_pointer_events:!1},null,8,["id","chart_type","base_url_request"])]))},__file:"http_src/vue/dashboard-timeseries.vue"};var iO={__name:"dashboard-sankey",props:{id:String,i18n_title:String,ifid:String,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function,filters:Object},setup(e){const t=e,a=(e=>i18n(e))("ports_analysis.no_data"),l=ma(null),n=ma({}),s=ma(null),o=ma(null),i=ma(null);jl((()=>[t.epoch_begin,t.epoch_end,t.filters]),((e,t)=>{r()}),{flush:"pre",deep:!0}),_n((()=>{})),pn((()=>{i.value=62.5*t.max_height,o.value=$(s.value).width(),r()}));const r=function(){!async function(){let e=await async function(){const e=`${http_prefix}${t.params.url}`,a={ifid:t.ifid,epoch_begin:t.epoch_begin,epoch_end:t.epoch_end,sankey_version:3,...t.params.url_params,...t.filters};let n=ntopng_url_manager.obj_to_url_params(a),s=await t.get_component_data(e,n);s=function(e){let t=e=>console.error(`link (source: ${e.source_node_id}, target: ${e.target_node_id}) removed for not existing source/target node`),a=function(e,t){let a={};e.nodes.forEach((e=>a[e.node_id]=!0));let l=e=>null!=a[e.source_node_id]&&null!=a[e.target_node_id],n=function(e,t,a){return e.filter((e=>{const l=t(e);return 0==l&&null!=a&&a(e),l}))}(e.links,l,t);return n}(e,t);return{nodes:e.nodes,links:a}}(s);const o=function(e){let t={},a={};e.nodes.forEach((e=>t[e.node_id]=e));let l=e=>`${e.source_node_id}_${e.label}`;e.links.forEach((e=>{let n=l(e),s=a[n];null==s&&(s={id:n,label:e.label,link:e.optional_info.link,node_links:[]},a[n]=s),s.node_links.push({source:t[e.source_node_id],target:t[e.target_node_id],value:e.value})}));let n=e.nodes.map((e=>e)),s=[];for(let e in a){let t=a[e],l={node_id:t.id,label:t.label,link:t.link};n.push(l),t.node_links.forEach((e=>{s.push({source_node_id:e.source.node_id,target_node_id:l.node_id,label:`${e.source.label} - ${e.target.label}: ${l.label}`,value:e.value}),s.push({source_node_id:l.node_id,target_node_id:e.target.node_id,label:`${e.source.label} - ${e.target.label}: ${l.label}`,value:e.value})}))}let o=n.map(((e,t)=>({index:t,label:e.label,data:e}))),i={};o.forEach(((e,t)=>i[e.data.node_id]=e));let r=s.map((e=>({source:i[e.source_node_id].index,target:i[e.target_node_id].index,value:e.value,label:e.label})));return{nodes:o,links:r}}(s);return o.links.length>0&&o.nodes.length>0?l.value.set_no_data_flag(!1):l.value.set_no_data_flag(!0),o}();n.value=e}()};function c(e){1!=e.is_link_node&&e.link&&ntopng_url_manager.go_to_url(e.link)}return(e,t)=>(Us(),Ls("div",{ref_key:"body_div",ref:s},[Gs(wS,{ref_key:"sankey_chart",ref:l,width:o.value,height:i.value,no_data_message:wa(a),sankey_data:n.value,onNode_click:c},null,8,["width","height","no_data_message","sankey_data"])],512))},__file:"http_src/vue/dashboard-sankey.vue"};const rO=e=>(fl("data-v-c360f212"),e=e(),vl(),e),cO={class:"row"},uO={class:"me-2"},dO=["title"],_O=[rO((()=>Hs("i",{class:"fa-solid fa-floppy-disk"},null,-1)))],pO=["title"],fO=[rO((()=>Hs("i",{class:"fa-solid fa-folder-open"},null,-1)))],vO=["title"],mO=[rO((()=>Hs("i",{class:"fa-solid fa-file-arrow-down"},null,-1)))],hO=["title"],gO=[rO((()=>Hs("i",{class:"fa-solid fa-file-arrow-up"},null,-1)))],bO=["title"],yO=[rO((()=>Hs("i",{class:"fas fa-print"},null,-1)))],wO=["title"],xO=[rO((()=>Hs("i",{class:"fas fa-folder-plus"},null,-1)))],kO=["title"],$O=[rO((()=>Hs("i",{class:"fas fa-pen-to-square"},null,-1)))],SO={class:"btn-group me-auto mt-2 btn-group-sm flex-wrap d-flex"},CO={class:"me-2"},NO={class:"ms-1 my-auto me-2 filters-label"},AO={key:0,class:"d-flex align-items-center ms-2"},EO={class:"me-2"},TO=rO((()=>Hs("div",null,[Hs("label",{class:"my-auto me-2"})],-1))),PO={key:1,class:"me-auto mt-2 flex-wrap d-flex"},UO=["title"],IO=[rO((()=>Hs("i",{class:"fas fa-square-plus"},null,-1)))],OO=["title"],MO=[rO((()=>Hs("i",{class:"fas fa-trash-can"},null,-1)))],jO={class:"text-warning",style:{"margin-top":"0.5rem","margin-left":"1rem"}},LO={key:2,class:"mt-3",style:{"margin-bottom":"-0.5rem",display:"inline"}},RO={style:{"text-align":"center"}},DO={key:0},FO=["title"],qO=[rO((()=>Hs("i",{class:"fa-solid fa-file-arrow-down"},null,-1)))],zO=["title"],BO=[rO((()=>Hs("i",{class:"fa-solid fa-file-arrow-up"},null,-1)))],VO=["title"],HO=[rO((()=>Hs("i",{class:"fas fa-print"},null,-1)))],GO={key:0,class:"col-sm mt-1"},WO={class:"alert alert-warning"},KO={key:1,class:"col-sm mt-1"},JO={class:"alert alert-secondary sm-1 text-center",style:{width:"40%",margin:"auto","margin-top":"5vh","margin-bottom":"5vh"}},YO={class:"alert-heading"},ZO={class:"mb-0"},XO={key:0,class:"dashboard-component-title modal-header"},QO={class:"modal-title"},eM={style:{color:"gray"}},tM={key:0,class:"modal-close"},aM=["data-component-id"],lM={key:0,style:{color:"lightgray","font-size":"12px"}};var nM={__name:"dashboard",props:{context:Object},setup(e){const t=e,a=e=>i18n(e),l=b.get_timeframes_dict(),n={badge:nO,empty:YI,pie:sO,timeseries:oO,table:XI,sankey:iO},s=ma(!0),o=t.context.show_loading||!1,i=t.context.allow_edit||!1,r=ma(null),c=ma(null),u=ma(null),d=ma(null),_=ma(null),p=ma(null),f=ma(null),v=ma([]),m=ma(!1),h=ma({}),g=ma({}),w=ma({}),k=ma([]),$=ma([]),S=ma([]),C=ma({}),A=ma("");let E={},T=!1,P=!1;const U=ma(!1);let I=null;const O=ma(null),M=ko((()=>"report"==t.context.page&&!P)),j=ko((()=>"vs-report"==t.context.page)),L=ko((()=>!0)),R=ko((()=>1==C.value?.toolbox?.time?.hide)),D=ko((()=>1==C.value.is_open_report||R.value)),F=ko((()=>1==C.value.is_open_report||"vs-report"==t.context.page)),q=ko((()=>{let e="";return C.value.is_open_report?e=`Report: ${C.value.value}`:t.context.title&&(e=t.context.title),e})),z=ko((()=>e=>null==e.params.custom_style||P&&!e.params.custom_print_style?e.params.custom_print_style&&1==P?e.params.custom_print_style:"":e.params.custom_style)),B=ko((()=>e=>ge(e.epoch_begin,e.epoch_end)));async function V(e){let a=null;P="true"==x.get_url_entry("printable"),"report"!=t.context.page&&"vs-report"!=t.context.page||("report"==t.context.page?a=b.check_and_set_default_time_interval(void 0,void 0,!0,"min"):"vs-report"==t.context.page&&(a=b.check_and_set_default_time_interval(void 0,void 0,!0)),f.value=a),await async function(e){const a=t.context.template_list_endpoint;let l=await b.http_request(a);if(null==l?.list)return;let n=l.list.map((e=>({value:e.name,label:e.label,disabled:!1,toolbox:e.toolbox,is_open_report:!1,allow_edit:e.allow_edit})));n.sort(((e,t)=>e.label.toUpperCase().localeCompare(t.label.toUpperCase()))),S.value=n;const s=e||x.get_url_entry("report_template")||t.context.template;t.context.template=s,C.value=S.value.find((e=>e.value==s)),null==C.value&&(C.value=S.value[0]);!C.value.allow_edit&&U.value&&Ae()}(e);let l=x.get_url_entry("report_name");null!=l&&""!=l?await de(l):await Z(a,C.value.value),1==P&&be(),m.value=!0}function G(e,t){t&&(t+=";eq"),x.set_key_to_url(e,t),v.value.forEach(((a,l)=>{!function(e,t,a){e.filters[t]=a}(a,e,t)}))}function W(e){e&&(f.value=e),v.value.forEach(((t,a)=>{X(t,e)}))}function K(){for(const[e,t]of Object.entries(g.value))G(e,t[0].value),h.value[e]=t[0],Q(e)}async function Y(e,a){const l=[];return a||(a=await b.http_request(`${t.context.report_filters_endpoint}`)),e.forEach((async e=>{const t=e?.name||"",n=a.find((e=>e.id==t))?.options;if(n&&n.length>1){let s=i18n("db_search.all."+t);OS.isEmptyOrNull(s)&&(s=i18n("all")+" "+i18n("db_search."+t)),n.unshift({value:null,label:s}),g.value[t]=n,h.value[t]=n[0],w.value[t]=n,l.push(t);const o=e?.nested||[];o.length>0&&($.value[t]=await Y(o,a))}})),l}async function Z(e,a){T=!1;let l=`${t.context.template_endpoint}?template=${a}`,s=await b.http_request(l);v.value=s.list.filter((e=>null!=n[e.component])).map(((t,a)=>{let l={filters:{},...t};return X(l,e),l})),K(),k.value=await Y(s.filters),await Ya()}function X(e,t){const a=l[e.time_window||"5_min"];if(null==t){const e=b.get_utc_seconds();t={epoch_begin:e-a,epoch_end:e}}const n=l[e.time_offset]||0;e.epoch_begin=t.epoch_begin-n,e.epoch_end=t.epoch_end-n}function Q(e){const t=$.value[e];t?.forEach((e=>{if(k.value.includes(e)){k.value=k.value.filter((t=>t!=e));const t=g.value[e][0];h.value[e]=t,G(e,t.value)}}))}function ee(e,t){const a=$.value[e];a?.forEach((a=>{const l=g.value[a],n=[];if(t==e){const e=g.value[a][0];h.value[a]=e,G(a,e.value)}if(l?.forEach((t=>{t.show_only_value!==h.value[e].value&&null!=t.value||n.push(t)})),!k.value.includes(a)){const t=k.value.indexOf(e);k.value.splice(t+1,0,a)}n.length>0?w.value[a]=n:delete w.value[a]}))}function te(){if(!C.value.allow_edit&&U.value&&Ae(),1==P&&be(),1==C.value.is_open_report)return;E={},_e();const e=y.get_status(!0);let a={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end};1==T&&(a=b.set_default_time_interval(void 0,"min"),N.emit_event(ntopng_events.EPOCH_CHANGE,a,t.context.page)),Z(a,C.value.value)}function le(){c.value.show()}function ne(){u.value.show()}function se(){d.value.show()}function oe(){let e="report";return"vs-report"==t.context.page?e=t.context.title:f.value&&f.value.epoch_end&&(e+="-"+b.from_utc_to_server_date_format(1e3*f.value.epoch_end,"DD-MM-YYYY")),e}_n((async()=>{V()})),pn((async()=>{"dashboard"==t.context.page&&setInterval((()=>{W()}),1e4)}));const ie=async e=>{let t=JSON.parse(e);re(t,t.name),x.delete_key_from_url("report_name")};function re(e,a){_e(a);const l={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end};N.emit_event(ntopng_events.EPOCH_CHANGE,l,t.context.page),ue(e)}const ce=async()=>{let e=`${t.context.report_list_endpoint}?ifid=${t.context.ifid}`,a=await b.http_request(e);return b.object_to_array(a)},ue=async e=>{let t={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end},a=e.template,l=e.data,n={};for(let e in l){let t={data:l[e]};n[e]=t}T=!0,E=n,v.value=a,W(t)},de=async e=>{let l=`${t.context.report_open_endpoint}?ifid=${t.context.ifid}&report_name=${e}`,n=await b.http_request(l);n?(re(n,e),A.value=""):A.value=a("report.unable_to_open")};function _e(e){if(S.value=S.value.filter((e=>0==e.is_open_report)),null==e)return x.set_key_to_url("report_template",C.value.value),t.context.template=C.value.value,void x.delete_key_from_url("report_name");let l={value:e,label:a("dashboard.custom"),disabled:!1,toolbox:null,is_open_report:!0,allow_edit:!1};S.value.push(l),C.value=l,t.context.template=e,x.set_key_to_url("report_name",C.value.value),x.delete_key_from_url("report_template")}const pe=async e=>{let a=!1,l={csrf:t.context.csrf,ifid:t.context.ifid,report_name:e},n=`${t.context.report_delete_endpoint}`;try{let e={"Content-Type":"application/json"};await b.http_request(n,{method:"post",headers:e,body:JSON.stringify(l)}),a=!0}catch(e){console.error(e)}return a},fe=async e=>{let t={};for(var a in E)t[a]=await E[a].data;let l={version:"1.0",name:e,template:v.value,data:t};return f.value&&f.value.epoch_begin&&f.value.epoch_end&&(l.epoch_begin=f.value.epoch_begin,l.epoch_end=f.value.epoch_end),JSON.stringify(l)},ve=async e=>{let a=!1,l={csrf:t.context.csrf,ifid:t.context.ifid,report_name:e,content:await fe(e)},n=`${t.context.report_store_endpoint}`;try{let e={"Content-Type":"application/json"};await b.http_request(n,{method:"post",headers:e,body:JSON.stringify(l)}),a=!0}catch(e){console.error(e)}return a};async function me(){var e=oe(),t=e+".json",a=await fe(e),l=document.createElement("a");l.setAttribute("href","data:text/plain;charset=utf-8,"+encodeURIComponent(a)),l.setAttribute("download",t),l.style.display="none",document.body.appendChild(l),l.click(),document.body.removeChild(l)}function he(){if(1==P)return window.print(),!1;let e=x.get_url_object();e.printable=!0;const t=x.obj_to_url_params(e);let a=`${window.location.origin}${window.location.pathname}?${t}`;x.open_new_window(a)}function ge(e,t){if(1==R.value)return"";const a=1e3*e,l=1e3*t,n=b.from_utc_to_server_date_format(a,"DD/MM/YYYY"),s=b.from_utc_to_server_date_format(a,"HH:mm:ss"),o=b.from_utc_to_server_date_format(l,"DD/MM/YYYY"),i=b.from_utc_to_server_date_format(l,"HH:mm:ss");return`${`${n} ${s}`} - ${n==o?`${i}`:`${o} ${i}`}`}function be(){const e=y.get_status(!0),t=ge(e.epoch_begin,e.epoch_end);let a=`ntopng - Report ${C.value.label} ${t}`;document.title=a}function ye(e){return async(t,a)=>{e[t]=a}}function we(){O.value.show()}function xe(){return"New Template"}const ke=async e=>{let a=!1,l={csrf:t.context.csrf,template_name:e},n=`${t.context.template_add_endpoint}`;try{let e={"Content-Type":"application/json"},t=await b.http_request(n,{method:"post",headers:e,body:JSON.stringify(l)});t&&t.template_id&&await V(t.template_id),a=!0}catch(e){console.error(e)}return a};async function $e(e){let a=v.value.map((e=>e.id)),l={csrf:t.context.csrf,template:C.value.value,components:a.toString()},n=!1,s=`${t.context.template_edit_endpoint}`;try{let e={"Content-Type":"application/json"};await b.http_request(s,{method:"post",headers:e,body:JSON.stringify(l)});n=!0}catch(e){console.error(e)}return n}async function Se(e){let t=I.toArray().map((e=>v.value.find((t=>t.id==e))));Ne(),v.value=t,await Ya(),Ce(),$e()}function Ce(){if(!I){var e=document.getElementById("drag-zone");I=window.Sortable.create(e,{draggable:".drag-item",dataIdAttr:"id",onUpdate:Se})}}function Ne(){I&&(I.destroy(),I=null)}function Ae(){U.value=!U.value,U.value?Ce():Ne()}const Ee=async()=>{let e=`${t.context.template_list_widgets_endpoint}`,l=await b.http_request(e);if(null==l?.list)return{};let n=l.list;return n.sort(((e,t)=>a(e.i18n_name).toUpperCase().localeCompare(a(t.i18n_name).toUpperCase()))),n};function Te(){_.value.show()}function Pe(){p.value.show()}const Ue=async e=>{Ne();let l=`${t.context.template_component_add_endpoint}`,n={csrf:t.context.csrf,template:t.context.template,component:e.id},s={"Content-Type":"application/json"};try{await b.http_request(l,{method:"post",headers:s,body:JSON.stringify(n)});A.value="",await V(C.value.value)}catch(e){A.value=a("report.unable_to_open")}await Ya(),Ce()};async function Ie(e){Ne();const t=e.target.dataset.componentId;v.value=v.value.filter((e=>e.id!==t)),await Ya(),Ce(),$e()}async function Oe(){let e=!1,a={csrf:t.context.csrf,template:C.value.value},l=`${t.context.template_delete_endpoint}`;try{let t={"Content-Type":"application/json"};await b.http_request(l,{method:"post",headers:t,body:JSON.stringify(a)});await V(),e=!0}catch(e){console.error(e)}return e}return(t,l)=>(Us(),Ls(Cs,null,[Hs("div",cO,[Zs(' <Dropdown v-for="(t, t_index) in top_table_array" '),Zs('           :ref="el => { top_table_dropdown_array[t_index] = el }"> '),Zs("   <template v-slot:title> "),Zs('     <Spinner :show="t.show_spinner" size="1rem" class="me-1"></Spinner> '),Zs('     <a class="ntopng-truncate" :title="t.title">{{ t.label }}</a> '),Zs("   </template> "),Zs("   <template v-slot:menu> "),Zs('     <a v-for="opt in t.options" style="cursor:pointer; display: block;" '),Zs('        @click="add_top_table_filter(opt, $event)" class="ntopng-truncate tag-filter " '),Zs('        :title="opt.value">{{ opt.label }}</a> '),Zs("   </template>     "),Zs(" </Dropdown> "),M.value?(Us(),Rs(T_,{key:0,class:"dontprint",disabled_date_picker:D.value,id:"dashboard-date-time-picker",round_time:!0,min_time_interval_id:"min",onEpoch_change:W},{begin:hl((()=>[Hs("div",uO,[Gs(n_,{selected_option:C.value,"onUpdate:selected_option":l[0]||(l[0]=e=>C.value=e),options:S.value,onSelect_option:te},null,8,["selected_option","options"])])])),extra_buttons:hl((()=>[Hs("button",{class:"btn btn-link btn-sm",type:"button",onClick:le,title:a("dashboard.store")},_O,8,dO),Hs("button",{class:"btn btn-link btn-sm",type:"button",onClick:ne,title:a("dashboard.open")},fO,8,pO),Hs("button",{class:"btn btn-link btn-sm",type:"button",onClick:me,title:a("download")},mO,8,vO),Hs("button",{class:"btn btn-link btn-sm",type:"button",onClick:se,title:a("upload")},gO,8,hO),Hs("button",{class:"btn btn-link btn-sm",type:"button",onClick:he,title:a("dashboard.print")},yO,8,bO),wa(i)?(Us(),Ls("button",{key:0,class:"btn btn-link btn-sm",type:"button",onClick:we,title:a("dashboard.new_template")},xO,8,wO)):Zs("v-if",!0),wa(i)&&C.value.allow_edit?(Us(),Ls("button",{key:1,class:J(["btn btn-link btn-sm",U.value?"text-warning":""]),type:"button",onClick:Ae,title:a("dashboard.edit_mode")},$O,10,kO)):Zs("v-if",!0)])),_:1},8,["disabled_date_picker"])):Zs("v-if",!0),Zs(" Filters "),Hs("div",SO,[(Us(!0),Ls(Cs,null,Tn(k.value,(e=>(Us(),Ls("div",CO,[Hs("label",NO,[Hs("b",null,ae(a("db_search."+e)),1)]),Gs(n_,{selected_option:h.value[e],"onUpdate:selected_option":t=>h.value[e]=t,options:w.value[e],style:"width: 50%;",onSelect_option:t=>function(e,t){G(t,e.value);for(const[e,a]of Object.entries(g.value)){const a=h.value[e];a?.value?ee(e,t):Q(e)}}(h.value[e],e)},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256)),Object.keys(k.value).length>0?(Us(),Ls("div",AO,[Hs("div",EO,[TO,Hs("button",{type:"button",class:"btn btn-sm btn-primary",onClick:K},ae(a("reset")),1)])])):Zs("v-if",!0)]),Zs(" Template Editor Toolbox "),U.value?(Us(),Ls("div",PO,[Hs("button",{class:"btn btn-lg btn-link text-warning",type:"button",onClick:Te,title:a("dashboard.add_component")},IO,8,UO),Hs("button",{class:"btn btn-lg btn-link text-warning",type:"button",onClick:Pe,title:a("dashboard.del_template")},MO,8,OO),Hs("h2",jO,ae(a("dashboard.edit_mode")),1),Zs('\n            <div style="margin: auto"></div>\n            <h4><span class="badge bg-warning">{{ _i18n(\'dashboard.edit_mode\') }}</span></h4>\n            ')])):Zs("v-if",!0),Zs(" Report Title and small buttons "),F.value?(Us(),Ls("div",LO,[Hs("h3",RO,[Js(ae(q.value)+" ",1),j.value?(Us(),Ls("span",DO,[L.value?(Us(),Ls(Cs,{key:0},[Hs("button",{class:"btn btn-link btn-sm",type:"button",onClick:me,title:a("download")},qO,8,FO),Hs("button",{class:"btn btn-link btn-sm",type:"button",onClick:se,title:a("upload")},BO,8,zO)],64)):Zs("v-if",!0),Hs("button",{class:"btn btn-link btn-sm",type:"button",onClick:he,title:a("dashboard.print")},HO,8,VO)])):Zs("v-if",!0)])])):Zs("v-if",!0),Zs(" Report/Dashboard Content "),(Us(),Ls("div",{ref_key:"report_box",ref:r,id:"drag-zone",class:"row",key:v.value},[Zs(" Warning Message "),A.value?(Us(),Ls("div",GO,[Hs("div",WO,ae(A.value),1)])):Zs("v-if",!0),Zs(" Empty template message "),!m.value||v.value.length||U.value?Zs("v-if",!0):(Us(),Ls("div",KO,[Hs("div",JO,[Hs("h4",YO,ae(a("dashboard.empty_template")),1),Hs("p",ZO,ae(a("dashboard.empty_template_note")),1)])])),Zs(" Rendered Components "),(Us(!0),Ls(Cs,null,Tn(v.value,(t=>(Us(),Rs(JI,{style:{"min-width":"20rem"},color:t.active&&t.color||t.inactive_color,width:t.width,height:t.height,id:t.id,class:"drag-item"},{box_title:hl((()=>[t.i18n_name?(Us(),Ls("div",XO,[Hs("h4",QO,[Js(ae(a(t.i18n_name))+" ",1),Hs("span",eM,ae(t.time_offset?a("dashboard.time_ago."+t.time_offset):""),1)]),U.value?(Us(),Ls("div",tM,[Hs("button",{type:"button",class:"btn-close","data-component-id":t.id,onClick:Ie},null,8,aM)])):Zs("v-if",!0)])):Zs("v-if",!0)])),box_content:hl((()=>{return[s.value&&wa(o)?(Us(),Rs(wf,{key:0,styles:"margin-top: 2rem !important;"})):Zs("v-if",!0),Hs("div",{class:J([s.value&&wa(o)?"ntopng-gray-out":""])},[(Us(),Rs(Cn(n[t.component]),{id:t.id,style:H(z.value(t)),epoch_begin:t.epoch_begin,epoch_end:t.epoch_end,i18n_title:t.i18n_name,ifid:t.ifid?t.ifid.toString():e.context.ifid.toString(),max_width:t.width,max_height:t.height,params:t.params,get_component_data:(a=t,async(e,t,l)=>{let n={};if(T)E[a.id]?n=E[a.id]:(console.error("No data for "+a.id),n.data={});else{E[a.id]&&(n=E[a.id],n.data&&await n.data);const o=`${e}?${t}`;s.value=!0,n.data=l?b.http_post_request(o,l):b.http_request(o),n.data.then((()=>{s.value=!1})),E[a.id]=n}return n.data}),set_component_attr:ye(t),csrf:e.context.csrf,filters:t.filters},null,8,["id","style","epoch_begin","epoch_end","i18n_title","ifid","max_width","max_height","params","get_component_data","set_component_attr","csrf","filters"]))],2)];var a})),box_footer:hl((()=>["empty"!=t.component&&t.i18n_name&&!R.value?(Us(),Ls("span",lM,ae(B.value(t)),1)):Zs("v-if",!0)])),_:2},1032,["color","width","height","id"])))),256))]))]),Zs(" div row "),Gs(kI,{ref_key:"modal_store_report",ref:c,get_suggested_file_name:oe,store_file:ve,csrf:e.context.csrf,title:a("dashboard.store")},null,8,["csrf","title"]),Gs(OI,{ref_key:"modal_open_report",ref:u,list_files:ce,open_file:de,delete_file:pe,csrf:e.context.csrf,title:a("dashboard.open"),file_title:a("report.report_name")},null,8,["csrf","title","file_title"]),Gs(qI,{ref_key:"modal_upload_report",ref:d,upload_file:ie,title:a("upload"),file_title:a("report.file")},null,8,["title","file_title"]),Gs(kI,{ref_key:"modal_new_template",ref:O,get_suggested_file_name:xe,store_file:ke,allow_spaces:!0,csrf:e.context.csrf,title:a("dashboard.new_template")},null,8,["csrf","title"]),Gs(WI,{ref_key:"modal_add_template_component",ref:_,list_components:Ee,add_component:Ue,csrf:e.context.csrf,title:a("dashboard.add_component")},null,8,["csrf","title"]),Gs(zw,{ref_key:"modal_delete_template",ref:p,title:a("dashboard.del_template"),body:a("dashboard.del_template_confirm"),onDelete:Oe},null,8,["title","body"])],64))}};np("\n@media print {\n.dontprint[data-v-c360f212] {\n        display: none;\n}\n.pagebreak-begin[data-v-c360f212] {\n        page-break-before: always;\n}\n.pagebreak-end[data-v-c360f212] {\n        page-break-after: always !important;\n}\n.print-element-class[data-v-c360f212] {\n        page-break-inside: avoid !important;\n        page-break-after: auto\n}\n}\n\n/* @media print and (orientation: portrait) and (max-width: 297mm){ */\n/*     .col-4 { */\n/*         width: 50% !important; */\n/*         flex: 0 0 auto; */\n/*     } */\n/* } */\n@page {\n    /* size: A3 landscape; */\n    /* position:absolute; width:100%; top:0;left:0;right:0;bottom:0; padding:0; margin:-1px; */\n}\n\n/* Print on A4 */\n@media print and (max-width: 297mm) and (min-width: 210mm) {\n\n    /* .row { */\n    /*         padding-left: 0; */\n    /*         padding-right: 0; */\n    /*         margin-left: -10rem; */\n    /*         margin-right: 0; */\n    /* } */\n.col-4[data-v-c360f212] {\n        width: 50% !important;\n        flex: 0 0 auto;\n}\n}\n\n/* Print on A5 (commented out as this is not working on Chrome/Safari) */\n\n/* @media print and (max-width: 148mm){ */\n/*     .col-4 { */\n/*         width: 100% !important; */\n/*         flex: 0 0 auto; */\n/*     } */\n/*     .col-6 { */\n/*         width: 100% !important; */\n/*         flex: 0 0 auto; */\n/*     } */\n/* } */\n.align-center[data-v-c360f212] {}\n"),nM.__scopeId="data-v-c360f212",nM.__file="http_src/vue/dashboard.vue";const sM=e=>(fl("data-v-7e5acce0"),e=e(),vl(),e),oM={class:"mb-3 row"},iM={class:"col-form-label col-sm-4"},rM={class:"col-sm-6"},cM={class:"btn-group btn-group-toggle","data-bs-toggle":"buttons"},uM=sM((()=>Hs("hr",null,null,-1))),dM={class:"host-alert-fields"},_M={class:"mb-3 row"},pM={class:"col-form-label col-sm-4"},fM={class:"col-sm-6"},vM={value:""},mM={value:"0"},hM={disabled:""},gM=["value"],bM={class:"flow-alert-fields"},yM={class:"mb-3 row"},wM={class:"col-form-label col-sm-4"},xM={class:"col-sm-6"},kM={value:""},$M={value:"0"},SM={disabled:""},CM=["value"],NM={key:0,class:"ip-fields"},AM={class:"mb-3 row"},EM={class:"col-form-label col-sm-4"},TM={class:"col-sm-6"},PM=["pattern"],UM={key:1,class:"network-fields"},IM={class:"mb-3 row"},OM={class:"col-form-label col-sm-4"},MM={class:"col-sm-4 pr-0"},jM=["pattern"],LM={class:"col-sm-2 ps-4 pe-0"},RM=sM((()=>Hs("span",{class:"me-2"},"/",-1))),DM={class:"mb-3 row"},FM={class:"col-form-label col-sm-4"},qM={class:"col-sm-6"},zM={class:"mb-3 row"},BM={class:"col-form-label col-sm-4"},VM={key:0},HM={key:1},GM={class:"col-sm-6"},WM=["pattern"],KM=["pattern"],JM=sM((()=>Hs("hr",{class:"separator mt-5"},null,-1))),YM={class:"form-group row"},ZM={class:"col-form-label"},XM={class:"mt-1"},QM=["placeholder"],ej=["disabled"];var tj={__name:"modal-add-check-exclusion",props:{alert_exclusions_page:String,host_alert_types:Array,flow_alert_types:Array},emits:["add"],setup(e,{expose:t,emit:a}){const l=e,n=ma(null);ma(null);const s=ma("ip"),o=ma(""),i=ma(""),r=ma(0),c=ma(""),u=ma(""),d=ma(""),_=ma(""),p=ma(null),f=i18n("details.comment_placeholder"),v=ma(null),m=ma(null);function h(e){if("text"==e)return NtopUtils.REGEXES.non_quoted_text;if("ip"==e){let e=NtopUtils.REGEXES.ipv4,t=e.replaceAll("$","@[0-9]{0,5}$"),a=NtopUtils.REGEXES.ipv6,l=a.replaceAll("$","@[0-9]{0,5}$");return`(${e})|(${t})|(${a})|(${l})`}return"hostname"==e?`${NtopUtils.REGEXES.singleword}|[a-zA-Z0-9._-]{3,250}@[0-9]{0,5}$`:"certificate"==e?NtopUtils.REGEXES.tls_certificate:NtopUtils.REGEXES[e]}let g=h("ip"),b=h("text"),y=h("certificate");const w=e=>{s.value=e},x=()=>{let e=null,t=!0;return"hosts"==l.alert_exclusions_page?(e=new RegExp(g),t="ip"==s.value?null==o.value||""==o.value||0==e.test(o.value)||""==u.value&&""==d.value:null==i.value||""==i.value||0==e.test(i.value)||""==u.value&&""==d.value||null==_.value||""==_.value||parseInt(_.value)<1||parseInt(_.value)>127):"domain_names"==l.alert_exclusions_page?(e=new RegExp(b),t=null==c.value||""==c.value||0==e.test(c.value)):"tls_certificate"==l.alert_exclusions_page&&(e=new RegExp(y),t=null==c.value||""==c.value||0==e.test(c.value)),t},k=()=>{n.value.close()},$=e=>""==e?-1:e,S=()=>{let e,t=o.value;"hosts"==l.alert_exclusions_page?("network"==s.value&&(t=`${i.value}/${_.value}`),null!=r.value&&0!=r.value&&(t=`${t}@${r.value}`),e={alert_addr:t,host_alert_key:$(u.value),flow_alert_key:$(d.value)}):"domain_names"==l.alert_exclusions_page?e={alert_domain:c.value}:"tls_certificate"==l.alert_exclusions_page&&(e={alert_certificate:c.value}),e.label=p.value,v.value&&(e.old_type=m.value.type,e.old_subdir=m.value.subdir,e.old_alert_domain=m.value.alert_domain,e.old_alert_certificate=m.value.alert_certificate,e.old_alert_addr=m.value.alert_addr,e.old_flow_alert_key=m.value.flow_alert_key,e.old_host_alert_key=m.value.host_alert_key),a("add",e),k()};t({show:e=>{if(e)if(v.value=!0,m.value=e,p.value=e.label,"host"==e.type){let t=e.alert_addr.split("/"),a=e.alert_addr.split("@");t.length>1?(s.value="network",i.value=t[0],_.value=t[1],o.value=""):(s.value="ip",o.value=a[0],i.value="",_.value=""),a.length>1?r.value=a[1]:r.value=0,null!=e.host_alert_key?u.value=""+e.host_alert_key:u.value="",null!=e.flow_alert_key?d.value=""+e.flow_alert_key:d.value=""}else"domain"==e.type?c.value=e.alert_domain:c.value=e.alert_certificate;else s.value="ip",o.value="",i.value="",r.value=0,u.value="",d.value="",_.value="",c.value="",p.value="";n.value.show()},close:k}),pn((()=>{}));const C=e=>i18n(e);return(t,a)=>(Us(),Rs(sp,{onShowed:a[11]||(a[11]=e=>{}),ref_key:"modal_id",ref:n},{title:hl((()=>[Js(ae(C("check_exclusion.add_exclusion")),1)])),body:hl((()=>["hosts"==e.alert_exclusions_page?(Us(),Ls(Cs,{key:0},[Zs(" modal hosts "),Hs("div",oM,[Hs("label",iM,[Hs("b",null,ae(C("check_exclusion.member_type")),1)]),Hs("div",rM,[Hs("div",cM,[Hs("label",{class:J([{active:"ip"==s.value},"btn btn-secondary"])},[Hs("input",{class:"btn-check",type:"radio",name:"member_type",value:"ip",onClick:a[0]||(a[0]=e=>w("ip"))}),Js(" "+ae(C("check_exclusion.ip_address")),1)],2),Hs("label",{class:J([{active:"network"==s.value},"btn btn-secondary"])},[Hs("input",{onClick:a[1]||(a[1]=e=>w("network")),class:"btn-check",type:"radio",name:"member_type",value:"network"}),Js(" "+ae(C("check_exclusion.network")),1)],2)])])]),uM,Hs("div",dM,[Hs("div",_M,[Hs("label",pM,[Hs("b",null,ae(C("check_exclusion.host_alert_type")),1)]),Hs("div",fM,[xn(Hs("select",{name:"value",class:"form-select alert-select","onUpdate:modelValue":a[2]||(a[2]=e=>u.value=e)},[Hs("option",vM,ae(C("check_exclusion.none")),1),Hs("option",mM,ae(C("check_exclusion.exclude_all_alerts")),1),Hs("option",hM,ae(C("check_exclusion.spacing_bar")),1),(Us(!0),Ls(Cs,null,Tn(e.host_alert_types,(e=>(Us(),Ls(Cs,null,[null!=e?(Us(),Ls("option",{key:0,value:e.alert_id},ae(e.label),9,gM)):Zs("v-if",!0)],64)))),256))],512),[[Fi,u.value]])])])]),Hs("div",bM,[Hs("div",yM,[Hs("label",wM,[Hs("b",null,ae(C("check_exclusion.flow_alert_type")),1)]),Hs("div",xM,[xn(Hs("select",{id:"flow-alert-select",name:"value",class:"form-select alert-select","onUpdate:modelValue":a[3]||(a[3]=e=>d.value=e)},[Hs("option",kM,ae(C("check_exclusion.none")),1),Hs("option",$M,ae(C("check_exclusion.exclude_all_alerts")),1),Hs("option",SM,ae(C("check_exclusion.spacing_bar")),1),(Us(!0),Ls(Cs,null,Tn(e.flow_alert_types,(e=>(Us(),Ls(Cs,null,[null!=e?(Us(),Ls("option",{key:0,value:e.alert_id},ae(e.label),9,CM)):Zs("v-if",!0)],64)))),256))],512),[[Fi,d.value]])])])]),"ip"==s.value?(Us(),Ls("div",NM,[Hs("div",AM,[Hs("label",EM,[Hs("b",null,ae(C("check_exclusion.ip_address")),1)]),Hs("div",TM,[xn(Hs("input",{pattern:wa(g),placeholder:"192.168.1.1",required:"",type:"text",name:"ip_address",class:"form-control","onUpdate:modelValue":a[4]||(a[4]=e=>o.value=e)},null,8,PM),[[ji,o.value]])])])])):Zs("v-if",!0),"network"==s.value?(Us(),Ls("div",UM,[Hs("div",IM,[Hs("label",OM,[Hs("b",null,ae(C("check_exclusion.network")),1)]),Hs("div",MM,[xn(Hs("input",{required:"",style:{width:"calc(100% - 10px)"},name:"network",class:"form-control d-inline",placeholder:"172.16.0.0",pattern:wa(g),"onUpdate:modelValue":a[5]||(a[5]=e=>i.value=e)},null,8,jM),[[ji,i.value]])]),Hs("div",LM,[RM,xn(Hs("input",{placeholder:"24",required:"",class:"form-control d-inline w-75",min:"1",max:"127",type:"number",name:"cidr","onUpdate:modelValue":a[6]||(a[6]=e=>_.value=e)},null,512),[[ji,_.value]])])])])):Zs("v-if",!0),Hs("div",DM,[Hs("label",FM,[Hs("b",null,ae(C("vlan")),1)]),Hs("div",qM,[xn(Hs("input",{placeholder:"0",min:"0",type:"number","onUpdate:modelValue":a[7]||(a[7]=e=>r.value=e),class:"form-control"},null,512),[[ji,r.value]])])])],64)):Zs("v-if",!0),Zs(" mdoal hosts "),"hosts"!=e.alert_exclusions_page?(Us(),Ls(Cs,{key:1},[Zs(" modal domain_names"),Hs("div",null,[Hs("div",zM,[Hs("label",BM,["domain_names"==e.alert_exclusions_page?(Us(),Ls("b",VM,ae(C("check_exclusion.domain")),1)):Zs("v-if",!0),"tls_certificate"==e.alert_exclusions_page?(Us(),Ls("b",HM,ae(C("check_exclusion.tls_certificate")),1)):Zs("v-if",!0)]),Hs("div",GM,["domain_names"==e.alert_exclusions_page?xn((Us(),Ls("input",{key:0,placeholder:"",pattern:wa(b),required:"",type:"text",name:"ip_address",class:"form-control","onUpdate:modelValue":a[8]||(a[8]=e=>c.value=e)},null,8,WM)),[[ji,c.value]]):Zs("v-if",!0),"tls_certificate"==e.alert_exclusions_page?xn((Us(),Ls("input",{key:1,placeholder:"CN=813845657003339838, O=Code42, OU=TEST, ST=MN, C=U",pattern:wa(y),required:"",type:"text",name:"ip_address",class:"form-control","onUpdate:modelValue":a[9]||(a[9]=e=>c.value=e)},null,8,KM)),[[ji,c.value]]):Zs("v-if",!0)])])])],64)):Zs("v-if",!0),Zs(" modal comment"),JM,Hs("div",YM,[Hs("div",null,[Hs("label",ZM,[Hs("b",null,ae(C("show_alerts.add_a_comment")),1)])]),Hs("div",XM,[xn(Hs("textarea",{placeholder:wa(f),id:"alert-label",name:"label",rows:"3",class:"form-control",type:"text","onUpdate:modelValue":a[10]||(a[10]=e=>p.value=e),maxlength:"450"},null,8,QM),[[ji,p.value]])])])])),footer:hl((()=>[Hs("button",{type:"button",disabled:x(),onClick:S,class:"btn btn-primary"},ae(C("add")),9,ej)])),_:1},512))}};np("\ninput[data-v-7e5acce0]:invalid {\n  border-color: #ff0000;\n}  \n"),tj.__scopeId="data-v-7e5acce0",tj.__file="http_src/vue/modal-add-check-exclusion.vue";let aj={PageAlertStats:Jh,PageFlowHistorical:Cg,PageStats:jw,PageAssetTable:Vw,PagePeriodicityTable:lx,PageServiceTable:yx,PageServiceMap:Rx,PagePeriodicityMap:nk,PageAssetMap:$k,PageDeviceExclusions:w$,PageHostTLS:x$,PageHostSSH:T$,PageHomeMap:R$,PageSankey:q$,PageHostRules:FC,PageAlertAnalysis:rN,PageHostMap:yN,PageManageConfigurationBackup:uE,PageSNMPDeviceRules:tT,PageHostsPortsAnalysis:bT,PageInactiveHosts:uP,PageInactiveHostDetails:vP,PageVulnerabilityScan:BU,PageHostVsResult:JU,PageOpenPorts:tI,PageVulnerabilityScanReport:mI,PageEditApplications:KA,PageVLANPortsFlowSankey:IN,PageTestTable:HN,PageSnmpDevicesInterfacesSimilarity:aT,NedgeRulesConfig:UA,NedgeRepeatersConfig:zT,PageHostDetailsApplications:B$,PageHostDetailsTraffic:rS,PageHostDetailsPackets:hS,PageHostDetailsFlowSankey:IS,PageHostDetailsPorts:JC,PageAggregatedLiveFlows:BN,PageNetworkDiscovery:nE,PageFlowDeviceDetails:hP,PageFlowDeviceInterfaceDetails:PP,AlertInfo:C_,Chart:A_,TimeseriesChart:Ng,Datatable:ow,DateTimeRangePicker:T_,NetworkMap:Mx,RangePicker:Kp,PageNavbar:s_,SelectSearch:n_,TabList:Lw,Sankey:wS,NoteList:_v,Loading:wf,Dashboard:nM,DashboardBox:JI,DashboardEmpty:YI,DashboardTable:XI,DashboardBadge:nO,DashboardPie:sO,DashboardTimeseries:oO,DashboardSankey:iO,ListTimeseries:Xg,Modal:sp,ModalAddCheckExclusion:tj,ModalAlertsFilter:Rm,ModalFilters:xp,ModalTimeseries:Yy,ModalTrafficExtraction:pv,ModalDeleteConfirm:zw,ModalSnapshot:sm,ModalAddDeviceExclusion:Zk,ModalEditDeviceExclusion:c$,ModalAddHostRules:PC,ModalAddApplication:HA,ModalDeleteApplication:GA,ModalEditReport:uI,Vue:Md};window.ntopVue=aj;var lj=["html","clone","append","<div />",'<div><hr><div style="margin-left: auto;margin-right: auto;padding-left: var(--bs-gutter-x,.75rem);padding-right: var(--bs-gutter-x,.75rem);width: 100%;"><div class="row mt-2"><div class="col-12 col-md-4 pl-md-0 text-center text-md-start"><span style="font-size: .875em;"><a href="https://www.ntop.org/products/traffic-analysis/ntop/" target="_blank" id="footer-ntop-version"></a> | <span id="footer-ntop-github"></span></span></div><div class="col-12 col-md-4 text-center"><span style="font-size: .875em;" id="footer-ntop-age"></span></div><div class="col-12 col-md-4 text-center text-md-end pr-md-0"><span style="font-size: .875em;"><i class="fas fa-clock" title="Server Time"></i> <div class="d-inline-block" id="footer-network-clock"></div> UTC | Uptime: <div class="d-inline-block" id="footer-network-uptime"></div></span></div></div></div></div>',"ntopng_release_info","|","split","#footer-ntop-version","#footer-ntop-github","© 1998-","ntop_age_to"," - ntop","#footer-ntop-age","body div main","parent","#footer-network-clock","","#footer-network-uptime","remove","localtime","uptime","chart_colors","on_custom_event","ready"];function nj(){const e=e=>$(lj[3])[lj[2]]($(e)[lj[1]]())[lj[0]]();let t=lj[4];const a=(()=>{let a=$(t),l=i18n(lj[5])[lj[7]](lj[6]);$(lj[8],a)[lj[0]](l[0]),$(lj[9],a)[lj[0]](l[1]);let n=`${lj[10]}${i18n(lj[11])}${lj[12]}`;return $(lj[13],a)[lj[0]](n),e(a)})(),l=()=>{$(lj[14])[lj[2]](a)};l();const n=()=>$(lj[16])[lj[15]]()[lj[15]]()[lj[15]]()[lj[15]]()[lj[15]]();ntopng_events_manager[lj[23]](lj[22],ntopng_custom_events.GET_INTERFACE_DATA,(t=>{0==(()=>{let t=n();if(null==t)return!1;let l=t[lj[1]]();$(lj[16],l)[lj[0]](lj[17]),$(lj[18],l)[lj[0]](lj[17]);const s=e(l);return a===s})()&&((()=>{let e=n();null!=e&&e[lj[19]]()})(),l()),(e=>{$(lj[16])[lj[0]](e[lj[20]]),$(lj[18])[lj[0]](e[lj[21]])})(t)}))}$(document)[lj[24]]((()=>nj()))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
