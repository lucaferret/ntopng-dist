!function(){"use strict";Date.prototype.format=function(e){var t={"M+":this.getMonth()+1,"d+":this.getDate(),"h+":this.getHours(),"m+":this.getMinutes(),"s+":this.getSeconds(),"q+":Math.floor((this.getMonth()+3)/3),S:this.getMilliseconds()};for(var a in/(y+)/.test(e)&&(e=e.replace(RegExp.$1,(this.getFullYear()+"").substr(4-RegExp.$1.length))),t)new RegExp("("+a+")").test(e)&&(e=e.replace(RegExp.$1,1==RegExp.$1.length?t[a]:("00"+t[a]).substr((""+t[a]).length)));return e},jQuery.fn.extend({disable:function(e){return this.each((function(){var t=$(this);t.is("input, button, textarea, select")?this.disabled=e:t.toggleClass("disabled",e)}))}});const e=.005,t={ipv4:String.raw`^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$`,ipv6:String.raw`^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$|^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*)$`,domainName:String.raw`^([a-zA-Z]([a-zA-Z]|[0-9])?\.[a-zA-Z]{2,13}|[a-zA-Z0-9]([\-_.a-zA-Z0-9]{1,61}[a-zA-Z0-9])?\.[a-zA-Z]{2,13}|[a-zA-Z0-9]([\-_.a-zA-Z0-9]{1,61}[a-zA-Z0-9])?\.[a-zA-Z]{2,30}\.[a-zA-Z]{2,3})$`,port:String.raw`^([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$`,latency:String.raw`^([0-9]*[.])?[0-9]+$`,url:String.raw`^(https?\:\/\/[^\/\s]+(\/.*)?)$`,emailUrl:String.raw`^smtps?:\/\/[\-a-zA-Z0-9:.]{1,256}$`,macAddress:String.raw`^([0-9A-Fa-f]{2}:){5}([0-9A-Fa-f]{2})$`,hostname:String.raw`^(?!\s*$)[a-zA-Z0-9._: \-\/]{1,250}|^[a-zA-Z0-9._: \-\/]{1,250}@[0-9]{0,5}`,username:String.raw`^[a-zA-Z0-9._@!-?]{3,30}$`,singleword:String.raw`^(?=[a-zA-Z0-9._:\-]{3,253}$)(?!.*[_.:\-]{2})[^_.:\-].*[^_.:\-]$`,multiword:String.raw`^([a-zA-Z0-9._:\-\s]{3,253})$`,email:String.raw`^([a-zA-Z0-9.!#$%&'*+\-\/=?^_\`\|~]+@[a-zA-Z0-9\-]+(?:\.[a-zA-Z0-9\-]+)*)$|^[a-zA-Z\d.!#$%&'*+\-\/=?^_\`\|~]{1,128}$`,emailCommaList:String.raw`^((?:[a-zA-Z0-9.!#$%&'*+\-\/=?^_\`\|~]+@[a-zA-Z0-9\-]+(?:\.[a-zA-Z0-9\-]+)*)|([a-zA-Z\d.!#$%&'*+\-\/=?^_\`\|~]{1,128}))(?:,((?:[a-zA-Z0-9.!#$%&'*+\-\/=?^_\`\|~]+@[a-zA-Z0-9\-]+(?:\.[a-zA-Z0-9\-]+)*)|([a-zA-Z\d.!#$%&'*+\-\/=?^_\`\|~]{1,128})))*$`,https:String.raw`^https?:\/\/.+$`,token:String.raw`^[0-9a-f]{32}`,score:String.raw`^[0-9]{1,5}`,telegram_channel:String.raw`^[0-9\-]{1,15}`,password:String.raw`^[\w\/$!\/()=?^*@_-]{5,31}$`,tls_certificate:String.raw`^[^=,]+=[^=,]+(,\s[^=,]+=[^=,]+)*$`,domain_name_not_strict:String.raw`^[a-zA-Z0-9\-_~]+((\.[a-zA-Z0-9\-_~]+)+)$`,non_quoted_text:String.raw`^[a-zA-Z0-9.-_]+$`};class a{static toggleOverlays(e=500){$(".overlay").toggle(e)}static showOverlays(e=500){$(".overlay").fadeIn(e)}static hideOverlays(e=500){$(".overlay").fadeOut(e)}static get REGEXES(){return t}static getIPv4RegexWithCIDR(){const e=t.ipv4.length;return`${t.ipv4.substring(0,e-1)}(\\/?)(\\b([0-9]|[12][0-9]|3[0-2])?\\b)$`}static getIPv6RegexWithCIDR(){const e=t.ipv6.length;return`${t.ipv6.substring(0,e-1)}(\\/?)\\b([0-9]|[1-9][0-9]|1[01][0-9]|12[0-8])?\\b$`}static async resolveDNS(e="ntop.org"){try{const t=await fetch(`${http_prefix}/lua/rest/v2/get/dns/resolve.lua?hostname=${e}`);return await t.json()}catch(e){console.error(`Something went wrong when resolving hostname: ${e}`)}return{rc:-1,rc_str:"FAILED_HTTP_REQUEST"}}static initDataPatterns(){$("input[data-pattern]").each((function(){const e=$(this).data("pattern");if(!e)return void console.warn("An empty data-pattern on an input was found!",this);const a=e.split("|").map((e=>t[e].toString())).join("|");$(this).attr("pattern",a),$(this).removeAttr("data-pattern")}))}static is_good_ipv4(e){return new RegExp(t.ipv4).test(e)}static is_good_ipv6(e){return new RegExp(t.ipv6).test(e)}static is_mac_address(e){return new RegExp(t.macAddress).test(e)}static isNumeric(e){return/^\d+$/.test(e)}static is_network_mask(e,t){var l,n=e.split("/"),s=null;if(2!=n.length){if(!t)return null;l=e}else{if(l=n[0],!a.isNumeric(n[1]))return null;if((s=parseInt(n[1]))<0)return null}if(a.is_good_ipv4(l)){if(null===s)s=32;else if(s>32)return null;return{type:"ipv4",address:l,mask:s}}if(a.is_good_ipv6(n[0])){if(null===s)s=128;else if(s>128)return!1;return{type:"ipv6",address:l,mask:s}}return null}static fbits(t){const a=["bps","Kbps","Mbps","Gbps","Tbps"];if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 bps";var l=Math.log(t)/Math.log(1e3),n=parseInt(Math.floor(l));if(n<0||isNaN(n))n=0;else if(n>=a.length)return"> "+a[a.length-1];if(n<=1)return Math.round(t/Math.pow(1e3,n)*100)/100+" "+a[n];var s=parseFloat(t/Math.pow(1e3,n)).toFixed(2);return s%1==0&&(s=Math.round(s)),s+" "+a[n]}static export_rate(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 exps/s";var l=a.scaleValue(t,["exp/s","Kexp/s"],1e3);return Math.round(100*l[0])/100+" "+l[1]}static exports_format(t){if(void 0===t)return"-";var l=i18n_ext.exports.toLowerCase(),n=[l,"K "+l];if(0==t)return"0";if(t>0&&t<e)return"< 0.005 exps/s";var s=a.scaleValue(t,n,1e3);return Math.round(100*s[0])/100+" "+s[1]}static fbits_from_bytes(e){return void 0===e?"-":a.fbits(8*e)}static fpackets(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 pps";var l=a.scaleValue(t,["pps","Kpps","Mpps","Gpps","Tpps"],1e3);return Math.round(100*l[0])/100+" "+l[1]}static fpoints(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 pt/s";var l=a.scaleValue(t,["pt/s","Kpt/s","Mpt/s","Gpt/s","Tpt/s"],1e3);return Math.round(100*l[0])/100+" "+l[1]}static fflows(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 fps";var l=a.scaleValue(t,["fps","Kfps","Mfps","Gfps","Tfps"],1e3);return Math.round(100*l[0])/100+" "+l[1]}static fmsgs(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 mps";var l=a.scaleValue(t,["msg/s","Kmsg/s","Msg/s","Gmsg/s","Tmsg/s"],1e3);return Math.round(100*l[0])/100+" "+l[1]}static fmillis(e){if(void 0===e)return"-";const t=a.scaleValue(e,["ms"],1e3);return Math.round(100*t[0])/100+" "+t[1]}static fnone(e){return void 0===e?"-":Math.round(100*e)/100}static falerts(e){return void 0===e?"-":Math.round(100*e)/100+" alerts/s"}static fint(e){return void 0===e?"-":Math.round(e).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")}static ffloat(e){return void 0===e?"-":(Math.round(100*e)/100).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")}static fpercent(e){return void 0===e?"-":Math.round(100*e)/100+" %"}static percentage(e,t){if(t>0){var a=Math.round(1e4*e/t);if(a>0)return" [ "+a/100+" % ] "}return""}static fdate(e){return new Date(1e3*e)}static capitaliseFirstLetter(e){return e.charAt(0).toUpperCase()+e.slice(1)}static get_trend(e,t){return void 0===e||void 0===t||e==t?'<i class="fas fa-minus"></i>':e>t?'<i class="fas fa-arrow-up"></i>':'<i class="fas fa-arrow-down"></i>'}static abbreviateString(e,t){return e?e.length<t?e:e.substring(0,t)+"...":""}static toFixed2(e){return e?e.toFixed(2):""}static bytesToSize(e){if(void 0===e)return"-";var t=1024,a=1048576,l=1073741824,n=1099511627776;return e>=0&&e<t?0!=e?parseFloat(e.toFixed(2))+" Bytes":parseFloat(e)+" Bytes":e>=t&&e<a?parseFloat((e/t).toFixed(2))+" KB":e>=a&&e<l?parseFloat((e/a).toFixed(2))+" MB":e>=l&&e<n?parseFloat((e/l).toFixed(2))+" GB":e>=n?parseFloat((e/n).toFixed(2))+" TB":parseFloat(e.toFixed(2))+" Bytes"}static drawTrend(e,t,a){return e==t?'<i class="fas fa-minus"></i>':e>t?'<i class="fas fa-arrow-up"'+a+"></i>":'<i class="fas fa-arrow-down"></i>'}static toggleAllTabs(e){!0===e?$("#historical-tabs-container").find("li").removeClass("disabled").find("a").attr("data-toggle","tab"):$("#historical-tabs-container").find("li").addClass("disabled").find("a").removeAttr("data-toggle")}static disableAllDropdownsAndTabs(){$("select").each((function(){$(this).prop("disabled",!0)})),a.toggleAllTabs(!1)}static enableAllDropdownsAndTabs(){$("select").each((function(){$(this).prop("disabled",!1)})),a.toggleAllTabs(!0)}static capitalize(e){return e&&e[0].toUpperCase()+e.slice(1)}static addCommas(e){for(var t=(e+="").split("."),a=t[0],l=t.length>1?"."+t[1]:"",n=/(\d+)(\d{3})/;n.test(a);)a=a.replace(n,"$1,$2");return a+l}static scaleValue(e,t,a,l){if(0==e)return[0,t[0]];let n=l?10*l:10;var s=parseInt(Math.floor(Math.log(e)/Math.log(a)));return s<0||isNaN(s)?s=0:s>=t.length&&(s=t.length-1),[Math.round(e/Math.pow(a,s)*n)/n,t[s]]}static formatValue(t,l){if(0==t)return"0";if(t>0&&t<e)return"< "+e;null==l&&(l=0);var n=a.scaleValue(t,["","K","M","G","T"],1e3,l);return n[0]+n[1]}static formatPackets(e){return a.addCommas(e.toFixed(0))+" Pkts"}static bytesToVolume(t){if(0==t)return"0 Bytes";if(t>0&&t<e)return"< 0.005 Bytes";var l=a.scaleValue(t,["Bytes","KB","MB","GB","TB"],1024);return parseFloat(l[0])+" "+l[1]}static bytesToVolumeAndLabel(e){if(0==e)return"0 Bytes";var t=parseInt(Math.floor(Math.log(e)/Math.log(1024)));return[(e/Math.pow(1024,t)).toFixed(2),["Bytes","KB","MB","GB","TB"][t]]}static bitsToSize(t,l){l=l||1e3;if(0==t)return"0 bps";if(t>0&&t<e)return"< 0.005 bps";var n=a.scaleValue(t,["bps","Kbps","Mbps","Gbps","Tbps"],l);return n[0].toFixed(2)+" "+n[1]}static bitsToSize_no_comma(t,l){l=l||1e3;if(0==t)return"0 bps";if(t>0&&t<e)return"< 0.005 bps";var n=a.scaleValue(t,["bps","Kbps","Mbps","Gbps","Tbps"],l);return n[0]+" "+n[1]}static secondsToTime(e){if(e<1)return"< 1 sec";let t=Math.floor(e/86400),a=Math.floor(e/3600-24*t),l=Math.floor(e/60-1440*t-60*a),n=e%60,s="",o=[];if(t>0){let e=Math.floor(t/365);e>0&&(t%=365,s=e+" year",e>1&&(s+="s"),o.push(s),s=""),s=t+" day",t>1&&(s+="s"),o.push(s),s=""}return a>0&&(a<10&&(s="0"),s+=a+":"),l<10&&(s+="0"),s+=l+":",n<10&&(s+="0"),s+=n,o.push(s),o.join(", ")}static msecToTime(e){return e>=1e3?a.secondsToTime(e/1e3):(Math.round(1e3*e)/1e3).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")+" ms"}static epoch2Seen(e){var t=new Date(1e3*e),l=Math.floor((new Date).getTime()/1e3-e);return t.format("dd/MM/yyyy hh:mm:ss")+" ["+a.secondsToTime(l)+" ago]"}static graphGetXAxisTicksFormat(e){return e<=86400?"%H:%M:%S":e<=172800?"%b %e, %H:%M:%S":"%b %e"}static paramsExtend(e,t){return $.extend({},e,t)}static paramsToForm(e,t){for(var a in e=$(e),t){if(t.hasOwnProperty(a))$('<input type="hidden" name="'+a+'" value="'+t[a]+'">').appendTo(e)}return e}static paramsPairsEncode(e){var t=0,a={};for(var l in e)a["key_"+t]=l,a["val_"+t]=e[l],t+=1;return a}static hostkey2hostInfo(e){return(e=(e=(e=e.replace(/____/g,":")).replace(/___/g,"/")).replace(/__/g,".")).split("@")}static handle_tab_state(e,t){$("a",e).click((function(e){e.preventDefault()})),$(" > li > a",e).on("shown.bs.tab",(function(e){var t=$(e.target).attr("href").substr(1);history.replaceState?history.replaceState(null,null,"#"+t):window.location.hash=t}));var a=window.location.hash;a||(a="#"+t),$('a[href="'+a+'"]',e).tab("show")}static _add_find_host_link(e,t,a){$("<input>").attr({type:"hidden",id:t,name:t,value:a}).appendTo(e)}static makeFindHostBeforeSubmitCallback(e){return function(t,l){return l.context&&"historical"==l.context?(t.attr("action",e+"/lua/pro/db_search.lua"),"ip"==l.type?a._add_find_host_link(t,"ip",l.ip):"mac"==l.type?a._add_find_host_link(t,"mac",l.mac):"community_id"==l.type?a._add_find_host_link(t,"community_id",l.community_id):"ja3_client"==l.type?a._add_find_host_link(t,"ja3_client",l.ja3_client):"ja3_server"==l.type?a._add_find_host_link(t,"ja3_server",l.ja3_server):a._add_find_host_link(t,"name",l.hostname?l.hostname:l.name)):"mac"==l.type?t.attr("action",e+"/lua/mac_details.lua"):"network"==l.type?(t.attr("action",e+"/lua/hosts_stats.lua"),a._add_find_host_link(t,"network",l.network)):"snmp"==l.type?(t.attr("action",e+"/lua/pro/enterprise/snmp_interface_details.lua"),a._add_find_host_link(t,"snmp_port_idx",l.snmp_port_idx)):"snmp_device"==l.type?t.attr("action",e+"/lua/pro/enterprise/snmp_device_details.lua"):"asn"==l.type?(t.attr("action",e+"/lua/hosts_stats.lua"),a._add_find_host_link(t,"asn",l.asn)):(t.attr("action",e+"/lua/host_details.lua"),a._add_find_host_link(t,"mode","restore")),!0}}static tstampToDateString(e,t,a){a=a||0;var l=parseInt(e.html())+a,n=d3.time.format(t)(new Date(1e3*l));return e.html(n).removeClass("hidden"),n}static noHtml(e){return e.replace(/<[^>]+>/g,"")}static cleanCustomHostUrl(e){return e.replace(/^http:\/\//gi,"").replace(/^https:\/\//gi,"").replace(/^www\./gi,"").replace(/[^0-9a-zA-Z\.:\/_-]/gi,"")}static parseQuery(e){for(var t={},a=("?"===e[0]?e.substr(1):e).split("&"),l=0;l<a.length;l++){var n=a[l].split("=");t[decodeURIComponent(n[0])]=decodeURIComponent(n[1]||"")}return t}static getHistoryParameters(e){var t=a.parseQuery(window.location.search),l=$.extend(t,e),n="?"+$.param(l,!0);return[location.protocol,"//",location.host,location.pathname].join("")+n}static check_status_code(e,t,a){const l=200!=e;if(l&&null!=a){let l=i18n_ext.request_failed_message;e&&t&&(l+=`: ${e} - ${t}`),a.text(l).show()}else l&&null==a&&alert(`${i18n_ext.request_failed_message}: ${e} - ${t}`);return l}static importModalHelper(e){if(!e.loadConfigXHR)throw"importModalHelper:: Missing 'loadConfigXHR' param";$("input#import-input").on("change",(function(){$("#btn-confirm-import").removeAttr("disabled")})),$("#import-modal").on("hidden.bs.modal",(function(){$("#import-input").val(""),$("#import-error").hide().removeClass("text-warning").addClass("invalid-feedback"),$("#btn-confirm-import").attr("disabled","disabled")})),$("#import-modal").on("submit","form",(function(t){t.preventDefault();const a=$("#btn-confirm-import");a.attr("disabled","");const l=$("#import-input")[0].files[0];if(!l)return $("#import-error").text(`${i18n_ext.no_file}`).show(),void a.removeAttr("disabled");const n=new FileReader;n.readAsText(l,"UTF-8"),n.onload=function(){let t=null;try{t=JSON.parse(n.result)}catch(e){}if(!t)return $("#import-error").text(i18n_ext.rest_consts[responseJSON.rc_str]||"Not Implemented Yet").show(),void a.removeAttr("disabled");e.loadConfigXHR(n.result).done(((t,a,l)=>{if(t.rc<0)return void $("#import-error").text(t.rc_str).show();e.successCallback&&e.successCallback(t);const n="all"==$("input[name='configuration']:checked").val()?i18n("manage_configurations.messages.import_all_success"):i18n("manage_configurations.messages.import_success");ToastUtils.showToast({id:"import-configuration-alert",level:"success",title:i18n("success"),body:n,delay:2e3}),$("#import-modal").modal("hide")})).fail((({responseJSON:t})=>{e.failureCallback&&e.failureCallback(t),t&&t.rc>0||(-28==t.rc&&$("#import-error").removeClass("invalid-feedback").addClass("text-warning"),$("#import-error").text(i18n_ext.rest_consts[t.rc_str]||i18n_ext.FAILED_HTTP_REQUEST).show())})).always((()=>{a.removeAttr("disabled")}))}}))}static serializeFormArray(e){const t={};return e.forEach((e=>{e.name.includes("[]")||("string"==typeof e.value&&(e.value=e.value.trim()),t[e.name]=e.value)})),t}static cleanForm(e){$(e).find("input,select,textarea").each((function(e,t){$(this).removeClass("is-valid").removeClass("is-invalid")})),$(e)[0].reset()}static fetchWithTimeout(e,t={},a=5e3){const l={...t,signal:(new AbortController).signal};return fetch(e,l).then((e=>{if(!e.ok)throw new Error(`${e.status}: ${e.statusText}`);return e})).catch((e=>{if("AbortError"===e.name)throw new Error("Response timed out")}))}static setPref(e,t,a,l){if(null==e)return void console.warn("An action key must be defined to set a preference!");const n=()=>{},s=$.post(`${http_prefix}/lua/update_prefs.lua`,{action:e,csrf:t});s.done(a||n),s.fail(l||n)}static arrayToListString(e,t){return null==e?"":e.length>t?e.slice(0,t).join(", ")+` ${i18n_ext.and_x_more.replace("$num",e.length-t)}`:e.slice(0,t).join(", ")}static buildURL(e,t={},a=!1,l={}){const n=new URL(e,window.location);for(const[e,a]of Object.entries(t))(a||0===a)&&n.searchParams.set(e,a);if(a){const e=new URL(window.location.href);for(const[t,a]of Object.entries(l))a&&e.searchParams.set(t,a);n.searchParams.set("referer",e.toString())}return n.toString()}static getEditPoolLink(e,t){const a=new URL(e,window.location);return a.searchParams.set("pool_id",t),a.toString()}static getPoolLink(e,t=0){return`${http_prefix}/lua/rest/v2/get/${e}/pools.lua?pool=${t}`}static async getPool(e,t=0){if(null===e)throw"A pool type must be defined!";try{const l=await fetch(a.getPoolLink(e,t)),n=await l.json();return n.rc<0?[!1,{}]:[!0,n.rsp[0]]}catch(e){return[!1,{}]}}static saveElementScale(e,t={width:0,height:0}){const l=a.generateScaleElementKey(e);localStorage.setItem(l,JSON.stringify(t))}static generateScaleElementKey(e){let t;const a=location.pathname,l=e.attr("id");if(""!==l)t=l;else{t=e.attr("class")}return`${t}-${a}-scale`}static loadElementScale(e){const t=a.generateScaleElementKey(e),l=localStorage.getItem(t);if(null!=l)return JSON.parse(l)}static fillFieldIfValid(e,t){void 0===t?e.val(""):e.val(t)}static copyToClipboard(e,t){const a=document.createElement("textarea");a.value=e,a.setAttribute("readonly",""),a.style.position="absolute",a.style.left="-9999px",document.body.appendChild(a),a.select(),document.execCommand("copy"),document.body.removeChild(a),$(t).attr("title","Copied!").tooltip("dispose").tooltip().tooltip("show"),$(t).removeAttr("data-bs-original-title"),$(t).attr("title",e)}static stripTags(e){let t=document.createElement("div");return t.innerHTML=e,t.textContent||t.innerText||""}static shortenLabel(e,t,a){let l=e;if(e.length>t+5)if(a){let n=e.lastIndexOf(a);const s=e.slice(n);t>n&&(t=n),l=e.slice(0,t)+"... "+s}else l=e.slice(0,t)+"...";return l}static sortAlphabetically(e,t){const a=e.label?.toUpperCase(),l=t.label?.toUpperCase();return a<l?-1:a>l?1:0}static formatNameValue(e,t,a){let l=e;return e!=t&&(a&&"number"==typeof a&&(l=this.shortenLabel(l,a,".")),l=`${l} [${t}]`),l}static removeVlan(e){let t=e;const a=t.lastIndexOf("@");if(-1!=a){0==t.slice(a+1)&&(t=t.slice(0,a))}return t}static formatGenericObj(e,t){let a=e.label?e.label:e.value;return e.value,a}static formatCountry(e,t){let a=e.value;return`${e.label?e.label:e.value} <img src="/dist/images/blank.gif" class="flag flag-${a.toLowerCase()}">`}static formatHost(e,t,l){let n="";if(!e)return n;let s=e.ip;t.vlan_id&&t.vlan_id.value&&(s=s+"@"+t.vlan_id.value),n=e.label?e.label:e.value,t.vlan_id&&t.vlan_id.label&&(n+=`@${t.vlan_id.label}`);n=`<a href="${a.buildURL(`${http_prefix}/lua/host_details.lua`,{host:s})}">${n}</a>`;let o=l?t.cli_country:t.srv_country;return!o&&t.country&&(o=t.country),o&&o.value&&(n+=` <img src="${http_prefix}/dist/images/blank.gif" class="flag flag-${o.value.toLowerCase()}" title="${o.title}"></a>`),n}static formatNetwork(e,t){let l="";if(!e)return l;let n=e.value;l=e.label?e.label:e.value,t.vlan_id&&t.vlan_id.label&&(l+=`@${t.vlan_id.label}`);return l=`<a href="${a.buildURL(`${http_prefix}/lua/hosts_stats.lua`,{network:n})}">${l}</a>`,l}static convertIPAddress(e){var t,a,l,n,s,o,i;if(!e)return 0;if(l=2==(s=(e=e.replace(/<[\s\S]*?>/g,"")).split(":")).length?s[0].split("."):e.split("."),n=e.split(":"),o="",i="",4==l.length)for(t=0;t<l.length;t++)1==(a=l[t]).length?o+="00"+a:2==a.length?o+="0"+a:o+=a;else if(n.length>0){var r=0;for(t=0;t<n.length;t++)t>0&&(i+=":"),0===(a=n[t]).length?r+=0:1==a.length?(i+="000"+a,r+=4):2==a.length?(i+="00"+a,r+=4):3==a.length?(i+="0"+a,r+=4):(i+=a,r+=4);n=i.split(":");var c=0;for(t=0;t<n.length;t++)if(0===(a=n[t]).length&&0===c)for(var u=0;u<32-r;u++)o+="0",c=1;else o+=a}return o}static formatASN(e,t){let l="";if(!e)return l;let n=e.value;l=e.label?e.label:e.value;return l=`<a href="${a.buildURL(`${http_prefix}/lua/hosts_stats.lua`,{asn:n})}">${l}</a>`,l}static createProgressBar(e){return`<div class="d-flex flex-row align-items-center">\n              <div class="col-9 progress">\n                <div class="progress-bar bg-warning" aria-valuenow="${e}" aria-valuemin="0" aria-valuemax="100" style="width: ${e}%;">\n                </div>\n              </div>\n              <div class="col"> ${e} %</div>\n            </div>`}static createBreakdown(e,t,a,l){return`<div class="d-flex flex-row">\n              <div class="col-12 progress">\n                <div class="progress-bar bg-warning" aria-valuenow="${e}" aria-valuemin="0" aria-valuemax="100" style="width: ${e}%;">${a}</div>\n                <div class="progress-bar bg-success" aria-valuenow="${t}" aria-valuemin="0" aria-valuemax="100" style="width: ${t}%;">${l}</div>\n              </div>\n            </div>`}static getNumTableRows(){return[10,20,50,100]}static formatApexChartLabelFromXandName({series:e,seriesIndex:t,dataPointIndex:a,w:l}){const n=l.config.series[t].data[a],s=n.name,o=n.y;return`\n    <div class='apexcharts-theme-light apexcharts-active' id='test'>\n        <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n            ${n.meta.label}\n        </div>\n        <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n            <div class='apexcharts-tooltip-text text-left'>\n                <b>${l.config.xaxis.title.text}</b>: ${s}\n            </div>\n            <div class='apexcharts-tooltip-text text-left'>\n                <b>${l.config.yaxis[0].title.text}</b>: ${o}\n            </div>\n        </div>\n    </div>\n    `}static apexChartJumpToAlerts(e,t,a){const{seriesIndex:l,dataPointIndex:n}=a,{series:s}=a.config;if(-1===l)return;if(void 0===s)return;const o=s[l],i=o.base_url||s[0].base_url,r=o.start_url||s[0].start_url;if(null!=i&&null!=r){const e=o.data[n].meta.url_query;location.href=`${i}?${r}${e}`}}static apexChartJumpToHostDetails(e,t,a){const{seriesIndex:l,dataPointIndex:n}=a,{series:s}=a.config;if(-1===l)return;if(void 0===s)return;const o=s[l],i=o.base_url||s[0].base_url;if(null!=i){const e=`${i}?${o.data[n].meta.url_query}`;ntopng_url_manager.go_to_url(e)}}static formatApexChartLabelFromXandY({series:e,seriesIndex:t,dataPointIndex:a,w:l}){const n=l.config.series[t].data[a],s=n.x,o=n.y;return`\n      <div class='apexcharts-theme-light apexcharts-active' id='test'>\n          <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n              ${n.meta.label}\n          </div>\n          <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n              <div class='apexcharts-tooltip-text text-left'>\n                  <b>${l.config.xaxis.title.text}</b>: ${s}\n              </div>\n              <div class='apexcharts-tooltip-text text-left'>\n                  <b>${l.config.yaxis[0].title.text}</b>: ${o}\n              </div>\n          </div>\n      </div>\n    `}}function l(e,t){var a=$("thead th",$(e)).filter((function(){return"none"!=$(this).css("display")})).length;$("tbody",$(e)).html('<tr class="emptyRow"><td colspan="'+a+'"><i>'+t+"</i></td></tr>")}function n(e){return $("tr:not(.emptyRow)",$(e)).length-1}function s(e){return 0==n(e)}function o(e){return $("table",$("#dt-top-details",$(e)).parent())}function i(e,t,a,l,n,s=!0,o=""){0==$("td:nth-child("+e+")",$(this)).find("div.d-flex").length&&($("td:nth-child("+e+")",$(this)).empty(),$("td:nth-child("+e+")",$(this)).append($("<div class='d-flex justify-content-center'></div>"))),$("td:nth-child("+e+")",$(this)).find(".d-flex").append('<a href="'+n+`" title='${o}' data-placement="bottom" class="btn btn-sm mx-1 ${a} ${s?"":"disabled"}" onclick="`+l+'" role="button">'+t+"</a>")}function r(e,t){return e.data("datatable").options.columns.findIndex((function(e){return e.field===t}))}$((function(){a.initDataPatterns()}));var c=Object.freeze({__proto__:null,draw_processes_graph:function(e,t,a){var l,n={},s=e+"/lua/get_processes_graph_data.lua?host="+a;d3.json(s,(function(s,o){if(s)return console.warn(s);var i;(l=o).forEach((function(t){i=-1==t.source_pid?e+"/lua/host_details.lua?host="+t.source:e+"/lua/process_details.lua?pid="+t.source_pid+"&pid_name="+t.source_name+"&host="+a+"&page=flows",t.source=n[t.source]||(n[t.source]={name:t.source_name,num:t.source,link:i,type:t.source_type,pid:t.source_pid}),i=-1==t.target_pid?e+"/lua/host_details.lua?host="+t.target:e+"/lua/process_details.lua?pid="+t.target_pid+"&pid_name="+t.target_name+"&host="+a+"&page=flows",t.target=n[t.target]||(n[t.target]={name:t.target_name,num:t.target,link:i,type:t.target_type,pid:t.target_pid})}));var r=d3.scale.category10();r.proc="red",r.host="lightsteelblue";var c=d3.layout.force().nodes(d3.values(n)).links(l).size([960,500]).linkDistance(120).charge(-400).on("tick",(function(){d.attr("d",f),_.attr("transform",v),p.attr("transform",v)})).start(),u=d3.select("#"+t).append("svg").attr("id","ebpf_graph").attr("width",960).attr("height",500);u.append("defs").selectAll("marker").data(["proc2proc","proc2host","host2proc","host2host"]).enter().append("marker").attr("id",(function(e){return e})).attr("viewBox","0 -5 20 20").attr("refX",15).attr("refY",-1.5).attr("markerWidth",6).attr("markerHeight",6).attr("orient","auto").append("path").attr("d","M0,-5L10,0L0,5");var d=u.append("g").selectAll("path").data(c.links()).enter().append("path").attr("class",(function(e){return"link "+e.type})).attr("marker-end",(function(e){return"url(#"+e.type+")"})),_=u.append("g").selectAll("circle").data(c.nodes()).enter().append("circle").attr("class","ebpf_circle").attr("r",15).style("fill",(function(e){return r[e.type]})).call(c.drag).on("dblclick",(function(e){window.location.href=e.link})),p=u.append("g").selectAll("text").data(c.nodes()).enter().append("text").attr("class","ebpf_text").attr("x",12).attr("y","0.5rem").style("font-size","1rem").text((function(e){return e.pid>=0?e.name+" [pid: "+e.pid+"]":e.name}));function f(e){var t=e.target.x-e.source.x,a=e.target.y-e.source.y,l=Math.sqrt(t*t+a*a);return"M"+e.source.x+","+e.source.y+"A"+l+","+l+" 0 0,1 "+e.target.x+","+e.target.y}function v(e){return"translate("+e.x+","+e.y+")"}}))}});class u{constructor(e,t){if(void 0===t.csrf)throw new Error("ModalHandler::Missing CSRF token!");this.element=e,this.dialog=$(e).closest(".modal"),this.options=t,this.csrf=t.csrf,this.dontDisableSubmit=t.dontDisableSubmit,this.observer=new MutationObserver((e=>{this.bindFormValidation(),this.toggleFormSubmission(),this.initDataPatterns()})),this.observer.observe(this.element[0],{childList:!0,subtree:!0}),this.initialState=null,this.currentState=null,this.firstCloseAttempt=!1,this.isSubmitting=!1;if(0==$(this.element).find("[type='submit']").length)throw new Error("ModalHandler::The submit button was not found inside the form!");this.toggleFormSubmission()}initDataPatterns(){NtopUtils.initDataPatterns()}createFormSnapshot(){const e={inputs:{},hidden:[]};return $(this.element).find('textarea,select,input[type!="radio"]').each((function(){const t=$(this).prop("nodeName").toLowerCase(),a=$(this).attr("name");e.inputs[`${t}[name='${a}']`]=$(this).val()})),$(this.element).find("[style='display: none;'], span.invalid-feedback").each((function(){e.hidden.push($(this))})),e}compareFormSnaphsot(e,t){if(null==e||null==t)return!0;for(let[a,l]of Object.entries(e.inputs))if(t.inputs[a]!=l)return!1;return!0}delegateModalClosing(){const e=this;$(this.dialog).find("button.cancel").off("click").click((function(){e.firstCloseAttempt=!1,$(e.element)[0].reportValidity(),$(e.dialog).find(".confirm-closing").fadeOut(100,(function(){$(e.dialog).find("button.btn-close").fadeIn(100)}))})),$(this.dialog).off("hide.bs.modal").on("hide.bs.modal",(function(t){e.isSubmitting?t.preventDefault():e.compareFormSnaphsot(e.currentState,e.initialState)||e.firstCloseAttempt||(t.preventDefault(),e.firstCloseAttempt=!0,$(e.dialog).find("button.btn-close").fadeOut(100,(function(){$(e.dialog).find(".confirm-closing").fadeIn(100)})))})),$(this.dialog).off("hidden.bs.modal").on("hidden.bs.modal",(function(t){for(const[t,a]of Object.entries(e.initialState.inputs))$(e.dialog).find(t).val(a),$(e.dialog).find(t).removeClass("is-invalid");e.initialState.hidden.forEach((e=>{e.hide()})),e.element.find("[type='submit']").attr("disabled","disabled"),e.currentState=null,e.firstCloseAttempt=!1,$(e.dialog).find(".confirm-closing").fadeOut(100,(function(){$(e.dialog).find("button.btn-close").fadeIn(100)})),e.cleanForm()}))}fillFormModal(){return this.options.loadFormData()}invokeModalInit(e={}){const t=this;this.delegateModalClosing(),this.data=e||this.fillFormModal(),this.options.onModalInit(this.data,this),$(this.element).parents(".modal").on("show.bs.modal",(function(){t.options.onModalShow()})),this.initialState=this.createFormSnapshot(),this.currentState=null,this.delegateResetButton()}delegateSubmit(){this.bindFormValidation();const e=this;this.submitHandler=function(t){e.options.isSyncRequest||(t.preventDefault(),t.stopPropagation(),e.makeRequest())},$(this.element).on("submit",this.submitHandler)}bindFormValidation(){const e=this;$(this.element).find("input,select,textarea").each((async function(t,a){const l=$(this);let n=-1;const s=async e=>e.data.resolveDNS&&l.val().match(NtopUtils.REGEXES.domainName)?await(async()=>{const e=l.parent().find(".spinner-border");l.attr("readonly",!0),e.show();const t=await NtopUtils.resolveDNS($(a).val());return l.removeAttr("readonly"),e.hide(),t.rc<0?(a.setCustomValidity(t.rc_str),[!1,t.rc_str_hr]):(a.setCustomValidity(""),[!0,"Success"])})():e.data.cannotBeEmpty&&e.isInputEmpty?(a.setCustomValidity("Please fill the input."),[!1,e.data.validationEmptyMessage||i18n_ext.missing_field]):a.validity.patternMismatch?(a.setCustomValidity("Pattern mismatch."),[!1,e.data.validationMessage||i18n_ext.invalid_field]):a.validity.rangeOverflow?(a.setCustomValidity("Value exceed the maximum value."),[!1,e.data.rangeOverflowMessage||i18n_ext.invalid_field]):a.validity.rangeUnderflow?(a.setCustomValidity("Value is under the minimum value."),[!1,e.data.rangeUnderflowMessage||i18n_ext.invalid_field]):(a.setCustomValidity(""),[!0,"Success"]),o=async()=>{const e={data:{validationMessage:l.data("validationMessage"),validationEmptyMessage:l.data("validationEmptyMessage"),cannotBeEmpty:"required"===l.attr("required")||1==l.data("validationNotEmpty"),resolveDNS:l.data("validationResolvedns"),rangeOverflowMessage:l.data("validationRangeOverflowMessage"),rangeUnderflowMessage:l.data("validationUnderflowOverflowMessage")},isInputEmpty:"string"==typeof l.val()&&""==l.val().trim()},[t,a]=await s(e);let n=l.parent().find(".invalid-feedback");0==n.length&&(n=$("<span class='invalid-feedback'></span>")),t?(l.removeClass("is-invalid"),n.fadeOut(500,(function(){$(this).remove()}))):(l.addClass("is-invalid"),l.parent().append(n),n.text(a))};$(this).off("input").on("input",(function(t){e.currentState=e.createFormSnapshot(),-1!=n&&clearTimeout(n),l.attr("formnovalidate")||(n=setTimeout((()=>{o(),e.toggleFormSubmission()}),300),e.firstCloseAttempt=!1)})),$(this).off("invalid").on("invalid",(function(e){e.preventDefault(),l.attr("formnovalidate")||o()}))}))}getModalID(){return $(this.element).parents(".modal").attr("id")}toggleFormSubmission(){let e=!0;$(this.element).find("input:not(:disabled),select:not(:disabled),textarea:not(:disabled)").each((function(t,a){e&=a.validity.valid})),e?$(this.element).find("[type='submit'],[type='test']").removeAttr("disabled"):$(this.element).find("[type='submit'],[type='test']").attr("disabled","disabled")}cleanForm(){$(this.element).find("input,textarea,select").each((function(e,t){$(this).removeClass("is-valid").removeClass("is-invalid")})),$(this.element)[0].reset()}makeRequest(){const e=$(this.element).find(".invalid-feedback"),t=$(this.element).find("[type='submit']");let a=this.options.beforeSumbit(this.data);a.csrf=this.csrf,a=$.extend(a,this.options.submitOptions),t.attr("disabled","disabled");const l=this;if(this.options.endpoint){let n;n="post"==l.options.method?$.ajax({url:this.options.endpoint,data:JSON.stringify(a),method:l.options.method,dataType:"json",contentType:"application/json; charset=utf-8"}):$.get(this.options.endpoint,a),this.isSubmitting=!0,n.done((function(t,n){l.isSubmitting=!1,l.currentState=null,l.options.resetAfterSubmit&&l.cleanForm(),e.hide();l.options.onSubmitSuccess(t,a,l)&&(l.dialog.modal?l.dialog.modal("hide"):(l.dialog[0].hidden=!0,$(".modal-backdrop.fade.show").remove())),$(l.element).off("submit",l.submitHandler),l.delegateSubmit()})).fail((function(t,n,s){l.isSubmitting=!1;const o=t.responseJSON;void 0!==o.rc&&o.rc<0&&e.html(o.rc_str_hr).show(),l.options.onSubmitError(o,a,n,s)})).always((function(e){t.removeAttr("disabled")}))}else{l.currentState=null,e.hide();l.options.onSubmitSuccess({},a,l)&&(l.dialog.modal?l.dialog.modal("hide"):l.dialog[0].hidden=!0),$(l.element).off("submit",l.submitHandler),l.delegateSubmit(),t.removeAttr("disabled")}}delegateResetButton(){const e=this,t=$(this.element).find("[type='reset']");if(0==t.length)return;const a=NtopUtils.serializeFormArray($(this.element).serializeArray());t.click((function(t){t.preventDefault(),$(e.element).find("input:visible,select").each((function(e,t){const l=$(t).attr("name");$(t).val(a[l]).removeClass("is-invalid").removeClass("is-valid")}))}))}}const d={no_formatting:{id:"no_formatting",um:null,step:null,decimal:null,scale_values:null},number:{id:"number",um:["","K","M","G","T"],step:1e3,decimal:null,scale_values:null},full_number:{id:"number",um:["","K","M","G","T"],step:1e3,decimal:null,scale_values:null,thousands_sep:","},bytes:{id:"bytes",um:["B","KB","MB","GB","TB","PB","EB"],step:1024,decimal:2,scale_values:null,absolute_value:!0},bps:{id:"bps",um:["bps","Kbps","Mbps","Gbps","Tbps","Pbps"],step:1e3,decimal:2,scale_values:8,absolute_value:!0},speed:{id:"speed",um:["bit","Kbit","Mbit","Gbit","Tbit","Pbit"],step:1e3,decimal:0,scale_values:null,absolute_value:!0},flows:{id:"flows",um:["flows","Kflows","Mflows","Gflows"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},fps:{id:"fps",um:["flows/s","Kflows/s","Mflows/s","Gflows/s"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},alerts:{id:"alerts",um:["alerts","Kalerts","Malerts","Galerts"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},alertps:{id:"alertps",um:["alerts/s","Kalerts/s","Malerts/s","Galerts/s"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},hits:{id:"hits",um:["hits","Khits","Mhits","Ghits"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},hitss:{id:"hitss",um:["hits/s","Khits/s","Mhits/s","Ghits/s"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},packets:{id:"packets",um:["packets","Kpackets","Mpackets","Gpackets","Tpackets"],step:1e3,decimal:0,scale_values:null,absolute_value:!0},pps:{id:"pps",um:["pps","Kpps","Mpps","Gpps","Tpps"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},ms:{id:"ms",um:["ms","s"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},percentage:{id:"percentage",um:["%"],step:101,decimal:1,scale_values:null,max_value:100,absolute_value:!0}};function _(e){let t=d[e],a=3;null!=t.decimal&&t.decimal>0&&(a=6);let l=0;return null!=t.um&&(l=Math.max(...t.um.map((e=>e.length)))),a+1+l}function p(e,t){let a=d[e];if(e==d.no_formatting.id||null==t)return null;null!=a.scale_values&&(t*=a.scale_values);let l=a.step;t<0&&(t*=-1);let n=0,s=a.um;for(;t>=l&&n<s.length;)t/=l,n+=1;return n}function f(e,t,a){let l=d[e];if(null==l)return null;t|=l.absolute_value;return function(n){if(null==n)return"";if(e==d.no_formatting.id)return n;null!=l.scale_values&&(n*=l.scale_values);let s=n<0;if(s&&(n*=-1),null!=l.max_value&&n>l.max_value&&(n=l.max_value),l.thousands_sep){for(var o=(n+="").split("."),i=o[0],r=o.length>1?"."+o[1]:"",c=/(\d+)(\d{3})/;c.test(i);)i=i.replace(c,"$1,$2");return i+r}let u=l.step,_=l.decimal,p=l.um,f=0;for(;n>=u&&f<p.length&&!a||null!=a&&f<a;)n/=u,f+=1;return null!=_&&_>0?(n*=Math.pow(10,_),n=Math.round(n),n=(n/=Math.pow(10,_)).toFixed(_)):n=Math.round(n),s&&!t&&(n*=-1),`${`${n}`} ${`${p[f]}`}`}}const v={types:d,getUnitMeasureLen:_,getFormatter:f,getScaleFactorIndex:p};window.NtopUtils=a,window.datatableInitRefreshRows=function(e,t,a,l){var n=e.data("datatable"),s=n.resultset.data,o=e.data("dt-rr-timer"),i=e.data("dt-rr-ajax");l=l||{},o&&(clearInterval(o),e.removeData("dt-rr-timer")),i&&(i.abort(),e.removeData("dt-rr-ajax"));var c=[],u={};for(var d in s){var _=s[d];if(_[t]){var p=_[t];u[p]=d,c.push(p)}}var f={custom_hosts:c.join(",")},v=n.options.url,m=!0,h=function(a){if("string"==typeof a&&(a=JSON.parse(a)),a){for(var s in a.data){var o=a.data[s],i=o[t];if(i&&u[i]){var c=u[i],d=n.rows[c],_=$("td",d);for(var p in o){var f=_[r(e,p)],v=$(f),h=v.data("dt-rr-cur-val")||$(f).html(),g=l[p],b=o[p],y="";g&&(parseFloat(b)!=b&&console.warn("Invalid number: "+b),m||(y=" "+NtopUtils.drawTrend(parseFloat(b),parseFloat(h))),v.data("dt-rr-cur-val",b),b=g(b)),$(f).html(0!=b?b+y:"")}}}m=!1,e.removeData("dt-rr-ajax")}else console.error("Bad JSON result")};e.data("dt-rr-timer",setInterval((function(){e.data("dt-rr-ajax")||e.data("dt-rr-ajax",$.ajax({type:"GET",url:v,data:f,cache:!1,success:h}))}),a)),h(n.resultset)},window.datatableForEachRow=function(e,t){$("tr:not(:first)",e).each((function(e){var a;if("function"==typeof t)t.bind(this)(e);else for(a=0;a<t.length;a++)t[a].bind(this)(e)}))},window.datatableIsEmpty=s,window.datatableRemoveEmptyRow=function(e){$("tbody tr.emptyRow",$(e)).remove()},window.datatableAddEmptyRow=l,window.datatableGetNumDisplayedItems=n,window.datatableGetByForm=o,window.datatableUndoAddRow=function(e,t,a,n){a&&$(a).removeAttr("disabled").removeClass("disabled");var i=$(e).closest("form");$(e).remove(),aysUpdateForm(i);var r=o(i);s(r)&&l(r,t),n&&window[n](e)},window.datatableAddButtonCallback=i,window.datatableAddDeleteButtonCallback=function(e,t,a){i.bind(this)(e,a,"btn-danger",t,"javascript:void(0)",!0,"Delete")},window.datatableAddActionButtonCallback=function(e,t,a,l=!0,n=""){i.bind(this)(e,a,"btn-info",t,"javascript:void(0)",l,n)},window.datatableAddFilterButtonCallback=function(e,t,a,l="",n=!0){i.bind(this)(e,a,"btn-warning",t,"javascript:void(0)",n,l)},window.datatableAddLinkButtonCallback=function(e,t,a,l=""){i.bind(this)(e,a,"btn-info","",t,!0,l)},window.datatableMakeSelectUnique=function(e,t,a){function l(e,t,a,l){$("[id^="+t+"]").each((function(){var t=a($(this));t[0]!=e[0]&&l(t)}))}function n(e,t){if(t)e.removeAttr("disabled");else{var a=e.closest("select"),l=a.val()==e.val();if(e.attr("disabled","disabled"),l){var n=a.find("option:not([disabled])").first().val();a.val(n),a.attr("data-old-val",n)}}}function s(e,t,a){var s=$(this).attr("data-old-val")||"",o=$(this).val()||"",i=[];s==o&&(s=""),l($(this),e,t,(function(e){n(e.find("option[value='"+s+"']"),!0),n(e.find("option[value='"+o+"']"),!1),i.push(e)})),a($(this),s,o,i,n),$(this).attr("data-old-val",o)}var o=(a=NtopUtils.paramsExtend({on_change:$.noop,selector_fn:function(e){return e.find("select").first()}},a)).selector_fn(e);o.on("change",(function(){s.bind(this)(t,a.selector_fn,a.on_change)})),o.on("remove",(function(){$(this).val("").trigger("change")})),function(e,t,a){e.val(""),l(e,t,a,(function(e){e.trigger("change")}));var n=e.find("option:not([disabled])").first().val();e.val(n),e.trigger("change")}(o,t,a.selector_fn)},window.datatableIsLastPage=function(e){var t=$("#dt-bottom-details .pagination li:nth-last-child(3)",$(e));return!(1==t.length&&0==t.hasClass("active"))},window.datatableGetColumn=function(e,t,a){var l=e.data("datatable").resultset.data.filter((function(e){return e[t]===a}));if(l)return l[0]},window.datatableGetColumnIndex=r,window.$.fn.modalHandler=function(e){if(1!=this.length)throw new Error("Only a form element can by initialized!");const t=$.extend({csrf:"",endpoint:"",resetAfterSubmit:!0,dontDisableSubmit:!1,isSyncRequest:!1,method:"get",loadFormData:function(){},onModalInit:function(e){},onModalShow:function(){},beforeSumbit:function(){return{}},onSubmitSuccess:function(e){},onSubmitError:function(e,t,a){},onModalReset:function(e){}},e),a=new u(this,t);return a.delegateSubmit(),a},window.ebpfUtils=c,window.ntopFormatterUtils=v;var m={};window.makeUniqueValidator=function(e){return function(t){var a=t.val(),l=0;return!a||(e(t).each((function(){$(this).val()==a&&(l+=1)})),1==l)}},window.memberValueValidator=function(e){var t=e.val();return""===t||(NtopUtils.is_mac_address(t)||NtopUtils.is_network_mask(t,!0))},window.makePasswordPatternValidator=function(e){return function(t){return!t.val()||$(t).val().match(e)}},window.passwordMatchValidator=function(e){var t=$(e).closest("form").find("[data-passwordmatch]").not(e);return!e.val()||!t.val()||t.val()===e.val()},window.poolnameValidator=function(e){return!e.val()||$(e).val().match(/^[a-z0-9_]*$/)},window.passwordMatchRecheck=function(e){var t=$(e).find("[data-passwordmatch]"),a=0;t.each((function(){""!=$(this).val()&&a++})),a==t.length&&t.trigger("input")},window.hostOrMacValidator=function(e){var t=e.val();return""===t||(NtopUtils.is_mac_address(t)||NtopUtils.is_good_ipv4(t)||NtopUtils.is_good_ipv6(t))},window.ipAddressValidator=function(e){var t=e.val();return""===t||(NtopUtils.is_good_ipv4(t)||NtopUtils.is_good_ipv6(t))},window.bpfValidator=function(e,t=!1){var a=e.val();if(""===a.trim())return!0;var l=e.attr("name");m[l]||(m[l]={ajax_obj:null,valid:!0,timer:null,submit_remind:!1,last_val:null});var n=m[l],s=function(){n.timer=null;var e=function(e){n.ajax_obj=null,n.valid=e,n.last_val=a};n.last_val!==a?(n.ajax_obj&&n.ajax_obj.abort(),n.ajax_obj=$.ajax({type:"GET",url:`${http_prefix}/lua/pro/rest/v2/check/filter.lua`,async:!t,data:{query:a},error:function(){e(n.valid)},success:function(t){var a=!!t.response;e(a)}})):e(n.valid)};return t?s():n.last_val===a||(n.timer&&(clearTimeout(n.timer),n.submit_remind=!1),n.timer=setTimeout(s,250)),n.valid};const h=function(){let e={},t=[];return{ready:function(a){e[a]=!0,t.filter((e=>e.component_name==a)).forEach((e=>e.resolve())),t=t.filter((e=>e.component_name!=a))},on_ready:function(a){return new Promise(((l,n)=>{e[a]?l():t.push({resolve:l,component_name:a,completed:!1})}))}}}(),b=function(){let e={};return{is_array:function(e){return Array.isArray(e)},is_object:function(e){return"object"==typeof e&&!this.is_array(e)&&null!==e},clone:function(e){if(null==e)return null;if(this.is_object(e))return $.extend(!0,{},e);if(Array.isArray(e)){let t=[];for(let a=0;a<e.length;a+=1){let l=this.clone(e[a]);t.push(l)}return t}return e},object_to_array:function(e){if(null==e)return[];let t=[];for(let a in e)t.push(e[a]);return t},get_utc_seconds:function(e){return null==e&&(e=Date.now()),Number.parseInt(e/1e3)},get_timeframes_dict:function(){const e=60;let t=new Date,a=new Date,l=new Date,n=new Date;return{min:e,"5_min":300,"10_min":600,"30_min":1800,hour:3600,"2_hours":7200,"6_hours":21600,"12_hours":43200,day:this.get_utc_seconds(Date.now()-t.setDate(t.getDate()-1)),week:this.get_utc_seconds(Date.now()-a.setDate(a.getDate()-7)),month:this.get_utc_seconds(Date.now()-l.setMonth(l.getMonth()-1)),year:this.get_utc_seconds(Date.now()-n.setMonth(n.getMonth()-12))}},get_timeframe_from_timeframe_id:function(e){let t=this.get_timeframes_dict();if(null==t[e])throw`Wrong timeframe_id passed ${e}, valid intervals are: ${Object.keys(t).join(", ")}`;return t[e]},round_time_by_timeframe_id:function(e,t){return e-e%this.get_timeframe_from_timeframe_id(t)},set_default_time_interval:function(e="30_min",t){let a={epoch_begin:x.get_url_entry("epoch_begin"),epoch_end:x.get_url_entry("epoch_end")};const l=this.get_utc_seconds(Date.now());let n=this.get_timeframe_from_timeframe_id(e);return a.epoch_begin=l-n,a.epoch_end=l,null!=t&&(a.epoch_begin=this.round_time_by_timeframe_id(a.epoch_begin,t),a.epoch_end=this.round_time_by_timeframe_id(a.epoch_end,t)),x.set_key_to_url("epoch_begin",a.epoch_begin),x.set_key_to_url("epoch_end",a.epoch_end),a},check_and_set_default_time_interval:function(e="30_min",t,a=!1,l){let n=this.get_url_epoch_interval();return null==n.epoch_begin||null==n.epoch_end||null!=t&&1==t(n)?(n=this.set_default_time_interval(e,l),n):1==a?n:null},get_url_epoch_interval:function(){return{epoch_begin:x.get_url_entry("epoch_begin"),epoch_end:x.get_url_entry("epoch_end")}},from_utc_s_to_server_date:function(e){let t=1e3*e,a=new Date(t).getTimezoneOffset(),l=moment.tz(t,ntop_zoneinfo)._offset;return new Date(t+1e3*(l+a)*60)},get_date_format:async function(e,t,a){const l={csrf:t};let n=`${a}/lua/rest/v2/get/timeseries/date_format.lua`;const s=NtopUtils.buildURL(n,{is_range_picker:e});return await b.http_request(s,l)},from_utc_to_server_date_format:function(e,t){return null==t&&(t="DD/MMM/YYYY HH:mm"),moment.tz(e,ntop_zoneinfo).format(t)},copy_object_keys:function(e,t,a=!1){if(null!=e)for(let l in e)null!=e[l]&&"__proto__"!==l&&"constructor"!==l&&(1==a&&this.is_object(e[l])&&this.is_object(t[l])?this.copy_object_keys(e[l],t[l],a):t[l]=e[l])},get_cve_details_url:(e,t)=>"cve"==t?`https://nvd.nist.gov/vuln/detail/${e}`:"openvas"==t?`https://vulners.com/openvas/OPENVAS:${e}`:void 0,set_http_globals_headers(t){e=t},http_post_request:async function(e,t,a,l){if(null==t.csrf)throw`NULL csrf in ${e} POST request.`;return this.http_request(e,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)},a,l)},http_request:async function(t,a,l,n){try{null==a&&(a={}),null==a.headers&&(a.headers={}),null!=a.headers&&null!=e&&(a.headers={...a.headers,...e});let l=await fetch(t,a);if(!1===l.ok)return console.error(`http_request ${t}\n ok == false`),console.error(l),null;let s=await l.json();return!0===n?s:s.rsp}catch(e){if(console.error(e),console.error("URL: "+t),1==l)throw e;return null}},download_URI:function(e,t){var a=document.createElement("a");a.download=t,a.href=e,document.body.appendChild(a),a.click(),document.body.removeChild(a)},get_random_string:function(){return Math.random().toString(16).substr(2,8)},string_hash_code:function(e){let t,a,l=0;if(0===e.length)return l;for(t=0;t<e.length;t++)a=e.charCodeAt(t),l=(l<<5)-l+a,l|=0;return l},mod:function(e,t){return(e%=t)<0&&(e+=t),e}}}(),y=function(){let e={},t={};const a=e=>b.clone(e),l=function(e,l){for(let n in t){if(n==l)continue;(0,t[n])(a(e))}};return{get_status:function(t){return 1==t?e:a(e)},update_subscribers:function(){const e=this.get_status();l(e)},on_status_change:function(e,l,n){if(t[e]=l,1==n){let e=this.get_status();l(a(e))}},replace_status:function(t,a){!function(t){e=t}(t),l(t,a)},add_obj_to_status:function(e,t){let a=this.get_status();b.copy_object_keys(e,a),this.replace_status(a,t)},add_value_to_status:function(e,t,a){let l=this.get_status();l[e]=t,this.replace_status(l,a)}}}(),w={},x=function(){let e={};return b.copy_object_keys(w,e),{get_url_params:function(){return window.location.search.substring(1)},get_url_search_params:function(e){null==e&&(e=this.get_url_params());return new URLSearchParams(e)},get_url_entries:function(e){return this.get_url_search_params(e).entries()},get_url_entry:function(e,t){let a=this.get_url_entries(t);for(const[t,l]of a)if(t==e)return l;return null},get_url_object:function(e){let t=this.get_url_entries(e),a={};for(const[e,l]of t)a[e]=l;return a},open_new_window:function(e){null==e&&(e=window.location),window.open(e)},reload_url:function(){window.location.reload()},go_to_url:function(e){window.history.pushState({},"",window.location),window.location.replace(e)},replace_url:function(e){window.history.replaceState({},null,`?${e}`)},replace_url_and_reload:function(e){this.replace_url(e),this.reload_url()},serialize_param:function(e,t){return null==t&&(t=""),`${e}=${encodeURIComponent(t)}`},set_custom_key_serializer:function(t,a){e[t]=a},obj_to_url_params:function(t){let a=[];const l=this.serialize_param;for(let n in t){let s=e[n];null==s&&(s=l);let o=s(n,t[n]);a.push(o)}return a.join("&")},delete_params:function(e){let t=this.get_url_search_params();e.forEach((e=>{t.delete(e)})),this.replace_url(t.toString())},delete_key_from_url:function(e){let t=this.get_url_search_params();t.delete(e),this.replace_url(t.toString())},set_key_to_url:function(e,t){null==t&&(t="");let a=this.get_url_search_params();a.set(e,t),this.replace_url(a.toString())},add_obj_to_url:function(e,t){let a=this.obj_to_url_params(e),l=this.get_url_search_params(t),n=this.get_url_entries(a);for(const[e,t]of n)l.set(e,t);let s=l.toString();if(null!=t)return s;this.replace_url(s)}}}(),k={EPOCH_CHANGE:"epoch_change",FILTERS_CHANGE:"filters_change"},S={EPOCH_CHANGE:function(e,t){return e.epoch_begin!=t.epoch_begin||e.epoch_end!=t.epoch_end},FILTERS_CHANGE:function(e,t){return null==e.filters&&null!=t.filters||null!=e.filters&&null==t.filters||null!=e.filters&&null!=t.filters&&(e.filters.length!=t.filters.length||e.filters.some((e=>null==t.filters.find((t=>t.id==e.id)))))}},N={SHOW_MODAL_FILTERS:"show_modal_filters",MODAL_FILTERS_APPLY:"modal_filters_apply",SHOW_GLOBAL_ALERT_INFO:"show_global_alert_info",VIS_DATA_LOADED:"vis_data_loaded",CHANGE_PAGE_TITLE:"change_page_title",DATATABLE_LOADED:"datatable_loaded",GET_INTERFACE_FATA:"get_interface_data",COMPONENT_EPOCH_INTERVAL_CHANGE:"component_epoch_interval_change"},C=function(){const e="events_manager";let t={},a={};const l=e=>b.clone(e),n=function(e,t,a){for(let n in e){if(n==a)continue;(0,e[n])(l(t))}},s=(e,t)=>`${e}_${t}`;y.on_status_change(e,(function(e){for(let l in k){if(1==(0,S[l])(e,t)){let t=a[l];n(t,e)}}t=e}),!0);const o=function(e,t,l,o){null!=o&&(e=s(e,o));let i=a[e];null!=i&&n(i,t,l)},i=function(e,t,n,o,i){if(1==i&&(t=s(t,e)),null==a[t]&&(a[t]={}),1==o){let e=y.get_status();n(l(e))}a[t][e]=n};return{emit_custom_event:function(e,t,a){o(e,t,null,a)},on_custom_event:function(e,t,a,l){i(e,t,a,null,l)},emit_event:function(t,a,l){o(t,a,l),y.add_obj_to_status(a,e)},on_event_change:function(e,t,a,l){i(e,t,a,l)}}}();function A(e,t,a,l,n){this.name=e,this.update_url=t,this.url_params=a,this.units=l,this.refresh=n;let s=[],o="",i=[],r=[],c=[];var u=[],d=[],_=[],p=function(e,t){var a=500,l=325,n=52,s=14,o=250,i=116;$(e).hasClass("pie-chart-small")&&(l=250,n=(i=(a=330)/5+15)/2);var r=d3.layout.pie().value((function(e){return 0==e.value&&(e.value=1),e.value})),c=d3.scale.category20(),u=d3.svg.arc().startAngle((function(e){return e.startAngle})).endAngle((function(e){return e.endAngle})).innerRadius(n).outerRadius(i),d=d3.select(e).append("svg:svg").attr("width",a).attr("height",l).attr("viewBox","0 0 "+a+" "+l).attr("preserveAspectRatio","xMidYMid"),_=d.append("svg:g").attr("class","arc").attr("transform","translate("+a/2+","+l/2+")"),p=d.append("svg:g").attr("class","label_group").attr("transform","translate("+a/2+","+l/2+")"),f=d.append("svg:g").attr("class","center_group").attr("transform","translate("+a/2+","+l/2+")");_.append("svg:circle").attr("fill","#EFEFEF").attr("r",i),f.append("svg:circle").attr("fill","white").attr("r",n);var v=null,m=null;t&&(f.append("svg:text").attr("class","label").attr("dy",-15).attr("text-anchor","middle").text("TOTAL"),m=f.append("svg:text").attr("class","total").attr("dy",7).attr("text-anchor","middle").text("Waiting..."),v=f.append("svg:text").attr("class","units").attr("dy",21).attr("text-anchor","middle").text(t));return[_,r,m,v,c,o,u,p,f,i,s]}(e,l),f=p[0],v=p[1],m=p[2],h=p[4],g=p[5],b=p[6],y=p[7],w=p[9],x=p[10];function k(e,t){return e.label<t.label?-1:e.label>t.label?1:0}function S(e,t){var a,l;d[t]?(a=d[t].startAngle,l=d[t].endAngle):!d[t]&&d[t-1]?(a=d[t-1].endAngle,l=d[t-1].endAngle):!d[t-1]&&d.length>0?(a=d[d.length-1].endAngle,l=d[d.length-1].endAngle):(a=0,l=0);t=d3.interpolate({startAngle:a,endAngle:l},{startAngle:e.startAngle,endAngle:e.endAngle});return function(e){var a=t(e);return b(a)}}function N(e,t){s0=2*Math.PI,e0=2*Math.PI;t=d3.interpolate({startAngle:e.startAngle,endAngle:e.endAngle},{startAngle:s0,endAngle:e0});return function(e){var a=t(e);return b(a)}}function C(e,t){var a;a=d[t]?(d[t].startAngle+d[t].endAngle-Math.PI)/2:!d[t]&&d[t-1]?(d[t-1].startAngle+d[t-1].endAngle-Math.PI)/2:!d[t-1]&&d.length>0?(d[d.length-1].startAngle+d[d.length-1].endAngle-Math.PI)/2:0;var l=(e.startAngle+e.endAngle-Math.PI)/2,n=d3.interpolateNumber(a,l);return function(e){var t=n(e);return"translate("+Math.cos(t)*(w+x)+","+Math.sin(t)*(w+x)+")"}}this.update=function(){$.ajax({type:"GET",url:this.update_url,data:this.url_params,success:function(e){let t;"object"==typeof e?t=e:"string"==typeof e&&(t=jQuery.parseJSON(e)),t&&function(e){e.rsp&&(e=e.rsp);e.sort(k),s=e,d=_,u=v(s);var t=0;function a(e,a,l){return e.name=s[a].label,e.value=s[a].value,e.url=s[a].url,t+=e.value,e.value>0}(_=u.filter(a)).length>0&&d.length>0&&(f.selectAll("circle").remove(),m&&m.text((function(){return(t/1024).toFixed(1)})),o=f.selectAll("path").data(_),o.enter().append("svg:path").attr("stroke","white").attr("stroke-width",.5).attr("fill",(function(e,t){return h(t)})).transition().duration(g).attrTween("d",S),o.transition().duration(g).attrTween("d",S),o.exit().transition().duration(g).attrTween("d",N).remove(),i=y.selectAll("line").data(_),i.enter().append("svg:line").attr("x1",0).attr("x2",0).attr("y1",-w-3).attr("y2",-w-8).attr("stroke","gray").attr("transform",(function(e){return"rotate("+(e.startAngle+e.endAngle)/2*(180/Math.PI)+")"})),i.transition().duration(g).attr("transform",(function(e){return"rotate("+(e.startAngle+e.endAngle)/2*(180/Math.PI)+")"})),i.exit().remove(),r=y.selectAll("text.value").data(_).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?5:-7})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){return(e.value/t*100).toFixed(1)+"%"})),r.enter().append("svg:text").attr("class","value").attr("transform",(function(e){return"translate("+Math.cos((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+","+Math.sin((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+")"})).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?5:-7})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){if(t<=1)return"";return(e.value/t*100).toFixed(1)+"%"})),r.transition().duration(g).attrTween("transform",C),r.exit().remove(),c=y.selectAll("text.units").data(_).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?17:5})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){return e.name})).on("click",(function(e){e.url&&(window.location.href=e.url)})),c.enter().append("svg:text").attr("class","units").attr("transform",(function(e){return"translate("+Math.cos((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+","+Math.sin((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+")"})).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?17:5})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){return e.name})).on("click",(function(e){e.url&&(window.location.href=e.url)})),c.transition().duration(g).attrTween("transform",C),c.exit().remove())}(t)}})},this.update(),this.update()}window.ntopng_events=k,window.ntopng_events_manager=C,window.ntopng_status_manager=y,window.ntopng_utility=b,window.ntopng_url_manager=x,window.ntopng_sync=h,window.ntopng_custom_events=N,A.prototype.setUrlParams=function(e){this.url_params=e,this.forceUpdate()},A.prototype.forceUpdate=function(e){this.stopInterval(),this.update(),this.startInterval()},A.prototype.setInterval=function(e){this.pieInterval=e},A.prototype.stopInterval=function(){clearInterval(this.pieInterval)},A.prototype.startInterval=function(){this.pieInterval=setInterval(this.update(),this.refresh)};const E={},T={db_analyze:function(e,t,a){const{dataPointIndex:l}=a,{filter:n}=a.w.config;let s;if(a.w.config.filtering_labels&&(s=a.w.config.filtering_labels[l]),0==n.length||void 0===s)return;let o=ntopng_status_manager.get_status().filters;o.push({id:n[0],operator:"eq",value:s}),ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:o})},none:function(e,t,a){},standard:function(e,t,a){const{seriesIndex:l,dataPointIndex:n}=a,{series:s}=a.w.config;if(-1===l)return;if(void 0===s)return;const o=s[l];if(void 0!==o.base_url){const e=o.start_url||"",t=o.data[n].meta.url_query;location.href=`${o.base_url}?${e}${t}`}}},P={format_bytes:function(e,{config:t,seriesIndex:a,dataPointIndex:l}){return NtopUtils.bytesToSize(e)},format_pkts:function(e,{config:t,seriesIndex:a,dataPointIndex:l}){return NtopUtils.formatPackets(e)},format_value:function(e,{config:t,seriesIndex:a,dataPointIndex:l}){return NtopUtils.formatValue(e)},format_multiple_date:function(e,{config:t,seriesIndex:a,dataPointIndex:l}){return new Date(e[0])+" - "+new Date(e[1])},format_label_from_xy:function({series:e,seriesIndex:t,dataPointIndex:a,w:l}){const n=l.config.series[t].data[a],s=n.x,o=n.y;return`\n            <div class='apexcharts-theme-light apexcharts-active' id='test'>\n                <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n                    ${n.meta.label}\n                </div>\n                <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${l.config.xaxis.title.text}</b>: ${s}\n                    </div>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${l.config.yaxis[0].title.text}</b>: ${o}\n                    </div>\n                </div>\n            </div>`},format_label_from_xname:function({series:e,seriesIndex:t,dataPointIndex:a,w:l}){const n=l.config.series[t].data[a],s=n.name,o=n.y;return`\n            <div class='apexcharts-theme-light apexcharts-active' id='test'>\n                <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n                    ${n.meta.label}\n                </div>\n                <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${l.config.xaxis.title.text}</b>: ${s}\n                    </div>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${l.config.yaxis[0].title.text}</b>: ${o}\n                    </div>\n                </div>\n            </div>`}},U=P.format_value;class I{static registerWidget(e){if(null===e)throw new Error("The passed widget reference is null!");if(e.name in E)throw new Error(`The widget ${e.name} is already defined!`);E[e.name]=e}static getWidgetByName(e){if(e in E)return E[e];throw new Error(`Widget ${e} not found!`)}}class O{constructor(e,t={},a=0,l={}){this._fetchedData=[],this.name=e,this._updateTime=a,this._datasource=t,this._additionalParams=l}async init(){I.registerWidget(this),this._fetchedData=await this._fetchData(),this._updateTime>0&&setInterval((async()=>{await this.update(this._datasource.params)}),this._updateTime)}async destroy(){}async destroyAndUpdate(e={}){await this.destroy(),await this.update(e)}async updateByUrl(e){const t=new URL(`${location.origin}${this._datasource.name}`);let a=ntopng_url_manager.get_url_entries(e);for(const[e,l]of a)t.searchParams.set(e,l);this._datasource.endpoint=t.pathname+t.search,this._fetchedData=await this._fetchData()}async update(e={}){const t=new URL(`${location.origin}${this._datasource.name}`);for(const[a,l]of Object.entries(e))t.searchParams.set(a,l);this._datasource.endpoint=t.pathname+t.search,this._fetchedData=await this._fetchData()}async _fetchData(){const e=await fetch(`${http_prefix}${this._datasource.endpoint}`);return await e.json()}}const M=(e,t)=>{let a=t.position().top;const l=e.height(),n=$(window).height();if(l+a>=n){const s=n-a;s<=150?a=a-l+t.outerHeight():e.css({"max-height":s-20,"overflow-y":"auto"})}e.css("top",`${a}px`)};$(window).on("scroll",(function(){$(this).scrollTop()>=32?$("#n-navbar").addClass("scrolled bg-light"):$("#n-navbar").removeClass("scrolled bg-light")})),$((()=>{const e=()=>{if(0==$(".sidebar-close-layer").length){const e=$("<div class='sidebar-close-layer' style='display:none'></div>");e.on("click",(function(){$("#n-sidebar").removeClass("active"),e.fadeOut((function(){$(this).remove()}))})),$("#wrapper").append(e),e.fadeIn()}else $(".sidebar-close-layer").fadeOut((function(){$(this).remove()}));$("#n-sidebar").toggleClass("active")};$("#n-sidebar a.submenu").bind({mouseenter:function(){let e=$(this).parent().find("div[id$='submenu']");M(e,$(this)),e.show()},mouseleave:function(){$(this).parent().find("div[id$='submenu']").hide()}}),$("div[id$='submenu']").bind({mouseenter:function(){$(this).show()},mouseleave:function(){$(this).hide()}}),$("button[data-bs-toggle='sidebar']").on("click",(function(){e()}))})),$(window).on("resize",(function(){const e=$("#n-sidebar").find("div.show[id$='submenu']");if(e.length>0){const t=e.parent().find("a[data-bs-toggle='collapse']");M(e,t)}}));const j=function(){const e={series:[],chart:{height:"100%",width:"100%",toolbar:{tools:{zoomout:!1,download:!1,zoomin:!1,zoom:" ",selection:!1,pan:!1,reset:!1}},events:{}},xaxis:{tooltip:{enabled:!1}},yaxis:{labels:{show:!0,style:{colors:[],fontSize:"11px",fontWeight:400,cssClass:""}},title:{rotate:-90,offsetY:0,offsetX:0,style:{fontSize:"11px",fontWeight:900,cssClass:""}},tooltip:{enabled:!1}},grid:{show:!1},legend:{show:!0}},t=function(e){e.xaxis.labels.formatter=function(e,{series:t,seriesIndex:a,dataPointIndex:l,w:n}){return b.from_utc_to_server_date_format(e)}},l=function(){let t=b.clone(e);return b.copy_object_keys({chart:{stacked:!0,type:"bar",zoom:{enabled:!0,type:"x"}},tooltip:{x:{format:"dd MMM yyyy HH:mm:ss"},y:{}},xaxis:{labels:{show:!0,datetimeUTC:!1,formatter:null},axisTicks:{show:!1},type:"datetime",axisBorder:{show:!0},convertedCatToNumeric:!1},dataLabels:{enabled:!1},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"}},t,!0),t}(),n=function(){let t=b.clone(e);return b.copy_object_keys({chart:{stacked:!0,type:"area",zoom:{enabled:!0,type:"x"}},tooltip:{x:{format:"dd MMM yyyy HH:mm:ss"},y:{}},xaxis:{labels:{show:!0,datetimeUTC:!1,formatter:null},axisTicks:{show:!1},type:"datetime",axisBorder:{show:!0},convertedCatToNumeric:!1},dataLabels:{enabled:!1},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"}},t,!0),t}(),s=function(){let t=b.clone(e),l={chart:{stacked:!0,type:"polarArea",height:400},yaxis:{show:!0,labels:{formatter:a.bytesToSize}},dataLabels:{enabled:!0,formatter:function(e,t){return e?`${e.toFixed(1)}%`:"0%"}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},tooltip:{y:{formatter:a.bytesToSize}}};return b.copy_object_keys(l,t,!0),t}(),o=function(){let t=b.clone(e),l={chart:{stacked:!0,type:"donut",height:300},yaxis:{show:!0,labels:{formatter:a.bytesToSize}},dataLabels:{enabled:!0,formatter:function(e,t){return e?`${e.toFixed(1)}%`:"0%"}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},tooltip:{y:{formatter:v.getFormatter("number")}},noData:{text:"No Data",style:{color:void 0,fontSize:"24px",fontFamily:void 0}}};return b.copy_object_keys(l,t,!0),t}(),i=function(){let t=b.clone(e),l={chart:{stacked:!0,type:"radialBar",height:300},yaxis:{show:!0},dataLabels:{enabled:!0,formatter:function(e,t){return e}},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},tooltip:{y:{formatter:a.bytesToSize}},noData:{text:"No Data",style:{color:void 0,fontSize:"24px",fontFamily:void 0}},plotOptions:{radialBar:{offsetY:0,startAngle:0,endAngle:270,hollow:{margin:5,size:"30%",background:"transparent",image:void 0},dataLabels:{name:{show:!1},value:{show:!1}}}},legend:{show:!0,floating:!0,fontSize:"16px",position:"left",offsetX:160,offsetY:15,labels:{useSeriesColors:!0},markers:{size:0},formatter:function(e,t){return e+":  "+t.w.globals.series[t.seriesIndex]},itemMargin:{vertical:3}},responsive:[{breakpoint:480,options:{legend:{show:!1}}}]};return b.copy_object_keys(l,t,!0),t}(),r=function(){let t=b.clone(e),l={chart:{stacked:!0,type:"pie",height:400},yaxis:{show:!0,labels:{formatter:a.bytesToSize}},dataLabels:{enabled:!0,formatter:function(e,t){return e?`${e.toFixed(1)}%`:"0%"}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},tooltip:{y:{formatter:a.bytesToSize}}};return b.copy_object_keys(l,t,!0),t}(),c=function(){let t=b.clone(e);return b.copy_object_keys({chart:{type:"line",zoom:{enabled:!0,type:"x"}},tooltip:{shared:!0,x:{format:"dd MMM yyyy HH:mm:ss"},y:{}},xaxis:{labels:{show:!1,datetimeUTC:!1,formatter:null},axisTicks:{show:!0},type:"datetime",axisBorder:{show:!0},convertedCatToNumeric:!1},stroke:{show:!0,width:2,curve:"smooth"},grid:{show:!0},dataLabels:{enabled:!1}},t,!0),t}(),u=function({series:e,seriesIndex:t,dataPointIndex:a,w:l}){const n=l.config.series[t].data[a],s=n.name,o=n.y;return`\n          <div class='apexcharts-theme-light apexcharts-active' id='test'>\n              <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n                  ${n.meta.label}\n              </div>\n              <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n                  <div class='apexcharts-tooltip-text text-left'>\n                      <b>${l.config.xaxis.title.text}</b>: ${s}\n                  </div>\n                  <div class='apexcharts-tooltip-text text-left'>\n                      <b>${l.config.yaxis[0].title.text}</b>: ${o}\n                  </div>\n              </div>\n          </div>`},d=function(){let t=b.clone(e),a={chart:{width:"100%",height:"100%",stacked:!0,type:"bubble",zoom:{autoScaleYaxis:!0}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},events:{dataPointSelection:"standard"},grid:{padding:{left:6}},xaxis:{type:"numeric",labels:{}},yaxis:{type:"numeric",forceNiceScale:!0,labels:{}},dataLabels:{enabled:!1},tooltip:{custom:u}};return b.copy_object_keys(a,t,!0),t}();return{typeChart:{TS_LINE:"TS_LINE",TS_STACKED:"TS_STACKED",TS_COLUMN:"TS_COLUMN",PIE:"PIE",DONUT:"DONUT",RADIALBAR:"RADIALBAR",RADAR:"RADAR",BUBBLE:"BUBBLE",BASE:"BASE"},newChart:function(a){let u,_={};if(a==this.typeChart.TS_STACKED)_=b.clone(n),t(_);else if(a==this.typeChart.TS_LINE)_=b.clone(c),t(_);else if(a==this.typeChart.TS_COLUMN)_=b.clone(l),t(_);else if(a==this.typeChart.PIE)_=b.clone(r);else if(a==this.typeChart.DONUT)_=b.clone(o);else if(a==this.typeChart.RADIALBAR)_=b.clone(i);else if(a==this.typeChart.POLAR)_=b.clone(s);else if(a==this.typeChart.BUBBLE)_=b.clone(d);else{if(a!=this.typeChart.BASE)throw`ntopChartApex::newChart: chart type = ${a} unsupported`;_=b.clone(e)}const p=e=>{if("string"==typeof e?.yaxis?.labels?.formatter){const t=e.yaxis.labels.formatter;let a=v.getFormatter(t);null!=a?e.yaxis.labels.formatter=a:"formatValue"==t?e.yaxis.labels.formatter=v.getFormatter("number"):"bytesToSize"==t&&(e.yaxis.labels.formatter=v.getFormatter("bytes"))}};return{drawChart:function(e,t){p(t),b.copy_object_keys(t,_,!0),u=new ApexCharts(e,_),u.render()},to_data_uri:async function(e){if(null==u)return;return(await u.dataURI(e)).imgURI},destroyChart:function(){null!=u&&u.destroy()},updateChart:function(e){null!=u&&(p(e),u.updateOptions(e,!1,!1,!1))},updateSeries:function(e){null!=u&&u.updateSeries(e)},registerEvent:function(e,t,a=!1){_.chart.events[e]=t,1==a&&u.updateOptions(_)}}}}}(),L=function(){let e={};return{addHandler:function(t){let a=e[t.handlerId];return null==a&&(a=[],e[t.handlerId]=a),a.push((()=>{t.onClick()})),`window['_DataTableButtonsOnClick']('${t.handlerId}', '${a.length-1}')`},getHandler:function(t,a){let l=e[t];return null==l?null:l[a]},deleteHandlersById:function(t){e[t]=null}}}();window._DataTableButtonsOnClick=function(e,t){let a=L.getHandler(e,t);null!=a&&a()};class F{static getStdDatatableConfig(e=[],t="<'row'<'col-sm-2 d-inline-block'l><'col-sm-10 text-end d-inline-block'<'dt-search'f>B>rtip>"){return 0==e.length&&(t="fBrtip"),{dom:t,pagingType:"full_numbers",lengthMenu:[[10,20,50,100],[10,20,50,100]],language:{search:i18n.script_search,paginate:{previous:"&lt;",next:"&gt;",first:"«",last:"»"}},saveState:!0,responsive:!0,buttons:{buttons:e,dom:{button:{className:"btn btn-link"},container:{className:"d-inline-block"}}}}}static createLinkCallback(e){let t="";return t=`onclick="${L.addHandler(e.handler)}"`,`<a href=#\n                   ${t}>\n                   ${e.text||""}\n                </a>`}static createActionButtons(e=[]){const t=[];e.forEach(((e,a)=>{let l="";if(e.handler){l=`onclick="${L.addHandler(e.handler)}"`}let n=`\n            <li>\n                <a\n                    ${e.href||e.modal?`href='${e.href||e.modal}'`:""}\n                    ${l}\n                    ${e.onclick?`onclick='${e.onclick}'`:""}\n                    ${e.modal?"data-bs-toggle='modal'":""}\n                    class='dropdown-item ${e.class?e.class:""}'\n                    ${e.hidden?"style='display: none'":""}\n                    ${e.external?"target='_about'":""}\n                    >\n                    <i class='fas ${e.icon}'></i> ${e.title||""}\n                </a>\n            </li>\n            `;t.push(n)}));return`<div class='dropdown'><button type="button" class="btn btn-sm btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false"><i class="fas fa-align-justify"></i></button>${`<ul class="dropdown-menu">${t.join("")}</ul>`}</div>`}static deleteButtonHandlers(e){L.deleteHandlersById(e)}static setAjaxConfig(e,t,a="",l="get",n={}){return e.ajax={url:t,type:l,dataSrc:a,data:function(e){return $.extend({},e,n)}},e}static extendConfig(e,t){return t.hasFilters&&(t.stateSaveCallback=function(e,t){localStorage.setItem("DataTables_"+e.sInstance,JSON.stringify(t))},t.stateLoadCallback=function(e){return JSON.parse(localStorage.getItem("DataTables_"+e.sInstance))},t.stateSaveParams=function(e,t){$("[data-filter]").each((function(){const e=$(this).find("li.active").data("filter-key");e&&(t.filters||(t.filters={}),t.filters[$(this).data("filter")]=e)}))}),$.extend({},e,t)}static secondsToHHMMSS(e){const t=e=>`${e}`.padStart(2,"0"),a=e%60,l=Math.floor(e/60)%60;return`${t(Math.floor(e/3600))}:${t(l)}:${t(a)}`}static openEditModalByQuery(e){const t=new URLSearchParams(window.location.search);if(!t.has(e.paramName))return;const a=t.get(e.paramName),l=e.datatableInstance.data().toArray().find((t=>t[e.paramName]==a));if("function"==typeof e.cancelIf&&e.cancelIf(l))return;const n=$(`#${e.modalHandler.getModalID()}`);if(void 0!==l&&(e.modalHandler.invokeModalInit(l),n.modal("show")),!t.has("referer"))return void n.on("hidden.bs.modal",(function(t){const a=new URL(window.location.href);a.searchParams.delete(e.paramName),history.replaceState({},"",a.toString())}));const s=t.get("referer");n.on("hidden.bs.modal",(function(e){window.location=s}))}static addToggleColumnsDropdown(e,t=((e,t)=>{})){if(void 0===e)throw"The $table is undefined!";const a=e.table().node().id;F._loadColumnsVisibility(e).then((function(l){let n=[-1];l.success?n=l.columns.map((e=>parseInt(e))):console.warn(l.message);const s=[],o=[],i=$(e.context[0].nTableWrapper);e.columns().every((function(t){e.column(t).visible()?s.push({index:t,name:this.header().textContent,label:this.i18n.name}):o.push(t)}));const r=$('\n                <div class="btn-group">\n                    <button type="button" class="btn btn-link dropdown-toggle" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\n                        <i class="fas fa-eye"></i>\n                    </button>\n                </div>\n            '),c=$('<div class="dropdown-menu dropdown-menu-right" style=\'width: max-content;\'><h6 class="dropdown-header">Show Columns</h6></div>'),u=$("<div class='px-4'></div>");for(let l=0;l<s.length;l++){const i=s[l];if(""==i.name)continue;const r=`toggle-${i.name.split().join("_")}`,c=-1===n.indexOf(i.index);if(!c){e.column(i.index).visible(!1)}const d=$(`<input class="form-check-input" ${c?"checked":""} type="checkbox" id="${r}">`),_=$(`\n                    <div class="form-check form-switch">\n                        <label class="form-check-label" for="${r}">\n                            ${i.name}\n                        </label>\n                    </div>\n                `);d.on("change",(function(l){$(".overlay").toggle(500);const n=e.column(i.index);n.visible(!n.visible());const s=n.visible(),r=[];e.columns().every((function(t){e.column(t).visible()||-1!==o.indexOf(t)||r.push(t)})),$.post(`${http_prefix}/lua/datatable_columns.lua`,{action:"save",table:a,columns:r.join(","),csrf:window.__CSRF_DATATABLE__}).then((function(e){e.success||console.warn(e.message)})),void 0!==t&&t(n,s)})),_.prepend(d),u.append(_)}c.on("click.bs.dropdown",(function(e){e.stopPropagation()})),r.append(c.append(u)),i.find(".dt-search").parent().append(r)}))}static async _loadColumnsVisibility(e){const t=e.table().node().id;return $.get(`${http_prefix}/lua/datatable_columns.lua?table=${t}&action=load`)}}class R{static alertSeverityAndType(e,t,a){return`${R.formatValueLabel(e,t,a)} ${R.formatValueLabel(a.alert_id,t,a)}`}static hideIfZero(e,t,l,n){let s=void 0!==e.color?e.color:"#aaa",o=void 0!==e.value?e.value:e;"display"===t&&0===parseInt(o)&&(s="#aaa");let i=`<span style='color: ${s}'>${a.fint(o)}</span>`;return void 0!==e.url&&(i=`<a href="${e.url}">${i}</a>`),i}static secondsToTime(e,t,l,n){return"display"===t?a.secondsToTime(e):e}static filterize(e,t,l,n,s,o,i,r){let c=`<a class='tag-filter' data-tag-key='${e}' title='${s||t}' data-tag-value='${t}' data-tag-label='${n||l||t}' href='javascript:void(0)'>${o||l||t}</a>`;if(null!=i)if(i){if(t){c+=` <a href='${a.buildURL(`${http_prefix}/lua/pro/enterprise/snmp_device_details.lua?host=${t}`)}'data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`}}else if(r&&t){c+=` <a href='${a.buildURL(`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${r}&snmp_port_idx=${t}`)}'data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`}return c}static formatValueLabel(e,t,a,l){if("display"!==t)return e.value;let n=e.label;return 1==l&&0==e.value&&(n=""),e.color&&(n=`<span class='font-weight-bold' style='color: ${e.color}'>${n}</span>`),n}static formatCategory(e,t,a,l){if("display"!==t)return e.value;let n=`<a class='tag-filter' data-tag-key='alert_category' data-tag-value='${e.value}' data-tag-label='${e.label}' href='javascript:void(0)'><i class="fa fas ${e.icon}" title="${e.label}"></i></a>`;return 1==l&&0==e.value&&(n=""),n}static formatScore(e,t,a,l){if("display"!==t)return e.value;let n=e.label;return 1==l&&0==e.value&&(n=""),e.color&&(n=`<span class='font-weight-bold' style='color: ${e.color}'>${n}</span>`),`<a class='tag-filter' data-tag-key='score' title='${e.label}' data-tag-value='${e.value}' data-tag-label='${e.label}' href='javascript:void(0)'>${n}</a>`}static formatMessage(e,t,a,l){if("display"!==t)return e.value;let n=e.descr;return e.shorten_descr&&(n=`<span title="${e.descr}">${e.shorten_descr}</span>`),n}static formatTraffic(e,t,l,n){if("display"!==t)return e.total_bytes;return`${a.formatPackets(e.total_packets)} / ${a.bytesToVolume(e.total_bytes)}`}static formatSubtype(e,t,a,l){if("display"!==t)return e;return R.filterize("subtype",e,e)}static filterize_2(e,t,a,l,n,s){return null==t||0==t&&(null==a||""==a)?"":`<a class='tag-filter' data-tag-key='${e}' title='${n||t}' data-tag-value='${t}' data-tag-label='${l||a||t}' href='javascript:void(0)'>${s||a||t}</a>`}static getFormatGenericField(e,t){return function(a,l,n){if("display"!==l)return a.value;if(1==t&&0==a?.value)return"";let s="";return void 0!==a.reference&&(s=a.reference),R.filterize_2(e,n[e].value,n[e].label,n[e].label,n[e].label)+" "+s}}static formatSNMPInterface(e,t,a){if("display"!==t)return e.value;let l=R.filterize("snmp_interface",`${a.ip}_${e.value}`,e.label,e.label,e.label,null,!1,a.ip);return e.color&&(l=`<span class='font-weight-bold' style='color: ${e.color}'>${l}</span>`),l}static formatSNMPIP(e,t,a,l){return"display"!==t?e:R.filterize("ip",e,e,e,e,null,!0)}static formatNetwork(e,t,a,l){return"display"!==t?e:R.filterize("network_name",e,e,e,e,null,!1)}static formatProbeIP(e,t,a,l){if("display"!==t)return e;return R.filterize("probe_ip",e.value,e.label,e.label,e.label_long)}static formatHost(e,t,a,l){if("display"!==t)return e;let n="";void 0!==e.reference&&(n=e.reference);let s,o,i="";return e.label&&e.label!=e.value?(s="name",o=e.label_long,i=R.filterize("name",e.label_long,e.label,e.label,e.label_long)):(s="ip",o=e.value,i=R.filterize("ip",e.value,e.label,e.label,e.label_long)),a.vlan_id&&""!=a.vlan_id&&"0"!=a.vlan_id&&(i=R.filterize(s,`${o}@${a.vlan_id}`,`${e.label}@${a.vlan_id}`,`${e.label}@${a.vlan_id}`,`${e.label_long}@${a.vlan_id}`)),e.country&&(i+=R.filterize("country",e.country,e.country,e.country,e.country,' <img src="'+http_prefix+'/dist/images/blank.gif" class="flag flag-'+e.country.toLowerCase()+'"></a> ')),a.role&&"attacker"==a.role.value?i=i+" "+R.filterize("role",a.role.value,'<i class="fas fa-skull" title="'+a.role.label+'"></i>',a.role.label):a.role&&"victim"==a.role.value&&(i=i+" "+R.filterize("role",a.role.value,'<i class="fas fa-sad-tear" title="'+a.role.label+'"></i>',a.role.label)),a.role_cli_srv&&"client"==a.role_cli_srv.value?i=i+" "+R.filterize("role_cli_srv",a.role_cli_srv.value,'<i class="fas fa-long-arrow-alt-right" title="'+a.role_cli_srv.label+'"></i>',a.role_cli_srv.label):a.role_cli_srv&&"server"==a.role_cli_srv.value&&(i=i+" "+R.filterize("role_cli_srv",a.role_cli_srv.value,'<i class="fas fa-long-arrow-alt-left" title="'+a.role_cli_srv.label+'"></i>',a.role_cli_srv.label)),i+" "+n}static filterizeVlan(e,t,l,n,s,o){let i=n,r=s,c=o;return e.vlan&&0!=e.vlan.value&&(i=`${n}@${e.vlan.value}`,r=`${s}@${e.vlan.label}`,c=`${o}@${e.vlan.title}`),r=a.shortenLabel(r,16,"."),R.filterize(l,i,r,r,c)}static formatFlowTuple(e,t,a,l){let n=e.active_url?`<a href="${e.active_url}"><i class="fas fa-stream"></i></a>`:"",s="";if(e.cli_ip.name){let t="";e.cli_ip.label_long&&(t=e.cli_ip.value+" ["+e.cli_ip.label_long+"]"),s=R.filterizeVlan(e,a,"cli_name",e.cli_ip.name,e.cli_ip.label,t)}else s=R.filterizeVlan(e,a,"cli_ip",e.cli_ip.value,e.cli_ip.label,e.cli_ip.label_long);let o="";e.cli_ip.country&&"nil"!==e.cli_ip.country&&(o=R.filterize("cli_country",e.cli_ip.country,e.cli_ip.country,e.cli_ip.country,e.cli_ip.country,' <img src="'+http_prefix+'/dist/images/blank.gif" class="flag flag-'+e.cli_ip.country.toLowerCase()+'"></a> '));let i=e.cli_port&&e.cli_port>0?":"+R.filterize("cli_port",e.cli_port,e.cli_port):"",r="";1==e.cli_ip.blacklisted&&(r=" <i class='fas fa-ban fa-sm' title='"+i18n("hosts_stats.blacklisted")+"'></i>");let c="";if(e.srv_ip.name){let t="";e.srv_ip.label_long&&(t=e.srv_ip.value+" ["+e.srv_ip.label_long+"]"),c=R.filterizeVlan(e,a,"srv_name",e.srv_ip.name,e.srv_ip.label,t)}else c=R.filterizeVlan(e,a,"srv_ip",e.srv_ip.value,e.srv_ip.label,e.srv_ip.label_long);let u=e.srv_port&&e.srv_port>0?":"+R.filterize("srv_port",e.srv_port,e.srv_port):"",d="";e.srv_ip.country&&"nil"!==e.srv_ip.country&&(d=R.filterize("srv_country",e.srv_ip.country,e.srv_ip.country,e.srv_ip.country,e.srv_ip.country,' <img src="'+http_prefix+'/dist/images/blank.gif" class="flag flag-'+e.srv_ip.country.toLowerCase()+'"></a> '));let _="";1==e.srv_ip.blacklisted&&(_=" <i class='fas fa-ban fa-sm' title='"+i18n("hosts_stats.blacklisted")+"'></i>");let p="",f="";return a.cli_role&&("attacker"==a.cli_role.value?p+=R.filterize("role","attacker",'<i class="fas fa-skull" title="'+a.cli_role.label+'"></i>',a.cli_role.tag_label):"victim"==a.cli_role.value&&(p+=R.filterize("role","victim",'<i class="fas fa-sad-tear" title="'+a.cli_role.label+'"></i>',a.cli_role.tag_label))),a.srv_role&&("attacker"==a.srv_role.value?f+=R.filterize("role","attacker",'<i class="fas fa-skull" title="'+a.srv_role.label+'"></i>',a.srv_role.tag_label):"victim"==a.srv_role.value&&(f+=R.filterize("role","victim",'<i class="fas fa-sad-tear" title="'+a.srv_role.label+'"></i>',a.srv_role.tag_label))),`${n} ${s}${r}${o}${i} ${p} ${e.cli_ip.reference} <i class="fas fa-exchange-alt fa-lg" aria-hidden="true"></i> ${c}${_}${d}${u} ${f} ${e.srv_ip.reference}`}static formatSubtypeValueLabel(e,t,a,l){if("display"!==t)return e.name;return R.filterize("subtype",e.value,e.name,e.fullname,e.fullname)}static formatNameDescription(e,t,a,l){if("display"!==t)return e.name;return R.filterize("alert_id",e.value,e.name,e.fullname,e.fullname)}static applyCellStyle(e,t,a,l,n){t.highlight&&$(e).css("border-left","5px solid "+t.highlight)}}function D(e,t){const a=Object.create(null),l=e.split(",");for(let e=0;e<l.length;e++)a[l[e]]=!0;return t?e=>!!a[e.toLowerCase()]:e=>!!a[e]}window.do_pie=function(e,t,a,l,n){var s=new A(e,t,a,l,n);return n&&s.setInterval(setInterval((function(){s.update()}),n)),s},window.DataTableUtils=F,window.DataTableFiltersMenu=class{constructor({tableAPI:e,filterMenuKey:t,filterTitle:a,filters:l,columnIndex:n,icon:s=null,extraAttributes:o="",id:i=null,url:r=null,urlParams:c=null,removeAllEntry:u=!1,callbackFunction:d=null}){this.rawFilters=l,this.tableAPI=e,this.filterTitle=a,this.icon=s,this.filterMenuKey=t,this.columnIndex=n,this.preventUpdate=!1,this.currentFilterSelected=void 0,this.$datatableWrapper=$(e.context[0].nTableWrapper),this.extraAttributes=o,this.id=i,this.url=r,this.removeAllEntry=u,this.callbackFunction=d}get selectedFilter(){return this.currentFilterSelected}init(){const e=this;return this.$datatableWrapper.on("init.dt",(function(){e._render(e.rawFilters)})),this.tableAPI.on("draw",(function(){e._update()})),e}_countEntries(e,t=[]){void 0===e&&console.error("DataTableFiltersMenu::_countEntries() => the passed regex is undefined!");const a=new RegExp(e);return t.filter((e=>a.test(e))).length}_createMenuEntry(e){const t=this;let a=$(`<li class='dropdown-item pointer'>${e.label} </li>`);if(t.url){if(a=$(`<li class='dropdown-item pointer'><a href=# class='p-1 standard-color'>${e.label} </li>`),1==e.currently_active){0==t.$dropdown.title.parent().find("i.fas").length&&t.$dropdown.title.parent().prepend("<i class='fas fa-filter'></i>");const l=a.html();t.$dropdown.title.html(l),t.$dropdown.container.find("li").removeClass("active"),"all"!==e.key&&a.addClass("active")}}else if(void 0!==e.regex&&(void 0===e.countable||e.countable)){const t=this.tableAPI.columns(this.columnIndex).data()[0],l=this._countEntries(e.regex,t),n=$(`<span class='counter'>(${l})</span>`);0==l&&a.hide(),a.append(n)}return a.on("click",(function(l){0==t.$dropdown.title.parent().find("i.fas").length&&t.$dropdown.title.parent().prepend("<i class='fas fa-filter'></i>");const n=a.html();if(t.$dropdown.title.html(n),t.$dropdown.container.find("li").removeClass("active"),"all"!==e.key&&a.addClass("active"),t.callbackFunction)return t.callbackFunction(t.tableAPI,e),void(e.callback&&e.callback());if(t.url){t.urlParams=window.location.search;const a=new URLSearchParams(t.urlParams);a.set(t.filterMenuKey,void 0!==e.id?e.id:""),window.history.pushState("","",window.location.pathname+"?"+a.toString()),location.reload()}else t.preventUpdate=!0,e.callback&&e.callback(),t.tableAPI.column(t.columnIndex).search(e.regex,!0,!1).draw(),t.currentFilterSelected=e})),a}_createFilters(e){const t={};for(const a of e){const e=this._createMenuEntry(a);t[a.key]={filter:a,$node:e}}return t}_render(e){if(void 0===this.columnIndex)$(`<span id="${this.id}" ${this.extraAttributes} title="${this.filterTitle}">${this.icon||this.filterTitle}</span>`).insertBefore(this.$datatableWrapper.find(".dataTables_filter").parent());else{const t=$(`<div id='${this.filterMenuKey}_dropdown' class='dropdown d-inline'></div>`),a=$("<button class='btn-link btn dropdown-toggle' data-bs-toggle=\"dropdown\" type='button'></button>"),l=$(`<span class='filter-title'>${this.filterTitle}</span>`);a.append(l),this.$dropdown={container:t,title:l,button:a},this.filters=this._createFilters(e);const n=$(`<ul class='dropdown-menu dropdown-menu-lg-end scrollable-dropdown' id='${this.filterMenuKey}_dropdown_menu'></ul>`);for(const[e,t]of Object.entries(this.filters))n.append(t.$node);if(!this.removeAllEntry){const e=this._generateAllFilter();n.prepend(this._createMenuEntry(e))}t.append(a),t.append(n),t.insertBefore(this.$datatableWrapper.find(".dataTables_filter").parent()),this._selectFilterFromState(this.filterMenuKey)}}_selectFilterFromState(e){this.tableAPI.state&&this.tableAPI.state.loaded()&&this.tableAPI.state.loaded().filters&&tableAPI.state.save()}_generateAllFilter(){return{key:"all",label:i18n_ext.all,regex:"",countable:!1,callback:()=>{this.$dropdown.title.parent().find("i.fas.fa-filter").remove(),this.$dropdown.title.html(`${this.filterTitle}`)}}}_update(){if(void 0!==this.filters)if(this.preventUpdate)this.preventUpdate=!1;else for(const[e,t]of Object.entries(this.filters)){if(0==t.countable||0==t.filter.countable)continue;const e=this.tableAPI.columns(this.columnIndex).data()[0],a=this._countEntries(t.filter.regex,e);0==a?t.$node.hide():t.$node.show(),t.$node.find(".counter").text(`(${a})`),this.$dropdown.button.find(".counter").text(`(${a})`)}}},window.DataTableRenders=R,window.ChartWidget=class extends O{constructor(e,t="line",a={},l=0,n={}){super(e,a,l,n),this._chartType=t,this._chart={},this._$htmlChart=document.querySelector(`#canvas-widget-${e}`)}static registerEventCallback(e,t,a){setTimeout((async()=>{try{const l=I.getWidgetByName(e),n={chart:{events:{[t]:a}}};await l._chart.updateOptions(n)}catch(e){}}),1e3)}_generateConfig(){const e={series:[],tooltip:{enabledOnSeries:[0],x:{show:!0,format:"dd/MM/yyyy HH:mm:ss"},y:{formatter:function(e,{series:t,seriesIndex:a,dataPointIndex:l,w:n}){return e}},z:{show:!1}},chart:{type:this._chartType,events:{},height:"100%",toolbar:{show:!1}},xaxis:{labels:{style:{fontSize:"14px"}},tooltip:{enabled:!0,formatter:function(e){return e}}},yaxis:{labels:{style:{fontSize:"14px"}},tooltip:{enabled:!0,formatter:function(e){return e}}},zaxis:{labels:{style:{fontSize:"14px"}},tooltip:{enabled:!0}},dataLabels:{enabled:!0,style:{fontSize:"14px"}},labels:[],legend:{show:!0,fontSize:"14px",position:"bottom",onItemClick:{toggleDataSeries:!0}},plotOptions:{bar:{borderRadius:4,horizontal:!0}},noData:{text:"No Data",align:"center",verticalAlign:"middle",style:{fontSize:"24px"}}};if(this._additionalParams&&this._additionalParams.apex){return Object.assign(e,this._additionalParams.apex)}return e}_buildTooltip(e,t){if(e.tooltip.y={formatter:function(e,{series:t,seriesIndex:a,dataPointIndex:l,w:n}){return e}},t.tooltip){for(const a in t.tooltip)if("x"===a||"y"===a||"z"===a){const l=t.tooltip[a].formatter;e.tooltip[a]||(e.tooltip[a]={}),e.tooltip[a].formatter=P[l]||NtopUtils[l]}t.tooltip.custom&&(e.tooltip.custom=P[t.tooltip.custom]||NtopUtils[t.tooltip.custom])}}_buildAxisFormatter(e,t){const a=e[t];if(void 0!==a&&void 0!==a.labels&&void 0!==a.labels.ntop_utils_formatter&&"none"!==a.labels.ntop_utils_formatter){const e=a.labels.ntop_utils_formatter;void 0===NtopUtils[e]?console.error(`xaxis: Formatting function '${e}' didn't found inside NtopUtils.`):a.labels.formatter=NtopUtils[e]}}_buildDataLabels(e,t){if(t.dataLabels)for(const[a,l]of Object.entries(t.dataLabels))e.dataLabels[a]=l;let a=e.dataLabels.formatter;a&&P[a]&&(e.dataLabels.formatter=P[a])}_buildConfig(){const e=this._generateConfig(),t=this._fetchedData.rsp,a=["series","xaxis","yaxis","colors","labels","fill","filter","filtering_labels"];for(const l of a)void 0!==t[l]&&(void 0!==e[l]?e[l]=Object.assign(e[l],t[l]):e[l]=t[l]);if(t.events)for(const a in t.events)e.chart.events[a]=T[t.events[a]];return void 0!==t.horizontal_chart&&(e.plotOptions.bar.horizontal=t.horizontal_chart),this._buildTooltip(e,t),this._buildAxisFormatter(e,"xaxis"),this._buildAxisFormatter(e,"yaxis"),this._buildDataLabels(e,t),e}_initializeChart(){const e=this._buildConfig();this._chartConfig=e,this._chart=new ApexCharts(this._$htmlChart,this._chartConfig),this._chart.render()}async init(){await super.init(),this._initializeChart()}async destroy(){await super.destroy(),this._chart.destroy(),this._chart=null}async update(e={}){if(void 0!==this._chartConfig&&(e?await super.update(e):await super.updateByUrl(),null!=this._chart)){const{colors:e,series:t,dataLabels:a,labels:l,xaxis:n,filtering_labels:s}=this._fetchedData.rsp;if(this._chartConfig.colors=e,this._chartConfig.series=t,n&&n.categories&&(this._chartConfig.xaxis.categories=n.categories),s&&(this._chartConfig.filtering_labels=s),a){let e=this._chartConfig.dataLabels.formatter;this._chartConfig.dataLabels.formatter=e&&P[e]?P[e]:U}l&&(this._chartConfig.labels=l),this._chart.updateOptions(this._chartConfig,!0)}}async destroyAndUpdate(e={}){await super.destroyAndUpdate(e),this._initializeChart()}},window.WidgetUtils=I,window.ntopChartApex=j,$((function(){function e(e){if("mousedown"==e.type&&(e.metaKey||e.ctrlKey||2!==e.which))return;const t=$(this).data("id");$.post(`${http_prefix}/lua/update_blog_posts.lua`,{blog_notification_id:t,csrf:window.__BLOG_NOTIFICATION_CSRF__},(e=>{if(e.success){$(this).off("click").off("mousedown").attr("data-read","true").data("read","true").find(".badge").remove();const e=$(".blog-notification[data-read='false']").length;0==e?$(".notification-bell").remove():$(".notification-bell").html(e)}}))}$(".blog-notification[data-read='false']").on("click",e).on("mousedown",e)}));const z=D("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt"),q=D("itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly");function B(e){return!!e||""===e}function V(e){if(fe(e)){const t={};for(let a=0;a<e.length;a++){const l=e[a],n=be(l)?W(l):V(l);if(n)for(const e in n)t[e]=n[e]}return t}return be(e)||we(e)?e:void 0}const H=/;(?![^(]*\))/g,G=/:(.+)/;function W(e){const t={};return e.split(H).forEach((e=>{if(e){const a=e.split(G);a.length>1&&(t[a[0].trim()]=a[1].trim())}})),t}function K(e){let t="";if(be(e))t=e;else if(fe(e))for(let a=0;a<e.length;a++){const l=K(e[a]);l&&(t+=l+" ")}else if(we(e))for(const a in e)e[a]&&(t+=a+" ");return t.trim()}function J(e){if(!e)return null;let{class:t,style:a}=e;return t&&!be(t)&&(e.class=K(t)),a&&(e.style=V(a)),e}const Y=D("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot"),Z=D("svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view"),X=D("area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr");function Q(e,t){if(e===t)return!0;let a=he(e),l=he(t);if(a||l)return!(!a||!l)&&e.getTime()===t.getTime();if(a=ye(e),l=ye(t),a||l)return e===t;if(a=fe(e),l=fe(t),a||l)return!(!a||!l)&&function(e,t){if(e.length!==t.length)return!1;let a=!0;for(let l=0;a&&l<e.length;l++)a=Q(e[l],t[l]);return a}(e,t);if(a=we(e),l=we(t),a||l){if(!a||!l)return!1;if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const a in e){const l=e.hasOwnProperty(a),n=t.hasOwnProperty(a);if(l&&!n||!l&&n||!Q(e[a],t[a]))return!1}}return String(e)===String(t)}function ee(e,t){return e.findIndex((e=>Q(e,t)))}const te=e=>be(e)?e:null==e?"":fe(e)||we(e)&&(e.toString===ke||!ge(e.toString))?JSON.stringify(e,ae,2):String(e),ae=(e,t)=>t&&t.__v_isRef?ae(e,t.value):ve(t)?{[`Map(${t.size})`]:[...t.entries()].reduce(((e,[t,a])=>(e[`${t} =>`]=a,e)),{})}:me(t)?{[`Set(${t.size})`]:[...t.values()]}:!we(t)||fe(t)||Se(t)?t:String(t),le={},ne=[],se=()=>{},oe=()=>!1,ie=/^on[^a-z]/,re=e=>ie.test(e),ce=e=>e.startsWith("onUpdate:"),ue=Object.assign,de=(e,t)=>{const a=e.indexOf(t);a>-1&&e.splice(a,1)},_e=Object.prototype.hasOwnProperty,pe=(e,t)=>_e.call(e,t),fe=Array.isArray,ve=e=>"[object Map]"===$e(e),me=e=>"[object Set]"===$e(e),he=e=>"[object Date]"===$e(e),ge=e=>"function"==typeof e,be=e=>"string"==typeof e,ye=e=>"symbol"==typeof e,we=e=>null!==e&&"object"==typeof e,xe=e=>we(e)&&ge(e.then)&&ge(e.catch),ke=Object.prototype.toString,$e=e=>ke.call(e),Se=e=>"[object Object]"===$e(e),Ne=e=>be(e)&&"NaN"!==e&&"-"!==e[0]&&""+parseInt(e,10)===e,Ce=D(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),Ae=D("bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo"),Ee=e=>{const t=Object.create(null);return a=>t[a]||(t[a]=e(a))},Te=/-(\w)/g,Pe=Ee((e=>e.replace(Te,((e,t)=>t?t.toUpperCase():"")))),Ue=/\B([A-Z])/g,Ie=Ee((e=>e.replace(Ue,"-$1").toLowerCase())),Oe=Ee((e=>e.charAt(0).toUpperCase()+e.slice(1))),Me=Ee((e=>e?`on${Oe(e)}`:"")),je=(e,t)=>!Object.is(e,t),Le=(e,t)=>{for(let a=0;a<e.length;a++)e[a](t)},Fe=(e,t,a)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:a})},Re=e=>{const t=parseFloat(e);return isNaN(t)?e:t};let De,ze;class qe{constructor(e=!1){this.active=!0,this.effects=[],this.cleanups=[],!e&&ze&&(this.parent=ze,this.index=(ze.scopes||(ze.scopes=[])).push(this)-1)}run(e){if(this.active){const t=ze;try{return ze=this,e()}finally{ze=t}}}on(){ze=this}off(){ze=this.parent}stop(e){if(this.active){let t,a;for(t=0,a=this.effects.length;t<a;t++)this.effects[t].stop();for(t=0,a=this.cleanups.length;t<a;t++)this.cleanups[t]();if(this.scopes)for(t=0,a=this.scopes.length;t<a;t++)this.scopes[t].stop(!0);if(this.parent&&!e){const e=this.parent.scopes.pop();e&&e!==this&&(this.parent.scopes[this.index]=e,e.index=this.index)}this.active=!1}}}function Be(e){return new qe(e)}function Ve(e,t=ze){t&&t.active&&t.effects.push(e)}function He(){return ze}function Ge(e){ze&&ze.cleanups.push(e)}const We=e=>{const t=new Set(e);return t.w=0,t.n=0,t},Ke=e=>(e.w&Qe)>0,Je=e=>(e.n&Qe)>0,Ye=new WeakMap;let Ze,Xe=0,Qe=1;const et=Symbol(""),tt=Symbol("");class at{constructor(e,t=null,a){this.fn=e,this.scheduler=t,this.active=!0,this.deps=[],this.parent=void 0,Ve(this,a)}run(){if(!this.active)return this.fn();let e=Ze,t=ot;for(;e;){if(e===this)return;e=e.parent}try{return this.parent=Ze,Ze=this,ot=!0,Qe=1<<++Xe,Xe<=30?(({deps:e})=>{if(e.length)for(let t=0;t<e.length;t++)e[t].w|=Qe})(this):lt(this),this.fn()}finally{Xe<=30&&(e=>{const{deps:t}=e;if(t.length){let a=0;for(let l=0;l<t.length;l++){const n=t[l];Ke(n)&&!Je(n)?n.delete(e):t[a++]=n,n.w&=~Qe,n.n&=~Qe}t.length=a}})(this),Qe=1<<--Xe,Ze=this.parent,ot=t,this.parent=void 0,this.deferStop&&this.stop()}}stop(){Ze===this?this.deferStop=!0:this.active&&(lt(this),this.onStop&&this.onStop(),this.active=!1)}}function lt(e){const{deps:t}=e;if(t.length){for(let a=0;a<t.length;a++)t[a].delete(e);t.length=0}}function nt(e,t){e.effect&&(e=e.effect.fn);const a=new at(e);t&&(ue(a,t),t.scope&&Ve(a,t.scope)),t&&t.lazy||a.run();const l=a.run.bind(a);return l.effect=a,l}function st(e){e.effect.stop()}let ot=!0;const it=[];function rt(){it.push(ot),ot=!1}function ct(){const e=it.pop();ot=void 0===e||e}function ut(e,t,a){if(ot&&Ze){let t=Ye.get(e);t||Ye.set(e,t=new Map);let l=t.get(a);l||t.set(a,l=We()),dt(l)}}function dt(e,t){let a=!1;Xe<=30?Je(e)||(e.n|=Qe,a=!Ke(e)):a=!e.has(Ze),a&&(e.add(Ze),Ze.deps.push(e))}function _t(e,t,a,l,n,s){const o=Ye.get(e);if(!o)return;let i=[];if("clear"===t)i=[...o.values()];else if("length"===a&&fe(e))o.forEach(((e,t)=>{("length"===t||t>=l)&&i.push(e)}));else switch(void 0!==a&&i.push(o.get(a)),t){case"add":fe(e)?Ne(a)&&i.push(o.get("length")):(i.push(o.get(et)),ve(e)&&i.push(o.get(tt)));break;case"delete":fe(e)||(i.push(o.get(et)),ve(e)&&i.push(o.get(tt)));break;case"set":ve(e)&&i.push(o.get(et))}if(1===i.length)i[0]&&pt(i[0]);else{const e=[];for(const t of i)t&&e.push(...t);pt(We(e))}}function pt(e,t){const a=fe(e)?e:[...e];for(const e of a)e.computed&&ft(e);for(const e of a)e.computed||ft(e)}function ft(e,t){(e!==Ze||e.allowRecurse)&&(e.scheduler?e.scheduler():e.run())}const vt=D("__proto__,__v_isRef,__isVue"),mt=new Set(Object.getOwnPropertyNames(Symbol).filter((e=>"arguments"!==e&&"caller"!==e)).map((e=>Symbol[e])).filter(ye)),ht=xt(),gt=xt(!1,!0),bt=xt(!0),yt=xt(!0,!0),wt=function(){const e={};return["includes","indexOf","lastIndexOf"].forEach((t=>{e[t]=function(...e){const a=ra(this);for(let e=0,t=this.length;e<t;e++)ut(a,0,e+"");const l=a[t](...e);return-1===l||!1===l?a[t](...e.map(ra)):l}})),["push","pop","shift","unshift","splice"].forEach((t=>{e[t]=function(...e){rt();const a=ra(this)[t].apply(this,e);return ct(),a}})),e}();function xt(e=!1,t=!1){return function(a,l,n){if("__v_isReactive"===l)return!e;if("__v_isReadonly"===l)return e;if("__v_isShallow"===l)return t;if("__v_raw"===l&&n===(e?t?Xt:Zt:t?Yt:Jt).get(a))return a;const s=fe(a);if(!e&&s&&pe(wt,l))return Reflect.get(wt,l,n);const o=Reflect.get(a,l,n);return(ye(l)?mt.has(l):vt(l))?o:(e||ut(a,0,l),t?o:fa(o)?s&&Ne(l)?o:o.value:we(o)?e?ta(o):Qt(o):o)}}function kt(e=!1){return function(t,a,l,n){let s=t[a];if(sa(s)&&fa(s)&&!fa(l))return!1;if(!e&&!sa(l)&&(oa(l)||(l=ra(l),s=ra(s)),!fe(t)&&fa(s)&&!fa(l)))return s.value=l,!0;const o=fe(t)&&Ne(a)?Number(a)<t.length:pe(t,a),i=Reflect.set(t,a,l,n);return t===ra(n)&&(o?je(l,s)&&_t(t,"set",a,l):_t(t,"add",a,l)),i}}const $t={get:ht,set:kt(),deleteProperty:function(e,t){const a=pe(e,t),l=Reflect.deleteProperty(e,t);return l&&a&&_t(e,"delete",t,void 0),l},has:function(e,t){const a=Reflect.has(e,t);return ye(t)&&mt.has(t)||ut(e,0,t),a},ownKeys:function(e){return ut(e,0,fe(e)?"length":et),Reflect.ownKeys(e)}},St={get:bt,set:(e,t)=>!0,deleteProperty:(e,t)=>!0},Nt=ue({},$t,{get:gt,set:kt(!0)}),Ct=ue({},St,{get:yt}),At=e=>e,Et=e=>Reflect.getPrototypeOf(e);function Tt(e,t,a=!1,l=!1){const n=ra(e=e.__v_raw),s=ra(t);a||(t!==s&&ut(n,0,t),ut(n,0,s));const{has:o}=Et(n),i=l?At:a?da:ua;return o.call(n,t)?i(e.get(t)):o.call(n,s)?i(e.get(s)):void(e!==n&&e.get(t))}function Pt(e,t=!1){const a=this.__v_raw,l=ra(a),n=ra(e);return t||(e!==n&&ut(l,0,e),ut(l,0,n)),e===n?a.has(e):a.has(e)||a.has(n)}function Ut(e,t=!1){return e=e.__v_raw,!t&&ut(ra(e),0,et),Reflect.get(e,"size",e)}function It(e){e=ra(e);const t=ra(this);return Et(t).has.call(t,e)||(t.add(e),_t(t,"add",e,e)),this}function Ot(e,t){t=ra(t);const a=ra(this),{has:l,get:n}=Et(a);let s=l.call(a,e);s||(e=ra(e),s=l.call(a,e));const o=n.call(a,e);return a.set(e,t),s?je(t,o)&&_t(a,"set",e,t):_t(a,"add",e,t),this}function Mt(e){const t=ra(this),{has:a,get:l}=Et(t);let n=a.call(t,e);n||(e=ra(e),n=a.call(t,e)),l&&l.call(t,e);const s=t.delete(e);return n&&_t(t,"delete",e,void 0),s}function jt(){const e=ra(this),t=0!==e.size,a=e.clear();return t&&_t(e,"clear",void 0,void 0),a}function Lt(e,t){return function(a,l){const n=this,s=n.__v_raw,o=ra(s),i=t?At:e?da:ua;return!e&&ut(o,0,et),s.forEach(((e,t)=>a.call(l,i(e),i(t),n)))}}function Ft(e,t,a){return function(...l){const n=this.__v_raw,s=ra(n),o=ve(s),i="entries"===e||e===Symbol.iterator&&o,r="keys"===e&&o,c=n[e](...l),u=a?At:t?da:ua;return!t&&ut(s,0,r?tt:et),{next(){const{value:e,done:t}=c.next();return t?{value:e,done:t}:{value:i?[u(e[0]),u(e[1])]:u(e),done:t}},[Symbol.iterator](){return this}}}}function Rt(e){return function(...t){return"delete"!==e&&this}}const[Dt,zt,qt,Bt]=function(){const e={get(e){return Tt(this,e)},get size(){return Ut(this)},has:Pt,add:It,set:Ot,delete:Mt,clear:jt,forEach:Lt(!1,!1)},t={get(e){return Tt(this,e,!1,!0)},get size(){return Ut(this)},has:Pt,add:It,set:Ot,delete:Mt,clear:jt,forEach:Lt(!1,!0)},a={get(e){return Tt(this,e,!0)},get size(){return Ut(this,!0)},has(e){return Pt.call(this,e,!0)},add:Rt("add"),set:Rt("set"),delete:Rt("delete"),clear:Rt("clear"),forEach:Lt(!0,!1)},l={get(e){return Tt(this,e,!0,!0)},get size(){return Ut(this,!0)},has(e){return Pt.call(this,e,!0)},add:Rt("add"),set:Rt("set"),delete:Rt("delete"),clear:Rt("clear"),forEach:Lt(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach((n=>{e[n]=Ft(n,!1,!1),a[n]=Ft(n,!0,!1),t[n]=Ft(n,!1,!0),l[n]=Ft(n,!0,!0)})),[e,a,t,l]}();function Vt(e,t){const a=t?e?Bt:qt:e?zt:Dt;return(t,l,n)=>"__v_isReactive"===l?!e:"__v_isReadonly"===l?e:"__v_raw"===l?t:Reflect.get(pe(a,l)&&l in t?a:t,l,n)}const Ht={get:Vt(!1,!1)},Gt={get:Vt(!1,!0)},Wt={get:Vt(!0,!1)},Kt={get:Vt(!0,!0)},Jt=new WeakMap,Yt=new WeakMap,Zt=new WeakMap,Xt=new WeakMap;function Qt(e){return sa(e)?e:la(e,!1,$t,Ht,Jt)}function ea(e){return la(e,!1,Nt,Gt,Yt)}function ta(e){return la(e,!0,St,Wt,Zt)}function aa(e){return la(e,!0,Ct,Kt,Xt)}function la(e,t,a,l,n){if(!we(e))return e;if(e.__v_raw&&(!t||!e.__v_isReactive))return e;const s=n.get(e);if(s)return s;const o=function(e){return e.__v_skip||!Object.isExtensible(e)?0:function(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}((e=>$e(e).slice(8,-1))(e))}(e);if(0===o)return e;const i=new Proxy(e,2===o?l:a);return n.set(e,i),i}function na(e){return sa(e)?na(e.__v_raw):!(!e||!e.__v_isReactive)}function sa(e){return!(!e||!e.__v_isReadonly)}function oa(e){return!(!e||!e.__v_isShallow)}function ia(e){return na(e)||sa(e)}function ra(e){const t=e&&e.__v_raw;return t?ra(t):e}function ca(e){return Fe(e,"__v_skip",!0),e}const ua=e=>we(e)?Qt(e):e,da=e=>we(e)?ta(e):e;function _a(e){ot&&Ze&&dt((e=ra(e)).dep||(e.dep=We()))}function pa(e,t){(e=ra(e)).dep&&pt(e.dep)}function fa(e){return!(!e||!0!==e.__v_isRef)}function va(e){return ha(e,!1)}function ma(e){return ha(e,!0)}function ha(e,t){return fa(e)?e:new ga(e,t)}class ga{constructor(e,t){this.__v_isShallow=t,this.dep=void 0,this.__v_isRef=!0,this._rawValue=t?e:ra(e),this._value=t?e:ua(e)}get value(){return _a(this),this._value}set value(e){e=this.__v_isShallow?e:ra(e),je(e,this._rawValue)&&(this._rawValue=e,this._value=this.__v_isShallow?e:ua(e),pa(this))}}function ba(e){pa(e)}function ya(e){return fa(e)?e.value:e}const wa={get:(e,t,a)=>ya(Reflect.get(e,t,a)),set:(e,t,a,l)=>{const n=e[t];return fa(n)&&!fa(a)?(n.value=a,!0):Reflect.set(e,t,a,l)}};function xa(e){return na(e)?e:new Proxy(e,wa)}class ka{constructor(e){this.dep=void 0,this.__v_isRef=!0;const{get:t,set:a}=e((()=>_a(this)),(()=>pa(this)));this._get=t,this._set=a}get value(){return this._get()}set value(e){this._set(e)}}function $a(e){return new ka(e)}function Sa(e){const t=fe(e)?new Array(e.length):{};for(const a in e)t[a]=Ca(e,a);return t}class Na{constructor(e,t,a){this._object=e,this._key=t,this._defaultValue=a,this.__v_isRef=!0}get value(){const e=this._object[this._key];return void 0===e?this._defaultValue:e}set value(e){this._object[this._key]=e}}function Ca(e,t,a){const l=e[t];return fa(l)?l:new Na(e,t,a)}class Aa{constructor(e,t,a,l){this._setter=t,this.dep=void 0,this.__v_isRef=!0,this._dirty=!0,this.effect=new at(e,(()=>{this._dirty||(this._dirty=!0,pa(this))})),this.effect.computed=this,this.effect.active=this._cacheable=!l,this.__v_isReadonly=a}get value(){const e=ra(this);return _a(e),!e._dirty&&e._cacheable||(e._dirty=!1,e._value=e.effect.run()),e._value}set value(e){this._setter(e)}}const Ea=[];function Ta(e,...t){rt();const a=Ea.length?Ea[Ea.length-1].component:null,l=a&&a.appContext.config.warnHandler,n=function(){let e=Ea[Ea.length-1];if(!e)return[];const t=[];for(;e;){const a=t[0];a&&a.vnode===e?a.recurseCount++:t.push({vnode:e,recurseCount:0});const l=e.component&&e.component.parent;e=l&&l.vnode}return t}();if(l)Ia(l,a,11,[e+t.join(""),a&&a.proxy,n.map((({vnode:e})=>`at <${wo(a,e.type)}>`)).join("\n"),n]);else{const a=[`[Vue warn]: ${e}`,...t];n.length&&a.push("\n",...function(e){const t=[];return e.forEach(((e,a)=>{t.push(...0===a?[]:["\n"],...function({vnode:e,recurseCount:t}){const a=t>0?`... (${t} recursive calls)`:"",l=` at <${wo(e.component,e.type,!!e.component&&null==e.component.parent)}`,n=">"+a;return e.props?[l,...Pa(e.props),n]:[l+n]}(e))})),t}(n)),console.warn(...a)}ct()}function Pa(e){const t=[],a=Object.keys(e);return a.slice(0,3).forEach((a=>{t.push(...Ua(a,e[a]))})),a.length>3&&t.push(" ..."),t}function Ua(e,t,a){return be(t)?(t=JSON.stringify(t),a?t:[`${e}=${t}`]):"number"==typeof t||"boolean"==typeof t||null==t?a?t:[`${e}=${t}`]:fa(t)?(t=Ua(e,ra(t.value),!0),a?t:[`${e}=Ref<`,t,">"]):ge(t)?[`${e}=fn${t.name?`<${t.name}>`:""}`]:(t=ra(t),a?t:[`${e}=`,t])}function Ia(e,t,a,l){let n;try{n=l?e(...l):e()}catch(e){Ma(e,t,a)}return n}function Oa(e,t,a,l){if(ge(e)){const n=Ia(e,t,a,l);return n&&xe(n)&&n.catch((e=>{Ma(e,t,a)})),n}const n=[];for(let s=0;s<e.length;s++)n.push(Oa(e[s],t,a,l));return n}function Ma(e,t,a,l=!0){if(t){let l=t.parent;const n=t.proxy,s=a;for(;l;){const t=l.ec;if(t)for(let a=0;a<t.length;a++)if(!1===t[a](e,n,s))return;l=l.parent}const o=t.appContext.config.errorHandler;if(o)return void Ia(o,null,10,[e,n,s])}!function(e,t,a,l=!0){console.error(e)}(e,0,0,l)}let ja=!1,La=!1;const Fa=[];let Ra=0;const Da=[];let za=null,qa=0;const Ba=[];let Va=null,Ha=0;const Ga=Promise.resolve();let Wa=null,Ka=null;function Ja(e){const t=Wa||Ga;return e?t.then(this?e.bind(this):e):t}function Ya(e){Fa.length&&Fa.includes(e,ja&&e.allowRecurse?Ra+1:Ra)||e===Ka||(null==e.id?Fa.push(e):Fa.splice(function(e){let t=Ra+1,a=Fa.length;for(;t<a;){const l=t+a>>>1;al(Fa[l])<e?t=l+1:a=l}return t}(e.id),0,e),Za())}function Za(){ja||La||(La=!0,Wa=Ga.then(ll))}function Xa(e,t,a,l){fe(e)?a.push(...e):t&&t.includes(e,e.allowRecurse?l+1:l)||a.push(e),Za()}function Qa(e){Xa(e,Va,Ba,Ha)}function el(e,t=null){if(Da.length){for(Ka=t,za=[...new Set(Da)],Da.length=0,qa=0;qa<za.length;qa++)za[qa]();za=null,qa=0,Ka=null,el(e,t)}}function tl(e){if(el(),Ba.length){const e=[...new Set(Ba)];if(Ba.length=0,Va)return void Va.push(...e);for(Va=e,Va.sort(((e,t)=>al(e)-al(t))),Ha=0;Ha<Va.length;Ha++)Va[Ha]();Va=null,Ha=0}}const al=e=>null==e.id?1/0:e.id;function ll(e){La=!1,ja=!0,el(e),Fa.sort(((e,t)=>al(e)-al(t)));try{for(Ra=0;Ra<Fa.length;Ra++){const e=Fa[Ra];e&&!1!==e.active&&Ia(e,null,14)}}finally{Ra=0,Fa.length=0,tl(),ja=!1,Wa=null,(Fa.length||Da.length||Ba.length)&&ll(e)}}let nl,sl=[];function ol(e,t){var a,l;nl=e,nl?(nl.enabled=!0,sl.forEach((({event:e,args:t})=>nl.emit(e,...t))),sl=[]):"undefined"!=typeof window&&window.HTMLElement&&!(null===(l=null===(a=window.navigator)||void 0===a?void 0:a.userAgent)||void 0===l?void 0:l.includes("jsdom"))?((t.__VUE_DEVTOOLS_HOOK_REPLAY__=t.__VUE_DEVTOOLS_HOOK_REPLAY__||[]).push((e=>{ol(e,t)})),setTimeout((()=>{nl||(t.__VUE_DEVTOOLS_HOOK_REPLAY__=null,sl=[])}),3e3)):sl=[]}function il(e,t,...a){if(e.isUnmounted)return;const l=e.vnode.props||le;let n=a;const s=t.startsWith("update:"),o=s&&t.slice(7);if(o&&o in l){const e=`${"modelValue"===o?"model":o}Modifiers`,{number:t,trim:s}=l[e]||le;s&&(n=a.map((e=>e.trim()))),t&&(n=a.map(Re))}let i,r=l[i=Me(t)]||l[i=Me(Pe(t))];!r&&s&&(r=l[i=Me(Ie(t))]),r&&Oa(r,e,6,n);const c=l[i+"Once"];if(c){if(e.emitted){if(e.emitted[i])return}else e.emitted={};e.emitted[i]=!0,Oa(c,e,6,n)}}function rl(e,t,a=!1){const l=t.emitsCache,n=l.get(e);if(void 0!==n)return n;const s=e.emits;let o={},i=!1;if(!ge(e)){const l=e=>{const a=rl(e,t,!0);a&&(i=!0,ue(o,a))};!a&&t.mixins.length&&t.mixins.forEach(l),e.extends&&l(e.extends),e.mixins&&e.mixins.forEach(l)}return s||i?(fe(s)?s.forEach((e=>o[e]=null)):ue(o,s),l.set(e,o),o):(l.set(e,null),null)}function cl(e,t){return!(!e||!re(t))&&(t=t.slice(2).replace(/Once$/,""),pe(e,t[0].toLowerCase()+t.slice(1))||pe(e,Ie(t))||pe(e,t))}let ul=null,dl=null;function _l(e){const t=ul;return ul=e,dl=e&&e.type.__scopeId||null,t}function pl(e){dl=e}function fl(){dl=null}const vl=e=>ml;function ml(e,t=ul,a){if(!t)return e;if(e._n)return e;const l=(...a)=>{l._d&&Os(-1);const n=_l(t),s=e(...a);return _l(n),l._d&&Os(1),s};return l._n=!0,l._c=!0,l._d=!0,l}function hl(e){const{type:t,vnode:a,proxy:l,withProxy:n,props:s,propsOptions:[o],slots:i,attrs:r,emit:c,render:u,renderCache:d,data:_,setupState:p,ctx:f,inheritAttrs:v}=e;let m,h;const g=_l(e);try{if(4&a.shapeFlag){const e=n||l;m=Zs(u.call(e,e,d,s,p,_,f)),h=r}else{m=Zs(t(s,t.length>1?{attrs:r,slots:i,emit:c}:null)),h=t.props?r:gl(r)}}catch(t){Es.length=0,Ma(t,e,1),m=Hs(Cs)}let b=m;if(h&&!1!==v){const e=Object.keys(h),{shapeFlag:t}=b;e.length&&7&t&&(o&&e.some(ce)&&(h=bl(h,o)),b=Ws(b,h))}return a.dirs&&(b=Ws(b),b.dirs=b.dirs?b.dirs.concat(a.dirs):a.dirs),a.transition&&(b.transition=a.transition),m=b,_l(g),m}const gl=e=>{let t;for(const a in e)("class"===a||"style"===a||re(a))&&((t||(t={}))[a]=e[a]);return t},bl=(e,t)=>{const a={};for(const l in e)ce(l)&&l.slice(9)in t||(a[l]=e[l]);return a};function yl(e,t,a){const l=Object.keys(t);if(l.length!==Object.keys(e).length)return!0;for(let n=0;n<l.length;n++){const s=l[n];if(t[s]!==e[s]&&!cl(a,s))return!0}return!1}function wl({vnode:e,parent:t},a){for(;t&&t.subTree===e;)(e=t.vnode).el=a,t=t.parent}const xl=e=>e.__isSuspense,kl={name:"Suspense",__isSuspense:!0,process(e,t,a,l,n,s,o,i,r,c){null==e?function(e,t,a,l,n,s,o,i,r){const{p:c,o:{createElement:u}}=r,d=u("div"),_=e.suspense=Sl(e,n,l,t,d,a,s,o,i,r);c(null,_.pendingBranch=e.ssContent,d,null,l,_,s,o),_.deps>0?($l(e,"onPending"),$l(e,"onFallback"),c(null,e.ssFallback,t,a,l,null,s,o),Al(_,e.ssFallback)):_.resolve()}(t,a,l,n,s,o,i,r,c):function(e,t,a,l,n,s,o,i,{p:r,um:c,o:{createElement:u}}){const d=t.suspense=e.suspense;d.vnode=t,t.el=e.el;const _=t.ssContent,p=t.ssFallback,{activeBranch:f,pendingBranch:v,isInFallback:m,isHydrating:h}=d;if(v)d.pendingBranch=_,Rs(_,v)?(r(v,_,d.hiddenContainer,null,n,d,s,o,i),d.deps<=0?d.resolve():m&&(r(f,p,a,l,n,null,s,o,i),Al(d,p))):(d.pendingId++,h?(d.isHydrating=!1,d.activeBranch=v):c(v,n,d),d.deps=0,d.effects.length=0,d.hiddenContainer=u("div"),m?(r(null,_,d.hiddenContainer,null,n,d,s,o,i),d.deps<=0?d.resolve():(r(f,p,a,l,n,null,s,o,i),Al(d,p))):f&&Rs(_,f)?(r(f,_,a,l,n,d,s,o,i),d.resolve(!0)):(r(null,_,d.hiddenContainer,null,n,d,s,o,i),d.deps<=0&&d.resolve()));else if(f&&Rs(_,f))r(f,_,a,l,n,d,s,o,i),Al(d,_);else if($l(t,"onPending"),d.pendingBranch=_,d.pendingId++,r(null,_,d.hiddenContainer,null,n,d,s,o,i),d.deps<=0)d.resolve();else{const{timeout:e,pendingId:t}=d;e>0?setTimeout((()=>{d.pendingId===t&&d.fallback(p)}),e):0===e&&d.fallback(p)}}(e,t,a,l,n,o,i,r,c)},hydrate:function(e,t,a,l,n,s,o,i,r){const c=t.suspense=Sl(t,l,a,e.parentNode,document.createElement("div"),null,n,s,o,i,!0),u=r(e,c.pendingBranch=t.ssContent,a,c,s,o);return 0===c.deps&&c.resolve(),u},create:Sl,normalize:function(e){const{shapeFlag:t,children:a}=e,l=32&t;e.ssContent=Nl(l?a.default:a),e.ssFallback=l?Nl(a.fallback):Hs(Cs)}};function $l(e,t){const a=e.props&&e.props[t];ge(a)&&a()}function Sl(e,t,a,l,n,s,o,i,r,c,u=!1){const{p:d,m:_,um:p,n:f,o:{parentNode:v,remove:m}}=c,h=Re(e.props&&e.props.timeout),g={vnode:e,parent:t,parentComponent:a,isSVG:o,container:l,hiddenContainer:n,anchor:s,deps:0,pendingId:0,timeout:"number"==typeof h?h:-1,activeBranch:null,pendingBranch:null,isInFallback:!0,isHydrating:u,isUnmounted:!1,effects:[],resolve(e=!1){const{vnode:t,activeBranch:a,pendingBranch:l,pendingId:n,effects:s,parentComponent:o,container:i}=g;if(g.isHydrating)g.isHydrating=!1;else if(!e){const e=a&&l.transition&&"out-in"===l.transition.mode;e&&(a.transition.afterLeave=()=>{n===g.pendingId&&_(l,i,t,0)});let{anchor:t}=g;a&&(t=f(a),p(a,o,g,!0)),e||_(l,i,t,0)}Al(g,l),g.pendingBranch=null,g.isInFallback=!1;let r=g.parent,c=!1;for(;r;){if(r.pendingBranch){r.effects.push(...s),c=!0;break}r=r.parent}c||Qa(s),g.effects=[],$l(t,"onResolve")},fallback(e){if(!g.pendingBranch)return;const{vnode:t,activeBranch:a,parentComponent:l,container:n,isSVG:s}=g;$l(t,"onFallback");const o=f(a),c=()=>{g.isInFallback&&(d(null,e,n,o,l,null,s,i,r),Al(g,e))},u=e.transition&&"out-in"===e.transition.mode;u&&(a.transition.afterLeave=c),g.isInFallback=!0,p(a,l,null,!0),u||c()},move(e,t,a){g.activeBranch&&_(g.activeBranch,e,t,a),g.container=e},next:()=>g.activeBranch&&f(g.activeBranch),registerDep(e,t){const a=!!g.pendingBranch;a&&g.deps++;const l=e.vnode.el;e.asyncDep.catch((t=>{Ma(t,e,0)})).then((n=>{if(e.isUnmounted||g.isUnmounted||g.pendingId!==e.suspenseId)return;e.asyncResolved=!0;const{vnode:s}=e;po(e,n,!1),l&&(s.el=l);const i=!l&&e.subTree.el;t(e,s,v(l||e.subTree.el),l?null:f(e.subTree),g,o,r),i&&m(i),wl(e,s.el),a&&0==--g.deps&&g.resolve()}))},unmount(e,t){g.isUnmounted=!0,g.activeBranch&&p(g.activeBranch,a,e,t),g.pendingBranch&&p(g.pendingBranch,a,e,t)}};return g}function Nl(e){let t;if(ge(e)){const a=Is&&e._c;a&&(e._d=!1,Ps()),e=e(),a&&(e._d=!0,t=Ts,Us())}if(fe(e)){const t=function(e){let t;for(let a=0;a<e.length;a++){const l=e[a];if(!Fs(l))return;if(l.type!==Cs||"v-if"===l.children){if(t)return;t=l}}return t}(e);e=t}return e=Zs(e),t&&!e.dynamicChildren&&(e.dynamicChildren=t.filter((t=>t!==e))),e}function Cl(e,t){t&&t.pendingBranch?fe(e)?t.effects.push(...e):t.effects.push(e):Qa(e)}function Al(e,t){e.activeBranch=t;const{vnode:a,parentComponent:l}=e,n=a.el=t.el;l&&l.subTree===a&&(l.vnode.el=n,wl(l,n))}function El(e,t){if(no){let a=no.provides;const l=no.parent&&no.parent.provides;l===a&&(a=no.provides=Object.create(l)),a[e]=t}}function Tl(e,t,a=!1){const l=no||ul;if(l){const n=null==l.parent?l.vnode.appContext&&l.vnode.appContext.provides:l.parent.provides;if(n&&e in n)return n[e];if(arguments.length>1)return a&&ge(t)?t.call(l.proxy):t}}function Pl(e,t){return jl(e,null,t)}function Ul(e,t){return jl(e,null,{flush:"post"})}function Il(e,t){return jl(e,null,{flush:"sync"})}const Ol={};function Ml(e,t,a){return jl(e,t,a)}function jl(e,t,{immediate:a,deep:l,flush:n}=le){const s=no;let o,i,r=!1,c=!1;if(fa(e)?(o=()=>e.value,r=oa(e)):na(e)?(o=()=>e,l=!0):fe(e)?(c=!0,r=e.some((e=>na(e)||oa(e))),o=()=>e.map((e=>fa(e)?e.value:na(e)?Rl(e):ge(e)?Ia(e,s,2):void 0))):o=ge(e)?t?()=>Ia(e,s,2):()=>{if(!s||!s.isUnmounted)return i&&i(),Oa(e,s,3,[u])}:se,t&&l){const e=o;o=()=>Rl(e())}let u=e=>{i=f.onStop=()=>{Ia(e,s,4)}},d=c?[]:Ol;const _=()=>{if(f.active)if(t){const e=f.run();(l||r||(c?e.some(((e,t)=>je(e,d[t]))):je(e,d)))&&(i&&i(),Oa(t,s,3,[e,d===Ol?void 0:d,u]),d=e)}else f.run()};let p;_.allowRecurse=!!t,p="sync"===n?_:"post"===n?()=>fs(_,s&&s.suspense):()=>function(e){Xa(e,za,Da,qa)}(_);const f=new at(o,p);return t?a?_():d=f.run():"post"===n?fs(f.run.bind(f),s&&s.suspense):f.run(),()=>{f.stop(),s&&s.scope&&de(s.scope.effects,f)}}function Ll(e,t,a){const l=this.proxy,n=be(e)?e.includes(".")?Fl(l,e):()=>l[e]:e.bind(l,l);let s;ge(t)?s=t:(s=t.handler,a=t);const o=no;oo(this);const i=jl(n,s.bind(l),a);return o?oo(o):io(),i}function Fl(e,t){const a=t.split(".");return()=>{let t=e;for(let e=0;e<a.length&&t;e++)t=t[a[e]];return t}}function Rl(e,t){if(!we(e)||e.__v_skip)return e;if((t=t||new Set).has(e))return e;if(t.add(e),fa(e))Rl(e.value,t);else if(fe(e))for(let a=0;a<e.length;a++)Rl(e[a],t);else if(me(e)||ve(e))e.forEach((e=>{Rl(e,t)}));else if(Se(e))for(const a in e)Rl(e[a],t);return e}function Dl(){const e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return _n((()=>{e.isMounted=!0})),vn((()=>{e.isUnmounting=!0})),e}const zl=[Function,Array],ql={name:"BaseTransition",props:{mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:zl,onEnter:zl,onAfterEnter:zl,onEnterCancelled:zl,onBeforeLeave:zl,onLeave:zl,onAfterLeave:zl,onLeaveCancelled:zl,onBeforeAppear:zl,onAppear:zl,onAfterAppear:zl,onAppearCancelled:zl},setup(e,{slots:t}){const a=so(),l=Dl();let n;return()=>{const s=t.default&&Kl(t.default(),!0);if(!s||!s.length)return;let o=s[0];if(s.length>1)for(const e of s)if(e.type!==Cs){o=e;break}const i=ra(e),{mode:r}=i;if(l.isLeaving)return Hl(o);const c=Gl(o);if(!c)return Hl(o);const u=Vl(c,i,l,a);Wl(c,u);const d=a.subTree,_=d&&Gl(d);let p=!1;const{getTransitionKey:f}=c.type;if(f){const e=f();void 0===n?n=e:e!==n&&(n=e,p=!0)}if(_&&_.type!==Cs&&(!Rs(c,_)||p)){const e=Vl(_,i,l,a);if(Wl(_,e),"out-in"===r)return l.isLeaving=!0,e.afterLeave=()=>{l.isLeaving=!1,a.update()},Hl(o);"in-out"===r&&c.type!==Cs&&(e.delayLeave=(e,t,a)=>{Bl(l,_)[String(_.key)]=_,e._leaveCb=()=>{t(),e._leaveCb=void 0,delete u.delayedLeave},u.delayedLeave=a})}return o}}};function Bl(e,t){const{leavingVNodes:a}=e;let l=a.get(t.type);return l||(l=Object.create(null),a.set(t.type,l)),l}function Vl(e,t,a,l){const{appear:n,mode:s,persisted:o=!1,onBeforeEnter:i,onEnter:r,onAfterEnter:c,onEnterCancelled:u,onBeforeLeave:d,onLeave:_,onAfterLeave:p,onLeaveCancelled:f,onBeforeAppear:v,onAppear:m,onAfterAppear:h,onAppearCancelled:g}=t,b=String(e.key),y=Bl(a,e),w=(e,t)=>{e&&Oa(e,l,9,t)},x=(e,t)=>{const a=t[1];w(e,t),fe(e)?e.every((e=>e.length<=1))&&a():e.length<=1&&a()},k={mode:s,persisted:o,beforeEnter(t){let l=i;if(!a.isMounted){if(!n)return;l=v||i}t._leaveCb&&t._leaveCb(!0);const s=y[b];s&&Rs(e,s)&&s.el._leaveCb&&s.el._leaveCb(),w(l,[t])},enter(e){let t=r,l=c,s=u;if(!a.isMounted){if(!n)return;t=m||r,l=h||c,s=g||u}let o=!1;const i=e._enterCb=t=>{o||(o=!0,w(t?s:l,[e]),k.delayedLeave&&k.delayedLeave(),e._enterCb=void 0)};t?x(t,[e,i]):i()},leave(t,l){const n=String(e.key);if(t._enterCb&&t._enterCb(!0),a.isUnmounting)return l();w(d,[t]);let s=!1;const o=t._leaveCb=a=>{s||(s=!0,l(),w(a?f:p,[t]),t._leaveCb=void 0,y[n]===e&&delete y[n])};y[n]=e,_?x(_,[t,o]):o()},clone:e=>Vl(e,t,a,l)};return k}function Hl(e){if(Ql(e))return(e=Ws(e)).children=null,e}function Gl(e){return Ql(e)?e.children?e.children[0]:void 0:e}function Wl(e,t){6&e.shapeFlag&&e.component?Wl(e.component.subTree,t):128&e.shapeFlag?(e.ssContent.transition=t.clone(e.ssContent),e.ssFallback.transition=t.clone(e.ssFallback)):e.transition=t}function Kl(e,t=!1,a){let l=[],n=0;for(let s=0;s<e.length;s++){let o=e[s];const i=null==a?o.key:String(a)+String(null!=o.key?o.key:s);o.type===Ss?(128&o.patchFlag&&n++,l=l.concat(Kl(o.children,t,i))):(t||o.type!==Cs)&&l.push(null!=i?Ws(o,{key:i}):o)}if(n>1)for(let e=0;e<l.length;e++)l[e].patchFlag=-2;return l}function Jl(e){return ge(e)?{setup:e,name:e.name}:e}const Yl=e=>!!e.type.__asyncLoader;function Zl(e){ge(e)&&(e={loader:e});const{loader:t,loadingComponent:a,errorComponent:l,delay:n=200,timeout:s,suspensible:o=!0,onError:i}=e;let r,c=null,u=0;const d=()=>{let e;return c||(e=c=t().catch((e=>{if(e=e instanceof Error?e:new Error(String(e)),i)return new Promise(((t,a)=>{i(e,(()=>t((u++,c=null,d()))),(()=>a(e)),u+1)}));throw e})).then((t=>e!==c&&c?c:(t&&(t.__esModule||"Module"===t[Symbol.toStringTag])&&(t=t.default),r=t,t))))};return Jl({name:"AsyncComponentWrapper",__asyncLoader:d,get __asyncResolved(){return r},setup(){const e=no;if(r)return()=>Xl(r,e);const t=t=>{c=null,Ma(t,e,13,!l)};if(o&&e.suspense)return d().then((t=>()=>Xl(t,e))).catch((e=>(t(e),()=>l?Hs(l,{error:e}):null)));const i=va(!1),u=va(),_=va(!!n);return n&&setTimeout((()=>{_.value=!1}),n),null!=s&&setTimeout((()=>{if(!i.value&&!u.value){const e=new Error(`Async component timed out after ${s}ms.`);t(e),u.value=e}}),s),d().then((()=>{i.value=!0,e.parent&&Ql(e.parent.vnode)&&Ya(e.parent.update)})).catch((e=>{t(e),u.value=e})),()=>i.value&&r?Xl(r,e):u.value&&l?Hs(l,{error:u.value}):a&&!_.value?Hs(a):void 0}})}function Xl(e,{vnode:{ref:t,props:a,children:l}}){const n=Hs(e,a,l);return n.ref=t,n}const Ql=e=>e.type.__isKeepAlive,en={name:"KeepAlive",__isKeepAlive:!0,props:{include:[String,RegExp,Array],exclude:[String,RegExp,Array],max:[String,Number]},setup(e,{slots:t}){const a=so(),l=a.ctx,n=new Map,s=new Set;let o=null;const i=a.suspense,{renderer:{p:r,m:c,um:u,o:{createElement:d}}}=l,_=d("div");function p(e){on(e),u(e,a,i,!0)}function f(e){n.forEach(((t,a)=>{const l=yo(t.type);!l||e&&e(l)||v(a)}))}function v(e){const t=n.get(e);o&&t.type===o.type?o&&on(o):p(t),n.delete(e),s.delete(e)}l.activate=(e,t,a,l,n)=>{const s=e.component;c(e,t,a,0,i),r(s.vnode,e,t,a,s,i,l,e.slotScopeIds,n),fs((()=>{s.isDeactivated=!1,s.a&&Le(s.a);const t=e.props&&e.props.onVnodeMounted;t&&to(t,s.parent,e)}),i)},l.deactivate=e=>{const t=e.component;c(e,_,null,1,i),fs((()=>{t.da&&Le(t.da);const a=e.props&&e.props.onVnodeUnmounted;a&&to(a,t.parent,e),t.isDeactivated=!0}),i)},Ml((()=>[e.include,e.exclude]),(([e,t])=>{e&&f((t=>tn(e,t))),t&&f((e=>!tn(t,e)))}),{flush:"post",deep:!0});let m=null;const h=()=>{null!=m&&n.set(m,rn(a.subTree))};return _n(h),fn(h),vn((()=>{n.forEach((e=>{const{subTree:t,suspense:l}=a,n=rn(t);if(e.type!==n.type)p(e);else{on(n);const e=n.component.da;e&&fs(e,l)}}))})),()=>{if(m=null,!t.default)return null;const a=t.default(),l=a[0];if(a.length>1)return o=null,a;if(!Fs(l)||!(4&l.shapeFlag||128&l.shapeFlag))return o=null,l;let i=rn(l);const r=i.type,c=yo(Yl(i)?i.type.__asyncResolved||{}:r),{include:u,exclude:d,max:_}=e;if(u&&(!c||!tn(u,c))||d&&c&&tn(d,c))return o=i,l;const p=null==i.key?r:i.key,f=n.get(p);return i.el&&(i=Ws(i),128&l.shapeFlag&&(l.ssContent=i)),m=p,f?(i.el=f.el,i.component=f.component,i.transition&&Wl(i,i.transition),i.shapeFlag|=512,s.delete(p),s.add(p)):(s.add(p),_&&s.size>parseInt(_,10)&&v(s.values().next().value)),i.shapeFlag|=256,o=i,xl(l.type)?l:i}}};function tn(e,t){return fe(e)?e.some((e=>tn(e,t))):be(e)?e.split(",").includes(t):!!e.test&&e.test(t)}function an(e,t){nn(e,"a",t)}function ln(e,t){nn(e,"da",t)}function nn(e,t,a=no){const l=e.__wdc||(e.__wdc=()=>{let t=a;for(;t;){if(t.isDeactivated)return;t=t.parent}return e()});if(cn(t,l,a),a){let e=a.parent;for(;e&&e.parent;)Ql(e.parent.vnode)&&sn(l,t,a,e),e=e.parent}}function sn(e,t,a,l){const n=cn(t,e,l,!0);mn((()=>{de(l[t],n)}),a)}function on(e){let t=e.shapeFlag;256&t&&(t-=256),512&t&&(t-=512),e.shapeFlag=t}function rn(e){return 128&e.shapeFlag?e.ssContent:e}function cn(e,t,a=no,l=!1){if(a){const n=a[e]||(a[e]=[]),s=t.__weh||(t.__weh=(...l)=>{if(a.isUnmounted)return;rt(),oo(a);const n=Oa(t,a,e,l);return io(),ct(),n});return l?n.unshift(s):n.push(s),s}}const un=e=>(t,a=no)=>(!_o||"sp"===e)&&cn(e,t,a),dn=un("bm"),_n=un("m"),pn=un("bu"),fn=un("u"),vn=un("bum"),mn=un("um"),hn=un("sp"),gn=un("rtg"),bn=un("rtc");function yn(e,t=no){cn("ec",e,t)}function wn(e,t){const a=ul;if(null===a)return e;const l=go(a)||a.proxy,n=e.dirs||(e.dirs=[]);for(let e=0;e<t.length;e++){let[a,s,o,i=le]=t[e];ge(a)&&(a={mounted:a,updated:a}),a.deep&&Rl(s),n.push({dir:a,instance:l,value:s,oldValue:void 0,arg:o,modifiers:i})}return e}function xn(e,t,a,l){const n=e.dirs,s=t&&t.dirs;for(let o=0;o<n.length;o++){const i=n[o];s&&(i.oldValue=s[o].value);let r=i.dir[l];r&&(rt(),Oa(r,a,8,[e.el,i,e,t]),ct())}}function kn(e,t){return Cn("components",e,!0,t)||e}const $n=Symbol();function Sn(e){return be(e)?Cn("components",e,!1)||e:e||$n}function Nn(e){return Cn("directives",e)}function Cn(e,t,a=!0,l=!1){const n=ul||no;if(n){const a=n.type;if("components"===e){const e=yo(a,!1);if(e&&(e===t||e===Pe(t)||e===Oe(Pe(t))))return a}const s=An(n[e]||a[e],t)||An(n.appContext[e],t);return!s&&l?a:s}}function An(e,t){return e&&(e[t]||e[Pe(t)]||e[Oe(Pe(t))])}function En(e,t,a,l){let n;const s=a&&a[l];if(fe(e)||be(e)){n=new Array(e.length);for(let a=0,l=e.length;a<l;a++)n[a]=t(e[a],a,void 0,s&&s[a])}else if("number"==typeof e){n=new Array(e);for(let a=0;a<e;a++)n[a]=t(a+1,a,void 0,s&&s[a])}else if(we(e))if(e[Symbol.iterator])n=Array.from(e,((e,a)=>t(e,a,void 0,s&&s[a])));else{const a=Object.keys(e);n=new Array(a.length);for(let l=0,o=a.length;l<o;l++){const o=a[l];n[l]=t(e[o],o,l,s&&s[l])}}else n=[];return a&&(a[l]=n),n}function Tn(e,t){for(let a=0;a<t.length;a++){const l=t[a];if(fe(l))for(let t=0;t<l.length;t++)e[l[t].name]=l[t].fn;else l&&(e[l.name]=l.fn)}return e}function Pn(e,t,a={},l,n){if(ul.isCE||ul.parent&&Yl(ul.parent)&&ul.parent.isCE)return Hs("slot","default"===t?null:{name:t},l&&l());let s=e[t];s&&s._c&&(s._d=!1),Ps();const o=s&&Un(s(a)),i=Ls(Ss,{key:a.key||`_${t}`},o||(l?l():[]),o&&1===e._?64:-2);return!n&&i.scopeId&&(i.slotScopeIds=[i.scopeId+"-s"]),s&&s._c&&(s._d=!0),i}function Un(e){return e.some((e=>!Fs(e)||e.type!==Cs&&!(e.type===Ss&&!Un(e.children))))?e:null}function In(e){const t={};for(const a in e)t[Me(a)]=e[a];return t}const On=e=>e?ro(e)?go(e)||e.proxy:On(e.parent):null,Mn=ue(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>e.props,$attrs:e=>e.attrs,$slots:e=>e.slots,$refs:e=>e.refs,$parent:e=>On(e.parent),$root:e=>On(e.root),$emit:e=>e.emit,$options:e=>zn(e),$forceUpdate:e=>e.f||(e.f=()=>Ya(e.update)),$nextTick:e=>e.n||(e.n=Ja.bind(e.proxy)),$watch:e=>Ll.bind(e)}),jn={get({_:e},t){const{ctx:a,setupState:l,data:n,props:s,accessCache:o,type:i,appContext:r}=e;let c;if("$"!==t[0]){const i=o[t];if(void 0!==i)switch(i){case 1:return l[t];case 2:return n[t];case 4:return a[t];case 3:return s[t]}else{if(l!==le&&pe(l,t))return o[t]=1,l[t];if(n!==le&&pe(n,t))return o[t]=2,n[t];if((c=e.propsOptions[0])&&pe(c,t))return o[t]=3,s[t];if(a!==le&&pe(a,t))return o[t]=4,a[t];Fn&&(o[t]=0)}}const u=Mn[t];let d,_;return u?("$attrs"===t&&ut(e,0,t),u(e)):(d=i.__cssModules)&&(d=d[t])?d:a!==le&&pe(a,t)?(o[t]=4,a[t]):(_=r.config.globalProperties,pe(_,t)?_[t]:void 0)},set({_:e},t,a){const{data:l,setupState:n,ctx:s}=e;return n!==le&&pe(n,t)?(n[t]=a,!0):l!==le&&pe(l,t)?(l[t]=a,!0):!(pe(e.props,t)||"$"===t[0]&&t.slice(1)in e||(s[t]=a,0))},has({_:{data:e,setupState:t,accessCache:a,ctx:l,appContext:n,propsOptions:s}},o){let i;return!!a[o]||e!==le&&pe(e,o)||t!==le&&pe(t,o)||(i=s[0])&&pe(i,o)||pe(l,o)||pe(Mn,o)||pe(n.config.globalProperties,o)},defineProperty(e,t,a){return null!=a.get?e._.accessCache[t]=0:pe(a,"value")&&this.set(e,t,a.value,null),Reflect.defineProperty(e,t,a)}},Ln=ue({},jn,{get(e,t){if(t!==Symbol.unscopables)return jn.get(e,t,e)},has:(e,t)=>"_"!==t[0]&&!z(t)});let Fn=!0;function Rn(e,t,a){Oa(fe(e)?e.map((e=>e.bind(t.proxy))):e.bind(t.proxy),t,a)}function Dn(e,t,a,l){const n=l.includes(".")?Fl(a,l):()=>a[l];if(be(e)){const a=t[e];ge(a)&&Ml(n,a)}else if(ge(e))Ml(n,e.bind(a));else if(we(e))if(fe(e))e.forEach((e=>Dn(e,t,a,l)));else{const l=ge(e.handler)?e.handler.bind(a):t[e.handler];ge(l)&&Ml(n,l,e)}}function zn(e){const t=e.type,{mixins:a,extends:l}=t,{mixins:n,optionsCache:s,config:{optionMergeStrategies:o}}=e.appContext,i=s.get(t);let r;return i?r=i:n.length||a||l?(r={},n.length&&n.forEach((e=>qn(r,e,o,!0))),qn(r,t,o)):r=t,s.set(t,r),r}function qn(e,t,a,l=!1){const{mixins:n,extends:s}=t;s&&qn(e,s,a,!0),n&&n.forEach((t=>qn(e,t,a,!0)));for(const n in t)if(l&&"expose"===n);else{const l=Bn[n]||a&&a[n];e[n]=l?l(e[n],t[n]):t[n]}return e}const Bn={data:Vn,props:Wn,emits:Wn,methods:Wn,computed:Wn,beforeCreate:Gn,created:Gn,beforeMount:Gn,mounted:Gn,beforeUpdate:Gn,updated:Gn,beforeDestroy:Gn,beforeUnmount:Gn,destroyed:Gn,unmounted:Gn,activated:Gn,deactivated:Gn,errorCaptured:Gn,serverPrefetch:Gn,components:Wn,directives:Wn,watch:function(e,t){if(!e)return t;if(!t)return e;const a=ue(Object.create(null),e);for(const l in t)a[l]=Gn(e[l],t[l]);return a},provide:Vn,inject:function(e,t){return Wn(Hn(e),Hn(t))}};function Vn(e,t){return t?e?function(){return ue(ge(e)?e.call(this,this):e,ge(t)?t.call(this,this):t)}:t:e}function Hn(e){if(fe(e)){const t={};for(let a=0;a<e.length;a++)t[e[a]]=e[a];return t}return e}function Gn(e,t){return e?[...new Set([].concat(e,t))]:t}function Wn(e,t){return e?ue(ue(Object.create(null),e),t):t}function Kn(e,t,a,l){const[n,s]=e.propsOptions;let o,i=!1;if(t)for(let r in t){if(Ce(r))continue;const c=t[r];let u;n&&pe(n,u=Pe(r))?s&&s.includes(u)?(o||(o={}))[u]=c:a[u]=c:cl(e.emitsOptions,r)||r in l&&c===l[r]||(l[r]=c,i=!0)}if(s){const t=ra(a),l=o||le;for(let o=0;o<s.length;o++){const i=s[o];a[i]=Jn(n,t,i,l[i],e,!pe(l,i))}}return i}function Jn(e,t,a,l,n,s){const o=e[a];if(null!=o){const e=pe(o,"default");if(e&&void 0===l){const e=o.default;if(o.type!==Function&&ge(e)){const{propsDefaults:s}=n;a in s?l=s[a]:(oo(n),l=s[a]=e.call(null,t),io())}else l=e}o[0]&&(s&&!e?l=!1:!o[1]||""!==l&&l!==Ie(a)||(l=!0))}return l}function Yn(e,t,a=!1){const l=t.propsCache,n=l.get(e);if(n)return n;const s=e.props,o={},i=[];let r=!1;if(!ge(e)){const l=e=>{r=!0;const[a,l]=Yn(e,t,!0);ue(o,a),l&&i.push(...l)};!a&&t.mixins.length&&t.mixins.forEach(l),e.extends&&l(e.extends),e.mixins&&e.mixins.forEach(l)}if(!s&&!r)return l.set(e,ne),ne;if(fe(s))for(let e=0;e<s.length;e++){const t=Pe(s[e]);Zn(t)&&(o[t]=le)}else if(s)for(const e in s){const t=Pe(e);if(Zn(t)){const a=s[e],l=o[t]=fe(a)||ge(a)?{type:a}:a;if(l){const e=es(Boolean,l.type),a=es(String,l.type);l[0]=e>-1,l[1]=a<0||e<a,(e>-1||pe(l,"default"))&&i.push(t)}}}const c=[o,i];return l.set(e,c),c}function Zn(e){return"$"!==e[0]}function Xn(e){const t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:null===e?"null":""}function Qn(e,t){return Xn(e)===Xn(t)}function es(e,t){return fe(t)?t.findIndex((t=>Qn(t,e))):ge(t)&&Qn(t,e)?0:-1}const ts=e=>"_"===e[0]||"$stable"===e,as=e=>fe(e)?e.map(Zs):[Zs(e)],ls=(e,t,a)=>{if(t._n)return t;const l=ml(((...e)=>as(t(...e))),a);return l._c=!1,l},ns=(e,t,a)=>{const l=e._ctx;for(const a in e){if(ts(a))continue;const n=e[a];if(ge(n))t[a]=ls(0,n,l);else if(null!=n){const e=as(n);t[a]=()=>e}}},ss=(e,t)=>{const a=as(t);e.slots.default=()=>a};function os(){return{app:null,config:{isNativeTag:oe,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let is=0;function rs(e,t){return function(a,l=null){ge(a)||(a=Object.assign({},a)),null==l||we(l)||(l=null);const n=os(),s=new Set;let o=!1;const i=n.app={_uid:is++,_component:a,_props:l,_container:null,_context:n,_instance:null,version:Ro,get config(){return n.config},set config(e){},use:(e,...t)=>(s.has(e)||(e&&ge(e.install)?(s.add(e),e.install(i,...t)):ge(e)&&(s.add(e),e(i,...t))),i),mixin:e=>(n.mixins.includes(e)||n.mixins.push(e),i),component:(e,t)=>t?(n.components[e]=t,i):n.components[e],directive:(e,t)=>t?(n.directives[e]=t,i):n.directives[e],mount(s,r,c){if(!o){const u=Hs(a,l);return u.appContext=n,r&&t?t(u,s):e(u,s,c),o=!0,i._container=s,s.__vue_app__=i,go(u.component)||u.component.proxy}},unmount(){o&&(e(null,i._container),delete i._container.__vue_app__)},provide:(e,t)=>(n.provides[e]=t,i)};return i}}function cs(e,t,a,l,n=!1){if(fe(e))return void e.forEach(((e,s)=>cs(e,t&&(fe(t)?t[s]:t),a,l,n)));if(Yl(l)&&!n)return;const s=4&l.shapeFlag?go(l.component)||l.component.proxy:l.el,o=n?null:s,{i:i,r:r}=e,c=t&&t.r,u=i.refs===le?i.refs={}:i.refs,d=i.setupState;if(null!=c&&c!==r&&(be(c)?(u[c]=null,pe(d,c)&&(d[c]=null)):fa(c)&&(c.value=null)),ge(r))Ia(r,i,12,[o,u]);else{const t=be(r),l=fa(r);if(t||l){const i=()=>{if(e.f){const a=t?u[r]:r.value;n?fe(a)&&de(a,s):fe(a)?a.includes(s)||a.push(s):t?(u[r]=[s],pe(d,r)&&(d[r]=u[r])):(r.value=[s],e.k&&(u[e.k]=r.value))}else t?(u[r]=o,pe(d,r)&&(d[r]=o)):l&&(r.value=o,e.k&&(u[e.k]=o))};o?(i.id=-1,fs(i,a)):i()}}}let us=!1;const ds=e=>/svg/.test(e.namespaceURI)&&"foreignObject"!==e.tagName,_s=e=>8===e.nodeType;function ps(e){const{mt:t,p:a,o:{patchProp:l,createText:n,nextSibling:s,parentNode:o,remove:i,insert:r,createComment:c}}=e,u=(a,l,i,c,m,h=!1)=>{const g=_s(a)&&"["===a.data,b=()=>f(a,l,i,c,m,g),{type:y,ref:w,shapeFlag:x,patchFlag:k}=l,$=a.nodeType;l.el=a,-2===k&&(h=!1,l.dynamicChildren=null);let S=null;switch(y){case Ns:3!==$?""===l.children?(r(l.el=n(""),o(a),a),S=a):S=b():(a.data!==l.children&&(us=!0,a.data=l.children),S=s(a));break;case Cs:S=8!==$||g?b():s(a);break;case As:if(1===$||3===$){S=a;const e=!l.children.length;for(let t=0;t<l.staticCount;t++)e&&(l.children+=1===S.nodeType?S.outerHTML:S.data),t===l.staticCount-1&&(l.anchor=S),S=s(S);return S}S=b();break;case Ss:S=g?p(a,l,i,c,m,h):b();break;default:if(1&x)S=1!==$||l.type.toLowerCase()!==a.tagName.toLowerCase()?b():d(a,l,i,c,m,h);else if(6&x){l.slotScopeIds=m;const e=o(a);if(t(l,e,null,i,c,ds(e),h),S=g?v(a):s(a),S&&_s(S)&&"teleport end"===S.data&&(S=s(S)),Yl(l)){let t;g?(t=Hs(Ss),t.anchor=S?S.previousSibling:e.lastChild):t=3===a.nodeType?Ks(""):Hs("div"),t.el=a,l.component.subTree=t}}else 64&x?S=8!==$?b():l.type.hydrate(a,l,i,c,m,h,e,_):128&x&&(S=l.type.hydrate(a,l,i,c,ds(o(a)),m,h,e,u))}return null!=w&&cs(w,null,c,l),S},d=(e,t,a,n,s,o)=>{o=o||!!t.dynamicChildren;const{type:r,props:c,patchFlag:u,shapeFlag:d,dirs:p}=t,f="input"===r&&p||"option"===r;if(f||-1!==u){if(p&&xn(t,null,a,"created"),c)if(f||!o||48&u)for(const t in c)(f&&t.endsWith("value")||re(t)&&!Ce(t))&&l(e,t,null,c[t],!1,void 0,a);else c.onClick&&l(e,"onClick",null,c.onClick,!1,void 0,a);let r;if((r=c&&c.onVnodeBeforeMount)&&to(r,a,t),p&&xn(t,null,a,"beforeMount"),((r=c&&c.onVnodeMounted)||p)&&Cl((()=>{r&&to(r,a,t),p&&xn(t,null,a,"mounted")}),n),16&d&&(!c||!c.innerHTML&&!c.textContent)){let l=_(e.firstChild,t,e,a,n,s,o);for(;l;){us=!0;const e=l;l=l.nextSibling,i(e)}}else 8&d&&e.textContent!==t.children&&(us=!0,e.textContent=t.children)}return e.nextSibling},_=(e,t,l,n,s,o,i)=>{i=i||!!t.dynamicChildren;const r=t.children,c=r.length;for(let t=0;t<c;t++){const c=i?r[t]:r[t]=Zs(r[t]);if(e)e=u(e,c,n,s,o,i);else{if(c.type===Ns&&!c.children)continue;us=!0,a(null,c,l,null,n,s,ds(l),o)}}return e},p=(e,t,a,l,n,i)=>{const{slotScopeIds:u}=t;u&&(n=n?n.concat(u):u);const d=o(e),p=_(s(e),t,d,a,l,n,i);return p&&_s(p)&&"]"===p.data?s(t.anchor=p):(us=!0,r(t.anchor=c("]"),d,p),p)},f=(e,t,l,n,r,c)=>{if(us=!0,t.el=null,c){const t=v(e);for(;;){const a=s(e);if(!a||a===t)break;i(a)}}const u=s(e),d=o(e);return i(e),a(null,t,d,u,l,n,ds(d),r),u},v=e=>{let t=0;for(;e;)if((e=s(e))&&_s(e)&&("["===e.data&&t++,"]"===e.data)){if(0===t)return s(e);t--}return e};return[(e,t)=>{if(!t.hasChildNodes())return a(null,e,t),tl(),void(t._vnode=e);us=!1,u(t.firstChild,e,null,null,null),tl(),t._vnode=e,us&&console.error("Hydration completed but contains mismatches.")},u]}const fs=Cl;function vs(e){return hs(e)}function ms(e){return hs(e,ps)}function hs(e,t){(De||(De="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{})).__VUE__=!0;const{insert:a,remove:l,patchProp:n,createElement:s,createText:o,createComment:i,setText:r,setElementText:c,parentNode:u,nextSibling:d,setScopeId:_=se,cloneNode:p,insertStaticContent:f}=e,v=(e,t,a,l=null,n=null,s=null,o=!1,i=null,r=!!t.dynamicChildren)=>{if(e===t)return;e&&!Rs(e,t)&&(l=z(e),j(e,n,s,!0),e=null),-2===t.patchFlag&&(r=!1,t.dynamicChildren=null);const{type:c,ref:u,shapeFlag:d}=t;switch(c){case Ns:m(e,t,a,l);break;case Cs:h(e,t,a,l);break;case As:null==e&&g(t,a,l,o);break;case Ss:N(e,t,a,l,n,s,o,i,r);break;default:1&d?b(e,t,a,l,n,s,o,i,r):6&d?C(e,t,a,l,n,s,o,i,r):(64&d||128&d)&&c.process(e,t,a,l,n,s,o,i,r,B)}null!=u&&n&&cs(u,e&&e.ref,s,t||e,!t)},m=(e,t,l,n)=>{if(null==e)a(t.el=o(t.children),l,n);else{const a=t.el=e.el;t.children!==e.children&&r(a,t.children)}},h=(e,t,l,n)=>{null==e?a(t.el=i(t.children||""),l,n):t.el=e.el},g=(e,t,a,l)=>{[e.el,e.anchor]=f(e.children,t,a,l,e.el,e.anchor)},b=(e,t,a,l,n,s,o,i,r)=>{o=o||"svg"===t.type,null==e?y(t,a,l,n,s,o,i,r):k(e,t,n,s,o,i,r)},y=(e,t,l,o,i,r,u,d)=>{let _,f;const{type:v,props:m,shapeFlag:h,transition:g,patchFlag:b,dirs:y}=e;if(e.el&&void 0!==p&&-1===b)_=e.el=p(e.el);else{if(_=e.el=s(e.type,r,m&&m.is,m),8&h?c(_,e.children):16&h&&x(e.children,_,null,o,i,r&&"foreignObject"!==v,u,d),y&&xn(e,null,o,"created"),m){for(const t in m)"value"===t||Ce(t)||n(_,t,null,m[t],r,e.children,o,i,D);"value"in m&&n(_,"value",null,m.value),(f=m.onVnodeBeforeMount)&&to(f,o,e)}w(_,e,e.scopeId,u,o)}y&&xn(e,null,o,"beforeMount");const k=(!i||i&&!i.pendingBranch)&&g&&!g.persisted;k&&g.beforeEnter(_),a(_,t,l),((f=m&&m.onVnodeMounted)||k||y)&&fs((()=>{f&&to(f,o,e),k&&g.enter(_),y&&xn(e,null,o,"mounted")}),i)},w=(e,t,a,l,n)=>{if(a&&_(e,a),l)for(let t=0;t<l.length;t++)_(e,l[t]);if(n&&t===n.subTree){const t=n.vnode;w(e,t,t.scopeId,t.slotScopeIds,n.parent)}},x=(e,t,a,l,n,s,o,i,r=0)=>{for(let c=r;c<e.length;c++){const r=e[c]=i?Xs(e[c]):Zs(e[c]);v(null,r,t,a,l,n,s,o,i)}},k=(e,t,a,l,s,o,i)=>{const r=t.el=e.el;let{patchFlag:u,dynamicChildren:d,dirs:_}=t;u|=16&e.patchFlag;const p=e.props||le,f=t.props||le;let v;a&&gs(a,!1),(v=f.onVnodeBeforeUpdate)&&to(v,a,t,e),_&&xn(t,e,a,"beforeUpdate"),a&&gs(a,!0);const m=s&&"foreignObject"!==t.type;if(d?$(e.dynamicChildren,d,r,a,l,m,o):i||U(e,t,r,null,a,l,m,o,!1),u>0){if(16&u)S(r,t,p,f,a,l,s);else if(2&u&&p.class!==f.class&&n(r,"class",null,f.class,s),4&u&&n(r,"style",p.style,f.style,s),8&u){const o=t.dynamicProps;for(let t=0;t<o.length;t++){const i=o[t],c=p[i],u=f[i];u===c&&"value"!==i||n(r,i,c,u,s,e.children,a,l,D)}}1&u&&e.children!==t.children&&c(r,t.children)}else i||null!=d||S(r,t,p,f,a,l,s);((v=f.onVnodeUpdated)||_)&&fs((()=>{v&&to(v,a,t,e),_&&xn(t,e,a,"updated")}),l)},$=(e,t,a,l,n,s,o)=>{for(let i=0;i<t.length;i++){const r=e[i],c=t[i],d=r.el&&(r.type===Ss||!Rs(r,c)||70&r.shapeFlag)?u(r.el):a;v(r,c,d,null,l,n,s,o,!0)}},S=(e,t,a,l,s,o,i)=>{if(a!==l){for(const r in l){if(Ce(r))continue;const c=l[r],u=a[r];c!==u&&"value"!==r&&n(e,r,u,c,i,t.children,s,o,D)}if(a!==le)for(const r in a)Ce(r)||r in l||n(e,r,a[r],null,i,t.children,s,o,D);"value"in l&&n(e,"value",a.value,l.value)}},N=(e,t,l,n,s,i,r,c,u)=>{const d=t.el=e?e.el:o(""),_=t.anchor=e?e.anchor:o("");let{patchFlag:p,dynamicChildren:f,slotScopeIds:v}=t;v&&(c=c?c.concat(v):v),null==e?(a(d,l,n),a(_,l,n),x(t.children,l,_,s,i,r,c,u)):p>0&&64&p&&f&&e.dynamicChildren?($(e.dynamicChildren,f,l,s,i,r,c),(null!=t.key||s&&t===s.subTree)&&bs(e,t,!0)):U(e,t,l,_,s,i,r,c,u)},C=(e,t,a,l,n,s,o,i,r)=>{t.slotScopeIds=i,null==e?512&t.shapeFlag?n.ctx.activate(t,a,l,o,r):A(t,a,l,n,s,o,r):E(e,t,r)},A=(e,t,a,l,n,s,o)=>{const i=e.component=function(e,t,a){const l=e.type,n=(t?t.appContext:e.appContext)||ao,s={uid:lo++,vnode:e,type:l,parent:t,appContext:n,root:null,next:null,subTree:null,effect:null,update:null,scope:new qe(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:t?t.provides:Object.create(n.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:Yn(l,n),emitsOptions:rl(l,n),emit:null,emitted:null,propsDefaults:le,inheritAttrs:l.inheritAttrs,ctx:le,data:le,props:le,attrs:le,slots:le,refs:le,setupState:le,setupContext:null,suspense:a,suspenseId:a?a.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return s.ctx={_:s},s.root=t?t.root:s,s.emit=il.bind(null,s),e.ce&&e.ce(s),s}(e,l,n);if(Ql(e)&&(i.ctx.renderer=B),function(e,t=!1){_o=t;const{props:a,children:l}=e.vnode,n=ro(e);(function(e,t,a,l=!1){const n={},s={};Fe(s,zs,1),e.propsDefaults=Object.create(null),Kn(e,t,n,s);for(const t in e.propsOptions[0])t in n||(n[t]=void 0);e.props=a?l?n:ea(n):e.type.props?n:s,e.attrs=s})(e,a,n,t),((e,t)=>{if(32&e.vnode.shapeFlag){const a=t._;a?(e.slots=ra(t),Fe(t,"_",a)):ns(t,e.slots={})}else e.slots={},t&&ss(e,t);Fe(e.slots,zs,1)})(e,l),n&&function(e,t){const a=e.type;e.accessCache=Object.create(null),e.proxy=ca(new Proxy(e.ctx,jn));const{setup:l}=a;if(l){const a=e.setupContext=l.length>1?ho(e):null;oo(e),rt();const n=Ia(l,e,0,[e.props,a]);if(ct(),io(),xe(n)){if(n.then(io,io),t)return n.then((a=>{po(e,a,t)})).catch((t=>{Ma(t,e,0)}));e.asyncDep=n}else po(e,n,t)}else mo(e,t)}(e,t),_o=!1}(i),i.asyncDep){if(n&&n.registerDep(i,T),!e.el){const e=i.subTree=Hs(Cs);h(null,e,t,a)}}else T(i,e,t,a,n,s,o)},E=(e,t,a)=>{const l=t.component=e.component;if(function(e,t,a){const{props:l,children:n,component:s}=e,{props:o,children:i,patchFlag:r}=t,c=s.emitsOptions;if(t.dirs||t.transition)return!0;if(!(a&&r>=0))return!(!n&&!i||i&&i.$stable)||l!==o&&(l?!o||yl(l,o,c):!!o);if(1024&r)return!0;if(16&r)return l?yl(l,o,c):!!o;if(8&r){const e=t.dynamicProps;for(let t=0;t<e.length;t++){const a=e[t];if(o[a]!==l[a]&&!cl(c,a))return!0}}return!1}(e,t,a)){if(l.asyncDep&&!l.asyncResolved)return void P(l,t,a);l.next=t,function(e){const t=Fa.indexOf(e);t>Ra&&Fa.splice(t,1)}(l.update),l.update()}else t.el=e.el,l.vnode=t},T=(e,t,a,l,n,s,o)=>{const i=e.effect=new at((()=>{if(e.isMounted){let t,{next:a,bu:l,u:i,parent:r,vnode:c}=e,d=a;gs(e,!1),a?(a.el=c.el,P(e,a,o)):a=c,l&&Le(l),(t=a.props&&a.props.onVnodeBeforeUpdate)&&to(t,r,a,c),gs(e,!0);const _=hl(e),p=e.subTree;e.subTree=_,v(p,_,u(p.el),z(p),e,n,s),a.el=_.el,null===d&&wl(e,_.el),i&&fs(i,n),(t=a.props&&a.props.onVnodeUpdated)&&fs((()=>to(t,r,a,c)),n)}else{let o;const{el:i,props:r}=t,{bm:c,m:u,parent:d}=e,_=Yl(t);if(gs(e,!1),c&&Le(c),!_&&(o=r&&r.onVnodeBeforeMount)&&to(o,d,t),gs(e,!0),i&&H){const a=()=>{e.subTree=hl(e),H(i,e.subTree,e,n,null)};_?t.type.__asyncLoader().then((()=>!e.isUnmounted&&a())):a()}else{const o=e.subTree=hl(e);v(null,o,a,l,e,n,s),t.el=o.el}if(u&&fs(u,n),!_&&(o=r&&r.onVnodeMounted)){const e=t;fs((()=>to(o,d,e)),n)}(256&t.shapeFlag||d&&Yl(d.vnode)&&256&d.vnode.shapeFlag)&&e.a&&fs(e.a,n),e.isMounted=!0,t=a=l=null}}),(()=>Ya(r)),e.scope),r=e.update=()=>i.run();r.id=e.uid,gs(e,!0),r()},P=(e,t,a)=>{t.component=e;const l=e.vnode.props;e.vnode=t,e.next=null,function(e,t,a,l){const{props:n,attrs:s,vnode:{patchFlag:o}}=e,i=ra(n),[r]=e.propsOptions;let c=!1;if(!(l||o>0)||16&o){let l;Kn(e,t,n,s)&&(c=!0);for(const s in i)t&&(pe(t,s)||(l=Ie(s))!==s&&pe(t,l))||(r?!a||void 0===a[s]&&void 0===a[l]||(n[s]=Jn(r,i,s,void 0,e,!0)):delete n[s]);if(s!==i)for(const e in s)t&&pe(t,e)||(delete s[e],c=!0)}else if(8&o){const a=e.vnode.dynamicProps;for(let l=0;l<a.length;l++){let o=a[l];if(cl(e.emitsOptions,o))continue;const u=t[o];if(r)if(pe(s,o))u!==s[o]&&(s[o]=u,c=!0);else{const t=Pe(o);n[t]=Jn(r,i,t,u,e,!1)}else u!==s[o]&&(s[o]=u,c=!0)}}c&&_t(e,"set","$attrs")}(e,t.props,l,a),((e,t,a)=>{const{vnode:l,slots:n}=e;let s=!0,o=le;if(32&l.shapeFlag){const e=t._;e?a&&1===e?s=!1:(ue(n,t),a||1!==e||delete n._):(s=!t.$stable,ns(t,n)),o=t}else t&&(ss(e,t),o={default:1});if(s)for(const e in n)ts(e)||e in o||delete n[e]})(e,t.children,a),rt(),el(void 0,e.update),ct()},U=(e,t,a,l,n,s,o,i,r=!1)=>{const u=e&&e.children,d=e?e.shapeFlag:0,_=t.children,{patchFlag:p,shapeFlag:f}=t;if(p>0){if(128&p)return void O(u,_,a,l,n,s,o,i,r);if(256&p)return void I(u,_,a,l,n,s,o,i,r)}8&f?(16&d&&D(u,n,s),_!==u&&c(a,_)):16&d?16&f?O(u,_,a,l,n,s,o,i,r):D(u,n,s,!0):(8&d&&c(a,""),16&f&&x(_,a,l,n,s,o,i,r))},I=(e,t,a,l,n,s,o,i,r)=>{const c=(e=e||ne).length,u=(t=t||ne).length,d=Math.min(c,u);let _;for(_=0;_<d;_++){const l=t[_]=r?Xs(t[_]):Zs(t[_]);v(e[_],l,a,null,n,s,o,i,r)}c>u?D(e,n,s,!0,!1,d):x(t,a,l,n,s,o,i,r,d)},O=(e,t,a,l,n,s,o,i,r)=>{let c=0;const u=t.length;let d=e.length-1,_=u-1;for(;c<=d&&c<=_;){const l=e[c],u=t[c]=r?Xs(t[c]):Zs(t[c]);if(!Rs(l,u))break;v(l,u,a,null,n,s,o,i,r),c++}for(;c<=d&&c<=_;){const l=e[d],c=t[_]=r?Xs(t[_]):Zs(t[_]);if(!Rs(l,c))break;v(l,c,a,null,n,s,o,i,r),d--,_--}if(c>d){if(c<=_){const e=_+1,d=e<u?t[e].el:l;for(;c<=_;)v(null,t[c]=r?Xs(t[c]):Zs(t[c]),a,d,n,s,o,i,r),c++}}else if(c>_)for(;c<=d;)j(e[c],n,s,!0),c++;else{const p=c,f=c,m=new Map;for(c=f;c<=_;c++){const e=t[c]=r?Xs(t[c]):Zs(t[c]);null!=e.key&&m.set(e.key,c)}let h,g=0;const b=_-f+1;let y=!1,w=0;const x=new Array(b);for(c=0;c<b;c++)x[c]=0;for(c=p;c<=d;c++){const l=e[c];if(g>=b){j(l,n,s,!0);continue}let u;if(null!=l.key)u=m.get(l.key);else for(h=f;h<=_;h++)if(0===x[h-f]&&Rs(l,t[h])){u=h;break}void 0===u?j(l,n,s,!0):(x[u-f]=c+1,u>=w?w=u:y=!0,v(l,t[u],a,null,n,s,o,i,r),g++)}const k=y?function(e){const t=e.slice(),a=[0];let l,n,s,o,i;const r=e.length;for(l=0;l<r;l++){const r=e[l];if(0!==r){if(n=a[a.length-1],e[n]<r){t[l]=n,a.push(l);continue}for(s=0,o=a.length-1;s<o;)i=s+o>>1,e[a[i]]<r?s=i+1:o=i;r<e[a[s]]&&(s>0&&(t[l]=a[s-1]),a[s]=l)}}for(s=a.length,o=a[s-1];s-- >0;)a[s]=o,o=t[o];return a}(x):ne;for(h=k.length-1,c=b-1;c>=0;c--){const e=f+c,d=t[e],_=e+1<u?t[e+1].el:l;0===x[c]?v(null,d,a,_,n,s,o,i,r):y&&(h<0||c!==k[h]?M(d,a,_,2):h--)}}},M=(e,t,l,n,s=null)=>{const{el:o,type:i,transition:r,children:c,shapeFlag:u}=e;if(6&u)M(e.component.subTree,t,l,n);else if(128&u)e.suspense.move(t,l,n);else if(64&u)i.move(e,t,l,B);else if(i!==Ss)if(i!==As)if(2!==n&&1&u&&r)if(0===n)r.beforeEnter(o),a(o,t,l),fs((()=>r.enter(o)),s);else{const{leave:e,delayLeave:n,afterLeave:s}=r,i=()=>a(o,t,l),c=()=>{e(o,(()=>{i(),s&&s()}))};n?n(o,i,c):c()}else a(o,t,l);else(({el:e,anchor:t},l,n)=>{let s;for(;e&&e!==t;)s=d(e),a(e,l,n),e=s;a(t,l,n)})(e,t,l);else{a(o,t,l);for(let e=0;e<c.length;e++)M(c[e],t,l,n);a(e.anchor,t,l)}},j=(e,t,a,l=!1,n=!1)=>{const{type:s,props:o,ref:i,children:r,dynamicChildren:c,shapeFlag:u,patchFlag:d,dirs:_}=e;if(null!=i&&cs(i,null,a,e,!0),256&u)return void t.ctx.deactivate(e);const p=1&u&&_,f=!Yl(e);let v;if(f&&(v=o&&o.onVnodeBeforeUnmount)&&to(v,t,e),6&u)R(e.component,a,l);else{if(128&u)return void e.suspense.unmount(a,l);p&&xn(e,null,t,"beforeUnmount"),64&u?e.type.remove(e,t,a,n,B,l):c&&(s!==Ss||d>0&&64&d)?D(c,t,a,!1,!0):(s===Ss&&384&d||!n&&16&u)&&D(r,t,a),l&&L(e)}(f&&(v=o&&o.onVnodeUnmounted)||p)&&fs((()=>{v&&to(v,t,e),p&&xn(e,null,t,"unmounted")}),a)},L=e=>{const{type:t,el:a,anchor:n,transition:s}=e;if(t===Ss)return void F(a,n);if(t===As)return void(({el:e,anchor:t})=>{let a;for(;e&&e!==t;)a=d(e),l(e),e=a;l(t)})(e);const o=()=>{l(a),s&&!s.persisted&&s.afterLeave&&s.afterLeave()};if(1&e.shapeFlag&&s&&!s.persisted){const{leave:t,delayLeave:l}=s,n=()=>t(a,o);l?l(e.el,o,n):n()}else o()},F=(e,t)=>{let a;for(;e!==t;)a=d(e),l(e),e=a;l(t)},R=(e,t,a)=>{const{bum:l,scope:n,update:s,subTree:o,um:i}=e;l&&Le(l),n.stop(),s&&(s.active=!1,j(o,e,t,a)),i&&fs(i,t),fs((()=>{e.isUnmounted=!0}),t),t&&t.pendingBranch&&!t.isUnmounted&&e.asyncDep&&!e.asyncResolved&&e.suspenseId===t.pendingId&&(t.deps--,0===t.deps&&t.resolve())},D=(e,t,a,l=!1,n=!1,s=0)=>{for(let o=s;o<e.length;o++)j(e[o],t,a,l,n)},z=e=>6&e.shapeFlag?z(e.component.subTree):128&e.shapeFlag?e.suspense.next():d(e.anchor||e.el),q=(e,t,a)=>{null==e?t._vnode&&j(t._vnode,null,null,!0):v(t._vnode||null,e,t,null,null,null,a),tl(),t._vnode=e},B={p:v,um:j,m:M,r:L,mt:A,mc:x,pc:U,pbc:$,n:z,o:e};let V,H;return t&&([V,H]=t(B)),{render:q,hydrate:V,createApp:rs(q,V)}}function gs({effect:e,update:t},a){e.allowRecurse=t.allowRecurse=a}function bs(e,t,a=!1){const l=e.children,n=t.children;if(fe(l)&&fe(n))for(let e=0;e<l.length;e++){const t=l[e];let s=n[e];1&s.shapeFlag&&!s.dynamicChildren&&((s.patchFlag<=0||32===s.patchFlag)&&(s=n[e]=Xs(n[e]),s.el=t.el),a||bs(t,s))}}const ys=e=>e&&(e.disabled||""===e.disabled),ws=e=>"undefined"!=typeof SVGElement&&e instanceof SVGElement,xs=(e,t)=>{const a=e&&e.to;return be(a)?t?t(a):null:a};function ks(e,t,a,{o:{insert:l},m:n},s=2){0===s&&l(e.targetAnchor,t,a);const{el:o,anchor:i,shapeFlag:r,children:c,props:u}=e,d=2===s;if(d&&l(o,t,a),(!d||ys(u))&&16&r)for(let e=0;e<c.length;e++)n(c[e],t,a,2);d&&l(i,t,a)}const $s={__isTeleport:!0,process(e,t,a,l,n,s,o,i,r,c){const{mc:u,pc:d,pbc:_,o:{insert:p,querySelector:f,createText:v}}=c,m=ys(t.props);let{shapeFlag:h,children:g,dynamicChildren:b}=t;if(null==e){const e=t.el=v(""),c=t.anchor=v("");p(e,a,l),p(c,a,l);const d=t.target=xs(t.props,f),_=t.targetAnchor=v("");d&&(p(_,d),o=o||ws(d));const b=(e,t)=>{16&h&&u(g,e,t,n,s,o,i,r)};m?b(a,c):d&&b(d,_)}else{t.el=e.el;const l=t.anchor=e.anchor,u=t.target=e.target,p=t.targetAnchor=e.targetAnchor,v=ys(e.props),h=v?a:u,g=v?l:p;if(o=o||ws(u),b?(_(e.dynamicChildren,b,h,n,s,o,i),bs(e,t,!0)):r||d(e,t,h,g,n,s,o,i,!1),m)v||ks(t,a,l,c,1);else if((t.props&&t.props.to)!==(e.props&&e.props.to)){const e=t.target=xs(t.props,f);e&&ks(t,e,null,c,0)}else v&&ks(t,u,p,c,1)}},remove(e,t,a,l,{um:n,o:{remove:s}},o){const{shapeFlag:i,children:r,anchor:c,targetAnchor:u,target:d,props:_}=e;if(d&&s(u),(o||!ys(_))&&(s(c),16&i))for(let e=0;e<r.length;e++){const l=r[e];n(l,t,a,!0,!!l.dynamicChildren)}},move:ks,hydrate:function(e,t,a,l,n,s,{o:{nextSibling:o,parentNode:i,querySelector:r}},c){const u=t.target=xs(t.props,r);if(u){const r=u._lpa||u.firstChild;if(16&t.shapeFlag)if(ys(t.props))t.anchor=c(o(e),t,i(e),a,l,n,s),t.targetAnchor=r;else{t.anchor=o(e);let i=r;for(;i;)if(i=o(i),i&&8===i.nodeType&&"teleport anchor"===i.data){t.targetAnchor=i,u._lpa=t.targetAnchor&&o(t.targetAnchor);break}c(r,t,u,a,l,n,s)}}return t.anchor&&o(t.anchor)}},Ss=Symbol(void 0),Ns=Symbol(void 0),Cs=Symbol(void 0),As=Symbol(void 0),Es=[];let Ts=null;function Ps(e=!1){Es.push(Ts=e?null:[])}function Us(){Es.pop(),Ts=Es[Es.length-1]||null}let Is=1;function Os(e){Is+=e}function Ms(e){return e.dynamicChildren=Is>0?Ts||ne:null,Us(),Is>0&&Ts&&Ts.push(e),e}function js(e,t,a,l,n,s){return Ms(Vs(e,t,a,l,n,s,!0))}function Ls(e,t,a,l,n){return Ms(Hs(e,t,a,l,n,!0))}function Fs(e){return!!e&&!0===e.__v_isVNode}function Rs(e,t){return e.type===t.type&&e.key===t.key}function Ds(e){}const zs="__vInternal",qs=({key:e})=>null!=e?e:null,Bs=({ref:e,ref_key:t,ref_for:a})=>null!=e?be(e)||fa(e)||ge(e)?{i:ul,r:e,k:t,f:!!a}:e:null;function Vs(e,t=null,a=null,l=0,n=null,s=(e===Ss?0:1),o=!1,i=!1){const r={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&qs(t),ref:t&&Bs(t),scopeId:dl,slotScopeIds:null,children:a,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:s,patchFlag:l,dynamicProps:n,dynamicChildren:null,appContext:null};return i?(Qs(r,a),128&s&&e.normalize(r)):a&&(r.shapeFlag|=be(a)?8:16),Is>0&&!o&&Ts&&(r.patchFlag>0||6&s)&&32!==r.patchFlag&&Ts.push(r),r}const Hs=function(e,t=null,a=null,l=0,n=null,s=!1){if(e&&e!==$n||(e=Cs),Fs(e)){const l=Ws(e,t,!0);return a&&Qs(l,a),Is>0&&!s&&Ts&&(6&l.shapeFlag?Ts[Ts.indexOf(e)]=l:Ts.push(l)),l.patchFlag|=-2,l}var o;if(ge(o=e)&&"__vccOpts"in o&&(e=e.__vccOpts),t){t=Gs(t);let{class:e,style:a}=t;e&&!be(e)&&(t.class=K(e)),we(a)&&(ia(a)&&!fe(a)&&(a=ue({},a)),t.style=V(a))}return Vs(e,t,a,l,n,be(e)?1:xl(e)?128:(e=>e.__isTeleport)(e)?64:we(e)?4:ge(e)?2:0,s,!0)};function Gs(e){return e?ia(e)||zs in e?ue({},e):e:null}function Ws(e,t,a=!1){const{props:l,ref:n,patchFlag:s,children:o}=e,i=t?eo(l||{},t):l;return{__v_isVNode:!0,__v_skip:!0,type:e.type,props:i,key:i&&qs(i),ref:t&&t.ref?a&&n?fe(n)?n.concat(Bs(t)):[n,Bs(t)]:Bs(t):n,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:o,target:e.target,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==Ss?-1===s?16:16|s:s,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:e.transition,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&Ws(e.ssContent),ssFallback:e.ssFallback&&Ws(e.ssFallback),el:e.el,anchor:e.anchor}}function Ks(e=" ",t=0){return Hs(Ns,null,e,t)}function Js(e,t){const a=Hs(As,null,e);return a.staticCount=t,a}function Ys(e="",t=!1){return t?(Ps(),Ls(Cs,null,e)):Hs(Cs,null,e)}function Zs(e){return null==e||"boolean"==typeof e?Hs(Cs):fe(e)?Hs(Ss,null,e.slice()):"object"==typeof e?Xs(e):Hs(Ns,null,String(e))}function Xs(e){return null===e.el||e.memo?e:Ws(e)}function Qs(e,t){let a=0;const{shapeFlag:l}=e;if(null==t)t=null;else if(fe(t))a=16;else if("object"==typeof t){if(65&l){const a=t.default;return void(a&&(a._c&&(a._d=!1),Qs(e,a()),a._c&&(a._d=!0)))}{a=32;const l=t._;l||zs in t?3===l&&ul&&(1===ul.slots._?t._=1:(t._=2,e.patchFlag|=1024)):t._ctx=ul}}else ge(t)?(t={default:t,_ctx:ul},a=32):(t=String(t),64&l?(a=16,t=[Ks(t)]):a=8);e.children=t,e.shapeFlag|=a}function eo(...e){const t={};for(let a=0;a<e.length;a++){const l=e[a];for(const e in l)if("class"===e)t.class!==l.class&&(t.class=K([t.class,l.class]));else if("style"===e)t.style=V([t.style,l.style]);else if(re(e)){const a=t[e],n=l[e];!n||a===n||fe(a)&&a.includes(n)||(t[e]=a?[].concat(a,n):n)}else""!==e&&(t[e]=l[e])}return t}function to(e,t,a,l=null){Oa(e,t,7,[a,l])}const ao=os();let lo=0,no=null;const so=()=>no||ul,oo=e=>{no=e,e.scope.on()},io=()=>{no&&no.scope.off(),no=null};function ro(e){return 4&e.vnode.shapeFlag}let co,uo,_o=!1;function po(e,t,a){ge(t)?e.render=t:we(t)&&(e.setupState=xa(t)),mo(e,a)}function fo(e){co=e,uo=e=>{e.render._rc&&(e.withProxy=new Proxy(e.ctx,Ln))}}const vo=()=>!co;function mo(e,t,a){const l=e.type;if(!e.render){if(!t&&co&&!l.render){const t=l.template;if(t){const{isCustomElement:a,compilerOptions:n}=e.appContext.config,{delimiters:s,compilerOptions:o}=l,i=ue(ue({isCustomElement:a,delimiters:s},n),o);l.render=co(t,i)}}e.render=l.render||se,uo&&uo(e)}oo(e),rt(),function(e){const t=zn(e),a=e.proxy,l=e.ctx;Fn=!1,t.beforeCreate&&Rn(t.beforeCreate,e,"bc");const{data:n,computed:s,methods:o,watch:i,provide:r,inject:c,created:u,beforeMount:d,mounted:_,beforeUpdate:p,updated:f,activated:v,deactivated:m,beforeUnmount:h,unmounted:g,render:b,renderTracked:y,renderTriggered:w,errorCaptured:x,serverPrefetch:k,expose:$,inheritAttrs:S,components:N,directives:C}=t;if(c&&function(e,t,a=se,l=!1){fe(e)&&(e=Hn(e));for(const a in e){const n=e[a];let s;s=we(n)?"default"in n?Tl(n.from||a,n.default,!0):Tl(n.from||a):Tl(n),fa(s)&&l?Object.defineProperty(t,a,{enumerable:!0,configurable:!0,get:()=>s.value,set:e=>s.value=e}):t[a]=s}}(c,l,null,e.appContext.config.unwrapInjectedRef),o)for(const e in o){const t=o[e];ge(t)&&(l[e]=t.bind(a))}if(n){const t=n.call(a,a);we(t)&&(e.data=Qt(t))}if(Fn=!0,s)for(const e in s){const t=s[e],n=ge(t)?t.bind(a,a):ge(t.get)?t.get.bind(a,a):se,o=!ge(t)&&ge(t.set)?t.set.bind(a):se,i=xo({get:n,set:o});Object.defineProperty(l,e,{enumerable:!0,configurable:!0,get:()=>i.value,set:e=>i.value=e})}if(i)for(const e in i)Dn(i[e],l,a,e);if(r){const e=ge(r)?r.call(a):r;Reflect.ownKeys(e).forEach((t=>{El(t,e[t])}))}function A(e,t){fe(t)?t.forEach((t=>e(t.bind(a)))):t&&e(t.bind(a))}if(u&&Rn(u,e,"c"),A(dn,d),A(_n,_),A(pn,p),A(fn,f),A(an,v),A(ln,m),A(yn,x),A(bn,y),A(gn,w),A(vn,h),A(mn,g),A(hn,k),fe($))if($.length){const t=e.exposed||(e.exposed={});$.forEach((e=>{Object.defineProperty(t,e,{get:()=>a[e],set:t=>a[e]=t})}))}else e.exposed||(e.exposed={});b&&e.render===se&&(e.render=b),null!=S&&(e.inheritAttrs=S),N&&(e.components=N),C&&(e.directives=C)}(e),ct(),io()}function ho(e){let t;return{get attrs(){return t||(t=function(e){return new Proxy(e.attrs,{get:(t,a)=>(ut(e,0,"$attrs"),t[a])})}(e))},slots:e.slots,emit:e.emit,expose:t=>{e.exposed=t||{}}}}function go(e){if(e.exposed)return e.exposeProxy||(e.exposeProxy=new Proxy(xa(ca(e.exposed)),{get:(t,a)=>a in t?t[a]:a in Mn?Mn[a](e):void 0}))}const bo=/(?:^|[-_])(\w)/g;function yo(e,t=!0){return ge(e)?e.displayName||e.name:e.name||t&&e.__name}function wo(e,t,a=!1){let l=yo(t);if(!l&&t.__file){const e=t.__file.match(/([^/\\]+)\.\w+$/);e&&(l=e[1])}if(!l&&e&&e.parent){const a=e=>{for(const a in e)if(e[a]===t)return a};l=a(e.components||e.parent.type.components)||a(e.appContext.components)}return l?l.replace(bo,(e=>e.toUpperCase())).replace(/[-_]/g,""):a?"App":"Anonymous"}const xo=(e,t)=>function(e,t,a=!1){let l,n;const s=ge(e);return s?(l=e,n=se):(l=e.get,n=e.set),new Aa(l,n,s||!n,a)}(e,0,_o);function ko(){return null}function $o(){return null}function So(e){}function No(e,t){return null}function Co(){return Eo().slots}function Ao(){return Eo().attrs}function Eo(){const e=so();return e.setupContext||(e.setupContext=ho(e))}function To(e,t){const a=fe(e)?e.reduce(((e,t)=>(e[t]={},e)),{}):e;for(const e in t){const l=a[e];l?fe(l)||ge(l)?a[e]={type:l,default:t[e]}:l.default=t[e]:null===l&&(a[e]={default:t[e]})}return a}function Po(e,t){const a={};for(const l in e)t.includes(l)||Object.defineProperty(a,l,{enumerable:!0,get:()=>e[l]});return a}function Uo(e){const t=so();let a=e();return io(),xe(a)&&(a=a.catch((e=>{throw oo(t),e}))),[a,()=>oo(t)]}function Io(e,t,a){const l=arguments.length;return 2===l?we(t)&&!fe(t)?Fs(t)?Hs(e,null,[t]):Hs(e,t):Hs(e,null,t):(l>3?a=Array.prototype.slice.call(arguments,2):3===l&&Fs(a)&&(a=[a]),Hs(e,t,a))}const Oo=Symbol(""),Mo=()=>{{const e=Tl(Oo);return e||Ta("Server rendering context not provided. Make sure to only call useSSRContext() conditionally in the server build."),e}};function jo(){}function Lo(e,t,a,l){const n=a[l];if(n&&Fo(n,e))return n;const s=t();return s.memo=e.slice(),a[l]=s}function Fo(e,t){const a=e.memo;if(a.length!=t.length)return!1;for(let e=0;e<a.length;e++)if(je(a[e],t[e]))return!1;return Is>0&&Ts&&Ts.push(e),!0}const Ro="3.2.37",Do="undefined"!=typeof document?document:null,zo=Do&&Do.createElement("template"),qo={insert:(e,t,a)=>{t.insertBefore(e,a||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,a,l)=>{const n=t?Do.createElementNS("http://www.w3.org/2000/svg",e):Do.createElement(e,a?{is:a}:void 0);return"select"===e&&l&&null!=l.multiple&&n.setAttribute("multiple",l.multiple),n},createText:e=>Do.createTextNode(e),createComment:e=>Do.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>Do.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},cloneNode(e){const t=e.cloneNode(!0);return"_value"in e&&(t._value=e._value),t},insertStaticContent(e,t,a,l,n,s){const o=a?a.previousSibling:t.lastChild;if(n&&(n===s||n.nextSibling))for(;t.insertBefore(n.cloneNode(!0),a),n!==s&&(n=n.nextSibling););else{zo.innerHTML=l?`<svg>${e}</svg>`:e;const n=zo.content;if(l){const e=n.firstChild;for(;e.firstChild;)n.appendChild(e.firstChild);n.removeChild(e)}t.insertBefore(n,a)}return[o?o.nextSibling:t.firstChild,a?a.previousSibling:t.lastChild]}},Bo=/\s*!important$/;function Vo(e,t,a){if(fe(a))a.forEach((a=>Vo(e,t,a)));else if(null==a&&(a=""),t.startsWith("--"))e.setProperty(t,a);else{const l=function(e,t){const a=Go[t];if(a)return a;let l=Pe(t);if("filter"!==l&&l in e)return Go[t]=l;l=Oe(l);for(let a=0;a<Ho.length;a++){const n=Ho[a]+l;if(n in e)return Go[t]=n}return t}(e,t);Bo.test(a)?e.setProperty(Ie(l),a.replace(Bo,""),"important"):e[l]=a}}const Ho=["Webkit","Moz","ms"],Go={},Wo="http://www.w3.org/1999/xlink",[Ko,Jo]=(()=>{let e=Date.now,t=!1;if("undefined"!=typeof window){Date.now()>document.createEvent("Event").timeStamp&&(e=performance.now.bind(performance));const a=navigator.userAgent.match(/firefox\/(\d+)/i);t=!!(a&&Number(a[1])<=53)}return[e,t]})();let Yo=0;const Zo=Promise.resolve(),Xo=()=>{Yo=0};function Qo(e,t,a,l){e.addEventListener(t,a,l)}const ei=/(?:Once|Passive|Capture)$/,ti=/^on[a-z]/;function ai(e,t){const a=Jl(e);class l extends si{constructor(e){super(a,e,t)}}return l.def=a,l}const li=e=>ai(e,nr),ni="undefined"!=typeof HTMLElement?HTMLElement:class{};class si extends ni{constructor(e,t={},a){super(),this._def=e,this._props=t,this._instance=null,this._connected=!1,this._resolved=!1,this._numberProps=null,this.shadowRoot&&a?a(this._createVNode(),this.shadowRoot):this.attachShadow({mode:"open"})}connectedCallback(){this._connected=!0,this._instance||this._resolveDef()}disconnectedCallback(){this._connected=!1,Ja((()=>{this._connected||(lr(null,this.shadowRoot),this._instance=null)}))}_resolveDef(){if(this._resolved)return;this._resolved=!0;for(let e=0;e<this.attributes.length;e++)this._setAttr(this.attributes[e].name);new MutationObserver((e=>{for(const t of e)this._setAttr(t.attributeName)})).observe(this,{attributes:!0});const e=e=>{const{props:t,styles:a}=e,l=!fe(t),n=t?l?Object.keys(t):t:[];let s;if(l)for(const e in this._props){const a=t[e];(a===Number||a&&a.type===Number)&&(this._props[e]=Re(this._props[e]),(s||(s=Object.create(null)))[e]=!0)}this._numberProps=s;for(const e of Object.keys(this))"_"!==e[0]&&this._setProp(e,this[e],!0,!1);for(const e of n.map(Pe))Object.defineProperty(this,e,{get(){return this._getProp(e)},set(t){this._setProp(e,t)}});this._applyStyles(a),this._update()},t=this._def.__asyncLoader;t?t().then(e):e(this._def)}_setAttr(e){let t=this.getAttribute(e);this._numberProps&&this._numberProps[e]&&(t=Re(t)),this._setProp(Pe(e),t,!1)}_getProp(e){return this._props[e]}_setProp(e,t,a=!0,l=!0){t!==this._props[e]&&(this._props[e]=t,l&&this._instance&&this._update(),a&&(!0===t?this.setAttribute(Ie(e),""):"string"==typeof t||"number"==typeof t?this.setAttribute(Ie(e),t+""):t||this.removeAttribute(Ie(e))))}_update(){lr(this._createVNode(),this.shadowRoot)}_createVNode(){const e=Hs(this._def,ue({},this._props));return this._instance||(e.ce=e=>{this._instance=e,e.isCE=!0,e.emit=(e,...t)=>{this.dispatchEvent(new CustomEvent(e,{detail:t}))};let t=this;for(;t=t&&(t.parentNode||t.host);)if(t instanceof si){e.parent=t._instance;break}}),e}_applyStyles(e){e&&e.forEach((e=>{const t=document.createElement("style");t.textContent=e,this.shadowRoot.appendChild(t)}))}}function oi(e="$style"){{const t=so();if(!t)return le;const a=t.type.__cssModules;if(!a)return le;return a[e]||le}}function ii(e){const t=so();if(!t)return;const a=()=>ri(t.subTree,e(t.proxy));Ul(a),_n((()=>{const e=new MutationObserver(a);e.observe(t.subTree.el.parentNode,{childList:!0}),mn((()=>e.disconnect()))}))}function ri(e,t){if(128&e.shapeFlag){const a=e.suspense;e=a.activeBranch,a.pendingBranch&&!a.isHydrating&&a.effects.push((()=>{ri(a.activeBranch,t)}))}for(;e.component;)e=e.component.subTree;if(1&e.shapeFlag&&e.el)ci(e.el,t);else if(e.type===Ss)e.children.forEach((e=>ri(e,t)));else if(e.type===As){let{el:a,anchor:l}=e;for(;a&&(ci(a,t),a!==l);)a=a.nextSibling}}function ci(e,t){if(1===e.nodeType){const a=e.style;for(const e in t)a.setProperty(`--${e}`,t[e])}}const ui=(e,{slots:t})=>Io(ql,vi(e),t);ui.displayName="Transition";const di={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},_i=ui.props=ue({},ql.props,di),pi=(e,t=[])=>{fe(e)?e.forEach((e=>e(...t))):e&&e(...t)},fi=e=>!!e&&(fe(e)?e.some((e=>e.length>1)):e.length>1);function vi(e){const t={};for(const a in e)a in di||(t[a]=e[a]);if(!1===e.css)return t;const{name:a="v",type:l,duration:n,enterFromClass:s=`${a}-enter-from`,enterActiveClass:o=`${a}-enter-active`,enterToClass:i=`${a}-enter-to`,appearFromClass:r=s,appearActiveClass:c=o,appearToClass:u=i,leaveFromClass:d=`${a}-leave-from`,leaveActiveClass:_=`${a}-leave-active`,leaveToClass:p=`${a}-leave-to`}=e,f=function(e){if(null==e)return null;if(we(e))return[mi(e.enter),mi(e.leave)];{const t=mi(e);return[t,t]}}(n),v=f&&f[0],m=f&&f[1],{onBeforeEnter:h,onEnter:g,onEnterCancelled:b,onLeave:y,onLeaveCancelled:w,onBeforeAppear:x=h,onAppear:k=g,onAppearCancelled:$=b}=t,S=(e,t,a)=>{gi(e,t?u:i),gi(e,t?c:o),a&&a()},N=(e,t)=>{e._isLeaving=!1,gi(e,d),gi(e,p),gi(e,_),t&&t()},C=e=>(t,a)=>{const n=e?k:g,o=()=>S(t,e,a);pi(n,[t,o]),bi((()=>{gi(t,e?r:s),hi(t,e?u:i),fi(n)||wi(t,l,v,o)}))};return ue(t,{onBeforeEnter(e){pi(h,[e]),hi(e,s),hi(e,o)},onBeforeAppear(e){pi(x,[e]),hi(e,r),hi(e,c)},onEnter:C(!1),onAppear:C(!0),onLeave(e,t){e._isLeaving=!0;const a=()=>N(e,t);hi(e,d),Si(),hi(e,_),bi((()=>{e._isLeaving&&(gi(e,d),hi(e,p),fi(y)||wi(e,l,m,a))})),pi(y,[e,a])},onEnterCancelled(e){S(e,!1),pi(b,[e])},onAppearCancelled(e){S(e,!0),pi($,[e])},onLeaveCancelled(e){N(e),pi(w,[e])}})}function mi(e){return Re(e)}function hi(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.add(t))),(e._vtc||(e._vtc=new Set)).add(t)}function gi(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.remove(t)));const{_vtc:a}=e;a&&(a.delete(t),a.size||(e._vtc=void 0))}function bi(e){requestAnimationFrame((()=>{requestAnimationFrame(e)}))}let yi=0;function wi(e,t,a,l){const n=e._endId=++yi,s=()=>{n===e._endId&&l()};if(a)return setTimeout(s,a);const{type:o,timeout:i,propCount:r}=xi(e,t);if(!o)return l();const c=o+"end";let u=0;const d=()=>{e.removeEventListener(c,_),s()},_=t=>{t.target===e&&++u>=r&&d()};setTimeout((()=>{u<r&&d()}),i+1),e.addEventListener(c,_)}function xi(e,t){const a=window.getComputedStyle(e),l=e=>(a[e]||"").split(", "),n=l("transitionDelay"),s=l("transitionDuration"),o=ki(n,s),i=l("animationDelay"),r=l("animationDuration"),c=ki(i,r);let u=null,d=0,_=0;return"transition"===t?o>0&&(u="transition",d=o,_=s.length):"animation"===t?c>0&&(u="animation",d=c,_=r.length):(d=Math.max(o,c),u=d>0?o>c?"transition":"animation":null,_=u?"transition"===u?s.length:r.length:0),{type:u,timeout:d,propCount:_,hasTransform:"transition"===u&&/\b(transform|all)(,|$)/.test(a.transitionProperty)}}function ki(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max(...t.map(((t,a)=>$i(t)+$i(e[a]))))}function $i(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function Si(){return document.body.offsetHeight}const Ni=new WeakMap,Ci=new WeakMap,Ai={name:"TransitionGroup",props:ue({},_i,{tag:String,moveClass:String}),setup(e,{slots:t}){const a=so(),l=Dl();let n,s;return fn((()=>{if(!n.length)return;const t=e.moveClass||`${e.name||"v"}-move`;if(!function(e,t,a){const l=e.cloneNode();e._vtc&&e._vtc.forEach((e=>{e.split(/\s+/).forEach((e=>e&&l.classList.remove(e)))})),a.split(/\s+/).forEach((e=>e&&l.classList.add(e))),l.style.display="none";const n=1===t.nodeType?t:t.parentNode;n.appendChild(l);const{hasTransform:s}=xi(l);return n.removeChild(l),s}(n[0].el,a.vnode.el,t))return;n.forEach(Ei),n.forEach(Ti);const l=n.filter(Pi);Si(),l.forEach((e=>{const a=e.el,l=a.style;hi(a,t),l.transform=l.webkitTransform=l.transitionDuration="";const n=a._moveCb=e=>{e&&e.target!==a||e&&!/transform$/.test(e.propertyName)||(a.removeEventListener("transitionend",n),a._moveCb=null,gi(a,t))};a.addEventListener("transitionend",n)}))})),()=>{const o=ra(e),i=vi(o);let r=o.tag||Ss;n=s,s=t.default?Kl(t.default()):[];for(let e=0;e<s.length;e++){const t=s[e];null!=t.key&&Wl(t,Vl(t,i,l,a))}if(n)for(let e=0;e<n.length;e++){const t=n[e];Wl(t,Vl(t,i,l,a)),Ni.set(t,t.el.getBoundingClientRect())}return Hs(r,null,s)}}};function Ei(e){const t=e.el;t._moveCb&&t._moveCb(),t._enterCb&&t._enterCb()}function Ti(e){Ci.set(e,e.el.getBoundingClientRect())}function Pi(e){const t=Ni.get(e),a=Ci.get(e),l=t.left-a.left,n=t.top-a.top;if(l||n){const t=e.el.style;return t.transform=t.webkitTransform=`translate(${l}px,${n}px)`,t.transitionDuration="0s",e}}const Ui=e=>{const t=e.props["onUpdate:modelValue"]||!1;return fe(t)?e=>Le(t,e):t};function Ii(e){e.target.composing=!0}function Oi(e){const t=e.target;t.composing&&(t.composing=!1,t.dispatchEvent(new Event("input")))}const Mi={created(e,{modifiers:{lazy:t,trim:a,number:l}},n){e._assign=Ui(n);const s=l||n.props&&"number"===n.props.type;Qo(e,t?"change":"input",(t=>{if(t.target.composing)return;let l=e.value;a&&(l=l.trim()),s&&(l=Re(l)),e._assign(l)})),a&&Qo(e,"change",(()=>{e.value=e.value.trim()})),t||(Qo(e,"compositionstart",Ii),Qo(e,"compositionend",Oi),Qo(e,"change",Oi))},mounted(e,{value:t}){e.value=null==t?"":t},beforeUpdate(e,{value:t,modifiers:{lazy:a,trim:l,number:n}},s){if(e._assign=Ui(s),e.composing)return;if(document.activeElement===e&&"range"!==e.type){if(a)return;if(l&&e.value.trim()===t)return;if((n||"number"===e.type)&&Re(e.value)===t)return}const o=null==t?"":t;e.value!==o&&(e.value=o)}},ji={deep:!0,created(e,t,a){e._assign=Ui(a),Qo(e,"change",(()=>{const t=e._modelValue,a=zi(e),l=e.checked,n=e._assign;if(fe(t)){const e=ee(t,a),s=-1!==e;if(l&&!s)n(t.concat(a));else if(!l&&s){const a=[...t];a.splice(e,1),n(a)}}else if(me(t)){const e=new Set(t);l?e.add(a):e.delete(a),n(e)}else n(qi(e,l))}))},mounted:Li,beforeUpdate(e,t,a){e._assign=Ui(a),Li(e,t,a)}};function Li(e,{value:t,oldValue:a},l){e._modelValue=t,fe(t)?e.checked=ee(t,l.props.value)>-1:me(t)?e.checked=t.has(l.props.value):t!==a&&(e.checked=Q(t,qi(e,!0)))}const Fi={created(e,{value:t},a){e.checked=Q(t,a.props.value),e._assign=Ui(a),Qo(e,"change",(()=>{e._assign(zi(e))}))},beforeUpdate(e,{value:t,oldValue:a},l){e._assign=Ui(l),t!==a&&(e.checked=Q(t,l.props.value))}},Ri={deep:!0,created(e,{value:t,modifiers:{number:a}},l){const n=me(t);Qo(e,"change",(()=>{const t=Array.prototype.filter.call(e.options,(e=>e.selected)).map((e=>a?Re(zi(e)):zi(e)));e._assign(e.multiple?n?new Set(t):t:t[0])})),e._assign=Ui(l)},mounted(e,{value:t}){Di(e,t)},beforeUpdate(e,t,a){e._assign=Ui(a)},updated(e,{value:t}){Di(e,t)}};function Di(e,t){const a=e.multiple;if(!a||fe(t)||me(t)){for(let l=0,n=e.options.length;l<n;l++){const n=e.options[l],s=zi(n);if(a)n.selected=fe(t)?ee(t,s)>-1:t.has(s);else if(Q(zi(n),t))return void(e.selectedIndex!==l&&(e.selectedIndex=l))}a||-1===e.selectedIndex||(e.selectedIndex=-1)}}function zi(e){return"_value"in e?e._value:e.value}function qi(e,t){const a=t?"_trueValue":"_falseValue";return a in e?e[a]:t}const Bi={created(e,t,a){Vi(e,t,a,null,"created")},mounted(e,t,a){Vi(e,t,a,null,"mounted")},beforeUpdate(e,t,a,l){Vi(e,t,a,l,"beforeUpdate")},updated(e,t,a,l){Vi(e,t,a,l,"updated")}};function Vi(e,t,a,l,n){const s=function(e,t){switch(e){case"SELECT":return Ri;case"TEXTAREA":return Mi;default:switch(t){case"checkbox":return ji;case"radio":return Fi;default:return Mi}}}(e.tagName,a.props&&a.props.type)[n];s&&s(e,t,a,l)}const Hi=["ctrl","shift","alt","meta"],Gi={stop:e=>e.stopPropagation(),prevent:e=>e.preventDefault(),self:e=>e.target!==e.currentTarget,ctrl:e=>!e.ctrlKey,shift:e=>!e.shiftKey,alt:e=>!e.altKey,meta:e=>!e.metaKey,left:e=>"button"in e&&0!==e.button,middle:e=>"button"in e&&1!==e.button,right:e=>"button"in e&&2!==e.button,exact:(e,t)=>Hi.some((a=>e[`${a}Key`]&&!t.includes(a)))},Wi=(e,t)=>(a,...l)=>{for(let e=0;e<t.length;e++){const l=Gi[t[e]];if(l&&l(a,t))return}return e(a,...l)},Ki={esc:"escape",space:" ",up:"arrow-up",left:"arrow-left",right:"arrow-right",down:"arrow-down",delete:"backspace"},Ji=(e,t)=>a=>{if(!("key"in a))return;const l=Ie(a.key);return t.some((e=>e===l||Ki[e]===l))?e(a):void 0},Yi={beforeMount(e,{value:t},{transition:a}){e._vod="none"===e.style.display?"":e.style.display,a&&t?a.beforeEnter(e):Zi(e,t)},mounted(e,{value:t},{transition:a}){a&&t&&a.enter(e)},updated(e,{value:t,oldValue:a},{transition:l}){!t!=!a&&(l?t?(l.beforeEnter(e),Zi(e,!0),l.enter(e)):l.leave(e,(()=>{Zi(e,!1)})):Zi(e,t))},beforeUnmount(e,{value:t}){Zi(e,t)}};function Zi(e,t){e.style.display=t?e._vod:"none"}const Xi=ue({patchProp:(e,t,a,l,n=!1,s,o,i,r)=>{"class"===t?function(e,t,a){const l=e._vtc;l&&(t=(t?[t,...l]:[...l]).join(" ")),null==t?e.removeAttribute("class"):a?e.setAttribute("class",t):e.className=t}(e,l,n):"style"===t?function(e,t,a){const l=e.style,n=be(a);if(a&&!n){for(const e in a)Vo(l,e,a[e]);if(t&&!be(t))for(const e in t)null==a[e]&&Vo(l,e,"")}else{const s=l.display;n?t!==a&&(l.cssText=a):t&&e.removeAttribute("style"),"_vod"in e&&(l.display=s)}}(e,a,l):re(t)?ce(t)||function(e,t,a,l,n=null){const s=e._vei||(e._vei={}),o=s[t];if(l&&o)o.value=l;else{const[a,i]=function(e){let t;if(ei.test(e)){let a;for(t={};a=e.match(ei);)e=e.slice(0,e.length-a[0].length),t[a[0].toLowerCase()]=!0}return[Ie(e.slice(2)),t]}(t);if(l){const o=s[t]=function(e,t){const a=e=>{const l=e.timeStamp||Ko();(Jo||l>=a.attached-1)&&Oa(function(e,t){if(fe(t)){const a=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{a.call(e),e._stopped=!0},t.map((e=>t=>!t._stopped&&e&&e(t)))}return t}(e,a.value),t,5,[e])};return a.value=e,a.attached=Yo||(Zo.then(Xo),Yo=Ko()),a}(l,n);Qo(e,a,o,i)}else o&&(function(e,t,a,l){e.removeEventListener(t,a,l)}(e,a,o,i),s[t]=void 0)}}(e,t,0,l,o):("."===t[0]?(t=t.slice(1),1):"^"===t[0]?(t=t.slice(1),0):function(e,t,a,l){return l?"innerHTML"===t||"textContent"===t||!!(t in e&&ti.test(t)&&ge(a)):"spellcheck"!==t&&"draggable"!==t&&"translate"!==t&&("form"!==t&&(("list"!==t||"INPUT"!==e.tagName)&&(("type"!==t||"TEXTAREA"!==e.tagName)&&((!ti.test(t)||!be(a))&&t in e))))}(e,t,l,n))?function(e,t,a,l,n,s,o){if("innerHTML"===t||"textContent"===t)return l&&o(l,n,s),void(e[t]=null==a?"":a);if("value"===t&&"PROGRESS"!==e.tagName&&!e.tagName.includes("-")){e._value=a;const l=null==a?"":a;return e.value===l&&"OPTION"!==e.tagName||(e.value=l),void(null==a&&e.removeAttribute(t))}let i=!1;if(""===a||null==a){const l=typeof e[t];"boolean"===l?a=B(a):null==a&&"string"===l?(a="",i=!0):"number"===l&&(a=0,i=!0)}try{e[t]=a}catch(e){}i&&e.removeAttribute(t)}(e,t,l,s,o,i,r):("true-value"===t?e._trueValue=l:"false-value"===t&&(e._falseValue=l),function(e,t,a,l,n){if(l&&t.startsWith("xlink:"))null==a?e.removeAttributeNS(Wo,t.slice(6,t.length)):e.setAttributeNS(Wo,t,a);else{const l=q(t);null==a||l&&!B(a)?e.removeAttribute(t):e.setAttribute(t,l?"":a)}}(e,t,l,n))}},qo);let Qi,er=!1;function tr(){return Qi||(Qi=vs(Xi))}function ar(){return Qi=er?Qi:ms(Xi),er=!0,Qi}const lr=(...e)=>{tr().render(...e)},nr=(...e)=>{ar().hydrate(...e)},sr=(...e)=>{const t=tr().createApp(...e),{mount:a}=t;return t.mount=e=>{const l=ir(e);if(!l)return;const n=t._component;ge(n)||n.render||n.template||(n.template=l.innerHTML),l.innerHTML="";const s=a(l,!1,l instanceof SVGElement);return l instanceof Element&&(l.removeAttribute("v-cloak"),l.setAttribute("data-v-app","")),s},t},or=(...e)=>{const t=ar().createApp(...e),{mount:a}=t;return t.mount=e=>{const t=ir(e);if(t)return a(t,!0,t instanceof SVGElement)},t};function ir(e){return be(e)?document.querySelector(e):e}const rr=se;var cr=Object.freeze({__proto__:null,render:lr,hydrate:nr,createApp:sr,createSSRApp:or,initDirectivesForSSR:rr,defineCustomElement:ai,defineSSRCustomElement:li,VueElement:si,useCssModule:oi,useCssVars:ii,Transition:ui,TransitionGroup:Ai,vModelText:Mi,vModelCheckbox:ji,vModelRadio:Fi,vModelSelect:Ri,vModelDynamic:Bi,withModifiers:Wi,withKeys:Ji,vShow:Yi,reactive:Qt,ref:va,readonly:ta,unref:ya,proxyRefs:xa,isRef:fa,toRef:Ca,toRefs:Sa,isProxy:ia,isReactive:na,isReadonly:sa,isShallow:oa,customRef:$a,triggerRef:ba,shallowRef:ma,shallowReactive:ea,shallowReadonly:aa,markRaw:ca,toRaw:ra,effect:nt,stop:st,ReactiveEffect:at,effectScope:Be,EffectScope:qe,getCurrentScope:He,onScopeDispose:Ge,computed:xo,watch:Ml,watchEffect:Pl,watchPostEffect:Ul,watchSyncEffect:Il,onBeforeMount:dn,onMounted:_n,onBeforeUpdate:pn,onUpdated:fn,onBeforeUnmount:vn,onUnmounted:mn,onActivated:an,onDeactivated:ln,onRenderTracked:bn,onRenderTriggered:gn,onErrorCaptured:yn,onServerPrefetch:hn,provide:El,inject:Tl,nextTick:Ja,defineComponent:Jl,defineAsyncComponent:Zl,useAttrs:Ao,useSlots:Co,defineProps:ko,defineEmits:$o,defineExpose:So,withDefaults:No,mergeDefaults:To,createPropsRestProxy:Po,withAsyncContext:Uo,getCurrentInstance:so,h:Io,createVNode:Hs,cloneVNode:Ws,mergeProps:eo,isVNode:Fs,Fragment:Ss,Text:Ns,Comment:Cs,Static:As,Teleport:$s,Suspense:kl,KeepAlive:en,BaseTransition:ql,withDirectives:wn,useSSRContext:Mo,ssrContextKey:Oo,createRenderer:vs,createHydrationRenderer:ms,queuePostFlushCb:Qa,warn:Ta,handleError:Ma,callWithErrorHandling:Ia,callWithAsyncErrorHandling:Oa,resolveComponent:kn,resolveDirective:Nn,resolveDynamicComponent:Sn,registerRuntimeCompiler:fo,isRuntimeOnly:vo,useTransitionState:Dl,resolveTransitionHooks:Vl,setTransitionHooks:Wl,getTransitionRawChildren:Kl,initCustomFormatter:jo,get devtools(){return nl},setDevtoolsHook:ol,withCtx:ml,pushScopeId:pl,popScopeId:fl,withScopeId:vl,renderList:En,toHandlers:In,renderSlot:Pn,createSlots:Tn,withMemo:Lo,isMemoSame:Fo,openBlock:Ps,createBlock:Ls,setBlockTracking:Os,createTextVNode:Ks,createCommentVNode:Ys,createStaticVNode:Js,createElementVNode:Vs,createElementBlock:js,guardReactiveProps:Gs,toDisplayString:te,camelize:Pe,capitalize:Oe,toHandlerKey:Me,normalizeProps:J,normalizeClass:K,normalizeStyle:V,transformVNodeArgs:Ds,version:Ro,ssrUtils:null,resolveFilter:null,compatUtils:null});function ur(e){throw e}function dr(e){}function _r(e,t,a,l){const n=new SyntaxError(String(e));return n.code=e,n.loc=t,n}const pr=Symbol(""),fr=Symbol(""),vr=Symbol(""),mr=Symbol(""),hr=Symbol(""),gr=Symbol(""),br=Symbol(""),yr=Symbol(""),wr=Symbol(""),xr=Symbol(""),kr=Symbol(""),$r=Symbol(""),Sr=Symbol(""),Nr=Symbol(""),Cr=Symbol(""),Ar=Symbol(""),Er=Symbol(""),Tr=Symbol(""),Pr=Symbol(""),Ur=Symbol(""),Ir=Symbol(""),Or=Symbol(""),Mr=Symbol(""),jr=Symbol(""),Lr=Symbol(""),Fr=Symbol(""),Rr=Symbol(""),Dr=Symbol(""),zr=Symbol(""),qr=Symbol(""),Br=Symbol(""),Vr=Symbol(""),Hr=Symbol(""),Gr=Symbol(""),Wr=Symbol(""),Kr=Symbol(""),Jr=Symbol(""),Yr=Symbol(""),Zr=Symbol(""),Xr={[pr]:"Fragment",[fr]:"Teleport",[vr]:"Suspense",[mr]:"KeepAlive",[hr]:"BaseTransition",[gr]:"openBlock",[br]:"createBlock",[yr]:"createElementBlock",[wr]:"createVNode",[xr]:"createElementVNode",[kr]:"createCommentVNode",[$r]:"createTextVNode",[Sr]:"createStaticVNode",[Nr]:"resolveComponent",[Cr]:"resolveDynamicComponent",[Ar]:"resolveDirective",[Er]:"resolveFilter",[Tr]:"withDirectives",[Pr]:"renderList",[Ur]:"renderSlot",[Ir]:"createSlots",[Or]:"toDisplayString",[Mr]:"mergeProps",[jr]:"normalizeClass",[Lr]:"normalizeStyle",[Fr]:"normalizeProps",[Rr]:"guardReactiveProps",[Dr]:"toHandlers",[zr]:"camelize",[qr]:"capitalize",[Br]:"toHandlerKey",[Vr]:"setBlockTracking",[Hr]:"pushScopeId",[Gr]:"popScopeId",[Wr]:"withCtx",[Kr]:"unref",[Jr]:"isRef",[Yr]:"withMemo",[Zr]:"isMemoSame"},Qr={source:"",start:{line:1,column:1,offset:0},end:{line:1,column:1,offset:0}};function ec(e,t,a,l,n,s,o,i=!1,r=!1,c=!1,u=Qr){return e&&(i?(e.helper(gr),e.helper(Ec(e.inSSR,c))):e.helper(Ac(e.inSSR,c)),o&&e.helper(Tr)),{type:13,tag:t,props:a,children:l,patchFlag:n,dynamicProps:s,directives:o,isBlock:i,disableTracking:r,isComponent:c,loc:u}}function tc(e,t=Qr){return{type:17,loc:t,elements:e}}function ac(e,t=Qr){return{type:15,loc:t,properties:e}}function lc(e,t){return{type:16,loc:Qr,key:be(e)?nc(e,!0):e,value:t}}function nc(e,t=!1,a=Qr,l=0){return{type:4,loc:a,content:e,isStatic:t,constType:t?3:l}}function sc(e,t=Qr){return{type:8,loc:t,children:e}}function oc(e,t=[],a=Qr){return{type:14,loc:a,callee:e,arguments:t}}function ic(e,t,a=!1,l=!1,n=Qr){return{type:18,params:e,returns:t,newline:a,isSlot:l,loc:n}}function rc(e,t,a,l=!0){return{type:19,test:e,consequent:t,alternate:a,newline:l,loc:Qr}}const cc=e=>4===e.type&&e.isStatic,uc=(e,t)=>e===t||e===Ie(t);function dc(e){return uc(e,"Teleport")?fr:uc(e,"Suspense")?vr:uc(e,"KeepAlive")?mr:uc(e,"BaseTransition")?hr:void 0}const _c=/^\d|[^\$\w]/,pc=e=>!_c.test(e),fc=/[A-Za-z_$\xA0-\uFFFF]/,vc=/[\.\?\w$\xA0-\uFFFF]/,mc=/\s+[.[]\s*|\s*[.[]\s+/g,hc=e=>{e=e.trim().replace(mc,(e=>e.trim()));let t=0,a=[],l=0,n=0,s=null;for(let o=0;o<e.length;o++){const i=e.charAt(o);switch(t){case 0:if("["===i)a.push(t),t=1,l++;else if("("===i)a.push(t),t=2,n++;else if(!(0===o?fc:vc).test(i))return!1;break;case 1:"'"===i||'"'===i||"`"===i?(a.push(t),t=3,s=i):"["===i?l++:"]"===i&&(--l||(t=a.pop()));break;case 2:if("'"===i||'"'===i||"`"===i)a.push(t),t=3,s=i;else if("("===i)n++;else if(")"===i){if(o===e.length-1)return!1;--n||(t=a.pop())}break;case 3:i===s&&(t=a.pop(),s=null)}}return!l&&!n};function gc(e,t,a){const l={source:e.source.slice(t,t+a),start:bc(e.start,e.source,t),end:e.end};return null!=a&&(l.end=bc(e.start,e.source,t+a)),l}function bc(e,t,a=t.length){return yc(ue({},e),t,a)}function yc(e,t,a=t.length){let l=0,n=-1;for(let e=0;e<a;e++)10===t.charCodeAt(e)&&(l++,n=e);return e.offset+=a,e.line+=l,e.column=-1===n?e.column+a:a-n,e}function wc(e,t,a=!1){for(let l=0;l<e.props.length;l++){const n=e.props[l];if(7===n.type&&(a||n.exp)&&(be(t)?n.name===t:t.test(n.name)))return n}}function xc(e,t,a=!1,l=!1){for(let n=0;n<e.props.length;n++){const s=e.props[n];if(6===s.type){if(a)continue;if(s.name===t&&(s.value||l))return s}else if("bind"===s.name&&(s.exp||l)&&kc(s.arg,t))return s}}function kc(e,t){return!(!e||!cc(e)||e.content!==t)}function $c(e){return 5===e.type||2===e.type}function Sc(e){return 7===e.type&&"slot"===e.name}function Nc(e){return 1===e.type&&3===e.tagType}function Cc(e){return 1===e.type&&2===e.tagType}function Ac(e,t){return e||t?wr:xr}function Ec(e,t){return e||t?br:yr}const Tc=new Set([Fr,Rr]);function Pc(e,t=[]){if(e&&!be(e)&&14===e.type){const a=e.callee;if(!be(a)&&Tc.has(a))return Pc(e.arguments[0],t.concat(e))}return[e,t]}function Uc(e,t,a){let l,n,s=13===e.type?e.props:e.arguments[2],o=[];if(s&&!be(s)&&14===s.type){const e=Pc(s);s=e[0],o=e[1],n=o[o.length-1]}if(null==s||be(s))l=ac([t]);else if(14===s.type){const e=s.arguments[0];be(e)||15!==e.type?s.callee===Dr?l=oc(a.helper(Mr),[ac([t]),s]):s.arguments.unshift(ac([t])):e.properties.unshift(t),!l&&(l=s)}else if(15===s.type){let e=!1;if(4===t.key.type){const a=t.key.content;e=s.properties.some((e=>4===e.key.type&&e.key.content===a))}e||s.properties.unshift(t),l=s}else l=oc(a.helper(Mr),[ac([t]),s]),n&&n.callee===Rr&&(n=o[o.length-2]);13===e.type?n?n.arguments[0]=l:e.props=l:n?n.arguments[0]=l:e.arguments[2]=l}function Ic(e,t){return`_${t}_${e.replace(/[^\w]/g,((t,a)=>"-"===t?"_":e.charCodeAt(a).toString()))}`}function Oc(e,{helper:t,removeHelper:a,inSSR:l}){e.isBlock||(e.isBlock=!0,a(Ac(l,e.isComponent)),t(gr),t(Ec(l,e.isComponent)))}const Mc=/&(gt|lt|amp|apos|quot);/g,jc={gt:">",lt:"<",amp:"&",apos:"'",quot:'"'},Lc={delimiters:["{{","}}"],getNamespace:()=>0,getTextMode:()=>0,isVoidTag:oe,isPreTag:oe,isCustomElement:oe,decodeEntities:e=>e.replace(Mc,((e,t)=>jc[t])),onError:ur,onWarn:dr,comments:!1};function Fc(e,t,a){const l=Qc(a),n=l?l.ns:0,s=[];for(;!nu(e,t,a);){const o=e.source;let i;if(0===t||1===t)if(!e.inVPre&&eu(o,e.options.delimiters[0]))i=Kc(e,t);else if(0===t&&"<"===o[0])if(1===o.length);else if("!"===o[1])i=eu(o,"\x3c!--")?zc(e):eu(o,"<!DOCTYPE")?qc(e):eu(o,"<![CDATA[")&&0!==n?Dc(e,a):qc(e);else if("/"===o[1])if(2===o.length);else{if(">"===o[2]){tu(e,3);continue}if(/[a-z]/i.test(o[2])){Hc(e,1,l);continue}i=qc(e)}else/[a-z]/i.test(o[1])?i=Bc(e,a):"?"===o[1]&&(i=qc(e));if(i||(i=Jc(e,t)),fe(i))for(let e=0;e<i.length;e++)Rc(s,i[e]);else Rc(s,i)}let o=!1;if(2!==t&&1!==t){const t="preserve"!==e.options.whitespace;for(let a=0;a<s.length;a++){const l=s[a];if(e.inPre||2!==l.type)3!==l.type||e.options.comments||(o=!0,s[a]=null);else if(/[^\t\r\n\f ]/.test(l.content))t&&(l.content=l.content.replace(/[\t\r\n\f ]+/g," "));else{const e=s[a-1],n=s[a+1];!e||!n||t&&(3===e.type||3===n.type||1===e.type&&1===n.type&&/[\r\n]/.test(l.content))?(o=!0,s[a]=null):l.content=" "}}if(e.inPre&&l&&e.options.isPreTag(l.tag)){const e=s[0];e&&2===e.type&&(e.content=e.content.replace(/^\r?\n/,""))}}return o?s.filter(Boolean):s}function Rc(e,t){if(2===t.type){const a=Qc(e);if(a&&2===a.type&&a.loc.end.offset===t.loc.start.offset)return a.content+=t.content,a.loc.end=t.loc.end,void(a.loc.source+=t.loc.source)}e.push(t)}function Dc(e,t){tu(e,9);const a=Fc(e,3,t);return 0===e.source.length||tu(e,3),a}function zc(e){const t=Zc(e);let a;const l=/--(\!)?>/.exec(e.source);if(l){a=e.source.slice(4,l.index);const t=e.source.slice(0,l.index);let n=1,s=0;for(;-1!==(s=t.indexOf("\x3c!--",n));)tu(e,s-n+1),n=s+1;tu(e,l.index+l[0].length-n+1)}else a=e.source.slice(4),tu(e,e.source.length);return{type:3,content:a,loc:Xc(e,t)}}function qc(e){const t=Zc(e),a="?"===e.source[1]?1:2;let l;const n=e.source.indexOf(">");return-1===n?(l=e.source.slice(a),tu(e,e.source.length)):(l=e.source.slice(a,n),tu(e,n+1)),{type:3,content:l,loc:Xc(e,t)}}function Bc(e,t){const a=e.inPre,l=e.inVPre,n=Qc(t),s=Hc(e,0,n),o=e.inPre&&!a,i=e.inVPre&&!l;if(s.isSelfClosing||e.options.isVoidTag(s.tag))return o&&(e.inPre=!1),i&&(e.inVPre=!1),s;t.push(s);const r=e.options.getTextMode(s,n),c=Fc(e,r,t);if(t.pop(),s.children=c,su(e.source,s.tag))Hc(e,1,n);else if(0===e.source.length&&"script"===s.tag.toLowerCase()){const e=c[0];e&&eu(e.loc.source,"\x3c!--")}return s.loc=Xc(e,s.loc.start),o&&(e.inPre=!1),i&&(e.inVPre=!1),s}const Vc=D("if,else,else-if,for,slot");function Hc(e,t,a){const l=Zc(e),n=/^<\/?([a-z][^\t\r\n\f />]*)/i.exec(e.source),s=n[1],o=e.options.getNamespace(s,a);tu(e,n[0].length),au(e);const i=Zc(e),r=e.source;e.options.isPreTag(s)&&(e.inPre=!0);let c=Gc(e,t);0===t&&!e.inVPre&&c.some((e=>7===e.type&&"pre"===e.name))&&(e.inVPre=!0,ue(e,i),e.source=r,c=Gc(e,t).filter((e=>"v-pre"!==e.name)));let u=!1;if(0===e.source.length||(u=eu(e.source,"/>"),tu(e,u?2:1)),1===t)return;let d=0;return e.inVPre||("slot"===s?d=2:"template"===s?c.some((e=>7===e.type&&Vc(e.name)))&&(d=3):function(e,t,a){const l=a.options;if(l.isCustomElement(e))return!1;if("component"===e||/^[A-Z]/.test(e)||dc(e)||l.isBuiltInComponent&&l.isBuiltInComponent(e)||l.isNativeTag&&!l.isNativeTag(e))return!0;for(let e=0;e<t.length;e++){const a=t[e];if(6===a.type){if("is"===a.name&&a.value&&a.value.content.startsWith("vue:"))return!0}else{if("is"===a.name)return!0;"bind"===a.name&&kc(a.arg,"is")}}}(s,c,e)&&(d=1)),{type:1,ns:o,tag:s,tagType:d,props:c,isSelfClosing:u,children:[],loc:Xc(e,l),codegenNode:void 0}}function Gc(e,t){const a=[],l=new Set;for(;e.source.length>0&&!eu(e.source,">")&&!eu(e.source,"/>");){if(eu(e.source,"/")){tu(e,1),au(e);continue}const n=Wc(e,l);6===n.type&&n.value&&"class"===n.name&&(n.value.content=n.value.content.replace(/\s+/g," ").trim()),0===t&&a.push(n),/^[^\t\r\n\f />]/.test(e.source),au(e)}return a}function Wc(e,t){const a=Zc(e),l=/^[^\t\r\n\f />][^\t\r\n\f />=]*/.exec(e.source)[0];t.has(l),t.add(l);{const e=/["'<]/g;for(;e.exec(l););}let n;tu(e,l.length),/^[\t\r\n\f ]*=/.test(e.source)&&(au(e),tu(e,1),au(e),n=function(e){const t=Zc(e);let a;const l=e.source[0],n='"'===l||"'"===l;if(n){tu(e,1);const t=e.source.indexOf(l);-1===t?a=Yc(e,e.source.length,4):(a=Yc(e,t,4),tu(e,1))}else{const t=/^[^\t\r\n\f >]+/.exec(e.source);if(!t)return;const l=/["'<=`]/g;for(;l.exec(t[0]););a=Yc(e,t[0].length,4)}return{content:a,isQuoted:n,loc:Xc(e,t)}}(e));const s=Xc(e,a);if(!e.inVPre&&/^(v-[A-Za-z0-9-]|:|\.|@|#)/.test(l)){const t=/(?:^v-([a-z0-9-]+))?(?:(?::|^\.|^@|^#)(\[[^\]]+\]|[^\.]+))?(.+)?$/i.exec(l);let o,i=eu(l,"."),r=t[1]||(i||eu(l,":")?"bind":eu(l,"@")?"on":"slot");if(t[2]){const n="slot"===r,s=l.lastIndexOf(t[2]),i=Xc(e,lu(e,a,s),lu(e,a,s+t[2].length+(n&&t[3]||"").length));let c=t[2],u=!0;c.startsWith("[")?(u=!1,c=c.endsWith("]")?c.slice(1,c.length-1):c.slice(1)):n&&(c+=t[3]||""),o={type:4,content:c,isStatic:u,constType:u?3:0,loc:i}}if(n&&n.isQuoted){const e=n.loc;e.start.offset++,e.start.column++,e.end=bc(e.start,n.content),e.source=e.source.slice(1,-1)}const c=t[3]?t[3].slice(1).split("."):[];return i&&c.push("prop"),{type:7,name:r,exp:n&&{type:4,content:n.content,isStatic:!1,constType:0,loc:n.loc},arg:o,modifiers:c,loc:s}}return!e.inVPre&&eu(l,"v-"),{type:6,name:l,value:n&&{type:2,content:n.content,loc:n.loc},loc:s}}function Kc(e,t){const[a,l]=e.options.delimiters,n=e.source.indexOf(l,a.length);if(-1===n)return;const s=Zc(e);tu(e,a.length);const o=Zc(e),i=Zc(e),r=n-a.length,c=e.source.slice(0,r),u=Yc(e,r,t),d=u.trim(),_=u.indexOf(d);return _>0&&yc(o,c,_),yc(i,c,r-(u.length-d.length-_)),tu(e,l.length),{type:5,content:{type:4,isStatic:!1,constType:0,content:d,loc:Xc(e,o,i)},loc:Xc(e,s)}}function Jc(e,t){const a=3===t?["]]>"]:["<",e.options.delimiters[0]];let l=e.source.length;for(let t=0;t<a.length;t++){const n=e.source.indexOf(a[t],1);-1!==n&&l>n&&(l=n)}const n=Zc(e);return{type:2,content:Yc(e,l,t),loc:Xc(e,n)}}function Yc(e,t,a){const l=e.source.slice(0,t);return tu(e,t),2!==a&&3!==a&&l.includes("&")?e.options.decodeEntities(l,4===a):l}function Zc(e){const{column:t,line:a,offset:l}=e;return{column:t,line:a,offset:l}}function Xc(e,t,a){return{start:t,end:a=a||Zc(e),source:e.originalSource.slice(t.offset,a.offset)}}function Qc(e){return e[e.length-1]}function eu(e,t){return e.startsWith(t)}function tu(e,t){const{source:a}=e;yc(e,a,t),e.source=a.slice(t)}function au(e){const t=/^[\t\r\n\f ]+/.exec(e.source);t&&tu(e,t[0].length)}function lu(e,t,a){return bc(t,e.originalSource.slice(t.offset,a),a)}function nu(e,t,a){const l=e.source;switch(t){case 0:if(eu(l,"</"))for(let e=a.length-1;e>=0;--e)if(su(l,a[e].tag))return!0;break;case 1:case 2:{const e=Qc(a);if(e&&su(l,e.tag))return!0;break}case 3:if(eu(l,"]]>"))return!0}return!l}function su(e,t){return eu(e,"</")&&e.slice(2,2+t.length).toLowerCase()===t.toLowerCase()&&/[\t\r\n\f />]/.test(e[2+t.length]||">")}function ou(e,t){ru(e,t,iu(e,e.children[0]))}function iu(e,t){const{children:a}=e;return 1===a.length&&1===t.type&&!Cc(t)}function ru(e,t,a=!1){const{children:l}=e,n=l.length;let s=0;for(let e=0;e<l.length;e++){const n=l[e];if(1===n.type&&0===n.tagType){const e=a?0:cu(n,t);if(e>0){if(e>=2){n.codegenNode.patchFlag="-1",n.codegenNode=t.hoist(n.codegenNode),s++;continue}}else{const e=n.codegenNode;if(13===e.type){const a=fu(e);if((!a||512===a||1===a)&&_u(n,t)>=2){const a=pu(n);a&&(e.props=t.hoist(a))}e.dynamicProps&&(e.dynamicProps=t.hoist(e.dynamicProps))}}}else 12===n.type&&cu(n.content,t)>=2&&(n.codegenNode=t.hoist(n.codegenNode),s++);if(1===n.type){const e=1===n.tagType;e&&t.scopes.vSlot++,ru(n,t),e&&t.scopes.vSlot--}else if(11===n.type)ru(n,t,1===n.children.length);else if(9===n.type)for(let e=0;e<n.branches.length;e++)ru(n.branches[e],t,1===n.branches[e].children.length)}s&&t.transformHoist&&t.transformHoist(l,t,e),s&&s===n&&1===e.type&&0===e.tagType&&e.codegenNode&&13===e.codegenNode.type&&fe(e.codegenNode.children)&&(e.codegenNode.children=t.hoist(tc(e.codegenNode.children)))}function cu(e,t){const{constantCache:a}=t;switch(e.type){case 1:if(0!==e.tagType)return 0;const l=a.get(e);if(void 0!==l)return l;const n=e.codegenNode;if(13!==n.type)return 0;if(n.isBlock&&"svg"!==e.tag&&"foreignObject"!==e.tag)return 0;if(fu(n))return a.set(e,0),0;{let l=3;const s=_u(e,t);if(0===s)return a.set(e,0),0;s<l&&(l=s);for(let n=0;n<e.children.length;n++){const s=cu(e.children[n],t);if(0===s)return a.set(e,0),0;s<l&&(l=s)}if(l>1)for(let n=0;n<e.props.length;n++){const s=e.props[n];if(7===s.type&&"bind"===s.name&&s.exp){const n=cu(s.exp,t);if(0===n)return a.set(e,0),0;n<l&&(l=n)}}if(n.isBlock){for(let t=0;t<e.props.length;t++)if(7===e.props[t].type)return a.set(e,0),0;t.removeHelper(gr),t.removeHelper(Ec(t.inSSR,n.isComponent)),n.isBlock=!1,t.helper(Ac(t.inSSR,n.isComponent))}return a.set(e,l),l}case 2:case 3:return 3;case 9:case 11:case 10:default:return 0;case 5:case 12:return cu(e.content,t);case 4:return e.constType;case 8:let s=3;for(let a=0;a<e.children.length;a++){const l=e.children[a];if(be(l)||ye(l))continue;const n=cu(l,t);if(0===n)return 0;n<s&&(s=n)}return s}}const uu=new Set([jr,Lr,Fr,Rr]);function du(e,t){if(14===e.type&&!be(e.callee)&&uu.has(e.callee)){const a=e.arguments[0];if(4===a.type)return cu(a,t);if(14===a.type)return du(a,t)}return 0}function _u(e,t){let a=3;const l=pu(e);if(l&&15===l.type){const{properties:e}=l;for(let l=0;l<e.length;l++){const{key:n,value:s}=e[l],o=cu(n,t);if(0===o)return o;let i;if(o<a&&(a=o),i=4===s.type?cu(s,t):14===s.type?du(s,t):0,0===i)return i;i<a&&(a=i)}}return a}function pu(e){const t=e.codegenNode;if(13===t.type)return t.props}function fu(e){const t=e.patchFlag;return t?parseInt(t,10):void 0}function vu(e,t){const a=function(e,{filename:t="",prefixIdentifiers:a=!1,hoistStatic:l=!1,cacheHandlers:n=!1,nodeTransforms:s=[],directiveTransforms:o={},transformHoist:i=null,isBuiltInComponent:r=se,isCustomElement:c=se,expressionPlugins:u=[],scopeId:d=null,slotted:_=!0,ssr:p=!1,inSSR:f=!1,ssrCssVars:v="",bindingMetadata:m=le,inline:h=!1,isTS:g=!1,onError:b=ur,onWarn:y=dr,compatConfig:w}){const x=t.replace(/\?.*$/,"").match(/([^/\\]+)\.\w+$/),k={selfName:x&&Oe(Pe(x[1])),prefixIdentifiers:a,hoistStatic:l,cacheHandlers:n,nodeTransforms:s,directiveTransforms:o,transformHoist:i,isBuiltInComponent:r,isCustomElement:c,expressionPlugins:u,scopeId:d,slotted:_,ssr:p,inSSR:f,ssrCssVars:v,bindingMetadata:m,inline:h,isTS:g,onError:b,onWarn:y,compatConfig:w,root:e,helpers:new Map,components:new Set,directives:new Set,hoists:[],imports:[],constantCache:new Map,temps:0,cached:0,identifiers:Object.create(null),scopes:{vFor:0,vSlot:0,vPre:0,vOnce:0},parent:null,currentNode:e,childIndex:0,inVOnce:!1,helper(e){const t=k.helpers.get(e)||0;return k.helpers.set(e,t+1),e},removeHelper(e){const t=k.helpers.get(e);if(t){const a=t-1;a?k.helpers.set(e,a):k.helpers.delete(e)}},helperString:e=>`_${Xr[k.helper(e)]}`,replaceNode(e){k.parent.children[k.childIndex]=k.currentNode=e},removeNode(e){const t=e?k.parent.children.indexOf(e):k.currentNode?k.childIndex:-1;e&&e!==k.currentNode?k.childIndex>t&&(k.childIndex--,k.onNodeRemoved()):(k.currentNode=null,k.onNodeRemoved()),k.parent.children.splice(t,1)},onNodeRemoved:()=>{},addIdentifiers(e){},removeIdentifiers(e){},hoist(e){be(e)&&(e=nc(e)),k.hoists.push(e);const t=nc(`_hoisted_${k.hoists.length}`,!1,e.loc,2);return t.hoisted=e,t},cache:(e,t=!1)=>function(e,t,a=!1){return{type:20,index:e,value:t,isVNode:a,loc:Qr}}(k.cached++,e,t)};return k}(e,t);mu(e,a),t.hoistStatic&&ou(e,a),t.ssr||function(e,t){const{helper:a}=t,{children:l}=e;if(1===l.length){const a=l[0];if(iu(e,a)&&a.codegenNode){const l=a.codegenNode;13===l.type&&Oc(l,t),e.codegenNode=l}else e.codegenNode=a}else if(l.length>1){let l=64;e.codegenNode=ec(t,a(pr),void 0,e.children,l+"",void 0,void 0,!0,void 0,!1)}}(e,a),e.helpers=[...a.helpers.keys()],e.components=[...a.components],e.directives=[...a.directives],e.imports=a.imports,e.hoists=a.hoists,e.temps=a.temps,e.cached=a.cached}function mu(e,t){t.currentNode=e;const{nodeTransforms:a}=t,l=[];for(let n=0;n<a.length;n++){const s=a[n](e,t);if(s&&(fe(s)?l.push(...s):l.push(s)),!t.currentNode)return;e=t.currentNode}switch(e.type){case 3:t.ssr||t.helper(kr);break;case 5:t.ssr||t.helper(Or);break;case 9:for(let a=0;a<e.branches.length;a++)mu(e.branches[a],t);break;case 10:case 11:case 1:case 0:!function(e,t){let a=0;const l=()=>{a--};for(;a<e.children.length;a++){const n=e.children[a];be(n)||(t.parent=e,t.childIndex=a,t.onNodeRemoved=l,mu(n,t))}}(e,t)}t.currentNode=e;let n=l.length;for(;n--;)l[n]()}function hu(e,t){const a=be(e)?t=>t===e:t=>e.test(t);return(e,l)=>{if(1===e.type){const{props:n}=e;if(3===e.tagType&&n.some(Sc))return;const s=[];for(let o=0;o<n.length;o++){const i=n[o];if(7===i.type&&a(i.name)){n.splice(o,1),o--;const a=t(e,i,l);a&&s.push(a)}}return s}}}const gu=e=>`${Xr[e]}: _${Xr[e]}`;function bu(e,t,{helper:a,push:l,newline:n,isTS:s}){const o=a("component"===t?Nr:Ar);for(let a=0;a<e.length;a++){let i=e[a];const r=i.endsWith("__self");r&&(i=i.slice(0,-6)),l(`const ${Ic(i,t)} = ${o}(${JSON.stringify(i)}${r?", true":""})${s?"!":""}`),a<e.length-1&&n()}}function yu(e,t){const a=e.length>3||!1;t.push("["),a&&t.indent(),wu(e,t,a),a&&t.deindent(),t.push("]")}function wu(e,t,a=!1,l=!0){const{push:n,newline:s}=t;for(let o=0;o<e.length;o++){const i=e[o];be(i)?n(i):fe(i)?yu(i,t):xu(i,t),o<e.length-1&&(a?(l&&n(","),s()):l&&n(", "))}}function xu(e,t){if(be(e))t.push(e);else if(ye(e))t.push(t.helper(e));else switch(e.type){case 1:case 9:case 11:case 12:xu(e.codegenNode,t);break;case 2:!function(e,t){t.push(JSON.stringify(e.content),e)}(e,t);break;case 4:ku(e,t);break;case 5:!function(e,t){const{push:a,helper:l,pure:n}=t;n&&a("/*#__PURE__*/"),a(`${l(Or)}(`),xu(e.content,t),a(")")}(e,t);break;case 8:$u(e,t);break;case 3:!function(e,t){const{push:a,helper:l,pure:n}=t;n&&a("/*#__PURE__*/"),a(`${l(kr)}(${JSON.stringify(e.content)})`,e)}(e,t);break;case 13:!function(e,t){const{push:a,helper:l,pure:n}=t,{tag:s,props:o,children:i,patchFlag:r,dynamicProps:c,directives:u,isBlock:d,disableTracking:_,isComponent:p}=e;u&&a(l(Tr)+"("),d&&a(`(${l(gr)}(${_?"true":""}), `),n&&a("/*#__PURE__*/");a(l(d?Ec(t.inSSR,p):Ac(t.inSSR,p))+"(",e),wu(function(e){let t=e.length;for(;t--&&null==e[t];);return e.slice(0,t+1).map((e=>e||"null"))}([s,o,i,r,c]),t),a(")"),d&&a(")"),u&&(a(", "),xu(u,t),a(")"))}(e,t);break;case 14:!function(e,t){const{push:a,helper:l,pure:n}=t,s=be(e.callee)?e.callee:l(e.callee);n&&a("/*#__PURE__*/"),a(s+"(",e),wu(e.arguments,t),a(")")}(e,t);break;case 15:!function(e,t){const{push:a,indent:l,deindent:n,newline:s}=t,{properties:o}=e;if(!o.length)return void a("{}",e);const i=o.length>1||!1;a(i?"{":"{ "),i&&l();for(let e=0;e<o.length;e++){const{key:l,value:n}=o[e];Su(l,t),a(": "),xu(n,t),e<o.length-1&&(a(","),s())}i&&n(),a(i?"}":" }")}(e,t);break;case 17:!function(e,t){yu(e.elements,t)}(e,t);break;case 18:!function(e,t){const{push:a,indent:l,deindent:n}=t,{params:s,returns:o,body:i,newline:r,isSlot:c}=e;c&&a(`_${Xr[Wr]}(`),a("(",e),fe(s)?wu(s,t):s&&xu(s,t),a(") => "),(r||i)&&(a("{"),l()),o?(r&&a("return "),fe(o)?yu(o,t):xu(o,t)):i&&xu(i,t),(r||i)&&(n(),a("}")),c&&a(")")}(e,t);break;case 19:!function(e,t){const{test:a,consequent:l,alternate:n,newline:s}=e,{push:o,indent:i,deindent:r,newline:c}=t;if(4===a.type){const e=!pc(a.content);e&&o("("),ku(a,t),e&&o(")")}else o("("),xu(a,t),o(")");s&&i(),t.indentLevel++,s||o(" "),o("? "),xu(l,t),t.indentLevel--,s&&c(),s||o(" "),o(": ");const u=19===n.type;u||t.indentLevel++,xu(n,t),u||t.indentLevel--,s&&r(!0)}(e,t);break;case 20:!function(e,t){const{push:a,helper:l,indent:n,deindent:s,newline:o}=t;a(`_cache[${e.index}] || (`),e.isVNode&&(n(),a(`${l(Vr)}(-1),`),o()),a(`_cache[${e.index}] = `),xu(e.value,t),e.isVNode&&(a(","),o(),a(`${l(Vr)}(1),`),o(),a(`_cache[${e.index}]`),s()),a(")")}(e,t);break;case 21:wu(e.body,t,!0,!1)}}function ku(e,t){const{content:a,isStatic:l}=e;t.push(l?JSON.stringify(a):a,e)}function $u(e,t){for(let a=0;a<e.children.length;a++){const l=e.children[a];be(l)?t.push(l):xu(l,t)}}function Su(e,t){const{push:a}=t;8===e.type?(a("["),$u(e,t),a("]")):e.isStatic?a(pc(e.content)?e.content:JSON.stringify(e.content),e):a(`[${e.content}]`,e)}const Nu=hu(/^(if|else|else-if)$/,((e,t,a)=>function(e,t,a,l){if("else"===t.name||t.exp&&t.exp.content.trim()||(t.exp=nc("true",!1,t.exp?t.exp.loc:e.loc)),"if"===t.name){const n=Cu(e,t),s={type:9,loc:e.loc,branches:[n]};if(a.replaceNode(s),l)return l(s,n,!0)}else{const n=a.parent.children;let s=n.indexOf(e);for(;s-- >=-1;){const o=n[s];if(!o||2!==o.type||o.content.trim().length){if(o&&9===o.type){a.removeNode();const n=Cu(e,t);o.branches.push(n);const s=l&&l(o,n,!1);mu(n,a),s&&s(),a.currentNode=null}break}a.removeNode(o)}}}(e,t,a,((e,t,l)=>{const n=a.parent.children;let s=n.indexOf(e),o=0;for(;s-- >=0;){const e=n[s];e&&9===e.type&&(o+=e.branches.length)}return()=>{if(l)e.codegenNode=Au(t,o,a);else{const l=function(e){for(;;)if(19===e.type){if(19!==e.alternate.type)return e;e=e.alternate}else 20===e.type&&(e=e.value)}(e.codegenNode);l.alternate=Au(t,o+e.branches.length-1,a)}}}))));function Cu(e,t){const a=3===e.tagType;return{type:10,loc:e.loc,condition:"else"===t.name?void 0:t.exp,children:a&&!wc(e,"for")?e.children:[e],userKey:xc(e,"key"),isTemplateIf:a}}function Au(e,t,a){return e.condition?rc(e.condition,Eu(e,t,a),oc(a.helper(kr),['""',"true"])):Eu(e,t,a)}function Eu(e,t,a){const{helper:l}=a,n=lc("key",nc(`${t}`,!1,Qr,2)),{children:s}=e,o=s[0];if(1!==s.length||1!==o.type){if(1===s.length&&11===o.type){const e=o.codegenNode;return Uc(e,n,a),e}{let t=64;return ec(a,l(pr),ac([n]),s,t+"",void 0,void 0,!0,!1,!1,e.loc)}}{const e=o.codegenNode,t=14===(i=e).type&&i.callee===Yr?i.arguments[1].returns:i;return 13===t.type&&Oc(t,a),Uc(t,n,a),e}var i}const Tu=hu("for",((e,t,a)=>{const{helper:l,removeHelper:n}=a;return function(e,t,a,l){if(!t.exp)return;const n=Ou(t.exp);if(!n)return;const{scopes:s}=a,{source:o,value:i,key:r,index:c}=n,u={type:11,loc:t.loc,source:o,valueAlias:i,keyAlias:r,objectIndexAlias:c,parseResult:n,children:Nc(e)?e.children:[e]};a.replaceNode(u),s.vFor++;const d=l&&l(u);return()=>{s.vFor--,d&&d()}}(e,t,a,(t=>{const s=oc(l(Pr),[t.source]),o=Nc(e),i=wc(e,"memo"),r=xc(e,"key"),c=r&&(6===r.type?nc(r.value.content,!0):r.exp),u=r?lc("key",c):null,d=4===t.source.type&&t.source.constType>0,_=d?64:r?128:256;return t.codegenNode=ec(a,l(pr),void 0,s,_+"",void 0,void 0,!0,!d,!1,e.loc),()=>{let r;const{children:_}=t,p=1!==_.length||1!==_[0].type,f=Cc(e)?e:o&&1===e.children.length&&Cc(e.children[0])?e.children[0]:null;if(f?(r=f.codegenNode,o&&u&&Uc(r,u,a)):p?r=ec(a,l(pr),u?ac([u]):void 0,e.children,"64",void 0,void 0,!0,void 0,!1):(r=_[0].codegenNode,o&&u&&Uc(r,u,a),r.isBlock!==!d&&(r.isBlock?(n(gr),n(Ec(a.inSSR,r.isComponent))):n(Ac(a.inSSR,r.isComponent))),r.isBlock=!d,r.isBlock?(l(gr),l(Ec(a.inSSR,r.isComponent))):l(Ac(a.inSSR,r.isComponent))),i){const e=ic(ju(t.parseResult,[nc("_cached")]));e.body={type:21,body:[sc(["const _memo = (",i.exp,")"]),sc(["if (_cached",...c?[" && _cached.key === ",c]:[],` && ${a.helperString(Zr)}(_cached, _memo)) return _cached`]),sc(["const _item = ",r]),nc("_item.memo = _memo"),nc("return _item")],loc:Qr},s.arguments.push(e,nc("_cache"),nc(String(a.cached++)))}else s.arguments.push(ic(ju(t.parseResult),r,!0))}}))})),Pu=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,Uu=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,Iu=/^\(|\)$/g;function Ou(e,t){const a=e.loc,l=e.content,n=l.match(Pu);if(!n)return;const[,s,o]=n,i={source:Mu(a,o.trim(),l.indexOf(o,s.length)),value:void 0,key:void 0,index:void 0};let r=s.trim().replace(Iu,"").trim();const c=s.indexOf(r),u=r.match(Uu);if(u){r=r.replace(Uu,"").trim();const e=u[1].trim();let t;if(e&&(t=l.indexOf(e,c+r.length),i.key=Mu(a,e,t)),u[2]){const n=u[2].trim();n&&(i.index=Mu(a,n,l.indexOf(n,i.key?t+e.length:c+r.length)))}}return r&&(i.value=Mu(a,r,c)),i}function Mu(e,t,a){return nc(t,!1,gc(e,a,t.length))}function ju({value:e,key:t,index:a},l=[]){return function(e){let t=e.length;for(;t--&&!e[t];);return e.slice(0,t+1).map(((e,t)=>e||nc("_".repeat(t+1),!1)))}([e,t,a,...l])}const Lu=nc("undefined",!1),Fu=(e,t)=>{if(1===e.type&&(1===e.tagType||3===e.tagType)){if(wc(e,"slot"))return t.scopes.vSlot++,()=>{t.scopes.vSlot--}}},Ru=(e,t,a)=>ic(e,t,!1,!0,t.length?t[0].loc:a);function Du(e,t,a=Ru){t.helper(Wr);const{children:l,loc:n}=e,s=[],o=[];let i=t.scopes.vSlot>0||t.scopes.vFor>0;const r=wc(e,"slot",!0);if(r){const{arg:e,exp:t}=r;e&&!cc(e)&&(i=!0),s.push(lc(e||nc("default",!0),a(t,l,n)))}let c=!1,u=!1;const d=[],_=new Set;for(let e=0;e<l.length;e++){const n=l[e];let p;if(!Nc(n)||!(p=wc(n,"slot",!0))){3!==n.type&&d.push(n);continue}if(r)break;c=!0;const{children:f,loc:v}=n,{arg:m=nc("default",!0),exp:h}=p;let g;cc(m)?g=m?m.content:"default":i=!0;const b=a(h,f,v);let y,w,x;if(y=wc(n,"if"))i=!0,o.push(rc(y.exp,zu(m,b),Lu));else if(w=wc(n,/^else(-if)?$/,!0)){let t,a=e;for(;a--&&(t=l[a],3===t.type););if(t&&Nc(t)&&wc(t,"if")){l.splice(e,1),e--;let t=o[o.length-1];for(;19===t.alternate.type;)t=t.alternate;t.alternate=w.exp?rc(w.exp,zu(m,b),Lu):zu(m,b)}}else if(x=wc(n,"for")){i=!0;const e=x.parseResult||Ou(x.exp);e&&o.push(oc(t.helper(Pr),[e.source,ic(ju(e),zu(m,b),!0)]))}else{if(g){if(_.has(g))continue;_.add(g),"default"===g&&(u=!0)}s.push(lc(m,b))}}if(!r){const e=(e,t)=>lc("default",a(e,t,n));c?d.length&&d.some((e=>Bu(e)))&&(u||s.push(e(void 0,d))):s.push(e(void 0,l))}const p=i?2:qu(e.children)?3:1;let f=ac(s.concat(lc("_",nc(p+"",!1))),n);return o.length&&(f=oc(t.helper(Ir),[f,tc(o)])),{slots:f,hasDynamicSlots:i}}function zu(e,t){return ac([lc("name",e),lc("fn",t)])}function qu(e){for(let t=0;t<e.length;t++){const a=e[t];switch(a.type){case 1:if(2===a.tagType||qu(a.children))return!0;break;case 9:if(qu(a.branches))return!0;break;case 10:case 11:if(qu(a.children))return!0}}return!1}function Bu(e){return 2!==e.type&&12!==e.type||(2===e.type?!!e.content.trim():Bu(e.content))}const Vu=new WeakMap,Hu=(e,t)=>function(){if(1!==(e=t.currentNode).type||0!==e.tagType&&1!==e.tagType)return;const{tag:a,props:l}=e,n=1===e.tagType;let s=n?function(e,t,a=!1){let{tag:l}=e;const n=Ju(l),s=xc(e,"is");if(s)if(n){const e=6===s.type?s.value&&nc(s.value.content,!0):s.exp;if(e)return oc(t.helper(Cr),[e])}else 6===s.type&&s.value.content.startsWith("vue:")&&(l=s.value.content.slice(4));const o=!n&&wc(e,"is");if(o&&o.exp)return oc(t.helper(Cr),[o.exp]);const i=dc(l)||t.isBuiltInComponent(l);return i?(a||t.helper(i),i):(t.helper(Nr),t.components.add(l),Ic(l,"component"))}(e,t):`"${a}"`;const o=we(s)&&s.callee===Cr;let i,r,c,u,d,_,p=0,f=o||s===fr||s===vr||!n&&("svg"===a||"foreignObject"===a);if(l.length>0){const a=Gu(e,t,void 0,n,o);i=a.props,p=a.patchFlag,d=a.dynamicPropNames;const l=a.directives;_=l&&l.length?tc(l.map((e=>function(e,t){const a=[],l=Vu.get(e);l?a.push(t.helperString(l)):(t.helper(Ar),t.directives.add(e.name),a.push(Ic(e.name,"directive")));const{loc:n}=e;if(e.exp&&a.push(e.exp),e.arg&&(e.exp||a.push("void 0"),a.push(e.arg)),Object.keys(e.modifiers).length){e.arg||(e.exp||a.push("void 0"),a.push("void 0"));const t=nc("true",!1,n);a.push(ac(e.modifiers.map((e=>lc(e,t))),n))}return tc(a,e.loc)}(e,t)))):void 0,a.shouldUseBlock&&(f=!0)}if(e.children.length>0)if(s===mr&&(f=!0,p|=1024),n&&s!==fr&&s!==mr){const{slots:a,hasDynamicSlots:l}=Du(e,t);r=a,l&&(p|=1024)}else if(1===e.children.length&&s!==fr){const a=e.children[0],l=a.type,n=5===l||8===l;n&&0===cu(a,t)&&(p|=1),r=n||2===l?a:e.children}else r=e.children;0!==p&&(c=String(p),d&&d.length&&(u=function(e){let t="[";for(let a=0,l=e.length;a<l;a++)t+=JSON.stringify(e[a]),a<l-1&&(t+=", ");return t+"]"}(d))),e.codegenNode=ec(t,s,i,r,c,u,_,!!f,!1,n,e.loc)};function Gu(e,t,a=e.props,l,n,s=!1){const{tag:o,loc:i,children:r}=e;let c=[];const u=[],d=[],_=r.length>0;let p=!1,f=0,v=!1,m=!1,h=!1,g=!1,b=!1,y=!1;const w=[],x=({key:e,value:a})=>{if(cc(e)){const s=e.content,o=re(s);if(!o||l&&!n||"onclick"===s.toLowerCase()||"onUpdate:modelValue"===s||Ce(s)||(g=!0),o&&Ce(s)&&(y=!0),20===a.type||(4===a.type||8===a.type)&&cu(a,t)>0)return;"ref"===s?v=!0:"class"===s?m=!0:"style"===s?h=!0:"key"===s||w.includes(s)||w.push(s),!l||"class"!==s&&"style"!==s||w.includes(s)||w.push(s)}else b=!0};for(let l=0;l<a.length;l++){const n=a[l];if(6===n.type){const{loc:e,name:a,value:l}=n;let s=!0;if("ref"===a&&(v=!0,t.scopes.vFor>0&&c.push(lc(nc("ref_for",!0),nc("true")))),"is"===a&&(Ju(o)||l&&l.content.startsWith("vue:")))continue;c.push(lc(nc(a,!0,gc(e,0,a.length)),nc(l?l.content:"",s,l?l.loc:e)))}else{const{name:a,arg:l,exp:r,loc:f}=n,v="bind"===a,m="on"===a;if("slot"===a)continue;if("once"===a||"memo"===a)continue;if("is"===a||v&&kc(l,"is")&&Ju(o))continue;if(m&&s)continue;if((v&&kc(l,"key")||m&&_&&kc(l,"vue:before-update"))&&(p=!0),v&&kc(l,"ref")&&t.scopes.vFor>0&&c.push(lc(nc("ref_for",!0),nc("true"))),!l&&(v||m)){b=!0,r&&(c.length&&(u.push(ac(Wu(c),i)),c=[]),u.push(v?r:{type:14,loc:f,callee:t.helper(Dr),arguments:[r]}));continue}const h=t.directiveTransforms[a];if(h){const{props:a,needRuntime:l}=h(n,e,t);!s&&a.forEach(x),c.push(...a),l&&(d.push(n),ye(l)&&Vu.set(n,l))}else Ae(a)||(d.push(n),_&&(p=!0))}}let k;if(u.length?(c.length&&u.push(ac(Wu(c),i)),k=u.length>1?oc(t.helper(Mr),u,i):u[0]):c.length&&(k=ac(Wu(c),i)),b?f|=16:(m&&!l&&(f|=2),h&&!l&&(f|=4),w.length&&(f|=8),g&&(f|=32)),p||0!==f&&32!==f||!(v||y||d.length>0)||(f|=512),!t.inSSR&&k)switch(k.type){case 15:let e=-1,a=-1,l=!1;for(let t=0;t<k.properties.length;t++){const n=k.properties[t].key;cc(n)?"class"===n.content?e=t:"style"===n.content&&(a=t):n.isHandlerKey||(l=!0)}const n=k.properties[e],s=k.properties[a];l?k=oc(t.helper(Fr),[k]):(n&&!cc(n.value)&&(n.value=oc(t.helper(jr),[n.value])),s&&(h||4===s.value.type&&"["===s.value.content.trim()[0]||17===s.value.type)&&(s.value=oc(t.helper(Lr),[s.value])));break;case 14:break;default:k=oc(t.helper(Fr),[oc(t.helper(Rr),[k])])}return{props:k,directives:d,patchFlag:f,dynamicPropNames:w,shouldUseBlock:p}}function Wu(e){const t=new Map,a=[];for(let l=0;l<e.length;l++){const n=e[l];if(8===n.key.type||!n.key.isStatic){a.push(n);continue}const s=n.key.content,o=t.get(s);o?("style"===s||"class"===s||re(s))&&Ku(o,n):(t.set(s,n),a.push(n))}return a}function Ku(e,t){17===e.value.type?e.value.elements.push(t.value):e.value=tc([e.value,t.value],e.loc)}function Ju(e){return"component"===e||"Component"===e}const Yu=(e,t)=>{if(Cc(e)){const{children:a,loc:l}=e,{slotName:n,slotProps:s}=function(e,t){let a,l='"default"';const n=[];for(let t=0;t<e.props.length;t++){const a=e.props[t];6===a.type?a.value&&("name"===a.name?l=JSON.stringify(a.value.content):(a.name=Pe(a.name),n.push(a))):"bind"===a.name&&kc(a.arg,"name")?a.exp&&(l=a.exp):("bind"===a.name&&a.arg&&cc(a.arg)&&(a.arg.content=Pe(a.arg.content)),n.push(a))}if(n.length>0){const{props:l,directives:s}=Gu(e,t,n,!1,!1);a=l}return{slotName:l,slotProps:a}}(e,t),o=[t.prefixIdentifiers?"_ctx.$slots":"$slots",n,"{}","undefined","true"];let i=2;s&&(o[2]=s,i=3),a.length&&(o[3]=ic([],a,!1,!1,l),i=4),t.scopeId&&!t.slotted&&(i=5),o.splice(i),e.codegenNode=oc(t.helper(Ur),o,l)}},Zu=/^\s*([\w$_]+|(async\s*)?\([^)]*?\))\s*=>|^\s*(async\s+)?function(?:\s+[\w$]+)?\s*\(/,Xu=(e,t,a,l)=>{const{loc:n,modifiers:s,arg:o}=e;let i;if(4===o.type)if(o.isStatic){let e=o.content;e.startsWith("vue:")&&(e=`vnode-${e.slice(4)}`),i=nc(Me(Pe(e)),!0,o.loc)}else i=sc([`${a.helperString(Br)}(`,o,")"]);else i=o,i.children.unshift(`${a.helperString(Br)}(`),i.children.push(")");let r=e.exp;r&&!r.content.trim()&&(r=void 0);let c=a.cacheHandlers&&!r&&!a.inVOnce;if(r){const e=hc(r.content),t=!(e||Zu.test(r.content)),a=r.content.includes(";");(t||c&&e)&&(r=sc([`${t?"$event":"(...args)"} => ${a?"{":"("}`,r,a?"}":")"]))}let u={props:[lc(i,r||nc("() => {}",!1,n))]};return l&&(u=l(u)),c&&(u.props[0].value=a.cache(u.props[0].value)),u.props.forEach((e=>e.key.isHandlerKey=!0)),u},Qu=(e,t,a)=>{const{exp:l,modifiers:n,loc:s}=e,o=e.arg;return 4!==o.type?(o.children.unshift("("),o.children.push(') || ""')):o.isStatic||(o.content=`${o.content} || ""`),n.includes("camel")&&(4===o.type?o.content=o.isStatic?Pe(o.content):`${a.helperString(zr)}(${o.content})`:(o.children.unshift(`${a.helperString(zr)}(`),o.children.push(")"))),a.inSSR||(n.includes("prop")&&ed(o,"."),n.includes("attr")&&ed(o,"^")),!l||4===l.type&&!l.content.trim()?{props:[lc(o,nc("",!0,s))]}:{props:[lc(o,l)]}},ed=(e,t)=>{4===e.type?e.content=e.isStatic?t+e.content:`\`${t}\${${e.content}}\``:(e.children.unshift(`'${t}' + (`),e.children.push(")"))},td=(e,t)=>{if(0===e.type||1===e.type||11===e.type||10===e.type)return()=>{const a=e.children;let l,n=!1;for(let e=0;e<a.length;e++){const t=a[e];if($c(t)){n=!0;for(let n=e+1;n<a.length;n++){const s=a[n];if(!$c(s)){l=void 0;break}l||(l=a[e]=sc([t],t.loc)),l.children.push(" + ",s),a.splice(n,1),n--}}}if(n&&(1!==a.length||0!==e.type&&(1!==e.type||0!==e.tagType||e.props.find((e=>7===e.type&&!t.directiveTransforms[e.name])))))for(let e=0;e<a.length;e++){const l=a[e];if($c(l)||8===l.type){const n=[];2===l.type&&" "===l.content||n.push(l),t.ssr||0!==cu(l,t)||n.push("1"),a[e]={type:12,content:l,loc:l.loc,codegenNode:oc(t.helper($r),n)}}}}},ad=new WeakSet,ld=(e,t)=>{if(1===e.type&&wc(e,"once",!0)){if(ad.has(e)||t.inVOnce)return;return ad.add(e),t.inVOnce=!0,t.helper(Vr),()=>{t.inVOnce=!1;const e=t.currentNode;e.codegenNode&&(e.codegenNode=t.cache(e.codegenNode,!0))}}},nd=(e,t,a)=>{const{exp:l,arg:n}=e;if(!l)return sd();const s=l.loc.source,o=4===l.type?l.content:s;if(!o.trim()||!hc(o))return sd();const i=n||nc("modelValue",!0),r=n?cc(n)?`onUpdate:${n.content}`:sc(['"onUpdate:" + ',n]):"onUpdate:modelValue";let c;c=sc([(a.isTS?"($event: any)":"$event")+" => ((",l,") = $event)"]);const u=[lc(i,e.exp),lc(r,c)];if(e.modifiers.length&&1===t.tagType){const t=e.modifiers.map((e=>(pc(e)?e:JSON.stringify(e))+": true")).join(", "),a=n?cc(n)?`${n.content}Modifiers`:sc([n,' + "Modifiers"']):"modelModifiers";u.push(lc(a,nc(`{ ${t} }`,!1,e.loc,2)))}return sd(u)};function sd(e=[]){return{props:e}}const od=new WeakSet,id=(e,t)=>{if(1===e.type){const a=wc(e,"memo");if(!a||od.has(e))return;return od.add(e),()=>{const l=e.codegenNode||t.currentNode.codegenNode;l&&13===l.type&&(1!==e.tagType&&Oc(l,t),e.codegenNode=oc(t.helper(Yr),[a.exp,ic(void 0,l),"_cache",String(t.cached++)]))}}};function rd(e,t={}){const a=t.onError||ur,l="module"===t.mode;!0===t.prefixIdentifiers?a(_r(46)):l&&a(_r(47)),t.cacheHandlers&&a(_r(48)),t.scopeId&&!l&&a(_r(49));const n=be(e)?function(e,t={}){const a=function(e,t){const a=ue({},Lc);let l;for(l in t)a[l]=void 0===t[l]?Lc[l]:t[l];return{options:a,column:1,line:1,offset:0,originalSource:e,source:e,inPre:!1,inVPre:!1,onWarn:a.onWarn}}(e,t),l=Zc(a);return function(e,t=Qr){return{type:0,children:e,helpers:[],components:[],directives:[],hoists:[],imports:[],cached:0,temps:0,codegenNode:void 0,loc:t}}(Fc(a,0,[]),Xc(a,l))}(e,t):e,[s,o]=[[ld,Nu,id,Tu,Yu,Hu,Fu,td],{on:Xu,bind:Qu,model:nd}];return vu(n,ue({},t,{prefixIdentifiers:!1,nodeTransforms:[...s,...t.nodeTransforms||[]],directiveTransforms:ue({},o,t.directiveTransforms||{})})),function(e,t={}){const a=function(e,{mode:t="function",prefixIdentifiers:a="module"===t,sourceMap:l=!1,filename:n="template.vue.html",scopeId:s=null,optimizeImports:o=!1,runtimeGlobalName:i="Vue",runtimeModuleName:r="vue",ssrRuntimeModuleName:c="vue/server-renderer",ssr:u=!1,isTS:d=!1,inSSR:_=!1}){const p={mode:t,prefixIdentifiers:a,sourceMap:l,filename:n,scopeId:s,optimizeImports:o,runtimeGlobalName:i,runtimeModuleName:r,ssrRuntimeModuleName:c,ssr:u,isTS:d,inSSR:_,source:e.loc.source,code:"",column:1,line:1,offset:0,indentLevel:0,pure:!1,map:void 0,helper:e=>`_${Xr[e]}`,push(e,t){p.code+=e},indent(){f(++p.indentLevel)},deindent(e=!1){e?--p.indentLevel:f(--p.indentLevel)},newline(){f(p.indentLevel)}};function f(e){p.push("\n"+"  ".repeat(e))}return p}(e,t);t.onContextCreated&&t.onContextCreated(a);const{mode:l,push:n,prefixIdentifiers:s,indent:o,deindent:i,newline:r,ssr:c}=a,u=e.helpers.length>0,d=!s&&"module"!==l;if(function(e,t){const{push:a,newline:l,runtimeGlobalName:n}=t,s=n;e.helpers.length>0&&(a(`const _Vue = ${s}\n`),e.hoists.length)&&a(`const { ${[wr,xr,kr,$r,Sr].filter((t=>e.helpers.includes(t))).map(gu).join(", ")} } = _Vue\n`),function(e,t){if(!e.length)return;t.pure=!0;const{push:a,newline:l}=t;l();for(let n=0;n<e.length;n++){const s=e[n];s&&(a(`const _hoisted_${n+1} = `),xu(s,t),l())}t.pure=!1}(e.hoists,t),l(),a("return ")}(e,a),n(`function ${c?"ssrRender":"render"}(${(c?["_ctx","_push","_parent","_attrs"]:["_ctx","_cache"]).join(", ")}) {`),o(),d&&(n("with (_ctx) {"),o(),u&&(n(`const { ${e.helpers.map(gu).join(", ")} } = _Vue`),n("\n"),r())),e.components.length&&(bu(e.components,"component",a),(e.directives.length||e.temps>0)&&r()),e.directives.length&&(bu(e.directives,"directive",a),e.temps>0&&r()),e.temps>0){n("let ");for(let t=0;t<e.temps;t++)n(`${t>0?", ":""}_temp${t}`)}return(e.components.length||e.directives.length||e.temps)&&(n("\n"),r()),c||n("return "),e.codegenNode?xu(e.codegenNode,a):n("null"),d&&(i(),n("}")),i(),n("}"),{ast:e,code:a.code,preamble:"",map:a.map?a.map.toJSON():void 0}}(n,ue({},t,{prefixIdentifiers:!1}))}const cd=Symbol(""),ud=Symbol(""),dd=Symbol(""),_d=Symbol(""),pd=Symbol(""),fd=Symbol(""),vd=Symbol(""),md=Symbol(""),hd=Symbol(""),gd=Symbol("");var bd;let yd;bd={[cd]:"vModelRadio",[ud]:"vModelCheckbox",[dd]:"vModelText",[_d]:"vModelSelect",[pd]:"vModelDynamic",[fd]:"withModifiers",[vd]:"withKeys",[md]:"vShow",[hd]:"Transition",[gd]:"TransitionGroup"},Object.getOwnPropertySymbols(bd).forEach((e=>{Xr[e]=bd[e]}));const wd=D("style,iframe,script,noscript",!0),xd={isVoidTag:X,isNativeTag:e=>Y(e)||Z(e),isPreTag:e=>"pre"===e,decodeEntities:function(e,t=!1){return yd||(yd=document.createElement("div")),t?(yd.innerHTML=`<div foo="${e.replace(/"/g,"&quot;")}">`,yd.children[0].getAttribute("foo")):(yd.innerHTML=e,yd.textContent)},isBuiltInComponent:e=>uc(e,"Transition")?hd:uc(e,"TransitionGroup")?gd:void 0,getNamespace(e,t){let a=t?t.ns:0;if(t&&2===a)if("annotation-xml"===t.tag){if("svg"===e)return 1;t.props.some((e=>6===e.type&&"encoding"===e.name&&null!=e.value&&("text/html"===e.value.content||"application/xhtml+xml"===e.value.content)))&&(a=0)}else/^m(?:[ions]|text)$/.test(t.tag)&&"mglyph"!==e&&"malignmark"!==e&&(a=0);else t&&1===a&&("foreignObject"!==t.tag&&"desc"!==t.tag&&"title"!==t.tag||(a=0));if(0===a){if("svg"===e)return 1;if("math"===e)return 2}return a},getTextMode({tag:e,ns:t}){if(0===t){if("textarea"===e||"title"===e)return 1;if(wd(e))return 2}return 0}},kd=(e,t)=>{const a=W(e);return nc(JSON.stringify(a),!1,t,3)},$d=D("passive,once,capture"),Sd=D("stop,prevent,self,ctrl,shift,alt,meta,exact,middle"),Nd=D("left,right"),Cd=D("onkeyup,onkeydown,onkeypress",!0),Ad=(e,t)=>cc(e)&&"onclick"===e.content.toLowerCase()?nc(t,!0):4!==e.type?sc(["(",e,`) === "onClick" ? "${t}" : (`,e,")"]):e,Ed=(e,t)=>{1!==e.type||0!==e.tagType||"script"!==e.tag&&"style"!==e.tag||t.removeNode()},Td=[e=>{1===e.type&&e.props.forEach(((t,a)=>{6===t.type&&"style"===t.name&&t.value&&(e.props[a]={type:7,name:"bind",arg:nc("style",!0,t.loc),exp:kd(t.value.content,t.loc),modifiers:[],loc:t.loc})}))}],Pd={cloak:()=>({props:[]}),html:(e,t,a)=>{const{exp:l,loc:n}=e;return t.children.length&&(t.children.length=0),{props:[lc(nc("innerHTML",!0,n),l||nc("",!0))]}},text:(e,t,a)=>{const{exp:l,loc:n}=e;return t.children.length&&(t.children.length=0),{props:[lc(nc("textContent",!0),l?cu(l,a)>0?l:oc(a.helperString(Or),[l],n):nc("",!0))]}},model:(e,t,a)=>{const l=nd(e,t,a);if(!l.props.length||1===t.tagType)return l;const{tag:n}=t,s=a.isCustomElement(n);if("input"===n||"textarea"===n||"select"===n||s){let e=dd,o=!1;if("input"===n||s){const a=xc(t,"type");if(a){if(7===a.type)e=pd;else if(a.value)switch(a.value.content){case"radio":e=cd;break;case"checkbox":e=ud;break;case"file":o=!0}}else(function(e){return e.props.some((e=>!(7!==e.type||"bind"!==e.name||e.arg&&4===e.arg.type&&e.arg.isStatic)))})(t)&&(e=pd)}else"select"===n&&(e=_d);o||(l.needRuntime=a.helper(e))}return l.props=l.props.filter((e=>!(4===e.key.type&&"modelValue"===e.key.content))),l},on:(e,t,a)=>Xu(e,0,a,(t=>{const{modifiers:l}=e;if(!l.length)return t;let{key:n,value:s}=t.props[0];const{keyModifiers:o,nonKeyModifiers:i,eventOptionModifiers:r}=((e,t,a,l)=>{const n=[],s=[],o=[];for(let a=0;a<t.length;a++){const l=t[a];$d(l)?o.push(l):Nd(l)?cc(e)?Cd(e.content)?n.push(l):s.push(l):(n.push(l),s.push(l)):Sd(l)?s.push(l):n.push(l)}return{keyModifiers:n,nonKeyModifiers:s,eventOptionModifiers:o}})(n,l);if(i.includes("right")&&(n=Ad(n,"onContextmenu")),i.includes("middle")&&(n=Ad(n,"onMouseup")),i.length&&(s=oc(a.helper(fd),[s,JSON.stringify(i)])),!o.length||cc(n)&&!Cd(n.content)||(s=oc(a.helper(vd),[s,JSON.stringify(o)])),r.length){const e=r.map(Oe).join("");n=cc(n)?nc(`${n.content}${e}`,!0):sc(["(",n,`) + "${e}"`])}return{props:[lc(n,s)]}})),show:(e,t,a)=>({props:[],needRuntime:a.helper(md)})},Ud=Object.create(null);function Id(e,t){if(!be(e)){if(!e.nodeType)return se;e=e.innerHTML}const a=e,l=Ud[a];if(l)return l;if("#"===e[0]){const t=document.querySelector(e);e=t?t.innerHTML:""}const{code:n}=function(e,t={}){return rd(e,ue({},xd,t,{nodeTransforms:[Ed,...Td,...t.nodeTransforms||[]],directiveTransforms:ue({},Pd,t.directiveTransforms||{}),transformHoist:null}))}(e,ue({hoistStatic:!0,onError:void 0,onWarn:se},t)),s=new Function("Vue",n)(cr);return s._rc=!0,Ud[a]=s}fo(Id);var Od=Object.freeze({__proto__:null,BaseTransition:ql,Comment:Cs,EffectScope:qe,Fragment:Ss,KeepAlive:en,ReactiveEffect:at,Static:As,Suspense:kl,Teleport:$s,Text:Ns,Transition:ui,TransitionGroup:Ai,VueElement:si,callWithAsyncErrorHandling:Oa,callWithErrorHandling:Ia,camelize:Pe,capitalize:Oe,cloneVNode:Ws,compatUtils:null,compile:Id,computed:xo,createApp:sr,createBlock:Ls,createCommentVNode:Ys,createElementBlock:js,createElementVNode:Vs,createHydrationRenderer:ms,createPropsRestProxy:Po,createRenderer:vs,createSSRApp:or,createSlots:Tn,createStaticVNode:Js,createTextVNode:Ks,createVNode:Hs,customRef:$a,defineAsyncComponent:Zl,defineComponent:Jl,defineCustomElement:ai,defineEmits:$o,defineExpose:So,defineProps:ko,defineSSRCustomElement:li,get devtools(){return nl},effect:nt,effectScope:Be,getCurrentInstance:so,getCurrentScope:He,getTransitionRawChildren:Kl,guardReactiveProps:Gs,h:Io,handleError:Ma,hydrate:nr,initCustomFormatter:jo,initDirectivesForSSR:rr,inject:Tl,isMemoSame:Fo,isProxy:ia,isReactive:na,isReadonly:sa,isRef:fa,isRuntimeOnly:vo,isShallow:oa,isVNode:Fs,markRaw:ca,mergeDefaults:To,mergeProps:eo,nextTick:Ja,normalizeClass:K,normalizeProps:J,normalizeStyle:V,onActivated:an,onBeforeMount:dn,onBeforeUnmount:vn,onBeforeUpdate:pn,onDeactivated:ln,onErrorCaptured:yn,onMounted:_n,onRenderTracked:bn,onRenderTriggered:gn,onScopeDispose:Ge,onServerPrefetch:hn,onUnmounted:mn,onUpdated:fn,openBlock:Ps,popScopeId:fl,provide:El,proxyRefs:xa,pushScopeId:pl,queuePostFlushCb:Qa,reactive:Qt,readonly:ta,ref:va,registerRuntimeCompiler:fo,render:lr,renderList:En,renderSlot:Pn,resolveComponent:kn,resolveDirective:Nn,resolveDynamicComponent:Sn,resolveFilter:null,resolveTransitionHooks:Vl,setBlockTracking:Os,setDevtoolsHook:ol,setTransitionHooks:Wl,shallowReactive:ea,shallowReadonly:aa,shallowRef:ma,ssrContextKey:Oo,ssrUtils:null,stop:st,toDisplayString:te,toHandlerKey:Me,toHandlers:In,toRaw:ra,toRef:Ca,toRefs:Sa,transformVNodeArgs:Ds,triggerRef:ba,unref:ya,useAttrs:Ao,useCssModule:oi,useCssVars:ii,useSSRContext:Mo,useSlots:Co,useTransitionState:Dl,vModelCheckbox:ji,vModelDynamic:Bi,vModelRadio:Fi,vModelSelect:Ri,vModelText:Mi,vShow:Yi,version:Ro,warn:Ta,watch:Ml,watchEffect:Pl,watchPostEffect:Ul,watchSyncEffect:Il,withAsyncContext:Uo,withCtx:ml,withDefaults:No,withDirectives:wn,withKeys:Ji,withMemo:Lo,withModifiers:Wi,withScopeId:vl});var Md={props:["content"],watch:{content:function(e,t){}},render(){return Io(this.$props.content)},__file:"http_src/vue/vue_node.vue"};const jd=["id"],Ld=["aria-labelledby"],Fd={class:"dropdown-item"};var Rd={__name:"dropdown",props:{id:String,auto_load:Boolean,button_class:String,button_style:String,f_on_open:Function,f_on_close:Function},emits:[],setup(e,{expose:t,emit:a}){const l=e,n=Co(),s=va([]);va([]);const o=va([]),i=va(null),r=va(null);let c=null;_n((()=>{c=$(i.value).parent().closest("div").css("overflow"),1==l.auto_load&&d();let e={dropdown:i.value,dropdown_button:r.value};$(i.value).on("show.bs.dropdown",(function(){$(i.value).parent().closest("div").css("overflow","visible"),null!=l.f_on_open&&l.f_on_open(e)})),$(i.value).on("hide.bs.dropdown",(function(){$(i.value).parent().closest("div").css("overflow",c),null!=l.f_on_close&&l.f_on_close(e)}))}));const u=xo((()=>null!=l.button_class?l.button_class:"btn-link"));async function d(){if(s.value=[],null==n||null==n.menu)return;let e=n.menu();null!=e&&0!=e.length&&("symbol"==typeof e[0].type&&(e=e[0].children),o.value=[],e.forEach((e=>{let t=e;o.value.push(t)})),await Ja())}return t({load_menu:d}),(t,a)=>(Ps(),js("div",{class:"dropdown",ref_key:"dropdown",ref:i,style:{display:"inline-block"}},[Vs("button",{class:K(["btn dropdown-toggle",ya(u)]),style:V(e.button_style),type:"button",id:e.id,ref_key:"dropdown_button",ref:r,"aria-expanded":"false","data-bs-toggle":"dropdown"},[Pn(t.$slots,"title")],14,jd),Vs("ul",{class:"dropdown-menu","aria-labelledby":e.id,style:{"max-height":"25rem",overflow:"auto"}},[Ys(' <slot name="menu"></slot> '),Ys(' <li class="dropdown-item" v-for="(opt, i) in options" :ref="el => { menu[i] = el }"> '),Ys("   asd "),Ys("   </li> "),(Ps(!0),js(Ss,null,En(o.value,((e,t)=>(Ps(),js("li",Fd,[Hs(Md,{content:e},null,8,["content"])])))),256))],8,Ld)],512))},__file:"http_src/vue/dropdown.vue"};const Dd=e=>i18n(e);function zd(e){const t={button_list:Bd(!0),button_array:Bd(!1)};return(e,a,l,n)=>{if(null==e.render_v_node_type&&null==e.render_v_func)return null;if(1==n)return!0;if(null!=e.render_v_func)return e.render_v_func(e,a,l,n);return(0,t[e.render_v_node_type])(e,a,l)}}function qd(e){return(e,t,a)=>{if(null!=e.render_v_func)return null;if(1==a)return!0;let l;if(null!=e.data_field&&(l=t[e.data_field]),null!=e.zero_is_null&&null!=l&&0==l&&(l=""),null!=e.render_generic){return R.getFormatGenericField(e.render_generic,e.zero_is_null)(l,"display",t)}if(null!=e.render_func)return e.render_func(l,t);if(null!=e.render_type){if(null!=v.types[e.render_type])return e.render_func=v.getFormatter(e.render_type),e.render_func(l);if(null!=R[e.render_type])return R[e.render_type](l,"display",t,e.zero_is_null);throw`In column ${e.data_field} render_type: ${e.render_type} not found`}return l}}function Bd(e){return(t,a,l)=>{const n=e=>n=>{n.stopPropagation();let s={event_id:e,row:a,col:t};l.emit("custom_event",s)};let s=t.button_def_array.map((t=>{let s={};null!=t.attributes&&(s=t.attributes);let o=b.clone(t.class);null!=t.f_map_class&&(o=t.f_map_class(o,a));let i="";return null!=o&&o.length>0&&(i=o.join(" ")),0==e?l.h("button",{class:`btn btn-sm btn-secondary ${i}`,style:"margin-right:0.2rem;",onClick:n(t.event_id),...s},[l.h("span",{class:t.icon,style:"",title:Dd(t.title_i18n)})]):l.h("a",{class:`${i} btn-sm`,onClick:n(t.event_id),style:"display:block;",...s},[l.h("span",{class:t.icon,style:"margin-right:0.2rem;cursor:pointer;"}),Dd(t.title_i18n)])}));if(1==e){let e=l.h("span",{class:"fas fa-sm fa-align-justify"});return l.h(Rd,{auto_load:!0,button_style:"",button_class:"btn-secondary btn-sm"},{title:()=>e,menu:()=>s})}return l.h("div",{class:"button-group"},s)}}function Vd(e,t,a){let l=Gd(e);return async(n,s,o,i,r)=>{let c=o.find((e=>0!=e.sort)),u=o.filter((e=>1==e.visible)).map((e=>l(e))).join(","),d={start:n*s,length:s,map_search:i,visible_columns:u};if(null!=c&&(d.sort=l(c.data),d.order=1==c.sort?"asc":"desc"),null!=t){let e=t();d={...d,...e}}const _=x.obj_to_url_params(d),p=`${http_prefix}/${e.data_url}?${_}`;let f=await b.http_request(p,null,null,!0);null!=a&&a(d);let v=f.rsp;null!=e.rsp_records_field&&(v=f.rsp[e.rsp_records_field]);let m=f.query_info;return null!=e.rsp_query_info_field&&(m=f.rsp[e.rsp_query_info_field]),f.recordsFiltered>f.recordsTotal&&(f.recordsTotal=f.recordsFiltered),{total_rows:f.recordsTotal,rows:v,query_info:m}}}function Hd(e){return e=>null!=e.title_i18n?Dd(e.title_i18n):null!=e.title?e.title:""}function Gd(e){return t=>null!=t.id?t.id:null!=t.data_field?t.data_field:e.columns.findIndex((e=>e==t))}const Wd={get_columns_from_datatable_columns:function(e,t){let a=t.map(((t,a)=>{t.data,e[a],null==t.orderable||t.orderable,null!=t.className&&t.className.split(" "),null!=t.render&&(t.render_func=(e,a)=>t.render(e,"display",a))}));return a},build_table:async function(e,t,a,l,n){let s=`${e}/tables_config/${t}.json?epoch_end=${Number.parseInt(Date.now()/1e3)}`,o=await b.http_request(s,null,null,!0);return null==o?{id:t,columns:[]}:(null!=a&&(o.columns=await a(o.columns)),{id:t,columns:o.columns,get_rows:Vd(o,l,n),get_column_id:Gd(o),print_column_name:Hd(),print_html_row:qd(),print_vue_node_row:zd(),f_is_column_sortable:e=>e.sortable,f_get_column_classes:e=>{let t=e?.class;if(null!=t)return t;return[]},f_get_column_style:e=>{let t=e?.style;if(null!=t)return t;return""},display_empty_rows:o.display_empty_rows,enable_search:o.enable_search,default_sort:o.default_sort,show_autorefresh:o.show_autorefresh,paging:o.paging})}};let Kd={};async function Jd(e){return null==Kd[e]&&(Kd[e]=ntopng_utility.http_request(e)),await Kd[e]}const Yd=async function(e){e.filter((e=>null==e.label)).forEach((e=>{console.error(`label not defined for filter ${JSON.stringify(e)}`),e.label=""})),e.sort(((e,t)=>e.label.localeCompare(t.label))),i18n_ext.tags={},TAG_OPERATORS={},DEFINED_TAGS={},e.forEach((e=>{i18n_ext.tags[e.id]=e.label,e.operators.forEach((e=>TAG_OPERATORS[e.id]=e.label)),DEFINED_TAGS[e.id]=e.operators.map((e=>e.id))}));let t=ntopng_url_manager.get_url_entries(),a=[];for(const[e,l]of t){let t=FILTERS_CONST.find((t=>t.id==e));if(null!=t){l.split(",").forEach((e=>{let[l,n]=e.split(";");if(null==n||null==l||""==n||null!=t.options&&null==t.options.find((e=>e.value==l)))return;let s=l;"array"==t.value_type&&(s=t?.options?.find((e=>e.value==l))?.label),a.push({id:t.id,operator:n,value:l,label:t.label,value_label:s})}))}}return a};function Zd(e){let t={};e.forEach((e=>{let a=t[e.id];null==a&&(a=[],t[e.id]=a),a.push(e)}));let a={};for(let e in t){let l=t[e].filter((e=>null!=e.value&&null!=e.operator&&""!=e.operator)).map((e=>`${e.value};${e.operator}`)).join(",");a[e]=l}return a}const Xd={get_filter_const:Jd,get_filters_object:Zd,load_filters_data:Yd,tag_operator_label_dict:{eq:"=",neq:"!=",lt:"<",gt:">",gte:">=",lte:"<=",in:"contains",nin:"does not contain"}},Qd=["multiple"],e_=["selected","value","disabled"],t_=["label"],a_=["selected","value","disabled"];var l_={__name:"select-search",props:{id:String,options:Array,selected_option:Object,selected_options:Array,multiple:Boolean,add_tag:Boolean,disable_change:Boolean},emits:["update:selected_option","update:selected_options","select_option","unselect_option","change_selected_options"],setup(e,{expose:t,emit:a}){const l=e,n=va(null),s=va([]),o=va([]),i=va({}),r=va([]),c=va(0);let u=!0;function d(){!function(){if(s.value=[],o.value=[],null==l.options)return;let e={};l.options.forEach((t=>{let a={...t};null==a.value&&(a.value=a.label),null==t.group?s.value.push(a):(null==e[t.group]&&(e[t.group]={group:a.group,options:[]}),e[t.group].options.push(a))})),o.value=ntopng_utility.object_to_array(e),c.value+=1}(),m(),v()}_n((()=>{l.options&&(l.disable_change&&u||d())})),Ml((()=>l.selected_option),((e,t)=>{m(e),p()}),{flush:"pre"}),Ml((()=>l.selected_options),((e,t)=>{v(),p()}),{flush:"pre"}),Ml([c],((e,t)=>{_()}),{flush:"post"}),Ml((()=>l.options),((e,t)=>{1!=l.disable_change&&null!=e&&d()}),{flush:"pre"});const _=()=>{let e=n.value;0==u&&w(),$(e).hasClass("select2-hidden-accessible")||($(e).select2({width:"100%",height:"500px",theme:"bootstrap-5",dropdownParent:$(e).parent(),dropdownAutoWidth:!0,tags:l.add_tag&&!l.multiple}),$(e).on("select2:select",(function(e){let t=e.params.data;if(null==t.element){let e={label:t.text,value:t.id};return a("update:selected_option",e),void a("select_option",e)}let n=t.element._value,s=y(n);if(n!=l.selected_option&&(a("update:selected_option",s),a("select_option",s)),!l.multiple)return;r.value=r.value.filter((e=>e!=n)),r.value.push(n);let o=b(r.value);a("update:selected_options",o),a("change_selected_options",o)})),$(e).on("select2:unselect",(function(e){let t=e.params.data.element._value;if(!l.multiple)return;r.value=r.value.filter((e=>e!=t));let n=y(t),s=b(r.value);a("unselect_option",n),a("update:selected_options",s),a("change_selected_options",s)}))),u=!1,p()};function p(){let e=n.value;if(l.multiple)$(e).val(r.value),$(e).trigger("change");else{let t=g(l.selected_option);$(e).val(t),$(e).trigger("change")}}function f(e){if(!l.multiple){const t=0==i.value.value||"0"==i.value.value;return e.value==i.value.value||t&&e.label==i.value.label}return null!=r.value.find((t=>t==e.value))||e.selected}function v(){null!=l.selected_options&&l.multiple&&(r.value=[],l.selected_options.forEach((e=>{let t=e.value||e.label;r.value.push(t)})))}function m(e){null!=e||l.multiple||(e=h()),i.value=e}function h(){return null==l.selected_option?l.options[0]:l.selected_option}function g(e){let t;return null==e&&(e=h()),t=null!=e.value?e.value:e.label,t}function b(e){let t=e.map((e=>y(e)));return t}function y(e){let t=function(e){null==e&&(e=g());let t=s.value.find((t=>t.value==e));if(null!=t)return t;for(let a=0;a<o.value.length;a+=1){if(t=o.value[a].options.find((t=>t.value==e)),null!=t)return t}return null}(e),a=l.options.find((e=>e.label==t.label));return a}function w(){try{$(n.value).select2("destroy"),$(n.value).off("select2:select")}catch(e){console.error("Destroy select-search catch error:"),console.error(e)}}return t({render:_}),vn((()=>{w()})),(t,a)=>(Ps(),js("select",{class:"select2 form-select",ref_key:"select2",ref:n,required:"",name:"filter_type",multiple:e.multiple},[(Ps(!0),js(Ss,null,En(s.value,((e,t)=>(Ps(),js("option",{class:"ntopng-dropdown-min-width no-wrap",selected:f(e),value:e.value,disabled:e.disabled},te(e.label),9,e_)))),256)),(Ps(!0),js(Ss,null,En(o.value,((e,t)=>(Ps(),js("optgroup",{label:e.group},[(Ps(!0),js(Ss,null,En(e.options,((e,t)=>(Ps(),js("option",{selected:f(e),value:e.value,disabled:e.disabled},te(e.label),9,a_)))),256))],8,t_)))),256))],8,Qd))},__file:"http_src/vue/select-search.vue"},n_=Jl({components:{},props:{id:String,main_title:Object,secondary_title_list:Array,help_link:String,items_table:Array},emits:["click_item"],created(){},data:()=>({}),mounted(){ntopng_sync.ready(this.$props.id)},methods:{}});const s_={class:"navbar navbar-shadow navbar-expand-lg navbar-light bg-light px-2 mb-2"},o_={class:"me-1 text-nowrap",style:{"font-size":"1.1rem"}},i_=["href","title"],r_=["title"],c_=["href","title"],u_=["title"],d_=Vs("span",{class:"text-muted ms-1 d-none d-lg-inline d-md-none"},"|",-1),__=Vs("button",{class:"navbar-toggler",type:"button"},[Vs("span",{class:"navbar-toggler-icon"})],-1),p_={class:"collapse navbar-collapse scroll-x",id:"navbarNav"},f_={class:"navbar-nav"},v_=["onClick"],m_={key:0,class:"badge rounded-pill bg-dark",style:{float:"right","margin-bottom":"-10px"}},h_=["onClick"],g_={key:0,class:"badge rounded-pill bg-dark",style:{float:"right","margin-bottom":"-10px"}},b_=["onClick"],y_={key:0,class:"badge rounded-pill bg-dark",style:{float:"right","margin-bottom":"-10px"}},w_={class:"navbar-nav ms-auto"},x_=Vs("a",{href:"javascript:history.back()",class:"nav-item nav-link text-muted"},[Vs("i",{class:"fas fa-arrow-left"})],-1),k_=["href"],$_=[Vs("i",{class:"fas fa-question-circle"},null,-1)];n_.render=function(e,t,a,l,n,s){return Ps(),js("nav",s_,[Vs("span",o_,[Vs("i",{class:K(e.main_title.icon)},null,2),e.main_title.href?(Ps(),js("a",{key:0,href:e.main_title.href,title:e.main_title.title},te(e.main_title.label),9,i_)):(Ps(),js("span",{key:1,title:e.main_title.title},te(e.main_title.label),9,r_)),(Ps(!0),js(Ss,null,En(e.secondary_title_list,(e=>(Ps(),js(Ss,null,[Ks(" / "),e.href?(Ps(),js("a",{key:0,class:K(e.class),href:e.href,title:e.title},[Ks(te(e.label)+" ",1),e.icon?(Ps(),js("i",{key:0,class:K(e.icon)},null,2)):Ys("v-if",!0)],10,c_)):(Ps(),js("span",{key:1,title:e.title},te(e.label),9,u_))],64)))),256))]),d_,__,Vs("div",p_,[Vs("ul",f_,[(Ps(!0),js(Ss,null,En(e.items_table,(e=>(Ps(),js(Ss,null,[e.active?(Ps(),js(Ss,{key:0},[e.active?(Ps(),js("li",{key:0,onClick:t=>this.$emit("click_item",e),class:K(["nav-item nav-link active",e.class])},[e.badge_num>0?(Ps(),js("span",m_,te(e.badge_num),1)):Ys("v-if",!0),Vs("b",null,[Vs("i",{class:K(e.icon)},null,2),Ks(" "+te(e.label),1)])],10,v_)):(Ps(),js("li",{key:1,onClick:t=>this.$emit("click_item",e),class:K(["nav-item nav-link",e.class])},[e.badge_num>0?(Ps(),js("span",g_,te(e.badge_num),1)):Ys("v-if",!0),Vs("b",null,[Vs("i",{class:K(e.icon)},null,2),Ks(" "+te(e.label),1)])],10,h_))],64)):(Ps(),js("a",{key:1,onClick:t=>this.$emit("click_item",e),href:"#",class:K(["nav-item nav-link",e.class])},[e.badge_num>0?(Ps(),js("span",y_,te(e.badge_num),1)):Ys("v-if",!0),Vs("i",{class:K(e.icon)},null,2),Ks(" "+te(e.label),1)],10,b_))],64)))),256))]),Vs("ul",w_,[x_,Vs("a",{target:"_newtab",href:e.help_link,class:"nav-item nav-link text-muted"},$_,8,k_)])])])},n_.__file="http_src/vue/page-navbar.vue";var S_=Jl({components:{},props:{id:String,global:Boolean,no_close_button:Boolean},emits:[],created(){},data:()=>({show_alert:!1,i18n:e=>i18n(e),body:"",alert_type:"alert-success"}),mounted(){1==this.global&&ntopng_events_manager.on_custom_event(this.$props.id,ntopng_custom_events.SHOW_GLOBAL_ALERT_INFO,(e=>{null!=e.type&&(this.alert_type=e.type),null!=e.timeout&&setTimeout((()=>{this.close()}),1e3*e.timeout),this.show(e.text_html)}))},methods:{close:function(){this.show_alert=!1},show:function(e,t){this.show_alert=!0,this.body=e,null!=t&&(this.alert_type=t)}}});const N_=["innerHTML"];S_.render=function(e,t,a,l,n,s){return 1==e.show_alert?(Ps(),js("div",{key:0,style:{width:"100%"},class:K(["alert alert-dismissable",e.alert_type])},[Vs("span",{innerHTML:e.body},null,8,N_),e.no_close_button?Ys("v-if",!0):(Ps(),js("button",{key:0,type:"button",onClick:t[0]||(t[0]=(...t)=>e.close&&e.close(...t)),class:"btn-close","aria-label":"Close"}))],2)):Ys("v-if",!0)},S_.__file="http_src/vue/alert-info.vue";var C_={components:{},props:{id:String,chart_type:String,register_on_status_change:Boolean,not_emit_global_status_update:Boolean,base_url_request:String,get_params_url_request:Function,get_custom_chart_options:Function,map_chart_options:Function,min_time_interval_id:String,round_time:Boolean},emits:["apply","hidden","showed","chart_reloaded","zoom"],created(){},beforeUnmount(){this.chart.destroyChart()},data:()=>({chart:null,chart_options:null,from_zoom:!1}),async mounted(){await this.init(),ntopng_sync.ready(this.$props.id)},methods:{init:async function(){let e=ntopng_status_manager.get_status(),t=this.get_url_request(e);this.register_on_status_change&&this.register_status(e),await this.draw_chart(t)},get_data_uri:async function(e){if(null==this.chart)return null;return await this.chart.to_data_uri()},download_chart_png:async function(e,t){if(null==this.chart)return;let a=await this.chart.to_data_uri();downloadURI(a,e)},register_status:function(e){let t=this.get_url_request(e);ntopng_status_manager.on_status_change(this.id,(e=>{1==this.from_zoom&&(this.from_zoom=!1);let a=this.get_url_request(e);a!=t?(t=a,this.update_chart(a)):t=a}),!1)},get_url_request:function(e){let t;return null!=this.get_params_url_request?(null==e&&(e=ntopng_status_manager.get_status()),t=this.get_params_url_request(e)):t=x.get_url_params(),`${this.base_url_request}?${t}`},draw_chart:async function(e){let t=ntopChartApex,a=this.chart_type;null==a&&(a=t.typeChart.TS_STACKED),this.chart=t.newChart(a);let l=this;this.chart.registerEvent("beforeZoom",(function(e,t){l.on_before_zoom(e,t)})),this.chart.registerEvent("zoomed",(function(e,t){l.on_zoomed(e,t)}));let n=await this.get_chart_options(e);this.chart.drawChart(this.$refs.chart,n)},update_chart:async function(e){null==e&&(e=this.get_url_request());let t=await this.get_chart_options(e);this.chart.updateChart(t)},update_chart_options:function(e){this.chart.updateChart(e)},update_chart_series:function(e){null!=e&&this.chart.updateSeries(e)},get_chart_options:async function(e){let t;return t=null==this.get_custom_chart_options?await b.http_request(e):await this.get_custom_chart_options(e),null!=this.map_chart_options&&(t=this.map_chart_options(t)),this.$emit("chart_reloaded",t),t},on_before_zoom:function(e,{xaxis:t,yaxis:a}){let l=this.get_epoch_from_xaxis_event(t);if(null!=this.min_time_interval_id){const e=b.get_timeframe_from_timeframe_id(this.min_time_interval_id);l.epoch_end-l.epoch_begin<e&&(l.epoch_end=l.epoch_end+e,l.epoch_end=l.epoch_end-l.epoch_end%e,l.epoch_begin=l.epoch_end-e),1==this.round_time&&(l.epoch_begin=b.round_time_by_timeframe_id(l.epoch_begin,this.min_time_interval_id),l.epoch_end=b.round_time_by_timeframe_id(l.epoch_end,this.min_time_interval_id)),t.min=1e3*l.epoch_begin,t.max=1e3*l.epoch_end}return t},on_zoomed:function(e,{xaxis:t,yaxis:a}){this.from_zoom=!0;const l=this.get_epoch_from_xaxis_event(t);this.not_emit_global_status_update||C.emit_event(ntopng_events.EPOCH_CHANGE,l,this.id),this.$emit("zoom",l)},get_epoch_from_xaxis_event:function(e){const t=moment(e.min),a=moment(e.max);return{epoch_begin:Number.parseInt(t.unix()),epoch_end:Number.parseInt(a.unix())}}}};const A_={style:{width:"100%"},ref:"chart"};C_.render=function(e,t,a,l,n,s){return Ps(),js("div",A_,null,512)},C_.__file="http_src/vue/chart.vue";var E_={components:{"select-search":l_},props:{id:String,enable_refresh:Boolean,disabled_date_picker:Boolean,min_time_interval_id:String,round_time:Boolean,custom_time_interval_list:Array},computed:{invalid_date_message:function(){if(this.wrong_date)return this.i18n("wrong_date_range");if(this.wrong_min_interval){let e=this.i18n("wrong_min_interval");return e.replace("%time_interval",this.i18n(`show_alerts.presets.${this.min_time_interval_id}`)),e}}},watch:{enable_refresh:function(e,t){1==e?this.start_refresh():null!=this.refresh_interval&&(clearInterval(this.refresh_interval),this.refresh_interval=null)},min_time_interval_id:function(){},round_time:function(){}},emits:["epoch_change"],created(){},beforeMount(){if(null!=this.$props.custom_time_interval_list&&(this.time_preset_list=this.$props.custom_time_interval_list),null==this.min_time_interval_id)return void(this.time_preset_list_filtered=this.time_preset_list);const e=this.get_timeframes_available(),t=e[this.min_time_interval_id];this.time_preset_list_filtered=this.time_preset_list.filter((a=>"custom"==a.value||(null==t||e[a.value]>=t)))},mounted(){let e=x.get_url_entry("epoch_begin"),t=x.get_url_entry("epoch_end");null!=e&&null!=t&&this.emit_epoch_change({epoch_begin:Number.parseInt(e),epoch_end:Number.parseInt(t)},this.$props.id,!0);let a=this,l=(e,t)=>flatpickr($(this.$refs[e]),{enableTime:!0,dateFormat:"d/m/Y H:i",time_24hr:!0,clickOpens:!0,onChange:function(e,t,l){a.enable_apply=!0,a.wrong_date=a.flat_begin_date.selectedDates[0].getTime()>a.flat_end_date.selectedDates[0].getTime(),a.wrong_min_interval=a.min_time_interval_id&&a.get_utc_seconds(a.flat_end_date.selectedDates[0].getTime()-a.flat_begin_date.selectedDates[0].getTime()<b.get_timeframe_from_timeframe_id(a.min_time_interval_id))}});this.flat_begin_date=l("begin-date"),this.flat_end_date=l("end-date"),C.on_event_change(this.$props.id,ntopng_events.EPOCH_CHANGE,(e=>this.on_status_updated(e)),!0),ntopng_sync.ready(this.$props.id),this.enable_refresh&&this.start_refresh()},methods:{start_refresh:function(){this.refresh_interval=setInterval((()=>{let e=this.selected_time_option?.value;this.enable_refresh&&null!=e&&"custom"!=e&&(this.update_from_interval=!0,this.change_select_time(!0))}),1e3*this.refresh_interval_seconds)},utc_s_to_server_date:function(e){let t=1e3*e,a=new Date(t).getTimezoneOffset(),l=moment.tz(t,ntop_zoneinfo)._offset;return new Date(t+1e3*(l+a)*60)},server_date_to_date:function(e,t){let a=e.getTime(),l=e.getTimezoneOffset(),n=moment.tz(a,ntop_zoneinfo)._offset;return new Date(a-1e3*(n+l)*60)},on_status_updated:function(e){let t=Date.now(),a=t-18e5;null!=e.epoch_end&&null!=e.epoch_begin&&Number.parseInt(e.epoch_end)>Number.parseInt(e.epoch_begin)?(e.epoch_begin=Number.parseInt(e.epoch_begin),e.epoch_end=Number.parseInt(e.epoch_end),t=1e3*e.epoch_end,a=1e3*e.epoch_begin):(e.epoch_end=this.get_utc_seconds(t),e.epoch_begin=this.get_utc_seconds(a),x.add_obj_to_url(e),this.emit_epoch_change(e,this.$props.id)),this.flat_begin_date.setDate(this.utc_s_to_server_date(e.epoch_begin)),this.flat_end_date.setDate(this.utc_s_to_server_date(e.epoch_end)),this.set_select_time_value(a,t),this.epoch_status={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end},0==this.update_from_interval&&this.add_status_in_history(this.epoch_status),this.enable_apply=!1,this.update_from_interval=!1,x.add_obj_to_url(this.epoch_status)},set_select_time_value:function(e,t){const a=this.get_timeframes_available();let l=this.get_utc_seconds(Date.now());1==this.round_time&&null!=this.min_time_interval_id&&(l=this.round_time_by_min_interval(l));const n=this.get_utc_seconds(t),s=this.get_utc_seconds(e);if(this.is_between(n,l,60)){this.select_time_value=null;for(let e in a)this.is_between(s,l-a[e],60)&&(this.select_time_value=e);null==this.select_time_value&&(this.select_time_value="custom")}else this.select_time_value="custom";this.time_preset_list_filtered.forEach((e=>{e.currently_active=!1,e.value==this.select_time_value&&(this.selected_time_option=e,e.currently_active=!0)}))},apply:function(){let e=this.get_utc_seconds(Date.now()),t=this.server_date_to_date(this.flat_begin_date.selectedDates[0]),a=this.get_utc_seconds(t.getTime()),l=this.server_date_to_date(this.flat_end_date.selectedDates[0]),n=this.get_utc_seconds(l.getTime());n>e&&(n=e);let s={epoch_begin:a,epoch_end:n};this.emit_epoch_change(s)},change_select_time:function(e){let t=this.get_timeframes_available()[this.selected_time_option.value],a=this.get_utc_seconds(Date.now()),l={epoch_begin:a-t,epoch_end:a,refresh_data:e};this.emit_epoch_change(l)},get_timeframes_available:function(){const e=b.get_timeframes_dict(),t=this.time_preset_list.map((e=>e.value));let a={};return t.forEach((t=>{a[t]=e[t]})),a},get_utc_seconds:function(e){return b.get_utc_seconds(e)},is_between:function(e,t,a){return e>=t-a&&e<=t},zoom:function(e){if(null==this.epoch_status)return;let t=(this.epoch_status.epoch_end-this.epoch_status.epoch_begin)/e,a=this.epoch_status.epoch_end/2+this.epoch_status.epoch_begin/2;this.epoch_status.epoch_begin=a-t/2,this.epoch_status.epoch_end=a+t/2;let l=this.get_utc_seconds(Date.now());this.epoch_status.epoch_end>l&&(this.epoch_status.epoch_end=l),this.epoch_status.epoch_end=Number.parseInt(this.epoch_status.epoch_end),this.epoch_status.epoch_begin=Number.parseInt(this.epoch_status.epoch_begin),this.epoch_status.epoch_begin==this.epoch_status.epoch_end&&(this.epoch_status.epoch_begin-=2),this.emit_epoch_change(this.epoch_status)},jump_time_back:function(){if(null==this.epoch_status)return;this.epoch_status.epoch_begin-=1800,this.epoch_status.epoch_end-=1800,this.emit_epoch_change(this.epoch_status)},jump_time_ahead:function(){if(null==this.epoch_status)return;let e=this.epoch_status.epoch_end,t=this.get_utc_seconds(Date.now());this.epoch_status.epoch_end+=1800,this.epoch_status.epoch_end>t&&(this.epoch_status.epoch_end=t),this.epoch_status.epoch_begin+=this.epoch_status.epoch_end-e,this.emit_epoch_change(this.epoch_status)},emit_epoch_change:function(e,t,a){null!=e.epoch_end&&null!=e.epoch_begin&&(this.wrong_date=!1,e.epoch_begin>e.epoch_end?this.wrong_date=!0:(this.min_time_interval_id&&1==this.round_time&&(e.epoch_begin=this.round_time_by_min_interval(e.epoch_begin),e.epoch_end=this.round_time_by_min_interval(e.epoch_end)),t!=this.id&&this.on_status_updated(e),C.emit_event(ntopng_events.EPOCH_CHANGE,e,this.id),a||this.$emit("epoch_change",e)))},round_time_by_min_interval:function(e){return b.round_time_by_timeframe_id(e,this.min_time_interval_id)},add_status_in_history:function(e){this.history_last_status=this.history[this.history.length-1],this.history.length>5&&this.history.shift(),this.history.push(e)},apply_status_by_history:function(){null!=this.history_last_status&&(this.history.pop(),this.history.pop(),this.emit_epoch_change(this.history_last_status))}},data:()=>({i18n:e=>i18n(e),epoch_status:null,refresh_interval:null,refresh_interval_seconds:60,update_from_interval:!1,history:[],history_last_status:null,enable_apply:!1,select_time_value:"5_min",selected_time_option:{value:"5_min",label:i18n("show_alerts.presets.5_min"),currently_active:!1},wrong_date:!1,wrong_min_interval:!1,flat_begin_date:null,flat_end_date:null,time_preset_list:[{value:"5_min",label:i18n("show_alerts.presets.5_min"),currently_active:!1},{value:"10_min",label:i18n("show_alerts.presets.10_min"),currently_active:!1},{value:"30_min",label:i18n("show_alerts.presets.30_min"),currently_active:!0},{value:"hour",label:i18n("show_alerts.presets.hour"),currently_active:!1},{value:"2_hours",label:i18n("show_alerts.presets.2_hours"),currently_active:!1},{value:"6_hours",label:i18n("show_alerts.presets.6_hours"),currently_active:!1},{value:"12_hours",label:i18n("show_alerts.presets.12_hours"),currently_active:!1},{value:"day",label:i18n("show_alerts.presets.day"),currently_active:!1},{value:"week",label:i18n("show_alerts.presets.week"),currently_active:!1},{value:"month",label:i18n("show_alerts.presets.month"),currently_active:!1},{value:"year",label:i18n("show_alerts.presets.year"),currently_active:!1},{value:"custom",label:i18n("show_alerts.presets.custom"),currently_active:!1,disabled:!0}],time_preset_list_filtered:[]})};const T_=e=>(pl("data-v-6ae24a28"),e=e(),fl(),e),P_={class:"input-group"},U_={class:"form-group"},I_={class:"controls"},O_={class:"btn-group me-auto btn-group-sm flex-wrap d-flex"},M_={class:"btn-group ms-2"},j_=T_((()=>Vs("span",{class:"input-group-text"},[Vs("i",{class:"fas fa-calendar-alt"})],-1))),L_=["disabled"],F_=T_((()=>Vs("span",{class:"input-group-text"},[Vs("i",{class:"fas fa-long-arrow-alt-right"})],-1))),R_=["disabled"],D_=["title"],z_=[T_((()=>Vs("i",{class:"fas fa-exclamation-circle"},null,-1)))],q_={class:"d-flex align-items-center ms-2"},B_=["disabled"],V_={class:"btn-group"},H_=["disabled","title"],G_=[T_((()=>Vs("i",{class:"fas fa-long-arrow-alt-left"},null,-1)))],W_=["disabled","title"],K_=[T_((()=>Vs("i",{class:"fas fa-long-arrow-alt-right"},null,-1)))],J_=["disabled","title"],Y_=[T_((()=>Vs("i",{class:"fas fa-search-plus"},null,-1)))],Z_=["disabled","title"],X_=[T_((()=>Vs("i",{class:"fas fa-search-minus"},null,-1)))],Q_=["disabled","title"],ep=[T_((()=>Vs("i",{class:"fas fa-undo"},null,-1)))],tp=["disabled","title"],ap=[T_((()=>Vs("i",{class:"fas fa-sync"},null,-1)))];function lp(e,t){void 0===t&&(t={});var a=t.insertAt;if(e&&"undefined"!=typeof document){var l=document.head||document.getElementsByTagName("head")[0],n=document.createElement("style");n.type="text/css","top"===a&&l.firstChild?l.insertBefore(n,l.firstChild):l.appendChild(n),n.styleSheet?n.styleSheet.cssText=e:n.appendChild(document.createTextNode(e))}}lp("\n.date_time_input[data-v-6ae24a28] {\n    width: 10.5rem;\n    max-width: 10.5rem;\n    min-width: 10.5rem;\n}\n"),E_.render=function(e,t,a,l,n,s){const o=kn("select-search");return Ps(),js("div",P_,[Vs("div",U_,[Vs("div",I_,[Vs("div",O_,[Pn(e.$slots,"begin"),Vs("div",null,[Hs(o,{disabled:a.disabled_date_picker,selected_option:n.selected_time_option,"onUpdate:selected_option":t[0]||(t[0]=e=>n.selected_time_option=e),id:"time_preset_range_picker",options:n.time_preset_list_filtered,onSelect_option:t[1]||(t[1]=e=>s.change_select_time(null))},null,8,["disabled","selected_option","options"])]),Vs("div",M_,[j_,Vs("input",{disabled:a.disabled_date_picker,class:"flatpickr flatpickr-input form-control",type:"text",placeholder:"Choose a date..","data-id":"datetime",ref:"begin-date",style:{width:"10rem"}},null,8,L_),Ys(' <input ref="begin-date" @change="enable_apply=true" @change="change_begin_date" type="date" class="date_time_input begin-timepicker form-control border-right-0 fix-safari-input"> '),Ys(' <input ref="begin-time" @change="enable_apply=true" type="time" class="date_time_input begin-timepicker form-control border-right-0 fix-safari-input"> '),F_,Vs("input",{disabled:a.disabled_date_picker,class:"flatpickr flatpickr-input form-control",type:"text",placeholder:"Choose a date..","data-id":"datetime",ref:"end-date",style:{width:"10rem"}},null,8,R_),Ys(' <input ref="end-date" @change="enable_apply=true" type="date" class="date_time_input end-timepicker form-control border-left-0 fix-safari-input" style="width: 2.5rem;"> '),Ys(' <input ref="end-time" @change="enable_apply=true" type="time" class="date_time_input end-timepicker form-control border-left-0 fix-safari-input"> '),wn(Vs("span",{title:s.invalid_date_message,style:{"margin-left":"0.2rem",color:"red"}},z_,8,D_),[[Yi,n.wrong_date||n.wrong_min_interval]])]),Vs("div",q_,[Vs("button",{disabled:!n.enable_apply||n.wrong_date||n.wrong_min_interval,onClick:t[2]||(t[2]=(...e)=>s.apply&&s.apply(...e)),type:"button",class:"btn btn-sm btn-primary"},te(n.i18n("apply")),9,B_),Vs("div",V_,[Vs("button",{disabled:a.disabled_date_picker,onClick:t[3]||(t[3]=e=>s.jump_time_back()),type:"button",class:"btn btn-sm btn-link",ref:"btn-jump-time-back",title:n.i18n("date_time_range_picker.btn_move_left")},G_,8,H_),Vs("button",{disabled:a.disabled_date_picker,onClick:t[4]||(t[4]=e=>s.jump_time_ahead()),type:"button",class:"btn btn-sm btn-link me-2",ref:"btn-jump-time-ahead",title:n.i18n("date_time_range_picker.btn_move_right")},K_,8,W_),Vs("button",{disabled:a.disabled_date_picker,onClick:t[5]||(t[5]=e=>s.zoom(2)),type:"button",class:"btn btn-sm btn-link",ref:"btn-zoom-in",title:n.i18n("date_time_range_picker.btn_zoom_in")},Y_,8,J_),Vs("button",{disabled:a.disabled_date_picker,onClick:t[6]||(t[6]=e=>s.zoom(.5)),type:"button",class:"btn btn-sm btn-link",ref:"btn-zoom-out",title:n.i18n("date_time_range_picker.btn_zoom_out")},X_,8,Z_),Vs("button",{disabled:null==n.history_last_status||a.disabled_date_picker,type:"button",onClick:t[7]||(t[7]=e=>s.apply_status_by_history()),class:"btn btn-sm btn-link",title:n.i18n("date_time_range_picker.btn_undo")},ep,8,Q_),Vs("button",{disabled:"custom"==n.select_time_value||a.disabled_date_picker,onClick:t[8]||(t[8]=e=>s.change_select_time()),type:"button",class:"btn btn-sm btn-link",title:n.i18n("date_time_range_picker.btn_refresh")},ap,8,tp),Pn(e.$slots,"extra_buttons")])])])])])])},E_.__scopeId="data-v-6ae24a28",E_.__file="http_src/vue/date-time-range-picker.vue";var np=Jl({components:{},props:{id:String},emits:["hidden","showed","closeModal","openModal"],created(){},data:()=>({}),mounted(){let e=this;$(this.$refs.modal_id).on("shown.bs.modal",(function(t){e.$emit("showed")})),$(this.$refs.modal_id).on("hidden.bs.modal",(function(t){e.$emit("hidden")})),ntopng_sync.ready(this.$props.id)},methods:{show:function(){$(this.$refs.modal_id).modal("show"),this.$emit("openModal")},preventEnter:function(){},close:function(){$(this.$refs.modal_id).modal("hide"),this.$emit("closeModal")}}});const sp={class:"modal-dialog modal-dialog-centered modal-lg",role:"document"},op={class:"modal-content"},ip={class:"modal-header"},rp={class:"modal-title"},cp=Vs("div",{class:"modal-close"},[Vs("button",{type:"button",class:"btn-close","data-bs-dismiss":"modal","aria-label":"Close"})],-1),up={class:"modal-body"},dp={class:"modal-footer"},_p=Vs("div",{class:"mr-auto"},null,-1),pp=Vs("div",{class:"alert alert-info test-feedback w-100",style:{display:"none"}},null,-1);np.render=function(e,t,a,l,n,s){return Ps(),js("div",{onSubmit:t[0]||(t[0]=Wi(((...t)=>e.preventEnter&&e.preventEnter(...t)),["prevent"])),class:"modal fade",ref:"modal_id",tabindex:"-1",role:"dialog","aria-labelledby":"dt-add-filter-modal-title","aria-hidden":"true"},[Vs("div",sp,[Vs("div",op,[Vs("div",ip,[Vs("h5",rp,[Pn(e.$slots,"title")]),cp]),Vs("div",up,[Pn(e.$slots,"body")]),Vs("div",dp,[_p,Pn(e.$slots,"footer"),pp])])])],544)},np.__file="http_src/vue/modal.vue";const fp={ipv4:String.raw`^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$`,ipv6:String.raw`^(?:(?:[a-fA-F\d]{1,4}:){7}(?:[a-fA-F\d]{1,4}|:)|(?:[a-fA-F\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|:[a-fA-F\d]{1,4}|:)|(?:[a-fA-F\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,2}|:)|(?:[a-fA-F\d]{1,4}:){4}(?:(?::[a-fA-F\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,3}|:)|(?:[a-fA-F\d]{1,4}:){3}(?:(?::[a-fA-F\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,4}|:)|(?:[a-fA-F\d]{1,4}:){2}(?:(?::[a-fA-F\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,5}|:)|(?:[a-fA-F\d]{1,4}:){1}(?:(?::[a-fA-F\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,6}|:)|(?::(?:(?::[a-fA-F\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,7}|:)))(?:%[0-9a-zA-Z]{1,})?$`,mac_address:String.raw`^([0-9A-Fa-f]{2}:){5}([0-9A-Fa-f]{2})$`,comma_separted_port_regex:String.raw`^(\d{1,5})(,\s*\d{1,5})*$`,port_range_regex:String.raw`^(\d{1,5})-(\d{1,5})$`,host_name:String.raw`^(?!\s*$)[a-zA-Z0-9._: \-\/]{1,250}|^[a-zA-Z0-9._: \-\/]{1,250}@[0-9]{0,5}`,singleword:String.raw`^(?=[a-zA-Z0-9._:\-]{3,253}$)(?!.*[_.:\-]{2})[^_.:\-].*[^_.:\-]$`},vp=e=>mp(e)||hp(e),mp=e=>new RegExp(fp.ipv4).test(e),hp=e=>new RegExp(fp.ipv6).test(e),gp=a;function bp(e){if("text"==e)return".*";if("vlan"==e){return String.raw`@(([1-9])|([1-9][0-9]{1,2})|([1-3][0-9]{3})|(40[0-8][0-9])|(409[0-5]))`}if("ip"==e||"cidr"==e){let t=bp("vlan"),a=gp.REGEXES.ipv4,l=a.replaceAll("$",`${t}$`),n=gp.REGEXES.ipv6,s=n.replaceAll("$",`${t}$`);if("cidr"==e){let e=String.raw`(\/(([1-9])|([1-2][0-9])|(3[0-2])))`,l=a.replaceAll("$",`${e}$`),s=a.replaceAll("$",`${e}${t}$`),o=String.raw`(\/(([1-9])|([1-9][0-9])|(1[0-1][0-9])|(12[0-8])))`;return`(${l}|${s}|${n.replaceAll("$",`${o}$`)}|${n.replaceAll("$",`${o}${t}$`)})`}return`(${a})|(${l})|(${n})|(${s})`}if("mac"==e)return gp.REGEXES.macAddress;if("ip,cidr"==e){return`(${bp("ip")})|(${bp("cidr")})`}return gp.REGEXES[e]}const yp={get_data_pattern:bp,validateIP:vp,validateIPv4:mp,validateIPv6:hp,validateHostName:e=>new RegExp(fp.host_name).test(e),validateCommaSeparatedPortList:e=>new RegExp(fp.comma_separted_port_regex).test(e),validatePortRange:e=>{const t=e.split("-",2),a=Number(t[0]),l=Number(t[1]);return!isNaN(a)&&!isNaN(l)&&(a>0&&a<l&&l<65536)},validateSingleWord:e=>new RegExp(fp.singleword).test(e)};var wp={components:{modal:np,"select-search":l_},props:{id:String,filters_options:Array},updated(){},data(){return{i18n:e=>i18n(e),jQuery:$,id_modal:`${this.$props.id}_modal`,filter_type_selected:{},filter_type_label_selected:null,operator_selected:{},option_selected:{},input_value:null,input_type:null,data_pattern_selected:null,input_required:!1,options_to_show:null,operators_to_show:[]}},emits:["apply"],created(){},async mounted(){await ntopng_sync.on_ready(this.id_modal),ntopng_events_manager.on_custom_event(this.$props.id,ntopng_custom_events.SHOW_MODAL_FILTERS,(e=>this.show(e))),ntopng_sync.ready(this.$props.id)},methods:{show:function(e){null!=this.$props.filters_options&&0!=this.$props.filters_options.length&&(null!=e?(this.filter_type_selected=e,this.change_filter(e)):(this.filter_type_selected=this.$props.filters_options[0],this.change_filter()),this.$refs.modal.show())},post_change:function(e,t){e.id&&this.$props.filters_options&&(this.filter_type_selected=this.$props.filters_options.find((t=>t.id==e.id))),null!=e.value&&(this.options_to_show?this.option_selected=this.options_to_show.find((t=>t.value==e.value)):(this.option_selected={},this.input_value=e.value,this.data_pattern_selected=this.get_data_pattern(t))),e.operator&&this.operators_to_show&&(this.operator_selected=this.operators_to_show.find((t=>t.id==e.operator)))},change_operator_type:function(e){this.operator_selected=e},change_data_filter:function(e){this.option_selected=e},change_input_value:function(e){this.input_value=e},change_filter:function(e){this.options_to_show=null,this.option_selected=null,this.input_value=null;let t=this.$props.filters_options.find((e=>e.id==this.filter_type_selected.id));null!=t&&(this.input_type=t.type,this.operators_to_show=t.operators,this.filter_type_label_selected=t.label,"select"==this.input_type?(this.options_to_show=t.options.sort(((e,t)=>null==e||null==e.label?-1:null==t||null==t.label?1:e.label.toString().localeCompare(t.label.toString()))),this.option_selected=this.options_to_show[0]):"select-with-input"==this.input_type?(this.options_to_show=t.options?.sort(((e,t)=>null==e||null==e.label?-1:null==t||null==t.label?1:e.label.toString().localeCompare(t.label.toString()))),this.option_selected=this.options_to_show[0],this.data_pattern_selected=this.get_data_pattern(t.value_type)):(this.options_to_show=null,this.data_pattern_selected=this.get_data_pattern(t.value_type)),t.operators&&null==this.operator_selected?.id&&(this.operator_selected=t.operators[0]),null!=e&&this.post_change(e,t.value_type))},get_data_pattern:function(e){return this.input_required=!0,"text"==e?(this.input_required=!1,".*"):yp.get_data_pattern(e)},check_disable_apply:function(){let e=new RegExp(this.data_pattern_selected);return!this.options_to_show&&(this.input_required&&(null==this.input_value||""==this.input_value)||0==e.test(this.input_value))},apply:function(){let e=this.input_value,t=this.input_value;if(null==e||null!=this.option_selected?.value){let a=this.filters_options.find((e=>e.id==this.filter_type_selected.id)),l=a.options.find((e=>e.value==this.option_selected.value));null==l&&(l=this.option_selected),e=l.value,t=l.value_label||l.label}let a={id:this.filter_type_selected.id,label:this.filter_type_label_selected,operator:this.operator_selected.id,value:e,value_label:t};this.$emit("apply",a),ntopng_events_manager.emit_custom_event(ntopng_custom_events.MODAL_FILTERS_APPLY,a),this.close()},close:function(){this.$refs.modal.close()}}};const xp=e=>(pl("data-v-3119c83e"),e=e(),fl(),e),kp={autocomplete:"off"},$p={class:"form-group row"},Sp=xp((()=>Vs("label",{class:"col-form-label col-sm-3",for:"dt-filter-type-select"},[Vs("b",null,"Filter")],-1))),Np={class:"col-sm-8"},Cp=xp((()=>Vs("hr",null,null,-1))),Ap={class:"dt-filter-template-container form-group row"},Ep={class:"col-form-label col-sm-3"},Tp={class:"col-sm-8"},Pp={class:"input-group mb-3"},Up={class:"input-group-prepend col-sm-3"},Ip={key:0,class:"col-sm-9"},Op={key:1,class:"col-sm-9"},Mp=["pattern","required"],jp={style:{margin:"0px",padding:"0"},class:"alert invalid-feedback"},Lp=["disabled"];lp("\ninput ~ .alert[data-v-3119c83e] {\n  display: none;\n}\ninput:invalid ~ .alert[data-v-3119c83e] {\n  display: block;\n}\n"),wp.render=function(e,t,a,l,n,s){const o=kn("select-search"),i=kn("modal");return Ps(),Ls(i,{id:n.id_modal,ref:"modal"},{title:ml((()=>[Ks(te(n.i18n("alerts_dashboard.add_filter")),1)])),body:ml((()=>[Vs("form",kp,[Vs("div",$p,[Sp,Vs("div",Np,[Hs(o,{selected_option:n.filter_type_selected,"onUpdate:selected_option":t[0]||(t[0]=e=>n.filter_type_selected=e),id:"filter_type",options:a.filters_options,onSelect_option:t[1]||(t[1]=e=>s.change_filter())},null,8,["selected_option","options"])])]),Cp,Vs("div",Ap,[Vs("label",Ep,[Vs("b",null,te(n.filter_type_label_selected),1)]),Vs("div",Tp,[Vs("div",Pp,[Vs("div",Up,[Hs(o,{selected_option:n.operator_selected,"onUpdate:selected_option":t[2]||(t[2]=e=>n.operator_selected=e),id:"operator_filter",options:n.operators_to_show,onSelect_option:s.change_operator_type},null,8,["selected_option","options","onSelect_option"])]),"select"==n.input_type?(Ps(),js("div",Ip,[Hs(o,{selected_option:n.option_selected,"onUpdate:selected_option":t[3]||(t[3]=e=>n.option_selected=e),id:"data_filter",options:n.options_to_show,onSelect_option:s.change_data_filter},null,8,["selected_option","options","onSelect_option"])])):"select-with-input"==n.input_type?(Ps(),js("div",Op,[Hs(o,{selected_option:n.option_selected,"onUpdate:selected_option":t[4]||(t[4]=e=>n.option_selected=e),id:"data_filter",add_tag:!0,pattern:n.data_pattern_selected,options:n.options_to_show,onSelect_option:s.change_data_filter},null,8,["selected_option","pattern","options","onSelect_option"])])):(Ps(),js(Ss,{key:2},[wn(Vs("input",{"onUpdate:modelValue":t[5]||(t[5]=e=>n.input_value=e),pattern:n.data_pattern_selected,name:"value",required:n.input_required,type:"text",class:"form-control"},null,8,Mp),[[Mi,n.input_value]]),Vs("span",jp,te(n.i18n("invalid_value")),1)],64))]),Ys(" end div input-group mb-3 ")]),Ys(" end div form-group-row ")])])])),footer:ml((()=>[Vs("button",{type:"button",disabled:s.check_disable_apply(),onClick:t[6]||(t[6]=(...e)=>s.apply&&s.apply(...e)),class:"btn btn-primary"},te(n.i18n("apply")),9,Lp)])),_:1},8,["id"])},wp.__scopeId="data-v-3119c83e",wp.__file="http_src/vue/modal-filters.vue";let Fp,Rp,Dp,zp,qp=[],Bp=null!=window.location.toString().match(/alert_stats.lua/),Vp=ntopng_url_manager.get_url_entry("status");null!=Vp&&""!=Vp||(Vp="historical");let Hp=function(e){let t=ntopng_url_manager.get_url_entry("page");return null==t&&(t=e?"all":"overview"),t}(Bp);const Gp=async function(){qp=await async function(e,t){let a,l=ntopng_url_manager.get_url_entry("query_preset");if(null==l&&(l=""),e)a=`${http_prefix}/lua/rest/v2/get/alert/filter/consts.lua?page=${t}&query_preset=${l}`;else{let e=ntopng_url_manager.get_url_entry("aggregated");a=`${http_prefix}/lua/pro/rest/v2/get/db/filter/consts.lua?page=${t}&query_preset=${l}&aggregated=${e}`}return await ntopng_utility.http_request(a)}(Bp,Hp),qp.filter((e=>null==e.label)).forEach((e=>{console.error(`label not defined for filter ${JSON.stringify(e)}`),e.label=""})),qp.sort(((e,t)=>e.label.localeCompare(t.label))),i18n_ext.tags={},Fp={},Rp={},qp.forEach((e=>{i18n_ext.tags[e.id]=e.label,e.operators.forEach((e=>Fp[e.id]=e.label)),Rp[e.id]=e.operators.map((e=>e.id))}));let e=ntopng_url_manager.get_url_entries(),t=[];for(const[a,l]of e){let e=qp.find((e=>e.id==a));if(null!=e){l.split(",").forEach((a=>{let[l,n]=a.split(";");if(null==n||null==l||""==n||null!=e.options&&null==e.options.find((e=>e.value==l)))return;let s=l;"array"==e.value_type&&(s=e?.options?.find((e=>e.value==l))?.label),t.push({id:e.id,operator:n,value:l,label:e.label,value_label:s})}))}}return t};var Wp={props:{id:String,min_time_interval_id:String,round_time:Boolean},components:{"date-time-range-picker":E_,"modal-filters":wp},created(){},async mounted(){let e=ntopng_sync.on_ready(this.id_data_time_range_picker);if(ntopng_sync.on_ready(this.id_modal_filters),await e,"all"!=this.page){let e=await Gp();zp=function(e){const t=new Tagify(e.$refs.tagify,{duplicates:!0,delimiters:null,dropdown:{enabled:1,classname:"extra-properties"},autoComplete:{enabled:!1},templates:{tag:function(e){try{return`<tag title='${e.value}' contenteditable='false' spellcheck="false" class='tagify__tag'>\n                        <x title='remove tag' class='tagify__tag__removeBtn'></x>\n                        <div>\n                           <b>${e.label?e.label:e.key}</b>&nbsp;\n                           <b class='operator'>${e.selectedOperator?Fp[e.selectedOperator]:"="}</b>&nbsp;\n                            <span class='tagify__tag-text'>${e.value}</span>\n                        </div>\n                    </tag>`}catch(e){console.error(`An error occured when creating a new tag: ${e}`)}}},validate:function(e){return void 0!==e.key&&void 0!==e.selectedOperator&&void 0!==e.value}});$(document).ready((function(){t.addTags(Dp)}));const a=async function(e){"number"==typeof e.realValue&&(e.realValue=""+e.realValue),"number"==typeof e.value&&(e.value=""+e.value);let a=t.getTagElms().find((t=>t.getAttribute("key")===e.key&&t.getAttribute("realValue")===e.realValue));void 0===t.tagData(a)&&(Rp[e.key]&&!Array.isArray(Rp[e.key])&&(e.operators=Rp[e.key].operators),e.selectedOperator||(e.selectedOperator="eq"),t.addTags([e]))};return t.on("remove",(async function(e){const t=e.detail.data.key,a=e.detail.data.realValue,l=ntopng_status_manager.get_status();if(void 0===t)return;if(null==l.filters)return;const n=l.filters.filter((e=>e.id!=t||e.id==t&&e.value!=a));ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:n})})),t.on("add",(async function(e){const a=e.detail;if(void 0===a.data)return;return a.data.key?void 0:(t.removeTags([e.detail.tag]),e.preventDefault(),void e.stopPropagation())})),t.on("click",(async function(t){const a=t.detail;if(void 0===a.data)return;if(void 0===a.data.key)return;const l=a.data;e.edit_tag=l,ntopng_events_manager.emit_custom_event(ntopng_custom_events.SHOW_MODAL_FILTERS,{id:l.key,operator:l.selectedOperator,value:l.realValue})})),t.on("edit:updated",(async function(e){console.warn("UPDATED")})),$("tags").on("change","select.operator",(async function(e){console.warn("TAGS change")})),{tagify:t,addFilterTag:a}}(this),ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:e}),ntopng_events_manager.on_event_change(this.$props.id,ntopng_events.FILTERS_CHANGE,(e=>this.reload_status(e)),!0)}this.modal_data=qp,ntopng_sync.ready(this.$props.id)},data(){return{i18n:i18n,id_modal_filters:`${this.$props.id}_modal_filters`,id_data_time_range_picker:`${this.$props.id}_date-time-range-picker`,show_filters:!1,edit_tag:null,is_alert_stats_url:Bp,status_view:Vp,page:Hp,modal_data:[],last_filters:[]}},methods:{is_filter_defined:function(e){return null!=Rp[e.id]},update_status_view:function(e){ntopng_url_manager.set_key_to_url("status",e),ntopng_url_manager.reload_url()},show_modal_filters:function(){this.$refs.modal_filters.show()},remove_filters:function(){ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:[]})},reload_status:function(e){let t=e.filters;if(null==t)return;ntopng_url_manager.delete_params(qp.map((e=>e.id))),zp.tagify.removeAllTags();let a=Xd.get_filters_object(t);ntopng_url_manager.add_obj_to_url(a),t.forEach((e=>{let t=function(e){let t=qp.find((t=>t.id==e.id));null==t&&console.error("create_tag_from_filter: filter const not found;");let a=e.value;if(null!=t.options){let l=t.options.find((t=>t.value==e.value));null!=l&&(a=l.label)}const l={label:t.label,key:t.id,value:a,realValue:e.value,title:`${t.label}${e.operator}${a}`,selectedOperator:e.operator};return""==l.value&&(l.value="''"),null==l.realValue||null==l.selectedOperator||""==l.selectedOperator?null:l}(e);null!=t&&zp.addFilterTag(t)})),this.last_filters=t},apply_modal:function(e){let t=ntopng_status_manager.get_status().filters;null==t&&(t=[]),null!=this.edit_tag&&(t=t.filter((e=>e.id!=this.edit_tag.key||e.value!=this.edit_tag.realValue)),this.edit_tag=null),t.push(e),ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:t})}}};const Kp=e=>(pl("data-v-aaee59ea"),e=e(),fl(),e),Jp={style:{width:"100%"}},Yp={class:"mb-1"},Zp={key:0,style:{"margin-right":"0.1rem"},class:"d-flex align-items-center me-2"},Xp={class:"btn-group",id:"statusSwitch",role:"group"},Qp=[Kp((()=>Vs("i",{class:"fa-solid fa-hourglass-half",title:"Engaged"},null,-1)))],ef=[Kp((()=>Vs("i",{class:"fa-regular fa-eye",title:"Require Attention"},null,-1)))],tf=[Kp((()=>Vs("i",{class:"fa-solid fa-inbox",title:"All"},null,-1)))],af={key:0,class:"d-flex mt-1",style:{width:"100%"}},lf=["placeholder"],nf=[Kp((()=>Vs("span",null,[Vs("i",{class:"fas fa-plus","data-original-title":"",title:"Add Filter"})],-1)))],sf=[Kp((()=>Vs("i",{class:"fas fa-times"},null,-1)))];lp("\n.tagify__input[data-v-aaee59ea] {\n    min-width: 175px;\n}\n.tagify__tag[data-v-aaee59ea] {\n    white-space: nowrap;\n    margin: 3px 0px 5px 5px;\n}\n.tagify__tag select.operator[data-v-aaee59ea] {\n    margin: 0px 4px;\n    border: 1px solid #c4c4c4;\n    border-radius: 4px;\n}\n.tagify__tag b.operator[data-v-aaee59ea] {\n    margin: 0px 4px;\n    background-color: white;\n    border: 1px solid #c4c4c4;\n    border-radius: 4px;\n    padding: 0.05em 0.2em;\n}\n.tagify__tag>div[data-v-aaee59ea] {\n    display: flex;\n    align-items: center;\n}\n"),Wp.render=function(e,t,a,l,n,s){const o=kn("modal-filters"),i=kn("date-time-range-picker");return Ps(),js("div",Jp,[Vs("div",Yp,[Hs(o,{filters_options:n.modal_data,onApply:s.apply_modal,ref:"modal_filters",id:n.id_modal_filters},null,8,["filters_options","onApply","id"]),Hs(i,{id:n.id_data_time_range_picker,min_time_interval_id:a.min_time_interval_id,round_time:a.round_time},{begin:ml((()=>[n.is_alert_stats_url?(Ps(),js("div",Zp,[Vs("div",Xp,["flow"!=n.page?(Ps(),js("a",{key:0,href:"#",onClick:t[0]||(t[0]=e=>s.update_status_view("engaged")),class:K(["btn btn-sm",{active:"engaged"==n.status_view,"btn-seconday":"engaged"!=n.status_view,"btn-primary":"engaged"==n.status_view}])},Qp,2)):Ys("v-if",!0),Vs("a",{href:"#",onClick:t[1]||(t[1]=e=>s.update_status_view("historical")),class:K(["btn btn-sm",{active:"historical"==n.status_view||"flow"==n.page&&"engaged"==n.status_view,"btn-seconday":"historical"!=n.status_view,"btn-primary":"historical"==n.status_view||"flow"==n.page&&"engaged"==n.status_view}])},ef,2),Ys(" <a href=\"#\" @click=\"update_status_view('acknowledged')\" class=\"btn btn-sm\"\n                                :class=\"{ 'active': status_view == 'acknowledged', 'btn-seconday': status_view != 'acknowledged', 'btn-primary': status_view == 'acknowledged' }\"><i class=\"fa-solid fa-check-double\" title=\"Acknowledged\"></i></a>"),Vs("a",{href:"#",onClick:t[2]||(t[2]=e=>s.update_status_view("any")),class:K(["btn btn-sm",{active:"any"==n.status_view,"btn-seconday":"any"!=n.status_view,"btn-primary":"any"==n.status_view}])},tf,2)])])):Ys("v-if",!0),Pn(e.$slots,"begin")])),extra_buttons:ml((()=>[Pn(e.$slots,"extra_range_buttons")])),_:3},8,["id","min_time_interval_id","round_time"])]),Ys(" tagify "),"all"!=n.page?(Ps(),js("div",af,[Vs("input",{class:"w-100 form-control h-auto",name:"tags",ref:"tagify",placeholder:n.i18n("show_alerts.filters")},null,8,lf),wn(Vs("button",{class:"btn btn-link","aria-controls":"flow-alerts-table",type:"button",id:"btn-add-alert-filter",onClick:t[3]||(t[3]=(...e)=>s.show_modal_filters&&s.show_modal_filters(...e))},nf,512),[[Yi,n.modal_data&&n.modal_data.length>0]]),wn(Vs("button",{"data-bs-toggle":"tooltip","data-placement":"bottom",title:"{{ i18n('show_alerts.remove_filters') }}",onClick:t[4]||(t[4]=(...e)=>s.remove_filters&&s.remove_filters(...e)),class:"btn ms-1 my-auto btn-sm btn-remove-tags"},sf,512),[[Yi,n.modal_data&&n.modal_data.length>0]])])):Ys("v-if",!0),Ys(" end tagify ")])},Wp.__scopeId="data-v-aaee59ea",Wp.__file="http_src/vue/range-picker.vue";const of={class:"row",style:{"margin-left":"-2px","margin-right":"-2px","margin-top":"1rem","margin-bottom":"-1rem"}},rf={class:"col-sm-12 col-md-5"},cf={class:"dataTables_info",role:"status","aria-live":"polite"},uf={class:"col-sm-12 col-md-7"},df={class:"dataTables_paginate paging_simple_numbers",style:{display:"flex","justify-content":"flex-end"}},_f={class:"pagination"},pf={class:"paginate_button page-item previous"},ff=["onClick"],vf={href:"javascript:void(0);","aria-controls":"default-datatable","data-dt-idx":"1",tabindex:"0",class:"page-link"},mf={class:"paginate_button page-item previous"};var hf={__name:"select_table_page",props:{total_rows:Number,per_page:Number},emits:["change_active_page"],setup(e,{expose:t,emit:a}){const l=e,n=va(0),s=va(0),o=va(0),i=va(0),r=va("");function c(){if(null==l.total_rows)return;let e=l.per_page;o.value=Number.parseInt((l.total_rows+e-1)/e),s.value=6,o.value<s.value&&(s.value=o.value),i.value>=o.value&&o.value>0&&(i.value=o.value-1,n.value=o.value-s.value,_(i.value)),p()}_n((()=>{c()})),Ml((()=>[l.total_rows,l.per_page]),((e,t)=>{c()}),{flush:"pre",immediate:!0});const u=xo((()=>!(o.value<6)&&i.value>=s.value-1)),d=xo((()=>!(o.value<6)&&i.value<o.value-s.value+1));function _(e,t){null!=e&&(i.value=e),null!=t&&(n.value=t),i.value==n.value&&n.value>0&&(n.value-=1);const l=n.value+s.value-1;i.value==l&&o.value-1>l&&(n.value+=1),i.value>o.value-1&&0!=o.value&&(i.value=o.value-1,n.value=i.value),p(),a("change_active_page",i.value)}function p(){r.value="Showing page %active_page of %total_pages: total %total_rows rows".replace("%active_page",f(`${i.value+1}`)).replace("%total_pages",f(`${o.value}`)).replace("%total_rows",f(`${l.total_rows}`)).replace("%per_page",f(`${l.per_page}`))}function f(e){return e.replace(/(.)(?=(\d{3})+$)/g,"$1,")}return t({change_active_page:_}),(e,t)=>(Ps(),js(Ss,null,[Ys(" PerPage "),Vs("div",of,[Ys(" div col-md-5 "),Vs("div",rf,[Vs("div",cf,te(r.value),1)]),Ys(" div col-md-5 "),Ys(" start div col-sm-12 "),wn(Vs("div",uf,[Vs("div",df,[Vs("ul",_f,[wn(Vs("li",pf,[Vs("a",{href:"javascript:void(0);",onClick:t[0]||(t[0]=e=>_(0,0)),"aria-controls":"default-datatable","data-dt-idx":"0",tabindex:"0",class:"page-link"}," « ")],512),[[Yi,ya(u)]]),Vs("li",{class:K(["paginate_button page-item previous",{disabled:0==i.value}])},[Vs("a",{href:"javascript:void(0);",onClick:t[1]||(t[1]=e=>{_(i.value-1)}),"aria-controls":"default-datatable","data-dt-idx":"0",tabindex:"0",class:"page-link"}," < ")],2),(Ps(!0),js(Ss,null,En(s.value,(e=>(Ps(),js("li",{onClick:t=>_(n.value+e-1),class:K([{active:i.value==n.value+e-1},"paginate_button page-item"])},[Vs("a",vf,te(n.value+e),1),Ys('  :key="total_rows"')],10,ff)))),256)),Vs("li",{class:K(["paginate_button page-item next",{disabled:i.value==o.value-1}]),id:"default-datatable_next"},[Vs("a",{href:"javascript:void(0);",onClick:t[2]||(t[2]=e=>{_(i.value+1)}),"aria-controls":"default-datatable","data-dt-idx":"7",tabindex:"0",class:"page-link"}," > ")],2),wn(Vs("li",mf,[Vs("a",{href:"javascript:void(0);",onClick:t[3]||(t[3]=e=>_(o.value-1,o.value-s.value)),"aria-controls":"default-datatable","data-dt-idx":"0",tabindex:"0",class:"page-link"}," » ")],512),[[Yi,ya(d)]])])])],512),[[Yi,o.value>0]]),Ys(" end div col-md-7 ")]),Ys(" PerPage ")],2112))},__file:"http_src/vue/select_table_page.vue"};const gf={class:"text-center"},bf={class:"sr-only position-absolute"};var yf={__name:"loading",props:{styles:String},setup(e,{expose:t}){const a=i18n("loading"),l=va(null);return t({hide_loading:function(e=500){$(l.value).fadeOut(e)},show_loading:function(e=500){$(l.value).fadeIn(e)}}),(t,n)=>(Ps(),js("div",{ref_key:"overlay",ref:l,class:"overlay centered-message"},[Vs("div",gf,[Vs("div",{class:"spinner-border text-primary mt-6",style:V(e.styles),role:"status"},[Vs("span",bf,te(ya(a)),1)],4)])],512))},__file:"http_src/vue/loading.vue"};const wf={class:"form-check form-switch ms-1",style:{"white-space":"nowrap"}},xf=["checked","title"],kf=["innerHTML"];var $f={__name:"switch",props:{value:Boolean,title:String,label:String},emits:["update:value","change_value"],setup(e,{emit:t}){const a=e,l=va(!1);return _n((()=>{l.value=a.value})),Ml((()=>a.value),((e,t)=>{l.value=a.value}),{flush:"pre"}),(a,n)=>(Ps(),js("div",wf,[Vs("input",{class:"form-check-input",style:{cursor:"pointer"},checked:1==l.value,onClick:n[0]||(n[0]=e=>(t("update:value",!l.value),void t("change_value",!l.value))),type:"checkbox",id:"toggle-Begin",title:e.title},null,8,xf),Vs("label",{class:"form-check-label",for:"toggle-Begin",innerHTML:e.label},null,8,kf)]))},__file:"http_src/vue/switch.vue"};const Sf=e=>(pl("data-v-61956e9e"),e=e(),fl(),e),Nf=["id"],Cf={class:"button-group mb-2"},Af={style:{float:"left","margin-top":"0.5rem"}},Ef=["value"],Tf=Sf((()=>Vs("div",{style:{"text-align":"right"},class:"form-group"},null,-1))),Pf={style:{"text-align":"right"},class:"form-group"},Uf={key:0,class:"d-inline"},If=[Sf((()=>Vs("i",{class:"fas fa-columns"},null,-1)))],Of=[Sf((()=>Vs("i",{class:"fas fa-refresh"},null,-1)))],Mf={key:1,class:"d-inline-block"},jf=Sf((()=>Vs("i",{class:"fas fa-eye"},null,-1))),Lf={class:"form-check form-switch ms-1"},Ff=["checked","onClick","id"],Rf=["for","innerHTML"],Df={key:0,class:"centered-message"},zf=["innerHTML"],qf=["data-resizable-columns-id"],Bf=["onClick","data-resizable-column-id"],Vf={style:{display:"flex"}},Hf=["innerHTML"],Gf={class:"fa fa-fw fa-sort-up"},Wf={class:"fa fa-fw fa-sort-down"},Kf={key:0,scope:"col",class:""},Jf=["innerHTML"],Yf={key:0,style:{},class:"",scope:"col"},Zf=[Sf((()=>Vs("div",{class:"wrap-column"},null,-1)))],Xf={key:1,class:"mt-2"},Qf={class:"text-end"},ev={style:{},class:"query text-end"},tv={class:"records"},av={class:"text-start"},lv={id:"historical_flows_table-query-time",style:{},class:"query"},nv={class:"seconds"},sv=["title"];var ov={__name:"table",props:{id:String,columns:Array,get_rows:Function,get_column_id:Function,print_column_name:Function,print_html_row:Function,print_vue_node_row:Function,f_is_column_sortable:Function,f_sort_rows:Function,f_get_column_classes:Function,f_get_column_style:Function,enable_search:Boolean,display_empty_rows:Boolean,show_autorefresh:Number,default_sort:Object,csrf:String,paging:Boolean,display_message:Boolean,message_to_display:String},emits:["custom_event","loaded","rows_loaded"],setup(e,{expose:t,emit:a}){const l=e,n={emit:a,h:Io,nextTick:Ja},s=e=>i18n(e);va(!0);const o=va(null),i=va(null),r=va(null);va([]);let c=0,u=[];const d=va([]),_=va([]),p=va(0),f=[10,20,40,50,80,100],v=va(10),m=window.store,h=va(""),g=va(null),y=va(!1),w=va(null),k=va(null),S=va(!1),N=va(!1),C=va(!1);_n((async()=>{null!=l.columns&&T()}));const A=xo((()=>{if(null==l.show_autorefresh||l.show_autorefresh<=0)return"";return s("table.autorefresh").replace("%time",l.show_autorefresh)}));function E(e){return null!=e&&null!=e.id?e.id:"toggle-Begin"}async function T(){await async function(){let e=await async function(){if(null==l.csrf)return{};const e={table_id:l.id},t=x.obj_to_url_params(e),a=`${http_prefix}/lua/rest/v2/get/tables/user_columns_config.lua?${t}`;let n=await b.http_request(a),s={};return n.forEach((e=>{s[e.id]=e})),s}(),t=!0;for(let a in e)t&=e[a]?.sort;d.value=l.columns.map(((a,n)=>{let s=[],o="";null!=l.f_get_column_classes&&(s=l.f_get_column_classes(a)),null!=l.f_get_column_style&&(o=l.f_get_column_style(a));let i=l.get_column_id(a),r=e[i],c=r?.sort;return c=1==t&&null==c&&null!=l.default_sort&&i==l.default_sort.column_id?l.default_sort.sort:r?.sort?r?.sort:0,{id:i,visible:null==r?.visible||1==r?.visible,sort:c,sortable:Y(a),order:r?.order||n,classes:s,style:o,data:a}})),await j()}(),await J(),M(),await Ja(),r.value.load_menu(),a("loaded")}let P;function U(){0!=C.value?P=setInterval((()=>{z()}),1e3*l.show_autorefresh):clearInterval(P)}async function I(){await async function(){O.value+=1,await Ja()}(),M()}Ml((()=>[l.id,l.columns]),((e,t)=>{T()}),{flush:"pre"});const O=va(0);function M(){let e={store:m,minWidth:32};$(i.value).resizableColumns(e)}async function j(){if(null==l.csrf)return;let e={table_id:l.id,visible_columns_ids:[],csrf:l.csrf};e.visible_columns_ids=d.value.map(((e,t)=>({id:e.id,visible:e.visible,order:e.order,sort:e.sort})));const t=`${http_prefix}/lua/rest/v2/add/tables/user_columns_config.lua`;await b.http_post_request(t,e)}async function L(){l.columns.forEach((e=>{let t=`${l.id}-${l.get_column_id(e)}`;m.remove(t)})),await I()}function F(){R.value+=1,z(0)}const R=va(0);const D=va(0);async function z(e){null!=e&&(c=e),null==c&&(c=0),1==l.paging||q?await J():Z(),D.value+=1}let q=!1,B=!1;async function H(e){q=!0,B=e||!1,B?g.value.change_active_page():g.value.change_active_page(0,0),await Ja(),q=!1,B=!1}let G,W=!0;async function J(){y.value=!B;let e=await l.get_rows(c,v.value,d.value,h.value,W);w.value=null,null!=e.query_info&&(w.value=e.query_info),W=!1,p.value=e.rows.length,1==l.paging&&(p.value=e.total_rows),u=e.rows,Z(),y.value=!1,a("rows_loaded",e)}function Y(e){return null==l.f_is_column_sortable||l.f_is_column_sortable(e)}function Z(){let e=0;if(0==l.paging&&(e=c*v.value),0==l.paging){let e=null!=l.f_sort_rows?l.f_sort_rows:(e,t,a)=>{let n=l.print_html_row(e.data,t),s=l.print_html_row(e.data,a);return 1==e.sort?n.localeCompare(s):s.localeCompare(n)},t=function(){let e=d.value.find((e=>0!=e.sort));return e}();u=u.sort(((a,l)=>e(t,a,l)))}_.value=u.slice(e,e+v.value)}async function X(){let e=1e3;null!=G?clearTimeout(G):e=0,G=setTimeout((async()=>{await J(),G=null}),e)}function Q(e){NtopUtils.copyToClipboard(w.value.query,k.value)}return t({load_table:T,refresh_table:H,get_columns_defs:function(){return d.value},get_rows_num:function(){return p.value},search_value:function(e){h.value=e,X()}}),(t,a)=>(Ps(),js(Ss,null,[Pn(t.$slots,"custom_header2"),Vs("div",{ref_key:"table_container",ref:o,id:e.id},[y.value?(Ps(),Ls(yf,{key:0})):Ys("v-if",!0),Vs("div",Cf,[Ys(" TableHeader "),Vs("div",Af,[Vs("label",null,[Ks(" Show "),wn(Vs("select",{"onUpdate:modelValue":a[0]||(a[0]=e=>v.value=e),onChange:F},[(Ps(),js(Ss,null,En(f,(e=>Vs("option",{value:e},te(e),9,Ef))),64))],544),[[Ri,v.value]]),Ks(" Entries ")])]),Tf,Vs("div",Pf,[Pn(t.$slots,"custom_header"),e.enable_search?(Ps(),js("div",Uf,[Vs("label",null,[Ks(te(s("search"))+": ",1),wn(Vs("input",{type:"search","onUpdate:modelValue":a[1]||(a[1]=e=>h.value=e),onInput:X,class:""},null,544),[[Mi,h.value]])])])):Ys("v-if",!0),Vs("button",{class:"btn btn-link me-1",type:"button",onClick:L},If),Vs("button",{class:"btn btn-link me-1",type:"button",onClick:a[2]||(a[2]=e=>H())},Of),e.show_autorefresh>0?(Ps(),js("div",Mf,[Hs($f,{value:C.value,"onUpdate:value":a[3]||(a[3]=e=>C.value=e),class:"me-2 mt-1",title:ya(A),style:{},onChange_value:U},null,8,["value","title"])])):Ys("v-if",!0),Hs(Rd,{id:e.id+"_dropdown",ref_key:"dropdown",ref:r},{title:ml((()=>[jf])),menu:ml((()=>[(Ps(!0),js(Ss,null,En(d.value,(t=>(Ps(),js("div",Lf,[Vs("input",{class:"form-check-input",style:{cursor:"pointer"},checked:1==t.visible,onClick:e=>async function(e){S.value=!0,e.visible=!e.visible,l.paging&&await J(),await I(),await j(),S.value=!1}(t),type:"checkbox",id:E(t)},null,8,Ff),Vs("label",{class:"form-check-label",for:E(t),innerHTML:e.print_column_name(t.data)},null,8,Rf)])))),256))])),_:1},8,["id"]),Ys(" Dropdown columns ")])]),Ys(" TableHeader "),(Ps(),js("div",{key:O.value,style:{overflow:"auto",width:"100%"}},[Ys(" Table "),1==e.display_message?(Ps(),js("div",Df,[Vs("span",{innerHTML:e.message_to_display},null,8,zf)])):Ys("v-if",!0),Vs("table",{ref_key:"table",ref:i,class:K(["table table-striped table-bordered ml-0 mr-0 mb-0 ntopng-table",[e.display_message||y.value?"ntopng-gray-out":""]]),"data-resizable":"true","data-resizable-columns-id":e.id},[Ys(" Table "),Vs("thead",null,[Vs("tr",null,[(Ps(!0),js(Ss,null,En(d.value,((t,a)=>(Ps(),js(Ss,null,[t.visible?(Ps(),js("th",{key:0,scope:"col",class:K({pointer:t.sortable,unset:!t.sortable}),style:{"white-space":"nowrap"},onClick:e=>async function(e,t){e.sortable&&(e.sort=(e.sort+1)%3,d.value.filter(((e,a)=>a!=t)).forEach((e=>e.sort=0)),0!=e.sort&&(l.paging?await J():Z(),await j()))}(t,a),"data-resizable-column-id":e.get_column_id(t.data)},[Vs("div",Vf,[Vs("span",{innerHTML:e.print_column_name(t.data),class:"wrap-column"},null,8,Hf),Ys(' <i v-show="col.sort == 0" class="fa fa-fw fa-sort"></i> '),wn(Vs("i",Gf,null,512),[[Yi,1==t.sort&&t.sortable]]),wn(Vs("i",Wf,null,512),[[Yi,2==t.sort&&t.sortable]])])],10,Bf)):Ys("v-if",!0)],64)))),256))])]),Vs("tbody",null,[S.value||N.value?Ys("v-if",!0):(Ps(!0),js(Ss,{key:0},En(_.value,(t=>(Ps(),js("tr",null,[(Ps(!0),js(Ss,null,En(d.value,((a,l)=>(Ps(),js(Ss,null,[a.visible?(Ps(),js("td",Kf,[null!=e.print_html_row&&null!=e.print_html_row(a.data,t,!0)?(Ps(),js("div",{key:0,class:K([a.classes,"wrap-column"]),style:V(a.style),innerHTML:e.print_html_row(a.data,t)},null,14,Jf)):Ys("v-if",!0),Vs("div",{style:V([a.style,{}]),class:K(["wrap-column margin-sm",a.classes])},[null!=e.print_vue_node_row&&null!=e.print_vue_node_row(a.data,t,n,!0)?(Ps(),Ls(Md,{key:t,content:e.print_vue_node_row(a.data,t,n)},null,8,["content"])):Ys("v-if",!0)],6)])):Ys("v-if",!0)],64)))),256))])))),256)),e.display_empty_rows&&_.value.length<v.value?(Ps(!0),js(Ss,{key:1},En(v.value-_.value.length,(e=>(Ps(),js("tr",null,[(Ps(!0),js(Ss,null,En(d.value,((e,t)=>(Ps(),js(Ss,null,[e.visible?(Ps(),js("td",Yf,Zf)):Ys("v-if",!0)],64)))),256))])))),256)):Ys("v-if",!0)])],10,qf),Ys(" Table ")])),Ys(" Table div"),Vs("div",null,[(Ps(),Ls(hf,{ref_key:"select_table_page",ref:g,key:R.value,total_rows:p.value,per_page:v.value,onChange_active_page:z},null,8,["total_rows","per_page"]))]),null!=w.value?(Ps(),js("div",Xf,[Vs("div",Qf,[Vs("small",ev,[Vs("span",tv,te(w.value.num_records_processed),1),Ks(".")])]),Vs("div",av,[Vs("small",lv,[Ks("Query performed in "),Vs("span",nv,te((w.value.query_duration_msec/1e3).toFixed(3)),1),Ks(" seconds. "),Vs("span",{id:"historical_flows_table-query",style:{cursor:"pointer"},class:"badge bg-secondary",title:w.value.query,onClick:Q,ref_key:"query_info_sql_button",ref:k},"SQL",8,sv)])])])):Ys("v-if",!0)],8,Nf)],64))}};lp("\n.sticky[data-v-61956e9e] {\n    position: sticky;\n    left: 0;\n    background-color: white;\n}\n.wrap-column[data-v-61956e9e] {\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow: hidden;\n    width: 100%;\n}\n.pointer[data-v-61956e9e] {\n    cursor: pointer;\n}\n.unset[data-v-61956e9e] {\n    cursor: unset;\n}\n.link-button[data-v-61956e9e] {\n    color: var(--bs-dropdown-link-color);\n    cursor: pointer;\n}\n.link-disabled[data-v-61956e9e] {\n    pointer-events: none;\n    color: #ccc;\n}\ntd[data-v-61956e9e] {\n    height: 2.5rem;\n}\n.margin-sm[data-v-61956e9e] {\n    margin-bottom: -0.25rem;\n    margin-top: -0.25rem;\n}\n"),ov.__scopeId="data-v-61956e9e",ov.__file="http_src/vue/table.vue";var iv={__name:"table-with-config",props:{table_config_id:String,table_id:String,csrf:String,f_map_config:Function,f_map_columns:Function,f_sort_rows:Function,get_extra_params_obj:Function,display_message:Boolean,message_to_display:String},emits:["custom_event","loaded","rows_loaded"],setup(e,{expose:t,emit:a}){const l=e,n=va({}),s=va(null),o=va(!1);_n((async()=>{null==l.table_id&&null==l.table_config_id||r()})),Ml((()=>[l.table_id,l.table_config_id]),((e,t)=>{r()}),{flush:"pre"});const i=xo((()=>null!=l.table_id?l.table_id:l.table_config_id));async function r(){o.value=!1,await Ja();let e=l.table_config_id;null==e&&(e=l.table_id),n.value=await Wd.build_table(http_prefix,e,l.f_map_columns,l.get_extra_params_obj),null!=l.f_map_config&&(n.value=l.f_map_config(n.value)),o.value=!0,await Ja()}function c(){a("loaded")}function u(e){a("custom_event",e)}function d(e){a("rows_loaded",e)}return t({refresh_table:e=>{s.value&&s.value.refresh_table(e)},get_columns_defs:()=>null==s.value?[]:s.value.get_columns_defs(),get_rows_num:()=>s.value.get_rows_num(),search_value:e=>{s.value.search_value(e)}}),(t,a)=>o.value?(Ps(),Ls(ov,{key:0,ref_key:"table",ref:s,id:ya(i),columns:n.value.columns,get_rows:n.value.get_rows,get_column_id:n.value.get_column_id,print_column_name:n.value.print_column_name,print_html_row:n.value.print_html_row,print_vue_node_row:n.value.print_vue_node_row,f_is_column_sortable:n.value.f_is_column_sortable,f_get_column_classes:n.value.f_get_column_classes,f_get_column_style:n.value.f_get_column_style,display_empty_rows:n.value.display_empty_rows,f_sort_rows:e.f_sort_rows,enable_search:n.value.enable_search,default_sort:n.value.default_sort,show_autorefresh:n.value.show_autorefresh,paging:n.value.paging,csrf:e.csrf,display_message:e.display_message,message_to_display:e.message_to_display,onLoaded:c,onRows_loaded:d,onCustom_event:u},{custom_header:ml((()=>[Pn(t.$slots,"custom_header")])),_:3},8,["id","columns","get_rows","get_column_id","print_column_name","print_html_row","print_vue_node_row","f_is_column_sortable","f_get_column_classes","f_get_column_style","display_empty_rows","f_sort_rows","enable_search","default_sort","show_autorefresh","paging","csrf","display_message","message_to_display"])):Ys("v-if",!0)},__file:"http_src/vue/table-with-config.vue"},rv={__name:"spinner",props:{size:String,show:Boolean},setup:e=>(_n((async()=>{})),(t,a)=>e.show?(Ps(),js("div",{key:0,class:"spinner-border text-primary",style:V({width:e.size,height:e.size}),role:"status"},null,4)):Ys("v-if",!0)),__file:"http_src/vue/spinner.vue"};const cv={id:"script-description",class:"notes bg-light border",role:"alert"},uv=["innerHTML"],dv={key:0},_v=["innerHTML"];var pv={__name:"note-list",props:{note_list:Array,sub_note_list:Array,add_sub_notes:Boolean},setup(e){const t=e,a=e=>i18n(e);return(e,l)=>(Ps(),js("div",cv,[Vs("b",null,te(a("notes")),1),Vs("ul",null,[(Ps(!0),js(Ss,null,En(t.note_list,(e=>(Ps(),js("li",{innerHTML:e},null,8,uv)))),256)),t.add_sub_notes?(Ps(),js("ul",dv,[(Ps(!0),js(Ss,null,En(t.sub_note_list,(e=>(Ps(),js("li",{innerHTML:e},null,8,_v)))),256))])):Ys("v-if",!0)])]))},__file:"http_src/vue/note-list.vue"},fv=Jl({components:{modal:np},props:{id:String},updated(){},data(){return{description:"",invalid_bpf:!1,bpf_filter:"",extract_now:!0,show_menu:!0,data_available:0,i18n:e=>i18n(e),epoch_interval:null,id_modal:`${this.$props.id}_modal`}},emits:["apply"],created(){},mounted(){},methods:{pad2_number:function(e){return String(e).padStart(2,"0")},format_date:function(e){let t=e.valueOf();return ntopng_utility.from_utc_to_server_date_format(t)},apply:async function(){if(null!=this.bpf_filter&&""!=this.bpf_filter){let e=`${http_prefix}/lua/pro/rest/v2/check/filter.lua?query=${this.bpf_filter}`,t=await ntopng_utility.http_request(e,null,!1,!0);if(this.invalid_bpf=!t.response,1==this.invalid_bpf)return}let e={ifid:ntopng_url_manager.get_url_entry("ifid"),epoch_begin:this.epoch_interval.epoch_begin,epoch_end:this.epoch_interval.epoch_end,bpf_filter:this.bpf_filter},t=ntopng_url_manager.obj_to_url_params(e);if(1==this.extract_now){let e=`${http_prefix}/lua/rest/v2/get/pcap/live_extraction.lua?${t}`;window.open(e,"_self",!1)}else{let e=`${http_prefix}/lua/traffic_extraction.lua?${t}`,a=(await ntopng_utility.http_request(e,null,!1,!0)).id,l=i18n("traffic_recording.extraction_scheduled"),n=i18n("traffic_recording.traffic_extraction_jobs"),s=`<a href="/lua/if_stats.lua?ifid=${ntopng_url_manager.get_url_entry("ifid")}&page=traffic_recording&tab=jobs&job_id=${a}">${n}</a>`;l=l.replace("%{page}",s),l=`${l} ${a}`,ntopng_events_manager.emit_custom_event(ntopng_custom_events.SHOW_GLOBAL_ALERT_INFO,{text_html:l,type:"alert-success"})}this.close()},close:function(){this.$refs.modal.close(),setTimeout((()=>{this.data_available=0}),1e3)},show:async function(e,t){if(null==t){let e=ntopng_status_manager.get_status();if(null==e.epoch_begin||null==e.epoch_end)return void console.error("modal-traffic-extraction: epoch_begin and epoch_end undefined in url");t={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end}}this.epoch_interval=t;let a=ntopng_url_manager.obj_to_url_params(t),l=`${http_prefix}/lua/check_recording_data.lua?${a}`,n=await ntopng_utility.http_request(l,null,null,!0);if(0==n.available)return this.data_available=2,this.description=i18n("traffic_recording.no_recorded_data"),void this.$refs.modal.show();this.data_available=1;let s="";if(null!=n.info&&(s=n.info),null==e){let t=ntopng_url_manager.get_url_params(),a=`${http_prefix}/lua/pro/rest/v2/get/db/filter/bpf.lua?${t}`,l=await ntopng_utility.http_request(a);if(null==l||null==l.bpf)return void console.error(`modal-traffic-extraction: ${a} return null value`);e=l.bpf}this.set_descriptions(t.epoch_begin,t.epoch_end,s),this.bpf_filter=e,this.$refs.modal.show()},set_descriptions:function(e,t,a){let l=new Date(1e3*e),n=new Date(1e3*t),s=i18n("traffic_recording.about_to_download_flow");s=s.replace("%{date_begin}",this.format_date(l)),s=s.replace("%{date_end}",this.format_date(n)),s=s.replace("%{extra_info}",a),this.description=s},show_hide_menu:function(){this.show_menu=!this.show_menu}}});const vv=e=>(pl("data-v-0be978c4"),e=e(),fl(),e),mv=["innerHTML"],hv={key:0,style:{height:"95%"}},gv={class:"tab-content",style:{height:"100%"}},bv={class:"row"},yv={class:"form-group mb-3 col-md-3 has-feedback"},wv={class:"form-group mb-3 col-md-9 text-right asd"},xv={class:"radio-inline",style:{"margin-left":"1rem"}},kv={class:"radio-inline"},$v={class:"row",id:"pcapDownloadModal_advanced",style:{}},Sv={class:"form-group mb-3 col-md-12 has-feedback"},Nv=vv((()=>Vs("br",null,null,-1))),Cv={class:"form-label"},Av=vv((()=>Vs("a",{class:"ntopng-external-link",href:"https://www.ntop.org/guides/n2disk/filters.html"},[Vs("i",{class:"fas fa-external-link-alt"})],-1))),Ev={class:"input-group"},Tv=vv((()=>Vs("span",{class:"input-group-addon"},[Vs("span",{class:"glyphicon glyphicon-filter"})],-1))),Pv=vv((()=>Vs("br",null,null,-1))),Uv={class:"form-label"},Iv=vv((()=>Vs("br",null,null,-1))),Ov=vv((()=>Vs("ul",null,[Vs("li",null,[Ks("Host: "),Vs("i",null,"host 192.168.1.2")]),Vs("li",null,[Ks("HTTP: "),Vs("i",null,"tcp and port 80")]),Vs("li",null,[Ks("Traffic between hosts: "),Vs("i",null,"ip host 192.168.1.1 and 192.168.1.2")]),Vs("li",null,[Ks("Traffic from an host to another: "),Vs("i",null,"ip src 192.168.1.1 and dst 192.168.1.2")])],-1)));lp("\ninput ~ .alert[data-v-0be978c4] {\n  display: none;\n}\ninput:invalid ~ .alert[data-v-0be978c4] {\n  display: block;\n}\n"),fv.render=function(e,t,a,l,n,s){const o=kn("modal");return Ps(),Ls(o,{id:e.id_modal,onApply:e.apply,ref:"modal"},{title:ml((()=>[Ks(te(e.i18n("traffic_recording.pcap_extract")),1)])),body:ml((()=>[Vs("div",{class:K(["alert",{"alert-info":2!=e.data_available,"alert-warning":2==e.data_available}]),innerHTML:e.description},null,10,mv),1==e.data_available?(Ps(),js("form",hv,[Vs("div",gv,[Vs("div",bv,[Vs("div",yv,[Vs("button",{class:"btn btn-sm btn-secondary",type:"button",onClick:t[0]||(t[0]=(...t)=>e.show_hide_menu&&e.show_hide_menu(...t))},[Ks(te(e.i18n("advanced")),1),Vs("i",{class:K({"fas fa-caret-down":e.show_menu,"fas fa-caret-up":!e.show_menu})},null,2)])]),Vs("div",wv,[Vs("label",xv,[wn(Vs("input",{type:"radio",name:"extract_now","onUpdate:modelValue":t[1]||(t[1]=t=>e.extract_now=t),value:"true",checked:""},null,512),[[Fi,e.extract_now]]),Ks(" "+te(e.i18n("traffic_recording.extract_now")),1)]),Vs("label",kv,[wn(Vs("input",{type:"radio",name:"extract_now","onUpdate:modelValue":t[2]||(t[2]=t=>e.extract_now=t),value:"false"},null,512),[[Fi,e.extract_now]]),Ks(" "+te(e.i18n("traffic_recording.queue_as_job")),1)])])]),wn(Vs("div",$v,[Vs("div",Sv,[Nv,Vs("label",Cv,[Ks(te(e.i18n("traffic_recording.filter_bpf"))+" ",1),Av]),Vs("div",Ev,[Tv,wn(Vs("input",{name:"bpf_filter","onUpdate:modelValue":t[3]||(t[3]=t=>e.bpf_filter=t),class:"form-control input-sm","data-bpf":"bpf",autocomplete:"off",spellcheck:"false"},null,512),[[Mi,e.bpf_filter]]),wn(Vs("span",{style:{margin:"0px",padding:"0",display:"block"},class:"invalid-feedback"},te(e.i18n("invalid_value")),513),[[Yi,e.invalid_bpf]])]),Pv,Vs("label",Uv,te(e.i18n("traffic_recording.filter_examples"))+":",1),Iv,Ov])],512),[[Yi,e.show_menu]])])])):Ys("v-if",!0)])),footer:ml((()=>[wn(Vs("button",{type:"button",onClick:t[4]||(t[4]=(...t)=>e.apply&&e.apply(...t)),class:"btn btn-primary"},te(e.i18n("apply")),513),[[Yi,2!=e.data_available]]),wn(Vs("button",{type:"button",onClick:t[5]||(t[5]=(...t)=>e.close&&e.close(...t)),class:"btn btn-primary"},te(e.i18n("ok")),513),[[Yi,2==e.data_available]])])),_:1},8,["id","onApply"])},fv.__scopeId="data-v-0be978c4",fv.__file="http_src/vue/modal-traffic-extraction.vue";const Mv=e=>(pl("data-v-089b0491"),e=e(),fl(),e),jv=Mv((()=>Vs("a",{target:"_newtab",href:"#",style:{},class:"nav-item text-muted"},[Vs("i",{class:"fas fa-question-circle",style:{"margin-left":"28rem","padding-top":"0.8rem"}})],-1))),Lv={class:"nav nav-tabs"},Fv=["disabled"],Rv={key:0,style:{"min-height":"8.5rem"}},Dv={class:"form-group ms-2 me-2 mt-3 row"},zv={class:"col-form-label col-sm-4"},qv={class:"col-sm-6"},Bv=["pattern"],Vv={key:1,style:{"min-height":"8.5rem"}},Hv={class:"form-group ms-2 me-2 mt-3 row"},Gv={class:"col-form-label col-sm-4"},Wv={class:"col-sm-8"},Kv={value:"name"},Jv={value:"date"},Yv={class:"form-group ms-2 me-2 mt-3 row"},Zv={class:"col-form-label col-sm-4"},Xv={class:"col-sm-8"},Qv=["value"],em={class:"form-group ms-2 me-2 mt-3 row"},tm={class:"custom-control custom-switch"},am={class:"custom-control-label ms-1 form-check-label"},lm=["disabled"],nm=["disabled"],sm=["disabled"];var om={__name:"modal-snapshot",props:{csrf:String,page:String},emits:["added_snapshot","deleted_snapshot","deleted_all_snapshots"],setup(e,{expose:t,emit:a}){const l=e,n=va(null),s=va("add"),o=va(""),i=va(!1),r=va(""),c=va(!0),u=va(""),d=va(""),_=va([]),p=va("date");let f=NtopUtils.REGEXES.singleword;const v=xo((()=>!new RegExp(f).test(d.value))),m=xo((()=>""==o.value));function h(){if(null!=l.page)return l.page;let e="alerts";return null!=window.location.toString().match(/alert_stats.lua/)||(e="flows"),e}let g=null;function b(){g!=p.value&&(_.value.sort(((e,t)=>"name"==p.value?e.name.localeCompare(t.name):e.utc-t.utc)),_.value.length>0&&(o.value=_.value[0]),g=p.value)}let y=!0;const w=async()=>{let e;if(c.value)e=ntopng_url_manager.get_url_params();else{let t=ntopng_url_manager.get_url_object();delete t.epoch_begin,delete t.epoch_end,e=ntopng_url_manager.obj_to_url_params(t)}let t=h(),n={snapshot_name:d.value,filters:e,page:t};n.csrf=l.csrf;let s=`${http_prefix}/lua/pro/rest/v2/add/filters/snapshot.lua`;try{let e={"Content-Type":"application/json"};await ntopng_utility.http_request(s,{method:"post",headers:e,body:JSON.stringify(n)}),y=!0}catch(e){console.error(e)}$(),a("added_snapshots",n)},x=()=>{$();let e=o.value.filters;if(1==i.value){let t=ntopng_status_manager.get_status(),a=ntopng_url_manager.get_url_object(e);a.epoch_begin=t.epoch_begin,a.epoch_end=t.epoch_end,e=ntopng_url_manager.obj_to_url_params(a)}ntopng_url_manager.replace_url_and_reload(e)},k=async e=>{let t=o.value.name;1==e&&(t="*");let n={snapshot_name:t,page:h()};n.csrf=l.csrf;let s=`${http_prefix}/lua/pro/rest/v2/delete/filters/snapshot.lua`;try{let e={"Content-Type":"application/json"};await ntopng_utility.http_request(s,{method:"post",headers:e,body:JSON.stringify(n)}),y=!0}catch(e){console.error(e)}a(1==e?"deleted_all_snapshots":"deleted_snapshot",n),$()},$=()=>{n.value.close()};t({show:()=>{!async function(){s.value="add",d.value="",c.value=!0,i.value=!1;let e=ntopng_status_manager.get_status(),t=S("snapshots.save_time"),a=ntopng_utility.from_utc_to_server_date_format(1e3*e.epoch_begin,"DD/MM/YYYY HH:mm"),l=ntopng_utility.from_utc_to_server_date_format(1e3*e.epoch_end,"DD/MM/YYYY HH:mm");t=t.replace(/\%begin_time/,a),t=t.replace(/\%end_time/,l),u.value=t;let n=S("snapshots.apply_time");if(n=n.replace(/\%begin_time/,a),n=n.replace(/\%end_time/,l),r.value=n,y){y=!1;let e=h(),t=`${http_prefix}/lua/pro/rest/v2/get/filters/snapshots.lua?page=${e}`,a=await ntopng_utility.http_request(t);_.value=ntopng_utility.object_to_array(a)}b(),_.value.length>0&&(o.value=_.value[0])}(),n.value.show()},close:$}),_n((()=>{}));const S=e=>i18n(e);return(e,t)=>(Ps(),Ls(np,{onShowed:t[8]||(t[8]=e=>{}),ref_key:"modal_id",ref:n},{title:ml((()=>[Ks(te(S("snapshots.manage"))+" ",1),jv])),body:ml((()=>[Vs("ul",Lv,[Vs("li",{class:"nav-item",onClick:t[0]||(t[0]=e=>s.value="add")},[Vs("a",{class:K(["nav-link",{active:"add"==s.value}]),href:"#"},te(S("snapshots.add")),3)]),Vs("li",{class:"nav-item",onClick:t[1]||(t[1]=e=>(e=>{0==_.value.length&&"select"==e||(s.value=e)})("select"))},[Vs("a",{disabled:0==_.value.length,class:K(["nav-link",{active:"select"==s.value,"not-allowed":0==_.value.length}]),href:"#"},te(S("snapshots.manage")),11,Fv)])]),"add"==s.value?(Ps(),js("div",Rv,[Vs("div",Dv,[Vs("label",zv,[Vs("b",null,te(S("snapshots.name"))+":",1)]),Vs("div",qv,[wn(Vs("input",{pattern:ya(f),placeholder:"",required:"",type:"text",class:"form-control","onUpdate:modelValue":t[2]||(t[2]=e=>d.value=e)},null,8,Bv),[[Mi,d.value]])])]),Ys(' <div class="form-group ms-2 me-2 mt-3 row"> '),Ys(' \t<div class="custom-control custom-switch"> '),Ys(' \t  <input type="checkbox" class="custom-control-input whitespace form-check-input" v-model="save_time"> '),Ys(' \t  <label class="custom-control-label ms-1 form-check-label">{{save_time_text}}</label> '),Ys(" \t</div> "),Ys(" </div>       ")])):Ys("v-if",!0),Ys(" action add "),"select"==s.value?(Ps(),js("div",Vv,[Vs("div",Hv,[Vs("label",Gv,[Vs("b",null,te(S("snapshots.order_by")),1)]),Vs("div",Wv,[wn(Vs("select",{class:"form-select",onChange:t[3]||(t[3]=e=>b()),"onUpdate:modelValue":t[4]||(t[4]=e=>p.value=e)},[Vs("option",Kv,te(S("snapshots.name")),1),Vs("option",Jv,te(S("snapshots.date")),1)],544),[[Ri,p.value]])])]),Vs("div",Yv,[Vs("label",Zv,[Vs("b",null,te(S("snapshots.select")),1)]),Vs("div",Xv,[wn(Vs("select",{class:"form-select","onUpdate:modelValue":t[5]||(t[5]=e=>o.value=e)},[(Ps(!0),js(Ss,null,En(_.value,(e=>(Ps(),js("option",{value:e},te(function(e){let t=1e3*e.utc,a=ntopng_utility.from_utc_to_server_date_format(t,"DD/MM/YYYY");return`${e.name} (${a})`}(e)),9,Qv)))),256))],512),[[Ri,o.value]])])]),Vs("div",em,[Vs("div",tm,[wn(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input","onUpdate:modelValue":t[6]||(t[6]=e=>i.value=e)},null,512),[[ji,i.value]]),Vs("label",am,te(r.value),1)])])])):Ys("v-if",!0),Ys(" action select ")])),footer:ml((()=>["add"==s.value?(Ps(),js("button",{key:0,type:"button",onClick:w,disabled:ya(v),class:"btn btn-primary"},te(S("snapshots.add")),9,lm)):Ys("v-if",!0),"select"==s.value?(Ps(),js("button",{key:1,onClick:t[7]||(t[7]=e=>k(!0)),type:"button",style:{"text-align":"left","margin-left":"0px"},class:"btn btn-danger start-0 position-absolute ms-3"},te(S("snapshots.delete_all")),1)):Ys("v-if",!0),"select"==s.value?(Ps(),js("button",{key:2,type:"button",onClick:k,disabled:ya(m),class:"btn btn-danger"},te(S("snapshots.delete")),9,nm)):Ys("v-if",!0),"select"==s.value?(Ps(),js("button",{key:3,type:"button",onClick:x,disabled:ya(m),class:"btn btn-primary"},te(S("snapshots.apply")),9,sm)):Ys("v-if",!0)])),_:1},512))}};lp("\ninput[data-v-089b0491]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-089b0491] {\n  cursor: not-allowed;\n}\n"),om.__scopeId="data-v-089b0491",om.__file="http_src/vue/modal-snapshot.vue";const im=e=>(pl("data-v-19c5b1f1"),e=e(),fl(),e),rm=["innerHTML"],cm={class:"form-group mb-3"},um=["innerHTML"],dm={class:"alert_label"},_m={class:"form-check"},pm={class:"form-check-label"},fm={key:0,class:"form-check"},vm={class:"form-check-label"},mm={class:"form-check"},hm={class:"form-check-label"},gm={class:"form-check"},bm={class:"form-check-label"},ym={key:0,class:"exclude-domain-certificate"},wm={class:"alert_label"},xm={key:0,class:"form-check"},km={class:"form-check-label whitespace"},$m=["pattern","disabled"],Sm={key:1,class:"form-check"},Nm={class:"form-check-label whitespace"},Cm=["disabled","pattern"],Am={key:0,class:"form-group row"},Em={class:"col-form-label"},Tm={class:"mt-1"},Pm=["placeholder"],Um={class:"separator"},Im=im((()=>Vs("hr",{class:"separator"},null,-1))),Om={class:"form-group mb-3"},Mm={class:"custom-control custom-switch"},jm={class:"custom-control-label"},Lm={class:"alert alert-warning border",role:"alert"},Fm=["disabled"];var Rm={__name:"modal-alerts-filter",props:{alert:Object,page:String},emits:["exclude"],setup(e,{expose:t,emit:a}){const l=e,n=va(null),s=va("any"),o=va(!0),i=va(null),r=va(null),c=va(null),u=i18n("details.comment_placeholder");Ml((()=>l.alert),((e,t)=>{null!=e&&(s.value="any",o.value=!0,i.value=""==e.info?.value?null:d(e.info?.value),r.value=""==e.info?.issuerdn?null:e.info?.issuerdn)}));const d=e=>{let t=e,a=e.split("://");a.length>1&&(t=a[1]),t=t.split(":")[0];let l=t.split("www.");return l.length>1&&(t=l[1]),t=t.split("/")[0],t},_=()=>{if("domain"==s.value){let e=new RegExp(m);return null==i.value||0==e.test(i.value)}if("certificate"==s.value){let e=new RegExp(h);return null==r.value||0==e.test(r.value)}return!1},p=xo((()=>l.alert?.alert_name)),f=xo((()=>{let e={value:"",label:""};if("host"!=l.page||null==l.alert)return e;let t=l.alert;return e.value=t.ip.value,null!=t.vlan&&null!=t.vlan.value&&0!=t.vlan.value&&(e.value=e.value+"@"+t.vlan.value),e.label=t.ip.label?`${t.ip.label} (${t.ip.value})`:t.ip.value,e})),v=xo((()=>{let e={cli_value:"",cli_label:"",srv_value:"",srv_label:""};if("flow"!=l.page||null==l.alert)return e;let t=l.alert;e.cli_value=t.flow.cli_ip.value,e.srv_value=t.flow.srv_ip.value;let a=`${t.flow.cli_ip.label||t.flow.cli_ip.value}`,n=`${t.flow.srv_ip.label||t.flow.srv_ip.value}`;return null!=t.flow.vlan&&null!=t.flow.vlan.value&&0!=t.flow.vlan.value&&(a=`${a}@${t.flow.vlan.label}`,n=`${n}@${t.flow.vlan.label}`,e.cli_value=e.cli_value+"@"+t.flow.vlan.value,e.srv_value=e.srv_value+"@"+t.flow.vlan.value),a!==e.cli_value&&(a=`${a} (${e.cli_value})`),n!==e.srv_value&&(n=`${n} (${e.srv_value})`),e.cli_label=a,e.srv_label=n,e}));let m=NtopUtils.REGEXES.domain_name_not_strict,h=NtopUtils.REGEXES.tls_certificate;const g=()=>{let e=l.page,t="domain"==s.value||"certificate"==s.value?s.value:"host",n={delete_alerts:o.value,label:c.value,type:t},u=null;"host"==t?("host"==s.value?u=f.value.value:"server_host"==s.value?u=v.value.srv_value:"client_host"==s.value&&(u=v.value.cli_value),n.alert_addr=u,"flow"==e?n.flow_alert_key=l.alert.alert_id.value:"host"==e&&(n.host_alert_key=l.alert.alert_id.value)):"domain"==t?(n.delete_alerts=!1,n.alert_domain=i.value):"certificate"==t&&(n.delete_alerts=!1,n.alert_certificate=r.value),b(),a("exclude",n)},b=()=>{n.value.close()};t({show:()=>{c.value="",n.value.show()},close:b}),_n((()=>{}));const y=e=>i18n(e);return(t,a)=>(Ps(),Ls(np,{onShowed:a[10]||(a[10]=e=>{}),ref_key:"modal_id",ref:n},{title:ml((()=>[Ks(te(y("exclude_check"))+": ",1),Vs("span",{innerHTML:ya(p)},null,8,rm)])),body:ml((()=>[Vs("div",cm,[Vs("div",null,[Vs("label",null,[Ks(te(y("exclude_check"))+' "',1),Vs("b",{innerHTML:ya(p)},null,8,um),Ks('". '),Vs("span",dm,te(y("exclude_for"))+":",1)]),Vs("div",_m,[wn(Vs("input",{class:"form-check-input",type:"radio",value:"any","onUpdate:modelValue":a[0]||(a[0]=e=>s.value=e)},null,512),[[Fi,s.value]]),Vs("label",pm,[Vs("span",null,te(y("show_alerts.filter_disable_check")),1)])]),"host"==e.page?(Ps(),js("div",fm,[wn(Vs("input",{class:"form-check-input",type:"radio",value:"host","onUpdate:modelValue":a[1]||(a[1]=e=>s.value=e)},null,512),[[Fi,s.value]]),Vs("label",vm,[Vs("span",null,te(ya(f).label),1)])])):Ys("v-if",!0),"flow"==e.page?(Ps(),js(Ss,{key:1},[Vs("div",mm,[wn(Vs("input",{class:"form-check-input",type:"radio",value:"client_host","onUpdate:modelValue":a[2]||(a[2]=e=>s.value=e)},null,512),[[Fi,s.value]]),Vs("label",hm,[Vs("span",null,te(y("client"))+": "+te(ya(v).cli_label),1)])]),Vs("div",gm,[wn(Vs("input",{class:"form-check-input",type:"radio",value:"server_host","onUpdate:modelValue":a[3]||(a[3]=e=>s.value=e)},null,512),[[Fi,s.value]]),Vs("label",bm,[Vs("span",null,te(y("server"))+": "+te(ya(v).srv_label),1)])])],64)):Ys("v-if",!0)]),null!=i.value||null!=r.value?(Ps(),js("div",ym,[Vs("label",null,[Vs("span",wm,te(y("check_exclusion.exclude_all_checks_for"))+":",1)]),null!=i.value?(Ps(),js("div",xm,[wn(Vs("input",{class:"form-check-input",type:"radio",value:"domain","onUpdate:modelValue":a[4]||(a[4]=e=>s.value=e)},null,512),[[Fi,s.value]]),Vs("label",km,[Vs("span",null,te(y("check_exclusion.domain"))+":",1)]),wn(Vs("input",{type:"text",pattern:ya(m),disabled:"domain"!=s.value,required:"","onUpdate:modelValue":a[5]||(a[5]=e=>i.value=e),class:"form-check-label custom-width"},null,8,$m),[[Mi,i.value]])])):Ys("v-if",!0),null!=r.value?(Ps(),js("div",Sm,[wn(Vs("input",{class:"form-check-input",type:"radio",value:"certificate","onUpdate:modelValue":a[6]||(a[6]=e=>s.value=e)},null,512),[[Fi,s.value]]),Vs("label",Nm,[Vs("span",null,te(y("check_exclusion.tls_certificate"))+":",1)]),wn(Vs("input",{type:"text",disabled:"certificate"!=s.value,"onUpdate:modelValue":a[7]||(a[7]=e=>r.value=e),pattern:ya(h),required:"",class:"form-check-label custom-width"},null,8,Cm),[[Mi,r.value]])])):Ys("v-if",!0)])):Ys("v-if",!0)]),"any"!=s.value?(Ps(),js("div",Am,[Vs("div",null,[Vs("label",Em,[Vs("b",null,te(y("show_alerts.add_a_comment")),1)])]),Vs("div",Tm,[wn(Vs("textarea",{placeholder:ya(u),id:"alert-label",name:"label",rows:"3",class:"form-control",type:"text","onUpdate:modelValue":a[8]||(a[8]=e=>c.value=e),maxlength:"450"},null,8,Pm),[[Mi,c.value]])])])):Ys("v-if",!0),wn(Vs("hr",Um,null,512),[[Yi,o.value]]),"domain"!=s.value&&"certificate"!=s.value?(Ps(),js(Ss,{key:1},[wn(Vs("div",{class:"message alert alert-danger"},te(y("show_alerts.confirm_delete_filtered_alerts")),513),[[Yi,o.value]]),Im,Vs("div",Om,[Vs("div",Mm,[wn(Vs("input",{type:"checkbox",class:"custom-control-input whitespace","onUpdate:modelValue":a[9]||(a[9]=e=>o.value=e)},null,512),[[ji,o.value]]),Vs("label",jm,te(y("delete_disabled_alerts")),1)])])],64)):Ys("v-if",!0),Vs("div",Lm,te(y("show_alerts.confirm_filter_alert")),1)])),footer:ml((()=>[Vs("button",{type:"button",onClick:g,disabled:_(),class:"btn btn-warning"},te(y("filter")),9,Fm)])),_:1},512))}};lp("\n.whitespace[data-v-19c5b1f1] {\n  margin-right: 0.2rem;\n}\n.custom-width[data-v-19c5b1f1] {\n  display: block;\n  min-width: 100%;\n}\ninput[data-v-19c5b1f1]:invalid {\n  border-color: #ff0000;\n}\n.exclude-domain-certificate[data-v-19c5b1f1] {\n  margin-top: 0.4rem;\n}\n"),Rm.__scopeId="data-v-19c5b1f1",Rm.__file="http_src/vue/modal-alerts-filter.vue";const Dm={class:"form-group row mb-2"},zm={class:"col-sm-6"},qm={class:"col-form-label"},Bm={class:"col-sm-6 mt-1"};var Vm={__name:"modal-acknowledge-alert",props:{context:Object,page:String},emits:["acknowledge"],setup(e,{expose:t,emit:a}){const l=e,n=e=>i18n(e),s=va(null),o=va(null),i=va(""),r=va("");async function c(){const e=`${http_prefix}/lua/rest/v2/acknowledge/${l.page}/alerts.lua`,t={csrf:l.context.csrf,ifid:l.context.ifid,label:i.value,row_id:u.value.row_id};await b.http_request(e,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}),a("acknowledge"),d()}_n((()=>{}));const u=va({}),d=()=>{s.value.close()};return t({show:e=>{u.value=e;const t=$(`<span>${e.alert_id.label}</span>`);r.value=t.text().trim(),i.value=e.user_label;let a=n("show_alerts.confirm_acknowledge_alert");o.value.show(a,"alert-warning"),s.value.show()},close:d}),(e,t)=>(Ps(),Ls(np,{ref_key:"modal_id",ref:s},{title:ml((()=>[Ks(te(n("show_alerts.acknowledge_alert"))+": "+te(r.value),1)])),body:ml((()=>[Vs("div",Dm,[Vs("div",zm,[Vs("label",qm,[Vs("b",null,te(n("show_alerts.add_a_comment")),1)])]),Vs("div",Bm,[wn(Vs("input",{"onUpdate:modelValue":t[0]||(t[0]=e=>i.value=e),class:"form-control",type:"text",maxlength:"255"},null,512),[[Mi,i.value]])])]),Hs(S_,{no_close_button:!0,ref_key:"alert_info",ref:o},null,512)])),footer:ml((()=>[Vs("button",{type:"button",onClick:c,class:"btn btn-primary"},te(n("acknowledge")),1)])),_:1},512))},__file:"http_src/vue/modal-acknowledge-alert.vue"},Hm={__name:"modal-delete-alert",props:{context:Object,page:String},emits:["delete_alert"],setup(e,{expose:t,emit:a}){const l=e,n=e=>i18n(e),s=va(null),o=va(null),i=va({});let r="historical";async function c(){const e=`${http_prefix}/lua/rest/v2/delete/${l.page}/alerts.lua`,t={csrf:l.context.csrf,ifid:l.context.ifid,status:r,row_id:i.value.row_id};await b.http_request(e,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}),a("delete_alert"),u()}_n((()=>{}));const u=()=>{s.value.close()};return t({show:(e,t)=>{i.value=e,r=t;let a=n("show_alerts.confirm_label_alert");o.value.show(a,"alert-danger"),s.value.show()},close:u}),(e,t)=>(Ps(),Ls(np,{ref_key:"modal_id",ref:s},{title:ml((()=>[Ks(te(n("show_alerts.delete_alert")),1)])),body:ml((()=>[Hs(S_,{no_close_button:!0,ref_key:"alert_info",ref:o},null,512)])),footer:ml((()=>[Vs("button",{type:"button",onClick:c,class:"btn btn-primary"},te(n("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-alert.vue"};const Gm={class:"form-group row"},Wm={class:"col-sm-6"},Km={class:"col-form-label"},Jm={class:"col-sm-6"},Ym=["value"],Zm={class:"form-group row mb-2"},Xm={class:"col-sm-6"},Qm={class:"col-form-label"},eh={class:"col-sm-6 mt-1"},th=["value"];var ah={__name:"modal-acknowledge-alerts",props:{page:String,context:Object},emits:["acknowledge_alerts"],setup(e,{expose:t,emit:a}){const l=e,n=e=>i18n(e),s=va(null),o=va(null),i=va(""),r=va("");va([]),_n((()=>{}));async function c(){const e=`${http_prefix}/lua/rest/v2/acknowledge/${l.page}/alerts.lua`,t=x.get_url_object(),n={csrf:l.context.csrf,...t};await b.http_post_request(e,n),a("acknowledge_alerts"),u()}const u=()=>{s.value.close()};return t({show:e=>{i.value=b.from_utc_to_server_date_format(1e3*e.epoch_begin),r.value=b.from_utc_to_server_date_format(1e3*e.epoch_end);let t=n("show_alerts.confirm_acknowledge_alerts");o.value.show(t,"alert-danger"),s.value.show()},close:u}),(e,t)=>(Ps(),Ls(np,{ref_key:"modal_id",ref:s},{title:ml((()=>[Ks(te(n("acknowledge_alerts")),1)])),body:ml((()=>[Vs("div",Gm,[Vs("div",Wm,[Vs("label",Km,[Vs("b",null,te(n("date_from")),1)])]),Vs("div",Jm,[Vs("input",{class:"form-control",type:"text",value:i.value,disabled:""},null,8,Ym)])]),Vs("div",Zm,[Vs("div",Xm,[Vs("label",Qm,[Vs("b",null,te(n("date_from")),1)])]),Vs("div",eh,[Vs("input",{class:"form-control",type:"text",value:r.value,disabled:""},null,8,th)])]),Hs(S_,{no_close_button:!0,ref_key:"alert_info",ref:o},null,512)])),footer:ml((()=>[Vs("button",{type:"button",onClick:c,class:"btn btn-primary"},te(n("acknowledge")),1)])),_:1},512))},__file:"http_src/vue/modal-acknowledge-alerts.vue"};const lh={class:"form-group row"},nh={class:"col-sm-6"},sh={class:"col-form-label"},oh={class:"col-sm-6"},ih=["value"],rh={class:"form-group row"},ch={class:"col-sm-6"},uh={class:"col-form-label"},dh={class:"col-sm-6 mt-1"},_h=["value"],ph={class:"form-group filters-list mb-2"},fh={class:"form-group row"},vh={class:"col-sm-6"},mh={class:"col-form-label"},hh={class:"col-sm-6 mt-1"},gh=["value"];var bh={__name:"modal-delete-alerts",props:{page:String,context:Object},emits:["delete_alerts"],setup(e,{expose:t,emit:a}){const l=e,n=e=>i18n(e),s=va(null),o=va(null),i=va(""),r=va(""),c=va([]);_n((()=>{}));async function u(){const e=`${http_prefix}/lua/rest/v2/delete/${l.page}/alerts.lua`,t=x.get_url_object(),n={csrf:l.context.csrf,...t};await b.http_post_request(e,n),a("delete_alerts"),d()}const d=()=>{s.value.close()};return t({show:e=>{i.value=b.from_utc_to_server_date_format(1e3*e.epoch_begin),r.value=b.from_utc_to_server_date_format(1e3*e.epoch_end);const t=Xd.tag_operator_label_dict;c.value=e.filters.map((e=>({label:e.label,value:`${t[e.operator]} ${e.value_label}`})));let a=n("show_alerts.confirm_delete_alerts");o.value.show(a,"alert-danger"),s.value.show()},close:d}),(e,t)=>(Ps(),Ls(np,{ref_key:"modal_id",ref:s},{title:ml((()=>[Ks(te(n("delete_alerts")),1)])),body:ml((()=>[Vs("div",lh,[Vs("div",nh,[Vs("label",sh,[Vs("b",null,te(n("date_from")),1)])]),Vs("div",oh,[Vs("input",{class:"form-control",type:"text",value:i.value,disabled:""},null,8,ih)])]),Vs("div",rh,[Vs("div",ch,[Vs("label",uh,[Vs("b",null,te(n("date_from")),1)])]),Vs("div",dh,[Vs("input",{class:"form-control",type:"text",value:r.value,disabled:""},null,8,_h)])]),Vs("div",ph,[(Ps(!0),js(Ss,null,En(c.value,(e=>(Ps(),js("div",fh,[Vs("div",vh,[Vs("label",mh,[Vs("b",null,te(e.label),1)])]),Vs("div",hh,[Vs("input",{class:"form-control",type:"text",value:e.value,disabled:""},null,8,gh)])])))),256))]),Hs(S_,{no_close_button:!0,ref_key:"alert_info",ref:o},null,512)])),footer:ml((()=>[Vs("button",{type:"button",onClick:u,class:"btn btn-primary"},te(n("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-alerts.vue"};const yh={class:"row"},wh={class:"col-12"},xh={class:"mb-2"},kh={class:"w-100"},$h={clas:"range-container d-flex flex-wrap"},Sh={class:"range-picker d-flex m-auto flex-wrap"},Nh={key:0,class:"ms-1 me-2"},Ch=["value"],Ah=["label"],Eh=["value"],Th=["title"],Ph=[Vs("i",{class:"fas fa-lg fa-link"},null,-1)],Uh=["title","href"],Ih=[Vs("i",{class:"fas fa-lg fa-file"},null,-1)],Oh=["title"],Mh=[Vs("i",{class:"fas fa-lg fa-download"},null,-1)],jh=["title"],Lh=[Vs("i",{class:"fas fa-lg fa-camera-retro"},null,-1)],Fh={class:"col-12"},Rh={class:"card card-shadow"},Dh={class:"card-body"},zh={key:0,class:"row"},qh={class:"col-12 mb-2",id:"chart-vue"},Bh={class:"card h-100 overflow-hidden"},Vh=Vs("div",null,null,-1),Hh=["title"],Gh=["onClick","title"],Wh={class:"card-footer"},Kh=Vs("i",{class:"fas fa fa-user-check"},null,-1),Jh=Vs("i",{class:"fas fa fa-trash"},null,-1);var Yh={__name:"page-alert-stats",props:{context:Object},setup(e){const t=e,a=e=>i18n(e),l=va(null),n=va(null),s=va(null),o=va(null),i=va(null),r=va(null),c=va(null),u=va(null),d=va(null),_=va(null),p=va(null),f=va(null),v=va(0),m=va(!1),g=va(""),w=va(null),k=t.context.ifid;let S;const C=va(""),A=va("");let E=`${http_prefix}/lua/pro/rest/v2/get/db/ts.lua`;const T=j.typeChart.TS_COLUMN,P=va([]),U=va([]),I=va([a("show_alerts.alerts_info")]),O=va({}),M=va([]),L=va(!1),F=xo((()=>{if(!t.context.show_chart||null==s.value)return"";if(v.value<0)throw"never run";const e=t.context.download.endpoint;let a=x.get_url_object(),l=s.value.get_columns_defs().filter((e=>e.visible)).map((e=>e.id)).join(",");a.format="txt",a.visible_columns=l;const n=x.obj_to_url_params(a);return`${location.origin}/${e}?${n}`}));dn((async()=>{g.value=`<div class="alert alert-success alert-dismissable"><span>${i18n("no_alerts_require_attention")}</span></div>`,t.context.is_va&&b.check_and_set_default_time_interval("day"),async function(){S=x.get_url_entry("page");const e=x.get_url_entry("status");null==S&&(S="all");"engaged"==e&&"flow"==S&&x.set_key_to_url("status","historical");E="snmp_device"==S?`${http_prefix}/lua/pro/rest/v2/get/snmp/device/alert/ts.lua`:`${http_prefix}/lua/rest/v2/get/${S}/alert/ts.lua`,O.value={value:x.get_url_entry("query_preset"),count:x.get_url_entry("count")},null==O.value.value&&(O.value.value="");C.value=`alert_${S}`,A.value=`${C.value}_${O.value.value}`}(),function(){null==x.get_url_entry("ifid")&&x.set_key_to_url("ifid",k);if(null==x.get_url_entry("epoch_begin")||null==x.get_url_entry("epoch_end")){let e=Number.parseInt((Date.now()-18e5)/1e3),t=Number.parseInt(Date.now()/1e3);x.set_key_to_url("epoch_begin",e),x.set_key_to_url("epoch_end",t)}"flow"==x.get_url_entry("page")&&"engaged"==x.get_url_entry("status")&&x.set_key_to_url("status","historical")}(),await async function(){if(!t.context.is_ntop_enterprise_l||"engaged"==x.get_url_entry("status"))return void h.ready(D());let e=`${http_prefix}/lua/pro/rest/v2/get/alert/preset/consts.lua?page=${S}`,a=await b.http_request(e);if(null==a||0==a.length)return M.value=[],x.set_key_to_url("query_preset",""),x.set_key_to_url("count",""),void h.ready(D());M.value=a[0].list.map((e=>({value:e.id,name:e.name,count:e.count,builtin:!0}))),a.length>1&&a[1].list.forEach((e=>{let t={value:e.id,name:e.name,count:e.count,is_preset:!0};M.value.push(t)}));if(null==O.value||""==O.value.value)O.value=M.value[0];else{let e=M.value.find((e=>e.value==O.value.value));O.value=e||M.value[0]}x.set_key_to_url("query_preset",O.value.value),x.set_key_to_url("count",O.value.count),h.ready(D())}(),L.value=!0,await z()})),_n((async()=>{!async function(){await h.on_ready("range_picker"),n.value.register_status(),y.on_status_change(S,(e=>{x.get_url_params(),s.value.refresh_table(),z()}),!1)}()}));function D(){return"page-alert-stats_query_presets"}async function z(e){1==t.context.show_cards&&1!=O.value.is_preset&&(P.value=await q("overview"))}async function q(e,a){const l=x.get_url_params(),n=`${t.context.endpoint_cards}?${l}&action=${e}`;return(await b.http_request(n)).map((t=>({id:t.name,label:t.label,title:t.tooltip,show_spinner:!1,data_loaded:"overview"!=e,options:t.value})))}const B=(e,t)=>a=>{!async function(e,t){if(e.show_spinner=!0,await Ja(),0==e.data_loaded){let a=await q(e.id);e.options=a.find((t=>t.id==e.id)).options,await Ja(),U.value[t].load_menu()}e.show_spinner=!1}(e,t)};function V(){$(`#${A.value}`).on("click","a.tag-filter",(async function(e){G(e,$(this))}))}const H=async e=>{await h.on_ready("page-alert-stats_query_presets");let a={l7_proto:(e,t)=>{let a="";if(void 0!==e.confidence){const t=e.confidence;a="DPI"==t?`<span class="badge bg-success" title="${t}">${t}</span>`:`<span class="badge bg-warning" title="${t}">${t}</span>`}return R.filterize("l7proto",e.value,e.label)+" "+`${a}`},info:(e,t)=>{let a="";return e.value&&(a=`<button class="btn btn-light btn-sm border ms-1" data-placement="bottom" onclick="\n                    const textArea = document.createElement('textarea');\n                    textArea.value = '${e.value}';    \n                    textArea.style.position = 'absolute';\n                    textArea.style.left = '-999999px';    \n                    document.body.prepend(textArea);\n                    textArea.select();\n                    document.execCommand('copy');"\n                    ><i class="fas fa-copy"></i></button>`),`${a} ${R.filterize("info",e.value,e.label)}`}},l=O.value.is_preset&&e.length>0;return l&&(e=[e[0]].concat(t.context.columns_def)),e.forEach((e=>{if(e.render_func=a[e.data_field],"actions"==e.id){if(1==l)return void(e.button_def_array=[{id:"expand",icon:"fas fa fa-search-plus",class:["link-button"],title_i18n:"db_search.expand_button",event_id:"click_button_expand"}]);const a={snmp_info:t.context.actions.show_snmp_info,info:t.context.actions.show_info,historical_data:t.context.actions.show_historical,acknowledge:t.context.actions.show_acknowledge,disable:t.context.actions.show_disable,settings:t.context.actions.show_settings,remove:t.context.actions.show_delete};e.button_def_array.forEach((e=>{a[e.id]||e.class.push("link-disabled")}))}})),e},G=(e,t)=>{let a,l;e.stopPropagation();let n="eq";null!=t.data("tagKey")&&(a=t.data("tagKey")),null!=t.data("tagRealvalue")?l=t.data("tagRealvalue"):null!=t.data("tagValue")&&(l=t.data("tagValue")),null!=t.data("tagOperator")&&(n=t.data("tagOperator")),W({id:a,value:l,operator:n})};function W(e){if(!r.value.is_filter_defined(e))throw`Filter ${e.value} not defined`;ntopng_events_manager.emit_custom_event(N.SHOW_MODAL_FILTERS,e)}const K=()=>x.get_url_object();function J(e){x.set_key_to_url("page",e.page_name),null!=window.location.toString().match(/alert_stats.lua/)&&function(){let e=y.get_status().filters;if(null==e)return;x.delete_params(e.map((e=>e.id)))}(),x.reload_url()}function Y(){const e=$(c.value),t=document.createElement("input");t.value=location.href,document.body.appendChild(t),t.select(),document.execCommand("copy"),document.body.removeChild(t),e.attr("title",`${a("copied")}!`).tooltip("dispose").tooltip().tooltip("show")}function Z(){o.value.show()}function X(){i.value.show()}async function Q(e){e.csrf=t.context.csrf;let l=`${http_prefix}/lua/pro/rest/v2/add/alert/exclusion.lua`;try{let t={"Content-Type":"application/json"};await b.http_request(l,{method:"post",headers:t,body:JSON.stringify(e)});x.get_url_params();setTimeout((()=>{ntopng_events_manager.emit_custom_event(N.SHOW_GLOBAL_ALERT_INFO,{text_html:a("check_exclusion.disable_warn"),type:"alert-info",timeout:2})}),1e3)}catch(e){console.error(e)}}function ee(){let e=s.value,t=n.value;setTimeout((()=>{e.refresh_table(),t.update_chart()}),1e3)}function ae(e){null!=e?.rows&&(m.value=0==e.rows.length)}function le(e){let t={click_button_snmp_info:_e,click_button_info:pe,click_button_historical_flows:de,click_button_acknowledge:ue,click_button_disable:ce,click_button_settings:re,click_button_remove:ie,click_button_expand:ne};null!=t[e.event_id]&&t[e.event_id](e)}function ne(e){const t=e.row;x.set_key_to_url("query_preset",""),x.set_key_to_url("count","");let a=y.get_status().filters,l=t?.filter?.tag_filters;l?.length>0&&(l=l.map((e=>({id:e.id,operator:e.op,value:e.value}))),a=a.concat(l));let n={};a.forEach((e=>n[`${e.id}_${e.operator}_${e.value}`]=e)),a=b.object_to_array(n);let s=Xd.get_filters_object(a);x.add_obj_to_url(s),x.reload_url()}function se(){let e=y.get_status();p.value.show(e)}function oe(){let e=y.get_status();f.value.show(e)}function ie(e){const t=e.row;let a=fe();_.value.show(t,a)}function re(e){const t=e.row,a=$(t.msg.configset_ref).attr("href");window.location.href=a}function ce(e){!function(e){w.value=e,u.value.show()}(e.row)}function ue(e){const a=e.row;d.value.show(a,t.context)}function de(e){const t=e.row;t.link_to_past_flows?window.location.href=t.link_to_past_flows:window.location.href=`${http_prefix}/lua/pro/db_search.lua`}function _e(e){const t=e.row;let a="";a=null!=t.port.value?`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${t.ip}&snmp_port_idx=${t.port.value}`:`${http_prefix}/lua/pro/enterprise/snmp_device_details.lua?host=${t.ip}`,window.open(a,"_blank")}function pe(e){const a=e.row;let l=fe(),n={page:S,status:l,row_id:a.row_id,tstamp:a.tstamp.value},s=x.obj_to_url_params(n);const o=`${t.context.alert_details_url}?${s}`;window.open(o,"_blank")}function fe(){let e=x.get_url_entry("status");return null!=e&&""!=e||(e="historical"),e}return(t,v)=>(Ps(),js(Ss,null,[Hs(n_,{id:"navbar",main_title:e.context.navbar.main_title,base_url:e.context.navbar.base_url,help_link:e.context.navbar.help_link,items_table:e.context.navbar.items_table,onClick_item:J},null,8,["main_title","base_url","help_link","items_table"]),Vs("div",yh,[Vs("div",wh,[Vs("div",xh,[Vs("div",kh,[Vs("div",$h,[Vs("div",Sh,[Hs(S_,{id:"alert_info",global:!0,ref_key:"alert_info",ref:l},null,512),Hs(fv,{id:"modal_traffic_extraction",ref_key:"modal_traffic_extraction",ref:o},null,512),Hs(om,{ref_key:"modal_snapshot",ref:i,csrf:e.context.csrf},null,8,["csrf"]),L.value?(Ps(),Ls(Wp,{key:0,ref_key:"range_picker",ref:r,id:"range_picker"},{begin:ml((()=>[M.value.length>0?(Ps(),js("div",Nh,[wn(Vs("select",{class:"me-2 form-select","onUpdate:modelValue":v[0]||(v[0]=e=>O.value=e),onChange:v[1]||(v[1]=e=>(x.get_url_params(),x.set_key_to_url("query_preset",O.value.value),x.set_key_to_url("count",O.value.count),void x.reload_url()))},[(Ps(!0),js(Ss,null,En(M.value,(e=>(Ps(),js(Ss,null,[1==e.builtin?(Ps(),js("option",{key:0,value:e},te(e.name),9,Ch)):Ys("v-if",!0)],64)))),256)),"analysis"!=ya(S)?(Ps(),js("optgroup",{key:0,label:a("queries.queries")},[(Ps(!0),js(Ss,null,En(M.value,(e=>(Ps(),js(Ss,null,[e.builtin?Ys("v-if",!0):(Ps(),js("option",{key:0,value:e},te(e.name),9,Eh))],64)))),256))],8,Ah)):Ys("v-if",!0)],544),[[Ri,O.value]])])):Ys("v-if",!0)])),extra_range_buttons:ml((()=>[e.context.show_permalink?(Ps(),js("button",{key:0,class:"btn btn-link btn-sm",onClick:Y,title:a("graphs.get_permanent_link"),ref_key:"permanent_link_button",ref:c},Ph,8,Th)):Ys("v-if",!0),e.context.show_download?(Ps(),js("a",{key:1,class:"btn btn-link btn-sm",id:"dt-btn-download",title:a("graphs.download_records"),href:ya(F)},Ih,8,Uh)):Ys("v-if",!0),e.context.show_pcap_download?(Ps(),js("button",{key:2,class:"btn btn-link btn-sm",onClick:Z,title:a("traffic_recording.pcap_download")},Mh,8,Oh)):Ys("v-if",!0),e.context.is_ntop_enterprise_m?(Ps(),js("button",{key:3,class:"btn btn-link btn-sm",onClick:X,title:a("datatable.manage_snapshots")},Lh,8,jh)):Ys("v-if",!0)])),_:1},512)):Ys("v-if",!0)])])])])]),Vs("div",Fh,[Vs("div",Rh,[Vs("div",Dh,[e.context.show_chart?(Ps(),js("div",zh,[Vs("div",qh,[Vs("div",Bh,[Hs(C_,{ref_key:"chart",ref:n,id:"chart_alert_stats",chart_type:ya(T),base_url_request:ya(E),register_on_status_change:!1},null,8,["chart_type","base_url_request"])])]),Vh,Hs(iv,{ref_key:"table_alerts",ref:s,table_config_id:C.value,table_id:A.value,csrf:e.context.csrf,f_map_columns:H,get_extra_params_obj:K,display_message:m.value,message_to_display:g.value,onLoaded:V,onCustom_event:le,onRows_loaded:ae},{custom_header:ml((()=>[(Ps(!0),js(Ss,null,En(P.value,((e,t)=>(Ps(),Ls(Rd,{f_on_open:B(e,t),ref_for:!0,ref:e=>{U.value[t]=e}},{title:ml((()=>[Hs(rv,{show:e.show_spinner,size:"1rem",class:"me-1"},null,8,["show"]),Vs("a",{class:"ntopng-truncate",title:e.title},te(e.label),9,Hh)])),menu:ml((()=>[(Ps(!0),js(Ss,null,En(e.options,(e=>(Ps(),js("a",{style:{cursor:"pointer",display:"block"},onClick:t=>function(e,t){t.stopPropagation(),W({id:e.key,value:e.value,operator:e.operator})}(e,t),class:"ntopng-truncate tag-filter",title:e.value},te(e.label),9,Gh)))),256))])),_:2},1032,["f_on_open"])))),256)),Ys(" Dropdown columns ")])),_:1},8,["table_config_id","table_id","csrf","display_message","message_to_display"])])):Ys("v-if",!0)]),Ys(" card body "),wn(Vs("div",Wh,[e.context.show_acknowledge_all?(Ps(),js("button",{key:0,onClick:se,class:"btn btn-primary me-1"},[Kh,Ks(" "+te(a("acknowledge_alerts")),1)])):Ys("v-if",!0),e.context.show_delete_all?(Ps(),js("button",{key:1,onClick:oe,class:"btn btn-danger"},[Jh,Ks(" "+te(a("delete_alerts")),1)])):Ys("v-if",!0)],512),[[Yi,"all"!=ya(S)]]),Ys(" card footer ")]),Ys(" card-shadow ")]),Ys(" div col "),Hs(pv,{note_list:I.value},null,8,["note_list"])]),Ys(" div row "),Hs(Vm,{ref_key:"modal_acknowledge",ref:d,context:e.context,page:ya(S),onAcknowledge:ee},null,8,["context","page"]),Hs(Hm,{ref_key:"modal_delete",ref:_,context:e.context,page:ya(S),onDelete_alert:ee},null,8,["context","page"]),Hs(ah,{ref_key:"modal_acknowledge_alerts",ref:p,context:e.context,page:ya(S),onAcknowledge_alerts:ee},null,8,["context","page"]),Hs(bh,{ref_key:"modal_delete_alerts",ref:f,context:e.context,page:ya(S),onDelete_alerts:ee},null,8,["context","page"]),Hs(Rm,{alert:w.value,page:ya(S),onExclude:Q,ref_key:"modal_alerts_filter",ref:u},null,8,["alert","page"])],64))},__file:"http_src/vue/page-alert-stats.vue"};const Zh={class:"row"},Xh={class:"col-12"},Qh={class:"mb-2"},eg={class:"w-100"},tg={clas:"range-container d-flex flex-wrap"},ag={class:"range-picker d-flex m-auto flex-wrap"},lg={class:"ms-1 me-2"},ng=["value"],sg=["label"],og=["value"],ig=["title"],rg=[Vs("i",{class:"fas fa-lg fa-link"},null,-1)],cg=["title","href"],ug=[Vs("i",{class:"fas fa-lg fa-file"},null,-1)],dg=["title"],_g=[Vs("i",{class:"fas fa-lg fa-download"},null,-1)],pg=["title"],fg=[Vs("i",{class:"fas fa-lg fa-camera-retro"},null,-1)],vg={class:"col-12"},mg={class:"card card-shadow"},hg={class:"card-body"},gg={class:"row"},bg={key:0,class:"col-12 mb-2",id:"chart-vue"},yg=["title"],wg=["onClick","title"],xg={key:0,class:"card-footer"},kg={key:0,id:"dt-btn-acknowledge",disabled:!0,"data-bs-target":"#dt-acknowledge-modal","data-bs-toggle":"modal",class:"btn btn-primary me-1"},$g=Vs("i",{class:"fas fa fa-user-check"},null,-1),Sg={key:1,id:"dt-btn-delete",disabled:!0,"data-bs-target":"#dt-delete-modal","data-bs-toggle":"modal",class:"btn btn-danger"},Ng=Vs("i",{class:"fas fa fa-trash"},null,-1);var Cg={__name:"page-flow-historical",props:{context:Object},setup(e){const t=e,l=e=>i18n(e),n=va(null),s=va(null),o=va(null),i=va(null),r=va(null),c=va(null),u=va(null),d=va(null),_=va(null),p=va(null),f=va(null),m=t.context.ifid,g=va(""),w=va(""),k=xo((()=>{if(null==U.value?.value)return w.value;return`${w.value}_${U.value.value}`})),S=xo((()=>{if(z.value<0)throw"never run";const e=t.context.download.endpoint;let a=x.get_url_object(),l=o.value.get_columns_defs().filter((e=>e.visible)).map((e=>e.id)).join(",");a.format="txt",a.visible_columns=l;const n=x.obj_to_url_params(a);return`${location.origin}/${e}?${n}`}));let C=`${http_prefix}/lua/pro/rest/v2/get/db/ts.lua`;const A=xo((()=>"topk-timeseries"==t.context?.chart_type?"height:450px!important":"height:300px!important")),E=xo((()=>"topk-timeseries"==t.context?.chart_type?j.typeChart.TS_STACKED:j.typeChart.TS_COLUMN)),T=va([]),P=va([]),U=va({}),I=va([]);va([]);const O=va(!1),M=va(!1),L=va(l("datatable.aggregated")),F=va(null),D=va(!1),z=va(0);function q(e){let t=e?.chart;return null!=t&&t.length>0?t[0]:{}}dn((async()=>{!function(){g.value=x.get_url_entry("page"),null==g.value&&(g.value="overview");C=`${http_prefix}/lua/pro/rest/v2/get/db/ts.lua`,U.value={value:x.get_url_entry("query_preset")},null==U.value.value&&(U.value.value="");w.value="flow_historical";"true"==x.get_url_entry("aggregated")&&(w.value="flow_historical_aggregated",M.value=!0,F.value="hour",D.value=!0)}(),function(){null==x.get_url_entry("ifid")&&x.set_key_to_url("ifid",m);if(0==M.value)b.check_and_set_default_time_interval();else{const e=e=>{let t=b.get_timeframe_from_timeframe_id(F.value);return e.epoch_end-e.epoch_begin<t},t=b.check_and_set_default_time_interval(F.value,e);null!=t&&(t.epoch_begin=b.round_time_by_timeframe_id(t.epoch_begin,F.value),t.epoch_end=b.round_time_by_timeframe_id(t.epoch_end,F.value),x.set_key_to_url("epoch_begin",t.epoch_begin),x.set_key_to_url("epoch_end",t.epoch_end))}"flow"==x.get_url_entry("page")&&"engaged"==x.get_url_entry("status")&&x.set_key_to_url("status","historical");null==x.get_url_entry("aggregated")&&x.set_key_to_url("aggregated","false")}(),await async function(){let e=`${http_prefix}/lua/pro/rest/v2/get/db/preset/consts.lua?page=${g.value}&aggregated=${M.value}`,t=await b.http_request(e);I.value=t[0].list.map((e=>{let t=q(e);return{value:e.id,name:e.name,count:t?.params?.count,chart_config:t,builtin:!0}})),t.length>1&&t[1].list.forEach((e=>{let t=q(e),a={value:e.id,name:e.name,count:t?.params?.count,chart_config:t,is_preset:!0};I.value.push(a)}));if(null==U.value||""==U.value.value)U.value=I.value[0];else{let e=I.value.find((e=>e.value==U.value.value));U.value=e||I.value[0]}x.set_key_to_url("query_preset",U.value.value),x.set_key_to_url("count",U.value.count),h.ready(pe())}(),O.value=!0})),_n((async()=>{!async function(){await h.on_ready("range_picker"),t.context.show_chart&&s.value.register_status();y.on_status_change(g.value,(e=>{x.get_url_params(),o.value.refresh_table(),G(),z.value+=1}),!1)}(),G()}));const B=async e=>{await h.on_ready(pe());let t=U.value.chart_config?.unit_measure;return null==t&&(t="number"),e.yaxis.labels.formatter=v.getFormatter(t),e};function H(){0==M.value?x.delete_params(["aggregated"]):x.set_key_to_url("aggregated","true"),x.reload_url()}async function G(e){1==t.context.show_cards&&(T.value=await W("overview"))}async function W(e,t){const a=x.get_url_params(),l=`${http_prefix}/lua/pro/rest/v2/get/flow/top.lua?${a}&action=${e}`;return(await b.http_request(l)).map((t=>({id:t.action||t.name,label:t.label,title:t.tooltip,show_spinner:!1,data_loaded:"overview"!=e,options:t.value})))}const K=(e,t)=>a=>{!async function(e,t){if(e.show_spinner=!0,await Ja(),0==e.data_loaded){let a=await W(e.id);e.options=a.find((t=>t.id==e.id)).options,await Ja(),P.value[t].load_menu()}e.show_spinner=!1}(e,t)};function J(){$(`#${k.value}`).on("click","a.tag-filter",(async function(e){Z(e,$(this))}))}const Y=async e=>{await h.on_ready(pe());const l=(e,t,a)=>void 0!==t&&0!=t.value?`<a class='tag-filter' data-tag-key='${e}' data-tag-value='${t.value}' title='${t.title}' href='javascript:void(0)'>${t.label}</a>`:"",n=(e,t,l)=>null==t||0==t?"":`<a class='tag-filter' data-tag-key='${e}' data-tag-value='${t}' href='javascript:void(0)'>${a.msecToTime(t)}</a>`;let s={first_seen:(e,t)=>{if(void 0!==e)return e.time},DURATION:(e,t)=>a.secondsToTime(e),THROUGHPUT:(e,t)=>v.getFormatter("bps")(e),l7proto:(e,t)=>{let a="";if(void 0!==e.confidence){const t=e.confidence;a="DPI"==t?`<span class="badge bg-success" title="${t}">${t}</span>`:`<span class="badge bg-warning" title="${t}">${t}</span>`}return R.filterize("l7proto",e.value,e.label)+" "+`${a}`},asn:(e,t)=>l("asn",e),cli_asn:(e,t)=>l("cli_asn",e),srv_asn:(e,t)=>l("srv_asn",e),flow_risk:(e,t)=>{if(null==e)return"";let a=[];for(let t=0;t<e.length;t++){const l=e[t],n=l.label||l.value,s=l.help;a.push(`${n} ${s}`)}return a.join(", ")},cli_nw_latency:(e,t)=>n("cli_nw_latency",e),srv_nw_latency:(e,t)=>n("srv_nw_latency",e),info:(e,t)=>null==e?"":`<a class='tag-filter' data-tag-key='info' data-tag-value='${e.title}' title='${e.title}' href='javascript:void(0)'>${e.label}</a>`};return e=e.filter((e=>0!=t.context?.visible_columns[e.data_field])),U.value.is_preset&&e.length>0&&(e=[e[0]].concat(t.context.columns_def)),e.forEach((e=>{if(e.render_func=s[e.data_field],"actions"==e.id){const a={info:t.context.actions.show_info,historical_data:t.context.actions.show_historical,flow_alerts:t.context.actions.show_alerts,pcap_download:t.context.actions.show_pcap_download,row_data:t.context.is_enterprise_xl&&M.value};e.button_def_array.forEach((e=>{null!=a[e.id]&&0==a[e.id]&&e.class.push("link-disabled")}))}})),e},Z=(e,t)=>{let a,l;e.stopPropagation();let n="eq";null!=t.data("tagKey")&&(a=t.data("tagKey")),null!=t.data("tagRealvalue")?l=t.data("tagRealvalue"):null!=t.data("tagValue")&&(l=t.data("tagValue")),null!=t.data("tagOperator")&&(n=t.data("tagOperator")),X({id:a,value:l,operator:n})};function X(e){c.value.is_filter_defined(e)?ntopng_events_manager.emit_custom_event(N.SHOW_MODAL_FILTERS,e):(x.set_key_to_url("query_preset",""),x.set_key_to_url(e.id,`${e.value};${e.operator}`),x.reload_url())}const Q=()=>x.get_url_object();function ee(e){x.set_key_to_url("page",e.page_name),x.reload_url()}function ae(){const e=$(u.value),t=document.createElement("input");t.value=location.href,document.body.appendChild(t),t.select(),document.execCommand("copy"),document.body.removeChild(t),e.attr("title",`${l("copied")}!`).tooltip("dispose").tooltip().tooltip("show")}function le(){i.value.show()}function ne(){r.value.show()}async function se(e){e.csrf=t.context.csrf;let a=`${http_prefix}/lua/pro/rest/v2/add/alert/exclusion.lua`;try{let t={"Content-Type":"application/json"};await b.http_request(a,{method:"post",headers:t,body:JSON.stringify(e)});x.get_url_params();setTimeout((()=>{ntopng_events_manager.emit_custom_event(N.SHOW_GLOBAL_ALERT_INFO,{text_html:l("check_exclusion.disable_warn"),type:"alert-info",timeout:2})}),1e3)}catch(e){console.error(e)}}function oe(e){let t=o.value,a=s.value;setTimeout((()=>{e||t.refresh_table(),a.update_chart()}),1e3)}function ie(e){let t={click_button_info:re,click_button_flow_alerts:de,click_button_historical_flows:ue,click_button_pcap_download:ce,click_button_flows:_e};null!=t[e.event_id]&&t[e.event_id](e)}function re(e){const t=e.row,a=`${http_prefix}/lua/pro/db_flow_details.lua?row_id=${t.rowid}&tstamp=${t.tstamp}&instance_name=${t.NTOPNG_INSTANCE_NAME}`;window.open(a,"_blank")}function ce(e){const t=e.row,a={epoch_begin:t?.filter?.epoch_begin,epoch_end:t?.filter?.epoch_end};i.value.show(t?.filter?.bpf,a)}function ue(e){const t=e.row;let a={};for(let e in t){let l=e;if(null!=t[e].tag_key&&""!=t[e].tag_key&&(l=t[e].tag_key),null==t[e].value&&""!=t[e].value)continue;let n=`${t[e].value};eq`;a[l]=n}x.set_key_to_url("query_preset",""),x.add_obj_to_url(a),x.reload_url()}function de(e){const t=e.row;t.alerts_url&&x.go_to_url(t.alerts_url)}function _e(e){const t=e.row,a=t.filter.epoch_begin,l=t.filter.epoch_end,n=t.flow.cli_ip.value,s=t.flow.srv_ip.value,o=t.flow.srv_port,i=t.probe_ip.value,r=t.NTOPNG_INSTANCE_NAME,c=t.vlan_id.value;let u=0!=c;const d=t.output_snmp.value;let _=0!=d;const p=t.input_snmp.value;let f=`${http_prefix}/lua/pro/db_search.lua?aggregated=false&epoch_begin=${a}&epoch_end=${l}&cli_ip=${n};eq&srv_ip=${s};eq&srv_port=${o};eq&probe_ip=${i};eq&instance_name=${r}`;u&&(f+=`&vlan_id=${c};eq`),0!=p&&(f+=`&input_snmp=${p};eq`),_&&(f+=`&output_snmp=${d};eq`),x.go_to_url(f)}function pe(){return"page-flow-historical_query_presets"}return(a,v)=>(Ps(),js(Ss,null,[Hs(n_,{id:"navbar",main_title:e.context.navbar.main_title,base_url:e.context.navbar.base_url,help_link:e.context.navbar.help_link,items_table:e.context.navbar.items_table,onClick_item:ee},null,8,["main_title","base_url","help_link","items_table"]),Vs("div",Zh,[Vs("div",Xh,[Vs("div",Qh,[Vs("div",eg,[Vs("div",tg,[Vs("div",ag,[Hs(S_,{id:"alert_info",global:!0,ref_key:"alert_info",ref:n},null,512),O.value?(Ps(),Ls(Wp,{key:0,ref_key:"range_picker",ref:c,id:"range_picker",min_time_interval_id:F.value,round_time:D.value},{begin:ml((()=>[t.context.is_enterprise_xl?(Ps(),Ls($f,{key:0,value:M.value,"onUpdate:value":v[0]||(v[0]=e=>M.value=e),class:"me-2 mt-1",change_label_side:!0,label:L.value,style:{},onChange_value:H},null,8,["value","label"])):Ys("v-if",!0),Vs("div",lg,[wn(Vs("select",{class:"me-2 form-select",style:{"min-width":"8rem"},"onUpdate:modelValue":v[1]||(v[1]=e=>U.value=e),onChange:v[2]||(v[2]=e=>(x.get_url_params(),x.set_key_to_url("query_preset",U.value.value),x.set_key_to_url("count",U.value.count),void x.reload_url()))},[(Ps(!0),js(Ss,null,En(I.value,(e=>(Ps(),js(Ss,null,[1==e.builtin?(Ps(),js("option",{key:0,value:e},te(e.name),9,ng)):Ys("v-if",!0)],64)))),256)),"analysis"!=g.value?(Ps(),js("optgroup",{key:0,label:l("queries.queries")},[(Ps(!0),js(Ss,null,En(I.value,(e=>(Ps(),js(Ss,null,[e.builtin?Ys("v-if",!0):(Ps(),js("option",{key:0,value:e},te(e.name),9,og))],64)))),256))],8,sg)):Ys("v-if",!0)],544),[[Ri,U.value]])])])),extra_range_buttons:ml((()=>[e.context.show_permalink?(Ps(),js("button",{key:0,class:"btn btn-link btn-sm",onClick:ae,title:l("graphs.get_permanent_link"),ref_key:"permanent_link_button",ref:u},rg,8,ig)):Ys("v-if",!0),e.context.show_download?(Ps(),js("a",{key:1,class:"btn btn-link btn-sm",title:l("graphs.download_records"),href:ya(S)},ug,8,cg)):Ys("v-if",!0),e.context.show_pcap_download?(Ps(),js("button",{key:2,class:"btn btn-link btn-sm",onClick:le,title:l("traffic_recording.pcap_download")},_g,8,dg)):Ys("v-if",!0),e.context.is_ntop_enterprise_m?(Ps(),js("button",{key:3,class:"btn btn-link btn-sm",onClick:ne,title:l("datatable.manage_snapshots")},fg,8,pg)):Ys("v-if",!0)])),_:1},8,["min_time_interval_id","round_time"])):Ys("v-if",!0)])])])])]),Vs("div",vg,[Vs("div",mg,[Vs("div",hg,[Vs("div",gg,[e.context.show_chart?(Ps(),js("div",bg,[Vs("div",{class:"card overflow-hidden",style:V(ya(A))},[Ys(' <div class="card h-300 overflow-hidden"> '),Hs(C_,{ref_key:"chart",ref:s,id:"chart_0",chart_type:ya(E),base_url_request:ya(C),map_chart_options:B,register_on_status_change:!1,min_time_interval_id:F.value,round_time:D.value},null,8,["chart_type","base_url_request","min_time_interval_id","round_time"])],4)])):Ys("v-if",!0),Hs(iv,{ref_key:"table_flows",ref:o,table_id:ya(k),table_config_id:w.value,csrf:e.context.csrf,f_map_columns:Y,get_extra_params_obj:Q,onLoaded:J,onCustom_event:ie},{custom_header:ml((()=>[(Ps(!0),js(Ss,null,En(T.value,((e,t)=>(Ps(),Ls(Rd,{f_on_open:K(e,t),ref_for:!0,ref:e=>{P.value[t]=e}},{title:ml((()=>[Hs(rv,{show:e.show_spinner,size:"1rem",class:"me-1"},null,8,["show"]),Vs("a",{class:"ntopng-truncate",title:e.title},te(e.label),9,yg)])),menu:ml((()=>[(Ps(!0),js(Ss,null,En(e.options,(e=>(Ps(),js("a",{style:{cursor:"pointer",display:"block"},onClick:t=>function(e,t){t.stopPropagation(),X({id:e.key,value:e.value,operator:e.operator})}(e,t),class:"ntopng-truncate tag-filter",title:e.value},te(e.label),9,wg)))),256))])),_:2},1032,["f_on_open"])))),256)),Ys(" Dropdown columns ")])),_:1},8,["table_id","table_config_id","csrf"])])]),Ys(" card body "),t.context.show_acknowledge_all||t.context.show_delete_all?(Ps(),js("div",xg,[t.context.show_acknowledge_all?(Ps(),js("button",kg,[$g,Ks(" Acknowledge Alerts ")])):Ys("v-if",!0),t.context.show_delete_all?(Ps(),js("button",Sg,[Ng,Ks(" Delete Alerts ")])):Ys("v-if",!0)])):Ys("v-if",!0),Ys(" card footer ")]),Ys(" card-shadow ")]),Ys(" div col ")]),Ys(" div row "),Hs(fv,{id:"modal_traffic_extraction",ref_key:"modal_traffic_extraction",ref:i},null,512),Hs(om,{ref_key:"modal_snapshot",ref:r,csrf:e.context.csrf},null,8,["csrf"]),Hs(Vm,{ref_key:"modal_acknowledge",ref:_,context:e.context,onAcknowledge:oe},null,8,["context"]),Hs(Hm,{ref_key:"modal_delete",ref:p,context:e.context,onDelete_alert:oe},null,8,["context"]),Hs(Rm,{alert:f.value,page:g.value,onExclude:se,ref_key:"modal_alerts_filter",ref:d},null,8,["alert","page"])],64))},__file:"http_src/vue/page-flow-historical.vue"},Ag={components:{},props:{id:String,chart_type:String,register_on_status_change:Boolean,base_url_request:String,get_params_url_request:Function,get_custom_chart_options:Function,disable_pointer_events:Boolean},emits:["apply","hidden","showed","chart_reloaded","zoom"],created(){},beforeUnmount(){},data:()=>({chart:null,chart_options:null,from_zoom:!1,timeseries_visibility:null,timeseries_list:[]}),async mounted(){await this.init(),ntopng_sync.ready(this.$props.id)},methods:{init:async function(){let e=ntopng_status_manager.get_status(),t=this.get_url_request(e);this.register_on_status_change&&this.register_status(e),await this.draw_chart(t)},get_image:function(e){return Dygraph.Export.asPNG(this.chart,e,this.$refs.chart)},change_visibility:function(e,t){null!=this.timeseries_list[t]&&(this.timeseries_list[t].checked=e,this.chart.setVisibility(t,e))},register_status:function(e){let t=this.get_url_request(e);ntopng_status_manager.on_status_change(this.id,(e=>{1==this.from_zoom&&(this.from_zoom=!1);let a=this.get_url_request(e);a!=t?(t=a,this.update_chart(a)):t=a}),!1)},get_url_request:function(e){let t;return null!=this.$props.get_params_url_request?(null==e&&(e=ntopng_status_manager.get_status()),t=this.$props.get_params_url_request(e)):t=ntopng_url_manager.get_url_params(),`${this.$props.base_url_request||""}?${t}`},get_chart_options:async function(e){let t=null;const a=await ntopng_utility.get_date_format(!1,this.$props.csrf,http_prefix);return t=null==this.$props.get_custom_chart_options?await ntopng_utility.http_request(e):await this.$props.get_custom_chart_options(e),t?.axes?.x?.axisLabelFormatter||(t.axes.x.axisLabelFormatter=function(e){return ntopng_utility.from_utc_to_server_date_format(e,a)}),t?.axes.x?.valueFormatter||(t.axes.x.valueFormatter=function(e){return ntopng_utility.from_utc_to_server_date_format(e,a)}),this.$emit("chart_reloaded",t),t},draw_chart:async function(e){let t=await this.get_chart_options(e);const a=t.data||[];t.data=null,t.zoomCallback=this.on_zoomed,this.timeseries_list=[];let l=0;if(!t.disableTsList)for(const e in t.series)this.timeseries_list.push({name:e,checked:!0,id:l,color:t.colors[l]+"!important"}),l+=1;this.chart=new Dygraph(this.$refs.chart,a,t)},update_chart:async function(e){if(this.chart){let t=await this.get_chart_options(e);this.chart.updateChart(t)}},update_chart_options:function(e){this.chart&&this.chart.updateChart(e)},update_chart_series:function(e){null!=e&&this.chart&&this.chart.updateOptions({file:e})},on_zoomed:function(e,t){this.from_zoom=!0;const a=moment(e),l=moment(t);let n={epoch_begin:Number.parseInt(a.unix()),epoch_end:Number.parseInt(l.unix())};ntopng_events_manager.emit_event(ntopng_events.EPOCH_CHANGE,n,this.id),this.$emit("zoom",n)}}};const Eg={style:{width:"100% height:380px"},class:"text-end mb-2"},Tg={class:"form-check-label form-control-sm"},Pg=["onClick","checked"],Ug={key:0,class:"mb-3",style:{width:"100%","pointer-events":"none"},ref:"chart"},Ig={key:1,class:"mb-3",style:{width:"100%"},ref:"chart"};lp("\n.dygraph-legend {\n\tcolor: #111111;\n\tbackground-color: #FFFFFF !important;\n\tborder-color: #a7a6a6;\n\tborder-style: solid;\n\tborder-width: thin;\n\tz-index: 80 !important;\n\tbox-shadow: 0 0.5rem 1rem rgba(0, 0, 0, .15);\n\tborder-radius: 0.375rem;\n\tposition: fixed;\n\twidth: auto;\n\tword-wrap: break-word;\n\tpadding: 8px !important;\n}\n.dygraph-legend>span {\n\tcolor: #111111;\n\tpadding-left: 5px;\n\tpadding-right: 2px;\n\tmargin-left: -5px;\n\tbackground-color: #FFFFFF !important;\n}\n.dygraph-legend>span:first-child {\n\tmargin-top: 2px;\n}\n"),Ag.render=function(e,t,a,l,n,s){return Ps(),js(Ss,null,[Vs("div",Eg,[(Ps(!0),js(Ss,null,En(n.timeseries_list,((e,t)=>(Ps(),js("label",Tg,[Vs("input",{type:"checkbox",class:"form-check-input align-middle mt-0",onClick:a=>s.change_visibility(!e.checked,t),checked:e.checked,style:V([{"border-color":"#0d6efd"},{backgroundColor:e.color}])},null,12,Pg),Ks(" "+te(e.name),1)])))),256))]),1==a.disable_pointer_events?(Ps(),js("div",Ug,null,512)):(Ps(),js("div",Ig,null,512))],64)},Ag.__file="http_src/vue/timeseries-chart.vue";const Og=e=>(pl("data-v-185590b6"),e=e(),fl(),e),Mg={class:"form-group ms-2 me-2 mt-3 row"},jg={class:"col-11"},Lg={class:"col-form-label"},Fg=[Og((()=>Vs("button",{type:"button",class:"btn border"},[Vs("span",null,[Vs("i",{class:"fas fa-trash"})])],-1)))],Rg={class:"container"},Dg={class:"row custom-ms me-2 mt-1"},zg={class:"col-5"},qg=["onUpdate:modelValue"],Bg={class:"custom-control-label ms-1 form-check-label"},Vg={class:"col-2"},Hg=["onUpdate:modelValue"],Gg=Og((()=>Vs("label",{class:"custom-control-label ms-1 form-check-label"},"Past ",-1))),Wg={class:"col-2"},Kg=["onUpdate:modelValue"],Jg=Og((()=>Vs("label",{class:"custom-control-label ms-1 form-check-label"},"Avg ",-1))),Yg={class:"col-3"},Zg=["onUpdate:modelValue"],Xg=Og((()=>Vs("label",{class:"custom-control-label ms-1 form-check-label"},"95th Perc ",-1)));var Qg={__name:"list-timeseries",props:{id:String,timeseries:Array,title:String,show_delete_button:Boolean},emits:["delete_ts","update:timeseries"],setup(e,{emit:t}){const a=e;function l(){t("update:timeseries",a.timeseries)}function n(){t("delete_ts",a.id)}return(t,a)=>(Ps(),js("div",null,[Vs("div",Mg,[Vs("div",jg,[Vs("label",Lg,[Vs("b",null,te(e.title),1)])]),e.show_delete_button?(Ps(),js("div",{key:0,class:"col-1",onClick:n},Fg)):Ys("v-if",!0)]),Vs("div",Rg,[(Ps(!0),js(Ss,null,En(e.timeseries,(e=>(Ps(),js("div",Dg,[Vs("div",zg,[wn(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:l,"onUpdate:modelValue":t=>e.raw=t},null,40,qg),[[ji,e.raw]]),Vs("label",Bg,te(e.label),1)]),Vs("div",Vg,[wn(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:l,"onUpdate:modelValue":t=>e.past=t},null,40,Hg),[[ji,e.past]]),Gg]),Vs("div",Wg,[wn(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:l,"onUpdate:modelValue":t=>e.avg=t},null,40,Kg),[[ji,e.avg]]),Jg]),Vs("div",Yg,[wn(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:l,"onUpdate:modelValue":t=>e.perc_95=t},null,40,Zg),[[ji,e.perc_95]]),Xg])])))),256))])]))}};lp("\n.custom-ms[data-v-185590b6] {\n  margin-left: 2rem !important;\n}\n.inline-block[data-v-185590b6] {\n    display: inline-block;\n    margin-right: 1rem;\n}\n.border[data-v-185590b6] {\n    border-style: solid !important;\n}\n"),Qg.__scopeId="data-v-185590b6",Qg.__file="http_src/vue/list-timeseries.vue";const eb=v.getFormatter(v.types.bytes.id),tb="page-stats-action-link",ab="page-stats-action-jump-historical",lb={table_value:"interface",title:i18n("page_stats.top.top_applications"),view:"top_protocols",default_sorting_columns:1,default:!0,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("application"),name:"application",data:"protocol",handlerId:tb,render:function(e,t,a){let l=this,n={handlerId:tb,onClick:function(){let e=`top:${a.ts_schema}`;l.add_metric_from_metric_schema(e,a.ts_query)}};return F.createLinkCallback({text:e.label,handler:n})}},{columnName:i18n("traffic"),name:"traffic",className:"text-end",data:"traffic",orderable:!0,render:e=>a.bytesToSize(e)},{columnName:i18n("percentage"),name:"traffic_perc",className:"text-center",data:"percentage",orderable:!1,render:e=>{const t=e.toFixed(1);return a.createProgressBar(t)}},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:ab,render_if:function(e){return e.is_history_enabled},render:function(e,t,a){let l=this;const n={handlerId:ab,onClick:function(){let e=x.serialize_param("l7proto",`${a.protocol.id};eq`),t=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}&${e}`,n=l.source_type,s=l.source_array,o="",i=n.source_def_array.map(((e,t)=>{let a=s[t];return"ifid"==e.value?x.serialize_param("ifid",a.value):"host"==e.value?x.serialize_param("ip",`${a.value};eq`):void 0}));o=i.join("&"),t=`${t}&${o}`,window.open(t)}};return F.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:n}])}}]},nb={table_value:"interface",title:i18n("page_stats.top.top_categories"),view:"top_categories",default_sorting_columns:2,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("category"),name:"category",data:"category",handlerId:tb,render:function(e,t,a){let l=this,n={handlerId:tb,onClick:function(){let e=`top:${a.ts_schema}`;l.add_metric_from_metric_schema(e,a.ts_query)}};return F.createLinkCallback({text:e.label,handler:n})}},{columnName:i18n("traffic"),name:"traffic",className:"text-end",data:"traffic",orderable:!0,render:e=>eb(e)},{columnName:i18n("percentage"),name:"traffic_perc",className:"text-center",data:"percentage",render:e=>{const t=e.toFixed(1);return a.createProgressBar(t)}},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:ab,render_if:function(e){return e.is_history_enabled},render:function(e,t,a){let l=this;const n={handlerId:ab,onClick:function(){let e=x.serialize_param("l7cat",`${a.category.id};eq`),t=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}&${e}`,n=l.source_type,s=l.source_array,o="",i=n.source_def_array.map(((e,t)=>{let a=s[t];return"ifid"==e.value?x.serialize_param("ifid",a.value):"host"==e.value?x.serialize_param("ip",`${a.value};eq`):void 0}));o=i.join("&"),t=`${t}&${o}`,window.open(t)}};return F.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:n}])}}]},sb=[lb,nb,{table_value:"interface",title:i18n("page_stats.top.top_senders"),view:"top_senders",default_sorting_columns:1,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("page_stats.top.host_name"),name:"host_name",data:"host",handlerId:tb,render:function(e,t,a){let l=this,n=e.label,s="",o={handlerId:tb,onClick:async function(){l.add_ts_group_from_source_value_dict("host",a.tags,"host:traffic")}};return l.sources_types_enabled.host&&e.is_local&&(n=F.createLinkCallback({text:e.label,handler:o})),e.is_available&&(s=` <a href="/lua/host_details.lua?host=${e.id}" data-bs-toggle="tooltip" title=""><i class="fas fa-laptop"></i></a>`),`${n}${s}`}},{columnName:i18n("page_stats.top.sent"),name:"sent",className:"text-end",data:"traffic",orderable:!0,render:e=>eb(e)},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:ab,render_if:function(e){return e.is_history_enabled},render:function(e,t,a){let l=this;const n=a.host.id,s=a.host.is_local,o={handlerId:ab,onClick:function(){let e=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}`,t="",n=[];for(let e in a.tags){let t=a.tags[e],l="";"ifid"==e?l=x.serialize_param(e,t):"host"==e&&(l=x.serialize_param("ip",`${t};eq`)),n.push(l)}t=n.join("&"),e=`${e}&${t}`,window.open(e)}},i={handlerId:ab,onClick:function(){const e=x.get_url_entry("ifid"),t=`${http_prefix}/lua/host_details.lua?host=${n}&page=historical&ts_query=ifid:${e},host:${n}&ts_schema=host:details&epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}`;window.open(t)}},r=[{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:o}];return l.sources_types_enabled.host&&s&&r.push({class:"dropdown-item",href:"#",title:i18n("db_explorer.host_data"),handler:i}),F.createActionButtons(r)}}]},{table_value:"interface",title:i18n("page_stats.top.top_receivers"),view:"top_receivers",default_sorting_columns:1,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("page_stats.top.host_name"),name:"host_name",data:"host",handlerId:tb,render:function(e,t,a){let l=this,n=e.label,s="",o={handlerId:tb,onClick:async function(){l.add_ts_group_from_source_value_dict("host",a.tags,"host:traffic")}};return l.sources_types_enabled.host&&e.is_local&&(n=F.createLinkCallback({text:e.label,handler:o})),e.is_available&&(s=` <a href="/lua/host_details.lua?host=${e.id}" data-bs-toggle="tooltip" title=""><i class="fas fa-laptop"></i></a>`),`${n}${s}`}},{columnName:i18n("page_stats.top.received"),name:"received",className:"text-end",data:"traffic",orderable:!0,render:e=>eb(e)},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:ab,render_if:function(e){return e.is_history_enabled},render:function(e,t,a){let l=this;const n=a.host.id,s=a.host.is_local,o={handlerId:ab,onClick:function(){let e=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}`,t="",n=[];for(let e in a.tags){let t=a.tags[e],l="";"ifid"==e?l=x.serialize_param(e,t):"host"==e&&(l=x.serialize_param("ip",`${t};eq`)),n.push(l)}t=n.join("&"),e=`${e}&${t}`,window.open(e)}},i={handlerId:ab,onClick:function(){const e=x.get_url_entry("ifid"),t=`${http_prefix}/lua/host_details.lua?host=${n}&page=historical&ts_query=ifid:${e},host:${n}&ts_schema=host:details&epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}`;window.open(t)}},r=[{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:o}];return l.sources_types_enabled.host&&s&&r.push({class:"dropdown-item",href:"#",title:i18n("db_explorer.host_data"),handler:i}),F.createActionButtons(r)}}]}];let ob=sb.find((e=>"top_protocols"==e.view));null!=ob&&(ob=b.clone(ob),ob.table_value="host");const ib=[ob],rb=v.getFormatter(v.types.bytes.id),cb=v.getFormatter(v.types.bps.id),ub="page-stats-action-link",db={table_value:"snmp",table_source_def_value_dict:{ifid:!0,device:!0,if_index:!1},title:i18n("page_stats.top.top_interfaces"),view:"top_snmp_ifaces",default_sorting_columns:4,columnDefs:[{type:"file-size",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3}],f_get_label:e=>{let t,a=e.source_type.source_def_array;for(let l=0;l<a.length;l+=1)if("device"==a[l].value){t=e.source_array[l].label;break}return`${i18n("page_stats.top.top_interfaces")} - SNMP ${i18n("page_stats.source_def.device")} ${t}`},default:!0,columns:[{columnName:i18n("interface_name"),name:"interface",data:"interface",handlerId:ub,render:function(e,t,a){let l=this,n={handlerId:ub,onClick:function(){l.add_ts_group_from_source_value_dict("snmp_interface",a.tags,"snmp_if:traffic")}},s=`${e.name}`;return F.createLinkCallback({text:s,handler:n})}},{columnName:i18n("interface_alias"),name:"interface",data:"interface",handlerId:ub,render:function(e){return`${e.alias}`}},{columnName:i18n("page_stats.top.sent"),name:"sent",className:"text-end",data:"sent",orderable:!0,render:e=>rb(e)},{columnName:i18n("page_stats.top.received"),name:"received",className:"text-end",data:"rcvd",orderable:!0,render:e=>rb(e)},{columnName:i18n("traffic"),name:"traffic",className:"text-end",data:"total",orderable:!0,render:e=>rb(e)},{columnName:i18n("last_downlink_usage"),name:"traffic_perc",className:"text-center no-wrap",data:"downlink_usage_percentage",render:e=>{const t=e.toFixed(1);return t>100&&(t=100),a.createProgressBar(t)}},{columnName:i18n("last_uplink_usage"),name:"traffic_perc",className:"text-center no-wrap",data:"uplink_usage_percentage",render:e=>{const t=e.toFixed(1);return t>100&&(t=100),a.createProgressBar(t)}},{columnName:i18n("page_stats.top.throughput"),name:"throughput",className:"text-end",data:"throughput",orderable:!0,render:e=>cb(e)}]},_b=[db],pb=v.getFormatter(v.types.bytes.id),fb=v.getFormatter(v.types.bps.id),vb="page-stats-action-link",mb={table_value:"flowdevice",table_source_def_value_dict:{ifid:!0,device:!0,if_index:!1},title:i18n("page_stats.top.top_interfaces"),view:"top_flowdev_ifaces",default_sorting_columns:4,columnDefs:[{type:"file-size",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3}],f_get_label:e=>{let t,a=e.source_type.source_def_array;for(let l=0;l<a.length;l+=1)if("device"==a[l].value){t=e.source_array[l].label;break}return`${i18n("page_stats.top.top_interfaces")} - Flow Exporter ${t}`},default:!0,columns:[{columnName:i18n("interface_name"),name:"interface",data:"interface",handlerId:vb,render:function(e,t,a){let l=this,n={handlerId:vb,onClick:function(){l.add_ts_group_from_source_value_dict("flow_interface",a.tags,"flowdev_port:traffic")}},s=`${e.label}`;return F.createLinkCallback({text:s,handler:n})}},{columnName:i18n("page_stats.top.sent"),name:"sent",className:"text-end",data:"sent",orderable:!0,render:e=>pb(e)},{columnName:i18n("page_stats.top.received"),name:"received",className:"text-end",data:"rcvd",orderable:!0,render:e=>pb(e)},{columnName:i18n("traffic"),name:"traffic",className:"text-end",data:"total",orderable:!0,render:e=>pb(e)},{columnName:i18n("percentage"),name:"traffic_perc",className:"text-center",data:"percentage",render:e=>{const t=e.toFixed(1);return a.createProgressBar(t)}},{columnName:i18n("page_stats.top.throughput"),name:"throughput",className:"text-end",data:"throughput",orderable:!0,render:e=>fb(e)}]},hb=[mb],gb=async e=>{const t={host:e},a=x.obj_to_url_params(t),l=`${http_prefix}/lua/pro/rest/v2/get/snmp/device/available_interfaces.lua?${a}`;return await b.http_request(l)},bb=async e=>(await gb(e)).map((e=>null!=e.name&&""!=e.name&&e.name!=e.id?{label:`${e.name} (${e.id})`,id:e.id,name:e.name}:{label:e.id,id:e.id,name:e.id})).sort(a.sortAlphabetically),yb={available_interfaces:gb,snmp_device_ports:bb},wb={hide:"hide",select:"select",input:"input",input:"input_confirm"},xb={ifid:e=>{let t=e.ifname;return null!=e.name&&(t=e.name),{label:t,value:e.ifid}},pool:e=>{let t=e.pool_id;return null!=e.name&&(t=e.name),{label:t,value:e.pool_id}},am_host:e=>({label:`${e.label} ${e.measurement}`,value:`${e.host},metric:${e.measurement_key}`}),blacklist:e=>{let t=`${e.column_name}`;return{label:t,value:t}},device:e=>({label:`${e.name}`,value:`${e.ip}`}),if_index:e=>""},kb={interface:sb,host:ib,snmp_interface:_b,snmp_device:_b,flow_device:hb,flow_interface:hb},$b=[{id:"interface",regex_page_url:"lua/if_stats",label:i18n("page_stats.source_def.interface"),query:"iface",f_map_ts_options:null,source_def_array:[{main_source_def:!0,label:i18n("page_stats.source_def.interface"),regex_type:null,refresh_on_sources_change:!1,sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",sources_function:null,value:"ifid",value_url:null,value_map_sources_res:null,disable_tskey:null,f_get_value_url:null,f_set_value_url:null,ui_type:wb.select}]},{id:"blacklist",regex_page_url:"lua/blacklists_stats",label:i18n("page_stats.source_def.blacklist"),query:"blacklist",f_map_ts_options:(e,t)=>(null==e.series||e.series.forEach((e=>{null!=t.metric.query?e.name=t.metric.label:(e.name=e.name.replaceAll("_"," "),e.type=void 0)})),e),source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"System",value:-1}],value:"ifid",ui_type:wb.hide}]},{id:"vulnerability_scan",regex_page_url:"lua/vulnerability_scan",label:i18n("page_stats.source_def.vuln_scan"),query:"am_vuln_scan",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"System",value:-1}],value:"ifid",ui_type:wb.hide}]},{id:"host",regex_page_url:"lua/host_details",label:i18n("page_stats.source_def.host"),table_value:"host",query:"host",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:wb.select},{main_source_def:!0,label:i18n("page_stats.source_def.host"),regex_type:"ip",value:"host",ui_type:wb.input}]},{id:"mac",regex_page_url:"lua/mac_details",label:i18n("page_stats.source_def.mac"),query:"mac",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:wb.select},{main_source_def:!0,label:i18n("page_stats.source_def.mac"),regex_type:"macAddress",value:"mac",value_url:"host",ui_type:wb.input}]},{id:"network",regex_page_url:"lua/network_details",label:i18n("page_stats.source_def.network"),query:"subnet",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:wb.select},{main_source_def:!0,label:i18n("page_stats.source_def.network"),regex_type:"text",value:"subnet",ui_type:wb.input}]},{id:"as",regex_page_url:"lua/as_details",label:i18n("page_stats.source_def.as"),query:"asn",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:wb.select},{main_source_def:!0,label:i18n("page_stats.source_def.as"),regex_type:"text",value:"asn",ui_type:wb.input}]},{id:"country",regex_page_url:"lua/country_details",label:i18n("page_stats.source_def.country"),query:"country",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:wb.select},{main_source_def:!0,label:i18n("page_stats.source_def.country"),regex_type:"text",value:"country",ui_type:wb.input}]},{id:"os",regex_page_url:"lua/os_details",label:i18n("page_stats.source_def.os"),query:"os",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:wb.select},{main_source_def:!0,label:i18n("page_stats.source_def.os"),regex_type:"text",value:"os",ui_type:wb.input}]},{id:"vlan",regex_page_url:"lua/vlan_details",label:i18n("page_stats.source_def.vlan"),query:"vlan",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:wb.select},{main_source_def:!0,label:i18n("page_stats.source_def.vlan"),regex_type:"text",value:"vlan",ui_type:wb.input}]},{id:"pool",regex_page_url:"lua/pool_details",label:i18n("page_stats.source_def.pool"),query:"host_pool",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:wb.select},{main_source_def:!0,label:i18n("page_stats.source_def.pool"),sources_url:"lua/rest/v2/get/host/pools.lua",value:"pool",ui_type:wb.select}]},{id:"system",regex_page_url:"lua/system_stats",label:i18n("page_stats.source_def.system"),query:"system",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"System",value:-1}],value:"ifid",ui_type:wb.hide}]},{id:"profile",regex_page_url:"lua/profile_details",label:i18n("page_stats.source_def.profile"),query:"profile",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:wb.select},{main_source_def:!0,label:i18n("page_stats.source_def.profile"),regex_type:"text",value:"profile",ui_type:wb.input}]},{id:"redis",regex_page_url:"lua/monitor/redis_monitor.lua",label:i18n("page_stats.source_def.redis"),query:"redis",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"Redis",value:-1}],value:"ifid",ui_type:wb.hide}]},{id:"influx",regex_page_url:"lua/monitor/influxdb_monitor.lua",label:i18n("page_stats.source_def.influx"),query:"influxdb",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"Influx",value:-1}],value:"ifid",ui_type:wb.hide}]},{id:"active_monitoring",regex_page_url:"lua/monitor/active_monitoring_monitor.lua",label:i18n("page_stats.source_def.active_monitoring"),query:"am",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"",value:-1}],value:"ifid",ui_type:wb.hide},{main_source_def:!0,label:i18n("page_stats.source_def.active_monitoring"),sources_url:"lua/rest/v2/get/am_host/list.lua",value:"host",disable_tskey:!0,value_map_sources_res:"am_host",ui_type:wb.select}]},{id:"snmp_interface",id_group:"snmp",regex_page_url:"lua/pro/enterprise/snmp_interface_details",label:i18n("page_stats.source_def.snmp_interface"),query:"snmp_interface",f_map_ts_options:(e,t)=>e,source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"",value:-1}],value:"ifid",ui_type:wb.hide},{label:i18n("page_stats.source_def.device"),regex_type:"ip",sources_url:"lua/pro/rest/v2/get/snmp/device/list.lua",value:"device",value_url:"host",ui_type:wb.select},{main_source_def:!0,label:i18n("page_stats.source_def.snmp_interface"),regex_type:"text",refresh_on_sources_change:!0,sources_function:async e=>{const t=e[1];return(await yb.available_interfaces(t)).map((e=>({label:e.name,value:e.id})))},value:"if_index",value_url:"snmp_port_idx",ui_type:wb.select}]},{id:"snmp_device",id_group:"snmp",regex_page_url:"lua/pro/enterprise/snmp_device_details",label:i18n("page_stats.source_def.snmp_device"),query:"snmp_device",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"",value:-1}],value:"ifid",ui_type:wb.hide},{main_source_def:!0,label:i18n("page_stats.source_def.device"),regex_type:"ip",sources_url:"lua/pro/rest/v2/get/snmp/device/list.lua",value:"device",value_url:"host",ui_type:wb.input}]},{id:"flow_device",regex_page_url:"lua/pro/enterprise/flowdevices_stats",label:i18n("page_stats.source_def.flow_device"),query:"flowdev",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:wb.select},{main_source_def:!0,label:i18n("page_stats.source_def.device"),sources_url:"lua/pro/rest/v2/get/flowdevices/list.lua",regex_type:"ip",value:"device",value_url:"ip",ui_type:wb.input}]},{id:"flow_interface",regex_page_url:"lua/pro/enterprise/flowdevice_interface_details",label:i18n("page_stats.source_def.flow_interface"),query:"flowdev_port",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:wb.select},{label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:wb.input},{main_source_def:!0,label:i18n("page_stats.source_def.port"),regex_type:"port",value:"port",value_url:"snmp_port_idx",ui_type:wb.input}]},{id:"sflow_device",regex_page_url:"lua/pro/enterprise/sflowdevices_stats",label:i18n("page_stats.source_def.sflow_device"),query:"sflowdev",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:wb.select},{main_source_def:!0,label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:wb.input}]},{id:"sflow_interface",regex_page_url:"lua/pro/enterprise/sflowdevice_interface_details",label:i18n("page_stats.source_def.sflow_interface"),query:"sflowdev_port",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:wb.select},{label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:wb.input},{main_source_def:!0,label:i18n("page_stats.source_def.port"),regex_type:"port",value:"port",value_url:"snmp_port_idx",ui_type:wb.input}]},{id:"observation_point",regex_page_url:"lua/pro/enterprise/observation_points",label:i18n("page_stats.source_def.observation_point"),query:"obs_point",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:wb.select},{main_source_def:!0,label:i18n("page_stats.source_def.observation_point"),regex_type:"text",value:"obs_point",value_url:"observation_point",ui_type:wb.input}]},{id:"pod",regex_page_url:"lua/pod_details",label:i18n("page_stats.source_def.pod"),query:"pod",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:wb.select},{main_source_def:!0,label:i18n("page_stats.source_def.pod"),regex_type:"text",value:"pod",ui_type:wb.input}]},{id:"container",regex_page_url:"lua/container_details",label:i18n("page_stats.source_def.container"),query:"container",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:wb.select},{main_source_def:!0,label:i18n("page_stats.source_def.container"),regex_type:"text",value:"container",ui_type:wb.input}]},{id:"nedge",regex_page_url:"lua/pro/nedge/if_stats.lua",label:i18n("page_stats.source_def.nedge"),query:"nedge",source_def_array:[{label:i18n("page_stats.source_def.interface"),regex_type:"text",value:"ifid",value_url:"ifname",ui_type:wb.input}]}],Sb={ui_types:wb,sources_url_el_to_source:xb,sources_types:$b,sources_types_tables:kb},Nb=e=>{let t=[];e.forEach((e=>{let a=function(e){let t=[];e.timeseries.forEach((e=>{t.push(`${e.id}=${e.raw}:${e.past}:${e.avg}:${e.perc_95}`)}));let a=e.metric.schema;null!=e.metric.query&&(a=`${a}+${e.metric.query}`);let l=t.join("|"),n=e.source_array.map((e=>e.value)).join("+"),s=`${e.source_type.id};${n};${a};${l}`;return s}(e);t.push(a)}));let a=t.join(";;");x.set_key_to_url("timeseries_groups",a)};const Cb=(e,t,a)=>{let l=Tb(e,t,a),n=[];for(let e in a.timeseries){let t=a.timeseries[e];n.push({id:e,label:t.label,raw:!0,past:!1,avg:!1,perc_95:!1})}return{id:l,source_type:e,source_array:t,metric:a,timeseries:n}},Ab=async(e,t,a)=>{let l=Vb(),n=await Ob(e,l),s=await Bb(e,l,n),o=Wb(s,t,a);return[Cb(l,n,o)]};async function Eb(e){let t=e.split(";"),a=t[0],l=t[1].split("+"),n=t[2].split("+");n.length<2&&n.push(null);let s=t[3],o=Ib(a),i=await jb(http_prefix,o,l),r=await Hb(http_prefix,o,i,n[0],n[1]),c=function(e,t){let a=e.split("|"),l=/(.+)=(.+):(.+):(.+):(.+)/,n=[];return a.forEach((e=>{let a=l.exec(e);if(a.length>0){let e=a[1],l=t.timeseries[e].label,s=JSON.parse(a[2]),o=JSON.parse(a[3]),i=JSON.parse(a[4]),r=JSON.parse(a[5]);n.push({id:e,label:l,raw:s,past:o,avg:i,perc_95:r})}})),n}(s,r);return{id:Tb(o,i,r),source_type:o,source_array:i,metric:r,timeseries:c}}const Tb=(e,t,a,l,n)=>{let s="";null!=a&&(s=a.schema,null!=a.query&&(s=`${s} - ${a.query}`));let o=e.source_def_array,i=t.map(((e,t)=>{let a=o[t].value;return null==l||l[a]?e.value:null})).filter((e=>null!=e)).join("_"),r=e.id;return n&&null!=e.id_group&&(r=e.id_group),`${r} - ${i} - ${s}`};const Pb=Sb.sources_url_el_to_source,Ub=Sb.sources_types,Ib=e=>Ub.find((t=>t.id==e)),Ob=async(e,t)=>{let a=Db(t);return await jb(e,t,a)};async function Mb(e,t,a){let l=t.source_def_array.map((e=>a[e.value]));return await jb(e,t,l)}const jb=async(e,t,a)=>{null==t&&(t=Vb());let l,n=[];for(let s=0;s<a.length;s++){let o=a[s],i=t.source_def_array[s];if(i.sources_url||i.sources_function){let n=[];n=await Fb(e,t.id,i,a),l=n.find((e=>e.value==o)),null==l&&(l=n[0])}else l={label:o,value:o};n.push(l)}return n};let Lb={};const Fb=async(e,t,l,n)=>{let s=function(e,t,a){let l=`${e}_${t.value}`;return t.refresh_on_sources_change?(l=`${l}_${a.join("_")}`,l):l}(t,l,n);if(null==Lb[s])if(l.sources_url){let t=`${e}/${l.sources_url}`;Lb[s]=b.http_request(t)}else{if(!l.sources_function)return[];Lb[s]=l.sources_function(n)}let o=await Lb[s];if(l.sources_url){let e=Pb[l.value_map_sources_res];if(null==e&&(e=Pb[l.value]),null==e)throw`:Error: metrics-manager.js, missing sources_url_to_source ${l.value} key`;o=o.map((t=>e(t)))}return o.sort(a.sortAlphabetically)};function Rb(e,t){e.source_def_array.forEach((e=>{let a=t[e.value];null!=a&&(null!=e.f_set_value_url?e.f_set_value_url():null!=e.value_url?x.set_key_to_url(e.value_url,a):x.set_key_to_url(e.value,a))}))}const Db=e=>(null==e&&(e=Vb()),e.source_def_array.map((e=>{if(null!=e.f_get_value_url)return e.f_get_value_url();let t=e.value_url;return null==t&&(t=e.value),x.get_url_entry(t)})));let zb={},qb=null;const Bb=async(e,t,a,l)=>{let n=l?.epoch_begin||x.get_url_entry("epoch_begin"),s=l?.epoch_end||x.get_url_entry("epoch_end"),o=`${n}_${s}`;null==t&&(t=Vb()),null==a&&(a=await Ob(e,t));let i=function(e,t,a,l){let n=t.source_def_array.map(((e,t)=>`${e.value}=${a[t].value}`)).join("&"),s="";return null!=l&&(s=`epoch_end=${l.epoch_end}&epoch_begin=${l.epoch_begin}`),`${e}/lua/rest/v2/get/timeseries/type/consts.lua?query=${t.query}&${n}&${s}`}(e,t,a,{epoch_begin:n,epoch_end:s}),r=function(e,t){let a=t.map((e=>e.value)).join("_");return`${e.id}_${a}`}(t,a);o!=qb&&(zb[r]=null,qb=o),null==zb[r]&&(zb[r]=b.http_request(i));let c=await zb[r];return null==c||0==c.length?[{}]:(0==c.some((e=>1==e.default_visible))&&(c[0].default_visible=!0),b.clone(c))},Vb=()=>{let e=window.location.pathname;for(let t=0;t<Ub.length;t+=1){if(1==new RegExp(Ub[t].regex_page_url).test(e))return Ub[t]}throw`source_type not found for ${e}`},Hb=async(e,t,a,l,n,s)=>(await Bb(e,t,a,s)).find((e=>e.schema==l&&e.query==n)),Gb=(e,t)=>{null==t&&(t=Vb());let a={};t.source_def_array.forEach((e=>a[e.value]=!0));let l=e.split(",");for(let e=0;e<l.length;e+=1){let t=l[e].split(":")[0];if(null==a[t])return l[e]}return null},Wb=(e,t,a)=>{let l;return null!=t&&(l=e.find((e=>e.schema==t&&(null==a||e.query==a)))),null==l&&(l=e.find((e=>1==e.default_visible))),null!=l?l:e[0]},Kb={set_timeseries_groups_in_url:Nb,get_timeseries_groups_from_url:async(e,t)=>{if(null==t&&(t=x.get_url_entry("timeseries_groups")),null==t||""==t)return null;let a=t.split(";;");return a.map((async e=>await Eb(e))),Promise.all(a.map((async e=>await Eb(e))))},get_default_timeseries_groups:Ab,get_ts_group:Cb,get_ts_group_id:Tb,sources_types:Ub,sources_types_tables:Sb.sources_types_tables,get_source_type_from_id:Ib,get_current_page_source_type:Vb,get_sources:Fb,get_default_source_array:Ob,get_source_array_from_value_dict:Mb,get_source_array_from_value_array:jb,get_default_source_value_array:Db,get_metrics:Bb,get_metric_from_schema:Hb,get_metric_query_from_ts_query:Gb,get_default_metric:Wb,set_source_value_object_in_url:Rb,ui_types:Sb.ui_types};Dygraph.Plugins.Legend.prototype.select=function(e){var t=e.selectedX,a=e.selectedPoints,l=e.selectedRow,n=e.dygraph.getOption("legend");if("never"!==n){var s=Dygraph.Plugins.Legend.generateLegendHTML(e.dygraph,t,a,this.one_em_width_,l);if(s instanceof Node&&s.nodeType===Node.DOCUMENT_FRAGMENT_NODE?(this.legend_div_.innerHTML="",this.legend_div_.appendChild(s)):this.legend_div_.innerHTML=s,this.legend_div_.style.display="","follow"===n){var o,i=e.dygraph.plotter_.area,r=this.legend_div_.offsetWidth,c=e.dygraph.getOptionForAxis("axisLabelWidth","y"),u=e.dygraph.getHighlightSeries();u?(o=a.find((e=>e.name===u)),o||(o=a[0])):o=a[0];const t=e.dygraph.getNumericOption("legendFollowOffsetX");var d=(null!=o?.x?o.x:1)*i.w+t;d+r+1>i.w&&(d=d-2*t-r-(c-i.x)),this.legend_div_.style.left=c+d+"px",document.addEventListener("mousemove",(e=>{localStorage.setItem("timeseries-mouse-top-position",e.clientY+50+"px")})),this.legend_div_.style.top=localStorage.getItem("timeseries-mouse-top-position")}else if("onmouseover"===n&&this.is_generated_div_){i=e.dygraph.plotter_.area,r=this.legend_div_.offsetWidth;this.legend_div_.style.left=i.x+i.w-r-1+"px",this.legend_div_.style.top=i.y+"px"}}else this.legend_div_.style.display="none"};const Jb=["rgb(144, 238, 144)","rgb(25, 135, 84)","rgb(255, 193, 7)","rgb(220, 53, 69)"];function Yb(e,t,a){if(!t||!e)return function(e){const t=Dygraph.toRGB_(e);return t.r=Math.floor((255+t.r)/2),t.g=Math.floor((255+t.g)/2),t.b=Math.floor((255+t.b)/2),"rgb("+t.r+","+t.g+","+t.b+", 0.9)"}(a);e>t&&(e=t);const l=t/Jb.length;for(let t=1;t<Jb.length+1;t++)if(e<=l*t)return Jb[t-1]}function Zb(e){const t=e.drawingContext,a=e.points,l=e.dygraph.toDomYCoord(0),n=e.dygraph.user_attrs_.valueRange[1],s=e.color;let o=1/0;for(let e=1;e<a.length;e++){const t=a[e].canvasx-a[e-1].canvasx;t<o&&(o=t)}o>90&&(o=90);const i=Math.floor(.95*o);for(var r=0;r<a.length;r++){const e=a[r],o=e.canvasx,c=e.yval;t.fillStyle=Yb(Math.abs(c),Math.abs(n),s),t.fillRect(o-i/2,e.canvasy,i,l-e.canvasy),t.strokeRect(o-i/2,e.canvasy,i,l-e.canvasy)}}const Xb={barChartPlotter:Zb};function Qb(e){let t={};e.forEach(((e,a)=>{null==t[e]?t[e]=[a]:t[e].push(a)}));let a=b.clone(e);for(let e in t){let l=t[e];ey(e,l.length).forEach(((e,t)=>{let n=l[t];a[n]=e}))}return a}function ey(e,t){return[...Array(t).keys()].map(((a,l)=>function(e,t,a){let l=e.replace("#",""),n=parseInt(l.substring(0,2),16),s=parseInt(l.substring(2,4),16),o=parseInt(l.substring(4,6),16),i=ty(n,t,a),r=ty(s,t,a),c=ty(o,t,a);return function(e,t,a){return"#"+ay(e)+ay(t)+ay(a)}(i,r,c)}(e,l+1,t)))}function ty(e,t,a){if(a<=1)return e;let l=Math.trunc(e/2),n=Math.trunc(e+(255-e)/2);return l+t*Math.trunc((n-l)/a)}function ay(e){let t=e.toString(16);return 1==t.length?"0"+t:t}const ly={transformColors:Qb};function ny(e){return{axisLabelFormatter:e,valueFormatter:function(t,a,l,n,s,o){const i=n?.rawData_?.[s][o];let r="";return"object"==typeof i?(i.forEach((t=>{r=`${r} / ${e(t||0)}`})),r=r.substring(3)):r=e(t),r},axisLabelWidth:80}}function sy(e){const t=ly.transformColors(e.colors),a=function(){let e="rgb(255, 255, 255)";return document.getElementsByClassName("body dark").length>0&&(e="rgb(13, 17, 23)"),e}(),l={labelsSeparateLines:!0,legend:"follow",connectSeparatedPoints:!0,includeZero:!0,drawPoints:!0,highlightSeriesBackgroundAlpha:.7,highlightSeriesOpts:{strokeWidth:2,pointSize:3,highlightCircleSize:6},axisLabelFontSize:12,axes:{x:{axisLabelWidth:90}}};return l.customBars=e.customBars,l.labels=e.labels,l.series=e.properties,l.data=e.serie,l.stackedGraph=e.stacked,l.valueRange=e.value_range,l.highlightSeriesBackgroundColor=a,l.colors=t,l.disableTsList=e.disable_ts_list,l.yRangePad=e.yRangePad||1,e.plotter&&(l.plotter=e.plotter),function(e,t){t.formatters.length>1?(e.axes.y1=ny(v.getFormatter(t.formatters[0])),e.axes.y2=ny(v.getFormatter(t.formatters[1]))):1==t.formatters.length&&(e.axes.y=ny(v.getFormatter(t.formatters[0])))}(l,e),l}function oy(e){switch(e){case"dash":return{fillGraph:!1,customBars:!1,strokePattern:Dygraph.DASHED_LINE};case"point":return{fillGraph:!1,customBars:!1,strokeWidth:0,pointSize:2};case"bounds":return{fillGraph:!1,strokeWidth:1,pointSize:1.5,fillAlpha:.5};case"line":return{fillGraph:!1,customBars:!1,strokeWidth:1.5,pointSize:1.5};default:return{fillGraph:!0,customBars:!1,strokeWidth:1,pointSize:1.5,fillAlpha:.5}}}const iy={buildChartOptions:sy,formatSerieProperties:oy},ry=["#C6D9FD","#90EE90","#EE8434","#C95D63","#AE8799","#717EC3","#496DDB","#5A7ADE","#6986E1","#7791E4","#839BE6","#8EA4E8"],cy={default_color:"#C6D9FD","95_perc":"#8EA4E8",avg:"#839BE6"};function uy(e){return`${e.id}`}function dy(e){let t=e,a=0,l=0,n=ry,s=d3v7.schemeCategory10;t.forEach(((t,o)=>{0==t.palette?(e.find(((e,a)=>e.color===t.color&&a!==o))?e[o]=n[a%n.length]:e[o]=t.color,a+=1):1==t.palette&&(e[o]=s[l%s.length],l+=1)}))}function _y(e,t,a,l){null==e&&(e=t);let n="";if(null!=e&&(n=`${e}`),0==l)return e;let s=0,o=a.source_type.source_def_array;for(let e=0;e<o.length;e+=1){if(1==o[e].main_source_def){s=e;break}}return`${`${a.source_array[s].label}`} - ${n}`}function py(e){if("bar"===e)return Xb.barChartPlotter}function fy(e,t,a,l){l.labels.push(e),l.properties[e]={},l.properties[e]=iy.formatSerieProperties(t),l.colors.push(a)}function vy(e,t,a){const l=e.metric.chart_type||"filled",n=t.series||[],s=t.metadata.epoch_begin,o=t.metadata.epoch_step,{serie:i,color:r,formatter:c,serie_name:u,properties:d}=function(e,t){let a={},l=null,n=null,s={};return e.forEach(((e,o)=>{const i=uy(e),r=e.data||[],c=t.metric.timeseries[i],u=!0===c?.invert_direction?1:-1;"metric"==c.type&&(n=_y(c.label,i,t,!0),s=iy.formatSerieProperties("bounds"),a={color:c.color,palette:0},l=t.metric.measure_unit);for(let e=0;e<r.length;e++){let t=null===t?NaN:r[e];null==r[e]&&(r[e]=[0,NaN,0]),"lower_bound"==c.type?r[e][0]=t*u:"metric"==c.type?r[e][1]=t*u:"upper_bound"==c.type&&(r[e][2]=t*u)}})),{serie:[],color:a,formatter:l,serie_name:n,properties:s}}(n,e);let _=s;const p=`${u} ${i18n("lower_value_upper")}`,f=a.formatters.find((e=>e==c));f||a.formatters.push(c),a.plotter=py(l),a.customBars=!0,a.colors.push(r),a.labels.push(p),a.properties[p]=d,Object.keys(i).forEach((e=>{a.serie[_]||(a.serie[_]=[{value:new Date(1e3*_),name:"Time"},{value:i[e],name:p}]),_+=o}))}function my(e,t,a,l){const n=t.series||[],s=e.metric.chart_type||"filled",o=t.metadata.epoch_begin,i=t.metadata.epoch_step,r=e.metric.measure_unit,c=e.metric.max_value||null,u=e.metric.min_value||null,d=t.additional_series;a.value_range=[u,c],a.plotter=py(s),a.stacked||(a.stacked=e.metric.draw_stacked||!1),n.forEach(((t,n)=>{const c=t.data||[],u=e.timeseries[0],_=uy(t),p=e.metric.timeseries[_],f=!0===p.invert_direction?-1:1,v=function(e,t){let a=1==t.use_serie_name?e.name:t.label;return e.ext_label&&(a=e.ext_label),a}(t,p),m=_y(v,_,e,a.use_full_name),h=_y(v+" Avg",_,e,a.use_full_name),g=_y(v+" 95th Perc",_,e,a.use_full_name),b=_y(v+" "+l+" Ago",_,e,a.use_full_name),y=d?d[`${l}_ago`]?.series[n]?.data:null;if(p.hidden)return;const w=a.formatters.find((e=>e==r));w||a.formatters.push(r),fy(m,s,{color:p.color,palette:0},a),1==u?.avg&&fy(h,"point",{color:cy.avg,palette:1},a),1==u?.perc_95&&fy(g,"point",{color:cy.perc_95,palette:1},a),1==u?.past&&fy(b,"dash",{color:cy.past,palette:1},a),function(e,t,a,l,n,s,o,i,r){const c=t.statistics.average,u=t.statistics["95th_percentile"];let d=i;for(let t=0;t<l.length;t++){const i=l[t];if(e.serie[d]||(e.serie[d]=[{value:new Date(1e3*d),name:"Time"}]),null!==i?e.serie[d].push({value:i*s,name:r.serie_name}):e.serie[d].push({value:NaN,name:r.serie_name}),1==a?.avg&&e.serie[d].push({value:c*s,name:r.avg_name}),1==a?.perc_95&&e.serie[d].push({value:u*s,name:r.perc_name}),1==a?.past){const a=n?n[t]:null;a?e.serie[d].push({value:a*s,name:r.past_name}):e.serie[d].push({value:NaN,name:r.past_label})}d+=o}}(a,t,u,c,y,f,i,o,{serie_name:m,avg_name:h,perc_name:g,past_name:b})}))}function hy(e,t,a,l,n){let s=1;const o=[];e.serie.forEach((e=>{o.push([s,e]),s++})),0==o.length&&o.push([1,null]);const i={serie:o,formatters:l,labels:["index"],colors:[],properties:iy.formatSerieProperties(a),stacked:!1,customBars:!1,use_full_name:!1,plotter:py(a),value_range:n,disable_ts_list:!0};return fy(t,a,{color:cy.default_color,palette:0},i),dy(i.colors),iy.buildChartOptions(i)}function gy(e,t,a,l){const n={serie:[],formatters:[],labels:["Time"],colors:[],properties:[],stacked:!1,customBars:!1,use_full_name:null!=l&&l};return e.forEach(((e,l)=>{!function(e,t,a,l){null!=e.source_type.f_map_ts_options&&(t=(0,e.source_type.f_map_ts_options)(t,e));1==(e.metric.bounds||!1)?vy(e,t,l):my(e,t,l,a)}(t[l],e,a,n)})),function(e){const t=[];Object.keys(e.serie).forEach(((a,l)=>{t[l]=[],e.labels.forEach((n=>{let s=!1;for(let o=0;o<e.serie[a].length;o++)if(e.serie[a][o].name==n){t[l].push(e.serie[a][o].value),s=!0;break}0==s&&t[l].push(null)}))})),e.serie=t}(n),dy(n.colors),iy.buildChartOptions(n)}const by={formatSerie:gy,formatSimpleSerie:hy,getSerieId:uy,getSerieName:_y};function yy(e){return by.getSerieId(e)}function wy(e,t,a,l){return by.getSerieName(e,t,a,l)}const xy={"1_chart_x_metric":{value:"1_chart_x_metric",label:i18n("page_stats.layout_1_per_1")},"1_chart_x_yaxis":{value:"1_chart_x_yaxis",label:i18n("page_stats.layout_1_per_y")}};function ky(e){return xy[e]||null}function $y(e,t,a,l){if(a.value==xy["1_chart_x_metric"].value)return Sy(e,t,a,l);let n=function(e,t){let a=[],l=[],n=[],s=[];return t.forEach(((t,o)=>{1==t.metric.draw_stacked?(a.push(e[o]),l.push(t)):(n.push(e[o]),s.push(t))})),{stacked:{tsOptionsArray:a,tsGroupsArray:l},not_stacked:{tsOptionsArray:n,tsGroupsArray:s}}}(e,t);return[...Sy(n.stacked.tsOptionsArray,n.stacked.tsGroupsArray,a,l),...Sy(n.not_stacked.tsOptionsArray,n.not_stacked.tsGroupsArray,a,l)]}function Sy(e,t,a,l){let n=!1;if(a.value==xy["1_chart_x_yaxis"].value){let a={};t.forEach(((t,l)=>{let n=`${(s=t.metric).measure_unit}_${s.scale}`;var s;let o={tsGroup:t,tsOptions:e[l]};null==a[n]?a[n]=[o]:a[n].push(o)})),n=t.length>1||t.length>0&&!0===t[0].source_type.display_full_name;let s=[];for(let e in a){let t=a[e],o=t.map((e=>e.tsOptions)),i=t.map((e=>e.tsGroup)),r=Cy(o,i,l,n);s.push(r)}return s}if(a.value==xy["1_chart_x_metric"].value){n=e.length>1||t.length>0&&!0===t[0].source_type.display_full_name;let a=[];return e.forEach(((e,s)=>{let o=Cy([e],[t[s]],l,n);a.push(o)})),a}return[]}function Ny(e,t,a,l,n){return by.formatSimpleSerie(e,t,a,l,n)}function Cy(e,t,a,l){return by.formatSerie(e,t,a,l)}function Ay(e,t,a){let l=e.source_type.source_def_array.map(((t,l)=>{if(null!=a&&!a[t.value])return null;let n=e.source_array[l].value;return`${t.value}:${n}`})).filter((e=>null!=e)).join(",");return t||null==e.metric.query||(l=`${l},${e.metric.query}`),l}function Ey(e){let t=e.source_type.source_def_array;for(let e=0;e<t.length;e+=1){if(1==t[e].main_source_def)return e}return 0}function Ty(e,t,a,l,n){let s={epoch_begin:t.epoch_begin,epoch_end:t.epoch_end},o={};if(n){let t={zoom:a,limit:180,version:4,ts_compare:a},n=l.map((e=>{let t=Ey(e),a={ts_query:Ay(e),ts_schema:`${e.metric.schema}`};return e.source_type.source_def_array[t].disable_tskey||(a.tskey=e.source_array[t].value),a}));o.url=`${e}/lua/pro/rest/v2/get/timeseries/ts_multi.lua`,o.body={ts_requests:n,...s,...t}}else{let t=`${e}/lua/rest/v2/get/timeseries/ts.lua`,n=`ts_compare=${a}&version=4&zoom=${a}&limit=180`,i=l[0],r=Ey(i),c=Ay(i),u={...s,ts_query:c,ts_schema:`${i.metric.schema}`};i.source_type.source_def_array[r].disable_tskey||(u.tskey=i.source_array[r].value);let d=x.add_obj_to_url(u,n);o.url=`${t}?${d}`}return o}async function Py(e,t,a,l,n){let s;const o=Ty(e,t,a,l,n);if(n){let e={"Content-Type":"application/json"};s=await b.http_request(o.url,{method:"post",headers:e,body:JSON.stringify(o.body)})}else{s=[await b.http_request(o.url)]}return s}const Uy={groupsOptionsModesEnum:xy,tsArrayToOptions:Cy,formatSimpleSerie:Ny,tsArrayToOptionsArray:$y,getGroupOptionMode:ky,getSerieId:yy,getSerieName:wy,getTsChartsOptions:Py,getTsChartsDataUrl:Ty,getTsQuery:Ay,getMainSourceDefIndex:Ey},Iy=e=>(pl("data-v-103cd911"),e=e(),fl(),e),Oy={class:"nav nav-tabs"},My={class:"form-group ms-2 me-2 mt-3 row"},jy={class:"form-group row"},Ly={class:"col-form-label col-sm-4"},Fy={class:"col-sm-8"},Ry={key:0,class:"form-group ms-2 me-2 mb-2 mt-3 row"},Dy={class:"form-group row"},zy={class:"col-form-label col-sm-4"},qy={class:"col-sm-8"},By=["title"],Vy={key:0,class:"form-group mt-2 row"},Hy={class:"col-form-label col-sm-4"},Gy={class:"col-sm-8"},Wy={key:1,class:"form-group mt-2 row"},Ky={class:"col-form-label col-sm-4"},Jy={class:"col-sm-8"},Yy=["onInput","onUpdate:modelValue","pattern"],Zy={key:2,class:"form-group mt-2 row"},Xy={class:"col-form-label col-sm-4"},Qy={class:"col-sm-7"},ew=["onInput","onUpdate:modelValue","pattern"],tw={class:"col-sm-1"},aw=["onClick","title","disabled"],lw=[Iy((()=>Vs("i",{class:"fas fa-refresh"},null,-1)))],nw={class:"form-group row mt-2",style:{"text-align":"end"}},sw={class:"col-sm-12"},ow=["disabled"],iw={class:"form-group ms-2 me-2 mt-3 row"},rw={class:"form-group row"},cw={class:"col-form-label col-sm-4"},uw={class:"col-sm-8"},dw=["disabled"];var _w={__name:"modal-timeseries",props:{sources_types_enabled:Object},emits:["apply"],setup(e,{expose:t,emit:a}){const l=e,n=va(null),s=va(null),o=va("select");let i=Kb.get_current_page_source_type();const r=Kb.sources_types,c=va(i),u=Kb.ui_types,d=va([]),_=va([]),p=va([]),f=va(""),v=va([]),m=va(!1),h=xo((()=>{if(0==m.value)return!1;for(let e=0;e<v.value.length;e+=1){let t=v.value[e];if(null==t)continue;let a=new RegExp(t),l=p.value[e];if(0==a.test(l))return!1}return!0})),g=va(!1),y=va([]),w=va({}),x=va([]),k=va([]);let $=null;dn((()=>{r.forEach((e=>{l.sources_types_enabled[e.id]}))})),_n((async()=>{$=async function(){await N(),I()}()}));function S(e){o.value=e}async function N(){m.value=!1,function(){let e=c.value?.source_def_array.map((e=>e.regex_type));null==e&&(e=[]);v.value=e.map((e=>null==e?null:yp.get_data_pattern(e)))}(),function(){let e=c.value;g.value=e.source_def_array.map((e=>e.ui_type==u.hide)).every((e=>1==e))}(),await async function(){let e=c.value.source_def_array,t=[],a=await Kb.get_default_source_array(http_prefix,c.value),l=a.map((e=>e.value));for(let a=0;a<e.length;a+=1){let n=await Kb.get_sources(http_prefix,c.value.id,e[a],l);t.push(n)}_.value=a,d.value=t,p.value=l,P()}(),await U()}async function C(){m.value=!1,p.value.forEach(((e,t)=>{if(c.value.source_def_array[t].ui_type==u.input){A(_.value[t],e)}})),await async function(){await U()}(),P()}function A(e,t){e.value=t,e.label=t}function E(e,t,a){m.value=!0,1==a&&T(e,t)}async function T(e,t){e.ui_type==u.input_confirm&&A(_.value[t],p.value[t]);let a=c.value.source_def_array,l=_.value.map((e=>e.value));for(let e=t+1;e<a.length;e+=1){const t=a[e];if(!t.refresh_on_sources_change)continue;let n=await Kb.get_sources(http_prefix,c.value.id,t,l);d.value[e]=n,n.length>0?_.value[e]=n[0]:(_.value[e]={label:"",value:""},console.warn(`No sources availables to select for ${c.value.id} sorce_def`))}}function P(){f.value=`${_.value.filter((e=>null!=e.label&&""!=e.label)).map((e=>e.label)).join(" - ")}`}async function U(){y.value=await Kb.get_metrics(http_prefix,c.value,_.value),y.value.sort(NtopUtils.sortAlphabetically),w.value=Kb.get_default_metric(y.value),I()}function I(e){k.value=[];let t=w.value.timeseries;for(let e in t)k.value.push({id:e,label:t[e].label,raw:!0,past:!1,avg:!1,perc_95:!1})}function O(e){let t=e.source_type.label,a=Uy.getMainSourceDefIndex(e);return`${t} - ${e.source_array[a].label} - ${e.metric.label}`}function M(e){let t,a,l;return null==e?(t=c.value,a=_.value,l=w.value):(t=e.source_type,a=e.source_array,l=e.metric),Kb.get_ts_group_id(t,a,l)}const j=e=>{x.value=x.value.filter((t=>M(t)!=e))},L=(e,t)=>{let l=x.value.findIndex((t=>t.id==e.id));l<0?x.value.push(e):x.value[l]=e,t&&a("apply",x.value)},F=()=>{if("add"==o.value){let e={id:M(),source_type:c.value,source_array:b.clone(_.value),metric:w.value,timeseries:b.clone(k.value)};L(e)}a("apply",x.value),R()},R=()=>{n.value.close()},D=e=>i18n(e);return t({show:async e=>{x.value=e,await $,o.value="select",n.value.show()},close:R,add_ts_group:L,set_timeseries_groups:(e,t)=>{x.value=e,t&&a("apply",x.value)}}),(e,t)=>(Ps(),Ls(np,{onShowed:t[8]||(t[8]=e=>{}),ref_key:"modal_id",ref:n},{title:ml((()=>[Ks(te(D("modal_timeseries.title")),1)])),body:ml((()=>[Vs("ul",Oy,[Vs("li",{class:"nav-item",onClick:t[0]||(t[0]=e=>S("add"))},[Vs("a",{class:K(["nav-link",{active:"add"==o.value}]),href:"#"},te(D("modal_timeseries.add_timeseries")),3)]),Vs("li",{class:"nav-item",onClick:t[1]||(t[1]=e=>S("select"))},[Vs("a",{class:K(["nav-link",{active:"select"==o.value}]),href:"#"},te(D("modal_timeseries.manage_timeseries")),3)])]),Ys(" action add "),"add"==o.value?(Ps(),js(Ss,{key:0},[Ys(" Sources Types "),Vs("div",My,[Vs("div",jy,[Vs("label",Ly,[Vs("b",null,te(D("modal_timeseries.source_type")),1)]),Vs("div",Fy,[Hs(l_,{selected_option:c.value,"onUpdate:selected_option":t[2]||(t[2]=e=>c.value=e),onSelect_option:t[3]||(t[3]=e=>N()),options:ya(r)},null,8,["selected_option","options"])])])]),Ys(" Sources "),g.value?Ys("v-if",!0):(Ps(),js("div",Ry,[Vs("div",Dy,[Vs("label",zy,[Vs("b",null,te(D("modal_timeseries.source")),1)]),Vs("div",qy,[wn(Vs("input",{class:"form-control","onUpdate:modelValue":t[4]||(t[4]=e=>f.value=e),title:f.value,style:{overflow:"hidden","text-overflow":"ellipsis","white-space":"nowrap"},type:"text",disabled:""},null,8,By),[[Mi,f.value]])])]),(Ps(!0),js(Ss,null,En(c.value.source_def_array,((e,t)=>(Ps(),js(Ss,null,[Ys(" select "),e.ui_type==ya(u).select?(Ps(),js("div",Vy,[Vs("label",Hy,[Vs("b",null,te(e.label),1)]),Vs("div",Gy,[Hs(l_,{selected_option:_.value[t],"onUpdate:selected_option":e=>_.value[t]=e,onSelect_option:a=>E(e,t,!0),options:d.value[t]},null,8,["selected_option","onUpdate:selected_option","onSelect_option","options"])])])):Ys("v-if",!0),Ys(" end select "),Ys(" input text "),e.ui_type==ya(u).input?(Ps(),js("div",Wy,[Vs("label",Ky,[Vs("b",null,te(e.label),1)]),Vs("div",Jy,[wn(Vs("input",{class:"form-control",onInput:a=>E(e,t),"onUpdate:modelValue":e=>p.value[t]=e,pattern:v.value[t],required:"",type:"text",placeholder:""},null,40,Yy),[[Mi,p.value[t]]])])])):Ys("v-if",!0),Ys(" input text "),Ys(" input confirm text "),e.ui_type==ya(u).input_confirm?(Ps(),js("div",Zy,[Vs("label",Xy,[Vs("b",null,te(e.label),1)]),Vs("div",Qy,[wn(Vs("input",{class:"form-control",onInput:a=>E(e,t),"onUpdate:modelValue":e=>p.value[t]=e,pattern:v.value[t],required:"",type:"text",placeholder:""},null,40,ew),[[Mi,p.value[t]]])]),Vs("div",tw,[Vs("button",{type:"button",class:"btn btn-link btn-sm",onClick:a=>T(e,t),title:D(e.refresh_i18n),disabled:!ya(h)},lw,8,aw)])])):Ys("v-if",!0),Ys(" input confirm text ")],64)))),256)),wn(Vs("div",nw,[Vs("div",sw,[Vs("button",{type:"button",onClick:C,disabled:0==ya(h),class:"btn btn-primary"},te(D("modal_timeseries.apply_source")),9,ow)])],512),[[Yi,ya(h)]])])),Ys(" end Sources "),Ys(" Metrics "),Vs("div",iw,[Vs("div",rw,[Vs("label",cw,[Vs("b",null,te(D("modal_timeseries.metric")),1)]),Vs("div",uw,[Hs(l_,{ref_key:"select_search_metrics",ref:s,onSelect_option:t[5]||(t[5]=e=>I()),selected_option:w.value,"onUpdate:selected_option":t[6]||(t[6]=e=>w.value=e),options:y.value},null,8,["selected_option","options"])])])]),Hs(Qg,{title:D("modal_timeseries.timeseries_list"),timeseries:k.value,"onUpdate:timeseries":t[7]||(t[7]=e=>k.value=e)},null,8,["title","timeseries"])],64)):Ys("v-if",!0),Ys(" action == add "),Ys(" action select"),"select"==o.value?(Ps(),js(Ss,{key:1},[(Ps(!0),js(Ss,null,En(x.value,(e=>(Ps(),Ls(Qg,{id:M(e),title:O(e),timeseries:e.timeseries,"onUpdate:timeseries":t=>e.timeseries=t,show_delete_button:x.value.length>1,onDelete_ts:j},null,8,["id","title","timeseries","onUpdate:timeseries","show_delete_button"])))),256)),Ys(" v-for timeseries_groups_added ")],64)):Ys("v-if",!0),Ys(" action == select ")])),footer:ml((()=>[wn(Vs("button",{type:"button",onClick:F,disabled:ya(h),class:"btn btn-primary"},te(D("modal_timeseries.add")),9,dw),[[Yi,"add"==o.value]]),wn(Vs("button",{type:"button",onClick:F,class:"btn btn-primary"},te(D("modal_timeseries.apply")),513),[[Yi,"select"==o.value]])])),_:1},512))}};lp("\ninput[data-v-103cd911]:invalid {\n  border-color: #ff0000;\n}\n.custom-margin[data-v-103cd911] {\nmargin-left: -0.4rem;\n}\n.warn[data-v-103cd911] {\nborder-color: #ffd500;\nborder-style: solid;\n}\n"),_w.__scopeId="data-v-103cd911",_w.__file="http_src/vue/modal-timeseries.vue";const pw={class:"form-group mt-2 row"},fw={class:"col-form-label col-sm-4"},vw={class:"col-sm-6"},mw={class:"col-form-label col-sm-2"},hw=["disabled"];var gw={__name:"modal-download-file",props:{title:String,ext:String},emits:["download"],setup(e,{expose:t,emit:a}){const l=e,n=va(null),s=va(""),o=String.raw`^[a-zA-Z_\-1-9]*$`,i=xo((()=>new RegExp(o).test(s.value)));function r(){let e=`${s.value}.${l.ext}`;a("download",e),c()}const c=()=>{n.value.close()};t({show:e=>{null==e&&(e=""),e=e.replaceAll(/[^a-zA-Z0-9]/g,"_"),s.value=e,n.value.show()},close:c}),_n((()=>{}));const u=e=>i18n(e);return(e,t)=>(Ps(),Ls(np,{ref_key:"modal_id",ref:n},{title:ml((()=>[Ks(te(l.title),1)])),body:ml((()=>[Vs("div",pw,[Vs("label",fw,[Vs("b",null,te(u("modal_download_file.filename"))+":",1)]),Vs("div",vw,[wn(Vs("input",{class:"form-control",pattern:o,"onUpdate:modelValue":t[0]||(t[0]=e=>s.value=e),type:"text",required:""},null,512),[[Mi,s.value]])]),Vs("label",mw," ."+te(l.ext),1)])])),footer:ml((()=>[Vs("button",{type:"button",onClick:r,class:"btn btn-primary",disabled:0==ya(i)},te(u("modal_download_file.download")),9,hw)])),_:1},512))}};lp("\ninput[data-v-59120eb8]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-59120eb8] {\n  cursor: not-allowed;\n}\n"),gw.__scopeId="data-v-59120eb8",gw.__file="http_src/vue/modal-download-file.vue";const bw={key:0},yw={class:"text-center"},ww=Vs("tbody",null,null,-1);var xw={__name:"datatable",props:{id:String,table_buttons:Array,columns_config:Array,data_url:String,enable_search:Boolean,filter_buttons:{type:Array,required:!1},table_config:{type:Object,required:!1},base_url:String,base_params:Object},emits:["drawed"],setup(e,{expose:t,emit:a}){const l=e,n=so(),s=Co(),o=(e,t)=>{if((t||l.id)&&null!=e.dir){const a=[e.col,e.dir],n=`${t||l.id}_sorting_preferences`;localStorage.setItem(n,a)}},i=e=>{let t=null;if(e||l.id){const a=`${e||l.id}_sorting_preferences`,n=localStorage.getItem(a);if(n){const e=n.split(",");2==e.length&&(t=[Number(e[0]),e[1]])}}return t};let r=l.base_params;const c=va(null),u=i()||[0,"asc"];let d=null;_n((()=>{!function(){let e=!1,t={serverSide:!1,scrollX:!1,destroy:!0,searching:l.enable_search,order:[u],pagingType:"full_numbers",columns:l.columns_config,autoWidth:!1,responsive:!0,ajax:{method:"get",url:l.data_url,dataSrc:"rsp",data:(e,t)=>{if(0==Object.keys(e).length)return;const a=t.oInstance.api(),l=e.order[0].column,n=a.column(l).name()||void 0;return e.order&&(e.order=e.order[0].dir,e.sort=n),void 0!==e.columns&&delete e.columns,void 0!==e.search&&(e.map_search=e.search.value,delete e.search),e},beforeSend:function(){NtopUtils.showOverlays()}},drawCallback:function(e){NtopUtils.hideOverlays(),a("drawed"),ntopng_events_manager.emit_custom_event(ntopng_custom_events.DATATABLE_LOADED),o(e.aLastSort[0])}};for(const e in l.table_config||{})t[e]=l.table_config[e];let n=DataTableUtils.getStdDatatableConfig(l.table_buttons);n=DataTableUtils.extendConfig(n,t),d=$(c.value).DataTable(n),p();for(const t of l.filter_buttons||[]){const a=x.get_url_entry(t.filterMenuKey);if(a&&""!=a){let l=0;t.filters.forEach((e=>{e.currently_active=!1,l+=1,e.id==a&&(e.currently_active=!0,l-=1)})),l==t.filters.length&&(x.set_key_to_url(t.filterMenuKey,""),e=!0)}new DataTableFiltersMenu({filterTitle:t.filterTitle,tableAPI:d,filters:t.filters,filterMenuKey:t.filterMenuKey,columnIndex:t.columnIndex,url:l.data_url,id:t.id,removeAllEntry:t.removeAllEntry,callbackFunction:t.callbackFunction}).init()}if(e&&l.base_params){const e=x.get_url_entries();for(const[t,a]of e)r[t]=a;d.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,r)),f()}}()}));let _=null;function p(){if(null==_&&(_=function(){if(null==d)return;let e=$(d.context[0].nTableWrapper);return $($(".row .text-end",e).children()[0])}()),null==s||null==s.menu)return;let e=s.menu();if(null==e||0==e.length)return;let t=s.menu()[0],a=$("<div class='d-inline-block'></div>")[0];const{vNode:l,el:o}=function(e,{props:t,children:a,element:l,app:n}={}){let s=l,o=Hs(e,t,a);return n&&n._context&&(o.appContext=n._context),s?lr(o,s):"undefined"!=typeof document&&lr(o,s=document.createElement("div")),{vNode:o,destroy:()=>{s&&lr(null,s),s=null,o=null},el:s}}(t,{app:n?.appContext?.app,element:a});let i=$(d.context[0].nTableWrapper);$($(".row .text-end",i).children()[0]).append(o)}const f=()=>{null!=d&&d.ajax.reload()},v=e=>{DataTableUtils.deleteButtonHandlers(e)};let m=!1;const h=()=>{d.clear(),d.destroy(!0),m=!0,l.columns_config.filter((e=>null!=e.handlerId)).forEach((e=>{v(e.handlerId)}))};return t({reload:f,delete_button_handlers:v,destroy_table:h,update_url:e=>{null!=d&&d.ajax.url(e)},refresh_menu:()=>{let e=$(d.context[0].nTableWrapper);$($(".row .text-end",e).children()[0]).html(""),p()},is_last_sorting_available:e=>null!=i(e),load_last_sort:i,save_last_sort:o,search_value:function(e){null!=d&&d.search(e).draw()}}),vn((()=>{1!=m&&h()})),(t,a)=>(Ps(),js(Ss,null,[(Ps(),js("div",bw,[Ys(' <slot name="menu"></slot> ')])),Vs("div",null,[Vs("table",{ref_key:"table_id",ref:c,class:"table w-100 table-striped table-hover table-bordered"},[Vs("thead",null,[Vs("tr",null,[(Ps(!0),js(Ss,null,En(e.columns_config,(e=>(Ps(),js("th",yw,te(e.columnName),1)))),256))])]),ww],512)])],64))},__file:"http_src/vue/datatable.vue"};const kw={key:0,class:"table table-striped table-bordered col-sm-12",style:{}},$w=["innerHTML"],Sw={class:""},Nw=["innerHTML"],Cw=["innerHTML"],Aw={class:"table table-striped table-bordered"},Ew=["innerHTML"],Tw=["colspan","innerHTML"];var Pw={__name:"bootstrap-table",props:{id:String,columns:Array,rows:Array,print_html_column:Function,print_html_row:Function,print_html_title:Function,horizontal:Boolean,wrap_columns:Boolean},setup:e=>(t,a)=>(Ps(),js(Ss,null,[Ys(" Normal table "),e.horizontal&&0!=e.horizontal?(Ps(),js(Ss,{key:1},[Ys(" Horizontal table, with th on the rows "),Vs("table",Aw,[Vs("tbody",null,[(Ps(!0),js(Ss,null,En(e.rows,(t=>(Ps(),js("tr",null,[Vs("th",{class:"col 5",innerHTML:e.print_html_title(t.name)},null,8,Ew),(Ps(!0),js(Ss,null,En(t.values,(a=>(Ps(),js("td",{colspan:[t.values.length<=1?2:1],innerHTML:e.print_html_row(a)},null,8,Tw)))),256))])))),256))])])],2112)):(Ps(),js("table",kw,[Vs("thead",null,[Vs("tr",null,[(Ps(!0),js(Ss,null,En(e.columns,(t=>(Ps(),js("th",{scope:"col",class:K(t.class),innerHTML:e.print_html_column(t)},null,10,$w)))),256))])]),Vs("tbody",null,[(Ps(!0),js(Ss,null,En(e.rows,(t=>(Ps(),js("tr",Sw,[1==e.wrap_columns?(Ps(!0),js(Ss,{key:0},En(e.columns,(a=>(Ps(),js("td",{scope:"col",style:{height:"2.5rem"},class:K(a.class)},[Vs("div",{class:"wrap-column",style:V(a.style),innerHTML:e.print_html_row(a,t)},null,12,Nw)],2)))),256)):(Ps(!0),js(Ss,{key:1},En(e.columns,(a=>(Ps(),js("td",{scope:"col",class:K([a.class,"wrap_column"]),style:V(a.style),innerHTML:e.print_html_row(a,t)},null,14,Cw)))),256))])))),256))])]))],2112))};lp("\n.wrap-column[data-v-0533335c] {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  max-width:100%;\n}\n"),Pw.__scopeId="data-v-0533335c",Pw.__file="http_src/vue/bootstrap-table.vue";const Uw=e=>(pl("data-v-937058e4"),e=e(),fl(),e),Iw={class:"col-12 mb-2 mt-2"},Ow={class:"card h-100 overflow-hidden"},Mw=["title"],jw=[Uw((()=>Vs("i",{class:"fas fa-lg fa-camera-retro"},null,-1)))],Lw=["title"],Fw=[Uw((()=>Vs("i",{class:"fas fa-lg fa-download"},null,-1)))],Rw=["disabled","title"],Dw=[Uw((()=>Vs("i",{class:"fas fa-lg fa-file-image"},null,-1)))],zw=["title"],qw=[Uw((()=>Vs("i",{class:"fas fa-lg fa-table"},null,-1)))],Bw={class:"form-group ms-1 me-1 mt-1"},Vw={class:"inline select2-size me-2 mt-2"},Hw={class:"inline select2-size me-2 mt-2"},Gw={key:0,class:"mt-4 card card-shadow"},Ww={class:"card-body"},Kw={key:1,class:"mt-4 card card-shadow"},Jw={class:"card-body"},Yw={key:0,class:"inline select2-size me-2 mt-2"};var Zw={__name:"page-stats",props:{csrf:String,is_ntop_pro:Boolean,source_value_object:Object,sources_types_enabled:Object,sources_types_top_enabled:Object,enable_snapshots:Boolean,is_history_enabled:Boolean,traffic_extraction_permitted:Boolean,is_dark_mode:Boolean},setup(e){const t=e,l=e=>i18n(e);let n="date_time_picker",s=ntopChartApex.typeChart.TS_LINE;va({}),va(!1);const o=va([]),i=va(null),r=va(null),c=va(null),u=va(null),d=va(null),_=/^((?!chrome|android).)*safari/i.test(navigator.userAgent),p=l(_?"page_stats.download_image_disabled":"page_stats.title_modal_download_file"),f=va(null),m=va([]),h=va({});Kb.get_current_page_source_type();const g=va(!1);va(!1);const w=va([]),k=b.object_to_array(Uy.groupsOptionsModesEnum),$=va(function(){let e=x.get_url_entry("timeseries_groups_mode");if(null!=e&&""!=e)return Uy.getGroupOptionMode(e);return k[0]}());let S=null;const N={label:i18n("page_stats.custom_metrics"),currently_active:!1},C="timeseries",A=va(!1),E=[{value:"10_min",label:i18n("show_alerts.presets.10_min"),currently_active:!1},{value:"30_min",label:i18n("show_alerts.presets.30_min"),currently_active:!0},{value:"hour",label:i18n("show_alerts.presets.hour"),currently_active:!1},{value:"2_hours",label:i18n("show_alerts.presets.2_hours"),currently_active:!1},{value:"6_hours",label:i18n("show_alerts.presets.6_hours"),currently_active:!1},{value:"12_hours",label:i18n("show_alerts.presets.12_hours"),currently_active:!1},{value:"day",label:i18n("show_alerts.presets.day"),currently_active:!1},{value:"week",label:i18n("show_alerts.presets.week"),currently_active:!1},{value:"month",label:i18n("show_alerts.presets.month"),currently_active:!1},{value:"year",label:i18n("show_alerts.presets.year"),currently_active:!1},{value:"custom",label:i18n("show_alerts.presets.custom"),currently_active:!1,disabled:!0}];dn((async()=>{if("va_historical"==x.get_url_entry("page")){let e=[];Z.forEach((t=>{t.va&&e.push(t)})),Z=e}t.source_value_object.is_va&&(f.value="hour",b.check_and_set_default_time_interval("day")),function(){if(null==t.source_value_object)return;let e=Kb.get_current_page_source_type();Kb.set_source_value_object_in_url(e,t.source_value_object)}()})),_n((async()=>{!async function(){let e,t,a=!0,l=await Kb.get_timeseries_groups_from_url(http_prefix);if(null==l){a=!1,e=x.get_url_entry("ts_schema");let n=x.get_url_entry("ts_query");null!=n&&""!=n&&(t=Kb.get_metric_query_from_ts_query(n)),""==e&&(e=null),l=await Kb.get_default_timeseries_groups(http_prefix,e,t)}m.value=await T(a),h.value=1==a?N:Kb.get_default_metric(m.value,e,t);A.value=!0,await W(l,!0,!0)}(),await Promise.all([ntopng_sync.on_ready(n)])}));async function T(e,l){let n=await Kb.get_metrics(http_prefix);if(!l&&null==e)return n.value;if(e&&n.push(N),(null==q||l)&&(q=await async function(){if(!t.enable_snapshots)return;let e=`${http_prefix}/lua/pro/rest/v2/get/filters/snapshots.lua?page=${C}`,a=await b.http_request(e),l=b.object_to_array(a).map((e=>({...e,is_snapshot:!0,label:`${e.name}`,group:"Snapshots"})));return l}()),t.enable_snapshots){q.forEach((e=>n.push(e)))}return n.length>0&&n.sort(a.sortAlphabetically),n}async function P(e){let t=Kb.get_current_page_source_type(),a=await Kb.get_default_source_array(http_prefix,t);return[Kb.get_ts_group(t,a,e)]}const U=async(e,t,a)=>{let l=Kb.get_source_type_from_id(e),n=await Kb.get_source_array_from_value_dict(http_prefix,l,t),s=await Kb.get_metric_from_schema(http_prefix,l,n,a);O(Kb.get_ts_group(l,n,s))},I=async(e,t)=>{let a=m.value.find((a=>a.schema==e&&a.query==t));null!=a?O((await P(a))[0]):console.error(`metric = ${e}, query = ${t} not found.`)};function O(e){c.value.set_timeseries_groups(S),c.value.add_ts_group(e,!0)}async function M(e){if(1==e.is_snapshot){let t=e.filters,a=x.get_url_entry("timeseries_groups",t),l=await Kb.get_timeseries_groups_from_url(http_prefix,a);$.value=Uy.getGroupOptionMode(x.get_url_entry("timeseries_groups_mode",t)),await W(l,!0,!1)}else await async function(){let e=await async function(){return P(h.value)}();await W(e,!0,!1)}(),V(!1)}function j(e){let a=h.value.label==N.label;W(S,!0,!1,e.refresh_data),async function(){if(!t.is_ntop_pro)return;let e=Y.value?.table_config_def;if(null==e)return;let a=K(e.ts_group,e.table_def.table_value,e.table_def.view,e.table_source_def_value_dict);r.value.update_url(a),r.value.reload()}(),V(a,!0)}function L(e){}function F(){u.value.show()}function R(){null!=S&&c.value.show(S)}function D(e){return async t=>w.value[e].chart_options}let z,q=null;function B(){V(h.value.label==N.label,!0)}async function V(e,t){m.value=await T(e,t),e&&(h.value=N)}async function H(e){V(!0),await W(e,!0,!0)}function G(){W(S,!1,!1)}async function W(e,a,l,n){let s=y.get_status(),i=function(e){let t=Number.parseInt((e.epoch_end-e.epoch_begin)/60);return t<=5?"5m":t<=30?"30m":t<=60?"1h":t<=1440?"1d":t<=10080?"1w":t<=43200?"1M":"1Y"}(s);if(a){if(null==e)return e=[],void console.warn("Empty timeseries_groups request");z=await Uy.getTsChartsOptions(http_prefix,s,i,e,t.is_ntop_pro)}!function(e,t){e.forEach(((e,a)=>{let l=t[a],n=l?.metadata?.label;if(null!=n){let t=Uy.getMainSourceDefIndex(e);e.source_array[t].label=n}}))}(e,z);let r=Uy.tsArrayToOptionsArray(z,e,$.value,i);n?function(e){e.forEach(((e,t)=>{o.value[t].update_chart_series(e?.serie)}))}(r):function(e){w.value=e.map(((e,t)=>({key:b.get_random_string(),chart_options:e})))}(r),function(e,t,a){const l=e.length>1;if(g.value=t.map((e=>!e.source_type.disable_stats)).reduce(((e,t)=>e|t),!1),!g.value)return;const n=e=>{let t={bps:"bytes",fps:"flows",alertps:"alerts",hitss:"hits",pps:"packets"};return null!=t[e]?t[e]:e};X.value=[],e.forEach(((e,a)=>{let s=t[a];1!=s.source_type.disable_stats&&e.series?.forEach(((e,t)=>{let a,o=Uy.getSerieId(e),i=s.metric.timeseries[o],r=v.getFormatter(s.metric.measure_unit),c=i.label;if(i.hidden)return;if(1==i.use_serie_name&&(c=e.name),e?.data.length>t&&(a=e.statistics),null==a)return;e.ext_label&&(c=e.ext_label),c=Uy.getSerieName(c,o,s,l);let u=n(s.metric.measure_unit),d={metric:c,total:v.getFormatter(u)(a.total),perc_95:r(a["95th_percentile"]),avg:r(a.average),max:r(a.max_val),min:r(a.min_val)};X.value.push(d)}))}))}(z,e),l&&function(e,a){if(!t.is_ntop_pro)return;null==e&&(e=S);null==a&&(a=y.get_status());let l=Kb.sources_types_tables,n={};e.forEach((e=>{e.source_type;let t=Kb.get_ts_group_id(e.source_type,e.source_array);n[t]=e}));let s={};J.value=[];for(let e in n){let o=n[e],i=Uy.getMainSourceDefIndex(o),r=o.source_array[i],c=o.source_type,u=l[c.id];null!=u&&u.forEach((e=>{let l=t.sources_types_top_enabled[e.table_value];if(null==l)return;if(!l[e.view])return;let n=e.table_source_def_value_dict,i=K(o,e.table_value,e.view,n,a),u=Kb.get_ts_group_id(o.source_type,o.source_array,null,n,!0);if(u=`${u}_${e.view}`,null!=s[u])return;s[u]=!0;let d,_=`${e.table_value}_${e.view}_${u}`;d=null==e.f_get_label?`${e.title} - ${c.label} ${r.label}`:e.f_get_label(o);const p={ts_group:o,table_def:e,table_buttons:[],data_url:i,enable_search:!0,table_config:{serverSide:!1,order:[[e.default_sorting_columns,"desc"]],columnDefs:e.columnDefs||[]}};p.columns_config=e.columns.map((e=>{let l={is_history_enabled:t.is_history_enabled},n={visible:!e.render_if||e.render_if(l),...e};return null==n.className&&(n.className="text-nowrap"),null==n.responsivePriority&&(n.responsivePriority=1),n.render=e.render.bind({add_metric_from_metric_schema:I,add_ts_group_from_source_value_dict:U,sources_types_enabled:t.sources_types_enabled,status:a,source_type:c,source_array:o.source_array}),n}));let f={value:_,label:d,table_config_def:p};J.value.push(f)}))}if(null!=Y.value&&J.value.find((e=>e.value==Y.value.value)))return;Y.value=J.value.find((e=>1==e.table_config_def.default)),null==Y.value&&(Y.value=J.value[0])}(e,s),S=e,x.set_key_to_url("timeseries_groups_mode",$.value.value),Kb.set_timeseries_groups_in_url(S)}function K(e,t,a,l,n){null==n&&(n=y.get_status());let s=Uy.getTsQuery(e,!0,l),o=`${http_prefix}/lua/pro/rest/v2/get/${t}/top/ts_stats.lua`,i={zoom:"5m",ts_query:s,epoch_begin:`${n.epoch_begin}`,epoch_end:`${n.epoch_end}`,detail_view:`${a}`,new_charts:"true"};return`${o}?${x.add_obj_to_url(i,"")}`}const J=va([]),Y=va({});let Z=[{id:"metric",label:l("page_stats.metric"),va:!0},{id:"avg",label:l("page_stats.average"),class:"text-end",va:!0},{id:"perc_95",label:l("page_stats.95_perc"),class:"text-end",va:!0},{id:"max",label:l("page_stats.max"),class:"text-end",va:!0},{id:"min",label:l("page_stats.min"),class:"text-end",va:!0},{id:"total",label:l("page_stats.total"),class:"text-end",va:!1}];const X=va([]);function Q(){let e=y.get_status(),t={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end},a=x.obj_to_url_params(t);const l=`${http_prefix}/lua/pro/db_search.lua?${a}`;x.go_to_url(l)}const ee=va(null);function te(){ee.value.show()}function ae(){if(!z?.length)return;let e=S[0],t=Uy.getSerieName(null,null,e);d.value.show(t)}async function le(e){let t=o.value.map((async e=>{let t=new Image;return e.get_image(t),new Promise((async(e,a)=>{t.onload=function(){e(t)}}))})),a=0,l=await Promise.all(t);l.forEach((e=>{a+=e.height}));let n=document.createElement("canvas"),s=n.getContext("2d");n.width=l[0].width,n.height=a,a=0,l.forEach((e=>{s.drawImage(e,0,a,e.width,e.height),a+=e.height})),b.download_URI(n.toDataURL(),e)}return(t,a)=>(Ps(),js(Ss,null,[Vs("div",Iw,[Hs(S_),Vs("div",Ow,[Hs(E_,{style:{"margin-top":"0.5rem"},class:"ms-1",id:ya(n),enable_refresh:!0,ref_key:"date_time_picker",ref:i,onEpoch_change:j,min_time_interval_id:f.value,custom_time_interval_list:E},{begin:ml((()=>[])),extra_buttons:ml((()=>[e.enable_snapshots?(Ps(),js("button",{key:0,class:"btn btn-link btn-sm",onClick:F,title:l("page_stats.manage_snapshots_btn")},jw,8,Mw)):Ys("v-if",!0),e.traffic_extraction_permitted?(Ps(),js("button",{key:1,class:"btn btn-link btn-sm",onClick:te,title:l("traffic_recording.pcap_download")},Fw,8,Lw)):Ys("v-if",!0),Vs("button",{disabled:ya(_),class:"btn btn-link btn-sm",onClick:ae,title:ya(p)},Dw,8,Rw),e.is_history_enabled?(Ps(),js("button",{key:2,class:"btn btn-link btn-sm",onClick:Q,title:l("page_stats.historical_flows")},qw,8,zw)):Ys("v-if",!0)])),_:1},8,["id","min_time_interval_id"]),Ys(" select metric "),wn(Vs("div",Bw,[Vs("div",Vw,[Hs(l_,{selected_option:h.value,"onUpdate:selected_option":a[0]||(a[0]=e=>h.value=e),options:m.value,onSelect_option:M},null,8,["selected_option","options"])]),Vs("div",Hw,[Hs(l_,{selected_option:$.value,"onUpdate:selected_option":a[1]||(a[1]=e=>$.value=e),options:ya(k),onSelect_option:G},null,8,["selected_option","options"])]),e.is_ntop_pro?(Ps(),js("button",{key:0,type:"button",onClick:R,class:"btn btn-sm btn-primary inline",style:{"vertical-align":"super"}}," Manage Timeseries ")):Ys("v-if",!0)],512),[[Yi,A.value]]),(Ps(!0),js(Ss,null,En(w.value,((e,t)=>(Ps(),Ls(Ag,{key:e.key,id:ya("chart")+t,ref_for:!0,ref:e=>{o.value[t]=e},chart_type:ya(s),register_on_status_change:!1,get_custom_chart_options:D(t),onZoom:j,onChart_reloaded:L},null,8,["id","chart_type","get_custom_chart_options"])))),128))]),g.value?(Ps(),js("div",Gw,[Vs("div",Ww,[Hs(Pw,{id:"page_stats_bootstrap_table",columns:ya(Z),rows:X.value,print_html_column:e=>function(e){return e.label}(e),print_html_row:(e,t)=>function(e,t){return t[e.id]}(e,t)},null,8,["columns","rows","print_html_column","print_html_row"])])])):Ys("v-if",!0),e.is_ntop_pro?(Ps(),js("div",Kw,[Vs("div",Jw,[Y.value?.table_config_def?(Ps(),js("div",Yw,[Hs(l_,{selected_option:Y.value,"onUpdate:selected_option":a[2]||(a[2]=e=>Y.value=e),options:J.value},null,8,["selected_option","options"])])):Ys("v-if",!0),Y.value?.table_config_def?(Ps(),Ls(xw,{key:Y.value?.value,ref_key:"top_table_ref",ref:r,table_buttons:Y.value.table_config_def.table_button,columns_config:Y.value.table_config_def.columns_config,data_url:Y.value.table_config_def.data_url,enable_search:Y.value.table_config_def.enable_search,table_config:Y.value.table_config_def.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])):Ys("v-if",!0)])])):Ys("v-if",!0)]),e.enable_snapshots?(Ps(),Ls(om,{key:0,ref_key:"modal_snapshot",ref:u,csrf:e.csrf,page:C,onAdded_snapshot:B,onDeleted_snapshots:B,onDeleted_all_snapshots:B},null,8,["csrf"])):Ys("v-if",!0),e.is_ntop_pro?(Ps(),Ls(_w,{key:1,ref_key:"modal_timeseries",ref:c,sources_types_enabled:e.sources_types_enabled,onApply:H},null,8,["sources_types_enabled"])):Ys("v-if",!0),Hs(fv,{id:"page_stats_modal_traffic_extraction",ref_key:"modal_traffic_extraction",ref:ee},null,512),Hs(gw,{ref_key:"modal_download_file",ref:d,title:l("page_stats.title_modal_download_file"),ext:"png",onDownload:le},null,8,["title"])],64))}};lp("\n.inline[data-v-937058e4] {\n    display: inline-block;\n}\n.select2-size[data-v-937058e4] {\n    min-width: 18rem;\n}\n"),Zw.__scopeId="data-v-937058e4",Zw.__file="http_src/vue/page-stats.vue";var Xw=Jl({components:{},props:{id:String,tab_list:Array},emits:["click_item"],created(){},data:()=>({old_tab:null}),mounted(){let e=null;this.$props.tab_list.forEach((function(t){t.active&&(e=t)})),this.old_tab=e||this.$props.tab_list[0],ntopng_sync.ready(this.$props.id)},methods:{change_tab:function(e){(null!=e.id&&this.old_tab.id!=e.id||null!=e.name&&this.old_tab.name!=e.name)&&(this.old_tab=e,this.$emit("click_item",e))}}});const Qw={class:"card-header mb-2"},ex={class:"nav nav-tabs card-header-tabs",role:"tablist"},tx=["onClick"],ax=["onClick"];Xw.render=function(e,t,a,l,n,s){return Ps(),js("div",Qw,[Vs("ul",ex,[(Ps(!0),js(Ss,null,En(e.tab_list,(t=>(Ps(),js(Ss,null,[t.active?(Ps(),js("li",{key:0,onClick:a=>e.change_tab(t),class:K([{active:t.active},"nav-item nav-link"])},te(t.title),11,tx)):(Ps(),js("a",{key:1,onClick:a=>e.change_tab(t),href:"#",class:"nav-item nav-link"},te(t.title),9,ax))],64)))),256))])])},Xw.__file="http_src/vue/tab-list.vue";var lx={__name:"modal-delete-confirm",props:{body:String,title:String},emits:["delete","delete_all"],setup(e,{expose:t,emit:a}){const l=e,n=va(null);let s=va(""),o=va("");const i=()=>{a("delete"),r()},r=()=>{n.value.close()};t({show:(e,t)=>{null!=e&&null!=t?(s.value=e,o.value=t):(s.value=l.body,o.value=l.title),n.value.show()},close:r}),_n((()=>{}));const c=e=>i18n(e);return(e,t)=>(Ps(),Ls(np,{onShowed:t[0]||(t[0]=e=>{}),ref_key:"modal_id",ref:n},{title:ml((()=>[Ks(te(ya(o)),1)])),body:ml((()=>[Ks(te(ya(s)),1)])),footer:ml((()=>[Vs("button",{type:"button",onClick:i,class:"btn btn-danger"},te(c("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-confirm.vue"};const nx="change_asset_table_tab_event";var sx={components:{datatable:xw,"modal-delete-confirm":lx,"tab-list":Xw,NoteList:pv},props:{page_csrf:String,url_params:Object,view:String,table_filters:Array},created(){x.set_key_to_url("asset_family",this.$props.url_params.asset_family),this.asset_table_tab=x.get_url_entry("view")||"centrality",x.set_key_to_url("view",this.service_table_tab),this.tab_list.forEach((e=>{this.asset_table_tab==e.id&&(e.active=!0)})),function(e){const t=[];let a=[];e.get_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,url_params),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let l=url_params;l.view="standard";let n={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l),enable_search:!0},s=[];for(let t of e.$props.table_filters||[])t.callbackFunction=(a,n)=>{l.view=e.asset_table_tab,l[t.filterMenuKey]=n.id,x.set_key_to_url(t.filterMenuKey,n.id),a.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l)),NtopUtils.showOverlays(),a.ajax.reload(),NtopUtils.hideOverlays()},s.push(t);a=[{columnName:i18n("actions"),name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(t,a,l){return e.create_action_button_historical_flow_link(t,a,l)}},{columnName:i18n("map_page.client"),name:"client",data:"client",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.server"),name:"server",data:"server",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.asset_family"),name:"family",data:"family",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.last_seen"),name:"last_seen",data:"last_seen",className:"text-center",responsivePriority:2}];let o=ntopng_utility.clone(n);o.table_config={serverSide:!1,order:[[4,"desc"]]},o.columns_config=a,o.table_filters=s,e.config_devices_standard=o,l.view="centrality",n.data_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l),a=[{columnName:i18n("map_page.host"),name:"host",data:"host",className:"text-nowrap",render:(e,t)=>e.label,responsivePriority:1},{columnName:i18n("map_page.asset_total_edges"),name:"total_edges",data:"total_edges",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.asset_in_edges"),name:"in_edges",data:"in_edges",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.asset_out_edges"),name:"out_edges",data:"out_edges",className:"text-center",responsivePriority:2}];let i=ntopng_utility.clone(n);i.table_config={serverSide:!1,order:[[1,"desc"]]},i.columns_config=a,i.table_filters=s,console.log(o),console.log(i),e.config_devices_centrality=i}(this)},mounted(){C.on_custom_event("page_asset_table",ntopng_custom_events.DATATABLE_LOADED,(()=>{x.get_url_entry("host")&&this.hide_dropdowns()})),C.on_custom_event("change_asset_table_tab",nx,(e=>{let t=this.get_active_table();x.set_key_to_url("view",e),t.destroy_table(),this.asset_table_tab=e})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog()))},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null,title_delete:i18n("map_page.delete_assets"),body_delete:i18n("map_page.delete_assets_message"),title_download:i18n("map_page.download"),body_download:i18n("map_page.download_message"),get_url:null,asset_table_tab:null,notes:[i18n("map_page.table_note_asset_map")],tab_list:[{title:i18n("map_page.standard_view"),active:"standard"==view,id:"standard"},{title:i18n("map_page.centrality_view"),active:"centrality"==view,id:"centrality"}]}),methods:{destroy:function(){this.get_active_table().destroy_table()},click_item:function(e){this.tab_list.forEach((e=>e.active=!1)),e.active=!0,C.emit_custom_event(nx,e.id)},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",page:this.url_params.page,csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)}),this.reload_table()}catch(e){this.reload_table()}},create_action_button_historical_flow_link:function(e,t,a){let l={handlerId:"historical_flow_link",onClick:()=>{!function(e){const t=e.client.split("host=")[1].split("&")[0],a=e.server.split("host=")[1].split("&")[0],l=e.epoch_end,n={epoch_begin:e.epoch_begin,epoch_end:l,srv_ip:`${a};eq`,cli_ip:`${t};eq`},s=x.obj_to_url_params(n);x.go_to_url(`${http_prefix}/lua/pro/db_search.lua?${s}`)}(a)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:l,icon:"fas fa-stream",title:i18n("db_explorer.historical_data")}])},hide_dropdowns:function(){$("#network_dropdown").removeClass("d-inline"),$("#vlan_id_dropdown").removeClass("d-inline"),$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},get_active_table:function(){return this.$refs[`table_asset_${this.asset_table_tab}`]},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()}}};const ox={class:"row"},ix={class:"col-md-12 col-lg-12"},rx=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),cx={class:"card"},ux=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),dx={class:"card-body"},_x={id:"table_asset"},px={class:"card-footer"},fx={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},vx=Vs("i",{class:"fas fa-trash"},null,-1),mx=["href"],hx=[Vs("i",{class:"fas fa-download"},null,-1)];sx.render=function(e,t,a,l,n,s){const o=kn("modal-delete-confirm"),i=kn("tab-list"),r=kn("datatable"),c=kn("NoteList");return Ps(),js("div",ox,[Vs("div",ix,[rx,Vs("div",cx,[ux,Vs("div",dx,[Vs("div",_x,[Hs(o,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(i,{ref:"asset_tab_list",id:"asset_tab_list",tab_list:n.tab_list,onClick_item:s.click_item},null,8,["tab_list","onClick_item"]),"standard"==n.asset_table_tab?(Ps(),Ls(r,{key:0,ref:"table_asset_standard",table_buttons:n.config_devices_standard.table_buttons,columns_config:n.config_devices_standard.columns_config,data_url:n.config_devices_standard.data_url,enable_search:n.config_devices_standard.enable_search,filter_buttons:n.config_devices_standard.table_filters},{default:ml((()=>[Ks(' :table_config="config_devices_standard.table_config"> ')])),_:1},8,["table_buttons","columns_config","data_url","enable_search","filter_buttons"])):Ys("v-if",!0),"centrality"==n.asset_table_tab?(Ps(),Ls(r,{key:1,ref:"table_asset_centrality",table_buttons:n.config_devices_centrality.table_buttons,columns_config:n.config_devices_centrality.columns_config,data_url:n.config_devices_centrality.data_url,enable_search:n.config_devices_centrality.enable_search,filter_buttons:n.config_devices_centrality.table_filters},{default:ml((()=>[Ks(' :table_config="config_devices_centrality.table_config"> ')])),_:1},8,["table_buttons","columns_config","data_url","enable_search","filter_buttons"])):Ys("v-if",!0)])]),Vs("div",px,[Vs("button",fx,[vx,Ks(" "+te(n.i18n("map_page.delete_assets")),1)]),Vs("a",{href:n.get_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"asset_map.json",target:"_blank"},hx,8,mx)])]),Hs(c,{note_list:n.notes},null,8,["note_list"])])])},sx.__file="http_src/vue/page-asset-table.vue";var gx={components:{datatable:xw,"modal-delete-confirm":lx,NoteList:pv},props:{page_csrf:String,url_params:Object,view:String,table_filters:Array,is_admin:Boolean},created(){!function(e){const t=[];let a=[],l=0;e.get_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,url_params),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let n=ntopng_utility.clone(url_params);n.view=null;let s={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,n),enable_search:!0},o=[];for(let t of e.$props.table_filters||[])t.callbackFunction=(e,a)=>{n[t.filterMenuKey]=a.id,x.set_key_to_url(t.filterMenuKey,a.id),e.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,n)),NtopUtils.showOverlays(),e.ajax.reload(),NtopUtils.hideOverlays()},o.push(t);a=[{columnName:i18n("actions"),name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(t,a,l){return e.create_action_button_historical_flow_link(t,a,l)}},{columnName:i18n("map_page.last_seen"),name:"last_seen",data:"last_seen",className:"text-center text-nowrap",render:(e,t)=>e.value,responsivePriority:2},{columnName:i18n("map_page.client"),name:"client",data:"client",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.server"),name:"server",data:"server",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.port"),name:"port",data:"port",className:"text-center",responsivePriority:4},{columnName:i18n("map_page.protocol"),name:"l7proto",data:"protocol",className:"text-nowrap",responsivePriority:3},{columnName:i18n("map_page.first_seen"),name:"first_seen",data:"first_seen",visible:!1,responsivePriority:3},{columnName:i18n("duration"),name:"duration",data:"duration",className:"text-center text-nowrap",responsivePriority:3,orderable:!0},{columnName:i18n("map_page.observations"),name:"observations",data:"observations",className:"text-center",responsivePriority:4},{columnName:i18n("map_page.frequency"),name:"frequency",data:"frequency",className:"text-center",orderable:!0,responsivePriority:4,render:(e,t,a)=>"sort"==t||"type"==t?e:e+" sec"}],l=8;let i={serverSide:!0,order:[[l,"desc"]]},r=ntopng_utility.clone(s);r.table_buttons=s.table_buttons,r.data_url=`${r.data_url}`,r.columns_config=a,r.table_filters=o,r.table_config=ntopng_utility.clone(i),e.config_devices_standard=r}(this)},mounted(){$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),ntopng_events_manager.on_custom_event("page_periodicity_table",ntopng_custom_events.DATATABLE_LOADED,(()=>{x.get_url_entry("host")&&this.hide_dropdowns()}))},data:()=>({i18n:e=>i18n(e),base_url:`${http_prefix}/lua/pro/enterprise/get_map.lua`,config_devices_standard:null,config_devices_centrality:null,title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_download:i18n("map_page.download"),body_download:i18n("map_page.download_message"),notes:[i18n("map_page.table_note_periodicity_map")],get_url:null}),methods:{hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden"),$("#network_dropdown").removeClass("d-inline"),$("#vlan_id_dropdown").removeClass("d-inline")},create_action_button_historical_flow_link:function(e,t,a){let l={handlerId:"historical_flow_link",onClick:()=>{!function(e){const t=e.client.split("host=")[1].split(">")[0],a=t.substring(0,t.length-1),l=e.server.split("host=")[1].split(">")[0],n=l.substring(0,l.length-1),s=e.port,o=e.first_seen,i=e.last_seen.epoch_end,r={epoch_begin:o,epoch_end:i,srv_ip:`${n};eq`,cli_ip:`${a};eq`,srv_port:`${s};eq`},c=x.obj_to_url_params(r),u=`${http_prefix}/lua/pro/db_search.lua?${c}`;x.go_to_url(u)}(a)}},n={handlerId:"live_flow_link",onClick:()=>{!function(e){const t=e.client.split("host=")[1].split(">")[0],a=t.substring(0,t.length-1),l=e.server.split("host=")[1].split(">")[0],n=l.substring(0,l.length-1),s=e.port,o={server:`${n}`,client:`${a}`,port:`${s}`},i=x.obj_to_url_params(o),r=`${http_prefix}/lua/flows_stats.lua?${i}`;x.go_to_url(r)}(a)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:l,icon:"fas fa-stream",title:i18n("db_explorer.historical_data")},{class:"pointer",handler:n,icon:"fas fa-stream",title:i18n("live_flows")}])},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",page:this.url_params.page,csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)}),this.reload_table()}catch(e){this.reload_table()}},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},destroy:function(){this.get_active_table().destroy_table()},get_active_table:function(){return this.$refs.table_periodicity},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()}}};const bx={class:"row"},yx={class:"col-md-12 col-lg-12"},wx=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),xx={class:"card"},kx=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),$x={class:"card-body"},Sx={id:"periodicity-table"},Nx={class:"card-footer"},Cx={key:0,type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Ax=Vs("i",{class:"fas fa-trash"},null,-1),Ex=["href"],Tx=[Vs("i",{class:"fas fa-download"},null,-1)];gx.render=function(e,t,a,l,n,s){const o=kn("modal-delete-confirm"),i=kn("datatable"),r=kn("NoteList");return Ps(),js("div",bx,[Vs("div",yx,[wx,Vs("div",xx,[kx,Vs("div",$x,[Vs("div",Sx,[Hs(o,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(i,{ref:"table_periodicity",table_buttons:n.config_devices_standard.table_buttons,columns_config:n.config_devices_standard.columns_config,data_url:n.config_devices_standard.data_url,enable_search:n.config_devices_standard.enable_search,filter_buttons:n.config_devices_standard.table_filters,table_config:n.config_devices_standard.table_config,base_url:n.base_url,base_params:a.url_params},null,8,["table_buttons","columns_config","data_url","enable_search","filter_buttons","table_config","base_url","base_params"])])]),Vs("div",Nx,[a.is_admin?(Ps(),js("button",Cx,[Ax,Ks(" "+te(n.i18n("map_page.delete_services")),1)])):Ys("v-if",!0),Vs("a",{href:n.get_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"periodicity_map.json",target:"_blank"},Tx,8,Ex)])]),Hs(r,{note_list:n.notes},null,8,["note_list"])])])},gx.__file="http_src/vue/page-periodicity-table.vue";const Px={autoResize:!0,nodes:{shape:"dot",scaling:{min:10,max:30,label:{enabled:!0,min:8,max:30,drawThreshold:12}},font:{color:"#212529"},shadow:!1},edges:{width:.2,color:{inherit:"from"},smooth:{type:"continuous",roundness:0},arrows:{to:{enabled:!0,scaleFactor:.3}},arrowStrikethrough:!1,scaling:{min:1,max:5}},layout:{improvedLayout:!1},interaction:{hideEdgesOnDrag:!1,hideEdgesOnZoom:!0,hover:!1,tooltipDelay:0},physics:{enabled:!0,solver:"forceAtlas2Based",stabilization:{iterations:300,enabled:!0},forceAtlas2Based:{centralGravity:.01,springLength:100}},groups:{unknown:{shape:"dot"},printer:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},video:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},workstation:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},laptop:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},tablet:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},phone:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},tv:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},networking:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},wifi:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},nas:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},multimedia:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},iot:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}}}},Ux=function(e,t,a,l){$.post(`${http_prefix}/lua/pro/enterprise/switch_service_state.lua`,{service_id:e,service_status:t,csrf:l}).then((e=>{e.success&&a&&a()}))},Ix=function(){return Px},Ox="change_service_table_tab_event";var Mx={components:{datatable:xw,"modal-delete-confirm":lx,"tab-list":Xw,NoteList:pv},props:{page_csrf:String,url_params:Object,view:String,table_filters:Array,is_admin:Boolean,service_acceptance:Array},created(){this.service_table_tab=x.get_url_entry("view")||"standard",x.set_key_to_url("view",this.service_table_tab),this.tab_list.forEach((e=>{this.service_table_tab==e.id&&(e.active=!0)})),function(e){const t=[];let a=[],l=0;e.get_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,url_params),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let n=url_params;n.view="standard";let s={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,n),enable_search:!0},o=[];for(let t of e.$props.table_filters||[])t.callbackFunction=(a,l)=>{n.view=e.service_table_tab,n[t.filterMenuKey]=l.id,x.set_key_to_url(t.filterMenuKey,l.id),a.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,n)),NtopUtils.showOverlays(),a.ajax.reload(),NtopUtils.hideOverlays()},o.push(t);a=[{columnName:i18n("actions"),name:"actions",data:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(t,a,l){return e.create_action_button_historical_flow_link(t,a,l)},createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("map_page.last_seen"),name:"last_seen",data:"last_seen",className:"text-center text-nowrap",render:(e,t)=>e.value,responsivePriority:2},{columnName:i18n("map_page.client"),name:"client",data:"client",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.server"),name:"server",data:"server",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.port"),name:"port",data:"port",className:"text-center",responsivePriority:4},{columnName:i18n("map_page.protocol"),name:"l7proto",data:"protocol",className:"text-nowrap",responsivePriority:3},{columnName:i18n("map_page.first_seen"),name:"first_seen",data:"first_seen",visible:!1,responsivePriority:3},{columnName:i18n("map_page.num_uses"),name:"num_uses",data:"num_uses",className:"text-center text-nowrap",responsivePriority:4},{columnName:i18n("map_page.info"),name:"info",data:"info",responsivePriority:5}],l=7,e.is_admin&&a.push({columnName:i18n("map_page.status"),name:"service_acceptance",data:"service_acceptance",className:"text-center",orderable:!1,responsivePriority:1,render:(t,a,l)=>e.create_action_buttons(t,a,l)});let i={serverSide:!0,order:[[l,"desc"]]},r=ntopng_utility.clone(s);r.table_buttons=s.table_buttons,r.data_url=`${r.data_url}`,r.columns_config=a,r.table_filters=o,r.table_config=ntopng_utility.clone(i),e.config_devices_standard=r,n.view="centrality",s.data_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,n),a=[{columnName:i18n("map_page.host"),name:"host",data:"host",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.total_edges"),name:"total_edges",data:"total_edges",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.rank"),name:"rank",data:"rank",className:"text-center",responsivePriority:2},{columnName:i18n("map_page.in_edges"),name:"in_edges",data:"in_edges",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.out_edges"),name:"out_edges",data:"out_edges",className:"text-center",responsivePriority:2}],l=2,i.order=[[l,"desc"]],r=ntopng_utility.clone(s),r.table_buttons=s.table_buttons,r.data_url=`${r.data_url}`,r.columns_config=a,r.table_filters=o,r.table_config=ntopng_utility.clone(i),e.config_devices_centrality=r}(this)},mounted(){C.on_custom_event("page_service_table",ntopng_custom_events.DATATABLE_LOADED,(()=>{x.get_url_entry("host")&&this.hide_dropdowns()})),C.on_custom_event("change_service_table_tab",Ox,(e=>{let t=this.get_active_table();x.set_key_to_url("view",e),t.delete_button_handlers(this.service_table_tab),t.destroy_table(),this.service_table_tab=e})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog()))},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null,title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),get_url:null,service_table_tab:null,notes:[i18n("map_page.table_note_service_map")],tab_list:[{title:i18n("map_page.standard_view"),active:"standard"==view,id:"standard"},{title:i18n("map_page.centrality_view"),active:"centrality"==view,id:"centrality"}]}),methods:{hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden"),$("#network_dropdown").removeClass("d-inline"),$("#vlan_id_dropdown").removeClass("d-inline")},destroy:function(){let e=this.get_active_table();e.delete_button_handlers(this.service_table_tab),e.destroy_table()},click_item:function(e){this.tab_list.forEach((e=>e.active=!1)),e.active=!0,C.emit_custom_event(Ox,e.id)},create_action_buttons:function(e,t,a){const l=this.reload_table,n=this.$props.page_csrf,s={onClick:()=>{Ux(a.hash_id,this.$props.service_acceptance[0].id,l,n)}},o={onClick:()=>{Ux(a.hash_id,this.$props.service_acceptance[1].id,l,n)}},i={onClick:()=>{Ux(a.hash_id,this.$props.service_acceptance[2].id,l,n)}};if("display"!==t)return e;const r=a.acceptance,c={class:"dropdown-item",href:"#",title:this.$props.service_acceptance[0].label,handler:s},u={class:"dropdown-item",href:"#",title:this.$props.service_acceptance[1].label,handler:o},d={class:"dropdown-item disabled",href:"#",title:this.$props.service_acceptance[2].label,handler:i};switch(r){case 0:c.class="dropdown-item active";break;case 1:u.class="dropdown-item active";break;case 2:d.class="dropdown-item active disabled"}return DataTableUtils.createActionButtons([d,c,u])},create_action_button_historical_flow_link:function(e,t,a){let l={handlerId:"historical_flow_link",onClick:()=>{!function(e){const t=e.client.split("host=")[1].split(">")[0],a=t.substring(0,t.length-1),l=e.server.split("host=")[1].split(">")[0],n=l.substring(0,l.length-1),s=e.port,o=e.first_seen,i=e.last_seen.epoch_end,r={epoch_begin:o,epoch_end:i,srv_ip:`${n};eq`,cli_ip:`${a};eq`,srv_port:`${s};eq`},c=x.obj_to_url_params(r),u=`${http_prefix}/lua/pro/db_search.lua?${c}`;x.go_to_url(u)}(a)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:l,icon:"fas fa-stream",title:i18n("db_explorer.historical_data")}])},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",page:this.url_params.page,csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)}),this.reload_table()}catch(e){this.reload_table()}},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},get_active_table:function(){return this.$refs[`table_service_${this.service_table_tab}`]},switch_to_standard:function(){this.url_params.view="standard",document.location.href=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/network_maps.lua`,url_params)},switch_to_centrality:function(){this.url_params.view="centrality",document.location.href=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/network_maps.lua`,url_params)},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()}}};const jx={class:"row"},Lx={class:"col-md-12 col-lg-12"},Fx=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),Rx={class:"card"},Dx=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),zx={class:"card-body"},qx={id:"table_service"},Bx={class:"card-footer"},Vx={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Hx=Vs("i",{class:"fas fa-trash"},null,-1),Gx=["href"],Wx=[Vs("i",{class:"fas fa-download"},null,-1)];Mx.render=function(e,t,a,l,n,s){const o=kn("modal-delete-confirm"),i=kn("tab-list"),r=kn("datatable"),c=kn("NoteList");return Ps(),js("div",jx,[Vs("div",Lx,[Fx,Vs("div",Rx,[Dx,Vs("div",zx,[Vs("div",qx,[Hs(o,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(i,{ref:"service_tab_list",id:"service_tab_list",tab_list:n.tab_list,onClick_item:s.click_item},null,8,["tab_list","onClick_item"]),"standard"==n.service_table_tab?(Ps(),Ls(r,{key:0,ref:"table_service_standard",table_buttons:n.config_devices_standard.table_buttons,columns_config:n.config_devices_standard.columns_config,data_url:n.config_devices_standard.data_url,enable_search:n.config_devices_standard.enable_search,filter_buttons:n.config_devices_standard.table_filters,table_config:n.config_devices_standard.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","filter_buttons","table_config"])):Ys("v-if",!0),"centrality"==n.service_table_tab?(Ps(),Ls(r,{key:1,ref:"table_service_centrality",table_buttons:n.config_devices_centrality.table_buttons,columns_config:n.config_devices_centrality.columns_config,data_url:n.config_devices_centrality.data_url,enable_search:n.config_devices_centrality.enable_search,filter_buttons:n.config_devices_centrality.table_filters,table_config:n.config_devices_centrality.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","filter_buttons","table_config"])):Ys("v-if",!0)])]),Vs("div",Bx,[Ys('\n        {% if is_admin then %}\n          <form class="d-inline" id=\'switch-state-form\'>\n            <div class="form-group mb-3 d-inline">\n              <label>{* i18n("map_page.set_state", {label = "<span class=\'count\'></span>"}) *}</label>\n              <select name="new_state" class="form-select d-inline" style="width: 16rem" {{ ternary(map.services_num == 0, "disabled=\'disabled\'", "") }}>\n              {% for _, status in pairsByField(map.filters.service_status_filters, label, asc_insensitive) do %}\n                <option value="{{ status.id }}">{* status.label *}</option>\n              {% end %}\n              </select>\n              <button class="btn btn-secondary d-inline" class="btn-switch-state" {{ ternary(map.services_num == 0, "disabled=\'disabled\'", "") }}>\n                <i class="fas fa-random"></i> {{ i18n("set") }}\n              </button>\n            </div>\n          </form>\n        {% end %}\n    '),Vs("button",Vx,[Hx,Ks(" "+te(n.i18n("map_page.delete_services")),1)]),Vs("a",{href:n.get_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"service_map.json",target:"_blank"},Wx,8,Gx)])]),Hs(c,{note_list:n.notes},null,8,["note_list"])])])},Mx.__file="http_src/vue/page-service-table.vue";const Kx={key:0,class:"alert alert-info"},Jx=["id"];var Yx={__name:"network-map",props:{empty_message:String,event_listeners:Object,page_csrf:String,url:String,url_params:Object,map_id:String},setup(e,{expose:t}){const a=e,l={ifid:a.url_params.ifid,action:"load_graph",map:a.url_params.map_id};let n={},s={},o=!1,i=null;const r=va(!1),c=va(!0),u=va(!1),d=va({}),_=va(null),p=va(null),f=va(null);_n((async()=>{const e=document.getElementById(a.map_id);h(),await v(),p.value=Ix(),i=new vis.Network(e,_.value,p.value),g()})),vn((()=>{1!=u.value&&b()}));const v=async()=>{d.value=a.url_params;const e=NtopUtils.buildURL(a.url,d.value);await $.get(e,l,(async function(e){const{nodes:t,edges:a,max_entry_reached:l}=e.rsp;r.value=l,n=new vis.DataSet(t.map((e=>(e.title=(e=>{const t=document.createElement("div");return t.innerHTML=`<b>${e.label}</b><br><br>${i18n("db_explorer.host_data")}: ${e.id}`,t})(e),e)))),s=new vis.DataSet(a),_.value={nodes:n,edges:s},f.value=n.get({returnType:"Object"}),m()}))},m=()=>{0==_.value?.nodes.length&&0==_.value?.edges.length?c.value=!0:c.value=!1},h=()=>{const e=NtopUtils.loadElementScale($(".resizable-y-container"));if(null!=e)$(".resizable-y-container").width(e.width),$(".resizable-y-container").height(e.height),$(".resizable-y-container").on("mouseup",(function(){const e={width:$(".resizable-y-container").width(),height:$(".resizable-y-container").height()};NtopUtils.saveElementScale($(this),e)}));else{const e={width:$(".resizable-y-container").width(),height:$(".resizable-y-container").height()};NtopUtils.saveElementScale($(this),e)}};const g=()=>{i.on("stabilizationIterationsDone",(function(){i.setOptions({physics:!1})})),i.on("click",(function(e){!function(e){if(e.nodes.length>0){var t,a;o=!0;var l=e.nodes[0];for(var s in f.value)f.value[s].old_color||(f.value[s].old_color=f.value[s].color),f.value[s].old_icon_color||(f.value[s].old_icon_color=f.value[s].icon),f.value[s].color="#c8c8c8",f.value[s].icon={color:"#c8c8c8"},void 0===f.value[s].hiddenLabel&&(f.value[s].hiddenLabel=f.value[s].label,f.value[s].label=void 0);var r=i.getConnectedNodes(l),c=[];for(t=1;t<2;t++)for(a=0;a<r.length;a++)c=c.concat(i.getConnectedNodes(r[a]));for(t=0;t<r.length;t++)f.value[r[t]].color=f.value[r[t]].old_color,f.value[r[t]].icon=f.value[r[t]].old_icon_color,void 0!==f.value[r[t]].hiddenLabel&&(f.value[r[t]].label=f.value[r[t]].hiddenLabel,f.value[r[t]].hiddenLabel=void 0);f.value[l].color=f.value[l].old_color,f.value[l].icon=f.value[l].old_icon_color,void 0!==f.value[l].hiddenLabel&&(f.value[l].label=f.value[l].hiddenLabel,f.value[l].hiddenLabel=void 0)}else if(!0===o){for(var s in f.value)f.value[s].color=f.value[s].old_color,f.value[s].icon=f.value[s].old_icon_color,void 0!==f.value[s].hiddenLabel&&(f.value[s].label=f.value[s].hiddenLabel,f.value[s].hiddenLabel=void 0);o=!1}var u=[];for(s in f.value)f.value.hasOwnProperty(s)&&u.push(f.value[s]);n.update(u)}(e)})),i.on("doubleClick",(function(e){(async e=>{const t=e.id.split("@");d.value.host=t[0],d.value.vlan_id=t[1],x.set_key_to_url("host",d.value.host),x.set_key_to_url("vlan_id",d.value.vlan_id),C.emit_custom_event(ntopng_custom_events.CHANGE_PAGE_TITLE,e),await y()})(n.get(e.nodes[0]))})),i.on("afterDrawing",(function(e){C.emit_custom_event(ntopng_custom_events.VIS_DATA_LOADED)}));for(const e in a.event_listeners||{})i.on(e,a.event_listeners[e])},b=()=>{null!=i&&i.destroy(!0),u.value=!0},y=async()=>{await v(),null!=i&&(i.setOptions({physics:p.value.physics}),i.setData(_.value))};return t({reload:y,destroy:b,is_max_entry_reached:()=>r.value,autolayout:()=>{null!=i?i instanceof vis.Network?i.stabilize():console.error("Not a vis.Network instance!"):console.error("The network is undefined!")},update_url_params:e=>{d.value=e}}),(t,a)=>(Ps(),js(Ss,null,[c.value?(Ps(),js("div",Kx,te(e.empty_message),1)):Ys("v-if",!0),Vs("div",{class:"d-flex justify-content-center align-items-center resizable-y-container",style:{width:"100%",height:"60vh"},id:e.map_id},null,8,Jx)],64))},__file:"http_src/vue/network-map.vue"},Zx={__name:"modal-autolayout-confirm",props:{body:String,title:String},emits:["autolayout"],setup(e,{expose:t,emit:a}){const l=va(null),n=()=>{a("autolayout"),s()},s=()=>{l.value.close()};t({show:()=>{l.value.show()},close:s}),_n((()=>{}));const o=e=>i18n(e);return(t,a)=>(Ps(),Ls(np,{onShowed:a[0]||(a[0]=e=>{}),ref_key:"modal_id",ref:l},{title:ml((()=>[Ks(te(e.title),1)])),body:ml((()=>[Ks(te(e.body),1)])),footer:ml((()=>[Vs("button",{type:"button",onClick:n,class:"btn btn-primary"},te(o("confirm")),1)])),_:1},512))},__file:"http_src/vue/modal-autolayout-confirm.vue"};const Xx="change_filter_event";var Qx={components:{"network-map":Yx,"modal-delete-confirm":lx,"modal-autolayout-confirm":Zx,"select-search":l_,NoteList:pv},props:{page_csrf:String,ifid:Number,url_params:Object,map_id:String,is_admin:Boolean,all_filter_list:Object},created(){!function(e){for(const t in e.$props.all_filter_list){e.filter_list.push(e.$props.all_filter_list[t]);const a=ntopng_url_manager.get_url_entry(t);for(let[l,n]of Object.entries(e.$props.all_filter_list[t]))n.filter_name=t,a?n.id==a&&e.active_filter_list.push(n):1==n.currently_active&&e.active_filter_list.push(n)}e.get_url=`${http_prefix}/lua/pro/rest/v2/get/interface/map/data.lua`,e.download_url=NtopUtils.buildURL(e.get_url,e.$props.url_params),e.event_listeners={}}(this)},mounted(){const e=this.max_entry_reached,t=this.reload_map;this.$props.url_params.host&&""!=this.$props.url_params.host&&this.hide_dropdowns(),C.on_custom_event("page_service_map",ntopng_custom_events.CHANGE_PAGE_TITLE,(e=>{this.hide_dropdowns()})),C.on_custom_event("change_filter_event",Xx,(e=>{this.active_filter_list.forEach(((t,a)=>{t.filter_name==e.filter_name&&(this.active_filter_list[a]=e)})),ntopng_url_manager.set_key_to_url(e.filter_name,e.key),this.url_params[e.filter_name]=e.key,this.update_and_reload_map()})),C.on_custom_event(this.get_map(),ntopng_custom_events.VIS_DATA_LOADED,(t=>{e()?$("#max-entries-reached").removeAttr("hidden"):$("#max-entries-reached").attr("hidden","hidden"),NtopUtils.hideOverlays()}));let a=ntopng_url_manager.get_url_entries();for(const[e,t]of a)this.url_params[e]=t;$("#reload-graph").click((function(e){t()})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),$("#autolayout").click((()=>this.show_autolayout_dialog()))},data:()=>({i18n:e=>i18n(e),container:null,update_view_state_id:null,get_url:null,download_url:null,filter_list:[],active_filter_list:[],event_listeners:{},title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_autolayout:i18n("map_page.autolayout_services"),body_autolayout:i18n("map_page.autolayout_services_message"),no_services_message:i18n("map_page.no_services"),max_entry_title:i18n("max_entries_reached"),notes:[i18n("map_page.graph_note_service_map")]}),methods:{destroy:function(){this.get_map().destroy()},click_item:function(e){C.emit_custom_event(Xx,e)},get_map:function(){return this.$refs.service_map},max_entry_reached:function(){return this.get_map().is_max_entry_reached()},reload_map:async function(){NtopUtils.showOverlays();let e=this.get_map();await e.reload()},update_and_reload_map:async function(){let e=this.get_map();NtopUtils.showOverlays(),e.update_url_params(this.url_params),await e.reload()},autolayout:function(){this.get_map().autolayout()},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_autolayout_dialog:function(){this.$refs.modal_autolayout.show()},hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)})}finally{this.reload_map()}}}};const ek={class:"row"},tk={class:"col-md-12 col-lg-12"},ak={class:"card card-shadow"},lk=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),nk={class:"card-body"},sk={id:"table_service"},ok={class:"d-flex align-items-center justify-content-end mb-2"},ik=["title"],rk=[Vs("i",{class:"text-danger fa-solid fa-triangle-exclamation"},null,-1)],ck={class:"d-flex ms-auto"},uk={class:"m-1"},dk=Vs("button",{type:"button",id:"reload-graph",class:"btn btn-link btn-reload-graph"},[Vs("i",{class:"fas fa-sync"})],-1),_k=Vs("button",{type:"button",id:"autolayout",class:"btn btn-link btn-stabilize"},[Vs("i",{class:"fas fa-magic"})],-1),pk={class:"card-footer"},fk={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},vk=Vs("i",{class:"fas fa-trash"},null,-1),mk=["href"],hk=[Vs("i",{class:"fas fa-download"},null,-1)];Qx.render=function(e,t,a,l,n,s){const o=kn("select-search"),i=kn("modal-delete-confirm"),r=kn("modal-autolayout-confirm"),c=kn("network-map"),u=kn("NoteList");return Ps(),js("div",ek,[Vs("div",tk,[Vs("div",ak,[lk,Vs("div",nk,[Vs("div",sk,[Vs("div",ok,[Vs("button",{id:"max-entries-reached",type:"button",class:"btn btn-link",title:n.max_entry_title,disabled:"",hidden:""},rk,8,ik),Vs("div",ck,[(Ps(!0),js(Ss,null,En(n.filter_list,((e,t)=>(Ps(),js("div",uk,[Hs(o,{selected_option:n.active_filter_list[t],"onUpdate:selected_option":e=>n.active_filter_list[t]=e,options:n.filter_list[t],onSelect_option:s.click_item},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256))]),dk,_k]),Hs(i,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(r,{ref:"modal_autolayout",title:n.title_autolayout,body:n.body_autolayout,onAutolayout:s.reload_map},null,8,["title","body","onAutolayout"]),Hs(c,{ref:"service_map",empty_message:n.no_services_message,event_listeners:n.event_listeners,page_csrf:a.page_csrf,url:n.get_url,url_params:a.url_params,map_id:a.map_id},null,8,["empty_message","event_listeners","page_csrf","url","url_params","map_id"])])]),Vs("div",pk,[Vs("button",fk,[vk,Ks(" "+te(n.i18n("map_page.delete_services")),1)]),Vs("a",{href:n.download_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"service_map.json",target:"_blank"},hk,8,mk)])]),Hs(u,{note_list:n.notes},null,8,["note_list"])])])},Qx.__file="http_src/vue/page-service-map.vue";const gk="change_filter_event";var bk={components:{"network-map":Yx,"modal-delete-confirm":lx,"modal-autolayout-confirm":Zx,"select-search":l_,NoteList:pv},props:{page_csrf:String,ifid:Number,url_params:Object,map_id:String,is_admin:Boolean,all_filter_list:Object},created(){!function(e){for(const t in e.$props.all_filter_list){e.filter_list.push(e.$props.all_filter_list[t]);const a=ntopng_url_manager.get_url_entry(t);for(let[l,n]of Object.entries(e.$props.all_filter_list[t]))n.filter_name=t,a?n.id==a&&e.active_filter_list.push(n):1==n.currently_active&&e.active_filter_list.push(n)}e.get_url=`${http_prefix}/lua/pro/rest/v2/get/interface/map/data.lua`,e.download_url=NtopUtils.buildURL(e.get_url,e.updated_url_params),e.event_listeners={}}(this)},mounted(){this.updated_url_params=this.$props.url_params;let e=ntopng_url_manager.get_url_entries();for(const[t,a]of e)this.updated_url_params[t]=a;const t=this.max_entry_reached,a=this.reload_map;this.update_and_reload_map(),this.$props.url_params.host&&""!=this.$props.url_params.host&&this.hide_dropdowns(),C.on_custom_event("page_periodicity_map",ntopng_custom_events.CHANGE_PAGE_TITLE,(e=>{this.hide_dropdowns()})),C.on_custom_event("change_filter_event",gk,(e=>{this.active_filter_list.forEach(((t,a)=>{t.filter_name==e.filter_name&&(this.active_filter_list[a]=e)})),ntopng_url_manager.set_key_to_url(e.filter_name,e.key),this.url_params[e.filter_name]=e.key,this.update_and_reload_map()})),C.on_custom_event(this.get_map(),ntopng_custom_events.VIS_DATA_LOADED,(e=>{t()?$("#max-entries-reached").removeAttr("hidden"):$("#max-entries-reached").attr("hidden","hidden"),NtopUtils.hideOverlays()})),$("#reload-graph").click((function(e){a()})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),$("#autolayout").click((()=>this.show_autolayout_dialog()))},data:()=>({i18n:e=>i18n(e),container:null,update_view_state_id:null,get_url:null,download_url:null,updated_url_params:{},filter_list:[],active_filter_list:[],event_listeners:{},title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_autolayout:i18n("map_page.autolayout_services"),body_autolayout:i18n("map_page.autolayout_services_message"),no_services_message:i18n("map_page.no_services"),max_entry_title:i18n("max_entries_reached"),notes:[i18n("map_page.graph_note_periodicity_map")]}),methods:{destroy:function(){this.get_map().destroy()},click_item:function(e){C.emit_custom_event(gk,e)},get_map:function(){return this.$refs.periodicity_map},max_entry_reached:function(){return this.get_map().is_max_entry_reached()},reload_map:async function(){NtopUtils.showOverlays();let e=this.get_map();await e.reload()},hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},update_and_reload_map:async function(){let e=this.get_map();NtopUtils.showOverlays(),e.update_url_params(this.updated_url_params),await e.reload()},autolayout:function(){this.get_map().autolayout()},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_autolayout_dialog:function(){this.$refs.modal_autolayout.show()},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.updated_url_params.ifid,action:"reset",csrf:this.$props.page_csrf,map:this.updated_url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)})}finally{this.reload_map()}}}};const yk={class:"row"},wk={class:"col-md-12 col-lg-12"},xk={class:"card card-shadow"},kk=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),$k={class:"card-body"},Sk={id:"table_periodicity"},Nk={class:"d-flex align-items-center justify-content-end mb-2"},Ck=["title"],Ak=[Vs("i",{class:"text-danger fa-solid fa-triangle-exclamation"},null,-1)],Ek={class:"d-flex ms-auto"},Tk={class:"m-1"},Pk=Vs("button",{type:"button",id:"reload-graph",class:"btn btn-link btn-reload-graph"},[Vs("i",{class:"fas fa-sync"})],-1),Uk=Vs("button",{type:"button",id:"autolayout",class:"btn btn-link btn-stabilize"},[Vs("i",{class:"fas fa-magic"})],-1),Ik={class:"card-footer"},Ok={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Mk=Vs("i",{class:"fas fa-trash"},null,-1),jk=["href"],Lk=[Vs("i",{class:"fas fa-download"},null,-1)];bk.render=function(e,t,a,l,n,s){const o=kn("select-search"),i=kn("modal-delete-confirm"),r=kn("modal-autolayout-confirm"),c=kn("network-map"),u=kn("NoteList");return Ps(),js("div",yk,[Vs("div",wk,[Vs("div",xk,[kk,Vs("div",$k,[Vs("div",Sk,[Vs("div",Nk,[Vs("button",{id:"max-entries-reached",type:"button",class:"btn btn-link",title:n.max_entry_title,disabled:"",hidden:""},Ak,8,Ck),Vs("div",Ek,[(Ps(!0),js(Ss,null,En(n.filter_list,((e,t)=>(Ps(),js("div",Tk,[Hs(o,{selected_option:n.active_filter_list[t],"onUpdate:selected_option":e=>n.active_filter_list[t]=e,options:n.filter_list[t],onSelect_option:s.click_item},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256))]),Pk,Uk]),Hs(i,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(r,{ref:"modal_autolayout",title:n.title_autolayout,body:n.body_autolayout,onAutolayout:s.reload_map},null,8,["title","body","onAutolayout"]),Hs(c,{ref:"periodicity_map",empty_message:n.no_services_message,event_listeners:n.event_listeners,page_csrf:a.page_csrf,url:n.get_url,url_params:a.url_params,map_id:a.map_id},null,8,["empty_message","event_listeners","page_csrf","url","url_params","map_id"])])]),Vs("div",Ik,[Vs("button",Ok,[Mk,Ks(" "+te(n.i18n("map_page.delete_services")),1)]),Vs("a",{href:n.download_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"periodicity_map.json",target:"_blank"},Lk,8,jk)])]),Hs(u,{note_list:n.notes},null,8,["note_list"])])])},bk.__file="http_src/vue/page-periodicity-map.vue";const Fk="change_filter_event";var Rk={components:{"network-map":Yx,"modal-delete-confirm":lx,"modal-autolayout-confirm":Zx,"select-search":l_,NoteList:pv},props:{page_csrf:String,ifid:Number,url_params:Object,map_id:String,is_admin:Boolean,all_filter_list:Object},created(){!function(e){for(const t in e.$props.all_filter_list){e.filter_list.push(e.$props.all_filter_list[t]);const a=x.get_url_entry(t);for(let[l,n]of Object.entries(e.$props.all_filter_list[t]))n.filter_name=t,a?n.id==a&&e.active_filter_list.push(n):1==n.currently_active&&e.active_filter_list.push(n)}e.get_url=`${http_prefix}/lua/pro/rest/v2/get/interface/map/data.lua`,e.download_url=NtopUtils.buildURL(e.get_url,e.$props.url_params),e.event_listeners={}}(this)},mounted(){const e=this.max_entry_reached,t=this.reload_map;this.$props.url_params.host&&""!=this.$props.url_params.host&&this.hide_dropdowns(),C.on_custom_event("page_service_map",ntopng_custom_events.CHANGE_PAGE_TITLE,(e=>{this.hide_dropdowns()})),C.on_custom_event("change_filter_event",Fk,(e=>{this.active_filter_list.forEach(((t,a)=>{t.filter_name==e.filter_name&&(this.active_filter_list[a]=e)})),x.set_key_to_url(e.filter_name,e.key),this.url_params[e.filter_name]=e.key,this.update_and_reload_map()})),C.on_custom_event(this.get_map(),ntopng_custom_events.VIS_DATA_LOADED,(t=>{e()?$("#max-entries-reached").removeAttr("hidden"):$("#max-entries-reached").attr("hidden","hidden"),NtopUtils.hideOverlays()}));let a=x.get_url_entries();for(const[e,t]of a)this.url_params[e]=t;$("#reload-graph").click((function(e){t()})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),$("#autolayout").click((()=>this.show_autolayout_dialog()))},data:()=>({i18n:e=>i18n(e),container:null,update_view_state_id:null,get_url:null,download_url:null,filter_list:[],active_filter_list:[],event_listeners:{},title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_autolayout:i18n("map_page.autolayout_services"),body_autolayout:i18n("map_page.autolayout_services_message"),no_services_message:i18n("map_page.no_services"),max_entry_title:i18n("max_entries_reached"),notes:[i18n("map_page.graph_note_asset_map")]}),methods:{destroy:function(){this.get_map().destroy()},click_item:function(e){C.emit_custom_event(Fk,e)},get_map:function(){return this.$refs.asset_map},hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},max_entry_reached:function(){return this.get_map().is_max_entry_reached()},reload_map:async function(){NtopUtils.showOverlays();let e=this.get_map();await e.reload()},update_and_reload_map:async function(){let e=this.get_map();NtopUtils.showOverlays(),e.update_url_params(this.url_params),await e.reload()},autolayout:function(){this.get_map().autolayout()},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_autolayout_dialog:function(){this.$refs.modal_autolayout.show()},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)})}finally{NtopUtils.showOverlays(),this.reload_map()}}}};const Dk={class:"row"},zk={class:"col-md-12 col-lg-12"},qk={class:"card card-shadow"},Bk=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Vk={class:"card-body"},Hk={id:"table_asset"},Gk={class:"d-flex align-items-center justify-content-end mb-2"},Wk=["title"],Kk=[Vs("i",{class:"text-danger fa-solid fa-triangle-exclamation"},null,-1)],Jk={class:"d-flex ms-auto"},Yk={class:"m-1"},Zk=Vs("button",{type:"button",id:"reload-graph",class:"btn btn-link btn-reload-graph"},[Vs("i",{class:"fas fa-sync"})],-1),Xk=Vs("button",{type:"button",id:"autolayout",class:"btn btn-link btn-stabilize"},[Vs("i",{class:"fas fa-magic"})],-1),Qk={class:"card-footer"},e$={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},t$=Vs("i",{class:"fas fa-trash"},null,-1),a$=["href"],l$=[Vs("i",{class:"fas fa-download"},null,-1)];Rk.render=function(e,t,a,l,n,s){const o=kn("select-search"),i=kn("modal-delete-confirm"),r=kn("modal-autolayout-confirm"),c=kn("network-map"),u=kn("NoteList");return Ps(),js("div",Dk,[Vs("div",zk,[Vs("div",qk,[Bk,Vs("div",Vk,[Vs("div",Hk,[Vs("div",Gk,[Vs("button",{id:"max-entries-reached",type:"button",class:"btn btn-link",title:n.max_entry_title,disabled:"",hidden:""},Kk,8,Wk),Vs("div",Jk,[(Ps(!0),js(Ss,null,En(n.filter_list,((e,t)=>(Ps(),js("div",Yk,[Hs(o,{selected_option:n.active_filter_list[t],"onUpdate:selected_option":e=>n.active_filter_list[t]=e,options:n.filter_list[t],onSelect_option:s.click_item},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256))]),Zk,Xk]),Hs(i,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(r,{ref:"modal_autolayout",title:n.title_autolayout,body:n.body_autolayout,onAutolayout:s.reload_map},null,8,["title","body","onAutolayout"]),Hs(c,{ref:"asset_map",empty_message:n.no_services_message,event_listeners:n.event_listeners,page_csrf:a.page_csrf,url:n.get_url,url_params:a.url_params,map_id:a.map_id},null,8,["empty_message","event_listeners","page_csrf","url","url_params","map_id"])])]),Vs("div",Qk,[Vs("button",e$,[t$,Ks(" "+te(n.i18n("map_page.delete_services")),1)]),Vs("a",{href:n.download_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"asset_map.json",target:"_blank"},l$,8,a$)])]),Hs(u,{note_list:n.notes},null,8,["note_list"])])])},Rk.__file="http_src/vue/page-asset-map.vue";const n$={class:"form-group mb-3 row"},s$={class:"col-form-label col-sm-4"},o$={class:"col-sm-7"},i$=Vs("div",{class:"invalid-feedback"},null,-1),r$={class:"form-group mb-3 row"},c$={class:"col-form-label col-sm-4 pt-2"},u$={class:"form-switch col-sm-7 pt-2 ps-3"},d$={class:"col-form-label"};var _$={__name:"modal-add-device-exclusion",props:{body:String,title:String,footer:String,list_notes:String},emits:["add"],setup(e,{expose:t,emit:a}){const l=va(""),n=va(""),s=va(null),o=()=>{a("add",{mac_list:l.value,trigger_alerts:n.value}),i()},i=()=>{s.value.close()};t({show:()=>{l.value="",s.value.show()},close:i}),_n((()=>{}));const r=e=>i18n(e);return(t,a)=>(Ps(),Ls(np,{onShowed:a[2]||(a[2]=e=>{}),ref_key:"modal_id",ref:s},{title:ml((()=>[Ks(te(e.title),1)])),body:ml((()=>[Vs("div",n$,[Vs("label",s$,te(e.body),1),Vs("div",o$,[wn(Vs("textarea",{name:"items-list",id:"itemslist-textarea",class:"w-100 form-control",rows:"6","onUpdate:modelValue":a[0]||(a[0]=e=>l.value=e)},null,512),[[Mi,l.value]]),Vs("small",null,te(e.list_notes),1),i$])]),Vs("div",r$,[Vs("label",c$,te(r("edit_check.trigger_device_disconnected_alert")),1),Vs("div",u$,[wn(Vs("input",{type:"checkbox",class:"form-check-input ms-0","onUpdate:modelValue":a[1]||(a[1]=e=>n.value=e)},null,512),[[ji,n.value]])]),Vs("small",d$,te(r("edit_check.trigger_device_disconnected_alert_descr")),1)])])),footer:ml((()=>[Ks(te(r("host_details.notes"))+": "+te(e.footer)+" ",1),Vs("button",{type:"button",onClick:o,class:"btn btn-primary"},te(r("add")),1)])),_:1},512))},__file:"http_src/vue/modal-add-device-exclusion.vue"};const p$={key:0,class:"form-group mb-3 row"},f$={class:"col-form-label col-sm-4"},v$={class:"col-sm-7"},m$=["placeholder"],h$={class:"form-group mb-3 row"},g$={class:"col-form-label col-sm-4"},b$={class:"col-sm-7"},y$={class:"form-group mb-3 row"},w$={class:"col-form-label col-sm-4 pt-2"},x$={class:"form-switch col-sm-7 pt-2 ps-3"},k$={class:"col-form-label"};var $$={__name:"modal-edit-device-exclusion",props:{title:String,title_edit_all:String},emits:["edit"],setup(e,{expose:t,emit:a}){const l=va(""),n=va(""),s=va(""),o=va(i18n("if_stats_config.custom_name")),i=va(null),r=e=>i18n(e),c=va([{id:"allowed",value:"allowed",label:r("edit_check.authorized")},{id:"denied",value:"denied",label:r("edit_check.unauthorized")}]),u=va(!1),d=()=>{0==u.value?a("edit",{mac_alias:l.value,mac_status:n.value.value,trigger_alerts:s.value}):a("edit",{mac_status:n.value.value,trigger_alerts:s.value,mac_alias:"all"}),_()},_=()=>{i.value.close()};return t({show:e=>{if(null!=e){let t=null;c.value.forEach((a=>{a.id==e.status&&(t=a)})),n.value=t,l.value=e.mac_address.mac,s.value=e.trigger_alert||!1}else n.value=c.value[0],u.value=!0;i.value.show()},close:_}),_n((()=>{})),(t,a)=>(Ps(),Ls(np,{onShowed:a[3]||(a[3]=e=>{}),ref_key:"modal_id",ref:i},{title:ml((()=>[0==u.value?(Ps(),js(Ss,{key:0},[Ks(te(e.title),1)],64)):(Ps(),js(Ss,{key:1},[Ks(te(e.title_edit_all),1)],64))])),body:ml((()=>[0==u.value?(Ps(),js("div",p$,[Vs("label",f$,te(r("edit_check.device_alias")),1),Vs("div",v$,[wn(Vs("input",{type:"text",name:"custom_name",class:"form-control",placeholder:o.value,"onUpdate:modelValue":a[0]||(a[0]=e=>l.value=e)},null,8,m$),[[Mi,l.value]])])])):Ys("v-if",!0),Vs("div",h$,[Vs("label",g$,te(r("edit_check.device_status")),1),Vs("div",b$,[Hs(l_,{selected_option:n.value,"onUpdate:selected_option":a[1]||(a[1]=e=>n.value=e),options:c.value},null,8,["selected_option","options"])])]),Vs("div",y$,[Vs("label",w$,te(r("edit_check.trigger_device_disconnected_alert")),1),Vs("div",x$,[wn(Vs("input",{type:"checkbox",class:"form-check-input ms-0","onUpdate:modelValue":a[2]||(a[2]=e=>s.value=e)},null,512),[[ji,s.value]])]),Vs("small",k$,te(r("edit_check.trigger_device_disconnected_alert_descr")),1)])])),footer:ml((()=>[Vs("button",{type:"button",onClick:d,class:"btn btn-primary"},te(r("edit")),1)])),_:1},512))},__file:"http_src/vue/modal-edit-device-exclusion.vue"};const S$={class:"row"},N$={class:"col-md-12 col-lg-12"},C$=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),A$={class:"card"},E$={class:"card-body"},T$={key:0,class:"alert alert-info"},P$={id:"table_devices_vue"},U$=[Vs("i",{class:"fas fa-plus"},null,-1)],I$={class:"card-footer mt-3"},O$=Vs("i",{class:"fas fa-trash"},null,-1),M$=Vs("i",{class:"fas fa-edit"},null,-1);var j$={__name:"page-device-exclusions",props:{context:Object},setup(e){const t=e,a=va(),l=va(),n=va(),s=va(),o=va(),i=va("device_exclusions"),r=`${http_prefix}/lua/pro/rest/v2/add/device/exclusion.lua`,c=`${http_prefix}/lua/pro/rest/v2/delete/device/exclusion.lua`,u=`${http_prefix}/lua/pro/rest/v2/edit/device/exclusion.lua`,d=`${http_prefix}/lua/pro/rest/v2/get/device/learning_status.lua`,_=va(!1),p=e=>i18n(e);let f="",v="",m=p("edit_check.delete_all_device_exclusions"),h=p("edit_check.delete_all_device_exclusions_message"),g=p("edit_check.add_device_exclusion"),b=p("edit_check.add_device_exclusion_message"),y=p("edit_check.add_device_exclusion_notes"),w=p("edit_check.add_device_exclusion_list_notes"),x=p("edit_check.edit_device_exclusion"),k=p("edit_check.edit_all_devices_status"),$=p("edit_check.learning"),S=va(null),N=va(null);const C={csrf:t.context.csrf,ifid:t.context.ifid},A=[p("edit_check.device_exclusion_page_notes.note_1")],E=[p("edit_check.device_exclusion_page_notes.sub_note_1"),p("edit_check.device_exclusion_page_notes.sub_note_2")];function T(e){let t={click_button_edit_device:U,click_button_historical_flows:I,click_button_delete:P};null!=t[e.event_id]&&t[e.event_id](e)}async function P(e){let t=`${i18n("edit_check.delete_device_exclusion")} ${e.row.mac_address.mac}`;S.value=e.row,v=t,f=i18n("edit_check.device_exclusion"),l.value.show(v,f)}async function U(e){N.value=e.row,o.value.show(N.value)}function I(e){const t=e.row,a=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${t.first_seen.timestamp}&epoch_end=${t.last_seen.timestamp}&mac=${t.mac_address.mac};eq&aggregated=false`;window.open(a,"_blank")}_n((async()=>{await R()}));const O=t.crsf,M=async function(){const e=S.value,t=NtopUtils.buildURL(c,{device:e.mac_address.mac});C.device={mac:e.mac_address.mac},await ntopng_utility.http_post_request(t,C),D()},j=async function(){n.value.show()},L=async function(){o.value.show()},F=async function(){const e=NtopUtils.buildURL(c,{device:"all"});await ntopng_utility.http_post_request(e,C),D()},R=async function(){(await ntopng_utility.http_request(d)).learning_done?_.value=!1:_.value=!0},D=async function(){await R(),a.value.refresh_table()};function z(){s.value.show()}const q=async function(e){let t=e;t.mac_list=t.mac_list.replace(/(?:\t| )/g,""),t.mac_list=t.mac_list.replace(/(?:\r\n|\r|\n)/g,",");const a=NtopUtils.buildURL(r,{...t});await ntopng_utility.http_post_request(a,C),D()},B=async function(e){let a=N.value;null!=a&&(e.mac_alias=e.mac_alias.replace(/(?:\t| )/g,"")),null!=a&&(e.mac=a.mac_address.mac),e.csrf=t.context.csrf;const l=NtopUtils.buildURL(u,{...e});await ntopng_utility.http_post_request(l,C),D()};function V(e,t,a){if(null!=e){let l=t[e.data.data_field],n=a[e.data.data_field];if("last_ip"==e.id)return""!=l&&(l=H(l),l=NtopUtils.convertIPAddress(l)),""!=n&&(n=H(n),n=NtopUtils.convertIPAddress(n)),1==e.sort?l.localeCompare(n):n.localeCompare(l);if("manufacturer"==e.id)return void 0===l&&(l=""),void 0===n&&(n=""),1==e.sort?l.localeCompare(n):n.localeCompare(l);if("mac_address"==e.id)return l=l.mac,n=n.mac,1==e.sort?l.localeCompare(n):n.localeCompare(l);if("first_seen"==e.id)return l=0==t.first_seen.timestamp?"":t.first_seen.data,n=0==a.first_seen.timestamp?"":a.first_seen.data,1==e.sort?l.localeCompare(n):n.localeCompare(l);if("last_seen"==e.id)return l=0==t.last_seen.timestamp?"":t.last_seen.data,n=0==a.last_seen.timestamp?"":a.last_seen.data,1==e.sort?l.localeCompare(n):n.localeCompare(l);if("status"==e.id)return 1==e.sort?l.localeCompare(n):n.localeCompare(l);if("trigger_alert"==e.id)return l=G(l),n=G(n),1==e.sort?l.localeCompare(n):n.localeCompare(l)}}function H(e){return e.split("host=")[1].split("'")[0]}function G(e){return e?"true":e?"true"==e||"false"==e?e:void 0:"false"}const W=async e=>{let t={mac_address:(e,t)=>{let a=e.mac,l=e.alias;return e.symbolic_mac&&e.symbolic_mac!=a&&(a=e.symbolic_mac),null!=l&&l!=a&&(a=`${a} (${l})`),null!=e.url&&(a=`<a href='${e.url}' title='${e.mac}'>${a}</a>`),a},first_seen:(e,t)=>0==e.timestamp?"":e.data,last_seen:(e,t)=>0==e.timestamp?"":e.data,status:(e,t)=>{let a="";return"allowed"==e?(a=p("edit_check.authorized"),`<span class="badge bg-success" title="${a}">${a}</span>`):(a=p("edit_check.unauthorized"),`<span class="badge bg-danger" title="${a}">${a}</span>`)},trigger_alert:(e,t)=>{let a=!1;return a="false"!=e&&e,a?'<i class="fas fa-check text-success"></i>':'<i class="fas fa-times text-danger"></i>'}};return e.forEach((e=>{e.render_func=t[e.data_field]})),e},K=()=>({ifid:ntopng_url_manager.get_url_entry("ifid")||t.context.ifid});const J=e=>e;return(e,t)=>(Ps(),js("div",S$,[Vs("div",N$,[C$,Vs("div",A$,[Vs("div",E$,[_.value?(Ps(),js("div",T$,te(ya($)),1)):Ys("v-if",!0),Vs("div",P$,[Hs(lx,{ref_key:"modal_delete_confirm",ref:l,title:ya(f),body:ya(v),onDelete:M},null,8,["title","body"]),Hs(lx,{ref_key:"modal_delete_all",ref:n,title:ya(m),body:ya(h),onDelete:F},null,8,["title","body"]),Hs(_$,{ref_key:"modal_add_device",ref:s,title:ya(g),body:ya(b),footer:ya(y),list_notes:ya(w),onAdd:q},null,8,["title","body","footer","list_notes"]),Hs($$,{ref_key:"modal_edit_device",ref:o,title:ya(x),title_edit_all:ya(k),onEdit:B},null,8,["title","title_edit_all"]),Hs(iv,{ref_key:"table_device_exclusions",ref:a,csrf:ya(O),table_id:i.value,f_map_columns:W,get_extra_params_obj:K,f_map_config:J,f_sort_rows:V,onCustom_event:T},{custom_header:ml((()=>[Vs("button",{class:"btn btn-link",type:"button",ref:"add_device",onClick:z},U$,512)])),_:1},8,["csrf","table_id"])])]),Vs("div",I$,[Vs("button",{type:"button",onClick:j,class:"btn btn-danger me-1"},[O$,Ks(" "+te(p("edit_check.delete_all_device_exclusions")),1)]),Vs("button",{type:"button",onClick:L,class:"btn btn-secondary"},[M$,Ks(" "+te(p("edit_check.edit_all_devices_status")),1)])])]),Hs(pv,{note_list:A,add_sub_notes:"true",sub_note_list:E})])]))},__file:"http_src/vue/page-device-exclusions.vue"},L$={components:{datatable:xw},props:{page_csrf:String,url_params:Object},created(){!function(e){const t=[];let a=[],l=3;t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let n={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/fingerprint/data.lua`,url_params),enable_search:!0};a=[{columnName:i18n("ja3_client_fingerprint"),name:"ja3",data:"ja3",className:"text-nowrap",render:(e,t)=>`<a class="ntopng-external-link" href="https://sslbl.abuse.ch/ja3-fingerprints/${e}">${e} <i class="fas fa-external-link-alt"></i></a>`,responsivePriority:0,createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("status"),name:"is_malicious",data:"is_malicious",className:"text-nowrap text-center",responsivePriority:0,render:(e,t)=>e?`<i class="fa-solid fa-face-frown text-danger" title="${i18n("malicious")}"></i>`:`<i class="fa-solid fa-face-smile text-success" title="${i18n("ok")}"></i>`},{columnName:i18n("app_name"),name:"app_name",data:"app_name",className:"text-nowrap text-right",responsivePriority:1},{columnName:i18n("num_uses"),name:"num_uses",data:"num_uses",className:"text-nowrap text-right",responsivePriority:1,render:e=>NtopUtils.formatValue(e)}];let s={serverSide:!1,order:[[l,"desc"]]},o=ntopng_utility.clone(n);o.table_buttons=n.table_buttons,o.data_url=`${o.data_url}`,o.columns_config=a,o.table_config=ntopng_utility.clone(s),e.config_devices_standard=o}(this)},mounted(){},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null}),methods:{reload_table:function(){this.get_active_table().reload()},get_active_table:function(){return this.$refs.table_fingerprint}}};const F$={class:"row"},R$={class:"col-md-12 col-lg-12"},D$=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),z$={class:"card"},q$={class:"card-body"},B$={id:"table_host_tls"},V$={class:"card-footer"};L$.render=function(e,t,a,l,n,s){const o=kn("datatable");return Ps(),js("div",F$,[Vs("div",R$,[D$,Vs("div",z$,[Vs("div",q$,[Vs("div",B$,[Hs(o,{ref:"table_fingerprint",table_buttons:n.config_devices_standard.table_buttons,columns_config:n.config_devices_standard.columns_config,data_url:n.config_devices_standard.data_url,enable_search:n.config_devices_standard.enable_search,table_config:n.config_devices_standard.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])]),Vs("div",V$,[Vs("b",null,te(n.i18n("fingerprint_note")),1)])])])])},L$.__file="http_src/vue/page-host-tls.vue";var H$={components:{datatable:xw},props:{page_csrf:String,url_params:Object},created(){!function(e){const t=[];let a=[],l=3;t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let n={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/fingerprint/data.lua`,url_params),enable_search:!0};a=[{columnName:i18n("hassh_fingerprint"),name:"ja3",data:"ja3",className:"text-nowrap",render:(e,t)=>`<a class="ntopng-external-link" href="https://sslbl.abuse.ch/ja3-fingerprints/${e}">${e} <i class="fas fa-external-link-alt"></i></a>`,responsivePriority:0,createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("status"),name:"is_malicious",data:"is_malicious",className:"text-nowrap text-center",responsivePriority:0,render:(e,t)=>e?`<i class="fa-solid fa-face-frown text-danger" title="${i18n("malicious")}"></i>`:`<i class="fa-solid fa-face-smile text-success" title="${i18n("ok")}"></i>`},{columnName:i18n("app_name"),name:"app_name",data:"app_name",className:"text-nowrap text-right",responsivePriority:1},{columnName:i18n("num_uses"),name:"num_uses",data:"num_uses",className:"text-nowrap text-right",responsivePriority:1,render:e=>NtopUtils.formatValue(e)}];let s={serverSide:!1,order:[[l,"desc"]]},o=ntopng_utility.clone(n);o.table_buttons=n.table_buttons,o.data_url=`${o.data_url}`,o.columns_config=a,o.table_config=ntopng_utility.clone(s),e.config_devices_standard=o}(this)},mounted(){},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null}),methods:{reload_table:function(){this.get_active_table().reload()},get_active_table:function(){return this.$refs.table_hassh}}};const G$={class:"row"},W$={class:"col-md-12 col-lg-12"},K$=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),J$={class:"card"},Y$={class:"card-body"},Z$={id:"table_host_ssh"};H$.render=function(e,t,a,l,n,s){const o=kn("datatable");return Ps(),js("div",G$,[Vs("div",W$,[K$,Vs("div",J$,[Vs("div",Y$,[Vs("div",Z$,[Hs(o,{ref:"table_hassh",table_buttons:n.config_devices_standard.table_buttons,columns_config:n.config_devices_standard.columns_config,data_url:n.config_devices_standard.data_url,enable_search:n.config_devices_standard.enable_search,table_config:n.config_devices_standard.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])])])])])},H$.__file="http_src/vue/page-host-ssh.vue";const X$="change_map_event";var Q$={components:{"page-periodicity-map":bk,"page-periodicity-table":gx,"page-asset-map":Rk,"page-asset-table":sx,"page-service-map":Qx,"page-service-table":Mx,"page-navbar":n_},props:{page_csrf:String,base_url_params:Object,ifid:Number,is_admin:Boolean,map_id:String,view:String,navbar_info:Object,service_acceptance:Array,service_map_filter_list:Object,service_table_filter_list:Array,periodicity_map_filter_list:Object,periodicity_table_filter_list:Array,asset_map_filter_list:Object,asset_table_filter_list:Array},created(){this.url_params=this.$props.base_url_params,this.active_tab=this.$props.map_id,this.page=this.url_params.page,this.updated_view=this.$props.view,asset_map_filter_list&&asset_table_filter_list&&(this.navbar_context.items_table.push({active:!1,class:"disabled ps-0 pe-0",label:"-"}),this.navbar_context.items_table.push({active:!1,icon:"fas fa-lg fa-compass",class:"disabled pe-0",title:i18n("asset_map"),label:i18n("asset")+": "}),this.navbar_context.items_table.push({active:!1,label:i18n("map_format"),id:"asset_map",page:"graph"}),this.navbar_context.items_table.push({active:!1,class:"disabled ps-0 pe-0",label:"/"}),this.navbar_context.items_table.push({active:!1,label:i18n("table_format"),id:"asset_map",page:"table"})),this.navbar_context.items_table.forEach((e=>{e.id==this.active_tab&&e.page==this.page?e.active=!0:e.active=!1}))},mounted(){const e=this.format_navbar_title;e(this.$props.navbar_info),ntopng_events_manager.on_custom_event("page_navbar",ntopng_custom_events.CHANGE_PAGE_TITLE,(t=>{e({selected_iface:this.$props.navbar_info.selected_iface,selected_host:t})})),ntopng_events_manager.on_custom_event("change_service_table_tab",X$,(t=>{x.set_key_to_url("map",t.id),x.set_key_to_url("page",t.page),"table"==t.page&&this.destroy(),this.active_tab=t.id,this.page=t.page,this.url_params.map=t.id,this.url_params.page=t.page,this.updated_view=x.get_url_entry("view"),e()}))},data:()=>({i18n:e=>i18n(e),active_tab:null,page:null,url_params:{},updated_view:null,navbar_node:{},navbar_context:{main_title:{label:" "+i18n("maps"),icon:"fas fa-map"},secondary_title_list:[],items_table:[{active:!1,icon:"fas fa-lg fa-concierge-bell",class:"disabled pe-0",title:i18n("service_map"),label:i18n("service")+": "},{active:!0,label:i18n("map_format"),id:"service_map",page:"graph"},{active:!1,class:"disabled ps-0 pe-0",label:"/"},{active:!1,label:i18n("table_format"),id:"service_map",page:"table"},{active:!1,class:"disabled ps-0 pe-0",label:"-"},{active:!1,icon:"fas fa-lg fa-clock",class:"disabled pe-0",title:i18n("periodicity_map"),label:i18n("periodicity")+": "},{active:!1,label:i18n("map_format"),id:"periodicity_map",page:"graph"},{active:!1,class:"disabled ps-0 pe-0",label:"/"},{active:!1,label:i18n("table_format"),id:"periodicity_map",page:"table"}]}}),methods:{destroy:function(){this.get_active_tab().destroy()},format_navbar_title:function(e){if(e?this.navbar_node=e:e=this.navbar_node,this.navbar_context.secondary_title_list=[{label:e.selected_iface.label,title:NtopUtils.shortenLabel(`${e.selected_iface.label}`,16)}],e.selected_host&&""!=e.selected_host.id){const t=e.selected_host.label,a=NtopUtils.removeVlan(e.selected_host.id);this.navbar_context.secondary_title_list[0].href=`${http_prefix}/lua/pro/enterprise/network_maps.lua?map=${this.active_tab}&page=${this.page}&ifid=${this.$props.ifid}`,this.navbar_context.secondary_title_list.push({label:`${NtopUtils.formatNameValue(t,a)}`,title:`${e.selected_host.label}`,href:e.selected_host.is_active?`${http_prefix}/lua/host_details.lua?host=${a}`:null,icon:"fa-solid fa-laptop",target_blank:"true"})}},get_active_tab:function(){return this.$refs[this.active_tab+"_"+this.page]},click_item:function(e){e.id==this.active_tab&&e.page==this.page||(this.navbar_context.items_table.forEach((e=>e.active=!1)),e.active=!0,ntopng_events_manager.emit_custom_event(X$,e))}}};Q$.render=function(e,t,a,l,n,s){const o=kn("page-navbar"),i=kn("page-service-map"),r=kn("page-service-table"),c=kn("page-periodicity-map"),u=kn("page-periodicity-table"),d=kn("page-asset-map"),_=kn("page-asset-table");return Ps(),js(Ss,null,[Hs(o,{id:"page_navbar",main_title:n.navbar_context.main_title,secondary_title_list:n.navbar_context.secondary_title_list,help_link:n.navbar_context.help_link,items_table:n.navbar_context.items_table,onClick_item:s.click_item},null,8,["main_title","secondary_title_list","help_link","items_table","onClick_item"]),"service_map"==n.active_tab&&"graph"==n.page?(Ps(),Ls(i,{key:0,ref:"service_map_graph",page_csrf:a.page_csrf,url_params:n.url_params,ifid:a.ifid,is_admin:a.is_admin,map_id:a.map_id,all_filter_list:a.service_map_filter_list},null,8,["page_csrf","url_params","ifid","is_admin","map_id","all_filter_list"])):Ys("v-if",!0),"service_map"==n.active_tab&&"table"==n.page?(Ps(),Ls(r,{key:1,ref:"service_map_table",page_csrf:a.page_csrf,url_params:n.url_params,view:n.updated_view,table_filters:a.service_table_filter_list,is_admin:a.is_admin,service_acceptance:a.service_acceptance},null,8,["page_csrf","url_params","view","table_filters","is_admin","service_acceptance"])):Ys("v-if",!0),"periodicity_map"==n.active_tab&&"graph"==n.page?(Ps(),Ls(c,{key:2,ref:"periodicity_map_graph",page_csrf:a.page_csrf,url_params:n.url_params,ifid:a.ifid,is_admin:a.is_admin,map_id:a.map_id,all_filter_list:a.periodicity_map_filter_list},null,8,["page_csrf","url_params","ifid","is_admin","map_id","all_filter_list"])):Ys("v-if",!0),"periodicity_map"==n.active_tab&&"table"==n.page?(Ps(),Ls(u,{key:3,ref:"periodicity_map_table",page_csrf:a.page_csrf,url_params:n.url_params,view:n.updated_view,table_filters:a.periodicity_table_filter_list,is_admin:a.is_admin},null,8,["page_csrf","url_params","view","table_filters","is_admin"])):Ys("v-if",!0),a.asset_map_filter_list&&a.asset_table_filter_list?(Ps(),js(Ss,{key:4},["asset_map"==n.active_tab&&"graph"==n.page?(Ps(),Ls(d,{key:0,ref:"asset_map_graph",page_csrf:a.page_csrf,url_params:n.url_params,ifid:a.ifid,is_admin:a.is_admin,map_id:a.map_id,all_filter_list:a.asset_map_filter_list},null,8,["page_csrf","url_params","ifid","is_admin","map_id","all_filter_list"])):Ys("v-if",!0),"asset_map"==n.active_tab&&"table"==n.page?(Ps(),Ls(_,{key:1,ref:"asset_map_table",page_csrf:a.page_csrf,url_params:n.url_params,view:n.updated_view,table_filters:a.asset_table_filter_list},null,8,["page_csrf","url_params","view","table_filters"])):Ys("v-if",!0)],64)):Ys("v-if",!0)],64)},Q$.__file="http_src/vue/page-home-map.vue";const eS=["width","height"],tS=[Vs("defs",null,null,-1),Vs("g",{class:"nodes",style:{stroke:"#000",strokeOpacity:"0.5"}},null,-1),Vs("g",{class:"links",style:{stroke:"#000",strokeOpacity:"0.3",fill:"none"}},null,-1),Vs("g",{class:"texts"},null,-1)];var aS={__name:"page-sankey",props:{width:Number,height:Number},setup(e){const t=e,a=d3v7,l=va(null),n=va({});async function s(){return data=function(e){let t=[],a=[],l={};const n=(e,a,n)=>{if(null!=l[e])return;let s=t.length;l[e]=s;let o={index:s,name:e,href:a,color:n};t.push(o)},s=(e,t,n,s)=>{let o={source:l[e],target:l[t],value:n,label:s};a.push(o)};return e.forEach((e=>{n(e.source,e.source_link,e.source_color),n(e.target,e.target_link,e.target_color),s(e.source,e.target,e.value,e.link)})),{nodes:t,links:a}}([{link_color:"#e377c2",source_color:"#e377c2",source_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=IGMP",target:"224.0.0.251",source:"IGMP",link:"IGMP",target_link:"/lua/host_details.lua?host=224.0.0.251&vlan=0",target_node:"224.0.0.251",source_node:"192.168.1.7",value:60},{link_color:"#e377c2",source_link:"/lua/host_details.lua?host=192.168.1.7&vlan=0",target:"IGMP",source:"192.168.1.7",link:"IGMP",target_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=IGMP",target_node:"224.0.0.2",target_color:"#e377c2",source_node:"192.168.1.7",value:120},{link_color:"#e377c2",source_color:"#e377c2",source_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=IGMP",target:"224.0.0.2",source:"IGMP",link:"IGMP",target_link:"/lua/host_details.lua?host=224.0.0.2&vlan=0",target_node:"224.0.0.2",source_node:"192.168.1.7",value:60},{link_color:"#bcbd22",source_link:"/lua/host_details.lua?host=192.168.1.7&vlan=0",target:"MDNS",source:"192.168.1.7",link:"MDNS",target_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=MDNS",target_node:"224.0.0.251",target_color:"#bcbd22",source_node:"192.168.1.7",value:396},{link_color:"#bcbd22",source_color:"#bcbd22",source_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=MDNS",target:"224.0.0.251",source:"MDNS",link:"MDNS",target_link:"/lua/host_details.lua?host=224.0.0.251&vlan=0",target_node:"224.0.0.251",source_node:"192.168.1.7",value:396}]),data}return dn((async()=>{})),_n((async()=>{!async function(){const e=a.scaleOrdinal(a.schemeCategory10);let o=await s();const i=function(){let e=t.width;null==e&&(e=window.innerWidth-200);let a=t.height;null==a&&(a=window.innerHeight-50);return{width:e,height:a}}();n.value=i;const{links:r,nodes:c}=function(e,t,l){return a.sankey().nodeAlign(a.sankeyCenter).nodeWidth(10).nodePadding(10).extent([[0,5],[t,l]])(e)}(o,i.width-10,i.height-5);a.select(l.value).select("g.nodes").selectAll("rect").data(c).join((t=>{const l=t.append("rect");l.attr("x",(e=>e.x0)).attr("y",(e=>e.y0)),l.transition(a.easeLinear).delay(1e3).duration(500).attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("dataIndex",(e=>e.index)).attr("fill",(t=>e(t.index/c.length))),l.append("title").text((e=>`${e.name}\n${e.hours}`))}),(t=>t.transition(a.easeLinear).delay(500).duration(500).attr("x",(e=>e.x0)).attr("y",(e=>e.y0)).attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("dataIndex",(e=>e.index)).attr("fill",(t=>e(t.index/c.length))).select("title").text((e=>`${e.name}\n${e.hours}`))),(e=>e.transition(a.easeLinear).duration(500).style("opacity",0).remove())).on("dblclick",(function(e){})),a.select(l.value).select("g.texts").selectAll("text").data(c).join((t=>{t.append("text").transition(a.easeLinear).delay(1e3).duration(500).attr("x",(e=>e.x0<i.width/2?e.x1+6:e.x0-6)).attr("y",(e=>(e.y1+e.y0)/2)).attr("fill",(t=>a.rgb(e(t.index/c.length)).darker())).attr("alignment-baseline","middle").attr("text-anchor",(e=>e.x0<i.width/2?"start":"end")).attr("font-size",9).text((e=>e.name))}),(t=>t.transition(a.easeLinear).delay(500).duration(500).attr("x",(e=>e.x0<i.width/2?e.x1+6:e.x0-6)).attr("y",(e=>(e.y1+e.y0)/2)).attr("fill",(t=>a.rgb(e(t.index/c.length)).darker())).attr("text-anchor",(e=>e.x0<i.width/2?"start":"end")).attr("font-size",9).text((e=>e.name))),(e=>e.transition(a.easeLinear).duration(500).style("opacity",0).remove())),a.select(l.value).select("defs").selectAll("linearGradient").data(r).join((t=>{const a=t.append("linearGradient");a.attr("id",(e=>`gradient-${e.index}`)).attr("gradientUnits","userSpaceOnUse").attr("x1",(e=>e.source.x1)).attr("x2",(e=>e.target.x0)),a.append("stop").attr("offset","0").attr("stop-color",(t=>e(t.source.index/c.length))),a.append("stop").attr("offset","100%").attr("stop-color",(t=>e(t.target.index/c.length)))}),(t=>{t.attr("id",(e=>`gradient-${e.index}`)).attr("gradientUnits","userSpaceOnUse").attr("x1",(e=>e.source.x1)).attr("x2",(e=>e.target.x0)),t.selectAll("stop").remove(),t.append("stop").attr("offset","0").attr("stop-color",(t=>e(t.source.index/c.length))),t.append("stop").attr("offset","100%").attr("stop-color",(t=>e(t.target.index/c.length)))}),(e=>e.remove())),a.select(l.value).select("g.links").selectAll("path").data(r).join((e=>{const t=e.append("path");t.transition(a.easeLinear).delay(1e3).duration(500).attr("d",a.sankeyLinkHorizontal()).attr("stroke",(e=>`url(#gradient-${e.index}`)).attr("stroke-width",(e=>e.width)),t.append("title").text((e=>`${e.hours}`))}),(e=>e.transition(a.easeLinear).delay(500).duration(500).attr("d",a.sankeyLinkHorizontal()).attr("stroke",(e=>`url(#gradient-${e.index}`)).attr("stroke-width",(e=>e.width)).select("title").text((e=>`${e.hours}`))),(e=>e.transition(a.easeLinear).duration(500).style("opacity",0).remove()))}()})),(e,t)=>(Ps(),js("div",null,[(Ps(),js("svg",{ref_key:"sankey_chart_ref",ref:l,width:n.value.width,height:n.value.height,style:{margin:"10px"}},tS,8,eS))]))}};lp("\n.node rect {\n  fill-opacity: 0.9;\n  shape-rendering: crispEdges;\n}\n.node text {\n  pointer-events: none;\n  text-shadow: 0 1px 0 #fff;\n}\n.link {\n  fill: none;\n  stroke: #000;\n  stroke-opacity: 0.2;\n}\n.link:hover {\n  stroke-opacity: 0.5;\n}\n"),aS.__file="http_src/vue/page-sankey.vue";const lS="change_applications_tab_event";var nS={components:{chart:C_,datatable:xw,"modal-delete-confirm":lx,"tab-list":Xw},props:{page_csrf:String,url_params:Object,view:String,is_ch_enabled:Boolean,is_locale:String,ts_l7_enabled:Boolean,ts_cat_enabled:Boolean},created(){this.applications_tab=x.get_url_entry("view")||this.$props.view,this.tab_list.forEach((e=>{this.applications_tab==e.id?e.active=!0:e.active=!1})),function(e){const t=[];t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let a=url_params;a.view="applications";let l={table_buttons:t,data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/l7/data.lua`,a),enable_search:!0,table_config:{serverSide:!1,order:[[6,"desc"]],columnDefs:[{type:"time-uni",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3},{type:"file-size",targets:5}]}},n=[{columnName:i18n("host_details.application"),targets:0,width:"20",name:"application",data:"application",className:"text-nowrap",responsivePriority:1,render:t=>"1"==e.$props.is_locale&&!0===e.$props.ts_l7_enabled?`<a href="${http_prefix}/lua/host_details.lua?host=${e.$props.url_params.host}@${e.$props.url_params.vlan}&page=historical&ifid=${e.$props.url_params.ifid}&protocol=${t.label}&ts_schema=host:ndpi" target="_blank">${t.label}</a>`:`${t.label}`},{columnName:i18n("host_details.duration"),targets:1,width:"10",name:"duration",data:"duration",className:"text-nowrap",responsivePriority:1,render:e=>NtopUtils.secondsToTime(e)},{columnName:i18n("host_details.sent"),targets:2,width:"10",name:"sent",data:"bytes_sent",className:"text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.rcvd"),targets:3,width:"10",name:"rcvd",data:"bytes_rcvd",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.breakdown"),targets:4,width:"10",name:"breakdown",data:"breakdown",orderable:!1,className:"text-center text-nowrap",responsivePriority:2,render:(e,t,a)=>{const l=100*a.bytes_sent/a.tot_bytes,n=100*a.bytes_rcvd/a.tot_bytes;return NtopUtils.createBreakdown(l,n,i18n("host_details.sent"),i18n("host_details.rcvd"))}},{columnName:i18n("host_details.tot_bytes"),targets:5,width:"20",name:"tot_bytes",data:"tot_bytes",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.tot_percentage"),targets:6,width:"20",name:"percentage",data:"percentage",className:"text-center text-nowrap",responsivePriority:2,render:e=>{const t=e.toFixed(1);return NtopUtils.createProgressBar(t)}}];is_ch_enabled&&e.add_action_column(n,"l7proto","application");let s=ntopng_utility.clone(l);s.columns_config=n,e.config_devices_applications=s,a.view="categories",l.data_url=NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/l7/data.lua`,a),n=[{columnName:i18n("host_details.category"),targets:0,name:"category",data:"category",className:"text-nowrap",responsivePriority:1,render:t=>"1"==e.$props.is_locale&&!0===e.$props.ts_cat_enabled?`<a href="${http_prefix}/lua/host_details.lua?host=${e.$props.url_params.host}@${e.$props.url_params.vlan}&ts_schema=host:ndpi_categories&page=historical&category=${t.label}" target="_blank">${t.label}</a>`:`${t.label}`},{columnName:i18n("host_details.applications"),targets:0,name:"applications",data:"applications",orderable:!1,className:"text-nowrap",responsivePriority:1,render:t=>"1"==e.$props.is_locale?`${t.label||""} <a href="${http_prefix}/${t.href}${t.category_id}">${t.more_protos||""}</a>`:`${t.label||""}`},{columnName:i18n("host_details.duration"),targets:0,name:"duration",data:"duration",className:"text-nowrap",responsivePriority:1,render:e=>NtopUtils.secondsToTime(e)},{columnName:i18n("host_details.tot_bytes"),targets:0,name:"tot_bytes",data:"tot_bytes",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.tot_percentage"),targets:0,name:"percentage",data:"percentage",className:"text-center text-nowrap",responsivePriority:2,render:e=>{const t=e.toFixed(1);return NtopUtils.createProgressBar(t)}}],is_ch_enabled&&e.add_action_column(n,"l7cat","category");let o=ntopng_utility.clone(l);o.columns_config=n,o.table_config.order=[[4,"desc"]],o.table_config.columnDefs=[{type:"time-uni",targets:2},{type:"file-size",targets:3}],e.config_devices_categories=o}(this)},mounted(){C.on_custom_event("change_applications_tab_event",lS,(e=>{let t=this.get_active_table();x.set_key_to_url("view",e.id),t.destroy_table(),this.applications_tab=e.id}))},data(){return{i18n:e=>i18n(e),applications_tab:null,config_devices_applications:null,config_devices_categories:null,chart_options:[{title:i18n("graphs.top_10_ndpi_protocols"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l7/proto_data.lua`,tab:"applications",id:"top_applications"},{title:i18n("graphs.top_breed"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l7/breed_data.lua`,tab:"applications",id:"top_breed"},{title:i18n("graphs.top_10_ndpi_categories"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l7/cat_data.lua`,tab:"categories",id:"top_categories"},{title:i18n("graphs.top_breed"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l7/breed_data.lua`,tab:"categories",id:"top_breed"}],tab_list:[{title:i18n("host_details.applications_tab"),active:"applications"==this.$props.view,id:"applications"},{title:i18n("host_details.categories_tab"),active:"categories"==this.$props.view,id:"categories"}]}},methods:{add_action_column:function(e,t,a){const l=`${this.$props.url_params.host}`,n=`${this.$props.url_params.vlan}`,s=`${this.$props.url_params.ifid}`;let o="page-stats-action-jump-historical";e.push({columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:o,render:(e,i,r)=>{const c={handlerId:o,onClick:()=>{let e=`${http_prefix}/lua/pro/db_search.lua?ifid=${s}&${t}=${r[a].id};eq&ip=${l};eq`;0!=n&&(e=`${e}&vlan_id=${n};eq`),window.open(e)}};return DataTableUtils.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:c}])}})},destroy:function(){this.get_active_table().destroy_table()},click_item:function(e){this.tab_list.forEach((e=>e.active=!1)),e.active=!0,C.emit_custom_event(lS,e)},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},get_active_table:function(){return this.$refs[`table_host_${this.applications_tab}`]},get_f_get_custom_chart_options:()=>(console.log("get_f_"),async e=>charts_options_items.value[chart_index].chart_options)}};const sS={class:"row"},oS={class:"col-md-12 col-lg-12"},iS={class:"card"},rS=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),cS={class:"card-body"},uS={id:"host_details_applications"},dS={class:"row mb-4 mt-4",id:"host_details_applications"},_S={class:"col-6"},pS={key:0,class:"widget-name"};nS.render=function(e,t,a,l,n,s){const o=kn("tab-list"),i=kn("chart"),r=kn("datatable");return Ps(),js("div",sS,[Vs("div",oS,[Vs("div",iS,[rS,Vs("div",cS,[Vs("div",uS,[Hs(o,{ref:"host_details_applications_tab_list",id:"host_details_applications_tab_list",tab_list:n.tab_list,onClick_item:s.click_item},null,8,["tab_list","onClick_item"]),Vs("div",dS,[(Ps(!0),js(Ss,null,En(n.chart_options,(e=>(Ps(),js("div",_S,[e.tab==n.applications_tab?(Ps(),js("h3",pS,te(e.title),1)):Ys("v-if",!0),e.tab==n.applications_tab?(Ps(),Ls(i,{key:1,id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!1},null,8,["id","chart_type","base_url_request"])):Ys("v-if",!0)])))),256))]),"applications"==n.applications_tab?(Ps(),Ls(r,{key:0,ref:"table_host_applications",table_buttons:n.config_devices_applications.table_buttons,columns_config:n.config_devices_applications.columns_config,data_url:n.config_devices_applications.data_url,enable_search:n.config_devices_applications.enable_search,table_config:n.config_devices_applications.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])):Ys("v-if",!0),"categories"==n.applications_tab?(Ps(),Ls(r,{key:1,ref:"table_host_categories",table_buttons:n.config_devices_categories.table_buttons,columns_config:n.config_devices_categories.columns_config,data_url:n.config_devices_categories.data_url,enable_search:n.config_devices_categories.enable_search,table_config:n.config_devices_categories.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])):Ys("v-if",!0)])])])])])},nS.__file="http_src/vue/page-host-details-applications.vue";const fS={class:"row"},vS={class:"col-md-12 col-lg-12"},mS={class:"card"},hS=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),gS={class:"card-body"},bS={id:"host_details_traffic"},yS={class:"row mb-4 mt-4",id:"host_details_traffic"},wS={class:"col-4"},xS={class:"widget-name"};var kS={__name:"page-host-details-traffic",props:{page_csrf:String},setup(e){const t=va(null);va([]);const a=va({});dn((async()=>{!function(e){const l=[];let n={};n.host=x.get_url_entry("host"),n.vlan=x.get_url_entry("vlan"),n.ifid=x.get_url_entry("ifid"),l.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,a,l,n){t.value.reload()}});let s={table_buttons:l,data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/l4/data.lua`,n),enable_search:!0,table_config:{serverSide:!1,order:[[6,"desc"]],columnDefs:[{type:"time-uni",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3},{type:"file-size",targets:5}]}},o=[{columnName:i18n("protocol"),targets:0,name:"protocol",data:"protocol",className:"text-nowrap",responsivePriority:1},{columnName:i18n("chart"),targets:1,name:"historical",data:"historical",className:"text-nowrap",responsivePriority:1},{columnName:i18n("traffic_labels.bytes_sent"),targets:2,name:"sent",data:"bytes_sent",className:"text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("traffic_labels.bytes_rcvd"),targets:3,name:"rcvd",data:"bytes_rcvd",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("traffic_labels.breakdown"),targets:4,name:"breakdown",data:"breakdown",orderable:!1,className:"text-center text-nowrap",responsivePriority:2,render:(e,t,a)=>{const l=100*a.bytes_sent/a.total_bytes,n=100*a.bytes_rcvd/a.total_bytes;return NtopUtils.createBreakdown(l,n,i18n("host_details.sent"),i18n("host_details.rcvd"))}},{columnName:i18n("traffic_labels.total_bytes"),targets:5,name:"tot_bytes",data:"total_bytes",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("traffic_labels.total_percentage"),targets:6,width:"20%",name:"percentage",data:"total_percentage",className:"text-center text-nowrap",responsivePriority:2,render:e=>{const t=e.toFixed(1);return NtopUtils.createProgressBar(t)}}],i=ntopng_utility.clone(s);i.columns_config=o,a.value=i}()})),mn((async()=>{t.value.destroy_table()}));const l=[{title:i18n("graphs.l4_proto"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l4/proto_data.lua`,id:"traffic_protos"},{title:i18n("graphs.contacted_hosts"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l4/contacted_hosts_data.lua`,id:"contacted_hosts"},{title:i18n("graphs.traffic"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l4/traffic_data.lua`,id:"traffic"}];return(e,n)=>(Ps(),js("div",fS,[Vs("div",vS,[Vs("div",mS,[hS,Vs("div",gS,[Vs("div",bS,[Vs("div",yS,[(Ps(),js(Ss,null,En(l,(e=>Vs("div",wS,[Vs("h3",xS,te(e.title),1),Hs(C_,{id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!1},null,8,["id","chart_type","base_url_request"])]))),64))]),Hs(xw,{ref_key:"traffic_table",ref:t,table_buttons:a.value.table_buttons,columns_config:a.value.columns_config,data_url:a.value.data_url,enable_search:a.value.enable_search,table_config:a.value.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])])])])]))},__file:"http_src/vue/page-host-details-traffic.vue"};const $S={class:"row"},SS={class:"col-md-12 col-lg-12"},NS={class:"card"},CS=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),AS={class:"card-body"},ES={class:"row"},TS={class:"col-6 mb-4 mt-4"},PS={class:"widget-name"};var US={__name:"page-host-details-packets",props:{page_csrf:String,url_params:Object},setup(e){const t=[{title:i18n("graphs.packets_sent"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/packets/sent_data.lua`,id:"packets_sent"},{title:i18n("graphs.packets_rcvd"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/packets/rcvd_data.lua`,id:"packets_rcvd"},{title:i18n("graphs.tcp_flags"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/packets/tcp_flags_data.lua`,id:"tcp_flags"},{title:i18n("graphs.arp_distribution"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/packets/arp_data.lua`,id:"arp_requests"}];function l(e,t,l){a.hideOverlays()}return _n((()=>{})),(e,a)=>(Ps(),js("div",$S,[Vs("div",SS,[Vs("div",NS,[CS,Vs("div",AS,[Vs("div",ES,[(Ps(),js(Ss,null,En(t,(e=>Vs("div",TS,[Vs("h3",PS,te(e.title),1),Hs(C_,{id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!1,onChart_reloaded:l},null,8,["id","chart_type","base_url_request"])]))),64))])])])])]))},__file:"http_src/vue/page-host-details-packets.vue"};const IS={key:0,class:"alert alert-info",id:"empty-message"},OS=["width","height"],MS=[Vs("g",{class:"nodes",style:{stroke:"#000",strokeOpacity:"0.5"}},null,-1),Vs("g",{class:"links",style:{stroke:"#000",strokeOpacity:"0.3",fill:"none"}},null,-1)];var jS={__name:"sankey",props:{no_data_message:String,width:Number,height:Number,sankey_data:Object},emits:["node_click","update_width","update_height"],setup(e,{expose:t,emit:a}){const l=e,n=d3v7,s=va(!1),o=va(null),i=va({});function r(e){e&&($(".nodes",o.value).empty(),$(".links",o.value).empty()),null!=l.sankey_data.nodes&&null!=l.sankey_data.links&&0!=l.sankey_data.length&&0!=l.sankey_data.links.length&&d()}dn((async()=>{})),_n((async()=>{r(),window.addEventListener("resize",(()=>r(!0)))})),Ml((()=>l.sankey_data),((e,t)=>{r(!0)}));let c=null,u=null;async function d(){const e=n.scaleOrdinal(n.schemeCategory10);let t=l.sankey_data;const s=function(){a("update_width");let e=l.width;null==e&&(e=$(o.value).parent().parent().width()-10);a("update_height");let t=l.height;null==t&&(t=$(o.value).parent().parent().height()-80);return{width:e,height:t}}();var r,d;i.value=s,r=s.width-10,d=s.height-5,c=n.sankey().nodeAlign(n.sankeyCenter).nodeWidth(10).nodePadding(10).extent([[0,5],[r,d]]),u=c(t);const{links:v,nodes:m}=u;let h=n.select(o.value).select("g.nodes").selectAll("g").data(m).join((e=>e.append("g"))).attr("transform",(e=>`translate(${e.x0}, ${e.y0})`));n.zoom().scaleExtent([1,40]).on("zoom",f),h.append("rect").attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("dataIndex",(e=>e.index)).attr("fill",(t=>e(t.index/m.length))).attr("class","sankey-node").attr("style","cursor:move;"),n.selectAll("rect").append("title").text((e=>`${e?.label}`)),h.data(m).append("text").attr("class","label").style("pointer-events","auto").attr("style","cursor:pointer;").style("fill-opacity",(function(e){return 1})).attr("fill",(e=>"#000")).attr("x",(e=>e.x0<s.width/2?e.x1-e.x0+6:-6)).attr("y",(e=>(e.y1-e.y0)/2)).attr("alignment-baseline","middle").attr("text-anchor",(e=>e.x0<s.width/2?"start":"end")).attr("font-size",12).text((e=>e.label)).on("click",(function(e,t){a("node_click",t.data)})),h.call(n.drag().subject((e=>e)).on("start",_).on("drag",p));const g=n.select(o.value).select("g.links").selectAll("g").data(v).join((e=>e.append("g")));let b=g.append("linearGradient");b.attr("id",(e=>`gradient-${e.index}`)).attr("gradientUnits","userSpaceOnUse").attr("x1",(e=>e.source.x1)).attr("x2",(e=>e.target.x0)),b.append("stop").attr("offset","0").attr("stop-color",(t=>e(t.source.index/m.length))),b.append("stop").attr("offset","100%").attr("stop-color",(t=>e(t.target.index/m.length))),g.append("path").style("pointer-events","none").attr("class","sankey-link").attr("d",n.sankeyLinkHorizontal()).attr("stroke-width",(e=>Math.max(1,e.width))).attr("stroke",(e=>`url(#gradient-${e.index}`)),g.append("title").text((e=>`${e.label}`))}function _(e,t){t.__x=e.x,t.__y=e.y,t.__x0=t.x0,t.__y0=t.y0,t.__x1=t.x1,t.__y1=t.y1}function p(e,t){n.select(this).attr("transform",(function(t){const a=e.x-t.__x,l=e.y-t.__y,s=i.value.width,o=i.value.width;return t.x0=t.__x0+a,t.x1=t.__x1+a,t.y0=t.__y0+l,t.y1=t.__y1+l,t.x0<0&&(t.x0=0,t.x1=10),t.x1>s&&(t.x0=s-10,t.x1=s),t.y0<0&&(t.y0=0,t.y1=t.__y1-t.__y0),t.y1>o&&(t.y0=o-(t.__y1-t.__y0),t.y1=o),c.update(u),n.selectAll(".sankey-link").attr("d",n.sankeyLinkHorizontal()),`translate(${t.x0}, ${t.y0})`}))}function f({transform:e}){g.attr("transform",e)}const v=e=>i18n(e);return t({draw_sankey:d,set_no_data_flag:function(e){s.value=e}}),(t,a)=>(Ps(),js(Ss,null,[s.value?(Ps(),js("div",IS,te(e.no_data_message||v("flows_page.no_data")),1)):Ys("v-if",!0),Vs("div",null,[(Ps(),js("svg",{ref_key:"sankey_chart_ref",ref:o,width:i.value.width,height:i.value.height,style:{margin:"10px"}},MS,8,OS))])],64))}};lp("\n/* .node rect { */\n/*   fill-opacity: 0.9; */\n/*   shape-rendering: crispEdges; */\n/* } */\n\n/* .node text { */\n/*   pointer-events: none; */\n/*   text-shadow: 0 1px 0 #fff; */\n/* } */\n\n/* path.link.link2 { */\n/*     all: initial; */\n/*     fill: unset; */\n/*     stroke: unset; */\n/*     stroke-opacity: unset; */\n/*     stroke-width: unset; */\n/* } */\n\n/* .link:hover { */\n/*   stroke-opacity: 0.5; */\n/* } */\n"),jS.__file="http_src/vue/sankey.vue";const LS={class:"row"},FS={class:"col-md-12 col-lg-12"},RS={class:"card card-shadow"},DS={class:"card-body"},zS={class:"d-flex align-items-center mb-2"},qS={class:"d-flex no-wrap ms-auto"},BS={class:"m-1"},VS={style:{"min-width":"16rem"}},HS={class:"my-auto me-1"},GS=Vs("label",{class:"my-auto me-1"},null,-1),WS=[Vs("span",null,[Vs("i",{class:"fas fa-sync"})],-1)];var KS={__name:"page-host-details-flow-sankey",props:{is_local:Boolean},setup(e){const t=e,a=e=>i18n(e),l=`${http_prefix}/lua/pro/rest/v2/get/host/flows/data.lua`,n=va(null),s=va(!1),o=[{filter_name:"hosts_type",key:3,id:"local_origin_remote_target",title:a("flows_page.local_cli_remote_srv"),label:a("flows_page.local_cli_remote_srv"),filter_icon:!1,countable:!1},{filter_name:"hosts_type",key:4,id:"remote_origin_local_target",title:a("flows_page.local_srv_remote_cli"),label:a("flows_page.local_srv_remote_cli"),filter_icon:!1,countable:!1},{filter_name:"hosts_type",key:5,id:"all_hosts",title:a("flows_page.all_flows"),label:a("flows_page.all_flows"),filter_icon:!1,countable:!1}];t.is_local?o.unshift({filter_name:"hosts_type",key:1,id:"local_only",title:a("flows_page.local_only"),label:a("flows_page.local_only"),filter_icon:!1,countable:!1}):o.unshift({filter_name:"hosts_type",key:2,id:"remote_only",title:a("flows_page.remote_only"),label:a("flows_page.remote_only"),filter_icon:!1,countable:!1});const i=va(o[3]),r=va({});function c(e){if(1==e.is_link_node)return;let t={host:e.info.ip,vlan:e.info.vlan},a=x.obj_to_url_params(t);const l=`${http_prefix}/lua/host_details.lua?${a}`;x.go_to_url(l)}dn((()=>{})),_n((()=>{u()}));const u=function(){let e=i.value;x.set_key_to_url(e.filter_name,e.id),async function(){s.value=!0;let e=await async function(){const e=function(){let e={host:x.get_url_entry("host"),vlan:x.get_url_entry("vlan"),ifid:x.get_url_entry("ifid"),hosts_type:x.get_url_entry("hosts_type")},t=x.obj_to_url_params(e),a=`${l}?${t}`;return a}();let t=await b.http_request(e);t=function(e){let t=e=>console.error(`link (source: ${e.source_node_id}, target: ${e.target_node_id}) removed for not existing source/target node`),a=function(e,t){let a={};e.nodes.forEach((e=>a[e.node_id]=!0));let l=e=>null!=a[e.source_node_id]&&null!=a[e.target_node_id],n=function(e,t,a){return e.filter((e=>{const l=t(e);return 0==l&&null!=a&&a(e),l}))}(e.links,l,t);return n}(e,t);return{nodes:e.nodes,links:a}}(t);let a=x.get_url_entry("host"),s=function(e,t){if(0==e.nodes.length&&0==e.links.length)return e;let a={};e.nodes.forEach((e=>a[e.node_id]=e));const l=e=>{if(e.source_node_id==t)return-1;if(e.target_node_id==t)return 1;throw`Wrong direction link ${e.source_node_id} -> ${e.target_node_id}`},n=(e,a)=>e==t?e:`${a}_${e}`;let s={},o={nodes:[],links:[]};e.links.forEach((e=>{let t,i=l(e),r={source_node_id:n(e.source_node_id,i),target_node_id:n(e.target_node_id,i),label:e.label,value:e.value,data:e};if(-1==i){let l=a[e.target_node_id];t={node_id:r.target_node_id,label:l.label,data:l}}else{let l=a[e.source_node_id];t={node_id:r.source_node_id,label:l.label,data:l}}o.links.push(r),null==s[t.node_id]&&(s[t.node_id]=!0,o.nodes.push(t))}));let i=a[t];o.nodes.push({node_id:i.node_id,label:i.label,data:i}),o.nodes.forEach((e=>a[e.node_id]=e));const r=e=>`${l(e)}_${e.label}`;let c={};o.links.forEach((e=>{let t=r(e),l=c[t];null==l&&(l={id:t,label:e.label,data:{...e,is_link_node:!0},node_links:[]},c[t]=l),l.node_links.push({source:a[e.source_node_id],target:a[e.target_node_id],value:_(e)})}));let u=o.nodes.map((e=>e)),d=[];for(let e in c){let t=c[e],a={node_id:t.id,label:t.label,data:t.data};u.push(a),t.node_links.forEach((e=>{d.push({source_node_id:e.source.node_id,target_node_id:a.node_id,label:`${e.source.label} - ${e.target.label}: ${a.label}`,value:e.value,data:e}),d.push({source_node_id:a.node_id,target_node_id:e.target.node_id,label:`${e.source.label} - ${e.target.label}: ${a.label}`,value:e.value,data:e})}))}let p={},f=[];u.map(((e,t)=>{let a={index:t,node_id:e.node_id,label:e.label,data:e.data};p[e.node_id]=a,f.push(a)}));let v=d.map((e=>{let t=p[e.source_node_id],a=p[e.target_node_id];return{source:t.index,target:a.index,source_node_id:t.index,target_node_id:a.index,value:e.value,label:e.label}}));return{nodes:f,links:v}}(t,a);return s.links.length>0&&s.nodes.length>0?n.value.set_no_data_flag(!1):n.value.set_no_data_flag(!0),s}();r.value=e,s.value=!1}()},d=function(){u()};function _(e){return e.data?.info?.traffic}return(e,t)=>(Ps(),js("div",LS,[Vs("div",FS,[Vs("div",RS,[s.value?(Ps(),Ls(yf,{key:0})):Ys("v-if",!0),Vs("div",DS,[Vs("div",{class:K(["align-items-center justify-content-end mb-3",[s.value?"ntopng-gray-out":""]]),style:{height:"70vh"}},[Vs("div",zS,[Vs("div",qS,[Vs("div",BS,[Vs("div",VS,[Vs("label",HS,te(a("hosts"))+": ",1),Hs(l_,{selected_option:i.value,"onUpdate:selected_option":t[0]||(t[0]=e=>i.value=e),options:o,onSelect_option:u},null,8,["selected_option","options","onSelect_option"])])]),Vs("div",null,[GS,Vs("div",null,[Vs("button",{class:"btn btn-link m-1",tabindex:"0",type:"button",onClick:t[1]||(t[1]=(...e)=>d&&d(...e))},WS)])])])]),Hs(jS,{ref_key:"sankey_chart",ref:n,onNode_click:c,sankey_data:r.value},null,8,["onNode_click","sankey_data"])],2)])])])]))},__file:"http_src/vue/page-host-details-flow-sankey.vue"};const JS={isEmptyOrNull:e=>!(null!=e&&""!=e&&0!=e),isEmptyArrayOrNull:e=>!(null!=e&&0!==e.length)};function YS(e){if("number"==typeof e)return e;if("string"==typeof e){if(""==e)return 0;e=e.split(",").join(""),e=parseInt(e)}else e=0;return e}const ZS=function(e,t,a){return t==e&&1==a&&(t=99999999999),t},XS=function(e,t,a){return e=YS(e),t=YS(t),1==a?e-t:t-e},QS=function(e,t,a,l){return e=ZS(l,e,a),t=ZS(l,t,a),XS(e,t,a)},eN={sortByIP:function(e,t,a){return e=NtopUtils.convertIPAddress(e),t=NtopUtils.convertIPAddress(t),1==a?e.localeCompare(t):t.localeCompare(e)},sortByName:function(e,t,a){return 1==a?e?.localeCompare(t):t?.localeCompare(e)},sortByNumber:XS,sortByNumberWithNormalizationValue:QS},tN={key:0,class:"alert alert-info alert-dismissable"},aN=Vs("span",{class:"text-info me-1"},null,-1),lN={class:"form-group ms-2 me-2 mt-3 row"},nN={class:"col-form-label col-sm-2"},sN={class:"col-sm-10"},oN={class:"btn-group btn-group-toggle","data-bs-toggle":"buttons"},iN={key:1,class:"form-group ms-2 me-2 mt-3 row"},rN={class:"col-form-label col-sm-2"},cN={class:"col-sm-10"},uN=["placeholder"],dN={key:2,class:"form-group ms-2 me-2 mt-3 row"},_N={class:"col-form-label col-sm-2"},pN={class:"col-sm-10"},fN={key:3,class:"form-group ms-2 me-2 mt-3 row"},vN={class:"col-form-label col-sm-2"},mN={class:"col-sm-10"},hN={key:4,class:"form-group ms-2 me-2 mt-3 row"},gN={class:"col-form-label col-sm-2"},bN={class:"col-10"},yN={key:5,class:"form-group ms-2 me-2 mt-3 row"},wN={class:"col-form-label col-sm-2"},xN={class:"col-10"},kN={class:"col-form-label col-sm-2"},$N={class:"col-10"},SN={key:6,class:"form-group ms-2 me-2 mt-3 row"},NN={class:"col-form-label col-sm-2"},CN={class:"col-10"},AN={key:7,class:"form-group ms-2 me-2 mt-3 row"},EN={class:"col-form-label col-sm-2"},TN={key:0,class:"col-10"},PN={key:1,class:"col-10"},UN={key:2,class:"col-10"},IN={key:3,class:"col-10"},ON={key:4,class:"col-10"},MN={key:5,class:"col-10"},jN={key:8,class:"form-group ms-2 me-2 mt-3 row"},LN={class:"col-form-label col-sm-2"},FN={class:"col-10"},RN={class:"form-group ms-2 me-2 mt-3 row",style:{"margin-top":"3px"}},DN={class:"col-form-label col-sm-2"},zN={class:"col-sm-3"},qN={class:"btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},BN=["value","id"],VN=["id","for"],HN=["value","id"],GN=["id","for"],WN=["value","id"],KN=["id","for"],JN={class:"col-sm-2 btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},YN=["value","id"],ZN=["id","for"],XN={key:9,class:"message alert alert-warning mt-3"},QN=["disabled"],eC=["disabled"];var tC={__name:"modal-add-host-rules",props:{metric_list:Array,ifid_list:Array,flow_exporter_devices:Array,interface_metric_list:Array,flow_device_metric_list:Array,frequency_list:Array,has_vlans:Boolean,init_func:Function,page_csrf:String},emits:["add","edit"],setup(e,{expose:t,emit:l}){const n=e;va(""),va("");let s=va(!1),o=va(!1);const i=va(null);let r=i18n("if_stats_config.add_host_rules_title");const c=i18n("if_stats_config.host_placeholder"),u=va(!1),d=e=>i18n(e),_=va([]),p=va(null),f=va(null),v=va([]),m=va([]),h=va([]),g=va([]),b=va([]),y=va([]),w=va([]),x=va(null),k=va(null),S=va({}),N=va({}),C=va({}),A=va({}),E=va({}),T=va({}),P=va({}),U=va({}),I=va(!0),O=va({}),M=va(!0),j=va("hosts"),L=va(!1),F=va(!1),R=va(null),D=va(null),z=va(!1),q=va(null),B=va(null),V=va({}),H=va({}),G=va({}),W=va(null),J=va([]),Y=va({}),Z=va(null),X=va({});let Q=va([]);const ee=[d("if_stats_config.note_1"),d("if_stats_config.note_2"),d("if_stats_config.note_3"),d("if_stats_config.note_4")],ae=[d("if_stats_config.note_5")],le=va([{title:d("volume"),label:d("volume"),id:"volume",active:!0},{title:d("throughput"),label:d("throughput"),id:"throughput",active:!1},{title:d("percentage"),label:d("percentage"),id:"percentage",active:!1}]),ne=va([{title:d("volume"),label:d("volume"),id:"volume",active:!0},{title:d("throughput"),label:d("throughput"),id:"throughput",active:!1},{title:d("percentage"),label:d("percentage"),id:"percentage",active:!1}]),se=va([{title:d("volume"),label:d("volume"),id:"volume",active:!0,measure_unit:"bps"},{title:d("throughput"),label:d("throughput"),id:"throughput",active:!1,measure_unit:"bps"},{title:d("percentage"),label:d("percentage"),id:"percentage",active:!1,measure_unit:"number"},{title:d("value"),label:d("value"),id:"value",active:!1,measure_unit:"number"}]),oe=va([{title:d("percentage"),label:d("percentage"),id:"absolute_percentage",active:!1,measure_unit:"number"}]),ie=va([{title:d("kb"),label:d("kb"),id:"kb",value:1024,active:!1},{title:d("mb"),label:d("mb"),id:"mb",value:1048576,active:!1},{title:d("gb"),label:d("gb"),id:"gb",value:1073741824,active:!0,default_active:!0}]),re=va([{title:d("kbps"),label:d("kbps"),id:"kbps",value:1e3,active:!1},{title:d("mbps"),label:d("mbps"),id:"mbps",value:1e6,active:!1},{title:d("gbps"),label:d("gbps"),id:"gbps",value:1e9,active:!0,default_active:!0}]),ce=va([{title:"+",label:">",id:"plus",value:1,active:!1},{title:"-",label:"<",id:"minus",value:-1,active:!0,default_active:!0}]),ue=[{title:"+",label:"%",id:"plus",value:1,active:!0}],de=va(null),_e=va(null);function pe(e){e.forEach((e=>e.active=1==e.default_active))}n.page_csrf;const fe=e=>{j.value=e,Q.value=le.value,"host_pool"==e||"CIDR"==e?(me(),O.value="host_pool"==e?Q.value[1]:Q.value[0]):O.value=le.value[0]},ve=()=>{let e=[];"flowdev_port:usage"==U.value.id?(oe.value.forEach((t=>{"number"==t.measure_unit&&e.push(t)})),Q.value=e):(ne.value.forEach((t=>{"value"!=t.id&&e.push(t)})),Q.value=e),O.value=Q.value[0]},me=e=>{let t=[];"host_pool"==j.value&&"bps"!=P.value.measure_unit||"CIDR"==j.value&&"bps"!=G.value.measure_unit?(se.value.forEach((e=>{"number"==e.measure_unit&&t.push(e)})),Q.value=t):(se.value.forEach((e=>{"value"!=e.id&&t.push(e)})),Q.value=t),null!=e&&0!=e||(O.value=Q.value[0])},he=()=>{1==X.value.show_volume?M.value=!0:M.value=!1},ge=()=>{let e=new RegExp(yp.get_data_pattern("ip"));I.value=!(e.test(de.value)||"*"===de.value)},be=e=>{const t=e.target.id;ce.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1}))},ye=e=>{const t=e.target.id;"throughput"==O.value.id?re.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):"volume"==O.value.id?ie.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):"percentage"==O.value.id&&ue.forEach((e=>{e.id===t?e.active=!0:e.active=!1}))},we=e=>{let t="";"interface"!=j.value&&(t=de.value);const a=N.value.id;let n=S.value.id,s=S.value.label;const o=j.value;let i,r,c,u,d,_=O.value.id,p=e?D.value:null;!1===M.value&&(_="",i="",u=_e.value.value),"throughput"==_?(ce.value.forEach((e=>{e.active&&(c=e.value)})),d=parseInt(c),re.value.forEach((e=>{e.active&&(r=e.value)})),u=r*parseInt(_e.value.value)):"volume"==_?(ce.value.forEach((e=>{e.active&&(c=e.value)})),d=parseInt(c),ie.value.forEach((e=>{e.active&&(r=e.value)})),u=r*parseInt(_e.value.value)):"percentage"==_?(ce.value.forEach((e=>{e.active&&(c=e.value)})),d=parseInt(c),u=parseInt(_e.value.value)):"value"!=_&&"absolute_percentage"!=_||(ce.value.forEach((e=>{e.active&&(c=e.value)})),d=parseInt(c),u=d*parseInt(_e.value.value));let f="add";if(1==e&&(f="edit"),"Host"==j.value)i=S.value.extra_metric?S.value.extra_metric:null,l(f,{host:t,frequency:a,metric:n,metric_label:s,threshold:u,metric_type:_,extra_metric:i,rule_type:o,rule_threshold_sign:d,rule_id:p});else if("interface"==j.value){i=T.value.extra_metric?T.value.extra_metric:null,n=T.value.id,s=T.value.label;const e=T.value.id,t=C.value.id;l(f,{frequency:a,metric:e,metric_label:s,threshold:u,metric_type:_,extra_metric:i,rule_type:o,interface:t,rule_threshold_sign:d,rule_id:p})}else if("exporter"==j.value){let e=E.value.id;E.value.label;const t=A.value.id;"*"==t&&(e="*");const n=A.value.ifid;let s;U.value.id?s=y.value.find((e=>e.id==U.value.id)):(s=y.value.find((e=>null===e.id)),null!=e&&"*"!=e?(s=U.value,s.id="flowdev_port:traffic"):(s=U.value,s.id="flowdev:traffic"));let i=s.label;l(f,{host:t,frequency:a,metric:s.id,metric_label:i,threshold:u,metric_type:_,rule_type:o,interface:e,rule_ifid:n,rule_threshold_sign:d,rule_id:p})}else if("CIDR"==j.value){n=G.value.schema,s=G.value.label,t=H.value.id;const e=H.value.network_id;l(f,{host:t,frequency:a,metric:n,metric_label:s,threshold:u,metric_type:_,extra_metric:i,rule_type:o,rule_threshold_sign:d,rule_id:p,network:e})}else if("host_pool"==j.value){n=P.value.schema,s=P.value.label;const e=V.value.id,t=V.value.label;l(f,{host_pool_id:e,host_pool_label:t,frequency:a,metric:n,metric_label:s,threshold:u,metric_type:_,extra_metric:i,rule_type:o,rule_threshold_sign:d,rule_id:p})}else if("vlan"==j.value){n=X.value.schema,s=X.value.label;const e=Y.value.id,t=Y.value.label;l(f,{vlan_id:e,vlan_label:t,frequency:a,metric:n,metric_label:s,threshold:u,metric_type:_,extra_metric:i,rule_type:o,rule_threshold_sign:d,rule_id:p})}},xe=()=>{we(!0)};async function ke(){let e=[];if("*"==A.value.id)return;const t=a.buildURL(`${http_prefix}/lua/pro/rest/v2/get/flowdevice/stats.lua?ip=${A.value.id}&ifid=${A.value.ifid}`);await $.get(t,(function(t,a){e=t.rsp}));const l=[{id:"*",value:"*",label:"*",timeseries_available:e[0]?.timeseries_available}];e.forEach((e=>{l.push({id:e.id,label:e.name,timeseries_available:e.timeseries_available})})),h.value=l,E.value=h.value[1],L.value=h.value[0]?.timeseries_available}const $e=function(e){const t=[{id:"*",value:"*",label:"*"}];return e.forEach((e=>{const a=e.probe_ip;t.push({id:a,label:a,value:a,ifid:e.ifid})})),t.sort(((e,t)=>eN.sortByIP(e.label,t.label,1))),t},Se=function(e){const t=[];return e.forEach((e=>{if(0!=e.key){let a=e.key,l=e.column_vlan.split(">");l[1].split("[").length>1&&(a=l[1].split("<")[0]),t.push({id:e.key,label:a,value:e.key})}})),t.sort(((e,t)=>eN.sortByName(e.label,t.label,1))),t},Ne=function(){ke()};return dn((()=>{le.value.forEach((e=>{e.active&&(O.value=e)})),z.value=!1})),t({show:e=>{null!=e?(e=>{null!=e&&(r=d("if_stats_config.edit_host_rules_title"),F.value=!0,D.value=e.row_id,I.value=!1,ce.value.forEach((t=>{t.active=t.value==e.threshold_sign})),le.value.forEach((t=>{t.id==e.metric_type?(t.active=!0,O.value=t):t.active=!1})),Q.value=le.value,"volume"==e.metric_type?ie.value.forEach((t=>{if(e.threshold%t.value==0){let a=e.threshold/t.value;a<1024?(t.active=!0,_e.value.value=0==a?1:a):t.active=!1}else t.active=!1})):"throughput"==e.metric_type?re.value.forEach((t=>{if(e.threshold%t.value==0){let a=e.threshold/t.value;a<1e3?(t.active=!0,_e.value.value=0==a?1:a):t.active=!1}else t.active=!1})):"percentage"==e.metric_type?_e.value.value=e.threshold:"value"!=e.metric_type&&"absolute_percentage"!=e.metric_type||(_e.value.value=e.threshold*e.threshold_sign),j.value=e.rule_type,"interface"==j.value?(v.value.forEach((t=>{t.id==e.target&&(C.value=t)})),null!=e.extra_metric?g.value.forEach((t=>{t.id==e.metric&&t.extra_metric==e.extra_metric&&(T.value=t)})):g.value.forEach((t=>{t.id==e.metric&&(T.value=t)}))):"exporter"==j.value?(m.value.forEach((t=>{t.id==e.target&&(A.value=t)})),h.value.forEach((t=>{t.id==e.flow_exp_ifid&&(E.value=t)}))):"Host"==j.value?(de.value=e.target,null!=e.extra_metric?_.value.forEach((t=>{e.metric.contains(t.id)&&t.extra_metric==e.extra_metric&&(S.value=t)})):_.value.forEach((t=>{t.id==e.metric&&(S.value=t)}))):"CIDR"==j.value?(B.value.forEach((t=>{t.id==e.target&&(H.value=t)})),W.value.forEach((t=>{t.label==e.metric_label&&(G.value=t)})),me(!0),Q.value.forEach((t=>{t.id==e.metric_type&&(O.value=t)}))):"host_pool"==j.value?(q.value.forEach((t=>{t.id==e.target&&(V.value=t)})),b.value.forEach((t=>{t.label==e.metric_label&&(P.value=t)})),me(),Q.value.forEach((t=>{t.id==e.metric_type&&(O.value=t)}))):"vlan"==j.value&&(Y.value=J.value.find((t=>t.id==e.target)),Z.value.forEach((t=>{t.schema==e.metric&&(X.value=t)}))))})(e):async function(){z.value=!1,de.value="",j.value="Host",C.value=v.value[0],S.value=_.value[0],T.value=g.value[0],U.value=y.value[0],F.value=!1,r=i18n("if_stats_config.add_host_rules_title"),N.value=w.value[0],O.value=le.value[0],A.value=m.value[1],null!=A.value&&ke(),le.value.forEach((e=>e.active=!1)),le.value[0].active=!0,null!=q.value&&(V.value=q.value[0]),P.value=b.value[0],null!=B.value&&(H.value=B.value[0]),null!=W.value&&(G.value=W.value[0]),pe(ie.value),pe(re.value),pe(ce.value),j.value="Host",I.value=!0,_e.value.value=1,D.value=null,Q.value=le.value,"Host"==j||"interface"==j?O.vale=le.value[0]:O.value=Q.value[0],has_vlans&&(Y.value=J.value[0],X.value=Z.value[0])}(),i.value.show()},close:()=>{F.value=!1,z.value=!1,i.value.close()},metricsLoaded:async(e,t,a,l,i,r,c,d,h,x,k,$,E,T)=>{u.value=!0,_.value=e,g.value=a,v.value=function(e){let t=[];return e.forEach((e=>{let a={id:e.ifid,label:e.name};t.push(a)})),t.sort(((e,t)=>function(e,t){let a=e.label.toLowerCase(),l=t.label.toLowerCase();return a<l?-1:a>l?1:0}(e,t))),t}(t),w.value=n.frequency_list,N.value=w.value[0],S.value=_.value[0],C.value=v.value[0],R.value=r,c&&(p.value=c),d&&(f.value=d),m.value=$e(l),JS.isEmptyArrayOrNull(h)||(s.value=!0),q.value=h,b.value=k,JS.isEmptyArrayOrNull(x)||(o.value=!0),B.value=x,W.value=$,y.value=i,A.value=m.value[1],null!=A.value&&ke(),n.has_vlans&&(J.value=Se(E),Y.value=J.value[0],Z.value=T,X.value=Z.value[1])},invalidAdd:()=>{z.value=!0}}),(e,t)=>(Ps(),Ls(np,{onShowed:t[25]||(t[25]=e=>{}),ref_key:"modal_id",ref:i},{title:ml((()=>[Ks(te(ya(r)),1)])),body:ml((()=>[z.value?(Ps(),js("div",tN,[aN,Vs("span",null,te(d("rule_already_present")),1)])):Ys("v-if",!0),Ys(" Target information, here an IP is put "),Vs("div",lN,[Vs("label",nN,[Vs("b",null,te(d("if_stats_config.add_rules_type")),1)]),Vs("div",sN,[Vs("div",oN,[Vs("label",{class:K(["btn",["Host"==j.value?"btn-primary active":"btn-secondary"]])},[Vs("input",{class:"btn-check",type:"radio",name:"rule_type",value:"hosts",onClick:t[0]||(t[0]=e=>fe("Host"))}),Ks(" "+te(d("if_stats_config.add_rules_type_host")),1)],2),Vs("label",{class:K(["btn",["interface"==j.value?"btn-primary active":"btn-secondary"]])},[Vs("input",{onClick:t[1]||(t[1]=e=>fe("interface")),class:"btn-check",type:"radio",name:"rule_type",value:"interface"}),Ks(" "+te(d("if_stats_config.add_rules_type_interface")),1)],2),1==L.value?(Ps(),js("label",{key:0,class:K(["btn",["exporter"==j.value?"btn-primary active":"btn-secondary"]])},[Vs("input",{onClick:t[2]||(t[2]=e=>fe("exporter")),class:"btn-check",type:"radio",name:"rule_type",value:"exporter"}),Ks(" "+te(d("if_stats_config.add_rules_type_flow_exporter")),1)],2)):Ys("v-if",!0),1==ya(s)?(Ps(),js("label",{key:1,class:K(["btn",["host_pool"==j.value?"btn-primary active":"btn-secondary"]])},[Vs("input",{onClick:t[3]||(t[3]=e=>fe("host_pool")),class:"btn-check",type:"radio",name:"rule_type",value:"host_pool"}),Ks(" "+te(d("if_stats_config.add_rules_type_host_pool")),1)],2)):Ys("v-if",!0),1==ya(o)?(Ps(),js("label",{key:2,class:K(["btn",["CIDR"==j.value?"btn-primary active":"btn-secondary"]])},[Vs("input",{onClick:t[4]||(t[4]=e=>fe("CIDR")),class:"btn-check",type:"radio",name:"rule_type",value:"CIDR"}),Ks(" "+te(d("if_stats_config.add_rules_type_cidr")),1)],2)):Ys("v-if",!0),1==n.has_vlans?(Ps(),js("label",{key:3,class:K(["btn",["vlan"==j.value?"btn-primary active":"btn-secondary"]])},[Vs("input",{onClick:t[5]||(t[5]=e=>fe("vlan")),class:"btn-check",type:"radio",name:"rule_type",value:"vlan"}),Ks(" "+te(d("if_stats_config.add_rules_type_vlans")),1)],2)):Ys("v-if",!0)])])]),"Host"==j.value?(Ps(),js("div",iN,[Vs("label",rN,[Vs("b",null,te(d("if_stats_config.target")),1)]),Vs("div",cN,[wn(Vs("input",{"onUpdate:modelValue":t[6]||(t[6]=e=>de.value=e),onInput:ge,class:"form-control",type:"text",placeholder:ya(c),required:""},null,40,uN),[[Mi,de.value]])])])):Ys("v-if",!0),"CIDR"==j.value?(Ps(),js("div",dN,[Vs("label",_N,[Vs("b",null,te(d("if_stats_config.target")),1)]),Vs("div",pN,[Hs(l_,{selected_option:H.value,"onUpdate:selected_option":t[7]||(t[7]=e=>H.value=e),options:B.value},null,8,["selected_option","options"])])])):Ys("v-if",!0),"host_pool"==j.value?(Ps(),js("div",fN,[Vs("label",vN,[Vs("b",null,te(d("if_stats_config.target")),1)]),Vs("div",mN,[Hs(l_,{selected_option:V.value,"onUpdate:selected_option":t[8]||(t[8]=e=>V.value=e),options:q.value},null,8,["selected_option","options"])])])):Ys("v-if",!0),"interface"==j.value?(Ps(),js("div",hN,[Vs("label",gN,[Vs("b",null,te(d("if_stats_config.target_interface")),1)]),Vs("div",bN,[Hs(l_,{selected_option:C.value,"onUpdate:selected_option":t[9]||(t[9]=e=>C.value=e),options:v.value},null,8,["selected_option","options"])])])):Ys("v-if",!0),"exporter"==j.value&&1==L.value?(Ps(),js("div",yN,[Vs("label",wN,[Vs("b",null,te(d("if_stats_config.target_exporter_device")),1)]),Vs("div",xN,[Hs(l_,{selected_option:A.value,"onUpdate:selected_option":t[10]||(t[10]=e=>A.value=e),options:m.value,onSelect_option:Ne},null,8,["selected_option","options"])]),"*"!=A.value.id?(Ps(),js(Ss,{key:0},[Vs("label",kN,[Vs("b",null,te(d("if_stats_config.target_exporter_device_ifid")),1)]),Vs("div",$N,[Hs(l_,{selected_option:E.value,"onUpdate:selected_option":t[11]||(t[11]=e=>E.value=e),options:h.value},null,8,["selected_option","options"])])],64)):Ys("v-if",!0)])):Ys("v-if",!0),"vlan"==j.value?(Ps(),js("div",SN,[Vs("label",NN,[Vs("b",null,te(d("if_stats_config.target_vlan")),1)]),Vs("div",CN,[Hs(l_,{selected_option:Y.value,"onUpdate:selected_option":t[12]||(t[12]=e=>Y.value=e),options:J.value},null,8,["selected_option","options"])])])):Ys("v-if",!0),Ys(" Metric information, here a metric is selected (e.g. DNS traffic) "),u.value?(Ps(),js("div",AN,[Vs("label",EN,[Vs("b",null,te(d("if_stats_config.metric")),1)]),"Host"==j.value?(Ps(),js("div",TN,[Hs(l_,{selected_option:S.value,"onUpdate:selected_option":t[13]||(t[13]=e=>S.value=e),onSelect_option:t[14]||(t[14]=e=>{1==S.value.show_volume?M.value=!0:M.value=!1}),options:_.value},null,8,["selected_option","options"])])):"interface"==j.value?(Ps(),js("div",PN,[Hs(l_,{selected_option:T.value,"onUpdate:selected_option":t[15]||(t[15]=e=>T.value=e),onSelect_option:t[16]||(t[16]=e=>{1==T.value.show_volume?M.value=!0:M.value=!1}),options:g.value},null,8,["selected_option","options"])])):"exporter"==j.value?(Ps(),js("div",UN,[Hs(l_,{selected_option:U.value,"onUpdate:selected_option":t[17]||(t[17]=e=>U.value=e),onSelect_option:ve,options:y.value},null,8,["selected_option","options"])])):"host_pool"==j.value?(Ps(),js("div",IN,[Hs(l_,{selected_option:P.value,"onUpdate:selected_option":t[18]||(t[18]=e=>P.value=e),onSelect_option:t[19]||(t[19]=e=>me()),options:b.value},null,8,["selected_option","options"])])):"CIDR"==j.value?(Ps(),js("div",ON,[Hs(l_,{selected_option:G.value,"onUpdate:selected_option":t[20]||(t[20]=e=>G.value=e),onSelect_option:t[21]||(t[21]=e=>me()),options:W.value},null,8,["selected_option","options"])])):"vlan"==j.value?(Ps(),js("div",MN,[Hs(l_,{selected_option:X.value,"onUpdate:selected_option":t[22]||(t[22]=e=>X.value=e),options:Z.value,onSelect_option:he},null,8,["selected_option","options"])])):Ys("v-if",!0)])):Ys("v-if",!0),Ys(" Frequency information, a frequency of 1 day, 5 minute or 1 hour for example "),u.value?(Ps(),js("div",jN,[Vs("label",LN,[Vs("b",null,te(d("if_stats_config.frequency")),1)]),Vs("div",FN,[Hs(l_,{selected_option:N.value,"onUpdate:selected_option":t[23]||(t[23]=e=>N.value=e),options:w.value},null,8,["selected_option","options"])])])):Ys("v-if",!0),Ys(" Threshold information, maximum amount of bytes "),Vs("div",RN,[Vs("label",DN,[Vs("b",null,te(d("if_stats_config.threshold")),1)]),M.value?(Ps(),js(Ss,{key:0},[Vs("div",zN,[Hs(l_,{selected_option:O.value,"onUpdate:selected_option":t[24]||(t[24]=e=>O.value=e),options:ya(Q)},null,8,["selected_option","options"])]),Vs("div",{class:K(["col-3",["throughput"==O.value.id?"p-0":""]])},[Vs("div",qN,["throughput"==O.value.id?(Ps(!0),js(Ss,{key:0},En(re.value,(e=>(Ps(),js(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:x,name:"threshold_measure"},null,8,BN),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:ye,for:e.id},te(e.label),11,VN)],64)))),256)):Ys("v-if",!0),"percentage"==O.value.id?(Ps(),js(Ss,{key:1},En(ue,(e=>(Ps(),js(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:x,name:"threshold_measure"},null,8,HN),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:ye,for:e.id},te(e.label),11,GN)],64)))),64)):Ys("v-if",!0),"volume"==O.value.id?(Ps(!0),js(Ss,{key:2},En(ie.value,(e=>(Ps(),js(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:x,name:"threshold_measure"},null,8,WN),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:ye,for:e.id},te(e.label),11,KN)],64)))),256)):Ys("v-if",!0)])],2),Vs("div",JN,[(Ps(!0),js(Ss,null,En(ce.value,(e=>(Ps(),js(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_sign",ref:k,name:"threshold_sign"},null,8,YN),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:be,for:e.id},te(e.label),11,ZN)],64)))),256))])],64)):Ys("v-if",!0),Vs("div",{class:K([M.value?"col-sm-2":"col-sm-8"])},["percentage"==O.value.id?(Ps(),js("input",{key:0,value:"1",ref_key:"threshold",ref:_e,type:"number",name:"threshold",class:"form-control",max:"100",min:"1",required:""},null,512)):(Ps(),js("input",{key:1,value:"1",ref_key:"threshold",ref:_e,type:"number",name:"threshold",class:"form-control",max:"1023",min:"1",required:""},null,512))],2)]),"percentage"==O.value.id?(Ps(),js("div",XN,te(d("show_alerts.host_rules_percentage")),1)):Ys("v-if",!0)])),footer:ml((()=>[Hs(pv,{note_list:ee,add_sub_notes:!0,sub_note_list:ae}),0==F.value?(Ps(),js("button",{key:0,type:"button",onClick:we,class:"btn btn-primary",disabled:I.value&&"Host"==j.value},te(d("add")),9,QN)):(Ps(),js("button",{key:1,type:"button",onClick:xe,class:"btn btn-primary",disabled:I.value&&"Host"==j.value},te(d("apply")),9,eC))])),_:1},512))},__file:"http_src/vue/modal-add-host-rules.vue"};const aC={class:"row"},lC={class:"col-md-12 col-lg-12"},nC={class:"card"},sC=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),oC={class:"card-body"},iC={class:"mb-4"},rC={id:"host_rules"},cC={class:"card-footer"};var uC={__name:"page-host-rules",props:{page_csrf:String,has_vlans:Boolean,ifid:String},setup(e){const t=e,l=va(null),n=va(null),s=va(null),o=e=>i18n(e),i=va({}),r=va({}),c=va(!1),u=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=host`,d=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=interface`,_=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=host_pool`,p=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=CIDR`,f=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=vlan`,v=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=exporter`,m=`${http_prefix}/lua/pro/rest/v2/get/flowdevices/stats.lua`;http_prefix;const h=`${http_prefix}/lua/rest/v2/get/host/pool/pools.lua`,g=`${http_prefix}/lua/rest/v2/get/network/networks.lua`,b=`${http_prefix}/lua/rest/v2/get/ntopng/interfaces.lua`,y=`${http_prefix}/lua/get_vlans_data.lua`,w=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_data.lua`,x=`${http_prefix}/lua/pro/rest/v2/add/interface/host_rules/add_host_rule.lua`,k=`${http_prefix}/lua/pro/rest/v2/delete/interface/host_rules/delete_host_rule.lua`,S=[o("if_stats_config.generic_notes_1"),o("if_stats_config.generic_notes_2"),o("if_stats_config.generic_notes_3")],N={ifid:t.ifid,csrf:t.page_csrf,gui:!0};let C={},A=o("if_stats_config.delete_host_rules_title");o("if_stats_config.edit_local_network_rules");let E=o("if_stats_config.delete_host_rules_description"),T=[],P=[],U=[],I=[],O=[],M=[],j=[],L=[],F=[],R=[],D=[];const z=[{title:i18n("show_alerts.5_min"),label:i18n("show_alerts.5_min"),id:"5min",value:"5min"},{title:i18n("show_alerts.hourly"),label:i18n("show_alerts.hourly"),id:"hour",value:"hour"},{title:i18n("show_alerts.daily"),label:i18n("show_alerts.daily"),id:"day",value:"day"}];async function q(e){await G(e)}const B=function(){const e=r.value;return r.value=null,e},V=function(){l.value.reload()},H=async function(){const e=i.value,t=a.buildURL(k,{...N,rule_id:e.id,rule_type:e.rule_type});await $.post(t,(function(e,t){V()}))},G=async function(e){e.csrf=t.page_csrf,e.ifid=t.ifid;const a=await ntopng_utility.http_post_request(x,e);c.value=a.rsp,0==c.value?(s.value.close(),V()):s.value.invalidAdd()},W=function(e){let t={handlerId:"delete_host",onClick:()=>{var t;t=e,i.value=t,n.value.show()}},a={handlerId:"edit_rule",onClick:()=>{var t;t=e,r.value=t,i.value=t,s.value.show(t)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:a,icon:"fa-edit",title:i18n("edit")},{class:"pointer",handler:t,icon:"fa-trash",title:i18n("delete")}])},K=function(){const e=[];e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(){V()}},{text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){s.value.show()}});const t=[{columnName:o("actions"),width:"5%",targets:0,name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return W(a)}},{columnName:o("id"),visible:!1,targets:1,name:"id",data:"id",className:"text-nowrap",responsivePriority:1},{columnName:o("if_stats_config.target"),targets:2,width:"20",name:"target",data:"target",className:"text-nowrap",responsivePriority:1,render:function(e,t,a){return function(e,t){let a="";if(t.rule_type&&"interface"==t.rule_type)a=t.selected_iface;else if(!t.rule_type||"Host"!=t.rule_type&&"CIDR"!=t.rule_type)if("host_pool"==t.rule_type)a=t.host_pool_label;else if("vlan"==t.rule_type)a=t.vlan_label;else if(t.rule_type&&"exporter"==t.rule_type&&"flowdev:traffic"==t.metric)a=t.target;else{let e=""!=t.flow_exp_ifid_name&&null!=t.flow_exp_ifid_name?t.flow_exp_ifid_name:t.flow_exp_ifid;a=t.target+" "+o("on_interface")+": "+e}else a=t.target;return a}(0,a)}},{columnName:o("if_stats_config.rule_type"),targets:3,width:"20",name:"rule_type",data:"rule_type",className:"text-center",responsivePriority:1,render:function(e,t,a){return function(e,t){let a="";return t.rule_type&&"interface"==t.rule_type?a="<span class='badge bg-secondary'>"+o("interface")+" <i class='fas fa-ethernet'></i></span>":t.rule_type&&"Host"==t.rule_type?a="<span class='badge bg-secondary'>"+o("about.host_checks_directory")+" <i class='fas fa-laptop'></i></span>":t.rule_type&&"host_pool"==t.rule_type?a="<span class='badge bg-secondary'>"+o("alert_entities.host_pool")+" <i class='fas fa-laptop'></i></span>":t.rule_type&&"CIDR"==t.rule_type?a="<span class='badge bg-secondary'>"+o("network")+" <i class='fas fa-laptop'></i></span>":t.rule_type&&"exporter"==t.rule_type&&"flowdev:traffic"==t.metric?a="<span class='badge bg-secondary'>"+o("flow_exporter_device")+" <i class='fas fa-laptop'></i></span>":t.rule_type&&"exporter"==t.rule_type&&t.metric.includes("flowdev_port")?a="<span class='badge bg-secondary'>"+o("interface_flow_exporter_device")+" <i class='fas fa-ethernet'></i></span>":t.rule_type&&"vlan"==t.rule_type&&(a="<span class='badge bg-secondary'>"+o("vlan")+" <i class='fas fa-ethernet'></i></span>"),a}(0,a)}},{columnName:o("if_stats_config.metric"),targets:4,width:"10",name:"metric",data:"metric",className:"text-center",responsivePriority:1,render:function(e,t,a){return function(e,t){let a=e;return t.metric_label?a=t.metric_label:"interface"!=t.rule_type?T.forEach((l=>{l.id==e&&(t.extra_metric?t.extra_metric==l.extra_metric&&(a=l.label):a=l.label)})):P.forEach((l=>{l.id==e&&(t.extra_metric?t.extra_metric==l.extra_metric&&(a=l.label):a=l.label)})),a}(e,a)}},{columnName:o("if_stats_config.frequency"),targets:5,width:"10",name:"frequency",data:"frequency",className:"text-center",responsivePriority:1,render:function(e){return function(e){let t="";return z.forEach((a=>{e==a.id&&(t=a.title)})),t}(e)}},{columnName:o("if_stats_config.last_measurement"),targets:6,width:"10",name:"last_measurement",data:"last_measurement",className:"text-center",responsivePriority:1,render:function(e,t,l){return function(e,t){let l=parseInt(e);if("*"==t.target)return"";if(null==e)return"";if(t.metric_type&&"throughput"==t.metric_type)l=a.bitsToSize(e);else if(t.metric_type&&"volume"==t.metric_type)l=a.bytesToSize(e);else if(t.metric_type&&t.metric_type.includes("percentage")){const t=e<0?-1:1,n=a.fpercent(e*t);l=-1==t?`<label title='${i18n("percentage_decrease")}'> (-) ${n} </label>`:`<label title='${i18n("percentage_increase")}'>${n}</label>`}return l}(e,l)}},{columnName:o("if_stats_config.threshold"),targets:7,width:"10",name:"threshold",data:"threshold",className:"text-end",responsivePriority:1,render:function(e,t,l){return function(e,t){let l=parseInt(e),n="> ";return t.threshold_sign&&"-1"==t.threshold_sign&&(n="< "),t.metric_type&&"throughput"==t.metric_type?l=n+a.bitsToSize(e):t.metric_type&&"volume"==t.metric_type?l=n+a.bytesToSize(e):t.metric_type&&t.metric_type.contains("percentage")?(e<0&&(e*=-1),l=n+a.fpercent(e)):t.metric_type&&"value"==t.metric_type&&(e<0&&(e*=-1),l=n+e),l}(e,l)}},{columnName:o("metric_type"),visible:!1,targets:8,name:"metric_type",data:"metric_type",className:"text-nowrap",responsivePriority:1}],l={table_buttons:e,data_url:a.buildURL(w,N),enable_search:!0,columns_config:t,table_config:{scrollX:!1,serverSide:!1,order:[[1,"desc"]],columnDefs:t}};C=l};return dn((async()=>{K(),await async function(){const e=a.buildURL(u,N);await $.get(e,(function(e,t){T=e.rsp}))}(),await async function(){const e=a.buildURL(b,N);await $.get(e,(function(e,t){I=e.rsp}))}(),await async function(){const e=a.buildURL(d,N);await $.get(e,(function(e,t){P=e.rsp}))}(),await async function(){const e=a.buildURL(v,{...N});await $.get(e,(function(e,t){M=e.rsp}))}(),await async function(){const e=a.buildURL(m,{...N});await $.get(e,(function(e,t){O=e.rsp}))}(),await async function(){const e=a.buildURL(h,N);let t;await $.get(e,(function(e,a){t=e.rsp})),t.sort(((e,t)=>e.label>t.label?1:t.label>e.label?-1:0)),j=t}(),await async function(){const e=a.buildURL(_,N);let t;await $.get(e,(function(e,a){t=e.rsp})),t.sort(((e,t)=>e.label>t.label?1:t.label>e.label?-1:0)),U=t}(),await async function(){const e=a.buildURL(g,N);let t;await $.get(e,(function(e,a){t=e.rsp})),t.sort(((e,t)=>e.label>t.label?1:t.label>e.label?-1:0)),L=t}(),await async function(){const e=a.buildURL(p,N);let t;await $.get(e,(function(e,a){t=e.rsp})),t.sort(((e,t)=>e.label>t.label?1:t.label>e.label?-1:0)),F=t}(),t.has_vlans&&(await async function(){const e=a.buildURL(y,N);await $.get(e,(function(e,t){R=JSON.parse(e).data}))}(),await async function(){const e=a.buildURL(f,N);let t;await $.get(e,(function(e,a){t=e.rsp})),t.sort(((e,t)=>e.label>t.label?1:t.label>e.label?-1:0)),D=t}()),s.value.metricsLoaded(T,I,P,O,M,t.page_csrf,null,null,j,L,U,F,R,D)})),mn((()=>{l.value.destroy_table()})),(e,a)=>(Ps(),js("div",aC,[Vs("div",lC,[Vs("div",nC,[sC,Vs("div",oC,[Vs("div",iC,[Vs("h4",null,te(o("if_stats_config.traffic_rules")),1)]),Vs("div",rC,[Hs(lx,{ref_key:"modal_delete_confirm",ref:n,title:ya(A),body:ya(E),onDelete:H},null,8,["title","body"]),Hs(tC,{ref_key:"modal_add_host_rule",ref:s,metric_list:ya(T),interface_metric_list:ya(P),frequency_list:z,init_func:B,has_vlans:t.has_vlans,onAdd:G,onEdit:q},null,8,["metric_list","interface_metric_list","has_vlans"]),Hs(xw,{ref_key:"table_host_rules",ref:l,table_buttons:ya(C).table_buttons,columns_config:ya(C).columns_config,data_url:ya(C).data_url,enable_search:ya(C).enable_search,table_config:ya(C).table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])]),Vs("div",cC,[Hs(pv,{note_list:S})])])])]))},__file:"http_src/vue/page-host-rules.vue"};const dC={class:"row"},_C={class:"col-md-12 col-lg-12"},pC={class:"card"},fC=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),vC={class:"card-body"},mC={id:"host_details_ports"},hC={class:"row mb-4 mt-4",id:"host_details_ports"},gC={class:"col-6"};var bC={__name:"page-host-details-ports",props:{page_csrf:String},setup(e){va(null),va([]),va({});const t=e=>i18n(e);dn((async()=>{await async function(){let e={};e.host=x.get_url_entry("host"),e.vlan=x.get_url_entry("vlan"),e.ifid=x.get_url_entry("ifid"),l.forEach((t=>{let l={...t.extra_params,...e};$.get(a.buildURL(t.url,l),(async function(e,a){let l=[];e.rsp.forEach((e=>{const t=e.port_info.port,a=e.port_info.l7_proto;l.push({label:`${t} (${a})`})})),t.stats_rows=l}))}))}()})),_n((async()=>{a.hideOverlays()})),mn((async()=>{traffic_table.value.destroy_table()})),i18n("graphs.cli_ports"),ntopChartApex.typeChart.DONUT,http_prefix,i18n("graphs.srv_ports"),ntopChartApex.typeChart.DONUT,http_prefix;const l=[{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"cli_port_flows",extra_params:{mode:"local",protocol:"tcp"},columns:[{id:"active_server_tcp_ports",label:t("ports_page.active_server_tcp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]},{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"cli_port_flows",extra_params:{mode:"local",protocol:"udp"},columns:[{id:"active_server_udp_ports",label:t("ports_page.active_server_udp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]},{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"srv_port_flows",extra_params:{mode:"remote",protocol:"tcp"},columns:[{id:"client_contacted_server_tcp_ports",label:t("ports_page.client_contacted_server_tcp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]},{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"srv_port_flows",extra_params:{mode:"remote",protocol:"udp"},columns:[{id:"client_contacted_server_udp_ports",label:t("ports_page.client_contacted_server_udp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]}];return(e,t)=>(Ps(),js("div",dC,[Vs("div",_C,[Vs("div",pC,[fC,Vs("div",vC,[Vs("div",mC,[Vs("div",hC,[(Ps(),js(Ss,null,En(l,(e=>Vs("div",gC,[Hs(Pw,{id:e.id,columns:e.columns,rows:e.stats_rows,print_html_column:e=>function(e){return e.label}(e),print_html_row:(e,t)=>function(e,t){return t.label}(0,t)},null,8,["id","columns","rows","print_html_column","print_html_row"])]))),64))])])])])])]))},__file:"http_src/vue/page-host-details-ports.vue"};const yC={class:"row"},wC={class:"col-12"},xC={class:"card"},kC={class:"card-body"},$C={class:"align-items-center justify-content-end mb-3",style:{height:"70vh"}},SC={class:"d-flex ms-auto flex-row-reverse"},NC=Vs("label",{class:"my-auto me-1"},null,-1),CC=[Vs("span",null,[Vs("i",{class:"fas fa-sync"})],-1)],AC={key:0,class:"m-1"},EC={style:{"min-width":"14rem"}},TC={class:"my-auto me-1"};var PC={__name:"page-alert-analysis",props:{ifid:String,page_csrf:String,charts_options:Array,available_filters:Object},setup(e){const t=e,l=e=>i18n(e),n=va(!1),s=ntopChartApex.typeChart.BUBBLE,o=`${http_prefix}/lua/pro/rest/v2/charts/alert/analysis.lua`,i="alerts-map",r={},c=va(null),u=function(){let e="";const t={bubble_mode:x.get_url_entry("bubble_mode"),timeframe:x.get_url_entry("timeframe"),vlan:x.get_url_entry("vlan"),ifid:x.get_url_entry("ifid")};for(const[a,l]of Object.entries(t))e=`${e}&${a}=${l}`;return e},d=function(){n.value=!0,c.value.update_chart(`${o}?${u()}`),n.value=!1},_=function(){return async e=>{let l=function(e){let l={};if(t.charts_options.forEach((t=>{t.mode_id==e&&(l=t)})),l&&l.chart&&l.chart.ntop_events){l.chart.events=l.chart.events||{};for(const[e,t]of Object.entries(l.chart.ntop_events))null!=t&&(l.chart.events[e]=a[t]||a.fnone)}return l&&l.xaxis&&l.xaxis.labels&&l.xaxis.labels.ntop_utils_formatter&&(l.xaxis.labels.formatter=a[l.xaxis.labels.ntop_utils_formatter]||a.fnone),l&&l.yaxis&&l.yaxis.labels&&l.yaxis.labels.ntop_utils_formatter&&(l.yaxis.labels.formatter=a[l.yaxis.labels.ntop_utils_formatter]||a.fnone),l&&l.tooltip&&l.tooltip.ntop_utils_formatter&&(l.tooltip.custom=a[l.tooltip.ntop_utils_formatter]),l}(Number(r.bubble_mode.id));const n=await ntopng_utility.http_request(e);return l.series=n.series||{},l}},p=function(e){n.value=!0,x.set_key_to_url(e.filter_name,e.id),c.value.update_chart(`${o}?${u()}`),n.value=!1};return dn((()=>{const e=x.get_url_entry("timeframe"),a=x.get_url_entry("vlan");x.get_url_entry("bubble_mode")||x.set_key_to_url("bubble_mode",0),e||x.set_key_to_url("timeframe",300),a||x.set_key_to_url("vlan",""),x.set_key_to_url("ifid",t.ifid);for(const[e,a]of Object.entries(t.available_filters))a.forEach((t=>{t.filter_name=e,t.currently_active&&(r[e]=t)}))})),_n((()=>{n.value=!1})),(t,a)=>(Ps(),js("div",yC,[Vs("div",wC,[Vs("div",xC,[Vs("div",kC,[Vs("div",$C,[Vs("div",SC,[Vs("div",null,[NC,Vs("div",null,[Vs("button",{class:"btn btn-link m-1",tabindex:"0",type:"button",onClick:d},CC)])]),(Ps(!0),js(Ss,null,En(e.available_filters,((e,t,a)=>(Ps(),js(Ss,null,[e.length>0?(Ps(),js("div",AC,[Vs("div",EC,[Vs("label",TC,te(l("bubble_map."+t))+": ",1),Hs(l_,{selected_option:r[t],"onUpdate:selected_option":e=>r[t]=e,options:e,onSelect_option:p},null,8,["selected_option","onUpdate:selected_option","options"])])])):Ys("v-if",!0)],64)))),256))]),n.value?(Ps(),Ls(yf,{key:0})):Ys("v-if",!0),Vs("div",{id:i,style:{height:"90%"},class:K([n.value?"ntopng-gray-out":""])},[Hs(C_,{ref_key:"bubble_chart",ref:c,id:i,chart_type:ya(s),base_url_request:o,get_params_url_request:u,get_custom_chart_options:_(),register_on_status_change:!1},null,8,["chart_type","get_custom_chart_options"])],2)])])])])]))},__file:"http_src/vue/page-alert-analysis.vue"};const UC={class:"row"},IC={class:"col-12"},OC={class:"card"},MC={class:"card-body"},jC={class:"align-items-center justify-content-end mb-3",style:{height:"70vh"}},LC={class:"d-flex ms-auto flex-row-reverse"},FC=Vs("label",{class:"my-auto me-1"},null,-1),RC={class:"m-1"},DC={key:0,style:{"min-width":"18rem"}},zC={class:"my-auto me-1"};var qC={__name:"page-host-map",props:{ifid:String,page_csrf:String,charts_options:Array,available_filters:Object},setup(e){const t=e,l=e=>i18n(e),n=ntopChartApex.typeChart.BUBBLE,s=`${http_prefix}/lua/rest/v2/charts/host/map.lua`,o="alerts-map",i={},r=va(null),c=function(){let e="";const t={bubble_mode:x.get_url_entry("bubble_mode"),ifid:x.get_url_entry("ifid")};for(const[a,l]of Object.entries(t))e=`${e}&${a}=${l}`;return e},u=function(){return async e=>{let l=function(e){let l={};if(t.charts_options.forEach((t=>{t.mode_id==e&&(l=t)})),l&&l.chart&&l.chart.ntop_events){l.chart.events=l.chart.events||{};for(const[e,t]of Object.entries(l.chart.ntop_events))null!=t&&(l.chart.events[e]=a[t]||a.fnone)}return l&&l.xaxis&&l.xaxis.labels&&l.xaxis.labels.ntop_utils_formatter&&(l.xaxis.labels.formatter=a[l.xaxis.labels.ntop_utils_formatter]||a.fnone),l&&l.yaxis&&l.yaxis.labels&&l.yaxis.labels.ntop_utils_formatter&&(l.yaxis.labels.formatter=a[l.yaxis.labels.ntop_utils_formatter]||a.fnone),l&&l.tooltip&&l.tooltip.ntop_utils_formatter&&(l.tooltip.custom=a[l.tooltip.ntop_utils_formatter]),l}(Number(i.bubble_mode.id));const n=await ntopng_utility.http_request(e);return l.series=n.series||{},l}},d=function(e){x.set_key_to_url(e.filter_name,e.id),r.value.update_chart(`${s}?${c()}`)};return dn((()=>{x.get_url_entry("bubble_mode")||x.set_key_to_url("bubble_mode",0),x.set_key_to_url("ifid",t.ifid);for(const[e,a]of Object.entries(t.available_filters))a.forEach((t=>{t.filter_name=e,t.currently_active&&(i[e]=t)}))})),(t,a)=>(Ps(),js("div",UC,[Vs("div",IC,[Vs("div",OC,[Vs("div",MC,[Vs("div",jC,[Vs("div",LC,[FC,(Ps(!0),js(Ss,null,En(e.available_filters,((e,t,a)=>(Ps(),js("div",RC,[e.length>0?(Ps(),js("div",DC,[Vs("label",zC,te(l("bubble_map."+t))+": ",1),Hs(l_,{selected_option:i[t],"onUpdate:selected_option":e=>i[t]=e,options:e,onSelect_option:d},null,8,["selected_option","onUpdate:selected_option","options"])])):Ys("v-if",!0)])))),256))]),Vs("div",{id:o,style:{height:"90%"}},[Hs(C_,{ref_key:"bubble_chart",ref:r,id:o,chart_type:ya(n),base_url_request:s,get_params_url_request:c,get_custom_chart_options:u(),register_on_status_change:!1},null,8,["chart_type","get_custom_chart_options"])])])])])])]))},__file:"http_src/vue/page-host-map.vue"};const BC={class:"row"},VC={class:"col-md-12 col-lg-12"},HC={class:"card card-shadow"},GC={class:"card-body"},WC={class:"d-flex align-items-center flex-row-reverse mb-2"},KC=Vs("label",{class:"my-auto me-1"},null,-1),JC=[Vs("span",null,[Vs("i",{class:"fas fa-sync"})],-1)],YC={key:0,class:"m-1"},ZC={style:{"min-width":"14rem"}},XC={class:"my-auto me-1"},QC=["title"],eA=[Vs("button",{type:"button",class:"btn btn-link",disabled:""},[Vs("i",{class:"text-danger fa-solid fa-triangle-exclamation"})],-1)];var tA={__name:"page-vlan-ports-sankey",props:{ifid:Number,available_filters:Object},setup(e){const t=e,a={},l=e=>i18n(e),n=va(!1),s=l("ports_analysis.max_entries"),o=l("ports_analysis.no_data"),i=va(null),r=va(null),c=va(null),u=va(null),d=va({}),_=`${http_prefix}/lua/pro/rest/v2/get/vlan/live_ports.lua`,p=`${http_prefix}/lua/pro/rest/v2/get/vlan/historical_ports.lua`,f=va(!1);function v(e){1!=e.is_link_node&&e.link&&x.go_to_url(e.link)}dn((()=>{const e=x.get_url_entry("timeframe"),l=x.get_url_entry("vlan");x.get_url_entry("l4proto"),e||x.set_key_to_url("timeframe","none"),l||x.set_key_to_url("vlan","none"),l||x.set_key_to_url("l4proto","none"),x.set_key_to_url("ifid",t.ifid);for(const[e,l]of Object.entries(t.available_filters))l.forEach((t=>{t.filter_name=e,t.currently_active&&(a[e]=t)}))})),_n((()=>{y(),w(),g()}));const m=function(){g()},h=function(e){x.set_key_to_url(e.filter_name,e.id),g()},g=function(){!async function(){f.value=!0;let e=await async function(){const e=function(){let e=x.get_url_entry("vlan"),t=x.get_url_entry("timeframe"),a=x.get_url_entry("l4proto");"none"==e&&(e="");"none"==t&&(t="");"none"==a&&(a="");let l="",n={ifid:x.get_url_entry("ifid"),vlan:e,timeframe:t,l4proto:a},s=x.obj_to_url_params(n);l=""==t?`${_}?${s}`:`${p}?${s}`;return l}();let t=await b.http_request(e);(function(e){n.value=e.max_entries_reached})(t),t=function(e){let t=e=>console.error(`link (source: ${e.source_node_id}, target: ${e.target_node_id}) removed for not existing source/target node`),a=function(e,t){let a={};e.nodes.forEach((e=>a[e.node_id]=!0));let l=e=>null!=a[e.source_node_id]&&null!=a[e.target_node_id],n=function(e,t,a){return e.filter((e=>{const l=t(e);return 0==l&&null!=a&&a(e),l}))}(e.links,l,t);return n}(e,t);return{nodes:e.nodes,links:a}}(t);const a=function(e){let t={},a={};e.nodes.forEach((e=>t[e.node_id]=e));let l=e=>`${e.source_node_id}_${e.label}`;e.links.forEach((e=>{let n=l(e),s=a[n];null==s&&(s={id:n,label:e.label,link:e.optional_info.link,node_links:[]},a[n]=s),s.node_links.push({source:t[e.source_node_id],target:t[e.target_node_id],value:e.value})}));let n=e.nodes.map((e=>e)),s=[];for(let e in a){let t=a[e],l={node_id:t.id,label:t.label,link:t.link};n.push(l),t.node_links.forEach((e=>{s.push({source_node_id:e.source.node_id,target_node_id:l.node_id,label:`${e.source.label} - ${e.target.label}: ${l.label}`,value:e.value}),s.push({source_node_id:l.node_id,target_node_id:e.target.node_id,label:`${e.source.label} - ${e.target.label}: ${l.label}`,value:e.value})}))}let o=n.map(((e,t)=>({index:t,label:e.label,data:e}))),i={};o.forEach(((e,t)=>i[e.data.node_id]=e));let r=s.map((e=>({source:i[e.source_node_id].index,target:i[e.target_node_id].index,value:e.value,label:e.label})));return{nodes:o,links:r}}(t);return a.links.length>0&&a.nodes.length>0?i.value.set_no_data_flag(!1):i.value.set_no_data_flag(!0),a}();d.value=e,f.value=!1}()};function y(){u.value=$(r.value).height()-100}function w(){c.value=$(r.value).width()-10}return(t,_)=>(Ps(),js("div",BC,[Vs("div",VC,[Vs("div",HC,[f.value?(Ps(),Ls(yf,{key:0})):Ys("v-if",!0),Vs("div",GC,[Vs("div",{class:K(["align-items-center justify-content-end mb-2",[f.value?"ntopng-gray-out":""]]),style:{height:"70vh"},ref_key:"body_div",ref:r},[Vs("div",WC,[Vs("div",null,[KC,Vs("div",null,[Vs("button",{class:"btn btn-link m-1",tabindex:"0",type:"button",onClick:m},JC)])]),(Ps(!0),js(Ss,null,En(e.available_filters,((e,t,n)=>(Ps(),js(Ss,null,[e.length>0?(Ps(),js("div",YC,[Vs("div",ZC,[Vs("label",XC,te(l("ports_analysis."+t))+": ",1),Hs(l_,{selected_option:a[t],"onUpdate:selected_option":e=>a[t]=e,options:e,onSelect_option:h},null,8,["selected_option","onUpdate:selected_option","options"])])])):Ys("v-if",!0)],64)))),256)),1==n.value?(Ps(),js("div",{key:0,class:"mt-auto m-1",title:ya(s),style:{cursor:"help"}},eA,8,QC)):Ys("v-if",!0)]),Hs(jS,{ref_key:"sankey_chart",ref:i,width:c.value,height:u.value,no_data_message:ya(o),sankey_data:d.value,onUpdate_width:w,onUpdate_height:y,onNode_click:v},null,8,["width","height","no_data_message","sankey_data"])],2)])])])]))},__file:"http_src/vue/page-vlan-ports-sankey.vue"};const aA={class:"row"},lA={class:"col-md-12 col-lg-12"},nA={class:"card card-shadow"},sA={class:"card-body"},oA={class:"d-flex align-items-center mb-2"},iA={class:"d-flex no-wrap",style:{"text-align":"left","margin-right":"1rem","min-width":"25rem"}},rA={class:"my-auto me-1"},cA=["title"],uA=["onClick","title"];var dA={__name:"page-aggregated-live-flows",props:{context:Object},setup(e){const t=e,l=va(t.context.csrf),n=e=>i18n(e),s=[{label:n("application_proto"),value:1,param:"application_protocol",table_id:"aggregated_app_proto",enterprise_m:!1,search_enabled:!0},{label:n("client"),value:2,param:"client",table_id:"aggregated_client",enterprise_m:!1,search_enabled:!1},{label:n("client_server"),value:4,param:"client_server",table_id:"aggregated_client_server",enterprise_m:!0,search_enabled:!1},{label:n("client_server_application_proto"),value:5,param:"app_client_server",table_id:"aggregated_app_client_server",enterprise_m:!0,search_enabled:!0},{label:n("client_server_srv_port"),value:7,param:"client_server_srv_port",table_id:"aggregated_client_server_srv_port",enterprise_m:!1,search_enabled:!1},{label:n("client_server_srv_port_app_proto"),value:8,param:"client_server_srv_port_app_proto",table_id:"aggregated_client_server_srv_port_app_proto",enterprise_m:!1,search_enabled:!1},{label:n("info"),value:6,param:"info",table_id:"aggregated_info",enterprise_m:!0,search_enabled:!0},{label:n("server"),value:3,param:"server",table_id:"aggregated_server",enterprise_m:!1,search_enabled:!1}];va(null);const o=va(),i=va([]),r=va([]),c=va("aggregated_live_flows"),u=xo((()=>{if(null==d.value?.value)return c.value;return`${c.value}_${d.value.value}`})),d=va(s[0]),_=function(){if(t.context.is_ntop_enterprise_m)return va(s);{let e=[];return s.forEach((t=>{t.enterprise_m||e.push(t)})),va(e)}}();async function p(){x.set_key_to_url("aggregation_criteria",d.value.param)}dn((async()=>{!function(){let e=x.get_url_entry("aggregation_criteria");if(null==e||""==e)return;d.value=s.find((t=>t.param==e))}()})),_n((async()=>{!async function(e){i.value=await h("overview"),v()}()}));const f=()=>({ifid:x.get_url_entry("ifid")||t.context.ifid,vlan_id:x.get_url_entry("vlan_id"),deviceIP:x.get_url_entry("deviceIP"),aggregation_criteria:x.get_url_entry("aggregation_criteria")||d.value.param,host:x.get_url_entry("host")||t.context.host});function v(){i.value.forEach(((e,t)=>{null==e.basic_label&&(e.basic_label=e.label);const a=x.get_url_entry(e.id);null!=a&&e.options.forEach((t=>{t.value.toString()===a&&(e.label=`${e.basic_label}: ${t.label||t.value}`)}))}))}const m=(e,t)=>a=>{!async function(e,t){if(e.show_spinner=!0,await Ja(),0==e.data_loaded){let a=await h(e.id);e.options=a.find((t=>t.id==e.id)).options,await Ja(),r.value[t].load_menu()}e.show_spinner=!1}(e,t)};async function h(e,a){let l={ifid:x.get_url_entry("ifid")||t.context.ifid},n=x.obj_to_url_params(l),s=x.get_url_params();const o=`${http_prefix}/lua/rest/v2/get/flow/aggregated_live_flows_filters.lua?action=${e}&${s}&${n}`;return(await b.http_request(o)).map((t=>({id:t.action||t.name,label:t.label,title:t.tooltip,data_loaded:"overview"!=e,options:t.value,hidden:1==t.value.length})))}const g=e=>(e.enable_search=1==d.value.search_enabled,e),y=async e=>((e=[]).push({sortable:!1,title_i18n:"flows_page.live_flows",name:"flows_icon",data_field:"live_flows",class:["text-center"],responsivePriority:1,render_func:(e,t)=>$(e,t)}),1==d.value.value?e.push({title_i18n:"application_proto",sortable:!0,name:"application",data_field:"application",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>S(e,t)}):2==d.value.value?e.push({title_i18n:"client",sortable:!0,name:"client",data_field:"client",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>w(e)}):3==d.value.value?e.push({title_i18n:"last_server",sortable:!0,name:"server",data_field:"server",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>k(e,t)}):7==d.value.value?e.push({title_i18n:"client",sortable:!0,name:"client",data_field:"client",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>w(e)},{title_i18n:"last_server",sortable:!0,name:"server",data_field:"server",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>k(e,t)}):8==d.value.value?e.push({title_i18n:"client",sortable:!0,name:"client",data_field:"client",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>w(e)},{title_i18n:"last_server",sortable:!0,name:"server",data_field:"server",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>k(e,t)},{title_i18n:"application_proto",sortable:!0,name:"application",data_field:"application",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>S(e,t)}):t.context.is_ntop_enterprise_m&&(4==d.value.value||7==d.value.value?e.push({title_i18n:"client",sortable:!0,name:"client",data_field:"client",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>w(e)},{title_i18n:"last_server",sortable:!0,name:"server",data_field:"server",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>k(e,t)}):5==d.value.value?e.push({title_i18n:"client",sortable:!0,name:"client",data_field:"client",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>w(e)},{title_i18n:"last_server",sortable:!0,name:"server",data_field:"server",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>k(e,t)},{title_i18n:"application_proto",sortable:!0,name:"application",data_field:"application",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>S(e,t)}):6==d.value.value&&e.push({title_i18n:"info",sortable:!0,name:"info",data_field:"info",class:["text-nowrap"],responsivePriority:1,render_func:e=>`${e.label}`})),t.context.vlans.length>2&&e.push({title_i18n:"vlan",sortable:!0,name:"vlan_id",data_field:"vlan_id",class:["text-nowrap ","text-center"],responsivePriority:1,render_func:e=>{if(0===e.id||null==e.id){const e=i18n("no_vlan");return`<a href="${http_prefix}/lua/flows_stats.lua?vlan=0">${e}</a>`}return`<a href="${http_prefix}/lua/flows_stats.lua?vlan=${e.id}">${e.label}</a>`}}),e.push({title_i18n:"flows",sortable:!0,name:"flows",data_field:"flows",class:["text-nowrap ","text-center"],responsivePriority:1},{title_i18n:"total_score",sortable:!0,name:"score",data_field:"tot_score",class:["text-center"],responsivePriority:1}),2!=d.value.value&&4!=d.value.value&&7!=d.value.value&&e.push({title_i18n:"clients",sortable:!0,name:"num_clients",data_field:"num_clients",class:["text-nowrap ","text-center"],responsivePriority:1}),3!=d.value.value&&4!=d.value.value&&7!=d.value.value&&e.push({title_i18n:"servers",sortable:!0,name:"num_servers",data_field:"num_servers",class:["text-nowrap ","text-center"],responsivePriority:1}),e.push({title_i18n:"breakdown",sortable:!1,name:"breakdown",data_field:"breakdown",class:["text-nowrap","text-center"],responsivePriority:1,render_func:e=>a.createBreakdown(e.percentage_bytes_sent,e.percentage_bytes_rcvd,i18n("sent"),i18n("rcvd"))},{title_i18n:"traffic_sent",sortable:!0,name:"bytes_sent",data_field:"bytes_sent",class:["text-nowrap","text-end"],responsivePriority:1,render_func:e=>a.bytesToSize(e)},{title_i18n:"traffic_rcvd",sortable:!0,name:"bytes_rcvd",data_field:"bytes_rcvd",class:["text-nowrap","text-end"],responsivePriority:1,render_func:e=>a.bytesToSize(e)},{title_i18n:"total_traffic",sortable:!0,name:"tot_traffic",data_field:"tot_traffic",class:["text-nowrap","text-end"],responsivePriority:1,render_func:e=>a.bytesToSize(e)}),e),w=function(e,t){let a="";return e.is_alerted&&(a="<i class='fas fa-exclamation-triangle' style='color: #B94A48;'></i>"),e.in_memory?`<a href="${http_prefix}/lua/flows_stats.lua?client=${e.ip}&vlan=${e.vlan_id}">${e.label}</a> ${a} ${e.extra_labels} <a href="${http_prefix}/lua/host_details.lua?host=${e.ip}&vlan=${e.vlan_id}" data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`:`${e.label} ${a} ${e.extra_labels}`},k=function(e,t){let a="";return e.is_alerted&&(a="<i class='fas fa-exclamation-triangle' style='color: #B94A48;'></i>"),e.in_memory?7!=d.value.value&&8!=d.value.value||null==t.srv_port?`<a href="${http_prefix}/lua/flows_stats.lua?server=${e.ip}&vlan=${e.vlan_id}">${e.label}</a> ${a} ${e.extra_labels} <a href="${http_prefix}/lua/host_details.lua?host=${e.ip}&vlan=${e.vlan_id}" data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`:`<a href="${http_prefix}/lua/flows_stats.lua?server=${e.ip}&vlan=${e.vlan_id}">${e.label}</a> ${a} ${e.extra_labels} <a href="${http_prefix}/lua/host_details.lua?host=${e.ip}&vlan=${e.vlan_id}" data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>:<a href="${http_prefix}/lua/flows_stats.lua?port=${t.srv_port.id}&vlan=${e.vlan_id}">${t.srv_port.label}</a>`:7!=d.value.value&&8!=d.value.value||null==t.srv_port?`${e.label} ${a} ${e.extra_labels}`:`${e.label} ${a} ${e.extra_labels}:${t.srv_port.label}`},$=function(e,a){let l="",n=!1;return null!=t.context.host&&""!=t.context.host&&(n=!0),1==d.value.value?(l=`${http_prefix}/lua/flows_stats.lua?application=${a.application.id}`,n&&(l=l+"&host="+t.context.host)):2==d.value.value?l=`${http_prefix}/lua/flows_stats.lua?client=${a.client.ip}&vlan=${a.client.vlan_id}`:3==d.value.value?l=`${http_prefix}/lua/flows_stats.lua?server=${a.server.ip}&vlan=${a.server.vlan_id}`:4==d.value.value?l=`${http_prefix}/lua/flows_stats.lua?client=${a.client.ip}&server=${a.server.ip}&vlan=${a.vlan_id.id}`:5==d.value.value?l=`${http_prefix}/lua/flows_stats.lua?application=${a.application.id}&client=${a.client.ip}&server=${a.server.ip}&vlan=${a.vlan_id.id}`:6==d.value.value?(l=`${http_prefix}/lua/flows_stats.lua?flow_info=${a.info.id}`,n&&(l=l+"&host="+t.context.host)):7==d.value.value?l=`${http_prefix}/lua/flows_stats.lua?client=${a.client.ip}&server=${a.server.ip}&vlan=${a.vlan_id.id}&srv_port=${a.srv_port.id}`:8==d.value.value&&(l=`${http_prefix}/lua/flows_stats.lua?application=${a.application.id}&client=${a.client.ip}&server=${a.server.ip}&vlan=${a.vlan_id.id}&srv_port=${a.srv_port.id}`),`<a href=${l} class="btn btn-sm btn-info" ><i class= 'fas fa-stream'></i></a>`},S=function(e,t){return 0==t.confidence?`${e.label_with_icons} <span class="badge bg-warning" title=" `+t.confidence_name+'">'+t.confidence_name+" </span>":t.confidence?`${e.label_with_icons} <span class="badge bg-success" title="`+t.confidence_name+' "> '+t.confidence_name+"</span>":void 0};return(e,t)=>(Ps(),js("div",aA,[Vs("div",lA,[Vs("div",nA,[Vs("div",sA,[Vs("div",oA,[Vs("div",iA,[Vs("label",rA,te(n("criteria_filter"))+": ",1),Hs(l_,{selected_option:d.value,"onUpdate:selected_option":t[0]||(t[0]=e=>d.value=e),options:ya(_),onSelect_option:p},null,8,["selected_option","options"])])]),Vs("div",null,[Hs(iv,{ref_key:"table_aggregated_live_flows",ref:o,csrf:l.value,table_id:ya(u),table_config_id:c.value,f_map_columns:y,get_extra_params_obj:f,f_map_config:g},{custom_header:ml((()=>[(Ps(!0),js(Ss,null,En(i.value,((e,t)=>(Ps(),Ls(Rd,{f_on_open:m(e,t),ref_for:!0,ref:e=>{r.value[t]=e},hidden:e.hidden},{title:ml((()=>[Hs(rv,{show:e.show_spinner,size:"1rem",class:"me-1"},null,8,["show"]),Vs("a",{class:"ntopng-truncate",title:e.title},te(e.label),9,cA)])),menu:ml((()=>[(Ps(!0),js(Ss,null,En(e.options,(e=>(Ps(),js("a",{style:{cursor:"pointer",display:"block"},onClick:t=>function(e,t){t.stopPropagation(),x.set_key_to_url(e.key,`${e.value}`),v(),o.value.refresh_table()}(e,t),class:"ntopng-truncate tag-filter",title:e.value},[null==e.count?(Ps(),js(Ss,{key:0},[Ks(te(e.label),1)],64)):(Ps(),js(Ss,{key:1},[Ks(te(e.label+" ("+e.count+")"),1)],64))],8,uA)))),256))])),_:2},1032,["f_on_open","hidden"])))),256))])),_:1},8,["csrf","table_id","table_config_id"])])])])])]))},__file:"http_src/vue/page-aggregated-live-flows.vue"};const _A={id:"aggregated_live_flows"};var pA={__name:"page-test-table",props:{url:String,ifid:Number,columns_config:Array},setup(e){const t=e,a=va({}),l=va(null);return dn((()=>{!function(){const e=[];let n={ifid:ntopng_url_manager.get_url_entry("ifid")||t.ifid},s=ntopng_url_manager.obj_to_url_params(n);e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,a,n){l.value.reload()}});let o={table_buttons:e,data_url:`${t.url}?${s}`,enable_search:!0};o.columns_config=t.columns_config,a.value=o}()})),(e,t)=>(Ps(),js("div",_A,[Hs(xw,{ref_key:"table_test",ref:l,table_buttons:a.value.table_buttons,columns_config:a.value.columns_config,data_url:a.value.data_url,filter_buttons:a.value.table_filters,enable_search:a.value.enable_search,table_config:a.value.table_config},null,8,["table_buttons","columns_config","data_url","filter_buttons","enable_search","table_config"])]))},__file:"http_src/vue/page-test-table.vue"};const fA={class:"container-fluid"},vA={class:"row form-group mb-3"},mA={class:"col col-md-12"},hA={class:"form-label"},gA={class:"row form-group mb-3"},bA={class:"col col-md-6"},yA={class:"form-label"},wA={class:"col col-md-6"},xA={class:"form-label"},kA={key:0},$A={key:1},SA=["pattern"],NA={class:"row form-group mb-3"},CA={class:"col col-md-6"},AA={class:"form-label"},EA={class:"col col-md-6"},TA={class:"form-label"},PA={key:0},UA={key:1},IA=["pattern"],OA={class:"row form-group mb-3"},MA={class:"col col-md-12"},jA={class:"form-label"},LA={class:"row form-group mb-3"},FA={class:"col col-md-12"},RA={class:"form-label"},DA=["disabled"];var zA={__name:"modal-nedge-add-rule-config",props:{},emits:["edit","add"],setup(e,{expose:t,emit:a}){const l=e=>i18n(e),n=va(null),s=va(""),o=[{label:l("nedge.page_rules_config.modal_rule_config.ip"),value:"ip",default:!0},{label:l("nedge.page_rules_config.modal_rule_config.cidr"),value:"cidr"},{label:l("interface"),value:"interface"}];let i="source_to_dest";const r=[{label:l("nedge.page_rules_config.bidirectional"),value:"bidirectional",bidirectional:!0},{label:l("nedge.page_rules_config.source_to_dest"),value:"source_to_dest",bidirectional:!1}],c=va({});let u="accept";const d=[{label:l("nedge.page_rules_config.accept"),value:"accept"},{label:l("nedge.page_rules_config.deny"),value:"deny"}],_=va({}),p=va(0),f=va(0),v=va({}),m=va(""),h=va(""),g=va({}),y=va(""),w=va(""),x=`${http_prefix}/lua/rest/v2/get/nedge/interfaces.lua`;let k;const $=va([]),S=va({}),N=va({}),C=va(""),A=xo((()=>I(v.value,h.value,m.value))),E=xo((()=>I(g.value,w.value,y.value))),T=va(!0);async function P(e){let t=null;null!=e&&(t=e.source.value),"interface"==v.value.value?(await M(),S.value=null!=t?$.value.find((e=>e.value==t)):$.value[0]):(h.value=null!=e?e.source.value:"",j(m,v.value.value))}async function U(e){let t=null;null!=e&&(t=e.destination.value),"interface"==g.value.value?(await M(),N.value=null!=t?$.value.find((e=>e.value==t)):$.value[0]):(w.value=null!=e?e.destination.value:"",j(y,g.value.value))}function I(e,t,a){if("interface"==e.value)return!0;return new RegExp(a).test(t)}let O=!1;async function M(){if(1==O)return;null==k&&(k=b.http_request(x));let e=await k;$.value=e.filter((e=>"lan"==e.role)).map((e=>({label:e.label,value:e.ifname}))),O=!0}function j(e,t){e.value=yp.get_data_pattern(t)}const L=()=>{let e=v.value.value,t=h.value;"interface"==e&&(t=S.value.value);let l=g.value.value,n=w.value;"interface"==l&&(n=N.value.value);let s={src_type:e,src_value:t,dst_type:l,dst_value:n,policy:_.value.value,bidirectional:"bidirectional"==c.value.value},o="add";0==T.value&&(s.rule_id=p.value,s.new_rule_id=f.value,o="edit"),a(o,s),F()},F=()=>{n.value.close()};return t({show:(e,t)=>{!function(e,t){T.value=null==e,null!=t&&(u=t.value);if(0==T.value)s.value=l("nedge.page_rules_config.modal_rule_config.title_edit"),C.value=l("edit"),v.value=o.find((t=>t.value==e.source.type)),g.value=o.find((t=>t.value==e.destination.type)),c.value=r.find((t=>t.bidirectional==e.bidirectional)),_.value=d.find((t=>t.value==e.action)),p.value=e.rule_id,f.value=e.rule_id;else{s.value=l("nedge.page_rules_config.modal_rule_config.title_add"),C.value=l("add");let e=o.find((e=>1==e.default));v.value=e,g.value=e,c.value=r.find((e=>e.value==i)),_.value=d.find((e=>e.value!=u))}P(e),U(e)}(e,t),n.value.show()},close:F}),_n((()=>{})),(e,t)=>(Ps(),Ls(np,{onShowed:t[12]||(t[12]=e=>{}),ref_key:"modal_id",ref:n},{title:ml((()=>[Ks(te(s.value),1)])),body:ml((()=>[Vs("div",fA,[Ys(" Rule ID "),wn(Vs("div",vA,[Vs("div",mA,[Vs("label",hA,te(l("nedge.page_rules_config.rule_id")),1),wn(Vs("input",{type:"text",class:"form-control","onUpdate:modelValue":t[0]||(t[0]=e=>f.value=e)},null,512),[[Mi,f.value]]),wn(Vs("input",{type:"hidden",class:"form-control","onUpdate:modelValue":t[1]||(t[1]=e=>p.value=e)},null,512),[[Mi,p.value]])])],512),[[Yi,!T.value]]),Ys(" Source "),Vs("div",gA,[Vs("div",bA,[Vs("label",yA,te(l("nedge.page_rules_config.modal_rule_config.source_type")),1),Hs(l_,{selected_option:v.value,"onUpdate:selected_option":t[2]||(t[2]=e=>v.value=e),onSelect_option:t[3]||(t[3]=e=>P()),options:o},null,8,["selected_option"])]),Vs("div",wA,[Vs("label",xA,te(l("nedge.page_rules_config.source")),1),"interface"==v.value.value?(Ps(),js("div",kA,[Hs(l_,{selected_option:S.value,"onUpdate:selected_option":t[4]||(t[4]=e=>S.value=e),options:$.value},null,8,["selected_option","options"])])):(Ps(),js("div",$A,[wn(Vs("input",{type:"text",class:"form-control",pattern:m.value,"onUpdate:modelValue":t[5]||(t[5]=e=>h.value=e)},null,8,SA),[[Mi,h.value]])]))])]),Ys(" Dest "),Vs("div",NA,[Vs("div",CA,[Vs("label",AA,te(l("nedge.page_rules_config.modal_rule_config.dest_type")),1),Hs(l_,{selected_option:g.value,"onUpdate:selected_option":t[6]||(t[6]=e=>g.value=e),onSelect_option:t[7]||(t[7]=e=>U()),options:o},null,8,["selected_option"])]),Vs("div",EA,[Vs("label",TA,te(l("nedge.page_rules_config.dest")),1),"interface"==g.value.value?(Ps(),js("div",PA,[Hs(l_,{selected_option:N.value,"onUpdate:selected_option":t[8]||(t[8]=e=>N.value=e),options:$.value},null,8,["selected_option","options"])])):(Ps(),js("div",UA,[wn(Vs("input",{type:"text",class:"form-control",pattern:y.value,"onUpdate:modelValue":t[9]||(t[9]=e=>w.value=e)},null,8,IA),[[Mi,w.value]])]))])]),Ys(" Direction "),Vs("div",OA,[Vs("div",MA,[Vs("label",jA,te(l("nedge.page_rules_config.direction")),1),Hs(l_,{selected_option:c.value,"onUpdate:selected_option":t[10]||(t[10]=e=>c.value=e),options:r},null,8,["selected_option"])])]),Ys(" Action "),Vs("div",LA,[Vs("div",FA,[Vs("label",RA,te(l("nedge.page_rules_config.action")),1),Hs(l_,{selected_option:_.value,"onUpdate:selected_option":t[11]||(t[11]=e=>_.value=e),options:d},null,8,["selected_option"])])])])])),footer:ml((()=>[Vs("button",{type:"button",disabled:!ya(A)||!ya(E),onClick:L,class:"btn btn-primary"},te(C.value),9,DA)])),_:1},512))}};lp("\ninput[data-v-50692d68]:invalid {\n  border-color: #ff0000;\n}\n"),zA.__scopeId="data-v-50692d68",zA.__file="http_src/vue/modal-nedge-add-rule-config.vue";const qA={class:"container-fluid"},BA={class:"row form-group mb-3"},VA={class:"col col-md-12"},HA={class:"form-label"};var GA={__name:"modal-nedge-change-default-policy",emits:["apply"],setup(e,{expose:t,emit:a}){const l=va(null),n=e=>i18n(e),s=n("nedge.page_rules_config.modal_change_default_policy.title"),o=[{label:n("nedge.page_rules_config.accept"),value:"accept"},{label:n("nedge.page_rules_config.deny"),value:"deny"}],i=va({}),r=()=>{l.value.close()};function c(){a("apply",i.value.value),r()}return t({show:e=>{i.value=o.find((t=>t.value==e.value)),l.value.show()},close:r}),(e,t)=>(Ps(),Ls(np,{onShowed:t[1]||(t[1]=e=>{}),ref_key:"modal_id",ref:l},{title:ml((()=>[Ks(te(ya(s)),1)])),body:ml((()=>[Vs("div",qA,[Ys(" Default Policy "),Vs("div",BA,[Vs("div",VA,[Vs("label",HA,te(n("nedge.page_rules_config.default policy")),1),Hs(l_,{selected_option:i.value,"onUpdate:selected_option":t[0]||(t[0]=e=>i.value=e),options:o},null,8,["selected_option"])])])])])),footer:ml((()=>[Vs("button",{type:"button",onClick:c,class:"btn btn-primary"},te(n("apply")),1)])),_:1},512))},__file:"http_src/vue/modal-nedge-change-default-policy.vue"};const WA={class:"mb-2"},KA=Vs("br",null,null,-1),JA={class:"d-inline-block"},YA={key:0,style:{color:"green"}},ZA={key:1,style:{color:"red"}},XA=[Vs("i",{class:"fas fa-cog"},null,-1)],QA={id:"aggregated_live_flows"};var eE={__name:"page-nedge-rules-config",props:{url:String,ifid:Number,csrf:String,columns_config:Array},setup(e){const t=e,a=e=>i18n(e),l=va({}),n=va(null),s=va(null),o=va(null),i=va({});function r(e){_(e,`${http_prefix}/lua/rest/v2/edit/nedge/policy/rule.lua`)}function c(e){_(e,`${http_prefix}/lua/rest/v2/add/nedge/policy/rule.lua`)}async function u(e){if(null==e){const t=`${http_prefix}/lua/rest/v2/get/nedge/policy/default.lua`;e=(await b.http_request(t)).default_policy}i.value="accept"==e?{value:e,label:a("nedge.page_rules_config.accept")}:{value:e,label:a("nedge.page_rules_config.deny")}}async function d(e){const a=`${http_prefix}/lua/rest/v2/set/nedge/policy/default.lua`;let l=JSON.stringify({default_policy:e,csrf:t.csrf});await b.http_request(a,{method:"post",headers:{"Content-Type":"application/json"},body:l}),u(e),v()}function _(e,a){let l=JSON.stringify({...e,csrf:t.csrf});b.http_request(a,{method:"post",headers:{"Content-Type":"application/json"},body:l}),v()}function p(){o.value.show(i.value)}dn((async()=>{!function(){const e=[];let n={ifid:x.get_url_entry("ifid")||t.ifid},o=x.obj_to_url_params(n);e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,a,l){v()}},{text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){s.value.show(null,i.value)}});let r={table_buttons:e,data_url:`${t.url}?${o}`,enable_search:!1},c=[{columnName:a("nedge.page_rules_config.rule_id"),targets:0,name:"rule_id",data:"rule_id",className:"text-nowrap text-center",responsivePriority:1},{columnName:a("nedge.page_rules_config.source"),targets:0,name:"source",data:"source",className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,a){return null!=e.label&&""!=e.label?e.label:e.value}},{columnName:a("nedge.page_rules_config.dest"),targets:0,name:"dest",data:"destination",className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,a){return null!=e.label&&""!=e.label?e.label:e.value}},{columnName:a("nedge.page_rules_config.direction"),targets:0,name:"bidirectional",data:"bidirectional",className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,l){return a(1==e?"nedge.page_rules_config.bidirectional":"nedge.page_rules_config.source_to_dest")}},{columnName:a("nedge.page_rules_config.action"),targets:0,name:"action",data:"action",className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,l){let n="red",s=a("nedge.page_rules_config.deny");return"accept"==e&&(n="green",s=a("nedge.page_rules_config.accept")),`<span style="color:${n};">${s}</span>`}}].map((e=>e));c.push({columnName:a("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return f(a)}}),r.columns_config=c,l.value=r}(),u()}));const f=function(e){let a={handlerId:"delete_host",onClick:()=>{!async function(e){const a=`${http_prefix}/lua/rest/v2/delete/nedge/policy/rule.lua`;let l={"Content-Type":"application/json"},n=JSON.stringify({rule_id:e.rule_id,csrf:t.csrf});b.http_request(a,{method:"post",headers:l,body:n}),v()}(e)}},l={handlerId:"edit_rule",onClick:()=>{s.value.show(e)}};return DataTableUtils.createActionButtons([{class:"btn-secondary",handler:l,handlerId:"edit_rule",icon:"fa-edit",title:i18n("edit")},{class:"btn-danger",handler:a,handlerId:"delete_rule",icon:"fa-trash",title:i18n("delete")}])};function v(){setTimeout((()=>{x.reload_url()}),500)}return(e,t)=>(Ps(),js(Ss,null,[Vs("div",WA,[Vs("h2",null,te(a("nedge.rules_config_title")),1),KA,Vs("h5",JA,[Ks(te(a("nedge.page_rules_config.default policy"))+" ",1),"accept"==i.value?.value?(Ps(),js("span",YA,te(i.value?.label),1)):Ys("v-if",!0),"deny"==i.value?.value?(Ps(),js("span",ZA,te(i.value?.label),1)):Ys("v-if",!0),Vs("small",null,[Vs("a",{href:"javascript:void(0)",style:{"margin-left":"0.5rem"},onClick:p},XA)])])]),Vs("div",QA,[Hs(xw,{ref_key:"table_rules",ref:n,table_buttons:l.value.table_buttons,columns_config:l.value.columns_config,data_url:l.value.data_url,filter_buttons:l.value.table_filters,enable_search:l.value.enable_search,table_config:l.value.table_config},null,8,["table_buttons","columns_config","data_url","filter_buttons","enable_search","table_config"])]),Hs(zA,{ref_key:"modal_add_rule_config",ref:s,onAdd:c,onEdit:r},null,512),Hs(GA,{ref_key:"modal_change_default_policy",ref:o,onApply:d},null,512)],64))},__file:"http_src/vue/page-nedge-rules-config.vue"};const tE={key:0,class:"form-group ms-2 me-2 mt-3 row"},aE={class:"col-form-label col-sm-4"},lE={class:"col-8"},nE={key:1,class:"form-group ms-2 me-2 mt-3 row"},sE={class:"col-form-label col-sm-4"},oE={class:"col-8"},iE={class:"form-group ms-2 me-2 mt-3 row"},rE={class:"col-form-label col-sm-4"},cE={class:"col-8"},uE=["placeholder"],dE=["disabled"],_E=["disabled"];var pE={__name:"modal-add-application",props:{page_csrf:String,ifid:String},emits:["add"],setup(e,{expose:t,emit:a}){const l=va(null),n=va(!1),s=e=>i18n(e),o=va(!0);let i=va(i18n("add_application"));const r=va(i18n("details.custom_rules_placeholder")),c=va({}),u=va([]),d=va(""),_=va(""),p=va(null);va({});const f=[s("custom_categories.each_host_separate_line"),s("custom_categories.allowed_rules"),s("custom_categories.ip_address"),s("custom_categories.ip_address_port"),s("custom_categories.port"),s("custom_categories.port_range"),s("custom_categories.host_domain")];const v=()=>{1==m()&&1==h()?o.value=!1:o.value=!0},m=()=>/^[A-Za-z0-9_-]*$/.test(_.value),h=()=>{let e=!0;return d.value.split("\n").forEach((t=>{e=e&&(/^((tcp|udp):(6553[0-5]|655[0-2][0-9]\d|65[0-4](\d){2}|6[0-4](\d){3}|[1-5](\d){4}|[1-9](\d){0,3}))$/.test(t)||/^((tcp|udp):(6553[0-5]|655[0-2][0-9]\d|65[0-4](\d){2}|6[0-4](\d){3}|[1-5](\d){4}|[1-9](\d){0,3})-(6553[0-5]|655[0-2][0-9]\d|65[0-4](\d){2}|6[0-4](\d){3}|[1-5](\d){4}|[1-9](\d){0,3}))$/.test(t)||/^(ip):(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(t)||/^(ip):(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?):(6553[0-5]|655[0-2][0-9]\d|65[0-4](\d){2}|6[0-4](\d){3}|[1-5](\d){4}|[1-9](\d){0,3})$/.test(t)||/^((host):[a-zA-Z0-9]+)$/.test(t)||/(host):[a-zA-Z0-9].[a-zA-Z]/g.test(t)||""===t)})),e},g=()=>{a("add",{l7_proto_id:p.value,protocol_alias:_.value,category:c.value.id,custom_rules:d.value,is_edit_page:n.value}),b()},b=()=>{l.value.close()};return dn((()=>{})),t({show:e=>{_.value="",c.value=u.value[0],d.value="",n.value=!1,i.value=i18n("add_application"),null!=e&&(p.value=e.application_id,_.value=e.application,n.value=!0,i.value=`${i18n("edit_application")}: ${_.value}`,(e=>{let t=null;u.value.forEach((a=>{a.id==e.category_id&&(t=a)})),c.value=t,d.value=e.custom_rules?.replace(",","\n")})(e)),l.value.show(),v()},close:b,loadCategoryList:e=>{u.value=(e=>{let t=[];return e.forEach((e=>{t.push({id:e.cat_id,label:e.name,app_list:e.app_list})})),t=t.sort(((e,t)=>null==e||null==e.label?-1:null==t||null==t.label?1:e.label.toString().localeCompare(t.label.toString()))),t})(e)}}),(e,t)=>(Ps(),Ls(np,{onShowed:t[4]||(t[4]=e=>{}),ref_key:"modal_id",ref:l},{title:ml((()=>[Ks(te(ya(i)),1)])),body:ml((()=>[wn(Vs("input",{class:"form-control",type:"text","onUpdate:modelValue":t[0]||(t[0]=e=>p.value=e),spellcheck:"false",hidden:""},null,512),[[Mi,p.value]]),0==n.value?(Ps(),js("div",tE,[Vs("label",aE,[Vs("b",null,te(s("app_name")),1)]),Vs("div",lE,[wn(Vs("input",{class:"form-control",type:"text","onUpdate:modelValue":t[1]||(t[1]=e=>_.value=e),onInput:v,spellcheck:"false"},null,544),[[Mi,_.value]])])])):(Ps(),js("div",nE,[Vs("label",sE,[Vs("b",null,te(s("category")),1)]),Vs("div",oE,[Hs(l_,{selected_option:c.value,"onUpdate:selected_option":t[2]||(t[2]=e=>c.value=e),options:u.value},null,8,["selected_option","options"])])])),Vs("div",iE,[Vs("label",rE,[Vs("b",null,te(s("category_custom_rule")),1)]),Vs("div",cE,[wn(Vs("textarea",{class:"form-control",onInput:v,placeholder:r.value,rows:"6","onUpdate:modelValue":t[3]||(t[3]=e=>d.value=e),spellcheck:"false"},null,40,uE),[[Mi,d.value]])])])])),footer:ml((()=>[Hs(pv,{note_list:f}),0==n.value?(Ps(),js("button",{key:0,type:"button",onClick:g,class:"btn btn-primary",disabled:o.value},te(s("add")),9,dE)):(Ps(),js("button",{key:1,type:"button",onClick:g,class:"btn btn-primary",disabled:o.value},te(s("apply")),9,_E))])),_:1},512))},__file:"http_src/vue/modal-add-application.vue"},fE={__name:"modal-delete-application",emits:["remove"],setup(e,{expose:t,emit:a}){const l=va(null),n=e=>i18n(e),s=va(null);let o=va(i18n("custom_categories.delete_app"));const i=i18n("custom_categories.delete_app_confirm"),r=()=>{a("remove",{protocol_alias:s.value}),c()},c=()=>{l.value.close()};return t({show:e=>{null!=e&&(s.value=e.application,o.value=`${i18n("custom_categories.delete_app")}: ${s.value}`),l.value.show()},close:c}),(e,t)=>(Ps(),Ls(np,{ref_key:"modal_id",ref:l},{title:ml((()=>[Ks(te(ya(o)),1)])),body:ml((()=>[Ks(te(ya(i)),1)])),footer:ml((()=>[Vs("button",{type:"button",onClick:r,class:"btn btn-primary"},te(n("delete")),1)])),default:ml((()=>[wn(Vs("input",{class:"form-control",type:"text","onUpdate:modelValue":t[0]||(t[0]=e=>s.value=e),spellcheck:"false",hidden:""},null,512),[[Mi,s.value]])])),_:1},512))},__file:"http_src/vue/modal-delete-application.vue"};const vE=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1);var mE={__name:"page-edit-applications",props:{page_csrf:String,ifid:String,has_protos_file:Boolean},setup(e){const t=e,a=va(null),l=va(null),n=va(null),s=va({}),o=va([]),i=va(null),r=va(!0);let c="";const u=`${http_prefix}/lua/rest/v2/get/l7/category/consts.lua`,d=`${http_prefix}/lua/rest/v2/edit/application/application.lua`,_=`${http_prefix}/lua/rest/v2/delete/application/application.lua`,p=e=>i18n(e),f=async e=>{const a={csrf:t.page_csrf,ifid:t.ifid},l=NtopUtils.buildURL(_,{...a,...e});await $.get(l,(function(e,t){h(i18n("custom_categories.succesfully_removed"))})),g()},v=async e=>{const a=e.is_edit_page;e.is_edit_page=null;const l={csrf:t.page_csrf,ifid:t.ifid},n=NtopUtils.buildURL(d,{...l,...e});await $.get(n,(function(e,t){"success"==t&&h(a?i18n("custom_categories.succesfully_edited"):i18n("custom_categories.succesfully_added"))})),g()},m=e=>{n.value.show(e)},h=e=>{c=e,r.value=!1,setTimeout((()=>{r.value=!0,g()}),4e3)},g=()=>{a.value.reload()};dn((async()=>{!function(){const e=[];t.has_protos_file&&e.push({text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){m()}});e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(){g()}});let a={table_buttons:e,data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/ntopng/applications.lua`,{ifid:t.ifid}),enable_search:!0,table_config:{serverSide:!1,order:[[0,"asc"]]}},n=[{columnName:i18n("application"),name:"application",data:"application",className:"text-nowrap",responsivePriority:1},{columnName:i18n("category"),name:"category",data:"category",className:"text-nowrap",responsivePriority:1,render:function(e,t,a){return e}},{columnName:i18n("custom_categories.custom_hosts"),name:"custom_rules",data:"custom_rules",className:"text-nowrap",responsivePriority:2},{visible:!1,name:"application_hosts",data:"application_hosts"},{visible:!1,name:"application_id",data:"application_id"},{visible:!1,name:"category_id",data:"category_id"},{columnName:p("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return function(e){let t={handlerId:"edit_rule",onClick:()=>{m(e)}};const a=[{class:"pointer",handler:t,icon:"fa-edit",title:i18n("edit")}];if(e.is_custom){let t={handlerId:"delete_rule",onClick:()=>{var t;t=e,l.value.show(t)}};a.push({class:"pointer",handler:t,icon:"fa-trash",title:i18n("delete")})}return DataTableUtils.createActionButtons(a)}(a)}}],o=ntopng_utility.clone(a);o.columns_config=n,s.value=o}()})),_n((async()=>{await(async()=>{await $.get(u,(function(e,t){o.value=e.rsp})),n.value.loadCategoryList(o.value)})();const e=ntopng_url_manager.get_url_entry("application");e&&(e=>{a.value.search_value(e)})(e)})),mn((async()=>{a.value.destroy_table()}));return(t,u)=>(Ps(),js(Ss,null,[vE,wn(Vs("div",{ref_key:"update_message",ref:i,class:"alert alert-info"},te(ya(c)),513),[[Yi,!r.value]]),Hs(pE,{ref_key:"modal_add_application",ref:n,category_list:o.value,page_csrf:e.page_csrf,ifid:e.ifid,onAdd:v},null,8,["category_list","page_csrf","ifid"]),Hs(fE,{ref_key:"modal_delete_application",ref:l,onRemove:f},null,512),Hs(xw,{ref_key:"applications_table",ref:a,table_buttons:s.value.table_buttons,columns_config:s.value.columns_config,data_url:s.value.data_url,enable_search:s.value.enable_search,table_config:s.value.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])],64))},__file:"http_src/vue/page-edit-applications.vue"};const hE={class:"row"},gE={class:"col-12"},bE={class:"card card-shadow"},yE={class:"card-body"},wE={key:0,class:"alert alert-danger",role:"alert",id:"error-alert"},xE={key:2,class:"alert alert-info alert-dismissable"},kE=Vs("span",{class:"spinner-border spinner-border-sm text-info"},null,-1),$E=["innerHTML"],SE=["innerHTML"];var NE={__name:"page-network-discovery",props:{ifid:String},setup(e){const t=e,a=va(!1),l=i18n("map_page.fetch_error"),n=va(!1),s=va(null),o=va({}),i=va(null),r=va(""),c=i18n("discover.network_discovery_not_enabled"),u=va(!1),d=i18n("discover.ghost_icon_descr"),_=i18n("discover.too_many_devices_descr"),p=va(!1);let f;const v=[i18n("discover.discovery_running"),i18n("discover.protocols_note")],m=`${http_prefix}/lua/get_discover_progress.lua`,h=`${http_prefix}/lua/rest/v2/get/network/discovery/discover.lua`,g=`${http_prefix}/lua/rest/v2/get/network/discovery/run_discovery.lua`,b=async function(){u.value=!1,await $.get(NtopUtils.buildURL(m,{ifid:t.ifid}),(function(e,t){1==e.rsp.discovery_requested?(n.value=!0,""!=e.rsp.progress&&(i.value=e.rsp.progress)):(n.value=!1,i.value="",clearInterval(f)),(e=>{1==e.ghost_found&&0==p.value&&(v.unshift(d),p.value=!0),1==e.too_many_devices_message&&0==_.value&&(v.unshift(_),_.value=!0),0==e.ghost_found&&0==p.value&&(v.shift(),p.value=!1),0==e.too_many_devices_message&&1==_.value&&(v.shift(),_.value=!1),r.value=e.last_network_discovery})(e.rsp)}))};return _n((()=>{f=setInterval(b,3e3)})),dn((async()=>{!function(){let e={table_buttons:[{text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(){s.value.reload()}},{text:i18n("discover.start_discovery")+' <i class="fa-solid fa-play"></i>',action:function(){u.value=!1,$.get(NtopUtils.buildURL(g,{ifid:t.ifid}),(function(e){})),f=setInterval(b,1e3)}}],data_url:NtopUtils.buildURL(h,{ifid:t.ifid}),enable_search:!0,table_config:{serverSide:!1,order:[[0,"asc"]]}},a=[{columnName:i18n("ip_address"),name:"ip",data:"ip",className:"text-nowrap",responsivePriority:1},{columnName:i18n("name"),name:"name",data:"name",className:"text-nowrap text-center",responsivePriority:1},{columnName:i18n("mac_stats.manufacturer"),name:"manufacturer",data:"manufacturer",className:"text-nowrap",responsivePriority:2},{columnName:i18n("mac_address"),name:"mac_address",data:"mac_address",className:"text-nowrap",responsivePriority:2},{columnName:i18n("os"),name:"os",data:"os",className:"text-nowrap text-center",responsivePriority:2},{columnName:i18n("info"),name:"info",data:"info",className:"text-nowrap",responsivePriority:2},{columnName:i18n("device"),name:"device",data:"device",className:"text-nowrap",responsivePriority:2}],l=ntopng_utility.clone(e);l.columns_config=a,o.value=l}()})),mn((async()=>{s.value.destroy_table()})),(e,t)=>(Ps(),js("div",hE,[Vs("div",gE,[Vs("div",bE,[u.value?(Ps(),Ls(yf,{key:0})):Ys("v-if",!0),Vs("div",yE,[a.value?(Ps(),js("div",wE,te(ya(l)),1)):Ys("v-if",!0),n.value?(Ps(),js("div",xE,[kE,Ks(" "+te(ya(c))+" ",1),Vs("span",{innerHTML:i.value},null,8,$E)])):(Ps(),Ls(xw,{key:1,ref_key:"network_discovery_table",ref:s,table_buttons:o.value.table_buttons,columns_config:o.value.columns_config,data_url:o.value.data_url,enable_search:o.value.enable_search,table_config:o.value.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])),Hs(pv,{note_list:v}),Ys(" Adding Extra Message "),Vs("div",{class:"p-1",innerHTML:r.value},null,8,SE)])])])]))},__file:"http_src/vue/page-network-discovery.vue"};const CE={class:"row"},AE={class:"col-md-12 col-lg-12"},EE={class:"card card-shadow"},TE={class:"card-body"},PE=Vs("div",{class:"d-flex align-items-center"},null,-1);var UE={__name:"page-manage-configurations-backup",props:{date_format:String},setup(e){const t=e,a=e=>i18n(e),l=va(null),n=`${http_prefix}/lua/rest/v2/get/system/configurations/list_available_backups.lua`,s=va({}),o=va(!1);dn((async()=>{await async function(){const e=[];e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,a,n){o.value=!0,l.value.reload(),o.value=!1}});let i={table_buttons:e,data_url:`${n}`,enable_search:!0,id:"manage_configurations_backup",table_config:{serverSide:!0,responsive:!1,scrollX:!0,columnDefs:[{type:"file-size",targets:0}]}},r=[];r.push({columnName:a("backup_date"),orderable:!0,targets:0,name:"epoch",data:"epoch",className:"text-left",responsivePriority:1,render:(e,a,l)=>function(e,a){const l=1e3*e;let n="HH:MM:SS";return n="little_endian"==t.date_format?"DD/MM/YYYY "+n:"middle_endian"==t.date_format?"MM/DD/YYYY "+n:"YYYY/MM/DD "+n,ntopng_utility.from_utc_to_server_date_format(l,n)}(e)},{columnName:a("actions"),orderable:!1,width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return function(e){let t={handlerId:"download_backup_handler",onClick:()=>{var t;t=e,window.open(`${http_prefix}/lua/rest/v2/get/system/configurations/download_backup.lua?epoch=${t.epoch}&download=true`)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:t,icon:"fas fa-download fa-lg",title:i18n("download")}])}(a)}}),i.columns_config=r,s.value=i}()}));return(e,t)=>(Ps(),js("div",CE,[Vs("div",AE,[Vs("div",EE,[Vs("div",TE,[o.value?(Ps(),Ls(yf,{key:0})):Ys("v-if",!0),Vs("div",{id:"manage_configurations_backup",class:K([o.value?"ntopng-gray-out":""])},[(Ps(),Ls(xw,{ref_key:"table_manage_configurations_backup",ref:l,id:s.value.id,key:s.value.data_url,table_buttons:s.value.table_buttons,columns_config:s.value.columns_config,data_url:s.value.data_url,table_config:s.value.table_config},{menu:ml((()=>[PE])),_:1},8,["id","table_buttons","columns_config","data_url","table_config"]))],2)])])])]))},__file:"http_src/vue/page-manage-configurations-backup.vue"};const IE={class:"form-group ms-2 me-2 mt-3 row"},OE={class:"col-form-label col-sm-2"},ME={class:"col-10"},jE={key:0,class:"form-group ms-2 me-2 mt-3 row"},LE={class:"col-form-label col-sm-2"},FE={class:"col-10"},RE={class:"form-group ms-2 me-2 mt-3 row"},DE={class:"col-form-label col-sm-2"},zE={class:"col-10"},qE={class:"form-group ms-2 me-2 mt-3 row"},BE={class:"col-form-label col-sm-2"},VE={class:"col-10"},HE={class:"form-group ms-2 me-2 mt-3 row",style:{"margin-top":"3px"}},GE={class:"col-form-label col-sm-2"},WE={class:"col-sm-3"},KE={class:"btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},JE=["value","id"],YE=["id","for"],ZE=["value","id"],XE=["id","for"],QE=["value","id"],eT=["id","for"],tT={key:0,class:"col-sm-2 btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},aT=["value","id"],lT=["id","for"],nT={key:1,class:"col-sm-2 btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},sT=["value","id"],oT=["id","for"],iT={key:1,class:"message alert alert-warning mt-3"};var rT={__name:"modal-add-snmp-device-rules",props:{ifid_list:Array,snmp_devices_list:Array,snmp_metric_list:Array,frequency_list:Array,init_func:Function,page_csrf:String},emits:["add","edit"],setup(e,{expose:t,emit:l}){const n=e;va(""),va("");const s=va(null),o=e=>i18n(e);va(null),va(null);const i=va([]),r=va([]);let c=va([]),u=va(!0);const d=`${http_prefix}/lua/pro/rest/v2/get/snmp/device/available_interfaces.lua`,_=va([]),p=va(null),f=va(null),v=va({}),m=va({}),h=va({}),g=va({}),b=va({}),y=va(!0),w=va({}),x=va(!0),k=va("snmp"),S=va(!1),N=va(null);let C=va([]),A=o("if_stats_config.add_host_rules_title");const E=[o("if_stats_config.note_snmp_device_rules.note_1"),o("if_stats_config.note_snmp_device_rules.note_2"),o("if_stats_config.note_snmp_device_rules.note_3"),o("if_stats_config.note_3"),o("if_stats_config.note_4")],T=[o("if_stats_config.note_5")],P=va([{title:o("volume"),label:o("volume"),id:"volume",active:!0},{title:o("throughput"),label:o("throughput"),id:"throughput",active:!1},{title:o("percentage"),label:o("percentage"),id:"percentage",active:!1},{title:o("packets"),label:o("packets"),id:"packets",active:!1}]),U=va([{title:o("kb"),label:o("kb"),id:"kb",value:1024,active:!1},{title:o("mb"),label:o("mb"),id:"mb",value:1048576,active:!1},{title:o("gb"),label:o("gb"),id:"gb",value:1073741824,active:!0,default_active:!0}]),I=va([{title:o("kbps"),label:o("kbps"),id:"kbps",value:1e3,active:!1},{title:o("mbps"),label:o("mbps"),id:"mbps",value:1e6,active:!1},{title:o("gbps"),label:o("gbps"),id:"gbps",value:1e9,active:!0,default_active:!0}]),O=va([{title:"+",label:">",id:"plus",value:1,active:!1,absolute_value:!0},{title:"-",label:"<",id:"minus",value:-1,active:!0,default_active:!0}]),M=va([{title:"+",label:">",id:"plus",value:1,active:!0,absolute_value:!0}]),j=[{title:"+",label:"%",id:"plus",value:1,active:!0}],L=va(null),F=va(null),R={csrf:n.page_csrf};function D(e){e.forEach((e=>e.active=1==e.default_active))}const z=e=>{const t=e.target.id;O.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1}))},q=e=>{const t=e.target.id;"throughput"==w.value.id?I.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):"volume"==w.value.id?U.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):"percentage"==w.value.id?j.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):w.value.id};async function B(e){const t=a.buildURL(d+"?host="+m.value.label_to_insert,R);let l=[];await $.get(t,(function(e,t){l=e.rsp}));let n=[];l.forEach((e=>{null!=e.name&&""!=e.name&&e.name!=e.id?n.push({label:e.name+" ("+e.id+")",id:e.id,name:e.name}):n.push({label:e.id,id:e.id,name:e.id})})),n.push({label:"*",id:"*",name:"*"}),n.sort((function(e,t){return e.label.toLowerCase()>t.label.toLowerCase()?1:e.label.toLowerCase()<t.label.toLowerCase()?-1:0})),null!=e&&n.forEach((t=>{t.id==e&&(h.value=t)})),c.value=n,"all"==m.value.label_to_insert?u.value=!1:u.value=!0}function V(){let e=[];"packets"==g.value.id||"usage"==g.value.id?P.value.forEach((t=>{"percentage"!=t.id?t.active=!1:(t.active=!0,e.push(t),w.value=t)})):"errors"==g.value.id?P.value.forEach((t=>{"packets"!=t.id?t.active=!1:(t.active=!0,e.push(t),w.value=t)})):P.value.forEach((t=>{"packets"==t.id?t.active=!1:e.push(t)})),C.value=e}const H=e=>{k.value="snmp",L.value;const t=b.value.id,a=g.value.id,n=g.value.label,s=m.value.label_to_insert,o=m.value.label,i=null==h.value||0===Object.entries(h.value).length?"*":h.value.id,r=null==h.value||0===Object.entries(h.value).length?"*":h.value.label;let c,u,d,_,p,f=w.value.id;!1===x.value&&(f="",tmp_extra_metric="",_=F.value.value),"throughput"==f?(O.value.forEach((e=>{e.active&&(d=e.value)})),p=parseInt(d),I.value.forEach((e=>{e.active&&(c=e.value,u=e.label)})),_=c*parseInt(F.value.value)/8):"volume"==f?(O.value.forEach((e=>{e.active&&(d=e.value)})),p=parseInt(d),U.value.forEach((e=>{e.active&&(c=e.value,u=e.label)})),_=c*parseInt(F.value.value)):"percentage"==f?(O.value.forEach((e=>{e.active&&(d=e.value)})),p=parseInt(d),_=p*parseInt(F.value.value),u="%"):(p=1,_=parseInt(F.value.value));let v="add";1==e&&(v="edit"),l(v,{frequency:t,metric:a,metric_label:n,threshold:_,metric_type:f,snmp_device:s,snmp_device_label:o,snmp_device_port:i,snmp_device_port_label:r,rule_threshold_sign:p,snmp_threshold_value:F.value.value,snmp_threshold_unit:u,snmp_metric_type_label:w.value.title}),W()},G=()=>{H(!0)},W=()=>{s.value.close()};return dn((()=>{P.value.forEach((e=>{e.active&&(w.value=e)}))})),t({show:e=>{null!=e?(e=>{null!=e&&(S.value=!0,A=o("if_stats_config.edit_host_rules_title"),y.value=!1,r.value.forEach((t=>{t.label_to_insert==e.device&&(m.value=t)})),O.value.forEach((t=>{t.active=t.value==e.threshold_sign})),i.value.forEach((t=>{t.id==e.metric&&(g.value=t)})),"volume"==e.metric_type?U.value.forEach((t=>{if(e.threshold%t.value==0){let a=e.threshold/t.value;a<1024?(t.active=!0,F.value.value=0==a?1:a):t.active=!1}else t.active=!1})):"throughput"==e.metric_type?(e.threshold=8*e.threshold,I.value.forEach((t=>{if(e.threshold%t.value==0){let a=e.threshold/t.value;a<1e3?(t.active=!0,F.value.value=0==a?1:a):t.active=!1}else t.active=!1}))):F.value.value=e.threshold*e.threshold_sign,V(),C.value.forEach((t=>{t.id==e.metric_type?(w.value=t,t.active=!0):t.active=!1})),k.value=e.rule_type,r.value.forEach((t=>{t.label==e.device&&(m.value=t)})),_.value.forEach((t=>{t.id==e.frequency&&(b.value=t)})),B(e.device_port))})(e):async function(){L.value="",v.value=i.value[0],m.value=null,m.value=r.value[0],B(),g.value=i.value[0],V(),b.value=_.value[0],w.value=P.value[0],P.value.forEach((e=>e.active=!1)),P.value[0].active=!0,D(U.value),D(I.value),D(O.value),k.value="snmp",y.value=!0,u.value=!1,F.value.value=1,S.value=!1,A=o("if_stats_config.add_host_rules_title")}(),s.value.show()},close:W,metricsLoaded:(e,t,a)=>{r.value=function(e){let t=[];return e.data.forEach((e=>{null!=e.column_name&&""!=e.column_name&&"all"!=e.column_name?t.push({label:e.column_name+" ("+e.column_key+")",label_to_insert:e.column_key}):"all"==e.column_name?t.push({label:e.column_key,label_to_insert:e.column_name}):t.push({label:e.column_key,label_to_insert:e.column_key})})),t.sort((function(e,t){return e.label.toLowerCase()>t.label.toLowerCase()?1:e.label.toLowerCase()<t.label.toLowerCase()?-1:0})),t}(e),i.value=t,_.value=n.frequency_list,b.value=_.value[0],v.value=i.value[0],N.value=a}}),(e,t)=>(Ps(),Ls(np,{onShowed:t[7]||(t[7]=e=>{}),ref_key:"modal_id",ref:s},{title:ml((()=>[Ks(te(ya(A)),1)])),body:ml((()=>[Ys(" Target information, here an IP is put "),Vs("div",IE,[Vs("label",OE,[Vs("b",null,te(o("if_stats_config.snmp_device")),1)]),Vs("div",ME,[Hs(l_,{selected_option:m.value,"onUpdate:selected_option":t[0]||(t[0]=e=>m.value=e),onSelect_option:t[1]||(t[1]=e=>B()),options:r.value},null,8,["selected_option","options"])])]),1==ya(u)?(Ps(),js("div",jE,[Vs("label",LE,[Vs("b",null,te(o("if_stats_config.snmp_interface")),1)]),Vs("div",FE,[Hs(l_,{selected_option:h.value,"onUpdate:selected_option":t[2]||(t[2]=e=>h.value=e),options:ya(c)},null,8,["selected_option","options"])])])):Ys("v-if",!0),Vs("div",RE,[Vs("label",DE,[Vs("b",null,te(o("if_stats_config.metric")),1)]),Vs("div",zE,[Hs(l_,{selected_option:g.value,"onUpdate:selected_option":t[3]||(t[3]=e=>g.value=e),onSelect_option:t[4]||(t[4]=e=>V()),options:i.value},null,8,["selected_option","options"])])]),Ys(" Frequency information, a frequency of 1 day, 5 minute or 1 hour for example "),Vs("div",qE,[Vs("label",BE,[Vs("b",null,te(o("if_stats_config.frequency")),1)]),Vs("div",VE,[Hs(l_,{selected_option:b.value,"onUpdate:selected_option":t[5]||(t[5]=e=>b.value=e),options:_.value},null,8,["selected_option","options"])])]),Ys(" Threshold information, maximum amount of bytes "),Vs("div",HE,[Vs("label",GE,[Vs("b",null,te(o("if_stats_config.threshold")),1)]),x.value?(Ps(),js(Ss,{key:0},[Vs("div",WE,[Hs(l_,{selected_option:w.value,"onUpdate:selected_option":t[6]||(t[6]=e=>w.value=e),options:ya(C)},null,8,["selected_option","options"])]),Vs("div",{class:K(["col-3",["throughput"==w.value.id?"p-0":""]])},[Vs("div",KE,["throughput"==w.value.id&&"packets"!=w.value.id?(Ps(!0),js(Ss,{key:0},En(I.value,(e=>(Ps(),js(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:p,name:"threshold_measure"},null,8,JE),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:q,for:e.id},te(e.label),11,YE)],64)))),256)):Ys("v-if",!0),"percentage"==w.value.id&&"packets"!=w.value.id?(Ps(),js(Ss,{key:1},En(j,(e=>(Ps(),js(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:p,name:"threshold_measure"},null,8,ZE),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:q,for:e.id},te(e.label),11,XE)],64)))),64)):Ys("v-if",!0),"volume"==w.value.id&&"packets"!=w.value.id?(Ps(!0),js(Ss,{key:2},En(U.value,(e=>(Ps(),js(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:p,name:"threshold_measure"},null,8,QE),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:q,for:e.id},te(e.label),11,eT)],64)))),256)):Ys("v-if",!0)])],2),"packets"!=w.value.id?(Ps(),js("div",tT,[(Ps(!0),js(Ss,null,En(O.value,(e=>(Ps(),js(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_sign",ref:f,name:"threshold_sign"},null,8,aT),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:z,for:e.id},te(e.label),11,lT)],64)))),256))])):(Ps(),js("div",nT,[(Ps(!0),js(Ss,null,En(M.value,(e=>(Ps(),js(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_sign",ref:f,name:"threshold_sign"},null,8,sT),Vs("label",{class:K(["btn",[e.absolute_value?"btn-primary active":"btn-secondary"]]),id:e.id,for:e.id},te(e.label),11,oT)],64)))),256))]))],64)):Ys("v-if",!0),Vs("div",{class:K([x.value?"col-sm-2":"col-sm-8"])},["percentage"==w.value.id?(Ps(),js("input",{key:0,value:"1",ref_key:"threshold",ref:F,type:"number",name:"threshold",class:"form-control",max:"100",min:"1",required:""},null,512)):(Ps(),js("input",{key:1,value:"1",ref_key:"threshold",ref:F,type:"number",name:"threshold",class:"form-control",max:"1023",min:"1",required:""},null,512))],2)]),"usage"!=g.value.id&&"percentage"==w.value.id?(Ps(),js("div",iT,te(o("show_alerts.host_rules_percentage")),1)):Ys("v-if",!0)])),footer:ml((()=>[Hs(pv,{note_list:E,add_sub_notes:!0,sub_note_list:T}),0==S.value?(Ps(),js("button",{key:0,type:"button",onClick:H,class:"btn btn-primary"},te(o("add")),1)):(Ps(),js("button",{key:1,type:"button",onClick:G,class:"btn btn-primary"},te(o("apply")),1))])),_:1},512))},__file:"http_src/vue/modal-add-snmp-device-rules.vue"};const cT={class:"row"},uT={class:"col-md-12 col-lg-12"},dT={class:"card"},_T=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),pT={class:"card-body"},fT={class:"mb-4"},vT={id:"host_rules"},mT={class:"card-footer"};var hT={__name:"page-snmp-device-rules",props:{page_csrf:String,ifid:String},setup(e){const t=e,l=va(null),n=va(null),s=va(null),o=e=>i18n(e),i=va({}),r=va({}),c=`${http_prefix}/lua/pro/rest/v2/get/snmp/metric/rule_metrics.lua`,u=`${http_prefix}/lua/pro/enterprise/get_snmp_devices_list.lua`,d=`${http_prefix}/lua/pro/rest/v2/get/snmp/device/rules.lua`,_=`${http_prefix}/lua/pro/rest/v2/add/snmp/device/rule.lua`,p=`${http_prefix}/lua/pro/rest/v2/delete/snmp/device/rule.lua`,f=[o("if_stats_config.generic_notes_1"),o("if_stats_config.generic_notes_2"),o("if_stats_config.generic_notes_3")],v={ifid:t.ifid,csrf:t.page_csrf};let m={},h=o("if_stats_config.delete_host_rules_title");o("if_stats_config.edit_local_network_rules");let g=o("if_stats_config.delete_host_rules_description"),b=[],y=[];const w=[{title:i18n("show_alerts.5_min"),label:i18n("show_alerts.5_min"),id:"5min"},{title:i18n("show_alerts.hourly"),label:i18n("show_alerts.hourly"),id:"hour"},{title:i18n("show_alerts.daily"),label:i18n("show_alerts.daily"),id:"day"}];async function x(e){await N(),await C(e)}const k=function(){const e=r.value;return r.value=null,e},S=function(){l.value.reload()},N=async function(){const e=i.value,t=a.buildURL(p,{...v,rule_id:e.id,rule_type:e.rule_type});await $.post(t,(function(e,t){S()}))},C=async function(e){const t=a.buildURL(_,{...v,...e});await $.post(t,(function(e,t){S()}))},A=function(e){let t={handlerId:"delete_host",onClick:()=>{var t;t=e,i.value=t,n.value.show()}},a={handlerId:"edit_rule",onClick:()=>{var t;t=e,r.value=t,i.value=t,s.value.show(t)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:a,icon:"fa-edit",title:i18n("edit")},{class:"pointer",handler:t,icon:"fa-trash",title:i18n("delete")}])},E=function(){const e=[];e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(){S()}},{text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){s.value.show()}});const t=[{columnName:o("actions"),targets:0,width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return A(a)}},{columnName:o("id"),visible:!1,targets:1,name:"id",data:"id",className:"text-nowrap",responsivePriority:1},{columnName:o("if_stats_config.snmp_device"),targets:2,width:"20",name:"device",data:"device",className:"text-nowrap",responsivePriority:1,render:function(e,t,a){return function(e,t){return t.device_label}(0,a)}},{columnName:o("if_stats_config.snmp_interface"),targets:3,width:"20",name:"interface",data:"interface",className:"text-center",responsivePriority:1,render:function(e,t,a){return function(e,t){return t.device_port_label}(0,a)}},{columnName:o("if_stats_config.metric"),targets:4,width:"10",name:"metric",data:"metric",className:"text-center",responsivePriority:1,render:function(e,t,a){return function(e,t){let a=e;return t.metric_label&&t.metric_label!=e&&""!=t.metric_label&&(a=t.metric_label),a}(e,a)}},{columnName:o("if_stats_config.frequency"),targets:5,width:"10",name:"frequency",data:"frequency",className:"text-center",responsivePriority:1,render:function(e){return function(e){let t="";return w.forEach((a=>{e==a.id&&(t=a.title)})),t}(e)}},{columnName:o("if_stats_config.threshold"),targets:6,width:"10",name:"threshold",data:"threshold",className:"text-end",responsivePriority:1,render:function(e,t,l){return function(e,t){let l=parseInt(e),n="> ";return t.threshold_sign&&"-1"==t.threshold_sign&&(n="< "),t.metric_type&&"throughput"==t.metric_type?l=n+a.bitsToSize_no_comma(8*e):t.metric_type&&"volume"==t.metric_type?l=n+a.bytesToSize(e):t.metric_type&&"percentage"==t.metric_type?(e<0&&(e*=-1),l=n+a.fpercent(e)):l=n+e,l}(e,l)}},{columnName:o("metric_type"),visible:!1,targets:7,name:"metric_type",data:"metric_type",className:"text-nowrap",responsivePriority:1}],l={table_buttons:e,data_url:a.buildURL(d,v),enable_search:!0,columns_config:t,table_config:{scrollX:!1,serverSide:!1,order:[[1,"desc"]],columnDefs:t}};m=l};return dn((async()=>{E(),await async function(){const e=a.buildURL(c,v);await $.get(e,(function(e,t){b=e.rsp}))}(),await async function(){v.verbose=!0;const e=a.buildURL(u,v);await $.get(e,(function(e,t){y=e.rsp})),y.data.push({column_key:"*",column_name:"all"})}(),s.value.metricsLoaded(y,b,t.page_csrf)})),mn((()=>{l.value.destroy_table()})),(e,t)=>(Ps(),js("div",cT,[Vs("div",uT,[Vs("div",dT,[_T,Vs("div",pT,[Vs("div",fT,[Vs("h4",null,te(o("if_stats_config.snmp_rules")),1)]),Vs("div",vT,[Hs(lx,{ref_key:"modal_delete_confirm",ref:n,title:ya(h),body:ya(g),onDelete:N},null,8,["title","body"]),Hs(rT,{ref_key:"modal_add_snmp_device_rule",ref:s,frequency_list:w,init_func:k,onAdd:C,onEdit:x},null,512),Hs(xw,{ref_key:"table_host_rules",ref:l,table_buttons:ya(m).table_buttons,columns_config:ya(m).columns_config,data_url:ya(m).data_url,enable_search:ya(m).enable_search,table_config:ya(m).table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])]),Vs("div",mT,[Hs(pv,{note_list:f})])])])]))},__file:"http_src/vue/page-snmp-device-rules.vue"},gT={__name:"page-snmp-devices-interfaces-similarity",props:{context:Object},setup(e){const t=e,a=e=>i18n(e),l=[a("snmp.snmp_similarity_note"),a("snmp.snmp_similarity_time_note")];return _n((async()=>{Wd.build_table(http_prefix,"snmp_similarity_data")})),console.log(t.context),(e,t)=>(Ps(),js(Ss,null,[Ks(" Ciao Mondo "),Hs(pv,{note_list:l})],64))},__file:"http_src/vue/page-snmp-devices-interfaces-similarity.vue"};const bT={class:"row"},yT={class:"col-md-12 col-lg-12"},wT={class:"card card-shadow"},xT={class:"card-body"},kT={class:"d-flex mb-3"},$T={class:"d-flex align-items-center ml-2 mb-2"},ST={class:"d-flex no-wrap",style:{"text-align":"left","margin-right":"1rem","min-width":"25rem"}},NT={class:"my-auto me-1"},CT={class:"d-flex align-items-center mb-2"},AT={class:"d-flex no-wrap",style:{"text-align":"left","margin-right":"1rem","min-width":"25rem"}},ET={class:"my-auto me-1"},TT={class:"d-flex align-items-center mb-2"},PT={class:"d-flex no-wrap",style:{"text-align":"left","margin-right":"1rem","min-width":"25rem"}},UT={class:"my-auto me-1"},IT=["title"],OT=["onClick","title"];var MT={__name:"page-hosts-ports-analysis",props:{is_ntop_enterprise_m:Boolean,csrf:String,vlans:Array,ifid:Number,aggregation_criteria:String,page:Number,sort:String,order:String,start:Number,length:Number,host:String},setup(e){const t=e,l=va([]),n=va([]);va({csrf:t.csrf,ifid:t.ifid});const s=e=>i18n(e),o=[{label:s("tcp"),value:6,param:"tcp",table_id:"tcp_ports_analysis",enterprise_m:!1},{label:s("udp"),value:17,param:"udp",table_id:"udp_ports_analysis",enterprise_m:!1}],i=va(o[0]),r=va("server_ports_analysis"),c=va({}),u=va({}),d=va();let _=va([]),p=va([]);const f=function(){if(t.is_ntop_enterprise_m)return va(o);{let e=[];return o.forEach((t=>{t.enterprise_m||e.push(t)})),va(e)}}();_n((async()=>{let e=x.get_url_entry("port"),t=x.get_url_entry("protocol");const a=x.get_url_entry("application");null!=e&&0!=e.localeCompare("")&&null!=t&&0!=t.localeCompare("")&&null!=a&&0!=a.localeCompare("")?(e=Number(e),t=Number(t),i.value=o.find((e=>e.value==t)),await A(!1,a,e)):(i.value=o[0],await A(!1)),async function(e){l.value=await w("overview"),C()}(),d.value.refresh_table()}));const v=()=>x.get_url_object();async function m(){await A(!1),d.value.refresh_table()}async function h(){await A(!0),d.value.refresh_table()}function g(){y(),d.value.refresh_table()}function y(){x.set_key_to_url("port",c.value.id)}async function w(e,t){let a=v(),l=x.obj_to_url_params(a);const n=`${http_prefix}/lua/pro/rest/v2/get/host/hosts_details_by_port_filters.lua?action=${e}&${l}`;return(await b.http_request(n)).map((t=>({id:t.action||t.name,label:t.label,title:t.tooltip,data_loaded:"overview"!=e,options:t.value,hidden:1==t.value.length})))}const k=(e,t)=>a=>{!async function(e,t){if(e.show_spinner=!0,await Ja(),0==e.data_loaded){let a=await w(e.id);e.options=a.find((t=>t.id==e.id)).options,await Ja(),n.value[t].load_menu()}e.show_spinner=!1}(e,t)};function $(e){let t={click_button_flows:S};null!=t[e.event_id]&&t[e.event_id](e)}function S(e){N(e.row.ip)}const N=function(e){let t={l4proto:i.value.value,server:e,port:c.value.id,vlan:x.get_url_entry("vlan_id")},a=x.obj_to_url_params(t);const l=`${http_prefix}/lua/flows_stats.lua?${a}`;x.go_to_url(`${l}`)};function C(){l.value.forEach(((e,t)=>{null==e.basic_label&&(e.basic_label=e.label);const a=x.get_url_entry(e.id);null!=a&&e.options.forEach((t=>{t.value.toString()===a&&(e.label=`${e.basic_label}: ${t.label||t.value}`)}))}))}async function A(e,t,a){x.set_key_to_url("protocol",i.value.value);const l=`${http_prefix}/lua/pro/rest/v2/get/host/server_ports.lua?protocol=`+i.value.value;let n=await b.http_request(l,null,null,!0),s=[];p.value=[],_.value=[],n.rsp.forEach((e=>{let t=e.l7_proto_name;s.push({label:`${e.srv_port}/${t} (${e.n_hosts})`,id:e.srv_port,application:t,application_id:e.proto_id,num_hosts:e.n_hosts,vlan_id:e.vlan_id})})),s.forEach((e=>{let t=e.application_id;p.value.find((e=>e.id==t))||p.value.push({label:e.application,id:e.application_id,value:t})})),p.value.sort(((e,t)=>{let a=e.label.toLowerCase(),l=t.label.toLowerCase();return a<l?-1:a>l?1:0})),e||(u.value=null==t?p.value[0]:p.value.find((e=>e.id==t))),x.set_key_to_url("application",u.value.id),s.forEach((e=>{e.application==u.value.label&&_.value.push({label:e.id+" ("+e.num_hosts+")",id:e.id,value:e.id,vlan_id:e.vlan_id,n_hosts:e.num_hosts})})),_.value.sort(((e,t)=>{let a=e.id,l=t.id;return a<l?-1:a>l?1:0})),c.value=null!=a?_.value.find((e=>e.id==a)):_.value[0],y()}const E=async e=>{let t={ip:(e,t)=>{if(void 0!==e)return T(e,t)},name:(e,t)=>{if(void 0!==e)return U(e,t)},mac:(e,t)=>{if(void 0!==e)return P(e)},tot_traffic:(e,t)=>{if(void 0!==e)return a.bytesToSize(e)}};return e.forEach((e=>{e.render_func=t[e.data_field]})),e},T=function(e,t){return null!=e?0!=t.vlan_id?`<a href="${http_prefix}/lua/flows_stats.lua?server=${e}&vlan=${t.vlan_id}&port=${c.value.id}">${e}@${t.vlan_id}</a>`:`<a href="${http_prefix}/lua/flows_stats.lua?server=${e}&port=${c.value.id}">${e}</a>`:e},P=function(e,t){return null!=e?`<a href="${http_prefix}/lua/mac_details.lua?host=${e}">${e}</a>`:e},U=function(e,t){return null!=e?0!=t.vlan_id?`<a href="${http_prefix}/lua/host_details.lua?host=${t.ip}&vlan=${t.vlan_id}">${e}</a>`:`<a href="${http_prefix}/lua/host_details.lua?host=${t.ip}">${e}</a>`:e};return(t,a)=>(Ps(),js("div",bT,[Vs("div",yT,[Vs("div",wT,[Vs("div",xT,[Vs("div",kT,[Vs("div",$T,[Vs("div",ST,[Vs("label",NT,te(s("protocol"))+": ",1),Hs(l_,{selected_option:i.value,"onUpdate:selected_option":a[0]||(a[0]=e=>i.value=e),options:ya(f),onSelect_option:m},null,8,["selected_option","options"])])]),Vs("div",CT,[Vs("div",AT,[Vs("label",ET,te(s("application"))+": ",1),Hs(l_,{selected_option:u.value,"onUpdate:selected_option":a[1]||(a[1]=e=>u.value=e),options:ya(p),onSelect_option:h},null,8,["selected_option","options"])])]),Vs("div",TT,[Vs("div",PT,[Vs("label",UT,te(s("db_search.tags.srv_port"))+": ",1),Hs(l_,{selected_option:c.value,"onUpdate:selected_option":a[2]||(a[2]=e=>c.value=e),options:ya(_),onSelect_option:g},null,8,["selected_option","options"])])])]),Vs("div",null,[Hs(iv,{ref_key:"table_server_ports_analysis",ref:d,csrf:e.csrf,table_id:r.value,f_map_columns:E,get_extra_params_obj:v,onCustom_event:$},{custom_header:ml((()=>[(Ps(!0),js(Ss,null,En(l.value,((e,t)=>(Ps(),Ls(Rd,{f_on_open:k(e,t),ref_for:!0,ref:e=>{n.value[t]=e},hidden:e.hidden},{title:ml((()=>[Hs(rv,{show:e.show_spinner,size:"1rem",class:"me-1"},null,8,["show"]),Vs("a",{class:"ntopng-truncate",title:e.title},te(e.label),9,IT)])),menu:ml((()=>[(Ps(!0),js(Ss,null,En(e.options,(e=>(Ps(),js("a",{style:{cursor:"pointer",display:"block"},onClick:t=>function(e,t){t.stopPropagation(),x.set_key_to_url(e.key,`${e.value}`),C(),d.value.refresh_table()}(e,t),class:"ntopng-truncate tag-filter",title:e.value},[null==e.count?(Ps(),js(Ss,{key:0},[Ks(te(e.label),1)],64)):(Ps(),js(Ss,{key:1},[Ks(te(e.label+" ("+e.count+")"),1)],64))],8,OT)))),256))])),_:2},1032,["f_on_open","hidden"])))),256))])),_:1},8,["csrf","table_id"])])])])])]))},__file:"http_src/vue/page-hosts-ports-analysis.vue"};const jT={class:"form-group ms-2 me-2 mt-3 row"},LT={class:"col-form-label col-sm-3"},FT={class:"col-7"},RT={key:0},DT={class:"form-group ms-2 me-2 mt-3 row"},zT={class:"col-form-label col-sm-3"},qT={class:"col-7"},BT=["placeholder"],VT={key:1},HT={class:"form-group ms-2 me-2 mt-3 row"},GT={class:"col-form-label col-sm-3"},WT={class:"col-7"},KT=["placeholder"],JT={key:2},YT={class:"form-group ms-2 me-2 mt-3 row"},ZT={class:"col-form-label col-sm-3"},XT={class:"switch col-1 mt-3"},QT={class:"form-group ms-2 me-2 mt-3 row"},eP={class:"col-form-label col-sm-3"},tP={class:"col-7"},aP=["disabled"];var lP={__name:"modal-nedge-add-repeater-config",props:{},emits:["edit","add"],setup(e,{expose:t,emit:a}){const l=e=>i18n(e),n=i18n("if_stats_config.multicast_ip_placeholder"),s=i18n("if_stats_config.port_placeholder"),o=va(null),i=va([]),r=va(null),c=va(null),u=va({value:"mdns",label:"MDNS"}),d=va(null),_=va(!1),p=va(!0),f=va(!0),v=va(!0),m=va(!0),h=()=>{let e=new RegExp(yp.get_data_pattern("ip"));v.value=!(e.test(r.value)||"*"===r.value),p.value=y()},g=()=>{m.value=c.value<1||c.value>65535,p.value=y()},y=()=>"custom"==u.value.value?f.value||v.value||m.value:f.value,w=va(""),x=[{label:l("nedge.page_repeater_config.modal_repeater_config.mdns"),value:"mdns",default:!0},{label:l("nedge.page_repeater_config.modal_repeater_config.custom"),value:"custom"}],k=va(0),$=va({}),S=`${http_prefix}/lua/rest/v2/get/nedge/interfaces.lua`;let N;const C=va([]),A=va([]),E=va(""),T=e=>{A.value=e,f.value=e.length<2,p.value=y()},P=e=>{i.value=e},U=e=>{i.value=i.value.filter((t=>t.label!=e.label))},I=va(!0);async function O(e){u.value=$.value,"custom"==u.value.value&&await j()}let M=!1;async function j(){if(1==M)return;null==N&&(N=b.http_request(S));let e=await N;C.value=e.filter((e=>"lan"==e.role)).map((e=>({label:e.label,value:e.ifname}))),M=!0}const L=()=>{let e=u.value.label,t=_.value,l={repeater_type:e};if("custom"==u.value.value){l={repeater_type:e,ip:r.value,port:c.value,keep_src_address:t}}let n="add";0==I.value&&(l.repeater_id=k.value,n="edit");let s=[],o=[];A.value.forEach((e=>{s.push(e.value),e.value==e.label||e.label.includes(e.value)?o.push(e.label):o.push(e.label+" ("+e.value+")")}));const i=s.join(","),d=o.join(",");l.interfaces=i,l.interface_details=d,a(n,l),F()},F=()=>{o.value.close()};return t({show:e=>{$.value={},r.value="",c.value="",i.value=[],m.value=!0,v.value=!0,f.value=!0,function(e){I.value=null==e,0==I.value?(m.value=!1,v.value=!1,f.value=!1,p.value=!1,w.value=l("nedge.page_rules_config.modal_rule_config.title_edit"),E.value=l("edit"),k.value=e.repeater_id,$.value=x.find((t=>t.label==e.type)),"custom"==$.value.value&&(r.value=e.ip,c.value=e.port),_.value=e.keep_src_address,O()):(w.value=l("nedge.page_rules_config.modal_rule_config.title_add"),E.value=l("add"),x.find((e=>1==e.default)));if(0==I.value){const t=e.interfaces.split(",");let a=[];t.forEach((e=>{""!=e&&null!=e&&a.push(C.value.find((t=>t.value==e)))})),i.value=a}}(e),o.value.show()},close:F}),_n((async()=>{await j()})),(e,t)=>(Ps(),Ls(np,{onShowed:t[6]||(t[6]=e=>{}),ref_key:"modal_id",ref:o},{title:ml((()=>[Ks(te(w.value),1)])),body:ml((()=>[Ys(" Repeater Type "),Vs("div",jT,[Vs("label",LT,[Vs("b",null,te(l("nedge.page_repeater_config.modal_repeater_config.repeater_type")),1)]),Vs("div",FT,[Hs(l_,{selected_option:$.value,"onUpdate:selected_option":t[0]||(t[0]=e=>$.value=e),onSelect_option:t[1]||(t[1]=e=>O()),options:x},null,8,["selected_option"])])]),Ys(" IP "),"custom"==$.value.value?(Ps(),js("div",RT,[Vs("div",DT,[Vs("label",zT,[Vs("b",null,te(l("nedge.page_repeater_config.ip")),1)]),Vs("div",qT,[wn(Vs("input",{"onUpdate:modelValue":t[2]||(t[2]=e=>r.value=e),onFocusout:h,class:"form-control col-7",type:"text",placeholder:ya(n),required:""},null,40,BT),[[Mi,r.value]])])])])):Ys("v-if",!0),Ys(" Port "),"custom"==$.value.value?(Ps(),js("div",VT,[Vs("div",HT,[Vs("label",GT,[Vs("b",null,te(l("nedge.page_repeater_config.port")),1)]),Vs("div",WT,[wn(Vs("input",{"onUpdate:modelValue":t[3]||(t[3]=e=>c.value=e),onFocusout:g,class:"form-control",type:"text",placeholder:ya(s),required:""},null,40,KT),[[Mi,c.value]])])])])):Ys("v-if",!0),Ys(" Keep Source Address "),"custom"==$.value.value?(Ps(),js("div",JT,[Vs("div",YT,[Vs("label",ZT,[Vs("b",null,te(l("nedge.page_repeater_config.keep_src_address")),1)]),Vs("label",XT,[wn(Vs("input",{type:"checkbox","onUpdate:modelValue":t[4]||(t[4]=e=>_.value=e)},null,512),[[ji,_.value]])])])])):Ys("v-if",!0),Vs("div",QT,[Vs("label",eP,[Vs("b",null,te(l("nedge.page_repeater_config.interfaces")),1)]),Vs("div",tP,[Hs(l_,{ref_key:"interfaces_search",ref:d,selected_options:i.value,"onUpdate:selected_options":t[5]||(t[5]=e=>i.value=e),options:C.value,multiple:!0,onSelect_option:P,onUnselect_option:U,onChange_selected_options:T},null,8,["selected_options","options"])])])])),footer:ml((()=>[Vs("button",{type:"button",disabled:p.value,onClick:L,class:"btn btn-primary"},te(E.value),9,aP)])),_:1},512))}};lp("\ninput[data-v-5b3dc248]:invalid {\n  border-color: #ff0000;\n}\n"),lP.__scopeId="data-v-5b3dc248",lP.__file="http_src/vue/modal-nedge-add-repeater-config.vue";const nP={class:"mb-2"},sP=Vs("br",null,null,-1),oP={id:"aggregated_live_flows"};var iP={__name:"page-nedge-repeaters-config",props:{url:String,ifid:Number,csrf:String,columns_config:Array},setup(e){const t=e,a=e=>i18n(e),l=va({}),n=va(null),s=va(null);function o(e){r(e,`${http_prefix}/lua/rest/v2/edit/nedge/forwarder.lua`)}function i(e){r(e,`${http_prefix}/lua/rest/v2/add/nedge/forwarder.lua`)}function r(e,a){let l=JSON.stringify({...e,csrf:t.csrf});b.http_request(a,{method:"post",headers:{"Content-Type":"application/json"},body:l}),u()}dn((async()=>{!function(){const e=[];let n={ifid:x.get_url_entry("ifid")||t.ifid},o=x.obj_to_url_params(n);e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,a,l){u()}},{text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){s.value.show(null)}});let i={table_buttons:e,data_url:`${t.url}?${o}`,enable_search:!1},r=[{columnName:a("nedge.page_repeater_config.type"),targets:0,name:"type",data:"type",className:"text-nowrap text-left",responsivePriority:1},{columnName:a("nedge.page_repeater_config.ip"),targets:0,name:"ip",data:"ip",className:"text-nowrap text-left",responsivePriority:1},{columnName:a("nedge.page_repeater_config.port"),targets:0,name:"port",data:"port",className:"text-nowrap text-left",responsivePriority:1},{columnName:a("nedge.page_repeater_config.interfaces"),targets:0,name:"interfaces",data:"details",className:"text-nowrap text-left",responsivePriority:1,render:function(e,t,a){return function(e,t){return e.split(",").join(", ")}(e)}}].map((e=>e));r.push({columnName:a("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return c(a)}}),i.columns_config=r,l.value=i}()}));const c=function(e){let a={handlerId:"delete_host",onClick:()=>{!function(e){const a=`${http_prefix}/lua/rest/v2/delete/nedge/forwarder.lua`;let l={"Content-Type":"application/json"},n=JSON.stringify({repeater_id:e.repeater_id,csrf:t.csrf});b.http_request(a,{method:"post",headers:l,body:n}),u()}(e)}},l={handlerId:"edit_rule",onClick:()=>{s.value.show(e)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:l,handlerId:"edit_rule",icon:"fa-edit",title:i18n("edit")},{class:"pointer",handler:a,handlerId:"delete_rule",icon:"fa-trash",title:i18n("delete")}])};function u(){setTimeout((()=>{x.reload_url()}),500)}return(e,t)=>(Ps(),js(Ss,null,[Vs("div",nP,[Vs("h2",null,te(a("nedge.repeaters_config_title")),1),sP]),Vs("div",oP,[Hs(xw,{ref_key:"table_rules",ref:n,table_buttons:l.value.table_buttons,columns_config:l.value.columns_config,data_url:l.value.data_url,filter_buttons:l.value.table_filters,enable_search:l.value.enable_search,table_config:l.value.table_config},null,8,["table_buttons","columns_config","data_url","filter_buttons","enable_search","table_config"])]),Hs(lP,{ref_key:"modal_add_repeater_config",ref:s,onAdd:i,onEdit:o},null,512)],64))},__file:"http_src/vue/page-nedge-repeaters-config.vue"};const rP={key:0,class:"text-left"};var cP={__name:"modal-delete-inactive-host",props:{context:Object},emits:["delete_host"],setup(e,{expose:t,emit:a}){const l=e,n=e=>i18n(e),s=va(null),o=va(""),i=va(""),r=va(!1),c=va(!1),u=va({});async function d(){const e=`${http_prefix}/lua/rest/v2/delete/host/inactive_host.lua`,t={csrf:l.context.csrf,ifid:l.context.ifid,serial_key:u.value};const n=await b.http_request(e,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(n){c.value=!1,r.value=!0;let e="";n.deleted_hosts>1&&(e=". Number hosts deleted: "+n.deleted_hosts),i.value=i18n("succ_del_inactive_hosts")+e,a("delete_host"),_()}else c.value=!0,r.value=!0,i.value=i18n("err_del_inactive_hosts")}_n((()=>{}));const _=()=>{setTimeout((()=>{s.value.close()}),3e3)};return t({show:(e,t)=>{u.value=e,o.value=t,s.value.show()},close:_}),(e,t)=>(Ps(),Ls(np,{ref_key:"modal_id",ref:s},{title:ml((()=>[Ks(te(n("delete_inactive_host_title")),1)])),body:ml((()=>[Ks(te(o.value)+" ",1),r.value?(Ps(),js("div",rP,[Vs("p",{class:K(["text-sm-start fs-6 fw-medium pt-3 m-0",c.value?"text-danger":"text-success"])},[Vs("small",null,te(i.value),1)],2)])):Ys("v-if",!0)])),footer:ml((()=>[Vs("button",{type:"button",onClick:d,class:"btn btn-primary"},te(n("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-inactive-host.vue"};const uP={class:"mt-3",style:{"max-width":"8rem"}},dP={key:0,class:"text-left"};var _P={__name:"modal-delete-inactive-host-epoch",props:{context:Object},emits:["delete_host"],setup(e,{expose:t,emit:a}){const l=e,n=e=>i18n(e);va("csv");const s=va(),o=va(""),i=va(!1),r=va(!1),c=[{label:n("show_alerts.presets.5_min"),value:300},{label:n("show_alerts.presets.30_min"),value:1800},{label:n("show_alerts.presets.hour"),value:3600},{label:n("show_alerts.presets.2_hours"),value:7200},{label:n("show_alerts.presets.6_hours"),value:21600},{label:n("show_alerts.presets.12_hours"),value:43200},{label:n("show_alerts.presets.day"),value:86400},{label:n("show_alerts.presets.week"),value:604800}],u=va();function d(e){s.value=e}async function _(){const e=`${http_prefix}/lua/rest/v2/delete/host/inactive_host.lua`,t={csrf:l.context.csrf,ifid:l.context.ifid,serial_key:s.value.value};const n=await b.http_request(e,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(n){r.value=!1,i.value=!0;let e="";n.deleted_hosts>1&&(e=". Number hosts deleted: "+n.deleted_hosts),o.value=i18n("succ_del_inactive_hosts")+e,a("delete_host"),p()}else r.value=!0,i.value=!0,o.value=i18n("err_del_inactive_hosts")}_n((()=>{s.value=c[0]}));const p=()=>{setTimeout((()=>{u.value.close()}),3e3)};return t({show:()=>{u.value.show()},close:p}),(e,t)=>(Ps(),Ls(np,{ref_key:"modal_id",ref:u},{title:ml((()=>[Ks(te(n("delete")),1)])),body:ml((()=>[Ks(te(n("delete_since"))+" ",1),Vs("div",uP,[Hs(l_,{selected_option:s.value,"onUpdate:selected_option":t[0]||(t[0]=e=>s.value=e),options:c,onSelect_option:d},null,8,["selected_option"])]),i.value?(Ps(),js("div",dP,[Vs("p",{class:K(["text-sm-start fs-6 fw-medium pt-3 m-0",r.value?"text-danger":"text-success"])},[Vs("small",null,te(o.value),1)],2)])):Ys("v-if",!0)])),footer:ml((()=>[Vs("button",{type:"button",onClick:_,class:"btn btn-primary"},te(n("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-inactive-host-epoch.vue"};const pP={class:"mt-3",style:{"max-width":"8rem"}};var fP={__name:"modal-download-inactive-host",props:{context:Object},emits:["download"],setup(e,{expose:t,emit:a}){const l=e=>i18n(e);va("csv");const n=va(),s=[{label:l("csv"),value:"csv",param:"csv"},{label:l("json"),value:"json",param:"json"}],o=va();function i(e){n.value=e}async function r(){let e=ntopng_url_manager.get_url_object(window.location.search);e.download=!0,e.format=n.value.value;const t=`${http_prefix}/lua/rest/v2/get/host/inactive_list.lua?`+ntopng_url_manager.obj_to_url_params(e);b.download_URI(t,"inactive_hosts."+n.value.value),a("download"),c()}_n((()=>{n.value=s[0]}));const c=()=>{o.value.close()};return t({show:()=>{o.value.show()},close:c}),(e,t)=>(Ps(),Ls(np,{ref_key:"modal_id",ref:o},{title:ml((()=>[Ks(te(l("download")),1)])),body:ml((()=>[Ks(te(l("download_format"))+" ",1),Vs("div",pP,[Hs(l_,{selected_option:n.value,"onUpdate:selected_option":t[0]||(t[0]=e=>n.value=e),options:s,onSelect_option:i},null,8,["selected_option"])])])),footer:ml((()=>[Vs("button",{type:"button",onClick:r,class:"btn btn-primary"},te(l("download")),1)])),_:1},512))},__file:"http_src/vue/modal-download-inactive-host.vue"};const vP={class:"row"},mP={class:"col-md-12 col-lg-12"},hP={class:"card card-shadow"},gP={class:"card-body"},bP={key:"1",class:"row mb-4 mt-4",id:"host_details_traffic"},yP={class:"col-4"},wP={class:"widget-name"},xP=["title"],kP=["onClick","title"],$P={class:"card-footer mt-3"},SP=Vs("i",{class:"fas fa-trash"},null,-1),NP=Vs("i",{class:"fas fa-trash"},null,-1),CP=[Vs("i",{class:"fas fa-download"},null,-1)];var AP={__name:"page-inactive-hosts",props:{ifid:Number,csrf:String,show_historical:Boolean},setup(e){const t=e,a=e=>i18n(e),l=va("inactive_hosts");va(a("local_hosts_only"));const n=va([]),s=va([]),o=va(),i=va(),r=va(),c=va(),u=va(),d=va(),_=va(),p=va(!1),f=va();va();const v="change_applications_tab_event",m=va({csrf:t.csrf,ifid:t.ifid}),h=[{ref:u,title:i18n("active_inactive"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/inactive/active_inactive.lua`,id:"active_inactive_distro"},{ref:d,title:i18n("inactivity_period"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/inactive/inactivity_period.lua`,id:"inactivity_period"},{ref:_,title:i18n("manufacturer"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/inactive/inactive_manufacturer.lua`,id:"inactive_manufacturer"}],g=va([{title:i18n("table_view"),active:0==p.value,id:"table"},{title:i18n("chart_view"),active:1==p.value,id:"chart"}]);_n((async()=>{ntopng_events_manager.on_custom_event("change_applications_tab_event",v,(e=>{x.set_key_to_url("view",e.id)})),async function(e){n.value=await w("overview"),b()}()}));function b(){n.value.forEach(((e,t)=>{null==e.basic_label&&(e.basic_label=e.label);const a=x.get_url_entry(e.id);null!=a?e.options.forEach((t=>{t.value.toString()===a&&(e.label=`${e.basic_label}: ${t.label||t.value}`)})):e.label=`${e.basic_label}: ${e.options[0].label||e.options[0].value}`}))}async function y(e,t){if(e.show_spinner=!0,await Ja(),0==e.data_loaded){let a=await w(e.id);e.options=a.find((t=>t.id==e.id)).options,await Ja(),s.value[t].load_menu()}e.show_spinner=!1}async function w(e){const t=x.get_url_params(),a=`${http_prefix}/lua/rest/v2/get/host/inactive_filters.lua?action=${e}&${t}`;return(await ntopng_utility.http_request(a)).map((t=>({id:t.action||t.name,label:t.label,title:t.tooltip,data_loaded:"overview"!=e,options:t.value,hidden:1==t.value.length})))}function k(){o.value.refresh_table()}function $(e){p.value=!p.value,g.value.forEach((e=>{e.active=!1,("table"==e.id&&0==p.value||"chart"==e.id&&1==p.value)&&(e.active=!0)})),ntopng_events_manager.emit_custom_event(v,e)}const S=()=>x.get_url_object();function N(e){let t={click_button_historical_flows:P,click_button_delete:C};null!=t[e.event_id]&&t[e.event_id](e)}function C(e){const t=e.row.serial_key;r.value.show(t,i18n("delete_inactive_host",{host:e.row.host.ip_address.value}))}function A(){r.value.show("all",i18n("delete_all_inactive_hosts"))}function E(){c.value.show()}function T(){i.value.show()}function P(e){const t=e.row;let a="";0!=t.vlan&&(a=`@${t.vlan}`),window.location.href=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${t.epoch_begin-100}&epoch_end=${t.epoch_end+100}&ip=${t.ip_address.value||t.ip_address}${a};eq&mac=${t.mac_address.value||t.mac_address};eq`}const U=e=>{let a={mac_address:(e,t)=>{let a=e;return null!=e&&null!=e.url&&null!=e.name&&null!=e.value&&(a=`<a href='${http_prefix}${e.url}' title='${e.value}'>${e.name}</a>`),a},network:(e,t)=>{let a=e;return null!=e.url&&null!=e.name&&null!=e.value&&(a=`<a href='${http_prefix}${e.url}' title='${e.value}'>${e.name}</a>`),a},host:(e,t)=>{let a="";const l=e.ip_address;if(a=`<a href='${http_prefix}${l.url}' title='${l.value}'>${l.name}</a>`,null!=e.vlan&&""!=e.vlan.name){const t=e.vlan;a=null!=t.url?`${a}@<a href='${http_prefix}${t.url||"#"}' title='${t.value}'>${t.name}</a>`:`${a}@${t.name}`}return`${a} ${e.device_type}`}};return e.forEach((e=>{if(e.render_func=a[e.data_field],"actions"==e.id){const a={historical_data:t.show_historical};e.button_def_array.forEach((e=>{a[e.id]||e.class.push("disabled")}))}})),e};return(t,u)=>(Ps(),js(Ss,null,[Vs("div",vP,[Vs("div",mP,[Vs("div",hP,[Vs("div",gP,[Hs(Xw,{ref_key:"inactive_hosts_tab_list",ref:f,id:"inactive_hosts_tab_list",tab_list:g.value,onClick_item:$},null,8,["tab_list"]),Ys('\n          <div class="card card-shadow">\n            <div class="card-body p-1">\n              <transition name="component-fade" mode="out-in">\n                <div key="1" v-if="show_charts == true" class="row mb-4 mt-4" id="host_details_traffic">\n                  \n                </div>\n              </transition>\n            </div>\n          </div>\n          <div class="text-center" style="cursor: pointer;" @click="change_show_charts">\n            <i v-if="show_charts == false" class="fa-solid fa-angles-down"></i>\n            <i v-else class="fa-solid fa-angles-up"></i>\n          </div>\n          '),Vs("div",null,[1==p.value?(Ps(),js("div",bP,[1==p.value?(Ps(),js(Ss,{key:0},En(h,(e=>Vs("div",yP,[Vs("h3",wP,te(e.title),1),Hs(C_,{ref_for:!0,ref:e.ref,id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!0},null,8,["id","chart_type","base_url_request"])]))),64)):Ys("v-if",!0)])):(Ps(),Ls(iv,{key:1,ref_key:"table_inactive_hosts",ref:o,table_id:l.value,csrf:e.csrf,f_map_columns:U,get_extra_params_obj:S,onCustom_event:N},{custom_header:ml((()=>[(Ps(!0),js(Ss,null,En(n.value,((e,t)=>{return Ps(),Ls(Rd,{f_on_open:(a=e,l=t,e=>{y(a,l)}),ref_for:!0,ref:e=>{s.value[t]=e},hidden:e.hidden},{title:ml((()=>[Hs(rv,{show:e.show_spinner,size:"1rem",class:"me-1"},null,8,["show"]),Vs("a",{class:"ntopng-truncate",title:e.title},te(e.label),9,xP)])),menu:ml((()=>[(Ps(!0),js(Ss,null,En(e.options,(a=>(Ps(),js("a",{style:{cursor:"pointer",display:"block"},onClick:l=>function(e,t,a,l){t.stopPropagation(),x.set_key_to_url(e.key,`${e.value}`),b(),o.value.refresh_table(),1==p.value&&h.forEach((e=>{e.ref.value[0].update_chart()})),y(a,l)}(a,l,e,t),class:"ntopng-truncate tag-filter",title:a.value},[null==a.count?(Ps(),js(Ss,{key:0},[Ks(te(a.label),1)],64)):(Ps(),js(Ss,{key:1},[Ks(te(a.label+" ("+a.count+")"),1)],64))],8,kP)))),256))])),_:2},1032,["f_on_open","hidden"]);var a,l})),256)),Ys(" Dropdown filters ")])),_:1},8,["table_id","csrf"]))]),Vs("div",$P,[Vs("button",{type:"button",ref:"delete_all",onClick:A,class:"btn btn-danger me-1"},[SP,Ks(" "+te(a("delete_all_entries")),1)],512),Vs("button",{type:"button",ref:"delete_older",onClick:E,class:"btn btn-danger me-1"},[NP,Ks(" "+te(a("delete_older")),1)],512),Vs("button",{type:"button",ref:"download",onClick:T,class:"btn btn-primary me-1"},CP,512)])])])])]),Hs(cP,{ref_key:"modal_delete",ref:r,context:m.value,onDelete_host:k},null,8,["context"]),Hs(_P,{ref_key:"modal_delete_older",ref:c,context:m.value,onDelete_host:k},null,8,["context"]),Hs(fP,{ref_key:"modal_download",ref:i,context:m.value},null,8,["context"])],64))},__file:"http_src/vue/page-inactive-hosts.vue"};const EP={class:"row"},TP={class:"col-md-12 col-lg-12"},PP={class:"mt-4 card card-shadow"},UP={class:"card-body"};var IP={__name:"page-inactive-host-details",props:{ifid:Number,csrf:String},setup(e){const t=va("inactive_host_details"),a=va([]),l=function(e){return e||""},n=function(e){let t=e.name||"";return e.url&&""!=e.url&&(t=`<a href="${http_prefix}${e.url}">${t}</>`),t};return _n((async()=>{const e=ntopng_url_manager.get_url_object(),t=ntopng_url_manager.obj_to_url_params(e),l=await ntopng_utility.http_request(`${http_prefix}/lua/rest/v2/get/host/inactive_host.lua?${t}`);a.value=l.host_info,$("#navbar_title").html("<i class='fas fa-laptop'></i> "+(e=>i18n(e))("host_details.host")+": "+l.host_name)})),(e,s)=>(Ps(),js("div",EP,[Vs("div",TP,[Vs("div",PP,[Vs("div",UP,[Hs(Pw,{horizontal:!0,id:t.value,rows:a.value,print_html_title:l,print_html_row:n},null,8,["id","rows"])])])])]))},__file:"http_src/vue/page-inactive-host-details.vue"};const OP={class:"table table-bordered table-striped"};var MP={__name:"page-flowdevice-config",props:{ifid:Number,csrf:String,flowdev_ip:String},setup(e){const t=e,a=e=>i18n(e),l=va(null),n=va(""),s=va(!0),o=`${http_prefix}/lua/pro/rest/v2/get/flowdevice/alias.lua?flowdev_ip=${t.flowdev_ip}&ifid=${t.ifid}`,i=`${http_prefix}/lua/pro/rest/v2/set/flowdevice/alias.lua`;async function r(){const e=await ntopng_utility.http_request(`${o}`,{method:"get"});l.value.value=e||t.flowdev_ip,n.value=l.value.value}_n((async()=>{r()}));const c=async function(){const e={csrf:t.csrf,flowdev_ip:t.flowdev_ip,alias:l.value.value,ifid:t.ifid};await ntopng_utility.http_request(i,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}),r(),s.value=!0},u=function(){n.value==l.value.value?s.value=!0:s.value=!1};return(e,t)=>(Ps(),js(Ss,null,[Vs("table",OP,[Vs("tr",null,[Vs("th",null,te(a("flowdev_alias")),1),Vs("td",null,[Vs("input",{type:"text",ref_key:"custom_name",ref:l,class:"form-control",onInput:u},null,544)])])]),Vs("button",{class:K(["btn btn-primary",[s.value?"disabled":""]]),onClick:c,id:"save"},te(a("save_settings")),3)],64))},__file:"http_src/vue/page-flowdevice-config.vue"};const jP={class:"table table-striped table-bordered col-sm-12"},LP={class:"col-3"},FP={class:"col-9"},RP={class:"d-flex ps-0"},DP={class:"col-3"},zP={class:"col-9"},qP={class:"d-flex ps-0"},BP={class:"d-flex align-items-center me-2"},VP={class:"col-3"},HP={class:"col-9"},GP={class:"d-flex ps-0"},WP={class:"d-flex align-items-center me-2"};var KP={__name:"page-flowdevice-interface-config",props:{ifid:String,csrf:String,device_ip:String,port_index:String},setup(e){const t=e,a=1e9,l=e=>i18n(e),n=va(null),s=va(""),o=va(null),i=va(""),r=va(null),c=va(""),u=va(!0),d=`${http_prefix}/lua/pro/rest/v2/get/flowdevice/interface/config.lua?device_ip=${t.device_ip}&port_index=${t.port_index}&ifid=${t.ifid}`,_=`${http_prefix}/lua/pro/rest/v2/set/flowdevice/interface/config.lua`;async function p(){const e=await ntopng_utility.http_request(`${d}`,{method:"get"});n.value.value=e.alias,s.value=n.value.value,o.value.value=e.uplink_speed/a,i.value=o.value.value,r.value.value=e.downlink_speed/a,c.value=r.value.value}_n((async()=>{p()}));const f=async function(){const e={ifid:t.ifid,csrf:t.csrf,device_ip:t.device_ip,port_index:t.port_index,alias:n.value.value,uplink_speed:Number(o.value.value)*a,downlink_speed:Number(r.value.value)*a};await ntopng_utility.http_request(_,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}),p(),u.value=!0},v=function(){s.value==n.value.value&&i.value==o.value.value&&c.value==r.value.value?u.value=!0:u.value=!1};return(e,t)=>(Ps(),js(Ss,null,[Vs("table",jP,[Vs("tbody",null,[Vs("tr",null,[Vs("th",LP,te(l("interface_alias")),1),Vs("td",FP,[Vs("div",RP,[Vs("input",{type:"text",ref_key:"custom_name",ref:n,class:"form-control",style:{width:"16rem"},onInput:v},null,544)])])]),Vs("tr",null,[Vs("th",DP,te(l("interface_uplink_speed")),1),Vs("td",zP,[Vs("div",qP,[Vs("label",BP,te(l("gbit")),1),Vs("input",{ref_key:"uplink_speed",ref:o,class:"form-control text-end",type:"number",min:"0",step:"0.01",style:{width:"8rem"},onInput:v},null,544)])])]),Vs("tr",null,[Vs("th",VP,te(l("interface_downlink_speed")),1),Vs("td",HP,[Vs("div",GP,[Vs("label",WP,te(l("gbit")),1),Vs("input",{ref_key:"downlink_speed",ref:r,class:"form-control text-end",type:"number",min:"0",step:"0.001",style:{width:"8rem"},onInput:v},null,544)])])])])]),Vs("button",{class:K(["btn btn-primary d-flex ms-auto",[u.value?"disabled":""]]),onClick:f,id:"save"},te(l("save_settings")),3)],64))},__file:"http_src/vue/page-flowdevice-interface-config.vue"},JP={__name:"modal-delete-scan-confirm",props:{body:String,title:String},emits:["delete","delete_all"],setup(e,{expose:t,emit:a}){const l=va(null),n=va(""),s=va(""),o=va(""),i=va(!0),r=[i18n("note_scan_host")],c=()=>{"delete_all"==o.value?a("delete_all"):"delete_single_row"==o.value||"delete_single_report"==o.value?a("delete"):"scan_all_rows"==o.value?a("scan_all_rows"):"scan_row"==o.value&&a("scan_row"),u()},u=()=>{l.value.close()};t({show:(e,t)=>{i.value=!1,o.value=e,"delete_all"==e?(s.value=i18n("delete_all_entries"),n.value=t):"delete_single_row"==e?(s.value=i18n("delete_vs_host_title"),n.value=t):"scan_all_rows"==e?(s.value=i18n("scan_all_hosts_title"),n.value=t):"scan_row"==e?(i.value=!0,s.value=i18n("scan_host_title"),n.value=t):"delete_single_report"==e&&(s.value=i18n("hosts_stats.page_scan_hosts.reports_page.delete_title"),n.value=i18n("hosts_stats.page_scan_hosts.reports_page.delete_description")),l.value.show()},close:u}),_n((()=>{}));const d=e=>i18n(e);return(e,t)=>(Ps(),Ls(np,{onShowed:t[0]||(t[0]=e=>{}),ref_key:"modal_id",ref:l},{title:ml((()=>[Ks(te(s.value),1)])),body:ml((()=>[Ks(te(n.value)+" ",1),i.value?(Ps(),Ls(pv,{key:0,note_list:r})):Ys("v-if",!0)])),footer:ml((()=>["delete_all"==o.value||"delete_single_row"==o.value||"delete_single_report"==o.value?(Ps(),js("button",{key:0,type:"button",onClick:c,class:"btn btn-danger"},te(d("delete")),1)):(Ps(),js("button",{key:1,type:"button",onClick:c,class:"btn btn-primary"},te(d("hosts_stats.page_scan_hosts.schedule_scan")),1))])),_:1},512))},__file:"http_src/vue/modal-delete-scan-confirm.vue"};const YP={class:"form-group ms-2 me-2 mt-3 row"},ZP={class:"col-form-label col-sm-4"},XP={class:"col-8"};var QP={__name:"modal-update-periodicity-scan",props:{title:String},emits:["update"],setup(e,{expose:t,emit:a}){const l=va(null),n=va([{id:"disabled",label:i18n("hosts_stats.page_scan_hosts.disabled")},{id:"1day",label:i18n("hosts_stats.page_scan_hosts.every_night")},{id:"1week",label:i18n("hosts_stats.page_scan_hosts.every_week")}]);let s=va(n.value[0]);const o=()=>{a("update",{scan_frequency:s.value.id}),i()},i=()=>{l.value.close()};t({show:e=>{l.value.show()},close:i}),_n((()=>{}));const r=e=>i18n(e);return(t,a)=>(Ps(),Ls(np,{onShowed:a[1]||(a[1]=e=>{}),ref_key:"modal_id",ref:l},{title:ml((()=>[Ks(te(e.title),1)])),body:ml((()=>[Vs("div",YP,[Vs("label",ZP,[Vs("b",null,te(r("hosts_stats.page_scan_hosts.automatic_scan")),1)]),Vs("div",XP,[Hs(l_,{selected_option:ya(s),"onUpdate:selected_option":a[0]||(a[0]=e=>fa(s)?s.value=e:s=e),options:n.value},null,8,["selected_option","options"])])])])),footer:ml((()=>[Vs("button",{type:"button",onClick:o,class:"btn btn-secondary me-4"},te(r("hosts_stats.page_scan_hosts.update_all")),1)])),_:1},512))},__file:"http_src/vue/modal-update-periodicity-scan.vue"};const eU={class:"form-group ms-2 me-2 mt-3 row"},tU={class:"col-form-label col-sm-2"},aU={class:"col-sm-8"},lU=["disabled","placeholder"],nU={class:"col-sm-2"},sU={class:"form-group ms-2 me-2 mt-3 row"},oU={class:"col-form-label col-sm-2"},iU={class:"col-sm-10"},rU=["placeholder"],cU={class:"form-group ms-2 me-2 mt-3 row"},uU={class:"col-form-label col-sm-2"},dU={class:"col-10"},_U={key:0,class:"form-group ms-2 me-2 mt-3 row"},pU={class:"col-form-label col-sm-2"},fU={class:"col-10"},vU={key:1,class:"form-group ms-2 me-2 mt-3 row"},mU={class:"col-form-label col-sm-2"},hU={class:"col-10"},gU={class:"mt-4"},bU={key:0,class:"me-auto text-danger d-inline"},yU=["disabled"],wU=["disabled"];var xU={__name:"modal-add-vs-host",props:{context:Object},emits:["add","edit"],setup(e,{expose:t,emit:l}){const n=e=>i18n(e),s=va(i18n("hosts_stats.page_scan_hosts.add_host")),o=va(i18n("hosts_stats.page_scan_hosts.host_not_resolved")),i=i18n("hosts_stats.page_scan_hosts.host_placeholder"),r=i18n("hosts_stats.page_scan_hosts.ports_placeholder"),c=[n("hosts_stats.page_scan_hosts.notes.note_1"),n("hosts_stats.page_scan_hosts.notes.note_2"),n("hosts_stats.page_scan_hosts.notes.note_3"),n("hosts_stats.page_scan_hosts.notes.note_3_1")],u=[n("hosts_stats.page_scan_hosts.notes.note_1"),n("hosts_stats.page_scan_hosts.notes.note_2"),n("hosts_stats.page_scan_hosts.notes.note_3"),n("hosts_stats.page_scan_hosts.notes.note_3_1"),n("hosts_stats.page_scan_hosts.notes.note_4")],d=va(null),_=va({}),p=va([]),f=va(""),v=va(""),m=va(!1),h=va(!1),g=va([]),b=va([]),y=va(null),w=va(null),x=va(null),k=va(!1),$=va(null),S=va(!0),N=va(!0),C=va(!0),A=va(!1),E=va(!1),T=va([{id:"disabled",label:i18n("hosts_stats.page_scan_hosts.disabled")},{id:"1day",label:i18n("hosts_stats.page_scan_hosts.every_night")},{id:"1week",label:i18n("hosts_stats.page_scan_hosts.every_week")}]),P="32",U=va([{id:"24",label:"/24"},{id:"32",label:"/32"},{id:"128",label:"/128"}]),I=va(U.value[1]),O=va(T.value[0]),M=va(!1),j=va(!1),L=e=>{p.value=e,C.value=p.value.length>0},F=e=>{p.value=p.value.filter((t=>t.id!=e.id)),C.value=p.value.length>0},R=()=>{const e=yp.validateIPv4(w.value),t=yp.validateIPv6(w.value),a=yp.validateHostName(w.value);"ipv4_netscan"==_.value.id?(e&&(A.value=!0,C.value=p.value&&p.value.length>0),C.value=!0):e?(A.value=!0,w.value.endsWith(0)||(I.value=U.value.find((e=>e.id==P)))):t?(I.value=U.value[2],A.value=!0,I.value=U.value.find((e=>"128"==e.id))):a?(A.value=!0,I.value=U.value.find((e=>e.id==P))):A.value=!1},D=()=>{yp.validatePortRange(x.value)||yp.validateCommaSeparatedPortList(x.value)||JS.isEmptyOrNull(x.value)?S.value=!0:S.value=!1};const z=()=>{q(!0)},q=async e=>{const t=x.value,n=_.value.id,s=!0===e?"edit":"add",i=!0===e?v.value:null;let r=w.value,c=!0;m.value=!0,yp.validateIP(w.value)||(A.value=!1,r=await async function(e){const t=`${http_prefix}/lua/rest/v2/get/host/resolve_host_name.lua`,l=a.buildURL(t,{host:e});return await ntopng_utility.http_request(l)}(w.value),"no_success"===r&&(c=!1,o.value=w.value+" "+i18n("hosts_stats.page_scan_hosts.host_not_resolved"),M.value=!0,setTimeout((()=>{M.value=!1}),4e3)),A.value=!0);let u=[];p.value.forEach((e=>{u.push(e.id)}));const d=u.join(",");m.value=c,c&&l(s,{host:r,scan_type:n,scan_ports:t,cidr:I.value.id,scan_frequency:$?O.value.id:null,scan_id:i,discovered_host_scan_type:d})};return t({show:(e,t)=>{w.value="",x.value="",S.value=!0,N.value=!0,A.value=!1,m.value=!1,k.value=!1,_.value=g.value[0],p.value=[],I.value=U.value[1],v.value=null,h.value=!1,M.value=!1,E.value=!1,C.value=!E.value,s.value=i18n("hosts_stats.page_scan_hosts.add_host"),JS.isEmptyOrNull(e)||(s.value=i18n("hosts_stats.page_scan_hosts.edit_host_title"),(e=>{if(h.value=!0,w.value=e.host,x.value=e.ports,A.value=!0,S.value=!0,v.value=e.id,_.value=g.value.find((t=>t.id==e.scan_type)),null!=e.discovered_host_scan_type){const t=e.discovered_host_scan_type.split(",");let a,l=[];t.forEach((e=>{a=b.value.find((t=>t.id==e)),l.push(a)})),p.value=l}"ipv4_netscan"==_.value.id?I.value=U.value.find((e=>"24"==e.id)):yp.validateIPv4(e.host)?I.value=U.value.find((e=>e.id==P)):I.value=U.value.find((e=>"128"==e.id)),N.value=!0,$&&(O.value=T.value.find((t=>t.id==e.scan_frequency)))})(e)),JS.isEmptyOrNull(t)||(w.value=t,A.value=!0),d.value.show()},close:()=>{j.value=!1,d.value.close()},metricsLoaded:async(e,t,a)=>{const l=e.sort(((e,t)=>e.label.localeCompare(t.label)));y.value=t,g.value=l,b.value=l.filter((e=>"ipv4_netscan"!=e.id)),$.value=a,_.value=g.value[0]}}),(e,t)=>(Ps(),Ls(np,{ref_key:"modal_id",ref:d},{title:ml((()=>[Ks(te(s.value),1)])),body:ml((()=>[Ys(" Target information, here an IP is put "),Vs("div",eU,[Vs("label",tU,[Vs("b",null,te(n("hosts_stats.page_scan_hosts.host_or_network")),1)]),Vs("div",aU,[wn(Vs("input",{"onUpdate:modelValue":t[0]||(t[0]=e=>w.value=e),onInput:R,disabled:h.value,class:"form-control",type:"text",placeholder:ya(i),required:""},null,40,lU),[[Mi,w.value]])]),Vs("div",nU,[Hs(l_,{selected_option:I.value,"onUpdate:selected_option":t[1]||(t[1]=e=>I.value=e),disabled:h.value||E.value,options:U.value},null,8,["selected_option","disabled","options"])])]),Vs("div",sU,[Vs("label",oU,[Vs("b",null,te(n("hosts_stats.page_scan_hosts.ports")),1)]),Vs("div",iU,[wn(Vs("input",{"onUpdate:modelValue":t[2]||(t[2]=e=>x.value=e),onFocusout:D,class:K(["form-control",!0===f.value?"ntopng-hide-placeholder":""]),type:"text",placeholder:ya(r),required:""},null,42,rU),[[Mi,x.value]])])]),Vs("div",cU,[Vs("label",uU,[Vs("b",null,te(n("hosts_stats.page_scan_hosts.scan_type")),1)]),Vs("div",dU,[Hs(l_,{selected_option:_.value,"onUpdate:selected_option":t[3]||(t[3]=e=>_.value=e),options:g.value,disabled:h.value,onSelect_option:t[4]||(t[4]=e=>{"ipv4_netscan"==_.value.id?(I.value=U.value.find((e=>"24"==e.id)),E.value=!0,C.value=!1):(E.value=!1,C.value=!0)})},null,8,["selected_option","options","disabled"])])]),"ipv4_netscan"==_.value.id?(Ps(),js("div",_U,[Vs("label",pU,[Vs("b",null,te(n("hosts_stats.page_scan_hosts.host_discovered_scan_type")),1)]),Vs("div",fU,[Hs(l_,{selected_options:p.value,"onUpdate:selected_options":t[5]||(t[5]=e=>p.value=e),onChange_selected_options:L,onUnselect_option:F,options:b.value,multiple:!0},null,8,["selected_options","options"])])])):Ys("v-if",!0),1==$.value?(Ps(),js("div",vU,[Vs("label",mU,[Vs("b",null,te(n("hosts_stats.page_scan_hosts.periodicity")),1)]),Vs("div",hU,[Hs(l_,{selected_option:O.value,"onUpdate:selected_option":t[6]||(t[6]=e=>O.value=e),options:T.value},null,8,["selected_option","options"])])])):Ys("v-if",!0),Vs("div",gU,[0==$.value?(Ps(),Ls(pv,{key:0,note_list:c})):(Ps(),Ls(pv,{key:1,note_list:u}))])])),footer:ml((()=>[M.value?(Ps(),js("div",bU,te(o.value),1)):Ys("v-if",!0),Vs("div",null,[Hs(rv,{show:m.value,size:"1rem",class:"me-2"},null,8,["show"]),0==h.value?(Ps(),js("button",{key:0,type:"button",onClick:q,class:"btn btn-primary",disabled:!(N.value&&A.value&&S.value&&C.value)},te(n("add")),9,yU)):(Ps(),js("button",{key:1,type:"button",onClick:z,class:"btn btn-primary",disabled:!(N.value&&A.value&&S.value&&C.value)},te(n("apply")),9,wU))])])),_:1},512))},__file:"http_src/vue/modal-add-vs-host.vue"};const kU=(e,t)=>1==t.is_ok_last_scan&&null!=t.last_scan&&null!=t.last_scan.time?e:"",$U=(e,t)=>{let a="";if(1==t.is_ok_last_scan&&null!=t.last_scan&&null!=t.last_scan.time){const t=Number(e);let l="";null!=e&&(l=0==t?"green":t<3.9?"grey":t<7?"yellow":"red",0!=t&&(a=`<FONT COLOR=${l}>${e}`))}return a},SU=(e,t,a)=>{if(t&&a.is_down)return"";if(void 0!==e){let t=e;return t=i18n("hosts_stats.page_scan_hosts.scan_type_list."+e),t}},NU=(e,t)=>3==t.is_ok_last_scan?"":void 0!==e&&void 0!==e.time?e.time:void 0!==e?e:i18n("hosts_stats.page_scan_hosts.not_yet"),CU=(e,t)=>3==t.is_ok_last_scan?"":void 0!==t.last_scan&&void 0!==t.last_scan.duration?t.last_scan.duration:i18n("hosts_stats.page_scan_hosts.not_yet"),AU=e=>{let t="";return null==e||"disabled"==e?"":(t="1day"==e?i18n("hosts_stats.page_scan_hosts.daily"):i18n("hosts_stats.page_scan_hosts.weekly"),`<span class="badge bg-secondary" title="${t}">${t}</span>`)},EU=e=>{let t="";return 2==e?(t=i18n("hosts_stats.page_scan_hosts.scheduled"),`<span class="badge bg-dark" title="${t}">${t}</span>`):4==e?(t=i18n("hosts_stats.page_scan_hosts.scanning"),`<span class="badge bg-info" title="${t}">${t}</span>`):3==e||null==e?(t=i18n("hosts_stats.page_scan_hosts.not_scanned"),`<span class="badge bg-primary" title="${t}">${t}</span>`):1==e?(t=i18n("hosts_stats.page_scan_hosts.success"),`<span class="badge bg-success" title="${t}">${t}</span>`):0==e?(t=i18n("hosts_stats.page_scan_hosts.error"),`<span class="badge bg-danger" title="${t}">${t}</span>`):5==e?(t=i18n("hosts_stats.page_scan_hosts.failed"),`<span class="badge bg-warning" title="${t}">${t}</span>`):void 0},TU=e=>{let t="";return null!=e&&e.forEach((e=>{""==t?t=e:t+=`, ${e}`})),t},PU=(e,t,a)=>{let l=null;switch(e){case 4:l=` <span class="badge bg-secondary"><i class="fa-solid fa-ghost" title='${TU(t)}'></i></span></div>`;break;case 3:l=` <span class="badge bg-secondary"><i class="fa-solid fa-filter" title='${TU(a)}'></i></span>`}return l},UU=(e,t)=>{0==e&&0==t.udp_ports&&t.scan_type.contains("udp")&&(e=t.num_open_ports);let a="";if(null==e||e<=0)return a;if(1==t.is_ok_last_scan&&null!=t.last_scan&&null!=t.last_scan.time&&(a=`${e}`,t.host_in_mem)){const e=PU(t.udp_ports_case,t.udp_ports_unused,t.udp_filtered_ports);null!=e&&(a+=e)}return a},IU=(e,t)=>{0==e&&0==t.tcp_ports&&t.scan_type.contains("tcp")&&(e=t.num_open_ports);let a="";if(null==e||e<=0)return a;if(1==t.is_ok_last_scan&&null!=t.last_scan&&null!=t.last_scan.time&&(a=`${e}`,t.host_in_mem)){const e=PU(t.tcp_ports_case,t.tcp_ports_unused,t.tcp_ports_filtered);null!=e&&(a+=e)}return a},OU=(e,t,a,l)=>{let n=e.split(" ")[0].split("/")[0],s=((e,t,a,l)=>{let n="";return null!=a&&a.forEach((t=>{e==Number(t)&&(n="unused")})),""!=n||null!=l&&l.forEach((t=>{e==Number(t)&&(n="filtered")})),n})(Number(n),0,a,l),o=null;switch(s){case"unused":o=` &nbsp;<span class="badge bg-secondary" title='${i18n("hosts_stats.page_scan_hosts.unused_port")}'><i class="fa-solid fa-ghost"></i></span>`;break;case"filtered":o=` &nbsp;<span class="badge bg-primary" title='${i18n("hosts_stats.page_scan_hosts.filtered_port")}'><i class="fa-solid fa-filter"></i></span>`}return o},MU=(e,t,a,l)=>{let n={host:e,scan_type:t,scan_return_result:!0,page:"show_result",scan_date:a,epoch:l};return`${`${http_prefix}/lua/vulnerability_scan.lua`}?${ntopng_url_manager.obj_to_url_params(n)}`},jU=(e,t,a)=>{let l=e,n=5==t.is_ok_last_scan&&null!=t.is_down&&1==t.is_down;if((1==t.is_ok_last_scan||n)&&null!=t.last_scan&&null!=t.last_scan.time){let a=MU(e,t.scan_type,t.last_scan.time.replace(" ","_"),t.last_scan.epoch);"ipv4_netscan"==t.scan_type&&(e+="/24"),l=`<a href="${a}">${e}</a>`,n&&(l=`<a href="${a}">${e} <i class="fas fa-exclamation-triangle" style='color: #B94A48;'></i> </a>`)}return l},LU={class:"row"},FU={class:"col-md-12 col-lg-12"},RU={key:0,class:"alert alert-info alert-dismissable"},DU={class:"card card-shadow"},zU={class:"card-body"},qU={key:0,class:"alert alert-info alert-dismissable"},BU=Vs("span",{class:"spinner-border spinner-border-sm text-info me-1"},null,-1),VU={key:1,class:"alert alert-success alert-dismissable"},HU=Vs("span",{class:"text-success me-1"},null,-1),GU={key:2,class:"alert alert-danger alert-dismissable"},WU=Vs("span",{class:"text-danger me-1"},null,-1),KU={id:"hosts_to_scan"},JU=[Vs("i",{class:"fas fa-plus"},null,-1)],YU={class:"card-footer mt-3"},ZU=Vs("i",{class:"fas fa-trash"},null,-1),XU=Vs("i",{class:"fas fa-clock-rotate-left"},null,-1),QU={class:"card-footer"};var eI={__name:"page-vulnerability-scan",props:{context:Object},setup(e){const t=e,a=e=>i18n(e),l=[i18n("hosts_stats.page_scan_hosts.notes.generic_notes_1").replaceAll("${http_prefix}",`${http_prefix}`)],n=va(i18n("scan_host_inserted")),s=va(i18n("scan_host_already_inserted")),o=va(""),i=va(i18n("hosts_stats.page_scan_hosts.enable_clickhouse")),r=i18n("hosts_stats.page_scan_hosts.delete_host_title"),c=i18n("hosts_stats.page_scan_hosts.delete_host_description"),u=i18n("hosts_stats.page_scan_hosts.update_periodicity_title"),d=`${http_prefix}/lua/rest/v2/add/host/to_scan.lua`,_=`${http_prefix}/lua/rest/v2/edit/host/update_va_scan_period.lua`,p=`${http_prefix}/lua/rest/v2/delete/host/delete_host_to_scan.lua`,f=`${http_prefix}/lua/rest/v2/exec/host/schedule_vulnerability_scan.lua`,v=`${http_prefix}/lua/rest/v2/get/host/vulnerability_scan_type_list.lua`,m=`${http_prefix}/lua/vulnerability_scan.lua`,h=`${http_prefix}/lua/rest/v2/get/host/vulnerability_scan_result.lua`,g=`${http_prefix}/lua/rest/v2/get/host/vulnerability_scan_status.lua`,y=va("hosts_to_scan"),w=va(),k=va(),$=va(),S=va(),N=va(0),C=va(null),A=va({}),E=va({}),T=va(!1),P=va(!1),U=va(!1),I=va(!1),O=va(!1),M={csrf:t.context.csrf},j=va({csrf:t.context.csrf,ifid:t.context.ifid,is_enterprise_l:t.context.is_enterprise_l});let L=[],F=null;function R(){null!=t.context.host&&""!=t.context.host?$.value.show(null,t.context.host):$.value.show()}function D(e){null!=e?w.value.refresh_table(e):w.value.refresh_table(!0)}dn((()=>{F=Promise.all([oe(),ie()])})),_n((async()=>{await F,await $.value.metricsLoaded(L,t.context.ifid,t.context.is_enterprise_l),null!=t.context.host&&$.value.show(null,t.context.host),U.value=!t.context.is_clickhouse_enabled,setInterval(Q,1e4)}));const z=()=>x.get_url_object();function q(e){let t={click_button_edit_host:J,click_button_delete:G,click_button_scan:W,click_button_download:ve,click_button_show_result:me};null!=t[e.event_id]&&t[e.event_id](e)}function B(e,t){return eN.sortByIP(e.host,t.host,1)}function V(e,t){let a=t[e.data.data_field];var l;return"duration"==e.id?a=void 0===t.last_scan?-1:t.last_scan.duration_epoch:"last_scan"==e.id?a=void 0===t.last_scan?0:t.last_scan.epoch:"is_ok_last_scan"==e.id?a=function(e,t){let a="";a=2==e?i18n("hosts_stats.page_scan_hosts.scheduled"):4==e?i18n("hosts_stats.page_scan_hosts.scanning"):3==e||null==e?i18n("hosts_stats.page_scan_hosts.not_scanned"):1==e?i18n("hosts_stats.page_scan_hosts.success"):5==e?i18n("hosts_stats.page_scan_hosts.failed"):i18n("hosts_stats.page_scan_hosts.error");return a+t.id}(a,t):"scan_frequency"==e.id?a="1day"==(l=a)?i18n("hosts_stats.page_scan_hosts.daily"):"1week"==l?i18n("hosts_stats.page_scan_hosts.weekly"):"":"max_score_cve"!=e.id&&"num_vulnerabilities_found"!=e.id&&"tcp_ports"!=e.id&&"udp_ports"!=e.id||1!=t.is_ok_last_scan&&5!=t.is_ok_last_scan&&(a=0),a}function H(e,t,a){if(null!=e){let l=V(e,t),n=V(e,a);if(l==n)return B(t,a);if("host"==e.id)return eN.sortByIP(l,n,e.sort);if("host_name"==e.id)return eN.sortByName(l,n,e.sort);if("num_vulnerabilities_found"==e.id){const t=0;return eN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("tcp_ports"==e.id||"udp_ports"==e.id){const t=0;return eN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("duration"==e.id){const t=-1;return eN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("last_scan"==e.id){const t=0;return eN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("is_ok_last_scan"==e.id)return eN.sortByName(l,n,e.sort);if("max_score_cve"==e.id){const t=0;return eN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}return e.id,eN.sortByName(l,n,e.sort)}return B(t,a)}function G(e){I.value=!1,O.value=!1,ne(),A.value=e.row,k.value.show("delete_single_row",i18n("delete_vs_host"))}function W(e){I.value=!1,O.value=!1,ne(),E.value=e.row;const t=`${i18n("scan_host")}`;k.value.show("scan_row",t)}function J(e){$.value.show(e.row)}function Y(){I.value=!1,O.value=!1,ne(),k.value.show("delete_all",i18n("delete_all_vs_hosts"))}async function Z(e){e.is_edit=!0,await le(e)}function X(){!0===I.value&&(I.value=!1),!0===O.value&&(O.value=!1)}function Q(){ie()}function ee(){N.value=w.value.get_rows_num()}const ae=e=>((e,t,a,l)=>{const n={download:!0,show_result:!0};let s={host:(e,t)=>jU(e,t),scan_type:(e,a)=>SU(e,a,t),last_scan:(e,t)=>NU(e,t),duration:(e,t)=>CU(e,t),scan_frequency:e=>AU(e),is_ok_last_scan:e=>EU(e),max_score_cve:(e,t)=>$U(e,t),tcp_ports:(e,t)=>IU(e,t),udp_ports:(e,t)=>UU(e,t),num_vulnerabilities_found:(e,t)=>kU(e,t)};return e.forEach((e=>{e.render_func=s[e.data_field],"actions"==e.id&&e.button_def_array.forEach((e=>{e.f_map_class=(t,a)=>(t=t.filter((e=>"link-disabled"!=e)),(3==a.is_ok_last_scan||null==a.is_ok_last_scan||null==a.last_scan||null!=a.last_scan&&null==a.last_scan.time)&&n[e.id]&&t.push("link-disabled"),t)}))})),e})(e,L,0,t.context.ifid),le=async function(e){const t=NtopUtils.buildURL(d,{...e}),a=await b.http_post_request(t,M);if($.value.close(),!0===a.rsp)null!=e.cidr?n.value=i18n("scan_host_updated").replace("%{host}",`${e.host}/${e.cidr}`):n.value=i18n("scan_host_updated").replace("%{host}",`${e.host}`),I.value=!0,O.value=!1,setTimeout(X,1e4),D(!1);else{null!=e.cidr?s.value=i18n("scan_host_already_inserted").replace("%{host}",`${e.host}/${e.cidr}`):s.value=i18n("scan_host_already_inserted").replace("%{host}",`${e.host}`);let t="";L.forEach((a=>{a.id==e.scan_type&&(t=a.label)})),s.value=i18n("scan_host_already_inserted").replace("%{scan_type}",`${t}`),O.value=!0,I.value=!1,setTimeout(X,1e4)}!0!==e.is_edit&&D(!1)},ne=function(e){null!=e&&0!=e&&(o.value=i18n("scan_in_progress").replace("total",`${e}`))},se=async function(e){const t=NtopUtils.buildURL(_,{...e});await b.http_post_request(t,M),I.value=!1,O.value=!1,ne(),D(!1)},oe=async function(){const e=NtopUtils.buildURL(v,{...M}),t=await b.http_request(e);L=t.rsp},ie=async function(){const e=NtopUtils.buildURL(g,{...M}),t=await b.http_request(e);I.value=!1,O.value=!1,ne(t.rsp.total_in_progress),null==C.value&&(C.value=t.rsp.total_in_progress);const a=0==t.rsp.total_in_progress&&C.value>0;C.value=t.rsp.total_in_progress,T.value=C.value>0&&!1===P.value,!0===T.value?setTimeout((function(){D(!0)}),2e3):a&&setTimeout((function(){D(!0)}),5e3)},re=function(){k.value.show("scan_all_rows",i18n("scan_all_hosts")),D(!1)},ce=function(){S.value.show()},ue=async function(){const e=E.value;await de(e.host,e.scan_type,e.ports,e.id),D(!0)},de=async function(e,t,a,l){const n=NtopUtils.buildURL(f,{host:e,scan_type:t,scan_single_host:!0,scan_ports:a,scan_id:l});await b.http_post_request(n,M)};async function _e(){const e=NtopUtils.buildURL(f,{scan_single_host:!1});await b.http_post_request(e,M),D(!1)}const pe=async function(){const e=A.value,t=NtopUtils.buildURL(p,{host:e.host,scan_type:e.scan_type,delete_all_scan_hosts:!1,scan_id:e.id});await b.http_post_request(t,M),D(!1)},fe=async function(){const e=NtopUtils.buildURL(p,{delete_all_scan_hosts:!0});await b.http_post_request(e,M),D(!1)};function ve(e){const t={host:e.row.host,scan_type:e.row.scan_type,epoch:e.row.last_scan.epoch},a=x.obj_to_url_params(t),l=`${h}?${a}`;b.download_URI(l)}function me(e){const t=e.row.host,a=e.row.last_scan.time.replace(" ","_"),l={host:t,scan_type:e.row.scan_type,scan_return_result:!0,page:"show_result",epoch:e.row.last_scan.epoch,scan_date:a},n=x.obj_to_url_params(l),s=`${m}?${n}`;x.go_to_url(s)}function he(e){P.value=e}return(e,d)=>(Ps(),js(Ss,null,[Vs("div",LU,[Vs("div",FU,[U.value?(Ps(),js("div",RU,[Vs("span",null,te(i.value),1)])):Ys("v-if",!0),Vs("div",DU,[Vs("div",zU,[T.value?(Ps(),js("div",qU,[BU,Vs("span",null,te(o.value),1)])):Ys("v-if",!0),I.value?(Ps(),js("div",VU,[HU,Vs("span",null,te(n.value),1)])):Ys("v-if",!0),O.value?(Ps(),js("div",GU,[WU,Vs("span",null,te(s.value),1)])):Ys("v-if",!0),Vs("div",KU,[Hs(JP,{ref_key:"modal_delete_confirm",ref:k,title:ya(r),body:ya(c),onDelete:pe,onDelete_all:fe,onScan_row:ue,onScan_all_rows:_e},null,8,["title","body"]),Hs(QP,{ref_key:"modal_update_perioditicy_scan",ref:S,title:ya(u),onUpdate:se},null,8,["title"]),Hs(iv,{ref_key:"table_hosts_to_scan",ref:w,table_id:y.value,csrf:j.value.csrf,f_map_columns:ae,get_extra_params_obj:z,f_sort_rows:H,onCustom_event:q,onRows_loaded:ee},{custom_header:ml((()=>[Vs("button",{class:"btn btn-link",type:"button",ref:"add_host",onClick:R},JU,512)])),_:1},8,["table_id","csrf"])])]),Vs("div",YU,[Vs("button",{type:"button",ref:"delete_all",onClick:Y,class:K(["btn btn-danger me-1",{disabled:0==N.value}])},[ZU,Ks(" "+te(a("delete_all_entries")),1)],2),Vs("button",{type:"button",ref:"scan_all",onClick:re,class:K(["btn btn-primary me-1",{disabled:0==N.value}])},[XU,Ks(" "+te(a("hosts_stats.page_scan_hosts.schedule_all_scan")),1)],2),t.context.is_enterprise_l?(Ps(),js("button",{key:0,type:"button",ref:"update_all",onClick:ce,class:K(["btn btn-secondary me-1",{disabled:0==N.value}])},te(a("hosts_stats.page_scan_hosts.update_periodicity_title")),3)):Ys("v-if",!0)]),Vs("div",QU,[Hs(pv,{note_list:l})])])])]),Hs(xU,{ref_key:"modal_add",ref:$,context:j.value,onAdd:le,onEdit:Z,onCloseModal:d[0]||(d[0]=e=>he(!1)),onOpenModal:d[1]||(d[1]=e=>he(!0)),onHidden:d[2]||(d[2]=e=>he(!1))},null,8,["context"])],64))},__file:"http_src/vue/page-vulnerability-scan.vue"};const tI={class:"row"},aI={class:"col-md-12 col-lg-12"},lI={class:"card card-shadow"},nI=["innerHTML"],sI=["innerHTML"];var oI={__name:"page-host-vs-result",props:{context:Object},setup(e){const t=e,a=`${http_prefix}/lua/rest/v2/get/host/vulnerability_scan_result.lua`;va(null);const l=va(!1),n=va(""),s=va(""),o=va(""),i=va("");return va([]),dn((async()=>{await async function(e,r,c,u){l.value=!0;let d={host:e,scan_type:r,scan_return_result:!0,epoch:u},_=ntopng_url_manager.obj_to_url_params(d),p=`${a}?${_}`,f=await ntopng_utility.http_request(p);n.value=f.rsp,s.value=`<pre>${n.value}</pre>`,"ipv4_netscan"==r&&(e+="/24");const v="true"===t.context.is_in_mem||1==t.context.is_in_mem?`${e} <a href="${http_prefix}/lua/host_details.lua?host=${e}"><i class = "fas fa-laptop"></i></a>`:e;i.value=i18n("hosts_stats.page_scan_hosts.vs_result").replace("%{host}",v),null!=c&&(c=c.replaceAll("_"," ")),i.value=i.value.replace("%{date}",c),o.value=i.value,l.value=!1}(t.context.host,t.context.scan_type,t.context.date,t.context.epoch)})),(e,t)=>(Ps(),js("div",tI,[Vs("div",aI,[Vs("div",lI,[Vs("h3",{class:"d-inline-block pt-3 ps-3",innerHTML:o.value},null,8,nI),l.value?(Ps(),Ls(yf,{key:0})):Ys("v-if",!0),Vs("div",{class:K(["card-body",[l.value?"ntopng-gray-out":""]]),innerHTML:s.value},null,10,sI)])])]))},__file:"http_src/vue/page-host-vs-result.vue"};const iI={class:"row"},rI={class:"col-md-12 col-lg-12"},cI={class:"card card-shadow"},uI={class:"card-body"},dI={id:"open_ports"};var _I={__name:"page-open-ports",props:{context:Object},setup(e){const t=e,a=`${http_prefix}/lua/vulnerability_scan.lua`,l=va("open_ports"),n=e=>e,s=va();t.context.csrf;const o=va({csrf:t.context.csrf,ifid:t.context.ifid,is_enterprise_l:t.context.is_enterprise_l}),i=()=>x.get_url_object();function r(e){let t={click_button_show_hosts:f};null!=t[e.event_id]&&t[e.event_id](e)}function c(e,t){let a={title_i18n:"port",data_field:"port",sortable:!0,class:["text-nowrap","text-end"]},l=e[a.data_field],n=t[a.data_field];return l=_(l),n=_(n),l-n}function u(e,t,a){if(null!=e){let l=t[e.data.data_field],n=a[e.data.data_field];return"port"==e.id?(l=_(l),n=_(n),1==e.sort?l-n:n-l):"count_host"==e.id||"cves"==e.id?(l=d(l),n=d(n),l==n?c(t,a):1==e.sort?l-n:n-l):("hosts"==e.id||(null!=l||(l=""),null!=n||(n="")),l==n?c(t,a):1==e.sort?l.localeCompare(n):n.localeCompare(l))}return c(t,a)}function d(e){let t=0;return""===e||null===e||NaN===e||void 0===e?t=0:(e=e.split(",").join(""),t=parseInt(e)),t}function _(e){return""!=e&&null!=e&&NaN!=e&&null!=e||(e=0),e=parseInt(e)}const p=e=>{let t={hosts:(e,t)=>{let l="";const n=e.split(", "),s=n.length;let o=0;for(;o<5&&o<s;){const e=n[o].split("|"),t=e[0],s=e[1],i=e[2].replace(" ","_"),r="true"===e[3],c=e[4];let u="";e.length>5&&(u=e[5]);let d={host:t,scan_type:s,scan_return_result:!0,page:"show_result",epoch:c,scan_date:i},_=x.obj_to_url_params(d),p=`${a}?${_}`;const f=""!=u?0==r?`${u}  <span class="badge bg-secondary">${i18n("ipv6")}</span>`:u:t;l+=""==l?`<a href="${p}">${f}</a>`:`, <a href="${p}">${f}</a>`,o++}return s>5&&(l+="..."),l}};return e.forEach((e=>{e.render_func=t[e.data_field]})),e};async function f(e){let t={port:e.row.port_number},l=x.obj_to_url_params(t),n=`${a}?${l}`;x.go_to_url(n)}return(e,t)=>(Ps(),js("div",iI,[Vs("div",rI,[Vs("div",cI,[Vs("div",uI,[Vs("div",dI,[Hs(iv,{ref_key:"table_open_ports",ref:s,table_id:l.value,csrf:o.value.csrf,f_map_columns:p,get_extra_params_obj:i,f_sort_rows:u,f_map_config:n,onCustom_event:r},null,8,["table_id","csrf"])])])])])]))},__file:"http_src/vue/page-open-ports.vue"};const pI={class:"form-group ms-2 me-2 mt-3 row"},fI={class:"col-form-label col-sm-2"},vI={class:"col-sm-10"},mI={class:"form-group ms-2 me-2 mt-3 row"},hI={class:"col-form-label col-sm-2"},gI={class:"col-sm-10"},bI={class:"mt-4"},yI=["disabled"];var wI={__name:"modal-edit-vs-report",props:{context:Object},emits:["add","edit"],setup(e,{expose:t,emit:a}){const l=e=>i18n(e),n=va(i18n("hosts_stats.page_scan_hosts.reports_page.edit_report")),s=va(null),o=va(null),i=va(null),r=va(null),c=va(!1),u=[l("hosts_stats.page_scan_hosts.reports_page.notes.note_1")],d=()=>{const e=r.value.epoch,t=i.value.replaceAll(" ","_");a("edit",{report_title:t,epoch_end:e}),s.value.close()},_=()=>{const e=i.value.split(" ").every((e=>yp.validateSingleWord(e)));c.value=e};return t({show:e=>{o.value="",i.value="",r.value=null,(e=>{r.value=e,o.value=e.report_date,i.value=e.name})(e),s.value.show()},close:()=>{s.value.close()}}),(e,t)=>(Ps(),Ls(np,{ref_key:"modal_id",ref:s},{title:ml((()=>[Ks(te(n.value),1)])),body:ml((()=>[Ys(" Target information, here an IP is put "),Vs("div",pI,[Vs("label",fI,[Vs("b",null,te(l("hosts_stats.page_scan_hosts.reports_page.date")),1)]),Vs("div",vI,[wn(Vs("input",{"onUpdate:modelValue":t[0]||(t[0]=e=>o.value=e),disabled:!0,class:"form-control",type:"text"},null,512),[[Mi,o.value]])])]),Vs("div",mI,[Vs("label",hI,[Vs("b",null,te(l("hosts_stats.page_scan_hosts.reports_page.name")),1)]),Vs("div",gI,[wn(Vs("input",{"onUpdate:modelValue":t[1]||(t[1]=e=>i.value=e),class:"form-control",type:"text",onInput:_,required:""},null,544),[[Mi,i.value]])])]),Vs("div",bI,[Hs(pv,{note_list:u})])])),footer:ml((()=>[Vs("div",null,[Vs("button",{type:"button",onClick:d,disabled:!c.value,class:"btn btn-primary"},te(l("apply")),9,yI)])])),_:1},512))},__file:"http_src/vue/modal-edit-vs-report.vue"};const xI={class:"row"},kI={class:"col-md-12 col-lg-12"},$I={class:"card card-shadow"},SI={class:"card-body"},NI={id:"vs_reports"};var CI={__name:"page-vulnerability-scan-report",props:{context:Object},setup(e){const t=e,a=e=>i18n(e);i18n("hosts_stats.page_scan_hosts.notes.generic_notes_1").replaceAll("${http_prefix}",`${http_prefix}`);const l=a("hosts_stats.page_scan_hosts.report_page.delete_title"),n=a("hosts_stats.page_scan_hosts.report_page.delete_description"),s=`${http_prefix}/lua/enterprise/vulnerability_scan_report.lua`,o=`${http_prefix}/lua/pro/rest/v2/delete/vs/report.lua`,i=`${http_prefix}/lua/pro/rest/v2/edit/vs/report.lua`,r=va("vs_reports"),c=va(),u=va(),d=va(),_=va(0),p=va({}),f={csrf:t.context.csrf},v=va({csrf:t.context.csrf,ifid:t.context.ifid});function m(){c.value.refresh_table()}const h=()=>x.get_url_object();function g(e){let t={click_button_edit:S,click_button_delete:$};null!=t[e.event_id]&&t[e.event_id](e)}function y(e,t){let a=t[e.data.data_field];return"report_date"==e.data.data_field&&(a=t.epoch),"name"==e.data.data_field&&(a=function(e,t){let a=e;e.startsWith("Report of")&&(a="report_"+t);return a}(t.name,t.epoch)),a}function w(e,t){return eN.sortByNumber(e.epoch,t.epoch,0)}function k(e,t,a){if(null!=e){let l=y(e,t),n=y(e,a);return l==n?w(t,a):"report_date"==e.id||"tcp_ports"==e.id||"udp_ports"==e.id||"cves"==e.id?eN.sortByNumber(l,n,e.sort):"name"==e.id?eN.sortByName(l,n,e.sort):"num_hosts"==e.id?eN.sortByNumber(l,n,e.sort):eN.sortByName(l,n,e.sort)}return w(t,a)}function $(e){p.value=e.row,d.value.show("delete_single_report")}function S(e){u.value.show(e.row)}async function N(e){await C(e)}const C=async function(e){const t=NtopUtils.buildURL(i,{...e});await b.http_post_request(t,f),m()};function A(){_.value=c.value.get_rows_num()}const E=e=>{let t={report_date:(e,t)=>`<a href="${NtopUtils.buildURL(s,{printable:!1,epoch_end:t.epoch,epoch_begin:t.epoch})}">${e}</a>`};return e.forEach((e=>{e.render_func=t[e.data_field]})),e},T=async function(){const e=p.value,t=NtopUtils.buildURL(o,{epoch:e.epoch});await b.http_post_request(t,f),m()};return(e,t)=>(Ps(),js(Ss,null,[Vs("div",xI,[Vs("div",kI,[Vs("div",$I,[Vs("div",SI,[Vs("div",NI,[Hs(JP,{ref_key:"modal_delete_confirm",ref:d,title:ya(l),body:ya(n),onDelete:T},null,8,["title","body"]),Hs(iv,{ref_key:"table_vs_reports",ref:c,table_id:r.value,csrf:v.value.csrf,f_map_columns:E,get_extra_params_obj:h,f_sort_rows:k,onCustom_event:g,onRows_loaded:A},null,8,["table_id","csrf"])])])])])]),Hs(wI,{ref_key:"modal_edit",ref:u,context:v.value,onEdit:N},null,8,["context"])],64))},__file:"http_src/vue/page-vulnerability-scan-report.vue"};const AI={class:"card h-100 overflow-hidden"},EI={class:"m-2 mt-0",style:{"margin-bottom":""}},TI={class:"m-2 mb-3"},PI={class:"card-footer"};var UI={__name:"page-snmp-usage",props:{context:Object},setup(e){const t=e,a=[{value:"10_min",label:i18n("show_alerts.presets.10_min"),currently_active:!1},{value:"30_min",label:i18n("show_alerts.presets.30_min"),currently_active:!0},{value:"hour",label:i18n("show_alerts.presets.hour"),currently_active:!1},{value:"2_hours",label:i18n("show_alerts.presets.2_hours"),currently_active:!1},{value:"6_hours",label:i18n("show_alerts.presets.6_hours"),currently_active:!1},{value:"12_hours",label:i18n("show_alerts.presets.12_hours"),currently_active:!1},{value:"day",label:i18n("show_alerts.presets.day"),currently_active:!1},{value:"week",label:i18n("show_alerts.presets.week"),currently_active:!1},{value:"month",label:i18n("show_alerts.presets.month"),currently_active:!1},{value:"year",label:i18n("show_alerts.presets.year"),currently_active:!1},{value:"custom",label:i18n("show_alerts.presets.custom"),currently_active:!1,disabled:!0}],l="Congestion",n=va(null),s=va(null),o=va("snmp_usage"),i=va("snmp_usage_chart"),r=t.context.csrf,c=va(null),u=va(ntopChartApex.typeChart.TS_LINE),d=`${http_prefix}/lua/pro/rest/v2/get/snmp/metric/usage_chart.lua`;let _="date_time_picker";const p=[i18n("snmp.chart_congestion_rate_note"),i18n("snmp.chart_congestion_link"),i18n("snmp.chart_congestion_configuration"),i18n("snmp.chart_congestion_rate_color")],f=e=>{const a=v.getFormatter("percentage");let l={ip:(e,t)=>`<a href=${`${http_prefix}/lua/pro/enterprise/snmp_device_details.lua?ip=${e}`}>${e}</a>`,interface:(e,t)=>`<a href=${`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${t.ip}&snmp_port_idx=${t.ifid}`}>${e}</a>`,type:(e,t)=>"uplink"==e?`${i18n("out_usage")} <i class="fa-solid fa-circle-arrow-up" style="color: #C6D9FD"></i>`:`${i18n("in_usage")} <i class="fa-solid fa-circle-arrow-down" style="color: #90EE90"></i>`,speed:(e,t)=>`${v.getFormatter("speed")(e)} <a target="_blank" href='${b(t)}'><i class="fas fa-cog"></i></a>`,min:(e,t)=>a(e),max:(e,t)=>a(e),average:(e,t)=>a(e),last_value:(e,t)=>a(e),congestion_rate:(e,t)=>a(e)};return e.forEach((e=>{if(e.render_func=l[e.data_field],"actions"==e.id){const a={historical_data:t.show_historical};e.button_def_array.forEach((e=>{a[e.id]||e.class.push("disabled")}))}})),e};function m(e,t,a){if(null!=e){const l=t[e.data.data_field],n=a[e.data.data_field];if(l==n)return eN.sortByName(t.device,a.device,e?e.sort:null);if("device_name"==e.id)return eN.sortByName(l,n,e.sort);if("ip"==e.id)return eN.sortByIP(l,n,e.sort);if("interface"==e.id)return eN.sortByName(l,n,e.sort);if("type"==e.id)return eN.sortByName(l,n,e.sort);if("speed"==e.id){const t=-1;return eN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("min"==e.id){const t=-1;return eN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("max"==e.id){const t=-1;return eN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("average"==e.id){const t=-1;return eN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("congestion_rate"==e.id){const t=-1;return eN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("last_value"==e.id){const t=-1;return eN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}}return eN.sortByName(t.device,a.device,e?e.sort:null)}async function h(){if(n.value&&n.value.refresh_table(!1),c.value){const e=await k();c.value.update_chart_series(e?.data)}}const g=()=>ntopng_url_manager.get_url_object();function b(e){return`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${e.ip}&snmp_port_idx=${e.ifid}&page=config`}function y(e){const t=e.row,a=ntopng_url_manager.get_url_entry("epoch_begin"),l=ntopng_url_manager.get_url_entry("epoch_end");window.open(`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${t.ip}&snmp_port_idx=${t.ifid}&page=historical&ifid=-1&epoch_end=${l}&epoch_begin=${a}&timeseries_groups_mode=1_chart_x_metric&timeseries_groups=snmp_interface;-1%2B${t.ip}%2B${t.ifid};snmp_if:usage;uplink=true:false:false:false|downlink=true:false:false:false`)}function w(e){const t=e.row;window.open(b(t))}function x(e){let t={click_button_timeseries:y,click_button_configuration:w};null!=t[e.event_id]&&t[e.event_id](e)}async function k(){let e=null;const t={csrf:r,ifid:-1,epoch_begin:ntopng_url_manager.get_url_entry("epoch_begin"),epoch_end:ntopng_url_manager.get_url_entry("epoch_end"),host:ntopng_url_manager.get_url_entry("host")};e=await ntopng_utility.http_post_request(d,t);const a=Uy.formatSimpleSerie(e,l,"bar",["percentage"],[0,100]);return a.title='<div style="font-size:18px;">'+i18n("snmp.top_congested_devices")+"</div>",a.titleHeight=48,a.axes.y.axisLabelWidth=40,a.xAxisHeight=6,a.axes.x.axisLabelWidth=120,a.axes.x.pixelsPerLabel=20,a.xRangePad=50,localStorage.setItem(`${l}_x_axis_label`,JSON.stringify(e.labels)),localStorage.setItem(`${l}_metadata`,JSON.stringify(e.metadata)),a.axes.x.axisLabelFormatter=function(e,t,a,l){return""},a.axes.x.valueFormatter=function(e,t,a,n){if(null!=e){const t=Number(e.toFixed(4)),a=localStorage.getItem(`${l}_x_axis_label`),n=JSON.parse(a)[t-1];return n?`<span style="white-space: pre-wrap">${n}</span>`:""}},a.clickCallback=function(e,t,a){const n=Number(t.toFixed(4)),s=localStorage.getItem(`${l}_metadata`),o=JSON.parse(s)[n-1];o&&y({row:o})},a}return _n((async()=>{await Promise.all([ntopng_sync.on_ready(_)])})),(e,t)=>(Ps(),js("div",AI,[Hs(E_,{style:{"margin-top":"0.5rem"},class:"ms-1",id:ya(_),enable_refresh:!1,ref_key:"date_time_picker",ref:s,onEpoch_change:h,custom_time_interval_list:a},null,8,["id"]),Vs("div",EI,[Hs(Ag,{ref_key:"chart",ref:c,id:i.value,chart_type:u.value,base_url_request:d,get_custom_chart_options:k,register_on_status_change:!1,disable_pointer_events:!1},null,8,["id","chart_type"])]),Vs("div",TI,[Hs(iv,{ref_key:"table_snmp_usage",ref:n,table_id:o.value,csrf:ya(r),f_map_columns:f,get_extra_params_obj:g,f_sort_rows:m,onCustom_event:x},null,8,["table_id","csrf"])]),Vs("div",PI,[Hs(pv,{note_list:p})])]))}};lp("\n.dygraph-axis-label.dygraph-axis-label-x[data-v-da0f3f1a] {\n    font-size: 12px;\n    transform: rotate(-90deg) translate(-20px, 0);\n}\n"),UI.__scopeId="data-v-da0f3f1a",UI.__file="http_src/vue/page-snmp-usage.vue";const II={class:"m-2 mb-3"},OI=["title"],MI=["onClick","title"],jI={class:"card-footer"};var LI={__name:"page-snmp-interfaces",props:{context:Object},setup(e){const t=e,a=t.context?.inside_a_device?va("snmp_device_interfaces"):va("snmp_interfaces"),l=va(null),n=t.context.csrf,s=va([]),o=va([]),i=[i18n("snmp.snmp_note_periodic_interfaces_polling"),i18n("snmp.snmp_note_thpt_calc"),i18n("snmp.snmp_note_avg_usage")],r={1:"<font color=green>"+i18n("snmp.status_up")+"</font>",101:"<font color=green>"+i18n("snmp.status_up_in_use")+"</font>",2:"<font color=red>"+i18n("snmp.status_down")+"</font>",3:i18n("snmp.testing"),4:i18n("snmp.status_unknown"),5:i18n("snmp.status_dormant"),6:i18n("status_notpresent"),7:"<font color=red>"+i18n("snmp.status_lowerlayerdown")+"</font>"},c={1:i18n("unknown"),2:"<font color=orange>"+i18n("flow_devices.half_duplex")+"</font>",3:"<font color=green>"+i18n("flow_devices.full_duplex")+"</font>"},u=e=>{v.getFormatter("percentage");let a={device_name:(e,t)=>`<a href=${`${http_prefix}/lua/pro/enterprise/snmp_device_details.lua?ip=${t.device_ip}`}>${e}</a>`,interface_name:(e,t)=>`<a href=${`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${t.device_ip}&snmp_port_idx=${t.interface_id}`}>${e}</a>`,vlan:(e,t)=>{let a="";return""!=t.vlan_name&&(a="["+t.vlan_name+"]"),`${e} ${a}`},admin_status:(e,t)=>`${r[e]||""}`,status:(e,t)=>`${r[e]||""}`,duplex_status:(e,t)=>`${c[e]||""}`,num_macs:(e,t)=>{if(e>0){return`<a href=${`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${t.device_ip}&snmp_port_idx=${t.interface_id}&page=layer_2`}>${e}</a>`}return""},in_bytes:(e,t)=>e>0?v.getFormatter("bytes")(e):"",out_bytes:(e,t)=>e>0?v.getFormatter("bytes")(e):"",in_errors:(e,t)=>e>0?v.getFormatter("full_number")(e):"",in_discards:(e,t)=>e>0?v.getFormatter("full_number")(e):"",throughput:(e,t)=>e>0?v.getFormatter("bps")(e):"",uplink_speed:(e,t)=>`${v.getFormatter("speed")(e)} <a href='${m(t,!0)}'><i class="fas fa-cog"></i></a>`,downlink_speed:(e,t)=>`${v.getFormatter("speed")(e)} <a href='${m(t,!0)}'><i class="fas fa-cog"></i></a>`,last_in_usage:(e,t)=>e>0?v.getFormatter("percentage")(e):"",last_out_usage:(e,t)=>e>0?v.getFormatter("percentage")(e):"",last_change:(e,t)=>t.last_change_string};return e.forEach((e=>{if(e.render_func=a[e.data_field],"actions"==e.id){const a={historical_data:t.show_historical};e.button_def_array.forEach((e=>{a[e.id]||e.class.push("disabled")}))}})),e};function d(e,t){t.stopPropagation(),ntopng_url_manager.set_key_to_url(e.key,`${e.value}`),s.value.forEach(((e,t)=>{null==e.basic_label&&(e.basic_label=e.label);const a=ntopng_url_manager.get_url_entry(e.id);null!=a&&e.options.forEach((t=>{t.value.toString()===a&&(e.label=`${e.basic_label}: ${t.label||t.value}`)}))})),l.value.refresh_table()}const _=(e,t)=>a=>{!async function(e,t){e.show_spinner=!0,await Ja(),e.options=s.value.find((t=>t.id==e.id)).options,await Ja();let a=o.value[t];a.load_menu(),e.show_spinner=!1}(e,t)};function p(e,t,a){if(null!=e){const l=t[e.data.data_field],n=a[e.data.data_field];if(l==n)return eN.sortByName(t.device,a.device,e?e.sort:null);if("device_name"==e.id)return eN.sortByName(l,n,e.sort);if("ip"==e.id)return eN.sortByIP(l,n,e.sort);if("interface"==e.id)return eN.sortByName(l,n,e.sort);if("type"==e.id)return eN.sortByName(l,n,e.sort);if("speed"==e.id){const t=-1;return eN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("min"==e.id){const t=-1;return eN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("max"==e.id){const t=-1;return eN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("average"==e.id){const t=-1;return eN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("congestion_rate"==e.id){const t=-1;return eN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("last_value"==e.id){const t=-1;return eN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}}return eN.sortByName(t.device,a.device,e?e.sort:null)}const f=()=>ntopng_url_manager.get_url_object();function m(e,t){return t?`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${e.device_ip}&snmp_port_idx=${e.interface_id}&page=config`:`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${e.device_ip}&page=config`}function h(e){const t=e.row,a=ntopng_url_manager.get_url_entry("epoch_begin"),l=ntopng_url_manager.get_url_entry("epoch_end");window.open(`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${t.ip}&snmp_port_idx=${t.ifid}&page=historical&ifid=-1&epoch_end=${l}&epoch_begin=${a}&timeseries_groups_mode=1_chart_x_metric&timeseries_groups=snmp_interface;-1%2B${t.ip}%2B${t.ifid};snmp_if:usage;uplink=true:false:false:false|downlink=true:false:false:false`)}function g(e){const t=e.row;window.open(m(t))}function b(e){let t={click_button_timeseries:h,"clicfilter_table_array.valuek_button_configuration":g};null!=t[e.event_id]&&t[e.event_id](e)}return _n((async()=>{s.value=await async function(){let e=f(),t=ntopng_url_manager.obj_to_url_params(e);const a=`${http_prefix}/lua/pro/rest/v2/get/snmp/metric/interfaces_filters.lua?${t}`;return(await ntopng_utility.http_request(a)).map((e=>({id:e.name,label:e.label,title:e.tooltip,options:e.value,hidden:1==e.value.length})))}()})),(e,t)=>(Ps(),js(Ss,null,[Vs("div",II,[Hs(iv,{ref_key:"table_snmp_interfaces",ref:l,table_id:ya(a),csrf:ya(n),f_map_columns:u,get_extra_params_obj:f,f_sort_rows:p,onCustom_event:b},{custom_header:ml((()=>[(Ps(!0),js(Ss,null,En(s.value,((e,t)=>(Ps(),Ls(Rd,{f_on_open:_(e,t),ref_for:!0,ref:e=>{o.value[t]=e},hidden:e.hidden},{title:ml((()=>[Hs(rv,{show:e.show_spinner,size:"1rem",class:"me-1"},null,8,["show"]),Vs("a",{class:"ntopng-truncate",title:e.title},te(e.label),9,OI)])),menu:ml((()=>[(Ps(!0),js(Ss,null,En(e.options,(e=>(Ps(),js("a",{style:{cursor:"pointer",display:"block"},onClick:t=>d(e,t),class:"ntopng-truncate tag-filter",title:e.value},[null==e.count?(Ps(),js(Ss,{key:0},[Ks(te(e.label),1)],64)):(Ps(),js(Ss,{key:1},[Ks(te(e.label+" ("+e.count+")"),1)],64))],8,MI)))),256))])),_:2},1032,["f_on_open","hidden"])))),256))])),_:1},8,["table_id","csrf"])]),Vs("div",jI,[Hs(pv,{note_list:i})])],64))},__file:"http_src/vue/page-snmp-interfaces.vue"};const FI={class:"row"},RI={class:"col-md-12 col-lg-12"},DI={class:"card card-shadow"},zI={class:"card-body"},qI={class:"card-footer"};var BI={__name:"page-topology",props:{context:Object},setup(e){const t=e,l=e=>i18n(e),n=[l("snmp.snmp_note_periodic_interfaces_polling"),l("snmp.snmp_note_thpt_calc"),l("snmp.snmp_lldp_cdp_descr")],s=va("topology"),o=va(),i=va(0),r=va({csrf:t.context.csrf,ifid:t.context.ifid}),c=()=>x.get_url_object();function u(e,t){let a=t[e.data.data_field];return"port_id"==e.data.data_field?Number(a.split(">")[1].split("<")[0]):a}function d(e,t,a){if(null!=e){let l=u(e,t),n=u(e,a);return"port_id"==e.id||"port_thpt_value"==e.id?eN.sortByNumber(l,n,e.sort):eN.sortByName(l,n,e.sort)}}function _(){i.value=o.value.get_rows_num()}const p=e=>{let t={uplink_speed:(e,t)=>a.bitsToSize(e),downlink_speed:(e,t)=>a.bitsToSize(e),port_thpt_value:(e,t)=>a.bitsToSize(e)};return e.forEach((e=>{e.render_func=t[e.data_field]})),e};return(e,t)=>(Ps(),js("div",FI,[Vs("div",RI,[Vs("div",DI,[Vs("div",zI,[Hs(iv,{ref_key:"table_topology",ref:o,table_id:s.value,csrf:r.value.csrf,f_map_columns:p,get_extra_params_obj:c,f_sort_rows:d,onRows_loaded:_},null,8,["table_id","csrf"])]),Vs("div",qI,[Hs(pv,{note_list:n})])])])]))},__file:"http_src/vue/page-topology.vue"};const VI={style:{"min-height":"8.5rem"}},HI={class:"form-group ms-2 me-2 mt-3 row"},GI={class:"col-form-label col-sm-4"},WI={class:"col-sm-6"},KI=["pattern"],JI=["disabled"];var YI={__name:"modal-file-save",props:{csrf:String,title:String,get_suggested_file_name:Function,store_file:Function,allow_spaces:Boolean},emits:["file_stored"],setup(e,{expose:t,emit:a}){const l=e,n=va(null),s=va("");va("date");let o=NtopUtils.REGEXES.singleword;const i=xo((()=>!new RegExp(o).test(s.value)));const r=async()=>{l.store_file(s.value),a("file_stored",s.value),c()},c=()=>{n.value.close()};t({show:()=>{!async function(){s.value=l.get_suggested_file_name()}(),n.value.show()},close:c}),_n((()=>{o=l.allow_spaces?NtopUtils.REGEXES.multiword:NtopUtils.REGEXES.singleword}));const u=e=>i18n(e);return(t,a)=>(Ps(),Ls(np,{onShowed:a[1]||(a[1]=e=>{}),ref_key:"modal_id",ref:n},{title:ml((()=>[Ks(te(e.title),1)])),body:ml((()=>[Vs("div",VI,[Vs("div",HI,[Vs("label",GI,[Vs("b",null,te(u("name"))+":",1)]),Vs("div",WI,[wn(Vs("input",{pattern:ya(o),placeholder:"",required:"",type:"text",class:"form-control","onUpdate:modelValue":a[0]||(a[0]=e=>s.value=e)},null,8,KI),[[Mi,s.value]])])])])])),footer:ml((()=>[Vs("button",{type:"button",onClick:r,disabled:ya(i),class:"btn btn-primary"},te(u("save")),9,JI)])),_:1},512))}};lp("\ninput[data-v-87fda19e]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-87fda19e] {\n  cursor: not-allowed;\n}\n"),YI.__scopeId="data-v-87fda19e",YI.__file="http_src/vue/modal-file-save.vue";const ZI={class:"form-group ms-2 me-2 mt-3 row"},XI={class:"col-form-label col-sm-4"},QI={class:"col-sm-8"},eO={value:"name"},tO={value:"date"},aO={class:"form-group ms-2 me-2 mt-3 row"},lO={class:"col-form-label col-sm-4"},nO={class:"col-sm-8"},sO=["disabled"],oO=["disabled"];var iO={__name:"modal-file-open",props:{csrf:String,title:String,file_title:String,list_files:Function,open_file:Function,delete_file:Function},emits:["file_deleted"],setup(e,{expose:t,emit:a}){const l=e,n=va(null),s=va({}),o=va(""),i=va([]),r=va("date");NtopUtils.REGEXES.singleword;const c=xo((()=>""==s.value));function u(){i.value=i.value.sort(((e,t)=>"name"==r.value?e.name.localeCompare(t.name):t.epoch-e.epoch)),i.value.length>0&&(s.value=i.value[0])}const d=()=>{p(),l.open_file(s.value.name)},_=async e=>{let t=s.value.name;1==e&&(t="*"),l.delete_file(t)&&a("file_deleted",t),p()},p=()=>{n.value.close()};t({show:()=>{!async function(){o.value="",i.value=await l.list_files(),i.value.forEach((e=>e.label=function(e){let t=1e3*e.epoch,a=ntopng_utility.from_utc_to_server_date_format(t,"DD/MM/YYYY");return`${e.name} (${a})`}(e))),u(),i.value.length>0&&(s.value=i.value[0])}(),n.value.show()},close:p}),_n((()=>{}));const f=e=>i18n(e);return(t,a)=>(Ps(),Ls(np,{onShowed:a[4]||(a[4]=e=>{}),ref_key:"modal_id",ref:n},{title:ml((()=>[Ks(te(e.title),1)])),body:ml((()=>[Vs("div",ZI,[Vs("label",XI,[Vs("b",null,te(f("order_by")),1)]),Vs("div",QI,[wn(Vs("select",{class:"form-select",onChange:a[0]||(a[0]=e=>u()),"onUpdate:modelValue":a[1]||(a[1]=e=>r.value=e)},[Vs("option",eO,te(f("name")),1),Vs("option",tO,te(f("date")),1)],544),[[Ri,r.value]])])]),Vs("div",aO,[Vs("label",lO,[Vs("b",null,te(e.file_title),1)]),Vs("div",nO,[Hs(l_,{selected_option:s.value,"onUpdate:selected_option":a[2]||(a[2]=e=>s.value=e),options:i.value},null,8,["selected_option","options"])])])])),footer:ml((()=>[Vs("button",{onClick:a[3]||(a[3]=e=>_(!0)),type:"button",style:{"text-align":"left","margin-left":"0px"},class:"btn btn-danger start-0 position-absolute ms-3"},te(f("delete_all_entries")),1),Vs("button",{type:"button",onClick:_,disabled:ya(c),class:"btn btn-danger"},te(f("delete")),9,sO),Vs("button",{type:"button",onClick:d,disabled:ya(c),class:"btn btn-primary"},te(f("open")),9,oO)])),_:1},512))}};lp("\ninput[data-v-1976657e]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-1976657e] {\n  cursor: not-allowed;\n}\n"),iO.__scopeId="data-v-1976657e",iO.__file="http_src/vue/modal-file-open.vue";const rO=e=>(pl("data-v-9db8ba96"),e=e(),fl(),e),cO={class:"form-group ms-2 me-2 mt-3 row"},uO={class:"col-form-label col-sm-4"},dO={class:"col-sm-8"},_O=rO((()=>Vs("span",null," ",-1))),pO=["disabled"];var fO={__name:"modal-file-upload",props:{csrf:String,title:String,file_title:String,upload_file:Function},emits:["file_uploaded"],setup(e,{expose:t,emit:a}){const l=e,n=va(null),s=va(""),o=va(""),i=va(null);function r(){i.value.click()}function c(e){const t=e.target.files;o.value=t[0].name;const l=new FileReader;l.addEventListener("load",(()=>{s.value=l.result})),l.readAsText(t[0]),a("file_uploaded",o.value)}const u=()=>{d(),l.upload_file(s.value)},d=()=>{n.value.close()};t({show:()=>{!async function(){o.value="",s.value=""}(),n.value.show()},close:d}),_n((()=>{}));const _=e=>i18n(e);return(t,a)=>(Ps(),Ls(np,{onShowed:a[0]||(a[0]=e=>{}),ref_key:"modal_id",ref:n},{title:ml((()=>[Ks(te(e.title),1)])),body:ml((()=>[Vs("div",cO,[Vs("label",uO,[Vs("b",null,te(e.file_title),1)]),Vs("div",dO,[Vs("button",{type:"button",onClick:r,class:"btn btn-primary"},te(_("upload")),1),_O,wn(Vs("small",null,"No file selected",512),[[Yi,!s.value]]),wn(Vs("small",null,te(o.value),513),[[Yi,o.value]]),Vs("input",{ref_key:"file_input",ref:i,type:"file",accept:"application/JSON",onChange:c,style:{display:"none"}},null,544)])])])),footer:ml((()=>[Vs("button",{type:"button",onClick:u,disabled:!s.value,class:"btn btn-primary"},te(_("open")),9,pO)])),_:1},512))}};lp("\ninput[data-v-9db8ba96]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-9db8ba96] {\n  cursor: not-allowed;\n}\n"),fO.__scopeId="data-v-9db8ba96",fO.__file="http_src/vue/modal-file-upload.vue";const vO={class:"form-group ms-2 me-2 mt-3 row",style:{"overflow-y":"scroll",height:"45vh"}},mO=["onClick"],hO={class:"card-body"},gO={class:"form-group wizard-form-group"},bO={class:"form-text text-muted"};var yO={__name:"modal-select-component",props:{csrf:String,title:String,list_components:Function,add_component:Function},emits:[],setup(e,{expose:t,emit:a}){const l=e,n=va(null),s=va({}),o=va([]);va("date");function i(e){switch(e){case"pie":return"fa-solid fa-chart-pie";case"table":return"fa-solid fa-table";case"timeseries":return"fa-solid fa-chart-line";default:return""}}const r=()=>{n.value.close()};t({show:()=>{!async function(){o.value=await l.list_components(),o.value.length>0&&(s.value=o.value[0])}(),n.value.show()},close:r}),_n((()=>{}));const c=e=>i18n(e);return(t,a)=>(Ps(),Ls(np,{onShowed:a[0]||(a[0]=e=>{}),ref_key:"modal_id",ref:n},{title:ml((()=>[Ks(te(e.title),1)])),body:ml((()=>[Vs("div",vO,[(Ps(!0),js(Ss,null,En(o.value,(e=>(Ps(),js("div",{class:K(["card w-100 wizard-card",{"wizard-selected":s.value==e}])},[Vs("a",{class:"wizard-link",href:"#",onClick:t=>{s.value=e,r(),l.add_component(s.value)}},[Vs("div",hO,[Vs("div",gO,[Vs("h5",null,[Vs("i",{class:K(i(e.component))},null,2),Ks(" "+te(c(e.i18n_name)),1)]),Vs("small",bO,te(c(e.i18n_descr)),1)])])],8,mO)],2)))),256))])])),footer:ml((()=>[])),_:1},512))}};lp("\ninput[data-v-16713f39]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-16713f39] {\n  cursor: not-allowed;\n}\n"),yO.__scopeId="data-v-16713f39",yO.__file="http_src/vue/modal-select-component.vue";const wO={class:"form-group ms-2 me-2 mt-3 row"},xO={class:"col-sm-2 mt-2"},kO={class:"col-sm-10"},$O={class:"form-group ms-2 me-2 mt-4 row"},SO={class:"col-sm-2 mt-3"},NO={class:"col-sm-6 mt-2"},CO={class:"range"},AO={class:"sliderticks"},EO={class:"form-group ms-2 me-2 mt-3 row"},TO={class:"col-sm-2 mt-2"},PO={class:"col-sm-9 mt-2"},UO={class:"range"},IO={class:"sliderticks"},OO={key:0,class:"form-group ms-2 me-2 mt-3 row"},MO={class:"col-sm-2 mt-2"},jO={class:"col-sm-5"},LO={class:"form-group ms-2 me-2 mt-3 row"},FO={class:"col-sm-2 mt-2"},RO={class:"col-sm-5"},DO={class:"ms-2 mb-3 mt-4 row"},zO={class:"col-form-label col-sm-3 pe-0",id:"advanced-view"},qO={class:"col-sm-2 ps-0"},BO={class:"form-check form-switch mt-2",id:"advanced-view"},VO={key:1,class:"form-group ms-2 me-2 mt-3 row"},HO={class:"col-sm-12"},GO={key:0,style:{color:"rgba(255, 0, 0, 0.797)"}},WO=["disabled"];var KO={__name:"modal-edit-component",props:{csrf:String},emits:["edit"],setup(e,{expose:t,emit:a}){const l=e=>i18n(e),n=va(i18n("dashboard.edit_component")),s=va(null),o=[{id:1,size_component_value:4},{id:2,size_component_value:6},{id:3,size_component_value:12},{id:4,size_component_value:-1}],i=va([{value:"current",label:l("dashboard.current_time"),default:!0},{value:"5_min",label:l("dashboard.time_window_list.5_min")},{value:"30_min",label:l("dashboard.time_window_list.30_min")},{value:"hour",label:l("dashboard.time_window_list.hour")},{value:"2_hours",label:l("dashboard.time_window_list.2_hours")},{value:"12_hours",label:l("dashboard.time_window_list.12_hours")},{value:"day",label:l("dashboard.time_window_list.day")},{value:"week",label:l("dashboard.time_window_list.week")},{value:"month",label:l("dashboard.time_window_list.month")},{value:"year",label:l("dashboard.time_window_list.year")}]),r=va([{value:"current",label:l("dashboard.current_time"),default:!0},{value:"hour",label:l("dashboard.time_offset_list.hour")},{value:"day",label:l("dashboard.time_offset_list.day")},{value:"week",label:l("dashboard.time_offset_list.week")},{value:"month",label:l("dashboard.time_offset_list.month")},{value:"year",label:l("dashboard.time_offset_list.year")}]),c=va(null),u=va(null),d=va(null),_=va(null),p=va(null),f=va(null),v=va(null),m=va(!1),h=va(!1),g=va(!1),b=function(){m.value=!m.value},y=function(){h.value=!1;try{p.value=JSON.stringify(JSON.parse(p.value),null,2)}catch(e){h.value=!0}return p.value},w=function(e,t){return JS.isEmptyOrNull(e)?t.find((e=>e.default)):t.find((t=>t.value==e))},x=function(e){c.value=null,h.value=!1,g.value=e,u.value="",_.value=1,d.value=1},k=e=>{c.value=e,u.value=e.custom_name,d.value=S(e.width),_.value=S(e.height),f.value=w(e.time_window,i.value),v.value=w(e.time_offset,r.value),p.value=JSON.stringify(e.params,null,2)},$=e=>o.find((t=>t.id==Number(e))).size_component_value,S=e=>o.find((t=>t.size_component_value==Number(e))).id,N=()=>{const e=$(d.value),t=$(_.value),l=`${p.value}`;a("edit",{id:c.value.id,title:u.value,height:t,width:e,time_offset:v.value.value,time_window:f.value.value,rest_params:l}),s.value.close()};return t({show:(e,t)=>{x(t),k(e),s.value.show()}}),(e,t)=>(Ps(),Ls(np,{ref_key:"modal_id",ref:s},{title:ml((()=>[Ks(te(n.value),1)])),body:ml((()=>[Ys(" Title "),Vs("div",wO,[Vs("label",xO,[Vs("b",null,te(l("dashboard.component_title")),1)]),Vs("div",kO,[wn(Vs("input",{"onUpdate:modelValue":t[0]||(t[0]=e=>u.value=e),class:"form-control",type:"text",required:""},null,512),[[Mi,u.value]])])]),Ys(" Width "),Vs("div",$O,[Vs("label",SO,[Vs("b",null,te(l("dashboard.component_width")),1)]),Vs("div",NO,[Vs("div",CO,[wn(Vs("input",{type:"range",id:"slider","onUpdate:modelValue":t[1]||(t[1]=e=>d.value=e),style:{width:"100%"},min:"1",max:"3",step:"1"},null,512),[[Mi,d.value]]),Vs("div",AO,[Vs("p",null,te(l("dashboard.component_sizes.small")),1),Vs("p",null,te(l("dashboard.component_sizes.medium")),1),Vs("p",null,te(l("dashboard.component_sizes.large")),1)])])])]),Ys(" Height "),Vs("div",EO,[Vs("label",TO,[Vs("b",null,te(l("dashboard.component_height")),1)]),Vs("div",PO,[Vs("div",UO,[wn(Vs("input",{type:"range",id:"slider","onUpdate:modelValue":t[2]||(t[2]=e=>_.value=e),style:{width:"100%"},min:"1",max:"4",step:"1"},null,512),[[Mi,_.value]]),Vs("div",IO,[Vs("p",null,te(l("dashboard.component_sizes.small")),1),Vs("p",null,te(l("dashboard.component_sizes.medium")),1),Vs("p",null,te(l("dashboard.component_sizes.large")),1),Vs("p",null,te(l("dashboard.component_sizes.auto")),1)])])])]),Ys(" Time Window "),g.value?Ys("v-if",!0):(Ps(),js("div",OO,[Vs("label",MO,[Vs("b",null,te(l("dashboard.time_window")),1)]),Vs("div",jO,[Hs(l_,{selected_option:f.value,"onUpdate:selected_option":t[3]||(t[3]=e=>f.value=e),options:i.value},null,8,["selected_option","options"])])])),Ys(" Time Offset "),Vs("div",LO,[Vs("label",FO,[Vs("b",null,te(l("dashboard.time_offset")),1)]),Vs("div",RO,[Hs(l_,{selected_option:v.value,"onUpdate:selected_option":t[4]||(t[4]=e=>v.value=e),options:r.value},null,8,["selected_option","options"])])]),Ys(" Advanced Settings "),Vs("div",DO,[Vs("label",zO,[Vs("b",null,te(l("dashboard.advanced_settings")),1)]),Vs("div",qO,[Vs("div",BO,[Vs("input",{name:"show_advanced_settings",class:"form-check-input",type:"checkbox",onInput:b,role:"switch"},null,32)])])]),Ys(" REST Params "),m.value?(Ps(),js("div",VO,[Vs("div",HO,[h.value?(Ps(),js("p",GO,te(l("dashboard.component_json_error")),1)):Ys("v-if",!0),wn(Vs("textarea",{class:"highlighted-json","onUpdate:modelValue":t[5]||(t[5]=e=>p.value=e),onFocusout:y,style:{width:"100%",height:"100%"},rows:"16",cols:"10"},null,544),[[Mi,p.value]])])])):Ys("v-if",!0)])),footer:ml((()=>[Vs("div",null,[Vs("button",{type:"button",onClick:N,disabled:h.value,class:"btn btn-primary"},te(l("apply")),9,WO)])])),_:1},512))},__file:"http_src/vue/modal-edit-component.vue"};const JO={class:"mb-1 me-3",style:{position:"absolute",bottom:"0px",right:"0px"}};var YO={__name:"dashboard-box",props:{color:String,width:Number,height:Number},setup(e){const t=e,a=xo((()=>`col-${t.width||4}`)),l=xo((()=>{let e="";return t.color&&(e=`bg-${t.color}`),`row-${t.height||4} ${e}`}));return(e,t)=>(Ps(),js("div",{class:K([ya(a),"widget-box-main-dashboard"])},[Vs("div",{class:K([ya(l),"widget-box"]),style:{position:"relative"}},[Ys(" title "),Pn(e.$slots,"box_title"),Ys(" content "),Pn(e.$slots,"box_content"),Ys(" footer "),Vs("div",JO,[Pn(e.$slots,"box_footer")])],2)],2))},__file:"http_src/vue/dashboard-box.vue"},ZO={__name:"dashboard-empty",props:{id:String,i18n_title:String,ifid:String,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function,filters:Object},setup(e){const t=e;async function a(){}return Ml((()=>[t.epoch_begin,t.epoch_end,t.filters]),((e,t)=>{a()}),{flush:"pre",deep:!0}),dn((()=>{a()})),_n((()=>{})),(e,t)=>(Ps(),js("div"))},__file:"http_src/vue/dashboard-empty.vue"};const XO={class:"table-responsive",style:{"margin-left":"-1rem","margin-right":"-1rem"}};var QO={__name:"dashboard-table",props:{id:String,i18n_title:String,ifid:String,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function,filters:Object},setup(e){const t=e,l=va("simple_table"),n=va([]),s=xo((()=>{let e=t.params.columns.map((e=>(!e.style&&e.data_type&&("bytes"==e.data_type||"date"==e.data_type?e.style="text-align: right":"count_score"==e.data_type&&(e.style="text-align: center")),{...e})));return e[0].class=(e[0].class?e[0].class+" ":"")+"first-col-width",e}));Ml((()=>[t.epoch_begin,t.epoch_end,t.filters]),((e,t)=>{c()}),{flush:"pre",deep:!0}),dn((()=>{c()})),_n((()=>{}));const o=function(e){return e.i18n_name?(e=>i18n(e))(e.i18n_name):""},i={throughput:function(e,t){return"name"==e.id?t.url?`<a href='${t.url}'>${t.name}</a>`:t.name:"throughput"==e.id?t.throughput_type&&"pps"==t.throughput_type?a.fpackets(t[e.id]):t.throughput_type&&"bps"==t.throughput_type?a.bitsToSize(t[e.id]):t.throughput:""},db_search:function(e,t){if("host"==e.data_type)return a.formatHost(t[e.id],t,"cli_ip"==e.id);if("network"==e.data_type)return a.formatNetwork(t[e.id],t);if("asn"==e.data_type)return a.formatASN(t[e.id],t);if("country"==e.data_type)return a.formatCountry(t[e.id],t);if(v.types[e.data_type]){return v.getFormatter(e.data_type)(t[e.id])}return"object"==typeof t[e.id]?a.formatGenericObj(t[e.id],t):t[e.id]},vs_scan_result:function(e,a){return"host"==e.id?jU(a[e.id],a,t.ifid):"last_scan"==e.id?NU(a[e.id],a):"duration"==e.id?CU(a[e.id],a):"scan_frequency"==e.id?AU(a[e.id]):"is_ok_last_scan"==e.id?EU(a[e.id]):"tcp_ports"==e.id?IU(a[e.id],a):"udp_ports"==e.id?UU(a[e.id],a):"scan_type"==e.id?SU(a[e.id],!0,a):"hosts"==e.id?((e,t)=>{const a=e.split(", ");let l="",n=new Map;return a.forEach((e=>{let t=e.split("|");n.set(t.length>5&&null!=t[5]&&""!=t[5]?t[5]:t[0],{scan_type:t[1],ip:t[0],date:t[2].replace(" ","_"),is_ipv4:"true"==t[3],epoch:t[4]})})),n=new Map([...n.entries()].sort()),n.forEach(((e,t)=>{let a=MU(e.ip,e.scan_type,e.date,e.epoch);e.is_ipv4?l+=`<li> <a href="${a}">${t}</a></li>`:l+=`<li> <a href="${a}">${t} <span class="badge bg-secondary">${i18n("ipv6")}</span></a></li>`})),l})(a[e.id]):"cve"==e.id||"cve_list"==e.id?((e,t)=>{let a="",l=0;if(1==t.is_ok_last_scan&&null!=t.last_scan&&null!=t.last_scan.time&&null!=e){let n=new Map;e.forEach((e=>{let t=e.split("|"),a=0;t.length>1&&(a=Number(t[1])),n.set(t[0],a)})),n=new Map([...n.entries()].sort(((e,t)=>t[1]-e[1]))),n.forEach(((e,n)=>{if(!(l<100))return a;{let s="";s=0==e?"bg-success":e<3.9?"bg-secondary":e<7?"bg-warning":"bg-danger";const o=ntopng_utility.get_cve_details_url(n,t.scan_type);a+=`<li  title='${i18n("hosts_stats.page_scan_hosts.report.cves_title")}'>\n                        <a href="${o}"><span class="badge ${s}">${n} </span></a> \n                        (${e})\n                    </li>`,l++}}))}return a})(a[e.id],a):"port"==e.id?((e,t)=>{let a=e;return null!=t.port_label&&t.port_label!=e&&(a+=` (${t.port_label})`),a})(a[e.id],a):"max_score_cve"==e.id?$U(a[e.id],a):"num_vulnerabilities_found"==e.id?kU(a[e.id],a):"tcp_udp_ports_list"==e.id?((e,t,a)=>{let l=new Map;if(1==a.is_ok_last_scan&&null!=a.last_scan&&null!=a.last_scan.time&&null!=e){const t=e.split(",");let n="",s="";t.forEach((e=>{if(null!=e&&""!=e){if(n=e,s=e,a.host_in_mem){const t=OU(e,0,a.tcp_ports_unused,a.tcp_ports_filtered);null!=t&&(n+=t)}n=`<li>${n}</li>`,l.set(e,{port_label:n,port_id:Number(s.split("/")[0])})}})),null!=a.tcp_ports_filtered&&a.tcp_ports_filtered.forEach((e=>{n=e+="/tcp",s=e,a.host_in_mem&&(n+=` <span class="badge bg-primary" title='${i18n("hosts_stats.page_scan_hosts.filtered_port")}'><i class="fa-solid fa-filter"></i></span>`),n=`<li>${n}</li>`,l.set(e,{port_label:n,port_id:Number(s.split("/")[0])})}))}if(1==a.is_ok_last_scan&&null!=a.last_scan&&null!=a.last_scan.time&&null!=t){const e=t.split(",");let n="",s="";e.forEach((e=>{if(null!=e&&""!=e){if(n=e,s=e,a.host_in_mem){const t=OU(e,0,a.udp_ports_unused,a.udp_ports_filtered);null!=t&&(n+=t)}n=`<li>${n}</li>`,l.set(e,{port_label:n,port_id:Number(s.split("/")[0])})}})),null!=a.udp_filtered_ports&&a.udp_ports_filtered.forEach((e=>{n=e+="/udp",s=e,a.host_in_mem&&(n+=` <span class="badge bg-primary" title='${i18n("hosts_stats.page_scan_hosts.filtered_port")}'><i class="fa-solid fa-filter"></i></span>`),n=`<li>${e}</li>`,l.set(e,{port_label:n,port_id:Number(s.split("/")[0])})}))}let n="";return l=new Map([...l.entries()].sort(((e,t)=>e[1].port_id-t[1].port_id))),l.forEach(((e,t)=>{n+=`${e.port_label}`})),n})(a.tcp_ports_list,a.udp_ports_list,a):"discovered_hosts"==e.id?(e=>{const t=e.split(",");let a="";return t.forEach((e=>{""!=e&&(a+=`<li>${e}</li>`)})),a})(a[e.id]):a[e.id]}},r=function(e,a){if(t.params&&t.params.table_type&&i[t.params.table_type]){return(0,i[t.params.table_type])(e,a)}return a[e.id]?a[e.id]:""};async function c(){const e={ifid:t.ifid,epoch_begin:t.epoch_begin,epoch_end:t.epoch_end,...t.params.url_params,...t.filters},a=ntopng_url_manager.obj_to_url_params(e);let l=await t.get_component_data(`${http_prefix}${t.params.url}`,a),s=[];if(s="db_search"==t.params.table_type?l.records:l,"vs_scan_result"!=t.params.table_type){const e=t.max_height?t.max_height/4*6:6;s=s.slice(0,e)}n.value=s}return(e,t)=>(Ps(),js("div",XO,[Hs(Pw,{id:l.value,columns:ya(s),rows:n.value,print_html_column:o,print_html_row:r,wrap_columns:!0},null,8,["id","columns","rows"])]))}};lp("\n.first-col-width {\n    /* max-width: 100% !important; */\n}\n@media print and (max-width: 210mm) {\ntd.first-col-width {\n\tmax-width: 55mm !important;\n}\n}\n@media print and (min-width: 211mm) {\ntd.first-col-width {\n\tmax-width: 95mm !important;\n}\n}\n\n/* @media print and (max-width: 148mm){ */\n/* } */\n\n"),QO.__file="http_src/vue/dashboard-table.vue";const eM={class:"d-flex align-items-center justify-content-between"},tM=["href"],aM={class:"fw-normal text-white"},lM={class:"subtitle text-white text-sm text mb-0 h5"},nM={class:"flex-shrink-0 ms-3"};var sM={__name:"dashboard-badge",props:{id:String,i18n_title:String,ifid:String,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function,set_component_attr:Function,filters:Object},setup(e){const t=e,a=va(""),l=va(""),n=va(""),s=va("#");async function o(){if(t.params.url){const e={ifid:t.ifid,epoch_begin:t.epoch_begin,epoch_end:t.epoch_end,...t.params.url_params,...t.filters},l=ntopng_url_manager.obj_to_url_params(e);let n=await t.get_component_data(`${http_prefix}${t.params.url}`,l),o=n[t.params.counter_path],i=n[t.params.counter_formatter];i||(i="number");let r=v.getFormatter(i);if(a.value=r(o),o&&t.set_component_attr("active",!0),t.params.link){const e={ifid:t.ifid,epoch_begin:t.epoch_begin,epoch_end:t.epoch_end,...t.params.link.url_params},a=ntopng_url_manager.obj_to_url_params(e);s.value=`${http_prefix}${t.params.link.url}?${a}`}}}return Ml((()=>[t.epoch_begin,t.epoch_end,t.filters]),((e,t)=>{o()}),{flush:"pre",deep:!0}),dn((()=>{!function(){t.params.i18n_name&&(l.value=(e=>i18n(e))(t.params.i18n_name));t.params.icon&&(n.value=t.params.icon+" fa-2xl");o()}()})),_n((()=>{})),(e,t)=>(Ps(),js("div",eM,[Vs("div",null,[Vs("a",{href:s.value},[Vs("h4",aM,te(a.value),1),Vs("p",lM,te(l.value),1)],8,tM)]),Vs("div",nM,[Vs("i",{class:K(["text-white",n.value])},null,2)])]))},__file:"http_src/vue/dashboard-badge.vue"},oM={__name:"dashboard-pie",props:{id:String,i18n_title:String,ifid:String,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function,filters:Object},setup(e){const t=e,a=va(ntopChartApex.typeChart.DONUT),l=va(null),n=xo((()=>`${http_prefix}${t.params.url}`));function s(){const e=n.value,a=(()=>{const e={ifid:t.ifid,epoch_begin:t.epoch_begin,epoch_end:t.epoch_end,new_charts:!0,...t.params.url_params,...t.filters};let a=ntopng_url_manager.obj_to_url_params(e);return a=a.replaceAll("%24IFID%24",t.ifid),a})();return t.get_component_data(e,a)}return Ml((()=>[t.epoch_begin,t.epoch_end,t.filters]),((e,t)=>{!async function(){l.value.update_chart()}()}),{flush:"pre",deep:!0}),dn((()=>{})),_n((()=>{})),(t,o)=>(Ps(),js("div",null,[Hs(C_,{ref_key:"chart",ref:l,id:e.id,chart_type:a.value,base_url_request:ya(n),get_custom_chart_options:s,register_on_status_change:!1},null,8,["id","chart_type","base_url_request"])]))},__file:"http_src/vue/dashboard-pie.vue"},iM={__name:"dashboard-timeseries",props:{id:String,i18n_title:String,ifid:String,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function,csrf:String,filters:Object},setup(e){const t=e,a=va(ntopChartApex.typeChart.TS_LINE),l=va(null),n=va([]),s=Uy.getGroupOptionMode("1_chart_x_yaxis"),o=va(null),i=va([]),r=xo((()=>`${http_prefix}${t.params.url}`));function c(e,t){let a={};for(const l in e)e[l].contains("$IFID$")?a[l]=e[l].replace("$IFID$",t):a[l]=e[l];return a}async function u(e){if(i.value.length>0)return;(await ntopng_utility.http_request(`${http_prefix}/lua/rest/v2/get/ntopng/interfaces.lua`)||[]).forEach((t=>{let a=c(e,t.ifid);a.source_def=[t.ifid],i.value.push(a)}))}async function d(e){if(i.value.length>0)return;const a=await ntopng_utility.http_request(`${http_prefix}/lua/pro/rest/v2/get/flowdevices/stats.lua?ifid=${t.ifid}&gui=true`)||[];a&&a.forEach((t=>{if(t){let a=function(e,t){let a={};for(const l in e)e[l].contains("$EXPORTER$")?a[l]=e[l].replace("$EXPORTER$",t):a[l]=e[l];return a}(e,t.probe_ip);a=c(a,t.ifid),a.source_def=[t.ifid,t.probe_ip],i.value.push(a)}}))}async function _(e){if(i.value.length>0)return;const a=await ntopng_utility.http_request(`${http_prefix}/lua/rest/v2/get/network/networks.lua?ifid=${t.ifid}`)||[];a&&a.forEach((a=>{if(a){let l=function(e,t){let a={};for(const l in e)e[l].contains("$NETWORK$")?a[l]=e[l].replace("$NETWORK$",t):a[l]=e[l];return a}(e,a.id);l=c(l,t.ifid),l.source_def=[t.ifid,a.id],i.value.push(l)}}))}async function p(e,a){const l={epoch_begin:t.epoch_begin,epoch_end:t.epoch_end},n=Kb.get_source_type_from_id(t.params?.source_type),s=await Kb.get_source_array_from_value_array(http_prefix,n,a),o=await Kb.get_metric_from_schema(http_prefix,n,s,e,null,l);return Kb.get_ts_group(n,s,o)}async function f(){await async function(){i.value=[];const e=t.params.post_params?.ts_requests;for(const a in e||{})switch(a){case"$ANY_IFID$":await u(e[a]);break;case"$ANY_EXPORTER$":await d(e[a]);break;case"$ANY_NETWORK$":await _(e[a]);break;default:let l=c(e[a],t.ifid);l.source_def=[t.ifid],i.value.push(l)}}(),await async function(){if(0==n.value.length)for(const e of i.value){const t=e?.ts_schema,a=e.source_def;delete e.source_def;const l=await p(t,a);n.value.push(l)}}(),function(){for(const e of i.value)e.source_def&&delete e.source_def}();const e=r.value,a={csrf:t.csrf,ifid:t.ifid,epoch_begin:t.epoch_begin,epoch_end:t.epoch_end,...t.params.post_params,ts_requests:i.value};let l=await t.get_component_data(e,"",a);return l=Uy.tsArrayToOptionsArray(l,n.value,s,""),l[0]&&(l[0].height=o.value),l?.[0]}return Ml((()=>[t.epoch_begin,t.epoch_end,t.filters]),((e,t)=>{!async function(){if(l.value){const e=await f();l.value.update_chart_series(e.data)}}()}),{flush:"pre",deep:!0}),dn((async()=>{await async function(){o.value=62.5*(t.max_height||4)}()})),_n((async()=>{})),(t,n)=>(Ps(),js("div",null,[Hs(Ag,{ref_key:"chart",ref:l,id:e.id,chart_type:a.value,base_url_request:ya(r),get_custom_chart_options:f,register_on_status_change:!1,disable_pointer_events:!1},null,8,["id","chart_type","base_url_request"])]))},__file:"http_src/vue/dashboard-timeseries.vue"},rM={__name:"dashboard-sankey",props:{id:String,i18n_title:String,ifid:String,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function,filters:Object},setup(e){const t=e,a=(e=>i18n(e))("ports_analysis.no_data"),l=va(null),n=va({}),s=va(null),o=va(null),i=va(null);Ml((()=>[t.epoch_begin,t.epoch_end,t.filters]),((e,t)=>{r()}),{flush:"pre",deep:!0}),dn((()=>{})),_n((()=>{i.value=62.5*t.max_height,o.value=$(s.value).width(),r()}));const r=function(){!async function(){let e=await async function(){const e=`${http_prefix}${t.params.url}`,a={ifid:t.ifid,epoch_begin:t.epoch_begin,epoch_end:t.epoch_end,sankey_version:3,...t.params.url_params,...t.filters};let n=ntopng_url_manager.obj_to_url_params(a),s=await t.get_component_data(e,n);s=function(e){let t=e=>console.error(`link (source: ${e.source_node_id}, target: ${e.target_node_id}) removed for not existing source/target node`),a=function(e,t){let a={};e.nodes.forEach((e=>a[e.node_id]=!0));let l=e=>null!=a[e.source_node_id]&&null!=a[e.target_node_id],n=function(e,t,a){return e.filter((e=>{const l=t(e);return 0==l&&null!=a&&a(e),l}))}(e.links,l,t);return n}(e,t);return{nodes:e.nodes,links:a}}(s);const o=function(e){let t={},a={};e.nodes.forEach((e=>t[e.node_id]=e));let l=e=>`${e.source_node_id}_${e.label}`;e.links.forEach((e=>{let n=l(e),s=a[n];null==s&&(s={id:n,label:e.label,link:e.optional_info.link,node_links:[]},a[n]=s),s.node_links.push({source:t[e.source_node_id],target:t[e.target_node_id],value:e.value})}));let n=e.nodes.map((e=>e)),s=[];for(let e in a){let t=a[e],l={node_id:t.id,label:t.label,link:t.link};n.push(l),t.node_links.forEach((e=>{s.push({source_node_id:e.source.node_id,target_node_id:l.node_id,label:`${e.source.label} - ${e.target.label}: ${l.label}`,value:e.value}),s.push({source_node_id:l.node_id,target_node_id:e.target.node_id,label:`${e.source.label} - ${e.target.label}: ${l.label}`,value:e.value})}))}let o=n.map(((e,t)=>({index:t,label:e.label,data:e}))),i={};o.forEach(((e,t)=>i[e.data.node_id]=e));let r=s.map((e=>({source:i[e.source_node_id].index,target:i[e.target_node_id].index,value:e.value,label:e.label})));return{nodes:o,links:r}}(s);return o.links.length>0&&o.nodes.length>0?l.value.set_no_data_flag(!1):l.value.set_no_data_flag(!0),o}();n.value=e}()};function c(e){1!=e.is_link_node&&e.link&&ntopng_url_manager.go_to_url(e.link)}return(e,t)=>(Ps(),js("div",{ref_key:"body_div",ref:s},[Hs(jS,{ref_key:"sankey_chart",ref:l,width:o.value,height:i.value,no_data_message:ya(a),sankey_data:n.value,onNode_click:c},null,8,["width","height","no_data_message","sankey_data"])],512))},__file:"http_src/vue/dashboard-sankey.vue"};const cM=e=>(pl("data-v-c360f212"),e=e(),fl(),e),uM={class:"row"},dM={class:"me-2"},_M=["title"],pM=[cM((()=>Vs("i",{class:"fa-solid fa-floppy-disk"},null,-1)))],fM=["title"],vM=[cM((()=>Vs("i",{class:"fa-solid fa-folder-open"},null,-1)))],mM=["title"],hM=[cM((()=>Vs("i",{class:"fa-solid fa-file-arrow-down"},null,-1)))],gM=["title"],bM=[cM((()=>Vs("i",{class:"fa-solid fa-file-arrow-up"},null,-1)))],yM=["title"],wM=[cM((()=>Vs("i",{class:"fas fa-print"},null,-1)))],xM=["title"],kM=[cM((()=>Vs("i",{class:"fas fa-folder-plus"},null,-1)))],$M=["title"],SM=[cM((()=>Vs("i",{class:"fas fa-pen-to-square"},null,-1)))],NM={class:"btn-group me-auto mt-2 btn-group-sm flex-wrap d-flex"},CM={class:"me-2"},AM={class:"ms-1 my-auto me-2 filters-label"},EM={key:0,class:"d-flex align-items-center ms-2"},TM={class:"me-2"},PM=cM((()=>Vs("div",null,[Vs("label",{class:"my-auto me-2"})],-1))),UM={key:1,class:"me-auto mt-2 flex-wrap d-flex"},IM=["title"],OM=[cM((()=>Vs("i",{class:"fas fa-square-plus"},null,-1)))],MM=["title"],jM=[cM((()=>Vs("i",{class:"fas fa-trash-can"},null,-1)))],LM={class:"text-warning",style:{"margin-top":"0.5rem","margin-left":"1rem"}},FM={key:2,class:"mt-3",style:{"margin-bottom":"-0.5rem",display:"inline"}},RM={style:{"text-align":"center"}},DM={key:0},zM=["title"],qM=[cM((()=>Vs("i",{class:"fa-solid fa-file-arrow-down"},null,-1)))],BM=["title"],VM=[cM((()=>Vs("i",{class:"fa-solid fa-file-arrow-up"},null,-1)))],HM=["title"],GM=[cM((()=>Vs("i",{class:"fas fa-print"},null,-1)))],WM={key:0,class:"col-sm mt-1"},KM={class:"alert alert-warning"},JM={key:1,class:"col-sm mt-1"},YM={class:"alert alert-secondary sm-1 text-center",style:{width:"40%",margin:"auto","margin-top":"5vh","margin-bottom":"5vh"}},ZM={class:"alert-heading"},XM={class:"mb-0"},QM={key:0,class:"dashboard-component-title modal-header"},ej={class:"modal-title"},tj={style:{color:"gray"}},aj={key:0,class:"modal-close"},lj={class:"btn-group"},nj=["data-component-id"],sj=["data-component-id"],oj={key:0,style:{color:"lightgray","font-size":"12px"}};var ij={__name:"dashboard",props:{context:Object},setup(e){const t=e,a=e=>i18n(e),l=b.get_timeframes_dict(),n={badge:sM,empty:ZO,pie:oM,timeseries:iM,table:QO,sankey:rM},s=va(!0),o=t.context.show_loading||!1,i=t.context.allow_edit||!1,r=va(null),c=va(null),u=va(null),d=va(null),_=va(null),p=va(null),f=va(null),v=va(null),m=va([]),h=va(!1),g=va({}),w=va({}),k=va({}),$=va([]),S=va([]),N=va([]),A=va({}),E=va("");let T={},P=!1,U=!1;const I=va(!1);let O=null;const M=va(null),j=xo((()=>"report"!=t.context.page&&"vs-report"!=t.context.page)),L=xo((()=>"report"==t.context.page&&!U)),F=xo((()=>"vs-report"==t.context.page)),R=xo((()=>!0)),D=xo((()=>1==A.value?.toolbox?.time?.hide)),z=xo((()=>1==A.value.is_open_report||D.value)),q=xo((()=>1==A.value.is_open_report||"vs-report"==t.context.page)),B=xo((()=>{let e="";return A.value.is_open_report?e=`Report: ${A.value.value}`:t.context.title&&(e=t.context.title),e})),H=xo((()=>e=>null==e.params.custom_style||U&&!e.params.custom_print_style?e.params.custom_print_style&&1==U?e.params.custom_print_style:"":e.params.custom_style)),G=xo((()=>e=>ye(e.epoch_begin,e.epoch_end)));async function W(e){let a=null;U="true"==x.get_url_entry("printable"),"report"!=t.context.page&&"vs-report"!=t.context.page||("report"==t.context.page?a=b.check_and_set_default_time_interval(void 0,void 0,!0,"min"):"vs-report"==t.context.page&&(a=b.check_and_set_default_time_interval(void 0,void 0,!0)),v.value=a),await async function(e){const a=t.context.template_list_endpoint;let l=await b.http_request(a);if(null==l?.list)return;let n=l.list.map((e=>({value:e.name,label:e.label,disabled:!1,toolbox:e.toolbox,is_open_report:!1,allow_edit:e.allow_edit})));n.sort(((e,t)=>e.label.toUpperCase().localeCompare(t.label.toUpperCase()))),N.value=n;const s=e||x.get_url_entry("report_template")||t.context.template;t.context.template=s,A.value=N.value.find((e=>e.value==s)),null==A.value&&(A.value=N.value[0]);!A.value.allow_edit&&I.value&&Te()}(e);let l=x.get_url_entry("report_name");null!=l&&""!=l?await pe(l):await Q(a,A.value.value),1==U&&we(),h.value=!0}dn((async()=>{W()})),_n((async()=>{"dashboard"==t.context.page&&setInterval((()=>{Y()}),1e4)}));function J(e,t){t&&(t+=";eq"),x.set_key_to_url(e,t),m.value.forEach(((a,l)=>{!function(e,t,a){e.filters[t]=a}(a,e,t)}))}function Y(e){e&&(v.value=e),m.value.forEach(((t,a)=>{ee(t,e)}))}function Z(){for(const[e,t]of Object.entries(w.value))J(e,t[0].value),g.value[e]=t[0],ae(e)}async function X(e,a){const l=[];return!a&&`${t.context.report_filters_endpoint}`&&(a=await b.http_request(`${t.context.report_filters_endpoint}`)),e.forEach((async e=>{const t=e?.name||"",n=a.find((e=>e.id==t))?.options;if(n&&n.length>1){let s=i18n("db_search.all."+t);JS.isEmptyOrNull(s)&&(s=i18n("all")+" "+i18n("db_search."+t)),n.unshift({value:null,label:s}),w.value[t]=n,g.value[t]=n[0],k.value[t]=n,l.push(t);const o=e?.nested||[];o.length>0&&(S.value[t]=await X(o,a))}})),l}async function Q(e,a){P=!1;let l=`${t.context.template_endpoint}?template=${a}`,s=await b.http_request(l);m.value=s.list.filter((e=>null!=n[e.component])).map(((t,a)=>{let l={filters:{},...t};return ee(l,e),l})),Z(),s.filters&&($.value=await X(s.filters)),await Ja()}function ee(e,t){const a=l[e.time_window||"5_min"];if(null==t){const e=b.get_utc_seconds();t={epoch_begin:e-a,epoch_end:e}}const n=l[e.time_offset]||0;e.epoch_begin=t.epoch_begin-n,e.epoch_end=t.epoch_end-n}function ae(e){const t=S.value[e];t?.forEach((e=>{if($.value.includes(e)){$.value=$.value.filter((t=>t!=e));const t=w.value[e][0];g.value[e]=t,J(e,t.value)}}))}function le(e,t){const a=S.value[e];a?.forEach((a=>{const l=w.value[a],n=[];if(t==e){const e=w.value[a][0];g.value[a]=e,J(a,e.value)}if(l?.forEach((t=>{t.show_only_value!==g.value[e].value&&null!=t.value||n.push(t)})),!$.value.includes(a)){const t=$.value.indexOf(e);$.value.splice(t+1,0,a)}n.length>0?k.value[a]=n:delete k.value[a]}))}function ne(){if(!A.value.allow_edit&&I.value&&Te(),1==U&&we(),1==A.value.is_open_report)return;T={},fe();const e=y.get_status(!0);let a={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end};1==P&&(a=b.set_default_time_interval(void 0,"min"),C.emit_event(ntopng_events.EPOCH_CHANGE,a,t.context.page)),Q(a,A.value.value)}function se(){c.value.show()}function oe(){u.value.show()}function ie(){d.value.show()}function re(){let e="report";return"vs-report"==t.context.page?e=t.context.title:v.value&&v.value.epoch_end&&(e+="-"+b.from_utc_to_server_date_format(1e3*v.value.epoch_end,"DD-MM-YYYY")),e}const ce=async e=>{let t=JSON.parse(e);ue(t,t.name),x.delete_key_from_url("report_name")};function ue(e,a){fe(a);const l={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end};C.emit_event(ntopng_events.EPOCH_CHANGE,l,t.context.page),_e(e)}const de=async()=>{let e=`${t.context.report_list_endpoint}?ifid=${t.context.ifid}`,a=await b.http_request(e);return b.object_to_array(a)},_e=async e=>{let t={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end},a=e.template,l=e.data,n={};for(let e in l){let t={data:l[e]};n[e]=t}P=!0,T=n,m.value=a,Y(t)},pe=async e=>{let l=`${t.context.report_open_endpoint}?ifid=${t.context.ifid}&report_name=${e}`,n=await b.http_request(l);n?(ue(n,e),E.value=""):E.value=a("report.unable_to_open")};function fe(e){if(N.value=N.value.filter((e=>0==e.is_open_report)),null==e)return x.set_key_to_url("report_template",A.value.value),t.context.template=A.value.value,void x.delete_key_from_url("report_name");let l={value:e,label:a("dashboard.custom"),disabled:!1,toolbox:null,is_open_report:!0,allow_edit:!1};N.value.push(l),A.value=l,t.context.template=e,x.set_key_to_url("report_name",A.value.value),x.delete_key_from_url("report_template")}const ve=async e=>{let a=!1,l={csrf:t.context.csrf,ifid:t.context.ifid,report_name:e},n=`${t.context.report_delete_endpoint}`;try{let e={"Content-Type":"application/json"};await b.http_request(n,{method:"post",headers:e,body:JSON.stringify(l)}),a=!0}catch(e){console.error(e)}return a},me=async e=>{let t={};for(var a in T)t[a]=await T[a].data;let l={version:"1.0",name:e,template:m.value,data:t};return v.value&&v.value.epoch_begin&&v.value.epoch_end&&(l.epoch_begin=v.value.epoch_begin,l.epoch_end=v.value.epoch_end),JSON.stringify(l)},he=async e=>{let a=!1,l={csrf:t.context.csrf,ifid:t.context.ifid,report_name:e,content:await me(e)},n=`${t.context.report_store_endpoint}`;try{let e={"Content-Type":"application/json"};await b.http_request(n,{method:"post",headers:e,body:JSON.stringify(l)}),a=!0}catch(e){console.error(e)}return a};async function ge(){var e=re(),t=e+".json",a=await me(e),l=document.createElement("a");l.setAttribute("href","data:text/plain;charset=utf-8,"+encodeURIComponent(a)),l.setAttribute("download",t),l.style.display="none",document.body.appendChild(l),l.click(),document.body.removeChild(l)}function be(){if(1==U)return window.print(),!1;let e=x.get_url_object();e.printable=!0;const t=x.obj_to_url_params(e);let a=`${window.location.origin}${window.location.pathname}?${t}`;x.open_new_window(a)}function ye(e,t){if(1==D.value)return"";const a=1e3*e,l=1e3*t,n=b.from_utc_to_server_date_format(a,"DD/MM/YYYY"),s=b.from_utc_to_server_date_format(a,"HH:mm:ss"),o=b.from_utc_to_server_date_format(l,"DD/MM/YYYY"),i=b.from_utc_to_server_date_format(l,"HH:mm:ss");return`${`${n} ${s}`} - ${n==o?`${i}`:`${o} ${i}`}`}function we(){const e=y.get_status(!0),t=ye(e.epoch_begin,e.epoch_end);let a=`ntopng - Report ${A.value.label} ${t}`;document.title=a}function xe(e){return async(t,a)=>{e[t]=a}}function ke(){M.value.show()}function $e(){return"New Template"}const Se=async e=>{let a=!1,l={csrf:t.context.csrf,template_name:e},n=`${t.context.template_add_endpoint}`;try{let e={"Content-Type":"application/json"},t=await b.http_request(n,{method:"post",headers:e,body:JSON.stringify(l)});t&&t.template_id&&await W(t.template_id),a=!0}catch(e){console.error(e)}return a};async function Ne(e){let a=m.value.map((e=>e.id)),l={csrf:t.context.csrf,template:A.value.value,components:a.toString()},n=!1,s=`${t.context.template_edit_endpoint}`;try{let e={"Content-Type":"application/json"};await b.http_request(s,{method:"post",headers:e,body:JSON.stringify(l)});n=!0}catch(e){console.error(e)}return n}async function Ce(e){let t=O.toArray().map((e=>m.value.find((t=>t.id==e))));Ee(),m.value=t,await Ja(),Ae(),Ne()}function Ae(){if(!O){var e=document.getElementById("drag-zone");O=window.Sortable.create(e,{draggable:".drag-item",dataIdAttr:"id",onUpdate:Ce})}}function Ee(){O&&(O.destroy(),O=null)}function Te(){I.value=!I.value,I.value?Ae():Ee()}const Pe=async()=>{let e=`${t.context.template_list_widgets_endpoint}`,l=await b.http_request(e);if(null==l?.list)return{};let n=l.list;return n.sort(((e,t)=>a(e.i18n_name).toUpperCase().localeCompare(a(t.i18n_name).toUpperCase()))),n};function Ue(){_.value.show()}function Ie(){f.value.show()}const Oe=async e=>{Ee();let l=`${t.context.template_component_add_endpoint}`,n={csrf:t.context.csrf,template:t.context.template,component:e.id},s={"Content-Type":"application/json"};try{await b.http_request(l,{method:"post",headers:s,body:JSON.stringify(n)});E.value="",await W(A.value.value)}catch(e){E.value=a("report.unable_to_open")}await Ja(),Ae()};async function Me(e){Ee();const t=e.target.dataset.componentId;m.value=m.value.filter((e=>e.id!==t)),await Ja(),Ae(),Ne()}function je(e){const a=e.target.dataset.componentId,l=m.value.find((e=>e.id===a)),n="report"==t.context.page;p.value.show(l,n)}async function Le(e){Ee();let l=`${t.context.template_component_edit_endpoint}`,n={csrf:t.context.csrf,template:t.context.template,component:e.id,component_title:e.title,component_height:e.height,component_width:e.width,component_time_offset:e.time_offset,component_time_window:e.time_window,component_params:e.rest_params},s={"Content-Type":"application/json"};try{await b.http_request(l,{method:"post",headers:s,body:JSON.stringify(n)});E.value="",await W(A.value.value)}catch(e){E.value=a("report.unable_to_open")}await Ja(),Ae()}async function Fe(){let e=!1,a={csrf:t.context.csrf,template:A.value.value},l=`${t.context.template_delete_endpoint}`;try{let t={"Content-Type":"application/json"};await b.http_request(l,{method:"post",headers:t,body:JSON.stringify(a)});await W(),e=!0}catch(e){console.error(e)}return e}return(t,l)=>(Ps(),js(Ss,null,[Vs("div",uM,[Ys(' <Dropdown v-for="(t, t_index) in top_table_array" '),Ys('           :ref="el => { top_table_dropdown_array[t_index] = el }"> '),Ys("   <template v-slot:title> "),Ys('     <Spinner :show="t.show_spinner" size="1rem" class="me-1"></Spinner> '),Ys('     <a class="ntopng-truncate" :title="t.title">{{ t.label }}</a> '),Ys("   </template> "),Ys("   <template v-slot:menu> "),Ys('     <a v-for="opt in t.options" style="cursor:pointer; display: block;" '),Ys('        @click="add_top_table_filter(opt, $event)" class="ntopng-truncate tag-filter " '),Ys('        :title="opt.value">{{ opt.label }}</a> '),Ys("   </template>     "),Ys(" </Dropdown> "),ya(L)?(Ps(),Ls(E_,{key:0,class:"dontprint",disabled_date_picker:ya(z),id:"dashboard-date-time-picker",round_time:!0,min_time_interval_id:"min",onEpoch_change:Y},{begin:ml((()=>[Vs("div",dM,[Hs(l_,{selected_option:A.value,"onUpdate:selected_option":l[0]||(l[0]=e=>A.value=e),options:N.value,onSelect_option:ne},null,8,["selected_option","options"])])])),extra_buttons:ml((()=>[Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:se,title:a("dashboard.store")},pM,8,_M),Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:oe,title:a("dashboard.open")},vM,8,fM),Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:ge,title:a("download")},hM,8,mM),Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:ie,title:a("upload")},bM,8,gM),Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:be,title:a("dashboard.print")},wM,8,yM),ya(i)?(Ps(),js("button",{key:0,class:"btn btn-link btn-sm",type:"button",onClick:ke,title:a("dashboard.new_template")},kM,8,xM)):Ys("v-if",!0),ya(i)&&A.value.allow_edit?(Ps(),js("button",{key:1,class:K(["btn btn-link btn-sm",I.value?"text-warning":""]),type:"button",onClick:Te,title:a("dashboard.edit_mode")},SM,10,$M)):Ys("v-if",!0)])),_:1},8,["disabled_date_picker"])):Ys("v-if",!0),Ys(" Filters "),Vs("div",NM,[(Ps(!0),js(Ss,null,En($.value,(e=>(Ps(),js("div",CM,[Vs("label",AM,[Vs("b",null,te(a("db_search."+e)),1)]),Hs(l_,{selected_option:g.value[e],"onUpdate:selected_option":t=>g.value[e]=t,options:k.value[e],style:"width: 50%;",onSelect_option:t=>function(e,t){J(t,e.value);for(const[e,a]of Object.entries(w.value)){const a=g.value[e];a?.value?le(e,t):ae(e)}}(g.value[e],e)},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256)),Object.keys($.value).length>0?(Ps(),js("div",EM,[Vs("div",TM,[PM,Vs("button",{type:"button",class:"btn btn-sm btn-primary",onClick:Z},te(a("reset")),1)])])):Ys("v-if",!0)]),Ys(" Template Editor Toolbox "),I.value?(Ps(),js("div",UM,[Vs("button",{class:"btn btn-lg btn-link text-warning",type:"button",onClick:Ue,title:a("dashboard.add_component")},OM,8,IM),Vs("button",{class:"btn btn-lg btn-link text-warning",type:"button",onClick:Ie,title:a("dashboard.del_template")},jM,8,MM),Vs("h2",LM,te(a("dashboard.edit_mode")),1),Ys('\n            <div style="margin: auto"></div>\n            <h4><span class="badge bg-warning">{{ _i18n(\'dashboard.edit_mode\') }}</span></h4>\n            ')])):Ys("v-if",!0),Ys(" Report Title and small buttons "),ya(q)?(Ps(),js("div",FM,[Vs("h3",RM,[Ks(te(ya(B))+" ",1),ya(F)?(Ps(),js("span",DM,[ya(R)?(Ps(),js(Ss,{key:0},[Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:ge,title:a("download")},qM,8,zM),Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:ie,title:a("upload")},VM,8,BM)],64)):Ys("v-if",!0),Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:be,title:a("dashboard.print")},GM,8,HM)])):Ys("v-if",!0)])])):Ys("v-if",!0),Ys(" Report/Dashboard Content "),(Ps(),js("div",{ref_key:"report_box",ref:r,id:"drag-zone",class:"row",key:m.value},[Ys(" Warning Message "),E.value?(Ps(),js("div",WM,[Vs("div",KM,te(E.value),1)])):Ys("v-if",!0),Ys(" Empty template message "),!h.value||m.value.length||I.value?Ys("v-if",!0):(Ps(),js("div",JM,[Vs("div",YM,[Vs("h4",ZM,te(a("dashboard.empty_template")),1),Vs("p",XM,te(a("dashboard.empty_template_note")),1)])])),Ys(" Rendered Components "),(Ps(!0),js(Ss,null,En(m.value,(t=>(Ps(),Ls(YO,{style:{"min-width":"20rem"},color:t.active&&t.color||t.inactive_color,width:t.width,height:t.height,id:t.id,class:"drag-item"},{box_title:ml((()=>[t.i18n_name?(Ps(),js("div",QM,[Vs("h4",ej,[Ks(te(t.custom_name?t.custom_name:a(t.i18n_name))+" ",1),Vs("span",tj,te(t.time_offset?a("dashboard."+(ya(j)?"time_ago":"time_offset_list")+"."+t.time_offset):""),1)]),I.value?(Ps(),js("div",aj,[Vs("div",lj,[Vs("button",{type:"button",class:"btn-close btn-edit me-1","data-component-id":t.id,onClick:je},null,8,nj),Vs("button",{type:"button",class:"btn-close","data-component-id":t.id,onClick:Me},null,8,sj)])])):Ys("v-if",!0)])):Ys("v-if",!0)])),box_content:ml((()=>{return[s.value&&ya(o)?(Ps(),Ls(yf,{key:0,styles:"margin-top: 2rem !important;"})):Ys("v-if",!0),Vs("div",{class:K([s.value&&ya(o)?"ntopng-gray-out":""])},[(Ps(),Ls(Sn(n[t.component]),{id:t.id,style:V(ya(H)(t)),epoch_begin:t.epoch_begin,epoch_end:t.epoch_end,i18n_title:t.i18n_name,ifid:t.ifid?t.ifid.toString():e.context.ifid.toString(),max_width:t.width,max_height:t.height,params:t.params,get_component_data:(a=t,async(e,t,l)=>{let n={};if(P)T[a.id]?n=T[a.id]:(console.error("No data for "+a.id),n.data={});else{T[a.id]&&(n=T[a.id],n.data&&await n.data);const o=`${e}?${t}`;s.value=!0,n.data=l?b.http_post_request(o,l):b.http_request(o),n.data.then((()=>{s.value=!1})),T[a.id]=n}return n.data}),set_component_attr:xe(t),csrf:e.context.csrf,filters:t.filters},null,8,["id","style","epoch_begin","epoch_end","i18n_title","ifid","max_width","max_height","params","get_component_data","set_component_attr","csrf","filters"]))],2)];var a})),box_footer:ml((()=>["empty"!=t.component&&t.i18n_name&&!ya(D)?(Ps(),js("span",oj,te(ya(G)(t)),1)):Ys("v-if",!0)])),_:2},1032,["color","width","height","id"])))),256))]))]),Ys(" div row "),Hs(YI,{ref_key:"modal_store_report",ref:c,get_suggested_file_name:re,store_file:he,csrf:e.context.csrf,title:a("dashboard.store")},null,8,["csrf","title"]),Hs(iO,{ref_key:"modal_open_report",ref:u,list_files:de,open_file:pe,delete_file:ve,csrf:e.context.csrf,title:a("dashboard.open"),file_title:a("report.report_name")},null,8,["csrf","title","file_title"]),Hs(fO,{ref_key:"modal_upload_report",ref:d,upload_file:ce,title:a("upload"),file_title:a("report.file")},null,8,["title","file_title"]),Hs(YI,{ref_key:"modal_new_template",ref:M,get_suggested_file_name:$e,store_file:Se,allow_spaces:!0,csrf:e.context.csrf,title:a("dashboard.new_template")},null,8,["csrf","title"]),Hs(yO,{ref_key:"modal_add_template_component",ref:_,list_components:Pe,add_component:Oe,csrf:e.context.csrf,title:a("dashboard.add_component")},null,8,["csrf","title"]),Hs(KO,{ref_key:"modal_edit_template_component",ref:p,csrf:e.context.csrf,onEdit:Le},null,8,["csrf"]),Hs(lx,{ref_key:"modal_delete_template",ref:f,title:a("dashboard.del_template"),body:a("dashboard.del_template_confirm"),onDelete:Fe},null,8,["title","body"])],64))}};lp("\n@media print {\n.dontprint[data-v-c360f212] {\n        display: none;\n}\n.pagebreak-begin[data-v-c360f212] {\n        page-break-before: always;\n}\n.pagebreak-end[data-v-c360f212] {\n        page-break-after: always !important;\n}\n.print-element-class[data-v-c360f212] {\n        page-break-inside: avoid !important;\n        page-break-after: auto\n}\n}\n\n/* @media print and (orientation: portrait) and (max-width: 297mm){ */\n/*     .col-4 { */\n/*         width: 50% !important; */\n/*         flex: 0 0 auto; */\n/*     } */\n/* } */\n@page {\n    /* size: A3 landscape; */\n    /* position:absolute; width:100%; top:0;left:0;right:0;bottom:0; padding:0; margin:-1px; */\n}\n\n/* Print on A4 */\n@media print and (max-width: 297mm) and (min-width: 210mm) {\n\n    /* .row { */\n    /*         padding-left: 0; */\n    /*         padding-right: 0; */\n    /*         margin-left: -10rem; */\n    /*         margin-right: 0; */\n    /* } */\n.col-4[data-v-c360f212] {\n        width: 50% !important;\n        flex: 0 0 auto;\n}\n}\n\n/* Print on A5 (commented out as this is not working on Chrome/Safari) */\n\n/* @media print and (max-width: 148mm){ */\n/*     .col-4 { */\n/*         width: 100% !important; */\n/*         flex: 0 0 auto; */\n/*     } */\n/*     .col-6 { */\n/*         width: 100% !important; */\n/*         flex: 0 0 auto; */\n/*     } */\n/* } */\n.align-center[data-v-c360f212] {}\n"),ij.__scopeId="data-v-c360f212",ij.__file="http_src/vue/dashboard.vue";const rj=e=>(pl("data-v-7e5acce0"),e=e(),fl(),e),cj={class:"mb-3 row"},uj={class:"col-form-label col-sm-4"},dj={class:"col-sm-6"},_j={class:"btn-group btn-group-toggle","data-bs-toggle":"buttons"},pj=rj((()=>Vs("hr",null,null,-1))),fj={class:"host-alert-fields"},vj={class:"mb-3 row"},mj={class:"col-form-label col-sm-4"},hj={class:"col-sm-6"},gj={value:""},bj={value:"0"},yj={disabled:""},wj=["value"],xj={class:"flow-alert-fields"},kj={class:"mb-3 row"},$j={class:"col-form-label col-sm-4"},Sj={class:"col-sm-6"},Nj={value:""},Cj={value:"0"},Aj={disabled:""},Ej=["value"],Tj={key:0,class:"ip-fields"},Pj={class:"mb-3 row"},Uj={class:"col-form-label col-sm-4"},Ij={class:"col-sm-6"},Oj=["pattern"],Mj={key:1,class:"network-fields"},jj={class:"mb-3 row"},Lj={class:"col-form-label col-sm-4"},Fj={class:"col-sm-4 pr-0"},Rj=["pattern"],Dj={class:"col-sm-2 ps-4 pe-0"},zj=rj((()=>Vs("span",{class:"me-2"},"/",-1))),qj={class:"mb-3 row"},Bj={class:"col-form-label col-sm-4"},Vj={class:"col-sm-6"},Hj={class:"mb-3 row"},Gj={class:"col-form-label col-sm-4"},Wj={key:0},Kj={key:1},Jj={class:"col-sm-6"},Yj=["pattern"],Zj=["pattern"],Xj=rj((()=>Vs("hr",{class:"separator mt-5"},null,-1))),Qj={class:"form-group row"},eL={class:"col-form-label"},tL={class:"mt-1"},aL=["placeholder"],lL=["disabled"];var nL={__name:"modal-add-check-exclusion",props:{alert_exclusions_page:String,host_alert_types:Array,flow_alert_types:Array},emits:["add"],setup(e,{expose:t,emit:a}){const l=e,n=va(null);va(null);const s=va("ip"),o=va(""),i=va(""),r=va(0),c=va(""),u=va(""),d=va(""),_=va(""),p=va(null),f=i18n("details.comment_placeholder"),v=va(null),m=va(null);function h(e){if("text"==e)return NtopUtils.REGEXES.non_quoted_text;if("ip"==e){let e=NtopUtils.REGEXES.ipv4,t=e.replaceAll("$","@[0-9]{0,5}$"),a=NtopUtils.REGEXES.ipv6,l=a.replaceAll("$","@[0-9]{0,5}$");return`(${e})|(${t})|(${a})|(${l})`}return"hostname"==e?`${NtopUtils.REGEXES.singleword}|[a-zA-Z0-9._-]{3,250}@[0-9]{0,5}$`:"certificate"==e?NtopUtils.REGEXES.tls_certificate:NtopUtils.REGEXES[e]}let g=h("ip");h("text");let b=h("certificate"),y=h("domain_name_not_strict");const w=e=>{s.value=e},x=()=>{let e=null,t=!0;return"hosts"==l.alert_exclusions_page?(e=new RegExp(g),t="ip"==s.value?null==o.value||""==o.value||0==e.test(o.value)||""==u.value&&""==d.value:null==i.value||""==i.value||0==e.test(i.value)||""==u.value&&""==d.value||null==_.value||""==_.value||parseInt(_.value)<1||parseInt(_.value)>127):"domain_names"==l.alert_exclusions_page?(e=new RegExp(y),t=null==c.value||""==c.value||0==e.test(c.value)):"tls_certificate"==l.alert_exclusions_page&&(e=new RegExp(b),t=null==c.value||""==c.value||0==e.test(c.value)),t},k=()=>{n.value.close()},$=e=>""==e?-1:e,S=()=>{let e,t=o.value;"hosts"==l.alert_exclusions_page?("network"==s.value&&(t=`${i.value}/${_.value}`),null!=r.value&&0!=r.value&&(t=`${t}@${r.value}`),e={alert_addr:t,host_alert_key:$(u.value),flow_alert_key:$(d.value)}):"domain_names"==l.alert_exclusions_page?e={alert_domain:c.value}:"tls_certificate"==l.alert_exclusions_page&&(e={alert_certificate:c.value}),e.label=p.value,v.value&&(e.old_type=m.value.type,e.old_subdir=m.value.subdir,e.old_alert_domain=m.value.alert_domain,e.old_alert_certificate=m.value.alert_certificate,e.old_alert_addr=m.value.alert_addr,e.old_flow_alert_key=m.value.flow_alert_key,e.old_host_alert_key=m.value.host_alert_key),a("add",e),k()};t({show:e=>{if(e)if(v.value=!0,m.value=e,p.value=e.label,"host"==e.type){let t=e.alert_addr.split("/"),a=e.alert_addr.split("@");t.length>1?(s.value="network",i.value=t[0],_.value=t[1],o.value=""):(s.value="ip",o.value=a[0],i.value="",_.value=""),a.length>1?r.value=a[1]:r.value=0,null!=e.host_alert_key?u.value=""+e.host_alert_key:u.value="",null!=e.flow_alert_key?d.value=""+e.flow_alert_key:d.value=""}else"domain"==e.type?c.value=e.alert_domain:c.value=e.alert_certificate;else s.value="ip",o.value="",i.value="",r.value=0,u.value="0",d.value="",_.value="",c.value="",p.value="";n.value.show()},close:k}),_n((()=>{}));const N=e=>i18n(e);return(t,a)=>(Ps(),Ls(np,{onShowed:a[11]||(a[11]=e=>{}),ref_key:"modal_id",ref:n},{title:ml((()=>[Ks(te(N("check_exclusion.add_exclusion")),1)])),body:ml((()=>["hosts"==e.alert_exclusions_page?(Ps(),js(Ss,{key:0},[Ys(" modal hosts "),Vs("div",cj,[Vs("label",uj,[Vs("b",null,te(N("check_exclusion.member_type")),1)]),Vs("div",dj,[Vs("div",_j,[Vs("label",{class:K([{active:"ip"==s.value},"btn btn-secondary"])},[Vs("input",{class:"btn-check",type:"radio",name:"member_type",value:"ip",onClick:a[0]||(a[0]=e=>w("ip"))}),Ks(" "+te(N("check_exclusion.ip_address")),1)],2),Vs("label",{class:K([{active:"network"==s.value},"btn btn-secondary"])},[Vs("input",{onClick:a[1]||(a[1]=e=>w("network")),class:"btn-check",type:"radio",name:"member_type",value:"network"}),Ks(" "+te(N("check_exclusion.network")),1)],2)])])]),pj,Vs("div",fj,[Vs("div",vj,[Vs("label",mj,[Vs("b",null,te(N("check_exclusion.host_alert_type")),1)]),Vs("div",hj,[wn(Vs("select",{name:"value",class:"form-select alert-select","onUpdate:modelValue":a[2]||(a[2]=e=>u.value=e)},[Vs("option",gj,te(N("check_exclusion.none")),1),Vs("option",bj,te(N("check_exclusion.exclude_all_alerts")),1),Vs("option",yj,te(N("check_exclusion.spacing_bar")),1),(Ps(!0),js(Ss,null,En(e.host_alert_types,(e=>(Ps(),js(Ss,null,[null!=e?(Ps(),js("option",{key:0,value:e.alert_id},te(e.label),9,wj)):Ys("v-if",!0)],64)))),256))],512),[[Ri,u.value]])])])]),Vs("div",xj,[Vs("div",kj,[Vs("label",$j,[Vs("b",null,te(N("check_exclusion.flow_alert_type")),1)]),Vs("div",Sj,[wn(Vs("select",{id:"flow-alert-select",name:"value",class:"form-select alert-select","onUpdate:modelValue":a[3]||(a[3]=e=>d.value=e)},[Vs("option",Nj,te(N("check_exclusion.none")),1),Vs("option",Cj,te(N("check_exclusion.exclude_all_alerts")),1),Vs("option",Aj,te(N("check_exclusion.spacing_bar")),1),(Ps(!0),js(Ss,null,En(e.flow_alert_types,(e=>(Ps(),js(Ss,null,[null!=e?(Ps(),js("option",{key:0,value:e.alert_id},te(e.label),9,Ej)):Ys("v-if",!0)],64)))),256))],512),[[Ri,d.value]])])])]),"ip"==s.value?(Ps(),js("div",Tj,[Vs("div",Pj,[Vs("label",Uj,[Vs("b",null,te(N("check_exclusion.ip_address")),1)]),Vs("div",Ij,[wn(Vs("input",{pattern:ya(g),placeholder:"192.168.1.1",required:"",type:"text",name:"ip_address",class:"form-control","onUpdate:modelValue":a[4]||(a[4]=e=>o.value=e)},null,8,Oj),[[Mi,o.value]])])])])):Ys("v-if",!0),"network"==s.value?(Ps(),js("div",Mj,[Vs("div",jj,[Vs("label",Lj,[Vs("b",null,te(N("check_exclusion.network")),1)]),Vs("div",Fj,[wn(Vs("input",{required:"",style:{width:"calc(100% - 10px)"},name:"network",class:"form-control d-inline",placeholder:"172.16.0.0",pattern:ya(g),"onUpdate:modelValue":a[5]||(a[5]=e=>i.value=e)},null,8,Rj),[[Mi,i.value]])]),Vs("div",Dj,[zj,wn(Vs("input",{placeholder:"24",required:"",class:"form-control d-inline w-75",min:"1",max:"127",type:"number",name:"cidr","onUpdate:modelValue":a[6]||(a[6]=e=>_.value=e)},null,512),[[Mi,_.value]])])])])):Ys("v-if",!0),Vs("div",qj,[Vs("label",Bj,[Vs("b",null,te(N("vlan")),1)]),Vs("div",Vj,[wn(Vs("input",{placeholder:"0",min:"0",type:"number","onUpdate:modelValue":a[7]||(a[7]=e=>r.value=e),class:"form-control"},null,512),[[Mi,r.value]])])])],64)):Ys("v-if",!0),Ys(" mdoal hosts "),"hosts"!=e.alert_exclusions_page?(Ps(),js(Ss,{key:1},[Ys(" modal domain_names"),Vs("div",null,[Vs("div",Hj,[Vs("label",Gj,["domain_names"==e.alert_exclusions_page?(Ps(),js("b",Wj,te(N("check_exclusion.domain")),1)):Ys("v-if",!0),"tls_certificate"==e.alert_exclusions_page?(Ps(),js("b",Kj,te(N("check_exclusion.tls_certificate")),1)):Ys("v-if",!0)]),Vs("div",Jj,["domain_names"==e.alert_exclusions_page?wn((Ps(),js("input",{key:0,placeholder:"",pattern:ya(y),required:"",type:"text",name:"ip_address",class:"form-control","onUpdate:modelValue":a[8]||(a[8]=e=>c.value=e)},null,8,Yj)),[[Mi,c.value]]):Ys("v-if",!0),"tls_certificate"==e.alert_exclusions_page?wn((Ps(),js("input",{key:1,placeholder:"CN=813845657003339838, O=Code42, OU=TEST, ST=MN, C=U",pattern:ya(b),required:"",type:"text",name:"ip_address",class:"form-control","onUpdate:modelValue":a[9]||(a[9]=e=>c.value=e)},null,8,Zj)),[[Mi,c.value]]):Ys("v-if",!0)])])])],64)):Ys("v-if",!0),Ys(" modal comment"),Xj,Vs("div",Qj,[Vs("div",null,[Vs("label",eL,[Vs("b",null,te(N("show_alerts.add_a_comment")),1)])]),Vs("div",tL,[wn(Vs("textarea",{placeholder:ya(f),id:"alert-label",name:"label",rows:"3",class:"form-control",type:"text","onUpdate:modelValue":a[10]||(a[10]=e=>p.value=e),maxlength:"450"},null,8,aL),[[Mi,p.value]])])])])),footer:ml((()=>[Vs("button",{type:"button",disabled:x(),onClick:S,class:"btn btn-primary"},te(N("add")),9,lL)])),_:1},512))}};lp("\ninput[data-v-7e5acce0]:invalid {\n  border-color: #ff0000;\n}  \n"),nL.__scopeId="data-v-7e5acce0",nL.__file="http_src/vue/modal-add-check-exclusion.vue";let sL={PageAlertStats:Yh,PageFlowHistorical:Cg,PageStats:Zw,PageAssetTable:sx,PagePeriodicityTable:gx,PageServiceTable:Mx,PageServiceMap:Qx,PagePeriodicityMap:bk,PageAssetMap:Rk,PageDeviceExclusions:j$,PageHostTLS:L$,PageHostSSH:H$,PageHomeMap:Q$,PageSankey:aS,PageHostRules:uC,PageAlertAnalysis:PC,PageHostMap:qC,PageManageConfigurationBackup:UE,PageSNMPDeviceRules:hT,PageHostsPortsAnalysis:MT,PageInactiveHosts:AP,PageInactiveHostDetails:IP,PageVulnerabilityScan:eI,PageHostVsResult:oI,PageOpenPorts:_I,PageVulnerabilityScanReport:CI,PageSNMPUsage:UI,PageSNMPInterfaces:LI,PageTopology:BI,PageEditApplications:mE,PageVLANPortsFlowSankey:tA,PageTestTable:pA,PageSnmpDevicesInterfacesSimilarity:gT,NedgeRulesConfig:eE,NedgeRepeatersConfig:iP,PageHostDetailsApplications:nS,PageHostDetailsTraffic:kS,PageHostDetailsPackets:US,PageHostDetailsFlowSankey:KS,PageHostDetailsPorts:bC,PageAggregatedLiveFlows:dA,PageNetworkDiscovery:NE,PageFlowDeviceDetails:MP,PageFlowDeviceInterfaceDetails:KP,AlertInfo:S_,Chart:C_,TimeseriesChart:Ag,Datatable:xw,DateTimeRangePicker:E_,NetworkMap:Yx,RangePicker:Wp,PageNavbar:n_,SelectSearch:l_,TabList:Xw,Sankey:jS,NoteList:pv,Loading:yf,Dashboard:ij,DashboardBox:YO,DashboardEmpty:ZO,DashboardTable:QO,DashboardBadge:sM,DashboardPie:oM,DashboardTimeseries:iM,DashboardSankey:rM,ListTimeseries:Qg,Modal:np,ModalAddCheckExclusion:nL,ModalAlertsFilter:Rm,ModalFilters:wp,ModalTimeseries:_w,ModalTrafficExtraction:fv,ModalDeleteConfirm:lx,ModalSnapshot:om,ModalAddDeviceExclusion:_$,ModalEditDeviceExclusion:$$,ModalAddHostRules:tC,ModalAddApplication:pE,ModalDeleteApplication:fE,ModalEditReport:wI,Vue:Od};window.ntopVue=sL;var oL=["html","clone","append","<div />",'<div><hr><div style="margin-left: auto;margin-right: auto;padding-left: var(--bs-gutter-x,.75rem);padding-right: var(--bs-gutter-x,.75rem);width: 100%;"><div class="row mt-2"><div class="col-12 col-md-4 pl-md-0 text-center text-md-start"><span style="font-size: .875em;"><a href="https://www.ntop.org/products/traffic-analysis/ntop/" target="_blank" id="footer-ntop-version"></a> | <span id="footer-ntop-github"></span></span></div><div class="col-12 col-md-4 text-center"><span style="font-size: .875em;" id="footer-ntop-age"></span></div><div class="col-12 col-md-4 text-center text-md-end pr-md-0"><span style="font-size: .875em;"><i class="fas fa-clock" title="Server Time"></i> <div class="d-inline-block" id="footer-network-clock"></div> UTC | Uptime: <div class="d-inline-block" id="footer-network-uptime"></div></span></div></div></div></div>',"ntopng_release_info","|","split","#footer-ntop-version","#footer-ntop-github","© 1998-","ntop_age_to"," - ntop","#footer-ntop-age","body div main","parent","#footer-network-clock","","#footer-network-uptime","remove","localtime","uptime","chart_colors","on_custom_event","ready"];function iL(){const e=e=>$(oL[3])[oL[2]]($(e)[oL[1]]())[oL[0]]();let t=oL[4];const a=(()=>{let a=$(t),l=i18n(oL[5])[oL[7]](oL[6]);$(oL[8],a)[oL[0]](l[0]),$(oL[9],a)[oL[0]](l[1]);let n=`${oL[10]}${i18n(oL[11])}${oL[12]}`;return $(oL[13],a)[oL[0]](n),e(a)})(),l=()=>{$(oL[14])[oL[2]](a)};l();const n=()=>$(oL[16])[oL[15]]()[oL[15]]()[oL[15]]()[oL[15]]()[oL[15]]();ntopng_events_manager[oL[23]](oL[22],ntopng_custom_events.GET_INTERFACE_DATA,(t=>{0==(()=>{let t=n();if(null==t)return!1;let l=t[oL[1]]();$(oL[16],l)[oL[0]](oL[17]),$(oL[18],l)[oL[0]](oL[17]);const s=e(l);return a===s})()&&((()=>{let e=n();null!=e&&e[oL[19]]()})(),l()),(e=>{$(oL[16])[oL[0]](e[oL[20]]),$(oL[18])[oL[0]](e[oL[21]])})(t)}))}$(document)[oL[24]]((()=>iL()))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnRvcG5nLmpzIiwic291cmNlcyI6WyIuLi8uLi9odHRwX3NyYy91dGlsaXRpZXMvbnRvcC11dGlscy5qcyIsIi4uLy4uL2h0dHBfc3JjL3V0aWxpdGllcy9kYXRhdGFibGUvYm9vdHN0cmFwLWRhdGF0YWJsZS11dGlscy5qcyIsIi4uLy4uL2h0dHBfc3JjL3V0aWxpdGllcy9lYnBmLXV0aWxzLmpzIiwiLi4vLi4vaHR0cF9zcmMvdXRpbGl0aWVzL21vZGFsL21vZGFsLXV0aWxzLmpzIiwiLi4vLi4vaHR0cF9zcmMvdXRpbGl0aWVzL2Zvcm1hdHRlci11dGlscy5qcyIsIi4uLy4uL2h0dHBfc3JjL3V0aWxpdGllcy91dGlsaXRpZXMuanMiLCIuLi8uLi9odHRwX3NyYy92YWxpZGF0b3JzL250b3BuZy12YWxpZGF0b3JzLXV0aWxzLmpzIiwiLi4vLi4vaHR0cF9zcmMvdmFsaWRhdG9ycy92YWxpZGF0b3JzLmpzIiwiLi4vLi4vaHR0cF9zcmMvc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcy5qcyIsIi4uLy4uL2h0dHBfc3JjL2NvbXBvbmVudHMvY2hhcnRzL3BpZS1jaGFydC5qcyIsIi4uLy4uL2h0dHBfc3JjL3NlcnZpY2VzL3NlcnZpY2VzLmpzIiwiLi4vLi4vaHR0cF9zcmMvY29tcG9uZW50cy93aWRnZXQvd2lkZ2V0cy5qcyIsIi4uLy4uL2h0dHBfc3JjL2NvbXBvbmVudHMvc2lkZWJhci9zaWRlYmFyLmpzIiwiLi4vLi4vaHR0cF9zcmMvY29tcG9uZW50cy9udG9wQ2hhcnRBcGV4LmpzIiwiLi4vLi4vaHR0cF9zcmMvdXRpbGl0aWVzL2RhdGF0YWJsZS9zcHJ5bWVkaWEtZGF0YXRhYmxlLXV0aWxzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS9kaXN0L3Z1ZS5lc20tYnJvd3Nlci5wcm9kLmpzIiwiLi4vLi4vaHR0cF9zcmMvY29tcG9uZW50cy9jb21wb25lbnRzLmpzIiwiLi4vLi4vaHR0cF9zcmMvdmlld3MvcHVibGljL2Jsb2cvYmxvZy1ub3RpZmljYXRpb24tdXRpbHMuanMiLCIuLi8uLi9odHRwX3NyYy92dWUvdnVlX25vZGUudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL2Ryb3Bkb3duLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3V0aWxpdGllcy90YWJsZS11dGlscy5qcyIsIi4uLy4uL2h0dHBfc3JjL3V0aWxpdGllcy9maWx0ZXJzLW1hbmFnZXIuanMiLCIuLi8uLi9odHRwX3NyYy92dWUvc2VsZWN0LXNlYXJjaC52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1uYXZiYXIudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtbmF2YmFyLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0wMzQ0MDQ5ZSZsYW5nLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL2FsZXJ0LWluZm8udnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL2FsZXJ0LWluZm8udnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWRlOTgxMWE4JmxhbmcuanMiLCIuLi8uLi9odHRwX3NyYy92dWUvY2hhcnQudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL2RhdGUtdGltZS1yYW5nZS1waWNrZXIudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL2RhdGUtdGltZS1yYW5nZS1waWNrZXIudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTZhZTI0YTI4JmxhbmcuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtaW5qZWN0L2Rpc3Qvc3R5bGUtaW5qZWN0LmVzLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9tb2RhbC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NzFkZWZmZTAmbGFuZy5qcyIsIi4uLy4uL2h0dHBfc3JjL3V0aWxpdGllcy9yZWdleC12YWxpZGF0aW9uLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLWZpbHRlcnMudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLWZpbHRlcnMudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTMxMTljODNlJmxhbmcuanMiLCIuLi8uLi9odHRwX3NyYy92dWUvcmFuZ2UtcGlja2VyLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9yYW5nZS1waWNrZXIudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWFhZWU1OWVhJmxhbmcuanMiLCIuLi8uLi9odHRwX3NyYy92dWUvc2VsZWN0X3RhYmxlX3BhZ2UudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL2xvYWRpbmcudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3N3aXRjaC52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvdGFibGUudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3RhYmxlLXdpdGgtY29uZmlnLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9zcGlubmVyLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9ub3RlLWxpc3QudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLXRyYWZmaWMtZXh0cmFjdGlvbi52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtdHJhZmZpYy1leHRyYWN0aW9uLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0wYmU5NzhjNCZsYW5nLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLXNuYXBzaG90LnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9tb2RhbC1hbGVydHMtZmlsdGVyLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9tb2RhbC1hY2tub3dsZWRnZS1hbGVydC52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtZGVsZXRlLWFsZXJ0LnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9tb2RhbC1hY2tub3dsZWRnZS1hbGVydHMudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLWRlbGV0ZS1hbGVydHMudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtYWxlcnQtc3RhdHMudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtZmxvdy1oaXN0b3JpY2FsLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS90aW1lc2VyaWVzLWNoYXJ0LnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS90aW1lc2VyaWVzLWNoYXJ0LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0yMTRhZGU0MiZsYW5nLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL2xpc3QtdGltZXNlcmllcy52dWUiLCIuLi8uLi9odHRwX3NyYy9jb25zdGFudHMvaW50ZXJmYWNlX3RvcF90YWJsZXMuanMiLCIuLi8uLi9odHRwX3NyYy9jb25zdGFudHMvaG9zdF90b3BfdGFibGVzLmpzIiwiLi4vLi4vaHR0cF9zcmMvY29uc3RhbnRzL3NubXBfaW50ZXJmYWNlX3RvcF90YWJsZXMuanMiLCIuLi8uLi9odHRwX3NyYy9jb25zdGFudHMvZmxvd19kZXZpY2VfdG9wX3RhYmxlcy5qcyIsIi4uLy4uL2h0dHBfc3JjL3Byb3hpZXMvc25tcC5qcyIsIi4uLy4uL2h0dHBfc3JjL2NvbnN0YW50cy9tZXRyaWNzLWNvbnN0cy5qcyIsIi4uLy4uL2h0dHBfc3JjL3V0aWxpdGllcy9tZXRyaWNzLW1hbmFnZXIuanMiLCIuLi8uLi9odHRwX3NyYy91dGlsaXRpZXMvZ3JhcGgvZHlncmFwaC1leHRlbnNpb24uanMiLCIuLi8uLi9odHRwX3NyYy91dGlsaXRpZXMvZ3JhcGgvZHlncmFwaC1wbG90dGVycy5qcyIsIi4uLy4uL2h0dHBfc3JjL3V0aWxpdGllcy9jb2xvcnMvY29sb3JzLWludGVycG9sYXRpb24uanMiLCIuLi8uLi9odHRwX3NyYy91dGlsaXRpZXMvZ3JhcGgvZHlncmFwaC1jb25maWcuanMiLCIuLi8uLi9odHRwX3NyYy91dGlsaXRpZXMvZ3JhcGgvZHlncmFwaC1mb3JtYXQuanMiLCIuLi8uLi9odHRwX3NyYy91dGlsaXRpZXMvdGltZXNlcmllcy11dGlscy5qcyIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9tb2RhbC10aW1lc2VyaWVzLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9tb2RhbC1kb3dubG9hZC1maWxlLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9kYXRhdGFibGUudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL250b3BfdXRpbHMuanMiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1zdGF0cy52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvdGFiLWxpc3QudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3RhYi1saXN0LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1lMDVhMzM3YSZsYW5nLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLWRlbGV0ZS1jb25maXJtLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLWFzc2V0LXRhYmxlLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLWFzc2V0LXRhYmxlLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD01N2NlN2Y2MCZsYW5nLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtcGVyaW9kaWNpdHktdGFibGUudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtcGVyaW9kaWNpdHktdGFibGUudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTNkZWJjN2EzJmxhbmcuanMiLCIuLi8uLi9odHRwX3NyYy91dGlsaXRpZXMvbWFwL250b3BuZ192aXNfbmV0d29ya191dGlscy5qcyIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLXNlcnZpY2UtdGFibGUudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2Utc2VydmljZS10YWJsZS52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NjFiNWRmMjUmbGFuZy5qcyIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9uZXR3b3JrLW1hcC52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtYXV0b2xheW91dC1jb25maXJtLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLXNlcnZpY2UtbWFwLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLXNlcnZpY2UtbWFwLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD02ZjA4YjU3MyZsYW5nLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtcGVyaW9kaWNpdHktbWFwLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLXBlcmlvZGljaXR5LW1hcC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9ODAwYWI1MWUmbGFuZy5qcyIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLWFzc2V0LW1hcC52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1hc3NldC1tYXAudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTY5YjIyODZlJmxhbmcuanMiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtYWRkLWRldmljZS1leGNsdXNpb24udnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLWVkaXQtZGV2aWNlLWV4Y2x1c2lvbi52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1kZXZpY2UtZXhjbHVzaW9ucy52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1ob3N0LXRscy52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1ob3N0LXRscy52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MWViMjQ3YjcmbGFuZy5qcyIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLWhvc3Qtc3NoLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLWhvc3Qtc3NoLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0xNWJhMTM3OCZsYW5nLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtaG9tZS1tYXAudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtaG9tZS1tYXAudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTJmYmJlYmNmJmxhbmcuanMiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1zYW5rZXkudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtaG9zdC1kZXRhaWxzLWFwcGxpY2F0aW9ucy52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1ob3N0LWRldGFpbHMtYXBwbGljYXRpb25zLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0wN2JlZTE0MiZsYW5nLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtaG9zdC1kZXRhaWxzLXRyYWZmaWMudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtaG9zdC1kZXRhaWxzLXBhY2tldHMudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3NhbmtleS52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1ob3N0LWRldGFpbHMtZmxvdy1zYW5rZXkudnVlIiwiLi4vLi4vaHR0cF9zcmMvdXRpbGl0aWVzL2RhdGEtdXRpbHMuanMiLCIuLi8uLi9odHRwX3NyYy91dGlsaXRpZXMvc29ydGluZy11dGlscy5qcyIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9tb2RhbC1hZGQtaG9zdC1ydWxlcy52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1ob3N0LXJ1bGVzLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLWhvc3QtZGV0YWlscy1wb3J0cy52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1hbGVydC1hbmFseXNpcy52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1ob3N0LW1hcC52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS12bGFuLXBvcnRzLXNhbmtleS52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1hZ2dyZWdhdGVkLWxpdmUtZmxvd3MudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtdGVzdC10YWJsZS52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtbmVkZ2UtYWRkLXJ1bGUtY29uZmlnLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9tb2RhbC1uZWRnZS1jaGFuZ2UtZGVmYXVsdC1wb2xpY3kudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtbmVkZ2UtcnVsZXMtY29uZmlnLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9tb2RhbC1hZGQtYXBwbGljYXRpb24udnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLWRlbGV0ZS1hcHBsaWNhdGlvbi52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1lZGl0LWFwcGxpY2F0aW9ucy52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1uZXR3b3JrLWRpc2NvdmVyeS52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1tYW5hZ2UtY29uZmlndXJhdGlvbnMtYmFja3VwLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9tb2RhbC1hZGQtc25tcC1kZXZpY2UtcnVsZXMudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2Utc25tcC1kZXZpY2UtcnVsZXMudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2Utc25tcC1kZXZpY2VzLWludGVyZmFjZXMtc2ltaWxhcml0eS52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1ob3N0cy1wb3J0cy1hbmFseXNpcy52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtbmVkZ2UtYWRkLXJlcGVhdGVyLWNvbmZpZy52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1uZWRnZS1yZXBlYXRlcnMtY29uZmlnLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9tb2RhbC1kZWxldGUtaW5hY3RpdmUtaG9zdC52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtZGVsZXRlLWluYWN0aXZlLWhvc3QtZXBvY2gudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLWRvd25sb2FkLWluYWN0aXZlLWhvc3QudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtaW5hY3RpdmUtaG9zdHMudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtaW5hY3RpdmUtaG9zdC1kZXRhaWxzLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLWZsb3dkZXZpY2UtY29uZmlnLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLWZsb3dkZXZpY2UtaW50ZXJmYWNlLWNvbmZpZy52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtZGVsZXRlLXNjYW4tY29uZmlybS52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtdXBkYXRlLXBlcmlvZGljaXR5LXNjYW4udnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLWFkZC12cy1ob3N0LnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3V0aWxpdGllcy92c19yZXBvcnRfZm9ybWF0dGVyLmpzIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtdnVsbmVyYWJpbGl0eS1zY2FuLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLWhvc3QtdnMtcmVzdWx0LnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLW9wZW4tcG9ydHMudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLWVkaXQtdnMtcmVwb3J0LnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9wYWdlLXZ1bG5lcmFiaWxpdHktc2Nhbi1yZXBvcnQudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2Utc25tcC11c2FnZS52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvcGFnZS1zbm1wLWludGVyZmFjZXMudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL3BhZ2UtdG9wb2xvZ3kudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLWZpbGUtc2F2ZS52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtZmlsZS1vcGVuLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9tb2RhbC1maWxlLXVwbG9hZC52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtc2VsZWN0LWNvbXBvbmVudC52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvbW9kYWwtZWRpdC1jb21wb25lbnQudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL2Rhc2hib2FyZC1ib3gudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL2Rhc2hib2FyZC1lbXB0eS52dWUiLCIuLi8uLi9odHRwX3NyYy92dWUvZGFzaGJvYXJkLXRhYmxlLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9kYXNoYm9hcmQtYmFkZ2UudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL2Rhc2hib2FyZC1waWUudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL2Rhc2hib2FyZC10aW1lc2VyaWVzLnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9kYXNoYm9hcmQtc2Fua2V5LnZ1ZSIsIi4uLy4uL2h0dHBfc3JjL3Z1ZS9kYXNoYm9hcmQudnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL21vZGFsLWFkZC1jaGVjay1leGNsdXNpb24udnVlIiwiLi4vLi4vaHR0cF9zcmMvdnVlL250b3BfdnVlLmpzIiwiLi4vLi4vaHR0cF9zcmMvZXh0ZW5zaW9ucy9jaGFydF9jb2xvcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gMjAxNC0yMCAtIG50b3Aub3JnXG5EYXRlLnByb3RvdHlwZS5mb3JtYXQgPSBmdW5jdGlvbiAoZm9ybWF0KSB7IC8vYXV0aG9yOiBtZWl6elxuICAgICAgICB2YXIgbyA9IHtcbiAgICAgICAgICAgICAgICBcIk0rXCI6IHRoaXMuZ2V0TW9udGgoKSArIDEsIC8vbW9udGhcbiAgICAgICAgICAgICAgICBcImQrXCI6IHRoaXMuZ2V0RGF0ZSgpLCAgICAvL2RheVxuICAgICAgICAgICAgICAgIFwiaCtcIjogdGhpcy5nZXRIb3VycygpLCAgIC8vaG91clxuICAgICAgICAgICAgICAgIFwibStcIjogdGhpcy5nZXRNaW51dGVzKCksIC8vbWludXRlXG4gICAgICAgICAgICAgICAgXCJzK1wiOiB0aGlzLmdldFNlY29uZHMoKSwgLy9zZWNvbmRcbiAgICAgICAgICAgICAgICBcInErXCI6IE1hdGguZmxvb3IoKHRoaXMuZ2V0TW9udGgoKSArIDMpIC8gMyksICAvL3F1YXJ0ZXJcbiAgICAgICAgICAgICAgICBcIlNcIjogdGhpcy5nZXRNaWxsaXNlY29uZHMoKSAvL21pbGxpc2Vjb25kXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoLyh5KykvLnRlc3QoZm9ybWF0KSkgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UoUmVnRXhwLiQxLFxuICAgICAgICAgICAgICAgICh0aGlzLmdldEZ1bGxZZWFyKCkgKyBcIlwiKS5zdWJzdHIoNCAtIFJlZ0V4cC4kMS5sZW5ndGgpKTtcbiAgICAgICAgZm9yICh2YXIgayBpbiBvKSBpZiAobmV3IFJlZ0V4cChcIihcIiArIGsgKyBcIilcIikudGVzdChmb3JtYXQpKVxuICAgICAgICAgICAgICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKFJlZ0V4cC4kMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlZ0V4cC4kMS5sZW5ndGggPT0gMSA/IG9ba10gOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoXCIwMFwiICsgb1trXSkuc3Vic3RyKChcIlwiICsgb1trXSkubGVuZ3RoKSk7XG4gICAgICAgIHJldHVybiBmb3JtYXQ7XG59XG5cbi8vIEV4dGVuZGVkIGRpc2FibGUgZnVuY3Rpb24gXG5qUXVlcnkuZm4uZXh0ZW5kKHtcbiAgICAgICAgZGlzYWJsZTogZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCR0aGlzLmlzKCdpbnB1dCwgYnV0dG9uLCB0ZXh0YXJlYSwgc2VsZWN0JykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzYWJsZWQgPSBzdGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRoaXMudG9nZ2xlQ2xhc3MoJ2Rpc2FibGVkJywgc3RhdGUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG59KTtcblxuY29uc3QgTlRPUE5HX01JTl9WSVNVQUxfVkFMVUUgPSAwLjAwNTtcblxuY29uc3QgUkVHRVhFUyA9IHtcbiAgICAgICAgaXB2NDogU3RyaW5nLnJhd2BeKDI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPylcXC4oMjVbMC01XXwyWzAtNF1bMC05XXxbMDFdP1swLTldWzAtOV0/KVxcLigyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pXFwuKDI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPykkYCxcbiAgICAgICAgaXB2NjogU3RyaW5nLnJhd2BeKCgoWzAtOV18WzEtOV1bMC05XXwxWzAtOV17Mn18MlswLTRdWzAtOV18MjVbMC01XSk6KXszfShbMC05XXxbMS05XVswLTldfDFbMC05XXsyfXwyWzAtNF1bMC05XXwyNVswLTVdKSR8XlxccyooKChbMC05QS1GYS1mXXsxLDR9Oil7N30oWzAtOUEtRmEtZl17MSw0fXw6KSl8KChbMC05QS1GYS1mXXsxLDR9Oil7Nn0oOlswLTlBLUZhLWZdezEsNH18KCgyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkoXFwuKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pfDopKXwoKFswLTlBLUZhLWZdezEsNH06KXs1fSgoKDpbMC05QS1GYS1mXXsxLDR9KXsxLDJ9KXw6KCgyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkoXFwuKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pfDopKXwoKFswLTlBLUZhLWZdezEsNH06KXs0fSgoKDpbMC05QS1GYS1mXXsxLDR9KXsxLDN9KXwoKDpbMC05QS1GYS1mXXsxLDR9KT86KCgyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkoXFwuKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pKXw6KSl8KChbMC05QS1GYS1mXXsxLDR9Oil7M30oKCg6WzAtOUEtRmEtZl17MSw0fSl7MSw0fSl8KCg6WzAtOUEtRmEtZl17MSw0fSl7MCwyfTooKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKShcXC4oMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKXszfSkpfDopKXwoKFswLTlBLUZhLWZdezEsNH06KXsyfSgoKDpbMC05QS1GYS1mXXsxLDR9KXsxLDV9KXwoKDpbMC05QS1GYS1mXXsxLDR9KXswLDN9OigoMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKFxcLigyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkpezN9KSl8OikpfCgoWzAtOUEtRmEtZl17MSw0fTopezF9KCgoOlswLTlBLUZhLWZdezEsNH0pezEsNn0pfCgoOlswLTlBLUZhLWZdezEsNH0pezAsNH06KCgyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldP1xcZCkoXFwuKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKSl7M30pKXw6KSl8KDooKCg6WzAtOUEtRmEtZl17MSw0fSl7MSw3fSl8KCg6WzAtOUEtRmEtZl17MSw0fSl7MCw1fTooKDI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV0/XFxkKShcXC4oMjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XT9cXGQpKXszfSkpfDopKSkoJS4rKT9cXHMqKSRgLFxuICAgICAgICBkb21haW5OYW1lOiBTdHJpbmcucmF3YF4oW2EtekEtWl0oW2EtekEtWl18WzAtOV0pP1xcLlthLXpBLVpdezIsMTN9fFthLXpBLVowLTldKFtcXC1fLmEtekEtWjAtOV17MSw2MX1bYS16QS1aMC05XSk/XFwuW2EtekEtWl17MiwxM318W2EtekEtWjAtOV0oW1xcLV8uYS16QS1aMC05XXsxLDYxfVthLXpBLVowLTldKT9cXC5bYS16QS1aXXsyLDMwfVxcLlthLXpBLVpdezIsM30pJGAsXG4gICAgICAgIHBvcnQ6IFN0cmluZy5yYXdgXihbMC05XXsxLDR9fFsxLTVdWzAtOV17NH18NlswLTRdWzAtOV17M318NjVbMC00XVswLTldezJ9fDY1NVswLTJdWzAtOV18NjU1M1swLTVdKSRgLFxuICAgICAgICBsYXRlbmN5OiBTdHJpbmcucmF3YF4oWzAtOV0qWy5dKT9bMC05XSskYCxcbiAgICAgICAgdXJsOiBTdHJpbmcucmF3YF4oaHR0cHM/XFw6XFwvXFwvW15cXC9cXHNdKyhcXC8uKik/KSRgLFxuICAgICAgICBlbWFpbFVybDogU3RyaW5nLnJhd2Bec210cHM/OlxcL1xcL1tcXC1hLXpBLVowLTk6Ll17MSwyNTZ9JGAsXG4gICAgICAgIG1hY0FkZHJlc3M6IFN0cmluZy5yYXdgXihbMC05QS1GYS1mXXsyfTopezV9KFswLTlBLUZhLWZdezJ9KSRgLFxuICAgICAgICBob3N0bmFtZTogU3RyaW5nLnJhd2BeKD8hXFxzKiQpW2EtekEtWjAtOS5fOiBcXC1cXC9dezEsMjUwfXxeW2EtekEtWjAtOS5fOiBcXC1cXC9dezEsMjUwfUBbMC05XXswLDV9YCxcbiAgICAgICAgdXNlcm5hbWU6IFN0cmluZy5yYXdgXlthLXpBLVowLTkuX0AhLT9dezMsMzB9JGAsXG4gICAgICAgIHNpbmdsZXdvcmQ6IFN0cmluZy5yYXdgXig/PVthLXpBLVowLTkuXzpcXC1dezMsMjUzfSQpKD8hLipbXy46XFwtXXsyfSlbXl8uOlxcLV0uKlteXy46XFwtXSRgLFxuICAgICAgICBtdWx0aXdvcmQ6IFN0cmluZy5yYXdgXihbYS16QS1aMC05Ll86XFwtXFxzXXszLDI1M30pJGAsXG4gICAgICAgIGVtYWlsOiBTdHJpbmcucmF3YF4oW2EtekEtWjAtOS4hIyQlJicqK1xcLVxcLz0/Xl9cXGBcXHx+XStAW2EtekEtWjAtOVxcLV0rKD86XFwuW2EtekEtWjAtOVxcLV0rKSopJHxeW2EtekEtWlxcZC4hIyQlJicqK1xcLVxcLz0/Xl9cXGBcXHx+XXsxLDEyOH0kYCxcbiAgICAgICAgZW1haWxDb21tYUxpc3Q6IFN0cmluZy5yYXdgXigoPzpbYS16QS1aMC05LiEjJCUmJyorXFwtXFwvPT9eX1xcYFxcfH5dK0BbYS16QS1aMC05XFwtXSsoPzpcXC5bYS16QS1aMC05XFwtXSspKil8KFthLXpBLVpcXGQuISMkJSYnKitcXC1cXC89P15fXFxgXFx8fl17MSwxMjh9KSkoPzosKCg/OlthLXpBLVowLTkuISMkJSYnKitcXC1cXC89P15fXFxgXFx8fl0rQFthLXpBLVowLTlcXC1dKyg/OlxcLlthLXpBLVowLTlcXC1dKykqKXwoW2EtekEtWlxcZC4hIyQlJicqK1xcLVxcLz0/Xl9cXGBcXHx+XXsxLDEyOH0pKSkqJGAsXG4gICAgICAgIGh0dHBzOiBTdHJpbmcucmF3YF5odHRwcz86XFwvXFwvLiskYCxcbiAgICAgICAgdG9rZW46IFN0cmluZy5yYXdgXlswLTlhLWZdezMyfWAsXG4gICAgICAgIHNjb3JlOiBTdHJpbmcucmF3YF5bMC05XXsxLDV9YCxcbiAgICAgICAgdGVsZWdyYW1fY2hhbm5lbDogU3RyaW5nLnJhd2BeWzAtOVxcLV17MSwxNX1gLFxuICAgICAgICBwYXNzd29yZDogU3RyaW5nLnJhd2BeW1xcd1xcLyQhXFwvKCk9P14qQF8tXXs1LDMxfSRgLFxuICAgICAgICB0bHNfY2VydGlmaWNhdGU6IFN0cmluZy5yYXdgXltePSxdKz1bXj0sXSsoLFxcc1tePSxdKz1bXj0sXSspKiRgLFxuICAgICAgICBkb21haW5fbmFtZV9ub3Rfc3RyaWN0OiBTdHJpbmcucmF3YF5bYS16QS1aMC05XFwtX35dKygoXFwuW2EtekEtWjAtOVxcLV9+XSspKykkYCxcbiAgICAgICAgbm9uX3F1b3RlZF90ZXh0OiBTdHJpbmcucmF3YF5bYS16QS1aMC05Li1fXSskYCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE50b3BVdGlscyB7XG5cbiAgLyogU2hvdyBhbiBvdmVybGF5IHRvIGhpZGUgbG9hZGluZyAqL1xuICBzdGF0aWMgdG9nZ2xlT3ZlcmxheXModGltZSA9IDUwMCkge1xuICAgICQoYC5vdmVybGF5YCkudG9nZ2xlKHRpbWUpO1xuICB9XG4gIFxuICBzdGF0aWMgc2hvd092ZXJsYXlzKHRpbWUgPSA1MDApIHtcbiAgICAkKGAub3ZlcmxheWApLmZhZGVJbih0aW1lKTtcbiAgfVxuICBcbiAgc3RhdGljIGhpZGVPdmVybGF5cyh0aW1lID0gNTAwKSB7XG4gICAgJChgLm92ZXJsYXlgKS5mYWRlT3V0KHRpbWUpO1xuICB9XG5cbiAgICAgICAgc3RhdGljIGdldCBSRUdFWEVTKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBSRUdFWEVTO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGdldElQdjRSZWdleFdpdGhDSURSKCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IFJFR0VYRVMuaXB2NC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGAke1JFR0VYRVMuaXB2NC5zdWJzdHJpbmcoMCwgbGVuZ3RoIC0gMSl9KFxcXFwvPykoXFxcXGIoWzAtOV18WzEyXVswLTldfDNbMC0yXSk/XFxcXGIpJGA7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgZ2V0SVB2NlJlZ2V4V2l0aENJRFIoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gUkVHRVhFUy5pcHY2Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICByZXR1cm4gYCR7UkVHRVhFUy5pcHY2LnN1YnN0cmluZygwLCBsZW5ndGggLSAxKX0oXFxcXC8/KVxcXFxiKFswLTldfFsxLTldWzAtOV18MVswMV1bMC05XXwxMlswLThdKT9cXFxcYiRgO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlc29sdmUgYSBob3N0bmFtZSBieSBkb2luZyBhIEROUyBSZXNvbHZlLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaG9zdG5hbWUgVGhlIGhvc3RuYW1lIHRvIHJlc29sdmVcbiAgICAgICAgICovXG4gICAgICAgIHN0YXRpYyBhc3luYyByZXNvbHZlRE5TKGhvc3RuYW1lID0gXCJudG9wLm9yZ1wiKSB7XG5cbiAgICAgICAgICAgICAgICAvLyByZXNvbHZlIHRoZSBob3N0bmFtZSBieSBkb2luZyBhIGZldGNoIHJlcXVlc3QgdG8gdGhlIGJhY2tlbmRcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVxdWVzdCA9IGF3YWl0IGZldGNoKGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvZG5zL3Jlc29sdmUubHVhP2hvc3RuYW1lPSR7aG9zdG5hbWV9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QuanNvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBwcmludHMgb3V0IHRoZSBlcnJvciBpZiB0aGUgcmVxdWVzdCBmYWlsc1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgU29tZXRoaW5nIHdlbnQgd3Jvbmcgd2hlbiByZXNvbHZpbmcgaG9zdG5hbWU6ICR7ZXJyfWApXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gaWYgdGhlIHJlcXVlc3QgaGFzIGZhaWxlZCByZXR1cm4gYSBwbGFjZWhvbGRlciByZXNwb25zZVxuICAgICAgICAgICAgICAgIC8vIGluZGljYXRpbmcgdGhlIGZhaWx1cmVcbiAgICAgICAgICAgICAgICByZXR1cm4geyByYzogLTEsIHJjX3N0cjogXCJGQUlMRURfSFRUUF9SRVFVRVNUXCIgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXBsYWNlIHRoZSBpbnB1dHMgd2hpY2ggY29udGFpbiB0aGUgW2RhdGEtcGF0dGVybl0gYXR0cmlidXRlXG4gICAgICAgICAqIHdpdGggdGhlIFtwYXR0ZXJuXSBhdHRyaWJ1dGUuXG4gICAgICAgICAqL1xuICAgICAgICBzdGF0aWMgaW5pdERhdGFQYXR0ZXJucygpIHtcbiAgICAgICAgICAgICAgICAvLyBmb3IgZWFjaCBpbnB1dCB3aXRoIHRoZSBkYXRhLXBhdHRlcm4gYXR0cmlidXRlXG4gICAgICAgICAgICAgICAgLy8gc3Vic3RpdHV0ZSB0aGUgZGF0YS1wYXR0ZXJuIHdpdGggdGhlIHJpZ2h0IHJlZ2V4ZXNcbiAgICAgICAgICAgICAgICAkKGBpbnB1dFtkYXRhLXBhdHRlcm5dYCkuZWFjaChmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBwYXR0ZXJuIGlzIGVtcHR5IHRoZW4gcHJpbnQgYSB3YXJuIGluc2lkZSB0aGUgY29uc29sZVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YVBhdHRlcm4gPSAkKHRoaXMpLmRhdGEoJ3BhdHRlcm4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZGF0YVBhdHRlcm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBBbiBlbXB0eSBkYXRhLXBhdHRlcm4gb24gYW4gaW5wdXQgd2FzIGZvdW5kIWAsIHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJ1aWxkIHRoZSByZWdleHAgcGF0dGVybiBmb3IgdGhlIGlucHV0XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXR0ZXJuID0gZGF0YVBhdHRlcm4uc3BsaXQoJ3wnKS5tYXAocCA9PiBSRUdFWEVTW3BdLnRvU3RyaW5nKCkpLmpvaW4oJ3wnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxvYWQgdGhlIHBhdHRlcm5cbiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykuYXR0cigncGF0dGVybicsIHBhdHRlcm4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZlIHRoZSBkYXRhLXBhdHRlcm4gZnJvbSB0aGUgaW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlQXR0cignZGF0YS1wYXR0ZXJuJyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgaXNfZ29vZF9pcHY0KGlwdjQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChSRUdFWEVTLmlwdjQpLnRlc3QoaXB2NCk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgaXNfZ29vZF9pcHY2KGlwdjYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChSRUdFWEVTLmlwdjYpLnRlc3QoaXB2Nik7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgaXNfbWFjX2FkZHJlc3MobWFjKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoUkVHRVhFUy5tYWNBZGRyZXNzKS50ZXN0KG1hYyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgaXNOdW1lcmljKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC9eXFxkKyQvLnRlc3QodmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGlzX25ldHdvcmtfbWFzayh3aGF0LCBvcHRpb25hbF9tYXNrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVsZW1zID0gd2hhdC5zcGxpdChcIi9cIik7XG4gICAgICAgICAgICAgICAgdmFyIG1hc2sgPSBudWxsO1xuICAgICAgICAgICAgICAgIHZhciBpcF9hZGRyO1xuXG4gICAgICAgICAgICAgICAgaWYgKGVsZW1zLmxlbmd0aCAhPSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW9wdGlvbmFsX21hc2spXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpcF9hZGRyID0gd2hhdDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXBfYWRkciA9IGVsZW1zWzBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIU50b3BVdGlscy5pc051bWVyaWMoZWxlbXNbMV0pKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgbWFzayA9IHBhcnNlSW50KGVsZW1zWzFdKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hc2sgPCAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoTnRvcFV0aWxzLmlzX2dvb2RfaXB2NChpcF9hZGRyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hc2sgPT09IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2sgPSAzMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG1hc2sgPiAzMilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiaXB2NFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzOiBpcF9hZGRyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrOiBtYXNrXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoTnRvcFV0aWxzLmlzX2dvb2RfaXB2NihlbGVtc1swXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXNrID09PSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrID0gMTI4O1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAobWFzayA+IDEyOClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChmYWxzZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiaXB2NlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzOiBpcF9hZGRyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrOiBtYXNrXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGZiaXRzKGJpdHMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzaXplcyA9IFsnYnBzJywgJ0ticHMnLCAnTWJwcycsICdHYnBzJywgJ1RicHMnXTtcblxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgKGJpdHMpID09PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiLVwiO1xuXG4gICAgICAgICAgICAgICAgaWYgKGJpdHMgPT0gMCkgcmV0dXJuICcwJztcbiAgICAgICAgICAgICAgICBpZiAoKGJpdHMgPiAwKSAmJiAoYml0cyA8IE5UT1BOR19NSU5fVklTVUFMX1ZBTFVFKSkgcmV0dXJuICgnPCAnICsgTlRPUE5HX01JTl9WSVNVQUxfVkFMVUUgKyAnIGJwcycpO1xuICAgICAgICAgICAgICAgIHZhciBiaXRzX2xvZzEwMDAgPSBNYXRoLmxvZyhiaXRzKSAvIE1hdGgubG9nKDEwMDApXG4gICAgICAgICAgICAgICAgdmFyIGkgPSBwYXJzZUludChNYXRoLmZsb29yKGJpdHNfbG9nMTAwMCkpO1xuICAgICAgICAgICAgICAgIGlmIChpIDwgMCB8fCBpc05hTihpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaSA9IDA7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpID49IHNpemVzLmxlbmd0aCkgeyAvLyBwcmV2ZW50cyBvdmVyZmxvd3NcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIj4gXCIgKyBzaXplc1tzaXplcy5sZW5ndGggLSAxXVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChpIDw9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKGJpdHMgLyBNYXRoLnBvdygxMDAwLCBpKSAqIDEwMCkgLyAxMDAgKyAnICcgKyBzaXplc1tpXVxuICAgICAgICAgICAgICAgIH0gXG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmV0ID0gcGFyc2VGbG9hdChiaXRzIC8gTWF0aC5wb3coMTAwMCwgaSkpLnRvRml4ZWQoMilcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXQgJSAxID09IDApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldCA9IE1hdGgucm91bmQocmV0KVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldCArICcgJyArIHNpemVzW2ldXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGV4cG9ydF9yYXRlKGVwcykge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgKGVwcykgPT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCItXCI7XG5cbiAgICAgICAgICAgICAgICB2YXIgc2l6ZXMgPSBbJ2V4cC9zJywgJ0tleHAvcyddO1xuICAgICAgICAgICAgICAgIGlmIChlcHMgPT0gMCkgcmV0dXJuICcwJztcbiAgICAgICAgICAgICAgICBpZiAoKGVwcyA+IDApICYmIChlcHMgPCBOVE9QTkdfTUlOX1ZJU1VBTF9WQUxVRSkpIHJldHVybiAoJzwgJyArIE5UT1BOR19NSU5fVklTVUFMX1ZBTFVFICsgJyBleHBzL3MnKTtcbiAgICAgICAgICAgICAgICB2YXIgcmVzID0gTnRvcFV0aWxzLnNjYWxlVmFsdWUoZXBzLCBzaXplcywgMTAwMCk7XG5cbiAgICAgICAgICAgICAgICAvLyBSb3VuZCB0byB0d28gZGVjaW1hbCBkaWdpdHNcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChyZXNbMF0gKiAxMDApIC8gMTAwICsgJyAnICsgcmVzWzFdO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGV4cG9ydHNfZm9ybWF0KGV4cG9ydHMpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIChleHBvcnRzKSA9PT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIi1cIjtcblxuICAgICAgICAgICAgICAgIHZhciBleHBvcnRzX2xhYmVsID0gaTE4bl9leHQuZXhwb3J0cy50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgICAgICAgICAgdmFyIHNpemVzID0gW2V4cG9ydHNfbGFiZWwsICdLICcgKyBleHBvcnRzX2xhYmVsXTtcbiAgICAgICAgICAgICAgICBpZiAoZXhwb3J0cyA9PSAwKSByZXR1cm4gJzAnO1xuICAgICAgICAgICAgICAgIGlmICgoZXhwb3J0cyA+IDApICYmIChleHBvcnRzIDwgTlRPUE5HX01JTl9WSVNVQUxfVkFMVUUpKSByZXR1cm4gKCc8ICcgKyBOVE9QTkdfTUlOX1ZJU1VBTF9WQUxVRSArICcgZXhwcy9zJyk7XG4gICAgICAgICAgICAgICAgdmFyIHJlcyA9IE50b3BVdGlscy5zY2FsZVZhbHVlKGV4cG9ydHMsIHNpemVzLCAxMDAwKTtcblxuICAgICAgICAgICAgICAgIC8vIFJvdW5kIHRvIHR3byBkZWNpbWFsIGRpZ2l0c1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHJlc1swXSAqIDEwMCkgLyAxMDAgKyAnICcgKyByZXNbMV07XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgZmJpdHNfZnJvbV9ieXRlcyhieXRlcykge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgKGJ5dGVzKSA9PT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIi1cIjtcbiAgICAgICAgICAgICAgICByZXR1cm4gKE50b3BVdGlscy5mYml0cyhieXRlcyAqIDgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBmcGFja2V0cyhwcHMpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIChwcHMpID09PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiLVwiO1xuXG4gICAgICAgICAgICAgICAgdmFyIHNpemVzID0gWydwcHMnLCAnS3BwcycsICdNcHBzJywgJ0dwcHMnLCAnVHBwcyddO1xuICAgICAgICAgICAgICAgIGlmIChwcHMgPT0gMCkgcmV0dXJuICcwJztcbiAgICAgICAgICAgICAgICBpZiAoKHBwcyA+IDApICYmIChwcHMgPCBOVE9QTkdfTUlOX1ZJU1VBTF9WQUxVRSkpIHJldHVybiAoJzwgJyArIE5UT1BOR19NSU5fVklTVUFMX1ZBTFVFICsgJyBwcHMnKTtcbiAgICAgICAgICAgICAgICB2YXIgcmVzID0gTnRvcFV0aWxzLnNjYWxlVmFsdWUocHBzLCBzaXplcywgMTAwMCk7XG5cbiAgICAgICAgICAgICAgICAvLyBSb3VuZCB0byB0d28gZGVjaW1hbCBkaWdpdHNcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChyZXNbMF0gKiAxMDApIC8gMTAwICsgJyAnICsgcmVzWzFdO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGZwb2ludHMocHBzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAocHBzKSA9PT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIi1cIjtcblxuICAgICAgICAgICAgICAgIHZhciBzaXplcyA9IFsncHQvcycsICdLcHQvcycsICdNcHQvcycsICdHcHQvcycsICdUcHQvcyddO1xuICAgICAgICAgICAgICAgIGlmIChwcHMgPT0gMCkgcmV0dXJuICcwJztcbiAgICAgICAgICAgICAgICBpZiAoKHBwcyA+IDApICYmIChwcHMgPCBOVE9QTkdfTUlOX1ZJU1VBTF9WQUxVRSkpIHJldHVybiAoJzwgJyArIE5UT1BOR19NSU5fVklTVUFMX1ZBTFVFICsgJyBwdC9zJyk7XG4gICAgICAgICAgICAgICAgdmFyIHJlcyA9IE50b3BVdGlscy5zY2FsZVZhbHVlKHBwcywgc2l6ZXMsIDEwMDApO1xuXG4gICAgICAgICAgICAgICAgLy8gUm91bmQgdG8gdHdvIGRlY2ltYWwgZGlnaXRzXG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQocmVzWzBdICogMTAwKSAvIDEwMCArICcgJyArIHJlc1sxXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBmZmxvd3MoZnBzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAoZnBzKSA9PT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIi1cIjtcblxuICAgICAgICAgICAgICAgIHZhciBzaXplcyA9IFsnZnBzJywgJ0tmcHMnLCAnTWZwcycsICdHZnBzJywgJ1RmcHMnXTtcbiAgICAgICAgICAgICAgICBpZiAoZnBzID09IDApIHJldHVybiAnMCc7XG4gICAgICAgICAgICAgICAgaWYgKChmcHMgPiAwKSAmJiAoZnBzIDwgTlRPUE5HX01JTl9WSVNVQUxfVkFMVUUpKSByZXR1cm4gKCc8ICcgKyBOVE9QTkdfTUlOX1ZJU1VBTF9WQUxVRSArICcgZnBzJyk7XG4gICAgICAgICAgICAgICAgdmFyIHJlcyA9IE50b3BVdGlscy5zY2FsZVZhbHVlKGZwcywgc2l6ZXMsIDEwMDApO1xuXG4gICAgICAgICAgICAgICAgLy8gUm91bmQgdG8gdHdvIGRlY2ltYWwgZGlnaXRzXG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQocmVzWzBdICogMTAwKSAvIDEwMCArICcgJyArIHJlc1sxXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBmbXNncyhtcHMpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIChtcHMpID09PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiLVwiO1xuXG4gICAgICAgICAgICAgICAgdmFyIHNpemVzID0gWydtc2cvcycsICdLbXNnL3MnLCAnTXNnL3MnLCAnR21zZy9zJywgJ1Rtc2cvcyddO1xuICAgICAgICAgICAgICAgIGlmIChtcHMgPT0gMCkgcmV0dXJuICcwJztcbiAgICAgICAgICAgICAgICBpZiAoKG1wcyA+IDApICYmIChtcHMgPCBOVE9QTkdfTUlOX1ZJU1VBTF9WQUxVRSkpIHJldHVybiAoJzwgJyArIE5UT1BOR19NSU5fVklTVUFMX1ZBTFVFICsgJyBtcHMnKTtcbiAgICAgICAgICAgICAgICB2YXIgcmVzID0gTnRvcFV0aWxzLnNjYWxlVmFsdWUobXBzLCBzaXplcywgMTAwMCk7XG5cbiAgICAgICAgICAgICAgICAvLyBSb3VuZCB0byB0d28gZGVjaW1hbCBkaWdpdHNcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChyZXNbMF0gKiAxMDApIC8gMTAwICsgJyAnICsgcmVzWzFdO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGZtaWxsaXMobXMpIHtcblxuICAgICAgICAgICAgICAgIGlmIChtcyA9PT0gdW5kZWZpbmVkKSByZXR1cm4gJy0nO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNpemVzID0gWydtcyddO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcyA9IE50b3BVdGlscy5zY2FsZVZhbHVlKG1zLCBzaXplcywgMTAwMCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQocmVzWzBdICogMTAwKSAvIDEwMCArICcgJyArIHJlc1sxXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBmbm9uZSh2YWwpIHtcblxuICAgICAgICAgICAgICAgIGlmICh2YWwgPT09IHVuZGVmaW5lZCkgcmV0dXJuICctJztcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCh2YWwgKiAxMDApIC8gMTAwO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGZhbGVydHMoYXBzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAoYXBzKSA9PT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIi1cIjtcblxuICAgICAgICAgICAgICAgIC8vIFJvdW5kIHRvIHR3byBkZWNpbWFsIGRpZ2l0c1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKGFwcyAqIDEwMCkgLyAxMDAgKyAnIGFsZXJ0cy9zJztcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBmaW50KHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAodmFsdWUpID09PSBcInVuZGVmaW5lZFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiLVwiO1xuXG4gICAgICAgICAgICAgICAgdmFyIHggPSBNYXRoLnJvdW5kKHZhbHVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4geC50b1N0cmluZygpLnJlcGxhY2UoL1xcQig/PShcXGR7M30pKyg/IVxcZCkpL2csIFwiLFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBmZmxvYXQodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mICh2YWx1ZSkgPT09IFwidW5kZWZpbmVkXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCItXCI7XG5cbiAgICAgICAgICAgICAgICB2YXIgeCA9IE1hdGgucm91bmQodmFsdWUgKiAxMDApIC8gMTAwLjtcbiAgICAgICAgICAgICAgICByZXR1cm4geC50b1N0cmluZygpLnJlcGxhY2UoL1xcQig/PShcXGR7M30pKyg/IVxcZCkpL2csIFwiLFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBmcGVyY2VudCh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgKHZhbHVlKSA9PT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIi1cIjtcblxuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlICogMTAwKSAvIDEwMCArIFwiICVcIjtcbiAgICAgICAgfVxuXG4gICAgc3RhdGljIHBlcmNlbnRhZ2UodmFsdWUsIHRvdGFsKSB7XG4gICAgICAgIGlmKHRvdGFsID4gMCkge1xuICAgICAgICAgICAgdmFyIHBjdGcgPSBNYXRoLnJvdW5kKCh2YWx1ZSAqIDEwMDAwKSAvIHRvdGFsKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZihwY3RnID4gMCkge1xuICAgICAgICAgICAgICAgIC8qIFR3byBkZWNpbWFscyAqL1xuICAgICAgICAgICAgICAgIHJldHVybihcIiBbIFwiICsgKHBjdGcvMTAwKSArIFwiICUgXSBcIilcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuKFwiXCIpIFxuICAgIH1cblxuICAgICAgICBzdGF0aWMgZmRhdGUod2hlbikge1xuICAgICAgICAgICAgICAgIHZhciBlcG9jaCA9IHdoZW4gKiAxMDAwO1xuICAgICAgICAgICAgICAgIHZhciBkID0gbmV3IERhdGUoZXBvY2gpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIChkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBjYXBpdGFsaXNlRmlyc3RMZXR0ZXIoc3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0cmluZy5zbGljZSgxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBnZXRfdHJlbmQoYWN0dWFsLCBiZWZvcmUpIHtcbiAgICAgICAgICAgICAgICBpZiAoKGFjdHVhbCA9PT0gdW5kZWZpbmVkKSB8fCAoYmVmb3JlID09PSB1bmRlZmluZWQpIHx8IChhY3R1YWwgPT0gYmVmb3JlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcIjxpIGNsYXNzPVxcXCJmYXMgZmEtbWludXNcXFwiPjwvaT5cIik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhY3R1YWwgPiBiZWZvcmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXCI8aSBjbGFzcz1cXFwiZmFzIGZhLWFycm93LXVwXFxcIj48L2k+XCIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFwiPGkgY2xhc3M9XFxcImZhcyBmYS1hcnJvdy1kb3duXFxcIj48L2k+XCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBhYmJyZXZpYXRlU3RyaW5nKHN0ciwgbGVuKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFzdHIpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgICAgICAgICBpZiAoc3RyLmxlbmd0aCA8IGxlbilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHI7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0ci5zdWJzdHJpbmcoMCwgbGVuKSArIFwiLi4uXCI7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgdG9GaXhlZDIobnVtKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFudW0pIHJldHVybiBcIlwiO1xuICAgICAgICAgICAgICAgIHJldHVybiBudW0udG9GaXhlZCgyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENvbnZlcnQgYnl0ZXMgdG8gaHVtYW4gcmVhZGFibGUgZm9ybWF0XG4gICAgICAgIHN0YXRpYyBieXRlc1RvU2l6ZShieXRlcykge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgKGJ5dGVzKSA9PT0gXCJ1bmRlZmluZWRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIi1cIjtcblxuICAgICAgICAgICAgICAgIHZhciBwcmVjaXNpb24gPSAyO1xuICAgICAgICAgICAgICAgIHZhciBraWxvYnl0ZSA9IDEwMjQ7XG4gICAgICAgICAgICAgICAgdmFyIG1lZ2FieXRlID0ga2lsb2J5dGUgKiAxMDI0O1xuICAgICAgICAgICAgICAgIHZhciBnaWdhYnl0ZSA9IG1lZ2FieXRlICogMTAyNDtcbiAgICAgICAgICAgICAgICB2YXIgdGVyYWJ5dGUgPSBnaWdhYnl0ZSAqIDEwMjQ7XG5cbiAgICAgICAgICAgICAgICBpZiAoKGJ5dGVzID49IDApICYmIChieXRlcyA8IGtpbG9ieXRlKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGJ5dGVzICE9IDApICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoYnl0ZXMudG9GaXhlZChwcmVjaXNpb24pKSArIFwiIEJ5dGVzXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KGJ5dGVzKSArIFwiIEJ5dGVzXCI7XG4gIFxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKChieXRlcyA+PSBraWxvYnl0ZSkgJiYgKGJ5dGVzIDwgbWVnYWJ5dGUpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoKGJ5dGVzIC8ga2lsb2J5dGUpLnRvRml4ZWQocHJlY2lzaW9uKSkgKyAnIEtCJztcbiAgICAgICAgICAgICAgICBlbHNlIGlmICgoYnl0ZXMgPj0gbWVnYWJ5dGUpICYmIChieXRlcyA8IGdpZ2FieXRlKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KChieXRlcyAvIG1lZ2FieXRlKS50b0ZpeGVkKHByZWNpc2lvbikpICsgJyBNQic7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoKGJ5dGVzID49IGdpZ2FieXRlKSAmJiAoYnl0ZXMgPCB0ZXJhYnl0ZSkpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdCgoYnl0ZXMgLyBnaWdhYnl0ZSkudG9GaXhlZChwcmVjaXNpb24pKSArICcgR0InO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJ5dGVzID49IHRlcmFieXRlKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoKGJ5dGVzIC8gdGVyYWJ5dGUpLnRvRml4ZWQocHJlY2lzaW9uKSkgKyAnIFRCJztcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChieXRlcy50b0ZpeGVkKHByZWNpc2lvbikpICsgJyBCeXRlcyc7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgZHJhd1RyZW5kKGN1cnJlbnQsIGxhc3QsIHdpdGhDb2xvcikge1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50ID09IGxhc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXCI8aSBjbGFzcz1cXFwiZmFzIGZhLW1pbnVzXFxcIj48L2k+XCIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudCA+IGxhc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXCI8aSBjbGFzcz1cXFwiZmFzIGZhLWFycm93LXVwXFxcIlwiICsgd2l0aENvbG9yICsgXCI+PC9pPlwiKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcIjxpIGNsYXNzPVxcXCJmYXMgZmEtYXJyb3ctZG93blxcXCI+PC9pPlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgdG9nZ2xlQWxsVGFicyhlbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVuYWJsZWQgPT09IHRydWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAkKFwiI2hpc3RvcmljYWwtdGFicy1jb250YWluZXJcIikuZmluZChcImxpXCIpLnJlbW92ZUNsYXNzKFwiZGlzYWJsZWRcIikuZmluZChcImFcIikuYXR0cihcImRhdGEtdG9nZ2xlXCIsIFwidGFiXCIpO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICQoXCIjaGlzdG9yaWNhbC10YWJzLWNvbnRhaW5lclwiKS5maW5kKFwibGlcIikuYWRkQ2xhc3MoXCJkaXNhYmxlZFwiKS5maW5kKFwiYVwiKS5yZW1vdmVBdHRyKFwiZGF0YS10b2dnbGVcIik7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgZGlzYWJsZUFsbERyb3Bkb3duc0FuZFRhYnMoKSB7XG4gICAgICAgICAgICAgICAgJChcInNlbGVjdFwiKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykucHJvcChcImRpc2FibGVkXCIsIHRydWUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIE50b3BVdGlscy50b2dnbGVBbGxUYWJzKGZhbHNlKVxuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGVuYWJsZUFsbERyb3Bkb3duc0FuZFRhYnMoKSB7XG4gICAgICAgICAgICAgICAgJChcInNlbGVjdFwiKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykucHJvcChcImRpc2FibGVkXCIsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBOdG9wVXRpbHMudG9nZ2xlQWxsVGFicyh0cnVlKVxuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGNhcGl0YWxpemUocykge1xuICAgICAgICAgICAgICAgIHJldHVybiBzICYmIHNbMF0udG9VcHBlckNhc2UoKSArIHMuc2xpY2UoMSk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgYWRkQ29tbWFzKG5TdHIpIHtcbiAgICAgICAgICAgICAgICBuU3RyICs9ICcnO1xuICAgICAgICAgICAgICAgIHZhciB4ID0gblN0ci5zcGxpdCgnLicpO1xuICAgICAgICAgICAgICAgIHZhciB4MSA9IHhbMF07XG4gICAgICAgICAgICAgICAgdmFyIHgyID0geC5sZW5ndGggPiAxID8gJy4nICsgeFsxXSA6ICcnO1xuICAgICAgICAgICAgICAgIHZhciByZ3ggPSAvKFxcZCspKFxcZHszfSkvO1xuICAgICAgICAgICAgICAgIHdoaWxlIChyZ3gudGVzdCh4MSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHgxID0geDEucmVwbGFjZShyZ3gsICckMScgKyAnLCcgKyAnJDInKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHgxICsgeDI7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgc2NhbGVWYWx1ZSh2YWwsIHNpemVzLCBzY2FsZSwgZGVjaW1hbHMpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsID09IDApIHJldHVybiBbMCwgc2l6ZXNbMF1dO1xuICAgICAgICAgICAgICAgIGxldCBmYWN0b3IgPSBkZWNpbWFscyA/ICgxMCAqIGRlY2ltYWxzKSA6IDEwO1xuXG4gICAgICAgICAgICAgICAgdmFyIGkgPSBwYXJzZUludChNYXRoLmZsb29yKE1hdGgubG9nKHZhbCkgLyBNYXRoLmxvZyhzY2FsZSkpKTtcbiAgICAgICAgICAgICAgICBpZiAoaSA8IDAgfHwgaXNOYU4oaSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSAwO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaSA+PSBzaXplcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBzaXplcy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBbTWF0aC5yb3VuZCgodmFsIC8gTWF0aC5wb3coc2NhbGUsIGkpKSAqIGZhY3RvcikgLyBmYWN0b3IsIHNpemVzW2ldXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBmb3JtYXRWYWx1ZSh2YWwsIGRlY2ltYWxzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNpemVzID0gWycnLCAnSycsICdNJywgJ0cnLCAnVCddO1xuICAgICAgICAgICAgICAgIGlmICh2YWwgPT0gMCkgcmV0dXJuICcwJztcbiAgICAgICAgICAgICAgICBpZiAoKHZhbCA+IDApICYmICh2YWwgPCBOVE9QTkdfTUlOX1ZJU1VBTF9WQUxVRSkpIHJldHVybiAoJzwgJyArIE5UT1BOR19NSU5fVklTVUFMX1ZBTFVFKTtcbiAgICAgICAgICAgICAgICBpZiAoZGVjaW1hbHMgPT0gdW5kZWZpbmVkKSBkZWNpbWFscyA9IDA7XG4gICAgICAgICAgICAgICAgdmFyIHJlcyA9IE50b3BVdGlscy5zY2FsZVZhbHVlKHZhbCwgc2l6ZXMsIDEwMDAsIGRlY2ltYWxzKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiByZXNbMF0gKyByZXNbMV07XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgZm9ybWF0UGFja2V0cyhuKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChOdG9wVXRpbHMuYWRkQ29tbWFzKG4udG9GaXhlZCgwKSkgKyBcIiBQa3RzXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGJ5dGVzVG9Wb2x1bWUoYnl0ZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2l6ZXMgPSBbJ0J5dGVzJywgJ0tCJywgJ01CJywgJ0dCJywgJ1RCJ107XG4gICAgICAgICAgICAgICAgaWYgKGJ5dGVzID09IDApIHJldHVybiAnMCBCeXRlcyc7XG4gICAgICAgICAgICAgICAgaWYgKChieXRlcyA+IDApICYmIChieXRlcyA8IE5UT1BOR19NSU5fVklTVUFMX1ZBTFVFKSkgcmV0dXJuICgnPCAnICsgTlRPUE5HX01JTl9WSVNVQUxfVkFMVUUgKyBcIiBCeXRlc1wiKTtcbiAgICAgICAgICAgICAgICB2YXIgcmVzID0gTnRvcFV0aWxzLnNjYWxlVmFsdWUoYnl0ZXMsIHNpemVzLCAxMDI0KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHJlc1swXSkgKyBcIiBcIiArIHJlc1sxXTtcbiAgICAgICAgfTtcblxuICAgICAgICBzdGF0aWMgYnl0ZXNUb1ZvbHVtZUFuZExhYmVsKGJ5dGVzKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNpemVzID0gWydCeXRlcycsICdLQicsICdNQicsICdHQicsICdUQiddO1xuICAgICAgICAgICAgICAgIGlmIChieXRlcyA9PSAwKSByZXR1cm4gJzAgQnl0ZXMnO1xuICAgICAgICAgICAgICAgIHZhciBpID0gcGFyc2VJbnQoTWF0aC5mbG9vcihNYXRoLmxvZyhieXRlcykgLyBNYXRoLmxvZygxMDI0KSkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbKGJ5dGVzIC8gTWF0aC5wb3coMTAyNCwgaSkpLnRvRml4ZWQoMiksIHNpemVzW2ldXTtcbiAgICAgICAgfTtcblxuICAgICAgICBzdGF0aWMgYml0c1RvU2l6ZShiaXRzLCBmYWN0b3IpIHtcbiAgICAgICAgICAgICAgICBmYWN0b3IgPSBmYWN0b3IgfHwgMTAwMDtcbiAgICAgICAgICAgICAgICB2YXIgc2l6ZXMgPSBbJ2JwcycsICdLYnBzJywgJ01icHMnLCAnR2JwcycsICdUYnBzJ107XG4gICAgICAgICAgICAgICAgaWYgKGJpdHMgPT0gMCkgcmV0dXJuICcwIGJwcyc7XG4gICAgICAgICAgICAgICAgaWYgKChiaXRzID4gMCkgJiYgKGJpdHMgPCBOVE9QTkdfTUlOX1ZJU1VBTF9WQUxVRSkpIHJldHVybiAoJzwgJyArIE5UT1BOR19NSU5fVklTVUFMX1ZBTFVFICsgXCIgYnBzXCIpO1xuICAgICAgICAgICAgICAgIHZhciByZXMgPSBOdG9wVXRpbHMuc2NhbGVWYWx1ZShiaXRzLCBzaXplcywgZmFjdG9yKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiByZXNbMF0udG9GaXhlZCgyKSArIFwiIFwiICsgcmVzWzFdO1xuICAgICAgICB9O1xuXG4gICAgICAgIHN0YXRpYyBiaXRzVG9TaXplX25vX2NvbW1hKGJpdHMsIGZhY3Rvcikge1xuICAgICAgICAgICAgICAgIGZhY3RvciA9IGZhY3RvciB8fCAxMDAwO1xuICAgICAgICAgICAgICAgIHZhciBzaXplcyA9IFsnYnBzJywgJ0ticHMnLCAnTWJwcycsICdHYnBzJywgJ1RicHMnXTtcbiAgICAgICAgICAgICAgICBpZiAoYml0cyA9PSAwKSByZXR1cm4gJzAgYnBzJztcbiAgICAgICAgICAgICAgICBpZiAoKGJpdHMgPiAwKSAmJiAoYml0cyA8IE5UT1BOR19NSU5fVklTVUFMX1ZBTFVFKSkgcmV0dXJuICgnPCAnICsgTlRPUE5HX01JTl9WSVNVQUxfVkFMVUUgKyBcIiBicHNcIik7XG4gICAgICAgICAgICAgICAgdmFyIHJlcyA9IE50b3BVdGlscy5zY2FsZVZhbHVlKGJpdHMsIHNpemVzLCBmYWN0b3IpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc1swXSsgXCIgXCIgKyByZXNbMV07XG4gICAgICAgIH07XG5cbiAgICAgICAgc3RhdGljIHNlY29uZHNUb1RpbWUoc2Vjb25kcykge1xuXG4gICAgICAgICAgICAgICAgaWYgKHNlY29uZHMgPCAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFwiPCAxIHNlY1wiKVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCBkYXlzID0gTWF0aC5mbG9vcihzZWNvbmRzIC8gODY0MDApXG4gICAgICAgICAgICAgICAgbGV0IGhvdXJzID0gTWF0aC5mbG9vcigoc2Vjb25kcyAvIDM2MDApIC0gKGRheXMgKiAyNCkpXG4gICAgICAgICAgICAgICAgbGV0IG1pbnV0ZXMgPSBNYXRoLmZsb29yKChzZWNvbmRzIC8gNjApIC0gKGRheXMgKiAxNDQwKSAtIChob3VycyAqIDYwKSlcbiAgICAgICAgICAgICAgICBsZXQgc2VjID0gc2Vjb25kcyAlIDYwXG4gICAgICAgICAgICAgICAgbGV0IG1zZyA9IFwiXCIsIG1zZ19hcnJheSA9IFtdXG5cbiAgICAgICAgICAgICAgICBpZiAoZGF5cyA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB5ZWFycyA9IE1hdGguZmxvb3IoZGF5cyAvIDM2NSlcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHllYXJzID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXlzID0gZGF5cyAlIDM2NVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1zZyA9IHllYXJzICsgXCIgeWVhclwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh5ZWFycyA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtc2cgKz0gXCJzXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1zZ19hcnJheS5wdXNoKG1zZylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXNnID0gXCJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbXNnID0gZGF5cyArIFwiIGRheVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF5cyA+IDEpIHsgbXNnICs9IFwic1wiIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG1zZ19hcnJheS5wdXNoKG1zZylcbiAgICAgICAgICAgICAgICAgICAgICAgIG1zZyA9IFwiXCJcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaG91cnMgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaG91cnMgPCAxMCkgeyBtc2cgPSBcIjBcIiB9XG4gICAgICAgICAgICAgICAgICAgICAgICBtc2cgKz0gaG91cnMgKyBcIjpcIjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAobWludXRlcyA8IDEwKSB7IG1zZyArPSBcIjBcIiB9XG4gICAgICAgICAgICAgICAgbXNnICs9IG1pbnV0ZXMgKyBcIjpcIjtcbiAgICAgICAgICAgICAgICBpZiAoc2VjIDwgMTApIHsgbXNnICs9IFwiMFwiIH1cbiAgICAgICAgICAgICAgICBtc2cgKz0gc2VjO1xuICAgICAgICAgICAgICAgIG1zZ19hcnJheS5wdXNoKG1zZylcblxuICAgICAgICAgICAgICAgIHJldHVybiBtc2dfYXJyYXkuam9pbihcIiwgXCIpXG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgbXNlY1RvVGltZShtc2VjKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1zZWMgPj0gMTAwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE50b3BVdGlscy5zZWNvbmRzVG9UaW1lKG1zZWMvMTAwMCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB4ID0gTWF0aC5yb3VuZChtc2VjICogMTAwMCkgLyAxMDAwLjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB4LnRvU3RyaW5nKCkucmVwbGFjZSgvXFxCKD89KFxcZHszfSkrKD8hXFxkKSkvZywgXCIsXCIpICsgXCIgbXNcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgZXBvY2gyU2VlbihlcG9jaCkge1xuICAgICAgICAgICAgICAgIC8qIDA4LzAxLzEzIDE1OjEyOjM3IFsxOCBtaW4sIDEzIHNlYyBhZ29dICovXG4gICAgICAgICAgICAgICAgdmFyIGQgPSBuZXcgRGF0ZShlcG9jaCAqIDEwMDApO1xuICAgICAgICAgICAgICAgIHZhciB0ZGlmZiA9IE1hdGguZmxvb3IoKChuZXcgRGF0ZSgpKS5nZXRUaW1lKCkgLyAxMDAwKSAtIGVwb2NoKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiAoZC5mb3JtYXQoXCJkZC9NTS95eXl5IGhoOm1tOnNzXCIpICsgXCIgW1wiICsgTnRvcFV0aWxzLnNlY29uZHNUb1RpbWUodGRpZmYpICsgXCIgYWdvXVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qIHRpY2tzIGZvciBncmFwaCB4IGF4aXMgKi9cbiAgICAgICAgc3RhdGljIGdyYXBoR2V0WEF4aXNUaWNrc0Zvcm1hdChkaWZmX2Vwb2NoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRpY2tGb3JtYXQ7XG5cbiAgICAgICAgICAgICAgICBpZiAoZGlmZl9lcG9jaCA8PSA4NjQwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGlja0Zvcm1hdCA9IFwiJUg6JU06JVNcIjtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRpZmZfZXBvY2ggPD0gMiAqIDg2NDAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aWNrRm9ybWF0ID0gXCIlYiAlZSwgJUg6JU06JVNcIjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGlja0Zvcm1hdCA9IFwiJWIgJWVcIjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gKHRpY2tGb3JtYXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIHBhcmFtc0V4dGVuZChkZWZhdWx0cywgb3ZlcnJpZGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJC5leHRlbmQoe30sIGRlZmF1bHRzLCBvdmVycmlkZSk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgcGFyYW1zVG9Gb3JtKGZvcm0sIHBhcmFtcykge1xuICAgICAgICAgICAgICAgIGZvcm0gPSAkKGZvcm0pO1xuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgayBpbiBwYXJhbXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbXMuaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gJCgnPGlucHV0IHR5cGU9XCJoaWRkZW5cIiBuYW1lPVwiJyArIGsgKyAnXCIgdmFsdWU9XCInICsgcGFyYW1zW2tdICsgJ1wiPicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5hcHBlbmRUbyhmb3JtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZm9ybTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qXG4gICAgICAgICAqIFRoaXMgZnVuY3Rpb24gY3JlYXRlcyBhIGphdmFzY3JpcHQgb2JqZWN0IHdoZXJlIGVhY2ggay0+diBwYWlyIG9mIHRoZSBpbnB1dCBvYmplY3RcbiAgICAgICAgICogdHJhbnNsYXRlcyBpbnRvIHR3byBwYWlycyBpbiB0aGUgb3V0cHV0IG9iamVjdDogYSBrZXlfW2ldLT5rIGFuZCBhIHZhbF9baV0tPnYsIHdoZXJlXG4gICAgICAgICAqIGkgaXMgYW4gaW5jcmVtZW50YWwgaW5kZXguXG4gICAgICAgICAqXG4gICAgICAgICAqIFRoZSBvdXRwdXQgb2JqZWN0IGNhbiB0aGVuIGJlIHNlcmlhbGl6ZWQgdG8gYW4gVVJMLiBUaGlzIGNvbnZlcnNpb24gaXMgcmVxdWlyZWQgZm9yXG4gICAgICAgICAqIGhhbmRsaW5nIHNwZWNpYWwgY2hhcmFjdGVyczogc2luY2UgbnRvcG5nIHN0cmlwcyBzcGVjaWFsIGNoYXJhY3RlcnMgaW4gX0dFVCBrZXlzLFxuICAgICAgICAgKiBfR0VUIHZhbHVlcyBtdXN0IGJlIHVzZWQuXG4gICAgICAgICAqXG4gICAgICAgICAqIFRoaXMgZnVuY3Rpb24gcGVyZm9ybXMgdGhlIGludmVyc2UgY29udmVyc2lvbiBvZiBsdWEgcGFyYW1zUGFpcnNEZWNvZGUuXG4gICAgICAgICAqXG4gICAgICAgICAqL1xuICAgICAgICBzdGF0aWMgcGFyYW1zUGFpcnNFbmNvZGUocGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICAgICAgICAgIHZhciByZXMgPSB7fTtcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGsgaW4gcGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNbXCJrZXlfXCIgKyBpXSA9IGs7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNbXCJ2YWxfXCIgKyBpXSA9IHBhcmFtc1trXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBpICsgMTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGhvc3RrZXkyaG9zdEluZm8oaG9zdF9rZXkpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5mbztcblxuICAgICAgICAgICAgICAgIGhvc3Rfa2V5ID0gaG9zdF9rZXkucmVwbGFjZSgvX19fXy9nLCBcIjpcIik7XG4gICAgICAgICAgICAgICAgaG9zdF9rZXkgPSBob3N0X2tleS5yZXBsYWNlKC9fX18vZywgXCIvXCIpO1xuICAgICAgICAgICAgICAgIGhvc3Rfa2V5ID0gaG9zdF9rZXkucmVwbGFjZSgvX18vZywgXCIuXCIpO1xuXG4gICAgICAgICAgICAgICAgaW5mbyA9IGhvc3Rfa2V5LnNwbGl0KFwiQFwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGluZm8pO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGhhbmRsZV90YWJfc3RhdGUobmF2X29iamVjdCwgZGVmYXVsdF90YWIpIHtcbiAgICAgICAgICAgICAgICAkKCdhJywgbmF2X29iamVjdCkuY2xpY2soZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vIHN0b3JlIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgdGFiIGluIHRoZSBoYXNoIHZhbHVlXG4gICAgICAgICAgICAgICAgJChcIiA+IGxpID4gYVwiLCBuYXZfb2JqZWN0KS5vbihcInNob3duLmJzLnRhYlwiLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlkID0gJChlLnRhcmdldCkuYXR0cihcImhyZWZcIikuc3Vic3RyKDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhpc3RvcnkucmVwbGFjZVN0YXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgd2lsbCBwcmV2ZW50IHRoZSAnanVtcCcgdG8gdGhlIGhhc2hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlzdG9yeS5yZXBsYWNlU3RhdGUobnVsbCwgbnVsbCwgXCIjXCIgKyBpZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmYWxsYmFja1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IGlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy8gb24gbG9hZCBvZiB0aGUgcGFnZTogc3dpdGNoIHRvIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgdGFiXG4gICAgICAgICAgICAgICAgdmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24uaGFzaDtcbiAgICAgICAgICAgICAgICBpZiAoIWhhc2gpIGhhc2ggPSBcIiNcIiArIGRlZmF1bHRfdGFiO1xuICAgICAgICAgICAgICAgICQoJ2FbaHJlZj1cIicgKyBoYXNoICsgJ1wiXScsIG5hdl9vYmplY3QpLnRhYignc2hvdycpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIF9hZGRfZmluZF9ob3N0X2xpbmsoZm9ybSwgbmFtZSwgZGF0YSkge1xuICAgICAgICAgICAgICAgICQoJzxpbnB1dD4nKS5hdHRyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdoaWRkZW4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IG5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGRhdGEsXG4gICAgICAgICAgICAgICAgfSkuYXBwZW5kVG8oZm9ybSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKiBVc2VkIHdoaWxlIHNlYXJjaGluZyBob3N0cyBhIGFuZCBtYWNzIHdpdGggdHlwZWFoZWFkICovXG4gICAgICAgIHN0YXRpYyBtYWtlRmluZEhvc3RCZWZvcmVTdWJtaXRDYWxsYmFjayhodHRwX3ByZWZpeCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoZm9ybSwgZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuY29udGV4dCAmJiBkYXRhLmNvbnRleHQgPT0gXCJoaXN0b3JpY2FsXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybS5hdHRyKFwiYWN0aW9uXCIsIGh0dHBfcHJlZml4ICsgXCIvbHVhL3Byby9kYl9zZWFyY2gubHVhXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS50eXBlID09IFwiaXBcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE50b3BVdGlscy5fYWRkX2ZpbmRfaG9zdF9saW5rKGZvcm0sIFwiaXBcIiwgZGF0YS5pcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YS50eXBlID09IFwibWFjXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOdG9wVXRpbHMuX2FkZF9maW5kX2hvc3RfbGluayhmb3JtLCBcIm1hY1wiLCBkYXRhLm1hYyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YS50eXBlID09IFwiY29tbXVuaXR5X2lkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOdG9wVXRpbHMuX2FkZF9maW5kX2hvc3RfbGluayhmb3JtLCBcImNvbW11bml0eV9pZFwiLCBkYXRhLmNvbW11bml0eV9pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YS50eXBlID09IFwiamEzX2NsaWVudFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTnRvcFV0aWxzLl9hZGRfZmluZF9ob3N0X2xpbmsoZm9ybSwgXCJqYTNfY2xpZW50XCIsIGRhdGEuamEzX2NsaWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YS50eXBlID09IFwiamEzX3NlcnZlclwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTnRvcFV0aWxzLl9hZGRfZmluZF9ob3N0X2xpbmsoZm9ybSwgXCJqYTNfc2VydmVyXCIsIGRhdGEuamEzX3NlcnZlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSAvKiBcImhvc3RuYW1lXCIgKi8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE50b3BVdGlscy5fYWRkX2ZpbmRfaG9zdF9saW5rKGZvcm0sIFwibmFtZVwiLCBkYXRhLmhvc3RuYW1lID8gZGF0YS5ob3N0bmFtZSA6IGRhdGEubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLnR5cGUgPT0gXCJtYWNcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm0uYXR0cihcImFjdGlvblwiLCBodHRwX3ByZWZpeCArIFwiL2x1YS9tYWNfZGV0YWlscy5sdWFcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YS50eXBlID09IFwibmV0d29ya1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybS5hdHRyKFwiYWN0aW9uXCIsIGh0dHBfcHJlZml4ICsgXCIvbHVhL2hvc3RzX3N0YXRzLmx1YVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOdG9wVXRpbHMuX2FkZF9maW5kX2hvc3RfbGluayhmb3JtLCBcIm5ldHdvcmtcIiwgZGF0YS5uZXR3b3JrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhLnR5cGUgPT0gXCJzbm1wXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtLmF0dHIoXCJhY3Rpb25cIiwgaHR0cF9wcmVmaXggKyBcIi9sdWEvcHJvL2VudGVycHJpc2Uvc25tcF9pbnRlcmZhY2VfZGV0YWlscy5sdWFcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTnRvcFV0aWxzLl9hZGRfZmluZF9ob3N0X2xpbmsoZm9ybSwgXCJzbm1wX3BvcnRfaWR4XCIsIGRhdGEuc25tcF9wb3J0X2lkeCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YS50eXBlID09IFwic25tcF9kZXZpY2VcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm0uYXR0cihcImFjdGlvblwiLCBodHRwX3ByZWZpeCArIFwiL2x1YS9wcm8vZW50ZXJwcmlzZS9zbm1wX2RldmljZV9kZXRhaWxzLmx1YVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhLnR5cGUgPT0gXCJhc25cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm0uYXR0cihcImFjdGlvblwiLCBodHRwX3ByZWZpeCArIFwiL2x1YS9ob3N0c19zdGF0cy5sdWFcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTnRvcFV0aWxzLl9hZGRfZmluZF9ob3N0X2xpbmsoZm9ybSwgXCJhc25cIiwgZGF0YS5hc24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm0uYXR0cihcImFjdGlvblwiLCBodHRwX3ByZWZpeCArIFwiL2x1YS9ob3N0X2RldGFpbHMubHVhXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE50b3BVdGlscy5fYWRkX2ZpbmRfaG9zdF9saW5rKGZvcm0sIFwibW9kZVwiLCBcInJlc3RvcmVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIHRzdGFtcFRvRGF0ZVN0cmluZyhodG1sX3RhZywgZm9ybWF0LCB0ZGlmZikge1xuICAgICAgICAgICAgICAgIHRkaWZmID0gdGRpZmYgfHwgMDtcbiAgICAgICAgICAgICAgICB2YXIgdGltZXN0YW1wID0gcGFyc2VJbnQoaHRtbF90YWcuaHRtbCgpKSArIHRkaWZmO1xuICAgICAgICAgICAgICAgIHZhciBsb2NhbGl6ZWQgPSBkMy50aW1lLmZvcm1hdChmb3JtYXQpKG5ldyBEYXRlKHRpbWVzdGFtcCAqIDEwMDApKTtcbiAgICAgICAgICAgICAgICBodG1sX3RhZy5odG1sKGxvY2FsaXplZCkucmVtb3ZlQ2xhc3MoXCJoaWRkZW5cIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvY2FsaXplZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBub0h0bWwocykge1xuICAgICAgICAgICAgICAgIHJldHVybiBzLnJlcGxhY2UoLzxbXj5dKz4vZywgJycpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGNsZWFuQ3VzdG9tSG9zdFVybChob3N0KSB7XG4gICAgICAgICAgICAgICAgLyogUmVtb3ZlIHN0YXJ0aW5nIGh0dHAocykuICovXG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvc3RcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9eaHR0cDpcXC9cXC8vZ2ksICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL15odHRwczpcXC9cXC8vZ2ksICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLyogUmVtb3ZlIHN0YXJ0aW5nIHd3dy4gKi9cbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9ed3d3XFwuL2dpLCAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIFJlbW92ZSBub24tYWxsb3dlZCBjaGFyYWN0ZXJzICovXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvW14wLTlhLXpBLVpcXC46XFwvXy1dL2dpLCAnJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvKiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8yMDkwNTUxL3BhcnNlLXF1ZXJ5LXN0cmluZy1pbi1qYXZhc2NyaXB0ICovXG4gICAgICAgIHN0YXRpYyBwYXJzZVF1ZXJ5KHF1ZXJ5U3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgdmFyIHF1ZXJ5ID0ge307XG4gICAgICAgICAgICAgICAgdmFyIHBhaXJzID0gKHF1ZXJ5U3RyaW5nWzBdID09PSAnPycgPyBxdWVyeVN0cmluZy5zdWJzdHIoMSkgOiBxdWVyeVN0cmluZykuc3BsaXQoJyYnKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhaXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFpciA9IHBhaXJzW2ldLnNwbGl0KCc9Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeVtkZWNvZGVVUklDb21wb25lbnQocGFpclswXSldID0gZGVjb2RlVVJJQ29tcG9uZW50KHBhaXJbMV0gfHwgJycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcXVlcnk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgZ2V0SGlzdG9yeVBhcmFtZXRlcnMocGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgdmFyIGN1cl9wYXJhbXMgPSBOdG9wVXRpbHMucGFyc2VRdWVyeSh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcbiAgICAgICAgICAgICAgICB2YXIgbmV3X3BhcmFtcyA9ICQuZXh0ZW5kKGN1cl9wYXJhbXMsIHBhcmFtcyk7XG4gICAgICAgICAgICAgICAgdmFyIG5ld19xdWVyeSA9IFwiP1wiICsgJC5wYXJhbShuZXdfcGFyYW1zLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB2YXIgYmFzZVVybCA9IFtsb2NhdGlvbi5wcm90b2NvbCwgJy8vJywgbG9jYXRpb24uaG9zdCwgbG9jYXRpb24ucGF0aG5hbWVdLmpvaW4oJycpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJhc2VVcmwgKyBuZXdfcXVlcnk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyByZXR1cm4gdHJ1ZSBpZiB0aGUgc3RhdHVzIGNvZGUgaXMgZGlmZmVyZW50IGZyb20gMjAwXG4gICAgICAgIHN0YXRpYyBjaGVja19zdGF0dXNfY29kZShzdGF0dXNfY29kZSwgc3RhdHVzX3RleHQsICRlcnJvcl9sYWJlbCkge1xuXG4gICAgICAgICAgICAgICAgY29uc3QgaXNfZGlmZmVyZW50ID0gc3RhdHVzX2NvZGUgIT0gMjAwO1xuXG4gICAgICAgICAgICAgICAgaWYgKGlzX2RpZmZlcmVudCAmJiAkZXJyb3JfbGFiZWwgIT0gbnVsbCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbWVzc2FnZSA9IGkxOG5fZXh0LnJlcXVlc3RfZmFpbGVkX21lc3NhZ2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdHVzX2NvZGUgJiYgc3RhdHVzX3RleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSArPSBgOiAke3N0YXR1c19jb2RlfSAtICR7c3RhdHVzX3RleHR9YDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgJGVycm9yX2xhYmVsLnRleHQobWVzc2FnZSkuc2hvdygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpc19kaWZmZXJlbnQgJiYgJGVycm9yX2xhYmVsID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KGAke2kxOG5fZXh0LnJlcXVlc3RfZmFpbGVkX21lc3NhZ2V9OiAke3N0YXR1c19jb2RlfSAtICR7c3RhdHVzX3RleHR9YCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzX2RpZmZlcmVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRvIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBodHRwZG9jcy90ZW1wbGF0ZXMvY29uZmlnX2xpc3RfY29tcG9uZW50cy9pbXBvcnRfbW9kYWwuaHRtbFxuICAgICAgICBzdGF0aWMgaW1wb3J0TW9kYWxIZWxwZXIocGFyYW1zKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXBhcmFtcy5sb2FkQ29uZmlnWEhSKSB7IHRocm93IChcImltcG9ydE1vZGFsSGVscGVyOjogTWlzc2luZyAnbG9hZENvbmZpZ1hIUicgcGFyYW1cIik7IH1cblxuICAgICAgICAgICAgICAgICQoYGlucHV0I2ltcG9ydC1pbnB1dGApLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKGAjYnRuLWNvbmZpcm0taW1wb3J0YCkucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgJChgI2ltcG9ydC1tb2RhbGApLm9uKCdoaWRkZW4uYnMubW9kYWwnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKGAjaW1wb3J0LWlucHV0YCkudmFsKCcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoXCIjaW1wb3J0LWVycm9yXCIpLmhpZGUoKS5yZW1vdmVDbGFzcygndGV4dC13YXJuaW5nJykuYWRkQ2xhc3MoJ2ludmFsaWQtZmVlZGJhY2snKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoYCNidG4tY29uZmlybS1pbXBvcnRgKS5hdHRyKFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlZFwiKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICQoXCIjaW1wb3J0LW1vZGFsXCIpLm9uKFwic3VibWl0XCIsIFwiZm9ybVwiLCBmdW5jdGlvbiAoZSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0ICRidXR0b24gPSAkKCcjYnRuLWNvbmZpcm0taW1wb3J0Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkYnV0dG9uLmF0dHIoXCJkaXNhYmxlZFwiLCBcIlwiKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVhZCBjb25maWd1cmF0aW9uIGZpbGVcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbGUgPSAkKCcjaW1wb3J0LWlucHV0JylbMF0uZmlsZXNbMF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZmlsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKFwiI2ltcG9ydC1lcnJvclwiKS50ZXh0KGAke2kxOG5fZXh0Lm5vX2ZpbGV9YCkuc2hvdygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYnV0dG9uLnJlbW92ZUF0dHIoXCJkaXNhYmxlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnJlYWRBc1RleHQoZmlsZSwgXCJVVEYtOFwiKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2xpZW50LXNpZGUgY29uZmlndXJhdGlvbiBmaWxlIGZvcm1hdCBjaGVja1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQganNvbkNvbmZpZ3VyYXRpb24gPSBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7IGpzb25Db25maWd1cmF0aW9uID0gSlNPTi5wYXJzZShyZWFkZXIucmVzdWx0KTsgfSBjYXRjaCAoZSkgeyB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFqc29uQ29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoXCIjaW1wb3J0LWVycm9yXCIpLnRleHQoaTE4bl9leHQucmVzdF9jb25zdHNbcmVzcG9uc2VKU09OLnJjX3N0cl0gfHwgJ05vdCBJbXBsZW1lbnRlZCBZZXQnKS5zaG93KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGJ1dHRvbi5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3VibWl0IGNvbmZpZ3VyYXRpb24gZmlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXMubG9hZENvbmZpZ1hIUihyZWFkZXIucmVzdWx0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5kb25lKChyZXNwb25zZSwgc3RhdHVzLCB4aHIpID0+IHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnJjIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKFwiI2ltcG9ydC1lcnJvclwiKS50ZXh0KHJlc3BvbnNlLnJjX3N0cikuc2hvdygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBvcGVyYXRpb24gd2FzIHN1Y2Nlc3NmdWwgY2FsbCB0aGUgc3VjY2Vzc0NhbGxiYWNrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyYW1zLnN1Y2Nlc3NDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXMuc3VjY2Vzc0NhbGxiYWNrKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qga2V5ID0gJChgaW5wdXRbbmFtZT0nY29uZmlndXJhdGlvbiddOmNoZWNrZWRgKS52YWwoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYm9keSA9IChrZXkgPT0gJ2FsbCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gaTE4bihcIm1hbmFnZV9jb25maWd1cmF0aW9ucy5tZXNzYWdlcy5pbXBvcnRfYWxsX3N1Y2Nlc3NcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBpMThuKFwibWFuYWdlX2NvbmZpZ3VyYXRpb25zLm1lc3NhZ2VzLmltcG9ydF9zdWNjZXNzXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzaG93IGEgc3VjY2VzcyBhbGVydCBtZXNzYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUb2FzdFV0aWxzLnNob3dUb2FzdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAnaW1wb3J0LWNvbmZpZ3VyYXRpb24tYWxlcnQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXZlbDogJ3N1Y2Nlc3MnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogaTE4bihcInN1Y2Nlc3NcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZHk6IGJvZHksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGF5OiAyMDAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJChcIiNpbXBvcnQtbW9kYWxcIikubW9kYWwoJ2hpZGUnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZhaWwoKHsgcmVzcG9uc2VKU09OIH0pID0+IHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgUEFSVElBTF9JTVBPUlRfUkMgPSAtMjg7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbXMuZmFpbHVyZUNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtcy5mYWlsdXJlQ2FsbGJhY2socmVzcG9uc2VKU09OKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlSlNPTiAmJiByZXNwb25zZUpTT04ucmMgPiAwKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2VKU09OLnJjID09IFBBUlRJQUxfSU1QT1JUX1JDKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKGAjaW1wb3J0LWVycm9yYCkucmVtb3ZlQ2xhc3MoJ2ludmFsaWQtZmVlZGJhY2snKS5hZGRDbGFzcygndGV4dC13YXJuaW5nJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoXCIjaW1wb3J0LWVycm9yXCIpLnRleHQoaTE4bl9leHQucmVzdF9jb25zdHNbcmVzcG9uc2VKU09OLnJjX3N0cl0gfHwgaTE4bl9leHQuRkFJTEVEX0hUVFBfUkVRVUVTVCkuc2hvdygpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWx3YXlzKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRidXR0b24ucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBzZXJpYWxpemVGb3JtQXJyYXkoc2VyaWFsaXplZEFycmF5KSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VyaWFsaXplZCA9IHt9O1xuICAgICAgICAgICAgICAgIHNlcmlhbGl6ZWRBcnJheS5mb3JFYWNoKChvYmopID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qIGlmIHRoZSBvYmplY3QgaXMgYW4gYXJyYXkgICovXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob2JqLm5hbWUuaW5jbHVkZXMoJ1tdJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2xlYW4gdGhlIHN0cmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9iai52YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai52YWx1ZSA9IG9iai52YWx1ZS50cmltKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VyaWFsaXplZFtvYmoubmFtZV0gPSBvYmoudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgY2xlYW5Gb3JtKGZvcm1TZWxlY3Rvcikge1xuICAgICAgICAgICAgICAgIC8qIHJlbW92ZSB2YWxpZGF0aW9uIGZpZWxkcyBhbmQgdHJhY2tzICovXG4gICAgICAgICAgICAgICAgJChmb3JtU2VsZWN0b3IpLmZpbmQoJ2lucHV0LHNlbGVjdCx0ZXh0YXJlYScpLmVhY2goZnVuY3Rpb24gKGksIGlucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKGBpcy12YWxpZGApLnJlbW92ZUNsYXNzKGBpcy1pbnZhbGlkYCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgLyogcmVzZXQgYWxsIHRoZSB2YWx1ZXMgKi9cbiAgICAgICAgICAgICAgICAkKGZvcm1TZWxlY3RvcilbMF0ucmVzZXQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNYWtlIGEgZmV0Y2ggY2FsbCB3aXRoIGEgdGltZW91dCBvcHRpb25cbiAgICAgICAgICovXG4gICAgICAgIHN0YXRpYyBmZXRjaFdpdGhUaW1lb3V0KHVyaSwgb3B0aW9ucyA9IHt9LCB0aW1lID0gNTAwMCkge1xuXG4gICAgICAgICAgICAgICAgY29uc3QgY29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKVxuICAgICAgICAgICAgICAgIGNvbnN0IGNvbmZpZyA9IHsgLi4ub3B0aW9ucywgc2lnbmFsOiBjb250cm9sbGVyLnNpZ25hbCB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZmV0Y2godXJpLCBjb25maWcpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtyZXNwb25zZS5zdGF0dXN9OiAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvci5uYW1lID09PSAnQWJvcnRFcnJvcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Jlc3BvbnNlIHRpbWVkIG91dCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgc2V0UHJlZihhY3Rpb24sIGNzcmYsIHN1Y2Nlc3MsIGZhaWx1cmUpIHtcblxuICAgICAgICAgICAgICAgIGlmIChhY3Rpb24gPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJBbiBhY3Rpb24ga2V5IG11c3QgYmUgZGVmaW5lZCB0byBzZXQgYSBwcmVmZXJlbmNlIVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBlbXB0eSA9ICgpID0+IHsgfTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXF1ZXN0ID0gJC5wb3N0KGAke2h0dHBfcHJlZml4fS9sdWEvdXBkYXRlX3ByZWZzLmx1YWAsIHsgYWN0aW9uOiBhY3Rpb24sIGNzcmY6IGNzcmYgfSk7XG4gICAgICAgICAgICAgICAgcmVxdWVzdC5kb25lKHN1Y2Nlc3MgfHwgZW1wdHkpO1xuICAgICAgICAgICAgICAgIHJlcXVlc3QuZmFpbChmYWlsdXJlIHx8IGVtcHR5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHbHVlIHN0cmluZ3MgY29udGFpbmVkIGluIGFycmF5IHNlcGFyYXRlZCBieSBhIGNvbW1hLlxuICAgICAgICAgKiBAcGFyYW0ge2FycmF5fSBhcnJheSBUaGUgYXJyYXkgb2Ygc3RyaW5ncy4gSS5lLiBbXCJIZWxsb1wiLCBcIldvcmxkXCJdXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsaW1pdCBIb3cgbWFueSB3b3JkcyB0aGUgc3RyaW5nIGNvbnRhaW5zXG4gICAgICAgICAqXG4gICAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gQSBzdHJpbmcgYnVpbHQgYnkgYXJyYXkncyBlbGVtZW50cy4gaS5lOiBcIkhlbGxvLCBXb3JsZFwiXG4gICAgICAgICAqL1xuICAgICAgICBzdGF0aWMgYXJyYXlUb0xpc3RTdHJpbmcoYXJyYXksIGxpbWl0KSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoYXJyYXkgPT0gdW5kZWZpbmVkKSByZXR1cm4gXCJcIjtcblxuICAgICAgICAgICAgICAgIGlmIChhcnJheS5sZW5ndGggPiBsaW1pdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFycmF5LnNsaWNlKDAsIGxpbWl0KS5qb2luKFwiLCBcIikgKyBgICR7aTE4bl9leHQuYW5kX3hfbW9yZS5yZXBsYWNlKCckbnVtJywgYXJyYXkubGVuZ3RoIC0gbGltaXQpfWA7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFycmF5LnNsaWNlKDAsIGxpbWl0KS5qb2luKFwiLCBcIik7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgYnVpbGRVUkwobG9jYXRpb24sIHBhcmFtcyA9IHt9LCBoYXNSZWZlcmVyID0gZmFsc2UsIHJlZmVyZXJQYXJhbXMgPSB7fSkge1xuXG4gICAgICAgICAgICAgICAgY29uc3QgdXJsID0gbmV3IFVSTChsb2NhdGlvbiwgd2luZG93LmxvY2F0aW9uKTtcblxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW25hbWUsIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhwYXJhbXMpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSB8fCB2YWx1ZSA9PT0gMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsLnNlYXJjaFBhcmFtcy5zZXQobmFtZSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaGFzUmVmZXJlcikge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZWZVcmwgPSBuZXcgVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW25hbWUsIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhyZWZlcmVyUGFyYW1zKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXZhbHVlKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmVXJsLnNlYXJjaFBhcmFtcy5zZXQobmFtZSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmwuc2VhcmNoUGFyYW1zLnNldCgncmVmZXJlcicsIHJlZlVybC50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdXJsLnRvU3RyaW5nKCk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgZ2V0RWRpdFBvb2xMaW5rKGhyZWYsIHBvb2xJZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHVybCA9IG5ldyBVUkwoaHJlZiwgd2luZG93LmxvY2F0aW9uKTtcbiAgICAgICAgICAgICAgICB1cmwuc2VhcmNoUGFyYW1zLnNldCgncG9vbF9pZCcsIHBvb2xJZCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVybC50b1N0cmluZygpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGdldFBvb2xMaW5rKHBvb2xUeXBlLCBwb29sSWQgPSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvJHtwb29sVHlwZX0vcG9vbHMubHVhP3Bvb2w9JHtwb29sSWR9YDtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBhc3luYyBnZXRQb29sKHBvb2xUeXBlLCBpZCA9IDApIHtcblxuICAgICAgICAgICAgICAgIGlmIChwb29sVHlwZSA9PT0gbnVsbCkgdGhyb3cgJ0EgcG9vbCB0eXBlIG11c3QgYmUgZGVmaW5lZCEnO1xuXG4gICAgICAgICAgICAgICAgdHJ5IHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVxdWVzdCA9IGF3YWl0IGZldGNoKE50b3BVdGlscy5nZXRQb29sTGluayhwb29sVHlwZSwgaWQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBvb2wgPSBhd2FpdCByZXF1ZXN0Lmpzb24oKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvb2wucmMgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbZmFsc2UsIHt9XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt0cnVlLCBwb29sLnJzcFswXV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbZmFsc2UsIHt9XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogU2F2ZSB0aGUgc2NhbGUgb2YgZWxlbWVudCBpbnNpZGUgdGhlIGxvY2FsIHN0b3JhZ2VcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9ICRlbGVtZW50IFxuICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gc2NhbGVcbiAgICAgICAgICovXG4gICAgICAgIHN0YXRpYyBzYXZlRWxlbWVudFNjYWxlKCRlbGVtZW50LCBzY2FsZSA9IHt3aWR0aDogMCwgaGVpZ2h0OiAwfSkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IE50b3BVdGlscy5nZW5lcmF0ZVNjYWxlRWxlbWVudEtleSgkZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBKU09OLnN0cmluZ2lmeShzY2FsZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGdlbmVyYXRlU2NhbGVFbGVtZW50S2V5KCRlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgbGV0IGlkZW50aWZpY2F0b3I7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFnZSA9IGxvY2F0aW9uLnBhdGhuYW1lO1xuICAgICAgICAgICAgICAgIGNvbnN0IGVsZW1lbnRJZCA9ICRlbGVtZW50LmF0dHIoJ2lkJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudElkICE9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZGVudGlmaWNhdG9yID0gZWxlbWVudElkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNsYXNzTmFtZSA9ICRlbGVtZW50LmF0dHIoJ2NsYXNzJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZGVudGlmaWNhdG9yID0gY2xhc3NOYW1lO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGAke2lkZW50aWZpY2F0b3J9LSR7cGFnZX0tc2NhbGVgO1xuICAgICAgICAgICAgICAgIHJldHVybiBrZXk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogTG9hZCB0aGUgb2xkIHNjYWxlIHZhbHVlIG9meCBlbGVtZW50IGZyb20gdGhlIGxvY2FsIHN0b3JhZ2VcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9ICRlbGVtZW50IFxuICAgICAgICAgKi9cbiAgICAgICAgc3RhdGljIGxvYWRFbGVtZW50U2NhbGUoJGVsZW1lbnQpIHtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IE50b3BVdGlscy5nZW5lcmF0ZVNjYWxlRWxlbWVudEtleSgkZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgY29uc3QgY3VycmVudFZhbHVlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KTtcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFZhbHVlID09IG51bGwpIHJldHVybiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShjdXJyZW50VmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGZpbGxGaWVsZElmVmFsaWQoJGZpZWxkLCB2YWx1ZSkge1xuXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRmaWVsZC52YWwoJycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRmaWVsZC52YWwodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGNvcHlUb0NsaXBib2FyZCh0ZXh0LCBpdGVtKSB7XG4gICAgY29uc3QgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZXh0YXJlYScpO1xuICAgIGVsLnZhbHVlID0gdGV4dDtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoJ3JlYWRvbmx5JywgJycpO1xuICAgIGVsLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICBlbC5zdHlsZS5sZWZ0ID0gJy05OTk5cHgnO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZWwpO1xuICAgIGVsLnNlbGVjdCgpO1xuICAgIGRvY3VtZW50LmV4ZWNDb21tYW5kKCdjb3B5Jyk7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChlbCk7XG4gICAgJChpdGVtKS5hdHRyKFwidGl0bGVcIiwgXCJDb3BpZWQhXCIpLnRvb2x0aXAoXCJkaXNwb3NlXCIpLnRvb2x0aXAoKS50b29sdGlwKFwic2hvd1wiKTtcbiAgICAkKGl0ZW0pLnJlbW92ZUF0dHIoXCJkYXRhLWJzLW9yaWdpbmFsLXRpdGxlXCIpXG4gICAgJChpdGVtKS5hdHRyKFwidGl0bGVcIiwgdGV4dClcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBzdHJpcFRhZ3MoaHRtbCkge1xuICAgICAgICAgICAgICAgIGxldCB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgICAgICB0LmlubmVySFRNTCA9IGh0bWw7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHQudGV4dENvbnRlbnQgfHwgdC5pbm5lclRleHQgfHwgXCJcIjtcbiAgICAgICAgfVxuXG4gIHN0YXRpYyBzaG9ydGVuTGFiZWwobGFiZWwsIGxlbiwgbGFzdF9jaGFyKSB7XG4gICAgbGV0IHNob3J0ZW5lZF9sYWJlbCA9IGxhYmVsXG4gICAgaWYobGFiZWwubGVuZ3RoID4gbGVuICsgNSkge1xuICAgICAgaWYobGFzdF9jaGFyKSB7XG4gICAgICAgIGxldCBsYXN0X2luZGV4ID0gbGFiZWwubGFzdEluZGV4T2YobGFzdF9jaGFyKVxuICAgICAgICBjb25zdCByZXF1ZXN0ZWRfbGFiZWwgPSBsYWJlbC5zbGljZShsYXN0X2luZGV4KVxuICAgICAgICBpZihsZW4gPiBsYXN0X2luZGV4KSBcbiAgICAgICAgICBsZW4gPSBsYXN0X2luZGV4XG4gICAgICAgIHNob3J0ZW5lZF9sYWJlbCA9IGxhYmVsLnNsaWNlKDAsIGxlbikgKyBcIi4uLiBcIiArIHJlcXVlc3RlZF9sYWJlbFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2hvcnRlbmVkX2xhYmVsID0gbGFiZWwuc2xpY2UoMCwgbGVuKSArIFwiLi4uXCI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNob3J0ZW5lZF9sYWJlbFxuICB9XG4gICAgICAgIFxuICBzdGF0aWMgc29ydEFscGhhYmV0aWNhbGx5KGEsIGIpIHtcbiAgICBjb25zdCBuYW1lQSA9IGEubGFiZWw/LnRvVXBwZXJDYXNlKCk7IC8vIGlnbm9yZSB1cHBlciBhbmQgbG93ZXJjYXNlXG4gICAgY29uc3QgbmFtZUIgPSBiLmxhYmVsPy50b1VwcGVyQ2FzZSgpOyAvLyBpZ25vcmUgdXBwZXIgYW5kIGxvd2VyY2FzZVxuICAgIGlmIChuYW1lQSA8IG5hbWVCKSB7IHJldHVybiAtMTsgfVxuICAgIGlmIChuYW1lQSA+IG5hbWVCKSB7IHJldHVybiAxOyB9XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICAvKiBUaGlzIGZ1bmN0aW9uLCBnaXZlbiBhIG5hbWUgYW5kIGEgdmFsdWUsIHJldHVybiBhIHN0cmluZ1xuICAgKiBmb3JtYXR0ZWQgaW4gdGhlIGZvbGxvd2luZyB3YXk6XG4gICAqIG5hbWUgW3ZhbHVlXVxuICAgICAgICAqIElmIG1heF9uYW1lX2xlbiBpcyBkaWZmZXJlbnQgZnJvbSAwLCB0aGVuIGl0J3MgZ29pbmcgdG8gY3V0IHRoZSBuYW1lIHN0cmluZ1xuICAgICAgICAqIHRvIG1heF9uYW1lX2xlblxuICAgKi9cbiAgc3RhdGljIGZvcm1hdE5hbWVWYWx1ZShuYW1lLCB2YWx1ZSwgbWF4X25hbWVfbGVuKSB7XG4gICAgICAgICAgICAgICAgbGV0IGxhYmVsID0gbmFtZTtcbiAgICAgICAgICAgICAgICBpZihuYW1lICE9IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihtYXhfbmFtZV9sZW4gJiYgdHlwZW9mKG1heF9uYW1lX2xlbikgPT0gJ251bWJlcicpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsID0gdGhpcy5zaG9ydGVuTGFiZWwobGFiZWwsIG1heF9uYW1lX2xlbiwgJy4nKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwgPSBgJHtsYWJlbH0gWyR7dmFsdWV9XWAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBsYWJlbFxuICB9XG5cbiAgLyogVGhpcyBmdW5jdGlvbiwgcmVtb3ZlIGZyb20gYSBzdHJpbmcgdGhlIFZMQU4gMFxuICAgKiBuYW1lQDAgLT4gbmFtZVxuICAgKi9cbiAgc3RhdGljIHJlbW92ZVZsYW4obmFtZSkge1xuICAgICAgICAgICAgICAgIGxldCBsYWJlbCA9IG5hbWVcbiAgICAgICAgICAgICAgICBjb25zdCB2bGFuX2luZGV4ID0gbGFiZWwubGFzdEluZGV4T2YoJ0AnKTtcbiAgICAgICAgICAgICAgICBpZih2bGFuX2luZGV4ICE9IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2bGFuID0gIGxhYmVsLnNsaWNlKHZsYW5faW5kZXggKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHZsYW4gPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbCA9IGxhYmVsLnNsaWNlKDAsIHZsYW5faW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBsYWJlbFxuICB9XG5cbiAgLyogRm9ybWF0IGFuIG9iamVjdCB3aXRoIGxhYmVsIGFuZCB2YWx1ZSBmcm9tIGEgY29sdW1uIHJvdyAqL1xuICBzdGF0aWMgZm9ybWF0R2VuZXJpY09iaihvYmosIHJvdykge1xuICAgIGxldCBsYWJlbCA9IG9iai5sYWJlbCA/IG9iai5sYWJlbCA6IG9iai52YWx1ZTtcbiAgICBsZXQga2V5ID0gb2JqLnZhbHVlO1xuICAgIHJldHVybiBsYWJlbDtcbiAgfVxuXG4gIC8qIEZvcm1hdCBhIGNvdW50cnkgZnJvbSBhIGNvbHVtbiBvYmplY3QgKi9cbiAgc3RhdGljIGZvcm1hdENvdW50cnkob2JqLCByb3cpIHtcbiAgICBsZXQgY291bnRyeV9jb2RlID0gb2JqLnZhbHVlO1xuICAgIGxldCBsYWJlbCA9IG9iai5sYWJlbCA/IG9iai5sYWJlbCA6IG9iai52YWx1ZTtcbiAgICByZXR1cm4gYCR7bGFiZWx9IDxpbWcgc3JjPVwiL2Rpc3QvaW1hZ2VzL2JsYW5rLmdpZlwiIGNsYXNzPVwiZmxhZyBmbGFnLSR7Y291bnRyeV9jb2RlLnRvTG93ZXJDYXNlKCl9XCI+YDtcbiAgfVxuXG4gIC8qIEZvcm1hdCBhbiBob3N0IGZyb20gYSBjb2x1bW4gb2JqZWN0ICovXG4gIHN0YXRpYyBmb3JtYXRIb3N0KG9iaiwgcm93LCBpc19jbGllbnQpIHtcbiAgICBsZXQgbGFiZWwgPSBcIlwiO1xuXG4gICAgaWYgKCFvYmopIHtcbiAgICAgIHJldHVybiBsYWJlbDtcbiAgICB9XG5cbiAgICAvKiBMaW5rICovXG4gICAgbGV0IGhvc3Rfa2V5ID0gb2JqLmlwO1xuICAgIGlmIChyb3cudmxhbl9pZCAmJiByb3cudmxhbl9pZC52YWx1ZSlcbiAgICAgIGhvc3Rfa2V5ID0gaG9zdF9rZXkgKyAnQCcgKyByb3cudmxhbl9pZC52YWx1ZTtcblxuICAgIC8qIExhYmVsICovXG4gICAgbGFiZWwgPSBvYmoubGFiZWwgPyBvYmoubGFiZWwgOiBvYmoudmFsdWU7XG4gICAgaWYgKHJvdy52bGFuX2lkICYmIHJvdy52bGFuX2lkLmxhYmVsKVxuICAgICAgbGFiZWwgKz0gYEAke3Jvdy52bGFuX2lkLmxhYmVsfWA7XG5cbiAgICBjb25zdCB1cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9ob3N0X2RldGFpbHMubHVhYCwgeyBob3N0OiBob3N0X2tleX0pO1xuICAgIGxhYmVsID0gYDxhIGhyZWY9XCIke3VybH1cIj4ke2xhYmVsfTwvYT5gO1xuXG4gICAgLyogQ291bnRyeSAqL1xuICAgIGxldCBjb3VudHJ5X29iaiA9IGlzX2NsaWVudCA/IHJvdy5jbGlfY291bnRyeSA6IHJvdy5zcnZfY291bnRyeTtcbiAgICBpZiAoIWNvdW50cnlfb2JqICYmIHJvdy5jb3VudHJ5KSBjb3VudHJ5X29iaiA9IHJvdy5jb3VudHJ5O1xuICAgIGlmIChjb3VudHJ5X29iaiAmJiBjb3VudHJ5X29iai52YWx1ZSlcbiAgICAgIGxhYmVsICs9IGAgPGltZyBzcmM9XCIke2h0dHBfcHJlZml4fS9kaXN0L2ltYWdlcy9ibGFuay5naWZcIiBjbGFzcz1cImZsYWcgZmxhZy0ke2NvdW50cnlfb2JqLnZhbHVlLnRvTG93ZXJDYXNlKCl9XCIgdGl0bGU9XCIke2NvdW50cnlfb2JqLnRpdGxlfVwiPjwvYT5gO1xuXG4gICAgcmV0dXJuIGxhYmVsO1xuICB9XG5cbiAgLyogRm9ybWF0IGEgbmV0d29yayBmcm9tIGEgY29sdW1uIG9iamVjdCAqL1xuICBzdGF0aWMgZm9ybWF0TmV0d29yayhvYmosIHJvdykge1xuICAgIGxldCBsYWJlbCA9IFwiXCI7XG5cbiAgICBpZiAoIW9iaikge1xuICAgICAgcmV0dXJuIGxhYmVsO1xuICAgIH1cblxuICAgIC8qIExpbmsgKi9cbiAgICBsZXQgbmV0d29ya19rZXkgPSBvYmoudmFsdWU7XG5cbiAgICAvKiBMYWJlbCAqL1xuICAgIGxhYmVsID0gb2JqLmxhYmVsID8gb2JqLmxhYmVsIDogb2JqLnZhbHVlO1xuICAgIGlmIChyb3cudmxhbl9pZCAmJiByb3cudmxhbl9pZC5sYWJlbClcbiAgICAgIGxhYmVsICs9IGBAJHtyb3cudmxhbl9pZC5sYWJlbH1gO1xuXG4gICAgY29uc3QgdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvaG9zdHNfc3RhdHMubHVhYCwgeyBuZXR3b3JrOiBuZXR3b3JrX2tleX0pO1xuICAgIGxhYmVsID0gYDxhIGhyZWY9XCIke3VybH1cIj4ke2xhYmVsfTwvYT5gO1xuXG4gICAgcmV0dXJuIGxhYmVsO1xuICB9XG5cbiAgLyogVGhpcyBmdW5jdGlvbiBjb252ZXJ0cyBhbiBpcCB0byBhIG51bWJlciBlcXVhbGUgdG8gdGhlIGlwIGJ1dCB3aXRob3V0IC4gb3IgOjogaW4gY2FzZSBvZiBpcHY2XG4gICAqIHRoaXMgaXMgbmVlZGVkIGluIGNhc2Ugb2Ygb3JkZXJpbmdcbiAgICovXG4gIHN0YXRpYyBjb252ZXJ0SVBBZGRyZXNzKGEpIHtcbiAgICAgICAgdmFyIGksIGl0ZW07XG4gICAgICAgIHZhciBtLCBuLCB0O1xuICAgICAgICB2YXIgeCwgeGE7XG5cbiAgICAgICAgaWYgKCFhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cblxuICAgICAgICBhID0gYS5yZXBsYWNlKC88W1xcc1xcU10qPz4vZywgXCJcIik7XG4gICAgICAgIC8vSVB2NDpQb3J0XG4gICAgICAgICAgICAgICAgdCA9IGEuc3BsaXQoXCI6XCIpO1xuICAgICAgICAgICAgICAgIGlmICh0Lmxlbmd0aCA9PSAyKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIG0gPSB0WzBdLnNwbGl0KFwiLlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtID0gYS5zcGxpdChcIi5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICBuID0gYS5zcGxpdChcIjpcIik7XG4gICAgICAgIHggPSBcIlwiO1xuICAgICAgICB4YSA9IFwiXCI7XG5cbiAgICAgICAgaWYgKG0ubGVuZ3RoID09IDQpIHtcbiAgICAgICAgICAgICAgICAvLyBJUFY0XG4gICAgICAgICAgICAgICAgZm9yKGkgPSAwOyBpIDwgbS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGl0ZW0gPSBtW2ldO1xuXG4gICAgICAgICAgICAgICAgaWYoaXRlbS5sZW5ndGggPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgeCArPSBcIjAwXCIgKyBpdGVtO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmKGl0ZW0ubGVuZ3RoID09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHggKz0gXCIwXCIgKyBpdGVtO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHggKz0gaXRlbTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG4ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIC8vIElQVjZcbiAgICAgICAgICAgICAgICB2YXIgY291bnQgPSAwO1xuICAgICAgICAgICAgICAgIGZvcihpID0gMDsgaSA8IG4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpdGVtID0gbltpXTtcblxuICAgICAgICAgICAgICAgIGlmIChpID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgeGEgKz0gXCI6XCI7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYoaXRlbS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50ICs9IDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYoaXRlbS5sZW5ndGggPT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgeGEgKz0gXCIwMDBcIiArIGl0ZW07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb3VudCArPSA0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmKGl0ZW0ubGVuZ3RoID09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHhhICs9IFwiMDBcIiArIGl0ZW07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb3VudCArPSA0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmKGl0ZW0ubGVuZ3RoID09IDMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHhhICs9IFwiMFwiICsgaXRlbTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50ICs9IDQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgeGEgKz0gaXRlbTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50ICs9IDQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFBhZGRpbmcgdGhlIDo6XG4gICAgICAgICAgICAgICAgbiA9IHhhLnNwbGl0KFwiOlwiKTtcbiAgICAgICAgICAgICAgICB2YXIgcGFkZERvbmUgPSAwO1xuXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IG4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpdGVtID0gbltpXTtcblxuICAgICAgICAgICAgICAgIGlmIChpdGVtLmxlbmd0aCA9PT0gMCAmJiBwYWRkRG9uZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgcGFkZGluZyA9IDAgOyBwYWRkaW5nIDwgKDMyLWNvdW50KSA7IHBhZGRpbmcrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgeCArPSBcIjBcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGREb25lID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4ICs9IGl0ZW07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB4O1xuICB9XG5cbiAgLyogRm9ybWF0IGFuIEFTIGZyb20gYSBjb2x1bW4gb2JqZWN0ICovXG4gIHN0YXRpYyBmb3JtYXRBU04ob2JqLCByb3cpIHtcbiAgICBsZXQgbGFiZWwgPSBcIlwiO1xuXG4gICAgaWYgKCFvYmopIHtcbiAgICAgIHJldHVybiBsYWJlbDtcbiAgICB9XG5cbiAgICAvKiBMaW5rICovXG4gICAgbGV0IGFzbl9rZXkgPSBvYmoudmFsdWU7XG5cbiAgICAvKiBMYWJlbCAqL1xuICAgIGxhYmVsID0gb2JqLmxhYmVsID8gb2JqLmxhYmVsIDogb2JqLnZhbHVlO1xuXG4gICAgY29uc3QgdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvaG9zdHNfc3RhdHMubHVhYCwgeyBhc246IGFzbl9rZXl9KTtcbiAgICBsYWJlbCA9IGA8YSBocmVmPVwiJHt1cmx9XCI+JHtsYWJlbH08L2E+YDtcblxuICAgIHJldHVybiBsYWJlbDtcbiAgfVxuXG4gIHN0YXRpYyBjcmVhdGVQcm9ncmVzc0JhcihwZXJjZW50YWdlKSB7XG4gICAgcmV0dXJuIGA8ZGl2IGNsYXNzPVwiZC1mbGV4IGZsZXgtcm93IGFsaWduLWl0ZW1zLWNlbnRlclwiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTkgcHJvZ3Jlc3NcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHJvZ3Jlc3MtYmFyIGJnLXdhcm5pbmdcIiBhcmlhLXZhbHVlbm93PVwiJHtwZXJjZW50YWdlfVwiIGFyaWEtdmFsdWVtaW49XCIwXCIgYXJpYS12YWx1ZW1heD1cIjEwMFwiIHN0eWxlPVwid2lkdGg6ICR7cGVyY2VudGFnZX0lO1wiPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbFwiPiAke3BlcmNlbnRhZ2V9ICU8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PmBcbiAgfVxuXG4gIHN0YXRpYyBjcmVhdGVCcmVha2Rvd24ocGVyY2VudGFnZV8xLCBwZXJjZW50YWdlXzIsIGxhYmVsXzEsIGxhYmVsXzIpIHtcbiAgICByZXR1cm4gYDxkaXYgY2xhc3M9XCJkLWZsZXggZmxleC1yb3dcIj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC0xMiBwcm9ncmVzc1wiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwcm9ncmVzcy1iYXIgYmctd2FybmluZ1wiIGFyaWEtdmFsdWVub3c9XCIke3BlcmNlbnRhZ2VfMX1cIiBhcmlhLXZhbHVlbWluPVwiMFwiIGFyaWEtdmFsdWVtYXg9XCIxMDBcIiBzdHlsZT1cIndpZHRoOiAke3BlcmNlbnRhZ2VfMX0lO1wiPiR7bGFiZWxfMX08L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHJvZ3Jlc3MtYmFyIGJnLXN1Y2Nlc3NcIiBhcmlhLXZhbHVlbm93PVwiJHtwZXJjZW50YWdlXzJ9XCIgYXJpYS12YWx1ZW1pbj1cIjBcIiBhcmlhLXZhbHVlbWF4PVwiMTAwXCIgc3R5bGU9XCJ3aWR0aDogJHtwZXJjZW50YWdlXzJ9JTtcIj4ke2xhYmVsXzJ9PC9kaXY+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+YFxuICB9XG5cbiAgLyogUmV0dXJuIHRoZSBudW1iZXIgb2Ygcm93cyBhdmFpbGFibGUgaW4gYSB0YWJsZSAqL1xuICBzdGF0aWMgZ2V0TnVtVGFibGVSb3dzKCkge1xuICAgIHJldHVybiBbMTAsIDIwLCA1MCwgMTAwXTtcbiAgfVxuXG4gIHN0YXRpYyBmb3JtYXRBcGV4Q2hhcnRMYWJlbEZyb21YYW5kTmFtZSh7c2VyaWVzLCBzZXJpZXNJbmRleCwgZGF0YVBvaW50SW5kZXgsIHd9KSB7XG4gICAgY29uc3Qgc2VyaWUgPSB3LmNvbmZpZy5zZXJpZXNbc2VyaWVzSW5kZXhdW1wiZGF0YVwiXVtkYXRhUG9pbnRJbmRleF07XG4gICAgY29uc3QgbmFtZSA9IHNlcmllW1wibmFtZVwiXVxuICAgIGNvbnN0IHlfdmFsdWUgPSBzZXJpZVtcInlcIl07XG4gICAgY29uc3QgaG9zdF9uYW1lID0gc2VyaWVbXCJtZXRhXCJdW1wibGFiZWxcIl07XG5cbiAgICBjb25zdCB4X2F4aXNfdGl0bGUgPSB3LmNvbmZpZy54YXhpcy50aXRsZS50ZXh0O1xuICAgIGNvbnN0IHlfYXhpc190aXRsZSA9IHcuY29uZmlnLnlheGlzWzBdLnRpdGxlLnRleHQ7XG5cbiAgICByZXR1cm4gKGBcbiAgICA8ZGl2IGNsYXNzPSdhcGV4Y2hhcnRzLXRoZW1lLWxpZ2h0IGFwZXhjaGFydHMtYWN0aXZlJyBpZD0ndGVzdCc+XG4gICAgICAgIDxkaXYgY2xhc3M9J2FwZXhjaGFydHMtdG9vbHRpcC10aXRsZScgc3R5bGU9J2ZvbnQtZmFtaWx5OiBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmOyBmb250LXNpemU6IDEycHg7Jz5cbiAgICAgICAgICAgICR7aG9zdF9uYW1lfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz0nYXBleGNoYXJ0cy10b29sdGlwLXNlcmllcy1ncm91cCBhcGV4Y2hhcnRzLWFjdGl2ZSBkLWJsb2NrJz5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2FwZXhjaGFydHMtdG9vbHRpcC10ZXh0IHRleHQtbGVmdCc+XG4gICAgICAgICAgICAgICAgPGI+JHt4X2F4aXNfdGl0bGV9PC9iPjogJHtuYW1lfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPSdhcGV4Y2hhcnRzLXRvb2x0aXAtdGV4dCB0ZXh0LWxlZnQnPlxuICAgICAgICAgICAgICAgIDxiPiR7eV9heGlzX3RpdGxlfTwvYj46ICR7eV92YWx1ZX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICBgKVxuICB9XG5cbiAgc3RhdGljIGFwZXhDaGFydEp1bXBUb0FsZXJ0cyhldmVudCwgY2hhcnRDb250ZXh0LCBjb25maWcpIHtcbiAgICBjb25zdCB7IHNlcmllc0luZGV4LCBkYXRhUG9pbnRJbmRleCB9ID0gY29uZmlnO1xuICAgIGNvbnN0IHsgc2VyaWVzIH0gPSBjb25maWcuY29uZmlnO1xuICAgIGlmIChzZXJpZXNJbmRleCA9PT0gLTEpIHJldHVybjtcbiAgICBpZiAoc2VyaWVzID09PSB1bmRlZmluZWQpIHJldHVybjtcblxuICAgIGNvbnN0IHNlcmllID0gc2VyaWVzW3Nlcmllc0luZGV4XTtcbiAgICBjb25zdCBiYXNlX3VybCA9IHNlcmllLmJhc2VfdXJsIHx8IHNlcmllc1swXVsnYmFzZV91cmwnXVxuICAgIGNvbnN0IGRlZmF1bHRfdXJsID0gc2VyaWUuc3RhcnRfdXJsIHx8IHNlcmllc1swXVsnc3RhcnRfdXJsJ11cbiAgICBpZiAoYmFzZV91cmwgIT0gbnVsbCAmJiBkZWZhdWx0X3VybCAhPSBudWxsKSB7XG4gICAgICBjb25zdCBzZWFyY2ggPSBzZXJpZS5kYXRhW2RhdGFQb2ludEluZGV4XS5tZXRhLnVybF9xdWVyeTtcbiAgICAgIGxvY2F0aW9uLmhyZWYgPSBgJHtiYXNlX3VybH0/JHtkZWZhdWx0X3VybH0ke3NlYXJjaH1gO1xuICAgIH1cbiAgfVxuXG5cbiAgc3RhdGljIGFwZXhDaGFydEp1bXBUb0hvc3REZXRhaWxzKGV2ZW50LCBjaGFydENvbnRleHQsIGNvbmZpZykge1xuICAgIGNvbnN0IHsgc2VyaWVzSW5kZXgsIGRhdGFQb2ludEluZGV4IH0gPSBjb25maWc7XG4gICAgY29uc3QgeyBzZXJpZXMgfSA9IGNvbmZpZy5jb25maWc7XG4gICAgaWYgKHNlcmllc0luZGV4ID09PSAtMSkgcmV0dXJuO1xuICAgIGlmIChzZXJpZXMgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuXG4gICAgY29uc3Qgc2VyaWUgPSBzZXJpZXNbc2VyaWVzSW5kZXhdO1xuXG4gICAgY29uc3QgYmFzZV91cmwgPSBzZXJpZS5iYXNlX3VybCB8fCBzZXJpZXNbMF1bJ2Jhc2VfdXJsJ11cbiAgICBcbiAgICBpZiAoYmFzZV91cmwgIT0gbnVsbCApIHtcbiAgICAgIGNvbnN0IHVybCA9IGAke2Jhc2VfdXJsfT8ke3NlcmllLmRhdGFbZGF0YVBvaW50SW5kZXhdLm1ldGEudXJsX3F1ZXJ5fWA7XG4gICAgICBudG9wbmdfdXJsX21hbmFnZXIuZ29fdG9fdXJsKHVybCk7XG4gICAgfVxuICB9XG5cbiAgXG4gIHN0YXRpYyBmb3JtYXRBcGV4Q2hhcnRMYWJlbEZyb21YYW5kWSh7c2VyaWVzLCBzZXJpZXNJbmRleCwgZGF0YVBvaW50SW5kZXgsIHd9KSB7XG4gICAgY29uc3Qgc2VyaWUgPSB3LmNvbmZpZy5zZXJpZXNbc2VyaWVzSW5kZXhdW1wiZGF0YVwiXVtkYXRhUG9pbnRJbmRleF07XG4gICAgXG4gICAgY29uc3QgeF92YWx1ZSA9IHNlcmllW1wieFwiXTtcbiAgICBjb25zdCB5X3ZhbHVlID0gc2VyaWVbXCJ5XCJdO1xuICAgIGNvbnN0IGhvc3RfbmFtZSA9IHNlcmllW1wibWV0YVwiXVtcImxhYmVsXCJdO1xuXG4gICAgY29uc3QgeF9heGlzX3RpdGxlID0gdy5jb25maWcueGF4aXMudGl0bGUudGV4dDtcbiAgICBjb25zdCB5X2F4aXNfdGl0bGUgPSB3LmNvbmZpZy55YXhpc1swXS50aXRsZS50ZXh0O1xuXG4gICAgcmV0dXJuIChgXG4gICAgICA8ZGl2IGNsYXNzPSdhcGV4Y2hhcnRzLXRoZW1lLWxpZ2h0IGFwZXhjaGFydHMtYWN0aXZlJyBpZD0ndGVzdCc+XG4gICAgICAgICAgPGRpdiBjbGFzcz0nYXBleGNoYXJ0cy10b29sdGlwLXRpdGxlJyBzdHlsZT0nZm9udC1mYW1pbHk6IEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7IGZvbnQtc2l6ZTogMTJweDsnPlxuICAgICAgICAgICAgICAke2hvc3RfbmFtZX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPSdhcGV4Y2hhcnRzLXRvb2x0aXAtc2VyaWVzLWdyb3VwIGFwZXhjaGFydHMtYWN0aXZlIGQtYmxvY2snPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdhcGV4Y2hhcnRzLXRvb2x0aXAtdGV4dCB0ZXh0LWxlZnQnPlxuICAgICAgICAgICAgICAgICAgPGI+JHt4X2F4aXNfdGl0bGV9PC9iPjogJHt4X3ZhbHVlfVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nYXBleGNoYXJ0cy10b29sdGlwLXRleHQgdGV4dC1sZWZ0Jz5cbiAgICAgICAgICAgICAgICAgIDxiPiR7eV9heGlzX3RpdGxlfTwvYj46ICR7eV92YWx1ZX1cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICBgKVxuICB9XG59XG5cbiQoZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBpZiB0aGVyZSBhcmUgaW5wdXRzIHdpdGggJ3BhdHRlcm4nIGRhdGEgYXR0cmlidXRlXG4gICAgICAgIC8vIHRoZW4gaW5pdGlhbGl6ZSB0aGVtXG4gICAgICAgIE50b3BVdGlscy5pbml0RGF0YVBhdHRlcm5zKCk7XG59KTtcblxuIiwiLy8gMjAxNi0xOSAtIG50b3Aub3JnXG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhdGFibGVSZW1vdmVFbXB0eVJvdyh0YWJsZSkge1xuICAkKFwidGJvZHkgdHIuZW1wdHlSb3dcIiwgJCh0YWJsZSkpLnJlbW92ZSgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YXRhYmxlQWRkRW1wdHlSb3codGFibGUsIGVtcHR5X3N0cikge1xuICB2YXIgY29sdW1ucyA9ICQoXCJ0aGVhZCB0aFwiLCAkKHRhYmxlKSkuZmlsdGVyKGZ1bmN0aW9uKCkge1xuICAgcmV0dXJuICQodGhpcykuY3NzKCdkaXNwbGF5JykgIT0gJ25vbmUnO1xuICB9KS5sZW5ndGg7XG4gICQoXCJ0Ym9keVwiLCAkKHRhYmxlKSkuaHRtbCgnPHRyIGNsYXNzPVwiZW1wdHlSb3dcIj48dGQgY29sc3Bhbj1cIicgKyBjb2x1bW5zICsgJ1wiPjxpPicgKyBlbXB0eV9zdHIgKyAnPC9pPjwvdGQ+PC90cj4nKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGF0YWJsZUdldE51bURpc3BsYXllZEl0ZW1zKHRhYmxlKSB7XG4gICByZXR1cm4gJChcInRyOm5vdCguZW1wdHlSb3cpXCIsICQodGFibGUpKS5sZW5ndGggLSAxO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YXRhYmxlSXNFbXB0eSh0YWJsZSkge1xuICByZXR1cm4gZGF0YXRhYmxlR2V0TnVtRGlzcGxheWVkSXRlbXModGFibGUpID09IDA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhdGFibGVHZXRCeUZvcm0oZm9ybSkge1xuICByZXR1cm4gJChcInRhYmxlXCIsICQoXCIjZHQtdG9wLWRldGFpbHNcIiwgJChmb3JtKSkucGFyZW50KCkpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhdGFibGVVbmRvQWRkUm93KG5ld19yb3csIGVtcHR5X3N0ciwgYnRfdG9fZW5hYmxlLCBjYWxsYmFja19zdHIpIHtcbiAgaWYgKGJ0X3RvX2VuYWJsZSlcbiAgICAgJChidF90b19lbmFibGUpLnJlbW92ZUF0dHIoXCJkaXNhYmxlZFwiKS5yZW1vdmVDbGFzcyhcImRpc2FibGVkXCIpO1xuXG4gIHZhciBmb3JtID0gJChuZXdfcm93KS5jbG9zZXN0KFwiZm9ybVwiKTtcbiAgJChuZXdfcm93KS5yZW1vdmUoKTtcbiAgYXlzVXBkYXRlRm9ybShmb3JtKTtcbiAgdmFyIGR0ID0gZGF0YXRhYmxlR2V0QnlGb3JtKGZvcm0pO1xuXG4gIGlmIChkYXRhdGFibGVJc0VtcHR5KGR0KSlcbiAgICAgZGF0YXRhYmxlQWRkRW1wdHlSb3coZHQsIGVtcHR5X3N0cik7XG5cbiAgIGlmIChjYWxsYmFja19zdHIpXG4gICAgICAvLyBpbnZva2VcbiAgICAgIHdpbmRvd1tjYWxsYmFja19zdHJdKG5ld19yb3cpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YXRhYmxlRm9yRWFjaFJvdyh0YWJsZSwgY2FsbGJhY2tzKSB7XG4gICAkKFwidHI6bm90KDpmaXJzdClcIiwgdGFibGUpLmVhY2goZnVuY3Rpb24ocm93X2kpIHtcbiAgICAgIGlmKHR5cGVvZiBjYWxsYmFja3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgIGNhbGxiYWNrcy5iaW5kKHRoaXMpKHJvd19pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICB2YXIgaTtcbiAgICAgICAgIGZvciAoaT0wOyBpPGNhbGxiYWNrcy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIGNhbGxiYWNrc1tpXS5iaW5kKHRoaXMpKHJvd19pKTtcbiAgICAgIH1cbiAgIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YXRhYmxlQWRkQnV0dG9uQ2FsbGJhY2sodGRfaWR4LCBsYWJlbCwgYnNfY2xhc3MsIGNhbGxiYWNrX3N0ciwgbGluaywgdmlzaWJsZSA9IHRydWUsIHRpdGxlID0gJycpIHtcbiAgIGlmICgkKFwidGQ6bnRoLWNoaWxkKFwiK3RkX2lkeCtcIilcIiwgJCh0aGlzKSkuZmluZCgnZGl2LmQtZmxleCcpLmxlbmd0aCA9PSAwKSB7XG4gICAgICAkKFwidGQ6bnRoLWNoaWxkKFwiK3RkX2lkeCtcIilcIiwgJCh0aGlzKSkuZW1wdHkoKTtcbiAgICAgICQoXCJ0ZDpudGgtY2hpbGQoXCIrdGRfaWR4K1wiKVwiLCAkKHRoaXMpKS5hcHBlbmQoJChcIjxkaXYgY2xhc3M9J2QtZmxleCBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyJz48L2Rpdj5cIikpO1xuICAgfVxuICAgJChcInRkOm50aC1jaGlsZChcIit0ZF9pZHgrXCIpXCIsICQodGhpcykpLmZpbmQoJy5kLWZsZXgnKS5hcHBlbmQoJzxhIGhyZWY9XCInICsgbGluayArIGBcIiB0aXRsZT0nJHt0aXRsZX0nIGRhdGEtcGxhY2VtZW50PVwiYm90dG9tXCIgY2xhc3M9XCJidG4gYnRuLXNtIG14LTEgJHtic19jbGFzc30gJHshdmlzaWJsZSA/ICdkaXNhYmxlZCcgOiAnJ31cIiBvbmNsaWNrPVwiYCArIGNhbGxiYWNrX3N0ciArICdcIiByb2xlPVwiYnV0dG9uXCI+JyArIGxhYmVsICsgJzwvYT4nKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRhdGF0YWJsZUFkZERlbGV0ZUJ1dHRvbkNhbGxiYWNrKHRkX2lkeCwgY2FsbGJhY2tfc3RyLCBsYWJlbCkge1xuICAgIGRhdGF0YWJsZUFkZEJ1dHRvbkNhbGxiYWNrLmJpbmQodGhpcykodGRfaWR4LCBsYWJlbCwgXCJidG4tZGFuZ2VyXCIsIGNhbGxiYWNrX3N0ciwgXCJqYXZhc2NyaXB0OnZvaWQoMClcIiwgdHJ1ZSwgJ0RlbGV0ZScpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YXRhYmxlQWRkQWN0aW9uQnV0dG9uQ2FsbGJhY2sodGRfaWR4LCBjYWxsYmFja19zdHIsIGxhYmVsLCB2aXNpYmxlID0gdHJ1ZSwgdGl0bGUgPSAnJykge1xuICAgIGRhdGF0YWJsZUFkZEJ1dHRvbkNhbGxiYWNrLmJpbmQodGhpcykodGRfaWR4LCBsYWJlbCwgXCJidG4taW5mb1wiLCBjYWxsYmFja19zdHIsIFwiamF2YXNjcmlwdDp2b2lkKDApXCIsIHZpc2libGUsIHRpdGxlKTtcbn1cbiAgICBcbmV4cG9ydCBmdW5jdGlvbiBkYXRhdGFibGVBZGRGaWx0ZXJCdXR0b25DYWxsYmFjayh0ZF9pZHgsIGNhbGxiYWNrX3N0ciwgbGFiZWwsIHRpdGxlID0gJycsIHZpc2libGUgPSB0cnVlKSB7XG4gICAgZGF0YXRhYmxlQWRkQnV0dG9uQ2FsbGJhY2suYmluZCh0aGlzKSh0ZF9pZHgsIGxhYmVsLCBcImJ0bi13YXJuaW5nXCIsIGNhbGxiYWNrX3N0ciwgXCJqYXZhc2NyaXB0OnZvaWQoMClcIiwgdmlzaWJsZSwgdGl0bGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YXRhYmxlQWRkTGlua0J1dHRvbkNhbGxiYWNrKHRkX2lkeCwgbGluaywgbGFiZWwsIHRpdGxlID0gJycpIHtcbiAgIGRhdGF0YWJsZUFkZEJ1dHRvbkNhbGxiYWNrLmJpbmQodGhpcykodGRfaWR4LCBsYWJlbCwgXCJidG4taW5mb1wiLCBcIlwiLCBsaW5rLCB0cnVlLCB0aXRsZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRhdGFibGVNYWtlU2VsZWN0VW5pcXVlKHRyX29iaiwgYWRkZWRfcm93c19wcmVmaXgsIG9wdGlvbnMpIHtcbiAgIG9wdGlvbnMgPSBOdG9wVXRpbHMucGFyYW1zRXh0ZW5kKHtcbiAgICAgIG9uX2NoYW5nZTogJC5ub29wLCAgICAgICAgICAgICAgICAgICAgIC8qIEEgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIHdoZW4gdGhlIHNlbGVjdCBpbnB1dCBjaGFuZ2VzICovXG4gICAgICBzZWxlY3Rvcl9mbjogZnVuY3Rpb24ob2JqKSB7ICAgICAgICAgICAvKiBBIGNhbGxiYWNrIHdoaWNoIHJlY2VpdmVzIGEgdHIgb2JqZWN0IGFuZCByZXR1cm5zIGEgc2luZ2xlIHNlbGVjdCBpbnB1dCAqL1xuICAgICAgICAgcmV0dXJuIG9iai5maW5kKFwic2VsZWN0XCIpLmZpcnN0KCk7XG4gICAgICB9LFxuICAgfSwgb3B0aW9ucyk7XG5cbiAgIGZ1bmN0aW9uIGRhdGF0YWJsZUZvcmVhY2hTZWxlY3RPdGhlclRoYW4odGhpc19zZWxlY3QsIGFkZGVkX3Jvd3NfcHJlZml4LCBzZWxlY3Rvcl9mbiwgY2FsbGJhY2spIHtcbiAgICAgICQoXCJbaWRePVwiICsgYWRkZWRfcm93c19wcmVmaXggKyBcIl1cIikuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICAgdmFyIG90aGVyID0gc2VsZWN0b3JfZm4oJCh0aGlzKSk7XG4gICAgICAgICBpZiAob3RoZXJbMF0gIT0gdGhpc19zZWxlY3RbMF0pXG4gICAgICAgICAgICBjYWxsYmFjayhvdGhlcik7XG4gICAgICB9KTtcbiAgIH1cblxuICAgZnVuY3Rpb24gZGF0YXRhYmxlT3B0aW9uQ2hhbmdlU3RhdHVzKG9wdGlvbl9vYmosIGVuYWJsZSkge1xuICAgICAgaWYgKGVuYWJsZSkge1xuICAgICAgICAgb3B0aW9uX29iai5yZW1vdmVBdHRyKFwiZGlzYWJsZWRcIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAgdmFyIHNlbGVjdF9vYmogPSBvcHRpb25fb2JqLmNsb3Nlc3QoXCJzZWxlY3RcIik7XG4gICAgICAgICB2YXIgc2hvdWxkX3Jlc2V0ID0gKHNlbGVjdF9vYmoudmFsKCkgPT0gb3B0aW9uX29iai52YWwoKSk7XG4gICAgICAgICBvcHRpb25fb2JqLmF0dHIoXCJkaXNhYmxlZFwiLCBcImRpc2FibGVkXCIpO1xuXG4gICAgICAgICBpZihzaG91bGRfcmVzZXQpIHtcbiAgICAgICAgICAgIHZhciBuZXdfdmFsID0gc2VsZWN0X29iai5maW5kKFwib3B0aW9uOm5vdChbZGlzYWJsZWRdKVwiKS5maXJzdCgpLnZhbCgpO1xuICAgICAgICAgICAgc2VsZWN0X29iai52YWwobmV3X3ZhbCk7XG4gICAgICAgICAgICBzZWxlY3Rfb2JqLmF0dHIoXCJkYXRhLW9sZC12YWxcIiwgbmV3X3ZhbCk7XG4gICAgICAgICB9XG4gICAgICB9XG4gICB9XG5cbiAgIGZ1bmN0aW9uIGRhdGF0YWJsZU9uU2VsZWN0RW50cnlDaGFuZ2UoYWRkZWRfcm93c19wcmVmaXgsIHNlbGVjdG9yX2ZuLCBjaGFuZ2VfY2FsbGJhY2spIHtcbiAgICAgIHZhciBvbGRfdmFsdWUgPSAkKHRoaXMpLmF0dHIoXCJkYXRhLW9sZC12YWxcIikgfHwgXCJcIjtcbiAgICAgIHZhciBuZXdfdmFsdWUgPSAkKHRoaXMpLnZhbCgpIHx8IFwiXCI7XG4gICAgICB2YXIgb3RoZXJzID0gW107XG5cbiAgICAgIGlmIChvbGRfdmFsdWUgPT0gbmV3X3ZhbHVlKVxuICAgICAgICAgb2xkX3ZhbHVlID0gXCJcIjtcblxuICAgICAgZGF0YXRhYmxlRm9yZWFjaFNlbGVjdE90aGVyVGhhbigkKHRoaXMpLCBhZGRlZF9yb3dzX3ByZWZpeCwgc2VsZWN0b3JfZm4sIGZ1bmN0aW9uKG90aGVyKSB7XG4gICAgICAgICBkYXRhdGFibGVPcHRpb25DaGFuZ2VTdGF0dXMob3RoZXIuZmluZChcIm9wdGlvblt2YWx1ZT0nXCIgKyBvbGRfdmFsdWUgKyBcIiddXCIpLCB0cnVlKTtcbiAgICAgICAgIGRhdGF0YWJsZU9wdGlvbkNoYW5nZVN0YXR1cyhvdGhlci5maW5kKFwib3B0aW9uW3ZhbHVlPSdcIiArIG5ld192YWx1ZSArIFwiJ11cIiksIGZhbHNlKTtcbiAgICAgICAgIG90aGVycy5wdXNoKG90aGVyKTtcbiAgICAgIH0pO1xuXG4gICAgICBjaGFuZ2VfY2FsbGJhY2soJCh0aGlzKSwgb2xkX3ZhbHVlLCBuZXdfdmFsdWUsIG90aGVycywgZGF0YXRhYmxlT3B0aW9uQ2hhbmdlU3RhdHVzKTtcblxuICAgICAgJCh0aGlzKS5hdHRyKFwiZGF0YS1vbGQtdmFsXCIsIG5ld192YWx1ZSk7XG4gICB9XG5cbiAgIGZ1bmN0aW9uIGRhdGF0YWJsZU9uQWRkU2VsZWN0RW50cnkoc2VsZWN0X29iaiwgYWRkZWRfcm93c19wcmVmaXgsIHNlbGVjdG9yX2ZuKSB7XG4gICAgICBzZWxlY3Rfb2JqLnZhbChcIlwiKTtcblxuICAgICAgLy8gVHJpZ2dlciBhbiB1cGRhdGUgb24gb3RoZXIgaW5wdXRzIGluIG9yZGVyIHRvIGRpc2FibGUgZW50cmllcyBvbiB0aGUgc2VsZWN0X29ialxuICAgICAgZGF0YXRhYmxlRm9yZWFjaFNlbGVjdE90aGVyVGhhbihzZWxlY3Rfb2JqLCBhZGRlZF9yb3dzX3ByZWZpeCwgc2VsZWN0b3JfZm4sIGZ1bmN0aW9uKG90aGVyKSB7XG4gICAgICAgICAvL2RhdGF0YWJsZU9wdGlvbkNoYW5nZVN0YXR1cyhzZWxlY3Rfb2JqLmZpbmQoXCJvcHRpb25bdmFsdWU9J1wiICsgb3RoZXIudmFsKCkgKyBcIiddXCIpLCBmYWxzZSk7XG4gICAgICAgICBvdGhlci50cmlnZ2VyKFwiY2hhbmdlXCIpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIHNlbGVjdCBmaXJzdCBhdmFpbGFibGUgZW50cnlcbiAgICAgIHZhciBuZXdfc2VsID0gc2VsZWN0X29iai5maW5kKFwib3B0aW9uOm5vdChbZGlzYWJsZWRdKVwiKS5maXJzdCgpO1xuICAgICAgdmFyIG5ld192YWwgPSBuZXdfc2VsLnZhbCgpO1xuXG4gICAgICAvLyB0cmlnZ2VyIGNoYW5nZSBldmVudCB0byB1cGRhdGUgb3RoZXIgZW50cmllc1xuICAgICAgc2VsZWN0X29iai52YWwobmV3X3ZhbCk7XG4gICAgICBzZWxlY3Rfb2JqLnRyaWdnZXIoXCJjaGFuZ2VcIik7XG4gICB9XG5cbiAgIHZhciBzZWxlY3QgPSBvcHRpb25zLnNlbGVjdG9yX2ZuKHRyX29iaik7XG4gICBzZWxlY3Qub24oXCJjaGFuZ2VcIiwgZnVuY3Rpb24oKSB7IGRhdGF0YWJsZU9uU2VsZWN0RW50cnlDaGFuZ2UuYmluZCh0aGlzKShhZGRlZF9yb3dzX3ByZWZpeCwgb3B0aW9ucy5zZWxlY3Rvcl9mbiwgb3B0aW9ucy5vbl9jaGFuZ2UpOyB9KTtcbiAgIHNlbGVjdC5vbihcInJlbW92ZVwiLCBmdW5jdGlvbigpIHskKHRoaXMpLnZhbChcIlwiKS50cmlnZ2VyKFwiY2hhbmdlXCIpfSk7XG4gICBkYXRhdGFibGVPbkFkZFNlbGVjdEVudHJ5KHNlbGVjdCwgYWRkZWRfcm93c19wcmVmaXgsIG9wdGlvbnMuc2VsZWN0b3JfZm4pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YXRhYmxlSXNMYXN0UGFnZSh0YWJsZSkge1xuICAgdmFyIGxhc3RwYWdlID0gJChcIiNkdC1ib3R0b20tZGV0YWlscyAucGFnaW5hdGlvbiBsaTpudGgtbGFzdC1jaGlsZCgzKVwiLCAkKHRhYmxlKSk7XG4gICByZXR1cm4gISgobGFzdHBhZ2UubGVuZ3RoID09IDEpICYmIChsYXN0cGFnZS5oYXNDbGFzcyhcImFjdGl2ZVwiKSA9PSBmYWxzZSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YXRhYmxlR2V0Q29sdW1uKHRhYmxlLCBpZF9rZXksIGlkX3ZhbHVlKSB7XG4gICB2YXIgcmVzID0gdGFibGUuZGF0YShcImRhdGF0YWJsZVwiKS5yZXN1bHRzZXQuZGF0YS5maWx0ZXIoZnVuY3Rpb24oaXRlbSkge1xuICAgICAgcmV0dXJuIGl0ZW1baWRfa2V5XSA9PT0gaWRfdmFsdWU7XG4gICB9KTtcblxuICAgaWYocmVzKSByZXR1cm4gcmVzWzBdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0YXRhYmxlR2V0Q29sdW1uSW5kZXgodGFibGUsIGNvbHVtbl9rZXkpIHtcbiAgIHZhciBpbmRleCA9IHRhYmxlLmRhdGEoXCJkYXRhdGFibGVcIikub3B0aW9ucy5jb2x1bW5zLmZpbmRJbmRleChmdW5jdGlvbihpdGVtKSB7XG4gICAgICByZXR1cm4gaXRlbS5maWVsZCA9PT0gY29sdW1uX2tleTtcbiAgIH0pO1xuXG4gICByZXR1cm4oaW5kZXgpO1xufVxuXG4vKlxuICogSGVscGVyIGZ1bmN0aW9uIHRvIGFkZCByZWZyZXNoYWJsZSBkYXRhdGFibGVzIHJvd3MuXG4gKlxuICogdGFibGU6IHRoZSBkYXRhdGFibGUgZGl2IGpxdWVyeSBvYmplY3RcbiAqIGNvbHVtbl9pZDogdGhlIGZpZWxkIGtleSB1c2VkIHRvIGluZGVudGlmeSB0aGUgcm93c1xuICogcmVmcmVzaF9pbnRlcnZhbDogbWlsbGlzZWNvbmRzIHJlZnJlc2ggaW50ZXJ2YWwgZm9yIHRoaXMgdGFibGVcbiAqIHRyZW5kX2NvbHVtbnM6IChvcHRpb25hbCkgYSBtYXAgPGZpZWxkIC0+IGZvcm1hdHRlcl9mbj4gd2hpY2ggaW5kaWNhdGVzIHRoZSBudW1lcmljIGNvbHVtbnNcbiAqIHdoaWNoIHNob3VsZCBiZSBzaG93biB3aXRoIHVwL2Rvd24gYXJyb3dzIHVwb24gcmVmcmVzaC5cbiAqXG4gKiBSZXR1cm5zIHRydWUgb24gc3VjY2VzcywgZmFsc2Ugb3RoZXJ3aXNlLlxuICpcbiAqIEV4YW1wbGUgdXNhZ2U6XG4gKiAgICQoXCIjdGFibGUtcmVkaXMtc3RhdHNcIikuZGF0YXRhYmxlKHtcbiAqICAgICAuLi5cbiAqICAgICB0YWJsZUNhbGxiYWNrOiBmdW5jdGlvbigpIHtcbiAqICAgICAgIC8vIFRoZSB0YWJsZSByb3dzIHdpbGwgYmUgaWRlbnRpZmllZCBieSB0aGUgXCJjb2x1bW5fa2V5XCIsXG4gKiAgICAgICAvLyByZWZyZXNoZWQgZXZlcnkgNSBzZWNvbmRzLCB3aXRoIHVwL2Rvd24gYXJyb3dzIG9uIHRoZSBcImNvbHVtbl9oaXRzXCJcbiAqICAgICAgIGRhdGF0YWJsZUluaXRSZWZyZXNoUm93cygkKFwiI3RhYmxlLXJlZGlzLXN0YXRzXCIpLCBcImNvbHVtbl9rZXlcIiwgNTAwMCwge1wiY29sdW1uX2hpdHNcIjogYWRkQ29tbWFzfSk7XG4gKiAgICAgfVxuICogICB9KTtcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRhdGF0YWJsZUluaXRSZWZyZXNoUm93cyh0YWJsZSwgY29sdW1uX2lkLCByZWZyZXNoX2ludGVydmFsLCB0cmVuZF9jb2x1bW5zKSB7XG4gIHZhciAkZHQgPSB0YWJsZS5kYXRhKFwiZGF0YXRhYmxlXCIpO1xuICB2YXIgcm93cyA9ICRkdC5yZXN1bHRzZXQuZGF0YTtcbiAgdmFyIG9sZF90aW1lciA9IHRhYmxlLmRhdGEoXCJkdC1yci10aW1lclwiKTtcbiAgdmFyIG9sZF9yZXEgPSB0YWJsZS5kYXRhKFwiZHQtcnItYWpheFwiKTtcbiAgdHJlbmRfY29sdW1ucyA9IHRyZW5kX2NvbHVtbnMgfHwge307XG5cbiAgaWYob2xkX3RpbWVyKSB7XG4gICAgLy8gUmVtb3ZlIHRoZSBwcmV2aW91c2x5IHNldCB0aW1lciB0byBhdm9pZCBkb3VibGUgc2NoZWR1bGluZ1xuICAgIGNsZWFySW50ZXJ2YWwob2xkX3RpbWVyKTtcbiAgICB0YWJsZS5yZW1vdmVEYXRhKFwiZHQtcnItdGltZXJcIik7XG4gIH1cblxuICBpZihvbGRfcmVxKSB7XG4gICAgLy8gQWJvcnQgdGhlIHByZXZpb3VzIHJlcXVlc3QgaWYgYW55XG4gICAgb2xkX3JlcS5hYm9ydCgpO1xuICAgIHRhYmxlLnJlbW92ZURhdGEoXCJkdC1yci1hamF4XCIpO1xuICB9XG5cbiAgdmFyIGlkcyA9IFtdO1xuICB2YXIgaWRfdG9fcm93ID0ge307XG5cbiAgZm9yKHZhciByb3cgaW4gcm93cykge1xuICAgIHZhciBkYXRhID0gcm93c1tyb3ddO1xuXG4gICAgaWYoZGF0YVtjb2x1bW5faWRdKSB7XG4gICAgICB2YXIgZGF0YV9pZCA9IGRhdGFbY29sdW1uX2lkXTtcbiAgICAgIGlkX3RvX3Jvd1tkYXRhX2lkXSA9IHJvdztcbiAgICAgIGlkcy5wdXNoKGRhdGFfaWQpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFRoZXNlIHBhcmFtZXRlcnMgd2lsbCBiZSBwYXNzZWQgdG8gdGhlIHJlZnJlc2ggZW5kcG9pbnRcbiAgLy8gdGhlIGN1c3RvbV9ob3N0cyBwYXJhbWV0ZXIgd2lsbCBiZSBwYXNzZWQgaW4gdGhlIEFKQVggcmVxdWVzdCBhbmRcbiAgLy8gd2lsbCBjb250YWluIHRoZSBJRHMgdG8gcmVmcmVzaC4gSXQgc2hvdWxkIGJlIHVzZWQgYnkgdGhlIHJlY2VpdmluZ1xuICAvLyBMdWEgc2NyaXB0IGFzIGEgZmlsdGVyXG4gIHZhciBwYXJhbXMgPSB7XG4gICAgXCJjdXN0b21faG9zdHNcIjogaWRzLmpvaW4oXCIsXCIpXG4gIH07XG4gIHZhciB1cmwgPSAkZHQub3B0aW9ucy51cmw7XG4gIHZhciBmaXJzdF9sb2FkID0gdHJ1ZTtcblxuICB2YXIgX3Byb2Nlc3NfcmVzdWx0ID0gZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgaWYodHlwZW9mKHJlc3VsdCkgPT09IFwic3RyaW5nXCIpXG4gICAgICByZXN1bHQgPSBKU09OLnBhcnNlKHJlc3VsdCk7XG5cbiAgICBpZighcmVzdWx0KSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiQmFkIEpTT04gcmVzdWx0XCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvcih2YXIgcm93IGluIHJlc3VsdC5kYXRhKSB7XG4gICAgICAgdmFyIGRhdGEgPSByZXN1bHQuZGF0YVtyb3ddO1xuICAgICAgIHZhciBkYXRhX2lkID0gZGF0YVtjb2x1bW5faWRdO1xuXG4gICAgICAgaWYoZGF0YV9pZCAmJiBpZF90b19yb3dbZGF0YV9pZF0pIHtcbiAgICAgICAgICB2YXIgcm93X2lkeCA9IGlkX3RvX3Jvd1tkYXRhX2lkXTtcbiAgICAgICAgICB2YXIgcm93X2h0bWwgPSAkZHQucm93c1tyb3dfaWR4XTtcbiAgICAgICAgICB2YXIgcm93X3RkcyA9ICQoXCJ0ZFwiLCByb3dfaHRtbCk7XG5cbiAgICAgICAgICAvKiBUcnkgdG8gdXBkYXRlIGFsbCB0aGUgZmllbGRzIGZvciB0aGUgY3VycmVudCByb3cgKHJvd19odG1sKSAqL1xuICAgICAgICAgIGZvcih2YXIga2V5IGluIGRhdGEpIHtcbiAgICAgICAgICAgICB2YXIgY29sX2lkeCA9IGRhdGF0YWJsZUdldENvbHVtbkluZGV4KHRhYmxlLCBrZXkpO1xuICAgICAgICAgICAgIHZhciBjZWxsID0gcm93X3Rkc1tjb2xfaWR4XTtcbiAgICAgICAgICAgICB2YXIgJGNlbGwgPSAkKGNlbGwpO1xuXG4gICAgICAgICAgICAgdmFyIG9sZF92YWwgPSAkY2VsbC5kYXRhKFwiZHQtcnItY3VyLXZhbFwiKSB8fCAkKGNlbGwpLmh0bWwoKTtcbiAgICAgICAgICAgICB2YXIgdHJlbmRfdmFsdWVfZm9ybWF0dGVyID0gdHJlbmRfY29sdW1uc1trZXldO1xuICAgICAgICAgICAgIHZhciBuZXdfdmFsID0gZGF0YVtrZXldO1xuICAgICAgICAgICAgIHZhciBhcnJvd3MgPSBcIlwiO1xuXG4gICAgICAgICAgICAgaWYodHJlbmRfdmFsdWVfZm9ybWF0dGVyKSB7XG4gICAgICAgICAgICAgIGlmKHBhcnNlRmxvYXQobmV3X3ZhbCkgIT0gbmV3X3ZhbClcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJJbnZhbGlkIG51bWJlcjogXCIgKyBuZXdfdmFsKTtcblxuICAgICAgICAgICAgICBpZighZmlyc3RfbG9hZClcbiAgICAgICAgICAgICAgICBhcnJvd3MgPSBcIiBcIiArIE50b3BVdGlscy5kcmF3VHJlbmQocGFyc2VGbG9hdChuZXdfdmFsKSwgcGFyc2VGbG9hdChvbGRfdmFsKSk7XG5cbiAgICAgICAgICAgICAgLy8gVGhpcyB2YWx1ZSB3aWxsIGJlIG5lZWRlIGluIHRoZSBuZXh0IHJlZnJlc2hcbiAgICAgICAgICAgICAgJGNlbGwuZGF0YShcImR0LXJyLWN1ci12YWxcIiwgbmV3X3ZhbCk7XG5cbiAgICAgICAgICAgICAgbmV3X3ZhbCA9IHRyZW5kX3ZhbHVlX2Zvcm1hdHRlcihuZXdfdmFsKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICQoY2VsbCkuaHRtbCgobmV3X3ZhbCAhPSAwKSA/IChuZXdfdmFsICsgYXJyb3dzKSA6IFwiXCIpO1xuICAgICAgICAgIH1cbiAgICAgICB9XG4gICAgfVxuXG4gICAgZmlyc3RfbG9hZCA9IGZhbHNlO1xuICAgIHRhYmxlLnJlbW92ZURhdGEoXCJkdC1yci1hamF4XCIpO1xuIH07XG5cbiAgLy8gU2F2ZSB0aGUgdGltZXIgaW50byBcImR0LXJyLXRpbWVyXCIgdG8gYmUgYWJsZSB0byBzdG9wIGl0IGlmXG4gIC8vIGRhdGF0YWJsZUluaXRSZWZyZXNoUm93cyBpcyBjYWxsZWQgYWdhaW5cbiAgdGFibGUuZGF0YShcImR0LXJyLXRpbWVyXCIsIHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgIC8vIERvdWJsZSBjaGVjayB0aGF0IGEgcmVxdWVzdCBpcyBub3QgcGVuZGluZ1xuICAgIHZhciBvbGRfcmVxID0gdGFibGUuZGF0YShcImR0LXJyLWFqYXhcIik7XG5cbiAgICBpZihvbGRfcmVxKVxuICAgICAgcmV0dXJuO1xuXG4gICAgLy8gU2F2ZSB0aGUgYWpheCByZXF1ZXN0IHRvIHBvc3NpYmx5IGFib3J0IGl0IGlmXG4gICAgLy8gZGF0YXRhYmxlSW5pdFJlZnJlc2hSb3dzIGlzIGNhbGxlZCBhZ2FpblxuICAgIHRhYmxlLmRhdGEoXCJkdC1yci1hamF4XCIsICQuYWpheCh7XG4gICAgICAgdHlwZTogJ0dFVCcsXG4gICAgICAgdXJsOiB1cmwsXG4gICAgICAgZGF0YTogcGFyYW1zLFxuICAgICAgIGNhY2hlOiBmYWxzZSxcbiAgICAgICBzdWNjZXNzOiBfcHJvY2Vzc19yZXN1bHQsXG4gICAgfSkpO1xuICB9LCByZWZyZXNoX2ludGVydmFsKSk7XG5cbiAgLy8gRmlyc3QgdXBkYXRlXG4gIF9wcm9jZXNzX3Jlc3VsdCgkZHQucmVzdWx0c2V0KTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBkcmF3X3Byb2Nlc3Nlc19ncmFwaChodHRwX3ByZWZpeCwgZ3JhcGhfZGl2X2lkLCBob3N0KSB7XG4gICAgdmFyIGxpbmtzO1xuICAgIHZhciBub2RlcyA9IHt9O1xuXG4gICAgdmFyIHVybCA9IGh0dHBfcHJlZml4ICsgJy9sdWEvZ2V0X3Byb2Nlc3Nlc19ncmFwaF9kYXRhLmx1YT9ob3N0PScgKyBob3N0O1xuXG4gICAgZDMuanNvbih1cmwsIGZ1bmN0aW9uKGVycm9yLCBqc29uKSB7XG5cdGlmKGVycm9yKVxuXHQgICAgcmV0dXJuIGNvbnNvbGUud2FybihlcnJvcik7XG5cblx0bGlua3MgPSBqc29uO1xuXHR2YXIgX2xpbms7XG5cblx0Ly8gQ29tcHV0ZSB0aGUgZGlzdGluY3Qgbm9kZXMgZnJvbSB0aGUgbGlua3MuXG5cdGxpbmtzLmZvckVhY2goZnVuY3Rpb24obGluaykge1xuXHQgICAgaWYobGluay5zb3VyY2VfcGlkID09IC0xKSB7XG5cdFx0LyogSVAgQWRkcmVzcyAtPiBQSUQgKi9cblx0XHRfbGluayA9IGh0dHBfcHJlZml4ICsgXCIvbHVhL2hvc3RfZGV0YWlscy5sdWE/aG9zdD1cIiArIGxpbmsuc291cmNlO1xuXHQgICAgfSBlbHNlIHtcblx0XHQvKiBQSUQgLT4gSVAgQWRkcmVzcyAqL1xuXHRcdF9saW5rID0gaHR0cF9wcmVmaXggKyBcIi9sdWEvcHJvY2Vzc19kZXRhaWxzLmx1YT9waWQ9XCIgKyBsaW5rLnNvdXJjZV9waWQgKyBcIiZwaWRfbmFtZT1cIiArIGxpbmsuc291cmNlX25hbWUgKyBcIiZob3N0PVwiICsgaG9zdCArIFwiJnBhZ2U9Zmxvd3NcIjtcblx0ICAgIH1cblxuXHQgICAgbGluay5zb3VyY2UgPSBub2Rlc1tsaW5rLnNvdXJjZV1cblx0XHR8fCAobm9kZXNbbGluay5zb3VyY2VdID0ge1xuXHRcdCAgICBuYW1lOiBsaW5rLnNvdXJjZV9uYW1lLCBudW06bGluay5zb3VyY2UsXG5cdFx0ICAgIGxpbms6IF9saW5rLCB0eXBlOiBsaW5rLnNvdXJjZV90eXBlLCBwaWQ6IGxpbmsuc291cmNlX3BpZFxuXHRcdH0pO1xuXG5cdCAgICBpZihsaW5rLnRhcmdldF9waWQgPT0gLTEpIHtcblx0XHQvKiBJUCBBZGRyZXNzIC0+IFBJRCAqL1xuXHRcdF9saW5rID0gaHR0cF9wcmVmaXggKyBcIi9sdWEvaG9zdF9kZXRhaWxzLmx1YT9ob3N0PVwiICsgbGluay50YXJnZXQ7XG5cdCAgICB9IGVsc2Uge1xuXHRcdC8qIFBJRCAtPiBJUCBBZGRyZXNzICovXG5cdFx0X2xpbmsgPSBodHRwX3ByZWZpeCArIFwiL2x1YS9wcm9jZXNzX2RldGFpbHMubHVhP3BpZD1cIiArIGxpbmsudGFyZ2V0X3BpZCArIFwiJnBpZF9uYW1lPVwiICsgbGluay50YXJnZXRfbmFtZSArIFwiJmhvc3Q9XCIgKyBob3N0ICsgXCImcGFnZT1mbG93c1wiO1xuXHQgICAgfVxuXG5cdCAgICBsaW5rLnRhcmdldCA9IG5vZGVzW2xpbmsudGFyZ2V0XVxuXHRcdHx8IChub2Rlc1tsaW5rLnRhcmdldF0gPSB7XG5cdFx0ICAgIG5hbWU6IGxpbmsudGFyZ2V0X25hbWUsIG51bTogbGluay50YXJnZXQsXG5cdFx0ICAgIGxpbms6IF9saW5rLCB0eXBlOiBsaW5rLnRhcmdldF90eXBlLCBwaWQ6IGxpbmsudGFyZ2V0X3BpZFxuXHRcdH0pO1xuXHR9KTtcblxuXHR2YXIgd2lkdGggPSA5NjAsIGhlaWdodCA9IDUwMCwgYXJyb3dfc2l6ZSA9IDY7XG5cdHZhciBjb2xvciA9IGQzLnNjYWxlLmNhdGVnb3J5MTAoKTtcblxuXHQvKiBTYW1lIGNvbG9ycyBhcyB0aG9zZSB1c2VkIGluIHRoZSBmbG93X2RldGFpbHMubHVhIHBhZ2UgdG8gcmVwcmVzZW50IGhvc3RzIGFuZCBwcm9jZXNzZXMgKi9cblx0Y29sb3JbXCJwcm9jXCJdID0gXCJyZWRcIjtcblx0Y29sb3JbXCJob3N0XCJdID0gXCJsaWdodHN0ZWVsYmx1ZVwiO1xuXG5cdHZhciBmb3JjZSA9IGQzLmxheW91dC5mb3JjZSgpXG5cdCAgICAubm9kZXMoZDMudmFsdWVzKG5vZGVzKSlcblx0ICAgIC5saW5rcyhsaW5rcylcblx0ICAgIC5zaXplKFt3aWR0aCwgaGVpZ2h0XSlcblx0ICAgIC5saW5rRGlzdGFuY2UoMTIwKSAvLyBBcmMgbGVuZ3RoXG5cdCAgICAuY2hhcmdlKC00MDApXG5cdCAgICAub24oXCJ0aWNrXCIsIHRpY2spXG5cdCAgICAuc3RhcnQoKTtcblxuXHR2YXIgc3ZnID0gZDMuc2VsZWN0KFwiI1wiICsgZ3JhcGhfZGl2X2lkKS5hcHBlbmQoXCJzdmdcIilcblx0ICAgIC5hdHRyKFwiaWRcIiwgXCJlYnBmX2dyYXBoXCIpXG5cdCAgICAuYXR0cihcIndpZHRoXCIsIHdpZHRoKVxuXHQgICAgLmF0dHIoXCJoZWlnaHRcIiwgaGVpZ2h0KTtcblxuXHQvLyBQZXItdHlwZSBtYXJrZXJzLCBhcyB0aGV5IGRvbid0IGluaGVyaXQgc3R5bGVzLlxuXHRzdmcuYXBwZW5kKFwiZGVmc1wiKS5zZWxlY3RBbGwoXCJtYXJrZXJcIilcblx0ICAgIC5kYXRhKFtcInByb2MycHJvY1wiLCBcInByb2MyaG9zdFwiLCBcImhvc3QycHJvY1wiLCBcImhvc3QyaG9zdFwiXSlcblx0ICAgIC5lbnRlcigpLmFwcGVuZChcIm1hcmtlclwiKVxuXHQgICAgLmF0dHIoXCJpZFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBkOyB9KVxuXHQgICAgLmF0dHIoXCJ2aWV3Qm94XCIsIFwiMCAtNSAyMCAyMFwiKVxuXHQgICAgLmF0dHIoXCJyZWZYXCIsIDE1KVxuXHQgICAgLmF0dHIoXCJyZWZZXCIsIC0xLjUpXG5cdCAgICAuYXR0cihcIm1hcmtlcldpZHRoXCIsIGFycm93X3NpemUpLmF0dHIoXCJtYXJrZXJIZWlnaHRcIiwgYXJyb3dfc2l6ZSlcblx0ICAgIC5hdHRyKFwib3JpZW50XCIsIFwiYXV0b1wiKVxuXHQgICAgLmFwcGVuZChcInBhdGhcIilcblx0ICAgIC5hdHRyKFwiZFwiLCBcIk0wLC01TDEwLDBMMCw1XCIpO1xuXG5cdHZhciBwYXRoID0gc3ZnLmFwcGVuZChcImdcIikuc2VsZWN0QWxsKFwicGF0aFwiKVxuXHQgICAgLmRhdGEoZm9yY2UubGlua3MoKSlcblx0ICAgIC5lbnRlcigpLmFwcGVuZChcInBhdGhcIilcblx0ICAgIC5hdHRyKFwiY2xhc3NcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gXCJsaW5rIFwiICsgZC50eXBlOyB9KVxuXHQgICAgLmF0dHIoXCJtYXJrZXItZW5kXCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIFwidXJsKCNcIiArIGQudHlwZSArIFwiKVwiOyB9KTtcblxuXG5cdHZhciBjaXJjbGUgPSBzdmcuYXBwZW5kKFwiZ1wiKS5zZWxlY3RBbGwoXCJjaXJjbGVcIilcblx0ICAgIC5kYXRhKGZvcmNlLm5vZGVzKCkpXG5cdCAgICAuZW50ZXIoKS5hcHBlbmQoXCJjaXJjbGVcIilcblx0ICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJlYnBmX2NpcmNsZVwiKVxuXHQgICAgLmF0dHIoXCJyXCIsIDE1KSAvKiBSYWRpdXMgKi9cblx0ICAgIC5zdHlsZShcImZpbGxcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gY29sb3JbZC50eXBlXTsgfSlcblx0ICAgIC5jYWxsKGZvcmNlLmRyYWcpXG5cdCAgICAub24oXCJkYmxjbGlja1wiLCBmdW5jdGlvbihkKSB7XG5cdFx0d2luZG93LmxvY2F0aW9uLmhyZWYgPSBkLmxpbms7XG5cdCAgICB9ICk7XG5cblx0Ly8gQ2lyY2xlIGxhYmVsXG5cdHZhciB0ZXh0ID0gc3ZnLmFwcGVuZChcImdcIikuc2VsZWN0QWxsKFwidGV4dFwiKVxuXHQgICAgLmRhdGEoZm9yY2Uubm9kZXMoKSlcblx0ICAgIC5lbnRlcigpLmFwcGVuZChcInRleHRcIilcblx0ICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJlYnBmX3RleHRcIilcblx0ICAgIC5hdHRyKFwieFwiLCAxMilcblx0ICAgIC5hdHRyKFwieVwiLCBcIjAuNXJlbVwiKVxuICAgICAgLnN0eWxlKFwiZm9udC1zaXplXCIsIFwiMXJlbVwiKVxuXHQgICAgLnRleHQoZnVuY3Rpb24oZCkge1xuXHRcdGlmKGQucGlkID49IDApIC8vIFByb2Nlc3Ncblx0XHQgICAgcmV0dXJuKGQubmFtZSArIFwiIFtwaWQ6IFwiK2QucGlkK1wiXVwiKTtcblx0XHRlbHNlIHsgLy8gSG9zdFxuXHRcdCAgICByZXR1cm4oZC5uYW1lKTtcblx0XHR9XG5cdCAgICB9KTtcblxuXHQvLyBVc2UgZWxsaXB0aWNhbCBhcmMgcGF0aCBzZWdtZW50cyB0byBkb3VibHktZW5jb2RlIGRpcmVjdGlvbmFsaXR5LlxuXHRmdW5jdGlvbiB0aWNrKCkge1xuXHQgICAgcGF0aC5hdHRyKFwiZFwiLCBsaW5rQXJjKTtcblx0ICAgIGNpcmNsZS5hdHRyKFwidHJhbnNmb3JtXCIsIHRyYW5zZm9ybSk7XG5cdCAgICB0ZXh0LmF0dHIoXCJ0cmFuc2Zvcm1cIiwgdHJhbnNmb3JtKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGxpbmtBcmMoZCkge1xuXHQgICAgdmFyIGR4ID0gZC50YXJnZXQueCAtIGQuc291cmNlLngsXG5cdFx0ZHkgPSBkLnRhcmdldC55IC0gZC5zb3VyY2UueSxcblx0XHRkciA9IE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XG5cdCAgICByZXR1cm4gXCJNXCIgKyBkLnNvdXJjZS54ICsgXCIsXCIgKyBkLnNvdXJjZS55ICsgXCJBXCIgKyBkciArIFwiLFwiICsgZHIgKyBcIiAwIDAsMSBcIiArIGQudGFyZ2V0LnggKyBcIixcIiArIGQudGFyZ2V0Lnk7XG5cdH1cblxuXHRmdW5jdGlvbiB0cmFuc2Zvcm0oZCkge1xuXHQgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgZC54ICsgXCIsXCIgKyBkLnkgKyBcIilcIjtcblx0fVxuICAgIH0pO1xufVxuIiwiLyogVXNlIHdpdGg6XG4gICpcbiAgKiAkKCcjZWRpdC1yZWNpcGllbnQtbW9kYWwgZm9ybScpLm1vZGFsSGFuZGxlcih7IC4uLiB9KVxuICAqL1xuY2xhc3MgTW9kYWxIYW5kbGVyIHtcblxuICAgIGNvbnN0cnVjdG9yKGZvcm0sIG9wdGlvbnMpIHtcblxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuY3NyZiA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTW9kYWxIYW5kbGVyOjpNaXNzaW5nIENTUkYgdG9rZW4hXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZm9ybTtcbiAgICAgICAgdGhpcy5kaWFsb2cgPSAkKGZvcm0pLmNsb3Nlc3QoXCIubW9kYWxcIik7XG5cbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5jc3JmID0gb3B0aW9ucy5jc3JmO1xuICAgICAgICB0aGlzLmRvbnREaXNhYmxlU3VibWl0ID0gb3B0aW9ucy5kb250RGlzYWJsZVN1Ym1pdDtcblxuICAgICAgICB0aGlzLm9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoKGxpc3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMuYmluZEZvcm1WYWxpZGF0aW9uKCk7XG4gICAgICAgICAgICB0aGlzLnRvZ2dsZUZvcm1TdWJtaXNzaW9uKCk7XG4gICAgICAgICAgICB0aGlzLmluaXREYXRhUGF0dGVybnMoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5vYnNlcnZlci5vYnNlcnZlKHRoaXMuZWxlbWVudFswXSwge1xuICAgICAgICAgICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgICAgICAgICAgc3VidHJlZTogdHJ1ZVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmluaXRpYWxTdGF0ZSA9IG51bGw7XG4gICAgICAgIHRoaXMuY3VycmVudFN0YXRlID0gbnVsbDtcbiAgICAgICAgdGhpcy5maXJzdENsb3NlQXR0ZW1wdCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzU3VibWl0dGluZyA9IGZhbHNlO1xuXG4gICAgICAgIGNvbnN0IHN1Ym1pdEJ1dHRvbiA9ICQodGhpcy5lbGVtZW50KS5maW5kKGBbdHlwZT0nc3VibWl0J11gKTtcbiAgICAgICAgaWYgKHN1Ym1pdEJ1dHRvbi5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTW9kYWxIYW5kbGVyOjpUaGUgc3VibWl0IGJ1dHRvbiB3YXMgbm90IGZvdW5kIGluc2lkZSB0aGUgZm9ybSFcIik7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRvZ2dsZUZvcm1TdWJtaXNzaW9uKCk7XG5cbiAgICB9XG5cbiAgICBpbml0RGF0YVBhdHRlcm5zKCkge1xuICAgICAgICBOdG9wVXRpbHMuaW5pdERhdGFQYXR0ZXJucygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGZvcm0ncyBzbmFwc2hvdCB0byBzYXZlIGEgZm9ybSBzdGF0ZVxuICAgICAqL1xuICAgIGNyZWF0ZUZvcm1TbmFwc2hvdCgpIHtcblxuICAgICAgICBjb25zdCBzbmFwc2hvdCA9IHtcbiAgICAgICAgICAgIGlucHV0czoge30sXG4gICAgICAgICAgICBoaWRkZW46IFtdXG4gICAgICAgIH07XG5cbiAgICAgICAgJCh0aGlzLmVsZW1lbnQpLmZpbmQoJ3RleHRhcmVhLHNlbGVjdCxpbnB1dFt0eXBlIT1cInJhZGlvXCJdJykuZWFjaChmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIGNvbnN0IHR5cGUgPSAkKHRoaXMpLnByb3AoJ25vZGVOYW1lJykudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSAkKHRoaXMpLmF0dHIoJ25hbWUnKTtcbiAgICAgICAgICAgIHNuYXBzaG90LmlucHV0c1tgJHt0eXBlfVtuYW1lPScke25hbWV9J11gXSA9ICQodGhpcykudmFsKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgICQodGhpcy5lbGVtZW50KS5maW5kKGBbc3R5bGU9J2Rpc3BsYXk6IG5vbmU7J10sIHNwYW4uaW52YWxpZC1mZWVkYmFja2ApLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc25hcHNob3QuaGlkZGVuLnB1c2goJCh0aGlzKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBzbmFwc2hvdDtcbiAgICB9XG5cbiAgICBjb21wYXJlRm9ybVNuYXBoc290KHMxLCBzMikge1xuXG4gICAgICAgIGlmIChzMSA9PSBudWxsIHx8IHMyID09IG51bGwpIHJldHVybiB0cnVlO1xuXG4gICAgICAgIGZvciAobGV0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhzMS5pbnB1dHMpKSB7XG4gICAgICAgICAgICBpZiAoczIuaW5wdXRzW2tleV0gIT0gdmFsdWUpIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGRlbGVnYXRlTW9kYWxDbG9zaW5nKCkge1xuXG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgICAgICQodGhpcy5kaWFsb2cpLmZpbmQoJ2J1dHRvbi5jYW5jZWwnKS5vZmYoJ2NsaWNrJykuY2xpY2soZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICBzZWxmLmZpcnN0Q2xvc2VBdHRlbXB0ID0gZmFsc2U7XG4gICAgICAgICAgICAkKHNlbGYuZWxlbWVudClbMF0ucmVwb3J0VmFsaWRpdHkoKTtcbiAgICAgICAgICAgICQoc2VsZi5kaWFsb2cpLmZpbmQoJy5jb25maXJtLWNsb3NpbmcnKS5mYWRlT3V0KDEwMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICQoc2VsZi5kaWFsb2cpLmZpbmQoJ2J1dHRvbi5idG4tY2xvc2UnKS5mYWRlSW4oMTAwKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICAkKHRoaXMuZGlhbG9nKS5vZmYoJ2hpZGUuYnMubW9kYWwnKS5vbignaGlkZS5icy5tb2RhbCcsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoc2VsZi5pc1N1Ym1pdHRpbmcpIHtcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gaWYgdGhlIGZvcm0gc3RhdGUgaGFzbid0IGNoYW5nZWQgdGhlbiBkb24ndCBzaG93IHRoZSBtZXNzYWdlXG4gICAgICAgICAgICBpZiAoc2VsZi5jb21wYXJlRm9ybVNuYXBoc290KHNlbGYuY3VycmVudFN0YXRlLCBzZWxmLmluaXRpYWxTdGF0ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzZWxmLmZpcnN0Q2xvc2VBdHRlbXB0KSByZXR1cm47XG4gICAgICAgICAgICAvLyBhYm9ydCB0aGUgbW9kYWwgY2xvc2luZyBldmVudFxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgLy8gZmxhZyBhIGNsb3NlIGF0dGVtcHQgaGFzIGJlZW4gaW52b2tlZFxuICAgICAgICAgICAgc2VsZi5maXJzdENsb3NlQXR0ZW1wdCA9IHRydWU7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIHNob3cgYW4gYWxlcnQgdG8gaW5mb3JtIHRoZSB1c2VyXG4gICAgICAgICAgICAkKHNlbGYuZGlhbG9nKS5maW5kKCdidXR0b24uYnRuLWNsb3NlJykuZmFkZU91dCgxMDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkKHNlbGYuZGlhbG9nKS5maW5kKCcuY29uZmlybS1jbG9zaW5nJykuZmFkZUluKDEwMCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIH0pO1xuXG4gICAgICAgICQodGhpcy5kaWFsb2cpLm9mZignaGlkZGVuLmJzLm1vZGFsJykub24oJ2hpZGRlbi5icy5tb2RhbCcsIGZ1bmN0aW9uIChldmVudCkge1xuXG4gICAgICAgICAgICAvLyBmb3IgZWFjaCBpbnB1dCBpbnNpZGUgdGhlIGZvcm0gcmVzdG9yZSB0aGUgaW5pdGlhbCB2YWx1ZVxuICAgICAgICAgICAgLy8gZnJvbSB0aGUgc25hcHNob3QgdGFrZW4gYXQgaW5pdFxuICAgICAgICAgICAgZm9yIChjb25zdCBbc2VsZWN0b3IsIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhzZWxmLmluaXRpYWxTdGF0ZS5pbnB1dHMpKSB7XG4gICAgICAgICAgICAgICAgJChzZWxmLmRpYWxvZykuZmluZChzZWxlY3RvcikudmFsKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAkKHNlbGYuZGlhbG9nKS5maW5kKHNlbGVjdG9yKS5yZW1vdmVDbGFzcygnaXMtaW52YWxpZCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBoaWRlIHRoZSBzaHdvbiBlbGVtZW50c1xuICAgICAgICAgICAgc2VsZi5pbml0aWFsU3RhdGUuaGlkZGVuLmZvckVhY2goKCRoaWRkZW4pID0+IHtcbiAgICAgICAgICAgICAgICAkaGlkZGVuLmhpZGUoKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBzZWxmLmVsZW1lbnQuZmluZChgW3R5cGU9J3N1Ym1pdCddYCkuYXR0cihcImRpc2FibGVkXCIsIFwiZGlzYWJsZWRcIik7XG4gICAgICAgICAgICBzZWxmLmN1cnJlbnRTdGF0ZSA9IG51bGw7XG4gICAgICAgICAgICBzZWxmLmZpcnN0Q2xvc2VBdHRlbXB0ID0gZmFsc2U7XG5cbiAgICAgICAgICAgICQoc2VsZi5kaWFsb2cpLmZpbmQoJy5jb25maXJtLWNsb3NpbmcnKS5mYWRlT3V0KDEwMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICQoc2VsZi5kaWFsb2cpLmZpbmQoJ2J1dHRvbi5idG4tY2xvc2UnKS5mYWRlSW4oMTAwKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBjbGVhbiB0aGUgZm9ybSB3aGVuIHRoZSBtb2RhbCBpcyBjbG9zZWRcbiAgICAgICAgICAgIC8vIHRvIHByZXZlbnQgdGhlIGZpZWxkcyBmbGlja2VyaW5nXG4gICAgICAgICAgICBzZWxmLmNsZWFuRm9ybSgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmaWxsRm9ybU1vZGFsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmxvYWRGb3JtRGF0YSgpO1xuICAgIH1cblxuICAgIGludm9rZU1vZGFsSW5pdChkYXRhID0ge30pIHtcblxuICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgICAgICAvLyByZXNldCBmb3JtIHZhbHVlcyB3aGVuIHRoZSBtb2RhbCBjbG9zZXNcbiAgICAgICAgdGhpcy5kZWxlZ2F0ZU1vZGFsQ2xvc2luZygpO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhIHx8IHRoaXMuZmlsbEZvcm1Nb2RhbCgpO1xuICAgICAgICB0aGlzLm9wdGlvbnMub25Nb2RhbEluaXQodGhpcy5kYXRhLCB0aGlzKTtcblxuICAgICAgICAkKHRoaXMuZWxlbWVudCkucGFyZW50cygnLm1vZGFsJykub24oJ3Nob3cuYnMubW9kYWwnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzZWxmLm9wdGlvbnMub25Nb2RhbFNob3coKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gY3JlYXRlIGEgaW5pdGlhbCBmb3JtIHNuYXBzaG90IHRvIHJlc3RvcmUgZWxlbWVudHMgb24gY2xvc2luZ1xuICAgICAgICB0aGlzLmluaXRpYWxTdGF0ZSA9IHRoaXMuY3JlYXRlRm9ybVNuYXBzaG90KCk7XG4gICAgICAgIHRoaXMuY3VycmVudFN0YXRlID0gbnVsbDtcblxuICAgICAgICB0aGlzLmRlbGVnYXRlUmVzZXRCdXR0b24oKTsgICBcbiAgICB9XG5cbiAgICBkZWxlZ2F0ZVN1Ym1pdCgpIHtcblxuICAgICAgICB0aGlzLmJpbmRGb3JtVmFsaWRhdGlvbigpO1xuXG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgICAgIHRoaXMuc3VibWl0SGFuZGxlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBpZiAoIXNlbGYub3B0aW9ucy5pc1N5bmNSZXF1ZXN0KSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgc2VsZi5tYWtlUmVxdWVzdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgICQodGhpcy5lbGVtZW50KS5vbignc3VibWl0JywgdGhpcy5zdWJtaXRIYW5kbGVyKTtcbiAgICB9XG5cbiAgICBiaW5kRm9ybVZhbGlkYXRpb24oKSB7XG5cbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgLy8gaGFuZGxlIGlucHV0IHZhbGlkYXRpb25cbiAgICAgICAgJCh0aGlzLmVsZW1lbnQpLmZpbmQoYGlucHV0LHNlbGVjdCx0ZXh0YXJlYWApLmVhY2goYXN5bmMgZnVuY3Rpb24gKGksIGlucHV0KSB7XG5cbiAgICAgICAgICAgIC8vIGpRdWVyeSBvYmplY3Qgb2YgdGhlIGN1cnJlbnQgaW5wdXRcbiAgICAgICAgICAgIGNvbnN0ICRpbnB1dCA9ICQodGhpcyk7XG4gICAgICAgICAgICAvLyBpZCB0byBoYW5kbGUgdGhlIGN1cnJlbnQgdGltZW91dCBzZXQgdG8gc2hvdyBlcnJvcnNcbiAgICAgICAgICAgIGxldCB0aW1lb3V0SWQgPSAtMTtcblxuICAgICAgICAgICAgY29uc3QgdmFsaWRIb3N0bmFtZSA9IGFzeW5jICgpID0+IHtcblxuICAgICAgICAgICAgICAgIC8vIHNob3cgdGhlIHNwaW5uZXIgdG8gdGhlIHVzZXIgYW5kIHNldCB0aGUgaW5wdXQgdG8gcmVhZG9ubHlcbiAgICAgICAgICAgICAgICBjb25zdCAkc3Bpbm5lciA9ICRpbnB1dC5wYXJlbnQoKS5maW5kKCcuc3Bpbm5lci1ib3JkZXInKTtcbiAgICAgICAgICAgICAgICAkaW5wdXQuYXR0cihcInJlYWRvbmx5XCIsIHRydWUpO1xuICAgICAgICAgICAgICAgICRzcGlubmVyLnNob3coKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgTnRvcFV0aWxzLnJlc29sdmVETlMoJChpbnB1dCkudmFsKCkpO1xuXG4gICAgICAgICAgICAgICAgLy8gaGlkZSB0aGUgc3Bpbm5lciBhbmQgcmVuYWJsZSB3cml0ZSB0byB0aGUgaW5wdXRcbiAgICAgICAgICAgICAgICAkaW5wdXQucmVtb3ZlQXR0cihcInJlYWRvbmx5XCIpO1xuICAgICAgICAgICAgICAgICRzcGlubmVyLmhpZGUoKTtcblxuICAgICAgICAgICAgICAgIC8vIGlmIHRoZSByZXNwb25zZSB3YXMgbmVnYXRpdmUgdGhlbiBhbGVydCB0aGUgdXNlclxuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5yYyA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQuc2V0Q3VzdG9tVmFsaWRpdHkocmVzcG9uc2UucmNfc3RyKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtmYWxzZSwgcmVzcG9uc2UucmNfc3RyX2hyXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyByZXR1cm4gc3VjY2VzcyBmb3IgdmFsaWQgcmVzb2x2ZWQgaG9zdG5tYWVcbiAgICAgICAgICAgICAgICBpbnB1dC5zZXRDdXN0b21WYWxpZGl0eShcIlwiKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBbdHJ1ZSwgXCJTdWNjZXNzXCJdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCB2YWxpZElucHV0ID0gYXN5bmMgKHZhbGlkYXRpb24pID0+IHtcblxuICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBpbnB1dCByZXF1aXJlIHRvIHZhbGlkYXRlIGhvc3QgbmFtZSB0aGVuIHBlcmZvcm0gYSBETlMgcmVzb2x2ZVxuICAgICAgICAgICAgICAgIGlmICh2YWxpZGF0aW9uLmRhdGEucmVzb2x2ZUROUyAmJiAkaW5wdXQudmFsKCkubWF0Y2goTnRvcFV0aWxzLlJFR0VYRVMuZG9tYWluTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHZhbGlkSG9zdG5hbWUoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodmFsaWRhdGlvbi5kYXRhLmNhbm5vdEJlRW1wdHkgJiYgdmFsaWRhdGlvbi5pc0lucHV0RW1wdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdHJpZ2dlciBpbnB1dCB2YWxpZGF0aW9uIGZsYWdcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQuc2V0Q3VzdG9tVmFsaWRpdHkoXCJQbGVhc2UgZmlsbCB0aGUgaW5wdXQuXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2ZhbHNlLCB2YWxpZGF0aW9uLmRhdGEudmFsaWRhdGlvbkVtcHR5TWVzc2FnZSB8fCBpMThuX2V4dC5taXNzaW5nX2ZpZWxkXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQudmFsaWRpdHkucGF0dGVybk1pc21hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0LnNldEN1c3RvbVZhbGlkaXR5KFwiUGF0dGVybiBtaXNtYXRjaC5cIik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbZmFsc2UsIHZhbGlkYXRpb24uZGF0YS52YWxpZGF0aW9uTWVzc2FnZSB8fCBpMThuX2V4dC5pbnZhbGlkX2ZpZWxkXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQudmFsaWRpdHkucmFuZ2VPdmVyZmxvdykge1xuICAgICAgICAgICAgICAgICAgICBpbnB1dC5zZXRDdXN0b21WYWxpZGl0eShcIlZhbHVlIGV4Y2VlZCB0aGUgbWF4aW11bSB2YWx1ZS5cIik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbZmFsc2UsIHZhbGlkYXRpb24uZGF0YS5yYW5nZU92ZXJmbG93TWVzc2FnZSB8fCBpMThuX2V4dC5pbnZhbGlkX2ZpZWxkXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQudmFsaWRpdHkucmFuZ2VVbmRlcmZsb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQuc2V0Q3VzdG9tVmFsaWRpdHkoXCJWYWx1ZSBpcyB1bmRlciB0aGUgbWluaW11bSB2YWx1ZS5cIik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbZmFsc2UsIHZhbGlkYXRpb24uZGF0YS5yYW5nZVVuZGVyZmxvd01lc3NhZ2UgfHwgaTE4bl9leHQuaW52YWxpZF9maWVsZF07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gc2V0IHZhbGlkYXRpb24gdG8gdHJ1ZVxuICAgICAgICAgICAgICAgIGlucHV0LnNldEN1c3RvbVZhbGlkaXR5KFwiXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbdHJ1ZSwgXCJTdWNjZXNzXCJdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBjaGVja1ZhbGlkYXRpb24gPSBhc3luYyAoKSA9PiB7XG5cbiAgICAgICAgICAgICAgICBjb25zdCB2YWxpZGF0aW9uID0ge1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uTWVzc2FnZTogJGlucHV0LmRhdGEoJ3ZhbGlkYXRpb25NZXNzYWdlJyksXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uRW1wdHlNZXNzYWdlOiAkaW5wdXQuZGF0YSgndmFsaWRhdGlvbkVtcHR5TWVzc2FnZScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2Fubm90QmVFbXB0eTogKCRpbnB1dC5hdHRyKCdyZXF1aXJlZCcpID09PSBcInJlcXVpcmVkXCIpIHx8ICgkaW5wdXQuZGF0YShcInZhbGlkYXRpb25Ob3RFbXB0eVwiKSA9PSB0cnVlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmVETlM6ICRpbnB1dC5kYXRhKCd2YWxpZGF0aW9uUmVzb2x2ZWRucycpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VPdmVyZmxvd01lc3NhZ2U6ICRpbnB1dC5kYXRhKCd2YWxpZGF0aW9uUmFuZ2VPdmVyZmxvd01lc3NhZ2UnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlVW5kZXJmbG93TWVzc2FnZTogJGlucHV0LmRhdGEoJ3ZhbGlkYXRpb25VbmRlcmZsb3dPdmVyZmxvd01lc3NhZ2UnKSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgaXNJbnB1dEVtcHR5OiAodHlwZW9mKCRpbnB1dC52YWwoKSkgPT09IFwic3RyaW5nXCIgPyAkaW5wdXQudmFsKCkudHJpbSgpID09IFwiXCIgOiBmYWxzZSlcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgY29uc3QgW2lzVmFsaWQsIG1lc3NhZ2VUb1Nob3ddID0gYXdhaXQgdmFsaWRJbnB1dCh2YWxpZGF0aW9uKTtcbiAgICAgICAgICAgICAgICBsZXQgJGVycm9yID0gJGlucHV0LnBhcmVudCgpLmZpbmQoYC5pbnZhbGlkLWZlZWRiYWNrYCk7XG5cbiAgICAgICAgICAgICAgICAvLyBpZiB0aGUgZXJyb3IgZWxlbWVudCBkb2Vzbid0IGV4aXN0IHRoZW4gY3JlYXRlIGEgbmV3IG9uZVxuICAgICAgICAgICAgICAgIGlmICgkZXJyb3IubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgJGVycm9yID0gJChgPHNwYW4gY2xhc3M9J2ludmFsaWQtZmVlZGJhY2snPjwvc3Bhbj5gKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBkaXNwbGF5IHRoZSBlcnJvcnMgYW5kIGNvbG9yIHRoZSBpbnB1dCBib3hcbiAgICAgICAgICAgICAgICBpZiAoIWlzVmFsaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgJGlucHV0LmFkZENsYXNzKCdpcy1pbnZhbGlkJyk7XG4gICAgICAgICAgICAgICAgICAgICRpbnB1dC5wYXJlbnQoKS5hcHBlbmQoJGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgJGVycm9yLnRleHQobWVzc2FnZVRvU2hvdyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBjbGVhbiB0aGUgdmFsaWRhdGlvbiBtZXNzYWdlIGFuZCByZW1vdmUgdGhlIGVycm9yXG4gICAgICAgICAgICAgICAgICAgICRpbnB1dC5yZW1vdmVDbGFzcygnaXMtaW52YWxpZCcpO1xuICAgICAgICAgICAgICAgICAgICAkZXJyb3IuZmFkZU91dCg1MDAsIGZ1bmN0aW9uICgpIHsgJCh0aGlzKS5yZW1vdmUoKTsgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkKHRoaXMpLm9mZignaW5wdXQnKS5vbignaW5wdXQnLCBmdW5jdGlvbiAoZSkge1xuXG4gICAgICAgICAgICAgICAgc2VsZi5jdXJyZW50U3RhdGUgPSBzZWxmLmNyZWF0ZUZvcm1TbmFwc2hvdCgpO1xuXG4gICAgICAgICAgICAgICAgLy8gaWYgZXhpc3RzIGFscmVhZHkgYSBUaW1lb3V0IHRoZW4gY2xlYXIgaXRcbiAgICAgICAgICAgICAgICBpZiAodGltZW91dElkICE9IC0xKSBjbGVhclRpbWVvdXQodGltZW91dElkKTtcblxuICAgICAgICAgICAgICAgIGlmICghJGlucHV0LmF0dHIoXCJmb3Jtbm92YWxpZGF0ZVwiKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyB0cmlnZ2VyIGlucHV0IHZhbGlkYXRpb24gYWZ0ZXIgMzAwbXNlY1xuICAgICAgICAgICAgICAgICAgICB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrVmFsaWRhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHJpZ2dlciBmb3JtIHZhbGlkYXRpb24gdG8gZW5hYmxlIHRoZSBzdWJtaXQgYnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnRvZ2dsZUZvcm1TdWJtaXNzaW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIDMwMCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSB1c2VyIGhhcyBjaGFuZ2VkIHRoZSBpbnB1dCwgd2UgY2FuIGFib3J0IHRoZSBmaXJzdCBjbG9zZSBhdHRlbXB0XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZmlyc3RDbG9zZUF0dGVtcHQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgJCh0aGlzKS5vZmYoJ2ludmFsaWQnKS5vbignaW52YWxpZCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGlmICghJGlucHV0LmF0dHIoXCJmb3Jtbm92YWxpZGF0ZVwiKSkge1xuICAgICAgICAgICAgICAgICAgICBjaGVja1ZhbGlkYXRpb24oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICBnZXRNb2RhbElEKCkge1xuICAgICAgICByZXR1cm4gJCh0aGlzLmVsZW1lbnQpLnBhcmVudHMoJy5tb2RhbCcpLmF0dHIoJ2lkJyk7XG4gICAgfVxuXG4gICAgdG9nZ2xlRm9ybVN1Ym1pc3Npb24oKSB7XG5cbiAgICAgICAgbGV0IGlzVmFsaWQgPSB0cnVlO1xuXG4gICAgICAgIC8vIGlmIGVhY2ggaW5wdXQgaXMgbWFya2VkIGFzIHZhbGlkIHRoZW4gZW5hYmxlIHRoZSBmb3JtIHN1Ym1pdCBidXR0b25cbiAgICAgICAgJCh0aGlzLmVsZW1lbnQpLmZpbmQoJ2lucHV0Om5vdCg6ZGlzYWJsZWQpLHNlbGVjdDpub3QoOmRpc2FibGVkKSx0ZXh0YXJlYTpub3QoOmRpc2FibGVkKScpLmVhY2goZnVuY3Rpb24gKGlkeCwgaW5wdXQpIHtcbiAgICAgICAgICAgIC8vIG1ha2UgYSBjb25jYXRlbmF0ZSAmIGJldHdlZW4gdmFsaWQgZmxhZ3NcbiAgICAgICAgICAgIGlzVmFsaWQgJj0gaW5wdXQudmFsaWRpdHkudmFsaWQ7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlzVmFsaWRcbiAgICAgICAgICAgID8gJCh0aGlzLmVsZW1lbnQpLmZpbmQoYFt0eXBlPSdzdWJtaXQnXSxbdHlwZT0ndGVzdCddYCkucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpXG4gICAgICAgICAgICA6ICQodGhpcy5lbGVtZW50KS5maW5kKGBbdHlwZT0nc3VibWl0J10sW3R5cGU9J3Rlc3QnXWApLmF0dHIoXCJkaXNhYmxlZFwiLCBcImRpc2FibGVkXCIpO1xuICAgIH1cblxuICAgIGNsZWFuRm9ybSgpIHtcbiAgICAgICAgLyogcmVtb3ZlIHZhbGlkYXRpb24gY2xhc3MgZnJvbSBmaWVsZHMgKi9cbiAgICAgICAgJCh0aGlzLmVsZW1lbnQpLmZpbmQoJ2lucHV0LHRleHRhcmVhLHNlbGVjdCcpLmVhY2goZnVuY3Rpb24gKGksIGlucHV0KSB7XG4gICAgICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKGBpcy12YWxpZGApLnJlbW92ZUNsYXNzKGBpcy1pbnZhbGlkYCk7XG4gICAgICAgIH0pO1xuICAgICAgICAvKiByZXNldCBhbGwgdGhlIHZhbHVlcyAqL1xuICAgICAgICAkKHRoaXMuZWxlbWVudClbMF0ucmVzZXQoKTtcbiAgICB9XG5cbiAgICBtYWtlUmVxdWVzdCgpIHtcblxuICAgICAgICBjb25zdCAkZmVlZGJhY2tMYWJlbCA9ICQodGhpcy5lbGVtZW50KS5maW5kKGAuaW52YWxpZC1mZWVkYmFja2ApO1xuICAgICAgICBjb25zdCBzdWJtaXRCdXR0b24gPSAkKHRoaXMuZWxlbWVudCkuZmluZChgW3R5cGU9J3N1Ym1pdCddYCk7XG4gICAgICAgIGxldCBkYXRhVG9TZW5kID0gdGhpcy5vcHRpb25zLmJlZm9yZVN1bWJpdCh0aGlzLmRhdGEpO1xuXG4gICAgICAgIGRhdGFUb1NlbmQuY3NyZiA9IHRoaXMuY3NyZjtcbiAgICAgICAgZGF0YVRvU2VuZCA9ICQuZXh0ZW5kKGRhdGFUb1NlbmQsIHRoaXMub3B0aW9ucy5zdWJtaXRPcHRpb25zKTtcblxuICAgICAgICAvKiBjbGVhbiBwcmV2aW91cyBzdGF0ZSBhbmQgZGlzYWJsZSBidXR0b24gKi9cbiAgICAgICAgc3VibWl0QnV0dG9uLmF0dHIoXCJkaXNhYmxlZFwiLCBcImRpc2FibGVkXCIpO1xuXG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZW5kcG9pbnQpIHtcbiAgICAgICAgICAgIGxldCByZXF1ZXN0O1xuXG4gICAgICAgICAgICBpZiAoc2VsZi5vcHRpb25zLm1ldGhvZCA9PSBcInBvc3RcIikge1xuICAgICAgICAgICAgICAgIHJlcXVlc3QgPSAkLmFqYXgoe1xuICAgICAgICAgICAgICAgICAgICB1cmw6IHRoaXMub3B0aW9ucy5lbmRwb2ludCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoZGF0YVRvU2VuZCksXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogc2VsZi5vcHRpb25zLm1ldGhvZCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVR5cGU6IFwianNvblwiLFxuICAgICAgICAgICAgICAgICAgICBjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04XCJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlcXVlc3QgPSAkLmdldCh0aGlzLm9wdGlvbnMuZW5kcG9pbnQsIGRhdGFUb1NlbmQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmlzU3VibWl0dGluZyA9IHRydWU7XG5cbiAgICAgICAgICAgIHJlcXVlc3QuZG9uZShmdW5jdGlvbiAocmVzcG9uc2UsIHRleHRTdGF0dXMpIHtcblxuICAgICAgICAgICAgICAgIC8vIGNsZWFyIHN1Ym1pdHRpbmcgc3RhdGVcbiAgICAgICAgICAgICAgICBzZWxmLmlzU3VibWl0dGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIC8vIGNsZWFyIHRoZSBjdXJyZW50IGZvcm0gc3RhdGVcbiAgICAgICAgICAgICAgICBzZWxmLmN1cnJlbnRTdGF0ZSA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5vcHRpb25zLnJlc2V0QWZ0ZXJTdWJtaXQpIHNlbGYuY2xlYW5Gb3JtKCk7XG4gICAgICAgICAgICAgICAgJGZlZWRiYWNrTGFiZWwuaGlkZSgpO1xuXG4gICAgICAgICAgICAgICAgY29uc3Qgc3VjY2VzcyA9IHNlbGYub3B0aW9ucy5vblN1Ym1pdFN1Y2Nlc3MocmVzcG9uc2UsIGRhdGFUb1NlbmQsIHNlbGYpO1xuICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBzdWJtaXQgcmV0dXJuIGEgdHJ1ZSBib29sZWFuIHRoZW4gY2xvc2UgdGhlIG1vZGFsXG4gICAgICAgICAgICAgICAgaWYgKHN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgIGlmKHNlbGYuZGlhbG9nLm1vZGFsKVxuICAgICAgICAgICAgICAgICAgICBzZWxmLmRpYWxvZy5tb2RhbCgnaGlkZScpXG4gICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5kaWFsb2dbMF0uaGlkZGVuID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgJChgLm1vZGFsLWJhY2tkcm9wLmZhZGUuc2hvd2ApLnJlbW92ZSgpXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLyogdW5iaW5kIHRoZSBvbGQgY2xvc3VyZSBvbiBzdWJtaXQgZXZlbnQgYW5kIGJpbmQgYSBuZXcgb25lICovXG4gICAgICAgICAgICAgICAgJChzZWxmLmVsZW1lbnQpLm9mZignc3VibWl0Jywgc2VsZi5zdWJtaXRIYW5kbGVyKTtcbiAgICAgICAgICAgICAgICBzZWxmLmRlbGVnYXRlU3VibWl0KCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmZhaWwoZnVuY3Rpb24gKGpxeGhyLCB0ZXh0U3RhdHVzLCBlcnJvclRocm93bikge1xuXG4gICAgICAgICAgICAgICAgc2VsZi5pc1N1Ym1pdHRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGpxeGhyLnJlc3BvbnNlSlNPTjtcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UucmMgIT09IHVuZGVmaW5lZCAmJiByZXNwb25zZS5yYyA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgJGZlZWRiYWNrTGFiZWwuaHRtbChyZXNwb25zZS5yY19zdHJfaHIpLnNob3coKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzZWxmLm9wdGlvbnMub25TdWJtaXRFcnJvcihyZXNwb25zZSwgZGF0YVRvU2VuZCwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5hbHdheXMoZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICBzdWJtaXRCdXR0b24ucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSBlbHNlIHsgLy8gbm8gZW5kcG9pbnRcblxuICAgICAgICAgICAgICAgIC8vIGNsZWFyIHRoZSBjdXJyZW50IGZvcm0gc3RhdGVcbiAgICAgICAgICAgICAgICBzZWxmLmN1cnJlbnRTdGF0ZSA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICAvL2lmIChzZWxmLm9wdGlvbnMucmVzZXRBZnRlclN1Ym1pdCkgc2VsZi5jbGVhbkZvcm0oKTtcbiAgICAgICAgICAgICAgICAkZmVlZGJhY2tMYWJlbC5oaWRlKCk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBzdWNjZXNzID0gc2VsZi5vcHRpb25zLm9uU3VibWl0U3VjY2Vzcyh7fSwgZGF0YVRvU2VuZCwgc2VsZik7XG4gICAgICAgICAgICAgICAgLy8gaWYgdGhlIHN1Ym1pdCByZXR1cm4gYSB0cnVlIGJvb2xlYW4gdGhlbiBjbG9zZSB0aGUgbW9kYWxcbiAgICAgICAgICAgICAgICBpZiAoc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgaWYoc2VsZi5kaWFsb2cubW9kYWwpXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZGlhbG9nLm1vZGFsKCdoaWRlJyk7XG4gICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZGlhbG9nWzBdLmhpZGRlbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLyogdW5iaW5kIHRoZSBvbGQgY2xvc3VyZSBvbiBzdWJtaXQgZXZlbnQgYW5kIGJpbmQgYSBuZXcgb25lICovXG4gICAgICAgICAgICAgICAgJChzZWxmLmVsZW1lbnQpLm9mZignc3VibWl0Jywgc2VsZi5zdWJtaXRIYW5kbGVyKTtcbiAgICAgICAgICAgICAgICBzZWxmLmRlbGVnYXRlU3VibWl0KCk7XG5cbiAgICAgICAgICAgICAgICBzdWJtaXRCdXR0b24ucmVtb3ZlQXR0cihcImRpc2FibGVkXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGVsZWdhdGVSZXNldEJ1dHRvbigpIHtcblxuICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICAgICAgY29uc3QgcmVzZXRCdXR0b24gPSAkKHRoaXMuZWxlbWVudCkuZmluZChgW3R5cGU9J3Jlc2V0J11gKTtcbiAgICAgICAgaWYgKHJlc2V0QnV0dG9uLmxlbmd0aCA9PSAwKSByZXR1cm47XG5cbiAgICAgICAgY29uc3QgZGVmYXVsdFZhbHVlcyA9IE50b3BVdGlscy5zZXJpYWxpemVGb3JtQXJyYXkoJCh0aGlzLmVsZW1lbnQpLnNlcmlhbGl6ZUFycmF5KCkpO1xuXG4gICAgICAgIHJlc2V0QnV0dG9uLmNsaWNrKGZ1bmN0aW9uIChlKSB7XG5cbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgLy8gcmVzZXQgdGhlIHByZXZpb3VzIHZhbHVlc1xuICAgICAgICAgICAgJChzZWxmLmVsZW1lbnQpLmZpbmQoJ2lucHV0OnZpc2libGUsc2VsZWN0JykuZWFjaChmdW5jdGlvbiAoaSwgaW5wdXQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSAkKGlucHV0KS5hdHRyKCduYW1lJyk7XG4gICAgICAgICAgICAgICAgJChpbnB1dCkudmFsKGRlZmF1bHRWYWx1ZXNba2V5XSlcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdpcy1pbnZhbGlkJykucmVtb3ZlQ2xhc3MoJ2lzLXZhbGlkJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5jb25zdCBtb2RhbEhhbmRsZXIgPSBmdW5jdGlvbiAoYXJncykge1xuXG4gICAgaWYgKHRoaXMubGVuZ3RoICE9IDEpIHRocm93IG5ldyBFcnJvcihcIk9ubHkgYSBmb3JtIGVsZW1lbnQgY2FuIGJ5IGluaXRpYWxpemVkIVwiKTtcblxuICAgIGNvbnN0IG9wdGlvbnMgPSAkLmV4dGVuZCh7XG4gICAgICAgIGNzcmY6ICcnLFxuICAgICAgICBlbmRwb2ludDogJycsXG4gICAgICAgIHJlc2V0QWZ0ZXJTdWJtaXQ6IHRydWUsXG4gICAgICAgIC8qIFRydWUgdG8gc2tpcCB0aGUgYXJlLXlvdS1zdXJlIGNoZWNrIG9uIHRoZSBkaWFsb2cgKi9cbiAgICAgICAgZG9udERpc2FibGVTdWJtaXQ6IGZhbHNlLFxuICAgICAgICAvKiBUcnVlIGlmIHRoZSByZXF1ZXN0IGlzbid0IGRvbmUgYnkgQUpBWCByZXF1ZXN0ICovXG4gICAgICAgIGlzU3luY1JlcXVlc3Q6IGZhbHNlLFxuICAgICAgICBtZXRob2Q6ICdnZXQnLFxuICAgICAgICAvKipcbiAgICAgICAgICogRmV0Y2ggZGF0YSBhc3luY2hyb251c2x5IGZyb20gdGhlIHNlcnZlciBvclxuICAgICAgICAgKiBsb2FkcyBkYXRhIGRpcmVjdGx5IGZyb20gdGhlIGN1cnJlbnQgcGFnZS5cbiAgICAgICAgICogVGhlIGZ1bmN0aW9uIG11c3QgcmV0dXJucyB0aGUgZmV0Y2hlZCBkYXRhLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJucyBSZXR1cm5zIHRoZSBmZXRjaGVkIGRhdGEuXG4gICAgICAgICAqIEBleGFtcGxlIEJlbG93IHRoZXJlIGlzIGFuIGV4YW1wbGUgc2hvd2luZ1xuICAgICAgICAgKiBob3cgdG8gdXNlIHRoZSBmdW5jdGlvbiB3aGVuIGZldGNoaW5nIGRhdGEgZnJvbSB0aGUgc2VydmVyXG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKiBsb2FkRm9ybURhdGE6IGFzeW5jIGZ1bmN0aW9uKCkge1xuICAgICAgICAgKiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBmZXRjaChgZW5kcG9pbnQvdG8vZGF0YWApO1xuICAgICAgICAgKiAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBkYXRhLmpzb24oKTtcbiAgICAgICAgICogICAgICByZXR1cm4gdXNlcjtcbiAgICAgICAgICogfVxuICAgICAgICAgKiBgYGBcbiAgICAgICAgICovXG4gICAgICAgIGxvYWRGb3JtRGF0YTogZnVuY3Rpb24gKCkgeyB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBvbk1vZGFsSW5pdCgpIGlzIGludm9rZWQgd2hlbiB0aGUgcGx1Z2luIGhhcyBiZWVuIGluaXRpYWxpemVkLlxuICAgICAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gbG9hZCB0aGUgZmV0Y2hlZCBkYXRhIGZyb20gYGxvYWRGb3JtRGF0YSgpYFxuICAgICAgICAgKiBpbnNpZGUgdGhlIGZvcm0gbW9kYWwgaW5wdXRzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gbG9hZGVkRGF0YSBUaGlzIGFyZ3VtZW50IGNvbnRhaW5zIHRoZSBmZXRjaGVkIGRhdGEgb2J0YWluZWRcbiAgICAgICAgICogZnJvbSBgbG9hZEZvcm1EYXRhKClgXG4gICAgICAgICAqIEBleGFtcGxlIEJlbG93IHRoZXJlIGlzIGFuIGV4YW1wbGUgc2hvd2luZyBob3cgdG8gdXNlXG4gICAgICAgICAqIHRoZSBmdW5jdGlvbiAod2Ugc3VwcG9zZSB0aGF0IGxvYWRGb3JtRGF0YSgpIHJldHVybnMgdGhlIGZvbGxvd2luZ1xuICAgICAgICAgKiBvYmplY3Q6IGBsb2FkZWRVc2VyID0ge2ZpcnN0bmFtZTogJ0ZvbycsIGxhc3RuYW1lOiAnQmFyJywgaWQ6IDE0MjgxMDN9YClcbiAgICAgICAgICogYGBgXG4gICAgICAgICAqIG9uTW9kYWxJbml0OiBmdW5jdGlvbihsb2FkZWRVc2VyKSB7XG4gICAgICAgICAqICAgICAgJChgI3VzZXJNb2RhbCBmb3JtIGlucHV0I2ZpcnN0bmFtZWApLnZhbChsb2FkZWRVc2VyLmZpcnN0bmFtZSk7XG4gICAgICAgICAqICAgICAgJChgI3VzZXJNb2RhbCBmb3JtIGlucHV0I2xhc3RuYW1lYCkudmFsKGxvYWRlZFVzZXIubGFzdG5hbWUpO1xuICAgICAgICAgKiAgICAgICQoYCN1c2VyTW9kYWwgZm9ybSBpbnB1dCNpZGApLnZhbChsb2FkZWRVc2VyLmlkKTtcbiAgICAgICAgICogfVxuICAgICAgICAgKiBgYGBcbiAgICAgICAgICovXG4gICAgICAgIG9uTW9kYWxJbml0OiBmdW5jdGlvbiAobG9hZGVkRGF0YSkgeyB9LFxuXG4gICAgICAgIG9uTW9kYWxTaG93OiBmdW5jdGlvbiAoKSB7IH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBmdW5jdGlvbiBiZWZvcmVTdWJtaXQoKSBpcyBpbnZva2VkIGFmdGVyIHRoZSB1c2VyXG4gICAgICAgICAqIHN1Ym1pdCB0aGUgZm9ybS4gVGhlIGZ1bmN0aW9uIG11c3QgcmV0dXJuIHRoZSBkYXRhIHRvXG4gICAgICAgICAqIHNlbmQgdG8gdGhlIGVuZHBvaW50LiBJZiB0aGUgY2hvc2VuIG1ldGhvZCBpcyBgcG9zdGBcbiAgICAgICAgICogYSBjc3JmIHdpbGwgYmUgYWRkIHRvIHRoZSByZXR1cm5lZCBvYmplY3QuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBleGFtcGxlIFdlIHNob3cgYmVsb3cgYSBzaW1wbGUgZXhhbXBsZSBob3cgdG8gdXNlIHRoZSBmdW5jdGlvbjpcbiAgICAgICAgICogYGBgXG4gICAgICAgICAqIGJlZm9yZVN1Ym1pdDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAqICAgICAgY29uc3QgYm9keSA9IHtcbiAgICAgICAgICogICAgICAgICAgYWN0aW9uOiAnZWRpdCcsXG4gICAgICAgICAqICAgICAgICAgIEpTT046IEpTT04uc3RyaW5naWZ5KHNlcmlhbGl6ZUFycmF5Rm9ybSgkKGBmb3JtYCkuc2VyaWFsaXplQXJyYXkoKSkpXG4gICAgICAgICAqICAgICAgfTtcbiAgICAgICAgICogICAgICByZXR1cm4gYm9keTtcbiAgICAgICAgICogfVxuICAgICAgICAgKiBgYGBcbiAgICAgICAgICovXG4gICAgICAgIGJlZm9yZVN1bWJpdDogZnVuY3Rpb24gKCkgeyByZXR1cm4ge30gfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhpcyBmdW5jdGlvbiBpcyBpbnZva2VkIHdoZW4gdGhlIHJlcXVlc3QgdG8gdGhlIGVuZHBvaW50XG4gICAgICAgICAqIHRlcm1pbmF0ZXMgc3VjY2Vzc2Z1bGx5ICgyMDApLiBCZWZvcmUgdGhlIGNhbGwgb2YgdGhpcyBmdW5jdGlvblxuICAgICAgICAgKiBhIG5ldyBjc3JmIHJldHJpdmVkIGZyb20gdGhlIHNlcnZlciB3aWxsIGJlIHNldCBmb3JcbiAgICAgICAgICogZnV0dXJlIGNhbGxzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhpcyBvYmplY3QgY29udGFpbnMgdGhlIHJlc3BvbnNlXG4gICAgICAgICAqIGZyb20gdGhlIHNlcnZlclxuICAgICAgICAgKlxuICAgICAgICAgKiBAZXhhbXBsZSBCZWxvdyB0aGVyZSBpcyBhbiBleGFtcGxlIHNob3dpbmcgYSBzaW1wbGUgdXNlciBjYXNlOlxuICAgICAgICAgKiBgYGBcbiAgICAgICAgICogb25TdWJtaXRTdWNjZXNzOiBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgKiAgICAgIGlmIChyZXNwb25zZS5zdWNjZXNzKSB7XG4gICAgICAgICAqICAgICAgICAgIGNvbnNvbGUubG9nKGBUaGUgdXNlciBpbmZvIGhhcyBiZWVuIGVkaXQgd2l0aCBzdWNjZXNzIWApO1xuICAgICAgICAgKiAgICAgIH1cbiAgICAgICAgICogfVxuICAgICAgICAgKiBgYGBcbiAgICAgICAgICovXG4gICAgICAgIG9uU3VibWl0U3VjY2VzczogZnVuY3Rpb24gKHJlc3BvbnNlKSB7IH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgaW52b2tlZCB3aGVuIHRoZSByZXF1ZXN0IHRvIHRoZSBlbmRwb2ludFxuICAgICAgICAgKiB0ZXJtaW5hdGVzIHdpdGggZmFpbHVyZSAoIT0gMjAwKS4gQmVmb3JlIHRoZSBjYWxsIG9mIHRoaXMgZnVuY3Rpb25cbiAgICAgICAgICogYSBuZXcgY3NyZiByZXRyaXZlZCBmcm9tIHRoZSBzZXJ2ZXIgd2lsbCBiZSBzZXQgZm9yXG4gICAgICAgICAqIGZ1dHVyZSBjYWxscy5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IHNlbnQgVGhpcyBvYmplY3QgY29udGFpbnMgdGhlIHNlbnQgZGF0YSB0byB0aGUgZW5kcG9pbnRcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHRleHRTdGF0dXMgSXQgY29udGFpbnMgdGhlIGVycm9yIHRleHQgc3RhdHVzIG9idGFpbmVkXG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBlcnJvclRocm93biBUaGlzIG9iamVjdCBjb250YWlucyBpbmZvIGFib3V0IHRoZSBlcnJvclxuICAgICAgICAgKlxuICAgICAgICAgKiBAZXhhbXBsZSBCZWxvdyB0aGVyZSBpcyBhbiBleGFtcGxlIHNob3dpbmcgYSBzaW1wbGUgdXNlciBjYXNlOlxuICAgICAgICAgKiBgYGBcbiAgICAgICAgICogb25TdWJtaXRFcnJvcjogZnVuY3Rpb24oc2VudCwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pIHtcbiAgICAgICAgICogICAgICBpZiAoZXJyb3JUaHJvd24pIHtcbiAgICAgICAgICogICAgICAgICAgY29uc29sZS5lcnJvcihgT3BzLCBzb21ldGhpbmcgd2VudCB3cm9uZyFgKTtcbiAgICAgICAgICogICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvclRocm93bik7XG4gICAgICAgICAqICAgICAgfVxuICAgICAgICAgKiB9XG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKi9cbiAgICAgICAgb25TdWJtaXRFcnJvcjogZnVuY3Rpb24gKHNlbnQsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKSB7IH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgaW52b2tlZCB3aGVuIHRoZSB1c2VyIGNsaWNrIHRoZSByZXNldCBpbnB1dFxuICAgICAgICAgKiBpbnNpZGUgdGhlIGZvcm0uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBkZWZhdWx0RGF0YSBJdCBjb250YWlucyB0aGUgZmV0Y2hlZCBkYXRhIGZyb21cbiAgICAgICAgICogYGxvYWRGb3JtRGF0YSgpYC5cbiAgICAgICAgICpcbiAgICAgICAgICogQGV4YW1wbGUgQmVsb3cgdGhlcmUgaXMgYW4gZXhhbXBsZSBob3cgdG8gdXNlIHRoZSBmdW5jdGlvbjpcbiAgICAgICAgICogYGBgXG4gICAgICAgICAqIG9uTW9kYWxSZXNldDogZnVuY3Rpb24oZGVmYXVsdERhdGEpIHtcbiAgICAgICAgICogICAgICAkKGBpbnB1dCNpZGApLnZhbChkZWZhdWx0RGF0YS5pZCk7XG4gICAgICAgICAqICAgICAgJChgaW5wdXQjbmFtZWApLnZhbChkZWZhdWx0RGF0YS5uYW1lKTtcbiAgICAgICAgICogICAgICAkKGBpbnB1dCNhZGRyZXNzYCkudmFsKGRlZmF1bHREYXRhLmFkZHJlc3MpO1xuICAgICAgICAgKiB9XG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKi9cbiAgICAgICAgb25Nb2RhbFJlc2V0OiBmdW5jdGlvbiAoZGVmYXVsdERhdGEpIHsgfSxcbiAgICB9LCBhcmdzKTtcblxuICAgIGNvbnN0IG1oID0gbmV3IE1vZGFsSGFuZGxlcih0aGlzLCBvcHRpb25zKTtcbiAgICBtaC5kZWxlZ2F0ZVN1Ym1pdCgpO1xuXG4gICAgcmV0dXJuIG1oO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtb2RhbEhhbmRsZXJcbiIsIi8qKlxuICAgIChDKSAyMDIyIC0gbnRvcC5vcmdcbiovXG5jb25zdCB0eXBlcyA9IHtcbiAgICBub19mb3JtYXR0aW5nOiB7XG4gICAgICAgIGlkOiBcIm5vX2Zvcm1hdHRpbmdcIixcbiAgICAgICAgdW06IG51bGwsXG4gICAgICAgIHN0ZXA6IG51bGwsXG4gICAgICAgIGRlY2ltYWw6IG51bGwsXG4gICAgICAgIHNjYWxlX3ZhbHVlczogbnVsbCxcbiAgICB9LFxuICAgIG51bWJlcjoge1xuICAgICAgICBpZDogXCJudW1iZXJcIixcbiAgICAgICAgdW06IFtcIlwiLCBcIktcIiwgXCJNXCIsIFwiR1wiLCBcIlRcIl0sXG4gICAgICAgIHN0ZXA6IDEwMDAsXG4gICAgICAgIGRlY2ltYWw6IG51bGwsXG4gICAgICAgIHNjYWxlX3ZhbHVlczogbnVsbCxcbiAgICB9LFxuICAgIGZ1bGxfbnVtYmVyOiB7XG4gICAgICAgIGlkOiBcIm51bWJlclwiLFxuICAgICAgICB1bTogW1wiXCIsIFwiS1wiLCBcIk1cIiwgXCJHXCIsIFwiVFwiXSxcbiAgICAgICAgc3RlcDogMTAwMCxcbiAgICAgICAgZGVjaW1hbDogbnVsbCxcbiAgICAgICAgc2NhbGVfdmFsdWVzOiBudWxsLFxuICAgICAgICB0aG91c2FuZHNfc2VwOiBcIixcIiwgLyogQ29tbWVudCB0aGlzIHRvIGVuYWJsZSBcInVtXCIgc2NhbGVkIHN0eWxlICovXG4gICAgfSxcbiAgICBieXRlczoge1xuICAgICAgICBpZDogXCJieXRlc1wiLFxuICAgICAgICB1bTogW1wiQlwiLCBcIktCXCIsIFwiTUJcIiwgXCJHQlwiLCBcIlRCXCIsIFwiUEJcIiwgXCJFQlwiXSxcbiAgICAgICAgc3RlcDogMTAyNCxcbiAgICAgICAgZGVjaW1hbDogMixcbiAgICAgICAgc2NhbGVfdmFsdWVzOiBudWxsLFxuICAgICAgICBhYnNvbHV0ZV92YWx1ZTogdHJ1ZSxcbiAgICB9LFxuICAgIGJwczoge1xuICAgICAgICBpZDogXCJicHNcIixcbiAgICAgICAgdW06IFtcImJwc1wiLCBcIkticHNcIiwgXCJNYnBzXCIsIFwiR2Jwc1wiLCBcIlRicHNcIiwgXCJQYnBzXCJdLFxuICAgICAgICBzdGVwOiAxMDAwLFxuICAgICAgICBkZWNpbWFsOiAyLFxuICAgICAgICBzY2FsZV92YWx1ZXM6IDgsXG4gICAgICAgIGFic29sdXRlX3ZhbHVlOiB0cnVlLFxuICAgIH0sXG4gICAgc3BlZWQ6IHtcbiAgICAgICAgaWQ6IFwic3BlZWRcIixcbiAgICAgICAgdW06IFtcImJpdFwiLCBcIktiaXRcIiwgXCJNYml0XCIsIFwiR2JpdFwiLCBcIlRiaXRcIiwgXCJQYml0XCJdLFxuICAgICAgICBzdGVwOiAxMDAwLFxuICAgICAgICBkZWNpbWFsOiAwLFxuICAgICAgICBzY2FsZV92YWx1ZXM6IG51bGwsXG4gICAgICAgIGFic29sdXRlX3ZhbHVlOiB0cnVlLFxuICAgIH0sXG4gICAgZmxvd3M6IHtcbiAgICAgICAgaWQ6IFwiZmxvd3NcIixcbiAgICAgICAgdW06IFtcImZsb3dzXCIsIFwiS2Zsb3dzXCIsIFwiTWZsb3dzXCIsIFwiR2Zsb3dzXCJdLFxuICAgICAgICBzdGVwOiAxMDAwLFxuICAgICAgICBkZWNpbWFsOiAyLFxuICAgICAgICBzY2FsZV92YWx1ZXM6IG51bGwsICAgICAgICBcbiAgICAgICAgYWJzb2x1dGVfdmFsdWU6IHRydWUsXG4gICAgfSxcbiAgICBmcHM6IHtcbiAgICAgICAgaWQ6IFwiZnBzXCIsXG4gICAgICAgIHVtOiBbXCJmbG93cy9zXCIsIFwiS2Zsb3dzL3NcIiwgXCJNZmxvd3Mvc1wiLCBcIkdmbG93cy9zXCJdLFxuICAgICAgICBzdGVwOiAxMDAwLFxuICAgICAgICBkZWNpbWFsOiAyLFxuICAgICAgICBzY2FsZV92YWx1ZXM6IG51bGwsICAgICAgICBcbiAgICAgICAgYWJzb2x1dGVfdmFsdWU6IHRydWUsXG4gICAgfSxcbiAgICBhbGVydHM6IHtcbiAgICAgICAgaWQ6IFwiYWxlcnRzXCIsXG4gICAgICAgIHVtOiBbXCJhbGVydHNcIiwgXCJLYWxlcnRzXCIsIFwiTWFsZXJ0c1wiLCBcIkdhbGVydHNcIl0sXG4gICAgICAgIHN0ZXA6IDEwMDAsXG4gICAgICAgIGRlY2ltYWw6IDIsXG4gICAgICAgIHNjYWxlX3ZhbHVlczogbnVsbCxcbiAgICAgICAgYWJzb2x1dGVfdmFsdWU6IHRydWUsXG4gICAgfSxcbiAgICBhbGVydHBzOiB7XG4gICAgICAgIGlkOiBcImFsZXJ0cHNcIixcbiAgICAgICAgdW06IFtcImFsZXJ0cy9zXCIsIFwiS2FsZXJ0cy9zXCIsIFwiTWFsZXJ0cy9zXCIsIFwiR2FsZXJ0cy9zXCJdLFxuICAgICAgICBzdGVwOiAxMDAwLFxuICAgICAgICBkZWNpbWFsOiAyLFxuICAgICAgICBzY2FsZV92YWx1ZXM6IG51bGwsXG4gICAgICAgIGFic29sdXRlX3ZhbHVlOiB0cnVlLFxuICAgIH0sXG4gICAgaGl0czoge1xuICAgICAgICBpZDogXCJoaXRzXCIsXG4gICAgICAgIHVtOiBbXCJoaXRzXCIsIFwiS2hpdHNcIiwgXCJNaGl0c1wiLCBcIkdoaXRzXCJdLFxuICAgICAgICBzdGVwOiAxMDAwLFxuICAgICAgICBkZWNpbWFsOiAyLFxuICAgICAgICBzY2FsZV92YWx1ZXM6IG51bGwsICAgICAgICBcbiAgICAgICAgYWJzb2x1dGVfdmFsdWU6IHRydWUsXG4gICAgfSxcbiAgICBoaXRzczoge1xuICAgICAgICBpZDogXCJoaXRzc1wiLFxuICAgICAgICB1bTogW1wiaGl0cy9zXCIsIFwiS2hpdHMvc1wiLCBcIk1oaXRzL3NcIiwgXCJHaGl0cy9zXCJdLFxuICAgICAgICBzdGVwOiAxMDAwLFxuICAgICAgICBkZWNpbWFsOiAyLFxuICAgICAgICBzY2FsZV92YWx1ZXM6IG51bGwsICAgICAgICBcbiAgICAgICAgYWJzb2x1dGVfdmFsdWU6IHRydWUsXG4gICAgfSxcbiAgICBwYWNrZXRzOiB7XG4gICAgICAgIGlkOiBcInBhY2tldHNcIixcbiAgICAgICAgdW06IFtcInBhY2tldHNcIiwgXCJLcGFja2V0c1wiLCBcIk1wYWNrZXRzXCIsIFwiR3BhY2tldHNcIiwgXCJUcGFja2V0c1wiXSxcbiAgICAgICAgc3RlcDogMTAwMCxcbiAgICAgICAgZGVjaW1hbDogMCxcbiAgICAgICAgc2NhbGVfdmFsdWVzOiBudWxsLCAgICAgICAgXG4gICAgICAgIGFic29sdXRlX3ZhbHVlOiB0cnVlLFxuICAgIH0sXG4gICAgcHBzOiB7XG4gICAgICAgIGlkOiBcInBwc1wiLFxuICAgICAgICB1bTogW1wicHBzXCIsIFwiS3Bwc1wiLCBcIk1wcHNcIiwgXCJHcHBzXCIsIFwiVHBwc1wiXSxcbiAgICAgICAgc3RlcDogMTAwMCxcbiAgICAgICAgZGVjaW1hbDogMixcbiAgICAgICAgc2NhbGVfdmFsdWVzOiBudWxsLCAgICAgICAgXG4gICAgICAgIGFic29sdXRlX3ZhbHVlOiB0cnVlLFxuICAgIH0sXG4gICAgbXM6IHtcbiAgICAgICAgaWQ6IFwibXNcIixcbiAgICAgICAgdW06IFtcIm1zXCIsIFwic1wiXSxcbiAgICAgICAgc3RlcDogMTAwMCxcbiAgICAgICAgZGVjaW1hbDogMixcbiAgICAgICAgc2NhbGVfdmFsdWVzOiBudWxsLCAgICAgICAgXG4gICAgICAgIGFic29sdXRlX3ZhbHVlOiB0cnVlLFxuICAgIH0sXG4gICAgcGVyY2VudGFnZToge1xuICAgICAgICBpZDogXCJwZXJjZW50YWdlXCIsXG4gICAgICAgIHVtOiBbXCIlXCJdLFxuICAgICAgICBzdGVwOiAxMDEsXG4gICAgICAgIGRlY2ltYWw6IDEsXG4gICAgICAgIHNjYWxlX3ZhbHVlczogbnVsbCwgICAgICAgIFxuICAgICAgICBtYXhfdmFsdWU6IDEwMCxcbiAgICAgICAgYWJzb2x1dGVfdmFsdWU6IHRydWUsXG4gICAgfSxcbn07XG5cbmZ1bmN0aW9uIGdldFVuaXRNZWFzdXJlTGVuKHR5cGUpIHtcbiAgICAvLyAwMDAuMDBcbiAgICBsZXQgdCA9IHR5cGVzW3R5cGVdO1xuICAgIGxldCBzcGFjZVZhbHVlID0gMztcbiAgICBpZiAodC5kZWNpbWFsICE9IG51bGwgJiYgdC5kZWNpbWFsID4gMCkgeyAgICAgICAgXG4gICAgICAgIHNwYWNlVmFsdWUgPSA2O1xuICAgIH1cbiAgICBsZXQgc3BhY2VVbSA9IDA7XG4gICAgaWYgKHQudW0gIT0gbnVsbCkge1xuICAgICAgICBzcGFjZVVtID0gTWF0aC5tYXgoLi4udC51bS5tYXAoKHVtKSA9PiB1bS5sZW5ndGgpKTtcbiAgICB9XG4gICAgcmV0dXJuIChzcGFjZVZhbHVlICsgMSArIHNwYWNlVW0pO1xufVxuXG5mdW5jdGlvbiBnZXRTY2FsZUZhY3RvckluZGV4KHR5cGUsIHZhbHVlKSB7XG4gICAgbGV0IHR5cGVPcHRpb25zID0gdHlwZXNbdHlwZV07XG4gICAgaWYgKHR5cGUgPT0gdHlwZXMubm9fZm9ybWF0dGluZy5pZCB8fCB2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAodHlwZU9wdGlvbnMuc2NhbGVfdmFsdWVzICE9IG51bGwpIHtcbiAgICAgICAgdmFsdWUgKj0gdHlwZU9wdGlvbnMuc2NhbGVfdmFsdWVzO1xuICAgIH1cbiAgICBsZXQgc3RlcCA9IHR5cGVPcHRpb25zLnN0ZXA7XG4gICAgbGV0IG5lZ2F0aXZlVmFsdWUgPSB2YWx1ZSA8IDA7XG4gICAgaWYgKG5lZ2F0aXZlVmFsdWUpIHsgdmFsdWUgKj0gLTE7IH1cbiAgICBsZXQgaSA9IDA7XG4gICAgbGV0IG1lYXN1cmVzID0gdHlwZU9wdGlvbnMudW07XG4gICAgd2hpbGUgKHZhbHVlID49IHN0ZXAgJiYgaSA8IG1lYXN1cmVzLmxlbmd0aCkge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlIC8gc3RlcDtcbiAgICAgICAgaSArPSAxO1xuICAgIH1cbiAgICByZXR1cm4gaTtcbn1cblxuZnVuY3Rpb24gZ2V0Rm9ybWF0dGVyKHR5cGUsIGFic29sdXRlVmFsdWUsIHNjYWxlRmFjdG9ySW5kZXgpIHtcbiAgICBsZXQgdHlwZU9wdGlvbnMgPSB0eXBlc1t0eXBlXTtcbiAgICBpZiAodHlwZU9wdGlvbnMgPT0gbnVsbCkgeyByZXR1cm4gbnVsbDsgfVxuICAgIFxuICAgIGFic29sdXRlVmFsdWUgfD0gdHlwZU9wdGlvbnMuYWJzb2x1dGVfdmFsdWU7IFxuICAgIGxldCBmb3JtYXR0ZXIgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlID09IHR5cGVzLm5vX2Zvcm1hdHRpbmcuaWQpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZU9wdGlvbnMuc2NhbGVfdmFsdWVzICE9IG51bGwpIHtcbiAgICAgICAgICAgIHZhbHVlICo9IHR5cGVPcHRpb25zLnNjYWxlX3ZhbHVlcztcbiAgICAgICAgfVxuICAgICAgICBsZXQgbmVnYXRpdmVWYWx1ZSA9IHZhbHVlIDwgMDtcbiAgICAgICAgaWYgKG5lZ2F0aXZlVmFsdWUpIHsgdmFsdWUgKj0gLTE7IH1cblxuICAgICAgICBpZiAodHlwZU9wdGlvbnMubWF4X3ZhbHVlICE9IG51bGwgJiYgdmFsdWUgPiB0eXBlT3B0aW9ucy5tYXhfdmFsdWUpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdHlwZU9wdGlvbnMubWF4X3ZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVPcHRpb25zLnRob3VzYW5kc19zZXApIHtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgKyAnJztcbiAgICAgICAgICAgIHZhciB4ID0gdmFsdWUuc3BsaXQoJy4nKTtcbiAgICAgICAgICAgIHZhciB4MSA9IHhbMF07XG4gICAgICAgICAgICB2YXIgeDIgPSAoeC5sZW5ndGggPiAxKSA/ICgnLicgKyB4WzFdKSA6ICcnO1xuICAgICAgICAgICAgdmFyIHJneCA9IC8oXFxkKykoXFxkezN9KS87XG4gICAgICAgICAgICB3aGlsZSAocmd4LnRlc3QoeDEpKSB7XG4gICAgICAgICAgICAgICAgeDEgPSB4MS5yZXBsYWNlKHJneCwgJyQxJyArICcsJyArICckMicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHgxICsgeDI7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGxldCBzdGVwID0gdHlwZU9wdGlvbnMuc3RlcDtcbiAgICAgICAgbGV0IGRlY2ltYWwgPSB0eXBlT3B0aW9ucy5kZWNpbWFsO1xuICAgICAgICBsZXQgbWVhc3VyZXMgPSB0eXBlT3B0aW9ucy51bTtcbiAgICAgICAgbGV0IGkgPSAwO1xuXG4gICAgICAgIHdoaWxlICgodmFsdWUgPj0gc3RlcCAmJiBpIDwgbWVhc3VyZXMubGVuZ3RoICYmICFzY2FsZUZhY3RvckluZGV4KSB8fCAoc2NhbGVGYWN0b3JJbmRleCAhPSBudWxsICYmIGkgPCBzY2FsZUZhY3RvckluZGV4KSkge1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSAvIHN0ZXA7XG4gICAgICAgICAgICBpICs9IDE7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGVjaW1hbCAhPSBudWxsICYmIGRlY2ltYWwgPiAwKSB7ICAgICAgICAgICAgXG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlICogTWF0aC5wb3coMTAsIGRlY2ltYWwpO1xuICAgICAgICAgICAgdmFsdWUgPSBNYXRoLnJvdW5kKHZhbHVlKTtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgLyBNYXRoLnBvdygxMCwgZGVjaW1hbCk7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvRml4ZWQoZGVjaW1hbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAobmVnYXRpdmVWYWx1ZSAmJiAhYWJzb2x1dGVWYWx1ZSkgeyB2YWx1ZSAqPSAtMTsgfVxuICAgICAgICBsZXQgdmFsU3RyaW5nID0gYCR7dmFsdWV9YDtcbiAgICAgICAgLy8gaWYgKHZhbFN0cmluZy5sZW5ndGggPCBtYXhMZW5WYWx1ZSkge1xuICAgICAgICAvLyAgICAgdmFsU3RyaW5nID0gdmFsU3RyaW5nLnBhZEVuZChtYXhMZW5WYWx1ZSAtIHZhbFN0cmluZy5sZW5ndGgsIFwiIFwiKTtcbiAgICAgICAgLy8gfVxuICAgICAgICBsZXQgbVN0cmluZyA9IGAke21lYXN1cmVzW2ldfWA7XG4gICAgICAgIC8vIGlmIChtU3RyaW5nLmxlbmd0aCA8IG1heExlblVtKSB7XG4gICAgICAgIC8vICAgICBtU3RyaW5nID0gbVN0cmluZy5wYWRTdGFydChtYXhMZW5VbSAtIG1TdHJpbmcubGVuZ3RoLCBcIl9cIik7XG4gICAgICAgIC8vIH1cbiAgICAgICAgbGV0IHRleHQgPSBgJHt2YWxTdHJpbmd9ICR7bVN0cmluZ31gO1xuICAgICAgICByZXR1cm4gdGV4dDtcbiAgICB9XG4gICAgcmV0dXJuIGZvcm1hdHRlcjtcbn1cblxuY29uc3QgZm9ybWF0dGVyVXRpbHMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlcyxcbiAgICAgICAgZ2V0VW5pdE1lYXN1cmVMZW4sXG4gICAgICAgIGdldEZvcm1hdHRlcixcbiAgICAgICAgZ2V0U2NhbGVGYWN0b3JJbmRleCxcbiAgICB9O1xufSgpO1xuXG5leHBvcnQgZGVmYXVsdCBmb3JtYXR0ZXJVdGlscztcbiIsImltcG9ydCBOdG9wVXRpbHMgZnJvbSAnLi9udG9wLXV0aWxzJ1xud2luZG93Lk50b3BVdGlscyA9IE50b3BVdGlsc1xuXG5pbXBvcnQgeyBkYXRhdGFibGVJbml0UmVmcmVzaFJvd3MsIGRhdGF0YWJsZUZvckVhY2hSb3csIGRhdGF0YWJsZUlzRW1wdHksIGRhdGF0YWJsZVJlbW92ZUVtcHR5Um93LCBkYXRhdGFibGVBZGRFbXB0eVJvdywgZGF0YXRhYmxlR2V0TnVtRGlzcGxheWVkSXRlbXMsIGRhdGF0YWJsZUdldEJ5Rm9ybSwgZGF0YXRhYmxlVW5kb0FkZFJvdywgZGF0YXRhYmxlQWRkQnV0dG9uQ2FsbGJhY2ssIGRhdGF0YWJsZUFkZERlbGV0ZUJ1dHRvbkNhbGxiYWNrLCBkYXRhdGFibGVBZGRBY3Rpb25CdXR0b25DYWxsYmFjaywgZGF0YXRhYmxlQWRkRmlsdGVyQnV0dG9uQ2FsbGJhY2ssIGRhdGF0YWJsZUFkZExpbmtCdXR0b25DYWxsYmFjaywgZGF0YXRhYmxlTWFrZVNlbGVjdFVuaXF1ZSwgZGF0YXRhYmxlSXNMYXN0UGFnZSwgZGF0YXRhYmxlR2V0Q29sdW1uLCBkYXRhdGFibGVHZXRDb2x1bW5JbmRleCB9IGZyb20gJy4vZGF0YXRhYmxlL2Jvb3RzdHJhcC1kYXRhdGFibGUtdXRpbHMnXG5cbndpbmRvdy5kYXRhdGFibGVJbml0UmVmcmVzaFJvd3MgPSBkYXRhdGFibGVJbml0UmVmcmVzaFJvd3NcbndpbmRvdy5kYXRhdGFibGVGb3JFYWNoUm93ID0gZGF0YXRhYmxlRm9yRWFjaFJvd1xud2luZG93LmRhdGF0YWJsZUlzRW1wdHkgPSBkYXRhdGFibGVJc0VtcHR5XG53aW5kb3cuZGF0YXRhYmxlUmVtb3ZlRW1wdHlSb3cgPSBkYXRhdGFibGVSZW1vdmVFbXB0eVJvd1xud2luZG93LmRhdGF0YWJsZUFkZEVtcHR5Um93ID0gZGF0YXRhYmxlQWRkRW1wdHlSb3dcbndpbmRvdy5kYXRhdGFibGVHZXROdW1EaXNwbGF5ZWRJdGVtcyA9IGRhdGF0YWJsZUdldE51bURpc3BsYXllZEl0ZW1zXG53aW5kb3cuZGF0YXRhYmxlR2V0QnlGb3JtID0gZGF0YXRhYmxlR2V0QnlGb3JtXG53aW5kb3cuZGF0YXRhYmxlVW5kb0FkZFJvdyA9IGRhdGF0YWJsZVVuZG9BZGRSb3dcbndpbmRvdy5kYXRhdGFibGVBZGRCdXR0b25DYWxsYmFjayA9IGRhdGF0YWJsZUFkZEJ1dHRvbkNhbGxiYWNrXG53aW5kb3cuZGF0YXRhYmxlQWRkRGVsZXRlQnV0dG9uQ2FsbGJhY2sgPSBkYXRhdGFibGVBZGREZWxldGVCdXR0b25DYWxsYmFja1xud2luZG93LmRhdGF0YWJsZUFkZEFjdGlvbkJ1dHRvbkNhbGxiYWNrID0gZGF0YXRhYmxlQWRkQWN0aW9uQnV0dG9uQ2FsbGJhY2tcbndpbmRvdy5kYXRhdGFibGVBZGRGaWx0ZXJCdXR0b25DYWxsYmFjayA9IGRhdGF0YWJsZUFkZEZpbHRlckJ1dHRvbkNhbGxiYWNrXG53aW5kb3cuZGF0YXRhYmxlQWRkTGlua0J1dHRvbkNhbGxiYWNrID0gZGF0YXRhYmxlQWRkTGlua0J1dHRvbkNhbGxiYWNrXG53aW5kb3cuZGF0YXRhYmxlTWFrZVNlbGVjdFVuaXF1ZSA9IGRhdGF0YWJsZU1ha2VTZWxlY3RVbmlxdWVcbndpbmRvdy5kYXRhdGFibGVJc0xhc3RQYWdlID0gZGF0YXRhYmxlSXNMYXN0UGFnZVxud2luZG93LmRhdGF0YWJsZUdldENvbHVtbiA9IGRhdGF0YWJsZUdldENvbHVtblxud2luZG93LmRhdGF0YWJsZUdldENvbHVtbkluZGV4ID0gZGF0YXRhYmxlR2V0Q29sdW1uSW5kZXhcblxuaW1wb3J0ICcuL2VicGYtdXRpbHMnXG5pbXBvcnQgbW9kYWxIYW5kbGVyIGZyb20gJy4vbW9kYWwvbW9kYWwtdXRpbHMnXG5cbndpbmRvdy4kLmZuLm1vZGFsSGFuZGxlciA9IG1vZGFsSGFuZGxlclxuXG5pbXBvcnQgJy4vc2VxdWVuY2Vfc3VuYnVyc3QnXG5pbXBvcnQgKiBhcyBlYnBmVXRpbHMgZnJvbSAnLi9lYnBmLXV0aWxzJ1xuXG53aW5kb3cuZWJwZlV0aWxzID0gZWJwZlV0aWxzXG5cbmltcG9ydCBmb3JtYXR0ZXJVdGlscyBmcm9tIFwiLi9mb3JtYXR0ZXItdXRpbHNcIjtcbndpbmRvdy5udG9wRm9ybWF0dGVyVXRpbHMgPSBmb3JtYXR0ZXJVdGlscztcbiIsImV4cG9ydCBmdW5jdGlvbiBtYWtlVW5pcXVlVmFsaWRhdG9yKGl0ZW1zX2Z1bmN0aW9uKSB7XG4gIHJldHVybiBmdW5jdGlvbihmaWVsZCkge1xuICAgIHZhciBjbXBfbmFtZSA9IGZpZWxkLnZhbCgpO1xuICAgIHZhciBjb3VudCA9IDA7XG5cbiAgICAvLyB0aGlzIHdpbGwgYmUgY2hlY2tlZCBzZXBhcmF0ZWx5LCB3aXRoICdyZXF1aXJlZCcgYXJndW1lbnRcbiAgICBpZighIGNtcF9uYW1lKVxuICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICBpdGVtc19mdW5jdGlvbihmaWVsZCkuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBuYW1lID0gJCh0aGlzKS52YWwoKTtcbiAgICAgIGlmIChuYW1lID09IGNtcF9uYW1lKVxuICAgICAgICBjb3VudCA9IGNvdW50ICsgMTtcbiAgICB9KTtcblxuICAgIHJldHVybiBjb3VudCA9PSAxO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtZW1iZXJWYWx1ZVZhbGlkYXRvcihpbnB1dCkge1xuICB2YXIgbWVtYmVyID0gaW5wdXQudmFsKCk7XG4gIGlmIChtZW1iZXIgPT09IFwiXCIpIHJldHVybiB0cnVlO1xuXG4gIHJldHVybiBOdG9wVXRpbHMuaXNfbWFjX2FkZHJlc3MobWVtYmVyKSB8fCBOdG9wVXRpbHMuaXNfbmV0d29ya19tYXNrKG1lbWJlciwgdHJ1ZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlUGFzc3dvcmRQYXR0ZXJuVmFsaWRhdG9yKHBhdHRlcm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHBhc3N3b3JkUGF0dGVyblZhbGlkYXRvcihpbnB1dCkge1xuICAgIC8vIHJlcXVpcmVkIGlzIGNoZWNrZWQgc2VwYXJhdGVseVxuICAgIGlmKCFpbnB1dC52YWwoKSkgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuICQoaW5wdXQpLnZhbCgpLm1hdGNoKHBhdHRlcm4pO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXNzd29yZE1hdGNoVmFsaWRhdG9yKGlucHV0KSB7XG4gIHZhciBvdGhlcl9pbnB1dCA9ICQoaW5wdXQpLmNsb3Nlc3QoXCJmb3JtXCIpLmZpbmQoXCJbZGF0YS1wYXNzd29yZG1hdGNoXVwiKS5ub3QoaW5wdXQpO1xuICBpZighaW5wdXQudmFsKCkgfHwgIW90aGVyX2lucHV0LnZhbCgpKSByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIG90aGVyX2lucHV0LnZhbCgpID09PSBpbnB1dC52YWwoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvb2xuYW1lVmFsaWRhdG9yKGlucHV0KSB7XG4gIC8vIHJlcXVpcmVkIGlzIGNoZWNrZWQgc2VwYXJhdGVseVxuICBpZighaW5wdXQudmFsKCkpIHJldHVybiB0cnVlO1xuICByZXR1cm4gJChpbnB1dCkudmFsKCkubWF0Y2goL15bYS16MC05X10qJC8pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFzc3dvcmRNYXRjaFJlY2hlY2soZm9ybSkge1xuICB2YXIgaXRlbXMgPSAkKGZvcm0pLmZpbmQoXCJbZGF0YS1wYXNzd29yZG1hdGNoXVwiKTtcbiAgdmFyIG5vdF9lbXB0eSA9IDA7XG5cbiAgaXRlbXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICBpZigkKHRoaXMpLnZhbCgpICE9IFwiXCIpIG5vdF9lbXB0eSsrO1xuICB9KTtcblxuICBpZihub3RfZW1wdHkgPT0gaXRlbXMubGVuZ3RoKSBpdGVtcy50cmlnZ2VyKCdpbnB1dCcpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaG9zdE9yTWFjVmFsaWRhdG9yKGlucHV0KSB7XG4gIHZhciBob3N0ID0gaW5wdXQudmFsKCk7XG5cbiAgLyogSGFuZGxlZCBzZXBhcmF0ZWx5ICovXG4gIGlmIChob3N0ID09PSBcIlwiKSByZXR1cm4gdHJ1ZTtcblxuICByZXR1cm4gTnRvcFV0aWxzLmlzX21hY19hZGRyZXNzKGhvc3QpIHx8IE50b3BVdGlscy5pc19nb29kX2lwdjQoaG9zdCkgfHwgTnRvcFV0aWxzLmlzX2dvb2RfaXB2Nihob3N0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlwQWRkcmVzc1ZhbGlkYXRvcihpbnB1dCkge1xuICB2YXIgaG9zdCA9IGlucHV0LnZhbCgpO1xuXG4gIC8qIEhhbmRsZWQgc2VwYXJhdGVseSAqL1xuICBpZiAoaG9zdCA9PT0gXCJcIikgcmV0dXJuIHRydWU7XG5cbiAgcmV0dXJuIE50b3BVdGlscy5pc19nb29kX2lwdjQoaG9zdCkgfHwgTnRvcFV0aWxzLmlzX2dvb2RfaXB2Nihob3N0KTtcbn1cblxudmFyIGZpbHRlcnNfdG9fdmFsaWRhdGUgPSB7fTtcblxuZXhwb3J0IGZ1bmN0aW9uIGJwZlZhbGlkYXRvcihmaWx0ZXJfZmllbGQsIHN5bmMgPSBmYWxzZSkge1xuICB2YXIgZmlsdGVyID0gZmlsdGVyX2ZpZWxkLnZhbCgpO1xuXG4gIGlmIChmaWx0ZXIudHJpbSgpID09PSBcIlwiKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICB2YXIga2V5ID0gZmlsdGVyX2ZpZWxkLmF0dHIoXCJuYW1lXCIpO1xuICB2YXIgdGltZW91dCA9IDI1MDtcblxuICBpZiAoIWZpbHRlcnNfdG9fdmFsaWRhdGVba2V5XSlcbiAgICAgZmlsdGVyc190b192YWxpZGF0ZVtrZXldID0ge2FqYXhfb2JqOm51bGwsIHZhbGlkOnRydWUsIHRpbWVyOm51bGwsIHN1Ym1pdF9yZW1pbmQ6ZmFsc2UsIGxhc3RfdmFsOm51bGx9O1xuICB2YXIgc3RhdHVzID0gZmlsdGVyc190b192YWxpZGF0ZVtrZXldO1xuXG4gIHZhciBzZW5kQWpheCA9IGZ1bmN0aW9uICgpIHtcbiAgICBzdGF0dXMudGltZXIgPSBudWxsO1xuXG4gICAgdmFyIGZpbmFsbHlfY2hlY2sgPSBmdW5jdGlvbiAodmFsaWQpIHtcbiAgICAgIHN0YXR1cy5hamF4X29iaiA9IG51bGw7XG4gICAgICBzdGF0dXMudmFsaWQgPSB2YWxpZDtcbiAgICAgIHN0YXR1cy5sYXN0X3ZhbCA9IGZpbHRlcjtcbiAgICB9XG5cbiAgICBpZiAoc3RhdHVzLmxhc3RfdmFsICE9PSBmaWx0ZXIpIHtcbiAgICAgIGlmIChzdGF0dXMuYWpheF9vYmopXG4gICAgICAgIHN0YXR1cy5hamF4X29iai5hYm9ydCgpO1xuXG4gICAgICBzdGF0dXMuYWpheF9vYmogPSAkLmFqYXgoe1xuICAgICAgICB0eXBlOiBcIkdFVFwiLFxuICAgICAgICB1cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvY2hlY2svZmlsdGVyLmx1YWAsXG4gICAgICAgIGFzeW5jOiAhc3luYyxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIHF1ZXJ5OiBmaWx0ZXIsXG4gICAgICAgIH0sIGVycm9yOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBmaW5hbGx5X2NoZWNrKHN0YXR1cy52YWxpZCk7XG4gICAgICAgIH0sIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICB2YXIgdmFsaWQgPSBkYXRhLnJlc3BvbnNlID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICAgIGZpbmFsbHlfY2hlY2sodmFsaWQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gcG9zc2libHkgcHJvY2VzcyB0aGUgcmVtaW5kZXJcbiAgICAgIGZpbmFsbHlfY2hlY2soc3RhdHVzLnZhbGlkKTtcbiAgICB9XG4gIH07XG5cbiAgaWYgKHN5bmMpIHtcbiAgICBzZW5kQWpheCgpO1xuICB9IGVsc2UgaWYgKHN0YXR1cy5sYXN0X3ZhbCA9PT0gZmlsdGVyKSB7XG4gICAgLy8gSWdub3JpbmdcbiAgfSBlbHNlIHtcbiAgICBpZiAoc3RhdHVzLnRpbWVyKSB7XG4gICAgICBjbGVhclRpbWVvdXQoc3RhdHVzLnRpbWVyKTtcbiAgICAgIHN0YXR1cy5zdWJtaXRfcmVtaW5kID0gZmFsc2U7XG4gICAgfVxuICAgIHN0YXR1cy50aW1lciA9IHNldFRpbWVvdXQoc2VuZEFqYXgsIHRpbWVvdXQpO1xuICB9XG5cbiAgcmV0dXJuIHN0YXR1cy52YWxpZDtcbn1cblxuIiwiaW1wb3J0IHsgbWFrZVVuaXF1ZVZhbGlkYXRvciwgbWVtYmVyVmFsdWVWYWxpZGF0b3IsIG1ha2VQYXNzd29yZFBhdHRlcm5WYWxpZGF0b3IsIHBhc3N3b3JkTWF0Y2hWYWxpZGF0b3IsIHBvb2xuYW1lVmFsaWRhdG9yLCBwYXNzd29yZE1hdGNoUmVjaGVjaywgaG9zdE9yTWFjVmFsaWRhdG9yLCBpcEFkZHJlc3NWYWxpZGF0b3IsIGJwZlZhbGlkYXRvciB9IGZyb20gJy4vbnRvcG5nLXZhbGlkYXRvcnMtdXRpbHMnXG5cbndpbmRvdy5tYWtlVW5pcXVlVmFsaWRhdG9yID0gbWFrZVVuaXF1ZVZhbGlkYXRvclxud2luZG93Lm1lbWJlclZhbHVlVmFsaWRhdG9yID0gbWVtYmVyVmFsdWVWYWxpZGF0b3JcbndpbmRvdy5tYWtlUGFzc3dvcmRQYXR0ZXJuVmFsaWRhdG9yID0gbWFrZVBhc3N3b3JkUGF0dGVyblZhbGlkYXRvclxud2luZG93LnBhc3N3b3JkTWF0Y2hWYWxpZGF0b3IgPSBwYXNzd29yZE1hdGNoVmFsaWRhdG9yXG53aW5kb3cucG9vbG5hbWVWYWxpZGF0b3IgPSBwb29sbmFtZVZhbGlkYXRvclxud2luZG93LnBhc3N3b3JkTWF0Y2hSZWNoZWNrID0gcGFzc3dvcmRNYXRjaFJlY2hlY2tcbndpbmRvdy5ob3N0T3JNYWNWYWxpZGF0b3IgPSBob3N0T3JNYWNWYWxpZGF0b3JcbndpbmRvdy5pcEFkZHJlc3NWYWxpZGF0b3IgPSBpcEFkZHJlc3NWYWxpZGF0b3JcbndpbmRvdy5icGZWYWxpZGF0b3IgPSBicGZWYWxpZGF0b3JcbiIsIi8qKlxuICAgIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgXG4qL1xuXG5leHBvcnQgY29uc3QgbnRvcG5nX3N5bmMgPSBmdW5jdGlvbigpIHtcbiAgICBsZXQgY29tcG9uZW50c19yZWFkeSA9IHt9O1xuICAgIGxldCBzdWJzY3JpYmVycyA9IFtdOyAgICAgICAgXG4gICAgcmV0dXJuIHtcblx0cmVhZHk6IGZ1bmN0aW9uKGNvbXBvbmVudF9uYW1lKSB7XG5cdCAgICBjb21wb25lbnRzX3JlYWR5W2NvbXBvbmVudF9uYW1lXSA9IHRydWU7XG5cdCAgICBzdWJzY3JpYmVycy5maWx0ZXIoKHMpID0+IHMuY29tcG9uZW50X25hbWUgPT0gY29tcG9uZW50X25hbWUpLmZvckVhY2goKHMpID0+IHMucmVzb2x2ZSgpKTtcblx0ICAgIHN1YnNjcmliZXJzID0gc3Vic2NyaWJlcnMuZmlsdGVyKChzKSA9PiBzLmNvbXBvbmVudF9uYW1lICE9IGNvbXBvbmVudF9uYW1lKTtcblx0fSxcblx0b25fcmVhZHk6IGZ1bmN0aW9uKGNvbXBvbmVudF9uYW1lKSB7XG5cdCAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamV2dCkgPT4ge1xuXHRcdGlmIChjb21wb25lbnRzX3JlYWR5W2NvbXBvbmVudF9uYW1lXSkge1xuXHRcdCAgICByZXNvbHZlKCk7XG5cdFx0ICAgIHJldHVybjtcblx0XHR9XG5cdFx0c3Vic2NyaWJlcnMucHVzaCh7cmVzb2x2ZSwgY29tcG9uZW50X25hbWUsIGNvbXBsZXRlZDogZmFsc2V9KTtcblx0ICAgIH0pO1xuXHR9LFxuICAgIH07XG59KCk7XG5cbi8qKlxuKiBVdGlsaXR5IGdsb2JhbHMgZnVuY3Rpb25zLlxuKi9cbmV4cG9ydCBjb25zdCBudG9wbmdfdXRpbGl0eSA9IGZ1bmN0aW9uKCkge1xuICAgIGxldCBnbG9iYWxfaHR0cF9oZWFkZXJzID0ge307XG4gICAgcmV0dXJuIHtcblx0aXNfYXJyYXk6IGZ1bmN0aW9uKGUpIHtcblx0ICAgIHJldHVybiBBcnJheS5pc0FycmF5KGUpO1xuXHR9LFxuXHRpc19vYmplY3Q6IGZ1bmN0aW9uKGUpIHtcblx0ICAgIHJldHVybiB0eXBlb2YgZSA9PT0gJ29iamVjdCdcblx0XHQmJiAhdGhpcy5pc19hcnJheShlKVxuXHRcdCYmIGUgIT09IG51bGw7XG5cdH0sXG5cdC8qKlxuXHQgKiBEZWVwIGNvcHkgb2YgYSBvYmplY3QuXG5cdCAqIEBwYXJhbSB7b2JqZWN0fSBvYmouXG5cdCAqIEByZXR1cm5zIHtvYmplY3R9LlxuXHQgKi9cblx0Y2xvbmU6IGZ1bmN0aW9uKG9iaikge1xuICAgICAgICAgICAgaWYgKG9iaiA9PSBudWxsKSB7IHJldHVybiBudWxsOyB9XG4gICAgICAgICAgICBpZiAodGhpcy5pc19vYmplY3Qob2JqKSkge1xuXHRcdC8qIFRoaXMgZG9lcyB0aGUgZGVlcCBjb3B5IHVzaW5nIGpxdWVyeSBmb3Igb2JqZWN0cyAqL1xuXHRcdHJldHVybiAkLmV4dGVuZCh0cnVlLCB7fSwgb2JqKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvYmopKXtcblx0XHQvKiBUaGlzIGRvZXMgdGhlIGRlZXAgY29weSB1c2luZyBqcXVlcnkgZm9yIG90aGVyIHR5cGVzICovXG5cdFx0bGV0IHJlcyA9IFtdO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0ICAgIGxldCBlbCA9IHRoaXMuY2xvbmUob2JqW2ldKTtcblx0XHQgICAgcmVzLnB1c2goZWwpO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzO1xuICAgICAgICAgICAgfSBlbHNlIHtcblx0XHQvLyByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvYmopKVxuXHRcdHJldHVybiBvYmo7XG5cdCAgICB9XG5cdH0sICAgICAgXG5cdG9iamVjdF90b19hcnJheTogZnVuY3Rpb24ob2JqKSB7XG5cdCAgICBpZiAob2JqID09IG51bGwpIHsgcmV0dXJuIFtdOyB9XG5cdCAgICBsZXQgYXJyYXkgPSBbXTtcblx0ICAgIGZvciAobGV0IGtleSBpbiBvYmopIHtcblx0XHRhcnJheS5wdXNoKG9ialtrZXldKTtcblx0ICAgIH1cblx0ICAgIHJldHVybiBhcnJheTtcblx0fSxcblx0Z2V0X3V0Y19zZWNvbmRzOiBmdW5jdGlvbih1dGNfbXMpIHtcblx0ICAgIGlmICh1dGNfbXMgPT0gbnVsbCkgeyB1dGNfbXMgPSBEYXRlLm5vdygpOyB9XG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyLnBhcnNlSW50KHV0Y19tcyAvIDEwMDApO1xuXHR9LFxuXHRnZXRfdGltZWZyYW1lc19kaWN0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGNvbnN0IG1pbiA9IDYwO1xuICAgICAgICAgICAgbGV0IHRfZGF5ID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgIGxldCB0X3dlZWsgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgbGV0IHRfbW9udGggPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgbGV0IHRfeWVhciA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIFwibWluXCI6IG1pbixcbiAgICAgICAgICAgICAgICBcIjVfbWluXCI6IG1pbiAqIDUsXG4gICAgICAgICAgICAgICAgXCIxMF9taW5cIjogbWluICogMTAsXG4gICAgICAgICAgICAgICAgXCIzMF9taW5cIjogbWluICogMzAsXG4gICAgICAgICAgICAgICAgaG91cjogbWluICogNjAsXG4gICAgICAgICAgICAgICAgXCIyX2hvdXJzXCI6IDIgKiBtaW4gKiA2MCxcbiAgICAgICAgICAgICAgICBcIjZfaG91cnNcIjogNiAqIG1pbiAqIDYwLFxuICAgICAgICAgICAgICAgIFwiMTJfaG91cnNcIjogMTIgKiBtaW4gKiA2MCxcbiAgICAgICAgICAgICAgICBkYXk6IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKERhdGUubm93KCkgLSB0X2RheS5zZXREYXRlKHRfZGF5LmdldERhdGUoKSAtIDEpKSxcbiAgICAgICAgICAgICAgICB3ZWVrOiB0aGlzLmdldF91dGNfc2Vjb25kcyhEYXRlLm5vdygpIC0gdF93ZWVrLnNldERhdGUodF93ZWVrLmdldERhdGUoKSAtIDcpKSxcbiAgICAgICAgICAgICAgICBtb250aDogdGhpcy5nZXRfdXRjX3NlY29uZHMoRGF0ZS5ub3coKSAtIHRfbW9udGguc2V0TW9udGgodF9tb250aC5nZXRNb250aCgpIC0gMSkpLFxuICAgICAgICAgICAgICAgIHllYXI6IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKERhdGUubm93KCkgLSB0X3llYXIuc2V0TW9udGgodF95ZWFyLmdldE1vbnRoKCkgLSAxMikpLFxuICAgICAgICAgICAgfTtcblx0fSxcblx0Ly8gZ2l2ZW4gdmFsaWQgaW50ZXJ2YWwgc3RyaW5nIGdldCB0aW1lIGluIHNlY29uZHNcblx0Z2V0X3RpbWVmcmFtZV9mcm9tX3RpbWVmcmFtZV9pZDogZnVuY3Rpb24gKHRpbWVmcmFtZV9pZCkge1xuICAgICAgICAgICAgbGV0IHRpbWVmcmFtZXNfZGljdCA9IHRoaXMuZ2V0X3RpbWVmcmFtZXNfZGljdCgpOyAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gdGltZWZyYW1lc19kaWN0W2ludGVydmFsX3N0cmluZ10gPT0gbnVsbCA9PiBrZXkgaXMgbm90IHByZXNlbnRcbiAgICAgICAgICAgIGlmICh0aW1lZnJhbWVzX2RpY3RbdGltZWZyYW1lX2lkXSA9PSBudWxsKSB7XG5cdFx0dGhyb3cgYFdyb25nIHRpbWVmcmFtZV9pZCBwYXNzZWQgJHt0aW1lZnJhbWVfaWR9LCB2YWxpZCBpbnRlcnZhbHMgYXJlOiAke09iamVjdC5rZXlzKHRpbWVmcmFtZXNfZGljdCkuam9pbihcIiwgXCIpfWA7XG4gICAgICAgICAgICB9XG5cdCAgICByZXR1cm4gdGltZWZyYW1lc19kaWN0W3RpbWVmcmFtZV9pZF07XG5cdH0sXG5cdHJvdW5kX3RpbWVfYnlfdGltZWZyYW1lX2lkOiBmdW5jdGlvbih0cywgdGltZWZyYW1lX2lkKSB7XG5cdCAgICBjb25zdCB0aW1lZnJhbWUgPSB0aGlzLmdldF90aW1lZnJhbWVfZnJvbV90aW1lZnJhbWVfaWQodGltZWZyYW1lX2lkKTtcblx0ICAgIHJldHVybiB0cyAtICh0cyAlIHRpbWVmcmFtZSk7XG5cdH0sXG5cdC8vIG1ldGhvZCB0byBzZXQgZGVmYXVsdCBlcG9jaCBiZWdpbiB0byAzMF9taW4gYWdvXG5cdHNldF9kZWZhdWx0X3RpbWVfaW50ZXJ2YWw6IGZ1bmN0aW9uICh0aW1lX2ludGVydmFsX2lkPVwiMzBfbWluXCIsIHJvdW5kX3RpbWVmcmFtZV9pZCkge1xuICAgICAgICAgICAgbGV0IGVwb2NoID0ge1xuXHRcdGVwb2NoX2JlZ2luOiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImVwb2NoX2JlZ2luXCIpLFxuXHRcdGVwb2NoX2VuZDogbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJlcG9jaF9lbmRcIiksXG4gICAgICAgICAgICB9O1xuXHQgICAgY29uc3Qgbm93X3MgPSB0aGlzLmdldF91dGNfc2Vjb25kcyhEYXRlLm5vdygpKTtcbiAgICAgICAgICAgIGxldCBzZWNvbmRzX2luX2ludGVydmFsID0gdGhpcy5nZXRfdGltZWZyYW1lX2Zyb21fdGltZWZyYW1lX2lkKHRpbWVfaW50ZXJ2YWxfaWQpO1xuICAgICAgICAgICAgZXBvY2guZXBvY2hfYmVnaW4gPSBub3dfcyAtIHNlY29uZHNfaW5faW50ZXJ2YWw7XG4gICAgICAgICAgICBlcG9jaC5lcG9jaF9lbmQgPSBub3dfcztcbiAgICAgICAgICAgIGlmIChyb3VuZF90aW1lZnJhbWVfaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGVwb2NoLmVwb2NoX2JlZ2luID0gdGhpcy5yb3VuZF90aW1lX2J5X3RpbWVmcmFtZV9pZChlcG9jaC5lcG9jaF9iZWdpbiwgcm91bmRfdGltZWZyYW1lX2lkKTtcbiAgICAgICAgICAgICAgICBlcG9jaC5lcG9jaF9lbmQgPSB0aGlzLnJvdW5kX3RpbWVfYnlfdGltZWZyYW1lX2lkKGVwb2NoLmVwb2NoX2VuZCwgcm91bmRfdGltZWZyYW1lX2lkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcImVwb2NoX2JlZ2luXCIsIGVwb2NoLmVwb2NoX2JlZ2luKTtcbiAgICAgICAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcImVwb2NoX2VuZFwiLCBlcG9jaC5lcG9jaF9lbmQpO1xuXHQgICAgXG4gICAgICAgICAgICByZXR1cm4gZXBvY2g7XG5cdH0sXG5cdC8vc2hvdWxkIHRha2UgYSBzdHJpbmcgYXMgcGFyYW1ldGVyIHRoYXQgcmVwcmVzZW50IHRpbWU6IG1pbiwgNV9taW4sIDMwX21pbiwgaG91ciwgMl9ob3VycywgNl9ob3VycywgMTJfaG91cnMsIGRheSwgd2VlaywgbW9udGgsIHllYXIuIElEIHRpbWVfaW50ZXJ2YWxfaWQgaXMgbnVsbCwgZGVmYXVsdCBtdXN0IGJlIDMwX21pblxuXHQvLyByZXR1cm4gZXBvY2hfaW50ZXJ2YWwgb25seSBpZiBlcG9jaCB1cmwgaXMgc2V0XG5cdGNoZWNrX2FuZF9zZXRfZGVmYXVsdF90aW1lX2ludGVydmFsOiBmdW5jdGlvbiAodGltZV9pbnRlcnZhbF9pZD1cIjMwX21pblwiLCBmX2NvbmRpdGlvbiwgZ2V0X2Vwb2NoPWZhbHNlLCByb3VuZF90aW1lZnJhbWVfaWQpIHtcbiAgICAgICAgICAgIGxldCBlcG9jaCA9IHRoaXMuZ2V0X3VybF9lcG9jaF9pbnRlcnZhbCgpO1xuXG4gICAgICAgICAgICAvLyBpZiB0aW1lX2ludGVydmFsX2lkIGlzIDMwIChkZWZhdWx0KVxuICAgICAgICAgICAgaWYgKGVwb2NoLmVwb2NoX2JlZ2luID09IG51bGwgfHwgZXBvY2guZXBvY2hfZW5kID09IG51bGwgfHwgKGZfY29uZGl0aW9uICE9IG51bGwgJiYgZl9jb25kaXRpb24oZXBvY2gpID09IHRydWUpKSAge1xuXHRcdGVwb2NoID0gdGhpcy5zZXRfZGVmYXVsdF90aW1lX2ludGVydmFsKHRpbWVfaW50ZXJ2YWxfaWQsIHJvdW5kX3RpbWVmcmFtZV9pZCk7XG5cdFx0cmV0dXJuIGVwb2NoO1xuICAgICAgICAgICAgfVxuXHQgICAgaWYgKGdldF9lcG9jaCA9PSB0cnVlKSB7XG5cdFx0cmV0dXJuIGVwb2NoO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIG51bGw7XG5cdH0sXG5cdGdldF91cmxfZXBvY2hfaW50ZXJ2YWw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbGV0IGVwb2NoID0ge1xuXHRcdGVwb2NoX2JlZ2luOiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImVwb2NoX2JlZ2luXCIpLFxuXHRcdGVwb2NoX2VuZDogbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJlcG9jaF9lbmRcIiksXG4gICAgICAgICAgICB9O1xuXHQgICAgcmV0dXJuIGVwb2NoO1xuXHR9LFxuXHRmcm9tX3V0Y19zX3RvX3NlcnZlcl9kYXRlOiBmdW5jdGlvbih1dGNfc2Vjb25kcykge1xuXHQgICAgbGV0IHV0YyA9IHV0Y19zZWNvbmRzICogMTAwMDtcblx0ICAgIGxldCBkX2xvY2FsID0gbmV3IERhdGUodXRjKTtcblx0ICAgIGxldCBsb2NhbF9vZmZzZXQgPSBkX2xvY2FsLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cdCAgICBsZXQgc2VydmVyX29mZnNldCA9IG1vbWVudC50eih1dGMsIG50b3Bfem9uZWluZm8pLl9vZmZzZXQ7XG5cdCAgICBsZXQgb2Zmc2V0X21pbnV0ZXMgPSAgc2VydmVyX29mZnNldCArIGxvY2FsX29mZnNldDtcblx0ICAgIGxldCBvZmZzZXRfbXMgPSBvZmZzZXRfbWludXRlcyAqIDEwMDAgKiA2MDtcblx0ICAgIHZhciBkX3NlcnZlciA9IG5ldyBEYXRlKHV0YyArIG9mZnNldF9tcyk7XG5cdCAgICByZXR1cm4gZF9zZXJ2ZXI7XG5cdH0sXG4gICAgZ2V0X2RhdGVfZm9ybWF0OiBhc3luYyBmdW5jdGlvbihpc19yYW5nZV9waWNrZXIsIGNzcmYsIGh0dHBfcHJlZml4KSB7XG4gICAgICAgIGNvbnN0IHJlc3RfcGFyYW1zID0ge1xuICAgICAgICAgICAgY3NyZjogY3NyZlxuICAgICAgICB9O1xuXG4gICAgICAgIGxldCBkYXRlX2Zvcm1hdF91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L3RpbWVzZXJpZXMvZGF0ZV9mb3JtYXQubHVhYDtcbiAgICAgICAgY29uc3QgdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKGRhdGVfZm9ybWF0X3VybCwge1xuICAgICAgICAgICAgaXNfcmFuZ2VfcGlja2VyOiBpc19yYW5nZV9waWNrZXJcbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHJlc3RfcGFyYW1zKTsgICAgXG4gICAgfSxcblx0ZnJvbV91dGNfdG9fc2VydmVyX2RhdGVfZm9ybWF0OiBmdW5jdGlvbih1dGNfbXMsIGZvcm1hdCkge1xuXHQgICAgaWYgKGZvcm1hdCA9PSBudWxsKSB7IGZvcm1hdCA9IFwiREQvTU1NL1lZWVkgSEg6bW1cIjsgfVxuXHQgICAgbGV0IG0gPSBtb21lbnQudHoodXRjX21zLCBudG9wX3pvbmVpbmZvKTtcblx0ICAgIGxldCB0el9zZXJ2ZXIgPSBtLmZvcm1hdChmb3JtYXQpO1xuXHQgICAgcmV0dXJuIHR6X3NlcnZlcjtcblx0fSxcblx0Y29weV9vYmplY3Rfa2V5czogZnVuY3Rpb24oc291cmNlX29iaiwgZGVzdF9vYmosIHJlY3Vyc2l2ZV9vYmplY3QgPSBmYWxzZSkge1xuXHQgICAgaWYgKHNvdXJjZV9vYmogPT0gbnVsbCkge1xuXHRcdHJldHVybjtcblx0ICAgIH1cblx0ICAgIGZvciAobGV0IGtleSBpbiBzb3VyY2Vfb2JqKSB7XG5cdCAgICBcdGlmIChzb3VyY2Vfb2JqW2tleV0gPT0gbnVsbCkgeyBjb250aW51ZTsgfVxuXHRcdC8qIFNlY3VyaXR5IGNoZWNrIGZvciBQcm90b3R5cGUgcG9sbHV0aW9uIHZ1bG5lcmFiaWxpdHkgKi9cblx0XHRpZiAoa2V5ID09PSBcIl9fcHJvdG9fX1wiIHx8IGtleSA9PT0gXCJjb25zdHJ1Y3RvclwiKSB7IGNvbnRpbnVlOyB9XG5cdCAgICBcdGlmIChyZWN1cnNpdmVfb2JqZWN0ID09IHRydWUgJiYgdGhpcy5pc19vYmplY3Qoc291cmNlX29ialtrZXldKSAmJiB0aGlzLmlzX29iamVjdChkZXN0X29ialtrZXldKSkge1xuXHQgICAgXHQgICAgdGhpcy5jb3B5X29iamVjdF9rZXlzKHNvdXJjZV9vYmpba2V5XSwgZGVzdF9vYmpba2V5XSwgcmVjdXJzaXZlX29iamVjdCk7XG5cdCAgICBcdH0gZWxzZSB7XG5cdCAgICBcdCAgICBkZXN0X29ialtrZXldID0gc291cmNlX29ialtrZXldO1xuXHQgICAgXHR9XG5cdCAgICB9XG5cdH0sXG4gICAgZ2V0X2N2ZV9kZXRhaWxzX3VybChjdmVfaWQsIHNjYW5fdHlwZSkge1xuICAgICAgICAvLyAgSU1QT1JUQU5UOiBUaGUgcmV0cmlldmVkIHZhbHVlIG11c3QgbWF0Y2ggdGhlIHZhbHVlIGluIFxuICAgICAgICAvLyAgc2NyaXB0cy9sdWEvbW9kdWxlcy92dWxuZXJhYmlsaXR5X3NjYW4vY3ZlX3V0aWxzLmx1YSBmb3IgdGhlICdjdmVfdXRpbHMuZ2V0RG9jVVJMJyBmdW5jdGlvbi5cbiAgICAgICAgaWYoc2Nhbl90eXBlID09IFwiY3ZlXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBgaHR0cHM6Ly9udmQubmlzdC5nb3YvdnVsbi9kZXRhaWwvJHtjdmVfaWR9YDtcbiAgICAgICAgfSBlbHNlIGlmKHNjYW5fdHlwZSA9PSBcIm9wZW52YXNcIikge1xuICAgICAgICAgICAgcmV0dXJuIGBodHRwczovL3Z1bG5lcnMuY29tL29wZW52YXMvT1BFTlZBUzoke2N2ZV9pZH1gO1xuICAgICAgICB9XG4gICAgfSxcblx0c2V0X2h0dHBfZ2xvYmFsc19oZWFkZXJzKGhlYWRlcnMpIHtcblx0ICAgIGdsb2JhbF9odHRwX2hlYWRlcnMgPSBoZWFkZXJzO1xuXHR9LFxuXHRodHRwX3Bvc3RfcmVxdWVzdDogYXN5bmMgZnVuY3Rpb24odXJsLCBwYXJhbXMsIHRocm93X2V4Y2VwdGlvbiwgbm90X3Vud3JhcCkge1xuXHQgICAgbGV0IGhlYWRlcnMgPSB7XG5cdFx0J0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuXHQgICAgfTtcblx0ICAgIGlmIChwYXJhbXMuY3NyZiA9PSBudWxsKSB7XG5cdFx0dGhyb3cgYE5VTEwgY3NyZiBpbiAke3VybH0gUE9TVCByZXF1ZXN0LmA7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gdGhpcy5odHRwX3JlcXVlc3QodXJsLCB7IG1ldGhvZDogJ3Bvc3QnLCBoZWFkZXJzLCBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpIH0sIHRocm93X2V4Y2VwdGlvbiwgbm90X3Vud3JhcCk7XG5cdH0sXG5cdGh0dHBfcmVxdWVzdDogYXN5bmMgZnVuY3Rpb24odXJsLCBvcHRpb25zLCB0aHJvd19leGNlcHRpb24sIG5vdF91bndyYXApIHtcblx0ICAgIHRyeSB7XG5cdFx0aWYgKG9wdGlvbnMgPT0gbnVsbCkge1xuXHRcdCAgICBvcHRpb25zID0ge307XG5cdFx0fVxuXHRcdGlmIChvcHRpb25zLmhlYWRlcnMgPT0gbnVsbCkge1xuXHRcdCAgICBvcHRpb25zLmhlYWRlcnMgPSB7fTtcblx0XHR9XG5cdFx0aWYgKG9wdGlvbnMuaGVhZGVycyAhPSBudWxsICYmIGdsb2JhbF9odHRwX2hlYWRlcnMgIT0gbnVsbCkge1xuXHRcdCAgICBvcHRpb25zLmhlYWRlcnMgPSB7XG5cdFx0XHQuLi5vcHRpb25zLmhlYWRlcnMsXG5cdFx0XHQuLi5nbG9iYWxfaHR0cF9oZWFkZXJzLFxuXHRcdCAgICB9O1xuXHRcdH1cblx0XHRsZXQgcmVzID0gYXdhaXQgZmV0Y2godXJsLCBvcHRpb25zKTtcblx0XHRpZiAocmVzLm9rID09PSBmYWxzZSkge1xuXHRcdCAgICBjb25zb2xlLmVycm9yKGBodHRwX3JlcXVlc3QgJHt1cmx9XFxuIG9rID09IGZhbHNlYCk7XG5cdFx0ICAgIGNvbnNvbGUuZXJyb3IocmVzKTtcblx0XHQgICAgcmV0dXJuIG51bGw7XG5cdFx0fVxuXHRcdGxldCBqc29uX3JlcyA9IGF3YWl0IHJlcy5qc29uKCk7XG5cdFx0aWYgKG5vdF91bndyYXAgPT09IHRydWUpIHsgcmV0dXJuIGpzb25fcmVzOyB9XG5cdFx0cmV0dXJuIGpzb25fcmVzLnJzcDtcblx0ICAgIH0gY2F0Y2ggKGVycikge1xuXHRcdGNvbnNvbGUuZXJyb3IoZXJyKTtcblx0XHRjb25zb2xlLmVycm9yKFwiVVJMOiBcIiArIHVybCk7XG5cdFx0aWYgKHRocm93X2V4Y2VwdGlvbiA9PSB0cnVlKSB7IHRocm93IGVycjsgfVxuXHRcdHJldHVybiBudWxsO1xuXHQgICAgfVxuXHR9LFxuXHRkb3dubG9hZF9VUkk6IGZ1bmN0aW9uKHVyaSwgbmFtZSkge1xuXHQgICAgdmFyIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcblx0ICAgIGxpbmsuZG93bmxvYWQgPSBuYW1lO1xuXHQgICAgbGluay5ocmVmID0gdXJpO1xuXHQgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChsaW5rKTtcblx0ICAgIGxpbmsuY2xpY2soKTtcblx0ICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQobGluayk7XG5cdH0sXG5cdGdldF9yYW5kb21fc3RyaW5nOiBmdW5jdGlvbigpIHtcblx0ICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDE2KS5zdWJzdHIoMiwgOCk7XG5cdH0sXG5cdHN0cmluZ19oYXNoX2NvZGU6IGZ1bmN0aW9uKHMpIHtcblx0ICAgIGxldCBoYXNoID0gMCwgaSwgY2hyO1xuXHQgICAgaWYgKHMubGVuZ3RoID09PSAwKSByZXR1cm4gaGFzaDtcblx0ICAgIGZvciAoaSA9IDA7IGkgPCBzLmxlbmd0aDsgaSsrKSB7XG5cdFx0Y2hyICAgPSBzLmNoYXJDb2RlQXQoaSk7XG5cdFx0aGFzaCAgPSAoKGhhc2ggPDwgNSkgLSBoYXNoKSArIGNocjtcblx0XHRoYXNoIHw9IDA7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuXHQgICAgfVxuXHQgICAgcmV0dXJuIGhhc2g7XG5cdH0sXG5cdG1vZDogZnVuY3Rpb24oeCwgeSkge1xuXHQgICAgeCA9IHggJSB5O1xuXHQgICAgaWYgKHggPCAwKSB7IHggKz0geTsgfVxuXHQgICAgcmV0dXJuIHg7XG5cdH1cbiAgICB9XG59KCk7XG5cbi8qKlxuKiBBbGxvd3MgdG8gbWFuYWdlIHRoZSBhcHBsaWNhdGlvbiBnbG9iYWwgc3RhdHVzLlxuKiBUaGUgc3RhdHVzIGlzIGluY2Fwc3VsYXRlZCBpbnRvIHRoZSB1cmwuXG4qL1xuZXhwb3J0IGNvbnN0IG50b3BuZ19zdGF0dXNfbWFuYWdlciA9IGZ1bmN0aW9uKCkge1xuICAgIGxldCBnbG9iYWxfc3RhdHVzID0ge307XG4gICAgLyoqIEB0eXBlIHt7IFtpZDogc3RyaW5nXTogKHN0YXR1czogb2JqZWN0KSA9PiB2b2lkfX0gKi9cbiAgICBsZXQgc3Vic2NyaWJlcnMgPSB7fTsgLy8gZGljdGlvbmFyeSBvZiB7IFtpZDogc3RyaW5nXTogZl9vbl9udG9wbmdfc3RhdHVzX2NoYW5nZSgpIH1cbiAgICBjb25zdCBjbG9uZSA9IChlKSA9PiBudG9wbmdfdXRpbGl0eS5jbG9uZShlKTtcblxuICAgIGNvbnN0IHJlbHBsYWNlX2dsb2JhbF9zdGF0dXMgPSBmdW5jdGlvbihzdGF0dXMpIHtcbiAgICAgICAgZ2xvYmFsX3N0YXR1cyA9IHN0YXR1cztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBOb3RpZmllcyB0aGUgc3RhdHVzIHRvIGFsbCBzdWJzY3JpYmVycyB3aXRoIGlkIGRpZmZlcmVudCBmcm9tIHNraXBfaWQuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHN0YXR1cyBvYmplY3QgdGhhdCByZXByZXNlbnQgdGhlIGFwcGxpY2F0aW9uIHN0YXR1cy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc2tpcF9pZCBpZiAhPSBudWxsIGRvZXNuJ3Qgbm90aWZ5IHRoZSBzdWJzY3JpYmVycyB3aXRoIHNraXBfaWQgaWRlbnRpZmllci5cbiAgICAgKi9cbiAgICBjb25zdCBub3RpZnlfc3Vic2NyaWJlcnMgPSBmdW5jdGlvbihzdGF0dXMsIHNraXBfaWQpIHtcbiAgICAgICAgZm9yIChsZXQgaWQgaW4gc3Vic2NyaWJlcnMpIHtcbiAgICAgICAgICAgIGlmIChpZCA9PSBza2lwX2lkKSB7IGNvbnRpbnVlOyB9XG4gICAgICAgICAgICBsZXQgZl9vbl9jaGFuZ2UgPSBzdWJzY3JpYmVyc1tpZF07XG4gICAgICAgICAgICBmX29uX2NoYW5nZShjbG9uZShzdGF0dXMpKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4ge1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0cyB0aGUgY3VycmVudCBnbG9iYWwgYXBwbGljYXRpb24gc3RhdHVzLlxuICAgICAgICAgKiBAcmV0dXJucyB7b2JqZWN0fVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0X3N0YXR1czogZnVuY3Rpb24obm90X2Nsb25lKSB7XG5cdCAgICBpZiAobm90X2Nsb25lID09IHRydWUpIHtcblx0XHRyZXR1cm4gZ2xvYmFsX3N0YXR1cztcblx0ICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjbG9uZShnbG9iYWxfc3RhdHVzKTtcbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGVfc3Vic2NyaWJlcnM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgY29uc3Qgc3RhdHVzID0gdGhpcy5nZXRfc3RhdHVzKCk7XG4gICAgICAgICAgICBub3RpZnlfc3Vic2NyaWJlcnMoc3RhdHVzKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQWxsb3dzIHRvIHN1YnNjcmliZXJzIGZfb25fY2hhbmdlIGNhbGxiYWNrIG9uIHN0YXR1cyBjaGFuZ2UgZXZlbnQuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBhbiBpZGVudGlmaWVyIG9mIHRoZSBzdWJzY3JpYnRpb24uIFxuICAgICAgICAgKiBAcGFyYW0geyhzdGF0dXM6b2JqZWN0KSA9PiB2b2lkfSBmX29uX2NoYW5nZSBjYWxsYmFjayB0aGF0IHRha2Ugb2JqZWN0IHN0YXR1cyBhcyBwYXJhbS5cbiAgICAgICAgICogQHBhcmFtIHtib29sZWFufSBnZXRfaW5pdF9ub3RpZnkgaWYgdHJ1ZSB0aGUgY2FsbGJhY2sgaXQncyBpbW1lZGlhdGVseSBjYWxsZWQgd2l0aCB0aGUgbGFzdCBzdGF0dXMgYXZhaWxhYmxlLlxuICAgICAgICAgKi9cbiAgICAgICAgb25fc3RhdHVzX2NoYW5nZTogZnVuY3Rpb24oaWQsIGZfb25fY2hhbmdlLCBnZXRfaW5pdF9ub3RpZnkpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXJzW2lkXSA9IGZfb25fY2hhbmdlO1xuICAgICAgICAgICAgaWYgKGdldF9pbml0X25vdGlmeSA9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgbGV0IHN0YXR1cyA9IHRoaXMuZ2V0X3N0YXR1cygpO1xuICAgICAgICAgICAgICAgIGZfb25fY2hhbmdlKGNsb25lKHN0YXR1cykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSYXBsYWNlcyB0aGUgYXBwbGljYXRpb24gc3RhdHVzIGFuZCBub3RpZmllcyB0aGUgbmV3IHN0YXR1cyB0byBhbGwgc3Vic2NyaWJlcnMuXG4gICAgICAgICAqIE5vdGlmaWVzIHRoZSBuZXcgc3RhdHVzIHRvIGFsbCBzdWJzY3JpYmVycy5cbiAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IHN0YXR1cyBvYmplY3QgdGhhdCByZXByZXNlbnQgdGhlIGFwcGxpY2F0aW9uIHN0YXR1cy5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHNraXBfaWQgaWYgIT0gbnVsbCBkb2Vzbid0IG5vdGlmeSB0aGUgc3Vic2NyaWJlcnMgd2l0aCBza2lwX2lkIGlkZW50aWZpZXIuXG4gICAgICAgICAqL1xuICAgICAgICByZXBsYWNlX3N0YXR1czogZnVuY3Rpb24oc3RhdHVzLCBza2lwX2lkKSB7XG4gICAgICAgICAgICByZWxwbGFjZV9nbG9iYWxfc3RhdHVzKHN0YXR1cyk7XG4gICAgICAgICAgICBub3RpZnlfc3Vic2NyaWJlcnMoc3RhdHVzLCBza2lwX2lkKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQWRkcyBvciByZXBsYWNlcyBhbGwgb2JqIHBhcmFtIGtleXMgdG8gdGhlIGFwcGxpY2F0aW9uIHN0YXR1cy5cbiAgICAgICAgICogTm90aWZpZXMgdGhlIG5ldyBzdGF0dXMgdG8gYWxsIHN1YnNjcmliZXJzLlxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqIG9iamVjdCB0byBhZGQgb3IgZWRpdCB0byB0aGUgYXBwbGljYXRpb24gc3RhdHVzLiBcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHNraXBfaWQgaWYgIT0gbnVsbCBkb2Vzbid0IG5vdGlmeSB0aGUgc3Vic2NyaWJlcnMgd2l0aCBza2lwX2lkIGlkZW50aWZpZXIuXG4gICAgICAgICAqL1xuICAgICAgICBhZGRfb2JqX3RvX3N0YXR1czogZnVuY3Rpb24ob2JqLCBza2lwX2lkKSB7XG4gICAgICAgICAgICBsZXQgbmV3X3N0YXR1cyA9IHRoaXMuZ2V0X3N0YXR1cygpO1xuICAgICAgICAgICAgbnRvcG5nX3V0aWxpdHkuY29weV9vYmplY3Rfa2V5cyhvYmosIG5ld19zdGF0dXMpO1xuICAgICAgICAgICAgdGhpcy5yZXBsYWNlX3N0YXR1cyhuZXdfc3RhdHVzLCBza2lwX2lkKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQWRkcyBvciByZXBsYWNlcyB0aGUgdmFsdWUga2V5IHRvIHRoZSBhcHBsaWNhdGlvbiBzdGF0dXMuXG4gICAgICAgICAqIE5vdGlmaWVzIHRoZSBuZXcgc3RhdHVzIHRvIGFsbCBzdWJzY3JpYmVycy5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBrZXkgdG8gYWRkcyBvciByZXBsYWNlcy5cbiAgICAgICAgICogQHBhcmFtIHthbnl9IHZhbHVlIHZhbHVlIHRvIGFkZHMgb3IgcmVwbGFjZXMuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gc2tpcF9pZCBpZiAhPSBudWxsIGRvZXNuJ3Qgbm90aWZ5IHRoZSBzdWJzY3JpYmVycyB3aXRoIHNraXBfaWQgaWRlbnRpZmllci5cbiAgICAgICAgICovXG4gICAgICAgIGFkZF92YWx1ZV90b19zdGF0dXM6IGZ1bmN0aW9uKGtleSwgdmFsdWUsIHNraXBfaWQpIHtcbiAgICAgICAgICAgIGxldCBuZXdfc3RhdHVzID0gdGhpcy5nZXRfc3RhdHVzKCk7XG4gICAgICAgICAgICBuZXdfc3RhdHVzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIC8vIC8qIFRoaXMgaXMgbmVlZGVkIHRvIGhhdmUgbXVsaXBsZSBmaWx0ZXJzIGZvciB0aGUgc2FtZSBrZXkgKi9cbiAgICAgICAgICAgIC8vIChuZXdfc3RhdHVzW2tleV0gJiYgbmV3X3N0YXR1c1trZXldLnNlYXJjaCh2YWx1ZSkgPT09IC0xKSA/IG5ld19zdGF0dXNba2V5XSArPSBcIixcIiArIHZhbHVlIDogbmV3X3N0YXR1c1trZXldID0gdmFsdWVcbiAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMucmVwbGFjZV9zdGF0dXMobmV3X3N0YXR1cywgc2tpcF9pZCk7XG4gICAgICAgIH0sXG4gICAgfVxufSgpO1xuXG5jb25zdCBudG9wbmdfcGFyYW1zX3VybF9zZXJpYWxpemVyID0ge1xuICAvLyBmaWx0ZXJzOiBmdW5jdGlvbihrZXksIGZpbHRlcnMpIHtcbiAgLy8gXHRpZiAoZmlsdGVycyA9PSBudWxsKSB7IHJldHVybiBcIlwiOyB9XG4gIC8vIFx0bGV0IGZpbHRlcnNfZ3JvdXBzID0ge307XG4gIC8vIFx0ZmlsdGVycy5mb3JFYWNoKChmKSA9PiB7XG4gIC8vIFx0ICAgIGxldCBncm91cCA9IGZpbHRlcnNfZ3JvdXBzW2YuaWRdO1xuICAvLyBcdCAgICBpZiAoZ3JvdXAgPT0gbnVsbCkge1xuICAvLyBcdFx0Z3JvdXAgPSBbXTtcbiAgLy8gXHRcdGZpbHRlcnNfZ3JvdXBzW2YuaWRdID0gZ3JvdXA7XG4gIC8vIFx0ICAgIH1cbiAgLy8gXHQgICAgZ3JvdXAucHVzaChmKTtcbiAgLy8gXHR9KTtcbiAgLy8gXHRsZXQgdXJsX3BhcmFtc19hcnJheSA9IFtdO1xuICAvLyBcdGZvciAobGV0IGZfaWQgaW4gZmlsdGVyc19ncm91cHMpIHtcbiAgLy8gXHQgICAgbGV0IGdyb3VwID0gZmlsdGVyc19ncm91cHNbZl9pZF07XG4gIC8vIFx0ICAgIGxldCB1cmxfdmFsdWVzID0gZ3JvdXAuZmlsdGVyKChmKSA9PiBmLnZhbHVlICE9IG51bGwgJiYgZi5vcGVyYXRvciAhPSBudWxsICYmIGYub3BlcmF0b3IgIT0gXCJcIikubWFwKChmKSA9PiBgJHtmLnZhbHVlfTske2Yub3BlcmF0b3J9YCkuam9pbihcIixcIik7XG4gIC8vIFx0ICAgIGxldCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLnNlcmlhbGl6ZV9wYXJhbShmX2lkLCB1cmxfdmFsdWVzKTtcbiAgLy8gXHQgICAgdXJsX3BhcmFtc19hcnJheS5wdXNoKHVybF9wYXJhbXMpO1xuICAvLyBcdH1cbiAgLy8gXHRyZXR1cm4gdXJsX3BhcmFtc19hcnJheS5qb2luKFwiJlwiKTtcbiAgLy8gfSxcbn07XG5cbmV4cG9ydCBjb25zdCBudG9wbmdfdXJsX21hbmFnZXIgPSBmdW5jdGlvbigpIHtcbiAgICAvKiogQHR5cGUge3sgW2tleTogc3RyaW5nXTogKG9iajogYW55KSA9PiBzdHJpbmd9fSAqL1xuICAgIGxldCBjdXN0b21fcGFyYW1zX3NlcmlhbGl6ZXIgPSB7fTtcbiAgICBudG9wbmdfdXRpbGl0eS5jb3B5X29iamVjdF9rZXlzKG50b3BuZ19wYXJhbXNfdXJsX3NlcmlhbGl6ZXIsIGN1c3RvbV9wYXJhbXNfc2VyaWFsaXplcik7XG4gIFxuICAgIHJldHVybiB7XG5cbiAgICAgICAgZ2V0X3VybF9wYXJhbXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5zZWFyY2guc3Vic3RyaW5nKDEpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldF91cmxfc2VhcmNoX3BhcmFtczogZnVuY3Rpb24odXJsKSB7XG4gICAgICAgICAgICBpZiAodXJsID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB1cmwgPSB0aGlzLmdldF91cmxfcGFyYW1zKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBmb3IoY29uc3QgW2tleSwgdmFsdWVdIG9mIGVudHJpZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHVybF9wYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHVybCk7XG4gICAgICAgICAgICByZXR1cm4gdXJsX3BhcmFtcztcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRfdXJsX2VudHJpZXM6IGZ1bmN0aW9uKHVybCkge1xuICAgICAgICAgICAgY29uc3QgdXJsX3BhcmFtcyA9IHRoaXMuZ2V0X3VybF9zZWFyY2hfcGFyYW1zKHVybCk7XG4gICAgICAgICAgICBjb25zdCBlbnRyaWVzID0gdXJsX3BhcmFtcy5lbnRyaWVzKCk7XG4gICAgICAgICAgICByZXR1cm4gZW50cmllcztcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRfdXJsX2VudHJ5OiBmdW5jdGlvbihwYXJhbV9uYW1lLCB1cmwpIHtcbiAgICAgICAgICAgIGxldCBlbnRyaWVzID0gdGhpcy5nZXRfdXJsX2VudHJpZXModXJsKTtcbiAgICAgICAgICAgIGZvcihjb25zdCBba2V5LCB2YWx1ZV0gb2YgZW50cmllcykge1xuICAgICAgICAgICAgICAgIGlmIChrZXkgPT0gcGFyYW1fbmFtZSkgeyByZXR1cm4gdmFsdWU7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldF91cmxfb2JqZWN0OiBmdW5jdGlvbih1cmwpIHtcbiAgICAgICAgICAgIGxldCBlbnRyaWVzID0gdGhpcy5nZXRfdXJsX2VudHJpZXModXJsKTtcbiAgICAgICAgICAgIGxldCBvYmogPSB7fTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIGVudHJpZXMpIHtcbiAgICAgICAgICAgICAgICBvYmpba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgfSxcblxuICAgICAgICBvcGVuX25ld193aW5kb3c6IGZ1bmN0aW9uKHVybCkge1xuICAgICAgICAgICAgaWYgKHVybCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdXJsID0gd2luZG93LmxvY2F0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2luZG93Lm9wZW4odXJsKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZWxvYWRfdXJsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgICAgfSxcblxuXHRnb190b191cmw6IGZ1bmN0aW9uKHVybCkge1xuXHQgICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKHt9LCAnJywgd2luZG93LmxvY2F0aW9uKTtcblx0ICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHVybCk7XG5cdH0sXG5cbiAgICAgICAgcmVwbGFjZV91cmw6IGZ1bmN0aW9uKHVybF9wYXJhbXMpIHtcbiAgICAgICAgICAgIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSh7fSwgbnVsbCwgYD8ke3VybF9wYXJhbXN9YCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVwbGFjZV91cmxfYW5kX3JlbG9hZDogZnVuY3Rpb24odXJsX3BhcmFtcykge1xuICAgICAgICAgICAgdGhpcy5yZXBsYWNlX3VybCh1cmxfcGFyYW1zKTtcbiAgICAgICAgICAgIHRoaXMucmVsb2FkX3VybCgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNlcmlhbGl6ZV9wYXJhbTogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IFwiXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYCR7a2V5fT0ke2VuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSl9YDtcbiAgICAgICAgfSxcdFxuXG4gICAgICAgIHNldF9jdXN0b21fa2V5X3NlcmlhbGl6ZXI6IGZ1bmN0aW9uKGtleSwgZl9nZXRfdXJsX3BhcmFtKSB7XG4gICAgICAgICAgICBjdXN0b21fcGFyYW1zX3NlcmlhbGl6ZXJba2V5XSA9IGZfZ2V0X3VybF9wYXJhbTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29udmVydCBqcyBvYmplY3QgaW50byBhIHN0cmluZyB0aGF0IHJlcHJlc2VudCB1cmwgcGFyYW1zLlxuICAgICAgICAgKiBVc2VzIGN1c3RvbSBzZXJpYWxpemVyIGlmIHNldC5cbiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IG9iai5cbiAgICAgICAgICogQHJldHVybnMge3N0cmluZ30uXG4gICAgICAgICAqL1xuICAgICAgICBvYmpfdG9fdXJsX3BhcmFtczogZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgICAgICBsZXQgcGFyYW1zID0gW107XG4gICAgICAgICAgICBjb25zdCBkZWZhdWx0X3NlcmlhbGl6ZXIgPSB0aGlzLnNlcmlhbGl6ZV9wYXJhbTtcbiAgICAgICAgICAgIGZvciAobGV0IGtleSBpbiBvYmopIHtcbiAgICAgICAgICAgICAgICBsZXQgc2VyaWFsaXplciA9IGN1c3RvbV9wYXJhbXNfc2VyaWFsaXplcltrZXldO1xuICAgICAgICAgICAgICAgIGlmIChzZXJpYWxpemVyID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VyaWFsaXplciA9IGRlZmF1bHRfc2VyaWFsaXplcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IHBhcmFtID0gc2VyaWFsaXplcihrZXksIG9ialtrZXldKTtcbiAgICAgICAgICAgICAgICBwYXJhbXMucHVzaChwYXJhbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgdXJsX3BhcmFtcyA9IHBhcmFtcy5qb2luKFwiJlwiKTtcbiAgICAgICAgICAgIHJldHVybiB1cmxfcGFyYW1zO1xuICAgICAgICB9LFxuXG4gICAgICAgIGRlbGV0ZV9wYXJhbXM6IGZ1bmN0aW9uKHBhcmFtc19rZXkpIHtcbiAgICAgICAgICAgIGxldCBzZWFyY2hfcGFyYW1zID0gdGhpcy5nZXRfdXJsX3NlYXJjaF9wYXJhbXMoKTtcbiAgICAgICAgICAgIHBhcmFtc19rZXkuZm9yRWFjaCgocCkgPT4ge1xuICAgICAgICAgICAgICAgIHNlYXJjaF9wYXJhbXMuZGVsZXRlKHApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLnJlcGxhY2VfdXJsKHNlYXJjaF9wYXJhbXMudG9TdHJpbmcoKSk7XHQgICAgXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGVsZXRlX2tleV9mcm9tX3VybDogZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICBsZXQgc2VhcmNoX3BhcmFtcyA9IHRoaXMuZ2V0X3VybF9zZWFyY2hfcGFyYW1zKCk7XG4gICAgICAgICAgICBzZWFyY2hfcGFyYW1zLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgdGhpcy5yZXBsYWNlX3VybChzZWFyY2hfcGFyYW1zLnRvU3RyaW5nKCkpO1x0ICAgIFxuICAgICAgICB9LFxuXG4gICAgICAgIHNldF9rZXlfdG9fdXJsOiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCkgeyB2YWx1ZSA9IFwiXCI7IH1cdCAgXG4gICAgICAgICAgICBsZXQgc2VhcmNoX3BhcmFtcyA9IHRoaXMuZ2V0X3VybF9zZWFyY2hfcGFyYW1zKCk7XG4gICAgICAgICAgICBzZWFyY2hfcGFyYW1zLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMucmVwbGFjZV91cmwoc2VhcmNoX3BhcmFtcy50b1N0cmluZygpKTtcbiAgICAgICAgfSxcblxuICAgICAgICBhZGRfb2JqX3RvX3VybDogZnVuY3Rpb24odXJsX3BhcmFtc19vYmosIHVybCkge1xuICAgICAgICAgICAgbGV0IG5ld191cmxfcGFyYW1zID0gdGhpcy5vYmpfdG9fdXJsX3BhcmFtcyh1cmxfcGFyYW1zX29iaik7XG4gICAgICAgICAgICBsZXQgc2VhcmNoX3BhcmFtcyA9IHRoaXMuZ2V0X3VybF9zZWFyY2hfcGFyYW1zKHVybCk7XG4gICAgICAgICAgICBsZXQgbmV3X2VudHJpZXMgPSB0aGlzLmdldF91cmxfZW50cmllcyhuZXdfdXJsX3BhcmFtcyk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBuZXdfZW50cmllcykge1xuICAgICAgICBcdHNlYXJjaF9wYXJhbXMuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IG5ld191cmwgPSBzZWFyY2hfcGFyYW1zLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICBpZiAodXJsICE9IG51bGwpIHsgcmV0dXJuIG5ld191cmw7IH1cbiAgICAgICAgICAgIHRoaXMucmVwbGFjZV91cmwobmV3X3VybCk7XG4gICAgICAgIH0sXG4gICAgfVxufSgpO1xuXG4vLyBleHBvcnQgY29uc3QgbnRvcG5nX3BhcmFtc19tYW5hZ2VyID0gZnVuY3Rpb24oKSB7XG4vLyAgICAgY29uc3QgbmV3ID0gZnVuY3Rpb24ocGFyYW1zX2luX3VybCkge1xuLy8gICAgIH1cbi8vICAgICByZXR1cm4ge1xuLy8gICAgIH1cbi8vIH1cblxuLyoqXG4qIE9iamVjdCB0aGF0IHJlcHJlc2VudHMgYSBsaXN0IG9mIHByZWZlZGVmaW5lZCBldmVudHMgdGhhdCByZXByZXNlbnQgdGhlIHN0YXR1cy5cbiovXG5leHBvcnQgY29uc3QgbnRvcG5nX2V2ZW50cyA9IHtcbiAgRVBPQ0hfQ0hBTkdFOiBcImVwb2NoX2NoYW5nZVwiLCAvLyB7IGVwb2NoX2JlZ2luOiBudW1iZXIsIGVwb2NoX2VuZDogbnVtYmVyIH1cbiAgRklMVEVSU19DSEFOR0U6IFwiZmlsdGVyc19jaGFuZ2VcIiwgLy8ge2ZpbHRlcnM6IHtpZDogc3RyaW5nLCBvcGVyYXRvcjogc3RyaW5nLCB2YWx1ZTogc3RyaW5nfVtdIH1cbn07XG5cbmNvbnN0IG50b3BuZ19ldmVudHNfY29tcGFyZSA9IHtcbiAgRVBPQ0hfQ0hBTkdFOiBmdW5jdGlvbihuZXdfc3RhdHVzLCBvbGRfc3RhdHVzKSB7XG5yZXR1cm4gbmV3X3N0YXR1cy5lcG9jaF9iZWdpbiAhPSBvbGRfc3RhdHVzLmVwb2NoX2JlZ2luXG4gICAgfHwgbmV3X3N0YXR1cy5lcG9jaF9lbmQgIT0gb2xkX3N0YXR1cy5lcG9jaF9lbmQ7XG4gIH0sXG4gIEZJTFRFUlNfQ0hBTkdFOiBmdW5jdGlvbihuZXdfc3RhdHVzLCBvbGRfc3RhdHVzKSB7XHRcbnJldHVybiAobmV3X3N0YXR1cy5maWx0ZXJzID09IG51bGwgJiYgb2xkX3N0YXR1cy5maWx0ZXJzICE9IG51bGwpXG4gICAgfHwgKG5ld19zdGF0dXMuZmlsdGVycyAhPSBudWxsICYmIG9sZF9zdGF0dXMuZmlsdGVycyA9PSBudWxsKVxuICAgIHx8IChuZXdfc3RhdHVzLmZpbHRlcnMgIT0gbnVsbCAmJiBvbGRfc3RhdHVzLmZpbHRlcnMgIT0gbnVsbCAmJlxuICAoXG4gICAgICAobmV3X3N0YXR1cy5maWx0ZXJzLmxlbmd0aCAhPSBvbGRfc3RhdHVzLmZpbHRlcnMubGVuZ3RoKVxuICAgIHx8IChuZXdfc3RhdHVzLmZpbHRlcnMuc29tZSgoZl9uZXcpID0+IG9sZF9zdGF0dXMuZmlsdGVycy5maW5kKChmX29sZCkgPT4gZl9vbGQuaWQgPT0gZl9uZXcuaWQpID09IG51bGwpKVxuICApXG4gICAgICAgKTtcbiAgfSxcbn07XG5cbi8qKlxuKiBPYmplY3QgdGhhdCByZXByZXNlbnRzIGEgbGlzdCBvZiBwcmVmZWRlZmluZWQgY3VzdG9tIGV2ZW50cy5cbiovXG5leHBvcnQgY29uc3QgbnRvcG5nX2N1c3RvbV9ldmVudHMgPSB7XG4gIFNIT1dfTU9EQUxfRklMVEVSUzogXCJzaG93X21vZGFsX2ZpbHRlcnNcIiwgLy8ge2lkOiBzdHJpbmcsIG9wZXJhdG9yOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmd9XG4gIE1PREFMX0ZJTFRFUlNfQVBQTFk6IFwibW9kYWxfZmlsdGVyc19hcHBseVwiLCAvLyB7aWQ6IHN0cmluZywgbGFiZWw6IHN0cmluZywgb3BlcmF0b3I6IHN0cmluZywgdmFsdWU6IHN0cmluZywgdmFsdWVfbGFiZWw6IHN0cmluZ31cbiAgU0hPV19HTE9CQUxfQUxFUlRfSU5GTzogXCJzaG93X2dsb2JhbF9hbGVydF9pbmZvXCIsIC8vIGh0bWxfdGV4dDogc3RyaW5nXG4gIFZJU19EQVRBX0xPQURFRDogXCJ2aXNfZGF0YV9sb2FkZWRcIiwgXG4gIENIQU5HRV9QQUdFX1RJVExFOiBcImNoYW5nZV9wYWdlX3RpdGxlXCIsIFxuICAgIERBVEFUQUJMRV9MT0FERUQ6IFwiZGF0YXRhYmxlX2xvYWRlZFwiLFxuICAgIEdFVF9JTlRFUkZBQ0VfRkFUQTogXCJnZXRfaW50ZXJmYWNlX2RhdGFcIiwgLy8gb2JqZWN0IHJldHVybmVkIGJ5IC9sdWEvcmVzdC92Mi9nZXQvaW50ZXJmYWNlL2RhdGEubHVhXG4gICAgQ09NUE9ORU5UX0VQT0NIX0lOVEVSVkFMX0NIQU5HRTogXCJjb21wb25lbnRfZXBvY2hfaW50ZXJ2YWxfY2hhbmdlXCIsIC8vIHsgZXBvY2hfYmVnaW46IG51bWJlciwgZXBvY2hfZW5kOiBudW1iZXIgfVxufTtcblxuXG4vKipcbiogQSBnbG9iYWwgZXZlbnRzIHNlcnZpY2UgdGhhdCBhbGxvd3MgdG8gbWFuYWdlIHRoZSBhcHBsaWNhdGlvbiBnbG9iYWwgc3RhdHVzLlxuKiBUaGUgc3RhdHVzIGlzIGluY2Fwc3VsYXRlZCBpbnRvIHRoZSB1cmwuXG4qL1xuZXhwb3J0IGNvbnN0IG50b3BuZ19ldmVudHNfbWFuYWdlciA9IGZ1bmN0aW9uKCkge1xuICBjb25zdCBldmVudHNfbWFuYWdlcl9pZCA9IFwiZXZlbnRzX21hbmFnZXJcIjtcbiAgbGV0IHN0YXR1cyA9IHt9O1xuXG4gIC8qKiBAdHlwZSB7eyBbZXZlbnRfbmFtZTogc3RyaW5nXTogeyBbaWQ6IHN0cmluZ106IChzdGF0dXM6IG9iamVjdCkgPT4gdm9pZH19fSAqL1xuICBsZXQgZXZlbnRzX3N1YnNjcmliZXJzID0ge307IC8vIGRpY3Rpb25hcnkgb2YgeyBbZXZlbnRfbmFtZTogc3RyaW5nXTogeyBbaWQ6IHN0cmluZ106IGZfb25fZXZlbnQgfVxuXG4gICAgY29uc3QgY2xvbmUgPSAoZSkgPT4gbnRvcG5nX3V0aWxpdHkuY2xvbmUoZSk7XG5cbiAgLyoqXG4gICAqIE5vdGlmaWVzIHRoZSBzdGF0dXMgdG8gYWxsIHN1YnNjcmliZXJzIHdpdGggaWQgZGlmZmVyZW50IGZyb20gc2tpcF9pZC5cbiAgICogQHBhcmFtIHt7IFtpZDogc3RyaW5nXTogKHN0YXR1czogb2JqZWN0KSA9PiB2b2lkfX0gc3Vic2NyaWJlcnMgZGljdGlvbmFyeSBvZiBpZCA9PiBmX29uX2V2ZW50KCkuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBzdGF0dXMgb2JqZWN0IHRoYXQgcmVwcmVzZW50IHRoZSBhcHBsaWNhdGlvbiBzdGF0dXMuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBza2lwX2lkIGlmICE9IG51bGwgZG9lc24ndCBub3RpZnkgdGhlIHN1YnNjcmliZXJzIHdpdGggc2tpcF9pZCBpZGVudGlmaWVyLlxuICAgKi9cbiAgY29uc3Qgbm90aWZ5X3N1YnNjcmliZXJzID0gZnVuY3Rpb24oc3Vic2NyaWJlcnMsIHN0YXR1cywgc2tpcF9pZCkge1xuICAgICAgZm9yIChsZXQgaWQgaW4gc3Vic2NyaWJlcnMpIHtcbiAgICAgICAgICBpZiAoaWQgPT0gc2tpcF9pZCkgeyBjb250aW51ZTsgfVxuICAgICAgICAgIGxldCBmX29uX2NoYW5nZSA9IHN1YnNjcmliZXJzW2lkXTtcbiAgICAgICAgICBmX29uX2NoYW5nZShjbG9uZShzdGF0dXMpKTtcbiAgICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQSBjYWxsYmFjayB0aGF0IGRpc3BhdGNoZXMgZWFjaCBldmVudCB0byBhbGwgc3Vic2NyaWJlcnMuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuZXdfc3RhdHVzIFxuICAgKi9cbiAgY29uc3Qgb25fc3RhdHVzX2NoYW5nZSA9IGZ1bmN0aW9uKG5ld19zdGF0dXMpIHtcbmZvciAobGV0IGV2ZW50X25hbWUgaW4gbnRvcG5nX2V2ZW50cykge1xuICAgIGxldCBmX2NvbXBhcmUgPSBudG9wbmdfZXZlbnRzX2NvbXBhcmVbZXZlbnRfbmFtZV07XG4gICAgaWYgKGZfY29tcGFyZShuZXdfc3RhdHVzLCBzdGF0dXMpID09IHRydWUpIHtcbiAgbGV0IHN1YnNjcmliZXJzID0gZXZlbnRzX3N1YnNjcmliZXJzW2V2ZW50X25hbWVdO1xuICBub3RpZnlfc3Vic2NyaWJlcnMoc3Vic2NyaWJlcnMsIG5ld19zdGF0dXMpO1xuICAgIH1cbn1cblxuICAgICAgc3RhdHVzID0gbmV3X3N0YXR1cztcbiAgfTtcblxuICAgIGNvbnN0IGdldF9ldmVudF9mb3Jfc2luZ2xlX2Rlc3QgPSAoZXZlbnQsIGRlc3RfaWQpID0+IHtcblx0cmV0dXJuIGAke2V2ZW50fV8ke2Rlc3RfaWR9YDtcbiAgICB9O1xuXG4gIG50b3BuZ19zdGF0dXNfbWFuYWdlci5vbl9zdGF0dXNfY2hhbmdlKGV2ZW50c19tYW5hZ2VyX2lkLCBvbl9zdGF0dXNfY2hhbmdlLCB0cnVlKTtcblxuICAgIGNvbnN0IGVtaXQgPSBmdW5jdGlvbihldmVudCwgcGFyYW1zLCBza2lwX2lkLCBkZXN0X2lkKSB7XG5cdGlmIChkZXN0X2lkICE9IG51bGwpIHtcblx0ICAgIGV2ZW50ID0gZ2V0X2V2ZW50X2Zvcl9zaW5nbGVfZGVzdChldmVudCwgZGVzdF9pZCk7XG5cdH1cblx0bGV0IHN1YnNjcmliZXJzID0gZXZlbnRzX3N1YnNjcmliZXJzW2V2ZW50XTtcblx0aWYgKHN1YnNjcmliZXJzID09IG51bGwpIHsgcmV0dXJuOyB9XG5cdG5vdGlmeV9zdWJzY3JpYmVycyhzdWJzY3JpYmVycywgcGFyYW1zLCBza2lwX2lkKTtcbiAgICB9O1xuXG4gICAgY29uc3Qgb25fZXZlbnQgPSBmdW5jdGlvbihpZCwgZXZlbnQsIGZfb25fZXZlbnQsIGdldF9pbml0X25vdGlmeSwgaXNfc2luZ2xlX2Rlc3RfZXZlbnQpIHtcblx0aWYgKGlzX3NpbmdsZV9kZXN0X2V2ZW50ID09IHRydWUpIHtcblx0ICAgIGV2ZW50ID0gZ2V0X2V2ZW50X2Zvcl9zaW5nbGVfZGVzdChldmVudCwgaWQpO1xuXHR9XG5cdGlmIChldmVudHNfc3Vic2NyaWJlcnNbZXZlbnRdID09IG51bGwpIHtcbiAgICAgICAgICAgIGV2ZW50c19zdWJzY3JpYmVyc1tldmVudF0gPSB7fTsgICAgICAgIFxuXHR9XG5cdGlmIChnZXRfaW5pdF9ub3RpZnkgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgbGV0IHN0YXR1cyA9IG50b3BuZ19zdGF0dXNfbWFuYWdlci5nZXRfc3RhdHVzKCk7ICAgICAgICBcbiAgICAgICAgICAgIGZfb25fZXZlbnQoY2xvbmUoc3RhdHVzKSk7XG5cdH1cblx0ZXZlbnRzX3N1YnNjcmliZXJzW2V2ZW50XVtpZF0gPSBmX29uX2V2ZW50O1xuICAgIH07XG5cbiAgcmV0dXJuIHtcbiAgICAgIGVtaXRfY3VzdG9tX2V2ZW50OiBmdW5jdGlvbihldmVudCwgcGFyYW1zLCBkZXN0X2lkKSB7XG5cdCAgZW1pdChldmVudCwgcGFyYW1zLCBudWxsLCBkZXN0X2lkKTtcbiAgICAgIH0sXG4gICAgICBvbl9jdXN0b21fZXZlbnQ6IGZ1bmN0aW9uKGlkLCBldmVudCwgZl9vbl9ldmVudCwgaXNfc2luZ2xlX2Rlc3RfZXZlbnQpIHtcblx0ICBvbl9ldmVudChpZCwgZXZlbnQsIGZfb25fZXZlbnQsIG51bGwsIGlzX3NpbmdsZV9kZXN0X2V2ZW50KTtcbiAgICAgIH0sXG4gICAgICAvKipcbiAgICAgICAqIENoYW5nZXMgdGhlIGFwcGxpY2F0aW9uIHN0YXR1cyBhbmQgZW1pdHMgdGhlIG5ldyBzdGF0dXMgdG8gYWxsIHN1YmNyaWJlcnMgcmVnaXN0ZXJlZCB0byB0aGUgZXZlbnQuIFxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50IGV2ZW50IG5hbWUuXG4gICAgICAgKiBAcGFyYW0ge29iamVjdH0gbmV3X3N0YXR1cyBvYmplY3QgdG8gYWRkIG9yIGVkaXQgdG8gdGhlIGFwcGxpY2F0aW9uIHN0YXR1cy5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBza2lwX2lkIGlmICE9IG51bGwgZG9lc24ndCBub3RpZnkgdGhlIHN1YnNjcmliZXJzIHdpdGggc2tpcF9pZCBpZGVudGlmaWVyLlxuICAgICAgICovXG4gICAgICBlbWl0X2V2ZW50OiBmdW5jdGlvbihldmVudCwgbmV3X3N0YXR1cywgc2tpcF9pZCkge1xuICAgIGVtaXQoZXZlbnQsIG5ld19zdGF0dXMsIHNraXBfaWQpXG4gICAgICAgICAgbnRvcG5nX3N0YXR1c19tYW5hZ2VyLmFkZF9vYmpfdG9fc3RhdHVzKG5ld19zdGF0dXMsIGV2ZW50c19tYW5hZ2VyX2lkKTtcbiAgICAgIH0sXG4gICAgICAvKipcbiAgICAgICAqIEFsbG93cyB0byBzdWJzY3JpYmVycyBmX29uX2V2ZW50IGNhbGxiYWNrIG9uIHN0YXR1cyBjaGFuZ2Ugb24gZXZlbnQgZXZlbnRfbmFtZS5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBhbiBpZGVudGlmaWVyIG9mIHRoZSBzdWJzY3JpYnRpb24uIFxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50IGV2ZW50IG5hbWUuIFxuICAgICAgICogQHBhcmFtIHsoc3RhdHVzOm9iamVjdCkgPT4gdm9pZH0gZl9vbl9ldmVudCBjYWxsYmFjayB0aGF0IHRha2Ugb2JqZWN0IHN0YXR1cyBhcyBwYXJhbS5cbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gZ2V0X2luaXRfbm90aWZ5IGlmIHRydWUgdGhlIGNhbGxiYWNrIGl0J3MgaW1tZWRpYXRlbHkgY2FsbGVkIHdpdGggdGhlIGxhc3Qgc3RhdHVzIGF2YWlsYWJsZS5cbiAgICAgICAqL1xuICAgICAgb25fZXZlbnRfY2hhbmdlOiBmdW5jdGlvbihpZCwgZXZlbnQsIGZfb25fZXZlbnQsIGdldF9pbml0X25vdGlmeSkge1xuICAgIG9uX2V2ZW50KGlkLCBldmVudCwgZl9vbl9ldmVudCwgZ2V0X2luaXRfbm90aWZ5KTtcbiAgICAgIH0sXG4gIH07XG59KCk7XG4iLCIvLyBodHRwOi8vanNmaWRkbGUubmV0L3N0ZXBoZW5ib2FrL2hZdVBiL1xuXG4vLyBXcmFwcGVyIGZ1bmN0aW9uXG5leHBvcnQgZnVuY3Rpb24gZG9fcGllKG5hbWUsIHVwZGF0ZV91cmwsIHVybF9wYXJhbXMsIHVuaXRzLCByZWZyZXNoKSB7XG5cdHZhciBwaWUgPSBuZXcgUGllQ2hhcnQobmFtZSwgdXBkYXRlX3VybCwgdXJsX3BhcmFtcywgdW5pdHMsIHJlZnJlc2gpO1xuXHRpZiAocmVmcmVzaClcblx0XHRwaWUuc2V0SW50ZXJ2YWwoc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgeyBwaWUudXBkYXRlKCk7IH0sIHJlZnJlc2gpKTtcblxuXHQvLyBSZXR1cm4gbmV3IGNsYXNzIGluc3RhbmNlLCB3aXRoXG5cdHJldHVybiBwaWU7XG59XG5cbmZ1bmN0aW9uIFBpZUNoYXJ0KG5hbWUsIHVwZGF0ZV91cmwsIHVybF9wYXJhbXMsIHVuaXRzLCByZWZyZXNoKSB7XG5cblx0Ly8gQWRkIG9iamVjdCBwcm9wZXJ0aWVzIGxpa2UgdGhpc1xuXHR0aGlzLm5hbWUgPSBuYW1lO1xuXHR0aGlzLnVwZGF0ZV91cmwgPSB1cGRhdGVfdXJsO1xuXHR0aGlzLnVybF9wYXJhbXMgPSB1cmxfcGFyYW1zO1xuXHR0aGlzLnVuaXRzID0gdW5pdHM7XG5cdHRoaXMucmVmcmVzaCA9IHJlZnJlc2g7XG5cbiAgbGV0IHN0cmVha2VyRGF0YUFkZGVkID0gW11cbiAgbGV0IHBhdGhzID0gXCJcIlxuICBsZXQgbGluZXMgPSBbXVxuICBsZXQgdmFsdWVMYWJlbHMgPSBbXVxuICBsZXQgbmFtZUxhYmVscyA9IFtdXG5cblx0dmFyIHBpZURhdGEgPSBbXTtcblx0dmFyIG9sZFBpZURhdGEgPSBbXTtcblx0dmFyIGZpbHRlcmVkUGllRGF0YSA9IFtdO1xuXHR2YXIgcnNwID0gY3JlYXRlX3BpZV9jaGFydChuYW1lLCB1bml0cyk7XG5cdHZhciBhcmNfZ3JvdXAgPSByc3BbMF07XG5cdHZhciBkb251dCA9IHJzcFsxXTtcdFxuXHR2YXIgdG90YWxWYWx1ZSA9IHJzcFsyXTtcblx0dmFyIHRvdGFsVW5pdHMgPSByc3BbM107XG5cdHZhciBjb2xvciA9IHJzcFs0XTtcblx0dmFyIHR3ZWVuRHVyYXRpb24gPSByc3BbNV07XG5cdHZhciBhcmMgPSByc3BbNl07XG5cdHZhciBsYWJlbF9ncm91cCA9IHJzcFs3XTtcdFxuXHR2YXIgY2VudGVyX2dyb3VwID0gcnNwWzhdO1xuXHR2YXIgciA9IHJzcFs5XTtcblx0dmFyIHRleHRPZmZzZXQgPSByc3BbMTBdO1xuXG5cblx0Ly8gdG8gcnVuIGVhY2ggdGltZSBkYXRhIGlzIGdlbmVyYXRlZFxuXG5cdHRoaXMudXBkYXRlID0gZnVuY3Rpb24gKCkge1xuXHRcdC8vIGNvbnNvbGUubG9nKHRoaXMubmFtZSk7XG5cdFx0Ly8gY29uc29sZS5sb2codGhpcy51cmxfcGFyYW1zKTtcblx0XHQkLmFqYXgoe1xuXHRcdFx0dHlwZTogJ0dFVCcsXG5cdFx0XHR1cmw6IHRoaXMudXBkYXRlX3VybCxcblx0XHRcdGRhdGE6IHRoaXMudXJsX3BhcmFtcyxcblx0XHRcdHN1Y2Nlc3M6IGZ1bmN0aW9uIChjb250ZW50KSB7XG5cdFx0XHRcdGxldCBwYXJzZWRfY29udGVudDtcblxuXHRcdFx0XHRpZiAodHlwZW9mIChjb250ZW50KSA9PSBcIm9iamVjdFwiKVxuXHRcdFx0XHRcdHBhcnNlZF9jb250ZW50ID0gY29udGVudDtcblx0XHRcdFx0ZWxzZSBpZiAodHlwZW9mIChjb250ZW50KSA9PSBcInN0cmluZ1wiKVxuXHRcdFx0XHRcdHBhcnNlZF9jb250ZW50ID0galF1ZXJ5LnBhcnNlSlNPTihjb250ZW50KTtcblxuXHRcdFx0XHRpZiAocGFyc2VkX2NvbnRlbnQpXG5cdFx0XHRcdFx0dXBkYXRlX3BpZV9jaGFydChwYXJzZWRfY29udGVudCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLyBTVFJFQUtFUiBDT05ORUNUSU9OIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cdC8vIE5lZWRlZCB0byBkcmF3IHRoZSBwaWUgaW1tZWRpYXRlbHlcblx0dGhpcy51cGRhdGUoKTtcblx0dGhpcy51cGRhdGUoKTtcblxuXHQvLyB2YXIgdXBkYXRlSW50ZXJ2YWwgPSB3aW5kb3cuc2V0SW50ZXJ2YWwodXBkYXRlLCByZWZyZXNoKTtcblxuXHRmdW5jdGlvbiBjb21wYXJlX2J5X2xhYmVsKGEsIGIpIHtcblx0XHRpZiAoYS5sYWJlbCA8IGIubGFiZWwpIHtcblx0XHRcdHJldHVybiAtMTtcblx0XHR9IGVsc2UgaWYgKGEubGFiZWwgPiBiLmxhYmVsKSB7XG5cdFx0XHRyZXR1cm4gMTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gdXBkYXRlX3BpZV9jaGFydChkYXRhKSB7XG5cdFx0aWYgKGRhdGEucnNwKSAvLyBkZXRlY3QgUkVTVCBBUEkgdjFcblx0XHRcdGRhdGEgPSBkYXRhLnJzcDtcblxuXHRcdGRhdGEuc29ydChjb21wYXJlX2J5X2xhYmVsKTtcblx0XHRzdHJlYWtlckRhdGFBZGRlZCA9IGRhdGE7XG5cdFx0b2xkUGllRGF0YSA9IGZpbHRlcmVkUGllRGF0YTtcblx0XHRwaWVEYXRhID0gZG9udXQoc3RyZWFrZXJEYXRhQWRkZWQpO1xuXG5cdFx0dmFyIHRvdGFsT2N0ZXRzID0gMDtcblx0XHRmaWx0ZXJlZFBpZURhdGEgPSBwaWVEYXRhLmZpbHRlcihmaWx0ZXJEYXRhKTtcblx0XHRmdW5jdGlvbiBmaWx0ZXJEYXRhKGVsZW1lbnQsIGluZGV4LCBhcnJheSkge1xuXHRcdFx0ZWxlbWVudC5uYW1lID0gc3RyZWFrZXJEYXRhQWRkZWRbaW5kZXhdLmxhYmVsO1xuXHRcdFx0ZWxlbWVudC52YWx1ZSA9IHN0cmVha2VyRGF0YUFkZGVkW2luZGV4XS52YWx1ZTtcblx0XHRcdGVsZW1lbnQudXJsID0gc3RyZWFrZXJEYXRhQWRkZWRbaW5kZXhdLnVybDtcblx0XHRcdHRvdGFsT2N0ZXRzICs9IGVsZW1lbnQudmFsdWU7XG5cdFx0XHRyZXR1cm4gKGVsZW1lbnQudmFsdWUgPiAwKTtcblx0XHR9XG5cblx0XHRpZiAoKGZpbHRlcmVkUGllRGF0YS5sZW5ndGggPiAwKSAmJiAob2xkUGllRGF0YS5sZW5ndGggPiAwKSkge1xuXHRcdFx0Ly9SRU1PVkUgUExBQ0VIT0xERVIgQ0lSQ0xFXG5cdFx0XHRhcmNfZ3JvdXAuc2VsZWN0QWxsKFwiY2lyY2xlXCIpLnJlbW92ZSgpO1xuXG5cdFx0XHRpZiAodG90YWxWYWx1ZSkge1xuXHRcdFx0XHR0b3RhbFZhbHVlLnRleHQoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdHZhciBrYiA9IHRvdGFsT2N0ZXRzIC8gMTAyNDtcblx0XHRcdFx0XHRyZXR1cm4ga2IudG9GaXhlZCgxKTtcblx0XHRcdFx0XHQvL3JldHVybiBiY2hhcnQubGFiZWwuYWJicmV2aWF0ZWQodG90YWxPY3RldHMqOCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHQvL0RSQVcgQVJDIFBBVEhTXG5cdFx0XHRwYXRocyA9IGFyY19ncm91cC5zZWxlY3RBbGwoXCJwYXRoXCIpLmRhdGEoZmlsdGVyZWRQaWVEYXRhKTtcblx0XHRcdHBhdGhzLmVudGVyKCkuYXBwZW5kKFwic3ZnOnBhdGhcIilcblx0XHRcdFx0LmF0dHIoXCJzdHJva2VcIiwgXCJ3aGl0ZVwiKVxuXHRcdFx0XHQuYXR0cihcInN0cm9rZS13aWR0aFwiLCAwLjUpXG5cdFx0XHRcdC5hdHRyKFwiZmlsbFwiLCBmdW5jdGlvbiAoZCwgaSkgeyByZXR1cm4gY29sb3IoaSk7IH0pXG5cdFx0XHRcdC50cmFuc2l0aW9uKClcblx0XHRcdFx0LmR1cmF0aW9uKHR3ZWVuRHVyYXRpb24pXG5cdFx0XHRcdC5hdHRyVHdlZW4oXCJkXCIsIHBpZVR3ZWVuKTtcblx0XHRcdHBhdGhzXG5cdFx0XHRcdC50cmFuc2l0aW9uKClcblx0XHRcdFx0LmR1cmF0aW9uKHR3ZWVuRHVyYXRpb24pXG5cdFx0XHRcdC5hdHRyVHdlZW4oXCJkXCIsIHBpZVR3ZWVuKTtcblx0XHRcdHBhdGhzLmV4aXQoKVxuXHRcdFx0XHQudHJhbnNpdGlvbigpXG5cdFx0XHRcdC5kdXJhdGlvbih0d2VlbkR1cmF0aW9uKVxuXHRcdFx0XHQuYXR0clR3ZWVuKFwiZFwiLCByZW1vdmVQaWVUd2Vlbilcblx0XHRcdFx0LnJlbW92ZSgpO1xuXG5cdFx0XHQvL0RSQVcgVElDSyBNQVJLIExJTkVTIEZPUiBMQUJFTFNcblx0XHRcdGxpbmVzID0gbGFiZWxfZ3JvdXAuc2VsZWN0QWxsKFwibGluZVwiKS5kYXRhKGZpbHRlcmVkUGllRGF0YSk7XG5cdFx0XHRsaW5lcy5lbnRlcigpLmFwcGVuZChcInN2ZzpsaW5lXCIpXG5cdFx0XHRcdC5hdHRyKFwieDFcIiwgMClcblx0XHRcdFx0LmF0dHIoXCJ4MlwiLCAwKVxuXHRcdFx0XHQuYXR0cihcInkxXCIsIC1yIC0gMylcblx0XHRcdFx0LmF0dHIoXCJ5MlwiLCAtciAtIDgpXG5cdFx0XHRcdC5hdHRyKFwic3Ryb2tlXCIsIFwiZ3JheVwiKVxuXHRcdFx0XHQuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbiAoZCkge1xuXHRcdFx0XHRcdHJldHVybiBcInJvdGF0ZShcIiArIChkLnN0YXJ0QW5nbGUgKyBkLmVuZEFuZ2xlKSAvIDIgKiAoMTgwIC8gTWF0aC5QSSkgKyBcIilcIjtcblx0XHRcdFx0fSk7XG5cdFx0XHRsaW5lcy50cmFuc2l0aW9uKClcblx0XHRcdFx0LmR1cmF0aW9uKHR3ZWVuRHVyYXRpb24pXG5cdFx0XHRcdC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uIChkKSB7XG5cdFx0XHRcdFx0cmV0dXJuIFwicm90YXRlKFwiICsgKGQuc3RhcnRBbmdsZSArIGQuZW5kQW5nbGUpIC8gMiAqICgxODAgLyBNYXRoLlBJKSArIFwiKVwiO1xuXHRcdFx0XHR9KTtcblx0XHRcdGxpbmVzLmV4aXQoKS5yZW1vdmUoKTtcblxuXHRcdFx0Ly9EUkFXIExBQkVMUyBXSVRIIFBFUkNFTlRBR0UgVkFMVUVTXG5cdFx0XHR2YWx1ZUxhYmVscyA9IGxhYmVsX2dyb3VwLnNlbGVjdEFsbChcInRleHQudmFsdWVcIikuZGF0YShmaWx0ZXJlZFBpZURhdGEpXG5cdFx0XHRcdC5hdHRyKFwiZHlcIiwgZnVuY3Rpb24gKGQpIHtcblx0XHRcdFx0XHRpZiAoKGQuc3RhcnRBbmdsZSArIGQuZW5kQW5nbGUpIC8gMiA+IE1hdGguUEkgLyAyICYmIChkLnN0YXJ0QW5nbGUgKyBkLmVuZEFuZ2xlKSAvIDIgPCBNYXRoLlBJICogMS41KSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gNTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIC03O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSlcblx0XHRcdFx0LmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBmdW5jdGlvbiAoZCkge1xuXHRcdFx0XHRcdGlmICgoZC5zdGFydEFuZ2xlICsgZC5lbmRBbmdsZSkgLyAyIDwgTWF0aC5QSSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFwiYmVnaW5uaW5nXCI7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiBcImVuZFwiO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSlcblx0XHRcdFx0LnRleHQoZnVuY3Rpb24gKGQpIHtcblxuXHRcdFx0XHRcdGNvbnN0IHBlcmNlbnRhZ2UgPSAoZC52YWx1ZSAvIHRvdGFsT2N0ZXRzKSAqIDEwMDtcblx0XHRcdFx0XHQvLyBhcHByb3NzaW1hdGUgdGhlIG51bWJlciB0byB0aGUgdGhpcmQgZGVjaWFtbCBkaWdpdCBhbmQgc2hvdyBvbmx5IHRoZSBmaXJzdCBkZWNpbWFsXG5cdFx0XHRcdFx0bGV0IHBlcmNlbnRhZ2VMYWJlbCA9IHBlcmNlbnRhZ2UudG9GaXhlZCgxKSArIFwiJVwiO1xuXHRcdFx0XHRcdHJldHVybiBwZXJjZW50YWdlTGFiZWw7XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHR2YWx1ZUxhYmVscy5lbnRlcigpLmFwcGVuZChcInN2Zzp0ZXh0XCIpXG5cdFx0XHRcdC5hdHRyKFwiY2xhc3NcIiwgXCJ2YWx1ZVwiKVxuXHRcdFx0XHQuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbiAoZCkge1xuXHRcdFx0XHRcdHJldHVybiBcInRyYW5zbGF0ZShcIiArIE1hdGguY29zKCgoZC5zdGFydEFuZ2xlICsgZC5lbmRBbmdsZSAtIE1hdGguUEkpIC8gMikpICogKHIgKyB0ZXh0T2Zmc2V0KSArIFwiLFwiICsgTWF0aC5zaW4oKGQuc3RhcnRBbmdsZSArIGQuZW5kQW5nbGUgLSBNYXRoLlBJKSAvIDIpICogKHIgKyB0ZXh0T2Zmc2V0KSArIFwiKVwiO1xuXHRcdFx0XHR9KVxuXHRcdFx0XHQuYXR0cihcImR5XCIsIGZ1bmN0aW9uIChkKSB7XG5cdFx0XHRcdFx0aWYgKChkLnN0YXJ0QW5nbGUgKyBkLmVuZEFuZ2xlKSAvIDIgPiBNYXRoLlBJIC8gMiAmJiAoZC5zdGFydEFuZ2xlICsgZC5lbmRBbmdsZSkgLyAyIDwgTWF0aC5QSSAqIDEuNSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIDU7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiAtNztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5hdHRyKFwidGV4dC1hbmNob3JcIiwgZnVuY3Rpb24gKGQpIHtcblx0XHRcdFx0XHRpZiAoKGQuc3RhcnRBbmdsZSArIGQuZW5kQW5nbGUpIC8gMiA8IE1hdGguUEkpIHtcblx0XHRcdFx0XHRcdHJldHVybiBcImJlZ2lubmluZ1wiO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gXCJlbmRcIjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pLnRleHQoZnVuY3Rpb24gKGQpIHtcblx0XHRcdFx0XHRpZiAodG90YWxPY3RldHMgPD0gMSkgcmV0dXJuIFwiXCI7XG5cdFx0XHRcdFx0Y29uc3QgcGVyY2VudGFnZSA9IChkLnZhbHVlIC8gdG90YWxPY3RldHMpICogMTAwO1xuXHRcdFx0XHRcdGxldCBwZXJjZW50YWdlTGFiZWwgPSBwZXJjZW50YWdlLnRvRml4ZWQoMSkgKyBcIiVcIjtcblx0XHRcdFx0XHRyZXR1cm4gcGVyY2VudGFnZUxhYmVsO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0dmFsdWVMYWJlbHMudHJhbnNpdGlvbigpLmR1cmF0aW9uKHR3ZWVuRHVyYXRpb24pLmF0dHJUd2VlbihcInRyYW5zZm9ybVwiLCB0ZXh0VHdlZW4pO1xuXHRcdFx0dmFsdWVMYWJlbHMuZXhpdCgpLnJlbW92ZSgpO1xuXG5cdFx0XHQvL0RSQVcgTEFCRUxTIFdJVEggRU5USVRZIE5BTUVTXG5cdFx0XHRuYW1lTGFiZWxzID0gbGFiZWxfZ3JvdXAuc2VsZWN0QWxsKFwidGV4dC51bml0c1wiKS5kYXRhKGZpbHRlcmVkUGllRGF0YSlcblx0XHRcdFx0LmF0dHIoXCJkeVwiLCBmdW5jdGlvbiAoZCkge1xuXHRcdFx0XHRcdGlmICgoZC5zdGFydEFuZ2xlICsgZC5lbmRBbmdsZSkgLyAyID4gTWF0aC5QSSAvIDIgJiYgKGQuc3RhcnRBbmdsZSArIGQuZW5kQW5nbGUpIC8gMiA8IE1hdGguUEkgKiAxLjUpIHtcblx0XHRcdFx0XHRcdHJldHVybiAxNztcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIDU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KVxuXHRcdFx0XHQuYXR0cihcInRleHQtYW5jaG9yXCIsIGZ1bmN0aW9uIChkKSB7XG5cdFx0XHRcdFx0aWYgKChkLnN0YXJ0QW5nbGUgKyBkLmVuZEFuZ2xlKSAvIDIgPCBNYXRoLlBJKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gXCJiZWdpbm5pbmdcIjtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFwiZW5kXCI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KS50ZXh0KGZ1bmN0aW9uIChkKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGQubmFtZTtcblx0XHRcdFx0fSlcblx0XHRcdFx0Lm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKGQpIHsgaWYgKGQudXJsKSB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGQudXJsOyB9KTtcblxuXHRcdFx0bmFtZUxhYmVscy5lbnRlcigpLmFwcGVuZChcInN2Zzp0ZXh0XCIpXG5cdFx0XHRcdC5hdHRyKFwiY2xhc3NcIiwgXCJ1bml0c1wiKVxuXHRcdFx0XHQuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbiAoZCkge1xuXHRcdFx0XHRcdHJldHVybiBcInRyYW5zbGF0ZShcIiArIE1hdGguY29zKCgoZC5zdGFydEFuZ2xlICsgZC5lbmRBbmdsZSAtIE1hdGguUEkpIC8gMikpICogKHIgKyB0ZXh0T2Zmc2V0KSArIFwiLFwiICsgTWF0aC5zaW4oKGQuc3RhcnRBbmdsZSArIGQuZW5kQW5nbGUgLSBNYXRoLlBJKSAvIDIpICogKHIgKyB0ZXh0T2Zmc2V0KSArIFwiKVwiO1xuXHRcdFx0XHR9KVxuXHRcdFx0XHQuYXR0cihcImR5XCIsIGZ1bmN0aW9uIChkKSB7XG5cdFx0XHRcdFx0aWYgKChkLnN0YXJ0QW5nbGUgKyBkLmVuZEFuZ2xlKSAvIDIgPiBNYXRoLlBJIC8gMiAmJiAoZC5zdGFydEFuZ2xlICsgZC5lbmRBbmdsZSkgLyAyIDwgTWF0aC5QSSAqIDEuNSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIDE3O1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gNTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5hdHRyKFwidGV4dC1hbmNob3JcIiwgZnVuY3Rpb24gKGQpIHtcblx0XHRcdFx0XHRpZiAoKGQuc3RhcnRBbmdsZSArIGQuZW5kQW5nbGUpIC8gMiA8IE1hdGguUEkpIHtcblx0XHRcdFx0XHRcdHJldHVybiBcImJlZ2lubmluZ1wiO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gXCJlbmRcIjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pLnRleHQoZnVuY3Rpb24gKGQpIHtcblx0XHRcdFx0XHRyZXR1cm4gZC5uYW1lO1xuXHRcdFx0XHR9KVxuXHRcdFx0XHQub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoZCkgeyBpZiAoZC51cmwpIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gZC51cmw7IH0pO1xuXG5cdFx0XHRuYW1lTGFiZWxzLnRyYW5zaXRpb24oKS5kdXJhdGlvbih0d2VlbkR1cmF0aW9uKS5hdHRyVHdlZW4oXCJ0cmFuc2Zvcm1cIiwgdGV4dFR3ZWVuKTtcblxuXHRcdFx0bmFtZUxhYmVscy5leGl0KCkucmVtb3ZlKCk7XG5cdFx0fVxuXHR9XG5cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8gRlVOQ1RJT05TIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXHQvLyBJbnRlcnBvbGF0ZSB0aGUgYXJjcyBpbiBkYXRhIHNwYWNlLlxuXHRmdW5jdGlvbiBwaWVUd2VlbihkLCBpKSB7XG5cdFx0dmFyIHMwO1xuXHRcdHZhciBlMDtcblx0XHRpZiAob2xkUGllRGF0YVtpXSkge1xuXHRcdFx0czAgPSBvbGRQaWVEYXRhW2ldLnN0YXJ0QW5nbGU7XG5cdFx0XHRlMCA9IG9sZFBpZURhdGFbaV0uZW5kQW5nbGU7XG5cdFx0fSBlbHNlIGlmICghKG9sZFBpZURhdGFbaV0pICYmIG9sZFBpZURhdGFbaSAtIDFdKSB7XG5cdFx0XHRzMCA9IG9sZFBpZURhdGFbaSAtIDFdLmVuZEFuZ2xlO1xuXHRcdFx0ZTAgPSBvbGRQaWVEYXRhW2kgLSAxXS5lbmRBbmdsZTtcblx0XHR9IGVsc2UgaWYgKCEob2xkUGllRGF0YVtpIC0gMV0pICYmIG9sZFBpZURhdGEubGVuZ3RoID4gMCkge1xuXHRcdFx0czAgPSBvbGRQaWVEYXRhW29sZFBpZURhdGEubGVuZ3RoIC0gMV0uZW5kQW5nbGU7XG5cdFx0XHRlMCA9IG9sZFBpZURhdGFbb2xkUGllRGF0YS5sZW5ndGggLSAxXS5lbmRBbmdsZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0czAgPSAwO1xuXHRcdFx0ZTAgPSAwO1xuXHRcdH1cblx0XHR2YXIgaSA9IGQzLmludGVycG9sYXRlKHsgc3RhcnRBbmdsZTogczAsIGVuZEFuZ2xlOiBlMCB9LCB7IHN0YXJ0QW5nbGU6IGQuc3RhcnRBbmdsZSwgZW5kQW5nbGU6IGQuZW5kQW5nbGUgfSk7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uICh0KSB7XG5cdFx0XHR2YXIgYiA9IGkodCk7XG5cdFx0XHRyZXR1cm4gYXJjKGIpO1xuXHRcdH07XG5cdH1cblxuXHRmdW5jdGlvbiByZW1vdmVQaWVUd2VlbihkLCBpKSB7XG5cdFx0czAgPSAyICogTWF0aC5QSTtcblx0XHRlMCA9IDIgKiBNYXRoLlBJO1xuXHRcdHZhciBpID0gZDMuaW50ZXJwb2xhdGUoeyBzdGFydEFuZ2xlOiBkLnN0YXJ0QW5nbGUsIGVuZEFuZ2xlOiBkLmVuZEFuZ2xlIH0sIHsgc3RhcnRBbmdsZTogczAsIGVuZEFuZ2xlOiBlMCB9KTtcblx0XHRyZXR1cm4gZnVuY3Rpb24gKHQpIHtcblx0XHRcdHZhciBiID0gaSh0KTtcblx0XHRcdHJldHVybiBhcmMoYik7XG5cdFx0fTtcblx0fVxuXG5cdGZ1bmN0aW9uIHRleHRUd2VlbihkLCBpKSB7XG5cdFx0dmFyIGE7XG5cdFx0aWYgKG9sZFBpZURhdGFbaV0pIHtcblx0XHRcdGEgPSAob2xkUGllRGF0YVtpXS5zdGFydEFuZ2xlICsgb2xkUGllRGF0YVtpXS5lbmRBbmdsZSAtIE1hdGguUEkpIC8gMjtcblx0XHR9IGVsc2UgaWYgKCEob2xkUGllRGF0YVtpXSkgJiYgb2xkUGllRGF0YVtpIC0gMV0pIHtcblx0XHRcdGEgPSAob2xkUGllRGF0YVtpIC0gMV0uc3RhcnRBbmdsZSArIG9sZFBpZURhdGFbaSAtIDFdLmVuZEFuZ2xlIC0gTWF0aC5QSSkgLyAyO1xuXHRcdH0gZWxzZSBpZiAoIShvbGRQaWVEYXRhW2kgLSAxXSkgJiYgb2xkUGllRGF0YS5sZW5ndGggPiAwKSB7XG5cdFx0XHRhID0gKG9sZFBpZURhdGFbb2xkUGllRGF0YS5sZW5ndGggLSAxXS5zdGFydEFuZ2xlICsgb2xkUGllRGF0YVtvbGRQaWVEYXRhLmxlbmd0aCAtIDFdLmVuZEFuZ2xlIC0gTWF0aC5QSSkgLyAyO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRhID0gMDtcblx0XHR9XG5cdFx0dmFyIGIgPSAoZC5zdGFydEFuZ2xlICsgZC5lbmRBbmdsZSAtIE1hdGguUEkpIC8gMjtcblxuXHRcdHZhciBmbiA9IGQzLmludGVycG9sYXRlTnVtYmVyKGEsIGIpO1xuXHRcdHJldHVybiBmdW5jdGlvbiAodCkge1xuXHRcdFx0dmFyIHZhbCA9IGZuKHQpO1xuXHRcdFx0cmV0dXJuIFwidHJhbnNsYXRlKFwiICsgTWF0aC5jb3ModmFsKSAqIChyICsgdGV4dE9mZnNldCkgKyBcIixcIiArIE1hdGguc2luKHZhbCkgKiAociArIHRleHRPZmZzZXQpICsgXCIpXCI7XG5cdFx0fTtcblx0fVxuXG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBQVUJMSUMgRlVOQ0lPTlRTIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXG5QaWVDaGFydC5wcm90b3R5cGUuc2V0VXJsUGFyYW1zID0gZnVuY3Rpb24gKHVybF9wYXJhbXMpIHtcblx0dGhpcy51cmxfcGFyYW1zID0gdXJsX3BhcmFtcztcblx0dGhpcy5mb3JjZVVwZGF0ZSgpO1xufVxuXG5QaWVDaGFydC5wcm90b3R5cGUuZm9yY2VVcGRhdGUgPSBmdW5jdGlvbiAodXJsX3BhcmFtcykge1xuXHR0aGlzLnN0b3BJbnRlcnZhbCgpO1xuXHR0aGlzLnVwZGF0ZSgpO1xuXHR0aGlzLnN0YXJ0SW50ZXJ2YWwoKTtcbn1cblxuUGllQ2hhcnQucHJvdG90eXBlLnNldEludGVydmFsID0gZnVuY3Rpb24gKHBfcGllSW50ZXJ2YWwpIHtcblx0dGhpcy5waWVJbnRlcnZhbCA9IHBfcGllSW50ZXJ2YWw7XG59XG5cblBpZUNoYXJ0LnByb3RvdHlwZS5zdG9wSW50ZXJ2YWwgPSBmdW5jdGlvbiAoKSB7XG5cdC8vZGlzYWJsZWQgZ3JhcGggaW50ZXJ2YWxcblx0Y2xlYXJJbnRlcnZhbCh0aGlzLnBpZUludGVydmFsKTtcbn1cblxuUGllQ2hhcnQucHJvdG90eXBlLnN0YXJ0SW50ZXJ2YWwgPSBmdW5jdGlvbiAoKSB7XG5cdHRoaXMucGllSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCh0aGlzLnVwZGF0ZSgpLCB0aGlzLnJlZnJlc2gpXG59XG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gSU5JVCBGVU5DSU9OVFMgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5mdW5jdGlvbiBjcmVhdGVfcGllX2NoYXJ0KG5hbWUsIHVuaXRzKSB7XG5cdHZhciB3ID0gNTAwOyAvLzM4MCAtIFBsZWFzZSBrZWVwIGluIHN5bmMgd2l0aCBwaWUtY2hhcnQuY3NzXG5cdHZhciBoID0gMzI1OyAvLzI4MFxuXHR2YXIgaXIgPSA1MjsgLy80NVxuXHR2YXIgdGV4dE9mZnNldCA9IDE0O1xuXHR2YXIgdHdlZW5EdXJhdGlvbiA9IDI1MDtcblx0dmFyIHIgPSAxMTY7IC8vMTAwO1xuXG5cdGlmICgkKG5hbWUpLmhhc0NsYXNzKFwicGllLWNoYXJ0LXNtYWxsXCIpKSB7XG5cdFx0dyA9IDMzMDtcblx0XHRoID0gMjUwO1xuXHRcdHIgPSB3IC8gNSArIDE1O1xuXHRcdGlyID0gciAvIDI7XG5cdH1cblxuXHQvL0QzIGhlbHBlciBmdW5jdGlvbiB0byBwb3B1bGF0ZSBwaWUgc2xpY2UgcGFyYW1ldGVycyBmcm9tIGFycmF5IGRhdGFcblx0dmFyIGRvbnV0ID0gZDMubGF5b3V0LnBpZSgpLnZhbHVlKGZ1bmN0aW9uIChkKSB7XG5cdFx0aWYgKGQudmFsdWUgPT0gMCkgeyBkLnZhbHVlID0gMTsgfSAvLyBGb3JjZSB0byAxLCBpbiBvcmRlciB0byB1cGRhdGUgdGhlIGdyYXBoXG5cdFx0cmV0dXJuIGQudmFsdWU7XG5cdH0pO1xuXG5cdC8vRDMgaGVscGVyIGZ1bmN0aW9uIHRvIGNyZWF0ZSBjb2xvcnMgZnJvbSBhbiBvcmRpbmFsIHNjYWxlXG5cdHZhciBjb2xvciA9IGQzLnNjYWxlLmNhdGVnb3J5MjAoKTtcblxuXHQvL0QzIGhlbHBlciBmdW5jdGlvbiB0byBkcmF3IGFyY3MsIHBvcHVsYXRlcyBwYXJhbWV0ZXIgXCJkXCIgaW4gcGF0aCBvYmplY3Rcblx0dmFyIGFyYyA9IGQzLnN2Zy5hcmMoKVxuXHRcdC5zdGFydEFuZ2xlKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLnN0YXJ0QW5nbGU7IH0pXG5cdFx0LmVuZEFuZ2xlKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLmVuZEFuZ2xlOyB9KVxuXHRcdC5pbm5lclJhZGl1cyhpcilcblx0XHQub3V0ZXJSYWRpdXMocik7XG5cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8gQ1JFQVRFIFZJUyAmIEdST1VQUyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0Ly8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXHR2YXIgdmlzID0gZDMuc2VsZWN0KG5hbWUpLmFwcGVuZChcInN2ZzpzdmdcIilcblx0XHQuYXR0cihcIndpZHRoXCIsIHcpXG5cdFx0LmF0dHIoXCJoZWlnaHRcIiwgaClcblx0XHQuYXR0cihcInZpZXdCb3hcIiwgXCIwIDAgXCIgKyB3ICsgXCIgXCIgKyBoKVxuXHRcdC5hdHRyKFwicHJlc2VydmVBc3BlY3RSYXRpb1wiLCBcInhNaWRZTWlkXCIpO1xuXG5cdC8vR1JPVVAgRk9SIEFSQ1MvUEFUSFNcblx0dmFyIGFyY19ncm91cCA9IHZpcy5hcHBlbmQoXCJzdmc6Z1wiKVxuXHRcdC5hdHRyKFwiY2xhc3NcIiwgXCJhcmNcIilcblx0XHQuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArICh3IC8gMikgKyBcIixcIiArIChoIC8gMikgKyBcIilcIik7XG5cblx0Ly9HUk9VUCBGT1IgTEFCRUxTXG5cdHZhciBsYWJlbF9ncm91cCA9IHZpcy5hcHBlbmQoXCJzdmc6Z1wiKVxuXHRcdC5hdHRyKFwiY2xhc3NcIiwgXCJsYWJlbF9ncm91cFwiKVxuXHRcdC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgKHcgLyAyKSArIFwiLFwiICsgKGggLyAyKSArIFwiKVwiKTtcblxuXHQvL0dST1VQIEZPUiBDRU5URVIgVEVYVFxuXHR2YXIgY2VudGVyX2dyb3VwID0gdmlzLmFwcGVuZChcInN2ZzpnXCIpXG5cdFx0LmF0dHIoXCJjbGFzc1wiLCBcImNlbnRlcl9ncm91cFwiKVxuXHRcdC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgKHcgLyAyKSArIFwiLFwiICsgKGggLyAyKSArIFwiKVwiKTtcblxuXHQvL1BMQUNFSE9MREVSIEdSQVkgQ0lSQ0xFXG5cdGFyY19ncm91cC5hcHBlbmQoXCJzdmc6Y2lyY2xlXCIpXG5cdFx0LmF0dHIoXCJmaWxsXCIsIFwiI0VGRUZFRlwiKVxuXHRcdC5hdHRyKFwiclwiLCByKTtcblxuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLyBDRU5URVIgVEVYVCAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5cdC8vV0hJVEUgQ0lSQ0xFIEJFSElORCBMQUJFTFNcblx0Y2VudGVyX2dyb3VwLmFwcGVuZChcInN2ZzpjaXJjbGVcIilcblx0XHQuYXR0cihcImZpbGxcIiwgXCJ3aGl0ZVwiKVxuXHRcdC5hdHRyKFwiclwiLCBpcik7XG5cblx0dmFyIHRvdGFsVW5pdHMgPSBudWxsO1xuXHR2YXIgdG90YWxMYWJlbCA9IG51bGw7XG5cdHZhciB0b3RhbFZhbHVlID0gbnVsbDtcblx0XG5cdGlmICh1bml0cykge1xuXHRcdC8vIFwiVE9UQUxcIiBMQUJFTFxuXHRcdHRvdGFsTGFiZWwgPSBjZW50ZXJfZ3JvdXAuYXBwZW5kKFwic3ZnOnRleHRcIilcblx0XHRcdC5hdHRyKFwiY2xhc3NcIiwgXCJsYWJlbFwiKVxuXHRcdFx0LmF0dHIoXCJkeVwiLCAtMTUpXG5cdFx0XHQuYXR0cihcInRleHQtYW5jaG9yXCIsIFwibWlkZGxlXCIpIC8vIHRleHQtYWxpZ246IHJpZ2h0XG5cdFx0XHQudGV4dChcIlRPVEFMXCIpO1xuXG5cdFx0Ly9UT1RBTCBUUkFGRklDIFZBTFVFXG5cdFx0dG90YWxWYWx1ZSA9IGNlbnRlcl9ncm91cC5hcHBlbmQoXCJzdmc6dGV4dFwiKVxuXHRcdFx0LmF0dHIoXCJjbGFzc1wiLCBcInRvdGFsXCIpXG5cdFx0XHQuYXR0cihcImR5XCIsIDcpXG5cdFx0XHQuYXR0cihcInRleHQtYW5jaG9yXCIsIFwibWlkZGxlXCIpIC8vIHRleHQtYWxpZ246IHJpZ2h0XG5cdFx0XHQudGV4dChcIldhaXRpbmcuLi5cIik7XG5cblx0XHQvL1VOSVRTIExBQkVMXG5cdFx0dG90YWxVbml0cyA9IGNlbnRlcl9ncm91cC5hcHBlbmQoXCJzdmc6dGV4dFwiKVxuXHRcdFx0LmF0dHIoXCJjbGFzc1wiLCBcInVuaXRzXCIpXG5cdFx0XHQuYXR0cihcImR5XCIsIDIxKVxuXHRcdFx0LmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKSAvLyB0ZXh0LWFsaWduOiByaWdodFxuXHRcdFx0LnRleHQodW5pdHMpO1xuXHR9XG5cblx0cmV0dXJuIChbYXJjX2dyb3VwLCBkb251dCwgdG90YWxWYWx1ZSwgdG90YWxVbml0cywgY29sb3IsIHR3ZWVuRHVyYXRpb24sIGFyYywgbGFiZWxfZ3JvdXAsIGNlbnRlcl9ncm91cCwgciwgdGV4dE9mZnNldF0pO1xufVxuIiwiaW1wb3J0IHsgbnRvcG5nX2V2ZW50cywgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLCBudG9wbmdfc3RhdHVzX21hbmFnZXIsIG50b3BuZ191dGlsaXR5LCBudG9wbmdfdXJsX21hbmFnZXIsIG50b3BuZ19zeW5jLCBudG9wbmdfY3VzdG9tX2V2ZW50cyB9IGZyb20gJy4vY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcydcblxud2luZG93Lm50b3BuZ19ldmVudHMgPSBudG9wbmdfZXZlbnRzXG53aW5kb3cubnRvcG5nX2V2ZW50c19tYW5hZ2VyID0gbnRvcG5nX2V2ZW50c19tYW5hZ2VyXG53aW5kb3cubnRvcG5nX3N0YXR1c19tYW5hZ2VyID0gbnRvcG5nX3N0YXR1c19tYW5hZ2VyXG53aW5kb3cubnRvcG5nX3V0aWxpdHkgPSBudG9wbmdfdXRpbGl0eVxud2luZG93Lm50b3BuZ191cmxfbWFuYWdlciA9IG50b3BuZ191cmxfbWFuYWdlclxud2luZG93Lm50b3BuZ19zeW5jID0gbnRvcG5nX3N5bmNcbndpbmRvdy5udG9wbmdfY3VzdG9tX2V2ZW50cyA9IG50b3BuZ19jdXN0b21fZXZlbnRzXG4iLCIvKipcbiAqIChDKSAyMDEzLTIxIC0gbnRvcC5vcmdcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IERFRklORURfV0lER0VUUyA9IHt9O1xuLyogVXNlZCB0byBpbXBsZW1lbnQgdGhlIG9uIGNsaWNrIGV2ZW50cyBvbnRvIHRoZSBncmFwaCAqL1xuY29uc3QgREVGSU5FRF9FVkVOVFMgPSB7XG4gICAgLyogT24gY2xpY2sgZXZlbnQgdXNlZCBieSB0aGUgZmxvdyBhbmFseXplIHNlY3Rpb24sIHJlZGlyZWN0IHRvIHRoZSBjdXJyZW50IHVybCArIGEgc2luZ2xlIGZpbHRlciAqL1xuICAgIFwiZGJfYW5hbHl6ZVwiIDogZnVuY3Rpb24gKGV2ZW50LCBjaGFydENvbnRleHQsIGNvbmZpZykge1xuICAgICAgICBjb25zdCB7IGRhdGFQb2ludEluZGV4IH0gPSBjb25maWc7XG4gICAgICAgIGNvbnN0IHsgZmlsdGVyIH0gPSBjb25maWcudy5jb25maWc7XG4gICAgICAgIGxldCB2YWx1ZTtcblxuICAgICAgICBpZihjb25maWcudy5jb25maWcuZmlsdGVyaW5nX2xhYmVscylcbiAgICAgICAgICAgIHZhbHVlID0gY29uZmlnLncuY29uZmlnLmZpbHRlcmluZ19sYWJlbHNbZGF0YVBvaW50SW5kZXhdO1xuXG4gICAgICAgIGlmKGZpbHRlci5sZW5ndGggPT0gMCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIGxldCBzdGF0dXMgPSBudG9wbmdfc3RhdHVzX21hbmFnZXIuZ2V0X3N0YXR1cygpO1xuICAgICAgICBsZXQgZmlsdGVycyA9IHN0YXR1cy5maWx0ZXJzO1xuICAgICAgICBmaWx0ZXJzLnB1c2goe2lkOiBmaWx0ZXJbMF0sIG9wZXJhdG9yOiBcImVxXCIsIHZhbHVlOiB2YWx1ZX0pO1xuICAgICAgICAvLyBub3RpZnkgdGhhdCBmaWx0ZXJzIHN0YXR1cyBpcyB1cGRhdGVkXG4gICAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2V2ZW50KG50b3BuZ19ldmVudHMuRklMVEVSU19DSEFOR0UsIHtmaWx0ZXJzfSk7XG4gICAgfSxcblxuICAgIFwibm9uZVwiIDogZnVuY3Rpb24gKGV2ZW50LCBjaGFydENvbnRleHQsIGNvbmZpZykge1xuICAgICAgICByZXR1cm47XG4gICAgfSxcbiAgICBcbiAgICAvKiBTdGFuZGFyZCBvbiBjbGljayBldmVudCwgcmVkaXJlY3QgdG8gdGhlIHVybCAqL1xuICAgIFwic3RhbmRhcmRcIiA6IGZ1bmN0aW9uIChldmVudCwgY2hhcnRDb250ZXh0LCBjb25maWcpIHtcbiAgICAgICAgY29uc3QgeyBzZXJpZXNJbmRleCwgZGF0YVBvaW50SW5kZXggfSA9IGNvbmZpZztcbiAgICAgICAgY29uc3QgeyBzZXJpZXMgfSA9IGNvbmZpZy53LmNvbmZpZztcbiAgICAgICAgaWYgKHNlcmllc0luZGV4ID09PSAtMSkgcmV0dXJuO1xuICAgICAgICBpZiAoc2VyaWVzID09PSB1bmRlZmluZWQpIHJldHVybjtcblxuICAgICAgICBjb25zdCBzZXJpZSA9IHNlcmllc1tzZXJpZXNJbmRleF07XG4gICAgICAgIGlmIChzZXJpZS5iYXNlX3VybCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zdCBkZWZhdWx0X3VybCA9IChzZXJpZS5zdGFydF91cmwgfHwgJycpIFxuICAgICAgICAgICAgY29uc3Qgc2VhcmNoID0gc2VyaWUuZGF0YVtkYXRhUG9pbnRJbmRleF0ubWV0YS51cmxfcXVlcnk7XG4gICAgICAgICAgICBsb2NhdGlvbi5ocmVmID0gYCR7c2VyaWUuYmFzZV91cmx9PyR7ZGVmYXVsdF91cmx9JHtzZWFyY2h9YDtcbiAgICAgICAgfVxuICAgIH0sXG59XG5cbmNvbnN0IERFRklORURfVE9PTFRJUCA9IHtcbiAgICAvKiBPbiBjbGljayBldmVudCB1c2VkIGJ5IHRoZSBmbG93IGFuYWx5emUgc2VjdGlvbiwgcmVkaXJlY3QgdG8gdGhlIGN1cnJlbnQgdXJsICsgYSBzaW5nbGUgZmlsdGVyICovXG4gICAgXCJmb3JtYXRfYnl0ZXNcIiA6IGZ1bmN0aW9uKHZhbHVlLCB7IGNvbmZpZywgc2VyaWVzSW5kZXgsIGRhdGFQb2ludEluZGV4IH0pIHtcbiAgICAgICAgcmV0dXJuIE50b3BVdGlscy5ieXRlc1RvU2l6ZSh2YWx1ZSk7XG4gICAgfSxcblxuICAgIFwiZm9ybWF0X3BrdHNcIiA6IGZ1bmN0aW9uKHZhbHVlLCB7IGNvbmZpZywgc2VyaWVzSW5kZXgsIGRhdGFQb2ludEluZGV4IH0pIHtcbiAgICAgICAgcmV0dXJuIE50b3BVdGlscy5mb3JtYXRQYWNrZXRzKHZhbHVlKTtcbiAgICB9LFxuXG4gICAgLyogT24gY2xpY2sgZXZlbnQgdXNlZCBieSB0aGUgZmxvdyBhbmFseXplIHNlY3Rpb24sIHJlZGlyZWN0IHRvIHRoZSBjdXJyZW50IHVybCArIGEgc2luZ2xlIGZpbHRlciAqL1xuICAgIFwiZm9ybWF0X3ZhbHVlXCIgOiBmdW5jdGlvbih2YWx1ZSwgeyBjb25maWcsIHNlcmllc0luZGV4LCBkYXRhUG9pbnRJbmRleCB9KSB7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuZm9ybWF0VmFsdWUodmFsdWUpO1xuICAgIH0sXG5cbiAgICBcImZvcm1hdF9tdWx0aXBsZV9kYXRlXCIgOiBmdW5jdGlvbih2YWx1ZSwgeyBjb25maWcsIHNlcmllc0luZGV4LCBkYXRhUG9pbnRJbmRleCB9KSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSh2YWx1ZVswXSkgKyBcIiAtIFwiICsgbmV3IERhdGUodmFsdWVbMV0pXG4gICAgfSxcblxuICAgIC8qXG4gICAgICogIFRoaXMgZm9ybWF0dGVyIGlzIHVzZWQgYnkgdGhlIGJ1YmJsZSBob3N0IG1hcCwgZnJvbSB0aGUgeSBheGlzLFxuICAgICAqICB1c2VkIHRvIHNob3cgdGhlIEhvc3RzLCB3aXRoIHRoZWlyIHJlc3BlY3RpdmUgdmFsdWVzIFxuICAgICAqL1xuICAgIFwiZm9ybWF0X2xhYmVsX2Zyb21feHlcIiA6IGZ1bmN0aW9uKHtzZXJpZXMsIHNlcmllc0luZGV4LCBkYXRhUG9pbnRJbmRleCwgd30pIHtcbiAgICAgICAgY29uc3Qgc2VyaWUgPSB3LmNvbmZpZy5zZXJpZXNbc2VyaWVzSW5kZXhdW1wiZGF0YVwiXVtkYXRhUG9pbnRJbmRleF07XG4gICAgICAgIFxuICAgICAgICBjb25zdCB4X3ZhbHVlID0gc2VyaWVbXCJ4XCJdO1xuICAgICAgICBjb25zdCB5X3ZhbHVlID0gc2VyaWVbXCJ5XCJdO1xuICAgICAgICBjb25zdCBob3N0X25hbWUgPSBzZXJpZVtcIm1ldGFcIl1bXCJsYWJlbFwiXTtcblxuICAgICAgICBjb25zdCB4X2F4aXNfdGl0bGUgPSB3LmNvbmZpZy54YXhpcy50aXRsZS50ZXh0O1xuICAgICAgICBjb25zdCB5X2F4aXNfdGl0bGUgPSB3LmNvbmZpZy55YXhpc1swXS50aXRsZS50ZXh0O1xuXG4gICAgICAgIHJldHVybiAoYFxuICAgICAgICAgICAgPGRpdiBjbGFzcz0nYXBleGNoYXJ0cy10aGVtZS1saWdodCBhcGV4Y2hhcnRzLWFjdGl2ZScgaWQ9J3Rlc3QnPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2FwZXhjaGFydHMtdG9vbHRpcC10aXRsZScgc3R5bGU9J2ZvbnQtZmFtaWx5OiBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmOyBmb250LXNpemU6IDEycHg7Jz5cbiAgICAgICAgICAgICAgICAgICAgJHtob3N0X25hbWV9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nYXBleGNoYXJ0cy10b29sdGlwLXNlcmllcy1ncm91cCBhcGV4Y2hhcnRzLWFjdGl2ZSBkLWJsb2NrJz5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nYXBleGNoYXJ0cy10b29sdGlwLXRleHQgdGV4dC1sZWZ0Jz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxiPiR7eF9heGlzX3RpdGxlfTwvYj46ICR7eF92YWx1ZX1cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2FwZXhjaGFydHMtdG9vbHRpcC10ZXh0IHRleHQtbGVmdCc+XG4gICAgICAgICAgICAgICAgICAgICAgICA8Yj4ke3lfYXhpc190aXRsZX08L2I+OiAke3lfdmFsdWV9XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+YClcbiAgICB9LFxuICAgIFwiZm9ybWF0X2xhYmVsX2Zyb21feG5hbWVcIiA6IGZ1bmN0aW9uKHtzZXJpZXMsIHNlcmllc0luZGV4LCBkYXRhUG9pbnRJbmRleCwgd30pIHtcbiAgICAgICAgY29uc3Qgc2VyaWUgPSB3LmNvbmZpZy5zZXJpZXNbc2VyaWVzSW5kZXhdW1wiZGF0YVwiXVtkYXRhUG9pbnRJbmRleF07XG4gICAgICAgIGNvbnN0IG5hbWUgPSBzZXJpZVtcIm5hbWVcIl1cbiAgICAgICAgY29uc3QgeV92YWx1ZSA9IHNlcmllW1wieVwiXTtcbiAgICAgICAgY29uc3QgaG9zdF9uYW1lID0gc2VyaWVbXCJtZXRhXCJdW1wibGFiZWxcIl07XG5cbiAgICAgICAgY29uc3QgeF9heGlzX3RpdGxlID0gdy5jb25maWcueGF4aXMudGl0bGUudGV4dDtcbiAgICAgICAgY29uc3QgeV9heGlzX3RpdGxlID0gdy5jb25maWcueWF4aXNbMF0udGl0bGUudGV4dDtcblxuICAgICAgICByZXR1cm4gKGBcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2FwZXhjaGFydHMtdGhlbWUtbGlnaHQgYXBleGNoYXJ0cy1hY3RpdmUnIGlkPSd0ZXN0Jz5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdhcGV4Y2hhcnRzLXRvb2x0aXAtdGl0bGUnIHN0eWxlPSdmb250LWZhbWlseTogSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjsgZm9udC1zaXplOiAxMnB4Oyc+XG4gICAgICAgICAgICAgICAgICAgICR7aG9zdF9uYW1lfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2FwZXhjaGFydHMtdG9vbHRpcC1zZXJpZXMtZ3JvdXAgYXBleGNoYXJ0cy1hY3RpdmUgZC1ibG9jayc+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2FwZXhjaGFydHMtdG9vbHRpcC10ZXh0IHRleHQtbGVmdCc+XG4gICAgICAgICAgICAgICAgICAgICAgICA8Yj4ke3hfYXhpc190aXRsZX08L2I+OiAke25hbWV9XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdhcGV4Y2hhcnRzLXRvb2x0aXAtdGV4dCB0ZXh0LWxlZnQnPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGI+JHt5X2F4aXNfdGl0bGV9PC9iPjogJHt5X3ZhbHVlfVxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PmApXG4gICAgfSxcbn1cblxuLyogU3RhbmRhcmQgRm9ybWF0dGVyICovXG5jb25zdCBERUZBVUxUX0ZPUk1BVFRFUiA9IERFRklORURfVE9PTFRJUFtcImZvcm1hdF92YWx1ZVwiXTtcblxuZXhwb3J0IGNsYXNzIFdpZGdldFV0aWxzIHtcblxuICAgIHN0YXRpYyByZWdpc3RlcldpZGdldCh3aWRnZXQpIHtcbiAgICAgICAgaWYgKHdpZGdldCA9PT0gbnVsbCkgdGhyb3cgbmV3IEVycm9yKGBUaGUgcGFzc2VkIHdpZGdldCByZWZlcmVuY2UgaXMgbnVsbCFgKTtcbiAgICAgICAgaWYgKHdpZGdldC5uYW1lIGluIERFRklORURfV0lER0VUUykgdGhyb3cgbmV3IEVycm9yKGBUaGUgd2lkZ2V0ICR7d2lkZ2V0Lm5hbWV9IGlzIGFscmVhZHkgZGVmaW5lZCFgKTtcbiAgICAgICAgREVGSU5FRF9XSURHRVRTW3dpZGdldC5uYW1lXSA9IHdpZGdldDtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0V2lkZ2V0QnlOYW1lKHdpZGdldE5hbWUpIHtcbiAgICAgICAgaWYgKHdpZGdldE5hbWUgaW4gREVGSU5FRF9XSURHRVRTKSB7XG4gICAgICAgICAgICByZXR1cm4gREVGSU5FRF9XSURHRVRTW3dpZGdldE5hbWVdO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgV2lkZ2V0ICR7d2lkZ2V0TmFtZX0gbm90IGZvdW5kIWApXG4gICAgfVxufVxuXG4vKipcbiAqIERlZmluZSBhIHNpbXBsZSB3cmFwcGVyIGNsYXNzIGZvciB0aGUgd2lkZ2V0cy5cbiAqL1xuY2xhc3MgV2lkZ2V0IHtcblxuICAgIGNvbnN0cnVjdG9yKG5hbWUsIGRhdGFzb3VyY2UgPSB7fSwgdXBkYXRlVGltZSA9IDAsIGFkZGl0aW9uYWxQYXJhbXMgPSB7fSkge1xuXG4gICAgICAgIC8vIGZpZWxkIGNvbnRhaW5pbmcgdGhlIGRhdGEgZmV0Y2hlZCBmcm9tIHRoZSBkYXRhc291cmNlcyBwcm92aWRlZFxuICAgICAgICB0aGlzLl9mZXRjaGVkRGF0YSA9IFtdO1xuXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG5cbiAgICAgICAgLy8gaWYgMCB0aGVuIGRvbid0IHVwZGF0ZSB0aGUgY2hhcnQgYXV0b21hdGljYWxseSwgdGhlIHRpbWVcbiAgICAgICAgLy8gaXMgZXhwcmVzc2VkIGluIG1pbGxpc2Vjb25kc1xuICAgICAgICB0aGlzLl91cGRhdGVUaW1lID0gdXBkYXRlVGltZTtcblxuICAgICAgICB0aGlzLl9kYXRhc291cmNlID0gZGF0YXNvdXJjZTtcbiAgICAgICAgdGhpcy5fYWRkaXRpb25hbFBhcmFtcyA9IGFkZGl0aW9uYWxQYXJhbXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdCB0aGUgd2lkZ2V0LlxuICAgICAqL1xuICAgIGFzeW5jIGluaXQoKSB7XG5cbiAgICAgICAgLy8gcmVnaXN0ZXIgdGhlIHdpZGdldCB0byB0aGUgREVGSU5FRF9XSURHRVRTIG9iamVjdFxuICAgICAgICBXaWRnZXRVdGlscy5yZWdpc3RlcldpZGdldCh0aGlzKTtcbiAgICAgICAgdGhpcy5fZmV0Y2hlZERhdGEgPSBhd2FpdCB0aGlzLl9mZXRjaERhdGEoKTtcblxuICAgICAgICBpZiAodGhpcy5fdXBkYXRlVGltZSA+IDApIHtcbiAgICAgICAgICAgIHNldEludGVydmFsKGFzeW5jICgpID0+IHsgYXdhaXQgdGhpcy51cGRhdGUodGhpcy5fZGF0YXNvdXJjZS5wYXJhbXMpOyB9LCB0aGlzLl91cGRhdGVUaW1lKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3kgdGhlIHdpZGdldCBmcmVlaW5nIHRoZSByZXNvdXJjZXMgdXNlZC5cbiAgICAgKi9cbiAgICBhc3luYyBkZXN0cm95KCkgeyB9XG5cbiAgICAvKipcbiAgICAgKiBGb3JjZSB0aGUgd2lkZ2V0IHRvIHJlbG9hZCBpdCdzIGRhdGEuXG4gICAgICovXG4gICAgYXN5bmMgZGVzdHJveUFuZFVwZGF0ZShkYXRhc291cmNlUGFyYW1zID0ge30pIHtcbiAgICAgICAgYXdhaXQgdGhpcy5kZXN0cm95KCk7XG4gICAgICAgIGF3YWl0IHRoaXMudXBkYXRlKGRhdGFzb3VyY2VQYXJhbXMpO1xuICAgIH1cblxuICAgIGFzeW5jIHVwZGF0ZUJ5VXJsKHVybCkge1xuICAgICAgY29uc3QgdSA9IG5ldyBVUkwoYCR7bG9jYXRpb24ub3JpZ2lufSR7dGhpcy5fZGF0YXNvdXJjZS5uYW1lfWApO1xuICAgICAgbGV0IGVudHJpZXMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyaWVzKHVybCk7XG4gICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBlbnRyaWVzKSB7XG4gICAgICAgICAgdS5zZWFyY2hQYXJhbXMuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgICAgdGhpcy5fZGF0YXNvdXJjZS5lbmRwb2ludCA9IHUucGF0aG5hbWUgKyB1LnNlYXJjaDtcbiAgICAgIHRoaXMuX2ZldGNoZWREYXRhID0gYXdhaXQgdGhpcy5fZmV0Y2hEYXRhKCk7XG4gICAgfVxuICBcbiAgICBhc3luYyB1cGRhdGUoZGF0YXNvdXJjZVBhcmFtcyA9IHt9KSB7XG5cdC8vIGJ1aWxkIHRoZSBuZXcgZW5kcG9pbnRcbiAgICAgICAgY29uc3QgdSA9IG5ldyBVUkwoYCR7bG9jYXRpb24ub3JpZ2lufSR7dGhpcy5fZGF0YXNvdXJjZS5uYW1lfWApO1xuXG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGRhdGFzb3VyY2VQYXJhbXMpKSB7XG4gICAgICAgICAgICB1LnNlYXJjaFBhcmFtcy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9kYXRhc291cmNlLmVuZHBvaW50ID0gdS5wYXRobmFtZSArIHUuc2VhcmNoO1xuICAgICAgICB0aGlzLl9mZXRjaGVkRGF0YSA9IGF3YWl0IHRoaXMuX2ZldGNoRGF0YSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZvciBlYWNoIGRhdGFzb3VyY2VzIHByb3ZpZGVkIHRvIHRoZSBjb25zdHJ1Y3RvcixcbiAgICAgKiBkbyBhIEdFVCByZXF1ZXN0IHRvIGEgUkVTVCBlbmRwb2ludC5cbiAgICAgKi9cbiAgICBhc3luYyBfZmV0Y2hEYXRhKCkge1xuICAgICAgICBjb25zdCByZXEgPSBhd2FpdCBmZXRjaChgJHtodHRwX3ByZWZpeH0ke3RoaXMuX2RhdGFzb3VyY2UuZW5kcG9pbnR9YCk7XG4gICAgICAgIHJldHVybiBhd2FpdCByZXEuanNvbigpO1xuICAgIH1cblxufVxuXG5leHBvcnQgY2xhc3MgQ2hhcnRXaWRnZXQgZXh0ZW5kcyBXaWRnZXQge1xuXG4gICAgY29uc3RydWN0b3IobmFtZSwgdHlwZSA9ICdsaW5lJywgZGF0YXNvdXJjZSA9IHt9LCB1cGRhdGVUaW1lID0gMCwgYWRkaXRpb25hbFBhcmFtcyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKG5hbWUsIGRhdGFzb3VyY2UsIHVwZGF0ZVRpbWUsIGFkZGl0aW9uYWxQYXJhbXMpO1xuXG4gICAgICAgIHRoaXMuX2NoYXJ0VHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMuX2NoYXJ0ID0ge307XG4gICAgICAgIHRoaXMuXyRodG1sQ2hhcnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjY2FudmFzLXdpZGdldC0ke25hbWV9YCk7XG4gICAgfVxuXG4gICAgc3RhdGljIHJlZ2lzdGVyRXZlbnRDYWxsYmFjayh3aWRnZXROYW1lLCBldmVudE5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICAgIHNldFRpbWVvdXQoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCB3aWRnZXQgPSBXaWRnZXRVdGlscy5nZXRXaWRnZXRCeU5hbWUod2lkZ2V0TmFtZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgdXBkYXRlZE9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbZXZlbnROYW1lXTogY2FsbGJhY2tcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgYXdhaXQgd2lkZ2V0Ll9jaGFydC51cGRhdGVPcHRpb25zKHVwZGF0ZWRPcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgMTAwMCk7XG4gICAgfVxuXG4gICAgX2dlbmVyYXRlQ29uZmlnKCkge1xuICAgICAgICBjb25zdCBjb25maWcgPSB7XG4gICAgICAgICAgICBzZXJpZXM6IFtdLFxuICAgICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgICAgIGVuYWJsZWRPblNlcmllczogWzBdLFxuICAgICAgICAgICAgICAgIHg6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0OiAnZGQvTU0veXl5eSBISDptbTpzcycsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB5OiB7XG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24odmFsdWUsIHsgc2VyaWVzLCBzZXJpZXNJbmRleCwgZGF0YVBvaW50SW5kZXgsIHcgfSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgejoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiB0aGlzLl9jaGFydFR5cGUsXG4gICAgICAgICAgICAgICAgZXZlbnRzOiB7fSxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICB0b29sYmFyOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB4YXhpczoge1xuICAgICAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxNHB4JyxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeWF4aXM6IHtcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTRweCcsXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHpheGlzOiB7XG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzE0cHgnLFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGF0YUxhYmVsczoge1xuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxNHB4JyxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXHQgICAgbGFiZWxzOiBbXSxcbiAgICAgICAgICAgIGxlZ2VuZDoge1xuICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICAgICAgZm9udFNpemU6ICcxNHB4JyxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2JvdHRvbScsXG4gICAgICAgICAgICAgICAgb25JdGVtQ2xpY2s6IHtcbiAgICAgICAgICAgICAgICAgICAgdG9nZ2xlRGF0YVNlcmllczogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBsb3RPcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgYmFyOiB7XG4gICAgICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogNCxcbiAgICAgICAgICAgICAgICAgICAgaG9yaXpvbnRhbDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbm9EYXRhOiB7XG4gICAgICAgICAgICAgICAgdGV4dDogJ05vIERhdGEnLFxuICAgICAgICAgICAgICAgIGFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcbiAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzI0cHgnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIGNoZWNrIGlmIHRoZSBhZGRpdGlvbmFsUGFyYW1zIGZpZWxkIGNvbnRhaW5zIGFuIGFwZXggcHJvcGVydHksXG4gICAgICAgIC8vIHRoZW4gbWVyZ2UgdGhlIHR3byBjb25maWd1cmF0aW9ucyBnaXZpbmcgcHJpb3JpdHkgdG8gdGhlIGN1c3RvbSBvbmVcbiAgICAgICAgaWYgKHRoaXMuX2FkZGl0aW9uYWxQYXJhbXMgJiYgdGhpcy5fYWRkaXRpb25hbFBhcmFtcy5hcGV4KSB7XG4gICAgICAgICAgICBjb25zdCBtZXJnZWRDb25maWcgPSBPYmplY3QuYXNzaWduKGNvbmZpZywgdGhpcy5fYWRkaXRpb25hbFBhcmFtcy5hcGV4KTtcbiAgICAgICAgICAgIHJldHVybiBtZXJnZWRDb25maWc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29uZmlnO1xuICAgIH1cblxuICAgIF9idWlsZFRvb2x0aXAoY29uZmlnLCByc3ApIHtcbiAgICAgICAgLyogQnkgZGVmYXVsdCB0aGUgYXJlYUNoYXJ0IHRvb2x0aXBbeV0gaXMgb3ZlcndyaXR0ZW4gKi9cbiAgICAgICAgY29uZmlnW1widG9vbHRpcFwiXVtcInlcIl0gPSB7XG4gICAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uKHZhbHVlLCB7IHNlcmllcywgc2VyaWVzSW5kZXgsIGRhdGFQb2ludEluZGV4LCB3IH0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLyogQ2hhbmdpbmcgZXZlbnRzIGlmIGdpdmVuICovXG4gICAgICAgIGlmIChyc3BbJ3Rvb2x0aXAnXSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBheGlzIGluIHJzcFsndG9vbHRpcCddKSB7XG4gICAgICAgICAgICAgICAgaWYgKGF4aXMgPT09IFwieFwiIHx8IGF4aXMgPT09IFwieVwiIHx8IGF4aXMgPT09IFwielwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZvcm1hdHRlciA9IHJzcFsndG9vbHRpcCddW2F4aXNdWydmb3JtYXR0ZXInXTtcbiAgICAgICAgICAgICAgICAgICAgaWYoIWNvbmZpZ1sndG9vbHRpcCddW2F4aXNdKVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnWyd0b29sdGlwJ11bYXhpc10gPSB7fVxuXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ1sndG9vbHRpcCddW2F4aXNdWydmb3JtYXR0ZXInXSA9IERFRklORURfVE9PTFRJUFtmb3JtYXR0ZXJdIHx8IE50b3BVdGlsc1tmb3JtYXR0ZXJdXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKiBDdXN0b21pemFibGUgdG9vbHRpcCByZXF1ZXN0ZWQgKi9cbiAgICAgICAgICAgIGlmKHJzcFsndG9vbHRpcCddWydjdXN0b20nXSlcbiAgICAgICAgICAgICAgICBjb25maWdbJ3Rvb2x0aXAnXVsnY3VzdG9tJ10gPSBERUZJTkVEX1RPT0xUSVBbcnNwWyd0b29sdGlwJ11bJ2N1c3RvbSddXSB8fCBOdG9wVXRpbHNbcnNwWyd0b29sdGlwJ11bJ2N1c3RvbSddXVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2J1aWxkQXhpc0Zvcm1hdHRlcihjb25maWcsIGF4aXNOYW1lKSB7XG5cbiAgICAgICAgY29uc3QgYXhpcyA9IGNvbmZpZ1theGlzTmFtZV07XG4gICAgICAgIFxuICAgICAgICBpZiAoYXhpcyA9PT0gdW5kZWZpbmVkIHx8IGF4aXMubGFiZWxzID09PSB1bmRlZmluZWQpIHJldHVybjtcbiAgICAgICAgXG4gICAgICAgIC8vIGVuYWJsZSBmb3JtYXR0ZXJzXG4gICAgICAgIGlmIChheGlzLmxhYmVscy5udG9wX3V0aWxzX2Zvcm1hdHRlciAhPT0gdW5kZWZpbmVkICYmIGF4aXMubGFiZWxzLm50b3BfdXRpbHNfZm9ybWF0dGVyICE9PSAnbm9uZScpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRGb3JtYXR0ZXIgPSBheGlzLmxhYmVscy5udG9wX3V0aWxzX2Zvcm1hdHRlcjtcblxuICAgICAgICAgICAgaWYgKE50b3BVdGlsc1tzZWxlY3RlZEZvcm1hdHRlcl0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYHhheGlzOiBGb3JtYXR0aW5nIGZ1bmN0aW9uICcke3NlbGVjdGVkRm9ybWF0dGVyfScgZGlkbid0IGZvdW5kIGluc2lkZSBOdG9wVXRpbHMuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBheGlzLmxhYmVscy5mb3JtYXR0ZXIgPSBOdG9wVXRpbHNbc2VsZWN0ZWRGb3JtYXR0ZXJdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2J1aWxkRGF0YUxhYmVscyhjb25maWcsIHJzcCkge1xuICAgICAgICBpZiAocnNwW1wiZGF0YUxhYmVsc1wiXSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBbZGF0YUxhYmVsc09wdHMsIGRhdGFdIG9mIE9iamVjdC5lbnRyaWVzKHJzcFtcImRhdGFMYWJlbHNcIl0pKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnW1wiZGF0YUxhYmVsc1wiXVtkYXRhTGFiZWxzT3B0c10gPSBkYXRhO1xuICAgICAgICAgICAgfVxuICAgICAgICB9ICAgXG5cbiAgICAgICAgbGV0IGZvcm1hdHRlciA9IGNvbmZpZ1tcImRhdGFMYWJlbHNcIl1bXCJmb3JtYXR0ZXJcIl07XG4gICAgICAgIFxuICAgICAgICBpZihmb3JtYXR0ZXIgJiYgREVGSU5FRF9UT09MVElQW2Zvcm1hdHRlcl0pIHtcbiAgICAgICAgICAgIGNvbmZpZ1tcImRhdGFMYWJlbHNcIl1bXCJmb3JtYXR0ZXJcIl0gPSBERUZJTkVEX1RPT0xUSVBbZm9ybWF0dGVyXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9idWlsZENvbmZpZygpIHtcblxuICAgICAgICBjb25zdCBjb25maWcgPSB0aGlzLl9nZW5lcmF0ZUNvbmZpZygpO1xuICAgICAgICBjb25zdCByc3AgPSB0aGlzLl9mZXRjaGVkRGF0YS5yc3A7XG4gICAgICAgIFxuICAgICAgICAvLyBhZGQgYWRkaXRpb25hbCBwYXJhbXMgZmV0Y2hlZCBmcm9tIHRoZSBkYXRhc291cmNlXG4gICAgICAgIGNvbnN0IGFkZGl0aW9uYWxzID0gWydzZXJpZXMnLCAneGF4aXMnLCAneWF4aXMnLCAnY29sb3JzJywgJ2xhYmVscycsICdmaWxsJywgJ2ZpbHRlcicsICdmaWx0ZXJpbmdfbGFiZWxzJ107XG4gICAgICAgIFxuICAgICAgICBmb3IgKGNvbnN0IGFkZGl0aW9uYWwgb2YgYWRkaXRpb25hbHMpIHtcblxuICAgICAgICAgICAgaWYgKHJzcFthZGRpdGlvbmFsXSA9PT0gdW5kZWZpbmVkKSBjb250aW51ZTtcblxuICAgICAgICAgICAgaWYgKGNvbmZpZ1thZGRpdGlvbmFsXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnW2FkZGl0aW9uYWxdID0gT2JqZWN0LmFzc2lnbihjb25maWdbYWRkaXRpb25hbF0sIHJzcFthZGRpdGlvbmFsXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25maWdbYWRkaXRpb25hbF0gPSByc3BbYWRkaXRpb25hbF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8qIENoYW5naW5nIGV2ZW50cyBpZiBnaXZlbiAqL1xuICAgICAgICBpZiAocnNwWydldmVudHMnXSkge1xuICAgICAgICAgICAgLyogSnVzdCBwYXNzIGEgdGFibGUgb2YgZXZlbnRzLiBlLmcuIHsgZXZlbnRzID0geyBjbGljayA9IFwiZGJfYW5hbHl6ZVwiLCB1cGRhdGVkID0gXCJzdGFuZGFyZFwiIH0gfSovXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGV2ZW50IGluIHJzcFsnZXZlbnRzJ10pIHtcbiAgICAgICAgICAgICAgICBjb25maWdbJ2NoYXJ0J11bJ2V2ZW50cyddW2V2ZW50XSA9IERFRklORURfRVZFTlRTW3JzcFsnZXZlbnRzJ11bZXZlbnRdXVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJzcFsnaG9yaXpvbnRhbF9jaGFydCddICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbmZpZ1sncGxvdE9wdGlvbnMnXVsnYmFyJ11bJ2hvcml6b250YWwnXSA9IHJzcFsnaG9yaXpvbnRhbF9jaGFydCddO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fYnVpbGRUb29sdGlwKGNvbmZpZywgcnNwKVxuICAgICAgICB0aGlzLl9idWlsZEF4aXNGb3JtYXR0ZXIoY29uZmlnLCAneGF4aXMnKTtcbiAgICAgICAgdGhpcy5fYnVpbGRBeGlzRm9ybWF0dGVyKGNvbmZpZywgJ3lheGlzJyk7XG4gICAgICAgIHRoaXMuX2J1aWxkRGF0YUxhYmVscyhjb25maWcsIHJzcCk7XG5cbiAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9XG5cbiAgICBfaW5pdGlhbGl6ZUNoYXJ0KCkge1xuICAgICAgICBjb25zdCBjb25maWcgPSB0aGlzLl9idWlsZENvbmZpZygpO1xuICAgICAgICB0aGlzLl9jaGFydENvbmZpZyA9IGNvbmZpZztcbiAgICAgICAgdGhpcy5fY2hhcnQgPSBuZXcgQXBleENoYXJ0cyh0aGlzLl8kaHRtbENoYXJ0LCB0aGlzLl9jaGFydENvbmZpZyk7XG4gICAgICAgIHRoaXMuX2NoYXJ0LnJlbmRlcigpO1xuICAgIH1cblxuICAgIGFzeW5jIGluaXQoKSB7XG4gICAgICAgIGF3YWl0IHN1cGVyLmluaXQoKTtcbiAgICAgICAgdGhpcy5faW5pdGlhbGl6ZUNoYXJ0KCk7XG4gICAgfVxuXG4gICAgYXN5bmMgZGVzdHJveSgpIHtcbiAgICAgICAgYXdhaXQgc3VwZXIuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLl9jaGFydC5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuX2NoYXJ0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBhc3luYyB1cGRhdGUoZGF0YXNvdXJjZVBhcmFtcyA9IHt9KSB7XG4gICAgICAgIGlmKHRoaXMuX2NoYXJ0Q29uZmlnICE9PSB1bmRlZmluZWQpIHtcdCAgICBcbiAgICAgICAgICBpZiAoZGF0YXNvdXJjZVBhcmFtcykge1xuICAgICAgICAgICAgYXdhaXQgc3VwZXIudXBkYXRlKGRhdGFzb3VyY2VQYXJhbXMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhd2FpdCBzdXBlci51cGRhdGVCeVVybCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICBpZiAodGhpcy5fY2hhcnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIGV4cGVjdGluZyB0aGF0IHJzcCBjb250YWlucyBhbiBvYmplY3QgY2FsbGVkIHNlcmllc1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgY29sb3JzLCBzZXJpZXMsIGRhdGFMYWJlbHMsIGxhYmVscywgeGF4aXMsIGZpbHRlcmluZ19sYWJlbHMgfSA9IHRoaXMuX2ZldGNoZWREYXRhLnJzcDtcbiAgICAgICAgICAgICAgICAvLyB1cGRhdGUgdGhlIGNvbG9ycyBsaXN0XG4gICAgICAgICAgICAgICAgdGhpcy5fY2hhcnRDb25maWcuY29sb3JzID0gY29sb3JzO1xuICAgICAgICAgICAgICAgIHRoaXMuX2NoYXJ0Q29uZmlnLnNlcmllcyA9IHNlcmllcztcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZih4YXhpcyAmJiB4YXhpcy5jYXRlZ29yaWVzKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGFydENvbmZpZy54YXhpcy5jYXRlZ29yaWVzID0geGF4aXMuY2F0ZWdvcmllcztcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZihmaWx0ZXJpbmdfbGFiZWxzKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGFydENvbmZpZy5maWx0ZXJpbmdfbGFiZWxzID0gZmlsdGVyaW5nX2xhYmVscztcblxuICAgICAgICAgICAgICAgIGlmKGRhdGFMYWJlbHMpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZvcm1hdHRlciA9IHRoaXMuX2NoYXJ0Q29uZmlnLmRhdGFMYWJlbHMuZm9ybWF0dGVyO1xuICAgICAgICAgICAgICAgICAgICBpZihmb3JtYXR0ZXIgJiYgREVGSU5FRF9UT09MVElQW2Zvcm1hdHRlcl0pXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGFydENvbmZpZy5kYXRhTGFiZWxzLmZvcm1hdHRlciA9IERFRklORURfVE9PTFRJUFtmb3JtYXR0ZXJdO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGFydENvbmZpZy5kYXRhTGFiZWxzLmZvcm1hdHRlciA9IERFRkFVTFRfRk9STUFUVEVSO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYobGFiZWxzKSBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hhcnRDb25maWcubGFiZWxzID0gbGFiZWxzO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fY2hhcnQudXBkYXRlT3B0aW9ucyh0aGlzLl9jaGFydENvbmZpZywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBkZXN0cm95QW5kVXBkYXRlKGRhdGFzb3VyY2UgPSB7fSkge1xuICAgICAgICBhd2FpdCBzdXBlci5kZXN0cm95QW5kVXBkYXRlKGRhdGFzb3VyY2UpO1xuICAgICAgICB0aGlzLl9pbml0aWFsaXplQ2hhcnQoKTtcbiAgICB9XG5cbn1cbiIsImNvbnN0IGZpeFN1Yk1lbnVQb3NpdGlvbiA9ICgkc3VibWVudSwgJGhvdmVyQnV0dG9uKSA9PiB7XG5cbiAgICBjb25zdCBNSU5fU1BBQ0UgPSAyMDtcbiAgICBjb25zdCBNSU5fSEVJR0hUID0gMTUwO1xuXG4gICAgbGV0IGRpc3RGcm9tQWJvdmUgPSAkaG92ZXJCdXR0b24ucG9zaXRpb24oKS50b3A7XG4gICAgY29uc3Qgc3VibWVudUhlaWdodCA9ICRzdWJtZW51LmhlaWdodCgpO1xuICAgIGNvbnN0IGRvY3VtZW50SGVpZ2h0ID0gJCh3aW5kb3cpLmhlaWdodCgpO1xuXG4gICAgLy8gaWYgdGhlIHN1Ym1lbnUgaXMgdG9vIGhpZ2ggdG8gYmUgc2hvd24gdGhlbiBzZXRcbiAgICAvLyB0aGUgb3ZlcmZsb3cgb24geSBheGlzXG4gICAgaWYgKHN1Ym1lbnVIZWlnaHQgKyBkaXN0RnJvbUFib3ZlID49IGRvY3VtZW50SGVpZ2h0KSB7XG5cbiAgICAgICAgY29uc3QgY3VycmVudFN1Ym1lbnVIZWlnaHQgPSBkb2N1bWVudEhlaWdodCAtIGRpc3RGcm9tQWJvdmU7XG4gICAgICAgIGlmIChjdXJyZW50U3VibWVudUhlaWdodCA8PSBNSU5fSEVJR0hUKSB7XG4gICAgICAgICAgICBkaXN0RnJvbUFib3ZlID0gZGlzdEZyb21BYm92ZSAtIHN1Ym1lbnVIZWlnaHQgKyAkaG92ZXJCdXR0b24ub3V0ZXJIZWlnaHQoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICRzdWJtZW51LmNzcyh7J21heC1oZWlnaHQnOiBjdXJyZW50U3VibWVudUhlaWdodCAtIE1JTl9TUEFDRSwgJ292ZXJmbG93LXknOiAnYXV0byd9KVxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICAvLyBzZXQgdGhlIHN1Ym1lbnUgaGVpZ2h0XG4gICAgJHN1Ym1lbnUuY3NzKCd0b3AnLCBgJHtkaXN0RnJvbUFib3ZlfXB4YCk7XG5cbn07XG5cbiQod2luZG93KS5vbignc2Nyb2xsJywgZnVuY3Rpb24oKXtcblxuICAgIGNvbnN0IFVQUEVSX0xJTUlUID0gMzI7XG4gICAgY29uc3Qgd2luZG93U2Nyb2xsVG9wID0gJCh0aGlzKS5zY3JvbGxUb3AoKTtcblxuICAgIGlmICh3aW5kb3dTY3JvbGxUb3AgPj0gVVBQRVJfTElNSVQpIHtcbiAgICAgICAgJChgI24tbmF2YmFyYCkuYWRkQ2xhc3MoXCJzY3JvbGxlZCBiZy1saWdodFwiKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgICQoYCNuLW5hdmJhcmApLnJlbW92ZUNsYXNzKFwic2Nyb2xsZWQgYmctbGlnaHRcIik7XG4gICAgfVxuXG59KTtcblxuJCgoKSA9PiB7XG5cbiAgICBjb25zdCB0b2dnbGVTaWRlYmFyID0gKCkgPT4ge1xuICAgICAgICAvLyBpZiB0aGUgbGF5ZXIgZG9lc24ndCBleGlzdHMgdGhlbiBjcmVhdGUgaXRcbiAgICAgICAgaWYgKCQoYC5zaWRlYmFyLWNsb3NlLWxheWVyYCkubGVuZ3RoID09IDApIHtcblxuICAgICAgICAgICAgY29uc3QgJGxheWVyID0gJChgPGRpdiBjbGFzcz0nc2lkZWJhci1jbG9zZS1sYXllcicgc3R5bGU9J2Rpc3BsYXk6bm9uZSc+PC9kaXY+YCk7XG4gICAgICAgICAgICAvLyB3aGVuIHRoZSB1c2VyIGNsaWNrcyBvbiB0aGUgbGF5ZXJcbiAgICAgICAgICAgICRsYXllci5vbignY2xpY2snLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIC8vIHJlbW92ZSBhY3RpdmUgY2xhc3MgZnJvbSBzaWRlYmFyXG4gICAgICAgICAgICAgICAgJChgI24tc2lkZWJhcmApLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgICAgICAgICAvLyBoaWRlIHRoZSBsYXllciBhbmQgcmVtb3ZlIGl0IGZyb20gdGhlIERPTVxuICAgICAgICAgICAgICAgICRsYXllci5mYWRlT3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIGFwcGVuZCB0aGUgbGF5ZXIgdG8gdGhlIHdyYXBwZXJcbiAgICAgICAgICAgICQoYCN3cmFwcGVyYCkuYXBwZW5kKCRsYXllcik7XG4gICAgICAgICAgICAvLyBzaG93IHRoZSBsYXllciBpbnNpZGUgdGhlIHBhZ2VcbiAgICAgICAgICAgICRsYXllci5mYWRlSW4oKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGhpZGUgdGhlIGV4aXN0aW5nIGxheWVyIGFuZCBkZXN0cm95IGl0XG4gICAgICAgICAgICAkKGAuc2lkZWJhci1jbG9zZS1sYXllcmApLmZhZGVPdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2hvdy9oaWRlIHRoZSBzaWRlYmFyXG4gICAgICAgICQoYCNuLXNpZGViYXJgKS50b2dnbGVDbGFzcygnYWN0aXZlJyk7XG4gICAgfVxuXG4gICAgJCgnI24tc2lkZWJhciBhLnN1Ym1lbnUnKS5iaW5kKHtcbiAgICAgICAgbW91c2VlbnRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBsZXQgc3VibWVudSA9ICQodGhpcykucGFyZW50KCkuZmluZChgZGl2W2lkJD0nc3VibWVudSddYCk7XG4gICAgICAgICAgICBmaXhTdWJNZW51UG9zaXRpb24oc3VibWVudSwgJCh0aGlzKSk7XG4gICAgICAgICAgICBzdWJtZW51LnNob3coKVxuICAgICAgICB9LFxuICAgICAgICBtb3VzZWxlYXZlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGxldCBzdWJtZW51ID0gJCh0aGlzKS5wYXJlbnQoKS5maW5kKGBkaXZbaWQkPSdzdWJtZW51J11gKTtcbiAgICAgICAgICAgIHN1Ym1lbnUuaGlkZSgpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAkKGBkaXZbaWQkPSdzdWJtZW51J11gKS5iaW5kKHtcbiAgICAgICAgbW91c2VlbnRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkKHRoaXMpLnNob3coKVxuICAgICAgICB9LFxuICAgICAgICBtb3VzZWxlYXZlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICQodGhpcykuaGlkZSgpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvKiB0b2dnbGUgc2lkZWJhciBkaXNwbGF5ICovXG4gICAgJChgYnV0dG9uW2RhdGEtYnMtdG9nZ2xlPSdzaWRlYmFyJ11gKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgdG9nZ2xlU2lkZWJhcigpO1xuICAgIH0pO1xufSk7XG5cbiQod2luZG93KS5vbigncmVzaXplJywgZnVuY3Rpb24oKSB7XG5cbiAgICAvLyByZS1jYWxjIHN1Ym1lbnUgaGVpZ2h0XG4gICAgY29uc3QgJGN1cnJlbnRTdWJtZW51ID0gJCgnI24tc2lkZWJhcicpLmZpbmQoYGRpdi5zaG93W2lkJD0nc3VibWVudSddYCk7XG5cbiAgICBpZiAoJGN1cnJlbnRTdWJtZW51Lmxlbmd0aCA+IDApIHtcblxuICAgICAgICBjb25zdCAkaG92ZXJCdXR0b24gPSAkY3VycmVudFN1Ym1lbnUucGFyZW50KCkuZmluZChgYVtkYXRhLWJzLXRvZ2dsZT0nY29sbGFwc2UnXWApO1xuICAgICAgICBmaXhTdWJNZW51UG9zaXRpb24oJGN1cnJlbnRTdWJtZW51LCAkaG92ZXJCdXR0b24pO1xuICAgIH1cblxufSk7XG4iLCIvKipcbiAgICAoQykgMjAyMiAtIG50b3Aub3JnXG4qL1xuaW1wb3J0IHsgbnRvcG5nX3V0aWxpdHkgfSBmcm9tICcuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzJztcbmltcG9ydCBOdG9wVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9udG9wLXV0aWxzXCI7XG5pbXBvcnQgRm9ybWF0dGVyVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9mb3JtYXR0ZXItdXRpbHMuanNcIjtcblxuY29uc3QgbnRvcENoYXJ0QXBleCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gZGVmaW5lIGRlZmF1bHQgY2hhcnRPcHRpb25zIGZvciBhbGwgY2hhcnQgdHlwZS5cbiAgY29uc3QgX2RlZmF1bHRfQkFTRV9DaGFydE9wdGlvbnMgPSB7XG4gICAgc2VyaWVzOiBbXSxcbiAgICBjaGFydDoge1xuICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgIHRvb2xiYXI6IHtcbiAgICAgICAgdG9vbHM6IHtcbiAgICAgICAgICB6b29tb3V0OiBmYWxzZSxcbiAgICAgICAgICBkb3dubG9hZDogZmFsc2UsXG4gICAgICAgICAgem9vbWluOiBmYWxzZSxcbiAgICAgICAgICB6b29tOiBcIiBcIixcbiAgICAgICAgICBzZWxlY3Rpb246IGZhbHNlLFxuICAgICAgICAgIHBhbjogZmFsc2UsXG4gICAgICAgICAgcmVzZXQ6IGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBldmVudHM6IHt9XG4gICAgfSxcbiAgICB4YXhpczoge1xuICAgICAgdG9vbHRpcDoge1xuICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICB5YXhpczoge1xuICAgICAgbGFiZWxzOiB7XG4gICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgY29sb3JzOiBbXSxcbiAgICAgICAgICBmb250U2l6ZTogXCIxMXB4XCIsXG4gICAgICAgICAgZm9udFdlaWdodDogNDAwLFxuICAgICAgICAgIGNzc0NsYXNzOiBcIlwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB0aXRsZToge1xuICAgICAgICByb3RhdGU6IC05MCxcbiAgICAgICAgb2Zmc2V0WTogMCxcbiAgICAgICAgb2Zmc2V0WDogMCxcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICBmb250U2l6ZTogXCIxMXB4XCIsXG4gICAgICAgICAgZm9udFdlaWdodDogOTAwLFxuICAgICAgICAgIGNzc0NsYXNzOiBcIlwiXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB0b29sdGlwOiB7XG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgfSxcbiAgICB9LFxuICAgIGdyaWQ6IHtcbiAgICAgIHNob3c6IGZhbHNlLFxuICAgIH0sXG4gICAgbGVnZW5kOiB7XG4gICAgICBzaG93OiB0cnVlXG4gICAgfSxcbiAgfTtcblxuICAvLyBkZWZpbmUgZGVmYXVsdCB4YXhpcyBmb3JtYXR0ZXIgZm9yIGNoYXJ0IHdpdGggZGF0ZXRpbWUgb24geGF4aXMuXG4gIGNvbnN0IF9zZXRYVGltZUZvcm1hdHRlciA9IGZ1bmN0aW9uIChjaGFydE9wdGlvbnMpIHtcbiAgICBjaGFydE9wdGlvbnMueGF4aXMubGFiZWxzLmZvcm1hdHRlciA9IGZ1bmN0aW9uICh2YWx1ZSwgeyBzZXJpZXMsIHNlcmllc0luZGV4LCBkYXRhUG9pbnRJbmRleCwgdyB9KSB7XG4gICAgICByZXR1cm4gbnRvcG5nX3V0aWxpdHkuZnJvbV91dGNfdG9fc2VydmVyX2RhdGVfZm9ybWF0KHZhbHVlKTtcbiAgICB9O1xuICB9O1xuXG4gIC8vIGRlZmluZSBkZWZhdWx0IGNoYXJ0T3B0aW9ucyBmb3IgYXJlYSBjaGFydCB0eXBlLlxuICBjb25zdCBfZGVmYXVsdF9UU19DT0xVTU5fQ2hhcnRPcHRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgIGxldCBjaGFydE9wdGlvbnMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShfZGVmYXVsdF9CQVNFX0NoYXJ0T3B0aW9ucyk7XG4gICAgbGV0IFRTX0NPTFVNTl9DaGFydE9wdGlvbnMgPSB7XG4gICAgICBjaGFydDoge1xuICAgICAgICBzdGFja2VkOiB0cnVlLFxuICAgICAgICB0eXBlOiBcImJhclwiLFxuICAgICAgICB6b29tOiB7XG4gICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICB0eXBlOiBcInhcIixcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICB0b29sdGlwOiB7XG4gICAgICAgIC8vIHNoYXJlZDogdHJ1ZSxcbiAgICAgICAgeDoge1xuICAgICAgICAgIGZvcm1hdDogXCJkZCBNTU0geXl5eSBISDptbTpzc1wiXG4gICAgICAgIH0sXG4gICAgICAgIHk6IHt9XG4gICAgICB9LFxuICAgICAgeGF4aXM6IHtcbiAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICBkYXRldGltZVVUQzogZmFsc2UsXG4gICAgICAgICAgZm9ybWF0dGVyOiBudWxsLFxuICAgICAgICB9LFxuICAgICAgICBheGlzVGlja3M6IHtcbiAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICAgICAgdHlwZTogXCJkYXRldGltZVwiLFxuICAgICAgICBheGlzQm9yZGVyOiB7XG4gICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgICAgY29udmVydGVkQ2F0VG9OdW1lcmljOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIGRhdGFMYWJlbHM6IHtcbiAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgIH0sXG4gICAgICBzdHJva2U6IHtcbiAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgIGN1cnZlOiBcInNtb290aFwiXG4gICAgICB9LFxuICAgICAgZmlsbDoge1xuICAgICAgICB0eXBlOiBcInNvbGlkXCJcbiAgICAgIH0sXG4gICAgfTtcbiAgICBudG9wbmdfdXRpbGl0eS5jb3B5X29iamVjdF9rZXlzKFRTX0NPTFVNTl9DaGFydE9wdGlvbnMsIGNoYXJ0T3B0aW9ucywgdHJ1ZSk7XG4gICAgcmV0dXJuIGNoYXJ0T3B0aW9ucztcbiAgfSgpO1xuXG4gIC8vIGRlZmluZSBkZWZhdWx0IGNoYXJ0T3B0aW9ucyBmb3IgYXJlYSBjaGFydCB0eXBlLlxuICBjb25zdCBfZGVmYXVsdF9UU19TVEFDS0VEX0NoYXJ0T3B0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgY2hhcnRPcHRpb25zID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoX2RlZmF1bHRfQkFTRV9DaGFydE9wdGlvbnMpO1xuICAgIGxldCBUU19TVEFDS0VEX0NoYXJ0T3B0aW9ucyA9IHtcbiAgICAgIGNoYXJ0OiB7XG4gICAgICAgIHN0YWNrZWQ6IHRydWUsXG4gICAgICAgIHR5cGU6IFwiYXJlYVwiLFxuICAgICAgICB6b29tOiB7XG4gICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICB0eXBlOiBcInhcIixcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICB0b29sdGlwOiB7XG4gICAgICAgIC8vIHNoYXJlZDogdHJ1ZSxcbiAgICAgICAgeDoge1xuICAgICAgICAgIGZvcm1hdDogXCJkZCBNTU0geXl5eSBISDptbTpzc1wiXG4gICAgICAgIH0sXG4gICAgICAgIHk6IHt9XG4gICAgICB9LFxuICAgICAgeGF4aXM6IHtcbiAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgICBkYXRldGltZVVUQzogZmFsc2UsXG4gICAgICAgICAgZm9ybWF0dGVyOiBudWxsLFxuICAgICAgICB9LFxuICAgICAgICBheGlzVGlja3M6IHtcbiAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgfSxcbiAgICAgICAgdHlwZTogXCJkYXRldGltZVwiLFxuICAgICAgICBheGlzQm9yZGVyOiB7XG4gICAgICAgICAgc2hvdzogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgICAgY29udmVydGVkQ2F0VG9OdW1lcmljOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIGRhdGFMYWJlbHM6IHtcbiAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgIH0sXG4gICAgICBzdHJva2U6IHtcbiAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgIGN1cnZlOiBcInNtb290aFwiXG4gICAgICB9LFxuICAgICAgZmlsbDoge1xuICAgICAgICB0eXBlOiBcInNvbGlkXCJcbiAgICAgIH0sXG4gICAgfTtcbiAgICBudG9wbmdfdXRpbGl0eS5jb3B5X29iamVjdF9rZXlzKFRTX1NUQUNLRURfQ2hhcnRPcHRpb25zLCBjaGFydE9wdGlvbnMsIHRydWUpO1xuICAgIHJldHVybiBjaGFydE9wdGlvbnM7XG4gIH0oKTtcblxuXG4gIC8vIGRlZmluZSBkZWZhdWx0IGNoYXJ0T3B0aW9ucyBmb3IgYXJlYSBjaGFydCB0eXBlLlxuICBjb25zdCBfZGVmYXVsdF9UU19QT0xBUl9DaGFydE9wdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IGNoYXJ0T3B0aW9ucyA9IG50b3BuZ191dGlsaXR5LmNsb25lKF9kZWZhdWx0X0JBU0VfQ2hhcnRPcHRpb25zKTtcbiAgICBsZXQgVFNfU1RBQ0tFRF9DaGFydE9wdGlvbnMgPSB7XG4gICAgICBjaGFydDoge1xuICAgICAgICBzdGFja2VkOiB0cnVlLFxuICAgICAgICB0eXBlOiBcInBvbGFyQXJlYVwiLFxuICAgICAgICBoZWlnaHQ6IDQwMFxuICAgICAgfSxcbiAgICAgIHlheGlzOiB7XG4gICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgIGxhYmVsczoge1xuICAgICAgICAgIGZvcm1hdHRlcjogTnRvcFV0aWxzLmJ5dGVzVG9TaXplXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBkYXRhTGFiZWxzOiB7XG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24gKHZhbCwgb3B0cykge1xuICAgICAgICAgIHJldHVybiAodmFsID8gYCR7dmFsLnRvRml4ZWQoMSl9JWAgOiBgMCVgKVxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIGxlZ2VuZDoge1xuICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICBwb3NpdGlvbjogJ2JvdHRvbScsXG4gICAgICB9LFxuICAgICAgc3Ryb2tlOiB7XG4gICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICBjdXJ2ZTogXCJzbW9vdGhcIlxuICAgICAgfSxcbiAgICAgIGZpbGw6IHtcbiAgICAgICAgdHlwZTogXCJzb2xpZFwiXG4gICAgICB9LFxuICAgICAgdG9vbHRpcDoge1xuICAgICAgICB5OiB7XG4gICAgICAgICAgZm9ybWF0dGVyOiBOdG9wVXRpbHMuYnl0ZXNUb1NpemVcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfTtcbiAgICBudG9wbmdfdXRpbGl0eS5jb3B5X29iamVjdF9rZXlzKFRTX1NUQUNLRURfQ2hhcnRPcHRpb25zLCBjaGFydE9wdGlvbnMsIHRydWUpO1xuICAgIHJldHVybiBjaGFydE9wdGlvbnM7XG4gIH0oKTtcblxuICAvLyBkZWZpbmUgZGVmYXVsdCBjaGFydE9wdGlvbnMgZm9yIGFyZWEgY2hhcnQgdHlwZS5cbiAgY29uc3QgX2RlZmF1bHRfVFNfRE9OVVRfQ2hhcnRPcHRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgIGxldCBjaGFydE9wdGlvbnMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShfZGVmYXVsdF9CQVNFX0NoYXJ0T3B0aW9ucyk7XG4gICAgbGV0IFRTX1NUQUNLRURfQ2hhcnRPcHRpb25zID0ge1xuICAgICAgY2hhcnQ6IHtcbiAgICAgICAgc3RhY2tlZDogdHJ1ZSxcbiAgICAgICAgdHlwZTogXCJkb251dFwiLFxuICAgICAgICBoZWlnaHQ6IDMwMFxuICAgICAgfSxcbiAgICAgIHlheGlzOiB7XG4gICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgIGxhYmVsczoge1xuICAgICAgICAgIGZvcm1hdHRlcjogTnRvcFV0aWxzLmJ5dGVzVG9TaXplXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBkYXRhTGFiZWxzOiB7XG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24gKHZhbCwgb3B0cykge1xuICAgICAgICAgIHJldHVybiAodmFsID8gYCR7dmFsLnRvRml4ZWQoMSl9JWAgOiBgMCVgKVxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIGxlZ2VuZDoge1xuICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICBwb3NpdGlvbjogJ2JvdHRvbScsXG4gICAgICB9LFxuICAgICAgc3Ryb2tlOiB7XG4gICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICBjdXJ2ZTogXCJzbW9vdGhcIlxuICAgICAgfSxcbiAgICAgIGZpbGw6IHtcbiAgICAgICAgdHlwZTogXCJzb2xpZFwiXG4gICAgICB9LFxuICAgICAgdG9vbHRpcDoge1xuICAgICAgICB5OiB7XG4gICAgICAgICAgICBmb3JtYXR0ZXI6IEZvcm1hdHRlclV0aWxzLmdldEZvcm1hdHRlcihcIm51bWJlclwiKSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICBub0RhdGE6IHtcbiAgICAgICAgdGV4dDogJ05vIERhdGEnLFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIGNvbG9yOiB1bmRlZmluZWQsXG4gICAgICAgICAgZm9udFNpemU6ICcyNHB4JyxcbiAgICAgICAgICBmb250RmFtaWx5OiB1bmRlZmluZWRcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgbnRvcG5nX3V0aWxpdHkuY29weV9vYmplY3Rfa2V5cyhUU19TVEFDS0VEX0NoYXJ0T3B0aW9ucywgY2hhcnRPcHRpb25zLCB0cnVlKTtcbiAgICByZXR1cm4gY2hhcnRPcHRpb25zO1xuICB9KCk7XG5cbiAgLy8gZGVmaW5lIGRlZmF1bHQgY2hhcnRPcHRpb25zIGZvciBhcmVhIGNoYXJ0IHR5cGUuXG4gIGNvbnN0IF9kZWZhdWx0X1RTX1JBRElBTEJBUl9DaGFydE9wdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IGNoYXJ0T3B0aW9ucyA9IG50b3BuZ191dGlsaXR5LmNsb25lKF9kZWZhdWx0X0JBU0VfQ2hhcnRPcHRpb25zKTtcbiAgICBsZXQgVFNfU1RBQ0tFRF9DaGFydE9wdGlvbnMgPSB7XG4gICAgICBjaGFydDoge1xuICAgICAgICBzdGFja2VkOiB0cnVlLFxuICAgICAgICB0eXBlOiBcInJhZGlhbEJhclwiLFxuICAgICAgICBoZWlnaHQ6IDMwMFxuICAgICAgfSxcbiAgICAgIHlheGlzOiB7XG4gICAgICAgIHNob3c6IHRydWUsXG4gICAgICB9LFxuICAgICAgZGF0YUxhYmVsczoge1xuICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uICh2YWwsIG9wdHMpIHtcbiAgICAgICAgICByZXR1cm4gdmFsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgc3Ryb2tlOiB7XG4gICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICBjdXJ2ZTogXCJzbW9vdGhcIlxuICAgICAgfSxcbiAgICAgIGZpbGw6IHtcbiAgICAgICAgdHlwZTogXCJzb2xpZFwiXG4gICAgICB9LFxuICAgICAgdG9vbHRpcDoge1xuICAgICAgICB5OiB7XG4gICAgICAgICAgZm9ybWF0dGVyOiBOdG9wVXRpbHMuYnl0ZXNUb1NpemVcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICBub0RhdGE6IHtcbiAgICAgICAgdGV4dDogJ05vIERhdGEnLFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIGNvbG9yOiB1bmRlZmluZWQsXG4gICAgICAgICAgZm9udFNpemU6ICcyNHB4JyxcbiAgICAgICAgICBmb250RmFtaWx5OiB1bmRlZmluZWRcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHBsb3RPcHRpb25zOiB7XG4gICAgICAgIHJhZGlhbEJhcjoge1xuICAgICAgICAgIG9mZnNldFk6IDAsXG4gICAgICAgICAgc3RhcnRBbmdsZTogMCxcbiAgICAgICAgICBlbmRBbmdsZTogMjcwLFxuICAgICAgICAgIGhvbGxvdzoge1xuICAgICAgICAgICAgbWFyZ2luOiA1LFxuICAgICAgICAgICAgc2l6ZTogJzMwJScsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiAndHJhbnNwYXJlbnQnLFxuICAgICAgICAgICAgaW1hZ2U6IHVuZGVmaW5lZCxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGRhdGFMYWJlbHM6IHtcbiAgICAgICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgbGVnZW5kOiB7XG4gICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgIGZsb2F0aW5nOiB0cnVlLFxuICAgICAgICBmb250U2l6ZTogJzE2cHgnLFxuICAgICAgICBwb3NpdGlvbjogJ2xlZnQnLFxuICAgICAgICBvZmZzZXRYOiAxNjAsXG4gICAgICAgIG9mZnNldFk6IDE1LFxuICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICB1c2VTZXJpZXNDb2xvcnM6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgIG1hcmtlcnM6IHtcbiAgICAgICAgICBzaXplOiAwXG4gICAgICAgIH0sXG4gICAgICAgIGZvcm1hdHRlcjogZnVuY3Rpb24oc2VyaWVzTmFtZSwgb3B0cykge1xuICAgICAgICAgIHJldHVybiBzZXJpZXNOYW1lICsgXCI6ICBcIiArIG9wdHMudy5nbG9iYWxzLnNlcmllc1tvcHRzLnNlcmllc0luZGV4XVxuICAgICAgICB9LFxuICAgICAgICBpdGVtTWFyZ2luOiB7XG4gICAgICAgICAgdmVydGljYWw6IDNcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHJlc3BvbnNpdmU6IFt7XG4gICAgICAgIGJyZWFrcG9pbnQ6IDQ4MCxcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgIGxlZ2VuZDoge1xuICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfV1cbiAgICB9O1xuICAgIG50b3BuZ191dGlsaXR5LmNvcHlfb2JqZWN0X2tleXMoVFNfU1RBQ0tFRF9DaGFydE9wdGlvbnMsIGNoYXJ0T3B0aW9ucywgdHJ1ZSk7XG4gICAgcmV0dXJuIGNoYXJ0T3B0aW9ucztcbiAgfSgpO1xuXG4gIC8vIGRlZmluZSBkZWZhdWx0IGNoYXJ0T3B0aW9ucyBmb3IgYXJlYSBjaGFydCB0eXBlLlxuICBjb25zdCBfZGVmYXVsdF9UU19QSUVfQ2hhcnRPcHRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgIGxldCBjaGFydE9wdGlvbnMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShfZGVmYXVsdF9CQVNFX0NoYXJ0T3B0aW9ucyk7XG4gICAgbGV0IFRTX1NUQUNLRURfQ2hhcnRPcHRpb25zID0ge1xuICAgICAgY2hhcnQ6IHtcbiAgICAgICAgc3RhY2tlZDogdHJ1ZSxcbiAgICAgICAgdHlwZTogXCJwaWVcIixcbiAgICAgICAgaGVpZ2h0OiA0MDBcbiAgICAgIH0sXG4gICAgICB5YXhpczoge1xuICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICBmb3JtYXR0ZXI6IE50b3BVdGlscy5ieXRlc1RvU2l6ZVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZGF0YUxhYmVsczoge1xuICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uICh2YWwsIG9wdHMpIHtcbiAgICAgICAgICByZXR1cm4gKHZhbCA/IGAke3ZhbC50b0ZpeGVkKDEpfSVgIDogYDAlYClcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICBsZWdlbmQ6IHtcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgcG9zaXRpb246ICdib3R0b20nLFxuICAgICAgfSxcbiAgICAgIHN0cm9rZToge1xuICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgY3VydmU6IFwic21vb3RoXCJcbiAgICAgIH0sXG4gICAgICBmaWxsOiB7XG4gICAgICAgIHR5cGU6IFwic29saWRcIlxuICAgICAgfSxcbiAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgeToge1xuICAgICAgICAgIGZvcm1hdHRlcjogTnRvcFV0aWxzLmJ5dGVzVG9TaXplXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH07XG4gICAgbnRvcG5nX3V0aWxpdHkuY29weV9vYmplY3Rfa2V5cyhUU19TVEFDS0VEX0NoYXJ0T3B0aW9ucywgY2hhcnRPcHRpb25zLCB0cnVlKTtcbiAgICByZXR1cm4gY2hhcnRPcHRpb25zO1xuICB9KCk7XG5cbiAgLy8gZGVmaW5lIGRlZmF1bHQgY2hhcnRPcHRpb25zIGZvciBsaW5lIGNoYXJ0IHR5cGUuXG4gIGNvbnN0IF9kZWZhdWx0X1RTX0xJTkVfQ2hhcnRPcHRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgIGxldCBjaGFydE9wdGlvbnMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShfZGVmYXVsdF9CQVNFX0NoYXJ0T3B0aW9ucyk7XG4gICAgbGV0IFRTX0xJTkVfQ2hhcnRPcHRpb25zID0ge1xuICAgICAgY2hhcnQ6IHtcbiAgICAgICAgdHlwZTogXCJsaW5lXCIsXG4gICAgICAgIHpvb206IHtcbiAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgIHR5cGU6IFwieFwiLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgc2hhcmVkOiB0cnVlLFxuICAgICAgICB4OiB7XG4gICAgICAgICAgZm9ybWF0OiBcImRkIE1NTSB5eXl5IEhIOm1tOnNzXCJcbiAgICAgICAgfSxcbiAgICAgICAgeToge31cbiAgICAgIH0sXG4gICAgICB4YXhpczoge1xuICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICBkYXRldGltZVVUQzogZmFsc2UsXG4gICAgICAgICAgZm9ybWF0dGVyOiBudWxsLFxuICAgICAgICB9LFxuICAgICAgICBheGlzVGlja3M6IHtcbiAgICAgICAgICBzaG93OiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHR5cGU6IFwiZGF0ZXRpbWVcIixcbiAgICAgICAgYXhpc0JvcmRlcjoge1xuICAgICAgICAgIHNob3c6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgY29udmVydGVkQ2F0VG9OdW1lcmljOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIHN0cm9rZToge1xuICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICB3aWR0aDogMixcbiAgICAgICAgY3VydmU6IFwic21vb3RoXCJcbiAgICAgIH0sXG4gICAgICBncmlkOiB7XG4gICAgICAgIHNob3c6IHRydWUsXG4gICAgICB9LFxuICAgICAgZGF0YUxhYmVsczoge1xuICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgfSxcbiAgICB9O1xuICAgIG50b3BuZ191dGlsaXR5LmNvcHlfb2JqZWN0X2tleXMoVFNfTElORV9DaGFydE9wdGlvbnMsIGNoYXJ0T3B0aW9ucywgdHJ1ZSk7XG4gICAgcmV0dXJuIGNoYXJ0T3B0aW9ucztcbiAgfSgpO1xuXG4gIGNvbnN0IGZvcm1hdF9sYWJlbF9mcm9tX3huYW1lID0gZnVuY3Rpb24gKHsgc2VyaWVzLCBzZXJpZXNJbmRleCwgZGF0YVBvaW50SW5kZXgsIHcgfSkge1xuICAgIGNvbnN0IHNlcmllID0gdy5jb25maWcuc2VyaWVzW3Nlcmllc0luZGV4XVtcImRhdGFcIl1bZGF0YVBvaW50SW5kZXhdO1xuICAgIGNvbnN0IG5hbWUgPSBzZXJpZVtcIm5hbWVcIl1cbiAgICBjb25zdCB5X3ZhbHVlID0gc2VyaWVbXCJ5XCJdO1xuICAgIGNvbnN0IGhvc3RfbmFtZSA9IHNlcmllW1wibWV0YVwiXVtcImxhYmVsXCJdO1xuXG4gICAgY29uc3QgeF9heGlzX3RpdGxlID0gdy5jb25maWcueGF4aXMudGl0bGUudGV4dDtcbiAgICBjb25zdCB5X2F4aXNfdGl0bGUgPSB3LmNvbmZpZy55YXhpc1swXS50aXRsZS50ZXh0O1xuXG4gICAgcmV0dXJuIChgXG4gICAgICAgICAgPGRpdiBjbGFzcz0nYXBleGNoYXJ0cy10aGVtZS1saWdodCBhcGV4Y2hhcnRzLWFjdGl2ZScgaWQ9J3Rlc3QnPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdhcGV4Y2hhcnRzLXRvb2x0aXAtdGl0bGUnIHN0eWxlPSdmb250LWZhbWlseTogSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjsgZm9udC1zaXplOiAxMnB4Oyc+XG4gICAgICAgICAgICAgICAgICAke2hvc3RfbmFtZX1cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9J2FwZXhjaGFydHMtdG9vbHRpcC1zZXJpZXMtZ3JvdXAgYXBleGNoYXJ0cy1hY3RpdmUgZC1ibG9jayc+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdhcGV4Y2hhcnRzLXRvb2x0aXAtdGV4dCB0ZXh0LWxlZnQnPlxuICAgICAgICAgICAgICAgICAgICAgIDxiPiR7eF9heGlzX3RpdGxlfTwvYj46ICR7bmFtZX1cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0nYXBleGNoYXJ0cy10b29sdGlwLXRleHQgdGV4dC1sZWZ0Jz5cbiAgICAgICAgICAgICAgICAgICAgICA8Yj4ke3lfYXhpc190aXRsZX08L2I+OiAke3lfdmFsdWV9XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+YClcbiAgfTtcblxuICAvLyBkZWZpbmUgZGVmYXVsdCBjaGFydE9wdGlvbnMgZm9yIGxpbmUgY2hhcnQgdHlwZS5cbiAgY29uc3QgX2RlZmF1bHRfVFNfQlVCQkxFX0NoYXJ0T3B0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgY2hhcnRPcHRpb25zID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoX2RlZmF1bHRfQkFTRV9DaGFydE9wdGlvbnMpO1xuICAgIGxldCBUU19CVUJCTEVfQ2hhcnRPcHRpb25zID0ge1xuICAgICAgY2hhcnQ6IHtcbiAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICAgIHN0YWNrZWQ6IHRydWUsXG4gICAgICAgIHR5cGU6IFwiYnViYmxlXCIsXG4gICAgICAgIHpvb206IHtcbiAgICAgICAgICBhdXRvU2NhbGVZYXhpczogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIGxlZ2VuZDoge1xuICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICBwb3NpdGlvbjogJ2JvdHRvbScsXG4gICAgICB9LFxuICAgICAgc3Ryb2tlOiB7XG4gICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICBjdXJ2ZTogXCJzbW9vdGhcIlxuICAgICAgfSxcbiAgICAgIGZpbGw6IHtcbiAgICAgICAgdHlwZTogXCJzb2xpZFwiXG4gICAgICB9LFxuICAgICAgZXZlbnRzOiB7XG4gICAgICAgIGRhdGFQb2ludFNlbGVjdGlvbjogXCJzdGFuZGFyZFwiLFxuICAgICAgfSxcbiAgICAgIGdyaWQ6IHtcbiAgICAgICAgcGFkZGluZzoge1xuICAgICAgICAgIGxlZnQ6IDZcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICB4YXhpczoge1xuICAgICAgICB0eXBlOiAnbnVtZXJpYycsXG4gICAgICAgIGxhYmVsczoge31cbiAgICAgIH0sXG4gICAgICB5YXhpczoge1xuICAgICAgICB0eXBlOiAnbnVtZXJpYycsXG4gICAgICAgIGZvcmNlTmljZVNjYWxlOiB0cnVlLFxuICAgICAgICBsYWJlbHM6IHt9XG4gICAgICB9LFxuICAgICAgZGF0YUxhYmVsczoge1xuICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgY3VzdG9tOiBmb3JtYXRfbGFiZWxfZnJvbV94bmFtZSxcbiAgICAgIH1cbiAgICB9O1xuICAgIG50b3BuZ191dGlsaXR5LmNvcHlfb2JqZWN0X2tleXMoVFNfQlVCQkxFX0NoYXJ0T3B0aW9ucywgY2hhcnRPcHRpb25zLCB0cnVlKTtcbiAgICByZXR1cm4gY2hhcnRPcHRpb25zO1xuICB9KCk7XG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlQ2hhcnQ6IHtcbiAgICAgIFRTX0xJTkU6IFwiVFNfTElORVwiLFxuICAgICAgVFNfU1RBQ0tFRDogXCJUU19TVEFDS0VEXCIsXG4gICAgICBUU19DT0xVTU46IFwiVFNfQ09MVU1OXCIsXG4gICAgICBQSUU6IFwiUElFXCIsXG4gICAgICBET05VVDogXCJET05VVFwiLFxuICAgICAgUkFESUFMQkFSOiBcIlJBRElBTEJBUlwiLFxuICAgICAgUkFEQVI6IFwiUkFEQVJcIixcbiAgICAgIEJVQkJMRTogXCJCVUJCTEVcIixcbiAgICAgIEJBU0U6IFwiQkFTRVwiLFxuICAgIH0sXG4gICAgbmV3Q2hhcnQ6IGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICBsZXQgX2NoYXJ0T3B0aW9ucyA9IHt9O1xuICAgICAgbGV0IF9jaGFydDtcbiAgICAgIGxldCBfY2hhcnRIdG1sRWxlbWVudDtcblxuICAgICAgaWYgKHR5cGUgPT0gdGhpcy50eXBlQ2hhcnQuVFNfU1RBQ0tFRCkge1xuICAgICAgICBfY2hhcnRPcHRpb25zID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoX2RlZmF1bHRfVFNfU1RBQ0tFRF9DaGFydE9wdGlvbnMpO1xuICAgICAgICBfc2V0WFRpbWVGb3JtYXR0ZXIoX2NoYXJ0T3B0aW9ucyk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT0gdGhpcy50eXBlQ2hhcnQuVFNfTElORSkge1xuICAgICAgICBfY2hhcnRPcHRpb25zID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoX2RlZmF1bHRfVFNfTElORV9DaGFydE9wdGlvbnMpO1xuICAgICAgICBfc2V0WFRpbWVGb3JtYXR0ZXIoX2NoYXJ0T3B0aW9ucyk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT0gdGhpcy50eXBlQ2hhcnQuVFNfQ09MVU1OKSB7XG4gICAgICAgIF9jaGFydE9wdGlvbnMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShfZGVmYXVsdF9UU19DT0xVTU5fQ2hhcnRPcHRpb25zKTtcbiAgICAgICAgX3NldFhUaW1lRm9ybWF0dGVyKF9jaGFydE9wdGlvbnMpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09IHRoaXMudHlwZUNoYXJ0LlBJRSkge1xuICAgICAgICBfY2hhcnRPcHRpb25zID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoX2RlZmF1bHRfVFNfUElFX0NoYXJ0T3B0aW9ucyk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT0gdGhpcy50eXBlQ2hhcnQuRE9OVVQpIHtcbiAgICAgICAgX2NoYXJ0T3B0aW9ucyA9IG50b3BuZ191dGlsaXR5LmNsb25lKF9kZWZhdWx0X1RTX0RPTlVUX0NoYXJ0T3B0aW9ucyk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT0gdGhpcy50eXBlQ2hhcnQuUkFESUFMQkFSKSB7XG4gICAgICAgIF9jaGFydE9wdGlvbnMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShfZGVmYXVsdF9UU19SQURJQUxCQVJfQ2hhcnRPcHRpb25zKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PSB0aGlzLnR5cGVDaGFydC5QT0xBUikge1xuICAgICAgICBfY2hhcnRPcHRpb25zID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoX2RlZmF1bHRfVFNfUE9MQVJfQ2hhcnRPcHRpb25zKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PSB0aGlzLnR5cGVDaGFydC5CVUJCTEUpIHtcbiAgICAgICAgX2NoYXJ0T3B0aW9ucyA9IG50b3BuZ191dGlsaXR5LmNsb25lKF9kZWZhdWx0X1RTX0JVQkJMRV9DaGFydE9wdGlvbnMpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09IHRoaXMudHlwZUNoYXJ0LkJBU0UpIHtcbiAgICAgICAgX2NoYXJ0T3B0aW9ucyA9IG50b3BuZ191dGlsaXR5LmNsb25lKF9kZWZhdWx0X0JBU0VfQ2hhcnRPcHRpb25zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IGBudG9wQ2hhcnRBcGV4OjpuZXdDaGFydDogY2hhcnQgdHlwZSA9ICR7dHlwZX0gdW5zdXBwb3J0ZWRgO1xuICAgICAgfVxuICAgICAgICBjb25zdCBzZXRZYXhpc0Zvcm1hdHRlciA9IChjaGFydE9wdGlvbnMpID0+IHsgICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICh0eXBlb2YoY2hhcnRPcHRpb25zPy55YXhpcz8ubGFiZWxzPy5mb3JtYXR0ZXIpID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgY29uc3QgZm9ybWF0dGVyID0gY2hhcnRPcHRpb25zLnlheGlzLmxhYmVscy5mb3JtYXR0ZXI7XG4gICAgICAgICAgICAgIGxldCBjaGFydEZvcm1hdHRlciA9IEZvcm1hdHRlclV0aWxzLmdldEZvcm1hdHRlcihmb3JtYXR0ZXIpO1xuICAgICAgICAgICAgICBpZiAoY2hhcnRGb3JtYXR0ZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgY2hhcnRPcHRpb25zLnlheGlzLmxhYmVscy5mb3JtYXR0ZXIgPSBjaGFydEZvcm1hdHRlcjtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGlmIChmb3JtYXR0ZXIgPT0gXCJmb3JtYXRWYWx1ZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2hhcnRPcHRpb25zLnlheGlzLmxhYmVscy5mb3JtYXR0ZXIgPSBGb3JtYXR0ZXJVdGlscy5nZXRGb3JtYXR0ZXIoXCJudW1iZXJcIik7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBlbHNlIGlmIChmb3JtYXR0ZXIgPT0gXCJieXRlc1RvU2l6ZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2hhcnRPcHRpb25zLnlheGlzLmxhYmVscy5mb3JtYXR0ZXIgPSBGb3JtYXR0ZXJVdGlscy5nZXRGb3JtYXR0ZXIoXCJieXRlc1wiKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgIH0gICAgICAgICAgXG4gICAgICAgIH07XG4gICAgICByZXR1cm4ge1xuICAgICAgICAgIGRyYXdDaGFydDogZnVuY3Rpb24gKGh0bWxFbGVtZW50LCBjaGFydE9wdGlvbnMpIHtcbiAgICAgICAgICAvLyBhZGQvcmVwbGFjZSBjaGFydE9wdGlvbnMgZmllbGRzIGluIF9jaGFydE9wdGlvbnNcbiAgICAgICAgICAgICAgc2V0WWF4aXNGb3JtYXR0ZXIoY2hhcnRPcHRpb25zKTtcbiAgICAgICAgICBudG9wbmdfdXRpbGl0eS5jb3B5X29iamVjdF9rZXlzKGNoYXJ0T3B0aW9ucywgX2NoYXJ0T3B0aW9ucywgdHJ1ZSk7XG4gICAgICAgICAgX2NoYXJ0ID0gbmV3IEFwZXhDaGFydHMoaHRtbEVsZW1lbnQsIF9jaGFydE9wdGlvbnMpO1xuICAgICAgICAgIF9jaGFydEh0bWxFbGVtZW50ID0gaHRtbEVsZW1lbnQ7XG4gICAgICAgICAgX2NoYXJ0LnJlbmRlcigpO1xuICAgICAgICB9LFxuICAgICAgICB0b19kYXRhX3VyaTogYXN5bmMgZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgICBpZiAoX2NoYXJ0ID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgbGV0IHJlcyA9IGF3YWl0IF9jaGFydC5kYXRhVVJJKG9wdGlvbnMpO1xuICAgICAgICAgIHJldHVybiByZXMuaW1nVVJJO1xuICAgICAgICB9LFxuICAgICAgICBkZXN0cm95Q2hhcnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoX2NoYXJ0ID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgX2NoYXJ0LmRlc3Ryb3koKTtcbiAgICAgICAgfSxcbiAgICAgICAgdXBkYXRlQ2hhcnQ6IGZ1bmN0aW9uIChjaGFydE9wdGlvbnMpIHtcbiAgICAgICAgICBpZiAoX2NoYXJ0ID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICBzZXRZYXhpc0Zvcm1hdHRlcihjaGFydE9wdGlvbnMpO1xuICAgICAgICAgIF9jaGFydC51cGRhdGVPcHRpb25zKGNoYXJ0T3B0aW9ucywgZmFsc2UsIGZhbHNlLCBmYWxzZSk7XG4gICAgICAgIH0sXG4gICAgICAgIHVwZGF0ZVNlcmllczogZnVuY3Rpb24gKHNlcmllcykge1xuICAgICAgICAgIGlmIChfY2hhcnQgPT0gbnVsbCkgeyByZXR1cm47IH1cbiAgICAgICAgICBfY2hhcnQudXBkYXRlU2VyaWVzKHNlcmllcyk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlZ2lzdGVyRXZlbnQ6IGZ1bmN0aW9uIChldmVudE5hbWUsIGNhbGxiYWNrLCB1cGRhdGVDaGFydCA9IGZhbHNlKSB7XG4gICAgICAgICAgX2NoYXJ0T3B0aW9ucy5jaGFydC5ldmVudHNbZXZlbnROYW1lXSA9IGNhbGxiYWNrO1xuICAgICAgICAgIGlmICh1cGRhdGVDaGFydCA9PSB0cnVlKSB7XG4gICAgICAgICAgICBfY2hhcnQudXBkYXRlT3B0aW9ucyhfY2hhcnRPcHRpb25zKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIH0sXG4gIH07XG59KCk7XG5cbmV4cG9ydCB7IG50b3BDaGFydEFwZXggfTtcbiIsIi8qKlxuICogKEMpIDIwMjAtMjEgLSBudG9wLm9yZ1xuICogVGhpcyBmaWxlIGNvbnRhaW5zIHV0aWxpdGllcyB1c2VkIGJ5IHRoZSAqbmV3KiBkYXRhdGFibGVzLlxuICovXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCBOdG9wVXRpbHMgZnJvbSBcIi4uL250b3AtdXRpbHNcIjtcblxuXG5jb25zdCBEYXRhVGFibGVIYW5kbGVycyA9IGZ1bmN0aW9uKCkge1xuICAgIGxldCBoYW5kbGVyc0lkRGljdCA9IHt9O1xuICAgIHJldHVybiB7XG4gICAgICAgIGFkZEhhbmRsZXI6IGZ1bmN0aW9uKGgpIHtcbiAgICAgICAgICAgIGxldCBoYW5kbGVycyA9IGhhbmRsZXJzSWREaWN0W2guaGFuZGxlcklkXTtcbiAgICAgICAgICAgIGlmIChoYW5kbGVycyA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlcnMgPSBbXTtcbiAgICAgICAgICAgICAgICBoYW5kbGVyc0lkRGljdFtoLmhhbmRsZXJJZF0gPSBoYW5kbGVycztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhhbmRsZXJzLnB1c2goKCkgPT4ge1xuICAgICAgICAgICAgICAgIGgub25DbGljaygpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gYHdpbmRvd1snX0RhdGFUYWJsZUJ1dHRvbnNPbkNsaWNrJ10oJyR7aC5oYW5kbGVySWR9JywgJyR7aGFuZGxlcnMubGVuZ3RoIC0gMX0nKWA7XG4gICAgICAgIH0sXG4gICAgICAgIGdldEhhbmRsZXI6IGZ1bmN0aW9uKGhhbmRsZXJJZCwgcm93SWQpIHtcbiAgICAgICAgICAgIGxldCBoYW5kbGVycyA9IGhhbmRsZXJzSWREaWN0W2hhbmRsZXJJZF07XG4gICAgICAgICAgICBpZiAoaGFuZGxlcnMgPT0gbnVsbCkgeyByZXR1cm4gbnVsbDsgfVxuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZXJzW3Jvd0lkXTtcbiAgICAgICAgfSxcbiAgICAgICAgZGVsZXRlSGFuZGxlcnNCeUlkOiBmdW5jdGlvbihoYW5kbGVySWQpIHtcbiAgICAgICAgICAgIGhhbmRsZXJzSWREaWN0W2hhbmRsZXJJZF0gPSBudWxsO1xuICAgICAgICB9LFxuICAgIH1cbn0oKTtcbiAgICBcbndpbmRvd1tcIl9EYXRhVGFibGVCdXR0b25zT25DbGlja1wiXSA9IGZ1bmN0aW9uKGhhbmRsZXJJZCwgcm93SWQpIHtcbiAgICBsZXQgb25DbGljayA9IERhdGFUYWJsZUhhbmRsZXJzLmdldEhhbmRsZXIoaGFuZGxlcklkLCByb3dJZCk7XG4gICAgaWYgKG9uQ2xpY2sgIT0gbnVsbCkge1xuICAgICAgICBvbkNsaWNrKCk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgRGF0YVRhYmxlRmlsdGVyc01lbnUge1xuXG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29wdGlvbnN9XG4gICAgICovXG4gICAgY29uc3RydWN0b3IoeyB0YWJsZUFQSSwgZmlsdGVyTWVudUtleSwgZmlsdGVyVGl0bGUsIGZpbHRlcnMsIGNvbHVtbkluZGV4LCBpY29uID0gbnVsbCwgZXh0cmFBdHRyaWJ1dGVzID0gXCJcIiwgaWQgPSBudWxsLCB1cmwgPSBudWxsLCB1cmxQYXJhbXMgPSBudWxsLCByZW1vdmVBbGxFbnRyeSA9IGZhbHNlLCBjYWxsYmFja0Z1bmN0aW9uID0gbnVsbCB9KSB7XG4gICAgICAgIHRoaXMucmF3RmlsdGVycyA9IGZpbHRlcnM7XG4gICAgICAgIHRoaXMudGFibGVBUEkgPSB0YWJsZUFQSTtcbiAgICAgICAgdGhpcy5maWx0ZXJUaXRsZSA9IGZpbHRlclRpdGxlO1xuICAgICAgICB0aGlzLmljb24gPSBpY29uO1xuICAgICAgICB0aGlzLmZpbHRlck1lbnVLZXkgPSBmaWx0ZXJNZW51S2V5O1xuICAgICAgICB0aGlzLmNvbHVtbkluZGV4ID0gY29sdW1uSW5kZXg7XG4gICAgICAgIHRoaXMucHJldmVudFVwZGF0ZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmN1cnJlbnRGaWx0ZXJTZWxlY3RlZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy4kZGF0YXRhYmxlV3JhcHBlciA9ICQodGFibGVBUEkuY29udGV4dFswXS5uVGFibGVXcmFwcGVyKTtcbiAgICAgICAgdGhpcy5leHRyYUF0dHJpYnV0ZXMgPSBleHRyYUF0dHJpYnV0ZXM7XG4gICAgICAgIHRoaXMuaWQgPSBpZDtcbiAgICAgICAgdGhpcy51cmwgPSB1cmw7XG4gICAgICAgIHRoaXMucmVtb3ZlQWxsRW50cnkgPSByZW1vdmVBbGxFbnRyeTtcbiAgICAgICAgdGhpcy5jYWxsYmFja0Z1bmN0aW9uID0gY2FsbGJhY2tGdW5jdGlvbjtcbiAgICAgIH1cblxuICAgIGdldCBzZWxlY3RlZEZpbHRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudEZpbHRlclNlbGVjdGVkO1xuICAgIH1cblxuICAgIGluaXQoKSB7XG5cbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgLy8gd2hlbiB0aGUgZGF0YXRhYmxlIGhhcyBiZWVuIGluaXRpYWxpemVkIHJlbmRlciB0aGUgZHJvcGRvd25cbiAgICAgICAgdGhpcy4kZGF0YXRhYmxlV3JhcHBlci5vbignaW5pdC5kdCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzZWxmLl9yZW5kZXIoc2VsZi5yYXdGaWx0ZXJzKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gb24gYWpheCByZWxvYWQgdGhlbiB1cGRhdGUgdGhlIGRhdGF0YWJsZSBlbnRyaWVzXG4gICAgICAgIHRoaXMudGFibGVBUEkub24oJ2RyYXcnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc2VsZi5fdXBkYXRlKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBzZWxmO1xuICAgIH1cblxuICAgIF9jb3VudEVudHJpZXMocmVnZXgsIGRhdGEgPSBbXSkge1xuXG4gICAgICAgIGlmIChyZWdleCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRGF0YVRhYmxlRmlsdGVyc01lbnU6Ol9jb3VudEVudHJpZXMoKSA9PiB0aGUgcGFzc2VkIHJlZ2V4IGlzIHVuZGVmaW5lZCFcIik7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByZWcgPSBuZXcgUmVnRXhwKHJlZ2V4KTtcbiAgICAgICAgcmV0dXJuIGRhdGEuZmlsdGVyKGNlbGxWYWx1ZSA9PiByZWcudGVzdChjZWxsVmFsdWUpKS5sZW5ndGg7XG4gICAgfVxuXG4gICAgX2NyZWF0ZU1lbnVFbnRyeShmaWx0ZXIpIHtcblxuICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICAgICAgbGV0ICRlbnRyeSA9ICQoYDxsaSBjbGFzcz0nZHJvcGRvd24taXRlbSBwb2ludGVyJz4ke2ZpbHRlci5sYWJlbH0gPC9saT5gKTtcbiAgICAgICAgXG4gICAgICAgIGlmKHNlbGYudXJsKSB7XG4gICAgICAgICAgJGVudHJ5ID0gJChgPGxpIGNsYXNzPSdkcm9wZG93bi1pdGVtIHBvaW50ZXInPjxhIGhyZWY9IyBjbGFzcz0ncC0xIHN0YW5kYXJkLWNvbG9yJz4ke2ZpbHRlci5sYWJlbH0gPC9saT5gKTtcblxuICAgICAgICAgIGlmKGZpbHRlci5jdXJyZW50bHlfYWN0aXZlID09IHRydWUpIHtcbiAgICAgICAgICAgIC8vIHNldCBhY3RpdmUgZmlsdGVyIHRpdGxlIGFuZCBrZXlcbiAgICAgICAgICAgIGlmIChzZWxmLiRkcm9wZG93bi50aXRsZS5wYXJlbnQoKS5maW5kKGBpLmZhc2ApLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgIHNlbGYuJGRyb3Bkb3duLnRpdGxlLnBhcmVudCgpLnByZXBlbmQoYDxpIGNsYXNzPSdmYXMgZmEtZmlsdGVyJz48L2k+YCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IG5ld0NvbnRlbnQgPSAkZW50cnkuaHRtbCgpO1xuICAgICAgICAgICAgc2VsZi4kZHJvcGRvd24udGl0bGUuaHRtbChuZXdDb250ZW50KTtcbiAgICAgICAgICAgIC8vIHJlbW92ZSB0aGUgYWN0aXZlIGNsYXNzIGZyb20gdGhlIGxpIGVsZW1lbnRzXG4gICAgICAgICAgICBzZWxmLiRkcm9wZG93bi5jb250YWluZXIuZmluZCgnbGknKS5yZW1vdmVDbGFzcyhgYWN0aXZlYCk7XG4gICAgICAgICAgICAvLyBhZGQgYWN0aXZlIGNsYXNzIHRvIGN1cnJlbnQgZW50cnlcbiAgICAgICAgICAgIGlmKGZpbHRlci5rZXkgIT09ICdhbGwnKSB7XG4gICAgICAgICAgICAgICRlbnRyeS5hZGRDbGFzcyhgYWN0aXZlYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGZpbHRlci5yZWdleCAhPT0gdW5kZWZpbmVkICYmIChmaWx0ZXIuY291bnRhYmxlID09PSB1bmRlZmluZWQgfHwgZmlsdGVyLmNvdW50YWJsZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLnRhYmxlQVBJLmNvbHVtbnModGhpcy5jb2x1bW5JbmRleCkuZGF0YSgpWzBdO1xuICAgICAgICAgICAgY29uc3QgY291bnQgPSB0aGlzLl9jb3VudEVudHJpZXMoZmlsdGVyLnJlZ2V4LCBkYXRhKTtcbiAgICAgICAgICAgIGNvbnN0ICRjb3VudGVyID0gJChgPHNwYW4gY2xhc3M9J2NvdW50ZXInPigke2NvdW50fSk8L3NwYW4+YCk7XG5cbiAgICAgICAgICAgIC8vIGlmIHRoZSBjb3VudCBpcyAwIHRoZW4gaGlkZSB0aGUgbWVudSBlbnRyeVxuICAgICAgICAgICAgaWYgKGNvdW50ID09IDApICRlbnRyeS5oaWRlKCk7XG5cbiAgICAgICAgICAgIC8vYXBwZW5kIHRoZSAkY291bnRlciBvYmplY3QgaW5zaWRlIHRoZSAkZW50cnlcbiAgICAgICAgICAgICRlbnRyeS5hcHBlbmQoJGNvdW50ZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgJGVudHJ5Lm9uKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgLy8gc2V0IGFjdGl2ZSBmaWx0ZXIgdGl0bGUgYW5kIGtleVxuICAgICAgICAgIGlmIChzZWxmLiRkcm9wZG93bi50aXRsZS5wYXJlbnQoKS5maW5kKGBpLmZhc2ApLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICBzZWxmLiRkcm9wZG93bi50aXRsZS5wYXJlbnQoKS5wcmVwZW5kKGA8aSBjbGFzcz0nZmFzIGZhLWZpbHRlcic+PC9pPmApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IG5ld0NvbnRlbnQgPSAkZW50cnkuaHRtbCgpO1xuICAgICAgICAgIHNlbGYuJGRyb3Bkb3duLnRpdGxlLmh0bWwobmV3Q29udGVudCk7XG4gICAgICAgICAgLy8gcmVtb3ZlIHRoZSBhY3RpdmUgY2xhc3MgZnJvbSB0aGUgbGkgZWxlbWVudHNcbiAgICAgICAgICBzZWxmLiRkcm9wZG93bi5jb250YWluZXIuZmluZCgnbGknKS5yZW1vdmVDbGFzcyhgYWN0aXZlYCk7XG4gICAgICAgICAgLy8gYWRkIGFjdGl2ZSBjbGFzcyB0byBjdXJyZW50IGVudHJ5XG4gICAgICAgICAgaWYoZmlsdGVyLmtleSAhPT0gJ2FsbCcpIHtcbiAgICAgICAgICAgICRlbnRyeS5hZGRDbGFzcyhgYWN0aXZlYCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYoc2VsZi5jYWxsYmFja0Z1bmN0aW9uKSB7XG4gICAgICAgICAgICBzZWxmLmNhbGxiYWNrRnVuY3Rpb24oc2VsZi50YWJsZUFQSSwgZmlsdGVyKTtcbiAgICAgICAgICAgIGlmKGZpbHRlci5jYWxsYmFjaykgZmlsdGVyLmNhbGxiYWNrKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYoIXNlbGYudXJsKSB7XG4gICAgICAgICAgICBzZWxmLnByZXZlbnRVcGRhdGUgPSB0cnVlO1xuXG4gICAgICAgICAgICAvLyBpZiB0aGUgZmlsdGVyIGhhdmUgYSBjYWxsYmFjayB0aGVuIGNhbGwgaXRcbiAgICAgICAgICAgIGlmIChmaWx0ZXIuY2FsbGJhY2spIGZpbHRlci5jYWxsYmFjaygpO1xuICAgICAgICAgICAgLy8gcGVyZm9ybSB0aGUgdGFibGUgZmlsdGVyaW5nXG4gICAgICAgICAgICBzZWxmLnRhYmxlQVBJLmNvbHVtbihzZWxmLmNvbHVtbkluZGV4KS5zZWFyY2goZmlsdGVyLnJlZ2V4LCB0cnVlLCBmYWxzZSkuZHJhdygpO1xuICAgICAgICAgICAgLy8gc2V0IGN1cnJlbnQgZmlsdGVyXG4gICAgICAgICAgICBzZWxmLmN1cnJlbnRGaWx0ZXJTZWxlY3RlZCA9IGZpbHRlcjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsZi51cmxQYXJhbXMgPSB3aW5kb3cubG9jYXRpb24uc2VhcmNoXG4gICAgICAgICAgICBjb25zdCBuZXdVcmxQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHNlbGYudXJsUGFyYW1zKVxuICAgICAgICAgICAgbmV3VXJsUGFyYW1zLnNldChzZWxmLmZpbHRlck1lbnVLZXksICh0eXBlb2YoZmlsdGVyLmlkKSAhPSBcInVuZGVmaW5lZFwiKSA/IGZpbHRlci5pZCA6ICcnKVxuXG4gICAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoJycsICcnLCB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUgKyAnPycgKyBuZXdVcmxQYXJhbXMudG9TdHJpbmcoKSlcbiAgICAgICAgICAgIGxvY2F0aW9uLnJlbG9hZCgpXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gJGVudHJ5O1xuICAgIH1cblxuICAgIF9jcmVhdGVGaWx0ZXJzKGZpbHRlcnMpIHtcblxuICAgICAgICBjb25zdCBmaWx0ZXJzQ3JlYXRlZCA9IHt9O1xuXG4gICAgICAgIC8vIGZvciBlYWNoIGZpbHRlciBkZWZpbmVkIGluIHRoaXMuZmlsdGVyc1xuICAgICAgICBmb3IgKGNvbnN0IGZpbHRlciBvZiBmaWx0ZXJzKSB7XG5cbiAgICAgICAgICAgIGNvbnN0ICRmaWx0ZXIgPSB0aGlzLl9jcmVhdGVNZW51RW50cnkoZmlsdGVyKTtcbiAgICAgICAgICAgIC8vIHNhdmUgdGhlIGZpbHRlciBpbnNpZGUgdGhlICRmaWx0ZXJzIG9iamVjdFxuICAgICAgICAgICAgZmlsdGVyc0NyZWF0ZWRbZmlsdGVyLmtleV0gPSB7IGZpbHRlcjogZmlsdGVyLCAkbm9kZTogJGZpbHRlciB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZpbHRlcnNDcmVhdGVkO1xuICAgIH1cblxuICAgIF9yZW5kZXIoZmlsdGVycykge1xuICAgICAgaWYodHlwZW9mIHRoaXMuY29sdW1uSW5kZXggPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgJChgPHNwYW4gaWQ9XCIke3RoaXMuaWR9XCIgJHt0aGlzLmV4dHJhQXR0cmlidXRlc30gdGl0bGU9XCIke3RoaXMuZmlsdGVyVGl0bGV9XCI+JHt0aGlzLmljb24gfHwgdGhpcy5maWx0ZXJUaXRsZX08L3NwYW4+YCkuaW5zZXJ0QmVmb3JlKHRoaXMuJGRhdGF0YWJsZVdyYXBwZXIuZmluZCgnLmRhdGFUYWJsZXNfZmlsdGVyJykucGFyZW50KCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgJGRyb3Bkb3duQ29udGFpbmVyID0gJChgPGRpdiBpZD0nJHt0aGlzLmZpbHRlck1lbnVLZXl9X2Ryb3Bkb3duJyBjbGFzcz0nZHJvcGRvd24gZC1pbmxpbmUnPjwvZGl2PmApO1xuICAgICAgICBjb25zdCAkZHJvcGRvd25CdXR0b24gPSAkKGA8YnV0dG9uIGNsYXNzPSdidG4tbGluayBidG4gZHJvcGRvd24tdG9nZ2xlJyBkYXRhLWJzLXRvZ2dsZT1cImRyb3Bkb3duXCIgdHlwZT0nYnV0dG9uJz48L2J1dHRvbj5gKTtcbiAgICAgICAgY29uc3QgJGRyb3Bkb3duVGl0bGUgPSAkKGA8c3BhbiBjbGFzcz0nZmlsdGVyLXRpdGxlJz4ke3RoaXMuZmlsdGVyVGl0bGV9PC9zcGFuPmApO1xuICAgICAgICAkZHJvcGRvd25CdXR0b24uYXBwZW5kKCRkcm9wZG93blRpdGxlKTtcblxuICAgICAgICB0aGlzLiRkcm9wZG93biA9IHtcbiAgICAgICAgICBjb250YWluZXI6ICRkcm9wZG93bkNvbnRhaW5lcixcbiAgICAgICAgICB0aXRsZTogJGRyb3Bkb3duVGl0bGUsXG4gICAgICAgICAgYnV0dG9uOiAkZHJvcGRvd25CdXR0b25cbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmZpbHRlcnMgPSB0aGlzLl9jcmVhdGVGaWx0ZXJzKGZpbHRlcnMpO1xuXG4gICAgICAgIGNvbnN0ICRtZW51Q29udGFpbmVyID0gJChgPHVsIGNsYXNzPSdkcm9wZG93bi1tZW51IGRyb3Bkb3duLW1lbnUtbGctZW5kIHNjcm9sbGFibGUtZHJvcGRvd24nIGlkPScke3RoaXMuZmlsdGVyTWVudUtleX1fZHJvcGRvd25fbWVudSc+PC91bD5gKTtcbiAgICAgICAgZm9yIChjb25zdCBbXywgZmlsdGVyXSBvZiBPYmplY3QuZW50cmllcyh0aGlzLmZpbHRlcnMpKSB7XG4gICAgICAgICAgICAkbWVudUNvbnRhaW5lci5hcHBlbmQoZmlsdGVyLiRub2RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHRoZSBBbGwgZW50cnkgaXMgY3JlYXRlZCBieSB0aGUgb2JqZWN0XG4gICAgICAgIGlmKCF0aGlzLnJlbW92ZUFsbEVudHJ5KSB7XG4gICAgICAgICAgY29uc3QgYWxsRmlsdGVyID0gdGhpcy5fZ2VuZXJhdGVBbGxGaWx0ZXIoKTtcbiAgICAgICAgICAkbWVudUNvbnRhaW5lci5wcmVwZW5kKHRoaXMuX2NyZWF0ZU1lbnVFbnRyeShhbGxGaWx0ZXIpKTsgIFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBhcHBlbmQgdGhlIGNyZWF0ZWQgZHJvcGRvd24gaW5zaWRlXG4gICAgICAgICRkcm9wZG93bkNvbnRhaW5lci5hcHBlbmQoJGRyb3Bkb3duQnV0dG9uKTtcbiAgICAgICAgJGRyb3Bkb3duQ29udGFpbmVyLmFwcGVuZCgkbWVudUNvbnRhaW5lcik7XG4gICAgICAgIC8vIGFwcGVuZCB0aGUgZHJvcGRvd24gbWVudSBpbnNpZGUgdGhlIGZpbHRlciB3cmFwcGVyXG4gICAgICAgICRkcm9wZG93bkNvbnRhaW5lci5pbnNlcnRCZWZvcmUodGhpcy4kZGF0YXRhYmxlV3JhcHBlci5maW5kKCcuZGF0YVRhYmxlc19maWx0ZXInKS5wYXJlbnQoKSk7XG5cbiAgICAgICAgdGhpcy5fc2VsZWN0RmlsdGVyRnJvbVN0YXRlKHRoaXMuZmlsdGVyTWVudUtleSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX3NlbGVjdEZpbHRlckZyb21TdGF0ZShmaWx0ZXJLZXkpIHtcblxuICAgICAgICBpZiAoIXRoaXMudGFibGVBUEkuc3RhdGUpIHJldHVybjtcbiAgICAgICAgaWYgKCF0aGlzLnRhYmxlQVBJLnN0YXRlLmxvYWRlZCgpKSByZXR1cm47XG4gICAgICAgIGlmICghdGhpcy50YWJsZUFQSS5zdGF0ZS5sb2FkZWQoKS5maWx0ZXJzKSByZXR1cm47XG5cbiAgICAgICAgLy8gc2F2ZSB0aGUgY3VycmVudCB0YWJsZSBzdGF0ZVxuICAgICAgICB0YWJsZUFQSS5zdGF0ZS5zYXZlKCk7XG4gICAgfVxuXG4gICAgX2dlbmVyYXRlQWxsRmlsdGVyKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAga2V5OiAnYWxsJyxcbiAgICAgICAgICAgIGxhYmVsOiBpMThuX2V4dC5hbGwsXG4gICAgICAgICAgICByZWdleDogJycsXG4gICAgICAgICAgICBjb3VudGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgY2FsbGJhY2s6ICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLiRkcm9wZG93bi50aXRsZS5wYXJlbnQoKS5maW5kKCdpLmZhcy5mYS1maWx0ZXInKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLiRkcm9wZG93bi50aXRsZS5odG1sKGAke3RoaXMuZmlsdGVyVGl0bGV9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgX3VwZGF0ZSgpIHtcblxuICAgICAgICAvLyBpZiB0aGUgZmlsdGVycyBoYXZlIG5vdCBiZWVuIGluaXRpYWxpemVkIGJ5IF9yZW5kZXIgdGhlbiByZXR1cm5cbiAgICAgICAgaWYgKHRoaXMuZmlsdGVycyA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG4gICAgICAgIGlmICh0aGlzLnByZXZlbnRVcGRhdGUpIHtcbiAgICAgICAgICAgIHRoaXMucHJldmVudFVwZGF0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChjb25zdCBbXywgZmlsdGVyXSBvZiBPYmplY3QuZW50cmllcyh0aGlzLmZpbHRlcnMpKSB7XG4gICAgICAgICAgICBpZiAoZmlsdGVyLmNvdW50YWJsZSA9PSBmYWxzZSB8fCBmaWx0ZXIuZmlsdGVyLmNvdW50YWJsZSA9PSBmYWxzZSkgY29udGludWU7XG5cbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLnRhYmxlQVBJLmNvbHVtbnModGhpcy5jb2x1bW5JbmRleCkuZGF0YSgpWzBdO1xuICAgICAgICAgICAgY29uc3QgY291bnQgPSB0aGlzLl9jb3VudEVudHJpZXMoZmlsdGVyLmZpbHRlci5yZWdleCwgZGF0YSk7XG5cbiAgICAgICAgICAgIC8vIGhpZGUgdGhlIGZpbHRlciBpZiB0aGUgY291bnQgaXMgemVyb1xuICAgICAgICAgICAgKGNvdW50ID09IDApID8gZmlsdGVyLiRub2RlLmhpZGUoKSA6IGZpbHRlci4kbm9kZS5zaG93KCk7XG4gICAgICAgICAgICAvLyB1cGRhdGUgdGhlIGNvdW50ZXIgbGFiZWxcbiAgICAgICAgICAgIGZpbHRlci4kbm9kZS5maW5kKCcuY291bnRlcicpLnRleHQoYCgke2NvdW50fSlgKTtcbiAgICAgICAgICAgIC8vIHVwZGF0ZSB0aGUgc2VsZWN0ZWQgYnV0dG9uIGNvdW50ZXJcbiAgICAgICAgICAgIHRoaXMuJGRyb3Bkb3duLmJ1dHRvbi5maW5kKCcuY291bnRlcicpLnRleHQoYCgke2NvdW50fSlgKTtcbiAgICAgICAgfVxuICAgIH1cblxufVxuXG5leHBvcnQgY2xhc3MgRGF0YVRhYmxlVXRpbHMge1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIGEgc3RhbmRhcmQgY29uZmlnIGZvciB0aGUgU3ByeW1lZGlhIChjKSBEYXRhVGFibGVzXG4gICAgICovXG4gICAgc3RhdGljIGdldFN0ZERhdGF0YWJsZUNvbmZpZyhkdEJ1dHRvbnMgPSBbXSwgZG9tID0gXCI8J3Jvdyc8J2NvbC1zbS0yIGQtaW5saW5lLWJsb2NrJ2w+PCdjb2wtc20tMTAgdGV4dC1lbmQgZC1pbmxpbmUtYmxvY2snPCdkdC1zZWFyY2gnZj5CPnJ0aXA+XCIpIHtcblxuICAgICAgICAvLyBoaWRlIHRoZSBidXR0b25zIHNlY3Rpb24gaWYgdGhlcmUgYXJlbid0IGJ1dHRvbnMgaW5zaWRlIHRoZSBhcnJheVxuICAgICAgICBpZiAoZHRCdXR0b25zLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICBkb20gPSBcImZCcnRpcFwiO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRvbTogZG9tLFxuICAgICAgICAgICAgcGFnaW5nVHlwZTogJ2Z1bGxfbnVtYmVycycsXG4gICAgICAgICAgICBsZW5ndGhNZW51OiBbWzEwLCAyMCwgNTAsIDEwMF0sIFsxMCwgMjAsIDUwLCAxMDBdXSxcbiAgICAgICAgICAgIGxhbmd1YWdlOiB7XG4gICAgICAgICAgICAgICAgc2VhcmNoOiBpMThuLnNjcmlwdF9zZWFyY2gsXG4gICAgICAgICAgICAgICAgcGFnaW5hdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXM6ICcmbHQ7JyxcbiAgICAgICAgICAgICAgICAgICAgbmV4dDogJyZndDsnLFxuICAgICAgICAgICAgICAgICAgICBmaXJzdDogJ8KrJyxcbiAgICAgICAgICAgICAgICAgICAgbGFzdDogJ8K7J1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYXZlU3RhdGU6IHRydWUsXG4gICAgICAgICAgICByZXNwb25zaXZlOiB0cnVlLFxuICAgICAgICAgICAgYnV0dG9uczoge1xuICAgICAgICAgICAgICAgIGJ1dHRvbnM6IGR0QnV0dG9ucyxcbiAgICAgICAgICAgICAgICBkb206IHtcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdidG4gYnRuLWxpbmsnXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnZC1pbmxpbmUtYmxvY2snXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgY3JlYXRlTGlua0NhbGxiYWNrKGFjdGlvbikge1xuICAgICAgICBsZXQgaGFuZGxlciA9IFwiXCI7XG4gICAgICAgIGxldCBmT25DbGljayA9IERhdGFUYWJsZUhhbmRsZXJzLmFkZEhhbmRsZXIoYWN0aW9uLmhhbmRsZXIpO1xuICAgICAgICBoYW5kbGVyID0gYG9uY2xpY2s9XCIke2ZPbkNsaWNrfVwiYDtcbiAgICAgICAgcmV0dXJuIGA8YSBocmVmPSNcbiAgICAgICAgICAgICAgICAgICAke2hhbmRsZXJ9PlxuICAgICAgICAgICAgICAgICAgICR7YWN0aW9uLnRleHQgfHwgJyd9XG4gICAgICAgICAgICAgICAgPC9hPmA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXhhbXBsZSBvZiBhY3Rpb246XG4gICAgICoge1xuICAgICAqICBjbGFzczogc3RyaW5nLFxuICAgICAqICBkYXRhOiBvYmplY3QsXG4gICAgICogIGljb246IHN0cmluZyxcbiAgICAgKiAgbW9kYWw6IHN0cmluZyxcbiAgICAgKiAgaHJlZjogc3RyaW5nLFxuICAgICAqICBoaWRkZW46IGJvb2wsXG4gICAgICogfVxuICAgICAqIEBwYXJhbSB7Kn0gYWN0aW9uc1xuICAgICAqL1xuICAgIHN0YXRpYyBjcmVhdGVBY3Rpb25CdXR0b25zKGFjdGlvbnMgPSBbXSkge1xuXG4gICAgICAgIGNvbnN0IGJ1dHRvbnMgPSBbXTtcbiAgICAgICAgY29uc3QgZHJvcGRvd25CdXR0b24gPSAnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1zZWNvbmRhcnkgZHJvcGRvd24tdG9nZ2xlXCIgZGF0YS1icy10b2dnbGU9XCJkcm9wZG93blwiIGFyaWEtZXhwYW5kZWQ9XCJmYWxzZVwiPjxpIGNsYXNzPVwiZmFzIGZhLWFsaWduLWp1c3RpZnlcIj48L2k+PC9idXR0b24+J1xuXG4gICAgICAgIGFjdGlvbnMuZm9yRWFjaCgoYWN0aW9uLCBpKSA9PiB7XG4gICAgICAgICAgICBsZXQgaGFuZGxlciA9IFwiXCI7XG4gICAgICAgICAgICBpZiAoYWN0aW9uLmhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICBsZXQgZk9uQ2xpY2sgPSBEYXRhVGFibGVIYW5kbGVycy5hZGRIYW5kbGVyKGFjdGlvbi5oYW5kbGVyKTtcbiAgICAgICAgICAgICAgICBoYW5kbGVyID0gYG9uY2xpY2s9XCIke2ZPbkNsaWNrfVwiYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBidXR0b24gPSAoYFxuICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgIDxhXG4gICAgICAgICAgICAgICAgICAgICR7KGFjdGlvbi5ocmVmIHx8IGFjdGlvbi5tb2RhbCkgPyBgaHJlZj0nJHthY3Rpb24uaHJlZiB8fCBhY3Rpb24ubW9kYWx9J2AgOiBgYH1cbiAgICAgICAgICAgICAgICAgICAgJHtoYW5kbGVyfVxuICAgICAgICAgICAgICAgICAgICAkeyhhY3Rpb24ub25jbGljaykgPyBgb25jbGljaz0nJHthY3Rpb24ub25jbGlja30nYCA6IGBgfVxuICAgICAgICAgICAgICAgICAgICAke2FjdGlvbi5tb2RhbCA/IFwiZGF0YS1icy10b2dnbGU9J21vZGFsJ1wiIDogYGB9XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzPSdkcm9wZG93bi1pdGVtICR7YWN0aW9uLmNsYXNzID8gYWN0aW9uLmNsYXNzIDogYGB9J1xuICAgICAgICAgICAgICAgICAgICAke2FjdGlvbi5oaWRkZW4gPyBcInN0eWxlPSdkaXNwbGF5OiBub25lJ1wiIDogYGB9XG4gICAgICAgICAgICAgICAgICAgICR7YWN0aW9uLmV4dGVybmFsID8gXCJ0YXJnZXQ9J19hYm91dCdcIiA6IGBgfVxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSdmYXMgJHthY3Rpb24uaWNvbn0nPjwvaT4gJHthY3Rpb24udGl0bGUgfHwgJyd9XG4gICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgIGApO1xuICAgICAgICAgICAgYnV0dG9ucy5wdXNoKGJ1dHRvbik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGxpc3QgPSBgPHVsIGNsYXNzPVwiZHJvcGRvd24tbWVudVwiPiR7YnV0dG9ucy5qb2luKCcnKX08L3VsPmBcblxuICAgICAgICByZXR1cm4gKGA8ZGl2IGNsYXNzPSdkcm9wZG93bic+JHtkcm9wZG93bkJ1dHRvbn0ke2xpc3R9PC9kaXY+YCk7XG4gICAgfVxuXG4gICAgc3RhdGljIGRlbGV0ZUJ1dHRvbkhhbmRsZXJzKGhhbmRsZXJJZCkge1xuICAgICAgICBEYXRhVGFibGVIYW5kbGVycy5kZWxldGVIYW5kbGVyc0J5SWQoaGFuZGxlcklkKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgc2V0QWpheENvbmZpZyhjb25maWcsIHVybCwgZGF0YVNyYyA9ICcnLCBtZXRob2QgPSBcImdldFwiLCBwYXJhbXMgPSB7fSkge1xuXG4gICAgICAgIGNvbmZpZy5hamF4ID0ge1xuICAgICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgICB0eXBlOiBtZXRob2QsXG4gICAgICAgICAgICBkYXRhU3JjOiBkYXRhU3JjLFxuICAgICAgICAgICAgZGF0YTogZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJC5leHRlbmQoe30sIGQsIHBhcmFtcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29uZmlnO1xuICAgIH1cblxuICAgIHN0YXRpYyBleHRlbmRDb25maWcoY29uZmlnLCBleHRlbnNpb24pIHtcblxuICAgICAgICAvLyBpZiB0aGVyZSBhcmUgY3VzdG9tIGZpbHRlcnMgdGhlbiBtYW5hZ2Ugc3RhdGUgaW4gdGhpcyB3YXlcbiAgICAgICAgaWYgKGV4dGVuc2lvbi5oYXNGaWx0ZXJzKSB7XG5cbiAgICAgICAgICAgIGV4dGVuc2lvbi5zdGF0ZVNhdmVDYWxsYmFjayA9IGZ1bmN0aW9uIChzZXR0aW5ncywgZGF0YSkge1xuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdEYXRhVGFibGVzXycgKyBzZXR0aW5ncy5zSW5zdGFuY2UsIEpTT04uc3RyaW5naWZ5KGRhdGEpKVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgZXh0ZW5zaW9uLnN0YXRlTG9hZENhbGxiYWNrID0gZnVuY3Rpb24gKHNldHRpbmdzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ0RhdGFUYWJsZXNfJyArIHNldHRpbmdzLnNJbnN0YW5jZSkpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLy8gb24gc2F2aW5nIHRoZSB0YWJsZSBzdGF0ZSBzdG9yZSB0aGUgc2VsZWN0ZWQgZmlsdGVyc1xuICAgICAgICAgICAgZXh0ZW5zaW9uLnN0YXRlU2F2ZVBhcmFtcyA9IGZ1bmN0aW9uIChzZXR0aW5ncywgZGF0YSkge1xuXG4gICAgICAgICAgICAgICAgLy8gc2F2ZSB0aGUgZmlsdGVycyBzZWxlY3RlZCBmcm9tIHRoZSB1c2VyIGluc2lkZSB0aGUgc3RhdGVcbiAgICAgICAgICAgICAgICAkKCdbZGF0YS1maWx0ZXJdJykuZWFjaChmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYWN0aXZlRmlsdGVyID0gJCh0aGlzKS5maW5kKGBsaS5hY3RpdmVgKS5kYXRhKCdmaWx0ZXIta2V5Jyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghYWN0aXZlRmlsdGVyKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlIGZpbHRlcnMgb2JqZWN0IGlzIG5vdCBhbGxvY2F0ZWQgdGhlbiBpbml0aXppYWxpemVzIGl0XG4gICAgICAgICAgICAgICAgICAgIGlmICghZGF0YS5maWx0ZXJzKSBkYXRhLmZpbHRlcnMgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5maWx0ZXJzWyQodGhpcykuZGF0YSgnZmlsdGVyJyldID0gYWN0aXZlRmlsdGVyO1xuXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY29uc3QgdXNlckluaXRDb21wbGV0ZSA9IGV4dGVuc2lvbi5pbml0Q29tcGxldGU7XG5cbiAgICAgICAgLy8gY29uc3QgaW5pdENvbXBsZXRlID0gKHNldHRpbmdzLCBqc29uKSA9PiB7XG4gICAgICAgIC8vICAgICBpZiAodXNlckluaXRDb21wbGV0ZSAhPT0gdW5kZWZpbmVkKSB1c2VySW5pdENvbXBsZXRlKHNldHRpbmdzLCBqc29uKTtcbiAgICAgICAgLy8gICAgIC8vIHR1cm4gb24gdG9vbHRpcHNcbiAgICAgICAgLy8gICAgICQoYC5hY3Rpb25zLWdyb3VwIFt0aXRsZV1gKS50b29sdGlwKCdlbmFibGUnKTtcbiAgICAgICAgLy8gfTtcblxuICAgICAgICAvLyAvLyBvdmVycmlkZSBpbml0Q29tcGxldGUgZnVuY3Rpb25cbiAgICAgICAgLy8gZXh0ZW5zaW9uLmluaXRDb21wbGV0ZSA9IGluaXRDb21wbGV0ZTtcblxuICAgICAgICByZXR1cm4gJC5leHRlbmQoe30sIGNvbmZpZywgZXh0ZW5zaW9uKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGb3JtYXQgdGhlIHBhc3NlZCBzZWNvbmRzIGludG8gdGhlIFwiSEg6TU06U1NcIiBzdHJpbmcuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNlY29uZHNcbiAgICAgKi9cbiAgICBzdGF0aWMgc2Vjb25kc1RvSEhNTVNTKHNlY29uZHMpIHtcblxuICAgICAgICBjb25zdCBwYWRaZXJvZXMgPSBuID0+IGAke259YC5wYWRTdGFydCgyLCAnMCcpO1xuXG4gICAgICAgIGNvbnN0IHNlYyA9IHNlY29uZHMgJSA2MDtcbiAgICAgICAgY29uc3QgbWlucyA9IE1hdGguZmxvb3Ioc2Vjb25kcyAvIDYwKSAlIDYwO1xuICAgICAgICBjb25zdCBob3VycyA9IE1hdGguZmxvb3Ioc2Vjb25kcyAvIDM2MDApO1xuXG4gICAgICAgIHJldHVybiBgJHtwYWRaZXJvZXMoaG91cnMpfToke3BhZFplcm9lcyhtaW5zKX06JHtwYWRaZXJvZXMoc2VjKX1gO1xuICAgIH1cblxuICAgIC8qKlxuICAgICogT3BlbiB0aGUgcG9vbCBlZGl0IG1vZGFsIG9mIGEgY2hvc2VuIHBvb2wgaWYgdGhlIHF1ZXJ5IHBhcmFtcyBjb250YWlucyB0aGUgcG9vbCBwYXJhbWF0ZXJcbiAgICAqIEBwYXJhbSB0YWJsZUFQSVxuICAgICovXG4gICAgc3RhdGljIG9wZW5FZGl0TW9kYWxCeVF1ZXJ5KHBhcmFtcykge1xuXG4gICAgICAgIGNvbnN0IHVybFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7XG4gICAgICAgIGlmICghdXJsUGFyYW1zLmhhcyhwYXJhbXMucGFyYW1OYW1lKSkgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IGRhdGFJRCA9IHVybFBhcmFtcy5nZXQocGFyYW1zLnBhcmFtTmFtZSk7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBwYXJhbXMuZGF0YXRhYmxlSW5zdGFuY2UuZGF0YSgpLnRvQXJyYXkoKS5maW5kKChkYXRhID0+IGRhdGFbcGFyYW1zLnBhcmFtTmFtZV0gPT0gZGF0YUlEKSk7XG5cbiAgICAgICAgLy8gaWYgdGhlIGNhbmNlbElmIHBhcmFtIGhhcyBiZWVuIHBhc3NlZFxuICAgICAgICAvLyB0aGVuIHRlc3QgdGhlIGNhbmNlbElmIGZ1bmN0aW9uLCBpZiB0aGUgcmV0dXJuIHZhbHVlXG4gICAgICAgIC8vIGlzIHRydWUgdGhlbiBjYW5jZWwgdGhlIG1vZGFsIG9wZW5pbmdcbiAgICAgICAgaWYgKHR5cGVvZiAocGFyYW1zLmNhbmNlbElmKSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgaWYgKHBhcmFtcy5jYW5jZWxJZihkYXRhKSkgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgJG1vZGFsID0gJChgIyR7cGFyYW1zLm1vZGFsSGFuZGxlci5nZXRNb2RhbElEKCl9YCk7XG5cbiAgICAgICAgLy8gaWYgdGhlIHBvb2wgaWQgaXMgdmFsaWQgdGhlbiBvcGVuIHRoZSBlZGl0IG1vZGFsXG4gICAgICAgIGlmIChkYXRhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHBhcmFtcy5tb2RhbEhhbmRsZXIuaW52b2tlTW9kYWxJbml0KGRhdGEpO1xuICAgICAgICAgICAgJG1vZGFsLm1vZGFsKCdzaG93Jyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXVybFBhcmFtcy5oYXMoJ3JlZmVyZXInKSkge1xuICAgICAgICAgICAgJG1vZGFsLm9uKCdoaWRkZW4uYnMubW9kYWwnLCBmdW5jdGlvbiAoZSkge1xuXG4gICAgICAgICAgICAgICAgY29uc3QgdXJsID0gbmV3IFVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gICAgICAgICAgICAgICAgdXJsLnNlYXJjaFBhcmFtcy5kZWxldGUocGFyYW1zLnBhcmFtTmFtZSk7XG5cbiAgICAgICAgICAgICAgICBoaXN0b3J5LnJlcGxhY2VTdGF0ZSh7fSwgJycsIHVybC50b1N0cmluZygpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlZmVyZXIgPSB1cmxQYXJhbXMuZ2V0KCdyZWZlcmVyJyk7XG5cbiAgICAgICAgJG1vZGFsLm9uKCdoaWRkZW4uYnMubW9kYWwnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uID0gcmVmZXJlcjtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGFkZFRvZ2dsZUNvbHVtbnNEcm9wZG93bih0YWJsZUFQSSwgdG9nZ2xlQ2FsbGJhY2sgPSAoY29sLCB2aXNpYmxlKSA9PiB7fSkge1xuXG4gICAgICAgIGlmICh0YWJsZUFQSSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyAnVGhlICR0YWJsZSBpcyB1bmRlZmluZWQhJztcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHRhYmxlSUQgPSB0YWJsZUFQSS50YWJsZSgpLm5vZGUoKS5pZDtcblxuICAgICAgICBEYXRhVGFibGVVdGlscy5fbG9hZENvbHVtbnNWaXNpYmlsaXR5KHRhYmxlQVBJKS50aGVuKGZ1bmN0aW9uIChmZXRjaGVkRGF0YSkge1xuXG4gICAgICAgICAgICBsZXQgc2F2ZWRDb2x1bW5zID0gWy0xXTtcbiAgICAgICAgICAgIGlmIChmZXRjaGVkRGF0YS5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgc2F2ZWRDb2x1bW5zID0gZmV0Y2hlZERhdGEuY29sdW1ucy5tYXAoaSA9PiBwYXJzZUludChpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oZmV0Y2hlZERhdGEubWVzc2FnZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGNvbHVtbnMgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IGlnbm9yZWRDb2x1bW5zID0gW107XG4gICAgICAgICAgICBjb25zdCAkZGF0YXRhYmxlV3JhcHBlciA9ICQodGFibGVBUEkuY29udGV4dFswXS5uVGFibGVXcmFwcGVyKTtcblxuICAgICAgICAgICAgLy8gZ2V0IHRoZSB0YWJsZSBoZWFkZXJzIFxuICAgICAgICAgICAgdGFibGVBUEkuY29sdW1ucygpLmV2ZXJ5KGZ1bmN0aW9uIChpKSB7XG5cbiAgICAgICAgICAgICAgICAvLyBhdm9pZCBhbHJlYWR5IGhpZGRlbiBjb2x1bW5zXG4gICAgICAgICAgICAgICAgaWYgKCF0YWJsZUFQSS5jb2x1bW4oaSkudmlzaWJsZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlnbm9yZWRDb2x1bW5zLnB1c2goaSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb2x1bW5zLnB1c2goeyBpbmRleDogaSwgbmFtZTogdGhpcy5oZWFkZXIoKS50ZXh0Q29udGVudCwgbGFiZWw6IHRoaXMuaTE4bi5uYW1lIC8qIEh1bWFuLXJlYWRhYmxlIGNvbHVtbiBuYW1lICovIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNvbnN0ICRidG5Hcm91cCA9ICQoYFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJidG4tZ3JvdXBcIj5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLWxpbmsgZHJvcGRvd24tdG9nZ2xlXCIgZGF0YS1icy10b2dnbGU9XCJkcm9wZG93blwiIGFyaWEtaGFzcG9wdXA9XCJ0cnVlXCIgYXJpYS1leHBhbmRlZD1cImZhbHNlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1leWVcIj48L2k+XG4gICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgYCk7XG5cbiAgICAgICAgICAgIGNvbnN0ICRkcm9wZG93bk1lbnUgPSAkKGA8ZGl2IGNsYXNzPVwiZHJvcGRvd24tbWVudSBkcm9wZG93bi1tZW51LXJpZ2h0XCIgc3R5bGU9J3dpZHRoOiBtYXgtY29udGVudDsnPjxoNiBjbGFzcz1cImRyb3Bkb3duLWhlYWRlclwiPlNob3cgQ29sdW1uczwvaDY+PC9kaXY+YCk7XG4gICAgICAgICAgICBjb25zdCAkY2hlY2tib3hlcyA9ICQoYDxkaXYgY2xhc3M9J3B4LTQnPjwvZGl2PmApO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbHVtbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb2x1bW4gPSBjb2x1bW5zW2ldO1xuXG4gICAgICAgICAgICAgICAgLy8gUHJldmVudHMgY29sdW1ucyB3aXRoIG5vIG5hbWVzIHRvIGJlIHNlbGVjdGl2ZWx5IGhpZGRlbiAoZS5nLiwgdGhlIGVudGl0eSB1bmRlciB0aGUgYWxsIGFsZXJ0cyBwYWdlKVxuICAgICAgICAgICAgICAgIGlmKGNvbHVtbi5uYW1lID09IFwiXCIpXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAgICAgLy8gY3JlYXRlIGEgY2hlY2tib3ggYW5kIGRlbGVnYXRlIGEgY2hhbmdlIGV2ZW50XG4gICAgICAgICAgICAgICAgY29uc3QgaWQgPSBgdG9nZ2xlLSR7Y29sdW1uLm5hbWUuc3BsaXQoKS5qb2luKCdfJyl9YDsgXG5cbiAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiB0aGUgY29sdW1uIGlkIGl0J3MgaW5zaWRlIHRoZSBzYXZlZENvbHVtbnMgYXJyYXlcbiAgICAgICAgICAgICAgICAvLyBpZiB0b2dnbGVkIGlzIHRydWUgdGhlbiB0aGUgY29sdW1uIGlzIG5vdCBoaWRkZW5cbiAgICAgICAgICAgICAgICBjb25zdCB0b2dnbGVkID0gc2F2ZWRDb2x1bW5zLmluZGV4T2YoY29sdW1uLmluZGV4KSA9PT0gLTE7XG4gICAgICAgICAgICAgICAgaWYgKCF0b2dnbGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbCA9IHRhYmxlQVBJLmNvbHVtbihjb2x1bW4uaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICBjb2wudmlzaWJsZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgJGNoZWNrYm94ID0gJChgPGlucHV0IGNsYXNzPVwiZm9ybS1jaGVjay1pbnB1dFwiICR7KHRvZ2dsZWQgPyAnY2hlY2tlZCcgOiAnJyl9IHR5cGU9XCJjaGVja2JveFwiIGlkPVwiJHtpZH1cIj5gKTtcbiAgICAgICAgICAgICAgICBjb25zdCAkd3JhcHBlciA9ICQoYFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1jaGVjayBmb3JtLXN3aXRjaFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiZm9ybS1jaGVjay1sYWJlbFwiIGZvcj1cIiR7aWR9XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHtjb2x1bW4ubmFtZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIGApO1xuXG4gICAgICAgICAgICAgICAgJGNoZWNrYm94Lm9uKCdjaGFuZ2UnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICAkKGAub3ZlcmxheWApLnRvZ2dsZSg1MDApO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gR2V0IHRoZSBjb2x1bW4gQVBJIG9iamVjdFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2wgPSB0YWJsZUFQSS5jb2x1bW4oY29sdW1uLmluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gVG9nZ2xlIHRoZSB2aXNpYmlsaXR5XG4gICAgICAgICAgICAgICAgICAgIGNvbC52aXNpYmxlKCFjb2wudmlzaWJsZSgpKTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCB2aXNpYmxlID0gY29sLnZpc2libGUoKTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBoaWRkZW5Db2x1bW5zID0gW107XG4gICAgICAgICAgICAgICAgICAgIC8vIGluc2VydCBpbnNpZGUgdGhlIGFycmF5IG9ubHkgdGhlIGhpZGRlbiBjb2x1bW5zXG4gICAgICAgICAgICAgICAgICAgIHRhYmxlQVBJLmNvbHVtbnMoKS5ldmVyeShmdW5jdGlvbihpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFibGVBUEkuY29sdW1uKGkpLnZpc2libGUoKSB8fCBpZ25vcmVkQ29sdW1ucy5pbmRleE9mKGkpICE9PSAtMSkgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGlkZGVuQ29sdW1ucy5wdXNoKGkpOyBcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gc2F2ZSB0aGUgdGFibGUgdmlldyBpbnNpZGUgcmVkaXNcbiAgICAgICAgICAgICAgICAgICAgJC5wb3N0KGAke2h0dHBfcHJlZml4fS9sdWEvZGF0YXRhYmxlX2NvbHVtbnMubHVhYCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAnc2F2ZScsIHRhYmxlOiB0YWJsZUlELCBjb2x1bW5zOiBoaWRkZW5Db2x1bW5zLmpvaW4oJywnKSwgY3NyZjogd2luZG93Ll9fQ1NSRl9EQVRBVEFCTEVfX1xuICAgICAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLnN1Y2Nlc3MpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihkYXRhLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodG9nZ2xlQ2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlQ2FsbGJhY2soY29sLCB2aXNpYmxlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAkd3JhcHBlci5wcmVwZW5kKCRjaGVja2JveCk7XG4gICAgICAgICAgICAgICAgJGNoZWNrYm94ZXMuYXBwZW5kKCR3cmFwcGVyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJGRyb3Bkb3duTWVudS5vbihcImNsaWNrLmJzLmRyb3Bkb3duXCIsIGZ1bmN0aW9uIChlKSB7IGUuc3RvcFByb3BhZ2F0aW9uKCk7IH0pO1xuXG4gICAgICAgICAgICAvLyBhcHBlbmQgdGhlIG5ldyBub2RlIGluc2lkZSB0aGUgZGF0YXRhYmxlXG4gICAgICAgICAgICAkYnRuR3JvdXAuYXBwZW5kKCRkcm9wZG93bk1lbnUuYXBwZW5kKCRjaGVja2JveGVzKSk7XG4gICAgICAgICAgICAkZGF0YXRhYmxlV3JhcHBlci5maW5kKCcuZHQtc2VhcmNoJykucGFyZW50KCkuYXBwZW5kKCRidG5Hcm91cCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHN0YXRpYyBhc3luYyBfbG9hZENvbHVtbnNWaXNpYmlsaXR5KHRhYmxlQVBJKSB7XG4gICAgICAgIGNvbnN0IHRhYmxlSUQgPSB0YWJsZUFQSS50YWJsZSgpLm5vZGUoKS5pZDtcbiAgICAgICAgcmV0dXJuICQuZ2V0KGAke2h0dHBfcHJlZml4fS9sdWEvZGF0YXRhYmxlX2NvbHVtbnMubHVhP3RhYmxlPSR7dGFibGVJRH0mYWN0aW9uPWxvYWRgKTtcbiAgICB9XG5cbn1cblxuZXhwb3J0IGNsYXNzIERhdGFUYWJsZVJlbmRlcnMge1xuXG4gICAgc3RhdGljIGFsZXJ0U2V2ZXJpdHlBbmRUeXBlKHNldmVyaXR5LCB0eXBlLCBhbGVydCkge1xuICAgICAgICByZXR1cm4gYCR7RGF0YVRhYmxlUmVuZGVycy5mb3JtYXRWYWx1ZUxhYmVsKHNldmVyaXR5LCB0eXBlLCBhbGVydCl9ICR7RGF0YVRhYmxlUmVuZGVycy5mb3JtYXRWYWx1ZUxhYmVsKGFsZXJ0LmFsZXJ0X2lkLCB0eXBlLCBhbGVydCl9YDtcbiAgICB9XG5cbiAgICBzdGF0aWMgaGlkZUlmWmVybyhvYmosIHR5cGUsIHJvdywgemVyb19pc19udWxsKSB7XG4gICAgICAgIGxldCBjb2xvciA9IChvYmouY29sb3IgIT09IHVuZGVmaW5lZCA/IG9iai5jb2xvciA6IFwiI2FhYVwiKTtcbiAgICAgICAgbGV0IHZhbHVlID0gKG9iai52YWx1ZSAhPT0gdW5kZWZpbmVkID8gb2JqLnZhbHVlIDogb2JqKTtcbiAgICAgICAgaWYgKHR5cGUgPT09IFwiZGlzcGxheVwiICYmIHBhcnNlSW50KHZhbHVlKSA9PT0gMCkgY29sb3IgPSBcIiNhYWFcIjtcbiAgICAgICAgbGV0IHNwYW4gPSBgPHNwYW4gc3R5bGU9J2NvbG9yOiAke2NvbG9yfSc+JHtOdG9wVXRpbHMuZmludCh2YWx1ZSl9PC9zcGFuPmA7XG4gICAgICAgIGlmIChvYmoudXJsICE9PSB1bmRlZmluZWQpIHNwYW4gPSBgPGEgaHJlZj1cIiR7b2JqLnVybH1cIj4ke3NwYW59PC9hPmA7XG4gICAgICAgIHJldHVybiBzcGFuO1xuICAgIH1cblxuICAgIHN0YXRpYyBzZWNvbmRzVG9UaW1lKHNlY29uZHMsIHR5cGUsIHJvdywgemVyb19pc19udWxsKSB7XG4gICAgICAgIGlmICh0eXBlID09PSBcImRpc3BsYXlcIikgcmV0dXJuIE50b3BVdGlscy5zZWNvbmRzVG9UaW1lKHNlY29uZHMpO1xuICAgICAgICByZXR1cm4gc2Vjb25kcztcbiAgICB9XG5cbiAgICBzdGF0aWMgZmlsdGVyaXplKGtleSwgdmFsdWUsIGxhYmVsLCB0YWdfbGFiZWwsIHRpdGxlLCBodG1sLCBpc19zbm1wX2lwLCBpcCkge1xuICAgICAgICBsZXQgY29udGVudCA9IGA8YSBjbGFzcz0ndGFnLWZpbHRlcicgZGF0YS10YWcta2V5PScke2tleX0nIHRpdGxlPScke3RpdGxlIHx8IHZhbHVlfScgZGF0YS10YWctdmFsdWU9JyR7dmFsdWV9JyBkYXRhLXRhZy1sYWJlbD0nJHt0YWdfbGFiZWwgfHwgbGFiZWwgfHwgdmFsdWV9JyBocmVmPSdqYXZhc2NyaXB0OnZvaWQoMCknPiR7aHRtbCB8fCBsYWJlbCB8fCB2YWx1ZX08L2E+YDtcbiAgICAgICAgaWYoaXNfc25tcF9pcCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZihpc19zbm1wX2lwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCB1cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9zbm1wX2RldmljZV9kZXRhaWxzLmx1YT9ob3N0PSR7dmFsdWV9YCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgKz0gYCA8YSBocmVmPScke3VybH0nZGF0YS1icy10b2dnbGU9J3Rvb2x0aXAnIHRpdGxlPScnPjxpIGNsYXNzPSdmYXMgZmEtbGFwdG9wJz48L2k+PC9hPmA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoaXAgJiYgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHVybCA9IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL3NubXBfaW50ZXJmYWNlX2RldGFpbHMubHVhP2hvc3Q9JHtpcH0mc25tcF9wb3J0X2lkeD0ke3ZhbHVlfWApO1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50ICs9IGAgPGEgaHJlZj0nJHt1cmx9J2RhdGEtYnMtdG9nZ2xlPSd0b29sdGlwJyB0aXRsZT0nJz48aSBjbGFzcz0nZmFzIGZhLWxhcHRvcCc+PC9pPjwvYT5gO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29udGVudDtcbiAgICB9XG5cbiAgICBzdGF0aWMgZm9ybWF0VmFsdWVMYWJlbChvYmosIHR5cGUsIHJvdywgemVyb19pc19udWxsKSB7XG4gICAgICAgIGlmICh0eXBlICE9PSBcImRpc3BsYXlcIikgcmV0dXJuIG9iai52YWx1ZTtcbiAgICAgICAgbGV0IGNlbGwgPSBvYmoubGFiZWw7XG4gICAgICAgIGlmICh6ZXJvX2lzX251bGwgPT0gdHJ1ZSAmJiBvYmoudmFsdWUgPT0gMCkge1xuICAgICAgICAgICAgY2VsbCA9IFwiXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9iai5jb2xvcikgY2VsbCA9IGA8c3BhbiBjbGFzcz0nZm9udC13ZWlnaHQtYm9sZCcgc3R5bGU9J2NvbG9yOiAke29iai5jb2xvcn0nPiR7Y2VsbH08L3NwYW4+YDtcbiAgICAgICAgcmV0dXJuIGNlbGw7XG4gICAgfVxuXG4gICAgc3RhdGljIGZvcm1hdENhdGVnb3J5KG9iaiwgdHlwZSwgcm93LCB6ZXJvX2lzX251bGwpIHtcbiAgICAgICAgaWYgKHR5cGUgIT09IFwiZGlzcGxheVwiKSByZXR1cm4gb2JqLnZhbHVlO1xuICAgICAgICBsZXQgY2VsbCA9IGA8YSBjbGFzcz0ndGFnLWZpbHRlcicgZGF0YS10YWcta2V5PSdhbGVydF9jYXRlZ29yeScgZGF0YS10YWctdmFsdWU9JyR7b2JqLnZhbHVlfScgZGF0YS10YWctbGFiZWw9JyR7b2JqLmxhYmVsfScgaHJlZj0namF2YXNjcmlwdDp2b2lkKDApJz48aSBjbGFzcz1cImZhIGZhcyAke29iai5pY29ufVwiIHRpdGxlPVwiJHtvYmoubGFiZWx9XCI+PC9pPjwvYT5gO1xuICAgICAgICBpZiAoemVyb19pc19udWxsID09IHRydWUgJiYgb2JqLnZhbHVlID09IDApIHtcbiAgICAgICAgICAgIGNlbGwgPSBcIlwiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjZWxsO1xuICAgIH1cblxuICAgIHN0YXRpYyBmb3JtYXRTY29yZShvYmosIHR5cGUsIHJvdywgemVyb19pc19udWxsKSB7XG4gICAgICAgIGlmICh0eXBlICE9PSBcImRpc3BsYXlcIikgcmV0dXJuIG9iai52YWx1ZTtcbiAgICAgICAgbGV0IGNlbGwgPSBvYmoubGFiZWw7XG4gICAgICAgIGlmICh6ZXJvX2lzX251bGwgPT0gdHJ1ZSAmJiBvYmoudmFsdWUgPT0gMCkge1xuICAgICAgICAgICAgY2VsbCA9IFwiXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9iai5jb2xvcikgY2VsbCA9IGA8c3BhbiBjbGFzcz0nZm9udC13ZWlnaHQtYm9sZCcgc3R5bGU9J2NvbG9yOiAke29iai5jb2xvcn0nPiR7Y2VsbH08L3NwYW4+YDtcbiAgICAgICAgcmV0dXJuIGA8YSBjbGFzcz0ndGFnLWZpbHRlcicgZGF0YS10YWcta2V5PSdzY29yZScgdGl0bGU9JyR7b2JqLmxhYmVsfScgZGF0YS10YWctdmFsdWU9JyR7b2JqLnZhbHVlfScgZGF0YS10YWctbGFiZWw9JyR7b2JqLmxhYmVsfScgaHJlZj0namF2YXNjcmlwdDp2b2lkKDApJz4ke2NlbGx9PC9hPmA7XG4gICAgfVxuXG4gICAgc3RhdGljIGZvcm1hdE1lc3NhZ2Uob2JqLCB0eXBlLCByb3csIHplcm9faXNfbnVsbCkge1xuICAgICAgICBpZiAodHlwZSAhPT0gXCJkaXNwbGF5XCIpIHJldHVybiBvYmoudmFsdWU7XG4gICAgICAgICAgIFxuICAgICAgICBsZXQgY2VsbCA9IG9iai5kZXNjcjtcbiAgICAgICAgaWYgKG9iai5zaG9ydGVuX2Rlc2NyKVxuICAgICAgICAgICAgY2VsbCA9IGA8c3BhbiB0aXRsZT1cIiR7b2JqLmRlc2NyfVwiPiR7b2JqLnNob3J0ZW5fZGVzY3J9PC9zcGFuPmA7XG5cbiAgICAgICAgcmV0dXJuIGNlbGw7XG4gICAgfVxuXG4gICAgc3RhdGljIGZvcm1hdFRyYWZmaWMob2JqLCB0eXBlLCByb3csIHplcm9faXNfbnVsbCkge1xuICAgICAgICBpZiAodHlwZSAhPT0gXCJkaXNwbGF5XCIpIHJldHVybiBvYmoudG90YWxfYnl0ZXM7XG4gICAgICAgIFxuICAgICAgICBjb25zdCB0cmFmZmljID0gYCR7TnRvcFV0aWxzLmZvcm1hdFBhY2tldHMob2JqLnRvdGFsX3BhY2tldHMpfSAvICR7TnRvcFV0aWxzLmJ5dGVzVG9Wb2x1bWUob2JqLnRvdGFsX2J5dGVzKX1gXG4gICAgICAgIHJldHVybiB0cmFmZmljO1xuICAgIH1cblxuICAgIHN0YXRpYyBmb3JtYXRTdWJ0eXBlKG9iaiwgdHlwZSwgcm93LCB6ZXJvX2lzX251bGwpIHtcbiAgICAgICAgaWYgKHR5cGUgIT09IFwiZGlzcGxheVwiKSByZXR1cm4gb2JqO1xuXG4gICAgICAgIGxldCBsYWJlbCA9IERhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplKCdzdWJ0eXBlJywgb2JqLCBvYmopO1xuXG4gICAgICAgIHJldHVybiBsYWJlbDsgXG4gICAgfVxuXG4gICAgc3RhdGljIGZpbHRlcml6ZV8yKGtleSwgdmFsdWUsIGxhYmVsLCB0YWdfbGFiZWwsIHRpdGxlLCBodG1sKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsIHx8ICh2YWx1ZSA9PSAwICYmIChsYWJlbCA9PSBudWxsIHx8IGxhYmVsID09IFwiXCIpKSkgeyByZXR1cm4gXCJcIjsgfVxuICAgICAgICByZXR1cm4gYDxhIGNsYXNzPSd0YWctZmlsdGVyJyBkYXRhLXRhZy1rZXk9JyR7a2V5fScgdGl0bGU9JyR7dGl0bGUgfHwgdmFsdWV9JyBkYXRhLXRhZy12YWx1ZT0nJHt2YWx1ZX0nIGRhdGEtdGFnLWxhYmVsPScke3RhZ19sYWJlbCB8fCBsYWJlbCB8fCB2YWx1ZX0nIGhyZWY9J2phdmFzY3JpcHQ6dm9pZCgwKSc+JHtodG1sIHx8IGxhYmVsIHx8IHZhbHVlfTwvYT5gO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXRGb3JtYXRHZW5lcmljRmllbGQoZmllbGQsIHplcm9faXNfbnVsbCkgeyAgICAgICAgXG4gICAgICAgIHJldHVybiBmdW5jdGlvbihvYmosIHR5cGUsIHJvdykge1xuICAgICAgICAgICAgaWYgKHR5cGUgIT09IFwiZGlzcGxheVwiKSByZXR1cm4gb2JqLnZhbHVlO1xuICAgICAgICAgICAgaWYgKHplcm9faXNfbnVsbCA9PSB0cnVlICYmIG9iaj8udmFsdWUgPT0gMCkgeyByZXR1cm4gXCJcIjsgfVxuICAgICAgICAgICAgICAgIGxldCBodG1sX3JlZiA9ICcnO1xuICAgICAgICAgICAgaWYgKG9iai5yZWZlcmVuY2UgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICBodG1sX3JlZiA9IG9iai5yZWZlcmVuY2VcbiAgICAgICAgICAgIGxldCBsYWJlbCA9IERhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplXzIoZmllbGQsIHJvd1tmaWVsZF0udmFsdWUsIHJvd1tmaWVsZF0ubGFiZWwsIHJvd1tmaWVsZF0ubGFiZWwsIHJvd1tmaWVsZF0ubGFiZWwpO1xuICAgICAgICAgICAgcmV0dXJuIGxhYmVsICsgJyAnICsgaHRtbF9yZWY7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgZm9ybWF0U05NUEludGVyZmFjZShvYmosIHR5cGUsIHJvdykge1xuICAgICAgICBpZiAodHlwZSAhPT0gXCJkaXNwbGF5XCIpIHJldHVybiBvYmoudmFsdWU7XG4gICAgICAgIGxldCBjZWxsID0gRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemUoJ3NubXBfaW50ZXJmYWNlJywgYCR7cm93LmlwfV8ke29iai52YWx1ZX1gLCBvYmoubGFiZWwsIG9iai5sYWJlbCwgb2JqLmxhYmVsLG51bGwsZmFsc2UsIHJvdy5pcCk7XG4gICAgICAgIGlmIChvYmouY29sb3IpIGNlbGwgPSBgPHNwYW4gY2xhc3M9J2ZvbnQtd2VpZ2h0LWJvbGQnIHN0eWxlPSdjb2xvcjogJHtvYmouY29sb3J9Jz4ke2NlbGx9PC9zcGFuPmA7XG4gICAgICAgIHJldHVybiBjZWxsO1xuICAgIH1cblxuICAgIHN0YXRpYyBmb3JtYXRTTk1QSVAob2JqLCB0eXBlLCByb3csIHplcm9faXNfbnVsbCkge1xuICAgICAgICBpZiAodHlwZSAhPT0gXCJkaXNwbGF5XCIpIHJldHVybiBvYmo7XG4gICAgICAgIHJldHVybiBEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZSgnaXAnLCBvYmosIG9iaiwgb2JqLCBvYmosIG51bGwsIHRydWUpO1xuICAgIH1cblxuICAgIHN0YXRpYyBmb3JtYXROZXR3b3JrKG9iaiwgdHlwZSwgcm93LCB6ZXJvX2lzX251bGwpIHtcbiAgICAgICAgaWYgKHR5cGUgIT09IFwiZGlzcGxheVwiKSByZXR1cm4gb2JqO1xuICAgICAgICByZXR1cm4gRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemUoJ25ldHdvcmtfbmFtZScsIG9iaiwgb2JqLCBvYmosIG9iaiwgbnVsbCwgZmFsc2UpO1xuICAgIH1cblxuICAgIHN0YXRpYyBmb3JtYXRQcm9iZUlQKG9iaiwgdHlwZSwgcm93LCB6ZXJvX2lzX251bGwpIHtcbiAgICAgICAgaWYgKHR5cGUgIT09IFwiZGlzcGxheVwiKSByZXR1cm4gb2JqO1xuXG4gICAgICAgIGxldCBsYWJlbCA9IERhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplKCdwcm9iZV9pcCcsIG9iai52YWx1ZSwgb2JqLmxhYmVsLCBvYmoubGFiZWwsIG9iai5sYWJlbF9sb25nKTtcblxuICAgICAgICByZXR1cm4gbGFiZWw7IFxuICAgIH1cbiAgIFxuICAgIHN0YXRpYyBmb3JtYXRIb3N0KG9iaiwgdHlwZSwgcm93LCB6ZXJvX2lzX251bGwpIHtcbiAgICAgICAgaWYgKHR5cGUgIT09IFwiZGlzcGxheVwiKSByZXR1cm4gb2JqO1xuICAgICAgICAgICAgbGV0IGh0bWxfcmVmID0gJyc7XG4gICAgICAgIGlmIChvYmoucmVmZXJlbmNlICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgIGh0bWxfcmVmID0gb2JqLnJlZmVyZW5jZTtcbiAgICAgICAgbGV0IGxhYmVsID0gXCJcIjtcblxuICAgICAgICBsZXQgaG9zdEtleSwgaG9zdFZhbHVlO1xuICAgICAgICBpZiAob2JqLmxhYmVsICYmIG9iai5sYWJlbCAhPSBvYmoudmFsdWUpIHtcbiAgICAgICAgICAgIGhvc3RLZXkgPSBcIm5hbWVcIjtcbiAgICAgICAgICAgIGhvc3RWYWx1ZSA9IG9iai5sYWJlbF9sb25nO1xuICAgICAgICAgICAgbGFiZWwgPSBEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZSgnbmFtZScsIG9iai5sYWJlbF9sb25nLCBvYmoubGFiZWwsIG9iai5sYWJlbCwgb2JqLmxhYmVsX2xvbmcpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaG9zdEtleSA9IFwiaXBcIjtcbiAgICAgICAgICAgIGhvc3RWYWx1ZSA9IG9iai52YWx1ZTtcbiAgICAgICAgICAgIGxhYmVsID0gRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemUoJ2lwJywgb2JqLnZhbHVlLCBvYmoubGFiZWwsIG9iai5sYWJlbCwgb2JqLmxhYmVsX2xvbmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJvdy52bGFuX2lkICYmIHJvdy52bGFuX2lkICE9IFwiXCIgJiYgcm93LnZsYW5faWQgIT0gXCIwXCIpIHtcbiAgICAgICAgICAgIGxhYmVsID0gRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemUoaG9zdEtleSwgYCR7aG9zdFZhbHVlfUAke3Jvdy52bGFuX2lkfWAsIGAke29iai5sYWJlbH1AJHtyb3cudmxhbl9pZH1gLCBgJHtvYmoubGFiZWx9QCR7cm93LnZsYW5faWR9YCwgYCR7b2JqLmxhYmVsX2xvbmd9QCR7cm93LnZsYW5faWR9YCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob2JqLmNvdW50cnkpXG4gICAgICAgICAgICBsYWJlbCA9IGxhYmVsICsgRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemUoJ2NvdW50cnknLCBvYmouY291bnRyeSwgb2JqLmNvdW50cnksIG9iai5jb3VudHJ5LCBvYmouY291bnRyeSwgJyA8aW1nIHNyYz1cIicgKyBodHRwX3ByZWZpeCArICcvZGlzdC9pbWFnZXMvYmxhbmsuZ2lmXCIgY2xhc3M9XCJmbGFnIGZsYWctJyArIG9iai5jb3VudHJ5LnRvTG93ZXJDYXNlKCkgKyAnXCI+PC9hPiAnKTtcblxuICAgICAgICBpZiAocm93LnJvbGUgJiYgcm93LnJvbGUudmFsdWUgPT0gJ2F0dGFja2VyJylcbiAgICAgICAgICBsYWJlbCA9IGxhYmVsICsgJyAnICsgRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemUoJ3JvbGUnLCByb3cucm9sZS52YWx1ZSwgXG4gICAgICAgICAgICAnPGkgY2xhc3M9XCJmYXMgZmEtc2t1bGxcIiB0aXRsZT1cIicrcm93LnJvbGUubGFiZWwrJ1wiPjwvaT4nLCByb3cucm9sZS5sYWJlbCk7XG4gICAgICAgIGVsc2UgaWYgKHJvdy5yb2xlICYmIHJvdy5yb2xlLnZhbHVlID09ICd2aWN0aW0nKVxuICAgICAgICAgIGxhYmVsID0gbGFiZWwgKyAnICcgKyBEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZSgncm9sZScsIHJvdy5yb2xlLnZhbHVlLFxuICAgICAgICAgICAgJzxpIGNsYXNzPVwiZmFzIGZhLXNhZC10ZWFyXCIgdGl0bGU9XCInK3Jvdy5yb2xlLmxhYmVsKydcIj48L2k+Jywgcm93LnJvbGUubGFiZWwpO1xuXG4gICAgICAgIGlmIChyb3cucm9sZV9jbGlfc3J2ICYmIHJvdy5yb2xlX2NsaV9zcnYudmFsdWUgPT0gJ2NsaWVudCcpXG4gICAgICAgICAgbGFiZWwgPSBsYWJlbCArICcgJyArIERhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplKCdyb2xlX2NsaV9zcnYnLCByb3cucm9sZV9jbGlfc3J2LnZhbHVlLCBcbiAgICAgICAgICAgICc8aSBjbGFzcz1cImZhcyBmYS1sb25nLWFycm93LWFsdC1yaWdodFwiIHRpdGxlPVwiJytyb3cucm9sZV9jbGlfc3J2LmxhYmVsKydcIj48L2k+Jywgcm93LnJvbGVfY2xpX3Nydi5sYWJlbCk7XG4gICAgICAgIGVsc2UgaWYgKHJvdy5yb2xlX2NsaV9zcnYgJiYgcm93LnJvbGVfY2xpX3Nydi52YWx1ZSA9PSAnc2VydmVyJylcbiAgICAgICAgICBsYWJlbCA9IGxhYmVsICsgJyAnICsgRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemUoJ3JvbGVfY2xpX3NydicsIHJvdy5yb2xlX2NsaV9zcnYudmFsdWUsXG4gICAgICAgICAgICAnPGkgY2xhc3M9XCJmYXMgZmEtbG9uZy1hcnJvdy1hbHQtbGVmdFwiIHRpdGxlPVwiJytyb3cucm9sZV9jbGlfc3J2LmxhYmVsKydcIj48L2k+Jywgcm93LnJvbGVfY2xpX3Nydi5sYWJlbCk7XG5cbiAgICAgICAgcmV0dXJuIGxhYmVsICsgJyAnICsgaHRtbF9yZWY7IFxuICAgIH1cblxuICAgIHN0YXRpYyBmaWx0ZXJpemVWbGFuKGZsb3csIHJvdywga2V5LCB2YWx1ZSwgbGFiZWwsIHRpdGxlKSB7XG4gICAgICAgIGxldCB2YWx1ZVZsYW4gPSB2YWx1ZTtcbiAgbGV0IGxhYmVsVmxhbiA9IGxhYmVsO1xuICAgICAgICBsZXQgdGl0bGVWbGFuID0gdGl0bGU7XG4gICAgICAgIGlmIChmbG93LnZsYW4gJiYgZmxvdy52bGFuLnZhbHVlICE9IDApIHtcbiAgICAgICAgICAgIHZhbHVlVmxhbiA9IGAke3ZhbHVlfUAke2Zsb3cudmxhbi52YWx1ZX1gO1xuICAgICAgICAgICAgbGFiZWxWbGFuID0gYCR7bGFiZWx9QCR7Zmxvdy52bGFuLmxhYmVsfWA7XG4gICAgICAgICAgICB0aXRsZVZsYW4gPSBgJHt0aXRsZX1AJHtmbG93LnZsYW4udGl0bGV9YDtcbiAgICAgICAgfVxuICAgICAgbGFiZWxWbGFuID0gTnRvcFV0aWxzLnNob3J0ZW5MYWJlbChsYWJlbFZsYW4sIDE2LCBcIi5cIilcbiAgICAgIHJldHVybiBEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZShrZXksIHZhbHVlVmxhbiwgbGFiZWxWbGFuLCBsYWJlbFZsYW4sIHRpdGxlVmxhbik7IFxuICAgIH1cblxuICAgIHN0YXRpYyBmb3JtYXRGbG93VHVwbGUoZmxvdywgdHlwZSwgcm93LCB6ZXJvX2lzX251bGwpIHtcbiAgICAgIGxldCBhY3RpdmVfcmVmID0gKGZsb3cuYWN0aXZlX3VybCA/IGA8YSBocmVmPVwiJHtmbG93LmFjdGl2ZV91cmx9XCI+PGkgY2xhc3M9XCJmYXMgZmEtc3RyZWFtXCI+PC9pPjwvYT5gIDogXCJcIik7XG4gICAgICAgIGxldCBjbGlMYWJlbCA9IFwiXCI7XG4gICAgICAgIGlmIChmbG93LmNsaV9pcC5uYW1lKSB7XG4gICAgICAgICAgbGV0IHRpdGxlID0gXCJcIjtcbiAgICAgICAgICAgIGlmKGZsb3cuY2xpX2lwLmxhYmVsX2xvbmcpIHRpdGxlID0gZmxvdy5jbGlfaXAudmFsdWUgKyBcIiBbXCIgKyBmbG93LmNsaV9pcC5sYWJlbF9sb25nICsgXCJdXCI7XG4gICAgICAgICAgICBjbGlMYWJlbCA9IERhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplVmxhbihmbG93LCByb3csICdjbGlfbmFtZScsIGZsb3cuY2xpX2lwLm5hbWUsIGZsb3cuY2xpX2lwLmxhYmVsLCB0aXRsZSk7IFxuICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgIGNsaUxhYmVsID0gRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemVWbGFuKGZsb3csIHJvdywgJ2NsaV9pcCcsIGZsb3cuY2xpX2lwLnZhbHVlLCBmbG93LmNsaV9pcC5sYWJlbCwgZmxvdy5jbGlfaXAubGFiZWxfbG9uZyk7IFxuXG4gICAgICAgIGxldCBjbGlGbGFnTGFiZWw9ICcnXG5cbiAgICAgICAgaWYgKGZsb3cuY2xpX2lwLmNvdW50cnkgJiYgZmxvdy5jbGlfaXAuY291bnRyeSAhPT0gXCJuaWxcIilcbiAgICAgICAgICAgIGNsaUZsYWdMYWJlbCA9IERhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplKCdjbGlfY291bnRyeScsIGZsb3cuY2xpX2lwLmNvdW50cnksIGZsb3cuY2xpX2lwLmNvdW50cnksIGZsb3cuY2xpX2lwLmNvdW50cnksIGZsb3cuY2xpX2lwLmNvdW50cnksICcgPGltZyBzcmM9XCInICsgaHR0cF9wcmVmaXggKyAnL2Rpc3QvaW1hZ2VzL2JsYW5rLmdpZlwiIGNsYXNzPVwiZmxhZyBmbGFnLScgKyBmbG93LmNsaV9pcC5jb3VudHJ5LnRvTG93ZXJDYXNlKCkgKyAnXCI+PC9hPiAnKTtcblxuICAgICAgICBsZXQgY2xpUG9ydExhYmVsID0gKChmbG93LmNsaV9wb3J0ICYmIGZsb3cuY2xpX3BvcnQgPiAwKSA/IFwiOlwiK0RhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplKCdjbGlfcG9ydCcsIGZsb3cuY2xpX3BvcnQsIGZsb3cuY2xpX3BvcnQpIDogXCJcIik7XG5cbiAgICAgICAgbGV0IGNsaUJsYWNrbGlzdGVkID0nJ1xuICAgICAgICBpZihmbG93LmNsaV9pcC5ibGFja2xpc3RlZCA9PSB0cnVlKSBcbiAgICAgICAgICBjbGlCbGFja2xpc3RlZCA9IFwiIDxpIGNsYXNzPVxcJ2ZhcyBmYS1iYW4gZmEtc21cXCcgdGl0bGU9XFwnXCIgKyBpMThuKFwiaG9zdHNfc3RhdHMuYmxhY2tsaXN0ZWRcIikgKyBcIlxcJz48L2k+XCJcblxuICAgICAgICBsZXQgc3J2TGFiZWwgPSBcIlwiXG4gICAgICAgIGlmIChmbG93LnNydl9pcC5uYW1lKSB7XG4gICAgICAgICAgbGV0IHRpdGxlID0gXCJcIjtcbiAgICAgICAgICBpZihmbG93LnNydl9pcC5sYWJlbF9sb25nKSB0aXRsZSA9IGZsb3cuc3J2X2lwLnZhbHVlICsgXCIgW1wiICsgZmxvdy5zcnZfaXAubGFiZWxfbG9uZyArIFwiXVwiO1xuICAgICAgICAgICAgc3J2TGFiZWwgPSBEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZVZsYW4oZmxvdywgcm93LCAnc3J2X25hbWUnLCBmbG93LnNydl9pcC5uYW1lLCBmbG93LnNydl9pcC5sYWJlbCwgdGl0bGUpO1xuICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgIHNydkxhYmVsID0gRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemVWbGFuKGZsb3csIHJvdywgJ3Nydl9pcCcsIGZsb3cuc3J2X2lwLnZhbHVlLCBmbG93LnNydl9pcC5sYWJlbCwgZmxvdy5zcnZfaXAubGFiZWxfbG9uZyk7XG4gICAgICAgIGxldCBzcnZQb3J0TGFiZWwgPSAoKGZsb3cuc3J2X3BvcnQgJiYgZmxvdy5zcnZfcG9ydCA+IDApID8gXCI6XCIrRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemUoJ3Nydl9wb3J0JywgZmxvdy5zcnZfcG9ydCwgZmxvdy5zcnZfcG9ydCkgOiBcIlwiKTtcblxuICAgICAgICBsZXQgc3J2RmxhZ0xhYmVsPSAnJ1xuXG4gICAgICAgIGlmIChmbG93LnNydl9pcC5jb3VudHJ5ICYmIGZsb3cuc3J2X2lwLmNvdW50cnkgIT09IFwibmlsXCIpXG4gICAgICAgICAgICBzcnZGbGFnTGFiZWwgPSBEYXRhVGFibGVSZW5kZXJzLmZpbHRlcml6ZSgnc3J2X2NvdW50cnknLCBmbG93LnNydl9pcC5jb3VudHJ5LCBmbG93LnNydl9pcC5jb3VudHJ5LCBmbG93LnNydl9pcC5jb3VudHJ5LCBmbG93LnNydl9pcC5jb3VudHJ5LCAnIDxpbWcgc3JjPVwiJyArIGh0dHBfcHJlZml4ICsgJy9kaXN0L2ltYWdlcy9ibGFuay5naWZcIiBjbGFzcz1cImZsYWcgZmxhZy0nICsgZmxvdy5zcnZfaXAuY291bnRyeS50b0xvd2VyQ2FzZSgpICsgJ1wiPjwvYT4gJyk7XG5cbiAgICAgICAgbGV0IHNydkJsYWNrbGlzdGVkID0nJ1xuICAgICAgICBpZihmbG93LnNydl9pcC5ibGFja2xpc3RlZCA9PSB0cnVlKSBcbiAgICAgICAgICBzcnZCbGFja2xpc3RlZCA9IFwiIDxpIGNsYXNzPVxcJ2ZhcyBmYS1iYW4gZmEtc21cXCcgdGl0bGU9XFwnXCIgKyBpMThuKFwiaG9zdHNfc3RhdHMuYmxhY2tsaXN0ZWRcIikgKyBcIlxcJz48L2k+XCJcbiAgICBcbiAgICAgICAgbGV0IGNsaUljb25zID0gXCJcIjtcbiAgICAgICAgbGV0IHNydkljb25zID0gXCJcIjtcbiAgICAgICAgaWYgKHJvdy5jbGlfcm9sZSkge1xuICAgICAgICAgICAgaWYgKHJvdy5jbGlfcm9sZS52YWx1ZSA9PSAnYXR0YWNrZXInKVxuICAgICAgICAgICAgICAgIGNsaUljb25zICs9IERhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplKCdyb2xlJywgJ2F0dGFja2VyJywgJzxpIGNsYXNzPVwiZmFzIGZhLXNrdWxsXCIgdGl0bGU9XCInK3Jvdy5jbGlfcm9sZS5sYWJlbCsnXCI+PC9pPicsIHJvdy5jbGlfcm9sZS50YWdfbGFiZWwpO1xuICAgICAgICAgICAgZWxzZSBpZiAocm93LmNsaV9yb2xlLnZhbHVlID09ICd2aWN0aW0nKVxuICAgICAgICAgICAgICAgIGNsaUljb25zICs9IERhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplKCdyb2xlJywgJ3ZpY3RpbScsICAnPGkgY2xhc3M9XCJmYXMgZmEtc2FkLXRlYXJcIiB0aXRsZT1cIicrcm93LmNsaV9yb2xlLmxhYmVsKydcIj48L2k+Jywgcm93LmNsaV9yb2xlLnRhZ19sYWJlbCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocm93LnNydl9yb2xlKSB7XG4gICAgICAgICAgICBpZiAocm93LnNydl9yb2xlLnZhbHVlID09ICdhdHRhY2tlcicpXG4gICAgICAgICAgICAgICAgc3J2SWNvbnMgKz0gRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemUoJ3JvbGUnLCAnYXR0YWNrZXInLCAnPGkgY2xhc3M9XCJmYXMgZmEtc2t1bGxcIiB0aXRsZT1cIicrcm93LnNydl9yb2xlLmxhYmVsKydcIj48L2k+Jywgcm93LnNydl9yb2xlLnRhZ19sYWJlbCk7XG4gICAgICAgICAgICBlbHNlIGlmIChyb3cuc3J2X3JvbGUudmFsdWUgPT0gJ3ZpY3RpbScpXG4gICAgICAgICAgICAgICAgc3J2SWNvbnMgKz0gRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemUoJ3JvbGUnLCAndmljdGltJywgICc8aSBjbGFzcz1cImZhcyBmYS1zYWQtdGVhclwiIHRpdGxlPVwiJytyb3cuc3J2X3JvbGUubGFiZWwrJ1wiPjwvaT4nLCByb3cuc3J2X3JvbGUudGFnX2xhYmVsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBgJHthY3RpdmVfcmVmfSAke2NsaUxhYmVsfSR7Y2xpQmxhY2tsaXN0ZWR9JHtjbGlGbGFnTGFiZWx9JHtjbGlQb3J0TGFiZWx9ICR7Y2xpSWNvbnN9ICR7Zmxvdy5jbGlfaXAucmVmZXJlbmNlfSA8aSBjbGFzcz1cImZhcyBmYS1leGNoYW5nZS1hbHQgZmEtbGdcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+ICR7c3J2TGFiZWx9JHtzcnZCbGFja2xpc3RlZH0ke3NydkZsYWdMYWJlbH0ke3NydlBvcnRMYWJlbH0gJHtzcnZJY29uc30gJHtmbG93LnNydl9pcC5yZWZlcmVuY2V9YDtcbiAgICB9XG5cbiAgICBzdGF0aWMgZm9ybWF0U3VidHlwZVZhbHVlTGFiZWwob2JqLCB0eXBlLCByb3csIHplcm9faXNfbnVsbCkge1xuICAgICAgICBpZiAodHlwZSAhPT0gXCJkaXNwbGF5XCIpIHJldHVybiBvYmoubmFtZTtcbiAgICAgICAgbGV0IG1zZyA9IERhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplKCdzdWJ0eXBlJywgb2JqLnZhbHVlLCBvYmoubmFtZSwgb2JqLmZ1bGxuYW1lLCBvYmouZnVsbG5hbWUpO1xuXG4gICAgICAgIHJldHVybiBtc2c7XG4gICAgfVxuXG4gICAgc3RhdGljIGZvcm1hdE5hbWVEZXNjcmlwdGlvbihvYmosIHR5cGUsIHJvdywgemVyb19pc19udWxsKSB7XG4gICAgICAgIGlmICh0eXBlICE9PSBcImRpc3BsYXlcIikgcmV0dXJuIG9iai5uYW1lO1xuICAgICAgICBsZXQgbXNnID0gRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemUoJ2FsZXJ0X2lkJywgb2JqLnZhbHVlLCBvYmoubmFtZSwgb2JqLmZ1bGxuYW1lLCBvYmouZnVsbG5hbWUpO1xuXG4gICAgICAgIHJldHVybiBtc2c7XG4gICAgfVxuXG4gICAgc3RhdGljIGFwcGx5Q2VsbFN0eWxlKGNlbGwsIGNlbGxEYXRhLCByb3dEYXRhLCByb3dJbmRleCwgY29sSW5kZXgpIHtcbiAgICAgIGlmIChjZWxsRGF0YS5oaWdobGlnaHQpIHtcbiAgICAgICAgICQoY2VsbCkuY3NzKFwiYm9yZGVyLWxlZnRcIiwgXCI1cHggc29saWQgXCIrY2VsbERhdGEuaGlnaGxpZ2h0KTtcbiAgICAgIH1cbiAgIH1cbn1cbiIsImZ1bmN0aW9uIGUoZSx0KXtjb25zdCBuPU9iamVjdC5jcmVhdGUobnVsbCksbz1lLnNwbGl0KFwiLFwiKTtmb3IobGV0IHI9MDtyPG8ubGVuZ3RoO3IrKyluW29bcl1dPSEwO3JldHVybiB0P2U9PiEhbltlLnRvTG93ZXJDYXNlKCldOmU9PiEhbltlXX1jb25zdCB0PWUoXCJJbmZpbml0eSx1bmRlZmluZWQsTmFOLGlzRmluaXRlLGlzTmFOLHBhcnNlRmxvYXQscGFyc2VJbnQsZGVjb2RlVVJJLGRlY29kZVVSSUNvbXBvbmVudCxlbmNvZGVVUkksZW5jb2RlVVJJQ29tcG9uZW50LE1hdGgsTnVtYmVyLERhdGUsQXJyYXksT2JqZWN0LEJvb2xlYW4sU3RyaW5nLFJlZ0V4cCxNYXAsU2V0LEpTT04sSW50bCxCaWdJbnRcIiksbj1lKFwiaXRlbXNjb3BlLGFsbG93ZnVsbHNjcmVlbixmb3Jtbm92YWxpZGF0ZSxpc21hcCxub21vZHVsZSxub3ZhbGlkYXRlLHJlYWRvbmx5XCIpO2Z1bmN0aW9uIG8oZSl7cmV0dXJuISFlfHxcIlwiPT09ZX1mdW5jdGlvbiByKGUpe2lmKEUoZSkpe2NvbnN0IHQ9e307Zm9yKGxldCBuPTA7bjxlLmxlbmd0aDtuKyspe2NvbnN0IG89ZVtuXSxzPVAobyk/bChvKTpyKG8pO2lmKHMpZm9yKGNvbnN0IGUgaW4gcyl0W2VdPXNbZV19cmV0dXJuIHR9cmV0dXJuIFAoZSl8fE0oZSk/ZTp2b2lkIDB9Y29uc3Qgcz0vOyg/IVteKF0qXFwpKS9nLGk9LzooLispLztmdW5jdGlvbiBsKGUpe2NvbnN0IHQ9e307cmV0dXJuIGUuc3BsaXQocykuZm9yRWFjaCgoZT0+e2lmKGUpe2NvbnN0IG49ZS5zcGxpdChpKTtuLmxlbmd0aD4xJiYodFtuWzBdLnRyaW0oKV09blsxXS50cmltKCkpfX0pKSx0fWZ1bmN0aW9uIGMoZSl7bGV0IHQ9XCJcIjtpZihQKGUpKXQ9ZTtlbHNlIGlmKEUoZSkpZm9yKGxldCBuPTA7bjxlLmxlbmd0aDtuKyspe2NvbnN0IG89YyhlW25dKTtvJiYodCs9bytcIiBcIil9ZWxzZSBpZihNKGUpKWZvcihjb25zdCBuIGluIGUpZVtuXSYmKHQrPW4rXCIgXCIpO3JldHVybiB0LnRyaW0oKX1mdW5jdGlvbiBhKGUpe2lmKCFlKXJldHVybiBudWxsO2xldHtjbGFzczp0LHN0eWxlOm59PWU7cmV0dXJuIHQmJiFQKHQpJiYoZS5jbGFzcz1jKHQpKSxuJiYoZS5zdHlsZT1yKG4pKSxlfWNvbnN0IHU9ZShcImh0bWwsYm9keSxiYXNlLGhlYWQsbGluayxtZXRhLHN0eWxlLHRpdGxlLGFkZHJlc3MsYXJ0aWNsZSxhc2lkZSxmb290ZXIsaGVhZGVyLGgxLGgyLGgzLGg0LGg1LGg2LG5hdixzZWN0aW9uLGRpdixkZCxkbCxkdCxmaWdjYXB0aW9uLGZpZ3VyZSxwaWN0dXJlLGhyLGltZyxsaSxtYWluLG9sLHAscHJlLHVsLGEsYixhYmJyLGJkaSxiZG8sYnIsY2l0ZSxjb2RlLGRhdGEsZGZuLGVtLGksa2JkLG1hcmsscSxycCxydCxydWJ5LHMsc2FtcCxzbWFsbCxzcGFuLHN0cm9uZyxzdWIsc3VwLHRpbWUsdSx2YXIsd2JyLGFyZWEsYXVkaW8sbWFwLHRyYWNrLHZpZGVvLGVtYmVkLG9iamVjdCxwYXJhbSxzb3VyY2UsY2FudmFzLHNjcmlwdCxub3NjcmlwdCxkZWwsaW5zLGNhcHRpb24sY29sLGNvbGdyb3VwLHRhYmxlLHRoZWFkLHRib2R5LHRkLHRoLHRyLGJ1dHRvbixkYXRhbGlzdCxmaWVsZHNldCxmb3JtLGlucHV0LGxhYmVsLGxlZ2VuZCxtZXRlcixvcHRncm91cCxvcHRpb24sb3V0cHV0LHByb2dyZXNzLHNlbGVjdCx0ZXh0YXJlYSxkZXRhaWxzLGRpYWxvZyxtZW51LHN1bW1hcnksdGVtcGxhdGUsYmxvY2txdW90ZSxpZnJhbWUsdGZvb3RcIikscD1lKFwic3ZnLGFuaW1hdGUsYW5pbWF0ZU1vdGlvbixhbmltYXRlVHJhbnNmb3JtLGNpcmNsZSxjbGlwUGF0aCxjb2xvci1wcm9maWxlLGRlZnMsZGVzYyxkaXNjYXJkLGVsbGlwc2UsZmVCbGVuZCxmZUNvbG9yTWF0cml4LGZlQ29tcG9uZW50VHJhbnNmZXIsZmVDb21wb3NpdGUsZmVDb252b2x2ZU1hdHJpeCxmZURpZmZ1c2VMaWdodGluZyxmZURpc3BsYWNlbWVudE1hcCxmZURpc3RhbmNlTGlnaHQsZmVEcm9wU2hhZG93LGZlRmxvb2QsZmVGdW5jQSxmZUZ1bmNCLGZlRnVuY0csZmVGdW5jUixmZUdhdXNzaWFuQmx1cixmZUltYWdlLGZlTWVyZ2UsZmVNZXJnZU5vZGUsZmVNb3JwaG9sb2d5LGZlT2Zmc2V0LGZlUG9pbnRMaWdodCxmZVNwZWN1bGFyTGlnaHRpbmcsZmVTcG90TGlnaHQsZmVUaWxlLGZlVHVyYnVsZW5jZSxmaWx0ZXIsZm9yZWlnbk9iamVjdCxnLGhhdGNoLGhhdGNocGF0aCxpbWFnZSxsaW5lLGxpbmVhckdyYWRpZW50LG1hcmtlcixtYXNrLG1lc2gsbWVzaGdyYWRpZW50LG1lc2hwYXRjaCxtZXNocm93LG1ldGFkYXRhLG1wYXRoLHBhdGgscGF0dGVybixwb2x5Z29uLHBvbHlsaW5lLHJhZGlhbEdyYWRpZW50LHJlY3Qsc2V0LHNvbGlkY29sb3Isc3RvcCxzd2l0Y2gsc3ltYm9sLHRleHQsdGV4dFBhdGgsdGl0bGUsdHNwYW4sdW5rbm93bix1c2Usdmlld1wiKSxmPWUoXCJhcmVhLGJhc2UsYnIsY29sLGVtYmVkLGhyLGltZyxpbnB1dCxsaW5rLG1ldGEscGFyYW0sc291cmNlLHRyYWNrLHdiclwiKTtmdW5jdGlvbiBkKGUsdCl7aWYoZT09PXQpcmV0dXJuITA7bGV0IG49UihlKSxvPVIodCk7aWYobnx8bylyZXR1cm4hKCFufHwhbykmJmUuZ2V0VGltZSgpPT09dC5nZXRUaW1lKCk7aWYobj1BKGUpLG89QSh0KSxufHxvKXJldHVybiBlPT09dDtpZihuPUUoZSksbz1FKHQpLG58fG8pcmV0dXJuISghbnx8IW8pJiZmdW5jdGlvbihlLHQpe2lmKGUubGVuZ3RoIT09dC5sZW5ndGgpcmV0dXJuITE7bGV0IG49ITA7Zm9yKGxldCBvPTA7biYmbzxlLmxlbmd0aDtvKyspbj1kKGVbb10sdFtvXSk7cmV0dXJuIG59KGUsdCk7aWYobj1NKGUpLG89TSh0KSxufHxvKXtpZighbnx8IW8pcmV0dXJuITE7aWYoT2JqZWN0LmtleXMoZSkubGVuZ3RoIT09T2JqZWN0LmtleXModCkubGVuZ3RoKXJldHVybiExO2Zvcihjb25zdCBuIGluIGUpe2NvbnN0IG89ZS5oYXNPd25Qcm9wZXJ0eShuKSxyPXQuaGFzT3duUHJvcGVydHkobik7aWYobyYmIXJ8fCFvJiZyfHwhZChlW25dLHRbbl0pKXJldHVybiExfX1yZXR1cm4gU3RyaW5nKGUpPT09U3RyaW5nKHQpfWZ1bmN0aW9uIGgoZSx0KXtyZXR1cm4gZS5maW5kSW5kZXgoKGU9PmQoZSx0KSkpfWNvbnN0IG09ZT0+UChlKT9lOm51bGw9PWU/XCJcIjpFKGUpfHxNKGUpJiYoZS50b1N0cmluZz09PUl8fCFGKGUudG9TdHJpbmcpKT9KU09OLnN0cmluZ2lmeShlLGcsMik6U3RyaW5nKGUpLGc9KGUsdCk9PnQmJnQuX192X2lzUmVmP2coZSx0LnZhbHVlKTokKHQpP3tbYE1hcCgke3Quc2l6ZX0pYF06Wy4uLnQuZW50cmllcygpXS5yZWR1Y2UoKChlLFt0LG5dKT0+KGVbYCR7dH0gPT5gXT1uLGUpKSx7fSl9Ok8odCk/e1tgU2V0KCR7dC5zaXplfSlgXTpbLi4udC52YWx1ZXMoKV19OiFNKHQpfHxFKHQpfHxMKHQpP3Q6U3RyaW5nKHQpLHY9e30seT1bXSxfPSgpPT57fSxiPSgpPT4hMSxTPS9eb25bXmEtel0vLHg9ZT0+Uy50ZXN0KGUpLEM9ZT0+ZS5zdGFydHNXaXRoKFwib25VcGRhdGU6XCIpLHc9T2JqZWN0LmFzc2lnbixrPShlLHQpPT57Y29uc3Qgbj1lLmluZGV4T2YodCk7bj4tMSYmZS5zcGxpY2UobiwxKX0sVD1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LE49KGUsdCk9PlQuY2FsbChlLHQpLEU9QXJyYXkuaXNBcnJheSwkPWU9PlwiW29iamVjdCBNYXBdXCI9PT1CKGUpLE89ZT0+XCJbb2JqZWN0IFNldF1cIj09PUIoZSksUj1lPT5cIltvYmplY3QgRGF0ZV1cIj09PUIoZSksRj1lPT5cImZ1bmN0aW9uXCI9PXR5cGVvZiBlLFA9ZT0+XCJzdHJpbmdcIj09dHlwZW9mIGUsQT1lPT5cInN5bWJvbFwiPT10eXBlb2YgZSxNPWU9Pm51bGwhPT1lJiZcIm9iamVjdFwiPT10eXBlb2YgZSxWPWU9Pk0oZSkmJkYoZS50aGVuKSYmRihlLmNhdGNoKSxJPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcsQj1lPT5JLmNhbGwoZSksTD1lPT5cIltvYmplY3QgT2JqZWN0XVwiPT09QihlKSxqPWU9PlAoZSkmJlwiTmFOXCIhPT1lJiZcIi1cIiE9PWVbMF0mJlwiXCIrcGFyc2VJbnQoZSwxMCk9PT1lLFU9ZShcIixrZXkscmVmLHJlZl9mb3IscmVmX2tleSxvblZub2RlQmVmb3JlTW91bnQsb25Wbm9kZU1vdW50ZWQsb25Wbm9kZUJlZm9yZVVwZGF0ZSxvblZub2RlVXBkYXRlZCxvblZub2RlQmVmb3JlVW5tb3VudCxvblZub2RlVW5tb3VudGVkXCIpLEQ9ZShcImJpbmQsY2xvYWssZWxzZS1pZixlbHNlLGZvcixodG1sLGlmLG1vZGVsLG9uLG9uY2UscHJlLHNob3csc2xvdCx0ZXh0LG1lbW9cIiksSD1lPT57Y29uc3QgdD1PYmplY3QuY3JlYXRlKG51bGwpO3JldHVybiBuPT50W25dfHwodFtuXT1lKG4pKX0sVz0vLShcXHcpL2csej1IKChlPT5lLnJlcGxhY2UoVywoKGUsdCk9PnQ/dC50b1VwcGVyQ2FzZSgpOlwiXCIpKSkpLEs9L1xcQihbQS1aXSkvZyxHPUgoKGU9PmUucmVwbGFjZShLLFwiLSQxXCIpLnRvTG93ZXJDYXNlKCkpKSxxPUgoKGU9PmUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrZS5zbGljZSgxKSkpLEo9SCgoZT0+ZT9gb24ke3EoZSl9YDpcIlwiKSksWT0oZSx0KT0+IU9iamVjdC5pcyhlLHQpLFo9KGUsdCk9Pntmb3IobGV0IG49MDtuPGUubGVuZ3RoO24rKyllW25dKHQpfSxRPShlLHQsbik9PntPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHtjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMSx2YWx1ZTpufSl9LFg9ZT0+e2NvbnN0IHQ9cGFyc2VGbG9hdChlKTtyZXR1cm4gaXNOYU4odCk/ZTp0fTtsZXQgZWU7bGV0IHRlO2NsYXNzIG5le2NvbnN0cnVjdG9yKGU9ITEpe3RoaXMuYWN0aXZlPSEwLHRoaXMuZWZmZWN0cz1bXSx0aGlzLmNsZWFudXBzPVtdLCFlJiZ0ZSYmKHRoaXMucGFyZW50PXRlLHRoaXMuaW5kZXg9KHRlLnNjb3Blc3x8KHRlLnNjb3Blcz1bXSkpLnB1c2godGhpcyktMSl9cnVuKGUpe2lmKHRoaXMuYWN0aXZlKXtjb25zdCB0PXRlO3RyeXtyZXR1cm4gdGU9dGhpcyxlKCl9ZmluYWxseXt0ZT10fX19b24oKXt0ZT10aGlzfW9mZigpe3RlPXRoaXMucGFyZW50fXN0b3AoZSl7aWYodGhpcy5hY3RpdmUpe2xldCB0LG47Zm9yKHQ9MCxuPXRoaXMuZWZmZWN0cy5sZW5ndGg7dDxuO3QrKyl0aGlzLmVmZmVjdHNbdF0uc3RvcCgpO2Zvcih0PTAsbj10aGlzLmNsZWFudXBzLmxlbmd0aDt0PG47dCsrKXRoaXMuY2xlYW51cHNbdF0oKTtpZih0aGlzLnNjb3Blcylmb3IodD0wLG49dGhpcy5zY29wZXMubGVuZ3RoO3Q8bjt0KyspdGhpcy5zY29wZXNbdF0uc3RvcCghMCk7aWYodGhpcy5wYXJlbnQmJiFlKXtjb25zdCBlPXRoaXMucGFyZW50LnNjb3Blcy5wb3AoKTtlJiZlIT09dGhpcyYmKHRoaXMucGFyZW50LnNjb3Blc1t0aGlzLmluZGV4XT1lLGUuaW5kZXg9dGhpcy5pbmRleCl9dGhpcy5hY3RpdmU9ITF9fX1mdW5jdGlvbiBvZShlKXtyZXR1cm4gbmV3IG5lKGUpfWZ1bmN0aW9uIHJlKGUsdD10ZSl7dCYmdC5hY3RpdmUmJnQuZWZmZWN0cy5wdXNoKGUpfWZ1bmN0aW9uIHNlKCl7cmV0dXJuIHRlfWZ1bmN0aW9uIGllKGUpe3RlJiZ0ZS5jbGVhbnVwcy5wdXNoKGUpfWNvbnN0IGxlPWU9Pntjb25zdCB0PW5ldyBTZXQoZSk7cmV0dXJuIHQudz0wLHQubj0wLHR9LGNlPWU9PihlLncmZmUpPjAsYWU9ZT0+KGUubiZmZSk+MCx1ZT1uZXcgV2Vha01hcDtsZXQgcGU9MCxmZT0xO2xldCBkZTtjb25zdCBoZT1TeW1ib2woXCJcIiksbWU9U3ltYm9sKFwiXCIpO2NsYXNzIGdle2NvbnN0cnVjdG9yKGUsdD1udWxsLG4pe3RoaXMuZm49ZSx0aGlzLnNjaGVkdWxlcj10LHRoaXMuYWN0aXZlPSEwLHRoaXMuZGVwcz1bXSx0aGlzLnBhcmVudD12b2lkIDAscmUodGhpcyxuKX1ydW4oKXtpZighdGhpcy5hY3RpdmUpcmV0dXJuIHRoaXMuZm4oKTtsZXQgZT1kZSx0PWJlO2Zvcig7ZTspe2lmKGU9PT10aGlzKXJldHVybjtlPWUucGFyZW50fXRyeXtyZXR1cm4gdGhpcy5wYXJlbnQ9ZGUsZGU9dGhpcyxiZT0hMCxmZT0xPDwrK3BlLHBlPD0zMD8oKHtkZXBzOmV9KT0+e2lmKGUubGVuZ3RoKWZvcihsZXQgdD0wO3Q8ZS5sZW5ndGg7dCsrKWVbdF0ud3w9ZmV9KSh0aGlzKTp2ZSh0aGlzKSx0aGlzLmZuKCl9ZmluYWxseXtwZTw9MzAmJihlPT57Y29uc3R7ZGVwczp0fT1lO2lmKHQubGVuZ3RoKXtsZXQgbj0wO2ZvcihsZXQgbz0wO288dC5sZW5ndGg7bysrKXtjb25zdCByPXRbb107Y2UocikmJiFhZShyKT9yLmRlbGV0ZShlKTp0W24rK109cixyLncmPX5mZSxyLm4mPX5mZX10Lmxlbmd0aD1ufX0pKHRoaXMpLGZlPTE8PC0tcGUsZGU9dGhpcy5wYXJlbnQsYmU9dCx0aGlzLnBhcmVudD12b2lkIDAsdGhpcy5kZWZlclN0b3AmJnRoaXMuc3RvcCgpfX1zdG9wKCl7ZGU9PT10aGlzP3RoaXMuZGVmZXJTdG9wPSEwOnRoaXMuYWN0aXZlJiYodmUodGhpcyksdGhpcy5vblN0b3AmJnRoaXMub25TdG9wKCksdGhpcy5hY3RpdmU9ITEpfX1mdW5jdGlvbiB2ZShlKXtjb25zdHtkZXBzOnR9PWU7aWYodC5sZW5ndGgpe2ZvcihsZXQgbj0wO248dC5sZW5ndGg7bisrKXRbbl0uZGVsZXRlKGUpO3QubGVuZ3RoPTB9fWZ1bmN0aW9uIHllKGUsdCl7ZS5lZmZlY3QmJihlPWUuZWZmZWN0LmZuKTtjb25zdCBuPW5ldyBnZShlKTt0JiYodyhuLHQpLHQuc2NvcGUmJnJlKG4sdC5zY29wZSkpLHQmJnQubGF6eXx8bi5ydW4oKTtjb25zdCBvPW4ucnVuLmJpbmQobik7cmV0dXJuIG8uZWZmZWN0PW4sb31mdW5jdGlvbiBfZShlKXtlLmVmZmVjdC5zdG9wKCl9bGV0IGJlPSEwO2NvbnN0IFNlPVtdO2Z1bmN0aW9uIHhlKCl7U2UucHVzaChiZSksYmU9ITF9ZnVuY3Rpb24gQ2UoKXtjb25zdCBlPVNlLnBvcCgpO2JlPXZvaWQgMD09PWV8fGV9ZnVuY3Rpb24gd2UoZSx0LG4pe2lmKGJlJiZkZSl7bGV0IHQ9dWUuZ2V0KGUpO3R8fHVlLnNldChlLHQ9bmV3IE1hcCk7bGV0IG89dC5nZXQobik7b3x8dC5zZXQobixvPWxlKCkpLGtlKG8pfX1mdW5jdGlvbiBrZShlLHQpe2xldCBuPSExO3BlPD0zMD9hZShlKXx8KGUubnw9ZmUsbj0hY2UoZSkpOm49IWUuaGFzKGRlKSxuJiYoZS5hZGQoZGUpLGRlLmRlcHMucHVzaChlKSl9ZnVuY3Rpb24gVGUoZSx0LG4sbyxyLHMpe2NvbnN0IGk9dWUuZ2V0KGUpO2lmKCFpKXJldHVybjtsZXQgbD1bXTtpZihcImNsZWFyXCI9PT10KWw9Wy4uLmkudmFsdWVzKCldO2Vsc2UgaWYoXCJsZW5ndGhcIj09PW4mJkUoZSkpaS5mb3JFYWNoKCgoZSx0KT0+eyhcImxlbmd0aFwiPT09dHx8dD49bykmJmwucHVzaChlKX0pKTtlbHNlIHN3aXRjaCh2b2lkIDAhPT1uJiZsLnB1c2goaS5nZXQobikpLHQpe2Nhc2VcImFkZFwiOkUoZSk/aihuKSYmbC5wdXNoKGkuZ2V0KFwibGVuZ3RoXCIpKToobC5wdXNoKGkuZ2V0KGhlKSksJChlKSYmbC5wdXNoKGkuZ2V0KG1lKSkpO2JyZWFrO2Nhc2VcImRlbGV0ZVwiOkUoZSl8fChsLnB1c2goaS5nZXQoaGUpKSwkKGUpJiZsLnB1c2goaS5nZXQobWUpKSk7YnJlYWs7Y2FzZVwic2V0XCI6JChlKSYmbC5wdXNoKGkuZ2V0KGhlKSl9aWYoMT09PWwubGVuZ3RoKWxbMF0mJk5lKGxbMF0pO2Vsc2V7Y29uc3QgZT1bXTtmb3IoY29uc3QgdCBvZiBsKXQmJmUucHVzaCguLi50KTtOZShsZShlKSl9fWZ1bmN0aW9uIE5lKGUsdCl7Y29uc3Qgbj1FKGUpP2U6Wy4uLmVdO2Zvcihjb25zdCBvIG9mIG4pby5jb21wdXRlZCYmRWUobyk7Zm9yKGNvbnN0IG8gb2YgbilvLmNvbXB1dGVkfHxFZShvKX1mdW5jdGlvbiBFZShlLHQpeyhlIT09ZGV8fGUuYWxsb3dSZWN1cnNlKSYmKGUuc2NoZWR1bGVyP2Uuc2NoZWR1bGVyKCk6ZS5ydW4oKSl9Y29uc3QgJGU9ZShcIl9fcHJvdG9fXyxfX3ZfaXNSZWYsX19pc1Z1ZVwiKSxPZT1uZXcgU2V0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKFN5bWJvbCkuZmlsdGVyKChlPT5cImFyZ3VtZW50c1wiIT09ZSYmXCJjYWxsZXJcIiE9PWUpKS5tYXAoKGU9PlN5bWJvbFtlXSkpLmZpbHRlcihBKSksUmU9SWUoKSxGZT1JZSghMSwhMCksUGU9SWUoITApLEFlPUllKCEwLCEwKSxNZT1WZSgpO2Z1bmN0aW9uIFZlKCl7Y29uc3QgZT17fTtyZXR1cm5bXCJpbmNsdWRlc1wiLFwiaW5kZXhPZlwiLFwibGFzdEluZGV4T2ZcIl0uZm9yRWFjaCgodD0+e2VbdF09ZnVuY3Rpb24oLi4uZSl7Y29uc3Qgbj1rdCh0aGlzKTtmb3IobGV0IHQ9MCxyPXRoaXMubGVuZ3RoO3Q8cjt0Kyspd2UobiwwLHQrXCJcIik7Y29uc3Qgbz1uW3RdKC4uLmUpO3JldHVybi0xPT09b3x8ITE9PT1vP25bdF0oLi4uZS5tYXAoa3QpKTpvfX0pKSxbXCJwdXNoXCIsXCJwb3BcIixcInNoaWZ0XCIsXCJ1bnNoaWZ0XCIsXCJzcGxpY2VcIl0uZm9yRWFjaCgodD0+e2VbdF09ZnVuY3Rpb24oLi4uZSl7eGUoKTtjb25zdCBuPWt0KHRoaXMpW3RdLmFwcGx5KHRoaXMsZSk7cmV0dXJuIENlKCksbn19KSksZX1mdW5jdGlvbiBJZShlPSExLHQ9ITEpe3JldHVybiBmdW5jdGlvbihuLG8scil7aWYoXCJfX3ZfaXNSZWFjdGl2ZVwiPT09bylyZXR1cm4hZTtpZihcIl9fdl9pc1JlYWRvbmx5XCI9PT1vKXJldHVybiBlO2lmKFwiX192X2lzU2hhbGxvd1wiPT09bylyZXR1cm4gdDtpZihcIl9fdl9yYXdcIj09PW8mJnI9PT0oZT90P2h0OmR0OnQ/ZnQ6cHQpLmdldChuKSlyZXR1cm4gbjtjb25zdCBzPUUobik7aWYoIWUmJnMmJk4oTWUsbykpcmV0dXJuIFJlZmxlY3QuZ2V0KE1lLG8scik7Y29uc3QgaT1SZWZsZWN0LmdldChuLG8scik7cmV0dXJuKEEobyk/T2UuaGFzKG8pOiRlKG8pKT9pOihlfHx3ZShuLDAsbyksdD9pOlJ0KGkpP3MmJmoobyk/aTppLnZhbHVlOk0oaSk/ZT95dChpKTpndChpKTppKX19ZnVuY3Rpb24gQmUoZT0hMSl7cmV0dXJuIGZ1bmN0aW9uKHQsbixvLHIpe2xldCBzPXRbbl07aWYoeHQocykmJlJ0KHMpJiYhUnQobykpcmV0dXJuITE7aWYoIWUmJiF4dChvKSYmKEN0KG8pfHwobz1rdChvKSxzPWt0KHMpKSwhRSh0KSYmUnQocykmJiFSdChvKSkpcmV0dXJuIHMudmFsdWU9bywhMDtjb25zdCBpPUUodCkmJmoobik/TnVtYmVyKG4pPHQubGVuZ3RoOk4odCxuKSxsPVJlZmxlY3Quc2V0KHQsbixvLHIpO3JldHVybiB0PT09a3QocikmJihpP1kobyxzKSYmVGUodCxcInNldFwiLG4sbyk6VGUodCxcImFkZFwiLG4sbykpLGx9fWNvbnN0IExlPXtnZXQ6UmUsc2V0OkJlKCksZGVsZXRlUHJvcGVydHk6ZnVuY3Rpb24oZSx0KXtjb25zdCBuPU4oZSx0KSxvPVJlZmxlY3QuZGVsZXRlUHJvcGVydHkoZSx0KTtyZXR1cm4gbyYmbiYmVGUoZSxcImRlbGV0ZVwiLHQsdm9pZCAwKSxvfSxoYXM6ZnVuY3Rpb24oZSx0KXtjb25zdCBuPVJlZmxlY3QuaGFzKGUsdCk7cmV0dXJuIEEodCkmJk9lLmhhcyh0KXx8d2UoZSwwLHQpLG59LG93bktleXM6ZnVuY3Rpb24oZSl7cmV0dXJuIHdlKGUsMCxFKGUpP1wibGVuZ3RoXCI6aGUpLFJlZmxlY3Qub3duS2V5cyhlKX19LGplPXtnZXQ6UGUsc2V0OihlLHQpPT4hMCxkZWxldGVQcm9wZXJ0eTooZSx0KT0+ITB9LFVlPXcoe30sTGUse2dldDpGZSxzZXQ6QmUoITApfSksRGU9dyh7fSxqZSx7Z2V0OkFlfSksSGU9ZT0+ZSxXZT1lPT5SZWZsZWN0LmdldFByb3RvdHlwZU9mKGUpO2Z1bmN0aW9uIHplKGUsdCxuPSExLG89ITEpe2NvbnN0IHI9a3QoZT1lLl9fdl9yYXcpLHM9a3QodCk7bnx8KHQhPT1zJiZ3ZShyLDAsdCksd2UociwwLHMpKTtjb25zdHtoYXM6aX09V2UociksbD1vP0hlOm4/RXQ6TnQ7cmV0dXJuIGkuY2FsbChyLHQpP2woZS5nZXQodCkpOmkuY2FsbChyLHMpP2woZS5nZXQocykpOnZvaWQoZSE9PXImJmUuZ2V0KHQpKX1mdW5jdGlvbiBLZShlLHQ9ITEpe2NvbnN0IG49dGhpcy5fX3ZfcmF3LG89a3Qobikscj1rdChlKTtyZXR1cm4gdHx8KGUhPT1yJiZ3ZShvLDAsZSksd2UobywwLHIpKSxlPT09cj9uLmhhcyhlKTpuLmhhcyhlKXx8bi5oYXMocil9ZnVuY3Rpb24gR2UoZSx0PSExKXtyZXR1cm4gZT1lLl9fdl9yYXcsIXQmJndlKGt0KGUpLDAsaGUpLFJlZmxlY3QuZ2V0KGUsXCJzaXplXCIsZSl9ZnVuY3Rpb24gcWUoZSl7ZT1rdChlKTtjb25zdCB0PWt0KHRoaXMpO3JldHVybiBXZSh0KS5oYXMuY2FsbCh0LGUpfHwodC5hZGQoZSksVGUodCxcImFkZFwiLGUsZSkpLHRoaXN9ZnVuY3Rpb24gSmUoZSx0KXt0PWt0KHQpO2NvbnN0IG49a3QodGhpcykse2hhczpvLGdldDpyfT1XZShuKTtsZXQgcz1vLmNhbGwobixlKTtzfHwoZT1rdChlKSxzPW8uY2FsbChuLGUpKTtjb25zdCBpPXIuY2FsbChuLGUpO3JldHVybiBuLnNldChlLHQpLHM/WSh0LGkpJiZUZShuLFwic2V0XCIsZSx0KTpUZShuLFwiYWRkXCIsZSx0KSx0aGlzfWZ1bmN0aW9uIFllKGUpe2NvbnN0IHQ9a3QodGhpcykse2hhczpuLGdldDpvfT1XZSh0KTtsZXQgcj1uLmNhbGwodCxlKTtyfHwoZT1rdChlKSxyPW4uY2FsbCh0LGUpKSxvJiZvLmNhbGwodCxlKTtjb25zdCBzPXQuZGVsZXRlKGUpO3JldHVybiByJiZUZSh0LFwiZGVsZXRlXCIsZSx2b2lkIDApLHN9ZnVuY3Rpb24gWmUoKXtjb25zdCBlPWt0KHRoaXMpLHQ9MCE9PWUuc2l6ZSxuPWUuY2xlYXIoKTtyZXR1cm4gdCYmVGUoZSxcImNsZWFyXCIsdm9pZCAwLHZvaWQgMCksbn1mdW5jdGlvbiBRZShlLHQpe3JldHVybiBmdW5jdGlvbihuLG8pe2NvbnN0IHI9dGhpcyxzPXIuX192X3JhdyxpPWt0KHMpLGw9dD9IZTplP0V0Ok50O3JldHVybiFlJiZ3ZShpLDAsaGUpLHMuZm9yRWFjaCgoKGUsdCk9Pm4uY2FsbChvLGwoZSksbCh0KSxyKSkpfX1mdW5jdGlvbiBYZShlLHQsbil7cmV0dXJuIGZ1bmN0aW9uKC4uLm8pe2NvbnN0IHI9dGhpcy5fX3ZfcmF3LHM9a3QociksaT0kKHMpLGw9XCJlbnRyaWVzXCI9PT1lfHxlPT09U3ltYm9sLml0ZXJhdG9yJiZpLGM9XCJrZXlzXCI9PT1lJiZpLGE9cltlXSguLi5vKSx1PW4/SGU6dD9FdDpOdDtyZXR1cm4hdCYmd2UocywwLGM/bWU6aGUpLHtuZXh0KCl7Y29uc3R7dmFsdWU6ZSxkb25lOnR9PWEubmV4dCgpO3JldHVybiB0P3t2YWx1ZTplLGRvbmU6dH06e3ZhbHVlOmw/W3UoZVswXSksdShlWzFdKV06dShlKSxkb25lOnR9fSxbU3ltYm9sLml0ZXJhdG9yXSgpe3JldHVybiB0aGlzfX19fWZ1bmN0aW9uIGV0KGUpe3JldHVybiBmdW5jdGlvbiguLi50KXtyZXR1cm5cImRlbGV0ZVwiIT09ZSYmdGhpc319ZnVuY3Rpb24gdHQoKXtjb25zdCBlPXtnZXQoZSl7cmV0dXJuIHplKHRoaXMsZSl9LGdldCBzaXplKCl7cmV0dXJuIEdlKHRoaXMpfSxoYXM6S2UsYWRkOnFlLHNldDpKZSxkZWxldGU6WWUsY2xlYXI6WmUsZm9yRWFjaDpRZSghMSwhMSl9LHQ9e2dldChlKXtyZXR1cm4gemUodGhpcyxlLCExLCEwKX0sZ2V0IHNpemUoKXtyZXR1cm4gR2UodGhpcyl9LGhhczpLZSxhZGQ6cWUsc2V0OkplLGRlbGV0ZTpZZSxjbGVhcjpaZSxmb3JFYWNoOlFlKCExLCEwKX0sbj17Z2V0KGUpe3JldHVybiB6ZSh0aGlzLGUsITApfSxnZXQgc2l6ZSgpe3JldHVybiBHZSh0aGlzLCEwKX0saGFzKGUpe3JldHVybiBLZS5jYWxsKHRoaXMsZSwhMCl9LGFkZDpldChcImFkZFwiKSxzZXQ6ZXQoXCJzZXRcIiksZGVsZXRlOmV0KFwiZGVsZXRlXCIpLGNsZWFyOmV0KFwiY2xlYXJcIiksZm9yRWFjaDpRZSghMCwhMSl9LG89e2dldChlKXtyZXR1cm4gemUodGhpcyxlLCEwLCEwKX0sZ2V0IHNpemUoKXtyZXR1cm4gR2UodGhpcywhMCl9LGhhcyhlKXtyZXR1cm4gS2UuY2FsbCh0aGlzLGUsITApfSxhZGQ6ZXQoXCJhZGRcIiksc2V0OmV0KFwic2V0XCIpLGRlbGV0ZTpldChcImRlbGV0ZVwiKSxjbGVhcjpldChcImNsZWFyXCIpLGZvckVhY2g6UWUoITAsITApfTtyZXR1cm5bXCJrZXlzXCIsXCJ2YWx1ZXNcIixcImVudHJpZXNcIixTeW1ib2wuaXRlcmF0b3JdLmZvckVhY2goKHI9PntlW3JdPVhlKHIsITEsITEpLG5bcl09WGUociwhMCwhMSksdFtyXT1YZShyLCExLCEwKSxvW3JdPVhlKHIsITAsITApfSkpLFtlLG4sdCxvXX1jb25zdFtudCxvdCxydCxzdF09dHQoKTtmdW5jdGlvbiBpdChlLHQpe2NvbnN0IG49dD9lP3N0OnJ0OmU/b3Q6bnQ7cmV0dXJuKHQsbyxyKT0+XCJfX3ZfaXNSZWFjdGl2ZVwiPT09bz8hZTpcIl9fdl9pc1JlYWRvbmx5XCI9PT1vP2U6XCJfX3ZfcmF3XCI9PT1vP3Q6UmVmbGVjdC5nZXQoTihuLG8pJiZvIGluIHQ/bjp0LG8scil9Y29uc3QgbHQ9e2dldDppdCghMSwhMSl9LGN0PXtnZXQ6aXQoITEsITApfSxhdD17Z2V0Oml0KCEwLCExKX0sdXQ9e2dldDppdCghMCwhMCl9LHB0PW5ldyBXZWFrTWFwLGZ0PW5ldyBXZWFrTWFwLGR0PW5ldyBXZWFrTWFwLGh0PW5ldyBXZWFrTWFwO2Z1bmN0aW9uIG10KGUpe3JldHVybiBlLl9fdl9za2lwfHwhT2JqZWN0LmlzRXh0ZW5zaWJsZShlKT8wOmZ1bmN0aW9uKGUpe3N3aXRjaChlKXtjYXNlXCJPYmplY3RcIjpjYXNlXCJBcnJheVwiOnJldHVybiAxO2Nhc2VcIk1hcFwiOmNhc2VcIlNldFwiOmNhc2VcIldlYWtNYXBcIjpjYXNlXCJXZWFrU2V0XCI6cmV0dXJuIDI7ZGVmYXVsdDpyZXR1cm4gMH19KChlPT5CKGUpLnNsaWNlKDgsLTEpKShlKSl9ZnVuY3Rpb24gZ3QoZSl7cmV0dXJuIHh0KGUpP2U6YnQoZSwhMSxMZSxsdCxwdCl9ZnVuY3Rpb24gdnQoZSl7cmV0dXJuIGJ0KGUsITEsVWUsY3QsZnQpfWZ1bmN0aW9uIHl0KGUpe3JldHVybiBidChlLCEwLGplLGF0LGR0KX1mdW5jdGlvbiBfdChlKXtyZXR1cm4gYnQoZSwhMCxEZSx1dCxodCl9ZnVuY3Rpb24gYnQoZSx0LG4sbyxyKXtpZighTShlKSlyZXR1cm4gZTtpZihlLl9fdl9yYXcmJighdHx8IWUuX192X2lzUmVhY3RpdmUpKXJldHVybiBlO2NvbnN0IHM9ci5nZXQoZSk7aWYocylyZXR1cm4gcztjb25zdCBpPW10KGUpO2lmKDA9PT1pKXJldHVybiBlO2NvbnN0IGw9bmV3IFByb3h5KGUsMj09PWk/bzpuKTtyZXR1cm4gci5zZXQoZSxsKSxsfWZ1bmN0aW9uIFN0KGUpe3JldHVybiB4dChlKT9TdChlLl9fdl9yYXcpOiEoIWV8fCFlLl9fdl9pc1JlYWN0aXZlKX1mdW5jdGlvbiB4dChlKXtyZXR1cm4hKCFlfHwhZS5fX3ZfaXNSZWFkb25seSl9ZnVuY3Rpb24gQ3QoZSl7cmV0dXJuISghZXx8IWUuX192X2lzU2hhbGxvdyl9ZnVuY3Rpb24gd3QoZSl7cmV0dXJuIFN0KGUpfHx4dChlKX1mdW5jdGlvbiBrdChlKXtjb25zdCB0PWUmJmUuX192X3JhdztyZXR1cm4gdD9rdCh0KTplfWZ1bmN0aW9uIFR0KGUpe3JldHVybiBRKGUsXCJfX3Zfc2tpcFwiLCEwKSxlfWNvbnN0IE50PWU9Pk0oZSk/Z3QoZSk6ZSxFdD1lPT5NKGUpP3l0KGUpOmU7ZnVuY3Rpb24gJHQoZSl7YmUmJmRlJiZrZSgoZT1rdChlKSkuZGVwfHwoZS5kZXA9bGUoKSkpfWZ1bmN0aW9uIE90KGUsdCl7KGU9a3QoZSkpLmRlcCYmTmUoZS5kZXApfWZ1bmN0aW9uIFJ0KGUpe3JldHVybiEoIWV8fCEwIT09ZS5fX3ZfaXNSZWYpfWZ1bmN0aW9uIEZ0KGUpe3JldHVybiBBdChlLCExKX1mdW5jdGlvbiBQdChlKXtyZXR1cm4gQXQoZSwhMCl9ZnVuY3Rpb24gQXQoZSx0KXtyZXR1cm4gUnQoZSk/ZTpuZXcgTXQoZSx0KX1jbGFzcyBNdHtjb25zdHJ1Y3RvcihlLHQpe3RoaXMuX192X2lzU2hhbGxvdz10LHRoaXMuZGVwPXZvaWQgMCx0aGlzLl9fdl9pc1JlZj0hMCx0aGlzLl9yYXdWYWx1ZT10P2U6a3QoZSksdGhpcy5fdmFsdWU9dD9lOk50KGUpfWdldCB2YWx1ZSgpe3JldHVybiAkdCh0aGlzKSx0aGlzLl92YWx1ZX1zZXQgdmFsdWUoZSl7ZT10aGlzLl9fdl9pc1NoYWxsb3c/ZTprdChlKSxZKGUsdGhpcy5fcmF3VmFsdWUpJiYodGhpcy5fcmF3VmFsdWU9ZSx0aGlzLl92YWx1ZT10aGlzLl9fdl9pc1NoYWxsb3c/ZTpOdChlKSxPdCh0aGlzKSl9fWZ1bmN0aW9uIFZ0KGUpe090KGUpfWZ1bmN0aW9uIEl0KGUpe3JldHVybiBSdChlKT9lLnZhbHVlOmV9Y29uc3QgQnQ9e2dldDooZSx0LG4pPT5JdChSZWZsZWN0LmdldChlLHQsbikpLHNldDooZSx0LG4sbyk9Pntjb25zdCByPWVbdF07cmV0dXJuIFJ0KHIpJiYhUnQobik/KHIudmFsdWU9biwhMCk6UmVmbGVjdC5zZXQoZSx0LG4sbyl9fTtmdW5jdGlvbiBMdChlKXtyZXR1cm4gU3QoZSk/ZTpuZXcgUHJveHkoZSxCdCl9Y2xhc3MganR7Y29uc3RydWN0b3IoZSl7dGhpcy5kZXA9dm9pZCAwLHRoaXMuX192X2lzUmVmPSEwO2NvbnN0e2dldDp0LHNldDpufT1lKCgoKT0+JHQodGhpcykpLCgoKT0+T3QodGhpcykpKTt0aGlzLl9nZXQ9dCx0aGlzLl9zZXQ9bn1nZXQgdmFsdWUoKXtyZXR1cm4gdGhpcy5fZ2V0KCl9c2V0IHZhbHVlKGUpe3RoaXMuX3NldChlKX19ZnVuY3Rpb24gVXQoZSl7cmV0dXJuIG5ldyBqdChlKX1mdW5jdGlvbiBEdChlKXtjb25zdCB0PUUoZSk/bmV3IEFycmF5KGUubGVuZ3RoKTp7fTtmb3IoY29uc3QgbiBpbiBlKXRbbl09V3QoZSxuKTtyZXR1cm4gdH1jbGFzcyBIdHtjb25zdHJ1Y3RvcihlLHQsbil7dGhpcy5fb2JqZWN0PWUsdGhpcy5fa2V5PXQsdGhpcy5fZGVmYXVsdFZhbHVlPW4sdGhpcy5fX3ZfaXNSZWY9ITB9Z2V0IHZhbHVlKCl7Y29uc3QgZT10aGlzLl9vYmplY3RbdGhpcy5fa2V5XTtyZXR1cm4gdm9pZCAwPT09ZT90aGlzLl9kZWZhdWx0VmFsdWU6ZX1zZXQgdmFsdWUoZSl7dGhpcy5fb2JqZWN0W3RoaXMuX2tleV09ZX19ZnVuY3Rpb24gV3QoZSx0LG4pe2NvbnN0IG89ZVt0XTtyZXR1cm4gUnQobyk/bzpuZXcgSHQoZSx0LG4pfWNsYXNzIHp0e2NvbnN0cnVjdG9yKGUsdCxuLG8pe3RoaXMuX3NldHRlcj10LHRoaXMuZGVwPXZvaWQgMCx0aGlzLl9fdl9pc1JlZj0hMCx0aGlzLl9kaXJ0eT0hMCx0aGlzLmVmZmVjdD1uZXcgZ2UoZSwoKCk9Pnt0aGlzLl9kaXJ0eXx8KHRoaXMuX2RpcnR5PSEwLE90KHRoaXMpKX0pKSx0aGlzLmVmZmVjdC5jb21wdXRlZD10aGlzLHRoaXMuZWZmZWN0LmFjdGl2ZT10aGlzLl9jYWNoZWFibGU9IW8sdGhpcy5fX3ZfaXNSZWFkb25seT1ufWdldCB2YWx1ZSgpe2NvbnN0IGU9a3QodGhpcyk7cmV0dXJuICR0KGUpLCFlLl9kaXJ0eSYmZS5fY2FjaGVhYmxlfHwoZS5fZGlydHk9ITEsZS5fdmFsdWU9ZS5lZmZlY3QucnVuKCkpLGUuX3ZhbHVlfXNldCB2YWx1ZShlKXt0aGlzLl9zZXR0ZXIoZSl9fWNvbnN0IEt0PVtdO2Z1bmN0aW9uIEd0KGUsLi4udCl7eGUoKTtjb25zdCBuPUt0Lmxlbmd0aD9LdFtLdC5sZW5ndGgtMV0uY29tcG9uZW50Om51bGwsbz1uJiZuLmFwcENvbnRleHQuY29uZmlnLndhcm5IYW5kbGVyLHI9ZnVuY3Rpb24oKXtsZXQgZT1LdFtLdC5sZW5ndGgtMV07aWYoIWUpcmV0dXJuW107Y29uc3QgdD1bXTtmb3IoO2U7KXtjb25zdCBuPXRbMF07biYmbi52bm9kZT09PWU/bi5yZWN1cnNlQ291bnQrKzp0LnB1c2goe3Zub2RlOmUscmVjdXJzZUNvdW50OjB9KTtjb25zdCBvPWUuY29tcG9uZW50JiZlLmNvbXBvbmVudC5wYXJlbnQ7ZT1vJiZvLnZub2RlfXJldHVybiB0fSgpO2lmKG8pWXQobyxuLDExLFtlK3Quam9pbihcIlwiKSxuJiZuLnByb3h5LHIubWFwKCgoe3Zub2RlOmV9KT0+YGF0IDwke0xzKG4sZS50eXBlKX0+YCkpLmpvaW4oXCJcXG5cIikscl0pO2Vsc2V7Y29uc3Qgbj1bYFtWdWUgd2Fybl06ICR7ZX1gLC4uLnRdO3IubGVuZ3RoJiZuLnB1c2goXCJcXG5cIiwuLi5mdW5jdGlvbihlKXtjb25zdCB0PVtdO3JldHVybiBlLmZvckVhY2goKChlLG4pPT57dC5wdXNoKC4uLjA9PT1uP1tdOltcIlxcblwiXSwuLi5mdW5jdGlvbih7dm5vZGU6ZSxyZWN1cnNlQ291bnQ6dH0pe2NvbnN0IG49dD4wP2AuLi4gKCR7dH0gcmVjdXJzaXZlIGNhbGxzKWA6XCJcIixvPWAgYXQgPCR7THMoZS5jb21wb25lbnQsZS50eXBlLCEhZS5jb21wb25lbnQmJm51bGw9PWUuY29tcG9uZW50LnBhcmVudCl9YCxyPVwiPlwiK247cmV0dXJuIGUucHJvcHM/W28sLi4ucXQoZS5wcm9wcykscl06W28rcl19KGUpKX0pKSx0fShyKSksY29uc29sZS53YXJuKC4uLm4pfUNlKCl9ZnVuY3Rpb24gcXQoZSl7Y29uc3QgdD1bXSxuPU9iamVjdC5rZXlzKGUpO3JldHVybiBuLnNsaWNlKDAsMykuZm9yRWFjaCgobj0+e3QucHVzaCguLi5KdChuLGVbbl0pKX0pKSxuLmxlbmd0aD4zJiZ0LnB1c2goXCIgLi4uXCIpLHR9ZnVuY3Rpb24gSnQoZSx0LG4pe3JldHVybiBQKHQpPyh0PUpTT04uc3RyaW5naWZ5KHQpLG4/dDpbYCR7ZX09JHt0fWBdKTpcIm51bWJlclwiPT10eXBlb2YgdHx8XCJib29sZWFuXCI9PXR5cGVvZiB0fHxudWxsPT10P24/dDpbYCR7ZX09JHt0fWBdOlJ0KHQpPyh0PUp0KGUsa3QodC52YWx1ZSksITApLG4/dDpbYCR7ZX09UmVmPGAsdCxcIj5cIl0pOkYodCk/W2Ake2V9PWZuJHt0Lm5hbWU/YDwke3QubmFtZX0+YDpcIlwifWBdOih0PWt0KHQpLG4/dDpbYCR7ZX09YCx0XSl9ZnVuY3Rpb24gWXQoZSx0LG4sbyl7bGV0IHI7dHJ5e3I9bz9lKC4uLm8pOmUoKX1jYXRjaChzKXtRdChzLHQsbil9cmV0dXJuIHJ9ZnVuY3Rpb24gWnQoZSx0LG4sbyl7aWYoRihlKSl7Y29uc3Qgcj1ZdChlLHQsbixvKTtyZXR1cm4gciYmVihyKSYmci5jYXRjaCgoZT0+e1F0KGUsdCxuKX0pKSxyfWNvbnN0IHI9W107Zm9yKGxldCBzPTA7czxlLmxlbmd0aDtzKyspci5wdXNoKFp0KGVbc10sdCxuLG8pKTtyZXR1cm4gcn1mdW5jdGlvbiBRdChlLHQsbixvPSEwKXtpZih0KXtsZXQgbz10LnBhcmVudDtjb25zdCByPXQucHJveHkscz1uO2Zvcig7bzspe2NvbnN0IHQ9by5lYztpZih0KWZvcihsZXQgbj0wO248dC5sZW5ndGg7bisrKWlmKCExPT09dFtuXShlLHIscykpcmV0dXJuO289by5wYXJlbnR9Y29uc3QgaT10LmFwcENvbnRleHQuY29uZmlnLmVycm9ySGFuZGxlcjtpZihpKXJldHVybiB2b2lkIFl0KGksbnVsbCwxMCxbZSxyLHNdKX0hZnVuY3Rpb24oZSx0LG4sbz0hMCl7Y29uc29sZS5lcnJvcihlKX0oZSwwLDAsbyl9bGV0IFh0PSExLGVuPSExO2NvbnN0IHRuPVtdO2xldCBubj0wO2NvbnN0IG9uPVtdO2xldCBybj1udWxsLHNuPTA7Y29uc3QgbG49W107bGV0IGNuPW51bGwsYW49MDtjb25zdCB1bj1Qcm9taXNlLnJlc29sdmUoKTtsZXQgcG49bnVsbCxmbj1udWxsO2Z1bmN0aW9uIGRuKGUpe2NvbnN0IHQ9cG58fHVuO3JldHVybiBlP3QudGhlbih0aGlzP2UuYmluZCh0aGlzKTplKTp0fWZ1bmN0aW9uIGhuKGUpe3RuLmxlbmd0aCYmdG4uaW5jbHVkZXMoZSxYdCYmZS5hbGxvd1JlY3Vyc2U/bm4rMTpubil8fGU9PT1mbnx8KG51bGw9PWUuaWQ/dG4ucHVzaChlKTp0bi5zcGxpY2UoZnVuY3Rpb24oZSl7bGV0IHQ9bm4rMSxuPXRuLmxlbmd0aDtmb3IoO3Q8bjspe2NvbnN0IG89dCtuPj4+MTtibih0bltvXSk8ZT90PW8rMTpuPW99cmV0dXJuIHR9KGUuaWQpLDAsZSksbW4oKSl9ZnVuY3Rpb24gbW4oKXtYdHx8ZW58fChlbj0hMCxwbj11bi50aGVuKFNuKSl9ZnVuY3Rpb24gZ24oZSx0LG4sbyl7RShlKT9uLnB1c2goLi4uZSk6dCYmdC5pbmNsdWRlcyhlLGUuYWxsb3dSZWN1cnNlP28rMTpvKXx8bi5wdXNoKGUpLG1uKCl9ZnVuY3Rpb24gdm4oZSl7Z24oZSxjbixsbixhbil9ZnVuY3Rpb24geW4oZSx0PW51bGwpe2lmKG9uLmxlbmd0aCl7Zm9yKGZuPXQscm49Wy4uLm5ldyBTZXQob24pXSxvbi5sZW5ndGg9MCxzbj0wO3NuPHJuLmxlbmd0aDtzbisrKXJuW3NuXSgpO3JuPW51bGwsc249MCxmbj1udWxsLHluKGUsdCl9fWZ1bmN0aW9uIF9uKGUpe2lmKHluKCksbG4ubGVuZ3RoKXtjb25zdCBlPVsuLi5uZXcgU2V0KGxuKV07aWYobG4ubGVuZ3RoPTAsY24pcmV0dXJuIHZvaWQgY24ucHVzaCguLi5lKTtmb3IoY249ZSxjbi5zb3J0KCgoZSx0KT0+Ym4oZSktYm4odCkpKSxhbj0wO2FuPGNuLmxlbmd0aDthbisrKWNuW2FuXSgpO2NuPW51bGwsYW49MH19Y29uc3QgYm49ZT0+bnVsbD09ZS5pZD8xLzA6ZS5pZDtmdW5jdGlvbiBTbihlKXtlbj0hMSxYdD0hMCx5bihlKSx0bi5zb3J0KCgoZSx0KT0+Ym4oZSktYm4odCkpKTt0cnl7Zm9yKG5uPTA7bm48dG4ubGVuZ3RoO25uKyspe2NvbnN0IGU9dG5bbm5dO2UmJiExIT09ZS5hY3RpdmUmJll0KGUsbnVsbCwxNCl9fWZpbmFsbHl7bm49MCx0bi5sZW5ndGg9MCxfbigpLFh0PSExLHBuPW51bGwsKHRuLmxlbmd0aHx8b24ubGVuZ3RofHxsbi5sZW5ndGgpJiZTbihlKX19bGV0IHhuLENuPVtdO2Z1bmN0aW9uIHduKGUsdCl7dmFyIG4sbztpZih4bj1lLHhuKXhuLmVuYWJsZWQ9ITAsQ24uZm9yRWFjaCgoKHtldmVudDplLGFyZ3M6dH0pPT54bi5lbWl0KGUsLi4udCkpKSxDbj1bXTtlbHNlIGlmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJndpbmRvdy5IVE1MRWxlbWVudCYmIShudWxsPT09KG89bnVsbD09PShuPXdpbmRvdy5uYXZpZ2F0b3IpfHx2b2lkIDA9PT1uP3ZvaWQgMDpuLnVzZXJBZ2VudCl8fHZvaWQgMD09PW8/dm9pZCAwOm8uaW5jbHVkZXMoXCJqc2RvbVwiKSkpeyh0Ll9fVlVFX0RFVlRPT0xTX0hPT0tfUkVQTEFZX189dC5fX1ZVRV9ERVZUT09MU19IT09LX1JFUExBWV9ffHxbXSkucHVzaCgoZT0+e3duKGUsdCl9KSksc2V0VGltZW91dCgoKCk9Pnt4bnx8KHQuX19WVUVfREVWVE9PTFNfSE9PS19SRVBMQVlfXz1udWxsLENuPVtdKX0pLDNlMyl9ZWxzZSBDbj1bXX1mdW5jdGlvbiBrbihlLHQsLi4ubil7aWYoZS5pc1VubW91bnRlZClyZXR1cm47Y29uc3Qgbz1lLnZub2RlLnByb3BzfHx2O2xldCByPW47Y29uc3Qgcz10LnN0YXJ0c1dpdGgoXCJ1cGRhdGU6XCIpLGk9cyYmdC5zbGljZSg3KTtpZihpJiZpIGluIG8pe2NvbnN0IGU9YCR7XCJtb2RlbFZhbHVlXCI9PT1pP1wibW9kZWxcIjppfU1vZGlmaWVyc2Ase251bWJlcjp0LHRyaW06c309b1tlXXx8djtzJiYocj1uLm1hcCgoZT0+ZS50cmltKCkpKSksdCYmKHI9bi5tYXAoWCkpfWxldCBsLGM9b1tsPUoodCldfHxvW2w9Sih6KHQpKV07IWMmJnMmJihjPW9bbD1KKEcodCkpXSksYyYmWnQoYyxlLDYscik7Y29uc3QgYT1vW2wrXCJPbmNlXCJdO2lmKGEpe2lmKGUuZW1pdHRlZCl7aWYoZS5lbWl0dGVkW2xdKXJldHVybn1lbHNlIGUuZW1pdHRlZD17fTtlLmVtaXR0ZWRbbF09ITAsWnQoYSxlLDYscil9fWZ1bmN0aW9uIFRuKGUsdCxuPSExKXtjb25zdCBvPXQuZW1pdHNDYWNoZSxyPW8uZ2V0KGUpO2lmKHZvaWQgMCE9PXIpcmV0dXJuIHI7Y29uc3Qgcz1lLmVtaXRzO2xldCBpPXt9LGw9ITE7aWYoIUYoZSkpe2NvbnN0IG89ZT0+e2NvbnN0IG49VG4oZSx0LCEwKTtuJiYobD0hMCx3KGksbikpfTshbiYmdC5taXhpbnMubGVuZ3RoJiZ0Lm1peGlucy5mb3JFYWNoKG8pLGUuZXh0ZW5kcyYmbyhlLmV4dGVuZHMpLGUubWl4aW5zJiZlLm1peGlucy5mb3JFYWNoKG8pfXJldHVybiBzfHxsPyhFKHMpP3MuZm9yRWFjaCgoZT0+aVtlXT1udWxsKSk6dyhpLHMpLG8uc2V0KGUsaSksaSk6KG8uc2V0KGUsbnVsbCksbnVsbCl9ZnVuY3Rpb24gTm4oZSx0KXtyZXR1cm4hKCFlfHwheCh0KSkmJih0PXQuc2xpY2UoMikucmVwbGFjZSgvT25jZSQvLFwiXCIpLE4oZSx0WzBdLnRvTG93ZXJDYXNlKCkrdC5zbGljZSgxKSl8fE4oZSxHKHQpKXx8TihlLHQpKX1sZXQgRW49bnVsbCwkbj1udWxsO2Z1bmN0aW9uIE9uKGUpe2NvbnN0IHQ9RW47cmV0dXJuIEVuPWUsJG49ZSYmZS50eXBlLl9fc2NvcGVJZHx8bnVsbCx0fWZ1bmN0aW9uIFJuKGUpeyRuPWV9ZnVuY3Rpb24gRm4oKXskbj1udWxsfWNvbnN0IFBuPWU9PkFuO2Z1bmN0aW9uIEFuKGUsdD1FbixuKXtpZighdClyZXR1cm4gZTtpZihlLl9uKXJldHVybiBlO2NvbnN0IG89KC4uLm4pPT57by5fZCYmWHIoLTEpO2NvbnN0IHI9T24odCkscz1lKC4uLm4pO3JldHVybiBPbihyKSxvLl9kJiZYcigxKSxzfTtyZXR1cm4gby5fbj0hMCxvLl9jPSEwLG8uX2Q9ITAsb31mdW5jdGlvbiBNbihlKXtjb25zdHt0eXBlOnQsdm5vZGU6bixwcm94eTpvLHdpdGhQcm94eTpyLHByb3BzOnMscHJvcHNPcHRpb25zOltpXSxzbG90czpsLGF0dHJzOmMsZW1pdDphLHJlbmRlcjp1LHJlbmRlckNhY2hlOnAsZGF0YTpmLHNldHVwU3RhdGU6ZCxjdHg6aCxpbmhlcml0QXR0cnM6bX09ZTtsZXQgZyx2O2NvbnN0IHk9T24oZSk7dHJ5e2lmKDQmbi5zaGFwZUZsYWcpe2NvbnN0IGU9cnx8bztnPWdzKHUuY2FsbChlLGUscCxzLGQsZixoKSksdj1jfWVsc2V7Y29uc3QgZT10OzAsZz1ncyhlKHMsZS5sZW5ndGg+MT97YXR0cnM6YyxzbG90czpsLGVtaXQ6YX06bnVsbCkpLHY9dC5wcm9wcz9jOlZuKGMpfX1jYXRjaChiKXtxci5sZW5ndGg9MCxRdChiLGUsMSksZz11cyhLcil9bGV0IF89ZztpZih2JiYhMSE9PW0pe2NvbnN0IGU9T2JqZWN0LmtleXModikse3NoYXBlRmxhZzp0fT1fO2UubGVuZ3RoJiY3JnQmJihpJiZlLnNvbWUoQykmJih2PUluKHYsaSkpLF89ZnMoXyx2KSl9cmV0dXJuIG4uZGlycyYmKF89ZnMoXyksXy5kaXJzPV8uZGlycz9fLmRpcnMuY29uY2F0KG4uZGlycyk6bi5kaXJzKSxuLnRyYW5zaXRpb24mJihfLnRyYW5zaXRpb249bi50cmFuc2l0aW9uKSxnPV8sT24oeSksZ31jb25zdCBWbj1lPT57bGV0IHQ7Zm9yKGNvbnN0IG4gaW4gZSkoXCJjbGFzc1wiPT09bnx8XCJzdHlsZVwiPT09bnx8eChuKSkmJigodHx8KHQ9e30pKVtuXT1lW25dKTtyZXR1cm4gdH0sSW49KGUsdCk9Pntjb25zdCBuPXt9O2Zvcihjb25zdCBvIGluIGUpQyhvKSYmby5zbGljZSg5KWluIHR8fChuW29dPWVbb10pO3JldHVybiBufTtmdW5jdGlvbiBCbihlLHQsbil7Y29uc3Qgbz1PYmplY3Qua2V5cyh0KTtpZihvLmxlbmd0aCE9PU9iamVjdC5rZXlzKGUpLmxlbmd0aClyZXR1cm4hMDtmb3IobGV0IHI9MDtyPG8ubGVuZ3RoO3IrKyl7Y29uc3Qgcz1vW3JdO2lmKHRbc10hPT1lW3NdJiYhTm4obixzKSlyZXR1cm4hMH1yZXR1cm4hMX1mdW5jdGlvbiBMbih7dm5vZGU6ZSxwYXJlbnQ6dH0sbil7Zm9yKDt0JiZ0LnN1YlRyZWU9PT1lOykoZT10LnZub2RlKS5lbD1uLHQ9dC5wYXJlbnR9Y29uc3Qgam49ZT0+ZS5fX2lzU3VzcGVuc2UsVW49e25hbWU6XCJTdXNwZW5zZVwiLF9faXNTdXNwZW5zZTohMCxwcm9jZXNzKGUsdCxuLG8scixzLGksbCxjLGEpe251bGw9PWU/ZnVuY3Rpb24oZSx0LG4sbyxyLHMsaSxsLGMpe2NvbnN0e3A6YSxvOntjcmVhdGVFbGVtZW50OnV9fT1jLHA9dShcImRpdlwiKSxmPWUuc3VzcGVuc2U9SG4oZSxyLG8sdCxwLG4scyxpLGwsYyk7YShudWxsLGYucGVuZGluZ0JyYW5jaD1lLnNzQ29udGVudCxwLG51bGwsbyxmLHMsaSksZi5kZXBzPjA/KERuKGUsXCJvblBlbmRpbmdcIiksRG4oZSxcIm9uRmFsbGJhY2tcIiksYShudWxsLGUuc3NGYWxsYmFjayx0LG4sbyxudWxsLHMsaSksS24oZixlLnNzRmFsbGJhY2spKTpmLnJlc29sdmUoKX0odCxuLG8scixzLGksbCxjLGEpOmZ1bmN0aW9uKGUsdCxuLG8scixzLGksbCx7cDpjLHVtOmEsbzp7Y3JlYXRlRWxlbWVudDp1fX0pe2NvbnN0IHA9dC5zdXNwZW5zZT1lLnN1c3BlbnNlO3Audm5vZGU9dCx0LmVsPWUuZWw7Y29uc3QgZj10LnNzQ29udGVudCxkPXQuc3NGYWxsYmFjayx7YWN0aXZlQnJhbmNoOmgscGVuZGluZ0JyYW5jaDptLGlzSW5GYWxsYmFjazpnLGlzSHlkcmF0aW5nOnZ9PXA7aWYobSlwLnBlbmRpbmdCcmFuY2g9ZixycyhmLG0pPyhjKG0sZixwLmhpZGRlbkNvbnRhaW5lcixudWxsLHIscCxzLGksbCkscC5kZXBzPD0wP3AucmVzb2x2ZSgpOmcmJihjKGgsZCxuLG8scixudWxsLHMsaSxsKSxLbihwLGQpKSk6KHAucGVuZGluZ0lkKyssdj8ocC5pc0h5ZHJhdGluZz0hMSxwLmFjdGl2ZUJyYW5jaD1tKTphKG0scixwKSxwLmRlcHM9MCxwLmVmZmVjdHMubGVuZ3RoPTAscC5oaWRkZW5Db250YWluZXI9dShcImRpdlwiKSxnPyhjKG51bGwsZixwLmhpZGRlbkNvbnRhaW5lcixudWxsLHIscCxzLGksbCkscC5kZXBzPD0wP3AucmVzb2x2ZSgpOihjKGgsZCxuLG8scixudWxsLHMsaSxsKSxLbihwLGQpKSk6aCYmcnMoZixoKT8oYyhoLGYsbixvLHIscCxzLGksbCkscC5yZXNvbHZlKCEwKSk6KGMobnVsbCxmLHAuaGlkZGVuQ29udGFpbmVyLG51bGwscixwLHMsaSxsKSxwLmRlcHM8PTAmJnAucmVzb2x2ZSgpKSk7ZWxzZSBpZihoJiZycyhmLGgpKWMoaCxmLG4sbyxyLHAscyxpLGwpLEtuKHAsZik7ZWxzZSBpZihEbih0LFwib25QZW5kaW5nXCIpLHAucGVuZGluZ0JyYW5jaD1mLHAucGVuZGluZ0lkKyssYyhudWxsLGYscC5oaWRkZW5Db250YWluZXIsbnVsbCxyLHAscyxpLGwpLHAuZGVwczw9MClwLnJlc29sdmUoKTtlbHNle2NvbnN0e3RpbWVvdXQ6ZSxwZW5kaW5nSWQ6dH09cDtlPjA/c2V0VGltZW91dCgoKCk9PntwLnBlbmRpbmdJZD09PXQmJnAuZmFsbGJhY2soZCl9KSxlKTowPT09ZSYmcC5mYWxsYmFjayhkKX19KGUsdCxuLG8scixpLGwsYyxhKX0saHlkcmF0ZTpmdW5jdGlvbihlLHQsbixvLHIscyxpLGwsYyl7Y29uc3QgYT10LnN1c3BlbnNlPUhuKHQsbyxuLGUucGFyZW50Tm9kZSxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLG51bGwscixzLGksbCwhMCksdT1jKGUsYS5wZW5kaW5nQnJhbmNoPXQuc3NDb250ZW50LG4sYSxzLGkpOzA9PT1hLmRlcHMmJmEucmVzb2x2ZSgpO3JldHVybiB1fSxjcmVhdGU6SG4sbm9ybWFsaXplOmZ1bmN0aW9uKGUpe2NvbnN0e3NoYXBlRmxhZzp0LGNoaWxkcmVuOm59PWUsbz0zMiZ0O2Uuc3NDb250ZW50PVduKG8/bi5kZWZhdWx0Om4pLGUuc3NGYWxsYmFjaz1vP1duKG4uZmFsbGJhY2spOnVzKEtyKX19O2Z1bmN0aW9uIERuKGUsdCl7Y29uc3Qgbj1lLnByb3BzJiZlLnByb3BzW3RdO0YobikmJm4oKX1mdW5jdGlvbiBIbihlLHQsbixvLHIscyxpLGwsYyxhLHU9ITEpe2NvbnN0e3A6cCxtOmYsdW06ZCxuOmgsbzp7cGFyZW50Tm9kZTptLHJlbW92ZTpnfX09YSx2PVgoZS5wcm9wcyYmZS5wcm9wcy50aW1lb3V0KSx5PXt2bm9kZTplLHBhcmVudDp0LHBhcmVudENvbXBvbmVudDpuLGlzU1ZHOmksY29udGFpbmVyOm8saGlkZGVuQ29udGFpbmVyOnIsYW5jaG9yOnMsZGVwczowLHBlbmRpbmdJZDowLHRpbWVvdXQ6XCJudW1iZXJcIj09dHlwZW9mIHY/djotMSxhY3RpdmVCcmFuY2g6bnVsbCxwZW5kaW5nQnJhbmNoOm51bGwsaXNJbkZhbGxiYWNrOiEwLGlzSHlkcmF0aW5nOnUsaXNVbm1vdW50ZWQ6ITEsZWZmZWN0czpbXSxyZXNvbHZlKGU9ITEpe2NvbnN0e3Zub2RlOnQsYWN0aXZlQnJhbmNoOm4scGVuZGluZ0JyYW5jaDpvLHBlbmRpbmdJZDpyLGVmZmVjdHM6cyxwYXJlbnRDb21wb25lbnQ6aSxjb250YWluZXI6bH09eTtpZih5LmlzSHlkcmF0aW5nKXkuaXNIeWRyYXRpbmc9ITE7ZWxzZSBpZighZSl7Y29uc3QgZT1uJiZvLnRyYW5zaXRpb24mJlwib3V0LWluXCI9PT1vLnRyYW5zaXRpb24ubW9kZTtlJiYobi50cmFuc2l0aW9uLmFmdGVyTGVhdmU9KCk9PntyPT09eS5wZW5kaW5nSWQmJmYobyxsLHQsMCl9KTtsZXR7YW5jaG9yOnR9PXk7biYmKHQ9aChuKSxkKG4saSx5LCEwKSksZXx8ZihvLGwsdCwwKX1Lbih5LG8pLHkucGVuZGluZ0JyYW5jaD1udWxsLHkuaXNJbkZhbGxiYWNrPSExO2xldCBjPXkucGFyZW50LGE9ITE7Zm9yKDtjOyl7aWYoYy5wZW5kaW5nQnJhbmNoKXtjLmVmZmVjdHMucHVzaCguLi5zKSxhPSEwO2JyZWFrfWM9Yy5wYXJlbnR9YXx8dm4ocykseS5lZmZlY3RzPVtdLERuKHQsXCJvblJlc29sdmVcIil9LGZhbGxiYWNrKGUpe2lmKCF5LnBlbmRpbmdCcmFuY2gpcmV0dXJuO2NvbnN0e3Zub2RlOnQsYWN0aXZlQnJhbmNoOm4scGFyZW50Q29tcG9uZW50Om8sY29udGFpbmVyOnIsaXNTVkc6c309eTtEbih0LFwib25GYWxsYmFja1wiKTtjb25zdCBpPWgobiksYT0oKT0+e3kuaXNJbkZhbGxiYWNrJiYocChudWxsLGUscixpLG8sbnVsbCxzLGwsYyksS24oeSxlKSl9LHU9ZS50cmFuc2l0aW9uJiZcIm91dC1pblwiPT09ZS50cmFuc2l0aW9uLm1vZGU7dSYmKG4udHJhbnNpdGlvbi5hZnRlckxlYXZlPWEpLHkuaXNJbkZhbGxiYWNrPSEwLGQobixvLG51bGwsITApLHV8fGEoKX0sbW92ZShlLHQsbil7eS5hY3RpdmVCcmFuY2gmJmYoeS5hY3RpdmVCcmFuY2gsZSx0LG4pLHkuY29udGFpbmVyPWV9LG5leHQ6KCk9PnkuYWN0aXZlQnJhbmNoJiZoKHkuYWN0aXZlQnJhbmNoKSxyZWdpc3RlckRlcChlLHQpe2NvbnN0IG49ISF5LnBlbmRpbmdCcmFuY2g7biYmeS5kZXBzKys7Y29uc3Qgbz1lLnZub2RlLmVsO2UuYXN5bmNEZXAuY2F0Y2goKHQ9PntRdCh0LGUsMCl9KSkudGhlbigocj0+e2lmKGUuaXNVbm1vdW50ZWR8fHkuaXNVbm1vdW50ZWR8fHkucGVuZGluZ0lkIT09ZS5zdXNwZW5zZUlkKXJldHVybjtlLmFzeW5jUmVzb2x2ZWQ9ITA7Y29uc3R7dm5vZGU6c309ZTtScyhlLHIsITEpLG8mJihzLmVsPW8pO2NvbnN0IGw9IW8mJmUuc3ViVHJlZS5lbDt0KGUscyxtKG98fGUuc3ViVHJlZS5lbCksbz9udWxsOmgoZS5zdWJUcmVlKSx5LGksYyksbCYmZyhsKSxMbihlLHMuZWwpLG4mJjA9PS0teS5kZXBzJiZ5LnJlc29sdmUoKX0pKX0sdW5tb3VudChlLHQpe3kuaXNVbm1vdW50ZWQ9ITAseS5hY3RpdmVCcmFuY2gmJmQoeS5hY3RpdmVCcmFuY2gsbixlLHQpLHkucGVuZGluZ0JyYW5jaCYmZCh5LnBlbmRpbmdCcmFuY2gsbixlLHQpfX07cmV0dXJuIHl9ZnVuY3Rpb24gV24oZSl7bGV0IHQ7aWYoRihlKSl7Y29uc3Qgbj1RciYmZS5fYztuJiYoZS5fZD0hMSxZcigpKSxlPWUoKSxuJiYoZS5fZD0hMCx0PUpyLFpyKCkpfWlmKEUoZSkpe2NvbnN0IHQ9ZnVuY3Rpb24oZSl7bGV0IHQ7Zm9yKGxldCBuPTA7bjxlLmxlbmd0aDtuKyspe2NvbnN0IG89ZVtuXTtpZighb3MobykpcmV0dXJuO2lmKG8udHlwZSE9PUtyfHxcInYtaWZcIj09PW8uY2hpbGRyZW4pe2lmKHQpcmV0dXJuO3Q9b319cmV0dXJuIHR9KGUpO2U9dH1yZXR1cm4gZT1ncyhlKSx0JiYhZS5keW5hbWljQ2hpbGRyZW4mJihlLmR5bmFtaWNDaGlsZHJlbj10LmZpbHRlcigodD0+dCE9PWUpKSksZX1mdW5jdGlvbiB6bihlLHQpe3QmJnQucGVuZGluZ0JyYW5jaD9FKGUpP3QuZWZmZWN0cy5wdXNoKC4uLmUpOnQuZWZmZWN0cy5wdXNoKGUpOnZuKGUpfWZ1bmN0aW9uIEtuKGUsdCl7ZS5hY3RpdmVCcmFuY2g9dDtjb25zdHt2bm9kZTpuLHBhcmVudENvbXBvbmVudDpvfT1lLHI9bi5lbD10LmVsO28mJm8uc3ViVHJlZT09PW4mJihvLnZub2RlLmVsPXIsTG4obyxyKSl9ZnVuY3Rpb24gR24oZSx0KXtpZihDcyl7bGV0IG49Q3MucHJvdmlkZXM7Y29uc3Qgbz1Dcy5wYXJlbnQmJkNzLnBhcmVudC5wcm92aWRlcztvPT09biYmKG49Q3MucHJvdmlkZXM9T2JqZWN0LmNyZWF0ZShvKSksbltlXT10fWVsc2U7fWZ1bmN0aW9uIHFuKGUsdCxuPSExKXtjb25zdCBvPUNzfHxFbjtpZihvKXtjb25zdCByPW51bGw9PW8ucGFyZW50P28udm5vZGUuYXBwQ29udGV4dCYmby52bm9kZS5hcHBDb250ZXh0LnByb3ZpZGVzOm8ucGFyZW50LnByb3ZpZGVzO2lmKHImJmUgaW4gcilyZXR1cm4gcltlXTtpZihhcmd1bWVudHMubGVuZ3RoPjEpcmV0dXJuIG4mJkYodCk/dC5jYWxsKG8ucHJveHkpOnR9fWZ1bmN0aW9uIEpuKGUsdCl7cmV0dXJuIGVvKGUsbnVsbCx0KX1mdW5jdGlvbiBZbihlLHQpe3JldHVybiBlbyhlLG51bGwse2ZsdXNoOlwicG9zdFwifSl9ZnVuY3Rpb24gWm4oZSx0KXtyZXR1cm4gZW8oZSxudWxsLHtmbHVzaDpcInN5bmNcIn0pfWNvbnN0IFFuPXt9O2Z1bmN0aW9uIFhuKGUsdCxuKXtyZXR1cm4gZW8oZSx0LG4pfWZ1bmN0aW9uIGVvKGUsdCx7aW1tZWRpYXRlOm4sZGVlcDpvLGZsdXNoOnJ9PXYpe2NvbnN0IHM9Q3M7bGV0IGksbCxjPSExLGE9ITE7aWYoUnQoZSk/KGk9KCk9PmUudmFsdWUsYz1DdChlKSk6U3QoZSk/KGk9KCk9PmUsbz0hMCk6RShlKT8oYT0hMCxjPWUuc29tZSgoZT0+U3QoZSl8fEN0KGUpKSksaT0oKT0+ZS5tYXAoKGU9PlJ0KGUpP2UudmFsdWU6U3QoZSk/b28oZSk6RihlKT9ZdChlLHMsMik6dm9pZCAwKSkpOmk9RihlKT90PygpPT5ZdChlLHMsMik6KCk9PntpZighc3x8IXMuaXNVbm1vdW50ZWQpcmV0dXJuIGwmJmwoKSxadChlLHMsMyxbdV0pfTpfLHQmJm8pe2NvbnN0IGU9aTtpPSgpPT5vbyhlKCkpfWxldCB1PWU9PntsPWgub25TdG9wPSgpPT57WXQoZSxzLDQpfX0scD1hP1tdOlFuO2NvbnN0IGY9KCk9PntpZihoLmFjdGl2ZSlpZih0KXtjb25zdCBlPWgucnVuKCk7KG98fGN8fChhP2Uuc29tZSgoKGUsdCk9PlkoZSxwW3RdKSkpOlkoZSxwKSkpJiYobCYmbCgpLFp0KHQscywzLFtlLHA9PT1Rbj92b2lkIDA6cCx1XSkscD1lKX1lbHNlIGgucnVuKCl9O2xldCBkO2YuYWxsb3dSZWN1cnNlPSEhdCxkPVwic3luY1wiPT09cj9mOlwicG9zdFwiPT09cj8oKT0+UHIoZixzJiZzLnN1c3BlbnNlKTooKT0+ZnVuY3Rpb24oZSl7Z24oZSxybixvbixzbil9KGYpO2NvbnN0IGg9bmV3IGdlKGksZCk7cmV0dXJuIHQ/bj9mKCk6cD1oLnJ1bigpOlwicG9zdFwiPT09cj9QcihoLnJ1bi5iaW5kKGgpLHMmJnMuc3VzcGVuc2UpOmgucnVuKCksKCk9PntoLnN0b3AoKSxzJiZzLnNjb3BlJiZrKHMuc2NvcGUuZWZmZWN0cyxoKX19ZnVuY3Rpb24gdG8oZSx0LG4pe2NvbnN0IG89dGhpcy5wcm94eSxyPVAoZSk/ZS5pbmNsdWRlcyhcIi5cIik/bm8obyxlKTooKT0+b1tlXTplLmJpbmQobyxvKTtsZXQgcztGKHQpP3M9dDoocz10LmhhbmRsZXIsbj10KTtjb25zdCBpPUNzO2tzKHRoaXMpO2NvbnN0IGw9ZW8ocixzLmJpbmQobyksbik7cmV0dXJuIGk/a3MoaSk6VHMoKSxsfWZ1bmN0aW9uIG5vKGUsdCl7Y29uc3Qgbj10LnNwbGl0KFwiLlwiKTtyZXR1cm4oKT0+e2xldCB0PWU7Zm9yKGxldCBlPTA7ZTxuLmxlbmd0aCYmdDtlKyspdD10W25bZV1dO3JldHVybiB0fX1mdW5jdGlvbiBvbyhlLHQpe2lmKCFNKGUpfHxlLl9fdl9za2lwKXJldHVybiBlO2lmKCh0PXR8fG5ldyBTZXQpLmhhcyhlKSlyZXR1cm4gZTtpZih0LmFkZChlKSxSdChlKSlvbyhlLnZhbHVlLHQpO2Vsc2UgaWYoRShlKSlmb3IobGV0IG49MDtuPGUubGVuZ3RoO24rKylvbyhlW25dLHQpO2Vsc2UgaWYoTyhlKXx8JChlKSllLmZvckVhY2goKGU9PntvbyhlLHQpfSkpO2Vsc2UgaWYoTChlKSlmb3IoY29uc3QgbiBpbiBlKW9vKGVbbl0sdCk7cmV0dXJuIGV9ZnVuY3Rpb24gcm8oKXtjb25zdCBlPXtpc01vdW50ZWQ6ITEsaXNMZWF2aW5nOiExLGlzVW5tb3VudGluZzohMSxsZWF2aW5nVk5vZGVzOm5ldyBNYXB9O3JldHVybiBPbygoKCk9PntlLmlzTW91bnRlZD0hMH0pKSxQbygoKCk9PntlLmlzVW5tb3VudGluZz0hMH0pKSxlfWNvbnN0IHNvPVtGdW5jdGlvbixBcnJheV0saW89e25hbWU6XCJCYXNlVHJhbnNpdGlvblwiLHByb3BzOnttb2RlOlN0cmluZyxhcHBlYXI6Qm9vbGVhbixwZXJzaXN0ZWQ6Qm9vbGVhbixvbkJlZm9yZUVudGVyOnNvLG9uRW50ZXI6c28sb25BZnRlckVudGVyOnNvLG9uRW50ZXJDYW5jZWxsZWQ6c28sb25CZWZvcmVMZWF2ZTpzbyxvbkxlYXZlOnNvLG9uQWZ0ZXJMZWF2ZTpzbyxvbkxlYXZlQ2FuY2VsbGVkOnNvLG9uQmVmb3JlQXBwZWFyOnNvLG9uQXBwZWFyOnNvLG9uQWZ0ZXJBcHBlYXI6c28sb25BcHBlYXJDYW5jZWxsZWQ6c299LHNldHVwKGUse3Nsb3RzOnR9KXtjb25zdCBuPXdzKCksbz1ybygpO2xldCByO3JldHVybigpPT57Y29uc3Qgcz10LmRlZmF1bHQmJmZvKHQuZGVmYXVsdCgpLCEwKTtpZighc3x8IXMubGVuZ3RoKXJldHVybjtsZXQgaT1zWzBdO2lmKHMubGVuZ3RoPjEpZm9yKGNvbnN0IGUgb2YgcylpZihlLnR5cGUhPT1Lcil7aT1lO2JyZWFrfWNvbnN0IGw9a3QoZSkse21vZGU6Y309bDtpZihvLmlzTGVhdmluZylyZXR1cm4gYW8oaSk7Y29uc3QgYT11byhpKTtpZighYSlyZXR1cm4gYW8oaSk7Y29uc3QgdT1jbyhhLGwsbyxuKTtwbyhhLHUpO2NvbnN0IHA9bi5zdWJUcmVlLGY9cCYmdW8ocCk7bGV0IGQ9ITE7Y29uc3R7Z2V0VHJhbnNpdGlvbktleTpofT1hLnR5cGU7aWYoaCl7Y29uc3QgZT1oKCk7dm9pZCAwPT09cj9yPWU6ZSE9PXImJihyPWUsZD0hMCl9aWYoZiYmZi50eXBlIT09S3ImJighcnMoYSxmKXx8ZCkpe2NvbnN0IGU9Y28oZixsLG8sbik7aWYocG8oZixlKSxcIm91dC1pblwiPT09YylyZXR1cm4gby5pc0xlYXZpbmc9ITAsZS5hZnRlckxlYXZlPSgpPT57by5pc0xlYXZpbmc9ITEsbi51cGRhdGUoKX0sYW8oaSk7XCJpbi1vdXRcIj09PWMmJmEudHlwZSE9PUtyJiYoZS5kZWxheUxlYXZlPShlLHQsbik9PntsbyhvLGYpW1N0cmluZyhmLmtleSldPWYsZS5fbGVhdmVDYj0oKT0+e3QoKSxlLl9sZWF2ZUNiPXZvaWQgMCxkZWxldGUgdS5kZWxheWVkTGVhdmV9LHUuZGVsYXllZExlYXZlPW59KX1yZXR1cm4gaX19fTtmdW5jdGlvbiBsbyhlLHQpe2NvbnN0e2xlYXZpbmdWTm9kZXM6bn09ZTtsZXQgbz1uLmdldCh0LnR5cGUpO3JldHVybiBvfHwobz1PYmplY3QuY3JlYXRlKG51bGwpLG4uc2V0KHQudHlwZSxvKSksb31mdW5jdGlvbiBjbyhlLHQsbixvKXtjb25zdHthcHBlYXI6cixtb2RlOnMscGVyc2lzdGVkOmk9ITEsb25CZWZvcmVFbnRlcjpsLG9uRW50ZXI6YyxvbkFmdGVyRW50ZXI6YSxvbkVudGVyQ2FuY2VsbGVkOnUsb25CZWZvcmVMZWF2ZTpwLG9uTGVhdmU6ZixvbkFmdGVyTGVhdmU6ZCxvbkxlYXZlQ2FuY2VsbGVkOmgsb25CZWZvcmVBcHBlYXI6bSxvbkFwcGVhcjpnLG9uQWZ0ZXJBcHBlYXI6dixvbkFwcGVhckNhbmNlbGxlZDp5fT10LF89U3RyaW5nKGUua2V5KSxiPWxvKG4sZSksUz0oZSx0KT0+e2UmJlp0KGUsbyw5LHQpfSx4PShlLHQpPT57Y29uc3Qgbj10WzFdO1MoZSx0KSxFKGUpP2UuZXZlcnkoKGU9PmUubGVuZ3RoPD0xKSkmJm4oKTplLmxlbmd0aDw9MSYmbigpfSxDPXttb2RlOnMscGVyc2lzdGVkOmksYmVmb3JlRW50ZXIodCl7bGV0IG89bDtpZighbi5pc01vdW50ZWQpe2lmKCFyKXJldHVybjtvPW18fGx9dC5fbGVhdmVDYiYmdC5fbGVhdmVDYighMCk7Y29uc3Qgcz1iW19dO3MmJnJzKGUscykmJnMuZWwuX2xlYXZlQ2ImJnMuZWwuX2xlYXZlQ2IoKSxTKG8sW3RdKX0sZW50ZXIoZSl7bGV0IHQ9YyxvPWEscz11O2lmKCFuLmlzTW91bnRlZCl7aWYoIXIpcmV0dXJuO3Q9Z3x8YyxvPXZ8fGEscz15fHx1fWxldCBpPSExO2NvbnN0IGw9ZS5fZW50ZXJDYj10PT57aXx8KGk9ITAsUyh0P3M6byxbZV0pLEMuZGVsYXllZExlYXZlJiZDLmRlbGF5ZWRMZWF2ZSgpLGUuX2VudGVyQ2I9dm9pZCAwKX07dD94KHQsW2UsbF0pOmwoKX0sbGVhdmUodCxvKXtjb25zdCByPVN0cmluZyhlLmtleSk7aWYodC5fZW50ZXJDYiYmdC5fZW50ZXJDYighMCksbi5pc1VubW91bnRpbmcpcmV0dXJuIG8oKTtTKHAsW3RdKTtsZXQgcz0hMTtjb25zdCBpPXQuX2xlYXZlQ2I9bj0+e3N8fChzPSEwLG8oKSxTKG4/aDpkLFt0XSksdC5fbGVhdmVDYj12b2lkIDAsYltyXT09PWUmJmRlbGV0ZSBiW3JdKX07YltyXT1lLGY/eChmLFt0LGldKTppKCl9LGNsb25lOmU9PmNvKGUsdCxuLG8pfTtyZXR1cm4gQ31mdW5jdGlvbiBhbyhlKXtpZih5byhlKSlyZXR1cm4oZT1mcyhlKSkuY2hpbGRyZW49bnVsbCxlfWZ1bmN0aW9uIHVvKGUpe3JldHVybiB5byhlKT9lLmNoaWxkcmVuP2UuY2hpbGRyZW5bMF06dm9pZCAwOmV9ZnVuY3Rpb24gcG8oZSx0KXs2JmUuc2hhcGVGbGFnJiZlLmNvbXBvbmVudD9wbyhlLmNvbXBvbmVudC5zdWJUcmVlLHQpOjEyOCZlLnNoYXBlRmxhZz8oZS5zc0NvbnRlbnQudHJhbnNpdGlvbj10LmNsb25lKGUuc3NDb250ZW50KSxlLnNzRmFsbGJhY2sudHJhbnNpdGlvbj10LmNsb25lKGUuc3NGYWxsYmFjaykpOmUudHJhbnNpdGlvbj10fWZ1bmN0aW9uIGZvKGUsdD0hMSxuKXtsZXQgbz1bXSxyPTA7Zm9yKGxldCBzPTA7czxlLmxlbmd0aDtzKyspe2xldCBpPWVbc107Y29uc3QgbD1udWxsPT1uP2kua2V5OlN0cmluZyhuKStTdHJpbmcobnVsbCE9aS5rZXk/aS5rZXk6cyk7aS50eXBlPT09V3I/KDEyOCZpLnBhdGNoRmxhZyYmcisrLG89by5jb25jYXQoZm8oaS5jaGlsZHJlbix0LGwpKSk6KHR8fGkudHlwZSE9PUtyKSYmby5wdXNoKG51bGwhPWw/ZnMoaSx7a2V5Omx9KTppKX1pZihyPjEpZm9yKGxldCBzPTA7czxvLmxlbmd0aDtzKyspb1tzXS5wYXRjaEZsYWc9LTI7cmV0dXJuIG99ZnVuY3Rpb24gaG8oZSl7cmV0dXJuIEYoZSk/e3NldHVwOmUsbmFtZTplLm5hbWV9OmV9Y29uc3QgbW89ZT0+ISFlLnR5cGUuX19hc3luY0xvYWRlcjtmdW5jdGlvbiBnbyhlKXtGKGUpJiYoZT17bG9hZGVyOmV9KTtjb25zdHtsb2FkZXI6dCxsb2FkaW5nQ29tcG9uZW50Om4sZXJyb3JDb21wb25lbnQ6byxkZWxheTpyPTIwMCx0aW1lb3V0OnMsc3VzcGVuc2libGU6aT0hMCxvbkVycm9yOmx9PWU7bGV0IGMsYT1udWxsLHU9MDtjb25zdCBwPSgpPT57bGV0IGU7cmV0dXJuIGF8fChlPWE9dCgpLmNhdGNoKChlPT57aWYoZT1lIGluc3RhbmNlb2YgRXJyb3I/ZTpuZXcgRXJyb3IoU3RyaW5nKGUpKSxsKXJldHVybiBuZXcgUHJvbWlzZSgoKHQsbik9PntsKGUsKCgpPT50KCh1KyssYT1udWxsLHAoKSkpKSwoKCk9Pm4oZSkpLHUrMSl9KSk7dGhyb3cgZX0pKS50aGVuKCh0PT5lIT09YSYmYT9hOih0JiYodC5fX2VzTW9kdWxlfHxcIk1vZHVsZVwiPT09dFtTeW1ib2wudG9TdHJpbmdUYWddKSYmKHQ9dC5kZWZhdWx0KSxjPXQsdCkpKSl9O3JldHVybiBobyh7bmFtZTpcIkFzeW5jQ29tcG9uZW50V3JhcHBlclwiLF9fYXN5bmNMb2FkZXI6cCxnZXQgX19hc3luY1Jlc29sdmVkKCl7cmV0dXJuIGN9LHNldHVwKCl7Y29uc3QgZT1DcztpZihjKXJldHVybigpPT52byhjLGUpO2NvbnN0IHQ9dD0+e2E9bnVsbCxRdCh0LGUsMTMsIW8pfTtpZihpJiZlLnN1c3BlbnNlKXJldHVybiBwKCkudGhlbigodD0+KCk9PnZvKHQsZSkpKS5jYXRjaCgoZT0+KHQoZSksKCk9Pm8/dXMobyx7ZXJyb3I6ZX0pOm51bGwpKSk7Y29uc3QgbD1GdCghMSksdT1GdCgpLGY9RnQoISFyKTtyZXR1cm4gciYmc2V0VGltZW91dCgoKCk9PntmLnZhbHVlPSExfSksciksbnVsbCE9cyYmc2V0VGltZW91dCgoKCk9PntpZighbC52YWx1ZSYmIXUudmFsdWUpe2NvbnN0IGU9bmV3IEVycm9yKGBBc3luYyBjb21wb25lbnQgdGltZWQgb3V0IGFmdGVyICR7c31tcy5gKTt0KGUpLHUudmFsdWU9ZX19KSxzKSxwKCkudGhlbigoKCk9PntsLnZhbHVlPSEwLGUucGFyZW50JiZ5byhlLnBhcmVudC52bm9kZSkmJmhuKGUucGFyZW50LnVwZGF0ZSl9KSkuY2F0Y2goKGU9Pnt0KGUpLHUudmFsdWU9ZX0pKSwoKT0+bC52YWx1ZSYmYz92byhjLGUpOnUudmFsdWUmJm8/dXMobyx7ZXJyb3I6dS52YWx1ZX0pOm4mJiFmLnZhbHVlP3VzKG4pOnZvaWQgMH19KX1mdW5jdGlvbiB2byhlLHt2bm9kZTp7cmVmOnQscHJvcHM6bixjaGlsZHJlbjpvfX0pe2NvbnN0IHI9dXMoZSxuLG8pO3JldHVybiByLnJlZj10LHJ9Y29uc3QgeW89ZT0+ZS50eXBlLl9faXNLZWVwQWxpdmUsX289e25hbWU6XCJLZWVwQWxpdmVcIixfX2lzS2VlcEFsaXZlOiEwLHByb3BzOntpbmNsdWRlOltTdHJpbmcsUmVnRXhwLEFycmF5XSxleGNsdWRlOltTdHJpbmcsUmVnRXhwLEFycmF5XSxtYXg6W1N0cmluZyxOdW1iZXJdfSxzZXR1cChlLHtzbG90czp0fSl7Y29uc3Qgbj13cygpLG89bi5jdHgscj1uZXcgTWFwLHM9bmV3IFNldDtsZXQgaT1udWxsO2NvbnN0IGw9bi5zdXNwZW5zZSx7cmVuZGVyZXI6e3A6YyxtOmEsdW06dSxvOntjcmVhdGVFbGVtZW50OnB9fX09byxmPXAoXCJkaXZcIik7ZnVuY3Rpb24gZChlKXtrbyhlKSx1KGUsbixsLCEwKX1mdW5jdGlvbiBoKGUpe3IuZm9yRWFjaCgoKHQsbik9Pntjb25zdCBvPUJzKHQudHlwZSk7IW98fGUmJmUobyl8fG0obil9KSl9ZnVuY3Rpb24gbShlKXtjb25zdCB0PXIuZ2V0KGUpO2kmJnQudHlwZT09PWkudHlwZT9pJiZrbyhpKTpkKHQpLHIuZGVsZXRlKGUpLHMuZGVsZXRlKGUpfW8uYWN0aXZhdGU9KGUsdCxuLG8scik9Pntjb25zdCBzPWUuY29tcG9uZW50O2EoZSx0LG4sMCxsKSxjKHMudm5vZGUsZSx0LG4scyxsLG8sZS5zbG90U2NvcGVJZHMsciksUHIoKCgpPT57cy5pc0RlYWN0aXZhdGVkPSExLHMuYSYmWihzLmEpO2NvbnN0IHQ9ZS5wcm9wcyYmZS5wcm9wcy5vblZub2RlTW91bnRlZDt0JiZicyh0LHMucGFyZW50LGUpfSksbCl9LG8uZGVhY3RpdmF0ZT1lPT57Y29uc3QgdD1lLmNvbXBvbmVudDthKGUsZixudWxsLDEsbCksUHIoKCgpPT57dC5kYSYmWih0LmRhKTtjb25zdCBuPWUucHJvcHMmJmUucHJvcHMub25Wbm9kZVVubW91bnRlZDtuJiZicyhuLHQucGFyZW50LGUpLHQuaXNEZWFjdGl2YXRlZD0hMH0pLGwpfSxYbigoKCk9PltlLmluY2x1ZGUsZS5leGNsdWRlXSksKChbZSx0XSk9PntlJiZoKCh0PT5ibyhlLHQpKSksdCYmaCgoZT0+IWJvKHQsZSkpKX0pLHtmbHVzaDpcInBvc3RcIixkZWVwOiEwfSk7bGV0IGc9bnVsbDtjb25zdCB2PSgpPT57bnVsbCE9ZyYmci5zZXQoZyxUbyhuLnN1YlRyZWUpKX07cmV0dXJuIE9vKHYpLEZvKHYpLFBvKCgoKT0+e3IuZm9yRWFjaCgoZT0+e2NvbnN0e3N1YlRyZWU6dCxzdXNwZW5zZTpvfT1uLHI9VG8odCk7aWYoZS50eXBlIT09ci50eXBlKWQoZSk7ZWxzZXtrbyhyKTtjb25zdCBlPXIuY29tcG9uZW50LmRhO2UmJlByKGUsbyl9fSkpfSkpLCgpPT57aWYoZz1udWxsLCF0LmRlZmF1bHQpcmV0dXJuIG51bGw7Y29uc3Qgbj10LmRlZmF1bHQoKSxvPW5bMF07aWYobi5sZW5ndGg+MSlyZXR1cm4gaT1udWxsLG47aWYoIShvcyhvKSYmKDQmby5zaGFwZUZsYWd8fDEyOCZvLnNoYXBlRmxhZykpKXJldHVybiBpPW51bGwsbztsZXQgbD1UbyhvKTtjb25zdCBjPWwudHlwZSxhPUJzKG1vKGwpP2wudHlwZS5fX2FzeW5jUmVzb2x2ZWR8fHt9OmMpLHtpbmNsdWRlOnUsZXhjbHVkZTpwLG1heDpmfT1lO2lmKHUmJighYXx8IWJvKHUsYSkpfHxwJiZhJiZibyhwLGEpKXJldHVybiBpPWwsbztjb25zdCBkPW51bGw9PWwua2V5P2M6bC5rZXksaD1yLmdldChkKTtyZXR1cm4gbC5lbCYmKGw9ZnMobCksMTI4Jm8uc2hhcGVGbGFnJiYoby5zc0NvbnRlbnQ9bCkpLGc9ZCxoPyhsLmVsPWguZWwsbC5jb21wb25lbnQ9aC5jb21wb25lbnQsbC50cmFuc2l0aW9uJiZwbyhsLGwudHJhbnNpdGlvbiksbC5zaGFwZUZsYWd8PTUxMixzLmRlbGV0ZShkKSxzLmFkZChkKSk6KHMuYWRkKGQpLGYmJnMuc2l6ZT5wYXJzZUludChmLDEwKSYmbShzLnZhbHVlcygpLm5leHQoKS52YWx1ZSkpLGwuc2hhcGVGbGFnfD0yNTYsaT1sLGpuKG8udHlwZSk/bzpsfX19O2Z1bmN0aW9uIGJvKGUsdCl7cmV0dXJuIEUoZSk/ZS5zb21lKChlPT5ibyhlLHQpKSk6UChlKT9lLnNwbGl0KFwiLFwiKS5pbmNsdWRlcyh0KTohIWUudGVzdCYmZS50ZXN0KHQpfWZ1bmN0aW9uIFNvKGUsdCl7Q28oZSxcImFcIix0KX1mdW5jdGlvbiB4byhlLHQpe0NvKGUsXCJkYVwiLHQpfWZ1bmN0aW9uIENvKGUsdCxuPUNzKXtjb25zdCBvPWUuX193ZGN8fChlLl9fd2RjPSgpPT57bGV0IHQ9bjtmb3IoO3Q7KXtpZih0LmlzRGVhY3RpdmF0ZWQpcmV0dXJuO3Q9dC5wYXJlbnR9cmV0dXJuIGUoKX0pO2lmKE5vKHQsbyxuKSxuKXtsZXQgZT1uLnBhcmVudDtmb3IoO2UmJmUucGFyZW50Oyl5byhlLnBhcmVudC52bm9kZSkmJndvKG8sdCxuLGUpLGU9ZS5wYXJlbnR9fWZ1bmN0aW9uIHdvKGUsdCxuLG8pe2NvbnN0IHI9Tm8odCxlLG8sITApO0FvKCgoKT0+e2sob1t0XSxyKX0pLG4pfWZ1bmN0aW9uIGtvKGUpe2xldCB0PWUuc2hhcGVGbGFnOzI1NiZ0JiYodC09MjU2KSw1MTImdCYmKHQtPTUxMiksZS5zaGFwZUZsYWc9dH1mdW5jdGlvbiBUbyhlKXtyZXR1cm4gMTI4JmUuc2hhcGVGbGFnP2Uuc3NDb250ZW50OmV9ZnVuY3Rpb24gTm8oZSx0LG49Q3Msbz0hMSl7aWYobil7Y29uc3Qgcj1uW2VdfHwobltlXT1bXSkscz10Ll9fd2VofHwodC5fX3dlaD0oLi4ubyk9PntpZihuLmlzVW5tb3VudGVkKXJldHVybjt4ZSgpLGtzKG4pO2NvbnN0IHI9WnQodCxuLGUsbyk7cmV0dXJuIFRzKCksQ2UoKSxyfSk7cmV0dXJuIG8/ci51bnNoaWZ0KHMpOnIucHVzaChzKSxzfX1jb25zdCBFbz1lPT4odCxuPUNzKT0+KCFPc3x8XCJzcFwiPT09ZSkmJk5vKGUsdCxuKSwkbz1FbyhcImJtXCIpLE9vPUVvKFwibVwiKSxSbz1FbyhcImJ1XCIpLEZvPUVvKFwidVwiKSxQbz1FbyhcImJ1bVwiKSxBbz1FbyhcInVtXCIpLE1vPUVvKFwic3BcIiksVm89RW8oXCJydGdcIiksSW89RW8oXCJydGNcIik7ZnVuY3Rpb24gQm8oZSx0PUNzKXtObyhcImVjXCIsZSx0KX1mdW5jdGlvbiBMbyhlLHQpe2NvbnN0IG49RW47aWYobnVsbD09PW4pcmV0dXJuIGU7Y29uc3Qgbz1WcyhuKXx8bi5wcm94eSxyPWUuZGlyc3x8KGUuZGlycz1bXSk7Zm9yKGxldCBzPTA7czx0Lmxlbmd0aDtzKyspe2xldFtlLG4saSxsPXZdPXRbc107RihlKSYmKGU9e21vdW50ZWQ6ZSx1cGRhdGVkOmV9KSxlLmRlZXAmJm9vKG4pLHIucHVzaCh7ZGlyOmUsaW5zdGFuY2U6byx2YWx1ZTpuLG9sZFZhbHVlOnZvaWQgMCxhcmc6aSxtb2RpZmllcnM6bH0pfXJldHVybiBlfWZ1bmN0aW9uIGpvKGUsdCxuLG8pe2NvbnN0IHI9ZS5kaXJzLHM9dCYmdC5kaXJzO2ZvcihsZXQgaT0wO2k8ci5sZW5ndGg7aSsrKXtjb25zdCBsPXJbaV07cyYmKGwub2xkVmFsdWU9c1tpXS52YWx1ZSk7bGV0IGM9bC5kaXJbb107YyYmKHhlKCksWnQoYyxuLDgsW2UuZWwsbCxlLHRdKSxDZSgpKX19ZnVuY3Rpb24gVW8oZSx0KXtyZXR1cm4gem8oXCJjb21wb25lbnRzXCIsZSwhMCx0KXx8ZX1jb25zdCBEbz1TeW1ib2woKTtmdW5jdGlvbiBIbyhlKXtyZXR1cm4gUChlKT96byhcImNvbXBvbmVudHNcIixlLCExKXx8ZTplfHxEb31mdW5jdGlvbiBXbyhlKXtyZXR1cm4gem8oXCJkaXJlY3RpdmVzXCIsZSl9ZnVuY3Rpb24gem8oZSx0LG49ITAsbz0hMSl7Y29uc3Qgcj1Fbnx8Q3M7aWYocil7Y29uc3Qgbj1yLnR5cGU7aWYoXCJjb21wb25lbnRzXCI9PT1lKXtjb25zdCBlPUJzKG4sITEpO2lmKGUmJihlPT09dHx8ZT09PXoodCl8fGU9PT1xKHoodCkpKSlyZXR1cm4gbn1jb25zdCBzPUtvKHJbZV18fG5bZV0sdCl8fEtvKHIuYXBwQ29udGV4dFtlXSx0KTtyZXR1cm4hcyYmbz9uOnN9fWZ1bmN0aW9uIEtvKGUsdCl7cmV0dXJuIGUmJihlW3RdfHxlW3oodCldfHxlW3Eoeih0KSldKX1mdW5jdGlvbiBHbyhlLHQsbixvKXtsZXQgcjtjb25zdCBzPW4mJm5bb107aWYoRShlKXx8UChlKSl7cj1uZXcgQXJyYXkoZS5sZW5ndGgpO2ZvcihsZXQgbj0wLG89ZS5sZW5ndGg7bjxvO24rKylyW25dPXQoZVtuXSxuLHZvaWQgMCxzJiZzW25dKX1lbHNlIGlmKFwibnVtYmVyXCI9PXR5cGVvZiBlKXtyPW5ldyBBcnJheShlKTtmb3IobGV0IG49MDtuPGU7bisrKXJbbl09dChuKzEsbix2b2lkIDAscyYmc1tuXSl9ZWxzZSBpZihNKGUpKWlmKGVbU3ltYm9sLml0ZXJhdG9yXSlyPUFycmF5LmZyb20oZSwoKGUsbik9PnQoZSxuLHZvaWQgMCxzJiZzW25dKSkpO2Vsc2V7Y29uc3Qgbj1PYmplY3Qua2V5cyhlKTtyPW5ldyBBcnJheShuLmxlbmd0aCk7Zm9yKGxldCBvPTAsaT1uLmxlbmd0aDtvPGk7bysrKXtjb25zdCBpPW5bb107cltvXT10KGVbaV0saSxvLHMmJnNbb10pfX1lbHNlIHI9W107cmV0dXJuIG4mJihuW29dPXIpLHJ9ZnVuY3Rpb24gcW8oZSx0KXtmb3IobGV0IG49MDtuPHQubGVuZ3RoO24rKyl7Y29uc3Qgbz10W25dO2lmKEUobykpZm9yKGxldCB0PTA7dDxvLmxlbmd0aDt0KyspZVtvW3RdLm5hbWVdPW9bdF0uZm47ZWxzZSBvJiYoZVtvLm5hbWVdPW8uZm4pfXJldHVybiBlfWZ1bmN0aW9uIEpvKGUsdCxuPXt9LG8scil7aWYoRW4uaXNDRXx8RW4ucGFyZW50JiZtbyhFbi5wYXJlbnQpJiZFbi5wYXJlbnQuaXNDRSlyZXR1cm4gdXMoXCJzbG90XCIsXCJkZWZhdWx0XCI9PT10P251bGw6e25hbWU6dH0sbyYmbygpKTtsZXQgcz1lW3RdO3MmJnMuX2MmJihzLl9kPSExKSxZcigpO2NvbnN0IGk9cyYmWW8ocyhuKSksbD1ucyhXcix7a2V5Om4ua2V5fHxgXyR7dH1gfSxpfHwobz9vKCk6W10pLGkmJjE9PT1lLl8/NjQ6LTIpO3JldHVybiFyJiZsLnNjb3BlSWQmJihsLnNsb3RTY29wZUlkcz1bbC5zY29wZUlkK1wiLXNcIl0pLHMmJnMuX2MmJihzLl9kPSEwKSxsfWZ1bmN0aW9uIFlvKGUpe3JldHVybiBlLnNvbWUoKGU9PiFvcyhlKXx8ZS50eXBlIT09S3ImJiEoZS50eXBlPT09V3ImJiFZbyhlLmNoaWxkcmVuKSkpKT9lOm51bGx9ZnVuY3Rpb24gWm8oZSl7Y29uc3QgdD17fTtmb3IoY29uc3QgbiBpbiBlKXRbSihuKV09ZVtuXTtyZXR1cm4gdH1jb25zdCBRbz1lPT5lP05zKGUpP1ZzKGUpfHxlLnByb3h5OlFvKGUucGFyZW50KTpudWxsLFhvPXcoT2JqZWN0LmNyZWF0ZShudWxsKSx7JDplPT5lLCRlbDplPT5lLnZub2RlLmVsLCRkYXRhOmU9PmUuZGF0YSwkcHJvcHM6ZT0+ZS5wcm9wcywkYXR0cnM6ZT0+ZS5hdHRycywkc2xvdHM6ZT0+ZS5zbG90cywkcmVmczplPT5lLnJlZnMsJHBhcmVudDplPT5RbyhlLnBhcmVudCksJHJvb3Q6ZT0+UW8oZS5yb290KSwkZW1pdDplPT5lLmVtaXQsJG9wdGlvbnM6ZT0+aXIoZSksJGZvcmNlVXBkYXRlOmU9PmUuZnx8KGUuZj0oKT0+aG4oZS51cGRhdGUpKSwkbmV4dFRpY2s6ZT0+ZS5ufHwoZS5uPWRuLmJpbmQoZS5wcm94eSkpLCR3YXRjaDplPT50by5iaW5kKGUpfSksZXI9e2dldCh7XzplfSx0KXtjb25zdHtjdHg6bixzZXR1cFN0YXRlOm8sZGF0YTpyLHByb3BzOnMsYWNjZXNzQ2FjaGU6aSx0eXBlOmwsYXBwQ29udGV4dDpjfT1lO2xldCBhO2lmKFwiJFwiIT09dFswXSl7Y29uc3QgbD1pW3RdO2lmKHZvaWQgMCE9PWwpc3dpdGNoKGwpe2Nhc2UgMTpyZXR1cm4gb1t0XTtjYXNlIDI6cmV0dXJuIHJbdF07Y2FzZSA0OnJldHVybiBuW3RdO2Nhc2UgMzpyZXR1cm4gc1t0XX1lbHNle2lmKG8hPT12JiZOKG8sdCkpcmV0dXJuIGlbdF09MSxvW3RdO2lmKHIhPT12JiZOKHIsdCkpcmV0dXJuIGlbdF09MixyW3RdO2lmKChhPWUucHJvcHNPcHRpb25zWzBdKSYmTihhLHQpKXJldHVybiBpW3RdPTMsc1t0XTtpZihuIT09diYmTihuLHQpKXJldHVybiBpW3RdPTQsblt0XTtuciYmKGlbdF09MCl9fWNvbnN0IHU9WG9bdF07bGV0IHAsZjtyZXR1cm4gdT8oXCIkYXR0cnNcIj09PXQmJndlKGUsMCx0KSx1KGUpKToocD1sLl9fY3NzTW9kdWxlcykmJihwPXBbdF0pP3A6biE9PXYmJk4obix0KT8oaVt0XT00LG5bdF0pOihmPWMuY29uZmlnLmdsb2JhbFByb3BlcnRpZXMsTihmLHQpP2ZbdF06dm9pZCAwKX0sc2V0KHtfOmV9LHQsbil7Y29uc3R7ZGF0YTpvLHNldHVwU3RhdGU6cixjdHg6c309ZTtyZXR1cm4gciE9PXYmJk4ocix0KT8oclt0XT1uLCEwKTpvIT09diYmTihvLHQpPyhvW3RdPW4sITApOiFOKGUucHJvcHMsdCkmJigoXCIkXCIhPT10WzBdfHwhKHQuc2xpY2UoMSlpbiBlKSkmJihzW3RdPW4sITApKX0saGFzKHtfOntkYXRhOmUsc2V0dXBTdGF0ZTp0LGFjY2Vzc0NhY2hlOm4sY3R4Om8sYXBwQ29udGV4dDpyLHByb3BzT3B0aW9uczpzfX0saSl7bGV0IGw7cmV0dXJuISFuW2ldfHxlIT09diYmTihlLGkpfHx0IT09diYmTih0LGkpfHwobD1zWzBdKSYmTihsLGkpfHxOKG8saSl8fE4oWG8saSl8fE4oci5jb25maWcuZ2xvYmFsUHJvcGVydGllcyxpKX0sZGVmaW5lUHJvcGVydHkoZSx0LG4pe3JldHVybiBudWxsIT1uLmdldD9lLl8uYWNjZXNzQ2FjaGVbdF09MDpOKG4sXCJ2YWx1ZVwiKSYmdGhpcy5zZXQoZSx0LG4udmFsdWUsbnVsbCksUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShlLHQsbil9fSx0cj13KHt9LGVyLHtnZXQoZSx0KXtpZih0IT09U3ltYm9sLnVuc2NvcGFibGVzKXJldHVybiBlci5nZXQoZSx0LGUpfSxoYXM6KGUsbik9PlwiX1wiIT09blswXSYmIXQobil9KTtsZXQgbnI9ITA7ZnVuY3Rpb24gb3IoZSl7Y29uc3QgdD1pcihlKSxuPWUucHJveHksbz1lLmN0eDtucj0hMSx0LmJlZm9yZUNyZWF0ZSYmcnIodC5iZWZvcmVDcmVhdGUsZSxcImJjXCIpO2NvbnN0e2RhdGE6cixjb21wdXRlZDpzLG1ldGhvZHM6aSx3YXRjaDpsLHByb3ZpZGU6YyxpbmplY3Q6YSxjcmVhdGVkOnUsYmVmb3JlTW91bnQ6cCxtb3VudGVkOmYsYmVmb3JlVXBkYXRlOmQsdXBkYXRlZDpoLGFjdGl2YXRlZDptLGRlYWN0aXZhdGVkOmcsYmVmb3JlVW5tb3VudDp2LHVubW91bnRlZDp5LHJlbmRlcjpiLHJlbmRlclRyYWNrZWQ6UyxyZW5kZXJUcmlnZ2VyZWQ6eCxlcnJvckNhcHR1cmVkOkMsc2VydmVyUHJlZmV0Y2g6dyxleHBvc2U6ayxpbmhlcml0QXR0cnM6VCxjb21wb25lbnRzOk4sZGlyZWN0aXZlczokfT10O2lmKGEmJmZ1bmN0aW9uKGUsdCxuPV8sbz0hMSl7RShlKSYmKGU9dXIoZSkpO2Zvcihjb25zdCByIGluIGUpe2NvbnN0IG49ZVtyXTtsZXQgcztzPU0obik/XCJkZWZhdWx0XCJpbiBuP3FuKG4uZnJvbXx8cixuLmRlZmF1bHQsITApOnFuKG4uZnJvbXx8cik6cW4obiksUnQocykmJm8/T2JqZWN0LmRlZmluZVByb3BlcnR5KHQscix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OigpPT5zLnZhbHVlLHNldDplPT5zLnZhbHVlPWV9KTp0W3JdPXN9fShhLG8sbnVsbCxlLmFwcENvbnRleHQuY29uZmlnLnVud3JhcEluamVjdGVkUmVmKSxpKWZvcihjb25zdCBfIGluIGkpe2NvbnN0IGU9aVtfXTtGKGUpJiYob1tfXT1lLmJpbmQobikpfWlmKHIpe2NvbnN0IHQ9ci5jYWxsKG4sbik7TSh0KSYmKGUuZGF0YT1ndCh0KSl9aWYobnI9ITAscylmb3IoY29uc3QgRSBpbiBzKXtjb25zdCBlPXNbRV0sdD1GKGUpP2UuYmluZChuLG4pOkYoZS5nZXQpP2UuZ2V0LmJpbmQobixuKTpfLHI9IUYoZSkmJkYoZS5zZXQpP2Uuc2V0LmJpbmQobik6XyxpPWpzKHtnZXQ6dCxzZXQ6cn0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShvLEUse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDooKT0+aS52YWx1ZSxzZXQ6ZT0+aS52YWx1ZT1lfSl9aWYobClmb3IoY29uc3QgXyBpbiBsKXNyKGxbX10sbyxuLF8pO2lmKGMpe2NvbnN0IGU9RihjKT9jLmNhbGwobik6YztSZWZsZWN0Lm93bktleXMoZSkuZm9yRWFjaCgodD0+e0duKHQsZVt0XSl9KSl9ZnVuY3Rpb24gTyhlLHQpe0UodCk/dC5mb3JFYWNoKCh0PT5lKHQuYmluZChuKSkpKTp0JiZlKHQuYmluZChuKSl9aWYodSYmcnIodSxlLFwiY1wiKSxPKCRvLHApLE8oT28sZiksTyhSbyxkKSxPKEZvLGgpLE8oU28sbSksTyh4byxnKSxPKEJvLEMpLE8oSW8sUyksTyhWbyx4KSxPKFBvLHYpLE8oQW8seSksTyhNbyx3KSxFKGspKWlmKGsubGVuZ3RoKXtjb25zdCB0PWUuZXhwb3NlZHx8KGUuZXhwb3NlZD17fSk7ay5mb3JFYWNoKChlPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsZSx7Z2V0OigpPT5uW2VdLHNldDp0PT5uW2VdPXR9KX0pKX1lbHNlIGUuZXhwb3NlZHx8KGUuZXhwb3NlZD17fSk7YiYmZS5yZW5kZXI9PT1fJiYoZS5yZW5kZXI9YiksbnVsbCE9VCYmKGUuaW5oZXJpdEF0dHJzPVQpLE4mJihlLmNvbXBvbmVudHM9TiksJCYmKGUuZGlyZWN0aXZlcz0kKX1mdW5jdGlvbiBycihlLHQsbil7WnQoRShlKT9lLm1hcCgoZT0+ZS5iaW5kKHQucHJveHkpKSk6ZS5iaW5kKHQucHJveHkpLHQsbil9ZnVuY3Rpb24gc3IoZSx0LG4sbyl7Y29uc3Qgcj1vLmluY2x1ZGVzKFwiLlwiKT9ubyhuLG8pOigpPT5uW29dO2lmKFAoZSkpe2NvbnN0IG49dFtlXTtGKG4pJiZYbihyLG4pfWVsc2UgaWYoRihlKSlYbihyLGUuYmluZChuKSk7ZWxzZSBpZihNKGUpKWlmKEUoZSkpZS5mb3JFYWNoKChlPT5zcihlLHQsbixvKSkpO2Vsc2V7Y29uc3Qgbz1GKGUuaGFuZGxlcik/ZS5oYW5kbGVyLmJpbmQobik6dFtlLmhhbmRsZXJdO0YobykmJlhuKHIsbyxlKX19ZnVuY3Rpb24gaXIoZSl7Y29uc3QgdD1lLnR5cGUse21peGluczpuLGV4dGVuZHM6b309dCx7bWl4aW5zOnIsb3B0aW9uc0NhY2hlOnMsY29uZmlnOntvcHRpb25NZXJnZVN0cmF0ZWdpZXM6aX19PWUuYXBwQ29udGV4dCxsPXMuZ2V0KHQpO2xldCBjO3JldHVybiBsP2M9bDpyLmxlbmd0aHx8bnx8bz8oYz17fSxyLmxlbmd0aCYmci5mb3JFYWNoKChlPT5scihjLGUsaSwhMCkpKSxscihjLHQsaSkpOmM9dCxzLnNldCh0LGMpLGN9ZnVuY3Rpb24gbHIoZSx0LG4sbz0hMSl7Y29uc3R7bWl4aW5zOnIsZXh0ZW5kczpzfT10O3MmJmxyKGUscyxuLCEwKSxyJiZyLmZvckVhY2goKHQ9PmxyKGUsdCxuLCEwKSkpO2Zvcihjb25zdCBpIGluIHQpaWYobyYmXCJleHBvc2VcIj09PWkpO2Vsc2V7Y29uc3Qgbz1jcltpXXx8biYmbltpXTtlW2ldPW8/byhlW2ldLHRbaV0pOnRbaV19cmV0dXJuIGV9Y29uc3QgY3I9e2RhdGE6YXIscHJvcHM6ZnIsZW1pdHM6ZnIsbWV0aG9kczpmcixjb21wdXRlZDpmcixiZWZvcmVDcmVhdGU6cHIsY3JlYXRlZDpwcixiZWZvcmVNb3VudDpwcixtb3VudGVkOnByLGJlZm9yZVVwZGF0ZTpwcix1cGRhdGVkOnByLGJlZm9yZURlc3Ryb3k6cHIsYmVmb3JlVW5tb3VudDpwcixkZXN0cm95ZWQ6cHIsdW5tb3VudGVkOnByLGFjdGl2YXRlZDpwcixkZWFjdGl2YXRlZDpwcixlcnJvckNhcHR1cmVkOnByLHNlcnZlclByZWZldGNoOnByLGNvbXBvbmVudHM6ZnIsZGlyZWN0aXZlczpmcix3YXRjaDpmdW5jdGlvbihlLHQpe2lmKCFlKXJldHVybiB0O2lmKCF0KXJldHVybiBlO2NvbnN0IG49dyhPYmplY3QuY3JlYXRlKG51bGwpLGUpO2Zvcihjb25zdCBvIGluIHQpbltvXT1wcihlW29dLHRbb10pO3JldHVybiBufSxwcm92aWRlOmFyLGluamVjdDpmdW5jdGlvbihlLHQpe3JldHVybiBmcih1cihlKSx1cih0KSl9fTtmdW5jdGlvbiBhcihlLHQpe3JldHVybiB0P2U/ZnVuY3Rpb24oKXtyZXR1cm4gdyhGKGUpP2UuY2FsbCh0aGlzLHRoaXMpOmUsRih0KT90LmNhbGwodGhpcyx0aGlzKTp0KX06dDplfWZ1bmN0aW9uIHVyKGUpe2lmKEUoZSkpe2NvbnN0IHQ9e307Zm9yKGxldCBuPTA7bjxlLmxlbmd0aDtuKyspdFtlW25dXT1lW25dO3JldHVybiB0fXJldHVybiBlfWZ1bmN0aW9uIHByKGUsdCl7cmV0dXJuIGU/Wy4uLm5ldyBTZXQoW10uY29uY2F0KGUsdCkpXTp0fWZ1bmN0aW9uIGZyKGUsdCl7cmV0dXJuIGU/dyh3KE9iamVjdC5jcmVhdGUobnVsbCksZSksdCk6dH1mdW5jdGlvbiBkcihlLHQsbixvKXtjb25zdFtyLHNdPWUucHJvcHNPcHRpb25zO2xldCBpLGw9ITE7aWYodClmb3IobGV0IGMgaW4gdCl7aWYoVShjKSljb250aW51ZTtjb25zdCBhPXRbY107bGV0IHU7ciYmTihyLHU9eihjKSk/cyYmcy5pbmNsdWRlcyh1KT8oaXx8KGk9e30pKVt1XT1hOm5bdV09YTpObihlLmVtaXRzT3B0aW9ucyxjKXx8YyBpbiBvJiZhPT09b1tjXXx8KG9bY109YSxsPSEwKX1pZihzKXtjb25zdCB0PWt0KG4pLG89aXx8djtmb3IobGV0IGk9MDtpPHMubGVuZ3RoO2krKyl7Y29uc3QgbD1zW2ldO25bbF09aHIocix0LGwsb1tsXSxlLCFOKG8sbCkpfX1yZXR1cm4gbH1mdW5jdGlvbiBocihlLHQsbixvLHIscyl7Y29uc3QgaT1lW25dO2lmKG51bGwhPWkpe2NvbnN0IGU9TihpLFwiZGVmYXVsdFwiKTtpZihlJiZ2b2lkIDA9PT1vKXtjb25zdCBlPWkuZGVmYXVsdDtpZihpLnR5cGUhPT1GdW5jdGlvbiYmRihlKSl7Y29uc3R7cHJvcHNEZWZhdWx0czpzfT1yO24gaW4gcz9vPXNbbl06KGtzKHIpLG89c1tuXT1lLmNhbGwobnVsbCx0KSxUcygpKX1lbHNlIG89ZX1pWzBdJiYocyYmIWU/bz0hMTohaVsxXXx8XCJcIiE9PW8mJm8hPT1HKG4pfHwobz0hMCkpfXJldHVybiBvfWZ1bmN0aW9uIG1yKGUsdCxuPSExKXtjb25zdCBvPXQucHJvcHNDYWNoZSxyPW8uZ2V0KGUpO2lmKHIpcmV0dXJuIHI7Y29uc3Qgcz1lLnByb3BzLGk9e30sbD1bXTtsZXQgYz0hMTtpZighRihlKSl7Y29uc3Qgbz1lPT57Yz0hMDtjb25zdFtuLG9dPW1yKGUsdCwhMCk7dyhpLG4pLG8mJmwucHVzaCguLi5vKX07IW4mJnQubWl4aW5zLmxlbmd0aCYmdC5taXhpbnMuZm9yRWFjaChvKSxlLmV4dGVuZHMmJm8oZS5leHRlbmRzKSxlLm1peGlucyYmZS5taXhpbnMuZm9yRWFjaChvKX1pZighcyYmIWMpcmV0dXJuIG8uc2V0KGUseSkseTtpZihFKHMpKWZvcihsZXQgdT0wO3U8cy5sZW5ndGg7dSsrKXtjb25zdCBlPXooc1t1XSk7Z3IoZSkmJihpW2VdPXYpfWVsc2UgaWYocylmb3IoY29uc3QgdSBpbiBzKXtjb25zdCBlPXoodSk7aWYoZ3IoZSkpe2NvbnN0IHQ9c1t1XSxuPWlbZV09RSh0KXx8Rih0KT97dHlwZTp0fTp0O2lmKG4pe2NvbnN0IHQ9X3IoQm9vbGVhbixuLnR5cGUpLG89X3IoU3RyaW5nLG4udHlwZSk7blswXT10Pi0xLG5bMV09bzwwfHx0PG8sKHQ+LTF8fE4obixcImRlZmF1bHRcIikpJiZsLnB1c2goZSl9fX1jb25zdCBhPVtpLGxdO3JldHVybiBvLnNldChlLGEpLGF9ZnVuY3Rpb24gZ3IoZSl7cmV0dXJuXCIkXCIhPT1lWzBdfWZ1bmN0aW9uIHZyKGUpe2NvbnN0IHQ9ZSYmZS50b1N0cmluZygpLm1hdGNoKC9eXFxzKmZ1bmN0aW9uIChcXHcrKS8pO3JldHVybiB0P3RbMV06bnVsbD09PWU/XCJudWxsXCI6XCJcIn1mdW5jdGlvbiB5cihlLHQpe3JldHVybiB2cihlKT09PXZyKHQpfWZ1bmN0aW9uIF9yKGUsdCl7cmV0dXJuIEUodCk/dC5maW5kSW5kZXgoKHQ9PnlyKHQsZSkpKTpGKHQpJiZ5cih0LGUpPzA6LTF9Y29uc3QgYnI9ZT0+XCJfXCI9PT1lWzBdfHxcIiRzdGFibGVcIj09PWUsU3I9ZT0+RShlKT9lLm1hcChncyk6W2dzKGUpXSx4cj0oZSx0LG4pPT57aWYodC5fbilyZXR1cm4gdDtjb25zdCBvPUFuKCgoLi4uZSk9PlNyKHQoLi4uZSkpKSxuKTtyZXR1cm4gby5fYz0hMSxvfSxDcj0oZSx0LG4pPT57Y29uc3Qgbz1lLl9jdHg7Zm9yKGNvbnN0IHIgaW4gZSl7aWYoYnIocikpY29udGludWU7Y29uc3Qgbj1lW3JdO2lmKEYobikpdFtyXT14cigwLG4sbyk7ZWxzZSBpZihudWxsIT1uKXtjb25zdCBlPVNyKG4pO3Rbcl09KCk9PmV9fX0sd3I9KGUsdCk9Pntjb25zdCBuPVNyKHQpO2Uuc2xvdHMuZGVmYXVsdD0oKT0+bn07ZnVuY3Rpb24ga3IoKXtyZXR1cm57YXBwOm51bGwsY29uZmlnOntpc05hdGl2ZVRhZzpiLHBlcmZvcm1hbmNlOiExLGdsb2JhbFByb3BlcnRpZXM6e30sb3B0aW9uTWVyZ2VTdHJhdGVnaWVzOnt9LGVycm9ySGFuZGxlcjp2b2lkIDAsd2FybkhhbmRsZXI6dm9pZCAwLGNvbXBpbGVyT3B0aW9uczp7fX0sbWl4aW5zOltdLGNvbXBvbmVudHM6e30sZGlyZWN0aXZlczp7fSxwcm92aWRlczpPYmplY3QuY3JlYXRlKG51bGwpLG9wdGlvbnNDYWNoZTpuZXcgV2Vha01hcCxwcm9wc0NhY2hlOm5ldyBXZWFrTWFwLGVtaXRzQ2FjaGU6bmV3IFdlYWtNYXB9fWxldCBUcj0wO2Z1bmN0aW9uIE5yKGUsdCl7cmV0dXJuIGZ1bmN0aW9uKG4sbz1udWxsKXtGKG4pfHwobj1PYmplY3QuYXNzaWduKHt9LG4pKSxudWxsPT1vfHxNKG8pfHwobz1udWxsKTtjb25zdCByPWtyKCkscz1uZXcgU2V0O2xldCBpPSExO2NvbnN0IGw9ci5hcHA9e191aWQ6VHIrKyxfY29tcG9uZW50Om4sX3Byb3BzOm8sX2NvbnRhaW5lcjpudWxsLF9jb250ZXh0OnIsX2luc3RhbmNlOm51bGwsdmVyc2lvbjpvaSxnZXQgY29uZmlnKCl7cmV0dXJuIHIuY29uZmlnfSxzZXQgY29uZmlnKGUpe30sdXNlOihlLC4uLnQpPT4ocy5oYXMoZSl8fChlJiZGKGUuaW5zdGFsbCk/KHMuYWRkKGUpLGUuaW5zdGFsbChsLC4uLnQpKTpGKGUpJiYocy5hZGQoZSksZShsLC4uLnQpKSksbCksbWl4aW46ZT0+KHIubWl4aW5zLmluY2x1ZGVzKGUpfHxyLm1peGlucy5wdXNoKGUpLGwpLGNvbXBvbmVudDooZSx0KT0+dD8oci5jb21wb25lbnRzW2VdPXQsbCk6ci5jb21wb25lbnRzW2VdLGRpcmVjdGl2ZTooZSx0KT0+dD8oci5kaXJlY3RpdmVzW2VdPXQsbCk6ci5kaXJlY3RpdmVzW2VdLG1vdW50KHMsYyxhKXtpZighaSl7Y29uc3QgdT11cyhuLG8pO3JldHVybiB1LmFwcENvbnRleHQ9cixjJiZ0P3QodSxzKTplKHUscyxhKSxpPSEwLGwuX2NvbnRhaW5lcj1zLHMuX192dWVfYXBwX189bCxWcyh1LmNvbXBvbmVudCl8fHUuY29tcG9uZW50LnByb3h5fX0sdW5tb3VudCgpe2kmJihlKG51bGwsbC5fY29udGFpbmVyKSxkZWxldGUgbC5fY29udGFpbmVyLl9fdnVlX2FwcF9fKX0scHJvdmlkZTooZSx0KT0+KHIucHJvdmlkZXNbZV09dCxsKX07cmV0dXJuIGx9fWZ1bmN0aW9uIEVyKGUsdCxuLG8scj0hMSl7aWYoRShlKSlyZXR1cm4gdm9pZCBlLmZvckVhY2goKChlLHMpPT5FcihlLHQmJihFKHQpP3Rbc106dCksbixvLHIpKSk7aWYobW8obykmJiFyKXJldHVybjtjb25zdCBzPTQmby5zaGFwZUZsYWc/VnMoby5jb21wb25lbnQpfHxvLmNvbXBvbmVudC5wcm94eTpvLmVsLGk9cj9udWxsOnMse2k6bCxyOmN9PWUsYT10JiZ0LnIsdT1sLnJlZnM9PT12P2wucmVmcz17fTpsLnJlZnMscD1sLnNldHVwU3RhdGU7aWYobnVsbCE9YSYmYSE9PWMmJihQKGEpPyh1W2FdPW51bGwsTihwLGEpJiYocFthXT1udWxsKSk6UnQoYSkmJihhLnZhbHVlPW51bGwpKSxGKGMpKVl0KGMsbCwxMixbaSx1XSk7ZWxzZXtjb25zdCB0PVAoYyksbz1SdChjKTtpZih0fHxvKXtjb25zdCBsPSgpPT57aWYoZS5mKXtjb25zdCBuPXQ/dVtjXTpjLnZhbHVlO3I/RShuKSYmayhuLHMpOkUobik/bi5pbmNsdWRlcyhzKXx8bi5wdXNoKHMpOnQ/KHVbY109W3NdLE4ocCxjKSYmKHBbY109dVtjXSkpOihjLnZhbHVlPVtzXSxlLmsmJih1W2Uua109Yy52YWx1ZSkpfWVsc2UgdD8odVtjXT1pLE4ocCxjKSYmKHBbY109aSkpOm8mJihjLnZhbHVlPWksZS5rJiYodVtlLmtdPWkpKX07aT8obC5pZD0tMSxQcihsLG4pKTpsKCl9fX1sZXQgJHI9ITE7Y29uc3QgT3I9ZT0+L3N2Zy8udGVzdChlLm5hbWVzcGFjZVVSSSkmJlwiZm9yZWlnbk9iamVjdFwiIT09ZS50YWdOYW1lLFJyPWU9Pjg9PT1lLm5vZGVUeXBlO2Z1bmN0aW9uIEZyKGUpe2NvbnN0e210OnQscDpuLG86e3BhdGNoUHJvcDpvLGNyZWF0ZVRleHQ6cixuZXh0U2libGluZzpzLHBhcmVudE5vZGU6aSxyZW1vdmU6bCxpbnNlcnQ6YyxjcmVhdGVDb21tZW50OmF9fT1lLHU9KG4sbyxsLGEsZyx2PSExKT0+e2NvbnN0IHk9UnIobikmJlwiW1wiPT09bi5kYXRhLF89KCk9PmgobixvLGwsYSxnLHkpLHt0eXBlOmIscmVmOlMsc2hhcGVGbGFnOngscGF0Y2hGbGFnOkN9PW8sdz1uLm5vZGVUeXBlO28uZWw9biwtMj09PUMmJih2PSExLG8uZHluYW1pY0NoaWxkcmVuPW51bGwpO2xldCBrPW51bGw7c3dpdGNoKGIpe2Nhc2UgenI6MyE9PXc/XCJcIj09PW8uY2hpbGRyZW4/KGMoby5lbD1yKFwiXCIpLGkobiksbiksaz1uKTprPV8oKToobi5kYXRhIT09by5jaGlsZHJlbiYmKCRyPSEwLG4uZGF0YT1vLmNoaWxkcmVuKSxrPXMobikpO2JyZWFrO2Nhc2UgS3I6az04IT09d3x8eT9fKCk6cyhuKTticmVhaztjYXNlIEdyOmlmKDE9PT13fHwzPT09dyl7az1uO2NvbnN0IGU9IW8uY2hpbGRyZW4ubGVuZ3RoO2ZvcihsZXQgdD0wO3Q8by5zdGF0aWNDb3VudDt0KyspZSYmKG8uY2hpbGRyZW4rPTE9PT1rLm5vZGVUeXBlP2sub3V0ZXJIVE1MOmsuZGF0YSksdD09PW8uc3RhdGljQ291bnQtMSYmKG8uYW5jaG9yPWspLGs9cyhrKTtyZXR1cm4ga31rPV8oKTticmVhaztjYXNlIFdyOms9eT9kKG4sbyxsLGEsZyx2KTpfKCk7YnJlYWs7ZGVmYXVsdDppZigxJngpaz0xIT09d3x8by50eXBlLnRvTG93ZXJDYXNlKCkhPT1uLnRhZ05hbWUudG9Mb3dlckNhc2UoKT9fKCk6cChuLG8sbCxhLGcsdik7ZWxzZSBpZig2Jngpe28uc2xvdFNjb3BlSWRzPWc7Y29uc3QgZT1pKG4pO2lmKHQobyxlLG51bGwsbCxhLE9yKGUpLHYpLGs9eT9tKG4pOnMobiksayYmUnIoaykmJlwidGVsZXBvcnQgZW5kXCI9PT1rLmRhdGEmJihrPXMoaykpLG1vKG8pKXtsZXQgdDt5Pyh0PXVzKFdyKSx0LmFuY2hvcj1rP2sucHJldmlvdXNTaWJsaW5nOmUubGFzdENoaWxkKTp0PTM9PT1uLm5vZGVUeXBlP2RzKFwiXCIpOnVzKFwiZGl2XCIpLHQuZWw9bixvLmNvbXBvbmVudC5zdWJUcmVlPXR9fWVsc2UgNjQmeD9rPTghPT13P18oKTpvLnR5cGUuaHlkcmF0ZShuLG8sbCxhLGcsdixlLGYpOjEyOCZ4JiYoaz1vLnR5cGUuaHlkcmF0ZShuLG8sbCxhLE9yKGkobikpLGcsdixlLHUpKX1yZXR1cm4gbnVsbCE9UyYmRXIoUyxudWxsLGEsbyksa30scD0oZSx0LG4scixzLGkpPT57aT1pfHwhIXQuZHluYW1pY0NoaWxkcmVuO2NvbnN0e3R5cGU6Yyxwcm9wczphLHBhdGNoRmxhZzp1LHNoYXBlRmxhZzpwLGRpcnM6ZH09dCxoPVwiaW5wdXRcIj09PWMmJmR8fFwib3B0aW9uXCI9PT1jO2lmKGh8fC0xIT09dSl7aWYoZCYmam8odCxudWxsLG4sXCJjcmVhdGVkXCIpLGEpaWYoaHx8IWl8fDQ4JnUpZm9yKGNvbnN0IHQgaW4gYSkoaCYmdC5lbmRzV2l0aChcInZhbHVlXCIpfHx4KHQpJiYhVSh0KSkmJm8oZSx0LG51bGwsYVt0XSwhMSx2b2lkIDAsbik7ZWxzZSBhLm9uQ2xpY2smJm8oZSxcIm9uQ2xpY2tcIixudWxsLGEub25DbGljaywhMSx2b2lkIDAsbik7bGV0IGM7aWYoKGM9YSYmYS5vblZub2RlQmVmb3JlTW91bnQpJiZicyhjLG4sdCksZCYmam8odCxudWxsLG4sXCJiZWZvcmVNb3VudFwiKSwoKGM9YSYmYS5vblZub2RlTW91bnRlZCl8fGQpJiZ6bigoKCk9PntjJiZicyhjLG4sdCksZCYmam8odCxudWxsLG4sXCJtb3VudGVkXCIpfSksciksMTYmcCYmKCFhfHwhYS5pbm5lckhUTUwmJiFhLnRleHRDb250ZW50KSl7bGV0IG89ZihlLmZpcnN0Q2hpbGQsdCxlLG4scixzLGkpO2Zvcig7bzspeyRyPSEwO2NvbnN0IGU9bztvPW8ubmV4dFNpYmxpbmcsbChlKX19ZWxzZSA4JnAmJmUudGV4dENvbnRlbnQhPT10LmNoaWxkcmVuJiYoJHI9ITAsZS50ZXh0Q29udGVudD10LmNoaWxkcmVuKX1yZXR1cm4gZS5uZXh0U2libGluZ30sZj0oZSx0LG8scixzLGksbCk9PntsPWx8fCEhdC5keW5hbWljQ2hpbGRyZW47Y29uc3QgYz10LmNoaWxkcmVuLGE9Yy5sZW5ndGg7Zm9yKGxldCBwPTA7cDxhO3ArKyl7Y29uc3QgdD1sP2NbcF06Y1twXT1ncyhjW3BdKTtpZihlKWU9dShlLHQscixzLGksbCk7ZWxzZXtpZih0LnR5cGU9PT16ciYmIXQuY2hpbGRyZW4pY29udGludWU7JHI9ITAsbihudWxsLHQsbyxudWxsLHIscyxPcihvKSxpKX19cmV0dXJuIGV9LGQ9KGUsdCxuLG8scixsKT0+e2NvbnN0e3Nsb3RTY29wZUlkczp1fT10O3UmJihyPXI/ci5jb25jYXQodSk6dSk7Y29uc3QgcD1pKGUpLGQ9ZihzKGUpLHQscCxuLG8scixsKTtyZXR1cm4gZCYmUnIoZCkmJlwiXVwiPT09ZC5kYXRhP3ModC5hbmNob3I9ZCk6KCRyPSEwLGModC5hbmNob3I9YShcIl1cIikscCxkKSxkKX0saD0oZSx0LG8scixjLGEpPT57aWYoJHI9ITAsdC5lbD1udWxsLGEpe2NvbnN0IHQ9bShlKTtmb3IoOzspe2NvbnN0IG49cyhlKTtpZighbnx8bj09PXQpYnJlYWs7bChuKX19Y29uc3QgdT1zKGUpLHA9aShlKTtyZXR1cm4gbChlKSxuKG51bGwsdCxwLHUsbyxyLE9yKHApLGMpLHV9LG09ZT0+e2xldCB0PTA7Zm9yKDtlOylpZigoZT1zKGUpKSYmUnIoZSkmJihcIltcIj09PWUuZGF0YSYmdCsrLFwiXVwiPT09ZS5kYXRhKSl7aWYoMD09PXQpcmV0dXJuIHMoZSk7dC0tfXJldHVybiBlfTtyZXR1cm5bKGUsdCk9PntpZighdC5oYXNDaGlsZE5vZGVzKCkpcmV0dXJuIG4obnVsbCxlLHQpLF9uKCksdm9pZCh0Ll92bm9kZT1lKTskcj0hMSx1KHQuZmlyc3RDaGlsZCxlLG51bGwsbnVsbCxudWxsKSxfbigpLHQuX3Zub2RlPWUsJHImJmNvbnNvbGUuZXJyb3IoXCJIeWRyYXRpb24gY29tcGxldGVkIGJ1dCBjb250YWlucyBtaXNtYXRjaGVzLlwiKX0sdV19Y29uc3QgUHI9em47ZnVuY3Rpb24gQXIoZSl7cmV0dXJuIFZyKGUpfWZ1bmN0aW9uIE1yKGUpe3JldHVybiBWcihlLEZyKX1mdW5jdGlvbiBWcihlLHQpeyhlZXx8KGVlPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzpcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbDp7fSkpLl9fVlVFX189ITA7Y29uc3R7aW5zZXJ0Om4scmVtb3ZlOm8scGF0Y2hQcm9wOnIsY3JlYXRlRWxlbWVudDpzLGNyZWF0ZVRleHQ6aSxjcmVhdGVDb21tZW50Omwsc2V0VGV4dDpjLHNldEVsZW1lbnRUZXh0OmEscGFyZW50Tm9kZTp1LG5leHRTaWJsaW5nOnAsc2V0U2NvcGVJZDpmPV8sY2xvbmVOb2RlOmQsaW5zZXJ0U3RhdGljQ29udGVudDpofT1lLG09KGUsdCxuLG89bnVsbCxyPW51bGwscz1udWxsLGk9ITEsbD1udWxsLGM9ISF0LmR5bmFtaWNDaGlsZHJlbik9PntpZihlPT09dClyZXR1cm47ZSYmIXJzKGUsdCkmJihvPVkoZSksSChlLHIscywhMCksZT1udWxsKSwtMj09PXQucGF0Y2hGbGFnJiYoYz0hMSx0LmR5bmFtaWNDaGlsZHJlbj1udWxsKTtjb25zdHt0eXBlOmEscmVmOnUsc2hhcGVGbGFnOnB9PXQ7c3dpdGNoKGEpe2Nhc2UgenI6ZyhlLHQsbixvKTticmVhaztjYXNlIEtyOmIoZSx0LG4sbyk7YnJlYWs7Y2FzZSBHcjpudWxsPT1lJiZTKHQsbixvLGkpO2JyZWFrO2Nhc2UgV3I6UihlLHQsbixvLHIscyxpLGwsYyk7YnJlYWs7ZGVmYXVsdDoxJnA/eChlLHQsbixvLHIscyxpLGwsYyk6NiZwP0YoZSx0LG4sbyxyLHMsaSxsLGMpOig2NCZwfHwxMjgmcCkmJmEucHJvY2VzcyhlLHQsbixvLHIscyxpLGwsYyx0ZSl9bnVsbCE9dSYmciYmRXIodSxlJiZlLnJlZixzLHR8fGUsIXQpfSxnPShlLHQsbyxyKT0+e2lmKG51bGw9PWUpbih0LmVsPWkodC5jaGlsZHJlbiksbyxyKTtlbHNle2NvbnN0IG49dC5lbD1lLmVsO3QuY2hpbGRyZW4hPT1lLmNoaWxkcmVuJiZjKG4sdC5jaGlsZHJlbil9fSxiPShlLHQsbyxyKT0+e251bGw9PWU/bih0LmVsPWwodC5jaGlsZHJlbnx8XCJcIiksbyxyKTp0LmVsPWUuZWx9LFM9KGUsdCxuLG8pPT57W2UuZWwsZS5hbmNob3JdPWgoZS5jaGlsZHJlbix0LG4sbyxlLmVsLGUuYW5jaG9yKX0seD0oZSx0LG4sbyxyLHMsaSxsLGMpPT57aT1pfHxcInN2Z1wiPT09dC50eXBlLG51bGw9PWU/Qyh0LG4sbyxyLHMsaSxsLGMpOkUoZSx0LHIscyxpLGwsYyl9LEM9KGUsdCxvLGksbCxjLHUscCk9PntsZXQgZixoO2NvbnN0e3R5cGU6bSxwcm9wczpnLHNoYXBlRmxhZzp2LHRyYW5zaXRpb246eSxwYXRjaEZsYWc6XyxkaXJzOmJ9PWU7aWYoZS5lbCYmdm9pZCAwIT09ZCYmLTE9PT1fKWY9ZS5lbD1kKGUuZWwpO2Vsc2V7aWYoZj1lLmVsPXMoZS50eXBlLGMsZyYmZy5pcyxnKSw4JnY/YShmLGUuY2hpbGRyZW4pOjE2JnYmJlQoZS5jaGlsZHJlbixmLG51bGwsaSxsLGMmJlwiZm9yZWlnbk9iamVjdFwiIT09bSx1LHApLGImJmpvKGUsbnVsbCxpLFwiY3JlYXRlZFwiKSxnKXtmb3IoY29uc3QgdCBpbiBnKVwidmFsdWVcIj09PXR8fFUodCl8fHIoZix0LG51bGwsZ1t0XSxjLGUuY2hpbGRyZW4saSxsLEopO1widmFsdWVcImluIGcmJnIoZixcInZhbHVlXCIsbnVsbCxnLnZhbHVlKSwoaD1nLm9uVm5vZGVCZWZvcmVNb3VudCkmJmJzKGgsaSxlKX1rKGYsZSxlLnNjb3BlSWQsdSxpKX1iJiZqbyhlLG51bGwsaSxcImJlZm9yZU1vdW50XCIpO2NvbnN0IFM9KCFsfHxsJiYhbC5wZW5kaW5nQnJhbmNoKSYmeSYmIXkucGVyc2lzdGVkO1MmJnkuYmVmb3JlRW50ZXIoZiksbihmLHQsbyksKChoPWcmJmcub25Wbm9kZU1vdW50ZWQpfHxTfHxiKSYmUHIoKCgpPT57aCYmYnMoaCxpLGUpLFMmJnkuZW50ZXIoZiksYiYmam8oZSxudWxsLGksXCJtb3VudGVkXCIpfSksbCl9LGs9KGUsdCxuLG8scik9PntpZihuJiZmKGUsbiksbylmb3IobGV0IHM9MDtzPG8ubGVuZ3RoO3MrKylmKGUsb1tzXSk7aWYocil7aWYodD09PXIuc3ViVHJlZSl7Y29uc3QgdD1yLnZub2RlO2soZSx0LHQuc2NvcGVJZCx0LnNsb3RTY29wZUlkcyxyLnBhcmVudCl9fX0sVD0oZSx0LG4sbyxyLHMsaSxsLGM9MCk9Pntmb3IobGV0IGE9YzthPGUubGVuZ3RoO2ErKyl7Y29uc3QgYz1lW2FdPWw/dnMoZVthXSk6Z3MoZVthXSk7bShudWxsLGMsdCxuLG8scixzLGksbCl9fSxFPShlLHQsbixvLHMsaSxsKT0+e2NvbnN0IGM9dC5lbD1lLmVsO2xldHtwYXRjaEZsYWc6dSxkeW5hbWljQ2hpbGRyZW46cCxkaXJzOmZ9PXQ7dXw9MTYmZS5wYXRjaEZsYWc7Y29uc3QgZD1lLnByb3BzfHx2LGg9dC5wcm9wc3x8djtsZXQgbTtuJiZJcihuLCExKSwobT1oLm9uVm5vZGVCZWZvcmVVcGRhdGUpJiZicyhtLG4sdCxlKSxmJiZqbyh0LGUsbixcImJlZm9yZVVwZGF0ZVwiKSxuJiZJcihuLCEwKTtjb25zdCBnPXMmJlwiZm9yZWlnbk9iamVjdFwiIT09dC50eXBlO2lmKHA/JChlLmR5bmFtaWNDaGlsZHJlbixwLGMsbixvLGcsaSk6bHx8QihlLHQsYyxudWxsLG4sbyxnLGksITEpLHU+MCl7aWYoMTYmdSlPKGMsdCxkLGgsbixvLHMpO2Vsc2UgaWYoMiZ1JiZkLmNsYXNzIT09aC5jbGFzcyYmcihjLFwiY2xhc3NcIixudWxsLGguY2xhc3MscyksNCZ1JiZyKGMsXCJzdHlsZVwiLGQuc3R5bGUsaC5zdHlsZSxzKSw4JnUpe2NvbnN0IGk9dC5keW5hbWljUHJvcHM7Zm9yKGxldCB0PTA7dDxpLmxlbmd0aDt0Kyspe2NvbnN0IGw9aVt0XSxhPWRbbF0sdT1oW2xdO3U9PT1hJiZcInZhbHVlXCIhPT1sfHxyKGMsbCxhLHUscyxlLmNoaWxkcmVuLG4sbyxKKX19MSZ1JiZlLmNoaWxkcmVuIT09dC5jaGlsZHJlbiYmYShjLHQuY2hpbGRyZW4pfWVsc2UgbHx8bnVsbCE9cHx8TyhjLHQsZCxoLG4sbyxzKTsoKG09aC5vblZub2RlVXBkYXRlZCl8fGYpJiZQcigoKCk9PnttJiZicyhtLG4sdCxlKSxmJiZqbyh0LGUsbixcInVwZGF0ZWRcIil9KSxvKX0sJD0oZSx0LG4sbyxyLHMsaSk9Pntmb3IobGV0IGw9MDtsPHQubGVuZ3RoO2wrKyl7Y29uc3QgYz1lW2xdLGE9dFtsXSxwPWMuZWwmJihjLnR5cGU9PT1Xcnx8IXJzKGMsYSl8fDcwJmMuc2hhcGVGbGFnKT91KGMuZWwpOm47bShjLGEscCxudWxsLG8scixzLGksITApfX0sTz0oZSx0LG4sbyxzLGksbCk9PntpZihuIT09byl7Zm9yKGNvbnN0IGMgaW4gbyl7aWYoVShjKSljb250aW51ZTtjb25zdCBhPW9bY10sdT1uW2NdO2EhPT11JiZcInZhbHVlXCIhPT1jJiZyKGUsYyx1LGEsbCx0LmNoaWxkcmVuLHMsaSxKKX1pZihuIT09dilmb3IoY29uc3QgYyBpbiBuKVUoYyl8fGMgaW4gb3x8cihlLGMsbltjXSxudWxsLGwsdC5jaGlsZHJlbixzLGksSik7XCJ2YWx1ZVwiaW4gbyYmcihlLFwidmFsdWVcIixuLnZhbHVlLG8udmFsdWUpfX0sUj0oZSx0LG8scixzLGwsYyxhLHUpPT57Y29uc3QgcD10LmVsPWU/ZS5lbDppKFwiXCIpLGY9dC5hbmNob3I9ZT9lLmFuY2hvcjppKFwiXCIpO2xldHtwYXRjaEZsYWc6ZCxkeW5hbWljQ2hpbGRyZW46aCxzbG90U2NvcGVJZHM6bX09dDttJiYoYT1hP2EuY29uY2F0KG0pOm0pLG51bGw9PWU/KG4ocCxvLHIpLG4oZixvLHIpLFQodC5jaGlsZHJlbixvLGYscyxsLGMsYSx1KSk6ZD4wJiY2NCZkJiZoJiZlLmR5bmFtaWNDaGlsZHJlbj8oJChlLmR5bmFtaWNDaGlsZHJlbixoLG8scyxsLGMsYSksKG51bGwhPXQua2V5fHxzJiZ0PT09cy5zdWJUcmVlKSYmQnIoZSx0LCEwKSk6QihlLHQsbyxmLHMsbCxjLGEsdSl9LEY9KGUsdCxuLG8scixzLGksbCxjKT0+e3Quc2xvdFNjb3BlSWRzPWwsbnVsbD09ZT81MTImdC5zaGFwZUZsYWc/ci5jdHguYWN0aXZhdGUodCxuLG8saSxjKTpQKHQsbixvLHIscyxpLGMpOkEoZSx0LGMpfSxQPShlLHQsbixvLHIscyxpKT0+e2NvbnN0IGw9ZS5jb21wb25lbnQ9ZnVuY3Rpb24oZSx0LG4pe2NvbnN0IG89ZS50eXBlLHI9KHQ/dC5hcHBDb250ZXh0OmUuYXBwQ29udGV4dCl8fFNzLHM9e3VpZDp4cysrLHZub2RlOmUsdHlwZTpvLHBhcmVudDp0LGFwcENvbnRleHQ6cixyb290Om51bGwsbmV4dDpudWxsLHN1YlRyZWU6bnVsbCxlZmZlY3Q6bnVsbCx1cGRhdGU6bnVsbCxzY29wZTpuZXcgbmUoITApLHJlbmRlcjpudWxsLHByb3h5Om51bGwsZXhwb3NlZDpudWxsLGV4cG9zZVByb3h5Om51bGwsd2l0aFByb3h5Om51bGwscHJvdmlkZXM6dD90LnByb3ZpZGVzOk9iamVjdC5jcmVhdGUoci5wcm92aWRlcyksYWNjZXNzQ2FjaGU6bnVsbCxyZW5kZXJDYWNoZTpbXSxjb21wb25lbnRzOm51bGwsZGlyZWN0aXZlczpudWxsLHByb3BzT3B0aW9uczptcihvLHIpLGVtaXRzT3B0aW9uczpUbihvLHIpLGVtaXQ6bnVsbCxlbWl0dGVkOm51bGwscHJvcHNEZWZhdWx0czp2LGluaGVyaXRBdHRyczpvLmluaGVyaXRBdHRycyxjdHg6dixkYXRhOnYscHJvcHM6dixhdHRyczp2LHNsb3RzOnYscmVmczp2LHNldHVwU3RhdGU6dixzZXR1cENvbnRleHQ6bnVsbCxzdXNwZW5zZTpuLHN1c3BlbnNlSWQ6bj9uLnBlbmRpbmdJZDowLGFzeW5jRGVwOm51bGwsYXN5bmNSZXNvbHZlZDohMSxpc01vdW50ZWQ6ITEsaXNVbm1vdW50ZWQ6ITEsaXNEZWFjdGl2YXRlZDohMSxiYzpudWxsLGM6bnVsbCxibTpudWxsLG06bnVsbCxidTpudWxsLHU6bnVsbCx1bTpudWxsLGJ1bTpudWxsLGRhOm51bGwsYTpudWxsLHJ0ZzpudWxsLHJ0YzpudWxsLGVjOm51bGwsc3A6bnVsbH07cy5jdHg9e186c30scy5yb290PXQ/dC5yb290OnMscy5lbWl0PWtuLmJpbmQobnVsbCxzKSxlLmNlJiZlLmNlKHMpO3JldHVybiBzfShlLG8scik7aWYoeW8oZSkmJihsLmN0eC5yZW5kZXJlcj10ZSksZnVuY3Rpb24oZSx0PSExKXtPcz10O2NvbnN0e3Byb3BzOm4sY2hpbGRyZW46b309ZS52bm9kZSxyPU5zKGUpOyhmdW5jdGlvbihlLHQsbixvPSExKXtjb25zdCByPXt9LHM9e307UShzLGlzLDEpLGUucHJvcHNEZWZhdWx0cz1PYmplY3QuY3JlYXRlKG51bGwpLGRyKGUsdCxyLHMpO2Zvcihjb25zdCBpIGluIGUucHJvcHNPcHRpb25zWzBdKWkgaW4gcnx8KHJbaV09dm9pZCAwKTtlLnByb3BzPW4/bz9yOnZ0KHIpOmUudHlwZS5wcm9wcz9yOnMsZS5hdHRycz1zfSkoZSxuLHIsdCksKChlLHQpPT57aWYoMzImZS52bm9kZS5zaGFwZUZsYWcpe2NvbnN0IG49dC5fO24/KGUuc2xvdHM9a3QodCksUSh0LFwiX1wiLG4pKTpDcih0LGUuc2xvdHM9e30pfWVsc2UgZS5zbG90cz17fSx0JiZ3cihlLHQpO1EoZS5zbG90cyxpcywxKX0pKGUsbyk7Y29uc3Qgcz1yP2Z1bmN0aW9uKGUsdCl7Y29uc3Qgbj1lLnR5cGU7ZS5hY2Nlc3NDYWNoZT1PYmplY3QuY3JlYXRlKG51bGwpLGUucHJveHk9VHQobmV3IFByb3h5KGUuY3R4LGVyKSk7Y29uc3R7c2V0dXA6b309bjtpZihvKXtjb25zdCBuPWUuc2V0dXBDb250ZXh0PW8ubGVuZ3RoPjE/TXMoZSk6bnVsbDtrcyhlKSx4ZSgpO2NvbnN0IHI9WXQobyxlLDAsW2UucHJvcHMsbl0pO2lmKENlKCksVHMoKSxWKHIpKXtpZihyLnRoZW4oVHMsVHMpLHQpcmV0dXJuIHIudGhlbigobj0+e1JzKGUsbix0KX0pKS5jYXRjaCgodD0+e1F0KHQsZSwwKX0pKTtlLmFzeW5jRGVwPXJ9ZWxzZSBScyhlLHIsdCl9ZWxzZSBBcyhlLHQpfShlLHQpOnZvaWQgMDtPcz0hMX0obCksbC5hc3luY0RlcCl7aWYociYmci5yZWdpc3RlckRlcChsLE0pLCFlLmVsKXtjb25zdCBlPWwuc3ViVHJlZT11cyhLcik7YihudWxsLGUsdCxuKX19ZWxzZSBNKGwsZSx0LG4scixzLGkpfSxBPShlLHQsbik9Pntjb25zdCBvPXQuY29tcG9uZW50PWUuY29tcG9uZW50O2lmKGZ1bmN0aW9uKGUsdCxuKXtjb25zdHtwcm9wczpvLGNoaWxkcmVuOnIsY29tcG9uZW50OnN9PWUse3Byb3BzOmksY2hpbGRyZW46bCxwYXRjaEZsYWc6Y309dCxhPXMuZW1pdHNPcHRpb25zO2lmKHQuZGlyc3x8dC50cmFuc2l0aW9uKXJldHVybiEwO2lmKCEobiYmYz49MCkpcmV0dXJuISghciYmIWx8fGwmJmwuJHN0YWJsZSl8fG8hPT1pJiYobz8haXx8Qm4obyxpLGEpOiEhaSk7aWYoMTAyNCZjKXJldHVybiEwO2lmKDE2JmMpcmV0dXJuIG8/Qm4obyxpLGEpOiEhaTtpZig4JmMpe2NvbnN0IGU9dC5keW5hbWljUHJvcHM7Zm9yKGxldCB0PTA7dDxlLmxlbmd0aDt0Kyspe2NvbnN0IG49ZVt0XTtpZihpW25dIT09b1tuXSYmIU5uKGEsbikpcmV0dXJuITB9fXJldHVybiExfShlLHQsbikpe2lmKG8uYXN5bmNEZXAmJiFvLmFzeW5jUmVzb2x2ZWQpcmV0dXJuIHZvaWQgSShvLHQsbik7by5uZXh0PXQsZnVuY3Rpb24oZSl7Y29uc3QgdD10bi5pbmRleE9mKGUpO3Q+bm4mJnRuLnNwbGljZSh0LDEpfShvLnVwZGF0ZSksby51cGRhdGUoKX1lbHNlIHQuZWw9ZS5lbCxvLnZub2RlPXR9LE09KGUsdCxuLG8scixzLGkpPT57Y29uc3QgbD1lLmVmZmVjdD1uZXcgZ2UoKCgpPT57aWYoZS5pc01vdW50ZWQpe2xldCB0LHtuZXh0Om4sYnU6byx1OmwscGFyZW50OmMsdm5vZGU6YX09ZSxwPW47SXIoZSwhMSksbj8obi5lbD1hLmVsLEkoZSxuLGkpKTpuPWEsbyYmWihvKSwodD1uLnByb3BzJiZuLnByb3BzLm9uVm5vZGVCZWZvcmVVcGRhdGUpJiZicyh0LGMsbixhKSxJcihlLCEwKTtjb25zdCBmPU1uKGUpLGQ9ZS5zdWJUcmVlO2Uuc3ViVHJlZT1mLG0oZCxmLHUoZC5lbCksWShkKSxlLHIscyksbi5lbD1mLmVsLG51bGw9PT1wJiZMbihlLGYuZWwpLGwmJlByKGwsciksKHQ9bi5wcm9wcyYmbi5wcm9wcy5vblZub2RlVXBkYXRlZCkmJlByKCgoKT0+YnModCxjLG4sYSkpLHIpfWVsc2V7bGV0IGk7Y29uc3R7ZWw6bCxwcm9wczpjfT10LHtibTphLG06dSxwYXJlbnQ6cH09ZSxmPW1vKHQpO2lmKElyKGUsITEpLGEmJlooYSksIWYmJihpPWMmJmMub25Wbm9kZUJlZm9yZU1vdW50KSYmYnMoaSxwLHQpLElyKGUsITApLGwmJnJlKXtjb25zdCBuPSgpPT57ZS5zdWJUcmVlPU1uKGUpLHJlKGwsZS5zdWJUcmVlLGUscixudWxsKX07Zj90LnR5cGUuX19hc3luY0xvYWRlcigpLnRoZW4oKCgpPT4hZS5pc1VubW91bnRlZCYmbigpKSk6bigpfWVsc2V7Y29uc3QgaT1lLnN1YlRyZWU9TW4oZSk7bShudWxsLGksbixvLGUscixzKSx0LmVsPWkuZWx9aWYodSYmUHIodSxyKSwhZiYmKGk9YyYmYy5vblZub2RlTW91bnRlZCkpe2NvbnN0IGU9dDtQcigoKCk9PmJzKGkscCxlKSkscil9KDI1NiZ0LnNoYXBlRmxhZ3x8cCYmbW8ocC52bm9kZSkmJjI1NiZwLnZub2RlLnNoYXBlRmxhZykmJmUuYSYmUHIoZS5hLHIpLGUuaXNNb3VudGVkPSEwLHQ9bj1vPW51bGx9fSksKCgpPT5obihjKSksZS5zY29wZSksYz1lLnVwZGF0ZT0oKT0+bC5ydW4oKTtjLmlkPWUudWlkLElyKGUsITApLGMoKX0sST0oZSx0LG4pPT57dC5jb21wb25lbnQ9ZTtjb25zdCBvPWUudm5vZGUucHJvcHM7ZS52bm9kZT10LGUubmV4dD1udWxsLGZ1bmN0aW9uKGUsdCxuLG8pe2NvbnN0e3Byb3BzOnIsYXR0cnM6cyx2bm9kZTp7cGF0Y2hGbGFnOml9fT1lLGw9a3QociksW2NdPWUucHJvcHNPcHRpb25zO2xldCBhPSExO2lmKCEob3x8aT4wKXx8MTYmaSl7bGV0IG87ZHIoZSx0LHIscykmJihhPSEwKTtmb3IoY29uc3QgcyBpbiBsKXQmJihOKHQscyl8fChvPUcocykpIT09cyYmTih0LG8pKXx8KGM/IW58fHZvaWQgMD09PW5bc10mJnZvaWQgMD09PW5bb118fChyW3NdPWhyKGMsbCxzLHZvaWQgMCxlLCEwKSk6ZGVsZXRlIHJbc10pO2lmKHMhPT1sKWZvcihjb25zdCBlIGluIHMpdCYmTih0LGUpfHwoZGVsZXRlIHNbZV0sYT0hMCl9ZWxzZSBpZig4Jmkpe2NvbnN0IG49ZS52bm9kZS5keW5hbWljUHJvcHM7Zm9yKGxldCBvPTA7bzxuLmxlbmd0aDtvKyspe2xldCBpPW5bb107aWYoTm4oZS5lbWl0c09wdGlvbnMsaSkpY29udGludWU7Y29uc3QgdT10W2ldO2lmKGMpaWYoTihzLGkpKXUhPT1zW2ldJiYoc1tpXT11LGE9ITApO2Vsc2V7Y29uc3QgdD16KGkpO3JbdF09aHIoYyxsLHQsdSxlLCExKX1lbHNlIHUhPT1zW2ldJiYoc1tpXT11LGE9ITApfX1hJiZUZShlLFwic2V0XCIsXCIkYXR0cnNcIil9KGUsdC5wcm9wcyxvLG4pLCgoZSx0LG4pPT57Y29uc3R7dm5vZGU6byxzbG90czpyfT1lO2xldCBzPSEwLGk9djtpZigzMiZvLnNoYXBlRmxhZyl7Y29uc3QgZT10Ll87ZT9uJiYxPT09ZT9zPSExOih3KHIsdCksbnx8MSE9PWV8fGRlbGV0ZSByLl8pOihzPSF0LiRzdGFibGUsQ3IodCxyKSksaT10fWVsc2UgdCYmKHdyKGUsdCksaT17ZGVmYXVsdDoxfSk7aWYocylmb3IoY29uc3QgbCBpbiByKWJyKGwpfHxsIGluIGl8fGRlbGV0ZSByW2xdfSkoZSx0LmNoaWxkcmVuLG4pLHhlKCkseW4odm9pZCAwLGUudXBkYXRlKSxDZSgpfSxCPShlLHQsbixvLHIscyxpLGwsYz0hMSk9Pntjb25zdCB1PWUmJmUuY2hpbGRyZW4scD1lP2Uuc2hhcGVGbGFnOjAsZj10LmNoaWxkcmVuLHtwYXRjaEZsYWc6ZCxzaGFwZUZsYWc6aH09dDtpZihkPjApe2lmKDEyOCZkKXJldHVybiB2b2lkIGoodSxmLG4sbyxyLHMsaSxsLGMpO2lmKDI1NiZkKXJldHVybiB2b2lkIEwodSxmLG4sbyxyLHMsaSxsLGMpfTgmaD8oMTYmcCYmSih1LHIscyksZiE9PXUmJmEobixmKSk6MTYmcD8xNiZoP2oodSxmLG4sbyxyLHMsaSxsLGMpOkoodSxyLHMsITApOig4JnAmJmEobixcIlwiKSwxNiZoJiZUKGYsbixvLHIscyxpLGwsYykpfSxMPShlLHQsbixvLHIscyxpLGwsYyk9Pntjb25zdCBhPShlPWV8fHkpLmxlbmd0aCx1PSh0PXR8fHkpLmxlbmd0aCxwPU1hdGgubWluKGEsdSk7bGV0IGY7Zm9yKGY9MDtmPHA7ZisrKXtjb25zdCBvPXRbZl09Yz92cyh0W2ZdKTpncyh0W2ZdKTttKGVbZl0sbyxuLG51bGwscixzLGksbCxjKX1hPnU/SihlLHIscywhMCwhMSxwKTpUKHQsbixvLHIscyxpLGwsYyxwKX0saj0oZSx0LG4sbyxyLHMsaSxsLGMpPT57bGV0IGE9MDtjb25zdCB1PXQubGVuZ3RoO2xldCBwPWUubGVuZ3RoLTEsZj11LTE7Zm9yKDthPD1wJiZhPD1mOyl7Y29uc3Qgbz1lW2FdLHU9dFthXT1jP3ZzKHRbYV0pOmdzKHRbYV0pO2lmKCFycyhvLHUpKWJyZWFrO20obyx1LG4sbnVsbCxyLHMsaSxsLGMpLGErK31mb3IoO2E8PXAmJmE8PWY7KXtjb25zdCBvPWVbcF0sYT10W2ZdPWM/dnModFtmXSk6Z3ModFtmXSk7aWYoIXJzKG8sYSkpYnJlYWs7bShvLGEsbixudWxsLHIscyxpLGwsYykscC0tLGYtLX1pZihhPnApe2lmKGE8PWYpe2NvbnN0IGU9ZisxLHA9ZTx1P3RbZV0uZWw6bztmb3IoO2E8PWY7KW0obnVsbCx0W2FdPWM/dnModFthXSk6Z3ModFthXSksbixwLHIscyxpLGwsYyksYSsrfX1lbHNlIGlmKGE+Zilmb3IoO2E8PXA7KUgoZVthXSxyLHMsITApLGErKztlbHNle2NvbnN0IGQ9YSxoPWEsZz1uZXcgTWFwO2ZvcihhPWg7YTw9ZjthKyspe2NvbnN0IGU9dFthXT1jP3ZzKHRbYV0pOmdzKHRbYV0pO251bGwhPWUua2V5JiZnLnNldChlLmtleSxhKX1sZXQgdixfPTA7Y29uc3QgYj1mLWgrMTtsZXQgUz0hMSx4PTA7Y29uc3QgQz1uZXcgQXJyYXkoYik7Zm9yKGE9MDthPGI7YSsrKUNbYV09MDtmb3IoYT1kO2E8PXA7YSsrKXtjb25zdCBvPWVbYV07aWYoXz49Yil7SChvLHIscywhMCk7Y29udGludWV9bGV0IHU7aWYobnVsbCE9by5rZXkpdT1nLmdldChvLmtleSk7ZWxzZSBmb3Iodj1oO3Y8PWY7disrKWlmKDA9PT1DW3YtaF0mJnJzKG8sdFt2XSkpe3U9djticmVha312b2lkIDA9PT11P0gobyxyLHMsITApOihDW3UtaF09YSsxLHU+PXg/eD11OlM9ITAsbShvLHRbdV0sbixudWxsLHIscyxpLGwsYyksXysrKX1jb25zdCB3PVM/ZnVuY3Rpb24oZSl7Y29uc3QgdD1lLnNsaWNlKCksbj1bMF07bGV0IG8scixzLGksbDtjb25zdCBjPWUubGVuZ3RoO2ZvcihvPTA7bzxjO28rKyl7Y29uc3QgYz1lW29dO2lmKDAhPT1jKXtpZihyPW5bbi5sZW5ndGgtMV0sZVtyXTxjKXt0W29dPXIsbi5wdXNoKG8pO2NvbnRpbnVlfWZvcihzPTAsaT1uLmxlbmd0aC0xO3M8aTspbD1zK2k+PjEsZVtuW2xdXTxjP3M9bCsxOmk9bDtjPGVbbltzXV0mJihzPjAmJih0W29dPW5bcy0xXSksbltzXT1vKX19cz1uLmxlbmd0aCxpPW5bcy0xXTtmb3IoO3MtLSA+MDspbltzXT1pLGk9dFtpXTtyZXR1cm4gbn0oQyk6eTtmb3Iodj13Lmxlbmd0aC0xLGE9Yi0xO2E+PTA7YS0tKXtjb25zdCBlPWgrYSxwPXRbZV0sZj1lKzE8dT90W2UrMV0uZWw6bzswPT09Q1thXT9tKG51bGwscCxuLGYscixzLGksbCxjKTpTJiYodjwwfHxhIT09d1t2XT9EKHAsbixmLDIpOnYtLSl9fX0sRD0oZSx0LG8scixzPW51bGwpPT57Y29uc3R7ZWw6aSx0eXBlOmwsdHJhbnNpdGlvbjpjLGNoaWxkcmVuOmEsc2hhcGVGbGFnOnV9PWU7aWYoNiZ1KXJldHVybiB2b2lkIEQoZS5jb21wb25lbnQuc3ViVHJlZSx0LG8scik7aWYoMTI4JnUpcmV0dXJuIHZvaWQgZS5zdXNwZW5zZS5tb3ZlKHQsbyxyKTtpZig2NCZ1KXJldHVybiB2b2lkIGwubW92ZShlLHQsbyx0ZSk7aWYobD09PVdyKXtuKGksdCxvKTtmb3IobGV0IGU9MDtlPGEubGVuZ3RoO2UrKylEKGFbZV0sdCxvLHIpO3JldHVybiB2b2lkIG4oZS5hbmNob3IsdCxvKX1pZihsPT09R3IpcmV0dXJuIHZvaWQoKHtlbDplLGFuY2hvcjp0fSxvLHIpPT57bGV0IHM7Zm9yKDtlJiZlIT09dDspcz1wKGUpLG4oZSxvLHIpLGU9cztuKHQsbyxyKX0pKGUsdCxvKTtpZigyIT09ciYmMSZ1JiZjKWlmKDA9PT1yKWMuYmVmb3JlRW50ZXIoaSksbihpLHQsbyksUHIoKCgpPT5jLmVudGVyKGkpKSxzKTtlbHNle2NvbnN0e2xlYXZlOmUsZGVsYXlMZWF2ZTpyLGFmdGVyTGVhdmU6c309YyxsPSgpPT5uKGksdCxvKSxhPSgpPT57ZShpLCgoKT0+e2woKSxzJiZzKCl9KSl9O3I/cihpLGwsYSk6YSgpfWVsc2UgbihpLHQsbyl9LEg9KGUsdCxuLG89ITEscj0hMSk9Pntjb25zdHt0eXBlOnMscHJvcHM6aSxyZWY6bCxjaGlsZHJlbjpjLGR5bmFtaWNDaGlsZHJlbjphLHNoYXBlRmxhZzp1LHBhdGNoRmxhZzpwLGRpcnM6Zn09ZTtpZihudWxsIT1sJiZFcihsLG51bGwsbixlLCEwKSwyNTYmdSlyZXR1cm4gdm9pZCB0LmN0eC5kZWFjdGl2YXRlKGUpO2NvbnN0IGQ9MSZ1JiZmLGg9IW1vKGUpO2xldCBtO2lmKGgmJihtPWkmJmkub25Wbm9kZUJlZm9yZVVubW91bnQpJiZicyhtLHQsZSksNiZ1KXEoZS5jb21wb25lbnQsbixvKTtlbHNle2lmKDEyOCZ1KXJldHVybiB2b2lkIGUuc3VzcGVuc2UudW5tb3VudChuLG8pO2QmJmpvKGUsbnVsbCx0LFwiYmVmb3JlVW5tb3VudFwiKSw2NCZ1P2UudHlwZS5yZW1vdmUoZSx0LG4scix0ZSxvKTphJiYocyE9PVdyfHxwPjAmJjY0JnApP0ooYSx0LG4sITEsITApOihzPT09V3ImJjM4NCZwfHwhciYmMTYmdSkmJkooYyx0LG4pLG8mJlcoZSl9KGgmJihtPWkmJmkub25Wbm9kZVVubW91bnRlZCl8fGQpJiZQcigoKCk9PnttJiZicyhtLHQsZSksZCYmam8oZSxudWxsLHQsXCJ1bm1vdW50ZWRcIil9KSxuKX0sVz1lPT57Y29uc3R7dHlwZTp0LGVsOm4sYW5jaG9yOnIsdHJhbnNpdGlvbjpzfT1lO2lmKHQ9PT1XcilyZXR1cm4gdm9pZCBLKG4scik7aWYodD09PUdyKXJldHVybiB2b2lkKCh7ZWw6ZSxhbmNob3I6dH0pPT57bGV0IG47Zm9yKDtlJiZlIT09dDspbj1wKGUpLG8oZSksZT1uO28odCl9KShlKTtjb25zdCBpPSgpPT57byhuKSxzJiYhcy5wZXJzaXN0ZWQmJnMuYWZ0ZXJMZWF2ZSYmcy5hZnRlckxlYXZlKCl9O2lmKDEmZS5zaGFwZUZsYWcmJnMmJiFzLnBlcnNpc3RlZCl7Y29uc3R7bGVhdmU6dCxkZWxheUxlYXZlOm99PXMscj0oKT0+dChuLGkpO28/byhlLmVsLGkscik6cigpfWVsc2UgaSgpfSxLPShlLHQpPT57bGV0IG47Zm9yKDtlIT09dDspbj1wKGUpLG8oZSksZT1uO28odCl9LHE9KGUsdCxuKT0+e2NvbnN0e2J1bTpvLHNjb3BlOnIsdXBkYXRlOnMsc3ViVHJlZTppLHVtOmx9PWU7byYmWihvKSxyLnN0b3AoKSxzJiYocy5hY3RpdmU9ITEsSChpLGUsdCxuKSksbCYmUHIobCx0KSxQcigoKCk9PntlLmlzVW5tb3VudGVkPSEwfSksdCksdCYmdC5wZW5kaW5nQnJhbmNoJiYhdC5pc1VubW91bnRlZCYmZS5hc3luY0RlcCYmIWUuYXN5bmNSZXNvbHZlZCYmZS5zdXNwZW5zZUlkPT09dC5wZW5kaW5nSWQmJih0LmRlcHMtLSwwPT09dC5kZXBzJiZ0LnJlc29sdmUoKSl9LEo9KGUsdCxuLG89ITEscj0hMSxzPTApPT57Zm9yKGxldCBpPXM7aTxlLmxlbmd0aDtpKyspSChlW2ldLHQsbixvLHIpfSxZPWU9PjYmZS5zaGFwZUZsYWc/WShlLmNvbXBvbmVudC5zdWJUcmVlKToxMjgmZS5zaGFwZUZsYWc/ZS5zdXNwZW5zZS5uZXh0KCk6cChlLmFuY2hvcnx8ZS5lbCksWD0oZSx0LG4pPT57bnVsbD09ZT90Ll92bm9kZSYmSCh0Ll92bm9kZSxudWxsLG51bGwsITApOm0odC5fdm5vZGV8fG51bGwsZSx0LG51bGwsbnVsbCxudWxsLG4pLF9uKCksdC5fdm5vZGU9ZX0sdGU9e3A6bSx1bTpILG06RCxyOlcsbXQ6UCxtYzpULHBjOkIscGJjOiQsbjpZLG86ZX07bGV0IG9lLHJlO3JldHVybiB0JiYoW29lLHJlXT10KHRlKSkse3JlbmRlcjpYLGh5ZHJhdGU6b2UsY3JlYXRlQXBwOk5yKFgsb2UpfX1mdW5jdGlvbiBJcih7ZWZmZWN0OmUsdXBkYXRlOnR9LG4pe2UuYWxsb3dSZWN1cnNlPXQuYWxsb3dSZWN1cnNlPW59ZnVuY3Rpb24gQnIoZSx0LG49ITEpe2NvbnN0IG89ZS5jaGlsZHJlbixyPXQuY2hpbGRyZW47aWYoRShvKSYmRShyKSlmb3IobGV0IHM9MDtzPG8ubGVuZ3RoO3MrKyl7Y29uc3QgZT1vW3NdO2xldCB0PXJbc107MSZ0LnNoYXBlRmxhZyYmIXQuZHluYW1pY0NoaWxkcmVuJiYoKHQucGF0Y2hGbGFnPD0wfHwzMj09PXQucGF0Y2hGbGFnKSYmKHQ9cltzXT12cyhyW3NdKSx0LmVsPWUuZWwpLG58fEJyKGUsdCkpfX1jb25zdCBMcj1lPT5lJiYoZS5kaXNhYmxlZHx8XCJcIj09PWUuZGlzYWJsZWQpLGpyPWU9PlwidW5kZWZpbmVkXCIhPXR5cGVvZiBTVkdFbGVtZW50JiZlIGluc3RhbmNlb2YgU1ZHRWxlbWVudCxVcj0oZSx0KT0+e2NvbnN0IG49ZSYmZS50bztpZihQKG4pKXtpZih0KXtyZXR1cm4gdChuKX1yZXR1cm4gbnVsbH1yZXR1cm4gbn07ZnVuY3Rpb24gRHIoZSx0LG4se286e2luc2VydDpvfSxtOnJ9LHM9Mil7MD09PXMmJm8oZS50YXJnZXRBbmNob3IsdCxuKTtjb25zdHtlbDppLGFuY2hvcjpsLHNoYXBlRmxhZzpjLGNoaWxkcmVuOmEscHJvcHM6dX09ZSxwPTI9PT1zO2lmKHAmJm8oaSx0LG4pLCghcHx8THIodSkpJiYxNiZjKWZvcihsZXQgZj0wO2Y8YS5sZW5ndGg7ZisrKXIoYVtmXSx0LG4sMik7cCYmbyhsLHQsbil9Y29uc3QgSHI9e19faXNUZWxlcG9ydDohMCxwcm9jZXNzKGUsdCxuLG8scixzLGksbCxjLGEpe2NvbnN0e21jOnUscGM6cCxwYmM6ZixvOntpbnNlcnQ6ZCxxdWVyeVNlbGVjdG9yOmgsY3JlYXRlVGV4dDptfX09YSxnPUxyKHQucHJvcHMpO2xldHtzaGFwZUZsYWc6dixjaGlsZHJlbjp5LGR5bmFtaWNDaGlsZHJlbjpffT10O2lmKG51bGw9PWUpe2NvbnN0IGU9dC5lbD1tKFwiXCIpLGE9dC5hbmNob3I9bShcIlwiKTtkKGUsbixvKSxkKGEsbixvKTtjb25zdCBwPXQudGFyZ2V0PVVyKHQucHJvcHMsaCksZj10LnRhcmdldEFuY2hvcj1tKFwiXCIpO3AmJihkKGYscCksaT1pfHxqcihwKSk7Y29uc3QgXz0oZSx0KT0+ezE2JnYmJnUoeSxlLHQscixzLGksbCxjKX07Zz9fKG4sYSk6cCYmXyhwLGYpfWVsc2V7dC5lbD1lLmVsO2NvbnN0IG89dC5hbmNob3I9ZS5hbmNob3IsdT10LnRhcmdldD1lLnRhcmdldCxkPXQudGFyZ2V0QW5jaG9yPWUudGFyZ2V0QW5jaG9yLG09THIoZS5wcm9wcyksdj1tP246dSx5PW0/bzpkO2lmKGk9aXx8anIodSksXz8oZihlLmR5bmFtaWNDaGlsZHJlbixfLHYscixzLGksbCksQnIoZSx0LCEwKSk6Y3x8cChlLHQsdix5LHIscyxpLGwsITEpLGcpbXx8RHIodCxuLG8sYSwxKTtlbHNlIGlmKCh0LnByb3BzJiZ0LnByb3BzLnRvKSE9PShlLnByb3BzJiZlLnByb3BzLnRvKSl7Y29uc3QgZT10LnRhcmdldD1Vcih0LnByb3BzLGgpO2UmJkRyKHQsZSxudWxsLGEsMCl9ZWxzZSBtJiZEcih0LHUsZCxhLDEpfX0scmVtb3ZlKGUsdCxuLG8se3VtOnIsbzp7cmVtb3ZlOnN9fSxpKXtjb25zdHtzaGFwZUZsYWc6bCxjaGlsZHJlbjpjLGFuY2hvcjphLHRhcmdldEFuY2hvcjp1LHRhcmdldDpwLHByb3BzOmZ9PWU7aWYocCYmcyh1KSwoaXx8IUxyKGYpKSYmKHMoYSksMTYmbCkpZm9yKGxldCBkPTA7ZDxjLmxlbmd0aDtkKyspe2NvbnN0IGU9Y1tkXTtyKGUsdCxuLCEwLCEhZS5keW5hbWljQ2hpbGRyZW4pfX0sbW92ZTpEcixoeWRyYXRlOmZ1bmN0aW9uKGUsdCxuLG8scixzLHtvOntuZXh0U2libGluZzppLHBhcmVudE5vZGU6bCxxdWVyeVNlbGVjdG9yOmN9fSxhKXtjb25zdCB1PXQudGFyZ2V0PVVyKHQucHJvcHMsYyk7aWYodSl7Y29uc3QgYz11Ll9scGF8fHUuZmlyc3RDaGlsZDtpZigxNiZ0LnNoYXBlRmxhZylpZihMcih0LnByb3BzKSl0LmFuY2hvcj1hKGkoZSksdCxsKGUpLG4sbyxyLHMpLHQudGFyZ2V0QW5jaG9yPWM7ZWxzZXt0LmFuY2hvcj1pKGUpO2xldCBsPWM7Zm9yKDtsOylpZihsPWkobCksbCYmOD09PWwubm9kZVR5cGUmJlwidGVsZXBvcnQgYW5jaG9yXCI9PT1sLmRhdGEpe3QudGFyZ2V0QW5jaG9yPWwsdS5fbHBhPXQudGFyZ2V0QW5jaG9yJiZpKHQudGFyZ2V0QW5jaG9yKTticmVha31hKGMsdCx1LG4sbyxyLHMpfX1yZXR1cm4gdC5hbmNob3ImJmkodC5hbmNob3IpfX0sV3I9U3ltYm9sKHZvaWQgMCksenI9U3ltYm9sKHZvaWQgMCksS3I9U3ltYm9sKHZvaWQgMCksR3I9U3ltYm9sKHZvaWQgMCkscXI9W107bGV0IEpyPW51bGw7ZnVuY3Rpb24gWXIoZT0hMSl7cXIucHVzaChKcj1lP251bGw6W10pfWZ1bmN0aW9uIFpyKCl7cXIucG9wKCksSnI9cXJbcXIubGVuZ3RoLTFdfHxudWxsfWxldCBRcj0xO2Z1bmN0aW9uIFhyKGUpe1FyKz1lfWZ1bmN0aW9uIGVzKGUpe3JldHVybiBlLmR5bmFtaWNDaGlsZHJlbj1Rcj4wP0pyfHx5Om51bGwsWnIoKSxRcj4wJiZKciYmSnIucHVzaChlKSxlfWZ1bmN0aW9uIHRzKGUsdCxuLG8scixzKXtyZXR1cm4gZXMoYXMoZSx0LG4sbyxyLHMsITApKX1mdW5jdGlvbiBucyhlLHQsbixvLHIpe3JldHVybiBlcyh1cyhlLHQsbixvLHIsITApKX1mdW5jdGlvbiBvcyhlKXtyZXR1cm4hIWUmJiEwPT09ZS5fX3ZfaXNWTm9kZX1mdW5jdGlvbiBycyhlLHQpe3JldHVybiBlLnR5cGU9PT10LnR5cGUmJmUua2V5PT09dC5rZXl9ZnVuY3Rpb24gc3MoZSl7fWNvbnN0IGlzPVwiX192SW50ZXJuYWxcIixscz0oe2tleTplfSk9Pm51bGwhPWU/ZTpudWxsLGNzPSh7cmVmOmUscmVmX2tleTp0LHJlZl9mb3I6bn0pPT5udWxsIT1lP1AoZSl8fFJ0KGUpfHxGKGUpP3tpOkVuLHI6ZSxrOnQsZjohIW59OmU6bnVsbDtmdW5jdGlvbiBhcyhlLHQ9bnVsbCxuPW51bGwsbz0wLHI9bnVsbCxzPShlPT09V3I/MDoxKSxpPSExLGw9ITEpe2NvbnN0IGM9e19fdl9pc1ZOb2RlOiEwLF9fdl9za2lwOiEwLHR5cGU6ZSxwcm9wczp0LGtleTp0JiZscyh0KSxyZWY6dCYmY3ModCksc2NvcGVJZDokbixzbG90U2NvcGVJZHM6bnVsbCxjaGlsZHJlbjpuLGNvbXBvbmVudDpudWxsLHN1c3BlbnNlOm51bGwsc3NDb250ZW50Om51bGwsc3NGYWxsYmFjazpudWxsLGRpcnM6bnVsbCx0cmFuc2l0aW9uOm51bGwsZWw6bnVsbCxhbmNob3I6bnVsbCx0YXJnZXQ6bnVsbCx0YXJnZXRBbmNob3I6bnVsbCxzdGF0aWNDb3VudDowLHNoYXBlRmxhZzpzLHBhdGNoRmxhZzpvLGR5bmFtaWNQcm9wczpyLGR5bmFtaWNDaGlsZHJlbjpudWxsLGFwcENvbnRleHQ6bnVsbH07cmV0dXJuIGw/KHlzKGMsbiksMTI4JnMmJmUubm9ybWFsaXplKGMpKTpuJiYoYy5zaGFwZUZsYWd8PVAobik/ODoxNiksUXI+MCYmIWkmJkpyJiYoYy5wYXRjaEZsYWc+MHx8NiZzKSYmMzIhPT1jLnBhdGNoRmxhZyYmSnIucHVzaChjKSxjfWNvbnN0IHVzPWZ1bmN0aW9uKGUsdD1udWxsLG49bnVsbCxvPTAscz1udWxsLGk9ITEpe2UmJmUhPT1Eb3x8KGU9S3IpO2lmKG9zKGUpKXtjb25zdCBvPWZzKGUsdCwhMCk7cmV0dXJuIG4mJnlzKG8sbiksUXI+MCYmIWkmJkpyJiYoNiZvLnNoYXBlRmxhZz9KcltKci5pbmRleE9mKGUpXT1vOkpyLnB1c2gobykpLG8ucGF0Y2hGbGFnfD0tMixvfWw9ZSxGKGwpJiZcIl9fdmNjT3B0c1wiaW4gbCYmKGU9ZS5fX3ZjY09wdHMpO3ZhciBsO2lmKHQpe3Q9cHModCk7bGV0e2NsYXNzOmUsc3R5bGU6bn09dDtlJiYhUChlKSYmKHQuY2xhc3M9YyhlKSksTShuKSYmKHd0KG4pJiYhRShuKSYmKG49dyh7fSxuKSksdC5zdHlsZT1yKG4pKX1jb25zdCBhPVAoZSk/MTpqbihlKT8xMjg6KGU9PmUuX19pc1RlbGVwb3J0KShlKT82NDpNKGUpPzQ6RihlKT8yOjA7cmV0dXJuIGFzKGUsdCxuLG8scyxhLGksITApfTtmdW5jdGlvbiBwcyhlKXtyZXR1cm4gZT93dChlKXx8aXMgaW4gZT93KHt9LGUpOmU6bnVsbH1mdW5jdGlvbiBmcyhlLHQsbj0hMSl7Y29uc3R7cHJvcHM6byxyZWY6cixwYXRjaEZsYWc6cyxjaGlsZHJlbjppfT1lLGw9dD9fcyhvfHx7fSx0KTpvO3JldHVybntfX3ZfaXNWTm9kZTohMCxfX3Zfc2tpcDohMCx0eXBlOmUudHlwZSxwcm9wczpsLGtleTpsJiZscyhsKSxyZWY6dCYmdC5yZWY/biYmcj9FKHIpP3IuY29uY2F0KGNzKHQpKTpbcixjcyh0KV06Y3ModCk6cixzY29wZUlkOmUuc2NvcGVJZCxzbG90U2NvcGVJZHM6ZS5zbG90U2NvcGVJZHMsY2hpbGRyZW46aSx0YXJnZXQ6ZS50YXJnZXQsdGFyZ2V0QW5jaG9yOmUudGFyZ2V0QW5jaG9yLHN0YXRpY0NvdW50OmUuc3RhdGljQ291bnQsc2hhcGVGbGFnOmUuc2hhcGVGbGFnLHBhdGNoRmxhZzp0JiZlLnR5cGUhPT1Xcj8tMT09PXM/MTY6MTZ8czpzLGR5bmFtaWNQcm9wczplLmR5bmFtaWNQcm9wcyxkeW5hbWljQ2hpbGRyZW46ZS5keW5hbWljQ2hpbGRyZW4sYXBwQ29udGV4dDplLmFwcENvbnRleHQsZGlyczplLmRpcnMsdHJhbnNpdGlvbjplLnRyYW5zaXRpb24sY29tcG9uZW50OmUuY29tcG9uZW50LHN1c3BlbnNlOmUuc3VzcGVuc2Usc3NDb250ZW50OmUuc3NDb250ZW50JiZmcyhlLnNzQ29udGVudCksc3NGYWxsYmFjazplLnNzRmFsbGJhY2smJmZzKGUuc3NGYWxsYmFjayksZWw6ZS5lbCxhbmNob3I6ZS5hbmNob3J9fWZ1bmN0aW9uIGRzKGU9XCIgXCIsdD0wKXtyZXR1cm4gdXMoenIsbnVsbCxlLHQpfWZ1bmN0aW9uIGhzKGUsdCl7Y29uc3Qgbj11cyhHcixudWxsLGUpO3JldHVybiBuLnN0YXRpY0NvdW50PXQsbn1mdW5jdGlvbiBtcyhlPVwiXCIsdD0hMSl7cmV0dXJuIHQ/KFlyKCksbnMoS3IsbnVsbCxlKSk6dXMoS3IsbnVsbCxlKX1mdW5jdGlvbiBncyhlKXtyZXR1cm4gbnVsbD09ZXx8XCJib29sZWFuXCI9PXR5cGVvZiBlP3VzKEtyKTpFKGUpP3VzKFdyLG51bGwsZS5zbGljZSgpKTpcIm9iamVjdFwiPT10eXBlb2YgZT92cyhlKTp1cyh6cixudWxsLFN0cmluZyhlKSl9ZnVuY3Rpb24gdnMoZSl7cmV0dXJuIG51bGw9PT1lLmVsfHxlLm1lbW8/ZTpmcyhlKX1mdW5jdGlvbiB5cyhlLHQpe2xldCBuPTA7Y29uc3R7c2hhcGVGbGFnOm99PWU7aWYobnVsbD09dCl0PW51bGw7ZWxzZSBpZihFKHQpKW49MTY7ZWxzZSBpZihcIm9iamVjdFwiPT10eXBlb2YgdCl7aWYoNjUmbyl7Y29uc3Qgbj10LmRlZmF1bHQ7cmV0dXJuIHZvaWQobiYmKG4uX2MmJihuLl9kPSExKSx5cyhlLG4oKSksbi5fYyYmKG4uX2Q9ITApKSl9e249MzI7Y29uc3Qgbz10Ll87b3x8aXMgaW4gdD8zPT09byYmRW4mJigxPT09RW4uc2xvdHMuXz90Ll89MToodC5fPTIsZS5wYXRjaEZsYWd8PTEwMjQpKTp0Ll9jdHg9RW59fWVsc2UgRih0KT8odD17ZGVmYXVsdDp0LF9jdHg6RW59LG49MzIpOih0PVN0cmluZyh0KSw2NCZvPyhuPTE2LHQ9W2RzKHQpXSk6bj04KTtlLmNoaWxkcmVuPXQsZS5zaGFwZUZsYWd8PW59ZnVuY3Rpb24gX3MoLi4uZSl7Y29uc3QgdD17fTtmb3IobGV0IG49MDtuPGUubGVuZ3RoO24rKyl7Y29uc3Qgbz1lW25dO2Zvcihjb25zdCBlIGluIG8paWYoXCJjbGFzc1wiPT09ZSl0LmNsYXNzIT09by5jbGFzcyYmKHQuY2xhc3M9YyhbdC5jbGFzcyxvLmNsYXNzXSkpO2Vsc2UgaWYoXCJzdHlsZVwiPT09ZSl0LnN0eWxlPXIoW3Quc3R5bGUsby5zdHlsZV0pO2Vsc2UgaWYoeChlKSl7Y29uc3Qgbj10W2VdLHI9b1tlXTshcnx8bj09PXJ8fEUobikmJm4uaW5jbHVkZXMocil8fCh0W2VdPW4/W10uY29uY2F0KG4scik6cil9ZWxzZVwiXCIhPT1lJiYodFtlXT1vW2VdKX1yZXR1cm4gdH1mdW5jdGlvbiBicyhlLHQsbixvPW51bGwpe1p0KGUsdCw3LFtuLG9dKX1jb25zdCBTcz1rcigpO2xldCB4cz0wO2xldCBDcz1udWxsO2NvbnN0IHdzPSgpPT5Dc3x8RW4sa3M9ZT0+e0NzPWUsZS5zY29wZS5vbigpfSxUcz0oKT0+e0NzJiZDcy5zY29wZS5vZmYoKSxDcz1udWxsfTtmdW5jdGlvbiBOcyhlKXtyZXR1cm4gNCZlLnZub2RlLnNoYXBlRmxhZ31sZXQgRXMsJHMsT3M9ITE7ZnVuY3Rpb24gUnMoZSx0LG4pe0YodCk/ZS5yZW5kZXI9dDpNKHQpJiYoZS5zZXR1cFN0YXRlPUx0KHQpKSxBcyhlLG4pfWZ1bmN0aW9uIEZzKGUpe0VzPWUsJHM9ZT0+e2UucmVuZGVyLl9yYyYmKGUud2l0aFByb3h5PW5ldyBQcm94eShlLmN0eCx0cikpfX1jb25zdCBQcz0oKT0+IUVzO2Z1bmN0aW9uIEFzKGUsdCxuKXtjb25zdCBvPWUudHlwZTtpZighZS5yZW5kZXIpe2lmKCF0JiZFcyYmIW8ucmVuZGVyKXtjb25zdCB0PW8udGVtcGxhdGU7aWYodCl7Y29uc3R7aXNDdXN0b21FbGVtZW50Om4sY29tcGlsZXJPcHRpb25zOnJ9PWUuYXBwQ29udGV4dC5jb25maWcse2RlbGltaXRlcnM6cyxjb21waWxlck9wdGlvbnM6aX09byxsPXcodyh7aXNDdXN0b21FbGVtZW50Om4sZGVsaW1pdGVyczpzfSxyKSxpKTtvLnJlbmRlcj1Fcyh0LGwpfX1lLnJlbmRlcj1vLnJlbmRlcnx8XywkcyYmJHMoZSl9a3MoZSkseGUoKSxvcihlKSxDZSgpLFRzKCl9ZnVuY3Rpb24gTXMoZSl7Y29uc3QgdD10PT57ZS5leHBvc2VkPXR8fHt9fTtsZXQgbjtyZXR1cm57Z2V0IGF0dHJzKCl7cmV0dXJuIG58fChuPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgUHJveHkoZS5hdHRycyx7Z2V0Oih0LG4pPT4od2UoZSwwLFwiJGF0dHJzXCIpLHRbbl0pfSl9KGUpKX0sc2xvdHM6ZS5zbG90cyxlbWl0OmUuZW1pdCxleHBvc2U6dH19ZnVuY3Rpb24gVnMoZSl7aWYoZS5leHBvc2VkKXJldHVybiBlLmV4cG9zZVByb3h5fHwoZS5leHBvc2VQcm94eT1uZXcgUHJveHkoTHQoVHQoZS5leHBvc2VkKSkse2dldDoodCxuKT0+biBpbiB0P3Rbbl06biBpbiBYbz9Yb1tuXShlKTp2b2lkIDB9KSl9Y29uc3QgSXM9Lyg/Ol58Wy1fXSkoXFx3KS9nO2Z1bmN0aW9uIEJzKGUsdD0hMCl7cmV0dXJuIEYoZSk/ZS5kaXNwbGF5TmFtZXx8ZS5uYW1lOmUubmFtZXx8dCYmZS5fX25hbWV9ZnVuY3Rpb24gTHMoZSx0LG49ITEpe2xldCBvPUJzKHQpO2lmKCFvJiZ0Ll9fZmlsZSl7Y29uc3QgZT10Ll9fZmlsZS5tYXRjaCgvKFteL1xcXFxdKylcXC5cXHcrJC8pO2UmJihvPWVbMV0pfWlmKCFvJiZlJiZlLnBhcmVudCl7Y29uc3Qgbj1lPT57Zm9yKGNvbnN0IG4gaW4gZSlpZihlW25dPT09dClyZXR1cm4gbn07bz1uKGUuY29tcG9uZW50c3x8ZS5wYXJlbnQudHlwZS5jb21wb25lbnRzKXx8bihlLmFwcENvbnRleHQuY29tcG9uZW50cyl9cmV0dXJuIG8/by5yZXBsYWNlKElzLChlPT5lLnRvVXBwZXJDYXNlKCkpKS5yZXBsYWNlKC9bLV9dL2csXCJcIik6bj9cIkFwcFwiOlwiQW5vbnltb3VzXCJ9Y29uc3QganM9KGUsdCk9PmZ1bmN0aW9uKGUsdCxuPSExKXtsZXQgbyxyO2NvbnN0IHM9RihlKTtyZXR1cm4gcz8obz1lLHI9Xyk6KG89ZS5nZXQscj1lLnNldCksbmV3IHp0KG8scixzfHwhcixuKX0oZSwwLE9zKTtmdW5jdGlvbiBVcygpe3JldHVybiBudWxsfWZ1bmN0aW9uIERzKCl7cmV0dXJuIG51bGx9ZnVuY3Rpb24gSHMoZSl7fWZ1bmN0aW9uIFdzKGUsdCl7cmV0dXJuIG51bGx9ZnVuY3Rpb24genMoKXtyZXR1cm4gR3MoKS5zbG90c31mdW5jdGlvbiBLcygpe3JldHVybiBHcygpLmF0dHJzfWZ1bmN0aW9uIEdzKCl7Y29uc3QgZT13cygpO3JldHVybiBlLnNldHVwQ29udGV4dHx8KGUuc2V0dXBDb250ZXh0PU1zKGUpKX1mdW5jdGlvbiBxcyhlLHQpe2NvbnN0IG49RShlKT9lLnJlZHVjZSgoKGUsdCk9PihlW3RdPXt9LGUpKSx7fSk6ZTtmb3IoY29uc3QgbyBpbiB0KXtjb25zdCBlPW5bb107ZT9FKGUpfHxGKGUpP25bb109e3R5cGU6ZSxkZWZhdWx0OnRbb119OmUuZGVmYXVsdD10W29dOm51bGw9PT1lJiYobltvXT17ZGVmYXVsdDp0W29dfSl9cmV0dXJuIG59ZnVuY3Rpb24gSnMoZSx0KXtjb25zdCBuPXt9O2Zvcihjb25zdCBvIGluIGUpdC5pbmNsdWRlcyhvKXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KG4sbyx7ZW51bWVyYWJsZTohMCxnZXQ6KCk9PmVbb119KTtyZXR1cm4gbn1mdW5jdGlvbiBZcyhlKXtjb25zdCB0PXdzKCk7bGV0IG49ZSgpO3JldHVybiBUcygpLFYobikmJihuPW4uY2F0Y2goKGU9Pnt0aHJvdyBrcyh0KSxlfSkpKSxbbiwoKT0+a3ModCldfWZ1bmN0aW9uIFpzKGUsdCxuKXtjb25zdCBvPWFyZ3VtZW50cy5sZW5ndGg7cmV0dXJuIDI9PT1vP00odCkmJiFFKHQpP29zKHQpP3VzKGUsbnVsbCxbdF0pOnVzKGUsdCk6dXMoZSxudWxsLHQpOihvPjM/bj1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMik6Mz09PW8mJm9zKG4pJiYobj1bbl0pLHVzKGUsdCxuKSl9Y29uc3QgUXM9U3ltYm9sKFwiXCIpLFhzPSgpPT57e2NvbnN0IGU9cW4oUXMpO3JldHVybiBlfHxHdChcIlNlcnZlciByZW5kZXJpbmcgY29udGV4dCBub3QgcHJvdmlkZWQuIE1ha2Ugc3VyZSB0byBvbmx5IGNhbGwgdXNlU1NSQ29udGV4dCgpIGNvbmRpdGlvbmFsbHkgaW4gdGhlIHNlcnZlciBidWlsZC5cIiksZX19O2Z1bmN0aW9uIGVpKCl7fWZ1bmN0aW9uIHRpKGUsdCxuLG8pe2NvbnN0IHI9bltvXTtpZihyJiZuaShyLGUpKXJldHVybiByO2NvbnN0IHM9dCgpO3JldHVybiBzLm1lbW89ZS5zbGljZSgpLG5bb109c31mdW5jdGlvbiBuaShlLHQpe2NvbnN0IG49ZS5tZW1vO2lmKG4ubGVuZ3RoIT10Lmxlbmd0aClyZXR1cm4hMTtmb3IobGV0IG89MDtvPG4ubGVuZ3RoO28rKylpZihZKG5bb10sdFtvXSkpcmV0dXJuITE7cmV0dXJuIFFyPjAmJkpyJiZKci5wdXNoKGUpLCEwfWNvbnN0IG9pPVwiMy4yLjM3XCIscmk9bnVsbCxzaT1udWxsLGlpPW51bGwsbGk9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50Om51bGwsY2k9bGkmJmxpLmNyZWF0ZUVsZW1lbnQoXCJ0ZW1wbGF0ZVwiKSxhaT17aW5zZXJ0OihlLHQsbik9Pnt0Lmluc2VydEJlZm9yZShlLG58fG51bGwpfSxyZW1vdmU6ZT0+e2NvbnN0IHQ9ZS5wYXJlbnROb2RlO3QmJnQucmVtb3ZlQ2hpbGQoZSl9LGNyZWF0ZUVsZW1lbnQ6KGUsdCxuLG8pPT57Y29uc3Qgcj10P2xpLmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsZSk6bGkuY3JlYXRlRWxlbWVudChlLG4/e2lzOm59OnZvaWQgMCk7cmV0dXJuXCJzZWxlY3RcIj09PWUmJm8mJm51bGwhPW8ubXVsdGlwbGUmJnIuc2V0QXR0cmlidXRlKFwibXVsdGlwbGVcIixvLm11bHRpcGxlKSxyfSxjcmVhdGVUZXh0OmU9PmxpLmNyZWF0ZVRleHROb2RlKGUpLGNyZWF0ZUNvbW1lbnQ6ZT0+bGkuY3JlYXRlQ29tbWVudChlKSxzZXRUZXh0OihlLHQpPT57ZS5ub2RlVmFsdWU9dH0sc2V0RWxlbWVudFRleHQ6KGUsdCk9PntlLnRleHRDb250ZW50PXR9LHBhcmVudE5vZGU6ZT0+ZS5wYXJlbnROb2RlLG5leHRTaWJsaW5nOmU9PmUubmV4dFNpYmxpbmcscXVlcnlTZWxlY3RvcjplPT5saS5xdWVyeVNlbGVjdG9yKGUpLHNldFNjb3BlSWQoZSx0KXtlLnNldEF0dHJpYnV0ZSh0LFwiXCIpfSxjbG9uZU5vZGUoZSl7Y29uc3QgdD1lLmNsb25lTm9kZSghMCk7cmV0dXJuXCJfdmFsdWVcImluIGUmJih0Ll92YWx1ZT1lLl92YWx1ZSksdH0saW5zZXJ0U3RhdGljQ29udGVudChlLHQsbixvLHIscyl7Y29uc3QgaT1uP24ucHJldmlvdXNTaWJsaW5nOnQubGFzdENoaWxkO2lmKHImJihyPT09c3x8ci5uZXh0U2libGluZykpZm9yKDt0Lmluc2VydEJlZm9yZShyLmNsb25lTm9kZSghMCksbiksciE9PXMmJihyPXIubmV4dFNpYmxpbmcpOyk7ZWxzZXtjaS5pbm5lckhUTUw9bz9gPHN2Zz4ke2V9PC9zdmc+YDplO2NvbnN0IHI9Y2kuY29udGVudDtpZihvKXtjb25zdCBlPXIuZmlyc3RDaGlsZDtmb3IoO2UuZmlyc3RDaGlsZDspci5hcHBlbmRDaGlsZChlLmZpcnN0Q2hpbGQpO3IucmVtb3ZlQ2hpbGQoZSl9dC5pbnNlcnRCZWZvcmUocixuKX1yZXR1cm5baT9pLm5leHRTaWJsaW5nOnQuZmlyc3RDaGlsZCxuP24ucHJldmlvdXNTaWJsaW5nOnQubGFzdENoaWxkXX19O2NvbnN0IHVpPS9cXHMqIWltcG9ydGFudCQvO2Z1bmN0aW9uIHBpKGUsdCxuKXtpZihFKG4pKW4uZm9yRWFjaCgobj0+cGkoZSx0LG4pKSk7ZWxzZSBpZihudWxsPT1uJiYobj1cIlwiKSx0LnN0YXJ0c1dpdGgoXCItLVwiKSllLnNldFByb3BlcnR5KHQsbik7ZWxzZXtjb25zdCBvPWZ1bmN0aW9uKGUsdCl7Y29uc3Qgbj1kaVt0XTtpZihuKXJldHVybiBuO2xldCBvPXoodCk7aWYoXCJmaWx0ZXJcIiE9PW8mJm8gaW4gZSlyZXR1cm4gZGlbdF09bztvPXEobyk7Zm9yKGxldCByPTA7cjxmaS5sZW5ndGg7cisrKXtjb25zdCBuPWZpW3JdK287aWYobiBpbiBlKXJldHVybiBkaVt0XT1ufXJldHVybiB0fShlLHQpO3VpLnRlc3Qobik/ZS5zZXRQcm9wZXJ0eShHKG8pLG4ucmVwbGFjZSh1aSxcIlwiKSxcImltcG9ydGFudFwiKTplW29dPW59fWNvbnN0IGZpPVtcIldlYmtpdFwiLFwiTW96XCIsXCJtc1wiXSxkaT17fTtjb25zdCBoaT1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIjtjb25zdFttaSxnaV09KCgpPT57bGV0IGU9RGF0ZS5ub3csdD0hMTtpZihcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93KXtEYXRlLm5vdygpPmRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiRXZlbnRcIikudGltZVN0YW1wJiYoZT1wZXJmb3JtYW5jZS5ub3cuYmluZChwZXJmb3JtYW5jZSkpO2NvbnN0IG49bmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS9pKTt0PSEhKG4mJk51bWJlcihuWzFdKTw9NTMpfXJldHVybltlLHRdfSkoKTtsZXQgdmk9MDtjb25zdCB5aT1Qcm9taXNlLnJlc29sdmUoKSxfaT0oKT0+e3ZpPTB9O2Z1bmN0aW9uIGJpKGUsdCxuLG8pe2UuYWRkRXZlbnRMaXN0ZW5lcih0LG4sbyl9ZnVuY3Rpb24gU2koZSx0LG4sbyxyPW51bGwpe2NvbnN0IHM9ZS5fdmVpfHwoZS5fdmVpPXt9KSxpPXNbdF07aWYobyYmaSlpLnZhbHVlPW87ZWxzZXtjb25zdFtuLGxdPWZ1bmN0aW9uKGUpe2xldCB0O2lmKHhpLnRlc3QoZSkpe2xldCBuO2Zvcih0PXt9O249ZS5tYXRjaCh4aSk7KWU9ZS5zbGljZSgwLGUubGVuZ3RoLW5bMF0ubGVuZ3RoKSx0W25bMF0udG9Mb3dlckNhc2UoKV09ITB9cmV0dXJuW0coZS5zbGljZSgyKSksdF19KHQpO2lmKG8pe2NvbnN0IGk9c1t0XT1mdW5jdGlvbihlLHQpe2NvbnN0IG49ZT0+e2NvbnN0IG89ZS50aW1lU3RhbXB8fG1pKCk7KGdpfHxvPj1uLmF0dGFjaGVkLTEpJiZadChmdW5jdGlvbihlLHQpe2lmKEUodCkpe2NvbnN0IG49ZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb247cmV0dXJuIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uPSgpPT57bi5jYWxsKGUpLGUuX3N0b3BwZWQ9ITB9LHQubWFwKChlPT50PT4hdC5fc3RvcHBlZCYmZSYmZSh0KSkpfXJldHVybiB0fShlLG4udmFsdWUpLHQsNSxbZV0pfTtyZXR1cm4gbi52YWx1ZT1lLG4uYXR0YWNoZWQ9KCgpPT52aXx8KHlpLnRoZW4oX2kpLHZpPW1pKCkpKSgpLG59KG8scik7YmkoZSxuLGksbCl9ZWxzZSBpJiYoIWZ1bmN0aW9uKGUsdCxuLG8pe2UucmVtb3ZlRXZlbnRMaXN0ZW5lcih0LG4sbyl9KGUsbixpLGwpLHNbdF09dm9pZCAwKX19Y29uc3QgeGk9Lyg/Ok9uY2V8UGFzc2l2ZXxDYXB0dXJlKSQvO2NvbnN0IENpPS9eb25bYS16XS87ZnVuY3Rpb24gd2koZSx0KXtjb25zdCBuPWhvKGUpO2NsYXNzIG8gZXh0ZW5kcyBOaXtjb25zdHJ1Y3RvcihlKXtzdXBlcihuLGUsdCl9fXJldHVybiBvLmRlZj1uLG99Y29uc3Qga2k9ZT0+d2koZSxUbCksVGk9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIEhUTUxFbGVtZW50P0hUTUxFbGVtZW50OmNsYXNze307Y2xhc3MgTmkgZXh0ZW5kcyBUaXtjb25zdHJ1Y3RvcihlLHQ9e30sbil7c3VwZXIoKSx0aGlzLl9kZWY9ZSx0aGlzLl9wcm9wcz10LHRoaXMuX2luc3RhbmNlPW51bGwsdGhpcy5fY29ubmVjdGVkPSExLHRoaXMuX3Jlc29sdmVkPSExLHRoaXMuX251bWJlclByb3BzPW51bGwsdGhpcy5zaGFkb3dSb290JiZuP24odGhpcy5fY3JlYXRlVk5vZGUoKSx0aGlzLnNoYWRvd1Jvb3QpOnRoaXMuYXR0YWNoU2hhZG93KHttb2RlOlwib3BlblwifSl9Y29ubmVjdGVkQ2FsbGJhY2soKXt0aGlzLl9jb25uZWN0ZWQ9ITAsdGhpcy5faW5zdGFuY2V8fHRoaXMuX3Jlc29sdmVEZWYoKX1kaXNjb25uZWN0ZWRDYWxsYmFjaygpe3RoaXMuX2Nvbm5lY3RlZD0hMSxkbigoKCk9Pnt0aGlzLl9jb25uZWN0ZWR8fChrbChudWxsLHRoaXMuc2hhZG93Um9vdCksdGhpcy5faW5zdGFuY2U9bnVsbCl9KSl9X3Jlc29sdmVEZWYoKXtpZih0aGlzLl9yZXNvbHZlZClyZXR1cm47dGhpcy5fcmVzb2x2ZWQ9ITA7Zm9yKGxldCBuPTA7bjx0aGlzLmF0dHJpYnV0ZXMubGVuZ3RoO24rKyl0aGlzLl9zZXRBdHRyKHRoaXMuYXR0cmlidXRlc1tuXS5uYW1lKTtuZXcgTXV0YXRpb25PYnNlcnZlcigoZT0+e2Zvcihjb25zdCB0IG9mIGUpdGhpcy5fc2V0QXR0cih0LmF0dHJpYnV0ZU5hbWUpfSkpLm9ic2VydmUodGhpcyx7YXR0cmlidXRlczohMH0pO2NvbnN0IGU9ZT0+e2NvbnN0e3Byb3BzOnQsc3R5bGVzOm59PWUsbz0hRSh0KSxyPXQ/bz9PYmplY3Qua2V5cyh0KTp0OltdO2xldCBzO2lmKG8pZm9yKGNvbnN0IGkgaW4gdGhpcy5fcHJvcHMpe2NvbnN0IGU9dFtpXTsoZT09PU51bWJlcnx8ZSYmZS50eXBlPT09TnVtYmVyKSYmKHRoaXMuX3Byb3BzW2ldPVgodGhpcy5fcHJvcHNbaV0pLChzfHwocz1PYmplY3QuY3JlYXRlKG51bGwpKSlbaV09ITApfXRoaXMuX251bWJlclByb3BzPXM7Zm9yKGNvbnN0IGkgb2YgT2JqZWN0LmtleXModGhpcykpXCJfXCIhPT1pWzBdJiZ0aGlzLl9zZXRQcm9wKGksdGhpc1tpXSwhMCwhMSk7Zm9yKGNvbnN0IGkgb2Ygci5tYXAoeikpT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsaSx7Z2V0KCl7cmV0dXJuIHRoaXMuX2dldFByb3AoaSl9LHNldChlKXt0aGlzLl9zZXRQcm9wKGksZSl9fSk7dGhpcy5fYXBwbHlTdHlsZXMobiksdGhpcy5fdXBkYXRlKCl9LHQ9dGhpcy5fZGVmLl9fYXN5bmNMb2FkZXI7dD90KCkudGhlbihlKTplKHRoaXMuX2RlZil9X3NldEF0dHIoZSl7bGV0IHQ9dGhpcy5nZXRBdHRyaWJ1dGUoZSk7dGhpcy5fbnVtYmVyUHJvcHMmJnRoaXMuX251bWJlclByb3BzW2VdJiYodD1YKHQpKSx0aGlzLl9zZXRQcm9wKHooZSksdCwhMSl9X2dldFByb3AoZSl7cmV0dXJuIHRoaXMuX3Byb3BzW2VdfV9zZXRQcm9wKGUsdCxuPSEwLG89ITApe3QhPT10aGlzLl9wcm9wc1tlXSYmKHRoaXMuX3Byb3BzW2VdPXQsbyYmdGhpcy5faW5zdGFuY2UmJnRoaXMuX3VwZGF0ZSgpLG4mJighMD09PXQ/dGhpcy5zZXRBdHRyaWJ1dGUoRyhlKSxcIlwiKTpcInN0cmluZ1wiPT10eXBlb2YgdHx8XCJudW1iZXJcIj09dHlwZW9mIHQ/dGhpcy5zZXRBdHRyaWJ1dGUoRyhlKSx0K1wiXCIpOnR8fHRoaXMucmVtb3ZlQXR0cmlidXRlKEcoZSkpKSl9X3VwZGF0ZSgpe2tsKHRoaXMuX2NyZWF0ZVZOb2RlKCksdGhpcy5zaGFkb3dSb290KX1fY3JlYXRlVk5vZGUoKXtjb25zdCBlPXVzKHRoaXMuX2RlZix3KHt9LHRoaXMuX3Byb3BzKSk7cmV0dXJuIHRoaXMuX2luc3RhbmNlfHwoZS5jZT1lPT57dGhpcy5faW5zdGFuY2U9ZSxlLmlzQ0U9ITAsZS5lbWl0PShlLC4uLnQpPT57dGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChlLHtkZXRhaWw6dH0pKX07bGV0IHQ9dGhpcztmb3IoO3Q9dCYmKHQucGFyZW50Tm9kZXx8dC5ob3N0KTspaWYodCBpbnN0YW5jZW9mIE5pKXtlLnBhcmVudD10Ll9pbnN0YW5jZTticmVha319KSxlfV9hcHBseVN0eWxlcyhlKXtlJiZlLmZvckVhY2goKGU9Pntjb25zdCB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTt0LnRleHRDb250ZW50PWUsdGhpcy5zaGFkb3dSb290LmFwcGVuZENoaWxkKHQpfSkpfX1mdW5jdGlvbiBFaShlPVwiJHN0eWxlXCIpe3tjb25zdCB0PXdzKCk7aWYoIXQpcmV0dXJuIHY7Y29uc3Qgbj10LnR5cGUuX19jc3NNb2R1bGVzO2lmKCFuKXJldHVybiB2O2NvbnN0IG89bltlXTtyZXR1cm4gb3x8dn19ZnVuY3Rpb24gJGkoZSl7Y29uc3QgdD13cygpO2lmKCF0KXJldHVybjtjb25zdCBuPSgpPT5PaSh0LnN1YlRyZWUsZSh0LnByb3h5KSk7WW4obiksT28oKCgpPT57Y29uc3QgZT1uZXcgTXV0YXRpb25PYnNlcnZlcihuKTtlLm9ic2VydmUodC5zdWJUcmVlLmVsLnBhcmVudE5vZGUse2NoaWxkTGlzdDohMH0pLEFvKCgoKT0+ZS5kaXNjb25uZWN0KCkpKX0pKX1mdW5jdGlvbiBPaShlLHQpe2lmKDEyOCZlLnNoYXBlRmxhZyl7Y29uc3Qgbj1lLnN1c3BlbnNlO2U9bi5hY3RpdmVCcmFuY2gsbi5wZW5kaW5nQnJhbmNoJiYhbi5pc0h5ZHJhdGluZyYmbi5lZmZlY3RzLnB1c2goKCgpPT57T2kobi5hY3RpdmVCcmFuY2gsdCl9KSl9Zm9yKDtlLmNvbXBvbmVudDspZT1lLmNvbXBvbmVudC5zdWJUcmVlO2lmKDEmZS5zaGFwZUZsYWcmJmUuZWwpUmkoZS5lbCx0KTtlbHNlIGlmKGUudHlwZT09PVdyKWUuY2hpbGRyZW4uZm9yRWFjaCgoZT0+T2koZSx0KSkpO2Vsc2UgaWYoZS50eXBlPT09R3Ipe2xldHtlbDpuLGFuY2hvcjpvfT1lO2Zvcig7biYmKFJpKG4sdCksbiE9PW8pOyluPW4ubmV4dFNpYmxpbmd9fWZ1bmN0aW9uIFJpKGUsdCl7aWYoMT09PWUubm9kZVR5cGUpe2NvbnN0IG49ZS5zdHlsZTtmb3IoY29uc3QgZSBpbiB0KW4uc2V0UHJvcGVydHkoYC0tJHtlfWAsdFtlXSl9fWNvbnN0IEZpPShlLHtzbG90czp0fSk9PlpzKGlvLElpKGUpLHQpO0ZpLmRpc3BsYXlOYW1lPVwiVHJhbnNpdGlvblwiO2NvbnN0IFBpPXtuYW1lOlN0cmluZyx0eXBlOlN0cmluZyxjc3M6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxkdXJhdGlvbjpbU3RyaW5nLE51bWJlcixPYmplY3RdLGVudGVyRnJvbUNsYXNzOlN0cmluZyxlbnRlckFjdGl2ZUNsYXNzOlN0cmluZyxlbnRlclRvQ2xhc3M6U3RyaW5nLGFwcGVhckZyb21DbGFzczpTdHJpbmcsYXBwZWFyQWN0aXZlQ2xhc3M6U3RyaW5nLGFwcGVhclRvQ2xhc3M6U3RyaW5nLGxlYXZlRnJvbUNsYXNzOlN0cmluZyxsZWF2ZUFjdGl2ZUNsYXNzOlN0cmluZyxsZWF2ZVRvQ2xhc3M6U3RyaW5nfSxBaT1GaS5wcm9wcz13KHt9LGlvLnByb3BzLFBpKSxNaT0oZSx0PVtdKT0+e0UoZSk/ZS5mb3JFYWNoKChlPT5lKC4uLnQpKSk6ZSYmZSguLi50KX0sVmk9ZT0+ISFlJiYoRShlKT9lLnNvbWUoKGU9PmUubGVuZ3RoPjEpKTplLmxlbmd0aD4xKTtmdW5jdGlvbiBJaShlKXtjb25zdCB0PXt9O2Zvcihjb25zdCB3IGluIGUpdyBpbiBQaXx8KHRbd109ZVt3XSk7aWYoITE9PT1lLmNzcylyZXR1cm4gdDtjb25zdHtuYW1lOm49XCJ2XCIsdHlwZTpvLGR1cmF0aW9uOnIsZW50ZXJGcm9tQ2xhc3M6cz1gJHtufS1lbnRlci1mcm9tYCxlbnRlckFjdGl2ZUNsYXNzOmk9YCR7bn0tZW50ZXItYWN0aXZlYCxlbnRlclRvQ2xhc3M6bD1gJHtufS1lbnRlci10b2AsYXBwZWFyRnJvbUNsYXNzOmM9cyxhcHBlYXJBY3RpdmVDbGFzczphPWksYXBwZWFyVG9DbGFzczp1PWwsbGVhdmVGcm9tQ2xhc3M6cD1gJHtufS1sZWF2ZS1mcm9tYCxsZWF2ZUFjdGl2ZUNsYXNzOmY9YCR7bn0tbGVhdmUtYWN0aXZlYCxsZWF2ZVRvQ2xhc3M6ZD1gJHtufS1sZWF2ZS10b2B9PWUsaD1mdW5jdGlvbihlKXtpZihudWxsPT1lKXJldHVybiBudWxsO2lmKE0oZSkpcmV0dXJuW0JpKGUuZW50ZXIpLEJpKGUubGVhdmUpXTt7Y29uc3QgdD1CaShlKTtyZXR1cm5bdCx0XX19KHIpLG09aCYmaFswXSxnPWgmJmhbMV0se29uQmVmb3JlRW50ZXI6dixvbkVudGVyOnksb25FbnRlckNhbmNlbGxlZDpfLG9uTGVhdmU6YixvbkxlYXZlQ2FuY2VsbGVkOlMsb25CZWZvcmVBcHBlYXI6eD12LG9uQXBwZWFyOkM9eSxvbkFwcGVhckNhbmNlbGxlZDprPV99PXQsVD0oZSx0LG4pPT57amkoZSx0P3U6bCksamkoZSx0P2E6aSksbiYmbigpfSxOPShlLHQpPT57ZS5faXNMZWF2aW5nPSExLGppKGUscCksamkoZSxkKSxqaShlLGYpLHQmJnQoKX0sRT1lPT4odCxuKT0+e2NvbnN0IHI9ZT9DOnksaT0oKT0+VCh0LGUsbik7TWkocixbdCxpXSksVWkoKCgpPT57amkodCxlP2M6cyksTGkodCxlP3U6bCksVmkocil8fEhpKHQsbyxtLGkpfSkpfTtyZXR1cm4gdyh0LHtvbkJlZm9yZUVudGVyKGUpe01pKHYsW2VdKSxMaShlLHMpLExpKGUsaSl9LG9uQmVmb3JlQXBwZWFyKGUpe01pKHgsW2VdKSxMaShlLGMpLExpKGUsYSl9LG9uRW50ZXI6RSghMSksb25BcHBlYXI6RSghMCksb25MZWF2ZShlLHQpe2UuX2lzTGVhdmluZz0hMDtjb25zdCBuPSgpPT5OKGUsdCk7TGkoZSxwKSxHaSgpLExpKGUsZiksVWkoKCgpPT57ZS5faXNMZWF2aW5nJiYoamkoZSxwKSxMaShlLGQpLFZpKGIpfHxIaShlLG8sZyxuKSl9KSksTWkoYixbZSxuXSl9LG9uRW50ZXJDYW5jZWxsZWQoZSl7VChlLCExKSxNaShfLFtlXSl9LG9uQXBwZWFyQ2FuY2VsbGVkKGUpe1QoZSwhMCksTWkoayxbZV0pfSxvbkxlYXZlQ2FuY2VsbGVkKGUpe04oZSksTWkoUyxbZV0pfX0pfWZ1bmN0aW9uIEJpKGUpe3JldHVybiBYKGUpfWZ1bmN0aW9uIExpKGUsdCl7dC5zcGxpdCgvXFxzKy8pLmZvckVhY2goKHQ9PnQmJmUuY2xhc3NMaXN0LmFkZCh0KSkpLChlLl92dGN8fChlLl92dGM9bmV3IFNldCkpLmFkZCh0KX1mdW5jdGlvbiBqaShlLHQpe3Quc3BsaXQoL1xccysvKS5mb3JFYWNoKCh0PT50JiZlLmNsYXNzTGlzdC5yZW1vdmUodCkpKTtjb25zdHtfdnRjOm59PWU7biYmKG4uZGVsZXRlKHQpLG4uc2l6ZXx8KGUuX3Z0Yz12b2lkIDApKX1mdW5jdGlvbiBVaShlKXtyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCgpPT57cmVxdWVzdEFuaW1hdGlvbkZyYW1lKGUpfSkpfWxldCBEaT0wO2Z1bmN0aW9uIEhpKGUsdCxuLG8pe2NvbnN0IHI9ZS5fZW5kSWQ9KytEaSxzPSgpPT57cj09PWUuX2VuZElkJiZvKCl9O2lmKG4pcmV0dXJuIHNldFRpbWVvdXQocyxuKTtjb25zdHt0eXBlOmksdGltZW91dDpsLHByb3BDb3VudDpjfT1XaShlLHQpO2lmKCFpKXJldHVybiBvKCk7Y29uc3QgYT1pK1wiZW5kXCI7bGV0IHU9MDtjb25zdCBwPSgpPT57ZS5yZW1vdmVFdmVudExpc3RlbmVyKGEsZikscygpfSxmPXQ9Pnt0LnRhcmdldD09PWUmJisrdT49YyYmcCgpfTtzZXRUaW1lb3V0KCgoKT0+e3U8YyYmcCgpfSksbCsxKSxlLmFkZEV2ZW50TGlzdGVuZXIoYSxmKX1mdW5jdGlvbiBXaShlLHQpe2NvbnN0IG49d2luZG93LmdldENvbXB1dGVkU3R5bGUoZSksbz1lPT4obltlXXx8XCJcIikuc3BsaXQoXCIsIFwiKSxyPW8oXCJ0cmFuc2l0aW9uRGVsYXlcIikscz1vKFwidHJhbnNpdGlvbkR1cmF0aW9uXCIpLGk9emkocixzKSxsPW8oXCJhbmltYXRpb25EZWxheVwiKSxjPW8oXCJhbmltYXRpb25EdXJhdGlvblwiKSxhPXppKGwsYyk7bGV0IHU9bnVsbCxwPTAsZj0wO1widHJhbnNpdGlvblwiPT09dD9pPjAmJih1PVwidHJhbnNpdGlvblwiLHA9aSxmPXMubGVuZ3RoKTpcImFuaW1hdGlvblwiPT09dD9hPjAmJih1PVwiYW5pbWF0aW9uXCIscD1hLGY9Yy5sZW5ndGgpOihwPU1hdGgubWF4KGksYSksdT1wPjA/aT5hP1widHJhbnNpdGlvblwiOlwiYW5pbWF0aW9uXCI6bnVsbCxmPXU/XCJ0cmFuc2l0aW9uXCI9PT11P3MubGVuZ3RoOmMubGVuZ3RoOjApO3JldHVybnt0eXBlOnUsdGltZW91dDpwLHByb3BDb3VudDpmLGhhc1RyYW5zZm9ybTpcInRyYW5zaXRpb25cIj09PXUmJi9cXGIodHJhbnNmb3JtfGFsbCkoLHwkKS8udGVzdChuLnRyYW5zaXRpb25Qcm9wZXJ0eSl9fWZ1bmN0aW9uIHppKGUsdCl7Zm9yKDtlLmxlbmd0aDx0Lmxlbmd0aDspZT1lLmNvbmNhdChlKTtyZXR1cm4gTWF0aC5tYXgoLi4udC5tYXAoKCh0LG4pPT5LaSh0KStLaShlW25dKSkpKX1mdW5jdGlvbiBLaShlKXtyZXR1cm4gMWUzKk51bWJlcihlLnNsaWNlKDAsLTEpLnJlcGxhY2UoXCIsXCIsXCIuXCIpKX1mdW5jdGlvbiBHaSgpe3JldHVybiBkb2N1bWVudC5ib2R5Lm9mZnNldEhlaWdodH1jb25zdCBxaT1uZXcgV2Vha01hcCxKaT1uZXcgV2Vha01hcCxZaT17bmFtZTpcIlRyYW5zaXRpb25Hcm91cFwiLHByb3BzOncoe30sQWkse3RhZzpTdHJpbmcsbW92ZUNsYXNzOlN0cmluZ30pLHNldHVwKGUse3Nsb3RzOnR9KXtjb25zdCBuPXdzKCksbz1ybygpO2xldCByLHM7cmV0dXJuIEZvKCgoKT0+e2lmKCFyLmxlbmd0aClyZXR1cm47Y29uc3QgdD1lLm1vdmVDbGFzc3x8YCR7ZS5uYW1lfHxcInZcIn0tbW92ZWA7aWYoIWZ1bmN0aW9uKGUsdCxuKXtjb25zdCBvPWUuY2xvbmVOb2RlKCk7ZS5fdnRjJiZlLl92dGMuZm9yRWFjaCgoZT0+e2Uuc3BsaXQoL1xccysvKS5mb3JFYWNoKChlPT5lJiZvLmNsYXNzTGlzdC5yZW1vdmUoZSkpKX0pKTtuLnNwbGl0KC9cXHMrLykuZm9yRWFjaCgoZT0+ZSYmby5jbGFzc0xpc3QuYWRkKGUpKSksby5zdHlsZS5kaXNwbGF5PVwibm9uZVwiO2NvbnN0IHI9MT09PXQubm9kZVR5cGU/dDp0LnBhcmVudE5vZGU7ci5hcHBlbmRDaGlsZChvKTtjb25zdHtoYXNUcmFuc2Zvcm06c309V2kobyk7cmV0dXJuIHIucmVtb3ZlQ2hpbGQobyksc30oclswXS5lbCxuLnZub2RlLmVsLHQpKXJldHVybjtyLmZvckVhY2goWmkpLHIuZm9yRWFjaChRaSk7Y29uc3Qgbz1yLmZpbHRlcihYaSk7R2koKSxvLmZvckVhY2goKGU9Pntjb25zdCBuPWUuZWwsbz1uLnN0eWxlO0xpKG4sdCksby50cmFuc2Zvcm09by53ZWJraXRUcmFuc2Zvcm09by50cmFuc2l0aW9uRHVyYXRpb249XCJcIjtjb25zdCByPW4uX21vdmVDYj1lPT57ZSYmZS50YXJnZXQhPT1ufHxlJiYhL3RyYW5zZm9ybSQvLnRlc3QoZS5wcm9wZXJ0eU5hbWUpfHwobi5yZW1vdmVFdmVudExpc3RlbmVyKFwidHJhbnNpdGlvbmVuZFwiLHIpLG4uX21vdmVDYj1udWxsLGppKG4sdCkpfTtuLmFkZEV2ZW50TGlzdGVuZXIoXCJ0cmFuc2l0aW9uZW5kXCIscil9KSl9KSksKCk9Pntjb25zdCBpPWt0KGUpLGw9SWkoaSk7bGV0IGM9aS50YWd8fFdyO3I9cyxzPXQuZGVmYXVsdD9mbyh0LmRlZmF1bHQoKSk6W107Zm9yKGxldCBlPTA7ZTxzLmxlbmd0aDtlKyspe2NvbnN0IHQ9c1tlXTtudWxsIT10LmtleSYmcG8odCxjbyh0LGwsbyxuKSl9aWYocilmb3IobGV0IGU9MDtlPHIubGVuZ3RoO2UrKyl7Y29uc3QgdD1yW2VdO3BvKHQsY28odCxsLG8sbikpLHFpLnNldCh0LHQuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpfXJldHVybiB1cyhjLG51bGwscyl9fX07ZnVuY3Rpb24gWmkoZSl7Y29uc3QgdD1lLmVsO3QuX21vdmVDYiYmdC5fbW92ZUNiKCksdC5fZW50ZXJDYiYmdC5fZW50ZXJDYigpfWZ1bmN0aW9uIFFpKGUpe0ppLnNldChlLGUuZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpfWZ1bmN0aW9uIFhpKGUpe2NvbnN0IHQ9cWkuZ2V0KGUpLG49SmkuZ2V0KGUpLG89dC5sZWZ0LW4ubGVmdCxyPXQudG9wLW4udG9wO2lmKG98fHIpe2NvbnN0IHQ9ZS5lbC5zdHlsZTtyZXR1cm4gdC50cmFuc2Zvcm09dC53ZWJraXRUcmFuc2Zvcm09YHRyYW5zbGF0ZSgke299cHgsJHtyfXB4KWAsdC50cmFuc2l0aW9uRHVyYXRpb249XCIwc1wiLGV9fWNvbnN0IGVsPWU9Pntjb25zdCB0PWUucHJvcHNbXCJvblVwZGF0ZTptb2RlbFZhbHVlXCJdfHwhMTtyZXR1cm4gRSh0KT9lPT5aKHQsZSk6dH07ZnVuY3Rpb24gdGwoZSl7ZS50YXJnZXQuY29tcG9zaW5nPSEwfWZ1bmN0aW9uIG5sKGUpe2NvbnN0IHQ9ZS50YXJnZXQ7dC5jb21wb3NpbmcmJih0LmNvbXBvc2luZz0hMSx0LmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KFwiaW5wdXRcIikpKX1jb25zdCBvbD17Y3JlYXRlZChlLHttb2RpZmllcnM6e2xhenk6dCx0cmltOm4sbnVtYmVyOm99fSxyKXtlLl9hc3NpZ249ZWwocik7Y29uc3Qgcz1vfHxyLnByb3BzJiZcIm51bWJlclwiPT09ci5wcm9wcy50eXBlO2JpKGUsdD9cImNoYW5nZVwiOlwiaW5wdXRcIiwodD0+e2lmKHQudGFyZ2V0LmNvbXBvc2luZylyZXR1cm47bGV0IG89ZS52YWx1ZTtuJiYobz1vLnRyaW0oKSkscyYmKG89WChvKSksZS5fYXNzaWduKG8pfSkpLG4mJmJpKGUsXCJjaGFuZ2VcIiwoKCk9PntlLnZhbHVlPWUudmFsdWUudHJpbSgpfSkpLHR8fChiaShlLFwiY29tcG9zaXRpb25zdGFydFwiLHRsKSxiaShlLFwiY29tcG9zaXRpb25lbmRcIixubCksYmkoZSxcImNoYW5nZVwiLG5sKSl9LG1vdW50ZWQoZSx7dmFsdWU6dH0pe2UudmFsdWU9bnVsbD09dD9cIlwiOnR9LGJlZm9yZVVwZGF0ZShlLHt2YWx1ZTp0LG1vZGlmaWVyczp7bGF6eTpuLHRyaW06byxudW1iZXI6cn19LHMpe2lmKGUuX2Fzc2lnbj1lbChzKSxlLmNvbXBvc2luZylyZXR1cm47aWYoZG9jdW1lbnQuYWN0aXZlRWxlbWVudD09PWUmJlwicmFuZ2VcIiE9PWUudHlwZSl7aWYobilyZXR1cm47aWYobyYmZS52YWx1ZS50cmltKCk9PT10KXJldHVybjtpZigocnx8XCJudW1iZXJcIj09PWUudHlwZSkmJlgoZS52YWx1ZSk9PT10KXJldHVybn1jb25zdCBpPW51bGw9PXQ/XCJcIjp0O2UudmFsdWUhPT1pJiYoZS52YWx1ZT1pKX19LHJsPXtkZWVwOiEwLGNyZWF0ZWQoZSx0LG4pe2UuX2Fzc2lnbj1lbChuKSxiaShlLFwiY2hhbmdlXCIsKCgpPT57Y29uc3QgdD1lLl9tb2RlbFZhbHVlLG49YWwoZSksbz1lLmNoZWNrZWQscj1lLl9hc3NpZ247aWYoRSh0KSl7Y29uc3QgZT1oKHQsbikscz0tMSE9PWU7aWYobyYmIXMpcih0LmNvbmNhdChuKSk7ZWxzZSBpZighbyYmcyl7Y29uc3Qgbj1bLi4udF07bi5zcGxpY2UoZSwxKSxyKG4pfX1lbHNlIGlmKE8odCkpe2NvbnN0IGU9bmV3IFNldCh0KTtvP2UuYWRkKG4pOmUuZGVsZXRlKG4pLHIoZSl9ZWxzZSByKHVsKGUsbykpfSkpfSxtb3VudGVkOnNsLGJlZm9yZVVwZGF0ZShlLHQsbil7ZS5fYXNzaWduPWVsKG4pLHNsKGUsdCxuKX19O2Z1bmN0aW9uIHNsKGUse3ZhbHVlOnQsb2xkVmFsdWU6bn0sbyl7ZS5fbW9kZWxWYWx1ZT10LEUodCk/ZS5jaGVja2VkPWgodCxvLnByb3BzLnZhbHVlKT4tMTpPKHQpP2UuY2hlY2tlZD10LmhhcyhvLnByb3BzLnZhbHVlKTp0IT09biYmKGUuY2hlY2tlZD1kKHQsdWwoZSwhMCkpKX1jb25zdCBpbD17Y3JlYXRlZChlLHt2YWx1ZTp0fSxuKXtlLmNoZWNrZWQ9ZCh0LG4ucHJvcHMudmFsdWUpLGUuX2Fzc2lnbj1lbChuKSxiaShlLFwiY2hhbmdlXCIsKCgpPT57ZS5fYXNzaWduKGFsKGUpKX0pKX0sYmVmb3JlVXBkYXRlKGUse3ZhbHVlOnQsb2xkVmFsdWU6bn0sbyl7ZS5fYXNzaWduPWVsKG8pLHQhPT1uJiYoZS5jaGVja2VkPWQodCxvLnByb3BzLnZhbHVlKSl9fSxsbD17ZGVlcDohMCxjcmVhdGVkKGUse3ZhbHVlOnQsbW9kaWZpZXJzOntudW1iZXI6bn19LG8pe2NvbnN0IHI9Tyh0KTtiaShlLFwiY2hhbmdlXCIsKCgpPT57Y29uc3QgdD1BcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwoZS5vcHRpb25zLChlPT5lLnNlbGVjdGVkKSkubWFwKChlPT5uP1goYWwoZSkpOmFsKGUpKSk7ZS5fYXNzaWduKGUubXVsdGlwbGU/cj9uZXcgU2V0KHQpOnQ6dFswXSl9KSksZS5fYXNzaWduPWVsKG8pfSxtb3VudGVkKGUse3ZhbHVlOnR9KXtjbChlLHQpfSxiZWZvcmVVcGRhdGUoZSx0LG4pe2UuX2Fzc2lnbj1lbChuKX0sdXBkYXRlZChlLHt2YWx1ZTp0fSl7Y2woZSx0KX19O2Z1bmN0aW9uIGNsKGUsdCl7Y29uc3Qgbj1lLm11bHRpcGxlO2lmKCFufHxFKHQpfHxPKHQpKXtmb3IobGV0IG89MCxyPWUub3B0aW9ucy5sZW5ndGg7bzxyO28rKyl7Y29uc3Qgcj1lLm9wdGlvbnNbb10scz1hbChyKTtpZihuKXIuc2VsZWN0ZWQ9RSh0KT9oKHQscyk+LTE6dC5oYXMocyk7ZWxzZSBpZihkKGFsKHIpLHQpKXJldHVybiB2b2lkKGUuc2VsZWN0ZWRJbmRleCE9PW8mJihlLnNlbGVjdGVkSW5kZXg9bykpfW58fC0xPT09ZS5zZWxlY3RlZEluZGV4fHwoZS5zZWxlY3RlZEluZGV4PS0xKX19ZnVuY3Rpb24gYWwoZSl7cmV0dXJuXCJfdmFsdWVcImluIGU/ZS5fdmFsdWU6ZS52YWx1ZX1mdW5jdGlvbiB1bChlLHQpe2NvbnN0IG49dD9cIl90cnVlVmFsdWVcIjpcIl9mYWxzZVZhbHVlXCI7cmV0dXJuIG4gaW4gZT9lW25dOnR9Y29uc3QgcGw9e2NyZWF0ZWQoZSx0LG4pe2ZsKGUsdCxuLG51bGwsXCJjcmVhdGVkXCIpfSxtb3VudGVkKGUsdCxuKXtmbChlLHQsbixudWxsLFwibW91bnRlZFwiKX0sYmVmb3JlVXBkYXRlKGUsdCxuLG8pe2ZsKGUsdCxuLG8sXCJiZWZvcmVVcGRhdGVcIil9LHVwZGF0ZWQoZSx0LG4sbyl7ZmwoZSx0LG4sbyxcInVwZGF0ZWRcIil9fTtmdW5jdGlvbiBmbChlLHQsbixvLHIpe2NvbnN0IHM9ZnVuY3Rpb24oZSx0KXtzd2l0Y2goZSl7Y2FzZVwiU0VMRUNUXCI6cmV0dXJuIGxsO2Nhc2VcIlRFWFRBUkVBXCI6cmV0dXJuIG9sO2RlZmF1bHQ6c3dpdGNoKHQpe2Nhc2VcImNoZWNrYm94XCI6cmV0dXJuIHJsO2Nhc2VcInJhZGlvXCI6cmV0dXJuIGlsO2RlZmF1bHQ6cmV0dXJuIG9sfX19KGUudGFnTmFtZSxuLnByb3BzJiZuLnByb3BzLnR5cGUpW3JdO3MmJnMoZSx0LG4sbyl9Y29uc3QgZGw9W1wiY3RybFwiLFwic2hpZnRcIixcImFsdFwiLFwibWV0YVwiXSxobD17c3RvcDplPT5lLnN0b3BQcm9wYWdhdGlvbigpLHByZXZlbnQ6ZT0+ZS5wcmV2ZW50RGVmYXVsdCgpLHNlbGY6ZT0+ZS50YXJnZXQhPT1lLmN1cnJlbnRUYXJnZXQsY3RybDplPT4hZS5jdHJsS2V5LHNoaWZ0OmU9PiFlLnNoaWZ0S2V5LGFsdDplPT4hZS5hbHRLZXksbWV0YTplPT4hZS5tZXRhS2V5LGxlZnQ6ZT0+XCJidXR0b25cImluIGUmJjAhPT1lLmJ1dHRvbixtaWRkbGU6ZT0+XCJidXR0b25cImluIGUmJjEhPT1lLmJ1dHRvbixyaWdodDplPT5cImJ1dHRvblwiaW4gZSYmMiE9PWUuYnV0dG9uLGV4YWN0OihlLHQpPT5kbC5zb21lKChuPT5lW2Ake259S2V5YF0mJiF0LmluY2x1ZGVzKG4pKSl9LG1sPShlLHQpPT4obiwuLi5vKT0+e2ZvcihsZXQgZT0wO2U8dC5sZW5ndGg7ZSsrKXtjb25zdCBvPWhsW3RbZV1dO2lmKG8mJm8obix0KSlyZXR1cm59cmV0dXJuIGUobiwuLi5vKX0sZ2w9e2VzYzpcImVzY2FwZVwiLHNwYWNlOlwiIFwiLHVwOlwiYXJyb3ctdXBcIixsZWZ0OlwiYXJyb3ctbGVmdFwiLHJpZ2h0OlwiYXJyb3ctcmlnaHRcIixkb3duOlwiYXJyb3ctZG93blwiLGRlbGV0ZTpcImJhY2tzcGFjZVwifSx2bD0oZSx0KT0+bj0+e2lmKCEoXCJrZXlcImluIG4pKXJldHVybjtjb25zdCBvPUcobi5rZXkpO3JldHVybiB0LnNvbWUoKGU9PmU9PT1vfHxnbFtlXT09PW8pKT9lKG4pOnZvaWQgMH0seWw9e2JlZm9yZU1vdW50KGUse3ZhbHVlOnR9LHt0cmFuc2l0aW9uOm59KXtlLl92b2Q9XCJub25lXCI9PT1lLnN0eWxlLmRpc3BsYXk/XCJcIjplLnN0eWxlLmRpc3BsYXksbiYmdD9uLmJlZm9yZUVudGVyKGUpOl9sKGUsdCl9LG1vdW50ZWQoZSx7dmFsdWU6dH0se3RyYW5zaXRpb246bn0pe24mJnQmJm4uZW50ZXIoZSl9LHVwZGF0ZWQoZSx7dmFsdWU6dCxvbGRWYWx1ZTpufSx7dHJhbnNpdGlvbjpvfSl7IXQhPSFuJiYobz90PyhvLmJlZm9yZUVudGVyKGUpLF9sKGUsITApLG8uZW50ZXIoZSkpOm8ubGVhdmUoZSwoKCk9PntfbChlLCExKX0pKTpfbChlLHQpKX0sYmVmb3JlVW5tb3VudChlLHt2YWx1ZTp0fSl7X2woZSx0KX19O2Z1bmN0aW9uIF9sKGUsdCl7ZS5zdHlsZS5kaXNwbGF5PXQ/ZS5fdm9kOlwibm9uZVwifWNvbnN0IGJsPXcoe3BhdGNoUHJvcDooZSx0LHIscyxpPSExLGwsYyxhLHUpPT57XCJjbGFzc1wiPT09dD9mdW5jdGlvbihlLHQsbil7Y29uc3Qgbz1lLl92dGM7byYmKHQ9KHQ/W3QsLi4ub106Wy4uLm9dKS5qb2luKFwiIFwiKSksbnVsbD09dD9lLnJlbW92ZUF0dHJpYnV0ZShcImNsYXNzXCIpOm4/ZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLHQpOmUuY2xhc3NOYW1lPXR9KGUscyxpKTpcInN0eWxlXCI9PT10P2Z1bmN0aW9uKGUsdCxuKXtjb25zdCBvPWUuc3R5bGUscj1QKG4pO2lmKG4mJiFyKXtmb3IoY29uc3QgZSBpbiBuKXBpKG8sZSxuW2VdKTtpZih0JiYhUCh0KSlmb3IoY29uc3QgZSBpbiB0KW51bGw9PW5bZV0mJnBpKG8sZSxcIlwiKX1lbHNle2NvbnN0IHM9by5kaXNwbGF5O3I/dCE9PW4mJihvLmNzc1RleHQ9bik6dCYmZS5yZW1vdmVBdHRyaWJ1dGUoXCJzdHlsZVwiKSxcIl92b2RcImluIGUmJihvLmRpc3BsYXk9cyl9fShlLHIscyk6eCh0KT9DKHQpfHxTaShlLHQsMCxzLGMpOihcIi5cIj09PXRbMF0/KHQ9dC5zbGljZSgxKSwxKTpcIl5cIj09PXRbMF0/KHQ9dC5zbGljZSgxKSwwKTpmdW5jdGlvbihlLHQsbixvKXtpZihvKXJldHVyblwiaW5uZXJIVE1MXCI9PT10fHxcInRleHRDb250ZW50XCI9PT10fHwhISh0IGluIGUmJkNpLnRlc3QodCkmJkYobikpO2lmKFwic3BlbGxjaGVja1wiPT09dHx8XCJkcmFnZ2FibGVcIj09PXR8fFwidHJhbnNsYXRlXCI9PT10KXJldHVybiExO2lmKFwiZm9ybVwiPT09dClyZXR1cm4hMTtpZihcImxpc3RcIj09PXQmJlwiSU5QVVRcIj09PWUudGFnTmFtZSlyZXR1cm4hMTtpZihcInR5cGVcIj09PXQmJlwiVEVYVEFSRUFcIj09PWUudGFnTmFtZSlyZXR1cm4hMTtpZihDaS50ZXN0KHQpJiZQKG4pKXJldHVybiExO3JldHVybiB0IGluIGV9KGUsdCxzLGkpKT9mdW5jdGlvbihlLHQsbixyLHMsaSxsKXtpZihcImlubmVySFRNTFwiPT09dHx8XCJ0ZXh0Q29udGVudFwiPT09dClyZXR1cm4gciYmbChyLHMsaSksdm9pZChlW3RdPW51bGw9PW4/XCJcIjpuKTtpZihcInZhbHVlXCI9PT10JiZcIlBST0dSRVNTXCIhPT1lLnRhZ05hbWUmJiFlLnRhZ05hbWUuaW5jbHVkZXMoXCItXCIpKXtlLl92YWx1ZT1uO2NvbnN0IG89bnVsbD09bj9cIlwiOm47cmV0dXJuIGUudmFsdWU9PT1vJiZcIk9QVElPTlwiIT09ZS50YWdOYW1lfHwoZS52YWx1ZT1vKSx2b2lkKG51bGw9PW4mJmUucmVtb3ZlQXR0cmlidXRlKHQpKX1sZXQgYz0hMTtpZihcIlwiPT09bnx8bnVsbD09bil7Y29uc3Qgcj10eXBlb2YgZVt0XTtcImJvb2xlYW5cIj09PXI/bj1vKG4pOm51bGw9PW4mJlwic3RyaW5nXCI9PT1yPyhuPVwiXCIsYz0hMCk6XCJudW1iZXJcIj09PXImJihuPTAsYz0hMCl9dHJ5e2VbdF09bn1jYXRjaChhKXt9YyYmZS5yZW1vdmVBdHRyaWJ1dGUodCl9KGUsdCxzLGwsYyxhLHUpOihcInRydWUtdmFsdWVcIj09PXQ/ZS5fdHJ1ZVZhbHVlPXM6XCJmYWxzZS12YWx1ZVwiPT09dCYmKGUuX2ZhbHNlVmFsdWU9cyksZnVuY3Rpb24oZSx0LHIscyxpKXtpZihzJiZ0LnN0YXJ0c1dpdGgoXCJ4bGluazpcIikpbnVsbD09cj9lLnJlbW92ZUF0dHJpYnV0ZU5TKGhpLHQuc2xpY2UoNix0Lmxlbmd0aCkpOmUuc2V0QXR0cmlidXRlTlMoaGksdCxyKTtlbHNle2NvbnN0IHM9bih0KTtudWxsPT1yfHxzJiYhbyhyKT9lLnJlbW92ZUF0dHJpYnV0ZSh0KTplLnNldEF0dHJpYnV0ZSh0LHM/XCJcIjpyKX19KGUsdCxzLGkpKX19LGFpKTtsZXQgU2wseGw9ITE7ZnVuY3Rpb24gQ2woKXtyZXR1cm4gU2x8fChTbD1BcihibCkpfWZ1bmN0aW9uIHdsKCl7cmV0dXJuIFNsPXhsP1NsOk1yKGJsKSx4bD0hMCxTbH1jb25zdCBrbD0oLi4uZSk9PntDbCgpLnJlbmRlciguLi5lKX0sVGw9KC4uLmUpPT57d2woKS5oeWRyYXRlKC4uLmUpfSxObD0oLi4uZSk9Pntjb25zdCB0PUNsKCkuY3JlYXRlQXBwKC4uLmUpLHttb3VudDpufT10O3JldHVybiB0Lm1vdW50PWU9Pntjb25zdCBvPSRsKGUpO2lmKCFvKXJldHVybjtjb25zdCByPXQuX2NvbXBvbmVudDtGKHIpfHxyLnJlbmRlcnx8ci50ZW1wbGF0ZXx8KHIudGVtcGxhdGU9by5pbm5lckhUTUwpLG8uaW5uZXJIVE1MPVwiXCI7Y29uc3Qgcz1uKG8sITEsbyBpbnN0YW5jZW9mIFNWR0VsZW1lbnQpO3JldHVybiBvIGluc3RhbmNlb2YgRWxlbWVudCYmKG8ucmVtb3ZlQXR0cmlidXRlKFwidi1jbG9ha1wiKSxvLnNldEF0dHJpYnV0ZShcImRhdGEtdi1hcHBcIixcIlwiKSksc30sdH0sRWw9KC4uLmUpPT57Y29uc3QgdD13bCgpLmNyZWF0ZUFwcCguLi5lKSx7bW91bnQ6bn09dDtyZXR1cm4gdC5tb3VudD1lPT57Y29uc3QgdD0kbChlKTtpZih0KXJldHVybiBuKHQsITAsdCBpbnN0YW5jZW9mIFNWR0VsZW1lbnQpfSx0fTtmdW5jdGlvbiAkbChlKXtpZihQKGUpKXtyZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlKX1yZXR1cm4gZX1jb25zdCBPbD1fO3ZhciBSbD1PYmplY3QuZnJlZXplKHtfX3Byb3RvX186bnVsbCxyZW5kZXI6a2wsaHlkcmF0ZTpUbCxjcmVhdGVBcHA6TmwsY3JlYXRlU1NSQXBwOkVsLGluaXREaXJlY3RpdmVzRm9yU1NSOk9sLGRlZmluZUN1c3RvbUVsZW1lbnQ6d2ksZGVmaW5lU1NSQ3VzdG9tRWxlbWVudDpraSxWdWVFbGVtZW50Ok5pLHVzZUNzc01vZHVsZTpFaSx1c2VDc3NWYXJzOiRpLFRyYW5zaXRpb246RmksVHJhbnNpdGlvbkdyb3VwOllpLHZNb2RlbFRleHQ6b2wsdk1vZGVsQ2hlY2tib3g6cmwsdk1vZGVsUmFkaW86aWwsdk1vZGVsU2VsZWN0OmxsLHZNb2RlbER5bmFtaWM6cGwsd2l0aE1vZGlmaWVyczptbCx3aXRoS2V5czp2bCx2U2hvdzp5bCxyZWFjdGl2ZTpndCxyZWY6RnQscmVhZG9ubHk6eXQsdW5yZWY6SXQscHJveHlSZWZzOkx0LGlzUmVmOlJ0LHRvUmVmOld0LHRvUmVmczpEdCxpc1Byb3h5Ond0LGlzUmVhY3RpdmU6U3QsaXNSZWFkb25seTp4dCxpc1NoYWxsb3c6Q3QsY3VzdG9tUmVmOlV0LHRyaWdnZXJSZWY6VnQsc2hhbGxvd1JlZjpQdCxzaGFsbG93UmVhY3RpdmU6dnQsc2hhbGxvd1JlYWRvbmx5Ol90LG1hcmtSYXc6VHQsdG9SYXc6a3QsZWZmZWN0OnllLHN0b3A6X2UsUmVhY3RpdmVFZmZlY3Q6Z2UsZWZmZWN0U2NvcGU6b2UsRWZmZWN0U2NvcGU6bmUsZ2V0Q3VycmVudFNjb3BlOnNlLG9uU2NvcGVEaXNwb3NlOmllLGNvbXB1dGVkOmpzLHdhdGNoOlhuLHdhdGNoRWZmZWN0OkpuLHdhdGNoUG9zdEVmZmVjdDpZbix3YXRjaFN5bmNFZmZlY3Q6Wm4sb25CZWZvcmVNb3VudDokbyxvbk1vdW50ZWQ6T28sb25CZWZvcmVVcGRhdGU6Um8sb25VcGRhdGVkOkZvLG9uQmVmb3JlVW5tb3VudDpQbyxvblVubW91bnRlZDpBbyxvbkFjdGl2YXRlZDpTbyxvbkRlYWN0aXZhdGVkOnhvLG9uUmVuZGVyVHJhY2tlZDpJbyxvblJlbmRlclRyaWdnZXJlZDpWbyxvbkVycm9yQ2FwdHVyZWQ6Qm8sb25TZXJ2ZXJQcmVmZXRjaDpNbyxwcm92aWRlOkduLGluamVjdDpxbixuZXh0VGljazpkbixkZWZpbmVDb21wb25lbnQ6aG8sZGVmaW5lQXN5bmNDb21wb25lbnQ6Z28sdXNlQXR0cnM6S3MsdXNlU2xvdHM6enMsZGVmaW5lUHJvcHM6VXMsZGVmaW5lRW1pdHM6RHMsZGVmaW5lRXhwb3NlOkhzLHdpdGhEZWZhdWx0czpXcyxtZXJnZURlZmF1bHRzOnFzLGNyZWF0ZVByb3BzUmVzdFByb3h5OkpzLHdpdGhBc3luY0NvbnRleHQ6WXMsZ2V0Q3VycmVudEluc3RhbmNlOndzLGg6WnMsY3JlYXRlVk5vZGU6dXMsY2xvbmVWTm9kZTpmcyxtZXJnZVByb3BzOl9zLGlzVk5vZGU6b3MsRnJhZ21lbnQ6V3IsVGV4dDp6cixDb21tZW50OktyLFN0YXRpYzpHcixUZWxlcG9ydDpIcixTdXNwZW5zZTpVbixLZWVwQWxpdmU6X28sQmFzZVRyYW5zaXRpb246aW8sd2l0aERpcmVjdGl2ZXM6TG8sdXNlU1NSQ29udGV4dDpYcyxzc3JDb250ZXh0S2V5OlFzLGNyZWF0ZVJlbmRlcmVyOkFyLGNyZWF0ZUh5ZHJhdGlvblJlbmRlcmVyOk1yLHF1ZXVlUG9zdEZsdXNoQ2I6dm4sd2FybjpHdCxoYW5kbGVFcnJvcjpRdCxjYWxsV2l0aEVycm9ySGFuZGxpbmc6WXQsY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmc6WnQscmVzb2x2ZUNvbXBvbmVudDpVbyxyZXNvbHZlRGlyZWN0aXZlOldvLHJlc29sdmVEeW5hbWljQ29tcG9uZW50OkhvLHJlZ2lzdGVyUnVudGltZUNvbXBpbGVyOkZzLGlzUnVudGltZU9ubHk6UHMsdXNlVHJhbnNpdGlvblN0YXRlOnJvLHJlc29sdmVUcmFuc2l0aW9uSG9va3M6Y28sc2V0VHJhbnNpdGlvbkhvb2tzOnBvLGdldFRyYW5zaXRpb25SYXdDaGlsZHJlbjpmbyxpbml0Q3VzdG9tRm9ybWF0dGVyOmVpLGdldCBkZXZ0b29scygpe3JldHVybiB4bn0sc2V0RGV2dG9vbHNIb29rOnduLHdpdGhDdHg6QW4scHVzaFNjb3BlSWQ6Um4scG9wU2NvcGVJZDpGbix3aXRoU2NvcGVJZDpQbixyZW5kZXJMaXN0OkdvLHRvSGFuZGxlcnM6Wm8scmVuZGVyU2xvdDpKbyxjcmVhdGVTbG90czpxbyx3aXRoTWVtbzp0aSxpc01lbW9TYW1lOm5pLG9wZW5CbG9jazpZcixjcmVhdGVCbG9jazpucyxzZXRCbG9ja1RyYWNraW5nOlhyLGNyZWF0ZVRleHRWTm9kZTpkcyxjcmVhdGVDb21tZW50Vk5vZGU6bXMsY3JlYXRlU3RhdGljVk5vZGU6aHMsY3JlYXRlRWxlbWVudFZOb2RlOmFzLGNyZWF0ZUVsZW1lbnRCbG9jazp0cyxndWFyZFJlYWN0aXZlUHJvcHM6cHMsdG9EaXNwbGF5U3RyaW5nOm0sY2FtZWxpemU6eixjYXBpdGFsaXplOnEsdG9IYW5kbGVyS2V5Okosbm9ybWFsaXplUHJvcHM6YSxub3JtYWxpemVDbGFzczpjLG5vcm1hbGl6ZVN0eWxlOnIsdHJhbnNmb3JtVk5vZGVBcmdzOnNzLHZlcnNpb246b2ksc3NyVXRpbHM6bnVsbCxyZXNvbHZlRmlsdGVyOm51bGwsY29tcGF0VXRpbHM6bnVsbH0pO2Z1bmN0aW9uIEZsKGUpe3Rocm93IGV9ZnVuY3Rpb24gUGwoZSl7fWZ1bmN0aW9uIEFsKGUsdCxuLG8pe2NvbnN0IHI9bmV3IFN5bnRheEVycm9yKFN0cmluZyhlKSk7cmV0dXJuIHIuY29kZT1lLHIubG9jPXQscn1jb25zdCBNbD1TeW1ib2woXCJcIiksVmw9U3ltYm9sKFwiXCIpLElsPVN5bWJvbChcIlwiKSxCbD1TeW1ib2woXCJcIiksTGw9U3ltYm9sKFwiXCIpLGpsPVN5bWJvbChcIlwiKSxVbD1TeW1ib2woXCJcIiksRGw9U3ltYm9sKFwiXCIpLEhsPVN5bWJvbChcIlwiKSxXbD1TeW1ib2woXCJcIiksemw9U3ltYm9sKFwiXCIpLEtsPVN5bWJvbChcIlwiKSxHbD1TeW1ib2woXCJcIikscWw9U3ltYm9sKFwiXCIpLEpsPVN5bWJvbChcIlwiKSxZbD1TeW1ib2woXCJcIiksWmw9U3ltYm9sKFwiXCIpLFFsPVN5bWJvbChcIlwiKSxYbD1TeW1ib2woXCJcIiksZWM9U3ltYm9sKFwiXCIpLHRjPVN5bWJvbChcIlwiKSxuYz1TeW1ib2woXCJcIiksb2M9U3ltYm9sKFwiXCIpLHJjPVN5bWJvbChcIlwiKSxzYz1TeW1ib2woXCJcIiksaWM9U3ltYm9sKFwiXCIpLGxjPVN5bWJvbChcIlwiKSxjYz1TeW1ib2woXCJcIiksYWM9U3ltYm9sKFwiXCIpLHVjPVN5bWJvbChcIlwiKSxwYz1TeW1ib2woXCJcIiksZmM9U3ltYm9sKFwiXCIpLGRjPVN5bWJvbChcIlwiKSxoYz1TeW1ib2woXCJcIiksbWM9U3ltYm9sKFwiXCIpLGdjPVN5bWJvbChcIlwiKSx2Yz1TeW1ib2woXCJcIikseWM9U3ltYm9sKFwiXCIpLF9jPVN5bWJvbChcIlwiKSxiYz17W01sXTpcIkZyYWdtZW50XCIsW1ZsXTpcIlRlbGVwb3J0XCIsW0lsXTpcIlN1c3BlbnNlXCIsW0JsXTpcIktlZXBBbGl2ZVwiLFtMbF06XCJCYXNlVHJhbnNpdGlvblwiLFtqbF06XCJvcGVuQmxvY2tcIixbVWxdOlwiY3JlYXRlQmxvY2tcIixbRGxdOlwiY3JlYXRlRWxlbWVudEJsb2NrXCIsW0hsXTpcImNyZWF0ZVZOb2RlXCIsW1dsXTpcImNyZWF0ZUVsZW1lbnRWTm9kZVwiLFt6bF06XCJjcmVhdGVDb21tZW50Vk5vZGVcIixbS2xdOlwiY3JlYXRlVGV4dFZOb2RlXCIsW0dsXTpcImNyZWF0ZVN0YXRpY1ZOb2RlXCIsW3FsXTpcInJlc29sdmVDb21wb25lbnRcIixbSmxdOlwicmVzb2x2ZUR5bmFtaWNDb21wb25lbnRcIixbWWxdOlwicmVzb2x2ZURpcmVjdGl2ZVwiLFtabF06XCJyZXNvbHZlRmlsdGVyXCIsW1FsXTpcIndpdGhEaXJlY3RpdmVzXCIsW1hsXTpcInJlbmRlckxpc3RcIixbZWNdOlwicmVuZGVyU2xvdFwiLFt0Y106XCJjcmVhdGVTbG90c1wiLFtuY106XCJ0b0Rpc3BsYXlTdHJpbmdcIixbb2NdOlwibWVyZ2VQcm9wc1wiLFtyY106XCJub3JtYWxpemVDbGFzc1wiLFtzY106XCJub3JtYWxpemVTdHlsZVwiLFtpY106XCJub3JtYWxpemVQcm9wc1wiLFtsY106XCJndWFyZFJlYWN0aXZlUHJvcHNcIixbY2NdOlwidG9IYW5kbGVyc1wiLFthY106XCJjYW1lbGl6ZVwiLFt1Y106XCJjYXBpdGFsaXplXCIsW3BjXTpcInRvSGFuZGxlcktleVwiLFtmY106XCJzZXRCbG9ja1RyYWNraW5nXCIsW2RjXTpcInB1c2hTY29wZUlkXCIsW2hjXTpcInBvcFNjb3BlSWRcIixbbWNdOlwid2l0aEN0eFwiLFtnY106XCJ1bnJlZlwiLFt2Y106XCJpc1JlZlwiLFt5Y106XCJ3aXRoTWVtb1wiLFtfY106XCJpc01lbW9TYW1lXCJ9O2NvbnN0IFNjPXtzb3VyY2U6XCJcIixzdGFydDp7bGluZToxLGNvbHVtbjoxLG9mZnNldDowfSxlbmQ6e2xpbmU6MSxjb2x1bW46MSxvZmZzZXQ6MH19O2Z1bmN0aW9uIHhjKGUsdCxuLG8scixzLGksbD0hMSxjPSExLGE9ITEsdT1TYyl7cmV0dXJuIGUmJihsPyhlLmhlbHBlcihqbCksZS5oZWxwZXIoWmMoZS5pblNTUixhKSkpOmUuaGVscGVyKFljKGUuaW5TU1IsYSkpLGkmJmUuaGVscGVyKFFsKSkse3R5cGU6MTMsdGFnOnQscHJvcHM6bixjaGlsZHJlbjpvLHBhdGNoRmxhZzpyLGR5bmFtaWNQcm9wczpzLGRpcmVjdGl2ZXM6aSxpc0Jsb2NrOmwsZGlzYWJsZVRyYWNraW5nOmMsaXNDb21wb25lbnQ6YSxsb2M6dX19ZnVuY3Rpb24gQ2MoZSx0PVNjKXtyZXR1cm57dHlwZToxNyxsb2M6dCxlbGVtZW50czplfX1mdW5jdGlvbiB3YyhlLHQ9U2Mpe3JldHVybnt0eXBlOjE1LGxvYzp0LHByb3BlcnRpZXM6ZX19ZnVuY3Rpb24ga2MoZSx0KXtyZXR1cm57dHlwZToxNixsb2M6U2Msa2V5OlAoZSk/VGMoZSwhMCk6ZSx2YWx1ZTp0fX1mdW5jdGlvbiBUYyhlLHQ9ITEsbj1TYyxvPTApe3JldHVybnt0eXBlOjQsbG9jOm4sY29udGVudDplLGlzU3RhdGljOnQsY29uc3RUeXBlOnQ/MzpvfX1mdW5jdGlvbiBOYyhlLHQ9U2Mpe3JldHVybnt0eXBlOjgsbG9jOnQsY2hpbGRyZW46ZX19ZnVuY3Rpb24gRWMoZSx0PVtdLG49U2Mpe3JldHVybnt0eXBlOjE0LGxvYzpuLGNhbGxlZTplLGFyZ3VtZW50czp0fX1mdW5jdGlvbiAkYyhlLHQsbj0hMSxvPSExLHI9U2Mpe3JldHVybnt0eXBlOjE4LHBhcmFtczplLHJldHVybnM6dCxuZXdsaW5lOm4saXNTbG90Om8sbG9jOnJ9fWZ1bmN0aW9uIE9jKGUsdCxuLG89ITApe3JldHVybnt0eXBlOjE5LHRlc3Q6ZSxjb25zZXF1ZW50OnQsYWx0ZXJuYXRlOm4sbmV3bGluZTpvLGxvYzpTY319Y29uc3QgUmM9ZT0+ND09PWUudHlwZSYmZS5pc1N0YXRpYyxGYz0oZSx0KT0+ZT09PXR8fGU9PT1HKHQpO2Z1bmN0aW9uIFBjKGUpe3JldHVybiBGYyhlLFwiVGVsZXBvcnRcIik/Vmw6RmMoZSxcIlN1c3BlbnNlXCIpP0lsOkZjKGUsXCJLZWVwQWxpdmVcIik/Qmw6RmMoZSxcIkJhc2VUcmFuc2l0aW9uXCIpP0xsOnZvaWQgMH1jb25zdCBBYz0vXlxcZHxbXlxcJFxcd10vLE1jPWU9PiFBYy50ZXN0KGUpLFZjPS9bQS1aYS16XyRcXHhBMC1cXHVGRkZGXS8sSWM9L1tcXC5cXD9cXHckXFx4QTAtXFx1RkZGRl0vLEJjPS9cXHMrWy5bXVxccyp8XFxzKlsuW11cXHMrL2csTGM9ZT0+e2U9ZS50cmltKCkucmVwbGFjZShCYywoZT0+ZS50cmltKCkpKTtsZXQgdD0wLG49W10sbz0wLHI9MCxzPW51bGw7Zm9yKGxldCBpPTA7aTxlLmxlbmd0aDtpKyspe2NvbnN0IGw9ZS5jaGFyQXQoaSk7c3dpdGNoKHQpe2Nhc2UgMDppZihcIltcIj09PWwpbi5wdXNoKHQpLHQ9MSxvKys7ZWxzZSBpZihcIihcIj09PWwpbi5wdXNoKHQpLHQ9MixyKys7ZWxzZSBpZighKDA9PT1pP1ZjOkljKS50ZXN0KGwpKXJldHVybiExO2JyZWFrO2Nhc2UgMTpcIidcIj09PWx8fCdcIic9PT1sfHxcImBcIj09PWw/KG4ucHVzaCh0KSx0PTMscz1sKTpcIltcIj09PWw/bysrOlwiXVwiPT09bCYmKC0tb3x8KHQ9bi5wb3AoKSkpO2JyZWFrO2Nhc2UgMjppZihcIidcIj09PWx8fCdcIic9PT1sfHxcImBcIj09PWwpbi5wdXNoKHQpLHQ9MyxzPWw7ZWxzZSBpZihcIihcIj09PWwpcisrO2Vsc2UgaWYoXCIpXCI9PT1sKXtpZihpPT09ZS5sZW5ndGgtMSlyZXR1cm4hMTstLXJ8fCh0PW4ucG9wKCkpfWJyZWFrO2Nhc2UgMzpsPT09cyYmKHQ9bi5wb3AoKSxzPW51bGwpfX1yZXR1cm4hbyYmIXJ9O2Z1bmN0aW9uIGpjKGUsdCxuKXtjb25zdCBvPXtzb3VyY2U6ZS5zb3VyY2Uuc2xpY2UodCx0K24pLHN0YXJ0OlVjKGUuc3RhcnQsZS5zb3VyY2UsdCksZW5kOmUuZW5kfTtyZXR1cm4gbnVsbCE9biYmKG8uZW5kPVVjKGUuc3RhcnQsZS5zb3VyY2UsdCtuKSksb31mdW5jdGlvbiBVYyhlLHQsbj10Lmxlbmd0aCl7cmV0dXJuIERjKHcoe30sZSksdCxuKX1mdW5jdGlvbiBEYyhlLHQsbj10Lmxlbmd0aCl7bGV0IG89MCxyPS0xO2ZvcihsZXQgcz0wO3M8bjtzKyspMTA9PT10LmNoYXJDb2RlQXQocykmJihvKysscj1zKTtyZXR1cm4gZS5vZmZzZXQrPW4sZS5saW5lKz1vLGUuY29sdW1uPS0xPT09cj9lLmNvbHVtbituOm4tcixlfWZ1bmN0aW9uIEhjKGUsdCxuPSExKXtmb3IobGV0IG89MDtvPGUucHJvcHMubGVuZ3RoO28rKyl7Y29uc3Qgcj1lLnByb3BzW29dO2lmKDc9PT1yLnR5cGUmJihufHxyLmV4cCkmJihQKHQpP3IubmFtZT09PXQ6dC50ZXN0KHIubmFtZSkpKXJldHVybiByfX1mdW5jdGlvbiBXYyhlLHQsbj0hMSxvPSExKXtmb3IobGV0IHI9MDtyPGUucHJvcHMubGVuZ3RoO3IrKyl7Y29uc3Qgcz1lLnByb3BzW3JdO2lmKDY9PT1zLnR5cGUpe2lmKG4pY29udGludWU7aWYocy5uYW1lPT09dCYmKHMudmFsdWV8fG8pKXJldHVybiBzfWVsc2UgaWYoXCJiaW5kXCI9PT1zLm5hbWUmJihzLmV4cHx8bykmJnpjKHMuYXJnLHQpKXJldHVybiBzfX1mdW5jdGlvbiB6YyhlLHQpe3JldHVybiEoIWV8fCFSYyhlKXx8ZS5jb250ZW50IT09dCl9ZnVuY3Rpb24gS2MoZSl7cmV0dXJuIDU9PT1lLnR5cGV8fDI9PT1lLnR5cGV9ZnVuY3Rpb24gR2MoZSl7cmV0dXJuIDc9PT1lLnR5cGUmJlwic2xvdFwiPT09ZS5uYW1lfWZ1bmN0aW9uIHFjKGUpe3JldHVybiAxPT09ZS50eXBlJiYzPT09ZS50YWdUeXBlfWZ1bmN0aW9uIEpjKGUpe3JldHVybiAxPT09ZS50eXBlJiYyPT09ZS50YWdUeXBlfWZ1bmN0aW9uIFljKGUsdCl7cmV0dXJuIGV8fHQ/SGw6V2x9ZnVuY3Rpb24gWmMoZSx0KXtyZXR1cm4gZXx8dD9VbDpEbH1jb25zdCBRYz1uZXcgU2V0KFtpYyxsY10pO2Z1bmN0aW9uIFhjKGUsdD1bXSl7aWYoZSYmIVAoZSkmJjE0PT09ZS50eXBlKXtjb25zdCBuPWUuY2FsbGVlO2lmKCFQKG4pJiZRYy5oYXMobikpcmV0dXJuIFhjKGUuYXJndW1lbnRzWzBdLHQuY29uY2F0KGUpKX1yZXR1cm5bZSx0XX1mdW5jdGlvbiBlYShlLHQsbil7bGV0IG8scixzPTEzPT09ZS50eXBlP2UucHJvcHM6ZS5hcmd1bWVudHNbMl0saT1bXTtpZihzJiYhUChzKSYmMTQ9PT1zLnR5cGUpe2NvbnN0IGU9WGMocyk7cz1lWzBdLGk9ZVsxXSxyPWlbaS5sZW5ndGgtMV19aWYobnVsbD09c3x8UChzKSlvPXdjKFt0XSk7ZWxzZSBpZigxND09PXMudHlwZSl7Y29uc3QgZT1zLmFyZ3VtZW50c1swXTtQKGUpfHwxNSE9PWUudHlwZT9zLmNhbGxlZT09PWNjP289RWMobi5oZWxwZXIob2MpLFt3YyhbdF0pLHNdKTpzLmFyZ3VtZW50cy51bnNoaWZ0KHdjKFt0XSkpOmUucHJvcGVydGllcy51bnNoaWZ0KHQpLCFvJiYobz1zKX1lbHNlIGlmKDE1PT09cy50eXBlKXtsZXQgZT0hMTtpZig0PT09dC5rZXkudHlwZSl7Y29uc3Qgbj10LmtleS5jb250ZW50O2U9cy5wcm9wZXJ0aWVzLnNvbWUoKGU9PjQ9PT1lLmtleS50eXBlJiZlLmtleS5jb250ZW50PT09bikpfWV8fHMucHJvcGVydGllcy51bnNoaWZ0KHQpLG89c31lbHNlIG89RWMobi5oZWxwZXIob2MpLFt3YyhbdF0pLHNdKSxyJiZyLmNhbGxlZT09PWxjJiYocj1pW2kubGVuZ3RoLTJdKTsxMz09PWUudHlwZT9yP3IuYXJndW1lbnRzWzBdPW86ZS5wcm9wcz1vOnI/ci5hcmd1bWVudHNbMF09bzplLmFyZ3VtZW50c1syXT1vfWZ1bmN0aW9uIHRhKGUsdCl7cmV0dXJuYF8ke3R9XyR7ZS5yZXBsYWNlKC9bXlxcd10vZywoKHQsbik9PlwiLVwiPT09dD9cIl9cIjplLmNoYXJDb2RlQXQobikudG9TdHJpbmcoKSkpfWB9ZnVuY3Rpb24gbmEoZSx7aGVscGVyOnQscmVtb3ZlSGVscGVyOm4saW5TU1I6b30pe2UuaXNCbG9ja3x8KGUuaXNCbG9jaz0hMCxuKFljKG8sZS5pc0NvbXBvbmVudCkpLHQoamwpLHQoWmMobyxlLmlzQ29tcG9uZW50KSkpfWNvbnN0IG9hPS8mKGd0fGx0fGFtcHxhcG9zfHF1b3QpOy9nLHJhPXtndDpcIj5cIixsdDpcIjxcIixhbXA6XCImXCIsYXBvczpcIidcIixxdW90OidcIid9LHNhPXtkZWxpbWl0ZXJzOltcInt7XCIsXCJ9fVwiXSxnZXROYW1lc3BhY2U6KCk9PjAsZ2V0VGV4dE1vZGU6KCk9PjAsaXNWb2lkVGFnOmIsaXNQcmVUYWc6Yixpc0N1c3RvbUVsZW1lbnQ6YixkZWNvZGVFbnRpdGllczplPT5lLnJlcGxhY2Uob2EsKChlLHQpPT5yYVt0XSkpLG9uRXJyb3I6Rmwsb25XYXJuOlBsLGNvbW1lbnRzOiExfTtmdW5jdGlvbiBpYShlLHQ9e30pe2NvbnN0IG49ZnVuY3Rpb24oZSx0KXtjb25zdCBuPXcoe30sc2EpO2xldCBvO2ZvcihvIGluIHQpbltvXT12b2lkIDA9PT10W29dP3NhW29dOnRbb107cmV0dXJue29wdGlvbnM6bixjb2x1bW46MSxsaW5lOjEsb2Zmc2V0OjAsb3JpZ2luYWxTb3VyY2U6ZSxzb3VyY2U6ZSxpblByZTohMSxpblZQcmU6ITEsb25XYXJuOm4ub25XYXJufX0oZSx0KSxvPWJhKG4pO3JldHVybiBmdW5jdGlvbihlLHQ9U2Mpe3JldHVybnt0eXBlOjAsY2hpbGRyZW46ZSxoZWxwZXJzOltdLGNvbXBvbmVudHM6W10sZGlyZWN0aXZlczpbXSxob2lzdHM6W10saW1wb3J0czpbXSxjYWNoZWQ6MCx0ZW1wczowLGNvZGVnZW5Ob2RlOnZvaWQgMCxsb2M6dH19KGxhKG4sMCxbXSksU2EobixvKSl9ZnVuY3Rpb24gbGEoZSx0LG4pe2NvbnN0IG89eGEobikscj1vP28ubnM6MCxzPVtdO2Zvcig7IU5hKGUsdCxuKTspe2NvbnN0IGk9ZS5zb3VyY2U7bGV0IGw7aWYoMD09PXR8fDE9PT10KWlmKCFlLmluVlByZSYmQ2EoaSxlLm9wdGlvbnMuZGVsaW1pdGVyc1swXSkpbD12YShlLHQpO2Vsc2UgaWYoMD09PXQmJlwiPFwiPT09aVswXSlpZigxPT09aS5sZW5ndGgpO2Vsc2UgaWYoXCIhXCI9PT1pWzFdKWw9Q2EoaSxcIlxceDNjIS0tXCIpP3VhKGUpOkNhKGksXCI8IURPQ1RZUEVcIik/cGEoZSk6Q2EoaSxcIjwhW0NEQVRBW1wiKSYmMCE9PXI/YWEoZSxuKTpwYShlKTtlbHNlIGlmKFwiL1wiPT09aVsxXSlpZigyPT09aS5sZW5ndGgpO2Vsc2V7aWYoXCI+XCI9PT1pWzJdKXt3YShlLDMpO2NvbnRpbnVlfWlmKC9bYS16XS9pLnRlc3QoaVsyXSkpe2hhKGUsMSxvKTtjb250aW51ZX1sPXBhKGUpfWVsc2UvW2Etel0vaS50ZXN0KGlbMV0pP2w9ZmEoZSxuKTpcIj9cIj09PWlbMV0mJihsPXBhKGUpKTtpZihsfHwobD15YShlLHQpKSxFKGwpKWZvcihsZXQgZT0wO2U8bC5sZW5ndGg7ZSsrKWNhKHMsbFtlXSk7ZWxzZSBjYShzLGwpfWxldCBpPSExO2lmKDIhPT10JiYxIT09dCl7Y29uc3QgdD1cInByZXNlcnZlXCIhPT1lLm9wdGlvbnMud2hpdGVzcGFjZTtmb3IobGV0IG49MDtuPHMubGVuZ3RoO24rKyl7Y29uc3Qgbz1zW25dO2lmKGUuaW5QcmV8fDIhPT1vLnR5cGUpMyE9PW8udHlwZXx8ZS5vcHRpb25zLmNvbW1lbnRzfHwoaT0hMCxzW25dPW51bGwpO2Vsc2UgaWYoL1teXFx0XFxyXFxuXFxmIF0vLnRlc3Qoby5jb250ZW50KSl0JiYoby5jb250ZW50PW8uY29udGVudC5yZXBsYWNlKC9bXFx0XFxyXFxuXFxmIF0rL2csXCIgXCIpKTtlbHNle2NvbnN0IGU9c1tuLTFdLHI9c1tuKzFdOyFlfHwhcnx8dCYmKDM9PT1lLnR5cGV8fDM9PT1yLnR5cGV8fDE9PT1lLnR5cGUmJjE9PT1yLnR5cGUmJi9bXFxyXFxuXS8udGVzdChvLmNvbnRlbnQpKT8oaT0hMCxzW25dPW51bGwpOm8uY29udGVudD1cIiBcIn19aWYoZS5pblByZSYmbyYmZS5vcHRpb25zLmlzUHJlVGFnKG8udGFnKSl7Y29uc3QgZT1zWzBdO2UmJjI9PT1lLnR5cGUmJihlLmNvbnRlbnQ9ZS5jb250ZW50LnJlcGxhY2UoL15cXHI/XFxuLyxcIlwiKSl9fXJldHVybiBpP3MuZmlsdGVyKEJvb2xlYW4pOnN9ZnVuY3Rpb24gY2EoZSx0KXtpZigyPT09dC50eXBlKXtjb25zdCBuPXhhKGUpO2lmKG4mJjI9PT1uLnR5cGUmJm4ubG9jLmVuZC5vZmZzZXQ9PT10LmxvYy5zdGFydC5vZmZzZXQpcmV0dXJuIG4uY29udGVudCs9dC5jb250ZW50LG4ubG9jLmVuZD10LmxvYy5lbmQsdm9pZChuLmxvYy5zb3VyY2UrPXQubG9jLnNvdXJjZSl9ZS5wdXNoKHQpfWZ1bmN0aW9uIGFhKGUsdCl7d2EoZSw5KTtjb25zdCBuPWxhKGUsMyx0KTtyZXR1cm4gMD09PWUuc291cmNlLmxlbmd0aHx8d2EoZSwzKSxufWZ1bmN0aW9uIHVhKGUpe2NvbnN0IHQ9YmEoZSk7bGV0IG47Y29uc3Qgbz0vLS0oXFwhKT8+Ly5leGVjKGUuc291cmNlKTtpZihvKXtuPWUuc291cmNlLnNsaWNlKDQsby5pbmRleCk7Y29uc3QgdD1lLnNvdXJjZS5zbGljZSgwLG8uaW5kZXgpO2xldCByPTEscz0wO2Zvcig7LTEhPT0ocz10LmluZGV4T2YoXCJcXHgzYyEtLVwiLHIpKTspd2EoZSxzLXIrMSkscj1zKzE7d2EoZSxvLmluZGV4K29bMF0ubGVuZ3RoLXIrMSl9ZWxzZSBuPWUuc291cmNlLnNsaWNlKDQpLHdhKGUsZS5zb3VyY2UubGVuZ3RoKTtyZXR1cm57dHlwZTozLGNvbnRlbnQ6bixsb2M6U2EoZSx0KX19ZnVuY3Rpb24gcGEoZSl7Y29uc3QgdD1iYShlKSxuPVwiP1wiPT09ZS5zb3VyY2VbMV0/MToyO2xldCBvO2NvbnN0IHI9ZS5zb3VyY2UuaW5kZXhPZihcIj5cIik7cmV0dXJuLTE9PT1yPyhvPWUuc291cmNlLnNsaWNlKG4pLHdhKGUsZS5zb3VyY2UubGVuZ3RoKSk6KG89ZS5zb3VyY2Uuc2xpY2UobixyKSx3YShlLHIrMSkpLHt0eXBlOjMsY29udGVudDpvLGxvYzpTYShlLHQpfX1mdW5jdGlvbiBmYShlLHQpe2NvbnN0IG49ZS5pblByZSxvPWUuaW5WUHJlLHI9eGEodCkscz1oYShlLDAsciksaT1lLmluUHJlJiYhbixsPWUuaW5WUHJlJiYhbztpZihzLmlzU2VsZkNsb3Npbmd8fGUub3B0aW9ucy5pc1ZvaWRUYWcocy50YWcpKXJldHVybiBpJiYoZS5pblByZT0hMSksbCYmKGUuaW5WUHJlPSExKSxzO3QucHVzaChzKTtjb25zdCBjPWUub3B0aW9ucy5nZXRUZXh0TW9kZShzLHIpLGE9bGEoZSxjLHQpO2lmKHQucG9wKCkscy5jaGlsZHJlbj1hLEVhKGUuc291cmNlLHMudGFnKSloYShlLDEscik7ZWxzZSBpZigwPT09ZS5zb3VyY2UubGVuZ3RoJiZcInNjcmlwdFwiPT09cy50YWcudG9Mb3dlckNhc2UoKSl7Y29uc3QgZT1hWzBdO2UmJkNhKGUubG9jLnNvdXJjZSxcIlxceDNjIS0tXCIpfXJldHVybiBzLmxvYz1TYShlLHMubG9jLnN0YXJ0KSxpJiYoZS5pblByZT0hMSksbCYmKGUuaW5WUHJlPSExKSxzfWNvbnN0IGRhPWUoXCJpZixlbHNlLGVsc2UtaWYsZm9yLHNsb3RcIik7ZnVuY3Rpb24gaGEoZSx0LG4pe2NvbnN0IG89YmEoZSkscj0vXjxcXC8/KFthLXpdW15cXHRcXHJcXG5cXGYgLz5dKikvaS5leGVjKGUuc291cmNlKSxzPXJbMV0saT1lLm9wdGlvbnMuZ2V0TmFtZXNwYWNlKHMsbik7d2EoZSxyWzBdLmxlbmd0aCksa2EoZSk7Y29uc3QgbD1iYShlKSxjPWUuc291cmNlO2Uub3B0aW9ucy5pc1ByZVRhZyhzKSYmKGUuaW5QcmU9ITApO2xldCBhPW1hKGUsdCk7MD09PXQmJiFlLmluVlByZSYmYS5zb21lKChlPT43PT09ZS50eXBlJiZcInByZVwiPT09ZS5uYW1lKSkmJihlLmluVlByZT0hMCx3KGUsbCksZS5zb3VyY2U9YyxhPW1hKGUsdCkuZmlsdGVyKChlPT5cInYtcHJlXCIhPT1lLm5hbWUpKSk7bGV0IHU9ITE7aWYoMD09PWUuc291cmNlLmxlbmd0aHx8KHU9Q2EoZS5zb3VyY2UsXCIvPlwiKSx3YShlLHU/MjoxKSksMT09PXQpcmV0dXJuO2xldCBwPTA7cmV0dXJuIGUuaW5WUHJlfHwoXCJzbG90XCI9PT1zP3A9MjpcInRlbXBsYXRlXCI9PT1zP2Euc29tZSgoZT0+Nz09PWUudHlwZSYmZGEoZS5uYW1lKSkpJiYocD0zKTpmdW5jdGlvbihlLHQsbil7Y29uc3Qgbz1uLm9wdGlvbnM7aWYoby5pc0N1c3RvbUVsZW1lbnQoZSkpcmV0dXJuITE7aWYoXCJjb21wb25lbnRcIj09PWV8fC9eW0EtWl0vLnRlc3QoZSl8fFBjKGUpfHxvLmlzQnVpbHRJbkNvbXBvbmVudCYmby5pc0J1aWx0SW5Db21wb25lbnQoZSl8fG8uaXNOYXRpdmVUYWcmJiFvLmlzTmF0aXZlVGFnKGUpKXJldHVybiEwO2ZvcihsZXQgcj0wO3I8dC5sZW5ndGg7cisrKXtjb25zdCBlPXRbcl07aWYoNj09PWUudHlwZSl7aWYoXCJpc1wiPT09ZS5uYW1lJiZlLnZhbHVlJiZlLnZhbHVlLmNvbnRlbnQuc3RhcnRzV2l0aChcInZ1ZTpcIikpcmV0dXJuITB9ZWxzZXtpZihcImlzXCI9PT1lLm5hbWUpcmV0dXJuITA7XCJiaW5kXCI9PT1lLm5hbWUmJnpjKGUuYXJnLFwiaXNcIil9fX0ocyxhLGUpJiYocD0xKSkse3R5cGU6MSxuczppLHRhZzpzLHRhZ1R5cGU6cCxwcm9wczphLGlzU2VsZkNsb3Npbmc6dSxjaGlsZHJlbjpbXSxsb2M6U2EoZSxvKSxjb2RlZ2VuTm9kZTp2b2lkIDB9fWZ1bmN0aW9uIG1hKGUsdCl7Y29uc3Qgbj1bXSxvPW5ldyBTZXQ7Zm9yKDtlLnNvdXJjZS5sZW5ndGg+MCYmIUNhKGUuc291cmNlLFwiPlwiKSYmIUNhKGUuc291cmNlLFwiLz5cIik7KXtpZihDYShlLnNvdXJjZSxcIi9cIikpe3dhKGUsMSksa2EoZSk7Y29udGludWV9Y29uc3Qgcj1nYShlLG8pOzY9PT1yLnR5cGUmJnIudmFsdWUmJlwiY2xhc3NcIj09PXIubmFtZSYmKHIudmFsdWUuY29udGVudD1yLnZhbHVlLmNvbnRlbnQucmVwbGFjZSgvXFxzKy9nLFwiIFwiKS50cmltKCkpLDA9PT10JiZuLnB1c2gociksL15bXlxcdFxcclxcblxcZiAvPl0vLnRlc3QoZS5zb3VyY2UpLGthKGUpfXJldHVybiBufWZ1bmN0aW9uIGdhKGUsdCl7Y29uc3Qgbj1iYShlKSxvPS9eW15cXHRcXHJcXG5cXGYgLz5dW15cXHRcXHJcXG5cXGYgLz49XSovLmV4ZWMoZS5zb3VyY2UpWzBdO3QuaGFzKG8pLHQuYWRkKG8pO3tjb25zdCBlPS9bXCInPF0vZztsZXQgdDtmb3IoO3Q9ZS5leGVjKG8pOyk7fWxldCByO3dhKGUsby5sZW5ndGgpLC9eW1xcdFxcclxcblxcZiBdKj0vLnRlc3QoZS5zb3VyY2UpJiYoa2EoZSksd2EoZSwxKSxrYShlKSxyPWZ1bmN0aW9uKGUpe2NvbnN0IHQ9YmEoZSk7bGV0IG47Y29uc3Qgbz1lLnNvdXJjZVswXSxyPSdcIic9PT1vfHxcIidcIj09PW87aWYocil7d2EoZSwxKTtjb25zdCB0PWUuc291cmNlLmluZGV4T2Yobyk7LTE9PT10P249X2EoZSxlLnNvdXJjZS5sZW5ndGgsNCk6KG49X2EoZSx0LDQpLHdhKGUsMSkpfWVsc2V7Y29uc3QgdD0vXlteXFx0XFxyXFxuXFxmID5dKy8uZXhlYyhlLnNvdXJjZSk7aWYoIXQpcmV0dXJuO2NvbnN0IG89L1tcIic8PWBdL2c7bGV0IHI7Zm9yKDtyPW8uZXhlYyh0WzBdKTspO249X2EoZSx0WzBdLmxlbmd0aCw0KX1yZXR1cm57Y29udGVudDpuLGlzUXVvdGVkOnIsbG9jOlNhKGUsdCl9fShlKSk7Y29uc3Qgcz1TYShlLG4pO2lmKCFlLmluVlByZSYmL14odi1bQS1aYS16MC05LV18OnxcXC58QHwjKS8udGVzdChvKSl7Y29uc3QgdD0vKD86XnYtKFthLXowLTktXSspKT8oPzooPzo6fF5cXC58XkB8XiMpKFxcW1teXFxdXStcXF18W15cXC5dKykpPyguKyk/JC9pLmV4ZWMobyk7bGV0IGksbD1DYShvLFwiLlwiKSxjPXRbMV18fChsfHxDYShvLFwiOlwiKT9cImJpbmRcIjpDYShvLFwiQFwiKT9cIm9uXCI6XCJzbG90XCIpO2lmKHRbMl0pe2NvbnN0IHI9XCJzbG90XCI9PT1jLHM9by5sYXN0SW5kZXhPZih0WzJdKSxsPVNhKGUsVGEoZSxuLHMpLFRhKGUsbixzK3RbMl0ubGVuZ3RoKyhyJiZ0WzNdfHxcIlwiKS5sZW5ndGgpKTtsZXQgYT10WzJdLHU9ITA7YS5zdGFydHNXaXRoKFwiW1wiKT8odT0hMSxhPWEuZW5kc1dpdGgoXCJdXCIpP2Euc2xpY2UoMSxhLmxlbmd0aC0xKTphLnNsaWNlKDEpKTpyJiYoYSs9dFszXXx8XCJcIiksaT17dHlwZTo0LGNvbnRlbnQ6YSxpc1N0YXRpYzp1LGNvbnN0VHlwZTp1PzM6MCxsb2M6bH19aWYociYmci5pc1F1b3RlZCl7Y29uc3QgZT1yLmxvYztlLnN0YXJ0Lm9mZnNldCsrLGUuc3RhcnQuY29sdW1uKyssZS5lbmQ9VWMoZS5zdGFydCxyLmNvbnRlbnQpLGUuc291cmNlPWUuc291cmNlLnNsaWNlKDEsLTEpfWNvbnN0IGE9dFszXT90WzNdLnNsaWNlKDEpLnNwbGl0KFwiLlwiKTpbXTtyZXR1cm4gbCYmYS5wdXNoKFwicHJvcFwiKSx7dHlwZTo3LG5hbWU6YyxleHA6ciYme3R5cGU6NCxjb250ZW50OnIuY29udGVudCxpc1N0YXRpYzohMSxjb25zdFR5cGU6MCxsb2M6ci5sb2N9LGFyZzppLG1vZGlmaWVyczphLGxvYzpzfX1yZXR1cm4hZS5pblZQcmUmJkNhKG8sXCJ2LVwiKSx7dHlwZTo2LG5hbWU6byx2YWx1ZTpyJiZ7dHlwZToyLGNvbnRlbnQ6ci5jb250ZW50LGxvYzpyLmxvY30sbG9jOnN9fWZ1bmN0aW9uIHZhKGUsdCl7Y29uc3RbbixvXT1lLm9wdGlvbnMuZGVsaW1pdGVycyxyPWUuc291cmNlLmluZGV4T2YobyxuLmxlbmd0aCk7aWYoLTE9PT1yKXJldHVybjtjb25zdCBzPWJhKGUpO3dhKGUsbi5sZW5ndGgpO2NvbnN0IGk9YmEoZSksbD1iYShlKSxjPXItbi5sZW5ndGgsYT1lLnNvdXJjZS5zbGljZSgwLGMpLHU9X2EoZSxjLHQpLHA9dS50cmltKCksZj11LmluZGV4T2YocCk7Zj4wJiZEYyhpLGEsZik7cmV0dXJuIERjKGwsYSxjLSh1Lmxlbmd0aC1wLmxlbmd0aC1mKSksd2EoZSxvLmxlbmd0aCkse3R5cGU6NSxjb250ZW50Ont0eXBlOjQsaXNTdGF0aWM6ITEsY29uc3RUeXBlOjAsY29udGVudDpwLGxvYzpTYShlLGksbCl9LGxvYzpTYShlLHMpfX1mdW5jdGlvbiB5YShlLHQpe2NvbnN0IG49Mz09PXQ/W1wiXV0+XCJdOltcIjxcIixlLm9wdGlvbnMuZGVsaW1pdGVyc1swXV07bGV0IG89ZS5zb3VyY2UubGVuZ3RoO2ZvcihsZXQgcz0wO3M8bi5sZW5ndGg7cysrKXtjb25zdCB0PWUuc291cmNlLmluZGV4T2YobltzXSwxKTstMSE9PXQmJm8+dCYmKG89dCl9Y29uc3Qgcj1iYShlKTtyZXR1cm57dHlwZToyLGNvbnRlbnQ6X2EoZSxvLHQpLGxvYzpTYShlLHIpfX1mdW5jdGlvbiBfYShlLHQsbil7Y29uc3Qgbz1lLnNvdXJjZS5zbGljZSgwLHQpO3JldHVybiB3YShlLHQpLDIhPT1uJiYzIT09biYmby5pbmNsdWRlcyhcIiZcIik/ZS5vcHRpb25zLmRlY29kZUVudGl0aWVzKG8sND09PW4pOm99ZnVuY3Rpb24gYmEoZSl7Y29uc3R7Y29sdW1uOnQsbGluZTpuLG9mZnNldDpvfT1lO3JldHVybntjb2x1bW46dCxsaW5lOm4sb2Zmc2V0Om99fWZ1bmN0aW9uIFNhKGUsdCxuKXtyZXR1cm57c3RhcnQ6dCxlbmQ6bj1ufHxiYShlKSxzb3VyY2U6ZS5vcmlnaW5hbFNvdXJjZS5zbGljZSh0Lm9mZnNldCxuLm9mZnNldCl9fWZ1bmN0aW9uIHhhKGUpe3JldHVybiBlW2UubGVuZ3RoLTFdfWZ1bmN0aW9uIENhKGUsdCl7cmV0dXJuIGUuc3RhcnRzV2l0aCh0KX1mdW5jdGlvbiB3YShlLHQpe2NvbnN0e3NvdXJjZTpufT1lO0RjKGUsbix0KSxlLnNvdXJjZT1uLnNsaWNlKHQpfWZ1bmN0aW9uIGthKGUpe2NvbnN0IHQ9L15bXFx0XFxyXFxuXFxmIF0rLy5leGVjKGUuc291cmNlKTt0JiZ3YShlLHRbMF0ubGVuZ3RoKX1mdW5jdGlvbiBUYShlLHQsbil7cmV0dXJuIFVjKHQsZS5vcmlnaW5hbFNvdXJjZS5zbGljZSh0Lm9mZnNldCxuKSxuKX1mdW5jdGlvbiBOYShlLHQsbil7Y29uc3Qgbz1lLnNvdXJjZTtzd2l0Y2godCl7Y2FzZSAwOmlmKENhKG8sXCI8L1wiKSlmb3IobGV0IGU9bi5sZW5ndGgtMTtlPj0wOy0tZSlpZihFYShvLG5bZV0udGFnKSlyZXR1cm4hMDticmVhaztjYXNlIDE6Y2FzZSAyOntjb25zdCBlPXhhKG4pO2lmKGUmJkVhKG8sZS50YWcpKXJldHVybiEwO2JyZWFrfWNhc2UgMzppZihDYShvLFwiXV0+XCIpKXJldHVybiEwfXJldHVybiFvfWZ1bmN0aW9uIEVhKGUsdCl7cmV0dXJuIENhKGUsXCI8L1wiKSYmZS5zbGljZSgyLDIrdC5sZW5ndGgpLnRvTG93ZXJDYXNlKCk9PT10LnRvTG93ZXJDYXNlKCkmJi9bXFx0XFxyXFxuXFxmIC8+XS8udGVzdChlWzIrdC5sZW5ndGhdfHxcIj5cIil9ZnVuY3Rpb24gJGEoZSx0KXtSYShlLHQsT2EoZSxlLmNoaWxkcmVuWzBdKSl9ZnVuY3Rpb24gT2EoZSx0KXtjb25zdHtjaGlsZHJlbjpufT1lO3JldHVybiAxPT09bi5sZW5ndGgmJjE9PT10LnR5cGUmJiFKYyh0KX1mdW5jdGlvbiBSYShlLHQsbj0hMSl7Y29uc3R7Y2hpbGRyZW46b309ZSxyPW8ubGVuZ3RoO2xldCBzPTA7Zm9yKGxldCBpPTA7aTxvLmxlbmd0aDtpKyspe2NvbnN0IGU9b1tpXTtpZigxPT09ZS50eXBlJiYwPT09ZS50YWdUeXBlKXtjb25zdCBvPW4/MDpGYShlLHQpO2lmKG8+MCl7aWYobz49Mil7ZS5jb2RlZ2VuTm9kZS5wYXRjaEZsYWc9XCItMVwiLGUuY29kZWdlbk5vZGU9dC5ob2lzdChlLmNvZGVnZW5Ob2RlKSxzKys7Y29udGludWV9fWVsc2V7Y29uc3Qgbj1lLmNvZGVnZW5Ob2RlO2lmKDEzPT09bi50eXBlKXtjb25zdCBvPUlhKG4pO2lmKCghb3x8NTEyPT09b3x8MT09PW8pJiZNYShlLHQpPj0yKXtjb25zdCBvPVZhKGUpO28mJihuLnByb3BzPXQuaG9pc3QobykpfW4uZHluYW1pY1Byb3BzJiYobi5keW5hbWljUHJvcHM9dC5ob2lzdChuLmR5bmFtaWNQcm9wcykpfX19ZWxzZSAxMj09PWUudHlwZSYmRmEoZS5jb250ZW50LHQpPj0yJiYoZS5jb2RlZ2VuTm9kZT10LmhvaXN0KGUuY29kZWdlbk5vZGUpLHMrKyk7aWYoMT09PWUudHlwZSl7Y29uc3Qgbj0xPT09ZS50YWdUeXBlO24mJnQuc2NvcGVzLnZTbG90KyssUmEoZSx0KSxuJiZ0LnNjb3Blcy52U2xvdC0tfWVsc2UgaWYoMTE9PT1lLnR5cGUpUmEoZSx0LDE9PT1lLmNoaWxkcmVuLmxlbmd0aCk7ZWxzZSBpZig5PT09ZS50eXBlKWZvcihsZXQgbj0wO248ZS5icmFuY2hlcy5sZW5ndGg7bisrKVJhKGUuYnJhbmNoZXNbbl0sdCwxPT09ZS5icmFuY2hlc1tuXS5jaGlsZHJlbi5sZW5ndGgpfXMmJnQudHJhbnNmb3JtSG9pc3QmJnQudHJhbnNmb3JtSG9pc3Qobyx0LGUpLHMmJnM9PT1yJiYxPT09ZS50eXBlJiYwPT09ZS50YWdUeXBlJiZlLmNvZGVnZW5Ob2RlJiYxMz09PWUuY29kZWdlbk5vZGUudHlwZSYmRShlLmNvZGVnZW5Ob2RlLmNoaWxkcmVuKSYmKGUuY29kZWdlbk5vZGUuY2hpbGRyZW49dC5ob2lzdChDYyhlLmNvZGVnZW5Ob2RlLmNoaWxkcmVuKSkpfWZ1bmN0aW9uIEZhKGUsdCl7Y29uc3R7Y29uc3RhbnRDYWNoZTpufT10O3N3aXRjaChlLnR5cGUpe2Nhc2UgMTppZigwIT09ZS50YWdUeXBlKXJldHVybiAwO2NvbnN0IG89bi5nZXQoZSk7aWYodm9pZCAwIT09bylyZXR1cm4gbztjb25zdCByPWUuY29kZWdlbk5vZGU7aWYoMTMhPT1yLnR5cGUpcmV0dXJuIDA7aWYoci5pc0Jsb2NrJiZcInN2Z1wiIT09ZS50YWcmJlwiZm9yZWlnbk9iamVjdFwiIT09ZS50YWcpcmV0dXJuIDA7aWYoSWEocikpcmV0dXJuIG4uc2V0KGUsMCksMDt7bGV0IG89Mztjb25zdCBzPU1hKGUsdCk7aWYoMD09PXMpcmV0dXJuIG4uc2V0KGUsMCksMDtzPG8mJihvPXMpO2ZvcihsZXQgcj0wO3I8ZS5jaGlsZHJlbi5sZW5ndGg7cisrKXtjb25zdCBzPUZhKGUuY2hpbGRyZW5bcl0sdCk7aWYoMD09PXMpcmV0dXJuIG4uc2V0KGUsMCksMDtzPG8mJihvPXMpfWlmKG8+MSlmb3IobGV0IHI9MDtyPGUucHJvcHMubGVuZ3RoO3IrKyl7Y29uc3Qgcz1lLnByb3BzW3JdO2lmKDc9PT1zLnR5cGUmJlwiYmluZFwiPT09cy5uYW1lJiZzLmV4cCl7Y29uc3Qgcj1GYShzLmV4cCx0KTtpZigwPT09cilyZXR1cm4gbi5zZXQoZSwwKSwwO3I8byYmKG89cil9fWlmKHIuaXNCbG9jayl7Zm9yKGxldCB0PTA7dDxlLnByb3BzLmxlbmd0aDt0Kyspe2lmKDc9PT1lLnByb3BzW3RdLnR5cGUpcmV0dXJuIG4uc2V0KGUsMCksMH10LnJlbW92ZUhlbHBlcihqbCksdC5yZW1vdmVIZWxwZXIoWmModC5pblNTUixyLmlzQ29tcG9uZW50KSksci5pc0Jsb2NrPSExLHQuaGVscGVyKFljKHQuaW5TU1Isci5pc0NvbXBvbmVudCkpfXJldHVybiBuLnNldChlLG8pLG99Y2FzZSAyOmNhc2UgMzpyZXR1cm4gMztjYXNlIDk6Y2FzZSAxMTpjYXNlIDEwOmRlZmF1bHQ6cmV0dXJuIDA7Y2FzZSA1OmNhc2UgMTI6cmV0dXJuIEZhKGUuY29udGVudCx0KTtjYXNlIDQ6cmV0dXJuIGUuY29uc3RUeXBlO2Nhc2UgODpsZXQgcz0zO2ZvcihsZXQgbj0wO248ZS5jaGlsZHJlbi5sZW5ndGg7bisrKXtjb25zdCBvPWUuY2hpbGRyZW5bbl07aWYoUChvKXx8QShvKSljb250aW51ZTtjb25zdCByPUZhKG8sdCk7aWYoMD09PXIpcmV0dXJuIDA7cjxzJiYocz1yKX1yZXR1cm4gc319Y29uc3QgUGE9bmV3IFNldChbcmMsc2MsaWMsbGNdKTtmdW5jdGlvbiBBYShlLHQpe2lmKDE0PT09ZS50eXBlJiYhUChlLmNhbGxlZSkmJlBhLmhhcyhlLmNhbGxlZSkpe2NvbnN0IG49ZS5hcmd1bWVudHNbMF07aWYoND09PW4udHlwZSlyZXR1cm4gRmEobix0KTtpZigxND09PW4udHlwZSlyZXR1cm4gQWEobix0KX1yZXR1cm4gMH1mdW5jdGlvbiBNYShlLHQpe2xldCBuPTM7Y29uc3Qgbz1WYShlKTtpZihvJiYxNT09PW8udHlwZSl7Y29uc3R7cHJvcGVydGllczplfT1vO2ZvcihsZXQgbz0wO288ZS5sZW5ndGg7bysrKXtjb25zdHtrZXk6cix2YWx1ZTpzfT1lW29dLGk9RmEocix0KTtpZigwPT09aSlyZXR1cm4gaTtsZXQgbDtpZihpPG4mJihuPWkpLGw9ND09PXMudHlwZT9GYShzLHQpOjE0PT09cy50eXBlP0FhKHMsdCk6MCwwPT09bClyZXR1cm4gbDtsPG4mJihuPWwpfX1yZXR1cm4gbn1mdW5jdGlvbiBWYShlKXtjb25zdCB0PWUuY29kZWdlbk5vZGU7aWYoMTM9PT10LnR5cGUpcmV0dXJuIHQucHJvcHN9ZnVuY3Rpb24gSWEoZSl7Y29uc3QgdD1lLnBhdGNoRmxhZztyZXR1cm4gdD9wYXJzZUludCh0LDEwKTp2b2lkIDB9ZnVuY3Rpb24gQmEoZSx7ZmlsZW5hbWU6dD1cIlwiLHByZWZpeElkZW50aWZpZXJzOm49ITEsaG9pc3RTdGF0aWM6bz0hMSxjYWNoZUhhbmRsZXJzOnI9ITEsbm9kZVRyYW5zZm9ybXM6cz1bXSxkaXJlY3RpdmVUcmFuc2Zvcm1zOmk9e30sdHJhbnNmb3JtSG9pc3Q6bD1udWxsLGlzQnVpbHRJbkNvbXBvbmVudDpjPV8saXNDdXN0b21FbGVtZW50OmE9XyxleHByZXNzaW9uUGx1Z2luczp1PVtdLHNjb3BlSWQ6cD1udWxsLHNsb3R0ZWQ6Zj0hMCxzc3I6ZD0hMSxpblNTUjpoPSExLHNzckNzc1ZhcnM6bT1cIlwiLGJpbmRpbmdNZXRhZGF0YTpnPXYsaW5saW5lOnk9ITEsaXNUUzpiPSExLG9uRXJyb3I6Uz1GbCxvbldhcm46eD1QbCxjb21wYXRDb25maWc6Q30pe2NvbnN0IHc9dC5yZXBsYWNlKC9cXD8uKiQvLFwiXCIpLm1hdGNoKC8oW14vXFxcXF0rKVxcLlxcdyskLyksaz17c2VsZk5hbWU6dyYmcSh6KHdbMV0pKSxwcmVmaXhJZGVudGlmaWVyczpuLGhvaXN0U3RhdGljOm8sY2FjaGVIYW5kbGVyczpyLG5vZGVUcmFuc2Zvcm1zOnMsZGlyZWN0aXZlVHJhbnNmb3JtczppLHRyYW5zZm9ybUhvaXN0OmwsaXNCdWlsdEluQ29tcG9uZW50OmMsaXNDdXN0b21FbGVtZW50OmEsZXhwcmVzc2lvblBsdWdpbnM6dSxzY29wZUlkOnAsc2xvdHRlZDpmLHNzcjpkLGluU1NSOmgsc3NyQ3NzVmFyczptLGJpbmRpbmdNZXRhZGF0YTpnLGlubGluZTp5LGlzVFM6YixvbkVycm9yOlMsb25XYXJuOngsY29tcGF0Q29uZmlnOkMscm9vdDplLGhlbHBlcnM6bmV3IE1hcCxjb21wb25lbnRzOm5ldyBTZXQsZGlyZWN0aXZlczpuZXcgU2V0LGhvaXN0czpbXSxpbXBvcnRzOltdLGNvbnN0YW50Q2FjaGU6bmV3IE1hcCx0ZW1wczowLGNhY2hlZDowLGlkZW50aWZpZXJzOk9iamVjdC5jcmVhdGUobnVsbCksc2NvcGVzOnt2Rm9yOjAsdlNsb3Q6MCx2UHJlOjAsdk9uY2U6MH0scGFyZW50Om51bGwsY3VycmVudE5vZGU6ZSxjaGlsZEluZGV4OjAsaW5WT25jZTohMSxoZWxwZXIoZSl7Y29uc3QgdD1rLmhlbHBlcnMuZ2V0KGUpfHwwO3JldHVybiBrLmhlbHBlcnMuc2V0KGUsdCsxKSxlfSxyZW1vdmVIZWxwZXIoZSl7Y29uc3QgdD1rLmhlbHBlcnMuZ2V0KGUpO2lmKHQpe2NvbnN0IG49dC0xO24/ay5oZWxwZXJzLnNldChlLG4pOmsuaGVscGVycy5kZWxldGUoZSl9fSxoZWxwZXJTdHJpbmc6ZT0+YF8ke2JjW2suaGVscGVyKGUpXX1gLHJlcGxhY2VOb2RlKGUpe2sucGFyZW50LmNoaWxkcmVuW2suY2hpbGRJbmRleF09ay5jdXJyZW50Tm9kZT1lfSxyZW1vdmVOb2RlKGUpe2NvbnN0IHQ9ZT9rLnBhcmVudC5jaGlsZHJlbi5pbmRleE9mKGUpOmsuY3VycmVudE5vZGU/ay5jaGlsZEluZGV4Oi0xO2UmJmUhPT1rLmN1cnJlbnROb2RlP2suY2hpbGRJbmRleD50JiYoay5jaGlsZEluZGV4LS0say5vbk5vZGVSZW1vdmVkKCkpOihrLmN1cnJlbnROb2RlPW51bGwsay5vbk5vZGVSZW1vdmVkKCkpLGsucGFyZW50LmNoaWxkcmVuLnNwbGljZSh0LDEpfSxvbk5vZGVSZW1vdmVkOigpPT57fSxhZGRJZGVudGlmaWVycyhlKXt9LHJlbW92ZUlkZW50aWZpZXJzKGUpe30saG9pc3QoZSl7UChlKSYmKGU9VGMoZSkpLGsuaG9pc3RzLnB1c2goZSk7Y29uc3QgdD1UYyhgX2hvaXN0ZWRfJHtrLmhvaXN0cy5sZW5ndGh9YCwhMSxlLmxvYywyKTtyZXR1cm4gdC5ob2lzdGVkPWUsdH0sY2FjaGU6KGUsdD0hMSk9PmZ1bmN0aW9uKGUsdCxuPSExKXtyZXR1cm57dHlwZToyMCxpbmRleDplLHZhbHVlOnQsaXNWTm9kZTpuLGxvYzpTY319KGsuY2FjaGVkKyssZSx0KX07cmV0dXJuIGt9ZnVuY3Rpb24gTGEoZSx0KXtjb25zdCBuPUJhKGUsdCk7amEoZSxuKSx0LmhvaXN0U3RhdGljJiYkYShlLG4pLHQuc3NyfHxmdW5jdGlvbihlLHQpe2NvbnN0e2hlbHBlcjpufT10LHtjaGlsZHJlbjpvfT1lO2lmKDE9PT1vLmxlbmd0aCl7Y29uc3Qgbj1vWzBdO2lmKE9hKGUsbikmJm4uY29kZWdlbk5vZGUpe2NvbnN0IG89bi5jb2RlZ2VuTm9kZTsxMz09PW8udHlwZSYmbmEobyx0KSxlLmNvZGVnZW5Ob2RlPW99ZWxzZSBlLmNvZGVnZW5Ob2RlPW59ZWxzZSBpZihvLmxlbmd0aD4xKXtsZXQgbz02NDtlLmNvZGVnZW5Ob2RlPXhjKHQsbihNbCksdm9pZCAwLGUuY2hpbGRyZW4sbytcIlwiLHZvaWQgMCx2b2lkIDAsITAsdm9pZCAwLCExKX19KGUsbiksZS5oZWxwZXJzPVsuLi5uLmhlbHBlcnMua2V5cygpXSxlLmNvbXBvbmVudHM9Wy4uLm4uY29tcG9uZW50c10sZS5kaXJlY3RpdmVzPVsuLi5uLmRpcmVjdGl2ZXNdLGUuaW1wb3J0cz1uLmltcG9ydHMsZS5ob2lzdHM9bi5ob2lzdHMsZS50ZW1wcz1uLnRlbXBzLGUuY2FjaGVkPW4uY2FjaGVkfWZ1bmN0aW9uIGphKGUsdCl7dC5jdXJyZW50Tm9kZT1lO2NvbnN0e25vZGVUcmFuc2Zvcm1zOm59PXQsbz1bXTtmb3IobGV0IHM9MDtzPG4ubGVuZ3RoO3MrKyl7Y29uc3Qgcj1uW3NdKGUsdCk7aWYociYmKEUocik/by5wdXNoKC4uLnIpOm8ucHVzaChyKSksIXQuY3VycmVudE5vZGUpcmV0dXJuO2U9dC5jdXJyZW50Tm9kZX1zd2l0Y2goZS50eXBlKXtjYXNlIDM6dC5zc3J8fHQuaGVscGVyKHpsKTticmVhaztjYXNlIDU6dC5zc3J8fHQuaGVscGVyKG5jKTticmVhaztjYXNlIDk6Zm9yKGxldCBuPTA7bjxlLmJyYW5jaGVzLmxlbmd0aDtuKyspamEoZS5icmFuY2hlc1tuXSx0KTticmVhaztjYXNlIDEwOmNhc2UgMTE6Y2FzZSAxOmNhc2UgMDohZnVuY3Rpb24oZSx0KXtsZXQgbj0wO2NvbnN0IG89KCk9PntuLS19O2Zvcig7bjxlLmNoaWxkcmVuLmxlbmd0aDtuKyspe2NvbnN0IHI9ZS5jaGlsZHJlbltuXTtQKHIpfHwodC5wYXJlbnQ9ZSx0LmNoaWxkSW5kZXg9bix0Lm9uTm9kZVJlbW92ZWQ9byxqYShyLHQpKX19KGUsdCl9dC5jdXJyZW50Tm9kZT1lO2xldCByPW8ubGVuZ3RoO2Zvcig7ci0tOylvW3JdKCl9ZnVuY3Rpb24gVWEoZSx0KXtjb25zdCBuPVAoZSk/dD0+dD09PWU6dD0+ZS50ZXN0KHQpO3JldHVybihlLG8pPT57aWYoMT09PWUudHlwZSl7Y29uc3R7cHJvcHM6cn09ZTtpZigzPT09ZS50YWdUeXBlJiZyLnNvbWUoR2MpKXJldHVybjtjb25zdCBzPVtdO2ZvcihsZXQgaT0wO2k8ci5sZW5ndGg7aSsrKXtjb25zdCBsPXJbaV07aWYoNz09PWwudHlwZSYmbihsLm5hbWUpKXtyLnNwbGljZShpLDEpLGktLTtjb25zdCBuPXQoZSxsLG8pO24mJnMucHVzaChuKX19cmV0dXJuIHN9fX1jb25zdCBEYT1lPT5gJHtiY1tlXX06IF8ke2JjW2VdfWA7ZnVuY3Rpb24gSGEoZSx0PXt9KXtjb25zdCBuPWZ1bmN0aW9uKGUse21vZGU6dD1cImZ1bmN0aW9uXCIscHJlZml4SWRlbnRpZmllcnM6bj1cIm1vZHVsZVwiPT09dCxzb3VyY2VNYXA6bz0hMSxmaWxlbmFtZTpyPVwidGVtcGxhdGUudnVlLmh0bWxcIixzY29wZUlkOnM9bnVsbCxvcHRpbWl6ZUltcG9ydHM6aT0hMSxydW50aW1lR2xvYmFsTmFtZTpsPVwiVnVlXCIscnVudGltZU1vZHVsZU5hbWU6Yz1cInZ1ZVwiLHNzclJ1bnRpbWVNb2R1bGVOYW1lOmE9XCJ2dWUvc2VydmVyLXJlbmRlcmVyXCIsc3NyOnU9ITEsaXNUUzpwPSExLGluU1NSOmY9ITF9KXtjb25zdCBkPXttb2RlOnQscHJlZml4SWRlbnRpZmllcnM6bixzb3VyY2VNYXA6byxmaWxlbmFtZTpyLHNjb3BlSWQ6cyxvcHRpbWl6ZUltcG9ydHM6aSxydW50aW1lR2xvYmFsTmFtZTpsLHJ1bnRpbWVNb2R1bGVOYW1lOmMsc3NyUnVudGltZU1vZHVsZU5hbWU6YSxzc3I6dSxpc1RTOnAsaW5TU1I6Zixzb3VyY2U6ZS5sb2Muc291cmNlLGNvZGU6XCJcIixjb2x1bW46MSxsaW5lOjEsb2Zmc2V0OjAsaW5kZW50TGV2ZWw6MCxwdXJlOiExLG1hcDp2b2lkIDAsaGVscGVyOmU9PmBfJHtiY1tlXX1gLHB1c2goZSx0KXtkLmNvZGUrPWV9LGluZGVudCgpe2goKytkLmluZGVudExldmVsKX0sZGVpbmRlbnQoZT0hMSl7ZT8tLWQuaW5kZW50TGV2ZWw6aCgtLWQuaW5kZW50TGV2ZWwpfSxuZXdsaW5lKCl7aChkLmluZGVudExldmVsKX19O2Z1bmN0aW9uIGgoZSl7ZC5wdXNoKFwiXFxuXCIrXCIgIFwiLnJlcGVhdChlKSl9cmV0dXJuIGR9KGUsdCk7dC5vbkNvbnRleHRDcmVhdGVkJiZ0Lm9uQ29udGV4dENyZWF0ZWQobik7Y29uc3R7bW9kZTpvLHB1c2g6cixwcmVmaXhJZGVudGlmaWVyczpzLGluZGVudDppLGRlaW5kZW50OmwsbmV3bGluZTpjLHNzcjphfT1uLHU9ZS5oZWxwZXJzLmxlbmd0aD4wLHA9IXMmJlwibW9kdWxlXCIhPT1vOyFmdW5jdGlvbihlLHQpe2NvbnN0e3B1c2g6bixuZXdsaW5lOm8scnVudGltZUdsb2JhbE5hbWU6cn09dCxzPXI7aWYoZS5oZWxwZXJzLmxlbmd0aD4wJiYobihgY29uc3QgX1Z1ZSA9ICR7c31cXG5gKSxlLmhvaXN0cy5sZW5ndGgpKXtuKGBjb25zdCB7ICR7W0hsLFdsLHpsLEtsLEdsXS5maWx0ZXIoKHQ9PmUuaGVscGVycy5pbmNsdWRlcyh0KSkpLm1hcChEYSkuam9pbihcIiwgXCIpfSB9ID0gX1Z1ZVxcbmApfShmdW5jdGlvbihlLHQpe2lmKCFlLmxlbmd0aClyZXR1cm47dC5wdXJlPSEwO2NvbnN0e3B1c2g6bixuZXdsaW5lOm99PXQ7bygpO2ZvcihsZXQgcj0wO3I8ZS5sZW5ndGg7cisrKXtjb25zdCBzPWVbcl07cyYmKG4oYGNvbnN0IF9ob2lzdGVkXyR7cisxfSA9IGApLEdhKHMsdCksbygpKX10LnB1cmU9ITF9KShlLmhvaXN0cyx0KSxvKCksbihcInJldHVybiBcIil9KGUsbik7aWYocihgZnVuY3Rpb24gJHthP1wic3NyUmVuZGVyXCI6XCJyZW5kZXJcIn0oJHsoYT9bXCJfY3R4XCIsXCJfcHVzaFwiLFwiX3BhcmVudFwiLFwiX2F0dHJzXCJdOltcIl9jdHhcIixcIl9jYWNoZVwiXSkuam9pbihcIiwgXCIpfSkge2ApLGkoKSxwJiYocihcIndpdGggKF9jdHgpIHtcIiksaSgpLHUmJihyKGBjb25zdCB7ICR7ZS5oZWxwZXJzLm1hcChEYSkuam9pbihcIiwgXCIpfSB9ID0gX1Z1ZWApLHIoXCJcXG5cIiksYygpKSksZS5jb21wb25lbnRzLmxlbmd0aCYmKFdhKGUuY29tcG9uZW50cyxcImNvbXBvbmVudFwiLG4pLChlLmRpcmVjdGl2ZXMubGVuZ3RofHxlLnRlbXBzPjApJiZjKCkpLGUuZGlyZWN0aXZlcy5sZW5ndGgmJihXYShlLmRpcmVjdGl2ZXMsXCJkaXJlY3RpdmVcIixuKSxlLnRlbXBzPjAmJmMoKSksZS50ZW1wcz4wKXtyKFwibGV0IFwiKTtmb3IobGV0IHQ9MDt0PGUudGVtcHM7dCsrKXIoYCR7dD4wP1wiLCBcIjpcIlwifV90ZW1wJHt0fWApfXJldHVybihlLmNvbXBvbmVudHMubGVuZ3RofHxlLmRpcmVjdGl2ZXMubGVuZ3RofHxlLnRlbXBzKSYmKHIoXCJcXG5cIiksYygpKSxhfHxyKFwicmV0dXJuIFwiKSxlLmNvZGVnZW5Ob2RlP0dhKGUuY29kZWdlbk5vZGUsbik6cihcIm51bGxcIikscCYmKGwoKSxyKFwifVwiKSksbCgpLHIoXCJ9XCIpLHthc3Q6ZSxjb2RlOm4uY29kZSxwcmVhbWJsZTpcIlwiLG1hcDpuLm1hcD9uLm1hcC50b0pTT04oKTp2b2lkIDB9fWZ1bmN0aW9uIFdhKGUsdCx7aGVscGVyOm4scHVzaDpvLG5ld2xpbmU6cixpc1RTOnN9KXtjb25zdCBpPW4oXCJjb21wb25lbnRcIj09PXQ/cWw6WWwpO2ZvcihsZXQgbD0wO2w8ZS5sZW5ndGg7bCsrKXtsZXQgbj1lW2xdO2NvbnN0IGM9bi5lbmRzV2l0aChcIl9fc2VsZlwiKTtjJiYobj1uLnNsaWNlKDAsLTYpKSxvKGBjb25zdCAke3RhKG4sdCl9ID0gJHtpfSgke0pTT04uc3RyaW5naWZ5KG4pfSR7Yz9cIiwgdHJ1ZVwiOlwiXCJ9KSR7cz9cIiFcIjpcIlwifWApLGw8ZS5sZW5ndGgtMSYmcigpfX1mdW5jdGlvbiB6YShlLHQpe2NvbnN0IG49ZS5sZW5ndGg+M3x8ITE7dC5wdXNoKFwiW1wiKSxuJiZ0LmluZGVudCgpLEthKGUsdCxuKSxuJiZ0LmRlaW5kZW50KCksdC5wdXNoKFwiXVwiKX1mdW5jdGlvbiBLYShlLHQsbj0hMSxvPSEwKXtjb25zdHtwdXNoOnIsbmV3bGluZTpzfT10O2ZvcihsZXQgaT0wO2k8ZS5sZW5ndGg7aSsrKXtjb25zdCBsPWVbaV07UChsKT9yKGwpOkUobCk/emEobCx0KTpHYShsLHQpLGk8ZS5sZW5ndGgtMSYmKG4/KG8mJnIoXCIsXCIpLHMoKSk6byYmcihcIiwgXCIpKX19ZnVuY3Rpb24gR2EoZSx0KXtpZihQKGUpKXQucHVzaChlKTtlbHNlIGlmKEEoZSkpdC5wdXNoKHQuaGVscGVyKGUpKTtlbHNlIHN3aXRjaChlLnR5cGUpe2Nhc2UgMTpjYXNlIDk6Y2FzZSAxMTpjYXNlIDEyOkdhKGUuY29kZWdlbk5vZGUsdCk7YnJlYWs7Y2FzZSAyOiFmdW5jdGlvbihlLHQpe3QucHVzaChKU09OLnN0cmluZ2lmeShlLmNvbnRlbnQpLGUpfShlLHQpO2JyZWFrO2Nhc2UgNDpxYShlLHQpO2JyZWFrO2Nhc2UgNTohZnVuY3Rpb24oZSx0KXtjb25zdHtwdXNoOm4saGVscGVyOm8scHVyZTpyfT10O3ImJm4oXCIvKiNfX1BVUkVfXyovXCIpO24oYCR7byhuYyl9KGApLEdhKGUuY29udGVudCx0KSxuKFwiKVwiKX0oZSx0KTticmVhaztjYXNlIDg6SmEoZSx0KTticmVhaztjYXNlIDM6IWZ1bmN0aW9uKGUsdCl7Y29uc3R7cHVzaDpuLGhlbHBlcjpvLHB1cmU6cn09dDtyJiZuKFwiLyojX19QVVJFX18qL1wiKTtuKGAke28oemwpfSgke0pTT04uc3RyaW5naWZ5KGUuY29udGVudCl9KWAsZSl9KGUsdCk7YnJlYWs7Y2FzZSAxMzohZnVuY3Rpb24oZSx0KXtjb25zdHtwdXNoOm4saGVscGVyOm8scHVyZTpyfT10LHt0YWc6cyxwcm9wczppLGNoaWxkcmVuOmwscGF0Y2hGbGFnOmMsZHluYW1pY1Byb3BzOmEsZGlyZWN0aXZlczp1LGlzQmxvY2s6cCxkaXNhYmxlVHJhY2tpbmc6Zixpc0NvbXBvbmVudDpkfT1lO3UmJm4obyhRbCkrXCIoXCIpO3AmJm4oYCgke28oamwpfSgke2Y/XCJ0cnVlXCI6XCJcIn0pLCBgKTtyJiZuKFwiLyojX19QVVJFX18qL1wiKTtjb25zdCBoPXA/WmModC5pblNTUixkKTpZYyh0LmluU1NSLGQpO24obyhoKStcIihcIixlKSxLYShmdW5jdGlvbihlKXtsZXQgdD1lLmxlbmd0aDtmb3IoO3QtLSYmbnVsbD09ZVt0XTspO3JldHVybiBlLnNsaWNlKDAsdCsxKS5tYXAoKGU9PmV8fFwibnVsbFwiKSl9KFtzLGksbCxjLGFdKSx0KSxuKFwiKVwiKSxwJiZuKFwiKVwiKTt1JiYobihcIiwgXCIpLEdhKHUsdCksbihcIilcIikpfShlLHQpO2JyZWFrO2Nhc2UgMTQ6IWZ1bmN0aW9uKGUsdCl7Y29uc3R7cHVzaDpuLGhlbHBlcjpvLHB1cmU6cn09dCxzPVAoZS5jYWxsZWUpP2UuY2FsbGVlOm8oZS5jYWxsZWUpO3ImJm4oXCIvKiNfX1BVUkVfXyovXCIpO24ocytcIihcIixlKSxLYShlLmFyZ3VtZW50cyx0KSxuKFwiKVwiKX0oZSx0KTticmVhaztjYXNlIDE1OiFmdW5jdGlvbihlLHQpe2NvbnN0e3B1c2g6bixpbmRlbnQ6byxkZWluZGVudDpyLG5ld2xpbmU6c309dCx7cHJvcGVydGllczppfT1lO2lmKCFpLmxlbmd0aClyZXR1cm4gdm9pZCBuKFwie31cIixlKTtjb25zdCBsPWkubGVuZ3RoPjF8fCExO24obD9cIntcIjpcInsgXCIpLGwmJm8oKTtmb3IobGV0IGM9MDtjPGkubGVuZ3RoO2MrKyl7Y29uc3R7a2V5OmUsdmFsdWU6b309aVtjXTtZYShlLHQpLG4oXCI6IFwiKSxHYShvLHQpLGM8aS5sZW5ndGgtMSYmKG4oXCIsXCIpLHMoKSl9bCYmcigpLG4obD9cIn1cIjpcIiB9XCIpfShlLHQpO2JyZWFrO2Nhc2UgMTc6IWZ1bmN0aW9uKGUsdCl7emEoZS5lbGVtZW50cyx0KX0oZSx0KTticmVhaztjYXNlIDE4OiFmdW5jdGlvbihlLHQpe2NvbnN0e3B1c2g6bixpbmRlbnQ6byxkZWluZGVudDpyfT10LHtwYXJhbXM6cyxyZXR1cm5zOmksYm9keTpsLG5ld2xpbmU6Yyxpc1Nsb3Q6YX09ZTthJiZuKGBfJHtiY1ttY119KGApO24oXCIoXCIsZSksRShzKT9LYShzLHQpOnMmJkdhKHMsdCk7bihcIikgPT4gXCIpLChjfHxsKSYmKG4oXCJ7XCIpLG8oKSk7aT8oYyYmbihcInJldHVybiBcIiksRShpKT96YShpLHQpOkdhKGksdCkpOmwmJkdhKGwsdCk7KGN8fGwpJiYocigpLG4oXCJ9XCIpKTthJiZuKFwiKVwiKX0oZSx0KTticmVhaztjYXNlIDE5OiFmdW5jdGlvbihlLHQpe2NvbnN0e3Rlc3Q6bixjb25zZXF1ZW50Om8sYWx0ZXJuYXRlOnIsbmV3bGluZTpzfT1lLHtwdXNoOmksaW5kZW50OmwsZGVpbmRlbnQ6YyxuZXdsaW5lOmF9PXQ7aWYoND09PW4udHlwZSl7Y29uc3QgZT0hTWMobi5jb250ZW50KTtlJiZpKFwiKFwiKSxxYShuLHQpLGUmJmkoXCIpXCIpfWVsc2UgaShcIihcIiksR2Eobix0KSxpKFwiKVwiKTtzJiZsKCksdC5pbmRlbnRMZXZlbCsrLHN8fGkoXCIgXCIpLGkoXCI/IFwiKSxHYShvLHQpLHQuaW5kZW50TGV2ZWwtLSxzJiZhKCksc3x8aShcIiBcIiksaShcIjogXCIpO2NvbnN0IHU9MTk9PT1yLnR5cGU7dXx8dC5pbmRlbnRMZXZlbCsrO0dhKHIsdCksdXx8dC5pbmRlbnRMZXZlbC0tO3MmJmMoITApfShlLHQpO2JyZWFrO2Nhc2UgMjA6IWZ1bmN0aW9uKGUsdCl7Y29uc3R7cHVzaDpuLGhlbHBlcjpvLGluZGVudDpyLGRlaW5kZW50OnMsbmV3bGluZTppfT10O24oYF9jYWNoZVske2UuaW5kZXh9XSB8fCAoYCksZS5pc1ZOb2RlJiYocigpLG4oYCR7byhmYyl9KC0xKSxgKSxpKCkpO24oYF9jYWNoZVske2UuaW5kZXh9XSA9IGApLEdhKGUudmFsdWUsdCksZS5pc1ZOb2RlJiYobihcIixcIiksaSgpLG4oYCR7byhmYyl9KDEpLGApLGkoKSxuKGBfY2FjaGVbJHtlLmluZGV4fV1gKSxzKCkpO24oXCIpXCIpfShlLHQpO2JyZWFrO2Nhc2UgMjE6S2EoZS5ib2R5LHQsITAsITEpfX1mdW5jdGlvbiBxYShlLHQpe2NvbnN0e2NvbnRlbnQ6bixpc1N0YXRpYzpvfT1lO3QucHVzaChvP0pTT04uc3RyaW5naWZ5KG4pOm4sZSl9ZnVuY3Rpb24gSmEoZSx0KXtmb3IobGV0IG49MDtuPGUuY2hpbGRyZW4ubGVuZ3RoO24rKyl7Y29uc3Qgbz1lLmNoaWxkcmVuW25dO1Aobyk/dC5wdXNoKG8pOkdhKG8sdCl9fWZ1bmN0aW9uIFlhKGUsdCl7Y29uc3R7cHVzaDpufT10O2lmKDg9PT1lLnR5cGUpbihcIltcIiksSmEoZSx0KSxuKFwiXVwiKTtlbHNlIGlmKGUuaXNTdGF0aWMpe24oTWMoZS5jb250ZW50KT9lLmNvbnRlbnQ6SlNPTi5zdHJpbmdpZnkoZS5jb250ZW50KSxlKX1lbHNlIG4oYFske2UuY29udGVudH1dYCxlKX1jb25zdCBaYT1VYSgvXihpZnxlbHNlfGVsc2UtaWYpJC8sKChlLHQsbik9PmZ1bmN0aW9uKGUsdCxuLG8pe2lmKCEoXCJlbHNlXCI9PT10Lm5hbWV8fHQuZXhwJiZ0LmV4cC5jb250ZW50LnRyaW0oKSkpe3QuZXhwPVRjKFwidHJ1ZVwiLCExLHQuZXhwP3QuZXhwLmxvYzplLmxvYyl9aWYoXCJpZlwiPT09dC5uYW1lKXtjb25zdCByPVFhKGUsdCkscz17dHlwZTo5LGxvYzplLmxvYyxicmFuY2hlczpbcl19O2lmKG4ucmVwbGFjZU5vZGUocyksbylyZXR1cm4gbyhzLHIsITApfWVsc2V7Y29uc3Qgcj1uLnBhcmVudC5jaGlsZHJlbjtsZXQgcz1yLmluZGV4T2YoZSk7Zm9yKDtzLS0gPj0tMTspe2NvbnN0IGk9cltzXTtpZighaXx8MiE9PWkudHlwZXx8aS5jb250ZW50LnRyaW0oKS5sZW5ndGgpe2lmKGkmJjk9PT1pLnR5cGUpe24ucmVtb3ZlTm9kZSgpO2NvbnN0IHI9UWEoZSx0KTtpLmJyYW5jaGVzLnB1c2gocik7Y29uc3Qgcz1vJiZvKGksciwhMSk7amEocixuKSxzJiZzKCksbi5jdXJyZW50Tm9kZT1udWxsfWJyZWFrfW4ucmVtb3ZlTm9kZShpKX19fShlLHQsbiwoKGUsdCxvKT0+e2NvbnN0IHI9bi5wYXJlbnQuY2hpbGRyZW47bGV0IHM9ci5pbmRleE9mKGUpLGk9MDtmb3IoO3MtLSA+PTA7KXtjb25zdCBlPXJbc107ZSYmOT09PWUudHlwZSYmKGkrPWUuYnJhbmNoZXMubGVuZ3RoKX1yZXR1cm4oKT0+e2lmKG8pZS5jb2RlZ2VuTm9kZT1YYSh0LGksbik7ZWxzZXtjb25zdCBvPWZ1bmN0aW9uKGUpe2Zvcig7OylpZigxOT09PWUudHlwZSl7aWYoMTkhPT1lLmFsdGVybmF0ZS50eXBlKXJldHVybiBlO2U9ZS5hbHRlcm5hdGV9ZWxzZSAyMD09PWUudHlwZSYmKGU9ZS52YWx1ZSl9KGUuY29kZWdlbk5vZGUpO28uYWx0ZXJuYXRlPVhhKHQsaStlLmJyYW5jaGVzLmxlbmd0aC0xLG4pfX19KSkpKTtmdW5jdGlvbiBRYShlLHQpe2NvbnN0IG49Mz09PWUudGFnVHlwZTtyZXR1cm57dHlwZToxMCxsb2M6ZS5sb2MsY29uZGl0aW9uOlwiZWxzZVwiPT09dC5uYW1lP3ZvaWQgMDp0LmV4cCxjaGlsZHJlbjpuJiYhSGMoZSxcImZvclwiKT9lLmNoaWxkcmVuOltlXSx1c2VyS2V5OldjKGUsXCJrZXlcIiksaXNUZW1wbGF0ZUlmOm59fWZ1bmN0aW9uIFhhKGUsdCxuKXtyZXR1cm4gZS5jb25kaXRpb24/T2MoZS5jb25kaXRpb24sZXUoZSx0LG4pLEVjKG4uaGVscGVyKHpsKSxbJ1wiXCInLFwidHJ1ZVwiXSkpOmV1KGUsdCxuKX1mdW5jdGlvbiBldShlLHQsbil7Y29uc3R7aGVscGVyOm99PW4scj1rYyhcImtleVwiLFRjKGAke3R9YCwhMSxTYywyKSkse2NoaWxkcmVuOnN9PWUsaT1zWzBdO2lmKDEhPT1zLmxlbmd0aHx8MSE9PWkudHlwZSl7aWYoMT09PXMubGVuZ3RoJiYxMT09PWkudHlwZSl7Y29uc3QgZT1pLmNvZGVnZW5Ob2RlO3JldHVybiBlYShlLHIsbiksZX17bGV0IHQ9NjQ7cmV0dXJuIHhjKG4sbyhNbCksd2MoW3JdKSxzLHQrXCJcIix2b2lkIDAsdm9pZCAwLCEwLCExLCExLGUubG9jKX19e2NvbnN0IGU9aS5jb2RlZ2VuTm9kZSx0PTE0PT09KGw9ZSkudHlwZSYmbC5jYWxsZWU9PT15Yz9sLmFyZ3VtZW50c1sxXS5yZXR1cm5zOmw7cmV0dXJuIDEzPT09dC50eXBlJiZuYSh0LG4pLGVhKHQscixuKSxlfXZhciBsfWNvbnN0IHR1PVVhKFwiZm9yXCIsKChlLHQsbik9Pntjb25zdHtoZWxwZXI6byxyZW1vdmVIZWxwZXI6cn09bjtyZXR1cm4gZnVuY3Rpb24oZSx0LG4sbyl7aWYoIXQuZXhwKXJldHVybjtjb25zdCByPXN1KHQuZXhwKTtpZighcilyZXR1cm47Y29uc3R7c2NvcGVzOnN9PW4se3NvdXJjZTppLHZhbHVlOmwsa2V5OmMsaW5kZXg6YX09cix1PXt0eXBlOjExLGxvYzp0LmxvYyxzb3VyY2U6aSx2YWx1ZUFsaWFzOmwsa2V5QWxpYXM6YyxvYmplY3RJbmRleEFsaWFzOmEscGFyc2VSZXN1bHQ6cixjaGlsZHJlbjpxYyhlKT9lLmNoaWxkcmVuOltlXX07bi5yZXBsYWNlTm9kZSh1KSxzLnZGb3IrKztjb25zdCBwPW8mJm8odSk7cmV0dXJuKCk9PntzLnZGb3ItLSxwJiZwKCl9fShlLHQsbiwodD0+e2NvbnN0IHM9RWMobyhYbCksW3Quc291cmNlXSksaT1xYyhlKSxsPUhjKGUsXCJtZW1vXCIpLGM9V2MoZSxcImtleVwiKSxhPWMmJig2PT09Yy50eXBlP1RjKGMudmFsdWUuY29udGVudCwhMCk6Yy5leHApLHU9Yz9rYyhcImtleVwiLGEpOm51bGwscD00PT09dC5zb3VyY2UudHlwZSYmdC5zb3VyY2UuY29uc3RUeXBlPjAsZj1wPzY0OmM/MTI4OjI1NjtyZXR1cm4gdC5jb2RlZ2VuTm9kZT14YyhuLG8oTWwpLHZvaWQgMCxzLGYrXCJcIix2b2lkIDAsdm9pZCAwLCEwLCFwLCExLGUubG9jKSwoKT0+e2xldCBjO2NvbnN0e2NoaWxkcmVuOmZ9PXQsZD0xIT09Zi5sZW5ndGh8fDEhPT1mWzBdLnR5cGUsaD1KYyhlKT9lOmkmJjE9PT1lLmNoaWxkcmVuLmxlbmd0aCYmSmMoZS5jaGlsZHJlblswXSk/ZS5jaGlsZHJlblswXTpudWxsO2lmKGg/KGM9aC5jb2RlZ2VuTm9kZSxpJiZ1JiZlYShjLHUsbikpOmQ/Yz14YyhuLG8oTWwpLHU/d2MoW3VdKTp2b2lkIDAsZS5jaGlsZHJlbixcIjY0XCIsdm9pZCAwLHZvaWQgMCwhMCx2b2lkIDAsITEpOihjPWZbMF0uY29kZWdlbk5vZGUsaSYmdSYmZWEoYyx1LG4pLGMuaXNCbG9jayE9PSFwJiYoYy5pc0Jsb2NrPyhyKGpsKSxyKFpjKG4uaW5TU1IsYy5pc0NvbXBvbmVudCkpKTpyKFljKG4uaW5TU1IsYy5pc0NvbXBvbmVudCkpKSxjLmlzQmxvY2s9IXAsYy5pc0Jsb2NrPyhvKGpsKSxvKFpjKG4uaW5TU1IsYy5pc0NvbXBvbmVudCkpKTpvKFljKG4uaW5TU1IsYy5pc0NvbXBvbmVudCkpKSxsKXtjb25zdCBlPSRjKGx1KHQucGFyc2VSZXN1bHQsW1RjKFwiX2NhY2hlZFwiKV0pKTtlLmJvZHk9e3R5cGU6MjEsYm9keTpbTmMoW1wiY29uc3QgX21lbW8gPSAoXCIsbC5leHAsXCIpXCJdKSxOYyhbXCJpZiAoX2NhY2hlZFwiLC4uLmE/W1wiICYmIF9jYWNoZWQua2V5ID09PSBcIixhXTpbXSxgICYmICR7bi5oZWxwZXJTdHJpbmcoX2MpfShfY2FjaGVkLCBfbWVtbykpIHJldHVybiBfY2FjaGVkYF0pLE5jKFtcImNvbnN0IF9pdGVtID0gXCIsY10pLFRjKFwiX2l0ZW0ubWVtbyA9IF9tZW1vXCIpLFRjKFwicmV0dXJuIF9pdGVtXCIpXSxsb2M6U2N9LHMuYXJndW1lbnRzLnB1c2goZSxUYyhcIl9jYWNoZVwiKSxUYyhTdHJpbmcobi5jYWNoZWQrKykpKX1lbHNlIHMuYXJndW1lbnRzLnB1c2goJGMobHUodC5wYXJzZVJlc3VsdCksYywhMCkpfX0pKX0pKTtjb25zdCBudT0vKFtcXHNcXFNdKj8pXFxzKyg/OmlufG9mKVxccysoW1xcc1xcU10qKS8sb3U9LywoW14sXFx9XFxdXSopKD86LChbXixcXH1cXF1dKikpPyQvLHJ1PS9eXFwofFxcKSQvZztmdW5jdGlvbiBzdShlLHQpe2NvbnN0IG49ZS5sb2Msbz1lLmNvbnRlbnQscj1vLm1hdGNoKG51KTtpZighcilyZXR1cm47Y29uc3RbLHMsaV09cixsPXtzb3VyY2U6aXUobixpLnRyaW0oKSxvLmluZGV4T2YoaSxzLmxlbmd0aCkpLHZhbHVlOnZvaWQgMCxrZXk6dm9pZCAwLGluZGV4OnZvaWQgMH07bGV0IGM9cy50cmltKCkucmVwbGFjZShydSxcIlwiKS50cmltKCk7Y29uc3QgYT1zLmluZGV4T2YoYyksdT1jLm1hdGNoKG91KTtpZih1KXtjPWMucmVwbGFjZShvdSxcIlwiKS50cmltKCk7Y29uc3QgZT11WzFdLnRyaW0oKTtsZXQgdDtpZihlJiYodD1vLmluZGV4T2YoZSxhK2MubGVuZ3RoKSxsLmtleT1pdShuLGUsdCkpLHVbMl0pe2NvbnN0IHI9dVsyXS50cmltKCk7ciYmKGwuaW5kZXg9aXUobixyLG8uaW5kZXhPZihyLGwua2V5P3QrZS5sZW5ndGg6YStjLmxlbmd0aCkpKX19cmV0dXJuIGMmJihsLnZhbHVlPWl1KG4sYyxhKSksbH1mdW5jdGlvbiBpdShlLHQsbil7cmV0dXJuIFRjKHQsITEsamMoZSxuLHQubGVuZ3RoKSl9ZnVuY3Rpb24gbHUoe3ZhbHVlOmUsa2V5OnQsaW5kZXg6bn0sbz1bXSl7cmV0dXJuIGZ1bmN0aW9uKGUpe2xldCB0PWUubGVuZ3RoO2Zvcig7dC0tJiYhZVt0XTspO3JldHVybiBlLnNsaWNlKDAsdCsxKS5tYXAoKChlLHQpPT5lfHxUYyhcIl9cIi5yZXBlYXQodCsxKSwhMSkpKX0oW2UsdCxuLC4uLm9dKX1jb25zdCBjdT1UYyhcInVuZGVmaW5lZFwiLCExKSxhdT0oZSx0KT0+e2lmKDE9PT1lLnR5cGUmJigxPT09ZS50YWdUeXBlfHwzPT09ZS50YWdUeXBlKSl7Y29uc3Qgbj1IYyhlLFwic2xvdFwiKTtpZihuKXJldHVybiB0LnNjb3Blcy52U2xvdCsrLCgpPT57dC5zY29wZXMudlNsb3QtLX19fSx1dT0oZSx0LG4pPT4kYyhlLHQsITEsITAsdC5sZW5ndGg/dFswXS5sb2M6bik7ZnVuY3Rpb24gcHUoZSx0LG49dXUpe3QuaGVscGVyKG1jKTtjb25zdHtjaGlsZHJlbjpvLGxvYzpyfT1lLHM9W10saT1bXTtsZXQgbD10LnNjb3Blcy52U2xvdD4wfHx0LnNjb3Blcy52Rm9yPjA7Y29uc3QgYz1IYyhlLFwic2xvdFwiLCEwKTtpZihjKXtjb25zdHthcmc6ZSxleHA6dH09YztlJiYhUmMoZSkmJihsPSEwKSxzLnB1c2goa2MoZXx8VGMoXCJkZWZhdWx0XCIsITApLG4odCxvLHIpKSl9bGV0IGE9ITEsdT0hMTtjb25zdCBwPVtdLGY9bmV3IFNldDtmb3IobGV0IG09MDttPG8ubGVuZ3RoO20rKyl7Y29uc3QgZT1vW21dO2xldCByO2lmKCFxYyhlKXx8IShyPUhjKGUsXCJzbG90XCIsITApKSl7MyE9PWUudHlwZSYmcC5wdXNoKGUpO2NvbnRpbnVlfWlmKGMpYnJlYWs7YT0hMDtjb25zdHtjaGlsZHJlbjpkLGxvYzpofT1lLHthcmc6Zz1UYyhcImRlZmF1bHRcIiwhMCksZXhwOnZ9PXI7bGV0IHk7UmMoZyk/eT1nP2cuY29udGVudDpcImRlZmF1bHRcIjpsPSEwO2NvbnN0IF89bih2LGQsaCk7bGV0IGIsUyx4O2lmKGI9SGMoZSxcImlmXCIpKWw9ITAsaS5wdXNoKE9jKGIuZXhwLGZ1KGcsXyksY3UpKTtlbHNlIGlmKFM9SGMoZSwvXmVsc2UoLWlmKT8kLywhMCkpe2xldCBlLHQ9bTtmb3IoO3QtLSYmKGU9b1t0XSwzPT09ZS50eXBlKTspO2lmKGUmJnFjKGUpJiZIYyhlLFwiaWZcIikpe28uc3BsaWNlKG0sMSksbS0tO2xldCBlPWlbaS5sZW5ndGgtMV07Zm9yKDsxOT09PWUuYWx0ZXJuYXRlLnR5cGU7KWU9ZS5hbHRlcm5hdGU7ZS5hbHRlcm5hdGU9Uy5leHA/T2MoUy5leHAsZnUoZyxfKSxjdSk6ZnUoZyxfKX19ZWxzZSBpZih4PUhjKGUsXCJmb3JcIikpe2w9ITA7Y29uc3QgZT14LnBhcnNlUmVzdWx0fHxzdSh4LmV4cCk7ZSYmaS5wdXNoKEVjKHQuaGVscGVyKFhsKSxbZS5zb3VyY2UsJGMobHUoZSksZnUoZyxfKSwhMCldKSl9ZWxzZXtpZih5KXtpZihmLmhhcyh5KSljb250aW51ZTtmLmFkZCh5KSxcImRlZmF1bHRcIj09PXkmJih1PSEwKX1zLnB1c2goa2MoZyxfKSl9fWlmKCFjKXtjb25zdCBlPShlLHQpPT5rYyhcImRlZmF1bHRcIixuKGUsdCxyKSk7YT9wLmxlbmd0aCYmcC5zb21lKChlPT5odShlKSkpJiYodXx8cy5wdXNoKGUodm9pZCAwLHApKSk6cy5wdXNoKGUodm9pZCAwLG8pKX1jb25zdCBkPWw/MjpkdShlLmNoaWxkcmVuKT8zOjE7bGV0IGg9d2Mocy5jb25jYXQoa2MoXCJfXCIsVGMoZCtcIlwiLCExKSkpLHIpO3JldHVybiBpLmxlbmd0aCYmKGg9RWModC5oZWxwZXIodGMpLFtoLENjKGkpXSkpLHtzbG90czpoLGhhc0R5bmFtaWNTbG90czpsfX1mdW5jdGlvbiBmdShlLHQpe3JldHVybiB3Yyhba2MoXCJuYW1lXCIsZSksa2MoXCJmblwiLHQpXSl9ZnVuY3Rpb24gZHUoZSl7Zm9yKGxldCB0PTA7dDxlLmxlbmd0aDt0Kyspe2NvbnN0IG49ZVt0XTtzd2l0Y2gobi50eXBlKXtjYXNlIDE6aWYoMj09PW4udGFnVHlwZXx8ZHUobi5jaGlsZHJlbikpcmV0dXJuITA7YnJlYWs7Y2FzZSA5OmlmKGR1KG4uYnJhbmNoZXMpKXJldHVybiEwO2JyZWFrO2Nhc2UgMTA6Y2FzZSAxMTppZihkdShuLmNoaWxkcmVuKSlyZXR1cm4hMH19cmV0dXJuITF9ZnVuY3Rpb24gaHUoZSl7cmV0dXJuIDIhPT1lLnR5cGUmJjEyIT09ZS50eXBlfHwoMj09PWUudHlwZT8hIWUuY29udGVudC50cmltKCk6aHUoZS5jb250ZW50KSl9Y29uc3QgbXU9bmV3IFdlYWtNYXAsZ3U9KGUsdCk9PmZ1bmN0aW9uKCl7aWYoMSE9PShlPXQuY3VycmVudE5vZGUpLnR5cGV8fDAhPT1lLnRhZ1R5cGUmJjEhPT1lLnRhZ1R5cGUpcmV0dXJuO2NvbnN0e3RhZzpuLHByb3BzOm99PWUscj0xPT09ZS50YWdUeXBlO2xldCBzPXI/ZnVuY3Rpb24oZSx0LG49ITEpe2xldHt0YWc6b309ZTtjb25zdCByPWJ1KG8pLHM9V2MoZSxcImlzXCIpO2lmKHMpaWYocil7Y29uc3QgZT02PT09cy50eXBlP3MudmFsdWUmJlRjKHMudmFsdWUuY29udGVudCwhMCk6cy5leHA7aWYoZSlyZXR1cm4gRWModC5oZWxwZXIoSmwpLFtlXSl9ZWxzZSA2PT09cy50eXBlJiZzLnZhbHVlLmNvbnRlbnQuc3RhcnRzV2l0aChcInZ1ZTpcIikmJihvPXMudmFsdWUuY29udGVudC5zbGljZSg0KSk7Y29uc3QgaT0hciYmSGMoZSxcImlzXCIpO2lmKGkmJmkuZXhwKXJldHVybiBFYyh0LmhlbHBlcihKbCksW2kuZXhwXSk7Y29uc3QgbD1QYyhvKXx8dC5pc0J1aWx0SW5Db21wb25lbnQobyk7aWYobClyZXR1cm4gbnx8dC5oZWxwZXIobCksbDtyZXR1cm4gdC5oZWxwZXIocWwpLHQuY29tcG9uZW50cy5hZGQobyksdGEobyxcImNvbXBvbmVudFwiKX0oZSx0KTpgXCIke259XCJgO2NvbnN0IGk9TShzKSYmcy5jYWxsZWU9PT1KbDtsZXQgbCxjLGEsdSxwLGYsZD0wLGg9aXx8cz09PVZsfHxzPT09SWx8fCFyJiYoXCJzdmdcIj09PW58fFwiZm9yZWlnbk9iamVjdFwiPT09bik7aWYoby5sZW5ndGg+MCl7Y29uc3Qgbj12dShlLHQsdm9pZCAwLHIsaSk7bD1uLnByb3BzLGQ9bi5wYXRjaEZsYWcscD1uLmR5bmFtaWNQcm9wTmFtZXM7Y29uc3Qgbz1uLmRpcmVjdGl2ZXM7Zj1vJiZvLmxlbmd0aD9DYyhvLm1hcCgoZT0+ZnVuY3Rpb24oZSx0KXtjb25zdCBuPVtdLG89bXUuZ2V0KGUpO28/bi5wdXNoKHQuaGVscGVyU3RyaW5nKG8pKToodC5oZWxwZXIoWWwpLHQuZGlyZWN0aXZlcy5hZGQoZS5uYW1lKSxuLnB1c2godGEoZS5uYW1lLFwiZGlyZWN0aXZlXCIpKSk7Y29uc3R7bG9jOnJ9PWU7ZS5leHAmJm4ucHVzaChlLmV4cCk7ZS5hcmcmJihlLmV4cHx8bi5wdXNoKFwidm9pZCAwXCIpLG4ucHVzaChlLmFyZykpO2lmKE9iamVjdC5rZXlzKGUubW9kaWZpZXJzKS5sZW5ndGgpe2UuYXJnfHwoZS5leHB8fG4ucHVzaChcInZvaWQgMFwiKSxuLnB1c2goXCJ2b2lkIDBcIikpO2NvbnN0IHQ9VGMoXCJ0cnVlXCIsITEscik7bi5wdXNoKHdjKGUubW9kaWZpZXJzLm1hcCgoZT0+a2MoZSx0KSkpLHIpKX1yZXR1cm4gQ2MobixlLmxvYyl9KGUsdCkpKSk6dm9pZCAwLG4uc2hvdWxkVXNlQmxvY2smJihoPSEwKX1pZihlLmNoaWxkcmVuLmxlbmd0aD4wKXtzPT09QmwmJihoPSEwLGR8PTEwMjQpO2lmKHImJnMhPT1WbCYmcyE9PUJsKXtjb25zdHtzbG90czpuLGhhc0R5bmFtaWNTbG90czpvfT1wdShlLHQpO2M9bixvJiYoZHw9MTAyNCl9ZWxzZSBpZigxPT09ZS5jaGlsZHJlbi5sZW5ndGgmJnMhPT1WbCl7Y29uc3Qgbj1lLmNoaWxkcmVuWzBdLG89bi50eXBlLHI9NT09PW98fDg9PT1vO3ImJjA9PT1GYShuLHQpJiYoZHw9MSksYz1yfHwyPT09bz9uOmUuY2hpbGRyZW59ZWxzZSBjPWUuY2hpbGRyZW59MCE9PWQmJihhPVN0cmluZyhkKSxwJiZwLmxlbmd0aCYmKHU9ZnVuY3Rpb24oZSl7bGV0IHQ9XCJbXCI7Zm9yKGxldCBuPTAsbz1lLmxlbmd0aDtuPG87bisrKXQrPUpTT04uc3RyaW5naWZ5KGVbbl0pLG48by0xJiYodCs9XCIsIFwiKTtyZXR1cm4gdCtcIl1cIn0ocCkpKSxlLmNvZGVnZW5Ob2RlPXhjKHQscyxsLGMsYSx1LGYsISFoLCExLHIsZS5sb2MpfTtmdW5jdGlvbiB2dShlLHQsbj1lLnByb3BzLG8scixzPSExKXtjb25zdHt0YWc6aSxsb2M6bCxjaGlsZHJlbjpjfT1lO2xldCBhPVtdO2NvbnN0IHU9W10scD1bXSxmPWMubGVuZ3RoPjA7bGV0IGQ9ITEsaD0wLG09ITEsZz0hMSx2PSExLHk9ITEsXz0hMSxiPSExO2NvbnN0IFM9W10sQz0oe2tleTplLHZhbHVlOm59KT0+e2lmKFJjKGUpKXtjb25zdCBzPWUuY29udGVudCxpPXgocyk7aWYoIWl8fG8mJiFyfHxcIm9uY2xpY2tcIj09PXMudG9Mb3dlckNhc2UoKXx8XCJvblVwZGF0ZTptb2RlbFZhbHVlXCI9PT1zfHxVKHMpfHwoeT0hMCksaSYmVShzKSYmKGI9ITApLDIwPT09bi50eXBlfHwoND09PW4udHlwZXx8OD09PW4udHlwZSkmJkZhKG4sdCk+MClyZXR1cm47XCJyZWZcIj09PXM/bT0hMDpcImNsYXNzXCI9PT1zP2c9ITA6XCJzdHlsZVwiPT09cz92PSEwOlwia2V5XCI9PT1zfHxTLmluY2x1ZGVzKHMpfHxTLnB1c2gocyksIW98fFwiY2xhc3NcIiE9PXMmJlwic3R5bGVcIiE9PXN8fFMuaW5jbHVkZXMocyl8fFMucHVzaChzKX1lbHNlIF89ITB9O2ZvcihsZXQgeD0wO3g8bi5sZW5ndGg7eCsrKXtjb25zdCBvPW5beF07aWYoNj09PW8udHlwZSl7Y29uc3R7bG9jOmUsbmFtZTpuLHZhbHVlOnJ9PW87bGV0IHM9ITA7aWYoXCJyZWZcIj09PW4mJihtPSEwLHQuc2NvcGVzLnZGb3I+MCYmYS5wdXNoKGtjKFRjKFwicmVmX2ZvclwiLCEwKSxUYyhcInRydWVcIikpKSksXCJpc1wiPT09biYmKGJ1KGkpfHxyJiZyLmNvbnRlbnQuc3RhcnRzV2l0aChcInZ1ZTpcIikpKWNvbnRpbnVlO2EucHVzaChrYyhUYyhuLCEwLGpjKGUsMCxuLmxlbmd0aCkpLFRjKHI/ci5jb250ZW50OlwiXCIscyxyP3IubG9jOmUpKSl9ZWxzZXtjb25zdHtuYW1lOm4sYXJnOnIsZXhwOmMsbG9jOmh9PW8sbT1cImJpbmRcIj09PW4sZz1cIm9uXCI9PT1uO2lmKFwic2xvdFwiPT09biljb250aW51ZTtpZihcIm9uY2VcIj09PW58fFwibWVtb1wiPT09biljb250aW51ZTtpZihcImlzXCI9PT1ufHxtJiZ6YyhyLFwiaXNcIikmJmJ1KGkpKWNvbnRpbnVlO2lmKGcmJnMpY29udGludWU7aWYoKG0mJnpjKHIsXCJrZXlcIil8fGcmJmYmJnpjKHIsXCJ2dWU6YmVmb3JlLXVwZGF0ZVwiKSkmJihkPSEwKSxtJiZ6YyhyLFwicmVmXCIpJiZ0LnNjb3Blcy52Rm9yPjAmJmEucHVzaChrYyhUYyhcInJlZl9mb3JcIiwhMCksVGMoXCJ0cnVlXCIpKSksIXImJihtfHxnKSl7Xz0hMCxjJiYoYS5sZW5ndGgmJih1LnB1c2god2MoeXUoYSksbCkpLGE9W10pLHUucHVzaChtP2M6e3R5cGU6MTQsbG9jOmgsY2FsbGVlOnQuaGVscGVyKGNjKSxhcmd1bWVudHM6W2NdfSkpO2NvbnRpbnVlfWNvbnN0IHY9dC5kaXJlY3RpdmVUcmFuc2Zvcm1zW25dO2lmKHYpe2NvbnN0e3Byb3BzOm4sbmVlZFJ1bnRpbWU6cn09dihvLGUsdCk7IXMmJm4uZm9yRWFjaChDKSxhLnB1c2goLi4ubiksciYmKHAucHVzaChvKSxBKHIpJiZtdS5zZXQobyxyKSl9ZWxzZSBEKG4pfHwocC5wdXNoKG8pLGYmJihkPSEwKSl9fWxldCB3O2lmKHUubGVuZ3RoPyhhLmxlbmd0aCYmdS5wdXNoKHdjKHl1KGEpLGwpKSx3PXUubGVuZ3RoPjE/RWModC5oZWxwZXIob2MpLHUsbCk6dVswXSk6YS5sZW5ndGgmJih3PXdjKHl1KGEpLGwpKSxfP2h8PTE2OihnJiYhbyYmKGh8PTIpLHYmJiFvJiYoaHw9NCksUy5sZW5ndGgmJihofD04KSx5JiYoaHw9MzIpKSxkfHwwIT09aCYmMzIhPT1ofHwhKG18fGJ8fHAubGVuZ3RoPjApfHwoaHw9NTEyKSwhdC5pblNTUiYmdylzd2l0Y2gody50eXBlKXtjYXNlIDE1OmxldCBlPS0xLG49LTEsbz0hMTtmb3IobGV0IHQ9MDt0PHcucHJvcGVydGllcy5sZW5ndGg7dCsrKXtjb25zdCByPXcucHJvcGVydGllc1t0XS5rZXk7UmMocik/XCJjbGFzc1wiPT09ci5jb250ZW50P2U9dDpcInN0eWxlXCI9PT1yLmNvbnRlbnQmJihuPXQpOnIuaXNIYW5kbGVyS2V5fHwobz0hMCl9Y29uc3Qgcj13LnByb3BlcnRpZXNbZV0scz13LnByb3BlcnRpZXNbbl07bz93PUVjKHQuaGVscGVyKGljKSxbd10pOihyJiYhUmMoci52YWx1ZSkmJihyLnZhbHVlPUVjKHQuaGVscGVyKHJjKSxbci52YWx1ZV0pKSxzJiYodnx8ND09PXMudmFsdWUudHlwZSYmXCJbXCI9PT1zLnZhbHVlLmNvbnRlbnQudHJpbSgpWzBdfHwxNz09PXMudmFsdWUudHlwZSkmJihzLnZhbHVlPUVjKHQuaGVscGVyKHNjKSxbcy52YWx1ZV0pKSk7YnJlYWs7Y2FzZSAxNDpicmVhaztkZWZhdWx0Onc9RWModC5oZWxwZXIoaWMpLFtFYyh0LmhlbHBlcihsYyksW3ddKV0pfXJldHVybntwcm9wczp3LGRpcmVjdGl2ZXM6cCxwYXRjaEZsYWc6aCxkeW5hbWljUHJvcE5hbWVzOlMsc2hvdWxkVXNlQmxvY2s6ZH19ZnVuY3Rpb24geXUoZSl7Y29uc3QgdD1uZXcgTWFwLG49W107Zm9yKGxldCBvPTA7bzxlLmxlbmd0aDtvKyspe2NvbnN0IHI9ZVtvXTtpZig4PT09ci5rZXkudHlwZXx8IXIua2V5LmlzU3RhdGljKXtuLnB1c2gocik7Y29udGludWV9Y29uc3Qgcz1yLmtleS5jb250ZW50LGk9dC5nZXQocyk7aT8oXCJzdHlsZVwiPT09c3x8XCJjbGFzc1wiPT09c3x8eChzKSkmJl91KGkscik6KHQuc2V0KHMsciksbi5wdXNoKHIpKX1yZXR1cm4gbn1mdW5jdGlvbiBfdShlLHQpezE3PT09ZS52YWx1ZS50eXBlP2UudmFsdWUuZWxlbWVudHMucHVzaCh0LnZhbHVlKTplLnZhbHVlPUNjKFtlLnZhbHVlLHQudmFsdWVdLGUubG9jKX1mdW5jdGlvbiBidShlKXtyZXR1cm5cImNvbXBvbmVudFwiPT09ZXx8XCJDb21wb25lbnRcIj09PWV9Y29uc3QgU3U9KGUsdCk9PntpZihKYyhlKSl7Y29uc3R7Y2hpbGRyZW46bixsb2M6b309ZSx7c2xvdE5hbWU6cixzbG90UHJvcHM6c309ZnVuY3Rpb24oZSx0KXtsZXQgbixvPSdcImRlZmF1bHRcIic7Y29uc3Qgcj1bXTtmb3IobGV0IHM9MDtzPGUucHJvcHMubGVuZ3RoO3MrKyl7Y29uc3QgdD1lLnByb3BzW3NdOzY9PT10LnR5cGU/dC52YWx1ZSYmKFwibmFtZVwiPT09dC5uYW1lP289SlNPTi5zdHJpbmdpZnkodC52YWx1ZS5jb250ZW50KToodC5uYW1lPXoodC5uYW1lKSxyLnB1c2godCkpKTpcImJpbmRcIj09PXQubmFtZSYmemModC5hcmcsXCJuYW1lXCIpP3QuZXhwJiYobz10LmV4cCk6KFwiYmluZFwiPT09dC5uYW1lJiZ0LmFyZyYmUmModC5hcmcpJiYodC5hcmcuY29udGVudD16KHQuYXJnLmNvbnRlbnQpKSxyLnB1c2godCkpfWlmKHIubGVuZ3RoPjApe2NvbnN0e3Byb3BzOm8sZGlyZWN0aXZlczpzfT12dShlLHQsciwhMSwhMSk7bj1vfXJldHVybntzbG90TmFtZTpvLHNsb3RQcm9wczpufX0oZSx0KSxpPVt0LnByZWZpeElkZW50aWZpZXJzP1wiX2N0eC4kc2xvdHNcIjpcIiRzbG90c1wiLHIsXCJ7fVwiLFwidW5kZWZpbmVkXCIsXCJ0cnVlXCJdO2xldCBsPTI7cyYmKGlbMl09cyxsPTMpLG4ubGVuZ3RoJiYoaVszXT0kYyhbXSxuLCExLCExLG8pLGw9NCksdC5zY29wZUlkJiYhdC5zbG90dGVkJiYobD01KSxpLnNwbGljZShsKSxlLmNvZGVnZW5Ob2RlPUVjKHQuaGVscGVyKGVjKSxpLG8pfX07Y29uc3QgeHU9L15cXHMqKFtcXHckX10rfChhc3luY1xccyopP1xcKFteKV0qP1xcKSlcXHMqPT58XlxccyooYXN5bmNcXHMrKT9mdW5jdGlvbig/OlxccytbXFx3JF0rKT9cXHMqXFwoLyxDdT0oZSx0LG4sbyk9Pntjb25zdHtsb2M6cixtb2RpZmllcnM6cyxhcmc6aX09ZTtsZXQgbDtpZig0PT09aS50eXBlKWlmKGkuaXNTdGF0aWMpe2xldCBlPWkuY29udGVudDtlLnN0YXJ0c1dpdGgoXCJ2dWU6XCIpJiYoZT1gdm5vZGUtJHtlLnNsaWNlKDQpfWApLGw9VGMoSih6KGUpKSwhMCxpLmxvYyl9ZWxzZSBsPU5jKFtgJHtuLmhlbHBlclN0cmluZyhwYyl9KGAsaSxcIilcIl0pO2Vsc2UgbD1pLGwuY2hpbGRyZW4udW5zaGlmdChgJHtuLmhlbHBlclN0cmluZyhwYyl9KGApLGwuY2hpbGRyZW4ucHVzaChcIilcIik7bGV0IGM9ZS5leHA7YyYmIWMuY29udGVudC50cmltKCkmJihjPXZvaWQgMCk7bGV0IGE9bi5jYWNoZUhhbmRsZXJzJiYhYyYmIW4uaW5WT25jZTtpZihjKXtjb25zdCBlPUxjKGMuY29udGVudCksdD0hKGV8fHh1LnRlc3QoYy5jb250ZW50KSksbj1jLmNvbnRlbnQuaW5jbHVkZXMoXCI7XCIpOyh0fHxhJiZlKSYmKGM9TmMoW2Ake3Q/XCIkZXZlbnRcIjpcIiguLi5hcmdzKVwifSA9PiAke24/XCJ7XCI6XCIoXCJ9YCxjLG4/XCJ9XCI6XCIpXCJdKSl9bGV0IHU9e3Byb3BzOltrYyhsLGN8fFRjKFwiKCkgPT4ge31cIiwhMSxyKSldfTtyZXR1cm4gbyYmKHU9byh1KSksYSYmKHUucHJvcHNbMF0udmFsdWU9bi5jYWNoZSh1LnByb3BzWzBdLnZhbHVlKSksdS5wcm9wcy5mb3JFYWNoKChlPT5lLmtleS5pc0hhbmRsZXJLZXk9ITApKSx1fSx3dT0oZSx0LG4pPT57Y29uc3R7ZXhwOm8sbW9kaWZpZXJzOnIsbG9jOnN9PWUsaT1lLmFyZztyZXR1cm4gNCE9PWkudHlwZT8oaS5jaGlsZHJlbi51bnNoaWZ0KFwiKFwiKSxpLmNoaWxkcmVuLnB1c2goJykgfHwgXCJcIicpKTppLmlzU3RhdGljfHwoaS5jb250ZW50PWAke2kuY29udGVudH0gfHwgXCJcImApLHIuaW5jbHVkZXMoXCJjYW1lbFwiKSYmKDQ9PT1pLnR5cGU/aS5jb250ZW50PWkuaXNTdGF0aWM/eihpLmNvbnRlbnQpOmAke24uaGVscGVyU3RyaW5nKGFjKX0oJHtpLmNvbnRlbnR9KWA6KGkuY2hpbGRyZW4udW5zaGlmdChgJHtuLmhlbHBlclN0cmluZyhhYyl9KGApLGkuY2hpbGRyZW4ucHVzaChcIilcIikpKSxuLmluU1NSfHwoci5pbmNsdWRlcyhcInByb3BcIikmJmt1KGksXCIuXCIpLHIuaW5jbHVkZXMoXCJhdHRyXCIpJiZrdShpLFwiXlwiKSksIW98fDQ9PT1vLnR5cGUmJiFvLmNvbnRlbnQudHJpbSgpP3twcm9wczpba2MoaSxUYyhcIlwiLCEwLHMpKV19Ontwcm9wczpba2MoaSxvKV19fSxrdT0oZSx0KT0+ezQ9PT1lLnR5cGU/ZS5jb250ZW50PWUuaXNTdGF0aWM/dCtlLmNvbnRlbnQ6YFxcYCR7dH1cXCR7JHtlLmNvbnRlbnR9fVxcYGA6KGUuY2hpbGRyZW4udW5zaGlmdChgJyR7dH0nICsgKGApLGUuY2hpbGRyZW4ucHVzaChcIilcIikpfSxUdT0oZSx0KT0+e2lmKDA9PT1lLnR5cGV8fDE9PT1lLnR5cGV8fDExPT09ZS50eXBlfHwxMD09PWUudHlwZSlyZXR1cm4oKT0+e2NvbnN0IG49ZS5jaGlsZHJlbjtsZXQgbyxyPSExO2ZvcihsZXQgZT0wO2U8bi5sZW5ndGg7ZSsrKXtjb25zdCB0PW5bZV07aWYoS2ModCkpe3I9ITA7Zm9yKGxldCByPWUrMTtyPG4ubGVuZ3RoO3IrKyl7Y29uc3Qgcz1uW3JdO2lmKCFLYyhzKSl7bz12b2lkIDA7YnJlYWt9b3x8KG89bltlXT1OYyhbdF0sdC5sb2MpKSxvLmNoaWxkcmVuLnB1c2goXCIgKyBcIixzKSxuLnNwbGljZShyLDEpLHItLX19fWlmKHImJigxIT09bi5sZW5ndGh8fDAhPT1lLnR5cGUmJigxIT09ZS50eXBlfHwwIT09ZS50YWdUeXBlfHxlLnByb3BzLmZpbmQoKGU9Pjc9PT1lLnR5cGUmJiF0LmRpcmVjdGl2ZVRyYW5zZm9ybXNbZS5uYW1lXSkpKSkpZm9yKGxldCBlPTA7ZTxuLmxlbmd0aDtlKyspe2NvbnN0IG89bltlXTtpZihLYyhvKXx8OD09PW8udHlwZSl7Y29uc3Qgcj1bXTsyPT09by50eXBlJiZcIiBcIj09PW8uY29udGVudHx8ci5wdXNoKG8pLHQuc3NyfHwwIT09RmEobyx0KXx8ci5wdXNoKFwiMVwiKSxuW2VdPXt0eXBlOjEyLGNvbnRlbnQ6byxsb2M6by5sb2MsY29kZWdlbk5vZGU6RWModC5oZWxwZXIoS2wpLHIpfX19fX0sTnU9bmV3IFdlYWtTZXQsRXU9KGUsdCk9PntpZigxPT09ZS50eXBlJiZIYyhlLFwib25jZVwiLCEwKSl7aWYoTnUuaGFzKGUpfHx0LmluVk9uY2UpcmV0dXJuO3JldHVybiBOdS5hZGQoZSksdC5pblZPbmNlPSEwLHQuaGVscGVyKGZjKSwoKT0+e3QuaW5WT25jZT0hMTtjb25zdCBlPXQuY3VycmVudE5vZGU7ZS5jb2RlZ2VuTm9kZSYmKGUuY29kZWdlbk5vZGU9dC5jYWNoZShlLmNvZGVnZW5Ob2RlLCEwKSl9fX0sJHU9KGUsdCxuKT0+e2NvbnN0e2V4cDpvLGFyZzpyfT1lO2lmKCFvKXJldHVybiBPdSgpO2NvbnN0IHM9by5sb2Muc291cmNlLGk9ND09PW8udHlwZT9vLmNvbnRlbnQ6cztpZighaS50cmltKCl8fCFMYyhpKSlyZXR1cm4gT3UoKTtjb25zdCBsPXJ8fFRjKFwibW9kZWxWYWx1ZVwiLCEwKSxjPXI/UmMocik/YG9uVXBkYXRlOiR7ci5jb250ZW50fWA6TmMoWydcIm9uVXBkYXRlOlwiICsgJyxyXSk6XCJvblVwZGF0ZTptb2RlbFZhbHVlXCI7bGV0IGE7YT1OYyhbYCR7bi5pc1RTP1wiKCRldmVudDogYW55KVwiOlwiJGV2ZW50XCJ9ID0+ICgoYCxvLFwiKSA9ICRldmVudClcIl0pO2NvbnN0IHU9W2tjKGwsZS5leHApLGtjKGMsYSldO2lmKGUubW9kaWZpZXJzLmxlbmd0aCYmMT09PXQudGFnVHlwZSl7Y29uc3QgdD1lLm1vZGlmaWVycy5tYXAoKGU9PihNYyhlKT9lOkpTT04uc3RyaW5naWZ5KGUpKStcIjogdHJ1ZVwiKSkuam9pbihcIiwgXCIpLG49cj9SYyhyKT9gJHtyLmNvbnRlbnR9TW9kaWZpZXJzYDpOYyhbciwnICsgXCJNb2RpZmllcnNcIiddKTpcIm1vZGVsTW9kaWZpZXJzXCI7dS5wdXNoKGtjKG4sVGMoYHsgJHt0fSB9YCwhMSxlLmxvYywyKSkpfXJldHVybiBPdSh1KX07ZnVuY3Rpb24gT3UoZT1bXSl7cmV0dXJue3Byb3BzOmV9fWNvbnN0IFJ1PW5ldyBXZWFrU2V0LEZ1PShlLHQpPT57aWYoMT09PWUudHlwZSl7Y29uc3Qgbj1IYyhlLFwibWVtb1wiKTtpZighbnx8UnUuaGFzKGUpKXJldHVybjtyZXR1cm4gUnUuYWRkKGUpLCgpPT57Y29uc3Qgbz1lLmNvZGVnZW5Ob2RlfHx0LmN1cnJlbnROb2RlLmNvZGVnZW5Ob2RlO28mJjEzPT09by50eXBlJiYoMSE9PWUudGFnVHlwZSYmbmEobyx0KSxlLmNvZGVnZW5Ob2RlPUVjKHQuaGVscGVyKHljKSxbbi5leHAsJGModm9pZCAwLG8pLFwiX2NhY2hlXCIsU3RyaW5nKHQuY2FjaGVkKyspXSkpfX19O2Z1bmN0aW9uIFB1KGUsdD17fSl7Y29uc3Qgbj10Lm9uRXJyb3J8fEZsLG89XCJtb2R1bGVcIj09PXQubW9kZTshMD09PXQucHJlZml4SWRlbnRpZmllcnM/bihBbCg0NikpOm8mJm4oQWwoNDcpKTt0LmNhY2hlSGFuZGxlcnMmJm4oQWwoNDgpKSx0LnNjb3BlSWQmJiFvJiZuKEFsKDQ5KSk7Y29uc3Qgcj1QKGUpP2lhKGUsdCk6ZSxbcyxpXT1bW0V1LFphLEZ1LHR1LFN1LGd1LGF1LFR1XSx7b246Q3UsYmluZDp3dSxtb2RlbDokdX1dO3JldHVybiBMYShyLHcoe30sdCx7cHJlZml4SWRlbnRpZmllcnM6ZmFsc2Usbm9kZVRyYW5zZm9ybXM6Wy4uLnMsLi4udC5ub2RlVHJhbnNmb3Jtc3x8W11dLGRpcmVjdGl2ZVRyYW5zZm9ybXM6dyh7fSxpLHQuZGlyZWN0aXZlVHJhbnNmb3Jtc3x8e30pfSkpLEhhKHIsdyh7fSx0LHtwcmVmaXhJZGVudGlmaWVyczpmYWxzZX0pKX1jb25zdCBBdT1TeW1ib2woXCJcIiksTXU9U3ltYm9sKFwiXCIpLFZ1PVN5bWJvbChcIlwiKSxJdT1TeW1ib2woXCJcIiksQnU9U3ltYm9sKFwiXCIpLEx1PVN5bWJvbChcIlwiKSxqdT1TeW1ib2woXCJcIiksVXU9U3ltYm9sKFwiXCIpLER1PVN5bWJvbChcIlwiKSxIdT1TeW1ib2woXCJcIik7dmFyIFd1O2xldCB6dTtXdT17W0F1XTpcInZNb2RlbFJhZGlvXCIsW011XTpcInZNb2RlbENoZWNrYm94XCIsW1Z1XTpcInZNb2RlbFRleHRcIixbSXVdOlwidk1vZGVsU2VsZWN0XCIsW0J1XTpcInZNb2RlbER5bmFtaWNcIixbTHVdOlwid2l0aE1vZGlmaWVyc1wiLFtqdV06XCJ3aXRoS2V5c1wiLFtVdV06XCJ2U2hvd1wiLFtEdV06XCJUcmFuc2l0aW9uXCIsW0h1XTpcIlRyYW5zaXRpb25Hcm91cFwifSxPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKFd1KS5mb3JFYWNoKChlPT57YmNbZV09V3VbZV19KSk7Y29uc3QgS3U9ZShcInN0eWxlLGlmcmFtZSxzY3JpcHQsbm9zY3JpcHRcIiwhMCksR3U9e2lzVm9pZFRhZzpmLGlzTmF0aXZlVGFnOmU9PnUoZSl8fHAoZSksaXNQcmVUYWc6ZT0+XCJwcmVcIj09PWUsZGVjb2RlRW50aXRpZXM6ZnVuY3Rpb24oZSx0PSExKXtyZXR1cm4genV8fCh6dT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpKSx0Pyh6dS5pbm5lckhUTUw9YDxkaXYgZm9vPVwiJHtlLnJlcGxhY2UoL1wiL2csXCImcXVvdDtcIil9XCI+YCx6dS5jaGlsZHJlblswXS5nZXRBdHRyaWJ1dGUoXCJmb29cIikpOih6dS5pbm5lckhUTUw9ZSx6dS50ZXh0Q29udGVudCl9LGlzQnVpbHRJbkNvbXBvbmVudDplPT5GYyhlLFwiVHJhbnNpdGlvblwiKT9EdTpGYyhlLFwiVHJhbnNpdGlvbkdyb3VwXCIpP0h1OnZvaWQgMCxnZXROYW1lc3BhY2UoZSx0KXtsZXQgbj10P3QubnM6MDtpZih0JiYyPT09bilpZihcImFubm90YXRpb24teG1sXCI9PT10LnRhZyl7aWYoXCJzdmdcIj09PWUpcmV0dXJuIDE7dC5wcm9wcy5zb21lKChlPT42PT09ZS50eXBlJiZcImVuY29kaW5nXCI9PT1lLm5hbWUmJm51bGwhPWUudmFsdWUmJihcInRleHQvaHRtbFwiPT09ZS52YWx1ZS5jb250ZW50fHxcImFwcGxpY2F0aW9uL3hodG1sK3htbFwiPT09ZS52YWx1ZS5jb250ZW50KSkpJiYobj0wKX1lbHNlL15tKD86W2lvbnNdfHRleHQpJC8udGVzdCh0LnRhZykmJlwibWdseXBoXCIhPT1lJiZcIm1hbGlnbm1hcmtcIiE9PWUmJihuPTApO2Vsc2UgdCYmMT09PW4mJihcImZvcmVpZ25PYmplY3RcIiE9PXQudGFnJiZcImRlc2NcIiE9PXQudGFnJiZcInRpdGxlXCIhPT10LnRhZ3x8KG49MCkpO2lmKDA9PT1uKXtpZihcInN2Z1wiPT09ZSlyZXR1cm4gMTtpZihcIm1hdGhcIj09PWUpcmV0dXJuIDJ9cmV0dXJuIG59LGdldFRleHRNb2RlKHt0YWc6ZSxuczp0fSl7aWYoMD09PXQpe2lmKFwidGV4dGFyZWFcIj09PWV8fFwidGl0bGVcIj09PWUpcmV0dXJuIDE7aWYoS3UoZSkpcmV0dXJuIDJ9cmV0dXJuIDB9fSxxdT0oZSx0KT0+e2NvbnN0IG49bChlKTtyZXR1cm4gVGMoSlNPTi5zdHJpbmdpZnkobiksITEsdCwzKX07Y29uc3QgSnU9ZShcInBhc3NpdmUsb25jZSxjYXB0dXJlXCIpLFl1PWUoXCJzdG9wLHByZXZlbnQsc2VsZixjdHJsLHNoaWZ0LGFsdCxtZXRhLGV4YWN0LG1pZGRsZVwiKSxadT1lKFwibGVmdCxyaWdodFwiKSxRdT1lKFwib25rZXl1cCxvbmtleWRvd24sb25rZXlwcmVzc1wiLCEwKSxYdT0oZSx0KT0+UmMoZSkmJlwib25jbGlja1wiPT09ZS5jb250ZW50LnRvTG93ZXJDYXNlKCk/VGModCwhMCk6NCE9PWUudHlwZT9OYyhbXCIoXCIsZSxgKSA9PT0gXCJvbkNsaWNrXCIgPyBcIiR7dH1cIiA6IChgLGUsXCIpXCJdKTplLGVwPShlLHQpPT57MSE9PWUudHlwZXx8MCE9PWUudGFnVHlwZXx8XCJzY3JpcHRcIiE9PWUudGFnJiZcInN0eWxlXCIhPT1lLnRhZ3x8dC5yZW1vdmVOb2RlKCl9LHRwPVtlPT57MT09PWUudHlwZSYmZS5wcm9wcy5mb3JFYWNoKCgodCxuKT0+ezY9PT10LnR5cGUmJlwic3R5bGVcIj09PXQubmFtZSYmdC52YWx1ZSYmKGUucHJvcHNbbl09e3R5cGU6NyxuYW1lOlwiYmluZFwiLGFyZzpUYyhcInN0eWxlXCIsITAsdC5sb2MpLGV4cDpxdSh0LnZhbHVlLmNvbnRlbnQsdC5sb2MpLG1vZGlmaWVyczpbXSxsb2M6dC5sb2N9KX0pKX1dLG5wPXtjbG9hazooKT0+KHtwcm9wczpbXX0pLGh0bWw6KGUsdCxuKT0+e2NvbnN0e2V4cDpvLGxvYzpyfT1lO3JldHVybiB0LmNoaWxkcmVuLmxlbmd0aCYmKHQuY2hpbGRyZW4ubGVuZ3RoPTApLHtwcm9wczpba2MoVGMoXCJpbm5lckhUTUxcIiwhMCxyKSxvfHxUYyhcIlwiLCEwKSldfX0sdGV4dDooZSx0LG4pPT57Y29uc3R7ZXhwOm8sbG9jOnJ9PWU7cmV0dXJuIHQuY2hpbGRyZW4ubGVuZ3RoJiYodC5jaGlsZHJlbi5sZW5ndGg9MCkse3Byb3BzOltrYyhUYyhcInRleHRDb250ZW50XCIsITApLG8/RmEobyxuKT4wP286RWMobi5oZWxwZXJTdHJpbmcobmMpLFtvXSxyKTpUYyhcIlwiLCEwKSldfX0sbW9kZWw6KGUsdCxuKT0+e2NvbnN0IG89JHUoZSx0LG4pO2lmKCFvLnByb3BzLmxlbmd0aHx8MT09PXQudGFnVHlwZSlyZXR1cm4gbztjb25zdHt0YWc6cn09dCxzPW4uaXNDdXN0b21FbGVtZW50KHIpO2lmKFwiaW5wdXRcIj09PXJ8fFwidGV4dGFyZWFcIj09PXJ8fFwic2VsZWN0XCI9PT1yfHxzKXtsZXQgZT1WdSxpPSExO2lmKFwiaW5wdXRcIj09PXJ8fHMpe2NvbnN0IG49V2ModCxcInR5cGVcIik7aWYobil7aWYoNz09PW4udHlwZSllPUJ1O2Vsc2UgaWYobi52YWx1ZSlzd2l0Y2gobi52YWx1ZS5jb250ZW50KXtjYXNlXCJyYWRpb1wiOmU9QXU7YnJlYWs7Y2FzZVwiY2hlY2tib3hcIjplPU11O2JyZWFrO2Nhc2VcImZpbGVcIjppPSEwfX1lbHNlKGZ1bmN0aW9uKGUpe3JldHVybiBlLnByb3BzLnNvbWUoKGU9PiEoNyE9PWUudHlwZXx8XCJiaW5kXCIhPT1lLm5hbWV8fGUuYXJnJiY0PT09ZS5hcmcudHlwZSYmZS5hcmcuaXNTdGF0aWMpKSl9KSh0KSYmKGU9QnUpfWVsc2VcInNlbGVjdFwiPT09ciYmKGU9SXUpO2l8fChvLm5lZWRSdW50aW1lPW4uaGVscGVyKGUpKX1yZXR1cm4gby5wcm9wcz1vLnByb3BzLmZpbHRlcigoZT0+ISg0PT09ZS5rZXkudHlwZSYmXCJtb2RlbFZhbHVlXCI9PT1lLmtleS5jb250ZW50KSkpLG99LG9uOihlLHQsbik9PkN1KGUsMCxuLCh0PT57Y29uc3R7bW9kaWZpZXJzOm99PWU7aWYoIW8ubGVuZ3RoKXJldHVybiB0O2xldHtrZXk6cix2YWx1ZTpzfT10LnByb3BzWzBdO2NvbnN0e2tleU1vZGlmaWVyczppLG5vbktleU1vZGlmaWVyczpsLGV2ZW50T3B0aW9uTW9kaWZpZXJzOmN9PSgoZSx0LG4sbyk9Pntjb25zdCByPVtdLHM9W10saT1bXTtmb3IobGV0IGw9MDtsPHQubGVuZ3RoO2wrKyl7Y29uc3Qgbj10W2xdO0p1KG4pP2kucHVzaChuKTpadShuKT9SYyhlKT9RdShlLmNvbnRlbnQpP3IucHVzaChuKTpzLnB1c2gobik6KHIucHVzaChuKSxzLnB1c2gobikpOll1KG4pP3MucHVzaChuKTpyLnB1c2gobil9cmV0dXJue2tleU1vZGlmaWVyczpyLG5vbktleU1vZGlmaWVyczpzLGV2ZW50T3B0aW9uTW9kaWZpZXJzOml9fSkocixvKTtpZihsLmluY2x1ZGVzKFwicmlnaHRcIikmJihyPVh1KHIsXCJvbkNvbnRleHRtZW51XCIpKSxsLmluY2x1ZGVzKFwibWlkZGxlXCIpJiYocj1YdShyLFwib25Nb3VzZXVwXCIpKSxsLmxlbmd0aCYmKHM9RWMobi5oZWxwZXIoTHUpLFtzLEpTT04uc3RyaW5naWZ5KGwpXSkpLCFpLmxlbmd0aHx8UmMocikmJiFRdShyLmNvbnRlbnQpfHwocz1FYyhuLmhlbHBlcihqdSksW3MsSlNPTi5zdHJpbmdpZnkoaSldKSksYy5sZW5ndGgpe2NvbnN0IGU9Yy5tYXAocSkuam9pbihcIlwiKTtyPVJjKHIpP1RjKGAke3IuY29udGVudH0ke2V9YCwhMCk6TmMoW1wiKFwiLHIsYCkgKyBcIiR7ZX1cImBdKX1yZXR1cm57cHJvcHM6W2tjKHIscyldfX0pKSxzaG93OihlLHQsbik9Pih7cHJvcHM6W10sbmVlZFJ1bnRpbWU6bi5oZWxwZXIoVXUpfSl9O2NvbnN0IG9wPU9iamVjdC5jcmVhdGUobnVsbCk7ZnVuY3Rpb24gcnAoZSx0KXtpZighUChlKSl7aWYoIWUubm9kZVR5cGUpcmV0dXJuIF87ZT1lLmlubmVySFRNTH1jb25zdCBuPWUsbz1vcFtuXTtpZihvKXJldHVybiBvO2lmKFwiI1wiPT09ZVswXSl7Y29uc3QgdD1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKGUpO2U9dD90LmlubmVySFRNTDpcIlwifWNvbnN0e2NvZGU6cn09ZnVuY3Rpb24oZSx0PXt9KXtyZXR1cm4gUHUoZSx3KHt9LEd1LHQse25vZGVUcmFuc2Zvcm1zOltlcCwuLi50cCwuLi50Lm5vZGVUcmFuc2Zvcm1zfHxbXV0sZGlyZWN0aXZlVHJhbnNmb3Jtczp3KHt9LG5wLHQuZGlyZWN0aXZlVHJhbnNmb3Jtc3x8e30pLHRyYW5zZm9ybUhvaXN0Om51bGx9KSl9KGUsdyh7aG9pc3RTdGF0aWM6ITAsb25FcnJvcjp2b2lkIDAsb25XYXJuOl99LHQpKSxzPW5ldyBGdW5jdGlvbihcIlZ1ZVwiLHIpKFJsKTtyZXR1cm4gcy5fcmM9ITAsb3Bbbl09c31GcyhycCk7ZXhwb3J0e2lvIGFzIEJhc2VUcmFuc2l0aW9uLEtyIGFzIENvbW1lbnQsbmUgYXMgRWZmZWN0U2NvcGUsV3IgYXMgRnJhZ21lbnQsX28gYXMgS2VlcEFsaXZlLGdlIGFzIFJlYWN0aXZlRWZmZWN0LEdyIGFzIFN0YXRpYyxVbiBhcyBTdXNwZW5zZSxIciBhcyBUZWxlcG9ydCx6ciBhcyBUZXh0LEZpIGFzIFRyYW5zaXRpb24sWWkgYXMgVHJhbnNpdGlvbkdyb3VwLE5pIGFzIFZ1ZUVsZW1lbnQsWnQgYXMgY2FsbFdpdGhBc3luY0Vycm9ySGFuZGxpbmcsWXQgYXMgY2FsbFdpdGhFcnJvckhhbmRsaW5nLHogYXMgY2FtZWxpemUscSBhcyBjYXBpdGFsaXplLGZzIGFzIGNsb25lVk5vZGUsaWkgYXMgY29tcGF0VXRpbHMscnAgYXMgY29tcGlsZSxqcyBhcyBjb21wdXRlZCxObCBhcyBjcmVhdGVBcHAsbnMgYXMgY3JlYXRlQmxvY2ssbXMgYXMgY3JlYXRlQ29tbWVudFZOb2RlLHRzIGFzIGNyZWF0ZUVsZW1lbnRCbG9jayxhcyBhcyBjcmVhdGVFbGVtZW50Vk5vZGUsTXIgYXMgY3JlYXRlSHlkcmF0aW9uUmVuZGVyZXIsSnMgYXMgY3JlYXRlUHJvcHNSZXN0UHJveHksQXIgYXMgY3JlYXRlUmVuZGVyZXIsRWwgYXMgY3JlYXRlU1NSQXBwLHFvIGFzIGNyZWF0ZVNsb3RzLGhzIGFzIGNyZWF0ZVN0YXRpY1ZOb2RlLGRzIGFzIGNyZWF0ZVRleHRWTm9kZSx1cyBhcyBjcmVhdGVWTm9kZSxVdCBhcyBjdXN0b21SZWYsZ28gYXMgZGVmaW5lQXN5bmNDb21wb25lbnQsaG8gYXMgZGVmaW5lQ29tcG9uZW50LHdpIGFzIGRlZmluZUN1c3RvbUVsZW1lbnQsRHMgYXMgZGVmaW5lRW1pdHMsSHMgYXMgZGVmaW5lRXhwb3NlLFVzIGFzIGRlZmluZVByb3BzLGtpIGFzIGRlZmluZVNTUkN1c3RvbUVsZW1lbnQseG4gYXMgZGV2dG9vbHMseWUgYXMgZWZmZWN0LG9lIGFzIGVmZmVjdFNjb3BlLHdzIGFzIGdldEN1cnJlbnRJbnN0YW5jZSxzZSBhcyBnZXRDdXJyZW50U2NvcGUsZm8gYXMgZ2V0VHJhbnNpdGlvblJhd0NoaWxkcmVuLHBzIGFzIGd1YXJkUmVhY3RpdmVQcm9wcyxacyBhcyBoLFF0IGFzIGhhbmRsZUVycm9yLFRsIGFzIGh5ZHJhdGUsZWkgYXMgaW5pdEN1c3RvbUZvcm1hdHRlcixPbCBhcyBpbml0RGlyZWN0aXZlc0ZvclNTUixxbiBhcyBpbmplY3QsbmkgYXMgaXNNZW1vU2FtZSx3dCBhcyBpc1Byb3h5LFN0IGFzIGlzUmVhY3RpdmUseHQgYXMgaXNSZWFkb25seSxSdCBhcyBpc1JlZixQcyBhcyBpc1J1bnRpbWVPbmx5LEN0IGFzIGlzU2hhbGxvdyxvcyBhcyBpc1ZOb2RlLFR0IGFzIG1hcmtSYXcscXMgYXMgbWVyZ2VEZWZhdWx0cyxfcyBhcyBtZXJnZVByb3BzLGRuIGFzIG5leHRUaWNrLGMgYXMgbm9ybWFsaXplQ2xhc3MsYSBhcyBub3JtYWxpemVQcm9wcyxyIGFzIG5vcm1hbGl6ZVN0eWxlLFNvIGFzIG9uQWN0aXZhdGVkLCRvIGFzIG9uQmVmb3JlTW91bnQsUG8gYXMgb25CZWZvcmVVbm1vdW50LFJvIGFzIG9uQmVmb3JlVXBkYXRlLHhvIGFzIG9uRGVhY3RpdmF0ZWQsQm8gYXMgb25FcnJvckNhcHR1cmVkLE9vIGFzIG9uTW91bnRlZCxJbyBhcyBvblJlbmRlclRyYWNrZWQsVm8gYXMgb25SZW5kZXJUcmlnZ2VyZWQsaWUgYXMgb25TY29wZURpc3Bvc2UsTW8gYXMgb25TZXJ2ZXJQcmVmZXRjaCxBbyBhcyBvblVubW91bnRlZCxGbyBhcyBvblVwZGF0ZWQsWXIgYXMgb3BlbkJsb2NrLEZuIGFzIHBvcFNjb3BlSWQsR24gYXMgcHJvdmlkZSxMdCBhcyBwcm94eVJlZnMsUm4gYXMgcHVzaFNjb3BlSWQsdm4gYXMgcXVldWVQb3N0Rmx1c2hDYixndCBhcyByZWFjdGl2ZSx5dCBhcyByZWFkb25seSxGdCBhcyByZWYsRnMgYXMgcmVnaXN0ZXJSdW50aW1lQ29tcGlsZXIsa2wgYXMgcmVuZGVyLEdvIGFzIHJlbmRlckxpc3QsSm8gYXMgcmVuZGVyU2xvdCxVbyBhcyByZXNvbHZlQ29tcG9uZW50LFdvIGFzIHJlc29sdmVEaXJlY3RpdmUsSG8gYXMgcmVzb2x2ZUR5bmFtaWNDb21wb25lbnQsc2kgYXMgcmVzb2x2ZUZpbHRlcixjbyBhcyByZXNvbHZlVHJhbnNpdGlvbkhvb2tzLFhyIGFzIHNldEJsb2NrVHJhY2tpbmcsd24gYXMgc2V0RGV2dG9vbHNIb29rLHBvIGFzIHNldFRyYW5zaXRpb25Ib29rcyx2dCBhcyBzaGFsbG93UmVhY3RpdmUsX3QgYXMgc2hhbGxvd1JlYWRvbmx5LFB0IGFzIHNoYWxsb3dSZWYsUXMgYXMgc3NyQ29udGV4dEtleSxyaSBhcyBzc3JVdGlscyxfZSBhcyBzdG9wLG0gYXMgdG9EaXNwbGF5U3RyaW5nLEogYXMgdG9IYW5kbGVyS2V5LFpvIGFzIHRvSGFuZGxlcnMsa3QgYXMgdG9SYXcsV3QgYXMgdG9SZWYsRHQgYXMgdG9SZWZzLHNzIGFzIHRyYW5zZm9ybVZOb2RlQXJncyxWdCBhcyB0cmlnZ2VyUmVmLEl0IGFzIHVucmVmLEtzIGFzIHVzZUF0dHJzLEVpIGFzIHVzZUNzc01vZHVsZSwkaSBhcyB1c2VDc3NWYXJzLFhzIGFzIHVzZVNTUkNvbnRleHQsenMgYXMgdXNlU2xvdHMscm8gYXMgdXNlVHJhbnNpdGlvblN0YXRlLHJsIGFzIHZNb2RlbENoZWNrYm94LHBsIGFzIHZNb2RlbER5bmFtaWMsaWwgYXMgdk1vZGVsUmFkaW8sbGwgYXMgdk1vZGVsU2VsZWN0LG9sIGFzIHZNb2RlbFRleHQseWwgYXMgdlNob3csb2kgYXMgdmVyc2lvbixHdCBhcyB3YXJuLFhuIGFzIHdhdGNoLEpuIGFzIHdhdGNoRWZmZWN0LFluIGFzIHdhdGNoUG9zdEVmZmVjdCxabiBhcyB3YXRjaFN5bmNFZmZlY3QsWXMgYXMgd2l0aEFzeW5jQ29udGV4dCxBbiBhcyB3aXRoQ3R4LFdzIGFzIHdpdGhEZWZhdWx0cyxMbyBhcyB3aXRoRGlyZWN0aXZlcyx2bCBhcyB3aXRoS2V5cyx0aSBhcyB3aXRoTWVtbyxtbCBhcyB3aXRoTW9kaWZpZXJzLFBuIGFzIHdpdGhTY29wZUlkfTtcbiIsImltcG9ydCB7IGRvX3BpZSB9IGZyb20gJy4vY2hhcnRzL3BpZS1jaGFydCdcblxud2luZG93LmRvX3BpZSA9IGRvX3BpZVxuXG5pbXBvcnQgeyBDaGFydFdpZGdldCwgV2lkZ2V0VXRpbHMgfSBmcm9tICcuL3dpZGdldC93aWRnZXRzJ1xuaW1wb3J0ICcuL3NpZGViYXIvc2lkZWJhcidcbmltcG9ydCB7IG50b3BDaGFydEFwZXggfSBmcm9tIFwiLi9udG9wQ2hhcnRBcGV4XCI7XG5cbi8qIGRhdGF0YWJsZXMubmV0IGV4dGVuc2lvbnMgKi9cbmltcG9ydCB7IERhdGFUYWJsZUZpbHRlcnNNZW51LCBEYXRhVGFibGVVdGlscywgRGF0YVRhYmxlUmVuZGVycyB9IGZyb20gJy4uL3V0aWxpdGllcy9kYXRhdGFibGUvc3ByeW1lZGlhLWRhdGF0YWJsZS11dGlscy5qcydcblxud2luZG93LkRhdGFUYWJsZVV0aWxzID0gRGF0YVRhYmxlVXRpbHNcbndpbmRvdy5EYXRhVGFibGVGaWx0ZXJzTWVudSA9IERhdGFUYWJsZUZpbHRlcnNNZW51XG53aW5kb3cuRGF0YVRhYmxlUmVuZGVycyA9IERhdGFUYWJsZVJlbmRlcnNcblxud2luZG93LkNoYXJ0V2lkZ2V0ID0gQ2hhcnRXaWRnZXQ7XG53aW5kb3cuV2lkZ2V0VXRpbHMgPSBXaWRnZXRVdGlscztcbndpbmRvdy5udG9wQ2hhcnRBcGV4ID0gbnRvcENoYXJ0QXBleDtcbiIsIi8qIEhhbmRsZSBCbG9nIE5vdGlmaWNhdGlvbnMgKi9cbiQoZnVuY3Rpb24gKCkge1xuXG4gIGZ1bmN0aW9uIGJsb2dOb3RpZmNhdGlvbkNsaWNrKGUpIHtcblxuICAgIGlmIChlLnR5cGUgPT0gXCJtb3VzZWRvd25cIiAmJiAoZS5tZXRhS2V5IHx8IGUuY3RybEtleSB8fCBlLndoaWNoICE9PSAyKSkgcmV0dXJuO1xuXG4gICAgY29uc3QgaWQgPSAkKHRoaXMpLmRhdGEoJ2lkJyk7XG5cbiAgICAkLnBvc3QoYCR7aHR0cF9wcmVmaXh9L2x1YS91cGRhdGVfYmxvZ19wb3N0cy5sdWFgLCB7XG4gICAgICBibG9nX25vdGlmaWNhdGlvbl9pZDogaWQsXG4gICAgICBjc3JmOiB3aW5kb3cuX19CTE9HX05PVElGSUNBVElPTl9DU1JGX19cbiAgICB9LFxuICAgICAgKGRhdGEpID0+IHtcblxuICAgICAgICBpZiAoZGF0YS5zdWNjZXNzKSB7XG5cbiAgICAgICAgICAkKHRoaXMpLm9mZignY2xpY2snKS5vZmYoJ21vdXNlZG93bicpLmF0dHIoJ2RhdGEtcmVhZCcsICd0cnVlJykuZGF0YSgncmVhZCcsICd0cnVlJykuZmluZCgnLmJhZGdlJykucmVtb3ZlKCk7XG4gICAgICAgICAgXG4gICAgICAgICAgY29uc3QgY291bnQgPSAkKGAuYmxvZy1ub3RpZmljYXRpb25bZGF0YS1yZWFkPSdmYWxzZSddYCkubGVuZ3RoO1xuXG4gICAgICAgICAgaWYgKGNvdW50ID09IDApIHtcbiAgICAgICAgICAgICQoJy5ub3RpZmljYXRpb24tYmVsbCcpLnJlbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICQoJy5ub3RpZmljYXRpb24tYmVsbCcpLmh0bWwoY291bnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gIH1cblxuICAvLyBvbiB0aGUgbm90aWZpY2F0aW9ucyBub3QgeWV0IHJlYWQgZGVsZWdhdGUgdGhlIGNsaWNrIGV2ZW50XG4gICQoYC5ibG9nLW5vdGlmaWNhdGlvbltkYXRhLXJlYWQ9J2ZhbHNlJ11gKS5vbignY2xpY2snLCBibG9nTm90aWZjYXRpb25DbGljaykub24oJ21vdXNlZG93bicsIGJsb2dOb3RpZmNhdGlvbkNsaWNrKTtcbn0pOyIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48c2NyaXB0PlxuaW1wb3J0IHsgaCwgcmVmIH0gZnJvbSAndnVlJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIHByb3BzOiBbJ2NvbnRlbnQnXSxcbiAgICB3YXRjaDoge1xuXHRcImNvbnRlbnRcIjogZnVuY3Rpb24odmFsLCBvbGRWYWwpIHtcblx0ICAgIC8vIHRoaXMuJGZvcmNlVXBkYXRlKCk7XG5cdH1cbiAgICB9LFxuICAgIHJlbmRlcigpIHtcblx0cmV0dXJuIGgodGhpcy4kcHJvcHMuY29udGVudCk7XG4gICAgfVxufTtcbjwvc2NyaXB0PlxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjwhLS0gVXNhZ2U6IC0tPlxuPCEtLSAgIDxEcm9wZG93biA6aWQ9XCJpZFwiIHJlZj1cImRyb3Bkb3duXCI+IDxcXCEtLSBEcm9wZG93biBjb2x1bW5zIC1cXC0+IC0tPlxuPCEtLSAgICAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT4gLS0+XG48IS0tICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLWV5ZVwiPjwvaT4gLS0+XG48IS0tICAgICA8L3RlbXBsYXRlPiAtLT5cbjwhLS0gICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6bWVudT4gLS0+XG48IS0tICAgICAgIDxkaXYgdi1mb3I9XCJjb2wgaW4gY29sdW1uc193cmFwXCIgY2xhc3M9XCJmb3JtLWNoZWNrIGZvcm0tc3dpdGNoXCI+PGlucHV0IGNsYXNzPVwiZm9ybS1jaGVjay1pbnB1dFwiIGNoZWNrZWQ9XCJcIiB0eXBlPVwiY2hlY2tib3hcIiBpZD1cInRvZ2dsZS1CZWdpblwiPiAtLT5cbjwhLS0gICAgICAgICA8bGFiZWwgY2xhc3M9XCJmb3JtLWNoZWNrLWxhYmVsXCIgZm9yPVwidG9nZ2xlLUJlZ2luXCIgdi1odG1sPVwicHJpbnRfaHRtbF9jb2x1bW4oY29sLmRhdGEpXCI+IC0tPlxuPCEtLSAgICAgICAgIDwvbGFiZWw+IC0tPlxuPCEtLSAgICAgICA8L2Rpdj4gLS0+XG48IS0tICAgICA8L3RlbXBsYXRlPiAtLT5cbjwhLS0gICA8L0Ryb3Bkb3duPiA8XFwhLS0gRHJvcGRvd24gY29sdW1ucyAtXFwtPiAtLT5cblxuPHRlbXBsYXRlPlxuPGRpdiBjbGFzcz1cImRyb3Bkb3duXCIgcmVmPVwiZHJvcGRvd25cIiBzdHlsZT1cImRpc3BsYXk6aW5saW5lLWJsb2NrO1wiPlxuICA8YnV0dG9uIGNsYXNzPVwiYnRuIGRyb3Bkb3duLXRvZ2dsZVwiIDpjbGFzcz1cImJ1dHRvbl9jbGFzc18yXCIgOnN0eWxlPVwiYnV0dG9uX3N0eWxlXCIgdHlwZT1cImJ1dHRvblwiIDppZD1cImlkXCIgcmVmPVwiZHJvcGRvd25fYnV0dG9uXCIgIGFyaWEtZXhwYW5kZWQ9XCJmYWxzZVwiIGRhdGEtYnMtdG9nZ2xlPVwiZHJvcGRvd25cIj5cbiAgICA8c2xvdCBuYW1lPVwidGl0bGVcIj48L3Nsb3Q+XG4gIDwvYnV0dG9uPlxuICA8dWwgY2xhc3M9XCJkcm9wZG93bi1tZW51XCIgOmFyaWEtbGFiZWxsZWRieT1cImlkXCIgc3R5bGU9XCIgbWF4LWhlaWdodDogMjVyZW07b3ZlcmZsb3c6YXV0b1wiPlxuICAgIDwhLS0gPHNsb3QgbmFtZT1cIm1lbnVcIj48L3Nsb3Q+IC0tPlxuXG4gICAgPCEtLSA8bGkgY2xhc3M9XCJkcm9wZG93bi1pdGVtXCIgdi1mb3I9XCIob3B0LCBpKSBpbiBvcHRpb25zXCIgOnJlZj1cImVsID0+IHsgbWVudVtpXSA9IGVsIH1cIj4gLS0+XG4gICAgPCEtLSAgIGFzZCAtLT5cbiAgICAgIDwhLS0gICA8L2xpPiAtLT5cbiAgICAgIDxsaSB2LWZvcj1cIihvcHQsIGkpIGluIG1lbnVfb3B0aW9uc1wiIGNsYXNzPVwiZHJvcGRvd24taXRlbVwiPlxuXHQ8Vk5vZGUgOmNvbnRlbnQ9XCJvcHRcIj48L1ZOb2RlPlxuICAgICAgPC9saT5cbiAgPC91bD5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBjb21wdXRlZCwgd2F0Y2gsIGggfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfdXRpbGl0eSB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzLmpzXCI7XG5pbXBvcnQgeyB1c2VTbG90cywgcmVuZGVyLCBnZXRDdXJyZW50SW5zdGFuY2UsIG5leHRUaWNrIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IHJlbmRlcl9jb21wb25lbnQgfSBmcm9tIFwiLi9udG9wX3V0aWxzLmpzXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFZOb2RlIH0gZnJvbSBcIi4vdnVlX25vZGUudnVlXCI7XG5cbmNvbnN0IGluc3RhbmNlID0gZ2V0Q3VycmVudEluc3RhbmNlKCk7XG5jb25zdCBzbG90cyA9IHVzZVNsb3RzKCk7XG5cbmNvbnN0IG9wdGlvbnMgPSByZWYoW10pO1xuY29uc3QgbWVudSA9IHJlZihbXSk7XG5jb25zdCBtZW51X29wdGlvbnMgPSByZWYoW10pO1xuY29uc3QgZHJvcGRvd24gPSByZWYobnVsbCk7XG5jb25zdCBkcm9wZG93bl9idXR0b24gPSByZWYobnVsbCk7XG5cbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbXSlcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gICAgaWQ6IFN0cmluZyxcbiAgICBhdXRvX2xvYWQ6IEJvb2xlYW4sXG4gICAgYnV0dG9uX2NsYXNzOiBTdHJpbmcsXG4gICAgYnV0dG9uX3N0eWxlOiBTdHJpbmcsXG4gICAgZl9vbl9vcGVuOiBGdW5jdGlvbixcbiAgICBmX29uX2Nsb3NlOiBGdW5jdGlvbixcbn0pO1xuXG5sZXQgZGVmYXVsdF9vdmVyZmxvdyA9IG51bGw7XG5vbk1vdW50ZWQoKCkgPT4ge1xuICAgIGRlZmF1bHRfb3ZlcmZsb3cgPSBcdCQoZHJvcGRvd24udmFsdWUpLnBhcmVudCgpLmNsb3Nlc3QoJ2RpdicpLmNzcygnb3ZlcmZsb3cnKTtcbiAgICBpZiAocHJvcHMuYXV0b19sb2FkID09IHRydWUpIHtcblx0bG9hZF9tZW51KCk7XG4gICAgfVxuICAgIGxldCBlbCA9IHsgZHJvcGRvd246IGRyb3Bkb3duLnZhbHVlLCBkcm9wZG93bl9idXR0b246IGRyb3Bkb3duX2J1dHRvbi52YWx1ZSB9O1xuICAgICQoZHJvcGRvd24udmFsdWUpLm9uKCdzaG93LmJzLmRyb3Bkb3duJywgZnVuY3Rpb24gKCkge1xuXHQkKGRyb3Bkb3duLnZhbHVlKS5wYXJlbnQoKS5jbG9zZXN0KCdkaXYnKS5jc3MoJ292ZXJmbG93JywgXCJ2aXNpYmxlXCIpO1xuXHRpZiAocHJvcHMuZl9vbl9vcGVuICE9IG51bGwpIHtcblx0ICAgIHByb3BzLmZfb25fb3BlbihlbCk7XG5cdH1cbiAgICB9KTtcbiAgICAkKGRyb3Bkb3duLnZhbHVlKS5vbignaGlkZS5icy5kcm9wZG93bicsIGZ1bmN0aW9uICgpIHtcblx0JChkcm9wZG93bi52YWx1ZSkucGFyZW50KCkuY2xvc2VzdCgnZGl2JykuY3NzKCdvdmVyZmxvdycsIGRlZmF1bHRfb3ZlcmZsb3cpO1xuXHRpZiAocHJvcHMuZl9vbl9jbG9zZSAhPSBudWxsKSB7XG5cdCAgICBwcm9wcy5mX29uX2Nsb3NlKGVsKTtcblx0fVxuICAgIH0pO1xufSk7XG5cbmNvbnN0IGJ1dHRvbl9jbGFzc18yID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGlmIChwcm9wcy5idXR0b25fY2xhc3MgIT0gbnVsbCkgeyByZXR1cm4gcHJvcHMuYnV0dG9uX2NsYXNzOyB9XG4gICAgcmV0dXJuIFwiYnRuLWxpbmtcIjtcbn0pXG5cbmZ1bmN0aW9uIG9wZW5fY2xvc2UoKSB7XG4gICAgLy8gbGV0IGVsID0geyBkcm9wZG93bjogZHJvcGRvd24udmFsdWUsIGRyb3Bkb3duX2J1dHRvbjogZHJvcGRvd25fYnV0dG9uLnZhbHVlIH07XG4gICAgLy8gaWYgKCEkKGRyb3Bkb3duLnZhbHVlKS5maW5kKCcuZHJvcGRvd24tbWVudScpLmlzKFwiOmhpZGRlblwiKSl7XG4gICAgLy8gXHQkKGRyb3Bkb3duX2J1dHRvbi52YWx1ZSkuZHJvcGRvd24oJ2hpZGUnKTtcbiAgICAvLyBcdCQoZHJvcGRvd24udmFsdWUpLnBhcmVudCgpLmNsb3Nlc3QoJ2RpdicpLmNzcygnb3ZlcmZsb3cnLCBcInZpc2libGVcIik7XG4gICAgLy8gXHQkKGRyb3Bkb3duX2J1dHRvbi52YWx1ZSkuZHJvcGRvd24oJ3Nob3cnKTtcbiAgICAvLyBcdGlmIChwcm9wcy5mX29uX29wZW4gIT0gbnVsbCkge1xuICAgIC8vIFx0ICAgIHByb3BzLmZfb25fb3BlbihlbCk7XG4gICAgLy8gXHR9XG4gICAgLy8gfSBlbHNlIHtcbiAgICAvLyBcdCQoZHJvcGRvd24udmFsdWUpLnBhcmVudCgpLmNsb3Nlc3QoJ2RpdicpLmNzcygnb3ZlcmZsb3cnLCBkZWZhdWx0X292ZXJmbG93KTtcbiAgICAvLyBcdC8vIGVtaXQoJ2Nsb3NlJywgZWwpO1xuICAgIC8vIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gbG9hZF9tZW51KCkge1xuICAgIG9wdGlvbnMudmFsdWUgPSBbXTtcbiAgICBpZiAoc2xvdHMgPT0gbnVsbCB8fCBzbG90cy5tZW51ID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgbGV0IG1fb3B0aW9ucyA9IHNsb3RzLm1lbnUoKTtcbiAgICBpZiAobV9vcHRpb25zID09IG51bGwgfHwgbV9vcHRpb25zLmxlbmd0aCA9PSAwKSB7IHJldHVybjsgfVxuICAgIGlmICh0eXBlb2YgbV9vcHRpb25zWzBdLnR5cGUgPT09ICdzeW1ib2wnKSB7XG5cdG1fb3B0aW9ucyA9IG1fb3B0aW9uc1swXS5jaGlsZHJlbjtcbiAgICB9XG4gICAgbWVudV9vcHRpb25zLnZhbHVlID0gW107XG4gICAgbV9vcHRpb25zLmZvckVhY2goKG9wdF9zbG90KSA9PiB7XG5cdGxldCBub2RlID0gb3B0X3Nsb3Q7XG5cdG1lbnVfb3B0aW9ucy52YWx1ZS5wdXNoKG5vZGUpO1xuXHQvLyBsZXQgZWxlbWVudCA9ICQoXCI8ZGl2PjwvZGl2PlwiKVswXTtcblx0Ly8gY29uc3QgeyB2Tm9kZSwgZWwgfSA9IHJlbmRlcl9jb21wb25lbnQobm9kZSwgeyBhcHA6ICBpbnN0YW5jZT8uYXBwQ29udGV4dD8uYXBwLCBlbGVtZW50IH0pO1xuXHQvLyBvcHRpb25zLnZhbHVlLnB1c2goZWwpO1xuICAgIH0pO1xuICAgIGF3YWl0IG5leHRUaWNrKCk7XG4gICAgLy8gbmV4dFRpY2soKCkgPT4ge1xuICAgIC8vIFx0b3B0aW9ucy52YWx1ZS5mb3JFYWNoKChvcHQsIGkpID0+IHtcbiAgICAvLyBcdCAgICBsZXQgaHRtbF9lbGVtZW50ID0gbWVudS52YWx1ZVtpXTtcbiAgICAvLyBcdCAgICAkKGh0bWxfZWxlbWVudCkuYXBwZW5kKG9wdCk7XG4gICAgLy8gXHR9KTtcbiAgICAvLyB9KTtcbn1cblxuZGVmaW5lRXhwb3NlKHsgbG9hZF9tZW51IH0pO1xuXG48L3NjcmlwdD5cbiIsIi8qKlxuICAgIChDKSAyMDIyIC0gbnRvcC5vcmdcbiovXG5pbXBvcnQgeyBudG9wbmdfdXRpbGl0eSwgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMuanNcIjtcbmltcG9ydCBOdG9wVXRpbHMgZnJvbSBcIi4vbnRvcC11dGlscy5qc1wiO1xuaW1wb3J0IHsgRGF0YVRhYmxlUmVuZGVycyB9IGZyb20gXCIuLi91dGlsaXRpZXMvZGF0YXRhYmxlL3NwcnltZWRpYS1kYXRhdGFibGUtdXRpbHMuanNcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgRHJvcGRvd24gfSBmcm9tIFwiLi4vdnVlLy9kcm9wZG93bi52dWVcIjtcbmltcG9ydCBGb3JtYXR0ZXJVdGlscyBmcm9tIFwiLi9mb3JtYXR0ZXItdXRpbHMuanNcIjtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcblxuYXN5bmMgZnVuY3Rpb24gYnVpbGRfdGFibGUoaHR0cF9wcmVmaXgsIHRhYmxlX2lkLCBmX21hcF9jb2x1bW5zLCBmX2dldF9leHRyYV9wYXJhbXNfb2JqLCBmX29uX2dldF9yb3dzKSB7XG4gICAgbGV0IGVwb2NoX2VuZCA9IE51bWJlci5wYXJzZUludChEYXRlLm5vdygpIC8gMTAwMCk7XG4gICAgbGV0IHRhYmxlX2RlZl91cmwgPSBgJHtodHRwX3ByZWZpeH0vdGFibGVzX2NvbmZpZy8ke3RhYmxlX2lkfS5qc29uP2Vwb2NoX2VuZD0ke2Vwb2NoX2VuZH1gO1xuICAgIGxldCB0YWJsZV9kZWYgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodGFibGVfZGVmX3VybCwgbnVsbCwgbnVsbCwgdHJ1ZSk7XG4gICAgaWYgKHRhYmxlX2RlZiA9PSBudWxsKSB7XG5cdHJldHVybiB7XG5cdCAgICBpZDogdGFibGVfaWQsXG5cdCAgICBjb2x1bW5zOiBbXSxcdCAgICBcblx0fVxuICAgIH1cbiAgICBpZiAoZl9tYXBfY29sdW1ucyAhPSBudWxsKSB7XG5cdHRhYmxlX2RlZi5jb2x1bW5zID0gYXdhaXQgZl9tYXBfY29sdW1ucyh0YWJsZV9kZWYuY29sdW1ucyk7XG4gICAgfVxuICAgIGNvbnN0IHRhYmxlX2NvbmZpZyA9IHtcblx0aWQ6IHRhYmxlX2lkLFxuXHRjb2x1bW5zOiB0YWJsZV9kZWYuY29sdW1ucyxcblx0Z2V0X3Jvd3M6IGdldF9yb3dzX2Z1bmModGFibGVfZGVmLCBmX2dldF9leHRyYV9wYXJhbXNfb2JqLCBmX29uX2dldF9yb3dzKSxcblx0Z2V0X2NvbHVtbl9pZDogZ2V0X2NvbHVtbl9pZF9mdW5jKHRhYmxlX2RlZiksXG5cdHByaW50X2NvbHVtbl9uYW1lOiBnZXRfZl9wcmludF9jb2x1bW5fbmFtZSh0YWJsZV9kZWYpLFxuXHRwcmludF9odG1sX3JvdzogZ2V0X2ZfcHJpbnRfaHRtbF9yb3codGFibGVfZGVmKSxcblx0cHJpbnRfdnVlX25vZGVfcm93OiBnZXRfZl9wcmludF92dWVfbm9kZV9yb3codGFibGVfZGVmKSxcblx0Zl9pc19jb2x1bW5fc29ydGFibGU6IGdldF9mX2lzX2NvbHVtbl9zb3J0YWJsZSh0YWJsZV9kZWYpLFxuXHRmX2dldF9jb2x1bW5fY2xhc3NlczogZ2V0X2ZfZ2V0X2NvbHVtbl9jbGFzc2VzKHRhYmxlX2RlZiksXG5cdGZfZ2V0X2NvbHVtbl9zdHlsZTogZ2V0X2ZfZ2V0X2NvbHVtbl9zdHlsZSh0YWJsZV9kZWYpLFxuXHRkaXNwbGF5X2VtcHR5X3Jvd3M6IHRhYmxlX2RlZi5kaXNwbGF5X2VtcHR5X3Jvd3MsXG5cdGVuYWJsZV9zZWFyY2g6IHRhYmxlX2RlZi5lbmFibGVfc2VhcmNoLFx0XG5cdGRlZmF1bHRfc29ydDogdGFibGVfZGVmLmRlZmF1bHRfc29ydCxcblx0c2hvd19hdXRvcmVmcmVzaDogdGFibGVfZGVmLnNob3dfYXV0b3JlZnJlc2gsXG5cdHBhZ2luZzogdGFibGVfZGVmLnBhZ2luZyxcbiAgICB9O1xuICAgIHJldHVybiB0YWJsZV9jb25maWc7XG59XG5cbmZ1bmN0aW9uIGdldF9mX2lzX2NvbHVtbl9zb3J0YWJsZSh0YWJsZV9kZWYpIHtcbiAgICByZXR1cm4gKGNvbCkgPT4ge1xuXHRyZXR1cm4gY29sLnNvcnRhYmxlO1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIGdldF9mX2dldF9jb2x1bW5fY2xhc3Nlcyh0YWJsZV9kZWYpIHtcbiAgICByZXR1cm4gKGNvbCkgPT4ge1xuXHRsZXQgY2xhc3NlcyA9IGNvbD8uY2xhc3M7XG5cdGlmIChjbGFzc2VzICE9IG51bGwpIHsgcmV0dXJuIGNsYXNzZXM7IH1cblx0cmV0dXJuIFtdO1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIGdldF9mX2dldF9jb2x1bW5fc3R5bGUodGFibGVfZGVmKSB7XG4gICAgcmV0dXJuIChjb2wpID0+IHtcblx0bGV0IHN0eWxlID0gY29sPy5zdHlsZTtcblx0aWYgKHN0eWxlICE9IG51bGwpIHsgcmV0dXJuIHN0eWxlOyB9XG5cdHJldHVybiBcIlwiO1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIGdldF9mX3ByaW50X3Z1ZV9ub2RlX3Jvdyh0YWJsZV9kZWYpIHtcbiAgICBjb25zdCBhdmFpbGFibGVfdHlwZXMgPSB7XG5cdFwiYnV0dG9uX2xpc3RcIjogZ2V0X2ZfcHJpbnRfdl9ub2RlX2J1dHRvbnModHJ1ZSksXG5cdFwiYnV0dG9uX2FycmF5XCI6IGdldF9mX3ByaW50X3Zfbm9kZV9idXR0b25zKGZhbHNlKSxcbiAgICB9O1xuICAgIHJldHVybiAoY29sLCByb3csIHZ1ZV9vYmosIHJldHVybl90cnVlX2lmX2RlZikgPT4ge1xuXHRpZiAoY29sLnJlbmRlcl92X25vZGVfdHlwZSA9PSBudWxsICYmIGNvbC5yZW5kZXJfdl9mdW5jID09IG51bGwpIHsgcmV0dXJuIG51bGw7IH1cblx0aWYgKHJldHVybl90cnVlX2lmX2RlZiA9PSB0cnVlKSB7IHJldHVybiB0cnVlOyB9XG5cdGlmIChjb2wucmVuZGVyX3ZfZnVuYyAhPSBudWxsKSB7XG5cdCAgICByZXR1cm4gY29sLnJlbmRlcl92X2Z1bmMoY29sLCByb3csIHZ1ZV9vYmosIHJldHVybl90cnVlX2lmX2RlZik7XG5cdH1cblx0bGV0IHByaW50X3Zfbm9kZV9idXR0b25zID0gYXZhaWxhYmxlX3R5cGVzW2NvbC5yZW5kZXJfdl9ub2RlX3R5cGVdO1xuXHRyZXR1cm4gcHJpbnRfdl9ub2RlX2J1dHRvbnMoY29sLCByb3csIHZ1ZV9vYmopO1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIGdldF9mX3ByaW50X2h0bWxfcm93KHRhYmxlX2RlZikge1xuICAgIHJldHVybiAoY29sLCByb3csIHJldHVybl90cnVlX2lmX2RlZikgPT4ge1xuXHRpZiAoY29sLnJlbmRlcl92X2Z1bmMgIT0gbnVsbCkgeyByZXR1cm4gbnVsbDsgfVxuXHRpZiAocmV0dXJuX3RydWVfaWZfZGVmID09IHRydWUpIHsgcmV0dXJuIHRydWU7IH1cblxuXHRsZXQgZGF0YTtcblx0aWYgKGNvbC5kYXRhX2ZpZWxkICE9IG51bGwpIHtcblx0ICAgIGRhdGEgPSByb3dbY29sLmRhdGFfZmllbGRdO1xuXHR9XG5cdGlmIChjb2wuemVyb19pc19udWxsICE9IG51bGwgJiYgZGF0YSAhPSBudWxsICYmIGRhdGEgPT0gMCkge1xuXHQgICAgZGF0YSA9IFwiXCI7XG5cdH1cblx0aWYgKGNvbC5yZW5kZXJfZ2VuZXJpYyAhPSBudWxsKSB7XG5cdCAgICBsZXQgcmVuZGVyID0gRGF0YVRhYmxlUmVuZGVycy5nZXRGb3JtYXRHZW5lcmljRmllbGQoY29sLnJlbmRlcl9nZW5lcmljLCBjb2wuemVyb19pc19udWxsKTtcblx0ICAgIHJldHVybiByZW5kZXIoZGF0YSwgJ2Rpc3BsYXknLCByb3cpO1xuXHR9XG5cdGlmIChjb2wucmVuZGVyX2Z1bmMgIT0gbnVsbCkge1xuXHQgICAgcmV0dXJuIGNvbC5yZW5kZXJfZnVuYyhkYXRhLCByb3cpO1xuXHR9XG5cdGlmIChjb2wucmVuZGVyX3R5cGUgIT0gbnVsbCkge1xuXHQgICAgaWYgKEZvcm1hdHRlclV0aWxzLnR5cGVzW2NvbC5yZW5kZXJfdHlwZV0gIT0gbnVsbCkge1xuXHRcdGNvbC5yZW5kZXJfZnVuYyA9IEZvcm1hdHRlclV0aWxzLmdldEZvcm1hdHRlcihjb2wucmVuZGVyX3R5cGUpO1xuXHRcdHJldHVybiBjb2wucmVuZGVyX2Z1bmMoZGF0YSk7XG5cdCAgICB9IGVsc2UgaWYgKERhdGFUYWJsZVJlbmRlcnNbY29sLnJlbmRlcl90eXBlXSAhPSBudWxsKSB7XG5cdFx0cmV0dXJuIERhdGFUYWJsZVJlbmRlcnNbY29sLnJlbmRlcl90eXBlXShkYXRhLCAnZGlzcGxheScsIHJvdywgY29sLnplcm9faXNfbnVsbCk7XG5cdCAgICB9IGVsc2Uge1xuXHRcdHRocm93IGBJbiBjb2x1bW4gJHtjb2wuZGF0YV9maWVsZH0gcmVuZGVyX3R5cGU6ICR7Y29sLnJlbmRlcl90eXBlfSBub3QgZm91bmRgO1xuXHQgICAgfVxuXHR9XG5cdHJldHVybiBkYXRhO1xuICAgIH07XG59XG5cbi8qIFRoaXMgZnVuY3Rpb24gYXBwYXJlbnRseSBjcmVhdGUgdGhlIGFjdGlvbiBidXR0b25zICovXG5mdW5jdGlvbiBnZXRfZl9wcmludF92X25vZGVfYnV0dG9ucyhsaXN0X29yX2FycmF5KSB7XG4gICAgcmV0dXJuIChjb2wsIHJvdywgdnVlX29iaikgPT4ge1xuXHRjb25zdCBvbl9jbGljayA9IChpZCkgPT4ge1xuXHQgICAgcmV0dXJuIChlKSA9PiB7XG5cdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRsZXQgZXZlbnQgPSB7ZXZlbnRfaWQ6IGlkLCByb3csIGNvbH07XG5cdFx0dnVlX29iai5lbWl0KCdjdXN0b21fZXZlbnQnLCBldmVudCk7XG5cdCAgICB9XG5cdH07XG5cdGxldCB2X25vZGVzID0gY29sLmJ1dHRvbl9kZWZfYXJyYXkubWFwKChiX2RlZikgPT4ge1xuXHQgICAgbGV0IGF0dHJpYnV0ZXMgPSB7fTtcblx0ICAgIGlmIChiX2RlZi5hdHRyaWJ1dGVzICE9IG51bGwpIHtcblx0XHRhdHRyaWJ1dGVzID0gYl9kZWYuYXR0cmlidXRlcztcblx0ICAgIH1cblx0ICAgIGxldCBjbGFzc19hcnJheSA9IG50b3BuZ191dGlsaXR5LmNsb25lKGJfZGVmLmNsYXNzKTtcblx0ICAgIGlmIChiX2RlZi5mX21hcF9jbGFzcyAhPSBudWxsKSB7XG5cdFx0Y2xhc3NfYXJyYXkgPSBiX2RlZi5mX21hcF9jbGFzcyhjbGFzc19hcnJheSwgcm93KTtcblx0ICAgIH1cblx0ICAgIGxldCBfY2xhc3MgPSBcIlwiO1xuXHQgICAgaWYgKGNsYXNzX2FycmF5ICE9IG51bGwgJiYgY2xhc3NfYXJyYXkubGVuZ3RoID4gMCkge1xuXHRcdF9jbGFzcyA9IGNsYXNzX2FycmF5LmpvaW4oXCIgXCIpO1xuXHQgICAgfVxuXHQgICAgaWYgKGxpc3Rfb3JfYXJyYXkgPT0gZmFsc2UpIHtcblx0XHRyZXR1cm4gdnVlX29iai5oKFwiYnV0dG9uXCIsIHsgY2xhc3M6IGBidG4gYnRuLXNtIGJ0bi1zZWNvbmRhcnkgJHtfY2xhc3N9YCwgc3R5bGU6IFwibWFyZ2luLXJpZ2h0OjAuMnJlbTtcIiwgb25DbGljazogb25fY2xpY2soYl9kZWYuZXZlbnRfaWQpLCAuLi5hdHRyaWJ1dGVzIH0sIFsgdnVlX29iai5oKFwic3BhblwiLCB7IGNsYXNzOiBiX2RlZi5pY29uLCBzdHlsZTogXCJcIiwgdGl0bGU6IF9pMThuKGJfZGVmLnRpdGxlX2kxOG4pfSksIF0pO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHZ1ZV9vYmouaChcImFcIiwgeyBjbGFzczogYCR7X2NsYXNzfSBidG4tc21gLCBvbkNsaWNrOiBvbl9jbGljayhiX2RlZi5ldmVudF9pZCksIHN0eWxlOiBcImRpc3BsYXk6YmxvY2s7XCIsIC4uLmF0dHJpYnV0ZXMgfSwgWyB2dWVfb2JqLmgoXCJzcGFuXCIsIHsgY2xhc3M6IGJfZGVmLmljb24sIHN0eWxlOiBcIm1hcmdpbi1yaWdodDowLjJyZW07Y3Vyc29yOnBvaW50ZXI7XCIgfSksIF9pMThuKGJfZGVmLnRpdGxlX2kxOG4pXSk7XG5cdH0pO1xuXHRpZiAobGlzdF9vcl9hcnJheSA9PSB0cnVlKSB7XG5cdCAgICBsZXQgdl90aXRsZSA9IHZ1ZV9vYmouaChcInNwYW5cIiwgeyBjbGFzczogXCJmYXMgZmEtc20gZmEtYWxpZ24tanVzdGlmeVwiIH0pO1xuXHQgICAgbGV0IGRyb3Bkb3duID0gIHZ1ZV9vYmouaChEcm9wZG93biwgeyBhdXRvX2xvYWQ6IHRydWUsIGJ1dHRvbl9zdHlsZTogXCJcIiwgYnV0dG9uX2NsYXNzOiBcImJ0bi1zZWNvbmRhcnkgYnRuLXNtXCIgfSwge1xuXHRcdHRpdGxlOiAoKSA9PiB2X3RpdGxlLFxuXHRcdG1lbnU6ICgpID0+IHZfbm9kZXMsXG5cdCAgICB9KTtcblx0ICAgIHJldHVybiBkcm9wZG93bjtcblx0fVxuXHRyZXR1cm4gdnVlX29iai5oKFwiZGl2XCIsIHtjbGFzczpcImJ1dHRvbi1ncm91cFwifSwgdl9ub2Rlcyk7XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0X3Jvd3NfZnVuYyh0YWJsZV9kZWYsIGZfZ2V0X2V4dHJhX3BhcmFtc19vYmosIGZfb25fZ2V0X3Jvd3MpIHtcbiAgICBsZXQgZl9nZXRfY29sdW1uX2lkID0gZ2V0X2NvbHVtbl9pZF9mdW5jKHRhYmxlX2RlZik7XG4gICAgcmV0dXJuIGFzeW5jIChhY3RpdmVfcGFnZSwgcGVyX3BhZ2UsIGNvbHVtbnNfd3JhcCwgbWFwX3NlYXJjaCwgZmlyc3RfZ2V0X3Jvd3MpID0+IHtcblx0bGV0IHNvcnRfY29sdW1uID0gY29sdW1uc193cmFwLmZpbmQoKGMpID0+IGMuc29ydCAhPSAwKTtcblx0bGV0IHZpc2libGVfY29sdW1ucyA9IGNvbHVtbnNfd3JhcC5maWx0ZXIoKGMpID0+IGMudmlzaWJsZSA9PSB0cnVlKVxuXHQgICAgLm1hcCgoYykgPT4gZl9nZXRfY29sdW1uX2lkKGMpKS5qb2luKFwiLFwiKTtcblx0bGV0IHBhcmFtcyA9IHtcbiAgICAgICAgICAgIHN0YXJ0OiAoYWN0aXZlX3BhZ2UgKiBwZXJfcGFnZSksXG4gICAgICAgICAgICBsZW5ndGg6IHBlcl9wYWdlLFxuXHQgICAgbWFwX3NlYXJjaCxcblx0ICAgIHZpc2libGVfY29sdW1ucyxcblx0fTtcblx0aWYgKHNvcnRfY29sdW1uICE9IG51bGwpIHtcblx0ICAgIHBhcmFtcy5zb3J0ID0gZl9nZXRfY29sdW1uX2lkKHNvcnRfY29sdW1uLmRhdGEpO1xuXHQgICAgcGFyYW1zLm9yZGVyID0gc29ydF9jb2x1bW4uc29ydCA9PSAxID8gXCJhc2NcIiA6IFwiZGVzY1wiO1xuXHR9XG5cdGlmIChmX2dldF9leHRyYV9wYXJhbXNfb2JqICE9IG51bGwpIHtcblx0ICAgIGxldCBleHRyYV9wYXJhbXMgPSBmX2dldF9leHRyYV9wYXJhbXNfb2JqKCk7XG5cdCAgICBwYXJhbXMgPSB7IC4uLnBhcmFtcywgLi4uZXh0cmFfcGFyYW1zLCB9O1xuXHR9XG5cdGNvbnN0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMocGFyYW1zKTtcblx0Y29uc3QgdXJsID0gYCR7aHR0cF9wcmVmaXh9LyR7dGFibGVfZGVmLmRhdGFfdXJsfT8ke3VybF9wYXJhbXN9YDtcblx0bGV0IHJlcyA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIG51bGwsIG51bGwsIHRydWUpO1xuXHRpZiAoZl9vbl9nZXRfcm93cyAhPSBudWxsKSB7XG5cdCAgICBmX29uX2dldF9yb3dzKHBhcmFtcyk7XG5cdH1cblx0bGV0IHJvd3MgPSByZXMucnNwO1xuXHRpZiAodGFibGVfZGVmLnJzcF9yZWNvcmRzX2ZpZWxkICE9IG51bGwpIHtcblx0ICAgIHJvd3MgPSByZXMucnNwW3RhYmxlX2RlZi5yc3BfcmVjb3Jkc19maWVsZF07XG5cdH1cblx0bGV0IHF1ZXJ5X2luZm8gPSByZXMucXVlcnlfaW5mbztcblx0aWYgKHRhYmxlX2RlZi5yc3BfcXVlcnlfaW5mb19maWVsZCAhPSBudWxsKSB7XG5cdCAgICBxdWVyeV9pbmZvID0gcmVzLnJzcFt0YWJsZV9kZWYucnNwX3F1ZXJ5X2luZm9fZmllbGRdO1xuXHR9XG5cdC8vIGZpeCBzZXJ2ZXIgcmVzdCBidWdcblx0aWYgKHJlcy5yZWNvcmRzRmlsdGVyZWQgPiByZXMucmVjb3Jkc1RvdGFsKSB7XG5cdCAgICByZXMucmVjb3Jkc1RvdGFsID0gcmVzLnJlY29yZHNGaWx0ZXJlZDtcblx0fVxuXHRyZXR1cm4geyB0b3RhbF9yb3dzOiByZXMucmVjb3Jkc1RvdGFsLCByb3dzLCBxdWVyeV9pbmZvIH07XG5cdC8vIHJldHVybiB7IHRvdGFsX3Jvd3M6IDEsIHJvd3M6IFtyb3dzWzBdXSwgcXVlcnlfaW5mbyB9O1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0X2ZfcHJpbnRfY29sdW1uX25hbWUodGFibGVfZGVmKSB7XG4gICAgcmV0dXJuIChjb2wpID0+IHtcblx0aWYgKGNvbC50aXRsZV9pMThuICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBfaTE4bihjb2wudGl0bGVfaTE4bik7XG5cdH1cblx0aWYgKGNvbC50aXRsZSAhPSBudWxsKSB7XG5cdCAgICByZXR1cm4gY29sLnRpdGxlO1xuXHR9XG5cdHJldHVybiBcIlwiO1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIGdldF9jb2x1bW5faWRfZnVuYyh0YWJsZV9kZWYpIHtcbiAgICByZXR1cm4gKGNvbCkgPT4ge1xuXHRpZiAoY29sLmlkICE9IG51bGwpIHsgcmV0dXJuIGNvbC5pZDsgfVxuXHRpZiAoY29sLmRhdGFfZmllbGQgIT0gbnVsbCkgeyByZXR1cm4gY29sLmRhdGFfZmllbGQ7IH1cblx0cmV0dXJuIHRhYmxlX2RlZi5jb2x1bW5zLmZpbmRJbmRleCgoYykgPT4gYyA9PSBjb2wpO1xuICAgIH07XG59XG5cbi8qKlxuICAgR2V0IGNvbHVtbnMgaW4gbmV3IHRhYmxlIGZvcm1hdCBmcm9tIG9sZCBkYXRhdGFibGUgZm9ybWF0LlxuKi9cbmZ1bmN0aW9uIGdldF9jb2x1bW5zX2Zyb21fZGF0YXRhYmxlX2NvbHVtbnMoZGF0YXRhYmxlX2NvbHVtbnNfdGl0bGUsIGRhdGF0YWJsZV9jb2x1bW5zX2pzKSB7XG4gICAgbGV0IHRhYmxlX2NvbHVtbnNfY29uZmlnID0gZGF0YXRhYmxlX2NvbHVtbnNfanMubWFwKChjLCBpbmRleCkgPT4ge1xuXHRsZXQgY29uZmlnID0ge1xuXHQgICAgZGF0YV9maWVsZDogYy5kYXRhLFxuXHQgICAgdGl0bGU6IGRhdGF0YWJsZV9jb2x1bW5zX3RpdGxlW2luZGV4XSxcblx0ICAgIHNvcnRhYmxlOiBjLm9yZGVyYWJsZSA9PSBudWxsIHx8IGMub3JkZXJhYmxlID09IHRydWUsXG5cdH07XG5cdGlmIChjLmNsYXNzTmFtZSAhPSBudWxsKSB7XG5cdCAgICBjb25maWcuY2xhc3MgPSBjLmNsYXNzTmFtZS5zcGxpdChcIiBcIik7XG5cdH1cblx0aWYgKGMucmVuZGVyICE9IG51bGwpIHtcblx0ICAgIGMucmVuZGVyX2Z1bmMgPSAoZGF0YSwgcm93KSA9PiBjLnJlbmRlcihkYXRhLCAnZGlzcGxheScsIHJvdyk7XG5cdH1cbiAgICB9KTtcbiAgICByZXR1cm4gdGFibGVfY29sdW1uc19jb25maWc7XG5cbn1cblxuY29uc3QgdGFibGVfdXRpbHMgPSB7XG4gICAgZ2V0X2NvbHVtbnNfZnJvbV9kYXRhdGFibGVfY29sdW1ucyxcbiAgICBidWlsZF90YWJsZSxcbn07XG5cbmNvbnN0IHJlbmRlcl9mdW5jdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgICAvLyAgICAgZm9ybWF0VmFsdWVMYWJlbChvYmosIHR5cGUsIHJvdywgemVyb19pc19udWxsKSB7XG4gICAgLy8gICAgIGlmICh0eXBlICE9PSBcImRpc3BsYXlcIikgcmV0dXJuIG9iai52YWx1ZTtcbiAgICAvLyAgICAgbGV0IGNlbGwgPSBvYmoubGFiZWw7XG4gICAgLy8gXHRpZiAoemVyb19pc19udWxsID09IHRydWUgJiYgb2JqLnZhbHVlID09IDApIHtcbiAgICAvLyBcdCAgICBjZWxsID0gXCJcIjtcbiAgICAvLyBcdH1cbiAgICAvLyAgICAgaWYgKG9iai5jb2xvcikgY2VsbCA9IGA8c3BhbiBjbGFzcz0nZm9udC13ZWlnaHQtYm9sZCcgc3R5bGU9J2NvbG9yOiAke29iai5jb2xvcn0nPiR7Y2VsbH08L3NwYW4+YDtcbiAgICAvLyAgICAgcmV0dXJuIGNlbGw7XG4gICAgLy8gfVxuXG59KCk7XG5cbmV4cG9ydCBkZWZhdWx0IHRhYmxlX3V0aWxzO1xuIiwibGV0IGZpbHRlcnNfY29uc3RfZGljdCA9IHt9O1xuXG5hc3luYyBmdW5jdGlvbiBnZXRfZmlsdGVyX2NvbnN0KHVybF9yZXF1ZXN0KSB7XG4gICAgaWYgKGZpbHRlcnNfY29uc3RfZGljdFt1cmxfcmVxdWVzdF0gPT0gbnVsbCkge1xuXHRmaWx0ZXJzX2NvbnN0X2RpY3RbdXJsX3JlcXVlc3RdID0gbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybF9yZXF1ZXN0KTtcbiAgICB9XG4gICAgbGV0IGZpbHRlcl9jb25zdHMgPSBhd2FpdCBmaWx0ZXJzX2NvbnN0X2RpY3RbdXJsX3JlcXVlc3RdO1xuICAgIHJldHVybiBmaWx0ZXJfY29uc3RzO1xufVxuXG5jb25zdCB0YWdfb3BlcmF0b3JfbGFiZWxfZGljdCA9IHtcbiAgICBcImVxXCI6IFwiPVwiLFxuICAgIFwibmVxXCI6IFwiIT1cIixcbiAgICBcImx0XCI6IFwiPFwiLFxuICAgIFwiZ3RcIjogXCI+XCIsXG4gICAgXCJndGVcIjogXCI+PVwiLFxuICAgIFwibHRlXCI6IFwiPD1cIixcbiAgICBcImluXCI6IFwiY29udGFpbnNcIixcbiAgICBcIm5pblwiOiBcImRvZXMgbm90IGNvbnRhaW5cIlxufTtcblxuY29uc3QgbG9hZF9maWx0ZXJzX2RhdGEgPSBhc3luYyBmdW5jdGlvbiAoZmlsdGVyc19jb25zdCkge1xuICAgIGZpbHRlcnNfY29uc3QuZmlsdGVyKCh4KSA9PiB4LmxhYmVsID09IG51bGwpLmZvckVhY2goKHgpID0+IHsgY29uc29sZS5lcnJvcihgbGFiZWwgbm90IGRlZmluZWQgZm9yIGZpbHRlciAke0pTT04uc3RyaW5naWZ5KHgpfWApOyB4LmxhYmVsID0gXCJcIjsgfSk7XG4gICAgZmlsdGVyc19jb25zdC5zb3J0KChhLCBiKSA9PiBhLmxhYmVsLmxvY2FsZUNvbXBhcmUoYi5sYWJlbCkpO1xuICAgIGkxOG5fZXh0LnRhZ3MgPSB7fTtcbiAgICBUQUdfT1BFUkFUT1JTID0ge307XG4gICAgREVGSU5FRF9UQUdTID0ge307XG4gICAgZmlsdGVyc19jb25zdC5mb3JFYWNoKChmX2RlZikgPT4ge1xuICAgICAgICBpMThuX2V4dC50YWdzW2ZfZGVmLmlkXSA9IGZfZGVmLmxhYmVsO1xuICAgICAgICBmX2RlZi5vcGVyYXRvcnMuZm9yRWFjaCgob3ApID0+IFRBR19PUEVSQVRPUlNbb3AuaWRdID0gb3AubGFiZWwpO1xuICAgICAgICBERUZJTkVEX1RBR1NbZl9kZWYuaWRdID0gZl9kZWYub3BlcmF0b3JzLm1hcCgob3ApID0+IG9wLmlkKTtcbiAgICB9KTtcbiAgICBsZXQgZW50cmllcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJpZXMoKTtcbiAgICBsZXQgZmlsdGVycyA9IFtdO1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIGVudHJpZXMpIHtcbiAgICAgICAgbGV0IGZpbHRlcl9kZWYgPSBGSUxURVJTX0NPTlNULmZpbmQoKGZjKSA9PiBmYy5pZCA9PSBrZXkpO1xuICAgICAgICBpZiAoZmlsdGVyX2RlZiAhPSBudWxsKSB7XG4gICAgICAgICAgICBsZXQgb3B0aW9uc19zdHJpbmcgPSB2YWx1ZS5zcGxpdChcIixcIik7XG4gICAgICAgICAgICBvcHRpb25zX3N0cmluZy5mb3JFYWNoKChvcHRfc3Rpcm5nKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IFt2YWx1ZSwgb3BlcmF0b3JdID0gb3B0X3N0aXJuZy5zcGxpdChcIjtcIik7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICBvcGVyYXRvciA9PSBudWxsIHx8IHZhbHVlID09IG51bGwgfHwgb3BlcmF0b3IgPT0gXCJcIlxuICAgICAgICAgICAgICAgICAgICB8fCAoZmlsdGVyX2RlZi5vcHRpb25zICE9IG51bGwgJiYgZmlsdGVyX2RlZi5vcHRpb25zLmZpbmQoKG9wdCkgPT4gb3B0LnZhbHVlID09IHZhbHVlKSA9PSBudWxsKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXHRcdGxldCB2YWx1ZV9sYWJlbCA9IHZhbHVlO1xuXHRcdGlmIChmaWx0ZXJfZGVmLnZhbHVlX3R5cGUgPT0gXCJhcnJheVwiKSB7XG5cdFx0ICAgIHZhbHVlX2xhYmVsID0gZmlsdGVyX2RlZj8ub3B0aW9ucz8uZmluZCgob3B0KSA9PiBvcHQudmFsdWUgPT0gdmFsdWUpPy5sYWJlbDtcblx0XHR9XG4gICAgICAgICAgICAgICAgZmlsdGVycy5wdXNoKHsgaWQ6IGZpbHRlcl9kZWYuaWQsIG9wZXJhdG9yOiBvcGVyYXRvciwgdmFsdWU6IHZhbHVlLCBsYWJlbDogZmlsdGVyX2RlZi5sYWJlbCwgdmFsdWVfbGFiZWwgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmlsdGVycztcbiAgICAvLyBcImw3cHJvdG89WFhYO2VxXCJcbn1cblxuXG5mdW5jdGlvbiBnZXRfZmlsdGVyc19vYmplY3QoZmlsdGVycykge1xuICAgIGxldCBmaWx0ZXJzX2dyb3VwcyA9IHt9O1xuICAgIGZpbHRlcnMuZm9yRWFjaCgoZikgPT4ge1xuICAgICAgICBsZXQgZ3JvdXAgPSBmaWx0ZXJzX2dyb3Vwc1tmLmlkXTtcbiAgICAgICAgaWYgKGdyb3VwID09IG51bGwpIHtcbiAgICAgICAgICAgIGdyb3VwID0gW107XG4gICAgICAgICAgICBmaWx0ZXJzX2dyb3Vwc1tmLmlkXSA9IGdyb3VwO1xuICAgICAgICB9XG4gICAgICAgIGdyb3VwLnB1c2goZik7XG4gICAgfSk7XG4gICAgbGV0IGZpbHRlcnNfb2JqZWN0ID0ge307XG4gICAgZm9yIChsZXQgZl9pZCBpbiBmaWx0ZXJzX2dyb3Vwcykge1xuICAgICAgICBsZXQgZ3JvdXAgPSBmaWx0ZXJzX2dyb3Vwc1tmX2lkXTtcbiAgICAgICAgbGV0IGZpbHRlcl92YWx1ZXMgPSBncm91cC5maWx0ZXIoKGYpID0+IGYudmFsdWUgIT0gbnVsbCAmJiBmLm9wZXJhdG9yICE9IG51bGwgJiYgZi5vcGVyYXRvciAhPSBcIlwiKS5tYXAoKGYpID0+IGAke2YudmFsdWV9OyR7Zi5vcGVyYXRvcn1gKS5qb2luKFwiLFwiKTtcbiAgICAgICAgZmlsdGVyc19vYmplY3RbZl9pZF0gPSBmaWx0ZXJfdmFsdWVzO1xuICAgIH1cbiAgICByZXR1cm4gZmlsdGVyc19vYmplY3Q7XG59XG5cbmNvbnN0IGZpbHRlcnNNYW5hZ2VyID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG5cdGdldF9maWx0ZXJfY29uc3QsXG5cdGdldF9maWx0ZXJzX29iamVjdCxcblx0bG9hZF9maWx0ZXJzX2RhdGEsXG5cdHRhZ19vcGVyYXRvcl9sYWJlbF9kaWN0LFxuICAgIH07XG59KCk7XG5cbmV4cG9ydCBkZWZhdWx0IGZpbHRlcnNNYW5hZ2VyO1xuIiwiPHRlbXBsYXRlPlxuICA8c2VsZWN0IGNsYXNzPVwic2VsZWN0MiBmb3JtLXNlbGVjdFwiIHJlZj1cInNlbGVjdDJcIiByZXF1aXJlZCBuYW1lPVwiZmlsdGVyX3R5cGVcIiA6bXVsdGlwbGU9XCJtdWx0aXBsZVwiPlxuICAgIDxvcHRpb24gY2xhc3M9XCJudG9wbmctZHJvcGRvd24tbWluLXdpZHRoIG5vLXdyYXBcIiB2LWZvcj1cIihpdGVtLCBpKSBpbiBvcHRpb25zXzJcIiA6c2VsZWN0ZWQ9XCJpc19zZWxlY3RlZChpdGVtKVwiIDp2YWx1ZT1cIml0ZW0udmFsdWVcIiA6ZGlzYWJsZWQ9XCJpdGVtLmRpc2FibGVkXCI+XG4gICAgICB7e2l0ZW0ubGFiZWx9fVxuICAgIDwvb3B0aW9uPlxuICAgIDxvcHRncm91cCB2LWZvcj1cIihpdGVtLCBpKSBpbiBncm91cHNfb3B0aW9uc18yXCIgOmxhYmVsPVwiaXRlbS5ncm91cFwiPlxuICAgICAgPG9wdGlvbiB2LWZvcj1cIihvcHQsIGopIGluIGl0ZW0ub3B0aW9uc1wiIDpzZWxlY3RlZD1cImlzX3NlbGVjdGVkKG9wdClcIiA6dmFsdWU9XCJvcHQudmFsdWVcIiA6ZGlzYWJsZWQ9XCJvcHQuZGlzYWJsZWRcIj5cbiAgICAgICAge3tvcHQubGFiZWx9fVxuICAgICAgPC9vcHRpb24+XG4gICAgPC9vcHRncm91cD5cbiAgPC9zZWxlY3Q+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIGNvbXB1dGVkLCB3YXRjaCwgb25CZWZvcmVVbm1vdW50IH0gZnJvbSBcInZ1ZVwiO1xuXG5jb25zdCBzZWxlY3QyID0gcmVmKG51bGwpO1xuXG4vLyBjb25zdCBzZWxlY3RlZDJfb3B0aW9uID0gcmVmKHt9KTtcblxuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFsndXBkYXRlOnNlbGVjdGVkX29wdGlvbicsICd1cGRhdGU6c2VsZWN0ZWRfb3B0aW9ucycsICdzZWxlY3Rfb3B0aW9uJywgJ3Vuc2VsZWN0X29wdGlvbicsICdjaGFuZ2Vfc2VsZWN0ZWRfb3B0aW9ucyddKTtcblxuY29uc3Qgb3B0aW9uc18yID0gcmVmKFtdKTtcbmNvbnN0IGdyb3Vwc19vcHRpb25zXzIgPSByZWYoW10pO1xuY29uc3Qgc2VsZWN0ZWRfb3B0aW9uXzIgPSByZWYoe30pO1xuY29uc3Qgc2VsZWN0ZWRfdmFsdWVzID0gcmVmKFtdKTsgLy8gdXNlZCBvbmx5IGlmIG11bHRpcGxlID09IHRydWVcbmNvbnN0IHJlZnJlc2hfb3B0aW9ucyA9IHJlZigwKTtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gICAgaWQ6IFN0cmluZyxcbiAgICBvcHRpb25zOiBBcnJheSxcbiAgICBzZWxlY3RlZF9vcHRpb246IE9iamVjdCxcbiAgICBzZWxlY3RlZF9vcHRpb25zOiBBcnJheSxcbiAgICBtdWx0aXBsZTogQm9vbGVhbixcbiAgICBhZGRfdGFnOiBCb29sZWFuLFxuICAgIGRpc2FibGVfY2hhbmdlOiBCb29sZWFuLFxufSk7XG5cbmxldCBmaXJzdF90aW1lX3JlbmRlciA9IHRydWU7XG5cbm9uTW91bnRlZCgoKSA9PiB7XG4gICAgaWYgKCFwcm9wcy5vcHRpb25zKSB7IHJldHVybjsgfVxuICAgIGlmICghcHJvcHMuZGlzYWJsZV9jaGFuZ2UgfHwgIWZpcnN0X3RpbWVfcmVuZGVyKSB7XG4gICAgXHRzZXRfaW5wdXQoKTtcbiAgICB9XG59KTtcblxud2F0Y2goKCkgPT4gcHJvcHMuc2VsZWN0ZWRfb3B0aW9uLCAoY3VyX3ZhbHVlLCBvbGRfdmFsdWUpID0+IHtcbiAgICBzZXRfc2VsZWN0ZWRfb3B0aW9uKGN1cl92YWx1ZSk7XG4gICAgY2hhbmdlX3NlbGVjdF8yX3NlbGVjdGVkX3ZhbHVlKCk7XG59LCB7IGZsdXNoOiAncHJlJ30pO1xuXG53YXRjaCgoKSA9PiBwcm9wcy5zZWxlY3RlZF9vcHRpb25zLCAoY3VyX3ZhbHVlLCBvbGRfdmFsdWUpID0+IHtcbiAgICBzZXRfc2VsZWN0ZWRfdmFsdWVzKGN1cl92YWx1ZSk7XG4gICAgY2hhbmdlX3NlbGVjdF8yX3NlbGVjdGVkX3ZhbHVlKCk7XG59LCB7IGZsdXNoOiAncHJlJ30pO1xuXG5cbndhdGNoKFtyZWZyZXNoX29wdGlvbnNdLCAoY3VyX3ZhbHVlLCBvbGRfdmFsdWUpID0+IHtcbiAgICByZW5kZXIoKTtcbn0sIHsgZmx1c2g6ICdwb3N0J30pO1xuXG5cbndhdGNoKCgpID0+IHByb3BzLm9wdGlvbnMsIChjdXJyZW50X3ZhbHVlLCBvbGRfdmFsdWUpID0+IHtcbiAgICBpZiAocHJvcHMuZGlzYWJsZV9jaGFuZ2UgPT0gdHJ1ZSB8fCBjdXJyZW50X3ZhbHVlID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgc2V0X2lucHV0KCk7XG59LCB7IGZsdXNoOiAncHJlJ30pO1xuXG5cbmZ1bmN0aW9uIHNldF9pbnB1dCgpIHtcbiAgICBzZXRfb3B0aW9ucygpO1xuICAgIHNldF9zZWxlY3RlZF9vcHRpb24oKTtcbiAgICBzZXRfc2VsZWN0ZWRfdmFsdWVzKCk7XG59XG5cbmZ1bmN0aW9uIHNldF9vcHRpb25zKCkge1xuICAgIG9wdGlvbnNfMi52YWx1ZSA9IFtdO1xuICAgIGdyb3Vwc19vcHRpb25zXzIudmFsdWUgPSBbXTtcbiAgICBcbiAgICBpZiAocHJvcHMub3B0aW9ucyA9PSBudWxsKSB7IHJldHVybjsgfVxuICAgIGxldCBncm91cHNfZGljdCA9IHt9O1xuICAgIHByb3BzLm9wdGlvbnMuZm9yRWFjaCgob3B0aW9uKSA9PiB7XG5cdGxldCBvcHRfMiA9IHsgLi4ub3B0aW9uIH07XG5cdGlmIChvcHRfMi52YWx1ZSA9PSBudWxsKSB7XG5cdCAgICBvcHRfMi52YWx1ZSA9IG9wdF8yLmxhYmVsO1xuXHR9XG5cdGlmIChvcHRpb24uZ3JvdXAgPT0gbnVsbCkge1xuXHQgICAgb3B0aW9uc18yLnZhbHVlLnB1c2gob3B0XzIpO1xuXHR9IGVsc2Uge1xuXHQgICAgaWYgKGdyb3Vwc19kaWN0W29wdGlvbi5ncm91cF0gPT0gbnVsbCkge1xuXHRcdGdyb3Vwc19kaWN0W29wdGlvbi5ncm91cF0gPSB7IGdyb3VwOiBvcHRfMi5ncm91cCwgb3B0aW9uczogW10gfTtcblx0ICAgIH1cblx0ICAgIGdyb3Vwc19kaWN0W29wdGlvbi5ncm91cF0ub3B0aW9ucy5wdXNoKG9wdF8yKTtcblx0fVxuICAgIH0pO1xuICAgIGdyb3Vwc19vcHRpb25zXzIudmFsdWUgPSBudG9wbmdfdXRpbGl0eS5vYmplY3RfdG9fYXJyYXkoZ3JvdXBzX2RpY3QpO1xuICAgIHJlZnJlc2hfb3B0aW9ucy52YWx1ZSArPSAxO1xufVxuXG5cbmNvbnN0IHJlbmRlciA9ICgpID0+IHtcbiAgICBsZXQgc2VsZWN0MkRpdiA9IHNlbGVjdDIudmFsdWU7XG4gICAgaWYgKGZpcnN0X3RpbWVfcmVuZGVyID09IGZhbHNlKSB7XG5cdGRlc3Ryb3koKTtcbiAgICB9XG4gICAgaWYgKCEkKHNlbGVjdDJEaXYpLmhhc0NsYXNzKFwic2VsZWN0Mi1oaWRkZW4tYWNjZXNzaWJsZVwiKSkge1xuXHQkKHNlbGVjdDJEaXYpLnNlbGVjdDIoe1xuXHQgICAgd2lkdGg6ICcxMDAlJyxcblx0ICAgIGhlaWdodDogJzUwMHB4Jyxcblx0ICAgIHRoZW1lOiAnYm9vdHN0cmFwLTUnLFxuXHQgICAgZHJvcGRvd25QYXJlbnQ6ICQoc2VsZWN0MkRpdikucGFyZW50KCksXG5cdCAgICBkcm9wZG93bkF1dG9XaWR0aCA6IHRydWUsXG4gICAgICAgICAgICB0YWdzOiBwcm9wcy5hZGRfdGFnICYmICFwcm9wcy5tdWx0aXBsZSxcblx0fSk7XG5cdCQoc2VsZWN0MkRpdikub24oJ3NlbGVjdDI6c2VsZWN0JywgZnVuY3Rpb24gKGUpIHtcblx0ICAgIGxldCBkYXRhID0gZS5wYXJhbXMuZGF0YTtcbiAgICAgICAgICAgIGlmIChkYXRhLmVsZW1lbnQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vVE9ETzogaW1wbGVtZW50IGZvciBtdWx0aXNlbGVjdFxuICAgICAgICAgICAgICAgIGxldCBvcHRpb24gPSB7IGxhYmVsOiBkYXRhLnRleHQsIHZhbHVlOiBkYXRhLmlkIH07XG5cdFx0ZW1pdCgndXBkYXRlOnNlbGVjdGVkX29wdGlvbicsIG9wdGlvbik7XG5cdFx0ZW1pdCgnc2VsZWN0X29wdGlvbicsIG9wdGlvbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfSBcblx0ICAgIGxldCB2YWx1ZSA9IGRhdGEuZWxlbWVudC5fdmFsdWU7XG5cdCAgICBsZXQgb3B0aW9uID0gZmluZF9vcHRpb25fZnJvbV92YWx1ZSh2YWx1ZSk7XG5cdCAgICBpZiAodmFsdWUgIT0gcHJvcHMuc2VsZWN0ZWRfb3B0aW9uKSB7XG5cdFx0ZW1pdCgndXBkYXRlOnNlbGVjdGVkX29wdGlvbicsIG9wdGlvbik7XG5cdFx0ZW1pdCgnc2VsZWN0X29wdGlvbicsIG9wdGlvbik7XG4gICAgICAgICAgICB9XG5cdCAgICBpZiAoIXByb3BzLm11bHRpcGxlKSB7XG5cdFx0cmV0dXJuO1xuXHQgICAgfVxuXHQgICAgc2VsZWN0ZWRfdmFsdWVzLnZhbHVlID0gc2VsZWN0ZWRfdmFsdWVzLnZhbHVlLmZpbHRlcigodikgPT4gdiAhPSB2YWx1ZSk7XG5cdCAgICBzZWxlY3RlZF92YWx1ZXMudmFsdWUucHVzaCh2YWx1ZSk7XG5cdCAgICBsZXQgb3B0aW9ucyA9IGZpbmRfb3B0aW9uc19mcm9tX3ZhbHVlcyhzZWxlY3RlZF92YWx1ZXMudmFsdWUpO1xuXHQgICAgZW1pdCgndXBkYXRlOnNlbGVjdGVkX29wdGlvbnMnLCBvcHRpb25zKTtcblx0ICAgIGVtaXQoJ2NoYW5nZV9zZWxlY3RlZF9vcHRpb25zJywgb3B0aW9ucyk7XHRcdCBcblx0fSk7XG5cdCQoc2VsZWN0MkRpdikub24oJ3NlbGVjdDI6dW5zZWxlY3QnLCBmdW5jdGlvbiAoZSkge1xuXHQgICAgbGV0IGRhdGEgPSBlLnBhcmFtcy5kYXRhO1xuXHQgICAgbGV0IHZhbHVlID0gZGF0YS5lbGVtZW50Ll92YWx1ZTtcblx0ICAgIGlmICghcHJvcHMubXVsdGlwbGUpIHtcblx0XHRyZXR1cm47XG5cdCAgICB9XG5cdCAgICBzZWxlY3RlZF92YWx1ZXMudmFsdWUgPSBzZWxlY3RlZF92YWx1ZXMudmFsdWUuZmlsdGVyKCh2KSA9PiB2ICE9IHZhbHVlKTtcblx0ICAgIGxldCBvcHRpb24gPSBmaW5kX29wdGlvbl9mcm9tX3ZhbHVlKHZhbHVlKTtcblx0ICAgIGxldCBvcHRpb25zID0gZmluZF9vcHRpb25zX2Zyb21fdmFsdWVzKHNlbGVjdGVkX3ZhbHVlcy52YWx1ZSk7XG5cdCAgICBlbWl0KCd1bnNlbGVjdF9vcHRpb24nLCBvcHRpb24pO1xuXHQgICAgZW1pdCgndXBkYXRlOnNlbGVjdGVkX29wdGlvbnMnLCBvcHRpb25zKTtcblx0ICAgIGVtaXQoJ2NoYW5nZV9zZWxlY3RlZF9vcHRpb25zJywgb3B0aW9ucyk7XHRcdCBcblx0fSk7XG4gICAgfVxuICAgIGZpcnN0X3RpbWVfcmVuZGVyID0gZmFsc2U7XG4gICAgLy8gdGhpcy4kZm9yY2VVcGRhdGUoKTtcbiAgICBjaGFuZ2Vfc2VsZWN0XzJfc2VsZWN0ZWRfdmFsdWUoKTtcbn07XG5cbmZ1bmN0aW9uIGNoYW5nZV9zZWxlY3RfMl9zZWxlY3RlZF92YWx1ZSgpIHtcbiAgICBsZXQgc2VsZWN0MkRpdiA9IHNlbGVjdDIudmFsdWU7XG4gICAgaWYgKCFwcm9wcy5tdWx0aXBsZSkge1xuXHRsZXQgdmFsdWUgPSBnZXRfdmFsdWVfZnJvbV9zZWxlY3RlZF9vcHRpb24ocHJvcHMuc2VsZWN0ZWRfb3B0aW9uKTtcblx0JChzZWxlY3QyRGl2KS52YWwodmFsdWUpO1xuXHQkKHNlbGVjdDJEaXYpLnRyaWdnZXIoXCJjaGFuZ2VcIik7XG4gICAgfSBlbHNlIHtcblx0JChzZWxlY3QyRGl2KS52YWwoc2VsZWN0ZWRfdmFsdWVzLnZhbHVlKTtcblx0JChzZWxlY3QyRGl2KS50cmlnZ2VyKFwiY2hhbmdlXCIpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaXNfc2VsZWN0ZWQoaXRlbSkge1xuICAgIGlmICghcHJvcHMubXVsdGlwbGUpIHtcblx0Y29uc3QgaXNfemVyb192YWx1ZSA9IHNlbGVjdGVkX29wdGlvbl8yLnZhbHVlLnZhbHVlID09IDAgfHxzZWxlY3RlZF9vcHRpb25fMi52YWx1ZS52YWx1ZSA9PSBcIjBcIjtcblx0cmV0dXJuIGl0ZW0udmFsdWUgPT0gc2VsZWN0ZWRfb3B0aW9uXzIudmFsdWUudmFsdWUgfHwgKGlzX3plcm9fdmFsdWUgJiYgaXRlbS5sYWJlbCA9PSBzZWxlY3RlZF9vcHRpb25fMi52YWx1ZS5sYWJlbCk7XG59XG4gICByZXR1cm4gc2VsZWN0ZWRfdmFsdWVzLnZhbHVlLmZpbmQoKHYpID0+IHYgPT0gaXRlbS52YWx1ZSkgIT0gbnVsbCB8fCBpdGVtLnNlbGVjdGVkOyBcbn1cblxuZnVuY3Rpb24gc2V0X3NlbGVjdGVkX3ZhbHVlcygpIHtcbiAgICBpZiAocHJvcHMuc2VsZWN0ZWRfb3B0aW9ucyA9PSBudWxsIHx8ICFwcm9wcy5tdWx0aXBsZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHNlbGVjdGVkX3ZhbHVlcy52YWx1ZSA9IFtdO1xuICAgIHByb3BzLnNlbGVjdGVkX29wdGlvbnMuZm9yRWFjaCgob3B0KSA9PiB7XG4gICAgICAgIGxldCB2YWx1ZSA9IG9wdC52YWx1ZSB8fCBvcHQubGFiZWw7XG4gICAgICAgIHNlbGVjdGVkX3ZhbHVlcy52YWx1ZS5wdXNoKHZhbHVlKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gc2V0X3NlbGVjdGVkX29wdGlvbihzZWxlY3RlZF9vcHRpb24pIHtcbiAgICBpZiAoc2VsZWN0ZWRfb3B0aW9uID09IG51bGwgJiYgIXByb3BzLm11bHRpcGxlKSB7XG5cdHNlbGVjdGVkX29wdGlvbiA9IGdldF9wcm9wc19zZWxlY3RlZF9vcHRpb24oKTtcbiAgICB9XG4gICAgc2VsZWN0ZWRfb3B0aW9uXzIudmFsdWUgPSBzZWxlY3RlZF9vcHRpb247XG59XG5cbmZ1bmN0aW9uIGdldF9wcm9wc19zZWxlY3RlZF9vcHRpb24oKSB7XG4gICAgaWYgKHByb3BzLnNlbGVjdGVkX29wdGlvbiA9PSBudWxsKSB7XG5cdHJldHVybiBwcm9wcy5vcHRpb25zWzBdO1xuICAgIH1cbiAgICByZXR1cm4gcHJvcHMuc2VsZWN0ZWRfb3B0aW9uO1xufVxuXG5mdW5jdGlvbiBnZXRfdmFsdWVfZnJvbV9zZWxlY3RlZF9vcHRpb24oc2VsZWN0ZWRfb3B0aW9uKSB7XG4gICAgaWYgKHNlbGVjdGVkX29wdGlvbiA9PSBudWxsKSB7XG5cdHNlbGVjdGVkX29wdGlvbiA9IGdldF9wcm9wc19zZWxlY3RlZF9vcHRpb24oKTtcbiAgICB9XG4gICAgbGV0IHZhbHVlO1xuICAgIGlmIChzZWxlY3RlZF9vcHRpb24udmFsdWUgIT0gbnVsbCkge1xuXHR2YWx1ZSA9IHNlbGVjdGVkX29wdGlvbi52YWx1ZTtcbiAgICB9IGVsc2Uge1xuXHR2YWx1ZSA9IHNlbGVjdGVkX29wdGlvbi5sYWJlbDtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiBmaW5kX29wdGlvbnNfZnJvbV92YWx1ZXModmFsdWVzKSB7XG4gICAgbGV0IG9wdGlvbnMgPSB2YWx1ZXMubWFwKCh2KSA9PiBmaW5kX29wdGlvbl9mcm9tX3ZhbHVlKHYpKTtcbiAgICByZXR1cm4gb3B0aW9ucztcbn1cblxuZnVuY3Rpb24gZmluZF9vcHRpb25fZnJvbV92YWx1ZSh2YWx1ZSkge1xuICAgIGxldCBvcHRpb25fMiA9IGZpbmRfb3B0aW9uXzJfZnJvbV92YWx1ZSh2YWx1ZSk7XG4gICAgbGV0IG9wdGlvbiA9IHByb3BzLm9wdGlvbnMuZmluZCgobykgPT4gby5sYWJlbCA9PSBvcHRpb25fMi5sYWJlbCk7XG4gICAgcmV0dXJuIG9wdGlvbjtcbn1cblxuZnVuY3Rpb24gZmluZF9vcHRpb25fMl9mcm9tX3ZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09IG51bGwpIHtcblx0dmFsdWUgPSBnZXRfdmFsdWVfZnJvbV9zZWxlY3RlZF9vcHRpb24oKTtcbiAgICB9XG4gICAgLy8gbGV0IG9wdGlvbiA9IG9wdGlvbnNfMi52YWx1ZS5maW5kKChvKSA9PiBvLnZhbHVlID09IHZhbHVlKTtcbiAgICBsZXQgb3B0aW9uID0gb3B0aW9uc18yLnZhbHVlLmZpbmQoKG8pID0+IG8udmFsdWUgPT0gdmFsdWUpO1xuICAgIGlmIChvcHRpb24gIT0gbnVsbCkgeyByZXR1cm4gb3B0aW9uOyB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBncm91cHNfb3B0aW9uc18yLnZhbHVlLmxlbmd0aDsgaSArPSAxKSB7XG5cdGxldCBnID0gZ3JvdXBzX29wdGlvbnNfMi52YWx1ZVtpXTtcblx0b3B0aW9uID0gZy5vcHRpb25zLmZpbmQoKG8pID0+IG8udmFsdWUgPT0gdmFsdWUpO1xuXHRpZiAob3B0aW9uICE9IG51bGwpIHtcblx0ICAgIHJldHVybiBvcHRpb247XG5cdH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG4gICAgXG5kZWZpbmVFeHBvc2UoeyByZW5kZXIgfSk7XG5cbmZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgdHJ5IHtcblx0JChzZWxlY3QyLnZhbHVlKS5zZWxlY3QyKCdkZXN0cm95Jyk7XG5cdCQoc2VsZWN0Mi52YWx1ZSkub2ZmKCdzZWxlY3QyOnNlbGVjdCcpOyAgICBcbiAgICB9IGNhdGNoKGVycikge1xuXHRjb25zb2xlLmVycm9yKFwiRGVzdHJveSBzZWxlY3Qtc2VhcmNoIGNhdGNoIGVycm9yOlwiKTtcblx0Y29uc29sZS5lcnJvcihlcnIpO1xuICAgIH1cbn1cblxub25CZWZvcmVVbm1vdW50KCgpID0+IHtcbiAgICBkZXN0cm95KCk7XG59KTtcblxuPC9zY3JpcHQ+XG4iLCI8dGVtcGxhdGU+XG48bmF2IGNsYXNzPVwibmF2YmFyIG5hdmJhci1zaGFkb3cgbmF2YmFyLWV4cGFuZC1sZyBuYXZiYXItbGlnaHQgYmctbGlnaHQgcHgtMiBtYi0yXCI+XG4gIDxzcGFuIGNsYXNzPVwibWUtMSB0ZXh0LW5vd3JhcFwiIHN0eWxlPVwiZm9udC1zaXplOiAxLjFyZW07XCI+XG4gICAgPGkgOmNsYXNzPVwibWFpbl90aXRsZS5pY29uXCI+PC9pPlxuICAgIDxhIHYtaWY9XCJtYWluX3RpdGxlLmhyZWZcIiA6aHJlZj1cIm1haW5fdGl0bGUuaHJlZlwiIDp0aXRsZT1cIm1haW5fdGl0bGUudGl0bGVcIj4ge3ttYWluX3RpdGxlLmxhYmVsfX08L2E+ICBcbiAgICA8c3BhbiB2LWVsc2UgOnRpdGxlPVwibWFpbl90aXRsZS50aXRsZVwiPiB7e21haW5fdGl0bGUubGFiZWx9fTwvc3Bhbj4gICAgXG4gICAgPHRlbXBsYXRlIHYtZm9yPVwiaXRlbSBpbiBzZWNvbmRhcnlfdGl0bGVfbGlzdFwiPiAvIFxuICAgICAgPGEgdi1pZj1cIml0ZW0uaHJlZlwiIDpjbGFzcz1cIml0ZW0uY2xhc3NcIiA6aHJlZj1cIml0ZW0uaHJlZlwiIDp0aXRsZT1cIml0ZW0udGl0bGVcIj5cbiAgICAgICAge3tpdGVtLmxhYmVsfX1cbiAgICAgICAgPGkgdi1pZj1cIml0ZW0uaWNvblwiIDpjbGFzcz1cIml0ZW0uaWNvblwiPjwvaT5cbiAgICAgIDwvYT4gIFxuICAgICAgPHNwYW4gdi1lbHNlIDp0aXRsZT1cIml0ZW0udGl0bGVcIj57e2l0ZW0ubGFiZWx9fTwvc3Bhbj5cbiAgICA8L3RlbXBsYXRlPlxuICA8L3NwYW4+XG4gIDxzcGFuIGNsYXNzPVwidGV4dC1tdXRlZCBtcy0xIGQtbm9uZSBkLWxnLWlubGluZSBkLW1kLW5vbmVcIj58PC9zcGFuPlxuICA8YnV0dG9uIGNsYXNzPVwibmF2YmFyLXRvZ2dsZXJcIiB0eXBlPVwiYnV0dG9uXCI+XG4gICAgPHNwYW4gY2xhc3M9XCJuYXZiYXItdG9nZ2xlci1pY29uXCI+PC9zcGFuPlxuICA8L2J1dHRvbj5cbiAgPGRpdiBjbGFzcz1cImNvbGxhcHNlIG5hdmJhci1jb2xsYXBzZSBzY3JvbGwteFwiIGlkPVwibmF2YmFyTmF2XCI+XG4gICAgPHVsIGNsYXNzPVwibmF2YmFyLW5hdlwiPlxuICAgICAgPHRlbXBsYXRlIHYtZm9yPVwiaXRlbSBpbiBpdGVtc190YWJsZVwiPlxuXHQ8dGVtcGxhdGUgdi1pZj1cIml0ZW0uYWN0aXZlXCI+XG5cdCAgPGxpIHYtaWY9XCJpdGVtLmFjdGl2ZVwiIEBjbGljaz1cInRoaXMuJGVtaXQoJ2NsaWNrX2l0ZW0nLCBpdGVtKVwiIGNsYXNzPVwibmF2LWl0ZW0gbmF2LWxpbmsgYWN0aXZlXCIgOmNsYXNzPVwiaXRlbS5jbGFzc1wiPlx0ICAgIFxuICAgICAgPHNwYW4gdi1pZj1cIml0ZW0uYmFkZ2VfbnVtID4gMFwiIGNsYXNzPVwiYmFkZ2Ugcm91bmRlZC1waWxsIGJnLWRhcmtcIiBzdHlsZT1cImZsb2F0OnJpZ2h0O21hcmdpbi1ib3R0b206LTEwcHg7XCI+e3sgaXRlbS5iYWRnZV9udW0gfX08L3NwYW4+XG5cdCAgICA8Yj48aSA6Y2xhc3M9XCJpdGVtLmljb25cIj48L2k+XG5cdCAgICAgIHt7aXRlbS5sYWJlbH19XG5cdCAgICA8L2I+XG5cdCAgPC9saT5cbiAgICA8bGkgdi1lbHNlIEBjbGljaz1cInRoaXMuJGVtaXQoJ2NsaWNrX2l0ZW0nLCBpdGVtKVwiIGNsYXNzPVwibmF2LWl0ZW0gbmF2LWxpbmtcIiA6Y2xhc3M9XCJpdGVtLmNsYXNzXCI+XG5cdCAgICA8c3BhbiB2LWlmPVwiaXRlbS5iYWRnZV9udW0gPiAwXCIgY2xhc3M9XCJiYWRnZSByb3VuZGVkLXBpbGwgYmctZGFya1wiIHN0eWxlPVwiZmxvYXQ6cmlnaHQ7bWFyZ2luLWJvdHRvbTotMTBweDtcIj57eyBpdGVtLmJhZGdlX251bSB9fTwvc3Bhbj5cblx0ICAgIDxiPjxpIDpjbGFzcz1cIml0ZW0uaWNvblwiPjwvaT5cblx0ICAgICAge3tpdGVtLmxhYmVsfX1cblx0ICAgIDwvYj5cblx0ICA8L2xpPlxuXHQ8L3RlbXBsYXRlPlxuXHQ8dGVtcGxhdGUgdi1lbHNlPlxuXHQgIDxhIEBjbGljaz1cInRoaXMuJGVtaXQoJ2NsaWNrX2l0ZW0nLCBpdGVtKVwiIGhyZWY9XCIjXCIgY2xhc3M9XCJuYXYtaXRlbSBuYXYtbGlua1wiIDpjbGFzcz1cIml0ZW0uY2xhc3NcIj5cblx0ICAgIDxzcGFuIHYtaWY9XCJpdGVtLmJhZGdlX251bSA+IDBcIiBjbGFzcz1cImJhZGdlIHJvdW5kZWQtcGlsbCBiZy1kYXJrXCIgc3R5bGU9XCJmbG9hdDpyaWdodDttYXJnaW4tYm90dG9tOi0xMHB4O1wiPnt7IGl0ZW0uYmFkZ2VfbnVtIH19PC9zcGFuPlxuXHQgICAgPGkgOmNsYXNzPVwiaXRlbS5pY29uXCI+PC9pPlxuXHQgICAgICB7e2l0ZW0ubGFiZWx9fVxuXHQgIDwvYT5cblx0PC90ZW1wbGF0ZT5cblx0XG5cdFxuICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgIDwvdWw+XG4gICAgICA8dWwgY2xhc3M9XCJuYXZiYXItbmF2IG1zLWF1dG9cIj5cbiAgICAgICAgPGEgaHJlZj1cImphdmFzY3JpcHQ6aGlzdG9yeS5iYWNrKClcIiBjbGFzcz1cIm5hdi1pdGVtIG5hdi1saW5rIHRleHQtbXV0ZWRcIj5cbiAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1hcnJvdy1sZWZ0XCI+PC9pPlxuXHQ8L2E+XG4gICAgICAgIDxhIHRhcmdldD1cIl9uZXd0YWJcIiA6aHJlZj1cImhlbHBfbGlua1wiIGNsYXNzPVwibmF2LWl0ZW0gbmF2LWxpbmsgdGV4dC1tdXRlZFwiPlxuICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLXF1ZXN0aW9uLWNpcmNsZVwiPjwvaT5cbiAgICAgICAgPC9hPlxuICAgICAgPC91bD5cbiAgICA8L2Rpdj5cbiAgPC9uYXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSAndnVlJztcbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gICAgY29tcG9uZW50czoge1xuICAgIH0sXG4gICAgcHJvcHM6IHtcblx0aWQ6IFN0cmluZyxcblx0bWFpbl90aXRsZTogT2JqZWN0LFxuICBzZWNvbmRhcnlfdGl0bGVfbGlzdDogQXJyYXksXG5cdGhlbHBfbGluazogU3RyaW5nLFxuXHRpdGVtc190YWJsZTogQXJyYXksXG4gICAgfSxcbiAgICBlbWl0czogW1wiY2xpY2tfaXRlbVwiXSxcbiAgICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBvZiB0aGUgY29tcG9uZW50IGNhbGxlZCwgaXQncyBjYWxsZWQgYmVmb3JlIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gICAgY3JlYXRlZCgpIHtcbiAgICAgIH0sXG4gICAgZGF0YSgpIHtcblx0cmV0dXJuIHtcblx0ICAgIC8vaTE4bjogKHQpID0+IGkxOG4odCksXG5cdH07XG4gICAgfSxcbiAgICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBjYWxsZWQgYWZ0ZXIgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgICBtb3VudGVkKCkge1xuXHRudG9wbmdfc3luYy5yZWFkeSh0aGlzLiRwcm9wc1tcImlkXCJdKTtcbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcbiAgICB9LFxufSk7XG48L3NjcmlwdD5cbiIsIjx0ZW1wbGF0ZT5cbjxuYXYgY2xhc3M9XCJuYXZiYXIgbmF2YmFyLXNoYWRvdyBuYXZiYXItZXhwYW5kLWxnIG5hdmJhci1saWdodCBiZy1saWdodCBweC0yIG1iLTJcIj5cbiAgPHNwYW4gY2xhc3M9XCJtZS0xIHRleHQtbm93cmFwXCIgc3R5bGU9XCJmb250LXNpemU6IDEuMXJlbTtcIj5cbiAgICA8aSA6Y2xhc3M9XCJtYWluX3RpdGxlLmljb25cIj48L2k+XG4gICAgPGEgdi1pZj1cIm1haW5fdGl0bGUuaHJlZlwiIDpocmVmPVwibWFpbl90aXRsZS5ocmVmXCIgOnRpdGxlPVwibWFpbl90aXRsZS50aXRsZVwiPiB7e21haW5fdGl0bGUubGFiZWx9fTwvYT4gIFxuICAgIDxzcGFuIHYtZWxzZSA6dGl0bGU9XCJtYWluX3RpdGxlLnRpdGxlXCI+IHt7bWFpbl90aXRsZS5sYWJlbH19PC9zcGFuPiAgICBcbiAgICA8dGVtcGxhdGUgdi1mb3I9XCJpdGVtIGluIHNlY29uZGFyeV90aXRsZV9saXN0XCI+IC8gXG4gICAgICA8YSB2LWlmPVwiaXRlbS5ocmVmXCIgOmNsYXNzPVwiaXRlbS5jbGFzc1wiIDpocmVmPVwiaXRlbS5ocmVmXCIgOnRpdGxlPVwiaXRlbS50aXRsZVwiPlxuICAgICAgICB7e2l0ZW0ubGFiZWx9fVxuICAgICAgICA8aSB2LWlmPVwiaXRlbS5pY29uXCIgOmNsYXNzPVwiaXRlbS5pY29uXCI+PC9pPlxuICAgICAgPC9hPiAgXG4gICAgICA8c3BhbiB2LWVsc2UgOnRpdGxlPVwiaXRlbS50aXRsZVwiPnt7aXRlbS5sYWJlbH19PC9zcGFuPlxuICAgIDwvdGVtcGxhdGU+XG4gIDwvc3Bhbj5cbiAgPHNwYW4gY2xhc3M9XCJ0ZXh0LW11dGVkIG1zLTEgZC1ub25lIGQtbGctaW5saW5lIGQtbWQtbm9uZVwiPnw8L3NwYW4+XG4gIDxidXR0b24gY2xhc3M9XCJuYXZiYXItdG9nZ2xlclwiIHR5cGU9XCJidXR0b25cIj5cbiAgICA8c3BhbiBjbGFzcz1cIm5hdmJhci10b2dnbGVyLWljb25cIj48L3NwYW4+XG4gIDwvYnV0dG9uPlxuICA8ZGl2IGNsYXNzPVwiY29sbGFwc2UgbmF2YmFyLWNvbGxhcHNlIHNjcm9sbC14XCIgaWQ9XCJuYXZiYXJOYXZcIj5cbiAgICA8dWwgY2xhc3M9XCJuYXZiYXItbmF2XCI+XG4gICAgICA8dGVtcGxhdGUgdi1mb3I9XCJpdGVtIGluIGl0ZW1zX3RhYmxlXCI+XG5cdDx0ZW1wbGF0ZSB2LWlmPVwiaXRlbS5hY3RpdmVcIj5cblx0ICA8bGkgdi1pZj1cIml0ZW0uYWN0aXZlXCIgQGNsaWNrPVwidGhpcy4kZW1pdCgnY2xpY2tfaXRlbScsIGl0ZW0pXCIgY2xhc3M9XCJuYXYtaXRlbSBuYXYtbGluayBhY3RpdmVcIiA6Y2xhc3M9XCJpdGVtLmNsYXNzXCI+XHQgICAgXG4gICAgICA8c3BhbiB2LWlmPVwiaXRlbS5iYWRnZV9udW0gPiAwXCIgY2xhc3M9XCJiYWRnZSByb3VuZGVkLXBpbGwgYmctZGFya1wiIHN0eWxlPVwiZmxvYXQ6cmlnaHQ7bWFyZ2luLWJvdHRvbTotMTBweDtcIj57eyBpdGVtLmJhZGdlX251bSB9fTwvc3Bhbj5cblx0ICAgIDxiPjxpIDpjbGFzcz1cIml0ZW0uaWNvblwiPjwvaT5cblx0ICAgICAge3tpdGVtLmxhYmVsfX1cblx0ICAgIDwvYj5cblx0ICA8L2xpPlxuICAgIDxsaSB2LWVsc2UgQGNsaWNrPVwidGhpcy4kZW1pdCgnY2xpY2tfaXRlbScsIGl0ZW0pXCIgY2xhc3M9XCJuYXYtaXRlbSBuYXYtbGlua1wiIDpjbGFzcz1cIml0ZW0uY2xhc3NcIj5cblx0ICAgIDxzcGFuIHYtaWY9XCJpdGVtLmJhZGdlX251bSA+IDBcIiBjbGFzcz1cImJhZGdlIHJvdW5kZWQtcGlsbCBiZy1kYXJrXCIgc3R5bGU9XCJmbG9hdDpyaWdodDttYXJnaW4tYm90dG9tOi0xMHB4O1wiPnt7IGl0ZW0uYmFkZ2VfbnVtIH19PC9zcGFuPlxuXHQgICAgPGI+PGkgOmNsYXNzPVwiaXRlbS5pY29uXCI+PC9pPlxuXHQgICAgICB7e2l0ZW0ubGFiZWx9fVxuXHQgICAgPC9iPlxuXHQgIDwvbGk+XG5cdDwvdGVtcGxhdGU+XG5cdDx0ZW1wbGF0ZSB2LWVsc2U+XG5cdCAgPGEgQGNsaWNrPVwidGhpcy4kZW1pdCgnY2xpY2tfaXRlbScsIGl0ZW0pXCIgaHJlZj1cIiNcIiBjbGFzcz1cIm5hdi1pdGVtIG5hdi1saW5rXCIgOmNsYXNzPVwiaXRlbS5jbGFzc1wiPlxuXHQgICAgPHNwYW4gdi1pZj1cIml0ZW0uYmFkZ2VfbnVtID4gMFwiIGNsYXNzPVwiYmFkZ2Ugcm91bmRlZC1waWxsIGJnLWRhcmtcIiBzdHlsZT1cImZsb2F0OnJpZ2h0O21hcmdpbi1ib3R0b206LTEwcHg7XCI+e3sgaXRlbS5iYWRnZV9udW0gfX08L3NwYW4+XG5cdCAgICA8aSA6Y2xhc3M9XCJpdGVtLmljb25cIj48L2k+XG5cdCAgICAgIHt7aXRlbS5sYWJlbH19XG5cdCAgPC9hPlxuXHQ8L3RlbXBsYXRlPlxuXHRcblx0XG4gICAgICA8L3RlbXBsYXRlPlxuICAgICAgPC91bD5cbiAgICAgIDx1bCBjbGFzcz1cIm5hdmJhci1uYXYgbXMtYXV0b1wiPlxuICAgICAgICA8YSBocmVmPVwiamF2YXNjcmlwdDpoaXN0b3J5LmJhY2soKVwiIGNsYXNzPVwibmF2LWl0ZW0gbmF2LWxpbmsgdGV4dC1tdXRlZFwiPlxuICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLWFycm93LWxlZnRcIj48L2k+XG5cdDwvYT5cbiAgICAgICAgPGEgdGFyZ2V0PVwiX25ld3RhYlwiIDpocmVmPVwiaGVscF9saW5rXCIgY2xhc3M9XCJuYXYtaXRlbSBuYXYtbGluayB0ZXh0LW11dGVkXCI+XG4gICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtcXVlc3Rpb24tY2lyY2xlXCI+PC9pPlxuICAgICAgICA8L2E+XG4gICAgICA8L3VsPlxuICAgIDwvZGl2PlxuICA8L25hdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBkZWZpbmVDb21wb25lbnQgfSBmcm9tICd2dWUnO1xuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHtcbiAgICBjb21wb25lbnRzOiB7XG4gICAgfSxcbiAgICBwcm9wczoge1xuXHRpZDogU3RyaW5nLFxuXHRtYWluX3RpdGxlOiBPYmplY3QsXG4gIHNlY29uZGFyeV90aXRsZV9saXN0OiBBcnJheSxcblx0aGVscF9saW5rOiBTdHJpbmcsXG5cdGl0ZW1zX3RhYmxlOiBBcnJheSxcbiAgICB9LFxuICAgIGVtaXRzOiBbXCJjbGlja19pdGVtXCJdLFxuICAgIC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIG9mIHRoZSBjb21wb25lbnQgY2FsbGVkLCBpdCdzIGNhbGxlZCBiZWZvcmUgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgICBjcmVhdGVkKCkge1xuICAgICAgfSxcbiAgICBkYXRhKCkge1xuXHRyZXR1cm4ge1xuXHQgICAgLy9pMThuOiAodCkgPT4gaTE4bih0KSxcblx0fTtcbiAgICB9LFxuICAgIC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIGNhbGxlZCBhZnRlciBodG1sIHRlbXBsYXRlIGNyZWF0aW9uLiAqL1xuICAgIG1vdW50ZWQoKSB7XG5cdG50b3BuZ19zeW5jLnJlYWR5KHRoaXMuJHByb3BzW1wiaWRcIl0pO1xuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgIH0sXG59KTtcbjwvc2NyaXB0PlxuIiwiPHRlbXBsYXRlPlxuPGRpdiBzdHlsZT1cIndpZHRoOjEwMCVcIiB2LWlmPVwic2hvd19hbGVydCA9PSB0cnVlXCIgY2xhc3M9XCJhbGVydCBhbGVydC1kaXNtaXNzYWJsZVwiIDpjbGFzcz1cImFsZXJ0X3R5cGVcIj5cbiAgPHNwYW4gdi1odG1sPVwiYm9keVwiPjwvc3Bhbj5cbjxidXR0b24gdi1pZj1cIiFub19jbG9zZV9idXR0b25cIiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiY2xvc2VcIiBjbGFzcz1cImJ0bi1jbG9zZVwiICBhcmlhLWxhYmVsPVwiQ2xvc2VcIj48L2J1dHRvbj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCB9IGZyb20gJ3Z1ZSc7XG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICAgIGNvbXBvbmVudHM6IHtcbiAgICB9LFxuICAgIHByb3BzOiB7XG5cdGlkOiBTdHJpbmcsXG5cdGdsb2JhbDogQm9vbGVhbixcblx0bm9fY2xvc2VfYnV0dG9uOiBCb29sZWFuLFxuICAgIH0sXG4gICAgZW1pdHM6IFtdLFxuICAgIC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIG9mIHRoZSBjb21wb25lbnQgY2FsbGVkLCBpdCdzIGNhbGxlZCBiZWZvcmUgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgICBjcmVhdGVkKCkge1xuICAgIH0sXG4gICAgZGF0YSgpIHtcblx0cmV0dXJuIHtcblx0ICAgIHNob3dfYWxlcnQ6IGZhbHNlLFxuXHQgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG5cdCAgICBib2R5OiBcIlwiLFxuXHQgICAgYWxlcnRfdHlwZTogXCJhbGVydC1zdWNjZXNzXCIsXG5cdH07XG4gICAgfSxcbiAgICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBjYWxsZWQgYWZ0ZXIgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgICBtb3VudGVkKCkge1xuXHRpZiAodGhpcy5nbG9iYWwgPT0gdHJ1ZSkge1xuXHQgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudCh0aGlzLiRwcm9wc1tcImlkXCJdLCBudG9wbmdfY3VzdG9tX2V2ZW50cy5TSE9XX0dMT0JBTF9BTEVSVF9JTkZPLCAoaW5mbykgPT4ge1xuXHRcdGlmIChpbmZvLnR5cGUgIT0gbnVsbCkge1xuXHRcdCAgICB0aGlzLmFsZXJ0X3R5cGUgPSBpbmZvLnR5cGU7XG5cdFx0fVxuXHRcdGlmIChpbmZvLnRpbWVvdXQgIT0gbnVsbCkge1xuXHRcdCAgICBzZXRUaW1lb3V0KCgpID0+IHsgdGhpcy5jbG9zZSgpOyB9LCAxMDAwICogaW5mby50aW1lb3V0KTtcblx0XHR9XG5cdFx0dGhpcy5zaG93KGluZm8udGV4dF9odG1sKTtcblx0ICAgIH0pO1x0XG5cdH1cbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcblx0Y2xvc2U6IGZ1bmN0aW9uKCkge1xuXHQgICAgdGhpcy5zaG93X2FsZXJ0ID0gZmFsc2U7XG5cdH0sXG5cdHNob3c6IGZ1bmN0aW9uKGJvZHksIGFsZXJ0X3R5cGUpIHtcblx0ICAgIHRoaXMuc2hvd19hbGVydCA9IHRydWU7XG5cdCAgICB0aGlzLmJvZHkgPSBib2R5O1xuXHQgICAgaWYgKGFsZXJ0X3R5cGUgIT0gbnVsbCkge1xuXHRcdHRoaXMuYWxlcnRfdHlwZSA9IGFsZXJ0X3R5cGU7XG5cdCAgICB9XG5cdH0sXG4gICAgfSxcbn0pO1xuPC9zY3JpcHQ+XG4iLCI8dGVtcGxhdGU+XG48ZGl2IHN0eWxlPVwid2lkdGg6MTAwJVwiIHYtaWY9XCJzaG93X2FsZXJ0ID09IHRydWVcIiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRpc21pc3NhYmxlXCIgOmNsYXNzPVwiYWxlcnRfdHlwZVwiPlxuICA8c3BhbiB2LWh0bWw9XCJib2R5XCI+PC9zcGFuPlxuPGJ1dHRvbiB2LWlmPVwiIW5vX2Nsb3NlX2J1dHRvblwiIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJjbG9zZVwiIGNsYXNzPVwiYnRuLWNsb3NlXCIgIGFyaWEtbGFiZWw9XCJDbG9zZVwiPjwvYnV0dG9uPlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSAndnVlJztcbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gICAgY29tcG9uZW50czoge1xuICAgIH0sXG4gICAgcHJvcHM6IHtcblx0aWQ6IFN0cmluZyxcblx0Z2xvYmFsOiBCb29sZWFuLFxuXHRub19jbG9zZV9idXR0b246IEJvb2xlYW4sXG4gICAgfSxcbiAgICBlbWl0czogW10sXG4gICAgLyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2Qgb2YgdGhlIGNvbXBvbmVudCBjYWxsZWQsIGl0J3MgY2FsbGVkIGJlZm9yZSBodG1sIHRlbXBsYXRlIGNyZWF0aW9uLiAqL1xuICAgIGNyZWF0ZWQoKSB7XG4gICAgfSxcbiAgICBkYXRhKCkge1xuXHRyZXR1cm4ge1xuXHQgICAgc2hvd19hbGVydDogZmFsc2UsXG5cdCAgICBpMThuOiAodCkgPT4gaTE4bih0KSxcblx0ICAgIGJvZHk6IFwiXCIsXG5cdCAgICBhbGVydF90eXBlOiBcImFsZXJ0LXN1Y2Nlc3NcIixcblx0fTtcbiAgICB9LFxuICAgIC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIGNhbGxlZCBhZnRlciBodG1sIHRlbXBsYXRlIGNyZWF0aW9uLiAqL1xuICAgIG1vdW50ZWQoKSB7XG5cdGlmICh0aGlzLmdsb2JhbCA9PSB0cnVlKSB7XG5cdCAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KHRoaXMuJHByb3BzW1wiaWRcIl0sIG50b3BuZ19jdXN0b21fZXZlbnRzLlNIT1dfR0xPQkFMX0FMRVJUX0lORk8sIChpbmZvKSA9PiB7XG5cdFx0aWYgKGluZm8udHlwZSAhPSBudWxsKSB7XG5cdFx0ICAgIHRoaXMuYWxlcnRfdHlwZSA9IGluZm8udHlwZTtcblx0XHR9XG5cdFx0aWYgKGluZm8udGltZW91dCAhPSBudWxsKSB7XG5cdFx0ICAgIHNldFRpbWVvdXQoKCkgPT4geyB0aGlzLmNsb3NlKCk7IH0sIDEwMDAgKiBpbmZvLnRpbWVvdXQpO1xuXHRcdH1cblx0XHR0aGlzLnNob3coaW5mby50ZXh0X2h0bWwpO1xuXHQgICAgfSk7XHRcblx0fVxuICAgIH0sXG4gICAgbWV0aG9kczoge1xuXHRjbG9zZTogZnVuY3Rpb24oKSB7XG5cdCAgICB0aGlzLnNob3dfYWxlcnQgPSBmYWxzZTtcblx0fSxcblx0c2hvdzogZnVuY3Rpb24oYm9keSwgYWxlcnRfdHlwZSkge1xuXHQgICAgdGhpcy5zaG93X2FsZXJ0ID0gdHJ1ZTtcblx0ICAgIHRoaXMuYm9keSA9IGJvZHk7XG5cdCAgICBpZiAoYWxlcnRfdHlwZSAhPSBudWxsKSB7XG5cdFx0dGhpcy5hbGVydF90eXBlID0gYWxlcnRfdHlwZTtcblx0ICAgIH1cblx0fSxcbiAgICB9LFxufSk7XG48L3NjcmlwdD5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG4gIDxkaXYgc3R5bGU9XCJ3aWR0aDoxMDAlXCIgcmVmPVwiY2hhcnRcIj48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBudG9wbmdfdXRpbGl0eSwgbnRvcG5nX3VybF9tYW5hZ2VyLCBudG9wbmdfZXZlbnRzX21hbmFnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlc1wiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgY29tcG9uZW50czoge1xuICAgIH0sXG4gICAgcHJvcHM6IHtcblx0aWQ6IFN0cmluZyxcblx0Y2hhcnRfdHlwZTogU3RyaW5nLFxuXHRyZWdpc3Rlcl9vbl9zdGF0dXNfY2hhbmdlOiBCb29sZWFuLFxuXHRub3RfZW1pdF9nbG9iYWxfc3RhdHVzX3VwZGF0ZTogQm9vbGVhbixcblx0YmFzZV91cmxfcmVxdWVzdDogU3RyaW5nLFxuXHRnZXRfcGFyYW1zX3VybF9yZXF1ZXN0OiBGdW5jdGlvbixcblx0Z2V0X2N1c3RvbV9jaGFydF9vcHRpb25zOiBGdW5jdGlvbixcbiAgICAgICAgbWFwX2NoYXJ0X29wdGlvbnM6IEZ1bmN0aW9uLFxuICAgICAgICBtaW5fdGltZV9pbnRlcnZhbF9pZDogU3RyaW5nLFx0XG5cdHJvdW5kX3RpbWU6IEJvb2xlYW4sIC8vaWYgbWluX3RpbWVfaW50ZXJ2YWxfaWQgIT0gbnVsbCByb3VuZCB0aW1lIGJ5IG1pbl90aW1lX2ludGVydmFsX2lkXHRcbiAgICB9LFxuICAgIGVtaXRzOiBbXCJhcHBseVwiLCBcImhpZGRlblwiLCBcInNob3dlZFwiLCBcImNoYXJ0X3JlbG9hZGVkXCIsIFwiem9vbVwiXSxcbiAgICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBvZiB0aGUgY29tcG9uZW50IGNhbGxlZCwgaXQncyBjYWxsZWQgYmVmb3JlIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gICAgY3JlYXRlZCgpIHtcbiAgICB9LFxuICAgIGJlZm9yZVVubW91bnQoKSB7XG5cdHRoaXMuY2hhcnQuZGVzdHJveUNoYXJ0KCk7XG4gICAgfSxcbiAgICBkYXRhKCkge1xuXHRyZXR1cm4ge1xuXHQgICAgY2hhcnQ6IG51bGwsXG5cdCAgICBjaGFydF9vcHRpb25zOiBudWxsLFxuXHQgICAgZnJvbV96b29tOiBmYWxzZSxcblx0ICAgIC8vaTE4bjogKHQpID0+IGkxOG4odCksXG5cdH07XG4gICAgfSxcbiAgICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBjYWxsZWQgYWZ0ZXIgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgICBhc3luYyBtb3VudGVkKCkge1xuXHRhd2FpdCB0aGlzLmluaXQoKTtcblx0bnRvcG5nX3N5bmMucmVhZHkodGhpcy4kcHJvcHNbXCJpZFwiXSk7XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG5cdGluaXQ6IGFzeW5jIGZ1bmN0aW9uKCkge1xuXHQgICAgbGV0IHN0YXR1cyA9IG50b3BuZ19zdGF0dXNfbWFuYWdlci5nZXRfc3RhdHVzKCk7XG5cdCAgICBsZXQgdXJsX3JlcXVlc3QgPSB0aGlzLmdldF91cmxfcmVxdWVzdChzdGF0dXMpO1xuXHQgICAgaWYgKHRoaXMucmVnaXN0ZXJfb25fc3RhdHVzX2NoYW5nZSkge1xuXHRcdHRoaXMucmVnaXN0ZXJfc3RhdHVzKHN0YXR1cyk7XG5cdCAgICB9XG5cdCAgICBhd2FpdCB0aGlzLmRyYXdfY2hhcnQodXJsX3JlcXVlc3QpO1xuXHR9LFxuXHRnZXRfZGF0YV91cmk6IGFzeW5jIGZ1bmN0aW9uKG9wdGlvbnMpIHtcblx0ICAgIGlmICh0aGlzLmNoYXJ0ID09IG51bGwpIHsgcmV0dXJuIG51bGw7IH1cblx0ICAgIGxldCBkYXRhX3VyaSA9IGF3YWl0IHRoaXMuY2hhcnQudG9fZGF0YV91cmkoKTtcblx0ICAgIHJldHVybiBkYXRhX3VyaTtcblx0fSxcblx0ZG93bmxvYWRfY2hhcnRfcG5nOiBhc3luYyBmdW5jdGlvbihmaWxlX25hbWUsIG9wdGlvbnMpIHtcblx0ICAgIGlmICh0aGlzLmNoYXJ0ID09IG51bGwpIHsgcmV0dXJuOyB9XG5cdCAgICBsZXQgZGF0YV91cmkgPSBhd2FpdCB0aGlzLmNoYXJ0LnRvX2RhdGFfdXJpKCk7XG5cdCAgICBkb3dubG9hZFVSSShkYXRhX3VyaSwgZmlsZV9uYW1lKTtcblx0fSxcblx0cmVnaXN0ZXJfc3RhdHVzOiBmdW5jdGlvbihzdGF0dXMpIHtcblx0ICAgIGxldCB1cmxfcmVxdWVzdCA9IHRoaXMuZ2V0X3VybF9yZXF1ZXN0KHN0YXR1cyk7XG5cdCAgICBudG9wbmdfc3RhdHVzX21hbmFnZXIub25fc3RhdHVzX2NoYW5nZSh0aGlzLmlkLCAobmV3X3N0YXR1cykgPT4ge1xuXHRcdGlmICh0aGlzLmZyb21fem9vbSA9PSB0cnVlKSB7XG5cdFx0ICAgIHRoaXMuZnJvbV96b29tID0gZmFsc2U7XG5cdFx0ICAgIC8vcmV0dXJuO1xuXHRcdH1cblx0XHRsZXQgbmV3X3VybF9yZXF1ZXN0ID0gdGhpcy5nZXRfdXJsX3JlcXVlc3QobmV3X3N0YXR1cyk7XG5cdFx0aWYgKG5ld191cmxfcmVxdWVzdCA9PSB1cmxfcmVxdWVzdCkge1xuXHRcdCAgICB1cmxfcmVxdWVzdCA9IG5ld191cmxfcmVxdWVzdDtcblx0XHQgICAgcmV0dXJuO1xuXHRcdH1cblx0XHR1cmxfcmVxdWVzdCA9IG5ld191cmxfcmVxdWVzdDtcblx0XHR0aGlzLnVwZGF0ZV9jaGFydChuZXdfdXJsX3JlcXVlc3QpO1xuXHQgICAgfSwgZmFsc2UpO1xuXHR9LFxuXHRnZXRfdXJsX3JlcXVlc3Q6IGZ1bmN0aW9uKHN0YXR1cykge1xuXHQgICAgbGV0IHVybF9wYXJhbXM7XG5cdCAgICBpZiAodGhpcy5nZXRfcGFyYW1zX3VybF9yZXF1ZXN0ICE9IG51bGwpIHtcblx0XHRpZiAoc3RhdHVzID09IG51bGwpIHtcblx0XHQgICAgc3RhdHVzID0gbnRvcG5nX3N0YXR1c19tYW5hZ2VyLmdldF9zdGF0dXMoKTtcblx0XHR9XG5cdFx0dXJsX3BhcmFtcyA9IHRoaXMuZ2V0X3BhcmFtc191cmxfcmVxdWVzdChzdGF0dXMpO1xuXHQgICAgfSBlbHNlIHtcblx0XHR1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfcGFyYW1zKCk7XG5cdCAgICB9XG5cdCAgICBcblx0ICAgIHJldHVybiBgJHt0aGlzLmJhc2VfdXJsX3JlcXVlc3R9PyR7dXJsX3BhcmFtc31gO1xuXHR9LFxuXHRkcmF3X2NoYXJ0OiBhc3luYyBmdW5jdGlvbih1cmxfcmVxdWVzdCkge1xuXHQgICAgbGV0IGNoYXJ0QXBleCA9IG50b3BDaGFydEFwZXg7XG5cdCAgICBsZXQgY2hhcnRfdHlwZSA9IHRoaXMuY2hhcnRfdHlwZTtcblx0ICAgIGlmIChjaGFydF90eXBlID09IG51bGwpIHtcblx0XHRjaGFydF90eXBlID0gY2hhcnRBcGV4LnR5cGVDaGFydC5UU19TVEFDS0VEO1xuXHQgICAgfVxuXHQgICAgdGhpcy5jaGFydCA9IGNoYXJ0QXBleC5uZXdDaGFydChjaGFydF90eXBlKTtcblx0ICAgIGxldCBtZSA9IHRoaXM7XG5cdCAgICB0aGlzLmNoYXJ0LnJlZ2lzdGVyRXZlbnQoXCJiZWZvcmVab29tXCIsIGZ1bmN0aW9uKGNoYXJ0X2NvbnRleHQsIGF4aXMpIHtcblx0XHRtZS5vbl9iZWZvcmVfem9vbShjaGFydF9jb250ZXh0LCBheGlzKTtcblx0ICAgIH0pO1xuXHQgICAgdGhpcy5jaGFydC5yZWdpc3RlckV2ZW50KFwiem9vbWVkXCIsIGZ1bmN0aW9uKGNoYXJ0X2NvbnRleHQsIGF4aXMpIHtcblx0XHRtZS5vbl96b29tZWQoY2hhcnRfY29udGV4dCwgYXhpcyk7XG5cdCAgICB9KTtcblx0ICAgIGxldCBjaGFydF9vcHRpb25zID0gYXdhaXQgdGhpcy5nZXRfY2hhcnRfb3B0aW9ucyh1cmxfcmVxdWVzdCk7XG5cdCAgICB0aGlzLmNoYXJ0LmRyYXdDaGFydCh0aGlzLiRyZWZzW1wiY2hhcnRcIl0sIGNoYXJ0X29wdGlvbnMpO1xuXHR9LFxuXHR1cGRhdGVfY2hhcnQ6IGFzeW5jIGZ1bmN0aW9uKHVybF9yZXF1ZXN0KSB7XG5cdCAgICBpZiAodXJsX3JlcXVlc3QgPT0gbnVsbCkge1xuXHRcdHVybF9yZXF1ZXN0ID0gdGhpcy5nZXRfdXJsX3JlcXVlc3QoKTtcblx0ICAgIH1cblx0ICAgIGxldCBjaGFydF9vcHRpb25zID0gYXdhaXQgdGhpcy5nZXRfY2hhcnRfb3B0aW9ucyh1cmxfcmVxdWVzdCk7XG5cdCAgICB0aGlzLmNoYXJ0LnVwZGF0ZUNoYXJ0KGNoYXJ0X29wdGlvbnMpO1xuXHR9LFxuXHR1cGRhdGVfY2hhcnRfb3B0aW9uczogZnVuY3Rpb24oY2hhcnRfb3B0aW9ucykge1xuXHQgICAgdGhpcy5jaGFydC51cGRhdGVDaGFydChjaGFydF9vcHRpb25zKTtcblx0fSxcblx0dXBkYXRlX2NoYXJ0X3NlcmllczogZnVuY3Rpb24oc2VyaWVzKSB7XG5cdCAgICBpZiAoc2VyaWVzID09IG51bGwpIHsgcmV0dXJuOyB9XG5cdCAgICB0aGlzLmNoYXJ0LnVwZGF0ZVNlcmllcyhzZXJpZXMpO1xuXHR9LFxuXHRnZXRfY2hhcnRfb3B0aW9uczogYXN5bmMgZnVuY3Rpb24odXJsX3JlcXVlc3QpIHtcblx0ICAgIGxldCBjaGFydF9vcHRpb25zO1xuXHQgICAgaWYgKHRoaXMuZ2V0X2N1c3RvbV9jaGFydF9vcHRpb25zID09IG51bGwpIHtcdFx0XG5cdFx0Y2hhcnRfb3B0aW9ucyA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmxfcmVxdWVzdCk7XG5cdCAgICB9IGVsc2Uge1xuXHRcdGNoYXJ0X29wdGlvbnMgPSBhd2FpdCB0aGlzLmdldF9jdXN0b21fY2hhcnRfb3B0aW9ucyh1cmxfcmVxdWVzdCk7XG5cdCAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5tYXBfY2hhcnRfb3B0aW9ucyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY2hhcnRfb3B0aW9ucyA9IHRoaXMubWFwX2NoYXJ0X29wdGlvbnMoY2hhcnRfb3B0aW9ucyk7XG4gICAgICAgICAgICB9XG5cdCAgICB0aGlzLiRlbWl0KCdjaGFydF9yZWxvYWRlZCcsIGNoYXJ0X29wdGlvbnMpO1xuXHQgICAgcmV0dXJuIGNoYXJ0X29wdGlvbnM7XG5cdH0sXG5cdG9uX2JlZm9yZV96b29tOiBmdW5jdGlvbihjaGFydF9jb250ZXh0LCB7IHhheGlzLCB5YXhpcyB9KSB7XG5cdCAgICBsZXQgbmV3X2Vwb2NoX3N0YXR1cyA9IHRoaXMuZ2V0X2Vwb2NoX2Zyb21feGF4aXNfZXZlbnQoeGF4aXMpO1xuXHQgICAgaWYgKHRoaXMubWluX3RpbWVfaW50ZXJ2YWxfaWQgIT0gbnVsbCkge1xuXHRcdGNvbnN0IG1pbl90aW1lX2ludGVydmFsID0gbnRvcG5nX3V0aWxpdHkuZ2V0X3RpbWVmcmFtZV9mcm9tX3RpbWVmcmFtZV9pZCh0aGlzLm1pbl90aW1lX2ludGVydmFsX2lkKTtcblx0XHRpZiAobmV3X2Vwb2NoX3N0YXR1cy5lcG9jaF9lbmQgLSBuZXdfZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luIDwgbWluX3RpbWVfaW50ZXJ2YWwpIHtcblx0XHQgICAgXG5cdFx0ICAgIG5ld19lcG9jaF9zdGF0dXMuZXBvY2hfZW5kID0gbmV3X2Vwb2NoX3N0YXR1cy5lcG9jaF9lbmQgKyBtaW5fdGltZV9pbnRlcnZhbDtcblx0XHQgICAgbmV3X2Vwb2NoX3N0YXR1cy5lcG9jaF9lbmQgPSBuZXdfZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCAtIChuZXdfZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCAlIG1pbl90aW1lX2ludGVydmFsKTtcblx0XHQgICAgbmV3X2Vwb2NoX3N0YXR1cy5lcG9jaF9iZWdpbiA9IG5ld19lcG9jaF9zdGF0dXMuZXBvY2hfZW5kIC0gbWluX3RpbWVfaW50ZXJ2YWw7XG5cdFx0fVxuXHRcdGlmICh0aGlzLnJvdW5kX3RpbWUgPT0gdHJ1ZSkge1xuXHRcdCAgICBuZXdfZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luID0gbnRvcG5nX3V0aWxpdHkucm91bmRfdGltZV9ieV90aW1lZnJhbWVfaWQobmV3X2Vwb2NoX3N0YXR1cy5lcG9jaF9iZWdpbiwgdGhpcy5taW5fdGltZV9pbnRlcnZhbF9pZCk7XG5cdFx0ICAgIG5ld19lcG9jaF9zdGF0dXMuZXBvY2hfZW5kID0gbnRvcG5nX3V0aWxpdHkucm91bmRfdGltZV9ieV90aW1lZnJhbWVfaWQobmV3X2Vwb2NoX3N0YXR1cy5lcG9jaF9lbmQsIHRoaXMubWluX3RpbWVfaW50ZXJ2YWxfaWQpO1xuXHRcdH1cblx0XHRcblx0XHR4YXhpcy5taW4gPSBuZXdfZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luICogMTAwMDtcblx0XHR4YXhpcy5tYXggPSBuZXdfZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCAqIDEwMDA7XG5cdCAgICB9XG5cdCAgICByZXR1cm4geGF4aXM7XG5cdH0sXG5cdG9uX3pvb21lZDogZnVuY3Rpb24oY2hhcnRfY29udGV4dCwgeyB4YXhpcywgeWF4aXMgfSkge1xuXHQgICAgdGhpcy5mcm9tX3pvb20gPSB0cnVlO1xuXHQgICAgY29uc3QgbmV3X2Vwb2NoX3N0YXR1cyA9IHRoaXMuZ2V0X2Vwb2NoX2Zyb21feGF4aXNfZXZlbnQoeGF4aXMpO1xuICAgICAgICAgICAgLy8gdGhlIHRpbWVzdGFtcHMgYXJlIGluIG1pbGxpc2Vjb25kcywgY29udmVydCB0aGVtIGludG8gc2Vjb25kc1xuXHQgICAgaWYgKCF0aGlzLm5vdF9lbWl0X2dsb2JhbF9zdGF0dXNfdXBkYXRlKSB7XG5cdFx0bnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfZXZlbnQobnRvcG5nX2V2ZW50cy5FUE9DSF9DSEFOR0UsIG5ld19lcG9jaF9zdGF0dXMsIHRoaXMuaWQpO1xuXHQgICAgfVxuXHQgICAgdGhpcy4kZW1pdCgnem9vbScsIG5ld19lcG9jaF9zdGF0dXMpO1xuXHR9LFxuXHRnZXRfZXBvY2hfZnJvbV94YXhpc19ldmVudDogZnVuY3Rpb24oeGF4aXMpIHtcblx0ICAgIGNvbnN0IGJlZ2luID0gbW9tZW50KHhheGlzLm1pbik7XG4gICAgICAgICAgICBjb25zdCBlbmQgPSBtb21lbnQoeGF4aXMubWF4KTtcblx0ICAgIGxldCBuZXdfZXBvY2hfc3RhdHVzID0geyBlcG9jaF9iZWdpbjogTnVtYmVyLnBhcnNlSW50KGJlZ2luLnVuaXgoKSksIGVwb2NoX2VuZDogTnVtYmVyLnBhcnNlSW50KGVuZC51bml4KCkpIH07XG5cdCAgICByZXR1cm4gbmV3X2Vwb2NoX3N0YXR1cztcblx0fVxuICAgIH0sXG59O1xuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cbjwvc3R5bGU+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuICAgIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbnRyb2xzXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJ0bi1ncm91cCBtZS1hdXRvIGJ0bi1ncm91cC1zbSBmbGV4LXdyYXAgZC1mbGV4XCI+XG4gICAgICAgICAgICAgICAgICAgIDxzbG90IG5hbWU9XCJiZWdpblwiPjwvc2xvdD5cbiAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0LXNlYXJjaCA6ZGlzYWJsZWQ9XCJkaXNhYmxlZF9kYXRlX3BpY2tlclwiXG4gICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cInNlbGVjdGVkX3RpbWVfb3B0aW9uXCIgOmlkPVwiJ3RpbWVfcHJlc2V0X3JhbmdlX3BpY2tlcidcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpvcHRpb25zPVwidGltZV9wcmVzZXRfbGlzdF9maWx0ZXJlZFwiIEBzZWxlY3Rfb3B0aW9uPVwiY2hhbmdlX3NlbGVjdF90aW1lKG51bGwpXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdC1zZWFyY2g+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwIG1zLTJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaW5wdXQtZ3JvdXAtdGV4dFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLWNhbGVuZGFyLWFsdFwiPjwvaT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCA6ZGlzYWJsZWQ9XCJkaXNhYmxlZF9kYXRlX3BpY2tlclwiIGNsYXNzPVwiZmxhdHBpY2tyIGZsYXRwaWNrci1pbnB1dCBmb3JtLWNvbnRyb2xcIiB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwiQ2hvb3NlIGEgZGF0ZS4uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWlkPVwiZGF0ZXRpbWVcIiByZWY9XCJiZWdpbi1kYXRlXCIgc3R5bGU9XCJ3aWR0aDoxMHJlbTtcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gPGlucHV0IHJlZj1cImJlZ2luLWRhdGVcIiBAY2hhbmdlPVwiZW5hYmxlX2FwcGx5PXRydWVcIiBAY2hhbmdlPVwiY2hhbmdlX2JlZ2luX2RhdGVcIiB0eXBlPVwiZGF0ZVwiIGNsYXNzPVwiZGF0ZV90aW1lX2lucHV0IGJlZ2luLXRpbWVwaWNrZXIgZm9ybS1jb250cm9sIGJvcmRlci1yaWdodC0wIGZpeC1zYWZhcmktaW5wdXRcIj4gLS0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8IS0tIDxpbnB1dCByZWY9XCJiZWdpbi10aW1lXCIgQGNoYW5nZT1cImVuYWJsZV9hcHBseT10cnVlXCIgdHlwZT1cInRpbWVcIiBjbGFzcz1cImRhdGVfdGltZV9pbnB1dCBiZWdpbi10aW1lcGlja2VyIGZvcm0tY29udHJvbCBib3JkZXItcmlnaHQtMCBmaXgtc2FmYXJpLWlucHV0XCI+IC0tPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC10ZXh0XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtbG9uZy1hcnJvdy1hbHQtcmlnaHRcIj48L2k+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgOmRpc2FibGVkPVwiZGlzYWJsZWRfZGF0ZV9waWNrZXJcIiBjbGFzcz1cImZsYXRwaWNrciBmbGF0cGlja3ItaW5wdXQgZm9ybS1jb250cm9sXCIgdHlwZT1cInRleHRcIiBwbGFjZWhvbGRlcj1cIkNob29zZSBhIGRhdGUuLlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1pZD1cImRhdGV0aW1lXCIgcmVmPVwiZW5kLWRhdGVcIiBzdHlsZT1cIndpZHRoOjEwcmVtO1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSA8aW5wdXQgcmVmPVwiZW5kLWRhdGVcIiBAY2hhbmdlPVwiZW5hYmxlX2FwcGx5PXRydWVcIiB0eXBlPVwiZGF0ZVwiIGNsYXNzPVwiZGF0ZV90aW1lX2lucHV0IGVuZC10aW1lcGlja2VyIGZvcm0tY29udHJvbCBib3JkZXItbGVmdC0wIGZpeC1zYWZhcmktaW5wdXRcIiBzdHlsZT1cIndpZHRoOiAyLjVyZW07XCI+IC0tPlxuICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSA8aW5wdXQgcmVmPVwiZW5kLXRpbWVcIiBAY2hhbmdlPVwiZW5hYmxlX2FwcGx5PXRydWVcIiB0eXBlPVwidGltZVwiIGNsYXNzPVwiZGF0ZV90aW1lX2lucHV0IGVuZC10aW1lcGlja2VyIGZvcm0tY29udHJvbCBib3JkZXItbGVmdC0wIGZpeC1zYWZhcmktaW5wdXRcIj4gLS0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB2LXNob3c9XCJ3cm9uZ19kYXRlIHx8IHdyb25nX21pbl9pbnRlcnZhbFwiIDp0aXRsZT1cImludmFsaWRfZGF0ZV9tZXNzYWdlXCIgc3R5bGU9XCJtYXJnaW4tbGVmdDowLjJyZW07Y29sb3I6cmVkO1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLWV4Y2xhbWF0aW9uLWNpcmNsZVwiPjwvaT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIgbXMtMlwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiA6ZGlzYWJsZWQ9XCIhZW5hYmxlX2FwcGx5IHx8IHdyb25nX2RhdGUgfHwgd3JvbmdfbWluX2ludGVydmFsXCIgQGNsaWNrPVwiYXBwbHlcIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1wcmltYXJ5XCI+e3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpMThuKCdhcHBseScpIH19PC9idXR0b24+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJidG4tZ3JvdXBcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIDpkaXNhYmxlZD1cImRpc2FibGVkX2RhdGVfcGlja2VyXCIgQGNsaWNrPVwianVtcF90aW1lX2JhY2soKVwiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tc20gYnRuLWxpbmtcIiByZWY9XCJidG4tanVtcC10aW1lLWJhY2tcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6dGl0bGU9XCJpMThuKCdkYXRlX3RpbWVfcmFuZ2VfcGlja2VyLmJ0bl9tb3ZlX2xlZnQnKVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1sb25nLWFycm93LWFsdC1sZWZ0XCI+PC9pPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gOmRpc2FibGVkPVwiZGlzYWJsZWRfZGF0ZV9waWNrZXJcIiBAY2xpY2s9XCJqdW1wX3RpbWVfYWhlYWQoKVwiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tc20gYnRuLWxpbmsgbWUtMlwiIHJlZj1cImJ0bi1qdW1wLXRpbWUtYWhlYWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6dGl0bGU9XCJpMThuKCdkYXRlX3RpbWVfcmFuZ2VfcGlja2VyLmJ0bl9tb3ZlX3JpZ2h0JylcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtbG9uZy1hcnJvdy1hbHQtcmlnaHRcIj48L2k+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiA6ZGlzYWJsZWQ9XCJkaXNhYmxlZF9kYXRlX3BpY2tlclwiIEBjbGljaz1cInpvb20oMilcIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1saW5rXCIgcmVmPVwiYnRuLXpvb20taW5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6dGl0bGU9XCJpMThuKCdkYXRlX3RpbWVfcmFuZ2VfcGlja2VyLmJ0bl96b29tX2luJylcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtc2VhcmNoLXBsdXNcIj48L2k+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiA6ZGlzYWJsZWQ9XCJkaXNhYmxlZF9kYXRlX3BpY2tlclwiIEBjbGljaz1cInpvb20oMC41KVwiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tc20gYnRuLWxpbmtcIiByZWY9XCJidG4tem9vbS1vdXRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6dGl0bGU9XCJpMThuKCdkYXRlX3RpbWVfcmFuZ2VfcGlja2VyLmJ0bl96b29tX291dCcpXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLXNlYXJjaC1taW51c1wiPjwvaT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIDpkaXNhYmxlZD1cImhpc3RvcnlfbGFzdF9zdGF0dXMgPT0gbnVsbCB8fCBkaXNhYmxlZF9kYXRlX3BpY2tlclwiIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJhcHBseV9zdGF0dXNfYnlfaGlzdG9yeSgpXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1saW5rXCIgOnRpdGxlPVwiaTE4bignZGF0ZV90aW1lX3JhbmdlX3BpY2tlci5idG5fdW5kbycpXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLXVuZG9cIj48L2k+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiA6ZGlzYWJsZWQ9XCJzZWxlY3RfdGltZV92YWx1ZSA9PSAnY3VzdG9tJyB8fCBkaXNhYmxlZF9kYXRlX3BpY2tlclwiIEBjbGljaz1cImNoYW5nZV9zZWxlY3RfdGltZSgpXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tbGlua1wiIDp0aXRsZT1cImkxOG4oJ2RhdGVfdGltZV9yYW5nZV9waWNrZXIuYnRuX3JlZnJlc2gnKVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1zeW5jXCI+PC9pPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzbG90IG5hbWU9XCJleHRyYV9idXR0b25zXCI+PC9zbG90PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0U2VhcmNoIH0gZnJvbSBcIi4vc2VsZWN0LXNlYXJjaC52dWVcIjtcbmltcG9ydCB7IG50b3BuZ191dGlsaXR5LCBudG9wbmdfdXJsX21hbmFnZXIsIG50b3BuZ19ldmVudHNfbWFuYWdlciB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBjb21wb25lbnRzOiB7XG4gICAgICAgICdzZWxlY3Qtc2VhcmNoJzogU2VsZWN0U2VhcmNoLFxuICAgIH0sXG4gICAgcHJvcHM6IHtcbiAgICAgICAgaWQ6IFN0cmluZyxcbiAgICAgICAgZW5hYmxlX3JlZnJlc2g6IEJvb2xlYW4sXG4gICAgICAgIGRpc2FibGVkX2RhdGVfcGlja2VyOiBCb29sZWFuLFxuICAgICAgICBtaW5fdGltZV9pbnRlcnZhbF9pZDogU3RyaW5nLFxuXHQgICAgcm91bmRfdGltZTogQm9vbGVhbiwgLy9pZiBtaW5fdGltZV9pbnRlcnZhbF9pZCAhPSBudWxsIHJvdW5kIHRpbWUgYnkgbWluX3RpbWVfaW50ZXJ2YWxfaWRcbiAgICAgICAgY3VzdG9tX3RpbWVfaW50ZXJ2YWxfbGlzdDogQXJyYXksXG4gICAgfSxcbiAgICBjb21wdXRlZDoge1xuICAgICAgICAvLyBhIGNvbXB1dGVkIGdldHRlclxuICAgICAgICBpbnZhbGlkX2RhdGVfbWVzc2FnZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMud3JvbmdfZGF0ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmkxOG4oJ3dyb25nX2RhdGVfcmFuZ2UnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMud3JvbmdfbWluX2ludGVydmFsKSB7XG4gICAgICAgICAgICAgICAgbGV0IG1zZyA9IHRoaXMuaTE4bignd3JvbmdfbWluX2ludGVydmFsJyk7XG4gICAgICAgICAgICAgICAgbXNnLnJlcGxhY2UoJyV0aW1lX2ludGVydmFsJywgdGhpcy5pMThuKGBzaG93X2FsZXJ0cy5wcmVzZXRzLiR7dGhpcy5taW5fdGltZV9pbnRlcnZhbF9pZH1gKSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gbXNnXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHdhdGNoOiB7XG4gICAgICAgIFwiZW5hYmxlX3JlZnJlc2hcIjogZnVuY3Rpb24gKHZhbCwgb2xkVmFsKSB7XG4gICAgICAgICAgICBpZiAodmFsID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0X3JlZnJlc2goKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5yZWZyZXNoX2ludGVydmFsICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMucmVmcmVzaF9pbnRlcnZhbCk7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWZyZXNoX2ludGVydmFsID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJtaW5fdGltZV9pbnRlcnZhbF9pZFwiOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgLy8gdG9kb1xuICAgICAgICB9LFxuICAgICAgICBcInJvdW5kX3RpbWVcIjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIC8vIHRvZG9cbiAgICAgICAgfSxcbiAgICB9LFxuICAgIGVtaXRzOiBbXCJlcG9jaF9jaGFuZ2VcIl0sXG4gICAgLyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2Qgb2YgdGhlIGNvbXBvbmVudCBjYWxsZWQsIGl0J3MgY2FsbGVkIGJlZm9yZSBodG1sIHRlbXBsYXRlIGNyZWF0aW9uLiAqL1xuICAgIGNyZWF0ZWQoKSB7XG4gICAgfSxcbiAgICBiZWZvcmVNb3VudCgpIHtcbiAgICAgICAgaWYgKHRoaXMuJHByb3BzLmN1c3RvbV90aW1lX2ludGVydmFsX2xpc3QgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy50aW1lX3ByZXNldF9saXN0ID0gdGhpcy4kcHJvcHMuY3VzdG9tX3RpbWVfaW50ZXJ2YWxfbGlzdDtcbiAgICAgICAgfVxuICAgICAgICAvLyBmaWx0ZXIgaW50ZXJ2YWxcbiAgICAgICAgaWYgKHRoaXMubWluX3RpbWVfaW50ZXJ2YWxfaWQgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy50aW1lX3ByZXNldF9saXN0X2ZpbHRlcmVkID0gdGhpcy50aW1lX3ByZXNldF9saXN0O1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cdGNvbnN0IHRpbWVmcmFtZXNfZGljdCA9IHRoaXMuZ2V0X3RpbWVmcmFtZXNfYXZhaWxhYmxlKCk7XG5cdGNvbnN0IG1pbl90aW1lX2ludGVydmFsID0gdGltZWZyYW1lc19kaWN0W3RoaXMubWluX3RpbWVfaW50ZXJ2YWxfaWRdO1xuICAgICAgICB0aGlzLnRpbWVfcHJlc2V0X2xpc3RfZmlsdGVyZWQgPSB0aGlzLnRpbWVfcHJlc2V0X2xpc3QuZmlsdGVyKChlbGVtKSA9PiB7XG4gICAgICAgICAgICBpZiAoZWxlbS52YWx1ZSA9PSBcImN1c3RvbVwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbWluX3RpbWVfaW50ZXJ2YWwgPT0gbnVsbCB8fCB0aW1lZnJhbWVzX2RpY3RbZWxlbS52YWx1ZV0gPj0gbWluX3RpbWVfaW50ZXJ2YWw7XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgLyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2QgY2FsbGVkIGFmdGVyIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gICAgbW91bnRlZCgpIHtcbiAgICAgICAgbGV0IGVwb2NoX2JlZ2luID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJlcG9jaF9iZWdpblwiKTtcbiAgICAgICAgbGV0IGVwb2NoX2VuZCA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiZXBvY2hfZW5kXCIpO1xuICAgICAgICBpZiAoZXBvY2hfYmVnaW4gIT0gbnVsbCAmJiBlcG9jaF9lbmQgIT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gdXBkYXRlIHRoZSBzdGF0dXNcblxuICAgICAgICAgICAgdGhpcy5lbWl0X2Vwb2NoX2NoYW5nZSh7IGVwb2NoX2JlZ2luOiBOdW1iZXIucGFyc2VJbnQoZXBvY2hfYmVnaW4pLCBlcG9jaF9lbmQ6IE51bWJlci5wYXJzZUludChlcG9jaF9lbmQpIH0sIHRoaXMuJHByb3BzLmlkLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbWUgPSB0aGlzO1xuICAgICAgICBsZXQgZl9zZXRfcGlja2VyID0gKHBpY2tlciwgdmFyX25hbWUpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBmbGF0cGlja3IoJCh0aGlzLiRyZWZzW3BpY2tlcl0pLCB7XG4gICAgICAgICAgICAgICAgZW5hYmxlVGltZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBkYXRlRm9ybWF0OiBcImQvbS9ZIEg6aVwiLFxuICAgICAgICAgICAgICAgIC8vYWx0SW5wdXQ6IHRydWUsXG4gICAgICAgICAgICAgICAgLy9kYXRlRm9ybWF0OiBcIllZWVktTU0tREQgSEg6bW1cIixcbiAgICAgICAgICAgICAgICAvL2FsdEZvcm1hdDogXCJkLW0tWSBIOmlcIixcbiAgICAgICAgICAgICAgICAvL2xvY2FsZTogXCJpdFwiLFxuICAgICAgICAgICAgICAgIHRpbWVfMjRocjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjbGlja09wZW5zOiB0cnVlLFxuICAgICAgICAgICAgICAgIC8vbW9kZTogXCJyYW5nZVwiLFxuICAgICAgICAgICAgICAgIC8vc3RhdGljOiB0cnVlLFxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiAoc2VsZWN0ZWREYXRlcywgZGF0ZVN0ciwgaW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgbWUuZW5hYmxlX2FwcGx5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgbWUud3JvbmdfZGF0ZSA9IG1lLmZsYXRfYmVnaW5fZGF0ZS5zZWxlY3RlZERhdGVzWzBdLmdldFRpbWUoKSA+IG1lLmZsYXRfZW5kX2RhdGUuc2VsZWN0ZWREYXRlc1swXS5nZXRUaW1lKCk7XG4gICAgICAgICAgICAgICAgICAgIG1lLndyb25nX21pbl9pbnRlcnZhbCA9IG1lLm1pbl90aW1lX2ludGVydmFsX2lkICYmIG1lLmdldF91dGNfc2Vjb25kcygobWUuZmxhdF9lbmRfZGF0ZS5zZWxlY3RlZERhdGVzWzBdLmdldFRpbWUoKSAtIG1lLmZsYXRfYmVnaW5fZGF0ZS5zZWxlY3RlZERhdGVzWzBdLmdldFRpbWUoKSkgPCBudG9wbmdfdXRpbGl0eS5nZXRfdGltZWZyYW1lX2Zyb21fdGltZWZyYW1lX2lkKG1lLm1pbl90aW1lX2ludGVydmFsX2lkKSk7XG4gICAgICAgICAgICAgICAgICAgIC8vbWUuYVtkYXRhXSA9IGQ7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmZsYXRfYmVnaW5fZGF0ZSA9IGZfc2V0X3BpY2tlcihcImJlZ2luLWRhdGVcIiwgXCJiZWdpbl9kYXRlXCIpO1xuICAgICAgICB0aGlzLmZsYXRfZW5kX2RhdGUgPSBmX3NldF9waWNrZXIoXCJlbmQtZGF0ZVwiLCBcImVuZF9kYXRlXCIpO1xuICAgICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fZXZlbnRfY2hhbmdlKHRoaXMuJHByb3BzLmlkLCBudG9wbmdfZXZlbnRzLkVQT0NIX0NIQU5HRSwgKG5ld19zdGF0dXMpID0+IHRoaXMub25fc3RhdHVzX3VwZGF0ZWQobmV3X3N0YXR1cyksIHRydWUpO1xuXG4gICAgICAgIC8vIG5vdGlmaWVzIHRoYXQgY29tcG9uZW50IGlzIHJlYWR5XG4gICAgICAgIC8vY29uc29sZS5sb2codGhpcy4kcHJvcHNbXCJpZFwiXSk7XG4gICAgICAgIG50b3BuZ19zeW5jLnJlYWR5KHRoaXMuJHByb3BzW1wiaWRcIl0pO1xuICAgICAgICBpZiAodGhpcy5lbmFibGVfcmVmcmVzaCkge1xuICAgICAgICAgICAgdGhpcy5zdGFydF9yZWZyZXNoKCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqIE1ldGhvZHMgb2YgdGhlIGNvbXBvbmVudC4gKi9cbiAgICBtZXRob2RzOiB7XG4gICAgICAgIHN0YXJ0X3JlZnJlc2g6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaF9pbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSB0aGlzLnNlbGVjdGVkX3RpbWVfb3B0aW9uPy52YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5lbmFibGVfcmVmcmVzaCAmJiB2YWx1ZSAhPSBudWxsICYmIHZhbHVlICE9IFwiY3VzdG9tXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVfZnJvbV9pbnRlcnZhbCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlX3NlbGVjdF90aW1lKHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHRoaXMucmVmcmVzaF9pbnRlcnZhbF9zZWNvbmRzICogMTAwMCk7XG4gICAgICAgICAgICAvLyB9LCAxMCogMTAwMCk7XG4gICAgICAgIH0sXG4gICAgICAgIHV0Y19zX3RvX3NlcnZlcl9kYXRlOiBmdW5jdGlvbiAodXRjX3NlY29uZHMpIHtcbiAgICAgICAgICAgIGxldCB1dGMgPSB1dGNfc2Vjb25kcyAqIDEwMDA7XG4gICAgICAgICAgICBsZXQgZF9sb2NhbCA9IG5ldyBEYXRlKHV0Yyk7XG4gICAgICAgICAgICBsZXQgbG9jYWxfb2Zmc2V0ID0gZF9sb2NhbC5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgICAgICAgICAgbGV0IHNlcnZlcl9vZmZzZXQgPSBtb21lbnQudHoodXRjLCBudG9wX3pvbmVpbmZvKS5fb2Zmc2V0O1xuICAgICAgICAgICAgbGV0IG9mZnNldF9taW51dGVzID0gc2VydmVyX29mZnNldCArIGxvY2FsX29mZnNldDtcbiAgICAgICAgICAgIGxldCBvZmZzZXRfbXMgPSBvZmZzZXRfbWludXRlcyAqIDEwMDAgKiA2MDtcbiAgICAgICAgICAgIHZhciBkX3NlcnZlciA9IG5ldyBEYXRlKHV0YyArIG9mZnNldF9tcyk7XG4gICAgICAgICAgICByZXR1cm4gZF9zZXJ2ZXI7XG4gICAgICAgIH0sXG4gICAgICAgIHNlcnZlcl9kYXRlX3RvX2RhdGU6IGZ1bmN0aW9uIChkYXRlLCBmb3JtYXQpIHtcbiAgICAgICAgICAgIGxldCB1dGMgPSBkYXRlLmdldFRpbWUoKTtcbiAgICAgICAgICAgIGxldCBsb2NhbF9vZmZzZXQgPSBkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG4gICAgICAgICAgICBsZXQgc2VydmVyX29mZnNldCA9IG1vbWVudC50eih1dGMsIG50b3Bfem9uZWluZm8pLl9vZmZzZXQ7XG4gICAgICAgICAgICBsZXQgb2Zmc2V0X21pbnV0ZXMgPSBzZXJ2ZXJfb2Zmc2V0ICsgbG9jYWxfb2Zmc2V0O1xuICAgICAgICAgICAgbGV0IG9mZnNldF9tcyA9IG9mZnNldF9taW51dGVzICogMTAwMCAqIDYwO1xuICAgICAgICAgICAgdmFyIGRfbG9jYWwgPSBuZXcgRGF0ZSh1dGMgLSBvZmZzZXRfbXMpO1xuICAgICAgICAgICAgcmV0dXJuIGRfbG9jYWw7XG4gICAgICAgIH0sXG4gICAgICAgIG9uX3N0YXR1c191cGRhdGVkOiBmdW5jdGlvbiAoc3RhdHVzKSB7XG4gICAgICAgICAgICBsZXQgZW5kX2RhdGVfdGltZV91dGMgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgLy8gZGVmYXVsdCBiZWdpbiBkYXRlIHRpbWUgbm93IC0gMzAgbWludXRlc1xuICAgICAgICAgICAgbGV0IGJlZ2luX2RhdGVfdGltZV91dGMgPSBlbmRfZGF0ZV90aW1lX3V0YyAtIDMwICogNjAgKiAxMDAwO1xuICAgICAgICAgICAgaWYgKHN0YXR1cy5lcG9jaF9lbmQgIT0gbnVsbCAmJiBzdGF0dXMuZXBvY2hfYmVnaW4gIT0gbnVsbFxuICAgICAgICAgICAgICAgICYmIE51bWJlci5wYXJzZUludChzdGF0dXMuZXBvY2hfZW5kKSA+IE51bWJlci5wYXJzZUludChzdGF0dXMuZXBvY2hfYmVnaW4pKSB7XG4gICAgICAgICAgICAgICAgc3RhdHVzLmVwb2NoX2JlZ2luID0gTnVtYmVyLnBhcnNlSW50KHN0YXR1cy5lcG9jaF9iZWdpbik7XG4gICAgICAgICAgICAgICAgc3RhdHVzLmVwb2NoX2VuZCA9IE51bWJlci5wYXJzZUludChzdGF0dXMuZXBvY2hfZW5kKTtcbiAgICAgICAgICAgICAgICBlbmRfZGF0ZV90aW1lX3V0YyA9IHN0YXR1cy5lcG9jaF9lbmQgKiAxMDAwO1xuICAgICAgICAgICAgICAgIGJlZ2luX2RhdGVfdGltZV91dGMgPSBzdGF0dXMuZXBvY2hfYmVnaW4gKiAxMDAwO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdGF0dXMuZXBvY2hfZW5kID0gdGhpcy5nZXRfdXRjX3NlY29uZHMoZW5kX2RhdGVfdGltZV91dGMpO1xuICAgICAgICAgICAgICAgIHN0YXR1cy5lcG9jaF9iZWdpbiA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKGJlZ2luX2RhdGVfdGltZV91dGMpO1xuICAgICAgICAgICAgICAgIG50b3BuZ191cmxfbWFuYWdlci5hZGRfb2JqX3RvX3VybChzdGF0dXMpO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdF9lcG9jaF9jaGFuZ2Uoc3RhdHVzLCB0aGlzLiRwcm9wcy5pZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0aGlzLmZsYXRfYmVnaW5fZGF0ZS5zZXREYXRlKG5ldyBEYXRlKHN0YXR1cy5lcG9jaF9iZWdpbiAqIDEwMDApKTtcbiAgICAgICAgICAgIC8vIHRoaXMuZmxhdF9lbmRfZGF0ZS5zZXREYXRlKG5ldyBEYXRlKHN0YXR1cy5lcG9jaF9lbmQgKiAxMDAwKSk7XG4gICAgICAgICAgICB0aGlzLmZsYXRfYmVnaW5fZGF0ZS5zZXREYXRlKHRoaXMudXRjX3NfdG9fc2VydmVyX2RhdGUoc3RhdHVzLmVwb2NoX2JlZ2luKSk7XG4gICAgICAgICAgICB0aGlzLmZsYXRfZW5kX2RhdGUuc2V0RGF0ZSh0aGlzLnV0Y19zX3RvX3NlcnZlcl9kYXRlKHN0YXR1cy5lcG9jaF9lbmQpKTtcbiAgICAgICAgICAgIC8vIHRoaXMuc2V0X2RhdGVfdGltZShcImJlZ2luLWRhdGVcIiwgYmVnaW5fZGF0ZV90aW1lX3V0YywgZmFsc2UpO1xuICAgICAgICAgICAgLy8gdGhpcy5zZXRfZGF0ZV90aW1lKFwiYmVnaW4tdGltZVwiLCBiZWdpbl9kYXRlX3RpbWVfdXRjLCB0cnVlKTtcbiAgICAgICAgICAgIC8vIHRoaXMuc2V0X2RhdGVfdGltZShcImVuZC1kYXRlXCIsIGVuZF9kYXRlX3RpbWVfdXRjLCBmYWxzZSk7XG4gICAgICAgICAgICAvLyB0aGlzLnNldF9kYXRlX3RpbWUoXCJlbmQtdGltZVwiLCBlbmRfZGF0ZV90aW1lX3V0YywgdHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLnNldF9zZWxlY3RfdGltZV92YWx1ZShiZWdpbl9kYXRlX3RpbWVfdXRjLCBlbmRfZGF0ZV90aW1lX3V0Yyk7XG4gICAgICAgICAgICB0aGlzLmVwb2NoX3N0YXR1cyA9IHsgZXBvY2hfYmVnaW46IHN0YXR1cy5lcG9jaF9iZWdpbiwgZXBvY2hfZW5kOiBzdGF0dXMuZXBvY2hfZW5kIH07XG4gICAgICAgICAgICBpZiAodGhpcy51cGRhdGVfZnJvbV9pbnRlcnZhbCA9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkX3N0YXR1c19pbl9oaXN0b3J5KHRoaXMuZXBvY2hfc3RhdHVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZW5hYmxlX2FwcGx5ID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZV9mcm9tX2ludGVydmFsID0gZmFsc2U7XG4gICAgICAgICAgICBudG9wbmdfdXJsX21hbmFnZXIuYWRkX29ial90b191cmwodGhpcy5lcG9jaF9zdGF0dXMpO1xuICAgICAgICB9LFxuICAgICAgICBzZXRfc2VsZWN0X3RpbWVfdmFsdWU6IGZ1bmN0aW9uIChiZWdpbl91dGMsIGVuZF91dGMpIHtcbiAgICAgICAgICAgIGNvbnN0IHRpbWVmcmFtZXNfZGljdCA9IHRoaXMuZ2V0X3RpbWVmcmFtZXNfYXZhaWxhYmxlKCk7XG4gICAgICAgICAgICBjb25zdCB0b2xlcmFuY2UgPSA2MDtcbiAgICAgICAgICAgIGxldCBub3cgPSB0aGlzLmdldF91dGNfc2Vjb25kcyhEYXRlLm5vdygpKTtcblx0ICAgIGlmICh0aGlzLnJvdW5kX3RpbWUgPT0gdHJ1ZSAmJiB0aGlzLm1pbl90aW1lX2ludGVydmFsX2lkICE9IG51bGwpIHtcblx0XHRub3cgPSB0aGlzLnJvdW5kX3RpbWVfYnlfbWluX2ludGVydmFsKG5vdylcblx0ICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGVuZF91dGNfcyA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKGVuZF91dGMpO1xuICAgICAgICAgICAgY29uc3QgYmVnaW5fdXRjX3MgPSB0aGlzLmdldF91dGNfc2Vjb25kcyhiZWdpbl91dGMpO1xuXHQgICAgXG4gICAgICAgICAgICBpZiAodGhpcy5pc19iZXR3ZWVuKGVuZF91dGNfcywgbm93LCB0b2xlcmFuY2UpKSB7XG5cdFx0dGhpcy5zZWxlY3RfdGltZV92YWx1ZSA9IG51bGw7XG5cdFx0Zm9yIChsZXQgdGltZV9pZCBpbiB0aW1lZnJhbWVzX2RpY3QpIHtcblx0XHQgICAgaWYgKHRoaXMuaXNfYmV0d2VlbihiZWdpbl91dGNfcywgbm93IC0gdGltZWZyYW1lc19kaWN0W3RpbWVfaWRdLCB0b2xlcmFuY2UpKSB7XG5cdFx0XHR0aGlzLnNlbGVjdF90aW1lX3ZhbHVlID0gdGltZV9pZDtcblx0XHQgICAgfVxuXHRcdH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RfdGltZV92YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0X3RpbWVfdmFsdWUgPSBcImN1c3RvbVwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RfdGltZV92YWx1ZSA9IFwiY3VzdG9tXCI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMudGltZV9wcmVzZXRfbGlzdF9maWx0ZXJlZC5mb3JFYWNoKGVsZW1lbnQgPT4ge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuY3VycmVudGx5X2FjdGl2ZSA9IGZhbHNlXG4gICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQudmFsdWUgPT0gdGhpcy5zZWxlY3RfdGltZV92YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkX3RpbWVfb3B0aW9uID0gZWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jdXJyZW50bHlfYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgYXBwbHk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIGxldCBkYXRlX2JlZ2luID0gdGhpcy4kcmVmc1tcImJlZ2luLWRhdGVcIl0udmFsdWVBc0RhdGU7XG4gICAgICAgICAgICAvLyBsZXQgZF90aW1lX2JlZ2luID0gdGhpcy4kcmVmc1tcImJlZ2luLXRpbWVcIl0udmFsdWVBc0RhdGU7XG4gICAgICAgICAgICAvLyBkYXRlX2JlZ2luLnNldEhvdXJzKGRfdGltZV9iZWdpbi5nZXRIb3VycygpKTtcbiAgICAgICAgICAgIC8vIGRhdGVfYmVnaW4uc2V0TWludXRlcyhkX3RpbWVfYmVnaW4uZ2V0TWludXRlcygpICsgZF90aW1lX2JlZ2luLmdldFRpbWV6b25lT2Zmc2V0KCkpO1xuICAgICAgICAgICAgLy8gZGF0ZV9iZWdpbi5zZXRTZWNvbmRzKGRfdGltZV9iZWdpbi5nZXRTZWNvbmRzKCkpO1xuXG4gICAgICAgICAgICAvLyBsZXQgZGF0ZV9lbmQgPSB0aGlzLiRyZWZzW1wiZW5kLWRhdGVcIl0udmFsdWVBc0RhdGU7XG4gICAgICAgICAgICAvLyBsZXQgZF90aW1lX2VuZCA9IHRoaXMuJHJlZnNbXCJlbmQtdGltZVwiXS52YWx1ZUFzRGF0ZTtcbiAgICAgICAgICAgIC8vIGRhdGVfZW5kLnNldEhvdXJzKGRfdGltZV9lbmQuZ2V0SG91cnMoKSk7XG4gICAgICAgICAgICAvLyBkYXRlX2VuZC5zZXRNaW51dGVzKGRfdGltZV9lbmQuZ2V0TWludXRlcygpICsgZF90aW1lX2VuZC5nZXRUaW1lem9uZU9mZnNldCgpKTtcbiAgICAgICAgICAgIC8vIGRhdGVfZW5kLnNldFNlY29uZHMoZF90aW1lX2VuZC5nZXRTZWNvbmRzKCkpO1xuICAgICAgICAgICAgLy8gbGV0IGVwb2NoX2JlZ2luID0gdGhpcy5nZXRfdXRjX3NlY29uZHMoZGF0ZV9iZWdpbi52YWx1ZU9mKCkpO1xuICAgICAgICAgICAgLy8gbGV0IGVwb2NoX2VuZCA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKGRhdGVfZW5kLnZhbHVlT2YoKSk7XG4gICAgICAgICAgICBsZXQgbm93X3MgPSB0aGlzLmdldF91dGNfc2Vjb25kcyhEYXRlLm5vdygpKTtcbiAgICAgICAgICAgIGxldCBiZWdpbl9kYXRlID0gdGhpcy5zZXJ2ZXJfZGF0ZV90b19kYXRlKHRoaXMuZmxhdF9iZWdpbl9kYXRlLnNlbGVjdGVkRGF0ZXNbMF0pO1xuICAgICAgICAgICAgbGV0IGVwb2NoX2JlZ2luID0gdGhpcy5nZXRfdXRjX3NlY29uZHMoYmVnaW5fZGF0ZS5nZXRUaW1lKCkpO1xuICAgICAgICAgICAgbGV0IGVuZF9kYXRlID0gdGhpcy5zZXJ2ZXJfZGF0ZV90b19kYXRlKHRoaXMuZmxhdF9lbmRfZGF0ZS5zZWxlY3RlZERhdGVzWzBdKTtcbiAgICAgICAgICAgIGxldCBlcG9jaF9lbmQgPSB0aGlzLmdldF91dGNfc2Vjb25kcyhlbmRfZGF0ZS5nZXRUaW1lKCkpO1xuICAgICAgICAgICAgaWYgKGVwb2NoX2VuZCA+IG5vd19zKSB7XG4gICAgICAgICAgICAgICAgZXBvY2hfZW5kID0gbm93X3M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgc3RhdHVzID0geyBlcG9jaF9iZWdpbiwgZXBvY2hfZW5kIH07XG4gICAgICAgICAgICB0aGlzLmVtaXRfZXBvY2hfY2hhbmdlKHN0YXR1cyk7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIHNldF9kYXRlX3RpbWU6IGZ1bmN0aW9uKHJlZl9uYW1lLCB1dGNfdHMsIGlzX3RpbWUpIHtcbiAgICAgICAgLy8gICAgIHV0Y190cyA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKHV0Y190cykgKiAxMDAwOyAgICAgICAgXG4gICAgICAgIC8vICAgICBsZXQgZGF0ZV90aW1lID0gbmV3IERhdGUodXRjX3RzKTtcbiAgICAgICAgLy8gICAgIGRhdGVfdGltZS5zZXRNaW51dGVzKGRhdGVfdGltZS5nZXRNaW51dGVzKCkgLSBkYXRlX3RpbWUuZ2V0VGltZXpvbmVPZmZzZXQoKSk7XG4gICAgICAgIC8vICAgICBpZiAoaXNfdGltZSkge1xuICAgICAgICAvLyBcdHRoaXMuJHJlZnNbcmVmX25hbWVdLnZhbHVlID0gZGF0ZV90aW1lLnRvSVNPU3RyaW5nKCkuc3Vic3RyaW5nKDExLDE2KTtcbiAgICAgICAgLy8gICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFx0dGhpcy4kcmVmc1tyZWZfbmFtZV0udmFsdWUgPSBkYXRlX3RpbWUudG9JU09TdHJpbmcoKS5zdWJzdHJpbmcoMCwxMCk7XG4gICAgICAgIC8vICAgICB9XG4gICAgICAgIC8vIH0sXG4gICAgICAgIGNoYW5nZV9zZWxlY3RfdGltZTogZnVuY3Rpb24gKHJlZnJlc2hfZGF0YSkge1xuICAgICAgICAgICAgbGV0IHNfdmFsdWVzID0gdGhpcy5nZXRfdGltZWZyYW1lc19hdmFpbGFibGUoKTtcbiAgICAgICAgICAgIGxldCBpbnRlcnZhbF9zID0gc192YWx1ZXNbdGhpcy5zZWxlY3RlZF90aW1lX29wdGlvbi52YWx1ZV07XG4gICAgICAgICAgICBsZXQgZXBvY2hfZW5kID0gdGhpcy5nZXRfdXRjX3NlY29uZHMoRGF0ZS5ub3coKSk7XG4gICAgICAgICAgICBsZXQgZXBvY2hfYmVnaW4gPSBlcG9jaF9lbmQgLSBpbnRlcnZhbF9zO1xuICAgICAgICAgICAgbGV0IHN0YXR1cyA9IHsgZXBvY2hfYmVnaW46IGVwb2NoX2JlZ2luLCBlcG9jaF9lbmQ6IGVwb2NoX2VuZCwgcmVmcmVzaF9kYXRhIH07XG4gICAgICAgICAgICB0aGlzLmVtaXRfZXBvY2hfY2hhbmdlKHN0YXR1cyk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldF90aW1lZnJhbWVzX2F2YWlsYWJsZTogZnVuY3Rpb24gKCkge1xuXHQgICAgY29uc3QgdGltZWZyYW1lc19kaWN0ID0gbnRvcG5nX3V0aWxpdHkuZ2V0X3RpbWVmcmFtZXNfZGljdCgpO1xuICAgICAgICAgICAgY29uc3QgdGltZWZyYW1lc19pZHMgPSB0aGlzLnRpbWVfcHJlc2V0X2xpc3QubWFwKCh0cykgPT4gdHMudmFsdWUpO1xuXHQgICAgbGV0IHRpbWVmcmFtZXNfYXZhaWxhYmxlID0ge307XG5cdCAgICB0aW1lZnJhbWVzX2lkcy5mb3JFYWNoKCh0Zl9pZCkgPT4ge1xuXHRcdHRpbWVmcmFtZXNfYXZhaWxhYmxlW3RmX2lkXSA9IHRpbWVmcmFtZXNfZGljdFt0Zl9pZF07XG5cdCAgICB9KTtcblx0ICAgIHJldHVybiB0aW1lZnJhbWVzX2F2YWlsYWJsZTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0X3V0Y19zZWNvbmRzOiBmdW5jdGlvbiAodXRjX21zKSB7XG5cdCAgICByZXR1cm4gbnRvcG5nX3V0aWxpdHkuZ2V0X3V0Y19zZWNvbmRzKHV0Y19tcyk7XG4gICAgICAgIH0sXG4gICAgICAgIGlzX2JldHdlZW46IGZ1bmN0aW9uICh4LCB5LCB0b2xlcmFuY2UpIHtcbiAgICAgICAgICAgIHJldHVybiB4ID49IHkgLSB0b2xlcmFuY2UgJiYgeCA8PSB5O1xuICAgICAgICB9LFxuICAgICAgICB6b29tOiBmdW5jdGlvbiAoc2NhbGUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmVwb2NoX3N0YXR1cyA9PSBudWxsKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgbGV0IGludGVydmFsID0gKHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCAtIHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luKSAvIHNjYWxlO1xuICAgICAgICAgICAgbGV0IGNlbnRlciA9ICh0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9lbmQgLyAyICsgdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfYmVnaW4gLyAyKTtcbiAgICAgICAgICAgIHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luID0gY2VudGVyIC0gaW50ZXJ2YWwgLyAyO1xuICAgICAgICAgICAgdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kID0gY2VudGVyICsgaW50ZXJ2YWwgLyAyO1xuICAgICAgICAgICAgbGV0IG5vdyA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKERhdGUubm93KCkpO1xuICAgICAgICAgICAgaWYgKHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCA+IG5vdykge1xuICAgICAgICAgICAgICAgIHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCA9IG5vdztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCA9IE51bWJlci5wYXJzZUludCh0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9lbmQpO1xuICAgICAgICAgICAgdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfYmVnaW4gPSBOdW1iZXIucGFyc2VJbnQodGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfYmVnaW4pO1xuICAgICAgICAgICAgaWYgKHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luID09IHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luIC09IDI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmVtaXRfZXBvY2hfY2hhbmdlKHRoaXMuZXBvY2hfc3RhdHVzKTtcbiAgICAgICAgfSxcbiAgICAgICAganVtcF90aW1lX2JhY2s6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmVwb2NoX3N0YXR1cyA9PSBudWxsKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgY29uc3QgbWluID0gNjA7XG4gICAgICAgICAgICB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9iZWdpbiAtPSAoMzAgKiBtaW4pO1xuICAgICAgICAgICAgdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kIC09ICgzMCAqIG1pbik7XG4gICAgICAgICAgICB0aGlzLmVtaXRfZXBvY2hfY2hhbmdlKHRoaXMuZXBvY2hfc3RhdHVzKTtcbiAgICAgICAgfSxcbiAgICAgICAganVtcF90aW1lX2FoZWFkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5lcG9jaF9zdGF0dXMgPT0gbnVsbCkgeyByZXR1cm47IH1cbiAgICAgICAgICAgIGNvbnN0IG1pbiA9IDYwO1xuICAgICAgICAgICAgbGV0IHByZXZpb3VzX2VuZCA9IHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZDtcbiAgICAgICAgICAgIGxldCBub3cgPSB0aGlzLmdldF91dGNfc2Vjb25kcyhEYXRlLm5vdygpKTtcblxuICAgICAgICAgICAgdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kICs9ICgzMCAqIG1pbik7XG4gICAgICAgICAgICBpZiAodGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kID4gbm93KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kID0gbm93O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfYmVnaW4gKz0gKHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCAtIHByZXZpb3VzX2VuZCk7XG4gICAgICAgICAgICB0aGlzLmVtaXRfZXBvY2hfY2hhbmdlKHRoaXMuZXBvY2hfc3RhdHVzKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW1pdF9lcG9jaF9jaGFuZ2U6IGZ1bmN0aW9uIChlcG9jaF9zdGF0dXMsIGlkLCBlbWl0X29ubHlfZ2xvYmFsX2V2ZW50KSB7XG4gICAgICAgICAgICBpZiAoZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCA9PSBudWxsIHx8IGVwb2NoX3N0YXR1cy5lcG9jaF9iZWdpbiA9PSBudWxsKSB7IHJldHVybjsgfTtcbiAgICAgICAgICAgIHRoaXMud3JvbmdfZGF0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGVwb2NoX3N0YXR1cy5lcG9jaF9iZWdpbiA+IGVwb2NoX3N0YXR1cy5lcG9jaF9lbmQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLndyb25nX2RhdGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblx0ICAgIGlmICh0aGlzLm1pbl90aW1lX2ludGVydmFsX2lkICYmIHRoaXMucm91bmRfdGltZSA9PSB0cnVlKSB7XG5cdFx0ZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luID0gdGhpcy5yb3VuZF90aW1lX2J5X21pbl9pbnRlcnZhbChlcG9jaF9zdGF0dXMuZXBvY2hfYmVnaW4pO1xuXHRcdGVwb2NoX3N0YXR1cy5lcG9jaF9lbmQgPSB0aGlzLnJvdW5kX3RpbWVfYnlfbWluX2ludGVydmFsKGVwb2NoX3N0YXR1cy5lcG9jaF9lbmQpO1xuXHQgICAgfVxuXG4gICAgICAgICAgICBpZiAoaWQgIT0gdGhpcy5pZCkge1xuICAgICAgICAgICAgICAgIHRoaXMub25fc3RhdHVzX3VwZGF0ZWQoZXBvY2hfc3RhdHVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2V2ZW50KG50b3BuZ19ldmVudHMuRVBPQ0hfQ0hBTkdFLCBlcG9jaF9zdGF0dXMsIHRoaXMuaWQpO1xuXHQgICAgaWYgKGVtaXRfb25seV9nbG9iYWxfZXZlbnQpIHtcblx0XHRyZXR1cm47XG5cdCAgICB9XG4gICAgICAgICAgICB0aGlzLiRlbWl0KFwiZXBvY2hfY2hhbmdlXCIsIGVwb2NoX3N0YXR1cyk7XG4gICAgICAgIH0sXG5cdHJvdW5kX3RpbWVfYnlfbWluX2ludGVydmFsOiBmdW5jdGlvbih0cykge1xuXHQgICAgcmV0dXJuIG50b3BuZ191dGlsaXR5LnJvdW5kX3RpbWVfYnlfdGltZWZyYW1lX2lkKHRzLCB0aGlzLm1pbl90aW1lX2ludGVydmFsX2lkKTtcblx0fSxcbiAgICAgICAgYWRkX3N0YXR1c19pbl9oaXN0b3J5OiBmdW5jdGlvbiAoZXBvY2hfc3RhdHVzKSB7XG4gICAgICAgICAgICB0aGlzLmhpc3RvcnlfbGFzdF9zdGF0dXMgPSB0aGlzLmhpc3RvcnlbdGhpcy5oaXN0b3J5Lmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgaWYgKHRoaXMuaGlzdG9yeS5sZW5ndGggPiA1KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oaXN0b3J5LnNoaWZ0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmhpc3RvcnkucHVzaChlcG9jaF9zdGF0dXMpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGFwcGx5X3N0YXR1c19ieV9oaXN0b3J5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5oaXN0b3J5X2xhc3Rfc3RhdHVzID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICB0aGlzLmhpc3RvcnkucG9wKCk7XG4gICAgICAgICAgICB0aGlzLmhpc3RvcnkucG9wKCk7XG4gICAgICAgICAgICB0aGlzLmVtaXRfZXBvY2hfY2hhbmdlKHRoaXMuaGlzdG9yeV9sYXN0X3N0YXR1cyk7XG4gICAgICAgIH0sXG4gICAgfSxcbiAgICAvKipcbiAgICAgICBQcml2YXRlIGRhdGUgb2YgdnVlIGNvbXBvbmVudC5cbiAgICAqL1xuICAgIGRhdGEoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpMThuOiAodCkgPT4gaTE4bih0KSxcbiAgICAgICAgICAgIC8vc3RhdHVzX2lkOiBcImRhdGUtdGltZS1yYW5nZS1waWNrZXJcIiArIHRoaXMuJHByb3BzLmlkLFxuICAgICAgICAgICAgZXBvY2hfc3RhdHVzOiBudWxsLFxuICAgICAgICAgICAgcmVmcmVzaF9pbnRlcnZhbDogbnVsbCxcbiAgICAgICAgICAgIHJlZnJlc2hfaW50ZXJ2YWxfc2Vjb25kczogNjAsXG4gICAgICAgICAgICB1cGRhdGVfZnJvbV9pbnRlcnZhbDogZmFsc2UsXG4gICAgICAgICAgICBoaXN0b3J5OiBbXSxcbiAgICAgICAgICAgIGhpc3RvcnlfbGFzdF9zdGF0dXM6IG51bGwsXG4gICAgICAgICAgICBlbmFibGVfYXBwbHk6IGZhbHNlLFxuICAgICAgICAgICAgc2VsZWN0X3RpbWVfdmFsdWU6IFwiNV9taW5cIixcbiAgICAgICAgICAgIHNlbGVjdGVkX3RpbWVfb3B0aW9uOiB7IHZhbHVlOiBcIjVfbWluXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLjVfbWluJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlIH0sXG4gICAgICAgICAgICB3cm9uZ19kYXRlOiBmYWxzZSxcbiAgICAgICAgICAgIHdyb25nX21pbl9pbnRlcnZhbDogZmFsc2UsXG4gICAgICAgICAgICBmbGF0X2JlZ2luX2RhdGU6IG51bGwsXG4gICAgICAgICAgICBmbGF0X2VuZF9kYXRlOiBudWxsLFxuICAgICAgICAgICAgdGltZV9wcmVzZXRfbGlzdDogW1xuICAgICAgICAgICAgICAgIHsgdmFsdWU6IFwiNV9taW5cIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMuNV9taW4nKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfSxcbiAgICAgICAgICAgICAgICB7IHZhbHVlOiBcIjEwX21pblwiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy4xMF9taW4nKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfSxcbiAgICAgICAgICAgICAgICB7IHZhbHVlOiBcIjMwX21pblwiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy4zMF9taW4nKSwgY3VycmVudGx5X2FjdGl2ZTogdHJ1ZSB9LFxuICAgICAgICAgICAgICAgIHsgdmFsdWU6IFwiaG91clwiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy5ob3VyJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlIH0sXG4gICAgICAgICAgICAgICAgeyB2YWx1ZTogXCIyX2hvdXJzXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLjJfaG91cnMnKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfSxcbiAgICAgICAgICAgICAgICB7IHZhbHVlOiBcIjZfaG91cnNcIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMuNl9ob3VycycpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgICAgICAgICAgICAgIHsgdmFsdWU6IFwiMTJfaG91cnNcIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMuMTJfaG91cnMnKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfSxcbiAgICAgICAgICAgICAgICB7IHZhbHVlOiBcImRheVwiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy5kYXknKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfSxcbiAgICAgICAgICAgICAgICB7IHZhbHVlOiBcIndlZWtcIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMud2VlaycpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgICAgICAgICAgICAgIHsgdmFsdWU6IFwibW9udGhcIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMubW9udGgnKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfSxcbiAgICAgICAgICAgICAgICB7IHZhbHVlOiBcInllYXJcIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMueWVhcicpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgICAgICAgICAgICAgIHsgdmFsdWU6IFwiY3VzdG9tXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLmN1c3RvbScpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSwgZGlzYWJsZWQ6IHRydWUsIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgdGltZV9wcmVzZXRfbGlzdF9maWx0ZXJlZDogW10sXG4gICAgICAgIH07XG4gICAgfSxcbn1cblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG4uZGF0ZV90aW1lX2lucHV0IHtcbiAgICB3aWR0aDogMTAuNXJlbTtcbiAgICBtYXgtd2lkdGg6IDEwLjVyZW07XG4gICAgbWluLXdpZHRoOiAxMC41cmVtO1xufVxuPC9zdHlsZT5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG4gICAgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29udHJvbHNcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwIG1lLWF1dG8gYnRuLWdyb3VwLXNtIGZsZXgtd3JhcCBkLWZsZXhcIj5cbiAgICAgICAgICAgICAgICAgICAgPHNsb3QgbmFtZT1cImJlZ2luXCI+PC9zbG90PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3Qtc2VhcmNoIDpkaXNhYmxlZD1cImRpc2FibGVkX2RhdGVfcGlja2VyXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfdGltZV9vcHRpb25cIiA6aWQ9XCIndGltZV9wcmVzZXRfcmFuZ2VfcGlja2VyJ1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOm9wdGlvbnM9XCJ0aW1lX3ByZXNldF9saXN0X2ZpbHRlcmVkXCIgQHNlbGVjdF9vcHRpb249XCJjaGFuZ2Vfc2VsZWN0X3RpbWUobnVsbClcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0LXNlYXJjaD5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJidG4tZ3JvdXAgbXMtMlwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC10ZXh0XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtY2FsZW5kYXItYWx0XCI+PC9pPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IDpkaXNhYmxlZD1cImRpc2FibGVkX2RhdGVfcGlja2VyXCIgY2xhc3M9XCJmbGF0cGlja3IgZmxhdHBpY2tyLWlucHV0IGZvcm0tY29udHJvbFwiIHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCJDaG9vc2UgYSBkYXRlLi5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtaWQ9XCJkYXRldGltZVwiIHJlZj1cImJlZ2luLWRhdGVcIiBzdHlsZT1cIndpZHRoOjEwcmVtO1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSA8aW5wdXQgcmVmPVwiYmVnaW4tZGF0ZVwiIEBjaGFuZ2U9XCJlbmFibGVfYXBwbHk9dHJ1ZVwiIEBjaGFuZ2U9XCJjaGFuZ2VfYmVnaW5fZGF0ZVwiIHR5cGU9XCJkYXRlXCIgY2xhc3M9XCJkYXRlX3RpbWVfaW5wdXQgYmVnaW4tdGltZXBpY2tlciBmb3JtLWNvbnRyb2wgYm9yZGVyLXJpZ2h0LTAgZml4LXNhZmFyaS1pbnB1dFwiPiAtLT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gPGlucHV0IHJlZj1cImJlZ2luLXRpbWVcIiBAY2hhbmdlPVwiZW5hYmxlX2FwcGx5PXRydWVcIiB0eXBlPVwidGltZVwiIGNsYXNzPVwiZGF0ZV90aW1lX2lucHV0IGJlZ2luLXRpbWVwaWNrZXIgZm9ybS1jb250cm9sIGJvcmRlci1yaWdodC0wIGZpeC1zYWZhcmktaW5wdXRcIj4gLS0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImlucHV0LWdyb3VwLXRleHRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1sb25nLWFycm93LWFsdC1yaWdodFwiPjwvaT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCA6ZGlzYWJsZWQ9XCJkaXNhYmxlZF9kYXRlX3BpY2tlclwiIGNsYXNzPVwiZmxhdHBpY2tyIGZsYXRwaWNrci1pbnB1dCBmb3JtLWNvbnRyb2xcIiB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwiQ2hvb3NlIGEgZGF0ZS4uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWlkPVwiZGF0ZXRpbWVcIiByZWY9XCJlbmQtZGF0ZVwiIHN0eWxlPVwid2lkdGg6MTByZW07XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8IS0tIDxpbnB1dCByZWY9XCJlbmQtZGF0ZVwiIEBjaGFuZ2U9XCJlbmFibGVfYXBwbHk9dHJ1ZVwiIHR5cGU9XCJkYXRlXCIgY2xhc3M9XCJkYXRlX3RpbWVfaW5wdXQgZW5kLXRpbWVwaWNrZXIgZm9ybS1jb250cm9sIGJvcmRlci1sZWZ0LTAgZml4LXNhZmFyaS1pbnB1dFwiIHN0eWxlPVwid2lkdGg6IDIuNXJlbTtcIj4gLS0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8IS0tIDxpbnB1dCByZWY9XCJlbmQtdGltZVwiIEBjaGFuZ2U9XCJlbmFibGVfYXBwbHk9dHJ1ZVwiIHR5cGU9XCJ0aW1lXCIgY2xhc3M9XCJkYXRlX3RpbWVfaW5wdXQgZW5kLXRpbWVwaWNrZXIgZm9ybS1jb250cm9sIGJvcmRlci1sZWZ0LTAgZml4LXNhZmFyaS1pbnB1dFwiPiAtLT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHYtc2hvdz1cIndyb25nX2RhdGUgfHwgd3JvbmdfbWluX2ludGVydmFsXCIgOnRpdGxlPVwiaW52YWxpZF9kYXRlX21lc3NhZ2VcIiBzdHlsZT1cIm1hcmdpbi1sZWZ0OjAuMnJlbTtjb2xvcjpyZWQ7XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtZXhjbGFtYXRpb24tY2lyY2xlXCI+PC9pPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBtcy0yXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIDpkaXNhYmxlZD1cIiFlbmFibGVfYXBwbHkgfHwgd3JvbmdfZGF0ZSB8fCB3cm9uZ19taW5faW50ZXJ2YWxcIiBAY2xpY2s9XCJhcHBseVwiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tc20gYnRuLXByaW1hcnlcIj57e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkxOG4oJ2FwcGx5JykgfX08L2J1dHRvbj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJ0bi1ncm91cFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gOmRpc2FibGVkPVwiZGlzYWJsZWRfZGF0ZV9waWNrZXJcIiBAY2xpY2s9XCJqdW1wX3RpbWVfYmFjaygpXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tbGlua1wiIHJlZj1cImJ0bi1qdW1wLXRpbWUtYmFja1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDp0aXRsZT1cImkxOG4oJ2RhdGVfdGltZV9yYW5nZV9waWNrZXIuYnRuX21vdmVfbGVmdCcpXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLWxvbmctYXJyb3ctYWx0LWxlZnRcIj48L2k+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiA6ZGlzYWJsZWQ9XCJkaXNhYmxlZF9kYXRlX3BpY2tlclwiIEBjbGljaz1cImp1bXBfdGltZV9haGVhZCgpXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tbGluayBtZS0yXCIgcmVmPVwiYnRuLWp1bXAtdGltZS1haGVhZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDp0aXRsZT1cImkxOG4oJ2RhdGVfdGltZV9yYW5nZV9waWNrZXIuYnRuX21vdmVfcmlnaHQnKVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1sb25nLWFycm93LWFsdC1yaWdodFwiPjwvaT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIDpkaXNhYmxlZD1cImRpc2FibGVkX2RhdGVfcGlja2VyXCIgQGNsaWNrPVwiem9vbSgyKVwiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tc20gYnRuLWxpbmtcIiByZWY9XCJidG4tem9vbS1pblwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDp0aXRsZT1cImkxOG4oJ2RhdGVfdGltZV9yYW5nZV9waWNrZXIuYnRuX3pvb21faW4nKVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1zZWFyY2gtcGx1c1wiPjwvaT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIDpkaXNhYmxlZD1cImRpc2FibGVkX2RhdGVfcGlja2VyXCIgQGNsaWNrPVwiem9vbSgwLjUpXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1zbSBidG4tbGlua1wiIHJlZj1cImJ0bi16b29tLW91dFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDp0aXRsZT1cImkxOG4oJ2RhdGVfdGltZV9yYW5nZV9waWNrZXIuYnRuX3pvb21fb3V0JylcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtc2VhcmNoLW1pbnVzXCI+PC9pPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gOmRpc2FibGVkPVwiaGlzdG9yeV9sYXN0X3N0YXR1cyA9PSBudWxsIHx8IGRpc2FibGVkX2RhdGVfcGlja2VyXCIgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImFwcGx5X3N0YXR1c19ieV9oaXN0b3J5KClcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImJ0biBidG4tc20gYnRuLWxpbmtcIiA6dGl0bGU9XCJpMThuKCdkYXRlX3RpbWVfcmFuZ2VfcGlja2VyLmJ0bl91bmRvJylcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtdW5kb1wiPjwvaT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIDpkaXNhYmxlZD1cInNlbGVjdF90aW1lX3ZhbHVlID09ICdjdXN0b20nIHx8IGRpc2FibGVkX2RhdGVfcGlja2VyXCIgQGNsaWNrPVwiY2hhbmdlX3NlbGVjdF90aW1lKClcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1saW5rXCIgOnRpdGxlPVwiaTE4bignZGF0ZV90aW1lX3JhbmdlX3BpY2tlci5idG5fcmVmcmVzaCcpXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLXN5bmNcIj48L2k+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNsb3QgbmFtZT1cImV4dHJhX2J1dHRvbnNcIj48L3Nsb3Q+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX3V0aWxpdHksIG50b3BuZ191cmxfbWFuYWdlciwgbnRvcG5nX2V2ZW50c19tYW5hZ2VyIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXNcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgJ3NlbGVjdC1zZWFyY2gnOiBTZWxlY3RTZWFyY2gsXG4gICAgfSxcbiAgICBwcm9wczoge1xuICAgICAgICBpZDogU3RyaW5nLFxuICAgICAgICBlbmFibGVfcmVmcmVzaDogQm9vbGVhbixcbiAgICAgICAgZGlzYWJsZWRfZGF0ZV9waWNrZXI6IEJvb2xlYW4sXG4gICAgICAgIG1pbl90aW1lX2ludGVydmFsX2lkOiBTdHJpbmcsXG5cdCAgICByb3VuZF90aW1lOiBCb29sZWFuLCAvL2lmIG1pbl90aW1lX2ludGVydmFsX2lkICE9IG51bGwgcm91bmQgdGltZSBieSBtaW5fdGltZV9pbnRlcnZhbF9pZFxuICAgICAgICBjdXN0b21fdGltZV9pbnRlcnZhbF9saXN0OiBBcnJheSxcbiAgICB9LFxuICAgIGNvbXB1dGVkOiB7XG4gICAgICAgIC8vIGEgY29tcHV0ZWQgZ2V0dGVyXG4gICAgICAgIGludmFsaWRfZGF0ZV9tZXNzYWdlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy53cm9uZ19kYXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaTE4bignd3JvbmdfZGF0ZV9yYW5nZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy53cm9uZ19taW5faW50ZXJ2YWwpIHtcbiAgICAgICAgICAgICAgICBsZXQgbXNnID0gdGhpcy5pMThuKCd3cm9uZ19taW5faW50ZXJ2YWwnKTtcbiAgICAgICAgICAgICAgICBtc2cucmVwbGFjZSgnJXRpbWVfaW50ZXJ2YWwnLCB0aGlzLmkxOG4oYHNob3dfYWxlcnRzLnByZXNldHMuJHt0aGlzLm1pbl90aW1lX2ludGVydmFsX2lkfWApKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBtc2dcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgd2F0Y2g6IHtcbiAgICAgICAgXCJlbmFibGVfcmVmcmVzaFwiOiBmdW5jdGlvbiAodmFsLCBvbGRWYWwpIHtcbiAgICAgICAgICAgIGlmICh2YWwgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRfcmVmcmVzaCgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnJlZnJlc2hfaW50ZXJ2YWwgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5yZWZyZXNoX2ludGVydmFsKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2hfaW50ZXJ2YWwgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcIm1pbl90aW1lX2ludGVydmFsX2lkXCI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAvLyB0b2RvXG4gICAgICAgIH0sXG4gICAgICAgIFwicm91bmRfdGltZVwiOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgLy8gdG9kb1xuICAgICAgICB9LFxuICAgIH0sXG4gICAgZW1pdHM6IFtcImVwb2NoX2NoYW5nZVwiXSxcbiAgICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBvZiB0aGUgY29tcG9uZW50IGNhbGxlZCwgaXQncyBjYWxsZWQgYmVmb3JlIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gICAgY3JlYXRlZCgpIHtcbiAgICB9LFxuICAgIGJlZm9yZU1vdW50KCkge1xuICAgICAgICBpZiAodGhpcy4kcHJvcHMuY3VzdG9tX3RpbWVfaW50ZXJ2YWxfbGlzdCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnRpbWVfcHJlc2V0X2xpc3QgPSB0aGlzLiRwcm9wcy5jdXN0b21fdGltZV9pbnRlcnZhbF9saXN0O1xuICAgICAgICB9XG4gICAgICAgIC8vIGZpbHRlciBpbnRlcnZhbFxuICAgICAgICBpZiAodGhpcy5taW5fdGltZV9pbnRlcnZhbF9pZCA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnRpbWVfcHJlc2V0X2xpc3RfZmlsdGVyZWQgPSB0aGlzLnRpbWVfcHJlc2V0X2xpc3Q7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblx0Y29uc3QgdGltZWZyYW1lc19kaWN0ID0gdGhpcy5nZXRfdGltZWZyYW1lc19hdmFpbGFibGUoKTtcblx0Y29uc3QgbWluX3RpbWVfaW50ZXJ2YWwgPSB0aW1lZnJhbWVzX2RpY3RbdGhpcy5taW5fdGltZV9pbnRlcnZhbF9pZF07XG4gICAgICAgIHRoaXMudGltZV9wcmVzZXRfbGlzdF9maWx0ZXJlZCA9IHRoaXMudGltZV9wcmVzZXRfbGlzdC5maWx0ZXIoKGVsZW0pID0+IHtcbiAgICAgICAgICAgIGlmIChlbGVtLnZhbHVlID09IFwiY3VzdG9tXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtaW5fdGltZV9pbnRlcnZhbCA9PSBudWxsIHx8IHRpbWVmcmFtZXNfZGljdFtlbGVtLnZhbHVlXSA+PSBtaW5fdGltZV9pbnRlcnZhbDtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBjYWxsZWQgYWZ0ZXIgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgICBtb3VudGVkKCkge1xuICAgICAgICBsZXQgZXBvY2hfYmVnaW4gPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImVwb2NoX2JlZ2luXCIpO1xuICAgICAgICBsZXQgZXBvY2hfZW5kID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJlcG9jaF9lbmRcIik7XG4gICAgICAgIGlmIChlcG9jaF9iZWdpbiAhPSBudWxsICYmIGVwb2NoX2VuZCAhPSBudWxsKSB7XG4gICAgICAgICAgICAvLyB1cGRhdGUgdGhlIHN0YXR1c1xuXG4gICAgICAgICAgICB0aGlzLmVtaXRfZXBvY2hfY2hhbmdlKHsgZXBvY2hfYmVnaW46IE51bWJlci5wYXJzZUludChlcG9jaF9iZWdpbiksIGVwb2NoX2VuZDogTnVtYmVyLnBhcnNlSW50KGVwb2NoX2VuZCkgfSwgdGhpcy4kcHJvcHMuaWQsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBtZSA9IHRoaXM7XG4gICAgICAgIGxldCBmX3NldF9waWNrZXIgPSAocGlja2VyLCB2YXJfbmFtZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGZsYXRwaWNrcigkKHRoaXMuJHJlZnNbcGlja2VyXSksIHtcbiAgICAgICAgICAgICAgICBlbmFibGVUaW1lOiB0cnVlLFxuICAgICAgICAgICAgICAgIGRhdGVGb3JtYXQ6IFwiZC9tL1kgSDppXCIsXG4gICAgICAgICAgICAgICAgLy9hbHRJbnB1dDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAvL2RhdGVGb3JtYXQ6IFwiWVlZWS1NTS1ERCBISDptbVwiLFxuICAgICAgICAgICAgICAgIC8vYWx0Rm9ybWF0OiBcImQtbS1ZIEg6aVwiLFxuICAgICAgICAgICAgICAgIC8vbG9jYWxlOiBcIml0XCIsXG4gICAgICAgICAgICAgICAgdGltZV8yNGhyOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNsaWNrT3BlbnM6IHRydWUsXG4gICAgICAgICAgICAgICAgLy9tb2RlOiBcInJhbmdlXCIsXG4gICAgICAgICAgICAgICAgLy9zdGF0aWM6IHRydWUsXG4gICAgICAgICAgICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9uIChzZWxlY3RlZERhdGVzLCBkYXRlU3RyLCBpbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgICAgICBtZS5lbmFibGVfYXBwbHkgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBtZS53cm9uZ19kYXRlID0gbWUuZmxhdF9iZWdpbl9kYXRlLnNlbGVjdGVkRGF0ZXNbMF0uZ2V0VGltZSgpID4gbWUuZmxhdF9lbmRfZGF0ZS5zZWxlY3RlZERhdGVzWzBdLmdldFRpbWUoKTtcbiAgICAgICAgICAgICAgICAgICAgbWUud3JvbmdfbWluX2ludGVydmFsID0gbWUubWluX3RpbWVfaW50ZXJ2YWxfaWQgJiYgbWUuZ2V0X3V0Y19zZWNvbmRzKChtZS5mbGF0X2VuZF9kYXRlLnNlbGVjdGVkRGF0ZXNbMF0uZ2V0VGltZSgpIC0gbWUuZmxhdF9iZWdpbl9kYXRlLnNlbGVjdGVkRGF0ZXNbMF0uZ2V0VGltZSgpKSA8IG50b3BuZ191dGlsaXR5LmdldF90aW1lZnJhbWVfZnJvbV90aW1lZnJhbWVfaWQobWUubWluX3RpbWVfaW50ZXJ2YWxfaWQpKTtcbiAgICAgICAgICAgICAgICAgICAgLy9tZS5hW2RhdGFdID0gZDtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuZmxhdF9iZWdpbl9kYXRlID0gZl9zZXRfcGlja2VyKFwiYmVnaW4tZGF0ZVwiLCBcImJlZ2luX2RhdGVcIik7XG4gICAgICAgIHRoaXMuZmxhdF9lbmRfZGF0ZSA9IGZfc2V0X3BpY2tlcihcImVuZC1kYXRlXCIsIFwiZW5kX2RhdGVcIik7XG4gICAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9ldmVudF9jaGFuZ2UodGhpcy4kcHJvcHMuaWQsIG50b3BuZ19ldmVudHMuRVBPQ0hfQ0hBTkdFLCAobmV3X3N0YXR1cykgPT4gdGhpcy5vbl9zdGF0dXNfdXBkYXRlZChuZXdfc3RhdHVzKSwgdHJ1ZSk7XG5cbiAgICAgICAgLy8gbm90aWZpZXMgdGhhdCBjb21wb25lbnQgaXMgcmVhZHlcbiAgICAgICAgLy9jb25zb2xlLmxvZyh0aGlzLiRwcm9wc1tcImlkXCJdKTtcbiAgICAgICAgbnRvcG5nX3N5bmMucmVhZHkodGhpcy4kcHJvcHNbXCJpZFwiXSk7XG4gICAgICAgIGlmICh0aGlzLmVuYWJsZV9yZWZyZXNoKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0X3JlZnJlc2goKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiogTWV0aG9kcyBvZiB0aGUgY29tcG9uZW50LiAqL1xuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgc3RhcnRfcmVmcmVzaDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5yZWZyZXNoX2ludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IHRoaXMuc2VsZWN0ZWRfdGltZV9vcHRpb24/LnZhbHVlO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmVuYWJsZV9yZWZyZXNoICYmIHZhbHVlICE9IG51bGwgJiYgdmFsdWUgIT0gXCJjdXN0b21cIikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZV9mcm9tX2ludGVydmFsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFuZ2Vfc2VsZWN0X3RpbWUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgdGhpcy5yZWZyZXNoX2ludGVydmFsX3NlY29uZHMgKiAxMDAwKTtcbiAgICAgICAgICAgIC8vIH0sIDEwKiAxMDAwKTtcbiAgICAgICAgfSxcbiAgICAgICAgdXRjX3NfdG9fc2VydmVyX2RhdGU6IGZ1bmN0aW9uICh1dGNfc2Vjb25kcykge1xuICAgICAgICAgICAgbGV0IHV0YyA9IHV0Y19zZWNvbmRzICogMTAwMDtcbiAgICAgICAgICAgIGxldCBkX2xvY2FsID0gbmV3IERhdGUodXRjKTtcbiAgICAgICAgICAgIGxldCBsb2NhbF9vZmZzZXQgPSBkX2xvY2FsLmdldFRpbWV6b25lT2Zmc2V0KCk7XG4gICAgICAgICAgICBsZXQgc2VydmVyX29mZnNldCA9IG1vbWVudC50eih1dGMsIG50b3Bfem9uZWluZm8pLl9vZmZzZXQ7XG4gICAgICAgICAgICBsZXQgb2Zmc2V0X21pbnV0ZXMgPSBzZXJ2ZXJfb2Zmc2V0ICsgbG9jYWxfb2Zmc2V0O1xuICAgICAgICAgICAgbGV0IG9mZnNldF9tcyA9IG9mZnNldF9taW51dGVzICogMTAwMCAqIDYwO1xuICAgICAgICAgICAgdmFyIGRfc2VydmVyID0gbmV3IERhdGUodXRjICsgb2Zmc2V0X21zKTtcbiAgICAgICAgICAgIHJldHVybiBkX3NlcnZlcjtcbiAgICAgICAgfSxcbiAgICAgICAgc2VydmVyX2RhdGVfdG9fZGF0ZTogZnVuY3Rpb24gKGRhdGUsIGZvcm1hdCkge1xuICAgICAgICAgICAgbGV0IHV0YyA9IGRhdGUuZ2V0VGltZSgpO1xuICAgICAgICAgICAgbGV0IGxvY2FsX29mZnNldCA9IGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgICAgICAgICAgIGxldCBzZXJ2ZXJfb2Zmc2V0ID0gbW9tZW50LnR6KHV0YywgbnRvcF96b25laW5mbykuX29mZnNldDtcbiAgICAgICAgICAgIGxldCBvZmZzZXRfbWludXRlcyA9IHNlcnZlcl9vZmZzZXQgKyBsb2NhbF9vZmZzZXQ7XG4gICAgICAgICAgICBsZXQgb2Zmc2V0X21zID0gb2Zmc2V0X21pbnV0ZXMgKiAxMDAwICogNjA7XG4gICAgICAgICAgICB2YXIgZF9sb2NhbCA9IG5ldyBEYXRlKHV0YyAtIG9mZnNldF9tcyk7XG4gICAgICAgICAgICByZXR1cm4gZF9sb2NhbDtcbiAgICAgICAgfSxcbiAgICAgICAgb25fc3RhdHVzX3VwZGF0ZWQ6IGZ1bmN0aW9uIChzdGF0dXMpIHtcbiAgICAgICAgICAgIGxldCBlbmRfZGF0ZV90aW1lX3V0YyA9IERhdGUubm93KCk7XG4gICAgICAgICAgICAvLyBkZWZhdWx0IGJlZ2luIGRhdGUgdGltZSBub3cgLSAzMCBtaW51dGVzXG4gICAgICAgICAgICBsZXQgYmVnaW5fZGF0ZV90aW1lX3V0YyA9IGVuZF9kYXRlX3RpbWVfdXRjIC0gMzAgKiA2MCAqIDEwMDA7XG4gICAgICAgICAgICBpZiAoc3RhdHVzLmVwb2NoX2VuZCAhPSBudWxsICYmIHN0YXR1cy5lcG9jaF9iZWdpbiAhPSBudWxsXG4gICAgICAgICAgICAgICAgJiYgTnVtYmVyLnBhcnNlSW50KHN0YXR1cy5lcG9jaF9lbmQpID4gTnVtYmVyLnBhcnNlSW50KHN0YXR1cy5lcG9jaF9iZWdpbikpIHtcbiAgICAgICAgICAgICAgICBzdGF0dXMuZXBvY2hfYmVnaW4gPSBOdW1iZXIucGFyc2VJbnQoc3RhdHVzLmVwb2NoX2JlZ2luKTtcbiAgICAgICAgICAgICAgICBzdGF0dXMuZXBvY2hfZW5kID0gTnVtYmVyLnBhcnNlSW50KHN0YXR1cy5lcG9jaF9lbmQpO1xuICAgICAgICAgICAgICAgIGVuZF9kYXRlX3RpbWVfdXRjID0gc3RhdHVzLmVwb2NoX2VuZCAqIDEwMDA7XG4gICAgICAgICAgICAgICAgYmVnaW5fZGF0ZV90aW1lX3V0YyA9IHN0YXR1cy5lcG9jaF9iZWdpbiAqIDEwMDA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0YXR1cy5lcG9jaF9lbmQgPSB0aGlzLmdldF91dGNfc2Vjb25kcyhlbmRfZGF0ZV90aW1lX3V0Yyk7XG4gICAgICAgICAgICAgICAgc3RhdHVzLmVwb2NoX2JlZ2luID0gdGhpcy5nZXRfdXRjX3NlY29uZHMoYmVnaW5fZGF0ZV90aW1lX3V0Yyk7XG4gICAgICAgICAgICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLmFkZF9vYmpfdG9fdXJsKHN0YXR1cyk7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0X2Vwb2NoX2NoYW5nZShzdGF0dXMsIHRoaXMuJHByb3BzLmlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRoaXMuZmxhdF9iZWdpbl9kYXRlLnNldERhdGUobmV3IERhdGUoc3RhdHVzLmVwb2NoX2JlZ2luICogMTAwMCkpO1xuICAgICAgICAgICAgLy8gdGhpcy5mbGF0X2VuZF9kYXRlLnNldERhdGUobmV3IERhdGUoc3RhdHVzLmVwb2NoX2VuZCAqIDEwMDApKTtcbiAgICAgICAgICAgIHRoaXMuZmxhdF9iZWdpbl9kYXRlLnNldERhdGUodGhpcy51dGNfc190b19zZXJ2ZXJfZGF0ZShzdGF0dXMuZXBvY2hfYmVnaW4pKTtcbiAgICAgICAgICAgIHRoaXMuZmxhdF9lbmRfZGF0ZS5zZXREYXRlKHRoaXMudXRjX3NfdG9fc2VydmVyX2RhdGUoc3RhdHVzLmVwb2NoX2VuZCkpO1xuICAgICAgICAgICAgLy8gdGhpcy5zZXRfZGF0ZV90aW1lKFwiYmVnaW4tZGF0ZVwiLCBiZWdpbl9kYXRlX3RpbWVfdXRjLCBmYWxzZSk7XG4gICAgICAgICAgICAvLyB0aGlzLnNldF9kYXRlX3RpbWUoXCJiZWdpbi10aW1lXCIsIGJlZ2luX2RhdGVfdGltZV91dGMsIHRydWUpO1xuICAgICAgICAgICAgLy8gdGhpcy5zZXRfZGF0ZV90aW1lKFwiZW5kLWRhdGVcIiwgZW5kX2RhdGVfdGltZV91dGMsIGZhbHNlKTtcbiAgICAgICAgICAgIC8vIHRoaXMuc2V0X2RhdGVfdGltZShcImVuZC10aW1lXCIsIGVuZF9kYXRlX3RpbWVfdXRjLCB0cnVlKTtcbiAgICAgICAgICAgIHRoaXMuc2V0X3NlbGVjdF90aW1lX3ZhbHVlKGJlZ2luX2RhdGVfdGltZV91dGMsIGVuZF9kYXRlX3RpbWVfdXRjKTtcbiAgICAgICAgICAgIHRoaXMuZXBvY2hfc3RhdHVzID0geyBlcG9jaF9iZWdpbjogc3RhdHVzLmVwb2NoX2JlZ2luLCBlcG9jaF9lbmQ6IHN0YXR1cy5lcG9jaF9lbmQgfTtcbiAgICAgICAgICAgIGlmICh0aGlzLnVwZGF0ZV9mcm9tX2ludGVydmFsID09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRfc3RhdHVzX2luX2hpc3RvcnkodGhpcy5lcG9jaF9zdGF0dXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5lbmFibGVfYXBwbHkgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlX2Zyb21faW50ZXJ2YWwgPSBmYWxzZTtcbiAgICAgICAgICAgIG50b3BuZ191cmxfbWFuYWdlci5hZGRfb2JqX3RvX3VybCh0aGlzLmVwb2NoX3N0YXR1cyk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldF9zZWxlY3RfdGltZV92YWx1ZTogZnVuY3Rpb24gKGJlZ2luX3V0YywgZW5kX3V0Yykge1xuICAgICAgICAgICAgY29uc3QgdGltZWZyYW1lc19kaWN0ID0gdGhpcy5nZXRfdGltZWZyYW1lc19hdmFpbGFibGUoKTtcbiAgICAgICAgICAgIGNvbnN0IHRvbGVyYW5jZSA9IDYwO1xuICAgICAgICAgICAgbGV0IG5vdyA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKERhdGUubm93KCkpO1xuXHQgICAgaWYgKHRoaXMucm91bmRfdGltZSA9PSB0cnVlICYmIHRoaXMubWluX3RpbWVfaW50ZXJ2YWxfaWQgIT0gbnVsbCkge1xuXHRcdG5vdyA9IHRoaXMucm91bmRfdGltZV9ieV9taW5faW50ZXJ2YWwobm93KVxuXHQgICAgfVxuICAgICAgICAgICAgY29uc3QgZW5kX3V0Y19zID0gdGhpcy5nZXRfdXRjX3NlY29uZHMoZW5kX3V0Yyk7XG4gICAgICAgICAgICBjb25zdCBiZWdpbl91dGNfcyA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKGJlZ2luX3V0Yyk7XG5cdCAgICBcbiAgICAgICAgICAgIGlmICh0aGlzLmlzX2JldHdlZW4oZW5kX3V0Y19zLCBub3csIHRvbGVyYW5jZSkpIHtcblx0XHR0aGlzLnNlbGVjdF90aW1lX3ZhbHVlID0gbnVsbDtcblx0XHRmb3IgKGxldCB0aW1lX2lkIGluIHRpbWVmcmFtZXNfZGljdCkge1xuXHRcdCAgICBpZiAodGhpcy5pc19iZXR3ZWVuKGJlZ2luX3V0Y19zLCBub3cgLSB0aW1lZnJhbWVzX2RpY3RbdGltZV9pZF0sIHRvbGVyYW5jZSkpIHtcblx0XHRcdHRoaXMuc2VsZWN0X3RpbWVfdmFsdWUgPSB0aW1lX2lkO1xuXHRcdCAgICB9XG5cdFx0fVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdF90aW1lX3ZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RfdGltZV92YWx1ZSA9IFwiY3VzdG9tXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdF90aW1lX3ZhbHVlID0gXCJjdXN0b21cIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy50aW1lX3ByZXNldF9saXN0X2ZpbHRlcmVkLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5jdXJyZW50bHlfYWN0aXZlID0gZmFsc2VcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC52YWx1ZSA9PSB0aGlzLnNlbGVjdF90aW1lX3ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRfdGltZV9vcHRpb24gPSBlbGVtZW50O1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmN1cnJlbnRseV9hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBhcHBseTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gbGV0IGRhdGVfYmVnaW4gPSB0aGlzLiRyZWZzW1wiYmVnaW4tZGF0ZVwiXS52YWx1ZUFzRGF0ZTtcbiAgICAgICAgICAgIC8vIGxldCBkX3RpbWVfYmVnaW4gPSB0aGlzLiRyZWZzW1wiYmVnaW4tdGltZVwiXS52YWx1ZUFzRGF0ZTtcbiAgICAgICAgICAgIC8vIGRhdGVfYmVnaW4uc2V0SG91cnMoZF90aW1lX2JlZ2luLmdldEhvdXJzKCkpO1xuICAgICAgICAgICAgLy8gZGF0ZV9iZWdpbi5zZXRNaW51dGVzKGRfdGltZV9iZWdpbi5nZXRNaW51dGVzKCkgKyBkX3RpbWVfYmVnaW4uZ2V0VGltZXpvbmVPZmZzZXQoKSk7XG4gICAgICAgICAgICAvLyBkYXRlX2JlZ2luLnNldFNlY29uZHMoZF90aW1lX2JlZ2luLmdldFNlY29uZHMoKSk7XG5cbiAgICAgICAgICAgIC8vIGxldCBkYXRlX2VuZCA9IHRoaXMuJHJlZnNbXCJlbmQtZGF0ZVwiXS52YWx1ZUFzRGF0ZTtcbiAgICAgICAgICAgIC8vIGxldCBkX3RpbWVfZW5kID0gdGhpcy4kcmVmc1tcImVuZC10aW1lXCJdLnZhbHVlQXNEYXRlO1xuICAgICAgICAgICAgLy8gZGF0ZV9lbmQuc2V0SG91cnMoZF90aW1lX2VuZC5nZXRIb3VycygpKTtcbiAgICAgICAgICAgIC8vIGRhdGVfZW5kLnNldE1pbnV0ZXMoZF90aW1lX2VuZC5nZXRNaW51dGVzKCkgKyBkX3RpbWVfZW5kLmdldFRpbWV6b25lT2Zmc2V0KCkpO1xuICAgICAgICAgICAgLy8gZGF0ZV9lbmQuc2V0U2Vjb25kcyhkX3RpbWVfZW5kLmdldFNlY29uZHMoKSk7XG4gICAgICAgICAgICAvLyBsZXQgZXBvY2hfYmVnaW4gPSB0aGlzLmdldF91dGNfc2Vjb25kcyhkYXRlX2JlZ2luLnZhbHVlT2YoKSk7XG4gICAgICAgICAgICAvLyBsZXQgZXBvY2hfZW5kID0gdGhpcy5nZXRfdXRjX3NlY29uZHMoZGF0ZV9lbmQudmFsdWVPZigpKTtcbiAgICAgICAgICAgIGxldCBub3dfcyA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKERhdGUubm93KCkpO1xuICAgICAgICAgICAgbGV0IGJlZ2luX2RhdGUgPSB0aGlzLnNlcnZlcl9kYXRlX3RvX2RhdGUodGhpcy5mbGF0X2JlZ2luX2RhdGUuc2VsZWN0ZWREYXRlc1swXSk7XG4gICAgICAgICAgICBsZXQgZXBvY2hfYmVnaW4gPSB0aGlzLmdldF91dGNfc2Vjb25kcyhiZWdpbl9kYXRlLmdldFRpbWUoKSk7XG4gICAgICAgICAgICBsZXQgZW5kX2RhdGUgPSB0aGlzLnNlcnZlcl9kYXRlX3RvX2RhdGUodGhpcy5mbGF0X2VuZF9kYXRlLnNlbGVjdGVkRGF0ZXNbMF0pO1xuICAgICAgICAgICAgbGV0IGVwb2NoX2VuZCA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKGVuZF9kYXRlLmdldFRpbWUoKSk7XG4gICAgICAgICAgICBpZiAoZXBvY2hfZW5kID4gbm93X3MpIHtcbiAgICAgICAgICAgICAgICBlcG9jaF9lbmQgPSBub3dfcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBzdGF0dXMgPSB7IGVwb2NoX2JlZ2luLCBlcG9jaF9lbmQgfTtcbiAgICAgICAgICAgIHRoaXMuZW1pdF9lcG9jaF9jaGFuZ2Uoc3RhdHVzKTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gc2V0X2RhdGVfdGltZTogZnVuY3Rpb24ocmVmX25hbWUsIHV0Y190cywgaXNfdGltZSkge1xuICAgICAgICAvLyAgICAgdXRjX3RzID0gdGhpcy5nZXRfdXRjX3NlY29uZHModXRjX3RzKSAqIDEwMDA7ICAgICAgICBcbiAgICAgICAgLy8gICAgIGxldCBkYXRlX3RpbWUgPSBuZXcgRGF0ZSh1dGNfdHMpO1xuICAgICAgICAvLyAgICAgZGF0ZV90aW1lLnNldE1pbnV0ZXMoZGF0ZV90aW1lLmdldE1pbnV0ZXMoKSAtIGRhdGVfdGltZS5nZXRUaW1lem9uZU9mZnNldCgpKTtcbiAgICAgICAgLy8gICAgIGlmIChpc190aW1lKSB7XG4gICAgICAgIC8vIFx0dGhpcy4kcmVmc1tyZWZfbmFtZV0udmFsdWUgPSBkYXRlX3RpbWUudG9JU09TdHJpbmcoKS5zdWJzdHJpbmcoMTEsMTYpO1xuICAgICAgICAvLyAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gXHR0aGlzLiRyZWZzW3JlZl9uYW1lXS52YWx1ZSA9IGRhdGVfdGltZS50b0lTT1N0cmluZygpLnN1YnN0cmluZygwLDEwKTtcbiAgICAgICAgLy8gICAgIH1cbiAgICAgICAgLy8gfSxcbiAgICAgICAgY2hhbmdlX3NlbGVjdF90aW1lOiBmdW5jdGlvbiAocmVmcmVzaF9kYXRhKSB7XG4gICAgICAgICAgICBsZXQgc192YWx1ZXMgPSB0aGlzLmdldF90aW1lZnJhbWVzX2F2YWlsYWJsZSgpO1xuICAgICAgICAgICAgbGV0IGludGVydmFsX3MgPSBzX3ZhbHVlc1t0aGlzLnNlbGVjdGVkX3RpbWVfb3B0aW9uLnZhbHVlXTtcbiAgICAgICAgICAgIGxldCBlcG9jaF9lbmQgPSB0aGlzLmdldF91dGNfc2Vjb25kcyhEYXRlLm5vdygpKTtcbiAgICAgICAgICAgIGxldCBlcG9jaF9iZWdpbiA9IGVwb2NoX2VuZCAtIGludGVydmFsX3M7XG4gICAgICAgICAgICBsZXQgc3RhdHVzID0geyBlcG9jaF9iZWdpbjogZXBvY2hfYmVnaW4sIGVwb2NoX2VuZDogZXBvY2hfZW5kLCByZWZyZXNoX2RhdGEgfTtcbiAgICAgICAgICAgIHRoaXMuZW1pdF9lcG9jaF9jaGFuZ2Uoc3RhdHVzKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0X3RpbWVmcmFtZXNfYXZhaWxhYmxlOiBmdW5jdGlvbiAoKSB7XG5cdCAgICBjb25zdCB0aW1lZnJhbWVzX2RpY3QgPSBudG9wbmdfdXRpbGl0eS5nZXRfdGltZWZyYW1lc19kaWN0KCk7XG4gICAgICAgICAgICBjb25zdCB0aW1lZnJhbWVzX2lkcyA9IHRoaXMudGltZV9wcmVzZXRfbGlzdC5tYXAoKHRzKSA9PiB0cy52YWx1ZSk7XG5cdCAgICBsZXQgdGltZWZyYW1lc19hdmFpbGFibGUgPSB7fTtcblx0ICAgIHRpbWVmcmFtZXNfaWRzLmZvckVhY2goKHRmX2lkKSA9PiB7XG5cdFx0dGltZWZyYW1lc19hdmFpbGFibGVbdGZfaWRdID0gdGltZWZyYW1lc19kaWN0W3RmX2lkXTtcblx0ICAgIH0pO1xuXHQgICAgcmV0dXJuIHRpbWVmcmFtZXNfYXZhaWxhYmxlO1xuICAgICAgICB9LFxuICAgICAgICBnZXRfdXRjX3NlY29uZHM6IGZ1bmN0aW9uICh1dGNfbXMpIHtcblx0ICAgIHJldHVybiBudG9wbmdfdXRpbGl0eS5nZXRfdXRjX3NlY29uZHModXRjX21zKTtcbiAgICAgICAgfSxcbiAgICAgICAgaXNfYmV0d2VlbjogZnVuY3Rpb24gKHgsIHksIHRvbGVyYW5jZSkge1xuICAgICAgICAgICAgcmV0dXJuIHggPj0geSAtIHRvbGVyYW5jZSAmJiB4IDw9IHk7XG4gICAgICAgIH0sXG4gICAgICAgIHpvb206IGZ1bmN0aW9uIChzY2FsZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZXBvY2hfc3RhdHVzID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICBsZXQgaW50ZXJ2YWwgPSAodGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kIC0gdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfYmVnaW4pIC8gc2NhbGU7XG4gICAgICAgICAgICBsZXQgY2VudGVyID0gKHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCAvIDIgKyB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9iZWdpbiAvIDIpO1xuICAgICAgICAgICAgdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfYmVnaW4gPSBjZW50ZXIgLSBpbnRlcnZhbCAvIDI7XG4gICAgICAgICAgICB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9lbmQgPSBjZW50ZXIgKyBpbnRlcnZhbCAvIDI7XG4gICAgICAgICAgICBsZXQgbm93ID0gdGhpcy5nZXRfdXRjX3NlY29uZHMoRGF0ZS5ub3coKSk7XG4gICAgICAgICAgICBpZiAodGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kID4gbm93KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kID0gbm93O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kID0gTnVtYmVyLnBhcnNlSW50KHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCk7XG4gICAgICAgICAgICB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9iZWdpbiA9IE51bWJlci5wYXJzZUludCh0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9iZWdpbik7XG4gICAgICAgICAgICBpZiAodGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfYmVnaW4gPT0gdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfYmVnaW4gLT0gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZW1pdF9lcG9jaF9jaGFuZ2UodGhpcy5lcG9jaF9zdGF0dXMpO1xuICAgICAgICB9LFxuICAgICAgICBqdW1wX3RpbWVfYmFjazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZXBvY2hfc3RhdHVzID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICBjb25zdCBtaW4gPSA2MDtcbiAgICAgICAgICAgIHRoaXMuZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luIC09ICgzMCAqIG1pbik7XG4gICAgICAgICAgICB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9lbmQgLT0gKDMwICogbWluKTtcbiAgICAgICAgICAgIHRoaXMuZW1pdF9lcG9jaF9jaGFuZ2UodGhpcy5lcG9jaF9zdGF0dXMpO1xuICAgICAgICB9LFxuICAgICAgICBqdW1wX3RpbWVfYWhlYWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmVwb2NoX3N0YXR1cyA9PSBudWxsKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgY29uc3QgbWluID0gNjA7XG4gICAgICAgICAgICBsZXQgcHJldmlvdXNfZW5kID0gdGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kO1xuICAgICAgICAgICAgbGV0IG5vdyA9IHRoaXMuZ2V0X3V0Y19zZWNvbmRzKERhdGUubm93KCkpO1xuXG4gICAgICAgICAgICB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9lbmQgKz0gKDMwICogbWluKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9lbmQgPiBub3cpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9lbmQgPSBub3c7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmVwb2NoX3N0YXR1cy5lcG9jaF9iZWdpbiArPSAodGhpcy5lcG9jaF9zdGF0dXMuZXBvY2hfZW5kIC0gcHJldmlvdXNfZW5kKTtcbiAgICAgICAgICAgIHRoaXMuZW1pdF9lcG9jaF9jaGFuZ2UodGhpcy5lcG9jaF9zdGF0dXMpO1xuICAgICAgICB9LFxuICAgICAgICBlbWl0X2Vwb2NoX2NoYW5nZTogZnVuY3Rpb24gKGVwb2NoX3N0YXR1cywgaWQsIGVtaXRfb25seV9nbG9iYWxfZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChlcG9jaF9zdGF0dXMuZXBvY2hfZW5kID09IG51bGwgfHwgZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luID09IG51bGwpIHsgcmV0dXJuOyB9O1xuICAgICAgICAgICAgdGhpcy53cm9uZ19kYXRlID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoZXBvY2hfc3RhdHVzLmVwb2NoX2JlZ2luID4gZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCkge1xuICAgICAgICAgICAgICAgIHRoaXMud3JvbmdfZGF0ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXHQgICAgaWYgKHRoaXMubWluX3RpbWVfaW50ZXJ2YWxfaWQgJiYgdGhpcy5yb3VuZF90aW1lID09IHRydWUpIHtcblx0XHRlcG9jaF9zdGF0dXMuZXBvY2hfYmVnaW4gPSB0aGlzLnJvdW5kX3RpbWVfYnlfbWluX2ludGVydmFsKGVwb2NoX3N0YXR1cy5lcG9jaF9iZWdpbik7XG5cdFx0ZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCA9IHRoaXMucm91bmRfdGltZV9ieV9taW5faW50ZXJ2YWwoZXBvY2hfc3RhdHVzLmVwb2NoX2VuZCk7XG5cdCAgICB9XG5cbiAgICAgICAgICAgIGlmIChpZCAhPSB0aGlzLmlkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbl9zdGF0dXNfdXBkYXRlZChlcG9jaF9zdGF0dXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfZXZlbnQobnRvcG5nX2V2ZW50cy5FUE9DSF9DSEFOR0UsIGVwb2NoX3N0YXR1cywgdGhpcy5pZCk7XG5cdCAgICBpZiAoZW1pdF9vbmx5X2dsb2JhbF9ldmVudCkge1xuXHRcdHJldHVybjtcblx0ICAgIH1cbiAgICAgICAgICAgIHRoaXMuJGVtaXQoXCJlcG9jaF9jaGFuZ2VcIiwgZXBvY2hfc3RhdHVzKTtcbiAgICAgICAgfSxcblx0cm91bmRfdGltZV9ieV9taW5faW50ZXJ2YWw6IGZ1bmN0aW9uKHRzKSB7XG5cdCAgICByZXR1cm4gbnRvcG5nX3V0aWxpdHkucm91bmRfdGltZV9ieV90aW1lZnJhbWVfaWQodHMsIHRoaXMubWluX3RpbWVfaW50ZXJ2YWxfaWQpO1xuXHR9LFxuICAgICAgICBhZGRfc3RhdHVzX2luX2hpc3Rvcnk6IGZ1bmN0aW9uIChlcG9jaF9zdGF0dXMpIHtcbiAgICAgICAgICAgIHRoaXMuaGlzdG9yeV9sYXN0X3N0YXR1cyA9IHRoaXMuaGlzdG9yeVt0aGlzLmhpc3RvcnkubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICBpZiAodGhpcy5oaXN0b3J5Lmxlbmd0aCA+IDUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmhpc3Rvcnkuc2hpZnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuaGlzdG9yeS5wdXNoKGVwb2NoX3N0YXR1cyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYXBwbHlfc3RhdHVzX2J5X2hpc3Rvcnk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmhpc3RvcnlfbGFzdF9zdGF0dXMgPT0gbnVsbCkgeyByZXR1cm47IH1cbiAgICAgICAgICAgIHRoaXMuaGlzdG9yeS5wb3AoKTtcbiAgICAgICAgICAgIHRoaXMuaGlzdG9yeS5wb3AoKTtcbiAgICAgICAgICAgIHRoaXMuZW1pdF9lcG9jaF9jaGFuZ2UodGhpcy5oaXN0b3J5X2xhc3Rfc3RhdHVzKTtcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIC8qKlxuICAgICAgIFByaXZhdGUgZGF0ZSBvZiB2dWUgY29tcG9uZW50LlxuICAgICovXG4gICAgZGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuICAgICAgICAgICAgLy9zdGF0dXNfaWQ6IFwiZGF0ZS10aW1lLXJhbmdlLXBpY2tlclwiICsgdGhpcy4kcHJvcHMuaWQsXG4gICAgICAgICAgICBlcG9jaF9zdGF0dXM6IG51bGwsXG4gICAgICAgICAgICByZWZyZXNoX2ludGVydmFsOiBudWxsLFxuICAgICAgICAgICAgcmVmcmVzaF9pbnRlcnZhbF9zZWNvbmRzOiA2MCxcbiAgICAgICAgICAgIHVwZGF0ZV9mcm9tX2ludGVydmFsOiBmYWxzZSxcbiAgICAgICAgICAgIGhpc3Rvcnk6IFtdLFxuICAgICAgICAgICAgaGlzdG9yeV9sYXN0X3N0YXR1czogbnVsbCxcbiAgICAgICAgICAgIGVuYWJsZV9hcHBseTogZmFsc2UsXG4gICAgICAgICAgICBzZWxlY3RfdGltZV92YWx1ZTogXCI1X21pblwiLFxuICAgICAgICAgICAgc2VsZWN0ZWRfdGltZV9vcHRpb246IHsgdmFsdWU6IFwiNV9taW5cIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMuNV9taW4nKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfSxcbiAgICAgICAgICAgIHdyb25nX2RhdGU6IGZhbHNlLFxuICAgICAgICAgICAgd3JvbmdfbWluX2ludGVydmFsOiBmYWxzZSxcbiAgICAgICAgICAgIGZsYXRfYmVnaW5fZGF0ZTogbnVsbCxcbiAgICAgICAgICAgIGZsYXRfZW5kX2RhdGU6IG51bGwsXG4gICAgICAgICAgICB0aW1lX3ByZXNldF9saXN0OiBbXG4gICAgICAgICAgICAgICAgeyB2YWx1ZTogXCI1X21pblwiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy41X21pbicpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgICAgICAgICAgICAgIHsgdmFsdWU6IFwiMTBfbWluXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLjEwX21pbicpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgICAgICAgICAgICAgIHsgdmFsdWU6IFwiMzBfbWluXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLjMwX21pbicpLCBjdXJyZW50bHlfYWN0aXZlOiB0cnVlIH0sXG4gICAgICAgICAgICAgICAgeyB2YWx1ZTogXCJob3VyXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLmhvdXInKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfSxcbiAgICAgICAgICAgICAgICB7IHZhbHVlOiBcIjJfaG91cnNcIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMuMl9ob3VycycpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgICAgICAgICAgICAgIHsgdmFsdWU6IFwiNl9ob3Vyc1wiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy42X2hvdXJzJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlIH0sXG4gICAgICAgICAgICAgICAgeyB2YWx1ZTogXCIxMl9ob3Vyc1wiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy4xMl9ob3VycycpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgICAgICAgICAgICAgIHsgdmFsdWU6IFwiZGF5XCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLmRheScpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgICAgICAgICAgICAgIHsgdmFsdWU6IFwid2Vla1wiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy53ZWVrJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlIH0sXG4gICAgICAgICAgICAgICAgeyB2YWx1ZTogXCJtb250aFwiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy5tb250aCcpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgICAgICAgICAgICAgIHsgdmFsdWU6IFwieWVhclwiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy55ZWFyJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlIH0sXG4gICAgICAgICAgICAgICAgeyB2YWx1ZTogXCJjdXN0b21cIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMuY3VzdG9tJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlLCBkaXNhYmxlZDogdHJ1ZSwgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB0aW1lX3ByZXNldF9saXN0X2ZpbHRlcmVkOiBbXSxcbiAgICAgICAgfTtcbiAgICB9LFxufVxuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbi5kYXRlX3RpbWVfaW5wdXQge1xuICAgIHdpZHRoOiAxMC41cmVtO1xuICAgIG1heC13aWR0aDogMTAuNXJlbTtcbiAgICBtaW4td2lkdGg6IDEwLjVyZW07XG59XG48L3N0eWxlPlxuIiwiZnVuY3Rpb24gc3R5bGVJbmplY3QoY3NzLCByZWYpIHtcbiAgaWYgKCByZWYgPT09IHZvaWQgMCApIHJlZiA9IHt9O1xuICB2YXIgaW5zZXJ0QXQgPSByZWYuaW5zZXJ0QXQ7XG5cbiAgaWYgKCFjc3MgfHwgdHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykgeyByZXR1cm47IH1cblxuICB2YXIgaGVhZCA9IGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXTtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgc3R5bGUudHlwZSA9ICd0ZXh0L2Nzcyc7XG5cbiAgaWYgKGluc2VydEF0ID09PSAndG9wJykge1xuICAgIGlmIChoZWFkLmZpcnN0Q2hpbGQpIHtcbiAgICAgIGhlYWQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBoZWFkLmZpcnN0Q2hpbGQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBoZWFkLmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH1cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBzdHlsZUluamVjdDtcbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG48ZGl2IEBzdWJtaXQucHJldmVudD1cInByZXZlbnRFbnRlclwiIGNsYXNzPVwibW9kYWwgZmFkZVwiIHJlZj1cIm1vZGFsX2lkXCIgdGFiaW5kZXg9XCItMVwiIHJvbGU9XCJkaWFsb2dcIiBhcmlhLWxhYmVsbGVkYnk9XCJkdC1hZGQtZmlsdGVyLW1vZGFsLXRpdGxlXCJcbiAgICAgYXJpYS1oaWRkZW49XCJ0cnVlXCI+XG4gIDxkaXYgY2xhc3M9XCJtb2RhbC1kaWFsb2cgbW9kYWwtZGlhbG9nLWNlbnRlcmVkIG1vZGFsLWxnXCIgcm9sZT1cImRvY3VtZW50XCI+XG4gICAgPGRpdiBjbGFzcz1cIm1vZGFsLWNvbnRlbnRcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj5cbiAgICAgICAgPGg1IGNsYXNzPVwibW9kYWwtdGl0bGVcIj5cblx0ICA8c2xvdCBuYW1lPVwidGl0bGVcIj48L3Nsb3Q+XG5cdDwvaDU+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1jbG9zZVwiPlxuICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuLWNsb3NlXCIgZGF0YS1icy1kaXNtaXNzPVwibW9kYWxcIiBhcmlhLWxhYmVsPVwiQ2xvc2VcIj5cbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+XG5cdDxzbG90IG5hbWU9XCJib2R5XCI+PC9zbG90PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJtci1hdXRvXCI+XG4gICAgICAgIDwvZGl2PlxuXHQ8c2xvdCBuYW1lPVwiZm9vdGVyXCI+PC9zbG90PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mbyB0ZXN0LWZlZWRiYWNrIHctMTAwXCIgc3R5bGU9XCJkaXNwbGF5OiBub25lO1wiPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCB9IGZyb20gJ3Z1ZSc7XG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICAgIGNvbXBvbmVudHM6IHtcbiAgICB9LFxuICAgIHByb3BzOiB7XG5cdGlkOiBTdHJpbmcsXG4gICAgfSxcbiAgICBlbWl0czogW1wiaGlkZGVuXCIsIFwic2hvd2VkXCIsIFwiY2xvc2VNb2RhbFwiLCBcIm9wZW5Nb2RhbFwiXSxcbiAgICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBvZiB0aGUgY29tcG9uZW50IGNhbGxlZCwgaXQncyBjYWxsZWQgYmVmb3JlIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gICAgY3JlYXRlZCgpIHtcbiAgICB9LFxuICAgIGRhdGEoKSB7XG5cdHJldHVybiB7XG5cdCAgICAvL2kxOG46ICh0KSA9PiBpMThuKHQpLFxuXHR9O1xuICAgIH0sXG4gICAgLyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2QgY2FsbGVkIGFmdGVyIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gICAgbW91bnRlZCgpIHtcblx0bGV0IG1lID0gdGhpcztcblx0JCh0aGlzLiRyZWZzW1wibW9kYWxfaWRcIl0pLm9uKCdzaG93bi5icy5tb2RhbCcsIGZ1bmN0aW9uIChlKSB7XG5cdCAgICBtZS4kZW1pdChcInNob3dlZFwiKTtcblx0fSk7XG5cdCQodGhpcy4kcmVmc1tcIm1vZGFsX2lkXCJdKS5vbignaGlkZGVuLmJzLm1vZGFsJywgZnVuY3Rpb24gKGUpIHtcblx0ICAgIG1lLiRlbWl0KFwiaGlkZGVuXCIpO1xuXHR9KTtcblx0Ly8gbm90aWZpZXMgdGhhdCBjb21wb25lbnQgaXMgcmVhZHlcblx0bnRvcG5nX3N5bmMucmVhZHkodGhpcy4kcHJvcHNbXCJpZFwiXSk7XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG5cdHNob3c6IGZ1bmN0aW9uKCkge1xuXHQgICAgJCh0aGlzLiRyZWZzW1wibW9kYWxfaWRcIl0pLm1vZGFsKFwic2hvd1wiKTtcbiAgICAgIC8vIGVtaXQgb3Blbm1vZGFsIHRvIGRpc2FibGUgdGhlIGF1dG9yZWZyZXNoIG9uIHZzIHBhZ2UuXG4gICAgICB0aGlzLiRlbWl0KFwib3Blbk1vZGFsXCIpO1xuXHR9LFxuXHRwcmV2ZW50RW50ZXI6IGZ1bmN0aW9uKCkge30sXG5cdGNsb3NlOiBmdW5jdGlvbigpIHtcblx0ICAgICQodGhpcy4kcmVmc1tcIm1vZGFsX2lkXCJdKS5tb2RhbChcImhpZGVcIik7XG4gICAgICAvLyBlbWl0IGNsb3NlbW9kYWwgdG8gZW5hYmxlIChldmVudHVhbGx5IGlmIGF1dG9yZWZyZXNoIHZhcmlhYmxlIGlzIHRydWUpXG4gICAgICAvLyB0aGUgYXV0b3JlZnJlc2ggb24gdnMgcGFnZS5cbiAgICAgIHRoaXMuJGVtaXQoXCJjbG9zZU1vZGFsXCIpO1xuXHR9LFxuICAgIH0sXG59KTtcbjwvc2NyaXB0PlxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbjxkaXYgQHN1Ym1pdC5wcmV2ZW50PVwicHJldmVudEVudGVyXCIgY2xhc3M9XCJtb2RhbCBmYWRlXCIgcmVmPVwibW9kYWxfaWRcIiB0YWJpbmRleD1cIi0xXCIgcm9sZT1cImRpYWxvZ1wiIGFyaWEtbGFiZWxsZWRieT1cImR0LWFkZC1maWx0ZXItbW9kYWwtdGl0bGVcIlxuICAgICBhcmlhLWhpZGRlbj1cInRydWVcIj5cbiAgPGRpdiBjbGFzcz1cIm1vZGFsLWRpYWxvZyBtb2RhbC1kaWFsb2ctY2VudGVyZWQgbW9kYWwtbGdcIiByb2xlPVwiZG9jdW1lbnRcIj5cbiAgICA8ZGl2IGNsYXNzPVwibW9kYWwtY29udGVudFwiPlxuICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPlxuICAgICAgICA8aDUgY2xhc3M9XCJtb2RhbC10aXRsZVwiPlxuXHQgIDxzbG90IG5hbWU9XCJ0aXRsZVwiPjwvc2xvdD5cblx0PC9oNT5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWNsb3NlXCI+XG4gICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4tY2xvc2VcIiBkYXRhLWJzLWRpc21pc3M9XCJtb2RhbFwiIGFyaWEtbGFiZWw9XCJDbG9zZVwiPlxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj5cblx0PHNsb3QgbmFtZT1cImJvZHlcIj48L3Nsb3Q+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm1yLWF1dG9cIj5cbiAgICAgICAgPC9kaXY+XG5cdDxzbG90IG5hbWU9XCJmb290ZXJcIj48L3Nsb3Q+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvIHRlc3QtZmVlZGJhY2sgdy0xMDBcIiBzdHlsZT1cImRpc3BsYXk6IG5vbmU7XCI+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmaW5lQ29tcG9uZW50IH0gZnJvbSAndnVlJztcbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gICAgY29tcG9uZW50czoge1xuICAgIH0sXG4gICAgcHJvcHM6IHtcblx0aWQ6IFN0cmluZyxcbiAgICB9LFxuICAgIGVtaXRzOiBbXCJoaWRkZW5cIiwgXCJzaG93ZWRcIiwgXCJjbG9zZU1vZGFsXCIsIFwib3Blbk1vZGFsXCJdLFxuICAgIC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIG9mIHRoZSBjb21wb25lbnQgY2FsbGVkLCBpdCdzIGNhbGxlZCBiZWZvcmUgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgICBjcmVhdGVkKCkge1xuICAgIH0sXG4gICAgZGF0YSgpIHtcblx0cmV0dXJuIHtcblx0ICAgIC8vaTE4bjogKHQpID0+IGkxOG4odCksXG5cdH07XG4gICAgfSxcbiAgICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBjYWxsZWQgYWZ0ZXIgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgICBtb3VudGVkKCkge1xuXHRsZXQgbWUgPSB0aGlzO1xuXHQkKHRoaXMuJHJlZnNbXCJtb2RhbF9pZFwiXSkub24oJ3Nob3duLmJzLm1vZGFsJywgZnVuY3Rpb24gKGUpIHtcblx0ICAgIG1lLiRlbWl0KFwic2hvd2VkXCIpO1xuXHR9KTtcblx0JCh0aGlzLiRyZWZzW1wibW9kYWxfaWRcIl0pLm9uKCdoaWRkZW4uYnMubW9kYWwnLCBmdW5jdGlvbiAoZSkge1xuXHQgICAgbWUuJGVtaXQoXCJoaWRkZW5cIik7XG5cdH0pO1xuXHQvLyBub3RpZmllcyB0aGF0IGNvbXBvbmVudCBpcyByZWFkeVxuXHRudG9wbmdfc3luYy5yZWFkeSh0aGlzLiRwcm9wc1tcImlkXCJdKTtcbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcblx0c2hvdzogZnVuY3Rpb24oKSB7XG5cdCAgICAkKHRoaXMuJHJlZnNbXCJtb2RhbF9pZFwiXSkubW9kYWwoXCJzaG93XCIpO1xuICAgICAgLy8gZW1pdCBvcGVubW9kYWwgdG8gZGlzYWJsZSB0aGUgYXV0b3JlZnJlc2ggb24gdnMgcGFnZS5cbiAgICAgIHRoaXMuJGVtaXQoXCJvcGVuTW9kYWxcIik7XG5cdH0sXG5cdHByZXZlbnRFbnRlcjogZnVuY3Rpb24oKSB7fSxcblx0Y2xvc2U6IGZ1bmN0aW9uKCkge1xuXHQgICAgJCh0aGlzLiRyZWZzW1wibW9kYWxfaWRcIl0pLm1vZGFsKFwiaGlkZVwiKTtcbiAgICAgIC8vIGVtaXQgY2xvc2Vtb2RhbCB0byBlbmFibGUgKGV2ZW50dWFsbHkgaWYgYXV0b3JlZnJlc2ggdmFyaWFibGUgaXMgdHJ1ZSlcbiAgICAgIC8vIHRoZSBhdXRvcmVmcmVzaCBvbiB2cyBwYWdlLlxuICAgICAgdGhpcy4kZW1pdChcImNsb3NlTW9kYWxcIik7XG5cdH0sXG4gICAgfSxcbn0pO1xuPC9zY3JpcHQ+XG4iLCIvKlxuICogKEMpIDIwMTMtMjMgLSBudG9wLm9yZ1xuICovXG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5jb25zdCByZWdleGVzID0ge1xuICAgIGlwdjQ6IFN0cmluZy5yYXdgXigyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pXFwuKDI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPylcXC4oMjVbMC01XXwyWzAtNF1bMC05XXxbMDFdP1swLTldWzAtOV0/KVxcLigyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pJGAsXG4gICAgaXB2NjogU3RyaW5nLnJhd2BeKD86KD86W2EtZkEtRlxcZF17MSw0fTopezd9KD86W2EtZkEtRlxcZF17MSw0fXw6KXwoPzpbYS1mQS1GXFxkXXsxLDR9Oil7Nn0oPzooPzoyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldXFxkfFxcZCkoPzpcXFxcLig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV1cXGR8XFxkKSl7M318OlthLWZBLUZcXGRdezEsNH18Oil8KD86W2EtZkEtRlxcZF17MSw0fTopezV9KD86Oig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV1cXGR8XFxkKSg/OlxcXFwuKD86MjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XVxcZHxcXGQpKXszfXwoPzo6W2EtZkEtRlxcZF17MSw0fSl7MSwyfXw6KXwoPzpbYS1mQS1GXFxkXXsxLDR9Oil7NH0oPzooPzo6W2EtZkEtRlxcZF17MSw0fSl7MCwxfTooPzoyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldXFxkfFxcZCkoPzpcXFxcLig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV1cXGR8XFxkKSl7M318KD86OlthLWZBLUZcXGRdezEsNH0pezEsM318Oil8KD86W2EtZkEtRlxcZF17MSw0fTopezN9KD86KD86OlthLWZBLUZcXGRdezEsNH0pezAsMn06KD86MjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XVxcZHxcXGQpKD86XFxcXC4oPzoyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldXFxkfFxcZCkpezN9fCg/OjpbYS1mQS1GXFxkXXsxLDR9KXsxLDR9fDopfCg/OlthLWZBLUZcXGRdezEsNH06KXsyfSg/Oig/OjpbYS1mQS1GXFxkXXsxLDR9KXswLDN9Oig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV1cXGR8XFxkKSg/OlxcXFwuKD86MjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XVxcZHxcXGQpKXszfXwoPzo6W2EtZkEtRlxcZF17MSw0fSl7MSw1fXw6KXwoPzpbYS1mQS1GXFxkXXsxLDR9Oil7MX0oPzooPzo6W2EtZkEtRlxcZF17MSw0fSl7MCw0fTooPzoyNVswLTVdfDJbMC00XVxcZHwxXFxkXFxkfFsxLTldXFxkfFxcZCkoPzpcXFxcLig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV1cXGR8XFxkKSl7M318KD86OlthLWZBLUZcXGRdezEsNH0pezEsNn18Oil8KD86Oig/Oig/OjpbYS1mQS1GXFxkXXsxLDR9KXswLDV9Oig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGRcXGR8WzEtOV1cXGR8XFxkKSg/OlxcXFwuKD86MjVbMC01XXwyWzAtNF1cXGR8MVxcZFxcZHxbMS05XVxcZHxcXGQpKXszfXwoPzo6W2EtZkEtRlxcZF17MSw0fSl7MSw3fXw6KSkpKD86JVswLTlhLXpBLVpdezEsfSk/JGAsXG4gICAgbWFjX2FkZHJlc3M6IFN0cmluZy5yYXdgXihbMC05QS1GYS1mXXsyfTopezV9KFswLTlBLUZhLWZdezJ9KSRgLFxuICAgIGNvbW1hX3NlcGFydGVkX3BvcnRfcmVnZXg6IFN0cmluZy5yYXdgXihcXGR7MSw1fSkoLFxccypcXGR7MSw1fSkqJGAsXG4gICAgcG9ydF9yYW5nZV9yZWdleDogU3RyaW5nLnJhd2BeKFxcZHsxLDV9KS0oXFxkezEsNX0pJGAsXG5cdGhvc3RfbmFtZTogU3RyaW5nLnJhd2BeKD8hXFxzKiQpW2EtekEtWjAtOS5fOiBcXC1cXC9dezEsMjUwfXxeW2EtekEtWjAtOS5fOiBcXC1cXC9dezEsMjUwfUBbMC05XXswLDV9YCxcbiAgICBzaW5nbGV3b3JkOiBTdHJpbmcucmF3YF4oPz1bYS16QS1aMC05Ll86XFwtXXszLDI1M30kKSg/IS4qW18uOlxcLV17Mn0pW15fLjpcXC1dLipbXl8uOlxcLV0kYCxcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmNvbnN0IHZhbGlkYXRlSVAgPSAoaXApID0+IHtcbiAgICByZXR1cm4gKHZhbGlkYXRlSVB2NChpcCkgfHwgdmFsaWRhdGVJUHY2KGlwKSk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5jb25zdCB2YWxpZGF0ZUlQdjQgPSAoaXApID0+IHtcbiAgICBjb25zdCBpcHY0ID0gbmV3IFJlZ0V4cChyZWdleGVzLmlwdjQpO1xuXG4gICAgcmV0dXJuIGlwdjQudGVzdChpcCk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5jb25zdCB2YWxpZGF0ZUlQdjYgPSAoaXApID0+IHtcbiAgICBjb25zdCBpcHY2ID0gbmV3IFJlZ0V4cChyZWdleGVzLmlwdjYpO1xuXG4gICAgcmV0dXJuIGlwdjYudGVzdChpcCk7XG59XG5cbmNvbnN0IHZhbGlkYXRlSG9zdE5hbWUgPSAoaG9zdF9uYW1lKSA9PiB7XG5cdGNvbnN0IGhvc3RfbmFtZV9yZWdleHAgPSBuZXcgUmVnRXhwKHJlZ2V4ZXMuaG9zdF9uYW1lKTtcblxuXHRyZXR1cm4gaG9zdF9uYW1lX3JlZ2V4cC50ZXN0KGhvc3RfbmFtZSk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5jb25zdCB2YWxpZGF0ZUNvbW1hU2VwYXJhdGVkUG9ydExpc3QgPSAocG9ydHMpID0+IHtcbiAgICBjb25zdCBwb3J0X2xpc3QgPSBuZXcgUmVnRXhwKHJlZ2V4ZXMuY29tbWFfc2VwYXJ0ZWRfcG9ydF9yZWdleCk7XG5cbiAgICByZXR1cm4gcG9ydF9saXN0LnRlc3QocG9ydHMpO1xufVxuXG5jb25zdCB2YWxpZGF0ZVNpbmdsZVdvcmQgPSAod29yZCkgPT4ge1xuICAgIGNvbnN0IHNpbmdlbFdvcmRSZWdleCA9IG5ldyBSZWdFeHAocmVnZXhlcy5zaW5nbGV3b3JkKVxuXG4gICAgcmV0dXJuIHNpbmdlbFdvcmRSZWdleC50ZXN0KHdvcmQpO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuY29uc3QgdmFsaWRhdGVQb3J0UmFuZ2UgPSAocG9ydHMpID0+IHtcbiAgICBjb25zdCBwb3J0X2FycmF5ID0gcG9ydHMuc3BsaXQoXCItXCIsIDIpO1xuICAgIGNvbnN0IGxvdyA9IE51bWJlcihwb3J0X2FycmF5WzBdKTtcbiAgICBjb25zdCBoaWdoID0gTnVtYmVyKHBvcnRfYXJyYXlbMV0pO1xuXG4gICAgaWYgKChpc05hTihsb3cpKSB8fCAoaXNOYU4oaGlnaCkpKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAoKGxvdyA+IDApICYmIChsb3cgPCBoaWdoKSAmJiAoaGlnaCA8IDY1NTM2KSlcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgZWxzZVxuICAgICAgICByZXR1cm4gZmFsc2U7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5pbXBvcnQgTnRvcFV0aWxzIGZyb20gXCIuL250b3AtdXRpbHMuanNcIjtcblxuY29uc3QgVXRpbHMgPSBOdG9wVXRpbHM7XG5mdW5jdGlvbiBnZXRfZGF0YV9wYXR0ZXJuKHR5cGUpIHtcbiAgICBpZiAodHlwZSA9PSBcInRleHRcIikge1xuICAgICAgICByZXR1cm4gYC4qYDtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT0gXCJ2bGFuXCIpIHtcbiAgICAgICAgbGV0IHZsYW4gPSBTdHJpbmcucmF3YEAoKFsxLTldKXwoWzEtOV1bMC05XXsxLDJ9KXwoWzEtM11bMC05XXszfSl8KDQwWzAtOF1bMC05XSl8KDQwOVswLTVdKSlgO1xuICAgICAgICByZXR1cm4gdmxhbjtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT0gXCJpcFwiIHx8IHR5cGUgPT0gXCJjaWRyXCIpIHtcbiAgICAgICAgbGV0IHZsYW4gPSBnZXRfZGF0YV9wYXR0ZXJuKFwidmxhblwiKTtcbiAgICAgICAgbGV0IHJfaXB2NCA9IFV0aWxzLlJFR0VYRVMuaXB2NDtcbiAgICAgICAgbGV0IHJfaXB2NF92bGFuID0gcl9pcHY0LnJlcGxhY2VBbGwoXCIkXCIsIGAke3ZsYW59JGApO1xuICAgICAgICBsZXQgcl9pcHY2ID0gVXRpbHMuUkVHRVhFUy5pcHY2O1xuICAgICAgICBsZXQgcl9pcHY2X3ZsYW4gPSByX2lwdjYucmVwbGFjZUFsbChcIiRcIiwgYCR7dmxhbn0kYCk7XG4gICAgICAgIGlmICh0eXBlID09IFwiY2lkclwiKSB7XG4gICAgICAgICAgICBsZXQgbmV0d29ya19pcHY0ID0gU3RyaW5nLnJhd2AoXFwvKChbMS05XSl8KFsxLTJdWzAtOV0pfCgzWzAtMl0pKSlgO1xuICAgICAgICAgICAgbGV0IGlwdjRfY2lkciA9IHJfaXB2NC5yZXBsYWNlQWxsKFwiJFwiLCBgJHtuZXR3b3JrX2lwdjR9JGApO1xuICAgICAgICAgICAgbGV0IGlwdjRfY2lkcl92bGFuID0gcl9pcHY0LnJlcGxhY2VBbGwoXCIkXCIsIGAke25ldHdvcmtfaXB2NH0ke3ZsYW59JGApO1xuICAgICAgICAgICAgbGV0IG5ldHdvcmtfaXB2NiA9IFN0cmluZy5yYXdgKFxcLygoWzEtOV0pfChbMS05XVswLTldKXwoMVswLTFdWzAtOV0pfCgxMlswLThdKSkpYDtcbiAgICAgICAgICAgIGxldCBpcHY2X2NpZHIgPSByX2lwdjYucmVwbGFjZUFsbChcIiRcIiwgYCR7bmV0d29ya19pcHY2fSRgKTtcbiAgICAgICAgICAgIGxldCBpcHY2X2NpZHJfdmxhbiA9IHJfaXB2Ni5yZXBsYWNlQWxsKFwiJFwiLCBgJHtuZXR3b3JrX2lwdjZ9JHt2bGFufSRgKTtcbiAgICAgICAgICAgIHJldHVybiBgKCR7aXB2NF9jaWRyfXwke2lwdjRfY2lkcl92bGFufXwke2lwdjZfY2lkcn18JHtpcHY2X2NpZHJfdmxhbn0pYDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYCgke3JfaXB2NH0pfCgke3JfaXB2NF92bGFufSl8KCR7cl9pcHY2fSl8KCR7cl9pcHY2X3ZsYW59KWA7XG4gICAgfSBlbHNlIGlmICh0eXBlID09IFwibWFjXCIpIHtcbiAgICAgICAgcmV0dXJuIFV0aWxzLlJFR0VYRVNbXCJtYWNBZGRyZXNzXCJdO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PSBcImlwLGNpZHJcIikge1xuICAgICAgICBsZXQgaXAgPSBnZXRfZGF0YV9wYXR0ZXJuKFwiaXBcIik7XG4gICAgICAgIGxldCBjaWRyID0gZ2V0X2RhdGFfcGF0dGVybihcImNpZHJcIik7XG4gICAgICAgIHJldHVybiBgKCR7aXB9KXwoJHtjaWRyfSlgO1xuICAgIH1cbiAgICByZXR1cm4gVXRpbHMuUkVHRVhFU1t0eXBlXTtcbn1cblxuY29uc3QgcmVnZXhWYWxpZGF0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGdldF9kYXRhX3BhdHRlcm4sXG4gICAgICAgIHZhbGlkYXRlSVAsXG4gICAgICAgIHZhbGlkYXRlSVB2NCxcbiAgICAgICAgdmFsaWRhdGVJUHY2LFxuXHRcdHZhbGlkYXRlSG9zdE5hbWUsXG4gICAgICAgIHZhbGlkYXRlQ29tbWFTZXBhcmF0ZWRQb3J0TGlzdCxcbiAgICAgICAgdmFsaWRhdGVQb3J0UmFuZ2UsXG4gICAgICAgIHZhbGlkYXRlU2luZ2xlV29yZCxcbiAgICB9O1xufSgpO1xuXG5leHBvcnQgZGVmYXVsdCByZWdleFZhbGlkYXRpb247XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuPG1vZGFsIDppZD1cImlkX21vZGFsXCIgcmVmPVwibW9kYWxcIj5cbiAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT57e2kxOG4oJ2FsZXJ0c19kYXNoYm9hcmQuYWRkX2ZpbHRlcicpfX08L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAgPGZvcm0gYXV0b2NvbXBsZXRlPVwib2ZmXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCByb3dcIj5cblx0PGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTNcIiBmb3I9XCJkdC1maWx0ZXItdHlwZS1zZWxlY3RcIj5cblx0ICA8Yj5GaWx0ZXI8L2I+XG5cdDwvbGFiZWw+XG5cdDxkaXYgY2xhc3M9XCJjb2wtc20tOFwiPlxuICAgIDxzZWxlY3Qtc2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwiZmlsdGVyX3R5cGVfc2VsZWN0ZWRcIlxuICAgICAgOmlkPVwiJ2ZpbHRlcl90eXBlJ1wiXG4gICAgICA6b3B0aW9ucz1cImZpbHRlcnNfb3B0aW9uc1wiXG4gICAgICBAc2VsZWN0X29wdGlvbj1cImNoYW5nZV9maWx0ZXIoKVwiPlxuICAgIDwvc2VsZWN0LXNlYXJjaD5cblx0PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxocj5cbiAgICAgIDxkaXYgY2xhc3M9XCJkdC1maWx0ZXItdGVtcGxhdGUtY29udGFpbmVyIGZvcm0tZ3JvdXAgcm93XCI+XG5cdDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS0zXCI+XG4gICAgICAgICAgPGI+e3tmaWx0ZXJfdHlwZV9sYWJlbF9zZWxlY3RlZH19PC9iPlxuXHQ8L2xhYmVsPlxuXHQ8ZGl2IGNsYXNzPVwiY29sLXNtLThcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXAgbWItM1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwLXByZXBlbmQgY29sLXNtLTNcIj5cbiAgICAgICAgICAgICAgPHNlbGVjdC1zZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJvcGVyYXRvcl9zZWxlY3RlZFwiXG4gICAgICAgICAgICAgICAgOmlkPVwiJ29wZXJhdG9yX2ZpbHRlcidcIlxuICAgICAgICAgICAgICAgIDpvcHRpb25zPVwib3BlcmF0b3JzX3RvX3Nob3dcIlxuICAgICAgICAgICAgICAgIEBzZWxlY3Rfb3B0aW9uPVwiY2hhbmdlX29wZXJhdG9yX3R5cGVcIj5cbiAgICAgICAgICAgICAgPC9zZWxlY3Qtc2VhcmNoPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTlcIiB2LWlmPVwiaW5wdXRfdHlwZSA9PSAnc2VsZWN0J1wiPlxuICAgICAgICAgICAgICA8c2VsZWN0LXNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cIm9wdGlvbl9zZWxlY3RlZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIDppZD1cIidkYXRhX2ZpbHRlcidcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6b3B0aW9ucz1cIm9wdGlvbnNfdG9fc2hvd1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBzZWxlY3Rfb3B0aW9uPVwiY2hhbmdlX2RhdGFfZmlsdGVyXCI+XG4gICAgICAgICAgICAgIDwvc2VsZWN0LXNlYXJjaD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS05XCIgdi1lbHNlLWlmPVwiaW5wdXRfdHlwZSA9PSAnc2VsZWN0LXdpdGgtaW5wdXQnXCI+XG4gICAgICAgICAgICAgIDxzZWxlY3Qtc2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwib3B0aW9uX3NlbGVjdGVkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmlkPVwiJ2RhdGFfZmlsdGVyJ1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIDphZGRfdGFnPVwidHJ1ZVwiXG5cdFx0XHQgICAgIDpwYXR0ZXJuPVwiZGF0YV9wYXR0ZXJuX3NlbGVjdGVkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOm9wdGlvbnM9XCJvcHRpb25zX3RvX3Nob3dcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAc2VsZWN0X29wdGlvbj1cImNoYW5nZV9kYXRhX2ZpbHRlclwiPlxuICAgICAgICAgICAgICA8L3NlbGVjdC1zZWFyY2g+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWVsc2U+XG4gICAgICAgICAgICAgIDxpbnB1dCB2LW1vZGVsPVwiaW5wdXRfdmFsdWVcIiA6cGF0dGVybj1cImRhdGFfcGF0dGVybl9zZWxlY3RlZFwiIG5hbWU9XCJ2YWx1ZVwiIDpyZXF1aXJlZD1cImlucHV0X3JlcXVpcmVkXCIgdHlwZT1cInRleHRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiPlxuICAgICAgICAgICAgICA8c3BhbiBzdHlsZT1cIm1hcmdpbjogMHB4O3BhZGRpbmc6MDtcIiBjbGFzcz1cImFsZXJ0IGludmFsaWQtZmVlZGJhY2tcIj57e2kxOG4oJ2ludmFsaWRfdmFsdWUnKX19PC9zcGFuPlxuICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8IS0tIGVuZCBkaXYgaW5wdXQtZ3JvdXAgbWItMyAtLT5cblx0PC9kaXY+XG5cdDwhLS0gZW5kIGRpdiBmb3JtLWdyb3VwLXJvdyAtLT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZm9ybT5cbiAgPC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgOmRpc2FibGVkPVwiY2hlY2tfZGlzYWJsZV9hcHBseSgpXCIgQGNsaWNrPVwiYXBwbHlcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPnt7aTE4bignYXBwbHknKX19PC9idXR0b24+XG4gIDwvdGVtcGxhdGU+XG48L21vZGFsPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCB0eXBlPVwidGV4dC9qYXZhc2NyaXB0XCI+XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsIH0gZnJvbSBcIi4vbW9kYWwudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdFNlYXJjaCB9IGZyb20gJy4vc2VsZWN0LXNlYXJjaC52dWUnXG5pbXBvcnQgcmVnZXhWYWxpZGF0aW9uIGZyb20gXCIuLi91dGlsaXRpZXMvcmVnZXgtdmFsaWRhdGlvbi5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgY29tcG9uZW50czoge1xuXHQnbW9kYWwnOiBNb2RhbCxcblx0J3NlbGVjdC1zZWFyY2gnOiBTZWxlY3RTZWFyY2gsXG4gICAgfSwgXG4gICAgcHJvcHM6IHtcblx0aWQ6IFN0cmluZyxcblx0ZmlsdGVyc19vcHRpb25zOiBBcnJheSxcbiAgICB9LFxuICAgIHVwZGF0ZWQoKSB7XG4gICAgfSxcbiAgICBkYXRhKCkge1xuXHRyZXR1cm4ge1xuXHQgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG5cdCAgICBqUXVlcnk6ICQsXG5cdCAgICBpZF9tb2RhbDogYCR7dGhpcy4kcHJvcHMuaWR9X21vZGFsYCxcblx0ICAgIGZpbHRlcl90eXBlX3NlbGVjdGVkOiB7fSxcblx0ICAgIGZpbHRlcl90eXBlX2xhYmVsX3NlbGVjdGVkOiBudWxsLFxuXHQgICAgb3BlcmF0b3Jfc2VsZWN0ZWQ6IHt9LFxuXHQgICAgb3B0aW9uX3NlbGVjdGVkOiB7fSxcblx0ICAgIGlucHV0X3ZhbHVlOiBudWxsLFxuXHQgICAgaW5wdXRfdHlwZTogbnVsbCxcblx0ICAgIGRhdGFfcGF0dGVybl9zZWxlY3RlZDogbnVsbCxcblx0ICAgIGlucHV0X3JlcXVpcmVkOiBmYWxzZSxcblx0ICAgIG9wdGlvbnNfdG9fc2hvdzogbnVsbCxcblx0ICAgIG9wZXJhdG9yc190b19zaG93OiBbXSxcblx0fTtcbiAgICB9LFxuICAgIGVtaXRzOiBbXCJhcHBseVwiXSxcbiAgICBjcmVhdGVkKCkge30sXG4gICAgLyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2QgY2FsbGVkIGFmdGVyIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gICAgYXN5bmMgbW91bnRlZCgpIHtcblx0YXdhaXQgbnRvcG5nX3N5bmMub25fcmVhZHkodGhpcy5pZF9tb2RhbCk7XG5cdG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQodGhpcy4kcHJvcHNbXCJpZFwiXSwgbnRvcG5nX2N1c3RvbV9ldmVudHMuU0hPV19NT0RBTF9GSUxURVJTLCAoZmlsdGVyKSA9PiB0aGlzLnNob3coZmlsdGVyKSk7XHRcblx0Ly8gbm90aWZpZXMgdGhhdCBjb21wb25lbnQgaXMgcmVhZHlcblx0bnRvcG5nX3N5bmMucmVhZHkodGhpcy4kcHJvcHNbXCJpZFwiXSk7XG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG5cdHNob3c6IGZ1bmN0aW9uKGZpbHRlcikge1xuXHQgICAgaWYgKHRoaXMuJHByb3BzLmZpbHRlcnNfb3B0aW9ucyA9PSBudWxsIHx8IHRoaXMuJHByb3BzLmZpbHRlcnNfb3B0aW9ucy5sZW5ndGggPT0gMCkgeyBcblx0XHRyZXR1cm47IFxuXHQgICAgfVxuXHQgICAgaWYgKGZpbHRlciAhPSBudWxsKSB7XG5cdCAgXHR0aGlzLmZpbHRlcl90eXBlX3NlbGVjdGVkID0gZmlsdGVyO1xuXHRcdHRoaXMuY2hhbmdlX2ZpbHRlcihmaWx0ZXIpO1x0XHRcblx0ICAgIH0gZWxzZSB7XG5cdFx0dGhpcy5maWx0ZXJfdHlwZV9zZWxlY3RlZCA9IHRoaXMuJHByb3BzLmZpbHRlcnNfb3B0aW9uc1swXTtcblx0XHR0aGlzLmNoYW5nZV9maWx0ZXIoKTtcblx0ICAgIH1cblx0ICAgIHRoaXMuJHJlZnNbXCJtb2RhbFwiXS5zaG93KCk7XG5cdH0sXG5cdHBvc3RfY2hhbmdlOiBmdW5jdGlvbihmaWx0ZXIsIHZhbHVlX3R5cGUpIHtcblx0ICAgIGlmIChmaWx0ZXIuaWQgJiYgdGhpcy4kcHJvcHMuZmlsdGVyc19vcHRpb25zKSB7XG5cdFx0LyogRmlsdGVyIHR5cGUgc2VsZWN0ZWQsIGUuZy4gQWxlcnQgVHlwZSwgQXBwbGljYXRpb24sIGVjYy4gKi9cblx0XHR0aGlzLmZpbHRlcl90eXBlX3NlbGVjdGVkID0gdGhpcy4kcHJvcHMuZmlsdGVyc19vcHRpb25zLmZpbmQoKGZvKSA9PiBmby5pZCA9PSBmaWx0ZXIuaWQpO1xuXHQgICAgfVxuXHQgICAgaWYgKGZpbHRlci52YWx1ZSAhPSBudWxsKSB7XG5cdFx0LyogRmlsdGVyIHNlbGVjdGVkIGZvciB0aGUgdHlwZSwgZS5nLiBETlMsIElDTVAsIGVjYy4gKi9cblx0XHRpZiAodGhpcy5vcHRpb25zX3RvX3Nob3cpIHtcblx0XHQgICAgdGhpcy5vcHRpb25fc2VsZWN0ZWQgPSB0aGlzLm9wdGlvbnNfdG9fc2hvdy5maW5kKChmbykgPT4gZm8udmFsdWUgPT0gZmlsdGVyLnZhbHVlKTtcblx0XHR9IGVsc2Uge1xuXHRcdCAgICB0aGlzLm9wdGlvbl9zZWxlY3RlZCA9IHt9O1xuXHRcdCAgICB0aGlzLmlucHV0X3ZhbHVlID0gZmlsdGVyLnZhbHVlO1xuXHRcdCAgICB0aGlzLmRhdGFfcGF0dGVybl9zZWxlY3RlZCA9IHRoaXMuZ2V0X2RhdGFfcGF0dGVybih2YWx1ZV90eXBlKTtcblx0XHR9XG5cdCAgICB9XG5cdCAgICBpZiAoZmlsdGVyLm9wZXJhdG9yICYmIHRoaXMub3BlcmF0b3JzX3RvX3Nob3cpIHtcblx0XHQvKiBPcGVyYXRvciBmaWx0ZXIgc2VsZWN0ZWQsIGUuZy4gPSwgIT0sIGVjYy4gKi9cblx0XHR0aGlzLm9wZXJhdG9yX3NlbGVjdGVkID0gdGhpcy5vcGVyYXRvcnNfdG9fc2hvdy5maW5kKChmbykgPT4gZm8uaWQgPT0gZmlsdGVyLm9wZXJhdG9yKTtcblx0ICAgIH1cblx0fSxcblx0Y2hhbmdlX29wZXJhdG9yX3R5cGU6IGZ1bmN0aW9uKHNlbGVjdGVkX29wZXJhdG9yX3R5cGUpIHtcblx0ICAgIHRoaXMub3BlcmF0b3Jfc2VsZWN0ZWQgPSBzZWxlY3RlZF9vcGVyYXRvcl90eXBlXG5cdH0sXG5cdGNoYW5nZV9kYXRhX2ZpbHRlcjogZnVuY3Rpb24oc2VsZWN0ZWRfZmlsdGVyKSB7XG5cdCAgICB0aGlzLm9wdGlvbl9zZWxlY3RlZCA9IHNlbGVjdGVkX2ZpbHRlclxuXHR9LCAgXG5cdGNoYW5nZV9pbnB1dF92YWx1ZTogZnVuY3Rpb24oaW5wdXQpIHtcblx0ICAgIHRoaXMuaW5wdXRfdmFsdWUgPSBpbnB1dDtcblx0fSxcblx0Y2hhbmdlX2ZpbHRlcjogZnVuY3Rpb24oc2VsZWN0ZWRfZmlsdGVyKSB7XG5cdCAgICB0aGlzLm9wdGlvbnNfdG9fc2hvdyA9IG51bGw7XG5cdCAgICB0aGlzLm9wdGlvbl9zZWxlY3RlZCA9IG51bGw7XG5cdCAgICB0aGlzLmlucHV0X3ZhbHVlID0gbnVsbFxuXHQgICAgbGV0IGZpbHRlcnNfb3B0aW9ucyA9IHRoaXMuJHByb3BzLmZpbHRlcnNfb3B0aW9ucztcblx0ICAgIC8qIFNlYXJjaCB0aGUgZmlsdGVyIHNlbGVjdGVkICovXG5cdCAgICBsZXQgZmlsdGVyID0gZmlsdGVyc19vcHRpb25zLmZpbmQoKGZvKSA9PiBmby5pZCA9PSB0aGlzLmZpbHRlcl90eXBlX3NlbGVjdGVkLmlkKTtcblx0ICAgIGlmIChmaWx0ZXIgPT0gbnVsbCkgeyBcblx0XHRyZXR1cm47IFxuXHQgICAgfVxuXHQgICAgLyogU2V0IHRoZSBjb3JyZWN0IGZpbHRlcnMgdG8gZGlzcGxheSAqL1xuXHQgICAgdGhpcy5pbnB1dF90eXBlID0gZmlsdGVyLnR5cGU7XG5cdCAgICB0aGlzLm9wZXJhdG9yc190b19zaG93ID0gZmlsdGVyLm9wZXJhdG9ycztcblx0ICAgIHRoaXMuZmlsdGVyX3R5cGVfbGFiZWxfc2VsZWN0ZWQgPSBmaWx0ZXIubGFiZWw7XG5cdCAgICBpZiAodGhpcy5pbnB1dF90eXBlID09ICdzZWxlY3QnKSB7XG5cdFx0dGhpcy5vcHRpb25zX3RvX3Nob3cgPSBmaWx0ZXIub3B0aW9ucy5zb3J0KChhLCBiKSA9PiB7XG5cdFx0ICAgIGlmIChhID09IG51bGwgfHwgYS5sYWJlbCA9PSBudWxsKSB7IHJldHVybiAtMTsgfVxuXHRcdCAgICBpZiAoYiA9PSBudWxsIHx8IGIubGFiZWwgPT0gbnVsbCkgeyByZXR1cm4gMTsgfVxuXHRcdCAgICByZXR1cm4gYS5sYWJlbC50b1N0cmluZygpLmxvY2FsZUNvbXBhcmUoYi5sYWJlbC50b1N0cmluZygpKTtcblx0XHR9KTtcblx0XHR0aGlzLm9wdGlvbl9zZWxlY3RlZCA9IHRoaXMub3B0aW9uc190b19zaG93WzBdO1xuXHQgICAgfSBlbHNlIGlmICh0aGlzLmlucHV0X3R5cGUgPT0gJ3NlbGVjdC13aXRoLWlucHV0Jykge1xuXHRcdHRoaXMub3B0aW9uc190b19zaG93ID0gZmlsdGVyLm9wdGlvbnM/LnNvcnQoKGEsIGIpID0+IHtcblx0XHQgICAgaWYgKGEgPT0gbnVsbCB8fCBhLmxhYmVsID09IG51bGwpIHsgcmV0dXJuIC0xOyB9XG5cdFx0ICAgIGlmIChiID09IG51bGwgfHwgYi5sYWJlbCA9PSBudWxsKSB7IHJldHVybiAxOyB9XG5cdFx0ICAgIHJldHVybiBhLmxhYmVsLnRvU3RyaW5nKCkubG9jYWxlQ29tcGFyZShiLmxhYmVsLnRvU3RyaW5nKCkpO1xuXHRcdH0pO1xuXHRcdHRoaXMub3B0aW9uX3NlbGVjdGVkID0gdGhpcy5vcHRpb25zX3RvX3Nob3dbMF07XG5cdFx0dGhpcy5kYXRhX3BhdHRlcm5fc2VsZWN0ZWQgPSB0aGlzLmdldF9kYXRhX3BhdHRlcm4oZmlsdGVyLnZhbHVlX3R5cGUpO1xuXHQgICAgfSBlbHNlIHtcblx0XHR0aGlzLm9wdGlvbnNfdG9fc2hvdyA9IG51bGw7XG5cdFx0dGhpcy5kYXRhX3BhdHRlcm5fc2VsZWN0ZWQgPSB0aGlzLmdldF9kYXRhX3BhdHRlcm4oZmlsdGVyLnZhbHVlX3R5cGUpO1xuXHQgICAgfVxuXHQgICAgXG5cdCAgICBpZihmaWx0ZXIub3BlcmF0b3JzICYmIHRoaXMub3BlcmF0b3Jfc2VsZWN0ZWQ/LmlkID09IG51bGwpIHtcblx0XHR0aGlzLm9wZXJhdG9yX3NlbGVjdGVkID0gZmlsdGVyLm9wZXJhdG9yc1swXVxuXHQgICAgfVxuXHQgICAgXG5cdCAgICBpZiAoc2VsZWN0ZWRfZmlsdGVyICE9IG51bGwpIHsgXG5cdFx0dGhpcy5wb3N0X2NoYW5nZShzZWxlY3RlZF9maWx0ZXIsIGZpbHRlci52YWx1ZV90eXBlKTsgXG5cdCAgICB9XG5cdH0sXG5cdGdldF9kYXRhX3BhdHRlcm46IGZ1bmN0aW9uKHZhbHVlX3R5cGUpIHtcblx0ICAgIHRoaXMuaW5wdXRfcmVxdWlyZWQgPSB0cnVlO1xuXHQgICAgaWYgKHZhbHVlX3R5cGUgPT0gXCJ0ZXh0XCIpIHtcblx0XHR0aGlzLmlucHV0X3JlcXVpcmVkID0gZmFsc2U7XG5cdFx0cmV0dXJuIGAuKmA7XG5cdCAgICB9XG5cdCAgICByZXR1cm4gcmVnZXhWYWxpZGF0aW9uLmdldF9kYXRhX3BhdHRlcm4odmFsdWVfdHlwZSk7XG5cdCAgICBcblx0ICAgIC8vIGVsc2UgaWYgKHZhbHVlX3R5cGUgPT0gXCJpcFwiKSB7XG5cdCAgICAvLyBcdGxldCByX2lwdjQgPSBOdG9wVXRpbHMuUkVHRVhFUy5pcHY0O1xuXHQgICAgLy8gXHRsZXQgcl9pcHY0X3ZsYW4gPSByX2lwdjQucmVwbGFjZShcIiRcIiwgXCJAWzAtOV17MCw1fSRcIik7XG5cdCAgICAvLyBcdGxldCByX2lwdjYgPSBOdG9wVXRpbHMuUkVHRVhFUy5pcHY2O1xuXHQgICAgLy8gXHRsZXQgcl9pcHY2X3ZsYW4gPSByX2lwdjYucmVwbGFjZUFsbChcIiRcIiwgXCJAWzAtOV17MCw1fSRcIik7XG5cdCAgICAvLyBcdHJldHVybiBgKCR7cl9pcHY0fSl8KCR7cl9pcHY0X3ZsYW59KXwoJHtyX2lwdjZ9KXwoJHtyX2lwdjZfdmxhbn0pYDtcblx0ICAgIC8vIH0gZWxzZSBpZiAodmFsdWVfdHlwZSA9PSBcImNpZHJcIikge1xuXHQgICAgLy8gXHRjb25zb2xlLmxvZyhcInRlc3RcIik7XG5cdCAgICAvLyB9XG5cdCAgICBcblx0ICAgIC8vIHJldHVybiBOdG9wVXRpbHMuUkVHRVhFU1t2YWx1ZV90eXBlXTtcblx0fSxcblx0Y2hlY2tfZGlzYWJsZV9hcHBseTogZnVuY3Rpb24oKSB7XG5cdCAgICBsZXQgcmVnZXggPSBuZXcgUmVnRXhwKHRoaXMuZGF0YV9wYXR0ZXJuX3NlbGVjdGVkKTtcblx0ICAgIGxldCBkaXNhYmxlX2FwcGx5ID0gIXRoaXMub3B0aW9uc190b19zaG93ICYmIChcblx0XHQodGhpcy5pbnB1dF9yZXF1aXJlZCAmJiAodGhpcy5pbnB1dF92YWx1ZSA9PSBudWxsIHx8IHRoaXMuaW5wdXRfdmFsdWUgPT0gXCJcIikpXG5cdFx0ICAgIHx8IChyZWdleC50ZXN0KHRoaXMuaW5wdXRfdmFsdWUpID09IGZhbHNlKVxuXHQgICAgKTtcblx0ICAgIHJldHVybiBkaXNhYmxlX2FwcGx5O1xuXHR9LFxuXHRhcHBseTogZnVuY3Rpb24oKSB7XG5cdCAgICBsZXQgdmFsdWUgPSB0aGlzLmlucHV0X3ZhbHVlO1xuXHQgICAgbGV0IHZhbHVlX2xhYmVsID0gdGhpcy5pbnB1dF92YWx1ZTtcblx0ICAgIGlmICh2YWx1ZSA9PSBudWxsIHx8ICh0aGlzLm9wdGlvbl9zZWxlY3RlZD8udmFsdWUgIT0gbnVsbCkpIHtcblx0XHRsZXQgZmlsdGVyID0gdGhpcy5maWx0ZXJzX29wdGlvbnMuZmluZCgoZm8pID0+IGZvLmlkID09IHRoaXMuZmlsdGVyX3R5cGVfc2VsZWN0ZWQuaWQpO1xuICAgICAgICAgICAgICAgIFxuXHRcdGxldCBvcHRpb24gPSBmaWx0ZXIub3B0aW9ucy5maW5kKChvKSA9PiBvLnZhbHVlID09IHRoaXMub3B0aW9uX3NlbGVjdGVkLnZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9uID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uID0gdGhpcy5vcHRpb25fc2VsZWN0ZWQ7XG4gICAgICAgICAgICAgICAgfVxuXHRcdHZhbHVlID0gb3B0aW9uLnZhbHVlO1xuXHRcdHZhbHVlX2xhYmVsID0gb3B0aW9uLnZhbHVlX2xhYmVsIHx8IG9wdGlvbi5sYWJlbDtcblx0ICAgIH1cblx0ICAgIGxldCBwYXJhbXMgPSB7XG5cdFx0aWQ6IHRoaXMuZmlsdGVyX3R5cGVfc2VsZWN0ZWQuaWQsXG5cdFx0bGFiZWw6IHRoaXMuZmlsdGVyX3R5cGVfbGFiZWxfc2VsZWN0ZWQsXG5cdFx0b3BlcmF0b3I6IHRoaXMub3BlcmF0b3Jfc2VsZWN0ZWQuaWQsXG5cdFx0dmFsdWU6IHZhbHVlLFxuXHRcdHZhbHVlX2xhYmVsOiB2YWx1ZV9sYWJlbCxcblx0ICAgIH07XG5cdCAgICB0aGlzLiRlbWl0KFwiYXBwbHlcIiwgcGFyYW1zKTtcblx0ICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChudG9wbmdfY3VzdG9tX2V2ZW50cy5NT0RBTF9GSUxURVJTX0FQUExZLCBwYXJhbXMpO1xuXHQgICAgdGhpcy5jbG9zZSgpO1xuXHR9LFxuXHRjbG9zZTogZnVuY3Rpb24oKSB7XG5cdCAgICB0aGlzLiRyZWZzW1wibW9kYWxcIl0uY2xvc2UoKTtcblx0fSxcbiAgICB9LFxufVxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG5pbnB1dCB+IC5hbGVydCB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG5pbnB1dDppbnZhbGlkIH4gLmFsZXJ0IHtcbiAgZGlzcGxheTogYmxvY2s7XG59XG48L3N0eWxlPlxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbjxtb2RhbCA6aWQ9XCJpZF9tb2RhbFwiIHJlZj1cIm1vZGFsXCI+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+e3tpMThuKCdhbGVydHNfZGFzaGJvYXJkLmFkZF9maWx0ZXInKX19PC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpib2R5PlxuICAgIDxmb3JtIGF1dG9jb21wbGV0ZT1cIm9mZlwiPlxuICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgcm93XCI+XG5cdDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS0zXCIgZm9yPVwiZHQtZmlsdGVyLXR5cGUtc2VsZWN0XCI+XG5cdCAgPGI+RmlsdGVyPC9iPlxuXHQ8L2xhYmVsPlxuXHQ8ZGl2IGNsYXNzPVwiY29sLXNtLThcIj5cbiAgICA8c2VsZWN0LXNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cImZpbHRlcl90eXBlX3NlbGVjdGVkXCJcbiAgICAgIDppZD1cIidmaWx0ZXJfdHlwZSdcIlxuICAgICAgOm9wdGlvbnM9XCJmaWx0ZXJzX29wdGlvbnNcIlxuICAgICAgQHNlbGVjdF9vcHRpb249XCJjaGFuZ2VfZmlsdGVyKClcIj5cbiAgICA8L3NlbGVjdC1zZWFyY2g+XG5cdDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8aHI+XG4gICAgICA8ZGl2IGNsYXNzPVwiZHQtZmlsdGVyLXRlbXBsYXRlLWNvbnRhaW5lciBmb3JtLWdyb3VwIHJvd1wiPlxuXHQ8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tM1wiPlxuICAgICAgICAgIDxiPnt7ZmlsdGVyX3R5cGVfbGFiZWxfc2VsZWN0ZWR9fTwvYj5cblx0PC9sYWJlbD5cblx0PGRpdiBjbGFzcz1cImNvbC1zbS04XCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwIG1iLTNcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cC1wcmVwZW5kIGNvbC1zbS0zXCI+XG4gICAgICAgICAgICAgIDxzZWxlY3Qtc2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwib3BlcmF0b3Jfc2VsZWN0ZWRcIlxuICAgICAgICAgICAgICAgIDppZD1cIidvcGVyYXRvcl9maWx0ZXInXCJcbiAgICAgICAgICAgICAgICA6b3B0aW9ucz1cIm9wZXJhdG9yc190b19zaG93XCJcbiAgICAgICAgICAgICAgICBAc2VsZWN0X29wdGlvbj1cImNoYW5nZV9vcGVyYXRvcl90eXBlXCI+XG4gICAgICAgICAgICAgIDwvc2VsZWN0LXNlYXJjaD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS05XCIgdi1pZj1cImlucHV0X3R5cGUgPT0gJ3NlbGVjdCdcIj5cbiAgICAgICAgICAgICAgPHNlbGVjdC1zZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJvcHRpb25fc2VsZWN0ZWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6aWQ9XCInZGF0YV9maWx0ZXInXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOm9wdGlvbnM9XCJvcHRpb25zX3RvX3Nob3dcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAc2VsZWN0X29wdGlvbj1cImNoYW5nZV9kYXRhX2ZpbHRlclwiPlxuICAgICAgICAgICAgICA8L3NlbGVjdC1zZWFyY2g+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tOVwiIHYtZWxzZS1pZj1cImlucHV0X3R5cGUgPT0gJ3NlbGVjdC13aXRoLWlucHV0J1wiPlxuICAgICAgICAgICAgICA8c2VsZWN0LXNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cIm9wdGlvbl9zZWxlY3RlZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIDppZD1cIidkYXRhX2ZpbHRlcidcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6YWRkX3RhZz1cInRydWVcIlxuXHRcdFx0ICAgICA6cGF0dGVybj1cImRhdGFfcGF0dGVybl9zZWxlY3RlZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpvcHRpb25zPVwib3B0aW9uc190b19zaG93XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQHNlbGVjdF9vcHRpb249XCJjaGFuZ2VfZGF0YV9maWx0ZXJcIj5cbiAgICAgICAgICAgICAgPC9zZWxlY3Qtc2VhcmNoPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8dGVtcGxhdGUgdi1lbHNlPlxuICAgICAgICAgICAgICA8aW5wdXQgdi1tb2RlbD1cImlucHV0X3ZhbHVlXCIgOnBhdHRlcm49XCJkYXRhX3BhdHRlcm5fc2VsZWN0ZWRcIiBuYW1lPVwidmFsdWVcIiA6cmVxdWlyZWQ9XCJpbnB1dF9yZXF1aXJlZFwiIHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIj5cbiAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9XCJtYXJnaW46IDBweDtwYWRkaW5nOjA7XCIgY2xhc3M9XCJhbGVydCBpbnZhbGlkLWZlZWRiYWNrXCI+e3tpMThuKCdpbnZhbGlkX3ZhbHVlJyl9fTwvc3Bhbj5cbiAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPCEtLSBlbmQgZGl2IGlucHV0LWdyb3VwIG1iLTMgLS0+XG5cdDwvZGl2PlxuXHQ8IS0tIGVuZCBkaXYgZm9ybS1ncm91cC1yb3cgLS0+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Zvcm0+XG4gIDwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Zm9vdGVyPlxuICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIDpkaXNhYmxlZD1cImNoZWNrX2Rpc2FibGVfYXBwbHkoKVwiIEBjbGljaz1cImFwcGx5XCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj57e2kxOG4oJ2FwcGx5Jyl9fTwvYnV0dG9uPlxuICA8L3RlbXBsYXRlPlxuPC9tb2RhbD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgdHlwZT1cInRleHQvamF2YXNjcmlwdFwiPlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tICcuL3NlbGVjdC1zZWFyY2gudnVlJ1xuaW1wb3J0IHJlZ2V4VmFsaWRhdGlvbiBmcm9tIFwiLi4vdXRpbGl0aWVzL3JlZ2V4LXZhbGlkYXRpb24uanNcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIGNvbXBvbmVudHM6IHtcblx0J21vZGFsJzogTW9kYWwsXG5cdCdzZWxlY3Qtc2VhcmNoJzogU2VsZWN0U2VhcmNoLFxuICAgIH0sIFxuICAgIHByb3BzOiB7XG5cdGlkOiBTdHJpbmcsXG5cdGZpbHRlcnNfb3B0aW9uczogQXJyYXksXG4gICAgfSxcbiAgICB1cGRhdGVkKCkge1xuICAgIH0sXG4gICAgZGF0YSgpIHtcblx0cmV0dXJuIHtcblx0ICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuXHQgICAgalF1ZXJ5OiAkLFxuXHQgICAgaWRfbW9kYWw6IGAke3RoaXMuJHByb3BzLmlkfV9tb2RhbGAsXG5cdCAgICBmaWx0ZXJfdHlwZV9zZWxlY3RlZDoge30sXG5cdCAgICBmaWx0ZXJfdHlwZV9sYWJlbF9zZWxlY3RlZDogbnVsbCxcblx0ICAgIG9wZXJhdG9yX3NlbGVjdGVkOiB7fSxcblx0ICAgIG9wdGlvbl9zZWxlY3RlZDoge30sXG5cdCAgICBpbnB1dF92YWx1ZTogbnVsbCxcblx0ICAgIGlucHV0X3R5cGU6IG51bGwsXG5cdCAgICBkYXRhX3BhdHRlcm5fc2VsZWN0ZWQ6IG51bGwsXG5cdCAgICBpbnB1dF9yZXF1aXJlZDogZmFsc2UsXG5cdCAgICBvcHRpb25zX3RvX3Nob3c6IG51bGwsXG5cdCAgICBvcGVyYXRvcnNfdG9fc2hvdzogW10sXG5cdH07XG4gICAgfSxcbiAgICBlbWl0czogW1wiYXBwbHlcIl0sXG4gICAgY3JlYXRlZCgpIHt9LFxuICAgIC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIGNhbGxlZCBhZnRlciBodG1sIHRlbXBsYXRlIGNyZWF0aW9uLiAqL1xuICAgIGFzeW5jIG1vdW50ZWQoKSB7XG5cdGF3YWl0IG50b3BuZ19zeW5jLm9uX3JlYWR5KHRoaXMuaWRfbW9kYWwpO1xuXHRudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KHRoaXMuJHByb3BzW1wiaWRcIl0sIG50b3BuZ19jdXN0b21fZXZlbnRzLlNIT1dfTU9EQUxfRklMVEVSUywgKGZpbHRlcikgPT4gdGhpcy5zaG93KGZpbHRlcikpO1x0XG5cdC8vIG5vdGlmaWVzIHRoYXQgY29tcG9uZW50IGlzIHJlYWR5XG5cdG50b3BuZ19zeW5jLnJlYWR5KHRoaXMuJHByb3BzW1wiaWRcIl0pO1xuICAgIH0sXG4gICAgbWV0aG9kczoge1xuXHRzaG93OiBmdW5jdGlvbihmaWx0ZXIpIHtcblx0ICAgIGlmICh0aGlzLiRwcm9wcy5maWx0ZXJzX29wdGlvbnMgPT0gbnVsbCB8fCB0aGlzLiRwcm9wcy5maWx0ZXJzX29wdGlvbnMubGVuZ3RoID09IDApIHsgXG5cdFx0cmV0dXJuOyBcblx0ICAgIH1cblx0ICAgIGlmIChmaWx0ZXIgIT0gbnVsbCkge1xuXHQgIFx0dGhpcy5maWx0ZXJfdHlwZV9zZWxlY3RlZCA9IGZpbHRlcjtcblx0XHR0aGlzLmNoYW5nZV9maWx0ZXIoZmlsdGVyKTtcdFx0XG5cdCAgICB9IGVsc2Uge1xuXHRcdHRoaXMuZmlsdGVyX3R5cGVfc2VsZWN0ZWQgPSB0aGlzLiRwcm9wcy5maWx0ZXJzX29wdGlvbnNbMF07XG5cdFx0dGhpcy5jaGFuZ2VfZmlsdGVyKCk7XG5cdCAgICB9XG5cdCAgICB0aGlzLiRyZWZzW1wibW9kYWxcIl0uc2hvdygpO1xuXHR9LFxuXHRwb3N0X2NoYW5nZTogZnVuY3Rpb24oZmlsdGVyLCB2YWx1ZV90eXBlKSB7XG5cdCAgICBpZiAoZmlsdGVyLmlkICYmIHRoaXMuJHByb3BzLmZpbHRlcnNfb3B0aW9ucykge1xuXHRcdC8qIEZpbHRlciB0eXBlIHNlbGVjdGVkLCBlLmcuIEFsZXJ0IFR5cGUsIEFwcGxpY2F0aW9uLCBlY2MuICovXG5cdFx0dGhpcy5maWx0ZXJfdHlwZV9zZWxlY3RlZCA9IHRoaXMuJHByb3BzLmZpbHRlcnNfb3B0aW9ucy5maW5kKChmbykgPT4gZm8uaWQgPT0gZmlsdGVyLmlkKTtcblx0ICAgIH1cblx0ICAgIGlmIChmaWx0ZXIudmFsdWUgIT0gbnVsbCkge1xuXHRcdC8qIEZpbHRlciBzZWxlY3RlZCBmb3IgdGhlIHR5cGUsIGUuZy4gRE5TLCBJQ01QLCBlY2MuICovXG5cdFx0aWYgKHRoaXMub3B0aW9uc190b19zaG93KSB7XG5cdFx0ICAgIHRoaXMub3B0aW9uX3NlbGVjdGVkID0gdGhpcy5vcHRpb25zX3RvX3Nob3cuZmluZCgoZm8pID0+IGZvLnZhbHVlID09IGZpbHRlci52YWx1ZSk7XG5cdFx0fSBlbHNlIHtcblx0XHQgICAgdGhpcy5vcHRpb25fc2VsZWN0ZWQgPSB7fTtcblx0XHQgICAgdGhpcy5pbnB1dF92YWx1ZSA9IGZpbHRlci52YWx1ZTtcblx0XHQgICAgdGhpcy5kYXRhX3BhdHRlcm5fc2VsZWN0ZWQgPSB0aGlzLmdldF9kYXRhX3BhdHRlcm4odmFsdWVfdHlwZSk7XG5cdFx0fVxuXHQgICAgfVxuXHQgICAgaWYgKGZpbHRlci5vcGVyYXRvciAmJiB0aGlzLm9wZXJhdG9yc190b19zaG93KSB7XG5cdFx0LyogT3BlcmF0b3IgZmlsdGVyIHNlbGVjdGVkLCBlLmcuID0sICE9LCBlY2MuICovXG5cdFx0dGhpcy5vcGVyYXRvcl9zZWxlY3RlZCA9IHRoaXMub3BlcmF0b3JzX3RvX3Nob3cuZmluZCgoZm8pID0+IGZvLmlkID09IGZpbHRlci5vcGVyYXRvcik7XG5cdCAgICB9XG5cdH0sXG5cdGNoYW5nZV9vcGVyYXRvcl90eXBlOiBmdW5jdGlvbihzZWxlY3RlZF9vcGVyYXRvcl90eXBlKSB7XG5cdCAgICB0aGlzLm9wZXJhdG9yX3NlbGVjdGVkID0gc2VsZWN0ZWRfb3BlcmF0b3JfdHlwZVxuXHR9LFxuXHRjaGFuZ2VfZGF0YV9maWx0ZXI6IGZ1bmN0aW9uKHNlbGVjdGVkX2ZpbHRlcikge1xuXHQgICAgdGhpcy5vcHRpb25fc2VsZWN0ZWQgPSBzZWxlY3RlZF9maWx0ZXJcblx0fSwgIFxuXHRjaGFuZ2VfaW5wdXRfdmFsdWU6IGZ1bmN0aW9uKGlucHV0KSB7XG5cdCAgICB0aGlzLmlucHV0X3ZhbHVlID0gaW5wdXQ7XG5cdH0sXG5cdGNoYW5nZV9maWx0ZXI6IGZ1bmN0aW9uKHNlbGVjdGVkX2ZpbHRlcikge1xuXHQgICAgdGhpcy5vcHRpb25zX3RvX3Nob3cgPSBudWxsO1xuXHQgICAgdGhpcy5vcHRpb25fc2VsZWN0ZWQgPSBudWxsO1xuXHQgICAgdGhpcy5pbnB1dF92YWx1ZSA9IG51bGxcblx0ICAgIGxldCBmaWx0ZXJzX29wdGlvbnMgPSB0aGlzLiRwcm9wcy5maWx0ZXJzX29wdGlvbnM7XG5cdCAgICAvKiBTZWFyY2ggdGhlIGZpbHRlciBzZWxlY3RlZCAqL1xuXHQgICAgbGV0IGZpbHRlciA9IGZpbHRlcnNfb3B0aW9ucy5maW5kKChmbykgPT4gZm8uaWQgPT0gdGhpcy5maWx0ZXJfdHlwZV9zZWxlY3RlZC5pZCk7XG5cdCAgICBpZiAoZmlsdGVyID09IG51bGwpIHsgXG5cdFx0cmV0dXJuOyBcblx0ICAgIH1cblx0ICAgIC8qIFNldCB0aGUgY29ycmVjdCBmaWx0ZXJzIHRvIGRpc3BsYXkgKi9cblx0ICAgIHRoaXMuaW5wdXRfdHlwZSA9IGZpbHRlci50eXBlO1xuXHQgICAgdGhpcy5vcGVyYXRvcnNfdG9fc2hvdyA9IGZpbHRlci5vcGVyYXRvcnM7XG5cdCAgICB0aGlzLmZpbHRlcl90eXBlX2xhYmVsX3NlbGVjdGVkID0gZmlsdGVyLmxhYmVsO1xuXHQgICAgaWYgKHRoaXMuaW5wdXRfdHlwZSA9PSAnc2VsZWN0Jykge1xuXHRcdHRoaXMub3B0aW9uc190b19zaG93ID0gZmlsdGVyLm9wdGlvbnMuc29ydCgoYSwgYikgPT4ge1xuXHRcdCAgICBpZiAoYSA9PSBudWxsIHx8IGEubGFiZWwgPT0gbnVsbCkgeyByZXR1cm4gLTE7IH1cblx0XHQgICAgaWYgKGIgPT0gbnVsbCB8fCBiLmxhYmVsID09IG51bGwpIHsgcmV0dXJuIDE7IH1cblx0XHQgICAgcmV0dXJuIGEubGFiZWwudG9TdHJpbmcoKS5sb2NhbGVDb21wYXJlKGIubGFiZWwudG9TdHJpbmcoKSk7XG5cdFx0fSk7XG5cdFx0dGhpcy5vcHRpb25fc2VsZWN0ZWQgPSB0aGlzLm9wdGlvbnNfdG9fc2hvd1swXTtcblx0ICAgIH0gZWxzZSBpZiAodGhpcy5pbnB1dF90eXBlID09ICdzZWxlY3Qtd2l0aC1pbnB1dCcpIHtcblx0XHR0aGlzLm9wdGlvbnNfdG9fc2hvdyA9IGZpbHRlci5vcHRpb25zPy5zb3J0KChhLCBiKSA9PiB7XG5cdFx0ICAgIGlmIChhID09IG51bGwgfHwgYS5sYWJlbCA9PSBudWxsKSB7IHJldHVybiAtMTsgfVxuXHRcdCAgICBpZiAoYiA9PSBudWxsIHx8IGIubGFiZWwgPT0gbnVsbCkgeyByZXR1cm4gMTsgfVxuXHRcdCAgICByZXR1cm4gYS5sYWJlbC50b1N0cmluZygpLmxvY2FsZUNvbXBhcmUoYi5sYWJlbC50b1N0cmluZygpKTtcblx0XHR9KTtcblx0XHR0aGlzLm9wdGlvbl9zZWxlY3RlZCA9IHRoaXMub3B0aW9uc190b19zaG93WzBdO1xuXHRcdHRoaXMuZGF0YV9wYXR0ZXJuX3NlbGVjdGVkID0gdGhpcy5nZXRfZGF0YV9wYXR0ZXJuKGZpbHRlci52YWx1ZV90eXBlKTtcblx0ICAgIH0gZWxzZSB7XG5cdFx0dGhpcy5vcHRpb25zX3RvX3Nob3cgPSBudWxsO1xuXHRcdHRoaXMuZGF0YV9wYXR0ZXJuX3NlbGVjdGVkID0gdGhpcy5nZXRfZGF0YV9wYXR0ZXJuKGZpbHRlci52YWx1ZV90eXBlKTtcblx0ICAgIH1cblx0ICAgIFxuXHQgICAgaWYoZmlsdGVyLm9wZXJhdG9ycyAmJiB0aGlzLm9wZXJhdG9yX3NlbGVjdGVkPy5pZCA9PSBudWxsKSB7XG5cdFx0dGhpcy5vcGVyYXRvcl9zZWxlY3RlZCA9IGZpbHRlci5vcGVyYXRvcnNbMF1cblx0ICAgIH1cblx0ICAgIFxuXHQgICAgaWYgKHNlbGVjdGVkX2ZpbHRlciAhPSBudWxsKSB7IFxuXHRcdHRoaXMucG9zdF9jaGFuZ2Uoc2VsZWN0ZWRfZmlsdGVyLCBmaWx0ZXIudmFsdWVfdHlwZSk7IFxuXHQgICAgfVxuXHR9LFxuXHRnZXRfZGF0YV9wYXR0ZXJuOiBmdW5jdGlvbih2YWx1ZV90eXBlKSB7XG5cdCAgICB0aGlzLmlucHV0X3JlcXVpcmVkID0gdHJ1ZTtcblx0ICAgIGlmICh2YWx1ZV90eXBlID09IFwidGV4dFwiKSB7XG5cdFx0dGhpcy5pbnB1dF9yZXF1aXJlZCA9IGZhbHNlO1xuXHRcdHJldHVybiBgLipgO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHJlZ2V4VmFsaWRhdGlvbi5nZXRfZGF0YV9wYXR0ZXJuKHZhbHVlX3R5cGUpO1xuXHQgICAgXG5cdCAgICAvLyBlbHNlIGlmICh2YWx1ZV90eXBlID09IFwiaXBcIikge1xuXHQgICAgLy8gXHRsZXQgcl9pcHY0ID0gTnRvcFV0aWxzLlJFR0VYRVMuaXB2NDtcblx0ICAgIC8vIFx0bGV0IHJfaXB2NF92bGFuID0gcl9pcHY0LnJlcGxhY2UoXCIkXCIsIFwiQFswLTldezAsNX0kXCIpO1xuXHQgICAgLy8gXHRsZXQgcl9pcHY2ID0gTnRvcFV0aWxzLlJFR0VYRVMuaXB2Njtcblx0ICAgIC8vIFx0bGV0IHJfaXB2Nl92bGFuID0gcl9pcHY2LnJlcGxhY2VBbGwoXCIkXCIsIFwiQFswLTldezAsNX0kXCIpO1xuXHQgICAgLy8gXHRyZXR1cm4gYCgke3JfaXB2NH0pfCgke3JfaXB2NF92bGFufSl8KCR7cl9pcHY2fSl8KCR7cl9pcHY2X3ZsYW59KWA7XG5cdCAgICAvLyB9IGVsc2UgaWYgKHZhbHVlX3R5cGUgPT0gXCJjaWRyXCIpIHtcblx0ICAgIC8vIFx0Y29uc29sZS5sb2coXCJ0ZXN0XCIpO1xuXHQgICAgLy8gfVxuXHQgICAgXG5cdCAgICAvLyByZXR1cm4gTnRvcFV0aWxzLlJFR0VYRVNbdmFsdWVfdHlwZV07XG5cdH0sXG5cdGNoZWNrX2Rpc2FibGVfYXBwbHk6IGZ1bmN0aW9uKCkge1xuXHQgICAgbGV0IHJlZ2V4ID0gbmV3IFJlZ0V4cCh0aGlzLmRhdGFfcGF0dGVybl9zZWxlY3RlZCk7XG5cdCAgICBsZXQgZGlzYWJsZV9hcHBseSA9ICF0aGlzLm9wdGlvbnNfdG9fc2hvdyAmJiAoXG5cdFx0KHRoaXMuaW5wdXRfcmVxdWlyZWQgJiYgKHRoaXMuaW5wdXRfdmFsdWUgPT0gbnVsbCB8fCB0aGlzLmlucHV0X3ZhbHVlID09IFwiXCIpKVxuXHRcdCAgICB8fCAocmVnZXgudGVzdCh0aGlzLmlucHV0X3ZhbHVlKSA9PSBmYWxzZSlcblx0ICAgICk7XG5cdCAgICByZXR1cm4gZGlzYWJsZV9hcHBseTtcblx0fSxcblx0YXBwbHk6IGZ1bmN0aW9uKCkge1xuXHQgICAgbGV0IHZhbHVlID0gdGhpcy5pbnB1dF92YWx1ZTtcblx0ICAgIGxldCB2YWx1ZV9sYWJlbCA9IHRoaXMuaW5wdXRfdmFsdWU7XG5cdCAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCAodGhpcy5vcHRpb25fc2VsZWN0ZWQ/LnZhbHVlICE9IG51bGwpKSB7XG5cdFx0bGV0IGZpbHRlciA9IHRoaXMuZmlsdGVyc19vcHRpb25zLmZpbmQoKGZvKSA9PiBmby5pZCA9PSB0aGlzLmZpbHRlcl90eXBlX3NlbGVjdGVkLmlkKTtcbiAgICAgICAgICAgICAgICBcblx0XHRsZXQgb3B0aW9uID0gZmlsdGVyLm9wdGlvbnMuZmluZCgobykgPT4gby52YWx1ZSA9PSB0aGlzLm9wdGlvbl9zZWxlY3RlZC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbiA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbiA9IHRoaXMub3B0aW9uX3NlbGVjdGVkO1xuICAgICAgICAgICAgICAgIH1cblx0XHR2YWx1ZSA9IG9wdGlvbi52YWx1ZTtcblx0XHR2YWx1ZV9sYWJlbCA9IG9wdGlvbi52YWx1ZV9sYWJlbCB8fCBvcHRpb24ubGFiZWw7XG5cdCAgICB9XG5cdCAgICBsZXQgcGFyYW1zID0ge1xuXHRcdGlkOiB0aGlzLmZpbHRlcl90eXBlX3NlbGVjdGVkLmlkLFxuXHRcdGxhYmVsOiB0aGlzLmZpbHRlcl90eXBlX2xhYmVsX3NlbGVjdGVkLFxuXHRcdG9wZXJhdG9yOiB0aGlzLm9wZXJhdG9yX3NlbGVjdGVkLmlkLFxuXHRcdHZhbHVlOiB2YWx1ZSxcblx0XHR2YWx1ZV9sYWJlbDogdmFsdWVfbGFiZWwsXG5cdCAgICB9O1xuXHQgICAgdGhpcy4kZW1pdChcImFwcGx5XCIsIHBhcmFtcyk7XG5cdCAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9jdXN0b21fZXZlbnQobnRvcG5nX2N1c3RvbV9ldmVudHMuTU9EQUxfRklMVEVSU19BUFBMWSwgcGFyYW1zKTtcblx0ICAgIHRoaXMuY2xvc2UoKTtcblx0fSxcblx0Y2xvc2U6IGZ1bmN0aW9uKCkge1xuXHQgICAgdGhpcy4kcmVmc1tcIm1vZGFsXCJdLmNsb3NlKCk7XG5cdH0sXG4gICAgfSxcbn1cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuaW5wdXQgfiAuYWxlcnQge1xuICBkaXNwbGF5OiBub25lO1xufVxuaW5wdXQ6aW52YWxpZCB+IC5hbGVydCB7XG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuPC9zdHlsZT5cbiIsIjx0ZW1wbGF0ZT5cbiAgICA8ZGl2IHN0eWxlPVwid2lkdGg6MTAwJVwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwibWItMVwiPlxuICAgICAgICAgICAgPG1vZGFsLWZpbHRlcnMgOmZpbHRlcnNfb3B0aW9ucz1cIm1vZGFsX2RhdGFcIiBAYXBwbHk9XCJhcHBseV9tb2RhbFwiIHJlZj1cIm1vZGFsX2ZpbHRlcnNcIiA6aWQ9XCJpZF9tb2RhbF9maWx0ZXJzXCI+XG4gICAgICAgICAgICA8L21vZGFsLWZpbHRlcnM+XG4gICAgICAgICAgICA8ZGF0ZS10aW1lLXJhbmdlLXBpY2tlciA6aWQ9XCJpZF9kYXRhX3RpbWVfcmFuZ2VfcGlja2VyXCIgOm1pbl90aW1lX2ludGVydmFsX2lkPVwibWluX3RpbWVfaW50ZXJ2YWxfaWRcIiA6cm91bmRfdGltZT1cInJvdW5kX3RpbWVcIj5cbiAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmJlZ2luPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IHYtaWY9XCJpc19hbGVydF9zdGF0c191cmxcIiBzdHlsZT1cIm1hcmdpbi1yaWdodDowLjFyZW07XCIgY2xhc3M9XCJkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIG1lLTJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJidG4tZ3JvdXBcIiBpZD1cInN0YXR1c1N3aXRjaFwiIHJvbGU9XCJncm91cFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIHYtaWY9XCJwYWdlICE9ICdmbG93J1wiIGhyZWY9XCIjXCIgQGNsaWNrPVwidXBkYXRlX3N0YXR1c192aWV3KCdlbmdhZ2VkJylcIiBjbGFzcz1cImJ0biBidG4tc21cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Y2xhc3M9XCJ7ICdhY3RpdmUnOiBzdGF0dXNfdmlldyA9PSAnZW5nYWdlZCcsICdidG4tc2Vjb25kYXknOiBzdGF0dXNfdmlldyAhPSAnZW5nYWdlZCcsICdidG4tcHJpbWFyeSc6IHN0YXR1c192aWV3ID09ICdlbmdhZ2VkJyB9XCI+PGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1ob3VyZ2xhc3MtaGFsZlwiIHRpdGxlPVwiRW5nYWdlZFwiPjwvaT48L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cIiNcIiBAY2xpY2s9XCJ1cGRhdGVfc3RhdHVzX3ZpZXcoJ2hpc3RvcmljYWwnKVwiIGNsYXNzPVwiYnRuIGJ0bi1zbVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpjbGFzcz1cInsgJ2FjdGl2ZSc6IHN0YXR1c192aWV3ID09ICdoaXN0b3JpY2FsJyB8fCAocGFnZSA9PSAnZmxvdycgJiYgc3RhdHVzX3ZpZXcgPT0gJ2VuZ2FnZWQnKSwgJ2J0bi1zZWNvbmRheSc6IHN0YXR1c192aWV3ICE9ICdoaXN0b3JpY2FsJywgJ2J0bi1wcmltYXJ5Jzogc3RhdHVzX3ZpZXcgPT0gJ2hpc3RvcmljYWwnIHx8IChwYWdlID09ICdmbG93JyAmJiBzdGF0dXNfdmlldyA9PSAnZW5nYWdlZCcpIH1cIj48aSBjbGFzcz1cImZhLXJlZ3VsYXIgZmEtZXllXCIgdGl0bGU9XCJSZXF1aXJlIEF0dGVudGlvblwiPjwvaT48L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSA8YSBocmVmPVwiI1wiIEBjbGljaz1cInVwZGF0ZV9zdGF0dXNfdmlldygnYWNrbm93bGVkZ2VkJylcIiBjbGFzcz1cImJ0biBidG4tc21cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Y2xhc3M9XCJ7ICdhY3RpdmUnOiBzdGF0dXNfdmlldyA9PSAnYWNrbm93bGVkZ2VkJywgJ2J0bi1zZWNvbmRheSc6IHN0YXR1c192aWV3ICE9ICdhY2tub3dsZWRnZWQnLCAnYnRuLXByaW1hcnknOiBzdGF0dXNfdmlldyA9PSAnYWNrbm93bGVkZ2VkJyB9XCI+PGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1jaGVjay1kb3VibGVcIiB0aXRsZT1cIkFja25vd2xlZGdlZFwiPjwvaT48L2E+LS0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cIiNcIiBAY2xpY2s9XCJ1cGRhdGVfc3RhdHVzX3ZpZXcoJ2FueScpXCIgY2xhc3M9XCJidG4gYnRuLXNtXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmNsYXNzPVwieyAnYWN0aXZlJzogc3RhdHVzX3ZpZXcgPT0gJ2FueScsICdidG4tc2Vjb25kYXknOiBzdGF0dXNfdmlldyAhPSAnYW55JywgJ2J0bi1wcmltYXJ5Jzogc3RhdHVzX3ZpZXcgPT0gJ2FueScgfVwiPjxpIGNsYXNzPVwiZmEtc29saWQgZmEtaW5ib3hcIiB0aXRsZT1cIkFsbFwiPjwvaT48L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cdFx0ICAgIDxzbG90IG5hbWU9XCJiZWdpblwiPjwvc2xvdD5cbiAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6ZXh0cmFfYnV0dG9ucz5cbiAgICAgICAgICAgICAgICAgICAgPHNsb3QgbmFtZT1cImV4dHJhX3JhbmdlX2J1dHRvbnNcIj48L3Nsb3Q+XG4gICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgIDwvZGF0ZS10aW1lLXJhbmdlLXBpY2tlcj5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPCEtLSB0YWdpZnkgLS0+XG4gICAgICAgIDxkaXYgdi1pZj1cInBhZ2UgIT0gJ2FsbCdcIiBjbGFzcz1cImQtZmxleCBtdC0xXCIgc3R5bGU9XCJ3aWR0aDoxMDAlXCI+XG4gICAgICAgICAgICA8aW5wdXQgY2xhc3M9XCJ3LTEwMCBmb3JtLWNvbnRyb2wgaC1hdXRvXCIgbmFtZT1cInRhZ3NcIiByZWY9XCJ0YWdpZnlcIiA6cGxhY2Vob2xkZXI9XCJpMThuKCdzaG93X2FsZXJ0cy5maWx0ZXJzJylcIj5cblxuICAgICAgICAgICAgPGJ1dHRvbiB2LXNob3c9XCJtb2RhbF9kYXRhICYmIG1vZGFsX2RhdGEubGVuZ3RoID4gMFwiIGNsYXNzPVwiYnRuIGJ0bi1saW5rXCIgYXJpYS1jb250cm9scz1cImZsb3ctYWxlcnRzLXRhYmxlXCJcbiAgICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCIgaWQ9XCJidG4tYWRkLWFsZXJ0LWZpbHRlclwiIEBjbGljaz1cInNob3dfbW9kYWxfZmlsdGVyc1wiPjxzcGFuPjxpIGNsYXNzPVwiZmFzIGZhLXBsdXNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1vcmlnaW5hbC10aXRsZT1cIlwiIHRpdGxlPVwiQWRkIEZpbHRlclwiPjwvaT48L3NwYW4+XG4gICAgICAgICAgICA8L2J1dHRvbj5cblxuICAgICAgICAgICAgPGJ1dHRvbiB2LXNob3c9XCJtb2RhbF9kYXRhICYmIG1vZGFsX2RhdGEubGVuZ3RoID4gMFwiIGRhdGEtYnMtdG9nZ2xlPVwidG9vbHRpcFwiIGRhdGEtcGxhY2VtZW50PVwiYm90dG9tXCJcbiAgICAgICAgICAgICAgICB0aXRsZT1cInt7IGkxOG4oJ3Nob3dfYWxlcnRzLnJlbW92ZV9maWx0ZXJzJykgfX1cIiBAY2xpY2s9XCJyZW1vdmVfZmlsdGVyc1wiXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJidG4gbXMtMSBteS1hdXRvIGJ0bi1zbSBidG4tcmVtb3ZlLXRhZ3NcIj5cbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS10aW1lc1wiPjwvaT5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPCEtLSBlbmQgdGFnaWZ5IC0tPlxuXG4gICAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIj5cbmltcG9ydCB7IGRlZmF1bHQgYXMgRGF0ZVRpbWVSYW5nZVBpY2tlciB9IGZyb20gXCIuL2RhdGUtdGltZS1yYW5nZS1waWNrZXIudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRmlsdGVycyB9IGZyb20gXCIuL21vZGFsLWZpbHRlcnMudnVlXCI7XG5pbXBvcnQgZmlsdGVyc01hbmFnZXIgZnJvbSBcIi4uL3V0aWxpdGllcy9maWx0ZXJzLW1hbmFnZXIuanNcIjtcblxuXG5mdW5jdGlvbiBnZXRfcGFnZShhbGVydF9zdGF0c19wYWdlKSB7XG4gICAgbGV0IHBhZ2UgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInBhZ2VcIik7XG4gICAgaWYgKHBhZ2UgPT0gbnVsbCkge1xuICAgICAgICBpZiAoYWxlcnRfc3RhdHNfcGFnZSkge1xuICAgICAgICAgICAgcGFnZSA9IFwiYWxsXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYWdlID0gXCJvdmVydmlld1wiO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwYWdlO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRfZmlsdGVyX2NvbnN0KGlzX2FsZXJ0X3N0YXRzX3VybCwgcGFnZSkge1xuICAgIGxldCB1cmxfcmVxdWVzdDtcbiAgICBsZXQgcXVlcnlfcHJlc2V0ID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJxdWVyeV9wcmVzZXRcIik7XG4gICAgaWYgKHF1ZXJ5X3ByZXNldCA9PSBudWxsKSB7IHF1ZXJ5X3ByZXNldCA9IFwiXCI7IH1cbiAgICBpZiAoaXNfYWxlcnRfc3RhdHNfdXJsKSB7XG4gICAgICAgIHVybF9yZXF1ZXN0ID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9hbGVydC9maWx0ZXIvY29uc3RzLmx1YT9wYWdlPSR7cGFnZX0mcXVlcnlfcHJlc2V0PSR7cXVlcnlfcHJlc2V0fWA7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IGFnZ3JlZ2F0ZWQgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImFnZ3JlZ2F0ZWRcIik7XG4gICAgICAgIHVybF9yZXF1ZXN0ID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvZGIvZmlsdGVyL2NvbnN0cy5sdWE/cGFnZT0ke3BhZ2V9JnF1ZXJ5X3ByZXNldD0ke3F1ZXJ5X3ByZXNldH0mYWdncmVnYXRlZD0ke2FnZ3JlZ2F0ZWR9YDtcbiAgICB9XG4gICAgbGV0IGZpbHRlcl9jb25zdHMgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsX3JlcXVlc3QpO1xuICAgIHJldHVybiBmaWx0ZXJfY29uc3RzO1xufVxuXG5sZXQgRklMVEVSU19DT05TVCA9IFtdO1xubGV0IFRBR19PUEVSQVRPUlM7XG5sZXQgREVGSU5FRF9UQUdTO1xuY29uc3QgVklFV19PTkxZX1RBR1MgPSB0cnVlO1xuLyogSW5pdGlhbCBUYWdzICovXG5sZXQgaW5pdGlhbFRhZ3M7XG4vL2xldCBwYWdlSGFuZGxlID0ge307XG5sZXQgVEFHSUZZO1xubGV0IElTX0FMRVJUX1NUQVRTX1VSTCA9IHdpbmRvdy5sb2NhdGlvbi50b1N0cmluZygpLm1hdGNoKC9hbGVydF9zdGF0cy5sdWEvKSAhPSBudWxsO1xubGV0IFNUQVRVU19WSUVXID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJzdGF0dXNcIik7XG5pZiAoU1RBVFVTX1ZJRVcgPT0gbnVsbCB8fCBTVEFUVVNfVklFVyA9PSBcIlwiKSB7XG4gICAgU1RBVFVTX1ZJRVcgPSBcImhpc3RvcmljYWxcIjtcbn1cblxubGV0IFBBR0UgPSBnZXRfcGFnZShJU19BTEVSVF9TVEFUU19VUkwpO1xuXG5jb25zdCBjcmVhdGVfdGFnX2Zyb21fZmlsdGVyID0gZnVuY3Rpb24gKGZpbHRlcikge1xuICAgIGxldCBmX2NvbnN0ID0gRklMVEVSU19DT05TVC5maW5kKChmKSA9PiBmLmlkID09IGZpbHRlci5pZCk7XG4gICAgaWYgKGZfY29uc3QgPT0gbnVsbCkgeyBjb25zb2xlLmVycm9yKFwiY3JlYXRlX3RhZ19mcm9tX2ZpbHRlcjogZmlsdGVyIGNvbnN0IG5vdCBmb3VuZDtcIik7IH1cblxuICAgIGxldCB2YWx1ZV9sYWJlbCA9IGZpbHRlci52YWx1ZTtcbiAgICBpZiAoZl9jb25zdC5vcHRpb25zICE9IG51bGwpIHtcbiAgICAgICAgbGV0IG9wdCA9IGZfY29uc3Qub3B0aW9ucy5maW5kKChvKSA9PiBvLnZhbHVlID09IGZpbHRlci52YWx1ZSk7XG4gICAgICAgIGlmIChvcHQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdmFsdWVfbGFiZWwgPSBvcHQubGFiZWw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgdGFnID0ge1xuICAgICAgICBsYWJlbDogZl9jb25zdC5sYWJlbCxcbiAgICAgICAga2V5OiBmX2NvbnN0LmlkLFxuICAgICAgICB2YWx1ZTogdmFsdWVfbGFiZWwsXG4gICAgICAgIHJlYWxWYWx1ZTogZmlsdGVyLnZhbHVlLFxuICAgICAgICB0aXRsZTogYCR7Zl9jb25zdC5sYWJlbH0ke2ZpbHRlci5vcGVyYXRvcn0ke3ZhbHVlX2xhYmVsfWAsXG4gICAgICAgIHNlbGVjdGVkT3BlcmF0b3I6IGZpbHRlci5vcGVyYXRvcixcbiAgICB9O1xuICAgIGlmICh0YWcudmFsdWUgPT0gXCJcIikgeyB0YWcudmFsdWUgPSBcIicnXCIgfVxuICAgIGlmICh0YWcucmVhbFZhbHVlID09IG51bGwgfHwgdGFnLnNlbGVjdGVkT3BlcmF0b3IgPT0gbnVsbCB8fCB0YWcuc2VsZWN0ZWRPcGVyYXRvciA9PSBcIlwiKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gdGFnO1xufVxuXG5jb25zdCBsb2FkX2ZpbHRlcnNfZGF0YSA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBGSUxURVJTX0NPTlNUID0gYXdhaXQgZ2V0X2ZpbHRlcl9jb25zdChJU19BTEVSVF9TVEFUU19VUkwsIFBBR0UpO1xuICAgIEZJTFRFUlNfQ09OU1QuZmlsdGVyKCh4KSA9PiB4LmxhYmVsID09IG51bGwpLmZvckVhY2goKHgpID0+IHsgY29uc29sZS5lcnJvcihgbGFiZWwgbm90IGRlZmluZWQgZm9yIGZpbHRlciAke0pTT04uc3RyaW5naWZ5KHgpfWApOyB4LmxhYmVsID0gXCJcIjsgfSk7XG4gICAgRklMVEVSU19DT05TVC5zb3J0KChhLCBiKSA9PiBhLmxhYmVsLmxvY2FsZUNvbXBhcmUoYi5sYWJlbCkpO1xuICAgIGkxOG5fZXh0LnRhZ3MgPSB7fTtcbiAgICBUQUdfT1BFUkFUT1JTID0ge307XG4gICAgREVGSU5FRF9UQUdTID0ge307XG4gICAgRklMVEVSU19DT05TVC5mb3JFYWNoKChmX2RlZikgPT4ge1xuICAgICAgICBpMThuX2V4dC50YWdzW2ZfZGVmLmlkXSA9IGZfZGVmLmxhYmVsO1xuICAgICAgICBmX2RlZi5vcGVyYXRvcnMuZm9yRWFjaCgob3ApID0+IFRBR19PUEVSQVRPUlNbb3AuaWRdID0gb3AubGFiZWwpO1xuICAgICAgICBERUZJTkVEX1RBR1NbZl9kZWYuaWRdID0gZl9kZWYub3BlcmF0b3JzLm1hcCgob3ApID0+IG9wLmlkKTtcbiAgICB9KTtcbiAgICBsZXQgZW50cmllcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJpZXMoKTtcbiAgICBsZXQgZmlsdGVycyA9IFtdO1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIGVudHJpZXMpIHtcbiAgICAgICAgbGV0IGZpbHRlcl9kZWYgPSBGSUxURVJTX0NPTlNULmZpbmQoKGZjKSA9PiBmYy5pZCA9PSBrZXkpO1xuICAgICAgICBpZiAoZmlsdGVyX2RlZiAhPSBudWxsKSB7XG4gICAgICAgICAgICBsZXQgb3B0aW9uc19zdHJpbmcgPSB2YWx1ZS5zcGxpdChcIixcIik7XG4gICAgICAgICAgICBvcHRpb25zX3N0cmluZy5mb3JFYWNoKChvcHRfc3Rpcm5nKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IFt2YWx1ZSwgb3BlcmF0b3JdID0gb3B0X3N0aXJuZy5zcGxpdChcIjtcIik7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICBvcGVyYXRvciA9PSBudWxsIHx8IHZhbHVlID09IG51bGwgfHwgb3BlcmF0b3IgPT0gXCJcIlxuICAgICAgICAgICAgICAgICAgICB8fCAoZmlsdGVyX2RlZi5vcHRpb25zICE9IG51bGwgJiYgZmlsdGVyX2RlZi5vcHRpb25zLmZpbmQoKG9wdCkgPT4gb3B0LnZhbHVlID09IHZhbHVlKSA9PSBudWxsKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXHRcdGxldCB2YWx1ZV9sYWJlbCA9IHZhbHVlO1xuXHRcdGlmIChmaWx0ZXJfZGVmLnZhbHVlX3R5cGUgPT0gXCJhcnJheVwiKSB7XG5cdFx0ICAgIHZhbHVlX2xhYmVsID0gZmlsdGVyX2RlZj8ub3B0aW9ucz8uZmluZCgob3B0KSA9PiBvcHQudmFsdWUgPT0gdmFsdWUpPy5sYWJlbDtcblx0XHR9XG4gICAgICAgICAgICAgICAgZmlsdGVycy5wdXNoKHsgaWQ6IGZpbHRlcl9kZWYuaWQsIG9wZXJhdG9yOiBvcGVyYXRvciwgdmFsdWU6IHZhbHVlLCBsYWJlbDogZmlsdGVyX2RlZi5sYWJlbCwgdmFsdWVfbGFiZWwgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmlsdGVycztcbiAgICAvLyBcImw3cHJvdG89WFhYO2VxXCJcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIHByb3BzOiB7XG4gICAgICAgIGlkOiBTdHJpbmcsXG4gICAgICAgIG1pbl90aW1lX2ludGVydmFsX2lkOiBTdHJpbmcsXG4gICAgICAgIHJvdW5kX3RpbWU6IEJvb2xlYW4sXG4gICAgfSxcbiAgICBjb21wb25lbnRzOiB7XG4gICAgICAgICdkYXRlLXRpbWUtcmFuZ2UtcGlja2VyJzogRGF0ZVRpbWVSYW5nZVBpY2tlcixcbiAgICAgICAgJ21vZGFsLWZpbHRlcnMnOiBNb2RhbEZpbHRlcnMsXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBGaXJzdCBtZXRob2QgY2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjcmVhdGVkLlxuICAgICAqL1xuICAgIGNyZWF0ZWQoKSB7XG4gICAgfSxcbiAgICBhc3luYyBtb3VudGVkKCkge1xuICAgICAgICBsZXQgZHRfcmFuZ2VfcGlja2VyX21vdW50ZWQgPSBudG9wbmdfc3luYy5vbl9yZWFkeSh0aGlzLmlkX2RhdGFfdGltZV9yYW5nZV9waWNrZXIpO1xuICAgICAgICBsZXQgbW9kYWxfZmlsdGVyc19tb3VudGVkID0gbnRvcG5nX3N5bmMub25fcmVhZHkodGhpcy5pZF9tb2RhbF9maWx0ZXJzKTtcbiAgICAgICAgYXdhaXQgZHRfcmFuZ2VfcGlja2VyX21vdW50ZWQ7XG5cbiAgICAgICAgaWYgKHRoaXMucGFnZSAhPSAnYWxsJykge1xuICAgICAgICAgICAgbGV0IGZpbHRlcnMgPSBhd2FpdCBsb2FkX2ZpbHRlcnNfZGF0YSgpO1xuXG4gICAgICAgICAgICBUQUdJRlkgPSBjcmVhdGVfdGFnaWZ5KHRoaXMpO1xuICAgICAgICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfZXZlbnQobnRvcG5nX2V2ZW50cy5GSUxURVJTX0NIQU5HRSwgeyBmaWx0ZXJzIH0pO1xuICAgICAgICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2V2ZW50X2NoYW5nZSh0aGlzLiRwcm9wc1tcImlkXCJdLCBudG9wbmdfZXZlbnRzLkZJTFRFUlNfQ0hBTkdFLCAoc3RhdHVzKSA9PiB0aGlzLnJlbG9hZF9zdGF0dXMoc3RhdHVzKSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tb2RhbF9kYXRhID0gRklMVEVSU19DT05TVDtcblxuICAgICAgICAvL2F3YWl0IG1vZGFsX2ZpbHRlcnNfbW91bnRlZDtcbiAgICAgICAgbnRvcG5nX3N5bmMucmVhZHkodGhpcy4kcHJvcHNbXCJpZFwiXSk7XG4gICAgfSxcbiAgICBkYXRhKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaTE4bjogaTE4bixcbiAgICAgICAgICAgIGlkX21vZGFsX2ZpbHRlcnM6IGAke3RoaXMuJHByb3BzLmlkfV9tb2RhbF9maWx0ZXJzYCxcbiAgICAgICAgICAgIGlkX2RhdGFfdGltZV9yYW5nZV9waWNrZXI6IGAke3RoaXMuJHByb3BzLmlkfV9kYXRlLXRpbWUtcmFuZ2UtcGlja2VyYCxcbiAgICAgICAgICAgIHNob3dfZmlsdGVyczogZmFsc2UsXG4gICAgICAgICAgICBlZGl0X3RhZzogbnVsbCxcbiAgICAgICAgICAgIGlzX2FsZXJ0X3N0YXRzX3VybDogSVNfQUxFUlRfU1RBVFNfVVJMLFxuICAgICAgICAgICAgc3RhdHVzX3ZpZXc6IFNUQVRVU19WSUVXLFxuICAgICAgICAgICAgcGFnZTogUEFHRSxcbiAgICAgICAgICAgIG1vZGFsX2RhdGE6IFtdLFxuICAgICAgICAgICAgbGFzdF9maWx0ZXJzOiBbXSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgaXNfZmlsdGVyX2RlZmluZWQ6IGZ1bmN0aW9uIChmaWx0ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBERUZJTkVEX1RBR1NbZmlsdGVyLmlkXSAhPSBudWxsO1xuICAgICAgICB9LFxuICAgICAgICB1cGRhdGVfc3RhdHVzX3ZpZXc6IGZ1bmN0aW9uIChzdGF0dXMpIHtcbiAgICAgICAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcInN0YXR1c1wiLCBzdGF0dXMpO1xuICAgICAgICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnJlbG9hZF91cmwoKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2hvd19tb2RhbF9maWx0ZXJzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLiRyZWZzW1wibW9kYWxfZmlsdGVyc1wiXS5zaG93KCk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlbW92ZV9maWx0ZXJzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBsZXQgZmlsdGVycyA9IFtdO1xuICAgICAgICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfZXZlbnQobnRvcG5nX2V2ZW50cy5GSUxURVJTX0NIQU5HRSwgeyBmaWx0ZXJzIH0pO1xuICAgICAgICB9LFxuICAgICAgICByZWxvYWRfc3RhdHVzOiBmdW5jdGlvbiAoc3RhdHVzKSB7XG4gICAgICAgICAgICBsZXQgZmlsdGVycyA9IHN0YXR1cy5maWx0ZXJzO1xuICAgICAgICAgICAgaWYgKGZpbHRlcnMgPT0gbnVsbCkgeyByZXR1cm47IH1cbiAgICAgICAgICAgIC8vIGRlbGV0ZSBhbGwgcHJldmlvdXMgZmlsdGVyXG4gICAgICAgICAgICBudG9wbmdfdXJsX21hbmFnZXIuZGVsZXRlX3BhcmFtcyhGSUxURVJTX0NPTlNULm1hcCgoZikgPT4gZi5pZCkpO1xuICAgICAgICAgICAgVEFHSUZZLnRhZ2lmeS5yZW1vdmVBbGxUYWdzKCk7XG4gICAgICAgICAgICBsZXQgZmlsdGVyc19vYmplY3QgPSBmaWx0ZXJzTWFuYWdlci5nZXRfZmlsdGVyc19vYmplY3QoZmlsdGVycyk7XG4gICAgICAgICAgICBudG9wbmdfdXJsX21hbmFnZXIuYWRkX29ial90b191cmwoZmlsdGVyc19vYmplY3QpO1xuICAgICAgICAgICAgZmlsdGVycy5mb3JFYWNoKChmKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHRhZyA9IGNyZWF0ZV90YWdfZnJvbV9maWx0ZXIoZik7XG4gICAgICAgICAgICAgICAgaWYgKHRhZyA9PSBudWxsKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgICAgIFRBR0lGWS5hZGRGaWx0ZXJUYWcodGFnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5sYXN0X2ZpbHRlcnMgPSBmaWx0ZXJzO1xuICAgICAgICB9LFxuICAgICAgICBhcHBseV9tb2RhbDogZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICAgICAgbGV0IHN0YXR1cyA9IG50b3BuZ19zdGF0dXNfbWFuYWdlci5nZXRfc3RhdHVzKCk7XG4gICAgICAgICAgICBsZXQgZmlsdGVycyA9IHN0YXR1cy5maWx0ZXJzO1xuICAgICAgICAgICAgaWYgKGZpbHRlcnMgPT0gbnVsbCkgeyBmaWx0ZXJzID0gW107IH1cbiAgICAgICAgICAgIGlmICh0aGlzLmVkaXRfdGFnICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBmaWx0ZXJzID0gZmlsdGVycy5maWx0ZXIoKGYpID0+IGYuaWQgIT0gdGhpcy5lZGl0X3RhZy5rZXkgfHwgZi52YWx1ZSAhPSB0aGlzLmVkaXRfdGFnLnJlYWxWYWx1ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5lZGl0X3RhZyA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaWx0ZXJzLnB1c2gocGFyYW1zKTtcbiAgICAgICAgICAgIC8vIHRyaWdnZXIgZXZlbnQgYW5kIHRoZW4gY2FsbCByZWxvYWRfc3RhdHVzXG4gICAgICAgICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9ldmVudChudG9wbmdfZXZlbnRzLkZJTFRFUlNfQ0hBTkdFLCB7IGZpbHRlcnMgfSk7XG4gICAgICAgIH0sXG4gICAgfSxcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZV90YWdpZnkocmFuZ2VfcGlja2VyX3Z1ZSkge1xuICAgIC8vIGNyZWF0ZSB0YWdpZnlcbiAgICBjb25zdCB0YWdpZnkgPSBuZXcgVGFnaWZ5KHJhbmdlX3BpY2tlcl92dWUuJHJlZnNbXCJ0YWdpZnlcIl0sIHtcbiAgICAgICAgZHVwbGljYXRlczogdHJ1ZSxcbiAgICAgICAgZGVsaW1pdGVyczogbnVsbCxcbiAgICAgICAgZHJvcGRvd246IHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IDEsIC8vIHN1Z2dlc3QgdGFncyBhZnRlciBhIHNpbmdsZSBjaGFyYWN0ZXIgaW5wdXRcbiAgICAgICAgICAgIGNsYXNzbmFtZTogJ2V4dHJhLXByb3BlcnRpZXMnIC8vIGN1c3RvbSBjbGFzcyBmb3IgdGhlIHN1Z2dlc3Rpb25zIGRyb3Bkb3duXG4gICAgICAgIH0sXG4gICAgICAgIGF1dG9Db21wbGV0ZTogeyBlbmFibGVkOiBmYWxzZSB9LFxuICAgICAgICB0ZW1wbGF0ZXM6IHtcbiAgICAgICAgICAgIHRhZzogZnVuY3Rpb24gKHRhZ0RhdGEpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYDx0YWcgdGl0bGU9JyR7dGFnRGF0YS52YWx1ZX0nIGNvbnRlbnRlZGl0YWJsZT0nZmFsc2UnIHNwZWxsY2hlY2s9XCJmYWxzZVwiIGNsYXNzPSd0YWdpZnlfX3RhZyc+XG4gICAgICAgICAgICAgICAgICAgICAgICA8eCB0aXRsZT0ncmVtb3ZlIHRhZycgY2xhc3M9J3RhZ2lmeV9fdGFnX19yZW1vdmVCdG4nPjwveD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj4ke3RhZ0RhdGEubGFiZWwgPyB0YWdEYXRhLmxhYmVsIDogdGFnRGF0YS5rZXl9PC9iPiZuYnNwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgPGIgY2xhc3M9J29wZXJhdG9yJz4ke3RhZ0RhdGEuc2VsZWN0ZWRPcGVyYXRvciA/IFRBR19PUEVSQVRPUlNbdGFnRGF0YS5zZWxlY3RlZE9wZXJhdG9yXSA6ICc9J308L2I+Jm5ic3A7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J3RhZ2lmeV9fdGFnLXRleHQnPiR7dGFnRGF0YS52YWx1ZX08L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC90YWc+YFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEFuIGVycm9yIG9jY3VyZWQgd2hlbiBjcmVhdGluZyBhIG5ldyB0YWc6ICR7ZXJyfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHZhbGlkYXRlOiBmdW5jdGlvbiAodGFnRGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuICh0eXBlb2YgdGFnRGF0YS5rZXkgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIHRhZ0RhdGEuc2VsZWN0ZWRPcGVyYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgdGFnRGF0YS52YWx1ZSAhPT0gJ3VuZGVmaW5lZCcpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIGFkZCBleGlzdGluZyB0YWdzXG4gICAgICAgIHRhZ2lmeS5hZGRUYWdzKGluaXRpYWxUYWdzKTtcbiAgICB9KTsgLyogJChkb2N1bWVudCkucmVhZHkoKSAqL1xuXG4gICAgY29uc3QgY3JlYXRlVmFsdWVGcm9tVGFnID0gZnVuY3Rpb24gKHRhZykge1xuICAgICAgICBpZiAoIXRhZy5zZWxlY3RlZE9wZXJhdG9yKSB0YWcuc2VsZWN0ZWRPcGVyYXRvciA9ICdlcSc7XG4gICAgICAgIGxldCB2YWwgPSB0YWcucmVhbFZhbHVlICE9IG51bGwgPyB0YWcucmVhbFZhbHVlIDogdGFnLnZhbHVlO1xuICAgICAgICBsZXQgdmFsdWUgPSBgJHt2YWx9OyR7dGFnLnNlbGVjdGVkT3BlcmF0b3J9YDtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIGNvbnN0IGFkZEZpbHRlclRhZyA9IGFzeW5jIGZ1bmN0aW9uICh0YWcpIHtcbiAgICAgICAgLyogQ29udmVydCB2YWx1ZXMgdG8gc3RyaW5nICh0aGlzIGF2b2lkcyBpc3N1ZXMgZS5nLiB3aXRoIDApICovXG4gICAgICAgIGlmICh0eXBlb2YgdGFnLnJlYWxWYWx1ZSA9PSAnbnVtYmVyJykgeyB0YWcucmVhbFZhbHVlID0gJycgKyB0YWcucmVhbFZhbHVlOyB9XG4gICAgICAgIGlmICh0eXBlb2YgdGFnLnZhbHVlID09ICdudW1iZXInKSB7IHRhZy52YWx1ZSA9ICcnICsgdGFnLnZhbHVlOyB9XG5cbiAgICAgICAgY29uc3QgZXhpc3RpbmdUYWdFbG1zID0gdGFnaWZ5LmdldFRhZ0VsbXMoKTtcblxuICAgICAgICAvKiBMb29rdXAgYnkga2V5LCB2YWx1ZSBhbmQgb3BlcmF0b3IgKGRvIG5vdCBhZGQgdGhlIHNhbWUga2V5IGFuZCB2YWx1ZSBtdWx0aXBsZSB0aW1lcykgKi9cbiAgICAgICAgbGV0IGV4aXN0aW5nVGFnRWxlbWVudCA9IGV4aXN0aW5nVGFnRWxtcy5maW5kKGh0bWxUYWcgPT5cbiAgICAgICAgICAgIGh0bWxUYWcuZ2V0QXR0cmlidXRlKCdrZXknKSA9PT0gdGFnLmtleVxuICAgICAgICAgICAgJiYgaHRtbFRhZy5nZXRBdHRyaWJ1dGUoJ3JlYWxWYWx1ZScpID09PSB0YWcucmVhbFZhbHVlXG4gICAgICAgICAgICAvLyYmIGh0bWxUYWcuZ2V0QXR0cmlidXRlKCdzZWxlY3RlZE9wZXJhdG9yJykgPT09IHRhZy5zZWxlY3RlZE9wZXJhdG9yXG4gICAgICAgICk7XG4gICAgICAgIGxldCBleGlzdGluZ1RhZyA9IHRhZ2lmeS50YWdEYXRhKGV4aXN0aW5nVGFnRWxlbWVudCk7XG4gICAgICAgIGlmIChleGlzdGluZ1RhZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBoYXMgdGhlIHRhZyBhbiBvcGVyYXRvciBvYmplY3Q/XG4gICAgICAgIGlmIChERUZJTkVEX1RBR1NbdGFnLmtleV0gJiYgIUFycmF5LmlzQXJyYXkoREVGSU5FRF9UQUdTW3RhZy5rZXldKSkge1xuICAgICAgICAgICAgdGFnLm9wZXJhdG9ycyA9IERFRklORURfVEFHU1t0YWcua2V5XS5vcGVyYXRvcnM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRhZy5zZWxlY3RlZE9wZXJhdG9yKSB7XG4gICAgICAgICAgICB0YWcuc2VsZWN0ZWRPcGVyYXRvciA9ICdlcSc7XG4gICAgICAgIH1cbiAgICAgICAgLy8gYWRkIGZpbHRlciFcbiAgICAgICAgdGFnaWZ5LmFkZFRhZ3MoW3RhZ10pO1xuICAgIH1cblxuICAgIC8vIHdoZW4gYW4gdXNlciByZW1vdmUgdGhlIHRhZ1xuICAgIHRhZ2lmeS5vbigncmVtb3ZlJywgYXN5bmMgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgY29uc3Qga2V5ID0gZS5kZXRhaWwuZGF0YS5rZXk7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gZS5kZXRhaWwuZGF0YS5yZWFsVmFsdWU7XG4gICAgICAgIGNvbnN0IHN0YXR1cyA9IG50b3BuZ19zdGF0dXNfbWFuYWdlci5nZXRfc3RhdHVzKCk7XG5cbiAgICAgICAgaWYgKGtleSA9PT0gdW5kZWZpbmVkKSB7IHJldHVybjsgfVxuICAgICAgICBpZiAoc3RhdHVzLmZpbHRlcnMgPT0gbnVsbCkgeyByZXR1cm47IH1cblxuICAgICAgICBjb25zdCBmaWx0ZXJzID0gc3RhdHVzLmZpbHRlcnMuZmlsdGVyKChmKSA9PiAoZi5pZCAhPSBrZXkgfHwgKGYuaWQgPT0ga2V5ICYmIGYudmFsdWUgIT0gdmFsdWUpKSk7XG4gICAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2V2ZW50KG50b3BuZ19ldmVudHMuRklMVEVSU19DSEFOR0UsIHsgZmlsdGVycyB9KTtcbiAgICB9KTtcblxuICAgIHRhZ2lmeS5vbignYWRkJywgYXN5bmMgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgY29uc3QgZGV0YWlsID0gZS5kZXRhaWw7XG4gICAgICAgIGlmIChkZXRhaWwuZGF0YSA9PT0gdW5kZWZpbmVkKSB7IHJldHVybjsgfVxuICAgICAgICBjb25zdCB0YWcgPSBkZXRhaWwuZGF0YTtcbiAgICAgICAgLy8gbGV0J3MgY2hlY2sgaWYgdGhlIHRhZyBoYXMgYSBrZXkgZmllbGRcbiAgICAgICAgaWYgKCF0YWcua2V5KSB7XG4gICAgICAgICAgICB0YWdpZnkucmVtb3ZlVGFncyhbZS5kZXRhaWwudGFnXSk7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBUYWcgJ2NsaWNrJyBldmVudCBoYW5kbGVyIHRvIG9wZW4gdGhlICdFZGl0JyBtb2RhbC4gTm90ZTogdGhpcyBwcmV2ZW50c1xuICAgIC8vIGlubGluZSBlZGl0aW5nIG9mIHRoZSB0YWcgKCdlZGl0OnVwZGF0ZWQnIGlzIG5ldmVyIGNhbGxlZCBhcyBhIGNvbnNlcXVlbmNlKVxuICAgIHRhZ2lmeS5vbignY2xpY2snLCBhc3luYyBmdW5jdGlvbiAoZSkge1xuICAgICAgICBjb25zdCBkZXRhaWwgPSBlLmRldGFpbDtcbiAgICAgICAgaWYgKGRldGFpbC5kYXRhID09PSB1bmRlZmluZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgIGlmIChkZXRhaWwuZGF0YS5rZXkgPT09IHVuZGVmaW5lZCkgeyByZXR1cm47IH1cbiAgICAgICAgY29uc3QgdGFnID0gZGV0YWlsLmRhdGE7XG4gICAgICAgIC8vIHJlbWVtYmVyIHRoYXQgdGhpcyB0YWcgYWxyZWFkeSBleGl4dHNcbiAgICAgICAgcmFuZ2VfcGlja2VyX3Z1ZS5lZGl0X3RhZyA9IHRhZztcbiAgICAgICAgLy8gc2hvdyBtb2RhbC1maWx0ZXJzXG4gICAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChudG9wbmdfY3VzdG9tX2V2ZW50cy5TSE9XX01PREFMX0ZJTFRFUlMsIHsgaWQ6IHRhZy5rZXksIG9wZXJhdG9yOiB0YWcuc2VsZWN0ZWRPcGVyYXRvciwgdmFsdWU6IHRhZy5yZWFsVmFsdWUgfSk7XG4gICAgfSk7XG5cbiAgICB0YWdpZnkub24oJ2VkaXQ6dXBkYXRlZCcsIGFzeW5jIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIlVQREFURURcIik7XG4gICAgICAgIHJldHVybjtcbiAgICB9KTtcblxuICAgICQoYHRhZ3NgKS5vbignY2hhbmdlJywgJ3NlbGVjdC5vcGVyYXRvcicsIGFzeW5jIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIlRBR1MgY2hhbmdlXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGFnaWZ5LFxuICAgICAgICBhZGRGaWx0ZXJUYWcsXG4gICAgfTtcbn1cbjwvc2NyaXB0PlxuXG5cbjxzdHlsZSBzY29wZWQ+XG4udGFnaWZ5X19pbnB1dCB7XG4gICAgbWluLXdpZHRoOiAxNzVweDtcbn1cblxuLnRhZ2lmeV9fdGFnIHtcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgIG1hcmdpbjogM3B4IDBweCA1cHggNXB4O1xufVxuXG4udGFnaWZ5X190YWcgc2VsZWN0Lm9wZXJhdG9yIHtcbiAgICBtYXJnaW46IDBweCA0cHg7XG4gICAgYm9yZGVyOiAxcHggc29saWQgI2M0YzRjNDtcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XG59XG5cbi50YWdpZnlfX3RhZyBiLm9wZXJhdG9yIHtcbiAgICBtYXJnaW46IDBweCA0cHg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gICAgYm9yZGVyOiAxcHggc29saWQgI2M0YzRjNDtcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgcGFkZGluZzogMC4wNWVtIDAuMmVtO1xufVxuXG4udGFnaWZ5X190YWc+ZGl2IHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG59XG48L3N0eWxlPlxuIiwiPHRlbXBsYXRlPlxuICAgIDxkaXYgc3R5bGU9XCJ3aWR0aDoxMDAlXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJtYi0xXCI+XG4gICAgICAgICAgICA8bW9kYWwtZmlsdGVycyA6ZmlsdGVyc19vcHRpb25zPVwibW9kYWxfZGF0YVwiIEBhcHBseT1cImFwcGx5X21vZGFsXCIgcmVmPVwibW9kYWxfZmlsdGVyc1wiIDppZD1cImlkX21vZGFsX2ZpbHRlcnNcIj5cbiAgICAgICAgICAgIDwvbW9kYWwtZmlsdGVycz5cbiAgICAgICAgICAgIDxkYXRlLXRpbWUtcmFuZ2UtcGlja2VyIDppZD1cImlkX2RhdGFfdGltZV9yYW5nZV9waWNrZXJcIiA6bWluX3RpbWVfaW50ZXJ2YWxfaWQ9XCJtaW5fdGltZV9pbnRlcnZhbF9pZFwiIDpyb3VuZF90aW1lPVwicm91bmRfdGltZVwiPlxuICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6YmVnaW4+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgdi1pZj1cImlzX2FsZXJ0X3N0YXRzX3VybFwiIHN0eWxlPVwibWFyZ2luLXJpZ2h0OjAuMXJlbTtcIiBjbGFzcz1cImQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIgbWUtMlwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJ0bi1ncm91cFwiIGlkPVwic3RhdHVzU3dpdGNoXCIgcm9sZT1cImdyb3VwXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgdi1pZj1cInBhZ2UgIT0gJ2Zsb3cnXCIgaHJlZj1cIiNcIiBAY2xpY2s9XCJ1cGRhdGVfc3RhdHVzX3ZpZXcoJ2VuZ2FnZWQnKVwiIGNsYXNzPVwiYnRuIGJ0bi1zbVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpjbGFzcz1cInsgJ2FjdGl2ZSc6IHN0YXR1c192aWV3ID09ICdlbmdhZ2VkJywgJ2J0bi1zZWNvbmRheSc6IHN0YXR1c192aWV3ICE9ICdlbmdhZ2VkJywgJ2J0bi1wcmltYXJ5Jzogc3RhdHVzX3ZpZXcgPT0gJ2VuZ2FnZWQnIH1cIj48aSBjbGFzcz1cImZhLXNvbGlkIGZhLWhvdXJnbGFzcy1oYWxmXCIgdGl0bGU9XCJFbmdhZ2VkXCI+PC9pPjwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiI1wiIEBjbGljaz1cInVwZGF0ZV9zdGF0dXNfdmlldygnaGlzdG9yaWNhbCcpXCIgY2xhc3M9XCJidG4gYnRuLXNtXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmNsYXNzPVwieyAnYWN0aXZlJzogc3RhdHVzX3ZpZXcgPT0gJ2hpc3RvcmljYWwnIHx8IChwYWdlID09ICdmbG93JyAmJiBzdGF0dXNfdmlldyA9PSAnZW5nYWdlZCcpLCAnYnRuLXNlY29uZGF5Jzogc3RhdHVzX3ZpZXcgIT0gJ2hpc3RvcmljYWwnLCAnYnRuLXByaW1hcnknOiBzdGF0dXNfdmlldyA9PSAnaGlzdG9yaWNhbCcgfHwgKHBhZ2UgPT0gJ2Zsb3cnICYmIHN0YXR1c192aWV3ID09ICdlbmdhZ2VkJykgfVwiPjxpIGNsYXNzPVwiZmEtcmVndWxhciBmYS1leWVcIiB0aXRsZT1cIlJlcXVpcmUgQXR0ZW50aW9uXCI+PC9pPjwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIDxhIGhyZWY9XCIjXCIgQGNsaWNrPVwidXBkYXRlX3N0YXR1c192aWV3KCdhY2tub3dsZWRnZWQnKVwiIGNsYXNzPVwiYnRuIGJ0bi1zbVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpjbGFzcz1cInsgJ2FjdGl2ZSc6IHN0YXR1c192aWV3ID09ICdhY2tub3dsZWRnZWQnLCAnYnRuLXNlY29uZGF5Jzogc3RhdHVzX3ZpZXcgIT0gJ2Fja25vd2xlZGdlZCcsICdidG4tcHJpbWFyeSc6IHN0YXR1c192aWV3ID09ICdhY2tub3dsZWRnZWQnIH1cIj48aSBjbGFzcz1cImZhLXNvbGlkIGZhLWNoZWNrLWRvdWJsZVwiIHRpdGxlPVwiQWNrbm93bGVkZ2VkXCI+PC9pPjwvYT4tLT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiI1wiIEBjbGljaz1cInVwZGF0ZV9zdGF0dXNfdmlldygnYW55JylcIiBjbGFzcz1cImJ0biBidG4tc21cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Y2xhc3M9XCJ7ICdhY3RpdmUnOiBzdGF0dXNfdmlldyA9PSAnYW55JywgJ2J0bi1zZWNvbmRheSc6IHN0YXR1c192aWV3ICE9ICdhbnknLCAnYnRuLXByaW1hcnknOiBzdGF0dXNfdmlldyA9PSAnYW55JyB9XCI+PGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1pbmJveFwiIHRpdGxlPVwiQWxsXCI+PC9pPjwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cblx0XHQgICAgPHNsb3QgbmFtZT1cImJlZ2luXCI+PC9zbG90PlxuICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDpleHRyYV9idXR0b25zPlxuICAgICAgICAgICAgICAgICAgICA8c2xvdCBuYW1lPVwiZXh0cmFfcmFuZ2VfYnV0dG9uc1wiPjwvc2xvdD5cbiAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgPC9kYXRlLXRpbWUtcmFuZ2UtcGlja2VyPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8IS0tIHRhZ2lmeSAtLT5cbiAgICAgICAgPGRpdiB2LWlmPVwicGFnZSAhPSAnYWxsJ1wiIGNsYXNzPVwiZC1mbGV4IG10LTFcIiBzdHlsZT1cIndpZHRoOjEwMCVcIj5cbiAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cInctMTAwIGZvcm0tY29udHJvbCBoLWF1dG9cIiBuYW1lPVwidGFnc1wiIHJlZj1cInRhZ2lmeVwiIDpwbGFjZWhvbGRlcj1cImkxOG4oJ3Nob3dfYWxlcnRzLmZpbHRlcnMnKVwiPlxuXG4gICAgICAgICAgICA8YnV0dG9uIHYtc2hvdz1cIm1vZGFsX2RhdGEgJiYgbW9kYWxfZGF0YS5sZW5ndGggPiAwXCIgY2xhc3M9XCJidG4gYnRuLWxpbmtcIiBhcmlhLWNvbnRyb2xzPVwiZmxvdy1hbGVydHMtdGFibGVcIlxuICAgICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIiBpZD1cImJ0bi1hZGQtYWxlcnQtZmlsdGVyXCIgQGNsaWNrPVwic2hvd19tb2RhbF9maWx0ZXJzXCI+PHNwYW4+PGkgY2xhc3M9XCJmYXMgZmEtcGx1c1wiXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLW9yaWdpbmFsLXRpdGxlPVwiXCIgdGl0bGU9XCJBZGQgRmlsdGVyXCI+PC9pPjwvc3Bhbj5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuXG4gICAgICAgICAgICA8YnV0dG9uIHYtc2hvdz1cIm1vZGFsX2RhdGEgJiYgbW9kYWxfZGF0YS5sZW5ndGggPiAwXCIgZGF0YS1icy10b2dnbGU9XCJ0b29sdGlwXCIgZGF0YS1wbGFjZW1lbnQ9XCJib3R0b21cIlxuICAgICAgICAgICAgICAgIHRpdGxlPVwie3sgaTE4bignc2hvd19hbGVydHMucmVtb3ZlX2ZpbHRlcnMnKSB9fVwiIEBjbGljaz1cInJlbW92ZV9maWx0ZXJzXCJcbiAgICAgICAgICAgICAgICBjbGFzcz1cImJ0biBtcy0xIG15LWF1dG8gYnRuLXNtIGJ0bi1yZW1vdmUtdGFnc1wiPlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLXRpbWVzXCI+PC9pPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8IS0tIGVuZCB0YWdpZnkgLS0+XG5cbiAgICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgdHlwZT1cInRleHQvamF2YXNjcmlwdFwiPlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRlVGltZVJhbmdlUGlja2VyIH0gZnJvbSBcIi4vZGF0ZS10aW1lLXJhbmdlLXBpY2tlci52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxGaWx0ZXJzIH0gZnJvbSBcIi4vbW9kYWwtZmlsdGVycy52dWVcIjtcbmltcG9ydCBmaWx0ZXJzTWFuYWdlciBmcm9tIFwiLi4vdXRpbGl0aWVzL2ZpbHRlcnMtbWFuYWdlci5qc1wiO1xuXG5cbmZ1bmN0aW9uIGdldF9wYWdlKGFsZXJ0X3N0YXRzX3BhZ2UpIHtcbiAgICBsZXQgcGFnZSA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwicGFnZVwiKTtcbiAgICBpZiAocGFnZSA9PSBudWxsKSB7XG4gICAgICAgIGlmIChhbGVydF9zdGF0c19wYWdlKSB7XG4gICAgICAgICAgICBwYWdlID0gXCJhbGxcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhZ2UgPSBcIm92ZXJ2aWV3XCI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHBhZ2U7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldF9maWx0ZXJfY29uc3QoaXNfYWxlcnRfc3RhdHNfdXJsLCBwYWdlKSB7XG4gICAgbGV0IHVybF9yZXF1ZXN0O1xuICAgIGxldCBxdWVyeV9wcmVzZXQgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInF1ZXJ5X3ByZXNldFwiKTtcbiAgICBpZiAocXVlcnlfcHJlc2V0ID09IG51bGwpIHsgcXVlcnlfcHJlc2V0ID0gXCJcIjsgfVxuICAgIGlmIChpc19hbGVydF9zdGF0c191cmwpIHtcbiAgICAgICAgdXJsX3JlcXVlc3QgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2FsZXJ0L2ZpbHRlci9jb25zdHMubHVhP3BhZ2U9JHtwYWdlfSZxdWVyeV9wcmVzZXQ9JHtxdWVyeV9wcmVzZXR9YDtcbiAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgYWdncmVnYXRlZCA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiYWdncmVnYXRlZFwiKTtcbiAgICAgICAgdXJsX3JlcXVlc3QgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9kYi9maWx0ZXIvY29uc3RzLmx1YT9wYWdlPSR7cGFnZX0mcXVlcnlfcHJlc2V0PSR7cXVlcnlfcHJlc2V0fSZhZ2dyZWdhdGVkPSR7YWdncmVnYXRlZH1gO1xuICAgIH1cbiAgICBsZXQgZmlsdGVyX2NvbnN0cyA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmxfcmVxdWVzdCk7XG4gICAgcmV0dXJuIGZpbHRlcl9jb25zdHM7XG59XG5cbmxldCBGSUxURVJTX0NPTlNUID0gW107XG5sZXQgVEFHX09QRVJBVE9SUztcbmxldCBERUZJTkVEX1RBR1M7XG5jb25zdCBWSUVXX09OTFlfVEFHUyA9IHRydWU7XG4vKiBJbml0aWFsIFRhZ3MgKi9cbmxldCBpbml0aWFsVGFncztcbi8vbGV0IHBhZ2VIYW5kbGUgPSB7fTtcbmxldCBUQUdJRlk7XG5sZXQgSVNfQUxFUlRfU1RBVFNfVVJMID0gd2luZG93LmxvY2F0aW9uLnRvU3RyaW5nKCkubWF0Y2goL2FsZXJ0X3N0YXRzLmx1YS8pICE9IG51bGw7XG5sZXQgU1RBVFVTX1ZJRVcgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInN0YXR1c1wiKTtcbmlmIChTVEFUVVNfVklFVyA9PSBudWxsIHx8IFNUQVRVU19WSUVXID09IFwiXCIpIHtcbiAgICBTVEFUVVNfVklFVyA9IFwiaGlzdG9yaWNhbFwiO1xufVxuXG5sZXQgUEFHRSA9IGdldF9wYWdlKElTX0FMRVJUX1NUQVRTX1VSTCk7XG5cbmNvbnN0IGNyZWF0ZV90YWdfZnJvbV9maWx0ZXIgPSBmdW5jdGlvbiAoZmlsdGVyKSB7XG4gICAgbGV0IGZfY29uc3QgPSBGSUxURVJTX0NPTlNULmZpbmQoKGYpID0+IGYuaWQgPT0gZmlsdGVyLmlkKTtcbiAgICBpZiAoZl9jb25zdCA9PSBudWxsKSB7IGNvbnNvbGUuZXJyb3IoXCJjcmVhdGVfdGFnX2Zyb21fZmlsdGVyOiBmaWx0ZXIgY29uc3Qgbm90IGZvdW5kO1wiKTsgfVxuXG4gICAgbGV0IHZhbHVlX2xhYmVsID0gZmlsdGVyLnZhbHVlO1xuICAgIGlmIChmX2NvbnN0Lm9wdGlvbnMgIT0gbnVsbCkge1xuICAgICAgICBsZXQgb3B0ID0gZl9jb25zdC5vcHRpb25zLmZpbmQoKG8pID0+IG8udmFsdWUgPT0gZmlsdGVyLnZhbHVlKTtcbiAgICAgICAgaWYgKG9wdCAhPSBudWxsKSB7XG4gICAgICAgICAgICB2YWx1ZV9sYWJlbCA9IG9wdC5sYWJlbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCB0YWcgPSB7XG4gICAgICAgIGxhYmVsOiBmX2NvbnN0LmxhYmVsLFxuICAgICAgICBrZXk6IGZfY29uc3QuaWQsXG4gICAgICAgIHZhbHVlOiB2YWx1ZV9sYWJlbCxcbiAgICAgICAgcmVhbFZhbHVlOiBmaWx0ZXIudmFsdWUsXG4gICAgICAgIHRpdGxlOiBgJHtmX2NvbnN0LmxhYmVsfSR7ZmlsdGVyLm9wZXJhdG9yfSR7dmFsdWVfbGFiZWx9YCxcbiAgICAgICAgc2VsZWN0ZWRPcGVyYXRvcjogZmlsdGVyLm9wZXJhdG9yLFxuICAgIH07XG4gICAgaWYgKHRhZy52YWx1ZSA9PSBcIlwiKSB7IHRhZy52YWx1ZSA9IFwiJydcIiB9XG4gICAgaWYgKHRhZy5yZWFsVmFsdWUgPT0gbnVsbCB8fCB0YWcuc2VsZWN0ZWRPcGVyYXRvciA9PSBudWxsIHx8IHRhZy5zZWxlY3RlZE9wZXJhdG9yID09IFwiXCIpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiB0YWc7XG59XG5cbmNvbnN0IGxvYWRfZmlsdGVyc19kYXRhID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIEZJTFRFUlNfQ09OU1QgPSBhd2FpdCBnZXRfZmlsdGVyX2NvbnN0KElTX0FMRVJUX1NUQVRTX1VSTCwgUEFHRSk7XG4gICAgRklMVEVSU19DT05TVC5maWx0ZXIoKHgpID0+IHgubGFiZWwgPT0gbnVsbCkuZm9yRWFjaCgoeCkgPT4geyBjb25zb2xlLmVycm9yKGBsYWJlbCBub3QgZGVmaW5lZCBmb3IgZmlsdGVyICR7SlNPTi5zdHJpbmdpZnkoeCl9YCk7IHgubGFiZWwgPSBcIlwiOyB9KTtcbiAgICBGSUxURVJTX0NPTlNULnNvcnQoKGEsIGIpID0+IGEubGFiZWwubG9jYWxlQ29tcGFyZShiLmxhYmVsKSk7XG4gICAgaTE4bl9leHQudGFncyA9IHt9O1xuICAgIFRBR19PUEVSQVRPUlMgPSB7fTtcbiAgICBERUZJTkVEX1RBR1MgPSB7fTtcbiAgICBGSUxURVJTX0NPTlNULmZvckVhY2goKGZfZGVmKSA9PiB7XG4gICAgICAgIGkxOG5fZXh0LnRhZ3NbZl9kZWYuaWRdID0gZl9kZWYubGFiZWw7XG4gICAgICAgIGZfZGVmLm9wZXJhdG9ycy5mb3JFYWNoKChvcCkgPT4gVEFHX09QRVJBVE9SU1tvcC5pZF0gPSBvcC5sYWJlbCk7XG4gICAgICAgIERFRklORURfVEFHU1tmX2RlZi5pZF0gPSBmX2RlZi5vcGVyYXRvcnMubWFwKChvcCkgPT4gb3AuaWQpO1xuICAgIH0pO1xuICAgIGxldCBlbnRyaWVzID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cmllcygpO1xuICAgIGxldCBmaWx0ZXJzID0gW107XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgZW50cmllcykge1xuICAgICAgICBsZXQgZmlsdGVyX2RlZiA9IEZJTFRFUlNfQ09OU1QuZmluZCgoZmMpID0+IGZjLmlkID09IGtleSk7XG4gICAgICAgIGlmIChmaWx0ZXJfZGVmICE9IG51bGwpIHtcbiAgICAgICAgICAgIGxldCBvcHRpb25zX3N0cmluZyA9IHZhbHVlLnNwbGl0KFwiLFwiKTtcbiAgICAgICAgICAgIG9wdGlvbnNfc3RyaW5nLmZvckVhY2goKG9wdF9zdGlybmcpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgW3ZhbHVlLCBvcGVyYXRvcl0gPSBvcHRfc3Rpcm5nLnNwbGl0KFwiO1wiKTtcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIG9wZXJhdG9yID09IG51bGwgfHwgdmFsdWUgPT0gbnVsbCB8fCBvcGVyYXRvciA9PSBcIlwiXG4gICAgICAgICAgICAgICAgICAgIHx8IChmaWx0ZXJfZGVmLm9wdGlvbnMgIT0gbnVsbCAmJiBmaWx0ZXJfZGVmLm9wdGlvbnMuZmluZCgob3B0KSA9PiBvcHQudmFsdWUgPT0gdmFsdWUpID09IG51bGwpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cdFx0bGV0IHZhbHVlX2xhYmVsID0gdmFsdWU7XG5cdFx0aWYgKGZpbHRlcl9kZWYudmFsdWVfdHlwZSA9PSBcImFycmF5XCIpIHtcblx0XHQgICAgdmFsdWVfbGFiZWwgPSBmaWx0ZXJfZGVmPy5vcHRpb25zPy5maW5kKChvcHQpID0+IG9wdC52YWx1ZSA9PSB2YWx1ZSk/LmxhYmVsO1xuXHRcdH1cbiAgICAgICAgICAgICAgICBmaWx0ZXJzLnB1c2goeyBpZDogZmlsdGVyX2RlZi5pZCwgb3BlcmF0b3I6IG9wZXJhdG9yLCB2YWx1ZTogdmFsdWUsIGxhYmVsOiBmaWx0ZXJfZGVmLmxhYmVsLCB2YWx1ZV9sYWJlbCB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmaWx0ZXJzO1xuICAgIC8vIFwibDdwcm90bz1YWFg7ZXFcIlxufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgcHJvcHM6IHtcbiAgICAgICAgaWQ6IFN0cmluZyxcbiAgICAgICAgbWluX3RpbWVfaW50ZXJ2YWxfaWQ6IFN0cmluZyxcbiAgICAgICAgcm91bmRfdGltZTogQm9vbGVhbixcbiAgICB9LFxuICAgIGNvbXBvbmVudHM6IHtcbiAgICAgICAgJ2RhdGUtdGltZS1yYW5nZS1waWNrZXInOiBEYXRlVGltZVJhbmdlUGlja2VyLFxuICAgICAgICAnbW9kYWwtZmlsdGVycyc6IE1vZGFsRmlsdGVycyxcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEZpcnN0IG1ldGhvZCBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAgICovXG4gICAgY3JlYXRlZCgpIHtcbiAgICB9LFxuICAgIGFzeW5jIG1vdW50ZWQoKSB7XG4gICAgICAgIGxldCBkdF9yYW5nZV9waWNrZXJfbW91bnRlZCA9IG50b3BuZ19zeW5jLm9uX3JlYWR5KHRoaXMuaWRfZGF0YV90aW1lX3JhbmdlX3BpY2tlcik7XG4gICAgICAgIGxldCBtb2RhbF9maWx0ZXJzX21vdW50ZWQgPSBudG9wbmdfc3luYy5vbl9yZWFkeSh0aGlzLmlkX21vZGFsX2ZpbHRlcnMpO1xuICAgICAgICBhd2FpdCBkdF9yYW5nZV9waWNrZXJfbW91bnRlZDtcblxuICAgICAgICBpZiAodGhpcy5wYWdlICE9ICdhbGwnKSB7XG4gICAgICAgICAgICBsZXQgZmlsdGVycyA9IGF3YWl0IGxvYWRfZmlsdGVyc19kYXRhKCk7XG5cbiAgICAgICAgICAgIFRBR0lGWSA9IGNyZWF0ZV90YWdpZnkodGhpcyk7XG4gICAgICAgICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9ldmVudChudG9wbmdfZXZlbnRzLkZJTFRFUlNfQ0hBTkdFLCB7IGZpbHRlcnMgfSk7XG4gICAgICAgICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fZXZlbnRfY2hhbmdlKHRoaXMuJHByb3BzW1wiaWRcIl0sIG50b3BuZ19ldmVudHMuRklMVEVSU19DSEFOR0UsIChzdGF0dXMpID0+IHRoaXMucmVsb2FkX3N0YXR1cyhzdGF0dXMpLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1vZGFsX2RhdGEgPSBGSUxURVJTX0NPTlNUO1xuXG4gICAgICAgIC8vYXdhaXQgbW9kYWxfZmlsdGVyc19tb3VudGVkO1xuICAgICAgICBudG9wbmdfc3luYy5yZWFkeSh0aGlzLiRwcm9wc1tcImlkXCJdKTtcbiAgICB9LFxuICAgIGRhdGEoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpMThuOiBpMThuLFxuICAgICAgICAgICAgaWRfbW9kYWxfZmlsdGVyczogYCR7dGhpcy4kcHJvcHMuaWR9X21vZGFsX2ZpbHRlcnNgLFxuICAgICAgICAgICAgaWRfZGF0YV90aW1lX3JhbmdlX3BpY2tlcjogYCR7dGhpcy4kcHJvcHMuaWR9X2RhdGUtdGltZS1yYW5nZS1waWNrZXJgLFxuICAgICAgICAgICAgc2hvd19maWx0ZXJzOiBmYWxzZSxcbiAgICAgICAgICAgIGVkaXRfdGFnOiBudWxsLFxuICAgICAgICAgICAgaXNfYWxlcnRfc3RhdHNfdXJsOiBJU19BTEVSVF9TVEFUU19VUkwsXG4gICAgICAgICAgICBzdGF0dXNfdmlldzogU1RBVFVTX1ZJRVcsXG4gICAgICAgICAgICBwYWdlOiBQQUdFLFxuICAgICAgICAgICAgbW9kYWxfZGF0YTogW10sXG4gICAgICAgICAgICBsYXN0X2ZpbHRlcnM6IFtdLFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgICAgICBpc19maWx0ZXJfZGVmaW5lZDogZnVuY3Rpb24gKGZpbHRlcikge1xuICAgICAgICAgICAgcmV0dXJuIERFRklORURfVEFHU1tmaWx0ZXIuaWRdICE9IG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIHVwZGF0ZV9zdGF0dXNfdmlldzogZnVuY3Rpb24gKHN0YXR1cykge1xuICAgICAgICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKFwic3RhdHVzXCIsIHN0YXR1cyk7XG4gICAgICAgICAgICBudG9wbmdfdXJsX21hbmFnZXIucmVsb2FkX3VybCgpO1xuICAgICAgICB9LFxuICAgICAgICBzaG93X21vZGFsX2ZpbHRlcnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuJHJlZnNbXCJtb2RhbF9maWx0ZXJzXCJdLnNob3coKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVtb3ZlX2ZpbHRlcnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGxldCBmaWx0ZXJzID0gW107XG4gICAgICAgICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9ldmVudChudG9wbmdfZXZlbnRzLkZJTFRFUlNfQ0hBTkdFLCB7IGZpbHRlcnMgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlbG9hZF9zdGF0dXM6IGZ1bmN0aW9uIChzdGF0dXMpIHtcbiAgICAgICAgICAgIGxldCBmaWx0ZXJzID0gc3RhdHVzLmZpbHRlcnM7XG4gICAgICAgICAgICBpZiAoZmlsdGVycyA9PSBudWxsKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgLy8gZGVsZXRlIGFsbCBwcmV2aW91cyBmaWx0ZXJcbiAgICAgICAgICAgIG50b3BuZ191cmxfbWFuYWdlci5kZWxldGVfcGFyYW1zKEZJTFRFUlNfQ09OU1QubWFwKChmKSA9PiBmLmlkKSk7XG4gICAgICAgICAgICBUQUdJRlkudGFnaWZ5LnJlbW92ZUFsbFRhZ3MoKTtcbiAgICAgICAgICAgIGxldCBmaWx0ZXJzX29iamVjdCA9IGZpbHRlcnNNYW5hZ2VyLmdldF9maWx0ZXJzX29iamVjdChmaWx0ZXJzKTtcbiAgICAgICAgICAgIG50b3BuZ191cmxfbWFuYWdlci5hZGRfb2JqX3RvX3VybChmaWx0ZXJzX29iamVjdCk7XG4gICAgICAgICAgICBmaWx0ZXJzLmZvckVhY2goKGYpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgdGFnID0gY3JlYXRlX3RhZ19mcm9tX2ZpbHRlcihmKTtcbiAgICAgICAgICAgICAgICBpZiAodGFnID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICAgICAgVEFHSUZZLmFkZEZpbHRlclRhZyh0YWcpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmxhc3RfZmlsdGVycyA9IGZpbHRlcnM7XG4gICAgICAgIH0sXG4gICAgICAgIGFwcGx5X21vZGFsOiBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgICAgICBsZXQgc3RhdHVzID0gbnRvcG5nX3N0YXR1c19tYW5hZ2VyLmdldF9zdGF0dXMoKTtcbiAgICAgICAgICAgIGxldCBmaWx0ZXJzID0gc3RhdHVzLmZpbHRlcnM7XG4gICAgICAgICAgICBpZiAoZmlsdGVycyA9PSBudWxsKSB7IGZpbHRlcnMgPSBbXTsgfVxuICAgICAgICAgICAgaWYgKHRoaXMuZWRpdF90YWcgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGZpbHRlcnMgPSBmaWx0ZXJzLmZpbHRlcigoZikgPT4gZi5pZCAhPSB0aGlzLmVkaXRfdGFnLmtleSB8fCBmLnZhbHVlICE9IHRoaXMuZWRpdF90YWcucmVhbFZhbHVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLmVkaXRfdGFnID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbHRlcnMucHVzaChwYXJhbXMpO1xuICAgICAgICAgICAgLy8gdHJpZ2dlciBldmVudCBhbmQgdGhlbiBjYWxsIHJlbG9hZF9zdGF0dXNcbiAgICAgICAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2V2ZW50KG50b3BuZ19ldmVudHMuRklMVEVSU19DSEFOR0UsIHsgZmlsdGVycyB9KTtcbiAgICAgICAgfSxcbiAgICB9LFxufTtcblxuZnVuY3Rpb24gY3JlYXRlX3RhZ2lmeShyYW5nZV9waWNrZXJfdnVlKSB7XG4gICAgLy8gY3JlYXRlIHRhZ2lmeVxuICAgIGNvbnN0IHRhZ2lmeSA9IG5ldyBUYWdpZnkocmFuZ2VfcGlja2VyX3Z1ZS4kcmVmc1tcInRhZ2lmeVwiXSwge1xuICAgICAgICBkdXBsaWNhdGVzOiB0cnVlLFxuICAgICAgICBkZWxpbWl0ZXJzOiBudWxsLFxuICAgICAgICBkcm9wZG93bjoge1xuICAgICAgICAgICAgZW5hYmxlZDogMSwgLy8gc3VnZ2VzdCB0YWdzIGFmdGVyIGEgc2luZ2xlIGNoYXJhY3RlciBpbnB1dFxuICAgICAgICAgICAgY2xhc3NuYW1lOiAnZXh0cmEtcHJvcGVydGllcycgLy8gY3VzdG9tIGNsYXNzIGZvciB0aGUgc3VnZ2VzdGlvbnMgZHJvcGRvd25cbiAgICAgICAgfSxcbiAgICAgICAgYXV0b0NvbXBsZXRlOiB7IGVuYWJsZWQ6IGZhbHNlIH0sXG4gICAgICAgIHRlbXBsYXRlczoge1xuICAgICAgICAgICAgdGFnOiBmdW5jdGlvbiAodGFnRGF0YSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgPHRhZyB0aXRsZT0nJHt0YWdEYXRhLnZhbHVlfScgY29udGVudGVkaXRhYmxlPSdmYWxzZScgc3BlbGxjaGVjaz1cImZhbHNlXCIgY2xhc3M9J3RhZ2lmeV9fdGFnJz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDx4IHRpdGxlPSdyZW1vdmUgdGFnJyBjbGFzcz0ndGFnaWZ5X190YWdfX3JlbW92ZUJ0bic+PC94PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiPiR7dGFnRGF0YS5sYWJlbCA/IHRhZ0RhdGEubGFiZWwgOiB0YWdEYXRhLmtleX08L2I+Jm5ic3A7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICA8YiBjbGFzcz0nb3BlcmF0b3InPiR7dGFnRGF0YS5zZWxlY3RlZE9wZXJhdG9yID8gVEFHX09QRVJBVE9SU1t0YWdEYXRhLnNlbGVjdGVkT3BlcmF0b3JdIDogJz0nfTwvYj4mbmJzcDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ndGFnaWZ5X190YWctdGV4dCc+JHt0YWdEYXRhLnZhbHVlfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L3RhZz5gXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgQW4gZXJyb3Igb2NjdXJlZCB3aGVuIGNyZWF0aW5nIGEgbmV3IHRhZzogJHtlcnJ9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgdmFsaWRhdGU6IGZ1bmN0aW9uICh0YWdEYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4gKHR5cGVvZiB0YWdEYXRhLmtleSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgdGFnRGF0YS5zZWxlY3RlZE9wZXJhdG9yICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiB0YWdEYXRhLnZhbHVlICE9PSAndW5kZWZpbmVkJyk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gYWRkIGV4aXN0aW5nIHRhZ3NcbiAgICAgICAgdGFnaWZ5LmFkZFRhZ3MoaW5pdGlhbFRhZ3MpO1xuICAgIH0pOyAvKiAkKGRvY3VtZW50KS5yZWFkeSgpICovXG5cbiAgICBjb25zdCBjcmVhdGVWYWx1ZUZyb21UYWcgPSBmdW5jdGlvbiAodGFnKSB7XG4gICAgICAgIGlmICghdGFnLnNlbGVjdGVkT3BlcmF0b3IpIHRhZy5zZWxlY3RlZE9wZXJhdG9yID0gJ2VxJztcbiAgICAgICAgbGV0IHZhbCA9IHRhZy5yZWFsVmFsdWUgIT0gbnVsbCA/IHRhZy5yZWFsVmFsdWUgOiB0YWcudmFsdWU7XG4gICAgICAgIGxldCB2YWx1ZSA9IGAke3ZhbH07JHt0YWcuc2VsZWN0ZWRPcGVyYXRvcn1gO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgY29uc3QgYWRkRmlsdGVyVGFnID0gYXN5bmMgZnVuY3Rpb24gKHRhZykge1xuICAgICAgICAvKiBDb252ZXJ0IHZhbHVlcyB0byBzdHJpbmcgKHRoaXMgYXZvaWRzIGlzc3VlcyBlLmcuIHdpdGggMCkgKi9cbiAgICAgICAgaWYgKHR5cGVvZiB0YWcucmVhbFZhbHVlID09ICdudW1iZXInKSB7IHRhZy5yZWFsVmFsdWUgPSAnJyArIHRhZy5yZWFsVmFsdWU7IH1cbiAgICAgICAgaWYgKHR5cGVvZiB0YWcudmFsdWUgPT0gJ251bWJlcicpIHsgdGFnLnZhbHVlID0gJycgKyB0YWcudmFsdWU7IH1cblxuICAgICAgICBjb25zdCBleGlzdGluZ1RhZ0VsbXMgPSB0YWdpZnkuZ2V0VGFnRWxtcygpO1xuXG4gICAgICAgIC8qIExvb2t1cCBieSBrZXksIHZhbHVlIGFuZCBvcGVyYXRvciAoZG8gbm90IGFkZCB0aGUgc2FtZSBrZXkgYW5kIHZhbHVlIG11bHRpcGxlIHRpbWVzKSAqL1xuICAgICAgICBsZXQgZXhpc3RpbmdUYWdFbGVtZW50ID0gZXhpc3RpbmdUYWdFbG1zLmZpbmQoaHRtbFRhZyA9PlxuICAgICAgICAgICAgaHRtbFRhZy5nZXRBdHRyaWJ1dGUoJ2tleScpID09PSB0YWcua2V5XG4gICAgICAgICAgICAmJiBodG1sVGFnLmdldEF0dHJpYnV0ZSgncmVhbFZhbHVlJykgPT09IHRhZy5yZWFsVmFsdWVcbiAgICAgICAgICAgIC8vJiYgaHRtbFRhZy5nZXRBdHRyaWJ1dGUoJ3NlbGVjdGVkT3BlcmF0b3InKSA9PT0gdGFnLnNlbGVjdGVkT3BlcmF0b3JcbiAgICAgICAgKTtcbiAgICAgICAgbGV0IGV4aXN0aW5nVGFnID0gdGFnaWZ5LnRhZ0RhdGEoZXhpc3RpbmdUYWdFbGVtZW50KTtcbiAgICAgICAgaWYgKGV4aXN0aW5nVGFnICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGhhcyB0aGUgdGFnIGFuIG9wZXJhdG9yIG9iamVjdD9cbiAgICAgICAgaWYgKERFRklORURfVEFHU1t0YWcua2V5XSAmJiAhQXJyYXkuaXNBcnJheShERUZJTkVEX1RBR1NbdGFnLmtleV0pKSB7XG4gICAgICAgICAgICB0YWcub3BlcmF0b3JzID0gREVGSU5FRF9UQUdTW3RhZy5rZXldLm9wZXJhdG9ycztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGFnLnNlbGVjdGVkT3BlcmF0b3IpIHtcbiAgICAgICAgICAgIHRhZy5zZWxlY3RlZE9wZXJhdG9yID0gJ2VxJztcbiAgICAgICAgfVxuICAgICAgICAvLyBhZGQgZmlsdGVyIVxuICAgICAgICB0YWdpZnkuYWRkVGFncyhbdGFnXSk7XG4gICAgfVxuXG4gICAgLy8gd2hlbiBhbiB1c2VyIHJlbW92ZSB0aGUgdGFnXG4gICAgdGFnaWZ5Lm9uKCdyZW1vdmUnLCBhc3luYyBmdW5jdGlvbiAoZSkge1xuICAgICAgICBjb25zdCBrZXkgPSBlLmRldGFpbC5kYXRhLmtleTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBlLmRldGFpbC5kYXRhLnJlYWxWYWx1ZTtcbiAgICAgICAgY29uc3Qgc3RhdHVzID0gbnRvcG5nX3N0YXR1c19tYW5hZ2VyLmdldF9zdGF0dXMoKTtcblxuICAgICAgICBpZiAoa2V5ID09PSB1bmRlZmluZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgIGlmIChzdGF0dXMuZmlsdGVycyA9PSBudWxsKSB7IHJldHVybjsgfVxuXG4gICAgICAgIGNvbnN0IGZpbHRlcnMgPSBzdGF0dXMuZmlsdGVycy5maWx0ZXIoKGYpID0+IChmLmlkICE9IGtleSB8fCAoZi5pZCA9PSBrZXkgJiYgZi52YWx1ZSAhPSB2YWx1ZSkpKTtcbiAgICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfZXZlbnQobnRvcG5nX2V2ZW50cy5GSUxURVJTX0NIQU5HRSwgeyBmaWx0ZXJzIH0pO1xuICAgIH0pO1xuXG4gICAgdGFnaWZ5Lm9uKCdhZGQnLCBhc3luYyBmdW5jdGlvbiAoZSkge1xuICAgICAgICBjb25zdCBkZXRhaWwgPSBlLmRldGFpbDtcbiAgICAgICAgaWYgKGRldGFpbC5kYXRhID09PSB1bmRlZmluZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgIGNvbnN0IHRhZyA9IGRldGFpbC5kYXRhO1xuICAgICAgICAvLyBsZXQncyBjaGVjayBpZiB0aGUgdGFnIGhhcyBhIGtleSBmaWVsZFxuICAgICAgICBpZiAoIXRhZy5rZXkpIHtcbiAgICAgICAgICAgIHRhZ2lmeS5yZW1vdmVUYWdzKFtlLmRldGFpbC50YWddKTtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFRhZyAnY2xpY2snIGV2ZW50IGhhbmRsZXIgdG8gb3BlbiB0aGUgJ0VkaXQnIG1vZGFsLiBOb3RlOiB0aGlzIHByZXZlbnRzXG4gICAgLy8gaW5saW5lIGVkaXRpbmcgb2YgdGhlIHRhZyAoJ2VkaXQ6dXBkYXRlZCcgaXMgbmV2ZXIgY2FsbGVkIGFzIGEgY29uc2VxdWVuY2UpXG4gICAgdGFnaWZ5Lm9uKCdjbGljaycsIGFzeW5jIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGNvbnN0IGRldGFpbCA9IGUuZGV0YWlsO1xuICAgICAgICBpZiAoZGV0YWlsLmRhdGEgPT09IHVuZGVmaW5lZCkgeyByZXR1cm47IH1cbiAgICAgICAgaWYgKGRldGFpbC5kYXRhLmtleSA9PT0gdW5kZWZpbmVkKSB7IHJldHVybjsgfVxuICAgICAgICBjb25zdCB0YWcgPSBkZXRhaWwuZGF0YTtcbiAgICAgICAgLy8gcmVtZW1iZXIgdGhhdCB0aGlzIHRhZyBhbHJlYWR5IGV4aXh0c1xuICAgICAgICByYW5nZV9waWNrZXJfdnVlLmVkaXRfdGFnID0gdGFnO1xuICAgICAgICAvLyBzaG93IG1vZGFsLWZpbHRlcnNcbiAgICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfY3VzdG9tX2V2ZW50KG50b3BuZ19jdXN0b21fZXZlbnRzLlNIT1dfTU9EQUxfRklMVEVSUywgeyBpZDogdGFnLmtleSwgb3BlcmF0b3I6IHRhZy5zZWxlY3RlZE9wZXJhdG9yLCB2YWx1ZTogdGFnLnJlYWxWYWx1ZSB9KTtcbiAgICB9KTtcblxuICAgIHRhZ2lmeS5vbignZWRpdDp1cGRhdGVkJywgYXN5bmMgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiVVBEQVRFRFwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH0pO1xuXG4gICAgJChgdGFnc2ApLm9uKCdjaGFuZ2UnLCAnc2VsZWN0Lm9wZXJhdG9yJywgYXN5bmMgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiVEFHUyBjaGFuZ2VcIik7XG4gICAgICAgIHJldHVybjtcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgICB0YWdpZnksXG4gICAgICAgIGFkZEZpbHRlclRhZyxcbiAgICB9O1xufVxuPC9zY3JpcHQ+XG5cblxuPHN0eWxlIHNjb3BlZD5cbi50YWdpZnlfX2lucHV0IHtcbiAgICBtaW4td2lkdGg6IDE3NXB4O1xufVxuXG4udGFnaWZ5X190YWcge1xuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgbWFyZ2luOiAzcHggMHB4IDVweCA1cHg7XG59XG5cbi50YWdpZnlfX3RhZyBzZWxlY3Qub3BlcmF0b3Ige1xuICAgIG1hcmdpbjogMHB4IDRweDtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjYzRjNGM0O1xuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcbn1cblxuLnRhZ2lmeV9fdGFnIGIub3BlcmF0b3Ige1xuICAgIG1hcmdpbjogMHB4IDRweDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjYzRjNGM0O1xuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgICBwYWRkaW5nOiAwLjA1ZW0gMC4yZW07XG59XG5cbi50YWdpZnlfX3RhZz5kaXYge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbn1cbjwvc3R5bGU+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuXG48IS0tIFBlclBhZ2UgLS0+XG48ZGl2IGNsYXNzPVwicm93XCIgc3R5bGU9XCJtYXJnaW4tbGVmdDotMnB4O21hcmdpbi1yaWdodDotMnB4O21hcmdpbi10b3A6MXJlbTttYXJnaW4tYm90dG9tOi0xcmVtO1wiPlxuICA8IS0tIGRpdiBjb2wtbWQtNSAtLT5cbiAgPGRpdiBjbGFzcz1cImNvbC1zbS0xMiBjb2wtbWQtNVwiPlxuICAgIDxkaXYgY2xhc3M9XCJkYXRhVGFibGVzX2luZm9cIiByb2xlPVwic3RhdHVzXCIgYXJpYS1saXZlPVwicG9saXRlXCI+e3t0ZXh0fX1cbiAgICA8L2Rpdj5cbiAgPC9kaXY+IDwhLS0gZGl2IGNvbC1tZC01IC0tPlxuICBcbiAgPCEtLSBzdGFydCBkaXYgY29sLXNtLTEyIC0tPlxuICA8ZGl2IHYtc2hvdz1cInRvdGFsX3BhZ2VzID4gMFwiIGNsYXNzPVwiY29sLXNtLTEyIGNvbC1tZC03XCI+XG4gICAgPGRpdiBjbGFzcz1cImRhdGFUYWJsZXNfcGFnaW5hdGUgcGFnaW5nX3NpbXBsZV9udW1iZXJzXCIgc3R5bGU9XCJkaXNwbGF5OmZsZXg7IGp1c3RpZnktY29udGVudDpmbGV4LWVuZDtcIj5cbiAgICAgIDx1bCBjbGFzcz1cInBhZ2luYXRpb25cIj5cblx0PGxpIHYtc2hvdz1cImVuYWJsZV9maXJzdF9wYWdlXCIgY2xhc3M9XCJwYWdpbmF0ZV9idXR0b24gcGFnZS1pdGVtIHByZXZpb3VzXCI+XG5cdCAgPGEgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKTtcIiBAY2xpY2s9XCJjaGFuZ2VfYWN0aXZlX3BhZ2UoMCwgMClcIiBhcmlhLWNvbnRyb2xzPVwiZGVmYXVsdC1kYXRhdGFibGVcIiBkYXRhLWR0LWlkeD1cIjBcIiB0YWJpbmRleD1cIjBcIiBjbGFzcz1cInBhZ2UtbGlua1wiPlxuXHQgICAgwqtcblx0ICA8L2E+XG5cdDwvbGk+XG5cdDxsaSBjbGFzcz1cInBhZ2luYXRlX2J1dHRvbiBwYWdlLWl0ZW0gcHJldmlvdXNcIiA6Y2xhc3M9XCJ7ICdkaXNhYmxlZCc6IGFjdGl2ZV9wYWdlID09IDB9XCI+XG5cdCAgPGEgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKTtcIiBAY2xpY2s9XCJiYWNrX3BhZ2UoKVwiIGFyaWEtY29udHJvbHM9XCJkZWZhdWx0LWRhdGF0YWJsZVwiIGRhdGEtZHQtaWR4PVwiMFwiIHRhYmluZGV4PVwiMFwiIGNsYXNzPVwicGFnZS1saW5rXCI+XG5cdCAgICAmbHQ7XG5cdCAgPC9hPlxuXHQ8L2xpPlxuXHQ8bGkgdi1mb3I9XCJuIGluIG51bV9wYWdlX2J1dHRvbnNcIiBAY2xpY2s9XCJjaGFuZ2VfYWN0aXZlX3BhZ2Uoc3RhcnRfcGFnZV9idXR0b24gKyBuIC0gMSlcIiA6Y2xhc3M9XCJ7J2FjdGl2ZSc6IGFjdGl2ZV9wYWdlID09IHN0YXJ0X3BhZ2VfYnV0dG9uICsgbiAtIDEgfVwiIGNsYXNzPVwicGFnaW5hdGVfYnV0dG9uIHBhZ2UtaXRlbVwiPjxhIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMCk7XCIgYXJpYS1jb250cm9scz1cImRlZmF1bHQtZGF0YXRhYmxlXCIgZGF0YS1kdC1pZHg9XCIxXCIgdGFiaW5kZXg9XCIwXCIgY2xhc3M9XCJwYWdlLWxpbmtcIiA+e3tzdGFydF9wYWdlX2J1dHRvbiArIG59fTwvYT5cblx0ICA8IS0tICA6a2V5PVwidG90YWxfcm93c1wiLS0+XG5cdCAgPC9saT5cblx0PGxpIGNsYXNzPVwicGFnaW5hdGVfYnV0dG9uIHBhZ2UtaXRlbSBuZXh0XCIgOmNsYXNzPVwieyAnZGlzYWJsZWQnOiBhY3RpdmVfcGFnZSA9PSB0b3RhbF9wYWdlcyAtIDF9XCIgaWQ9XCJkZWZhdWx0LWRhdGF0YWJsZV9uZXh0XCI+XG5cdCAgPGEgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKTtcIiBAY2xpY2s9XCJuZXh0X3BhZ2UoKVwiIGFyaWEtY29udHJvbHM9XCJkZWZhdWx0LWRhdGF0YWJsZVwiIGRhdGEtZHQtaWR4PVwiN1wiIHRhYmluZGV4PVwiMFwiIGNsYXNzPVwicGFnZS1saW5rXCI+XG5cdCAgICAmZ3Q7XG5cdCAgPC9hPlxuXHQ8L2xpPlxuXHQ8bGkgdi1zaG93PVwiZW5hYmxlX2xhc3RfcGFnZVwiIGNsYXNzPVwicGFnaW5hdGVfYnV0dG9uIHBhZ2UtaXRlbSBwcmV2aW91c1wiPlxuXHQgIDxhIGhyZWY9XCJqYXZhc2NyaXB0OnZvaWQoMCk7XCIgQGNsaWNrPVwiY2hhbmdlX2FjdGl2ZV9wYWdlKHRvdGFsX3BhZ2VzIC0gMSwgdG90YWxfcGFnZXMgLSBudW1fcGFnZV9idXR0b25zKVwiIGFyaWEtY29udHJvbHM9XCJkZWZhdWx0LWRhdGF0YWJsZVwiIGRhdGEtZHQtaWR4PVwiMFwiIHRhYmluZGV4PVwiMFwiIGNsYXNzPVwicGFnZS1saW5rXCI+XG5cdCAgICDCu1xuXHQgIDwvYT5cblx0PC9saT5cbiAgICAgIDwvdWw+XG4gICAgPC9kaXY+XG4gIDwvZGl2PiA8IS0tIGVuZCBkaXYgY29sLW1kLTcgLS0+XG48L2Rpdj4gPCEtLSBQZXJQYWdlIC0tPlxuXG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIGNvbXB1dGVkLCB3YXRjaCwgb25CZWZvcmVVbm1vdW50IH0gZnJvbSBcInZ1ZVwiO1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICB0b3RhbF9yb3dzOiBOdW1iZXIsXG4gICAgcGVyX3BhZ2U6IE51bWJlcixcbn0pO1xuXG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoWydjaGFuZ2VfYWN0aXZlX3BhZ2UnXSk7XG5cbmNvbnN0IGRlZmF1bHRfcGVyX3BhZ2UgPSAxMDtcbmNvbnN0IG1heF9wYWdlX2J1dHRvbnMgPSA2O1xuXG5jb25zdCBzdGFydF9wYWdlX2J1dHRvbiA9IHJlZigwKTtcbmNvbnN0IG51bV9wYWdlX2J1dHRvbnMgPSByZWYoMCk7XG5cbmNvbnN0IHRvdGFsX3BhZ2VzID0gcmVmKDApO1xuY29uc3QgYWN0aXZlX3BhZ2UgPSByZWYoMCk7XG5cbmNvbnN0IHRleHRfdGVtcGxhdGUgPSBcIlNob3dpbmcgcGFnZSAlYWN0aXZlX3BhZ2Ugb2YgJXRvdGFsX3BhZ2VzOiB0b3RhbCAldG90YWxfcm93cyByb3dzXCI7XG5jb25zdCB0ZXh0ID0gcmVmKFwiXCIpO1xuXG5vbk1vdW50ZWQoKCkgPT4ge1xuICAgIGNhbGN1bGF0ZV9wYWdlcygpO1xufSk7XG5cbndhdGNoKCgpID0+IFtwcm9wcy50b3RhbF9yb3dzLCBwcm9wcy5wZXJfcGFnZV0sIChjdXJfdmFsdWUsIG9sZF92YWx1ZSkgPT4ge1xuICAgIGNhbGN1bGF0ZV9wYWdlcygpO1xufSwgeyBmbHVzaDogJ3ByZScsIGltbWVkaWF0ZTogdHJ1ZSB9KTtcblxuZnVuY3Rpb24gY2FsY3VsYXRlX3BhZ2VzKCkge1xuICAgIGlmIChwcm9wcy50b3RhbF9yb3dzID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgbGV0IHBlcl9wYWdlID0gcHJvcHMucGVyX3BhZ2U7XG4gICAgdG90YWxfcGFnZXMudmFsdWUgPSBOdW1iZXIucGFyc2VJbnQoKHByb3BzLnRvdGFsX3Jvd3MgKyBwZXJfcGFnZSAtIDEpIC8gcGVyX3BhZ2UpO1xuICAgIG51bV9wYWdlX2J1dHRvbnMudmFsdWUgPSBtYXhfcGFnZV9idXR0b25zO1xuICAgIGlmICh0b3RhbF9wYWdlcy52YWx1ZSA8IG51bV9wYWdlX2J1dHRvbnMudmFsdWUpIHtcblx0ICAgIG51bV9wYWdlX2J1dHRvbnMudmFsdWUgPSB0b3RhbF9wYWdlcy52YWx1ZTtcbiAgICB9XG4gICAgaWYgKGFjdGl2ZV9wYWdlLnZhbHVlID49IHRvdGFsX3BhZ2VzLnZhbHVlICYmIHRvdGFsX3BhZ2VzLnZhbHVlID4gMCkge1xuICAgICAgLy9cdHRvdGFsX3BhZ2VzLnZhbHVlID0gdG90YWxfcGFnZXMudmFsdWUgKyAxO1xuICAgICAgLyogSW4gY2FzZSB0aGUgY3VycmVudCBhY3RpdmUgcGFnZSBpcyBoaWdoZXIgdGhhbiB0aGUgbWF4IHBhZ2VzLCByZXN0YXJ0IGZyb20gcGFnZSAxICovXG4gICAgICBhY3RpdmVfcGFnZS52YWx1ZSA9IHRvdGFsX3BhZ2VzLnZhbHVlIC0gMTtcbiAgICAgIHN0YXJ0X3BhZ2VfYnV0dG9uLnZhbHVlID0gdG90YWxfcGFnZXMudmFsdWUgLSBudW1fcGFnZV9idXR0b25zLnZhbHVlO1xuICAgICAgLyogUmVkdW5kYW50IGNhbGwgaW4gb3JkZXIgdG8gY29ycmVjdGx5IGxvYWQgcGFnZXMgKi9cbiAgICAgIGNoYW5nZV9hY3RpdmVfcGFnZShhY3RpdmVfcGFnZS52YWx1ZSk7XG4gICAgfVxuXG4gICAgc2V0X3RleHQoKTtcbn1cblxuY29uc3QgZW5hYmxlX2ZpcnN0X3BhZ2UgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgaWYgKHRvdGFsX3BhZ2VzLnZhbHVlIDwgbWF4X3BhZ2VfYnV0dG9ucykge1xuXHRyZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBhY3RpdmVfcGFnZS52YWx1ZSA+PSBudW1fcGFnZV9idXR0b25zLnZhbHVlIC0gMTtcbn0pO1xuXG5jb25zdCBlbmFibGVfbGFzdF9wYWdlID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGlmICh0b3RhbF9wYWdlcy52YWx1ZSA8IG1heF9wYWdlX2J1dHRvbnMpIHtcblx0cmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gYWN0aXZlX3BhZ2UudmFsdWUgPCB0b3RhbF9wYWdlcy52YWx1ZSAtIG51bV9wYWdlX2J1dHRvbnMudmFsdWUgKyAxO1xufSk7XG5cblxuZnVuY3Rpb24gbmV4dF9wYWdlKCkge1xuICAgIGNoYW5nZV9hY3RpdmVfcGFnZShhY3RpdmVfcGFnZS52YWx1ZSArIDEpO1xufVxuXG5mdW5jdGlvbiBiYWNrX3BhZ2UoKSB7XG4gICAgY2hhbmdlX2FjdGl2ZV9wYWdlKGFjdGl2ZV9wYWdlLnZhbHVlIC0gMSk7XG59XG5cbi8qICBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gc2V0IHRoZSBjdXJyZW50IGFjdGl2ZSBwYWdlLCBpZiBubyBwYXJhbXMgaXMgcGFzc2VkXG4gICAgdGhlbiBpdCdzIGdvaW5nIHRvIGtlZXAgdGhlIHNhbWUgcGFnZS5cbiAgICBUaGlzIGZ1bmN0aW9uIGhhbmRsZXMgdGhlIGNhc2Ugd2hlcmUgdGhlIGFjdGl2ZSBwYWdlID4gbGFzdCBwYWdlLFxuICAgIHNldHRpbmcgdGhlIGFjdGl2ZSBwYWdlIGFzIHRoZSBsYXN0IHBhZ2UuXG4gKi9cbmZ1bmN0aW9uIGNoYW5nZV9hY3RpdmVfcGFnZShuZXdfYWN0aXZlX3BhZ2UsIG5ld19zdGFydF9wYWdlX2J1dHRvbikge1xuICAvKiBJbiBjYXNlIGEgbmV3IGFjdGl2ZSBwYWdlIGlzIHJlcXVlc3RlZCwganVtcCB0byB0aGF0IHBhZ2UgKi9cbiAgaWYgKG5ld19hY3RpdmVfcGFnZSAhPSBudWxsKSB7XG4gICAgYWN0aXZlX3BhZ2UudmFsdWUgPSBuZXdfYWN0aXZlX3BhZ2U7XG4gIH0gXG5cbiAgLyogQ2hhbmdlIHRoZSB0YWJsZSBmb290ZXIgYnV0dG9uICovXG4gIGlmIChuZXdfc3RhcnRfcGFnZV9idXR0b24gIT0gbnVsbCkge1xuICAgIHN0YXJ0X3BhZ2VfYnV0dG9uLnZhbHVlID0gbmV3X3N0YXJ0X3BhZ2VfYnV0dG9uO1xuICB9XG5cbiAgLyogU2V0IHVwIHRoZSBjb3JyZWN0IHN0YXJ0IGFuZCBlbmQgcGFnZSBvZiB0aGUgdGFibGUgZm9vdGVyICovXG4gIGlmIChhY3RpdmVfcGFnZS52YWx1ZSA9PSBzdGFydF9wYWdlX2J1dHRvbi52YWx1ZSAmJiBzdGFydF9wYWdlX2J1dHRvbi52YWx1ZSA+IDApIHtcbiAgICBzdGFydF9wYWdlX2J1dHRvbi52YWx1ZSAtPSAxO1xuICB9XG4gIGNvbnN0IGVuZF9wYWdlX2J1dHRvbiA9IHN0YXJ0X3BhZ2VfYnV0dG9uLnZhbHVlICsgbnVtX3BhZ2VfYnV0dG9ucy52YWx1ZSAtIDE7XG4gIGlmIChhY3RpdmVfcGFnZS52YWx1ZSA9PSBlbmRfcGFnZV9idXR0b24gJiYgdG90YWxfcGFnZXMudmFsdWUgLSAxID4gZW5kX3BhZ2VfYnV0dG9uKSB7XG4gICAgc3RhcnRfcGFnZV9idXR0b24udmFsdWUgKz0gMTtcdFxuICB9XG4gIFxuICAvKiBDaGVjayB0aGF0IHRoZSBhY3RpdmVfcGFnZSBpcyBub3QgZ3JlYXRlciB0aGVuIHRoZSBsYXN0IHBhZ2UgKi9cbiAgLyogb3RoZXJ3aXNlIHNldCB0byB0aGUgbGFzdCBwYWdlICovXG4gIGlmKGFjdGl2ZV9wYWdlLnZhbHVlID4gdG90YWxfcGFnZXMudmFsdWUgLSAxICYmIHRvdGFsX3BhZ2VzLnZhbHVlICE9IDApIHtcbiAgICBhY3RpdmVfcGFnZS52YWx1ZSA9IHRvdGFsX3BhZ2VzLnZhbHVlIC0gMTtcbiAgICBzdGFydF9wYWdlX2J1dHRvbi52YWx1ZSA9IGFjdGl2ZV9wYWdlLnZhbHVlO1xuICB9XG5cbiAgLyogU2V0IHRoZSB0ZXh0IG9uIHRoZSB0YWJsZSBmb290ZXIsIG51bV9wYWdlcywgdG90YWxfcm93cywgZWNjLiAqL1xuICBzZXRfdGV4dCgpO1xuXG4gIC8qIEVtaXQgdGhlIGNoYW5nZV9hY3RpdmVfcGFnZSBldmVudCAqL1xuICBlbWl0KCdjaGFuZ2VfYWN0aXZlX3BhZ2UnLCBhY3RpdmVfcGFnZS52YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIHNldF90ZXh0KCkge1xuICAgIHRleHQudmFsdWUgPSB0ZXh0X3RlbXBsYXRlLnJlcGxhY2UoXCIlYWN0aXZlX3BhZ2VcIiwgZm9ybWF0X251bWJlcihgJHthY3RpdmVfcGFnZS52YWx1ZSArIDF9YCkpXG5cdC5yZXBsYWNlKFwiJXRvdGFsX3BhZ2VzXCIsIGZvcm1hdF9udW1iZXIoYCR7dG90YWxfcGFnZXMudmFsdWV9YCkpXG5cdC5yZXBsYWNlKFwiJXRvdGFsX3Jvd3NcIiwgZm9ybWF0X251bWJlcihgJHtwcm9wcy50b3RhbF9yb3dzfWApKVxuXHQucmVwbGFjZShcIiVwZXJfcGFnZVwiLCBmb3JtYXRfbnVtYmVyKGAke3Byb3BzLnBlcl9wYWdlfWApKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0X251bWJlcihzKSB7XG4gICAgcmV0dXJuIHMucmVwbGFjZSgvKC4pKD89KFxcZHszfSkrJCkvZywnJDEsJyk7XG59XG5cbmRlZmluZUV4cG9zZSh7IGNoYW5nZV9hY3RpdmVfcGFnZSB9KTtcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG48L3N0eWxlPlxuIiwiLyoqXG4gICAgKEMpIDIwMjMgLSBudG9wLm9yZyAgICBcbiovXG5cbjx0ZW1wbGF0ZT5cbiAgPGRpdiByZWY9XCJvdmVybGF5XCIgY2xhc3M9XCJvdmVybGF5IGNlbnRlcmVkLW1lc3NhZ2VcIj5cbiAgICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJzcGlubmVyLWJvcmRlciB0ZXh0LXByaW1hcnkgbXQtNlwiIDpzdHlsZT1cInN0eWxlc1wiIHJvbGU9XCJzdGF0dXNcIj5cbiAgICAgICAgPHNwYW4gY2xhc3M9XCJzci1vbmx5IHBvc2l0aW9uLWFic29sdXRlXCI+e3sgbG9hZGluZyB9fTwvc3Bhbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYgfSBmcm9tIFwidnVlXCI7XG5cbmNvbnN0IGxvYWRpbmcgPSBpMThuKCdsb2FkaW5nJylcbmNvbnN0IG92ZXJsYXkgPSByZWYobnVsbCk7XG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgc3R5bGVzOiBTdHJpbmdcbn0pO1xuXG4vKiBTaG93IHRoZSBsb2FkaW5nICovXG5mdW5jdGlvbiBzaG93X2xvYWRpbmcodGltZSA9IDUwMCkge1xuICAkKG92ZXJsYXkudmFsdWUpLmZhZGVJbih0aW1lKTtcbn1cblxuLyogSGlkZSB0aGUgbG9hZGluZyAqL1xuZnVuY3Rpb24gaGlkZV9sb2FkaW5nKHRpbWUgPSA1MDApIHtcbiAgJChvdmVybGF5LnZhbHVlKS5mYWRlT3V0KHRpbWUpO1xufVxuXG5kZWZpbmVFeHBvc2UoeyBoaWRlX2xvYWRpbmcsIHNob3dfbG9hZGluZyB9KTtcblxuPC9zY3JpcHQ+XG4iLCI8dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJmb3JtLWNoZWNrIGZvcm0tc3dpdGNoIG1zLTFcIiBzdHlsZT1cIndoaXRlLXNwYWNlOm5vd3JhcFwiPlxuICAgIDxpbnB1dCBjbGFzcz1cImZvcm0tY2hlY2staW5wdXRcIiBzdHlsZT1cImN1cnNvcjpwb2ludGVyO1wiIDpjaGVja2VkPVwidmFsdWVfMiA9PSB0cnVlXCIgQGNsaWNrPVwiY2hhbmdlX3ZhbHVlKClcIiAgIHR5cGU9XCJjaGVja2JveFwiIGlkPVwidG9nZ2xlLUJlZ2luXCIgOnRpdGxlPVwidGl0bGVcIj5cbiAgICA8bGFiZWwgY2xhc3M9XCJmb3JtLWNoZWNrLWxhYmVsXCIgZm9yPVwidG9nZ2xlLUJlZ2luXCIgdi1odG1sPVwibGFiZWxcIj5cbiAgICA8L2xhYmVsPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgY29tcHV0ZWQsIHdhdGNoLCBoIH0gZnJvbSBcInZ1ZVwiO1xuXG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoWyd1cGRhdGU6dmFsdWUnLCAnY2hhbmdlX3ZhbHVlJ10pO1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICB2YWx1ZTogQm9vbGVhbixcbiAgICB0aXRsZTogU3RyaW5nLFxuICAgIGxhYmVsOiBTdHJpbmcsXG59KTtcblxuY29uc3QgdmFsdWVfMiA9IHJlZihmYWxzZSk7XG5cbm9uTW91bnRlZCgoKSA9PiB7XG4gICAgdmFsdWVfMi52YWx1ZSA9IHByb3BzLnZhbHVlO1xufSk7XG5cbndhdGNoKCgpID0+IHByb3BzLnZhbHVlLCAoY3VyX3ZhbHVlLCBvbGRfdmFsdWUpID0+IHtcbiAgICB2YWx1ZV8yLnZhbHVlID0gcHJvcHMudmFsdWU7XG59LCB7IGZsdXNoOiAncHJlJ30pO1xuXG5mdW5jdGlvbiBjaGFuZ2VfdmFsdWUoKSB7XG4gICAgZW1pdCgndXBkYXRlOnZhbHVlJywgIXZhbHVlXzIudmFsdWUpO1xuICAgIGVtaXQoJ2NoYW5nZV92YWx1ZScsICF2YWx1ZV8yLnZhbHVlKTtcbn1cblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG48L3N0eWxlPlxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbiAgICA8c2xvdCBuYW1lPVwiY3VzdG9tX2hlYWRlcjJcIj48L3Nsb3Q+XG4gICAgPGRpdiByZWY9XCJ0YWJsZV9jb250YWluZXJcIiA6aWQ9XCJpZFwiPlxuICAgICAgICA8TG9hZGluZyB2LWlmPVwibG9hZGluZ1wiPjwvTG9hZGluZz5cbiAgICAgICAgPGRpdiBjbGFzcz1cImJ1dHRvbi1ncm91cCBtYi0yXCI+IDwhLS0gVGFibGVIZWFkZXIgLS0+XG4gICAgICAgICAgICA8ZGl2IHN0eWxlPVwiZmxvYXQ6bGVmdDttYXJnaW4tdG9wOjAuNXJlbTtcIj5cbiAgICAgICAgICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIFNob3dcbiAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCB2LW1vZGVsPVwicGVyX3BhZ2VcIiBAY2hhbmdlPVwiY2hhbmdlX3Blcl9wYWdlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHYtZm9yPVwicHAgaW4gcGVyX3BhZ2Vfb3B0aW9uc1wiIDp2YWx1ZT1cInBwXCI+e3sgcHAgfX08L29wdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgICAgICAgICAgIEVudHJpZXNcbiAgICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IHN0eWxlPVwidGV4dC1hbGlnbjpyaWdodDtcIiBjbGFzcz1cImZvcm0tZ3JvdXAgXCI+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPGRpdiBzdHlsZT1cInRleHQtYWxpZ246cmlnaHQ7XCIgY2xhc3M9XCJmb3JtLWdyb3VwIFwiPlxuICAgICAgICAgICAgICAgIDxzbG90IG5hbWU9XCJjdXN0b21faGVhZGVyXCI+PC9zbG90PlxuXG4gICAgICAgICAgICAgICAgPGRpdiB2LWlmPVwiZW5hYmxlX3NlYXJjaFwiIGNsYXNzPVwiZC1pbmxpbmVcIj5cbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsPnt7IF9pMThuKCdzZWFyY2gnKSB9fTpcbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwic2VhcmNoXCIgdi1tb2RlbD1cIm1hcF9zZWFyY2hcIiBAaW5wdXQ9XCJvbl9jaGFuZ2VfbWFwX3NlYXJjaFwiIGNsYXNzPVwiXCI+XG4gICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1saW5rIG1lLTFcIiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwicmVzZXRfY29sdW1uX3NpemVcIj5cbiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtY29sdW1uc1wiPjwvaT5cbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1saW5rIG1lLTFcIiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwicmVmcmVzaF90YWJsZSgpXCI+XG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLXJlZnJlc2hcIj48L2k+XG4gICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPGRpdiB2LWlmPVwic2hvd19hdXRvcmVmcmVzaCA+IDBcIiBjbGFzcz1cImQtaW5saW5lLWJsb2NrXCI+XG4gICAgICAgICAgICAgICAgICAgIDxTd2l0Y2ggdi1tb2RlbDp2YWx1ZT1cImVuYWJsZV9hdXRvcmVmcmVzaFwiIGNsYXNzPVwibWUtMiBtdC0xXCIgOnRpdGxlPVwiYXV0b3JlZnJlc2hfdGl0bGVcIiBzdHlsZT1cIlwiXG4gICAgICAgICAgICAgICAgICAgICAgICBAY2hhbmdlX3ZhbHVlPVwidXBkYXRlX2F1dG9yZWZyZXNoXCI+XG4gICAgICAgICAgICAgICAgICAgIDwvU3dpdGNoPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgPERyb3Bkb3duIDppZD1cImlkICsgJ19kcm9wZG93bidcIiByZWY9XCJkcm9wZG93blwiPiA8IS0tIERyb3Bkb3duIGNvbHVtbnMgLS0+XG4gICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1leWVcIj48L2k+XG4gICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6bWVudT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1mb3I9XCJjb2wgaW4gY29sdW1uc193cmFwXCIgY2xhc3M9XCJmb3JtLWNoZWNrIGZvcm0tc3dpdGNoIG1zLTFcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0XCIgc3R5bGU9XCJjdXJzb3I6cG9pbnRlcjtcIiA6Y2hlY2tlZD1cImNvbC52aXNpYmxlID09IHRydWVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9XCJjaGFuZ2VfY29sdW1uc192aXNpYmlsaXR5KGNvbClcIiB0eXBlPVwiY2hlY2tib3hcIiA6aWQ9XCJnZXRfY29sX2lkKGNvbClcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJmb3JtLWNoZWNrLWxhYmVsXCIgOmZvcj1cImdldF9jb2xfaWQoY29sKVwiIHYtaHRtbD1cInByaW50X2NvbHVtbl9uYW1lKGNvbC5kYXRhKVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICA8L0Ryb3Bkb3duPiA8IS0tIERyb3Bkb3duIGNvbHVtbnMgLS0+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+IDwhLS0gVGFibGVIZWFkZXIgLS0+XG5cbiAgICAgICAgPGRpdiA6a2V5PVwidGFibGVfa2V5XCIgc3R5bGU9XCJvdmVyZmxvdzphdXRvO3dpZHRoOjEwMCU7XCI+IDwhLS0gVGFibGUgLS0+XG4gICAgICAgICAgICA8ZGl2IHYtaWY9XCJkaXNwbGF5X21lc3NhZ2UgPT0gdHJ1ZVwiIGNsYXNzPVwiY2VudGVyZWQtbWVzc2FnZVwiPlxuICAgICAgICAgICAgICAgIDxzcGFuIHYtaHRtbD1cIm1lc3NhZ2VfdG9fZGlzcGxheVwiPjwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPHRhYmxlIHJlZj1cInRhYmxlXCIgY2xhc3M9XCJ0YWJsZSB0YWJsZS1zdHJpcGVkIHRhYmxlLWJvcmRlcmVkIG1sLTAgbXItMCBtYi0wIG50b3BuZy10YWJsZVwiXG4gICAgICAgICAgICAgICAgOmNsYXNzPVwiWyhkaXNwbGF5X21lc3NhZ2UgfHwgbG9hZGluZykgPyAnbnRvcG5nLWdyYXktb3V0JyA6ICcnXVwiIGRhdGEtcmVzaXphYmxlPVwidHJ1ZVwiXG4gICAgICAgICAgICAgICAgOmRhdGEtcmVzaXphYmxlLWNvbHVtbnMtaWQ9XCJpZFwiPiA8IS0tIFRhYmxlIC0tPlxuICAgICAgICAgICAgICAgIDx0aGVhZD5cbiAgICAgICAgICAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtZm9yPVwiKGNvbCwgY29sX2luZGV4KSBpbiBjb2x1bW5zX3dyYXBcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggdi1pZj1cImNvbC52aXNpYmxlXCIgc2NvcGU9XCJjb2xcIiA6Y2xhc3M9XCJ7ICdwb2ludGVyJzogY29sLnNvcnRhYmxlLCAndW5zZXQnOiAhY29sLnNvcnRhYmxlLCB9XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9XCJ3aGl0ZS1zcGFjZTogbm93cmFwO1wiIEBjbGljaz1cImNoYW5nZV9jb2x1bW5fc29ydChjb2wsIGNvbF9pbmRleClcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ZGF0YS1yZXNpemFibGUtY29sdW1uLWlkPVwiZ2V0X2NvbHVtbl9pZChjb2wuZGF0YSlcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT1cImRpc3BsYXk6ZmxleDtcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHYtaHRtbD1cInByaW50X2NvbHVtbl9uYW1lKGNvbC5kYXRhKVwiIGNsYXNzPVwid3JhcC1jb2x1bW5cIj48L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIDxpIHYtc2hvdz1cImNvbC5zb3J0ID09IDBcIiBjbGFzcz1cImZhIGZhLWZ3IGZhLXNvcnRcIj48L2k+IC0tPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSB2LXNob3c9XCJjb2wuc29ydCA9PSAxICYmIGNvbC5zb3J0YWJsZVwiIGNsYXNzPVwiZmEgZmEtZncgZmEtc29ydC11cFwiPjwvaT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIHYtc2hvdz1cImNvbC5zb3J0ID09IDIgJiYgY29sLnNvcnRhYmxlXCIgY2xhc3M9XCJmYSBmYS1mdyBmYS1zb3J0LWRvd25cIj48L2k+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGg+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgICAgIDwvdGhlYWQ+XG4gICAgICAgICAgICAgICAgPHRib2R5PlxuICAgICAgICAgICAgICAgICAgICA8dHIgdi1pZj1cIiFjaGFuZ2luZ19jb2x1bW5fdmlzaWJpbGl0eSAmJiAhY2hhbmdpbmdfcm93c1wiIHYtZm9yPVwicm93IGluIGFjdGl2ZV9yb3dzXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1mb3I9XCIoY29sLCBjb2xfaW5kZXgpIGluIGNvbHVtbnNfd3JhcFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCB2LWlmPVwiY29sLnZpc2libGVcIiBzY29wZT1cImNvbFwiIGNsYXNzPVwiXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1pZj1cInByaW50X2h0bWxfcm93ICE9IG51bGwgJiYgcHJpbnRfaHRtbF9yb3coY29sLmRhdGEsIHJvdywgdHJ1ZSkgIT0gbnVsbFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Y2xhc3M9XCJjb2wuY2xhc3Nlc1wiIGNsYXNzPVwid3JhcC1jb2x1bW5cIiA6c3R5bGU9XCJjb2wuc3R5bGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1odG1sPVwicHJpbnRfaHRtbF9yb3coY29sLmRhdGEsIHJvdylcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgOnN0eWxlPVwiY29sLnN0eWxlXCIgc3R5bGU9XCJcIiBjbGFzcz1cIndyYXAtY29sdW1uIG1hcmdpbi1zbVwiIDpjbGFzcz1cImNvbC5jbGFzc2VzXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VnVlTm9kZSA6a2V5PVwicm93XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LWlmPVwicHJpbnRfdnVlX25vZGVfcm93ICE9IG51bGwgJiYgcHJpbnRfdnVlX25vZGVfcm93KGNvbC5kYXRhLCByb3csIHZ1ZV9vYmosIHRydWUpICE9IG51bGxcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpjb250ZW50PVwicHJpbnRfdnVlX25vZGVfcm93KGNvbC5kYXRhLCByb3csIHZ1ZV9vYmopXCI+PC9WdWVOb2RlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgICAgICAgPHRyIHYtaWY9XCJkaXNwbGF5X2VtcHR5X3Jvd3MgJiYgYWN0aXZlX3Jvd3MubGVuZ3RoIDwgcGVyX3BhZ2VcIlxuICAgICAgICAgICAgICAgICAgICAgICAgdi1mb3I9XCJpbmRleCBpbiAocGVyX3BhZ2UgLSBhY3RpdmVfcm93cy5sZW5ndGgpXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1mb3I9XCIoY29sLCBjb2xfaW5kZXgpIGluIGNvbHVtbnNfd3JhcFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBzdHlsZT1cIlwiIGNsYXNzPVwiXCIgdi1pZj1cImNvbC52aXNpYmxlXCIgc2NvcGU9XCJjb2xcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIndyYXAtY29sdW1uXCI+PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgICAgIDwvdGFibGU+IDwhLS0gVGFibGUgLS0+XG4gICAgICAgIDwvZGl2PiA8IS0tIFRhYmxlIGRpdi0tPlxuXG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8U2VsZWN0VGFibGVQYWdlIHJlZj1cInNlbGVjdF90YWJsZV9wYWdlXCIgOmtleT1cInNlbGVjdF9wYWdlc19rZXlcIiA6dG90YWxfcm93cz1cInRvdGFsX3Jvd3NcIiA6cGVyX3BhZ2U9XCJwZXJfcGFnZVwiXG4gICAgICAgICAgICAgICAgQGNoYW5nZV9hY3RpdmVfcGFnZT1cImNoYW5nZV9hY3RpdmVfcGFnZVwiPlxuICAgICAgICAgICAgPC9TZWxlY3RUYWJsZVBhZ2U+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgdi1pZj1cInF1ZXJ5X2luZm8gIT0gbnVsbFwiIGNsYXNzPVwibXQtMlwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtZW5kXCI+XG4gICAgICAgICAgICAgICAgPHNtYWxsIHN0eWxlPVwiXCIgY2xhc3M9XCJxdWVyeSB0ZXh0LWVuZFwiPjxzcGFuIGNsYXNzPVwicmVjb3Jkc1wiPnt7IHF1ZXJ5X2luZm8ubnVtX3JlY29yZHNfcHJvY2Vzc2VkXG4gICAgICAgICAgICAgICAgfX08L3NwYW4+Ljwvc21hbGw+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LXN0YXJ0XCI+XG4gICAgICAgICAgICAgICAgPHNtYWxsIGlkPVwiaGlzdG9yaWNhbF9mbG93c190YWJsZS1xdWVyeS10aW1lXCIgc3R5bGU9XCJcIiBjbGFzcz1cInF1ZXJ5XCI+UXVlcnkgcGVyZm9ybWVkIGluIDxzcGFuXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cInNlY29uZHNcIj57eyAocXVlcnlfaW5mby5xdWVyeV9kdXJhdGlvbl9tc2VjIC8gMTAwMCkudG9GaXhlZCgzKSB9fTwvc3Bhbj4gc2Vjb25kcy4gPHNwYW5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlkPVwiaGlzdG9yaWNhbF9mbG93c190YWJsZS1xdWVyeVwiIHN0eWxlPVwiY3Vyc29yOiBwb2ludGVyO1wiIGNsYXNzPVwiYmFkZ2UgYmctc2Vjb25kYXJ5XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIDp0aXRsZT1xdWVyeV9pbmZvLnF1ZXJ5IEBjbGljaz1cImNvcHlfcXVlcnlfaW50b19jbGlwYm9hcmRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmPVwicXVlcnlfaW5mb19zcWxfYnV0dG9uXCI+U1FMPC9zcGFuPjwvc21hbGw+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIGNvbXB1dGVkLCB3YXRjaCwgbmV4dFRpY2sgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBoIH0gZnJvbSAndnVlJztcbmltcG9ydCB7IG50b3BuZ191dGlsaXR5LCBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcy5qc1wiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBEcm9wZG93biB9IGZyb20gXCIuL2Ryb3Bkb3duLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RUYWJsZVBhZ2UgfSBmcm9tIFwiLi9zZWxlY3RfdGFibGVfcGFnZS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgVnVlTm9kZSB9IGZyb20gXCIuL3Z1ZV9ub2RlLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBMb2FkaW5nIH0gZnJvbSBcIi4vbG9hZGluZy52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU3dpdGNoIH0gZnJvbSBcIi4vc3dpdGNoLnZ1ZVwiO1xuXG4vKiByb3dzX2xvYWRlZCwgaXMgZW1pdHRlZCBldmVyeSB0aW1lIHRoZSByb3dzIGFyZSBsb2FkZWQsXG4gKiBsb2FkZWQsICAgICAgaXMgZW1pdHRlZCB3aGVuIHRoZSB0YWJsZSBpcyBsb2FkZWQgKG1vdW50ZWQpXG4gKi9cbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbJ2N1c3RvbV9ldmVudCcsICdsb2FkZWQnLCAncm93c19sb2FkZWQnXSk7XG5jb25zdCB2dWVfb2JqID0ge1xuICAgIGVtaXQsXG4gICAgaCxcbiAgICBuZXh0VGljayxcbn07XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIGlkOiBTdHJpbmcsXG4gICAgY29sdW1uczogQXJyYXksXG4gICAgZ2V0X3Jvd3M6IEZ1bmN0aW9uLCAvLyBhc3luYyAoYWN0aXZlX3BhZ2U6IG51bWJlciwgcGVyX3BhZ2U6IG51bWJlciwgY29sdW1uc193cmFwOiBhbnlbXSwgc2VhcmNoX21hcDogc3RyaW5nLCBmaXJzdF9nZXRfcm93czogYm9vbGVhbikgPT4geyB0b3RhbF9yb3dzOiBudW1iZXIsIHJvd3M6IGFueVtdLCBxdWVyeV9pbmZvOiB7IHF1ZXJ5X2R1cmF0aW9uX21zZWM6IG51bWJlciwgbnVtX3JlY29yZHNfcHJvY2Vzc2VkOiBzdHJpbmcsIHF1ZXJ5OiBzdHJpbmcgfSB9XG4gICAgZ2V0X2NvbHVtbl9pZDogRnVuY3Rpb24sXG4gICAgcHJpbnRfY29sdW1uX25hbWU6IEZ1bmN0aW9uLFxuICAgIHByaW50X2h0bWxfcm93OiBGdW5jdGlvbixcbiAgICBwcmludF92dWVfbm9kZV9yb3c6IEZ1bmN0aW9uLFxuICAgIGZfaXNfY29sdW1uX3NvcnRhYmxlOiBGdW5jdGlvbixcbiAgICBmX3NvcnRfcm93czogRnVuY3Rpb24sXG4gICAgZl9nZXRfY29sdW1uX2NsYXNzZXM6IEZ1bmN0aW9uLFxuICAgIGZfZ2V0X2NvbHVtbl9zdHlsZTogRnVuY3Rpb24sXG4gICAgZW5hYmxlX3NlYXJjaDogQm9vbGVhbixcbiAgICBkaXNwbGF5X2VtcHR5X3Jvd3M6IEJvb2xlYW4sXG4gICAgc2hvd19hdXRvcmVmcmVzaDogTnVtYmVyLCAvLyBhdXRvcmVmcmVzaCBzZWNvbmRzLCBpZiBudWxsIG9yIDAgYXV0b3JlZnJlc2ggc3dpdGNoIHdpbGwgbm90IHNob3dlZFxuICAgIGRlZmF1bHRfc29ydDogT2JqZWN0LCAvLyB7IGNvbHVtbl9pZDogc3RyaW5nLCBzb3J0OiBudW1iZXIgKDAsIDEsIDIpIH1cbiAgICBjc3JmOiBTdHJpbmcsXG4gICAgcGFnaW5nOiBCb29sZWFuLFxuICAgIGRpc3BsYXlfbWVzc2FnZTogQm9vbGVhbixcbiAgICBtZXNzYWdlX3RvX2Rpc3BsYXk6IFN0cmluZyxcbn0pO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuXG5jb25zdCBzaG93X3RhYmxlID0gcmVmKHRydWUpO1xuY29uc3QgdGFibGVfY29udGFpbmVyID0gcmVmKG51bGwpO1xuY29uc3QgdGFibGUgPSByZWYobnVsbCk7XG5jb25zdCBkcm9wZG93biA9IHJlZihudWxsKTtcbmNvbnN0IHJvd3NfaHRtbF9lbGVtZW50ID0gcmVmKFtdKTtcbmxldCBhY3RpdmVfcGFnZSA9IDA7XG5sZXQgcm93cyA9IFtdO1xuY29uc3QgY29sdW1uc193cmFwID0gcmVmKFtdKTtcbmNvbnN0IGFjdGl2ZV9yb3dzID0gcmVmKFtdKTtcbmNvbnN0IHRvdGFsX3Jvd3MgPSByZWYoMCk7XG5jb25zdCBwZXJfcGFnZV9vcHRpb25zID0gWzEwLCAyMCwgNDAsIDUwLCA4MCwgMTAwXTtcbmNvbnN0IHBlcl9wYWdlID0gcmVmKDEwKTtcbmNvbnN0IHN0b3JlID0gd2luZG93LnN0b3JlO1xuY29uc3QgbWFwX3NlYXJjaCA9IHJlZihcIlwiKTtcblxuY29uc3Qgc2VsZWN0X3RhYmxlX3BhZ2UgPSByZWYobnVsbCk7XG5jb25zdCBsb2FkaW5nID0gcmVmKGZhbHNlKTtcbmNvbnN0IHF1ZXJ5X2luZm8gPSByZWYobnVsbCk7XG5jb25zdCBxdWVyeV9pbmZvX3NxbF9idXR0b24gPSByZWYobnVsbCk7XG5jb25zdCBjaGFuZ2luZ19jb2x1bW5fdmlzaWJpbGl0eSA9IHJlZihmYWxzZSk7XG5jb25zdCBjaGFuZ2luZ19yb3dzID0gcmVmKGZhbHNlKTtcbmNvbnN0IGVuYWJsZV9hdXRvcmVmcmVzaCA9IHJlZihmYWxzZSk7XG5cbm9uTW91bnRlZChhc3luYyAoKSA9PiB7XG4gICAgaWYgKHByb3BzLmNvbHVtbnMgIT0gbnVsbCkge1xuICAgICAgICBsb2FkX3RhYmxlKCk7XG4gICAgfVxufSk7XG5cbmNvbnN0IGF1dG9yZWZyZXNoX3RpdGxlID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGlmIChwcm9wcy5zaG93X2F1dG9yZWZyZXNoID09IG51bGwgfHwgcHJvcHMuc2hvd19hdXRvcmVmcmVzaCA8PSAwKSB7XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgICBsZXQgdGV4dCA9IF9pMThuKFwidGFibGUuYXV0b3JlZnJlc2hcIik7XG4gICAgcmV0dXJuIHRleHQucmVwbGFjZShcIiV0aW1lXCIsIHByb3BzLnNob3dfYXV0b3JlZnJlc2gpO1xufSk7XG5cbndhdGNoKCgpID0+IFtwcm9wcy5pZCwgcHJvcHMuY29sdW1uc10sIChjdXJfdmFsdWUsIG9sZF92YWx1ZSkgPT4ge1xuICAgIGxvYWRfdGFibGUoKTtcbn0sIHsgZmx1c2g6ICdwcmUnIH0pO1xuXG5mdW5jdGlvbiBnZXRfY29sX2lkKGNvbCkge1xuICAgIGlmKGNvbCAhPSBudWxsICYmIGNvbC5pZCAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBjb2wuaWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFwidG9nZ2xlLUJlZ2luXCI7XG4gICAgfVxufVxuYXN5bmMgZnVuY3Rpb24gbG9hZF90YWJsZSgpIHtcbiAgICBhd2FpdCBzZXRfY29sdW1uc193cmFwKCk7XG4gICAgYXdhaXQgc2V0X3Jvd3MoKTtcbiAgICBzZXRfY29sdW1uc19yZXNpemFibGUoKTtcbiAgICBhd2FpdCBuZXh0VGljaygpO1xuICAgIGRyb3Bkb3duLnZhbHVlLmxvYWRfbWVudSgpO1xuICAgIGVtaXQoXCJsb2FkZWRcIik7XG59XG5cbmxldCBhdXRvcmVmcmVzaF9pbnRlcnZhbDtcbmZ1bmN0aW9uIHVwZGF0ZV9hdXRvcmVmcmVzaCgpIHtcbiAgICBpZiAoZW5hYmxlX2F1dG9yZWZyZXNoLnZhbHVlID09IGZhbHNlKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwoYXV0b3JlZnJlc2hfaW50ZXJ2YWwpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGF1dG9yZWZyZXNoX2ludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICBjaGFuZ2VfYWN0aXZlX3BhZ2UoKTtcbiAgICB9LCBwcm9wcy5zaG93X2F1dG9yZWZyZXNoICogMTAwMCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNoYW5nZV9jb2x1bW5zX3Zpc2liaWxpdHkoY29sKSB7XG4gICAgY2hhbmdpbmdfY29sdW1uX3Zpc2liaWxpdHkudmFsdWUgPSB0cnVlO1xuICAgIGNvbC52aXNpYmxlID0gIWNvbC52aXNpYmxlO1xuICAgIGlmIChwcm9wcy5wYWdpbmcpIHtcbiAgICAgICAgYXdhaXQgc2V0X3Jvd3MoKTtcbiAgICB9XG4gICAgLy8gcmVkcmF3X3RhYmxlKCk7XG4gICAgYXdhaXQgcmVkcmF3X3RhYmxlX3Jlc2l6YWJsZSgpO1xuICAgIGF3YWl0IHNldF9jb2x1bW5zX3Zpc2liaWxpdHkoKTtcbiAgICAvLyBzZXRfY29sdW1uc19yZXNpemFibGUoKTtcbiAgICBjaGFuZ2luZ19jb2x1bW5fdmlzaWJpbGl0eS52YWx1ZSA9IGZhbHNlO1xufVxuXG5hc3luYyBmdW5jdGlvbiByZWRyYXdfdGFibGVfcmVzaXphYmxlKCkge1xuICAgIGF3YWl0IHJlZHJhd190YWJsZSgpO1xuICAgIHNldF9jb2x1bW5zX3Jlc2l6YWJsZSgpO1xufVxuXG5jb25zdCB0YWJsZV9rZXkgPSByZWYoMCk7XG5hc3luYyBmdW5jdGlvbiByZWRyYXdfdGFibGUoKSB7XG4gICAgdGFibGVfa2V5LnZhbHVlICs9IDE7XG4gICAgYXdhaXQgbmV4dFRpY2soKTtcbn1cblxuZnVuY3Rpb24gc2V0X2NvbHVtbnNfcmVzaXphYmxlKCkge1xuICAgIGxldCBvcHRpb25zID0ge1xuICAgICAgICAvLyBzZWxlY3RvcjogdGFibGUudmFsdWUsXG4gICAgICAgIC8vIHBhZGRpbmc6IDAsXG4gICAgICAgIHN0b3JlOiBzdG9yZSxcbiAgICAgICAgbWluV2lkdGg6IDMyLFxuICAgICAgICAvLyBwYWRkaW5nOiAtNTAsXG4gICAgICAgIC8vIG1heFdpZHRoOiAxNTAsXG4gICAgfTtcbiAgICAkKHRhYmxlLnZhbHVlKS5yZXNpemFibGVDb2x1bW5zKG9wdGlvbnMpO1xuICAgIC8vICQodGFibGUudmFsdWUpLmNzcygnd2lkdGgnLCAnMTAwJScpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRfY29sdW1uc192aXNpYmlsaXR5X2RpY3QoKSB7XG4gICAgaWYgKHByb3BzLmNzcmYgPT0gbnVsbCkgeyByZXR1cm4ge307IH1cbiAgICBjb25zdCBwYXJhbXMgPSB7IHRhYmxlX2lkOiBwcm9wcy5pZCB9O1xuICAgIGNvbnN0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMocGFyYW1zKTtcbiAgICBjb25zdCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L3RhYmxlcy91c2VyX2NvbHVtbnNfY29uZmlnLmx1YT8ke3VybF9wYXJhbXN9YDtcbiAgICBsZXQgY29sdW1uc192aXNpYmxlID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCk7XG4gICAgbGV0IGNvbHVtbnNfdmlzaWJsZV9kaWN0ID0ge307XG4gICAgY29sdW1uc192aXNpYmxlLmZvckVhY2goKGMpID0+IHtcbiAgICAgICAgY29sdW1uc192aXNpYmxlX2RpY3RbYy5pZF0gPSBjO1xuICAgIH0pO1xuICAgIHJldHVybiBjb2x1bW5zX3Zpc2libGVfZGljdDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gc2V0X2NvbHVtbnNfdmlzaWJpbGl0eSgpIHtcbiAgICBpZiAocHJvcHMuY3NyZiA9PSBudWxsKSB7IHJldHVybjsgfVxuICAgIGxldCBwYXJhbXMgPSB7IHRhYmxlX2lkOiBwcm9wcy5pZCwgdmlzaWJsZV9jb2x1bW5zX2lkczogW10sIGNzcmY6IHByb3BzLmNzcmYgfTtcbiAgICBwYXJhbXMudmlzaWJsZV9jb2x1bW5zX2lkcyA9IGNvbHVtbnNfd3JhcC52YWx1ZS5tYXAoKGMsIGkpID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlkOiBjLmlkLFxuICAgICAgICAgICAgdmlzaWJsZTogYy52aXNpYmxlLFxuICAgICAgICAgICAgb3JkZXI6IGMub3JkZXIsXG4gICAgICAgICAgICBzb3J0OiBjLnNvcnQsXG4gICAgICAgIH07XG4gICAgfSk7XG4gICAgY29uc3QgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2FkZC90YWJsZXMvdXNlcl9jb2x1bW5zX2NvbmZpZy5sdWFgO1xuICAgIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcG9zdF9yZXF1ZXN0KHVybCwgcGFyYW1zKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gc2V0X2NvbHVtbnNfd3JhcCgpIHtcbiAgICBsZXQgY29sc192aXNpYmlsaXR5X2RpY3QgPSBhd2FpdCBnZXRfY29sdW1uc192aXNpYmlsaXR5X2RpY3QoKTtcbiAgICBsZXQgaXNfdGFibGVfbm90X3NvcnRlZCA9IHRydWU7XG4gICAgZm9yIChsZXQgaWQgaW4gY29sc192aXNpYmlsaXR5X2RpY3QpIHtcbiAgICAgICAgaXNfdGFibGVfbm90X3NvcnRlZCAmPSAoY29sc192aXNpYmlsaXR5X2RpY3RbaWRdPy5zb3J0KTtcbiAgICB9XG4gICAgY29sdW1uc193cmFwLnZhbHVlID0gcHJvcHMuY29sdW1ucy5tYXAoKGMsIGkpID0+IHtcbiAgICAgICAgbGV0IGNsYXNzZXMgPSBbXTtcbiAgICAgICAgbGV0IHN0eWxlID0gXCJcIjtcbiAgICAgICAgaWYgKHByb3BzLmZfZ2V0X2NvbHVtbl9jbGFzc2VzICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNsYXNzZXMgPSBwcm9wcy5mX2dldF9jb2x1bW5fY2xhc3NlcyhjKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvcHMuZl9nZXRfY29sdW1uX3N0eWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHN0eWxlID0gcHJvcHMuZl9nZXRfY29sdW1uX3N0eWxlKGMpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBpZCA9IHByb3BzLmdldF9jb2x1bW5faWQoYyk7XG4gICAgICAgIGxldCBjb2xfb3B0ID0gY29sc192aXNpYmlsaXR5X2RpY3RbaWRdO1xuICAgICAgICBsZXQgc29ydCA9IGNvbF9vcHQ/LnNvcnQ7XG4gICAgICAgIGlmIChpc190YWJsZV9ub3Rfc29ydGVkID09IHRydWUgJiYgc29ydCA9PSBudWxsICYmIHByb3BzLmRlZmF1bHRfc29ydCAhPSBudWxsICYmIGlkID09IHByb3BzLmRlZmF1bHRfc29ydC5jb2x1bW5faWQpIHtcbiAgICAgICAgICAgIHNvcnQgPSBwcm9wcy5kZWZhdWx0X3NvcnQuc29ydDtcbiAgICAgICAgfSBlbHNlIGlmIChjb2xfb3B0Py5zb3J0KSB7XG4gICAgICAgICAgICBzb3J0ID0gY29sX29wdD8uc29ydDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNvcnQgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpZCxcbiAgICAgICAgICAgIHZpc2libGU6IGNvbF9vcHQ/LnZpc2libGUgPT0gbnVsbCB8fCBjb2xfb3B0Py52aXNpYmxlID09IHRydWUsXG4gICAgICAgICAgICBzb3J0OiBzb3J0LFxuICAgICAgICAgICAgc29ydGFibGU6IGlzX2NvbHVtbl9zb3J0YWJsZShjKSxcbiAgICAgICAgICAgIG9yZGVyOiBjb2xfb3B0Py5vcmRlciB8fCBpLFxuICAgICAgICAgICAgY2xhc3NlcyxcbiAgICAgICAgICAgIHN0eWxlLFxuICAgICAgICAgICAgZGF0YTogYyxcbiAgICAgICAgfTtcbiAgICB9KTtcbiAgICBhd2FpdCBzZXRfY29sdW1uc192aXNpYmlsaXR5KCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJlc2V0X2NvbHVtbl9zaXplKCkge1xuICAgIHByb3BzLmNvbHVtbnMuZm9yRWFjaCgoYykgPT4ge1xuICAgICAgICBsZXQgaWQgPSBgJHtwcm9wcy5pZH0tJHtwcm9wcy5nZXRfY29sdW1uX2lkKGMpfWA7XG4gICAgICAgIHN0b3JlLnJlbW92ZShpZCk7XG4gICAgfSk7XG4gICAgYXdhaXQgcmVkcmF3X3RhYmxlX3Jlc2l6YWJsZSgpO1xufVxuXG5mdW5jdGlvbiBjaGFuZ2VfcGVyX3BhZ2UoKSB7XG4gICAgcmVkcmF3X3NlbGVjdF9wYWdlcygpO1xuICAgIGNoYW5nZV9hY3RpdmVfcGFnZSgwKTtcbn1cblxuY29uc3Qgc2VsZWN0X3BhZ2VzX2tleSA9IHJlZigwKTtcbmZ1bmN0aW9uIHJlZHJhd19zZWxlY3RfcGFnZXMoKSB7XG4gICAgc2VsZWN0X3BhZ2VzX2tleS52YWx1ZSArPSAxO1xufVxuXG5jb25zdCB0YWJsZV9jb250ZW50X2lkID0gcmVmKDApO1xuZnVuY3Rpb24gcmVmcmVzaF90YWJsZV9jb250ZW50KCkge1xuICAgIHRhYmxlX2NvbnRlbnRfaWQudmFsdWUgKz0gMTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gY2hhbmdlX2FjdGl2ZV9wYWdlKG5ld19hY3RpdmVfcGFnZSkge1xuICAgIGlmIChuZXdfYWN0aXZlX3BhZ2UgIT0gbnVsbCkge1xuICAgICAgICBhY3RpdmVfcGFnZSA9IG5ld19hY3RpdmVfcGFnZTtcbiAgICB9XG4gICAgaWYgKGFjdGl2ZV9wYWdlID09IG51bGwpIHtcbiAgICAgICAgYWN0aXZlX3BhZ2UgPSAwO1xuICAgIH1cbiAgICBpZiAocHJvcHMucGFnaW5nID09IHRydWUgfHwgZm9yY2VfcmVmcmVzaCkge1xuICAgICAgICBhd2FpdCBzZXRfcm93cygpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHNldF9hY3RpdmVfcm93cygpO1xuICAgIH1cbiAgICByZWZyZXNoX3RhYmxlX2NvbnRlbnQoKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gY2hhbmdlX2NvbHVtbl9zb3J0KGNvbCwgY29sX2luZGV4KSB7XG4gICAgaWYgKCFjb2wuc29ydGFibGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb2wuc29ydCA9IChjb2wuc29ydCArIDEpICUgMztcbiAgICBjb2x1bW5zX3dyYXAudmFsdWUuZmlsdGVyKChjLCBpKSA9PiBpICE9IGNvbF9pbmRleCkuZm9yRWFjaCgoYykgPT4gYy5zb3J0ID0gMCk7XG4gICAgaWYgKGNvbC5zb3J0ID09IDApIHsgcmV0dXJuOyB9XG4gICAgaWYgKHByb3BzLnBhZ2luZykge1xuICAgICAgICBhd2FpdCBzZXRfcm93cygpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHNldF9hY3RpdmVfcm93cygpO1xuICAgIH1cbiAgICBhd2FpdCBzZXRfY29sdW1uc192aXNpYmlsaXR5KCk7XG59XG5cbmZ1bmN0aW9uIGdldF9zb3J0X2Z1bmN0aW9uKCkge1xuICAgIGlmIChwcm9wcy5mX3NvcnRfcm93cyAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBwcm9wcy5mX3NvcnRfcm93cztcbiAgICB9XG4gICAgcmV0dXJuIChjb2wsIHIwLCByMSkgPT4ge1xuICAgICAgICBsZXQgcjBfY29sID0gcHJvcHMucHJpbnRfaHRtbF9yb3coY29sLmRhdGEsIHIwKTtcbiAgICAgICAgbGV0IHIxX2NvbCA9IHByb3BzLnByaW50X2h0bWxfcm93KGNvbC5kYXRhLCByMSk7XG4gICAgICAgIGlmIChjb2wuc29ydCA9PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gcjBfY29sLmxvY2FsZUNvbXBhcmUocjFfY29sKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcjFfY29sLmxvY2FsZUNvbXBhcmUocjBfY29sKTtcbiAgICB9O1xufVxuXG5sZXQgZm9yY2VfcmVmcmVzaCA9IGZhbHNlO1xubGV0IGZvcmNlX2Rpc2FibGVfbG9hZGluZyA9IGZhbHNlO1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogIEZ1bmN0aW9uIHVzZWQgdG8gcmVsb2FkIHRoZSB0YWJsZSBjb250ZW50cywgXG4gICAgc2V0IGRpc2FibGVfbG9hZGluZyB0byB0cnVlIGlmIG5vIGxvYWRpbmcgaXMgbmVlZGVkIGFuZFxuICAgIGNvbnNlcXVlbnRseSBkbyBub3QganVtcCB0byB0aGUgZmlyc3QgcGFnZSwgYnV0XG4gICAganVzdCByZWxvYWQgdGhlIGN1cnJlbnQgcGFnZVxuKi9cbmFzeW5jIGZ1bmN0aW9uIHJlZnJlc2hfdGFibGUoZGlzYWJsZV9sb2FkaW5nKSB7XG4gICAgLyogTk9URTogZmlyc3QgcmVmcmVzaF90YWJsZSBpcyBjYWxsZWQgdGhlbiBzZXRfcm93cyAqL1xuICAgIGZvcmNlX3JlZnJlc2ggPSB0cnVlO1xuICAgIGZvcmNlX2Rpc2FibGVfbG9hZGluZyA9IGRpc2FibGVfbG9hZGluZyB8fCBmYWxzZTtcblxuICAgIGlmKGZvcmNlX2Rpc2FibGVfbG9hZGluZykge1xuICAgICAgICAvKiBJbiBjYXNlIG9mIGRpc2FibGVkIGxvYWRpbmcsIHJlbG9hZCB0aGUgc2FtZSBwYWdlICovXG4gICAgICAgIHNlbGVjdF90YWJsZV9wYWdlLnZhbHVlLmNoYW5nZV9hY3RpdmVfcGFnZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIE90aGVyd2lzZSByZWxvYWQgZnJvbSBwYWdlIDEgKi9cbiAgICAgICAgc2VsZWN0X3RhYmxlX3BhZ2UudmFsdWUuY2hhbmdlX2FjdGl2ZV9wYWdlKDAsIDApO1xuICAgIH1cbiAgICBhd2FpdCBuZXh0VGljaygpO1xuXG4gICAgLyogUmVzZXQgdGhlIHJlZnJlc2gvbG9hZGluZyBwYXJhbXMgKi9cbiAgICBmb3JjZV9yZWZyZXNoID0gZmFsc2U7XG4gICAgZm9yY2VfZGlzYWJsZV9sb2FkaW5nID0gZmFsc2U7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5sZXQgZmlyc3RfZ2V0X3Jvd3MgPSB0cnVlO1xuYXN5bmMgZnVuY3Rpb24gc2V0X3Jvd3MoKSB7XG4gICAgLy8gY2hhbmdpbmdfcm93cy52YWx1ZSA9IHRydWU7XG4gICAgbG9hZGluZy52YWx1ZSA9IHRydWUgJiYgIWZvcmNlX2Rpc2FibGVfbG9hZGluZztcbiAgICBsZXQgcmVzID0gYXdhaXQgcHJvcHMuZ2V0X3Jvd3MoYWN0aXZlX3BhZ2UsIHBlcl9wYWdlLnZhbHVlLCBjb2x1bW5zX3dyYXAudmFsdWUsIG1hcF9zZWFyY2gudmFsdWUsIGZpcnN0X2dldF9yb3dzKTtcbiAgICBxdWVyeV9pbmZvLnZhbHVlID0gbnVsbDtcbiAgICBpZiAocmVzLnF1ZXJ5X2luZm8gIT0gbnVsbCkge1xuICAgICAgICBxdWVyeV9pbmZvLnZhbHVlID0gcmVzLnF1ZXJ5X2luZm87XG4gICAgfVxuICAgIGZpcnN0X2dldF9yb3dzID0gZmFsc2U7XG4gICAgdG90YWxfcm93cy52YWx1ZSA9IHJlcy5yb3dzLmxlbmd0aDtcbiAgICBpZiAocHJvcHMucGFnaW5nID09IHRydWUpIHtcbiAgICAgICAgdG90YWxfcm93cy52YWx1ZSA9IHJlcy50b3RhbF9yb3dzO1xuICAgIH1cbiAgICByb3dzID0gcmVzLnJvd3M7XG4gICAgc2V0X2FjdGl2ZV9yb3dzKCk7XG4gICAgbG9hZGluZy52YWx1ZSA9IGZhbHNlO1xuICAgIGVtaXQoJ3Jvd3NfbG9hZGVkJywgcmVzKTtcbn1cblxuZnVuY3Rpb24gaXNfY29sdW1uX3NvcnRhYmxlKGNvbCkge1xuICAgIGlmIChwcm9wcy5mX2lzX2NvbHVtbl9zb3J0YWJsZSAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBwcm9wcy5mX2lzX2NvbHVtbl9zb3J0YWJsZShjb2wpO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gc2V0X2FjdGl2ZV9yb3dzKCkge1xuICAgIGxldCBzdGFydF9yb3dfaW5kZXggPSAwO1xuICAgIGlmIChwcm9wcy5wYWdpbmcgPT0gZmFsc2UpIHtcbiAgICAgICAgc3RhcnRfcm93X2luZGV4ID0gYWN0aXZlX3BhZ2UgKiBwZXJfcGFnZS52YWx1ZTtcbiAgICB9XG4gICAgaWYgKHByb3BzLnBhZ2luZyA9PSBmYWxzZSkge1xuICAgICAgICBsZXQgZl9zb3J0ID0gZ2V0X3NvcnRfZnVuY3Rpb24oKTtcbiAgICAgICAgbGV0IGNvbF90b19zb3J0ID0gZ2V0X2NvbHVtbl90b19zb3J0KCk7XG4gICAgICAgIHJvd3MgPSByb3dzLnNvcnQoKHIwLCByMSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGZfc29ydChjb2xfdG9fc29ydCwgcjAsIHIxKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFjdGl2ZV9yb3dzLnZhbHVlID0gcm93cy5zbGljZShzdGFydF9yb3dfaW5kZXgsIHN0YXJ0X3Jvd19pbmRleCArIHBlcl9wYWdlLnZhbHVlKTtcbn1cblxuZnVuY3Rpb24gZ2V0X2NvbHVtbl90b19zb3J0KCkge1xuICAgIGxldCBjb2xfdG9fc29ydCA9IGNvbHVtbnNfd3JhcC52YWx1ZS5maW5kKChjKSA9PiBjLnNvcnQgIT0gMCk7XG4gICAgcmV0dXJuIGNvbF90b19zb3J0O1xufVxuXG5sZXQgbWFwX3NlYXJjaF9jaGFuZ2VfdGltZW91dDtcbmFzeW5jIGZ1bmN0aW9uIG9uX2NoYW5nZV9tYXBfc2VhcmNoKCkge1xuICAgIGxldCB0aW1lb3V0ID0gMTAwMDtcbiAgICBpZiAobWFwX3NlYXJjaF9jaGFuZ2VfdGltZW91dCAhPSBudWxsKSB7XG4gICAgICAgIGNsZWFyVGltZW91dChtYXBfc2VhcmNoX2NoYW5nZV90aW1lb3V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aW1lb3V0ID0gMDtcbiAgICB9XG4gICAgbWFwX3NlYXJjaF9jaGFuZ2VfdGltZW91dCA9IHNldFRpbWVvdXQoYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCBzZXRfcm93cygpO1xuICAgICAgICBtYXBfc2VhcmNoX2NoYW5nZV90aW1lb3V0ID0gbnVsbDtcbiAgICB9LCB0aW1lb3V0KTtcblxufVxuXG5mdW5jdGlvbiBzZWFyY2hfdmFsdWUodmFsdWUpIHtcbiAgICBtYXBfc2VhcmNoLnZhbHVlID0gdmFsdWU7IC8qIEFkZCB0aGUgbmV3IHZhbHVlICovXG4gICAgb25fY2hhbmdlX21hcF9zZWFyY2goKTtcbn1cblxuZnVuY3Rpb24gY29weV9xdWVyeV9pbnRvX2NsaXBib2FyZCgkZXZlbnQpIHtcbiAgICBOdG9wVXRpbHMuY29weVRvQ2xpcGJvYXJkKHF1ZXJ5X2luZm8udmFsdWUucXVlcnksIHF1ZXJ5X2luZm9fc3FsX2J1dHRvbi52YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIGdldF9jb2x1bW5zX2RlZnMoKSB7XG4gICAgcmV0dXJuIGNvbHVtbnNfd3JhcC52YWx1ZTtcbn1cblxuZnVuY3Rpb24gZ2V0X3Jvd3NfbnVtKCkge1xuICAgIHJldHVybiB0b3RhbF9yb3dzLnZhbHVlO1xufVxuXG5kZWZpbmVFeHBvc2UoeyBsb2FkX3RhYmxlLCByZWZyZXNoX3RhYmxlLCBnZXRfY29sdW1uc19kZWZzLCBnZXRfcm93c19udW0sIHNlYXJjaF92YWx1ZSB9KTtcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG4uc3RpY2t5IHtcbiAgICBwb3NpdGlvbjogc3RpY2t5O1xuICAgIGxlZnQ6IDA7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG59XG5cbi53cmFwLWNvbHVtbiB7XG4gICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIHdpZHRoOiAxMDAlO1xufVxuXG4ucG9pbnRlciB7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xufVxuXG4udW5zZXQge1xuICAgIGN1cnNvcjogdW5zZXQ7XG59XG5cbi5saW5rLWJ1dHRvbiB7XG4gICAgY29sb3I6IHZhcigtLWJzLWRyb3Bkb3duLWxpbmstY29sb3IpO1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbn1cblxuLmxpbmstZGlzYWJsZWQge1xuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgIGNvbG9yOiAjY2NjO1xufVxuXG50ZCB7XG4gICAgaGVpZ2h0OiAyLjVyZW07XG59XG5cbi5tYXJnaW4tc20ge1xuICAgIG1hcmdpbi1ib3R0b206IC0wLjI1cmVtO1xuICAgIG1hcmdpbi10b3A6IC0wLjI1cmVtO1xufVxuPC9zdHlsZT5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG4gIDxUYWJsZSB2LWlmPVwibW91bnRfdGFibGVcIiByZWY9XCJ0YWJsZVwiXG5cdCA6aWQ9XCJ0YWJsZV9pZF8yXCJcblx0IDpjb2x1bW5zPVwidGFibGVfY29uZmlnLmNvbHVtbnNcIlxuICAgICAgICAgOmdldF9yb3dzPVwidGFibGVfY29uZmlnLmdldF9yb3dzXCJcbiAgICAgICAgIDpnZXRfY29sdW1uX2lkPVwidGFibGVfY29uZmlnLmdldF9jb2x1bW5faWRcIlxuICAgICAgICAgOnByaW50X2NvbHVtbl9uYW1lPVwidGFibGVfY29uZmlnLnByaW50X2NvbHVtbl9uYW1lXCJcblx0IDpwcmludF9odG1sX3Jvdz1cInRhYmxlX2NvbmZpZy5wcmludF9odG1sX3Jvd1wiXG5cdCA6cHJpbnRfdnVlX25vZGVfcm93PVwidGFibGVfY29uZmlnLnByaW50X3Z1ZV9ub2RlX3Jvd1wiXG5cdCA6Zl9pc19jb2x1bW5fc29ydGFibGU9XCJ0YWJsZV9jb25maWcuZl9pc19jb2x1bW5fc29ydGFibGVcIlxuXHQgOmZfZ2V0X2NvbHVtbl9jbGFzc2VzPVwidGFibGVfY29uZmlnLmZfZ2V0X2NvbHVtbl9jbGFzc2VzXCJcblx0IDpmX2dldF9jb2x1bW5fc3R5bGU9XCJ0YWJsZV9jb25maWcuZl9nZXRfY29sdW1uX3N0eWxlXCJcblx0IDpkaXNwbGF5X2VtcHR5X3Jvd3M9XCJ0YWJsZV9jb25maWcuZGlzcGxheV9lbXB0eV9yb3dzXCJcblx0IDpmX3NvcnRfcm93cz1cImZfc29ydF9yb3dzXCJcblx0IDplbmFibGVfc2VhcmNoPVwidGFibGVfY29uZmlnLmVuYWJsZV9zZWFyY2hcIlxuXHQgOmRlZmF1bHRfc29ydD1cInRhYmxlX2NvbmZpZy5kZWZhdWx0X3NvcnRcIlxuXHQgOnNob3dfYXV0b3JlZnJlc2g9XCJ0YWJsZV9jb25maWcuc2hvd19hdXRvcmVmcmVzaFwiXG5cdCA6cGFnaW5nPVwidGFibGVfY29uZmlnLnBhZ2luZ1wiXG5cdCA6Y3NyZj1cImNzcmZcIlxuICAgICA6ZGlzcGxheV9tZXNzYWdlPVwiZGlzcGxheV9tZXNzYWdlXCJcbiAgICAgOm1lc3NhZ2VfdG9fZGlzcGxheT1cIm1lc3NhZ2VfdG9fZGlzcGxheVwiXG5cdCBAbG9hZGVkPVwib25fbG9hZGVkXCJcbiAgICAgQHJvd3NfbG9hZGVkPVwicm93c19sb2FkZWRcIlxuXHQgQGN1c3RvbV9ldmVudD1cIm9uX2N1c3RvbV9ldmVudFwiPlxuICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6Y3VzdG9tX2hlYWRlcj5cbiAgICAgIDxzbG90IG5hbWU9XCJjdXN0b21faGVhZGVyXCI+PC9zbG90PlxuICAgIDwvdGVtcGxhdGU+XG4gIDwvVGFibGU+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIGNvbXB1dGVkLCB3YXRjaCwgb25CZWZvcmVVbm1vdW50LCBuZXh0VGljayB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgVGFibGUgfSBmcm9tIFwiLi90YWJsZS52dWVcIjtcbmltcG9ydCBUYWJsZVV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvdGFibGUtdXRpbHNcIjtcblxuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFsnY3VzdG9tX2V2ZW50JywgJ2xvYWRlZCcsICdyb3dzX2xvYWRlZCddKVxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gICAgdGFibGVfY29uZmlnX2lkOiBTdHJpbmcsIC8vIG5hbWUgb2YgY29uZmlndXJhdGlvbiBmaWxlIGluIGh0dHBkb2NzL3RhYmxlc19jb25maWdcbiAgICB0YWJsZV9pZDogU3RyaW5nLCAvLyBpZCBvZiB0YWJsZSwgc2FtZSB0YWJsZV9jb25maWdfaWQgY2FuIGhhdmUgZGlmZmVyZW50IHRhYmxlX2lkIGFuZCB0aGVuIGRpZmZlcmVudCBjb2x1bXVucyB2aXNpYmxlIHNldHRpbnNcbiAgICBjc3JmOiBTdHJpbmcsXG4gICAgZl9tYXBfY29uZmlnOiBGdW5jdGlvbixcbiAgICBmX21hcF9jb2x1bW5zOiBGdW5jdGlvbixcbiAgICBmX3NvcnRfcm93czogRnVuY3Rpb24sXG4gICAgZ2V0X2V4dHJhX3BhcmFtc19vYmo6IEZ1bmN0aW9uLFxuICAgIGRpc3BsYXlfbWVzc2FnZTogQm9vbGVhbixcbiAgICBtZXNzYWdlX3RvX2Rpc3BsYXk6IFN0cmluZyxcbn0pO1xuXG5jb25zdCB0YWJsZV9jb25maWcgPSByZWYoe30pO1xuY29uc3QgdGFibGUgPSByZWYobnVsbCk7XG5jb25zdCBtb3VudF90YWJsZSA9IHJlZihmYWxzZSk7XG5cbm9uTW91bnRlZChhc3luYyAoKSA9PiB7XG4gICAgaWYgKHByb3BzLnRhYmxlX2lkICE9IG51bGwgfHwgcHJvcHMudGFibGVfY29uZmlnX2lkICE9IG51bGwpIHtcblx0bG9hZF90YWJsZSgpO1xuICAgIH1cbn0pO1xuXG53YXRjaCgoKSA9PiBbcHJvcHMudGFibGVfaWQsIHByb3BzLnRhYmxlX2NvbmZpZ19pZF0sIChjdXJfdmFsdWUsIG9sZF92YWx1ZSkgPT4ge1xuICAgIGxvYWRfdGFibGUoKTtcbn0sIHsgZmx1c2g6ICdwcmUnfSk7XG5cbmNvbnN0IHRhYmxlX2lkXzIgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgaWYgKHByb3BzLnRhYmxlX2lkICE9IG51bGwpIHsgcmV0dXJuIHByb3BzLnRhYmxlX2lkOyB9XG4gICAgcmV0dXJuIHByb3BzLnRhYmxlX2NvbmZpZ19pZDtcbn0pO1xuXG5hc3luYyBmdW5jdGlvbiBsb2FkX3RhYmxlKCkge1xuICAgIG1vdW50X3RhYmxlLnZhbHVlID0gZmFsc2U7XG4gICAgYXdhaXQgbmV4dFRpY2soKTtcbiAgICBsZXQgdGFibGVfY29uZmlnX2lkXzIgPSBwcm9wcy50YWJsZV9jb25maWdfaWQ7XG4gICAgaWYgKHRhYmxlX2NvbmZpZ19pZF8yID09IG51bGwpIHtcblx0dGFibGVfY29uZmlnX2lkXzIgPSBwcm9wcy50YWJsZV9pZDtcbiAgICB9XG4gICAgdGFibGVfY29uZmlnLnZhbHVlID0gYXdhaXQgVGFibGVVdGlscy5idWlsZF90YWJsZShodHRwX3ByZWZpeCwgdGFibGVfY29uZmlnX2lkXzIsIHByb3BzLmZfbWFwX2NvbHVtbnMsIHByb3BzLmdldF9leHRyYV9wYXJhbXNfb2JqKTtcbiAgICBpZiAocHJvcHMuZl9tYXBfY29uZmlnICE9IG51bGwpIHtcblx0dGFibGVfY29uZmlnLnZhbHVlID0gcHJvcHMuZl9tYXBfY29uZmlnKHRhYmxlX2NvbmZpZy52YWx1ZSk7XG4gICAgfVxuICAgIG1vdW50X3RhYmxlLnZhbHVlID0gdHJ1ZTtcbiAgICBhd2FpdCBuZXh0VGljaygpO1xufVxuXG5mdW5jdGlvbiBvbl9sb2FkZWQoKSB7XG4gICAgZW1pdCgnbG9hZGVkJyk7XG59XG5cbmZ1bmN0aW9uIG9uX2N1c3RvbV9ldmVudChldmVudCkge1xuICAgIGVtaXQoJ2N1c3RvbV9ldmVudCcsIGV2ZW50KTtcbn1cblxuZnVuY3Rpb24gcm93c19sb2FkZWQocmVzKSB7XG4gICAgZW1pdCgncm93c19sb2FkZWQnLCByZXMpO1xufVxuXG5jb25zdCByZWZyZXNoX3RhYmxlID0gKGRpc2FibGVfbG9hZGluZykgPT4ge1xuICAgIGlmKHRhYmxlLnZhbHVlKSB7XG4gICAgICAgIHRhYmxlLnZhbHVlLnJlZnJlc2hfdGFibGUoZGlzYWJsZV9sb2FkaW5nKTtcbiAgICB9XG59XG5cbmNvbnN0IGdldF9jb2x1bW5zX2RlZnMgPSAoKSA9PiB7XG4gICAgaWYgKHRhYmxlLnZhbHVlID09IG51bGwpIHsgcmV0dXJuIFtdOyB9XG4gICAgcmV0dXJuIHRhYmxlLnZhbHVlLmdldF9jb2x1bW5zX2RlZnMoKTtcbn1cblxuY29uc3QgZ2V0X3Jvd3NfbnVtID0gKCkgPT4ge1xuICAgIHJldHVybiB0YWJsZS52YWx1ZS5nZXRfcm93c19udW0oKTtcbn1cblxuY29uc3Qgc2VhcmNoX3ZhbHVlID0gKHZhbHVlKSA9PiB7XG4gICAgdGFibGUudmFsdWUuc2VhcmNoX3ZhbHVlKHZhbHVlKTtcbn1cblxuZGVmaW5lRXhwb3NlKHsgcmVmcmVzaF90YWJsZSwgZ2V0X2NvbHVtbnNfZGVmcywgZ2V0X3Jvd3NfbnVtLCBzZWFyY2hfdmFsdWUgfSk7XG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuPC9zdHlsZT5cbiIsIjx0ZW1wbGF0ZT5cbjxkaXYgdi1pZj1cInNob3dcIiBjbGFzcz1cInNwaW5uZXItYm9yZGVyIHRleHQtcHJpbWFyeVwiIDpzdHlsZT1cInsnd2lkdGgnOiBzaXplLCAnaGVpZ2h0Jzogc2l6ZX1cIiByb2xlPVwic3RhdHVzXCI+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgb25CZWZvcmVNb3VudCB9IGZyb20gXCJ2dWVcIjtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gICAgc2l6ZTogU3RyaW5nLFxuICAgIHNob3c6IEJvb2xlYW4sXG59KTtcblxub25Nb3VudGVkKGFzeW5jICgpID0+IHtcbn0pO1xuXG48L3NjcmlwdD5cbiIsIjwhLS0gKEMpIDIwMjItMjMgLSBudG9wLm9yZyAgICAgLS0+XG5cbjx0ZW1wbGF0ZT5cbiAgPGRpdiBpZD1cInNjcmlwdC1kZXNjcmlwdGlvblwiIGNsYXNzPVwibm90ZXMgYmctbGlnaHQgYm9yZGVyXCIgcm9sZT1cImFsZXJ0XCI+XG4gICAgPGI+e3sgX2kxOG4oJ25vdGVzJykgfX08L2I+XG4gICAgPHVsPlxuICAgICAgPHRlbXBsYXRlIHYtZm9yPVwibm90ZSBpbiBwcm9wcy5ub3RlX2xpc3RcIj5cbiAgICAgICAgPGxpIHYtaHRtbD1cIm5vdGVcIj48L2xpPlxuICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwicHJvcHMuYWRkX3N1Yl9ub3Rlc1wiPlxuICAgICAgICA8dWw+XG4gICAgICAgICAgPHRlbXBsYXRlIHYtZm9yPVwibm90ZSBpbiBwcm9wcy5zdWJfbm90ZV9saXN0XCI+XG4gICAgICAgICAgICA8bGkgdi1odG1sPVwibm90ZVwiPjwvbGk+XG4gICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgPC91bD5cbiAgICAgIDwvdGVtcGxhdGU+ICBcbiAgICA8L3VsPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYgfSBmcm9tIFwidnVlXCI7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICBub3RlX2xpc3Q6IEFycmF5LFxuICBzdWJfbm90ZV9saXN0OiBBcnJheSxcbiAgYWRkX3N1Yl9ub3RlczogQm9vbGVhbixcbn0pO1xuPC9zY3JpcHQ+XG4iLCI8dGVtcGxhdGU+XG48bW9kYWwgOmlkPVwiaWRfbW9kYWxcIiBAYXBwbHk9XCJhcHBseVwiIHJlZj1cIm1vZGFsXCI+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+e3tpMThuKCd0cmFmZmljX3JlY29yZGluZy5wY2FwX2V4dHJhY3QnKX19PC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpib2R5PlxuICAgIFxuICAgIDxkaXYgY2xhc3M9XCJhbGVydFwiIDpjbGFzcz1cInsgJ2FsZXJ0LWluZm8nOiBkYXRhX2F2YWlsYWJsZSAhPSAyLCAnYWxlcnQtd2FybmluZyc6IGRhdGFfYXZhaWxhYmxlID09IDIgfVwiIHYtaHRtbD1cImRlc2NyaXB0aW9uXCI+PC9kaXY+XG4gICAgPGZvcm0gdi1pZj1cImRhdGFfYXZhaWxhYmxlID09IDFcIiBzdHlsZT1cImhlaWdodDo5NSU7XCI+XG4gICAgICA8ZGl2IGNsYXNzPVwidGFiLWNvbnRlbnRcIiBzdHlsZT1cImhlaWdodDoxMDAlO1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbWItMyBjb2wtbWQtMyBoYXMtZmVlZGJhY2tcIj5cblx0ICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1zZWNvbmRhcnlcIiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwic2hvd19oaWRlX21lbnVcIj57e2kxOG4oJ2FkdmFuY2VkJyl9fTxpIDpjbGFzcz1cInsgJ2ZhcyBmYS1jYXJldC1kb3duJzogc2hvd19tZW51LCAnZmFzIGZhLWNhcmV0LXVwJzogIXNob3dfbWVudX1cIj48L2k+PC9idXR0b24+XG4gICAgICAgICAgPC9kaXY+XG5cdCAgXG5cdCAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbWItMyBjb2wtbWQtOSB0ZXh0LXJpZ2h0IGFzZFwiPlxuXHQgICAgPGxhYmVsIGNsYXNzPVwicmFkaW8taW5saW5lXCIgc3R5bGU9XCJtYXJnaW4tbGVmdDogMXJlbTtcIj48aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cImV4dHJhY3Rfbm93XCIgdi1tb2RlbD1cImV4dHJhY3Rfbm93XCIgIHZhbHVlPVwidHJ1ZVwiIGNoZWNrZWQ9XCJcIj4ge3tpMThuKCd0cmFmZmljX3JlY29yZGluZy5leHRyYWN0X25vdycpfX0gPC9sYWJlbD5cblx0ICAgIDxsYWJlbCBjbGFzcz1cInJhZGlvLWlubGluZVwiPjxpbnB1dCB0eXBlPVwicmFkaW9cIiBuYW1lPVwiZXh0cmFjdF9ub3dcIiB2LW1vZGVsPVwiZXh0cmFjdF9ub3dcIiB2YWx1ZT1cImZhbHNlXCI+IHt7aTE4bigndHJhZmZpY19yZWNvcmRpbmcucXVldWVfYXNfam9iJyl9fSA8L2xhYmVsPlxuXHQgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cblx0XG4gICAgICAgIDxkaXYgdi1zaG93PVwic2hvd19tZW51XCIgY2xhc3M9XCJyb3dcIiBpZD1cInBjYXBEb3dubG9hZE1vZGFsX2FkdmFuY2VkXCIgc3R5bGU9XCJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtYi0zIGNvbC1tZC0xMiBoYXMtZmVlZGJhY2tcIj5cblx0ICAgIDxicj5cbiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImZvcm0tbGFiZWxcIj57e2kxOG4oJ3RyYWZmaWNfcmVjb3JkaW5nLmZpbHRlcl9icGYnKX19IDxhIGNsYXNzPVwibnRvcG5nLWV4dGVybmFsLWxpbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cubnRvcC5vcmcvZ3VpZGVzL24yZGlzay9maWx0ZXJzLmh0bWxcIj48aSBjbGFzcz1cImZhcyBmYS1leHRlcm5hbC1saW5rLWFsdFwiPjwvaT48L2E+PC9sYWJlbD5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cFwiPlxuXHQgICAgICA8c3BhbiBjbGFzcz1cImlucHV0LWdyb3VwLWFkZG9uXCI+PHNwYW4gY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLWZpbHRlclwiPjwvc3Bhbj48L3NwYW4+XG5cdCAgICAgIDxpbnB1dCBuYW1lPVwiYnBmX2ZpbHRlclwiIHYtbW9kZWw9XCJicGZfZmlsdGVyXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2wgaW5wdXQtc21cIiBkYXRhLWJwZj1cImJwZlwiIGF1dG9jb21wbGV0ZT1cIm9mZlwiIHNwZWxsY2hlY2s9XCJmYWxzZVwiPlxuXHQgICAgICA8c3BhbiB2LXNob3c9XCJpbnZhbGlkX2JwZlwiIHN0eWxlPVwibWFyZ2luOiAwcHg7cGFkZGluZzowO2Rpc3BsYXk6YmxvY2s7XCIgY2xhc3M9XCJpbnZhbGlkLWZlZWRiYWNrIFwiPnt7aTE4bignaW52YWxpZF92YWx1ZScpfX08L3NwYW4+XG4gICAgICAgICAgICA8L2Rpdj5cblx0ICAgIDxicj5cblx0ICAgIDxsYWJlbCBjbGFzcz1cImZvcm0tbGFiZWxcIj57e2kxOG4oJ3RyYWZmaWNfcmVjb3JkaW5nLmZpbHRlcl9leGFtcGxlcycpfX06PC9sYWJlbD5cblx0ICAgIDxicj5cblx0ICAgIDx1bD5cblx0ICAgICAgPGxpPkhvc3Q6IDxpPmhvc3QgMTkyLjE2OC4xLjI8L2k+PC9saT5cblx0ICAgICAgPGxpPkhUVFA6IDxpPnRjcCBhbmQgcG9ydCA4MDwvaT48L2xpPlxuXHQgICAgICA8bGk+VHJhZmZpYyBiZXR3ZWVuIGhvc3RzOiA8aT5pcCBob3N0IDE5Mi4xNjguMS4xIGFuZCAxOTIuMTY4LjEuMjwvaT48L2xpPlxuXHQgICAgICA8bGk+VHJhZmZpYyBmcm9tIGFuIGhvc3QgdG8gYW5vdGhlcjogPGk+aXAgc3JjIDE5Mi4xNjguMS4xIGFuZCBkc3QgMTkyLjE2OC4xLjI8L2k+PC9saT5cblx0ICAgIDwvdWw+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9mb3JtPlxuICA8L3RlbXBsYXRlPlxuICBcbiAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgPGJ1dHRvbiB2LXNob3c9XCJkYXRhX2F2YWlsYWJsZSAhPSAyXCIgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImFwcGx5XCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj57e2kxOG4oJ2FwcGx5Jyl9fTwvYnV0dG9uPlxuICAgIDxidXR0b24gdi1zaG93PVwiZGF0YV9hdmFpbGFibGUgPT0gMlwiIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJjbG9zZVwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+e3tpMThuKCdvaycpfX08L2J1dHRvbj5cbiAgPC90ZW1wbGF0ZT4gIFxuPC9tb2RhbD4gIFxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCB0eXBlPVwidGV4dC9qYXZhc2NyaXB0XCI+XG5pbXBvcnQgeyBkZWZpbmVDb21wb25lbnQgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICAgIGNvbXBvbmVudHM6IHtcblx0J21vZGFsJzogTW9kYWwsXG4gICAgfSxcbiAgICBwcm9wczoge1xuXHRpZDogU3RyaW5nLFxuICAgIH0sXG4gICAgdXBkYXRlZCgpIHtcbiAgICB9LFxuICAgIGRhdGEoKSB7XG5cdHJldHVybiB7XG5cdCAgICBkZXNjcmlwdGlvbjogXCJcIixcblx0ICAgIGludmFsaWRfYnBmOiBmYWxzZSxcblx0ICAgIGJwZl9maWx0ZXI6IFwiXCIsXG5cdCAgICBleHRyYWN0X25vdzogdHJ1ZSxcblx0ICAgIHNob3dfbWVudTogdHJ1ZSxcblx0ICAgIGRhdGFfYXZhaWxhYmxlOiAwLCAvLyAwID09IGxvYWRpbmcsIDEgPT0gYXZhaWxhYmxlLCAyID09IG5vIGRhdGFcblx0ICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuXHQgICAgZXBvY2hfaW50ZXJ2YWw6IG51bGwsXG5cdCAgICBpZF9tb2RhbDogYCR7dGhpcy4kcHJvcHMuaWR9X21vZGFsYCxcblx0fTtcbiAgICB9LFxuICAgIGVtaXRzOiBbXCJhcHBseVwiXSxcbiAgICBjcmVhdGVkKCkge1xuICAgIH0sXG4gICAgLyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2QgY2FsbGVkIGFmdGVyIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gICAgbW91bnRlZCgpIHtcbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcblx0cGFkMl9udW1iZXI6IGZ1bmN0aW9uKG51bWJlcikge1xuXHQgICAgcmV0dXJuIFN0cmluZyhudW1iZXIpLnBhZFN0YXJ0KDIsICcwJyk7XG5cdH0sXG5cdGZvcm1hdF9kYXRlOiBmdW5jdGlvbihkKSB7XG5cdCAgICAvLyBsZXQgZGF5ID0gdGhpcy5wYWQyX251bWJlcihkLmdldERhdGUoKSk7XG5cdCAgICAvLyBsZXQgbW9udGggPSB0aGlzLnBhZDJfbnVtYmVyKGQuZ2V0TW9udGgoKSk7XG5cdCAgICAvLyBsZXQgaG91cnMgPSB0aGlzLnBhZDJfbnVtYmVyKGQuZ2V0SG91cnMoKSk7XG5cdCAgICAvLyBsZXQgbWludXRlcyA9IHRoaXMucGFkMl9udW1iZXIoZC5nZXRNaW51dGVzKCkpO1xuXHQgICAgLy8gbGV0IHMgPSBgJHtkYXl9LyR7bW9udGh9LyR7ZC5nZXRGdWxsWWVhcigpfSAke2hvdXJzfToke21pbnV0ZXN9YDtcblx0ICAgIGxldCBkX21zID0gZC52YWx1ZU9mKCk7XG5cdCAgICByZXR1cm4gbnRvcG5nX3V0aWxpdHkuZnJvbV91dGNfdG9fc2VydmVyX2RhdGVfZm9ybWF0KGRfbXMpO1xuXHR9LFxuXHRhcHBseTogYXN5bmMgZnVuY3Rpb24oKSB7XG5cdCAgICBpZiAodGhpcy5icGZfZmlsdGVyICE9IG51bGwgJiYgdGhpcy5icGZfZmlsdGVyICE9IFwiXCIpIHtcblx0XHRsZXQgdXJsX3JlcXVlc3QgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2NoZWNrL2ZpbHRlci5sdWE/cXVlcnk9JHt0aGlzLmJwZl9maWx0ZXJ9YDtcblx0XHRsZXQgcmVzID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybF9yZXF1ZXN0LCBudWxsLCBmYWxzZSwgdHJ1ZSk7XG5cdFx0dGhpcy5pbnZhbGlkX2JwZiA9ICFyZXMucmVzcG9uc2U7XG5cdFx0aWYgKHRoaXMuaW52YWxpZF9icGYgPT0gdHJ1ZSkge1xuXHRcdCAgICByZXR1cm47XG5cdFx0fVx0XHRcblx0ICAgIH1cblx0ICAgIGxldCB1cmxfcmVxdWVzdF9vYmogPSB7XG5cdFx0aWZpZDogbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJpZmlkXCIpLFxuXHRcdGVwb2NoX2JlZ2luOiB0aGlzLmVwb2NoX2ludGVydmFsLmVwb2NoX2JlZ2luLFxuXHRcdGVwb2NoX2VuZDogdGhpcy5lcG9jaF9pbnRlcnZhbC5lcG9jaF9lbmQsXG5cdFx0YnBmX2ZpbHRlcjogdGhpcy5icGZfZmlsdGVyLFxuXHQgICAgfTtcblx0ICAgIGxldCB1cmxfcmVxdWVzdF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXModXJsX3JlcXVlc3Rfb2JqKTtcblx0ICAgIGlmICh0aGlzLmV4dHJhY3Rfbm93ID09IHRydWUpIHtcblx0XHRcblx0XHRsZXQgdXJsX3JlcXVlc3QgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L3BjYXAvbGl2ZV9leHRyYWN0aW9uLmx1YT8ke3VybF9yZXF1ZXN0X3BhcmFtc31gO1xuXHRcdHdpbmRvdy5vcGVuKHVybF9yZXF1ZXN0LCAnX3NlbGYnLCBmYWxzZSk7XG5cdCAgICB9IGVsc2Uge1xuXHRcdGxldCB1cmxfcmVxdWVzdCA9IGAke2h0dHBfcHJlZml4fS9sdWEvdHJhZmZpY19leHRyYWN0aW9uLmx1YT8ke3VybF9yZXF1ZXN0X3BhcmFtc31gO1xuXHRcdGxldCByZXNwID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybF9yZXF1ZXN0LCBudWxsLCBmYWxzZSwgdHJ1ZSk7XG5cdFx0bGV0IGpvYl9pZCA9IHJlc3AuaWQ7XG5cdFx0Ly9sZXQgam9iX2lkID0gMjtcblx0XHRsZXQgYWxlcnRfdGV4dF9odG1sID0gaTE4bigndHJhZmZpY19yZWNvcmRpbmcuZXh0cmFjdGlvbl9zY2hlZHVsZWQnKTtcblx0XHRsZXQgcGFnZV9uYW1lID0gaTE4bigndHJhZmZpY19yZWNvcmRpbmcudHJhZmZpY19leHRyYWN0aW9uX2pvYnMnKTtcblx0XHRsZXQgaWZpZCA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiaWZpZFwiKTtcblx0XHRsZXQgaHJlZiA9IGA8YSBocmVmPVwiL2x1YS9pZl9zdGF0cy5sdWE/aWZpZD0ke2lmaWR9JnBhZ2U9dHJhZmZpY19yZWNvcmRpbmcmdGFiPWpvYnMmam9iX2lkPSR7am9iX2lkfVwiPiR7cGFnZV9uYW1lfTwvYT5gOyBcblx0XHRhbGVydF90ZXh0X2h0bWwgPSBhbGVydF90ZXh0X2h0bWwucmVwbGFjZSgnJXtwYWdlfScsIGhyZWYpO1xuXHRcdGFsZXJ0X3RleHRfaHRtbCA9IGAke2FsZXJ0X3RleHRfaHRtbH0gJHtqb2JfaWR9YDtcblx0XHRudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9jdXN0b21fZXZlbnQobnRvcG5nX2N1c3RvbV9ldmVudHMuU0hPV19HTE9CQUxfQUxFUlRfSU5GTywgeyB0ZXh0X2h0bWw6IGFsZXJ0X3RleHRfaHRtbCwgdHlwZTogXCJhbGVydC1zdWNjZXNzXCIgfSk7XG5cdCAgICB9XG5cdCAgICB0aGlzLmNsb3NlKCk7XG5cdH0sXG5cdGNsb3NlOiBmdW5jdGlvbigpIHtcblx0ICAgIHRoaXMuJHJlZnNbXCJtb2RhbFwiXS5jbG9zZSgpO1xuXHQgICAgc2V0VGltZW91dCgoKSA9PiB7XG5cdFx0dGhpcy5kYXRhX2F2YWlsYWJsZSA9IDA7XG5cdCAgICB9LCAxMDAwKTtcblx0fSxcblx0c2hvdzogYXN5bmMgZnVuY3Rpb24oYnBmX2ZpbHRlciwgZXBvY2hfaW50ZXJ2YWwpIHtcdCAgICBcblx0ICAgIGlmIChlcG9jaF9pbnRlcnZhbCA9PSBudWxsKSB7XG5cdFx0bGV0IHN0YXR1cyA9IG50b3BuZ19zdGF0dXNfbWFuYWdlci5nZXRfc3RhdHVzKCk7XG5cdFx0aWYgKHN0YXR1cy5lcG9jaF9iZWdpbiA9PSBudWxsIHx8IHN0YXR1cy5lcG9jaF9lbmQgPT0gbnVsbCkge1xuXHRcdCAgICBjb25zb2xlLmVycm9yKFwibW9kYWwtdHJhZmZpYy1leHRyYWN0aW9uOiBlcG9jaF9iZWdpbiBhbmQgZXBvY2hfZW5kIHVuZGVmaW5lZCBpbiB1cmxcIik7XG5cdFx0ICAgIHJldHVybjtcblx0XHR9XG5cdFx0ZXBvY2hfaW50ZXJ2YWwgPSB7IGVwb2NoX2JlZ2luOiBzdGF0dXMuZXBvY2hfYmVnaW4sIGVwb2NoX2VuZDogc3RhdHVzLmVwb2NoX2VuZCB9O1xuXHQgICAgfVxuXHQgICAgdGhpcy5lcG9jaF9pbnRlcnZhbCA9IGVwb2NoX2ludGVydmFsO1xuXHQgICAgbGV0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMoZXBvY2hfaW50ZXJ2YWwpO1xuXHQgICAgbGV0IHVybF9yZXF1ZXN0ID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9jaGVja19yZWNvcmRpbmdfZGF0YS5sdWE/JHt1cmxfcGFyYW1zfWA7XG5cdCAgICBsZXQgcmVzID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybF9yZXF1ZXN0LCBudWxsLCBudWxsLCB0cnVlKTtcblx0ICAgIGlmIChyZXMuYXZhaWxhYmxlID09IGZhbHNlKSB7XG5cdFx0dGhpcy5kYXRhX2F2YWlsYWJsZSA9IDI7XG5cdFx0dGhpcy5kZXNjcmlwdGlvbiA9IGkxOG4oJ3RyYWZmaWNfcmVjb3JkaW5nLm5vX3JlY29yZGVkX2RhdGEnKTtcblx0XHR0aGlzLiRyZWZzW1wibW9kYWxcIl0uc2hvdygpO1xuXHRcdHJldHVybjtcblx0ICAgIH1cblx0ICAgIHRoaXMuZGF0YV9hdmFpbGFibGUgPSAxO1xuXHQgICAgbGV0IGV4dHJhX2luZm8gPSBcIlwiO1xuXHQgICAgaWYgKHJlcy5pbmZvICE9IG51bGwpIHtcblx0XHRleHRyYV9pbmZvID0gcmVzLmluZm87XG5cdCAgICB9O1xuXHQgICAgaWYgKGJwZl9maWx0ZXIgPT0gbnVsbCkge1xuXHRcdGxldCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfcGFyYW1zKCk7XG5cdFx0bGV0IHVybF9yZXF1ZXN0ID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvZGIvZmlsdGVyL2JwZi5sdWE/JHt1cmxfcGFyYW1zfWA7XG5cdFx0bGV0IHJlcyA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmxfcmVxdWVzdCk7XG5cdFx0aWYgKHJlcyA9PSBudWxsIHx8IHJlcy5icGYgPT0gbnVsbCkge1xuXHRcdCAgICBjb25zb2xlLmVycm9yKGBtb2RhbC10cmFmZmljLWV4dHJhY3Rpb246ICR7dXJsX3JlcXVlc3R9IHJldHVybiBudWxsIHZhbHVlYCk7XG5cdFx0ICAgIHJldHVybjtcblx0XHR9XG5cdFx0YnBmX2ZpbHRlciA9IHJlcy5icGY7XG5cdCAgICB9XG5cdCAgICB0aGlzLnNldF9kZXNjcmlwdGlvbnMoZXBvY2hfaW50ZXJ2YWwuZXBvY2hfYmVnaW4sIGVwb2NoX2ludGVydmFsLmVwb2NoX2VuZCwgZXh0cmFfaW5mbyk7XG5cdCAgICBcblx0ICAgIC8vIGxldCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfcGFyYW1zKCk7XG5cdCAgICAvLyBsZXQgdXJsX3JlcXVlc3QgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9kYi9maWx0ZXIvYnBmLmx1YT8ke3VybF9wYXJhbXN9YDtcblx0ICAgIC8vIGxldCByZXMgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsX3JlcXVlc3QpO1xuXHQgICAgLy8gdGhpcy5icGZfZmlsdGVyID0gcmVzLmJwZjtcblx0ICAgIHRoaXMuYnBmX2ZpbHRlciA9IGJwZl9maWx0ZXI7XG5cdCAgICB0aGlzLiRyZWZzW1wibW9kYWxcIl0uc2hvdygpO1xuXHR9LFxuXHRzZXRfZGVzY3JpcHRpb25zOiBmdW5jdGlvbihlcG9jaF9iZWdpbiwgZXBvY2hfZW5kLCBpbmZvKSB7XG5cdCAgICBsZXQgZGF0ZV9iZWdpbiA9IG5ldyBEYXRlKGVwb2NoX2JlZ2luICogMTAwMCk7XG5cdCAgICBsZXQgZGF0ZV9lbmQgPSBuZXcgRGF0ZShlcG9jaF9lbmQgKiAxMDAwKTtcblx0ICAgIFxuXHQgICAgbGV0IGRlc2MgPSBpMThuKCd0cmFmZmljX3JlY29yZGluZy5hYm91dF90b19kb3dubG9hZF9mbG93Jyk7XG5cdCAgICBkZXNjID0gZGVzYy5yZXBsYWNlKCcle2RhdGVfYmVnaW59JywgdGhpcy5mb3JtYXRfZGF0ZShkYXRlX2JlZ2luKSk7XG5cdCAgICBkZXNjID0gZGVzYy5yZXBsYWNlKCcle2RhdGVfZW5kfScsIHRoaXMuZm9ybWF0X2RhdGUoZGF0ZV9lbmQpKTtcblx0ICAgIGRlc2MgPSBkZXNjLnJlcGxhY2UoJyV7ZXh0cmFfaW5mb30nLCBpbmZvKTtcblx0ICAgIHRoaXMuZGVzY3JpcHRpb24gPSBkZXNjO1xuXHR9LFxuXHRzaG93X2hpZGVfbWVudTogZnVuY3Rpb24oKSB7XG5cdCAgICB0aGlzLnNob3dfbWVudSA9ICF0aGlzLnNob3dfbWVudTtcblx0fSxcbiAgICB9LFxufSk7XG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuaW5wdXQgfiAuYWxlcnQge1xuICBkaXNwbGF5OiBub25lO1xufVxuaW5wdXQ6aW52YWxpZCB+IC5hbGVydCB7XG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuPC9zdHlsZT5cbiIsIjx0ZW1wbGF0ZT5cbjxtb2RhbCA6aWQ9XCJpZF9tb2RhbFwiIEBhcHBseT1cImFwcGx5XCIgcmVmPVwibW9kYWxcIj5cbiAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT57e2kxOG4oJ3RyYWZmaWNfcmVjb3JkaW5nLnBjYXBfZXh0cmFjdCcpfX08L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAgXG4gICAgPGRpdiBjbGFzcz1cImFsZXJ0XCIgOmNsYXNzPVwieyAnYWxlcnQtaW5mbyc6IGRhdGFfYXZhaWxhYmxlICE9IDIsICdhbGVydC13YXJuaW5nJzogZGF0YV9hdmFpbGFibGUgPT0gMiB9XCIgdi1odG1sPVwiZGVzY3JpcHRpb25cIj48L2Rpdj5cbiAgICA8Zm9ybSB2LWlmPVwiZGF0YV9hdmFpbGFibGUgPT0gMVwiIHN0eWxlPVwiaGVpZ2h0Ojk1JTtcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJ0YWItY29udGVudFwiIHN0eWxlPVwiaGVpZ2h0OjEwMCU7XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtYi0zIGNvbC1tZC0zIGhhcy1mZWVkYmFja1wiPlxuXHQgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tc20gYnRuLXNlY29uZGFyeVwiIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJzaG93X2hpZGVfbWVudVwiPnt7aTE4bignYWR2YW5jZWQnKX19PGkgOmNsYXNzPVwieyAnZmFzIGZhLWNhcmV0LWRvd24nOiBzaG93X21lbnUsICdmYXMgZmEtY2FyZXQtdXAnOiAhc2hvd19tZW51fVwiPjwvaT48L2J1dHRvbj5cbiAgICAgICAgICA8L2Rpdj5cblx0ICBcblx0ICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtYi0zIGNvbC1tZC05IHRleHQtcmlnaHQgYXNkXCI+XG5cdCAgICA8bGFiZWwgY2xhc3M9XCJyYWRpby1pbmxpbmVcIiBzdHlsZT1cIm1hcmdpbi1sZWZ0OiAxcmVtO1wiPjxpbnB1dCB0eXBlPVwicmFkaW9cIiBuYW1lPVwiZXh0cmFjdF9ub3dcIiB2LW1vZGVsPVwiZXh0cmFjdF9ub3dcIiAgdmFsdWU9XCJ0cnVlXCIgY2hlY2tlZD1cIlwiPiB7e2kxOG4oJ3RyYWZmaWNfcmVjb3JkaW5nLmV4dHJhY3Rfbm93Jyl9fSA8L2xhYmVsPlxuXHQgICAgPGxhYmVsIGNsYXNzPVwicmFkaW8taW5saW5lXCI+PGlucHV0IHR5cGU9XCJyYWRpb1wiIG5hbWU9XCJleHRyYWN0X25vd1wiIHYtbW9kZWw9XCJleHRyYWN0X25vd1wiIHZhbHVlPVwiZmFsc2VcIj4ge3tpMThuKCd0cmFmZmljX3JlY29yZGluZy5xdWV1ZV9hc19qb2InKX19IDwvbGFiZWw+XG5cdCAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuXHRcbiAgICAgICAgPGRpdiB2LXNob3c9XCJzaG93X21lbnVcIiBjbGFzcz1cInJvd1wiIGlkPVwicGNhcERvd25sb2FkTW9kYWxfYWR2YW5jZWRcIiBzdHlsZT1cIlwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1iLTMgY29sLW1kLTEyIGhhcy1mZWVkYmFja1wiPlxuXHQgICAgPGJyPlxuICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiZm9ybS1sYWJlbFwiPnt7aTE4bigndHJhZmZpY19yZWNvcmRpbmcuZmlsdGVyX2JwZicpfX0gPGEgY2xhc3M9XCJudG9wbmctZXh0ZXJuYWwtbGlua1wiIGhyZWY9XCJodHRwczovL3d3dy5udG9wLm9yZy9ndWlkZXMvbjJkaXNrL2ZpbHRlcnMuaHRtbFwiPjxpIGNsYXNzPVwiZmFzIGZhLWV4dGVybmFsLWxpbmstYWx0XCI+PC9pPjwvYT48L2xhYmVsPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwXCI+XG5cdCAgICAgIDxzcGFuIGNsYXNzPVwiaW5wdXQtZ3JvdXAtYWRkb25cIj48c3BhbiBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tZmlsdGVyXCI+PC9zcGFuPjwvc3Bhbj5cblx0ICAgICAgPGlucHV0IG5hbWU9XCJicGZfZmlsdGVyXCIgdi1tb2RlbD1cImJwZl9maWx0ZXJcIiBjbGFzcz1cImZvcm0tY29udHJvbCBpbnB1dC1zbVwiIGRhdGEtYnBmPVwiYnBmXCIgYXV0b2NvbXBsZXRlPVwib2ZmXCIgc3BlbGxjaGVjaz1cImZhbHNlXCI+XG5cdCAgICAgIDxzcGFuIHYtc2hvdz1cImludmFsaWRfYnBmXCIgc3R5bGU9XCJtYXJnaW46IDBweDtwYWRkaW5nOjA7ZGlzcGxheTpibG9jaztcIiBjbGFzcz1cImludmFsaWQtZmVlZGJhY2sgXCI+e3tpMThuKCdpbnZhbGlkX3ZhbHVlJyl9fTwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuXHQgICAgPGJyPlxuXHQgICAgPGxhYmVsIGNsYXNzPVwiZm9ybS1sYWJlbFwiPnt7aTE4bigndHJhZmZpY19yZWNvcmRpbmcuZmlsdGVyX2V4YW1wbGVzJyl9fTo8L2xhYmVsPlxuXHQgICAgPGJyPlxuXHQgICAgPHVsPlxuXHQgICAgICA8bGk+SG9zdDogPGk+aG9zdCAxOTIuMTY4LjEuMjwvaT48L2xpPlxuXHQgICAgICA8bGk+SFRUUDogPGk+dGNwIGFuZCBwb3J0IDgwPC9pPjwvbGk+XG5cdCAgICAgIDxsaT5UcmFmZmljIGJldHdlZW4gaG9zdHM6IDxpPmlwIGhvc3QgMTkyLjE2OC4xLjEgYW5kIDE5Mi4xNjguMS4yPC9pPjwvbGk+XG5cdCAgICAgIDxsaT5UcmFmZmljIGZyb20gYW4gaG9zdCB0byBhbm90aGVyOiA8aT5pcCBzcmMgMTkyLjE2OC4xLjEgYW5kIGRzdCAxOTIuMTY4LjEuMjwvaT48L2xpPlxuXHQgICAgPC91bD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Zvcm0+XG4gIDwvdGVtcGxhdGU+XG4gIFxuICA8dGVtcGxhdGUgdi1zbG90OmZvb3Rlcj5cbiAgICA8YnV0dG9uIHYtc2hvdz1cImRhdGFfYXZhaWxhYmxlICE9IDJcIiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiYXBwbHlcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPnt7aTE4bignYXBwbHknKX19PC9idXR0b24+XG4gICAgPGJ1dHRvbiB2LXNob3c9XCJkYXRhX2F2YWlsYWJsZSA9PSAyXCIgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImNsb3NlXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj57e2kxOG4oJ29rJyl9fTwvYnV0dG9uPlxuICA8L3RlbXBsYXRlPiAgXG48L21vZGFsPiAgXG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIj5cbmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCB9IGZyb20gJ3Z1ZSc7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsIH0gZnJvbSBcIi4vbW9kYWwudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7XG4gICAgY29tcG9uZW50czoge1xuXHQnbW9kYWwnOiBNb2RhbCxcbiAgICB9LFxuICAgIHByb3BzOiB7XG5cdGlkOiBTdHJpbmcsXG4gICAgfSxcbiAgICB1cGRhdGVkKCkge1xuICAgIH0sXG4gICAgZGF0YSgpIHtcblx0cmV0dXJuIHtcblx0ICAgIGRlc2NyaXB0aW9uOiBcIlwiLFxuXHQgICAgaW52YWxpZF9icGY6IGZhbHNlLFxuXHQgICAgYnBmX2ZpbHRlcjogXCJcIixcblx0ICAgIGV4dHJhY3Rfbm93OiB0cnVlLFxuXHQgICAgc2hvd19tZW51OiB0cnVlLFxuXHQgICAgZGF0YV9hdmFpbGFibGU6IDAsIC8vIDAgPT0gbG9hZGluZywgMSA9PSBhdmFpbGFibGUsIDIgPT0gbm8gZGF0YVxuXHQgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG5cdCAgICBlcG9jaF9pbnRlcnZhbDogbnVsbCxcblx0ICAgIGlkX21vZGFsOiBgJHt0aGlzLiRwcm9wcy5pZH1fbW9kYWxgLFxuXHR9O1xuICAgIH0sXG4gICAgZW1pdHM6IFtcImFwcGx5XCJdLFxuICAgIGNyZWF0ZWQoKSB7XG4gICAgfSxcbiAgICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBjYWxsZWQgYWZ0ZXIgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgICBtb3VudGVkKCkge1xuICAgIH0sXG4gICAgbWV0aG9kczoge1xuXHRwYWQyX251bWJlcjogZnVuY3Rpb24obnVtYmVyKSB7XG5cdCAgICByZXR1cm4gU3RyaW5nKG51bWJlcikucGFkU3RhcnQoMiwgJzAnKTtcblx0fSxcblx0Zm9ybWF0X2RhdGU6IGZ1bmN0aW9uKGQpIHtcblx0ICAgIC8vIGxldCBkYXkgPSB0aGlzLnBhZDJfbnVtYmVyKGQuZ2V0RGF0ZSgpKTtcblx0ICAgIC8vIGxldCBtb250aCA9IHRoaXMucGFkMl9udW1iZXIoZC5nZXRNb250aCgpKTtcblx0ICAgIC8vIGxldCBob3VycyA9IHRoaXMucGFkMl9udW1iZXIoZC5nZXRIb3VycygpKTtcblx0ICAgIC8vIGxldCBtaW51dGVzID0gdGhpcy5wYWQyX251bWJlcihkLmdldE1pbnV0ZXMoKSk7XG5cdCAgICAvLyBsZXQgcyA9IGAke2RheX0vJHttb250aH0vJHtkLmdldEZ1bGxZZWFyKCl9ICR7aG91cnN9OiR7bWludXRlc31gO1xuXHQgICAgbGV0IGRfbXMgPSBkLnZhbHVlT2YoKTtcblx0ICAgIHJldHVybiBudG9wbmdfdXRpbGl0eS5mcm9tX3V0Y190b19zZXJ2ZXJfZGF0ZV9mb3JtYXQoZF9tcyk7XG5cdH0sXG5cdGFwcGx5OiBhc3luYyBmdW5jdGlvbigpIHtcblx0ICAgIGlmICh0aGlzLmJwZl9maWx0ZXIgIT0gbnVsbCAmJiB0aGlzLmJwZl9maWx0ZXIgIT0gXCJcIikge1xuXHRcdGxldCB1cmxfcmVxdWVzdCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvY2hlY2svZmlsdGVyLmx1YT9xdWVyeT0ke3RoaXMuYnBmX2ZpbHRlcn1gO1xuXHRcdGxldCByZXMgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsX3JlcXVlc3QsIG51bGwsIGZhbHNlLCB0cnVlKTtcblx0XHR0aGlzLmludmFsaWRfYnBmID0gIXJlcy5yZXNwb25zZTtcblx0XHRpZiAodGhpcy5pbnZhbGlkX2JwZiA9PSB0cnVlKSB7XG5cdFx0ICAgIHJldHVybjtcblx0XHR9XHRcdFxuXHQgICAgfVxuXHQgICAgbGV0IHVybF9yZXF1ZXN0X29iaiA9IHtcblx0XHRpZmlkOiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImlmaWRcIiksXG5cdFx0ZXBvY2hfYmVnaW46IHRoaXMuZXBvY2hfaW50ZXJ2YWwuZXBvY2hfYmVnaW4sXG5cdFx0ZXBvY2hfZW5kOiB0aGlzLmVwb2NoX2ludGVydmFsLmVwb2NoX2VuZCxcblx0XHRicGZfZmlsdGVyOiB0aGlzLmJwZl9maWx0ZXIsXG5cdCAgICB9O1xuXHQgICAgbGV0IHVybF9yZXF1ZXN0X3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyh1cmxfcmVxdWVzdF9vYmopO1xuXHQgICAgaWYgKHRoaXMuZXh0cmFjdF9ub3cgPT0gdHJ1ZSkge1xuXHRcdFxuXHRcdGxldCB1cmxfcmVxdWVzdCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvcGNhcC9saXZlX2V4dHJhY3Rpb24ubHVhPyR7dXJsX3JlcXVlc3RfcGFyYW1zfWA7XG5cdFx0d2luZG93Lm9wZW4odXJsX3JlcXVlc3QsICdfc2VsZicsIGZhbHNlKTtcblx0ICAgIH0gZWxzZSB7XG5cdFx0bGV0IHVybF9yZXF1ZXN0ID0gYCR7aHR0cF9wcmVmaXh9L2x1YS90cmFmZmljX2V4dHJhY3Rpb24ubHVhPyR7dXJsX3JlcXVlc3RfcGFyYW1zfWA7XG5cdFx0bGV0IHJlc3AgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsX3JlcXVlc3QsIG51bGwsIGZhbHNlLCB0cnVlKTtcblx0XHRsZXQgam9iX2lkID0gcmVzcC5pZDtcblx0XHQvL2xldCBqb2JfaWQgPSAyO1xuXHRcdGxldCBhbGVydF90ZXh0X2h0bWwgPSBpMThuKCd0cmFmZmljX3JlY29yZGluZy5leHRyYWN0aW9uX3NjaGVkdWxlZCcpO1xuXHRcdGxldCBwYWdlX25hbWUgPSBpMThuKCd0cmFmZmljX3JlY29yZGluZy50cmFmZmljX2V4dHJhY3Rpb25fam9icycpO1xuXHRcdGxldCBpZmlkID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJpZmlkXCIpO1xuXHRcdGxldCBocmVmID0gYDxhIGhyZWY9XCIvbHVhL2lmX3N0YXRzLmx1YT9pZmlkPSR7aWZpZH0mcGFnZT10cmFmZmljX3JlY29yZGluZyZ0YWI9am9icyZqb2JfaWQ9JHtqb2JfaWR9XCI+JHtwYWdlX25hbWV9PC9hPmA7IFxuXHRcdGFsZXJ0X3RleHRfaHRtbCA9IGFsZXJ0X3RleHRfaHRtbC5yZXBsYWNlKCcle3BhZ2V9JywgaHJlZik7XG5cdFx0YWxlcnRfdGV4dF9odG1sID0gYCR7YWxlcnRfdGV4dF9odG1sfSAke2pvYl9pZH1gO1xuXHRcdG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChudG9wbmdfY3VzdG9tX2V2ZW50cy5TSE9XX0dMT0JBTF9BTEVSVF9JTkZPLCB7IHRleHRfaHRtbDogYWxlcnRfdGV4dF9odG1sLCB0eXBlOiBcImFsZXJ0LXN1Y2Nlc3NcIiB9KTtcblx0ICAgIH1cblx0ICAgIHRoaXMuY2xvc2UoKTtcblx0fSxcblx0Y2xvc2U6IGZ1bmN0aW9uKCkge1xuXHQgICAgdGhpcy4kcmVmc1tcIm1vZGFsXCJdLmNsb3NlKCk7XG5cdCAgICBzZXRUaW1lb3V0KCgpID0+IHtcblx0XHR0aGlzLmRhdGFfYXZhaWxhYmxlID0gMDtcblx0ICAgIH0sIDEwMDApO1xuXHR9LFxuXHRzaG93OiBhc3luYyBmdW5jdGlvbihicGZfZmlsdGVyLCBlcG9jaF9pbnRlcnZhbCkge1x0ICAgIFxuXHQgICAgaWYgKGVwb2NoX2ludGVydmFsID09IG51bGwpIHtcblx0XHRsZXQgc3RhdHVzID0gbnRvcG5nX3N0YXR1c19tYW5hZ2VyLmdldF9zdGF0dXMoKTtcblx0XHRpZiAoc3RhdHVzLmVwb2NoX2JlZ2luID09IG51bGwgfHwgc3RhdHVzLmVwb2NoX2VuZCA9PSBudWxsKSB7XG5cdFx0ICAgIGNvbnNvbGUuZXJyb3IoXCJtb2RhbC10cmFmZmljLWV4dHJhY3Rpb246IGVwb2NoX2JlZ2luIGFuZCBlcG9jaF9lbmQgdW5kZWZpbmVkIGluIHVybFwiKTtcblx0XHQgICAgcmV0dXJuO1xuXHRcdH1cblx0XHRlcG9jaF9pbnRlcnZhbCA9IHsgZXBvY2hfYmVnaW46IHN0YXR1cy5lcG9jaF9iZWdpbiwgZXBvY2hfZW5kOiBzdGF0dXMuZXBvY2hfZW5kIH07XG5cdCAgICB9XG5cdCAgICB0aGlzLmVwb2NoX2ludGVydmFsID0gZXBvY2hfaW50ZXJ2YWw7XG5cdCAgICBsZXQgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyhlcG9jaF9pbnRlcnZhbCk7XG5cdCAgICBsZXQgdXJsX3JlcXVlc3QgPSBgJHtodHRwX3ByZWZpeH0vbHVhL2NoZWNrX3JlY29yZGluZ19kYXRhLmx1YT8ke3VybF9wYXJhbXN9YDtcblx0ICAgIGxldCByZXMgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsX3JlcXVlc3QsIG51bGwsIG51bGwsIHRydWUpO1xuXHQgICAgaWYgKHJlcy5hdmFpbGFibGUgPT0gZmFsc2UpIHtcblx0XHR0aGlzLmRhdGFfYXZhaWxhYmxlID0gMjtcblx0XHR0aGlzLmRlc2NyaXB0aW9uID0gaTE4bigndHJhZmZpY19yZWNvcmRpbmcubm9fcmVjb3JkZWRfZGF0YScpO1xuXHRcdHRoaXMuJHJlZnNbXCJtb2RhbFwiXS5zaG93KCk7XG5cdFx0cmV0dXJuO1xuXHQgICAgfVxuXHQgICAgdGhpcy5kYXRhX2F2YWlsYWJsZSA9IDE7XG5cdCAgICBsZXQgZXh0cmFfaW5mbyA9IFwiXCI7XG5cdCAgICBpZiAocmVzLmluZm8gIT0gbnVsbCkge1xuXHRcdGV4dHJhX2luZm8gPSByZXMuaW5mbztcblx0ICAgIH07XG5cdCAgICBpZiAoYnBmX2ZpbHRlciA9PSBudWxsKSB7XG5cdFx0bGV0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9wYXJhbXMoKTtcblx0XHRsZXQgdXJsX3JlcXVlc3QgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9kYi9maWx0ZXIvYnBmLmx1YT8ke3VybF9wYXJhbXN9YDtcblx0XHRsZXQgcmVzID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybF9yZXF1ZXN0KTtcblx0XHRpZiAocmVzID09IG51bGwgfHwgcmVzLmJwZiA9PSBudWxsKSB7XG5cdFx0ICAgIGNvbnNvbGUuZXJyb3IoYG1vZGFsLXRyYWZmaWMtZXh0cmFjdGlvbjogJHt1cmxfcmVxdWVzdH0gcmV0dXJuIG51bGwgdmFsdWVgKTtcblx0XHQgICAgcmV0dXJuO1xuXHRcdH1cblx0XHRicGZfZmlsdGVyID0gcmVzLmJwZjtcblx0ICAgIH1cblx0ICAgIHRoaXMuc2V0X2Rlc2NyaXB0aW9ucyhlcG9jaF9pbnRlcnZhbC5lcG9jaF9iZWdpbiwgZXBvY2hfaW50ZXJ2YWwuZXBvY2hfZW5kLCBleHRyYV9pbmZvKTtcblx0ICAgIFxuXHQgICAgLy8gbGV0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9wYXJhbXMoKTtcblx0ICAgIC8vIGxldCB1cmxfcmVxdWVzdCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2RiL2ZpbHRlci9icGYubHVhPyR7dXJsX3BhcmFtc31gO1xuXHQgICAgLy8gbGV0IHJlcyA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmxfcmVxdWVzdCk7XG5cdCAgICAvLyB0aGlzLmJwZl9maWx0ZXIgPSByZXMuYnBmO1xuXHQgICAgdGhpcy5icGZfZmlsdGVyID0gYnBmX2ZpbHRlcjtcblx0ICAgIHRoaXMuJHJlZnNbXCJtb2RhbFwiXS5zaG93KCk7XG5cdH0sXG5cdHNldF9kZXNjcmlwdGlvbnM6IGZ1bmN0aW9uKGVwb2NoX2JlZ2luLCBlcG9jaF9lbmQsIGluZm8pIHtcblx0ICAgIGxldCBkYXRlX2JlZ2luID0gbmV3IERhdGUoZXBvY2hfYmVnaW4gKiAxMDAwKTtcblx0ICAgIGxldCBkYXRlX2VuZCA9IG5ldyBEYXRlKGVwb2NoX2VuZCAqIDEwMDApO1xuXHQgICAgXG5cdCAgICBsZXQgZGVzYyA9IGkxOG4oJ3RyYWZmaWNfcmVjb3JkaW5nLmFib3V0X3RvX2Rvd25sb2FkX2Zsb3cnKTtcblx0ICAgIGRlc2MgPSBkZXNjLnJlcGxhY2UoJyV7ZGF0ZV9iZWdpbn0nLCB0aGlzLmZvcm1hdF9kYXRlKGRhdGVfYmVnaW4pKTtcblx0ICAgIGRlc2MgPSBkZXNjLnJlcGxhY2UoJyV7ZGF0ZV9lbmR9JywgdGhpcy5mb3JtYXRfZGF0ZShkYXRlX2VuZCkpO1xuXHQgICAgZGVzYyA9IGRlc2MucmVwbGFjZSgnJXtleHRyYV9pbmZvfScsIGluZm8pO1xuXHQgICAgdGhpcy5kZXNjcmlwdGlvbiA9IGRlc2M7XG5cdH0sXG5cdHNob3dfaGlkZV9tZW51OiBmdW5jdGlvbigpIHtcblx0ICAgIHRoaXMuc2hvd19tZW51ID0gIXRoaXMuc2hvd19tZW51O1xuXHR9LFxuICAgIH0sXG59KTtcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG5pbnB1dCB+IC5hbGVydCB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG5pbnB1dDppbnZhbGlkIH4gLmFsZXJ0IHtcbiAgZGlzcGxheTogYmxvY2s7XG59XG48L3N0eWxlPlxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbjxtb2RhbCBAc2hvd2VkPVwic2hvd2VkKClcIiByZWY9XCJtb2RhbF9pZFwiPlxuICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPlxuICAgICAge3tfaTE4bihcInNuYXBzaG90cy5tYW5hZ2VcIil9fVxuICAgICAgPGEgdGFyZ2V0PVwiX25ld3RhYlwiIGhyZWY9XCIjXCIgc3R5bGU9XCJcIiBjbGFzcz1cIm5hdi1pdGVtIHRleHQtbXV0ZWRcIj48aSBjbGFzcz1cImZhcyBmYS1xdWVzdGlvbi1jaXJjbGVcIiBzdHlsZT1cIm1hcmdpbi1sZWZ0OjI4cmVtO3BhZGRpbmctdG9wOjAuOHJlbTtcIj48L2k+PC9hPiAgICBcbiAgPC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpib2R5PlxuICAgIDx1bCBjbGFzcz1cIm5hdiBuYXYtdGFic1wiPlxuICAgICAgPGxpIGNsYXNzPVwibmF2LWl0ZW1cIiBAY2xpY2s9XCJhY3Rpb249J2FkZCdcIj5cblx0PGEgY2xhc3M9XCJuYXYtbGlua1wiIDpjbGFzcz1cInsnYWN0aXZlJzogYWN0aW9uID09ICdhZGQnfVwiIGhyZWY9XCIjXCI+e3tfaTE4bihcInNuYXBzaG90cy5hZGRcIil9fTwvYT5cbiAgICAgIDwvbGk+XG4gICAgICA8bGkgY2xhc3M9XCJuYXYtaXRlbVwiIEBjbGljaz1cInVwZGF0ZV9hY3Rpb24oJ3NlbGVjdCcpXCI+XG5cdDxhIDpkaXNhYmxlZD1cInNuYXBzaG90cy5sZW5ndGggPT0gMFwiIGNsYXNzPVwibmF2LWxpbmtcIiA6Y2xhc3M9XCJ7J2FjdGl2ZSc6IGFjdGlvbiA9PSAnc2VsZWN0JywgJ25vdC1hbGxvd2VkJzogc25hcHNob3RzLmxlbmd0aCA9PSAwIH1cIiBocmVmPVwiI1wiPnt7X2kxOG4oXCJzbmFwc2hvdHMubWFuYWdlXCIpfX08L2E+XG4gICAgICA8L2xpPiAgICAgIFxuICAgIDwvdWw+XG4gICAgPGRpdiB2LWlmPVwiYWN0aW9uID09ICdhZGQnXCIgc3R5bGU9XCJtaW4taGVpZ2h0OjguNXJlbVwiPlxuICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCI+XG5cdDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00XCI+PGI+e3tfaTE4bihcInNuYXBzaG90cy5uYW1lXCIpfX06PC9iPjwvbGFiZWw+XG5cdDxkaXYgY2xhc3M9XCJjb2wtc20tNlwiPlxuXHQgIDxpbnB1dCA6cGF0dGVybj1cInBhdHRlcm5fc2luZ2xld29yZFwiIHBsYWNlaG9sZGVyPVwiXCIgcmVxdWlyZWQgdHlwZT1cInRleHRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIHYtbW9kZWw9XCJzbmFwc2hvdF9uYW1lXCI+XG5cdDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8IS0tIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPiAtLT5cbiAgICAgIDwhLS0gXHQ8ZGl2IGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wgY3VzdG9tLXN3aXRjaFwiPiAtLT5cbiAgICAgIDwhLS0gXHQgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjbGFzcz1cImN1c3RvbS1jb250cm9sLWlucHV0IHdoaXRlc3BhY2UgZm9ybS1jaGVjay1pbnB1dFwiIHYtbW9kZWw9XCJzYXZlX3RpbWVcIj4gLS0+XG5cdCAgXG4gICAgICA8IS0tIFx0ICA8bGFiZWwgY2xhc3M9XCJjdXN0b20tY29udHJvbC1sYWJlbCBtcy0xIGZvcm0tY2hlY2stbGFiZWxcIj57e3NhdmVfdGltZV90ZXh0fX08L2xhYmVsPiAtLT5cbiAgICAgIDwhLS0gXHQ8L2Rpdj4gLS0+XG4gICAgICA8IS0tIDwvZGl2PiAgICAgICAtLT5cbiAgICA8L2Rpdj4gPCEtLSBhY3Rpb24gYWRkIC0tPlxuICAgIFxuICAgIDxkaXYgdi1pZj1cImFjdGlvbiA9PSAnc2VsZWN0J1wiIHN0eWxlPVwibWluLWhlaWdodDo4LjVyZW1cIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tNFwiID5cbiAgICAgICAgICA8Yj57eyBfaTE4bihcInNuYXBzaG90cy5vcmRlcl9ieVwiKSB9fTwvYj5cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS04XCI+XG4gICAgICAgICAgPHNlbGVjdCBjbGFzcz1cImZvcm0tc2VsZWN0XCIgQGNoYW5nZT1cInNvcnRfc25hcHNob3RzX2J5KClcIiB2LW1vZGVsPVwib3JkZXJfYnlcIj5cbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJuYW1lXCI+e3tfaTE4bihcInNuYXBzaG90cy5uYW1lXCIpfX08L29wdGlvbj5cbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJkYXRlXCI+e3tfaTE4bihcInNuYXBzaG90cy5kYXRlXCIpfX08L29wdGlvbj5cbiAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tNFwiID5cbiAgICAgICAgICA8Yj57eyBfaTE4bihcInNuYXBzaG90cy5zZWxlY3RcIikgfX08L2I+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tOFwiPlxuICAgICAgICAgIDxzZWxlY3QgY2xhc3M9XCJmb3JtLXNlbGVjdFwiIHYtbW9kZWw9XCJzbmFwc2hvdF9zZWxlY3RlZFwiPlxuICAgICAgICAgICAgPG9wdGlvbiB2LWZvcj1cIml0ZW0gaW4gc25hcHNob3RzXCIgOnZhbHVlPVwiaXRlbVwiPnt7IGRpc3BsYXlfbmFtZShpdGVtKSB9fTwvb3B0aW9uPlxuICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCI+XG5cdDxkaXYgY2xhc3M9XCJjdXN0b20tY29udHJvbCBjdXN0b20tc3dpdGNoXCI+XG5cdCAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wtaW5wdXQgd2hpdGVzcGFjZSBmb3JtLWNoZWNrLWlucHV0XCIgdi1tb2RlbD1cImFwcGx5X3RpbWVcIj5cblx0ICBcblx0ICA8bGFiZWwgY2xhc3M9XCJjdXN0b20tY29udHJvbC1sYWJlbCBtcy0xIGZvcm0tY2hlY2stbGFiZWxcIj57e2FwcGx5X3RpbWVfdGV4dH19PC9sYWJlbD5cblx0PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj4gPCEtLSBhY3Rpb24gc2VsZWN0IC0tPlxuICA8L3RlbXBsYXRlPjwhLS0gbW9kYWwtYm9keSAtLT5cbiAgXG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Zm9vdGVyPlxuICAgIDxidXR0b24gdi1pZj1cImFjdGlvbiA9PSAnYWRkJ1wiIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJhZGRfc25hcHNob3RcIiA6ZGlzYWJsZWQ9XCJkaXNhYmxlX2FkZFwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+e3tfaTE4bihcInNuYXBzaG90cy5hZGRcIil9fTwvYnV0dG9uPlxuICAgIDxidXR0b24gdi1pZj1cImFjdGlvbiA9PSAnc2VsZWN0J1wiIEBjbGljaz1cImRlbGV0ZV9zbmFwc2hvdCh0cnVlKVwiIHR5cGU9XCJidXR0b25cIiBzdHlsZT1cInRleHQtYWxpZ246IGxlZnQ7bWFyZ2luLWxlZnQ6IDBweDtcIiBjbGFzcz1cImJ0biBidG4tZGFuZ2VyIHN0YXJ0LTAgcG9zaXRpb24tYWJzb2x1dGUgbXMtM1wiPnt7X2kxOG4oXCJzbmFwc2hvdHMuZGVsZXRlX2FsbFwiKX19PC9idXR0b24+ICAgIFxuICAgIDxidXR0b24gdi1pZj1cImFjdGlvbiA9PSAnc2VsZWN0J1wiIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJkZWxldGVfc25hcHNob3RcIiA6ZGlzYWJsZWQ9XCJkaXNhYmxlX3NlbGVjdFwiIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXJcIj57e19pMThuKFwic25hcHNob3RzLmRlbGV0ZVwiKX19PC9idXR0b24+XG4gICAgPGJ1dHRvbiB2LWlmPVwiYWN0aW9uID09ICdzZWxlY3QnXCIgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cInNlbGVjdF9zbmFwc2hvdFwiIDpkaXNhYmxlZD1cImRpc2FibGVfc2VsZWN0XCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj57e19pMThuKFwic25hcHNob3RzLmFwcGx5XCIpfX08L2J1dHRvbj5cbiAgPC90ZW1wbGF0ZT5cbjwvbW9kYWw+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIGNvbXB1dGVkLCB3YXRjaCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgbW9kYWwgfSBmcm9tIFwiLi9tb2RhbC52dWVcIjtcblxuY29uc3QgbW9kYWxfaWQgPSByZWYobnVsbCk7XG5jb25zdCBhY3Rpb24gPSByZWYoXCJhZGRcIik7IC8vIGFkZCAvIHNlbGVjdFxuY29uc3Qgc2hvd2VkID0gKCkgPT4ge307XG5jb25zdCBzbmFwc2hvdF9zZWxlY3RlZCA9IHJlZihcIlwiKTtcbmNvbnN0IGFwcGx5X3RpbWUgPSByZWYoZmFsc2UpO1xuY29uc3QgYXBwbHlfdGltZV90ZXh0ID0gcmVmKFwiXCIpO1xuY29uc3Qgc2F2ZV90aW1lID0gcmVmKHRydWUpO1xuY29uc3Qgc2F2ZV90aW1lX3RleHQgPSByZWYoXCJcIik7XG5jb25zdCBzbmFwc2hvdF9uYW1lID0gcmVmKFwiXCIpO1xuY29uc3Qgc25hcHNob3RzID0gcmVmKFtdKTtcbmNvbnN0IG9yZGVyX2J5ID0gcmVmKFwiZGF0ZVwiKTsgLy8gbmFtZSAvIGRhdGVcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gICAgY3NyZjogU3RyaW5nLFxuICAgIHBhZ2U6IFN0cmluZyxcbn0pO1xuXG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoWydhZGRlZF9zbmFwc2hvdCcsICdkZWxldGVkX3NuYXBzaG90JywgJ2RlbGV0ZWRfYWxsX3NuYXBzaG90cyddKTtcblxubGV0IHBhdHRlcm5fc2luZ2xld29yZCA9IE50b3BVdGlscy5SRUdFWEVTLnNpbmdsZXdvcmQ7XG5cbmNvbnN0IGRpc2FibGVfYWRkID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGxldCByZyA9IG5ldyBSZWdFeHAocGF0dGVybl9zaW5nbGV3b3JkKTtcbiAgICByZXR1cm4gIXJnLnRlc3Qoc25hcHNob3RfbmFtZS52YWx1ZSk7XG59KTtcblxuY29uc3QgZGlzYWJsZV9zZWxlY3QgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgcmV0dXJuIHNuYXBzaG90X3NlbGVjdGVkLnZhbHVlID09IFwiXCI7XG59KTtcblxuY29uc3Qgc2hvdyA9ICgpID0+IHtcbiAgICBpbml0KCk7XG4gICAgbW9kYWxfaWQudmFsdWUuc2hvdygpO1xufTtcblxuY29uc3QgdXBkYXRlX2FjdGlvbiA9IChhKSA9PiB7XG4gICAgaWYgKHNuYXBzaG90cy52YWx1ZS5sZW5ndGggPT0gMCAmJiBhID09IFwic2VsZWN0XCIpIHsgcmV0dXJuOyB9XG4gICAgYWN0aW9uLnZhbHVlID0gYTtcbn1cblxuZnVuY3Rpb24gZ2V0X3BhZ2UoKSB7XG4gICAgaWYgKHByb3BzLnBhZ2UgIT0gbnVsbCkge1xuXHRyZXR1cm4gcHJvcHMucGFnZTtcbiAgICB9XG4gICAgbGV0IGlzX2FsZXJ0X3N0YXRzX3VybCA9IHdpbmRvdy5sb2NhdGlvbi50b1N0cmluZygpLm1hdGNoKC9hbGVydF9zdGF0cy5sdWEvKSAhPSBudWxsO1xuICAgIGxldCBwYWdlID0gXCJhbGVydHNcIjtcbiAgICBpZiAoIWlzX2FsZXJ0X3N0YXRzX3VybCkge1xuXHRwYWdlID0gXCJmbG93c1wiO1xuICAgIH1cbiAgICByZXR1cm4gcGFnZTtcbn1cblxuZnVuY3Rpb24gZGlzcGxheV9uYW1lKHNuYXBzaG90KSB7XG4gICAgbGV0IHV0Y19tcyA9IHNuYXBzaG90LnV0YyAqIDEwMDA7XG4gICAgbGV0IGRhdGUgPSBudG9wbmdfdXRpbGl0eS5mcm9tX3V0Y190b19zZXJ2ZXJfZGF0ZV9mb3JtYXQodXRjX21zLCBcIkREL01NL1lZWVlcIik7XG4gICAgcmV0dXJuIGAke3NuYXBzaG90Lm5hbWV9ICgke2RhdGV9KWBcbn1cblxubGV0IGxhc3Rfb3JkZXJfYnkgPSBudWxsO1xuZnVuY3Rpb24gc29ydF9zbmFwc2hvdHNfYnkoKSB7XG4gICAgaWYgKGxhc3Rfb3JkZXJfYnkgPT0gb3JkZXJfYnkudmFsdWUpIHsgcmV0dXJuOyB9XG4gICAgXG4gICAgc25hcHNob3RzLnZhbHVlLnNvcnQoKGEsIGIpID0+IHtcblx0aWYgKG9yZGVyX2J5LnZhbHVlID09IFwibmFtZVwiKSB7XG5cdCAgICByZXR1cm4gYS5uYW1lLmxvY2FsZUNvbXBhcmUoYi5uYW1lKTtcblx0fVxuXHRyZXR1cm4gYS51dGMgLSBiLnV0YztcbiAgICB9KTtcbiAgICBpZiAoc25hcHNob3RzLnZhbHVlLmxlbmd0aCA+IDApIHtcblx0c25hcHNob3Rfc2VsZWN0ZWQudmFsdWUgPSBzbmFwc2hvdHMudmFsdWVbMF07XG4gICAgfVxuICAgIGxhc3Rfb3JkZXJfYnkgPSBvcmRlcl9ieS52YWx1ZTsgICAgXG59XG5cbmxldCBsb2FkX3NuYXBzaG90cyA9IHRydWU7XG5hc3luYyBmdW5jdGlvbiBpbml0KCkge1xuICAgIGFjdGlvbi52YWx1ZSA9IFwiYWRkXCI7XG4gICAgc25hcHNob3RfbmFtZS52YWx1ZSA9IFwiXCI7XG4gICAgc2F2ZV90aW1lLnZhbHVlID0gdHJ1ZTtcbiAgICBhcHBseV90aW1lLnZhbHVlID0gZmFsc2U7XG4gICAgbGV0IHN0YXR1cyA9IG50b3BuZ19zdGF0dXNfbWFuYWdlci5nZXRfc3RhdHVzKCk7XG4gICAgbGV0IHNhdmVfdGltZV9maWx0ZXJfdGV4dCA9IF9pMThuKFwic25hcHNob3RzLnNhdmVfdGltZVwiKTtcbiAgICBsZXQgYmVnaW5fdGltZSA9IG50b3BuZ191dGlsaXR5LmZyb21fdXRjX3RvX3NlcnZlcl9kYXRlX2Zvcm1hdChzdGF0dXMuZXBvY2hfYmVnaW4gKiAxMDAwLCBcIkREL01NL1lZWVkgSEg6bW1cIik7XG4gICAgbGV0IGVuZF90aW1lID0gbnRvcG5nX3V0aWxpdHkuZnJvbV91dGNfdG9fc2VydmVyX2RhdGVfZm9ybWF0KHN0YXR1cy5lcG9jaF9lbmQgKiAxMDAwLCBcIkREL01NL1lZWVkgSEg6bW1cIik7XG4gICAgc2F2ZV90aW1lX2ZpbHRlcl90ZXh0ID0gc2F2ZV90aW1lX2ZpbHRlcl90ZXh0LnJlcGxhY2UoL1xcJWJlZ2luX3RpbWUvLCBiZWdpbl90aW1lKTtcbiAgICBzYXZlX3RpbWVfZmlsdGVyX3RleHQgPSBzYXZlX3RpbWVfZmlsdGVyX3RleHQucmVwbGFjZSgvXFwlZW5kX3RpbWUvLCBlbmRfdGltZSk7XG4gICAgc2F2ZV90aW1lX3RleHQudmFsdWUgPSBzYXZlX3RpbWVfZmlsdGVyX3RleHQ7XG4gICAgbGV0IGFwcGx5X3RpbWVfZmlsdGVyX3RleHQgPSBfaTE4bihcInNuYXBzaG90cy5hcHBseV90aW1lXCIpO1xuICAgIGFwcGx5X3RpbWVfZmlsdGVyX3RleHQgPSBhcHBseV90aW1lX2ZpbHRlcl90ZXh0LnJlcGxhY2UoL1xcJWJlZ2luX3RpbWUvLCBiZWdpbl90aW1lKTtcbiAgICBhcHBseV90aW1lX2ZpbHRlcl90ZXh0ID0gYXBwbHlfdGltZV9maWx0ZXJfdGV4dC5yZXBsYWNlKC9cXCVlbmRfdGltZS8sIGVuZF90aW1lKTtcbiAgICBhcHBseV90aW1lX3RleHQudmFsdWUgPSBhcHBseV90aW1lX2ZpbHRlcl90ZXh0O1xuICAgIGlmIChsb2FkX3NuYXBzaG90cykge1xuXHRsb2FkX3NuYXBzaG90cyA9IGZhbHNlO1xuXHRsZXQgcGFnZSA9IGdldF9wYWdlKCk7XG5cdGxldCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9maWx0ZXJzL3NuYXBzaG90cy5sdWE/cGFnZT0ke3BhZ2V9YDtcblx0bGV0IHNuYXBzaG90c19vYmogPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsKTtcblx0c25hcHNob3RzLnZhbHVlID0gbnRvcG5nX3V0aWxpdHkub2JqZWN0X3RvX2FycmF5KHNuYXBzaG90c19vYmopO1xuICAgIH1cbiAgICBzb3J0X3NuYXBzaG90c19ieSgpO1xuICAgIGlmIChzbmFwc2hvdHMudmFsdWUubGVuZ3RoID4gMCkge1xuXHRzbmFwc2hvdF9zZWxlY3RlZC52YWx1ZSA9IHNuYXBzaG90cy52YWx1ZVswXTtcbiAgICB9XG59XG5cbmNvbnN0IGFkZF9zbmFwc2hvdCA9IGFzeW5jICgpID0+IHtcbiAgICBsZXQgZmlsdGVycztcbiAgICBpZiAoc2F2ZV90aW1lLnZhbHVlKSB7XG5cdGZpbHRlcnMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9wYXJhbXMoKTtcbiAgICB9IGVsc2Uge1xuXHRsZXQgcGFyYW1zX29iaiA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX29iamVjdCgpO1xuXHRkZWxldGUgcGFyYW1zX29iai5lcG9jaF9iZWdpbjtcblx0ZGVsZXRlIHBhcmFtc19vYmouZXBvY2hfZW5kO1xuXHRmaWx0ZXJzID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKHBhcmFtc19vYmopO1xuICAgIH1cbiAgICBsZXQgcGFnZSA9IGdldF9wYWdlKCk7XG4gICAgbGV0IHBhcmFtcyA9IHtcblx0c25hcHNob3RfbmFtZTogc25hcHNob3RfbmFtZS52YWx1ZSxcblx0ZmlsdGVycyxcblx0cGFnZVxuICAgIH07XG4gICAgXG4gICAgcGFyYW1zLmNzcmYgPSBwcm9wcy5jc3JmO1xuICAgIGxldCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2FkZC9maWx0ZXJzL3NuYXBzaG90Lmx1YWA7XG4gICAgdHJ5IHtcblx0bGV0IGhlYWRlcnMgPSB7XG5cdCAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG5cdH07XG5cdGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcykgfSk7XG5cdGxvYWRfc25hcHNob3RzID0gdHJ1ZTtcbiAgICB9IGNhdGNoKGVycikge1xuXHRjb25zb2xlLmVycm9yKGVycik7XG4gICAgfVxuICAgIGNsb3NlKCk7XG4gICAgZW1pdCgnYWRkZWRfc25hcHNob3RzJywgcGFyYW1zKTtcbn1cblxuY29uc3Qgc2VsZWN0X3NuYXBzaG90ID0gKCkgPT4ge1xuICAgIGNsb3NlKCk7ICAgIFxuICAgIGxldCBmaWx0ZXJzID0gc25hcHNob3Rfc2VsZWN0ZWQudmFsdWUuZmlsdGVycztcbiAgICBpZiAoYXBwbHlfdGltZS52YWx1ZSA9PSB0cnVlKSB7XG4gICAgXHRsZXQgc3RhdHVzID0gbnRvcG5nX3N0YXR1c19tYW5hZ2VyLmdldF9zdGF0dXMoKTtcbiAgICBcdGxldCBwYXJhbXNfb2JqID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfb2JqZWN0KGZpbHRlcnMpO1xuICAgIFx0cGFyYW1zX29iai5lcG9jaF9iZWdpbiA9IHN0YXR1cy5lcG9jaF9iZWdpbjtcbiAgICBcdHBhcmFtc19vYmouZXBvY2hfZW5kID0gc3RhdHVzLmVwb2NoX2VuZDtcbiAgICBcdGZpbHRlcnMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMocGFyYW1zX29iaik7XG4gICAgfVxuICAgIG50b3BuZ191cmxfbWFuYWdlci5yZXBsYWNlX3VybF9hbmRfcmVsb2FkKGZpbHRlcnMpO1xufVxuXG5jb25zdCBkZWxldGVfc25hcHNob3QgPSBhc3luYyAoZGVsZXRlX2FsbCkgPT4ge1xuICAgIGxldCBuYW1lID0gc25hcHNob3Rfc2VsZWN0ZWQudmFsdWUubmFtZTtcbiAgICBpZiAoZGVsZXRlX2FsbCA9PSB0cnVlKSB7IG5hbWUgPSBcIipcIjsgfVxuICAgIGxldCBwYWdlID0gZ2V0X3BhZ2UoKTtcbiAgICBsZXQgcGFyYW1zID0ge1xuICAgIFx0c25hcHNob3RfbmFtZTogbmFtZSxcblx0cGFnZSxcbiAgICB9O1xuICAgIHBhcmFtcy5jc3JmID0gcHJvcHMuY3NyZjtcbiAgICBsZXQgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9kZWxldGUvZmlsdGVycy9zbmFwc2hvdC5sdWFgO1xuICAgIHRyeSB7XG4gICAgXHRsZXQgaGVhZGVycyA9IHtcbiAgICBcdCAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgXHR9O1xuICAgIFx0YXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCwgeyBtZXRob2Q6ICdwb3N0JywgaGVhZGVycywgYm9keTogSlNPTi5zdHJpbmdpZnkocGFyYW1zKSB9KTtcbiAgICBcdGxvYWRfc25hcHNob3RzID0gdHJ1ZTtcbiAgICB9IGNhdGNoKGVycikge1xuICAgIFx0Y29uc29sZS5lcnJvcihlcnIpO1xuICAgIH1cbiAgICBpZiAoZGVsZXRlX2FsbCA9PSB0cnVlKSB7XG5cdGVtaXQoJ2RlbGV0ZWRfYWxsX3NuYXBzaG90cycsIHBhcmFtcyk7XG4gICAgfSBlbHNlIHtcblx0ZW1pdCgnZGVsZXRlZF9zbmFwc2hvdCcsIHBhcmFtcyk7XG4gICAgfVxuICAgIGNsb3NlKCk7XG59XG5cbmNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICAgIG1vZGFsX2lkLnZhbHVlLmNsb3NlKCk7XG59O1xuXG5cbmRlZmluZUV4cG9zZSh7IHNob3csIGNsb3NlIH0pO1xuXG5vbk1vdW50ZWQoKCkgPT4ge1xufSk7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuaW5wdXQ6aW52YWxpZCB7XG4gIGJvcmRlci1jb2xvcjogI2ZmMDAwMDtcbn1cbi5ub3QtYWxsb3dlZCB7XG4gIGN1cnNvcjogbm90LWFsbG93ZWQ7XG59XG48L3N0eWxlPlxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbjxtb2RhbCBAc2hvd2VkPVwic2hvd2VkKClcIiByZWY9XCJtb2RhbF9pZFwiPlxuICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPnt7IF9pMThuKCdleGNsdWRlX2NoZWNrJykgfX06IDxzcGFuIHYtaHRtbD1cImFsZXJ0X25hbWVcIj48L3NwYW4+PC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpib2R5PlxuICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1iLTMgXCI+XG4gICAgICA8ZGl2PlxuXHQ8bGFiZWw+e3sgX2kxOG4oJ2V4Y2x1ZGVfY2hlY2snKSB9fSBcIjxiIHYtaHRtbD1cImFsZXJ0X25hbWVcIj48L2I+XCIuIDxzcGFuIGNsYXNzPVwiYWxlcnRfbGFiZWxcIj57eyBfaTE4bignZXhjbHVkZV9mb3InKSB9fTo8L3NwYW4+IDwvbGFiZWw+XG5cdDxkaXYgY2xhc3M9XCJmb3JtLWNoZWNrXCI+XG4gICAgICBcdCAgPGlucHV0IGNsYXNzPVwiZm9ybS1jaGVjay1pbnB1dFwiIHR5cGU9XCJyYWRpb1wiIHZhbHVlPVwiYW55XCIgdi1tb2RlbD1cInJhZGlvX3NlbGVjdGVkXCI+XG4gICAgICBcdCAgPGxhYmVsIGNsYXNzPVwiZm9ybS1jaGVjay1sYWJlbFwiPlxuICAgICAgXHQgICAgPHNwYW4+IHt7IF9pMThuKCdzaG93X2FsZXJ0cy5maWx0ZXJfZGlzYWJsZV9jaGVjaycpIH19IDwvc3Bhbj5cbiAgICAgIFx0ICA8L2xhYmVsPlxuXHQ8L2Rpdj5cblx0PHRlbXBsYXRlIHYtaWY9XCJwYWdlID09ICdob3N0J1wiPlxuXHQgIDxkaXYgY2xhc3M9XCJmb3JtLWNoZWNrXCI+XG4gICAgICBcdCAgICA8aW5wdXQgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0XCIgdHlwZT1cInJhZGlvXCIgdmFsdWU9XCJob3N0XCIgdi1tb2RlbD1cInJhZGlvX3NlbGVjdGVkXCI+XG4gICAgICBcdCAgICA8bGFiZWwgY2xhc3M9XCJmb3JtLWNoZWNrLWxhYmVsXCI+XG4gICAgICBcdCAgICAgIDxzcGFuPnt7IGhvc3RfYWRkci5sYWJlbCB9fTwvc3Bhbj5cbiAgICAgIFx0ICAgIDwvbGFiZWw+XG5cdCAgPC9kaXY+XHRcblx0PC90ZW1wbGF0ZT5cblx0PHRlbXBsYXRlIHYtaWY9XCJwYWdlID09ICdmbG93J1wiPlxuXHQgIDxkaXYgY2xhc3M9XCJmb3JtLWNoZWNrXCI+XG4gICAgICBcdCAgICA8aW5wdXQgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0XCIgdHlwZT1cInJhZGlvXCIgdmFsdWU9XCJjbGllbnRfaG9zdFwiIHYtbW9kZWw9XCJyYWRpb19zZWxlY3RlZFwiPlxuICAgICAgXHQgICAgPGxhYmVsIGNsYXNzPVwiZm9ybS1jaGVjay1sYWJlbFwiPlxuICAgICAgXHQgICAgICA8c3Bhbj57eyBfaTE4bignY2xpZW50JykgfX06IHt7Zmxvd19hZGRyLmNsaV9sYWJlbH19PC9zcGFuPlxuICAgICAgXHQgICAgPC9sYWJlbD5cblx0ICA8L2Rpdj5cblx0ICA8ZGl2IGNsYXNzPVwiZm9ybS1jaGVja1wiPlxuICAgICAgXHQgICAgPGlucHV0IGNsYXNzPVwiZm9ybS1jaGVjay1pbnB1dFwiIHR5cGU9XCJyYWRpb1wiIHZhbHVlPVwic2VydmVyX2hvc3RcIiB2LW1vZGVsPVwicmFkaW9fc2VsZWN0ZWRcIj5cbiAgICAgIFx0ICAgIDxsYWJlbCBjbGFzcz1cImZvcm0tY2hlY2stbGFiZWxcIj5cbiAgICAgIFx0ICAgICAgPHNwYW4+e3sgX2kxOG4oJ3NlcnZlcicpIH19OiB7eyBmbG93X2FkZHIuc3J2X2xhYmVsIH19PC9zcGFuPlxuICAgICAgXHQgICAgPC9sYWJlbD5cblx0ICA8L2Rpdj5cblx0PC90ZW1wbGF0ZT5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiB2LWlmPVwiZG9tYWluICE9IG51bGwgfHwgdGxzX2NlcnRpZmljYXRlICE9IG51bGxcIiBjbGFzcz1cImV4Y2x1ZGUtZG9tYWluLWNlcnRpZmljYXRlXCI+XG5cdDxsYWJlbD48c3BhbiBjbGFzcz1cImFsZXJ0X2xhYmVsXCI+e3sgX2kxOG4oJ2NoZWNrX2V4Y2x1c2lvbi5leGNsdWRlX2FsbF9jaGVja3NfZm9yJykgfX06PC9zcGFuPiA8L2xhYmVsPlx0XG5cdDxkaXYgdi1pZj1cImRvbWFpbiAhPSBudWxsXCIgY2xhc3M9XCJmb3JtLWNoZWNrXCI+XG4gICAgICBcdCAgPGlucHV0IGNsYXNzPVwiZm9ybS1jaGVjay1pbnB1dFwiIHR5cGU9XCJyYWRpb1wiIHZhbHVlPVwiZG9tYWluXCIgdi1tb2RlbD1cInJhZGlvX3NlbGVjdGVkXCI+XG4gICAgICBcdCAgPGxhYmVsIGNsYXNzPVwiZm9ybS1jaGVjay1sYWJlbCB3aGl0ZXNwYWNlXCI+XG4gICAgICBcdCAgICA8c3Bhbj57e19pMThuKFwiY2hlY2tfZXhjbHVzaW9uLmRvbWFpblwiKX19Ojwvc3Bhbj5cbiAgICAgIFx0ICA8L2xhYmVsPlxuICAgICAgXHQgIDxpbnB1dCB0eXBlPVwidGV4dFwiIDpwYXR0ZXJuPVwicGF0dGVybl9kb21haW5cIiA6ZGlzYWJsZWQ9XCJyYWRpb19zZWxlY3RlZCAhPSAnZG9tYWluJ1wiIHJlcXVpcmVkIHYtbW9kZWw9XCJkb21haW5cIiBjbGFzcz1cImZvcm0tY2hlY2stbGFiZWwgY3VzdG9tLXdpZHRoXCI+XG5cdDwvZGl2PlxuXHQ8ZGl2IHYtaWY9XCJ0bHNfY2VydGlmaWNhdGUgIT0gbnVsbFwiIGNsYXNzPVwiZm9ybS1jaGVja1wiPlxuICAgICAgXHQgIDxpbnB1dCBjbGFzcz1cImZvcm0tY2hlY2staW5wdXRcIiB0eXBlPVwicmFkaW9cIiB2YWx1ZT1cImNlcnRpZmljYXRlXCIgdi1tb2RlbD1cInJhZGlvX3NlbGVjdGVkXCI+XG4gICAgICBcdCAgPGxhYmVsIGNsYXNzPVwiZm9ybS1jaGVjay1sYWJlbCB3aGl0ZXNwYWNlXCI+XG4gICAgICBcdCAgICA8c3Bhbj57e19pMThuKFwiY2hlY2tfZXhjbHVzaW9uLnRsc19jZXJ0aWZpY2F0ZVwiKX19Ojwvc3Bhbj5cbiAgICAgIFx0ICA8L2xhYmVsPlxuICAgICAgXHQgIDxpbnB1dCB0eXBlPVwidGV4dFwiIDpkaXNhYmxlZD1cInJhZGlvX3NlbGVjdGVkICE9ICdjZXJ0aWZpY2F0ZSdcIiB2LW1vZGVsPVwidGxzX2NlcnRpZmljYXRlXCIgOnBhdHRlcm49XCJwYXR0ZXJuX2NlcnRpZmljYXRlXCIgcmVxdWlyZWQgY2xhc3M9XCJmb3JtLWNoZWNrLWxhYmVsIGN1c3RvbS13aWR0aFwiPlxuXHQ8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxkaXYgdi1pZj1cInJhZGlvX3NlbGVjdGVkICE9ICdhbnknXCIgY2xhc3M9XCJmb3JtLWdyb3VwIHJvd1wiPlxuICAgICAgPGRpdj5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWxcIj48Yj57eyBfaTE4bihcInNob3dfYWxlcnRzLmFkZF9hX2NvbW1lbnRcIikgfX08L2I+PC9sYWJlbD5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cIm10LTFcIj5cbiAgICAgICAgPHRleHRhcmVhIDpwbGFjZWhvbGRlcj1jb21tZW50X3BsYWNlaG9sZGVyIGlkPVwiYWxlcnQtbGFiZWxcIiBuYW1lPVwibGFiZWxcIiByb3dzPVwiM1wiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgdHlwZT1cInRleHRcIiB2LW1vZGVsPVwiY29tbWVudFwiIG1heGxlbmd0aD1cIjQ1MFwiPjwvdGV4dGFyZWE+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICAgIDxociB2LXNob3c9XCJkaXNhYmxlX2FsZXJ0c1wiIGNsYXNzPVwic2VwYXJhdG9yXCIgPlxuXG4gICAgPHRlbXBsYXRlIHYtaWY9XCJyYWRpb19zZWxlY3RlZCAhPSAnZG9tYWluJyAmJiByYWRpb19zZWxlY3RlZCAhPSAnY2VydGlmaWNhdGUnXCI+XG5cbiAgICAgIDxkaXYgdi1zaG93PVwiZGlzYWJsZV9hbGVydHNcIiBjbGFzcz1cIm1lc3NhZ2UgYWxlcnQgYWxlcnQtZGFuZ2VyXCI+XG5cdHt7IF9pMThuKFwic2hvd19hbGVydHMuY29uZmlybV9kZWxldGVfZmlsdGVyZWRfYWxlcnRzXCIpIH19XG4gICAgICA8L2Rpdj5cbiAgICAgIDxociBjbGFzcz1cInNlcGFyYXRvclwiPlxuICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbWItMyBcIj5cblx0PGRpdiBjbGFzcz1cImN1c3RvbS1jb250cm9sIGN1c3RvbS1zd2l0Y2hcIj5cblx0ICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgY2xhc3M9XCJjdXN0b20tY29udHJvbC1pbnB1dCB3aGl0ZXNwYWNlXCIgIHYtbW9kZWw9XCJkaXNhYmxlX2FsZXJ0c1wiPlxuXHQgIFxuXHQgIDxsYWJlbCBjbGFzcz1cImN1c3RvbS1jb250cm9sLWxhYmVsXCI+e3tfaTE4bihcImRlbGV0ZV9kaXNhYmxlZF9hbGVydHNcIil9fTwvbGFiZWw+XG5cdDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC90ZW1wbGF0ZT5cbiAgICA8ZGl2ICBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmcgYm9yZGVyXCIgcm9sZT1cImFsZXJ0XCI+XG4gICAgICB7e19pMThuKFwic2hvd19hbGVydHMuY29uZmlybV9maWx0ZXJfYWxlcnRcIil9fVxuICAgIDwvZGl2PlxuICA8L3RlbXBsYXRlPjwhLS0gbW9kYWwtYm9keSAtLT5cbiAgXG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Zm9vdGVyPlxuICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImV4Y2x1ZGVcIiA6ZGlzYWJsZWQ9XCJjaGVja19kaXNhYmxlX2FwcGx5KClcIiBjbGFzcz1cImJ0biBidG4td2FybmluZ1wiPnt7X2kxOG4oXCJmaWx0ZXJcIil9fTwvYnV0dG9uPlxuICA8L3RlbXBsYXRlPlxuPC9tb2RhbD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgY29tcHV0ZWQsIHdhdGNoIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBtb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuXG5jb25zdCBtb2RhbF9pZCA9IHJlZihudWxsKTtcbmNvbnN0IHJhZGlvX3NlbGVjdGVkID0gcmVmKFwiYW55XCIpO1xuY29uc3QgZGlzYWJsZV9hbGVydHMgPSByZWYodHJ1ZSk7XG5jb25zdCBkb21haW4gPSByZWYobnVsbCk7XG5jb25zdCB0bHNfY2VydGlmaWNhdGUgPSByZWYobnVsbCk7XG5jb25zdCBjb21tZW50ID0gcmVmKG51bGwpO1xuY29uc3QgY29tbWVudF9wbGFjZWhvbGRlciA9IGkxOG4oXCJkZXRhaWxzLmNvbW1lbnRfcGxhY2Vob2xkZXJcIik7XG5cblxuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFsnZXhjbHVkZSddKTtcblxuY29uc3Qgc2hvd2VkID0gKCkgPT4ge307XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIGFsZXJ0OiBPYmplY3QsXG4gICAgcGFnZTogU3RyaW5nLFxufSk7XG5cbndhdGNoKCgpID0+IHByb3BzLmFsZXJ0LCAoY3VycmVudF92YWx1ZSwgb2xkX3ZhbHVlKSA9PiB7XG4gICAgaWYgKGN1cnJlbnRfdmFsdWUgPT0gbnVsbCkgeyByZXR1cm47IH1cbiAgICByYWRpb19zZWxlY3RlZC52YWx1ZSA9IFwiYW55XCI7XG4gICAgZGlzYWJsZV9hbGVydHMudmFsdWUgPSB0cnVlO1xuICAgIGRvbWFpbi52YWx1ZSA9IGN1cnJlbnRfdmFsdWUuaW5mbz8udmFsdWUgPT0gXCJcIiA/IG51bGwgOiBleHRyYWN0X2RvbWFpbl9uYW1lX2Zyb21faW5mbyhjdXJyZW50X3ZhbHVlLmluZm8/LnZhbHVlKTtcbiAgICB0bHNfY2VydGlmaWNhdGUudmFsdWUgPSBjdXJyZW50X3ZhbHVlLmluZm8/Lmlzc3VlcmRuID09IFwiXCIgPyBudWxsIDogY3VycmVudF92YWx1ZS5pbmZvPy5pc3N1ZXJkbjtcbn0pO1xuXG5jb25zdCBleHRyYWN0X2RvbWFpbl9uYW1lX2Zyb21faW5mbyA9IChpbmZvKSA9PiB7XG5cbiAgbGV0IGRvbWFpbl9uYW1lID0gaW5mbztcbiAgLy8gcmVtb3ZlIHNjaGVtYSBodHRwczovLyBldGNcbiAgbGV0IGluZm9fc3BsaXR0ZWRfID0gaW5mby5zcGxpdChcIjovL1wiKTtcbiAgZGVidWdnZXI7XG4gIGlmIChpbmZvX3NwbGl0dGVkXy5sZW5ndGggPiAxKSBkb21haW5fbmFtZSA9IGluZm9fc3BsaXR0ZWRfWzFdO1xuXG4gIC8vIHJlbW92ZSBuZXQgcG9ydFxuICBkb21haW5fbmFtZSA9IGRvbWFpbl9uYW1lLnNwbGl0KFwiOlwiKVswXTtcblxuICAvLyByZW1vdmUgd3d3LlxuICBsZXQgaW5mb19zcGxpdHRlZF9vbl93d3cgPSBkb21haW5fbmFtZS5zcGxpdChcInd3dy5cIik7XG4gIGlmIChpbmZvX3NwbGl0dGVkX29uX3d3dy5sZW5ndGggPiAxKSBkb21haW5fbmFtZSA9IGluZm9fc3BsaXR0ZWRfb25fd3d3WzFdO1xuXG4gIC8vIHJlbW92ZSBwYXRoXG4gIGRvbWFpbl9uYW1lID0gZG9tYWluX25hbWUuc3BsaXQoXCIvXCIpWzBdO1xuICBcbiAgcmV0dXJuIGRvbWFpbl9uYW1lO1xuXG59XG5jb25zdCBjaGVja19kaXNhYmxlX2FwcGx5ID0gKCkgPT4ge1xuICAgIGlmIChyYWRpb19zZWxlY3RlZC52YWx1ZSA9PSBcImRvbWFpblwiKSB7XG5cdGxldCByZWdleF9kb21haW4gPSBuZXcgUmVnRXhwKHBhdHRlcm5fZG9tYWluKTtcblx0cmV0dXJuIGRvbWFpbi52YWx1ZSA9PSBudWxsIHx8IHJlZ2V4X2RvbWFpbi50ZXN0KGRvbWFpbi52YWx1ZSkgPT0gZmFsc2U7XG4gICAgfSBlbHNlIGlmIChyYWRpb19zZWxlY3RlZC52YWx1ZSA9PSBcImNlcnRpZmljYXRlXCIpIHtcblx0bGV0IHJlZ2V4X2NlcnRpZmljYXRlID0gbmV3IFJlZ0V4cChwYXR0ZXJuX2NlcnRpZmljYXRlKTtcblx0cmV0dXJuIHRsc19jZXJ0aWZpY2F0ZS52YWx1ZSA9PSBudWxsIHx8IHJlZ2V4X2NlcnRpZmljYXRlLnRlc3QodGxzX2NlcnRpZmljYXRlLnZhbHVlKSA9PSBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcblxuY29uc3QgYWxlcnRfbmFtZSA9IGNvbXB1dGVkKCgpID0+IHByb3BzLmFsZXJ0Py5hbGVydF9uYW1lKTtcblxuY29uc3QgaG9zdF9hZGRyID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGxldCByZXMgPSB7IHZhbHVlOiBcIlwiLCBsYWJlbDogXCJcIiB9O1xuICAgIGlmIChwcm9wcy5wYWdlICE9IFwiaG9zdFwiIHx8IHByb3BzLmFsZXJ0ID09IG51bGwpIHsgcmV0dXJuIHJlczsgfVxuICAgIGxldCBhbGVydCA9IHByb3BzLmFsZXJ0O1xuICAgIHJlcy52YWx1ZSA9IGFsZXJ0LmlwLnZhbHVlO1xuICAgIGlmIChhbGVydC52bGFuICE9IG51bGwgJiYgYWxlcnQudmxhbi52YWx1ZSAhPSBudWxsICYmIGFsZXJ0LnZsYW4udmFsdWUgIT0gMCkge1xuXHRyZXMudmFsdWUgPSByZXMudmFsdWUgKyAnQCcgKyBhbGVydC52bGFuLnZhbHVlO1xuICAgIH1cbiAgICByZXMubGFiZWwgPSAoYWxlcnQuaXAubGFiZWwpID8gYCR7YWxlcnQuaXAubGFiZWx9ICgke2FsZXJ0LmlwLnZhbHVlfSlgIDogYWxlcnQuaXAudmFsdWU7XG4gICAgcmV0dXJuIHJlcztcbn0pO1xuXG5jb25zdCBmbG93X2FkZHIgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgbGV0IHJlcyA9IHsgY2xpX3ZhbHVlOiBcIlwiLCBjbGlfbGFiZWw6IFwiXCIsIHNydl92YWx1ZTogXCJcIiwgc3J2X2xhYmVsOiBcIlwiIH07XG4gICAgaWYgKHByb3BzLnBhZ2UgIT0gXCJmbG93XCIgfHwgcHJvcHMuYWxlcnQgPT0gbnVsbCkgeyByZXR1cm4gcmVzOyB9XG4gICAgbGV0IGFsZXJ0ID0gcHJvcHMuYWxlcnQ7XG4gICAgcmVzLmNsaV92YWx1ZSA9IGFsZXJ0LmZsb3cuY2xpX2lwLnZhbHVlO1xuICAgIHJlcy5zcnZfdmFsdWUgPSBhbGVydC5mbG93LnNydl9pcC52YWx1ZTtcbiAgICBsZXQgY2xpX2xhYmVsID0gYCR7YWxlcnQuZmxvdy5jbGlfaXAubGFiZWwgfHwgYWxlcnQuZmxvdy5jbGlfaXAudmFsdWV9YFxuICAgIGxldCBzcnZfbGFiZWwgPSBgJHthbGVydC5mbG93LnNydl9pcC5sYWJlbCB8fCBhbGVydC5mbG93LnNydl9pcC52YWx1ZX1gXG5cbiAgICBpZihhbGVydC5mbG93LnZsYW4gIT0gbnVsbCAmJiBhbGVydC5mbG93LnZsYW4udmFsdWUgIT0gbnVsbCAmJiBhbGVydC5mbG93LnZsYW4udmFsdWUgIT0gMCkge1xuICAgICAgY2xpX2xhYmVsID0gYCR7Y2xpX2xhYmVsfUAke2FsZXJ0LmZsb3cudmxhbi5sYWJlbH1gXG4gICAgICBzcnZfbGFiZWwgPSBgJHtzcnZfbGFiZWx9QCR7YWxlcnQuZmxvdy52bGFuLmxhYmVsfWBcbiAgICAgIHJlcy5jbGlfdmFsdWUgPSByZXMuY2xpX3ZhbHVlICsgJ0AnICsgYWxlcnQuZmxvdy52bGFuLnZhbHVlXG4gICAgICByZXMuc3J2X3ZhbHVlID0gcmVzLnNydl92YWx1ZSArICdAJyArIGFsZXJ0LmZsb3cudmxhbi52YWx1ZVxuICAgIH1cblxuICAgIGlmKGNsaV9sYWJlbCAhPT0gcmVzLmNsaV92YWx1ZSkge1xuICAgICAgY2xpX2xhYmVsID0gYCR7Y2xpX2xhYmVsfSAoJHtyZXMuY2xpX3ZhbHVlfSlgXG4gICAgfVxuICAgIGlmKHNydl9sYWJlbCAhPT0gcmVzLnNydl92YWx1ZSkge1xuICAgICAgc3J2X2xhYmVsID0gYCR7c3J2X2xhYmVsfSAoJHtyZXMuc3J2X3ZhbHVlfSlgXG4gICAgfVxuICAgIFxuICAgIHJlcy5jbGlfbGFiZWwgPSBjbGlfbGFiZWxcbiAgICByZXMuc3J2X2xhYmVsID0gc3J2X2xhYmVsXG4gICAgcmV0dXJuIHJlcztcbn0pO1xuXG5jb25zdCBzaG93ID0gKCkgPT4ge1xuICAgIGNvbW1lbnQudmFsdWUgPSBcIlwiO1xuICAgIG1vZGFsX2lkLnZhbHVlLnNob3coKTtcbn07XG5cbmZ1bmN0aW9uIGdldF90eXBlKCkge1xuICAgIGlmIChyYWRpb19zZWxlY3RlZC52YWx1ZSA9PSBcImRvbWFpblwiIHx8IHJhZGlvX3NlbGVjdGVkLnZhbHVlID09IFwiY2VydGlmaWNhdGVcIikge1xuXHRyZXR1cm4gcmFkaW9fc2VsZWN0ZWQudmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBcImhvc3RcIjtcbn1cblxubGV0IHBhdHRlcm5fZG9tYWluID0gTnRvcFV0aWxzLlJFR0VYRVMuZG9tYWluX25hbWVfbm90X3N0cmljdDtcbmxldCBwYXR0ZXJuX2NlcnRpZmljYXRlID0gTnRvcFV0aWxzLlJFR0VYRVMudGxzX2NlcnRpZmljYXRlO1xuXG5jb25zdCBleGNsdWRlID0gKCkgPT4ge1xuICAgIGxldCBwYWdlID0gcHJvcHMucGFnZTtcbiAgICBsZXQgdHlwZSA9IGdldF90eXBlKCk7XG4gICAgbGV0IHBhcmFtcyA9IHtcbiAgICBcdGRlbGV0ZV9hbGVydHM6IGRpc2FibGVfYWxlcnRzLnZhbHVlLFxuICAgICAgbGFiZWw6IGNvbW1lbnQudmFsdWUsXG5cblx0dHlwZSxcdFxuICAgIH07XG4gICAgbGV0IGFkZHIgPSBudWxsO1xuICAgIGlmICh0eXBlID09IFwiaG9zdFwiKSB7XHRcblx0aWYgKHJhZGlvX3NlbGVjdGVkLnZhbHVlID09IFwiaG9zdFwiKSB7XG5cdCAgICBhZGRyID0gaG9zdF9hZGRyLnZhbHVlLnZhbHVlO1xuXHR9IGVsc2UgaWYgKHJhZGlvX3NlbGVjdGVkLnZhbHVlID09IFwic2VydmVyX2hvc3RcIikge1xuXHQgICAgYWRkciA9IGZsb3dfYWRkci52YWx1ZS5zcnZfdmFsdWU7XG5cdH0gZWxzZSBpZiAocmFkaW9fc2VsZWN0ZWQudmFsdWUgPT0gXCJjbGllbnRfaG9zdFwiKSB7XG5cdCAgICBhZGRyID0gZmxvd19hZGRyLnZhbHVlLmNsaV92YWx1ZTtcblx0fVxuXHRwYXJhbXMuYWxlcnRfYWRkciA9IGFkZHI7XG5cdGlmIChwYWdlID09IFwiZmxvd1wiKSB7XG5cdCAgICBwYXJhbXMuZmxvd19hbGVydF9rZXkgPSBwcm9wcy5hbGVydC5hbGVydF9pZC52YWx1ZTtcblx0fSBlbHNlIGlmIChwYWdlID09IFwiaG9zdFwiKSB7XG5cdCAgICBwYXJhbXMuaG9zdF9hbGVydF9rZXkgPSBwcm9wcy5hbGVydC5hbGVydF9pZC52YWx1ZTtcblx0fVxuICAgIH0gZWxzZSBpZiAodHlwZSA9PSBcImRvbWFpblwiKSB7XG5cdHBhcmFtcy5kZWxldGVfYWxlcnRzID0gZmFsc2U7XG5cdHBhcmFtcy5hbGVydF9kb21haW4gPSBkb21haW4udmFsdWU7XG4gICAgfSBlbHNlIGlmICh0eXBlID09IFwiY2VydGlmaWNhdGVcIikge1xuXHRwYXJhbXMuZGVsZXRlX2FsZXJ0cyA9IGZhbHNlO1xuXHRwYXJhbXMuYWxlcnRfY2VydGlmaWNhdGUgPSB0bHNfY2VydGlmaWNhdGUudmFsdWU7XG4gICAgfVxuICAgIGNsb3NlKCk7XG4gICAgZW1pdCgnZXhjbHVkZScsIHBhcmFtcyk7XG59O1xuXG5jb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgICBtb2RhbF9pZC52YWx1ZS5jbG9zZSgpO1xufTtcblxuXG5kZWZpbmVFeHBvc2UoeyBzaG93LCBjbG9zZSB9KTtcblxub25Nb3VudGVkKCgpID0+IHtcbn0pO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbi53aGl0ZXNwYWNlIHtcbiAgbWFyZ2luLXJpZ2h0OiAwLjJyZW07XG59XG4uY3VzdG9tLXdpZHRoIHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1pbi13aWR0aDogMTAwJTtcbn1cbmlucHV0OmludmFsaWQge1xuICBib3JkZXItY29sb3I6ICNmZjAwMDA7XG59XG4uZXhjbHVkZS1kb21haW4tY2VydGlmaWNhdGUge1xuICBtYXJnaW4tdG9wOiAwLjRyZW07XG59XG48L3N0eWxlPlxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbjxtb2RhbCByZWY9XCJtb2RhbF9pZFwiPlxuICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPlxuICAgIHt7X2kxOG4oXCJzaG93X2FsZXJ0cy5hY2tub3dsZWRnZV9hbGVydFwiKX19OiB7e3RpdGxlX2Rlc2N9fVxuICA8L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgcm93IG1iLTJcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tNlwiPlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbFwiPjxiPnt7X2kxOG4oXCJzaG93X2FsZXJ0cy5hZGRfYV9jb21tZW50XCIpfX08L2I+PC9sYWJlbD5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS02IG10LTFcIj5cbiAgICAgICAgPGlucHV0IHYtbW9kZWw9XCJjb21tZW50XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiB0eXBlPVwidGV4dFwiICBtYXhsZW5ndGg9XCIyNTVcIj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxBbGVydEluZm8gOm5vX2Nsb3NlX2J1dHRvbj1cInRydWVcIiByZWY9XCJhbGVydF9pbmZvXCI+PC9BbGVydEluZm8+XG4gIDwvdGVtcGxhdGU+PCEtLSBtb2RhbC1ib2R5IC0tPlxuICBcbiAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiYWNrbm93bGVkZ2VcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPnt7X2kxOG4oXCJhY2tub3dsZWRnZVwiKX19PC9idXR0b24+XG4gIDwvdGVtcGxhdGU+XG48L21vZGFsPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBjb21wdXRlZCwgd2F0Y2ggfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIG1vZGFsIH0gZnJvbSBcIi4vbW9kYWwudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIEFsZXJ0SW5mbyB9IGZyb20gXCIuL2FsZXJ0LWluZm8udnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfdXRpbGl0eSwgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXNcIjtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcbmNvbnN0IG1vZGFsX2lkID0gcmVmKG51bGwpO1xuY29uc3QgYWxlcnRfaW5mbyA9IHJlZihudWxsKTtcbmNvbnN0IGNvbW1lbnQgPSByZWYoXCJcIik7XG5jb25zdCB0aXRsZV9kZXNjID0gcmVmKFwiXCIpO1xuXG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoW1wiYWNrbm93bGVkZ2VcIl0pO1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICBjb250ZXh0OiBPYmplY3QsXG4gICAgcGFnZTogU3RyaW5nLFxufSk7XG5cbm9uTW91bnRlZCgoKSA9PiB7XG59KTtcblxuYXN5bmMgZnVuY3Rpb24gYWNrbm93bGVkZ2UoKSB7XG4gICAgY29uc3QgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2Fja25vd2xlZGdlLyR7cHJvcHMucGFnZX0vYWxlcnRzLmx1YWA7XG4gICAgY29uc3QgcGFyYW1zID0ge1xuXHRjc3JmOiBwcm9wcy5jb250ZXh0LmNzcmYsXG5cdGlmaWQ6IHByb3BzLmNvbnRleHQuaWZpZCxcblx0bGFiZWw6IGNvbW1lbnQudmFsdWUsXG5cdHJvd19pZDogYWxlcnQudmFsdWUucm93X2lkLFxuICAgIH07XG4gICAgbGV0IGhlYWRlcnMgPSB7XG5cdCdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICB9O1xuICAgIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcykgfSk7XG4gICAgZW1pdChcImFja25vd2xlZGdlXCIpO1xuICAgIGNsb3NlKCk7XG59XG5cblxuY29uc3QgYWxlcnQgPSByZWYoe30pO1xuY29uc3Qgc2hvdyA9IChfYWxlcnQpID0+IHtcbiAgICBhbGVydC52YWx1ZSA9IF9hbGVydDtcbiAgICBjb25zdCAkdHlwZSA9ICQoYDxzcGFuPiR7X2FsZXJ0LmFsZXJ0X2lkLmxhYmVsfTwvc3Bhbj5gKTtcbiAgICB0aXRsZV9kZXNjLnZhbHVlID0gJHR5cGUudGV4dCgpLnRyaW0oKTtcbiAgICBjb21tZW50LnZhbHVlID0gX2FsZXJ0LnVzZXJfbGFiZWw7XG4gICAgXG4gICAgbGV0IG1lc3NhZ2VfYm9keSA9IF9pMThuKFwic2hvd19hbGVydHMuY29uZmlybV9hY2tub3dsZWRnZV9hbGVydFwiKTtcbiAgICBhbGVydF9pbmZvLnZhbHVlLnNob3cobWVzc2FnZV9ib2R5LCBcImFsZXJ0LXdhcm5pbmdcIik7XG4gICAgbW9kYWxfaWQudmFsdWUuc2hvdygpO1xufTtcblxuY29uc3QgY2xvc2UgPSAoKSA9PiB7XG4gICAgbW9kYWxfaWQudmFsdWUuY2xvc2UoKTtcbn07XG5cbmRlZmluZUV4cG9zZSh7IHNob3csIGNsb3NlIH0pO1xuXG48L3NjcmlwdD5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG48bW9kYWwgcmVmPVwibW9kYWxfaWRcIj5cbiAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT5cbiAgICB7e19pMThuKFwic2hvd19hbGVydHMuZGVsZXRlX2FsZXJ0XCIpfX1cbiAgPC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpib2R5PlxuICAgIDxBbGVydEluZm8gOm5vX2Nsb3NlX2J1dHRvbj1cInRydWVcIiByZWY9XCJhbGVydF9pbmZvXCI+PC9BbGVydEluZm8+XG4gIDwvdGVtcGxhdGU+PCEtLSBtb2RhbC1ib2R5IC0tPlxuICBcbiAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiZGVsZXRlX2FsZXJ0XCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj57e19pMThuKFwiZGVsZXRlXCIpfX08L2J1dHRvbj5cbiAgPC90ZW1wbGF0ZT5cbjwvbW9kYWw+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIGNvbXB1dGVkLCB3YXRjaCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgbW9kYWwgfSBmcm9tIFwiLi9tb2RhbC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgQWxlcnRJbmZvIH0gZnJvbSBcIi4vYWxlcnQtaW5mby52dWVcIjtcbmltcG9ydCB7IG50b3BuZ191dGlsaXR5LCBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlc1wiO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuY29uc3QgbW9kYWxfaWQgPSByZWYobnVsbCk7XG5jb25zdCBhbGVydF9pbmZvID0gcmVmKG51bGwpO1xuXG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoW1wiZGVsZXRlX2FsZXJ0XCJdKTtcbmNvbnN0IGFsZXJ0ID0gcmVmKHt9KTtcbmxldCBzdGF0dXNfdmlldyA9IFwiaGlzdG9yaWNhbFwiO1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICBjb250ZXh0OiBPYmplY3QsXG4gICAgcGFnZTogU3RyaW5nLFxufSk7XG5cbm9uTW91bnRlZCgoKSA9PiB7XG59KTtcblxuYXN5bmMgZnVuY3Rpb24gZGVsZXRlX2FsZXJ0KCkge1xuICAgIGNvbnN0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9kZWxldGUvJHtwcm9wcy5wYWdlfS9hbGVydHMubHVhYDtcbiAgICBjb25zdCBwYXJhbXMgPSB7XG5cdGNzcmY6IHByb3BzLmNvbnRleHQuY3NyZixcblx0aWZpZDogcHJvcHMuY29udGV4dC5pZmlkLFxuXHRzdGF0dXM6IHN0YXR1c192aWV3LFxuXHRyb3dfaWQ6IGFsZXJ0LnZhbHVlLnJvd19pZCxcbiAgICB9O1xuICAgIGxldCBoZWFkZXJzID0ge1xuXHQnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgfTtcbiAgICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsLCB7IG1ldGhvZDogJ3Bvc3QnLCBoZWFkZXJzLCBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpIH0pO1xuICAgIGVtaXQoXCJkZWxldGVfYWxlcnRcIik7XG4gICAgY2xvc2UoKTtcbn1cblxuXG5jb25zdCBzaG93ID0gKF9hbGVydCwgX3N0YXR1c192aWV3KSA9PiB7XG4gICAgYWxlcnQudmFsdWUgPSBfYWxlcnQ7XG4gICAgc3RhdHVzX3ZpZXcgPSBfc3RhdHVzX3ZpZXc7XG4gICAgbGV0IG1lc3NhZ2VfYm9keSA9IF9pMThuKFwic2hvd19hbGVydHMuY29uZmlybV9sYWJlbF9hbGVydFwiKTtcbiAgICBhbGVydF9pbmZvLnZhbHVlLnNob3cobWVzc2FnZV9ib2R5LCBcImFsZXJ0LWRhbmdlclwiKTtcbiAgICBtb2RhbF9pZC52YWx1ZS5zaG93KCk7XG59O1xuXG5jb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgICBtb2RhbF9pZC52YWx1ZS5jbG9zZSgpO1xufTtcblxuZGVmaW5lRXhwb3NlKHsgc2hvdywgY2xvc2UgfSk7XG5cbjwvc2NyaXB0PlxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbjxtb2RhbCByZWY9XCJtb2RhbF9pZFwiPlxuICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPlxuICAgIHt7X2kxOG4oXCJhY2tub3dsZWRnZV9hbGVydHNcIil9fVxuICA8L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgcm93XCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTZcIj5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWxcIj48Yj57e19pMThuKFwiZGF0ZV9mcm9tXCIpfX08L2I+PC9sYWJlbD5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS02XCI+XG4gICAgICAgIDxpbnB1dCBjbGFzcz1cImZvcm0tY29udHJvbFwiIHR5cGU9XCJ0ZXh0XCIgOnZhbHVlPVwiYmVnaW5fdGltZVwiIGRpc2FibGVkPVwiXCI+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCByb3cgbWItMlwiPlxuICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS02XCI+XG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsXCI+PGI+e3tfaTE4bihcImRhdGVfZnJvbVwiKX19PC9iPjwvbGFiZWw+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tNiBtdC0xXCI+XG4gICAgICAgIDxpbnB1dCBjbGFzcz1cImZvcm0tY29udHJvbFwiIHR5cGU9XCJ0ZXh0XCIgOnZhbHVlPVwiZW5kX3RpbWVcIiBkaXNhYmxlZD1cIlwiPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgXG4gICAgPEFsZXJ0SW5mbyA6bm9fY2xvc2VfYnV0dG9uPVwidHJ1ZVwiIHJlZj1cImFsZXJ0X2luZm9cIj48L0FsZXJ0SW5mbz4gICAgXG4gIDwvdGVtcGxhdGU+PCEtLSBtb2RhbC1ib2R5IC0tPlxuXG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Zm9vdGVyPlxuICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImFja25vd2xlZGdlX2FsZXJ0c1wiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+e3tfaTE4bihcImFja25vd2xlZGdlXCIpfX08L2J1dHRvbj5cbiAgPC90ZW1wbGF0ZT5cbjwvbW9kYWw+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIGNvbXB1dGVkLCB3YXRjaCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgbW9kYWwgfSBmcm9tIFwiLi9tb2RhbC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgQWxlcnRJbmZvIH0gZnJvbSBcIi4vYWxlcnQtaW5mby52dWVcIjtcbmltcG9ydCB7IG50b3BuZ191dGlsaXR5LCBudG9wbmdfdXJsX21hbmFnZXIsIG50b3BuZ19ldmVudHNfbWFuYWdlciwgbnRvcG5nX2V2ZW50cyB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzXCI7XG5pbXBvcnQgZmlsdGVyc01hbmFnZXIgZnJvbSBcIi4uL3V0aWxpdGllcy9maWx0ZXJzLW1hbmFnZXIuanNcIjtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gICAgcGFnZTogU3RyaW5nLFxuICAgIGNvbnRleHQ6IE9iamVjdCwgICAgXG59KTtcbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbXCJhY2tub3dsZWRnZV9hbGVydHNcIl0pO1xuXG5jb25zdCBpZCA9IFwibW9kYWwtYWNrbm93bGVkZ2UtYWxlcnRzXCI7XG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuY29uc3QgbW9kYWxfaWQgPSByZWYobnVsbCk7XG5jb25zdCBhbGVydF9pbmZvID0gcmVmKG51bGwpO1xuY29uc3QgYmVnaW5fdGltZSA9IHJlZihcIlwiKTtcbmNvbnN0IGVuZF90aW1lID0gcmVmKFwiXCIpO1xuY29uc3QgZmlsdGVycyA9IHJlZihbXSk7XG5cbm9uTW91bnRlZCgoKSA9PiB7XG59KTtcblxuY29uc3Qgc2hvdyA9IChzdGF0dXMpID0+IHtcbiAgICBiZWdpbl90aW1lLnZhbHVlID0gbnRvcG5nX3V0aWxpdHkuZnJvbV91dGNfdG9fc2VydmVyX2RhdGVfZm9ybWF0KHN0YXR1cy5lcG9jaF9iZWdpbiAqIDEwMDApO1xuICAgIGVuZF90aW1lLnZhbHVlID0gbnRvcG5nX3V0aWxpdHkuZnJvbV91dGNfdG9fc2VydmVyX2RhdGVfZm9ybWF0KHN0YXR1cy5lcG9jaF9lbmQgKiAxMDAwKTtcbiAgICBsZXQgbWVzc2FnZV9ib2R5ID0gX2kxOG4oXCJzaG93X2FsZXJ0cy5jb25maXJtX2Fja25vd2xlZGdlX2FsZXJ0c1wiKTtcbiAgICBhbGVydF9pbmZvLnZhbHVlLnNob3cobWVzc2FnZV9ib2R5LCBcImFsZXJ0LWRhbmdlclwiKTtcbiAgICBtb2RhbF9pZC52YWx1ZS5zaG93KCk7XG59O1xuXG5hc3luYyBmdW5jdGlvbiBhY2tub3dsZWRnZV9hbGVydHMoKSB7XG4gICAgY29uc3QgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2Fja25vd2xlZGdlLyR7cHJvcHMucGFnZX0vYWxlcnRzLmx1YWA7XG4gICAgY29uc3QgdXJsX3BhcmFtc19vYmogPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9vYmplY3QoKTtcbiAgICBjb25zdCBwYXJhbXMgPSB7XG5cdGNzcmY6IHByb3BzLmNvbnRleHQuY3NyZixcblx0Li4udXJsX3BhcmFtc19vYmosXG4gICAgfTtcbiAgICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3Bvc3RfcmVxdWVzdCh1cmwsIHBhcmFtcyk7XG4gICAgZW1pdChcImFja25vd2xlZGdlX2FsZXJ0c1wiKTtcbiAgICBjbG9zZSgpO1xufVxuXG5jb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgICBtb2RhbF9pZC52YWx1ZS5jbG9zZSgpO1xufTtcblxuZGVmaW5lRXhwb3NlKHsgc2hvdywgY2xvc2UgfSk7XG5cbjwvc2NyaXB0PlxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbjxtb2RhbCByZWY9XCJtb2RhbF9pZFwiPlxuICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPlxuICAgIHt7X2kxOG4oXCJkZWxldGVfYWxlcnRzXCIpfX1cbiAgPC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpib2R5PlxuICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIHJvd1wiPlxuICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS02XCI+XG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsXCI+PGI+e3tfaTE4bihcImRhdGVfZnJvbVwiKX19PC9iPjwvbGFiZWw+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tNlwiPlxuICAgICAgICA8aW5wdXQgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiB0eXBlPVwidGV4dFwiIDp2YWx1ZT1cImJlZ2luX3RpbWVcIiBkaXNhYmxlZD1cIlwiPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgcm93XCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTZcIj5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWxcIj48Yj57e19pMThuKFwiZGF0ZV9mcm9tXCIpfX08L2I+PC9sYWJlbD5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS02IG10LTFcIj5cbiAgICAgICAgPGlucHV0IGNsYXNzPVwiZm9ybS1jb250cm9sXCIgdHlwZT1cInRleHRcIiA6dmFsdWU9XCJlbmRfdGltZVwiIGRpc2FibGVkPVwiXCI+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICBcbiAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBmaWx0ZXJzLWxpc3QgbWItMlwiPlxuICAgICAgPGRpdiB2LWZvcj1cIml0ZW0gaW4gZmlsdGVyc1wiIGNsYXNzPVwiZm9ybS1ncm91cCByb3dcIj5cblx0PGRpdiBjbGFzcz1cImNvbC1zbS02XCI+XG4gICAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWxcIj48Yj57e2l0ZW0ubGFiZWx9fTwvYj48L2xhYmVsPlxuXHQ8L2Rpdj5cblx0PGRpdiBjbGFzcz1cImNvbC1zbS02IG10LTFcIj5cbiAgICAgICAgICA8aW5wdXQgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiB0eXBlPVwidGV4dFwiIDp2YWx1ZT1cIml0ZW0udmFsdWVcIiBkaXNhYmxlZD1cIlwiPlxuXHQ8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxBbGVydEluZm8gOm5vX2Nsb3NlX2J1dHRvbj1cInRydWVcIiByZWY9XCJhbGVydF9pbmZvXCI+PC9BbGVydEluZm8+ICAgIFxuICA8L3RlbXBsYXRlPjwhLS0gbW9kYWwtYm9keSAtLT5cblxuICA8dGVtcGxhdGUgdi1zbG90OmZvb3Rlcj5cbiAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJkZWxldGVfYWxlcnRzXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj57e19pMThuKFwiZGVsZXRlXCIpfX08L2J1dHRvbj5cbiAgPC90ZW1wbGF0ZT5cbjwvbW9kYWw+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIGNvbXB1dGVkLCB3YXRjaCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgbW9kYWwgfSBmcm9tIFwiLi9tb2RhbC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgQWxlcnRJbmZvIH0gZnJvbSBcIi4vYWxlcnQtaW5mby52dWVcIjtcbmltcG9ydCB7IG50b3BuZ191dGlsaXR5LCBudG9wbmdfdXJsX21hbmFnZXIsIG50b3BuZ19ldmVudHNfbWFuYWdlciwgbnRvcG5nX2V2ZW50cyB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzXCI7XG5pbXBvcnQgZmlsdGVyc01hbmFnZXIgZnJvbSBcIi4uL3V0aWxpdGllcy9maWx0ZXJzLW1hbmFnZXIuanNcIjtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gICAgcGFnZTogU3RyaW5nLFxuICAgIGNvbnRleHQ6IE9iamVjdCwgICAgXG59KTtcbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbXCJkZWxldGVfYWxlcnRzXCJdKTtcblxuY29uc3QgaWQgPSBcIm1vZGFsLWRlbGV0ZS1hbGVydHNcIjtcbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5jb25zdCBtb2RhbF9pZCA9IHJlZihudWxsKTtcbmNvbnN0IGFsZXJ0X2luZm8gPSByZWYobnVsbCk7XG5jb25zdCBiZWdpbl90aW1lID0gcmVmKFwiXCIpO1xuY29uc3QgZW5kX3RpbWUgPSByZWYoXCJcIik7XG5jb25zdCBmaWx0ZXJzID0gcmVmKFtdKTtcblxub25Nb3VudGVkKCgpID0+IHtcbn0pO1xuXG5jb25zdCBzaG93ID0gKHN0YXR1cykgPT4ge1xuICAgIGJlZ2luX3RpbWUudmFsdWUgPSBudG9wbmdfdXRpbGl0eS5mcm9tX3V0Y190b19zZXJ2ZXJfZGF0ZV9mb3JtYXQoc3RhdHVzLmVwb2NoX2JlZ2luICogMTAwMCk7XG4gICAgZW5kX3RpbWUudmFsdWUgPSBudG9wbmdfdXRpbGl0eS5mcm9tX3V0Y190b19zZXJ2ZXJfZGF0ZV9mb3JtYXQoc3RhdHVzLmVwb2NoX2VuZCAqIDEwMDApO1xuICAgIGNvbnN0IHRhZ19vcGVyYXRvcl9sYWJlbF9kaWN0ID0gZmlsdGVyc01hbmFnZXIudGFnX29wZXJhdG9yX2xhYmVsX2RpY3Q7XG4gICAgZmlsdGVycy52YWx1ZSA9IHN0YXR1cy5maWx0ZXJzLm1hcCgoZikgPT4ge1xuXHRyZXR1cm4ge1xuXHQgICAgbGFiZWw6IGYubGFiZWwsXG5cdCAgICB2YWx1ZTogYCR7dGFnX29wZXJhdG9yX2xhYmVsX2RpY3RbZi5vcGVyYXRvcl19ICR7Zi52YWx1ZV9sYWJlbH1gLFxuXHR9O1xuICAgIH0pO1xuICAgIGxldCBtZXNzYWdlX2JvZHkgPSBfaTE4bihcInNob3dfYWxlcnRzLmNvbmZpcm1fZGVsZXRlX2FsZXJ0c1wiKTtcbiAgICBhbGVydF9pbmZvLnZhbHVlLnNob3cobWVzc2FnZV9ib2R5LCBcImFsZXJ0LWRhbmdlclwiKTtcbiAgICBtb2RhbF9pZC52YWx1ZS5zaG93KCk7XG59O1xuXG5hc3luYyBmdW5jdGlvbiBkZWxldGVfYWxlcnRzKCkge1xuICAgIGNvbnN0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9kZWxldGUvJHtwcm9wcy5wYWdlfS9hbGVydHMubHVhYDtcbiAgICBjb25zdCB1cmxfcGFyYW1zX29iaiA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX29iamVjdCgpO1xuICAgIGNvbnN0IHBhcmFtcyA9IHtcblx0Y3NyZjogcHJvcHMuY29udGV4dC5jc3JmLFxuXHQuLi51cmxfcGFyYW1zX29iaixcbiAgICB9O1xuICAgIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcG9zdF9yZXF1ZXN0KHVybCwgcGFyYW1zKTtcbiAgICBlbWl0KFwiZGVsZXRlX2FsZXJ0c1wiKTtcbiAgICBjbG9zZSgpO1xufVxuXG5jb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgICBtb2RhbF9pZC52YWx1ZS5jbG9zZSgpO1xufTtcblxuZGVmaW5lRXhwb3NlKHsgc2hvdywgY2xvc2UgfSk7XG5cbjwvc2NyaXB0PlxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbiAgICA8TmF2YmFyIGlkPVwibmF2YmFyXCIgOm1haW5fdGl0bGU9XCJjb250ZXh0Lm5hdmJhci5tYWluX3RpdGxlXCIgOmJhc2VfdXJsPVwiY29udGV4dC5uYXZiYXIuYmFzZV91cmxcIlxuICAgICAgICA6aGVscF9saW5rPVwiY29udGV4dC5uYXZiYXIuaGVscF9saW5rXCIgOml0ZW1zX3RhYmxlPVwiY29udGV4dC5uYXZiYXIuaXRlbXNfdGFibGVcIiBAY2xpY2tfaXRlbT1cImNsaWNrX25hdmJhcl9pdGVtXCI+XG4gICAgPC9OYXZiYXI+XG5cbiAgICA8ZGl2IGNsYXNzPSdyb3cnPlxuICAgICAgICA8ZGl2IGNsYXNzPSdjb2wtMTInPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1iLTJcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidy0xMDBcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzPVwicmFuZ2UtY29udGFpbmVyIGQtZmxleCBmbGV4LXdyYXBcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJyYW5nZS1waWNrZXIgZC1mbGV4IG0tYXV0byBmbGV4LXdyYXBcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QWxlcnRJbmZvIGlkPVwiYWxlcnRfaW5mb1wiIDpnbG9iYWw9XCJ0cnVlXCIgcmVmPVwiYWxlcnRfaW5mb1wiPjwvQWxlcnRJbmZvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxNb2RhbFRyYWZmaWNFeHRyYWN0aW9uIGlkPVwibW9kYWxfdHJhZmZpY19leHRyYWN0aW9uXCIgcmVmPVwibW9kYWxfdHJhZmZpY19leHRyYWN0aW9uXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9Nb2RhbFRyYWZmaWNFeHRyYWN0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxNb2RhbFNuYXBzaG90IHJlZj1cIm1vZGFsX3NuYXBzaG90XCIgOmNzcmY9XCJjb250ZXh0LmNzcmZcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L01vZGFsU25hcHNob3Q+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFJhbmdlUGlja2VyIHYtaWY9XCJtb3VudF9yYW5nZV9waWNrZXJcIiByZWY9XCJyYW5nZV9waWNrZXJcIiBpZD1cInJhbmdlX3BpY2tlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmJlZ2luPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWlmPVwicXVlcnlfcHJlc2V0cy5sZW5ndGggPiAwXCIgY2xhc3M9XCJtcy0xIG1lLTJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGNsYXNzPVwibWUtMiBmb3JtLXNlbGVjdFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9XCJzZWxlY3RlZF9xdWVyeV9wcmVzZXRcIiBAY2hhbmdlPVwidXBkYXRlX3NlbGVjdF9xdWVyeV9wcmVzZXRzKClcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtZm9yPVwiaXRlbSBpbiBxdWVyeV9wcmVzZXRzXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHYtaWY9XCJpdGVtLmJ1aWx0aW4gPT0gdHJ1ZVwiIDp2YWx1ZT1cIml0ZW1cIj57eyBpdGVtLm5hbWUgfX08L29wdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGdyb3VwIHYtaWY9XCJwYWdlICE9ICdhbmFseXNpcydcIiA6bGFiZWw9XCJfaTE4bigncXVlcmllcy5xdWVyaWVzJylcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cIml0ZW0gaW4gcXVlcnlfcHJlc2V0c1wiPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2LWlmPVwiIWl0ZW0uYnVpbHRpblwiIDp2YWx1ZT1cIml0ZW1cIj57eyBpdGVtLm5hbWUgfX08L29wdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb3B0Z3JvdXA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDpleHRyYV9yYW5nZV9idXR0b25zPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB2LWlmPVwiY29udGV4dC5zaG93X3Blcm1hbGlua1wiIGNsYXNzPVwiYnRuIGJ0bi1saW5rIGJ0bi1zbVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPVwiZ2V0X3Blcm1hbmVudF9saW5rXCIgOnRpdGxlPVwiX2kxOG4oJ2dyYXBocy5nZXRfcGVybWFuZW50X2xpbmsnKVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmPVwicGVybWFuZW50X2xpbmtfYnV0dG9uXCI+PGkgY2xhc3M9XCJmYXMgZmEtbGcgZmEtbGlua1wiPjwvaT48L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIHYtaWY9XCJjb250ZXh0LnNob3dfZG93bmxvYWRcIiBjbGFzcz1cImJ0biBidG4tbGluayBidG4tc21cIiBpZD1cImR0LWJ0bi1kb3dubG9hZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnRpdGxlPVwiX2kxOG4oJ2dyYXBocy5kb3dubG9hZF9yZWNvcmRzJylcIiA6aHJlZj1cImhyZWZfZG93bmxvYWRfcmVjb3Jkc1wiPjxpIGNsYXNzPVwiZmFzIGZhLWxnIGZhLWZpbGVcIj48L2k+PC9hPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB2LWlmPVwiY29udGV4dC5zaG93X3BjYXBfZG93bmxvYWRcIiBjbGFzcz1cImJ0biBidG4tbGluayBidG4tc21cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz1cInNob3dfbW9kYWxfdHJhZmZpY19leHRyYWN0aW9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6dGl0bGU9XCJfaTE4bigndHJhZmZpY19yZWNvcmRpbmcucGNhcF9kb3dubG9hZCcpXCI+PGlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJmYXMgZmEtbGcgZmEtZG93bmxvYWRcIj48L2k+PC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHYtaWY9XCJjb250ZXh0LmlzX250b3BfZW50ZXJwcmlzZV9tXCIgY2xhc3M9XCJidG4gYnRuLWxpbmsgYnRuLXNtXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9XCJzaG93X21vZGFsX3NuYXBzaG90XCIgOnRpdGxlPVwiX2kxOG4oJ2RhdGF0YWJsZS5tYW5hZ2Vfc25hcHNob3RzJylcIj48aVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImZhcyBmYS1sZyBmYS1jYW1lcmEtcmV0cm9cIj48L2k+PC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9SYW5nZVBpY2tlcj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzPSdjb2wtMTInPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQgY2FyZC1zaGFkb3dcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWlmPVwiY29udGV4dC5zaG93X2NoYXJ0XCIgY2xhc3M9XCJyb3dcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtMTIgbWItMlwiIGlkPVwiY2hhcnQtdnVlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQgaC0xMDAgb3ZlcmZsb3ctaGlkZGVuXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDaGFydCByZWY9XCJjaGFydFwiIGlkPVwiY2hhcnRfYWxlcnRfc3RhdHNcIiA6Y2hhcnRfdHlwZT1cImNoYXJ0X3R5cGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmJhc2VfdXJsX3JlcXVlc3Q9XCJjaGFydF9kYXRhX3VybFwiIDpyZWdpc3Rlcl9vbl9zdGF0dXNfY2hhbmdlPVwiZmFsc2VcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9DaGFydD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXHRcdFx0PGRpdj48L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUYWJsZVdpdGhDb25maWcgcmVmPVwidGFibGVfYWxlcnRzXCIgOnRhYmxlX2NvbmZpZ19pZD1cInRhYmxlX2NvbmZpZ19pZFwiIDp0YWJsZV9pZD1cInRhYmxlX2lkXCIgOmNzcmY9XCJjb250ZXh0LmNzcmZcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpmX21hcF9jb2x1bW5zPVwibWFwX3RhYmxlX2RlZl9jb2x1bW5zXCIgOmdldF9leHRyYV9wYXJhbXNfb2JqPVwiZ2V0X2V4dHJhX3BhcmFtc19vYmpcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpkaXNwbGF5X21lc3NhZ2U9XCJkaXNwbGF5X21lc3NhZ2VcIiA6bWVzc2FnZV90b19kaXNwbGF5PVwibWVzc2FnZV90b19kaXNwbGF5XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAbG9hZGVkPVwib25fdGFibGVfbG9hZGVkXCIgQGN1c3RvbV9ldmVudD1cIm9uX3RhYmxlX2N1c3RvbV9ldmVudFwiIEByb3dzX2xvYWRlZD1cInJvd3NfbG9hZGVkXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDpjdXN0b21faGVhZGVyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8RHJvcGRvd24gdi1mb3I9XCIodCwgdF9pbmRleCkgaW4gdG9wX3RhYmxlX2FycmF5XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpmX29uX29wZW49XCJnZXRfb3Blbl90b3BfdGFibGVfZHJvcGRvd24odCwgdF9pbmRleClcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnJlZj1cImVsID0+IHsgdG9wX3RhYmxlX2Ryb3Bkb3duX2FycmF5W3RfaW5kZXhdID0gZWwgfVwiPiA8IS0tIERyb3Bkb3duIGNvbHVtbnMgLS0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTcGlubmVyIDpzaG93PVwidC5zaG93X3NwaW5uZXJcIiBzaXplPVwiMXJlbVwiIGNsYXNzPVwibWUtMVwiPjwvU3Bpbm5lcj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cIm50b3BuZy10cnVuY2F0ZVwiIDp0aXRsZT1cInQudGl0bGVcIj57eyB0LmxhYmVsIH19PC9hPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6bWVudT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSB2LWZvcj1cIm9wdCBpbiB0Lm9wdGlvbnNcIiBzdHlsZT1cImN1cnNvcjpwb2ludGVyOyBkaXNwbGF5OiBibG9jaztcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9XCJhZGRfdG9wX3RhYmxlX2ZpbHRlcihvcHQsICRldmVudClcIiBjbGFzcz1cIm50b3BuZy10cnVuY2F0ZSB0YWctZmlsdGVyIFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDp0aXRsZT1cIm9wdC52YWx1ZVwiPnt7IG9wdC5sYWJlbCB9fTwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvRHJvcGRvd24+IDwhLS0gRHJvcGRvd24gY29sdW1ucyAtLT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPiA8IS0tIGN1c3RvbV9oZWFkZXIgLS0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1RhYmxlV2l0aENvbmZpZz5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+IDwhLS0gY2FyZCBib2R5IC0tPlxuXG4gICAgICAgICAgICAgICAgPGRpdiB2LXNob3c9XCJwYWdlICE9ICdhbGwnXCIgY2xhc3M9XCJjYXJkLWZvb3RlclwiPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHYtaWY9XCJjb250ZXh0LnNob3dfYWNrbm93bGVkZ2VfYWxsXCIgQGNsaWNrPVwic2hvd19tb2RhbF9hY2tub3dsZWRnZV9hbGVydHNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJidG4gYnRuLXByaW1hcnkgbWUtMVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEgZmEtdXNlci1jaGVja1wiPjwvaT4ge3tfaTE4bihcImFja25vd2xlZGdlX2FsZXJ0c1wiKX19XG4gICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHYtaWY9XCJjb250ZXh0LnNob3dfZGVsZXRlX2FsbFwiIEBjbGljaz1cInNob3dfbW9kYWxfZGVsZXRlX2FsZXJ0c1wiIFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJidG4gYnRuLWRhbmdlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEgZmEtdHJhc2hcIj48L2k+IHt7X2kxOG4oXCJkZWxldGVfYWxlcnRzXCIpfX1cbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPC9kaXY+IDwhLS0gY2FyZCBmb290ZXIgLS0+XG4gICAgICAgICAgICA8L2Rpdj4gPCEtLSBjYXJkLXNoYWRvdyAtLT5cblxuICAgICAgICA8L2Rpdj4gPCEtLSBkaXYgY29sIC0tPlxuICAgICAgICA8Tm90ZUxpc3QgOm5vdGVfbGlzdD1cIm5vdGVfbGlzdFwiPjwvTm90ZUxpc3Q+XG4gICAgPC9kaXY+IDwhLS0gZGl2IHJvdyAtLT5cblxuICAgIDxNb2RhbEFja25vd2xlZGdlQWxlcnQgcmVmPVwibW9kYWxfYWNrbm93bGVkZ2VcIiA6Y29udGV4dD1cImNvbnRleHRcIiA6cGFnZT1cInBhZ2VcIiBAYWNrbm93bGVkZ2U9XCJyZWZyZXNoX3BhZ2VfY29tcG9uZW50c1wiPlxuICAgIDwvTW9kYWxBY2tub3dsZWRnZUFsZXJ0PlxuXG4gICAgPE1vZGFsRGVsZXRlQWxlcnQgcmVmPVwibW9kYWxfZGVsZXRlXCIgOmNvbnRleHQ9XCJjb250ZXh0XCIgOnBhZ2U9XCJwYWdlXCIgQGRlbGV0ZV9hbGVydD1cInJlZnJlc2hfcGFnZV9jb21wb25lbnRzXCI+PC9Nb2RhbERlbGV0ZUFsZXJ0PlxuXG4gICAgPE1vZGFsQWNrbm93bGVkZ2VBbGVydHMgcmVmPVwibW9kYWxfYWNrbm93bGVkZ2VfYWxlcnRzXCIgOmNvbnRleHQ9XCJjb250ZXh0XCIgOnBhZ2U9XCJwYWdlXCIgQGFja25vd2xlZGdlX2FsZXJ0cz1cInJlZnJlc2hfcGFnZV9jb21wb25lbnRzXCI+XG4gICAgPC9Nb2RhbEFja25vd2xlZGdlQWxlcnRzPiAgICBcblxuICAgIDxNb2RhbERlbGV0ZUFsZXJ0cyByZWY9XCJtb2RhbF9kZWxldGVfYWxlcnRzXCIgOmNvbnRleHQ9XCJjb250ZXh0XCIgOnBhZ2U9XCJwYWdlXCIgQGRlbGV0ZV9hbGVydHM9XCJyZWZyZXNoX3BhZ2VfY29tcG9uZW50c1wiPlxuICAgIDwvTW9kYWxEZWxldGVBbGVydHM+ICAgIFxuXG4gICAgPE1vZGFsQWxlcnRzRmlsdGVyIDphbGVydD1cImN1cnJlbnRfYWxlcnRcIiA6cGFnZT1cInBhZ2VcIiBAZXhjbHVkZT1cImFkZF9leGNsdWRlXCIgcmVmPVwibW9kYWxfYWxlcnRzX2ZpbHRlclwiPlxuICAgIDwvTW9kYWxBbGVydHNGaWx0ZXI+XG5cblxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBvbkJlZm9yZU1vdW50LGNvbXB1dGVkLCBuZXh0VGljayB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IG50b3BuZ19zdGF0dXNfbWFuYWdlciwgbnRvcG5nX2N1c3RvbV9ldmVudHMsIG50b3BuZ191cmxfbWFuYWdlciwgbnRvcG5nX3V0aWxpdHksIG50b3BuZ19zeW5jIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXNcIjtcbmltcG9ydCBOdG9wVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9udG9wLXV0aWxzXCI7XG5pbXBvcnQgeyBudG9wQ2hhcnRBcGV4IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvbnRvcENoYXJ0QXBleC5qc1wiO1xuaW1wb3J0IHsgRGF0YVRhYmxlUmVuZGVycyB9IGZyb20gXCIuLi91dGlsaXRpZXMvZGF0YXRhYmxlL3NwcnltZWRpYS1kYXRhdGFibGUtdXRpbHMuanNcIjtcbmltcG9ydCBUYWJsZVV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvdGFibGUtdXRpbHNcIjtcbmltcG9ydCBmaWx0ZXJzTWFuYWdlciBmcm9tIFwiLi4vdXRpbGl0aWVzL2ZpbHRlcnMtbWFuYWdlci5qc1wiO1xuXG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdFNlYXJjaCB9IGZyb20gXCIuL3NlbGVjdC1zZWFyY2gudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE5hdmJhciB9IGZyb20gXCIuL3BhZ2UtbmF2YmFyLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBBbGVydEluZm8gfSBmcm9tIFwiLi9hbGVydC1pbmZvLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBDaGFydCB9IGZyb20gXCIuL2NoYXJ0LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBSYW5nZVBpY2tlciB9IGZyb20gXCIuL3JhbmdlLXBpY2tlci52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgVGFibGVXaXRoQ29uZmlnIH0gZnJvbSBcIi4vdGFibGUtd2l0aC1jb25maWcudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIERyb3Bkb3duIH0gZnJvbSBcIi4vZHJvcGRvd24udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNwaW5uZXIgfSBmcm9tIFwiLi9zcGlubmVyLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBOb3RlTGlzdCB9IGZyb20gXCIuL25vdGUtbGlzdC52dWVcIjtcblxuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbFRyYWZmaWNFeHRyYWN0aW9uIH0gZnJvbSBcIi4vbW9kYWwtdHJhZmZpYy1leHRyYWN0aW9uLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbFNuYXBzaG90IH0gZnJvbSBcIi4vbW9kYWwtc25hcHNob3QudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsQWxlcnRzRmlsdGVyIH0gZnJvbSBcIi4vbW9kYWwtYWxlcnRzLWZpbHRlci52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxBY2tub3dsZWRnZUFsZXJ0IH0gZnJvbSBcIi4vbW9kYWwtYWNrbm93bGVkZ2UtYWxlcnQudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRGVsZXRlQWxlcnQgfSBmcm9tIFwiLi9tb2RhbC1kZWxldGUtYWxlcnQudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsQWNrbm93bGVkZ2VBbGVydHMgfSBmcm9tIFwiLi9tb2RhbC1hY2tub3dsZWRnZS1hbGVydHMudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRGVsZXRlQWxlcnRzIH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLWFsZXJ0cy52dWVcIjtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gICAgY29udGV4dDogT2JqZWN0LFxufSk7XG5cbmNvbnN0IGFsZXJ0X2luZm8gPSByZWYobnVsbCk7XG5jb25zdCBjaGFydCA9IHJlZihudWxsKTtcbmNvbnN0IHRhYmxlX2FsZXJ0cyA9IHJlZihudWxsKTtcbmNvbnN0IG1vZGFsX3RyYWZmaWNfZXh0cmFjdGlvbiA9IHJlZihudWxsKTtcbmNvbnN0IG1vZGFsX3NuYXBzaG90ID0gcmVmKG51bGwpO1xuY29uc3QgcmFuZ2VfcGlja2VyID0gcmVmKG51bGwpO1xuY29uc3QgcGVybWFuZW50X2xpbmtfYnV0dG9uID0gcmVmKG51bGwpO1xuY29uc3QgbW9kYWxfYWxlcnRzX2ZpbHRlciA9IHJlZihudWxsKTtcbmNvbnN0IG1vZGFsX2Fja25vd2xlZGdlID0gcmVmKG51bGwpO1xuY29uc3QgbW9kYWxfZGVsZXRlID0gcmVmKG51bGwpO1xuY29uc3QgbW9kYWxfYWNrbm93bGVkZ2VfYWxlcnRzID0gcmVmKG51bGwpO1xuY29uc3QgbW9kYWxfZGVsZXRlX2FsZXJ0cyA9IHJlZihudWxsKTtcbmNvbnN0IGNvdW50X3BhZ2VfY29tcG9uZW50c19yZWxvYWRlZCA9IHJlZigwKTtcbmNvbnN0IGRpc3BsYXlfbWVzc2FnZSA9IHJlZihmYWxzZSk7XG5jb25zdCBtZXNzYWdlX3RvX2Rpc3BsYXkgPSByZWYoJycpO1xuXG5jb25zdCBjdXJyZW50X2FsZXJ0ID0gcmVmKG51bGwpO1xuY29uc3QgZGVmYXVsdF9pZmlkID0gcHJvcHMuY29udGV4dC5pZmlkO1xubGV0IHBhZ2U7XG5jb25zdCB0YWJsZV9jb25maWdfaWQgPSByZWYoXCJcIik7XG5jb25zdCB0YWJsZV9pZCA9IHJlZihcIlwiKTtcbmxldCBjaGFydF9kYXRhX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2RiL3RzLmx1YWA7XG5jb25zdCBjaGFydF90eXBlID0gbnRvcENoYXJ0QXBleC50eXBlQ2hhcnQuVFNfQ09MVU1OO1xuY29uc3QgdG9wX3RhYmxlX2FycmF5ID0gcmVmKFtdKTtcbmNvbnN0IHRvcF90YWJsZV9kcm9wZG93bl9hcnJheSA9IHJlZihbXSk7XG5jb25zdCBub3RlX2xpc3QgPSByZWYoW19pMThuKCdzaG93X2FsZXJ0cy5hbGVydHNfaW5mbycpXSk7XG5jb25zdCBzZWxlY3RlZF9xdWVyeV9wcmVzZXQgPSByZWYoe30pO1xuY29uc3QgcXVlcnlfcHJlc2V0cyA9IHJlZihbXSk7XG5jb25zdCBtb3VudF9yYW5nZV9waWNrZXIgPSByZWYoZmFsc2UpO1xuXG5jb25zdCBocmVmX2Rvd25sb2FkX3JlY29yZHMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgaWYgKCFwcm9wcy5jb250ZXh0LnNob3dfY2hhcnQgfHwgdGFibGVfYWxlcnRzLnZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGBgO1xuICAgIH1cbiAgICAvLyBhZGQgaW1wb3NzaWJsZSBpZiBvbiByZWYgdmFyaWFibGUgdG8gcmVsb2FkIHRoaXMgZXhwcmVzc2lvbiBldmVyeSB0aW1lIGNvdW50X3BhZ2VfY29tcG9uZW50c19yZWxvYWRlZC52YWx1ZSBjaGFuZ2VcbiAgICBpZiAoY291bnRfcGFnZV9jb21wb25lbnRzX3JlbG9hZGVkLnZhbHVlIDwgMCkgeyB0aHJvdyBcIm5ldmVyIHJ1blwiOyB9XG4gICAgY29uc3QgZG93bmxvYWRfZW5kcG9pbnQgPSBwcm9wcy5jb250ZXh0LmRvd25sb2FkLmVuZHBvaW50O1xuICAgIGxldCBwYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9vYmplY3QoKTtcbiAgICBsZXQgY29sdW1ucyA9IHRhYmxlX2FsZXJ0cy52YWx1ZS5nZXRfY29sdW1uc19kZWZzKCk7XG4gICAgbGV0IHZpc2libGVfY29sdW1ucyA9IGNvbHVtbnMuZmlsdGVyKChjKSA9PiBjLnZpc2libGUpLm1hcCgoYykgPT4gYy5pZCkuam9pbihcIixcIik7XG4gICAgcGFyYW1zLmZvcm1hdCA9IFwidHh0XCI7XG4gICAgcGFyYW1zLnZpc2libGVfY29sdW1ucyA9IHZpc2libGVfY29sdW1ucztcbiAgICBjb25zdCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKHBhcmFtcyk7XG4gICAgcmV0dXJuIGAke2xvY2F0aW9uLm9yaWdpbn0vJHtkb3dubG9hZF9lbmRwb2ludH0/JHt1cmxfcGFyYW1zfWA7XG59KTtcblxub25CZWZvcmVNb3VudChhc3luYyAoKSA9PiB7XG4gICAgbWVzc2FnZV90b19kaXNwbGF5LnZhbHVlID0gYDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1zdWNjZXNzIGFsZXJ0LWRpc21pc3NhYmxlXCI+PHNwYW4+JHtpMThuKCdub19hbGVydHNfcmVxdWlyZV9hdHRlbnRpb24nKX08L3NwYW4+PC9kaXY+YDtcbiAgICBpZiAocHJvcHMuY29udGV4dC5pc192YSkge1xuICAgICAgICBudG9wbmdfdXRpbGl0eS5jaGVja19hbmRfc2V0X2RlZmF1bHRfdGltZV9pbnRlcnZhbChcImRheVwiKTtcbiAgICB9XG4gICAgaW5pdF9wYXJhbXMoKTtcbiAgICBpbml0X3VybF9wYXJhbXMoKTtcbiAgICBhd2FpdCBzZXRfcXVlcnlfcHJlc2V0cygpO1xuICAgIG1vdW50X3JhbmdlX3BpY2tlci52YWx1ZSA9IHRydWU7XG4gICAgYXdhaXQgbG9hZF90b3BfdGFibGVfYXJyYXlfb3ZlcnZpZXcoKTtcbn0pO1xuXG5vbk1vdW50ZWQoYXN5bmMgKCkgPT4ge1xuICAgIHJlZ2lzdGVyX2NvbXBvbmVudHNfb25fc3RhdHVzX3VwZGF0ZSgpO1xufSk7XG5cbmFzeW5jIGZ1bmN0aW9uIGluaXRfcGFyYW1zKCkge1xuICAgIHBhZ2UgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInBhZ2VcIik7XG4gICAgY29uc3Qgc3RhdHVzID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJzdGF0dXNcIik7XG4gICAgaWYgKHBhZ2UgPT0gbnVsbCkgeyBwYWdlID0gXCJhbGxcIjsgfVxuICAgIGlmIChzdGF0dXMgPT0gJ2VuZ2FnZWQnICYmIHBhZ2UgPT0gXCJmbG93XCIpIHsgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKFwic3RhdHVzXCIsIFwiaGlzdG9yaWNhbFwiKTsgfVxuICAgIGNoYXJ0X2RhdGFfdXJsID0gKHBhZ2UgPT0gXCJzbm1wX2RldmljZVwiKSA/IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L3NubXAvZGV2aWNlL2FsZXJ0L3RzLmx1YWAgOiBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0LyR7cGFnZX0vYWxlcnQvdHMubHVhYDtcbiAgICBzZWxlY3RlZF9xdWVyeV9wcmVzZXQudmFsdWUgPSB7XG4gICAgICAgIHZhbHVlOiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInF1ZXJ5X3ByZXNldFwiKSxcbiAgICAgICAgY291bnQ6IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiY291bnRcIiksXG4gICAgfTtcbiAgICBpZiAoc2VsZWN0ZWRfcXVlcnlfcHJlc2V0LnZhbHVlLnZhbHVlID09IG51bGwpIHtcbiAgICAgICAgc2VsZWN0ZWRfcXVlcnlfcHJlc2V0LnZhbHVlLnZhbHVlID0gXCJcIjtcbiAgICB9XG4gICAgdGFibGVfY29uZmlnX2lkLnZhbHVlID0gYGFsZXJ0XyR7cGFnZX1gO1xuICAgIHRhYmxlX2lkLnZhbHVlID0gYCR7dGFibGVfY29uZmlnX2lkLnZhbHVlfV8ke3NlbGVjdGVkX3F1ZXJ5X3ByZXNldC52YWx1ZS52YWx1ZX1gOyAgICBcbn1cblxuZnVuY3Rpb24gaW5pdF91cmxfcGFyYW1zKCkge1xuICAgIGlmIChudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImlmaWRcIikgPT0gbnVsbCkge1xuICAgICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoXCJpZmlkXCIsIGRlZmF1bHRfaWZpZCk7XG4gICAgfVxuICAgIGlmIChudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImVwb2NoX2JlZ2luXCIpID09IG51bGxcbiAgICAgICAgfHwgbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJlcG9jaF9lbmRcIikgPT0gbnVsbCkge1xuICAgICAgICBsZXQgZGVmYXVsdF9lcG9jaF9iZWdpbiA9IE51bWJlci5wYXJzZUludCgoRGF0ZS5ub3coKSAtIDEwMDAgKiAzMCAqIDYwKSAvIDEwMDApO1xuICAgICAgICBsZXQgZGVmYXVsdF9lcG9jaF9lbmQgPSBOdW1iZXIucGFyc2VJbnQoRGF0ZS5ub3coKSAvIDEwMDApO1xuICAgICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoXCJlcG9jaF9iZWdpblwiLCBkZWZhdWx0X2Vwb2NoX2JlZ2luKTtcbiAgICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKFwiZXBvY2hfZW5kXCIsIGRlZmF1bHRfZXBvY2hfZW5kKTtcbiAgICB9XG4gICAgaWYgKG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwicGFnZVwiKSA9PSBcImZsb3dcIlxuICAgICAgICAmJiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInN0YXR1c1wiKSA9PSBcImVuZ2FnZWRcIikge1xuICAgICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoXCJzdGF0dXNcIiwgXCJoaXN0b3JpY2FsXCIpO1xuICAgIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gc2V0X3F1ZXJ5X3ByZXNldHMoKSB7XG4gICAgaWYgKCFwcm9wcy5jb250ZXh0LmlzX250b3BfZW50ZXJwcmlzZV9sIHx8IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwic3RhdHVzXCIpID09IFwiZW5nYWdlZFwiKSB7XG5cdG50b3BuZ19zeW5jLnJlYWR5KGdldF9xdWVyeV9wcmVzZXRzX3N5bmNfa2V5KCkpO1xuXHRyZXR1cm47XG4gICAgfVxuICAgIGxldCB1cmxfcmVxdWVzdCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2FsZXJ0L3ByZXNldC9jb25zdHMubHVhP3BhZ2U9JHtwYWdlfWA7XG4gICAgbGV0IHJlcyA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmxfcmVxdWVzdCk7XG4gICAgaWYgKHJlcyA9PSBudWxsIHx8IHJlcy5sZW5ndGggPT0gMCkge1xuXHRxdWVyeV9wcmVzZXRzLnZhbHVlID0gW107XG5cdG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcInF1ZXJ5X3ByZXNldFwiLCBcIlwiKTtcblx0bnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKFwiY291bnRcIiwgXCJcIik7XG5cdG50b3BuZ19zeW5jLnJlYWR5KGdldF9xdWVyeV9wcmVzZXRzX3N5bmNfa2V5KCkpO1xuXHRyZXR1cm47XG4gICAgfVxuICAgIFxuICAgIHF1ZXJ5X3ByZXNldHMudmFsdWUgPSByZXNbMF0ubGlzdC5tYXAoKGVsKSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogZWwuaWQsXG4gICAgICAgICAgICBuYW1lOiBlbC5uYW1lLFxuICAgICAgICAgICAgY291bnQ6IGVsLmNvdW50LFxuICAgICAgICAgICAgYnVpbHRpbjogdHJ1ZSxcbiAgICAgICAgfTtcbiAgICB9KTtcbiAgICBpZiAocmVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgcmVzWzFdLmxpc3QuZm9yRWFjaCgoZWwpID0+IHtcbiAgICAgICAgICAgIGxldCBxdWVyeSA9IHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogZWwuaWQsXG4gICAgICAgICAgICAgICAgbmFtZTogZWwubmFtZSxcbiAgICAgICAgICAgICAgICBjb3VudDogZWwuY291bnQsXG4gICAgICAgICAgICAgICAgaXNfcHJlc2V0OiB0cnVlLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHF1ZXJ5X3ByZXNldHMudmFsdWUucHVzaChxdWVyeSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoc2VsZWN0ZWRfcXVlcnlfcHJlc2V0LnZhbHVlID09IG51bGwgfHwgc2VsZWN0ZWRfcXVlcnlfcHJlc2V0LnZhbHVlLnZhbHVlID09IFwiXCIpIHtcbiAgICAgICAgc2VsZWN0ZWRfcXVlcnlfcHJlc2V0LnZhbHVlID0gcXVlcnlfcHJlc2V0cy52YWx1ZVswXTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgcSA9IHF1ZXJ5X3ByZXNldHMudmFsdWUuZmluZCgoaSkgPT4gaS52YWx1ZSA9PSBzZWxlY3RlZF9xdWVyeV9wcmVzZXQudmFsdWUudmFsdWUpO1xuICAgICAgICBzZWxlY3RlZF9xdWVyeV9wcmVzZXQudmFsdWUgPSBxIHx8IHF1ZXJ5X3ByZXNldHMudmFsdWVbMF07XG4gICAgfVxuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcInF1ZXJ5X3ByZXNldFwiLCBzZWxlY3RlZF9xdWVyeV9wcmVzZXQudmFsdWUudmFsdWUpO1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcImNvdW50XCIsIHNlbGVjdGVkX3F1ZXJ5X3ByZXNldC52YWx1ZS5jb3VudCk7XG4gICAgbnRvcG5nX3N5bmMucmVhZHkoZ2V0X3F1ZXJ5X3ByZXNldHNfc3luY19rZXkoKSk7XG59XG5cbmNvbnN0IHBhZ2VfaWQgPSBcInBhZ2UtYWxlcnQtc3RhdHNcIjtcbmZ1bmN0aW9uIGdldF9xdWVyeV9wcmVzZXRzX3N5bmNfa2V5KCkge1xuICAgIHJldHVybiBgJHtwYWdlX2lkfV9xdWVyeV9wcmVzZXRzYDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gbG9hZF90b3BfdGFibGVfYXJyYXlfb3ZlcnZpZXcoYWN0aW9uKSB7XG4gICAgaWYgKHByb3BzLmNvbnRleHQuc2hvd19jYXJkcyAhPSB0cnVlIHx8IHNlbGVjdGVkX3F1ZXJ5X3ByZXNldC52YWx1ZS5pc19wcmVzZXQgPT0gdHJ1ZSkgeyByZXR1cm47IH1cbiAgICB0b3BfdGFibGVfYXJyYXkudmFsdWUgPSBhd2FpdCBsb2FkX3RvcF90YWJsZV9hcnJheShcIm92ZXJ2aWV3XCIpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBsb2FkX3RvcF90YWJsZV9kZXRhaWxzKHRvcCwgdG9wX2luZGV4KSB7XG4gICAgdG9wLnNob3dfc3Bpbm5lciA9IHRydWU7XG4gICAgYXdhaXQgbmV4dFRpY2soKTtcbiAgICBpZiAodG9wLmRhdGFfbG9hZGVkID09IGZhbHNlKSB7XG4gICAgICAgIGxldCBuZXdfdG9wX2FycmF5ID0gYXdhaXQgbG9hZF90b3BfdGFibGVfYXJyYXkodG9wLmlkLCB0b3ApO1xuICAgICAgICB0b3Aub3B0aW9ucyA9IG5ld190b3BfYXJyYXkuZmluZCgodCkgPT4gdC5pZCA9PSB0b3AuaWQpLm9wdGlvbnM7XG4gICAgICAgIGF3YWl0IG5leHRUaWNrKCk7XG4gICAgICAgIGxldCBkcm9wZG93biA9IHRvcF90YWJsZV9kcm9wZG93bl9hcnJheS52YWx1ZVt0b3BfaW5kZXhdO1xuICAgICAgICBkcm9wZG93bi5sb2FkX21lbnUoKTtcbiAgICB9XG4gICAgdG9wLnNob3dfc3Bpbm5lciA9IGZhbHNlO1xufVxuXG5hc3luYyBmdW5jdGlvbiBsb2FkX3RvcF90YWJsZV9hcnJheShhY3Rpb24sIHRvcCkge1xuICAgIC8vIHRvcF90YWJsZS52YWx1ZSA9IFtdO1xuICAgIGNvbnN0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9wYXJhbXMoKTtcbiAgICBjb25zdCB1cmwgPSBgJHtwcm9wcy5jb250ZXh0LmVuZHBvaW50X2NhcmRzfT8ke3VybF9wYXJhbXN9JmFjdGlvbj0ke2FjdGlvbn1gO1xuICAgIGxldCByZXMgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsKTtcbiAgICByZXR1cm4gcmVzLm1hcCgodCkgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaWQ6IHQubmFtZSxcbiAgICAgICAgICAgIGxhYmVsOiB0LmxhYmVsLFxuICAgICAgICAgICAgdGl0bGU6IHQudG9vbHRpcCxcbiAgICAgICAgICAgIHNob3dfc3Bpbm5lcjogZmFsc2UsXG4gICAgICAgICAgICBkYXRhX2xvYWRlZDogYWN0aW9uICE9ICdvdmVydmlldycsXG4gICAgICAgICAgICBvcHRpb25zOiB0LnZhbHVlLFxuICAgICAgICB9O1xuICAgIH0pO1xufVxuXG5jb25zdCBnZXRfb3Blbl90b3BfdGFibGVfZHJvcGRvd24gPSAodG9wLCB0b3BfaW5kZXgpID0+IHtcbiAgICByZXR1cm4gKGQpID0+IHtcbiAgICAgICAgbG9hZF90b3BfdGFibGVfZGV0YWlscyh0b3AsIHRvcF9pbmRleCk7XG4gICAgfTtcbn07XG5cbmFzeW5jIGZ1bmN0aW9uIHJlZ2lzdGVyX2NvbXBvbmVudHNfb25fc3RhdHVzX3VwZGF0ZSgpIHtcbiAgICBhd2FpdCBudG9wbmdfc3luYy5vbl9yZWFkeShcInJhbmdlX3BpY2tlclwiKTtcbiAgICAvL2lmIChzaG93X2NoYXJ0KSB7ICAgICAgXG4gICAgY2hhcnQudmFsdWUucmVnaXN0ZXJfc3RhdHVzKCk7XG4gICAgLy99XG4gICAgLy91cGRhdGVEb3dubG9hZEJ1dHRvbigpO1xuICAgIG50b3BuZ19zdGF0dXNfbWFuYWdlci5vbl9zdGF0dXNfY2hhbmdlKHBhZ2UsIChuZXdfc3RhdHVzKSA9PiB7XG4gICAgICAgIGxldCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfcGFyYW1zKCk7XG4gICAgICAgIHRhYmxlX2FsZXJ0cy52YWx1ZS5yZWZyZXNoX3RhYmxlKCk7XG4gICAgICAgIGxvYWRfdG9wX3RhYmxlX2FycmF5X292ZXJ2aWV3KCk7XG4gICAgfSwgZmFsc2UpO1xufVxuXG5mdW5jdGlvbiBvbl90YWJsZV9sb2FkZWQoKSB7XG4gICAgcmVnaXN0ZXJfdGFibGVfYWxlcnRzX2V2ZW50cygpO1xufVxuXG5mdW5jdGlvbiByZWdpc3Rlcl90YWJsZV9hbGVydHNfZXZlbnRzKCkge1xuICAgIGxldCBqcXVlcnlfdGFibGVfYWxlcnRzID0gJChgIyR7dGFibGVfaWQudmFsdWV9YCk7XG4gICAganF1ZXJ5X3RhYmxlX2FsZXJ0cy5vbignY2xpY2snLCBgYS50YWctZmlsdGVyYCwgYXN5bmMgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgYWRkX3RhYmxlX3Jvd19maWx0ZXIoZSwgJCh0aGlzKSk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZV9zZWxlY3RfcXVlcnlfcHJlc2V0cygpIHtcbiAgICBsZXQgdXJsID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfcGFyYW1zKCk7XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKFwicXVlcnlfcHJlc2V0XCIsIHNlbGVjdGVkX3F1ZXJ5X3ByZXNldC52YWx1ZS52YWx1ZSk7XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKFwiY291bnRcIiwgc2VsZWN0ZWRfcXVlcnlfcHJlc2V0LnZhbHVlLmNvdW50KTtcbiAgICBudG9wbmdfdXJsX21hbmFnZXIucmVsb2FkX3VybCgpO1xufVxuXG5jb25zdCBtYXBfdGFibGVfZGVmX2NvbHVtbnMgPSBhc3luYyAoY29sdW1ucykgPT4ge1xuICAgIGF3YWl0IG50b3BuZ19zeW5jLm9uX3JlYWR5KGdldF9xdWVyeV9wcmVzZXRzX3N5bmNfa2V5KCkpO1xuICAgIGxldCBtYXBfY29sdW1ucyA9IHtcbiAgICAgICAgXCJsN19wcm90b1wiOiAocHJvdG8sIHJvdykgPT4ge1xuICAgICAgICAgICAgbGV0IGNvbmZpZGVuY2UgPSBcIlwiO1xuICAgICAgICAgICAgaWYgKHByb3RvLmNvbmZpZGVuY2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRpdGxlID0gcHJvdG8uY29uZmlkZW5jZTtcbiAgICAgICAgICAgICAgICAodGl0bGUgPT0gXCJEUElcIikgPyBjb25maWRlbmNlID0gYDxzcGFuIGNsYXNzPVwiYmFkZ2UgYmctc3VjY2Vzc1wiIHRpdGxlPVwiJHt0aXRsZX1cIj4ke3RpdGxlfTwvc3Bhbj5gIDogY29uZmlkZW5jZSA9IGA8c3BhbiBjbGFzcz1cImJhZGdlIGJnLXdhcm5pbmdcIiB0aXRsZT1cIiR7dGl0bGV9XCI+JHt0aXRsZX08L3NwYW4+YFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIERhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplKCdsN3Byb3RvJywgcHJvdG8udmFsdWUsIHByb3RvLmxhYmVsKSArIFwiIFwiICsgYCR7Y29uZmlkZW5jZX1gO1xuICAgICAgICB9LFxuICAgICAgICBcImluZm9cIjogKGluZm8sIHJvdykgPT4ge1xuICAgICAgICAgICAgbGV0IGNvcHlfYnV0dG9uID0gJydcbiAgICAgICAgICAgIGlmKGluZm8udmFsdWUpIHtcbiAgICAgICAgICAgICAgICBjb3B5X2J1dHRvbiA9IGA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1saWdodCBidG4tc20gYm9yZGVyIG1zLTFcIiBkYXRhLXBsYWNlbWVudD1cImJvdHRvbVwiIG9uY2xpY2s9XCJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dEFyZWEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZXh0YXJlYScpO1xuICAgICAgICAgICAgICAgICAgICB0ZXh0QXJlYS52YWx1ZSA9ICcke2luZm8udmFsdWV9JzsgICAgXG4gICAgICAgICAgICAgICAgICAgIHRleHRBcmVhLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFyZWEuc3R5bGUubGVmdCA9ICctOTk5OTk5cHgnOyAgICBcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5wcmVwZW5kKHRleHRBcmVhKTtcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFyZWEuc2VsZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmV4ZWNDb21tYW5kKCdjb3B5Jyk7XCJcbiAgICAgICAgICAgICAgICAgICAgPjxpIGNsYXNzPVwiZmFzIGZhLWNvcHlcIj48L2k+PC9idXR0b24+YFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGAke2NvcHlfYnV0dG9ufSAke0RhdGFUYWJsZVJlbmRlcnMuZmlsdGVyaXplKCdpbmZvJywgaW5mby52YWx1ZSwgaW5mby5sYWJlbCl9YDtcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIGxldCBzZXRfcXVlcnlfcHJlc2V0X2NvbHVtbnMgPSBzZWxlY3RlZF9xdWVyeV9wcmVzZXQudmFsdWUuaXNfcHJlc2V0ICYmIGNvbHVtbnMubGVuZ3RoID4gMDtcbiAgICBpZiAoc2V0X3F1ZXJ5X3ByZXNldF9jb2x1bW5zKSB7XG4gICAgICAgIC8vIGFkZCBhY3Rpb24gYnV0dG9uIHRoYXQgaXMgdGhlIGZpcnN0IGJ1dHRvblxuICAgICAgICBjb2x1bW5zID0gW2NvbHVtbnNbMF1dLmNvbmNhdChwcm9wcy5jb250ZXh0LmNvbHVtbnNfZGVmKTtcbiAgICB9XG4gICAgY29sdW1ucy5mb3JFYWNoKChjKSA9PiB7XG4gICAgICAgIGMucmVuZGVyX2Z1bmMgPSBtYXBfY29sdW1uc1tjLmRhdGFfZmllbGRdO1xuXHRcbiAgICAgICAgaWYgKGMuaWQgPT0gXCJhY3Rpb25zXCIpIHtcblx0ICAgIGlmIChzZXRfcXVlcnlfcHJlc2V0X2NvbHVtbnMgPT0gdHJ1ZSkge1xuXHRcdGMuYnV0dG9uX2RlZl9hcnJheSA9IFtcblx0XHQgICAge1xuXHRcdFx0XCJpZFwiOiBcImV4cGFuZFwiLFxuXHRcdFx0XCJpY29uXCI6IFwiZmFzIGZhIGZhLXNlYXJjaC1wbHVzXCIsXG5cdFx0XHRcImNsYXNzXCI6W1wibGluay1idXR0b25cIl0sXG5cdFx0XHRcInRpdGxlX2kxOG5cIjogXCJkYl9zZWFyY2guZXhwYW5kX2J1dHRvblwiLFxuXHRcdFx0XCJldmVudF9pZFwiOiBcImNsaWNrX2J1dHRvbl9leHBhbmRcIlxuXHRcdCAgICB9LFxuXHRcdF07XG5cdFx0cmV0dXJuO1xuXHQgICAgfVxuICAgICAgICAgICAgY29uc3QgdmlzaWJsZV9kaWN0ID0ge1xuICAgICAgICAgICAgICAgIHNubXBfaW5mbzogcHJvcHMuY29udGV4dC5hY3Rpb25zLnNob3dfc25tcF9pbmZvLFxuICAgICAgICAgICAgICAgIGluZm86IHByb3BzLmNvbnRleHQuYWN0aW9ucy5zaG93X2luZm8sXG4gICAgICAgICAgICAgICAgaGlzdG9yaWNhbF9kYXRhOiBwcm9wcy5jb250ZXh0LmFjdGlvbnMuc2hvd19oaXN0b3JpY2FsLFxuICAgICAgICAgICAgICAgIGFja25vd2xlZGdlOiBwcm9wcy5jb250ZXh0LmFjdGlvbnMuc2hvd19hY2tub3dsZWRnZSxcbiAgICAgICAgICAgICAgICBkaXNhYmxlOiBwcm9wcy5jb250ZXh0LmFjdGlvbnMuc2hvd19kaXNhYmxlLFxuICAgICAgICAgICAgICAgIHNldHRpbmdzOiBwcm9wcy5jb250ZXh0LmFjdGlvbnMuc2hvd19zZXR0aW5ncyxcbiAgICAgICAgICAgICAgICByZW1vdmU6IHByb3BzLmNvbnRleHQuYWN0aW9ucy5zaG93X2RlbGV0ZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjLmJ1dHRvbl9kZWZfYXJyYXkuZm9yRWFjaCgoYikgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdmlzaWJsZV9kaWN0W2IuaWRdKSB7XG4gICAgICAgICAgICAgICAgICAgIGIuY2xhc3MucHVzaChcImxpbmstZGlzYWJsZWRcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gY29sdW1ucztcbn07XG5cbmNvbnN0IGFkZF90YWJsZV9yb3dfZmlsdGVyID0gKGUsIGEpID0+IHtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgbGV0IGtleSA9IHVuZGVmaW5lZDtcbiAgICBsZXQgZGlzcGxheVZhbHVlID0gdW5kZWZpbmVkO1xuICAgIGxldCByZWFsVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgbGV0IG9wZXJhdG9yID0gJ2VxJztcblxuICAgIC8vIFJlYWQgdGFnIGtleSBhbmQgdmFsdWUgZnJvbSB0aGUgPGE+IGl0c2VsZiBpZiBwcm92aWRlZFxuICAgIGlmIChhLmRhdGEoJ3RhZ0tleScpICE9IHVuZGVmaW5lZCkga2V5ID0gYS5kYXRhKCd0YWdLZXknKTtcbiAgICBpZiAoYS5kYXRhKCd0YWdSZWFsdmFsdWUnKSAhPSB1bmRlZmluZWQpIHJlYWxWYWx1ZSA9IGEuZGF0YSgndGFnUmVhbHZhbHVlJyk7XG4gICAgZWxzZSBpZiAoYS5kYXRhKCd0YWdWYWx1ZScpICE9IHVuZGVmaW5lZCkgcmVhbFZhbHVlID0gYS5kYXRhKCd0YWdWYWx1ZScpO1xuICAgIGlmIChhLmRhdGEoJ3RhZ09wZXJhdG9yJykgIT0gdW5kZWZpbmVkKSBvcGVyYXRvciA9IGEuZGF0YSgndGFnT3BlcmF0b3InKTtcblxuICAgIGxldCBmaWx0ZXIgPSB7XG4gICAgICAgIGlkOiBrZXksXG4gICAgICAgIHZhbHVlOiByZWFsVmFsdWUsXG4gICAgICAgIG9wZXJhdG9yOiBvcGVyYXRvcixcbiAgICB9O1xuICAgIGFkZF9maWx0ZXIoZmlsdGVyKTtcbn1cblxuZnVuY3Rpb24gYWRkX3RvcF90YWJsZV9maWx0ZXIob3B0LCBldmVudCkge1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGxldCBmaWx0ZXIgPSB7XG4gICAgICAgIGlkOiBvcHQua2V5LFxuICAgICAgICB2YWx1ZTogb3B0LnZhbHVlLFxuICAgICAgICBvcGVyYXRvcjogb3B0Lm9wZXJhdG9yLFxuICAgIH07XG4gICAgYWRkX2ZpbHRlcihmaWx0ZXIpO1xufVxuXG5mdW5jdGlvbiBhZGRfZmlsdGVyKGZpbHRlcikge1xuICAgIGlmIChyYW5nZV9waWNrZXIudmFsdWUuaXNfZmlsdGVyX2RlZmluZWQoZmlsdGVyKSkge1xuICAgICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9jdXN0b21fZXZlbnQobnRvcG5nX2N1c3RvbV9ldmVudHMuU0hPV19NT0RBTF9GSUxURVJTLCBmaWx0ZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IGBGaWx0ZXIgJHtmaWx0ZXIudmFsdWV9IG5vdCBkZWZpbmVkYDtcbiAgICB9XG59XG5cbmNvbnN0IGdldF9leHRyYV9wYXJhbXNfb2JqID0gKCkgPT4ge1xuICAgIGxldCBleHRyYV9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9vYmplY3QoKTtcbiAgICByZXR1cm4gZXh0cmFfcGFyYW1zO1xufTtcblxuZnVuY3Rpb24gY2xpY2tfbmF2YmFyX2l0ZW0oaXRlbSkge1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgncGFnZScsIGl0ZW0ucGFnZV9uYW1lKTtcbiAgICBsZXQgaXNfYWxlcnRfc3RhdHNfdXJsID0gd2luZG93LmxvY2F0aW9uLnRvU3RyaW5nKCkubWF0Y2goL2FsZXJ0X3N0YXRzLmx1YS8pICE9IG51bGw7XG4gICAgaWYgKGlzX2FsZXJ0X3N0YXRzX3VybCkge1xuICAgICAgICByZW1vdmVfZmlsdGVyc19mcm9tX3VybCgpO1xuICAgIH1cbiAgICBudG9wbmdfdXJsX21hbmFnZXIucmVsb2FkX3VybCgpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVfZmlsdGVyc19mcm9tX3VybCgpIHtcbiAgICBsZXQgc3RhdHVzID0gbnRvcG5nX3N0YXR1c19tYW5hZ2VyLmdldF9zdGF0dXMoKTtcbiAgICBsZXQgZmlsdGVycyA9IHN0YXR1cy5maWx0ZXJzO1xuICAgIGlmIChmaWx0ZXJzID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLmRlbGV0ZV9wYXJhbXMoZmlsdGVycy5tYXAoKGYpID0+IGYuaWQpKTtcbn1cblxuZnVuY3Rpb24gc2hvd19tb2RhbF9hbGVydHNfZmlsdGVyKGFsZXJ0KSB7XG4gICAgY3VycmVudF9hbGVydC52YWx1ZSA9IGFsZXJ0O1xuICAgIG1vZGFsX2FsZXJ0c19maWx0ZXIudmFsdWUuc2hvdygpO1xufVxuXG5mdW5jdGlvbiBnZXRfcGVybWFuZW50X2xpbmsoKSB7XG4gICAgY29uc3QgJHRoaXMgPSAkKHBlcm1hbmVudF9saW5rX2J1dHRvbi52YWx1ZSk7XG4gICAgY29uc3QgcGxhY2Vob2xkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgIHBsYWNlaG9sZGVyLnZhbHVlID0gbG9jYXRpb24uaHJlZjtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHBsYWNlaG9sZGVyKTtcbiAgICBwbGFjZWhvbGRlci5zZWxlY3QoKTtcblxuICAgIC8vIGNvcHkgdGhlIHVybCB0byB0aGUgY2xpcGJvYXJkIGZyb20gdGhlIHBsYWNlaG9sZGVyXG4gICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQoXCJjb3B5XCIpO1xuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQocGxhY2Vob2xkZXIpO1xuICAgIFxuICAgICR0aGlzLmF0dHIoXCJ0aXRsZVwiLCBgJHtfaTE4bignY29waWVkJyl9IWApXG4gICAgICAgIC50b29sdGlwKFwiZGlzcG9zZVwiKVxuICAgICAgICAudG9vbHRpcCgpXG4gICAgICAgIC50b29sdGlwKFwic2hvd1wiKTtcbn1cblxuZnVuY3Rpb24gc2hvd19tb2RhbF90cmFmZmljX2V4dHJhY3Rpb24oKSB7XG4gICAgbW9kYWxfdHJhZmZpY19leHRyYWN0aW9uLnZhbHVlLnNob3coKTtcblxufVxuXG5mdW5jdGlvbiBzaG93X21vZGFsX3NuYXBzaG90KCkge1xuICAgIG1vZGFsX3NuYXBzaG90LnZhbHVlLnNob3coKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gYWRkX2V4Y2x1ZGUocGFyYW1zKSB7XG4gICAgcGFyYW1zLmNzcmYgPSBwcm9wcy5jb250ZXh0LmNzcmY7XG4gICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvYWRkL2FsZXJ0L2V4Y2x1c2lvbi5sdWFgO1xuICAgIHRyeSB7XG4gICAgICAgIGxldCBoZWFkZXJzID0ge1xuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICB9O1xuICAgICAgICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsLCB7IG1ldGhvZDogJ3Bvc3QnLCBoZWFkZXJzLCBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpIH0pO1xuICAgICAgICBsZXQgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX3BhcmFtcygpO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIC8vdG9kbyByZWxvYWRUYWJsZSgkdGFibGUsIHVybF9wYXJhbXMpO1xuICAgICAgICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfY3VzdG9tX2V2ZW50KG50b3BuZ19jdXN0b21fZXZlbnRzLlNIT1dfR0xPQkFMX0FMRVJUX0lORk8sIHsgdGV4dF9odG1sOiBfaTE4bignY2hlY2tfZXhjbHVzaW9uLmRpc2FibGVfd2FybicpLCB0eXBlOiBcImFsZXJ0LWluZm9cIiwgdGltZW91dDogMiB9KTtcbiAgICAgICAgfSwgMTAwMCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHJlZnJlc2hfcGFnZV9jb21wb25lbnRzKCkge1xuICAgIGxldCB0ID0gdGFibGVfYWxlcnRzLnZhbHVlO1xuICAgIGxldCBjID0gY2hhcnQudmFsdWU7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHQucmVmcmVzaF90YWJsZSgpO1xuICAgICAgICBjLnVwZGF0ZV9jaGFydCgpO1xuICAgIH0sIDEgKiAxMDAwKTtcbn1cblxuLyogSW4gY2FzZSBubyByb3dzIGFyZSBwcmludGVkLCB0aGVuIHRoZSBtZXNzYWdlIGhhcyB0byBiZSBkaXNwbGF5ZWQgKi9cbmZ1bmN0aW9uIHJvd3NfbG9hZGVkKHJlcykge1xuICAgIGlmKHJlcz8ucm93cyAhPSBudWxsKSB7XG4gICAgICAgIGRpc3BsYXlfbWVzc2FnZS52YWx1ZSA9IChyZXMucm93cy5sZW5ndGggPT0gMCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBvbl90YWJsZV9jdXN0b21fZXZlbnQoZXZlbnQpIHtcbiAgICBsZXQgZXZlbnRzX21hbmFnZWQgPSB7XG4gICAgICAgIFwiY2xpY2tfYnV0dG9uX3NubXBfaW5mb1wiOiBjbGlja19idXR0b25fc25tcF9pbmZvLFxuICAgICAgICBcImNsaWNrX2J1dHRvbl9pbmZvXCI6IGNsaWNrX2J1dHRvbl9pbmZvLFxuICAgICAgICBcImNsaWNrX2J1dHRvbl9oaXN0b3JpY2FsX2Zsb3dzXCI6IGNsaWNrX2J1dHRvbl9oaXN0b3JpY2FsX2Zsb3dzLFxuICAgICAgICBcImNsaWNrX2J1dHRvbl9hY2tub3dsZWRnZVwiOiBjbGlja19idXR0b25fYWNrbm93bGVkZ2UsXG4gICAgICAgIFwiY2xpY2tfYnV0dG9uX2Rpc2FibGVcIjogY2xpY2tfYnV0dG9uX2Rpc2FibGUsXG4gICAgICAgIFwiY2xpY2tfYnV0dG9uX3NldHRpbmdzXCI6IGNsaWNrX2J1dHRvbl9zZXR0aW5ncyxcbiAgICAgICAgXCJjbGlja19idXR0b25fcmVtb3ZlXCI6IGNsaWNrX2J1dHRvbl9yZW1vdmUsXG4gICAgICAgIFwiY2xpY2tfYnV0dG9uX2V4cGFuZFwiOiBjbGlja19idXR0b25fZXhwYW5kLFxuICAgIH07XG4gICAgaWYgKGV2ZW50c19tYW5hZ2VkW2V2ZW50LmV2ZW50X2lkXSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZXZlbnRzX21hbmFnZWRbZXZlbnQuZXZlbnRfaWRdKGV2ZW50KTtcbn1cblxuZnVuY3Rpb24gY2xpY2tfYnV0dG9uX2V4cGFuZChldmVudCkge1xuICAgIGNvbnN0IGFsZXJ0ID0gZXZlbnQucm93O1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcInF1ZXJ5X3ByZXNldFwiLCBcIlwiKTtcbiAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoXCJjb3VudFwiLCBcIlwiKTtcbiAgICBsZXQgc3RhdHVzID0gbnRvcG5nX3N0YXR1c19tYW5hZ2VyLmdldF9zdGF0dXMoKTtcbiAgICBsZXQgZmlsdGVycyA9IHN0YXR1cy5maWx0ZXJzO1xuICAgIGxldCByb3dfZmlsdGVycyA9IGFsZXJ0Py5maWx0ZXI/LnRhZ19maWx0ZXJzO1xuICAgIGlmIChyb3dfZmlsdGVycz8ubGVuZ3RoID4gMCkge1xuXHRyb3dfZmlsdGVycyA9IHJvd19maWx0ZXJzLm1hcCgoZikgPT4ge1xuXHQgICAgcmV0dXJuIHtcblx0XHRpZDogZi5pZCxcblx0XHRvcGVyYXRvcjogZi5vcCxcblx0XHR2YWx1ZTogZi52YWx1ZSxcblx0ICAgIH07XG5cdH0pO1xuXHRmaWx0ZXJzID0gZmlsdGVycy5jb25jYXQocm93X2ZpbHRlcnMpO1xuICAgIH1cbiAgICAvLyByZW1vdmUgZHVwbGljYXRlIGZpbHRlcnNcbiAgICBsZXQgZmlsdGVyc19kaWN0ID0ge307XG4gICAgZmlsdGVycy5mb3JFYWNoKChmKSA9PiBmaWx0ZXJzX2RpY3RbYCR7Zi5pZH1fJHtmLm9wZXJhdG9yfV8ke2YudmFsdWV9YF0gPSBmKTtcbiAgICBmaWx0ZXJzID0gbnRvcG5nX3V0aWxpdHkub2JqZWN0X3RvX2FycmF5KGZpbHRlcnNfZGljdCk7XG4gICAgXG4gICAgbGV0IGZpbHRlcnNfb2JqZWN0ID0gZmlsdGVyc01hbmFnZXIuZ2V0X2ZpbHRlcnNfb2JqZWN0KGZpbHRlcnMpO1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5hZGRfb2JqX3RvX3VybChmaWx0ZXJzX29iamVjdCk7XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLnJlbG9hZF91cmwoKTtcbn1cblxuZnVuY3Rpb24gc2hvd19tb2RhbF9hY2tub3dsZWRnZV9hbGVydHMoKSB7XG4gICAgbGV0IHN0YXR1cyA9IG50b3BuZ19zdGF0dXNfbWFuYWdlci5nZXRfc3RhdHVzKCk7XG4gICAgbW9kYWxfYWNrbm93bGVkZ2VfYWxlcnRzLnZhbHVlLnNob3coc3RhdHVzKTtcbn1cblxuZnVuY3Rpb24gc2hvd19tb2RhbF9kZWxldGVfYWxlcnRzKCkge1xuICAgIGxldCBzdGF0dXMgPSBudG9wbmdfc3RhdHVzX21hbmFnZXIuZ2V0X3N0YXR1cygpO1xuICAgIG1vZGFsX2RlbGV0ZV9hbGVydHMudmFsdWUuc2hvdyhzdGF0dXMpO1xufVxuXG5mdW5jdGlvbiBjbGlja19idXR0b25fcmVtb3ZlKGV2ZW50KSB7XG4gICAgY29uc3QgYWxlcnQgPSBldmVudC5yb3c7XG4gICAgbGV0IHN0YXR1c192aWV3ID0gZ2V0X3N0YXR1c192aWV3KCk7XG4gICAgbW9kYWxfZGVsZXRlLnZhbHVlLnNob3coYWxlcnQsIHN0YXR1c192aWV3KTtcbn1cblxuZnVuY3Rpb24gY2xpY2tfYnV0dG9uX3NldHRpbmdzKGV2ZW50KSB7XG4gICAgY29uc3QgYWxlcnQgPSBldmVudC5yb3c7XG4gICAgY29uc3QgY2hlY2tfc2V0dGluZ3NfaHJlZiA9ICQoYWxlcnQubXNnLmNvbmZpZ3NldF9yZWYpLmF0dHIoJ2hyZWYnKTtcbiAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGNoZWNrX3NldHRpbmdzX2hyZWY7XG59XG5cbmZ1bmN0aW9uIGNsaWNrX2J1dHRvbl9kaXNhYmxlKGV2ZW50KSB7XG4gICAgY29uc3QgYWxlcnQgPSBldmVudC5yb3c7XG4gICAgc2hvd19tb2RhbF9hbGVydHNfZmlsdGVyKGFsZXJ0KTtcbn1cblxuZnVuY3Rpb24gY2xpY2tfYnV0dG9uX2Fja25vd2xlZGdlKGV2ZW50KSB7XG4gICAgY29uc3QgYWxlcnQgPSBldmVudC5yb3c7XG4gICAgbW9kYWxfYWNrbm93bGVkZ2UudmFsdWUuc2hvdyhhbGVydCwgcHJvcHMuY29udGV4dCk7XG59XG5cbmZ1bmN0aW9uIGNsaWNrX2J1dHRvbl9oaXN0b3JpY2FsX2Zsb3dzKGV2ZW50KSB7XG4gICAgY29uc3QgYWxlcnQgPSBldmVudC5yb3c7XG4gICAgaWYgKGFsZXJ0LmxpbmtfdG9fcGFzdF9mbG93cykge1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGFsZXJ0LmxpbmtfdG9fcGFzdF9mbG93cztcbiAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2RiX3NlYXJjaC5sdWFgO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gY2xpY2tfYnV0dG9uX3NubXBfaW5mbyhldmVudCkge1xuICAgIGNvbnN0IGFsZXJ0ID0gZXZlbnQucm93O1xuICAgIGxldCBocmVmID0gYGA7XG4gICAgaWYgKGFsZXJ0LnBvcnQudmFsdWUgIT0gbnVsbCkge1xuICAgICAgICBocmVmID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9zbm1wX2ludGVyZmFjZV9kZXRhaWxzLmx1YT9ob3N0PSR7YWxlcnQuaXB9JnNubXBfcG9ydF9pZHg9JHthbGVydC5wb3J0LnZhbHVlfWA7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaHJlZiA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2Uvc25tcF9kZXZpY2VfZGV0YWlscy5sdWE/aG9zdD0ke2FsZXJ0LmlwfWA7XG4gICAgfVxuICAgIHdpbmRvdy5vcGVuKGhyZWYsIFwiX2JsYW5rXCIpO1xufVxuXG5mdW5jdGlvbiBjbGlja19idXR0b25faW5mbyhldmVudCkge1xuICAgIGNvbnN0IGFsZXJ0ID0gZXZlbnQucm93O1xuICAgIGxldCBzdGF0dXNfdmlldyA9IGdldF9zdGF0dXNfdmlldygpO1xuICAgIGxldCBwYXJhbXNfb2JqID0ge1xuICAgICAgICBwYWdlOiBwYWdlLFxuICAgICAgICBzdGF0dXM6IHN0YXR1c192aWV3LFxuICAgICAgICByb3dfaWQ6IGFsZXJ0LnJvd19pZCxcbiAgICAgICAgdHN0YW1wOiBhbGVydC50c3RhbXAudmFsdWUsXG4gICAgfTtcbiAgICBsZXQgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyhwYXJhbXNfb2JqKTtcbiAgICBjb25zdCBocmVmID0gYCR7cHJvcHMuY29udGV4dC5hbGVydF9kZXRhaWxzX3VybH0/JHt1cmxfcGFyYW1zfWA7XG4gICAgd2luZG93Lm9wZW4oaHJlZiwgXCJfYmxhbmtcIik7XG59XG5cbmZ1bmN0aW9uIGdldF9zdGF0dXNfdmlldygpIHtcbiAgICBsZXQgc3RhdHVzX3ZpZXcgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInN0YXR1c1wiKTtcbiAgICBpZiAoc3RhdHVzX3ZpZXcgPT0gbnVsbCB8fCBzdGF0dXNfdmlldyA9PSBcIlwiKSB7XG4gICAgICAgIHN0YXR1c192aWV3ID0gXCJoaXN0b3JpY2FsXCI7XG4gICAgfVxuICAgIHJldHVybiBzdGF0dXNfdmlldztcbn1cblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+PC9zdHlsZT5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG4gICAgPE5hdmJhciBpZD1cIm5hdmJhclwiIDptYWluX3RpdGxlPVwiY29udGV4dC5uYXZiYXIubWFpbl90aXRsZVwiIDpiYXNlX3VybD1cImNvbnRleHQubmF2YmFyLmJhc2VfdXJsXCJcbiAgICAgICAgOmhlbHBfbGluaz1cImNvbnRleHQubmF2YmFyLmhlbHBfbGlua1wiIDppdGVtc190YWJsZT1cImNvbnRleHQubmF2YmFyLml0ZW1zX3RhYmxlXCIgQGNsaWNrX2l0ZW09XCJjbGlja19uYXZiYXJfaXRlbVwiPlxuICAgIDwvTmF2YmFyPlxuXG4gICAgPGRpdiBjbGFzcz0ncm93Jz5cbiAgICAgICAgPGRpdiBjbGFzcz0nY29sLTEyJz5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtYi0yXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInctMTAwXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhcz1cInJhbmdlLWNvbnRhaW5lciBkLWZsZXggZmxleC13cmFwXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicmFuZ2UtcGlja2VyIGQtZmxleCBtLWF1dG8gZmxleC13cmFwXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEFsZXJ0SW5mbyBpZD1cImFsZXJ0X2luZm9cIiA6Z2xvYmFsPVwidHJ1ZVwiIHJlZj1cImFsZXJ0X2luZm9cIj48L0FsZXJ0SW5mbz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UmFuZ2VQaWNrZXIgdi1pZj1cIm1vdW50X3JhbmdlX3BpY2tlclwiIHJlZj1cInJhbmdlX3BpY2tlclwiIGlkPVwicmFuZ2VfcGlja2VyXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOm1pbl90aW1lX2ludGVydmFsX2lkPVwibWluX3RpbWVfaW50ZXJ2YWxfaWRcIiA6cm91bmRfdGltZT1cInJvdW5kX3RpbWVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDpiZWdpbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTd2l0Y2ggdi1pZj1cInByb3BzLmNvbnRleHQuaXNfZW50ZXJwcmlzZV94bFwiIHYtbW9kZWw6dmFsdWU9XCJmbG93c19hZ2dyZWdhdGVkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cIm1lLTIgbXQtMVwiIDpjaGFuZ2VfbGFiZWxfc2lkZT1cInRydWVcIiA6bGFiZWw9XCJmbG93X3R5cGVfbGFiZWxcIiBzdHlsZT1cIlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNoYW5nZV92YWx1ZT1cImNoYW5nZV9mbG93X3R5cGVcIj48L1N3aXRjaD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtcy0xIG1lLTJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IGNsYXNzPVwibWUtMiBmb3JtLXNlbGVjdFwiIHN0eWxlPVwibWluLXdpZHRoOjhyZW07XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD1cInNlbGVjdGVkX3F1ZXJ5X3ByZXNldFwiIEBjaGFuZ2U9XCJ1cGRhdGVfc2VsZWN0X3F1ZXJ5X3ByZXNldHMoKVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1mb3I9XCJpdGVtIGluIHF1ZXJ5X3ByZXNldHNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdi1pZj1cIml0ZW0uYnVpbHRpbiA9PSB0cnVlXCIgOnZhbHVlPVwiaXRlbVwiPnt7IGl0ZW0ubmFtZSB9fTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0Z3JvdXAgdi1pZj1cInBhZ2UgIT0gJ2FuYWx5c2lzJ1wiIDpsYWJlbD1cIl9pMThuKCdxdWVyaWVzLnF1ZXJpZXMnKVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtZm9yPVwiaXRlbSBpbiBxdWVyeV9wcmVzZXRzXCI+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHYtaWY9XCIhaXRlbS5idWlsdGluXCIgOnZhbHVlPVwiaXRlbVwiPnt7IGl0ZW0ubmFtZSB9fTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vcHRncm91cD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmV4dHJhX3JhbmdlX2J1dHRvbnM+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHYtaWY9XCJjb250ZXh0LnNob3dfcGVybWFsaW5rXCIgY2xhc3M9XCJidG4gYnRuLWxpbmsgYnRuLXNtXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9XCJnZXRfcGVybWFuZW50X2xpbmtcIiA6dGl0bGU9XCJfaTE4bignZ3JhcGhzLmdldF9wZXJtYW5lbnRfbGluaycpXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWY9XCJwZXJtYW5lbnRfbGlua19idXR0b25cIj48aSBjbGFzcz1cImZhcyBmYS1sZyBmYS1saW5rXCI+PC9pPjwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgdi1pZj1cImNvbnRleHQuc2hvd19kb3dubG9hZFwiIGNsYXNzPVwiYnRuIGJ0bi1saW5rIGJ0bi1zbVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnRpdGxlPVwiX2kxOG4oJ2dyYXBocy5kb3dubG9hZF9yZWNvcmRzJylcIiA6aHJlZj1cImhyZWZfZG93bmxvYWRfcmVjb3Jkc1wiPjxpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiZmFzIGZhLWxnIGZhLWZpbGVcIj48L2k+PC9hPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB2LWlmPVwiY29udGV4dC5zaG93X3BjYXBfZG93bmxvYWRcIiBjbGFzcz1cImJ0biBidG4tbGluayBidG4tc21cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz1cInNob3dfbW9kYWxfdHJhZmZpY19leHRyYWN0aW9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6dGl0bGU9XCJfaTE4bigndHJhZmZpY19yZWNvcmRpbmcucGNhcF9kb3dubG9hZCcpXCI+PGlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJmYXMgZmEtbGcgZmEtZG93bmxvYWRcIj48L2k+PC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHYtaWY9XCJjb250ZXh0LmlzX250b3BfZW50ZXJwcmlzZV9tXCIgY2xhc3M9XCJidG4gYnRuLWxpbmsgYnRuLXNtXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9XCJzaG93X21vZGFsX3NuYXBzaG90XCIgOnRpdGxlPVwiX2kxOG4oJ2RhdGF0YWJsZS5tYW5hZ2Vfc25hcHNob3RzJylcIj48aVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImZhcyBmYS1sZyBmYS1jYW1lcmEtcmV0cm9cIj48L2k+PC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9SYW5nZVBpY2tlcj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzPSdjb2wtMTInPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQgY2FyZC1zaGFkb3dcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWlmPVwiY29udGV4dC5zaG93X2NoYXJ0XCIgY2xhc3M9XCJjb2wtMTIgbWItMlwiIGlkPVwiY2hhcnQtdnVlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQgb3ZlcmZsb3ctaGlkZGVuXCIgOnN0eWxlPVwiY2hhcnRfc3R5bGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIDxkaXYgY2xhc3M9XCJjYXJkIGgtMzAwIG92ZXJmbG93LWhpZGRlblwiPiAtLT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxDaGFydCByZWY9XCJjaGFydFwiIGlkPVwiY2hhcnRfMFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOmNoYXJ0X3R5cGU9XCJjaGFydF90eXBlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6YmFzZV91cmxfcmVxdWVzdD1cImNoYXJ0X2RhdGFfdXJsXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6bWFwX2NoYXJ0X29wdGlvbnM9XCJmX21hcF9jaGFydF9vcHRpb25zXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6cmVnaXN0ZXJfb25fc3RhdHVzX2NoYW5nZT1cImZhbHNlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6bWluX3RpbWVfaW50ZXJ2YWxfaWQ9XCJtaW5fdGltZV9pbnRlcnZhbF9pZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnJvdW5kX3RpbWU9XCJyb3VuZF90aW1lXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvQ2hhcnQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUYWJsZVdpdGhDb25maWcgcmVmPVwidGFibGVfZmxvd3NcIiA6dGFibGVfaWQ9XCJ0YWJsZV9pZFwiIDp0YWJsZV9jb25maWdfaWQ9XCJ0YWJsZV9jb25maWdfaWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpjc3JmPVwiY29udGV4dC5jc3JmXCIgOmZfbWFwX2NvbHVtbnM9XCJtYXBfdGFibGVfZGVmX2NvbHVtbnNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpnZXRfZXh0cmFfcGFyYW1zX29iaj1cImdldF9leHRyYV9wYXJhbXNfb2JqXCIgQGxvYWRlZD1cIm9uX3RhYmxlX2xvYWRlZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQGN1c3RvbV9ldmVudD1cIm9uX3RhYmxlX2N1c3RvbV9ldmVudFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6Y3VzdG9tX2hlYWRlcj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPERyb3Bkb3duIHYtZm9yPVwiKHQsIHRfaW5kZXgpIGluIHRvcF90YWJsZV9hcnJheVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Zl9vbl9vcGVuPVwiZ2V0X29wZW5fdG9wX3RhYmxlX2Ryb3Bkb3duKHQsIHRfaW5kZXgpXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpyZWY9XCJlbCA9PiB7IHRvcF90YWJsZV9kcm9wZG93bl9hcnJheVt0X2luZGV4XSA9IGVsIH1cIj4gPCEtLSBEcm9wZG93biBjb2x1bW5zIC0tPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3Bpbm5lciA6c2hvdz1cInQuc2hvd19zcGlubmVyXCIgc2l6ZT1cIjFyZW1cIiBjbGFzcz1cIm1lLTFcIj48L1NwaW5uZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJudG9wbmctdHJ1bmNhdGVcIiA6dGl0bGU9XCJ0LnRpdGxlXCI+e3sgdC5sYWJlbCB9fTwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90Om1lbnU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgdi1mb3I9XCJvcHQgaW4gdC5vcHRpb25zXCIgc3R5bGU9XCJjdXJzb3I6cG9pbnRlcjsgZGlzcGxheTogYmxvY2s7XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPVwiYWRkX3RvcF90YWJsZV9maWx0ZXIob3B0LCAkZXZlbnQpXCIgY2xhc3M9XCJudG9wbmctdHJ1bmNhdGUgdGFnLWZpbHRlciBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6dGl0bGU9XCJvcHQudmFsdWVcIj57eyBvcHQubGFiZWwgfX08L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0Ryb3Bkb3duPiA8IS0tIERyb3Bkb3duIGNvbHVtbnMgLS0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT4gPCEtLSBjdXN0b21faGVhZGVyIC0tPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9UYWJsZVdpdGhDb25maWc+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PiA8IS0tIGNhcmQgYm9keSAtLT5cblxuICAgICAgICAgICAgICAgIDxkaXYgdi1pZj1cInByb3BzLmNvbnRleHQuc2hvd19hY2tub3dsZWRnZV9hbGwgfHwgcHJvcHMuY29udGV4dC5zaG93X2RlbGV0ZV9hbGxcIiBjbGFzcz1cImNhcmQtZm9vdGVyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gdi1pZj1cInByb3BzLmNvbnRleHQuc2hvd19hY2tub3dsZWRnZV9hbGxcIiBpZD1cImR0LWJ0bi1hY2tub3dsZWRnZVwiIDpkaXNhYmxlZD1cInRydWVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1icy10YXJnZXQ9XCIjZHQtYWNrbm93bGVkZ2UtbW9kYWxcIiBkYXRhLWJzLXRvZ2dsZT1cIm1vZGFsXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnkgbWUtMVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEgZmEtdXNlci1jaGVja1wiPjwvaT4gQWNrbm93bGVkZ2UgQWxlcnRzXG4gICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHYtaWY9XCJwcm9wcy5jb250ZXh0LnNob3dfZGVsZXRlX2FsbFwiIGlkPVwiZHQtYnRuLWRlbGV0ZVwiIDpkaXNhYmxlZD1cInRydWVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1icy10YXJnZXQ9XCIjZHQtZGVsZXRlLW1vZGFsXCIgZGF0YS1icy10b2dnbGU9XCJtb2RhbFwiIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhIGZhLXRyYXNoXCI+PC9pPiBEZWxldGUgQWxlcnRzXG4gICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDwvZGl2PiA8IS0tIGNhcmQgZm9vdGVyIC0tPlxuICAgICAgICAgICAgPC9kaXY+IDwhLS0gY2FyZC1zaGFkb3cgLS0+XG5cbiAgICAgICAgPC9kaXY+IDwhLS0gZGl2IGNvbCAtLT5cbiAgICA8L2Rpdj4gPCEtLSBkaXYgcm93IC0tPlxuXG4gICAgPE1vZGFsVHJhZmZpY0V4dHJhY3Rpb24gaWQ9XCJtb2RhbF90cmFmZmljX2V4dHJhY3Rpb25cIiByZWY9XCJtb2RhbF90cmFmZmljX2V4dHJhY3Rpb25cIj5cbiAgICA8L01vZGFsVHJhZmZpY0V4dHJhY3Rpb24+XG5cbiAgICA8TW9kYWxTbmFwc2hvdCByZWY9XCJtb2RhbF9zbmFwc2hvdFwiIDpjc3JmPVwiY29udGV4dC5jc3JmXCI+XG4gICAgPC9Nb2RhbFNuYXBzaG90PlxuXG4gICAgPE1vZGFsQWNrbm9sZWRnZUFsZXJ0IHJlZj1cIm1vZGFsX2Fja25vd2xlZGdlXCIgOmNvbnRleHQ9XCJjb250ZXh0XCIgQGFja25vd2xlZGdlPVwicmVmcmVzaF9wYWdlX2NvbXBvbmVudHNcIj5cbiAgICA8L01vZGFsQWNrbm9sZWRnZUFsZXJ0PlxuXG4gICAgPE1vZGFsRGVsZXRlQWxlcnQgcmVmPVwibW9kYWxfZGVsZXRlXCIgOmNvbnRleHQ9XCJjb250ZXh0XCIgQGRlbGV0ZV9hbGVydD1cInJlZnJlc2hfcGFnZV9jb21wb25lbnRzXCI+PC9Nb2RhbERlbGV0ZUFsZXJ0PlxuXG4gICAgPE1vZGFsQWxlcnRzRmlsdGVyIDphbGVydD1cImN1cnJlbnRfYWxlcnRcIiA6cGFnZT1cInBhZ2VcIiBAZXhjbHVkZT1cImFkZF9leGNsdWRlXCIgcmVmPVwibW9kYWxfYWxlcnRzX2ZpbHRlclwiPlxuICAgIDwvTW9kYWxBbGVydHNGaWx0ZXI+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIG9uQmVmb3JlTW91bnQsIGNvbXB1dGVkLCBuZXh0VGljayB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IG50b3BuZ19zdGF0dXNfbWFuYWdlciwgbnRvcG5nX2N1c3RvbV9ldmVudHMsIG50b3BuZ191cmxfbWFuYWdlciwgbnRvcG5nX3V0aWxpdHksIG50b3BuZ19zeW5jIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXNcIjtcbmltcG9ydCBOdG9wVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9udG9wLXV0aWxzXCI7XG5pbXBvcnQgeyBudG9wQ2hhcnRBcGV4IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvbnRvcENoYXJ0QXBleC5qc1wiO1xuaW1wb3J0IHsgRGF0YVRhYmxlUmVuZGVycyB9IGZyb20gXCIuLi91dGlsaXRpZXMvZGF0YXRhYmxlL3NwcnltZWRpYS1kYXRhdGFibGUtdXRpbHMuanNcIjtcbmltcG9ydCBGb3JtYXR0ZXJVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL2Zvcm1hdHRlci11dGlscy5qc1wiO1xuXG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdFNlYXJjaCB9IGZyb20gXCIuL3NlbGVjdC1zZWFyY2gudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE5hdmJhciB9IGZyb20gXCIuL3BhZ2UtbmF2YmFyLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBBbGVydEluZm8gfSBmcm9tIFwiLi9hbGVydC1pbmZvLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBDaGFydCB9IGZyb20gXCIuL2NoYXJ0LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBSYW5nZVBpY2tlciB9IGZyb20gXCIuL3JhbmdlLXBpY2tlci52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgVGFibGVXaXRoQ29uZmlnIH0gZnJvbSBcIi4vdGFibGUtd2l0aC1jb25maWcudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIERyb3Bkb3duIH0gZnJvbSBcIi4vZHJvcGRvd24udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNwaW5uZXIgfSBmcm9tIFwiLi9zcGlubmVyLnZ1ZVwiO1xuXG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsVHJhZmZpY0V4dHJhY3Rpb24gfSBmcm9tIFwiLi9tb2RhbC10cmFmZmljLWV4dHJhY3Rpb24udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsU25hcHNob3QgfSBmcm9tIFwiLi9tb2RhbC1zbmFwc2hvdC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxBbGVydHNGaWx0ZXIgfSBmcm9tIFwiLi9tb2RhbC1hbGVydHMtZmlsdGVyLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbEFja25vbGVkZ2VBbGVydCB9IGZyb20gXCIuL21vZGFsLWFja25vd2xlZGdlLWFsZXJ0LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbERlbGV0ZUFsZXJ0IH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLWFsZXJ0LnZ1ZVwiO1xuXG5pbXBvcnQgeyBkZWZhdWx0IGFzIFN3aXRjaCB9IGZyb20gXCIuL3N3aXRjaC52dWVcIjtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gICAgY29udGV4dDogT2JqZWN0LFxufSk7XG5cbmNvbnN0IHBhZ2VfaWQgPSBcInBhZ2UtZmxvdy1oaXN0b3JpY2FsXCI7XG5jb25zdCBhbGVydF9pbmZvID0gcmVmKG51bGwpO1xuY29uc3QgY2hhcnQgPSByZWYobnVsbCk7XG5jb25zdCB0YWJsZV9mbG93cyA9IHJlZihudWxsKTtcbmNvbnN0IG1vZGFsX3RyYWZmaWNfZXh0cmFjdGlvbiA9IHJlZihudWxsKTtcbmNvbnN0IG1vZGFsX3NuYXBzaG90ID0gcmVmKG51bGwpO1xuY29uc3QgcmFuZ2VfcGlja2VyID0gcmVmKG51bGwpO1xuY29uc3QgcGVybWFuZW50X2xpbmtfYnV0dG9uID0gcmVmKG51bGwpO1xuY29uc3QgbW9kYWxfYWxlcnRzX2ZpbHRlciA9IHJlZihudWxsKTtcbmNvbnN0IG1vZGFsX2Fja25vd2xlZGdlID0gcmVmKG51bGwpO1xuY29uc3QgbW9kYWxfZGVsZXRlID0gcmVmKG51bGwpO1xuXG5jb25zdCBjdXJyZW50X2FsZXJ0ID0gcmVmKG51bGwpO1xuY29uc3QgZGVmYXVsdF9pZmlkID0gcHJvcHMuY29udGV4dC5pZmlkO1xuY29uc3QgcGFnZSA9IHJlZihcIlwiKTtcbmNvbnN0IHRhYmxlX2NvbmZpZ19pZCA9IHJlZihcIlwiKTtcbmNvbnN0IHRhYmxlX2lkID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGlmIChzZWxlY3RlZF9xdWVyeV9wcmVzZXQudmFsdWU/LnZhbHVlID09IG51bGwpIHsgcmV0dXJuIHRhYmxlX2NvbmZpZ19pZC52YWx1ZTsgfVxuICAgIGxldCBpZCA9IGAke3RhYmxlX2NvbmZpZ19pZC52YWx1ZX1fJHtzZWxlY3RlZF9xdWVyeV9wcmVzZXQudmFsdWUudmFsdWV9YDtcbiAgICByZXR1cm4gaWQ7XG59KTtcblxuY29uc3QgaHJlZl9kb3dubG9hZF9yZWNvcmRzID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIC8vIGFkZCBpbXBvc3NpYmxlIGlmIG9uIHJlZiB2YXJpYWJsZSB0byByZWxvYWQgdGhpcyBleHByZXNzaW9uIGV2ZXJ5IHRpbWUgY291bnRfcGFnZV9jb21wb25lbnRzX3JlbG9hZGVkLnZhbHVlIGNoYW5nZVxuICAgIGlmIChjb3VudF9wYWdlX2NvbXBvbmVudHNfcmVsb2FkZWQudmFsdWUgPCAwKSB7IHRocm93IFwibmV2ZXIgcnVuXCI7IH1cbiAgICBjb25zdCBkb3dubG9hZF9lbmRwb2ludCA9IHByb3BzLmNvbnRleHQuZG93bmxvYWQuZW5kcG9pbnQ7XG4gICAgbGV0IHBhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX29iamVjdCgpO1xuICAgIGxldCBjb2x1bW5zID0gdGFibGVfZmxvd3MudmFsdWUuZ2V0X2NvbHVtbnNfZGVmcygpO1xuICAgIGxldCB2aXNpYmxlX2NvbHVtbnMgPSBjb2x1bW5zLmZpbHRlcigoYykgPT4gYy52aXNpYmxlKS5tYXAoKGMpID0+IGMuaWQpLmpvaW4oXCIsXCIpO1xuICAgIHBhcmFtcy5mb3JtYXQgPSBcInR4dFwiO1xuICAgIHBhcmFtcy52aXNpYmxlX2NvbHVtbnMgPSB2aXNpYmxlX2NvbHVtbnM7XG4gICAgY29uc3QgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyhwYXJhbXMpO1xuICAgIHJldHVybiBgJHtsb2NhdGlvbi5vcmlnaW59LyR7ZG93bmxvYWRfZW5kcG9pbnR9PyR7dXJsX3BhcmFtc31gO1xufSk7XG5cbmxldCBjaGFydF9kYXRhX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2RiL3RzLmx1YWA7XG5cbmNvbnN0IGNoYXJ0X3N0eWxlID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGlmIChwcm9wcy5jb250ZXh0Py5jaGFydF90eXBlID09IFwidG9way10aW1lc2VyaWVzXCIpIHtcbiAgICAgICAgcmV0dXJuIFwiaGVpZ2h0OjQ1MHB4IWltcG9ydGFudFwiO1xuICAgIH1cbiAgICByZXR1cm4gXCJoZWlnaHQ6MzAwcHghaW1wb3J0YW50XCI7XG5cbn0pO1xuY29uc3QgY2hhcnRfdHlwZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICAvKiBDaGFydCB0eXBlIGRlZmluZWQgdGhlIGpzb24gdGVtcGxhdGUgKGRlZmF1bHRzIGluIGRiX3NlYXJjaC5sdWEpICovXG4gICAgaWYgKHByb3BzLmNvbnRleHQ/LmNoYXJ0X3R5cGUgPT0gXCJ0b3BrLXRpbWVzZXJpZXNcIikge1xuICAgICAgICByZXR1cm4gbnRvcENoYXJ0QXBleC50eXBlQ2hhcnQuVFNfU1RBQ0tFRDtcbiAgICB9XG4gICAgcmV0dXJuIG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LlRTX0NPTFVNTjtcbn0pO1xuXG5jb25zdCB0b3BfdGFibGVfYXJyYXkgPSByZWYoW10pO1xuY29uc3QgdG9wX3RhYmxlX2Ryb3Bkb3duX2FycmF5ID0gcmVmKFtdKTtcblxuY29uc3Qgc2VsZWN0ZWRfcXVlcnlfcHJlc2V0ID0gcmVmKHt9KTtcbmNvbnN0IHF1ZXJ5X3ByZXNldHMgPSByZWYoW10pO1xuY29uc3QgcXVlcnlfcHJlc2V0c19jb3B5ID0gcmVmKFtdKTtcbmNvbnN0IG1vdW50X3JhbmdlX3BpY2tlciA9IHJlZihmYWxzZSk7XG5cbmNvbnN0IGZsb3dzX2FnZ3JlZ2F0ZWQgPSByZWYoZmFsc2UpO1xuY29uc3QgZmxvd190eXBlX2xhYmVsID0gcmVmKF9pMThuKFwiZGF0YXRhYmxlLmFnZ3JlZ2F0ZWRcIikpO1xuY29uc3QgbWluX3RpbWVfaW50ZXJ2YWxfaWQgPSByZWYobnVsbCk7XG5jb25zdCByb3VuZF90aW1lID0gcmVmKGZhbHNlKTtcbmNvbnN0IGNvdW50X3BhZ2VfY29tcG9uZW50c19yZWxvYWRlZCA9IHJlZigwKVxuXG5vbkJlZm9yZU1vdW50KGFzeW5jICgpID0+IHtcbiAgICBpbml0X3BhcmFtcygpO1xuICAgIGluaXRfdXJsX3BhcmFtcygpO1xuICAgIGF3YWl0IHNldF9xdWVyeV9wcmVzZXRzKCk7XG4gICAgbW91bnRfcmFuZ2VfcGlja2VyLnZhbHVlID0gdHJ1ZTtcbn0pO1xuXG5vbk1vdW50ZWQoYXN5bmMgKCkgPT4ge1xuICAgIHJlZ2lzdGVyX2NvbXBvbmVudHNfb25fc3RhdHVzX3VwZGF0ZSgpO1xuICAgIGxvYWRfdG9wX3RhYmxlX2FycmF5X292ZXJ2aWV3KCk7XG59KTtcblxuZnVuY3Rpb24gaW5pdF9wYXJhbXMoKSB7XG4gICAgcGFnZS52YWx1ZSA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwicGFnZVwiKTtcbiAgICBpZiAocGFnZS52YWx1ZSA9PSBudWxsKSB7IHBhZ2UudmFsdWUgPSBcIm92ZXJ2aWV3XCI7IH1cbiAgICBjaGFydF9kYXRhX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2RiL3RzLmx1YWA7XG4gICAgXG4gICAgc2VsZWN0ZWRfcXVlcnlfcHJlc2V0LnZhbHVlID0ge1xuICAgICAgICB2YWx1ZTogbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJxdWVyeV9wcmVzZXRcIiksXG4gICAgfTtcbiAgICBpZiAoc2VsZWN0ZWRfcXVlcnlfcHJlc2V0LnZhbHVlLnZhbHVlID09IG51bGwpIHtcbiAgICAgICAgc2VsZWN0ZWRfcXVlcnlfcHJlc2V0LnZhbHVlLnZhbHVlID0gXCJcIjtcbiAgICB9XG4gICAgdGFibGVfY29uZmlnX2lkLnZhbHVlID0gYGZsb3dfaGlzdG9yaWNhbGA7XG4gICAgY29uc3QgYWdncmVnYXRlZCA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiYWdncmVnYXRlZFwiKTtcbiAgICBpZiAoYWdncmVnYXRlZCA9PSBcInRydWVcIikge1xuICAgICAgICB0YWJsZV9jb25maWdfaWQudmFsdWUgPSBgZmxvd19oaXN0b3JpY2FsX2FnZ3JlZ2F0ZWRgO1xuICAgICAgICBmbG93c19hZ2dyZWdhdGVkLnZhbHVlID0gdHJ1ZTtcbiAgICAgICAgbWluX3RpbWVfaW50ZXJ2YWxfaWQudmFsdWUgPSBcImhvdXJcIjtcbiAgICAgICAgcm91bmRfdGltZS52YWx1ZSA9IHRydWU7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpbml0X3VybF9wYXJhbXMoKSB7XG4gICAgaWYgKG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiaWZpZFwiKSA9PSBudWxsKSB7XG4gICAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcImlmaWRcIiwgZGVmYXVsdF9pZmlkKTtcbiAgICB9XG4gICAgLy8gMzAgbWluIGRlZmF1bHRcbiAgICAvLyBjaGlhbWFyZSBzZXQgZGVmYXVsdF90aW1lIGludGVydmFsXG4gICAgaWYgKGZsb3dzX2FnZ3JlZ2F0ZWQudmFsdWUgPT0gZmFsc2UpIHtcbiAgICAgICAgbnRvcG5nX3V0aWxpdHkuY2hlY2tfYW5kX3NldF9kZWZhdWx0X3RpbWVfaW50ZXJ2YWwoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IGZfY2hlY2tfbGFzdF9taW51dGVfZXBvY2hfZW5kID0gKGVwb2NoKSA9PiB7XG4gICAgICAgICAgICBsZXQgbWluX3RpbWVfaW50ZXJ2YWwgPSBudG9wbmdfdXRpbGl0eS5nZXRfdGltZWZyYW1lX2Zyb21fdGltZWZyYW1lX2lkKG1pbl90aW1lX2ludGVydmFsX2lkLnZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiBlcG9jaC5lcG9jaF9lbmQgLSBlcG9jaC5lcG9jaF9iZWdpbiA8IG1pbl90aW1lX2ludGVydmFsO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBlcG9jaF9pbnRlcnZhbCA9IG50b3BuZ191dGlsaXR5LmNoZWNrX2FuZF9zZXRfZGVmYXVsdF90aW1lX2ludGVydmFsKG1pbl90aW1lX2ludGVydmFsX2lkLnZhbHVlLCBmX2NoZWNrX2xhc3RfbWludXRlX2Vwb2NoX2VuZCk7XG4gICAgICAgIGlmIChlcG9jaF9pbnRlcnZhbCAhPSBudWxsKSB7XG4gICAgICAgICAgICBlcG9jaF9pbnRlcnZhbC5lcG9jaF9iZWdpbiA9IG50b3BuZ191dGlsaXR5LnJvdW5kX3RpbWVfYnlfdGltZWZyYW1lX2lkKGVwb2NoX2ludGVydmFsLmVwb2NoX2JlZ2luLCBtaW5fdGltZV9pbnRlcnZhbF9pZC52YWx1ZSk7XG4gICAgICAgICAgICBlcG9jaF9pbnRlcnZhbC5lcG9jaF9lbmQgPSBudG9wbmdfdXRpbGl0eS5yb3VuZF90aW1lX2J5X3RpbWVmcmFtZV9pZChlcG9jaF9pbnRlcnZhbC5lcG9jaF9lbmQsIG1pbl90aW1lX2ludGVydmFsX2lkLnZhbHVlKTtcbiAgICAgICAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcImVwb2NoX2JlZ2luXCIsIGVwb2NoX2ludGVydmFsLmVwb2NoX2JlZ2luKTtcbiAgICAgICAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcImVwb2NoX2VuZFwiLCBlcG9jaF9pbnRlcnZhbC5lcG9jaF9lbmQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIGlmIChudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInBhZ2VcIikgPT0gXCJmbG93XCJcbiAgICAgICAgJiYgbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJzdGF0dXNcIikgPT0gXCJlbmdhZ2VkXCIpIHtcbiAgICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKFwic3RhdHVzXCIsIFwiaGlzdG9yaWNhbFwiKTtcbiAgICB9XG4gICAgaWYgKG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiYWdncmVnYXRlZFwiKSA9PSBudWxsKSB7XG4gICAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcImFnZ3JlZ2F0ZWRcIixcImZhbHNlXCIpO1xuICAgIH1cbiAgICBcbn1cblxuZnVuY3Rpb24gZ2V0X2NoYXJ0X2NvbmZpZ19mcm9tX3ByZXNldF9jb25zdChwcmVzZXRfY29uc3QpIHtcbiAgICBsZXQgY2hhcnQgPSBwcmVzZXRfY29uc3Q/LmNoYXJ0O1xuICAgIGlmIChjaGFydCAhPSBudWxsICYmIGNoYXJ0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIGNoYXJ0WzBdO1xuICAgIH1cbiAgICByZXR1cm4ge307XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNldF9xdWVyeV9wcmVzZXRzKCkge1xuICAgIGxldCB1cmxfcmVxdWVzdCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2RiL3ByZXNldC9jb25zdHMubHVhP3BhZ2U9JHtwYWdlLnZhbHVlfSZhZ2dyZWdhdGVkPSR7Zmxvd3NfYWdncmVnYXRlZC52YWx1ZX1gO1xuICAgIGxldCByZXMgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsX3JlcXVlc3QpO1xuICAgIFxuICAgIHF1ZXJ5X3ByZXNldHMudmFsdWUgPSByZXNbMF0ubGlzdC5tYXAoKGVsKSA9PiB7XG4gICAgICAgIGxldCBjaGFydF9jb25maWcgPSBnZXRfY2hhcnRfY29uZmlnX2Zyb21fcHJlc2V0X2NvbnN0KGVsKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiBlbC5pZCwgLy89PSBudWxsID8gXCJmbG93XCIgOiBlbC5pZCxcbiAgICAgICAgICAgIG5hbWU6IGVsLm5hbWUsXG4gICAgICAgICAgICBjb3VudDogY2hhcnRfY29uZmlnPy5wYXJhbXM/LmNvdW50LFxuICAgICAgICAgICAgY2hhcnRfY29uZmlnOiBjaGFydF9jb25maWcsXG4gICAgICAgICAgICBidWlsdGluOiB0cnVlLFxuICAgICAgICB9O1xuICAgIH0pO1xuICAgIGlmIChyZXMubGVuZ3RoID4gMSkge1xuICAgICAgICByZXNbMV0ubGlzdC5mb3JFYWNoKChlbCkgPT4ge1xuICAgICAgICAgICAgbGV0IGNoYXJ0X2NvbmZpZyA9IGdldF9jaGFydF9jb25maWdfZnJvbV9wcmVzZXRfY29uc3QoZWwpO1xuICAgICAgICAgICAgbGV0IHF1ZXJ5ID0ge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBlbC5pZCxcbiAgICAgICAgICAgICAgICBuYW1lOiBlbC5uYW1lLFxuICAgICAgICAgICAgICAgIGNvdW50OiBjaGFydF9jb25maWc/LnBhcmFtcz8uY291bnQsXG4gICAgICAgICAgICAgICAgY2hhcnRfY29uZmlnOiBjaGFydF9jb25maWcsXG4gICAgICAgICAgICAgICAgaXNfcHJlc2V0OiB0cnVlLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHF1ZXJ5X3ByZXNldHMudmFsdWUucHVzaChxdWVyeSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoc2VsZWN0ZWRfcXVlcnlfcHJlc2V0LnZhbHVlID09IG51bGwgfHwgc2VsZWN0ZWRfcXVlcnlfcHJlc2V0LnZhbHVlLnZhbHVlID09IFwiXCIpIHtcbiAgICAgICAgc2VsZWN0ZWRfcXVlcnlfcHJlc2V0LnZhbHVlID0gcXVlcnlfcHJlc2V0cy52YWx1ZVswXTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgcSA9IHF1ZXJ5X3ByZXNldHMudmFsdWUuZmluZCgoaSkgPT4gaS52YWx1ZSA9PSBzZWxlY3RlZF9xdWVyeV9wcmVzZXQudmFsdWUudmFsdWUpO1xuICAgICAgICBzZWxlY3RlZF9xdWVyeV9wcmVzZXQudmFsdWUgPSBxIHx8IHF1ZXJ5X3ByZXNldHMudmFsdWVbMF07XG4gICAgfVxuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcInF1ZXJ5X3ByZXNldFwiLCBzZWxlY3RlZF9xdWVyeV9wcmVzZXQudmFsdWUudmFsdWUpO1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcImNvdW50XCIsIHNlbGVjdGVkX3F1ZXJ5X3ByZXNldC52YWx1ZS5jb3VudCk7XG4gICAgbnRvcG5nX3N5bmMucmVhZHkoZ2V0X3F1ZXJ5X3ByZXNldHNfc3luY19rZXkoKSk7XG59XG5cbmNvbnN0IGZfbWFwX2NoYXJ0X29wdGlvbnMgPSBhc3luYyAoY2hhcnRfb3B0aW9ucykgPT4ge1xuICAgIGF3YWl0IG50b3BuZ19zeW5jLm9uX3JlYWR5KGdldF9xdWVyeV9wcmVzZXRzX3N5bmNfa2V5KCkpO1xuICAgIGxldCBmb3JtYXR0ZXJfdHlwZSA9IHNlbGVjdGVkX3F1ZXJ5X3ByZXNldC52YWx1ZS5jaGFydF9jb25maWc/LnVuaXRfbWVhc3VyZTtcbiAgICBpZiAoZm9ybWF0dGVyX3R5cGUgPT0gbnVsbCkge1xuICAgICAgICBmb3JtYXR0ZXJfdHlwZSA9IFwibnVtYmVyXCI7XG4gICAgfVxuICAgIGNoYXJ0X29wdGlvbnMueWF4aXMubGFiZWxzLmZvcm1hdHRlciA9IEZvcm1hdHRlclV0aWxzLmdldEZvcm1hdHRlcihmb3JtYXR0ZXJfdHlwZSk7XG4gICAgcmV0dXJuIGNoYXJ0X29wdGlvbnM7XG59O1xuXG5mdW5jdGlvbiBjaGFuZ2VfZmxvd190eXBlKCkge1xuICAgIC8vIGlmIChmbG93c19hZ2dyZWdhdGVkLnZhbHVlID09IGZhbHNlKSB7XG4gICAgLy8gXHRudG9wbmdfdXJsX21hbmFnZXIuZGVsZXRlX3BhcmFtcyhbXCJhZ2dyZWdhdGVkXCJdKTtcdFxuICAgIC8vIFx0dGFibGVfY29uZmlnX2lkLnZhbHVlID0gXCJmbG93X2hpc3RvcmljYWxcIjtcbiAgICAvLyB9IGVsc2Uge1xuICAgIC8vIFx0bnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKFwiYWdncmVnYXRlZFwiLCBcInRydWVcIik7XG4gICAgLy8gXHR0YWJsZV9jb25maWdfaWQudmFsdWUgPSBcImZsb3dfaGlzdG9yaWNhbF9hZ2dyZWdhdGVkXCI7XG4gICAgLy8gfVxuICAgIC8vIHJlZnJlc2hfcGFnZV9jb21wb25lbnRzKHRydWUpO1xuICAgIC8vIGxvYWRfdG9wX3RhYmxlX2FycmF5X292ZXJ2aWV3KCk7XG5cbiAgICAvLyBjdXJyZW50bHkgd2UgY2FuJ3QgcmVmcmVzaCBjb21wb25lbnQgd2l0aG91dCByZWxvYWQgdGhlIHBhZ2UgYmVjYXVzZSB3ZSBuZWVkIHJlZnJlc2ggcHJvcHMuY29udGV4dFxuICAgIGlmIChmbG93c19hZ2dyZWdhdGVkLnZhbHVlID09IGZhbHNlKSB7XG4gICAgICAgIG50b3BuZ191cmxfbWFuYWdlci5kZWxldGVfcGFyYW1zKFtcImFnZ3JlZ2F0ZWRcIl0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcImFnZ3JlZ2F0ZWRcIiwgXCJ0cnVlXCIpO1xuICAgIH1cbiAgICBudG9wbmdfdXJsX21hbmFnZXIucmVsb2FkX3VybCgpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVfc2VsZWN0X3F1ZXJ5X3ByZXNldHMoKSB7XG4gICAgbGV0IHVybCA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX3BhcmFtcygpO1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcInF1ZXJ5X3ByZXNldFwiLCBzZWxlY3RlZF9xdWVyeV9wcmVzZXQudmFsdWUudmFsdWUpO1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcImNvdW50XCIsIHNlbGVjdGVkX3F1ZXJ5X3ByZXNldC52YWx1ZS5jb3VudCk7XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLnJlbG9hZF91cmwoKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gbG9hZF90b3BfdGFibGVfYXJyYXlfb3ZlcnZpZXcoYWN0aW9uKSB7XG4gICAgaWYgKHByb3BzLmNvbnRleHQuc2hvd19jYXJkcyAhPSB0cnVlKSB7IHJldHVybjsgfVxuICAgIHRvcF90YWJsZV9hcnJheS52YWx1ZSA9IGF3YWl0IGxvYWRfdG9wX3RhYmxlX2FycmF5KFwib3ZlcnZpZXdcIik7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGxvYWRfdG9wX3RhYmxlX2RldGFpbHModG9wLCB0b3BfaW5kZXgpIHtcbiAgICB0b3Auc2hvd19zcGlubmVyID0gdHJ1ZTtcbiAgICBhd2FpdCBuZXh0VGljaygpO1xuICAgIGlmICh0b3AuZGF0YV9sb2FkZWQgPT0gZmFsc2UpIHtcbiAgICAgICAgbGV0IG5ld190b3BfYXJyYXkgPSBhd2FpdCBsb2FkX3RvcF90YWJsZV9hcnJheSh0b3AuaWQsIHRvcCk7XG4gICAgICAgIHRvcC5vcHRpb25zID0gbmV3X3RvcF9hcnJheS5maW5kKCh0KSA9PiB0LmlkID09IHRvcC5pZCkub3B0aW9ucztcbiAgICAgICAgYXdhaXQgbmV4dFRpY2soKTtcbiAgICAgICAgbGV0IGRyb3Bkb3duID0gdG9wX3RhYmxlX2Ryb3Bkb3duX2FycmF5LnZhbHVlW3RvcF9pbmRleF07XG4gICAgICAgIGRyb3Bkb3duLmxvYWRfbWVudSgpO1xuICAgIH1cbiAgICB0b3Auc2hvd19zcGlubmVyID0gZmFsc2U7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGxvYWRfdG9wX3RhYmxlX2FycmF5KGFjdGlvbiwgdG9wKSB7XG4gICAgLy8gdG9wX3RhYmxlLnZhbHVlID0gW107XG4gICAgY29uc3QgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX3BhcmFtcygpO1xuICAgIGNvbnN0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2Zsb3cvdG9wLmx1YT8ke3VybF9wYXJhbXN9JmFjdGlvbj0ke2FjdGlvbn1gO1xuICAgIGxldCByZXMgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsKTtcbiAgICByZXR1cm4gcmVzLm1hcCgodCkgPT4ge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaWQ6IHQuYWN0aW9uIHx8IHQubmFtZSxcbiAgICAgICAgICAgIGxhYmVsOiB0LmxhYmVsLFxuICAgICAgICAgICAgdGl0bGU6IHQudG9vbHRpcCxcbiAgICAgICAgICAgIHNob3dfc3Bpbm5lcjogZmFsc2UsXG4gICAgICAgICAgICBkYXRhX2xvYWRlZDogYWN0aW9uICE9ICdvdmVydmlldycsXG4gICAgICAgICAgICBvcHRpb25zOiB0LnZhbHVlLFxuICAgICAgICB9O1xuICAgIH0pO1xufVxuXG5jb25zdCBnZXRfb3Blbl90b3BfdGFibGVfZHJvcGRvd24gPSAodG9wLCB0b3BfaW5kZXgpID0+IHtcbiAgICByZXR1cm4gKGQpID0+IHtcbiAgICAgICAgbG9hZF90b3BfdGFibGVfZGV0YWlscyh0b3AsIHRvcF9pbmRleCk7XG4gICAgfTtcbn07XG5cbmFzeW5jIGZ1bmN0aW9uIHJlZ2lzdGVyX2NvbXBvbmVudHNfb25fc3RhdHVzX3VwZGF0ZSgpIHtcbiAgICBhd2FpdCBudG9wbmdfc3luYy5vbl9yZWFkeShcInJhbmdlX3BpY2tlclwiKTtcbiAgICBpZiAocHJvcHMuY29udGV4dC5zaG93X2NoYXJ0KSB7XG4gICAgICAgIGNoYXJ0LnZhbHVlLnJlZ2lzdGVyX3N0YXR1cygpO1xuICAgIH1cbiAgICAvL3VwZGF0ZURvd25sb2FkQnV0dG9uKCk7XG4gICAgbnRvcG5nX3N0YXR1c19tYW5hZ2VyLm9uX3N0YXR1c19jaGFuZ2UocGFnZS52YWx1ZSwgKG5ld19zdGF0dXMpID0+IHtcbiAgICAgICAgbGV0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9wYXJhbXMoKTtcbiAgICAgICAgdGFibGVfZmxvd3MudmFsdWUucmVmcmVzaF90YWJsZSgpO1xuICAgICAgICBsb2FkX3RvcF90YWJsZV9hcnJheV9vdmVydmlldygpO1xuXHRjb3VudF9wYWdlX2NvbXBvbmVudHNfcmVsb2FkZWQudmFsdWUgKz0gMTtcbiAgICB9LCBmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIG9uX3RhYmxlX2xvYWRlZCgpIHtcbiAgICByZWdpc3Rlcl90YWJsZV9mbG93c19ldmVudHMoKTtcbn1cblxuZnVuY3Rpb24gcmVnaXN0ZXJfdGFibGVfZmxvd3NfZXZlbnRzKCkge1xuICAgIGxldCBqcXVlcnlfdGFibGVfZmxvd3MgPSAkKGAjJHt0YWJsZV9pZC52YWx1ZX1gKTtcbiAgICBqcXVlcnlfdGFibGVfZmxvd3Mub24oJ2NsaWNrJywgYGEudGFnLWZpbHRlcmAsIGFzeW5jIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGFkZF90YWJsZV9yb3dfZmlsdGVyKGUsICQodGhpcykpO1xuICAgIH0pO1xufVxuXG5jb25zdCBtYXBfdGFibGVfZGVmX2NvbHVtbnMgPSBhc3luYyAoY29sdW1ucykgPT4ge1xuICAgIGF3YWl0IG50b3BuZ19zeW5jLm9uX3JlYWR5KGdldF9xdWVyeV9wcmVzZXRzX3N5bmNfa2V5KCkpO1xuICAgIGxldCBodG1sX3JlZiA9ICcnO1xuICAgIGxldCBsb2NhdGlvbiA9ICcnO1xuICAgIGNvbnN0IGZfcHJpbnRfYXNuID0gKGtleSwgYXNuLCByb3cpID0+IHtcbiAgICAgICAgaWYgKGFzbiAhPT0gdW5kZWZpbmVkICYmIGFzbi52YWx1ZSAhPSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gYDxhIGNsYXNzPSd0YWctZmlsdGVyJyBkYXRhLXRhZy1rZXk9JyR7a2V5fScgZGF0YS10YWctdmFsdWU9JyR7YXNuLnZhbHVlfScgdGl0bGU9JyR7YXNuLnRpdGxlfScgaHJlZj0namF2YXNjcmlwdDp2b2lkKDApJz4ke2Fzbi5sYWJlbH08L2E+YDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICB9O1xuICAgIGNvbnN0IGZfcHJpbnRfbGF0ZW5jeSA9IChrZXksIGxhdGVuY3ksIHJvdykgPT4ge1xuICAgICAgICBpZiAobGF0ZW5jeSA9PSBudWxsIHx8IGxhdGVuY3kgPT0gMCkgeyByZXR1cm4gXCJcIjsgfVxuICAgICAgICByZXR1cm4gYDxhIGNsYXNzPSd0YWctZmlsdGVyJyBkYXRhLXRhZy1rZXk9JyR7a2V5fScgZGF0YS10YWctdmFsdWU9JyR7bGF0ZW5jeX0nIGhyZWY9J2phdmFzY3JpcHQ6dm9pZCgwKSc+JHtOdG9wVXRpbHMubXNlY1RvVGltZShsYXRlbmN5KX08L2E+YDtcbiAgICB9O1xuICAgIGxldCBtYXBfY29sdW1ucyA9IHtcbiAgICAgICAgXCJmaXJzdF9zZWVuXCI6IChmaXJzdF9zZWVuLCByb3cpID0+IHtcbiAgICAgICAgICAgIGlmIChmaXJzdF9zZWVuICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpcnN0X3NlZW4udGltZTtcbiAgICAgICAgfSxcbiAgICAgICAgXCJEVVJBVElPTlwiOiAoZHVyYXRpb24sIHJvdykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIE50b3BVdGlscy5zZWNvbmRzVG9UaW1lKGR1cmF0aW9uKVxuICAgICAgICB9LFxuICAgICAgICBcIlRIUk9VR0hQVVRcIjogKHRocm91Z2hwdXQsIHJvdykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIEZvcm1hdHRlclV0aWxzLmdldEZvcm1hdHRlcihcImJwc1wiKSh0aHJvdWdocHV0KTtcbiAgICAgICAgfSxcbiAgICAgICAgXCJsN3Byb3RvXCI6IChwcm90bywgcm93KSA9PiB7XG4gICAgICAgICAgICBsZXQgY29uZmlkZW5jZSA9IFwiXCI7XG4gICAgICAgICAgICBpZiAocHJvdG8uY29uZmlkZW5jZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGl0bGUgPSBwcm90by5jb25maWRlbmNlO1xuICAgICAgICAgICAgICAgICh0aXRsZSA9PSBcIkRQSVwiKSA/IGNvbmZpZGVuY2UgPSBgPHNwYW4gY2xhc3M9XCJiYWRnZSBiZy1zdWNjZXNzXCIgdGl0bGU9XCIke3RpdGxlfVwiPiR7dGl0bGV9PC9zcGFuPmAgOiBjb25maWRlbmNlID0gYDxzcGFuIGNsYXNzPVwiYmFkZ2UgYmctd2FybmluZ1wiIHRpdGxlPVwiJHt0aXRsZX1cIj4ke3RpdGxlfTwvc3Bhbj5gXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gRGF0YVRhYmxlUmVuZGVycy5maWx0ZXJpemUoJ2w3cHJvdG8nLCBwcm90by52YWx1ZSwgcHJvdG8ubGFiZWwpICsgXCIgXCIgKyBgJHtjb25maWRlbmNlfWA7XG4gICAgICAgIH0sXG4gICAgICAgIFwiYXNuXCI6ICAgICAoYXNuLCByb3cpICAgICA9PiBmX3ByaW50X2FzbihcImFzblwiLCAgICAgYXNuLCAgICAgcm93KSxcbiAgICAgICAgXCJjbGlfYXNuXCI6IChjbGlfYXNuLCByb3cpID0+IGZfcHJpbnRfYXNuKFwiY2xpX2FzblwiLCBjbGlfYXNuLCByb3cpLFxuICAgICAgICBcInNydl9hc25cIjogKHNydl9hc24sIHJvdykgPT4gZl9wcmludF9hc24oXCJzcnZfYXNuXCIsIHNydl9hc24sIHJvdyksXG4gICAgICAgIFwiZmxvd19yaXNrXCI6IChmbG93X3Jpc2tzLCByb3cpID0+IHtcbiAgICAgICAgICAgIGlmIChmbG93X3Jpc2tzID09IG51bGwpIHsgcmV0dXJuIFwiXCI7IH1cbiAgICAgICAgICAgIGxldCByZXMgPSBbXTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmbG93X3Jpc2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmxvd19yaXNrID0gZmxvd19yaXNrc1tpXTtcbiAgICAgICAgICAgICAgICBjb25zdCBmbG93X3Jpc2tfbGFiZWwgPSAoZmxvd19yaXNrLmxhYmVsIHx8IGZsb3dfcmlzay52YWx1ZSk7XG4gICAgICAgICAgICAgICAgY29uc3QgZmxvd19yaXNrX2hlbHAgPSAoZmxvd19yaXNrLmhlbHApO1xuICAgICAgICAgICAgICAgIHJlcy5wdXNoKGAke2Zsb3dfcmlza19sYWJlbH0gJHtmbG93X3Jpc2tfaGVscH1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXMuam9pbignLCAnKTtcbiAgICAgICAgfSxcbiAgICAgICAgXCJjbGlfbndfbGF0ZW5jeVwiOiAoY2xpX253X2xhdGVuY3ksIHJvdykgPT4gZl9wcmludF9sYXRlbmN5KFwiY2xpX253X2xhdGVuY3lcIiwgY2xpX253X2xhdGVuY3ksIHJvdyksXG4gICAgICAgIFwic3J2X253X2xhdGVuY3lcIjogKHNydl9ud19sYXRlbmN5LCByb3cpID0+IGZfcHJpbnRfbGF0ZW5jeShcInNydl9ud19sYXRlbmN5XCIsIHNydl9ud19sYXRlbmN5LCByb3cpLFxuICAgICAgICBcImluZm9cIjogKGluZm8sIHJvdykgPT4ge1xuICAgICAgICAgICAgaWYgKGluZm8gPT0gbnVsbCkgeyByZXR1cm4gXCJcIjsgfVxuICAgICAgICAgICAgcmV0dXJuIGA8YSBjbGFzcz0ndGFnLWZpbHRlcicgZGF0YS10YWcta2V5PSdpbmZvJyBkYXRhLXRhZy12YWx1ZT0nJHtpbmZvLnRpdGxlfScgdGl0bGU9JyR7aW5mby50aXRsZX0nIGhyZWY9J2phdmFzY3JpcHQ6dm9pZCgwKSc+JHtpbmZvLmxhYmVsfTwvYT5gO1xuICAgICAgICB9LFxuICAgIH07XG4gICAgY29sdW1ucyA9IGNvbHVtbnMuZmlsdGVyKChjKSA9PiBwcm9wcy5jb250ZXh0Py52aXNpYmxlX2NvbHVtbnNbYy5kYXRhX2ZpZWxkXSAhPSBmYWxzZSk7XG4gICAgaWYgKHNlbGVjdGVkX3F1ZXJ5X3ByZXNldC52YWx1ZS5pc19wcmVzZXQgJiYgY29sdW1ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vIGFkZCBhY3Rpb24gYnV0dG9uIHRoYXQgaXMgdGhlIGZpcnN0IGJ1dHRvblxuICAgICAgICBjb2x1bW5zID0gW2NvbHVtbnNbMF1dLmNvbmNhdChwcm9wcy5jb250ZXh0LmNvbHVtbnNfZGVmKTtcbiAgICB9XG5cbiAgICBjb2x1bW5zLmZvckVhY2goKGMpID0+IHtcbiAgICAgICAgYy5yZW5kZXJfZnVuYyA9IG1hcF9jb2x1bW5zW2MuZGF0YV9maWVsZF07XG5cbiAgICAgICAgaWYgKGMuaWQgPT0gXCJhY3Rpb25zXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IHZpc2libGVfZGljdCA9IHtcbiAgICAgICAgICAgICAgICBpbmZvOiBwcm9wcy5jb250ZXh0LmFjdGlvbnMuc2hvd19pbmZvLFxuICAgICAgICAgICAgICAgIGhpc3RvcmljYWxfZGF0YTogcHJvcHMuY29udGV4dC5hY3Rpb25zLnNob3dfaGlzdG9yaWNhbCxcbiAgICAgICAgICAgICAgICBmbG93X2FsZXJ0czogcHJvcHMuY29udGV4dC5hY3Rpb25zLnNob3dfYWxlcnRzLFxuICAgICAgICAgICAgICAgIHBjYXBfZG93bmxvYWQ6IHByb3BzLmNvbnRleHQuYWN0aW9ucy5zaG93X3BjYXBfZG93bmxvYWQsXG4gICAgICAgICAgICAgICAgcm93X2RhdGE6IHByb3BzLmNvbnRleHQuaXNfZW50ZXJwcmlzZV94bCAmJiBmbG93c19hZ2dyZWdhdGVkLnZhbHVlLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGMuYnV0dG9uX2RlZl9hcnJheS5mb3JFYWNoKChiKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gaWYgaXMgbm90IGRlZmluZWQgaXMgZW5hYmxlZFxuICAgICAgICAgICAgICAgIGlmICh2aXNpYmxlX2RpY3RbYi5pZF0gIT0gbnVsbCAmJiB2aXNpYmxlX2RpY3RbYi5pZF0gPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgYi5jbGFzcy5wdXNoKFwibGluay1kaXNhYmxlZFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIC8vIGNvbnNvbGUubG9nKGNvbHVtbnMpO1xuICAgIHJldHVybiBjb2x1bW5zO1xufTtcblxuY29uc3QgYWRkX3RhYmxlX3Jvd19maWx0ZXIgPSAoZSwgYSkgPT4ge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICBsZXQga2V5ID0gdW5kZWZpbmVkO1xuICAgIGxldCBkaXNwbGF5VmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgbGV0IHJlYWxWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICBsZXQgb3BlcmF0b3IgPSAnZXEnO1xuXG4gICAgLy8gUmVhZCB0YWcga2V5IGFuZCB2YWx1ZSBmcm9tIHRoZSA8YT4gaXRzZWxmIGlmIHByb3ZpZGVkXG4gICAgaWYgKGEuZGF0YSgndGFnS2V5JykgIT0gdW5kZWZpbmVkKSBrZXkgPSBhLmRhdGEoJ3RhZ0tleScpO1xuICAgIGlmIChhLmRhdGEoJ3RhZ1JlYWx2YWx1ZScpICE9IHVuZGVmaW5lZCkgcmVhbFZhbHVlID0gYS5kYXRhKCd0YWdSZWFsdmFsdWUnKTtcbiAgICBlbHNlIGlmIChhLmRhdGEoJ3RhZ1ZhbHVlJykgIT0gdW5kZWZpbmVkKSByZWFsVmFsdWUgPSBhLmRhdGEoJ3RhZ1ZhbHVlJyk7XG4gICAgaWYgKGEuZGF0YSgndGFnT3BlcmF0b3InKSAhPSB1bmRlZmluZWQpIG9wZXJhdG9yID0gYS5kYXRhKCd0YWdPcGVyYXRvcicpO1xuXG4gICAgbGV0IGZpbHRlciA9IHtcbiAgICAgICAgaWQ6IGtleSxcbiAgICAgICAgdmFsdWU6IHJlYWxWYWx1ZSxcbiAgICAgICAgb3BlcmF0b3I6IG9wZXJhdG9yLFxuICAgIH07XG4gICAgYWRkX2ZpbHRlcihmaWx0ZXIpO1xufVxuXG5mdW5jdGlvbiBhZGRfdG9wX3RhYmxlX2ZpbHRlcihvcHQsIGV2ZW50KSB7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgbGV0IGZpbHRlciA9IHtcbiAgICAgICAgaWQ6IG9wdC5rZXksXG4gICAgICAgIHZhbHVlOiBvcHQudmFsdWUsXG4gICAgICAgIG9wZXJhdG9yOiBvcHQub3BlcmF0b3IsXG4gICAgfTtcbiAgICBhZGRfZmlsdGVyKGZpbHRlcik7XG59XG5cbmZ1bmN0aW9uIGFkZF9maWx0ZXIoZmlsdGVyKSB7XG4gICAgaWYgKHJhbmdlX3BpY2tlci52YWx1ZS5pc19maWx0ZXJfZGVmaW5lZChmaWx0ZXIpKSB7XG4gICAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChudG9wbmdfY3VzdG9tX2V2ZW50cy5TSE9XX01PREFMX0ZJTFRFUlMsIGZpbHRlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKFwicXVlcnlfcHJlc2V0XCIsIFwiXCIpO1xuICAgICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoZmlsdGVyLmlkLCBgJHtmaWx0ZXIudmFsdWV9OyR7ZmlsdGVyLm9wZXJhdG9yfWApO1xuICAgICAgICBudG9wbmdfdXJsX21hbmFnZXIucmVsb2FkX3VybCgpO1xuICAgIH1cbn1cblxuY29uc3QgZ2V0X2V4dHJhX3BhcmFtc19vYmogPSAoKSA9PiB7XG4gICAgbGV0IGV4dHJhX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX29iamVjdCgpO1xuICAgIHJldHVybiBleHRyYV9wYXJhbXM7XG59O1xuXG5mdW5jdGlvbiBjbGlja19uYXZiYXJfaXRlbShpdGVtKSB7XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCdwYWdlJywgaXRlbS5wYWdlX25hbWUpO1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5yZWxvYWRfdXJsKCk7XG59XG5cbmZ1bmN0aW9uIHNob3dfbW9kYWxfYWxlcnRzX2ZpbHRlcihhbGVydCkge1xuICAgIGN1cnJlbnRfYWxlcnQudmFsdWUgPSBhbGVydDtcbiAgICBtb2RhbF9hbGVydHNfZmlsdGVyLnZhbHVlLnNob3coKTtcbn1cblxuZnVuY3Rpb24gZ2V0X3Blcm1hbmVudF9saW5rKCkge1xuICAgIGNvbnN0ICR0aGlzID0gJChwZXJtYW5lbnRfbGlua19idXR0b24udmFsdWUpO1xuICAgIGNvbnN0IHBsYWNlaG9sZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICBwbGFjZWhvbGRlci52YWx1ZSA9IGxvY2F0aW9uLmhyZWY7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChwbGFjZWhvbGRlcik7XG4gICAgcGxhY2Vob2xkZXIuc2VsZWN0KCk7XG5cbiAgICAvLyBjb3B5IHRoZSB1cmwgdG8gdGhlIGNsaXBib2FyZCBmcm9tIHRoZSBwbGFjZWhvbGRlclxuICAgIGRvY3VtZW50LmV4ZWNDb21tYW5kKFwiY29weVwiKTtcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHBsYWNlaG9sZGVyKTtcbiAgICAkdGhpcy5hdHRyKFwidGl0bGVcIiwgYCR7X2kxOG4oJ2NvcGllZCcpfSFgKVxuICAgICAgICAudG9vbHRpcChcImRpc3Bvc2VcIilcbiAgICAgICAgLnRvb2x0aXAoKVxuICAgICAgICAudG9vbHRpcChcInNob3dcIik7XG59XG5cbmZ1bmN0aW9uIHNob3dfbW9kYWxfdHJhZmZpY19leHRyYWN0aW9uKCkge1xuICAgIG1vZGFsX3RyYWZmaWNfZXh0cmFjdGlvbi52YWx1ZS5zaG93KCk7XG59XG5cbmZ1bmN0aW9uIHNob3dfbW9kYWxfc25hcHNob3QoKSB7XG4gICAgbW9kYWxfc25hcHNob3QudmFsdWUuc2hvdygpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBhZGRfZXhjbHVkZShwYXJhbXMpIHtcbiAgICBwYXJhbXMuY3NyZiA9IHByb3BzLmNvbnRleHQuY3NyZjtcbiAgICBsZXQgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9hZGQvYWxlcnQvZXhjbHVzaW9uLmx1YWA7XG4gICAgdHJ5IHtcbiAgICAgICAgbGV0IGhlYWRlcnMgPSB7XG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIH07XG4gICAgICAgIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcykgfSk7XG4gICAgICAgIGxldCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfcGFyYW1zKCk7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgLy90b2RvIHJlbG9hZFRhYmxlKCR0YWJsZSwgdXJsX3BhcmFtcyk7XG4gICAgICAgICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9jdXN0b21fZXZlbnQobnRvcG5nX2N1c3RvbV9ldmVudHMuU0hPV19HTE9CQUxfQUxFUlRfSU5GTywgeyB0ZXh0X2h0bWw6IF9pMThuKCdjaGVja19leGNsdXNpb24uZGlzYWJsZV93YXJuJyksIHR5cGU6IFwiYWxlcnQtaW5mb1wiLCB0aW1lb3V0OiAyIH0pO1xuICAgICAgICB9LCAxMDAwKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcmVmcmVzaF9wYWdlX2NvbXBvbmVudHMobm90X3JlZnJlc2hfdGFibGUpIHtcbiAgICBsZXQgdCA9IHRhYmxlX2Zsb3dzLnZhbHVlO1xuICAgIGxldCBjID0gY2hhcnQudmFsdWU7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGlmICghbm90X3JlZnJlc2hfdGFibGUpIHtcbiAgICAgICAgICAgIHQucmVmcmVzaF90YWJsZSgpO1xuICAgICAgICB9XG4gICAgICAgIGMudXBkYXRlX2NoYXJ0KCk7XG4gICAgfSwgMSAqIDEwMDApO1xufVxuXG5mdW5jdGlvbiBvbl90YWJsZV9jdXN0b21fZXZlbnQoZXZlbnQpIHtcbiAgICBsZXQgZXZlbnRzX21hbmFnZWQgPSB7XG4gICAgICAgIFwiY2xpY2tfYnV0dG9uX2luZm9cIjogY2xpY2tfYnV0dG9uX2luZm8sXG4gICAgICAgIFwiY2xpY2tfYnV0dG9uX2Zsb3dfYWxlcnRzXCI6IGNsaWNrX2J1dHRvbl9mbG93X2FsZXJ0cyxcbiAgICAgICAgXCJjbGlja19idXR0b25faGlzdG9yaWNhbF9mbG93c1wiOiBjbGlja19idXR0b25faGlzdG9yaWNhbF9mbG93cyxcbiAgICAgICAgXCJjbGlja19idXR0b25fcGNhcF9kb3dubG9hZFwiOiBjbGlja19idXR0b25fcGNhcF9kb3dubG9hZCxcbiAgICAgICAgXCJjbGlja19idXR0b25fZmxvd3NcIjogY2xpY2tfYnV0dG9uX2Zsb3dzLFxuICAgIH07XG4gICAgaWYgKGV2ZW50c19tYW5hZ2VkW2V2ZW50LmV2ZW50X2lkXSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZXZlbnRzX21hbmFnZWRbZXZlbnQuZXZlbnRfaWRdKGV2ZW50KTtcbn1cblxuZnVuY3Rpb24gY2xpY2tfYnV0dG9uX2luZm8oZXZlbnQpIHtcbiAgICBjb25zdCBmbG93ID0gZXZlbnQucm93O1xuICAgIGNvbnN0IGhyZWYgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9kYl9mbG93X2RldGFpbHMubHVhP3Jvd19pZD0ke2Zsb3cucm93aWR9JnRzdGFtcD0ke2Zsb3cudHN0YW1wfSZpbnN0YW5jZV9uYW1lPSR7Zmxvdy5OVE9QTkdfSU5TVEFOQ0VfTkFNRX1gO1xuICAgIHdpbmRvdy5vcGVuKGhyZWYsIFwiX2JsYW5rXCIpO1xufVxuXG5mdW5jdGlvbiBjbGlja19idXR0b25fcGNhcF9kb3dubG9hZChldmVudCkge1xuICAgIGNvbnN0IGZsb3cgPSBldmVudC5yb3c7XG4gICAgY29uc3QgZXBvY2hfaW50ZXJ2YWwgPSB7IGVwb2NoX2JlZ2luOiBmbG93Py5maWx0ZXI/LmVwb2NoX2JlZ2luLCBlcG9jaF9lbmQ6IGZsb3c/LmZpbHRlcj8uZXBvY2hfZW5kIH07XG4gICAgbW9kYWxfdHJhZmZpY19leHRyYWN0aW9uLnZhbHVlLnNob3coZmxvdz8uZmlsdGVyPy5icGYsIGVwb2NoX2ludGVydmFsKTtcbn1cblxuZnVuY3Rpb24gY2xpY2tfYnV0dG9uX2hpc3RvcmljYWxfZmxvd3MoZXZlbnQpIHtcbiAgICBjb25zdCBmbG93ID0gZXZlbnQucm93O1xuICAgIGxldCBmaWx0ZXJzX3BhcmFtc19vYmplY3QgPSB7fTtcbiAgICBmb3IgKGxldCBrZXkgaW4gZmxvdykge1xuICAgICAgICBsZXQgZmlsdGVyX2tleSA9IGtleTtcbiAgICAgICAgaWYgKGZsb3dba2V5XS50YWdfa2V5ICE9IG51bGwgJiYgZmxvd1trZXldLnRhZ19rZXkgIT0gXCJcIikge1xuICAgICAgICAgICAgZmlsdGVyX2tleSA9IGZsb3dba2V5XS50YWdfa2V5O1xuICAgICAgICB9XG4gICAgICAgIGlmIChmbG93W2tleV0udmFsdWUgPT0gbnVsbCAmJiBmbG93W2tleV0udmFsdWUgIT0gXCJcIikgeyBjb250aW51ZTsgfVxuICAgICAgICBsZXQgZmlsdGVyID0gYCR7Zmxvd1trZXldLnZhbHVlfTtlcWA7XG4gICAgICAgIGZpbHRlcnNfcGFyYW1zX29iamVjdFtmaWx0ZXJfa2V5XSA9IGZpbHRlcjtcbiAgICB9XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKFwicXVlcnlfcHJlc2V0XCIsIFwiXCIpO1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5hZGRfb2JqX3RvX3VybChmaWx0ZXJzX3BhcmFtc19vYmplY3QpO1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5yZWxvYWRfdXJsKCk7XG59XG5cbmZ1bmN0aW9uIGNsaWNrX2J1dHRvbl9mbG93X2FsZXJ0cyhldmVudCkge1xuICAgIGNvbnN0IGZsb3cgPSBldmVudC5yb3c7XG4gICAgaWYgKGZsb3cuYWxlcnRzX3VybCkge1xuICAgICAgICBudG9wbmdfdXJsX21hbmFnZXIuZ29fdG9fdXJsKGZsb3cuYWxlcnRzX3VybCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjbGlja19idXR0b25fZmxvd3MoZXZlbnQpIHtcbiAgICBjb25zdCByb3dfZGF0YSA9IGV2ZW50LnJvdztcbiAgICBjb25zdCBlcG9jaF9iZWdpbiA9IHJvd19kYXRhLmZpbHRlci5lcG9jaF9iZWdpbjtcbiAgICBjb25zdCBlcG9jaF9lbmQgPSByb3dfZGF0YS5maWx0ZXIuZXBvY2hfZW5kO1xuICAgIGNvbnN0IGNsaV9pcCA9IHJvd19kYXRhLmZsb3cuY2xpX2lwLnZhbHVlO1xuICAgIGNvbnN0IHNydl9pcCA9IHJvd19kYXRhLmZsb3cuc3J2X2lwLnZhbHVlO1xuICAgIGNvbnN0IHNydl9wb3J0ID0gcm93X2RhdGEuZmxvdy5zcnZfcG9ydDtcbiAgICBjb25zdCBwcm9iZV9pcCA9IHJvd19kYXRhLnByb2JlX2lwLnZhbHVlO1xuICAgIGNvbnN0IGluc3RhbmNlX25hbWUgPSByb3dfZGF0YS5OVE9QTkdfSU5TVEFOQ0VfTkFNRTtcblxuICAgIGNvbnN0IHZsYW5faWQgPSByb3dfZGF0YS52bGFuX2lkLnZhbHVlO1xuICAgIGxldCBhc192bGFuID0gdmxhbl9pZCAhPSAwO1xuXG4gICAgY29uc3Qgb3V0cHV0X3NubXAgPSByb3dfZGF0YS5vdXRwdXRfc25tcC52YWx1ZTtcbiAgICBsZXQgYXNfb3V0cHV0X3NubXAgPSBvdXRwdXRfc25tcCAhPSAwO1xuICAgIGNvbnN0IGlucHV0X3NubXAgPSByb3dfZGF0YS5pbnB1dF9zbm1wLnZhbHVlO1xuICAgIGxldCBhc19pbnB1dF9zbm1wID0gaW5wdXRfc25tcCAhPSAwO1xuXG4gICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2RiX3NlYXJjaC5sdWE/YWdncmVnYXRlZD1mYWxzZSZlcG9jaF9iZWdpbj0ke2Vwb2NoX2JlZ2lufSZlcG9jaF9lbmQ9JHtlcG9jaF9lbmR9JmNsaV9pcD0ke2NsaV9pcH07ZXEmc3J2X2lwPSR7c3J2X2lwfTtlcSZzcnZfcG9ydD0ke3Nydl9wb3J0fTtlcSZwcm9iZV9pcD0ke3Byb2JlX2lwfTtlcSZpbnN0YW5jZV9uYW1lPSR7aW5zdGFuY2VfbmFtZX1gO1xuICAgIGlmIChhc192bGFuKSB7XG4gICAgICAgIHVybCA9IHVybCArIGAmdmxhbl9pZD0ke3ZsYW5faWR9O2VxYDtcbiAgICB9XG5cbiAgICBpZiAoYXNfaW5wdXRfc25tcCkge1xuICAgICAgICB1cmwgPSB1cmwgKyBgJmlucHV0X3NubXA9JHtpbnB1dF9zbm1wfTtlcWA7XG4gICAgfVxuXG4gICAgaWYgKGFzX291dHB1dF9zbm1wKSB7XG4gICAgICAgIHVybCA9IHVybCArIGAmb3V0cHV0X3NubXA9JHtvdXRwdXRfc25tcH07ZXFgO1xuICAgIH1cblxuICAgIG50b3BuZ191cmxfbWFuYWdlci5nb190b191cmwodXJsKTtcbn1cblxuZnVuY3Rpb24gZ2V0X3F1ZXJ5X3ByZXNldHNfc3luY19rZXkoKSB7XG4gICAgcmV0dXJuIGAke3BhZ2VfaWR9X3F1ZXJ5X3ByZXNldHNgO1xufVxuXG5mdW5jdGlvbiBnZXRfc3RhdHVzX3ZpZXcoKSB7XG4gICAgbGV0IHN0YXR1c192aWV3ID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJzdGF0dXNcIik7XG4gICAgaWYgKHN0YXR1c192aWV3ID09IG51bGwgfHwgc3RhdHVzX3ZpZXcgPT0gXCJcIikge1xuICAgICAgICBzdGF0dXNfdmlldyA9IFwiaGlzdG9yaWNhbFwiO1xuICAgIH1cbiAgICByZXR1cm4gc3RhdHVzX3ZpZXc7XG59XG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPjwvc3R5bGU+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuXHQ8ZGl2IHN0eWxlPVwid2lkdGg6MTAwJSBoZWlnaHQ6MzgwcHg7XCIgY2xhc3M9XCJ0ZXh0LWVuZCBtYi0yXCI+XG5cdFx0PGxhYmVsIGNsYXNzPVwiZm9ybS1jaGVjay1sYWJlbCBmb3JtLWNvbnRyb2wtc21cIiB2LWZvcj1cIihpdGVtLCBpKSBpbiAgdGltZXNlcmllc19saXN0IFwiPlxuXHRcdFx0PGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNsYXNzPVwiZm9ybS1jaGVjay1pbnB1dCBhbGlnbi1taWRkbGUgbXQtMFwiIEBjbGljaz1cImNoYW5nZV92aXNpYmlsaXR5KCFpdGVtLmNoZWNrZWQsIGkpXCJcblx0XHRcdFx0OmNoZWNrZWQ9XCJpdGVtLmNoZWNrZWRcIiBzdHlsZT1cImJvcmRlci1jb2xvcjogIzBkNmVmZDtcIiA6c3R5bGU9XCJ7IGJhY2tncm91bmRDb2xvcjogaXRlbS5jb2xvciB9XCI+XG5cdFx0XHR7eyBpdGVtLm5hbWUgfX1cblx0XHQ8L2xhYmVsPlxuXHQ8L2Rpdj5cblx0PGRpdiB2LWlmPVwiZGlzYWJsZV9wb2ludGVyX2V2ZW50cyA9PSB0cnVlXCIgY2xhc3M9XCJtYi0zXCIgc3R5bGU9XCJ3aWR0aDoxMDAlO3BvaW50ZXItZXZlbnRzOm5vbmU7XCIgcmVmPVwiY2hhcnRcIj48L2Rpdj5cblx0PGRpdiB2LWVsc2UgY2xhc3M9XCJtYi0zXCIgc3R5bGU9XCJ3aWR0aDoxMDAlO1wiIHJlZj1cImNoYXJ0XCI+PC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuXHRjb21wb25lbnRzOiB7XG5cdH0sXG5cdHByb3BzOiB7XG5cdFx0aWQ6IFN0cmluZyxcblx0XHRjaGFydF90eXBlOiBTdHJpbmcsXG5cdFx0cmVnaXN0ZXJfb25fc3RhdHVzX2NoYW5nZTogQm9vbGVhbixcblx0XHRiYXNlX3VybF9yZXF1ZXN0OiBTdHJpbmcsXG5cdFx0Z2V0X3BhcmFtc191cmxfcmVxdWVzdDogRnVuY3Rpb24sXG5cdFx0Z2V0X2N1c3RvbV9jaGFydF9vcHRpb25zOiBGdW5jdGlvbixcblx0XHRkaXNhYmxlX3BvaW50ZXJfZXZlbnRzOiBCb29sZWFuLFxuXHR9LFxuXHRlbWl0czogW1wiYXBwbHlcIiwgXCJoaWRkZW5cIiwgXCJzaG93ZWRcIiwgXCJjaGFydF9yZWxvYWRlZFwiLCBcInpvb21cIl0sXG5cdC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIG9mIHRoZSBjb21wb25lbnQgY2FsbGVkLCBpdCdzIGNhbGxlZCBiZWZvcmUgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cblx0Y3JlYXRlZCgpIHsgfSxcblx0YmVmb3JlVW5tb3VudCgpIHsgfSxcblx0ZGF0YSgpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0Y2hhcnQ6IG51bGwsXG5cdFx0XHRjaGFydF9vcHRpb25zOiBudWxsLFxuXHRcdFx0ZnJvbV96b29tOiBmYWxzZSxcblx0XHRcdHRpbWVzZXJpZXNfdmlzaWJpbGl0eTogbnVsbCxcblx0XHRcdHRpbWVzZXJpZXNfbGlzdDogW10sXG5cdFx0XHQvL2kxOG46ICh0KSA9PiBpMThuKHQpLFxuXHRcdH07XG5cdH0sXG5cdC8qKiBUaGlzIG1ldGhvZCBpcyB0aGUgZmlyc3QgbWV0aG9kIGNhbGxlZCBhZnRlciBodG1sIHRlbXBsYXRlIGNyZWF0aW9uLiAqL1xuXHRhc3luYyBtb3VudGVkKCkge1xuXHRcdGF3YWl0IHRoaXMuaW5pdCgpO1xuXHRcdG50b3BuZ19zeW5jLnJlYWR5KHRoaXMuJHByb3BzW1wiaWRcIl0pO1xuXHR9LFxuXHRtZXRob2RzOiB7XG5cdFx0aW5pdDogYXN5bmMgZnVuY3Rpb24gKCkge1xuXHRcdFx0bGV0IHN0YXR1cyA9IG50b3BuZ19zdGF0dXNfbWFuYWdlci5nZXRfc3RhdHVzKCk7XG5cdFx0XHRsZXQgdXJsX3JlcXVlc3QgPSB0aGlzLmdldF91cmxfcmVxdWVzdChzdGF0dXMpO1xuXHRcdFx0aWYgKHRoaXMucmVnaXN0ZXJfb25fc3RhdHVzX2NoYW5nZSkge1xuXHRcdFx0XHR0aGlzLnJlZ2lzdGVyX3N0YXR1cyhzdGF0dXMpO1xuXHRcdFx0fVxuXHRcdFx0YXdhaXQgdGhpcy5kcmF3X2NoYXJ0KHVybF9yZXF1ZXN0KTtcblx0XHR9LFxuXHRcdGdldF9pbWFnZTogZnVuY3Rpb24gKGltYWdlKSB7XG5cdFx0XHRyZXR1cm4gRHlncmFwaC5FeHBvcnQuYXNQTkcodGhpcy5jaGFydCwgaW1hZ2UsIHRoaXMuJHJlZnNbXCJjaGFydFwiXSk7XG5cdFx0fSxcblx0XHRjaGFuZ2VfdmlzaWJpbGl0eTogZnVuY3Rpb24gKHZpc2libGUsIGlkKSB7XG5cdFx0XHRpZiAodGhpcy50aW1lc2VyaWVzX2xpc3RbaWRdICE9IG51bGwpIHtcblx0XHRcdFx0dGhpcy50aW1lc2VyaWVzX2xpc3RbaWRdW1wiY2hlY2tlZFwiXSA9IHZpc2libGVcblx0XHRcdFx0dGhpcy5jaGFydC5zZXRWaXNpYmlsaXR5KGlkLCB2aXNpYmxlKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHJlZ2lzdGVyX3N0YXR1czogZnVuY3Rpb24gKHN0YXR1cykge1xuXHRcdFx0bGV0IHVybF9yZXF1ZXN0ID0gdGhpcy5nZXRfdXJsX3JlcXVlc3Qoc3RhdHVzKTtcblx0XHRcdG50b3BuZ19zdGF0dXNfbWFuYWdlci5vbl9zdGF0dXNfY2hhbmdlKHRoaXMuaWQsIChuZXdfc3RhdHVzKSA9PiB7XG5cdFx0XHRcdGlmICh0aGlzLmZyb21fem9vbSA9PSB0cnVlKSB7XG5cdFx0XHRcdFx0dGhpcy5mcm9tX3pvb20gPSBmYWxzZTtcblx0XHRcdFx0XHQvL3JldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHRsZXQgbmV3X3VybF9yZXF1ZXN0ID0gdGhpcy5nZXRfdXJsX3JlcXVlc3QobmV3X3N0YXR1cyk7XG5cdFx0XHRcdGlmIChuZXdfdXJsX3JlcXVlc3QgPT0gdXJsX3JlcXVlc3QpIHtcblx0XHRcdFx0XHR1cmxfcmVxdWVzdCA9IG5ld191cmxfcmVxdWVzdDtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0dXJsX3JlcXVlc3QgPSBuZXdfdXJsX3JlcXVlc3Q7XG5cdFx0XHRcdHRoaXMudXBkYXRlX2NoYXJ0KG5ld191cmxfcmVxdWVzdCk7XG5cdFx0XHR9LCBmYWxzZSk7XG5cdFx0fSxcblx0XHRnZXRfdXJsX3JlcXVlc3Q6IGZ1bmN0aW9uIChzdGF0dXMpIHtcblx0XHRcdGxldCB1cmxfcGFyYW1zO1xuXHRcdFx0aWYgKHRoaXMuJHByb3BzLmdldF9wYXJhbXNfdXJsX3JlcXVlc3QgIT0gbnVsbCkge1xuXHRcdFx0XHRpZiAoc3RhdHVzID09IG51bGwpIHtcblx0XHRcdFx0XHRzdGF0dXMgPSBudG9wbmdfc3RhdHVzX21hbmFnZXIuZ2V0X3N0YXR1cygpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHVybF9wYXJhbXMgPSB0aGlzLiRwcm9wcy5nZXRfcGFyYW1zX3VybF9yZXF1ZXN0KHN0YXR1cyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfcGFyYW1zKCk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBgJHt0aGlzLiRwcm9wcy5iYXNlX3VybF9yZXF1ZXN0IHx8ICcnfT8ke3VybF9wYXJhbXN9YDtcblx0XHR9LFxuXHRcdGdldF9jaGFydF9vcHRpb25zOiBhc3luYyBmdW5jdGlvbiAodXJsX3JlcXVlc3QpIHtcblx0XHRcdGxldCBjaGFydF9vcHRpb25zID0gbnVsbDtcblx0XHRcdGNvbnN0IGRhdGVfZm9ybWF0ID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuZ2V0X2RhdGVfZm9ybWF0KGZhbHNlLCB0aGlzLiRwcm9wcy5jc3JmLCBodHRwX3ByZWZpeCk7XG5cblx0XHRcdC8qIFJldHJpZXZlIHRoZSBjaGFydCBvcHRpb25zICovXG5cdFx0XHRpZiAodGhpcy4kcHJvcHMuZ2V0X2N1c3RvbV9jaGFydF9vcHRpb25zID09IG51bGwpIHtcblx0XHRcdFx0Y2hhcnRfb3B0aW9ucyA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmxfcmVxdWVzdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjaGFydF9vcHRpb25zID0gYXdhaXQgdGhpcy4kcHJvcHMuZ2V0X2N1c3RvbV9jaGFydF9vcHRpb25zKHVybF9yZXF1ZXN0KTtcblx0XHRcdH1cblx0XHRcdC8qIFNldCB0aGUgZGF0ZSBkZXBlbmRpbmcgb24gdGhlIHNlcnZlciBkYXRlICovXG5cdFx0XHRpZiAoIWNoYXJ0X29wdGlvbnM/LmF4ZXM/Lng/LmF4aXNMYWJlbEZvcm1hdHRlcikge1xuXHRcdFx0XHRjaGFydF9vcHRpb25zLmF4ZXMueC5heGlzTGFiZWxGb3JtYXR0ZXIgPSBmdW5jdGlvbiAoZGF0ZSkge1xuXHRcdFx0XHRcdHJldHVybiBudG9wbmdfdXRpbGl0eS5mcm9tX3V0Y190b19zZXJ2ZXJfZGF0ZV9mb3JtYXQoZGF0ZSwgZGF0ZV9mb3JtYXQpO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0aWYgKCFjaGFydF9vcHRpb25zPy5heGVzLng/LnZhbHVlRm9ybWF0dGVyKSB7XG5cdFx0XHRcdGNoYXJ0X29wdGlvbnMuYXhlcy54LnZhbHVlRm9ybWF0dGVyID0gZnVuY3Rpb24gKGRhdGUpIHtcblx0XHRcdFx0XHRyZXR1cm4gbnRvcG5nX3V0aWxpdHkuZnJvbV91dGNfdG9fc2VydmVyX2RhdGVfZm9ybWF0KGRhdGUsIGRhdGVfZm9ybWF0KTtcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHRcdC8qIEVtaXQgdGhlIGNoYXJ0X3JlbG9hZGVkIGV2ZW50ICovXG5cdFx0XHR0aGlzLiRlbWl0KCdjaGFydF9yZWxvYWRlZCcsIGNoYXJ0X29wdGlvbnMpO1xuXHRcdFx0cmV0dXJuIGNoYXJ0X29wdGlvbnM7XG5cdFx0fSxcblx0XHRkcmF3X2NoYXJ0OiBhc3luYyBmdW5jdGlvbiAodXJsX3JlcXVlc3QpIHtcblx0XHRcdGxldCBjaGFydF9vcHRpb25zID0gYXdhaXQgdGhpcy5nZXRfY2hhcnRfb3B0aW9ucyh1cmxfcmVxdWVzdCk7XG5cdFx0XHRjb25zdCBkYXRhID0gY2hhcnRfb3B0aW9ucy5kYXRhIHx8IFtdO1xuXHRcdFx0Y2hhcnRfb3B0aW9ucy5kYXRhID0gbnVsbDtcblx0XHRcdGNoYXJ0X29wdGlvbnMuem9vbUNhbGxiYWNrID0gdGhpcy5vbl96b29tZWQ7XG5cdFx0XHR0aGlzLnRpbWVzZXJpZXNfbGlzdCA9IFtdO1xuXHRcdFx0bGV0IHZpc2liaWxpdHkgPSBbXTtcblx0XHRcdGxldCBpZCA9IDA7XG5cdFx0XHRpZiAoIWNoYXJ0X29wdGlvbnMuZGlzYWJsZVRzTGlzdCkge1xuXHRcdFx0XHRmb3IgKGNvbnN0IGtleSBpbiBjaGFydF9vcHRpb25zLnNlcmllcykge1xuXHRcdFx0XHRcdHRoaXMudGltZXNlcmllc19saXN0LnB1c2goeyBuYW1lOiBrZXksIGNoZWNrZWQ6IHRydWUsIGlkOiBpZCwgY29sb3I6IGNoYXJ0X29wdGlvbnMuY29sb3JzW2lkXSArIFwiIWltcG9ydGFudFwiIH0pO1xuXHRcdFx0XHRcdGlkID0gaWQgKyAxO1xuXHRcdFx0XHRcdHZpc2liaWxpdHkucHVzaCh0cnVlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dGhpcy5jaGFydCA9IG5ldyBEeWdyYXBoKHRoaXMuJHJlZnNbXCJjaGFydFwiXSwgZGF0YSwgY2hhcnRfb3B0aW9ucyk7XG5cdFx0fSxcblx0XHR1cGRhdGVfY2hhcnQ6IGFzeW5jIGZ1bmN0aW9uICh1cmxfcmVxdWVzdCkge1xuXHRcdFx0aWYgKHRoaXMuY2hhcnQpIHtcblx0XHRcdFx0bGV0IGNoYXJ0X29wdGlvbnMgPSBhd2FpdCB0aGlzLmdldF9jaGFydF9vcHRpb25zKHVybF9yZXF1ZXN0KTtcblx0XHRcdFx0dGhpcy5jaGFydC51cGRhdGVDaGFydChjaGFydF9vcHRpb25zKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHVwZGF0ZV9jaGFydF9vcHRpb25zOiBmdW5jdGlvbiAoY2hhcnRfb3B0aW9ucykge1xuXHRcdFx0aWYgKHRoaXMuY2hhcnQpIHtcblx0XHRcdFx0dGhpcy5jaGFydC51cGRhdGVDaGFydChjaGFydF9vcHRpb25zKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHVwZGF0ZV9jaGFydF9zZXJpZXM6IGZ1bmN0aW9uIChzZXJpZXMpIHtcblx0XHRcdGlmIChzZXJpZXMgPT0gbnVsbCkgeyByZXR1cm47IH1cblx0XHRcdGlmICh0aGlzLmNoYXJ0KSB7XG5cdFx0XHRcdHRoaXMuY2hhcnQudXBkYXRlT3B0aW9ucyh7ICdmaWxlJzogc2VyaWVzIH0pO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0b25fem9vbWVkOiBmdW5jdGlvbiAobWluRGF0ZSwgbWF4RGF0ZSkge1xuXHRcdFx0dGhpcy5mcm9tX3pvb20gPSB0cnVlO1xuXHRcdFx0Y29uc3QgYmVnaW4gPSBtb21lbnQobWluRGF0ZSk7XG5cdFx0XHRjb25zdCBlbmQgPSBtb21lbnQobWF4RGF0ZSk7XG5cdFx0XHQvLyB0aGUgdGltZXN0YW1wcyBhcmUgaW4gbWlsbGlzZWNvbmRzLCBjb252ZXJ0IHRoZW0gaW50byBzZWNvbmRzXG5cdFx0XHRsZXQgbmV3X2Vwb2NoX3N0YXR1cyA9IHsgZXBvY2hfYmVnaW46IE51bWJlci5wYXJzZUludChiZWdpbi51bml4KCkpLCBlcG9jaF9lbmQ6IE51bWJlci5wYXJzZUludChlbmQudW5peCgpKSB9O1xuXHRcdFx0bnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfZXZlbnQobnRvcG5nX2V2ZW50cy5FUE9DSF9DSEFOR0UsIG5ld19lcG9jaF9zdGF0dXMsIHRoaXMuaWQpO1xuXHRcdFx0dGhpcy4kZW1pdCgnem9vbScsIG5ld19lcG9jaF9zdGF0dXMpO1xuXHRcdH0sXG5cdH0sXG59O1xuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cbi5keWdyYXBoLWxlZ2VuZCB7XG5cdGNvbG9yOiAjMTExMTExO1xuXHRiYWNrZ3JvdW5kLWNvbG9yOiAjRkZGRkZGICFpbXBvcnRhbnQ7XG5cdGJvcmRlci1jb2xvcjogI2E3YTZhNjtcblx0Ym9yZGVyLXN0eWxlOiBzb2xpZDtcblx0Ym9yZGVyLXdpZHRoOiB0aGluO1xuXHR6LWluZGV4OiA4MCAhaW1wb3J0YW50O1xuXHRib3gtc2hhZG93OiAwIDAuNXJlbSAxcmVtIHJnYmEoMCwgMCwgMCwgLjE1KTtcblx0Ym9yZGVyLXJhZGl1czogMC4zNzVyZW07XG5cdHBvc2l0aW9uOiBmaXhlZDtcblx0d2lkdGg6IGF1dG87XG5cdHdvcmQtd3JhcDogYnJlYWstd29yZDtcblx0cGFkZGluZzogOHB4ICFpbXBvcnRhbnQ7XG59XG5cbi5keWdyYXBoLWxlZ2VuZD5zcGFuIHtcblx0Y29sb3I6ICMxMTExMTE7XG5cdHBhZGRpbmctbGVmdDogNXB4O1xuXHRwYWRkaW5nLXJpZ2h0OiAycHg7XG5cdG1hcmdpbi1sZWZ0OiAtNXB4O1xuXHRiYWNrZ3JvdW5kLWNvbG9yOiAjRkZGRkZGICFpbXBvcnRhbnQ7XG59XG5cbi5keWdyYXBoLWxlZ2VuZD5zcGFuOmZpcnN0LWNoaWxkIHtcblx0bWFyZ2luLXRvcDogMnB4O1xufVxuPC9zdHlsZT5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG5cdDxkaXYgc3R5bGU9XCJ3aWR0aDoxMDAlIGhlaWdodDozODBweDtcIiBjbGFzcz1cInRleHQtZW5kIG1iLTJcIj5cblx0XHQ8bGFiZWwgY2xhc3M9XCJmb3JtLWNoZWNrLWxhYmVsIGZvcm0tY29udHJvbC1zbVwiIHYtZm9yPVwiKGl0ZW0sIGkpIGluICB0aW1lc2VyaWVzX2xpc3QgXCI+XG5cdFx0XHQ8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0IGFsaWduLW1pZGRsZSBtdC0wXCIgQGNsaWNrPVwiY2hhbmdlX3Zpc2liaWxpdHkoIWl0ZW0uY2hlY2tlZCwgaSlcIlxuXHRcdFx0XHQ6Y2hlY2tlZD1cIml0ZW0uY2hlY2tlZFwiIHN0eWxlPVwiYm9yZGVyLWNvbG9yOiAjMGQ2ZWZkO1wiIDpzdHlsZT1cInsgYmFja2dyb3VuZENvbG9yOiBpdGVtLmNvbG9yIH1cIj5cblx0XHRcdHt7IGl0ZW0ubmFtZSB9fVxuXHRcdDwvbGFiZWw+XG5cdDwvZGl2PlxuXHQ8ZGl2IHYtaWY9XCJkaXNhYmxlX3BvaW50ZXJfZXZlbnRzID09IHRydWVcIiBjbGFzcz1cIm1iLTNcIiBzdHlsZT1cIndpZHRoOjEwMCU7cG9pbnRlci1ldmVudHM6bm9uZTtcIiByZWY9XCJjaGFydFwiPjwvZGl2PlxuXHQ8ZGl2IHYtZWxzZSBjbGFzcz1cIm1iLTNcIiBzdHlsZT1cIndpZHRoOjEwMCU7XCIgcmVmPVwiY2hhcnRcIj48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5leHBvcnQgZGVmYXVsdCB7XG5cdGNvbXBvbmVudHM6IHtcblx0fSxcblx0cHJvcHM6IHtcblx0XHRpZDogU3RyaW5nLFxuXHRcdGNoYXJ0X3R5cGU6IFN0cmluZyxcblx0XHRyZWdpc3Rlcl9vbl9zdGF0dXNfY2hhbmdlOiBCb29sZWFuLFxuXHRcdGJhc2VfdXJsX3JlcXVlc3Q6IFN0cmluZyxcblx0XHRnZXRfcGFyYW1zX3VybF9yZXF1ZXN0OiBGdW5jdGlvbixcblx0XHRnZXRfY3VzdG9tX2NoYXJ0X29wdGlvbnM6IEZ1bmN0aW9uLFxuXHRcdGRpc2FibGVfcG9pbnRlcl9ldmVudHM6IEJvb2xlYW4sXG5cdH0sXG5cdGVtaXRzOiBbXCJhcHBseVwiLCBcImhpZGRlblwiLCBcInNob3dlZFwiLCBcImNoYXJ0X3JlbG9hZGVkXCIsIFwiem9vbVwiXSxcblx0LyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2Qgb2YgdGhlIGNvbXBvbmVudCBjYWxsZWQsIGl0J3MgY2FsbGVkIGJlZm9yZSBodG1sIHRlbXBsYXRlIGNyZWF0aW9uLiAqL1xuXHRjcmVhdGVkKCkgeyB9LFxuXHRiZWZvcmVVbm1vdW50KCkgeyB9LFxuXHRkYXRhKCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRjaGFydDogbnVsbCxcblx0XHRcdGNoYXJ0X29wdGlvbnM6IG51bGwsXG5cdFx0XHRmcm9tX3pvb206IGZhbHNlLFxuXHRcdFx0dGltZXNlcmllc192aXNpYmlsaXR5OiBudWxsLFxuXHRcdFx0dGltZXNlcmllc19saXN0OiBbXSxcblx0XHRcdC8vaTE4bjogKHQpID0+IGkxOG4odCksXG5cdFx0fTtcblx0fSxcblx0LyoqIFRoaXMgbWV0aG9kIGlzIHRoZSBmaXJzdCBtZXRob2QgY2FsbGVkIGFmdGVyIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG5cdGFzeW5jIG1vdW50ZWQoKSB7XG5cdFx0YXdhaXQgdGhpcy5pbml0KCk7XG5cdFx0bnRvcG5nX3N5bmMucmVhZHkodGhpcy4kcHJvcHNbXCJpZFwiXSk7XG5cdH0sXG5cdG1ldGhvZHM6IHtcblx0XHRpbml0OiBhc3luYyBmdW5jdGlvbiAoKSB7XG5cdFx0XHRsZXQgc3RhdHVzID0gbnRvcG5nX3N0YXR1c19tYW5hZ2VyLmdldF9zdGF0dXMoKTtcblx0XHRcdGxldCB1cmxfcmVxdWVzdCA9IHRoaXMuZ2V0X3VybF9yZXF1ZXN0KHN0YXR1cyk7XG5cdFx0XHRpZiAodGhpcy5yZWdpc3Rlcl9vbl9zdGF0dXNfY2hhbmdlKSB7XG5cdFx0XHRcdHRoaXMucmVnaXN0ZXJfc3RhdHVzKHN0YXR1cyk7XG5cdFx0XHR9XG5cdFx0XHRhd2FpdCB0aGlzLmRyYXdfY2hhcnQodXJsX3JlcXVlc3QpO1xuXHRcdH0sXG5cdFx0Z2V0X2ltYWdlOiBmdW5jdGlvbiAoaW1hZ2UpIHtcblx0XHRcdHJldHVybiBEeWdyYXBoLkV4cG9ydC5hc1BORyh0aGlzLmNoYXJ0LCBpbWFnZSwgdGhpcy4kcmVmc1tcImNoYXJ0XCJdKTtcblx0XHR9LFxuXHRcdGNoYW5nZV92aXNpYmlsaXR5OiBmdW5jdGlvbiAodmlzaWJsZSwgaWQpIHtcblx0XHRcdGlmICh0aGlzLnRpbWVzZXJpZXNfbGlzdFtpZF0gIT0gbnVsbCkge1xuXHRcdFx0XHR0aGlzLnRpbWVzZXJpZXNfbGlzdFtpZF1bXCJjaGVja2VkXCJdID0gdmlzaWJsZVxuXHRcdFx0XHR0aGlzLmNoYXJ0LnNldFZpc2liaWxpdHkoaWQsIHZpc2libGUpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0cmVnaXN0ZXJfc3RhdHVzOiBmdW5jdGlvbiAoc3RhdHVzKSB7XG5cdFx0XHRsZXQgdXJsX3JlcXVlc3QgPSB0aGlzLmdldF91cmxfcmVxdWVzdChzdGF0dXMpO1xuXHRcdFx0bnRvcG5nX3N0YXR1c19tYW5hZ2VyLm9uX3N0YXR1c19jaGFuZ2UodGhpcy5pZCwgKG5ld19zdGF0dXMpID0+IHtcblx0XHRcdFx0aWYgKHRoaXMuZnJvbV96b29tID09IHRydWUpIHtcblx0XHRcdFx0XHR0aGlzLmZyb21fem9vbSA9IGZhbHNlO1xuXHRcdFx0XHRcdC8vcmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxldCBuZXdfdXJsX3JlcXVlc3QgPSB0aGlzLmdldF91cmxfcmVxdWVzdChuZXdfc3RhdHVzKTtcblx0XHRcdFx0aWYgKG5ld191cmxfcmVxdWVzdCA9PSB1cmxfcmVxdWVzdCkge1xuXHRcdFx0XHRcdHVybF9yZXF1ZXN0ID0gbmV3X3VybF9yZXF1ZXN0O1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHR1cmxfcmVxdWVzdCA9IG5ld191cmxfcmVxdWVzdDtcblx0XHRcdFx0dGhpcy51cGRhdGVfY2hhcnQobmV3X3VybF9yZXF1ZXN0KTtcblx0XHRcdH0sIGZhbHNlKTtcblx0XHR9LFxuXHRcdGdldF91cmxfcmVxdWVzdDogZnVuY3Rpb24gKHN0YXR1cykge1xuXHRcdFx0bGV0IHVybF9wYXJhbXM7XG5cdFx0XHRpZiAodGhpcy4kcHJvcHMuZ2V0X3BhcmFtc191cmxfcmVxdWVzdCAhPSBudWxsKSB7XG5cdFx0XHRcdGlmIChzdGF0dXMgPT0gbnVsbCkge1xuXHRcdFx0XHRcdHN0YXR1cyA9IG50b3BuZ19zdGF0dXNfbWFuYWdlci5nZXRfc3RhdHVzKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dXJsX3BhcmFtcyA9IHRoaXMuJHByb3BzLmdldF9wYXJhbXNfdXJsX3JlcXVlc3Qoc3RhdHVzKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9wYXJhbXMoKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGAke3RoaXMuJHByb3BzLmJhc2VfdXJsX3JlcXVlc3QgfHwgJyd9PyR7dXJsX3BhcmFtc31gO1xuXHRcdH0sXG5cdFx0Z2V0X2NoYXJ0X29wdGlvbnM6IGFzeW5jIGZ1bmN0aW9uICh1cmxfcmVxdWVzdCkge1xuXHRcdFx0bGV0IGNoYXJ0X29wdGlvbnMgPSBudWxsO1xuXHRcdFx0Y29uc3QgZGF0ZV9mb3JtYXQgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5nZXRfZGF0ZV9mb3JtYXQoZmFsc2UsIHRoaXMuJHByb3BzLmNzcmYsIGh0dHBfcHJlZml4KTtcblxuXHRcdFx0LyogUmV0cmlldmUgdGhlIGNoYXJ0IG9wdGlvbnMgKi9cblx0XHRcdGlmICh0aGlzLiRwcm9wcy5nZXRfY3VzdG9tX2NoYXJ0X29wdGlvbnMgPT0gbnVsbCkge1xuXHRcdFx0XHRjaGFydF9vcHRpb25zID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybF9yZXF1ZXN0KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNoYXJ0X29wdGlvbnMgPSBhd2FpdCB0aGlzLiRwcm9wcy5nZXRfY3VzdG9tX2NoYXJ0X29wdGlvbnModXJsX3JlcXVlc3QpO1xuXHRcdFx0fVxuXHRcdFx0LyogU2V0IHRoZSBkYXRlIGRlcGVuZGluZyBvbiB0aGUgc2VydmVyIGRhdGUgKi9cblx0XHRcdGlmICghY2hhcnRfb3B0aW9ucz8uYXhlcz8ueD8uYXhpc0xhYmVsRm9ybWF0dGVyKSB7XG5cdFx0XHRcdGNoYXJ0X29wdGlvbnMuYXhlcy54LmF4aXNMYWJlbEZvcm1hdHRlciA9IGZ1bmN0aW9uIChkYXRlKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG50b3BuZ191dGlsaXR5LmZyb21fdXRjX3RvX3NlcnZlcl9kYXRlX2Zvcm1hdChkYXRlLCBkYXRlX2Zvcm1hdCk7XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0XHRpZiAoIWNoYXJ0X29wdGlvbnM/LmF4ZXMueD8udmFsdWVGb3JtYXR0ZXIpIHtcblx0XHRcdFx0Y2hhcnRfb3B0aW9ucy5heGVzLngudmFsdWVGb3JtYXR0ZXIgPSBmdW5jdGlvbiAoZGF0ZSkge1xuXHRcdFx0XHRcdHJldHVybiBudG9wbmdfdXRpbGl0eS5mcm9tX3V0Y190b19zZXJ2ZXJfZGF0ZV9mb3JtYXQoZGF0ZSwgZGF0ZV9mb3JtYXQpO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0LyogRW1pdCB0aGUgY2hhcnRfcmVsb2FkZWQgZXZlbnQgKi9cblx0XHRcdHRoaXMuJGVtaXQoJ2NoYXJ0X3JlbG9hZGVkJywgY2hhcnRfb3B0aW9ucyk7XG5cdFx0XHRyZXR1cm4gY2hhcnRfb3B0aW9ucztcblx0XHR9LFxuXHRcdGRyYXdfY2hhcnQ6IGFzeW5jIGZ1bmN0aW9uICh1cmxfcmVxdWVzdCkge1xuXHRcdFx0bGV0IGNoYXJ0X29wdGlvbnMgPSBhd2FpdCB0aGlzLmdldF9jaGFydF9vcHRpb25zKHVybF9yZXF1ZXN0KTtcblx0XHRcdGNvbnN0IGRhdGEgPSBjaGFydF9vcHRpb25zLmRhdGEgfHwgW107XG5cdFx0XHRjaGFydF9vcHRpb25zLmRhdGEgPSBudWxsO1xuXHRcdFx0Y2hhcnRfb3B0aW9ucy56b29tQ2FsbGJhY2sgPSB0aGlzLm9uX3pvb21lZDtcblx0XHRcdHRoaXMudGltZXNlcmllc19saXN0ID0gW107XG5cdFx0XHRsZXQgdmlzaWJpbGl0eSA9IFtdO1xuXHRcdFx0bGV0IGlkID0gMDtcblx0XHRcdGlmICghY2hhcnRfb3B0aW9ucy5kaXNhYmxlVHNMaXN0KSB7XG5cdFx0XHRcdGZvciAoY29uc3Qga2V5IGluIGNoYXJ0X29wdGlvbnMuc2VyaWVzKSB7XG5cdFx0XHRcdFx0dGhpcy50aW1lc2VyaWVzX2xpc3QucHVzaCh7IG5hbWU6IGtleSwgY2hlY2tlZDogdHJ1ZSwgaWQ6IGlkLCBjb2xvcjogY2hhcnRfb3B0aW9ucy5jb2xvcnNbaWRdICsgXCIhaW1wb3J0YW50XCIgfSk7XG5cdFx0XHRcdFx0aWQgPSBpZCArIDE7XG5cdFx0XHRcdFx0dmlzaWJpbGl0eS5wdXNoKHRydWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHR0aGlzLmNoYXJ0ID0gbmV3IER5Z3JhcGgodGhpcy4kcmVmc1tcImNoYXJ0XCJdLCBkYXRhLCBjaGFydF9vcHRpb25zKTtcblx0XHR9LFxuXHRcdHVwZGF0ZV9jaGFydDogYXN5bmMgZnVuY3Rpb24gKHVybF9yZXF1ZXN0KSB7XG5cdFx0XHRpZiAodGhpcy5jaGFydCkge1xuXHRcdFx0XHRsZXQgY2hhcnRfb3B0aW9ucyA9IGF3YWl0IHRoaXMuZ2V0X2NoYXJ0X29wdGlvbnModXJsX3JlcXVlc3QpO1xuXHRcdFx0XHR0aGlzLmNoYXJ0LnVwZGF0ZUNoYXJ0KGNoYXJ0X29wdGlvbnMpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0dXBkYXRlX2NoYXJ0X29wdGlvbnM6IGZ1bmN0aW9uIChjaGFydF9vcHRpb25zKSB7XG5cdFx0XHRpZiAodGhpcy5jaGFydCkge1xuXHRcdFx0XHR0aGlzLmNoYXJ0LnVwZGF0ZUNoYXJ0KGNoYXJ0X29wdGlvbnMpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0dXBkYXRlX2NoYXJ0X3NlcmllczogZnVuY3Rpb24gKHNlcmllcykge1xuXHRcdFx0aWYgKHNlcmllcyA9PSBudWxsKSB7IHJldHVybjsgfVxuXHRcdFx0aWYgKHRoaXMuY2hhcnQpIHtcblx0XHRcdFx0dGhpcy5jaGFydC51cGRhdGVPcHRpb25zKHsgJ2ZpbGUnOiBzZXJpZXMgfSk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRvbl96b29tZWQ6IGZ1bmN0aW9uIChtaW5EYXRlLCBtYXhEYXRlKSB7XG5cdFx0XHR0aGlzLmZyb21fem9vbSA9IHRydWU7XG5cdFx0XHRjb25zdCBiZWdpbiA9IG1vbWVudChtaW5EYXRlKTtcblx0XHRcdGNvbnN0IGVuZCA9IG1vbWVudChtYXhEYXRlKTtcblx0XHRcdC8vIHRoZSB0aW1lc3RhbXBzIGFyZSBpbiBtaWxsaXNlY29uZHMsIGNvbnZlcnQgdGhlbSBpbnRvIHNlY29uZHNcblx0XHRcdGxldCBuZXdfZXBvY2hfc3RhdHVzID0geyBlcG9jaF9iZWdpbjogTnVtYmVyLnBhcnNlSW50KGJlZ2luLnVuaXgoKSksIGVwb2NoX2VuZDogTnVtYmVyLnBhcnNlSW50KGVuZC51bml4KCkpIH07XG5cdFx0XHRudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9ldmVudChudG9wbmdfZXZlbnRzLkVQT0NIX0NIQU5HRSwgbmV3X2Vwb2NoX3N0YXR1cywgdGhpcy5pZCk7XG5cdFx0XHR0aGlzLiRlbWl0KCd6b29tJywgbmV3X2Vwb2NoX3N0YXR1cyk7XG5cdFx0fSxcblx0fSxcbn07XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuLmR5Z3JhcGgtbGVnZW5kIHtcblx0Y29sb3I6ICMxMTExMTE7XG5cdGJhY2tncm91bmQtY29sb3I6ICNGRkZGRkYgIWltcG9ydGFudDtcblx0Ym9yZGVyLWNvbG9yOiAjYTdhNmE2O1xuXHRib3JkZXItc3R5bGU6IHNvbGlkO1xuXHRib3JkZXItd2lkdGg6IHRoaW47XG5cdHotaW5kZXg6IDgwICFpbXBvcnRhbnQ7XG5cdGJveC1zaGFkb3c6IDAgMC41cmVtIDFyZW0gcmdiYSgwLCAwLCAwLCAuMTUpO1xuXHRib3JkZXItcmFkaXVzOiAwLjM3NXJlbTtcblx0cG9zaXRpb246IGZpeGVkO1xuXHR3aWR0aDogYXV0bztcblx0d29yZC13cmFwOiBicmVhay13b3JkO1xuXHRwYWRkaW5nOiA4cHggIWltcG9ydGFudDtcbn1cblxuLmR5Z3JhcGgtbGVnZW5kPnNwYW4ge1xuXHRjb2xvcjogIzExMTExMTtcblx0cGFkZGluZy1sZWZ0OiA1cHg7XG5cdHBhZGRpbmctcmlnaHQ6IDJweDtcblx0bWFyZ2luLWxlZnQ6IC01cHg7XG5cdGJhY2tncm91bmQtY29sb3I6ICNGRkZGRkYgIWltcG9ydGFudDtcbn1cblxuLmR5Z3JhcGgtbGVnZW5kPnNwYW46Zmlyc3QtY2hpbGQge1xuXHRtYXJnaW4tdG9wOiAycHg7XG59XG48L3N0eWxlPlxuIiwiPHRlbXBsYXRlPlxuPGRpdj5cbiAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCI+XG4gICAgPGRpdiBjbGFzcz1cImNvbC0xMVwiPlxuICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWxcIiA+XG5cdDxiPnt7dGl0bGV9fTwvYj5cbiAgICAgIDwvbGFiZWw+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImNvbC0xXCIgdi1pZj1cInNob3dfZGVsZXRlX2J1dHRvblwiIEBjbGljaz1cImRlbGV0ZV90c1wiPlxuICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYm9yZGVyXCI+XG5cdDxzcGFuPlxuXHQgIDxpIGNsYXNzPVwiZmFzIGZhLXRyYXNoXCI+PC9pPlxuXHQ8L3NwYW4+XG4gICAgICA8L2J1dHRvbj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG4gIDxkaXYgY2xhc3M9XCJjb250YWluZXJcIj5cbiAgICAgIDxkaXYgdi1mb3I9XCJpdGVtIGluIHRpbWVzZXJpZXNcIiBjbGFzcz1cInJvdyBjdXN0b20tbXMgbWUtMiBtdC0xXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtNVwiPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjbGFzcz1cImN1c3RvbS1jb250cm9sLWlucHV0IHdoaXRlc3BhY2UgZm9ybS1jaGVjay1pbnB1dFwiIEBjaGFuZ2U9XCJ1cGRhdGVfdGltZXNlcmllc1wiIHYtbW9kZWw9XCJpdGVtLnJhd1wiPlxuICAgICAgICAgIFxuICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImN1c3RvbS1jb250cm9sLWxhYmVsIG1zLTEgZm9ybS1jaGVjay1sYWJlbFwiPnt7aXRlbS5sYWJlbH19PC9sYWJlbD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtMlwiPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjbGFzcz1cImN1c3RvbS1jb250cm9sLWlucHV0IHdoaXRlc3BhY2UgZm9ybS1jaGVjay1pbnB1dFwiIEBjaGFuZ2U9XCJ1cGRhdGVfdGltZXNlcmllc1wiIHYtbW9kZWw9XCJpdGVtLnBhc3RcIj5cbiAgICAgICAgICBcbiAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJjdXN0b20tY29udHJvbC1sYWJlbCBtcy0xIGZvcm0tY2hlY2stbGFiZWxcIj5QYXN0IDwvbGFiZWw+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTJcIj5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgY2xhc3M9XCJjdXN0b20tY29udHJvbC1pbnB1dCB3aGl0ZXNwYWNlIGZvcm0tY2hlY2staW5wdXRcIiBAY2hhbmdlPVwidXBkYXRlX3RpbWVzZXJpZXNcIiB2LW1vZGVsPVwiaXRlbS5hdmdcIj5cbiAgICAgICAgICBcbiAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJjdXN0b20tY29udHJvbC1sYWJlbCBtcy0xIGZvcm0tY2hlY2stbGFiZWxcIj5BdmcgPC9sYWJlbD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtM1wiPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjbGFzcz1cImN1c3RvbS1jb250cm9sLWlucHV0IHdoaXRlc3BhY2UgZm9ybS1jaGVjay1pbnB1dFwiIEBjaGFuZ2U9XCJ1cGRhdGVfdGltZXNlcmllc1wiIHYtbW9kZWw9XCJpdGVtLnBlcmNfOTVcIj5cbiAgICAgICAgICBcbiAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJjdXN0b20tY29udHJvbC1sYWJlbCBtcy0xIGZvcm0tY2hlY2stbGFiZWxcIj45NXRoIFBlcmMgPC9sYWJlbD5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gICAgaWQ6IFN0cmluZyxcbiAgICB0aW1lc2VyaWVzOiBBcnJheSxcbiAgICB0aXRsZTogU3RyaW5nLFxuICAgIHNob3dfZGVsZXRlX2J1dHRvbjogQm9vbGVhbixcbn0pO1xuXG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoWydkZWxldGVfdHMnLCAndXBkYXRlOnRpbWVzZXJpZXMnXSlcblxuZnVuY3Rpb24gdXBkYXRlX3RpbWVzZXJpZXMoKSB7XG4gICAgZW1pdCgndXBkYXRlOnRpbWVzZXJpZXMnLCBwcm9wcy50aW1lc2VyaWVzKTtcbn1cblxuZnVuY3Rpb24gZGVsZXRlX3RzKCkge1xuICAgIGVtaXQoJ2RlbGV0ZV90cycsIHByb3BzLmlkKTtcbn1cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuICAuY3VzdG9tLW1zIHtcbiAgbWFyZ2luLWxlZnQ6IDJyZW0gIWltcG9ydGFudDtcbiAgfVxuLmlubGluZS1ibG9jayB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIG1hcmdpbi1yaWdodDogMXJlbTtcbn1cbi5ib3JkZXIge1xuICAgIGJvcmRlci1zdHlsZTogc29saWQgIWltcG9ydGFudDtcbn1cbjwvc3R5bGU+XG4iLCJpbXBvcnQgeyBEYXRhVGFibGVVdGlscyB9IGZyb20gXCIuLi91dGlsaXRpZXMvZGF0YXRhYmxlL3NwcnltZWRpYS1kYXRhdGFibGUtdXRpbHNcIjtcbmltcG9ydCBmb3JtYXR0ZXJVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL2Zvcm1hdHRlci11dGlscy5qc1wiO1xuaW1wb3J0IHsgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMuanNcIjtcbmltcG9ydCBOdG9wVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9udG9wLXV0aWxzXCI7XG5cbmNvbnN0IGJ5dGVzVG9TaXplRm9ybWF0dGVyID0gZm9ybWF0dGVyVXRpbHMuZ2V0Rm9ybWF0dGVyKGZvcm1hdHRlclV0aWxzLnR5cGVzLmJ5dGVzLmlkKTtcbmNvbnN0IGhhbmRsZXJJZEFkZExpbmsgPSBcInBhZ2Utc3RhdHMtYWN0aW9uLWxpbmtcIjtcbmNvbnN0IGhhbmRsZXJJZEp1bXBIaXN0b3JpY2FsID0gXCJwYWdlLXN0YXRzLWFjdGlvbi1qdW1wLWhpc3RvcmljYWxcIjtcblxuY29uc3QgdG9wX2FwcGxpY2F0aW9uID0ge1xuICAgIHRhYmxlX3ZhbHVlOiBcImludGVyZmFjZVwiLFxuICAgIHRpdGxlOiBpMThuKCdwYWdlX3N0YXRzLnRvcC50b3BfYXBwbGljYXRpb25zJyksXG4gICAgdmlldzogXCJ0b3BfcHJvdG9jb2xzXCIsXG4gICAgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnM6IDEsXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICBjb2x1bW5EZWZzOiBbXG4gICAgICB7IHR5cGU6IFwiZmlsZS1zaXplXCIsIHRhcmdldHM6IDEgfSxcbiAgICBdLFxuICAgIGNvbHVtbnM6IFt7XG5cdCAgICBjb2x1bW5OYW1lOiBpMThuKFwiYXBwbGljYXRpb25cIiksIG5hbWU6ICdhcHBsaWNhdGlvbicsIGRhdGE6ICdwcm90b2NvbCcsIGhhbmRsZXJJZDogaGFuZGxlcklkQWRkTGluayxcblx0ICAgIHJlbmRlcjogZnVuY3Rpb24oZGF0YSwgdHlwZSwgc2VydmljZSkge1xuXHRcdGxldCBjb250ZXh0ID0gdGhpcztcblx0XHRsZXQgaGFuZGxlciA9IHtcblx0XHQgICAgaGFuZGxlcklkOiBoYW5kbGVySWRBZGRMaW5rLFxuXHRcdCAgICBvbkNsaWNrOiBmdW5jdGlvbigpIHtcblx0XHRcdC8vIGNvbnNvbGUubG9nKGRhdGEpO1xuXHRcdFx0Ly8gY29uc29sZS5sb2coc2VydmljZSk7XG5cdFx0XHRsZXQgc2NoZW1hID0gYHRvcDoke3NlcnZpY2UudHNfc2NoZW1hfWA7XG5cdFx0XHRjb250ZXh0LmFkZF9tZXRyaWNfZnJvbV9tZXRyaWNfc2NoZW1hKHNjaGVtYSwgc2VydmljZS50c19xdWVyeSlcblx0XHQgICAgfSxcblx0XHR9O1xuXHRcdHJldHVybiBEYXRhVGFibGVVdGlscy5jcmVhdGVMaW5rQ2FsbGJhY2soeyB0ZXh0OiBkYXRhLmxhYmVsLCBoYW5kbGVyIH0pO1xuXHQgICAgfSxcblx0fSwge1xuXHQgICAgY29sdW1uTmFtZTogaTE4bihcInRyYWZmaWNcIiksIG5hbWU6ICd0cmFmZmljJywgY2xhc3NOYW1lOiAndGV4dC1lbmQnLCBkYXRhOiAndHJhZmZpYycsIG9yZGVyYWJsZTogdHJ1ZSxcblx0ICAgIHJlbmRlcjogKGRhdGEpID0+IHtcblx0ICAgIFx0Ly9yZXR1cm4gYnl0ZXNUb1NpemVGb3JtYXR0ZXIoZGF0YSk7XG5cdCAgICBcdHJldHVybiBOdG9wVXRpbHMuYnl0ZXNUb1NpemUoZGF0YSlcblx0ICAgIH0sXG5cdH0sIHtcblx0ICAgIGNvbHVtbk5hbWU6IGkxOG4oXCJwZXJjZW50YWdlXCIpLCBuYW1lOiAndHJhZmZpY19wZXJjJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCBkYXRhOiAncGVyY2VudGFnZScsIG9yZGVyYWJsZTogZmFsc2UsXG5cdCAgICByZW5kZXI6IChkYXRhKSA9PiB7XG5cdFx0Y29uc3QgcGVyY2VudGFnZSA9IGRhdGEudG9GaXhlZCgxKTtcblx0XHRyZXR1cm4gTnRvcFV0aWxzLmNyZWF0ZVByb2dyZXNzQmFyKHBlcmNlbnRhZ2UpXG5cdCAgICB9XG5cdH0sIHtcblx0ICAgIGNvbHVtbk5hbWU6IGkxOG4oXCJhY3Rpb25zXCIpLCB3aWR0aDogJzUlJywgbmFtZTogJ2FjdGlvbnMnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIG9yZGVyYWJsZTogZmFsc2UsIHJlc3BvbnNpdmVQcmlvcml0eTogMCwgaGFuZGxlcklkOiBoYW5kbGVySWRKdW1wSGlzdG9yaWNhbCxcblx0ICAgIHJlbmRlcl9pZjogZnVuY3Rpb24oY29udGV4dCkgeyByZXR1cm4gY29udGV4dC5pc19oaXN0b3J5X2VuYWJsZWQgfSxcblx0ICAgIHJlbmRlcjogZnVuY3Rpb24oZGF0YSwgdHlwZSwgc2VydmljZSkge1xuXHRcdGxldCBjb250ZXh0ID0gdGhpcztcblx0XHRjb25zdCBqdW1wX3RvX2hpc3RvcmljYWwgPSB7XG5cdFx0ICAgIGhhbmRsZXJJZDogaGFuZGxlcklkSnVtcEhpc3RvcmljYWwsXG5cdFx0ICAgIG9uQ2xpY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0bGV0IGw3X3Byb3RvID0gbnRvcG5nX3VybF9tYW5hZ2VyLnNlcmlhbGl6ZV9wYXJhbShcImw3cHJvdG9cIiwgYCR7c2VydmljZS5wcm90b2NvbC5pZH07ZXFgKTtcblx0XHRcdGxldCBoaXN0b3JpY2FsX2Zsb3dzX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2RiX3NlYXJjaC5sdWE/ZXBvY2hfYmVnaW49JHtjb250ZXh0LnN0YXR1cy5lcG9jaF9iZWdpbn0mZXBvY2hfZW5kPSR7Y29udGV4dC5zdGF0dXMuZXBvY2hfZW5kfSYke2w3X3Byb3RvfWA7XG5cdFx0XHRsZXQgc291cmNlX3R5cGUgPSBjb250ZXh0LnNvdXJjZV90eXBlO1xuXHRcdFx0bGV0IHNvdXJjZV9hcnJheSA9IGNvbnRleHQuc291cmNlX2FycmF5O1xuXHRcdFx0XG5cdFx0XHRsZXQgcGFyYW1zID0gXCJcIjtcblx0XHRcdGxldCBwYXJhbXNfYXJyYXkgPSBzb3VyY2VfdHlwZS5zb3VyY2VfZGVmX2FycmF5Lm1hcCgoc291cmNlX2RlZiwgaSkgPT4ge1xuXHRcdFx0ICAgIGxldCBzb3VyY2UgPSBzb3VyY2VfYXJyYXlbaV07XG5cdFx0XHQgICAgaWYgKHNvdXJjZV9kZWYudmFsdWUgPT0gXCJpZmlkXCIpIHtcblx0XHRcdFx0cmV0dXJuIG50b3BuZ191cmxfbWFuYWdlci5zZXJpYWxpemVfcGFyYW0oXCJpZmlkXCIsIHNvdXJjZS52YWx1ZSk7XG5cdFx0XHQgICAgfSBlbHNlIGlmIChzb3VyY2VfZGVmLnZhbHVlID09IFwiaG9zdFwiKSB7XG5cdFx0XHRcdHJldHVybiBudG9wbmdfdXJsX21hbmFnZXIuc2VyaWFsaXplX3BhcmFtKFwiaXBcIiwgYCR7c291cmNlLnZhbHVlfTtlcWApO1xuXHRcdFx0ICAgIH1cblx0XHRcdH0pO1xuXHRcdFx0cGFyYW1zID0gcGFyYW1zX2FycmF5LmpvaW4oXCImXCIpO1xuXHRcdFx0aGlzdG9yaWNhbF9mbG93c191cmwgPSBgJHtoaXN0b3JpY2FsX2Zsb3dzX3VybH0mJHtwYXJhbXN9YDtcblx0XHRcdC8vIGNvbnNvbGUubG9nKGhpc3RvcmljYWxfZmxvd3NfdXJsKTtcblx0XHRcdHdpbmRvdy5vcGVuKGhpc3RvcmljYWxfZmxvd3NfdXJsKTtcblx0XHQgICAgfVxuXHRcdH07XG5cdFx0cmV0dXJuIERhdGFUYWJsZVV0aWxzLmNyZWF0ZUFjdGlvbkJ1dHRvbnMoW1xuXHRcdCAgICB7IGNsYXNzOiAnZHJvcGRvd24taXRlbScsIGhyZWY6ICcjJywgdGl0bGU6IGkxOG4oJ2RiX2V4cGxvcmVyLmhpc3RvcmljYWxfZGF0YScpLCBoYW5kbGVyOiBqdW1wX3RvX2hpc3RvcmljYWwgfSxcblx0XHRdKTtcblx0ICAgIH1cblx0fSxdLFxufTtcblxuY29uc3QgdG9wX2NhdGVnb3JpZXMgPSB7XG4gICAgdGFibGVfdmFsdWU6IFwiaW50ZXJmYWNlXCIsXG4gICAgdGl0bGU6IGkxOG4oJ3BhZ2Vfc3RhdHMudG9wLnRvcF9jYXRlZ29yaWVzJyksXG4gICAgdmlldzogXCJ0b3BfY2F0ZWdvcmllc1wiLFxuICAgIGRlZmF1bHRfc29ydGluZ19jb2x1bW5zOiAyLFxuICAgIGNvbHVtbkRlZnM6IFtcbiAgICAgIHsgdHlwZTogXCJmaWxlLXNpemVcIiwgdGFyZ2V0czogMSB9LFxuICAgIF0sXG4gICAgY29sdW1uczogW3tcblx0ICAgIGNvbHVtbk5hbWU6IGkxOG4oXCJjYXRlZ29yeVwiKSwgbmFtZTogJ2NhdGVnb3J5JywgZGF0YTogJ2NhdGVnb3J5JywgaGFuZGxlcklkOiBoYW5kbGVySWRBZGRMaW5rLFxuXHQgICAgcmVuZGVyOiBmdW5jdGlvbihkYXRhLCB0eXBlLCBzZXJ2aWNlKSB7XG5cdFx0bGV0IGNvbnRleHQgPSB0aGlzO1xuXHRcdGxldCBoYW5kbGVyID0ge1xuXHRcdCAgICBoYW5kbGVySWQ6IGhhbmRsZXJJZEFkZExpbmssXG5cdFx0ICAgIG9uQ2xpY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Ly8gY29uc29sZS5sb2coZGF0YSk7XG5cdFx0XHQvLyBjb25zb2xlLmxvZyhzZXJ2aWNlKTtcblx0XHRcdGxldCBzY2hlbWEgPSBgdG9wOiR7c2VydmljZS50c19zY2hlbWF9YDtcblx0XHRcdGNvbnRleHQuYWRkX21ldHJpY19mcm9tX21ldHJpY19zY2hlbWEoc2NoZW1hLCBzZXJ2aWNlLnRzX3F1ZXJ5KVxuXHRcdCAgICB9LFxuXHRcdH07XG5cdFx0cmV0dXJuIERhdGFUYWJsZVV0aWxzLmNyZWF0ZUxpbmtDYWxsYmFjayh7IHRleHQ6IGRhdGEubGFiZWwsIGhhbmRsZXIgfSk7XG5cdCAgICB9LFxuXHR9LCB7XG5cdCAgICBjb2x1bW5OYW1lOiBpMThuKFwidHJhZmZpY1wiKSwgbmFtZTogJ3RyYWZmaWMnLCBjbGFzc05hbWU6ICd0ZXh0LWVuZCcsIGRhdGE6ICd0cmFmZmljJywgb3JkZXJhYmxlOiB0cnVlLFxuXHQgICAgcmVuZGVyOiAoZGF0YSkgPT4ge1xuXHQgICAgXHRyZXR1cm4gYnl0ZXNUb1NpemVGb3JtYXR0ZXIoZGF0YSk7XG5cdCAgICBcdC8vcmV0dXJuIE50b3BVdGlscy5ieXRlc1RvU2l6ZShkYXRhKVxuXHQgICAgfSxcblx0fSwge1xuXHQgICAgY29sdW1uTmFtZTogaTE4bihcInBlcmNlbnRhZ2VcIiksIG5hbWU6ICd0cmFmZmljX3BlcmMnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIGRhdGE6ICdwZXJjZW50YWdlJyxcblx0ICAgIHJlbmRlcjogKGRhdGEpID0+IHtcblx0XHRjb25zdCBwZXJjZW50YWdlID0gZGF0YS50b0ZpeGVkKDEpO1xuXHRcdHJldHVybiBOdG9wVXRpbHMuY3JlYXRlUHJvZ3Jlc3NCYXIocGVyY2VudGFnZSlcblx0ICAgIH1cblx0fSwge1xuXHQgICAgY29sdW1uTmFtZTogaTE4bihcImFjdGlvbnNcIiksIHdpZHRoOiAnNSUnLCBuYW1lOiAnYWN0aW9ucycsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgb3JkZXJhYmxlOiBmYWxzZSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAwLCBoYW5kbGVySWQ6IGhhbmRsZXJJZEp1bXBIaXN0b3JpY2FsLFxuXHQgICAgcmVuZGVyX2lmOiBmdW5jdGlvbihjb250ZXh0KSB7IHJldHVybiBjb250ZXh0LmlzX2hpc3RvcnlfZW5hYmxlZCB9LFxuXHQgICAgcmVuZGVyOiBmdW5jdGlvbihkYXRhLCB0eXBlLCBzZXJ2aWNlKSB7XG5cdFx0bGV0IGNvbnRleHQgPSB0aGlzO1xuXHRcdGNvbnN0IGp1bXBfdG9faGlzdG9yaWNhbCA9IHtcblx0XHQgICAgaGFuZGxlcklkOiBoYW5kbGVySWRKdW1wSGlzdG9yaWNhbCxcblx0XHQgICAgb25DbGljazogZnVuY3Rpb24oKSB7XG5cdFx0XHRsZXQgY2F0ZWdvcnkgPSBudG9wbmdfdXJsX21hbmFnZXIuc2VyaWFsaXplX3BhcmFtKFwibDdjYXRcIiwgYCR7c2VydmljZS5jYXRlZ29yeS5pZH07ZXFgKTtcblx0XHRcdGxldCBoaXN0b3JpY2FsX2Zsb3dzX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2RiX3NlYXJjaC5sdWE/ZXBvY2hfYmVnaW49JHtjb250ZXh0LnN0YXR1cy5lcG9jaF9iZWdpbn0mZXBvY2hfZW5kPSR7Y29udGV4dC5zdGF0dXMuZXBvY2hfZW5kfSYke2NhdGVnb3J5fWA7XG5cdFx0XHRsZXQgc291cmNlX3R5cGUgPSBjb250ZXh0LnNvdXJjZV90eXBlO1xuXHRcdFx0bGV0IHNvdXJjZV9hcnJheSA9IGNvbnRleHQuc291cmNlX2FycmF5O1xuXHRcdFx0XG5cdFx0XHRsZXQgcGFyYW1zID0gXCJcIjtcblx0XHRcdGxldCBwYXJhbXNfYXJyYXkgPSBzb3VyY2VfdHlwZS5zb3VyY2VfZGVmX2FycmF5Lm1hcCgoc291cmNlX2RlZiwgaSkgPT4ge1xuXHRcdFx0ICAgIGxldCBzb3VyY2UgPSBzb3VyY2VfYXJyYXlbaV07XG5cdFx0XHQgICAgaWYgKHNvdXJjZV9kZWYudmFsdWUgPT0gXCJpZmlkXCIpIHtcblx0XHRcdFx0cmV0dXJuIG50b3BuZ191cmxfbWFuYWdlci5zZXJpYWxpemVfcGFyYW0oXCJpZmlkXCIsIHNvdXJjZS52YWx1ZSk7XG5cdFx0XHQgICAgfSBlbHNlIGlmIChzb3VyY2VfZGVmLnZhbHVlID09IFwiaG9zdFwiKSB7XG5cdFx0XHRcdHJldHVybiBudG9wbmdfdXJsX21hbmFnZXIuc2VyaWFsaXplX3BhcmFtKFwiaXBcIiwgYCR7c291cmNlLnZhbHVlfTtlcWApO1xuXHRcdFx0ICAgIH1cblx0XHRcdH0pO1xuXHRcdFx0cGFyYW1zID0gcGFyYW1zX2FycmF5LmpvaW4oXCImXCIpO1xuXHRcdFx0aGlzdG9yaWNhbF9mbG93c191cmwgPSBgJHtoaXN0b3JpY2FsX2Zsb3dzX3VybH0mJHtwYXJhbXN9YDtcblx0XHRcdC8vIGNvbnNvbGUubG9nKGhpc3RvcmljYWxfZmxvd3NfdXJsKTtcblx0XHRcdHdpbmRvdy5vcGVuKGhpc3RvcmljYWxfZmxvd3NfdXJsKTtcblx0XHQgICAgfVxuXHRcdH07XG5cdFx0cmV0dXJuIERhdGFUYWJsZVV0aWxzLmNyZWF0ZUFjdGlvbkJ1dHRvbnMoW1xuXHRcdCAgICB7IGNsYXNzOiAnZHJvcGRvd24taXRlbScsIGhyZWY6ICcjJywgdGl0bGU6IGkxOG4oJ2RiX2V4cGxvcmVyLmhpc3RvcmljYWxfZGF0YScpLCBoYW5kbGVyOiBqdW1wX3RvX2hpc3RvcmljYWwgfSxcblx0XHRdKTtcblx0ICAgIH1cblx0fSxdLFxufTtcblxuY29uc3QgdG9wX3NlbmRlcnMgPSB7XG4gICAgdGFibGVfdmFsdWU6IFwiaW50ZXJmYWNlXCIsXG4gICAgdGl0bGU6IGkxOG4oJ3BhZ2Vfc3RhdHMudG9wLnRvcF9zZW5kZXJzJyksXG4gICAgdmlldzogXCJ0b3Bfc2VuZGVyc1wiLFxuICAgIGRlZmF1bHRfc29ydGluZ19jb2x1bW5zOiAxLFxuICAgIGNvbHVtbkRlZnM6IFtcbiAgICAgIHsgdHlwZTogXCJmaWxlLXNpemVcIiwgdGFyZ2V0czogMSB9LFxuICAgIF0sXG4gICAgY29sdW1uczogW3tcblx0Y29sdW1uTmFtZTogaTE4bihcInBhZ2Vfc3RhdHMudG9wLmhvc3RfbmFtZVwiKSwgbmFtZTogJ2hvc3RfbmFtZScsIGRhdGE6ICdob3N0JywgaGFuZGxlcklkOiBoYW5kbGVySWRBZGRMaW5rLFxuXHRyZW5kZXI6IGZ1bmN0aW9uKGRhdGEsIHR5cGUsIHNlcnZpY2UpIHtcblx0ICAgIGxldCBjb250ZXh0ID0gdGhpcztcbiAgICAgIGxldCBsYWJlbCA9IGRhdGEubGFiZWw7XG4gICAgICBsZXQgaG9zdF9yZWYgPSAnJztcblx0ICAgIGxldCBoYW5kbGVyID0ge1xuXHRcdGhhbmRsZXJJZDogaGFuZGxlcklkQWRkTGluayxcblx0XHRvbkNsaWNrOiBhc3luYyBmdW5jdGlvbigpIHtcblx0XHQgICAgLy8gY29uc29sZS5sb2coZGF0YSk7XG5cdFx0ICAgIC8vIGNvbnNvbGUubG9nKHNlcnZpY2UpO1xuXHRcdCAgICBsZXQgc2NoZW1hID0gYGhvc3Q6dHJhZmZpY2A7XG5cdFx0ICAgIGNvbnRleHQuYWRkX3RzX2dyb3VwX2Zyb21fc291cmNlX3ZhbHVlX2RpY3QoXCJob3N0XCIsIHNlcnZpY2UudGFncywgc2NoZW1hKTtcblx0XHR9LFxuXHQgICAgfTtcblx0ICAgIGlmIChjb250ZXh0LnNvdXJjZXNfdHlwZXNfZW5hYmxlZFtcImhvc3RcIl0gJiYgZGF0YS5pc19sb2NhbCkge1xuICAgICAgICBsYWJlbCA9IERhdGFUYWJsZVV0aWxzLmNyZWF0ZUxpbmtDYWxsYmFjayh7IHRleHQ6IGRhdGEubGFiZWwsIGhhbmRsZXIgfSk7XG5cdCAgICB9XG4gICAgICBpZiAoZGF0YS5pc19hdmFpbGFibGUpIHtcbiAgICAgICAgaG9zdF9yZWYgPSBgIDxhIGhyZWY9XCIvbHVhL2hvc3RfZGV0YWlscy5sdWE/aG9zdD0ke2RhdGEuaWR9XCIgZGF0YS1icy10b2dnbGU9XCJ0b29sdGlwXCIgdGl0bGU9XCJcIj48aSBjbGFzcz1cImZhcyBmYS1sYXB0b3BcIj48L2k+PC9hPmBcbiAgICAgIH1cbiAgICAgIFxuXHQgICAgcmV0dXJuIGAke2xhYmVsfSR7aG9zdF9yZWZ9YDtcblx0fSxcbiAgICB9LCB7XG5cdGNvbHVtbk5hbWU6IGkxOG4oXCJwYWdlX3N0YXRzLnRvcC5zZW50XCIpLCBuYW1lOiAnc2VudCcsIGNsYXNzTmFtZTogJ3RleHQtZW5kJywgZGF0YTogJ3RyYWZmaWMnLCBvcmRlcmFibGU6IHRydWUsXG5cdHJlbmRlcjogKGRhdGEpID0+IHtcblx0ICAgIHJldHVybiBieXRlc1RvU2l6ZUZvcm1hdHRlcihkYXRhKTtcblx0ICAgIC8vcmV0dXJuIE50b3BVdGlscy5ieXRlc1RvU2l6ZShkYXRhKVxuXHR9LFxuICAgIH0sIC8vIHtcblx0ICAgICAgLy8gXHRjb2x1bW5OYW1lOiBpMThuKFwicGVyY2VudGFnZVwiKSwgbmFtZTogJ3RyYWZmaWNfcGVyYycsIGRhdGE6ICdwZXJjZW50YWdlJyxcblx0ICAgICAgLy8gXHRyZW5kZXI6IChkYXRhKSA9PiB7XG5cdCAgICAgIC8vIFx0ICAgIGNvbnN0IHBlcmNlbnRhZ2UgPSBkYXRhLnRvRml4ZWQoMSk7XG5cdCAgICAgIC8vIFx0ICAgIHJldHVybiBOdG9wVXRpbHMuY3JlYXRlUHJvZ3Jlc3NCYXIocGVyY2VudGFnZSlcblx0ICAgICAgLy8gXHR9XG5cdCAgICAgIC8vIH0sXG5cdCAgICAgIHtcblx0XHQgIGNvbHVtbk5hbWU6IGkxOG4oXCJhY3Rpb25zXCIpLCB3aWR0aDogJzUlJywgbmFtZTogJ2FjdGlvbnMnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIG9yZGVyYWJsZTogZmFsc2UsIHJlc3BvbnNpdmVQcmlvcml0eTogMCwgaGFuZGxlcklkOiBoYW5kbGVySWRKdW1wSGlzdG9yaWNhbCxcblx0XHQgIHJlbmRlcl9pZjogZnVuY3Rpb24oY29udGV4dCkgeyByZXR1cm4gY29udGV4dC5pc19oaXN0b3J5X2VuYWJsZWQgfSxcblx0XHQgIHJlbmRlcjogZnVuY3Rpb24oZGF0YSwgdHlwZSwgc2VydmljZSkge1xuXHRcdCAgICAgIGxldCBjb250ZXh0ID0gdGhpcztcbiAgICAgICAgICBjb25zdCBob3N0ID0gc2VydmljZS5ob3N0LmlkO1xuICAgICAgICAgIGNvbnN0IGhvc3RfdHNfYXZhaWxhYmxlPSBzZXJ2aWNlLmhvc3QuaXNfbG9jYWw7XG5cdFx0ICAgICAgY29uc3QganVtcF90b19oaXN0b3JpY2FsID0ge1xuICAgICAgICAgICAgaGFuZGxlcklkOiBoYW5kbGVySWRKdW1wSGlzdG9yaWNhbCxcbiAgICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGxldCBoaXN0b3JpY2FsX2Zsb3dzX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2RiX3NlYXJjaC5sdWE/ZXBvY2hfYmVnaW49JHtjb250ZXh0LnN0YXR1cy5lcG9jaF9iZWdpbn0mZXBvY2hfZW5kPSR7Y29udGV4dC5zdGF0dXMuZXBvY2hfZW5kfWA7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgbGV0IHBhcmFtcyA9IFwiXCI7XHRcdFx0ICAgIFxuICAgICAgICAgICAgICAgIGxldCBwYXJhbXNfYXJyYXkgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBrZXkgaW4gc2VydmljZS50YWdzKSB7XG4gICAgICAgICAgICAgIGxldCB2YWx1ZSA9IHNlcnZpY2UudGFnc1trZXldO1xuICAgICAgICAgICAgICBsZXQgcF91cmwgPSBcIlwiO1xuICAgICAgICAgICAgICBpZiAoa2V5ID09IFwiaWZpZFwiKSB7XG4gICAgICAgICAgICAgICAgICBwX3VybCA9IG50b3BuZ191cmxfbWFuYWdlci5zZXJpYWxpemVfcGFyYW0oa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5ID09IFwiaG9zdFwiKSB7XG4gICAgICAgICAgICAgICAgICBwX3VybCA9IG50b3BuZ191cmxfbWFuYWdlci5zZXJpYWxpemVfcGFyYW0oXCJpcFwiLCBgJHt2YWx1ZX07ZXFgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBwYXJhbXNfYXJyYXkucHVzaChwX3VybCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHBhcmFtcyA9IHBhcmFtc19hcnJheS5qb2luKFwiJlwiKTtcbiAgICAgICAgICAgICAgICBoaXN0b3JpY2FsX2Zsb3dzX3VybCA9IGAke2hpc3RvcmljYWxfZmxvd3NfdXJsfSYke3BhcmFtc31gO1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGhpc3RvcmljYWxfZmxvd3NfdXJsKTtcbiAgICAgICAgICAgICAgICB3aW5kb3cub3BlbihoaXN0b3JpY2FsX2Zsb3dzX3VybCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgY29uc3QganVtcF90b19ob3N0ID0ge1xuICAgICAgICAgICAgaGFuZGxlcklkOiBoYW5kbGVySWRKdW1wSGlzdG9yaWNhbCxcbiAgICAgICAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlmaWQgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgnaWZpZCcpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGhvc3RfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9ob3N0X2RldGFpbHMubHVhP2hvc3Q9JHtob3N0fSZwYWdlPWhpc3RvcmljYWwmdHNfcXVlcnk9aWZpZDoke2lmaWR9LGhvc3Q6JHtob3N0fSZ0c19zY2hlbWE9aG9zdDpkZXRhaWxzJmVwb2NoX2JlZ2luPSR7Y29udGV4dC5zdGF0dXMuZXBvY2hfYmVnaW59JmVwb2NoX2VuZD0ke2NvbnRleHQuc3RhdHVzLmVwb2NoX2VuZH1gO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHdpbmRvdy5vcGVuKGhvc3RfdXJsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgY29uc3QgZHJvcGRvd24gPSBbeyBjbGFzczogJ2Ryb3Bkb3duLWl0ZW0nLCBocmVmOiAnIycsIHRpdGxlOiBpMThuKCdkYl9leHBsb3Jlci5oaXN0b3JpY2FsX2RhdGEnKSwgaGFuZGxlcjoganVtcF90b19oaXN0b3JpY2FsIH1dXG5cdCAgICAgICAgaWYgKGNvbnRleHQuc291cmNlc190eXBlc19lbmFibGVkW1wiaG9zdFwiXSAmJiBob3N0X3RzX2F2YWlsYWJsZSkge1xuICAgICAgICAgICAgZHJvcGRvd24ucHVzaCh7IGNsYXNzOiAnZHJvcGRvd24taXRlbScsIGhyZWY6ICcjJywgdGl0bGU6IGkxOG4oJ2RiX2V4cGxvcmVyLmhvc3RfZGF0YScpLCBoYW5kbGVyOiBqdW1wX3RvX2hvc3QgfSlcbiAgICAgICAgICB9XG5cblx0XHQgICAgICByZXR1cm4gRGF0YVRhYmxlVXRpbHMuY3JlYXRlQWN0aW9uQnV0dG9ucyhkcm9wZG93bik7XG5cdFx0ICB9XG5cdCAgICAgIH0sXSxcbn07XG5cbmNvbnN0IHRvcF9yZWNlaXZlcnMgPSB7XG4gICAgdGFibGVfdmFsdWU6IFwiaW50ZXJmYWNlXCIsXG4gICAgdGl0bGU6IGkxOG4oJ3BhZ2Vfc3RhdHMudG9wLnRvcF9yZWNlaXZlcnMnKSxcbiAgICB2aWV3OiBcInRvcF9yZWNlaXZlcnNcIixcbiAgICBkZWZhdWx0X3NvcnRpbmdfY29sdW1uczogMSxcbiAgICBjb2x1bW5EZWZzOiBbXG4gICAgICB7IHR5cGU6IFwiZmlsZS1zaXplXCIsIHRhcmdldHM6IDEgfSxcbiAgICBdLFxuICAgIGNvbHVtbnM6IFt7XG5cdGNvbHVtbk5hbWU6IGkxOG4oXCJwYWdlX3N0YXRzLnRvcC5ob3N0X25hbWVcIiksIG5hbWU6ICdob3N0X25hbWUnLCBkYXRhOiAnaG9zdCcsIGhhbmRsZXJJZDogaGFuZGxlcklkQWRkTGluayxcblx0cmVuZGVyOiBmdW5jdGlvbihkYXRhLCB0eXBlLCBzZXJ2aWNlKSB7XG5cdCAgICBsZXQgY29udGV4dCA9IHRoaXM7XG4gICAgICBsZXQgbGFiZWwgPSBkYXRhLmxhYmVsO1xuICAgICAgbGV0IGhvc3RfcmVmID0gJyc7XG5cdCAgICBsZXQgaGFuZGxlciA9IHtcblx0XHRoYW5kbGVySWQ6IGhhbmRsZXJJZEFkZExpbmssXG5cdFx0b25DbGljazogYXN5bmMgZnVuY3Rpb24oKSB7XG5cdFx0ICAgIC8vIGNvbnNvbGUubG9nKGRhdGEpO1xuXHRcdCAgICAvLyBjb25zb2xlLmxvZyhzZXJ2aWNlKTtcblx0XHQgICAgbGV0IHNjaGVtYSA9IGBob3N0OnRyYWZmaWNgO1xuXHRcdCAgICBjb250ZXh0LmFkZF90c19ncm91cF9mcm9tX3NvdXJjZV92YWx1ZV9kaWN0KFwiaG9zdFwiLCBzZXJ2aWNlLnRhZ3MsIHNjaGVtYSk7XG5cdFx0fSxcblx0ICAgIH07XG5cdCAgICBpZiAoY29udGV4dC5zb3VyY2VzX3R5cGVzX2VuYWJsZWRbXCJob3N0XCJdICYmIGRhdGEuaXNfbG9jYWwpIHtcbiAgICAgICAgbGFiZWwgPSBEYXRhVGFibGVVdGlscy5jcmVhdGVMaW5rQ2FsbGJhY2soeyB0ZXh0OiBkYXRhLmxhYmVsLCBoYW5kbGVyIH0pO1xuXHQgICAgfVxuICAgICAgaWYgKGRhdGEuaXNfYXZhaWxhYmxlKSB7XG4gICAgICAgIGhvc3RfcmVmID0gYCA8YSBocmVmPVwiL2x1YS9ob3N0X2RldGFpbHMubHVhP2hvc3Q9JHtkYXRhLmlkfVwiIGRhdGEtYnMtdG9nZ2xlPVwidG9vbHRpcFwiIHRpdGxlPVwiXCI+PGkgY2xhc3M9XCJmYXMgZmEtbGFwdG9wXCI+PC9pPjwvYT5gXG4gICAgICB9XG4gICAgICBcblx0ICAgIHJldHVybiBgJHtsYWJlbH0ke2hvc3RfcmVmfWA7XG5cdH0sXG4gICAgfSwge1xuXHRjb2x1bW5OYW1lOiBpMThuKFwicGFnZV9zdGF0cy50b3AucmVjZWl2ZWRcIiksIG5hbWU6ICdyZWNlaXZlZCcsIGNsYXNzTmFtZTogJ3RleHQtZW5kJywgZGF0YTogJ3RyYWZmaWMnLCBvcmRlcmFibGU6IHRydWUsXG5cdHJlbmRlcjogKGRhdGEpID0+IHtcblx0ICAgIHJldHVybiBieXRlc1RvU2l6ZUZvcm1hdHRlcihkYXRhKTtcblx0ICAgIC8vcmV0dXJuIE50b3BVdGlscy5ieXRlc1RvU2l6ZShkYXRhKVxuXHR9LFxuICAgIH0sIC8vIHtcblx0ICAgICAgLy8gXHRjb2x1bW5OYW1lOiBpMThuKFwicGVyY2VudGFnZVwiKSwgbmFtZTogJ3RyYWZmaWNfcGVyYycsIGRhdGE6ICdwZXJjZW50YWdlJyxcblx0ICAgICAgLy8gXHRyZW5kZXI6IChkYXRhKSA9PiB7XG5cdCAgICAgIC8vIFx0ICAgIGNvbnN0IHBlcmNlbnRhZ2UgPSBkYXRhLnRvRml4ZWQoMSk7XG5cdCAgICAgIC8vIFx0ICAgIHJldHVybiBOdG9wVXRpbHMuY3JlYXRlUHJvZ3Jlc3NCYXIocGVyY2VudGFnZSlcblx0ICAgICAgLy8gXHR9XG5cdCAgICAgIC8vIH0sXG5cdCAgICAgIHtcblx0XHQgIGNvbHVtbk5hbWU6IGkxOG4oXCJhY3Rpb25zXCIpLCB3aWR0aDogJzUlJywgbmFtZTogJ2FjdGlvbnMnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIG9yZGVyYWJsZTogZmFsc2UsIHJlc3BvbnNpdmVQcmlvcml0eTogMCwgaGFuZGxlcklkOiBoYW5kbGVySWRKdW1wSGlzdG9yaWNhbCxcblx0XHQgIHJlbmRlcl9pZjogZnVuY3Rpb24oY29udGV4dCkgeyByZXR1cm4gY29udGV4dC5pc19oaXN0b3J5X2VuYWJsZWQgfSxcblx0XHQgIHJlbmRlcjogZnVuY3Rpb24oZGF0YSwgdHlwZSwgc2VydmljZSkge1xuXHRcdCAgICAgIGxldCBjb250ZXh0ID0gdGhpcztcbiAgICAgICAgICBjb25zdCBob3N0ID0gc2VydmljZS5ob3N0LmlkO1xuICAgICAgICAgIGNvbnN0IGhvc3RfdHNfYXZhaWxhYmxlPSBzZXJ2aWNlLmhvc3QuaXNfbG9jYWw7XG5cdFx0ICAgICAgY29uc3QganVtcF90b19oaXN0b3JpY2FsID0ge1xuXHRcdFx0ICBoYW5kbGVySWQ6IGhhbmRsZXJJZEp1bXBIaXN0b3JpY2FsLFxuXHRcdFx0ICBvbkNsaWNrOiBmdW5jdGlvbigpIHtcblx0XHRcdCAgICAgIGxldCBoaXN0b3JpY2FsX2Zsb3dzX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2RiX3NlYXJjaC5sdWE/ZXBvY2hfYmVnaW49JHtjb250ZXh0LnN0YXR1cy5lcG9jaF9iZWdpbn0mZXBvY2hfZW5kPSR7Y29udGV4dC5zdGF0dXMuZXBvY2hfZW5kfWA7XG5cdFx0XHQgICAgICBcblx0XHRcdCAgICAgIGxldCBwYXJhbXMgPSBcIlwiO1xuXHRcdFx0ICAgICAgbGV0IHBhcmFtc19hcnJheSA9IFtdO1xuXHRcdFx0ICAgICAgZm9yIChsZXQga2V5IGluIHNlcnZpY2UudGFncykge1xuXHRcdFx0XHQgIGxldCB2YWx1ZSA9IHNlcnZpY2UudGFnc1trZXldO1xuXHRcdFx0XHQgIGxldCBwX3VybCA9IFwiXCI7XG5cdFx0XHRcdCAgaWYgKGtleSA9PSBcImlmaWRcIikge1xuXHRcdFx0XHQgICAgICBwX3VybCA9IG50b3BuZ191cmxfbWFuYWdlci5zZXJpYWxpemVfcGFyYW0oa2V5LCB2YWx1ZSk7XG5cdFx0XHRcdCAgfSBlbHNlIGlmIChrZXkgPT0gXCJob3N0XCIpIHtcblx0XHRcdFx0ICAgICAgcF91cmwgPSBudG9wbmdfdXJsX21hbmFnZXIuc2VyaWFsaXplX3BhcmFtKFwiaXBcIiwgYCR7dmFsdWV9O2VxYCk7XG5cdFx0XHRcdCAgfVxuXHRcdFx0XHQgIHBhcmFtc19hcnJheS5wdXNoKHBfdXJsKTtcblx0XHRcdCAgICAgIH1cblx0XHRcdCAgICAgIHBhcmFtcyA9IHBhcmFtc19hcnJheS5qb2luKFwiJlwiKTtcblx0XHRcdCAgICAgIGhpc3RvcmljYWxfZmxvd3NfdXJsID0gYCR7aGlzdG9yaWNhbF9mbG93c191cmx9JiR7cGFyYW1zfWA7XG5cdFx0XHQgICAgICAvLyBjb25zb2xlLmxvZyhoaXN0b3JpY2FsX2Zsb3dzX3VybCk7XG5cdFx0XHQgICAgICB3aW5kb3cub3BlbihoaXN0b3JpY2FsX2Zsb3dzX3VybCk7XG5cdFx0XHQgIH1cblx0XHQgICAgICB9O1xuICAgICAgICAgICAgICBcbiAgICAgICAgICBjb25zdCBqdW1wX3RvX2hvc3QgPSB7XG4gICAgICAgICAgICBoYW5kbGVySWQ6IGhhbmRsZXJJZEp1bXBIaXN0b3JpY2FsLFxuICAgICAgICAgICAgb25DbGljazogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaWZpZCA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCdpZmlkJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgaG9zdF91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL2hvc3RfZGV0YWlscy5sdWE/aG9zdD0ke2hvc3R9JnBhZ2U9aGlzdG9yaWNhbCZ0c19xdWVyeT1pZmlkOiR7aWZpZH0saG9zdDoke2hvc3R9JnRzX3NjaGVtYT1ob3N0OmRldGFpbHMmZXBvY2hfYmVnaW49JHtjb250ZXh0LnN0YXR1cy5lcG9jaF9iZWdpbn0mZXBvY2hfZW5kPSR7Y29udGV4dC5zdGF0dXMuZXBvY2hfZW5kfWA7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgd2luZG93Lm9wZW4oaG9zdF91cmwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBjb25zdCBkcm9wZG93biA9IFt7IGNsYXNzOiAnZHJvcGRvd24taXRlbScsIGhyZWY6ICcjJywgdGl0bGU6IGkxOG4oJ2RiX2V4cGxvcmVyLmhpc3RvcmljYWxfZGF0YScpLCBoYW5kbGVyOiBqdW1wX3RvX2hpc3RvcmljYWwgfV1cblx0ICAgICAgICBpZiAoY29udGV4dC5zb3VyY2VzX3R5cGVzX2VuYWJsZWRbXCJob3N0XCJdICYmIGhvc3RfdHNfYXZhaWxhYmxlKSB7XG4gICAgICAgICAgICBkcm9wZG93bi5wdXNoKHsgY2xhc3M6ICdkcm9wZG93bi1pdGVtJywgaHJlZjogJyMnLCB0aXRsZTogaTE4bignZGJfZXhwbG9yZXIuaG9zdF9kYXRhJyksIGhhbmRsZXI6IGp1bXBfdG9faG9zdCB9KVxuICAgICAgICAgIH1cblxuXHRcdCAgICAgIHJldHVybiBEYXRhVGFibGVVdGlscy5jcmVhdGVBY3Rpb25CdXR0b25zKGRyb3Bkb3duKTtcblx0XHQgIH0sXG5cdCAgICAgIH0sXSxcbn07XG5cbmNvbnN0IGludGVyZmFjZV90b3BfdGFibGVzID0gW3RvcF9hcHBsaWNhdGlvbiwgdG9wX2NhdGVnb3JpZXMsIHRvcF9zZW5kZXJzLCB0b3BfcmVjZWl2ZXJzXTtcblxuZXhwb3J0IGRlZmF1bHQgaW50ZXJmYWNlX3RvcF90YWJsZXM7XG5cbiIsImltcG9ydCB7IG50b3BuZ191dGlsaXR5IH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMuanNcIjtcbmltcG9ydCBpbnRlcmZhY2VUb3BUYWJsZXMgZnJvbSBcIi4vaW50ZXJmYWNlX3RvcF90YWJsZXMuanNcIjtcblxubGV0IHRvcF9hcHBsaWNhdGlvbl9pbnRlcmZhY2UgPSBpbnRlcmZhY2VUb3BUYWJsZXMuZmluZCgodCkgPT4gdC52aWV3ID09IFwidG9wX3Byb3RvY29sc1wiKTtcbmlmICh0b3BfYXBwbGljYXRpb25faW50ZXJmYWNlICE9IG51bGwpIHtcbiAgICB0b3BfYXBwbGljYXRpb25faW50ZXJmYWNlID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUodG9wX2FwcGxpY2F0aW9uX2ludGVyZmFjZSk7XG4gICAgdG9wX2FwcGxpY2F0aW9uX2ludGVyZmFjZS50YWJsZV92YWx1ZSA9IFwiaG9zdFwiO1xufVxuXG5jb25zdCB0b3BfYXBwbGljYXRpb24gPSB0b3BfYXBwbGljYXRpb25faW50ZXJmYWNlO1xuXG5jb25zdCBob3N0X3RvcF90YWJsZXMgPSBbdG9wX2FwcGxpY2F0aW9uXTtcblxuZXhwb3J0IGRlZmF1bHQgaG9zdF90b3BfdGFibGVzO1xuIiwiaW1wb3J0IHsgRGF0YVRhYmxlVXRpbHMgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2RhdGF0YWJsZS9zcHJ5bWVkaWEtZGF0YXRhYmxlLXV0aWxzXCI7XG5pbXBvcnQgZm9ybWF0dGVyVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9mb3JtYXR0ZXItdXRpbHMuanNcIjtcbmltcG9ydCBOdG9wVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9udG9wLXV0aWxzXCI7XG5cblxuY29uc3QgYnl0ZXNUb1NpemVGb3JtYXR0ZXIgPSBmb3JtYXR0ZXJVdGlscy5nZXRGb3JtYXR0ZXIoZm9ybWF0dGVyVXRpbHMudHlwZXMuYnl0ZXMuaWQpO1xuY29uc3QgYnBzRm9ybWF0dGVyID0gZm9ybWF0dGVyVXRpbHMuZ2V0Rm9ybWF0dGVyKGZvcm1hdHRlclV0aWxzLnR5cGVzLmJwcy5pZCk7XG5jb25zdCBoYW5kbGVySWRBZGRMaW5rID0gXCJwYWdlLXN0YXRzLWFjdGlvbi1saW5rXCI7XG5cbmNvbnN0IHRvcF9zbm1wX2ludGVyZmFjZSA9IHtcblx0dGFibGVfdmFsdWU6IFwic25tcFwiLFxuXHR0YWJsZV9zb3VyY2VfZGVmX3ZhbHVlX2RpY3Q6IHsgaWZpZDogdHJ1ZSwgZGV2aWNlOiB0cnVlLCBpZl9pbmRleDogZmFsc2UgfSxcblx0dGl0bGU6IGkxOG4oJ3BhZ2Vfc3RhdHMudG9wLnRvcF9pbnRlcmZhY2VzJyksXG5cdHZpZXc6IFwidG9wX3NubXBfaWZhY2VzXCIsXG5cdGRlZmF1bHRfc29ydGluZ19jb2x1bW5zOiA0LFxuXHRjb2x1bW5EZWZzOiBbXG5cdFx0eyB0eXBlOiBcImZpbGUtc2l6ZVwiLCB0YXJnZXRzOiAxIH0sXG5cdFx0eyB0eXBlOiBcImZpbGUtc2l6ZVwiLCB0YXJnZXRzOiAyIH0sXG5cdFx0eyB0eXBlOiBcImZpbGUtc2l6ZVwiLCB0YXJnZXRzOiAzIH0sXG5cdF0sXG5cdGZfZ2V0X2xhYmVsOiAodHNfZ3JvdXApID0+IHtcblx0XHRsZXQgc291cmNlX2RlZl9hcnJheSA9IHRzX2dyb3VwLnNvdXJjZV90eXBlLnNvdXJjZV9kZWZfYXJyYXk7XG5cdFx0bGV0IHNvdXJjZV9sYWJlbDtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHNvdXJjZV9kZWZfYXJyYXkubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRcdGlmIChzb3VyY2VfZGVmX2FycmF5W2ldLnZhbHVlICE9IFwiZGV2aWNlXCIpIHsgY29udGludWU7IH1cblx0XHRcdHNvdXJjZV9sYWJlbCA9IHRzX2dyb3VwLnNvdXJjZV9hcnJheVtpXS5sYWJlbDtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0XHRyZXR1cm4gYCR7aTE4bigncGFnZV9zdGF0cy50b3AudG9wX2ludGVyZmFjZXMnKX0gLSBTTk1QICR7aTE4bigncGFnZV9zdGF0cy5zb3VyY2VfZGVmLmRldmljZScpfSAke3NvdXJjZV9sYWJlbH1gO1xuXHR9LFxuXHRkZWZhdWx0OiB0cnVlLFxuXG5cdGNvbHVtbnM6IFt7XG5cdFx0Y29sdW1uTmFtZTogaTE4bihcImludGVyZmFjZV9uYW1lXCIpLCBuYW1lOiAnaW50ZXJmYWNlJywgZGF0YTogJ2ludGVyZmFjZScsIGhhbmRsZXJJZDogaGFuZGxlcklkQWRkTGluayxcblx0XHRyZW5kZXI6IGZ1bmN0aW9uIChkYXRhLCB0eXBlLCBzZXJ2aWNlKSB7XG5cdFx0XHRsZXQgY29udGV4dCA9IHRoaXM7XG5cdFx0XHRsZXQgaGFuZGxlciA9IHtcblx0XHRcdFx0aGFuZGxlcklkOiBoYW5kbGVySWRBZGRMaW5rLFxuXHRcdFx0XHRvbkNsaWNrOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0bGV0IHNjaGVtYSA9IGBzbm1wX2lmOnRyYWZmaWNgO1xuXHRcdFx0XHRcdGNvbnRleHQuYWRkX3RzX2dyb3VwX2Zyb21fc291cmNlX3ZhbHVlX2RpY3QoXCJzbm1wX2ludGVyZmFjZVwiLCBzZXJ2aWNlLnRhZ3MsIHNjaGVtYSk7XG5cdFx0XHRcdH0sXG5cdFx0XHR9O1xuXHRcdFx0bGV0IGxhYmVsX3RleHQgPSBgJHtkYXRhLm5hbWV9YDtcblx0XHRcdHJldHVybiBEYXRhVGFibGVVdGlscy5jcmVhdGVMaW5rQ2FsbGJhY2soeyB0ZXh0OiBsYWJlbF90ZXh0LCBoYW5kbGVyIH0pO1xuXHRcdH0sXG5cdH0sIHtcblx0XHRjb2x1bW5OYW1lOiBpMThuKFwiaW50ZXJmYWNlX2FsaWFzXCIpLCBuYW1lOiAnaW50ZXJmYWNlJywgZGF0YTogJ2ludGVyZmFjZScsIGhhbmRsZXJJZDogaGFuZGxlcklkQWRkTGluayxcblx0XHRyZW5kZXI6IGZ1bmN0aW9uIChkYXRhKSB7XG5cdFx0XHRsZXQgbGFiZWxfdGV4dCA9IGAke2RhdGEuYWxpYXN9YDtcblx0XHRcdHJldHVybiBsYWJlbF90ZXh0O1xuXHRcdH0sXG5cdH0sIHtcblx0XHRjb2x1bW5OYW1lOiBpMThuKFwicGFnZV9zdGF0cy50b3Auc2VudFwiKSwgbmFtZTogJ3NlbnQnLCBjbGFzc05hbWU6ICd0ZXh0LWVuZCcsIGRhdGE6ICdzZW50Jywgb3JkZXJhYmxlOiB0cnVlLFxuXHRcdHJlbmRlcjogKGRhdGEpID0+IHtcblx0XHRcdHJldHVybiBieXRlc1RvU2l6ZUZvcm1hdHRlcihkYXRhKTtcblx0XHRcdC8vcmV0dXJuIE50b3BVdGlscy5ieXRlc1RvU2l6ZShkYXRhKVxuXHRcdH0sXG5cdH0sIHtcblx0XHRjb2x1bW5OYW1lOiBpMThuKFwicGFnZV9zdGF0cy50b3AucmVjZWl2ZWRcIiksIG5hbWU6ICdyZWNlaXZlZCcsIGNsYXNzTmFtZTogJ3RleHQtZW5kJywgZGF0YTogJ3JjdmQnLCBvcmRlcmFibGU6IHRydWUsXG5cdFx0cmVuZGVyOiAoZGF0YSkgPT4ge1xuXHRcdFx0cmV0dXJuIGJ5dGVzVG9TaXplRm9ybWF0dGVyKGRhdGEpO1xuXHRcdFx0Ly9yZXR1cm4gTnRvcFV0aWxzLmJ5dGVzVG9TaXplKGRhdGEpXG5cdFx0fSxcblx0fSwge1xuXHRcdGNvbHVtbk5hbWU6IGkxOG4oXCJ0cmFmZmljXCIpLCBuYW1lOiAndHJhZmZpYycsIGNsYXNzTmFtZTogJ3RleHQtZW5kJywgZGF0YTogJ3RvdGFsJywgb3JkZXJhYmxlOiB0cnVlLFxuXHRcdHJlbmRlcjogKGRhdGEpID0+IHtcblx0XHRcdHJldHVybiBieXRlc1RvU2l6ZUZvcm1hdHRlcihkYXRhKTtcblx0XHRcdC8vcmV0dXJuIE50b3BVdGlscy5ieXRlc1RvU2l6ZShkYXRhKVxuXHRcdH0sXG5cdH0sIHtcblx0XHRjb2x1bW5OYW1lOiBpMThuKFwibGFzdF9kb3dubGlua191c2FnZVwiKSwgbmFtZTogJ3RyYWZmaWNfcGVyYycsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyIG5vLXdyYXAnLCBkYXRhOiAnZG93bmxpbmtfdXNhZ2VfcGVyY2VudGFnZScsXG5cdFx0cmVuZGVyOiAoZGF0YSkgPT4ge1xuXHRcdFx0Y29uc3QgcGVyY2VudGFnZSA9IGRhdGEudG9GaXhlZCgxKTtcblx0XHRcdGlmIChwZXJjZW50YWdlID4gMTAwKSBwZXJjZW50YWdlID0gMTAwO1xuXHRcdFx0cmV0dXJuIE50b3BVdGlscy5jcmVhdGVQcm9ncmVzc0JhcihwZXJjZW50YWdlKVxuXHRcdH1cblx0fSwge1xuXHRcdGNvbHVtbk5hbWU6IGkxOG4oXCJsYXN0X3VwbGlua191c2FnZVwiKSwgbmFtZTogJ3RyYWZmaWNfcGVyYycsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyIG5vLXdyYXAnLCBkYXRhOiAndXBsaW5rX3VzYWdlX3BlcmNlbnRhZ2UnLFxuXHRcdHJlbmRlcjogKGRhdGEpID0+IHtcblx0XHRcdGNvbnN0IHBlcmNlbnRhZ2UgPSBkYXRhLnRvRml4ZWQoMSk7XG5cdFx0XHRpZiAocGVyY2VudGFnZSA+IDEwMCkgcGVyY2VudGFnZSA9IDEwMDtcblx0XHRcdHJldHVybiBOdG9wVXRpbHMuY3JlYXRlUHJvZ3Jlc3NCYXIocGVyY2VudGFnZSlcblx0XHR9XG5cdH0sIHtcblx0XHRjb2x1bW5OYW1lOiBpMThuKFwicGFnZV9zdGF0cy50b3AudGhyb3VnaHB1dFwiKSwgbmFtZTogJ3Rocm91Z2hwdXQnLCBjbGFzc05hbWU6ICd0ZXh0LWVuZCcsIGRhdGE6ICd0aHJvdWdocHV0Jywgb3JkZXJhYmxlOiB0cnVlLFxuXHRcdHJlbmRlcjogKGRhdGEpID0+IHtcblx0XHRcdHJldHVybiBicHNGb3JtYXR0ZXIoZGF0YSk7XG5cdFx0XHQvL3JldHVybiBOdG9wVXRpbHMuYnl0ZXNUb1NpemUoZGF0YSlcblx0XHR9LFxuXHR9LF0sXG59O1xuXG5jb25zdCBzbm1wX2ludGVyZmFjZV90b3BfdGFibGVzID0gW3RvcF9zbm1wX2ludGVyZmFjZV07XG5cbmV4cG9ydCBkZWZhdWx0IHNubXBfaW50ZXJmYWNlX3RvcF90YWJsZXM7XG4iLCJpbXBvcnQgeyBEYXRhVGFibGVVdGlscyB9IGZyb20gXCIuLi91dGlsaXRpZXMvZGF0YXRhYmxlL3NwcnltZWRpYS1kYXRhdGFibGUtdXRpbHNcIjtcbmltcG9ydCBmb3JtYXR0ZXJVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL2Zvcm1hdHRlci11dGlscy5qc1wiO1xuaW1wb3J0IE50b3BVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL250b3AtdXRpbHNcIjtcblxuY29uc3QgYnl0ZXNUb1NpemVGb3JtYXR0ZXIgPSBmb3JtYXR0ZXJVdGlscy5nZXRGb3JtYXR0ZXIoZm9ybWF0dGVyVXRpbHMudHlwZXMuYnl0ZXMuaWQpO1xuY29uc3QgYnBzRm9ybWF0dGVyID0gZm9ybWF0dGVyVXRpbHMuZ2V0Rm9ybWF0dGVyKGZvcm1hdHRlclV0aWxzLnR5cGVzLmJwcy5pZCk7XG5jb25zdCBoYW5kbGVySWRBZGRMaW5rID0gXCJwYWdlLXN0YXRzLWFjdGlvbi1saW5rXCI7XG5cbmNvbnN0IHRvcF9mbG93X2ludGVyZmFjZSA9IHtcblx0dGFibGVfdmFsdWU6IFwiZmxvd2RldmljZVwiLFxuXHR0YWJsZV9zb3VyY2VfZGVmX3ZhbHVlX2RpY3Q6IHsgaWZpZDogdHJ1ZSwgZGV2aWNlOiB0cnVlLCBpZl9pbmRleDogZmFsc2UgfSxcblx0dGl0bGU6IGkxOG4oJ3BhZ2Vfc3RhdHMudG9wLnRvcF9pbnRlcmZhY2VzJyksXG5cdHZpZXc6IFwidG9wX2Zsb3dkZXZfaWZhY2VzXCIsXG5cdGRlZmF1bHRfc29ydGluZ19jb2x1bW5zOiA0LFxuXHRjb2x1bW5EZWZzOiBbXG5cdFx0eyB0eXBlOiBcImZpbGUtc2l6ZVwiLCB0YXJnZXRzOiAxIH0sXG5cdFx0eyB0eXBlOiBcImZpbGUtc2l6ZVwiLCB0YXJnZXRzOiAyIH0sXG5cdFx0eyB0eXBlOiBcImZpbGUtc2l6ZVwiLCB0YXJnZXRzOiAzIH0sXG5cdF0sXG5cdGZfZ2V0X2xhYmVsOiAodHNfZ3JvdXApID0+IHtcblx0XHRsZXQgc291cmNlX2RlZl9hcnJheSA9IHRzX2dyb3VwLnNvdXJjZV90eXBlLnNvdXJjZV9kZWZfYXJyYXk7XG5cdFx0bGV0IHNvdXJjZV9sYWJlbDtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHNvdXJjZV9kZWZfYXJyYXkubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRcdGlmIChzb3VyY2VfZGVmX2FycmF5W2ldLnZhbHVlICE9IFwiZGV2aWNlXCIpIHsgY29udGludWU7IH1cblx0XHRcdHNvdXJjZV9sYWJlbCA9IHRzX2dyb3VwLnNvdXJjZV9hcnJheVtpXS5sYWJlbDtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0XHRyZXR1cm4gYCR7aTE4bigncGFnZV9zdGF0cy50b3AudG9wX2ludGVyZmFjZXMnKX0gLSBGbG93IEV4cG9ydGVyICR7c291cmNlX2xhYmVsfWA7XG5cdH0sXG5cdGRlZmF1bHQ6IHRydWUsXG5cblx0Y29sdW1uczogW3tcblx0XHRjb2x1bW5OYW1lOiBpMThuKFwiaW50ZXJmYWNlX25hbWVcIiksIG5hbWU6ICdpbnRlcmZhY2UnLCBkYXRhOiAnaW50ZXJmYWNlJywgaGFuZGxlcklkOiBoYW5kbGVySWRBZGRMaW5rLFxuXHRcdHJlbmRlcjogZnVuY3Rpb24gKGRhdGEsIHR5cGUsIHNlcnZpY2UpIHtcblx0XHRcdGxldCBjb250ZXh0ID0gdGhpcztcblx0XHRcdGxldCBoYW5kbGVyID0ge1xuXHRcdFx0XHRoYW5kbGVySWQ6IGhhbmRsZXJJZEFkZExpbmssXG5cdFx0XHRcdG9uQ2xpY2s6IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRsZXQgc2NoZW1hID0gYGZsb3dkZXZfcG9ydDp0cmFmZmljYDtcblx0XHRcdFx0XHRjb250ZXh0LmFkZF90c19ncm91cF9mcm9tX3NvdXJjZV92YWx1ZV9kaWN0KFwiZmxvd19pbnRlcmZhY2VcIiwgc2VydmljZS50YWdzLCBzY2hlbWEpO1xuXHRcdFx0XHR9LFxuXHRcdFx0fTtcblx0XHRcdGxldCBsYWJlbF90ZXh0ID0gYCR7ZGF0YS5sYWJlbH1gO1xuXHRcdFx0cmV0dXJuIERhdGFUYWJsZVV0aWxzLmNyZWF0ZUxpbmtDYWxsYmFjayh7IHRleHQ6IGxhYmVsX3RleHQsIGhhbmRsZXIgfSk7XG5cdFx0fSxcblx0fSwgIHtcblx0XHRjb2x1bW5OYW1lOiBpMThuKFwicGFnZV9zdGF0cy50b3Auc2VudFwiKSwgbmFtZTogJ3NlbnQnLCBjbGFzc05hbWU6ICd0ZXh0LWVuZCcsIGRhdGE6ICdzZW50Jywgb3JkZXJhYmxlOiB0cnVlLFxuXHRcdHJlbmRlcjogKGRhdGEpID0+IHtcblx0XHRcdHJldHVybiBieXRlc1RvU2l6ZUZvcm1hdHRlcihkYXRhKTtcblx0XHR9LFxuXHR9LCB7XG5cdFx0Y29sdW1uTmFtZTogaTE4bihcInBhZ2Vfc3RhdHMudG9wLnJlY2VpdmVkXCIpLCBuYW1lOiAncmVjZWl2ZWQnLCBjbGFzc05hbWU6ICd0ZXh0LWVuZCcsIGRhdGE6ICdyY3ZkJywgb3JkZXJhYmxlOiB0cnVlLFxuXHRcdHJlbmRlcjogKGRhdGEpID0+IHtcblx0XHRcdHJldHVybiBieXRlc1RvU2l6ZUZvcm1hdHRlcihkYXRhKTtcblx0XHR9LFxuXHR9LCB7XG5cdFx0Y29sdW1uTmFtZTogaTE4bihcInRyYWZmaWNcIiksIG5hbWU6ICd0cmFmZmljJywgY2xhc3NOYW1lOiAndGV4dC1lbmQnLCBkYXRhOiAndG90YWwnLCBvcmRlcmFibGU6IHRydWUsXG5cdFx0cmVuZGVyOiAoZGF0YSkgPT4ge1xuXHRcdFx0cmV0dXJuIGJ5dGVzVG9TaXplRm9ybWF0dGVyKGRhdGEpO1xuXHRcdH0sXG5cdH0sIHtcblx0XHRjb2x1bW5OYW1lOiBpMThuKFwicGVyY2VudGFnZVwiKSwgbmFtZTogJ3RyYWZmaWNfcGVyYycsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgZGF0YTogJ3BlcmNlbnRhZ2UnLFxuXHRcdHJlbmRlcjogKGRhdGEpID0+IHtcblx0XHRcdGNvbnN0IHBlcmNlbnRhZ2UgPSBkYXRhLnRvRml4ZWQoMSk7XG5cdFx0XHRyZXR1cm4gTnRvcFV0aWxzLmNyZWF0ZVByb2dyZXNzQmFyKHBlcmNlbnRhZ2UpXG5cdFx0fVxuXHR9LCB7XG5cdFx0Y29sdW1uTmFtZTogaTE4bihcInBhZ2Vfc3RhdHMudG9wLnRocm91Z2hwdXRcIiksIG5hbWU6ICd0aHJvdWdocHV0JywgY2xhc3NOYW1lOiAndGV4dC1lbmQnLCBkYXRhOiAndGhyb3VnaHB1dCcsIG9yZGVyYWJsZTogdHJ1ZSxcblx0XHRyZW5kZXI6IChkYXRhKSA9PiB7XG5cdFx0XHRyZXR1cm4gYnBzRm9ybWF0dGVyKGRhdGEpO1xuXHRcdH0sXG5cdH0sXSxcbn07XG5cbmNvbnN0IGZsb3dfZGV2X3RvcF90YWJsZXMgPSBbdG9wX2Zsb3dfaW50ZXJmYWNlXTtcblxuZXhwb3J0IGRlZmF1bHQgZmxvd19kZXZfdG9wX3RhYmxlcztcbiIsImltcG9ydCB7IG50b3BuZ191dGlsaXR5LCBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcy5qc1wiO1xuaW1wb3J0IE50b3BVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL250b3AtdXRpbHMuanNcIjtcblxuY29uc3QgYXZhaWxhYmxlX2ludGVyZmFjZXMgPSBhc3luYyAoaG9zdCkgPT4ge1xuICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgICAgaG9zdDogaG9zdFxuICAgIH07XG4gICAgY29uc3QgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyhwYXJhbXMpO1xuICAgIGNvbnN0IHNubXBfZGV2aWNlX3BvcnRfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvc25tcC9kZXZpY2UvYXZhaWxhYmxlX2ludGVyZmFjZXMubHVhPyR7dXJsX3BhcmFtc31gO1xuICAgIGNvbnN0IGludGVyZmFjZXNfbGlzdCA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdChzbm1wX2RldmljZV9wb3J0X3VybCk7XG4gICAgcmV0dXJuIGludGVyZmFjZXNfbGlzdDtcbn07XG5cbmNvbnN0IHNubXBfZGV2aWNlX3BvcnRzID0gYXN5bmMgKGhvc3QpID0+IHtcbiAgICBsZXQgaW50ZXJmYWNlcyA9IGF3YWl0IGF2YWlsYWJsZV9pbnRlcmZhY2VzKGhvc3QpO1xuICAgIGxldCByZXN1bHRfaW50ZXJmYWNlcyA9IGludGVyZmFjZXMubWFwKChpZmFjZSkgPT4ge1xuICAgICAgICBpZihpZmFjZS5uYW1lICE9IG51bGwgJiYgaWZhY2UubmFtZSAhPSBcIlwiICYmIGlmYWNlLm5hbWUgIT0gaWZhY2UuaWQpIHtcbiAgICAgICAgICAgIHJldHVybiB7IGxhYmVsOiBgJHtpZmFjZS5uYW1lfSAoJHtpZmFjZS5pZH0pYCwgaWQ6IGlmYWNlLmlkLCBuYW1lOiBpZmFjZS5uYW1lIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgbGFiZWw6IGlmYWNlLmlkLCBpZDogaWZhY2UuaWQsICBuYW1lOiBpZmFjZS5pZCB9O1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdF9pbnRlcmZhY2VzLnNvcnQoTnRvcFV0aWxzLnNvcnRBbHBoYWJldGljYWxseSlcbn07XG5cbmNvbnN0IHByb3h5X3NubXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYXZhaWxhYmxlX2ludGVyZmFjZXMsXG4gICAgICAgIHNubXBfZGV2aWNlX3BvcnRzLFxuICAgIH07XG59KCk7XG5cbmV4cG9ydCBkZWZhdWx0IHByb3h5X3NubXA7XG4iLCJpbXBvcnQgaW50ZXJmYWNlVG9wVGFibGVzIGZyb20gXCIuL2ludGVyZmFjZV90b3BfdGFibGVzLmpzXCI7XG5pbXBvcnQgaG9zdFRvcFRhYmxlcyBmcm9tIFwiLi9ob3N0X3RvcF90YWJsZXMuanNcIjtcbmltcG9ydCBzbm1wSW50ZXJmYWNlVG9wVGFibGVzIGZyb20gXCIuL3NubXBfaW50ZXJmYWNlX3RvcF90YWJsZXMuanNcIjtcbmltcG9ydCBmbG93RGV2aWNlVG9wVGFibGVzIGZyb20gXCIuL2Zsb3dfZGV2aWNlX3RvcF90YWJsZXMuanNcIjtcbmltcG9ydCBwcm94eVNubXAgZnJvbSBcIi4uL3Byb3hpZXMvc25tcC5qc1wiO1xuXG5jb25zdCB1aV90eXBlcyA9IHtcblx0aGlkZTogXCJoaWRlXCIsXG5cdHNlbGVjdDogXCJzZWxlY3RcIixcblx0aW5wdXQ6IFwiaW5wdXRcIixcblx0aW5wdXQ6IFwiaW5wdXRfY29uZmlybVwiLFxufTtcblxuY29uc3Qgc291cmNlc191cmxfZWxfdG9fc291cmNlID0ge1xuICAgIGlmaWQ6IChzKSA9PiB7XG5cdGxldCBsYWJlbCA9IHMuaWZuYW1lO1xuXHRpZiAocy5uYW1lICE9IG51bGwpIHtcblx0ICAgIGxhYmVsID0gcy5uYW1lO1xuXHR9XG5cdHJldHVybiB7XG5cdCAgICBsYWJlbCxcblx0ICAgIHZhbHVlOiBzLmlmaWQsXG5cdH07XG4gICAgfSxcbiAgICBwb29sOiAocCkgPT4ge1xuXHRsZXQgbGFiZWwgPSBwLnBvb2xfaWQ7XG5cdGlmIChwLm5hbWUgIT0gbnVsbCkgeyBsYWJlbCA9IHAubmFtZTsgfVxuXHRyZXR1cm4ge1xuXHQgICAgbGFiZWwsXG5cdCAgICB2YWx1ZTogcC5wb29sX2lkLFxuXHR9O1xuICAgIH0sXG4gICAgYW1faG9zdDogKGFtKSA9PiB7XG5cdGxldCBsYWJlbCA9IGAke2FtLmxhYmVsfSAke2FtLm1lYXN1cmVtZW50fWA7XG5cdGxldCB2YWx1ZSA9IGAke2FtLmhvc3R9LG1ldHJpYzoke2FtLm1lYXN1cmVtZW50X2tleX1gO1xuXHRyZXR1cm4ge1xuXHQgICAgbGFiZWwsXG5cdCAgICB2YWx1ZSxcblx0fTtcbiAgICB9LFxuICAgIGJsYWNrbGlzdDogKGIpID0+IHtcbiAgICAgICAgbGV0IGxhYmVsID0gYCR7Yi5jb2x1bW5fbmFtZX1gO1xuICAgICAgICBsZXQgdmFsdWUgPSBsYWJlbDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxhYmVsLFxuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBkZXZpY2U6IChkZXZpY2UpID0+IHtcblx0bGV0IGxhYmVsID0gYCR7ZGV2aWNlLm5hbWV9YDtcblx0bGV0IHZhbHVlID0gYCR7ZGV2aWNlLmlwfWA7XG5cdHJldHVybiB7XG5cdCAgICBsYWJlbCxcblx0ICAgIHZhbHVlLFxuXHR9O1xuICAgIH0sXG4gICAgaWZfaW5kZXg6IChpbmRleCkgPT4ge1xuXHRyZXR1cm4gJyc7XG5cdC8qXHRsZXQgbGFiZWwgPSBgJHtpbmRleC5uYW1lfWA7XG5cdFx0bGV0IHZhbHVlID0gYCR7aW5kZXguaXB9YDtcblx0XHRyZXR1cm4ge1xuXHRcdGxhYmVsLFxuXHRcdHZhbHVlLFxuXHRcdH07Ki9cbiAgICB9XG59O1xuXG5jb25zdCBzb3VyY2VzX3R5cGVzX3RhYmxlcyA9IHtcblx0aW50ZXJmYWNlOiBpbnRlcmZhY2VUb3BUYWJsZXMsXG5cdGhvc3Q6IGhvc3RUb3BUYWJsZXMsXG5cdHNubXBfaW50ZXJmYWNlOiBzbm1wSW50ZXJmYWNlVG9wVGFibGVzLFxuXHRzbm1wX2RldmljZTogc25tcEludGVyZmFjZVRvcFRhYmxlcyxcblx0Zmxvd19kZXZpY2U6IGZsb3dEZXZpY2VUb3BUYWJsZXMsXG5cdGZsb3dfaW50ZXJmYWNlOiBmbG93RGV2aWNlVG9wVGFibGVzLFxufTtcblxuY29uc3Qgc291cmNlc190eXBlcyA9IFtcblx0e1xuXHQgICAgaWQ6IFwiaW50ZXJmYWNlXCIsIC8vdW5pcXVlIGlkXG5cdCAgICByZWdleF9wYWdlX3VybDogXCJsdWFcXC9pZl9zdGF0c1wiLCAvLyByZWdleCB0byBtYXRjaCB1cmwgcGFnZVxuXHQgICAgbGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaW50ZXJmYWNlXCIpLFxuXHQgICAgcXVlcnk6IFwiaWZhY2VcIixcbiAgICAgICAgICAgIGZfbWFwX3RzX29wdGlvbnM6IG51bGwsIC8vIGNvbnZlcnQgcmVzdCByZXN1bHRcblx0ICAgIHNvdXJjZV9kZWZfYXJyYXk6IFt7XG5cdFx0bWFpbl9zb3VyY2VfZGVmOiB0cnVlLFxuXHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmludGVyZmFjZVwiKSxcblx0XHRyZWdleF90eXBlOiBudWxsLFxuICAgICAgICAgICAgICAgIHJlZnJlc2hfb25fc291cmNlc19jaGFuZ2U6IGZhbHNlLCAvLyBpZiB0cnVlIHNvdXJjZXMgbGlzdCBhcmUgcmVhbG9hZGVkIGV2ZXJ5IHRpbWUgc29tZSBzZWxlY3RlZCBzb3VyY2VzIGNoYW5nZWQgXG5cdFx0c291cmNlc191cmw6IFwibHVhL3Jlc3QvdjIvZ2V0L250b3BuZy9pbnRlcmZhY2VzLmx1YVwiLCAvLyB1cmwgdG8gZ2V0IHNvdXJjZXMgbGlzdFxuXHRcdHNvdXJjZXNfZnVuY3Rpb246IG51bGwsIC8vIGN1c3RvbSBmdW5jdGlvbiB0aGF0IHJldHVybiBzb3VyY2VzX2xpc3QsIG92ZXJ3cml0ZSBzb3VyY2VzX3VybFxuXHRcdHZhbHVlOiBcImlmaWRcIiwgLy8gdXNlZCBpbiB0c1F1ZXJ5IHBhcmFtZXRlciwgdG8gZ2V0IGluaXQgYW5kIHNldCB2YWx1ZSBpbiB1cmxcblx0XHR2YWx1ZV91cmw6IG51bGwsIC8vIG92ZXJ3cml0ZSB2YWx1ZSB0byBnZXQgYW5kIHNldCB2YWx1ZSBpbiB1cmxcblx0XHR2YWx1ZV9tYXBfc291cmNlc19yZXM6IG51bGwsXG5cdFx0ZGlzYWJsZV90c2tleTogbnVsbCxcblx0XHRmX2dldF92YWx1ZV91cmw6IG51bGwsIC8vIG92ZXJ3cml0ZSB2YWx1ZSBhbmQgdmFsdWVfdXJsIHRvIGdldCBzdGFydCB2YWx1ZSBmcm9tIHVybFxuXHRcdGZfc2V0X3ZhbHVlX3VybDogbnVsbCwgLy8gb3ZlcndyaXRlIHZhbHVlIGFuZCB2YWx1ZV91cmwgdG8gc2V0IHN0YXJ0IHZhbHVlIGluIHVybFxuXHRcdHVpX3R5cGU6IHVpX3R5cGVzLnNlbGVjdCxcblx0ICAgIH1dLFxuXHR9LFxuXHR7XG5cdCAgICBpZDogXCJibGFja2xpc3RcIiwgLy91bmlxdWUgaWRcblx0ICAgIHJlZ2V4X3BhZ2VfdXJsOiBcImx1YVxcL2JsYWNrbGlzdHNfc3RhdHNcIiwgLy8gcmVnZXggdG8gbWF0Y2ggdXJsIHBhZ2Vcblx0ICAgIGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmJsYWNrbGlzdFwiKSxcblx0ICAgIHF1ZXJ5OiBcImJsYWNrbGlzdFwiLFxuICAgICAgICAgICAgZl9tYXBfdHNfb3B0aW9uczogKHRzX29wdGlvbnMsIHRzX2dyb3VwKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRzX29wdGlvbnMuc2VyaWVzID09IG51bGwpIHsgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHNfb3B0aW9ucztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdHNfb3B0aW9ucy5zZXJpZXMuZm9yRWFjaCgocykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHNfZ3JvdXAubWV0cmljLnF1ZXJ5ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMubmFtZSA9IHRzX2dyb3VwLm1ldHJpYy5sYWJlbDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHMubmFtZSA9IHMubmFtZS5yZXBsYWNlQWxsKFwiX1wiLCBcIiBcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBzLnR5cGUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHNfb3B0aW9ucztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAvLyBkaXNwbGF5X2Z1bGxfbmFtZTogdHJ1ZSxcblx0ICAgIHNvdXJjZV9kZWZfYXJyYXk6IFt7XG5cdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaW50ZXJmYWNlXCIpLFxuXHRcdHNvdXJjZXNfZnVuY3Rpb246ICgpID0+IHsgcmV0dXJuIFt7IGxhYmVsOiBcIlN5c3RlbVwiLCB2YWx1ZTogLTEgfV0gfSxcblx0XHR2YWx1ZTogXCJpZmlkXCIsXG5cdFx0dWlfdHlwZTogdWlfdHlwZXMuaGlkZSxcblx0ICAgIH0sXVxuXHR9LFxuXHR7XG5cdFx0aWQ6IFwidnVsbmVyYWJpbGl0eV9zY2FuXCIsIC8vdW5pcXVlIGlkXG5cdFx0cmVnZXhfcGFnZV91cmw6IFwibHVhXFwvdnVsbmVyYWJpbGl0eV9zY2FuXCIsIC8vIHJlZ2V4IHRvIG1hdGNoIHVybCBwYWdlXG5cdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYudnVsbl9zY2FuXCIpLFxuXHRcdHF1ZXJ5OiBcImFtX3Z1bG5fc2NhblwiLFxuXHRcdHNvdXJjZV9kZWZfYXJyYXk6IFt7XG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG5cdFx0XHRzb3VyY2VzX2Z1bmN0aW9uOiAoKSA9PiB7IHJldHVybiBbeyBsYWJlbDogXCJTeXN0ZW1cIiwgdmFsdWU6IC0xIH1dIH0sXG5cdFx0XHR2YWx1ZTogXCJpZmlkXCIsXG5cdFx0XHR1aV90eXBlOiB1aV90eXBlcy5oaWRlLFxuXHRcdH1dXG5cdFx0XG5cdH0sXG5cdHtcblx0XHRpZDogXCJob3N0XCIsXG5cdFx0cmVnZXhfcGFnZV91cmw6IFwibHVhXFwvaG9zdF9kZXRhaWxzXCIsXG5cdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaG9zdFwiKSxcblx0XHR0YWJsZV92YWx1ZTogXCJob3N0XCIsXG5cdFx0cXVlcnk6IFwiaG9zdFwiLFxuXHRcdHNvdXJjZV9kZWZfYXJyYXk6IFt7XG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG5cdFx0XHRzb3VyY2VzX3VybDogXCJsdWEvcmVzdC92Mi9nZXQvbnRvcG5nL2ludGVyZmFjZXMubHVhXCIsXG5cdFx0XHR2YWx1ZTogXCJpZmlkXCIsXG5cdFx0XHR1aV90eXBlOiB1aV90eXBlcy5zZWxlY3QsXG5cdFx0fSwge1xuXHRcdFx0bWFpbl9zb3VyY2VfZGVmOiB0cnVlLFxuXHRcdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaG9zdFwiKSxcblx0XHRcdHJlZ2V4X3R5cGU6IFwiaXBcIixcblx0XHRcdHZhbHVlOiBcImhvc3RcIixcblx0XHRcdHVpX3R5cGU6IHVpX3R5cGVzLmlucHV0LFxuXHRcdH1dLFxuXHR9LFxuXHR7XG5cdFx0aWQ6IFwibWFjXCIsXG5cdFx0cmVnZXhfcGFnZV91cmw6IFwibHVhXFwvbWFjX2RldGFpbHNcIixcblx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5tYWNcIiksXG5cdFx0cXVlcnk6IFwibWFjXCIsXG5cdFx0c291cmNlX2RlZl9hcnJheTogW3tcblx0XHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmludGVyZmFjZVwiKSxcblx0XHRcdHNvdXJjZXNfdXJsOiBcImx1YS9yZXN0L3YyL2dldC9udG9wbmcvaW50ZXJmYWNlcy5sdWFcIixcblx0XHRcdHZhbHVlOiBcImlmaWRcIixcblx0XHRcdHVpX3R5cGU6IHVpX3R5cGVzLnNlbGVjdCxcblx0XHR9LCB7XG5cdFx0XHRtYWluX3NvdXJjZV9kZWY6IHRydWUsXG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5tYWNcIiksXG5cdFx0XHRyZWdleF90eXBlOiBcIm1hY0FkZHJlc3NcIixcblx0XHRcdHZhbHVlOiBcIm1hY1wiLFxuXHRcdFx0dmFsdWVfdXJsOiBcImhvc3RcIixcblx0XHRcdHVpX3R5cGU6IHVpX3R5cGVzLmlucHV0LFxuXHRcdH1dLFxuXHR9LFxuXHR7XG5cdFx0aWQ6IFwibmV0d29ya1wiLFxuXHRcdHJlZ2V4X3BhZ2VfdXJsOiBcImx1YVxcL25ldHdvcmtfZGV0YWlsc1wiLFxuXHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLm5ldHdvcmtcIiksXG5cdFx0cXVlcnk6IFwic3VibmV0XCIsXG5cdFx0c291cmNlX2RlZl9hcnJheTogW3tcblx0XHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmludGVyZmFjZVwiKSxcblx0XHRcdHNvdXJjZXNfdXJsOiBcImx1YS9yZXN0L3YyL2dldC9udG9wbmcvaW50ZXJmYWNlcy5sdWFcIixcblx0XHRcdHZhbHVlOiBcImlmaWRcIixcblx0XHRcdHVpX3R5cGU6IHVpX3R5cGVzLnNlbGVjdCxcblx0XHR9LCB7XG5cdFx0XHRtYWluX3NvdXJjZV9kZWY6IHRydWUsXG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5uZXR3b3JrXCIpLFxuXHRcdFx0cmVnZXhfdHlwZTogXCJ0ZXh0XCIsXG5cdFx0XHR2YWx1ZTogXCJzdWJuZXRcIixcblx0XHRcdHVpX3R5cGU6IHVpX3R5cGVzLmlucHV0LFxuXHRcdH1dLFxuXHR9LFxuXHR7XG5cdFx0aWQ6IFwiYXNcIixcblx0XHRyZWdleF9wYWdlX3VybDogXCJsdWFcXC9hc19kZXRhaWxzXCIsXG5cdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuYXNcIiksXG5cdFx0cXVlcnk6IFwiYXNuXCIsXG5cdFx0c291cmNlX2RlZl9hcnJheTogW3tcblx0XHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmludGVyZmFjZVwiKSxcblx0XHRcdHNvdXJjZXNfdXJsOiBcImx1YS9yZXN0L3YyL2dldC9udG9wbmcvaW50ZXJmYWNlcy5sdWFcIixcblx0XHRcdHZhbHVlOiBcImlmaWRcIixcblx0XHRcdHVpX3R5cGU6IHVpX3R5cGVzLnNlbGVjdCxcblx0XHR9LCB7XG5cdFx0XHRtYWluX3NvdXJjZV9kZWY6IHRydWUsXG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5hc1wiKSxcblx0XHRcdHJlZ2V4X3R5cGU6IFwidGV4dFwiLFxuXHRcdFx0dmFsdWU6IFwiYXNuXCIsXG5cdFx0XHR1aV90eXBlOiB1aV90eXBlcy5pbnB1dCxcblx0XHR9XSxcblx0fSxcblx0e1xuXHRcdGlkOiBcImNvdW50cnlcIixcblx0XHRyZWdleF9wYWdlX3VybDogXCJsdWFcXC9jb3VudHJ5X2RldGFpbHNcIixcblx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5jb3VudHJ5XCIpLFxuXHRcdHF1ZXJ5OiBcImNvdW50cnlcIixcblx0XHRzb3VyY2VfZGVmX2FycmF5OiBbe1xuXHRcdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaW50ZXJmYWNlXCIpLFxuXHRcdFx0c291cmNlc191cmw6IFwibHVhL3Jlc3QvdjIvZ2V0L250b3BuZy9pbnRlcmZhY2VzLmx1YVwiLFxuXHRcdFx0dmFsdWU6IFwiaWZpZFwiLFxuXHRcdFx0dWlfdHlwZTogdWlfdHlwZXMuc2VsZWN0LFxuXHRcdH0sIHtcblx0XHRcdG1haW5fc291cmNlX2RlZjogdHJ1ZSxcblx0XHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmNvdW50cnlcIiksXG5cdFx0XHRyZWdleF90eXBlOiBcInRleHRcIixcblx0XHRcdHZhbHVlOiBcImNvdW50cnlcIixcblx0XHRcdHVpX3R5cGU6IHVpX3R5cGVzLmlucHV0LFxuXHRcdH1dLFxuXHR9LFxuXHR7XG5cdFx0aWQ6IFwib3NcIixcblx0XHRyZWdleF9wYWdlX3VybDogXCJsdWFcXC9vc19kZXRhaWxzXCIsXG5cdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYub3NcIiksXG5cdFx0cXVlcnk6IFwib3NcIixcblx0XHRzb3VyY2VfZGVmX2FycmF5OiBbe1xuXHRcdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaW50ZXJmYWNlXCIpLFxuXHRcdFx0c291cmNlc191cmw6IFwibHVhL3Jlc3QvdjIvZ2V0L250b3BuZy9pbnRlcmZhY2VzLmx1YVwiLFxuXHRcdFx0dmFsdWU6IFwiaWZpZFwiLFxuXHRcdFx0dWlfdHlwZTogdWlfdHlwZXMuc2VsZWN0LFxuXHRcdH0sIHtcblx0XHRcdG1haW5fc291cmNlX2RlZjogdHJ1ZSxcblx0XHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLm9zXCIpLFxuXHRcdFx0cmVnZXhfdHlwZTogXCJ0ZXh0XCIsXG5cdFx0XHR2YWx1ZTogXCJvc1wiLFxuXHRcdFx0dWlfdHlwZTogdWlfdHlwZXMuaW5wdXQsXG5cdFx0fV0sXG5cdH0sXG5cdHtcblx0XHRpZDogXCJ2bGFuXCIsXG5cdFx0cmVnZXhfcGFnZV91cmw6IFwibHVhXFwvdmxhbl9kZXRhaWxzXCIsXG5cdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYudmxhblwiKSxcblx0XHRxdWVyeTogXCJ2bGFuXCIsXG5cdFx0c291cmNlX2RlZl9hcnJheTogW3tcblx0XHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmludGVyZmFjZVwiKSxcblx0XHRcdHNvdXJjZXNfdXJsOiBcImx1YS9yZXN0L3YyL2dldC9udG9wbmcvaW50ZXJmYWNlcy5sdWFcIixcblx0XHRcdHZhbHVlOiBcImlmaWRcIixcblx0XHRcdHVpX3R5cGU6IHVpX3R5cGVzLnNlbGVjdCxcblx0XHR9LCB7XG5cdFx0XHRtYWluX3NvdXJjZV9kZWY6IHRydWUsXG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi52bGFuXCIpLFxuXHRcdFx0cmVnZXhfdHlwZTogXCJ0ZXh0XCIsXG5cdFx0XHR2YWx1ZTogXCJ2bGFuXCIsXG5cdFx0XHR1aV90eXBlOiB1aV90eXBlcy5pbnB1dCxcblx0XHR9XSxcblx0fSxcblx0e1xuXHRcdGlkOiBcInBvb2xcIixcblx0XHRyZWdleF9wYWdlX3VybDogXCJsdWFcXC9wb29sX2RldGFpbHNcIixcblx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5wb29sXCIpLFxuXHRcdHF1ZXJ5OiBcImhvc3RfcG9vbFwiLFxuXHRcdHNvdXJjZV9kZWZfYXJyYXk6IFt7XG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG5cdFx0XHRzb3VyY2VzX3VybDogXCJsdWEvcmVzdC92Mi9nZXQvbnRvcG5nL2ludGVyZmFjZXMubHVhXCIsXG5cdFx0XHR2YWx1ZTogXCJpZmlkXCIsXG5cdFx0XHR1aV90eXBlOiB1aV90eXBlcy5zZWxlY3QsXG5cdFx0fSwge1xuXHRcdFx0bWFpbl9zb3VyY2VfZGVmOiB0cnVlLFxuXHRcdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYucG9vbFwiKSxcblx0XHRcdHNvdXJjZXNfdXJsOiBcImx1YS9yZXN0L3YyL2dldC9ob3N0L3Bvb2xzLmx1YVwiLFxuXHRcdFx0dmFsdWU6IFwicG9vbFwiLFxuXHRcdFx0dWlfdHlwZTogdWlfdHlwZXMuc2VsZWN0LFxuXHRcdH1dLFxuXHR9LFxuXHR7XG5cdFx0aWQ6IFwic3lzdGVtXCIsXG5cdFx0cmVnZXhfcGFnZV91cmw6IFwibHVhXFwvc3lzdGVtX3N0YXRzXCIsXG5cdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuc3lzdGVtXCIpLFxuXHRcdHF1ZXJ5OiBcInN5c3RlbVwiLFxuXHRcdHNvdXJjZV9kZWZfYXJyYXk6IFt7XG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG5cdFx0XHRzb3VyY2VzX2Z1bmN0aW9uOiAoKSA9PiB7IHJldHVybiBbeyBsYWJlbDogXCJTeXN0ZW1cIiwgdmFsdWU6IC0xIH1dIH0sXG5cdFx0XHR2YWx1ZTogXCJpZmlkXCIsXG5cdFx0XHR1aV90eXBlOiB1aV90eXBlcy5oaWRlLFxuXHRcdH1dLFxuXHR9LFxuXHR7XG5cdFx0aWQ6IFwicHJvZmlsZVwiLFxuXHRcdHJlZ2V4X3BhZ2VfdXJsOiBcImx1YVxcL3Byb2ZpbGVfZGV0YWlsc1wiLFxuXHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLnByb2ZpbGVcIiksXG5cdFx0cXVlcnk6IFwicHJvZmlsZVwiLFxuXHRcdHNvdXJjZV9kZWZfYXJyYXk6IFt7XG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG5cdFx0XHRzb3VyY2VzX3VybDogXCJsdWEvcmVzdC92Mi9nZXQvbnRvcG5nL2ludGVyZmFjZXMubHVhXCIsXG5cdFx0XHR2YWx1ZTogXCJpZmlkXCIsXG5cdFx0XHR1aV90eXBlOiB1aV90eXBlcy5zZWxlY3QsXG5cdFx0fSwge1xuXHRcdFx0bWFpbl9zb3VyY2VfZGVmOiB0cnVlLFxuXHRcdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYucHJvZmlsZVwiKSxcblx0XHRcdHJlZ2V4X3R5cGU6IFwidGV4dFwiLFxuXHRcdFx0dmFsdWU6IFwicHJvZmlsZVwiLFxuXHRcdFx0dWlfdHlwZTogdWlfdHlwZXMuaW5wdXQsXG5cdFx0fV0sXG5cdH0sXG5cdHtcblx0XHRpZDogXCJyZWRpc1wiLFxuXHRcdHJlZ2V4X3BhZ2VfdXJsOiBcImx1YVxcL21vbml0b3JcXC9yZWRpc19tb25pdG9yLmx1YVwiLFxuXHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLnJlZGlzXCIpLFxuXHRcdHF1ZXJ5OiBcInJlZGlzXCIsXG5cdFx0c291cmNlX2RlZl9hcnJheTogW3tcblx0XHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmludGVyZmFjZVwiKSxcblx0XHRcdHNvdXJjZXNfZnVuY3Rpb246ICgpID0+IHsgcmV0dXJuIFt7IGxhYmVsOiBcIlJlZGlzXCIsIHZhbHVlOiAtMSB9XSB9LFxuXHRcdFx0dmFsdWU6IFwiaWZpZFwiLFxuXHRcdFx0dWlfdHlwZTogdWlfdHlwZXMuaGlkZSxcblx0XHR9XSxcblx0fSxcblx0e1xuXHRcdGlkOiBcImluZmx1eFwiLFxuXHRcdHJlZ2V4X3BhZ2VfdXJsOiBcImx1YVxcL21vbml0b3JcXC9pbmZsdXhkYl9tb25pdG9yLmx1YVwiLFxuXHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmluZmx1eFwiKSxcblx0XHRxdWVyeTogXCJpbmZsdXhkYlwiLFxuXHRcdHNvdXJjZV9kZWZfYXJyYXk6IFt7XG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG5cdFx0XHRzb3VyY2VzX2Z1bmN0aW9uOiAoKSA9PiB7IHJldHVybiBbeyBsYWJlbDogXCJJbmZsdXhcIiwgdmFsdWU6IC0xIH1dIH0sXG5cdFx0XHR2YWx1ZTogXCJpZmlkXCIsXG5cdFx0XHR1aV90eXBlOiB1aV90eXBlcy5oaWRlLFxuXHRcdH1dLFxuXHR9LFxuXHR7XG5cdFx0aWQ6IFwiYWN0aXZlX21vbml0b3JpbmdcIixcblx0XHRyZWdleF9wYWdlX3VybDogXCJsdWFcXC9tb25pdG9yXFwvYWN0aXZlX21vbml0b3JpbmdfbW9uaXRvci5sdWFcIixcblx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5hY3RpdmVfbW9uaXRvcmluZ1wiKSxcblx0XHRxdWVyeTogXCJhbVwiLFxuXHRcdHNvdXJjZV9kZWZfYXJyYXk6IFt7XG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG5cdFx0XHRzb3VyY2VzX2Z1bmN0aW9uOiAoKSA9PiB7IHJldHVybiBbeyBsYWJlbDogXCJcIiwgdmFsdWU6IC0xIH1dIH0sXG5cdFx0XHR2YWx1ZTogXCJpZmlkXCIsXG5cdFx0XHR1aV90eXBlOiB1aV90eXBlcy5oaWRlLFxuXHRcdH0sIHtcblx0XHRcdG1haW5fc291cmNlX2RlZjogdHJ1ZSxcblx0XHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmFjdGl2ZV9tb25pdG9yaW5nXCIpLFxuXHRcdFx0c291cmNlc191cmw6IFwibHVhL3Jlc3QvdjIvZ2V0L2FtX2hvc3QvbGlzdC5sdWFcIixcblx0XHRcdHZhbHVlOiBcImhvc3RcIixcblx0XHRcdGRpc2FibGVfdHNrZXk6IHRydWUsXG5cdFx0XHR2YWx1ZV9tYXBfc291cmNlc19yZXM6IFwiYW1faG9zdFwiLFxuXHRcdFx0dWlfdHlwZTogdWlfdHlwZXMuc2VsZWN0LFxuXHRcdH1dLFxuXHR9LFxuXHR7XG5cdCAgICBpZDogXCJzbm1wX2ludGVyZmFjZVwiLFxuXHQgICAgaWRfZ3JvdXA6IFwic25tcFwiLFxuXHQgICAgLy8gZGlzYWJsZV9zdGF0czogdHJ1ZSxcblx0ICAgIHJlZ2V4X3BhZ2VfdXJsOiBcImx1YVxcL3Byb1xcL2VudGVycHJpc2VcXC9zbm1wX2ludGVyZmFjZV9kZXRhaWxzXCIsXG5cdCAgICBsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5zbm1wX2ludGVyZmFjZVwiKSxcblx0ICAgIHF1ZXJ5OiBcInNubXBfaW50ZXJmYWNlXCIsXG4gICAgICAgICAgICBmX21hcF90c19vcHRpb25zOiAodHNfb3B0aW9ucywgdHNfZ3JvdXApID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHNfb3B0aW9ucztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzb3VyY2VfZGVmX2FycmF5OiBbe1xuXHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmludGVyZmFjZVwiKSxcblx0XHRzb3VyY2VzX2Z1bmN0aW9uOiAoKSA9PiB7IHJldHVybiBbeyBsYWJlbDogXCJcIiwgdmFsdWU6IC0xIH1dIH0sXG5cdFx0dmFsdWU6IFwiaWZpZFwiLFxuXHRcdHVpX3R5cGU6IHVpX3R5cGVzLmhpZGUsXG5cdCAgICB9LCB7XG5cdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuZGV2aWNlXCIpLFxuXHRcdHJlZ2V4X3R5cGU6IFwiaXBcIixcblx0XHRzb3VyY2VzX3VybDogXCJsdWEvcHJvL3Jlc3QvdjIvZ2V0L3NubXAvZGV2aWNlL2xpc3QubHVhXCIsIC8vIHVybCB0byBnZXQgc291cmNlcyBsaXN0XG5cdFx0dmFsdWU6IFwiZGV2aWNlXCIsXG5cdFx0dmFsdWVfdXJsOiBcImhvc3RcIixcbiAgICAgICAgICAgICAgICAvLyByZWZyZXNoX2kxOG46ICdtb2RhbF90aW1lc2VyaWVzLnNubXBfY29uZmlybV9kZXZpY2UnLFxuXHRcdC8vIHVpX3R5cGU6IHVpX3R5cGVzLmlucHV0X2NvbmZpcm0sXG4gICAgICAgICAgICAgICAgdWlfdHlwZTogdWlfdHlwZXMuc2VsZWN0LFxuXHQgICAgfSwge1xuXHRcdG1haW5fc291cmNlX2RlZjogdHJ1ZSxcblx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5zbm1wX2ludGVyZmFjZVwiKSxcblx0XHRyZWdleF90eXBlOiBcInRleHRcIixcbiAgICAgICAgICAgICAgICByZWZyZXNoX29uX3NvdXJjZXNfY2hhbmdlOiB0cnVlLFxuXHRcdHNvdXJjZXNfZnVuY3Rpb246IGFzeW5jIChzZWxlY3RlZF9zb3VyY2VfdmFsdWVfYXJyYXkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGV2aWNlX2hvc3QgPSBzZWxlY3RlZF9zb3VyY2VfdmFsdWVfYXJyYXlbMV07XG4gICAgICAgICAgICAgICAgICAgIGxldCBzbm1wX2ludGVyZmFjZXMgPSBhd2FpdCBwcm94eVNubXAuYXZhaWxhYmxlX2ludGVyZmFjZXMoZGV2aWNlX2hvc3QpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc25tcF9pbnRlcmZhY2VzLm1hcCgoaWZhY2UpID0+IHsgcmV0dXJuIHsgbGFiZWw6IGlmYWNlLm5hbWUsIHZhbHVlOiBpZmFjZS5pZCB9OyB9KTtcbiAgICAgICAgICAgICAgICB9LFxuXHRcdHZhbHVlOiBcImlmX2luZGV4XCIsXG5cdFx0dmFsdWVfdXJsOiBcInNubXBfcG9ydF9pZHhcIixcblx0XHR1aV90eXBlOiB1aV90eXBlcy5zZWxlY3QsXG5cdCAgICB9XSxcblx0fSxcblx0e1xuXHRcdGlkOiBcInNubXBfZGV2aWNlXCIsXG5cdFx0aWRfZ3JvdXA6IFwic25tcFwiLFxuXHRcdC8vIGRpc2FibGVfc3RhdHM6IHRydWUsXG5cdFx0cmVnZXhfcGFnZV91cmw6IFwibHVhXFwvcHJvXFwvZW50ZXJwcmlzZVxcL3NubXBfZGV2aWNlX2RldGFpbHNcIixcblx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5zbm1wX2RldmljZVwiKSxcblx0XHRxdWVyeTogXCJzbm1wX2RldmljZVwiLFxuXHRcdHNvdXJjZV9kZWZfYXJyYXk6IFt7XG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG5cdFx0XHRzb3VyY2VzX2Z1bmN0aW9uOiAoKSA9PiB7IHJldHVybiBbeyBsYWJlbDogXCJcIiwgdmFsdWU6IC0xIH1dIH0sXG5cdFx0XHR2YWx1ZTogXCJpZmlkXCIsXG5cdFx0XHR1aV90eXBlOiB1aV90eXBlcy5oaWRlLFxuXHRcdH0sIHtcblx0XHRcdG1haW5fc291cmNlX2RlZjogdHJ1ZSxcblx0XHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmRldmljZVwiKSxcblx0XHRcdHJlZ2V4X3R5cGU6IFwiaXBcIixcblx0XHRcdHNvdXJjZXNfdXJsOiBcImx1YS9wcm8vcmVzdC92Mi9nZXQvc25tcC9kZXZpY2UvbGlzdC5sdWFcIiwgLy8gdXJsIHRvIGdldCBzb3VyY2VzIGxpc3Rcblx0XHRcdHZhbHVlOiBcImRldmljZVwiLFxuXHRcdFx0dmFsdWVfdXJsOiBcImhvc3RcIixcblx0XHRcdHVpX3R5cGU6IHVpX3R5cGVzLmlucHV0LFxuXHRcdH1dLFxuXHR9LFxuXHR7XG5cdFx0aWQ6IFwiZmxvd19kZXZpY2VcIixcblx0XHRyZWdleF9wYWdlX3VybDogXCJsdWFcXC9wcm9cXC9lbnRlcnByaXNlXFwvZmxvd2RldmljZXNfc3RhdHNcIixcblx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5mbG93X2RldmljZVwiKSxcblx0XHRxdWVyeTogXCJmbG93ZGV2XCIsXG5cdFx0c291cmNlX2RlZl9hcnJheTogW3tcblx0XHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmludGVyZmFjZVwiKSxcblx0XHRcdHNvdXJjZXNfdXJsOiBcImx1YS9yZXN0L3YyL2dldC9udG9wbmcvaW50ZXJmYWNlcy5sdWFcIixcblx0XHRcdHZhbHVlOiBcImlmaWRcIixcblx0XHRcdHVpX3R5cGU6IHVpX3R5cGVzLnNlbGVjdCxcblx0XHR9LCB7XG5cdFx0XHRtYWluX3NvdXJjZV9kZWY6IHRydWUsXG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5kZXZpY2VcIiksXG5cdFx0XHRzb3VyY2VzX3VybDogXCJsdWEvcHJvL3Jlc3QvdjIvZ2V0L2Zsb3dkZXZpY2VzL2xpc3QubHVhXCIsIC8vIHVybCB0byBnZXQgc291cmNlcyBsaXN0XG5cdFx0XHRyZWdleF90eXBlOiBcImlwXCIsXG5cdFx0XHR2YWx1ZTogXCJkZXZpY2VcIixcblx0XHRcdHZhbHVlX3VybDogXCJpcFwiLFxuXHRcdFx0dWlfdHlwZTogdWlfdHlwZXMuaW5wdXQsXG5cdFx0fV0sXG5cdH0sXG5cdHtcblx0XHRpZDogXCJmbG93X2ludGVyZmFjZVwiLFxuXHRcdHJlZ2V4X3BhZ2VfdXJsOiBcImx1YVxcL3Byb1xcL2VudGVycHJpc2VcXC9mbG93ZGV2aWNlX2ludGVyZmFjZV9kZXRhaWxzXCIsXG5cdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuZmxvd19pbnRlcmZhY2VcIiksXG5cdFx0cXVlcnk6IFwiZmxvd2Rldl9wb3J0XCIsXG5cdFx0c291cmNlX2RlZl9hcnJheTogW3tcblx0XHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmludGVyZmFjZVwiKSxcblx0XHRcdHNvdXJjZXNfdXJsOiBcImx1YS9yZXN0L3YyL2dldC9udG9wbmcvaW50ZXJmYWNlcy5sdWFcIixcblx0XHRcdHZhbHVlOiBcImlmaWRcIixcblx0XHRcdHVpX3R5cGU6IHVpX3R5cGVzLnNlbGVjdCxcblx0XHR9LCB7XG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5kZXZpY2VcIiksXG5cdFx0XHRyZWdleF90eXBlOiBcImlwXCIsXG5cdFx0XHR2YWx1ZTogXCJkZXZpY2VcIixcblx0XHRcdHZhbHVlX3VybDogXCJpcFwiLFxuXHRcdFx0dWlfdHlwZTogdWlfdHlwZXMuaW5wdXQsXG5cdFx0fSwge1xuXHRcdFx0bWFpbl9zb3VyY2VfZGVmOiB0cnVlLFxuXHRcdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYucG9ydFwiKSxcblx0XHRcdHJlZ2V4X3R5cGU6IFwicG9ydFwiLFxuXHRcdFx0dmFsdWU6IFwicG9ydFwiLFxuXHRcdFx0dmFsdWVfdXJsOiBcInNubXBfcG9ydF9pZHhcIixcblx0XHRcdHVpX3R5cGU6IHVpX3R5cGVzLmlucHV0LFxuXHRcdH1dLFxuXHR9LFxuXHR7XG5cdFx0aWQ6IFwic2Zsb3dfZGV2aWNlXCIsXG5cdFx0cmVnZXhfcGFnZV91cmw6IFwibHVhXFwvcHJvXFwvZW50ZXJwcmlzZVxcL3NmbG93ZGV2aWNlc19zdGF0c1wiLFxuXHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLnNmbG93X2RldmljZVwiKSxcblx0XHRxdWVyeTogXCJzZmxvd2RldlwiLFxuXHRcdHNvdXJjZV9kZWZfYXJyYXk6IFt7XG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG5cdFx0XHRzb3VyY2VzX3VybDogXCJsdWEvcmVzdC92Mi9nZXQvbnRvcG5nL2ludGVyZmFjZXMubHVhXCIsXG5cdFx0XHR2YWx1ZTogXCJpZmlkXCIsXG5cdFx0XHR1aV90eXBlOiB1aV90eXBlcy5zZWxlY3QsXG5cdFx0fSwge1xuXHRcdFx0bWFpbl9zb3VyY2VfZGVmOiB0cnVlLFxuXHRcdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuZGV2aWNlXCIpLFxuXHRcdFx0cmVnZXhfdHlwZTogXCJpcFwiLFxuXHRcdFx0dmFsdWU6IFwiZGV2aWNlXCIsXG5cdFx0XHR2YWx1ZV91cmw6IFwiaXBcIixcblx0XHRcdHVpX3R5cGU6IHVpX3R5cGVzLmlucHV0LFxuXHRcdH1dLFxuXHR9LFxuXHR7XG5cdFx0aWQ6IFwic2Zsb3dfaW50ZXJmYWNlXCIsXG5cdFx0cmVnZXhfcGFnZV91cmw6IFwibHVhXFwvcHJvXFwvZW50ZXJwcmlzZVxcL3NmbG93ZGV2aWNlX2ludGVyZmFjZV9kZXRhaWxzXCIsXG5cdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuc2Zsb3dfaW50ZXJmYWNlXCIpLFxuXHRcdHF1ZXJ5OiBcInNmbG93ZGV2X3BvcnRcIixcblx0XHRzb3VyY2VfZGVmX2FycmF5OiBbe1xuXHRcdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaW50ZXJmYWNlXCIpLFxuXHRcdFx0c291cmNlc191cmw6IFwibHVhL3Jlc3QvdjIvZ2V0L250b3BuZy9pbnRlcmZhY2VzLmx1YVwiLFxuXHRcdFx0dmFsdWU6IFwiaWZpZFwiLFxuXHRcdFx0dWlfdHlwZTogdWlfdHlwZXMuc2VsZWN0LFxuXHRcdH0sIHtcblx0XHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmRldmljZVwiKSxcblx0XHRcdHJlZ2V4X3R5cGU6IFwiaXBcIixcblx0XHRcdHZhbHVlOiBcImRldmljZVwiLFxuXHRcdFx0dmFsdWVfdXJsOiBcImlwXCIsXG5cdFx0XHR1aV90eXBlOiB1aV90eXBlcy5pbnB1dCxcblx0XHR9LCB7XG5cdFx0XHRtYWluX3NvdXJjZV9kZWY6IHRydWUsXG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5wb3J0XCIpLFxuXHRcdFx0cmVnZXhfdHlwZTogXCJwb3J0XCIsXG5cdFx0XHR2YWx1ZTogXCJwb3J0XCIsXG5cdFx0XHR2YWx1ZV91cmw6IFwic25tcF9wb3J0X2lkeFwiLFxuXHRcdFx0dWlfdHlwZTogdWlfdHlwZXMuaW5wdXQsXG5cdFx0fV0sXG5cdH0sXG5cdHtcblx0XHRpZDogXCJvYnNlcnZhdGlvbl9wb2ludFwiLFxuXHRcdHJlZ2V4X3BhZ2VfdXJsOiBcImx1YVxcL3Byb1xcL2VudGVycHJpc2VcXC9vYnNlcnZhdGlvbl9wb2ludHNcIixcblx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5vYnNlcnZhdGlvbl9wb2ludFwiKSxcblx0XHRxdWVyeTogXCJvYnNfcG9pbnRcIixcblx0XHRzb3VyY2VfZGVmX2FycmF5OiBbe1xuXHRcdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaW50ZXJmYWNlXCIpLFxuXHRcdFx0c291cmNlc191cmw6IFwibHVhL3Jlc3QvdjIvZ2V0L250b3BuZy9pbnRlcmZhY2VzLmx1YVwiLFxuXHRcdFx0dmFsdWU6IFwiaWZpZFwiLFxuXHRcdFx0dWlfdHlwZTogdWlfdHlwZXMuc2VsZWN0LFxuXHRcdH0sIHtcblx0XHRcdG1haW5fc291cmNlX2RlZjogdHJ1ZSxcblx0XHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLm9ic2VydmF0aW9uX3BvaW50XCIpLFxuXHRcdFx0cmVnZXhfdHlwZTogXCJ0ZXh0XCIsXG5cdFx0XHR2YWx1ZTogXCJvYnNfcG9pbnRcIixcblx0XHRcdHZhbHVlX3VybDogXCJvYnNlcnZhdGlvbl9wb2ludFwiLFxuXHRcdFx0dWlfdHlwZTogdWlfdHlwZXMuaW5wdXQsXG5cdFx0fV0sXG5cdH0sXG5cdHtcblx0XHQvL3RvZG9fdGVzdFxuXHRcdGlkOiBcInBvZFwiLFxuXHRcdHJlZ2V4X3BhZ2VfdXJsOiBcImx1YVxcL3BvZF9kZXRhaWxzXCIsXG5cdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYucG9kXCIpLFxuXHRcdHF1ZXJ5OiBcInBvZFwiLFxuXHRcdHNvdXJjZV9kZWZfYXJyYXk6IFt7XG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG5cdFx0XHRzb3VyY2VzX3VybDogXCJsdWEvcmVzdC92Mi9nZXQvbnRvcG5nL2ludGVyZmFjZXMubHVhXCIsXG5cdFx0XHR2YWx1ZTogXCJpZmlkXCIsXG5cdFx0XHR1aV90eXBlOiB1aV90eXBlcy5zZWxlY3QsXG5cdFx0fSwge1xuXHRcdFx0bWFpbl9zb3VyY2VfZGVmOiB0cnVlLFxuXHRcdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYucG9kXCIpLFxuXHRcdFx0cmVnZXhfdHlwZTogXCJ0ZXh0XCIsXG5cdFx0XHR2YWx1ZTogXCJwb2RcIixcblx0XHRcdHVpX3R5cGU6IHVpX3R5cGVzLmlucHV0LFxuXHRcdH1dLFxuXHR9LCB7XG5cdFx0Ly90b2RvX3Rlc3Rcblx0XHRpZDogXCJjb250YWluZXJcIixcblx0XHRyZWdleF9wYWdlX3VybDogXCJsdWFcXC9jb250YWluZXJfZGV0YWlsc1wiLFxuXHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmNvbnRhaW5lclwiKSxcblx0XHRxdWVyeTogXCJjb250YWluZXJcIixcblx0XHRzb3VyY2VfZGVmX2FycmF5OiBbe1xuXHRcdFx0bGFiZWw6IGkxOG4oXCJwYWdlX3N0YXRzLnNvdXJjZV9kZWYuaW50ZXJmYWNlXCIpLFxuXHRcdFx0c291cmNlc191cmw6IFwibHVhL3Jlc3QvdjIvZ2V0L250b3BuZy9pbnRlcmZhY2VzLmx1YVwiLFxuXHRcdFx0dmFsdWU6IFwiaWZpZFwiLFxuXHRcdFx0dWlfdHlwZTogdWlfdHlwZXMuc2VsZWN0LFxuXHRcdH0sIHtcblx0XHRcdG1haW5fc291cmNlX2RlZjogdHJ1ZSxcblx0XHRcdGxhYmVsOiBpMThuKFwicGFnZV9zdGF0cy5zb3VyY2VfZGVmLmNvbnRhaW5lclwiKSxcblx0XHRcdHJlZ2V4X3R5cGU6IFwidGV4dFwiLFxuXHRcdFx0dmFsdWU6IFwiY29udGFpbmVyXCIsXG5cdFx0XHR1aV90eXBlOiB1aV90eXBlcy5pbnB1dCxcblx0XHR9XSxcblx0fSxcblx0e1xuXHRcdGlkOiBcIm5lZGdlXCIsXG5cdFx0cmVnZXhfcGFnZV91cmw6IFwibHVhXFwvcHJvXFwvbmVkZ2VcXC9pZl9zdGF0cy5sdWFcIixcblx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5uZWRnZVwiKSxcblx0XHRxdWVyeTogXCJuZWRnZVwiLFxuXHRcdHNvdXJjZV9kZWZfYXJyYXk6IFt7XG5cdFx0XHRsYWJlbDogaTE4bihcInBhZ2Vfc3RhdHMuc291cmNlX2RlZi5pbnRlcmZhY2VcIiksXG5cdFx0XHRyZWdleF90eXBlOiBcInRleHRcIixcblx0XHRcdHZhbHVlOiBcImlmaWRcIixcblx0XHRcdHZhbHVlX3VybDogXCJpZm5hbWVcIixcblx0XHRcdHVpX3R5cGU6IHVpX3R5cGVzLmlucHV0LFxuXHRcdH1dLFxuXHR9LFxuXHQvLyB7XG5cdC8vIFx0aWQ6IFwibl9lZGdlX2ludGVyZmFjZVwiLFxuXHQvLyBcdHJlZ2V4X3BhZ2VfdXJsOiBcImx1YVxcL3Byb1xcL25lZGdlXFwvaWZfc3RhdHMubHVhXCIsXG5cdC8vIFx0bGFiZWw6IFwiUHJvZmlsZSBuRWRnZVwiLFxuXHQvLyBcdHZhbHVlOiBcImlmaWRcIixcblx0Ly8gXHRyZWdleF90eXBlOiBcInRleHRcIixcblx0Ly8gXHR1aV90eXBlOiB1aV90eXBlcy5zZWxlY3RfYW5kX2lucHV0LFxuXHQvLyBcdHF1ZXJ5OiBcImlmYWNlOm5lZGdlXCIsXG5cdC8vIH0sXG5dO1xuXG5jb25zdCBtZXRyaWNzQ29uc3RzID0gZnVuY3Rpb24gKCkge1xuXHRyZXR1cm4ge1xuXHRcdHVpX3R5cGVzLFxuXHRcdHNvdXJjZXNfdXJsX2VsX3RvX3NvdXJjZSxcblx0XHRzb3VyY2VzX3R5cGVzLFxuXHRcdHNvdXJjZXNfdHlwZXNfdGFibGVzLFxuXHR9O1xufSgpO1xuXG5leHBvcnQgZGVmYXVsdCBtZXRyaWNzQ29uc3RzO1xuIiwiLyoqXG4gICAgKEMpIDIwMjIgLSBudG9wLm9yZ1xuKi9cbmltcG9ydCB7IG50b3BuZ191dGlsaXR5LCBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcy5qc1wiO1xuaW1wb3J0IG1ldHJpY3NDb25zdHMgZnJvbSBcIi4uL2NvbnN0YW50cy9tZXRyaWNzLWNvbnN0cy5qc1wiXG5pbXBvcnQgTnRvcFV0aWxzIGZyb20gXCIuL250b3AtdXRpbHMuanNcIjtcblxuY29uc3Qgc2V0X3RpbWVzZXJpZXNfZ3JvdXBzX2luX3VybCA9ICh0aW1lc2VyaWVzX2dyb3VwcykgPT4ge1xuICAgIGxldCBwYXJhbXNfdGltZXNlcmllc19ncm91cHMgPSBbXTtcbiAgICB0aW1lc2VyaWVzX2dyb3Vwcy5mb3JFYWNoKCh0c19ncm91cCkgPT4ge1xuICAgICAgICBsZXQgcGFyYW0gPSBnZXRfdHNfZ3JvdXBfdXJsX3BhcmFtKHRzX2dyb3VwKTtcbiAgICAgICAgcGFyYW1zX3RpbWVzZXJpZXNfZ3JvdXBzLnB1c2gocGFyYW0pO1xuICAgIH0pO1xuICAgIGxldCB1cmxfdGltZXNlcmllc19ncm91cHMgPSBwYXJhbXNfdGltZXNlcmllc19ncm91cHMuam9pbihcIjs7XCIpO1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcInRpbWVzZXJpZXNfZ3JvdXBzXCIsIHVybF90aW1lc2VyaWVzX2dyb3Vwcyk7XG59O1xuXG5mdW5jdGlvbiBnZXRfdHNfZ3JvdXBfdXJsX3BhcmFtKHRzX2dyb3VwKSB7XG4gICAgbGV0IHRpbWVzZXJpZXMgPSBbXTtcbiAgICB0c19ncm91cC50aW1lc2VyaWVzLmZvckVhY2goKHRzKSA9PiB7XG4gICAgICAgIHRpbWVzZXJpZXMucHVzaChgJHt0cy5pZH09JHt0cy5yYXd9OiR7dHMucGFzdH06JHt0cy5hdmd9OiR7dHMucGVyY185NX1gKTtcbiAgICB9KTtcbiAgICBsZXQgbWV0cmljX3NjaGVtYV9xdWVyeSA9IHRzX2dyb3VwLm1ldHJpYy5zY2hlbWE7XG4gICAgaWYgKHRzX2dyb3VwLm1ldHJpYy5xdWVyeSAhPSBudWxsKSB7XG4gICAgICAgIG1ldHJpY19zY2hlbWFfcXVlcnkgPSBgJHttZXRyaWNfc2NoZW1hX3F1ZXJ5fSske3RzX2dyb3VwLm1ldHJpYy5xdWVyeX1gO1xuICAgIH1cbiAgICBsZXQgdGltZXNlcmllc19wYXJhbSA9IHRpbWVzZXJpZXMuam9pbihcInxcIik7XG4gICAgbGV0IHNvdXJjZV92YWx1ZV9hcnJheV9xdWVyeSA9IHRzX2dyb3VwLnNvdXJjZV9hcnJheS5tYXAoKHNvdXJjZSkgPT4gc291cmNlLnZhbHVlKS5qb2luKFwiK1wiKTtcbiAgICBsZXQgcGFyYW0gPSBgJHt0c19ncm91cC5zb3VyY2VfdHlwZS5pZH07JHtzb3VyY2VfdmFsdWVfYXJyYXlfcXVlcnl9OyR7bWV0cmljX3NjaGVtYV9xdWVyeX07JHt0aW1lc2VyaWVzX3BhcmFtfWA7XG4gICAgcmV0dXJuIHBhcmFtO1xufVxuXG5jb25zdCBnZXRfdGltZXNlcmllc19ncm91cHNfZnJvbV91cmwgPSBhc3luYyAoaHR0cF9wcmVmaXgsIHVybF90aW1lc2VyaWVzX2dyb3VwcykgPT4ge1xuICAgIGlmICh1cmxfdGltZXNlcmllc19ncm91cHMgPT0gbnVsbCkge1xuICAgICAgICB1cmxfdGltZXNlcmllc19ncm91cHMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInRpbWVzZXJpZXNfZ3JvdXBzXCIpO1xuICAgIH1cbiAgICBpZiAodXJsX3RpbWVzZXJpZXNfZ3JvdXBzID09IG51bGwgfHwgdXJsX3RpbWVzZXJpZXNfZ3JvdXBzID09IFwiXCIpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGxldCBncm91cHMgPSB1cmxfdGltZXNlcmllc19ncm91cHMuc3BsaXQoXCI7O1wiKTtcbiAgICBncm91cHMubWFwKGFzeW5jIChnKSA9PiB7XG4gICAgICAgIGxldCB0c19ncm91cCA9IGF3YWl0IGdldF91cmxfcGFyYW1fZnJvbV90c19ncm91cChnKTtcbiAgICAgICAgcmV0dXJuIHRzX2dyb3VwO1xuICAgIH0pO1xuICAgIGxldCB0aW1lc2VyaWVzX2dyb3VwcyA9IFByb21pc2UuYWxsKGdyb3Vwcy5tYXAoYXN5bmMgKGcpID0+IHtcbiAgICAgICAgbGV0IHRzX2dyb3VwID0gYXdhaXQgZ2V0X3VybF9wYXJhbV9mcm9tX3RzX2dyb3VwKGcpO1xuICAgICAgICByZXR1cm4gdHNfZ3JvdXA7XG4gICAgfSkpO1xuICAgIHJldHVybiB0aW1lc2VyaWVzX2dyb3Vwcztcbn07XG5cbmNvbnN0IGdldF90c19ncm91cCA9IChzb3VyY2VfdHlwZSwgc291cmNlX2FycmF5LCBtZXRyaWMpID0+IHtcbiAgICBsZXQgaWQgPSBnZXRfdHNfZ3JvdXBfaWQoc291cmNlX3R5cGUsIHNvdXJjZV9hcnJheSwgbWV0cmljKTtcbiAgICBsZXQgdGltZXNlcmllcyA9IFtdO1xuICAgIGZvciAobGV0IGtleSBpbiBtZXRyaWMudGltZXNlcmllcykge1xuICAgICAgICBsZXQgdHMgPSBtZXRyaWMudGltZXNlcmllc1trZXldO1xuICAgICAgICB0aW1lc2VyaWVzLnB1c2goe1xuICAgICAgICAgICAgaWQ6IGtleSxcbiAgICAgICAgICAgIGxhYmVsOiB0cy5sYWJlbCxcbiAgICAgICAgICAgIHJhdzogdHJ1ZSxcbiAgICAgICAgICAgIHBhc3Q6IGZhbHNlLFxuICAgICAgICAgICAgYXZnOiBmYWxzZSxcbiAgICAgICAgICAgIHBlcmNfOTU6IGZhbHNlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaWQsIHNvdXJjZV90eXBlLCBzb3VyY2VfYXJyYXksIG1ldHJpYywgdGltZXNlcmllcyxcbiAgICB9O1xufTtcblxuY29uc3QgZ2V0X2RlZmF1bHRfdGltZXNlcmllc19ncm91cHMgPSBhc3luYyAoaHR0cF9wcmVmaXgsIG1ldHJpY190c19zY2hlbWEsIG1ldHJpY19xdWVyeSkgPT4ge1xuICAgIGxldCBzb3VyY2VfdHlwZSA9IGdldF9jdXJyZW50X3BhZ2Vfc291cmNlX3R5cGUoKTtcbiAgICBsZXQgc291cmNlX2FycmF5ID0gYXdhaXQgZ2V0X2RlZmF1bHRfc291cmNlX2FycmF5KGh0dHBfcHJlZml4LCBzb3VyY2VfdHlwZSk7XG4gICAgbGV0IG1ldHJpY3MgPSBhd2FpdCBnZXRfbWV0cmljcyhodHRwX3ByZWZpeCwgc291cmNlX3R5cGUsIHNvdXJjZV9hcnJheSk7XG4gICAgbGV0IG1ldHJpYyA9IGdldF9kZWZhdWx0X21ldHJpYyhtZXRyaWNzLCBtZXRyaWNfdHNfc2NoZW1hLCBtZXRyaWNfcXVlcnkpO1xuICAgIGxldCB0c19ncm91cCA9IGdldF90c19ncm91cChzb3VyY2VfdHlwZSwgc291cmNlX2FycmF5LCBtZXRyaWMpO1xuICAgIHJldHVybiBbdHNfZ3JvdXBdO1xufTtcblxuYXN5bmMgZnVuY3Rpb24gZ2V0X3VybF9wYXJhbV9mcm9tX3RzX2dyb3VwKHRzX2dyb3VwX3VybF9wYXJhbSkge1xuICAgIGxldCBnID0gdHNfZ3JvdXBfdXJsX3BhcmFtO1xuICAgIGxldCBpbmZvID0gZy5zcGxpdChcIjtcIik7XG4gICAgbGV0IHNvdXJjZV90eXBlX2lkID0gaW5mb1swXTtcbiAgICBsZXQgc291cmNlX3ZhbHVlX3F1ZXJ5ID0gaW5mb1sxXTtcbiAgICBsZXQgc291cmNlX3ZhbHVlX2FycmF5ID0gc291cmNlX3ZhbHVlX3F1ZXJ5LnNwbGl0KFwiK1wiKTtcblxuICAgIGxldCBtZXRyaWNfc2NoZW1hX3F1ZXJ5ID0gaW5mb1syXTtcbiAgICBsZXQgbWV0cmljX3NjaGVtYV9xdWVyeV9hcnJheSA9IG1ldHJpY19zY2hlbWFfcXVlcnkuc3BsaXQoXCIrXCIpO1xuICAgIGlmIChtZXRyaWNfc2NoZW1hX3F1ZXJ5X2FycmF5Lmxlbmd0aCA8IDIpIHtcbiAgICAgICAgbWV0cmljX3NjaGVtYV9xdWVyeV9hcnJheS5wdXNoKG51bGwpO1xuICAgIH1cblxuICAgIGxldCB0aW1lc2VyaWVzX3VybCA9IGluZm9bM107XG5cbiAgICBsZXQgc291cmNlX3R5cGUgPSBnZXRfc291cmNlX3R5cGVfZnJvbV9pZChzb3VyY2VfdHlwZV9pZCk7XG4gICAgbGV0IHNvdXJjZV9hcnJheSA9IGF3YWl0IGdldF9zb3VyY2VfYXJyYXlfZnJvbV92YWx1ZV9hcnJheShodHRwX3ByZWZpeCwgc291cmNlX3R5cGUsIHNvdXJjZV92YWx1ZV9hcnJheSk7XG4gICAgbGV0IG1ldHJpYyA9IGF3YWl0IGdldF9tZXRyaWNfZnJvbV9zY2hlbWEoaHR0cF9wcmVmaXgsIHNvdXJjZV90eXBlLCBzb3VyY2VfYXJyYXksIG1ldHJpY19zY2hlbWFfcXVlcnlfYXJyYXlbMF0sIG1ldHJpY19zY2hlbWFfcXVlcnlfYXJyYXlbMV0pO1xuICAgIGxldCB0aW1lc2VyaWVzID0gZ2V0X3RpbWVzZXJpZXModGltZXNlcmllc191cmwsIG1ldHJpYyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaWQ6IGdldF90c19ncm91cF9pZChzb3VyY2VfdHlwZSwgc291cmNlX2FycmF5LCBtZXRyaWMpLFxuICAgICAgICBzb3VyY2VfdHlwZSxcbiAgICAgICAgc291cmNlX2FycmF5LFxuICAgICAgICBtZXRyaWMsXG4gICAgICAgIHRpbWVzZXJpZXMsXG4gICAgfTtcbn1cblxuY29uc3QgZ2V0X3RzX2dyb3VwX2lkID0gKHNvdXJjZV90eXBlLCBzb3VyY2VfYXJyYXksIG1ldHJpYywgZW5hYmxlX3NvdXJjZV9kZWZfdmFsdWVfZGljdCwgc2V0X3NvdXJjZV90eXBlX2lkX2dyb3VwKSA9PiB7XG4gICAgbGV0IG1ldHJpY19pZCA9IFwiXCI7XG4gICAgaWYgKG1ldHJpYyAhPSBudWxsKSB7XG4gICAgICAgIG1ldHJpY19pZCA9IG1ldHJpYy5zY2hlbWE7XG4gICAgICAgIGlmIChtZXRyaWMucXVlcnkgIT0gbnVsbCkge1xuICAgICAgICAgICAgbWV0cmljX2lkID0gYCR7bWV0cmljX2lkfSAtICR7bWV0cmljLnF1ZXJ5fWA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IHNvdXJjZV9kZWZfYXJyYXkgPSBzb3VyY2VfdHlwZS5zb3VyY2VfZGVmX2FycmF5O1xuICAgIGxldCBzb3VyY2VfdmFsdWVfYXJyYXkgPSBzb3VyY2VfYXJyYXkubWFwKChzb3VyY2UsIGkpID0+IHtcbiAgICAgICAgbGV0IHNvdXJjZV9kZWZfdmFsdWUgPSBzb3VyY2VfZGVmX2FycmF5W2ldLnZhbHVlO1xuICAgICAgICBpZiAoZW5hYmxlX3NvdXJjZV9kZWZfdmFsdWVfZGljdCAhPSBudWxsICYmICFlbmFibGVfc291cmNlX2RlZl92YWx1ZV9kaWN0W3NvdXJjZV9kZWZfdmFsdWVdKSB7IHJldHVybiBudWxsOyB9XG4gICAgICAgIHJldHVybiBzb3VyY2UudmFsdWU7XG4gICAgfSkuZmlsdGVyKChzKSA9PiBzICE9IG51bGwpLmpvaW4oXCJfXCIpO1xuICAgIGxldCBzb3VyY2VfdHlwZV9pZCA9IHNvdXJjZV90eXBlLmlkO1xuICAgIGlmIChzZXRfc291cmNlX3R5cGVfaWRfZ3JvdXAgJiYgc291cmNlX3R5cGUuaWRfZ3JvdXAgIT0gbnVsbCkge1xuICAgICAgICBzb3VyY2VfdHlwZV9pZCA9IHNvdXJjZV90eXBlLmlkX2dyb3VwO1xuICAgIH1cbiAgICByZXR1cm4gYCR7c291cmNlX3R5cGVfaWR9IC0gJHtzb3VyY2VfdmFsdWVfYXJyYXl9IC0gJHttZXRyaWNfaWR9YDtcbn07XG5cbmZ1bmN0aW9uIGdldF90aW1lc2VyaWVzKHRpbWVzZXJpZXNfdXJsLCBtZXRyaWMpIHtcbiAgICBsZXQgdHNfdXJsX2FycmF5ID0gdGltZXNlcmllc191cmwuc3BsaXQoXCJ8XCIpO1xuICAgIGxldCByID0gLyguKyk9KC4rKTooLispOiguKyk6KC4rKS87XG4gICAgbGV0IHRpbWVzZXJpZXMgPSBbXTtcbiAgICB0c191cmxfYXJyYXkuZm9yRWFjaCgodHNfdXJsKSA9PiB7XG4gICAgICAgIGxldCB2YWx1ZXMgPSByLmV4ZWModHNfdXJsKTtcbiAgICAgICAgaWYodmFsdWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGxldCBpZCA9IHZhbHVlc1sxXTtcbiAgICAgICAgICAgIGxldCBsYWJlbCA9IG1ldHJpYy50aW1lc2VyaWVzW2lkXS5sYWJlbDtcbiAgICAgICAgICAgIGxldCByYXcgPSBKU09OLnBhcnNlKHZhbHVlc1syXSk7XG4gICAgICAgICAgICBsZXQgcGFzdCA9IEpTT04ucGFyc2UodmFsdWVzWzNdKTtcbiAgICAgICAgICAgIGxldCBhdmcgPSBKU09OLnBhcnNlKHZhbHVlc1s0XSk7XG4gICAgICAgICAgICBsZXQgcGVyY185NSA9IEpTT04ucGFyc2UodmFsdWVzWzVdKTtcbiAgICAgICAgICAgIHRpbWVzZXJpZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgaWQsIGxhYmVsLCByYXcsIHBhc3QsIGF2ZywgcGVyY185NSxcbiAgICAgICAgICAgIH0pOyAgICBcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB0aW1lc2VyaWVzO1xufVxuXG5jb25zdCB1aV90eXBlcyA9IG1ldHJpY3NDb25zdHMudWlfdHlwZXM7XG5cbi8vIGRpY3Rpb25hcnkgb2YgZnVuY3Rpb25zIHRvIGNvbnZlcnQgYW4gZWxlbWVudCBvZiBzb3VyY2VfdXJsIHJlc3QgcmVzdWx0IHRvIGEgc291cmNlICh7bGFiZWwsIHZhbHVlIH0pXG5jb25zdCBzb3VyY2VzX3VybF9lbF90b19zb3VyY2UgPSBtZXRyaWNzQ29uc3RzLnNvdXJjZXNfdXJsX2VsX3RvX3NvdXJjZTtcblxuY29uc3Qgc291cmNlc190eXBlcyA9IG1ldHJpY3NDb25zdHMuc291cmNlc190eXBlcztcbmNvbnN0IHNvdXJjZXNfdHlwZXNfdGFibGVzID0gbWV0cmljc0NvbnN0cy5zb3VyY2VzX3R5cGVzX3RhYmxlcztcblxuY29uc3QgZ2V0X3NvdXJjZV90eXBlX2Zyb21faWQgPSAoc291cmNlX3R5cGVfaWQpID0+IHtcbiAgICByZXR1cm4gc291cmNlc190eXBlcy5maW5kKChzdCkgPT4gc3QuaWQgPT0gc291cmNlX3R5cGVfaWQpO1xufTtcblxuY29uc3QgZ2V0X2RlZmF1bHRfc291cmNlX2FycmF5ID0gYXN5bmMgKGh0dHBfcHJlZml4LCBzb3VyY2VfdHlwZSkgPT4ge1xuICAgIGxldCBzb3VyY2VfdmFsdWVfYXJyYXkgPSBnZXRfZGVmYXVsdF9zb3VyY2VfdmFsdWVfYXJyYXkoc291cmNlX3R5cGUpO1xuICAgIGxldCBzb3VyY2VfYXJyYXkgPSBhd2FpdCBnZXRfc291cmNlX2FycmF5X2Zyb21fdmFsdWVfYXJyYXkoaHR0cF9wcmVmaXgsIHNvdXJjZV90eXBlLCBzb3VyY2VfdmFsdWVfYXJyYXkpO1xuICAgIHJldHVybiBzb3VyY2VfYXJyYXk7XG59O1xuXG5hc3luYyBmdW5jdGlvbiBnZXRfc291cmNlX2FycmF5X2Zyb21fdmFsdWVfZGljdChodHRwX3ByZWZpeCwgc291cmNlX3R5cGUsIHNvdXJjZV92YWx1ZV9kaWN0KSB7XG4gICAgbGV0IHNvdXJjZV92YWx1ZV9hcnJheSA9IHNvdXJjZV90eXBlLnNvdXJjZV9kZWZfYXJyYXkubWFwKChzb3VyY2VfZGVmKSA9PiBzb3VyY2VfdmFsdWVfZGljdFtzb3VyY2VfZGVmLnZhbHVlXSk7XG4gICAgbGV0IHNvdXJjZV9hcnJheSA9IGF3YWl0IGdldF9zb3VyY2VfYXJyYXlfZnJvbV92YWx1ZV9hcnJheShodHRwX3ByZWZpeCwgc291cmNlX3R5cGUsIHNvdXJjZV92YWx1ZV9hcnJheSk7XG4gICAgcmV0dXJuIHNvdXJjZV9hcnJheTtcbn1cblxuY29uc3QgZ2V0X3NvdXJjZV9hcnJheV9mcm9tX3ZhbHVlX2FycmF5ID0gYXN5bmMgKGh0dHBfcHJlZml4LCBzb3VyY2VfdHlwZSwgc291cmNlX3ZhbHVlX2FycmF5KSA9PiB7XG4gICAgaWYgKHNvdXJjZV90eXBlID09IG51bGwpIHtcbiAgICAgICAgc291cmNlX3R5cGUgPSBnZXRfY3VycmVudF9wYWdlX3NvdXJjZV90eXBlKCk7XG4gICAgfVxuICAgIGxldCBzb3VyY2VfYXJyYXkgPSBbXTtcbiAgICBsZXQgc291cmNlO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc291cmNlX3ZhbHVlX2FycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBzb3VyY2VfdmFsdWUgPSBzb3VyY2VfdmFsdWVfYXJyYXlbaV07XG4gICAgICAgIGxldCBzb3VyY2VfZGVmID0gc291cmNlX3R5cGUuc291cmNlX2RlZl9hcnJheVtpXTtcbiAgICAgICAgaWYgKHNvdXJjZV9kZWYuc291cmNlc191cmwgfHwgc291cmNlX2RlZi5zb3VyY2VzX2Z1bmN0aW9uKSB7XG4gICAgICAgICAgICBsZXQgc291cmNlcyA9IFtdO1xuICAgICAgICAgICAgc291cmNlcyA9IGF3YWl0IGdldF9zb3VyY2VzKGh0dHBfcHJlZml4LCBzb3VyY2VfdHlwZS5pZCwgc291cmNlX2RlZiwgc291cmNlX3ZhbHVlX2FycmF5KTtcbiAgICAgICAgICAgIHNvdXJjZSA9IHNvdXJjZXMuZmluZCgocykgPT4gcy52YWx1ZSA9PSBzb3VyY2VfdmFsdWUpO1xuICAgICAgICAgICAgaWYgKHNvdXJjZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgc291cmNlID0gc291cmNlc1swXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNvdXJjZSA9IHsgbGFiZWw6IHNvdXJjZV92YWx1ZSwgdmFsdWU6IHNvdXJjZV92YWx1ZSB9O1xuICAgICAgICB9XG4gICAgICAgIHNvdXJjZV9hcnJheS5wdXNoKHNvdXJjZSk7XG4gICAgfVxuICAgIHJldHVybiBzb3VyY2VfYXJyYXk7XG59O1xuXG5sZXQgY2FjaGVfc291cmNlcyA9IHt9O1xuXG5mdW5jdGlvbiBnZXRfc291cmNlX2RlZl9rZXkoaWQsIHNvdXJjZV9kZWYsIHNlbGVjdGVkX3NvdXJjZV92YWx1ZV9hcnJheSkge1xuICAgIGxldCBrZXkgPSBgJHtpZH1fJHtzb3VyY2VfZGVmLnZhbHVlfWA7XG4gICAgaWYgKCFzb3VyY2VfZGVmLnJlZnJlc2hfb25fc291cmNlc19jaGFuZ2UpIHtcbiAgICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gICAgY29uc3QgdmFsdWVfYXJyYXkgPSBzZWxlY3RlZF9zb3VyY2VfdmFsdWVfYXJyYXkuam9pbihcIl9cIik7XG4gICAga2V5ID0gYCR7a2V5fV8ke3ZhbHVlX2FycmF5fWA7XG4gICAgcmV0dXJuIGtleTtcbn1cblxuY29uc3QgZ2V0X3NvdXJjZXMgPSBhc3luYyAoaHR0cF9wcmVmaXgsIGlkLCBzb3VyY2VfZGVmLCBzZWxlY3RlZF9zb3VyY2VfdmFsdWVfYXJyYXkpID0+IHtcbiAgICBsZXQga2V5ID0gZ2V0X3NvdXJjZV9kZWZfa2V5KGlkLCBzb3VyY2VfZGVmLCBzZWxlY3RlZF9zb3VyY2VfdmFsdWVfYXJyYXkpO1xuICAgIGlmIChjYWNoZV9zb3VyY2VzW2tleV0gPT0gbnVsbCkge1xuICAgICAgICBpZiAoc291cmNlX2RlZi5zb3VyY2VzX3VybCkge1xuICAgICAgICAgICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS8ke3NvdXJjZV9kZWYuc291cmNlc191cmx9YDtcbiAgICAgICAgICAgIGNhY2hlX3NvdXJjZXNba2V5XSA9IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwpO1xuICAgICAgICB9IGVsc2UgaWYgKHNvdXJjZV9kZWYuc291cmNlc19mdW5jdGlvbikge1xuICAgICAgICAgICAgY2FjaGVfc291cmNlc1trZXldID0gc291cmNlX2RlZi5zb3VyY2VzX2Z1bmN0aW9uKHNlbGVjdGVkX3NvdXJjZV92YWx1ZV9hcnJheSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IHNvdXJjZXMgPSBhd2FpdCBjYWNoZV9zb3VyY2VzW2tleV07XG4gICAgaWYgKHNvdXJjZV9kZWYuc291cmNlc191cmwpIHtcbiAgICAgICAgbGV0IGZfbWFwX3NvdXJjZV9lbGVtZW50ID0gc291cmNlc191cmxfZWxfdG9fc291cmNlW3NvdXJjZV9kZWYudmFsdWVfbWFwX3NvdXJjZXNfcmVzXTtcbiAgICAgICAgaWYgKGZfbWFwX3NvdXJjZV9lbGVtZW50ID09IG51bGwpIHtcbiAgICAgICAgICAgIGZfbWFwX3NvdXJjZV9lbGVtZW50ID0gc291cmNlc191cmxfZWxfdG9fc291cmNlW3NvdXJjZV9kZWYudmFsdWVdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmX21hcF9zb3VyY2VfZWxlbWVudCA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBgOkVycm9yOiBtZXRyaWNzLW1hbmFnZXIuanMsIG1pc3Npbmcgc291cmNlc191cmxfdG9fc291cmNlICR7c291cmNlX2RlZi52YWx1ZX0ga2V5YDtcbiAgICAgICAgfVxuICAgICAgICBzb3VyY2VzID0gc291cmNlcy5tYXAoKHMpID0+IGZfbWFwX3NvdXJjZV9lbGVtZW50KHMpKTtcbiAgICB9XG4gICAgcmV0dXJuIHNvdXJjZXMuc29ydChOdG9wVXRpbHMuc29ydEFscGhhYmV0aWNhbGx5KTtcbn07XG5cbmZ1bmN0aW9uIHNldF9zb3VyY2VfdmFsdWVfb2JqZWN0X2luX3VybChzb3VyY2VfdHlwZSwgc291cmNlX3ZhbHVlX29iamVjdCkge1xuICAgIHNvdXJjZV90eXBlLnNvdXJjZV9kZWZfYXJyYXkuZm9yRWFjaCgoc291cmNlX2RlZikgPT4ge1xuICAgICAgICBsZXQgc291cmNlX3ZhbHVlID0gc291cmNlX3ZhbHVlX29iamVjdFtzb3VyY2VfZGVmLnZhbHVlXTtcbiAgICAgICAgaWYgKHNvdXJjZV92YWx1ZSA9PSBudWxsKSB7IHJldHVybjsgfVxuICAgICAgICBpZiAoc291cmNlX2RlZi5mX3NldF92YWx1ZV91cmwgIT0gbnVsbCkge1xuICAgICAgICAgICAgc291cmNlX2RlZi5mX3NldF92YWx1ZV91cmwoKTtcbiAgICAgICAgfSBlbHNlIGlmIChzb3VyY2VfZGVmLnZhbHVlX3VybCAhPSBudWxsKSB7XG4gICAgICAgICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoc291cmNlX2RlZi52YWx1ZV91cmwsIHNvdXJjZV92YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoc291cmNlX2RlZi52YWx1ZSwgc291cmNlX3ZhbHVlKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5jb25zdCBnZXRfZGVmYXVsdF9zb3VyY2VfdmFsdWVfYXJyYXkgPSAoc291cmNlX3R5cGUpID0+IHtcbiAgICBpZiAoc291cmNlX3R5cGUgPT0gbnVsbCkge1xuICAgICAgICBzb3VyY2VfdHlwZSA9IGdldF9jdXJyZW50X3BhZ2Vfc291cmNlX3R5cGUoKTtcbiAgICB9XG4gICAgbGV0IHNvdXJjZV92YWx1ZV9hcnJheSA9IHNvdXJjZV90eXBlLnNvdXJjZV9kZWZfYXJyYXkubWFwKChzb3VyY2VfZGVmKSA9PiB7XG4gICAgICAgIGlmIChzb3VyY2VfZGVmLmZfZ2V0X3ZhbHVlX3VybCAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gc291cmNlX2RlZi5mX2dldF92YWx1ZV91cmwoKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgc291cmNlX2RlZl92YWx1ZSA9IHNvdXJjZV9kZWYudmFsdWVfdXJsO1xuICAgICAgICBpZiAoc291cmNlX2RlZl92YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICBzb3VyY2VfZGVmX3ZhbHVlID0gc291cmNlX2RlZi52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgc291cmNlX3ZhbHVlID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoc291cmNlX2RlZl92YWx1ZSk7XG4gICAgICAgIHJldHVybiBzb3VyY2VfdmFsdWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHNvdXJjZV92YWx1ZV9hcnJheTtcbn07XG5cbmZ1bmN0aW9uIGdldF9tZXRyaWNzX3VybChodHRwX3ByZWZpeCwgc291cmNlX3R5cGUsIHNvdXJjZV9hcnJheSwgZXBvY2gpIHtcbiAgICBsZXQgcGFyYW1zID0gc291cmNlX3R5cGUuc291cmNlX2RlZl9hcnJheS5tYXAoKHNvdXJjZV9kZWYsIGkpID0+IHtcbiAgICAgICAgcmV0dXJuIGAke3NvdXJjZV9kZWYudmFsdWV9PSR7c291cmNlX2FycmF5W2ldLnZhbHVlfWA7XG4gICAgfSkuam9pbihcIiZcIik7XG4gICAgbGV0IGVwb2NoX3N0cmluZyA9IGBgO1xuICAgIGlmIChlcG9jaCAhPSBudWxsKSB7XG4gICAgICAgIGVwb2NoX3N0cmluZyA9IGBlcG9jaF9lbmQ9JHtlcG9jaC5lcG9jaF9lbmR9JmVwb2NoX2JlZ2luPSR7ZXBvY2guZXBvY2hfYmVnaW59YFxuICAgIH1cbiAgICBsZXQgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC90aW1lc2VyaWVzL3R5cGUvY29uc3RzLmx1YT9xdWVyeT0ke3NvdXJjZV90eXBlLnF1ZXJ5fSYke3BhcmFtc30mJHtlcG9jaF9zdHJpbmd9YDtcbiAgICByZXR1cm4gdXJsO1xufVxuXG5mdW5jdGlvbiBnZXRfbWV0cmljX2tleShzb3VyY2VfdHlwZSwgc291cmNlX2FycmF5KSB7XG4gICAgbGV0IHNvdXJjZV9hcnJheV9rZXkgPSBzb3VyY2VfYXJyYXkubWFwKChzb3VyY2UpID0+IHNvdXJjZS52YWx1ZSkuam9pbihcIl9cIik7XG4gICAgbGV0IGtleSA9IGAke3NvdXJjZV90eXBlLmlkfV8ke3NvdXJjZV9hcnJheV9rZXl9YDtcbiAgICByZXR1cm4ga2V5O1xufVxuXG5sZXQgY2FjaGVfbWV0cmljcyA9IHt9O1xubGV0IGxhc3RfbWV0cmljc190aW1lX2ludGVydmFsID0gbnVsbDtcbmNvbnN0IGdldF9tZXRyaWNzID0gYXN5bmMgKGh0dHBfcHJlZml4LCBzb3VyY2VfdHlwZSwgc291cmNlX2FycmF5LCBzdGF0dXMpID0+IHtcbiAgICBsZXQgZXBvY2hfYmVnaW4gPSBzdGF0dXM/LmVwb2NoX2JlZ2luIHx8IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiZXBvY2hfYmVnaW5cIik7XG4gICAgbGV0IGVwb2NoX2VuZCA9IHN0YXR1cz8uZXBvY2hfZW5kIHx8IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiZXBvY2hfZW5kXCIpO1xuICAgIGxldCBjdXJyZW50X2xhc3RfbWV0cmljc190aW1lX2ludGVydmFsID0gYCR7ZXBvY2hfYmVnaW59XyR7ZXBvY2hfZW5kfWA7XG4gICAgaWYgKHNvdXJjZV90eXBlID09IG51bGwpIHtcbiAgICAgICAgc291cmNlX3R5cGUgPSBnZXRfY3VycmVudF9wYWdlX3NvdXJjZV90eXBlKCk7XG4gICAgfVxuICAgIGlmIChzb3VyY2VfYXJyYXkgPT0gbnVsbCkge1xuICAgICAgICBzb3VyY2VfYXJyYXkgPSBhd2FpdCBnZXRfZGVmYXVsdF9zb3VyY2VfYXJyYXkoaHR0cF9wcmVmaXgsIHNvdXJjZV90eXBlKTtcbiAgICB9XG4gICAgLy8gbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvdGltZXNlcmllcy90eXBlL2NvbnN0cy5sdWE/cXVlcnk9JHtzb3VyY2VfdHlwZS52YWx1ZX1gO1xuICAgIGxldCB1cmwgPSBnZXRfbWV0cmljc191cmwoaHR0cF9wcmVmaXgsIHNvdXJjZV90eXBlLCBzb3VyY2VfYXJyYXksIHsgZXBvY2hfYmVnaW46IGVwb2NoX2JlZ2luLCBlcG9jaF9lbmQ6IGVwb2NoX2VuZCB9KTtcbiAgICBsZXQga2V5ID0gZ2V0X21ldHJpY19rZXkoc291cmNlX3R5cGUsIHNvdXJjZV9hcnJheSk7XG4gICAgaWYgKGN1cnJlbnRfbGFzdF9tZXRyaWNzX3RpbWVfaW50ZXJ2YWwgIT0gbGFzdF9tZXRyaWNzX3RpbWVfaW50ZXJ2YWwpIHtcbiAgICAgICAgY2FjaGVfbWV0cmljc1trZXldID0gbnVsbDtcbiAgICAgICAgbGFzdF9tZXRyaWNzX3RpbWVfaW50ZXJ2YWwgPSBjdXJyZW50X2xhc3RfbWV0cmljc190aW1lX2ludGVydmFsO1xuICAgIH1cbiAgICBpZiAoY2FjaGVfbWV0cmljc1trZXldID09IG51bGwpIHtcbiAgICAgICAgY2FjaGVfbWV0cmljc1trZXldID0gbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCk7XG4gICAgfVxuICAgIGxldCBtZXRyaWNzID0gYXdhaXQgY2FjaGVfbWV0cmljc1trZXldO1xuICAgIGlmIChtZXRyaWNzID09IG51bGwgfHwgbWV0cmljcy5sZW5ndGggPT0gMCkgeyByZXR1cm4gW3t9XTsgfVxuICAgIGlmIChtZXRyaWNzLnNvbWUoKG0pID0+IG0uZGVmYXVsdF92aXNpYmxlID09IHRydWUpID09IGZhbHNlKSB7XG4gICAgICAgIG1ldHJpY3NbMF0uZGVmYXVsdF92aXNpYmxlID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIG50b3BuZ191dGlsaXR5LmNsb25lKG1ldHJpY3MpO1xufTtcblxuY29uc3QgZ2V0X2N1cnJlbnRfcGFnZV9zb3VyY2VfdHlwZSA9ICgpID0+IHtcbiAgICBsZXQgcGF0aG5hbWUgPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWU7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzb3VyY2VzX3R5cGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGxldCByZWdFeHAgPSBuZXcgUmVnRXhwKHNvdXJjZXNfdHlwZXNbaV0ucmVnZXhfcGFnZV91cmwpO1xuICAgICAgICBpZiAocmVnRXhwLnRlc3QocGF0aG5hbWUpID09IHRydWUpIHtcbiAgICAgICAgICAgIHJldHVybiBzb3VyY2VzX3R5cGVzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRocm93IGBzb3VyY2VfdHlwZSBub3QgZm91bmQgZm9yICR7cGF0aG5hbWV9YDtcbn07XG5cbmNvbnN0IGdldF9tZXRyaWNfZnJvbV9zY2hlbWEgPSBhc3luYyAoaHR0cF9wcmVmaXgsIHNvdXJjZV90eXBlLCBzb3VyY2VfYXJyYXksIG1ldHJpY19zY2hlbWEsIG1ldHJpY19xdWVyeSwgc3RhdHVzKSA9PiB7XG4gICAgbGV0IG1ldHJpY3MgPSBhd2FpdCBnZXRfbWV0cmljcyhodHRwX3ByZWZpeCwgc291cmNlX3R5cGUsIHNvdXJjZV9hcnJheSwgc3RhdHVzKTtcbiAgICByZXR1cm4gbWV0cmljcy5maW5kKChtKSA9PiBtLnNjaGVtYSA9PSBtZXRyaWNfc2NoZW1hICYmIG0ucXVlcnkgPT0gbWV0cmljX3F1ZXJ5KTtcbn07XG5cbmNvbnN0IGdldF9tZXRyaWNfcXVlcnlfZnJvbV90c19xdWVyeSA9ICh0c19xdWVyeSwgc291cmNlX3R5cGUpID0+IHtcbiAgICBpZiAoc291cmNlX3R5cGUgPT0gbnVsbCkge1xuICAgICAgICBzb3VyY2VfdHlwZSA9IGdldF9jdXJyZW50X3BhZ2Vfc291cmNlX3R5cGUoKTtcbiAgICB9XG4gICAgbGV0IHNvdXJjZV9kZWZfZGljdCA9IHt9O1xuICAgIHNvdXJjZV90eXBlLnNvdXJjZV9kZWZfYXJyYXkuZm9yRWFjaCgoc19kZWYpID0+IHNvdXJjZV9kZWZfZGljdFtzX2RlZi52YWx1ZV0gPSB0cnVlKTtcbiAgICBsZXQgdHNfcXVlcnlfYXJyYXkgPSB0c19xdWVyeS5zcGxpdChcIixcIik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0c19xdWVyeV9hcnJheS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBsZXQgdHNfdmFsX2tleSA9IHRzX3F1ZXJ5X2FycmF5W2ldLnNwbGl0KFwiOlwiKVswXTtcbiAgICAgICAgaWYgKHNvdXJjZV9kZWZfZGljdFt0c192YWxfa2V5XSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdHNfcXVlcnlfYXJyYXlbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59O1xuXG5jb25zdCBnZXRfZGVmYXVsdF9tZXRyaWMgPSAobWV0cmljcywgbWV0cmljX3RzX3NjaGVtYSwgbWV0cmljX3F1ZXJ5KSA9PiB7XG4gICAgbGV0IGRlZmF1bHRfbWV0cmljO1xuICAgIGlmIChtZXRyaWNfdHNfc2NoZW1hICE9IG51bGwpIHtcbiAgICAgICAgZGVmYXVsdF9tZXRyaWMgPSBtZXRyaWNzLmZpbmQoKG0pID0+IG0uc2NoZW1hID09IG1ldHJpY190c19zY2hlbWEgJiYgKG1ldHJpY19xdWVyeSA9PSBudWxsIHx8IG0ucXVlcnkgPT0gbWV0cmljX3F1ZXJ5KSk7XG4gICAgfVxuICAgIGlmIChkZWZhdWx0X21ldHJpYyA9PSBudWxsKSB7XG4gICAgICAgIGRlZmF1bHRfbWV0cmljID0gbWV0cmljcy5maW5kKChtKSA9PiBtLmRlZmF1bHRfdmlzaWJsZSA9PSB0cnVlKTtcbiAgICB9XG4gICAgaWYgKGRlZmF1bHRfbWV0cmljICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRfbWV0cmljO1xuICAgIH1cbiAgICByZXR1cm4gbWV0cmljc1swXTtcbn07XG5cbmNvbnN0IG1ldHJpY3NNYW5hZ2VyID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHNldF90aW1lc2VyaWVzX2dyb3Vwc19pbl91cmwsXG4gICAgICAgIGdldF90aW1lc2VyaWVzX2dyb3Vwc19mcm9tX3VybCxcbiAgICAgICAgZ2V0X2RlZmF1bHRfdGltZXNlcmllc19ncm91cHMsXG4gICAgICAgIGdldF90c19ncm91cCxcbiAgICAgICAgZ2V0X3RzX2dyb3VwX2lkLFxuXG4gICAgICAgIHNvdXJjZXNfdHlwZXMsXG4gICAgICAgIHNvdXJjZXNfdHlwZXNfdGFibGVzLFxuICAgICAgICBnZXRfc291cmNlX3R5cGVfZnJvbV9pZCxcbiAgICAgICAgZ2V0X2N1cnJlbnRfcGFnZV9zb3VyY2VfdHlwZSxcblxuICAgICAgICBnZXRfc291cmNlcyxcbiAgICAgICAgZ2V0X2RlZmF1bHRfc291cmNlX2FycmF5LFxuICAgICAgICBnZXRfc291cmNlX2FycmF5X2Zyb21fdmFsdWVfZGljdCxcbiAgICAgICAgZ2V0X3NvdXJjZV9hcnJheV9mcm9tX3ZhbHVlX2FycmF5LFxuICAgICAgICBnZXRfZGVmYXVsdF9zb3VyY2VfdmFsdWVfYXJyYXksXG5cbiAgICAgICAgZ2V0X21ldHJpY3MsXG4gICAgICAgIGdldF9tZXRyaWNfZnJvbV9zY2hlbWEsXG4gICAgICAgIGdldF9tZXRyaWNfcXVlcnlfZnJvbV90c19xdWVyeSxcbiAgICAgICAgZ2V0X2RlZmF1bHRfbWV0cmljLFxuXG4gICAgICAgIHNldF9zb3VyY2VfdmFsdWVfb2JqZWN0X2luX3VybCxcblxuICAgICAgICB1aV90eXBlcyxcbiAgICB9O1xufSgpO1xuXG5leHBvcnQgZGVmYXVsdCBtZXRyaWNzTWFuYWdlcjtcbiIsIi8qKlxuXHRcdChDKSAyMDIzIC0gbnRvcC5vcmdcbiovXG5cbi8qIE92ZXJyaWRlIER5Z3JhcGggcGx1Z2lucyB0byBoYXZlIGEgYmV0dGVyIGxlZ2VuZCAqL1xuRHlncmFwaC5QbHVnaW5zLkxlZ2VuZC5wcm90b3R5cGUuc2VsZWN0ID0gZnVuY3Rpb24gKGUpIHtcblx0dmFyIHhWYWx1ZSA9IGUuc2VsZWN0ZWRYO1xuXHR2YXIgcG9pbnRzID0gZS5zZWxlY3RlZFBvaW50cztcblx0dmFyIHJvdyA9IGUuc2VsZWN0ZWRSb3c7XG5cblx0dmFyIGxlZ2VuZE1vZGUgPSBlLmR5Z3JhcGguZ2V0T3B0aW9uKCdsZWdlbmQnKTtcblx0aWYgKGxlZ2VuZE1vZGUgPT09ICduZXZlcicpIHtcblx0XHR0aGlzLmxlZ2VuZF9kaXZfLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0dmFyIGh0bWwgPSBEeWdyYXBoLlBsdWdpbnMuTGVnZW5kLmdlbmVyYXRlTGVnZW5kSFRNTChlLmR5Z3JhcGgsIHhWYWx1ZSwgcG9pbnRzLCB0aGlzLm9uZV9lbV93aWR0aF8sIHJvdyk7XG5cdGlmIChodG1sIGluc3RhbmNlb2YgTm9kZSAmJiBodG1sLm5vZGVUeXBlID09PSBOb2RlLkRPQ1VNRU5UX0ZSQUdNRU5UX05PREUpIHtcblx0XHR0aGlzLmxlZ2VuZF9kaXZfLmlubmVySFRNTCA9ICcnO1xuXHRcdHRoaXMubGVnZW5kX2Rpdl8uYXBwZW5kQ2hpbGQoaHRtbCk7XG5cdH0gZWxzZVxuXHRcdHRoaXMubGVnZW5kX2Rpdl8uaW5uZXJIVE1MID0gaHRtbDtcblx0Ly8gbXVzdCBiZSBkb25lIG5vdyBzbyBvZmZzZXRXaWR0aCBpc27igJl0IDDigKZcblx0dGhpcy5sZWdlbmRfZGl2Xy5zdHlsZS5kaXNwbGF5ID0gJyc7XG5cblx0aWYgKGxlZ2VuZE1vZGUgPT09ICdmb2xsb3cnKSB7XG5cdFx0Ly8gY3JlYXRlIGZsb2F0aW5nIGxlZ2VuZCBkaXZcblx0XHR2YXIgYXJlYSA9IGUuZHlncmFwaC5wbG90dGVyXy5hcmVhO1xuXHRcdHZhciBsYWJlbHNEaXZXaWR0aCA9IHRoaXMubGVnZW5kX2Rpdl8ub2Zmc2V0V2lkdGg7XG5cdFx0dmFyIHlBeGlzTGFiZWxXaWR0aCA9IGUuZHlncmFwaC5nZXRPcHRpb25Gb3JBeGlzKCdheGlzTGFiZWxXaWR0aCcsICd5Jyk7XG5cdFx0Ly8gZmluZCB0aGUgY2xvc2VzdCBkYXRhIHBvaW50IGJ5IGNoZWNraW5nIHRoZSBjdXJyZW50bHkgaGlnaGxpZ2h0ZWQgc2VyaWVzLFxuXHRcdC8vIG9yIGZhbGwgYmFjayB0byB1c2luZyB0aGUgZmlyc3QgZGF0YSBwb2ludCBhdmFpbGFibGVcblx0XHR2YXIgaGlnaGxpZ2h0U2VyaWVzID0gZS5keWdyYXBoLmdldEhpZ2hsaWdodFNlcmllcygpXG5cdFx0dmFyIHBvaW50O1xuXHRcdGlmIChoaWdobGlnaHRTZXJpZXMpIHtcblx0XHRcdHBvaW50ID0gcG9pbnRzLmZpbmQocCA9PiBwLm5hbWUgPT09IGhpZ2hsaWdodFNlcmllcyk7XG5cdFx0XHRpZiAoIXBvaW50KVxuXHRcdFx0XHRwb2ludCA9IHBvaW50c1swXTtcblx0XHR9IGVsc2Vcblx0XHRcdHBvaW50ID0gcG9pbnRzWzBdO1xuXG5cdFx0Ly8gZGV0ZXJtaW5lIGZsb2F0aW5nIFtsZWZ0LCB0b3BdIGNvb3JkaW5hdGVzIG9mIHRoZSBsZWdlbmQgZGl2XG5cdFx0Ly8gd2l0aGluIHRoZSBwbG90dGVyXyBhcmVhXG5cdFx0Ly8gb2Zmc2V0IDUwIHB4IHRvIHRoZSByaWdodCBhbmQgZG93biBmcm9tIHRoZSBmaXJzdCBzZWxlY3Rpb24gcG9pbnRcblx0XHQvLyA1MCBweCBpcyBndWVzcyBiYXNlZCBvbiBtb3VzZSBjdXJzb3Igc2l6ZVxuXHRcdGNvbnN0IGZvbGxvd09mZnNldFggPSBlLmR5Z3JhcGguZ2V0TnVtZXJpY09wdGlvbignbGVnZW5kRm9sbG93T2Zmc2V0WCcpO1xuXHRcdGNvbnN0IHggPSAocG9pbnQ/LnggIT0gbnVsbCkgPyBwb2ludC54IDogMTtcblx0XHR2YXIgbGVmdExlZ2VuZCA9IHggKiBhcmVhLncgKyBmb2xsb3dPZmZzZXRYO1xuXG5cdFx0Ly8gaWYgbGVnZW5kIGZsb2F0cyB0byBlbmQgb2YgdGhlIGNoYXJ0IGFyZWEsIGl0IGZsaXBzIHRvIHRoZSBvdGhlclxuXHRcdC8vIHNpZGUgb2YgdGhlIHNlbGVjdGlvbiBwb2ludFxuXHRcdGlmICgobGVmdExlZ2VuZCArIGxhYmVsc0RpdldpZHRoICsgMSkgPiBhcmVhLncpIHtcblx0XHRcdGxlZnRMZWdlbmQgPSBsZWZ0TGVnZW5kIC0gMiAqIGZvbGxvd09mZnNldFggLSBsYWJlbHNEaXZXaWR0aCAtICh5QXhpc0xhYmVsV2lkdGggLSBhcmVhLngpO1xuXHRcdH1cblxuXHRcdHRoaXMubGVnZW5kX2Rpdl8uc3R5bGUubGVmdCA9IHlBeGlzTGFiZWxXaWR0aCArIGxlZnRMZWdlbmQgKyBcInB4XCI7XG5cdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCAoZSkgPT4ge1xuXHRcdFx0bG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3RpbWVzZXJpZXMtbW91c2UtdG9wLXBvc2l0aW9uJywgZS5jbGllbnRZICsgNTAgKyBcInB4XCIpXG5cdFx0fSk7XG5cdFx0dGhpcy5sZWdlbmRfZGl2Xy5zdHlsZS50b3AgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndGltZXNlcmllcy1tb3VzZS10b3AtcG9zaXRpb24nKTtcblx0fSBlbHNlIGlmIChsZWdlbmRNb2RlID09PSAnb25tb3VzZW92ZXInICYmIHRoaXMuaXNfZ2VuZXJhdGVkX2Rpdl8pIHtcblx0XHQvLyBzeW5jaHJvbmlzZSB0aGlzIHdpdGggTGVnZW5kLnByb3RvdHlwZS5wcmVkcmF3IGJlbG93XG5cdFx0dmFyIGFyZWEgPSBlLmR5Z3JhcGgucGxvdHRlcl8uYXJlYTtcblx0XHR2YXIgbGFiZWxzRGl2V2lkdGggPSB0aGlzLmxlZ2VuZF9kaXZfLm9mZnNldFdpZHRoO1xuXHRcdHRoaXMubGVnZW5kX2Rpdl8uc3R5bGUubGVmdCA9IGFyZWEueCArIGFyZWEudyAtIGxhYmVsc0RpdldpZHRoIC0gMSArIFwicHhcIjtcblx0XHR0aGlzLmxlZ2VuZF9kaXZfLnN0eWxlLnRvcCA9IGFyZWEueSArIFwicHhcIjtcblx0fVxufTsiLCIvKipcbiAgICAoQykgMjAyMyAtIG50b3Aub3JnXG4qL1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5jb25zdCBNQVhfQkFSX1dJRFRIID0gOTA7IC8qIDEwMCBweCAqL1xuY29uc3QgRklMTF9DT0xPUlMgPSBbXG4gICdyZ2IoMTQ0LCAyMzgsIDE0NCknLFxuICAncmdiKDI1LCAxMzUsIDg0KScsXG4gICdyZ2IoMjU1LCAxOTMsIDcpJyxcbiAgJ3JnYigyMjAsIDUzLCA2OSknXG5dO1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5mdW5jdGlvbiBkYXJrZW5Db2xvcihjb2xvclN0cikge1xuICBjb25zdCBjb2xvciA9IER5Z3JhcGgudG9SR0JfKGNvbG9yU3RyKTtcbiAgY29sb3IuciA9IE1hdGguZmxvb3IoKDI1NSArIGNvbG9yLnIpIC8gMik7XG4gIGNvbG9yLmcgPSBNYXRoLmZsb29yKCgyNTUgKyBjb2xvci5nKSAvIDIpO1xuICBjb2xvci5iID0gTWF0aC5mbG9vcigoMjU1ICsgY29sb3IuYikgLyAyKTtcbiAgcmV0dXJuICdyZ2IoJyArIGNvbG9yLnIgKyAnLCcgKyBjb2xvci5nICsgJywnICsgY29sb3IuYiArICcsIDAuOSknO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5mdW5jdGlvbiBnZXRDb2xvcihjdXJyZW50X3ZhbHVlLCBtYXhfdmFsdWUsIGRlZmF1bHRfY29sb3IpIHtcbiAgaWYoIW1heF92YWx1ZSB8fCAhY3VycmVudF92YWx1ZSkge1xuICAgIHJldHVybiBkYXJrZW5Db2xvcihkZWZhdWx0X2NvbG9yKTtcbiAgfVxuICAvKiBTZWN1cml0eSBjaGVjayAqL1xuICBpZihjdXJyZW50X3ZhbHVlID4gbWF4X3ZhbHVlKSB7XG4gICAgY3VycmVudF92YWx1ZSA9IG1heF92YWx1ZTtcbiAgfVxuXG4gIGNvbnN0IGNvbG9yc19tb2R1bGUgPSBtYXhfdmFsdWUgLyBGSUxMX0NPTE9SUy5sZW5ndGg7XG4gIGZvcihsZXQgaSA9IDE7IGkgPCBGSUxMX0NPTE9SUy5sZW5ndGggKyAxOyBpKyspIHtcbiAgICBpZihjdXJyZW50X3ZhbHVlIDw9IGNvbG9yc19tb2R1bGUgKiBpKSB7XG4gICAgICByZXR1cm4gRklMTF9DT0xPUlNbaSAtIDFdO1xuICAgIH1cbiAgfVxufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gY3JlYXRlIGEgYmFyIGNoYXJ0IGluc3RlYWQgb2YgYSBsaW5lIGNoYXJ0ICovXG5mdW5jdGlvbiBiYXJDaGFydFBsb3R0ZXIoZSkge1xuICBjb25zdCBjdHggPSBlLmRyYXdpbmdDb250ZXh0O1xuICBjb25zdCBwb2ludHMgPSBlLnBvaW50cztcbiAgY29uc3QgeV9ib3R0b20gPSBlLmR5Z3JhcGgudG9Eb21ZQ29vcmQoMCk7XG4gIGNvbnN0IG1heF92YWx1ZSA9IGUuZHlncmFwaC51c2VyX2F0dHJzXy52YWx1ZVJhbmdlWzFdXG4gIGNvbnN0IGRlZmF1bHRfY29sb3IgPSBlLmNvbG9yO1xuICBcbiAgLyogRmluZCB0aGUgbWluaW11bSBzZXBhcmF0aW9uIGJldHdlZW4geC12YWx1ZXMuXG4gICAqIFRoaXMgZGV0ZXJtaW5lcyB0aGUgYmFyIHdpZHRoLlxuICAgKi9cbiAgbGV0IG1pbl9zZXAgPSBJbmZpbml0eTtcbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBwb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBzZXAgPSBwb2ludHNbaV0uY2FudmFzeCAtIHBvaW50c1tpIC0gMV0uY2FudmFzeDtcbiAgICBpZiAoc2VwIDwgbWluX3NlcCkgbWluX3NlcCA9IHNlcDtcbiAgfVxuXG4gIGlmKG1pbl9zZXAgPiBNQVhfQkFSX1dJRFRIKSB7XG4gICAgbWluX3NlcCA9IE1BWF9CQVJfV0lEVEhcbiAgfVxuXG4gIC8qIEtlZXAganVzdCBhIGxpdHRsZSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSBiYXJzICovXG4gIGNvbnN0IGJhcl93aWR0aCA9IE1hdGguZmxvb3IoMC45NSAqIG1pbl9zZXApO1xuXG4gIC8qIERvIHRoZSBhY3R1YWwgcGxvdHRpbmcgKi9cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBwID0gcG9pbnRzW2ldO1xuICAgIGNvbnN0IGNlbnRlcl94ID0gcC5jYW52YXN4O1xuICAgIGNvbnN0IGN1cnJlbnRfdmFsdWUgPSBwLnl2YWw7XG4gICAgY3R4LmZpbGxTdHlsZSA9IGdldENvbG9yKE1hdGguYWJzKGN1cnJlbnRfdmFsdWUpLCBNYXRoLmFicyhtYXhfdmFsdWUpLCBkZWZhdWx0X2NvbG9yKTtcbiAgICBjdHguZmlsbFJlY3QoY2VudGVyX3ggLSBiYXJfd2lkdGggLyAyLCBwLmNhbnZhc3ksXG4gICAgICBiYXJfd2lkdGgsIHlfYm90dG9tIC0gcC5jYW52YXN5KTtcbiAgICBjdHguc3Ryb2tlUmVjdChjZW50ZXJfeCAtIGJhcl93aWR0aCAvIDIsIHAuY2FudmFzeSxcbiAgICAgIGJhcl93aWR0aCwgeV9ib3R0b20gLSBwLmNhbnZhc3kpO1xuICB9XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmNvbnN0IGR5Z3JhcGhQbG90dGVycyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHtcbiAgICBiYXJDaGFydFBsb3R0ZXIsXG4gIH07XG59KCk7XG5cbmV4cG9ydCBkZWZhdWx0IGR5Z3JhcGhQbG90dGVyczsiLCIvKipcbiAgICAoQykgMjAyMiAtIG50b3Aub3JnICAgIFxuKi9cblxuaW1wb3J0IHsgbnRvcG5nX3V0aWxpdHkgfSBmcm9tIFwiLi4vLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcy5qc1wiO1xuXG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmZ1bmN0aW9uIHRyYW5zZm9ybUNvbG9ycyhjb2xvcnMpIHtcbiAgICBsZXQgY29sb3JzUG9zaXRpb25EaWN0ID0ge307XG4gICAgY29sb3JzLmZvckVhY2goKGMsIGkpID0+IHtcblx0aWYgKGNvbG9yc1Bvc2l0aW9uRGljdFtjXSA9PSBudWxsKSB7XG5cdCAgICBjb2xvcnNQb3NpdGlvbkRpY3RbY10gPSBbaV07XG5cdH0gZWxzZSB7XG5cdCAgICBjb2xvcnNQb3NpdGlvbkRpY3RbY10ucHVzaChpKTtcblx0fVxuICAgIH0pO1xuICAgIC8vIGNsb25lIGNvbG9yc1xuICAgIGxldCBuZXdDb2xvcnMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShjb2xvcnMpO1xuICAgIFxuICAgIGZvciAobGV0IGNvbG9yIGluIGNvbG9yc1Bvc2l0aW9uRGljdCkge1xuXHRsZXQgY29sb3JzUG9zaXRpb24gPSBjb2xvcnNQb3NpdGlvbkRpY3RbY29sb3JdO1xuXHRsZXQgbiA9IGNvbG9yc1Bvc2l0aW9uLmxlbmd0aDtcblx0Ly8gY29sb3JzR2VuZXJhdGVkLmxlbmd0aCA9PSBjb2xvcnNQb3NpdGlvbi5sZW5ndGggYWx3YXlzIHRydWVcblx0bGV0IGNvbG9yc0dlbmVyYXRlZCA9IGdldENvbG9yc0Zyb21Db2xvcihjb2xvciwgbik7XG5cdGNvbG9yc0dlbmVyYXRlZC5mb3JFYWNoKChjLCBpKSA9PiB7XG5cdCAgICBsZXQgY1Bvc2l0aW9uID0gY29sb3JzUG9zaXRpb25baV07XG5cdCAgICBuZXdDb2xvcnNbY1Bvc2l0aW9uXSA9IGM7XG5cdH0pO1xuICAgIH1cbiAgICByZXR1cm4gbmV3Q29sb3JzO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5mdW5jdGlvbiBnZXRDb2xvcnNGcm9tQ29sb3IoY29sb3IsIG4pIHtcbiAgICByZXR1cm4gWy4uLkFycmF5KG4pLmtleXMoKV0ubWFwKChjLCBpKSA9PiB7XG5cdHJldHVybiBnZW5lcmF0ZUNvbG9yKGNvbG9yLCBpICsgMSwgbik7XG4gICAgfSk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qKlxuICogR2VuZXJhdGUgYSBjb2xvciB0aGF0IHJlcHJlc2VudCB0aGUgaW5kZXgtdGggdGludCBvZiBuIG9mIGJhc2VDb2xvci5cbiAqIEBwYXJhbSB7YmFzZUNvbG9yfSBzdHJpbmcgY29sb3IgaW4gaGV4IGZvcm1hdC5cbiAqIEBwYXJhbSB7aW5kZXh9IGludGVnZXIgaW4gaW50ZXJ2YWwgWzEsIG5dLlxuICogQHBhcmFtIHtufSB0b3RhbCBudW1iZXIgb2YgY29sb3JzIHRvIGdlbmVyYXRlXG4qKi9cbmZ1bmN0aW9uIGdlbmVyYXRlQ29sb3IoYmFzZUNvbG9yLCBpbmRleCwgbikge1xuICAgIGxldCBzb3VyY2VDb2xvciA9IGJhc2VDb2xvci5yZXBsYWNlKFwiI1wiLCBcIlwiKTtcblxuICAgIGxldCByZWRTb3VyY2UgPSBwYXJzZUludChzb3VyY2VDb2xvci5zdWJzdHJpbmcoMCwgMiksIDE2KTtcbiAgICBsZXQgZ3JlZW5Tb3VyY2UgPSBwYXJzZUludChzb3VyY2VDb2xvci5zdWJzdHJpbmcoMiwgNCksIDE2KTtcbiAgICBsZXQgYmx1ZVNvdXJjZSA9IHBhcnNlSW50KHNvdXJjZUNvbG9yLnN1YnN0cmluZyg0LCA2KSwgMTYpO1xuXG4gICAgbGV0IGNSZWQgPSBnZXRDb2xvckludGVycG9sYXRpb24ocmVkU291cmNlLCBpbmRleCwgbik7XG4gICAgbGV0IGNHcmVlbiA9IGdldENvbG9ySW50ZXJwb2xhdGlvbihncmVlblNvdXJjZSwgaW5kZXgsIG4pO1xuICAgIGxldCBjQmx1ZSA9IGdldENvbG9ySW50ZXJwb2xhdGlvbihibHVlU291cmNlLCBpbmRleCwgbik7XG5cbiAgICByZXR1cm4gcmdiVG9IZXgoY1JlZCwgY0dyZWVuLCBjQmx1ZSk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmZ1bmN0aW9uIGdldENvbG9ySW50ZXJwb2xhdGlvbihjb2xvclNvdXJjZSwgaSwgbikgeyAgICBcbiAgICBpZiAobiA8PSAxKSB7XG5cdHJldHVybiBjb2xvclNvdXJjZTtcbiAgICB9XG4gICAgbGV0IGNvbG9yU3RhcnQgPSBNYXRoLnRydW5jKGNvbG9yU291cmNlIC8gMik7XG4gICAgbGV0IGNvbG9yRW5kID0gTWF0aC50cnVuYyhjb2xvclNvdXJjZSArICgoMjU1IC0gY29sb3JTb3VyY2UpIC8gMikpO1xuICAgIGxldCBpbnRlcnZhbCA9IE1hdGgudHJ1bmMoKGNvbG9yRW5kIC0gY29sb3JTdGFydCkgLyBuKTtcblxuICAgIHJldHVybiBjb2xvclN0YXJ0ICsgaSAqIGludGVydmFsO1xuICAgIC8vIHJldHVybiBjb2xvclN0YXJ0ICsgKG4gLSBpKSAqIGludGVydmFsO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5mdW5jdGlvbiByZ2JUb0hleChyLCBnLCBiKSB7XG4gICAgcmV0dXJuIFwiI1wiICsgY29tcG9uZW50VG9IZXgocikgKyBjb21wb25lbnRUb0hleChnKSArIGNvbXBvbmVudFRvSGV4KGIpO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5mdW5jdGlvbiBjb21wb25lbnRUb0hleChjKSB7XG4gICAgbGV0IGhleCA9IGMudG9TdHJpbmcoMTYpO1xuICAgIHJldHVybiBoZXgubGVuZ3RoID09IDEgPyBcIjBcIiArIGhleCA6IGhleDtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuY29uc3QgY29sb3JzSW50ZXJwb2xhdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG5cdCAgICB0cmFuc2Zvcm1Db2xvcnMsXG4gICAgfTtcbn0oKTtcblxuZXhwb3J0IGRlZmF1bHQgY29sb3JzSW50ZXJwb2xhdGlvbjtcbiIsIi8qKlxuICAgIChDKSAyMDIzIC0gbnRvcC5vcmdcbiovXG5cbmltcG9ydCBjb2xvcnNJbnRlcnBvbGF0aW9uIGZyb20gXCIuLi9jb2xvcnMvY29sb3JzLWludGVycG9sYXRpb25cIjtcbmltcG9ydCBmb3JtYXR0ZXJVdGlscyBmcm9tIFwiLi4vZm9ybWF0dGVyLXV0aWxzXCI7XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIFRoaXMgZnVuY3Rpb24gcmV0dXJuIHRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgZHlncmFwaCBjaGFydHMgKi9cbmZ1bmN0aW9uIGdldERlZmF1bHRDb25maWcoKSB7XG4gIHJldHVybiB7XG4gICAgbGFiZWxzU2VwYXJhdGVMaW5lczogdHJ1ZSxcbiAgICBsZWdlbmQ6IFwiZm9sbG93XCIsXG4gICAgY29ubmVjdFNlcGFyYXRlZFBvaW50czogdHJ1ZSxcbiAgICBpbmNsdWRlWmVybzogdHJ1ZSxcbiAgICBkcmF3UG9pbnRzOiB0cnVlLFxuICAgIGhpZ2hsaWdodFNlcmllc0JhY2tncm91bmRBbHBoYTogMC43LFxuICAgIGhpZ2hsaWdodFNlcmllc09wdHM6IHtcbiAgICAgIHN0cm9rZVdpZHRoOiAyLFxuICAgICAgcG9pbnRTaXplOiAzLFxuICAgICAgaGlnaGxpZ2h0Q2lyY2xlU2l6ZTogNixcbiAgICB9LFxuICAgIGF4aXNMYWJlbEZvbnRTaXplOiAxMixcbiAgICBheGVzOiB7XG4gICAgICB4OiB7XG4gICAgICAgIGF4aXNMYWJlbFdpZHRoOiA5MFxuICAgICAgfVxuICAgIH0sXG4gIH07XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIFRoaXMgZnVuY3Rpb24gcHV0IHRoZSBjb3JyZWN0IGZvcm1hdHRlcnMgaW4gdGhlIGNvbmZpZ3VyYXRpb24gKi9cbmZ1bmN0aW9uIGNoYW5nZUZvcm1hdHRlcnMoY29uZmlnLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zLmZvcm1hdHRlcnMubGVuZ3RoID4gMSkge1xuICAgIC8qIE11bHRpcGxlIGZvcm1hdHRlcnMgKi9cbiAgICAvKiBOT1RFOiBhdCBtb3N0IDIgZm9ybWF0dGVycyBjYW4gYmUgdXNlZCAqL1xuICAgIGNvbmZpZy5heGVzLnkxID0gZ2V0QXhpc0NvbmZpZ3VyYXRpb24oZm9ybWF0dGVyVXRpbHMuZ2V0Rm9ybWF0dGVyKG9wdGlvbnMuZm9ybWF0dGVyc1swXSkpO1xuICAgIGNvbmZpZy5heGVzLnkyID0gZ2V0QXhpc0NvbmZpZ3VyYXRpb24oZm9ybWF0dGVyVXRpbHMuZ2V0Rm9ybWF0dGVyKG9wdGlvbnMuZm9ybWF0dGVyc1sxXSkpO1xuICB9IGVsc2UgaWYgKG9wdGlvbnMuZm9ybWF0dGVycy5sZW5ndGggPT0gMSkge1xuICAgIC8qIFNpbmdsZSBmb3JtYXR0ZXIgKi9cbiAgICBjb25maWcuYXhlcy55ID0gZ2V0QXhpc0NvbmZpZ3VyYXRpb24oZm9ybWF0dGVyVXRpbHMuZ2V0Rm9ybWF0dGVyKG9wdGlvbnMuZm9ybWF0dGVyc1swXSkpO1xuICB9XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIFRoaXMgZnVuY3Rpb24gcmV0dXJuIHRoZSBjb2xvciBvZiB0aGUgc2VyaWUgd2hlbiBoaWdobGlnaHRlZCAqL1xuZnVuY3Rpb24gZ2V0SGlnaGxpZ2h0Q29sb3IoKSB7XG4gIGNvbnN0IGlzX2RhcmtfbW9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2JvZHkgZGFyaycpLmxlbmd0aCA+IDA7XG4gIGxldCBoaWdobGlnaHRfY29sb3IgPSAncmdiKDI1NSwgMjU1LCAyNTUpJztcbiAgaWYgKGlzX2RhcmtfbW9kZSkge1xuICAgIGhpZ2hsaWdodF9jb2xvciA9ICdyZ2IoMTMsIDE3LCAyMyknO1xuICB9XG4gIHJldHVybiBoaWdobGlnaHRfY29sb3I7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byBmb3JtYXQgdGhlIHZhbHVlIG9uIHRoZSBsZWdlbmQgKi9cbmZ1bmN0aW9uIGdldEF4aXNDb25maWd1cmF0aW9uKGZvcm1hdHRlcikge1xuICByZXR1cm4ge1xuICAgIGF4aXNMYWJlbEZvcm1hdHRlcjogZm9ybWF0dGVyLFxuICAgIHZhbHVlRm9ybWF0dGVyOiBmdW5jdGlvbiAobnVtX29yX21pbGxpcywgb3B0cywgc2VyaWVzTmFtZSwgZHlncmFwaCwgcm93LCBjb2wpIHtcbiAgICAgIGNvbnN0IHNlcmllX3BvaW50ID0gZHlncmFwaD8ucmF3RGF0YV8/Lltyb3ddW2NvbF07XG4gICAgICBsZXQgZGF0YSA9ICcnO1xuICAgICAgaWYgKHR5cGVvZiAoc2VyaWVfcG9pbnQpID09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgLyogVGhpcyBpcyB0aGUgY2FzZSBmb3IgdGhlIHNlcmllIHdpdGggYm91bmRzICovXG4gICAgICAgIHNlcmllX3BvaW50LmZvckVhY2goKGVsKSA9PiB7XG4gICAgICAgICAgZGF0YSA9IGAke2RhdGF9IC8gJHtmb3JtYXR0ZXIoZWwgfHwgMCl9YDtcbiAgICAgICAgfSlcbiAgICAgICAgZGF0YSA9IGRhdGEuc3Vic3RyaW5nKDMpOyAvKiBSZW1vdmUgdGhlIGZpcnN0IHRocmVlIGNoYXJhY3RlcnMgJyAvICcgKi9cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIFRoaXMgaXMgdGhlIHN0YW5kYXJkIGNhc2UgKi9cbiAgICAgICAgZGF0YSA9IGZvcm1hdHRlcihudW1fb3JfbWlsbGlzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAoZGF0YSk7XG4gICAgfSxcbiAgICBheGlzTGFiZWxXaWR0aDogODAsXG4gIH1cbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogVGhpcyBmdW5jdGlvbiBtZXJnZXMgdGhlIGRlZmF1bHQgY29uZmlnIHdpdGggdGhlIG9wdGlvbnMgcmVxdWVzdGVkICovXG5mdW5jdGlvbiBidWlsZENoYXJ0T3B0aW9ucyhvcHRpb25zKSB7XG4gIGNvbnN0IGludGVycG9sYXRlZF9jb2xvcnMgPSBjb2xvcnNJbnRlcnBvbGF0aW9uLnRyYW5zZm9ybUNvbG9ycyhvcHRpb25zLmNvbG9ycyk7XG4gIGNvbnN0IGhpZ2hsaWdodF9jb2xvciA9IGdldEhpZ2hsaWdodENvbG9yKCk7XG4gIGNvbnN0IGNvbmZpZyA9IGdldERlZmF1bHRDb25maWcoKTtcblxuICBjb25maWcuY3VzdG9tQmFycyA9IG9wdGlvbnMuY3VzdG9tQmFycztcbiAgY29uZmlnLmxhYmVscyA9IG9wdGlvbnMubGFiZWxzO1xuICBjb25maWcuc2VyaWVzID0gb3B0aW9ucy5wcm9wZXJ0aWVzO1xuICBjb25maWcuZGF0YSA9IG9wdGlvbnMuc2VyaWU7XG4gIGNvbmZpZy5zdGFja2VkR3JhcGggPSBvcHRpb25zLnN0YWNrZWQ7XG4gIGNvbmZpZy52YWx1ZVJhbmdlID0gb3B0aW9ucy52YWx1ZV9yYW5nZTtcbiAgY29uZmlnLmhpZ2hsaWdodFNlcmllc0JhY2tncm91bmRDb2xvciA9IGhpZ2hsaWdodF9jb2xvcjtcbiAgY29uZmlnLmNvbG9ycyA9IGludGVycG9sYXRlZF9jb2xvcnM7XG4gIGNvbmZpZy5kaXNhYmxlVHNMaXN0ID0gb3B0aW9ucy5kaXNhYmxlX3RzX2xpc3Q7XG4gIGNvbmZpZy55UmFuZ2VQYWQgPSBvcHRpb25zLnlSYW5nZVBhZCB8fCAxO1xuXG4gIC8qIENoYW5nZSB0aGUgcGxvdHRlciAqL1xuICBpZiAob3B0aW9ucy5wbG90dGVyKSB7XG4gICAgY29uZmlnLnBsb3R0ZXIgPSBvcHRpb25zLnBsb3R0ZXI7XG4gIH1cblxuICBjaGFuZ2VGb3JtYXR0ZXJzKGNvbmZpZywgb3B0aW9ucyk7XG5cbiAgcmV0dXJuIGNvbmZpZztcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuZnVuY3Rpb24gZm9ybWF0U2VyaWVQcm9wZXJ0aWVzKHR5cGUpIHtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnZGFzaCc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBmaWxsR3JhcGg6IGZhbHNlLFxuICAgICAgICBjdXN0b21CYXJzOiBmYWxzZSxcbiAgICAgICAgc3Ryb2tlUGF0dGVybjogRHlncmFwaC5EQVNIRURfTElORVxuICAgICAgfTtcbiAgICBjYXNlICdwb2ludCc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBmaWxsR3JhcGg6IGZhbHNlLFxuICAgICAgICBjdXN0b21CYXJzOiBmYWxzZSxcbiAgICAgICAgc3Ryb2tlV2lkdGg6IDAuMCxcbiAgICAgICAgcG9pbnRTaXplOiAyLjAsXG4gICAgICB9O1xuICAgIGNhc2UgJ2JvdW5kcyc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBmaWxsR3JhcGg6IGZhbHNlLFxuICAgICAgICBzdHJva2VXaWR0aDogMS4wLFxuICAgICAgICBwb2ludFNpemU6IDEuNSxcbiAgICAgICAgZmlsbEFscGhhOiAwLjVcbiAgICAgIH07XG4gICAgY2FzZSAnbGluZSc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBmaWxsR3JhcGg6IGZhbHNlLFxuICAgICAgICBjdXN0b21CYXJzOiBmYWxzZSxcbiAgICAgICAgc3Ryb2tlV2lkdGg6IDEuNSxcbiAgICAgICAgcG9pbnRTaXplOiAxLjUsXG4gICAgICB9O1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBmaWxsR3JhcGg6IHRydWUsXG4gICAgICAgIGN1c3RvbUJhcnM6IGZhbHNlLFxuICAgICAgICBzdHJva2VXaWR0aDogMS4wLFxuICAgICAgICBwb2ludFNpemU6IDEuNSxcbiAgICAgICAgZmlsbEFscGhhOiAwLjVcbiAgICAgIH07XG4gIH1cbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuY29uc3QgZHlncmFwaENvbmZpZyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHtcbiAgICBidWlsZENoYXJ0T3B0aW9ucyxcbiAgICBmb3JtYXRTZXJpZVByb3BlcnRpZXNcbiAgfTtcbn0oKTtcblxuZXhwb3J0IGRlZmF1bHQgZHlncmFwaENvbmZpZzsiLCIvKipcbiAgICAoQykgMjAyMyAtIG50b3Aub3JnXG4qL1xuXG5pbXBvcnQgZHlncmFwaFBsb3R0ZXJzIGZyb20gXCIuL2R5Z3JhcGgtcGxvdHRlcnMuanNcIjtcbmltcG9ydCBkeWdyYXBoQ29uZmlnIGZyb20gXCIuL2R5Z3JhcGgtY29uZmlnLmpzXCI7XG5cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuY29uc3QgZGVmYXVsdENvbG9ycyA9IFtcbiAgXCIjQzZEOUZEXCIsXG4gIFwiIzkwRUU5MFwiLFxuICBcIiNFRTg0MzRcIixcbiAgXCIjQzk1RDYzXCIsXG4gIFwiI0FFODc5OVwiLFxuICBcIiM3MTdFQzNcIixcbiAgXCIjNDk2RERCXCIsXG4gIFwiIzVBN0FERVwiLFxuICBcIiM2OTg2RTFcIixcbiAgXCIjNzc5MUU0XCIsXG4gIFwiIzgzOUJFNlwiLFxuICBcIiM4RUE0RThcIixcbl07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmNvbnN0IGNvbnN0YW50X3NlcmllX2NvbG9ycyA9IHtcbiAgXCJkZWZhdWx0X2NvbG9yXCI6IFwiI0M2RDlGRFwiLFxuICBcIjk1X3BlcmNcIjogXCIjOEVBNEU4XCIsXG4gIFwiYXZnXCI6IFwiIzgzOUJFNlwiLFxufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5mdW5jdGlvbiBnZXRTZXJpZUlkKHNlcmllKSB7XG4gIHJldHVybiBgJHtzZXJpZS5pZH1gO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5mdW5jdGlvbiBmb3JtYXRTZXJpZUNvbG9ycyhwYWxldHRlX2xpc3QpIHtcbiAgbGV0IGNvbG9yc19saXN0ID0gcGFsZXR0ZV9saXN0O1xuICBsZXQgY291bnQwID0gMCwgY291bnQxID0gMDtcbiAgbGV0IGNvbG9yczAgPSBkZWZhdWx0Q29sb3JzO1xuICBsZXQgY29sb3JzMSA9IGQzdjcuc2NoZW1lQ2F0ZWdvcnkxMDtcbiAgY29sb3JzX2xpc3QuZm9yRWFjaCgocywgaW5kZXgpID0+IHtcbiAgICBpZiAocy5wYWxldHRlID09IDApIHtcbiAgICAgIGlmIChwYWxldHRlX2xpc3QuZmluZCgoZWxlbWVudCwgaikgPT4gKGVsZW1lbnQuY29sb3IgPT09IHMuY29sb3IgJiYgaiAhPT0gaW5kZXgpKSkge1xuICAgICAgICBwYWxldHRlX2xpc3RbaW5kZXhdID0gY29sb3JzMFtjb3VudDAgJSBjb2xvcnMwLmxlbmd0aF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYWxldHRlX2xpc3RbaW5kZXhdID0gcy5jb2xvcjtcbiAgICAgIH1cbiAgICAgIGNvdW50MCArPSAxO1xuICAgIH0gZWxzZSBpZiAocy5wYWxldHRlID09IDEpIHtcbiAgICAgIHBhbGV0dGVfbGlzdFtpbmRleF0gPSBjb2xvcnMxW2NvdW50MSAlIGNvbG9yczEubGVuZ3RoXTtcbiAgICAgIGNvdW50MSArPSAxO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIFJldHVybiB0aGUgZm9ybWF0dGVkIHNlcmllIG5hbWUgKi9cbmZ1bmN0aW9uIGdldFNlcmllTmFtZShuYW1lLCBpZCwgdHNHcm91cCwgdXNlRnVsbE5hbWUpIHtcbiAgaWYgKG5hbWUgPT0gbnVsbCkge1xuICAgIG5hbWUgPSBpZDtcbiAgfVxuICBsZXQgbmFtZV9tb3JlX3NwYWNlID0gXCJcIjtcbiAgaWYgKG5hbWUgIT0gbnVsbCkge1xuICAgIG5hbWVfbW9yZV9zcGFjZSA9IGAke25hbWV9YDtcbiAgfVxuICBpZiAodXNlRnVsbE5hbWUgPT0gZmFsc2UpIHtcbiAgICByZXR1cm4gbmFtZTtcbiAgfVxuICBsZXQgc291cmNlX2luZGV4ID0gMDtcbiAgbGV0IHNvdXJjZV9kZWZfYXJyYXkgPSB0c0dyb3VwLnNvdXJjZV90eXBlLnNvdXJjZV9kZWZfYXJyYXk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc291cmNlX2RlZl9hcnJheS5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGxldCBzb3VyY2VfZGVmID0gc291cmNlX2RlZl9hcnJheVtpXTtcbiAgICBpZiAoc291cmNlX2RlZi5tYWluX3NvdXJjZV9kZWYgPT0gdHJ1ZSkge1xuICAgICAgc291cmNlX2luZGV4ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGxldCBzb3VyY2UgPSB0c0dyb3VwLnNvdXJjZV9hcnJheVtzb3VyY2VfaW5kZXhdO1xuICBsZXQgcHJlZml4ID0gYCR7c291cmNlLmxhYmVsfWA7XG4gIHJldHVybiBgJHtwcmVmaXh9IC0gJHtuYW1lX21vcmVfc3BhY2V9YDtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogR2l2ZW4gYWxsIHRoZSBpbmZvIGFib3V0IGEgdGltZXNlcmllLCByZXR1cm4gdGhlIGNvcnJlY3QgbmFtZSB0byBiZSBkaXNwbGF5ZWQgKi9cbmZ1bmN0aW9uIGdldE5hbWUodHNfaW5mbywgbWV0YWRhdGEpIHtcbiAgbGV0IG5hbWUgPSAobWV0YWRhdGEudXNlX3NlcmllX25hbWUgPT0gdHJ1ZSkgPyB0c19pbmZvLm5hbWUgOiBtZXRhZGF0YS5sYWJlbDtcblxuICBpZiAodHNfaW5mby5leHRfbGFiZWwpIHtcbiAgICBuYW1lID0gdHNfaW5mby5leHRfbGFiZWxcbiAgfVxuICByZXR1cm4gbmFtZVxufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBUaGlzIGZ1bmN0aW9uIHJldHVybiB0aGUgcGxvdHRpbmcgZnVuY3Rpb24gKi9cbmZ1bmN0aW9uIGdldFBsb3R0ZXIoY2hhcnRfdHlwZSkge1xuICBzd2l0Y2ggKGNoYXJ0X3R5cGUpIHtcbiAgICBjYXNlICdiYXInOlxuICAgICAgcmV0dXJuIGR5Z3JhcGhQbG90dGVycy5iYXJDaGFydFBsb3R0ZXI7XG4gIH1cbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuZnVuY3Rpb24gYWRkTmV3U2VyaWUoc2VyaWVfbmFtZSwgY2hhcnRfdHlwZSwgY29sb3IsIGNvbmZpZykge1xuICBjb25maWcubGFiZWxzLnB1c2goc2VyaWVfbmFtZSk7XG4gIGNvbmZpZy5wcm9wZXJ0aWVzW3NlcmllX25hbWVdID0ge31cbiAgY29uZmlnLnByb3BlcnRpZXNbc2VyaWVfbmFtZV0gPSBkeWdyYXBoQ29uZmlnLmZvcm1hdFNlcmllUHJvcGVydGllcyhjaGFydF90eXBlKTtcbiAgY29uZmlnLmNvbG9ycy5wdXNoKGNvbG9yKTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogVGhpcyBmdW5jdGlvbiBnaXZlbiBhIHNlcmllLCBmb3JtYXQgdGhlIGFycmF5IG5lZWRlZCAqL1xuZnVuY3Rpb24gY29tcGFjdFNlcmllKGNvbmZpZywgdHNfaW5mbywgZXh0cmFfdGltZXNlcmllcywgc2VyaWUsIHBhc3Rfc2VyaWUsIHNjYWxhciwgc3RlcCwgZXBvY2hfYmVnaW4sIG5hbWVzKSB7XG4gIGNvbnN0IGF2Z192YWx1ZSA9IHRzX2luZm8uc3RhdGlzdGljc1tcImF2ZXJhZ2VcIl07XG4gIGNvbnN0IHBlcmNfdmFsdWUgPSB0c19pbmZvLnN0YXRpc3RpY3NbXCI5NXRoX3BlcmNlbnRpbGVcIl07XG4gIGxldCB0aW1lID0gZXBvY2hfYmVnaW47XG5cbiAgLyogTm93IGZvcm1hdCB0aGUgdGltZXNlcmllICovXG4gIGZvciAobGV0IHBvaW50ID0gMDsgcG9pbnQgPCBzZXJpZS5sZW5ndGg7IHBvaW50KyspIHtcbiAgICBjb25zdCBzZXJpZV9wb2ludCA9IHNlcmllW3BvaW50XTtcbiAgICAvKiBJZiB0aGUgcG9pbnQgaXMgaW5zZXJ0ZWQgZm9yIHRoZSBmaXJzdCB0aW1lLCBhZGQgdGhlIHRpbWUgYmVmb3JlIGV2ZXJ5dGhpbmcgZWxzZSAqL1xuICAgIGlmICghY29uZmlnLnNlcmllW3RpbWVdKSB7XG4gICAgICBjb25maWcuc2VyaWVbdGltZV0gPSBbeyB2YWx1ZTogbmV3IERhdGUodGltZSAqIDEwMDApLCBuYW1lOiBcIlRpbWVcIiB9XTtcbiAgICB9XG4gICAgLyogQWRkIHRoZSBwb2ludCB0byB0aGUgYXJyYXkgb3IgTmFOIGlmIGl0J3MgbnVsbCAqL1xuICAgIChzZXJpZV9wb2ludCAhPT0gbnVsbCkgP1xuICAgICAgY29uZmlnLnNlcmllW3RpbWVdLnB1c2goeyB2YWx1ZTogc2VyaWVfcG9pbnQgKiBzY2FsYXIsIG5hbWU6IG5hbWVzLnNlcmllX25hbWUgfSkgOlxuICAgICAgY29uZmlnLnNlcmllW3RpbWVdLnB1c2goeyB2YWx1ZTogTmFOLCBuYW1lOiBuYW1lcy5zZXJpZV9uYW1lIH0pO1xuXG4gICAgLyogQWRkIGV4dHJhIHNlcmllcywgYXZnLCA5NXRoIGFuZCBwYXN0IHRpbWVzZXJpZXMgKi9cbiAgICBpZiAoZXh0cmFfdGltZXNlcmllcz8uYXZnID09IHRydWUpIHtcbiAgICAgIGNvbmZpZy5zZXJpZVt0aW1lXS5wdXNoKHsgdmFsdWU6IGF2Z192YWx1ZSAqIHNjYWxhciwgbmFtZTogbmFtZXMuYXZnX25hbWUgfSk7XG4gICAgfVxuICAgIGlmIChleHRyYV90aW1lc2VyaWVzPy5wZXJjXzk1ID09IHRydWUpIHtcbiAgICAgIGNvbmZpZy5zZXJpZVt0aW1lXS5wdXNoKHsgdmFsdWU6IHBlcmNfdmFsdWUgKiBzY2FsYXIsIG5hbWU6IG5hbWVzLnBlcmNfbmFtZSB9KTtcbiAgICB9XG4gICAgaWYgKGV4dHJhX3RpbWVzZXJpZXM/LnBhc3QgPT0gdHJ1ZSkge1xuICAgICAgY29uc3QgcGFzdF92YWx1ZSA9IChwYXN0X3NlcmllKSA/IHBhc3Rfc2VyaWVbcG9pbnRdIDogbnVsbDtcbiAgICAgIChwYXN0X3ZhbHVlKSA/XG4gICAgICAgIGNvbmZpZy5zZXJpZVt0aW1lXS5wdXNoKHsgdmFsdWU6IHBhc3RfdmFsdWUgKiBzY2FsYXIsIG5hbWU6IG5hbWVzLnBhc3RfbmFtZSB9KSA6XG4gICAgICAgIGNvbmZpZy5zZXJpZVt0aW1lXS5wdXNoKHsgdmFsdWU6IE5hTiwgbmFtZTogbmFtZXMucGFzdF9sYWJlbCB9KTtcbiAgICB9XG5cbiAgICAvKiBJbmNyZWFzZSB0aGUgdGltZSB1c2luZyB0aGUgc3RlcCAqL1xuICAgIHRpbWUgPSB0aW1lICsgc3RlcDtcbiAgfVxufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBUaGlzIGZ1bmN0aW9uIGZvcm1hdCB0aGUgQm91bmQgdHlwZSBzZXJpZSBpbiB0aGUgY29ycmVjdCBmb3JtYXQgKi9cbmZ1bmN0aW9uIHNwbGl0Qm91bmRTZXJpZShzZXJpZXMsIHRpbWVzZXJpZV9pbmZvKSB7XG4gIGxldCBzZXJpZSA9IFtdO1xuICBsZXQgY29sb3IgPSB7fTtcbiAgbGV0IGZvcm1hdHRlciA9IG51bGw7XG4gIGxldCBzZXJpZV9uYW1lID0gbnVsbDtcbiAgbGV0IHByb3BlcnRpZXMgPSB7fTtcblxuICAvKiBBIGJvdW5kIHRpbWVzZXJpZSBzaG91bGQgYmUgY29tcG9zZWQgYnkgMyB0aW1lc2VyaWVzOlxuICAgKiAgICAtIG1ldHJpYyAobWFpbilcbiAgICogICAgLSBsb3dlcl9ib3VuZCAodGhlIGxvd2VyIGJvdW5kKVxuICAgKiAgICAtIHVwcGVyX2JvdW5kICh0aGUgdXBwZXIgYm91bmQpXG4gICAqL1xuICBzZXJpZXMuZm9yRWFjaCgodHNfaW5mbywgaikgPT4ge1xuICAgIGNvbnN0IHRzX2lkID0gZ2V0U2VyaWVJZCh0c19pbmZvKTtcbiAgICBjb25zdCBzZXJpZSA9IHRzX2luZm8uZGF0YSB8fCBbXTsgLyogU2FmZXR5IGNoZWNrICovXG4gICAgY29uc3QgbWV0YWRhdGEgPSB0aW1lc2VyaWVfaW5mby5tZXRyaWMudGltZXNlcmllc1t0c19pZF07XG4gICAgY29uc3Qgc2NhbGFyID0gKG1ldGFkYXRhPy5pbnZlcnRfZGlyZWN0aW9uID09PSB0cnVlKSA/IDEgOiAtMTtcblxuICAgIC8qIEp1c3QgYWRkIHRoZSBuYW1lLCBwcm9wZXJ0aWVzLCBjb2xvcnMsIGVjYywgZm9yIHRoZSBcbiAgICAgKiBcIm1haW5cIiB0aW1lc2VyaWUgYW5kIG5vdCBmb3IgdGhlIGJvdW5kcyBvbmVzIFxuICAgICAqL1xuICAgIGlmIChtZXRhZGF0YS50eXBlID09IFwibWV0cmljXCIpIHtcbiAgICAgIHNlcmllX25hbWUgPSBnZXRTZXJpZU5hbWUobWV0YWRhdGEubGFiZWwsIHRzX2lkLCB0aW1lc2VyaWVfaW5mbywgdHJ1ZSk7XG4gICAgICBwcm9wZXJ0aWVzID0gZHlncmFwaENvbmZpZy5mb3JtYXRTZXJpZVByb3BlcnRpZXMoJ2JvdW5kcycpO1xuICAgICAgY29sb3IgPSB7IGNvbG9yOiBtZXRhZGF0YS5jb2xvciwgcGFsZXR0ZTogMCB9O1xuICAgICAgZm9ybWF0dGVyID0gdGltZXNlcmllX2luZm8ubWV0cmljLm1lYXN1cmVfdW5pdDtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBwb2ludCA9IDA7IHBvaW50IDwgc2VyaWUubGVuZ3RoOyBwb2ludCsrKSB7XG4gICAgICBsZXQgc2VyaWVfcG9pbnQgPSAoc2VyaWVfcG9pbnQgPT09IG51bGwpID8gTmFOIDogc2VyaWVbcG9pbnRdO1xuICAgICAgaWYgKHNlcmllW3BvaW50XSA9PSBudWxsKSB7XG4gICAgICAgIHNlcmllW3BvaW50XSA9IFswLCBOYU4sIDBdO1xuICAgICAgfVxuXG4gICAgICBpZiAobWV0YWRhdGEudHlwZSA9PSBcImxvd2VyX2JvdW5kXCIpIHtcbiAgICAgICAgc2VyaWVbcG9pbnRdWzBdID0gc2VyaWVfcG9pbnQgKiBzY2FsYXI7XG4gICAgICB9IGVsc2UgaWYgKG1ldGFkYXRhLnR5cGUgPT0gXCJtZXRyaWNcIikge1xuICAgICAgICBzZXJpZVtwb2ludF1bMV0gPSBzZXJpZV9wb2ludCAqIHNjYWxhcjtcbiAgICAgIH0gZWxzZSBpZiAobWV0YWRhdGEudHlwZSA9PSBcInVwcGVyX2JvdW5kXCIpIHtcbiAgICAgICAgc2VyaWVbcG9pbnRdWzJdID0gc2VyaWVfcG9pbnQgKiBzY2FsYXI7XG4gICAgICB9XG4gICAgfVxuICB9KVxuXG4gIHJldHVybiB7IHNlcmllOiBzZXJpZSwgY29sb3I6IGNvbG9yLCBmb3JtYXR0ZXI6IGZvcm1hdHRlciwgc2VyaWVfbmFtZTogc2VyaWVfbmFtZSwgcHJvcGVydGllczogcHJvcGVydGllcyB9O1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBUaGlzIGZ1bmN0aW9uLCBnaXZlbiBhIHNlcmllIGZvcm1hdCB0aGUgYm91bmRzIHNlcmllICovXG5mdW5jdGlvbiBmb3JtYXRCb3VuZHNTZXJpZSh0aW1lc2VyaWVfaW5mbywgdGltZXNlcmllX29wdGlvbnMsIGNvbmZpZykge1xuICAvKiBCeSBkZWZhdWx0IHRoZSBjaGFydCB0eXBlIGlzIGxpbmUgKi9cbiAgY29uc3QgY2hhcnRfdHlwZSA9IHRpbWVzZXJpZV9pbmZvLm1ldHJpYy5jaGFydF90eXBlIHx8IFwiZmlsbGVkXCI7XG4gIGNvbnN0IHNlcmllcyA9IHRpbWVzZXJpZV9vcHRpb25zLnNlcmllcyB8fCBbXTtcbiAgY29uc3QgZXBvY2hfYmVnaW4gPSB0aW1lc2VyaWVfb3B0aW9ucy5tZXRhZGF0YS5lcG9jaF9iZWdpbjtcbiAgY29uc3Qgc3RlcCA9IHRpbWVzZXJpZV9vcHRpb25zLm1ldGFkYXRhLmVwb2NoX3N0ZXA7XG4gIGNvbnN0IHsgc2VyaWUsIGNvbG9yLCBmb3JtYXR0ZXIsIHNlcmllX25hbWUsIHByb3BlcnRpZXMgfSA9IHNwbGl0Qm91bmRTZXJpZShzZXJpZXMsIHRpbWVzZXJpZV9pbmZvKTtcbiAgbGV0IHRpbWUgPSBlcG9jaF9iZWdpbjtcbiAgLyogVE9ETzogYWRkIGF2ZywgcGFzdCwgZWNjLiB0aW1lc2VyaWVzIHRvIHRoZSBib3VuZHMgb25lICovXG5cbiAgLyogVXBkYXRlIHRoZSBjb25maWcgKi9cbiAgY29uc3QgZm9ybWF0dGVkX25hbWUgPSBgJHtzZXJpZV9uYW1lfSAke2kxOG4oJ2xvd2VyX3ZhbHVlX3VwcGVyJyl9YFxuICBjb25zdCBmb3JtYXR0ZXJfZm91bmQgPSBjb25maWcuZm9ybWF0dGVycy5maW5kKGVsID0+IGVsID09IGZvcm1hdHRlcik7XG4gIGlmICghZm9ybWF0dGVyX2ZvdW5kKVxuICAgIGNvbmZpZy5mb3JtYXR0ZXJzLnB1c2goZm9ybWF0dGVyKTtcbiAgY29uZmlnLnBsb3R0ZXIgPSBnZXRQbG90dGVyKGNoYXJ0X3R5cGUpO1xuICBjb25maWcuY3VzdG9tQmFycyA9IHRydWU7XG4gIGNvbmZpZy5jb2xvcnMucHVzaChjb2xvcik7XG4gIGNvbmZpZy5sYWJlbHMucHVzaChmb3JtYXR0ZWRfbmFtZSk7XG4gIGNvbmZpZy5wcm9wZXJ0aWVzW2Zvcm1hdHRlZF9uYW1lXSA9IHByb3BlcnRpZXM7XG5cbiAgLyogVXBkYXRlIHRoZSBzZXJpZSAqL1xuICBPYmplY3Qua2V5cyhzZXJpZSkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgaWYgKCFjb25maWcuc2VyaWVbdGltZV0pIHtcbiAgICAgIGNvbmZpZy5zZXJpZVt0aW1lXSA9IFtcbiAgICAgICAgeyB2YWx1ZTogbmV3IERhdGUodGltZSAqIDEwMDApLCBuYW1lOiBcIlRpbWVcIiB9LFxuICAgICAgICB7IHZhbHVlOiBzZXJpZVtrZXldLCBuYW1lOiBmb3JtYXR0ZWRfbmFtZSB9XG4gICAgICBdO1xuICAgIH1cblxuICAgIHRpbWUgPSB0aW1lICsgc3RlcDtcbiAgfSk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmZ1bmN0aW9uIGZvcm1hdFN0YW5kYXJkU2VyaWUodGltZXNlcmllX2luZm8sIHRpbWVzZXJpZV9vcHRpb25zLCBjb25maWcsIHRzQ29tcGFyZSkge1xuICAvKiBJdGVyYXRlIGFsbCB0aGUgdGltZXNlcmllcyBjdXJyZW50bHkgY29udGFpbmVkIGluc2lkZSB0aGUgc2luZ2xlIHRzOlxuICAgKiBlLmcuIGluIHRoZSBUcmFmZmljIHRpbWVzZXJpZXMgd2UgaGF2ZSB0aGUgQnl0ZXMgc2VudCBhbmQgQnl0ZXMgcmN2ZFxuICAgKi9cbiAgY29uc3Qgc2VyaWVzID0gdGltZXNlcmllX29wdGlvbnMuc2VyaWVzIHx8IFtdO1xuICBjb25zdCBjaGFydF90eXBlID0gdGltZXNlcmllX2luZm8ubWV0cmljLmNoYXJ0X3R5cGUgfHwgXCJmaWxsZWRcIjtcbiAgY29uc3QgZXBvY2hfYmVnaW4gPSB0aW1lc2VyaWVfb3B0aW9ucy5tZXRhZGF0YS5lcG9jaF9iZWdpbjtcbiAgY29uc3Qgc3RlcCA9IHRpbWVzZXJpZV9vcHRpb25zLm1ldGFkYXRhLmVwb2NoX3N0ZXA7XG4gIGNvbnN0IGZvcm1hdHRlciA9IHRpbWVzZXJpZV9pbmZvLm1ldHJpYy5tZWFzdXJlX3VuaXQ7XG4gIGNvbnN0IG1heF92YWx1ZSA9IHRpbWVzZXJpZV9pbmZvLm1ldHJpYy5tYXhfdmFsdWUgfHwgbnVsbDtcbiAgY29uc3QgbWluX3ZhbHVlID0gdGltZXNlcmllX2luZm8ubWV0cmljLm1pbl92YWx1ZSB8fCBudWxsO1xuICBjb25zdCBwYXN0X3NlcmllID0gdGltZXNlcmllX29wdGlvbnMuYWRkaXRpb25hbF9zZXJpZXM7XG5cbiAgY29uZmlnLnZhbHVlX3JhbmdlID0gW21pbl92YWx1ZSwgbWF4X3ZhbHVlXTtcbiAgY29uZmlnLnBsb3R0ZXIgPSBnZXRQbG90dGVyKGNoYXJ0X3R5cGUpO1xuICBpZiAoIWNvbmZpZy5zdGFja2VkKSB7XG4gICAgY29uZmlnLnN0YWNrZWQgPSB0aW1lc2VyaWVfaW5mby5tZXRyaWMuZHJhd19zdGFja2VkIHx8IGZhbHNlO1xuICB9XG5cbiAgc2VyaWVzLmZvckVhY2goKHRzX2luZm8sIGopID0+IHtcbiAgICBjb25zdCBzZXJpZSA9IHRzX2luZm8uZGF0YSB8fCBbXTsgLyogU2FmZXR5IGNoZWNrICovXG4gICAgY29uc3QgZXh0cmFfdGltZXNlcmllcyA9IHRpbWVzZXJpZV9pbmZvLnRpbWVzZXJpZXNbMF07IC8qIGUuZy4gdGhlIEF2ZXJhZ2UgKi9cbiAgICBjb25zdCB0c19pZCA9IGdldFNlcmllSWQodHNfaW5mbyk7XG4gICAgY29uc3QgbWV0YWRhdGEgPSB0aW1lc2VyaWVfaW5mby5tZXRyaWMudGltZXNlcmllc1t0c19pZF07XG4gICAgY29uc3Qgc2NhbGFyID0gKG1ldGFkYXRhLmludmVydF9kaXJlY3Rpb24gPT09IHRydWUpID8gLTEgOiAxO1xuICAgIGNvbnN0IHRpbWVzZXJpZV9uYW1lID0gZ2V0TmFtZSh0c19pbmZvLCBtZXRhZGF0YSlcbiAgICBjb25zdCBzZXJpZV9uYW1lID0gZ2V0U2VyaWVOYW1lKHRpbWVzZXJpZV9uYW1lLCB0c19pZCwgdGltZXNlcmllX2luZm8sIGNvbmZpZy51c2VfZnVsbF9uYW1lKVxuICAgIGNvbnN0IGF2Z19uYW1lID0gZ2V0U2VyaWVOYW1lKHRpbWVzZXJpZV9uYW1lICsgXCIgQXZnXCIsIHRzX2lkLCB0aW1lc2VyaWVfaW5mbywgY29uZmlnLnVzZV9mdWxsX25hbWUpXG4gICAgY29uc3QgcGVyY19uYW1lID0gZ2V0U2VyaWVOYW1lKHRpbWVzZXJpZV9uYW1lICsgXCIgOTV0aCBQZXJjXCIsIHRzX2lkLCB0aW1lc2VyaWVfaW5mbywgY29uZmlnLnVzZV9mdWxsX25hbWUpO1xuICAgIGNvbnN0IHBhc3RfbmFtZSA9IGdldFNlcmllTmFtZSh0aW1lc2VyaWVfbmFtZSArIFwiIFwiICsgdHNDb21wYXJlICsgXCIgQWdvXCIsIHRzX2lkLCB0aW1lc2VyaWVfaW5mbywgY29uZmlnLnVzZV9mdWxsX25hbWUpO1xuICAgIGNvbnN0IHBhc3RfdmFsdWUgPSAocGFzdF9zZXJpZSkgPyBwYXN0X3NlcmllW2Ake3RzQ29tcGFyZX1fYWdvYF0/LnNlcmllc1tqXT8uZGF0YSA6IG51bGw7XG4gICAgLyogQW4gb3B0aW9uIHVzZWQgdG8gbm90IGRpc3BsYXkgYSB0aW1lc2VyaWUgKi9cbiAgICBpZiAobWV0YWRhdGEuaGlkZGVuKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLyogU2VhcmNoIGZvciB0aGUgZm9ybWF0dGVyIGluIHRoZSBhcnJheSwgaWYgbm90IGZvdW5kLCBhZGQgaXQuICovXG4gICAgY29uc3QgZm9ybWF0dGVyX2ZvdW5kID0gY29uZmlnLmZvcm1hdHRlcnMuZmluZChlbCA9PiBlbCA9PSBmb3JtYXR0ZXIpO1xuICAgIGlmICghZm9ybWF0dGVyX2ZvdW5kKVxuICAgICAgY29uZmlnLmZvcm1hdHRlcnMucHVzaChmb3JtYXR0ZXIpO1xuXG4gICAgLyogQWRkIHRoZSBzZXJpZSAqL1xuICAgIGFkZE5ld1NlcmllKHNlcmllX25hbWUsIGNoYXJ0X3R5cGUsIHsgY29sb3I6IG1ldGFkYXRhLmNvbG9yLCBwYWxldHRlOiAwIH0sIGNvbmZpZylcblxuICAgIC8qIEFkZGluZyB0aGUgZXh0cmEgdGltZXNlcmllcywgMzBtIGFnbywgYXZnIGFuZCA5NXRoICovXG4gICAgaWYgKGV4dHJhX3RpbWVzZXJpZXM/LmF2ZyA9PSB0cnVlKSB7XG4gICAgICBhZGROZXdTZXJpZShhdmdfbmFtZSwgXCJwb2ludFwiLCB7IGNvbG9yOiBjb25zdGFudF9zZXJpZV9jb2xvcnNbXCJhdmdcIl0sIHBhbGV0dGU6IDEgfSwgY29uZmlnKVxuICAgIH1cbiAgICBpZiAoZXh0cmFfdGltZXNlcmllcz8ucGVyY185NSA9PSB0cnVlKSB7XG4gICAgICBhZGROZXdTZXJpZShwZXJjX25hbWUsIFwicG9pbnRcIiwgeyBjb2xvcjogY29uc3RhbnRfc2VyaWVfY29sb3JzW1wicGVyY185NVwiXSwgcGFsZXR0ZTogMSB9LCBjb25maWcpXG4gICAgfVxuICAgIGlmIChleHRyYV90aW1lc2VyaWVzPy5wYXN0ID09IHRydWUpIHtcbiAgICAgIGFkZE5ld1NlcmllKHBhc3RfbmFtZSwgXCJkYXNoXCIsIHsgY29sb3I6IGNvbnN0YW50X3NlcmllX2NvbG9yc1tcInBhc3RcIl0sIHBhbGV0dGU6IDEgfSwgY29uZmlnKVxuICAgIH1cblxuICAgIC8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbiAgICBjb21wYWN0U2VyaWUoY29uZmlnLCB0c19pbmZvLCBleHRyYV90aW1lc2VyaWVzLCBzZXJpZSwgcGFzdF92YWx1ZSwgc2NhbGFyLCBzdGVwLCBlcG9jaF9iZWdpbiwge1xuICAgICAgc2VyaWVfbmFtZTogc2VyaWVfbmFtZSxcbiAgICAgIGF2Z19uYW1lOiBhdmdfbmFtZSxcbiAgICAgIHBlcmNfbmFtZTogcGVyY19uYW1lLFxuICAgICAgcGFzdF9uYW1lOiBwYXN0X25hbWVcbiAgICB9KTtcbiAgfSlcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogVGhpcyBmdW5jdGlvbiBmaW5hbGx5IGZvcm1hdCB0aGUgdGltZXNlcmllcyBhbmQgY29tcGFjdCBpdCB0b2doZXRlciAqL1xuZnVuY3Rpb24gZm9ybWF0RnVsbFNlcmllKGNvbmZpZykge1xuICBjb25zdCBmdWxsX3NlcmllID0gW107XG4gIGNvbnN0IHNlcmllX2tleXMgPSBPYmplY3Qua2V5cyhjb25maWcuc2VyaWUpO1xuXG4gIC8qIEl0ZXJhdGUgdGhlIHNlcmllIGFuZCBmb3IgZWFjaCBsYWJlbCwgZ2V0IHRoZSB2YWx1ZSBhbmQgc2V0IHRvIG51bGwgaW4gY2FzZSBpdCBkb2VzIG5vdCBleGlzdHMgKi9cbiAgc2VyaWVfa2V5cy5mb3JFYWNoKChrZXksIGluZGV4KSA9PiB7XG4gICAgZnVsbF9zZXJpZVtpbmRleF0gPSBbXTtcbiAgICBjb25maWcubGFiZWxzLmZvckVhY2goKGxhYmVsKSA9PiB7XG4gICAgICBsZXQgZm91bmQgPSBmYWxzZTtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgY29uZmlnLnNlcmllW2tleV0ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKGNvbmZpZy5zZXJpZVtrZXldW2pdLm5hbWUgPT0gbGFiZWwpIHtcbiAgICAgICAgICBmdWxsX3NlcmllW2luZGV4XS5wdXNoKGNvbmZpZy5zZXJpZVtrZXldW2pdLnZhbHVlKTtcbiAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyogUHVzaCBudWxsIGlmIG5vIHZhbHVlIGlzIGZvdW5kICovXG4gICAgICBpZiAoZm91bmQgPT0gZmFsc2UpIHtcbiAgICAgICAgZnVsbF9zZXJpZVtpbmRleF0ucHVzaChudWxsKTtcbiAgICAgIH1cbiAgICB9KVxuICB9KTtcbiAgY29uZmlnLnNlcmllID0gZnVsbF9zZXJpZTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuZnVuY3Rpb24gZm9ybWF0U2luZ2xlU2VyaWUodGltZXNlcmllX2luZm8sIHRpbWVzZXJpZV9vcHRpb25zLCB0c0NvbXBhcmUsIGNvbmZpZykge1xuICBpZiAodGltZXNlcmllX2luZm8uc291cmNlX3R5cGUuZl9tYXBfdHNfb3B0aW9ucyAhPSBudWxsKSB7XG4gICAgY29uc3QgZl9tYXBfdHNfb3B0aW9ucyA9IHRpbWVzZXJpZV9pbmZvLnNvdXJjZV90eXBlLmZfbWFwX3RzX29wdGlvbnM7XG4gICAgdGltZXNlcmllX29wdGlvbnMgPSBmX21hcF90c19vcHRpb25zKHRpbWVzZXJpZV9vcHRpb25zLCB0aW1lc2VyaWVfaW5mbyk7XG4gIH1cblxuICAvKiBGb3JtYXQgdGhlIGRhdGEgKi9cblxuICAvKiB0aGUgZGF0YSBpbiBEeWdyYXBocyBzaG91bGQgYmUgZm9ybWF0dGVkIGFzIGZvbGxvdzpcbiAgICogeyBbIHRpbWVfMSwgc2VyaWUxXzEsIHNlcmllMl8xIF0sIFsgdGltZV8yLCBzZXJpZTFfMiwgc2VyaWUyXzIgXSB9IFxuICAgKi9cbiAgY29uc3QgYm91bmRzID0gdGltZXNlcmllX2luZm8ubWV0cmljLmJvdW5kcyB8fCBmYWxzZTtcblxuICAvKiBUaGUgc2VyaWUgY2FuIHBvc3NpYmx5IGhhdmUgbXVsdGlwbGUgdGltZXNlcmllcywgbGlrZSBmb3IgdGhlIFxuICAgKiBieXRlcywgd2UgaGF2ZSBzZW50IGFuZCByY3ZkLCBzbyBjb21wYWN0IHRoZW0gXG4gICAqL1xuICBpZiAoYm91bmRzID09IHRydWUpIHtcbiAgICBmb3JtYXRCb3VuZHNTZXJpZSh0aW1lc2VyaWVfaW5mbywgdGltZXNlcmllX29wdGlvbnMsIGNvbmZpZyk7XG4gIH0gZWxzZSB7XG4gICAgZm9ybWF0U3RhbmRhcmRTZXJpZSh0aW1lc2VyaWVfaW5mbywgdGltZXNlcmllX29wdGlvbnMsIGNvbmZpZywgdHNDb21wYXJlKTtcbiAgfVxufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5mdW5jdGlvbiBmb3JtYXRTaW1wbGVTZXJpZShkYXRhLCBzZXJpZV9uYW1lLCBjaGFydF90eXBlLCBmb3JtYXR0ZXJzLCB2YWx1ZV9yYW5nZSkge1xuICBsZXQgY291bnRlciA9IDE7XG4gIGNvbnN0IHRtcF9zZXJpZSA9IFtdO1xuICBkYXRhLnNlcmllLmZvckVhY2goKHZhbHVlKSA9PiB7XG4gICAgdG1wX3NlcmllLnB1c2goW2NvdW50ZXIsIHZhbHVlXSk7XG4gICAgY291bnRlcisrO1xuICB9KTtcblxuICAvKiBUbyBub3QgaGF2ZSBhbiBlcnJvciwganVzdCBhZGQgYSBudWxsIHZhbHVlICovXG4gIGlmKHRtcF9zZXJpZS5sZW5ndGggPT0gMCkge1xuICAgIHRtcF9zZXJpZS5wdXNoKFsxLCBudWxsXSk7XG4gIH1cblxuICBjb25zdCBjb25maWcgPSB7XG4gICAgc2VyaWU6IHRtcF9zZXJpZSxcbiAgICBmb3JtYXR0ZXJzOiBmb3JtYXR0ZXJzLFxuICAgIGxhYmVsczogW1wiaW5kZXhcIl0sXG4gICAgY29sb3JzOiBbXSxcbiAgICBwcm9wZXJ0aWVzOiBkeWdyYXBoQ29uZmlnLmZvcm1hdFNlcmllUHJvcGVydGllcyhjaGFydF90eXBlKSxcbiAgICBzdGFja2VkOiBmYWxzZSxcbiAgICBjdXN0b21CYXJzOiBmYWxzZSxcbiAgICB1c2VfZnVsbF9uYW1lOiBmYWxzZSxcbiAgICBwbG90dGVyOiBnZXRQbG90dGVyKGNoYXJ0X3R5cGUpLFxuICAgIHZhbHVlX3JhbmdlOiB2YWx1ZV9yYW5nZSxcbiAgICBkaXNhYmxlX3RzX2xpc3Q6IHRydWUsXG4gIH07XG5cbiAgYWRkTmV3U2VyaWUoc2VyaWVfbmFtZSwgY2hhcnRfdHlwZSwgeyBjb2xvcjogY29uc3RhbnRfc2VyaWVfY29sb3JzW1wiZGVmYXVsdF9jb2xvclwiXSwgcGFsZXR0ZTogMCB9LCBjb25maWcpXG4gIGZvcm1hdFNlcmllQ29sb3JzKGNvbmZpZy5jb2xvcnMpO1xuICByZXR1cm4gZHlncmFwaENvbmZpZy5idWlsZENoYXJ0T3B0aW9ucyhjb25maWcpO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5mdW5jdGlvbiBmb3JtYXRTZXJpZSh0c09wdGlvbnNBcnJheSwgdHNHcm91cHNBcnJheSwgdHNDb21wYXJlLCB1c2VGdWxsTmFtZSkge1xuICBjb25zdCBjb25maWcgPSB7XG4gICAgc2VyaWU6IFtdLFxuICAgIGZvcm1hdHRlcnM6IFtdLFxuICAgIGxhYmVsczogW1wiVGltZVwiXSxcbiAgICBjb2xvcnM6IFtdLFxuICAgIHByb3BlcnRpZXM6IFtdLFxuICAgIHN0YWNrZWQ6IGZhbHNlLFxuICAgIGN1c3RvbUJhcnM6IGZhbHNlLFxuICAgIHVzZV9mdWxsX25hbWU6ICh1c2VGdWxsTmFtZSAhPSBudWxsKSA/IHVzZUZ1bGxOYW1lIDogZmFsc2VcbiAgfTtcblxuICAvKiBHbyB0aHJvdWdodCBlYWNoIHNlcmllICovXG4gIHRzT3B0aW9uc0FycmF5LmZvckVhY2goKHRzT3B0aW9ucywgaSkgPT4ge1xuICAgIGZvcm1hdFNpbmdsZVNlcmllKHRzR3JvdXBzQXJyYXlbaV0sIHRzT3B0aW9ucywgdHNDb21wYXJlLCBjb25maWcpO1xuICB9KTtcblxuICAvKiBOZWVkIHRvIGZpbmFsbHkgZm9ybWF0IHRoZSBzZXJpZSBhcyByZXF1ZXN0ZWQgYnkgRHlncmFwaCwgd2l0aFxuICAgICBOVUxMIGFzIHZhbHVlIGluIGNhc2UgdGhlIHNlcmllIGhhcyBOT1QgVEhBVCBQT0lOVCAoZS5nLiB3aXRoIGEgNSBtaW51dGVzIGZyZXF1ZW5jeSwgdGhlIHVzZXJcbiAgICAgIGlzIGNvbmZyb250aW5nIGEgY2hhcnQgd2l0aCAxIG1pbnV0ZSBmcmVxdWVuY3ksIHRoZXJlIGFyZSA0IG1pbnV0ZXMgd2l0aCBubyBleGlzdGluZyBwb2ludHMpXG4gICAqL1xuICBmb3JtYXRGdWxsU2VyaWUoY29uZmlnKTtcbiAgZm9ybWF0U2VyaWVDb2xvcnMoY29uZmlnLmNvbG9ycyk7XG4gIHJldHVybiBkeWdyYXBoQ29uZmlnLmJ1aWxkQ2hhcnRPcHRpb25zKGNvbmZpZyk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmNvbnN0IGR5Z3JhcGhGb3JtYXQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7XG4gICAgZm9ybWF0U2VyaWUsXG4gICAgZm9ybWF0U2ltcGxlU2VyaWUsXG4gICAgZ2V0U2VyaWVJZCxcbiAgICBnZXRTZXJpZU5hbWUsXG4gIH07XG59KCk7XG5cbmV4cG9ydCBkZWZhdWx0IGR5Z3JhcGhGb3JtYXQ7IiwiLyoqXG5cdFx0KEMpIDIwMjIgLSBudG9wLm9yZ1xuKi9cblxuaW1wb3J0ICcuL2dyYXBoL2R5Z3JhcGgtZXh0ZW5zaW9uLmpzJztcbmltcG9ydCBkeWdyYXBoRm9ybWF0IGZyb20gXCIuL2dyYXBoL2R5Z3JhcGgtZm9ybWF0LmpzXCI7XG5pbXBvcnQgeyBudG9wbmdfdXRpbGl0eSwgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMuanNcIjtcblxuZnVuY3Rpb24gZ2V0U2VyaWVJZChzZXJpZSkge1xuXHRyZXR1cm4gZHlncmFwaEZvcm1hdC5nZXRTZXJpZUlkKHNlcmllKTtcbn1cblxuZnVuY3Rpb24gZ2V0U2VyaWVOYW1lKG5hbWUsIGlkLCB0c0dyb3VwLCB1c2VGdWxsTmFtZSkge1xuXHRyZXR1cm4gZHlncmFwaEZvcm1hdC5nZXRTZXJpZU5hbWUobmFtZSwgaWQsIHRzR3JvdXAsIHVzZUZ1bGxOYW1lKTtcbn1cblxuZnVuY3Rpb24gZ2V0WWF4aXNJZChtZXRyaWMpIHtcblx0cmV0dXJuIGAke21ldHJpYy5tZWFzdXJlX3VuaXR9XyR7bWV0cmljLnNjYWxlfWA7XG59XG5cbmNvbnN0IGdyb3Vwc09wdGlvbnNNb2Rlc0VudW0gPSB7XG5cdCcxX2NoYXJ0X3hfbWV0cmljJzogeyB2YWx1ZTogXCIxX2NoYXJ0X3hfbWV0cmljXCIsIGxhYmVsOiBpMThuKCdwYWdlX3N0YXRzLmxheW91dF8xX3Blcl8xJykgfSxcblx0JzFfY2hhcnRfeF95YXhpcyc6IHsgdmFsdWU6IFwiMV9jaGFydF94X3lheGlzXCIsIGxhYmVsOiBpMThuKCdwYWdlX3N0YXRzLmxheW91dF8xX3Blcl95JykgfSxcbn1cblxuZnVuY3Rpb24gZ2V0R3JvdXBPcHRpb25Nb2RlKGdyb3VwX2lkKSB7XG5cdHJldHVybiBncm91cHNPcHRpb25zTW9kZXNFbnVtW2dyb3VwX2lkXSB8fCBudWxsO1xufTtcblxuLyogVGhpcyBmdW5jdGlvbiBpcyBnb2luZyB0byB0cmFuc2xhdGUgdGhlIHJlc3BvbnNlIHNlbnQgZnJvbSB0aGUgc2VydmVyIHRvIHRoZSBmb3JtYXR0ZWQgZGF0YSBuZWVkZWQgZnJvbSB0aGUgY2hhcnQgbGlicmFyeSAqL1xuZnVuY3Rpb24gdHNBcnJheVRvT3B0aW9uc0FycmF5KHRzT3B0aW9uc0FycmF5LCB0c0dyb3Vwc0FycmF5LCBncm91cHNPcHRpb25zTW9kZSwgdHNDb21wYXJlKSB7XG5cdC8qIE9uZSBjaGFydCBwZXIgbWV0cmljIHJlcXVlc3RlZCAqL1xuXHRpZiAoZ3JvdXBzT3B0aW9uc01vZGUudmFsdWUgPT0gZ3JvdXBzT3B0aW9uc01vZGVzRW51bVtcIjFfY2hhcnRfeF9tZXRyaWNcIl0udmFsdWUpIHtcblx0XHRyZXR1cm4gdHNBcnJheVRvT3B0aW9uc0FycmF5UmF3KHRzT3B0aW9uc0FycmF5LCB0c0dyb3Vwc0FycmF5LCBncm91cHNPcHRpb25zTW9kZSwgdHNDb21wYXJlKTtcblx0fVxuXHRsZXQgc3BsaXR0ZWRUc0FycmF5ID0gc3BsaXRUc0FycmF5U3RhY2tlZCh0c09wdGlvbnNBcnJheSwgdHNHcm91cHNBcnJheSk7XG5cdGxldCBEeWdyYXBoT3B0aW9uc1N0YWNrZWQgPSB0c0FycmF5VG9PcHRpb25zQXJyYXlSYXcoc3BsaXR0ZWRUc0FycmF5LnN0YWNrZWQudHNPcHRpb25zQXJyYXksIHNwbGl0dGVkVHNBcnJheS5zdGFja2VkLnRzR3JvdXBzQXJyYXksIGdyb3Vwc09wdGlvbnNNb2RlLCB0c0NvbXBhcmUpO1xuXHRsZXQgRHlncmFwaE9wdGlvbnNOb3RTdGFja2VkID0gdHNBcnJheVRvT3B0aW9uc0FycmF5UmF3KHNwbGl0dGVkVHNBcnJheS5ub3Rfc3RhY2tlZC50c09wdGlvbnNBcnJheSwgc3BsaXR0ZWRUc0FycmF5Lm5vdF9zdGFja2VkLnRzR3JvdXBzQXJyYXksIGdyb3Vwc09wdGlvbnNNb2RlLCB0c0NvbXBhcmUpO1xuXHQvL2NvbnNvbGUubG9nKFsuLi5EeWdyYXBoT3B0aW9uc1N0YWNrZWQsIC4uLkR5Z3JhcGhPcHRpb25zTm90U3RhY2tlZF0pXG5cdHJldHVybiBbLi4uRHlncmFwaE9wdGlvbnNTdGFja2VkLCAuLi5EeWdyYXBoT3B0aW9uc05vdFN0YWNrZWRdO1xufVxuXG5mdW5jdGlvbiBzcGxpdFRzQXJyYXlTdGFja2VkKHRzT3B0aW9uc0FycmF5LCB0c0dyb3Vwc0FycmF5KSB7XG5cdGxldCB0c09wdGlvbnNBcnJheVN0YWNrZWQgPSBbXTtcblx0bGV0IHRzR3JvdXBzQXJyYXlTdGFja2VkID0gW107XG5cdGxldCB0c09wdGlvbnNBcnJheU5vdFN0YWNrZWQgPSBbXTtcblx0bGV0IHRzR3JvdXBzQXJyYXlOb3RTdGFja2VkID0gW107XG5cdHRzR3JvdXBzQXJyYXkuZm9yRWFjaCgodHNHcm91cCwgaSkgPT4ge1xuXHRcdGlmICh0c0dyb3VwLm1ldHJpYy5kcmF3X3N0YWNrZWQgPT0gdHJ1ZSkge1xuXHRcdFx0dHNPcHRpb25zQXJyYXlTdGFja2VkLnB1c2godHNPcHRpb25zQXJyYXlbaV0pO1xuXHRcdFx0dHNHcm91cHNBcnJheVN0YWNrZWQucHVzaCh0c0dyb3VwKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dHNPcHRpb25zQXJyYXlOb3RTdGFja2VkLnB1c2godHNPcHRpb25zQXJyYXlbaV0pO1xuXHRcdFx0dHNHcm91cHNBcnJheU5vdFN0YWNrZWQucHVzaCh0c0dyb3VwKTtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4ge1xuXHRcdHN0YWNrZWQ6IHtcblx0XHRcdHRzT3B0aW9uc0FycmF5OiB0c09wdGlvbnNBcnJheVN0YWNrZWQsXG5cdFx0XHR0c0dyb3Vwc0FycmF5OiB0c0dyb3Vwc0FycmF5U3RhY2tlZCxcblx0XHR9LFxuXHRcdG5vdF9zdGFja2VkOiB7XG5cdFx0XHR0c09wdGlvbnNBcnJheTogdHNPcHRpb25zQXJyYXlOb3RTdGFja2VkLFxuXHRcdFx0dHNHcm91cHNBcnJheTogdHNHcm91cHNBcnJheU5vdFN0YWNrZWQsXG5cdFx0fSxcblx0fTtcbn1cblxuZnVuY3Rpb24gdHNBcnJheVRvT3B0aW9uc0FycmF5UmF3KHRzT3B0aW9uc0FycmF5LCB0c0dyb3Vwc0FycmF5LCBncm91cHNPcHRpb25zTW9kZSwgdHNDb21wYXJlKSB7XG5cdGxldCB1c2VGdWxsTmFtZSA9IGZhbHNlO1xuXHRpZiAoZ3JvdXBzT3B0aW9uc01vZGUudmFsdWUgPT0gZ3JvdXBzT3B0aW9uc01vZGVzRW51bVtcIjFfY2hhcnRfeF95YXhpc1wiXS52YWx1ZSkge1xuXHRcdGxldCB0c0RpY3QgPSB7fTtcblx0XHR0c0dyb3Vwc0FycmF5LmZvckVhY2goKHRzR3JvdXAsIGkpID0+IHtcblx0XHRcdGxldCB5YXhpc0lkID0gZ2V0WWF4aXNJZCh0c0dyb3VwLm1ldHJpYyk7XG5cdFx0XHRsZXQgdHNFbCA9IHsgdHNHcm91cCwgdHNPcHRpb25zOiB0c09wdGlvbnNBcnJheVtpXSB9O1xuXHRcdFx0aWYgKHRzRGljdFt5YXhpc0lkXSA9PSBudWxsKSB7XG5cdFx0XHRcdHRzRGljdFt5YXhpc0lkXSA9IFt0c0VsXTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRzRGljdFt5YXhpc0lkXS5wdXNoKHRzRWwpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHVzZUZ1bGxOYW1lID0gdHNHcm91cHNBcnJheS5sZW5ndGggPiAxIHx8ICh0c0dyb3Vwc0FycmF5Lmxlbmd0aCA+IDBcblx0XHRcdCYmIHRzR3JvdXBzQXJyYXlbMF0uc291cmNlX3R5cGUuZGlzcGxheV9mdWxsX25hbWUgPT09IHRydWUpO1xuXHRcdGxldCBEeWdyYXBoT3B0aW9uc0FycmF5ID0gW107XG5cdFx0Zm9yIChsZXQga2V5IGluIHRzRGljdCkge1xuXHRcdFx0bGV0IHRzQXJyYXkgPSB0c0RpY3Rba2V5XTtcblx0XHRcdGxldCB0c09wdGlvbnNBcnJheTIgPSB0c0FycmF5Lm1hcCgodHMpID0+IHRzLnRzT3B0aW9ucyk7XG5cdFx0XHRsZXQgdHNHcm91cHNBcnJheTIgPSB0c0FycmF5Lm1hcCgodHMpID0+IHRzLnRzR3JvdXApO1xuXHRcdFx0bGV0IER5Z3JhcGhPcHRpb25zID0gdHNBcnJheVRvT3B0aW9ucyh0c09wdGlvbnNBcnJheTIsIHRzR3JvdXBzQXJyYXkyLCB0c0NvbXBhcmUsIHVzZUZ1bGxOYW1lKTtcblx0XHRcdER5Z3JhcGhPcHRpb25zQXJyYXkucHVzaChEeWdyYXBoT3B0aW9ucyk7XG5cdFx0fVxuXHRcdHJldHVybiBEeWdyYXBoT3B0aW9uc0FycmF5O1xuXHR9IGVsc2UgaWYgKGdyb3Vwc09wdGlvbnNNb2RlLnZhbHVlID09IGdyb3Vwc09wdGlvbnNNb2Rlc0VudW1bXCIxX2NoYXJ0X3hfbWV0cmljXCJdLnZhbHVlKSB7XG5cdFx0dXNlRnVsbE5hbWUgPSB0c09wdGlvbnNBcnJheS5sZW5ndGggPiAxIHx8ICh0c0dyb3Vwc0FycmF5Lmxlbmd0aCA+IDBcblx0XHRcdCYmIHRzR3JvdXBzQXJyYXlbMF0uc291cmNlX3R5cGUuZGlzcGxheV9mdWxsX25hbWUgPT09IHRydWUpO1xuXHRcdGxldCBvcHRpb25zQXJyYXkgPSBbXTtcblx0XHR0c09wdGlvbnNBcnJheS5mb3JFYWNoKCh0c09wdGlvbnMsIGkpID0+IHtcblx0XHRcdGxldCBvcHRpb25zID0gdHNBcnJheVRvT3B0aW9ucyhbdHNPcHRpb25zXSwgW3RzR3JvdXBzQXJyYXlbaV1dLCB0c0NvbXBhcmUsIHVzZUZ1bGxOYW1lKTtcblx0XHRcdG9wdGlvbnNBcnJheS5wdXNoKG9wdGlvbnMpO1xuXHRcdH0pO1xuXHRcdHJldHVybiBvcHRpb25zQXJyYXk7XG5cdH1cblx0cmV0dXJuIFtdO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gZm9ybWF0IGEgc2ltcGxlIHRpbWVzZXJpZXMgZ2l2ZW4gYW4gYXJyYXkgXG4gKi9cbmZ1bmN0aW9uIGZvcm1hdFNpbXBsZVNlcmllKGRhdGEsIHNlcmllX25hbWUsIGNoYXJ0X3R5cGUsIGZvcm1hdHRlcnMsIHZhbHVlX3JhbmdlKSB7XG5cdHJldHVybiBkeWdyYXBoRm9ybWF0LmZvcm1hdFNpbXBsZVNlcmllKGRhdGEsIHNlcmllX25hbWUsIGNoYXJ0X3R5cGUsIGZvcm1hdHRlcnMsIHZhbHVlX3JhbmdlKTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogR2l2ZW4gYW4gYXJyYXkgb2YgdGltZXNlcmllcywgaXQgY29tcGFjdHMgdGhlbSBpbnRvIGEgc2luZ2xlIGFycmF5IFxuICogYW5kIHJldHVybiB0aGUgY29uZmlndXJhdGlvbiBmb3IgdGhlIHRpbWVzZXJpZSB3aXRoIHRoZSBkYXRhIFxuICovXG5mdW5jdGlvbiB0c0FycmF5VG9PcHRpb25zKHRzT3B0aW9uc0FycmF5LCB0c0dyb3Vwc0FycmF5LCB0c0NvbXBhcmUsIHVzZUZ1bGxOYW1lKSB7XG5cdHJldHVybiBkeWdyYXBoRm9ybWF0LmZvcm1hdFNlcmllKHRzT3B0aW9uc0FycmF5LCB0c0dyb3Vwc0FycmF5LCB0c0NvbXBhcmUsIHVzZUZ1bGxOYW1lKTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuZnVuY3Rpb24gZ2V0VHNRdWVyeSh0c0dyb3VwLCBub3RfbWV0cmljX3F1ZXJ5LCBlbmFibGVfc291cmNlX2RlZl92YWx1ZV9kaWN0KSB7XG5cdGxldCB0c1F1ZXJ5ID0gdHNHcm91cC5zb3VyY2VfdHlwZS5zb3VyY2VfZGVmX2FycmF5Lm1hcCgoc291cmNlX2RlZiwgaSkgPT4ge1xuXHRcdGlmIChlbmFibGVfc291cmNlX2RlZl92YWx1ZV9kaWN0ICE9IG51bGwgJiYgIWVuYWJsZV9zb3VyY2VfZGVmX3ZhbHVlX2RpY3Rbc291cmNlX2RlZi52YWx1ZV0pIHsgcmV0dXJuIG51bGw7IH1cblx0XHRsZXQgc291cmNlX3ZhbHVlID0gdHNHcm91cC5zb3VyY2VfYXJyYXlbaV0udmFsdWU7XG5cdFx0cmV0dXJuIGAke3NvdXJjZV9kZWYudmFsdWV9OiR7c291cmNlX3ZhbHVlfWA7XG5cdH0pLmZpbHRlcigocykgPT4gcyAhPSBudWxsKS5qb2luKFwiLFwiKTtcblxuXHRpZiAoIW5vdF9tZXRyaWNfcXVlcnkgJiYgdHNHcm91cC5tZXRyaWMucXVlcnkgIT0gbnVsbCkge1xuXHRcdHRzUXVlcnkgPSBgJHt0c1F1ZXJ5fSwke3RzR3JvdXAubWV0cmljLnF1ZXJ5fWBcblx0fVxuXHRyZXR1cm4gdHNRdWVyeTtcbn1cblxuZnVuY3Rpb24gZ2V0TWFpblNvdXJjZURlZkluZGV4KHRzR3JvdXApIHtcblx0bGV0IHNvdXJjZV9kZWZfYXJyYXkgPSB0c0dyb3VwLnNvdXJjZV90eXBlLnNvdXJjZV9kZWZfYXJyYXk7XG5cdGZvciAobGV0IGkgPSAwOyBpIDwgc291cmNlX2RlZl9hcnJheS5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdGxldCBzb3VyY2VfZGVmID0gc291cmNlX2RlZl9hcnJheVtpXTtcblx0XHRpZiAoc291cmNlX2RlZi5tYWluX3NvdXJjZV9kZWYgPT0gdHJ1ZSkgeyByZXR1cm4gaTsgfVxuXHR9XG5cdHJldHVybiAwO1xuXG59XG5cbmZ1bmN0aW9uIGdldFRzQ2hhcnRzRGF0YVVybChodHRwUHJlZml4LCBlcG9jaFN0YXR1cywgdHNDb21wYXJlLCB0aW1lc2VyaWVzR3JvdXBzLCBpc1Bybykge1xuXHRsZXQgcGFyYW1zRXBvY2hPYmogPSB7IGVwb2NoX2JlZ2luOiBlcG9jaFN0YXR1cy5lcG9jaF9iZWdpbiwgZXBvY2hfZW5kOiBlcG9jaFN0YXR1cy5lcG9jaF9lbmQgfTtcblx0bGV0IHVybF9hbmRfYm9keSA9IHt9O1xuXHRpZiAoIWlzUHJvKSB7XG5cdFx0bGV0IHRzRGF0YVVybCA9IGAke2h0dHBQcmVmaXh9L2x1YS9yZXN0L3YyL2dldC90aW1lc2VyaWVzL3RzLmx1YWA7XG5cdFx0bGV0IHBhcmFtc1VybFJlcXVlc3QgPSBgdHNfY29tcGFyZT0ke3RzQ29tcGFyZX0mdmVyc2lvbj00Jnpvb209JHt0c0NvbXBhcmV9JmxpbWl0PTE4MGA7XG5cdFx0bGV0IHRzR3JvdXAgPSB0aW1lc2VyaWVzR3JvdXBzWzBdO1xuXHRcdGxldCBtYWluX3NvdXJjZV9pbmRleCA9IGdldE1haW5Tb3VyY2VEZWZJbmRleCh0c0dyb3VwKTtcblx0XHRsZXQgdHNRdWVyeSA9IGdldFRzUXVlcnkodHNHcm91cCk7XG5cdFx0bGV0IHBPYmogPSB7XG5cdFx0XHQuLi5wYXJhbXNFcG9jaE9iaixcblx0XHRcdHRzX3F1ZXJ5OiB0c1F1ZXJ5LFxuXHRcdFx0dHNfc2NoZW1hOiBgJHt0c0dyb3VwLm1ldHJpYy5zY2hlbWF9YCxcblx0XHR9O1xuXHRcdGlmICghdHNHcm91cC5zb3VyY2VfdHlwZS5zb3VyY2VfZGVmX2FycmF5W21haW5fc291cmNlX2luZGV4XS5kaXNhYmxlX3Rza2V5KSB7XG5cdFx0XHRwT2JqLnRza2V5ID0gdHNHcm91cC5zb3VyY2VfYXJyYXlbbWFpbl9zb3VyY2VfaW5kZXhdLnZhbHVlO1xuXHRcdH1cblx0XHRsZXQgcFVybFJlcXVlc3QgPSBudG9wbmdfdXJsX21hbmFnZXIuYWRkX29ial90b191cmwocE9iaiwgcGFyYW1zVXJsUmVxdWVzdCk7XG5cdFx0dXJsX2FuZF9ib2R5LnVybCA9IGAke3RzRGF0YVVybH0/JHtwVXJsUmVxdWVzdH1gO1xuXHR9IGVsc2Uge1xuXHRcdGxldCBwYXJhbXNDaGFydCA9IHtcblx0XHRcdHpvb206IHRzQ29tcGFyZSxcblx0XHRcdGxpbWl0OiAxODAsXG5cdFx0XHR2ZXJzaW9uOiA0LFxuXHRcdFx0dHNfY29tcGFyZTogdHNDb21wYXJlLFxuXHRcdH07XG5cblx0XHRsZXQgdHNSZXF1ZXN0cyA9IHRpbWVzZXJpZXNHcm91cHMubWFwKCh0c0dyb3VwKSA9PiB7XG5cdFx0XHRsZXQgbWFpbl9zb3VyY2VfaW5kZXggPSBnZXRNYWluU291cmNlRGVmSW5kZXgodHNHcm91cCk7XG5cdFx0XHRsZXQgdHNRdWVyeSA9IGdldFRzUXVlcnkodHNHcm91cCk7XG5cdFx0XHRsZXQgcE9iaiA9IHtcblx0XHRcdFx0dHNfcXVlcnk6IHRzUXVlcnksXG5cdFx0XHRcdHRzX3NjaGVtYTogYCR7dHNHcm91cC5tZXRyaWMuc2NoZW1hfWAsXG5cdFx0XHR9O1xuXHRcdFx0aWYgKCF0c0dyb3VwLnNvdXJjZV90eXBlLnNvdXJjZV9kZWZfYXJyYXlbbWFpbl9zb3VyY2VfaW5kZXhdLmRpc2FibGVfdHNrZXkpIHtcblx0XHRcdFx0cE9iai50c2tleSA9IHRzR3JvdXAuc291cmNlX2FycmF5W21haW5fc291cmNlX2luZGV4XS52YWx1ZTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBwT2JqO1xuXHRcdH0pO1x0XHRcdFxuXHRcdHVybF9hbmRfYm9keS51cmwgPSBgJHtodHRwUHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L3RpbWVzZXJpZXMvdHNfbXVsdGkubHVhYDtcblx0XHR1cmxfYW5kX2JvZHkuYm9keSA9IHsgdHNfcmVxdWVzdHM6IHRzUmVxdWVzdHMsIC4uLnBhcmFtc0Vwb2NoT2JqLCAuLi5wYXJhbXNDaGFydCB9O1xuXHR9XG5cblx0cmV0dXJuIHVybF9hbmRfYm9keTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0VHNDaGFydHNPcHRpb25zKGh0dHBQcmVmaXgsIGVwb2NoU3RhdHVzLCB0c0NvbXBhcmUsIHRpbWVzZXJpZXNHcm91cHMsIGlzUHJvKSB7XG5cblx0bGV0IHRzQ2hhcnRzT3B0aW9ucztcblx0Y29uc3QgdXJsX2FuZF9ib2R5ID0gZ2V0VHNDaGFydHNEYXRhVXJsKGh0dHBQcmVmaXgsIGVwb2NoU3RhdHVzLCB0c0NvbXBhcmUsIHRpbWVzZXJpZXNHcm91cHMsIGlzUHJvKVxuXG5cdGlmICghaXNQcm8pIHtcblx0XHRsZXQgdHNDaGFydE9wdGlvbiA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmxfYW5kX2JvZHkudXJsKTtcblx0XHR0c0NoYXJ0c09wdGlvbnMgPSBbdHNDaGFydE9wdGlvbl07XG5cdH0gZWxzZSB7XG5cdFx0bGV0IGhlYWRlcnMgPSB7XG5cdFx0XHQnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG5cdFx0fTtcblx0XHR0c0NoYXJ0c09wdGlvbnMgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsX2FuZF9ib2R5LnVybCwgeyBtZXRob2Q6ICdwb3N0JywgaGVhZGVycywgYm9keTogSlNPTi5zdHJpbmdpZnkodXJsX2FuZF9ib2R5LmJvZHkpIH0pO1xuXHR9XG5cdHJldHVybiB0c0NoYXJ0c09wdGlvbnM7XG59XG5cbmNvbnN0IHRpbWVzZXJpZXNVdGlscyA9IGZ1bmN0aW9uICgpIHtcblx0cmV0dXJuIHtcblx0XHRncm91cHNPcHRpb25zTW9kZXNFbnVtLFxuXHRcdHRzQXJyYXlUb09wdGlvbnMsXG5cdFx0Zm9ybWF0U2ltcGxlU2VyaWUsXG5cdFx0dHNBcnJheVRvT3B0aW9uc0FycmF5LFxuXHRcdGdldEdyb3VwT3B0aW9uTW9kZSxcblx0XHRnZXRTZXJpZUlkLFxuXHRcdGdldFNlcmllTmFtZSxcblx0XHRnZXRUc0NoYXJ0c09wdGlvbnMsXG5cdFx0Z2V0VHNDaGFydHNEYXRhVXJsLFxuXHRcdGdldFRzUXVlcnksXG5cdFx0Z2V0TWFpblNvdXJjZURlZkluZGV4LFxuXHR9O1xufSgpO1xuXG5leHBvcnQgZGVmYXVsdCB0aW1lc2VyaWVzVXRpbHM7XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuPG1vZGFsIEBzaG93ZWQ9XCJzaG93ZWQoKVwiIHJlZj1cIm1vZGFsX2lkXCI+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+XG4gICAge3tfaTE4bihcIm1vZGFsX3RpbWVzZXJpZXMudGl0bGVcIil9fVxuICA8L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAgPHVsIGNsYXNzPVwibmF2IG5hdi10YWJzXCI+XG4gICAgICA8bGkgY2xhc3M9XCJuYXYtaXRlbVwiIEBjbGljaz1cImNoYW5nZV9hY3Rpb24oJ2FkZCcpXCI+XG4gICAgXHQ8YSBjbGFzcz1cIm5hdi1saW5rXCIgOmNsYXNzPVwieydhY3RpdmUnOiBhY3Rpb24gPT0gJ2FkZCd9XCIgaHJlZj1cIiNcIj57e19pMThuKFwibW9kYWxfdGltZXNlcmllcy5hZGRfdGltZXNlcmllc1wiKX19XG5cdDwvYT5cbiAgICAgIDwvbGk+XG4gICAgICA8bGkgY2xhc3M9XCJuYXYtaXRlbVwiIEBjbGljaz1cImNoYW5nZV9hY3Rpb24oJ3NlbGVjdCcpXCI+XG4gICAgXHQ8YSBjbGFzcz1cIm5hdi1saW5rXCIgOmNsYXNzPVwieydhY3RpdmUnOiBhY3Rpb24gPT0gJ3NlbGVjdCcgfVwiIGhyZWY9XCIjXCI+e3tfaTE4bihcIm1vZGFsX3RpbWVzZXJpZXMubWFuYWdlX3RpbWVzZXJpZXNcIil9fTwvYT5cbiAgICAgIDwvbGk+XG4gICAgPC91bD5cbiAgICA8IS0tIGFjdGlvbiBhZGQgLS0+XG4gICAgPHRlbXBsYXRlIHYtaWY9XCJhY3Rpb24gPT0gJ2FkZCdcIj5cbiAgICAgIDwhLS0gU291cmNlcyBUeXBlcyAtLT5cbiAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuXHQ8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCByb3dcIj5cblx0ICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tNFwiID5cbiAgICAgICAgICAgIDxiPnt7X2kxOG4oXCJtb2RhbF90aW1lc2VyaWVzLnNvdXJjZV90eXBlXCIpfX08L2I+XG5cdCAgPC9sYWJlbD5cblx0ICA8ZGl2IGNsYXNzPVwiY29sLXNtLThcIj5cblx0ICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF9zb3VyY2VfdHlwZVwiXG5cdFx0XHQgIEBzZWxlY3Rfb3B0aW9uPVwiY2hhbmdlX3NvdXJjZV90eXBlKClcIlxuXHRcdFx0ICA6b3B0aW9ucz1cInNvdXJjZXNfdHlwZXNcIj5cblx0ICAgIDwvU2VsZWN0U2VhcmNoPlxuXHQgIDwvZGl2PlxuXHQ8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgXG4gICAgICA8IS0tIFNvdXJjZXMgLS0+XG4gICAgICA8ZGl2IHYtaWY9XCIhaGlkZV9zb3VyY2VzXCIgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtYi0yIG10LTMgcm93XCI+XG5cdDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIHJvdyBcIj5cblx0ICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tNFwiID5cbiAgICAgICAgICAgIDxiPnt7X2kxOG4oXCJtb2RhbF90aW1lc2VyaWVzLnNvdXJjZVwiKX19PC9iPlxuXHQgIDwvbGFiZWw+XG5cdCAgPGRpdiBjbGFzcz1cImNvbC1zbS04XCI+XG5cdCAgICA8aW5wdXQgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiB2LW1vZGVsPVwic2VsZWN0ZWRfc291cmNlc191bmlvbl9sYWJlbFwiIDp0aXRsZT1cInNlbGVjdGVkX3NvdXJjZXNfdW5pb25fbGFiZWxcIiBzdHlsZT1cIm92ZXJmbG93OmhpZGRlbjt0ZXh0LW92ZXJmbG93OmVsbGlwc2lzO3doaXRlLXNwYWNlOm5vd3JhcDtcIiB0eXBlPVwidGV4dFwiIGRpc2FibGVkPlxuXHQgIDwvZGl2PlxuXHQ8L2Rpdj5cblx0PHRlbXBsYXRlIHYtZm9yPVwiKHNvdXJjZV9kZWYsIHNvdXJjZV9kZWZfaW5kZXgpIGluIHNlbGVjdGVkX3NvdXJjZV90eXBlLnNvdXJjZV9kZWZfYXJyYXlcIj5cblx0ICA8IS0tIHNlbGVjdCAtLT5cblx0ICA8ZGl2IHYtaWY9XCJzb3VyY2VfZGVmLnVpX3R5cGUgPT0gdWlfdHlwZXMuc2VsZWN0XCIgY2xhc3M9XCJmb3JtLWdyb3VwIG10LTIgcm93XCI+XG5cdCAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tNFwiID5cbiAgICAgICAgICAgICAgPGI+e3tzb3VyY2VfZGVmLmxhYmVsfX08L2I+XG5cdCAgICA8L2xhYmVsPlxuXHQgICAgPGRpdiBjbGFzcz1cImNvbC1zbS04XCI+XG5cdCAgICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF9zb3VyY2VfYXJyYXlbc291cmNlX2RlZl9pbmRleF1cIlxuXHRcdFx0ICAgIEBzZWxlY3Rfb3B0aW9uPVwiY2hhbmdlX3NlbGVjdGVkX3NvdXJjZShzb3VyY2VfZGVmLCBzb3VyY2VfZGVmX2luZGV4LCB0cnVlKVwiXG5cdFx0XHQgICAgOm9wdGlvbnM9XCJzb3VyY2VzX2FycmF5W3NvdXJjZV9kZWZfaW5kZXhdXCI+XG5cdCAgICAgIDwvU2VsZWN0U2VhcmNoPlxuXHQgICAgPC9kaXY+XG5cdCAgPC9kaXY+IDwhLS0gZW5kIHNlbGVjdCAtLT5cblxuXHQgIDwhLS0gaW5wdXQgdGV4dCAtLT5cblx0ICA8ZGl2IHYtaWY9XCJzb3VyY2VfZGVmLnVpX3R5cGUgPT0gdWlfdHlwZXMuaW5wdXRcIiBjbGFzcz1cImZvcm0tZ3JvdXAgbXQtMiByb3dcIj5cblx0ICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00XCIgPlxuICAgICAgICAgICAgICA8Yj57e3NvdXJjZV9kZWYubGFiZWx9fTwvYj5cblx0ICAgIDwvbGFiZWw+XG5cdCAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLThcIj5cblx0ICAgICAgPGlucHV0IGNsYXNzPVwiZm9ybS1jb250cm9sXCIgQGlucHV0PVwiY2hhbmdlX3NlbGVjdGVkX3NvdXJjZShzb3VyY2VfZGVmLCBzb3VyY2VfZGVmX2luZGV4KVwiIHYtbW9kZWw9XCJzZWxlY3RlZF9zb3VyY2VfdGV4dF9hcnJheVtzb3VyY2VfZGVmX2luZGV4XVwiIDpwYXR0ZXJuPVwic291cmNlX3RleHRfdmFsaWRhdGlvbl9hcnJheVtzb3VyY2VfZGVmX2luZGV4XVwiIHJlcXVpcmVkIHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCJcIj5cblx0ICAgIDwvZGl2PlxuXHQgIDwvZGl2PiA8IS0tIGlucHV0IHRleHQgLS0+XG5cblx0ICA8IS0tIGlucHV0IGNvbmZpcm0gdGV4dCAtLT5cblx0ICA8ZGl2IHYtaWY9XCJzb3VyY2VfZGVmLnVpX3R5cGUgPT0gdWlfdHlwZXMuaW5wdXRfY29uZmlybVwiIGNsYXNzPVwiZm9ybS1ncm91cCBtdC0yIHJvd1wiPlxuXHQgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTRcIiA+XG4gICAgICAgICAgICAgIDxiPnt7c291cmNlX2RlZi5sYWJlbH19PC9iPlxuXHQgICAgPC9sYWJlbD5cblx0ICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tN1wiPlxuXHQgICAgICA8aW5wdXQgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBAaW5wdXQ9XCJjaGFuZ2Vfc2VsZWN0ZWRfc291cmNlKHNvdXJjZV9kZWYsIHNvdXJjZV9kZWZfaW5kZXgpXCIgdi1tb2RlbD1cInNlbGVjdGVkX3NvdXJjZV90ZXh0X2FycmF5W3NvdXJjZV9kZWZfaW5kZXhdXCIgOnBhdHRlcm49XCJzb3VyY2VfdGV4dF92YWxpZGF0aW9uX2FycmF5W3NvdXJjZV9kZWZfaW5kZXhdXCIgcmVxdWlyZWQgdHlwZT1cInRleHRcIiBwbGFjZWhvbGRlcj1cIlwiPlxuXHQgICAgPC9kaXY+XG5cdCAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTFcIj5cbiAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLWxpbmsgYnRuLXNtXCIgQGNsaWNrPVwicmVsb2FkX3NvdXJjZXMoc291cmNlX2RlZiwgc291cmNlX2RlZl9pbmRleClcIiA6dGl0bGU9XCJfaTE4bihzb3VyY2VfZGVmLnJlZnJlc2hfaTE4bilcIiA6ZGlzYWJsZWQ9XCIhZW5hYmxlX2FwcGx5X3NvdXJjZVwiPjxpIGNsYXNzPVwiZmFzIGZhLXJlZnJlc2hcIj48L2k+PC9idXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cblx0ICA8L2Rpdj4gPCEtLSBpbnB1dCBjb25maXJtIHRleHQgLS0+XG5cdDwvdGVtcGxhdGU+XG5cdFxuXHQ8ZGl2IHYtc2hvdz1cImVuYWJsZV9hcHBseV9zb3VyY2VcIiBjbGFzcz1cImZvcm0tZ3JvdXAgcm93IG10LTJcIiBzdHlsZT1cInRleHQtYWxpZ246ZW5kO1wiPlxuXHQgIDxkaXYgY2xhc3M9XCJjb2wtc20tMTJcIj5cbiAgICAgIFx0ICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImFwcGx5X3NvdXJjZV9hcnJheVwiIDpkaXNhYmxlZD1cImVuYWJsZV9hcHBseV9zb3VyY2UgPT0gZmFsc2VcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPnt7X2kxOG4oXCJtb2RhbF90aW1lc2VyaWVzLmFwcGx5X3NvdXJjZVwiKX19PC9idXR0b24+XG5cdCAgPC9kaXY+XHQgIFxuXHQ8L2Rpdj5cdFxuICAgICAgPC9kaXY+IDwhLS0gZW5kIFNvdXJjZXMgLS0+XG4gICAgICBcbiAgICAgIDwhLS0gTWV0cmljcyAtLT5cbiAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuXHQ8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCByb3dcIj5cblx0ICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tNFwiID5cbiAgICAgICAgICAgIDxiPnt7X2kxOG4oXCJtb2RhbF90aW1lc2VyaWVzLm1ldHJpY1wiKX19PC9iPlxuXHQgIDwvbGFiZWw+XG5cdCAgPGRpdiBjbGFzcz1cImNvbC1zbS04XCI+XG4gICAgICAgICAgICA8U2VsZWN0U2VhcmNoIHJlZj1cInNlbGVjdF9zZWFyY2hfbWV0cmljc1wiXG5cdCAgXHRcdCAgQHNlbGVjdF9vcHRpb249XCJ1cGRhdGVfdGltZXNlcmllc190b19hZGQoKVwiXG5cdCAgXHRcdCAgdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF9tZXRyaWNcIlxuXHQgIFx0XHQgIDpvcHRpb25zPVwibWV0cmljc1wiPlxuICAgICAgICAgICAgPC9TZWxlY3RTZWFyY2g+XG5cdCAgICBcblx0ICA8L2Rpdj5cdCAgXG5cdDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICBcbiAgICAgIDxMaXN0VGltZXNlcmllc1xuXHQ6dGl0bGU9XCJfaTE4bignbW9kYWxfdGltZXNlcmllcy50aW1lc2VyaWVzX2xpc3QnKVwiXG5cdHYtbW9kZWw6dGltZXNlcmllcz1cInRpbWVzZXJpZXNfdG9fYWRkXCI+XG4gICAgICA8L0xpc3RUaW1lc2VyaWVzPiAgICAgIFxuICAgIDwvdGVtcGxhdGU+PCEtLSBhY3Rpb24gPT0gYWRkIC0tPlxuXG4gICAgPCEtLSBhY3Rpb24gc2VsZWN0LS0+XG4gICAgPHRlbXBsYXRlIHYtaWY9XCJhY3Rpb24gPT0gJ3NlbGVjdCdcIj5cbiAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cIml0ZW0gaW4gdGltZXNlcmllc19ncm91cHNfYWRkZWRcIj5cblx0PExpc3RUaW1lc2VyaWVzXG5cdCAgOmlkPVwiZ2V0X3RpbWVzZXJpZXNfZ3JvdXBfaWQoaXRlbSlcIlxuXHQgIDp0aXRsZT1cImdldF90aW1lc2VyaWVzX2dyb3VwX25hbWUoaXRlbSlcIlxuXHQgIHYtbW9kZWw6dGltZXNlcmllcz1cIml0ZW0udGltZXNlcmllc1wiXG5cdCAgOnNob3dfZGVsZXRlX2J1dHRvbj1cInRpbWVzZXJpZXNfZ3JvdXBzX2FkZGVkLmxlbmd0aCA+IDFcIlxuXHQgIEBkZWxldGVfdHM9XCJkZWxldGVfdHNcIj5cblx0PC9MaXN0VGltZXNlcmllcz4gICAgICBcbiAgICAgIDwvdGVtcGxhdGU+PCEtLSB2LWZvciB0aW1lc2VyaWVzX2dyb3Vwc19hZGRlZCAtLT5cbiAgICA8L3RlbXBsYXRlPjwhLS0gYWN0aW9uID09IHNlbGVjdCAtLT5cbiAgPC90ZW1wbGF0ZT48IS0tIG1vZGFsLWJvZHkgLS0+XG4gIFxuICA8dGVtcGxhdGUgdi1zbG90OmZvb3Rlcj5cbiAgICA8YnV0dG9uIHYtc2hvdz1cImFjdGlvbiA9PSAnYWRkJ1wiIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJhcHBseVwiIDpkaXNhYmxlZD1cImVuYWJsZV9hcHBseV9zb3VyY2VcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPnt7X2kxOG4oXCJtb2RhbF90aW1lc2VyaWVzLmFkZFwiKX19PC9idXR0b24+XG4gICAgPGJ1dHRvbiB2LXNob3c9XCJhY3Rpb24gPT0gJ3NlbGVjdCdcIiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiYXBwbHlcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPnt7X2kxOG4oXCJtb2RhbF90aW1lc2VyaWVzLmFwcGx5XCIpfX08L2J1dHRvbj5cbiAgPC90ZW1wbGF0ZT5cbjwvbW9kYWw+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIG9uQmVmb3JlTW91bnQsIGNvbXB1dGVkLCB3YXRjaCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgbW9kYWwgfSBmcm9tIFwiLi9tb2RhbC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTGlzdFRpbWVzZXJpZXMgfSBmcm9tIFwiLi9saXN0LXRpbWVzZXJpZXMudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdFNlYXJjaCB9IGZyb20gXCIuL3NlbGVjdC1zZWFyY2gudnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfdXRpbGl0eSB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzLmpzXCI7XG5cbmltcG9ydCBtZXRyaWNzTWFuYWdlciBmcm9tIFwiLi4vdXRpbGl0aWVzL21ldHJpY3MtbWFuYWdlci5qc1wiO1xuaW1wb3J0IHRpbWVzZXJpZXNVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL3RpbWVzZXJpZXMtdXRpbHMuanNcIjtcbmltcG9ydCByZWdleFZhbGlkYXRpb24gZnJvbSBcIi4uL3V0aWxpdGllcy9yZWdleC12YWxpZGF0aW9uLmpzXCI7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIHNvdXJjZXNfdHlwZXNfZW5hYmxlZDogT2JqZWN0LFxufSk7XG5cbmNvbnN0IG1vZGFsX2lkID0gcmVmKG51bGwpO1xuY29uc3Qgc2VsZWN0X3NlYXJjaF9tZXRyaWNzID0gcmVmKG51bGwpO1xuXG5jb25zdCBzaG93ZWQgPSAoKSA9PiB7fTtcblxuY29uc3QgYWN0aW9uID0gcmVmKFwic2VsZWN0XCIpOyAvLyBhZGQvc2VsZWN0IFxuXG5sZXQgY3VycmVudF9wYWdlX3NvdXJjZV90eXBlID0gbWV0cmljc01hbmFnZXIuZ2V0X2N1cnJlbnRfcGFnZV9zb3VyY2VfdHlwZSgpO1xuXG5jb25zdCBzb3VyY2VzX3R5cGVzID0gbWV0cmljc01hbmFnZXIuc291cmNlc190eXBlcztcbmNvbnN0IHNlbGVjdGVkX3NvdXJjZV90eXBlID0gcmVmKGN1cnJlbnRfcGFnZV9zb3VyY2VfdHlwZSk7XG5cbmNvbnN0IHVpX3R5cGVzID0gbWV0cmljc01hbmFnZXIudWlfdHlwZXM7XG5jb25zdCBzb3VyY2VzX2FycmF5ID0gcmVmKFtdKTsgLy8gYXJyYXkgb2Ygc291cmNlcywgZWFjaCBlbGVtZW50IGlzIHRoZSBzb3VyY2VzIGxpc3Qgb2Ygc291cmNlX3R5cGUuc291cmNlX2RlZl9hcnJheVtpXVxuY29uc3Qgc2VsZWN0ZWRfc291cmNlX2FycmF5ID0gcmVmKFtdKTtcbmNvbnN0IHNlbGVjdGVkX3NvdXJjZV90ZXh0X2FycmF5ID0gcmVmKFtdKTsgLy8gYXJyYXkgb2Ygc291cmNlX3ZhbHVlIGJpbmRpbmcgd2l0aCBpbnB1dCB0ZXh0XG4vLyBjb25zdCBzdWJfc291cmNlcyA9IHJlZihbXSk7XG4vLyBjb25zdCBzZWxlY3RlZF9zdWJfc291cmNlID0gcmVmKHt9KTtcbmNvbnN0IHNlbGVjdGVkX3NvdXJjZXNfdW5pb25fbGFiZWwgPSByZWYoXCJcIik7XG5jb25zdCBzb3VyY2VfdGV4dF92YWxpZGF0aW9uX2FycmF5ID0gcmVmIChbXSk7XG5cbmNvbnN0IGlzX3NlbGVjdGVkX3NvdXJjZV9jaGFuZ2VkID0gcmVmKGZhbHNlKTtcbmNvbnN0IGVuYWJsZV9hcHBseV9zb3VyY2UgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgaWYgKGlzX3NlbGVjdGVkX3NvdXJjZV9jaGFuZ2VkLnZhbHVlID09IGZhbHNlKSB7XG5cdHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzb3VyY2VfdGV4dF92YWxpZGF0aW9uX2FycmF5LnZhbHVlLmxlbmd0aDsgaSArPSAxKSB7XG5cdGxldCByZ190ZXh0ID0gc291cmNlX3RleHRfdmFsaWRhdGlvbl9hcnJheS52YWx1ZVtpXTtcblx0aWYgKHJnX3RleHQgPT0gbnVsbCkgeyBjb250aW51ZTsgfVxuXHRsZXQgcmVnZXggPSBuZXcgUmVnRXhwKHJnX3RleHQpO1xuXHRsZXQgc291cmNlX3RleHQgPSBzZWxlY3RlZF9zb3VyY2VfdGV4dF9hcnJheS52YWx1ZVtpXTtcblx0aWYgKHJlZ2V4LnRlc3Qoc291cmNlX3RleHQpID09IGZhbHNlKSB7XG5cdCAgICByZXR1cm4gZmFsc2U7XG5cdH1cdFxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn0pO1xuY29uc3QgaGlkZV9zb3VyY2VzID0gcmVmKGZhbHNlKTtcblxuY29uc3QgbWV0cmljcyA9IHJlZihbXSk7XG5jb25zdCBzZWxlY3RlZF9tZXRyaWMgPSByZWYoe30pO1xuXG5jb25zdCB0aW1lc2VyaWVzX2dyb3Vwc19hZGRlZCA9IHJlZihbXSk7XG5cbmNvbnN0IHRpbWVzZXJpZXNfdG9fYWRkID0gcmVmKFtdKTtcblxuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFsnYXBwbHknXSk7XG5cbmxldCB3YWl0X2luaXQgPSBudWxsO1xubGV0IGxhc3Rfc291cmNlX3ZhbHVlX2FycmF5ID0gbnVsbDtcblxub25CZWZvcmVNb3VudCgoKSA9PiB7XG4gICAgc291cmNlc190eXBlcy5mb3JFYWNoKChzb3VyY2VfdHlwZSkgPT4ge1xuXHRsZXQgc291cmNlX3R5cGVfZW5hYmxlZCA9IHByb3BzLnNvdXJjZXNfdHlwZXNfZW5hYmxlZFtzb3VyY2VfdHlwZS5pZF07XG5cdGlmIChzb3VyY2VfdHlwZV9lbmFibGVkID09IG51bGwgfHwgc291cmNlX3R5cGVfZW5hYmxlZCA9PSBmYWxzZSkge1xuXHQgICAgLy8gc291cmNlX3R5cGUuZGlzYWJsZWQgPSB0cnVlO1xuXHR9XG4gICAgfSk7ICAgIFxufSk7XG5cbm9uTW91bnRlZChhc3luYyAoKSA9PiB7XG4gICAgd2FpdF9pbml0ID0gaW5pdCgpO1xufSk7XG5cbmNvbnN0IHNob3cgPSBhc3luYyAodGltZXNlcmllc19ncm91cHMpID0+IHtcbiAgICB0aW1lc2VyaWVzX2dyb3Vwc19hZGRlZC52YWx1ZSA9IHRpbWVzZXJpZXNfZ3JvdXBzO1xuICAgIGF3YWl0IHdhaXRfaW5pdDtcbiAgICBhY3Rpb24udmFsdWUgPSBcInNlbGVjdFwiO1xuICAgIG1vZGFsX2lkLnZhbHVlLnNob3coKTtcbn07XG5cbmZ1bmN0aW9uIGNoYW5nZV9hY3Rpb24oYSkge1xuICAgIGFjdGlvbi52YWx1ZSA9IGE7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNoYW5nZV9zb3VyY2VfdHlwZSgpIHtcbiAgICBpc19zZWxlY3RlZF9zb3VyY2VfY2hhbmdlZC52YWx1ZSA9IGZhbHNlO1xuICAgIHNldF9yZWdleCgpO1xuICAgIHNldF9oaWRlX3NvdXJjZXMoKTtcbiAgICBhd2FpdCBzZXRfc291cmNlc19hcnJheSgpO1xuICAgIGF3YWl0IHNldF9tZXRyaWNzKCk7XG59XG5cbmZ1bmN0aW9uIHNldF9oaWRlX3NvdXJjZXMoKSB7XG4gICAgbGV0IHNvdXJjZV90eXBlID0gc2VsZWN0ZWRfc291cmNlX3R5cGUudmFsdWU7XG4gICAgaGlkZV9zb3VyY2VzLnZhbHVlID0gc291cmNlX3R5cGUuc291cmNlX2RlZl9hcnJheS5tYXAoKHNkKSA9PiBzZC51aV90eXBlID09IHVpX3R5cGVzLmhpZGUpLmV2ZXJ5KChoaWRlKSA9PiBoaWRlID09IHRydWUpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBhcHBseV9zb3VyY2VfYXJyYXkoKSB7XG4gICAgaXNfc2VsZWN0ZWRfc291cmNlX2NoYW5nZWQudmFsdWUgPSBmYWxzZTtcbiAgICBzZWxlY3RlZF9zb3VyY2VfdGV4dF9hcnJheS52YWx1ZS5mb3JFYWNoKChzb3VyY2VfdmFsdWUsIGkpID0+IHtcblx0bGV0IHNvdXJjZV9kZWYgPSBzZWxlY3RlZF9zb3VyY2VfdHlwZS52YWx1ZS5zb3VyY2VfZGVmX2FycmF5W2ldO1xuXHRpZiAoc291cmNlX2RlZi51aV90eXBlID09IHVpX3R5cGVzLmlucHV0KSB7XG5cdCAgICBsZXQgc291cmNlID0gc2VsZWN0ZWRfc291cmNlX2FycmF5LnZhbHVlW2ldO1xuICAgICAgICAgICAgc2V0X3NvdXJjZV9pbnB1dChzb3VyY2UsIHNvdXJjZV92YWx1ZSlcblx0fVxuICAgIH0pOyAgICBcbiAgICBhd2FpdCBjaGFuZ2Vfc291cmNlX2FycmF5KCk7XG4gICAgc2V0X3NlbGVjdGVkX3NvdXJjZXNfdW5pb25fbGFiZWwoKTtcbn1cblxuZnVuY3Rpb24gc2V0X3NvdXJjZV9pbnB1dChzb3VyY2UsIHNvdXJjZV92YWx1ZSkge1xuICAgIHNvdXJjZS52YWx1ZSA9IHNvdXJjZV92YWx1ZTtcbiAgICBzb3VyY2UubGFiZWwgPSBzb3VyY2VfdmFsdWU7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNoYW5nZV9zb3VyY2VfYXJyYXkoKSB7XG4gICAgLy8gcmVsb2FkIG1ldHJpY3MgXG4gICAgYXdhaXQgc2V0X21ldHJpY3MoKTtcbn1cblxuZnVuY3Rpb24gY2hhbmdlX3NlbGVjdGVkX3NvdXJjZShzb3VyY2VfZGVmLCBzb3VyY2VfZGVmX2luZGV4LCBmb3JjZV9yZWxvYWRfc291cmNlcykge1xuICAgIGlzX3NlbGVjdGVkX3NvdXJjZV9jaGFuZ2VkLnZhbHVlID0gdHJ1ZTtcbiAgICBpZiAoZm9yY2VfcmVsb2FkX3NvdXJjZXMgPT0gdHJ1ZSkge1xuICAgICAgICByZWxvYWRfc291cmNlcyhzb3VyY2VfZGVmLCBzb3VyY2VfZGVmX2luZGV4KTtcbiAgICB9XG59XG5cbi8vIHJlbG9hZCBhbGwgc291cmNlcyBmb3IgZWFjaCBzb3VyY2VfZGVmIHdpdGggcmVmcmVzaF9vbl9zb3VyY2VzX2NoYW5nZSA9PSB0cnVlXG5hc3luYyBmdW5jdGlvbiByZWxvYWRfc291cmNlcyhzb3VyY2VfZGVmLCBzb3VyY2VfZGVmX2luZGV4KSB7XG4gICAgaWYgKHNvdXJjZV9kZWYudWlfdHlwZSA9PSB1aV90eXBlcy5pbnB1dF9jb25maXJtKSB7XG4gICAgICAgIHNldF9zb3VyY2VfaW5wdXQoc2VsZWN0ZWRfc291cmNlX2FycmF5LnZhbHVlW3NvdXJjZV9kZWZfaW5kZXhdLCBzZWxlY3RlZF9zb3VyY2VfdGV4dF9hcnJheS52YWx1ZVtzb3VyY2VfZGVmX2luZGV4XSk7XG4gICAgfVxuICAgIGxldCBzb3VyY2VfZGVmX2FycmF5ID0gc2VsZWN0ZWRfc291cmNlX3R5cGUudmFsdWUuc291cmNlX2RlZl9hcnJheTtcbiAgICBsZXQgc291cmNlX3ZhbHVlX2FycmF5ID0gc2VsZWN0ZWRfc291cmNlX2FycmF5LnZhbHVlLm1hcCgocykgPT4gcy52YWx1ZSk7XG4gICAgZm9yIChsZXQgaSA9IHNvdXJjZV9kZWZfaW5kZXggKyAxOyBpIDwgc291cmNlX2RlZl9hcnJheS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBzb3VyY2VfZGVmID0gc291cmNlX2RlZl9hcnJheVtpXTtcbiAgICAgICAgaWYgKCFzb3VyY2VfZGVmLnJlZnJlc2hfb25fc291cmNlc19jaGFuZ2UpIHsgY29udGludWU7IH1cblxuICAgICAgICBsZXQgc291cmNlcyA9IGF3YWl0IG1ldHJpY3NNYW5hZ2VyLmdldF9zb3VyY2VzKGh0dHBfcHJlZml4LCBzZWxlY3RlZF9zb3VyY2VfdHlwZS52YWx1ZS5pZCwgc291cmNlX2RlZiwgc291cmNlX3ZhbHVlX2FycmF5KTtcbiAgICAgICAgc291cmNlc19hcnJheS52YWx1ZVtpXSA9IHNvdXJjZXM7XG4gICAgICAgIGlmIChzb3VyY2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHNlbGVjdGVkX3NvdXJjZV9hcnJheS52YWx1ZVtpXSA9IHNvdXJjZXNbMF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZWxlY3RlZF9zb3VyY2VfYXJyYXkudmFsdWVbaV0gPSB7IGxhYmVsOiBcIlwiLCB2YWx1ZTogXCJcIiB9O1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGBObyBzb3VyY2VzIGF2YWlsYWJsZXMgdG8gc2VsZWN0IGZvciAke3NlbGVjdGVkX3NvdXJjZV90eXBlLnZhbHVlLmlkfSBzb3JjZV9kZWZgKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gc2V0X3JlZ2V4KCkge1xuICAgIGxldCByZWdleF9zb3VyY2VfYXJyYXkgPSBzZWxlY3RlZF9zb3VyY2VfdHlwZS52YWx1ZT8uc291cmNlX2RlZl9hcnJheS5tYXAoKHNvdXJjZV9kZWYpID0+IHNvdXJjZV9kZWYucmVnZXhfdHlwZSk7XG4gICAgaWYgKHJlZ2V4X3NvdXJjZV9hcnJheSA9PSBudWxsKSB7IHJlZ2V4X3NvdXJjZV9hcnJheSA9IFtdOyB9XG4gICAgc291cmNlX3RleHRfdmFsaWRhdGlvbl9hcnJheS52YWx1ZSA9IHJlZ2V4X3NvdXJjZV9hcnJheS5tYXAoKHJlZ2V4X3NvdXJjZSkgPT4ge1xuXHRpZiAocmVnZXhfc291cmNlID09IG51bGwpIHsgcmV0dXJuICBudWxsOyB9XG5cdHJldHVybiByZWdleFZhbGlkYXRpb24uZ2V0X2RhdGFfcGF0dGVybihyZWdleF9zb3VyY2UpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRfc2VsZWN0ZWRfc291cmNlc191bmlvbl9sYWJlbCgpIHtcbiAgICBsZXQgc291cmNlX2xhYmVsX2FycmF5ID0gc2VsZWN0ZWRfc291cmNlX2FycmF5LnZhbHVlLmZpbHRlcigoc291cmNlKSA9PiBzb3VyY2UubGFiZWwgIT0gbnVsbCAmJiBzb3VyY2UubGFiZWwgIT0gXCJcIikubWFwKChzb3VyY2UpID0+IHNvdXJjZS5sYWJlbCk7XG4gICAgbGV0IGxhYmVsID0gc291cmNlX2xhYmVsX2FycmF5LmpvaW4oXCIgLSBcIik7XG4gICAgcmV0dXJuIGAke2xhYmVsfWA7XG59XG5cbmZ1bmN0aW9uIHNldF9zZWxlY3RlZF9zb3VyY2VzX3VuaW9uX2xhYmVsKCkge1xuICAgIHNlbGVjdGVkX3NvdXJjZXNfdW5pb25fbGFiZWwudmFsdWUgPSBnZXRfc2VsZWN0ZWRfc291cmNlc191bmlvbl9sYWJlbCgpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBzZXRfc291cmNlc19hcnJheSgpIHtcbiAgICBsZXQgc291cmNlX2RlZl9hcnJheSA9IHNlbGVjdGVkX3NvdXJjZV90eXBlLnZhbHVlLnNvdXJjZV9kZWZfYXJyYXk7XG4gICAgbGV0IHNvdXJjZXNfYXJyYXlfdGVtcCA9IFtdO1xuICAgIGxldCBkZWZhdWx0X3NvdXJjZV9hcnJheSA9IGF3YWl0IG1ldHJpY3NNYW5hZ2VyLmdldF9kZWZhdWx0X3NvdXJjZV9hcnJheShodHRwX3ByZWZpeCwgc2VsZWN0ZWRfc291cmNlX3R5cGUudmFsdWUpO1xuICAgIGxldCBkZWZhdWx0X3NvcnVjZV92YWx1ZV9hcnJheSA9IGRlZmF1bHRfc291cmNlX2FycmF5Lm1hcCgocykgPT4gcy52YWx1ZSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzb3VyY2VfZGVmX2FycmF5Lmxlbmd0aDsgaSArPSAxKSB7XG5cdGxldCBzb3VyY2VzID0gYXdhaXQgbWV0cmljc01hbmFnZXIuZ2V0X3NvdXJjZXMoaHR0cF9wcmVmaXgsIHNlbGVjdGVkX3NvdXJjZV90eXBlLnZhbHVlLmlkLCBzb3VyY2VfZGVmX2FycmF5W2ldLCBkZWZhdWx0X3NvcnVjZV92YWx1ZV9hcnJheSk7XG5cdHNvdXJjZXNfYXJyYXlfdGVtcC5wdXNoKHNvdXJjZXMpO1xuICAgIH1cbiAgICBzZWxlY3RlZF9zb3VyY2VfYXJyYXkudmFsdWUgPSBkZWZhdWx0X3NvdXJjZV9hcnJheTtcbiAgICBzb3VyY2VzX2FycmF5LnZhbHVlID0gc291cmNlc19hcnJheV90ZW1wO1xuICAgIHNlbGVjdGVkX3NvdXJjZV90ZXh0X2FycmF5LnZhbHVlID0gZGVmYXVsdF9zb3J1Y2VfdmFsdWVfYXJyYXk7XG4gICAgc2V0X3NlbGVjdGVkX3NvdXJjZXNfdW5pb25fbGFiZWwoKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gc2V0X21ldHJpY3MoKSB7XG4gICAgbWV0cmljcy52YWx1ZSA9IGF3YWl0IG1ldHJpY3NNYW5hZ2VyLmdldF9tZXRyaWNzKGh0dHBfcHJlZml4LCBzZWxlY3RlZF9zb3VyY2VfdHlwZS52YWx1ZSwgc2VsZWN0ZWRfc291cmNlX2FycmF5LnZhbHVlKTtcbiAgICBtZXRyaWNzLnZhbHVlLnNvcnQoTnRvcFV0aWxzLnNvcnRBbHBoYWJldGljYWxseSk7XG4gICAgc2VsZWN0ZWRfbWV0cmljLnZhbHVlID0gbWV0cmljc01hbmFnZXIuZ2V0X2RlZmF1bHRfbWV0cmljKG1ldHJpY3MudmFsdWUpO1xuICAgIHVwZGF0ZV90aW1lc2VyaWVzX3RvX2FkZChmYWxzZSk7ICAgIFxufVxuXG5hc3luYyBmdW5jdGlvbiBpbml0KCkge1xuICAgIGF3YWl0IGNoYW5nZV9zb3VyY2VfdHlwZSgpO1xuICAgIC8vIHRha2UgZGVmYXVsdCB2aXNpYmxlXG4gICAgdXBkYXRlX3RpbWVzZXJpZXNfdG9fYWRkKGZhbHNlKTtcbiAgICAvL2VtaXQoJ2FwcGx5JywgdGltZXNlcmllc19ncm91cHNfYWRkZWQudmFsdWUpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVfdGltZXNlcmllc190b19hZGQoZGVmYXVsdF9jb25maWcpIHtcbiAgICB0aW1lc2VyaWVzX3RvX2FkZC52YWx1ZSA9IFtdO1xuICAgIGxldCB0aW1lc2VyaWVzID0gc2VsZWN0ZWRfbWV0cmljLnZhbHVlLnRpbWVzZXJpZXM7XG4gICAgZm9yIChsZXQgdHNfaWQgaW4gdGltZXNlcmllcykge1xuICAgIFx0dGltZXNlcmllc190b19hZGQudmFsdWUucHVzaCh7XG4gICAgXHQgICAgaWQ6IHRzX2lkLFxuICAgIFx0ICAgIGxhYmVsOiB0aW1lc2VyaWVzW3RzX2lkXS5sYWJlbCxcbiAgICBcdCAgICByYXc6IHRydWUsXG5cdCAgICBwYXN0OiBmYWxzZSxcbiAgICBcdCAgICBhdmc6IGZhbHNlLFxuICAgIFx0ICAgIHBlcmNfOTU6IGZhbHNlLFxuICAgIFx0fSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnZXRfdGltZXNlcmllc19ncm91cF9uYW1lKHRzX2dyb3VwKSB7XG4gICAgbGV0IHNvdXJjZV90eXBlX25hbWUgPSB0c19ncm91cC5zb3VyY2VfdHlwZS5sYWJlbDtcbiAgICBsZXQgc291cmNlX2RlZl9pbmRleCA9IHRpbWVzZXJpZXNVdGlscy5nZXRNYWluU291cmNlRGVmSW5kZXgodHNfZ3JvdXApO1xuICAgIGxldCBzb3VyY2UgPSB0c19ncm91cC5zb3VyY2VfYXJyYXlbc291cmNlX2RlZl9pbmRleF07XG4gICAgbGV0IHNvdXJjZV9uYW1lID0gc291cmNlLmxhYmVsO1xuICAgIGxldCBtZXRyaWNfbmFtZSA9IHRzX2dyb3VwLm1ldHJpYy5sYWJlbDtcbiAgICByZXR1cm4gYCR7c291cmNlX3R5cGVfbmFtZX0gLSAke3NvdXJjZV9uYW1lfSAtICR7bWV0cmljX25hbWV9YDtcbn1cblxuZnVuY3Rpb24gZ2V0X3RpbWVzZXJpZXNfZ3JvdXBfaWQodHNfZ3JvdXApIHtcbiAgICBsZXQgc291cmNlX3R5cGUsIHNvdXJjZV9hcnJheSwgbWV0cmljO1xuICAgIGlmICh0c19ncm91cCA9PSBudWxsKSB7XG5cdHNvdXJjZV90eXBlID0gc2VsZWN0ZWRfc291cmNlX3R5cGUudmFsdWU7XG5cdHNvdXJjZV9hcnJheSA9IHNlbGVjdGVkX3NvdXJjZV9hcnJheS52YWx1ZTtcblx0bWV0cmljID0gc2VsZWN0ZWRfbWV0cmljLnZhbHVlO1xuICAgIH0gZWxzZSB7XG5cdHNvdXJjZV90eXBlID0gdHNfZ3JvdXAuc291cmNlX3R5cGU7XG5cdHNvdXJjZV9hcnJheSA9IHRzX2dyb3VwLnNvdXJjZV9hcnJheTtcblx0bWV0cmljID0gdHNfZ3JvdXAubWV0cmljO1xuICAgIH1cbiAgICBsZXQgaWQgPSBtZXRyaWNzTWFuYWdlci5nZXRfdHNfZ3JvdXBfaWQoc291cmNlX3R5cGUsIHNvdXJjZV9hcnJheSwgbWV0cmljKTtcbiAgICByZXR1cm4gaWQ7XG59XG5cbmNvbnN0IGRlbGV0ZV90cyA9ICh0c19ncm91cF9pZCkgPT4ge1xuICAgIHRpbWVzZXJpZXNfZ3JvdXBzX2FkZGVkLnZhbHVlID0gdGltZXNlcmllc19ncm91cHNfYWRkZWQudmFsdWUuZmlsdGVyKCh0c19ncm91cCkgPT4gZ2V0X3RpbWVzZXJpZXNfZ3JvdXBfaWQodHNfZ3JvdXApICE9IHRzX2dyb3VwX2lkKTtcbn07XG5cbmNvbnN0IHNldF90aW1lc2VyaWVzX2dyb3VwcyA9ICh0aW1lc2VyaWVzX2dyb3VwcywgZW1pdF9hcHBseSkgPT4ge1xuICAgIHRpbWVzZXJpZXNfZ3JvdXBzX2FkZGVkLnZhbHVlID0gdGltZXNlcmllc19ncm91cHM7XG4gICAgaWYgKGVtaXRfYXBwbHkpIHtcblx0ZW1pdCgnYXBwbHknLCB0aW1lc2VyaWVzX2dyb3Vwc19hZGRlZC52YWx1ZSk7XG4gICAgfVxufTtcblxuY29uc3QgYWRkX3RzX2dyb3VwID0gKHRzX2dyb3VwX3RvX2FkZCwgZW1pdF9hcHBseSkgPT4ge1xuICAgIGxldCB0c19ncm91cF9pbmRleCA9IHRpbWVzZXJpZXNfZ3JvdXBzX2FkZGVkLnZhbHVlLmZpbmRJbmRleCgodHNfZ3JvdXApID0+IHRzX2dyb3VwLmlkID09IHRzX2dyb3VwX3RvX2FkZC5pZCk7XG4gICAgaWYgKHRzX2dyb3VwX2luZGV4IDwgMCkge1xuXHR0aW1lc2VyaWVzX2dyb3Vwc19hZGRlZC52YWx1ZS5wdXNoKHRzX2dyb3VwX3RvX2FkZCk7XG4gICAgfSBlbHNlIHtcblx0dGltZXNlcmllc19ncm91cHNfYWRkZWQudmFsdWVbdHNfZ3JvdXBfaW5kZXhdID0gdHNfZ3JvdXBfdG9fYWRkO1xuICAgIH1cblxuICAgIGlmIChlbWl0X2FwcGx5KSB7XG5cdGVtaXQoJ2FwcGx5JywgdGltZXNlcmllc19ncm91cHNfYWRkZWQudmFsdWUpO1xuICAgIH1cbn07XG5cbmNvbnN0IGFwcGx5ID0gKCkgPT4ge1xuICAgIGlmIChhY3Rpb24udmFsdWUgPT0gXCJhZGRcIikge1xuXHRsZXQgdHNfZ3JvdXBfaWQgPSBnZXRfdGltZXNlcmllc19ncm91cF9pZCgpO1xuXHRsZXQgdHNfZ3JvdXAgPSB7XG5cdCAgICBpZDogdHNfZ3JvdXBfaWQsXG5cdCAgICBzb3VyY2VfdHlwZTogc2VsZWN0ZWRfc291cmNlX3R5cGUudmFsdWUsXG5cdCAgICBzb3VyY2VfYXJyYXk6IG50b3BuZ191dGlsaXR5LmNsb25lKHNlbGVjdGVkX3NvdXJjZV9hcnJheS52YWx1ZSksXG5cdCAgICBtZXRyaWM6IHNlbGVjdGVkX21ldHJpYy52YWx1ZSxcblx0ICAgIHRpbWVzZXJpZXM6IG50b3BuZ191dGlsaXR5LmNsb25lKHRpbWVzZXJpZXNfdG9fYWRkLnZhbHVlKSxcblx0fTtcblx0YWRkX3RzX2dyb3VwKHRzX2dyb3VwKTtcbiAgICB9XG4gICAgZW1pdCgnYXBwbHknLCB0aW1lc2VyaWVzX2dyb3Vwc19hZGRlZC52YWx1ZSk7XG4gICAgY2xvc2UoKTtcbn07XG5cbmNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICAgIG1vZGFsX2lkLnZhbHVlLmNsb3NlKCk7XG59O1xuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcblxuZGVmaW5lRXhwb3NlKHsgc2hvdywgY2xvc2UsIGFkZF90c19ncm91cCwgc2V0X3RpbWVzZXJpZXNfZ3JvdXBzIH0pO1xuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbmlucHV0OmludmFsaWQge1xuICBib3JkZXItY29sb3I6ICNmZjAwMDA7XG59XG5cbi5jdXN0b20tbWFyZ2luIHtcbm1hcmdpbi1sZWZ0OiAtMC40cmVtO1xufVxuLndhcm4ge1xuYm9yZGVyLWNvbG9yOiAjZmZkNTAwO1xuYm9yZGVyLXN0eWxlOiBzb2xpZDtcbn1cbjwvc3R5bGU+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuICA8bW9kYWwgcmVmPVwibW9kYWxfaWRcIj5cbiAgICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPlxuICAgICAge3sgcHJvcHMudGl0bGUgfX1cbiAgICA8L3RlbXBsYXRlPlxuICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6Ym9keT5cbiAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG10LTIgcm93XCI+XG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00XCI+XG4gICAgICAgICAgPGI+e3sgX2kxOG4oXCJtb2RhbF9kb3dubG9hZF9maWxlLmZpbGVuYW1lXCIpIH19OjwvYj5cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS02XCI+XG4gICAgICAgICAgPGlucHV0IGNsYXNzPVwiZm9ybS1jb250cm9sXCIgOnBhdHRlcm49XCJmaWxlbmFtZV92YWxpZGF0aW9uXCIgdi1tb2RlbD1cImZpbGVuYW1lXCIgdHlwZT1cInRleHRcIiByZXF1aXJlZD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS0yXCI+XG4gICAgICAgICAgLnt7IHByb3BzLmV4dCB9fVxuICAgICAgICA8L2xhYmVsPlxuICAgICAgPC9kaXY+XG4gICAgPC90ZW1wbGF0ZT48IS0tIG1vZGFsLWJvZHkgLS0+XG5cbiAgICA8dGVtcGxhdGUgdi1zbG90OmZvb3Rlcj5cbiAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImRvd25sb2FkXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiA6ZGlzYWJsZWQ9XCJlbmFibGVfZG93bmxvYWQgPT0gZmFsc2VcIj57e1xuICAgICAgICBfaTE4bihcIm1vZGFsX2Rvd25sb2FkX2ZpbGUuZG93bmxvYWRcIikgfX08L2J1dHRvbj5cbiAgICA8L3RlbXBsYXRlPlxuICA8L21vZGFsPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBjb21wdXRlZCwgd2F0Y2ggfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIG1vZGFsIH0gZnJvbSBcIi4vbW9kYWwudnVlXCI7XG5cbmNvbnN0IG1vZGFsX2lkID0gcmVmKG51bGwpO1xuY29uc3QgZmlsZW5hbWUgPSByZWYoXCJcIik7XG5cbi8vY29uc3QgZmlsZW5hbWVfdmFsaWRhdGlvbiA9IGBbXFxgfiFAIyQlXiYqX3wrLT0/OzonXCIsLjw+e31bXVxcXFwvXWA7XG5jb25zdCBiYWNrdGljayA9ICdgJztcbmNvbnN0IGZpbGVuYW1lX3ZhbGlkYXRpb24gPSBTdHJpbmcucmF3YF5bYS16QS1aX1xcLTEtOV0qJGA7XG5cbmNvbnN0IGVuYWJsZV9kb3dubG9hZCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgbGV0IHJnX3RleHQgPSBmaWxlbmFtZV92YWxpZGF0aW9uO1xuICBsZXQgcmVnZXggPSBuZXcgUmVnRXhwKHJnX3RleHQpO1xuICByZXR1cm4gcmVnZXgudGVzdChmaWxlbmFtZS52YWx1ZSk7XG59KTtcblxuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgdGl0bGU6IFN0cmluZyxcbiAgZXh0OiBTdHJpbmcsXG59KTtcblxuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFtcImRvd25sb2FkXCJdKTtcblxuY29uc3Qgc2hvdyA9IChuYW1lKSA9PiB7XG4gIGlmIChuYW1lID09IG51bGwpIHsgbmFtZSA9IFwiXCI7IH1cbiAgLyogUmVwbGFjZSBhbGwgY2hhcmFjdGVycyB3aXRoIF8gZm9yIEVYQ0VQVCBudW1iZXIgYW5kIGxldHRlcnMgKi9cbiAgbmFtZSA9IG5hbWUucmVwbGFjZUFsbCgvW15hLXpBLVowLTldL2csICdfJyk7XG4gIGZpbGVuYW1lLnZhbHVlID0gbmFtZTtcbiAgbW9kYWxfaWQudmFsdWUuc2hvdygpO1xufTtcblxuZnVuY3Rpb24gZG93bmxvYWQoKSB7XG4gIGxldCBuYW1lID0gYCR7ZmlsZW5hbWUudmFsdWV9LiR7cHJvcHMuZXh0fWA7XG4gIGVtaXQoJ2Rvd25sb2FkJywgbmFtZSk7XG4gIGNsb3NlKCk7XG59XG5cbmNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICBtb2RhbF9pZC52YWx1ZS5jbG9zZSgpO1xufTtcblxuZGVmaW5lRXhwb3NlKHsgc2hvdywgY2xvc2UgfSk7XG5cbm9uTW91bnRlZCgoKSA9PiB7XG59KTtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG5pbnB1dDppbnZhbGlkIHtcbiAgYm9yZGVyLWNvbG9yOiAjZmYwMDAwO1xufVxuXG4ubm90LWFsbG93ZWQge1xuICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xufVxuPC9zdHlsZT5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG48ZGl2IHYtaWY9XCJ0cnVlXCI+XG4gIDwhLS0gPHNsb3QgbmFtZT1cIm1lbnVcIj48L3Nsb3Q+IC0tPlxuPC9kaXY+XG48ZGl2PlxuICA8dGFibGUgcmVmPVwidGFibGVfaWRcIiBjbGFzcz1cInRhYmxlIHctMTAwIHRhYmxlLXN0cmlwZWQgdGFibGUtaG92ZXIgdGFibGUtYm9yZGVyZWRcIj5cbiAgPHRoZWFkPlxuICAgIDx0cj5cbiAgICAgIDx0aCBjbGFzcz1cInRleHQtY2VudGVyXCIgdi1mb3I9XCJpdGVtIGluIGNvbHVtbnNfY29uZmlnXCI+e3sgaXRlbS5jb2x1bW5OYW1lIH19PC90aD5cbiAgICA8L3RyPlxuICA8L3RoZWFkPlxuICA8dGJvZHk+PC90Ym9keT5cbjwvdGFibGU+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgb25CZWZvcmVVbm1vdW50LCB3YXRjaCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzXCI7XG5pbXBvcnQgeyB1c2VTbG90cywgcmVuZGVyLCBnZXRDdXJyZW50SW5zdGFuY2UgfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgcmVuZGVyX2NvbXBvbmVudCB9IGZyb20gXCIuL250b3BfdXRpbHMuanNcIjtcblxuY29uc3QgaW5zdGFuY2UgPSBnZXRDdXJyZW50SW5zdGFuY2UoKTtcblxuY29uc3Qgc2xvdHMgPSB1c2VTbG90cygpO1xuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG5cdGlkOiBTdHJpbmcsXG5cdHRhYmxlX2J1dHRvbnM6IEFycmF5LFxuXHRjb2x1bW5zX2NvbmZpZzogQXJyYXksXG5cdGRhdGFfdXJsOiBTdHJpbmcsXG5cdGVuYWJsZV9zZWFyY2g6IEJvb2xlYW4sXG5cdGZpbHRlcl9idXR0b25zOiB7XG50eXBlOiBBcnJheSxcbnJlcXVpcmVkOiBmYWxzZSxcblx0fSxcblx0dGFibGVfY29uZmlnOiB7XG50eXBlOiBPYmplY3QsXG5yZXF1aXJlZDogZmFsc2UsXG5cdH0sXG5cdGJhc2VfdXJsOiBTdHJpbmcsXG5cdGJhc2VfcGFyYW1zOiBPYmplY3QsIFxufSk7XG5cbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbJ2RyYXdlZCddKVxuXG4vKiBBZGQgbGFzdCBzb3J0aW5nIHByZWZlcmVuY2VzIHRvIHRoZSBicm93c2VyIGNhY2hlIGluIG9yZGVyIHRvIHJlbG9hZCBpdCB0aGUgbmV4dCB0aW1lICovXG5jb25zdCBzYXZlX2xhc3Rfc29ydCA9IChsYXN0X3NvcnRpbmcsIGlkKSA9PiB7XG5cdGlmKGlkIHx8IHByb3BzLmlkKSB7XG5cdFx0LyogRG8gbm90IHNhdmUgdGhlIHNvcnRpbmcgaWYgdGhlIGRpcmVjdGlvbiBpcyB1bmRlZmluZWQgKi9cblx0XHRpZihsYXN0X3NvcnRpbmcuZGlyICE9IHVuZGVmaW5lZCkge1xuXHRcdFx0Y29uc3Qgc29ydGluZ19wcmVmID0gW2xhc3Rfc29ydGluZy5jb2wsIGxhc3Rfc29ydGluZy5kaXJdO1xuXHRcdFx0Y29uc3Qgc29ydGluZ19rZXkgPSBgJHtpZCB8fCBwcm9wcy5pZH1fc29ydGluZ19wcmVmZXJlbmNlc2Bcblx0XHRcdFxuXHRcdFx0LyogVXNlIHRoZSBsb2NhbCBzdG9yYWdlIGZvciB0aGUgc29ydGluZyBwcmVmZXJlbmNlcyAqL1xuXHRcdFx0bG9jYWxTdG9yYWdlLnNldEl0ZW0oc29ydGluZ19rZXksIHNvcnRpbmdfcHJlZik7XG5cdFx0fVxuXHR9XG59XG5cbmNvbnN0IGxvYWRfbGFzdF9zb3J0ID0gKGlkKSA9PiB7XG5cdGxldCBzb3J0aW5nX3ByZWYgPSBudWxsO1xuXHRpZihpZCB8fCBwcm9wcy5pZCkge1xuXHRcdGNvbnN0IHNvcnRpbmdfa2V5ID0gYCR7aWQgfHwgcHJvcHMuaWR9X3NvcnRpbmdfcHJlZmVyZW5jZXNgXG5cblx0XHQvKiBVc2UgdGhlIGxvY2FsIHN0b3JhZ2UgZm9yIHRoZSBzb3J0aW5nIHByZWZlcmVuY2VzICovXG5cdFx0Y29uc3QgdW5mb3JtYXR0ZWRfcHJlZiA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKHNvcnRpbmdfa2V5KTtcblx0XHRpZih1bmZvcm1hdHRlZF9wcmVmKSB7XG5cdFx0XHRjb25zdCBzcGxpdHRlZF9wcmVmID0gdW5mb3JtYXR0ZWRfcHJlZi5zcGxpdCgnLCcpO1xuXHRcdFx0aWYoc3BsaXR0ZWRfcHJlZi5sZW5ndGggPT0gMikge1xuXHRcdFx0XHRzb3J0aW5nX3ByZWYgPSBbIE51bWJlcihzcGxpdHRlZF9wcmVmWzBdKSwgc3BsaXR0ZWRfcHJlZlsxXSBdO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBzb3J0aW5nX3ByZWY7XG59XG5cbmxldCBuZXdfcGFyYW1zID0gcHJvcHMuYmFzZV9wYXJhbXNcbmNvbnN0IHRhYmxlX2lkID0gcmVmKG51bGwpO1xuLyogSW4gY2FzZSBubyBzb3J0aW5nIGlzIHByb3ZpZGVkIHVzZSB0aGUgZGVmYXVsdF9zb3J0aW5nICovXG5jb25zdCBsYXN0X3NvcnRpbmcgPSBsb2FkX2xhc3Rfc29ydCgpIHx8IFswLCBcImFzY1wiXTtcblxuZnVuY3Rpb24gbG9hZERhdGF0YWJsZSgpIHtcbiAgICBsZXQgdXBkYXRlZCA9IGZhbHNlO1xuICAgIC8qIENyZWF0ZSBhIGRhdGF0YWJsZSB3aXRoIHRoZSBidXR0b25zICovXG4gICAgbGV0IGV4dGVuZF9jb25maWcgPSB7XG5cdHNlcnZlclNpZGU6IGZhbHNlLFxuXHRzY3JvbGxYOiBmYWxzZSxcblx0ZGVzdHJveTogdHJ1ZSxcblx0c2VhcmNoaW5nOiBwcm9wcy5lbmFibGVfc2VhcmNoLFxuXHRvcmRlcjogW2xhc3Rfc29ydGluZ10sXG5cdHBhZ2luZ1R5cGU6ICdmdWxsX251bWJlcnMnLFxuXHQvL2NvbHVtbkRlZnM6IHByb3BzLmNvbHVtbnNfY29uZmlnLFxuXHRjb2x1bW5zOiBwcm9wcy5jb2x1bW5zX2NvbmZpZyxcblx0YXV0b1dpZHRoOiBmYWxzZSxcblx0cmVzcG9uc2l2ZTogdHJ1ZSxcblx0YWpheDoge1xuXHQgICAgbWV0aG9kOiAnZ2V0Jyxcblx0ICAgIHVybDogcHJvcHMuZGF0YV91cmwsXG5cdCAgICBkYXRhU3JjOiAncnNwJyxcblx0ICAgIGRhdGE6IChkYXRhLCBzZXR0aW5ncykgPT4ge1xuXHRcdGlmKE9iamVjdC5rZXlzKGRhdGEpLmxlbmd0aCA9PSAwKSB7XG5cdFx0ICAgIHJldHVybjtcblx0XHR9XG5cdFx0XG5cdFx0Y29uc3QgdGFibGVBcGkgPSBzZXR0aW5ncy5vSW5zdGFuY2UuYXBpKCk7XG5cdFx0Y29uc3Qgb3JkZXJDb2x1bW5JbmRleCA9IGRhdGEub3JkZXJbMF0uY29sdW1uO1xuXHRcdGNvbnN0IG9yZGVyQ29sdW1uTmFtZSA9IHRhYmxlQXBpLmNvbHVtbihvcmRlckNvbHVtbkluZGV4KS5uYW1lKCkgfHwgdW5kZWZpbmVkO1xuXHRcdFxuXHRcdGlmIChkYXRhLm9yZGVyKSB7XG5cdFx0ICAgIGRhdGEub3JkZXIgPSBkYXRhLm9yZGVyWzBdLmRpcjtcblx0XHQgICAgZGF0YS5zb3J0ID0gb3JkZXJDb2x1bW5OYW1lO1xuXHRcdH1cblx0XHRcblx0XHRpZiAoZGF0YS5jb2x1bW5zICE9PSB1bmRlZmluZWQpIHtcblx0XHQgICAgZGVsZXRlIGRhdGEuY29sdW1ucztcblx0XHR9XG5cdFx0XG5cdFx0aWYgKGRhdGEuc2VhcmNoICE9PSB1bmRlZmluZWQpIHtcblx0XHQgICAgZGF0YS5tYXBfc2VhcmNoID0gZGF0YS5zZWFyY2gudmFsdWU7XG5cdFx0ICAgIGRlbGV0ZSBkYXRhLnNlYXJjaDtcblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIGRhdGE7XG5cdCAgICB9LFxuXHQgICAgYmVmb3JlU2VuZDogZnVuY3Rpb24oKSB7XG5cdFx0TnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuXHQgICAgfSxcblx0fSxcblx0ZHJhd0NhbGxiYWNrOiBmdW5jdGlvbiAoc2V0dGluZ3MpIHtcblx0ICAgIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKTtcblx0ICAgIGVtaXQoJ2RyYXdlZCcpO1xuXHQgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfY3VzdG9tX2V2ZW50KG50b3BuZ19jdXN0b21fZXZlbnRzLkRBVEFUQUJMRV9MT0FERUQpO1x0XHQgXG5cdFx0IHNhdmVfbGFzdF9zb3J0KHNldHRpbmdzLmFMYXN0U29ydFswXSk7XG5cdH1cbiAgICB9O1xuICAgIGZvciAoY29uc3QgaXRlbSBpbiAocHJvcHMudGFibGVfY29uZmlnIHx8IHt9KSkge1xuXHRleHRlbmRfY29uZmlnW2l0ZW1dID0gcHJvcHMudGFibGVfY29uZmlnW2l0ZW1dXG4gICAgfVxuICAgIFxuICAgIGxldCBjb25maWcgPSBEYXRhVGFibGVVdGlscy5nZXRTdGREYXRhdGFibGVDb25maWcocHJvcHMudGFibGVfYnV0dG9ucyk7XG4gICAgY29uZmlnID0gRGF0YVRhYmxlVXRpbHMuZXh0ZW5kQ29uZmlnKGNvbmZpZywgZXh0ZW5kX2NvbmZpZyk7XG4gICAgdGFibGUgPSAkKHRhYmxlX2lkLnZhbHVlKS5EYXRhVGFibGUoY29uZmlnKTtcblx0IGxvYWRfdGFibGVfbWVudSgpO1xuICAgIGZvciAoY29uc3QgZmlsdGVyIG9mIChwcm9wcy5maWx0ZXJfYnV0dG9ucyB8fCBbXSkpIHtcblx0LyogU2V0IGZpbHRlcnMgdG8gYWN0aXZlIGlmIGF2YWlsYWJsZSBpbiB0aGUgdXJsICovXG5cdGNvbnN0IGN1cnJfdmFsdWUgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShmaWx0ZXIuZmlsdGVyTWVudUtleSlcblx0aWYoY3Vycl92YWx1ZSAmJiBjdXJyX3ZhbHVlICE9ICcnKSB7XG5cdCAgICBsZXQgbnVtX25vbl9hY3RpdmVfZW50cmllcyA9IDBcblx0ICAgIGZpbHRlci5maWx0ZXJzLmZvckVhY2goKGkpID0+IHtcblx0XHRpLmN1cnJlbnRseV9hY3RpdmUgPSBmYWxzZVxuXHRcdG51bV9ub25fYWN0aXZlX2VudHJpZXMgKz0gMVxuXHRcdGlmKGkuaWQgPT0gY3Vycl92YWx1ZSkge1xuXHRcdCAgICBpLmN1cnJlbnRseV9hY3RpdmUgPSB0cnVlXG5cdFx0ICAgIG51bV9ub25fYWN0aXZlX2VudHJpZXMgLT0gMVxuXHRcdH1cblx0ICAgIH0pXG5cdCAgICBcblx0ICAgIGlmKG51bV9ub25fYWN0aXZlX2VudHJpZXMgPT0gZmlsdGVyLmZpbHRlcnMubGVuZ3RoKSB7XG5cdFx0bnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKGZpbHRlci5maWx0ZXJNZW51S2V5LCAnJyk7XG5cdFx0dXBkYXRlZCA9IHRydWVcblx0ICAgIH1cblx0fVxuXHRcblx0bmV3IERhdGFUYWJsZUZpbHRlcnNNZW51KHtcblx0ICAgIGZpbHRlclRpdGxlOiBmaWx0ZXIuZmlsdGVyVGl0bGUsXG5cdCAgICB0YWJsZUFQSTogdGFibGUsXG5cdCAgICBmaWx0ZXJzOiBmaWx0ZXIuZmlsdGVycyxcblx0ICAgIGZpbHRlck1lbnVLZXk6IGZpbHRlci5maWx0ZXJNZW51S2V5LFxuXHQgICAgY29sdW1uSW5kZXg6IGZpbHRlci5jb2x1bW5JbmRleCxcblx0ICAgIHVybDogcHJvcHMuZGF0YV91cmwsXG5cdCAgICBpZDogZmlsdGVyLmlkLFxuXHQgICAgcmVtb3ZlQWxsRW50cnk6IGZpbHRlci5yZW1vdmVBbGxFbnRyeSxcblx0ICAgIGNhbGxiYWNrRnVuY3Rpb246IGZpbHRlci5jYWxsYmFja0Z1bmN0aW9uXG5cdH0pLmluaXQoKTtcbiAgICB9XG4gICAgXG4gICAgaWYodXBkYXRlZCAmJiBwcm9wcy5iYXNlX3BhcmFtcykge1xuXHRjb25zdCBlbnRyaWVzID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cmllcygpXG5cdGZvcihjb25zdCBba2V5LCB2YWx1ZV0gb2YgKGVudHJpZXMpKSB7XG5cdCAgICBuZXdfcGFyYW1zW2tleV0gPSB2YWx1ZVxuXHR9XG5cdHRhYmxlLmFqYXgudXJsKE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL2dldF9tYXAubHVhYCwgbmV3X3BhcmFtcykpXG5cdHJlbG9hZCgpXG4gICAgfVxufVxuXG5sZXQgdGFibGUgPSBudWxsO1xub25Nb3VudGVkKCgpID0+IHtcbiAgICBsb2FkRGF0YXRhYmxlKClcbn0pO1xuXG5mdW5jdGlvbiBnZXRfdGFibGVfZGVmYXVsdF9tZW51KCkge1xuICAgIGlmICh0YWJsZSA9PSBudWxsKSB7IHJldHVybjsgfVxuICAgIGxldCB0YWJsZV93cmFwcGVyID0gJCh0YWJsZS5jb250ZXh0WzBdLm5UYWJsZVdyYXBwZXIpO1xuICAgIHJldHVybiAkKCQoXCIucm93IC50ZXh0LWVuZFwiLCB0YWJsZV93cmFwcGVyKS5jaGlsZHJlbigpWzBdKTs7XG59XG5cbmZ1bmN0aW9uIHNlYXJjaF92YWx1ZSh2YWx1ZV90b19zZWFyY2gpIHtcblx0aWYgKHRhYmxlID09IG51bGwpIHsgcmV0dXJuOyB9XG5cdHRhYmxlLnNlYXJjaCh2YWx1ZV90b19zZWFyY2gpLmRyYXcoKTtcbn1cblxubGV0IHRhYmxlX2RlZmF1bHRfbWVudSA9IG51bGw7XG5mdW5jdGlvbiBsb2FkX3RhYmxlX21lbnUoKSB7XG4gICAgaWYgKHRhYmxlX2RlZmF1bHRfbWVudSA9PSBudWxsKSB7XG5cdHRhYmxlX2RlZmF1bHRfbWVudSA9IGdldF90YWJsZV9kZWZhdWx0X21lbnUoKTtcbiAgICB9XG4gICAgaWYgKHNsb3RzID09IG51bGwgfHwgc2xvdHMubWVudSA9PSBudWxsKSB7IHJldHVybjsgfVxuICAgIGxldCBtZW51X2FycmF5ID0gc2xvdHMubWVudSgpO1xuICAgIGlmIChtZW51X2FycmF5ID09IG51bGwgfHwgbWVudV9hcnJheS5sZW5ndGggPT0gMCkgeyByZXR1cm47IH1cbiAgICBsZXQgbm9kZSA9IHNsb3RzLm1lbnUoKVswXTtcbiAgICBsZXQgZWxlbWVudCA9ICQoXCI8ZGl2IGNsYXNzPSdkLWlubGluZS1ibG9jayc+PC9kaXY+XCIpWzBdO1xuICAgIGNvbnN0IHsgdk5vZGUsIGVsIH0gPSByZW5kZXJfY29tcG9uZW50KG5vZGUsIHsgYXBwOiAgaW5zdGFuY2U/LmFwcENvbnRleHQ/LmFwcCwgZWxlbWVudCB9KTtcbiAgICAvLyBjb25zdCB7IHZOb2RlLCBlbCB9ID0gcmVuZGVyX2NvbXBvbmVudChUZXN0LCB7IGFwcDogIGluc3RhbmNlLmFwcENvbnRleHQuYXBwIH0pO1xuICAgIGxldCB0YWJsZV93cmFwcGVyID0gJCh0YWJsZS5jb250ZXh0WzBdLm5UYWJsZVdyYXBwZXIpO1xuICAgICQoJChcIi5yb3cgLnRleHQtZW5kXCIsIHRhYmxlX3dyYXBwZXIpLmNoaWxkcmVuKClbMF0pLmFwcGVuZChlbCk7XG59XG5cbmNvbnN0IHJlbG9hZCA9ICgpID0+IHtcbiAgICBpZiAodGFibGUgPT0gbnVsbCkgeyByZXR1cm47IH1cbiAgICB0YWJsZS5hamF4LnJlbG9hZCgpO1xufVxuXG5jb25zdCB1cGRhdGVfdXJsID0gKG5ld191cmwpID0+IHtcbiAgICBpZiAodGFibGUgPT0gbnVsbCkgeyByZXR1cm47IH1cbiAgICB0YWJsZS5hamF4LnVybChuZXdfdXJsKTtcbn1cblxuY29uc3QgZGVsZXRlX2J1dHRvbl9oYW5kbGVycyA9IChoYW5kbGVySWQpID0+IHtcbiAgICBEYXRhVGFibGVVdGlscy5kZWxldGVCdXR0b25IYW5kbGVycyhoYW5kbGVySWQpO1xufTtcblxubGV0IGlzX2Rlc3Ryb3llZCA9IGZhbHNlO1xuXG5jb25zdCBkZXN0cm95X3RhYmxlID0gKCkgPT4ge1xuICAgIHRhYmxlLmNsZWFyKCk7XG4gICAgdGFibGUuZGVzdHJveSh0cnVlKTtcbiAgICBpc19kZXN0cm95ZWQgPSB0cnVlO1xuICAgIHByb3BzLmNvbHVtbnNfY29uZmlnLmZpbHRlcigoY29uZmlnKSA9PiBjb25maWcuaGFuZGxlcklkICE9IG51bGwpLmZvckVhY2goKGNvbmZpZykgPT4ge1xuXHRkZWxldGVfYnV0dG9uX2hhbmRsZXJzKGNvbmZpZy5oYW5kbGVySWQpO1xuICAgIH0pO1xufTtcblxuY29uc3QgcmVmcmVzaF9tZW51ID0gKCkgPT4ge1xuICAgIGxldCB0YWJsZV93cmFwcGVyID0gJCh0YWJsZS5jb250ZXh0WzBdLm5UYWJsZVdyYXBwZXIpO1xuICAgICQoJChcIi5yb3cgLnRleHQtZW5kXCIsIHRhYmxlX3dyYXBwZXIpLmNoaWxkcmVuKClbMF0pLmh0bWwoXCJcIik7XG4gICAgbG9hZF90YWJsZV9tZW51KCk7XG59O1xuXG5jb25zdCBpc19sYXN0X3NvcnRpbmdfYXZhaWxhYmxlID0gKGlkKSA9PiB7XG5cdHJldHVybiBsb2FkX2xhc3Rfc29ydChpZCkgIT0gbnVsbDtcbn1cblxuZGVmaW5lRXhwb3NlKHsgcmVsb2FkLCBkZWxldGVfYnV0dG9uX2hhbmRsZXJzLCBkZXN0cm95X3RhYmxlLCB1cGRhdGVfdXJsLCByZWZyZXNoX21lbnUsIGlzX2xhc3Rfc29ydGluZ19hdmFpbGFibGUsIGxvYWRfbGFzdF9zb3J0LCBzYXZlX2xhc3Rfc29ydCwgc2VhcmNoX3ZhbHVlIH0pO1xuXG5vbkJlZm9yZVVubW91bnQoKCkgPT4ge1xuICAgIGlmIChpc19kZXN0cm95ZWQgPT0gdHJ1ZSkgeyByZXR1cm47IH1cbiAgICBkZXN0cm95X3RhYmxlKCk7XG4gICAgLy8gdGFibGUuZGVzdHJveSh0cnVlKTtcbn0pO1xuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbjwvc3R5bGU+XG4iLCJpbXBvcnQgeyByZW5kZXIsIGNyZWF0ZVZOb2RlIH0gZnJvbSAndnVlJztcblxuZXhwb3J0IGNvbnN0IHJlbmRlcl9jb21wb25lbnQgPSBmdW5jdGlvbihjb21wb25lbnQsIHsgcHJvcHMsIGNoaWxkcmVuLCBlbGVtZW50LCBhcHAgfSA9IHt9KSB7XG4gICAgbGV0IGVsID0gZWxlbWVudFxuICAgIGxldCB2Tm9kZSA9IGNyZWF0ZVZOb2RlKGNvbXBvbmVudCwgcHJvcHMsIGNoaWxkcmVuKVxuICAgIGlmIChhcHAgJiYgYXBwLl9jb250ZXh0KSB2Tm9kZS5hcHBDb250ZXh0ID0gYXBwLl9jb250ZXh0XG4gICAgaWYgKGVsKSByZW5kZXIodk5vZGUsIGVsKVxuICAgIGVsc2UgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgKSByZW5kZXIodk5vZGUsIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpXG4gICAgXG4gICAgY29uc3QgZGVzdHJveSA9ICgpID0+IHtcblx0aWYgKGVsKSByZW5kZXIobnVsbCwgZWwpXG5cdGVsID0gbnVsbFxuXHR2Tm9kZSA9IG51bGxcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHsgdk5vZGUsIGRlc3Ryb3ksIGVsIH1cbn07XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuICAgIDxkaXYgY2xhc3M9XCJjb2wtMTIgbWItMiBtdC0yXCI+XG4gICAgICAgIDxBbGVydEluZm8+PC9BbGVydEluZm8+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkIGgtMTAwIG92ZXJmbG93LWhpZGRlblwiPlxuICAgICAgICAgICAgPERhdGVUaW1lUmFuZ2VQaWNrZXIgc3R5bGU9XCJtYXJnaW4tdG9wOjAuNXJlbTtcIiBjbGFzcz1cIm1zLTFcIiA6aWQ9XCJpZF9kYXRlX3RpbWVfcGlja2VyXCIgOmVuYWJsZV9yZWZyZXNoPVwidHJ1ZVwiXG4gICAgICAgICAgICAgICAgcmVmPVwiZGF0ZV90aW1lX3BpY2tlclwiIEBlcG9jaF9jaGFuZ2U9XCJlcG9jaF9jaGFuZ2VcIiA6bWluX3RpbWVfaW50ZXJ2YWxfaWQ9XCJtaW5fdGltZV9pbnRlcnZhbF9pZFwiXG4gICAgICAgICAgICAgICAgOmN1c3RvbV90aW1lX2ludGVydmFsX2xpc3Q9XCJ0aW1lX3ByZXNldF9saXN0XCI+XG4gICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDpiZWdpbj5cbiAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6ZXh0cmFfYnV0dG9ucz5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB2LWlmPVwiZW5hYmxlX3NuYXBzaG90c1wiIGNsYXNzPVwiYnRuIGJ0bi1saW5rIGJ0bi1zbVwiIEBjbGljaz1cInNob3dfbW9kYWxfc25hcHNob3RcIlxuICAgICAgICAgICAgICAgICAgICAgICAgOnRpdGxlPVwiX2kxOG4oJ3BhZ2Vfc3RhdHMubWFuYWdlX3NuYXBzaG90c19idG4nKVwiPjxpIGNsYXNzPVwiZmFzIGZhLWxnIGZhLWNhbWVyYS1yZXRyb1wiPjwvaT48L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB2LWlmPVwidHJhZmZpY19leHRyYWN0aW9uX3Blcm1pdHRlZFwiIGNsYXNzPVwiYnRuIGJ0bi1saW5rIGJ0bi1zbVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBAY2xpY2s9XCJzaG93X21vZGFsX3RyYWZmaWNfZXh0cmFjdGlvblwiIDp0aXRsZT1cIl9pMThuKCd0cmFmZmljX3JlY29yZGluZy5wY2FwX2Rvd25sb2FkJylcIj48aVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiZmFzIGZhLWxnIGZhLWRvd25sb2FkXCI+PC9pPjwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIDpkaXNhYmxlZD1cImlzX3NhZmFyaVwiIGNsYXNzPVwiYnRuIGJ0bi1saW5rIGJ0bi1zbVwiIEBjbGljaz1cInNob3dfbW9kYWxfZG93bmxvYWRfZmlsZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICA6dGl0bGU9XCJpbWFnZV9idXR0b25fdGl0bGVcIj48aVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiZmFzIGZhLWxnIGZhLWZpbGUtaW1hZ2VcIj48L2k+PC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gdi1pZj1cImlzX2hpc3RvcnlfZW5hYmxlZFwiIGNsYXNzPVwiYnRuIGJ0bi1saW5rIGJ0bi1zbVwiIEBjbGljaz1cImp1bXBfdG9faGlzdG9yaWNhbF9mbG93c1wiXG4gICAgICAgICAgICAgICAgICAgICAgICA6dGl0bGU9XCJfaTE4bigncGFnZV9zdGF0cy5oaXN0b3JpY2FsX2Zsb3dzJylcIj48aSBjbGFzcz1cImZhcyBmYS1sZyBmYS10YWJsZVwiPjwvaT48L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgPC9EYXRlVGltZVJhbmdlUGlja2VyPlxuICAgICAgICAgICAgPCEtLSBzZWxlY3QgbWV0cmljIC0tPlxuICAgICAgICAgICAgPGRpdiB2LXNob3c9XCJ0c19tZW51X3JlYWR5XCIgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTEgbWUtMSBtdC0xXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImlubGluZSBzZWxlY3QyLXNpemUgbWUtMiBtdC0yXCI+XG4gICAgICAgICAgICAgICAgICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF9tZXRyaWNcIiA6b3B0aW9ucz1cIm1ldHJpY3NcIlxuICAgICAgICAgICAgICAgICAgICAgICAgQHNlbGVjdF9vcHRpb249XCJzZWxlY3RfbWV0cmljXCI+XG4gICAgICAgICAgICAgICAgICAgIDwvU2VsZWN0U2VhcmNoPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbmxpbmUgc2VsZWN0Mi1zaXplIG1lLTIgbXQtMlwiPlxuICAgICAgICAgICAgICAgICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwiY3VycmVudF9ncm91cHNfb3B0aW9uc19tb2RlXCIgOm9wdGlvbnM9XCJncm91cHNfb3B0aW9uc19tb2Rlc1wiXG4gICAgICAgICAgICAgICAgICAgICAgICBAc2VsZWN0X29wdGlvbj1cImNoYW5nZV9ncm91cHNfb3B0aW9uc19tb2RlXCI+XG4gICAgICAgICAgICAgICAgICAgIDwvU2VsZWN0U2VhcmNoPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cInNob3dfbWFuYWdlX3RpbWVzZXJpZXNcIiBjbGFzcz1cImJ0biBidG4tc20gYnRuLXByaW1hcnkgaW5saW5lXCJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9J3ZlcnRpY2FsLWFsaWduOiBzdXBlcjsnIHYtaWY9XCJpc19udG9wX3Byb1wiPlxuICAgICAgICAgICAgICAgICAgICBNYW5hZ2UgVGltZXNlcmllc1xuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuXG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPHRlbXBsYXRlIHYtZm9yPVwiKGl0ZW0sIGkpIGluIGNoYXJ0c19vcHRpb25zX2l0ZW1zXCIgOmtleT1cIml0ZW0ua2V5XCI+XG4gICAgICAgICAgICAgICAgPFRpbWVzZXJpZXNDaGFydCA6aWQ9XCJpZF9jaGFydCArIGlcIiA6cmVmPVwiZWwgPT4geyBjaGFydHNbaV0gPSBlbCB9XCIgOmNoYXJ0X3R5cGU9XCJjaGFydF90eXBlXCJcbiAgICAgICAgICAgICAgICAgICAgOnJlZ2lzdGVyX29uX3N0YXR1c19jaGFuZ2U9XCJmYWxzZVwiIDpnZXRfY3VzdG9tX2NoYXJ0X29wdGlvbnM9XCJnZXRfZl9nZXRfY3VzdG9tX2NoYXJ0X29wdGlvbnMoaSlcIlxuICAgICAgICAgICAgICAgICAgICBAem9vbT1cImVwb2NoX2NoYW5nZVwiIEBjaGFydF9yZWxvYWRlZD1cImNoYXJ0X3JlbG9hZGVkXCI+XG4gICAgICAgICAgICAgICAgPC9UaW1lc2VyaWVzQ2hhcnQ+XG4gICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzPVwibXQtNCBjYXJkIGNhcmQtc2hhZG93XCIgdi1pZj1cImVuYWJsZV9zdGF0c190YWJsZVwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgICAgICAgICAgIDxCb290c3RyYXBUYWJsZSBpZD1cInBhZ2Vfc3RhdHNfYm9vdHN0cmFwX3RhYmxlXCIgOmNvbHVtbnM9XCJzdGF0c19jb2x1bW5zXCIgOnJvd3M9XCJzdGF0c19yb3dzXCJcbiAgICAgICAgICAgICAgICAgICAgOnByaW50X2h0bWxfY29sdW1uPVwiKGNvbCkgPT4gcHJpbnRfc3RhdHNfY29sdW1uKGNvbClcIlxuICAgICAgICAgICAgICAgICAgICA6cHJpbnRfaHRtbF9yb3c9XCIoY29sLCByb3cpID0+IHByaW50X3N0YXRzX3Jvdyhjb2wsIHJvdylcIj5cbiAgICAgICAgICAgICAgICA8L0Jvb3RzdHJhcFRhYmxlPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJtdC00IGNhcmQgY2FyZC1zaGFkb3dcIiB2LWlmPVwiaXNfbnRvcF9wcm9cIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IHYtaWY9XCJzZWxlY3RlZF90b3BfdGFibGU/LnRhYmxlX2NvbmZpZ19kZWZcIiBjbGFzcz1cImlubGluZSBzZWxlY3QyLXNpemUgbWUtMiBtdC0yXCI+XG4gICAgICAgICAgICAgICAgICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF90b3BfdGFibGVcIiA6b3B0aW9ucz1cInRvcF90YWJsZV9vcHRpb25zXCI+XG4gICAgICAgICAgICAgICAgICAgIDwvU2VsZWN0U2VhcmNoPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxEYXRhdGFibGUgdi1pZj1cInNlbGVjdGVkX3RvcF90YWJsZT8udGFibGVfY29uZmlnX2RlZlwiIDprZXk9XCJzZWxlY3RlZF90b3BfdGFibGU/LnZhbHVlXCIgcmVmPVwidG9wX3RhYmxlX3JlZlwiXG4gICAgICAgICAgICAgICAgICAgIDp0YWJsZV9idXR0b25zPVwic2VsZWN0ZWRfdG9wX3RhYmxlLnRhYmxlX2NvbmZpZ19kZWYudGFibGVfYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgICAgOmNvbHVtbnNfY29uZmlnPVwic2VsZWN0ZWRfdG9wX3RhYmxlLnRhYmxlX2NvbmZpZ19kZWYuY29sdW1uc19jb25maWdcIlxuICAgICAgICAgICAgICAgICAgICA6ZGF0YV91cmw9XCJzZWxlY3RlZF90b3BfdGFibGUudGFibGVfY29uZmlnX2RlZi5kYXRhX3VybFwiXG4gICAgICAgICAgICAgICAgICAgIDplbmFibGVfc2VhcmNoPVwic2VsZWN0ZWRfdG9wX3RhYmxlLnRhYmxlX2NvbmZpZ19kZWYuZW5hYmxlX3NlYXJjaFwiXG4gICAgICAgICAgICAgICAgICAgIDp0YWJsZV9jb25maWc9XCJzZWxlY3RlZF90b3BfdGFibGUudGFibGVfY29uZmlnX2RlZi50YWJsZV9jb25maWdcIj5cbiAgICAgICAgICAgICAgICA8L0RhdGF0YWJsZT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cblxuICAgIDxNb2RhbFNuYXBzaG90IHYtaWY9XCJlbmFibGVfc25hcHNob3RzXCIgcmVmPVwibW9kYWxfc25hcHNob3RcIiA6Y3NyZj1cImNzcmZcIiA6cGFnZT1cInBhZ2Vfc25hcHNob3RzXCJcbiAgICAgICAgQGFkZGVkX3NuYXBzaG90PVwicmVmcmVzaF9zbmFwc2hvdHNcIiBAZGVsZXRlZF9zbmFwc2hvdHM9XCJyZWZyZXNoX3NuYXBzaG90c1wiXG4gICAgICAgIEBkZWxldGVkX2FsbF9zbmFwc2hvdHM9XCJyZWZyZXNoX3NuYXBzaG90c1wiPlxuICAgIDwvTW9kYWxTbmFwc2hvdD5cblxuICAgIDxNb2RhbFRpbWVzZXJpZXMgdi1pZj1cImlzX250b3BfcHJvXCIgcmVmPVwibW9kYWxfdGltZXNlcmllc1wiIDpzb3VyY2VzX3R5cGVzX2VuYWJsZWQ9XCJzb3VyY2VzX3R5cGVzX2VuYWJsZWRcIlxuICAgICAgICBAYXBwbHk9XCJhcHBseV9tb2RhbF90aW1lc2VyaWVzXCI+XG4gICAgPC9Nb2RhbFRpbWVzZXJpZXM+XG5cbiAgICA8TW9kYWxUcmFmZmljRXh0cmFjdGlvbiBpZD1cInBhZ2Vfc3RhdHNfbW9kYWxfdHJhZmZpY19leHRyYWN0aW9uXCIgcmVmPVwibW9kYWxfdHJhZmZpY19leHRyYWN0aW9uXCI+XG4gICAgPC9Nb2RhbFRyYWZmaWNFeHRyYWN0aW9uPlxuXG4gICAgPE1vZGFsRG93bmxvYWRGaWxlIHJlZj1cIm1vZGFsX2Rvd25sb2FkX2ZpbGVcIiA6dGl0bGU9XCJfaTE4bigncGFnZV9zdGF0cy50aXRsZV9tb2RhbF9kb3dubG9hZF9maWxlJylcIiBleHQ9XCJwbmdcIlxuICAgICAgICBAZG93bmxvYWQ9XCJkb3dubG9hZF9jaGFydF9wbmdcIj5cbiAgICA8L01vZGFsRG93bmxvYWRGaWxlPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBvbkJlZm9yZU1vdW50LCBjb21wdXRlZCwgd2F0Y2ggfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFRpbWVzZXJpZXNDaGFydCB9IGZyb20gXCIuL3RpbWVzZXJpZXMtY2hhcnQudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIERhdGVUaW1lUmFuZ2VQaWNrZXIgfSBmcm9tIFwiLi9kYXRlLXRpbWUtcmFuZ2UtcGlja2VyLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbFNuYXBzaG90IH0gZnJvbSBcIi4vbW9kYWwtc25hcHNob3QudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsVGltZXNlcmllcyB9IGZyb20gXCIuL21vZGFsLXRpbWVzZXJpZXMudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsVHJhZmZpY0V4dHJhY3Rpb24gfSBmcm9tIFwiLi9tb2RhbC10cmFmZmljLWV4dHJhY3Rpb24udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRG93bmxvYWRGaWxlIH0gZnJvbSBcIi4vbW9kYWwtZG93bmxvYWQtZmlsZS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgQWxlcnRJbmZvIH0gZnJvbSBcIi4vYWxlcnQtaW5mby52dWVcIjtcblxuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRhdGFibGUgfSBmcm9tIFwiLi9kYXRhdGFibGUudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIEJvb3RzdHJhcFRhYmxlIH0gZnJvbSBcIi4vYm9vdHN0cmFwLXRhYmxlLnZ1ZVwiO1xuXG5pbXBvcnQgeyBudG9wbmdfdXRpbGl0eSwgbnRvcG5nX3VybF9tYW5hZ2VyLCBudG9wbmdfc3RhdHVzX21hbmFnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcy5qc1wiO1xuaW1wb3J0IHRpbWVzZXJpZXNVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL3RpbWVzZXJpZXMtdXRpbHMuanNcIjtcbmltcG9ydCBtZXRyaWNzTWFuYWdlciBmcm9tIFwiLi4vdXRpbGl0aWVzL21ldHJpY3MtbWFuYWdlci5qc1wiO1xuaW1wb3J0IGZvcm1hdHRlclV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvZm9ybWF0dGVyLXV0aWxzXCI7XG5pbXBvcnQgTnRvcFV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvbnRvcC11dGlsc1wiO1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICBjc3JmOiBTdHJpbmcsXG4gICAgaXNfbnRvcF9wcm86IEJvb2xlYW4sXG4gICAgc291cmNlX3ZhbHVlX29iamVjdDogT2JqZWN0LFxuICAgIHNvdXJjZXNfdHlwZXNfZW5hYmxlZDogT2JqZWN0LFxuICAgIHNvdXJjZXNfdHlwZXNfdG9wX2VuYWJsZWQ6IE9iamVjdCxcbiAgICBlbmFibGVfc25hcHNob3RzOiBCb29sZWFuLFxuICAgIGlzX2hpc3RvcnlfZW5hYmxlZDogQm9vbGVhbixcbiAgICB0cmFmZmljX2V4dHJhY3Rpb25fcGVybWl0dGVkOiBCb29sZWFuLFxuICAgIGlzX2RhcmtfbW9kZTogQm9vbGVhbixcbn0pO1xuXG4vL250b3BuZ191dGlsaXR5LmNoZWNrX2FuZF9zZXRfZGVmYXVsdF90aW1lX2ludGVydmFsKCk7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5sZXQgaWRfY2hhcnQgPSBcImNoYXJ0XCI7XG5sZXQgaWRfZGF0ZV90aW1lX3BpY2tlciA9IFwiZGF0ZV90aW1lX3BpY2tlclwiO1xubGV0IGNoYXJ0X3R5cGUgPSBudG9wQ2hhcnRBcGV4LnR5cGVDaGFydC5UU19MSU5FO1xuY29uc3QgY29uZmlnX2FwcF90YWJsZSA9IHJlZih7fSk7XG5jb25zdCBpbml0X2NvbmZpZ190YWJsZSA9IHJlZihmYWxzZSk7XG5jb25zdCBjaGFydHMgPSByZWYoW10pO1xuY29uc3QgZGF0ZV90aW1lX3BpY2tlciA9IHJlZihudWxsKTtcbmNvbnN0IHRvcF90YWJsZV9yZWYgPSByZWYobnVsbCk7XG5jb25zdCBtb2RhbF90aW1lc2VyaWVzID0gcmVmKG51bGwpO1xuY29uc3QgbW9kYWxfc25hcHNob3QgPSByZWYobnVsbCk7XG5jb25zdCBtb2RhbF9kb3dubG9hZF9maWxlID0gcmVmKG51bGwpO1xuXG5jb25zdCBpc19zYWZhcmkgPSAvXigoPyFjaHJvbWV8YW5kcm9pZCkuKSpzYWZhcmkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuY29uc3QgaW1hZ2VfYnV0dG9uX3RpdGxlID0gaXNfc2FmYXJpID8gX2kxOG4oJ3BhZ2Vfc3RhdHMuZG93bmxvYWRfaW1hZ2VfZGlzYWJsZWQnKSA6IF9pMThuKCdwYWdlX3N0YXRzLnRpdGxlX21vZGFsX2Rvd25sb2FkX2ZpbGUnKTtcblxuY29uc3QgbWluX3RpbWVfaW50ZXJ2YWxfaWQgPSByZWYobnVsbCk7XG5jb25zdCBtZXRyaWNzID0gcmVmKFtdKTtcbmNvbnN0IHNlbGVjdGVkX21ldHJpYyA9IHJlZih7fSk7XG5jb25zdCBzb3VyY2VfdHlwZSA9IG1ldHJpY3NNYW5hZ2VyLmdldF9jdXJyZW50X3BhZ2Vfc291cmNlX3R5cGUoKTtcblxuY29uc3QgZW5hYmxlX3N0YXRzX3RhYmxlID0gcmVmKGZhbHNlKTtcbmNvbnN0IGVuYWJsZV90b3BfdGFibGUgPSByZWYoZmFsc2UpO1xuXG4vKipcbiAqIHsga2V5OiBpZGVudGlmaWVyIG9mIENoYXJ0IGNvbXBvbmVudCwgaWYgY2hhbmdlIENoYXJ0IHdpbGwgYmUgZGVzdHJveWVkIGFuZCByZWNyZWF0ZWQsXG4gKiAgY2hhcnRfb3B0aW9uczogY2hhcnQgb3B0aW9ucyB9W11cbiAqKi9cbmNvbnN0IGNoYXJ0c19vcHRpb25zX2l0ZW1zID0gcmVmKFtdKTtcblxuLyoqXG4gKiBNb2RlcyB0aGF0IHJlcHJlc2VudCBob3cgaXQncyBwb3NzaWJsZSBkaXNwbGF5IHRpbWVzZXJpZXMuXG4gKi9cbmNvbnN0IGdyb3Vwc19vcHRpb25zX21vZGVzID0gbnRvcG5nX3V0aWxpdHkub2JqZWN0X3RvX2FycmF5KHRpbWVzZXJpZXNVdGlscy5ncm91cHNPcHRpb25zTW9kZXNFbnVtKTtcbi8qKlxuICogQ3VycmVudCBkaXNwbGF5IHRpbWVzZXJpZXMgbW9kZS5cbiAqL1xuY29uc3QgY3VycmVudF9ncm91cHNfb3B0aW9uc19tb2RlID0gcmVmKGluaXRfZ3JvdXBzX29wdGlvbl9tb2RlKCkpO1xuXG5sZXQgbGFzdF90aW1lc2VyaWVzX2dyb3Vwc19sb2FkZWQgPSBudWxsO1xuXG5jb25zdCBjdXN0b21fbWV0cmljID0geyBsYWJlbDogaTE4bigncGFnZV9zdGF0cy5jdXN0b21fbWV0cmljcycpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9O1xuXG5jb25zdCBwYWdlX3NuYXBzaG90cyA9IFwidGltZXNlcmllc1wiO1xuXG5jb25zdCB0c19tZW51X3JlYWR5ID0gcmVmKGZhbHNlKTtcbmNvbnN0IHRpbWVfcHJlc2V0X2xpc3QgPSBbXG4gICAgeyB2YWx1ZTogXCIxMF9taW5cIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMuMTBfbWluJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlIH0sXG4gICAgeyB2YWx1ZTogXCIzMF9taW5cIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMuMzBfbWluJyksIGN1cnJlbnRseV9hY3RpdmU6IHRydWUgfSxcbiAgICB7IHZhbHVlOiBcImhvdXJcIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMuaG91cicpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgIHsgdmFsdWU6IFwiMl9ob3Vyc1wiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy4yX2hvdXJzJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlIH0sXG4gICAgeyB2YWx1ZTogXCI2X2hvdXJzXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLjZfaG91cnMnKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfSxcbiAgICB7IHZhbHVlOiBcIjEyX2hvdXJzXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLjEyX2hvdXJzJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlIH0sXG4gICAgeyB2YWx1ZTogXCJkYXlcIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMuZGF5JyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlIH0sXG4gICAgeyB2YWx1ZTogXCJ3ZWVrXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLndlZWsnKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfSxcbiAgICB7IHZhbHVlOiBcIm1vbnRoXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLm1vbnRoJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlIH0sXG4gICAgeyB2YWx1ZTogXCJ5ZWFyXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLnllYXInKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfSxcbiAgICB7IHZhbHVlOiBcImN1c3RvbVwiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy5jdXN0b20nKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UsIGRpc2FibGVkOiB0cnVlLCB9LFxuXTtcblxuZnVuY3Rpb24gaW5pdF9ncm91cHNfb3B0aW9uX21vZGUoKSB7XG4gICAgbGV0IGdyb3Vwc19tb2RlID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJ0aW1lc2VyaWVzX2dyb3Vwc19tb2RlXCIpO1xuICAgIGlmIChncm91cHNfbW9kZSAhPSBudWxsICYmIGdyb3Vwc19tb2RlICE9IFwiXCIpIHtcbiAgICAgICAgcmV0dXJuIHRpbWVzZXJpZXNVdGlscy5nZXRHcm91cE9wdGlvbk1vZGUoZ3JvdXBzX21vZGUpO1xuICAgIH1cbiAgICByZXR1cm4gZ3JvdXBzX29wdGlvbnNfbW9kZXNbMF07XG59XG5cbmZ1bmN0aW9uIHNldF9kZWZhdWx0X3NvdXJjZV9vYmplY3RfaW5fdXJsKCkge1xuICAgIGlmIChwcm9wcy5zb3VyY2VfdmFsdWVfb2JqZWN0ID09IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgbGV0IHNvdXJjZV90eXBlID0gbWV0cmljc01hbmFnZXIuZ2V0X2N1cnJlbnRfcGFnZV9zb3VyY2VfdHlwZSgpO1xuICAgIG1ldHJpY3NNYW5hZ2VyLnNldF9zb3VyY2VfdmFsdWVfb2JqZWN0X2luX3VybChzb3VyY2VfdHlwZSwgcHJvcHMuc291cmNlX3ZhbHVlX29iamVjdCk7XG59XG5cbm9uQmVmb3JlTW91bnQoYXN5bmMgKCkgPT4ge1xuICAgIFxuICAgIGlmIChudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInBhZ2VcIikgPT0gXCJ2YV9oaXN0b3JpY2FsXCIpIHtcbiAgICAgICAgbGV0IGNvbHVtbnNfdG1wID0gW107XG4gICAgICAgIHN0YXRzX2NvbHVtbnMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgaWYgKGl0ZW0udmEpIHtcbiAgICAgICAgICAgICAgICBjb2x1bW5zX3RtcC5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICBcbiAgICAgICAgc3RhdHNfY29sdW1ucyA9IGNvbHVtbnNfdG1wO1xuICAgIH1cbiAgICBcbiAgICBpZiAocHJvcHMuc291cmNlX3ZhbHVlX29iamVjdC5pc192YSkge1xuICAgICAgICBtaW5fdGltZV9pbnRlcnZhbF9pZC52YWx1ZSA9IFwiaG91clwiO1xuICAgICAgICBudG9wbmdfdXRpbGl0eS5jaGVja19hbmRfc2V0X2RlZmF1bHRfdGltZV9pbnRlcnZhbChcImRheVwiKTtcbiAgICB9O1xuICAgIFxuICAgIHNldF9kZWZhdWx0X3NvdXJjZV9vYmplY3RfaW5fdXJsKCk7XG59KTtcblxub25Nb3VudGVkKGFzeW5jICgpID0+IHtcbiAgICBpbml0KCk7XG4gICAgYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICBudG9wbmdfc3luYy5vbl9yZWFkeShpZF9kYXRlX3RpbWVfcGlja2VyKSxcbiAgICBdKTtcbiAgICAvLyBjaGFydC52YWx1ZS5yZWdpc3Rlcl9zdGF0dXMoKTtcbn0pO1xuXG5hc3luYyBmdW5jdGlvbiBpbml0KCkge1xuICAgIC8vZ2V0X2RlZmF1bHRfdGltZXNlcmllc19ncm91cHNcbiAgICBsZXQgcHVzaF9jdXN0b21fbWV0cmljID0gdHJ1ZTtcbiAgICBsZXQgdGltZXNlcmllc19ncm91cHMgPSBhd2FpdCBtZXRyaWNzTWFuYWdlci5nZXRfdGltZXNlcmllc19ncm91cHNfZnJvbV91cmwoaHR0cF9wcmVmaXgpO1xuICAgIGxldCBtZXRyaWNfdHNfc2NoZW1hO1xuICAgIGxldCBtZXRyaWNfcXVlcnk7XG4gICAgaWYgKHRpbWVzZXJpZXNfZ3JvdXBzID09IG51bGwpIHtcbiAgICAgICAgcHVzaF9jdXN0b21fbWV0cmljID0gZmFsc2U7XG4gICAgICAgIG1ldHJpY190c19zY2hlbWEgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInRzX3NjaGVtYVwiKTtcbiAgICAgICAgbGV0IHRzX3F1ZXJ5ID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJ0c19xdWVyeVwiKTtcbiAgICAgICAgaWYgKHRzX3F1ZXJ5ICE9IG51bGwgJiYgdHNfcXVlcnkgIT0gXCJcIikge1xuICAgICAgICAgICAgbWV0cmljX3F1ZXJ5ID0gbWV0cmljc01hbmFnZXIuZ2V0X21ldHJpY19xdWVyeV9mcm9tX3RzX3F1ZXJ5KHRzX3F1ZXJ5KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWV0cmljX3RzX3NjaGVtYSA9PSBcIlwiKSB7IG1ldHJpY190c19zY2hlbWEgPSBudWxsOyB9XG4gICAgICAgIHRpbWVzZXJpZXNfZ3JvdXBzID0gYXdhaXQgbWV0cmljc01hbmFnZXIuZ2V0X2RlZmF1bHRfdGltZXNlcmllc19ncm91cHMoaHR0cF9wcmVmaXgsIG1ldHJpY190c19zY2hlbWEsIG1ldHJpY19xdWVyeSk7XG4gICAgfVxuICAgIG1ldHJpY3MudmFsdWUgPSBhd2FpdCBnZXRfbWV0cmljcyhwdXNoX2N1c3RvbV9tZXRyaWMpO1xuICAgIFxuICAgIGlmIChwdXNoX2N1c3RvbV9tZXRyaWMgPT0gdHJ1ZSkge1xuICAgICAgICBzZWxlY3RlZF9tZXRyaWMudmFsdWUgPSBjdXN0b21fbWV0cmljO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGVjdGVkX21ldHJpYy52YWx1ZSA9IG1ldHJpY3NNYW5hZ2VyLmdldF9kZWZhdWx0X21ldHJpYyhtZXRyaWNzLnZhbHVlLCBtZXRyaWNfdHNfc2NoZW1hLCBtZXRyaWNfcXVlcnkpO1xuICAgIH1cbiAgICB0c19tZW51X3JlYWR5LnZhbHVlID0gdHJ1ZTtcbiAgICBhd2FpdCBsb2FkX3BhZ2Vfc3RhdHNfZGF0YSh0aW1lc2VyaWVzX2dyb3VwcywgdHJ1ZSwgdHJ1ZSk7XG59XG5cbmxldCBsYXN0X3B1c2hfY3VzdG9tX21ldHJpYyA9IG51bGw7XG5hc3luYyBmdW5jdGlvbiBnZXRfbWV0cmljcyhwdXNoX2N1c3RvbV9tZXRyaWMsIGZvcmNlX3JlZnJlc2gpIHtcbiAgICBsZXQgbWV0cmljcyA9IGF3YWl0IG1ldHJpY3NNYW5hZ2VyLmdldF9tZXRyaWNzKGh0dHBfcHJlZml4KTtcbiAgICBpZiAoIWZvcmNlX3JlZnJlc2ggJiYgbGFzdF9wdXNoX2N1c3RvbV9tZXRyaWMgPT0gcHVzaF9jdXN0b21fbWV0cmljKSB7IHJldHVybiBtZXRyaWNzLnZhbHVlOyB9XG4gICAgXG4gICAgaWYgKHB1c2hfY3VzdG9tX21ldHJpYykge1xuICAgICAgICBtZXRyaWNzLnB1c2goY3VzdG9tX21ldHJpYyk7XG4gICAgfVxuICAgIGlmIChjYWNoZV9zbmFwc2hvdHMgPT0gbnVsbCB8fCBmb3JjZV9yZWZyZXNoKSB7XG4gICAgICAgIGNhY2hlX3NuYXBzaG90cyA9IGF3YWl0IGdldF9zbmFwc2hvdHNfbWV0cmljcygpO1xuICAgIH1cbiAgICBpZiAocHJvcHMuZW5hYmxlX3NuYXBzaG90cykge1xuICAgICAgICBsZXQgc25hcHNob3RzX21ldHJpY3MgPSBjYWNoZV9zbmFwc2hvdHM7XG4gICAgICAgIHNuYXBzaG90c19tZXRyaWNzLmZvckVhY2goKHNtKSA9PiBtZXRyaWNzLnB1c2goc20pKTtcbiAgICB9XG4gICAgLyogT3JkZXIgTWV0cmljcyAqL1xuICAgIGlmIChtZXRyaWNzLmxlbmd0aCA+IDApXG4gICAgICAgIG1ldHJpY3Muc29ydChOdG9wVXRpbHMuc29ydEFscGhhYmV0aWNhbGx5KTtcbiAgICBcbiAgICByZXR1cm4gbWV0cmljcztcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0X3NuYXBzaG90c19tZXRyaWNzKCkge1xuICAgIGlmICghcHJvcHMuZW5hYmxlX3NuYXBzaG90cykgeyByZXR1cm47IH1cbiAgICBsZXQgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvZmlsdGVycy9zbmFwc2hvdHMubHVhP3BhZ2U9JHtwYWdlX3NuYXBzaG90c31gO1xuICAgIFxuICAgIGxldCBzbmFwc2hvdHNfb2JqID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCk7XG4gICAgbGV0IHNuYXBzaG90cyA9IG50b3BuZ191dGlsaXR5Lm9iamVjdF90b19hcnJheShzbmFwc2hvdHNfb2JqKTtcbiAgICBsZXQgbWV0cmljc19zbmFwc2hvdHMgPSBzbmFwc2hvdHMubWFwKChzKSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5zLFxuICAgICAgICAgICAgaXNfc25hcHNob3Q6IHRydWUsXG4gICAgICAgICAgICBsYWJlbDogYCR7cy5uYW1lfWAsXG4gICAgICAgICAgICBncm91cDogXCJTbmFwc2hvdHNcIixcbiAgICAgICAgfTtcbiAgICB9KTtcbiAgICByZXR1cm4gbWV0cmljc19zbmFwc2hvdHM7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldF9zZWxlY3RlZF90aW1lc2VyaWVzX2dyb3VwcygpIHtcbiAgICBsZXQgbWV0cmljID0gc2VsZWN0ZWRfbWV0cmljLnZhbHVlO1xuICAgIHJldHVybiBnZXRfdGltZXNlcmllc19ncm91cHNfZnJvbV9tZXRyaWMobWV0cmljKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0X3RpbWVzZXJpZXNfZ3JvdXBzX2Zyb21fbWV0cmljKG1ldHJpYykge1xuICAgIGxldCBzb3VyY2VfdHlwZSA9IG1ldHJpY3NNYW5hZ2VyLmdldF9jdXJyZW50X3BhZ2Vfc291cmNlX3R5cGUoKTtcbiAgICBsZXQgc291cmNlX2FycmF5ID0gYXdhaXQgbWV0cmljc01hbmFnZXIuZ2V0X2RlZmF1bHRfc291cmNlX2FycmF5KGh0dHBfcHJlZml4LCBzb3VyY2VfdHlwZSk7XG4gICAgbGV0IHRzX2dyb3VwID0gbWV0cmljc01hbmFnZXIuZ2V0X3RzX2dyb3VwKHNvdXJjZV90eXBlLCBzb3VyY2VfYXJyYXksIG1ldHJpYyk7XG4gICAgbGV0IHRpbWVzZXJpZXNfZ3JvdXBzID0gW3RzX2dyb3VwXTtcbiAgICByZXR1cm4gdGltZXNlcmllc19ncm91cHM7XG59XG5cbmNvbnN0IGFkZF90c19ncm91cF9mcm9tX3NvdXJjZV92YWx1ZV9kaWN0ID0gYXN5bmMgKHNvdXJjZV90eXBlX2lkLCBzb3VyY2VfdmFsdWVfZGljdCwgbWV0cmljX3NjaGVtYSkgPT4ge1xuICAgIGxldCBzb3VyY2VfdHlwZSA9IG1ldHJpY3NNYW5hZ2VyLmdldF9zb3VyY2VfdHlwZV9mcm9tX2lkKHNvdXJjZV90eXBlX2lkKTtcbiAgICBsZXQgc291cmNlX2FycmF5ID0gYXdhaXQgbWV0cmljc01hbmFnZXIuZ2V0X3NvdXJjZV9hcnJheV9mcm9tX3ZhbHVlX2RpY3QoaHR0cF9wcmVmaXgsIHNvdXJjZV90eXBlLCBzb3VyY2VfdmFsdWVfZGljdCk7XG4gICAgbGV0IG1ldHJpYyA9IGF3YWl0IG1ldHJpY3NNYW5hZ2VyLmdldF9tZXRyaWNfZnJvbV9zY2hlbWEoaHR0cF9wcmVmaXgsIHNvdXJjZV90eXBlLCBzb3VyY2VfYXJyYXksIG1ldHJpY19zY2hlbWEpO1xuICAgIGxldCB0c19ncm91cCA9IG1ldHJpY3NNYW5hZ2VyLmdldF90c19ncm91cChzb3VyY2VfdHlwZSwgc291cmNlX2FycmF5LCBtZXRyaWMpO1xuICAgIGFkZF90c19ncm91cCh0c19ncm91cCk7XG59O1xuXG5jb25zdCBhZGRfbWV0cmljX2Zyb21fbWV0cmljX3NjaGVtYSA9IGFzeW5jIChtZXRyaWNfc2NoZW1hLCBtZXRyaWNfcXVlcnkpID0+IHtcbiAgICBsZXQgbWV0cmljID0gbWV0cmljcy52YWx1ZS5maW5kKChtKSA9PiBtLnNjaGVtYSA9PSBtZXRyaWNfc2NoZW1hICYmIG0ucXVlcnkgPT0gbWV0cmljX3F1ZXJ5KTtcbiAgICBpZiAobWV0cmljID09IG51bGwpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihgbWV0cmljID0gJHttZXRyaWNfc2NoZW1hfSwgcXVlcnkgPSAke21ldHJpY19xdWVyeX0gbm90IGZvdW5kLmApO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCB0aW1lc2VyaWVzX2dyb3VwcyA9IGF3YWl0IGdldF90aW1lc2VyaWVzX2dyb3Vwc19mcm9tX21ldHJpYyhtZXRyaWMpO1xuICAgIC8vIG1vZGFsX3RpbWVzZXJpZXMudmFsdWUuc2V0X3RpbWVzZXJpZXNfZ3JvdXBzKGxhc3RfdGltZXNlcmllc19ncm91cHNfbG9hZGVkKTtcbiAgICAvLyBtb2RhbF90aW1lc2VyaWVzLnZhbHVlLmFkZF90c19ncm91cCh0aW1lc2VyaWVzX2dyb3Vwc1swXSwgdHJ1ZSk7XG4gICAgYWRkX3RzX2dyb3VwKHRpbWVzZXJpZXNfZ3JvdXBzWzBdKTtcbn07XG5cbmZ1bmN0aW9uIGFkZF90c19ncm91cCh0c19ncm91cCkge1xuICAgIG1vZGFsX3RpbWVzZXJpZXMudmFsdWUuc2V0X3RpbWVzZXJpZXNfZ3JvdXBzKGxhc3RfdGltZXNlcmllc19ncm91cHNfbG9hZGVkKTtcbiAgICBtb2RhbF90aW1lc2VyaWVzLnZhbHVlLmFkZF90c19ncm91cCh0c19ncm91cCwgdHJ1ZSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNlbGVjdF9tZXRyaWMobWV0cmljKSB7XG4gICAgaWYgKG1ldHJpYy5pc19zbmFwc2hvdCA9PSB0cnVlKSB7XG4gICAgICAgIGxldCB1cmxfcGFyYW1ldGVycyA9IG1ldHJpYy5maWx0ZXJzO1xuICAgICAgICBsZXQgdGltZXNlcmllc191cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJ0aW1lc2VyaWVzX2dyb3Vwc1wiLCB1cmxfcGFyYW1ldGVycyk7XG4gICAgICAgIGxldCB0aW1lc2VyaWVzX2dyb3VwcyA9IGF3YWl0IG1ldHJpY3NNYW5hZ2VyLmdldF90aW1lc2VyaWVzX2dyb3Vwc19mcm9tX3VybChodHRwX3ByZWZpeCwgdGltZXNlcmllc191cmxfcGFyYW1zKTtcbiAgICAgICAgY3VycmVudF9ncm91cHNfb3B0aW9uc19tb2RlLnZhbHVlID0gdGltZXNlcmllc1V0aWxzLmdldEdyb3VwT3B0aW9uTW9kZShudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInRpbWVzZXJpZXNfZ3JvdXBzX21vZGVcIiwgdXJsX3BhcmFtZXRlcnMpKTtcbiAgICAgICAgYXdhaXQgbG9hZF9wYWdlX3N0YXRzX2RhdGEodGltZXNlcmllc19ncm91cHMsIHRydWUsIGZhbHNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBhd2FpdCBsb2FkX3NlbGVjdGVkX21ldHJpY19wYWdlX3N0YXRzX2RhdGEoKTtcbiAgICAgICAgcmVmcmVzaF9tZXRyaWNzKGZhbHNlKTtcbiAgICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGxvYWRfc2VsZWN0ZWRfbWV0cmljX3BhZ2Vfc3RhdHNfZGF0YSgpIHtcbiAgICBsZXQgdGltZXNlcmllc19ncm91cHMgPSBhd2FpdCBnZXRfc2VsZWN0ZWRfdGltZXNlcmllc19ncm91cHMoKTtcbiAgICBhd2FpdCBsb2FkX3BhZ2Vfc3RhdHNfZGF0YSh0aW1lc2VyaWVzX2dyb3VwcywgdHJ1ZSwgZmFsc2UpO1xufVxuXG5mdW5jdGlvbiBlcG9jaF9jaGFuZ2UobmV3X2Vwb2NoKSB7XG4gICAgbGV0IHB1c2hfY3VzdG9tX21ldHJpYyA9IHNlbGVjdGVkX21ldHJpYy52YWx1ZS5sYWJlbCA9PSBjdXN0b21fbWV0cmljLmxhYmVsO1xuICAgIGxvYWRfcGFnZV9zdGF0c19kYXRhKGxhc3RfdGltZXNlcmllc19ncm91cHNfbG9hZGVkLCB0cnVlLCBmYWxzZSwgbmV3X2Vwb2NoLnJlZnJlc2hfZGF0YSk7XG4gICAgcmVmcmVzaF90b3BfdGFibGUoKTtcbiAgICByZWZyZXNoX21ldHJpY3MocHVzaF9jdXN0b21fbWV0cmljLCB0cnVlKTtcbn1cblxuZnVuY3Rpb24gY2hhcnRfcmVsb2FkZWQoY2hhcnRfb3B0aW9ucykge1xufVxuXG5mdW5jdGlvbiBzaG93X21vZGFsX3NuYXBzaG90KCkge1xuICAgIG1vZGFsX3NuYXBzaG90LnZhbHVlLnNob3coKTtcbn1cblxuZnVuY3Rpb24gc2hvd19tYW5hZ2VfdGltZXNlcmllcygpIHtcbiAgICBpZiAobGFzdF90aW1lc2VyaWVzX2dyb3Vwc19sb2FkZWQgPT0gbnVsbCkgeyByZXR1cm47IH1cbiAgICBtb2RhbF90aW1lc2VyaWVzLnZhbHVlLnNob3cobGFzdF90aW1lc2VyaWVzX2dyb3Vwc19sb2FkZWQpO1xufTtcblxuLyoqXG4gKiBGdW5jdGlvbiBjYWxsZWQgYnkgQ2hhcnQgY29tcG9uZW50IHRvIGRyYXcgb3IgdXBkYXRlIHRoYXQgcmV0dXJuIGNoYXJ0IG9wdGlvbnMuXG4gKiovXG5mdW5jdGlvbiBnZXRfZl9nZXRfY3VzdG9tX2NoYXJ0X29wdGlvbnMoY2hhcnRfaW5kZXgpIHtcbiAgICByZXR1cm4gYXN5bmMgKHVybCkgPT4ge1xuICAgICAgICByZXR1cm4gY2hhcnRzX29wdGlvbnNfaXRlbXMudmFsdWVbY2hhcnRfaW5kZXhdLmNoYXJ0X29wdGlvbnM7XG4gICAgfVxufVxuXG5sZXQgY2FjaGVfc25hcHNob3RzID0gbnVsbDtcbmZ1bmN0aW9uIHJlZnJlc2hfc25hcHNob3RzKCkge1xuICAgIGxldCBwdXNoX2N1c3RvbV9tZXRyaWMgPSBzZWxlY3RlZF9tZXRyaWMudmFsdWUubGFiZWwgPT0gY3VzdG9tX21ldHJpYy5sYWJlbDtcbiAgICByZWZyZXNoX21ldHJpY3MocHVzaF9jdXN0b21fbWV0cmljLCB0cnVlKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcmVmcmVzaF9tZXRyaWNzKHB1c2hfY3VzdG9tX21ldHJpYywgZm9yY2VfcmVmcmVzaCkge1xuICAgIG1ldHJpY3MudmFsdWUgPSBhd2FpdCBnZXRfbWV0cmljcyhwdXNoX2N1c3RvbV9tZXRyaWMsIGZvcmNlX3JlZnJlc2gpO1xuICAgIGlmIChwdXNoX2N1c3RvbV9tZXRyaWMpIHtcbiAgICAgICAgc2VsZWN0ZWRfbWV0cmljLnZhbHVlID0gY3VzdG9tX21ldHJpYztcbiAgICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGFwcGx5X21vZGFsX3RpbWVzZXJpZXModGltZXNlcmllc19ncm91cHMpIHtcbiAgICByZWZyZXNoX21ldHJpY3ModHJ1ZSk7XG4gICAgYXdhaXQgbG9hZF9wYWdlX3N0YXRzX2RhdGEodGltZXNlcmllc19ncm91cHMsIHRydWUsIHRydWUpO1xufVxuXG5mdW5jdGlvbiBjaGFuZ2VfZ3JvdXBzX29wdGlvbnNfbW9kZSgpIHtcbiAgICBsb2FkX3BhZ2Vfc3RhdHNfZGF0YShsYXN0X3RpbWVzZXJpZXNfZ3JvdXBzX2xvYWRlZCwgZmFsc2UsIGZhbHNlKTtcbn1cblxubGV0IHRzX2NoYXJ0c19vcHRpb25zO1xuLyogVGhpcyBmdW5jdGlvbiBsb2FkIHRoZSBjaGFydCBkYXRhIGFuZCBvcHRpb25zLCBkb2luZyB0aGUgcmVxdWVzdCBhbmQgdGhlbiBzZXR0aW5nIHRoZSBvcHRpb25zICovXG5hc3luYyBmdW5jdGlvbiBsb2FkX3BhZ2Vfc3RhdHNfZGF0YSh0aW1lc2VyaWVzX2dyb3VwcywgcmVsb2FkX2NoYXJ0c19kYXRhLCByZWxvYWRfdG9wX3RhYmxlX29wdGlvbnMsIHJlZnJlc2hlZF90aW1lX2ludGVydmFsKSB7XG4gICAgLyogR2V0IHRoZSBpbmZvcm1hdGlvbiBuZWNlc3NhcnkgZm9yIHRoZSByZXF1ZXN0LCBsaWtlIGVwb2NoIGVjYy4gKi9cbiAgICBsZXQgc3RhdHVzID0gbnRvcG5nX3N0YXR1c19tYW5hZ2VyLmdldF9zdGF0dXMoKTtcbiAgICBsZXQgdHNfY29tcGFyZSA9IGdldF90c19jb21wYXJlKHN0YXR1cyk7XG4gICAgaWYgKHJlbG9hZF9jaGFydHNfZGF0YSkge1xuICAgICAgICAvKiBEbyB0aGUgcmVxdWVzdCB0byB0aGUgYmFja2VuZDsgdGhlIGFuc3dlciBpcyBmb3JtYXR0ZWQgYXNcbiAgICAgICAgICogIFsgIFxuICAgICAgICAgKiAgICAgIHsgICBcbiAgICAgICAgICogICAgICAgICAgbWV0YWRhdGE6IHsgLi4uIH0gICAgICAgLy8gQ29udGFpbmluZyB2YXJpb3VzIGluZm8gcmVnYXJkaW5nIHRoZSBzZXJpZXMgcmV0dXJuZWRcbiAgICAgICAgICogICAgICAgICAgc2VyaWVzOiB7IC4uLiB9ICAgICAgICAgLy8gQ29udGFpbmluZyB0aGUgc2VyaWVzIHdpdGggdGhlIGRhdGEsIGxhYmVscyBhbmQgc3RhdGlzdGljc1xuICAgICAgICAgKiAgICAgIH1cbiAgICAgICAgICogIF1cbiAgICAgICAgICovXG4gICAgICAgIGlmICh0aW1lc2VyaWVzX2dyb3VwcyA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aW1lc2VyaWVzX2dyb3VwcyA9IFtdO1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiRW1wdHkgdGltZXNlcmllc19ncm91cHMgcmVxdWVzdFwiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0c19jaGFydHNfb3B0aW9ucyA9IGF3YWl0IHRpbWVzZXJpZXNVdGlscy5nZXRUc0NoYXJ0c09wdGlvbnMoaHR0cF9wcmVmaXgsIHN0YXR1cywgdHNfY29tcGFyZSwgdGltZXNlcmllc19ncm91cHMsIHByb3BzLmlzX250b3BfcHJvKTtcbiAgICB9XG5cbiAgICAvKiBVcGRhdGUgdGltZXNlcmllcyBsYWJlbCB0byBkaXNwbGF5ICovXG4gICAgc2V0X3RpbWVzZXJpZXNfZ3JvdXBzX3NvdXJjZV9sYWJlbCh0aW1lc2VyaWVzX2dyb3VwcywgdHNfY2hhcnRzX29wdGlvbnMpO1xuXG4gICAgLyogRm9ybWF0IHRoZSBvcHRpb25zIGZvciB0aGUgdGltZXNlcmllcyBsaWJyYXJ5ICovXG4gICAgbGV0IGNoYXJ0c19vcHRpb25zID0gdGltZXNlcmllc1V0aWxzLnRzQXJyYXlUb09wdGlvbnNBcnJheSh0c19jaGFydHNfb3B0aW9ucywgdGltZXNlcmllc19ncm91cHMsIGN1cnJlbnRfZ3JvdXBzX29wdGlvbnNfbW9kZS52YWx1ZSwgdHNfY29tcGFyZSk7XG4gICAgaWYgKHJlZnJlc2hlZF90aW1lX2ludGVydmFsKSB7XG4gICAgICAgIHVwZGF0ZV9jaGFydHMoY2hhcnRzX29wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHNldF9jaGFydHNfb3B0aW9uc19pdGVtcyhjaGFydHNfb3B0aW9ucyk7XG4gICAgfVxuICAgIHNldF9zdGF0c19yb3dzKHRzX2NoYXJ0c19vcHRpb25zLCB0aW1lc2VyaWVzX2dyb3Vwcywgc3RhdHVzKTtcbiAgICBpZiAocmVsb2FkX3RvcF90YWJsZV9vcHRpb25zKSB7XG4gICAgICAgIHNldF90b3BfdGFibGVfb3B0aW9ucyh0aW1lc2VyaWVzX2dyb3Vwcywgc3RhdHVzKTtcbiAgICB9XG4gICAgLy8gc2V0IGxhc3RfdGltZXNlcmllc19ncm91cGRfbG9hZGVkXG4gICAgbGFzdF90aW1lc2VyaWVzX2dyb3Vwc19sb2FkZWQgPSB0aW1lc2VyaWVzX2dyb3VwcztcbiAgICAvLyB1cGRhdGUgdXJsIHBhcmFtc1xuICAgIHVwZGF0ZV91cmxfcGFyYW1zKCk7XG59XG5cbi8qIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBzZXQgdGhlIGxhYmVsIG9mIHRoZSB0aW1lc2VyaWVzOyBpZiBhdmFpbGFibGUgaXQgc2hvdWxkIGJlXG4gKiBmb3VuZCBpbiByZXNwb25zZS5tZXRhZGF0YS5sYWJlbCBmaWVsZFxuICovXG5mdW5jdGlvbiBzZXRfdGltZXNlcmllc19ncm91cHNfc291cmNlX2xhYmVsKHRpbWVzZXJpZXNfZ3JvdXBzLCB0c19jaGFydHNfb3B0aW9ucykge1xuICAgIHRpbWVzZXJpZXNfZ3JvdXBzLmZvckVhY2goKHRzX2dyb3VwLCBpKSA9PiB7XG4gICAgICAgIGxldCB0c19vcHRpb25zID0gdHNfY2hhcnRzX29wdGlvbnNbaV07XG4gICAgICAgIGxldCBsYWJlbCA9IHRzX29wdGlvbnM/Lm1ldGFkYXRhPy5sYWJlbDtcbiAgICAgICAgaWYgKGxhYmVsICE9IG51bGwpIHtcbiAgICAgICAgICAgIGxldCBzb3VyY2VfaW5kZXggPSB0aW1lc2VyaWVzVXRpbHMuZ2V0TWFpblNvdXJjZURlZkluZGV4KHRzX2dyb3VwKTtcbiAgICAgICAgICAgIGxldCBzb3VyY2UgPSB0c19ncm91cC5zb3VyY2VfYXJyYXlbc291cmNlX2luZGV4XTtcbiAgICAgICAgICAgIHNvdXJjZS5sYWJlbCA9IGxhYmVsO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZV91cmxfcGFyYW1zKCkge1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcInRpbWVzZXJpZXNfZ3JvdXBzX21vZGVcIiwgY3VycmVudF9ncm91cHNfb3B0aW9uc19tb2RlLnZhbHVlLnZhbHVlKTtcbiAgICBtZXRyaWNzTWFuYWdlci5zZXRfdGltZXNlcmllc19ncm91cHNfaW5fdXJsKGxhc3RfdGltZXNlcmllc19ncm91cHNfbG9hZGVkKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlX2NoYXJ0cyhjaGFydHNfb3B0aW9ucykge1xuICAgIGNoYXJ0c19vcHRpb25zLmZvckVhY2goKG9wdGlvbnMsIGkpID0+IHtcbiAgICAgICAgLy8gY2hhcnRzLnZhbHVlW2ldLnVwZGF0ZV9jaGFydF9vcHRpb25zKHsgeWF4aXM6IG9wdGlvbnMueWF4aXMgfSk7XG4gICAgICAgIGNoYXJ0cy52YWx1ZVtpXS51cGRhdGVfY2hhcnRfc2VyaWVzKG9wdGlvbnM/LnNlcmllKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gc2V0X2NoYXJ0c19vcHRpb25zX2l0ZW1zKGNoYXJ0c19vcHRpb25zKSB7XG4gICAgY2hhcnRzX29wdGlvbnNfaXRlbXMudmFsdWUgPSBjaGFydHNfb3B0aW9ucy5tYXAoKG9wdGlvbnMsIGkpID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGtleTogbnRvcG5nX3V0aWxpdHkuZ2V0X3JhbmRvbV9zdHJpbmcoKSxcbiAgICAgICAgICAgIGNoYXJ0X29wdGlvbnM6IG9wdGlvbnMsXG4gICAgICAgIH07XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldF90c19jb21wYXJlKHN0YXR1cykge1xuICAgIC8vIDVtLCAzMG0sIDFoLCAxZCwgMXcsIDFNLCAxWVxuICAgIGxldCByID0gTnVtYmVyLnBhcnNlSW50KChzdGF0dXMuZXBvY2hfZW5kIC0gc3RhdHVzLmVwb2NoX2JlZ2luKSAvIDYwKTtcbiAgICBpZiAociA8PSA1KSB7XG4gICAgICAgIHJldHVybiBcIjVtXCI7XG4gICAgfSBlbHNlIGlmIChyIDw9IDMwKSB7XG4gICAgICAgIHJldHVybiBcIjMwbVwiO1xuICAgIH0gZWxzZSBpZiAociA8PSA2MCkge1xuICAgICAgICByZXR1cm4gXCIxaFwiO1xuICAgIH0gZWxzZSBpZiAociA8PSA2MCAqIDI0KSB7XG4gICAgICAgIHJldHVybiBcIjFkXCI7XG4gICAgfSBlbHNlIGlmIChyIDw9IDYwICogMjQgKiA3KSB7XG4gICAgICAgIHJldHVybiBcIjF3XCI7XG4gICAgfSBlbHNlIGlmIChyIDw9IDYwICogMjQgKiAzMCkge1xuICAgICAgICByZXR1cm4gXCIxTVwiO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBcIjFZXCI7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnZXRfdG9wX3RhYmxlX3VybCh0c19ncm91cCwgdGFibGVfdmFsdWUsIHRhYmxlX3ZpZXcsIHRhYmxlX3NvdXJjZV9kZWZfdmFsdWVfZGljdCwgc3RhdHVzKSB7XG4gICAgaWYgKHN0YXR1cyA9PSBudWxsKSB7XG4gICAgICAgIHN0YXR1cyA9IG50b3BuZ19zdGF0dXNfbWFuYWdlci5nZXRfc3RhdHVzKCk7XG4gICAgfVxuICAgIGxldCB0c19xdWVyeSA9IHRpbWVzZXJpZXNVdGlscy5nZXRUc1F1ZXJ5KHRzX2dyb3VwLCB0cnVlLCB0YWJsZV9zb3VyY2VfZGVmX3ZhbHVlX2RpY3QpO1xuICAgIGxldCB2ID0gdGFibGVfdmFsdWU7XG4gICAgbGV0IGRhdGFfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvJHt2fS90b3AvdHNfc3RhdHMubHVhYDtcbiAgICAvL3RvZG86IGdldCB0c19xdWVyeVxuICAgIGxldCBwX29iaiA9IHtcbiAgICAgICAgem9vbTogJzVtJyxcbiAgICAgICAgdHNfcXVlcnksXG4gICAgICAgIC8vIHRzX3F1ZXJ5OiBgaWZpZDoke250b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCdpZmlkJyl9YCxcbiAgICAgICAgZXBvY2hfYmVnaW46IGAke3N0YXR1cy5lcG9jaF9iZWdpbn1gLFxuICAgICAgICBlcG9jaF9lbmQ6IGAke3N0YXR1cy5lcG9jaF9lbmR9YCxcbiAgICAgICAgZGV0YWlsX3ZpZXc6IGAke3RhYmxlX3ZpZXd9YCxcbiAgICAgICAgbmV3X2NoYXJ0czogYHRydWVgXG4gICAgfTtcblxuICAgIGxldCBwX3VybF9yZXF1ZXN0ID0gbnRvcG5nX3VybF9tYW5hZ2VyLmFkZF9vYmpfdG9fdXJsKHBfb2JqLCAnJyk7XG4gICAgcmV0dXJuIGAke2RhdGFfdXJsfT8ke3BfdXJsX3JlcXVlc3R9YDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcmVmcmVzaF90b3BfdGFibGUoKSB7XG4gICAgaWYgKCFwcm9wcy5pc19udG9wX3BybykgeyByZXR1cm47IH1cbiAgICBsZXQgdGFibGVfY29uZmlnID0gc2VsZWN0ZWRfdG9wX3RhYmxlLnZhbHVlPy50YWJsZV9jb25maWdfZGVmO1xuICAgIGlmICh0YWJsZV9jb25maWcgPT0gbnVsbCkgeyByZXR1cm47IH1cbiAgICAvLyBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgbGV0IGRhdGFfdXJsID0gZ2V0X3RvcF90YWJsZV91cmwodGFibGVfY29uZmlnLnRzX2dyb3VwLCB0YWJsZV9jb25maWcudGFibGVfZGVmLnRhYmxlX3ZhbHVlLCB0YWJsZV9jb25maWcudGFibGVfZGVmLnZpZXcsIHRhYmxlX2NvbmZpZy50YWJsZV9zb3VyY2VfZGVmX3ZhbHVlX2RpY3QpO1xuICAgIHRvcF90YWJsZV9yZWYudmFsdWUudXBkYXRlX3VybChkYXRhX3VybCk7XG4gICAgdG9wX3RhYmxlX3JlZi52YWx1ZS5yZWxvYWQoKTtcbiAgICAvLyBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG5cbn1cblxuY29uc3QgdG9wX3RhYmxlX29wdGlvbnMgPSByZWYoW10pO1xuY29uc3Qgc2VsZWN0ZWRfdG9wX3RhYmxlID0gcmVmKHt9KTtcbmZ1bmN0aW9uIHNldF90b3BfdGFibGVfb3B0aW9ucyh0aW1lc2VyaWVzX2dyb3Vwcywgc3RhdHVzKSB7XG4gICAgaWYgKCFwcm9wcy5pc19udG9wX3BybykgeyByZXR1cm47IH1cbiAgICBpZiAodGltZXNlcmllc19ncm91cHMgPT0gbnVsbCkge1xuICAgICAgICB0aW1lc2VyaWVzX2dyb3VwcyA9IGxhc3RfdGltZXNlcmllc19ncm91cHNfbG9hZGVkO1xuICAgIH1cbiAgICBpZiAoc3RhdHVzID09IG51bGwpIHtcbiAgICAgICAgc3RhdHVzID0gbnRvcG5nX3N0YXR1c19tYW5hZ2VyLmdldF9zdGF0dXMoKTtcbiAgICB9XG5cbiAgICBsZXQgc291cmNlc190eXBlc190YWJsZXMgPSBtZXRyaWNzTWFuYWdlci5zb3VyY2VzX3R5cGVzX3RhYmxlcztcbiAgICBsZXQgdHNfZ3JvdXBfZGljdCA9IHt9OyAvLyBkaWN0aW9uYXJ5IHdpdGggMSB0c19ncm91cCBmb3IgZWFjaCAoc291cmNlX3R5cGUsIHNvdXJjZV9hcnJheSlcbiAgICB0aW1lc2VyaWVzX2dyb3Vwcy5mb3JFYWNoKCh0c19ncm91cCkgPT4ge1xuICAgICAgICBsZXQgc291cmNlX3R5cGUgPSB0c19ncm91cC5zb3VyY2VfdHlwZTtcbiAgICAgICAgLy8gbGV0IHNvdXJjZV90eXBlX3RhYmxlcyA9IHNvdXJjZXNfdHlwZXNfdGFibGVzW3NvdXJjZV90eXBlLmlkXTtcbiAgICAgICAgLy8gbGV0IHRhYmxlX3NvdXJjZV9kZWZfdmFsdWVfZGljdCA9IHNvdXJjZV90eXBlX3RhYmxlcy50YWJsZV9zb3VyY2VfZGVmX3ZhbHVlX2RpY3RcblxuICAgICAgICBsZXQgaWQgPSBtZXRyaWNzTWFuYWdlci5nZXRfdHNfZ3JvdXBfaWQodHNfZ3JvdXAuc291cmNlX3R5cGUsIHRzX2dyb3VwLnNvdXJjZV9hcnJheSk7XG4gICAgICAgIHRzX2dyb3VwX2RpY3RbaWRdID0gdHNfZ3JvdXA7XG4gICAgfSk7XG4gICAgbGV0IHRvcF90YWJsZV9pZF9kaWN0ID0ge307XG4gICAgdG9wX3RhYmxlX29wdGlvbnMudmFsdWUgPSBbXTtcbiAgICBmb3IgKGxldCBpZCBpbiB0c19ncm91cF9kaWN0KSB7XG4gICAgICAgIGxldCB0c19ncm91cCA9IHRzX2dyb3VwX2RpY3RbaWRdO1xuICAgICAgICBsZXQgbWFpbl9zb3VyY2VfaW5kZXggPSB0aW1lc2VyaWVzVXRpbHMuZ2V0TWFpblNvdXJjZURlZkluZGV4KHRzX2dyb3VwKTtcbiAgICAgICAgbGV0IG1haW5fc291cmNlID0gdHNfZ3JvdXAuc291cmNlX2FycmF5W21haW5fc291cmNlX2luZGV4XTtcbiAgICAgICAgbGV0IHNvdXJjZV90eXBlID0gdHNfZ3JvdXAuc291cmNlX3R5cGU7XG4gICAgICAgIGxldCBzb3VyY2VfdHlwZV90YWJsZXMgPSBzb3VyY2VzX3R5cGVzX3RhYmxlc1tzb3VyY2VfdHlwZS5pZF07XG4gICAgICAgIGlmIChzb3VyY2VfdHlwZV90YWJsZXMgPT0gbnVsbCkgeyBjb250aW51ZTsgfVxuXG4gICAgICAgIHNvdXJjZV90eXBlX3RhYmxlcy5mb3JFYWNoKCh0YWJsZV9kZWYpID0+IHtcbiAgICAgICAgICAgIGxldCBlbmFibGVzX3RhYmxlX3ZhbHVlID0gcHJvcHMuc291cmNlc190eXBlc190b3BfZW5hYmxlZFt0YWJsZV9kZWYudGFibGVfdmFsdWVdO1xuICAgICAgICAgICAgaWYgKGVuYWJsZXNfdGFibGVfdmFsdWUgPT0gbnVsbCkgeyByZXR1cm47IH1cbiAgICAgICAgICAgIGxldCBlbmFibGVfdGFibGVfZGVmID0gZW5hYmxlc190YWJsZV92YWx1ZVt0YWJsZV9kZWYudmlld107XG4gICAgICAgICAgICBpZiAoIWVuYWJsZV90YWJsZV9kZWYpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICBsZXQgdGFibGVfc291cmNlX2RlZl92YWx1ZV9kaWN0ID0gdGFibGVfZGVmLnRhYmxlX3NvdXJjZV9kZWZfdmFsdWVfZGljdFxuXG4gICAgICAgICAgICBsZXQgZGF0YV91cmwgPSBnZXRfdG9wX3RhYmxlX3VybCh0c19ncm91cCwgdGFibGVfZGVmLnRhYmxlX3ZhbHVlLCB0YWJsZV9kZWYudmlldywgdGFibGVfc291cmNlX2RlZl92YWx1ZV9kaWN0LCBzdGF0dXMpO1xuICAgICAgICAgICAgbGV0IHRhYmxlX2lkID0gbWV0cmljc01hbmFnZXIuZ2V0X3RzX2dyb3VwX2lkKHRzX2dyb3VwLnNvdXJjZV90eXBlLCB0c19ncm91cC5zb3VyY2VfYXJyYXksIG51bGwsIHRhYmxlX3NvdXJjZV9kZWZfdmFsdWVfZGljdCwgdHJ1ZSk7XG4gICAgICAgICAgICB0YWJsZV9pZCA9IGAke3RhYmxlX2lkfV8ke3RhYmxlX2RlZi52aWV3fWA7XG4gICAgICAgICAgICBpZiAodG9wX3RhYmxlX2lkX2RpY3RbdGFibGVfaWRdICE9IG51bGwpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICB0b3BfdGFibGVfaWRfZGljdFt0YWJsZV9pZF0gPSB0cnVlO1xuXG4gICAgICAgICAgICBsZXQgdmFsdWUgPSBgJHt0YWJsZV9kZWYudGFibGVfdmFsdWV9XyR7dGFibGVfZGVmLnZpZXd9XyR7dGFibGVfaWR9YDtcbiAgICAgICAgICAgIGxldCBsYWJlbDtcbiAgICAgICAgICAgIGlmICh0YWJsZV9kZWYuZl9nZXRfbGFiZWwgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGxhYmVsID0gYCR7dGFibGVfZGVmLnRpdGxlfSAtICR7c291cmNlX3R5cGUubGFiZWx9ICR7bWFpbl9zb3VyY2UubGFiZWx9YDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbGFiZWwgPSB0YWJsZV9kZWYuZl9nZXRfbGFiZWwodHNfZ3JvdXApXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB0YWJsZV9jb25maWdfZGVmID0ge1xuICAgICAgICAgICAgICAgIHRzX2dyb3VwLFxuICAgICAgICAgICAgICAgIHRhYmxlX2RlZixcbiAgICAgICAgICAgICAgICAvLyB0YWJsZV92YWx1ZTogdGFibGVfZGVmLnRhYmxlX3ZhbHVlLFxuICAgICAgICAgICAgICAgIC8vIHRhYmxlX3ZpZXc6IHRhYmxlX2RlZi52aWV3LFxuXG4gICAgICAgICAgICAgICAgdGFibGVfYnV0dG9uczogW10sXG4gICAgICAgICAgICAgICAgZGF0YV91cmwsXG4gICAgICAgICAgICAgICAgZW5hYmxlX3NlYXJjaDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0YWJsZV9jb25maWc6IHtcbiAgICAgICAgICAgICAgICAgICAgc2VydmVyU2lkZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIG9yZGVyOiBbW3RhYmxlX2RlZi5kZWZhdWx0X3NvcnRpbmdfY29sdW1ucywgJ2Rlc2MnXV0sXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbkRlZnM6IHRhYmxlX2RlZi5jb2x1bW5EZWZzIHx8IFtdLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvLyBpdCBzaG91bGQgYmUgaGVyZSBpbiB0aGlzIGluc3RhbmNlIHRoZSB2dWV0aWZ5IG9iamVjdCB3aXRoIGl0cyBwcm9wZXJ0aWVzXG4gICAgICAgICAgICB0YWJsZV9jb25maWdfZGVmLmNvbHVtbnNfY29uZmlnID0gdGFibGVfZGVmLmNvbHVtbnMubWFwKChjb2x1bW4pID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgcmVuZGVyX2lmX2NvbnRleHQgPSB7XG4gICAgICAgICAgICAgICAgICAgIGlzX2hpc3RvcnlfZW5hYmxlZDogcHJvcHMuaXNfaGlzdG9yeV9lbmFibGVkXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBsZXQgYyA9IHtcbiAgICAgICAgICAgICAgICAgICAgdmlzaWJsZTogIWNvbHVtbi5yZW5kZXJfaWYgfHwgY29sdW1uLnJlbmRlcl9pZihyZW5kZXJfaWZfY29udGV4dCksXG4gICAgICAgICAgICAgICAgICAgIC4uLmNvbHVtbixcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlmIChjLmNsYXNzTmFtZSA9PSBudWxsKSB7IGMuY2xhc3NOYW1lID0gXCJ0ZXh0LW5vd3JhcFwiOyB9XG4gICAgICAgICAgICAgICAgaWYgKGMucmVzcG9uc2l2ZVByaW9yaXR5ID09IG51bGwpIHsgYy5yZXNwb25zaXZlUHJpb3JpdHkgPSAxOyB9XG4gICAgICAgICAgICAgICAgYy5yZW5kZXIgPSBjb2x1bW4ucmVuZGVyLmJpbmQoe1xuICAgICAgICAgICAgICAgICAgICBhZGRfbWV0cmljX2Zyb21fbWV0cmljX3NjaGVtYSxcbiAgICAgICAgICAgICAgICAgICAgYWRkX3RzX2dyb3VwX2Zyb21fc291cmNlX3ZhbHVlX2RpY3QsXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZXNfdHlwZXNfZW5hYmxlZDogcHJvcHMuc291cmNlc190eXBlc19lbmFibGVkLFxuICAgICAgICAgICAgICAgICAgICBzdGF0dXMsIHNvdXJjZV90eXBlLCBzb3VyY2VfYXJyYXk6IHRzX2dyb3VwLnNvdXJjZV9hcnJheSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbGV0IG9wdGlvbiA9IHsgdmFsdWUsIGxhYmVsLCB0YWJsZV9jb25maWdfZGVmIH07XG4gICAgICAgICAgICB0b3BfdGFibGVfb3B0aW9ucy52YWx1ZS5wdXNoKG9wdGlvbik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoc2VsZWN0ZWRfdG9wX3RhYmxlLnZhbHVlICE9IG51bGwgJiYgdG9wX3RhYmxlX29wdGlvbnMudmFsdWUuZmluZCgob3B0aW9uKSA9PiBvcHRpb24udmFsdWUgPT0gc2VsZWN0ZWRfdG9wX3RhYmxlLnZhbHVlLnZhbHVlKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2VsZWN0ZWRfdG9wX3RhYmxlLnZhbHVlID0gdG9wX3RhYmxlX29wdGlvbnMudmFsdWUuZmluZCgob3B0aW9uKSA9PiBvcHRpb24udGFibGVfY29uZmlnX2RlZi5kZWZhdWx0ID09IHRydWUpO1xuICAgIGlmIChzZWxlY3RlZF90b3BfdGFibGUudmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBzZWxlY3RlZF90b3BfdGFibGUudmFsdWUgPSB0b3BfdGFibGVfb3B0aW9ucy52YWx1ZVswXTtcbiAgICB9XG59XG5cbmxldCBzdGF0c19jb2x1bW5zID0gW1xuICAgIHsgaWQ6IFwibWV0cmljXCIsIGxhYmVsOiBfaTE4bihcInBhZ2Vfc3RhdHMubWV0cmljXCIpLCB2YTogdHJ1ZX0sXG4gICAgeyBpZDogXCJhdmdcIiwgbGFiZWw6IF9pMThuKFwicGFnZV9zdGF0cy5hdmVyYWdlXCIpLCBjbGFzczogXCJ0ZXh0LWVuZFwiLCB2YTogdHJ1ZSB9LFxuICAgIHsgaWQ6IFwicGVyY185NVwiLCBsYWJlbDogX2kxOG4oXCJwYWdlX3N0YXRzLjk1X3BlcmNcIiksIGNsYXNzOiBcInRleHQtZW5kXCIsIHZhOiB0cnVlIH0sXG4gICAgeyBpZDogXCJtYXhcIiwgbGFiZWw6IF9pMThuKFwicGFnZV9zdGF0cy5tYXhcIiksIGNsYXNzOiBcInRleHQtZW5kXCIsIHZhOiB0cnVlfSxcbiAgICB7IGlkOiBcIm1pblwiLCBsYWJlbDogX2kxOG4oXCJwYWdlX3N0YXRzLm1pblwiKSwgY2xhc3M6IFwidGV4dC1lbmRcIiwgdmE6IHRydWUgfSxcbiAgICB7IGlkOiBcInRvdGFsXCIsIGxhYmVsOiBfaTE4bihcInBhZ2Vfc3RhdHMudG90YWxcIiksIGNsYXNzOiBcInRleHQtZW5kXCIsIHZhOiBmYWxzZSB9LFxuXTtcblxuY29uc3Qgc3RhdHNfcm93cyA9IHJlZihbXSk7XG5cbmZ1bmN0aW9uIHNldF9zdGF0c19yb3dzKHRzX2NoYXJ0c19vcHRpb25zLCB0aW1lc2VyaWVzX2dyb3Vwcywgc3RhdHVzKSB7XG4gICAgY29uc3QgZXh0ZW5kX3NlcmllX25hbWUgPSB0c19jaGFydHNfb3B0aW9ucy5sZW5ndGggPiAxO1xuICAgIGVuYWJsZV9zdGF0c190YWJsZS52YWx1ZSA9IHRpbWVzZXJpZXNfZ3JvdXBzLm1hcCgodHNfZ3JvdXApID0+ICF0c19ncm91cC5zb3VyY2VfdHlwZS5kaXNhYmxlX3N0YXRzKS5yZWR1Y2UoKHJlcywgZWwpID0+IHJlcyB8IGVsLCBmYWxzZSk7XG4gICAgaWYgKCFlbmFibGVfc3RhdHNfdGFibGUudmFsdWUpIHsgcmV0dXJuOyB9XG4gICAgY29uc3QgZl9nZXRfdG90YWxfZm9ybWF0dGVyX3R5cGUgPSAodHlwZSkgPT4ge1xuICAgICAgICBsZXQgbWFwX3R5cGUgPSB7XG4gICAgICAgICAgICBcImJwc1wiOiBcImJ5dGVzXCIsXG4gICAgICAgICAgICBcImZwc1wiOiBcImZsb3dzXCIsXG4gICAgICAgICAgICBcImFsZXJ0cHNcIjogXCJhbGVydHNcIixcbiAgICAgICAgICAgIFwiaGl0c3NcIjogXCJoaXRzXCIsXG4gICAgICAgICAgICBcInBwc1wiOiBcInBhY2tldHNcIixcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKG1hcF90eXBlW3R5cGVdICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBtYXBfdHlwZVt0eXBlXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHlwZTtcbiAgICB9O1xuICAgIHN0YXRzX3Jvd3MudmFsdWUgPSBbXTtcbiAgICB0c19jaGFydHNfb3B0aW9ucy5mb3JFYWNoKChvcHRpb25zLCBpKSA9PiB7XG4gICAgICAgIGxldCB0c19ncm91cCA9IHRpbWVzZXJpZXNfZ3JvdXBzW2ldO1xuICAgICAgICBpZiAodHNfZ3JvdXAuc291cmNlX3R5cGUuZGlzYWJsZV9zdGF0cyA9PSB0cnVlKSB7IHJldHVybjsgfVxuICAgICAgICBvcHRpb25zLnNlcmllcz8uZm9yRWFjaCgocywgaikgPT4ge1xuICAgICAgICAgICAgbGV0IHRzX2lkID0gdGltZXNlcmllc1V0aWxzLmdldFNlcmllSWQocyk7XG4gICAgICAgICAgICBsZXQgc19tZXRhZGF0YSA9IHRzX2dyb3VwLm1ldHJpYy50aW1lc2VyaWVzW3RzX2lkXTtcbiAgICAgICAgICAgIGxldCBmb3JtYXR0ZXIgPSBmb3JtYXR0ZXJVdGlscy5nZXRGb3JtYXR0ZXIodHNfZ3JvdXAubWV0cmljLm1lYXN1cmVfdW5pdCk7XG4gICAgICAgICAgICBsZXQgdHNfc3RhdHM7XG4gICAgICAgICAgICBsZXQgbmFtZSA9IHNfbWV0YWRhdGEubGFiZWw7XG4gICAgICAgICAgICBpZiAoc19tZXRhZGF0YS5oaWRkZW4pIHtcbiAgICAgICAgICAgICAgICAvKiBTa2lwIGluIGNhc2UgaXQncyByZXF1ZXN0ZWQgdG8gaGlkZSB0aGUgVGltZXNlcmllICovXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNfbWV0YWRhdGEudXNlX3NlcmllX25hbWUgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIG5hbWUgPSBzLm5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocz8uZGF0YS5sZW5ndGggPiBqKSB7XG4gICAgICAgICAgICAgICAgdHNfc3RhdHMgPSBzLnN0YXRpc3RpY3M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHNfc3RhdHMgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzLmV4dF9sYWJlbCkge1xuICAgICAgICAgICAgICAgIG5hbWUgPSBzLmV4dF9sYWJlbFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmFtZSA9IHRpbWVzZXJpZXNVdGlscy5nZXRTZXJpZU5hbWUobmFtZSwgdHNfaWQsIHRzX2dyb3VwLCBleHRlbmRfc2VyaWVfbmFtZSk7XG4gICAgICAgICAgICBsZXQgdG90YWxfZm9ybWF0dGVyX3R5cGUgPSBmX2dldF90b3RhbF9mb3JtYXR0ZXJfdHlwZSh0c19ncm91cC5tZXRyaWMubWVhc3VyZV91bml0KTtcbiAgICAgICAgICAgIGxldCB0b3RhbF9mb3JtYXR0ZXIgPSBmb3JtYXR0ZXJVdGlscy5nZXRGb3JtYXR0ZXIodG90YWxfZm9ybWF0dGVyX3R5cGUpO1xuICAgICAgICAgICAgbGV0IHJvdyA9IHtcbiAgICAgICAgICAgICAgICBtZXRyaWM6IG5hbWUsXG4gICAgICAgICAgICAgICAgLy8gdG90YWw6IHRvdGFsX2Zvcm1hdHRlcih0b3RhbCksXG4gICAgICAgICAgICAgICAgdG90YWw6IHRvdGFsX2Zvcm1hdHRlcih0c19zdGF0cy50b3RhbCksXG4gICAgICAgICAgICAgICAgcGVyY185NTogZm9ybWF0dGVyKHRzX3N0YXRzW1wiOTV0aF9wZXJjZW50aWxlXCJdKSxcbiAgICAgICAgICAgICAgICBhdmc6IGZvcm1hdHRlcih0c19zdGF0cy5hdmVyYWdlKSxcbiAgICAgICAgICAgICAgICBtYXg6IGZvcm1hdHRlcih0c19zdGF0cy5tYXhfdmFsKSxcbiAgICAgICAgICAgICAgICBtaW46IGZvcm1hdHRlcih0c19zdGF0cy5taW5fdmFsKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzdGF0c19yb3dzLnZhbHVlLnB1c2gocm93KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHByaW50X3N0YXRzX2NvbHVtbihjb2wpIHtcbiAgICByZXR1cm4gY29sLmxhYmVsO1xufVxuXG5mdW5jdGlvbiBwcmludF9zdGF0c19yb3coY29sLCByb3cpIHtcbiAgICBsZXQgbGFiZWwgPSByb3dbY29sLmlkXTtcbiAgICByZXR1cm4gbGFiZWw7XG59XG5cbmZ1bmN0aW9uIGp1bXBfdG9faGlzdG9yaWNhbF9mbG93cygpIHtcbiAgICBsZXQgc3RhdHVzID0gbnRvcG5nX3N0YXR1c19tYW5hZ2VyLmdldF9zdGF0dXMoKTtcbiAgICBsZXQgcGFyYW1zID0geyBlcG9jaF9iZWdpbjogc3RhdHVzLmVwb2NoX2JlZ2luLCBlcG9jaF9lbmQ6IHN0YXR1cy5lcG9jaF9lbmQgfTtcbiAgICBsZXQgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyhwYXJhbXMpO1xuICAgIGNvbnN0IGhpc3RvcmljYWxfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZGJfc2VhcmNoLmx1YT8ke3VybF9wYXJhbXN9YDtcbiAgICBudG9wbmdfdXJsX21hbmFnZXIuZ29fdG9fdXJsKGhpc3RvcmljYWxfdXJsKTtcbn1cblxuY29uc3QgbW9kYWxfdHJhZmZpY19leHRyYWN0aW9uID0gcmVmKG51bGwpO1xuZnVuY3Rpb24gc2hvd19tb2RhbF90cmFmZmljX2V4dHJhY3Rpb24oKSB7XG4gICAgbW9kYWxfdHJhZmZpY19leHRyYWN0aW9uLnZhbHVlLnNob3coKTtcbn1cblxuZnVuY3Rpb24gc2hvd19tb2RhbF9kb3dubG9hZF9maWxlKCkge1xuICAgIGlmICghdHNfY2hhcnRzX29wdGlvbnM/Lmxlbmd0aCkgeyByZXR1cm47IH1cbiAgICBsZXQgdHNfZ3JvdXAgPSBsYXN0X3RpbWVzZXJpZXNfZ3JvdXBzX2xvYWRlZFswXTtcbiAgICBsZXQgZmlsZW5hbWUgPSB0aW1lc2VyaWVzVXRpbHMuZ2V0U2VyaWVOYW1lKG51bGwsIG51bGwsIHRzX2dyb3VwKTtcbiAgICBtb2RhbF9kb3dubG9hZF9maWxlLnZhbHVlLnNob3coZmlsZW5hbWUpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBkb3dubG9hZF9jaGFydF9wbmcoZmlsZW5hbWUpIHtcbiAgICBsZXQgY2hhcnRfaW1hZ2VfYXJyYXlfcHJvbWlzZSA9IGNoYXJ0cy52YWx1ZS5tYXAoYXN5bmMgKGNoYXJ0KSA9PiB7XG4gICAgICAgIGxldCBjYW52YXMgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgY2hhcnQuZ2V0X2ltYWdlKGNhbnZhcyk7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShhc3luYyAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBjYW52YXMub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoY2FudmFzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIGxldCBoZWlnaHQgPSAwO1xuICAgIGxldCBjaGFydF9pbWFnZV9hcnJheSA9IGF3YWl0IFByb21pc2UuYWxsKGNoYXJ0X2ltYWdlX2FycmF5X3Byb21pc2UpO1xuICAgIGNoYXJ0X2ltYWdlX2FycmF5LmZvckVhY2goKGltYWdlKSA9PiB7XG4gICAgICAgIGhlaWdodCArPSBpbWFnZS5oZWlnaHQ7XG4gICAgfSk7XG4gICAgbGV0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgIGxldCBjYW52YXNfY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgIGNhbnZhcy53aWR0aCA9IGNoYXJ0X2ltYWdlX2FycmF5WzBdLndpZHRoO1xuICAgIGNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgaGVpZ2h0ID0gMDtcbiAgICBjaGFydF9pbWFnZV9hcnJheS5mb3JFYWNoKChpbWFnZSkgPT4ge1xuICAgICAgICBjYW52YXNfY29udGV4dC5kcmF3SW1hZ2UoaW1hZ2UsIDAsIGhlaWdodCwgaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCk7XG4gICAgICAgIGhlaWdodCArPSBpbWFnZS5oZWlnaHQ7XG4gICAgfSk7XG4gICAgbnRvcG5nX3V0aWxpdHkuZG93bmxvYWRfVVJJKGNhbnZhcy50b0RhdGFVUkwoKSwgZmlsZW5hbWUpO1xufVxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG4uaW5saW5lIHtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG59XG5cbi5zZWxlY3QyLXNpemUge1xuICAgIG1pbi13aWR0aDogMThyZW07XG59XG48L3N0eWxlPlxuIiwieyNcbiAgKEMpIDIwMjIgLSBudG9wLm9yZ1xuICBUaGlzIHRlbXBsYXRlIGlzIHVzZWQgYnkgdGhlIGBTZXJ2aWNlIE1hcGAgcGFnZSBpbnNpZGUgdGhlIGBIb3N0c2AgbWVudS4gICAgXG4jfVxuXG48dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJjYXJkLWhlYWRlciBtYi0yXCI+XG4gICAgPHVsIGNsYXNzPVwibmF2IG5hdi10YWJzIGNhcmQtaGVhZGVyLXRhYnNcIiByb2xlPVwidGFibGlzdFwiPlxuICAgICAgPHRlbXBsYXRlIHYtZm9yPVwidGFiIGluIHRhYl9saXN0XCI+XG5cdCAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwidGFiLmFjdGl2ZVwiPlxuXHQgICAgICAgIDxsaSBAY2xpY2s9XCJjaGFuZ2VfdGFiKHRhYilcIiA6Y2xhc3M9XCJ7ICdhY3RpdmUnOiB0YWIuYWN0aXZlIH1cIiBjbGFzcz1cIm5hdi1pdGVtIG5hdi1saW5rXCI+XG4gICAgICAgICAgICB7eyB0YWIudGl0bGUgfX1cbiAgICAgICAgICA8L2xpPlxuXHQgICAgICA8L3RlbXBsYXRlPlxuXHQgICAgICA8dGVtcGxhdGUgdi1lbHNlPlxuXHQgICAgICAgIDxhIEBjbGljaz1cImNoYW5nZV90YWIodGFiKVwiIGhyZWY9XCIjXCIgY2xhc3M9XCJuYXYtaXRlbSBuYXYtbGlua1wiPlxuXHQgICAgICAgICAge3sgdGFiLnRpdGxlIH19XG5cdCAgICAgICAgPC9hPlxuXHQgICAgICA8L3RlbXBsYXRlPlxuICAgICAgPC90ZW1wbGF0ZT5cbiAgICA8L3VsPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBkZWZpbmVDb21wb25lbnQgfSBmcm9tICd2dWUnO1xuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICBjb21wb25lbnRzOiB7XG4gIH0sXG4gIHByb3BzOiB7XG4gICAgaWQ6IFN0cmluZyxcbiAgICB0YWJfbGlzdDogQXJyYXksXG4gIH0sXG4gIGVtaXRzOiBbXCJjbGlja19pdGVtXCJdLFxuICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBvZiB0aGUgY29tcG9uZW50IGNhbGxlZCwgaXQncyBjYWxsZWQgYmVmb3JlIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gIGNyZWF0ZWQoKSB7XG4gIH0sXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9sZF90YWI6IG51bGxcbiAgICB9O1xuICB9LFxuICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBjYWxsZWQgYWZ0ZXIgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgbW91bnRlZCgpIHtcbiAgICBsZXQgdG1wID0gbnVsbDtcbiAgICB0aGlzLiRwcm9wcy50YWJfbGlzdC5mb3JFYWNoKGZ1bmN0aW9uKHRhYikge1xuICAgICAgaWYodGFiLmFjdGl2ZSkge1xuICAgICAgICB0bXAgPSB0YWJcbiAgICAgIH1cbiAgICB9KVxuICAgIHRoaXMub2xkX3RhYiA9IHRtcCB8fCB0aGlzLiRwcm9wcy50YWJfbGlzdFswXTtcblxuICAgIG50b3BuZ19zeW5jLnJlYWR5KHRoaXMuJHByb3BzW1wiaWRcIl0pO1xuICB9LFxuICBtZXRob2RzOiB7XG4gICAgY2hhbmdlX3RhYjogZnVuY3Rpb24odGFiKSB7XG4gICAgICBpZigodGFiLmlkICE9IG51bGwgJiYgdGhpcy5vbGRfdGFiLmlkICE9IHRhYi5pZCkgfHxcbiAgICAgICAgICh0YWIubmFtZSAhPSBudWxsICYmIHRoaXMub2xkX3RhYi5uYW1lICE9IHRhYi5uYW1lKSkge1xuICAgICAgICB0aGlzLm9sZF90YWIgPSB0YWJcbiAgICAgICAgdGhpcy4kZW1pdCgnY2xpY2tfaXRlbScsIHRhYilcbiAgICAgIH1cbiAgICB9XG4gIH0sXG59KTtcbjwvc2NyaXB0PlxuIiwieyNcbiAgKEMpIDIwMjIgLSBudG9wLm9yZ1xuICBUaGlzIHRlbXBsYXRlIGlzIHVzZWQgYnkgdGhlIGBTZXJ2aWNlIE1hcGAgcGFnZSBpbnNpZGUgdGhlIGBIb3N0c2AgbWVudS4gICAgXG4jfVxuXG48dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJjYXJkLWhlYWRlciBtYi0yXCI+XG4gICAgPHVsIGNsYXNzPVwibmF2IG5hdi10YWJzIGNhcmQtaGVhZGVyLXRhYnNcIiByb2xlPVwidGFibGlzdFwiPlxuICAgICAgPHRlbXBsYXRlIHYtZm9yPVwidGFiIGluIHRhYl9saXN0XCI+XG5cdCAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwidGFiLmFjdGl2ZVwiPlxuXHQgICAgICAgIDxsaSBAY2xpY2s9XCJjaGFuZ2VfdGFiKHRhYilcIiA6Y2xhc3M9XCJ7ICdhY3RpdmUnOiB0YWIuYWN0aXZlIH1cIiBjbGFzcz1cIm5hdi1pdGVtIG5hdi1saW5rXCI+XG4gICAgICAgICAgICB7eyB0YWIudGl0bGUgfX1cbiAgICAgICAgICA8L2xpPlxuXHQgICAgICA8L3RlbXBsYXRlPlxuXHQgICAgICA8dGVtcGxhdGUgdi1lbHNlPlxuXHQgICAgICAgIDxhIEBjbGljaz1cImNoYW5nZV90YWIodGFiKVwiIGhyZWY9XCIjXCIgY2xhc3M9XCJuYXYtaXRlbSBuYXYtbGlua1wiPlxuXHQgICAgICAgICAge3sgdGFiLnRpdGxlIH19XG5cdCAgICAgICAgPC9hPlxuXHQgICAgICA8L3RlbXBsYXRlPlxuICAgICAgPC90ZW1wbGF0ZT5cbiAgICA8L3VsPlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBkZWZpbmVDb21wb25lbnQgfSBmcm9tICd2dWUnO1xuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb21wb25lbnQoe1xuICBjb21wb25lbnRzOiB7XG4gIH0sXG4gIHByb3BzOiB7XG4gICAgaWQ6IFN0cmluZyxcbiAgICB0YWJfbGlzdDogQXJyYXksXG4gIH0sXG4gIGVtaXRzOiBbXCJjbGlja19pdGVtXCJdLFxuICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBvZiB0aGUgY29tcG9uZW50IGNhbGxlZCwgaXQncyBjYWxsZWQgYmVmb3JlIGh0bWwgdGVtcGxhdGUgY3JlYXRpb24uICovXG4gIGNyZWF0ZWQoKSB7XG4gIH0sXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9sZF90YWI6IG51bGxcbiAgICB9O1xuICB9LFxuICAvKiogVGhpcyBtZXRob2QgaXMgdGhlIGZpcnN0IG1ldGhvZCBjYWxsZWQgYWZ0ZXIgaHRtbCB0ZW1wbGF0ZSBjcmVhdGlvbi4gKi9cbiAgbW91bnRlZCgpIHtcbiAgICBsZXQgdG1wID0gbnVsbDtcbiAgICB0aGlzLiRwcm9wcy50YWJfbGlzdC5mb3JFYWNoKGZ1bmN0aW9uKHRhYikge1xuICAgICAgaWYodGFiLmFjdGl2ZSkge1xuICAgICAgICB0bXAgPSB0YWJcbiAgICAgIH1cbiAgICB9KVxuICAgIHRoaXMub2xkX3RhYiA9IHRtcCB8fCB0aGlzLiRwcm9wcy50YWJfbGlzdFswXTtcblxuICAgIG50b3BuZ19zeW5jLnJlYWR5KHRoaXMuJHByb3BzW1wiaWRcIl0pO1xuICB9LFxuICBtZXRob2RzOiB7XG4gICAgY2hhbmdlX3RhYjogZnVuY3Rpb24odGFiKSB7XG4gICAgICBpZigodGFiLmlkICE9IG51bGwgJiYgdGhpcy5vbGRfdGFiLmlkICE9IHRhYi5pZCkgfHxcbiAgICAgICAgICh0YWIubmFtZSAhPSBudWxsICYmIHRoaXMub2xkX3RhYi5uYW1lICE9IHRhYi5uYW1lKSkge1xuICAgICAgICB0aGlzLm9sZF90YWIgPSB0YWJcbiAgICAgICAgdGhpcy4kZW1pdCgnY2xpY2tfaXRlbScsIHRhYilcbiAgICAgIH1cbiAgICB9XG4gIH0sXG59KTtcbjwvc2NyaXB0PlxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbiAgICA8bW9kYWwgQHNob3dlZD1cInNob3dlZCgpXCIgcmVmPVwibW9kYWxfaWRcIj5cbiAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+e3t0aXRsZV9kZWxldGV9fTwvdGVtcGxhdGU+XG4gICAgICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAgICAgIHt7Ym9keV9kZWxldGV9fVxuICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6Zm9vdGVyPlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJkZWxldGVfXCIgY2xhc3M9XCJidG4gYnRuLWRhbmdlclwiPnt7X2kxOG4oJ2RlbGV0ZScpfX08L2J1dHRvbj5cbiAgICAgIDwvdGVtcGxhdGU+XG4gICAgPC9tb2RhbD5cbjwvdGVtcGxhdGU+XG4gIFxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBjb21wdXRlZCwgd2F0Y2ggfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIG1vZGFsIH0gZnJvbSBcIi4vbW9kYWwudnVlXCI7XG5cbmNvbnN0IG1vZGFsX2lkID0gcmVmKG51bGwpO1xuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFsnZGVsZXRlJywnZGVsZXRlX2FsbCddKTtcblxuY29uc3Qgc2hvd2VkID0gKCkgPT4ge307XG5sZXQgYm9keV9kZWxldGUgPSByZWYoXCJcIik7XG5sZXQgdGl0bGVfZGVsZXRlID0gcmVmKFwiXCIpO1xuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gICAgYm9keTogU3RyaW5nLFxuICAgIHRpdGxlOiBTdHJpbmcsXG59KTtcbmNvbnN0IHNob3cgPSAoYm9keSwgdGl0bGUpID0+IHtcblxuICBpZiAoYm9keSAhPSBudWxsICYmIHRpdGxlICE9IG51bGwpIHtcblxuICAgIGJvZHlfZGVsZXRlLnZhbHVlID0gYm9keTtcbiAgICB0aXRsZV9kZWxldGUudmFsdWUgPSB0aXRsZTtcbiAgfSBlbHNlIHtcblxuICAgIGJvZHlfZGVsZXRlLnZhbHVlID0gcHJvcHMuYm9keTtcbiAgICB0aXRsZV9kZWxldGUudmFsdWUgPSBwcm9wcy50aXRsZTtcbiAgfVxuICBtb2RhbF9pZC52YWx1ZS5zaG93KCk7XG59O1xuXG5jb25zdCBkZWxldGVfID0gKCkgPT4ge1xuICAgIGVtaXQoJ2RlbGV0ZScpO1xuXG4gICAgY2xvc2UoKTtcbn07XG5cbmNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICAgIG1vZGFsX2lkLnZhbHVlLmNsb3NlKCk7XG59O1xuXG5cbmRlZmluZUV4cG9zZSh7IHNob3csIGNsb3NlIH0pO1xuXG5vbk1vdW50ZWQoKCkgPT4ge1xufSk7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuPC9zdHlsZT5cblxuIiwieyNcbiAgKEMpIDIwMjIgLSBudG9wLm9yZ1xuICBUaGlzIHRlbXBsYXRlIGlzIHVzZWQgYnkgdGhlIGBTZXJ2aWNlIE1hcGAgcGFnZSBpbnNpZGUgdGhlIGBIb3N0c2AgbWVudS4gICAgXG4jfVxuXG48dGVtcGxhdGU+XG5cbjxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wtbGctMTJcIj5cbiAgICA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZGFuZ2VyIGQtbm9uZVwiIGlkPSdhbGVydC1yb3ctYnV0dG9ucycgcm9sZT1cImFsZXJ0XCI+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImNhcmRcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJvdmVybGF5IGp1c3RpZnktY29udGVudC1jZW50ZXIgYWxpZ24taXRlbXMtY2VudGVyIHBvc2l0aW9uLWFic29sdXRlIGgtMTAwIHctMTAwXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJzcGlubmVyLWJvcmRlciB0ZXh0LXByaW1hcnkgbXQtNVwiIHJvbGU9XCJzdGF0dXNcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3Itb25seSBwb3NpdGlvbi1hYnNvbHV0ZVwiPkxvYWRpbmcuLi48L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICBcdDxkaXYgaWQ9XCJ0YWJsZV9hc3NldFwiPlxuICAgICAgICAgIDxtb2RhbC1kZWxldGUtY29uZmlybSByZWY9XCJtb2RhbF9kZWxldGVfYWxsXCJcbiAgICAgICAgICAgIDp0aXRsZT1cInRpdGxlX2RlbGV0ZVwiXG4gICAgICAgICAgICA6Ym9keT1cImJvZHlfZGVsZXRlXCJcbiAgICAgICAgICAgIEBkZWxldGU9XCJkZWxldGVfYWxsXCI+XG4gICAgICAgICAgPC9tb2RhbC1kZWxldGUtY29uZmlybT5cbiAgXG4gICAgICAgICAgPHRhYi1saXN0IHJlZj1cImFzc2V0X3RhYl9saXN0XCJcbiAgICAgICAgICAgIGlkPVwiYXNzZXRfdGFiX2xpc3RcIlxuICAgICAgICAgICAgOnRhYl9saXN0PVwidGFiX2xpc3RcIlxuICAgICAgICAgICAgQGNsaWNrX2l0ZW09XCJjbGlja19pdGVtXCI+XG4gICAgICAgICAgPC90YWItbGlzdD5cblxuICAgICAgICAgIDxkYXRhdGFibGUgdi1pZj1cImFzc2V0X3RhYmxlX3RhYiA9PSAnc3RhbmRhcmQnXCIgcmVmPVwidGFibGVfYXNzZXRfc3RhbmRhcmRcIlxuICAgICAgICAgICAgOnRhYmxlX2J1dHRvbnM9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC50YWJsZV9idXR0b25zXCJcbiAgICAgICAgICAgIDpjb2x1bW5zX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmNvbHVtbnNfY29uZmlnXCJcbiAgICAgICAgICAgIDpkYXRhX3VybD1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmRhdGFfdXJsXCJcbiAgICAgICAgICAgIDplbmFibGVfc2VhcmNoPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQuZW5hYmxlX3NlYXJjaFwiXG4gICAgICAgICAgICA6ZmlsdGVyX2J1dHRvbnM9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC50YWJsZV9maWx0ZXJzXCI+XG4gICAgICAgICAgICA6dGFibGVfY29uZmlnPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfY29uZmlnXCI+XG4gICAgICAgICAgPC9kYXRhdGFibGU+XG4gICAgICAgICAgPGRhdGF0YWJsZSB2LWlmPVwiYXNzZXRfdGFibGVfdGFiID09ICdjZW50cmFsaXR5J1wiIHJlZj1cInRhYmxlX2Fzc2V0X2NlbnRyYWxpdHlcIlxuICAgICAgICAgICAgOnRhYmxlX2J1dHRvbnM9XCJjb25maWdfZGV2aWNlc19jZW50cmFsaXR5LnRhYmxlX2J1dHRvbnNcIlxuICAgICAgICAgICAgOmNvbHVtbnNfY29uZmlnPVwiY29uZmlnX2RldmljZXNfY2VudHJhbGl0eS5jb2x1bW5zX2NvbmZpZ1wiXG4gICAgICAgICAgICA6ZGF0YV91cmw9XCJjb25maWdfZGV2aWNlc19jZW50cmFsaXR5LmRhdGFfdXJsXCJcbiAgICAgICAgICAgIDplbmFibGVfc2VhcmNoPVwiY29uZmlnX2RldmljZXNfY2VudHJhbGl0eS5lbmFibGVfc2VhcmNoXCJcbiAgICAgICAgICAgIDpmaWx0ZXJfYnV0dG9ucz1cImNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkudGFibGVfZmlsdGVyc1wiPlxuICAgICAgICAgICAgOnRhYmxlX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkudGFibGVfY29uZmlnXCI+XG4gICAgICAgICAgPC9kYXRhdGFibGU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1mb290ZXJcIj5cbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9J2J0bi1kZWxldGUtYWxsJyBjbGFzcz1cImJ0biBidG4tZGFuZ2VyIG1lLTFcIj48aSBjbGFzcz0nZmFzIGZhLXRyYXNoJz48L2k+IHt7IGkxOG4oXCJtYXBfcGFnZS5kZWxldGVfYXNzZXRzXCIpIH19PC9idXR0b24+XG4gICAgICAgIDxhIHYtYmluZDpocmVmPVwiZ2V0X3VybFwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgcm9sZT1cImJ1dHRvblwiIGFyaWEtZGlzYWJsZWQ9XCJ0cnVlXCIgIGRvd25sb2FkPVwiYXNzZXRfbWFwLmpzb25cIiB0YXJnZXQ9XCJfYmxhbmtcIj48aSBjbGFzcz1cImZhcyBmYS1kb3dubG9hZFwiPjwvaT48L2E+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8Tm90ZUxpc3QgOm5vdGVfbGlzdD1cIm5vdGVzXCI+IDwvTm90ZUxpc3Q+XG5cbiAgPC9kaXY+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBkZWZhdWx0IGFzIERhdGF0YWJsZSB9IGZyb20gXCIuL2RhdGF0YWJsZS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgVGFiTGlzdCB9IGZyb20gXCIuL3RhYi1saXN0LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbERlbGV0ZUNvbmZpcm0gfSBmcm9tIFwiLi9tb2RhbC1kZWxldGUtY29uZmlybS52dWVcIjtcbmltcG9ydCB7IG50b3BuZ19ldmVudHNfbWFuYWdlciwgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSAnLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcyc7XG5pbXBvcnQgTm90ZUxpc3QgZnJvbSBcIi4vbm90ZS1saXN0LnZ1ZVwiO1xuXG5jb25zdCBjaGFuZ2VfYXNzZXRfdGFibGVfdGFiX2V2ZW50ID0gXCJjaGFuZ2VfYXNzZXRfdGFibGVfdGFiX2V2ZW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1x0ICBcbiAgICAnZGF0YXRhYmxlJzogRGF0YXRhYmxlLFxuICAgICdtb2RhbC1kZWxldGUtY29uZmlybSc6IE1vZGFsRGVsZXRlQ29uZmlybSxcbiAgICAndGFiLWxpc3QnOiBUYWJMaXN0LFxuICAgIE5vdGVMaXN0XG4gIH0sXG4gIHByb3BzOiB7XG4gICAgcGFnZV9jc3JmOiBTdHJpbmcsXG4gICAgdXJsX3BhcmFtczogT2JqZWN0LFxuICAgIHZpZXc6IFN0cmluZyxcbiAgICB0YWJsZV9maWx0ZXJzOiBBcnJheSxcbiAgfSxcbiAgLyoqXG4gICAqIEZpcnN0IG1ldGhvZCBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAqL1xuICBjcmVhdGVkKCkge1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgnYXNzZXRfZmFtaWx5JywgdGhpcy4kcHJvcHMudXJsX3BhcmFtcy5hc3NldF9mYW1pbHkpO1xuICAgIHRoaXMuYXNzZXRfdGFibGVfdGFiID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ3ZpZXcnKSB8fCAnY2VudHJhbGl0eSc7XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCd2aWV3JywgdGhpcy5zZXJ2aWNlX3RhYmxlX3RhYik7XG4gICAgdGhpcy50YWJfbGlzdC5mb3JFYWNoKChpKSA9PiB7XG4gICAgICBpZih0aGlzLmFzc2V0X3RhYmxlX3RhYiA9PSBpLmlkKVxuICAgICAgICBpLmFjdGl2ZSA9IHRydWU7XG4gICAgfSk7XG4gICAgc3RhcnRfZGF0YXRhYmxlKHRoaXMpO1xuICB9LFxuICBtb3VudGVkKCkge1xuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJwYWdlX2Fzc2V0X3RhYmxlXCIsIG50b3BuZ19jdXN0b21fZXZlbnRzLkRBVEFUQUJMRV9MT0FERUQsICgpID0+IHtcbiAgICAgIGlmKG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCdob3N0JykpXG4gICAgICAgIHRoaXMuaGlkZV9kcm9wZG93bnMoKTtcbiAgICB9KTtcbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KFwiY2hhbmdlX2Fzc2V0X3RhYmxlX3RhYlwiLCBjaGFuZ2VfYXNzZXRfdGFibGVfdGFiX2V2ZW50LCAodGFiKSA9PiB7XG5cdCAgICBsZXQgdGFibGUgPSB0aGlzLmdldF9hY3RpdmVfdGFibGUoKTtcbiAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgndmlldycsIHRhYik7XG4gICAgICB0YWJsZS5kZXN0cm95X3RhYmxlKCk7XG4gICAgICB0aGlzLmFzc2V0X3RhYmxlX3RhYiA9IHRhYjtcbiAgICB9KTtcblxuICAgICQoXCIjYnRuLWRlbGV0ZS1hbGxcIikuY2xpY2soKCkgPT4gdGhpcy5zaG93X2RlbGV0ZV9hbGxfZGlhbG9nKCkpO1xuICB9LCAgICBcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG4gICAgICBjb25maWdfZGV2aWNlc19zdGFuZGFyZDogbnVsbCxcbiAgICAgIGNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHk6IG51bGwsXG4gICAgICB0aXRsZV9kZWxldGU6IGkxOG4oJ21hcF9wYWdlLmRlbGV0ZV9hc3NldHMnKSxcbiAgICAgIGJvZHlfZGVsZXRlOiBpMThuKCdtYXBfcGFnZS5kZWxldGVfYXNzZXRzX21lc3NhZ2UnKSxcbiAgICAgIHRpdGxlX2Rvd25sb2FkOiBpMThuKCdtYXBfcGFnZS5kb3dubG9hZCcpLFxuICAgICAgYm9keV9kb3dubG9hZDogaTE4bignbWFwX3BhZ2UuZG93bmxvYWRfbWVzc2FnZScpLFxuICAgICAgZ2V0X3VybDogbnVsbCxcbiAgICAgIGFzc2V0X3RhYmxlX3RhYjogbnVsbCxcbiAgICAgIG5vdGVzOiBbaTE4bignbWFwX3BhZ2UudGFibGVfbm90ZV9hc3NldF9tYXAnKV0sXG4gICAgICB0YWJfbGlzdDogW1xuICAgICAgICB7IFxuICAgICAgICAgIHRpdGxlOiBpMThuKCdtYXBfcGFnZS5zdGFuZGFyZF92aWV3JyksXG4gICAgICAgICAgYWN0aXZlOiAodmlldyA9PSAnc3RhbmRhcmQnKSxcbiAgICAgICAgICBpZDogJ3N0YW5kYXJkJ1xuICAgICAgICB9LFxuICAgICAgICB7IFxuICAgICAgICAgIHRpdGxlOiBpMThuKCdtYXBfcGFnZS5jZW50cmFsaXR5X3ZpZXcnKSxcbiAgICAgICAgICBhY3RpdmU6ICh2aWV3ID09ICdjZW50cmFsaXR5JyksXG4gICAgICAgICAgaWQ6ICdjZW50cmFsaXR5J1xuICAgICAgICB9LFxuICAgICAgXVxuICAgIH07XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCB0YWJsZSA9IHRoaXMuZ2V0X2FjdGl2ZV90YWJsZSgpO1xuICAgICAgdGFibGUuZGVzdHJveV90YWJsZSgpO1xuICAgIH0sXG4gICAgLyogTWV0aG9kIHVzZWQgdG8gc3dpdGNoIGFjdGl2ZSB0YWJsZSB0YWIgKi9cbiAgICBjbGlja19pdGVtOiBmdW5jdGlvbihpdGVtKSB7XG4gICAgICB0aGlzLnRhYl9saXN0LmZvckVhY2goKGkpID0+IGkuYWN0aXZlID0gZmFsc2UpO1xuICAgICAgaXRlbS5hY3RpdmUgPSB0cnVlO1xuICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfY3VzdG9tX2V2ZW50KGNoYW5nZV9hc3NldF90YWJsZV90YWJfZXZlbnQsIGl0ZW0uaWQpO1xuICAgIH0sXG4gICAgZGVsZXRlX2FsbDogYXN5bmMgZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9uZXR3b3JrX21hcHMubHVhYDtcbiAgICAgIGxldCBwYXJhbXMgPSB7XG4gICAgICAgIGlmaWQ6IHRoaXMudXJsX3BhcmFtcy5pZmlkLFxuICAgICAgICBhY3Rpb246ICdyZXNldCcsXG4gICAgICAgIHBhZ2U6IHRoaXMudXJsX3BhcmFtcy5wYWdlLFxuICAgICAgICBjc3JmOiB0aGlzLiRwcm9wcy5wYWdlX2NzcmYsXG4gICAgICAgIG1hcDogdGhpcy51cmxfcGFyYW1zLm1hcFxuICAgICAgfTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxldCBoZWFkZXJzID0ge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgfTtcbiAgICAgICAgYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCwgeyBtZXRob2Q6ICdwb3N0JywgaGVhZGVycywgYm9keTogSlNPTi5zdHJpbmdpZnkocGFyYW1zKSB9KTtcbiAgICAgICAgdGhpcy5yZWxvYWRfdGFibGUoKTtcbiAgICAgIH0gY2F0Y2goZXJyKSB7XG4gICAgICAgIHRoaXMucmVsb2FkX3RhYmxlKCk7ICBcbiAgICAgIH0gICAgICBcbiAgICB9LFxuICAgIGNyZWF0ZV9hY3Rpb25fYnV0dG9uX2hpc3RvcmljYWxfZmxvd19saW5rOiBmdW5jdGlvbihfLCB0eXBlLCByb3dEYXRhKSB7XG4gICAgbGV0IGhpc3RvcmljYWxfZmxvd19saW5rID0ge1xuICAgICAgaGFuZGxlcklkOiBcImhpc3RvcmljYWxfZmxvd19saW5rXCIsXG4gICAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgIGhpc3RvcmljYWxfZmxvdyhyb3dEYXRhKTtcbiAgICAgIH0sXG4gICAgfVxuXG4gICAgcmV0dXJuIERhdGFUYWJsZVV0aWxzLmNyZWF0ZUFjdGlvbkJ1dHRvbnMoW1xuICAgICAgeyBjbGFzczogYHBvaW50ZXJgLCBoYW5kbGVyOiBoaXN0b3JpY2FsX2Zsb3dfbGluaywgaWNvbjogJ2ZhcyBmYS1zdHJlYW0nLCB0aXRsZTogaTE4bignZGJfZXhwbG9yZXIuaGlzdG9yaWNhbF9kYXRhJykgfSxcbiAgICBdKTtcbiAgICBcbiAgICB9LFxuICAgIGhpZGVfZHJvcGRvd25zOiBmdW5jdGlvbigpIHsgICAgICBcbiAgICAgICQoYCNuZXR3b3JrX2Ryb3Bkb3duYCkucmVtb3ZlQ2xhc3MoJ2QtaW5saW5lJylcbiAgICAgICQoYCN2bGFuX2lkX2Ryb3Bkb3duYCkucmVtb3ZlQ2xhc3MoJ2QtaW5saW5lJylcbiAgICAgICQoYCNuZXR3b3JrX2Ryb3Bkb3duYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgICAkKGAjdmxhbl9pZF9kcm9wZG93bmApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgIH0sIFxuICAgIHJlbG9hZF90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdGFibGUgPSB0aGlzLmdldF9hY3RpdmVfdGFibGUoKTtcbiAgICAgIE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTtcbiAgICAgIHRhYmxlLnJlbG9hZCgpO1xuICAgICAgTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpO1xuICAgIH0sXG4gICAgZ2V0X2FjdGl2ZV90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy4kcmVmc1tgdGFibGVfYXNzZXRfJHt0aGlzLmFzc2V0X3RhYmxlX3RhYn1gXTtcbiAgICB9LFxuICAgIHNob3dfZGVsZXRlX2FsbF9kaWFsb2c6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy4kcmVmc1tcIm1vZGFsX2RlbGV0ZV9hbGxcIl0uc2hvdygpO1xuICAgIH0sXG4gIH0sXG59ICBcblxuZnVuY3Rpb24gaGlzdG9yaWNhbF9mbG93KHJvdykge1xuICBjb25zdCBjbGllbnRfaXAgPSByb3cuY2xpZW50LnNwbGl0KFwiaG9zdD1cIilbMV0uc3BsaXQoXCImXCIpWzBdO1xuICBjb25zdCBzZXJ2ZXJfaXAgPSByb3cuc2VydmVyLnNwbGl0KFwiaG9zdD1cIilbMV0uc3BsaXQoXCImXCIpWzBdO1xuICBjb25zdCBlcG9jaF9lbmQgPSByb3cuZXBvY2hfZW5kO1xuICBjb25zdCBlcG9jaF9iZWdpbiA9IHJvdy5lcG9jaF9iZWdpbjtcblxuICBjb25zdCBwYXJhbXMgPSB7XG4gICAgZXBvY2hfYmVnaW46IGVwb2NoX2JlZ2luLFxuICAgIGVwb2NoX2VuZDogZXBvY2hfZW5kLFxuICAgIHNydl9pcDogYCR7c2VydmVyX2lwfTtlcWAsXG4gICAgY2xpX2lwOiBgJHtjbGllbnRfaXB9O2VxYCxcbiAgfVxuICBjb25zdCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKHBhcmFtcylcbiAgbnRvcG5nX3VybF9tYW5hZ2VyLmdvX3RvX3VybChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9kYl9zZWFyY2gubHVhPyR7dXJsX3BhcmFtc31gKTtcblxufVxuZnVuY3Rpb24gc3RhcnRfZGF0YXRhYmxlKERhdGF0YWJsZVZ1ZSkge1xuICBjb25zdCBkYXRhdGFibGVCdXR0b24gPSBbXTtcbiAgbGV0IGNvbHVtbnMgPSBbXTtcbiAgXG4gIERhdGF0YWJsZVZ1ZS5nZXRfdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvZ2V0X21hcC5sdWFgLCB1cmxfcGFyYW1zKVxuICBcbiAgLyogTWFuYWdlIHRoZSBidXR0b25zIGNsb3NlIHRvIHRoZSBzZWFyY2ggYm94ICovXG4gIGRhdGF0YWJsZUJ1dHRvbi5wdXNoKHtcbiAgICB0ZXh0OiAnPGkgY2xhc3M9XCJmYXMgZmEtc3luY1wiPjwvaT4nLFxuICAgIGNsYXNzTmFtZTogJ2J0bi1saW5rJyxcbiAgICBhY3Rpb246IGZ1bmN0aW9uIChlLCBkdCwgbm9kZSwgY29uZmlnKSB7XG4gICAgICBEYXRhdGFibGVWdWUucmVsb2FkX3RhYmxlKCk7XG4gICAgfVxuICB9KTtcbiAgXG4gIGxldCB0bXBfcGFyYW1zID0gdXJsX3BhcmFtcztcbiAgdG1wX3BhcmFtc1sndmlldyddID0gJ3N0YW5kYXJkJ1xuICBcbiAgbGV0IGRlZmF1bHREYXRhdGFibGVDb25maWcgPSB7XG4gICAgdGFibGVfYnV0dG9uczogZGF0YXRhYmxlQnV0dG9uLFxuICAgIGNvbHVtbnNfY29uZmlnOiBbXSxcbiAgICBkYXRhX3VybDogTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvZ2V0X21hcC5sdWFgLCB0bXBfcGFyYW1zKSxcbiAgICBlbmFibGVfc2VhcmNoOiB0cnVlLFxuICB9O1xuXG4gIGxldCB0YWJsZV9maWx0ZXJzID0gW11cbiAgZm9yIChsZXQgZmlsdGVyIG9mIChEYXRhdGFibGVWdWUuJHByb3BzLnRhYmxlX2ZpbHRlcnMgfHwgW10pKSB7XG4gICAgZmlsdGVyLmNhbGxiYWNrRnVuY3Rpb24gPSAodGFibGUsIHZhbHVlKSA9PiB7XG4gICAgICB0bXBfcGFyYW1zWyd2aWV3J10gPSBEYXRhdGFibGVWdWUuYXNzZXRfdGFibGVfdGFiO1xuICAgICAgdG1wX3BhcmFtc1tmaWx0ZXIuZmlsdGVyTWVudUtleV0gPSB2YWx1ZS5pZDtcbiAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChmaWx0ZXIuZmlsdGVyTWVudUtleSwgdmFsdWUuaWQpO1xuICAgICAgdGFibGUuYWpheC51cmwoTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvZ2V0X21hcC5sdWFgLCB0bXBfcGFyYW1zKSk7XG4gICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICB0YWJsZS5hamF4LnJlbG9hZCgpO1xuICAgICAgTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpO1xuICAgIH0sXG4gICAgdGFibGVfZmlsdGVycy5wdXNoKGZpbHRlcik7XG4gIH1cbiAgXG4gIC8qIFN0YW5kYXJkIHRhYmxlIGNvbmZpZ3VyYXRpb24gKi8gIFxuXG4gIGNvbHVtbnMgPSBbXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiYWN0aW9uc1wiKSwgbmFtZTogJ2FjdGlvbnMnLCAgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCBvcmRlcmFibGU6IGZhbHNlLCByZXNwb25zaXZlUHJpb3JpdHk6IDAsIHJlbmRlcjogZnVuY3Rpb24gKF8sIHR5cGUsIHJvd0RhdGEpIHtcbiAgICAgICAgcmV0dXJuIERhdGF0YWJsZVZ1ZS5jcmVhdGVfYWN0aW9uX2J1dHRvbl9oaXN0b3JpY2FsX2Zsb3dfbGluayhfLCB0eXBlLHJvd0RhdGEpO1xuICAgICAgfVxuICAgIH0sIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLmNsaWVudFwiKSwgbmFtZTogJ2NsaWVudCcsIGRhdGE6ICdjbGllbnQnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLnNlcnZlclwiKSwgbmFtZTogJ3NlcnZlcicsIGRhdGE6ICdzZXJ2ZXInLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLmFzc2V0X2ZhbWlseVwiKSwgbmFtZTogJ2ZhbWlseScsIGRhdGE6ICdmYW1pbHknLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLmxhc3Rfc2VlblwiKSwgbmFtZTogJ2xhc3Rfc2VlbicsIGRhdGE6ICdsYXN0X3NlZW4nLCAgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgXTtcbiAgXG4gIGxldCBjb25maWdEZXZpY2VzID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoZGVmYXVsdERhdGF0YWJsZUNvbmZpZyk7XG4gIGNvbmZpZ0RldmljZXMudGFibGVfY29uZmlnID0geyBzZXJ2ZXJTaWRlOiBmYWxzZSwgb3JkZXI6IFtbIDQgLyogTGFzdCBTZWVuICovLCAnZGVzYycgXV0gfVxuICBjb25maWdEZXZpY2VzLmNvbHVtbnNfY29uZmlnID0gY29sdW1ucztcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9maWx0ZXJzID0gdGFibGVfZmlsdGVycztcbiAgRGF0YXRhYmxlVnVlLmNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkID0gY29uZmlnRGV2aWNlcztcblxuXG4gIC8qIENlbnRyYWxpdHkgdGFibGUgY29uZmlndXJhdGlvbiAqL1xuXG4gIHRtcF9wYXJhbXNbJ3ZpZXcnXSA9ICdjZW50cmFsaXR5JyAgXG4gIGRlZmF1bHREYXRhdGFibGVDb25maWcuZGF0YV91cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9nZXRfbWFwLmx1YWAsIHRtcF9wYXJhbXMpXG5cbiAgY29sdW1ucyA9IFtcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5ob3N0XCIpLCBuYW1lOiAnaG9zdCcsIGRhdGE6ICdob3N0JywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZW5kZXI6IChkYXRhLCB0eXBlKSA9PiB7IHJldHVybiBkYXRhLmxhYmVsIH0sIHJlc3BvbnNpdmVQcmlvcml0eTogMSB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLmFzc2V0X3RvdGFsX2VkZ2VzXCIpLCBuYW1lOiAndG90YWxfZWRnZXMnLCBkYXRhOiAndG90YWxfZWRnZXMnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLmFzc2V0X2luX2VkZ2VzXCIpLCBuYW1lOiAnaW5fZWRnZXMnLCBkYXRhOiAnaW5fZWRnZXMnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLmFzc2V0X291dF9lZGdlc1wiKSwgbmFtZTogJ291dF9lZGdlcycsIGRhdGE6ICdvdXRfZWRnZXMnLCAgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgXTtcblxuICBcbiAgXG4gIGxldCBjZW50cmFsaXR5Q29uZmlnRGV2aWNlcyA9IG50b3BuZ191dGlsaXR5LmNsb25lKGRlZmF1bHREYXRhdGFibGVDb25maWcpO1xuICBjZW50cmFsaXR5Q29uZmlnRGV2aWNlcy50YWJsZV9jb25maWcgPSB7IHNlcnZlclNpZGU6IGZhbHNlLCBvcmRlcjogW1sgMSAvKiBUb3RhbCBFZGdlcyAqLywgJ2Rlc2MnIF1dIH1cbiAgY2VudHJhbGl0eUNvbmZpZ0RldmljZXMuY29sdW1uc19jb25maWcgPSBjb2x1bW5zO1xuICBjZW50cmFsaXR5Q29uZmlnRGV2aWNlcy50YWJsZV9maWx0ZXJzID0gdGFibGVfZmlsdGVycztcblxuICBjb25zb2xlLmxvZyhjb25maWdEZXZpY2VzKVxuICBjb25zb2xlLmxvZyhjZW50cmFsaXR5Q29uZmlnRGV2aWNlcylcbiAgXG4gIERhdGF0YWJsZVZ1ZS5jb25maWdfZGV2aWNlc19jZW50cmFsaXR5ID0gY2VudHJhbGl0eUNvbmZpZ0RldmljZXM7XG59XG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsInsjXG4gIChDKSAyMDIyIC0gbnRvcC5vcmdcbiAgVGhpcyB0ZW1wbGF0ZSBpcyB1c2VkIGJ5IHRoZSBgU2VydmljZSBNYXBgIHBhZ2UgaW5zaWRlIHRoZSBgSG9zdHNgIG1lbnUuICAgIFxuI31cblxuPHRlbXBsYXRlPlxuXG48ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRhbmdlciBkLW5vbmVcIiBpZD0nYWxlcnQtcm93LWJ1dHRvbnMnIHJvbGU9XCJhbGVydFwiPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwib3ZlcmxheSBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGFsaWduLWl0ZW1zLWNlbnRlciBwb3NpdGlvbi1hYnNvbHV0ZSBoLTEwMCB3LTEwMFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwic3Bpbm5lci1ib3JkZXIgdGV4dC1wcmltYXJ5IG10LTVcIiByb2xlPVwic3RhdHVzXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNyLW9ubHkgcG9zaXRpb24tYWJzb2x1dGVcIj5Mb2FkaW5nLi4uPC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgXHQ8ZGl2IGlkPVwidGFibGVfYXNzZXRcIj5cbiAgICAgICAgICA8bW9kYWwtZGVsZXRlLWNvbmZpcm0gcmVmPVwibW9kYWxfZGVsZXRlX2FsbFwiXG4gICAgICAgICAgICA6dGl0bGU9XCJ0aXRsZV9kZWxldGVcIlxuICAgICAgICAgICAgOmJvZHk9XCJib2R5X2RlbGV0ZVwiXG4gICAgICAgICAgICBAZGVsZXRlPVwiZGVsZXRlX2FsbFwiPlxuICAgICAgICAgIDwvbW9kYWwtZGVsZXRlLWNvbmZpcm0+XG4gIFxuICAgICAgICAgIDx0YWItbGlzdCByZWY9XCJhc3NldF90YWJfbGlzdFwiXG4gICAgICAgICAgICBpZD1cImFzc2V0X3RhYl9saXN0XCJcbiAgICAgICAgICAgIDp0YWJfbGlzdD1cInRhYl9saXN0XCJcbiAgICAgICAgICAgIEBjbGlja19pdGVtPVwiY2xpY2tfaXRlbVwiPlxuICAgICAgICAgIDwvdGFiLWxpc3Q+XG5cbiAgICAgICAgICA8ZGF0YXRhYmxlIHYtaWY9XCJhc3NldF90YWJsZV90YWIgPT0gJ3N0YW5kYXJkJ1wiIHJlZj1cInRhYmxlX2Fzc2V0X3N0YW5kYXJkXCJcbiAgICAgICAgICAgIDp0YWJsZV9idXR0b25zPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfYnV0dG9uc1wiXG4gICAgICAgICAgICA6Y29sdW1uc19jb25maWc9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5jb2x1bW5zX2NvbmZpZ1wiXG4gICAgICAgICAgICA6ZGF0YV91cmw9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5kYXRhX3VybFwiXG4gICAgICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmVuYWJsZV9zZWFyY2hcIlxuICAgICAgICAgICAgOmZpbHRlcl9idXR0b25zPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfZmlsdGVyc1wiPlxuICAgICAgICAgICAgOnRhYmxlX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2NvbmZpZ1wiPlxuICAgICAgICAgIDwvZGF0YXRhYmxlPlxuICAgICAgICAgIDxkYXRhdGFibGUgdi1pZj1cImFzc2V0X3RhYmxlX3RhYiA9PSAnY2VudHJhbGl0eSdcIiByZWY9XCJ0YWJsZV9hc3NldF9jZW50cmFsaXR5XCJcbiAgICAgICAgICAgIDp0YWJsZV9idXR0b25zPVwiY29uZmlnX2RldmljZXNfY2VudHJhbGl0eS50YWJsZV9idXR0b25zXCJcbiAgICAgICAgICAgIDpjb2x1bW5zX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkuY29sdW1uc19jb25maWdcIlxuICAgICAgICAgICAgOmRhdGFfdXJsPVwiY29uZmlnX2RldmljZXNfY2VudHJhbGl0eS5kYXRhX3VybFwiXG4gICAgICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cImNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkuZW5hYmxlX3NlYXJjaFwiXG4gICAgICAgICAgICA6ZmlsdGVyX2J1dHRvbnM9XCJjb25maWdfZGV2aWNlc19jZW50cmFsaXR5LnRhYmxlX2ZpbHRlcnNcIj5cbiAgICAgICAgICAgIDp0YWJsZV9jb25maWc9XCJjb25maWdfZGV2aWNlc19jZW50cmFsaXR5LnRhYmxlX2NvbmZpZ1wiPlxuICAgICAgICAgIDwvZGF0YXRhYmxlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtZm9vdGVyXCI+XG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPSdidG4tZGVsZXRlLWFsbCcgY2xhc3M9XCJidG4gYnRuLWRhbmdlciBtZS0xXCI+PGkgY2xhc3M9J2ZhcyBmYS10cmFzaCc+PC9pPiB7eyBpMThuKFwibWFwX3BhZ2UuZGVsZXRlX2Fzc2V0c1wiKSB9fTwvYnV0dG9uPlxuICAgICAgICA8YSB2LWJpbmQ6aHJlZj1cImdldF91cmxcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIHJvbGU9XCJidXR0b25cIiBhcmlhLWRpc2FibGVkPVwidHJ1ZVwiICBkb3dubG9hZD1cImFzc2V0X21hcC5qc29uXCIgdGFyZ2V0PVwiX2JsYW5rXCI+PGkgY2xhc3M9XCJmYXMgZmEtZG93bmxvYWRcIj48L2k+PC9hPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPE5vdGVMaXN0IDpub3RlX2xpc3Q9XCJub3Rlc1wiPiA8L05vdGVMaXN0PlxuXG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRhdGFibGUgfSBmcm9tIFwiLi9kYXRhdGFibGUudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFRhYkxpc3QgfSBmcm9tIFwiLi90YWItbGlzdC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxEZWxldGVDb25maXJtIH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfZXZlbnRzX21hbmFnZXIsIG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMnO1xuaW1wb3J0IE5vdGVMaXN0IGZyb20gXCIuL25vdGUtbGlzdC52dWVcIjtcblxuY29uc3QgY2hhbmdlX2Fzc2V0X3RhYmxlX3RhYl9ldmVudCA9IFwiY2hhbmdlX2Fzc2V0X3RhYmxlX3RhYl9ldmVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcdCAgXG4gICAgJ2RhdGF0YWJsZSc6IERhdGF0YWJsZSxcbiAgICAnbW9kYWwtZGVsZXRlLWNvbmZpcm0nOiBNb2RhbERlbGV0ZUNvbmZpcm0sXG4gICAgJ3RhYi1saXN0JzogVGFiTGlzdCxcbiAgICBOb3RlTGlzdFxuICB9LFxuICBwcm9wczoge1xuICAgIHBhZ2VfY3NyZjogU3RyaW5nLFxuICAgIHVybF9wYXJhbXM6IE9iamVjdCxcbiAgICB2aWV3OiBTdHJpbmcsXG4gICAgdGFibGVfZmlsdGVyczogQXJyYXksXG4gIH0sXG4gIC8qKlxuICAgKiBGaXJzdCBtZXRob2QgY2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjcmVhdGVkLlxuICAgKi9cbiAgY3JlYXRlZCgpIHtcbiAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoJ2Fzc2V0X2ZhbWlseScsIHRoaXMuJHByb3BzLnVybF9wYXJhbXMuYXNzZXRfZmFtaWx5KTtcbiAgICB0aGlzLmFzc2V0X3RhYmxlX3RhYiA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCd2aWV3JykgfHwgJ2NlbnRyYWxpdHknO1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgndmlldycsIHRoaXMuc2VydmljZV90YWJsZV90YWIpO1xuICAgIHRoaXMudGFiX2xpc3QuZm9yRWFjaCgoaSkgPT4ge1xuICAgICAgaWYodGhpcy5hc3NldF90YWJsZV90YWIgPT0gaS5pZClcbiAgICAgICAgaS5hY3RpdmUgPSB0cnVlO1xuICAgIH0pO1xuICAgIHN0YXJ0X2RhdGF0YWJsZSh0aGlzKTtcbiAgfSxcbiAgbW91bnRlZCgpIHtcbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KFwicGFnZV9hc3NldF90YWJsZVwiLCBudG9wbmdfY3VzdG9tX2V2ZW50cy5EQVRBVEFCTEVfTE9BREVELCAoKSA9PiB7XG4gICAgICBpZihudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgnaG9zdCcpKVxuICAgICAgICB0aGlzLmhpZGVfZHJvcGRvd25zKCk7XG4gICAgfSk7XG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudChcImNoYW5nZV9hc3NldF90YWJsZV90YWJcIiwgY2hhbmdlX2Fzc2V0X3RhYmxlX3RhYl9ldmVudCwgKHRhYikgPT4ge1xuXHQgICAgbGV0IHRhYmxlID0gdGhpcy5nZXRfYWN0aXZlX3RhYmxlKCk7XG4gICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoJ3ZpZXcnLCB0YWIpO1xuICAgICAgdGFibGUuZGVzdHJveV90YWJsZSgpO1xuICAgICAgdGhpcy5hc3NldF90YWJsZV90YWIgPSB0YWI7XG4gICAgfSk7XG5cbiAgICAkKFwiI2J0bi1kZWxldGUtYWxsXCIpLmNsaWNrKCgpID0+IHRoaXMuc2hvd19kZWxldGVfYWxsX2RpYWxvZygpKTtcbiAgfSwgICAgXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuICAgICAgY29uZmlnX2RldmljZXNfc3RhbmRhcmQ6IG51bGwsXG4gICAgICBjb25maWdfZGV2aWNlc19jZW50cmFsaXR5OiBudWxsLFxuICAgICAgdGl0bGVfZGVsZXRlOiBpMThuKCdtYXBfcGFnZS5kZWxldGVfYXNzZXRzJyksXG4gICAgICBib2R5X2RlbGV0ZTogaTE4bignbWFwX3BhZ2UuZGVsZXRlX2Fzc2V0c19tZXNzYWdlJyksXG4gICAgICB0aXRsZV9kb3dubG9hZDogaTE4bignbWFwX3BhZ2UuZG93bmxvYWQnKSxcbiAgICAgIGJvZHlfZG93bmxvYWQ6IGkxOG4oJ21hcF9wYWdlLmRvd25sb2FkX21lc3NhZ2UnKSxcbiAgICAgIGdldF91cmw6IG51bGwsXG4gICAgICBhc3NldF90YWJsZV90YWI6IG51bGwsXG4gICAgICBub3RlczogW2kxOG4oJ21hcF9wYWdlLnRhYmxlX25vdGVfYXNzZXRfbWFwJyldLFxuICAgICAgdGFiX2xpc3Q6IFtcbiAgICAgICAgeyBcbiAgICAgICAgICB0aXRsZTogaTE4bignbWFwX3BhZ2Uuc3RhbmRhcmRfdmlldycpLFxuICAgICAgICAgIGFjdGl2ZTogKHZpZXcgPT0gJ3N0YW5kYXJkJyksXG4gICAgICAgICAgaWQ6ICdzdGFuZGFyZCdcbiAgICAgICAgfSxcbiAgICAgICAgeyBcbiAgICAgICAgICB0aXRsZTogaTE4bignbWFwX3BhZ2UuY2VudHJhbGl0eV92aWV3JyksXG4gICAgICAgICAgYWN0aXZlOiAodmlldyA9PSAnY2VudHJhbGl0eScpLFxuICAgICAgICAgIGlkOiAnY2VudHJhbGl0eSdcbiAgICAgICAgfSxcbiAgICAgIF1cbiAgICB9O1xuICB9LFxuICBtZXRob2RzOiB7XG4gICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdGFibGUgPSB0aGlzLmdldF9hY3RpdmVfdGFibGUoKTtcbiAgICAgIHRhYmxlLmRlc3Ryb3lfdGFibGUoKTtcbiAgICB9LFxuICAgIC8qIE1ldGhvZCB1c2VkIHRvIHN3aXRjaCBhY3RpdmUgdGFibGUgdGFiICovXG4gICAgY2xpY2tfaXRlbTogZnVuY3Rpb24oaXRlbSkge1xuICAgICAgdGhpcy50YWJfbGlzdC5mb3JFYWNoKChpKSA9PiBpLmFjdGl2ZSA9IGZhbHNlKTtcbiAgICAgIGl0ZW0uYWN0aXZlID0gdHJ1ZTtcbiAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChjaGFuZ2VfYXNzZXRfdGFibGVfdGFiX2V2ZW50LCBpdGVtLmlkKTtcbiAgICB9LFxuICAgIGRlbGV0ZV9hbGw6IGFzeW5jIGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvbmV0d29ya19tYXBzLmx1YWA7XG4gICAgICBsZXQgcGFyYW1zID0ge1xuICAgICAgICBpZmlkOiB0aGlzLnVybF9wYXJhbXMuaWZpZCxcbiAgICAgICAgYWN0aW9uOiAncmVzZXQnLFxuICAgICAgICBwYWdlOiB0aGlzLnVybF9wYXJhbXMucGFnZSxcbiAgICAgICAgY3NyZjogdGhpcy4kcHJvcHMucGFnZV9jc3JmLFxuICAgICAgICBtYXA6IHRoaXMudXJsX3BhcmFtcy5tYXBcbiAgICAgIH07XG4gICAgICB0cnkge1xuICAgICAgICBsZXQgaGVhZGVycyA9IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIH07XG4gICAgICAgIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcykgfSk7XG4gICAgICAgIHRoaXMucmVsb2FkX3RhYmxlKCk7XG4gICAgICB9IGNhdGNoKGVycikge1xuICAgICAgICB0aGlzLnJlbG9hZF90YWJsZSgpOyAgXG4gICAgICB9ICAgICAgXG4gICAgfSxcbiAgICBjcmVhdGVfYWN0aW9uX2J1dHRvbl9oaXN0b3JpY2FsX2Zsb3dfbGluazogZnVuY3Rpb24oXywgdHlwZSwgcm93RGF0YSkge1xuICAgIGxldCBoaXN0b3JpY2FsX2Zsb3dfbGluayA9IHtcbiAgICAgIGhhbmRsZXJJZDogXCJoaXN0b3JpY2FsX2Zsb3dfbGlua1wiLFxuICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICBoaXN0b3JpY2FsX2Zsb3cocm93RGF0YSk7XG4gICAgICB9LFxuICAgIH1cblxuICAgIHJldHVybiBEYXRhVGFibGVVdGlscy5jcmVhdGVBY3Rpb25CdXR0b25zKFtcbiAgICAgIHsgY2xhc3M6IGBwb2ludGVyYCwgaGFuZGxlcjogaGlzdG9yaWNhbF9mbG93X2xpbmssIGljb246ICdmYXMgZmEtc3RyZWFtJywgdGl0bGU6IGkxOG4oJ2RiX2V4cGxvcmVyLmhpc3RvcmljYWxfZGF0YScpIH0sXG4gICAgXSk7XG4gICAgXG4gICAgfSxcbiAgICBoaWRlX2Ryb3Bkb3duczogZnVuY3Rpb24oKSB7ICAgICAgXG4gICAgICAkKGAjbmV0d29ya19kcm9wZG93bmApLnJlbW92ZUNsYXNzKCdkLWlubGluZScpXG4gICAgICAkKGAjdmxhbl9pZF9kcm9wZG93bmApLnJlbW92ZUNsYXNzKCdkLWlubGluZScpXG4gICAgICAkKGAjbmV0d29ya19kcm9wZG93bmApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgICAgJChgI3ZsYW5faWRfZHJvcGRvd25gKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICB9LCBcbiAgICByZWxvYWRfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHRhYmxlID0gdGhpcy5nZXRfYWN0aXZlX3RhYmxlKCk7XG4gICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICB0YWJsZS5yZWxvYWQoKTtcbiAgICAgIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKTtcbiAgICB9LFxuICAgIGdldF9hY3RpdmVfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJHJlZnNbYHRhYmxlX2Fzc2V0XyR7dGhpcy5hc3NldF90YWJsZV90YWJ9YF07XG4gICAgfSxcbiAgICBzaG93X2RlbGV0ZV9hbGxfZGlhbG9nOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuJHJlZnNbXCJtb2RhbF9kZWxldGVfYWxsXCJdLnNob3coKTtcbiAgICB9LFxuICB9LFxufSAgXG5cbmZ1bmN0aW9uIGhpc3RvcmljYWxfZmxvdyhyb3cpIHtcbiAgY29uc3QgY2xpZW50X2lwID0gcm93LmNsaWVudC5zcGxpdChcImhvc3Q9XCIpWzFdLnNwbGl0KFwiJlwiKVswXTtcbiAgY29uc3Qgc2VydmVyX2lwID0gcm93LnNlcnZlci5zcGxpdChcImhvc3Q9XCIpWzFdLnNwbGl0KFwiJlwiKVswXTtcbiAgY29uc3QgZXBvY2hfZW5kID0gcm93LmVwb2NoX2VuZDtcbiAgY29uc3QgZXBvY2hfYmVnaW4gPSByb3cuZXBvY2hfYmVnaW47XG5cbiAgY29uc3QgcGFyYW1zID0ge1xuICAgIGVwb2NoX2JlZ2luOiBlcG9jaF9iZWdpbixcbiAgICBlcG9jaF9lbmQ6IGVwb2NoX2VuZCxcbiAgICBzcnZfaXA6IGAke3NlcnZlcl9pcH07ZXFgLFxuICAgIGNsaV9pcDogYCR7Y2xpZW50X2lwfTtlcWAsXG4gIH1cbiAgY29uc3QgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyhwYXJhbXMpXG4gIG50b3BuZ191cmxfbWFuYWdlci5nb190b191cmwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZGJfc2VhcmNoLmx1YT8ke3VybF9wYXJhbXN9YCk7XG5cbn1cbmZ1bmN0aW9uIHN0YXJ0X2RhdGF0YWJsZShEYXRhdGFibGVWdWUpIHtcbiAgY29uc3QgZGF0YXRhYmxlQnV0dG9uID0gW107XG4gIGxldCBjb2x1bW5zID0gW107XG4gIFxuICBEYXRhdGFibGVWdWUuZ2V0X3VybCA9IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL2dldF9tYXAubHVhYCwgdXJsX3BhcmFtcylcbiAgXG4gIC8qIE1hbmFnZSB0aGUgYnV0dG9ucyBjbG9zZSB0byB0aGUgc2VhcmNoIGJveCAqL1xuICBkYXRhdGFibGVCdXR0b24ucHVzaCh7XG4gICAgdGV4dDogJzxpIGNsYXNzPVwiZmFzIGZhLXN5bmNcIj48L2k+JyxcbiAgICBjbGFzc05hbWU6ICdidG4tbGluaycsXG4gICAgYWN0aW9uOiBmdW5jdGlvbiAoZSwgZHQsIG5vZGUsIGNvbmZpZykge1xuICAgICAgRGF0YXRhYmxlVnVlLnJlbG9hZF90YWJsZSgpO1xuICAgIH1cbiAgfSk7XG4gIFxuICBsZXQgdG1wX3BhcmFtcyA9IHVybF9wYXJhbXM7XG4gIHRtcF9wYXJhbXNbJ3ZpZXcnXSA9ICdzdGFuZGFyZCdcbiAgXG4gIGxldCBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnID0ge1xuICAgIHRhYmxlX2J1dHRvbnM6IGRhdGF0YWJsZUJ1dHRvbixcbiAgICBjb2x1bW5zX2NvbmZpZzogW10sXG4gICAgZGF0YV91cmw6IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL2dldF9tYXAubHVhYCwgdG1wX3BhcmFtcyksXG4gICAgZW5hYmxlX3NlYXJjaDogdHJ1ZSxcbiAgfTtcblxuICBsZXQgdGFibGVfZmlsdGVycyA9IFtdXG4gIGZvciAobGV0IGZpbHRlciBvZiAoRGF0YXRhYmxlVnVlLiRwcm9wcy50YWJsZV9maWx0ZXJzIHx8IFtdKSkge1xuICAgIGZpbHRlci5jYWxsYmFja0Z1bmN0aW9uID0gKHRhYmxlLCB2YWx1ZSkgPT4ge1xuICAgICAgdG1wX3BhcmFtc1sndmlldyddID0gRGF0YXRhYmxlVnVlLmFzc2V0X3RhYmxlX3RhYjtcbiAgICAgIHRtcF9wYXJhbXNbZmlsdGVyLmZpbHRlck1lbnVLZXldID0gdmFsdWUuaWQ7XG4gICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoZmlsdGVyLmZpbHRlck1lbnVLZXksIHZhbHVlLmlkKTtcbiAgICAgIHRhYmxlLmFqYXgudXJsKE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL2dldF9tYXAubHVhYCwgdG1wX3BhcmFtcykpO1xuICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgdGFibGUuYWpheC5yZWxvYWQoKTtcbiAgICAgIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKTtcbiAgICB9LFxuICAgIHRhYmxlX2ZpbHRlcnMucHVzaChmaWx0ZXIpO1xuICB9XG4gIFxuICAvKiBTdGFuZGFyZCB0YWJsZSBjb25maWd1cmF0aW9uICovICBcblxuICBjb2x1bW5zID0gW1xuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImFjdGlvbnNcIiksIG5hbWU6ICdhY3Rpb25zJywgIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgb3JkZXJhYmxlOiBmYWxzZSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAwLCByZW5kZXI6IGZ1bmN0aW9uIChfLCB0eXBlLCByb3dEYXRhKSB7XG4gICAgICAgIHJldHVybiBEYXRhdGFibGVWdWUuY3JlYXRlX2FjdGlvbl9idXR0b25faGlzdG9yaWNhbF9mbG93X2xpbmsoXywgdHlwZSxyb3dEYXRhKTtcbiAgICAgIH1cbiAgICB9LCB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5jbGllbnRcIiksIG5hbWU6ICdjbGllbnQnLCBkYXRhOiAnY2xpZW50JywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5zZXJ2ZXJcIiksIG5hbWU6ICdzZXJ2ZXInLCBkYXRhOiAnc2VydmVyJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5hc3NldF9mYW1pbHlcIiksIG5hbWU6ICdmYW1pbHknLCBkYXRhOiAnZmFtaWx5JywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5sYXN0X3NlZW5cIiksIG5hbWU6ICdsYXN0X3NlZW4nLCBkYXRhOiAnbGFzdF9zZWVuJywgIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gIF07XG4gIFxuICBsZXQgY29uZmlnRGV2aWNlcyA9IG50b3BuZ191dGlsaXR5LmNsb25lKGRlZmF1bHREYXRhdGFibGVDb25maWcpO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2NvbmZpZyA9IHsgc2VydmVyU2lkZTogZmFsc2UsIG9yZGVyOiBbWyA0IC8qIExhc3QgU2VlbiAqLywgJ2Rlc2MnIF1dIH1cbiAgY29uZmlnRGV2aWNlcy5jb2x1bW5zX2NvbmZpZyA9IGNvbHVtbnM7XG4gIGNvbmZpZ0RldmljZXMudGFibGVfZmlsdGVycyA9IHRhYmxlX2ZpbHRlcnM7XG4gIERhdGF0YWJsZVZ1ZS5jb25maWdfZGV2aWNlc19zdGFuZGFyZCA9IGNvbmZpZ0RldmljZXM7XG5cblxuICAvKiBDZW50cmFsaXR5IHRhYmxlIGNvbmZpZ3VyYXRpb24gKi9cblxuICB0bXBfcGFyYW1zWyd2aWV3J10gPSAnY2VudHJhbGl0eScgIFxuICBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnLmRhdGFfdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvZ2V0X21hcC5sdWFgLCB0bXBfcGFyYW1zKVxuXG4gIGNvbHVtbnMgPSBbXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UuaG9zdFwiKSwgbmFtZTogJ2hvc3QnLCBkYXRhOiAnaG9zdCcsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVuZGVyOiAoZGF0YSwgdHlwZSkgPT4geyByZXR1cm4gZGF0YS5sYWJlbCB9LCByZXNwb25zaXZlUHJpb3JpdHk6IDEgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5hc3NldF90b3RhbF9lZGdlc1wiKSwgbmFtZTogJ3RvdGFsX2VkZ2VzJywgZGF0YTogJ3RvdGFsX2VkZ2VzJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5hc3NldF9pbl9lZGdlc1wiKSwgbmFtZTogJ2luX2VkZ2VzJywgZGF0YTogJ2luX2VkZ2VzJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5hc3NldF9vdXRfZWRnZXNcIiksIG5hbWU6ICdvdXRfZWRnZXMnLCBkYXRhOiAnb3V0X2VkZ2VzJywgIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gIF07XG5cbiAgXG4gIFxuICBsZXQgY2VudHJhbGl0eUNvbmZpZ0RldmljZXMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShkZWZhdWx0RGF0YXRhYmxlQ29uZmlnKTtcbiAgY2VudHJhbGl0eUNvbmZpZ0RldmljZXMudGFibGVfY29uZmlnID0geyBzZXJ2ZXJTaWRlOiBmYWxzZSwgb3JkZXI6IFtbIDEgLyogVG90YWwgRWRnZXMgKi8sICdkZXNjJyBdXSB9XG4gIGNlbnRyYWxpdHlDb25maWdEZXZpY2VzLmNvbHVtbnNfY29uZmlnID0gY29sdW1ucztcbiAgY2VudHJhbGl0eUNvbmZpZ0RldmljZXMudGFibGVfZmlsdGVycyA9IHRhYmxlX2ZpbHRlcnM7XG5cbiAgY29uc29sZS5sb2coY29uZmlnRGV2aWNlcylcbiAgY29uc29sZS5sb2coY2VudHJhbGl0eUNvbmZpZ0RldmljZXMpXG4gIFxuICBEYXRhdGFibGVWdWUuY29uZmlnX2RldmljZXNfY2VudHJhbGl0eSA9IGNlbnRyYWxpdHlDb25maWdEZXZpY2VzO1xufVxuPC9zY3JpcHQ+XG5cblxuXG5cblxuXG4iLCJ7I1xuICAoQykgMjAyMiAtIG50b3Aub3JnXG4gIFRoaXMgdGVtcGxhdGUgaXMgdXNlZCBieSB0aGUgYFBlcmlvZGljaXR5IE1hcGAgcGFnZSBpbnNpZGUgdGhlIGBIb3N0c2AgbWVudS4gICAgXG4jfVxuXG48dGVtcGxhdGU+XG5cbjxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wtbGctMTJcIj5cbiAgICA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZGFuZ2VyIGQtbm9uZVwiIGlkPSdhbGVydC1yb3ctYnV0dG9ucycgcm9sZT1cImFsZXJ0XCI+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImNhcmRcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJvdmVybGF5IGp1c3RpZnktY29udGVudC1jZW50ZXIgYWxpZ24taXRlbXMtY2VudGVyIHBvc2l0aW9uLWFic29sdXRlIGgtMTAwIHctMTAwXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJzcGlubmVyLWJvcmRlciB0ZXh0LXByaW1hcnkgbXQtNVwiIHJvbGU9XCJzdGF0dXNcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3Itb25seSBwb3NpdGlvbi1hYnNvbHV0ZVwiPkxvYWRpbmcuLi48L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICBcdDxkaXYgaWQ9XCJwZXJpb2RpY2l0eS10YWJsZVwiPlxuICAgICAgICAgIDxtb2RhbC1kZWxldGUtY29uZmlybSByZWY9XCJtb2RhbF9kZWxldGVfYWxsXCJcbiAgICAgICAgICAgIDp0aXRsZT1cInRpdGxlX2RlbGV0ZVwiXG4gICAgICAgICAgICA6Ym9keT1cImJvZHlfZGVsZXRlXCJcbiAgICAgICAgICAgIEBkZWxldGU9XCJkZWxldGVfYWxsXCI+XG4gICAgICAgICAgPC9tb2RhbC1kZWxldGUtY29uZmlybT5cblxuICAgICAgICAgIDxkYXRhdGFibGUgcmVmPVwidGFibGVfcGVyaW9kaWNpdHlcIlxuICAgICAgICAgICAgOnRhYmxlX2J1dHRvbnM9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC50YWJsZV9idXR0b25zXCJcbiAgICAgICAgICAgIDpjb2x1bW5zX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmNvbHVtbnNfY29uZmlnXCJcbiAgICAgICAgICAgIDpkYXRhX3VybD1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmRhdGFfdXJsXCJcbiAgICAgICAgICAgIDplbmFibGVfc2VhcmNoPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQuZW5hYmxlX3NlYXJjaFwiXG4gICAgICAgICAgICA6ZmlsdGVyX2J1dHRvbnM9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC50YWJsZV9maWx0ZXJzXCJcbiAgICAgICAgICAgIDp0YWJsZV9jb25maWc9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC50YWJsZV9jb25maWdcIlxuICAgICAgICAgICAgOmJhc2VfdXJsPVwiYmFzZV91cmxcIlxuICAgICAgICAgICAgOmJhc2VfcGFyYW1zPVwidXJsX3BhcmFtc1wiPlxuICAgICAgICAgIDwvZGF0YXRhYmxlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtZm9vdGVyXCI+XG4gICAgICAgIDxidXR0b24gdi1pZj1cImlzX2FkbWluXCIgdHlwZT1cImJ1dHRvblwiIGlkPSdidG4tZGVsZXRlLWFsbCcgY2xhc3M9XCJidG4gYnRuLWRhbmdlciBtZS0xXCI+PGkgY2xhc3M9J2ZhcyBmYS10cmFzaCc+PC9pPiB7eyBpMThuKFwibWFwX3BhZ2UuZGVsZXRlX3NlcnZpY2VzXCIpIH19PC9idXR0b24+XG4gICAgICAgIDxhIHYtYmluZDpocmVmPVwiZ2V0X3VybFwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgcm9sZT1cImJ1dHRvblwiIGFyaWEtZGlzYWJsZWQ9XCJ0cnVlXCIgIGRvd25sb2FkPVwicGVyaW9kaWNpdHlfbWFwLmpzb25cIiB0YXJnZXQ9XCJfYmxhbmtcIj48aSBjbGFzcz1cImZhcyBmYS1kb3dubG9hZFwiPjwvaT48L2E+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8Tm90ZUxpc3QgOm5vdGVfbGlzdD1cIm5vdGVzXCI+IDwvTm90ZUxpc3Q+XG5cbiAgPC9kaXY+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBkZWZhdWx0IGFzIERhdGF0YWJsZSB9IGZyb20gXCIuL2RhdGF0YWJsZS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxEZWxldGVDb25maXJtIH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tICcuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzJztcbmltcG9ydCBOb3RlTGlzdCBmcm9tIFwiLi9ub3RlLWxpc3QudnVlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1x0ICBcbiAgICAnZGF0YXRhYmxlJzogRGF0YXRhYmxlLFxuICAgICdtb2RhbC1kZWxldGUtY29uZmlybSc6IE1vZGFsRGVsZXRlQ29uZmlybSxcbiAgICBOb3RlTGlzdFxuICB9LFxuICBwcm9wczoge1xuICAgIHBhZ2VfY3NyZjogU3RyaW5nLFxuICAgIHVybF9wYXJhbXM6IE9iamVjdCxcbiAgICB2aWV3OiBTdHJpbmcsXG4gICAgdGFibGVfZmlsdGVyczogQXJyYXksXG4gICAgaXNfYWRtaW46IEJvb2xlYW4sXG4gIH0sXG4gIC8qKlxuICAgKiBGaXJzdCBtZXRob2QgY2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjcmVhdGVkLlxuICAgKi9cbiAgY3JlYXRlZCgpIHtcbiAgICBzdGFydF9kYXRhdGFibGUodGhpcyk7XG4gIH0sXG4gIG1vdW50ZWQoKSB7ICBcbiAgICAkKFwiI2J0bi1kZWxldGUtYWxsXCIpLmNsaWNrKCgpID0+IHRoaXMuc2hvd19kZWxldGVfYWxsX2RpYWxvZygpKTtcbiAgICBcbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KFwicGFnZV9wZXJpb2RpY2l0eV90YWJsZVwiLCBudG9wbmdfY3VzdG9tX2V2ZW50cy5EQVRBVEFCTEVfTE9BREVELCAoKSA9PiB7XG4gICAgICBpZihudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgnaG9zdCcpKVxuICAgICAgICB0aGlzLmhpZGVfZHJvcGRvd25zKCk7XG4gICAgfSk7XG4gIH0sICAgIFxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpMThuOiAodCkgPT4gaTE4bih0KSxcbiAgICAgIGJhc2VfdXJsOiBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL2dldF9tYXAubHVhYCxcbiAgICAgIGNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkOiBudWxsLFxuICAgICAgY29uZmlnX2RldmljZXNfY2VudHJhbGl0eTogbnVsbCxcbiAgICAgIHRpdGxlX2RlbGV0ZTogaTE4bignbWFwX3BhZ2UuZGVsZXRlX3NlcnZpY2VzJyksXG4gICAgICBib2R5X2RlbGV0ZTogaTE4bignbWFwX3BhZ2UuZGVsZXRlX3NlcnZpY2VzX21lc3NhZ2UnKSxcbiAgICAgIHRpdGxlX2Rvd25sb2FkOiBpMThuKCdtYXBfcGFnZS5kb3dubG9hZCcpLFxuICAgICAgYm9keV9kb3dubG9hZDogaTE4bignbWFwX3BhZ2UuZG93bmxvYWRfbWVzc2FnZScpLFxuICAgICAgbm90ZXM6IFtpMThuKCdtYXBfcGFnZS50YWJsZV9ub3RlX3BlcmlvZGljaXR5X21hcCcpXSxcbiAgICAgIGdldF91cmw6IG51bGwsXG4gICAgfTtcbiAgfSxcbiAgbWV0aG9kczogeyBcbiAgICBoaWRlX2Ryb3Bkb3duczogZnVuY3Rpb24oKSB7XG4gICAgICAkKGAjbmV0d29ya19kcm9wZG93bmApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgICAgJChgI3ZsYW5faWRfZHJvcGRvd25gKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICAgICQoYCNuZXR3b3JrX2Ryb3Bkb3duYCkucmVtb3ZlQ2xhc3MoJ2QtaW5saW5lJylcbiAgICAgICQoYCN2bGFuX2lkX2Ryb3Bkb3duYCkucmVtb3ZlQ2xhc3MoJ2QtaW5saW5lJylcbiAgICB9LCBcbiAgICBjcmVhdGVfYWN0aW9uX2J1dHRvbl9oaXN0b3JpY2FsX2Zsb3dfbGluazogZnVuY3Rpb24oXywgdHlwZSwgcm93RGF0YSkge1xuICAgIGxldCBoaXN0b3JpY2FsX2Zsb3dfbGluayA9IHtcbiAgICAgIGhhbmRsZXJJZDogXCJoaXN0b3JpY2FsX2Zsb3dfbGlua1wiLFxuICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICBoaXN0b3JpY2FsX2Zsb3cocm93RGF0YSk7XG4gICAgICB9LFxuICAgIH1cbiAgICBsZXQgbGl2ZV9mbG93X2xpbmsgPSB7XG4gICAgICBoYW5kbGVySWQ6IFwibGl2ZV9mbG93X2xpbmtcIixcbiAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgbGl2ZV9mbG93KHJvd0RhdGEpO1xuICAgICAgfSxcbiAgICB9XG5cbiAgICByZXR1cm4gRGF0YVRhYmxlVXRpbHMuY3JlYXRlQWN0aW9uQnV0dG9ucyhbXG4gICAgICB7IGNsYXNzOiBgcG9pbnRlcmAsIGhhbmRsZXI6IGhpc3RvcmljYWxfZmxvd19saW5rLCBpY29uOiAnZmFzIGZhLXN0cmVhbScsIHRpdGxlOiBpMThuKCdkYl9leHBsb3Jlci5oaXN0b3JpY2FsX2RhdGEnKSB9LFxuICAgICAgeyBjbGFzczogYHBvaW50ZXJgLCBoYW5kbGVyOiBsaXZlX2Zsb3dfbGluaywgaWNvbjogJ2ZhcyBmYS1zdHJlYW0nLCB0aXRsZTogaTE4bignbGl2ZV9mbG93cycpIH0sXG5cbiAgICBdKTtcbiAgICBcbiAgICB9LFxuICAgIGRlbGV0ZV9hbGw6IGFzeW5jIGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvbmV0d29ya19tYXBzLmx1YWA7XG4gICAgICBsZXQgcGFyYW1zID0ge1xuICAgICAgICBpZmlkOiB0aGlzLnVybF9wYXJhbXMuaWZpZCxcbiAgICAgICAgYWN0aW9uOiAncmVzZXQnLFxuICAgICAgICBwYWdlOiB0aGlzLnVybF9wYXJhbXMucGFnZSxcbiAgICAgICAgY3NyZjogdGhpcy4kcHJvcHMucGFnZV9jc3JmLFxuICAgICAgICBtYXA6IHRoaXMudXJsX3BhcmFtcy5tYXBcbiAgICAgIH07XG4gICAgICB0cnkge1xuICAgICAgICBsZXQgaGVhZGVycyA9IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIH07XG4gICAgICAgIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcykgfSk7XG4gICAgICAgIHRoaXMucmVsb2FkX3RhYmxlKCk7XG4gICAgICB9IGNhdGNoKGVycikge1xuICAgICAgICB0aGlzLnJlbG9hZF90YWJsZSgpOyAgXG4gICAgICB9ICAgICAgXG4gICAgfSxcbiAgICByZWxvYWRfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHRhYmxlID0gdGhpcy5nZXRfYWN0aXZlX3RhYmxlKCk7XG4gICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICB0YWJsZS5yZWxvYWQoKTtcbiAgICAgIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKTtcbiAgICB9LFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHRhYmxlID0gdGhpcy5nZXRfYWN0aXZlX3RhYmxlKCk7XG4gICAgICB0YWJsZS5kZXN0cm95X3RhYmxlKCk7XG4gICAgfSxcbiAgICBnZXRfYWN0aXZlX3RhYmxlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLiRyZWZzW2B0YWJsZV9wZXJpb2RpY2l0eWBdO1xuICAgIH0sXG4gICAgc2hvd19kZWxldGVfYWxsX2RpYWxvZzogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLiRyZWZzW1wibW9kYWxfZGVsZXRlX2FsbFwiXS5zaG93KCk7XG4gICAgfSwgIFxuICB9LFxufSAgXG5cbmZ1bmN0aW9uIGhpc3RvcmljYWxfZmxvdyhyb3cpIHtcbiAgY29uc3QgY2xpZW50X2lwID0gcm93LmNsaWVudC5zcGxpdChcImhvc3Q9XCIpWzFdLnNwbGl0KFwiPlwiKVswXTtcbiAgY29uc3QgY2xpZW50ID0gY2xpZW50X2lwLnN1YnN0cmluZygwLCBjbGllbnRfaXAubGVuZ3RoIC0gMSk7XG4gIGNvbnN0IHNlcnZlcl9pcCA9IHJvdy5zZXJ2ZXIuc3BsaXQoXCJob3N0PVwiKVsxXS5zcGxpdChcIj5cIilbMF07XG4gIGNvbnN0IHNlcnZlciA9IHNlcnZlcl9pcC5zdWJzdHJpbmcoMCwgc2VydmVyX2lwLmxlbmd0aCAtIDEpO1xuICBjb25zdCBwb3J0ID0gcm93LnBvcnQ7XG5cbiAgY29uc3QgZXBvY2hfYmVnaW4gPSByb3cuZmlyc3Rfc2VlbjtcbiAgY29uc3QgZXBvY2hfZW5kID0gcm93Lmxhc3Rfc2Vlbi5lcG9jaF9lbmQ7XG5cbiAgY29uc3QgcGFyYW1zID0ge1xuICAgIGVwb2NoX2JlZ2luOiBlcG9jaF9iZWdpbixcbiAgICBlcG9jaF9lbmQ6IGVwb2NoX2VuZCxcbiAgICBzcnZfaXA6IGAke3NlcnZlcn07ZXFgLFxuICAgIGNsaV9pcDogYCR7Y2xpZW50fTtlcWAsXG4gICAgc3J2X3BvcnQ6IGAke3BvcnR9O2VxYCxcbiAgfVxuICBjb25zdCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKHBhcmFtcyk7XG4gIGNvbnN0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2RiX3NlYXJjaC5sdWE/JHt1cmxfcGFyYW1zfWA7XG4gIG50b3BuZ191cmxfbWFuYWdlci5nb190b191cmwodXJsKTtcblxufVxuXG5mdW5jdGlvbiBsaXZlX2Zsb3cocm93KSB7XG4gIGNvbnN0IGNsaWVudF9pcCA9IHJvdy5jbGllbnQuc3BsaXQoXCJob3N0PVwiKVsxXS5zcGxpdChcIj5cIilbMF07XG4gIGNvbnN0IGNsaWVudCA9IGNsaWVudF9pcC5zdWJzdHJpbmcoMCwgY2xpZW50X2lwLmxlbmd0aCAtIDEpO1xuICBjb25zdCBzZXJ2ZXJfaXAgPSByb3cuc2VydmVyLnNwbGl0KFwiaG9zdD1cIilbMV0uc3BsaXQoXCI+XCIpWzBdO1xuICBjb25zdCBzZXJ2ZXIgPSBzZXJ2ZXJfaXAuc3Vic3RyaW5nKDAsIHNlcnZlcl9pcC5sZW5ndGggLSAxKTtcbiAgY29uc3QgcG9ydCA9IHJvdy5wb3J0O1xuXG5cbiAgY29uc3QgcGFyYW1zID0ge1xuICAgIHNlcnZlcjogYCR7c2VydmVyfWAsXG4gICAgY2xpZW50OiBgJHtjbGllbnR9YCxcbiAgICBwb3J0OiBgJHtwb3J0fWAsXG4gIH1cbiAgY29uc3QgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyhwYXJhbXMpO1xuICBjb25zdCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL2Zsb3dzX3N0YXRzLmx1YT8ke3VybF9wYXJhbXN9YDtcbiAgbnRvcG5nX3VybF9tYW5hZ2VyLmdvX3RvX3VybCh1cmwpO1xufVxuXG5mdW5jdGlvbiBzdGFydF9kYXRhdGFibGUoRGF0YXRhYmxlVnVlKSB7XG4gIGNvbnN0IGRhdGF0YWJsZUJ1dHRvbiA9IFtdO1xuICBsZXQgY29sdW1ucyA9IFtdO1xuICBsZXQgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnMgPSAwO1xuICBEYXRhdGFibGVWdWUuZ2V0X3VybCA9IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL2dldF9tYXAubHVhYCwgdXJsX3BhcmFtcylcbiAgXG4gIC8qIE1hbmFnZSB0aGUgYnV0dG9ucyBjbG9zZSB0byB0aGUgc2VhcmNoIGJveCAqL1xuICBkYXRhdGFibGVCdXR0b24ucHVzaCh7XG4gICAgdGV4dDogJzxpIGNsYXNzPVwiZmFzIGZhLXN5bmNcIj48L2k+JyxcbiAgICBjbGFzc05hbWU6ICdidG4tbGluaycsXG4gICAgYWN0aW9uOiBmdW5jdGlvbiAoZSwgZHQsIG5vZGUsIGNvbmZpZykge1xuICAgICAgRGF0YXRhYmxlVnVlLnJlbG9hZF90YWJsZSgpO1xuICAgIH1cbiAgfSk7XG4gIFxuICBsZXQgdG1wX3BhcmFtcyA9IG50b3BuZ191dGlsaXR5LmNsb25lKHVybF9wYXJhbXMpXG4gIHRtcF9wYXJhbXNbJ3ZpZXcnXSA9IG51bGxcbiAgbGV0IGRlZmF1bHREYXRhdGFibGVDb25maWcgPSB7XG4gICAgdGFibGVfYnV0dG9uczogZGF0YXRhYmxlQnV0dG9uLFxuICAgIGNvbHVtbnNfY29uZmlnOiBbXSxcbiAgICBkYXRhX3VybDogTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvZ2V0X21hcC5sdWFgLCB0bXBfcGFyYW1zKSxcbiAgICBlbmFibGVfc2VhcmNoOiB0cnVlLFxuICB9O1xuXG4gIGxldCB0YWJsZV9maWx0ZXJzID0gW11cbiAgZm9yIChsZXQgZmlsdGVyIG9mIChEYXRhdGFibGVWdWUuJHByb3BzLnRhYmxlX2ZpbHRlcnMgfHwgW10pKSB7XG4gICAgZmlsdGVyLmNhbGxiYWNrRnVuY3Rpb24gPSAodGFibGUsIHZhbHVlKSA9PiB7XG4gICAgICB0bXBfcGFyYW1zW2ZpbHRlci5maWx0ZXJNZW51S2V5XSA9IHZhbHVlLmlkO1xuICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKGZpbHRlci5maWx0ZXJNZW51S2V5LCB2YWx1ZS5pZCk7XG4gICAgICB0YWJsZS5hamF4LnVybChOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9nZXRfbWFwLmx1YWAsIHRtcF9wYXJhbXMpKTtcbiAgICAgIE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTtcbiAgICAgIHRhYmxlLmFqYXgucmVsb2FkKCk7XG4gICAgICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG4gICAgfSxcbiAgICB0YWJsZV9maWx0ZXJzLnB1c2goZmlsdGVyKTtcbiAgfVxuICBcbiAgLyogU3RhbmRhcmQgdGFibGUgY29uZmlndXJhdGlvbiAqLyAgXG5cbiAgY29sdW1ucyA9IFtcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJhY3Rpb25zXCIpLCBuYW1lOiAnYWN0aW9ucycsICBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIG9yZGVyYWJsZTogZmFsc2UsIHJlc3BvbnNpdmVQcmlvcml0eTogMCwgcmVuZGVyOiBmdW5jdGlvbiAoXywgdHlwZSwgcm93RGF0YSkge1xuICAgICAgICByZXR1cm4gRGF0YXRhYmxlVnVlLmNyZWF0ZV9hY3Rpb25fYnV0dG9uX2hpc3RvcmljYWxfZmxvd19saW5rKF8sIHR5cGUscm93RGF0YSk7XG4gICAgICB9LFxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKCdtYXBfcGFnZS5sYXN0X3NlZW4nKSwgbmFtZTogJ2xhc3Rfc2VlbicsIGRhdGE6ICdsYXN0X3NlZW4nLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlciB0ZXh0LW5vd3JhcCcsIHJlbmRlcjogKGRhdGEsIHR5cGUpID0+IHsgcmV0dXJuIGRhdGEudmFsdWUgfSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKCdtYXBfcGFnZS5jbGllbnQnKSwgbmFtZTogJ2NsaWVudCcsIGRhdGE6ICdjbGllbnQnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bignbWFwX3BhZ2Uuc2VydmVyJyksIG5hbWU6ICdzZXJ2ZXInLCBkYXRhOiAnc2VydmVyJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oJ21hcF9wYWdlLnBvcnQnKSwgbmFtZTogJ3BvcnQnLCBkYXRhOiAncG9ydCcsICBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogNCB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bignbWFwX3BhZ2UucHJvdG9jb2wnKSwgbmFtZTogJ2w3cHJvdG8nLCBkYXRhOiAncHJvdG9jb2wnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMyB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bignbWFwX3BhZ2UuZmlyc3Rfc2VlbicpLCBuYW1lOiAnZmlyc3Rfc2VlbicsIGRhdGE6ICdmaXJzdF9zZWVuJywgdmlzaWJsZTogZmFsc2UsIHJlc3BvbnNpdmVQcmlvcml0eTogMyB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bignZHVyYXRpb24nKSwgbmFtZTogJ2R1cmF0aW9uJywgZGF0YTogJ2R1cmF0aW9uJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXIgdGV4dC1ub3dyYXAnLCAgcmVzcG9uc2l2ZVByaW9yaXR5OiAzLCBvcmRlcmFibGU6IHRydWUsICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bignbWFwX3BhZ2Uub2JzZXJ2YXRpb25zJyksIG5hbWU6ICdvYnNlcnZhdGlvbnMnLCBkYXRhOiAnb2JzZXJ2YXRpb25zJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDQgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oJ21hcF9wYWdlLmZyZXF1ZW5jeScpLCBuYW1lOiAnZnJlcXVlbmN5JywgZGF0YTogJ2ZyZXF1ZW5jeScsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgb3JkZXJhYmxlOiB0cnVlLCByZXNwb25zaXZlUHJpb3JpdHk6IDQsIHJlbmRlcjogKCBkYXRhLCB0eXBlLCByb3cgKSA9PiB7XG4gICAgICAgIHJldHVybiAodHlwZSA9PSBcInNvcnRcIiB8fCB0eXBlID09ICd0eXBlJykgPyBkYXRhIDogZGF0YSArIFwiIHNlY1wiOyBcbiAgICAgIH1cbiAgICB9LFxuICBdO1xuXG4gIGRlZmF1bHRfc29ydGluZ19jb2x1bW5zID0gOCAvKiBPYnNlcnZhdGlvbiBjb2x1bW4gKi9cblxuICAvKiBFeHRyYSB0YWJsZSBjb25maWd1cmF0aW9uICovXG4gIGxldCB0YWJsZV9jb25maWcgPSB7XG4gICAgc2VydmVyU2lkZTogdHJ1ZSxcbiAgICBvcmRlcjogW1sgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnMsICdkZXNjJyBdXVxuICB9XG4gIFxuICBsZXQgY29uZmlnRGV2aWNlcyA9IG50b3BuZ191dGlsaXR5LmNsb25lKGRlZmF1bHREYXRhdGFibGVDb25maWcpO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2J1dHRvbnMgPSBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnLnRhYmxlX2J1dHRvbnM7XG4gIGNvbmZpZ0RldmljZXMuZGF0YV91cmwgPSBgJHtjb25maWdEZXZpY2VzLmRhdGFfdXJsfWA7XG4gIGNvbmZpZ0RldmljZXMuY29sdW1uc19jb25maWcgPSBjb2x1bW5zO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2ZpbHRlcnMgPSB0YWJsZV9maWx0ZXJzO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2NvbmZpZyA9IG50b3BuZ191dGlsaXR5LmNsb25lKHRhYmxlX2NvbmZpZyk7XG4gIERhdGF0YWJsZVZ1ZS5jb25maWdfZGV2aWNlc19zdGFuZGFyZCA9IGNvbmZpZ0RldmljZXM7XG59XG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsInsjXG4gIChDKSAyMDIyIC0gbnRvcC5vcmdcbiAgVGhpcyB0ZW1wbGF0ZSBpcyB1c2VkIGJ5IHRoZSBgUGVyaW9kaWNpdHkgTWFwYCBwYWdlIGluc2lkZSB0aGUgYEhvc3RzYCBtZW51LiAgICBcbiN9XG5cbjx0ZW1wbGF0ZT5cblxuPGRpdiBjbGFzcz1cInJvd1wiPlxuICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1kYW5nZXIgZC1ub25lXCIgaWQ9J2FsZXJ0LXJvdy1idXR0b25zJyByb2xlPVwiYWxlcnRcIj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZFwiPlxuICAgICAgPGRpdiBjbGFzcz1cIm92ZXJsYXkganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1jZW50ZXIgcG9zaXRpb24tYWJzb2x1dGUgaC0xMDAgdy0xMDBcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtY2VudGVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInNwaW5uZXItYm9yZGVyIHRleHQtcHJpbWFyeSBtdC01XCIgcm9sZT1cInN0YXR1c1wiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzci1vbmx5IHBvc2l0aW9uLWFic29sdXRlXCI+TG9hZGluZy4uLjwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgIFx0PGRpdiBpZD1cInBlcmlvZGljaXR5LXRhYmxlXCI+XG4gICAgICAgICAgPG1vZGFsLWRlbGV0ZS1jb25maXJtIHJlZj1cIm1vZGFsX2RlbGV0ZV9hbGxcIlxuICAgICAgICAgICAgOnRpdGxlPVwidGl0bGVfZGVsZXRlXCJcbiAgICAgICAgICAgIDpib2R5PVwiYm9keV9kZWxldGVcIlxuICAgICAgICAgICAgQGRlbGV0ZT1cImRlbGV0ZV9hbGxcIj5cbiAgICAgICAgICA8L21vZGFsLWRlbGV0ZS1jb25maXJtPlxuXG4gICAgICAgICAgPGRhdGF0YWJsZSByZWY9XCJ0YWJsZV9wZXJpb2RpY2l0eVwiXG4gICAgICAgICAgICA6dGFibGVfYnV0dG9ucz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2J1dHRvbnNcIlxuICAgICAgICAgICAgOmNvbHVtbnNfY29uZmlnPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQuY29sdW1uc19jb25maWdcIlxuICAgICAgICAgICAgOmRhdGFfdXJsPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQuZGF0YV91cmxcIlxuICAgICAgICAgICAgOmVuYWJsZV9zZWFyY2g9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5lbmFibGVfc2VhcmNoXCJcbiAgICAgICAgICAgIDpmaWx0ZXJfYnV0dG9ucz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2ZpbHRlcnNcIlxuICAgICAgICAgICAgOnRhYmxlX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2NvbmZpZ1wiXG4gICAgICAgICAgICA6YmFzZV91cmw9XCJiYXNlX3VybFwiXG4gICAgICAgICAgICA6YmFzZV9wYXJhbXM9XCJ1cmxfcGFyYW1zXCI+XG4gICAgICAgICAgPC9kYXRhdGFibGU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1mb290ZXJcIj5cbiAgICAgICAgPGJ1dHRvbiB2LWlmPVwiaXNfYWRtaW5cIiB0eXBlPVwiYnV0dG9uXCIgaWQ9J2J0bi1kZWxldGUtYWxsJyBjbGFzcz1cImJ0biBidG4tZGFuZ2VyIG1lLTFcIj48aSBjbGFzcz0nZmFzIGZhLXRyYXNoJz48L2k+IHt7IGkxOG4oXCJtYXBfcGFnZS5kZWxldGVfc2VydmljZXNcIikgfX08L2J1dHRvbj5cbiAgICAgICAgPGEgdi1iaW5kOmhyZWY9XCJnZXRfdXJsXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiByb2xlPVwiYnV0dG9uXCIgYXJpYS1kaXNhYmxlZD1cInRydWVcIiAgZG93bmxvYWQ9XCJwZXJpb2RpY2l0eV9tYXAuanNvblwiIHRhcmdldD1cIl9ibGFua1wiPjxpIGNsYXNzPVwiZmFzIGZhLWRvd25sb2FkXCI+PC9pPjwvYT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxOb3RlTGlzdCA6bm90ZV9saXN0PVwibm90ZXNcIj4gPC9Ob3RlTGlzdD5cblxuICA8L2Rpdj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmF1bHQgYXMgRGF0YXRhYmxlIH0gZnJvbSBcIi4vZGF0YXRhYmxlLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbERlbGV0ZUNvbmZpcm0gfSBmcm9tIFwiLi9tb2RhbC1kZWxldGUtY29uZmlybS52dWVcIjtcbmltcG9ydCB7IG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMnO1xuaW1wb3J0IE5vdGVMaXN0IGZyb20gXCIuL25vdGUtbGlzdC52dWVcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBjb21wb25lbnRzOiB7XHQgIFxuICAgICdkYXRhdGFibGUnOiBEYXRhdGFibGUsXG4gICAgJ21vZGFsLWRlbGV0ZS1jb25maXJtJzogTW9kYWxEZWxldGVDb25maXJtLFxuICAgIE5vdGVMaXN0XG4gIH0sXG4gIHByb3BzOiB7XG4gICAgcGFnZV9jc3JmOiBTdHJpbmcsXG4gICAgdXJsX3BhcmFtczogT2JqZWN0LFxuICAgIHZpZXc6IFN0cmluZyxcbiAgICB0YWJsZV9maWx0ZXJzOiBBcnJheSxcbiAgICBpc19hZG1pbjogQm9vbGVhbixcbiAgfSxcbiAgLyoqXG4gICAqIEZpcnN0IG1ldGhvZCBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAqL1xuICBjcmVhdGVkKCkge1xuICAgIHN0YXJ0X2RhdGF0YWJsZSh0aGlzKTtcbiAgfSxcbiAgbW91bnRlZCgpIHsgIFxuICAgICQoXCIjYnRuLWRlbGV0ZS1hbGxcIikuY2xpY2soKCkgPT4gdGhpcy5zaG93X2RlbGV0ZV9hbGxfZGlhbG9nKCkpO1xuICAgIFxuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJwYWdlX3BlcmlvZGljaXR5X3RhYmxlXCIsIG50b3BuZ19jdXN0b21fZXZlbnRzLkRBVEFUQUJMRV9MT0FERUQsICgpID0+IHtcbiAgICAgIGlmKG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCdob3N0JykpXG4gICAgICAgIHRoaXMuaGlkZV9kcm9wZG93bnMoKTtcbiAgICB9KTtcbiAgfSwgICAgXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuICAgICAgYmFzZV91cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvZ2V0X21hcC5sdWFgLFxuICAgICAgY29uZmlnX2RldmljZXNfc3RhbmRhcmQ6IG51bGwsXG4gICAgICBjb25maWdfZGV2aWNlc19jZW50cmFsaXR5OiBudWxsLFxuICAgICAgdGl0bGVfZGVsZXRlOiBpMThuKCdtYXBfcGFnZS5kZWxldGVfc2VydmljZXMnKSxcbiAgICAgIGJvZHlfZGVsZXRlOiBpMThuKCdtYXBfcGFnZS5kZWxldGVfc2VydmljZXNfbWVzc2FnZScpLFxuICAgICAgdGl0bGVfZG93bmxvYWQ6IGkxOG4oJ21hcF9wYWdlLmRvd25sb2FkJyksXG4gICAgICBib2R5X2Rvd25sb2FkOiBpMThuKCdtYXBfcGFnZS5kb3dubG9hZF9tZXNzYWdlJyksXG4gICAgICBub3RlczogW2kxOG4oJ21hcF9wYWdlLnRhYmxlX25vdGVfcGVyaW9kaWNpdHlfbWFwJyldLFxuICAgICAgZ2V0X3VybDogbnVsbCxcbiAgICB9O1xuICB9LFxuICBtZXRob2RzOiB7IFxuICAgIGhpZGVfZHJvcGRvd25zOiBmdW5jdGlvbigpIHtcbiAgICAgICQoYCNuZXR3b3JrX2Ryb3Bkb3duYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgICAkKGAjdmxhbl9pZF9kcm9wZG93bmApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgICAgJChgI25ldHdvcmtfZHJvcGRvd25gKS5yZW1vdmVDbGFzcygnZC1pbmxpbmUnKVxuICAgICAgJChgI3ZsYW5faWRfZHJvcGRvd25gKS5yZW1vdmVDbGFzcygnZC1pbmxpbmUnKVxuICAgIH0sIFxuICAgIGNyZWF0ZV9hY3Rpb25fYnV0dG9uX2hpc3RvcmljYWxfZmxvd19saW5rOiBmdW5jdGlvbihfLCB0eXBlLCByb3dEYXRhKSB7XG4gICAgbGV0IGhpc3RvcmljYWxfZmxvd19saW5rID0ge1xuICAgICAgaGFuZGxlcklkOiBcImhpc3RvcmljYWxfZmxvd19saW5rXCIsXG4gICAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgIGhpc3RvcmljYWxfZmxvdyhyb3dEYXRhKTtcbiAgICAgIH0sXG4gICAgfVxuICAgIGxldCBsaXZlX2Zsb3dfbGluayA9IHtcbiAgICAgIGhhbmRsZXJJZDogXCJsaXZlX2Zsb3dfbGlua1wiLFxuICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICBsaXZlX2Zsb3cocm93RGF0YSk7XG4gICAgICB9LFxuICAgIH1cblxuICAgIHJldHVybiBEYXRhVGFibGVVdGlscy5jcmVhdGVBY3Rpb25CdXR0b25zKFtcbiAgICAgIHsgY2xhc3M6IGBwb2ludGVyYCwgaGFuZGxlcjogaGlzdG9yaWNhbF9mbG93X2xpbmssIGljb246ICdmYXMgZmEtc3RyZWFtJywgdGl0bGU6IGkxOG4oJ2RiX2V4cGxvcmVyLmhpc3RvcmljYWxfZGF0YScpIH0sXG4gICAgICB7IGNsYXNzOiBgcG9pbnRlcmAsIGhhbmRsZXI6IGxpdmVfZmxvd19saW5rLCBpY29uOiAnZmFzIGZhLXN0cmVhbScsIHRpdGxlOiBpMThuKCdsaXZlX2Zsb3dzJykgfSxcblxuICAgIF0pO1xuICAgIFxuICAgIH0sXG4gICAgZGVsZXRlX2FsbDogYXN5bmMgZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9uZXR3b3JrX21hcHMubHVhYDtcbiAgICAgIGxldCBwYXJhbXMgPSB7XG4gICAgICAgIGlmaWQ6IHRoaXMudXJsX3BhcmFtcy5pZmlkLFxuICAgICAgICBhY3Rpb246ICdyZXNldCcsXG4gICAgICAgIHBhZ2U6IHRoaXMudXJsX3BhcmFtcy5wYWdlLFxuICAgICAgICBjc3JmOiB0aGlzLiRwcm9wcy5wYWdlX2NzcmYsXG4gICAgICAgIG1hcDogdGhpcy51cmxfcGFyYW1zLm1hcFxuICAgICAgfTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxldCBoZWFkZXJzID0ge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgfTtcbiAgICAgICAgYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCwgeyBtZXRob2Q6ICdwb3N0JywgaGVhZGVycywgYm9keTogSlNPTi5zdHJpbmdpZnkocGFyYW1zKSB9KTtcbiAgICAgICAgdGhpcy5yZWxvYWRfdGFibGUoKTtcbiAgICAgIH0gY2F0Y2goZXJyKSB7XG4gICAgICAgIHRoaXMucmVsb2FkX3RhYmxlKCk7ICBcbiAgICAgIH0gICAgICBcbiAgICB9LFxuICAgIHJlbG9hZF90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdGFibGUgPSB0aGlzLmdldF9hY3RpdmVfdGFibGUoKTtcbiAgICAgIE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTtcbiAgICAgIHRhYmxlLnJlbG9hZCgpO1xuICAgICAgTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpO1xuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdGFibGUgPSB0aGlzLmdldF9hY3RpdmVfdGFibGUoKTtcbiAgICAgIHRhYmxlLmRlc3Ryb3lfdGFibGUoKTtcbiAgICB9LFxuICAgIGdldF9hY3RpdmVfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJHJlZnNbYHRhYmxlX3BlcmlvZGljaXR5YF07XG4gICAgfSxcbiAgICBzaG93X2RlbGV0ZV9hbGxfZGlhbG9nOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuJHJlZnNbXCJtb2RhbF9kZWxldGVfYWxsXCJdLnNob3coKTtcbiAgICB9LCAgXG4gIH0sXG59ICBcblxuZnVuY3Rpb24gaGlzdG9yaWNhbF9mbG93KHJvdykge1xuICBjb25zdCBjbGllbnRfaXAgPSByb3cuY2xpZW50LnNwbGl0KFwiaG9zdD1cIilbMV0uc3BsaXQoXCI+XCIpWzBdO1xuICBjb25zdCBjbGllbnQgPSBjbGllbnRfaXAuc3Vic3RyaW5nKDAsIGNsaWVudF9pcC5sZW5ndGggLSAxKTtcbiAgY29uc3Qgc2VydmVyX2lwID0gcm93LnNlcnZlci5zcGxpdChcImhvc3Q9XCIpWzFdLnNwbGl0KFwiPlwiKVswXTtcbiAgY29uc3Qgc2VydmVyID0gc2VydmVyX2lwLnN1YnN0cmluZygwLCBzZXJ2ZXJfaXAubGVuZ3RoIC0gMSk7XG4gIGNvbnN0IHBvcnQgPSByb3cucG9ydDtcblxuICBjb25zdCBlcG9jaF9iZWdpbiA9IHJvdy5maXJzdF9zZWVuO1xuICBjb25zdCBlcG9jaF9lbmQgPSByb3cubGFzdF9zZWVuLmVwb2NoX2VuZDtcblxuICBjb25zdCBwYXJhbXMgPSB7XG4gICAgZXBvY2hfYmVnaW46IGVwb2NoX2JlZ2luLFxuICAgIGVwb2NoX2VuZDogZXBvY2hfZW5kLFxuICAgIHNydl9pcDogYCR7c2VydmVyfTtlcWAsXG4gICAgY2xpX2lwOiBgJHtjbGllbnR9O2VxYCxcbiAgICBzcnZfcG9ydDogYCR7cG9ydH07ZXFgLFxuICB9XG4gIGNvbnN0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMocGFyYW1zKTtcbiAgY29uc3QgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZGJfc2VhcmNoLmx1YT8ke3VybF9wYXJhbXN9YDtcbiAgbnRvcG5nX3VybF9tYW5hZ2VyLmdvX3RvX3VybCh1cmwpO1xuXG59XG5cbmZ1bmN0aW9uIGxpdmVfZmxvdyhyb3cpIHtcbiAgY29uc3QgY2xpZW50X2lwID0gcm93LmNsaWVudC5zcGxpdChcImhvc3Q9XCIpWzFdLnNwbGl0KFwiPlwiKVswXTtcbiAgY29uc3QgY2xpZW50ID0gY2xpZW50X2lwLnN1YnN0cmluZygwLCBjbGllbnRfaXAubGVuZ3RoIC0gMSk7XG4gIGNvbnN0IHNlcnZlcl9pcCA9IHJvdy5zZXJ2ZXIuc3BsaXQoXCJob3N0PVwiKVsxXS5zcGxpdChcIj5cIilbMF07XG4gIGNvbnN0IHNlcnZlciA9IHNlcnZlcl9pcC5zdWJzdHJpbmcoMCwgc2VydmVyX2lwLmxlbmd0aCAtIDEpO1xuICBjb25zdCBwb3J0ID0gcm93LnBvcnQ7XG5cblxuICBjb25zdCBwYXJhbXMgPSB7XG4gICAgc2VydmVyOiBgJHtzZXJ2ZXJ9YCxcbiAgICBjbGllbnQ6IGAke2NsaWVudH1gLFxuICAgIHBvcnQ6IGAke3BvcnR9YCxcbiAgfVxuICBjb25zdCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKHBhcmFtcyk7XG4gIGNvbnN0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvZmxvd3Nfc3RhdHMubHVhPyR7dXJsX3BhcmFtc31gO1xuICBudG9wbmdfdXJsX21hbmFnZXIuZ29fdG9fdXJsKHVybCk7XG59XG5cbmZ1bmN0aW9uIHN0YXJ0X2RhdGF0YWJsZShEYXRhdGFibGVWdWUpIHtcbiAgY29uc3QgZGF0YXRhYmxlQnV0dG9uID0gW107XG4gIGxldCBjb2x1bW5zID0gW107XG4gIGxldCBkZWZhdWx0X3NvcnRpbmdfY29sdW1ucyA9IDA7XG4gIERhdGF0YWJsZVZ1ZS5nZXRfdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvZ2V0X21hcC5sdWFgLCB1cmxfcGFyYW1zKVxuICBcbiAgLyogTWFuYWdlIHRoZSBidXR0b25zIGNsb3NlIHRvIHRoZSBzZWFyY2ggYm94ICovXG4gIGRhdGF0YWJsZUJ1dHRvbi5wdXNoKHtcbiAgICB0ZXh0OiAnPGkgY2xhc3M9XCJmYXMgZmEtc3luY1wiPjwvaT4nLFxuICAgIGNsYXNzTmFtZTogJ2J0bi1saW5rJyxcbiAgICBhY3Rpb246IGZ1bmN0aW9uIChlLCBkdCwgbm9kZSwgY29uZmlnKSB7XG4gICAgICBEYXRhdGFibGVWdWUucmVsb2FkX3RhYmxlKCk7XG4gICAgfVxuICB9KTtcbiAgXG4gIGxldCB0bXBfcGFyYW1zID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUodXJsX3BhcmFtcylcbiAgdG1wX3BhcmFtc1sndmlldyddID0gbnVsbFxuICBsZXQgZGVmYXVsdERhdGF0YWJsZUNvbmZpZyA9IHtcbiAgICB0YWJsZV9idXR0b25zOiBkYXRhdGFibGVCdXR0b24sXG4gICAgY29sdW1uc19jb25maWc6IFtdLFxuICAgIGRhdGFfdXJsOiBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9nZXRfbWFwLmx1YWAsIHRtcF9wYXJhbXMpLFxuICAgIGVuYWJsZV9zZWFyY2g6IHRydWUsXG4gIH07XG5cbiAgbGV0IHRhYmxlX2ZpbHRlcnMgPSBbXVxuICBmb3IgKGxldCBmaWx0ZXIgb2YgKERhdGF0YWJsZVZ1ZS4kcHJvcHMudGFibGVfZmlsdGVycyB8fCBbXSkpIHtcbiAgICBmaWx0ZXIuY2FsbGJhY2tGdW5jdGlvbiA9ICh0YWJsZSwgdmFsdWUpID0+IHtcbiAgICAgIHRtcF9wYXJhbXNbZmlsdGVyLmZpbHRlck1lbnVLZXldID0gdmFsdWUuaWQ7XG4gICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoZmlsdGVyLmZpbHRlck1lbnVLZXksIHZhbHVlLmlkKTtcbiAgICAgIHRhYmxlLmFqYXgudXJsKE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL2dldF9tYXAubHVhYCwgdG1wX3BhcmFtcykpO1xuICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgdGFibGUuYWpheC5yZWxvYWQoKTtcbiAgICAgIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKTtcbiAgICB9LFxuICAgIHRhYmxlX2ZpbHRlcnMucHVzaChmaWx0ZXIpO1xuICB9XG4gIFxuICAvKiBTdGFuZGFyZCB0YWJsZSBjb25maWd1cmF0aW9uICovICBcblxuICBjb2x1bW5zID0gW1xuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImFjdGlvbnNcIiksIG5hbWU6ICdhY3Rpb25zJywgIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgb3JkZXJhYmxlOiBmYWxzZSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAwLCByZW5kZXI6IGZ1bmN0aW9uIChfLCB0eXBlLCByb3dEYXRhKSB7XG4gICAgICAgIHJldHVybiBEYXRhdGFibGVWdWUuY3JlYXRlX2FjdGlvbl9idXR0b25faGlzdG9yaWNhbF9mbG93X2xpbmsoXywgdHlwZSxyb3dEYXRhKTtcbiAgICAgIH0sXG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oJ21hcF9wYWdlLmxhc3Rfc2VlbicpLCBuYW1lOiAnbGFzdF9zZWVuJywgZGF0YTogJ2xhc3Rfc2VlbicsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyIHRleHQtbm93cmFwJywgcmVuZGVyOiAoZGF0YSwgdHlwZSkgPT4geyByZXR1cm4gZGF0YS52YWx1ZSB9LCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oJ21hcF9wYWdlLmNsaWVudCcpLCBuYW1lOiAnY2xpZW50JywgZGF0YTogJ2NsaWVudCcsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKCdtYXBfcGFnZS5zZXJ2ZXInKSwgbmFtZTogJ3NlcnZlcicsIGRhdGE6ICdzZXJ2ZXInLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bignbWFwX3BhZ2UucG9ydCcpLCBuYW1lOiAncG9ydCcsIGRhdGE6ICdwb3J0JywgIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgcmVzcG9uc2l2ZVByaW9yaXR5OiA0IH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKCdtYXBfcGFnZS5wcm90b2NvbCcpLCBuYW1lOiAnbDdwcm90bycsIGRhdGE6ICdwcm90b2NvbCcsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAzIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKCdtYXBfcGFnZS5maXJzdF9zZWVuJyksIG5hbWU6ICdmaXJzdF9zZWVuJywgZGF0YTogJ2ZpcnN0X3NlZW4nLCB2aXNpYmxlOiBmYWxzZSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAzIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKCdkdXJhdGlvbicpLCBuYW1lOiAnZHVyYXRpb24nLCBkYXRhOiAnZHVyYXRpb24nLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlciB0ZXh0LW5vd3JhcCcsICByZXNwb25zaXZlUHJpb3JpdHk6IDMsIG9yZGVyYWJsZTogdHJ1ZSwgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKCdtYXBfcGFnZS5vYnNlcnZhdGlvbnMnKSwgbmFtZTogJ29ic2VydmF0aW9ucycsIGRhdGE6ICdvYnNlcnZhdGlvbnMnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogNCB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bignbWFwX3BhZ2UuZnJlcXVlbmN5JyksIG5hbWU6ICdmcmVxdWVuY3knLCBkYXRhOiAnZnJlcXVlbmN5JywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCBvcmRlcmFibGU6IHRydWUsIHJlc3BvbnNpdmVQcmlvcml0eTogNCwgcmVuZGVyOiAoIGRhdGEsIHR5cGUsIHJvdyApID0+IHtcbiAgICAgICAgcmV0dXJuICh0eXBlID09IFwic29ydFwiIHx8IHR5cGUgPT0gJ3R5cGUnKSA/IGRhdGEgOiBkYXRhICsgXCIgc2VjXCI7IFxuICAgICAgfVxuICAgIH0sXG4gIF07XG5cbiAgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnMgPSA4IC8qIE9ic2VydmF0aW9uIGNvbHVtbiAqL1xuXG4gIC8qIEV4dHJhIHRhYmxlIGNvbmZpZ3VyYXRpb24gKi9cbiAgbGV0IHRhYmxlX2NvbmZpZyA9IHtcbiAgICBzZXJ2ZXJTaWRlOiB0cnVlLFxuICAgIG9yZGVyOiBbWyBkZWZhdWx0X3NvcnRpbmdfY29sdW1ucywgJ2Rlc2MnIF1dXG4gIH1cbiAgXG4gIGxldCBjb25maWdEZXZpY2VzID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoZGVmYXVsdERhdGF0YWJsZUNvbmZpZyk7XG4gIGNvbmZpZ0RldmljZXMudGFibGVfYnV0dG9ucyA9IGRlZmF1bHREYXRhdGFibGVDb25maWcudGFibGVfYnV0dG9ucztcbiAgY29uZmlnRGV2aWNlcy5kYXRhX3VybCA9IGAke2NvbmZpZ0RldmljZXMuZGF0YV91cmx9YDtcbiAgY29uZmlnRGV2aWNlcy5jb2x1bW5zX2NvbmZpZyA9IGNvbHVtbnM7XG4gIGNvbmZpZ0RldmljZXMudGFibGVfZmlsdGVycyA9IHRhYmxlX2ZpbHRlcnM7XG4gIGNvbmZpZ0RldmljZXMudGFibGVfY29uZmlnID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUodGFibGVfY29uZmlnKTtcbiAgRGF0YXRhYmxlVnVlLmNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkID0gY29uZmlnRGV2aWNlcztcbn1cbjwvc2NyaXB0PlxuXG5cblxuXG5cblxuIiwiLyoqXG4gICAgKEMpIDIwMjIgLSBudG9wLm9yZyAgICBcbiovXG5cblxuY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB7IFxuICBhdXRvUmVzaXplOiB0cnVlLCAvKiBCeSBkZWZhdWx0IGFscmVhZHkgdHJ1ZSAqL1xuICBub2RlczogeyBcbiAgICBzaGFwZTogXCJkb3RcIiwgXG4gICAgc2NhbGluZzoge1xuICAgICAgbWluOiAxMCxcbiAgICAgIG1heDogMzAsXG4gICAgICBsYWJlbDoge1xuICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICBtaW46IDgsXG4gICAgICAgIG1heDogMzAsXG4gICAgICAgIGRyYXdUaHJlc2hvbGQ6IDEyLFxuICAgICAgfSxcbiAgICB9LFxuICAgIGZvbnQ6IHtcbiAgICAgIGNvbG9yOiBcIiMyMTI1MjlcIlxuICAgIH0sXG4gICAgc2hhZG93OiBmYWxzZSxcbiAgfSxcbiAgZWRnZXM6IHtcbiAgICB3aWR0aDogMC4yLFxuICAgIGNvbG9yOiB7IGluaGVyaXQ6IFwiZnJvbVwiIH0sXG4gICAgc21vb3RoOiB7XG4gICAgICAgIHR5cGU6IFwiY29udGludW91c1wiLFxuICAgICAgICByb3VuZG5lc3M6IDBcbiAgICB9LFxuICAgIGFycm93czoge1xuICAgICAgdG86IHtcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgc2NhbGVGYWN0b3I6IDAuMyxcbiAgICAgIH1cbiAgICB9LFxuICAgIGFycm93U3RyaWtldGhyb3VnaDogZmFsc2UsXG4gICAgc2NhbGluZzoge1xuICAgICAgbWluOiAxLFxuICAgICAgbWF4OiA1LFxuICAgIH1cbiAgfSxcbiAgbGF5b3V0OiB7XG4gICAgaW1wcm92ZWRMYXlvdXQ6IGZhbHNlLFxuICB9LFxuICBpbnRlcmFjdGlvbjoge1xuICAgIGhpZGVFZGdlc09uRHJhZzogZmFsc2UsXG4gICAgaGlkZUVkZ2VzT25ab29tOiB0cnVlLFxuICAgIGhvdmVyOiBmYWxzZSxcbiAgICB0b29sdGlwRGVsYXk6IDAsXG4gIH0sXG4gIHBoeXNpY3M6IHtcbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIHNvbHZlcjogXCJmb3JjZUF0bGFzMkJhc2VkXCIsXG4gICAgc3RhYmlsaXphdGlvbjoge1xuICAgICAgaXRlcmF0aW9uczogMzAwLFxuICAgICAgZW5hYmxlZDogdHJ1ZSAvLyBUaGlzIGlzIGhlcmUganVzdCB0byBzZWUgd2hhdCdzIGdvaW5nIG9uIGZyb20gdGhlIHZlcnkgYmVnaW5uaW5nLlxuICAgIH0sXG4gICAgZm9yY2VBdGxhczJCYXNlZDoge1xuICAgICAgY2VudHJhbEdyYXZpdHk6IDAuMDEsXG4gICAgICBzcHJpbmdMZW5ndGg6IDEwMCxcbiAgICB9XG4gIH0sXG4gIGdyb3Vwczoge1xuICAgICAgdW5rbm93bjoge1xuICAgICAgICAgIHNoYXBlOiBcImRvdFwiLFxuICAgICAgfSxcbiAgICAgIHByaW50ZXI6IHtcbiAgICAgICAgc2hhcGU6IFwiaWNvblwiLFxuICAgICAgICBpY29uOiB7XG4gICAgICAgICAgZmFjZTogJ0ZvbnRBd2Vzb21lJyxcbiAgICAgICAgICBjb2RlOiAnXFx1ZjAyZicsXG4gICAgICAgICAgc2l6ZTogNTAsXG4gICAgICAgICAgd2VpZ2h0OiA3MDAsXG4gICAgICAgIH0sXG4gICAgICB9LFxuXG4gICAgICB2aWRlbzoge1xuICAgICAgICBzaGFwZTogXCJpY29uXCIsXG4gICAgICAgIGljb246IHtcbiAgICAgICAgICBmYWNlOiAnRm9udEF3ZXNvbWUnLFxuICAgICAgICAgIGNvZGU6ICdcXHVmMDNkJyxcbiAgICAgICAgICBzaXplOiA1MCxcbiAgICAgICAgICB3ZWlnaHQ6IDcwMCxcbiAgICAgICAgfSxcbiAgICAgIH0sXG5cbiAgICAgIHdvcmtzdGF0aW9uOiB7XG4gICAgICAgIHNoYXBlOiBcImljb25cIixcbiAgICAgICAgaWNvbjoge1xuICAgICAgICAgIGZhY2U6ICdGb250QXdlc29tZScsXG4gICAgICAgICAgY29kZTogJ1xcdWYxMDknLFxuICAgICAgICAgIHNpemU6IDUwLFxuICAgICAgICAgIHdlaWdodDogNzAwLFxuICAgICAgICB9LFxuICAgICAgfSxcblxuICAgICAgbGFwdG9wOiB7XG4gICAgICAgIHNoYXBlOiBcImljb25cIixcbiAgICAgICAgaWNvbjoge1xuICAgICAgICAgIGZhY2U6ICdGb250QXdlc29tZScsXG4gICAgICAgICAgY29kZTogJ1xcdWYxMDknLFxuICAgICAgICAgIHNpemU6IDUwLFxuICAgICAgICAgIHdlaWdodDogNzAwLFxuICAgICAgICB9LFxuICAgICAgfSxcblxuICAgICAgdGFibGV0OiB7XG4gICAgICAgIHNoYXBlOiBcImljb25cIixcbiAgICAgICAgaWNvbjoge1xuICAgICAgICAgIGZhY2U6ICdGb250QXdlc29tZScsXG4gICAgICAgICAgY29kZTogJ1xcdWYxMGEnLFxuICAgICAgICAgIHNpemU6IDUwLFxuICAgICAgICAgIHdlaWdodDogNzAwLFxuICAgICAgICB9LFxuICAgICAgfSxcblxuICAgICAgcGhvbmU6IHtcbiAgICAgICAgc2hhcGU6IFwiaWNvblwiLFxuICAgICAgICBpY29uOiB7XG4gICAgICAgICAgZmFjZTogJ0ZvbnRBd2Vzb21lJyxcbiAgICAgICAgICBjb2RlOiAnXFx1ZjEwYicsXG4gICAgICAgICAgc2l6ZTogNTAsXG4gICAgICAgICAgd2VpZ2h0OiA3MDAsXG4gICAgICAgIH0sXG4gICAgICB9LFxuXG4gICAgICB0djoge1xuICAgICAgICBzaGFwZTogXCJpY29uXCIsXG4gICAgICAgIGljb246IHtcbiAgICAgICAgICBmYWNlOiAnRm9udEF3ZXNvbWUnLFxuICAgICAgICAgIGNvZGU6ICdcXHVmMjZjJyxcbiAgICAgICAgICBzaXplOiA1MCxcbiAgICAgICAgICB3ZWlnaHQ6IDcwMCxcbiAgICAgICAgfSxcbiAgICAgIH0sXG5cbiAgICAgIG5ldHdvcmtpbmc6IHtcbiAgICAgICAgc2hhcGU6IFwiaWNvblwiLFxuICAgICAgICBpY29uOiB7XG4gICAgICAgICAgZmFjZTogJ0ZvbnRBd2Vzb21lJyxcbiAgICAgICAgICBjb2RlOiAnXFx1ZjBiMicsXG4gICAgICAgICAgc2l6ZTogNTAsXG4gICAgICAgICAgd2VpZ2h0OiA3MDAsXG4gICAgICAgIH0sXG4gICAgICB9LFxuXG4gICAgICB3aWZpOiB7XG4gICAgICAgIHNoYXBlOiBcImljb25cIixcbiAgICAgICAgaWNvbjoge1xuICAgICAgICAgIGZhY2U6ICdGb250QXdlc29tZScsXG4gICAgICAgICAgY29kZTogJ1xcdWYxZWInLFxuICAgICAgICAgIHNpemU6IDUwLFxuICAgICAgICAgIHdlaWdodDogNzAwLFxuICAgICAgICB9LFxuICAgICAgfSxcblxuICAgICAgbmFzOiB7XG4gICAgICAgIHNoYXBlOiBcImljb25cIixcbiAgICAgICAgaWNvbjoge1xuICAgICAgICAgIGZhY2U6ICdGb250QXdlc29tZScsXG4gICAgICAgICAgY29kZTogJ1xcdWYxYzAnLFxuICAgICAgICAgIHNpemU6IDUwLFxuICAgICAgICAgIHdlaWdodDogNzAwLFxuICAgICAgICB9LFxuICAgICAgfSxcblxuICAgICAgbXVsdGltZWRpYToge1xuICAgICAgICBzaGFwZTogXCJpY29uXCIsXG4gICAgICAgIGljb246IHtcbiAgICAgICAgICBmYWNlOiAnRm9udEF3ZXNvbWUnLFxuICAgICAgICAgIGNvZGU6ICdcXHVmMDAxJyxcbiAgICAgICAgICBzaXplOiA1MCxcbiAgICAgICAgICB3ZWlnaHQ6IDcwMCxcbiAgICAgICAgfSxcbiAgICAgIH0sXG5cbiAgICAgIGlvdDoge1xuICAgICAgICBzaGFwZTogXCJpY29uXCIsXG4gICAgICAgIGljb246IHtcbiAgICAgICAgICBmYWNlOiAnRm9udEF3ZXNvbWUnLFxuICAgICAgICAgIGNvZGU6ICdcXHVlMDEyJyxcbiAgICAgICAgICBzaXplOiA1MCxcbiAgICAgICAgICB3ZWlnaHQ6IDcwMCxcbiAgICAgICAgfSxcbiAgICAgIH0sXG5cbiAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBudG9wbmdfbWFwX21hbmFnZXIgPSB7XG4gIC8qKlxuICAgKiBDaGFuZ2UgdGhlIHN0YXR1cyBvZiBhIHNlcnZpY2UuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzZXJ2aWNlX2lkIGlkIG9mIHRoZSBzZXJ2aWNlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmV3X3N0YXRlIGlkIG9mIHRoZSBuZXcgc3RhdHVzIG9mIHRoZSBzZXJ2aWNlLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayBmdW5jdGlvbiB0byBiZSBjYWxsZWQgb24gc3VjY2Vzcy5cbiAgICovXG4gIHRvZ2dsZV9zdGF0ZTogZnVuY3Rpb24oc2VydmljZV9pZCwgbmV3X3N0YXRlLCBjYWxsYmFjaywgY3NyZikge1xuICAgIGNvbnN0IHJlcXVlc3QgPSAkLnBvc3QoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9zd2l0Y2hfc2VydmljZV9zdGF0ZS5sdWFgLCB7IFxuICAgICAgc2VydmljZV9pZDogc2VydmljZV9pZCwgc2VydmljZV9zdGF0dXM6IG5ld19zdGF0ZSwgY3NyZjogY3NyZlxuICAgIH0pO1xuICAgIHJlcXVlc3QudGhlbigoZGF0YSkgPT4ge1xuICAgICAgaWYoZGF0YS5zdWNjZXNzICYmIGNhbGxiYWNrKSBcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICB9KTtcbiAgfSxcbiAgZ2V0X2RlZmF1bHRfb3B0aW9uczogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRPcHRpb25zO1xuICB9LFxufVxuIiwieyNcbiAgKEMpIDIwMjIgLSBudG9wLm9yZ1xuICBUaGlzIHRlbXBsYXRlIGlzIHVzZWQgYnkgdGhlIGBTZXJ2aWNlIE1hcGAgcGFnZSBpbnNpZGUgdGhlIGBIb3N0c2AgbWVudS4gICAgXG4jfVxuXG48dGVtcGxhdGU+XG5cbjxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wtbGctMTJcIj5cbiAgICA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZGFuZ2VyIGQtbm9uZVwiIGlkPSdhbGVydC1yb3ctYnV0dG9ucycgcm9sZT1cImFsZXJ0XCI+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImNhcmRcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJvdmVybGF5IGp1c3RpZnktY29udGVudC1jZW50ZXIgYWxpZ24taXRlbXMtY2VudGVyIHBvc2l0aW9uLWFic29sdXRlIGgtMTAwIHctMTAwXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJzcGlubmVyLWJvcmRlciB0ZXh0LXByaW1hcnkgbXQtNVwiIHJvbGU9XCJzdGF0dXNcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3Itb25seSBwb3NpdGlvbi1hYnNvbHV0ZVwiPkxvYWRpbmcuLi48L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICBcdDxkaXYgaWQ9XCJ0YWJsZV9zZXJ2aWNlXCI+XG4gICAgICAgICAgPG1vZGFsLWRlbGV0ZS1jb25maXJtIHJlZj1cIm1vZGFsX2RlbGV0ZV9hbGxcIlxuICAgICAgICAgICAgOnRpdGxlPVwidGl0bGVfZGVsZXRlXCJcbiAgICAgICAgICAgIDpib2R5PVwiYm9keV9kZWxldGVcIlxuICAgICAgICAgICAgQGRlbGV0ZT1cImRlbGV0ZV9hbGxcIj5cbiAgICAgICAgICA8L21vZGFsLWRlbGV0ZS1jb25maXJtPlxuICBcbiAgICAgICAgICA8dGFiLWxpc3QgcmVmPVwic2VydmljZV90YWJfbGlzdFwiXG4gICAgICAgICAgICBpZD1cInNlcnZpY2VfdGFiX2xpc3RcIlxuICAgICAgICAgICAgOnRhYl9saXN0PVwidGFiX2xpc3RcIlxuICAgICAgICAgICAgQGNsaWNrX2l0ZW09XCJjbGlja19pdGVtXCI+XG4gICAgICAgICAgPC90YWItbGlzdD5cblxuICAgICAgICAgIDxkYXRhdGFibGUgdi1pZj1cInNlcnZpY2VfdGFibGVfdGFiID09ICdzdGFuZGFyZCdcIiByZWY9XCJ0YWJsZV9zZXJ2aWNlX3N0YW5kYXJkXCJcbiAgICAgICAgICAgIDp0YWJsZV9idXR0b25zPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfYnV0dG9uc1wiXG4gICAgICAgICAgICA6Y29sdW1uc19jb25maWc9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5jb2x1bW5zX2NvbmZpZ1wiXG4gICAgICAgICAgICA6ZGF0YV91cmw9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5kYXRhX3VybFwiXG4gICAgICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmVuYWJsZV9zZWFyY2hcIlxuICAgICAgICAgICAgOmZpbHRlcl9idXR0b25zPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfZmlsdGVyc1wiXG4gICAgICAgICAgICA6dGFibGVfY29uZmlnPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfY29uZmlnXCI+XG4gICAgICAgICAgPC9kYXRhdGFibGU+XG4gICAgICAgICAgPGRhdGF0YWJsZSB2LWlmPVwic2VydmljZV90YWJsZV90YWIgPT0gJ2NlbnRyYWxpdHknXCIgcmVmPVwidGFibGVfc2VydmljZV9jZW50cmFsaXR5XCJcbiAgICAgICAgICAgIDp0YWJsZV9idXR0b25zPVwiY29uZmlnX2RldmljZXNfY2VudHJhbGl0eS50YWJsZV9idXR0b25zXCJcbiAgICAgICAgICAgIDpjb2x1bW5zX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkuY29sdW1uc19jb25maWdcIlxuICAgICAgICAgICAgOmRhdGFfdXJsPVwiY29uZmlnX2RldmljZXNfY2VudHJhbGl0eS5kYXRhX3VybFwiXG4gICAgICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cImNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkuZW5hYmxlX3NlYXJjaFwiXG4gICAgICAgICAgICA6ZmlsdGVyX2J1dHRvbnM9XCJjb25maWdfZGV2aWNlc19jZW50cmFsaXR5LnRhYmxlX2ZpbHRlcnNcIlxuICAgICAgICAgICAgOnRhYmxlX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkudGFibGVfY29uZmlnXCI+XG4gICAgICAgICAgPC9kYXRhdGFibGU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1mb290ZXJcIj5cbjwhLS1cbiAgICAgICAgeyUgaWYgaXNfYWRtaW4gdGhlbiAlfVxuICAgICAgICAgIDxmb3JtIGNsYXNzPVwiZC1pbmxpbmVcIiBpZD0nc3dpdGNoLXN0YXRlLWZvcm0nPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbWItMyBkLWlubGluZVwiPlxuICAgICAgICAgICAgICA8bGFiZWw+eyogaTE4bihcIm1hcF9wYWdlLnNldF9zdGF0ZVwiLCB7bGFiZWwgPSBcIjxzcGFuIGNsYXNzPSdjb3VudCc+PC9zcGFuPlwifSkgKn08L2xhYmVsPlxuICAgICAgICAgICAgICA8c2VsZWN0IG5hbWU9XCJuZXdfc3RhdGVcIiBjbGFzcz1cImZvcm0tc2VsZWN0IGQtaW5saW5lXCIgc3R5bGU9XCJ3aWR0aDogMTZyZW1cIiB7eyB0ZXJuYXJ5KG1hcC5zZXJ2aWNlc19udW0gPT0gMCwgXCJkaXNhYmxlZD0nZGlzYWJsZWQnXCIsIFwiXCIpIH19PlxuICAgICAgICAgICAgICB7JSBmb3IgXywgc3RhdHVzIGluIHBhaXJzQnlGaWVsZChtYXAuZmlsdGVycy5zZXJ2aWNlX3N0YXR1c19maWx0ZXJzLCBsYWJlbCwgYXNjX2luc2Vuc2l0aXZlKSBkbyAlfVxuICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJ7eyBzdGF0dXMuaWQgfX1cIj57KiBzdGF0dXMubGFiZWwgKn08L29wdGlvbj5cbiAgICAgICAgICAgICAgeyUgZW5kICV9XG4gICAgICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1zZWNvbmRhcnkgZC1pbmxpbmVcIiBjbGFzcz1cImJ0bi1zd2l0Y2gtc3RhdGVcIiB7eyB0ZXJuYXJ5KG1hcC5zZXJ2aWNlc19udW0gPT0gMCwgXCJkaXNhYmxlZD0nZGlzYWJsZWQnXCIsIFwiXCIpIH19PlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLXJhbmRvbVwiPjwvaT4ge3sgaTE4bihcInNldFwiKSB9fVxuICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgeyUgZW5kICV9XG4gICAgLS0+IFxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZD0nYnRuLWRlbGV0ZS1hbGwnIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXIgbWUtMVwiPjxpIGNsYXNzPSdmYXMgZmEtdHJhc2gnPjwvaT4ge3sgaTE4bihcIm1hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlc1wiKSB9fTwvYnV0dG9uPlxuICAgICAgICA8YSB2LWJpbmQ6aHJlZj1cImdldF91cmxcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIHJvbGU9XCJidXR0b25cIiBhcmlhLWRpc2FibGVkPVwidHJ1ZVwiICBkb3dubG9hZD1cInNlcnZpY2VfbWFwLmpzb25cIiB0YXJnZXQ9XCJfYmxhbmtcIj48aSBjbGFzcz1cImZhcyBmYS1kb3dubG9hZFwiPjwvaT48L2E+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8Tm90ZUxpc3QgOm5vdGVfbGlzdD1cIm5vdGVzXCI+IDwvTm90ZUxpc3Q+XG5cbiAgPC9kaXY+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBkZWZhdWx0IGFzIERhdGF0YWJsZSB9IGZyb20gXCIuL2RhdGF0YWJsZS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgVGFiTGlzdCB9IGZyb20gXCIuL3RhYi1saXN0LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbERlbGV0ZUNvbmZpcm0gfSBmcm9tIFwiLi9tb2RhbC1kZWxldGUtY29uZmlybS52dWVcIjtcbmltcG9ydCB7IG50b3BuZ19ldmVudHNfbWFuYWdlciwgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSAnLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcyc7XG5pbXBvcnQgeyBudG9wbmdfbWFwX21hbmFnZXIgfSBmcm9tICcuLi91dGlsaXRpZXMvbWFwL250b3BuZ192aXNfbmV0d29ya191dGlscyc7XG5pbXBvcnQgTm90ZUxpc3QgZnJvbSBcIi4vbm90ZS1saXN0LnZ1ZVwiO1xuXG5jb25zdCBjaGFuZ2Vfc2VydmljZV90YWJsZV90YWJfZXZlbnQgPSBcImNoYW5nZV9zZXJ2aWNlX3RhYmxlX3RhYl9ldmVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcdCAgXG4gICAgJ2RhdGF0YWJsZSc6IERhdGF0YWJsZSxcbiAgICAnbW9kYWwtZGVsZXRlLWNvbmZpcm0nOiBNb2RhbERlbGV0ZUNvbmZpcm0sXG4gICAgJ3RhYi1saXN0JzogVGFiTGlzdCxcbiAgICBOb3RlTGlzdFxuICB9LFxuICBwcm9wczoge1xuICAgIHBhZ2VfY3NyZjogU3RyaW5nLFxuICAgIHVybF9wYXJhbXM6IE9iamVjdCxcbiAgICB2aWV3OiBTdHJpbmcsXG4gICAgdGFibGVfZmlsdGVyczogQXJyYXksXG4gICAgaXNfYWRtaW46IEJvb2xlYW4sXG4gICAgc2VydmljZV9hY2NlcHRhbmNlOiBBcnJheSxcbiAgfSxcbiAgLyoqXG4gICAqIEZpcnN0IG1ldGhvZCBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAqL1xuICBjcmVhdGVkKCkge1xuICAgIHRoaXMuc2VydmljZV90YWJsZV90YWIgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgndmlldycpIHx8ICdzdGFuZGFyZCc7XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCd2aWV3JywgdGhpcy5zZXJ2aWNlX3RhYmxlX3RhYik7XG4gICAgdGhpcy50YWJfbGlzdC5mb3JFYWNoKChpKSA9PiB7XG4gICAgICBpZih0aGlzLnNlcnZpY2VfdGFibGVfdGFiID09IGkuaWQpXG4gICAgICAgIGkuYWN0aXZlID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBzdGFydF9kYXRhdGFibGUodGhpcyk7XG4gIH0sXG4gIG1vdW50ZWQoKSB7XG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudChcInBhZ2Vfc2VydmljZV90YWJsZVwiLCBudG9wbmdfY3VzdG9tX2V2ZW50cy5EQVRBVEFCTEVfTE9BREVELCAoKSA9PiB7XG4gICAgICBpZihudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgnaG9zdCcpKVxuICAgICAgICB0aGlzLmhpZGVfZHJvcGRvd25zKCk7XG4gICAgfSk7XG5cbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KFwiY2hhbmdlX3NlcnZpY2VfdGFibGVfdGFiXCIsIGNoYW5nZV9zZXJ2aWNlX3RhYmxlX3RhYl9ldmVudCwgKHRhYikgPT4ge1xuXHQgICAgbGV0IHRhYmxlID0gdGhpcy5nZXRfYWN0aXZlX3RhYmxlKCk7XG4gICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoJ3ZpZXcnLCB0YWIpO1xuICAgICAgdGFibGUuZGVsZXRlX2J1dHRvbl9oYW5kbGVycyh0aGlzLnNlcnZpY2VfdGFibGVfdGFiKTtcbiAgICAgIHRhYmxlLmRlc3Ryb3lfdGFibGUoKTtcbiAgICAgIHRoaXMuc2VydmljZV90YWJsZV90YWIgPSB0YWI7XG4gICAgfSk7XG4gICAgJChcIiNidG4tZGVsZXRlLWFsbFwiKS5jbGljaygoKSA9PiB0aGlzLnNob3dfZGVsZXRlX2FsbF9kaWFsb2coKSk7XG4gIH0sICAgIFxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpMThuOiAodCkgPT4gaTE4bih0KSxcbiAgICAgIGNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkOiBudWxsLFxuICAgICAgY29uZmlnX2RldmljZXNfY2VudHJhbGl0eTogbnVsbCxcbiAgICAgIHRpdGxlX2RlbGV0ZTogaTE4bignbWFwX3BhZ2UuZGVsZXRlX3NlcnZpY2VzJyksXG4gICAgICBib2R5X2RlbGV0ZTogaTE4bignbWFwX3BhZ2UuZGVsZXRlX3NlcnZpY2VzX21lc3NhZ2UnKSxcbiAgICAgIGdldF91cmw6IG51bGwsXG4gICAgICBzZXJ2aWNlX3RhYmxlX3RhYjogbnVsbCxcbiAgICAgIG5vdGVzOiBbaTE4bignbWFwX3BhZ2UudGFibGVfbm90ZV9zZXJ2aWNlX21hcCcpXSxcbiAgICAgIHRhYl9saXN0OiBbXG4gICAgICAgIHsgXG4gICAgICAgICAgdGl0bGU6IGkxOG4oJ21hcF9wYWdlLnN0YW5kYXJkX3ZpZXcnKSxcbiAgICAgICAgICBhY3RpdmU6ICh2aWV3ID09ICdzdGFuZGFyZCcpLFxuICAgICAgICAgIGlkOiAnc3RhbmRhcmQnXG4gICAgICAgIH0sXG4gICAgICAgIHsgXG4gICAgICAgICAgdGl0bGU6IGkxOG4oJ21hcF9wYWdlLmNlbnRyYWxpdHlfdmlldycpLFxuICAgICAgICAgIGFjdGl2ZTogKHZpZXcgPT0gJ2NlbnRyYWxpdHknKSxcbiAgICAgICAgICBpZDogJ2NlbnRyYWxpdHknXG4gICAgICAgIH0sXG4gICAgICBdXG4gICAgfTtcbiAgfSxcbiAgbWV0aG9kczogeyBcbiAgICBoaWRlX2Ryb3Bkb3duczogZnVuY3Rpb24oKSB7XG4gICAgICAkKGAjbmV0d29ya19kcm9wZG93bmApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgICAgJChgI3ZsYW5faWRfZHJvcGRvd25gKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICAgICQoYCNuZXR3b3JrX2Ryb3Bkb3duYCkucmVtb3ZlQ2xhc3MoJ2QtaW5saW5lJylcbiAgICAgICQoYCN2bGFuX2lkX2Ryb3Bkb3duYCkucmVtb3ZlQ2xhc3MoJ2QtaW5saW5lJylcbiAgICB9LCBcbiAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCB0YWJsZSA9IHRoaXMuZ2V0X2FjdGl2ZV90YWJsZSgpO1xuICAgICAgdGFibGUuZGVsZXRlX2J1dHRvbl9oYW5kbGVycyh0aGlzLnNlcnZpY2VfdGFibGVfdGFiKTtcbiAgICAgIHRhYmxlLmRlc3Ryb3lfdGFibGUoKTtcbiAgICB9LFxuICAgIC8qIE1ldGhvZCB1c2VkIHRvIHN3aXRjaCBhY3RpdmUgdGFibGUgdGFiICovXG4gICAgY2xpY2tfaXRlbTogZnVuY3Rpb24oaXRlbSkge1xuICAgICAgdGhpcy50YWJfbGlzdC5mb3JFYWNoKChpKSA9PiBpLmFjdGl2ZSA9IGZhbHNlKTtcbiAgICAgIGl0ZW0uYWN0aXZlID0gdHJ1ZTtcbiAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChjaGFuZ2Vfc2VydmljZV90YWJsZV90YWJfZXZlbnQsIGl0ZW0uaWQpO1xuICAgIH0sXG4gICAgY3JlYXRlX2FjdGlvbl9idXR0b25zOiBmdW5jdGlvbihkYXRhLCB0eXBlLCBzZXJ2aWNlKSB7XG4gICAgICBjb25zdCByZWxvYWQgPSB0aGlzLnJlbG9hZF90YWJsZVxuICAgICAgY29uc3QgY3NyZiA9IHRoaXMuJHByb3BzLnBhZ2VfY3NyZlxuICAgICAgY29uc3QgdG9nZ2xlX2FsbG93ZWRfc3RhdGUgPSB7XG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgICBudG9wbmdfbWFwX21hbmFnZXIudG9nZ2xlX3N0YXRlKHNlcnZpY2UuaGFzaF9pZCwgdGhpcy4kcHJvcHMuc2VydmljZV9hY2NlcHRhbmNlWzBdLmlkLCByZWxvYWQsIGNzcmYpXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBjb25zdCB0b2dnbGVfZGVuaWVkX3N0YXRlID0ge1xuICAgICAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgbnRvcG5nX21hcF9tYW5hZ2VyLnRvZ2dsZV9zdGF0ZShzZXJ2aWNlLmhhc2hfaWQsIHRoaXMuJHByb3BzLnNlcnZpY2VfYWNjZXB0YW5jZVsxXS5pZCwgcmVsb2FkLCBjc3JmKVxuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgY29uc3QgdG9nZ2xlX3VuZGVjaWRlZF9zdGF0ZSA9IHtcbiAgICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgIG50b3BuZ19tYXBfbWFuYWdlci50b2dnbGVfc3RhdGUoc2VydmljZS5oYXNoX2lkLCB0aGlzLiRwcm9wcy5zZXJ2aWNlX2FjY2VwdGFuY2VbMl0uaWQsIHJlbG9hZCwgY3NyZilcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgaWYgKHR5cGUgIT09IFwiZGlzcGxheVwiKSByZXR1cm4gZGF0YTtcbiAgICAgIGNvbnN0IGN1cnJlbnRTdGF0dXMgPSBzZXJ2aWNlLmFjY2VwdGFuY2VcbiAgICAgIGNvbnN0IGFsbG93ZWRCdXR0b24gPSB7IGNsYXNzOiAnZHJvcGRvd24taXRlbScsIGhyZWY6ICcjJywgdGl0bGU6IHRoaXMuJHByb3BzLnNlcnZpY2VfYWNjZXB0YW5jZVswXS5sYWJlbCwgaGFuZGxlcjogdG9nZ2xlX2FsbG93ZWRfc3RhdGUgfTtcbiAgICAgIGNvbnN0IGRlbmllZEJ1dHRvbiA9IHsgY2xhc3M6ICdkcm9wZG93bi1pdGVtJywgaHJlZjogJyMnLCB0aXRsZTogdGhpcy4kcHJvcHMuc2VydmljZV9hY2NlcHRhbmNlWzFdLmxhYmVsLCBoYW5kbGVyOiB0b2dnbGVfZGVuaWVkX3N0YXRlIH07XG4gICAgICBjb25zdCB1bmRlY2lkZWRCdXR0b24gPSB7IGNsYXNzOiAnZHJvcGRvd24taXRlbSBkaXNhYmxlZCcsIGhyZWY6ICcjJywgdGl0bGU6IHRoaXMuJHByb3BzLnNlcnZpY2VfYWNjZXB0YW5jZVsyXS5sYWJlbCwgaGFuZGxlcjogdG9nZ2xlX3VuZGVjaWRlZF9zdGF0ZSB9O1xuICAgICAgXG4gICAgICBzd2l0Y2ggKGN1cnJlbnRTdGF0dXMpIHtcbiAgICAgICAgY2FzZSAwOiAvKiBBbGxvd2VkICovICAgeyBhbGxvd2VkQnV0dG9uLmNsYXNzID0gJ2Ryb3Bkb3duLWl0ZW0gYWN0aXZlJzsgYnJlYWs7IH1cbiAgICAgICAgY2FzZSAxOiAvKiBEZW5pZWQgKi8gICAgeyBkZW5pZWRCdXR0b24uY2xhc3MgPSAnZHJvcGRvd24taXRlbSBhY3RpdmUnOyBicmVhazsgfVxuICAgICAgICBjYXNlIDI6IC8qIFVuZGVjaWRlZCAqLyB7IHVuZGVjaWRlZEJ1dHRvbi5jbGFzcyA9ICdkcm9wZG93bi1pdGVtIGFjdGl2ZSBkaXNhYmxlZCc7IGJyZWFrOyB9XG4gICAgICB9XG4gICAgICByZXR1cm4gRGF0YVRhYmxlVXRpbHMuY3JlYXRlQWN0aW9uQnV0dG9ucyhbdW5kZWNpZGVkQnV0dG9uLCBhbGxvd2VkQnV0dG9uLCBkZW5pZWRCdXR0b25dKTtcbiAgICB9LFxuXG4gICAgY3JlYXRlX2FjdGlvbl9idXR0b25faGlzdG9yaWNhbF9mbG93X2xpbms6IGZ1bmN0aW9uKF8sIHR5cGUsIHJvd0RhdGEpIHtcbiAgICBsZXQgaGlzdG9yaWNhbF9mbG93X2xpbmsgPSB7XG4gICAgICBoYW5kbGVySWQ6IFwiaGlzdG9yaWNhbF9mbG93X2xpbmtcIixcbiAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgaGlzdG9yaWNhbF9mbG93KHJvd0RhdGEpO1xuICAgICAgfSxcbiAgICB9XG5cbiAgICByZXR1cm4gRGF0YVRhYmxlVXRpbHMuY3JlYXRlQWN0aW9uQnV0dG9ucyhbXG4gICAgICB7IGNsYXNzOiBgcG9pbnRlcmAsIGhhbmRsZXI6IGhpc3RvcmljYWxfZmxvd19saW5rLCBpY29uOiAnZmFzIGZhLXN0cmVhbScsIHRpdGxlOiBpMThuKCdkYl9leHBsb3Jlci5oaXN0b3JpY2FsX2RhdGEnKSB9LFxuICAgIF0pO1xuICAgIFxuICAgIH0sXG4gICAgZGVsZXRlX2FsbDogYXN5bmMgZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9uZXR3b3JrX21hcHMubHVhYDtcbiAgICAgIGxldCBwYXJhbXMgPSB7XG4gICAgICAgIGlmaWQ6IHRoaXMudXJsX3BhcmFtcy5pZmlkLFxuICAgICAgICBhY3Rpb246ICdyZXNldCcsXG4gICAgICAgIHBhZ2U6IHRoaXMudXJsX3BhcmFtcy5wYWdlLFxuICAgICAgICBjc3JmOiB0aGlzLiRwcm9wcy5wYWdlX2NzcmYsXG4gICAgICAgIG1hcDogdGhpcy51cmxfcGFyYW1zLm1hcFxuICAgICAgfTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxldCBoZWFkZXJzID0ge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgfTtcbiAgICAgICAgYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCwgeyBtZXRob2Q6ICdwb3N0JywgaGVhZGVycywgYm9keTogSlNPTi5zdHJpbmdpZnkocGFyYW1zKSB9KTtcbiAgICAgICAgdGhpcy5yZWxvYWRfdGFibGUoKTtcbiAgICAgIH0gY2F0Y2goZXJyKSB7XG4gICAgICAgIHRoaXMucmVsb2FkX3RhYmxlKCk7ICBcbiAgICAgIH0gICAgICBcbiAgICB9LFxuICAgIHJlbG9hZF90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdGFibGUgPSB0aGlzLmdldF9hY3RpdmVfdGFibGUoKTtcbiAgICAgIE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTtcbiAgICAgIHRhYmxlLnJlbG9hZCgpO1xuICAgICAgTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpO1xuICAgIH0sXG4gICAgZ2V0X2FjdGl2ZV90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy4kcmVmc1tgdGFibGVfc2VydmljZV8ke3RoaXMuc2VydmljZV90YWJsZV90YWJ9YF07XG4gICAgfSxcbiAgICBzd2l0Y2hfdG9fc3RhbmRhcmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IG5ld191cmwgPSB0aGlzLnVybF9wYXJhbXNcbiAgICAgIG5ld191cmxbJ3ZpZXcnXSA9ICdzdGFuZGFyZCdcbiAgICAgIGRvY3VtZW50LmxvY2F0aW9uLmhyZWYgPSBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9uZXR3b3JrX21hcHMubHVhYCwgdXJsX3BhcmFtcylcbiAgICB9LFxuICAgIHN3aXRjaF90b19jZW50cmFsaXR5OiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCBuZXdfdXJsID0gdGhpcy51cmxfcGFyYW1zXG4gICAgICBuZXdfdXJsWyd2aWV3J10gPSAnY2VudHJhbGl0eSdcbiAgICAgIGRvY3VtZW50LmxvY2F0aW9uLmhyZWYgPSBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9uZXR3b3JrX21hcHMubHVhYCwgdXJsX3BhcmFtcylcbiAgICB9LFxuICAgIHNob3dfZGVsZXRlX2FsbF9kaWFsb2c6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy4kcmVmc1tcIm1vZGFsX2RlbGV0ZV9hbGxcIl0uc2hvdygpO1xuICAgIH0sICBcbiAgfSxcbn0gIFxuXG5mdW5jdGlvbiBoaXN0b3JpY2FsX2Zsb3cocm93KSB7XG4gIGNvbnN0IGNsaWVudF9pcCA9IHJvdy5jbGllbnQuc3BsaXQoXCJob3N0PVwiKVsxXS5zcGxpdChcIj5cIilbMF07XG4gIGNvbnN0IGNsaWVudCA9IGNsaWVudF9pcC5zdWJzdHJpbmcoMCwgY2xpZW50X2lwLmxlbmd0aCAtIDEpO1xuICBjb25zdCBzZXJ2ZXJfaXAgPSByb3cuc2VydmVyLnNwbGl0KFwiaG9zdD1cIilbMV0uc3BsaXQoXCI+XCIpWzBdO1xuICBjb25zdCBzZXJ2ZXIgPSBzZXJ2ZXJfaXAuc3Vic3RyaW5nKDAsIHNlcnZlcl9pcC5sZW5ndGggLSAxKTtcbiAgY29uc3QgcG9ydCA9IHJvdy5wb3J0O1xuXG4gIGNvbnN0IGVwb2NoX2JlZ2luID0gcm93LmZpcnN0X3NlZW47XG4gIGNvbnN0IGVwb2NoX2VuZCA9IHJvdy5sYXN0X3NlZW4uZXBvY2hfZW5kO1xuXG4gIGNvbnN0IHBhcmFtcyA9IHtcbiAgICBlcG9jaF9iZWdpbjogZXBvY2hfYmVnaW4sXG4gICAgZXBvY2hfZW5kOiBlcG9jaF9lbmQsXG4gICAgc3J2X2lwOiBgJHtzZXJ2ZXJ9O2VxYCxcbiAgICBjbGlfaXA6IGAke2NsaWVudH07ZXFgLFxuICAgIHNydl9wb3J0OiBgJHtwb3J0fTtlcWAsXG4gIH1cbiAgY29uc3QgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyhwYXJhbXMpO1xuICBjb25zdCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9kYl9zZWFyY2gubHVhPyR7dXJsX3BhcmFtc31gO1xuICBudG9wbmdfdXJsX21hbmFnZXIuZ29fdG9fdXJsKHVybCk7XG5cbn1cblxuZnVuY3Rpb24gc3RhcnRfZGF0YXRhYmxlKERhdGF0YWJsZVZ1ZSkge1xuICBjb25zdCBkYXRhdGFibGVCdXR0b24gPSBbXTtcbiAgbGV0IGNvbHVtbnMgPSBbXTtcbiAgbGV0IGRlZmF1bHRfc29ydGluZ19jb2x1bW5zID0gMDtcbiAgRGF0YXRhYmxlVnVlLmdldF91cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9nZXRfbWFwLmx1YWAsIHVybF9wYXJhbXMpXG4gIFxuICAvKiBNYW5hZ2UgdGhlIGJ1dHRvbnMgY2xvc2UgdG8gdGhlIHNlYXJjaCBib3ggKi9cbiAgZGF0YXRhYmxlQnV0dG9uLnB1c2goe1xuICAgIHRleHQ6ICc8aSBjbGFzcz1cImZhcyBmYS1zeW5jXCI+PC9pPicsXG4gICAgY2xhc3NOYW1lOiAnYnRuLWxpbmsnLFxuICAgIGFjdGlvbjogZnVuY3Rpb24gKGUsIGR0LCBub2RlLCBjb25maWcpIHtcbiAgICAgIERhdGF0YWJsZVZ1ZS5yZWxvYWRfdGFibGUoKTtcbiAgICB9XG4gIH0pO1xuICBcbiAgbGV0IHRtcF9wYXJhbXMgPSB1cmxfcGFyYW1zO1xuICB0bXBfcGFyYW1zWyd2aWV3J10gPSAnc3RhbmRhcmQnXG4gIFxuICBsZXQgZGVmYXVsdERhdGF0YWJsZUNvbmZpZyA9IHtcbiAgICB0YWJsZV9idXR0b25zOiBkYXRhdGFibGVCdXR0b24sXG4gICAgY29sdW1uc19jb25maWc6IFtdLFxuICAgIGRhdGFfdXJsOiBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9nZXRfbWFwLmx1YWAsIHRtcF9wYXJhbXMpLFxuICAgIGVuYWJsZV9zZWFyY2g6IHRydWUsXG4gIH07XG5cbiAgbGV0IHRhYmxlX2ZpbHRlcnMgPSBbXVxuICBmb3IgKGxldCBmaWx0ZXIgb2YgKERhdGF0YWJsZVZ1ZS4kcHJvcHMudGFibGVfZmlsdGVycyB8fCBbXSkpIHtcbiAgICBmaWx0ZXIuY2FsbGJhY2tGdW5jdGlvbiA9ICh0YWJsZSwgdmFsdWUpID0+IHtcbiAgICAgIHRtcF9wYXJhbXNbJ3ZpZXcnXSA9IERhdGF0YWJsZVZ1ZS5zZXJ2aWNlX3RhYmxlX3RhYjtcbiAgICAgIHRtcF9wYXJhbXNbZmlsdGVyLmZpbHRlck1lbnVLZXldID0gdmFsdWUuaWQ7XG4gICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoZmlsdGVyLmZpbHRlck1lbnVLZXksIHZhbHVlLmlkKTtcbiAgICAgIHRhYmxlLmFqYXgudXJsKE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL2dldF9tYXAubHVhYCwgdG1wX3BhcmFtcykpO1xuICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgdGFibGUuYWpheC5yZWxvYWQoKTtcbiAgICAgIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKTtcbiAgICB9LFxuICAgIHRhYmxlX2ZpbHRlcnMucHVzaChmaWx0ZXIpO1xuICB9XG4gIFxuICAvKiBTdGFuZGFyZCB0YWJsZSBjb25maWd1cmF0aW9uICovICBcblxuICBjb2x1bW5zID0gW1xuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImFjdGlvbnNcIiksIG5hbWU6ICdhY3Rpb25zJywgZGF0YTogJ2FjdGlvbnMnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIG9yZGVyYWJsZTogZmFsc2UsIHJlc3BvbnNpdmVQcmlvcml0eTogMCwgcmVuZGVyOiBmdW5jdGlvbiAoXywgdHlwZSwgcm93RGF0YSkge1xuICAgICAgICByZXR1cm4gRGF0YXRhYmxlVnVlLmNyZWF0ZV9hY3Rpb25fYnV0dG9uX2hpc3RvcmljYWxfZmxvd19saW5rKF8sIHR5cGUscm93RGF0YSk7XG4gICAgICB9LCBjcmVhdGVkQ2VsbDogRGF0YVRhYmxlUmVuZGVycy5hcHBseUNlbGxTdHlsZVxuICAgIH0sIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLmxhc3Rfc2VlblwiKSwgbmFtZTogJ2xhc3Rfc2VlbicsIGRhdGE6ICdsYXN0X3NlZW4nLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlciB0ZXh0LW5vd3JhcCcsIHJlbmRlcjogKGRhdGEsIHR5cGUpID0+IHsgcmV0dXJuIGRhdGEudmFsdWUgfSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UuY2xpZW50XCIpLCBuYW1lOiAnY2xpZW50JywgZGF0YTogJ2NsaWVudCcsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2Uuc2VydmVyXCIpLCBuYW1lOiAnc2VydmVyJywgZGF0YTogJ3NlcnZlcicsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UucG9ydFwiKSwgbmFtZTogJ3BvcnQnLCBkYXRhOiAncG9ydCcsICBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogNCB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLnByb3RvY29sXCIpLCBuYW1lOiAnbDdwcm90bycsIGRhdGE6ICdwcm90b2NvbCcsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAzIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UuZmlyc3Rfc2VlblwiKSwgbmFtZTogJ2ZpcnN0X3NlZW4nLCBkYXRhOiAnZmlyc3Rfc2VlbicsIHZpc2libGU6IGZhbHNlLCByZXNwb25zaXZlUHJpb3JpdHk6IDMgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5udW1fdXNlc1wiKSwgbmFtZTogJ251bV91c2VzJywgZGF0YTogJ251bV91c2VzJywgIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyIHRleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiA0IH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UuaW5mb1wiKSwgbmFtZTogJ2luZm8nLCBkYXRhOiAnaW5mbycsIHJlc3BvbnNpdmVQcmlvcml0eTogNSB9LFxuICBdO1xuXG4gIGRlZmF1bHRfc29ydGluZ19jb2x1bW5zID0gNyAvKiBOdW0gVXNlcyAqL1xuXG4gIGlmKERhdGF0YWJsZVZ1ZS5pc19hZG1pbikge1xuICAgIGNvbHVtbnMucHVzaCh7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5zdGF0dXNcIiksIG5hbWU6ICdzZXJ2aWNlX2FjY2VwdGFuY2UnLCBkYXRhOiAnc2VydmljZV9hY2NlcHRhbmNlJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCBvcmRlcmFibGU6IGZhbHNlLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogKGRhdGEsIHR5cGUsIHNlcnZpY2UpID0+IHtcbiAgICAgICAgcmV0dXJuIERhdGF0YWJsZVZ1ZS5jcmVhdGVfYWN0aW9uX2J1dHRvbnMoZGF0YSwgdHlwZSwgc2VydmljZSk7XG4gICAgICB9XG4gICAgfSk7XG5cblxuICB9XG4gIFxuICAvKiBFeHRyYSB0YWJsZSBjb25maWd1cmF0aW9uICovXG4gIGxldCB0YWJsZV9jb25maWcgPSB7XG4gICAgc2VydmVyU2lkZTogdHJ1ZSxcbiAgICBvcmRlcjogW1sgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnMsICdkZXNjJyBdXVxuICB9XG4gIFxuICBsZXQgY29uZmlnRGV2aWNlcyA9IG50b3BuZ191dGlsaXR5LmNsb25lKGRlZmF1bHREYXRhdGFibGVDb25maWcpO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2J1dHRvbnMgPSBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnLnRhYmxlX2J1dHRvbnM7XG4gIGNvbmZpZ0RldmljZXMuZGF0YV91cmwgPSBgJHtjb25maWdEZXZpY2VzLmRhdGFfdXJsfWA7XG4gIGNvbmZpZ0RldmljZXMuY29sdW1uc19jb25maWcgPSBjb2x1bW5zO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2ZpbHRlcnMgPSB0YWJsZV9maWx0ZXJzO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2NvbmZpZyA9IG50b3BuZ191dGlsaXR5LmNsb25lKHRhYmxlX2NvbmZpZyk7XG4gIERhdGF0YWJsZVZ1ZS5jb25maWdfZGV2aWNlc19zdGFuZGFyZCA9IGNvbmZpZ0RldmljZXM7XG5cbiAgLyogQ2VudHJhbGl0eSB0YWJsZSBjb25maWd1cmF0aW9uICovXG5cbiAgdG1wX3BhcmFtc1sndmlldyddID0gJ2NlbnRyYWxpdHknICBcbiAgZGVmYXVsdERhdGF0YWJsZUNvbmZpZy5kYXRhX3VybCA9IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL2dldF9tYXAubHVhYCwgdG1wX3BhcmFtcylcblxuICBjb2x1bW5zID0gW1xuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLmhvc3RcIiksIG5hbWU6ICdob3N0JywgZGF0YTogJ2hvc3QnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLnRvdGFsX2VkZ2VzXCIpLCBuYW1lOiAndG90YWxfZWRnZXMnLCBkYXRhOiAndG90YWxfZWRnZXMnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLnJhbmtcIiksIG5hbWU6ICdyYW5rJywgZGF0YTogJ3JhbmsnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogMiB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLmluX2VkZ2VzXCIpLCBuYW1lOiAnaW5fZWRnZXMnLCBkYXRhOiAnaW5fZWRnZXMnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLm91dF9lZGdlc1wiKSwgbmFtZTogJ291dF9lZGdlcycsIGRhdGE6ICdvdXRfZWRnZXMnLCAgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgXTtcbiAgXG4gIGRlZmF1bHRfc29ydGluZ19jb2x1bW5zID0gMiAvKiBSYW5rICovXG4gIHRhYmxlX2NvbmZpZy5vcmRlciA9IFtbIGRlZmF1bHRfc29ydGluZ19jb2x1bW5zLCAnZGVzYycgXV1cbiAgY29uZmlnRGV2aWNlcyA9IG50b3BuZ191dGlsaXR5LmNsb25lKGRlZmF1bHREYXRhdGFibGVDb25maWcpO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2J1dHRvbnMgPSBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnLnRhYmxlX2J1dHRvbnM7XG4gIGNvbmZpZ0RldmljZXMuZGF0YV91cmwgPSBgJHtjb25maWdEZXZpY2VzLmRhdGFfdXJsfWA7XG4gIGNvbmZpZ0RldmljZXMuY29sdW1uc19jb25maWcgPSBjb2x1bW5zO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2ZpbHRlcnMgPSB0YWJsZV9maWx0ZXJzO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2NvbmZpZyA9IG50b3BuZ191dGlsaXR5LmNsb25lKHRhYmxlX2NvbmZpZyk7XG4gIERhdGF0YWJsZVZ1ZS5jb25maWdfZGV2aWNlc19jZW50cmFsaXR5ID0gY29uZmlnRGV2aWNlcztcbn1cbjwvc2NyaXB0PlxuXG5cblxuXG5cblxuIiwieyNcbiAgKEMpIDIwMjIgLSBudG9wLm9yZ1xuICBUaGlzIHRlbXBsYXRlIGlzIHVzZWQgYnkgdGhlIGBTZXJ2aWNlIE1hcGAgcGFnZSBpbnNpZGUgdGhlIGBIb3N0c2AgbWVudS4gICAgXG4jfVxuXG48dGVtcGxhdGU+XG5cbjxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wtbGctMTJcIj5cbiAgICA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZGFuZ2VyIGQtbm9uZVwiIGlkPSdhbGVydC1yb3ctYnV0dG9ucycgcm9sZT1cImFsZXJ0XCI+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImNhcmRcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJvdmVybGF5IGp1c3RpZnktY29udGVudC1jZW50ZXIgYWxpZ24taXRlbXMtY2VudGVyIHBvc2l0aW9uLWFic29sdXRlIGgtMTAwIHctMTAwXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJzcGlubmVyLWJvcmRlciB0ZXh0LXByaW1hcnkgbXQtNVwiIHJvbGU9XCJzdGF0dXNcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3Itb25seSBwb3NpdGlvbi1hYnNvbHV0ZVwiPkxvYWRpbmcuLi48L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICBcdDxkaXYgaWQ9XCJ0YWJsZV9zZXJ2aWNlXCI+XG4gICAgICAgICAgPG1vZGFsLWRlbGV0ZS1jb25maXJtIHJlZj1cIm1vZGFsX2RlbGV0ZV9hbGxcIlxuICAgICAgICAgICAgOnRpdGxlPVwidGl0bGVfZGVsZXRlXCJcbiAgICAgICAgICAgIDpib2R5PVwiYm9keV9kZWxldGVcIlxuICAgICAgICAgICAgQGRlbGV0ZT1cImRlbGV0ZV9hbGxcIj5cbiAgICAgICAgICA8L21vZGFsLWRlbGV0ZS1jb25maXJtPlxuICBcbiAgICAgICAgICA8dGFiLWxpc3QgcmVmPVwic2VydmljZV90YWJfbGlzdFwiXG4gICAgICAgICAgICBpZD1cInNlcnZpY2VfdGFiX2xpc3RcIlxuICAgICAgICAgICAgOnRhYl9saXN0PVwidGFiX2xpc3RcIlxuICAgICAgICAgICAgQGNsaWNrX2l0ZW09XCJjbGlja19pdGVtXCI+XG4gICAgICAgICAgPC90YWItbGlzdD5cblxuICAgICAgICAgIDxkYXRhdGFibGUgdi1pZj1cInNlcnZpY2VfdGFibGVfdGFiID09ICdzdGFuZGFyZCdcIiByZWY9XCJ0YWJsZV9zZXJ2aWNlX3N0YW5kYXJkXCJcbiAgICAgICAgICAgIDp0YWJsZV9idXR0b25zPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfYnV0dG9uc1wiXG4gICAgICAgICAgICA6Y29sdW1uc19jb25maWc9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5jb2x1bW5zX2NvbmZpZ1wiXG4gICAgICAgICAgICA6ZGF0YV91cmw9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5kYXRhX3VybFwiXG4gICAgICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmVuYWJsZV9zZWFyY2hcIlxuICAgICAgICAgICAgOmZpbHRlcl9idXR0b25zPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfZmlsdGVyc1wiXG4gICAgICAgICAgICA6dGFibGVfY29uZmlnPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfY29uZmlnXCI+XG4gICAgICAgICAgPC9kYXRhdGFibGU+XG4gICAgICAgICAgPGRhdGF0YWJsZSB2LWlmPVwic2VydmljZV90YWJsZV90YWIgPT0gJ2NlbnRyYWxpdHknXCIgcmVmPVwidGFibGVfc2VydmljZV9jZW50cmFsaXR5XCJcbiAgICAgICAgICAgIDp0YWJsZV9idXR0b25zPVwiY29uZmlnX2RldmljZXNfY2VudHJhbGl0eS50YWJsZV9idXR0b25zXCJcbiAgICAgICAgICAgIDpjb2x1bW5zX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkuY29sdW1uc19jb25maWdcIlxuICAgICAgICAgICAgOmRhdGFfdXJsPVwiY29uZmlnX2RldmljZXNfY2VudHJhbGl0eS5kYXRhX3VybFwiXG4gICAgICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cImNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkuZW5hYmxlX3NlYXJjaFwiXG4gICAgICAgICAgICA6ZmlsdGVyX2J1dHRvbnM9XCJjb25maWdfZGV2aWNlc19jZW50cmFsaXR5LnRhYmxlX2ZpbHRlcnNcIlxuICAgICAgICAgICAgOnRhYmxlX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkudGFibGVfY29uZmlnXCI+XG4gICAgICAgICAgPC9kYXRhdGFibGU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1mb290ZXJcIj5cbjwhLS1cbiAgICAgICAgeyUgaWYgaXNfYWRtaW4gdGhlbiAlfVxuICAgICAgICAgIDxmb3JtIGNsYXNzPVwiZC1pbmxpbmVcIiBpZD0nc3dpdGNoLXN0YXRlLWZvcm0nPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbWItMyBkLWlubGluZVwiPlxuICAgICAgICAgICAgICA8bGFiZWw+eyogaTE4bihcIm1hcF9wYWdlLnNldF9zdGF0ZVwiLCB7bGFiZWwgPSBcIjxzcGFuIGNsYXNzPSdjb3VudCc+PC9zcGFuPlwifSkgKn08L2xhYmVsPlxuICAgICAgICAgICAgICA8c2VsZWN0IG5hbWU9XCJuZXdfc3RhdGVcIiBjbGFzcz1cImZvcm0tc2VsZWN0IGQtaW5saW5lXCIgc3R5bGU9XCJ3aWR0aDogMTZyZW1cIiB7eyB0ZXJuYXJ5KG1hcC5zZXJ2aWNlc19udW0gPT0gMCwgXCJkaXNhYmxlZD0nZGlzYWJsZWQnXCIsIFwiXCIpIH19PlxuICAgICAgICAgICAgICB7JSBmb3IgXywgc3RhdHVzIGluIHBhaXJzQnlGaWVsZChtYXAuZmlsdGVycy5zZXJ2aWNlX3N0YXR1c19maWx0ZXJzLCBsYWJlbCwgYXNjX2luc2Vuc2l0aXZlKSBkbyAlfVxuICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJ7eyBzdGF0dXMuaWQgfX1cIj57KiBzdGF0dXMubGFiZWwgKn08L29wdGlvbj5cbiAgICAgICAgICAgICAgeyUgZW5kICV9XG4gICAgICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1zZWNvbmRhcnkgZC1pbmxpbmVcIiBjbGFzcz1cImJ0bi1zd2l0Y2gtc3RhdGVcIiB7eyB0ZXJuYXJ5KG1hcC5zZXJ2aWNlc19udW0gPT0gMCwgXCJkaXNhYmxlZD0nZGlzYWJsZWQnXCIsIFwiXCIpIH19PlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLXJhbmRvbVwiPjwvaT4ge3sgaTE4bihcInNldFwiKSB9fVxuICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgeyUgZW5kICV9XG4gICAgLS0+IFxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZD0nYnRuLWRlbGV0ZS1hbGwnIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXIgbWUtMVwiPjxpIGNsYXNzPSdmYXMgZmEtdHJhc2gnPjwvaT4ge3sgaTE4bihcIm1hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlc1wiKSB9fTwvYnV0dG9uPlxuICAgICAgICA8YSB2LWJpbmQ6aHJlZj1cImdldF91cmxcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIHJvbGU9XCJidXR0b25cIiBhcmlhLWRpc2FibGVkPVwidHJ1ZVwiICBkb3dubG9hZD1cInNlcnZpY2VfbWFwLmpzb25cIiB0YXJnZXQ9XCJfYmxhbmtcIj48aSBjbGFzcz1cImZhcyBmYS1kb3dubG9hZFwiPjwvaT48L2E+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8Tm90ZUxpc3QgOm5vdGVfbGlzdD1cIm5vdGVzXCI+IDwvTm90ZUxpc3Q+XG5cbiAgPC9kaXY+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBkZWZhdWx0IGFzIERhdGF0YWJsZSB9IGZyb20gXCIuL2RhdGF0YWJsZS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgVGFiTGlzdCB9IGZyb20gXCIuL3RhYi1saXN0LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbERlbGV0ZUNvbmZpcm0gfSBmcm9tIFwiLi9tb2RhbC1kZWxldGUtY29uZmlybS52dWVcIjtcbmltcG9ydCB7IG50b3BuZ19ldmVudHNfbWFuYWdlciwgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSAnLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcyc7XG5pbXBvcnQgeyBudG9wbmdfbWFwX21hbmFnZXIgfSBmcm9tICcuLi91dGlsaXRpZXMvbWFwL250b3BuZ192aXNfbmV0d29ya191dGlscyc7XG5pbXBvcnQgTm90ZUxpc3QgZnJvbSBcIi4vbm90ZS1saXN0LnZ1ZVwiO1xuXG5jb25zdCBjaGFuZ2Vfc2VydmljZV90YWJsZV90YWJfZXZlbnQgPSBcImNoYW5nZV9zZXJ2aWNlX3RhYmxlX3RhYl9ldmVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcdCAgXG4gICAgJ2RhdGF0YWJsZSc6IERhdGF0YWJsZSxcbiAgICAnbW9kYWwtZGVsZXRlLWNvbmZpcm0nOiBNb2RhbERlbGV0ZUNvbmZpcm0sXG4gICAgJ3RhYi1saXN0JzogVGFiTGlzdCxcbiAgICBOb3RlTGlzdFxuICB9LFxuICBwcm9wczoge1xuICAgIHBhZ2VfY3NyZjogU3RyaW5nLFxuICAgIHVybF9wYXJhbXM6IE9iamVjdCxcbiAgICB2aWV3OiBTdHJpbmcsXG4gICAgdGFibGVfZmlsdGVyczogQXJyYXksXG4gICAgaXNfYWRtaW46IEJvb2xlYW4sXG4gICAgc2VydmljZV9hY2NlcHRhbmNlOiBBcnJheSxcbiAgfSxcbiAgLyoqXG4gICAqIEZpcnN0IG1ldGhvZCBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAqL1xuICBjcmVhdGVkKCkge1xuICAgIHRoaXMuc2VydmljZV90YWJsZV90YWIgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgndmlldycpIHx8ICdzdGFuZGFyZCc7XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCd2aWV3JywgdGhpcy5zZXJ2aWNlX3RhYmxlX3RhYik7XG4gICAgdGhpcy50YWJfbGlzdC5mb3JFYWNoKChpKSA9PiB7XG4gICAgICBpZih0aGlzLnNlcnZpY2VfdGFibGVfdGFiID09IGkuaWQpXG4gICAgICAgIGkuYWN0aXZlID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBzdGFydF9kYXRhdGFibGUodGhpcyk7XG4gIH0sXG4gIG1vdW50ZWQoKSB7XG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudChcInBhZ2Vfc2VydmljZV90YWJsZVwiLCBudG9wbmdfY3VzdG9tX2V2ZW50cy5EQVRBVEFCTEVfTE9BREVELCAoKSA9PiB7XG4gICAgICBpZihudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgnaG9zdCcpKVxuICAgICAgICB0aGlzLmhpZGVfZHJvcGRvd25zKCk7XG4gICAgfSk7XG5cbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KFwiY2hhbmdlX3NlcnZpY2VfdGFibGVfdGFiXCIsIGNoYW5nZV9zZXJ2aWNlX3RhYmxlX3RhYl9ldmVudCwgKHRhYikgPT4ge1xuXHQgICAgbGV0IHRhYmxlID0gdGhpcy5nZXRfYWN0aXZlX3RhYmxlKCk7XG4gICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoJ3ZpZXcnLCB0YWIpO1xuICAgICAgdGFibGUuZGVsZXRlX2J1dHRvbl9oYW5kbGVycyh0aGlzLnNlcnZpY2VfdGFibGVfdGFiKTtcbiAgICAgIHRhYmxlLmRlc3Ryb3lfdGFibGUoKTtcbiAgICAgIHRoaXMuc2VydmljZV90YWJsZV90YWIgPSB0YWI7XG4gICAgfSk7XG4gICAgJChcIiNidG4tZGVsZXRlLWFsbFwiKS5jbGljaygoKSA9PiB0aGlzLnNob3dfZGVsZXRlX2FsbF9kaWFsb2coKSk7XG4gIH0sICAgIFxuICBkYXRhKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpMThuOiAodCkgPT4gaTE4bih0KSxcbiAgICAgIGNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkOiBudWxsLFxuICAgICAgY29uZmlnX2RldmljZXNfY2VudHJhbGl0eTogbnVsbCxcbiAgICAgIHRpdGxlX2RlbGV0ZTogaTE4bignbWFwX3BhZ2UuZGVsZXRlX3NlcnZpY2VzJyksXG4gICAgICBib2R5X2RlbGV0ZTogaTE4bignbWFwX3BhZ2UuZGVsZXRlX3NlcnZpY2VzX21lc3NhZ2UnKSxcbiAgICAgIGdldF91cmw6IG51bGwsXG4gICAgICBzZXJ2aWNlX3RhYmxlX3RhYjogbnVsbCxcbiAgICAgIG5vdGVzOiBbaTE4bignbWFwX3BhZ2UudGFibGVfbm90ZV9zZXJ2aWNlX21hcCcpXSxcbiAgICAgIHRhYl9saXN0OiBbXG4gICAgICAgIHsgXG4gICAgICAgICAgdGl0bGU6IGkxOG4oJ21hcF9wYWdlLnN0YW5kYXJkX3ZpZXcnKSxcbiAgICAgICAgICBhY3RpdmU6ICh2aWV3ID09ICdzdGFuZGFyZCcpLFxuICAgICAgICAgIGlkOiAnc3RhbmRhcmQnXG4gICAgICAgIH0sXG4gICAgICAgIHsgXG4gICAgICAgICAgdGl0bGU6IGkxOG4oJ21hcF9wYWdlLmNlbnRyYWxpdHlfdmlldycpLFxuICAgICAgICAgIGFjdGl2ZTogKHZpZXcgPT0gJ2NlbnRyYWxpdHknKSxcbiAgICAgICAgICBpZDogJ2NlbnRyYWxpdHknXG4gICAgICAgIH0sXG4gICAgICBdXG4gICAgfTtcbiAgfSxcbiAgbWV0aG9kczogeyBcbiAgICBoaWRlX2Ryb3Bkb3duczogZnVuY3Rpb24oKSB7XG4gICAgICAkKGAjbmV0d29ya19kcm9wZG93bmApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgICAgJChgI3ZsYW5faWRfZHJvcGRvd25gKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICAgICQoYCNuZXR3b3JrX2Ryb3Bkb3duYCkucmVtb3ZlQ2xhc3MoJ2QtaW5saW5lJylcbiAgICAgICQoYCN2bGFuX2lkX2Ryb3Bkb3duYCkucmVtb3ZlQ2xhc3MoJ2QtaW5saW5lJylcbiAgICB9LCBcbiAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCB0YWJsZSA9IHRoaXMuZ2V0X2FjdGl2ZV90YWJsZSgpO1xuICAgICAgdGFibGUuZGVsZXRlX2J1dHRvbl9oYW5kbGVycyh0aGlzLnNlcnZpY2VfdGFibGVfdGFiKTtcbiAgICAgIHRhYmxlLmRlc3Ryb3lfdGFibGUoKTtcbiAgICB9LFxuICAgIC8qIE1ldGhvZCB1c2VkIHRvIHN3aXRjaCBhY3RpdmUgdGFibGUgdGFiICovXG4gICAgY2xpY2tfaXRlbTogZnVuY3Rpb24oaXRlbSkge1xuICAgICAgdGhpcy50YWJfbGlzdC5mb3JFYWNoKChpKSA9PiBpLmFjdGl2ZSA9IGZhbHNlKTtcbiAgICAgIGl0ZW0uYWN0aXZlID0gdHJ1ZTtcbiAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChjaGFuZ2Vfc2VydmljZV90YWJsZV90YWJfZXZlbnQsIGl0ZW0uaWQpO1xuICAgIH0sXG4gICAgY3JlYXRlX2FjdGlvbl9idXR0b25zOiBmdW5jdGlvbihkYXRhLCB0eXBlLCBzZXJ2aWNlKSB7XG4gICAgICBjb25zdCByZWxvYWQgPSB0aGlzLnJlbG9hZF90YWJsZVxuICAgICAgY29uc3QgY3NyZiA9IHRoaXMuJHByb3BzLnBhZ2VfY3NyZlxuICAgICAgY29uc3QgdG9nZ2xlX2FsbG93ZWRfc3RhdGUgPSB7XG4gICAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgICBudG9wbmdfbWFwX21hbmFnZXIudG9nZ2xlX3N0YXRlKHNlcnZpY2UuaGFzaF9pZCwgdGhpcy4kcHJvcHMuc2VydmljZV9hY2NlcHRhbmNlWzBdLmlkLCByZWxvYWQsIGNzcmYpXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBjb25zdCB0b2dnbGVfZGVuaWVkX3N0YXRlID0ge1xuICAgICAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgbnRvcG5nX21hcF9tYW5hZ2VyLnRvZ2dsZV9zdGF0ZShzZXJ2aWNlLmhhc2hfaWQsIHRoaXMuJHByb3BzLnNlcnZpY2VfYWNjZXB0YW5jZVsxXS5pZCwgcmVsb2FkLCBjc3JmKVxuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgY29uc3QgdG9nZ2xlX3VuZGVjaWRlZF9zdGF0ZSA9IHtcbiAgICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgIG50b3BuZ19tYXBfbWFuYWdlci50b2dnbGVfc3RhdGUoc2VydmljZS5oYXNoX2lkLCB0aGlzLiRwcm9wcy5zZXJ2aWNlX2FjY2VwdGFuY2VbMl0uaWQsIHJlbG9hZCwgY3NyZilcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgaWYgKHR5cGUgIT09IFwiZGlzcGxheVwiKSByZXR1cm4gZGF0YTtcbiAgICAgIGNvbnN0IGN1cnJlbnRTdGF0dXMgPSBzZXJ2aWNlLmFjY2VwdGFuY2VcbiAgICAgIGNvbnN0IGFsbG93ZWRCdXR0b24gPSB7IGNsYXNzOiAnZHJvcGRvd24taXRlbScsIGhyZWY6ICcjJywgdGl0bGU6IHRoaXMuJHByb3BzLnNlcnZpY2VfYWNjZXB0YW5jZVswXS5sYWJlbCwgaGFuZGxlcjogdG9nZ2xlX2FsbG93ZWRfc3RhdGUgfTtcbiAgICAgIGNvbnN0IGRlbmllZEJ1dHRvbiA9IHsgY2xhc3M6ICdkcm9wZG93bi1pdGVtJywgaHJlZjogJyMnLCB0aXRsZTogdGhpcy4kcHJvcHMuc2VydmljZV9hY2NlcHRhbmNlWzFdLmxhYmVsLCBoYW5kbGVyOiB0b2dnbGVfZGVuaWVkX3N0YXRlIH07XG4gICAgICBjb25zdCB1bmRlY2lkZWRCdXR0b24gPSB7IGNsYXNzOiAnZHJvcGRvd24taXRlbSBkaXNhYmxlZCcsIGhyZWY6ICcjJywgdGl0bGU6IHRoaXMuJHByb3BzLnNlcnZpY2VfYWNjZXB0YW5jZVsyXS5sYWJlbCwgaGFuZGxlcjogdG9nZ2xlX3VuZGVjaWRlZF9zdGF0ZSB9O1xuICAgICAgXG4gICAgICBzd2l0Y2ggKGN1cnJlbnRTdGF0dXMpIHtcbiAgICAgICAgY2FzZSAwOiAvKiBBbGxvd2VkICovICAgeyBhbGxvd2VkQnV0dG9uLmNsYXNzID0gJ2Ryb3Bkb3duLWl0ZW0gYWN0aXZlJzsgYnJlYWs7IH1cbiAgICAgICAgY2FzZSAxOiAvKiBEZW5pZWQgKi8gICAgeyBkZW5pZWRCdXR0b24uY2xhc3MgPSAnZHJvcGRvd24taXRlbSBhY3RpdmUnOyBicmVhazsgfVxuICAgICAgICBjYXNlIDI6IC8qIFVuZGVjaWRlZCAqLyB7IHVuZGVjaWRlZEJ1dHRvbi5jbGFzcyA9ICdkcm9wZG93bi1pdGVtIGFjdGl2ZSBkaXNhYmxlZCc7IGJyZWFrOyB9XG4gICAgICB9XG4gICAgICByZXR1cm4gRGF0YVRhYmxlVXRpbHMuY3JlYXRlQWN0aW9uQnV0dG9ucyhbdW5kZWNpZGVkQnV0dG9uLCBhbGxvd2VkQnV0dG9uLCBkZW5pZWRCdXR0b25dKTtcbiAgICB9LFxuXG4gICAgY3JlYXRlX2FjdGlvbl9idXR0b25faGlzdG9yaWNhbF9mbG93X2xpbms6IGZ1bmN0aW9uKF8sIHR5cGUsIHJvd0RhdGEpIHtcbiAgICBsZXQgaGlzdG9yaWNhbF9mbG93X2xpbmsgPSB7XG4gICAgICBoYW5kbGVySWQ6IFwiaGlzdG9yaWNhbF9mbG93X2xpbmtcIixcbiAgICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgaGlzdG9yaWNhbF9mbG93KHJvd0RhdGEpO1xuICAgICAgfSxcbiAgICB9XG5cbiAgICByZXR1cm4gRGF0YVRhYmxlVXRpbHMuY3JlYXRlQWN0aW9uQnV0dG9ucyhbXG4gICAgICB7IGNsYXNzOiBgcG9pbnRlcmAsIGhhbmRsZXI6IGhpc3RvcmljYWxfZmxvd19saW5rLCBpY29uOiAnZmFzIGZhLXN0cmVhbScsIHRpdGxlOiBpMThuKCdkYl9leHBsb3Jlci5oaXN0b3JpY2FsX2RhdGEnKSB9LFxuICAgIF0pO1xuICAgIFxuICAgIH0sXG4gICAgZGVsZXRlX2FsbDogYXN5bmMgZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9uZXR3b3JrX21hcHMubHVhYDtcbiAgICAgIGxldCBwYXJhbXMgPSB7XG4gICAgICAgIGlmaWQ6IHRoaXMudXJsX3BhcmFtcy5pZmlkLFxuICAgICAgICBhY3Rpb246ICdyZXNldCcsXG4gICAgICAgIHBhZ2U6IHRoaXMudXJsX3BhcmFtcy5wYWdlLFxuICAgICAgICBjc3JmOiB0aGlzLiRwcm9wcy5wYWdlX2NzcmYsXG4gICAgICAgIG1hcDogdGhpcy51cmxfcGFyYW1zLm1hcFxuICAgICAgfTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxldCBoZWFkZXJzID0ge1xuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgfTtcbiAgICAgICAgYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCwgeyBtZXRob2Q6ICdwb3N0JywgaGVhZGVycywgYm9keTogSlNPTi5zdHJpbmdpZnkocGFyYW1zKSB9KTtcbiAgICAgICAgdGhpcy5yZWxvYWRfdGFibGUoKTtcbiAgICAgIH0gY2F0Y2goZXJyKSB7XG4gICAgICAgIHRoaXMucmVsb2FkX3RhYmxlKCk7ICBcbiAgICAgIH0gICAgICBcbiAgICB9LFxuICAgIHJlbG9hZF90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdGFibGUgPSB0aGlzLmdldF9hY3RpdmVfdGFibGUoKTtcbiAgICAgIE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTtcbiAgICAgIHRhYmxlLnJlbG9hZCgpO1xuICAgICAgTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpO1xuICAgIH0sXG4gICAgZ2V0X2FjdGl2ZV90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy4kcmVmc1tgdGFibGVfc2VydmljZV8ke3RoaXMuc2VydmljZV90YWJsZV90YWJ9YF07XG4gICAgfSxcbiAgICBzd2l0Y2hfdG9fc3RhbmRhcmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IG5ld191cmwgPSB0aGlzLnVybF9wYXJhbXNcbiAgICAgIG5ld191cmxbJ3ZpZXcnXSA9ICdzdGFuZGFyZCdcbiAgICAgIGRvY3VtZW50LmxvY2F0aW9uLmhyZWYgPSBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9uZXR3b3JrX21hcHMubHVhYCwgdXJsX3BhcmFtcylcbiAgICB9LFxuICAgIHN3aXRjaF90b19jZW50cmFsaXR5OiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCBuZXdfdXJsID0gdGhpcy51cmxfcGFyYW1zXG4gICAgICBuZXdfdXJsWyd2aWV3J10gPSAnY2VudHJhbGl0eSdcbiAgICAgIGRvY3VtZW50LmxvY2F0aW9uLmhyZWYgPSBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9uZXR3b3JrX21hcHMubHVhYCwgdXJsX3BhcmFtcylcbiAgICB9LFxuICAgIHNob3dfZGVsZXRlX2FsbF9kaWFsb2c6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy4kcmVmc1tcIm1vZGFsX2RlbGV0ZV9hbGxcIl0uc2hvdygpO1xuICAgIH0sICBcbiAgfSxcbn0gIFxuXG5mdW5jdGlvbiBoaXN0b3JpY2FsX2Zsb3cocm93KSB7XG4gIGNvbnN0IGNsaWVudF9pcCA9IHJvdy5jbGllbnQuc3BsaXQoXCJob3N0PVwiKVsxXS5zcGxpdChcIj5cIilbMF07XG4gIGNvbnN0IGNsaWVudCA9IGNsaWVudF9pcC5zdWJzdHJpbmcoMCwgY2xpZW50X2lwLmxlbmd0aCAtIDEpO1xuICBjb25zdCBzZXJ2ZXJfaXAgPSByb3cuc2VydmVyLnNwbGl0KFwiaG9zdD1cIilbMV0uc3BsaXQoXCI+XCIpWzBdO1xuICBjb25zdCBzZXJ2ZXIgPSBzZXJ2ZXJfaXAuc3Vic3RyaW5nKDAsIHNlcnZlcl9pcC5sZW5ndGggLSAxKTtcbiAgY29uc3QgcG9ydCA9IHJvdy5wb3J0O1xuXG4gIGNvbnN0IGVwb2NoX2JlZ2luID0gcm93LmZpcnN0X3NlZW47XG4gIGNvbnN0IGVwb2NoX2VuZCA9IHJvdy5sYXN0X3NlZW4uZXBvY2hfZW5kO1xuXG4gIGNvbnN0IHBhcmFtcyA9IHtcbiAgICBlcG9jaF9iZWdpbjogZXBvY2hfYmVnaW4sXG4gICAgZXBvY2hfZW5kOiBlcG9jaF9lbmQsXG4gICAgc3J2X2lwOiBgJHtzZXJ2ZXJ9O2VxYCxcbiAgICBjbGlfaXA6IGAke2NsaWVudH07ZXFgLFxuICAgIHNydl9wb3J0OiBgJHtwb3J0fTtlcWAsXG4gIH1cbiAgY29uc3QgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyhwYXJhbXMpO1xuICBjb25zdCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9kYl9zZWFyY2gubHVhPyR7dXJsX3BhcmFtc31gO1xuICBudG9wbmdfdXJsX21hbmFnZXIuZ29fdG9fdXJsKHVybCk7XG5cbn1cblxuZnVuY3Rpb24gc3RhcnRfZGF0YXRhYmxlKERhdGF0YWJsZVZ1ZSkge1xuICBjb25zdCBkYXRhdGFibGVCdXR0b24gPSBbXTtcbiAgbGV0IGNvbHVtbnMgPSBbXTtcbiAgbGV0IGRlZmF1bHRfc29ydGluZ19jb2x1bW5zID0gMDtcbiAgRGF0YXRhYmxlVnVlLmdldF91cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9nZXRfbWFwLmx1YWAsIHVybF9wYXJhbXMpXG4gIFxuICAvKiBNYW5hZ2UgdGhlIGJ1dHRvbnMgY2xvc2UgdG8gdGhlIHNlYXJjaCBib3ggKi9cbiAgZGF0YXRhYmxlQnV0dG9uLnB1c2goe1xuICAgIHRleHQ6ICc8aSBjbGFzcz1cImZhcyBmYS1zeW5jXCI+PC9pPicsXG4gICAgY2xhc3NOYW1lOiAnYnRuLWxpbmsnLFxuICAgIGFjdGlvbjogZnVuY3Rpb24gKGUsIGR0LCBub2RlLCBjb25maWcpIHtcbiAgICAgIERhdGF0YWJsZVZ1ZS5yZWxvYWRfdGFibGUoKTtcbiAgICB9XG4gIH0pO1xuICBcbiAgbGV0IHRtcF9wYXJhbXMgPSB1cmxfcGFyYW1zO1xuICB0bXBfcGFyYW1zWyd2aWV3J10gPSAnc3RhbmRhcmQnXG4gIFxuICBsZXQgZGVmYXVsdERhdGF0YWJsZUNvbmZpZyA9IHtcbiAgICB0YWJsZV9idXR0b25zOiBkYXRhdGFibGVCdXR0b24sXG4gICAgY29sdW1uc19jb25maWc6IFtdLFxuICAgIGRhdGFfdXJsOiBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9nZXRfbWFwLmx1YWAsIHRtcF9wYXJhbXMpLFxuICAgIGVuYWJsZV9zZWFyY2g6IHRydWUsXG4gIH07XG5cbiAgbGV0IHRhYmxlX2ZpbHRlcnMgPSBbXVxuICBmb3IgKGxldCBmaWx0ZXIgb2YgKERhdGF0YWJsZVZ1ZS4kcHJvcHMudGFibGVfZmlsdGVycyB8fCBbXSkpIHtcbiAgICBmaWx0ZXIuY2FsbGJhY2tGdW5jdGlvbiA9ICh0YWJsZSwgdmFsdWUpID0+IHtcbiAgICAgIHRtcF9wYXJhbXNbJ3ZpZXcnXSA9IERhdGF0YWJsZVZ1ZS5zZXJ2aWNlX3RhYmxlX3RhYjtcbiAgICAgIHRtcF9wYXJhbXNbZmlsdGVyLmZpbHRlck1lbnVLZXldID0gdmFsdWUuaWQ7XG4gICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoZmlsdGVyLmZpbHRlck1lbnVLZXksIHZhbHVlLmlkKTtcbiAgICAgIHRhYmxlLmFqYXgudXJsKE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL2dldF9tYXAubHVhYCwgdG1wX3BhcmFtcykpO1xuICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgdGFibGUuYWpheC5yZWxvYWQoKTtcbiAgICAgIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKTtcbiAgICB9LFxuICAgIHRhYmxlX2ZpbHRlcnMucHVzaChmaWx0ZXIpO1xuICB9XG4gIFxuICAvKiBTdGFuZGFyZCB0YWJsZSBjb25maWd1cmF0aW9uICovICBcblxuICBjb2x1bW5zID0gW1xuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImFjdGlvbnNcIiksIG5hbWU6ICdhY3Rpb25zJywgZGF0YTogJ2FjdGlvbnMnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIG9yZGVyYWJsZTogZmFsc2UsIHJlc3BvbnNpdmVQcmlvcml0eTogMCwgcmVuZGVyOiBmdW5jdGlvbiAoXywgdHlwZSwgcm93RGF0YSkge1xuICAgICAgICByZXR1cm4gRGF0YXRhYmxlVnVlLmNyZWF0ZV9hY3Rpb25fYnV0dG9uX2hpc3RvcmljYWxfZmxvd19saW5rKF8sIHR5cGUscm93RGF0YSk7XG4gICAgICB9LCBjcmVhdGVkQ2VsbDogRGF0YVRhYmxlUmVuZGVycy5hcHBseUNlbGxTdHlsZVxuICAgIH0sIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLmxhc3Rfc2VlblwiKSwgbmFtZTogJ2xhc3Rfc2VlbicsIGRhdGE6ICdsYXN0X3NlZW4nLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlciB0ZXh0LW5vd3JhcCcsIHJlbmRlcjogKGRhdGEsIHR5cGUpID0+IHsgcmV0dXJuIGRhdGEudmFsdWUgfSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UuY2xpZW50XCIpLCBuYW1lOiAnY2xpZW50JywgZGF0YTogJ2NsaWVudCcsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2Uuc2VydmVyXCIpLCBuYW1lOiAnc2VydmVyJywgZGF0YTogJ3NlcnZlcicsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UucG9ydFwiKSwgbmFtZTogJ3BvcnQnLCBkYXRhOiAncG9ydCcsICBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogNCB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLnByb3RvY29sXCIpLCBuYW1lOiAnbDdwcm90bycsIGRhdGE6ICdwcm90b2NvbCcsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAzIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UuZmlyc3Rfc2VlblwiKSwgbmFtZTogJ2ZpcnN0X3NlZW4nLCBkYXRhOiAnZmlyc3Rfc2VlbicsIHZpc2libGU6IGZhbHNlLCByZXNwb25zaXZlUHJpb3JpdHk6IDMgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5udW1fdXNlc1wiKSwgbmFtZTogJ251bV91c2VzJywgZGF0YTogJ251bV91c2VzJywgIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyIHRleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiA0IH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFwX3BhZ2UuaW5mb1wiKSwgbmFtZTogJ2luZm8nLCBkYXRhOiAnaW5mbycsIHJlc3BvbnNpdmVQcmlvcml0eTogNSB9LFxuICBdO1xuXG4gIGRlZmF1bHRfc29ydGluZ19jb2x1bW5zID0gNyAvKiBOdW0gVXNlcyAqL1xuXG4gIGlmKERhdGF0YWJsZVZ1ZS5pc19hZG1pbikge1xuICAgIGNvbHVtbnMucHVzaCh7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYXBfcGFnZS5zdGF0dXNcIiksIG5hbWU6ICdzZXJ2aWNlX2FjY2VwdGFuY2UnLCBkYXRhOiAnc2VydmljZV9hY2NlcHRhbmNlJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCBvcmRlcmFibGU6IGZhbHNlLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogKGRhdGEsIHR5cGUsIHNlcnZpY2UpID0+IHtcbiAgICAgICAgcmV0dXJuIERhdGF0YWJsZVZ1ZS5jcmVhdGVfYWN0aW9uX2J1dHRvbnMoZGF0YSwgdHlwZSwgc2VydmljZSk7XG4gICAgICB9XG4gICAgfSk7XG5cblxuICB9XG4gIFxuICAvKiBFeHRyYSB0YWJsZSBjb25maWd1cmF0aW9uICovXG4gIGxldCB0YWJsZV9jb25maWcgPSB7XG4gICAgc2VydmVyU2lkZTogdHJ1ZSxcbiAgICBvcmRlcjogW1sgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnMsICdkZXNjJyBdXVxuICB9XG4gIFxuICBsZXQgY29uZmlnRGV2aWNlcyA9IG50b3BuZ191dGlsaXR5LmNsb25lKGRlZmF1bHREYXRhdGFibGVDb25maWcpO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2J1dHRvbnMgPSBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnLnRhYmxlX2J1dHRvbnM7XG4gIGNvbmZpZ0RldmljZXMuZGF0YV91cmwgPSBgJHtjb25maWdEZXZpY2VzLmRhdGFfdXJsfWA7XG4gIGNvbmZpZ0RldmljZXMuY29sdW1uc19jb25maWcgPSBjb2x1bW5zO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2ZpbHRlcnMgPSB0YWJsZV9maWx0ZXJzO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2NvbmZpZyA9IG50b3BuZ191dGlsaXR5LmNsb25lKHRhYmxlX2NvbmZpZyk7XG4gIERhdGF0YWJsZVZ1ZS5jb25maWdfZGV2aWNlc19zdGFuZGFyZCA9IGNvbmZpZ0RldmljZXM7XG5cbiAgLyogQ2VudHJhbGl0eSB0YWJsZSBjb25maWd1cmF0aW9uICovXG5cbiAgdG1wX3BhcmFtc1sndmlldyddID0gJ2NlbnRyYWxpdHknICBcbiAgZGVmYXVsdERhdGF0YWJsZUNvbmZpZy5kYXRhX3VybCA9IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL2dldF9tYXAubHVhYCwgdG1wX3BhcmFtcylcblxuICBjb2x1bW5zID0gW1xuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLmhvc3RcIiksIG5hbWU6ICdob3N0JywgZGF0YTogJ2hvc3QnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLnRvdGFsX2VkZ2VzXCIpLCBuYW1lOiAndG90YWxfZWRnZXMnLCBkYXRhOiAndG90YWxfZWRnZXMnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLnJhbmtcIiksIG5hbWU6ICdyYW5rJywgZGF0YTogJ3JhbmsnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogMiB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLmluX2VkZ2VzXCIpLCBuYW1lOiAnaW5fZWRnZXMnLCBkYXRhOiAnaW5fZWRnZXMnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm1hcF9wYWdlLm91dF9lZGdlc1wiKSwgbmFtZTogJ291dF9lZGdlcycsIGRhdGE6ICdvdXRfZWRnZXMnLCAgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDIgfSxcbiAgXTtcbiAgXG4gIGRlZmF1bHRfc29ydGluZ19jb2x1bW5zID0gMiAvKiBSYW5rICovXG4gIHRhYmxlX2NvbmZpZy5vcmRlciA9IFtbIGRlZmF1bHRfc29ydGluZ19jb2x1bW5zLCAnZGVzYycgXV1cbiAgY29uZmlnRGV2aWNlcyA9IG50b3BuZ191dGlsaXR5LmNsb25lKGRlZmF1bHREYXRhdGFibGVDb25maWcpO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2J1dHRvbnMgPSBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnLnRhYmxlX2J1dHRvbnM7XG4gIGNvbmZpZ0RldmljZXMuZGF0YV91cmwgPSBgJHtjb25maWdEZXZpY2VzLmRhdGFfdXJsfWA7XG4gIGNvbmZpZ0RldmljZXMuY29sdW1uc19jb25maWcgPSBjb2x1bW5zO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2ZpbHRlcnMgPSB0YWJsZV9maWx0ZXJzO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2NvbmZpZyA9IG50b3BuZ191dGlsaXR5LmNsb25lKHRhYmxlX2NvbmZpZyk7XG4gIERhdGF0YWJsZVZ1ZS5jb25maWdfZGV2aWNlc19jZW50cmFsaXR5ID0gY29uZmlnRGV2aWNlcztcbn1cbjwvc2NyaXB0PlxuXG5cblxuXG5cblxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbjxkaXYgdi1pZj1cImVtcHR5X21hcFwiIGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiPlxuICB7eyBlbXB0eV9tZXNzYWdlIH19XG48L2Rpdj5cbjxkaXYgY2xhc3M9XCJkLWZsZXgganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1jZW50ZXIgcmVzaXphYmxlLXktY29udGFpbmVyXCIgc3R5bGU9XCJ3aWR0aDogMTAwJTsgaGVpZ2h0OiA2MHZoO1wiIDppZD1tYXBfaWQ+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyBvbk1vdW50ZWQsIG9uQmVmb3JlVW5tb3VudCwgcmVmIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX21hcF9tYW5hZ2VyIH0gZnJvbSAnLi4vdXRpbGl0aWVzL21hcC9udG9wbmdfdmlzX25ldHdvcmtfdXRpbHMnO1xuaW1wb3J0IHsgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLCBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tICcuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzJztcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gIGVtcHR5X21lc3NhZ2U6IFN0cmluZyxcbiAgZXZlbnRfbGlzdGVuZXJzOiBPYmplY3QsXG4gIHBhZ2VfY3NyZjogU3RyaW5nLFxuICB1cmw6IFN0cmluZyxcbiAgdXJsX3BhcmFtczogT2JqZWN0LFxuICBtYXBfaWQ6IFN0cmluZyxcbn0pO1xuXG5jb25zdCBkYXRhUmVxdWVzdCA9IHsgXG4gIGlmaWQ6IHByb3BzLnVybF9wYXJhbXMuaWZpZCwgXG4gIGFjdGlvbjogJ2xvYWRfZ3JhcGgnLCBcbiAgbWFwOiBwcm9wcy51cmxfcGFyYW1zLm1hcF9pZFxufTtcblxubGV0IG5vZGVzX2RhdGFzZXQgPSB7fTtcbmxldCBlZGdlc19kYXRhc2V0ID0ge307XG5sZXQgaGlnaGxpZ2h0QWN0aXZlID0gZmFsc2U7XG5sZXQgbmV0d29yayA9IG51bGw7XG5jb25zdCBtYXhfZW50cmllc19yZWFjaGVkID0gcmVmKGZhbHNlKTtcbmNvbnN0IGVtcHR5X21hcCA9IHJlZih0cnVlKTtcbmNvbnN0IGlzX2Rlc3Ryb3llZCA9IHJlZihmYWxzZSk7XG5jb25zdCB1cmxfcGFyYW1zID0gcmVmKHt9KTtcbmNvbnN0IGRhdGFzZXRzID0gcmVmKG51bGwpO1xuY29uc3Qgb3B0aW9ucyA9IHJlZihudWxsKTtcbmNvbnN0IGFsbF9ub2RlcyA9IHJlZihudWxsKTtcblxub25Nb3VudGVkKGFzeW5jICgpID0+IHtcbiAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocHJvcHMubWFwX2lkKTtcbiAgbG9hZF9zY2FsZSgpO1xuICBhd2FpdCByZXF1ZXN0X2luZm8oKTtcbiAgb3B0aW9ucy52YWx1ZSA9IG50b3BuZ19tYXBfbWFuYWdlci5nZXRfZGVmYXVsdF9vcHRpb25zKCk7XG4gIG5ldHdvcmsgPSBuZXcgdmlzLk5ldHdvcmsoY29udGFpbmVyLCBkYXRhc2V0cy52YWx1ZSwgb3B0aW9ucy52YWx1ZSk7XG4gIHNldF9ldmVudF9saXN0ZW5lcigpO1xufSlcblxub25CZWZvcmVVbm1vdW50KCgpID0+IHtcbiAgaWYgKGlzX2Rlc3Ryb3llZC52YWx1ZSA9PSB0cnVlKSB7IFxuICAgIHJldHVybjsgXG4gIH1cbiAgZGVzdHJveSgpO1xufSk7XG5cbmNvbnN0IGdlbmVyYXRlX2h0bWxfdG9vbHRpcCA9ICh4KSA9PiB7XG4gIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIC8qIE5lY2Vzc2FyeSwgb3RoZXJ3aXNlIGl0IHdpbGwgZ28gaW4gY29uZmxpY3Qgd2l0aCBvdGhlciBjc3MgKi9cbiAgLy9jb250YWluZXIuc3R5bGUuY29sb3IgPSBcIiMxMTExMTFcIjtcbiAgY29udGFpbmVyLmlubmVySFRNTCA9IGA8Yj4ke3gubGFiZWx9PC9iPjxicj48YnI+JHtpMThuKCdkYl9leHBsb3Jlci5ob3N0X2RhdGEnKX06ICR7eC5pZH1gO1xuICByZXR1cm4gY29udGFpbmVyO1xufVxuXG4vKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gcGVyZm9ybSB0aGUgcmVxdWVzdCAqL1xuY29uc3QgcmVxdWVzdF9pbmZvID0gYXN5bmMoKSA9PiB7XG4gIC8qIGlmIGFuIGhvc3QgaGFzIGJlZW4gZGVmaW5lZCBpbnNpZGUgdGhlIFVSTCBxdWVyeSB0aGVuIGFkZCBpdCB0byB0aGUgcmVxdWVzdCAqL1xuICB1cmxfcGFyYW1zLnZhbHVlID0gcHJvcHMudXJsX3BhcmFtcztcbiAgY29uc3QgdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKHByb3BzLnVybCwgdXJsX3BhcmFtcy52YWx1ZSk7IFxuICBhd2FpdCAkLmdldCh1cmwsIGRhdGFSZXF1ZXN0LCBhc3luYyBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgIGNvbnN0IHsgbm9kZXMsIGVkZ2VzLCBtYXhfZW50cnlfcmVhY2hlZCB9ID0gcmVzcG9uc2UucnNwO1xuICAgIG1heF9lbnRyaWVzX3JlYWNoZWQudmFsdWUgPSBtYXhfZW50cnlfcmVhY2hlZDtcbiAgICAvKiBBZGRpbmcgdG9vbHRpcCB0byBlYWNoIG5vZGUgKi9cbiAgICBub2Rlc19kYXRhc2V0ID0gbmV3IHZpcy5EYXRhU2V0KG5vZGVzLm1hcCgoeCkgPT4ge1xuICAgICAgeC50aXRsZSA9IGdlbmVyYXRlX2h0bWxfdG9vbHRpcCh4KTtcbiAgICAgIHJldHVybiB4O1xuICAgIH0pKTtcbiAgICBlZGdlc19kYXRhc2V0ID0gbmV3IHZpcy5EYXRhU2V0KGVkZ2VzKTtcbiAgICBkYXRhc2V0cy52YWx1ZSA9IHtcbiAgICAgIG5vZGVzOiBub2Rlc19kYXRhc2V0LCBcbiAgICAgIGVkZ2VzOiBlZGdlc19kYXRhc2V0XG4gICAgfTtcbiAgICBhbGxfbm9kZXMudmFsdWUgPSBub2Rlc19kYXRhc2V0LmdldCh7IHJldHVyblR5cGU6IFwiT2JqZWN0XCIgfSk7XG4gICAgZW1wdHlfbmV0d29yaygpO1xuXHR9KTtcbn07XG5cbi8qIEFkZCB0aGUgaG9zdCB0byB0aGUgdXJsIGFuZCBqdW1wIHRvIHRoZSBob3N0ICovXG5jb25zdCBqdW1wX3RvX2hvc3QgPSBhc3luYyAocGFyYW1zKSA9PiB7XG4gIGNvbnN0IGhvc3RfaW5mbyA9IHBhcmFtcy5pZC5zcGxpdCgnQCcpXG4gIHVybF9wYXJhbXMudmFsdWVbJ2hvc3QnXSA9IGhvc3RfaW5mb1swXTsgLyogSG9zdCBJUCAqL1xuICB1cmxfcGFyYW1zLnZhbHVlWyd2bGFuX2lkJ10gPSBob3N0X2luZm9bMV07IC8qIFZMQU4gSUQgKi9cbiAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCdob3N0JywgdXJsX3BhcmFtcy52YWx1ZVsnaG9zdCddKTtcbiAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCd2bGFuX2lkJywgdXJsX3BhcmFtcy52YWx1ZVsndmxhbl9pZCddKTtcbiAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfY3VzdG9tX2V2ZW50KG50b3BuZ19jdXN0b21fZXZlbnRzLkNIQU5HRV9QQUdFX1RJVExFLCBwYXJhbXMpXG4gIGF3YWl0IHJlbG9hZCgpO1xufVxuXG4vKiBJbiBjYXNlIG9mIGVtcHR5IG5ldHdvcmsgZW5hYmxlIHRoZSBcIkVtcHR5IE5ldHdvcmtcIiBtZXNzYWdlICovXG5jb25zdCBlbXB0eV9uZXR3b3JrID0gKCkgPT4ge1xuICBpZihkYXRhc2V0cy52YWx1ZT8ubm9kZXMubGVuZ3RoID09IDAgXG4gICAgJiYgZGF0YXNldHMudmFsdWU/LmVkZ2VzLmxlbmd0aCA9PSAwKSB7XG4gICAgZW1wdHlfbWFwLnZhbHVlID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBlbXB0eV9tYXAudmFsdWUgPSBmYWxzZTtcbiAgfVxufVxuXG4vKiBGaXggdGhlIHJlc2l6YWJsZSB3aWR0aC9oZWlnaHQgb2YgdGhlIGNvbnRhaW5lciAqL1xuY29uc3QgbG9hZF9zY2FsZSA9ICgpID0+IHtcbiAgY29uc3Qgb2xkU2NhbGUgPSBOdG9wVXRpbHMubG9hZEVsZW1lbnRTY2FsZSgkKGAucmVzaXphYmxlLXktY29udGFpbmVyYCkpXG5cbiAgaWYob2xkU2NhbGUgPT0gbnVsbCkge1xuICAgIGNvbnN0IHNjYWxlID0ge3dpZHRoOiAkKGAucmVzaXphYmxlLXktY29udGFpbmVyYCkud2lkdGgoKSwgaGVpZ2h0OiAkKGAucmVzaXphYmxlLXktY29udGFpbmVyYCkuaGVpZ2h0KCl9O1xuICAgIE50b3BVdGlscy5zYXZlRWxlbWVudFNjYWxlKCQodGhpcyksIHNjYWxlKTtcbiAgICByZXR1cm47XG4gIH1cblxuICAkKGAucmVzaXphYmxlLXktY29udGFpbmVyYCkud2lkdGgob2xkU2NhbGUud2lkdGgpO1xuICAkKGAucmVzaXphYmxlLXktY29udGFpbmVyYCkuaGVpZ2h0KG9sZFNjYWxlLmhlaWdodCk7XG4gICQoYC5yZXNpemFibGUteS1jb250YWluZXJgKS5vbignbW91c2V1cCcsIGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IHNjYWxlID0ge3dpZHRoOiAkKGAucmVzaXphYmxlLXktY29udGFpbmVyYCkud2lkdGgoKSwgaGVpZ2h0OiAkKGAucmVzaXphYmxlLXktY29udGFpbmVyYCkuaGVpZ2h0KCl9O1xuICAgIE50b3BVdGlscy5zYXZlRWxlbWVudFNjYWxlKCQodGhpcyksIHNjYWxlKTtcbiAgfSk7XG59ICAgIFxuXG5mdW5jdGlvbiBuZWlnaGJvdXJob29kSGlnaGxpZ2h0KHBhcmFtcykge1xuICAvLyBpZiBzb21ldGhpbmcgaXMgc2VsZWN0ZWQ6XG4gIGlmIChwYXJhbXMubm9kZXMubGVuZ3RoID4gMCkge1xuICAgIGhpZ2hsaWdodEFjdGl2ZSA9IHRydWU7XG4gICAgdmFyIGksIGo7XG4gICAgdmFyIHNlbGVjdGVkTm9kZSA9IHBhcmFtcy5ub2Rlc1swXTtcbiAgICB2YXIgZGVncmVlcyA9IDI7XG5cbiAgICAvLyBtYXJrIGFsbCBub2RlcyBhcyBoYXJkIHRvIHJlYWQuXG4gICAgZm9yICh2YXIgbm9kZUlkIGluIGFsbF9ub2Rlcy52YWx1ZSkge1xuICAgICAgaWYoIWFsbF9ub2Rlcy52YWx1ZVtub2RlSWRdLm9sZF9jb2xvcikge1xuICAgICAgICBhbGxfbm9kZXMudmFsdWVbbm9kZUlkXS5vbGRfY29sb3IgPSBcbiAgICAgICAgICBhbGxfbm9kZXMudmFsdWVbbm9kZUlkXS5jb2xvcjtcbiAgICAgIH1cbiAgICAgIGlmKCFhbGxfbm9kZXMudmFsdWVbbm9kZUlkXS5vbGRfaWNvbl9jb2xvcikge1xuICAgICAgICBhbGxfbm9kZXMudmFsdWVbbm9kZUlkXS5vbGRfaWNvbl9jb2xvciA9IFxuICAgICAgICAgIGFsbF9ub2Rlcy52YWx1ZVtub2RlSWRdLmljb247XG4gICAgICB9XG4gICAgICBhbGxfbm9kZXMudmFsdWVbbm9kZUlkXS5jb2xvciA9IFwiI2M4YzhjOFwiO1xuICAgICAgYWxsX25vZGVzLnZhbHVlW25vZGVJZF0uaWNvbiA9IHtcbiAgICAgICAgY29sb3I6IFwiI2M4YzhjOFwiXG4gICAgICB9O1xuICAgICAgaWYgKGFsbF9ub2Rlcy52YWx1ZVtub2RlSWRdLmhpZGRlbkxhYmVsID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgYWxsX25vZGVzLnZhbHVlW25vZGVJZF0uaGlkZGVuTGFiZWwgPSBhbGxfbm9kZXMudmFsdWVbbm9kZUlkXS5sYWJlbDtcbiAgICAgICAgYWxsX25vZGVzLnZhbHVlW25vZGVJZF0ubGFiZWwgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBjb25uZWN0ZWROb2RlcyA9IG5ldHdvcmsuZ2V0Q29ubmVjdGVkTm9kZXMoc2VsZWN0ZWROb2RlKTtcbiAgICB2YXIgYWxsQ29ubmVjdGVkTm9kZXMgPSBbXTtcblxuICAgIC8vIGdldCB0aGUgc2Vjb25kIGRlZ3JlZSBub2Rlc1xuICAgIGZvciAoaSA9IDE7IGkgPCBkZWdyZWVzOyBpKyspIHtcbiAgICAgIGZvciAoaiA9IDA7IGogPCBjb25uZWN0ZWROb2Rlcy5sZW5ndGg7IGorKykge1xuICAgICAgICBhbGxDb25uZWN0ZWROb2RlcyA9IGFsbENvbm5lY3RlZE5vZGVzLmNvbmNhdChcbiAgICAgICAgICBuZXR3b3JrLmdldENvbm5lY3RlZE5vZGVzKGNvbm5lY3RlZE5vZGVzW2pdKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGFsbCBmaXJzdCBkZWdyZWUgbm9kZXMgZ2V0IHRoZWlyIG93biBjb2xvciBhbmQgdGhlaXIgbGFiZWwgYmFja1xuICAgIGZvciAoaSA9IDA7IGkgPCBjb25uZWN0ZWROb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgYWxsX25vZGVzLnZhbHVlW2Nvbm5lY3RlZE5vZGVzW2ldXS5jb2xvciA9IFxuICAgICAgICBhbGxfbm9kZXMudmFsdWVbY29ubmVjdGVkTm9kZXNbaV1dLm9sZF9jb2xvcjtcbiAgICAgIGFsbF9ub2Rlcy52YWx1ZVtjb25uZWN0ZWROb2Rlc1tpXV0uaWNvbiA9IFxuICAgICAgICBhbGxfbm9kZXMudmFsdWVbY29ubmVjdGVkTm9kZXNbaV1dLm9sZF9pY29uX2NvbG9yO1xuICAgICAgaWYgKGFsbF9ub2Rlcy52YWx1ZVtjb25uZWN0ZWROb2Rlc1tpXV0uaGlkZGVuTGFiZWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBhbGxfbm9kZXMudmFsdWVbY29ubmVjdGVkTm9kZXNbaV1dLmxhYmVsID1cbiAgICAgICAgICBhbGxfbm9kZXMudmFsdWVbY29ubmVjdGVkTm9kZXNbaV1dLmhpZGRlbkxhYmVsO1xuICAgICAgICBhbGxfbm9kZXMudmFsdWVbY29ubmVjdGVkTm9kZXNbaV1dLmhpZGRlbkxhYmVsID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHRoZSBtYWluIG5vZGUgZ2V0cyBpdHMgb3duIGNvbG9yIGFuZCBpdHMgbGFiZWwgYmFjay5cbiAgICBhbGxfbm9kZXMudmFsdWVbc2VsZWN0ZWROb2RlXS5jb2xvciA9IFxuICAgICAgYWxsX25vZGVzLnZhbHVlW3NlbGVjdGVkTm9kZV0ub2xkX2NvbG9yO1xuICAgIGFsbF9ub2Rlcy52YWx1ZVtzZWxlY3RlZE5vZGVdLmljb24gPSBcbiAgICAgIGFsbF9ub2Rlcy52YWx1ZVtzZWxlY3RlZE5vZGVdLm9sZF9pY29uX2NvbG9yO1xuICAgIGlmIChhbGxfbm9kZXMudmFsdWVbc2VsZWN0ZWROb2RlXS5oaWRkZW5MYWJlbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBhbGxfbm9kZXMudmFsdWVbc2VsZWN0ZWROb2RlXS5sYWJlbCA9IGFsbF9ub2Rlcy52YWx1ZVtzZWxlY3RlZE5vZGVdLmhpZGRlbkxhYmVsO1xuICAgICAgYWxsX25vZGVzLnZhbHVlW3NlbGVjdGVkTm9kZV0uaGlkZGVuTGFiZWwgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IGVsc2UgaWYgKGhpZ2hsaWdodEFjdGl2ZSA9PT0gdHJ1ZSkge1xuICAgIC8vIHJlc2V0IGFsbCBub2Rlc1xuICAgIGZvciAodmFyIG5vZGVJZCBpbiBhbGxfbm9kZXMudmFsdWUpIHtcbiAgICAgIGFsbF9ub2Rlcy52YWx1ZVtub2RlSWRdLmNvbG9yID0gXG4gICAgICAgIGFsbF9ub2Rlcy52YWx1ZVtub2RlSWRdLm9sZF9jb2xvcjtcbiAgICAgIGFsbF9ub2Rlcy52YWx1ZVtub2RlSWRdLmljb24gPSBcbiAgICAgICAgYWxsX25vZGVzLnZhbHVlW25vZGVJZF0ub2xkX2ljb25fY29sb3I7XG4gICAgICBpZiAoYWxsX25vZGVzLnZhbHVlW25vZGVJZF0uaGlkZGVuTGFiZWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBhbGxfbm9kZXMudmFsdWVbbm9kZUlkXS5sYWJlbCA9IGFsbF9ub2Rlcy52YWx1ZVtub2RlSWRdLmhpZGRlbkxhYmVsO1xuICAgICAgICBhbGxfbm9kZXMudmFsdWVbbm9kZUlkXS5oaWRkZW5MYWJlbCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG4gICAgaGlnaGxpZ2h0QWN0aXZlID0gZmFsc2U7XG4gIH1cblxuICAvLyB0cmFuc2Zvcm0gdGhlIG9iamVjdCBpbnRvIGFuIGFycmF5XG4gIHZhciB1cGRhdGVBcnJheSA9IFtdO1xuICBmb3IgKG5vZGVJZCBpbiBhbGxfbm9kZXMudmFsdWUpIHtcbiAgICBpZiAoYWxsX25vZGVzLnZhbHVlLmhhc093blByb3BlcnR5KG5vZGVJZCkpIHtcbiAgICAgIHVwZGF0ZUFycmF5LnB1c2goYWxsX25vZGVzLnZhbHVlW25vZGVJZF0pO1xuICAgIH1cbiAgfVxuICBub2Rlc19kYXRhc2V0LnVwZGF0ZSh1cGRhdGVBcnJheSk7XG59XG5cblxuLyogU2V0IHRoZSBldmVudCBsaXN0ZXIgdXNlZCBmb3IgY2FsbGJhY2tzICovXG5jb25zdCBzZXRfZXZlbnRfbGlzdGVuZXIgPSAoKSA9PiB7XG4gIG5ldHdvcmsub24oXCJzdGFiaWxpemF0aW9uSXRlcmF0aW9uc0RvbmVcIiwgZnVuY3Rpb24oKSB7XG4gICAgbmV0d29yay5zZXRPcHRpb25zKCB7IHBoeXNpY3M6IGZhbHNlIH0gKTtcbiAgfSlcbiAgbmV0d29yay5vbihcImNsaWNrXCIsIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBuZWlnaGJvdXJob29kSGlnaGxpZ2h0KG5vZGUpO1xuICB9KTtcblxuICBuZXR3b3JrLm9uKFwiZG91YmxlQ2xpY2tcIiwgZnVuY3Rpb24gKHBhcmFtcykge1xuICAgIGp1bXBfdG9faG9zdChub2Rlc19kYXRhc2V0LmdldChwYXJhbXMubm9kZXNbMF0pKTtcbiAgfSk7XG5cbiAgbmV0d29yay5vbihcImFmdGVyRHJhd2luZ1wiLCBmdW5jdGlvbihlKSB7XG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfY3VzdG9tX2V2ZW50KG50b3BuZ19jdXN0b21fZXZlbnRzLlZJU19EQVRBX0xPQURFRCk7XG4gIH0pXG5cbiAgLyogR2l2ZW4gZXZlbnQgbGlzdGVuZXJzICovXG4gIGZvciAoY29uc3QgaXRlbSBpbiAocHJvcHMuZXZlbnRfbGlzdGVuZXJzIHx8IHt9KSkge1xuICAgIG5ldHdvcmsub24oaXRlbSwgcHJvcHMuZXZlbnRfbGlzdGVuZXJzW2l0ZW1dKTtcbiAgfVxufVxuXG4vKiBGdW5jdGlvbiB1c2VkIHRvIGF1dG9sYXlvdXQvc3RhYmlsaXplIHRoZSBuZXR3b3JrICovXG5jb25zdCBhdXRvbGF5b3V0ID0gKCkgPT4ge1xuICBpZiAobmV0d29yayA9PSBudWxsKSB7XG4gICAgY29uc29sZS5lcnJvcihcIlRoZSBuZXR3b3JrIGlzIHVuZGVmaW5lZCFcIik7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCEobmV0d29yayBpbnN0YW5jZW9mIHZpcy5OZXR3b3JrKSkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJOb3QgYSB2aXMuTmV0d29yayBpbnN0YW5jZSFcIik7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbmV0d29yay5zdGFiaWxpemUoKTtcbn1cblxuLyogRGVzdHJveSB0aGUgbmV0d29yayBpZiBpdCdzIG5vdCBudWxsICovXG5jb25zdCBkZXN0cm95ID0gKCkgPT4ge1xuICBpZihuZXR3b3JrICE9IG51bGwpXG4gICAgbmV0d29yay5kZXN0cm95KHRydWUpO1xuXG4gIGlzX2Rlc3Ryb3llZC52YWx1ZSA9IHRydWVcbn1cblxuLyogVGhpcyByZXR1cm4gdHJ1ZSBpZiB0aGUgbWF4aW11bSBudW1iZXIgb2Ygbm9kZXMvZWRnZXMgaGFzIGJlZW4gcmVhY2hlZCAqL1xuY29uc3QgaXNfbWF4X2VudHJ5X3JlYWNoZWQgPSAoKSA9PiB7XG4gIHJldHVybiBtYXhfZW50cmllc19yZWFjaGVkLnZhbHVlO1xufVxuXG4vKiBGdW5jdGlvbiB1c2VkIHRvIHVwZGF0ZSB0aGUgcGFyYW1zICovXG5jb25zdCB1cGRhdGVfdXJsX3BhcmFtcyA9IChuZXdfdXJsX3BhcmFtcykgPT4ge1xuICB1cmxfcGFyYW1zLnZhbHVlID0gbmV3X3VybF9wYXJhbXM7XG59XG5cbi8qIEZ1bmN0aW9uIHVzZWQgdG8gcmVsb2FkIHRoZSBtYXAgKi9cbmNvbnN0IHJlbG9hZCA9IGFzeW5jICgpID0+IHtcbiAgYXdhaXQgcmVxdWVzdF9pbmZvKCk7XG4gIGlmKG5ldHdvcmsgIT0gbnVsbCkge1xuICAgIC8qIFJlbG9hZCBvZiB0aGUgcGh5c2ljcyBpcyBkb25lIGR1ZSB0byBhIHBvc3NpYmxlIGJ1ZyxcbiAgICAgKiB3aXRoIG1hbnkgbm9kZXMsIHRoZSBwaHlzaWNzIGNvdWxkIHN0dWNrIGluZmluaXRlbHkgXG4gICAgICovXG4gICAgbmV0d29yay5zZXRPcHRpb25zKHsgcGh5c2ljczogb3B0aW9ucy52YWx1ZS5waHlzaWNzIH0pO1xuICAgIG5ldHdvcmsuc2V0RGF0YShkYXRhc2V0cy52YWx1ZSk7XG4gIH1cbn1cblxuXG5kZWZpbmVFeHBvc2UoeyByZWxvYWQsIGRlc3Ryb3ksIGlzX21heF9lbnRyeV9yZWFjaGVkLCBhdXRvbGF5b3V0LCB1cGRhdGVfdXJsX3BhcmFtcyB9KTtcbjwvc2NyaXB0PlxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbjxtb2RhbCBAc2hvd2VkPVwic2hvd2VkKClcIiByZWY9XCJtb2RhbF9pZFwiPlxuICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPnt7dGl0bGV9fTwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Ym9keT5cbiAgICB7e2JvZHl9fVxuICA8L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmZvb3Rlcj5cbiAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJhdXRvbGF5b3V0X1wiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+e3tfaTE4bignY29uZmlybScpfX08L2J1dHRvbj5cbiAgPC90ZW1wbGF0ZT5cbjwvbW9kYWw+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIG1vZGFsIH0gZnJvbSBcIi4vbW9kYWwudnVlXCI7XG5cbmNvbnN0IG1vZGFsX2lkID0gcmVmKG51bGwpO1xuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFsnYXV0b2xheW91dCddKTtcblxuY29uc3Qgc2hvd2VkID0gKCkgPT4ge307XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIGJvZHk6IFN0cmluZyxcbiAgICB0aXRsZTogU3RyaW5nLFxufSk7XG5cbmNvbnN0IHNob3cgPSAoKSA9PiB7XG4gICAgbW9kYWxfaWQudmFsdWUuc2hvdygpO1xufTtcblxuY29uc3QgYXV0b2xheW91dF8gPSAoKSA9PiB7XG4gICAgZW1pdCgnYXV0b2xheW91dCcpO1xuICAgIGNsb3NlKCk7XG59O1xuXG5jb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgICBtb2RhbF9pZC52YWx1ZS5jbG9zZSgpO1xufTtcblxuXG5kZWZpbmVFeHBvc2UoeyBzaG93LCBjbG9zZSB9KTtcblxub25Nb3VudGVkKCgpID0+IHtcbn0pO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbjwvc3R5bGU+XG4iLCJ7I1xuICAoQykgMjAyMiAtIG50b3Aub3JnXG4gIFRoaXMgdGVtcGxhdGUgaXMgdXNlZCBieSB0aGUgYFNlcnZpY2UgTWFwYCBwYWdlIGluc2lkZSB0aGUgYEhvc3RzYCBtZW51LiAgICBcbiN9XG5cbjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZCBjYXJkLXNoYWRvd1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwib3ZlcmxheSBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGFsaWduLWl0ZW1zLWNlbnRlciBwb3NpdGlvbi1hYnNvbHV0ZSBoLTEwMCB3LTEwMFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNwaW5uZXItYm9yZGVyIHRleHQtcHJpbWFyeSBtdC01XCIgcm9sZT1cInN0YXR1c1wiPlxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNyLW9ubHkgcG9zaXRpb24tYWJzb2x1dGVcIj5Mb2FkaW5nLi4uPC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICAgICAgPGRpdiBpZD1cInRhYmxlX3NlcnZpY2VcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1lbmQgbWItMlwiPlxuICAgICAgICAgICAgICA8YnV0dG9uIGlkPVwibWF4LWVudHJpZXMtcmVhY2hlZFwiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tbGlua1wiIDp0aXRsZT1tYXhfZW50cnlfdGl0bGUgZGlzYWJsZWQgaGlkZGVuPlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwidGV4dC1kYW5nZXIgZmEtc29saWQgZmEtdHJpYW5nbGUtZXhjbGFtYXRpb25cIj48L2k+XG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IG1zLWF1dG9cIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibS0xXCIgdi1mb3I9XCIoXywgaW5kZXgpIGluIGZpbHRlcl9saXN0XCI+XG4gICAgICAgICAgICAgICAgICA8c2VsZWN0LXNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cImFjdGl2ZV9maWx0ZXJfbGlzdFtpbmRleF1cIiA6b3B0aW9ucz1cImZpbHRlcl9saXN0W2luZGV4XVwiXG4gICAgICAgICAgICAgICAgICAgIEBzZWxlY3Rfb3B0aW9uPVwiY2xpY2tfaXRlbVwiPlxuICAgICAgICAgICAgICAgICAgPC9zZWxlY3Qtc2VhcmNoPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9XCJyZWxvYWQtZ3JhcGhcIiBjbGFzcz1cImJ0biBidG4tbGluayBidG4tcmVsb2FkLWdyYXBoXCI+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9J2ZhcyBmYS1zeW5jJz48L2k+XG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZD0nYXV0b2xheW91dCcgY2xhc3M9J2J0biBidG4tbGluayBidG4tc3RhYmlsaXplJz5cbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1tYWdpY1wiPjwvaT5cbiAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPG1vZGFsLWRlbGV0ZS1jb25maXJtIHJlZj1cIm1vZGFsX2RlbGV0ZV9hbGxcIiA6dGl0bGU9XCJ0aXRsZV9kZWxldGVcIiA6Ym9keT1cImJvZHlfZGVsZXRlXCIgQGRlbGV0ZT1cImRlbGV0ZV9hbGxcIj5cbiAgICAgICAgICAgIDwvbW9kYWwtZGVsZXRlLWNvbmZpcm0+XG5cbiAgICAgICAgICAgIDxtb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0gcmVmPVwibW9kYWxfYXV0b2xheW91dFwiIDp0aXRsZT1cInRpdGxlX2F1dG9sYXlvdXRcIiA6Ym9keT1cImJvZHlfYXV0b2xheW91dFwiXG4gICAgICAgICAgICAgIEBhdXRvbGF5b3V0PVwicmVsb2FkX21hcFwiPlxuICAgICAgICAgICAgPC9tb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0+XG5cbiAgICAgICAgICAgIDxuZXR3b3JrLW1hcCByZWY9XCJzZXJ2aWNlX21hcFwiIDplbXB0eV9tZXNzYWdlPVwibm9fc2VydmljZXNfbWVzc2FnZVwiIDpldmVudF9saXN0ZW5lcnM9XCJldmVudF9saXN0ZW5lcnNcIlxuICAgICAgICAgICAgICA6cGFnZV9jc3JmPVwicGFnZV9jc3JmXCIgOnVybD1cImdldF91cmxcIiA6dXJsX3BhcmFtcz1cInVybF9wYXJhbXNcIiA6bWFwX2lkPVwibWFwX2lkXCI+XG4gICAgICAgICAgICA8L25ldHdvcmstbWFwPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtZm9vdGVyXCI+XG4gICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9J2J0bi1kZWxldGUtYWxsJyBjbGFzcz1cImJ0biBidG4tZGFuZ2VyIG1lLTFcIj48aSBjbGFzcz0nZmFzIGZhLXRyYXNoJz48L2k+IHt7XG4gICAgICAgICAgICBpMThuKFwibWFwX3BhZ2UuZGVsZXRlX3NlcnZpY2VzXCIpIH19PC9idXR0b24+XG4gICAgICAgICAgPGEgdi1iaW5kOmhyZWY9XCJkb3dubG9hZF91cmxcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIHJvbGU9XCJidXR0b25cIiBhcmlhLWRpc2FibGVkPVwidHJ1ZVwiXG4gICAgICAgICAgICBkb3dubG9hZD1cInNlcnZpY2VfbWFwLmpzb25cIiB0YXJnZXQ9XCJfYmxhbmtcIj48aSBjbGFzcz1cImZhcyBmYS1kb3dubG9hZFwiPjwvaT48L2E+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8Tm90ZUxpc3QgOm5vdGVfbGlzdD1cIm5vdGVzXCI+IDwvTm90ZUxpc3Q+XG5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBOZXR3b3JrTWFwIH0gZnJvbSBcIi4vbmV0d29yay1tYXAudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRGVsZXRlQ29uZmlybSB9IGZyb20gXCIuL21vZGFsLWRlbGV0ZS1jb25maXJtLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbEF1dG9sYXlvdXRDb25maXJtIH0gZnJvbSBcIi4vbW9kYWwtYXV0b2xheW91dC1jb25maXJtLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiXG5pbXBvcnQgeyBudG9wbmdfZXZlbnRzX21hbmFnZXIgfSBmcm9tICcuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzJztcbmltcG9ydCBOb3RlTGlzdCBmcm9tIFwiLi9ub3RlLWxpc3QudnVlXCI7XG5jb25zdCBjaGFuZ2VfZmlsdGVyX2V2ZW50ID0gXCJjaGFuZ2VfZmlsdGVyX2V2ZW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1xuICAgICduZXR3b3JrLW1hcCc6IE5ldHdvcmtNYXAsXG4gICAgJ21vZGFsLWRlbGV0ZS1jb25maXJtJzogTW9kYWxEZWxldGVDb25maXJtLFxuICAgICdtb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0nOiBNb2RhbEF1dG9sYXlvdXRDb25maXJtLFxuICAgICdzZWxlY3Qtc2VhcmNoJzogU2VsZWN0U2VhcmNoLFxuICAgIE5vdGVMaXN0XG59LFxuICBwcm9wczoge1xuICAgIHBhZ2VfY3NyZjogU3RyaW5nLFxuICAgIGlmaWQ6IE51bWJlcixcbiAgICB1cmxfcGFyYW1zOiBPYmplY3QsXG4gICAgbWFwX2lkOiBTdHJpbmcsXG4gICAgaXNfYWRtaW46IEJvb2xlYW4sXG4gICAgYWxsX2ZpbHRlcl9saXN0OiBPYmplY3QsXG4gIH0sXG4gIC8qKlxuICAgKiBGaXJzdCBtZXRob2QgY2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjcmVhdGVkLlxuICAgKi9cbiAgY3JlYXRlZCgpIHtcbiAgICBzdGFydF92aXNfbmV0d29ya19tYXAodGhpcylcbiAgfSxcbiAgbW91bnRlZCgpIHtcbiAgICBjb25zdCBtYXhfZW50cmllc19yZWFjaGVkID0gdGhpcy5tYXhfZW50cnlfcmVhY2hlZFxuICAgIGNvbnN0IHJlbG9hZF9tYXAgPSB0aGlzLnJlbG9hZF9tYXBcbiAgICBpZiAodGhpcy4kcHJvcHMudXJsX3BhcmFtcy5ob3N0ICYmIHRoaXMuJHByb3BzLnVybF9wYXJhbXMuaG9zdCAhPSAnJykge1xuICAgICAgdGhpcy5oaWRlX2Ryb3Bkb3ducygpO1xuICAgIH1cblxuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJwYWdlX3NlcnZpY2VfbWFwXCIsIG50b3BuZ19jdXN0b21fZXZlbnRzLkNIQU5HRV9QQUdFX1RJVExFLCAobm9kZSkgPT4ge1xuICAgICAgdGhpcy5oaWRlX2Ryb3Bkb3ducygpO1xuICAgIH0pO1xuXG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudChcImNoYW5nZV9maWx0ZXJfZXZlbnRcIiwgY2hhbmdlX2ZpbHRlcl9ldmVudCwgKGZpbHRlcikgPT4ge1xuICAgICAgdGhpcy5hY3RpdmVfZmlsdGVyX2xpc3QuZm9yRWFjaCgoZmlsdGVyX2VsLCBpKSA9PiB7XG4gICAgICAgIGlmIChmaWx0ZXJfZWwuZmlsdGVyX25hbWUgPT0gZmlsdGVyLmZpbHRlcl9uYW1lKSB7XG4gICAgICAgICAgdGhpcy5hY3RpdmVfZmlsdGVyX2xpc3RbaV0gPSBmaWx0ZXI7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoZmlsdGVyLmZpbHRlcl9uYW1lLCBmaWx0ZXIua2V5KTtcbiAgICAgIHRoaXMudXJsX3BhcmFtc1tmaWx0ZXIuZmlsdGVyX25hbWVdID0gZmlsdGVyLmtleTtcbiAgICAgIHRoaXMudXBkYXRlX2FuZF9yZWxvYWRfbWFwKCk7XG4gICAgfSk7XG5cbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KHRoaXMuZ2V0X21hcCgpLCBudG9wbmdfY3VzdG9tX2V2ZW50cy5WSVNfREFUQV9MT0FERUQsIChmaWx0ZXIpID0+IHtcbiAgICAgIGlmIChtYXhfZW50cmllc19yZWFjaGVkKCkpIHtcbiAgICAgICAgJChgI21heC1lbnRyaWVzLXJlYWNoZWRgKS5yZW1vdmVBdHRyKCdoaWRkZW4nKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJChgI21heC1lbnRyaWVzLXJlYWNoZWRgKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICAgIH1cbiAgICAgIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKTtcbiAgICB9KTtcblxuICAgIC8qIFJlbW92ZSBpbnZhbGlkIGZpbHRlcnMgKi9cbiAgICBsZXQgZW50cmllcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJpZXMoKTtcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBlbnRyaWVzKSB7XG4gICAgICB0aGlzLnVybF9wYXJhbXNba2V5XSA9IHZhbHVlO1xuICAgIH1cblxuICAgIC8vdGhpcy51cGRhdGVfYW5kX3JlbG9hZF9tYXAoKVxuXG4gICAgJChgI3JlbG9hZC1ncmFwaGApLmNsaWNrKGZ1bmN0aW9uIChlKSB7XG4gICAgICByZWxvYWRfbWFwKCk7XG4gICAgfSk7XG5cbiAgICAkKFwiI2J0bi1kZWxldGUtYWxsXCIpLmNsaWNrKCgpID0+IHRoaXMuc2hvd19kZWxldGVfYWxsX2RpYWxvZygpKTtcbiAgICAkKFwiI2F1dG9sYXlvdXRcIikuY2xpY2soKCkgPT4gdGhpcy5zaG93X2F1dG9sYXlvdXRfZGlhbG9nKCkpO1xuICB9LFxuICBkYXRhKCkge1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuICAgICAgY29udGFpbmVyOiBudWxsLFxuICAgICAgdXBkYXRlX3ZpZXdfc3RhdGVfaWQ6IG51bGwsXG4gICAgICBnZXRfdXJsOiBudWxsLFxuICAgICAgZG93bmxvYWRfdXJsOiBudWxsLFxuICAgICAgZmlsdGVyX2xpc3Q6IFtdLFxuICAgICAgYWN0aXZlX2ZpbHRlcl9saXN0OiBbXSxcbiAgICAgIGV2ZW50X2xpc3RlbmVyczoge30sXG4gICAgICB0aXRsZV9kZWxldGU6IGkxOG4oJ21hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlcycpLFxuICAgICAgYm9keV9kZWxldGU6IGkxOG4oJ21hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlc19tZXNzYWdlJyksXG4gICAgICB0aXRsZV9hdXRvbGF5b3V0OiBpMThuKCdtYXBfcGFnZS5hdXRvbGF5b3V0X3NlcnZpY2VzJyksXG4gICAgICBib2R5X2F1dG9sYXlvdXQ6IGkxOG4oJ21hcF9wYWdlLmF1dG9sYXlvdXRfc2VydmljZXNfbWVzc2FnZScpLFxuICAgICAgbm9fc2VydmljZXNfbWVzc2FnZTogaTE4bignbWFwX3BhZ2Uubm9fc2VydmljZXMnKSxcbiAgICAgIG1heF9lbnRyeV90aXRsZTogaTE4bignbWF4X2VudHJpZXNfcmVhY2hlZCcpLFxuICAgICAgbm90ZXM6IFtpMThuKCdtYXBfcGFnZS5ncmFwaF9ub3RlX3NlcnZpY2VfbWFwJyldXG4gICAgfTtcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIG1hcC5kZXN0cm95KCk7XG4gICAgfSxcbiAgICAvKiBNZXRob2QgdXNlZCB0byBzd2l0Y2ggYWN0aXZlIHRhYmxlIHRhYiAqL1xuICAgIGNsaWNrX2l0ZW06IGZ1bmN0aW9uIChmaWx0ZXIpIHtcbiAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChjaGFuZ2VfZmlsdGVyX2V2ZW50LCBmaWx0ZXIpO1xuICAgIH0sXG4gICAgZ2V0X21hcDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJHJlZnNbYHNlcnZpY2VfbWFwYF07XG4gICAgfSxcbiAgICBtYXhfZW50cnlfcmVhY2hlZDogZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgcmV0dXJuIG1hcC5pc19tYXhfZW50cnlfcmVhY2hlZCgpO1xuICAgIH0sXG4gICAgcmVsb2FkX21hcDogYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgYXdhaXQgbWFwLnJlbG9hZCgpO1xuICAgIH0sXG4gICAgdXBkYXRlX2FuZF9yZWxvYWRfbWFwOiBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgbWFwID0gdGhpcy5nZXRfbWFwKCk7XG4gICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICBtYXAudXBkYXRlX3VybF9wYXJhbXModGhpcy51cmxfcGFyYW1zKVxuICAgICAgYXdhaXQgbWFwLnJlbG9hZCgpO1xuICAgIH0sXG4gICAgYXV0b2xheW91dDogZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgbWFwLmF1dG9sYXlvdXQoKTtcbiAgICB9LFxuICAgIHNob3dfZGVsZXRlX2FsbF9kaWFsb2c6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuJHJlZnNbXCJtb2RhbF9kZWxldGVfYWxsXCJdLnNob3coKTtcbiAgICB9LFxuICAgIHNob3dfYXV0b2xheW91dF9kaWFsb2c6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuJHJlZnNbXCJtb2RhbF9hdXRvbGF5b3V0XCJdLnNob3coKTtcbiAgICB9LFxuICAgIGhpZGVfZHJvcGRvd25zOiBmdW5jdGlvbiAoKSB7XG4gICAgICAkKGAjbmV0d29ya19kcm9wZG93bmApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgICAgJChgI3ZsYW5faWRfZHJvcGRvd25gKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICB9LFxuICAgIGRlbGV0ZV9hbGw6IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL25ldHdvcmtfbWFwcy5sdWFgO1xuICAgICAgbGV0IHBhcmFtcyA9IHtcbiAgICAgICAgaWZpZDogdGhpcy51cmxfcGFyYW1zLmlmaWQsXG4gICAgICAgIGFjdGlvbjogJ3Jlc2V0JyxcbiAgICAgICAgY3NyZjogdGhpcy4kcHJvcHMucGFnZV9jc3JmLFxuICAgICAgICBtYXA6IHRoaXMudXJsX3BhcmFtcy5tYXBcbiAgICAgIH07XG4gICAgICB0cnkge1xuICAgICAgICBsZXQgaGVhZGVycyA9IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIH07XG4gICAgICAgIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcykgfSk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0aGlzLnJlbG9hZF9tYXAoKTtcbiAgICAgIH1cbiAgICB9LFxuICB9LFxufVxuXG5mdW5jdGlvbiBzdGFydF92aXNfbmV0d29ya19tYXAoTmV0d29ya01hcFZ1ZSkge1xuICAvKiBGb3JtYXQgdGhlIGZpbHRlciBsaXN0LCB0byBhZGQgdGhlIGRyb3Bkb3ducyAqL1xuICBmb3IgKGNvbnN0IGZpbHRlcl9uYW1lIGluIE5ldHdvcmtNYXBWdWUuJHByb3BzLmFsbF9maWx0ZXJfbGlzdCkge1xuICAgIE5ldHdvcmtNYXBWdWUuZmlsdGVyX2xpc3QucHVzaChOZXR3b3JrTWFwVnVlLiRwcm9wcy5hbGxfZmlsdGVyX2xpc3RbZmlsdGVyX25hbWVdKTtcbiAgICBjb25zdCBhY3RpdmVfZmlsdGVyID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoZmlsdGVyX25hbWUpXG4gICAgLyogUHV0IHRoZSBmaWx0ZXIgbmFtZSBpbnRvIHRoZSBmaWx0ZXJzICovXG4gICAgZm9yIChsZXQgW18sIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhOZXR3b3JrTWFwVnVlLiRwcm9wcy5hbGxfZmlsdGVyX2xpc3RbZmlsdGVyX25hbWVdKSkge1xuICAgICAgdmFsdWVbJ2ZpbHRlcl9uYW1lJ10gPSBmaWx0ZXJfbmFtZVxuICAgICAgaWYgKGFjdGl2ZV9maWx0ZXIpIHtcbiAgICAgICAgLyogSWYgdGhlcmUgaXMgYSBmaWx0ZXIgc2VsZWN0ZWQgaW4gdGhlIHVybCBwdXNoIHRoYXQgYXMgYWN0aXZlICovXG4gICAgICAgIGlmICh2YWx1ZS5pZCA9PSBhY3RpdmVfZmlsdGVyKVxuICAgICAgICAgIE5ldHdvcmtNYXBWdWUuYWN0aXZlX2ZpbHRlcl9saXN0LnB1c2godmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogcHVzaCB0aGUgZGVmYXVsdCBmaWx0ZXIgYXMgYWN0aXZlICovXG4gICAgICAgIGlmICh2YWx1ZS5jdXJyZW50bHlfYWN0aXZlID09IHRydWUpXG4gICAgICAgICAgTmV0d29ya01hcFZ1ZS5hY3RpdmVfZmlsdGVyX2xpc3QucHVzaCh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgTmV0d29ya01hcFZ1ZS5nZXRfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvaW50ZXJmYWNlL21hcC9kYXRhLmx1YWBcbiAgTmV0d29ya01hcFZ1ZS5kb3dubG9hZF91cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoTmV0d29ya01hcFZ1ZS5nZXRfdXJsLCBOZXR3b3JrTWFwVnVlLiRwcm9wcy51cmxfcGFyYW1zKVxuICBOZXR3b3JrTWFwVnVlLmV2ZW50X2xpc3RlbmVycyA9IHt9O1xufVxuPC9zY3JpcHQ+XG5cblxuXG5cblxuXG4iLCJ7I1xuICAoQykgMjAyMiAtIG50b3Aub3JnXG4gIFRoaXMgdGVtcGxhdGUgaXMgdXNlZCBieSB0aGUgYFNlcnZpY2UgTWFwYCBwYWdlIGluc2lkZSB0aGUgYEhvc3RzYCBtZW51LiAgICBcbiN9XG5cbjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZCBjYXJkLXNoYWRvd1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwib3ZlcmxheSBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGFsaWduLWl0ZW1zLWNlbnRlciBwb3NpdGlvbi1hYnNvbHV0ZSBoLTEwMCB3LTEwMFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNwaW5uZXItYm9yZGVyIHRleHQtcHJpbWFyeSBtdC01XCIgcm9sZT1cInN0YXR1c1wiPlxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNyLW9ubHkgcG9zaXRpb24tYWJzb2x1dGVcIj5Mb2FkaW5nLi4uPC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICAgICAgPGRpdiBpZD1cInRhYmxlX3NlcnZpY2VcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1lbmQgbWItMlwiPlxuICAgICAgICAgICAgICA8YnV0dG9uIGlkPVwibWF4LWVudHJpZXMtcmVhY2hlZFwiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tbGlua1wiIDp0aXRsZT1tYXhfZW50cnlfdGl0bGUgZGlzYWJsZWQgaGlkZGVuPlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwidGV4dC1kYW5nZXIgZmEtc29saWQgZmEtdHJpYW5nbGUtZXhjbGFtYXRpb25cIj48L2k+XG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IG1zLWF1dG9cIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibS0xXCIgdi1mb3I9XCIoXywgaW5kZXgpIGluIGZpbHRlcl9saXN0XCI+XG4gICAgICAgICAgICAgICAgICA8c2VsZWN0LXNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cImFjdGl2ZV9maWx0ZXJfbGlzdFtpbmRleF1cIiA6b3B0aW9ucz1cImZpbHRlcl9saXN0W2luZGV4XVwiXG4gICAgICAgICAgICAgICAgICAgIEBzZWxlY3Rfb3B0aW9uPVwiY2xpY2tfaXRlbVwiPlxuICAgICAgICAgICAgICAgICAgPC9zZWxlY3Qtc2VhcmNoPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9XCJyZWxvYWQtZ3JhcGhcIiBjbGFzcz1cImJ0biBidG4tbGluayBidG4tcmVsb2FkLWdyYXBoXCI+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9J2ZhcyBmYS1zeW5jJz48L2k+XG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZD0nYXV0b2xheW91dCcgY2xhc3M9J2J0biBidG4tbGluayBidG4tc3RhYmlsaXplJz5cbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1tYWdpY1wiPjwvaT5cbiAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPG1vZGFsLWRlbGV0ZS1jb25maXJtIHJlZj1cIm1vZGFsX2RlbGV0ZV9hbGxcIiA6dGl0bGU9XCJ0aXRsZV9kZWxldGVcIiA6Ym9keT1cImJvZHlfZGVsZXRlXCIgQGRlbGV0ZT1cImRlbGV0ZV9hbGxcIj5cbiAgICAgICAgICAgIDwvbW9kYWwtZGVsZXRlLWNvbmZpcm0+XG5cbiAgICAgICAgICAgIDxtb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0gcmVmPVwibW9kYWxfYXV0b2xheW91dFwiIDp0aXRsZT1cInRpdGxlX2F1dG9sYXlvdXRcIiA6Ym9keT1cImJvZHlfYXV0b2xheW91dFwiXG4gICAgICAgICAgICAgIEBhdXRvbGF5b3V0PVwicmVsb2FkX21hcFwiPlxuICAgICAgICAgICAgPC9tb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0+XG5cbiAgICAgICAgICAgIDxuZXR3b3JrLW1hcCByZWY9XCJzZXJ2aWNlX21hcFwiIDplbXB0eV9tZXNzYWdlPVwibm9fc2VydmljZXNfbWVzc2FnZVwiIDpldmVudF9saXN0ZW5lcnM9XCJldmVudF9saXN0ZW5lcnNcIlxuICAgICAgICAgICAgICA6cGFnZV9jc3JmPVwicGFnZV9jc3JmXCIgOnVybD1cImdldF91cmxcIiA6dXJsX3BhcmFtcz1cInVybF9wYXJhbXNcIiA6bWFwX2lkPVwibWFwX2lkXCI+XG4gICAgICAgICAgICA8L25ldHdvcmstbWFwPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtZm9vdGVyXCI+XG4gICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9J2J0bi1kZWxldGUtYWxsJyBjbGFzcz1cImJ0biBidG4tZGFuZ2VyIG1lLTFcIj48aSBjbGFzcz0nZmFzIGZhLXRyYXNoJz48L2k+IHt7XG4gICAgICAgICAgICBpMThuKFwibWFwX3BhZ2UuZGVsZXRlX3NlcnZpY2VzXCIpIH19PC9idXR0b24+XG4gICAgICAgICAgPGEgdi1iaW5kOmhyZWY9XCJkb3dubG9hZF91cmxcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIHJvbGU9XCJidXR0b25cIiBhcmlhLWRpc2FibGVkPVwidHJ1ZVwiXG4gICAgICAgICAgICBkb3dubG9hZD1cInNlcnZpY2VfbWFwLmpzb25cIiB0YXJnZXQ9XCJfYmxhbmtcIj48aSBjbGFzcz1cImZhcyBmYS1kb3dubG9hZFwiPjwvaT48L2E+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8Tm90ZUxpc3QgOm5vdGVfbGlzdD1cIm5vdGVzXCI+IDwvTm90ZUxpc3Q+XG5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBOZXR3b3JrTWFwIH0gZnJvbSBcIi4vbmV0d29yay1tYXAudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRGVsZXRlQ29uZmlybSB9IGZyb20gXCIuL21vZGFsLWRlbGV0ZS1jb25maXJtLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbEF1dG9sYXlvdXRDb25maXJtIH0gZnJvbSBcIi4vbW9kYWwtYXV0b2xheW91dC1jb25maXJtLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiXG5pbXBvcnQgeyBudG9wbmdfZXZlbnRzX21hbmFnZXIgfSBmcm9tICcuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzJztcbmltcG9ydCBOb3RlTGlzdCBmcm9tIFwiLi9ub3RlLWxpc3QudnVlXCI7XG5jb25zdCBjaGFuZ2VfZmlsdGVyX2V2ZW50ID0gXCJjaGFuZ2VfZmlsdGVyX2V2ZW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1xuICAgICduZXR3b3JrLW1hcCc6IE5ldHdvcmtNYXAsXG4gICAgJ21vZGFsLWRlbGV0ZS1jb25maXJtJzogTW9kYWxEZWxldGVDb25maXJtLFxuICAgICdtb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0nOiBNb2RhbEF1dG9sYXlvdXRDb25maXJtLFxuICAgICdzZWxlY3Qtc2VhcmNoJzogU2VsZWN0U2VhcmNoLFxuICAgIE5vdGVMaXN0XG59LFxuICBwcm9wczoge1xuICAgIHBhZ2VfY3NyZjogU3RyaW5nLFxuICAgIGlmaWQ6IE51bWJlcixcbiAgICB1cmxfcGFyYW1zOiBPYmplY3QsXG4gICAgbWFwX2lkOiBTdHJpbmcsXG4gICAgaXNfYWRtaW46IEJvb2xlYW4sXG4gICAgYWxsX2ZpbHRlcl9saXN0OiBPYmplY3QsXG4gIH0sXG4gIC8qKlxuICAgKiBGaXJzdCBtZXRob2QgY2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjcmVhdGVkLlxuICAgKi9cbiAgY3JlYXRlZCgpIHtcbiAgICBzdGFydF92aXNfbmV0d29ya19tYXAodGhpcylcbiAgfSxcbiAgbW91bnRlZCgpIHtcbiAgICBjb25zdCBtYXhfZW50cmllc19yZWFjaGVkID0gdGhpcy5tYXhfZW50cnlfcmVhY2hlZFxuICAgIGNvbnN0IHJlbG9hZF9tYXAgPSB0aGlzLnJlbG9hZF9tYXBcbiAgICBpZiAodGhpcy4kcHJvcHMudXJsX3BhcmFtcy5ob3N0ICYmIHRoaXMuJHByb3BzLnVybF9wYXJhbXMuaG9zdCAhPSAnJykge1xuICAgICAgdGhpcy5oaWRlX2Ryb3Bkb3ducygpO1xuICAgIH1cblxuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJwYWdlX3NlcnZpY2VfbWFwXCIsIG50b3BuZ19jdXN0b21fZXZlbnRzLkNIQU5HRV9QQUdFX1RJVExFLCAobm9kZSkgPT4ge1xuICAgICAgdGhpcy5oaWRlX2Ryb3Bkb3ducygpO1xuICAgIH0pO1xuXG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudChcImNoYW5nZV9maWx0ZXJfZXZlbnRcIiwgY2hhbmdlX2ZpbHRlcl9ldmVudCwgKGZpbHRlcikgPT4ge1xuICAgICAgdGhpcy5hY3RpdmVfZmlsdGVyX2xpc3QuZm9yRWFjaCgoZmlsdGVyX2VsLCBpKSA9PiB7XG4gICAgICAgIGlmIChmaWx0ZXJfZWwuZmlsdGVyX25hbWUgPT0gZmlsdGVyLmZpbHRlcl9uYW1lKSB7XG4gICAgICAgICAgdGhpcy5hY3RpdmVfZmlsdGVyX2xpc3RbaV0gPSBmaWx0ZXI7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoZmlsdGVyLmZpbHRlcl9uYW1lLCBmaWx0ZXIua2V5KTtcbiAgICAgIHRoaXMudXJsX3BhcmFtc1tmaWx0ZXIuZmlsdGVyX25hbWVdID0gZmlsdGVyLmtleTtcbiAgICAgIHRoaXMudXBkYXRlX2FuZF9yZWxvYWRfbWFwKCk7XG4gICAgfSk7XG5cbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KHRoaXMuZ2V0X21hcCgpLCBudG9wbmdfY3VzdG9tX2V2ZW50cy5WSVNfREFUQV9MT0FERUQsIChmaWx0ZXIpID0+IHtcbiAgICAgIGlmIChtYXhfZW50cmllc19yZWFjaGVkKCkpIHtcbiAgICAgICAgJChgI21heC1lbnRyaWVzLXJlYWNoZWRgKS5yZW1vdmVBdHRyKCdoaWRkZW4nKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJChgI21heC1lbnRyaWVzLXJlYWNoZWRgKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICAgIH1cbiAgICAgIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKTtcbiAgICB9KTtcblxuICAgIC8qIFJlbW92ZSBpbnZhbGlkIGZpbHRlcnMgKi9cbiAgICBsZXQgZW50cmllcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJpZXMoKTtcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBlbnRyaWVzKSB7XG4gICAgICB0aGlzLnVybF9wYXJhbXNba2V5XSA9IHZhbHVlO1xuICAgIH1cblxuICAgIC8vdGhpcy51cGRhdGVfYW5kX3JlbG9hZF9tYXAoKVxuXG4gICAgJChgI3JlbG9hZC1ncmFwaGApLmNsaWNrKGZ1bmN0aW9uIChlKSB7XG4gICAgICByZWxvYWRfbWFwKCk7XG4gICAgfSk7XG5cbiAgICAkKFwiI2J0bi1kZWxldGUtYWxsXCIpLmNsaWNrKCgpID0+IHRoaXMuc2hvd19kZWxldGVfYWxsX2RpYWxvZygpKTtcbiAgICAkKFwiI2F1dG9sYXlvdXRcIikuY2xpY2soKCkgPT4gdGhpcy5zaG93X2F1dG9sYXlvdXRfZGlhbG9nKCkpO1xuICB9LFxuICBkYXRhKCkge1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuICAgICAgY29udGFpbmVyOiBudWxsLFxuICAgICAgdXBkYXRlX3ZpZXdfc3RhdGVfaWQ6IG51bGwsXG4gICAgICBnZXRfdXJsOiBudWxsLFxuICAgICAgZG93bmxvYWRfdXJsOiBudWxsLFxuICAgICAgZmlsdGVyX2xpc3Q6IFtdLFxuICAgICAgYWN0aXZlX2ZpbHRlcl9saXN0OiBbXSxcbiAgICAgIGV2ZW50X2xpc3RlbmVyczoge30sXG4gICAgICB0aXRsZV9kZWxldGU6IGkxOG4oJ21hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlcycpLFxuICAgICAgYm9keV9kZWxldGU6IGkxOG4oJ21hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlc19tZXNzYWdlJyksXG4gICAgICB0aXRsZV9hdXRvbGF5b3V0OiBpMThuKCdtYXBfcGFnZS5hdXRvbGF5b3V0X3NlcnZpY2VzJyksXG4gICAgICBib2R5X2F1dG9sYXlvdXQ6IGkxOG4oJ21hcF9wYWdlLmF1dG9sYXlvdXRfc2VydmljZXNfbWVzc2FnZScpLFxuICAgICAgbm9fc2VydmljZXNfbWVzc2FnZTogaTE4bignbWFwX3BhZ2Uubm9fc2VydmljZXMnKSxcbiAgICAgIG1heF9lbnRyeV90aXRsZTogaTE4bignbWF4X2VudHJpZXNfcmVhY2hlZCcpLFxuICAgICAgbm90ZXM6IFtpMThuKCdtYXBfcGFnZS5ncmFwaF9ub3RlX3NlcnZpY2VfbWFwJyldXG4gICAgfTtcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIG1hcC5kZXN0cm95KCk7XG4gICAgfSxcbiAgICAvKiBNZXRob2QgdXNlZCB0byBzd2l0Y2ggYWN0aXZlIHRhYmxlIHRhYiAqL1xuICAgIGNsaWNrX2l0ZW06IGZ1bmN0aW9uIChmaWx0ZXIpIHtcbiAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChjaGFuZ2VfZmlsdGVyX2V2ZW50LCBmaWx0ZXIpO1xuICAgIH0sXG4gICAgZ2V0X21hcDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJHJlZnNbYHNlcnZpY2VfbWFwYF07XG4gICAgfSxcbiAgICBtYXhfZW50cnlfcmVhY2hlZDogZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgcmV0dXJuIG1hcC5pc19tYXhfZW50cnlfcmVhY2hlZCgpO1xuICAgIH0sXG4gICAgcmVsb2FkX21hcDogYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgYXdhaXQgbWFwLnJlbG9hZCgpO1xuICAgIH0sXG4gICAgdXBkYXRlX2FuZF9yZWxvYWRfbWFwOiBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgbWFwID0gdGhpcy5nZXRfbWFwKCk7XG4gICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICBtYXAudXBkYXRlX3VybF9wYXJhbXModGhpcy51cmxfcGFyYW1zKVxuICAgICAgYXdhaXQgbWFwLnJlbG9hZCgpO1xuICAgIH0sXG4gICAgYXV0b2xheW91dDogZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgbWFwLmF1dG9sYXlvdXQoKTtcbiAgICB9LFxuICAgIHNob3dfZGVsZXRlX2FsbF9kaWFsb2c6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuJHJlZnNbXCJtb2RhbF9kZWxldGVfYWxsXCJdLnNob3coKTtcbiAgICB9LFxuICAgIHNob3dfYXV0b2xheW91dF9kaWFsb2c6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuJHJlZnNbXCJtb2RhbF9hdXRvbGF5b3V0XCJdLnNob3coKTtcbiAgICB9LFxuICAgIGhpZGVfZHJvcGRvd25zOiBmdW5jdGlvbiAoKSB7XG4gICAgICAkKGAjbmV0d29ya19kcm9wZG93bmApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgICAgJChgI3ZsYW5faWRfZHJvcGRvd25gKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICB9LFxuICAgIGRlbGV0ZV9hbGw6IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL25ldHdvcmtfbWFwcy5sdWFgO1xuICAgICAgbGV0IHBhcmFtcyA9IHtcbiAgICAgICAgaWZpZDogdGhpcy51cmxfcGFyYW1zLmlmaWQsXG4gICAgICAgIGFjdGlvbjogJ3Jlc2V0JyxcbiAgICAgICAgY3NyZjogdGhpcy4kcHJvcHMucGFnZV9jc3JmLFxuICAgICAgICBtYXA6IHRoaXMudXJsX3BhcmFtcy5tYXBcbiAgICAgIH07XG4gICAgICB0cnkge1xuICAgICAgICBsZXQgaGVhZGVycyA9IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIH07XG4gICAgICAgIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcykgfSk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0aGlzLnJlbG9hZF9tYXAoKTtcbiAgICAgIH1cbiAgICB9LFxuICB9LFxufVxuXG5mdW5jdGlvbiBzdGFydF92aXNfbmV0d29ya19tYXAoTmV0d29ya01hcFZ1ZSkge1xuICAvKiBGb3JtYXQgdGhlIGZpbHRlciBsaXN0LCB0byBhZGQgdGhlIGRyb3Bkb3ducyAqL1xuICBmb3IgKGNvbnN0IGZpbHRlcl9uYW1lIGluIE5ldHdvcmtNYXBWdWUuJHByb3BzLmFsbF9maWx0ZXJfbGlzdCkge1xuICAgIE5ldHdvcmtNYXBWdWUuZmlsdGVyX2xpc3QucHVzaChOZXR3b3JrTWFwVnVlLiRwcm9wcy5hbGxfZmlsdGVyX2xpc3RbZmlsdGVyX25hbWVdKTtcbiAgICBjb25zdCBhY3RpdmVfZmlsdGVyID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoZmlsdGVyX25hbWUpXG4gICAgLyogUHV0IHRoZSBmaWx0ZXIgbmFtZSBpbnRvIHRoZSBmaWx0ZXJzICovXG4gICAgZm9yIChsZXQgW18sIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhOZXR3b3JrTWFwVnVlLiRwcm9wcy5hbGxfZmlsdGVyX2xpc3RbZmlsdGVyX25hbWVdKSkge1xuICAgICAgdmFsdWVbJ2ZpbHRlcl9uYW1lJ10gPSBmaWx0ZXJfbmFtZVxuICAgICAgaWYgKGFjdGl2ZV9maWx0ZXIpIHtcbiAgICAgICAgLyogSWYgdGhlcmUgaXMgYSBmaWx0ZXIgc2VsZWN0ZWQgaW4gdGhlIHVybCBwdXNoIHRoYXQgYXMgYWN0aXZlICovXG4gICAgICAgIGlmICh2YWx1ZS5pZCA9PSBhY3RpdmVfZmlsdGVyKVxuICAgICAgICAgIE5ldHdvcmtNYXBWdWUuYWN0aXZlX2ZpbHRlcl9saXN0LnB1c2godmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogcHVzaCB0aGUgZGVmYXVsdCBmaWx0ZXIgYXMgYWN0aXZlICovXG4gICAgICAgIGlmICh2YWx1ZS5jdXJyZW50bHlfYWN0aXZlID09IHRydWUpXG4gICAgICAgICAgTmV0d29ya01hcFZ1ZS5hY3RpdmVfZmlsdGVyX2xpc3QucHVzaCh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgTmV0d29ya01hcFZ1ZS5nZXRfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvaW50ZXJmYWNlL21hcC9kYXRhLmx1YWBcbiAgTmV0d29ya01hcFZ1ZS5kb3dubG9hZF91cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoTmV0d29ya01hcFZ1ZS5nZXRfdXJsLCBOZXR3b3JrTWFwVnVlLiRwcm9wcy51cmxfcGFyYW1zKVxuICBOZXR3b3JrTWFwVnVlLmV2ZW50X2xpc3RlbmVycyA9IHt9O1xufVxuPC9zY3JpcHQ+XG5cblxuXG5cblxuXG4iLCJ7I1xuICAoQykgMjAyMiAtIG50b3Aub3JnXG4gIFRoaXMgdGVtcGxhdGUgaXMgdXNlZCBieSB0aGUgYFBlcmlvZGljaXR5IE1hcGAgcGFnZSBpbnNpZGUgdGhlIGBIb3N0c2AgbWVudS4gICAgXG4jfVxuXG48dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQgY2FyZC1zaGFkb3dcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm92ZXJsYXkganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1jZW50ZXIgcG9zaXRpb24tYWJzb2x1dGUgaC0xMDAgdy0xMDBcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzcGlubmVyLWJvcmRlciB0ZXh0LXByaW1hcnkgbXQtNVwiIHJvbGU9XCJzdGF0dXNcIj5cbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzci1vbmx5IHBvc2l0aW9uLWFic29sdXRlXCI+TG9hZGluZy4uLjwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgICAgIDxkaXYgaWQ9XCJ0YWJsZV9wZXJpb2RpY2l0eVwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWVuZCBtYi0yXCI+XG4gICAgICAgICAgICAgIDxidXR0b24gaWQ9XCJtYXgtZW50cmllcy1yZWFjaGVkXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1saW5rXCIgOnRpdGxlPW1heF9lbnRyeV90aXRsZSBkaXNhYmxlZCBoaWRkZW4+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJ0ZXh0LWRhbmdlciBmYS1zb2xpZCBmYS10cmlhbmdsZS1leGNsYW1hdGlvblwiPjwvaT5cbiAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggbXMtYXV0b1wiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtLTFcIiB2LWZvcj1cIihfLCBpbmRleCkgaW4gZmlsdGVyX2xpc3RcIj5cbiAgICAgICAgICAgICAgICAgIDxzZWxlY3Qtc2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwiYWN0aXZlX2ZpbHRlcl9saXN0W2luZGV4XVwiIDpvcHRpb25zPVwiZmlsdGVyX2xpc3RbaW5kZXhdXCJcbiAgICAgICAgICAgICAgICAgICAgQHNlbGVjdF9vcHRpb249XCJjbGlja19pdGVtXCI+XG4gICAgICAgICAgICAgICAgICA8L3NlbGVjdC1zZWFyY2g+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZD1cInJlbG9hZC1ncmFwaFwiIGNsYXNzPVwiYnRuIGJ0bi1saW5rIGJ0bi1yZWxvYWQtZ3JhcGhcIj5cbiAgICAgICAgICAgICAgICA8aSBjbGFzcz0nZmFzIGZhLXN5bmMnPjwvaT5cbiAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPSdhdXRvbGF5b3V0JyBjbGFzcz0nYnRuIGJ0bi1saW5rIGJ0bi1zdGFiaWxpemUnPlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLW1hZ2ljXCI+PC9pPlxuICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8bW9kYWwtZGVsZXRlLWNvbmZpcm0gcmVmPVwibW9kYWxfZGVsZXRlX2FsbFwiIDp0aXRsZT1cInRpdGxlX2RlbGV0ZVwiIDpib2R5PVwiYm9keV9kZWxldGVcIiBAZGVsZXRlPVwiZGVsZXRlX2FsbFwiPlxuICAgICAgICAgICAgPC9tb2RhbC1kZWxldGUtY29uZmlybT5cblxuICAgICAgICAgICAgPG1vZGFsLWF1dG9sYXlvdXQtY29uZmlybSByZWY9XCJtb2RhbF9hdXRvbGF5b3V0XCIgOnRpdGxlPVwidGl0bGVfYXV0b2xheW91dFwiIDpib2R5PVwiYm9keV9hdXRvbGF5b3V0XCJcbiAgICAgICAgICAgICAgQGF1dG9sYXlvdXQ9XCJyZWxvYWRfbWFwXCI+XG4gICAgICAgICAgICA8L21vZGFsLWF1dG9sYXlvdXQtY29uZmlybT5cblxuICAgICAgICAgICAgPG5ldHdvcmstbWFwIHJlZj1cInBlcmlvZGljaXR5X21hcFwiIDplbXB0eV9tZXNzYWdlPVwibm9fc2VydmljZXNfbWVzc2FnZVwiIDpldmVudF9saXN0ZW5lcnM9XCJldmVudF9saXN0ZW5lcnNcIlxuICAgICAgICAgICAgICA6cGFnZV9jc3JmPVwicGFnZV9jc3JmXCIgOnVybD1cImdldF91cmxcIiA6dXJsX3BhcmFtcz1cInVybF9wYXJhbXNcIiA6bWFwX2lkPVwibWFwX2lkXCI+XG4gICAgICAgICAgICA8L25ldHdvcmstbWFwPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtZm9vdGVyXCI+XG4gICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9J2J0bi1kZWxldGUtYWxsJyBjbGFzcz1cImJ0biBidG4tZGFuZ2VyIG1lLTFcIj48aSBjbGFzcz0nZmFzIGZhLXRyYXNoJz48L2k+IHt7XG4gICAgICAgICAgICBpMThuKFwibWFwX3BhZ2UuZGVsZXRlX3NlcnZpY2VzXCIpIH19PC9idXR0b24+XG4gICAgICAgICAgPGEgdi1iaW5kOmhyZWY9XCJkb3dubG9hZF91cmxcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIHJvbGU9XCJidXR0b25cIiBhcmlhLWRpc2FibGVkPVwidHJ1ZVwiXG4gICAgICAgICAgICBkb3dubG9hZD1cInBlcmlvZGljaXR5X21hcC5qc29uXCIgdGFyZ2V0PVwiX2JsYW5rXCI+PGkgY2xhc3M9XCJmYXMgZmEtZG93bmxvYWRcIj48L2k+PC9hPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPE5vdGVMaXN0IDpub3RlX2xpc3Q9XCJub3Rlc1wiPiA8L05vdGVMaXN0PlxuXG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmF1bHQgYXMgTmV0d29ya01hcCB9IGZyb20gXCIuL25ldHdvcmstbWFwLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbERlbGV0ZUNvbmZpcm0gfSBmcm9tIFwiLi9tb2RhbC1kZWxldGUtY29uZmlybS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxBdXRvbGF5b3V0Q29uZmlybSB9IGZyb20gXCIuL21vZGFsLWF1dG9sYXlvdXQtY29uZmlybS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0U2VhcmNoIH0gZnJvbSBcIi4vc2VsZWN0LXNlYXJjaC52dWVcIlxuaW1wb3J0IHsgbnRvcG5nX2V2ZW50c19tYW5hZ2VyIH0gZnJvbSAnLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcyc7XG5pbXBvcnQgTm90ZUxpc3QgZnJvbSBcIi4vbm90ZS1saXN0LnZ1ZVwiO1xuXG5jb25zdCBjaGFuZ2VfZmlsdGVyX2V2ZW50ID0gXCJjaGFuZ2VfZmlsdGVyX2V2ZW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1xuICAgICduZXR3b3JrLW1hcCc6IE5ldHdvcmtNYXAsXG4gICAgJ21vZGFsLWRlbGV0ZS1jb25maXJtJzogTW9kYWxEZWxldGVDb25maXJtLFxuICAgICdtb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0nOiBNb2RhbEF1dG9sYXlvdXRDb25maXJtLFxuICAgICdzZWxlY3Qtc2VhcmNoJzogU2VsZWN0U2VhcmNoLFxuICAgIE5vdGVMaXN0XG4gIH0sXG4gIHByb3BzOiB7XG4gICAgcGFnZV9jc3JmOiBTdHJpbmcsXG4gICAgaWZpZDogTnVtYmVyLFxuICAgIHVybF9wYXJhbXM6IE9iamVjdCxcbiAgICBtYXBfaWQ6IFN0cmluZyxcbiAgICBpc19hZG1pbjogQm9vbGVhbixcbiAgICBhbGxfZmlsdGVyX2xpc3Q6IE9iamVjdCxcbiAgfSxcbiAgLyoqXG4gICAqIEZpcnN0IG1ldGhvZCBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAqL1xuICBjcmVhdGVkKCkge1xuICAgIHN0YXJ0X3Zpc19uZXR3b3JrX21hcCh0aGlzKVxuICB9LFxuICBtb3VudGVkKCkge1xuICAgIHRoaXMudXBkYXRlZF91cmxfcGFyYW1zID0gdGhpcy4kcHJvcHMudXJsX3BhcmFtc1xuICAgIC8qIFJlbW92ZSBpbnZhbGlkIGZpbHRlcnMgKi9cbiAgICBsZXQgZW50cmllcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJpZXMoKTtcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBlbnRyaWVzKSB7XG4gICAgICB0aGlzLnVwZGF0ZWRfdXJsX3BhcmFtc1trZXldID0gdmFsdWU7XG4gICAgfVxuXG4gICAgY29uc3QgbWF4X2VudHJpZXNfcmVhY2hlZCA9IHRoaXMubWF4X2VudHJ5X3JlYWNoZWRcbiAgICBjb25zdCByZWxvYWRfbWFwID0gdGhpcy5yZWxvYWRfbWFwXG4gICAgdGhpcy51cGRhdGVfYW5kX3JlbG9hZF9tYXAoKVxuICAgIGlmICh0aGlzLiRwcm9wcy51cmxfcGFyYW1zLmhvc3QgJiYgdGhpcy4kcHJvcHMudXJsX3BhcmFtcy5ob3N0ICE9ICcnKSB7XG4gICAgICB0aGlzLmhpZGVfZHJvcGRvd25zKCk7XG4gICAgfVxuXG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudChcInBhZ2VfcGVyaW9kaWNpdHlfbWFwXCIsIG50b3BuZ19jdXN0b21fZXZlbnRzLkNIQU5HRV9QQUdFX1RJVExFLCAobm9kZSkgPT4ge1xuICAgICAgdGhpcy5oaWRlX2Ryb3Bkb3ducygpO1xuICAgIH0pO1xuXG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudChcImNoYW5nZV9maWx0ZXJfZXZlbnRcIiwgY2hhbmdlX2ZpbHRlcl9ldmVudCwgKGZpbHRlcikgPT4ge1xuICAgICAgdGhpcy5hY3RpdmVfZmlsdGVyX2xpc3QuZm9yRWFjaCgoZmlsdGVyX2VsLCBpKSA9PiB7XG4gICAgICAgIGlmIChmaWx0ZXJfZWwuZmlsdGVyX25hbWUgPT0gZmlsdGVyLmZpbHRlcl9uYW1lKSB7XG4gICAgICAgICAgdGhpcy5hY3RpdmVfZmlsdGVyX2xpc3RbaV0gPSBmaWx0ZXI7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoZmlsdGVyLmZpbHRlcl9uYW1lLCBmaWx0ZXIua2V5KTtcbiAgICAgIHRoaXMudXJsX3BhcmFtc1tmaWx0ZXIuZmlsdGVyX25hbWVdID0gZmlsdGVyLmtleTtcbiAgICAgIHRoaXMudXBkYXRlX2FuZF9yZWxvYWRfbWFwKCk7XG4gICAgfSk7XG5cbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KHRoaXMuZ2V0X21hcCgpLCBudG9wbmdfY3VzdG9tX2V2ZW50cy5WSVNfREFUQV9MT0FERUQsIChmaWx0ZXIpID0+IHtcbiAgICAgIGlmIChtYXhfZW50cmllc19yZWFjaGVkKCkpIHtcbiAgICAgICAgJChgI21heC1lbnRyaWVzLXJlYWNoZWRgKS5yZW1vdmVBdHRyKCdoaWRkZW4nKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJChgI21heC1lbnRyaWVzLXJlYWNoZWRgKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICAgIH1cbiAgICAgIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKTtcbiAgICB9KTtcblxuICAgICQoYCNyZWxvYWQtZ3JhcGhgKS5jbGljayhmdW5jdGlvbiAoZSkge1xuICAgICAgcmVsb2FkX21hcCgpO1xuICAgIH0pO1xuXG4gICAgJChcIiNidG4tZGVsZXRlLWFsbFwiKS5jbGljaygoKSA9PiB0aGlzLnNob3dfZGVsZXRlX2FsbF9kaWFsb2coKSk7XG4gICAgJChcIiNhdXRvbGF5b3V0XCIpLmNsaWNrKCgpID0+IHRoaXMuc2hvd19hdXRvbGF5b3V0X2RpYWxvZygpKTtcbiAgfSxcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG4gICAgICBjb250YWluZXI6IG51bGwsXG4gICAgICB1cGRhdGVfdmlld19zdGF0ZV9pZDogbnVsbCxcbiAgICAgIGdldF91cmw6IG51bGwsXG4gICAgICBkb3dubG9hZF91cmw6IG51bGwsXG4gICAgICB1cGRhdGVkX3VybF9wYXJhbXM6IHt9LFxuICAgICAgZmlsdGVyX2xpc3Q6IFtdLFxuICAgICAgYWN0aXZlX2ZpbHRlcl9saXN0OiBbXSxcbiAgICAgIGV2ZW50X2xpc3RlbmVyczoge30sXG4gICAgICB0aXRsZV9kZWxldGU6IGkxOG4oJ21hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlcycpLFxuICAgICAgYm9keV9kZWxldGU6IGkxOG4oJ21hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlc19tZXNzYWdlJyksXG4gICAgICB0aXRsZV9hdXRvbGF5b3V0OiBpMThuKCdtYXBfcGFnZS5hdXRvbGF5b3V0X3NlcnZpY2VzJyksXG4gICAgICBib2R5X2F1dG9sYXlvdXQ6IGkxOG4oJ21hcF9wYWdlLmF1dG9sYXlvdXRfc2VydmljZXNfbWVzc2FnZScpLFxuICAgICAgbm9fc2VydmljZXNfbWVzc2FnZTogaTE4bignbWFwX3BhZ2Uubm9fc2VydmljZXMnKSxcbiAgICAgIG1heF9lbnRyeV90aXRsZTogaTE4bignbWF4X2VudHJpZXNfcmVhY2hlZCcpLCAgICAgIFxuICAgICAgbm90ZXM6IFtpMThuKCdtYXBfcGFnZS5ncmFwaF9ub3RlX3BlcmlvZGljaXR5X21hcCcpXVxuXG4gICAgfTtcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIG1hcC5kZXN0cm95KCk7XG4gICAgfSxcbiAgICAvKiBNZXRob2QgdXNlZCB0byBzd2l0Y2ggYWN0aXZlIHRhYmxlIHRhYiAqL1xuICAgIGNsaWNrX2l0ZW06IGZ1bmN0aW9uIChmaWx0ZXIpIHtcbiAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChjaGFuZ2VfZmlsdGVyX2V2ZW50LCBmaWx0ZXIpO1xuICAgIH0sXG4gICAgZ2V0X21hcDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJHJlZnNbYHBlcmlvZGljaXR5X21hcGBdXG4gICAgfSxcbiAgICBtYXhfZW50cnlfcmVhY2hlZDogZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgcmV0dXJuIG1hcC5pc19tYXhfZW50cnlfcmVhY2hlZCgpO1xuICAgIH0sXG4gICAgcmVsb2FkX21hcDogYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgYXdhaXQgbWFwLnJlbG9hZCgpO1xuICAgIH0sXG4gICAgaGlkZV9kcm9wZG93bnM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICQoYCNuZXR3b3JrX2Ryb3Bkb3duYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgICAkKGAjdmxhbl9pZF9kcm9wZG93bmApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgIH0sXG4gICAgdXBkYXRlX2FuZF9yZWxvYWRfbWFwOiBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgbWFwID0gdGhpcy5nZXRfbWFwKCk7XG4gICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICBtYXAudXBkYXRlX3VybF9wYXJhbXModGhpcy51cGRhdGVkX3VybF9wYXJhbXMpXG4gICAgICBhd2FpdCBtYXAucmVsb2FkKCk7XG4gICAgfSxcbiAgICBhdXRvbGF5b3V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgbWFwID0gdGhpcy5nZXRfbWFwKCk7XG4gICAgICBtYXAuYXV0b2xheW91dCgpO1xuICAgIH0sXG4gICAgc2hvd19kZWxldGVfYWxsX2RpYWxvZzogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy4kcmVmc1tcIm1vZGFsX2RlbGV0ZV9hbGxcIl0uc2hvdygpO1xuICAgIH0sXG4gICAgc2hvd19hdXRvbGF5b3V0X2RpYWxvZzogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy4kcmVmc1tcIm1vZGFsX2F1dG9sYXlvdXRcIl0uc2hvdygpO1xuICAgIH0sXG4gICAgZGVsZXRlX2FsbDogYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvbmV0d29ya19tYXBzLmx1YWA7XG4gICAgICBsZXQgcGFyYW1zID0ge1xuICAgICAgICBpZmlkOiB0aGlzLnVwZGF0ZWRfdXJsX3BhcmFtcy5pZmlkLFxuICAgICAgICBhY3Rpb246ICdyZXNldCcsXG4gICAgICAgIGNzcmY6IHRoaXMuJHByb3BzLnBhZ2VfY3NyZixcbiAgICAgICAgbWFwOiB0aGlzLnVwZGF0ZWRfdXJsX3BhcmFtcy5tYXBcbiAgICAgIH07XG4gICAgICB0cnkge1xuICAgICAgICBsZXQgaGVhZGVycyA9IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIH07XG4gICAgICAgIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcykgfSk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0aGlzLnJlbG9hZF9tYXAoKTtcbiAgICAgIH1cbiAgICB9LFxuICB9LFxufVxuXG5mdW5jdGlvbiBzdGFydF92aXNfbmV0d29ya19tYXAoTmV0d29ya01hcFZ1ZSkge1xuICAvKiBGb3JtYXQgdGhlIGZpbHRlciBsaXN0LCB0byBhZGQgdGhlIGRyb3Bkb3ducyAqL1xuICBmb3IgKGNvbnN0IGZpbHRlcl9uYW1lIGluIE5ldHdvcmtNYXBWdWUuJHByb3BzLmFsbF9maWx0ZXJfbGlzdCkge1xuICAgIE5ldHdvcmtNYXBWdWUuZmlsdGVyX2xpc3QucHVzaChOZXR3b3JrTWFwVnVlLiRwcm9wcy5hbGxfZmlsdGVyX2xpc3RbZmlsdGVyX25hbWVdKTtcbiAgICBjb25zdCBhY3RpdmVfZmlsdGVyID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoZmlsdGVyX25hbWUpXG4gICAgLyogUHV0IHRoZSBmaWx0ZXIgbmFtZSBpbnRvIHRoZSBmaWx0ZXJzICovXG4gICAgZm9yIChsZXQgW18sIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhOZXR3b3JrTWFwVnVlLiRwcm9wcy5hbGxfZmlsdGVyX2xpc3RbZmlsdGVyX25hbWVdKSkge1xuICAgICAgdmFsdWVbJ2ZpbHRlcl9uYW1lJ10gPSBmaWx0ZXJfbmFtZVxuICAgICAgaWYgKGFjdGl2ZV9maWx0ZXIpIHtcbiAgICAgICAgLyogSWYgdGhlcmUgaXMgYSBmaWx0ZXIgc2VsZWN0ZWQgaW4gdGhlIHVybCBwdXNoIHRoYXQgYXMgYWN0aXZlICovXG4gICAgICAgIGlmICh2YWx1ZS5pZCA9PSBhY3RpdmVfZmlsdGVyKVxuICAgICAgICAgIE5ldHdvcmtNYXBWdWUuYWN0aXZlX2ZpbHRlcl9saXN0LnB1c2godmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogcHVzaCB0aGUgZGVmYXVsdCBmaWx0ZXIgYXMgYWN0aXZlICovXG4gICAgICAgIGlmICh2YWx1ZS5jdXJyZW50bHlfYWN0aXZlID09IHRydWUpXG4gICAgICAgICAgTmV0d29ya01hcFZ1ZS5hY3RpdmVfZmlsdGVyX2xpc3QucHVzaCh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgTmV0d29ya01hcFZ1ZS5nZXRfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvaW50ZXJmYWNlL21hcC9kYXRhLmx1YWBcbiAgTmV0d29ya01hcFZ1ZS5kb3dubG9hZF91cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoTmV0d29ya01hcFZ1ZS5nZXRfdXJsLCBOZXR3b3JrTWFwVnVlLnVwZGF0ZWRfdXJsX3BhcmFtcylcbiAgTmV0d29ya01hcFZ1ZS5ldmVudF9saXN0ZW5lcnMgPSB7fTtcbn1cbjwvc2NyaXB0PlxuXG5cblxuXG5cblxuIiwieyNcbiAgKEMpIDIwMjIgLSBudG9wLm9yZ1xuICBUaGlzIHRlbXBsYXRlIGlzIHVzZWQgYnkgdGhlIGBQZXJpb2RpY2l0eSBNYXBgIHBhZ2UgaW5zaWRlIHRoZSBgSG9zdHNgIG1lbnUuICAgIFxuI31cblxuPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wtbGctMTJcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkIGNhcmQtc2hhZG93XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJvdmVybGF5IGp1c3RpZnktY29udGVudC1jZW50ZXIgYWxpZ24taXRlbXMtY2VudGVyIHBvc2l0aW9uLWFic29sdXRlIGgtMTAwIHctMTAwXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtY2VudGVyXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwic3Bpbm5lci1ib3JkZXIgdGV4dC1wcmltYXJ5IG10LTVcIiByb2xlPVwic3RhdHVzXCI+XG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3Itb25seSBwb3NpdGlvbi1hYnNvbHV0ZVwiPkxvYWRpbmcuLi48L3NwYW4+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgICAgICA8ZGl2IGlkPVwidGFibGVfcGVyaW9kaWNpdHlcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1lbmQgbWItMlwiPlxuICAgICAgICAgICAgICA8YnV0dG9uIGlkPVwibWF4LWVudHJpZXMtcmVhY2hlZFwiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tbGlua1wiIDp0aXRsZT1tYXhfZW50cnlfdGl0bGUgZGlzYWJsZWQgaGlkZGVuPlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwidGV4dC1kYW5nZXIgZmEtc29saWQgZmEtdHJpYW5nbGUtZXhjbGFtYXRpb25cIj48L2k+XG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IG1zLWF1dG9cIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibS0xXCIgdi1mb3I9XCIoXywgaW5kZXgpIGluIGZpbHRlcl9saXN0XCI+XG4gICAgICAgICAgICAgICAgICA8c2VsZWN0LXNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cImFjdGl2ZV9maWx0ZXJfbGlzdFtpbmRleF1cIiA6b3B0aW9ucz1cImZpbHRlcl9saXN0W2luZGV4XVwiXG4gICAgICAgICAgICAgICAgICAgIEBzZWxlY3Rfb3B0aW9uPVwiY2xpY2tfaXRlbVwiPlxuICAgICAgICAgICAgICAgICAgPC9zZWxlY3Qtc2VhcmNoPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9XCJyZWxvYWQtZ3JhcGhcIiBjbGFzcz1cImJ0biBidG4tbGluayBidG4tcmVsb2FkLWdyYXBoXCI+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9J2ZhcyBmYS1zeW5jJz48L2k+XG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZD0nYXV0b2xheW91dCcgY2xhc3M9J2J0biBidG4tbGluayBidG4tc3RhYmlsaXplJz5cbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1tYWdpY1wiPjwvaT5cbiAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPG1vZGFsLWRlbGV0ZS1jb25maXJtIHJlZj1cIm1vZGFsX2RlbGV0ZV9hbGxcIiA6dGl0bGU9XCJ0aXRsZV9kZWxldGVcIiA6Ym9keT1cImJvZHlfZGVsZXRlXCIgQGRlbGV0ZT1cImRlbGV0ZV9hbGxcIj5cbiAgICAgICAgICAgIDwvbW9kYWwtZGVsZXRlLWNvbmZpcm0+XG5cbiAgICAgICAgICAgIDxtb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0gcmVmPVwibW9kYWxfYXV0b2xheW91dFwiIDp0aXRsZT1cInRpdGxlX2F1dG9sYXlvdXRcIiA6Ym9keT1cImJvZHlfYXV0b2xheW91dFwiXG4gICAgICAgICAgICAgIEBhdXRvbGF5b3V0PVwicmVsb2FkX21hcFwiPlxuICAgICAgICAgICAgPC9tb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0+XG5cbiAgICAgICAgICAgIDxuZXR3b3JrLW1hcCByZWY9XCJwZXJpb2RpY2l0eV9tYXBcIiA6ZW1wdHlfbWVzc2FnZT1cIm5vX3NlcnZpY2VzX21lc3NhZ2VcIiA6ZXZlbnRfbGlzdGVuZXJzPVwiZXZlbnRfbGlzdGVuZXJzXCJcbiAgICAgICAgICAgICAgOnBhZ2VfY3NyZj1cInBhZ2VfY3NyZlwiIDp1cmw9XCJnZXRfdXJsXCIgOnVybF9wYXJhbXM9XCJ1cmxfcGFyYW1zXCIgOm1hcF9pZD1cIm1hcF9pZFwiPlxuICAgICAgICAgICAgPC9uZXR3b3JrLW1hcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWZvb3RlclwiPlxuICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPSdidG4tZGVsZXRlLWFsbCcgY2xhc3M9XCJidG4gYnRuLWRhbmdlciBtZS0xXCI+PGkgY2xhc3M9J2ZhcyBmYS10cmFzaCc+PC9pPiB7e1xuICAgICAgICAgICAgaTE4bihcIm1hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlc1wiKSB9fTwvYnV0dG9uPlxuICAgICAgICAgIDxhIHYtYmluZDpocmVmPVwiZG93bmxvYWRfdXJsXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiByb2xlPVwiYnV0dG9uXCIgYXJpYS1kaXNhYmxlZD1cInRydWVcIlxuICAgICAgICAgICAgZG93bmxvYWQ9XCJwZXJpb2RpY2l0eV9tYXAuanNvblwiIHRhcmdldD1cIl9ibGFua1wiPjxpIGNsYXNzPVwiZmFzIGZhLWRvd25sb2FkXCI+PC9pPjwvYT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxOb3RlTGlzdCA6bm90ZV9saXN0PVwibm90ZXNcIj4gPC9Ob3RlTGlzdD5cblxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE5ldHdvcmtNYXAgfSBmcm9tIFwiLi9uZXR3b3JrLW1hcC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxEZWxldGVDb25maXJtIH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsQXV0b2xheW91dENvbmZpcm0gfSBmcm9tIFwiLi9tb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdFNlYXJjaCB9IGZyb20gXCIuL3NlbGVjdC1zZWFyY2gudnVlXCJcbmltcG9ydCB7IG50b3BuZ19ldmVudHNfbWFuYWdlciB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMnO1xuaW1wb3J0IE5vdGVMaXN0IGZyb20gXCIuL25vdGUtbGlzdC52dWVcIjtcblxuY29uc3QgY2hhbmdlX2ZpbHRlcl9ldmVudCA9IFwiY2hhbmdlX2ZpbHRlcl9ldmVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcbiAgICAnbmV0d29yay1tYXAnOiBOZXR3b3JrTWFwLFxuICAgICdtb2RhbC1kZWxldGUtY29uZmlybSc6IE1vZGFsRGVsZXRlQ29uZmlybSxcbiAgICAnbW9kYWwtYXV0b2xheW91dC1jb25maXJtJzogTW9kYWxBdXRvbGF5b3V0Q29uZmlybSxcbiAgICAnc2VsZWN0LXNlYXJjaCc6IFNlbGVjdFNlYXJjaCxcbiAgICBOb3RlTGlzdFxuICB9LFxuICBwcm9wczoge1xuICAgIHBhZ2VfY3NyZjogU3RyaW5nLFxuICAgIGlmaWQ6IE51bWJlcixcbiAgICB1cmxfcGFyYW1zOiBPYmplY3QsXG4gICAgbWFwX2lkOiBTdHJpbmcsXG4gICAgaXNfYWRtaW46IEJvb2xlYW4sXG4gICAgYWxsX2ZpbHRlcl9saXN0OiBPYmplY3QsXG4gIH0sXG4gIC8qKlxuICAgKiBGaXJzdCBtZXRob2QgY2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjcmVhdGVkLlxuICAgKi9cbiAgY3JlYXRlZCgpIHtcbiAgICBzdGFydF92aXNfbmV0d29ya19tYXAodGhpcylcbiAgfSxcbiAgbW91bnRlZCgpIHtcbiAgICB0aGlzLnVwZGF0ZWRfdXJsX3BhcmFtcyA9IHRoaXMuJHByb3BzLnVybF9wYXJhbXNcbiAgICAvKiBSZW1vdmUgaW52YWxpZCBmaWx0ZXJzICovXG4gICAgbGV0IGVudHJpZXMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyaWVzKCk7XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgZW50cmllcykge1xuICAgICAgdGhpcy51cGRhdGVkX3VybF9wYXJhbXNba2V5XSA9IHZhbHVlO1xuICAgIH1cblxuICAgIGNvbnN0IG1heF9lbnRyaWVzX3JlYWNoZWQgPSB0aGlzLm1heF9lbnRyeV9yZWFjaGVkXG4gICAgY29uc3QgcmVsb2FkX21hcCA9IHRoaXMucmVsb2FkX21hcFxuICAgIHRoaXMudXBkYXRlX2FuZF9yZWxvYWRfbWFwKClcbiAgICBpZiAodGhpcy4kcHJvcHMudXJsX3BhcmFtcy5ob3N0ICYmIHRoaXMuJHByb3BzLnVybF9wYXJhbXMuaG9zdCAhPSAnJykge1xuICAgICAgdGhpcy5oaWRlX2Ryb3Bkb3ducygpO1xuICAgIH1cblxuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJwYWdlX3BlcmlvZGljaXR5X21hcFwiLCBudG9wbmdfY3VzdG9tX2V2ZW50cy5DSEFOR0VfUEFHRV9USVRMRSwgKG5vZGUpID0+IHtcbiAgICAgIHRoaXMuaGlkZV9kcm9wZG93bnMoKTtcbiAgICB9KTtcblxuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJjaGFuZ2VfZmlsdGVyX2V2ZW50XCIsIGNoYW5nZV9maWx0ZXJfZXZlbnQsIChmaWx0ZXIpID0+IHtcbiAgICAgIHRoaXMuYWN0aXZlX2ZpbHRlcl9saXN0LmZvckVhY2goKGZpbHRlcl9lbCwgaSkgPT4ge1xuICAgICAgICBpZiAoZmlsdGVyX2VsLmZpbHRlcl9uYW1lID09IGZpbHRlci5maWx0ZXJfbmFtZSkge1xuICAgICAgICAgIHRoaXMuYWN0aXZlX2ZpbHRlcl9saXN0W2ldID0gZmlsdGVyO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKGZpbHRlci5maWx0ZXJfbmFtZSwgZmlsdGVyLmtleSk7XG4gICAgICB0aGlzLnVybF9wYXJhbXNbZmlsdGVyLmZpbHRlcl9uYW1lXSA9IGZpbHRlci5rZXk7XG4gICAgICB0aGlzLnVwZGF0ZV9hbmRfcmVsb2FkX21hcCgpO1xuICAgIH0pO1xuXG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudCh0aGlzLmdldF9tYXAoKSwgbnRvcG5nX2N1c3RvbV9ldmVudHMuVklTX0RBVEFfTE9BREVELCAoZmlsdGVyKSA9PiB7XG4gICAgICBpZiAobWF4X2VudHJpZXNfcmVhY2hlZCgpKSB7XG4gICAgICAgICQoYCNtYXgtZW50cmllcy1yZWFjaGVkYCkucmVtb3ZlQXR0cignaGlkZGVuJylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQoYCNtYXgtZW50cmllcy1yZWFjaGVkYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgICB9XG4gICAgICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG4gICAgfSk7XG5cbiAgICAkKGAjcmVsb2FkLWdyYXBoYCkuY2xpY2soZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJlbG9hZF9tYXAoKTtcbiAgICB9KTtcblxuICAgICQoXCIjYnRuLWRlbGV0ZS1hbGxcIikuY2xpY2soKCkgPT4gdGhpcy5zaG93X2RlbGV0ZV9hbGxfZGlhbG9nKCkpO1xuICAgICQoXCIjYXV0b2xheW91dFwiKS5jbGljaygoKSA9PiB0aGlzLnNob3dfYXV0b2xheW91dF9kaWFsb2coKSk7XG4gIH0sXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuICAgICAgY29udGFpbmVyOiBudWxsLFxuICAgICAgdXBkYXRlX3ZpZXdfc3RhdGVfaWQ6IG51bGwsXG4gICAgICBnZXRfdXJsOiBudWxsLFxuICAgICAgZG93bmxvYWRfdXJsOiBudWxsLFxuICAgICAgdXBkYXRlZF91cmxfcGFyYW1zOiB7fSxcbiAgICAgIGZpbHRlcl9saXN0OiBbXSxcbiAgICAgIGFjdGl2ZV9maWx0ZXJfbGlzdDogW10sXG4gICAgICBldmVudF9saXN0ZW5lcnM6IHt9LFxuICAgICAgdGl0bGVfZGVsZXRlOiBpMThuKCdtYXBfcGFnZS5kZWxldGVfc2VydmljZXMnKSxcbiAgICAgIGJvZHlfZGVsZXRlOiBpMThuKCdtYXBfcGFnZS5kZWxldGVfc2VydmljZXNfbWVzc2FnZScpLFxuICAgICAgdGl0bGVfYXV0b2xheW91dDogaTE4bignbWFwX3BhZ2UuYXV0b2xheW91dF9zZXJ2aWNlcycpLFxuICAgICAgYm9keV9hdXRvbGF5b3V0OiBpMThuKCdtYXBfcGFnZS5hdXRvbGF5b3V0X3NlcnZpY2VzX21lc3NhZ2UnKSxcbiAgICAgIG5vX3NlcnZpY2VzX21lc3NhZ2U6IGkxOG4oJ21hcF9wYWdlLm5vX3NlcnZpY2VzJyksXG4gICAgICBtYXhfZW50cnlfdGl0bGU6IGkxOG4oJ21heF9lbnRyaWVzX3JlYWNoZWQnKSwgICAgICBcbiAgICAgIG5vdGVzOiBbaTE4bignbWFwX3BhZ2UuZ3JhcGhfbm90ZV9wZXJpb2RpY2l0eV9tYXAnKV1cblxuICAgIH07XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBkZXN0cm95OiBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgbWFwID0gdGhpcy5nZXRfbWFwKCk7XG4gICAgICBtYXAuZGVzdHJveSgpO1xuICAgIH0sXG4gICAgLyogTWV0aG9kIHVzZWQgdG8gc3dpdGNoIGFjdGl2ZSB0YWJsZSB0YWIgKi9cbiAgICBjbGlja19pdGVtOiBmdW5jdGlvbiAoZmlsdGVyKSB7XG4gICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9jdXN0b21fZXZlbnQoY2hhbmdlX2ZpbHRlcl9ldmVudCwgZmlsdGVyKTtcbiAgICB9LFxuICAgIGdldF9tYXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLiRyZWZzW2BwZXJpb2RpY2l0eV9tYXBgXVxuICAgIH0sXG4gICAgbWF4X2VudHJ5X3JlYWNoZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIHJldHVybiBtYXAuaXNfbWF4X2VudHJ5X3JlYWNoZWQoKTtcbiAgICB9LFxuICAgIHJlbG9hZF9tYXA6IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTtcbiAgICAgIGxldCBtYXAgPSB0aGlzLmdldF9tYXAoKTtcbiAgICAgIGF3YWl0IG1hcC5yZWxvYWQoKTtcbiAgICB9LFxuICAgIGhpZGVfZHJvcGRvd25zOiBmdW5jdGlvbiAoKSB7XG4gICAgICAkKGAjbmV0d29ya19kcm9wZG93bmApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgICAgJChgI3ZsYW5faWRfZHJvcGRvd25gKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICB9LFxuICAgIHVwZGF0ZV9hbmRfcmVsb2FkX21hcDogYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgbWFwLnVwZGF0ZV91cmxfcGFyYW1zKHRoaXMudXBkYXRlZF91cmxfcGFyYW1zKVxuICAgICAgYXdhaXQgbWFwLnJlbG9hZCgpO1xuICAgIH0sXG4gICAgYXV0b2xheW91dDogZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgbWFwLmF1dG9sYXlvdXQoKTtcbiAgICB9LFxuICAgIHNob3dfZGVsZXRlX2FsbF9kaWFsb2c6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuJHJlZnNbXCJtb2RhbF9kZWxldGVfYWxsXCJdLnNob3coKTtcbiAgICB9LFxuICAgIHNob3dfYXV0b2xheW91dF9kaWFsb2c6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuJHJlZnNbXCJtb2RhbF9hdXRvbGF5b3V0XCJdLnNob3coKTtcbiAgICB9LFxuICAgIGRlbGV0ZV9hbGw6IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL25ldHdvcmtfbWFwcy5sdWFgO1xuICAgICAgbGV0IHBhcmFtcyA9IHtcbiAgICAgICAgaWZpZDogdGhpcy51cGRhdGVkX3VybF9wYXJhbXMuaWZpZCxcbiAgICAgICAgYWN0aW9uOiAncmVzZXQnLFxuICAgICAgICBjc3JmOiB0aGlzLiRwcm9wcy5wYWdlX2NzcmYsXG4gICAgICAgIG1hcDogdGhpcy51cGRhdGVkX3VybF9wYXJhbXMubWFwXG4gICAgICB9O1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IGhlYWRlcnMgPSB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICB9O1xuICAgICAgICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsLCB7IG1ldGhvZDogJ3Bvc3QnLCBoZWFkZXJzLCBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpIH0pO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdGhpcy5yZWxvYWRfbWFwKCk7XG4gICAgICB9XG4gICAgfSxcbiAgfSxcbn1cblxuZnVuY3Rpb24gc3RhcnRfdmlzX25ldHdvcmtfbWFwKE5ldHdvcmtNYXBWdWUpIHtcbiAgLyogRm9ybWF0IHRoZSBmaWx0ZXIgbGlzdCwgdG8gYWRkIHRoZSBkcm9wZG93bnMgKi9cbiAgZm9yIChjb25zdCBmaWx0ZXJfbmFtZSBpbiBOZXR3b3JrTWFwVnVlLiRwcm9wcy5hbGxfZmlsdGVyX2xpc3QpIHtcbiAgICBOZXR3b3JrTWFwVnVlLmZpbHRlcl9saXN0LnB1c2goTmV0d29ya01hcFZ1ZS4kcHJvcHMuYWxsX2ZpbHRlcl9saXN0W2ZpbHRlcl9uYW1lXSk7XG4gICAgY29uc3QgYWN0aXZlX2ZpbHRlciA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KGZpbHRlcl9uYW1lKVxuICAgIC8qIFB1dCB0aGUgZmlsdGVyIG5hbWUgaW50byB0aGUgZmlsdGVycyAqL1xuICAgIGZvciAobGV0IFtfLCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoTmV0d29ya01hcFZ1ZS4kcHJvcHMuYWxsX2ZpbHRlcl9saXN0W2ZpbHRlcl9uYW1lXSkpIHtcbiAgICAgIHZhbHVlWydmaWx0ZXJfbmFtZSddID0gZmlsdGVyX25hbWVcbiAgICAgIGlmIChhY3RpdmVfZmlsdGVyKSB7XG4gICAgICAgIC8qIElmIHRoZXJlIGlzIGEgZmlsdGVyIHNlbGVjdGVkIGluIHRoZSB1cmwgcHVzaCB0aGF0IGFzIGFjdGl2ZSAqL1xuICAgICAgICBpZiAodmFsdWUuaWQgPT0gYWN0aXZlX2ZpbHRlcilcbiAgICAgICAgICBOZXR3b3JrTWFwVnVlLmFjdGl2ZV9maWx0ZXJfbGlzdC5wdXNoKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIHB1c2ggdGhlIGRlZmF1bHQgZmlsdGVyIGFzIGFjdGl2ZSAqL1xuICAgICAgICBpZiAodmFsdWUuY3VycmVudGx5X2FjdGl2ZSA9PSB0cnVlKVxuICAgICAgICAgIE5ldHdvcmtNYXBWdWUuYWN0aXZlX2ZpbHRlcl9saXN0LnB1c2godmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIE5ldHdvcmtNYXBWdWUuZ2V0X3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2ludGVyZmFjZS9tYXAvZGF0YS5sdWFgXG4gIE5ldHdvcmtNYXBWdWUuZG93bmxvYWRfdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKE5ldHdvcmtNYXBWdWUuZ2V0X3VybCwgTmV0d29ya01hcFZ1ZS51cGRhdGVkX3VybF9wYXJhbXMpXG4gIE5ldHdvcmtNYXBWdWUuZXZlbnRfbGlzdGVuZXJzID0ge307XG59XG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsInsjXG4gIChDKSAyMDIyIC0gbnRvcC5vcmdcbiAgVGhpcyB0ZW1wbGF0ZSBpcyB1c2VkIGJ5IHRoZSBgQXNzZXQgTWFwYCBwYWdlIGluc2lkZSB0aGUgYEhvc3RzYCBtZW51LiAgICBcbiN9XG5cbjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZCBjYXJkLXNoYWRvd1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwib3ZlcmxheSBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGFsaWduLWl0ZW1zLWNlbnRlciBwb3NpdGlvbi1hYnNvbHV0ZSBoLTEwMCB3LTEwMFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNwaW5uZXItYm9yZGVyIHRleHQtcHJpbWFyeSBtdC01XCIgcm9sZT1cInN0YXR1c1wiPlxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNyLW9ubHkgcG9zaXRpb24tYWJzb2x1dGVcIj5Mb2FkaW5nLi4uPC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICAgICAgPGRpdiBpZD1cInRhYmxlX2Fzc2V0XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNvbnRlbnQtZW5kIG1iLTJcIj5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBpZD1cIm1heC1lbnRyaWVzLXJlYWNoZWRcIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLWxpbmtcIiA6dGl0bGU9bWF4X2VudHJ5X3RpdGxlIGRpc2FibGVkIGhpZGRlbj5cbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cInRleHQtZGFuZ2VyIGZhLXNvbGlkIGZhLXRyaWFuZ2xlLWV4Y2xhbWF0aW9uXCI+PC9pPlxuICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBtcy1hdXRvXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm0tMVwiIHYtZm9yPVwiKF8sIGluZGV4KSBpbiBmaWx0ZXJfbGlzdFwiPlxuICAgICAgICAgICAgICAgICAgPHNlbGVjdC1zZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJhY3RpdmVfZmlsdGVyX2xpc3RbaW5kZXhdXCIgOm9wdGlvbnM9XCJmaWx0ZXJfbGlzdFtpbmRleF1cIlxuICAgICAgICAgICAgICAgICAgICBAc2VsZWN0X29wdGlvbj1cImNsaWNrX2l0ZW1cIj5cbiAgICAgICAgICAgICAgICAgIDwvc2VsZWN0LXNlYXJjaD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPVwicmVsb2FkLWdyYXBoXCIgY2xhc3M9XCJidG4gYnRuLWxpbmsgYnRuLXJlbG9hZC1ncmFwaFwiPlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPSdmYXMgZmEtc3luYyc+PC9pPlxuICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9J2F1dG9sYXlvdXQnIGNsYXNzPSdidG4gYnRuLWxpbmsgYnRuLXN0YWJpbGl6ZSc+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtbWFnaWNcIj48L2k+XG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxtb2RhbC1kZWxldGUtY29uZmlybSByZWY9XCJtb2RhbF9kZWxldGVfYWxsXCIgOnRpdGxlPVwidGl0bGVfZGVsZXRlXCIgOmJvZHk9XCJib2R5X2RlbGV0ZVwiIEBkZWxldGU9XCJkZWxldGVfYWxsXCI+XG4gICAgICAgICAgICA8L21vZGFsLWRlbGV0ZS1jb25maXJtPlxuXG4gICAgICAgICAgICA8bW9kYWwtYXV0b2xheW91dC1jb25maXJtIHJlZj1cIm1vZGFsX2F1dG9sYXlvdXRcIiA6dGl0bGU9XCJ0aXRsZV9hdXRvbGF5b3V0XCIgOmJvZHk9XCJib2R5X2F1dG9sYXlvdXRcIlxuICAgICAgICAgICAgICBAYXV0b2xheW91dD1cInJlbG9hZF9tYXBcIj5cbiAgICAgICAgICAgIDwvbW9kYWwtYXV0b2xheW91dC1jb25maXJtPlxuXG4gICAgICAgICAgICA8bmV0d29yay1tYXAgcmVmPVwiYXNzZXRfbWFwXCIgOmVtcHR5X21lc3NhZ2U9XCJub19zZXJ2aWNlc19tZXNzYWdlXCIgOmV2ZW50X2xpc3RlbmVycz1cImV2ZW50X2xpc3RlbmVyc1wiXG4gICAgICAgICAgICAgIDpwYWdlX2NzcmY9XCJwYWdlX2NzcmZcIiA6dXJsPVwiZ2V0X3VybFwiIDp1cmxfcGFyYW1zPVwidXJsX3BhcmFtc1wiIDptYXBfaWQ9XCJtYXBfaWRcIj5cbiAgICAgICAgICAgIDwvbmV0d29yay1tYXA+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1mb290ZXJcIj5cbiAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZD0nYnRuLWRlbGV0ZS1hbGwnIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXIgbWUtMVwiPjxpIGNsYXNzPSdmYXMgZmEtdHJhc2gnPjwvaT4ge3tcbiAgICAgICAgICAgIGkxOG4oXCJtYXBfcGFnZS5kZWxldGVfc2VydmljZXNcIikgfX08L2J1dHRvbj5cbiAgICAgICAgICA8YSB2LWJpbmQ6aHJlZj1cImRvd25sb2FkX3VybFwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgcm9sZT1cImJ1dHRvblwiIGFyaWEtZGlzYWJsZWQ9XCJ0cnVlXCJcbiAgICAgICAgICAgIGRvd25sb2FkPVwiYXNzZXRfbWFwLmpzb25cIiB0YXJnZXQ9XCJfYmxhbmtcIj48aSBjbGFzcz1cImZhcyBmYS1kb3dubG9hZFwiPjwvaT48L2E+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+ICAgIFxuICAgICAgPE5vdGVMaXN0IDpub3RlX2xpc3Q9XCJub3Rlc1wiPiA8L05vdGVMaXN0PlxuXG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmF1bHQgYXMgTmV0d29ya01hcCB9IGZyb20gXCIuL25ldHdvcmstbWFwLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbERlbGV0ZUNvbmZpcm0gfSBmcm9tIFwiLi9tb2RhbC1kZWxldGUtY29uZmlybS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxBdXRvbGF5b3V0Q29uZmlybSB9IGZyb20gXCIuL21vZGFsLWF1dG9sYXlvdXQtY29uZmlybS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0U2VhcmNoIH0gZnJvbSBcIi4vc2VsZWN0LXNlYXJjaC52dWVcIlxuaW1wb3J0IHsgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLCBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tICcuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzJztcbmltcG9ydCBOb3RlTGlzdCBmcm9tIFwiLi9ub3RlLWxpc3QudnVlXCI7XG5jb25zdCBjaGFuZ2VfZmlsdGVyX2V2ZW50ID0gXCJjaGFuZ2VfZmlsdGVyX2V2ZW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1xuICAgICduZXR3b3JrLW1hcCc6IE5ldHdvcmtNYXAsXG4gICAgJ21vZGFsLWRlbGV0ZS1jb25maXJtJzogTW9kYWxEZWxldGVDb25maXJtLFxuICAgICdtb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0nOiBNb2RhbEF1dG9sYXlvdXRDb25maXJtLFxuICAgICdzZWxlY3Qtc2VhcmNoJzogU2VsZWN0U2VhcmNoLFxuICAgIE5vdGVMaXN0XG4gIH0sXG4gIHByb3BzOiB7XG4gICAgcGFnZV9jc3JmOiBTdHJpbmcsXG4gICAgaWZpZDogTnVtYmVyLFxuICAgIHVybF9wYXJhbXM6IE9iamVjdCxcbiAgICBtYXBfaWQ6IFN0cmluZyxcbiAgICBpc19hZG1pbjogQm9vbGVhbixcbiAgICBhbGxfZmlsdGVyX2xpc3Q6IE9iamVjdCxcbiAgfSxcbiAgLyoqXG4gICAqIEZpcnN0IG1ldGhvZCBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAqL1xuICBjcmVhdGVkKCkge1xuICAgIHN0YXJ0X3Zpc19uZXR3b3JrX21hcCh0aGlzKVxuICB9LFxuICBtb3VudGVkKCkge1xuICAgIGNvbnN0IG1heF9lbnRyaWVzX3JlYWNoZWQgPSB0aGlzLm1heF9lbnRyeV9yZWFjaGVkXG4gICAgY29uc3QgcmVsb2FkX21hcCA9IHRoaXMucmVsb2FkX21hcFxuICAgIGlmICh0aGlzLiRwcm9wcy51cmxfcGFyYW1zLmhvc3QgJiYgdGhpcy4kcHJvcHMudXJsX3BhcmFtcy5ob3N0ICE9ICcnKSB7XG4gICAgICB0aGlzLmhpZGVfZHJvcGRvd25zKCk7XG4gICAgfVxuXG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudChcInBhZ2Vfc2VydmljZV9tYXBcIiwgbnRvcG5nX2N1c3RvbV9ldmVudHMuQ0hBTkdFX1BBR0VfVElUTEUsIChub2RlKSA9PiB7XG4gICAgICB0aGlzLmhpZGVfZHJvcGRvd25zKCk7XG4gICAgfSk7XG5cbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KFwiY2hhbmdlX2ZpbHRlcl9ldmVudFwiLCBjaGFuZ2VfZmlsdGVyX2V2ZW50LCAoZmlsdGVyKSA9PiB7XG4gICAgICB0aGlzLmFjdGl2ZV9maWx0ZXJfbGlzdC5mb3JFYWNoKChmaWx0ZXJfZWwsIGkpID0+IHtcbiAgICAgICAgaWYgKGZpbHRlcl9lbC5maWx0ZXJfbmFtZSA9PSBmaWx0ZXIuZmlsdGVyX25hbWUpIHtcbiAgICAgICAgICB0aGlzLmFjdGl2ZV9maWx0ZXJfbGlzdFtpXSA9IGZpbHRlcjtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChmaWx0ZXIuZmlsdGVyX25hbWUsIGZpbHRlci5rZXkpO1xuICAgICAgdGhpcy51cmxfcGFyYW1zW2ZpbHRlci5maWx0ZXJfbmFtZV0gPSBmaWx0ZXIua2V5O1xuICAgICAgdGhpcy51cGRhdGVfYW5kX3JlbG9hZF9tYXAoKTtcbiAgICB9KTtcblxuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQodGhpcy5nZXRfbWFwKCksIG50b3BuZ19jdXN0b21fZXZlbnRzLlZJU19EQVRBX0xPQURFRCwgKGZpbHRlcikgPT4ge1xuICAgICAgaWYgKG1heF9lbnRyaWVzX3JlYWNoZWQoKSkge1xuICAgICAgICAkKGAjbWF4LWVudHJpZXMtcmVhY2hlZGApLnJlbW92ZUF0dHIoJ2hpZGRlbicpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkKGAjbWF4LWVudHJpZXMtcmVhY2hlZGApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgICAgfVxuXG4gICAgICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG4gICAgfSk7XG5cbiAgICAvKiBSZW1vdmUgaW52YWxpZCBmaWx0ZXJzICovXG4gICAgbGV0IGVudHJpZXMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyaWVzKCk7XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgZW50cmllcykge1xuICAgICAgdGhpcy51cmxfcGFyYW1zW2tleV0gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICAkKGAjcmVsb2FkLWdyYXBoYCkuY2xpY2soZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJlbG9hZF9tYXAoKTtcbiAgICB9KTtcblxuICAgICQoXCIjYnRuLWRlbGV0ZS1hbGxcIikuY2xpY2soKCkgPT4gdGhpcy5zaG93X2RlbGV0ZV9hbGxfZGlhbG9nKCkpO1xuICAgICQoXCIjYXV0b2xheW91dFwiKS5jbGljaygoKSA9PiB0aGlzLnNob3dfYXV0b2xheW91dF9kaWFsb2coKSk7XG4gIH0sXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuICAgICAgY29udGFpbmVyOiBudWxsLFxuICAgICAgdXBkYXRlX3ZpZXdfc3RhdGVfaWQ6IG51bGwsXG4gICAgICBnZXRfdXJsOiBudWxsLFxuICAgICAgZG93bmxvYWRfdXJsOiBudWxsLFxuICAgICAgZmlsdGVyX2xpc3Q6IFtdLFxuICAgICAgYWN0aXZlX2ZpbHRlcl9saXN0OiBbXSxcbiAgICAgIGV2ZW50X2xpc3RlbmVyczoge30sXG4gICAgICB0aXRsZV9kZWxldGU6IGkxOG4oJ21hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlcycpLFxuICAgICAgYm9keV9kZWxldGU6IGkxOG4oJ21hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlc19tZXNzYWdlJyksXG4gICAgICB0aXRsZV9hdXRvbGF5b3V0OiBpMThuKCdtYXBfcGFnZS5hdXRvbGF5b3V0X3NlcnZpY2VzJyksXG4gICAgICBib2R5X2F1dG9sYXlvdXQ6IGkxOG4oJ21hcF9wYWdlLmF1dG9sYXlvdXRfc2VydmljZXNfbWVzc2FnZScpLFxuICAgICAgbm9fc2VydmljZXNfbWVzc2FnZTogaTE4bignbWFwX3BhZ2Uubm9fc2VydmljZXMnKSxcbiAgICAgIG1heF9lbnRyeV90aXRsZTogaTE4bignbWF4X2VudHJpZXNfcmVhY2hlZCcpLFxuICAgICAgbm90ZXM6IFtpMThuKCdtYXBfcGFnZS5ncmFwaF9ub3RlX2Fzc2V0X21hcCcpXSxcbiAgICB9O1xuICB9LFxuICBtZXRob2RzOiB7XG4gICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgbWFwLmRlc3Ryb3koKTtcbiAgICB9LFxuICAgIC8qIE1ldGhvZCB1c2VkIHRvIHN3aXRjaCBhY3RpdmUgdGFibGUgdGFiICovXG4gICAgY2xpY2tfaXRlbTogZnVuY3Rpb24gKGZpbHRlcikge1xuICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfY3VzdG9tX2V2ZW50KGNoYW5nZV9maWx0ZXJfZXZlbnQsIGZpbHRlcik7XG4gICAgfSxcbiAgICBnZXRfbWFwOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy4kcmVmc1tgYXNzZXRfbWFwYF07XG4gICAgfSxcbiAgICBoaWRlX2Ryb3Bkb3duczogZnVuY3Rpb24gKCkge1xuICAgICAgJChgI25ldHdvcmtfZHJvcGRvd25gKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICAgICQoYCN2bGFuX2lkX2Ryb3Bkb3duYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgfSxcbiAgICBtYXhfZW50cnlfcmVhY2hlZDogZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgcmV0dXJuIG1hcC5pc19tYXhfZW50cnlfcmVhY2hlZCgpO1xuICAgIH0sXG4gICAgcmVsb2FkX21hcDogYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgYXdhaXQgbWFwLnJlbG9hZCgpO1xuICAgIH0sXG4gICAgdXBkYXRlX2FuZF9yZWxvYWRfbWFwOiBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgbWFwID0gdGhpcy5nZXRfbWFwKCk7XG4gICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICBtYXAudXBkYXRlX3VybF9wYXJhbXModGhpcy51cmxfcGFyYW1zKVxuICAgICAgYXdhaXQgbWFwLnJlbG9hZCgpO1xuICAgIH0sXG4gICAgYXV0b2xheW91dDogZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgbWFwLmF1dG9sYXlvdXQoKTtcbiAgICB9LFxuICAgIHNob3dfZGVsZXRlX2FsbF9kaWFsb2c6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuJHJlZnNbXCJtb2RhbF9kZWxldGVfYWxsXCJdLnNob3coKTtcbiAgICB9LFxuICAgIHNob3dfYXV0b2xheW91dF9kaWFsb2c6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuJHJlZnNbXCJtb2RhbF9hdXRvbGF5b3V0XCJdLnNob3coKTtcbiAgICB9LFxuICAgIGRlbGV0ZV9hbGw6IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL25ldHdvcmtfbWFwcy5sdWFgO1xuICAgICAgbGV0IHBhcmFtcyA9IHtcbiAgICAgICAgaWZpZDogdGhpcy51cmxfcGFyYW1zLmlmaWQsXG4gICAgICAgIGFjdGlvbjogJ3Jlc2V0JyxcbiAgICAgICAgY3NyZjogdGhpcy4kcHJvcHMucGFnZV9jc3JmLFxuICAgICAgICBtYXA6IHRoaXMudXJsX3BhcmFtcy5tYXBcbiAgICAgIH07XG4gICAgICB0cnkge1xuICAgICAgICBsZXQgaGVhZGVycyA9IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIH07XG4gICAgICAgIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcykgfSk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICAgIHRoaXMucmVsb2FkX21hcCgpO1xuICAgICAgfVxuICAgIH0sXG4gIH0sXG59XG5cbmZ1bmN0aW9uIHN0YXJ0X3Zpc19uZXR3b3JrX21hcChOZXR3b3JrTWFwVnVlKSB7XG4gIC8qIEZvcm1hdCB0aGUgZmlsdGVyIGxpc3QsIHRvIGFkZCB0aGUgZHJvcGRvd25zICovXG4gIGZvciAoY29uc3QgZmlsdGVyX25hbWUgaW4gTmV0d29ya01hcFZ1ZS4kcHJvcHMuYWxsX2ZpbHRlcl9saXN0KSB7XG4gICAgTmV0d29ya01hcFZ1ZS5maWx0ZXJfbGlzdC5wdXNoKE5ldHdvcmtNYXBWdWUuJHByb3BzLmFsbF9maWx0ZXJfbGlzdFtmaWx0ZXJfbmFtZV0pO1xuICAgIGNvbnN0IGFjdGl2ZV9maWx0ZXIgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShmaWx0ZXJfbmFtZSlcbiAgICAvKiBQdXQgdGhlIGZpbHRlciBuYW1lIGludG8gdGhlIGZpbHRlcnMgKi9cbiAgICBmb3IgKGxldCBbXywgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKE5ldHdvcmtNYXBWdWUuJHByb3BzLmFsbF9maWx0ZXJfbGlzdFtmaWx0ZXJfbmFtZV0pKSB7XG4gICAgICB2YWx1ZVsnZmlsdGVyX25hbWUnXSA9IGZpbHRlcl9uYW1lXG4gICAgICBpZiAoYWN0aXZlX2ZpbHRlcikge1xuICAgICAgICAvKiBJZiB0aGVyZSBpcyBhIGZpbHRlciBzZWxlY3RlZCBpbiB0aGUgdXJsIHB1c2ggdGhhdCBhcyBhY3RpdmUgKi9cbiAgICAgICAgaWYgKHZhbHVlLmlkID09IGFjdGl2ZV9maWx0ZXIpXG4gICAgICAgICAgTmV0d29ya01hcFZ1ZS5hY3RpdmVfZmlsdGVyX2xpc3QucHVzaCh2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBwdXNoIHRoZSBkZWZhdWx0IGZpbHRlciBhcyBhY3RpdmUgKi9cbiAgICAgICAgaWYgKHZhbHVlLmN1cnJlbnRseV9hY3RpdmUgPT0gdHJ1ZSlcbiAgICAgICAgICBOZXR3b3JrTWFwVnVlLmFjdGl2ZV9maWx0ZXJfbGlzdC5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBOZXR3b3JrTWFwVnVlLmdldF91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9pbnRlcmZhY2UvbWFwL2RhdGEubHVhYFxuICBOZXR3b3JrTWFwVnVlLmRvd25sb2FkX3VybCA9IE50b3BVdGlscy5idWlsZFVSTChOZXR3b3JrTWFwVnVlLmdldF91cmwsIE5ldHdvcmtNYXBWdWUuJHByb3BzLnVybF9wYXJhbXMpXG4gIE5ldHdvcmtNYXBWdWUuZXZlbnRfbGlzdGVuZXJzID0ge307XG59XG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsInsjXG4gIChDKSAyMDIyIC0gbnRvcC5vcmdcbiAgVGhpcyB0ZW1wbGF0ZSBpcyB1c2VkIGJ5IHRoZSBgQXNzZXQgTWFwYCBwYWdlIGluc2lkZSB0aGUgYEhvc3RzYCBtZW51LiAgICBcbiN9XG5cbjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZCBjYXJkLXNoYWRvd1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwib3ZlcmxheSBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGFsaWduLWl0ZW1zLWNlbnRlciBwb3NpdGlvbi1hYnNvbHV0ZSBoLTEwMCB3LTEwMFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNwaW5uZXItYm9yZGVyIHRleHQtcHJpbWFyeSBtdC01XCIgcm9sZT1cInN0YXR1c1wiPlxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNyLW9ubHkgcG9zaXRpb24tYWJzb2x1dGVcIj5Mb2FkaW5nLi4uPC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICAgICAgPGRpdiBpZD1cInRhYmxlX2Fzc2V0XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNvbnRlbnQtZW5kIG1iLTJcIj5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBpZD1cIm1heC1lbnRyaWVzLXJlYWNoZWRcIiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLWxpbmtcIiA6dGl0bGU9bWF4X2VudHJ5X3RpdGxlIGRpc2FibGVkIGhpZGRlbj5cbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cInRleHQtZGFuZ2VyIGZhLXNvbGlkIGZhLXRyaWFuZ2xlLWV4Y2xhbWF0aW9uXCI+PC9pPlxuICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBtcy1hdXRvXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm0tMVwiIHYtZm9yPVwiKF8sIGluZGV4KSBpbiBmaWx0ZXJfbGlzdFwiPlxuICAgICAgICAgICAgICAgICAgPHNlbGVjdC1zZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJhY3RpdmVfZmlsdGVyX2xpc3RbaW5kZXhdXCIgOm9wdGlvbnM9XCJmaWx0ZXJfbGlzdFtpbmRleF1cIlxuICAgICAgICAgICAgICAgICAgICBAc2VsZWN0X29wdGlvbj1cImNsaWNrX2l0ZW1cIj5cbiAgICAgICAgICAgICAgICAgIDwvc2VsZWN0LXNlYXJjaD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPVwicmVsb2FkLWdyYXBoXCIgY2xhc3M9XCJidG4gYnRuLWxpbmsgYnRuLXJlbG9hZC1ncmFwaFwiPlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzPSdmYXMgZmEtc3luYyc+PC9pPlxuICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgaWQ9J2F1dG9sYXlvdXQnIGNsYXNzPSdidG4gYnRuLWxpbmsgYnRuLXN0YWJpbGl6ZSc+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtbWFnaWNcIj48L2k+XG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxtb2RhbC1kZWxldGUtY29uZmlybSByZWY9XCJtb2RhbF9kZWxldGVfYWxsXCIgOnRpdGxlPVwidGl0bGVfZGVsZXRlXCIgOmJvZHk9XCJib2R5X2RlbGV0ZVwiIEBkZWxldGU9XCJkZWxldGVfYWxsXCI+XG4gICAgICAgICAgICA8L21vZGFsLWRlbGV0ZS1jb25maXJtPlxuXG4gICAgICAgICAgICA8bW9kYWwtYXV0b2xheW91dC1jb25maXJtIHJlZj1cIm1vZGFsX2F1dG9sYXlvdXRcIiA6dGl0bGU9XCJ0aXRsZV9hdXRvbGF5b3V0XCIgOmJvZHk9XCJib2R5X2F1dG9sYXlvdXRcIlxuICAgICAgICAgICAgICBAYXV0b2xheW91dD1cInJlbG9hZF9tYXBcIj5cbiAgICAgICAgICAgIDwvbW9kYWwtYXV0b2xheW91dC1jb25maXJtPlxuXG4gICAgICAgICAgICA8bmV0d29yay1tYXAgcmVmPVwiYXNzZXRfbWFwXCIgOmVtcHR5X21lc3NhZ2U9XCJub19zZXJ2aWNlc19tZXNzYWdlXCIgOmV2ZW50X2xpc3RlbmVycz1cImV2ZW50X2xpc3RlbmVyc1wiXG4gICAgICAgICAgICAgIDpwYWdlX2NzcmY9XCJwYWdlX2NzcmZcIiA6dXJsPVwiZ2V0X3VybFwiIDp1cmxfcGFyYW1zPVwidXJsX3BhcmFtc1wiIDptYXBfaWQ9XCJtYXBfaWRcIj5cbiAgICAgICAgICAgIDwvbmV0d29yay1tYXA+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1mb290ZXJcIj5cbiAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBpZD0nYnRuLWRlbGV0ZS1hbGwnIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXIgbWUtMVwiPjxpIGNsYXNzPSdmYXMgZmEtdHJhc2gnPjwvaT4ge3tcbiAgICAgICAgICAgIGkxOG4oXCJtYXBfcGFnZS5kZWxldGVfc2VydmljZXNcIikgfX08L2J1dHRvbj5cbiAgICAgICAgICA8YSB2LWJpbmQ6aHJlZj1cImRvd25sb2FkX3VybFwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgcm9sZT1cImJ1dHRvblwiIGFyaWEtZGlzYWJsZWQ9XCJ0cnVlXCJcbiAgICAgICAgICAgIGRvd25sb2FkPVwiYXNzZXRfbWFwLmpzb25cIiB0YXJnZXQ9XCJfYmxhbmtcIj48aSBjbGFzcz1cImZhcyBmYS1kb3dubG9hZFwiPjwvaT48L2E+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+ICAgIFxuICAgICAgPE5vdGVMaXN0IDpub3RlX2xpc3Q9XCJub3Rlc1wiPiA8L05vdGVMaXN0PlxuXG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmF1bHQgYXMgTmV0d29ya01hcCB9IGZyb20gXCIuL25ldHdvcmstbWFwLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbERlbGV0ZUNvbmZpcm0gfSBmcm9tIFwiLi9tb2RhbC1kZWxldGUtY29uZmlybS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxBdXRvbGF5b3V0Q29uZmlybSB9IGZyb20gXCIuL21vZGFsLWF1dG9sYXlvdXQtY29uZmlybS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0U2VhcmNoIH0gZnJvbSBcIi4vc2VsZWN0LXNlYXJjaC52dWVcIlxuaW1wb3J0IHsgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLCBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tICcuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzJztcbmltcG9ydCBOb3RlTGlzdCBmcm9tIFwiLi9ub3RlLWxpc3QudnVlXCI7XG5jb25zdCBjaGFuZ2VfZmlsdGVyX2V2ZW50ID0gXCJjaGFuZ2VfZmlsdGVyX2V2ZW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1xuICAgICduZXR3b3JrLW1hcCc6IE5ldHdvcmtNYXAsXG4gICAgJ21vZGFsLWRlbGV0ZS1jb25maXJtJzogTW9kYWxEZWxldGVDb25maXJtLFxuICAgICdtb2RhbC1hdXRvbGF5b3V0LWNvbmZpcm0nOiBNb2RhbEF1dG9sYXlvdXRDb25maXJtLFxuICAgICdzZWxlY3Qtc2VhcmNoJzogU2VsZWN0U2VhcmNoLFxuICAgIE5vdGVMaXN0XG4gIH0sXG4gIHByb3BzOiB7XG4gICAgcGFnZV9jc3JmOiBTdHJpbmcsXG4gICAgaWZpZDogTnVtYmVyLFxuICAgIHVybF9wYXJhbXM6IE9iamVjdCxcbiAgICBtYXBfaWQ6IFN0cmluZyxcbiAgICBpc19hZG1pbjogQm9vbGVhbixcbiAgICBhbGxfZmlsdGVyX2xpc3Q6IE9iamVjdCxcbiAgfSxcbiAgLyoqXG4gICAqIEZpcnN0IG1ldGhvZCBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAqL1xuICBjcmVhdGVkKCkge1xuICAgIHN0YXJ0X3Zpc19uZXR3b3JrX21hcCh0aGlzKVxuICB9LFxuICBtb3VudGVkKCkge1xuICAgIGNvbnN0IG1heF9lbnRyaWVzX3JlYWNoZWQgPSB0aGlzLm1heF9lbnRyeV9yZWFjaGVkXG4gICAgY29uc3QgcmVsb2FkX21hcCA9IHRoaXMucmVsb2FkX21hcFxuICAgIGlmICh0aGlzLiRwcm9wcy51cmxfcGFyYW1zLmhvc3QgJiYgdGhpcy4kcHJvcHMudXJsX3BhcmFtcy5ob3N0ICE9ICcnKSB7XG4gICAgICB0aGlzLmhpZGVfZHJvcGRvd25zKCk7XG4gICAgfVxuXG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudChcInBhZ2Vfc2VydmljZV9tYXBcIiwgbnRvcG5nX2N1c3RvbV9ldmVudHMuQ0hBTkdFX1BBR0VfVElUTEUsIChub2RlKSA9PiB7XG4gICAgICB0aGlzLmhpZGVfZHJvcGRvd25zKCk7XG4gICAgfSk7XG5cbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KFwiY2hhbmdlX2ZpbHRlcl9ldmVudFwiLCBjaGFuZ2VfZmlsdGVyX2V2ZW50LCAoZmlsdGVyKSA9PiB7XG4gICAgICB0aGlzLmFjdGl2ZV9maWx0ZXJfbGlzdC5mb3JFYWNoKChmaWx0ZXJfZWwsIGkpID0+IHtcbiAgICAgICAgaWYgKGZpbHRlcl9lbC5maWx0ZXJfbmFtZSA9PSBmaWx0ZXIuZmlsdGVyX25hbWUpIHtcbiAgICAgICAgICB0aGlzLmFjdGl2ZV9maWx0ZXJfbGlzdFtpXSA9IGZpbHRlcjtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChmaWx0ZXIuZmlsdGVyX25hbWUsIGZpbHRlci5rZXkpO1xuICAgICAgdGhpcy51cmxfcGFyYW1zW2ZpbHRlci5maWx0ZXJfbmFtZV0gPSBmaWx0ZXIua2V5O1xuICAgICAgdGhpcy51cGRhdGVfYW5kX3JlbG9hZF9tYXAoKTtcbiAgICB9KTtcblxuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQodGhpcy5nZXRfbWFwKCksIG50b3BuZ19jdXN0b21fZXZlbnRzLlZJU19EQVRBX0xPQURFRCwgKGZpbHRlcikgPT4ge1xuICAgICAgaWYgKG1heF9lbnRyaWVzX3JlYWNoZWQoKSkge1xuICAgICAgICAkKGAjbWF4LWVudHJpZXMtcmVhY2hlZGApLnJlbW92ZUF0dHIoJ2hpZGRlbicpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkKGAjbWF4LWVudHJpZXMtcmVhY2hlZGApLmF0dHIoJ2hpZGRlbicsICdoaWRkZW4nKVxuICAgICAgfVxuXG4gICAgICBOdG9wVXRpbHMuaGlkZU92ZXJsYXlzKCk7XG4gICAgfSk7XG5cbiAgICAvKiBSZW1vdmUgaW52YWxpZCBmaWx0ZXJzICovXG4gICAgbGV0IGVudHJpZXMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyaWVzKCk7XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgZW50cmllcykge1xuICAgICAgdGhpcy51cmxfcGFyYW1zW2tleV0gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICAkKGAjcmVsb2FkLWdyYXBoYCkuY2xpY2soZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJlbG9hZF9tYXAoKTtcbiAgICB9KTtcblxuICAgICQoXCIjYnRuLWRlbGV0ZS1hbGxcIikuY2xpY2soKCkgPT4gdGhpcy5zaG93X2RlbGV0ZV9hbGxfZGlhbG9nKCkpO1xuICAgICQoXCIjYXV0b2xheW91dFwiKS5jbGljaygoKSA9PiB0aGlzLnNob3dfYXV0b2xheW91dF9kaWFsb2coKSk7XG4gIH0sXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuICAgICAgY29udGFpbmVyOiBudWxsLFxuICAgICAgdXBkYXRlX3ZpZXdfc3RhdGVfaWQ6IG51bGwsXG4gICAgICBnZXRfdXJsOiBudWxsLFxuICAgICAgZG93bmxvYWRfdXJsOiBudWxsLFxuICAgICAgZmlsdGVyX2xpc3Q6IFtdLFxuICAgICAgYWN0aXZlX2ZpbHRlcl9saXN0OiBbXSxcbiAgICAgIGV2ZW50X2xpc3RlbmVyczoge30sXG4gICAgICB0aXRsZV9kZWxldGU6IGkxOG4oJ21hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlcycpLFxuICAgICAgYm9keV9kZWxldGU6IGkxOG4oJ21hcF9wYWdlLmRlbGV0ZV9zZXJ2aWNlc19tZXNzYWdlJyksXG4gICAgICB0aXRsZV9hdXRvbGF5b3V0OiBpMThuKCdtYXBfcGFnZS5hdXRvbGF5b3V0X3NlcnZpY2VzJyksXG4gICAgICBib2R5X2F1dG9sYXlvdXQ6IGkxOG4oJ21hcF9wYWdlLmF1dG9sYXlvdXRfc2VydmljZXNfbWVzc2FnZScpLFxuICAgICAgbm9fc2VydmljZXNfbWVzc2FnZTogaTE4bignbWFwX3BhZ2Uubm9fc2VydmljZXMnKSxcbiAgICAgIG1heF9lbnRyeV90aXRsZTogaTE4bignbWF4X2VudHJpZXNfcmVhY2hlZCcpLFxuICAgICAgbm90ZXM6IFtpMThuKCdtYXBfcGFnZS5ncmFwaF9ub3RlX2Fzc2V0X21hcCcpXSxcbiAgICB9O1xuICB9LFxuICBtZXRob2RzOiB7XG4gICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgbWFwLmRlc3Ryb3koKTtcbiAgICB9LFxuICAgIC8qIE1ldGhvZCB1c2VkIHRvIHN3aXRjaCBhY3RpdmUgdGFibGUgdGFiICovXG4gICAgY2xpY2tfaXRlbTogZnVuY3Rpb24gKGZpbHRlcikge1xuICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfY3VzdG9tX2V2ZW50KGNoYW5nZV9maWx0ZXJfZXZlbnQsIGZpbHRlcik7XG4gICAgfSxcbiAgICBnZXRfbWFwOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy4kcmVmc1tgYXNzZXRfbWFwYF07XG4gICAgfSxcbiAgICBoaWRlX2Ryb3Bkb3duczogZnVuY3Rpb24gKCkge1xuICAgICAgJChgI25ldHdvcmtfZHJvcGRvd25gKS5hdHRyKCdoaWRkZW4nLCAnaGlkZGVuJylcbiAgICAgICQoYCN2bGFuX2lkX2Ryb3Bkb3duYCkuYXR0cignaGlkZGVuJywgJ2hpZGRlbicpXG4gICAgfSxcbiAgICBtYXhfZW50cnlfcmVhY2hlZDogZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgcmV0dXJuIG1hcC5pc19tYXhfZW50cnlfcmVhY2hlZCgpO1xuICAgIH0sXG4gICAgcmVsb2FkX21hcDogYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgTnRvcFV0aWxzLnNob3dPdmVybGF5cygpO1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgYXdhaXQgbWFwLnJlbG9hZCgpO1xuICAgIH0sXG4gICAgdXBkYXRlX2FuZF9yZWxvYWRfbWFwOiBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgbWFwID0gdGhpcy5nZXRfbWFwKCk7XG4gICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICBtYXAudXBkYXRlX3VybF9wYXJhbXModGhpcy51cmxfcGFyYW1zKVxuICAgICAgYXdhaXQgbWFwLnJlbG9hZCgpO1xuICAgIH0sXG4gICAgYXV0b2xheW91dDogZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IG1hcCA9IHRoaXMuZ2V0X21hcCgpO1xuICAgICAgbWFwLmF1dG9sYXlvdXQoKTtcbiAgICB9LFxuICAgIHNob3dfZGVsZXRlX2FsbF9kaWFsb2c6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuJHJlZnNbXCJtb2RhbF9kZWxldGVfYWxsXCJdLnNob3coKTtcbiAgICB9LFxuICAgIHNob3dfYXV0b2xheW91dF9kaWFsb2c6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuJHJlZnNbXCJtb2RhbF9hdXRvbGF5b3V0XCJdLnNob3coKTtcbiAgICB9LFxuICAgIGRlbGV0ZV9hbGw6IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL25ldHdvcmtfbWFwcy5sdWFgO1xuICAgICAgbGV0IHBhcmFtcyA9IHtcbiAgICAgICAgaWZpZDogdGhpcy51cmxfcGFyYW1zLmlmaWQsXG4gICAgICAgIGFjdGlvbjogJ3Jlc2V0JyxcbiAgICAgICAgY3NyZjogdGhpcy4kcHJvcHMucGFnZV9jc3JmLFxuICAgICAgICBtYXA6IHRoaXMudXJsX3BhcmFtcy5tYXBcbiAgICAgIH07XG4gICAgICB0cnkge1xuICAgICAgICBsZXQgaGVhZGVycyA9IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIH07XG4gICAgICAgIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcykgfSk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICAgIHRoaXMucmVsb2FkX21hcCgpO1xuICAgICAgfVxuICAgIH0sXG4gIH0sXG59XG5cbmZ1bmN0aW9uIHN0YXJ0X3Zpc19uZXR3b3JrX21hcChOZXR3b3JrTWFwVnVlKSB7XG4gIC8qIEZvcm1hdCB0aGUgZmlsdGVyIGxpc3QsIHRvIGFkZCB0aGUgZHJvcGRvd25zICovXG4gIGZvciAoY29uc3QgZmlsdGVyX25hbWUgaW4gTmV0d29ya01hcFZ1ZS4kcHJvcHMuYWxsX2ZpbHRlcl9saXN0KSB7XG4gICAgTmV0d29ya01hcFZ1ZS5maWx0ZXJfbGlzdC5wdXNoKE5ldHdvcmtNYXBWdWUuJHByb3BzLmFsbF9maWx0ZXJfbGlzdFtmaWx0ZXJfbmFtZV0pO1xuICAgIGNvbnN0IGFjdGl2ZV9maWx0ZXIgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShmaWx0ZXJfbmFtZSlcbiAgICAvKiBQdXQgdGhlIGZpbHRlciBuYW1lIGludG8gdGhlIGZpbHRlcnMgKi9cbiAgICBmb3IgKGxldCBbXywgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKE5ldHdvcmtNYXBWdWUuJHByb3BzLmFsbF9maWx0ZXJfbGlzdFtmaWx0ZXJfbmFtZV0pKSB7XG4gICAgICB2YWx1ZVsnZmlsdGVyX25hbWUnXSA9IGZpbHRlcl9uYW1lXG4gICAgICBpZiAoYWN0aXZlX2ZpbHRlcikge1xuICAgICAgICAvKiBJZiB0aGVyZSBpcyBhIGZpbHRlciBzZWxlY3RlZCBpbiB0aGUgdXJsIHB1c2ggdGhhdCBhcyBhY3RpdmUgKi9cbiAgICAgICAgaWYgKHZhbHVlLmlkID09IGFjdGl2ZV9maWx0ZXIpXG4gICAgICAgICAgTmV0d29ya01hcFZ1ZS5hY3RpdmVfZmlsdGVyX2xpc3QucHVzaCh2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBwdXNoIHRoZSBkZWZhdWx0IGZpbHRlciBhcyBhY3RpdmUgKi9cbiAgICAgICAgaWYgKHZhbHVlLmN1cnJlbnRseV9hY3RpdmUgPT0gdHJ1ZSlcbiAgICAgICAgICBOZXR3b3JrTWFwVnVlLmFjdGl2ZV9maWx0ZXJfbGlzdC5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBOZXR3b3JrTWFwVnVlLmdldF91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9pbnRlcmZhY2UvbWFwL2RhdGEubHVhYFxuICBOZXR3b3JrTWFwVnVlLmRvd25sb2FkX3VybCA9IE50b3BVdGlscy5idWlsZFVSTChOZXR3b3JrTWFwVnVlLmdldF91cmwsIE5ldHdvcmtNYXBWdWUuJHByb3BzLnVybF9wYXJhbXMpXG4gIE5ldHdvcmtNYXBWdWUuZXZlbnRfbGlzdGVuZXJzID0ge307XG59XG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG48bW9kYWwgQHNob3dlZD1cInNob3dlZCgpXCIgcmVmPVwibW9kYWxfaWRcIj5cbiAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT57e3RpdGxlfX08L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbWItMyByb3dcIj5cbiAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00XCI+e3tib2R5fX08L2xhYmVsPlxuICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS03XCI+XG4gICAgICAgIDx0ZXh0YXJlYSBuYW1lPVwiaXRlbXMtbGlzdFwiIGlkPVwiaXRlbXNsaXN0LXRleHRhcmVhXCIgY2xhc3M9XCJ3LTEwMCBmb3JtLWNvbnRyb2xcIiByb3dzPVwiNlwiIHYtbW9kZWw9XCJpbnB1dF9tYWNfbGlzdFwiPjwvdGV4dGFyZWE+XG4gICAgICAgICAgPHNtYWxsPnt7bGlzdF9ub3Rlc319PC9zbWFsbD5cbiAgICAgICAgPGRpdiBjbGFzcz1cImludmFsaWQtZmVlZGJhY2tcIj48L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1iLTMgcm93XCI+XG4gICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tNCBwdC0yXCI+e3tfaTE4bignZWRpdF9jaGVjay50cmlnZ2VyX2RldmljZV9kaXNjb25uZWN0ZWRfYWxlcnQnKX19PC9sYWJlbD5cbiAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLXN3aXRjaCBjb2wtc20tNyBwdC0yIHBzLTNcIj5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIGNsYXNzPVwiZm9ybS1jaGVjay1pbnB1dCBtcy0wXCIgdi1tb2RlbD1cImlucHV0X3RyaWdnZXJfYWxlcnRzXCI+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxzbWFsbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsXCI+e3tfaTE4bignZWRpdF9jaGVjay50cmlnZ2VyX2RldmljZV9kaXNjb25uZWN0ZWRfYWxlcnRfZGVzY3InKX19PC9zbWFsbD5cbiAgICA8L2Rpdj5cbiAgPC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAge3tfaTE4bignaG9zdF9kZXRhaWxzLm5vdGVzJyl9fTpcbiAgICB7e2Zvb3Rlcn19XG4gICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiYWRkX1wiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+e3tfaTE4bignYWRkJyl9fTwvYnV0dG9uPlxuICA8L3RlbXBsYXRlPlxuPC9tb2RhbD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgbW9kYWwgfSBmcm9tIFwiLi9tb2RhbC52dWVcIjtcblxuY29uc3QgaW5wdXRfbWFjX2xpc3QgPSByZWYoXCJcIik7XG5jb25zdCBpbnB1dF90cmlnZ2VyX2FsZXJ0cyA9IHJlZihcIlwiKTtcblxuY29uc3QgbW9kYWxfaWQgPSByZWYobnVsbCk7XG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoWydhZGQnXSk7XG5cbmNvbnN0IHNob3dlZCA9ICgpID0+IHt9O1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICBib2R5OiBTdHJpbmcsXG4gICAgdGl0bGU6IFN0cmluZyxcbiAgICBmb290ZXI6IFN0cmluZyxcbiAgICBsaXN0X25vdGVzOiBTdHJpbmcsXG59KTtcblxuY29uc3Qgc2hvdyA9ICgpID0+IHtcbiAgICBpbnB1dF9tYWNfbGlzdC52YWx1ZSA9IFwiXCI7XG4gICAgbW9kYWxfaWQudmFsdWUuc2hvdygpO1xufTtcblxuY29uc3QgYWRkXyA9ICgpID0+IHtcbiAgICBlbWl0KCdhZGQnLCB7IG1hY19saXN0OiBpbnB1dF9tYWNfbGlzdC52YWx1ZSwgdHJpZ2dlcl9hbGVydHM6IGlucHV0X3RyaWdnZXJfYWxlcnRzLnZhbHVlIH0pO1xuICAgIGNsb3NlKCk7XG59O1xuXG5jb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgICBtb2RhbF9pZC52YWx1ZS5jbG9zZSgpO1xufTtcblxuXG5kZWZpbmVFeHBvc2UoeyBzaG93LCBjbG9zZSB9KTtcblxub25Nb3VudGVkKCgpID0+IHtcbn0pO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbjwvc3R5bGU+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuPG1vZGFsIEBzaG93ZWQ9XCJzaG93ZWQoKVwiIHJlZj1cIm1vZGFsX2lkXCI+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+XG4gICAgPHRlbXBsYXRlIHYtaWY9XCJlZGl0X2FsbCA9PSBmYWxzZVwiPlxuICAgICAge3t0aXRsZX19XG4gICAgPC90ZW1wbGF0ZT5cbiAgICA8dGVtcGxhdGUgdi1lbHNlPlxuICAgICAge3sgdGl0bGVfZWRpdF9hbGwgfX1cbiAgICA8L3RlbXBsYXRlPlxuICAgIFxuICA8L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAgICA8dGVtcGxhdGUgdi1pZj1cImVkaXRfYWxsID09IGZhbHNlXCI+XG5cbiAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1iLTMgcm93XCI+XG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00XCI+e3sgX2kxOG4oJ2VkaXRfY2hlY2suZGV2aWNlX2FsaWFzJykgfX08L2xhYmVsPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTdcIj5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwiY3VzdG9tX25hbWVcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIDpwbGFjZWhvbGRlcj1cImN1c3RvbV9uYW1lX3BsYWNlaG9sZGVyXCJcbiAgICAgICAgICAgIHYtbW9kZWw9XCJpbnB1dF9tYWNfYWRkcmVzc19uYW1lXCI+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICA8L2Rpdj5cbiAgICAgIDwvdGVtcGxhdGU+XG5cbiAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1iLTMgcm93XCI+XG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00XCI+e3sgX2kxOG4oJ2VkaXRfY2hlY2suZGV2aWNlX3N0YXR1cycpIH19PC9sYWJlbD5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS03XCI+XG5cbiAgICAgICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwiaW5wdXRfZGV2aWNlX3N0YXR1c1wiIFxuICAgICAgICAgICAgOm9wdGlvbnM9XCJkZXZpY2Vfc3RhdHVzX2xpc3RcIj5cbiAgICAgICAgICA8L1NlbGVjdFNlYXJjaD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1iLTMgcm93XCI+XG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00IHB0LTJcIj57eyBfaTE4bignZWRpdF9jaGVjay50cmlnZ2VyX2RldmljZV9kaXNjb25uZWN0ZWRfYWxlcnQnKSB9fTwvbGFiZWw+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLXN3aXRjaCBjb2wtc20tNyBwdC0yIHBzLTNcIj5cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0IG1zLTBcIiB2LW1vZGVsPVwiaW5wdXRfdHJpZ2dlcl9hbGVydHNcIj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxzbWFsbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsXCI+e3sgX2kxOG4oJ2VkaXRfY2hlY2sudHJpZ2dlcl9kZXZpY2VfZGlzY29ubmVjdGVkX2FsZXJ0X2Rlc2NyJykgfX08L3NtYWxsPlxuICAgICAgPC9kaXY+XG4gICAgPC90ZW1wbGF0ZT5cbiAgICA8dGVtcGxhdGUgdi1zbG90OmZvb3Rlcj5cbiAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImVkaXRfXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj57eyBfaTE4bignZWRpdCcpIH19PC9idXR0b24+XG4gICAgPC90ZW1wbGF0ZT5cbiAgPC9tb2RhbD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgY29tcHV0ZWQsIHdhdGNoIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBtb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiO1xuXG5cbmNvbnN0IGlucHV0X21hY19hZGRyZXNzX25hbWUgPSByZWYoXCJcIik7XG5jb25zdCBpbnB1dF9kZXZpY2Vfc3RhdHVzID0gcmVmKFwiXCIpO1xuY29uc3QgaW5wdXRfdHJpZ2dlcl9hbGVydHMgPSByZWYoXCJcIik7XG5cbmNvbnN0IGN1c3RvbV9uYW1lX3BsYWNlaG9sZGVyID0gcmVmKGkxOG4oJ2lmX3N0YXRzX2NvbmZpZy5jdXN0b21fbmFtZScpKTtcbmNvbnN0IG1vZGFsX2lkID0gcmVmKG51bGwpO1xuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFsnZWRpdCddKTtcblxuY29uc3Qgc2hvd2VkID0gKCkgPT4geyB9O1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICB0aXRsZTogU3RyaW5nLFxuICAgIHRpdGxlX2VkaXRfYWxsOiBTdHJpbmcsXG59KTtcblxuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuY29uc3QgZGV2aWNlX3N0YXR1c19saXN0ID0gcmVmKFtcbiAge2lkOiBcImFsbG93ZWRcIiwgdmFsdWU6XCJhbGxvd2VkXCIsIGxhYmVsOl9pMThuKCdlZGl0X2NoZWNrLmF1dGhvcml6ZWQnKSB9LFxuICB7aWQ6IFwiZGVuaWVkXCIsIHZhbHVlOlwiZGVuaWVkXCIsIGxhYmVsOl9pMThuKCdlZGl0X2NoZWNrLnVuYXV0aG9yaXplZCcpIH0sXG5dKVxuXG5jb25zdCBlZGl0X2FsbCA9IHJlZihmYWxzZSk7XG5cbmNvbnN0IHNob3cgPSAocm93KSA9PiB7XG4gICAgaWYocm93ICE9IG51bGwpIHtcbiAgICAgIGxldCB0bXBfZGV2aWNlX3N0YXR1cyA9IG51bGw7XG4gICAgICBkZXZpY2Vfc3RhdHVzX2xpc3QudmFsdWUuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICBpZihpdGVtLmlkID09IHJvdy5zdGF0dXMpIHtcbiAgICAgICAgICB0bXBfZGV2aWNlX3N0YXR1cyA9IGl0ZW07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaW5wdXRfZGV2aWNlX3N0YXR1cy52YWx1ZSA9IHRtcF9kZXZpY2Vfc3RhdHVzO1xuICAgICAgaW5wdXRfbWFjX2FkZHJlc3NfbmFtZS52YWx1ZSA9IHJvdy5tYWNfYWRkcmVzcy5tYWM7XG4gICAgICBpbnB1dF90cmlnZ2VyX2FsZXJ0cy52YWx1ZSA9IHJvdy50cmlnZ2VyX2FsZXJ0IHx8IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnB1dF9kZXZpY2Vfc3RhdHVzLnZhbHVlID0gZGV2aWNlX3N0YXR1c19saXN0LnZhbHVlWzBdO1xuICAgICAgZWRpdF9hbGwudmFsdWUgPSB0cnVlO1xuICAgIH1cbiAgICBcbiAgICBtb2RhbF9pZC52YWx1ZS5zaG93KCk7XG59O1xuXG5jb25zdCBlZGl0XyA9ICgpID0+IHtcbiAgICBpZihlZGl0X2FsbC52YWx1ZSA9PSBmYWxzZSlcbiAgICAgIGVtaXQoJ2VkaXQnLCB7IG1hY19hbGlhczogaW5wdXRfbWFjX2FkZHJlc3NfbmFtZS52YWx1ZSwgbWFjX3N0YXR1czogaW5wdXRfZGV2aWNlX3N0YXR1cy52YWx1ZS52YWx1ZSwgdHJpZ2dlcl9hbGVydHM6IGlucHV0X3RyaWdnZXJfYWxlcnRzLnZhbHVlIH0pO1xuICAgIGVsc2UgXG4gICAgICBlbWl0KCdlZGl0JywgeyBtYWNfc3RhdHVzOiBpbnB1dF9kZXZpY2Vfc3RhdHVzLnZhbHVlLnZhbHVlLCB0cmlnZ2VyX2FsZXJ0czogaW5wdXRfdHJpZ2dlcl9hbGVydHMudmFsdWUsIG1hY19hbGlhczogJ2FsbCcsIH0pO1xuXG4gICAgY2xvc2UoKTtcbn07XG5cbmNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICBtb2RhbF9pZC52YWx1ZS5jbG9zZSgpO1xufTtcblxuXG5kZWZpbmVFeHBvc2UoeyBzaG93LCBjbG9zZSB9KTtcblxub25Nb3VudGVkKCgpID0+IHtcbn0pO1xuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD48L3N0eWxlPlxuIiwiPHRlbXBsYXRlPlxuICBcblxuPGRpdiBjbGFzcz1cInJvd1wiPlxuICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1kYW5nZXIgZC1ub25lXCIgaWQ9J2FsZXJ0LXJvdy1idXR0b25zJyByb2xlPVwiYWxlcnRcIj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZFwiPlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgICA8ZGl2IHYtaWY9XCJpc19sZWFybmluZ19zdGF0dXNcIiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm9cIj5cbiAgICAgICAgICB7eyBsZWFybmluZ19tZXNzYWdlIH19XG4gICAgICAgIDwvZGl2PlxuICAgICAgXHQ8ZGl2IGlkPVwidGFibGVfZGV2aWNlc192dWVcIj5cbiAgICAgICAgICA8bW9kYWwtZGVsZXRlLWNvbmZpcm0gcmVmPVwibW9kYWxfZGVsZXRlX2NvbmZpcm1cIlxuICAgICAgICAgICAgOnRpdGxlPVwidGl0bGVfZGVsZXRlXCJcbiAgICAgICAgICAgIDpib2R5PVwiYm9keV9kZWxldGVcIlxuICAgICAgICAgICAgQGRlbGV0ZT1cImRlbGV0ZV9yb3dcIj5cbiAgICAgICAgICA8L21vZGFsLWRlbGV0ZS1jb25maXJtPlxuICAgICAgICAgIDxtb2RhbC1kZWxldGUtY29uZmlybSByZWY9XCJtb2RhbF9kZWxldGVfYWxsXCJcbiAgICAgICAgICAgIDp0aXRsZT1cInRpdGxlX2RlbGV0ZV9hbGxcIlxuICAgICAgICAgICAgOmJvZHk9XCJib2R5X2RlbGV0ZV9hbGxcIlxuICAgICAgICAgICAgQGRlbGV0ZT1cImRlbGV0ZV9hbGxcIj5cbiAgICAgICAgICA8L21vZGFsLWRlbGV0ZS1jb25maXJtPlxuICAgICAgICAgIDxtb2RhbC1hZGQtZGV2aWNlLWV4Y2x1c2lvbiByZWY9XCJtb2RhbF9hZGRfZGV2aWNlXCJcbiAgICAgICAgICAgIDp0aXRsZT1cInRpdGxlX2FkZFwiXG4gICAgICAgICAgICA6Ym9keT1cImJvZHlfYWRkXCJcbiAgICAgICAgICAgIDpmb290ZXI9XCJmb290ZXJfYWRkXCJcbiAgICAgICAgICAgIDpsaXN0X25vdGVzPVwibGlzdF9ub3Rlc19hZGRcIlxuICAgICAgICAgICAgQGFkZD1cImFkZF9kZXZpY2VfcmVzdFwiPlxuICAgICAgICAgIDwvbW9kYWwtYWRkLWRldmljZS1leGNsdXNpb24+XG4gICAgICAgICAgPG1vZGFsLWVkaXQtZGV2aWNlLWV4Y2x1c2lvbiByZWY9XCJtb2RhbF9lZGl0X2RldmljZVwiXG4gICAgICAgICAgICA6dGl0bGU9XCJ0aXRsZV9lZGl0XCJcbiAgICAgICAgICAgIDp0aXRsZV9lZGl0X2FsbD1cInRpdGxlX2VkaXRfYWxsXCJcbiAgICAgICAgICAgIEBlZGl0PVwiZWRpdF9yb3dcIj5cbiAgICAgICAgICA8L21vZGFsLWVkaXQtZGV2aWNlLWV4Y2x1c2lvbj5cbiAgICAgICAgICAgIFxuICAgICAgICAgIDxUYWJsZVdpdGhDb25maWcgcmVmPVwidGFibGVfZGV2aWNlX2V4Y2x1c2lvbnNcIlxuXHRcdFx0XHQgICAgICAgIDpjc3JmPVwiY3NyZlwiXG5cdFx0XHRcdCAgICAgICAgOnRhYmxlX2lkPVwidGFibGVfaWRcIlxuICAgICAgICAgICAgICAgIDpmX21hcF9jb2x1bW5zPVwibWFwX3RhYmxlX2RlZl9jb2x1bW5zXCJcblx0XHRcdFx0ICAgICAgICA6Z2V0X2V4dHJhX3BhcmFtc19vYmo9XCJnZXRfZXh0cmFfcGFyYW1zX29ialwiXG4gICAgICAgICAgICAgICAgOmZfbWFwX2NvbmZpZz1cIm1hcF9jb25maWdcIlxuICAgICAgICAgICAgICAgIDpmX3NvcnRfcm93cz1cImNvbHVtbnNfc29ydGluZ1wiXG4gICAgICAgICAgICAgICAgQGN1c3RvbV9ldmVudD1cIm9uX3RhYmxlX2N1c3RvbV9ldmVudFwiPlxuICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6Y3VzdG9tX2hlYWRlcj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1saW5rXCIgdHlwZT1cImJ1dHRvblwiIHJlZj1cImFkZF9kZXZpY2VcIiBAY2xpY2s9XCJhZGRfZGV2aWNlXCI+PGlcbiAgICAgICAgICAgICAgICAgICAgY2xhc3M9J2ZhcyBmYS1wbHVzJz48L2k+PC9idXR0b24+XG4gICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgPC9UYWJsZVdpdGhDb25maWc+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1mb290ZXIgbXQtM1wiPlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJkZWxldGVfYWxsX2NvbmZpcm1cIiAgY2xhc3M9XCJidG4gYnRuLWRhbmdlciBtZS0xXCI+XG4gICAgICAgICAgPGkgY2xhc3M9J2ZhcyBmYS10cmFzaCc+PC9pPiB7eyBfaTE4bihcImVkaXRfY2hlY2suZGVsZXRlX2FsbF9kZXZpY2VfZXhjbHVzaW9uc1wiKSB9fVxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiZWRpdF9hbGxfZGV2aWNlc19jb25maXJtXCIgIGNsYXNzPVwiYnRuIGJ0bi1zZWNvbmRhcnlcIj5cbiAgICAgICAgICA8aSBjbGFzcz0nZmFzIGZhLWVkaXQnPjwvaT4ge3sgX2kxOG4oXCJlZGl0X2NoZWNrLmVkaXRfYWxsX2RldmljZXNfc3RhdHVzXCIpIH19XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgICAgICAgXG4gIDwvZGl2PlxuICA8Tm90ZUxpc3QgOm5vdGVfbGlzdD1cIm5vdGVzX2xpc3RcIiBhZGRfc3ViX25vdGVzPVwidHJ1ZVwiIFxuICAgICAgICAgICAgICAgICAgICA6c3ViX25vdGVfbGlzdD1cInN1Yl9ub3Rlc19saXN0XCI+IFxuICAgICAgICAgIDwvTm90ZUxpc3Q+XG4gICAgPC9kaXY+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgIFRhYmxlV2l0aENvbmZpZyAgZnJvbSBcIi4vdGFibGUtd2l0aC1jb25maWcudnVlXCI7XG5pbXBvcnQgIE1vZGFsRGVsZXRlQ29uZmlybSAgZnJvbSBcIi4vbW9kYWwtZGVsZXRlLWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgIE1vZGFsQWRkRGV2aWNlRXhjbHVzaW9uICBmcm9tIFwiLi9tb2RhbC1hZGQtZGV2aWNlLWV4Y2x1c2lvbi52dWVcIjtcbmltcG9ydCAgTW9kYWxFZGl0RGV2aWNlRXhjbHVzaW9uICBmcm9tIFwiLi9tb2RhbC1lZGl0LWRldmljZS1leGNsdXNpb24udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE5vdGVMaXN0IH0gZnJvbSBcIi4vbm90ZS1saXN0LnZ1ZVwiO1xuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQgfSBmcm9tIFwidnVlXCI7XG5cblxuY29uc3QgdGFibGVfZGV2aWNlX2V4Y2x1c2lvbnMgPSByZWYoKTtcbmNvbnN0IG1vZGFsX2RlbGV0ZV9jb25maXJtID0gcmVmKCk7XG5jb25zdCBtb2RhbF9kZWxldGVfYWxsID0gcmVmKCk7XG5jb25zdCBtb2RhbF9hZGRfZGV2aWNlID0gcmVmKCk7XG5jb25zdCBtb2RhbF9lZGl0X2RldmljZSA9IHJlZigpO1xuXG5jb25zdCB0YWJsZV9pZCA9IHJlZignZGV2aWNlX2V4Y2x1c2lvbnMnKTtcblxuY29uc3QgYWRkX3VybCAgICAgICAgICAgICA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvYWRkL2RldmljZS9leGNsdXNpb24ubHVhYDtcbmNvbnN0IGRlbGV0ZV91cmwgICAgICAgICAgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2RlbGV0ZS9kZXZpY2UvZXhjbHVzaW9uLmx1YWA7XG5jb25zdCBlZGl0X3VybCAgICAgICAgICAgID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9lZGl0L2RldmljZS9leGNsdXNpb24ubHVhYDtcbmNvbnN0IGxlYXJuaW5nX3N0YXR1c191cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9kZXZpY2UvbGVhcm5pbmdfc3RhdHVzLmx1YWA7XG5jb25zdCBpc19sZWFybmluZ19zdGF0dXMgPSByZWYoZmFsc2UpO1xuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcblxubGV0IHRpdGxlX2RlbGV0ZT0gJyc7XG5sZXQgYm9keV9kZWxldGU9ICcnO1xubGV0IHRpdGxlX2RlbGV0ZV9hbGw9IF9pMThuKCdlZGl0X2NoZWNrLmRlbGV0ZV9hbGxfZGV2aWNlX2V4Y2x1c2lvbnMnKTtcbmxldCBib2R5X2RlbGV0ZV9hbGw9ICBfaTE4bignZWRpdF9jaGVjay5kZWxldGVfYWxsX2RldmljZV9leGNsdXNpb25zX21lc3NhZ2UnKTtcbmxldCB0aXRsZV9hZGQ9IF9pMThuKCdlZGl0X2NoZWNrLmFkZF9kZXZpY2VfZXhjbHVzaW9uJyk7XG5sZXQgYm9keV9hZGQ9IF9pMThuKCdlZGl0X2NoZWNrLmFkZF9kZXZpY2VfZXhjbHVzaW9uX21lc3NhZ2UnKTtcbmxldCBmb290ZXJfYWRkPSBfaTE4bignZWRpdF9jaGVjay5hZGRfZGV2aWNlX2V4Y2x1c2lvbl9ub3RlcycpO1xubGV0IGxpc3Rfbm90ZXNfYWRkPSBfaTE4bignZWRpdF9jaGVjay5hZGRfZGV2aWNlX2V4Y2x1c2lvbl9saXN0X25vdGVzJyk7XG5sZXQgdGl0bGVfZWRpdD0gX2kxOG4oJ2VkaXRfY2hlY2suZWRpdF9kZXZpY2VfZXhjbHVzaW9uJyk7XG5sZXQgdGl0bGVfZWRpdF9hbGw9IF9pMThuKCdlZGl0X2NoZWNrLmVkaXRfYWxsX2RldmljZXNfc3RhdHVzJyk7XG5sZXQgbGVhcm5pbmdfbWVzc2FnZT0gX2kxOG4oJ2VkaXRfY2hlY2subGVhcm5pbmcnKTtcbmxldCByb3dfdG9fZGVsZXRlPSByZWYobnVsbCk7XG5sZXQgcm93X3RvX2VkaXQ9IHJlZihudWxsKTtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gICAgY29udGV4dDogT2JqZWN0XG59KTtcblxuXG5jb25zdCByZXN0X3BhcmFtcyA9IHtcbiAgY3NyZjogcHJvcHMuY29udGV4dC5jc3JmLFxuICBpZmlkOiBwcm9wcy5jb250ZXh0LmlmaWRcbn07XG5cbmNvbnN0IG5vdGVzX2xpc3QgPSBbXG4gIF9pMThuKFwiZWRpdF9jaGVjay5kZXZpY2VfZXhjbHVzaW9uX3BhZ2Vfbm90ZXMubm90ZV8xXCIpXG5dO1xuXG5jb25zdCBzdWJfbm90ZXNfbGlzdCA9IFtcbiAgX2kxOG4oXCJlZGl0X2NoZWNrLmRldmljZV9leGNsdXNpb25fcGFnZV9ub3Rlcy5zdWJfbm90ZV8xXCIpLFxuICBfaTE4bihcImVkaXRfY2hlY2suZGV2aWNlX2V4Y2x1c2lvbl9wYWdlX25vdGVzLnN1Yl9ub3RlXzJcIilcbl07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovIFxuXG4vKiBGdW5jdGlvbiB0byBoYW5kbGUgYWxsIGJ1dHRvbnMgKi9cbmZ1bmN0aW9uIG9uX3RhYmxlX2N1c3RvbV9ldmVudChldmVudCkge1xuICBcbiAgbGV0IGV2ZW50c19tYW5hZ2VkID0ge1xuICAgIFwiY2xpY2tfYnV0dG9uX2VkaXRfZGV2aWNlXCI6IGNsaWNrX2J1dHRvbl9lZGl0X2RldmljZSxcbiAgICBcImNsaWNrX2J1dHRvbl9oaXN0b3JpY2FsX2Zsb3dzXCI6IGNsaWNrX2J1dHRvbl9oaXN0b3JpY2FsX2Zsb3dzLFxuICAgIFwiY2xpY2tfYnV0dG9uX2RlbGV0ZVwiOiBjbGlja19idXR0b25fZGVsZXRlLFxuICB9O1xuICBpZiAoZXZlbnRzX21hbmFnZWRbZXZlbnQuZXZlbnRfaWRdID09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgZXZlbnRzX21hbmFnZWRbZXZlbnQuZXZlbnRfaWRdKGV2ZW50KTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gY2xpY2tfYnV0dG9uX2RlbGV0ZShldmVudCkge1xuICBsZXQgYm9keSA9IGAke2kxOG4oJ2VkaXRfY2hlY2suZGVsZXRlX2RldmljZV9leGNsdXNpb24nKX0gJHtldmVudC5yb3cubWFjX2FkZHJlc3MubWFjfWA7XG4gIHJvd190b19kZWxldGUudmFsdWUgPSBldmVudC5yb3c7XG5cbiAgYm9keV9kZWxldGUgPSBib2R5O1xuXG4gIHRpdGxlX2RlbGV0ZSA9IGkxOG4oJ2VkaXRfY2hlY2suZGV2aWNlX2V4Y2x1c2lvbicpO1xuICBtb2RhbF9kZWxldGVfY29uZmlybS52YWx1ZS5zaG93KGJvZHlfZGVsZXRlLCB0aXRsZV9kZWxldGUpOyAgICBcbiAgXG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNsaWNrX2J1dHRvbl9lZGl0X2RldmljZShldmVudCkge1xuICByb3dfdG9fZWRpdC52YWx1ZSA9IGV2ZW50LnJvdztcbiAgbW9kYWxfZWRpdF9kZXZpY2UudmFsdWUuc2hvdyhyb3dfdG9fZWRpdC52YWx1ZSk7ICBcbn1cblxuZnVuY3Rpb24gY2xpY2tfYnV0dG9uX2hpc3RvcmljYWxfZmxvd3MoZXZlbnQpIHtcbiAgY29uc3Qgcm93RGF0YSA9IGV2ZW50LnJvdztcbiAgY29uc3QgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZGJfc2VhcmNoLmx1YT9lcG9jaF9iZWdpbj0ke3Jvd0RhdGEuZmlyc3Rfc2Vlbi50aW1lc3RhbXB9JmVwb2NoX2VuZD0ke3Jvd0RhdGEubGFzdF9zZWVuLnRpbWVzdGFtcH0mbWFjPSR7cm93RGF0YS5tYWNfYWRkcmVzcy5tYWN9O2VxJmFnZ3JlZ2F0ZWQ9ZmFsc2VgXG4gIHdpbmRvdy5vcGVuKHVybCwgJ19ibGFuaycpO1xufVxuXG5vbk1vdW50ZWQoYXN5bmMgKCkgPT4ge1xuXG4gIGF3YWl0IGxlYXJuaW5nX3N0YXR1cygpO1xuXG59KVxuXG5jb25zdCBjc3JmID0gcHJvcHMuY3JzZjtcblxuLyogRnVuY3Rpb24gdG8gZGVsZXRlIGRldmljZSAqL1xuY29uc3QgZGVsZXRlX3JvdyA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgY29uc3Qgcm93ID0gcm93X3RvX2RlbGV0ZS52YWx1ZTtcblxuICBjb25zdCB1cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoZGVsZXRlX3VybCwge1xuICAgIGRldmljZTogcm93Lm1hY19hZGRyZXNzLm1hYyxcbiAgfSlcblxuICByZXN0X3BhcmFtcy5kZXZpY2UgPSB7XG4gICAgbWFjOiByb3cubWFjX2FkZHJlc3MubWFjXG4gIH07XG4gIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcG9zdF9yZXF1ZXN0KHVybCwgcmVzdF9wYXJhbXMpO1xuICByZWZyZXNoKCk7XG5cbn1cblxuY29uc3QgZGVsZXRlX2FsbF9jb25maXJtID0gYXN5bmMgZnVuY3Rpb24oKSB7XG4gIG1vZGFsX2RlbGV0ZV9hbGwudmFsdWUuc2hvdygpO1xufVxuXG5jb25zdCBlZGl0X2FsbF9kZXZpY2VzX2NvbmZpcm0gPSBhc3luYyBmdW5jdGlvbigpIHtcbiAgbW9kYWxfZWRpdF9kZXZpY2UudmFsdWUuc2hvdygpO1xufVxuXG4vKiBGdW5jdGlvbiB0byBkZWxldGUgYWxsIGRldmljZXMgKi9cbmNvbnN0IGRlbGV0ZV9hbGwgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IHVybCA9IE50b3BVdGlscy5idWlsZFVSTChkZWxldGVfdXJsLCB7XG4gICAgZGV2aWNlOiAnYWxsJyxcbiAgfSlcblxuICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3Bvc3RfcmVxdWVzdCh1cmwsIHJlc3RfcGFyYW1zKTtcbiAgcmVmcmVzaCgpO1xuXG59O1xuXG5jb25zdCBsZWFybmluZ19zdGF0dXMgPSBhc3luYyBmdW5jdGlvbigpIHtcbiAgICBcbiAgY29uc3QgcnNwID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KGxlYXJuaW5nX3N0YXR1c191cmwpO1xuICBpZihyc3AubGVhcm5pbmdfZG9uZSkge1xuICAgIGlzX2xlYXJuaW5nX3N0YXR1cy52YWx1ZSA9IGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIGlzX2xlYXJuaW5nX3N0YXR1cy52YWx1ZSA9IHRydWU7XG4gIH1cbn1cblxuY29uc3QgcmVmcmVzaCA9IGFzeW5jIGZ1bmN0aW9uKCkge1xuICBhd2FpdCBsZWFybmluZ19zdGF0dXMoKTtcbiAgdGFibGVfZGV2aWNlX2V4Y2x1c2lvbnMudmFsdWUucmVmcmVzaF90YWJsZSgpO1xufVxuXG5mdW5jdGlvbiBhZGRfZGV2aWNlKCkge1xuICBtb2RhbF9hZGRfZGV2aWNlLnZhbHVlLnNob3coKTtcbn1cblxuY29uc3QgYWRkX2RldmljZV9yZXN0ID0gYXN5bmMgZnVuY3Rpb24gKHNldF9wYXJhbXNfaW5fdXJsKSB7XG4gIGxldCBwYXJhbXMgPSBzZXRfcGFyYW1zX2luX3VybDtcbiAgcGFyYW1zLm1hY19saXN0ID0gcGFyYW1zLm1hY19saXN0LnJlcGxhY2UoLyg/OlxcdHwgKS9nLCcnKVxuICBwYXJhbXMubWFjX2xpc3QgPSBwYXJhbXMubWFjX2xpc3QucmVwbGFjZSgvKD86XFxyXFxufFxccnxcXG4pL2csICcsJyk7XG5cbiAgY29uc3QgdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKGFkZF91cmwsIHtcbiAgICAuLi5wYXJhbXNcbiAgfSlcblxuICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3Bvc3RfcmVxdWVzdCh1cmwsIHJlc3RfcGFyYW1zKTtcbiAgcmVmcmVzaCgpO1xuICAgICAgICAgIFxufTtcblxuY29uc3QgZWRpdF9yb3cgPSBhc3luYyBmdW5jdGlvbihwYXJhbXMpIHtcbiAgbGV0IHJvdyA9IHJvd190b19lZGl0LnZhbHVlO1xuICBpZihyb3cgIT0gbnVsbClcbiAgICBwYXJhbXMubWFjX2FsaWFzID0gcGFyYW1zLm1hY19hbGlhcy5yZXBsYWNlKC8oPzpcXHR8ICkvZywnJyk7ICAgXG4gIGlmKHJvdyAhPSBudWxsKVxuICAgIHBhcmFtcy5tYWMgPSByb3cubWFjX2FkZHJlc3MubWFjO1xuICBwYXJhbXMuY3NyZiA9IHByb3BzLmNvbnRleHQuY3NyZjtcblxuICBjb25zdCB1cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoZWRpdF91cmwsIHtcbiAgICAuLi5wYXJhbXNcbiAgfSlcblxuICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3Bvc3RfcmVxdWVzdCh1cmwsIHJlc3RfcGFyYW1zKTtcblxuICByZWZyZXNoKCk7XG59O1xuXG5cbmZ1bmN0aW9uIGNvbHVtbnNfc29ydGluZyhjb2wsIHIwLCByMSkge1xuICBpZiAoY29sICE9IG51bGwpIHtcbiAgICBsZXQgcjBfY29sID0gcjBbY29sLmRhdGEuZGF0YV9maWVsZF07XG4gICAgbGV0IHIxX2NvbCA9IHIxW2NvbC5kYXRhLmRhdGFfZmllbGRdO1xuICAgIGlmKGNvbC5pZCA9PSBcImxhc3RfaXBcIikge1xuICAgICAgaWYgKHIwX2NvbCAhPSAnJykge1xuICAgICAgICByMF9jb2wgPSB0YWtlX2lwKHIwX2NvbCk7XG4gICAgICAgIHIwX2NvbCA9IE50b3BVdGlscy5jb252ZXJ0SVBBZGRyZXNzKHIwX2NvbCk7XG4gICAgICB9IFxuICAgICAgaWYgKHIxX2NvbCAhPSAnJykge1xuICAgICAgICByMV9jb2wgPSB0YWtlX2lwKHIxX2NvbCk7XG4gICAgICAgIHIxX2NvbCA9IE50b3BVdGlscy5jb252ZXJ0SVBBZGRyZXNzKHIxX2NvbCk7XG4gICAgICB9XG4gICAgICBpZiAoY29sLnNvcnQgPT0gMSkge1xuICAgICAgICByZXR1cm4gcjBfY29sLmxvY2FsZUNvbXBhcmUocjFfY29sKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByMV9jb2wubG9jYWxlQ29tcGFyZShyMF9jb2wpO1xuICAgIH0gZWxzZSBpZihjb2wuaWQgPT0gXCJtYW51ZmFjdHVyZXJcIiApIHtcbiAgICAgIGlmIChyMF9jb2wgPT09IHVuZGVmaW5lZCkgcjBfY29sID0gJyc7XG4gICAgICBpZiAocjFfY29sID09PSB1bmRlZmluZWQpIHIxX2NvbCA9ICcnO1xuICAgICAgaWYgKGNvbC5zb3J0ID09IDEpIHtcbiAgICAgICAgcmV0dXJuIHIwX2NvbC5sb2NhbGVDb21wYXJlKHIxX2NvbCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcjFfY29sLmxvY2FsZUNvbXBhcmUocjBfY29sKTtcbiAgICB9IGVsc2UgaWYoY29sLmlkID09IFwibWFjX2FkZHJlc3NcIikge1xuICAgICAgcjBfY29sID0gcjBfY29sLm1hYztcbiAgICAgIHIxX2NvbCA9IHIxX2NvbC5tYWM7XG4gICAgICBpZiAoY29sLnNvcnQgPT0gMSkge1xuICAgICAgICByZXR1cm4gcjBfY29sLmxvY2FsZUNvbXBhcmUocjFfY29sKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByMV9jb2wubG9jYWxlQ29tcGFyZShyMF9jb2wpO1xuICAgIH1lbHNlIGlmKGNvbC5pZCA9PSBcImZpcnN0X3NlZW5cIikge1xuICAgICAgcjBfY29sID0gcjBbXCJmaXJzdF9zZWVuXCJdW1widGltZXN0YW1wXCJdID09IDAgPyAnJyA6IHIwW1wiZmlyc3Rfc2VlblwiXVtcImRhdGFcIl07XG4gICAgICByMV9jb2wgPSByMVtcImZpcnN0X3NlZW5cIl1bXCJ0aW1lc3RhbXBcIl0gPT0gMCA/ICcnIDogcjFbXCJmaXJzdF9zZWVuXCJdW1wiZGF0YVwiXTtcbiAgICAgIGlmIChjb2wuc29ydCA9PSAxKSB7XG4gICAgICAgIHJldHVybiByMF9jb2wubG9jYWxlQ29tcGFyZShyMV9jb2wpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHIxX2NvbC5sb2NhbGVDb21wYXJlKHIwX2NvbCk7XG4gICAgfSBlbHNlIGlmKGNvbC5pZCA9PSBcImxhc3Rfc2VlblwiKSB7XG4gICAgICByMF9jb2wgPSByMFtcImxhc3Rfc2VlblwiXVtcInRpbWVzdGFtcFwiXSA9PSAwID8gJycgOiByMFtcImxhc3Rfc2VlblwiXVtcImRhdGFcIl07XG4gICAgICByMV9jb2wgPSByMVtcImxhc3Rfc2VlblwiXVtcInRpbWVzdGFtcFwiXSA9PSAwID8gJycgOiByMVtcImxhc3Rfc2VlblwiXVtcImRhdGFcIl07XG4gICAgICBpZiAoY29sLnNvcnQgPT0gMSkge1xuICAgICAgICByZXR1cm4gcjBfY29sLmxvY2FsZUNvbXBhcmUocjFfY29sKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByMV9jb2wubG9jYWxlQ29tcGFyZShyMF9jb2wpO1xuICAgIH0gZWxzZSBpZiAoY29sLmlkID09IFwic3RhdHVzXCIpIHtcbiAgICAgIGlmIChjb2wuc29ydCA9PSAxKSB7XG4gICAgICAgIHJldHVybiByMF9jb2wubG9jYWxlQ29tcGFyZShyMV9jb2wpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHIxX2NvbC5sb2NhbGVDb21wYXJlKHIwX2NvbCk7XG4gICAgfSBlbHNlIGlmIChjb2wuaWQgPT0gXCJ0cmlnZ2VyX2FsZXJ0XCIpIHtcbiAgICAgIHIwX2NvbCA9IGZvcm1hdF9ib29sKHIwX2NvbCk7XG4gICAgICByMV9jb2wgPSBmb3JtYXRfYm9vbChyMV9jb2wpO1xuXG4gICAgICBpZiAoY29sLnNvcnQgPT0gMSkge1xuICAgICAgICByZXR1cm4gcjBfY29sLmxvY2FsZUNvbXBhcmUocjFfY29sKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByMV9jb2wubG9jYWxlQ29tcGFyZShyMF9jb2wpO1xuICAgIH1cbiAgfVxuICBcbn1cblxuZnVuY3Rpb24gdGFrZV9pcChyX2NvbCkge1xuICBjb25zdCBpcCA9IHJfY29sLnNwbGl0KCdob3N0PScpWzFdLnNwbGl0KFwiXFwnXCIpWzBdO1xuICByZXR1cm4gaXA7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdF9ib29sKHJfY29sKSB7XG4gIGlmIChyX2NvbCkge1xuICAgIHJldHVybiAndHJ1ZSc7XG4gIH1cblxuICBpZiAoIXJfY29sKSB7XG4gICAgcmV0dXJuICdmYWxzZSc7XG4gIH1cblxuICBpZiAocl9jb2wgPT0gJ3RydWUnKSB7XG4gICAgcmV0dXJuIHJfY29sO1xuICB9XG5cbiAgaWYgKHJfY29sID09ICdmYWxzZScpIHtcbiAgICByZXR1cm4gcl9jb2w7XG4gIH1cbn1cblxuY29uc3QgbWFwX3RhYmxlX2RlZl9jb2x1bW5zID0gYXN5bmMgKGNvbHVtbnMpID0+IHtcbiAgICBcbiAgbGV0IG1hcF9jb2x1bW5zID0ge1xuICAgIFwibWFjX2FkZHJlc3NcIjogKGRhdGEsIHJvdykgPT4ge1xuICAgICAgbGV0IGxhYmVsID0gZGF0YS5tYWM7XG4gICAgICBsZXQgYWxpYXMgPSBkYXRhLmFsaWFzO1xuXG4gICAgICBpZiAoKGRhdGEuc3ltYm9saWNfbWFjKSAmJiAoZGF0YS5zeW1ib2xpY19tYWMgIT0gbGFiZWwpKVxuICAgICAgICBsYWJlbCA9IGRhdGEuc3ltYm9saWNfbWFjO1xuXG4gICAgICBpZiAoKGFsaWFzICE9IG51bGwpICYmIChhbGlhcyAhPSBsYWJlbCkpXG4gICAgICAgIGxhYmVsID0gYCR7bGFiZWx9ICgke2FsaWFzfSlgO1xuXG4gICAgICBpZiAoZGF0YS51cmwgIT0gbnVsbClcbiAgICAgICAgbGFiZWwgPSBgPGEgaHJlZj0nJHtkYXRhLnVybH0nIHRpdGxlPScke2RhdGEubWFjfSc+JHtsYWJlbH08L2E+YDtcblxuICAgICAgcmV0dXJuIGxhYmVsO1xuICAgIH0sXG4gICAgXCJmaXJzdF9zZWVuXCI6IChmaXJzdF9zZWVuLCByb3cpID0+IHtcbiAgICAgIGlmIChmaXJzdF9zZWVuLnRpbWVzdGFtcCA9PSAwKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmaXJzdF9zZWVuLmRhdGE7XG4gICAgICB9XG4gICAgfSwgXG4gICAgXCJsYXN0X3NlZW5cIjogKGxhc3Rfc2Vlbiwgcm93KSA9PiB7XG4gICAgICBpZiAobGFzdF9zZWVuLnRpbWVzdGFtcCA9PSAwKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBsYXN0X3NlZW4uZGF0YTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFwic3RhdHVzXCI6IChzdGF0dXMsIHJvdykgPT4ge1xuICAgICAgLy88c3BhbiBjbGFzcz1cImJhZGdlIGJnLXN1Y2Nlc3NcIiB0aXRsZT1cIiR7bGFiZWx9XCI+JHtsYWJlbH08L3NwYW4+XG4gICAgICAvLzxzcGFuIGNsYXNzPVwiYmFkZ2UgYmctZGFuZ2VyXCIgdGl0bGU9XCIke2xhYmVsfVwiPiR7bGFiZWx9PC9zcGFuPlxuICAgICAgLy9jb25zdCBsYWJlbCA9IF9pMThuKHN0YXR1cyk7XG4gICAgICBsZXQgbGFiZWwgPSBcIlwiO1xuICAgICAgaWYgKHN0YXR1cyA9PSBcImFsbG93ZWRcIikge1xuICAgICAgICBsYWJlbCA9IF9pMThuKFwiZWRpdF9jaGVjay5hdXRob3JpemVkXCIpO1xuICAgICAgICByZXR1cm4gYDxzcGFuIGNsYXNzPVwiYmFkZ2UgYmctc3VjY2Vzc1wiIHRpdGxlPVwiJHtsYWJlbH1cIj4ke2xhYmVsfTwvc3Bhbj5gXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsYWJlbCA9IF9pMThuKFwiZWRpdF9jaGVjay51bmF1dGhvcml6ZWRcIik7XG4gICAgICAgIHJldHVybiBgPHNwYW4gY2xhc3M9XCJiYWRnZSBiZy1kYW5nZXJcIiB0aXRsZT1cIiR7bGFiZWx9XCI+JHtsYWJlbH08L3NwYW4+YFxuICAgICAgfVxuXG4gICAgfSxcbiAgICBcInRyaWdnZXJfYWxlcnRcIjogKHRyaWdnZXJfYWxlcnQsIHJvdykgPT4ge1xuICAgICAgbGV0IGlzX2VuYWJsZWQgPSBmYWxzZTtcbiAgICAgIGlmICh0cmlnZ2VyX2FsZXJ0ID09IFwiZmFsc2VcIikgXG4gICAgICAgIGlzX2VuYWJsZWQgPSBmYWxzZTtcbiAgICAgIGVsc2VcbiAgICAgICAgaXNfZW5hYmxlZCA9IHRyaWdnZXJfYWxlcnQ7XG4gICAgICByZXR1cm4gaXNfZW5hYmxlZCA/IGA8aSBjbGFzcz1cImZhcyBmYS1jaGVjayB0ZXh0LXN1Y2Nlc3NcIj48L2k+YCA6IGA8aSBjbGFzcz1cImZhcyBmYS10aW1lcyB0ZXh0LWRhbmdlclwiPjwvaT5gO1xuICAgIH1cbiAgfVxuICBjb2x1bW5zLmZvckVhY2goKGMpID0+IHtcbiAgICBjLnJlbmRlcl9mdW5jID0gbWFwX2NvbHVtbnNbYy5kYXRhX2ZpZWxkXTtcblxuICAgIC8qaWYgKGMuaWQgPT0gXCJhY3Rpb25zXCIpIHtcbiAgICAgICAgICAgIFxuICAgICAgYy5idXR0b25fZGVmX2FycmF5LmZvckVhY2goKGIpID0+IHtcbiAgICAgICAgICBcbiAgICAgICAgYi5mX21hcF9jbGFzcyA9IChjdXJyZW50X2NsYXNzLCByb3cpID0+IHsgXG4gICAgICAgICAgY3VycmVudF9jbGFzcyA9IGN1cnJlbnRfY2xhc3MuZmlsdGVyKChjbGFzc19pdGVtKSA9PiBjbGFzc19pdGVtICE9IFwibGluay1kaXNhYmxlZFwiKTtcbiAgICAgICAgICBpZigocm93LmlzX29rX2xhc3Rfc2NhbiA9PSA0IHx8IHJvdy5pc19va19sYXN0X3NjYW4gPT0gbnVsbCB8fCByb3cubnVtX29wZW5fcG9ydHMgPCAxKSAmJiB2aXNpYmxlX2RpY3RbYi5pZF0pIHtcbiAgICAgICAgICAgIGN1cnJlbnRfY2xhc3MucHVzaChcImxpbmstZGlzYWJsZWRcIik7IFxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gY3VycmVudF9jbGFzcztcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSovXG4gIH0pO1xuICAgIC8vIGNvbnNvbGUubG9nKGNvbHVtbnMpO1xuICByZXR1cm4gY29sdW1ucztcbn07XG5cbmNvbnN0IGdldF9leHRyYV9wYXJhbXNfb2JqID0gKCkgPT4ge1xuICAgIC8qbGV0IHBhcmFtcyA9IGdldF91cmxfcGFyYW1zKGFjdGl2ZV9wYWdlLCBwZXJfcGFnZSwgY29sdW1uc193cmFwLCBtYXBfc2VhcmNoLCBmaXJzdF9nZXRfcm93cyk7XG4gICAgc2V0X3BhcmFtc19pbl91cmwocGFyYW1zKTsqL1xuICAgIGxldCBwYXJhbXMgPSBnZXRfdXJsX3BhcmFtcygpO1xuICAgIHJldHVybiBwYXJhbXM7XG59O1xuXG5mdW5jdGlvbiBnZXRfdXJsX3BhcmFtcygpIHtcbiAgICBsZXQgYWN0dWFsX3BhcmFtcyA9IHtcbiAgICAgICAgaWZpZDogbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJpZmlkXCIpIHx8IHByb3BzLmNvbnRleHQuaWZpZCxcbiAgICB9OyAgICBcblxuICAgIHJldHVybiBhY3R1YWxfcGFyYW1zO1xufVxuXG5jb25zdCBtYXBfY29uZmlnID0gKGNvbmZpZykgPT4ge1xuICAgIHJldHVybiBjb25maWc7XG59O1xuXG48L3NjcmlwdD5cbiIsInsjXG4gIChDKSAyMDIyIC0gbnRvcC5vcmdcbiAgVGhpcyB0ZW1wbGF0ZSBpcyB1c2VkIGJ5IHRoZSBgVExTIGhvc3QgZGV0YWlsc2AgcGFnZSBpbnNpZGUgdGhlIGBIb3N0c2AuICAgIFxuI31cblxuPHRlbXBsYXRlPlxuXG48ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRhbmdlciBkLW5vbmVcIiBpZD0nYWxlcnQtcm93LWJ1dHRvbnMnIHJvbGU9XCJhbGVydFwiPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICBcdDxkaXYgaWQ9XCJ0YWJsZV9ob3N0X3Rsc1wiPlxuICAgICAgICAgIDxkYXRhdGFibGUgcmVmPVwidGFibGVfZmluZ2VycHJpbnRcIlxuICAgICAgICAgICAgOnRhYmxlX2J1dHRvbnM9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC50YWJsZV9idXR0b25zXCJcbiAgICAgICAgICAgIDpjb2x1bW5zX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmNvbHVtbnNfY29uZmlnXCJcbiAgICAgICAgICAgIDpkYXRhX3VybD1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmRhdGFfdXJsXCJcbiAgICAgICAgICAgIDplbmFibGVfc2VhcmNoPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQuZW5hYmxlX3NlYXJjaFwiXG4gICAgICAgICAgICA6dGFibGVfY29uZmlnPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfY29uZmlnXCI+XG4gICAgICAgICAgPC9kYXRhdGFibGU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1mb290ZXJcIj5cbiAgICAgICAgPGI+e3sgaTE4bignZmluZ2VycHJpbnRfbm90ZScpIH19PC9iPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRhdGFibGUgfSBmcm9tIFwiLi9kYXRhdGFibGUudnVlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1x0ICBcbiAgICAnZGF0YXRhYmxlJzogRGF0YXRhYmxlLFxuICB9LFxuICBwcm9wczoge1xuICAgIHBhZ2VfY3NyZjogU3RyaW5nLFxuICAgIHVybF9wYXJhbXM6IE9iamVjdCxcbiAgfSxcbiAgLyoqXG4gICAqIEZpcnN0IG1ldGhvZCBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAqL1xuICBjcmVhdGVkKCkge1xuICAgIHN0YXJ0X2RhdGF0YWJsZSh0aGlzKTtcbiAgfSxcbiAgbW91bnRlZCgpIHt9LCAgICBcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG4gICAgICBjb25maWdfZGV2aWNlc19zdGFuZGFyZDogbnVsbCxcbiAgICAgIGNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHk6IG51bGwsXG4gICAgfTtcbiAgfSxcbiAgbWV0aG9kczogeyBcbiAgICAvKiBNZXRob2QgdXNlZCB0byBzd2l0Y2ggYWN0aXZlIHRhYmxlIHRhYiAqL1xuICAgIHJlbG9hZF90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdGFibGUgPSB0aGlzLmdldF9hY3RpdmVfdGFibGUoKTtcbiAgICAgIHRhYmxlLnJlbG9hZCgpO1xuICAgIH0sXG4gICAgZ2V0X2FjdGl2ZV90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy4kcmVmc1tgdGFibGVfZmluZ2VycHJpbnRgXTtcbiAgICB9LFxuICB9LFxufSAgXG5cbmZ1bmN0aW9uIHN0YXJ0X2RhdGF0YWJsZShEYXRhdGFibGVWdWUpIHtcbiAgY29uc3QgZGF0YXRhYmxlQnV0dG9uID0gW107XG4gIGxldCBjb2x1bW5zID0gW107XG4gIGxldCBkZWZhdWx0X3NvcnRpbmdfY29sdW1ucyA9IDMgLyogQ29udGFjdHMgY29sdW1uICovO1xuICBcbiAgLyogTWFuYWdlIHRoZSBidXR0b25zIGNsb3NlIHRvIHRoZSBzZWFyY2ggYm94ICovXG4gIGRhdGF0YWJsZUJ1dHRvbi5wdXNoKHtcbiAgICB0ZXh0OiAnPGkgY2xhc3M9XCJmYXMgZmEtc3luY1wiPjwvaT4nLFxuICAgIGNsYXNzTmFtZTogJ2J0bi1saW5rJyxcbiAgICBhY3Rpb246IGZ1bmN0aW9uIChlLCBkdCwgbm9kZSwgY29uZmlnKSB7XG4gICAgICBEYXRhdGFibGVWdWUucmVsb2FkX3RhYmxlKCk7XG4gICAgfVxuICB9KTtcbiAgXG4gIGxldCBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnID0ge1xuICAgIHRhYmxlX2J1dHRvbnM6IGRhdGF0YWJsZUJ1dHRvbixcbiAgICBjb2x1bW5zX2NvbmZpZzogW10sXG4gICAgZGF0YV91cmw6IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvZmluZ2VycHJpbnQvZGF0YS5sdWFgLCB1cmxfcGFyYW1zKSxcbiAgICBlbmFibGVfc2VhcmNoOiB0cnVlLFxuICB9O1xuXG4gIC8qIFN0YW5kYXJkIHRhYmxlIGNvbmZpZ3VyYXRpb24gKi8gIFxuXG4gIGNvbHVtbnMgPSBbXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiamEzX2NsaWVudF9maW5nZXJwcmludFwiKSwgbmFtZTogJ2phMycsIGRhdGE6ICdqYTMnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlbmRlcjogKGRhdGEsIHR5cGUpID0+IHtcbiAgICAgICAgcmV0dXJuIGA8YSBjbGFzcz1cIm50b3BuZy1leHRlcm5hbC1saW5rXCIgaHJlZj1cImh0dHBzOi8vc3NsYmwuYWJ1c2UuY2gvamEzLWZpbmdlcnByaW50cy8ke2RhdGF9XCI+JHtkYXRhfSA8aSBjbGFzcz1cImZhcyBmYS1leHRlcm5hbC1saW5rLWFsdFwiPjwvaT48L2E+YDtcbiAgICAgIH0sIHJlc3BvbnNpdmVQcmlvcml0eTogMCwgY3JlYXRlZENlbGw6IERhdGFUYWJsZVJlbmRlcnMuYXBwbHlDZWxsU3R5bGUgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJzdGF0dXNcIiksIG5hbWU6ICdpc19tYWxpY2lvdXMnLCBkYXRhOiAnaXNfbWFsaWNpb3VzJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAgdGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDAsIHJlbmRlcjogKGRhdGEsIHR5cGUpID0+IHtcbiAgICAgICAgcmV0dXJuIChkYXRhID8gYDxpIGNsYXNzPVwiZmEtc29saWQgZmEtZmFjZS1mcm93biB0ZXh0LWRhbmdlclwiIHRpdGxlPVwiJHtpMThuKCdtYWxpY2lvdXMnKX1cIj48L2k+YCA6IGA8aSBjbGFzcz1cImZhLXNvbGlkIGZhLWZhY2Utc21pbGUgdGV4dC1zdWNjZXNzXCIgdGl0bGU9XCIke2kxOG4oJ29rJyl9XCI+PC9pPmApO1xuICAgICAgfVxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiYXBwX25hbWVcIiksIG5hbWU6ICdhcHBfbmFtZScsIGRhdGE6ICdhcHBfbmFtZScsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwIHRleHQtcmlnaHQnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJudW1fdXNlc1wiKSwgbmFtZTogJ251bV91c2VzJywgZGF0YTogJ251bV91c2VzJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAgdGV4dC1yaWdodCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiAoZGF0YSkgPT4geyByZXR1cm4gTnRvcFV0aWxzLmZvcm1hdFZhbHVlKGRhdGEpOyB9IH0sXG4gIF07XG5cbiAgLyogRXh0cmEgdGFibGUgY29uZmlndXJhdGlvbiAqL1xuICBsZXQgdGFibGVfY29uZmlnID0ge1xuICAgIHNlcnZlclNpZGU6IGZhbHNlLFxuICAgIG9yZGVyOiBbWyBkZWZhdWx0X3NvcnRpbmdfY29sdW1ucywgJ2Rlc2MnIF1dXG4gIH07XG4gIFxuICBsZXQgY29uZmlnRGV2aWNlcyA9IG50b3BuZ191dGlsaXR5LmNsb25lKGRlZmF1bHREYXRhdGFibGVDb25maWcpO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2J1dHRvbnMgPSBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnLnRhYmxlX2J1dHRvbnM7XG4gIGNvbmZpZ0RldmljZXMuZGF0YV91cmwgPSBgJHtjb25maWdEZXZpY2VzLmRhdGFfdXJsfWA7XG4gIGNvbmZpZ0RldmljZXMuY29sdW1uc19jb25maWcgPSBjb2x1bW5zO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2NvbmZpZyA9IG50b3BuZ191dGlsaXR5LmNsb25lKHRhYmxlX2NvbmZpZyk7XG4gIERhdGF0YWJsZVZ1ZS5jb25maWdfZGV2aWNlc19zdGFuZGFyZCA9IGNvbmZpZ0RldmljZXM7XG59XG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsInsjXG4gIChDKSAyMDIyIC0gbnRvcC5vcmdcbiAgVGhpcyB0ZW1wbGF0ZSBpcyB1c2VkIGJ5IHRoZSBgVExTIGhvc3QgZGV0YWlsc2AgcGFnZSBpbnNpZGUgdGhlIGBIb3N0c2AuICAgIFxuI31cblxuPHRlbXBsYXRlPlxuXG48ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRhbmdlciBkLW5vbmVcIiBpZD0nYWxlcnQtcm93LWJ1dHRvbnMnIHJvbGU9XCJhbGVydFwiPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICBcdDxkaXYgaWQ9XCJ0YWJsZV9ob3N0X3Rsc1wiPlxuICAgICAgICAgIDxkYXRhdGFibGUgcmVmPVwidGFibGVfZmluZ2VycHJpbnRcIlxuICAgICAgICAgICAgOnRhYmxlX2J1dHRvbnM9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC50YWJsZV9idXR0b25zXCJcbiAgICAgICAgICAgIDpjb2x1bW5zX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmNvbHVtbnNfY29uZmlnXCJcbiAgICAgICAgICAgIDpkYXRhX3VybD1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmRhdGFfdXJsXCJcbiAgICAgICAgICAgIDplbmFibGVfc2VhcmNoPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQuZW5hYmxlX3NlYXJjaFwiXG4gICAgICAgICAgICA6dGFibGVfY29uZmlnPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfY29uZmlnXCI+XG4gICAgICAgICAgPC9kYXRhdGFibGU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1mb290ZXJcIj5cbiAgICAgICAgPGI+e3sgaTE4bignZmluZ2VycHJpbnRfbm90ZScpIH19PC9iPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRhdGFibGUgfSBmcm9tIFwiLi9kYXRhdGFibGUudnVlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1x0ICBcbiAgICAnZGF0YXRhYmxlJzogRGF0YXRhYmxlLFxuICB9LFxuICBwcm9wczoge1xuICAgIHBhZ2VfY3NyZjogU3RyaW5nLFxuICAgIHVybF9wYXJhbXM6IE9iamVjdCxcbiAgfSxcbiAgLyoqXG4gICAqIEZpcnN0IG1ldGhvZCBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAqL1xuICBjcmVhdGVkKCkge1xuICAgIHN0YXJ0X2RhdGF0YWJsZSh0aGlzKTtcbiAgfSxcbiAgbW91bnRlZCgpIHt9LCAgICBcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG4gICAgICBjb25maWdfZGV2aWNlc19zdGFuZGFyZDogbnVsbCxcbiAgICAgIGNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHk6IG51bGwsXG4gICAgfTtcbiAgfSxcbiAgbWV0aG9kczogeyBcbiAgICAvKiBNZXRob2QgdXNlZCB0byBzd2l0Y2ggYWN0aXZlIHRhYmxlIHRhYiAqL1xuICAgIHJlbG9hZF90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdGFibGUgPSB0aGlzLmdldF9hY3RpdmVfdGFibGUoKTtcbiAgICAgIHRhYmxlLnJlbG9hZCgpO1xuICAgIH0sXG4gICAgZ2V0X2FjdGl2ZV90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy4kcmVmc1tgdGFibGVfZmluZ2VycHJpbnRgXTtcbiAgICB9LFxuICB9LFxufSAgXG5cbmZ1bmN0aW9uIHN0YXJ0X2RhdGF0YWJsZShEYXRhdGFibGVWdWUpIHtcbiAgY29uc3QgZGF0YXRhYmxlQnV0dG9uID0gW107XG4gIGxldCBjb2x1bW5zID0gW107XG4gIGxldCBkZWZhdWx0X3NvcnRpbmdfY29sdW1ucyA9IDMgLyogQ29udGFjdHMgY29sdW1uICovO1xuICBcbiAgLyogTWFuYWdlIHRoZSBidXR0b25zIGNsb3NlIHRvIHRoZSBzZWFyY2ggYm94ICovXG4gIGRhdGF0YWJsZUJ1dHRvbi5wdXNoKHtcbiAgICB0ZXh0OiAnPGkgY2xhc3M9XCJmYXMgZmEtc3luY1wiPjwvaT4nLFxuICAgIGNsYXNzTmFtZTogJ2J0bi1saW5rJyxcbiAgICBhY3Rpb246IGZ1bmN0aW9uIChlLCBkdCwgbm9kZSwgY29uZmlnKSB7XG4gICAgICBEYXRhdGFibGVWdWUucmVsb2FkX3RhYmxlKCk7XG4gICAgfVxuICB9KTtcbiAgXG4gIGxldCBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnID0ge1xuICAgIHRhYmxlX2J1dHRvbnM6IGRhdGF0YWJsZUJ1dHRvbixcbiAgICBjb2x1bW5zX2NvbmZpZzogW10sXG4gICAgZGF0YV91cmw6IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvZmluZ2VycHJpbnQvZGF0YS5sdWFgLCB1cmxfcGFyYW1zKSxcbiAgICBlbmFibGVfc2VhcmNoOiB0cnVlLFxuICB9O1xuXG4gIC8qIFN0YW5kYXJkIHRhYmxlIGNvbmZpZ3VyYXRpb24gKi8gIFxuXG4gIGNvbHVtbnMgPSBbXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiamEzX2NsaWVudF9maW5nZXJwcmludFwiKSwgbmFtZTogJ2phMycsIGRhdGE6ICdqYTMnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlbmRlcjogKGRhdGEsIHR5cGUpID0+IHtcbiAgICAgICAgcmV0dXJuIGA8YSBjbGFzcz1cIm50b3BuZy1leHRlcm5hbC1saW5rXCIgaHJlZj1cImh0dHBzOi8vc3NsYmwuYWJ1c2UuY2gvamEzLWZpbmdlcnByaW50cy8ke2RhdGF9XCI+JHtkYXRhfSA8aSBjbGFzcz1cImZhcyBmYS1leHRlcm5hbC1saW5rLWFsdFwiPjwvaT48L2E+YDtcbiAgICAgIH0sIHJlc3BvbnNpdmVQcmlvcml0eTogMCwgY3JlYXRlZENlbGw6IERhdGFUYWJsZVJlbmRlcnMuYXBwbHlDZWxsU3R5bGUgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJzdGF0dXNcIiksIG5hbWU6ICdpc19tYWxpY2lvdXMnLCBkYXRhOiAnaXNfbWFsaWNpb3VzJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAgdGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDAsIHJlbmRlcjogKGRhdGEsIHR5cGUpID0+IHtcbiAgICAgICAgcmV0dXJuIChkYXRhID8gYDxpIGNsYXNzPVwiZmEtc29saWQgZmEtZmFjZS1mcm93biB0ZXh0LWRhbmdlclwiIHRpdGxlPVwiJHtpMThuKCdtYWxpY2lvdXMnKX1cIj48L2k+YCA6IGA8aSBjbGFzcz1cImZhLXNvbGlkIGZhLWZhY2Utc21pbGUgdGV4dC1zdWNjZXNzXCIgdGl0bGU9XCIke2kxOG4oJ29rJyl9XCI+PC9pPmApO1xuICAgICAgfVxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiYXBwX25hbWVcIiksIG5hbWU6ICdhcHBfbmFtZScsIGRhdGE6ICdhcHBfbmFtZScsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwIHRleHQtcmlnaHQnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJudW1fdXNlc1wiKSwgbmFtZTogJ251bV91c2VzJywgZGF0YTogJ251bV91c2VzJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAgdGV4dC1yaWdodCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiAoZGF0YSkgPT4geyByZXR1cm4gTnRvcFV0aWxzLmZvcm1hdFZhbHVlKGRhdGEpOyB9IH0sXG4gIF07XG5cbiAgLyogRXh0cmEgdGFibGUgY29uZmlndXJhdGlvbiAqL1xuICBsZXQgdGFibGVfY29uZmlnID0ge1xuICAgIHNlcnZlclNpZGU6IGZhbHNlLFxuICAgIG9yZGVyOiBbWyBkZWZhdWx0X3NvcnRpbmdfY29sdW1ucywgJ2Rlc2MnIF1dXG4gIH07XG4gIFxuICBsZXQgY29uZmlnRGV2aWNlcyA9IG50b3BuZ191dGlsaXR5LmNsb25lKGRlZmF1bHREYXRhdGFibGVDb25maWcpO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2J1dHRvbnMgPSBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnLnRhYmxlX2J1dHRvbnM7XG4gIGNvbmZpZ0RldmljZXMuZGF0YV91cmwgPSBgJHtjb25maWdEZXZpY2VzLmRhdGFfdXJsfWA7XG4gIGNvbmZpZ0RldmljZXMuY29sdW1uc19jb25maWcgPSBjb2x1bW5zO1xuICBjb25maWdEZXZpY2VzLnRhYmxlX2NvbmZpZyA9IG50b3BuZ191dGlsaXR5LmNsb25lKHRhYmxlX2NvbmZpZyk7XG4gIERhdGF0YWJsZVZ1ZS5jb25maWdfZGV2aWNlc19zdGFuZGFyZCA9IGNvbmZpZ0RldmljZXM7XG59XG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsInsjXG4gIChDKSAyMDIyIC0gbnRvcC5vcmdcbiAgVGhpcyB0ZW1wbGF0ZSBpcyB1c2VkIGJ5IHRoZSBgU1NIIGhvc3QgZGV0YWlsc2AgcGFnZSBpbnNpZGUgdGhlIGBIb3N0c2AuICAgIFxuI31cblxuPHRlbXBsYXRlPlxuXG48ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRhbmdlciBkLW5vbmVcIiBpZD0nYWxlcnQtcm93LWJ1dHRvbnMnIHJvbGU9XCJhbGVydFwiPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICBcdDxkaXYgaWQ9XCJ0YWJsZV9ob3N0X3NzaFwiPlxuICAgICAgICAgIDxkYXRhdGFibGUgcmVmPVwidGFibGVfaGFzc2hcIlxuICAgICAgICAgICAgOnRhYmxlX2J1dHRvbnM9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC50YWJsZV9idXR0b25zXCJcbiAgICAgICAgICAgIDpjb2x1bW5zX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmNvbHVtbnNfY29uZmlnXCJcbiAgICAgICAgICAgIDpkYXRhX3VybD1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmRhdGFfdXJsXCJcbiAgICAgICAgICAgIDplbmFibGVfc2VhcmNoPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQuZW5hYmxlX3NlYXJjaFwiXG4gICAgICAgICAgICA6dGFibGVfY29uZmlnPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfY29uZmlnXCI+XG4gICAgICAgICAgPC9kYXRhdGFibGU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRhdGFibGUgfSBmcm9tIFwiLi9kYXRhdGFibGUudnVlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1x0ICBcbiAgICAnZGF0YXRhYmxlJzogRGF0YXRhYmxlLFxuICB9LFxuICBwcm9wczoge1xuICAgIHBhZ2VfY3NyZjogU3RyaW5nLFxuICAgIHVybF9wYXJhbXM6IE9iamVjdCxcbiAgfSxcbiAgLyoqXG4gICAqIEZpcnN0IG1ldGhvZCBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAqL1xuICBjcmVhdGVkKCkge1xuICAgIHN0YXJ0X2RhdGF0YWJsZSh0aGlzKTtcbiAgfSxcbiAgbW91bnRlZCgpIHt9LCAgICBcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG4gICAgICBjb25maWdfZGV2aWNlc19zdGFuZGFyZDogbnVsbCxcbiAgICAgIGNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHk6IG51bGwsXG4gICAgfTtcbiAgfSxcbiAgbWV0aG9kczogeyBcbiAgICAvKiBNZXRob2QgdXNlZCB0byBzd2l0Y2ggYWN0aXZlIHRhYmxlIHRhYiAqL1xuICAgIHJlbG9hZF90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdGFibGUgPSB0aGlzLmdldF9hY3RpdmVfdGFibGUoKTtcbiAgICAgIHRhYmxlLnJlbG9hZCgpO1xuICAgIH0sXG4gICAgZ2V0X2FjdGl2ZV90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy4kcmVmc1tgdGFibGVfaGFzc2hgXTtcbiAgICB9LFxuICB9LFxufSAgXG5cbmZ1bmN0aW9uIHN0YXJ0X2RhdGF0YWJsZShEYXRhdGFibGVWdWUpIHtcbiAgY29uc3QgZGF0YXRhYmxlQnV0dG9uID0gW107XG4gIGxldCBjb2x1bW5zID0gW107XG4gIGxldCBkZWZhdWx0X3NvcnRpbmdfY29sdW1ucyA9IDMgLyogQ29udGFjdHMgY29sdW1uICovO1xuICBcbiAgLyogTWFuYWdlIHRoZSBidXR0b25zIGNsb3NlIHRvIHRoZSBzZWFyY2ggYm94ICovXG4gIGRhdGF0YWJsZUJ1dHRvbi5wdXNoKHtcbiAgICB0ZXh0OiAnPGkgY2xhc3M9XCJmYXMgZmEtc3luY1wiPjwvaT4nLFxuICAgIGNsYXNzTmFtZTogJ2J0bi1saW5rJyxcbiAgICBhY3Rpb246IGZ1bmN0aW9uIChlLCBkdCwgbm9kZSwgY29uZmlnKSB7XG4gICAgICBEYXRhdGFibGVWdWUucmVsb2FkX3RhYmxlKCk7XG4gICAgfVxuICB9KTtcbiAgXG4gIGxldCBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnID0ge1xuICAgIHRhYmxlX2J1dHRvbnM6IGRhdGF0YWJsZUJ1dHRvbixcbiAgICBjb2x1bW5zX2NvbmZpZzogW10sXG4gICAgZGF0YV91cmw6IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvZmluZ2VycHJpbnQvZGF0YS5sdWFgLCB1cmxfcGFyYW1zKSxcbiAgICBlbmFibGVfc2VhcmNoOiB0cnVlLFxuICB9O1xuXG4gIC8qIFN0YW5kYXJkIHRhYmxlIGNvbmZpZ3VyYXRpb24gKi8gIFxuXG4gIGNvbHVtbnMgPSBbXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaGFzc2hfZmluZ2VycHJpbnRcIiksIG5hbWU6ICdqYTMnLCBkYXRhOiAnamEzJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZW5kZXI6IChkYXRhLCB0eXBlKSA9PiB7XG4gICAgICAgIHJldHVybiBgPGEgY2xhc3M9XCJudG9wbmctZXh0ZXJuYWwtbGlua1wiIGhyZWY9XCJodHRwczovL3NzbGJsLmFidXNlLmNoL2phMy1maW5nZXJwcmludHMvJHtkYXRhfVwiPiR7ZGF0YX0gPGkgY2xhc3M9XCJmYXMgZmEtZXh0ZXJuYWwtbGluay1hbHRcIj48L2k+PC9hPmA7XG4gICAgICB9LCByZXNwb25zaXZlUHJpb3JpdHk6IDAsIGNyZWF0ZWRDZWxsOiBEYXRhVGFibGVSZW5kZXJzLmFwcGx5Q2VsbFN0eWxlIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwic3RhdHVzXCIpLCBuYW1lOiAnaXNfbWFsaWNpb3VzJywgZGF0YTogJ2lzX21hbGljaW91cycsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwIHRleHQtY2VudGVyJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAwLCByZW5kZXI6IChkYXRhLCB0eXBlKSA9PiB7XG4gICAgICAgIHJldHVybiAoZGF0YSA/IGA8aSBjbGFzcz1cImZhLXNvbGlkIGZhLWZhY2UtZnJvd24gdGV4dC1kYW5nZXJcIiB0aXRsZT1cIiR7aTE4bignbWFsaWNpb3VzJyl9XCI+PC9pPmAgOiBgPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1mYWNlLXNtaWxlIHRleHQtc3VjY2Vzc1wiIHRpdGxlPVwiJHtpMThuKCdvaycpfVwiPjwvaT5gKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImFwcF9uYW1lXCIpLCBuYW1lOiAnYXBwX25hbWUnLCBkYXRhOiAnYXBwX25hbWUnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCB0ZXh0LXJpZ2h0JywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibnVtX3VzZXNcIiksIG5hbWU6ICdudW1fdXNlcycsIGRhdGE6ICdudW1fdXNlcycsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwIHRleHQtcmlnaHQnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogKGRhdGEpID0+IHsgcmV0dXJuIE50b3BVdGlscy5mb3JtYXRWYWx1ZShkYXRhKTsgfSB9LFxuICBdO1xuXG4gIC8qIEV4dHJhIHRhYmxlIGNvbmZpZ3VyYXRpb24gKi9cbiAgbGV0IHRhYmxlX2NvbmZpZyA9IHtcbiAgICBzZXJ2ZXJTaWRlOiBmYWxzZSxcbiAgICBvcmRlcjogW1sgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnMsICdkZXNjJyBdXVxuICB9O1xuICBcbiAgbGV0IGNvbmZpZ0RldmljZXMgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShkZWZhdWx0RGF0YXRhYmxlQ29uZmlnKTtcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9idXR0b25zID0gZGVmYXVsdERhdGF0YWJsZUNvbmZpZy50YWJsZV9idXR0b25zO1xuICBjb25maWdEZXZpY2VzLmRhdGFfdXJsID0gYCR7Y29uZmlnRGV2aWNlcy5kYXRhX3VybH1gO1xuICBjb25maWdEZXZpY2VzLmNvbHVtbnNfY29uZmlnID0gY29sdW1ucztcbiAgY29uZmlnRGV2aWNlcy50YWJsZV9jb25maWcgPSBudG9wbmdfdXRpbGl0eS5jbG9uZSh0YWJsZV9jb25maWcpO1xuICBEYXRhdGFibGVWdWUuY29uZmlnX2RldmljZXNfc3RhbmRhcmQgPSBjb25maWdEZXZpY2VzO1xufVxuPC9zY3JpcHQ+XG5cblxuXG5cblxuXG4iLCJ7I1xuICAoQykgMjAyMiAtIG50b3Aub3JnXG4gIFRoaXMgdGVtcGxhdGUgaXMgdXNlZCBieSB0aGUgYFNTSCBob3N0IGRldGFpbHNgIHBhZ2UgaW5zaWRlIHRoZSBgSG9zdHNgLiAgICBcbiN9XG5cbjx0ZW1wbGF0ZT5cblxuPGRpdiBjbGFzcz1cInJvd1wiPlxuICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1kYW5nZXIgZC1ub25lXCIgaWQ9J2FsZXJ0LXJvdy1idXR0b25zJyByb2xlPVwiYWxlcnRcIj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZFwiPlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgXHQ8ZGl2IGlkPVwidGFibGVfaG9zdF9zc2hcIj5cbiAgICAgICAgICA8ZGF0YXRhYmxlIHJlZj1cInRhYmxlX2hhc3NoXCJcbiAgICAgICAgICAgIDp0YWJsZV9idXR0b25zPVwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQudGFibGVfYnV0dG9uc1wiXG4gICAgICAgICAgICA6Y29sdW1uc19jb25maWc9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5jb2x1bW5zX2NvbmZpZ1wiXG4gICAgICAgICAgICA6ZGF0YV91cmw9XCJjb25maWdfZGV2aWNlc19zdGFuZGFyZC5kYXRhX3VybFwiXG4gICAgICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLmVuYWJsZV9zZWFyY2hcIlxuICAgICAgICAgICAgOnRhYmxlX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkLnRhYmxlX2NvbmZpZ1wiPlxuICAgICAgICAgIDwvZGF0YXRhYmxlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmF1bHQgYXMgRGF0YXRhYmxlIH0gZnJvbSBcIi4vZGF0YXRhYmxlLnZ1ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcdCAgXG4gICAgJ2RhdGF0YWJsZSc6IERhdGF0YWJsZSxcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgICB1cmxfcGFyYW1zOiBPYmplY3QsXG4gIH0sXG4gIC8qKlxuICAgKiBGaXJzdCBtZXRob2QgY2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjcmVhdGVkLlxuICAgKi9cbiAgY3JlYXRlZCgpIHtcbiAgICBzdGFydF9kYXRhdGFibGUodGhpcyk7XG4gIH0sXG4gIG1vdW50ZWQoKSB7fSwgICAgXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuICAgICAgY29uZmlnX2RldmljZXNfc3RhbmRhcmQ6IG51bGwsXG4gICAgICBjb25maWdfZGV2aWNlc19jZW50cmFsaXR5OiBudWxsLFxuICAgIH07XG4gIH0sXG4gIG1ldGhvZHM6IHsgXG4gICAgLyogTWV0aG9kIHVzZWQgdG8gc3dpdGNoIGFjdGl2ZSB0YWJsZSB0YWIgKi9cbiAgICByZWxvYWRfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHRhYmxlID0gdGhpcy5nZXRfYWN0aXZlX3RhYmxlKCk7XG4gICAgICB0YWJsZS5yZWxvYWQoKTtcbiAgICB9LFxuICAgIGdldF9hY3RpdmVfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJHJlZnNbYHRhYmxlX2hhc3NoYF07XG4gICAgfSxcbiAgfSxcbn0gIFxuXG5mdW5jdGlvbiBzdGFydF9kYXRhdGFibGUoRGF0YXRhYmxlVnVlKSB7XG4gIGNvbnN0IGRhdGF0YWJsZUJ1dHRvbiA9IFtdO1xuICBsZXQgY29sdW1ucyA9IFtdO1xuICBsZXQgZGVmYXVsdF9zb3J0aW5nX2NvbHVtbnMgPSAzIC8qIENvbnRhY3RzIGNvbHVtbiAqLztcbiAgXG4gIC8qIE1hbmFnZSB0aGUgYnV0dG9ucyBjbG9zZSB0byB0aGUgc2VhcmNoIGJveCAqL1xuICBkYXRhdGFibGVCdXR0b24ucHVzaCh7XG4gICAgdGV4dDogJzxpIGNsYXNzPVwiZmFzIGZhLXN5bmNcIj48L2k+JyxcbiAgICBjbGFzc05hbWU6ICdidG4tbGluaycsXG4gICAgYWN0aW9uOiBmdW5jdGlvbiAoZSwgZHQsIG5vZGUsIGNvbmZpZykge1xuICAgICAgRGF0YXRhYmxlVnVlLnJlbG9hZF90YWJsZSgpO1xuICAgIH1cbiAgfSk7XG4gIFxuICBsZXQgZGVmYXVsdERhdGF0YWJsZUNvbmZpZyA9IHtcbiAgICB0YWJsZV9idXR0b25zOiBkYXRhdGFibGVCdXR0b24sXG4gICAgY29sdW1uc19jb25maWc6IFtdLFxuICAgIGRhdGFfdXJsOiBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L2ZpbmdlcnByaW50L2RhdGEubHVhYCwgdXJsX3BhcmFtcyksXG4gICAgZW5hYmxlX3NlYXJjaDogdHJ1ZSxcbiAgfTtcblxuICAvKiBTdGFuZGFyZCB0YWJsZSBjb25maWd1cmF0aW9uICovICBcblxuICBjb2x1bW5zID0gW1xuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImhhc3NoX2ZpbmdlcnByaW50XCIpLCBuYW1lOiAnamEzJywgZGF0YTogJ2phMycsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVuZGVyOiAoZGF0YSwgdHlwZSkgPT4ge1xuICAgICAgICByZXR1cm4gYDxhIGNsYXNzPVwibnRvcG5nLWV4dGVybmFsLWxpbmtcIiBocmVmPVwiaHR0cHM6Ly9zc2xibC5hYnVzZS5jaC9qYTMtZmluZ2VycHJpbnRzLyR7ZGF0YX1cIj4ke2RhdGF9IDxpIGNsYXNzPVwiZmFzIGZhLWV4dGVybmFsLWxpbmstYWx0XCI+PC9pPjwvYT5gO1xuICAgICAgfSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAwLCBjcmVhdGVkQ2VsbDogRGF0YVRhYmxlUmVuZGVycy5hcHBseUNlbGxTdHlsZSB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcInN0YXR1c1wiKSwgbmFtZTogJ2lzX21hbGljaW91cycsIGRhdGE6ICdpc19tYWxpY2lvdXMnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCB0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogMCwgcmVuZGVyOiAoZGF0YSwgdHlwZSkgPT4ge1xuICAgICAgICByZXR1cm4gKGRhdGEgPyBgPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1mYWNlLWZyb3duIHRleHQtZGFuZ2VyXCIgdGl0bGU9XCIke2kxOG4oJ21hbGljaW91cycpfVwiPjwvaT5gIDogYDxpIGNsYXNzPVwiZmEtc29saWQgZmEtZmFjZS1zbWlsZSB0ZXh0LXN1Y2Nlc3NcIiB0aXRsZT1cIiR7aTE4bignb2snKX1cIj48L2k+YCk7XG4gICAgICB9XG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJhcHBfbmFtZVwiKSwgbmFtZTogJ2FwcF9uYW1lJywgZGF0YTogJ2FwcF9uYW1lJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAgdGV4dC1yaWdodCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcIm51bV91c2VzXCIpLCBuYW1lOiAnbnVtX3VzZXMnLCBkYXRhOiAnbnVtX3VzZXMnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCB0ZXh0LXJpZ2h0JywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IChkYXRhKSA9PiB7IHJldHVybiBOdG9wVXRpbHMuZm9ybWF0VmFsdWUoZGF0YSk7IH0gfSxcbiAgXTtcblxuICAvKiBFeHRyYSB0YWJsZSBjb25maWd1cmF0aW9uICovXG4gIGxldCB0YWJsZV9jb25maWcgPSB7XG4gICAgc2VydmVyU2lkZTogZmFsc2UsXG4gICAgb3JkZXI6IFtbIGRlZmF1bHRfc29ydGluZ19jb2x1bW5zLCAnZGVzYycgXV1cbiAgfTtcbiAgXG4gIGxldCBjb25maWdEZXZpY2VzID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoZGVmYXVsdERhdGF0YWJsZUNvbmZpZyk7XG4gIGNvbmZpZ0RldmljZXMudGFibGVfYnV0dG9ucyA9IGRlZmF1bHREYXRhdGFibGVDb25maWcudGFibGVfYnV0dG9ucztcbiAgY29uZmlnRGV2aWNlcy5kYXRhX3VybCA9IGAke2NvbmZpZ0RldmljZXMuZGF0YV91cmx9YDtcbiAgY29uZmlnRGV2aWNlcy5jb2x1bW5zX2NvbmZpZyA9IGNvbHVtbnM7XG4gIGNvbmZpZ0RldmljZXMudGFibGVfY29uZmlnID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUodGFibGVfY29uZmlnKTtcbiAgRGF0YXRhYmxlVnVlLmNvbmZpZ19kZXZpY2VzX3N0YW5kYXJkID0gY29uZmlnRGV2aWNlcztcbn1cbjwvc2NyaXB0PlxuXG5cblxuXG5cblxuIiwieyNcbiAgKEMpIDIwMjIgLSBudG9wLm9yZ1xuICBUaGlzIHRlbXBsYXRlIGlzIHVzZWQgYnkgdGhlIGBTU0ggaG9zdCBkZXRhaWxzYCBwYWdlIGluc2lkZSB0aGUgYEhvc3RzYC4gICAgXG4jfVxuXG48dGVtcGxhdGU+XG5cbjxwYWdlLW5hdmJhclxuICBpZD1cInBhZ2VfbmF2YmFyXCJcbiAgOm1haW5fdGl0bGU9XCJuYXZiYXJfY29udGV4dC5tYWluX3RpdGxlXCJcbiAgOnNlY29uZGFyeV90aXRsZV9saXN0PVwibmF2YmFyX2NvbnRleHQuc2Vjb25kYXJ5X3RpdGxlX2xpc3RcIlxuICA6aGVscF9saW5rPVwibmF2YmFyX2NvbnRleHQuaGVscF9saW5rXCJcbiAgOml0ZW1zX3RhYmxlPVwibmF2YmFyX2NvbnRleHQuaXRlbXNfdGFibGVcIlxuICBAY2xpY2tfaXRlbT1cImNsaWNrX2l0ZW1cIj5cbjwvcGFnZS1uYXZiYXI+XG5cbjxwYWdlLXNlcnZpY2UtbWFwIHYtaWY9XCJhY3RpdmVfdGFiID09ICdzZXJ2aWNlX21hcCcgJiYgcGFnZSA9PSAnZ3JhcGgnXCIgcmVmPVwic2VydmljZV9tYXBfZ3JhcGhcIlxuICA6cGFnZV9jc3JmPVwicGFnZV9jc3JmXCJcbiAgOnVybF9wYXJhbXM9XCJ1cmxfcGFyYW1zXCJcbiAgOmlmaWQ9XCJpZmlkXCJcbiAgOmlzX2FkbWluPVwiaXNfYWRtaW5cIlxuICA6bWFwX2lkPVwibWFwX2lkXCJcbiAgOmFsbF9maWx0ZXJfbGlzdD1cInNlcnZpY2VfbWFwX2ZpbHRlcl9saXN0XCI+XG48L3BhZ2Utc2VydmljZS1tYXA+XG5cbjxwYWdlLXNlcnZpY2UtdGFibGUgdi1pZj1cImFjdGl2ZV90YWIgPT0gJ3NlcnZpY2VfbWFwJyAmJiBwYWdlID09ICd0YWJsZSdcIiByZWY9XCJzZXJ2aWNlX21hcF90YWJsZVwiXG4gIDpwYWdlX2NzcmY9XCJwYWdlX2NzcmZcIlxuICA6dXJsX3BhcmFtcz1cInVybF9wYXJhbXNcIlxuICA6dmlldz1cInVwZGF0ZWRfdmlld1wiXG4gIDp0YWJsZV9maWx0ZXJzPVwic2VydmljZV90YWJsZV9maWx0ZXJfbGlzdFwiXG4gIDppc19hZG1pbj1cImlzX2FkbWluXCJcbiAgOnNlcnZpY2VfYWNjZXB0YW5jZT1cInNlcnZpY2VfYWNjZXB0YW5jZVwiPlxuPC9wYWdlLXNlcnZpY2UtdGFibGU+XG5cbjxwYWdlLXBlcmlvZGljaXR5LW1hcCB2LWlmPVwiYWN0aXZlX3RhYiA9PSAncGVyaW9kaWNpdHlfbWFwJyAmJiBwYWdlID09ICdncmFwaCdcIiByZWY9XCJwZXJpb2RpY2l0eV9tYXBfZ3JhcGhcIlxuICA6cGFnZV9jc3JmPVwicGFnZV9jc3JmXCJcbiAgOnVybF9wYXJhbXM9XCJ1cmxfcGFyYW1zXCJcbiAgOmlmaWQ9XCJpZmlkXCJcbiAgOmlzX2FkbWluPVwiaXNfYWRtaW5cIlxuICA6bWFwX2lkPVwibWFwX2lkXCJcbiAgOmFsbF9maWx0ZXJfbGlzdD1cInBlcmlvZGljaXR5X21hcF9maWx0ZXJfbGlzdFwiPlxuPC9wYWdlLXBlcmlvZGljaXR5LW1hcD5cblxuPHBhZ2UtcGVyaW9kaWNpdHktdGFibGUgdi1pZj1cImFjdGl2ZV90YWIgPT0gJ3BlcmlvZGljaXR5X21hcCcgJiYgcGFnZSA9PSAndGFibGUnXCIgcmVmPVwicGVyaW9kaWNpdHlfbWFwX3RhYmxlXCJcbiAgOnBhZ2VfY3NyZj1cInBhZ2VfY3NyZlwiXG4gIDp1cmxfcGFyYW1zPVwidXJsX3BhcmFtc1wiXG4gIDp2aWV3PVwidXBkYXRlZF92aWV3XCJcbiAgOnRhYmxlX2ZpbHRlcnM9XCJwZXJpb2RpY2l0eV90YWJsZV9maWx0ZXJfbGlzdFwiXG4gIDppc19hZG1pbj1cImlzX2FkbWluXCI+XG48L3BhZ2UtcGVyaW9kaWNpdHktdGFibGU+XG5cbjx0ZW1wbGF0ZSB2LWlmPVwiYXNzZXRfbWFwX2ZpbHRlcl9saXN0ICYmIGFzc2V0X3RhYmxlX2ZpbHRlcl9saXN0XCI+XG4gIDxwYWdlLWFzc2V0LW1hcCB2LWlmPVwiYWN0aXZlX3RhYiA9PSAnYXNzZXRfbWFwJyAmJiBwYWdlID09ICdncmFwaCdcIiByZWY9XCJhc3NldF9tYXBfZ3JhcGhcIlxuICAgIDpwYWdlX2NzcmY9XCJwYWdlX2NzcmZcIlxuICAgIDp1cmxfcGFyYW1zPVwidXJsX3BhcmFtc1wiXG4gICAgOmlmaWQ9XCJpZmlkXCJcbiAgICA6aXNfYWRtaW49XCJpc19hZG1pblwiXG4gICAgOm1hcF9pZD1cIm1hcF9pZFwiXG4gICAgOmFsbF9maWx0ZXJfbGlzdD1cImFzc2V0X21hcF9maWx0ZXJfbGlzdFwiPlxuICA8L3BhZ2UtYXNzZXQtbWFwPlxuXG4gIDxwYWdlLWFzc2V0LXRhYmxlIHYtaWY9XCJhY3RpdmVfdGFiID09ICdhc3NldF9tYXAnICYmIHBhZ2UgPT0gJ3RhYmxlJ1wiIHJlZj1cImFzc2V0X21hcF90YWJsZVwiXG4gICAgOnBhZ2VfY3NyZj1cInBhZ2VfY3NyZlwiXG4gICAgOnVybF9wYXJhbXM9XCJ1cmxfcGFyYW1zXCJcbiAgICA6dmlldz1cInVwZGF0ZWRfdmlld1wiXG4gICAgOnRhYmxlX2ZpbHRlcnM9XCJhc3NldF90YWJsZV9maWx0ZXJfbGlzdFwiPlxuICA8L3BhZ2UtYXNzZXQtdGFibGU+XG48L3RlbXBsYXRlPlxuXG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuICBpbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VQZXJpb2RpY2l0eVRhYmxlIH0gZnJvbSBcIi4vcGFnZS1wZXJpb2RpY2l0eS10YWJsZS52dWVcIjtcbiAgaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlUGVyaW9kaWNpdHlNYXAgfSBmcm9tIFwiLi9wYWdlLXBlcmlvZGljaXR5LW1hcC52dWVcIjtcbiAgaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlQXNzZXRUYWJsZSB9IGZyb20gXCIuL3BhZ2UtYXNzZXQtdGFibGUudnVlXCI7XG4gIGltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZUFzc2V0TWFwIH0gZnJvbSBcIi4vcGFnZS1hc3NldC1tYXAudnVlXCI7XG4gIGltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZVNlcnZpY2VUYWJsZSB9IGZyb20gXCIuL3BhZ2Utc2VydmljZS10YWJsZS52dWVcIjtcbiAgaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlU2VydmljZU1hcCB9IGZyb20gXCIuL3BhZ2Utc2VydmljZS1tYXAudnVlXCI7XG4gIGltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZU5hdmJhciB9IGZyb20gXCIuL3BhZ2UtbmF2YmFyLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSAnLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcyc7XG4gIGNvbnN0IGNoYW5nZV9tYXBfZXZlbnQgPSBcImNoYW5nZV9tYXBfZXZlbnRcIjtcblxuICBleHBvcnQgZGVmYXVsdCB7XG4gICAgY29tcG9uZW50czoge1x0ICBcbiAgICAgICdwYWdlLXBlcmlvZGljaXR5LW1hcCc6IFBhZ2VQZXJpb2RpY2l0eU1hcCxcbiAgICAgICdwYWdlLXBlcmlvZGljaXR5LXRhYmxlJzogUGFnZVBlcmlvZGljaXR5VGFibGUsXG4gICAgICAncGFnZS1hc3NldC1tYXAnOiBQYWdlQXNzZXRNYXAsXG4gICAgICAncGFnZS1hc3NldC10YWJsZSc6IFBhZ2VBc3NldFRhYmxlLFxuICAgICAgJ3BhZ2Utc2VydmljZS1tYXAnOiBQYWdlU2VydmljZU1hcCxcbiAgICAgICdwYWdlLXNlcnZpY2UtdGFibGUnOiBQYWdlU2VydmljZVRhYmxlLFxuICAgICAgJ3BhZ2UtbmF2YmFyJzogUGFnZU5hdmJhcixcbiAgICB9LFxuICAgIHByb3BzOiB7XG4gICAgICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgICAgIGJhc2VfdXJsX3BhcmFtczogT2JqZWN0LFxuICAgICAgaWZpZDogTnVtYmVyLFxuICAgICAgaXNfYWRtaW46IEJvb2xlYW4sXG4gICAgICBtYXBfaWQ6IFN0cmluZyxcbiAgICAgIHZpZXc6IFN0cmluZyxcbiAgICAgIG5hdmJhcl9pbmZvOiBPYmplY3QsXG4gICAgICBzZXJ2aWNlX2FjY2VwdGFuY2U6IEFycmF5LFxuICAgICAgc2VydmljZV9tYXBfZmlsdGVyX2xpc3Q6IE9iamVjdCxcbiAgICAgIHNlcnZpY2VfdGFibGVfZmlsdGVyX2xpc3Q6IEFycmF5LFxuICAgICAgcGVyaW9kaWNpdHlfbWFwX2ZpbHRlcl9saXN0OiBPYmplY3QsXG4gICAgICBwZXJpb2RpY2l0eV90YWJsZV9maWx0ZXJfbGlzdDogQXJyYXksXG4gICAgICBhc3NldF9tYXBfZmlsdGVyX2xpc3Q6IE9iamVjdCxcbiAgICAgIGFzc2V0X3RhYmxlX2ZpbHRlcl9saXN0OiBBcnJheSxcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEZpcnN0IG1ldGhvZCBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAgICovXG4gICAgY3JlYXRlZCgpIHtcbiAgICAgIHRoaXMudXJsX3BhcmFtcyA9IHRoaXMuJHByb3BzLmJhc2VfdXJsX3BhcmFtc1xuICAgICAgdGhpcy5hY3RpdmVfdGFiID0gdGhpcy4kcHJvcHMubWFwX2lkXG4gICAgICB0aGlzLnBhZ2UgPSB0aGlzLnVybF9wYXJhbXMucGFnZVxuICAgICAgdGhpcy51cGRhdGVkX3ZpZXcgPSB0aGlzLiRwcm9wcy52aWV3XG5cbiAgICAgIGlmKGFzc2V0X21hcF9maWx0ZXJfbGlzdCAmJiBhc3NldF90YWJsZV9maWx0ZXJfbGlzdCkge1xuICAgICAgICB0aGlzLm5hdmJhcl9jb250ZXh0Lml0ZW1zX3RhYmxlLnB1c2goeyBhY3RpdmU6IGZhbHNlLCBjbGFzczogXCJkaXNhYmxlZCBwcy0wIHBlLTBcIiwgbGFiZWw6ICctJyB9KVxuICAgICAgICB0aGlzLm5hdmJhcl9jb250ZXh0Lml0ZW1zX3RhYmxlLnB1c2goeyBhY3RpdmU6IGZhbHNlLCBpY29uOiBcImZhcyBmYS1sZyBmYS1jb21wYXNzXCIsIGNsYXNzOiBcImRpc2FibGVkIHBlLTBcIiwgdGl0bGU6IGkxOG4oJ2Fzc2V0X21hcCcpLCBsYWJlbDogaTE4bignYXNzZXQnKSArIFwiOiBcIiB9KVxuICAgICAgICB0aGlzLm5hdmJhcl9jb250ZXh0Lml0ZW1zX3RhYmxlLnB1c2goeyBhY3RpdmU6IGZhbHNlLCBsYWJlbDogaTE4bignbWFwX2Zvcm1hdCcpLCBpZDogXCJhc3NldF9tYXBcIiwgcGFnZTogXCJncmFwaFwiIH0pXG4gICAgICAgIHRoaXMubmF2YmFyX2NvbnRleHQuaXRlbXNfdGFibGUucHVzaCh7IGFjdGl2ZTogZmFsc2UsIGNsYXNzOiBcImRpc2FibGVkIHBzLTAgcGUtMFwiLCBsYWJlbDogJy8nIH0pXG4gICAgICAgIHRoaXMubmF2YmFyX2NvbnRleHQuaXRlbXNfdGFibGUucHVzaCh7IGFjdGl2ZTogZmFsc2UsIGxhYmVsOiBpMThuKCd0YWJsZV9mb3JtYXQnKSwgaWQ6IFwiYXNzZXRfbWFwXCIsIHBhZ2U6IFwidGFibGVcIiB9KVxuICAgICAgfVxuXG4gICAgICB0aGlzLm5hdmJhcl9jb250ZXh0Lml0ZW1zX3RhYmxlLmZvckVhY2goKGkpID0+IHtcbiAgICAgICAgKGkuaWQgPT0gdGhpcy5hY3RpdmVfdGFiICYmIGkucGFnZSA9PSB0aGlzLnBhZ2UpID8gaS5hY3RpdmUgPSB0cnVlIDogaS5hY3RpdmUgPSBmYWxzZVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBtb3VudGVkKCkge1xuICAgICAgXG4gICAgICBjb25zdCBmb3JtYXRfbmF2YmFyID0gdGhpcy5mb3JtYXRfbmF2YmFyX3RpdGxlO1xuICAgICAgZm9ybWF0X25hdmJhcih0aGlzLiRwcm9wcy5uYXZiYXJfaW5mbyk7XG5cbiAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJwYWdlX25hdmJhclwiLCBudG9wbmdfY3VzdG9tX2V2ZW50cy5DSEFOR0VfUEFHRV9USVRMRSwgKG5vZGUpID0+IHtcbiAgICAgICAgZm9ybWF0X25hdmJhcih7IHNlbGVjdGVkX2lmYWNlOiB0aGlzLiRwcm9wcy5uYXZiYXJfaW5mby5zZWxlY3RlZF9pZmFjZSwgc2VsZWN0ZWRfaG9zdDogbm9kZSB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KFwiY2hhbmdlX3NlcnZpY2VfdGFibGVfdGFiXCIsIGNoYW5nZV9tYXBfZXZlbnQsICh0YWIpID0+IHtcbiAgICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCdtYXAnLCB0YWIuaWQpO1xuICAgICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoJ3BhZ2UnLCB0YWIucGFnZSk7XG4gICAgICAgIGlmKHRhYi5wYWdlID09ICd0YWJsZScpXG4gICAgICAgICAgdGhpcy5kZXN0cm95KClcbiAgICAgICAgXG4gICAgICAgIHRoaXMuYWN0aXZlX3RhYiA9IHRhYi5pZFxuICAgICAgICB0aGlzLnBhZ2UgPSB0YWIucGFnZVxuICAgICAgICB0aGlzLnVybF9wYXJhbXMubWFwID0gdGFiLmlkXG4gICAgICAgIHRoaXMudXJsX3BhcmFtcy5wYWdlID0gdGFiLnBhZ2VcbiAgICAgICAgdGhpcy51cGRhdGVkX3ZpZXcgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgndmlldycpXG4gICAgICAgIGZvcm1hdF9uYXZiYXIoKVxuICAgICB9KTtcbiAgICB9LCAgICBcbiAgICBkYXRhKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG4gICAgICAgIGFjdGl2ZV90YWI6IG51bGwsXG4gICAgICAgIHBhZ2U6IG51bGwsXG4gICAgICAgIHVybF9wYXJhbXM6IHt9LFxuICAgICAgICB1cGRhdGVkX3ZpZXc6IG51bGwsXG4gICAgICAgIG5hdmJhcl9ub2RlOiB7fSxcbiAgICAgICAgbmF2YmFyX2NvbnRleHQ6IHtcbiAgICAgICAgICBtYWluX3RpdGxlOiB7XG4gICAgICAgICAgICBsYWJlbDogJyAnICsgaTE4bihcIm1hcHNcIiksXG4gICAgICAgICAgICBpY29uOiBcImZhcyBmYS1tYXBcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNlY29uZGFyeV90aXRsZV9saXN0OiBbXSxcbiAgICAgICAgICBpdGVtc190YWJsZTogW1xuICAgICAgICAgICAgeyBhY3RpdmU6IGZhbHNlLCBpY29uOiBcImZhcyBmYS1sZyBmYS1jb25jaWVyZ2UtYmVsbFwiLCBjbGFzczogXCJkaXNhYmxlZCBwZS0wXCIsIHRpdGxlOiBpMThuKCdzZXJ2aWNlX21hcCcpLCBsYWJlbDogaTE4bignc2VydmljZScpICsgXCI6IFwiIH0sXG4gICAgICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbGFiZWw6IGkxOG4oJ21hcF9mb3JtYXQnKSwgaWQ6IFwic2VydmljZV9tYXBcIiwgcGFnZTogXCJncmFwaFwiIH0sXG4gICAgICAgICAgICB7IGFjdGl2ZTogZmFsc2UsIGNsYXNzOiBcImRpc2FibGVkIHBzLTAgcGUtMFwiLCBsYWJlbDogJy8nIH0sXG4gICAgICAgICAgICB7IGFjdGl2ZTogZmFsc2UsIGxhYmVsOiBpMThuKCd0YWJsZV9mb3JtYXQnKSwgaWQ6IFwic2VydmljZV9tYXBcIiwgcGFnZTogXCJ0YWJsZVwiIH0sXG4gICAgICAgICAgICB7IGFjdGl2ZTogZmFsc2UsIGNsYXNzOiBcImRpc2FibGVkIHBzLTAgcGUtMFwiLCBsYWJlbDogJy0nIH0sXG4gICAgICAgICAgICB7IGFjdGl2ZTogZmFsc2UsIGljb246IFwiZmFzIGZhLWxnIGZhLWNsb2NrXCIsIGNsYXNzOiBcImRpc2FibGVkIHBlLTBcIiwgdGl0bGU6IGkxOG4oJ3BlcmlvZGljaXR5X21hcCcpLCBsYWJlbDogaTE4bigncGVyaW9kaWNpdHknKSArIFwiOiBcIiB9LFxuICAgICAgICAgICAgeyBhY3RpdmU6IGZhbHNlLCBsYWJlbDogaTE4bignbWFwX2Zvcm1hdCcpLCBpZDogXCJwZXJpb2RpY2l0eV9tYXBcIiwgcGFnZTogXCJncmFwaFwiIH0sXG4gICAgICAgICAgICB7IGFjdGl2ZTogZmFsc2UsIGNsYXNzOiBcImRpc2FibGVkIHBzLTAgcGUtMFwiLCBsYWJlbDogJy8nIH0sXG4gICAgICAgICAgICB7IGFjdGl2ZTogZmFsc2UsIGxhYmVsOiBpMThuKCd0YWJsZV9mb3JtYXQnKSwgaWQ6IFwicGVyaW9kaWNpdHlfbWFwXCIsIHBhZ2U6IFwidGFibGVcIiB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIH0sXG4gICAgbWV0aG9kczogeyBcbiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgICBsZXQgY3VycmVudF90YWIgPSB0aGlzLmdldF9hY3RpdmVfdGFiKCk7XG4gICAgICAgIGN1cnJlbnRfdGFiLmRlc3Ryb3koKVxuICAgICAgfSxcbiAgICAgIGZvcm1hdF9uYXZiYXJfdGl0bGU6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgaWYoZGF0YSkge1xuICAgICAgICAgIHRoaXMubmF2YmFyX25vZGUgPSBkYXRhIC8qIFVwZGF0ZSBuYXZiYXIgbm9kZSAqL1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRhdGEgPSB0aGlzLm5hdmJhcl9ub2RlIC8qIFVzZSB0aGUgb2xkIG5hdmJhciBub2RlICovXG4gICAgICAgIH0gXG5cbiAgICAgICAgdGhpcy5uYXZiYXJfY29udGV4dC5zZWNvbmRhcnlfdGl0bGVfbGlzdCA9IFtcbiAgICAgICAgICB7IGxhYmVsOiBkYXRhLnNlbGVjdGVkX2lmYWNlLmxhYmVsLCB0aXRsZTogTnRvcFV0aWxzLnNob3J0ZW5MYWJlbChgJHtkYXRhLnNlbGVjdGVkX2lmYWNlLmxhYmVsfWAsIDE2KSB9XG4gICAgICAgIF1cblxuICAgICAgICBpZihkYXRhLnNlbGVjdGVkX2hvc3QgJiYgZGF0YS5zZWxlY3RlZF9ob3N0LmlkICE9ICcnKSB7XG4gICAgICAgICAgY29uc3QgaG9zdF9uYW1lID0gZGF0YS5zZWxlY3RlZF9ob3N0LmxhYmVsO1xuICAgICAgICAgIGNvbnN0IGlwID0gTnRvcFV0aWxzLnJlbW92ZVZsYW4oZGF0YS5zZWxlY3RlZF9ob3N0LmlkKTtcbiAgICAgICAgICB0aGlzLm5hdmJhcl9jb250ZXh0LnNlY29uZGFyeV90aXRsZV9saXN0WzBdWydocmVmJ10gPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL25ldHdvcmtfbWFwcy5sdWE/bWFwPSR7dGhpcy5hY3RpdmVfdGFifSZwYWdlPSR7dGhpcy5wYWdlfSZpZmlkPSR7dGhpcy4kcHJvcHMuaWZpZH1gXG4gICAgICAgICAgdGhpcy5uYXZiYXJfY29udGV4dC5zZWNvbmRhcnlfdGl0bGVfbGlzdC5wdXNoKHtcbiAgICAgICAgICAgIGxhYmVsOiBgJHtOdG9wVXRpbHMuZm9ybWF0TmFtZVZhbHVlKGhvc3RfbmFtZSwgaXApfWAsIC8vIEFkZGluZyB0aGUgbGFwdG9wIGljb25cbiAgICAgICAgICAgIHRpdGxlOiBgJHtkYXRhLnNlbGVjdGVkX2hvc3QubGFiZWx9YCxcbiAgICAgICAgICAgIGhyZWY6IGRhdGEuc2VsZWN0ZWRfaG9zdC5pc19hY3RpdmUgPyBgJHtodHRwX3ByZWZpeH0vbHVhL2hvc3RfZGV0YWlscy5sdWE/aG9zdD0ke2lwfWAgOiBudWxsLFxuICAgICAgICAgICAgaWNvbjogXCJmYS1zb2xpZCBmYS1sYXB0b3BcIixcbiAgICAgICAgICAgIHRhcmdldF9ibGFuazogXCJ0cnVlXCIsXG4gICAgICAgICAgfSlcbiAgICAgICAgfSAgXG4gICAgICB9LFxuICAgICAgZ2V0X2FjdGl2ZV90YWI6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4kcmVmc1t0aGlzLmFjdGl2ZV90YWIgKyBcIl9cIiArIHRoaXMucGFnZV07XG4gICAgICB9LFxuICAgICAgLyogTWV0aG9kIHVzZWQgdG8gc3dpdGNoIGFjdGl2ZSB0YWJsZSB0YWIgKi9cbiAgICAgIGNsaWNrX2l0ZW06IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgaWYoaXRlbS5pZCAhPSB0aGlzLmFjdGl2ZV90YWIgfHwgaXRlbS5wYWdlICE9IHRoaXMucGFnZSkge1xuICAgICAgICAgIHRoaXMubmF2YmFyX2NvbnRleHQuaXRlbXNfdGFibGUuZm9yRWFjaCgoaSkgPT4gaS5hY3RpdmUgPSBmYWxzZSk7XG4gICAgICAgICAgaXRlbS5hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChjaGFuZ2VfbWFwX2V2ZW50LCBpdGVtKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9LFxuICB9ICBcbjwvc2NyaXB0PlxuXG5cblxuXG5cblxuIiwieyNcbiAgKEMpIDIwMjIgLSBudG9wLm9yZ1xuICBUaGlzIHRlbXBsYXRlIGlzIHVzZWQgYnkgdGhlIGBTU0ggaG9zdCBkZXRhaWxzYCBwYWdlIGluc2lkZSB0aGUgYEhvc3RzYC4gICAgXG4jfVxuXG48dGVtcGxhdGU+XG5cbjxwYWdlLW5hdmJhclxuICBpZD1cInBhZ2VfbmF2YmFyXCJcbiAgOm1haW5fdGl0bGU9XCJuYXZiYXJfY29udGV4dC5tYWluX3RpdGxlXCJcbiAgOnNlY29uZGFyeV90aXRsZV9saXN0PVwibmF2YmFyX2NvbnRleHQuc2Vjb25kYXJ5X3RpdGxlX2xpc3RcIlxuICA6aGVscF9saW5rPVwibmF2YmFyX2NvbnRleHQuaGVscF9saW5rXCJcbiAgOml0ZW1zX3RhYmxlPVwibmF2YmFyX2NvbnRleHQuaXRlbXNfdGFibGVcIlxuICBAY2xpY2tfaXRlbT1cImNsaWNrX2l0ZW1cIj5cbjwvcGFnZS1uYXZiYXI+XG5cbjxwYWdlLXNlcnZpY2UtbWFwIHYtaWY9XCJhY3RpdmVfdGFiID09ICdzZXJ2aWNlX21hcCcgJiYgcGFnZSA9PSAnZ3JhcGgnXCIgcmVmPVwic2VydmljZV9tYXBfZ3JhcGhcIlxuICA6cGFnZV9jc3JmPVwicGFnZV9jc3JmXCJcbiAgOnVybF9wYXJhbXM9XCJ1cmxfcGFyYW1zXCJcbiAgOmlmaWQ9XCJpZmlkXCJcbiAgOmlzX2FkbWluPVwiaXNfYWRtaW5cIlxuICA6bWFwX2lkPVwibWFwX2lkXCJcbiAgOmFsbF9maWx0ZXJfbGlzdD1cInNlcnZpY2VfbWFwX2ZpbHRlcl9saXN0XCI+XG48L3BhZ2Utc2VydmljZS1tYXA+XG5cbjxwYWdlLXNlcnZpY2UtdGFibGUgdi1pZj1cImFjdGl2ZV90YWIgPT0gJ3NlcnZpY2VfbWFwJyAmJiBwYWdlID09ICd0YWJsZSdcIiByZWY9XCJzZXJ2aWNlX21hcF90YWJsZVwiXG4gIDpwYWdlX2NzcmY9XCJwYWdlX2NzcmZcIlxuICA6dXJsX3BhcmFtcz1cInVybF9wYXJhbXNcIlxuICA6dmlldz1cInVwZGF0ZWRfdmlld1wiXG4gIDp0YWJsZV9maWx0ZXJzPVwic2VydmljZV90YWJsZV9maWx0ZXJfbGlzdFwiXG4gIDppc19hZG1pbj1cImlzX2FkbWluXCJcbiAgOnNlcnZpY2VfYWNjZXB0YW5jZT1cInNlcnZpY2VfYWNjZXB0YW5jZVwiPlxuPC9wYWdlLXNlcnZpY2UtdGFibGU+XG5cbjxwYWdlLXBlcmlvZGljaXR5LW1hcCB2LWlmPVwiYWN0aXZlX3RhYiA9PSAncGVyaW9kaWNpdHlfbWFwJyAmJiBwYWdlID09ICdncmFwaCdcIiByZWY9XCJwZXJpb2RpY2l0eV9tYXBfZ3JhcGhcIlxuICA6cGFnZV9jc3JmPVwicGFnZV9jc3JmXCJcbiAgOnVybF9wYXJhbXM9XCJ1cmxfcGFyYW1zXCJcbiAgOmlmaWQ9XCJpZmlkXCJcbiAgOmlzX2FkbWluPVwiaXNfYWRtaW5cIlxuICA6bWFwX2lkPVwibWFwX2lkXCJcbiAgOmFsbF9maWx0ZXJfbGlzdD1cInBlcmlvZGljaXR5X21hcF9maWx0ZXJfbGlzdFwiPlxuPC9wYWdlLXBlcmlvZGljaXR5LW1hcD5cblxuPHBhZ2UtcGVyaW9kaWNpdHktdGFibGUgdi1pZj1cImFjdGl2ZV90YWIgPT0gJ3BlcmlvZGljaXR5X21hcCcgJiYgcGFnZSA9PSAndGFibGUnXCIgcmVmPVwicGVyaW9kaWNpdHlfbWFwX3RhYmxlXCJcbiAgOnBhZ2VfY3NyZj1cInBhZ2VfY3NyZlwiXG4gIDp1cmxfcGFyYW1zPVwidXJsX3BhcmFtc1wiXG4gIDp2aWV3PVwidXBkYXRlZF92aWV3XCJcbiAgOnRhYmxlX2ZpbHRlcnM9XCJwZXJpb2RpY2l0eV90YWJsZV9maWx0ZXJfbGlzdFwiXG4gIDppc19hZG1pbj1cImlzX2FkbWluXCI+XG48L3BhZ2UtcGVyaW9kaWNpdHktdGFibGU+XG5cbjx0ZW1wbGF0ZSB2LWlmPVwiYXNzZXRfbWFwX2ZpbHRlcl9saXN0ICYmIGFzc2V0X3RhYmxlX2ZpbHRlcl9saXN0XCI+XG4gIDxwYWdlLWFzc2V0LW1hcCB2LWlmPVwiYWN0aXZlX3RhYiA9PSAnYXNzZXRfbWFwJyAmJiBwYWdlID09ICdncmFwaCdcIiByZWY9XCJhc3NldF9tYXBfZ3JhcGhcIlxuICAgIDpwYWdlX2NzcmY9XCJwYWdlX2NzcmZcIlxuICAgIDp1cmxfcGFyYW1zPVwidXJsX3BhcmFtc1wiXG4gICAgOmlmaWQ9XCJpZmlkXCJcbiAgICA6aXNfYWRtaW49XCJpc19hZG1pblwiXG4gICAgOm1hcF9pZD1cIm1hcF9pZFwiXG4gICAgOmFsbF9maWx0ZXJfbGlzdD1cImFzc2V0X21hcF9maWx0ZXJfbGlzdFwiPlxuICA8L3BhZ2UtYXNzZXQtbWFwPlxuXG4gIDxwYWdlLWFzc2V0LXRhYmxlIHYtaWY9XCJhY3RpdmVfdGFiID09ICdhc3NldF9tYXAnICYmIHBhZ2UgPT0gJ3RhYmxlJ1wiIHJlZj1cImFzc2V0X21hcF90YWJsZVwiXG4gICAgOnBhZ2VfY3NyZj1cInBhZ2VfY3NyZlwiXG4gICAgOnVybF9wYXJhbXM9XCJ1cmxfcGFyYW1zXCJcbiAgICA6dmlldz1cInVwZGF0ZWRfdmlld1wiXG4gICAgOnRhYmxlX2ZpbHRlcnM9XCJhc3NldF90YWJsZV9maWx0ZXJfbGlzdFwiPlxuICA8L3BhZ2UtYXNzZXQtdGFibGU+XG48L3RlbXBsYXRlPlxuXG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuICBpbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VQZXJpb2RpY2l0eVRhYmxlIH0gZnJvbSBcIi4vcGFnZS1wZXJpb2RpY2l0eS10YWJsZS52dWVcIjtcbiAgaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlUGVyaW9kaWNpdHlNYXAgfSBmcm9tIFwiLi9wYWdlLXBlcmlvZGljaXR5LW1hcC52dWVcIjtcbiAgaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlQXNzZXRUYWJsZSB9IGZyb20gXCIuL3BhZ2UtYXNzZXQtdGFibGUudnVlXCI7XG4gIGltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZUFzc2V0TWFwIH0gZnJvbSBcIi4vcGFnZS1hc3NldC1tYXAudnVlXCI7XG4gIGltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZVNlcnZpY2VUYWJsZSB9IGZyb20gXCIuL3BhZ2Utc2VydmljZS10YWJsZS52dWVcIjtcbiAgaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlU2VydmljZU1hcCB9IGZyb20gXCIuL3BhZ2Utc2VydmljZS1tYXAudnVlXCI7XG4gIGltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZU5hdmJhciB9IGZyb20gXCIuL3BhZ2UtbmF2YmFyLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSAnLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcyc7XG4gIGNvbnN0IGNoYW5nZV9tYXBfZXZlbnQgPSBcImNoYW5nZV9tYXBfZXZlbnRcIjtcblxuICBleHBvcnQgZGVmYXVsdCB7XG4gICAgY29tcG9uZW50czoge1x0ICBcbiAgICAgICdwYWdlLXBlcmlvZGljaXR5LW1hcCc6IFBhZ2VQZXJpb2RpY2l0eU1hcCxcbiAgICAgICdwYWdlLXBlcmlvZGljaXR5LXRhYmxlJzogUGFnZVBlcmlvZGljaXR5VGFibGUsXG4gICAgICAncGFnZS1hc3NldC1tYXAnOiBQYWdlQXNzZXRNYXAsXG4gICAgICAncGFnZS1hc3NldC10YWJsZSc6IFBhZ2VBc3NldFRhYmxlLFxuICAgICAgJ3BhZ2Utc2VydmljZS1tYXAnOiBQYWdlU2VydmljZU1hcCxcbiAgICAgICdwYWdlLXNlcnZpY2UtdGFibGUnOiBQYWdlU2VydmljZVRhYmxlLFxuICAgICAgJ3BhZ2UtbmF2YmFyJzogUGFnZU5hdmJhcixcbiAgICB9LFxuICAgIHByb3BzOiB7XG4gICAgICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgICAgIGJhc2VfdXJsX3BhcmFtczogT2JqZWN0LFxuICAgICAgaWZpZDogTnVtYmVyLFxuICAgICAgaXNfYWRtaW46IEJvb2xlYW4sXG4gICAgICBtYXBfaWQ6IFN0cmluZyxcbiAgICAgIHZpZXc6IFN0cmluZyxcbiAgICAgIG5hdmJhcl9pbmZvOiBPYmplY3QsXG4gICAgICBzZXJ2aWNlX2FjY2VwdGFuY2U6IEFycmF5LFxuICAgICAgc2VydmljZV9tYXBfZmlsdGVyX2xpc3Q6IE9iamVjdCxcbiAgICAgIHNlcnZpY2VfdGFibGVfZmlsdGVyX2xpc3Q6IEFycmF5LFxuICAgICAgcGVyaW9kaWNpdHlfbWFwX2ZpbHRlcl9saXN0OiBPYmplY3QsXG4gICAgICBwZXJpb2RpY2l0eV90YWJsZV9maWx0ZXJfbGlzdDogQXJyYXksXG4gICAgICBhc3NldF9tYXBfZmlsdGVyX2xpc3Q6IE9iamVjdCxcbiAgICAgIGFzc2V0X3RhYmxlX2ZpbHRlcl9saXN0OiBBcnJheSxcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEZpcnN0IG1ldGhvZCBjYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNyZWF0ZWQuXG4gICAgICovXG4gICAgY3JlYXRlZCgpIHtcbiAgICAgIHRoaXMudXJsX3BhcmFtcyA9IHRoaXMuJHByb3BzLmJhc2VfdXJsX3BhcmFtc1xuICAgICAgdGhpcy5hY3RpdmVfdGFiID0gdGhpcy4kcHJvcHMubWFwX2lkXG4gICAgICB0aGlzLnBhZ2UgPSB0aGlzLnVybF9wYXJhbXMucGFnZVxuICAgICAgdGhpcy51cGRhdGVkX3ZpZXcgPSB0aGlzLiRwcm9wcy52aWV3XG5cbiAgICAgIGlmKGFzc2V0X21hcF9maWx0ZXJfbGlzdCAmJiBhc3NldF90YWJsZV9maWx0ZXJfbGlzdCkge1xuICAgICAgICB0aGlzLm5hdmJhcl9jb250ZXh0Lml0ZW1zX3RhYmxlLnB1c2goeyBhY3RpdmU6IGZhbHNlLCBjbGFzczogXCJkaXNhYmxlZCBwcy0wIHBlLTBcIiwgbGFiZWw6ICctJyB9KVxuICAgICAgICB0aGlzLm5hdmJhcl9jb250ZXh0Lml0ZW1zX3RhYmxlLnB1c2goeyBhY3RpdmU6IGZhbHNlLCBpY29uOiBcImZhcyBmYS1sZyBmYS1jb21wYXNzXCIsIGNsYXNzOiBcImRpc2FibGVkIHBlLTBcIiwgdGl0bGU6IGkxOG4oJ2Fzc2V0X21hcCcpLCBsYWJlbDogaTE4bignYXNzZXQnKSArIFwiOiBcIiB9KVxuICAgICAgICB0aGlzLm5hdmJhcl9jb250ZXh0Lml0ZW1zX3RhYmxlLnB1c2goeyBhY3RpdmU6IGZhbHNlLCBsYWJlbDogaTE4bignbWFwX2Zvcm1hdCcpLCBpZDogXCJhc3NldF9tYXBcIiwgcGFnZTogXCJncmFwaFwiIH0pXG4gICAgICAgIHRoaXMubmF2YmFyX2NvbnRleHQuaXRlbXNfdGFibGUucHVzaCh7IGFjdGl2ZTogZmFsc2UsIGNsYXNzOiBcImRpc2FibGVkIHBzLTAgcGUtMFwiLCBsYWJlbDogJy8nIH0pXG4gICAgICAgIHRoaXMubmF2YmFyX2NvbnRleHQuaXRlbXNfdGFibGUucHVzaCh7IGFjdGl2ZTogZmFsc2UsIGxhYmVsOiBpMThuKCd0YWJsZV9mb3JtYXQnKSwgaWQ6IFwiYXNzZXRfbWFwXCIsIHBhZ2U6IFwidGFibGVcIiB9KVxuICAgICAgfVxuXG4gICAgICB0aGlzLm5hdmJhcl9jb250ZXh0Lml0ZW1zX3RhYmxlLmZvckVhY2goKGkpID0+IHtcbiAgICAgICAgKGkuaWQgPT0gdGhpcy5hY3RpdmVfdGFiICYmIGkucGFnZSA9PSB0aGlzLnBhZ2UpID8gaS5hY3RpdmUgPSB0cnVlIDogaS5hY3RpdmUgPSBmYWxzZVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBtb3VudGVkKCkge1xuICAgICAgXG4gICAgICBjb25zdCBmb3JtYXRfbmF2YmFyID0gdGhpcy5mb3JtYXRfbmF2YmFyX3RpdGxlO1xuICAgICAgZm9ybWF0X25hdmJhcih0aGlzLiRwcm9wcy5uYXZiYXJfaW5mbyk7XG5cbiAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJwYWdlX25hdmJhclwiLCBudG9wbmdfY3VzdG9tX2V2ZW50cy5DSEFOR0VfUEFHRV9USVRMRSwgKG5vZGUpID0+IHtcbiAgICAgICAgZm9ybWF0X25hdmJhcih7IHNlbGVjdGVkX2lmYWNlOiB0aGlzLiRwcm9wcy5uYXZiYXJfaW5mby5zZWxlY3RlZF9pZmFjZSwgc2VsZWN0ZWRfaG9zdDogbm9kZSB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KFwiY2hhbmdlX3NlcnZpY2VfdGFibGVfdGFiXCIsIGNoYW5nZV9tYXBfZXZlbnQsICh0YWIpID0+IHtcbiAgICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCdtYXAnLCB0YWIuaWQpO1xuICAgICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoJ3BhZ2UnLCB0YWIucGFnZSk7XG4gICAgICAgIGlmKHRhYi5wYWdlID09ICd0YWJsZScpXG4gICAgICAgICAgdGhpcy5kZXN0cm95KClcbiAgICAgICAgXG4gICAgICAgIHRoaXMuYWN0aXZlX3RhYiA9IHRhYi5pZFxuICAgICAgICB0aGlzLnBhZ2UgPSB0YWIucGFnZVxuICAgICAgICB0aGlzLnVybF9wYXJhbXMubWFwID0gdGFiLmlkXG4gICAgICAgIHRoaXMudXJsX3BhcmFtcy5wYWdlID0gdGFiLnBhZ2VcbiAgICAgICAgdGhpcy51cGRhdGVkX3ZpZXcgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgndmlldycpXG4gICAgICAgIGZvcm1hdF9uYXZiYXIoKVxuICAgICB9KTtcbiAgICB9LCAgICBcbiAgICBkYXRhKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG4gICAgICAgIGFjdGl2ZV90YWI6IG51bGwsXG4gICAgICAgIHBhZ2U6IG51bGwsXG4gICAgICAgIHVybF9wYXJhbXM6IHt9LFxuICAgICAgICB1cGRhdGVkX3ZpZXc6IG51bGwsXG4gICAgICAgIG5hdmJhcl9ub2RlOiB7fSxcbiAgICAgICAgbmF2YmFyX2NvbnRleHQ6IHtcbiAgICAgICAgICBtYWluX3RpdGxlOiB7XG4gICAgICAgICAgICBsYWJlbDogJyAnICsgaTE4bihcIm1hcHNcIiksXG4gICAgICAgICAgICBpY29uOiBcImZhcyBmYS1tYXBcIixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNlY29uZGFyeV90aXRsZV9saXN0OiBbXSxcbiAgICAgICAgICBpdGVtc190YWJsZTogW1xuICAgICAgICAgICAgeyBhY3RpdmU6IGZhbHNlLCBpY29uOiBcImZhcyBmYS1sZyBmYS1jb25jaWVyZ2UtYmVsbFwiLCBjbGFzczogXCJkaXNhYmxlZCBwZS0wXCIsIHRpdGxlOiBpMThuKCdzZXJ2aWNlX21hcCcpLCBsYWJlbDogaTE4bignc2VydmljZScpICsgXCI6IFwiIH0sXG4gICAgICAgICAgICB7IGFjdGl2ZTogdHJ1ZSwgbGFiZWw6IGkxOG4oJ21hcF9mb3JtYXQnKSwgaWQ6IFwic2VydmljZV9tYXBcIiwgcGFnZTogXCJncmFwaFwiIH0sXG4gICAgICAgICAgICB7IGFjdGl2ZTogZmFsc2UsIGNsYXNzOiBcImRpc2FibGVkIHBzLTAgcGUtMFwiLCBsYWJlbDogJy8nIH0sXG4gICAgICAgICAgICB7IGFjdGl2ZTogZmFsc2UsIGxhYmVsOiBpMThuKCd0YWJsZV9mb3JtYXQnKSwgaWQ6IFwic2VydmljZV9tYXBcIiwgcGFnZTogXCJ0YWJsZVwiIH0sXG4gICAgICAgICAgICB7IGFjdGl2ZTogZmFsc2UsIGNsYXNzOiBcImRpc2FibGVkIHBzLTAgcGUtMFwiLCBsYWJlbDogJy0nIH0sXG4gICAgICAgICAgICB7IGFjdGl2ZTogZmFsc2UsIGljb246IFwiZmFzIGZhLWxnIGZhLWNsb2NrXCIsIGNsYXNzOiBcImRpc2FibGVkIHBlLTBcIiwgdGl0bGU6IGkxOG4oJ3BlcmlvZGljaXR5X21hcCcpLCBsYWJlbDogaTE4bigncGVyaW9kaWNpdHknKSArIFwiOiBcIiB9LFxuICAgICAgICAgICAgeyBhY3RpdmU6IGZhbHNlLCBsYWJlbDogaTE4bignbWFwX2Zvcm1hdCcpLCBpZDogXCJwZXJpb2RpY2l0eV9tYXBcIiwgcGFnZTogXCJncmFwaFwiIH0sXG4gICAgICAgICAgICB7IGFjdGl2ZTogZmFsc2UsIGNsYXNzOiBcImRpc2FibGVkIHBzLTAgcGUtMFwiLCBsYWJlbDogJy8nIH0sXG4gICAgICAgICAgICB7IGFjdGl2ZTogZmFsc2UsIGxhYmVsOiBpMThuKCd0YWJsZV9mb3JtYXQnKSwgaWQ6IFwicGVyaW9kaWNpdHlfbWFwXCIsIHBhZ2U6IFwidGFibGVcIiB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIH0sXG4gICAgbWV0aG9kczogeyBcbiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgICBsZXQgY3VycmVudF90YWIgPSB0aGlzLmdldF9hY3RpdmVfdGFiKCk7XG4gICAgICAgIGN1cnJlbnRfdGFiLmRlc3Ryb3koKVxuICAgICAgfSxcbiAgICAgIGZvcm1hdF9uYXZiYXJfdGl0bGU6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgaWYoZGF0YSkge1xuICAgICAgICAgIHRoaXMubmF2YmFyX25vZGUgPSBkYXRhIC8qIFVwZGF0ZSBuYXZiYXIgbm9kZSAqL1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRhdGEgPSB0aGlzLm5hdmJhcl9ub2RlIC8qIFVzZSB0aGUgb2xkIG5hdmJhciBub2RlICovXG4gICAgICAgIH0gXG5cbiAgICAgICAgdGhpcy5uYXZiYXJfY29udGV4dC5zZWNvbmRhcnlfdGl0bGVfbGlzdCA9IFtcbiAgICAgICAgICB7IGxhYmVsOiBkYXRhLnNlbGVjdGVkX2lmYWNlLmxhYmVsLCB0aXRsZTogTnRvcFV0aWxzLnNob3J0ZW5MYWJlbChgJHtkYXRhLnNlbGVjdGVkX2lmYWNlLmxhYmVsfWAsIDE2KSB9XG4gICAgICAgIF1cblxuICAgICAgICBpZihkYXRhLnNlbGVjdGVkX2hvc3QgJiYgZGF0YS5zZWxlY3RlZF9ob3N0LmlkICE9ICcnKSB7XG4gICAgICAgICAgY29uc3QgaG9zdF9uYW1lID0gZGF0YS5zZWxlY3RlZF9ob3N0LmxhYmVsO1xuICAgICAgICAgIGNvbnN0IGlwID0gTnRvcFV0aWxzLnJlbW92ZVZsYW4oZGF0YS5zZWxlY3RlZF9ob3N0LmlkKTtcbiAgICAgICAgICB0aGlzLm5hdmJhcl9jb250ZXh0LnNlY29uZGFyeV90aXRsZV9saXN0WzBdWydocmVmJ10gPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL25ldHdvcmtfbWFwcy5sdWE/bWFwPSR7dGhpcy5hY3RpdmVfdGFifSZwYWdlPSR7dGhpcy5wYWdlfSZpZmlkPSR7dGhpcy4kcHJvcHMuaWZpZH1gXG4gICAgICAgICAgdGhpcy5uYXZiYXJfY29udGV4dC5zZWNvbmRhcnlfdGl0bGVfbGlzdC5wdXNoKHtcbiAgICAgICAgICAgIGxhYmVsOiBgJHtOdG9wVXRpbHMuZm9ybWF0TmFtZVZhbHVlKGhvc3RfbmFtZSwgaXApfWAsIC8vIEFkZGluZyB0aGUgbGFwdG9wIGljb25cbiAgICAgICAgICAgIHRpdGxlOiBgJHtkYXRhLnNlbGVjdGVkX2hvc3QubGFiZWx9YCxcbiAgICAgICAgICAgIGhyZWY6IGRhdGEuc2VsZWN0ZWRfaG9zdC5pc19hY3RpdmUgPyBgJHtodHRwX3ByZWZpeH0vbHVhL2hvc3RfZGV0YWlscy5sdWE/aG9zdD0ke2lwfWAgOiBudWxsLFxuICAgICAgICAgICAgaWNvbjogXCJmYS1zb2xpZCBmYS1sYXB0b3BcIixcbiAgICAgICAgICAgIHRhcmdldF9ibGFuazogXCJ0cnVlXCIsXG4gICAgICAgICAgfSlcbiAgICAgICAgfSAgXG4gICAgICB9LFxuICAgICAgZ2V0X2FjdGl2ZV90YWI6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4kcmVmc1t0aGlzLmFjdGl2ZV90YWIgKyBcIl9cIiArIHRoaXMucGFnZV07XG4gICAgICB9LFxuICAgICAgLyogTWV0aG9kIHVzZWQgdG8gc3dpdGNoIGFjdGl2ZSB0YWJsZSB0YWIgKi9cbiAgICAgIGNsaWNrX2l0ZW06IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgaWYoaXRlbS5pZCAhPSB0aGlzLmFjdGl2ZV90YWIgfHwgaXRlbS5wYWdlICE9IHRoaXMucGFnZSkge1xuICAgICAgICAgIHRoaXMubmF2YmFyX2NvbnRleHQuaXRlbXNfdGFibGUuZm9yRWFjaCgoaSkgPT4gaS5hY3RpdmUgPSBmYWxzZSk7XG4gICAgICAgICAgaXRlbS5hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2N1c3RvbV9ldmVudChjaGFuZ2VfbWFwX2V2ZW50LCBpdGVtKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9LFxuICB9ICBcbjwvc2NyaXB0PlxuXG5cblxuXG5cblxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbjxkaXY+XG4gIDxzdmdcbiAgICByZWY9XCJzYW5rZXlfY2hhcnRfcmVmXCJcbiAgICA6d2lkdGg9XCJzYW5rZXlfc2l6ZS53aWR0aFwiXG4gICAgOmhlaWdodD1cInNhbmtleV9zaXplLmhlaWdodFwiXG4gICAgc3R5bGU9XCJtYXJnaW46MTBweDtcIj5cbiAgICA8ZGVmcyAvPlxuICAgIDxnIGNsYXNzPVwibm9kZXNcIiBzdHlsZT1cInN0cm9rZTogIzAwMDtzdHJva2VPcGFjaXR5OiAwLjU7XCIvPlxuICAgIDxnIGNsYXNzPVwibGlua3NcIlxuICAgICAgIHN0eWxlPVwic3Ryb2tlOiAjMDAwO3N0cm9rZU9wYWNpdHk6IDAuMzsgZmlsbDogbm9uZTtcIi8+XG4gICAgPGcgY2xhc3M9XCJ0ZXh0c1wiIC8+XG4gIDwvc3ZnPlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIG9uQmVmb3JlTW91bnQsIGNvbXB1dGVkLCB3YXRjaCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IG50b3BuZ191dGlsaXR5LCBudG9wbmdfdXJsX21hbmFnZXIsIG50b3BuZ19zdGF0dXNfbWFuYWdlciB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzLmpzXCI7XG5cbmNvbnN0IGQzID0gZDN2NztcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gICAgd2lkdGg6IE51bWJlcixcbiAgICBoZWlnaHQ6IE51bWJlcixcbn0pO1xuXG5jb25zdCBzYW5rZXlfY2hhcnRfcmVmID0gcmVmKG51bGwpO1xuY29uc3Qgc2Fua2V5X3NpemUgPSByZWYoe30pO1xuXG5vbkJlZm9yZU1vdW50KGFzeW5jKCkgPT4ge30pO1xuXG5vbk1vdW50ZWQoYXN5bmMgKCkgPT4geyAgICBcbiAgICBkcmF3X3NhbmtleSgpO1xufSk7XG5cbmFzeW5jIGZ1bmN0aW9uIGRyYXdfc2Fua2V5KCkge1xuICAgIGNvbnN0IGNvbG9ycyA9IGQzLnNjYWxlT3JkaW5hbChkMy5zY2hlbWVDYXRlZ29yeTEwKTtcbiAgICBsZXQgZGF0YSA9IGF3YWl0IGdldF9zYW5rZXlfZGF0YSgpO1xuICAgIGNvbnN0IHNpemUgPSBnZXRfc2l6ZSgpO1xuICAgIHNhbmtleV9zaXplLnZhbHVlID0gc2l6ZTtcbiAgICBjb25zdCB7IGxpbmtzLCBub2RlcyB9ID0gY2FsY3VsYXRlX3NhbmtleShkYXRhLCBzaXplLndpZHRoIC0gMTAsIHNpemUuaGVpZ2h0IC0gNSk7XG4gICAgXG4gICAgZDMuc2VsZWN0KHNhbmtleV9jaGFydF9yZWYudmFsdWUpXG5cdC5zZWxlY3QoXCJnLm5vZGVzXCIpXG5cdC5zZWxlY3RBbGwoXCJyZWN0XCIpXG5cdC5kYXRhKG5vZGVzKVxuXHQuam9pbihcbiAgICAgICAgICAgIChlbnRlcikgPT4ge1xuXHRcdGNvbnN0IGUgPSBlbnRlci5hcHBlbmQoXCJyZWN0XCIpO1xuXHRcdFxuXHRcdGUuYXR0cihcInhcIiwgKGQpID0+IGQueDApLmF0dHIoXCJ5XCIsIChkKSA9PiBkLnkwKTtcblx0XHRcblx0XHRlLnRyYW5zaXRpb24oZDMuZWFzZUxpbmVhcilcblx0XHQgICAgLmRlbGF5KDEwMDApXG5cdFx0ICAgIC5kdXJhdGlvbig1MDApXG5cdFx0ICAgIC5hdHRyKFwiaGVpZ2h0XCIsIChkKSA9PiBkLnkxIC0gZC55MClcblx0XHQgICAgLmF0dHIoXCJ3aWR0aFwiLCAoZCkgPT4gZC54MSAtIGQueDApXG5cdFx0ICAgIC5hdHRyKFwiZGF0YUluZGV4XCIsIChkKSA9PiBkLmluZGV4KVxuXHRcdCAgICAuYXR0cihcImZpbGxcIiwgKGQpID0+IGNvbG9ycyhkLmluZGV4IC8gbm9kZXMubGVuZ3RoKSk7XG5cdFx0ZS5hcHBlbmQoXCJ0aXRsZVwiKS50ZXh0KChkKSA9PiBgJHtkLm5hbWV9XFxuJHtkLmhvdXJzfWApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICh1cGRhdGUpID0+XG5cdFx0dXBkYXRlXG5cdFx0LnRyYW5zaXRpb24oZDMuZWFzZUxpbmVhcilcblx0XHQuZGVsYXkoNTAwKVxuXHRcdC5kdXJhdGlvbig1MDApXG5cdFx0LmF0dHIoXCJ4XCIsIChkKSA9PiBkLngwKVxuXHRcdC5hdHRyKFwieVwiLCAoZCkgPT4gZC55MClcblx0XHQuYXR0cihcImhlaWdodFwiLCAoZCkgPT4gZC55MSAtIGQueTApXG5cdFx0LmF0dHIoXCJ3aWR0aFwiLCAoZCkgPT4gZC54MSAtIGQueDApXG5cdFx0LmF0dHIoXCJkYXRhSW5kZXhcIiwgKGQpID0+IGQuaW5kZXgpXG5cdFx0LmF0dHIoXCJmaWxsXCIsIChkKSA9PiBjb2xvcnMoZC5pbmRleCAvIG5vZGVzLmxlbmd0aCkpXG5cdFx0LnNlbGVjdChcInRpdGxlXCIpXG5cdFx0LnRleHQoKGQpID0+IGAke2QubmFtZX1cXG4ke2QuaG91cnN9YCksXG4gICAgICAgICAgICAoZXhpdCkgPT5cblx0XHRleGl0LnRyYW5zaXRpb24oZDMuZWFzZUxpbmVhcikuZHVyYXRpb24oNTAwKS5zdHlsZShcIm9wYWNpdHlcIiwgMCkucmVtb3ZlKClcblx0KS5vbihcImRibGNsaWNrXCIsIGZ1bmN0aW9uKGRhdGEpIHtcblx0ICAgIC8vdG9kbyBwb3J0YXJlIGZ1b3JpXG5cdCAgICAvLyBkYXRhID0gZGF0YS5jdXJyZW50VGFyZ2V0Ll9fZGF0YV9fXG5cdCAgICAvLyBjb25zdCBzb3VyY2VMaW5rID0gZGF0YS5zb3VyY2VMaW5rcztcblx0ICAgIC8vIGNvbnN0IHRhcmdldExpbmsgPSBkYXRhLnRhcmdldExpbmtzO1xuXHQgICAgLy8gY29uc3QgbGluayA9IChzb3VyY2VMaW5rICYmIHNvdXJjZUxpbmtbMF0pID8gc291cmNlTGlua1swXSA6IHRhcmdldExpbmtbMF07XG5cdCAgICBcblx0ICAgIC8vIGlmKGxpbmspIHtcblx0ICAgIC8vICAgLyogR2V0IHRoZSBub2RlIGxpbmsgZnJvbSB0aGUgcmVzdCAqL1xuXHQgICAgLy8gICBpZihsaW5rLnNvdXJjZS5pZCA9PT0gZGF0YS5pZCkge1xuXHQgICAgLy8gICAgIGlmKGxpbmsuc291cmNlX2xpbmsgJiYgbGluay5zb3VyY2VfbGluayAhPT0gJycpXG5cdCAgICAvLyAgICAgICB3aW5kb3cub3BlbihsaW5rLnNvdXJjZV9saW5rLCAnX2JsYW5rJyk7XG5cdCAgICAvLyAgIH0gZWxzZSBpZihsaW5rLnRhcmdldC5pZCA9PT0gZGF0YS5pZCkge1xuXHQgICAgLy8gICAgIGlmKGxpbmsudGFyZ2V0X2xpbmsgJiYgbGluay50YXJnZXRfbGluayAhPT0gJycpXG5cdCAgICAvLyAgICAgICB3aW5kb3cub3BlbihsaW5rLnRhcmdldF9saW5rLCAnX2JsYW5rJyk7XG5cdCAgICAvLyAgIH0gXG5cdCAgICAvLyB9IFxuXHR9KTtcbiAgICBcbiAgICBkMy5zZWxlY3Qoc2Fua2V5X2NoYXJ0X3JlZi52YWx1ZSlcblx0LnNlbGVjdChcImcudGV4dHNcIilcblx0LnNlbGVjdEFsbChcInRleHRcIilcblx0LmRhdGEobm9kZXMpXG5cdC5qb2luKFxuICAgICAgICAgICAgKGVudGVyKSA9PiB7XG5cdFx0Y29uc3QgZSA9IGVudGVyLmFwcGVuZChcInRleHRcIik7XG5cdFx0XG5cdFx0ZS50cmFuc2l0aW9uKGQzLmVhc2VMaW5lYXIpXG5cdFx0ICAgIC5kZWxheSgxMDAwKVxuXHRcdCAgICAuZHVyYXRpb24oNTAwKVxuXHRcdCAgICAuYXR0cihcInhcIiwgKGQpID0+IChkLngwIDwgc2l6ZS53aWR0aCAvIDIgPyBkLngxICsgNiA6IGQueDAgLSA2KSlcblx0XHQgICAgLmF0dHIoXCJ5XCIsIChkKSA9PiAoZC55MSArIGQueTApIC8gMilcblx0XHQgICAgLmF0dHIoXCJmaWxsXCIsIChkKSA9PiBkMy5yZ2IoY29sb3JzKGQuaW5kZXggLyBub2Rlcy5sZW5ndGgpKS5kYXJrZXIoKSlcblx0XHQgICAgLmF0dHIoXCJhbGlnbm1lbnQtYmFzZWxpbmVcIiwgXCJtaWRkbGVcIilcblx0XHQgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCAoZCkgPT5cblx0XHRcdCAgZC54MCA8IHNpemUud2lkdGggLyAyID8gXCJzdGFydFwiIDogXCJlbmRcIlxuXHRcdFx0IClcblx0XHQgICAgLmF0dHIoXCJmb250LXNpemVcIiwgOSlcblx0XHQgICAgLnRleHQoKGQpID0+IGQubmFtZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgKHVwZGF0ZSkgPT5cblx0XHR1cGRhdGVcblx0XHQudHJhbnNpdGlvbihkMy5lYXNlTGluZWFyKVxuXHRcdC5kZWxheSg1MDApXG5cdFx0LmR1cmF0aW9uKDUwMClcblx0XHQuYXR0cihcInhcIiwgKGQpID0+IChkLngwIDwgc2l6ZS53aWR0aCAvIDIgPyBkLngxICsgNiA6IGQueDAgLSA2KSlcblx0XHQuYXR0cihcInlcIiwgKGQpID0+IChkLnkxICsgZC55MCkgLyAyKVxuXHRcdC5hdHRyKFwiZmlsbFwiLCAoZCkgPT4gZDMucmdiKGNvbG9ycyhkLmluZGV4IC8gbm9kZXMubGVuZ3RoKSkuZGFya2VyKCkpXG5cdFx0LmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCAoZCkgPT5cblx0XHQgICAgICBkLngwIDwgc2l6ZS53aWR0aCAvIDIgPyBcInN0YXJ0XCIgOiBcImVuZFwiXG5cdFx0ICAgICApXG5cdFx0LmF0dHIoXCJmb250LXNpemVcIiwgOSlcblx0XHQudGV4dCgoZCkgPT4gZC5uYW1lKSxcbiAgICAgICAgICAgIChleGl0KSA9PlxuXHRcdGV4aXRcblx0XHQudHJhbnNpdGlvbihkMy5lYXNlTGluZWFyKVxuICAgICAgICAgICAgLyogLmRlbGF5KDUwMCkgKi9cblx0XHQuZHVyYXRpb24oNTAwKVxuXHRcdC5zdHlsZShcIm9wYWNpdHlcIiwgMClcblx0XHQucmVtb3ZlKClcblx0KTtcbiAgICBcbiAgICBkMy5zZWxlY3Qoc2Fua2V5X2NoYXJ0X3JlZi52YWx1ZSlcblx0LnNlbGVjdChcImRlZnNcIilcblx0LnNlbGVjdEFsbChcImxpbmVhckdyYWRpZW50XCIpXG5cdC5kYXRhKGxpbmtzKVxuXHQuam9pbihcbiAgICAgICAgICAgIChlbnRlcikgPT4ge1xuXHRcdGNvbnN0IGxnID0gZW50ZXIuYXBwZW5kKFwibGluZWFyR3JhZGllbnRcIik7XG5cdFx0XG5cdFx0bGcuYXR0cihcImlkXCIsIChkKSA9PiBgZ3JhZGllbnQtJHtkLmluZGV4fWApXG5cdFx0ICAgIC5hdHRyKFwiZ3JhZGllbnRVbml0c1wiLCBcInVzZXJTcGFjZU9uVXNlXCIpXG5cdFx0ICAgIC5hdHRyKFwieDFcIiwgKGQpID0+IGQuc291cmNlLngxKVxuXHRcdCAgICAuYXR0cihcIngyXCIsIChkKSA9PiBkLnRhcmdldC54MCk7XG5cdFx0XG5cdFx0bGcuYXBwZW5kKFwic3RvcFwiKVxuXHRcdCAgICAuYXR0cihcIm9mZnNldFwiLCBcIjBcIilcblx0XHQgICAgLmF0dHIoXCJzdG9wLWNvbG9yXCIsIChkKSA9PiBjb2xvcnMoZC5zb3VyY2UuaW5kZXggLyBub2Rlcy5sZW5ndGgpKTtcblx0XHRcblx0XHRsZy5hcHBlbmQoXCJzdG9wXCIpXG5cdFx0ICAgIC5hdHRyKFwib2Zmc2V0XCIsIFwiMTAwJVwiKVxuXHRcdCAgICAuYXR0cihcInN0b3AtY29sb3JcIiwgKGQpID0+IGNvbG9ycyhkLnRhcmdldC5pbmRleCAvIG5vZGVzLmxlbmd0aCkpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICh1cGRhdGUpID0+IHtcblx0XHR1cGRhdGVcblx0XHQgICAgLmF0dHIoXCJpZFwiLCAoZCkgPT4gYGdyYWRpZW50LSR7ZC5pbmRleH1gKVxuXHRcdCAgICAuYXR0cihcImdyYWRpZW50VW5pdHNcIiwgXCJ1c2VyU3BhY2VPblVzZVwiKVxuXHRcdCAgICAuYXR0cihcIngxXCIsIChkKSA9PiBkLnNvdXJjZS54MSlcblx0XHQgICAgLmF0dHIoXCJ4MlwiLCAoZCkgPT4gZC50YXJnZXQueDApO1xuXHRcdHVwZGF0ZS5zZWxlY3RBbGwoXCJzdG9wXCIpLnJlbW92ZSgpO1xuXHRcdHVwZGF0ZVxuXHRcdCAgICAuYXBwZW5kKFwic3RvcFwiKVxuXHRcdCAgICAuYXR0cihcIm9mZnNldFwiLCBcIjBcIilcblx0XHQgICAgLmF0dHIoXCJzdG9wLWNvbG9yXCIsIChkKSA9PiBjb2xvcnMoZC5zb3VyY2UuaW5kZXggLyBub2Rlcy5sZW5ndGgpKTtcblx0XHRcblx0XHR1cGRhdGVcblx0XHQgICAgLmFwcGVuZChcInN0b3BcIilcblx0XHQgICAgLmF0dHIoXCJvZmZzZXRcIiwgXCIxMDAlXCIpXG5cdFx0ICAgIC5hdHRyKFwic3RvcC1jb2xvclwiLCAoZCkgPT4gY29sb3JzKGQudGFyZ2V0LmluZGV4IC8gbm9kZXMubGVuZ3RoKSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgKGV4aXQpID0+IGV4aXQucmVtb3ZlKClcblx0KTtcbiAgICBcbiAgICBkMy5zZWxlY3Qoc2Fua2V5X2NoYXJ0X3JlZi52YWx1ZSlcblx0LnNlbGVjdChcImcubGlua3NcIilcblx0LnNlbGVjdEFsbChcInBhdGhcIilcblx0LmRhdGEobGlua3MpXG5cdC5qb2luKFxuICAgICAgICAgICAgKGVudGVyKSA9PiB7XG5cdFx0Y29uc3QgZSA9IGVudGVyLmFwcGVuZChcInBhdGhcIik7XG5cdFx0ZS50cmFuc2l0aW9uKGQzLmVhc2VMaW5lYXIpXG5cdFx0ICAgIC5kZWxheSgxMDAwKVxuXHRcdCAgICAuZHVyYXRpb24oNTAwKVxuXHRcdCAgICAuYXR0cihcImRcIiwgZDMuc2Fua2V5TGlua0hvcml6b250YWwoKSlcblx0XHQgICAgLmF0dHIoXCJzdHJva2VcIiwgKGQpID0+IGB1cmwoI2dyYWRpZW50LSR7ZC5pbmRleH1gKVxuXHRcdCAgICAuYXR0cihcInN0cm9rZS13aWR0aFwiLCAoZCkgPT4gZC53aWR0aCk7XG5cdFx0ZS5hcHBlbmQoXCJ0aXRsZVwiKS50ZXh0KChkKSA9PiBgJHtkLmhvdXJzfWApO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICh1cGRhdGUpID0+XG5cdFx0dXBkYXRlXG5cdFx0LnRyYW5zaXRpb24oZDMuZWFzZUxpbmVhcilcblx0XHQuZGVsYXkoNTAwKVxuXHRcdC5kdXJhdGlvbig1MDApXG5cdFx0LmF0dHIoXCJkXCIsIGQzLnNhbmtleUxpbmtIb3Jpem9udGFsKCkpXG5cdFx0LmF0dHIoXCJzdHJva2VcIiwgKGQpID0+IGB1cmwoI2dyYWRpZW50LSR7ZC5pbmRleH1gKVxuXHRcdC5hdHRyKFwic3Ryb2tlLXdpZHRoXCIsIChkKSA9PiBkLndpZHRoKVxuXHRcdC5zZWxlY3QoXCJ0aXRsZVwiKVxuXHRcdC50ZXh0KChkKSA9PiBgJHtkLmhvdXJzfWApLFxuICAgICAgICAgICAgKGV4aXQpID0+XG5cdFx0ZXhpdFxuXHRcdC50cmFuc2l0aW9uKGQzLmVhc2VMaW5lYXIpXG4gICAgICAgICAgICAvKiAuZGVsYXkoMTAwMCkgKi9cblx0XHQuZHVyYXRpb24oNTAwKVxuXHRcdC5zdHlsZShcIm9wYWNpdHlcIiwgMClcblx0XHQucmVtb3ZlKClcblx0KTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0X3NhbmtleV9kYXRhKCkge1xuICAgIGNvbnN0IHJzcCA9IFtcblx0e1xuXHQgICAgXCJsaW5rX2NvbG9yXCI6IFwiI2UzNzdjMlwiLFxuXHQgICAgXCJzb3VyY2VfY29sb3JcIjogXCIjZTM3N2MyXCIsXG5cdCAgICBcInNvdXJjZV9saW5rXCI6IFwiL2x1YS9ob3N0X2RldGFpbHMubHVhP3BhZ2U9Zmxvd3MmaG9zdD0xOTIuMTY4LjEuNyZ2bGFuPTAmYXBwbGljYXRpb249SUdNUFwiLFxuXHQgICAgXCJ0YXJnZXRcIjogXCIyMjQuMC4wLjI1MVwiLFxuXHQgICAgXCJzb3VyY2VcIjogXCJJR01QXCIsXG5cdCAgICBcImxpbmtcIjogXCJJR01QXCIsXG5cdCAgICBcInRhcmdldF9saW5rXCI6IFwiL2x1YS9ob3N0X2RldGFpbHMubHVhP2hvc3Q9MjI0LjAuMC4yNTEmdmxhbj0wXCIsXG5cdCAgICBcInRhcmdldF9ub2RlXCI6IFwiMjI0LjAuMC4yNTFcIixcblx0ICAgIFwic291cmNlX25vZGVcIjogXCIxOTIuMTY4LjEuN1wiLFxuXHQgICAgXCJ2YWx1ZVwiOiA2MFxuXHR9LFxuXHR7XG5cdCAgICBcImxpbmtfY29sb3JcIjogXCIjZTM3N2MyXCIsXG5cdCAgICBcInNvdXJjZV9saW5rXCI6IFwiL2x1YS9ob3N0X2RldGFpbHMubHVhP2hvc3Q9MTkyLjE2OC4xLjcmdmxhbj0wXCIsXG5cdCAgICBcInRhcmdldFwiOiBcIklHTVBcIixcblx0ICAgIFwic291cmNlXCI6IFwiMTkyLjE2OC4xLjdcIixcblx0ICAgIFwibGlua1wiOiBcIklHTVBcIixcblx0ICAgIFwidGFyZ2V0X2xpbmtcIjogXCIvbHVhL2hvc3RfZGV0YWlscy5sdWE/cGFnZT1mbG93cyZob3N0PTE5Mi4xNjguMS43JnZsYW49MCZhcHBsaWNhdGlvbj1JR01QXCIsXG5cdCAgICBcInRhcmdldF9ub2RlXCI6IFwiMjI0LjAuMC4yXCIsXG5cdCAgICBcInRhcmdldF9jb2xvclwiOiBcIiNlMzc3YzJcIixcblx0ICAgIFwic291cmNlX25vZGVcIjogXCIxOTIuMTY4LjEuN1wiLFxuXHQgICAgXCJ2YWx1ZVwiOiAxMjBcblx0fSxcblx0e1xuXHQgICAgXCJsaW5rX2NvbG9yXCI6IFwiI2UzNzdjMlwiLFxuXHQgICAgXCJzb3VyY2VfY29sb3JcIjogXCIjZTM3N2MyXCIsXG5cdCAgICBcInNvdXJjZV9saW5rXCI6IFwiL2x1YS9ob3N0X2RldGFpbHMubHVhP3BhZ2U9Zmxvd3MmaG9zdD0xOTIuMTY4LjEuNyZ2bGFuPTAmYXBwbGljYXRpb249SUdNUFwiLFxuXHQgICAgXCJ0YXJnZXRcIjogXCIyMjQuMC4wLjJcIixcblx0ICAgIFwic291cmNlXCI6IFwiSUdNUFwiLFxuXHQgICAgXCJsaW5rXCI6IFwiSUdNUFwiLFxuXHQgICAgXCJ0YXJnZXRfbGlua1wiOiBcIi9sdWEvaG9zdF9kZXRhaWxzLmx1YT9ob3N0PTIyNC4wLjAuMiZ2bGFuPTBcIixcblx0ICAgIFwidGFyZ2V0X25vZGVcIjogXCIyMjQuMC4wLjJcIixcblx0ICAgIFwic291cmNlX25vZGVcIjogXCIxOTIuMTY4LjEuN1wiLFxuXHQgICAgXCJ2YWx1ZVwiOiA2MFxuXHR9LFxuXHR7XG5cdCAgICBcImxpbmtfY29sb3JcIjogXCIjYmNiZDIyXCIsXG5cdCAgICBcInNvdXJjZV9saW5rXCI6IFwiL2x1YS9ob3N0X2RldGFpbHMubHVhP2hvc3Q9MTkyLjE2OC4xLjcmdmxhbj0wXCIsXG5cdCAgICBcInRhcmdldFwiOiBcIk1ETlNcIixcblx0ICAgIFwic291cmNlXCI6IFwiMTkyLjE2OC4xLjdcIixcblx0ICAgIFwibGlua1wiOiBcIk1ETlNcIixcblx0ICAgIFwidGFyZ2V0X2xpbmtcIjogXCIvbHVhL2hvc3RfZGV0YWlscy5sdWE/cGFnZT1mbG93cyZob3N0PTE5Mi4xNjguMS43JnZsYW49MCZhcHBsaWNhdGlvbj1NRE5TXCIsXG5cdCAgICBcInRhcmdldF9ub2RlXCI6IFwiMjI0LjAuMC4yNTFcIixcblx0ICAgIFwidGFyZ2V0X2NvbG9yXCI6IFwiI2JjYmQyMlwiLFxuXHQgICAgXCJzb3VyY2Vfbm9kZVwiOiBcIjE5Mi4xNjguMS43XCIsXG5cdCAgICBcInZhbHVlXCI6IDM5NlxuXHR9LFxuXHR7XG5cdCAgICBcImxpbmtfY29sb3JcIjogXCIjYmNiZDIyXCIsXG5cdCAgICBcInNvdXJjZV9jb2xvclwiOiBcIiNiY2JkMjJcIixcblx0ICAgIFwic291cmNlX2xpbmtcIjogXCIvbHVhL2hvc3RfZGV0YWlscy5sdWE/cGFnZT1mbG93cyZob3N0PTE5Mi4xNjguMS43JnZsYW49MCZhcHBsaWNhdGlvbj1NRE5TXCIsXG5cdCAgICBcInRhcmdldFwiOiBcIjIyNC4wLjAuMjUxXCIsXG5cdCAgICBcInNvdXJjZVwiOiBcIk1ETlNcIixcblx0ICAgIFwibGlua1wiOiBcIk1ETlNcIixcblx0ICAgIFwidGFyZ2V0X2xpbmtcIjogXCIvbHVhL2hvc3RfZGV0YWlscy5sdWE/aG9zdD0yMjQuMC4wLjI1MSZ2bGFuPTBcIixcblx0ICAgIFwidGFyZ2V0X25vZGVcIjogXCIyMjQuMC4wLjI1MVwiLFxuXHQgICAgXCJzb3VyY2Vfbm9kZVwiOiBcIjE5Mi4xNjguMS43XCIsXG5cdCAgICBcInZhbHVlXCI6IDM5NlxuXHR9XG4gICAgXTtcbiAgICBcbi8qXG4gICAgbGV0IGRhdGEgPSB7XG5cdC8vIG5vZGVzOiBbXG5cdC8vICAgICB7IGluZGV4OiAwLCBuYW1lOiBcIkxpaWtldmFpaHRvXCIsIHZhbHVlOiAxMDAsIGhvdXJzOiBcIjEwMCVcIiB9LFxuXHQvLyAgICAgeyBpbmRleDogMSwgbmFtZTogXCJLaWludGXDpHQga3VsdXRcIiwgdmFsdWU6IDc1LCBob3VyczogXCI4NSVcIiB9LFxuXHQvLyAgICAgeyBpbmRleDogMiwgbmFtZTogXCJNdXV0dHV2YXQga3VsdXRcIiwgdmFsdWU6IDEwLCBob3VyczogXCIzOjAwXCIgfSxcblx0Ly8gICAgIHsgaW5kZXg6IDMsIG5hbWU6IFwiUGFsa2tha3VsdXRcIiwgdmFsdWU6IDY5LCBob3VyczogXCIxOjIwXCIgfSxcblx0Ly8gICAgIHsgaW5kZXg6IDQsIG5hbWU6IFwiTXV1dCBraWludGVcIiwgdmFsdWU6IDYsIGhvdXJzOiBcIjE6NDBcIiB9LFxuXHQvLyAgICAgeyBpbmRleDogNSwgbmFtZTogXCJLYXRlXCIsIHZhbHVlOiAxNSwgaG91cnM6IFwiMTo0MFwiIH1cblx0Ly8gXSxcblx0bm9kZXM6IFtcblx0ICAgIHsgaW5kZXg6IDAsIG5hbWU6IFwiTGlpa2V2YWlodG9cIiwgaG91cnM6IFwiMTAwJVwiIH0sXG5cdCAgICB7IGluZGV4OiAxLCBuYW1lOiBcIktpaW50ZcOkdCBrdWx1dFwiLCBob3VyczogXCI4NSVcIiB9LFxuXHQgICAgeyBpbmRleDogMiwgbmFtZTogXCJNdXV0dHV2YXQga3VsdXRcIiwgaG91cnM6IFwiMzowMFwiIH0sXG5cdCAgICB7IGluZGV4OiAzLCBuYW1lOiBcIlBhbGtrYWt1bHV0XCIsIGhvdXJzOiBcIjE6MjBcIiB9LFxuXHQgICAgeyBpbmRleDogNCwgbmFtZTogXCJNdXV0IGtpaW50ZVwiLCBob3VyczogXCIxOjQwXCIgfSxcblx0ICAgIHsgaW5kZXg6IDUsIG5hbWU6IFwiS2F0ZVwiLCBob3VyczogXCIxOjQwXCIgfVxuXHRdLFxuXHRsaW5rczogW1xuXHQgICAgeyBzb3VyY2U6IDAsIHRhcmdldDogMSwgdmFsdWU6IDc1LCBob3VyczogXCIrMTowMFwiIH0sXG5cdCAgICB7IHNvdXJjZTogMCwgdGFyZ2V0OiAyLCB2YWx1ZTogMTAsIGhvdXJzOiBcIisyOjAwXCIgfSxcblx0ICAgIHsgc291cmNlOiAxLCB0YXJnZXQ6IDMsIHZhbHVlOiA2OSwgaG91cnM6IFwiKzE6MjBcIiB9LFxuXHQgICAgeyBzb3VyY2U6IDEsIHRhcmdldDogNCwgdmFsdWU6IDYsIGhvdXJzOiBcIisxOjQwXCIgfSxcblx0ICAgIHsgc291cmNlOiAwLCB0YXJnZXQ6IDUsIHZhbHVlOiAxNSwgaG91cnM6IFwiKzE6NDBcIiB9XG5cdF1cbiAgICB9O1xuKi9cbiAgICBkYXRhID0gd3JhcF9ncmFwaF9yc3AocnNwKTtcblxuICAgIC8vZGVidWdnZXI7XG4gICAgcmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIHdyYXBfZ3JhcGhfcnNwKHJzcCkge1xuICAgIGxldCBub2RlcyA9IFtdO1xuICAgIGxldCBsaW5rcyA9IFtdO1xuXG4gICAgbGV0IG5vZGVzX2FkZGVkX2RpY3QgPSB7fTtcbiAgICBsZXQgbGlua3NfYWRkZWRfZGljdCA9IHt9O1xuICAgIGNvbnN0IGZfYWRkX25vZGUgPSAobm9kZV9pZCwgaHJlZiwgY29sb3IpID0+IHtcblx0aWYgKG5vZGVzX2FkZGVkX2RpY3Rbbm9kZV9pZF0gIT0gbnVsbCkgeyByZXR1cm47IH1cblx0bGV0IGluZGV4ID0gbm9kZXMubGVuZ3RoO1xuXHRub2Rlc19hZGRlZF9kaWN0W25vZGVfaWRdID0gaW5kZXg7XG5cdGxldCBuZXdfbm9kZSA9IHsgaW5kZXgsIG5hbWU6IG5vZGVfaWQsIGhyZWYsIGNvbG9yIH07XG5cdG5vZGVzLnB1c2gobmV3X25vZGUpO1xuICAgIH07XG4gICAgY29uc3QgZl9hZGRfbGluayA9IChzb3VyY2UsIHRhcmdldCwgdmFsdWUsIGxhYmVsKSA9PiB7XG5cdGNvbnN0IHNvdXJjZV9pbmRleCA9IG5vZGVzX2FkZGVkX2RpY3Rbc291cmNlXTtcblx0Y29uc3QgdGFyZ2V0X2luZGV4ID0gbm9kZXNfYWRkZWRfZGljdFt0YXJnZXRdO1xuXHRsZXQgbmV3X2xpbmsgPSB7IHNvdXJjZTogc291cmNlX2luZGV4LCB0YXJnZXQ6IHRhcmdldF9pbmRleCwgdmFsdWUsIGxhYmVsIH07XG5cdGxpbmtzLnB1c2gobmV3X2xpbmspO1xuICAgIH07XG4gICAgcnNwLmZvckVhY2goKGVsKSA9PiB7XG5cdGZfYWRkX25vZGUoZWwuc291cmNlLCBlbC5zb3VyY2VfbGluaywgZWwuc291cmNlX2NvbG9yKTtcblx0Zl9hZGRfbm9kZShlbC50YXJnZXQsIGVsLnRhcmdldF9saW5rLCBlbC50YXJnZXRfY29sb3IpO1xuXHRmX2FkZF9saW5rKGVsLnNvdXJjZSwgZWwudGFyZ2V0LCBlbC52YWx1ZSwgZWwubGluayk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHsgbm9kZXMsIGxpbmtzIH07XG59XG5cbmZ1bmN0aW9uIGdldF9zaXplKCkge1xuICAgIGxldCB3aWR0aCA9IHByb3BzLndpZHRoO1xuICAgIGlmICh3aWR0aCA9PSBudWxsKSB7IHdpZHRoID0gd2luZG93LmlubmVyV2lkdGggLSAyMDA7IH1cbiAgICBsZXQgaGVpZ2h0ID0gcHJvcHMuaGVpZ2h0O1xuICAgIGlmIChoZWlnaHQgPT0gbnVsbCkgeyBoZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQgLSA1MDsgfVxuXG4gICAgcmV0dXJuIHsgd2lkdGgsIGhlaWdodCB9O1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVfc2Fua2V5KGRhdGEsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICBjb25zdCBzYW5rZXlpbXBsID0gZDMuc2Fua2V5KClcblx0ICAubm9kZUFsaWduKGQzLnNhbmtleUNlbnRlcilcblx0ICAubm9kZVdpZHRoKDEwKVxuXHQgIC5ub2RlUGFkZGluZygxMClcblx0ICAuZXh0ZW50KFtcblx0ICAgICAgWzAsIDVdLFxuXHQgICAgICBbd2lkdGgsIGhlaWdodF1cblx0ICBdKTtcbiAgICBcbiAgICByZXR1cm4gc2Fua2V5aW1wbChkYXRhKTtcbn1cblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cbi5ub2RlIHJlY3Qge1xuICBmaWxsLW9wYWNpdHk6IDAuOTtcbiAgc2hhcGUtcmVuZGVyaW5nOiBjcmlzcEVkZ2VzO1xufVxuXG4ubm9kZSB0ZXh0IHtcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gIHRleHQtc2hhZG93OiAwIDFweCAwICNmZmY7XG59XG5cbi5saW5rIHtcbiAgZmlsbDogbm9uZTtcbiAgc3Ryb2tlOiAjMDAwO1xuICBzdHJva2Utb3BhY2l0eTogMC4yO1xufVxuXG4ubGluazpob3ZlciB7XG4gIHN0cm9rZS1vcGFjaXR5OiAwLjU7XG59XG48L3N0eWxlPlxuIiwiPCEtLVxuICAoQykgMjAxMy0yMiAtIG50b3Aub3JnXG4tLT5cblxuPHRlbXBsYXRlPlxuPGRpdiBjbGFzcz1cInJvd1wiPlxuICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwib3ZlcmxheSBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGFsaWduLWl0ZW1zLWNlbnRlciBwb3NpdGlvbi1hYnNvbHV0ZSBoLTEwMCB3LTEwMFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwic3Bpbm5lci1ib3JkZXIgdGV4dC1wcmltYXJ5IG10LTVcIiByb2xlPVwic3RhdHVzXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNyLW9ubHkgcG9zaXRpb24tYWJzb2x1dGVcIj5Mb2FkaW5nLi4uPC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgXHQ8ZGl2IGlkPVwiaG9zdF9kZXRhaWxzX2FwcGxpY2F0aW9uc1wiPlxuICAgICAgICAgIDx0YWItbGlzdCByZWY9XCJob3N0X2RldGFpbHNfYXBwbGljYXRpb25zX3RhYl9saXN0XCJcbiAgICAgICAgICAgIGlkPVwiaG9zdF9kZXRhaWxzX2FwcGxpY2F0aW9uc190YWJfbGlzdFwiXG4gICAgICAgICAgICA6dGFiX2xpc3Q9XCJ0YWJfbGlzdFwiXG4gICAgICAgICAgICBAY2xpY2tfaXRlbT1cImNsaWNrX2l0ZW1cIj5cbiAgICAgICAgICA8L3RhYi1saXN0PlxuXG4gICAgICAgICAgPGRpdiBjbGFzcz1cInJvdyBtYi00IG10LTRcIiBpZD1cImhvc3RfZGV0YWlsc19hcHBsaWNhdGlvbnNcIj5cbiAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cImNoYXJ0X29wdGlvbiBpbiBjaGFydF9vcHRpb25zXCI+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtNlwiPlxuICAgICAgICAgICAgICAgIDxoMyB2LWlmPVwiY2hhcnRfb3B0aW9uLnRhYiA9PSBhcHBsaWNhdGlvbnNfdGFiXCIgY2xhc3M9XCJ3aWRnZXQtbmFtZVwiPnt7IGNoYXJ0X29wdGlvbi50aXRsZSB9fTwvaDM+XG4gICAgICAgICAgICAgICAgPGNoYXJ0IHYtaWY9XCJjaGFydF9vcHRpb24udGFiID09IGFwcGxpY2F0aW9uc190YWJcIlxuICAgICAgICAgICAgICAgICAgOmlkPVwiY2hhcnRfb3B0aW9uLmlkXCJcbiAgICAgICAgICAgICAgICAgIDpjaGFydF90eXBlPVwiY2hhcnRfb3B0aW9uLnR5cGVcIlxuICAgICAgICAgICAgICAgICAgOmJhc2VfdXJsX3JlcXVlc3Q9XCJjaGFydF9vcHRpb24udXJsXCJcbiAgICAgICAgICAgICAgICAgIDpyZWdpc3Rlcl9vbl9zdGF0dXNfY2hhbmdlPVwiZmFsc2VcIj5cbiAgICAgICAgICAgICAgICA8L2NoYXJ0PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgXG4gICAgICAgICAgPGRhdGF0YWJsZSB2LWlmPVwiYXBwbGljYXRpb25zX3RhYiA9PSAnYXBwbGljYXRpb25zJ1wiIHJlZj1cInRhYmxlX2hvc3RfYXBwbGljYXRpb25zXCJcbiAgICAgICAgICAgIDp0YWJsZV9idXR0b25zPVwiY29uZmlnX2RldmljZXNfYXBwbGljYXRpb25zLnRhYmxlX2J1dHRvbnNcIlxuICAgICAgICAgICAgOmNvbHVtbnNfY29uZmlnPVwiY29uZmlnX2RldmljZXNfYXBwbGljYXRpb25zLmNvbHVtbnNfY29uZmlnXCJcbiAgICAgICAgICAgIDpkYXRhX3VybD1cImNvbmZpZ19kZXZpY2VzX2FwcGxpY2F0aW9ucy5kYXRhX3VybFwiXG4gICAgICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cImNvbmZpZ19kZXZpY2VzX2FwcGxpY2F0aW9ucy5lbmFibGVfc2VhcmNoXCJcbiAgICAgICAgICAgIDp0YWJsZV9jb25maWc9XCJjb25maWdfZGV2aWNlc19hcHBsaWNhdGlvbnMudGFibGVfY29uZmlnXCI+XG4gICAgICAgICAgPC9kYXRhdGFibGU+XG4gICAgICAgICAgPGRhdGF0YWJsZSB2LWlmPVwiYXBwbGljYXRpb25zX3RhYiA9PSAnY2F0ZWdvcmllcydcIiByZWY9XCJ0YWJsZV9ob3N0X2NhdGVnb3JpZXNcIlxuICAgICAgICAgICAgOnRhYmxlX2J1dHRvbnM9XCJjb25maWdfZGV2aWNlc19jYXRlZ29yaWVzLnRhYmxlX2J1dHRvbnNcIlxuICAgICAgICAgICAgOmNvbHVtbnNfY29uZmlnPVwiY29uZmlnX2RldmljZXNfY2F0ZWdvcmllcy5jb2x1bW5zX2NvbmZpZ1wiXG4gICAgICAgICAgICA6ZGF0YV91cmw9XCJjb25maWdfZGV2aWNlc19jYXRlZ29yaWVzLmRhdGFfdXJsXCJcbiAgICAgICAgICAgIDplbmFibGVfc2VhcmNoPVwiY29uZmlnX2RldmljZXNfY2F0ZWdvcmllcy5lbmFibGVfc2VhcmNoXCJcbiAgICAgICAgICAgIDp0YWJsZV9jb25maWc9XCJjb25maWdfZGV2aWNlc19jYXRlZ29yaWVzLnRhYmxlX2NvbmZpZ1wiPlxuICAgICAgICAgIDwvZGF0YXRhYmxlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGRlZmF1bHQgYXMgQ2hhcnQgfSBmcm9tIFwiLi9jaGFydC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgRGF0YXRhYmxlIH0gZnJvbSBcIi4vZGF0YXRhYmxlLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBUYWJMaXN0IH0gZnJvbSBcIi4vdGFiLWxpc3QudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRGVsZXRlQ29uZmlybSB9IGZyb20gXCIuL21vZGFsLWRlbGV0ZS1jb25maXJtLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLCBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tICcuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzJztcbmNvbnN0IGNoYW5nZV9hcHBsaWNhdGlvbnNfdGFiX2V2ZW50ID0gXCJjaGFuZ2VfYXBwbGljYXRpb25zX3RhYl9ldmVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGNvbXBvbmVudHM6IHtcdCAgXG4gICAgJ2NoYXJ0JzogQ2hhcnQsXG4gICAgJ2RhdGF0YWJsZSc6IERhdGF0YWJsZSxcbiAgICAnbW9kYWwtZGVsZXRlLWNvbmZpcm0nOiBNb2RhbERlbGV0ZUNvbmZpcm0sXG4gICAgJ3RhYi1saXN0JzogVGFiTGlzdCxcbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgICB1cmxfcGFyYW1zOiBPYmplY3QsXG4gICAgdmlldzogU3RyaW5nLFxuICAgIGlzX2NoX2VuYWJsZWQ6IEJvb2xlYW4sXG4gICAgaXNfbG9jYWxlOiBTdHJpbmcsXG4gICAgdHNfbDdfZW5hYmxlZDogQm9vbGVhbixcbiAgICB0c19jYXRfZW5hYmxlZDogQm9vbGVhblxuICB9LFxuICAvKipcbiAgICogRmlyc3QgbWV0aG9kIGNhbGxlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgY3JlYXRlZC5cbiAgICovXG4gIGNyZWF0ZWQoKSB7XG4gICAgdGhpcy5hcHBsaWNhdGlvbnNfdGFiID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJ2aWV3XCIpIHx8IHRoaXMuJHByb3BzLnZpZXdcbiAgICB0aGlzLnRhYl9saXN0LmZvckVhY2goKGkpID0+IHtcbiAgICAgIHRoaXMuYXBwbGljYXRpb25zX3RhYiA9PSBpLmlkID8gaS5hY3RpdmUgPSB0cnVlIDogaS5hY3RpdmUgPSBmYWxzZVxuICAgIH0pO1xuICAgIHN0YXJ0X2RhdGF0YWJsZSh0aGlzKTtcbiAgfSxcbiAgbW91bnRlZCgpIHtcbiAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIub25fY3VzdG9tX2V2ZW50KFwiY2hhbmdlX2FwcGxpY2F0aW9uc190YWJfZXZlbnRcIiwgY2hhbmdlX2FwcGxpY2F0aW9uc190YWJfZXZlbnQsICh0YWIpID0+IHtcblx0ICAgIGxldCB0YWJsZSA9IHRoaXMuZ2V0X2FjdGl2ZV90YWJsZSgpO1xuICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCd2aWV3JywgdGFiLmlkKTtcbiAgICAgIHRhYmxlLmRlc3Ryb3lfdGFibGUoKTtcbiAgICAgIHRoaXMuYXBwbGljYXRpb25zX3RhYiA9IHRhYi5pZDtcbiAgICB9KTtcbiAgfSwgICAgXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGkxOG46ICh0KSA9PiBpMThuKHQpLFxuICAgICAgYXBwbGljYXRpb25zX3RhYjogbnVsbCxcbiAgICAgIGNvbmZpZ19kZXZpY2VzX2FwcGxpY2F0aW9uczogbnVsbCxcbiAgICAgIGNvbmZpZ19kZXZpY2VzX2NhdGVnb3JpZXM6IG51bGwsXG4gICAgICBjaGFydF9vcHRpb25zOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB0aXRsZTogaTE4bignZ3JhcGhzLnRvcF8xMF9uZHBpX3Byb3RvY29scycpLFxuICAgICAgICAgIHR5cGU6IG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LkRPTlVULFxuICAgICAgICAgIHVybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L2w3L3Byb3RvX2RhdGEubHVhYCxcbiAgICAgICAgICB0YWI6IGBhcHBsaWNhdGlvbnNgLFxuICAgICAgICAgIGlkOiBgdG9wX2FwcGxpY2F0aW9uc2AsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0aXRsZTogaTE4bignZ3JhcGhzLnRvcF9icmVlZCcpLFxuICAgICAgICAgIHR5cGU6IG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LkRPTlVULFxuICAgICAgICAgIHVybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L2w3L2JyZWVkX2RhdGEubHVhYCxcbiAgICAgICAgICB0YWI6IGBhcHBsaWNhdGlvbnNgLFxuICAgICAgICAgIGlkOiBgdG9wX2JyZWVkYCxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHRpdGxlOiBpMThuKCdncmFwaHMudG9wXzEwX25kcGlfY2F0ZWdvcmllcycpLFxuICAgICAgICAgIHR5cGU6IG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LkRPTlVULFxuICAgICAgICAgIHVybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L2w3L2NhdF9kYXRhLmx1YWAsXG4gICAgICAgICAgdGFiOiBgY2F0ZWdvcmllc2AsXG4gICAgICAgICAgaWQ6IGB0b3BfY2F0ZWdvcmllc2AsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICB0aXRsZTogaTE4bignZ3JhcGhzLnRvcF9icmVlZCcpLFxuICAgICAgICAgIHR5cGU6IG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LkRPTlVULFxuICAgICAgICAgIHVybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L2w3L2JyZWVkX2RhdGEubHVhYCxcbiAgICAgICAgICB0YWI6IGBjYXRlZ29yaWVzYCxcbiAgICAgICAgICBpZDogYHRvcF9icmVlZGAsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgdGFiX2xpc3Q6IFtcbiAgICAgICAgeyBcbiAgICAgICAgICB0aXRsZTogaTE4bignaG9zdF9kZXRhaWxzLmFwcGxpY2F0aW9uc190YWInKSxcbiAgICAgICAgICBhY3RpdmU6ICh0aGlzLiRwcm9wcy52aWV3ID09ICdhcHBsaWNhdGlvbnMnKSxcbiAgICAgICAgICBpZDogJ2FwcGxpY2F0aW9ucydcbiAgICAgICAgfSxcbiAgICAgICAgeyBcbiAgICAgICAgICB0aXRsZTogaTE4bignaG9zdF9kZXRhaWxzLmNhdGVnb3JpZXNfdGFiJyksXG4gICAgICAgICAgYWN0aXZlOiAodGhpcy4kcHJvcHMudmlldyA9PSAnY2F0ZWdvcmllcycpLFxuICAgICAgICAgIGlkOiAnY2F0ZWdvcmllcydcbiAgICAgICAgfSxcbiAgICAgIF1cbiAgICB9O1xuICB9LFxuICBtZXRob2RzOiB7XG4gICAgYWRkX2FjdGlvbl9jb2x1bW46IGZ1bmN0aW9uKGNvbHVtbnMsIG5hbWUsIHZhbHVlKSB7XG4gICAgICBjb25zdCBob3N0ID0gYCR7dGhpcy4kcHJvcHMudXJsX3BhcmFtcy5ob3N0fWBcbiAgICAgIGNvbnN0IHZsYW4gPSBgJHt0aGlzLiRwcm9wcy51cmxfcGFyYW1zLnZsYW59YFxuICAgICAgY29uc3QgaWZpZCA9IGAke3RoaXMuJHByb3BzLnVybF9wYXJhbXMuaWZpZH1gXG4gICAgICBsZXQgaGFuZGxlcklkID0gXCJwYWdlLXN0YXRzLWFjdGlvbi1qdW1wLWhpc3RvcmljYWxcIjtcbiAgICAgIGNvbHVtbnMucHVzaCh7IGNvbHVtbk5hbWU6IGkxOG4oXCJhY3Rpb25zXCIpLCB3aWR0aDogJzUlJywgbmFtZTogJ2FjdGlvbnMnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIG9yZGVyYWJsZTogZmFsc2UsIHJlc3BvbnNpdmVQcmlvcml0eTogMCwgaGFuZGxlcklkLCByZW5kZXI6IChkYXRhLCB0eXBlLCBzZXJ2aWNlKSA9PiB7XG4gICAgICAgIGNvbnN0IGp1bXBfdG9faGlzdG9yaWNhbCA9IHtcbiAgICAgICAgICBoYW5kbGVySWQsXG4gICAgICAgICAgb25DbGljazogKCkgPT4ge1xuICAgICAgICAgICAgbGV0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2RiX3NlYXJjaC5sdWE/aWZpZD0ke2lmaWR9JiR7bmFtZX09JHtzZXJ2aWNlW3ZhbHVlXS5pZH07ZXEmaXA9JHtob3N0fTtlcWBcbiAgICAgICAgICAgIGlmKHZsYW4gIT0gMClcbiAgICAgICAgICAgICAgdXJsID0gYCR7dXJsfSZ2bGFuX2lkPSR7dmxhbn07ZXFgXG4gICAgICAgICAgICB3aW5kb3cub3Blbih1cmwpXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gRGF0YVRhYmxlVXRpbHMuY3JlYXRlQWN0aW9uQnV0dG9ucyhbeyBjbGFzczogJ2Ryb3Bkb3duLWl0ZW0nLCBocmVmOiAnIycsIHRpdGxlOiBpMThuKCdkYl9leHBsb3Jlci5oaXN0b3JpY2FsX2RhdGEnKSwgaGFuZGxlcjoganVtcF90b19oaXN0b3JpY2FsIH1dKVxuICAgICAgfX0pXG4gICAgfSxcbiAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCB0YWJsZSA9IHRoaXMuZ2V0X2FjdGl2ZV90YWJsZSgpO1xuICAgICAgdGFibGUuZGVzdHJveV90YWJsZSgpO1xuICAgIH0sXG4gICAgLyogTWV0aG9kIHVzZWQgdG8gc3dpdGNoIGFjdGl2ZSB0YWJsZSB0YWIgKi9cbiAgICBjbGlja19pdGVtOiBmdW5jdGlvbihpdGVtKSB7XG4gICAgICB0aGlzLnRhYl9saXN0LmZvckVhY2goKGkpID0+IGkuYWN0aXZlID0gZmFsc2UpO1xuICAgICAgaXRlbS5hY3RpdmUgPSB0cnVlO1xuICAgICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfY3VzdG9tX2V2ZW50KGNoYW5nZV9hcHBsaWNhdGlvbnNfdGFiX2V2ZW50LCBpdGVtKTtcbiAgICB9LCBcbiAgICByZWxvYWRfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHRhYmxlID0gdGhpcy5nZXRfYWN0aXZlX3RhYmxlKCk7XG4gICAgICBOdG9wVXRpbHMuc2hvd092ZXJsYXlzKCk7XG4gICAgICB0YWJsZS5yZWxvYWQoKTtcbiAgICAgIE50b3BVdGlscy5oaWRlT3ZlcmxheXMoKTtcbiAgICB9LFxuICAgIGdldF9hY3RpdmVfdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuJHJlZnNbYHRhYmxlX2hvc3RfJHt0aGlzLmFwcGxpY2F0aW9uc190YWJ9YF07XG4gICAgfSxcbiAgICBnZXRfZl9nZXRfY3VzdG9tX2NoYXJ0X29wdGlvbnMoKSB7XG4gICAgICBjb25zb2xlLmxvZyhcImdldF9mX1wiKTtcbiAgICAgIHJldHVybiBhc3luYyAodXJsKSA9PiB7XG4gICAgICAgIHJldHVybiBjaGFydHNfb3B0aW9uc19pdGVtcy52YWx1ZVtjaGFydF9pbmRleF0uY2hhcnRfb3B0aW9ucztcbiAgICAgIH1cbiAgICB9XG4gIH0sXG59ICBcblxuZnVuY3Rpb24gc3RhcnRfZGF0YXRhYmxlKFBhZ2VWdWUpIHtcbiAgY29uc3QgZGF0YXRhYmxlQnV0dG9uID0gW107XG5cbiAgLyogTWFuYWdlIHRoZSBidXR0b25zIGNsb3NlIHRvIHRoZSBzZWFyY2ggYm94ICovXG4gIGRhdGF0YWJsZUJ1dHRvbi5wdXNoKHtcbiAgICB0ZXh0OiAnPGkgY2xhc3M9XCJmYXMgZmEtc3luY1wiPjwvaT4nLFxuICAgIGNsYXNzTmFtZTogJ2J0bi1saW5rJyxcbiAgICBhY3Rpb246IGZ1bmN0aW9uIChlLCBkdCwgbm9kZSwgY29uZmlnKSB7XG4gICAgICBQYWdlVnVlLnJlbG9hZF90YWJsZSgpO1xuICAgIH1cbiAgfSk7XG4gIFxuICBsZXQgdG1wX3BhcmFtcyA9IHVybF9wYXJhbXM7XG4gIHRtcF9wYXJhbXNbJ3ZpZXcnXSA9ICdhcHBsaWNhdGlvbnMnXG4gIFxuICBsZXQgZGVmYXVsdERhdGF0YWJsZUNvbmZpZyA9IHtcbiAgICB0YWJsZV9idXR0b25zOiBkYXRhdGFibGVCdXR0b24sXG4gICAgZGF0YV91cmw6IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvbDcvZGF0YS5sdWFgLCB0bXBfcGFyYW1zKSxcbiAgICBlbmFibGVfc2VhcmNoOiB0cnVlLFxuICAgIHRhYmxlX2NvbmZpZzogeyBcbiAgICAgIHNlcnZlclNpZGU6IGZhbHNlLCBcbiAgICAgIG9yZGVyOiBbWyA2IC8qIHBlcmNlbnRhZ2UgY29sdW1uICovLCAnZGVzYycgXV0sXG4gICAgICBjb2x1bW5EZWZzOiBbXG4gICAgICAgIHsgdHlwZTogXCJ0aW1lLXVuaVwiLCB0YXJnZXRzOiAxIH0sXG4gICAgICAgIHsgdHlwZTogXCJmaWxlLXNpemVcIiwgdGFyZ2V0czogMiB9LFxuICAgICAgICB7IHR5cGU6IFwiZmlsZS1zaXplXCIsIHRhcmdldHM6IDMgfSxcbiAgICAgICAgeyB0eXBlOiBcImZpbGUtc2l6ZVwiLCB0YXJnZXRzOiA1IH0sXG4gICAgICBdXG4gICAgfVxuICB9O1xuICBcbiAgLyogQXBwbGljYXRpb25zIHRhYmxlIGNvbmZpZ3VyYXRpb24gKi8gIFxuXG4gIGxldCBjb2x1bW5zID0gW1xuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImhvc3RfZGV0YWlscy5hcHBsaWNhdGlvblwiKSwgdGFyZ2V0czogMCwgd2lkdGg6ICcyMCcsIG5hbWU6ICdhcHBsaWNhdGlvbicsIGRhdGE6ICdhcHBsaWNhdGlvbicsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICBpZiAoUGFnZVZ1ZS4kcHJvcHMuaXNfbG9jYWxlID09IFwiMVwiICYmIFBhZ2VWdWUuJHByb3BzLnRzX2w3X2VuYWJsZWQgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIGA8YSBocmVmPVwiJHtodHRwX3ByZWZpeH0vbHVhL2hvc3RfZGV0YWlscy5sdWE/aG9zdD0ke1BhZ2VWdWUuJHByb3BzLnVybF9wYXJhbXMuaG9zdH1AJHtQYWdlVnVlLiRwcm9wcy51cmxfcGFyYW1zLnZsYW59JnBhZ2U9aGlzdG9yaWNhbCZpZmlkPSR7UGFnZVZ1ZS4kcHJvcHMudXJsX3BhcmFtcy5pZmlkfSZwcm90b2NvbD0ke2RhdGEubGFiZWx9JnRzX3NjaGVtYT1ob3N0Om5kcGlcIiB0YXJnZXQ9XCJfYmxhbmtcIj4ke2RhdGEubGFiZWx9PC9hPmBcbiAgICAgIH0gZWxzZVxuICAgICAgICByZXR1cm4gYCR7ZGF0YS5sYWJlbH1gO1xuICAgICAgfSBcbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImhvc3RfZGV0YWlscy5kdXJhdGlvblwiKSwgdGFyZ2V0czogMSwgd2lkdGg6ICcxMCcsIG5hbWU6ICdkdXJhdGlvbicsIGRhdGE6ICdkdXJhdGlvbicsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuc2Vjb25kc1RvVGltZShkYXRhKTtcbiAgICAgIH0gIFxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaG9zdF9kZXRhaWxzLnNlbnRcIiksIHRhcmdldHM6IDIsIHdpZHRoOiAnMTAnLCBuYW1lOiAnc2VudCcsIGRhdGE6ICdieXRlc19zZW50JywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgICAgcmV0dXJuIE50b3BVdGlscy5ieXRlc1RvU2l6ZShkYXRhKTtcbiAgICAgIH0gIFxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaG9zdF9kZXRhaWxzLnJjdmRcIiksIHRhcmdldHM6IDMsIHdpZHRoOiAnMTAnLCBuYW1lOiAncmN2ZCcsIGRhdGE6ICdieXRlc19yY3ZkJywgIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyIHRleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuYnl0ZXNUb1NpemUoZGF0YSk7XG4gICAgICB9ICBcbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImhvc3RfZGV0YWlscy5icmVha2Rvd25cIiksIHRhcmdldHM6IDQsIHdpZHRoOiAnMTAnLCBuYW1lOiAnYnJlYWtkb3duJywgZGF0YTogJ2JyZWFrZG93bicsIG9yZGVyYWJsZTogZmFsc2UsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyIHRleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyLCByZW5kZXI6IChkYXRhLCB0eXBlLCByb3cpID0+IHtcbiAgICAgICAgY29uc3QgcGVyY2VudGFnZV9zZW50ID0gKHJvdy5ieXRlc19zZW50ICogMTAwKSAvIHJvdy50b3RfYnl0ZXM7XG4gICAgICAgIGNvbnN0IHBlcmNlbnRhZ2VfcmN2ZCA9IChyb3cuYnl0ZXNfcmN2ZCAqIDEwMCkgLyByb3cudG90X2J5dGVzO1xuICAgICAgICByZXR1cm4gTnRvcFV0aWxzLmNyZWF0ZUJyZWFrZG93bihwZXJjZW50YWdlX3NlbnQsIHBlcmNlbnRhZ2VfcmN2ZCwgaTE4bignaG9zdF9kZXRhaWxzLnNlbnQnKSwgaTE4bignaG9zdF9kZXRhaWxzLnJjdmQnKSk7XG4gICAgICB9ICBcbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImhvc3RfZGV0YWlscy50b3RfYnl0ZXNcIiksIHRhcmdldHM6IDUsIHdpZHRoOiAnMjAnLCBuYW1lOiAndG90X2J5dGVzJywgZGF0YTogJ3RvdF9ieXRlcycsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyIHRleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuYnl0ZXNUb1NpemUoZGF0YSk7XG4gICAgICB9ICAgXG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJob3N0X2RldGFpbHMudG90X3BlcmNlbnRhZ2VcIiksIHRhcmdldHM6IDYsIHdpZHRoOiAnMjAnLCBuYW1lOiAncGVyY2VudGFnZScsIGRhdGE6ICdwZXJjZW50YWdlJywgIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyIHRleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICAgIGNvbnN0IHBlcmNlbnRhZ2UgPSBkYXRhLnRvRml4ZWQoMSk7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuY3JlYXRlUHJvZ3Jlc3NCYXIocGVyY2VudGFnZSk7XG4gICAgICB9ICBcbiAgICB9LFxuICBdO1xuXG4gIGlmKGlzX2NoX2VuYWJsZWQpXG4gICAgUGFnZVZ1ZS5hZGRfYWN0aW9uX2NvbHVtbihjb2x1bW5zLCAnbDdwcm90bycsICdhcHBsaWNhdGlvbicpO1xuICBcbiAgbGV0IGFwcGxpY2F0aW9uc0NvbmZpZyA9IG50b3BuZ191dGlsaXR5LmNsb25lKGRlZmF1bHREYXRhdGFibGVDb25maWcpO1xuICBhcHBsaWNhdGlvbnNDb25maWcuY29sdW1uc19jb25maWcgPSBjb2x1bW5zO1xuICBQYWdlVnVlLmNvbmZpZ19kZXZpY2VzX2FwcGxpY2F0aW9ucyA9IGFwcGxpY2F0aW9uc0NvbmZpZztcblxuXG4gIC8qIENhdGVnb3JpZXMgdGFibGUgY29uZmlndXJhdGlvbiAqL1xuXG4gIHRtcF9wYXJhbXNbJ3ZpZXcnXSA9ICdjYXRlZ29yaWVzJyAgXG4gIGRlZmF1bHREYXRhdGFibGVDb25maWcuZGF0YV91cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L2w3L2RhdGEubHVhYCwgdG1wX3BhcmFtcylcblxuXG4gIGNvbHVtbnMgPSBbXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaG9zdF9kZXRhaWxzLmNhdGVnb3J5XCIpLCB0YXJnZXRzOiAwLCBuYW1lOiAnY2F0ZWdvcnknLCBkYXRhOiAnY2F0ZWdvcnknLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiAoZGF0YSkgPT4ge1xuICAgICAgaWYgKFBhZ2VWdWUuJHByb3BzLmlzX2xvY2FsZSA9PSBcIjFcIiAmJiBQYWdlVnVlLiRwcm9wcy50c19jYXRfZW5hYmxlZCA9PT0gdHJ1ZSlcbiAgICAgICAgcmV0dXJuIGA8YSBocmVmPVwiJHtodHRwX3ByZWZpeH0vbHVhL2hvc3RfZGV0YWlscy5sdWE/aG9zdD0ke1BhZ2VWdWUuJHByb3BzLnVybF9wYXJhbXMuaG9zdH1AJHtQYWdlVnVlLiRwcm9wcy51cmxfcGFyYW1zLnZsYW59JnRzX3NjaGVtYT1ob3N0Om5kcGlfY2F0ZWdvcmllcyZwYWdlPWhpc3RvcmljYWwmY2F0ZWdvcnk9JHtkYXRhLmxhYmVsfVwiIHRhcmdldD1cIl9ibGFua1wiPiR7ZGF0YS5sYWJlbH08L2E+YFxuICAgICAgZWxzZVxuICAgICAgICByZXR1cm4gYCR7ZGF0YS5sYWJlbH1gO1xuICAgICAgfSBcbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImhvc3RfZGV0YWlscy5hcHBsaWNhdGlvbnNcIiksIHRhcmdldHM6IDAsIG5hbWU6ICdhcHBsaWNhdGlvbnMnLCBkYXRhOiAnYXBwbGljYXRpb25zJywgb3JkZXJhYmxlOiBmYWxzZSwgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgICAgaWYoUGFnZVZ1ZS4kcHJvcHMuaXNfbG9jYWxlID09IFwiMVwiKVxuICAgICAgICAgIHJldHVybiBgJHtkYXRhLmxhYmVsIHx8ICcnfSA8YSBocmVmPVwiJHtodHRwX3ByZWZpeH0vJHtkYXRhLmhyZWZ9JHtkYXRhLmNhdGVnb3J5X2lkfVwiPiR7ZGF0YS5tb3JlX3Byb3RvcyB8fCAnJ308L2E+YFxuICAgICAgICBlbHNlXG4gICAgICAgICAgcmV0dXJuIGAke2RhdGEubGFiZWwgfHwgJyd9YDtcbiAgICAgIH0gXG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJob3N0X2RldGFpbHMuZHVyYXRpb25cIiksIHRhcmdldHM6IDAsIG5hbWU6ICdkdXJhdGlvbicsIGRhdGE6ICdkdXJhdGlvbicsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuc2Vjb25kc1RvVGltZShkYXRhKTtcbiAgICAgIH0gIFxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaG9zdF9kZXRhaWxzLnRvdF9ieXRlc1wiKSwgdGFyZ2V0czogMCwgbmFtZTogJ3RvdF9ieXRlcycsIGRhdGE6ICd0b3RfYnl0ZXMnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlciB0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiwgcmVuZGVyOiAoZGF0YSkgPT4ge1xuICAgICAgICByZXR1cm4gTnRvcFV0aWxzLmJ5dGVzVG9TaXplKGRhdGEpO1xuICAgICAgfSAgXG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJob3N0X2RldGFpbHMudG90X3BlcmNlbnRhZ2VcIiksIHRhcmdldHM6IDAsIG5hbWU6ICdwZXJjZW50YWdlJywgZGF0YTogJ3BlcmNlbnRhZ2UnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlciB0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiwgcmVuZGVyOiAoZGF0YSkgPT4ge1xuICAgICAgICBjb25zdCBwZXJjZW50YWdlID0gZGF0YS50b0ZpeGVkKDEpO1xuICAgICAgICByZXR1cm4gTnRvcFV0aWxzLmNyZWF0ZVByb2dyZXNzQmFyKHBlcmNlbnRhZ2UpO1xuICAgICAgfSAgXG4gICAgfSxcbiAgXTtcblxuICBpZihpc19jaF9lbmFibGVkKVxuICAgIFBhZ2VWdWUuYWRkX2FjdGlvbl9jb2x1bW4oY29sdW1ucywgJ2w3Y2F0JywgJ2NhdGVnb3J5Jyk7XG4gIFxuICBsZXQgY2F0ZWdvcmllc0NvbmZpZyA9IG50b3BuZ191dGlsaXR5LmNsb25lKGRlZmF1bHREYXRhdGFibGVDb25maWcpO1xuICBjYXRlZ29yaWVzQ29uZmlnLmNvbHVtbnNfY29uZmlnID0gY29sdW1ucztcbiAgY2F0ZWdvcmllc0NvbmZpZy50YWJsZV9jb25maWcub3JkZXIgPSBbWyA0IC8qIHBlcmNlbnRhZ2UgY29sdW1uICovLCAnZGVzYycgXV1cbiAgY2F0ZWdvcmllc0NvbmZpZy50YWJsZV9jb25maWcuY29sdW1uRGVmcyA9IFtcbiAgICB7IHR5cGU6IFwidGltZS11bmlcIiwgdGFyZ2V0czogMiB9LFxuICAgIHsgdHlwZTogXCJmaWxlLXNpemVcIiwgdGFyZ2V0czogMyB9LFxuICBdXG4gIFxuICBQYWdlVnVlLmNvbmZpZ19kZXZpY2VzX2NhdGVnb3JpZXMgPSBjYXRlZ29yaWVzQ29uZmlnO1xufVxuPC9zY3JpcHQ+XG5cblxuXG5cblxuXG4iLCI8IS0tXG4gIChDKSAyMDEzLTIyIC0gbnRvcC5vcmdcbi0tPlxuXG48dGVtcGxhdGU+XG48ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgPGRpdiBjbGFzcz1cImNhcmRcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJvdmVybGF5IGp1c3RpZnktY29udGVudC1jZW50ZXIgYWxpZ24taXRlbXMtY2VudGVyIHBvc2l0aW9uLWFic29sdXRlIGgtMTAwIHctMTAwXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJzcGlubmVyLWJvcmRlciB0ZXh0LXByaW1hcnkgbXQtNVwiIHJvbGU9XCJzdGF0dXNcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3Itb25seSBwb3NpdGlvbi1hYnNvbHV0ZVwiPkxvYWRpbmcuLi48L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICBcdDxkaXYgaWQ9XCJob3N0X2RldGFpbHNfYXBwbGljYXRpb25zXCI+XG4gICAgICAgICAgPHRhYi1saXN0IHJlZj1cImhvc3RfZGV0YWlsc19hcHBsaWNhdGlvbnNfdGFiX2xpc3RcIlxuICAgICAgICAgICAgaWQ9XCJob3N0X2RldGFpbHNfYXBwbGljYXRpb25zX3RhYl9saXN0XCJcbiAgICAgICAgICAgIDp0YWJfbGlzdD1cInRhYl9saXN0XCJcbiAgICAgICAgICAgIEBjbGlja19pdGVtPVwiY2xpY2tfaXRlbVwiPlxuICAgICAgICAgIDwvdGFiLWxpc3Q+XG5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwicm93IG1iLTQgbXQtNFwiIGlkPVwiaG9zdF9kZXRhaWxzX2FwcGxpY2F0aW9uc1wiPlxuICAgICAgICAgICAgPHRlbXBsYXRlIHYtZm9yPVwiY2hhcnRfb3B0aW9uIGluIGNoYXJ0X29wdGlvbnNcIj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC02XCI+XG4gICAgICAgICAgICAgICAgPGgzIHYtaWY9XCJjaGFydF9vcHRpb24udGFiID09IGFwcGxpY2F0aW9uc190YWJcIiBjbGFzcz1cIndpZGdldC1uYW1lXCI+e3sgY2hhcnRfb3B0aW9uLnRpdGxlIH19PC9oMz5cbiAgICAgICAgICAgICAgICA8Y2hhcnQgdi1pZj1cImNoYXJ0X29wdGlvbi50YWIgPT0gYXBwbGljYXRpb25zX3RhYlwiXG4gICAgICAgICAgICAgICAgICA6aWQ9XCJjaGFydF9vcHRpb24uaWRcIlxuICAgICAgICAgICAgICAgICAgOmNoYXJ0X3R5cGU9XCJjaGFydF9vcHRpb24udHlwZVwiXG4gICAgICAgICAgICAgICAgICA6YmFzZV91cmxfcmVxdWVzdD1cImNoYXJ0X29wdGlvbi51cmxcIlxuICAgICAgICAgICAgICAgICAgOnJlZ2lzdGVyX29uX3N0YXR1c19jaGFuZ2U9XCJmYWxzZVwiPlxuICAgICAgICAgICAgICAgIDwvY2hhcnQ+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICBcbiAgICAgICAgICA8ZGF0YXRhYmxlIHYtaWY9XCJhcHBsaWNhdGlvbnNfdGFiID09ICdhcHBsaWNhdGlvbnMnXCIgcmVmPVwidGFibGVfaG9zdF9hcHBsaWNhdGlvbnNcIlxuICAgICAgICAgICAgOnRhYmxlX2J1dHRvbnM9XCJjb25maWdfZGV2aWNlc19hcHBsaWNhdGlvbnMudGFibGVfYnV0dG9uc1wiXG4gICAgICAgICAgICA6Y29sdW1uc19jb25maWc9XCJjb25maWdfZGV2aWNlc19hcHBsaWNhdGlvbnMuY29sdW1uc19jb25maWdcIlxuICAgICAgICAgICAgOmRhdGFfdXJsPVwiY29uZmlnX2RldmljZXNfYXBwbGljYXRpb25zLmRhdGFfdXJsXCJcbiAgICAgICAgICAgIDplbmFibGVfc2VhcmNoPVwiY29uZmlnX2RldmljZXNfYXBwbGljYXRpb25zLmVuYWJsZV9zZWFyY2hcIlxuICAgICAgICAgICAgOnRhYmxlX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX2FwcGxpY2F0aW9ucy50YWJsZV9jb25maWdcIj5cbiAgICAgICAgICA8L2RhdGF0YWJsZT5cbiAgICAgICAgICA8ZGF0YXRhYmxlIHYtaWY9XCJhcHBsaWNhdGlvbnNfdGFiID09ICdjYXRlZ29yaWVzJ1wiIHJlZj1cInRhYmxlX2hvc3RfY2F0ZWdvcmllc1wiXG4gICAgICAgICAgICA6dGFibGVfYnV0dG9ucz1cImNvbmZpZ19kZXZpY2VzX2NhdGVnb3JpZXMudGFibGVfYnV0dG9uc1wiXG4gICAgICAgICAgICA6Y29sdW1uc19jb25maWc9XCJjb25maWdfZGV2aWNlc19jYXRlZ29yaWVzLmNvbHVtbnNfY29uZmlnXCJcbiAgICAgICAgICAgIDpkYXRhX3VybD1cImNvbmZpZ19kZXZpY2VzX2NhdGVnb3JpZXMuZGF0YV91cmxcIlxuICAgICAgICAgICAgOmVuYWJsZV9zZWFyY2g9XCJjb25maWdfZGV2aWNlc19jYXRlZ29yaWVzLmVuYWJsZV9zZWFyY2hcIlxuICAgICAgICAgICAgOnRhYmxlX2NvbmZpZz1cImNvbmZpZ19kZXZpY2VzX2NhdGVnb3JpZXMudGFibGVfY29uZmlnXCI+XG4gICAgICAgICAgPC9kYXRhdGFibGU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBDaGFydCB9IGZyb20gXCIuL2NoYXJ0LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRhdGFibGUgfSBmcm9tIFwiLi9kYXRhdGFibGUudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFRhYkxpc3QgfSBmcm9tIFwiLi90YWItbGlzdC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxEZWxldGVDb25maXJtIH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfZXZlbnRzX21hbmFnZXIsIG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMnO1xuY29uc3QgY2hhbmdlX2FwcGxpY2F0aW9uc190YWJfZXZlbnQgPSBcImNoYW5nZV9hcHBsaWNhdGlvbnNfdGFiX2V2ZW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY29tcG9uZW50czoge1x0ICBcbiAgICAnY2hhcnQnOiBDaGFydCxcbiAgICAnZGF0YXRhYmxlJzogRGF0YXRhYmxlLFxuICAgICdtb2RhbC1kZWxldGUtY29uZmlybSc6IE1vZGFsRGVsZXRlQ29uZmlybSxcbiAgICAndGFiLWxpc3QnOiBUYWJMaXN0LFxuICB9LFxuICBwcm9wczoge1xuICAgIHBhZ2VfY3NyZjogU3RyaW5nLFxuICAgIHVybF9wYXJhbXM6IE9iamVjdCxcbiAgICB2aWV3OiBTdHJpbmcsXG4gICAgaXNfY2hfZW5hYmxlZDogQm9vbGVhbixcbiAgICBpc19sb2NhbGU6IFN0cmluZyxcbiAgICB0c19sN19lbmFibGVkOiBCb29sZWFuLFxuICAgIHRzX2NhdF9lbmFibGVkOiBCb29sZWFuXG4gIH0sXG4gIC8qKlxuICAgKiBGaXJzdCBtZXRob2QgY2FsbGVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBjcmVhdGVkLlxuICAgKi9cbiAgY3JlYXRlZCgpIHtcbiAgICB0aGlzLmFwcGxpY2F0aW9uc190YWIgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInZpZXdcIikgfHwgdGhpcy4kcHJvcHMudmlld1xuICAgIHRoaXMudGFiX2xpc3QuZm9yRWFjaCgoaSkgPT4ge1xuICAgICAgdGhpcy5hcHBsaWNhdGlvbnNfdGFiID09IGkuaWQgPyBpLmFjdGl2ZSA9IHRydWUgOiBpLmFjdGl2ZSA9IGZhbHNlXG4gICAgfSk7XG4gICAgc3RhcnRfZGF0YXRhYmxlKHRoaXMpO1xuICB9LFxuICBtb3VudGVkKCkge1xuICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5vbl9jdXN0b21fZXZlbnQoXCJjaGFuZ2VfYXBwbGljYXRpb25zX3RhYl9ldmVudFwiLCBjaGFuZ2VfYXBwbGljYXRpb25zX3RhYl9ldmVudCwgKHRhYikgPT4ge1xuXHQgICAgbGV0IHRhYmxlID0gdGhpcy5nZXRfYWN0aXZlX3RhYmxlKCk7XG4gICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoJ3ZpZXcnLCB0YWIuaWQpO1xuICAgICAgdGFibGUuZGVzdHJveV90YWJsZSgpO1xuICAgICAgdGhpcy5hcHBsaWNhdGlvbnNfdGFiID0gdGFiLmlkO1xuICAgIH0pO1xuICB9LCAgICBcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaTE4bjogKHQpID0+IGkxOG4odCksXG4gICAgICBhcHBsaWNhdGlvbnNfdGFiOiBudWxsLFxuICAgICAgY29uZmlnX2RldmljZXNfYXBwbGljYXRpb25zOiBudWxsLFxuICAgICAgY29uZmlnX2RldmljZXNfY2F0ZWdvcmllczogbnVsbCxcbiAgICAgIGNoYXJ0X29wdGlvbnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHRpdGxlOiBpMThuKCdncmFwaHMudG9wXzEwX25kcGlfcHJvdG9jb2xzJyksXG4gICAgICAgICAgdHlwZTogbnRvcENoYXJ0QXBleC50eXBlQ2hhcnQuRE9OVVQsXG4gICAgICAgICAgdXJsOiBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvbDcvcHJvdG9fZGF0YS5sdWFgLFxuICAgICAgICAgIHRhYjogYGFwcGxpY2F0aW9uc2AsXG4gICAgICAgICAgaWQ6IGB0b3BfYXBwbGljYXRpb25zYCxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHRpdGxlOiBpMThuKCdncmFwaHMudG9wX2JyZWVkJyksXG4gICAgICAgICAgdHlwZTogbnRvcENoYXJ0QXBleC50eXBlQ2hhcnQuRE9OVVQsXG4gICAgICAgICAgdXJsOiBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvbDcvYnJlZWRfZGF0YS5sdWFgLFxuICAgICAgICAgIHRhYjogYGFwcGxpY2F0aW9uc2AsXG4gICAgICAgICAgaWQ6IGB0b3BfYnJlZWRgLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgdGl0bGU6IGkxOG4oJ2dyYXBocy50b3BfMTBfbmRwaV9jYXRlZ29yaWVzJyksXG4gICAgICAgICAgdHlwZTogbnRvcENoYXJ0QXBleC50eXBlQ2hhcnQuRE9OVVQsXG4gICAgICAgICAgdXJsOiBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvbDcvY2F0X2RhdGEubHVhYCxcbiAgICAgICAgICB0YWI6IGBjYXRlZ29yaWVzYCxcbiAgICAgICAgICBpZDogYHRvcF9jYXRlZ29yaWVzYCxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHRpdGxlOiBpMThuKCdncmFwaHMudG9wX2JyZWVkJyksXG4gICAgICAgICAgdHlwZTogbnRvcENoYXJ0QXBleC50eXBlQ2hhcnQuRE9OVVQsXG4gICAgICAgICAgdXJsOiBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvbDcvYnJlZWRfZGF0YS5sdWFgLFxuICAgICAgICAgIHRhYjogYGNhdGVnb3JpZXNgLFxuICAgICAgICAgIGlkOiBgdG9wX2JyZWVkYCxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICB0YWJfbGlzdDogW1xuICAgICAgICB7IFxuICAgICAgICAgIHRpdGxlOiBpMThuKCdob3N0X2RldGFpbHMuYXBwbGljYXRpb25zX3RhYicpLFxuICAgICAgICAgIGFjdGl2ZTogKHRoaXMuJHByb3BzLnZpZXcgPT0gJ2FwcGxpY2F0aW9ucycpLFxuICAgICAgICAgIGlkOiAnYXBwbGljYXRpb25zJ1xuICAgICAgICB9LFxuICAgICAgICB7IFxuICAgICAgICAgIHRpdGxlOiBpMThuKCdob3N0X2RldGFpbHMuY2F0ZWdvcmllc190YWInKSxcbiAgICAgICAgICBhY3RpdmU6ICh0aGlzLiRwcm9wcy52aWV3ID09ICdjYXRlZ29yaWVzJyksXG4gICAgICAgICAgaWQ6ICdjYXRlZ29yaWVzJ1xuICAgICAgICB9LFxuICAgICAgXVxuICAgIH07XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBhZGRfYWN0aW9uX2NvbHVtbjogZnVuY3Rpb24oY29sdW1ucywgbmFtZSwgdmFsdWUpIHtcbiAgICAgIGNvbnN0IGhvc3QgPSBgJHt0aGlzLiRwcm9wcy51cmxfcGFyYW1zLmhvc3R9YFxuICAgICAgY29uc3QgdmxhbiA9IGAke3RoaXMuJHByb3BzLnVybF9wYXJhbXMudmxhbn1gXG4gICAgICBjb25zdCBpZmlkID0gYCR7dGhpcy4kcHJvcHMudXJsX3BhcmFtcy5pZmlkfWBcbiAgICAgIGxldCBoYW5kbGVySWQgPSBcInBhZ2Utc3RhdHMtYWN0aW9uLWp1bXAtaGlzdG9yaWNhbFwiO1xuICAgICAgY29sdW1ucy5wdXNoKHsgY29sdW1uTmFtZTogaTE4bihcImFjdGlvbnNcIiksIHdpZHRoOiAnNSUnLCBuYW1lOiAnYWN0aW9ucycsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgb3JkZXJhYmxlOiBmYWxzZSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAwLCBoYW5kbGVySWQsIHJlbmRlcjogKGRhdGEsIHR5cGUsIHNlcnZpY2UpID0+IHtcbiAgICAgICAgY29uc3QganVtcF90b19oaXN0b3JpY2FsID0ge1xuICAgICAgICAgIGhhbmRsZXJJZCxcbiAgICAgICAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgICAgICBsZXQgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZGJfc2VhcmNoLmx1YT9pZmlkPSR7aWZpZH0mJHtuYW1lfT0ke3NlcnZpY2VbdmFsdWVdLmlkfTtlcSZpcD0ke2hvc3R9O2VxYFxuICAgICAgICAgICAgaWYodmxhbiAhPSAwKVxuICAgICAgICAgICAgICB1cmwgPSBgJHt1cmx9JnZsYW5faWQ9JHt2bGFufTtlcWBcbiAgICAgICAgICAgIHdpbmRvdy5vcGVuKHVybClcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBEYXRhVGFibGVVdGlscy5jcmVhdGVBY3Rpb25CdXR0b25zKFt7IGNsYXNzOiAnZHJvcGRvd24taXRlbScsIGhyZWY6ICcjJywgdGl0bGU6IGkxOG4oJ2RiX2V4cGxvcmVyLmhpc3RvcmljYWxfZGF0YScpLCBoYW5kbGVyOiBqdW1wX3RvX2hpc3RvcmljYWwgfV0pXG4gICAgICB9fSlcbiAgICB9LFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHRhYmxlID0gdGhpcy5nZXRfYWN0aXZlX3RhYmxlKCk7XG4gICAgICB0YWJsZS5kZXN0cm95X3RhYmxlKCk7XG4gICAgfSxcbiAgICAvKiBNZXRob2QgdXNlZCB0byBzd2l0Y2ggYWN0aXZlIHRhYmxlIHRhYiAqL1xuICAgIGNsaWNrX2l0ZW06IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIHRoaXMudGFiX2xpc3QuZm9yRWFjaCgoaSkgPT4gaS5hY3RpdmUgPSBmYWxzZSk7XG4gICAgICBpdGVtLmFjdGl2ZSA9IHRydWU7XG4gICAgICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9jdXN0b21fZXZlbnQoY2hhbmdlX2FwcGxpY2F0aW9uc190YWJfZXZlbnQsIGl0ZW0pO1xuICAgIH0sIFxuICAgIHJlbG9hZF90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgdGFibGUgPSB0aGlzLmdldF9hY3RpdmVfdGFibGUoKTtcbiAgICAgIE50b3BVdGlscy5zaG93T3ZlcmxheXMoKTtcbiAgICAgIHRhYmxlLnJlbG9hZCgpO1xuICAgICAgTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpO1xuICAgIH0sXG4gICAgZ2V0X2FjdGl2ZV90YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy4kcmVmc1tgdGFibGVfaG9zdF8ke3RoaXMuYXBwbGljYXRpb25zX3RhYn1gXTtcbiAgICB9LFxuICAgIGdldF9mX2dldF9jdXN0b21fY2hhcnRfb3B0aW9ucygpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiZ2V0X2ZfXCIpO1xuICAgICAgcmV0dXJuIGFzeW5jICh1cmwpID0+IHtcbiAgICAgICAgcmV0dXJuIGNoYXJ0c19vcHRpb25zX2l0ZW1zLnZhbHVlW2NoYXJ0X2luZGV4XS5jaGFydF9vcHRpb25zO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbn0gIFxuXG5mdW5jdGlvbiBzdGFydF9kYXRhdGFibGUoUGFnZVZ1ZSkge1xuICBjb25zdCBkYXRhdGFibGVCdXR0b24gPSBbXTtcblxuICAvKiBNYW5hZ2UgdGhlIGJ1dHRvbnMgY2xvc2UgdG8gdGhlIHNlYXJjaCBib3ggKi9cbiAgZGF0YXRhYmxlQnV0dG9uLnB1c2goe1xuICAgIHRleHQ6ICc8aSBjbGFzcz1cImZhcyBmYS1zeW5jXCI+PC9pPicsXG4gICAgY2xhc3NOYW1lOiAnYnRuLWxpbmsnLFxuICAgIGFjdGlvbjogZnVuY3Rpb24gKGUsIGR0LCBub2RlLCBjb25maWcpIHtcbiAgICAgIFBhZ2VWdWUucmVsb2FkX3RhYmxlKCk7XG4gICAgfVxuICB9KTtcbiAgXG4gIGxldCB0bXBfcGFyYW1zID0gdXJsX3BhcmFtcztcbiAgdG1wX3BhcmFtc1sndmlldyddID0gJ2FwcGxpY2F0aW9ucydcbiAgXG4gIGxldCBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnID0ge1xuICAgIHRhYmxlX2J1dHRvbnM6IGRhdGF0YWJsZUJ1dHRvbixcbiAgICBkYXRhX3VybDogTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9sNy9kYXRhLmx1YWAsIHRtcF9wYXJhbXMpLFxuICAgIGVuYWJsZV9zZWFyY2g6IHRydWUsXG4gICAgdGFibGVfY29uZmlnOiB7IFxuICAgICAgc2VydmVyU2lkZTogZmFsc2UsIFxuICAgICAgb3JkZXI6IFtbIDYgLyogcGVyY2VudGFnZSBjb2x1bW4gKi8sICdkZXNjJyBdXSxcbiAgICAgIGNvbHVtbkRlZnM6IFtcbiAgICAgICAgeyB0eXBlOiBcInRpbWUtdW5pXCIsIHRhcmdldHM6IDEgfSxcbiAgICAgICAgeyB0eXBlOiBcImZpbGUtc2l6ZVwiLCB0YXJnZXRzOiAyIH0sXG4gICAgICAgIHsgdHlwZTogXCJmaWxlLXNpemVcIiwgdGFyZ2V0czogMyB9LFxuICAgICAgICB7IHR5cGU6IFwiZmlsZS1zaXplXCIsIHRhcmdldHM6IDUgfSxcbiAgICAgIF1cbiAgICB9XG4gIH07XG4gIFxuICAvKiBBcHBsaWNhdGlvbnMgdGFibGUgY29uZmlndXJhdGlvbiAqLyAgXG5cbiAgbGV0IGNvbHVtbnMgPSBbXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaG9zdF9kZXRhaWxzLmFwcGxpY2F0aW9uXCIpLCB0YXJnZXRzOiAwLCB3aWR0aDogJzIwJywgbmFtZTogJ2FwcGxpY2F0aW9uJywgZGF0YTogJ2FwcGxpY2F0aW9uJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgIGlmIChQYWdlVnVlLiRwcm9wcy5pc19sb2NhbGUgPT0gXCIxXCIgJiYgUGFnZVZ1ZS4kcHJvcHMudHNfbDdfZW5hYmxlZCA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gYDxhIGhyZWY9XCIke2h0dHBfcHJlZml4fS9sdWEvaG9zdF9kZXRhaWxzLmx1YT9ob3N0PSR7UGFnZVZ1ZS4kcHJvcHMudXJsX3BhcmFtcy5ob3N0fUAke1BhZ2VWdWUuJHByb3BzLnVybF9wYXJhbXMudmxhbn0mcGFnZT1oaXN0b3JpY2FsJmlmaWQ9JHtQYWdlVnVlLiRwcm9wcy51cmxfcGFyYW1zLmlmaWR9JnByb3RvY29sPSR7ZGF0YS5sYWJlbH0mdHNfc2NoZW1hPWhvc3Q6bmRwaVwiIHRhcmdldD1cIl9ibGFua1wiPiR7ZGF0YS5sYWJlbH08L2E+YFxuICAgICAgfSBlbHNlXG4gICAgICAgIHJldHVybiBgJHtkYXRhLmxhYmVsfWA7XG4gICAgICB9IFxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaG9zdF9kZXRhaWxzLmR1cmF0aW9uXCIpLCB0YXJnZXRzOiAxLCB3aWR0aDogJzEwJywgbmFtZTogJ2R1cmF0aW9uJywgZGF0YTogJ2R1cmF0aW9uJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgICAgcmV0dXJuIE50b3BVdGlscy5zZWNvbmRzVG9UaW1lKGRhdGEpO1xuICAgICAgfSAgXG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJob3N0X2RldGFpbHMuc2VudFwiKSwgdGFyZ2V0czogMiwgd2lkdGg6ICcxMCcsIG5hbWU6ICdzZW50JywgZGF0YTogJ2J5dGVzX3NlbnQnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiwgcmVuZGVyOiAoZGF0YSkgPT4ge1xuICAgICAgICByZXR1cm4gTnRvcFV0aWxzLmJ5dGVzVG9TaXplKGRhdGEpO1xuICAgICAgfSAgXG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJob3N0X2RldGFpbHMucmN2ZFwiKSwgdGFyZ2V0czogMywgd2lkdGg6ICcxMCcsIG5hbWU6ICdyY3ZkJywgZGF0YTogJ2J5dGVzX3JjdmQnLCAgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXIgdGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgICAgcmV0dXJuIE50b3BVdGlscy5ieXRlc1RvU2l6ZShkYXRhKTtcbiAgICAgIH0gIFxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaG9zdF9kZXRhaWxzLmJyZWFrZG93blwiKSwgdGFyZ2V0czogNCwgd2lkdGg6ICcxMCcsIG5hbWU6ICdicmVha2Rvd24nLCBkYXRhOiAnYnJlYWtkb3duJywgb3JkZXJhYmxlOiBmYWxzZSwgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXIgdGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIsIHJlbmRlcjogKGRhdGEsIHR5cGUsIHJvdykgPT4ge1xuICAgICAgICBjb25zdCBwZXJjZW50YWdlX3NlbnQgPSAocm93LmJ5dGVzX3NlbnQgKiAxMDApIC8gcm93LnRvdF9ieXRlcztcbiAgICAgICAgY29uc3QgcGVyY2VudGFnZV9yY3ZkID0gKHJvdy5ieXRlc19yY3ZkICogMTAwKSAvIHJvdy50b3RfYnl0ZXM7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuY3JlYXRlQnJlYWtkb3duKHBlcmNlbnRhZ2Vfc2VudCwgcGVyY2VudGFnZV9yY3ZkLCBpMThuKCdob3N0X2RldGFpbHMuc2VudCcpLCBpMThuKCdob3N0X2RldGFpbHMucmN2ZCcpKTtcbiAgICAgIH0gIFxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaG9zdF9kZXRhaWxzLnRvdF9ieXRlc1wiKSwgdGFyZ2V0czogNSwgd2lkdGg6ICcyMCcsIG5hbWU6ICd0b3RfYnl0ZXMnLCBkYXRhOiAndG90X2J5dGVzJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXIgdGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgICAgcmV0dXJuIE50b3BVdGlscy5ieXRlc1RvU2l6ZShkYXRhKTtcbiAgICAgIH0gICBcbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImhvc3RfZGV0YWlscy50b3RfcGVyY2VudGFnZVwiKSwgdGFyZ2V0czogNiwgd2lkdGg6ICcyMCcsIG5hbWU6ICdwZXJjZW50YWdlJywgZGF0YTogJ3BlcmNlbnRhZ2UnLCAgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXIgdGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDIsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgICAgY29uc3QgcGVyY2VudGFnZSA9IGRhdGEudG9GaXhlZCgxKTtcbiAgICAgICAgcmV0dXJuIE50b3BVdGlscy5jcmVhdGVQcm9ncmVzc0JhcihwZXJjZW50YWdlKTtcbiAgICAgIH0gIFxuICAgIH0sXG4gIF07XG5cbiAgaWYoaXNfY2hfZW5hYmxlZClcbiAgICBQYWdlVnVlLmFkZF9hY3Rpb25fY29sdW1uKGNvbHVtbnMsICdsN3Byb3RvJywgJ2FwcGxpY2F0aW9uJyk7XG4gIFxuICBsZXQgYXBwbGljYXRpb25zQ29uZmlnID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoZGVmYXVsdERhdGF0YWJsZUNvbmZpZyk7XG4gIGFwcGxpY2F0aW9uc0NvbmZpZy5jb2x1bW5zX2NvbmZpZyA9IGNvbHVtbnM7XG4gIFBhZ2VWdWUuY29uZmlnX2RldmljZXNfYXBwbGljYXRpb25zID0gYXBwbGljYXRpb25zQ29uZmlnO1xuXG5cbiAgLyogQ2F0ZWdvcmllcyB0YWJsZSBjb25maWd1cmF0aW9uICovXG5cbiAgdG1wX3BhcmFtc1sndmlldyddID0gJ2NhdGVnb3JpZXMnICBcbiAgZGVmYXVsdERhdGF0YWJsZUNvbmZpZy5kYXRhX3VybCA9IE50b3BVdGlscy5idWlsZFVSTChgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvbDcvZGF0YS5sdWFgLCB0bXBfcGFyYW1zKVxuXG5cbiAgY29sdW1ucyA9IFtcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJob3N0X2RldGFpbHMuY2F0ZWdvcnlcIiksIHRhcmdldHM6IDAsIG5hbWU6ICdjYXRlZ29yeScsIGRhdGE6ICdjYXRlZ29yeScsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICBpZiAoUGFnZVZ1ZS4kcHJvcHMuaXNfbG9jYWxlID09IFwiMVwiICYmIFBhZ2VWdWUuJHByb3BzLnRzX2NhdF9lbmFibGVkID09PSB0cnVlKVxuICAgICAgICByZXR1cm4gYDxhIGhyZWY9XCIke2h0dHBfcHJlZml4fS9sdWEvaG9zdF9kZXRhaWxzLmx1YT9ob3N0PSR7UGFnZVZ1ZS4kcHJvcHMudXJsX3BhcmFtcy5ob3N0fUAke1BhZ2VWdWUuJHByb3BzLnVybF9wYXJhbXMudmxhbn0mdHNfc2NoZW1hPWhvc3Q6bmRwaV9jYXRlZ29yaWVzJnBhZ2U9aGlzdG9yaWNhbCZjYXRlZ29yeT0ke2RhdGEubGFiZWx9XCIgdGFyZ2V0PVwiX2JsYW5rXCI+JHtkYXRhLmxhYmVsfTwvYT5gXG4gICAgICBlbHNlXG4gICAgICAgIHJldHVybiBgJHtkYXRhLmxhYmVsfWA7XG4gICAgICB9IFxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaG9zdF9kZXRhaWxzLmFwcGxpY2F0aW9uc1wiKSwgdGFyZ2V0czogMCwgbmFtZTogJ2FwcGxpY2F0aW9ucycsIGRhdGE6ICdhcHBsaWNhdGlvbnMnLCBvcmRlcmFibGU6IGZhbHNlLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiAoZGF0YSkgPT4ge1xuICAgICAgICBpZihQYWdlVnVlLiRwcm9wcy5pc19sb2NhbGUgPT0gXCIxXCIpXG4gICAgICAgICAgcmV0dXJuIGAke2RhdGEubGFiZWwgfHwgJyd9IDxhIGhyZWY9XCIke2h0dHBfcHJlZml4fS8ke2RhdGEuaHJlZn0ke2RhdGEuY2F0ZWdvcnlfaWR9XCI+JHtkYXRhLm1vcmVfcHJvdG9zIHx8ICcnfTwvYT5gXG4gICAgICAgIGVsc2VcbiAgICAgICAgICByZXR1cm4gYCR7ZGF0YS5sYWJlbCB8fCAnJ31gO1xuICAgICAgfSBcbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImhvc3RfZGV0YWlscy5kdXJhdGlvblwiKSwgdGFyZ2V0czogMCwgbmFtZTogJ2R1cmF0aW9uJywgZGF0YTogJ2R1cmF0aW9uJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogKGRhdGEpID0+IHtcbiAgICAgICAgcmV0dXJuIE50b3BVdGlscy5zZWNvbmRzVG9UaW1lKGRhdGEpO1xuICAgICAgfSAgXG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJob3N0X2RldGFpbHMudG90X2J5dGVzXCIpLCB0YXJnZXRzOiAwLCBuYW1lOiAndG90X2J5dGVzJywgZGF0YTogJ3RvdF9ieXRlcycsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyIHRleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuYnl0ZXNUb1NpemUoZGF0YSk7XG4gICAgICB9ICBcbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImhvc3RfZGV0YWlscy50b3RfcGVyY2VudGFnZVwiKSwgdGFyZ2V0czogMCwgbmFtZTogJ3BlcmNlbnRhZ2UnLCBkYXRhOiAncGVyY2VudGFnZScsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyIHRleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICAgIGNvbnN0IHBlcmNlbnRhZ2UgPSBkYXRhLnRvRml4ZWQoMSk7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuY3JlYXRlUHJvZ3Jlc3NCYXIocGVyY2VudGFnZSk7XG4gICAgICB9ICBcbiAgICB9LFxuICBdO1xuXG4gIGlmKGlzX2NoX2VuYWJsZWQpXG4gICAgUGFnZVZ1ZS5hZGRfYWN0aW9uX2NvbHVtbihjb2x1bW5zLCAnbDdjYXQnLCAnY2F0ZWdvcnknKTtcbiAgXG4gIGxldCBjYXRlZ29yaWVzQ29uZmlnID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoZGVmYXVsdERhdGF0YWJsZUNvbmZpZyk7XG4gIGNhdGVnb3JpZXNDb25maWcuY29sdW1uc19jb25maWcgPSBjb2x1bW5zO1xuICBjYXRlZ29yaWVzQ29uZmlnLnRhYmxlX2NvbmZpZy5vcmRlciA9IFtbIDQgLyogcGVyY2VudGFnZSBjb2x1bW4gKi8sICdkZXNjJyBdXVxuICBjYXRlZ29yaWVzQ29uZmlnLnRhYmxlX2NvbmZpZy5jb2x1bW5EZWZzID0gW1xuICAgIHsgdHlwZTogXCJ0aW1lLXVuaVwiLCB0YXJnZXRzOiAyIH0sXG4gICAgeyB0eXBlOiBcImZpbGUtc2l6ZVwiLCB0YXJnZXRzOiAzIH0sXG4gIF1cbiAgXG4gIFBhZ2VWdWUuY29uZmlnX2RldmljZXNfY2F0ZWdvcmllcyA9IGNhdGVnb3JpZXNDb25maWc7XG59XG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsIjwhLS1cbiAgKEMpIDIwMTMtMjIgLSBudG9wLm9yZ1xuLS0+XG5cbjx0ZW1wbGF0ZT5cbjxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wtbGctMTJcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZFwiPlxuICAgICAgPGRpdiBjbGFzcz1cIm92ZXJsYXkganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1jZW50ZXIgcG9zaXRpb24tYWJzb2x1dGUgaC0xMDAgdy0xMDBcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtY2VudGVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInNwaW5uZXItYm9yZGVyIHRleHQtcHJpbWFyeSBtdC01XCIgcm9sZT1cInN0YXR1c1wiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzci1vbmx5IHBvc2l0aW9uLWFic29sdXRlXCI+TG9hZGluZy4uLjwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgIFx0PGRpdiBpZD1cImhvc3RfZGV0YWlsc190cmFmZmljXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInJvdyBtYi00IG10LTRcIiBpZD1cImhvc3RfZGV0YWlsc190cmFmZmljXCI+XG4gICAgICAgICAgICA8dGVtcGxhdGUgdi1mb3I9XCJjaGFydF9vcHRpb24gaW4gY2hhcnRfb3B0aW9uc1wiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTRcIj5cbiAgICAgICAgICAgICAgICA8aDMgY2xhc3M9XCJ3aWRnZXQtbmFtZVwiPnt7IGNoYXJ0X29wdGlvbi50aXRsZSB9fTwvaDM+XG4gICAgICAgICAgICAgICAgPENoYXJ0XG4gICAgICAgICAgICAgICAgICA6aWQ9XCJjaGFydF9vcHRpb24uaWRcIlxuICAgICAgICAgICAgICAgICAgOmNoYXJ0X3R5cGU9XCJjaGFydF9vcHRpb24udHlwZVwiXG4gICAgICAgICAgICAgICAgICA6YmFzZV91cmxfcmVxdWVzdD1cImNoYXJ0X29wdGlvbi51cmxcIlxuICAgICAgICAgICAgICAgICAgOnJlZ2lzdGVyX29uX3N0YXR1c19jaGFuZ2U9XCJmYWxzZVwiPlxuICAgICAgICAgICAgICAgIDwvQ2hhcnQ+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICBcbiAgICAgICAgICA8RGF0YXRhYmxlIHJlZj1cInRyYWZmaWNfdGFibGVcIlxuICAgICAgICAgICAgOnRhYmxlX2J1dHRvbnM9XCJjb25maWdfdHJhZmZpY190YWJsZS50YWJsZV9idXR0b25zXCJcbiAgICAgICAgICAgIDpjb2x1bW5zX2NvbmZpZz1cImNvbmZpZ190cmFmZmljX3RhYmxlLmNvbHVtbnNfY29uZmlnXCJcbiAgICAgICAgICAgIDpkYXRhX3VybD1cImNvbmZpZ190cmFmZmljX3RhYmxlLmRhdGFfdXJsXCJcbiAgICAgICAgICAgIDplbmFibGVfc2VhcmNoPVwiY29uZmlnX3RyYWZmaWNfdGFibGUuZW5hYmxlX3NlYXJjaFwiXG4gICAgICAgICAgICA6dGFibGVfY29uZmlnPVwiY29uZmlnX3RyYWZmaWNfdGFibGUudGFibGVfY29uZmlnXCI+XG4gICAgICAgICAgPC9EYXRhdGFibGU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvblVubW91bnRlZCwgb25CZWZvcmVNb3VudCwgY29tcHV0ZWQsIHdhdGNoIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBDaGFydCB9IGZyb20gXCIuL2NoYXJ0LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRhdGFibGUgfSBmcm9tIFwiLi9kYXRhdGFibGUudnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfZXZlbnRzX21hbmFnZXIsIG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMnO1xuXG5jb25zdCB0cmFmZmljX3RhYmxlID0gcmVmKG51bGwpO1xuY29uc3QgY2hhcnRzID0gcmVmKFtdKTtcbmNvbnN0IGNvbmZpZ190cmFmZmljX3RhYmxlID0gcmVmKHt9KTtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICBwYWdlX2NzcmY6IFN0cmluZyxcbn0pXG5cbmNvbnN0IGdldF9mX2dldF9jdXN0b21fY2hhcnRfb3B0aW9ucyA9ICgpID0+IHtcbiAgY29uc29sZS5sb2coXCJnZXRfZl9cIik7XG4gIHJldHVybiBhc3luYyAodXJsKSA9PiB7XG4gICAgcmV0dXJuIGNoYXJ0c19vcHRpb25zX2l0ZW1zLnZhbHVlW2NoYXJ0X2luZGV4XS5jaGFydF9vcHRpb25zO1xuICB9XG59XG5cbmNvbnN0IGRlc3Ryb3kgPSAoKSA9PiB7XG4gIHRyYWZmaWNfdGFibGUudmFsdWUuZGVzdHJveV90YWJsZSgpO1xufVxuXG5jb25zdCByZWxvYWRfdGFibGUgPSAoKSA9PiB7XG4gIHRyYWZmaWNfdGFibGUudmFsdWUucmVsb2FkKCk7XG59XG4gICAgXG5vbkJlZm9yZU1vdW50KGFzeW5jICgpID0+IHtcbiAgc3RhcnRfZGF0YXRhYmxlKCk7XG59KTtcblxub25Vbm1vdW50ZWQoYXN5bmMgKCkgPT4ge1xuICBkZXN0cm95KClcbn0pO1xuXG5jb25zdCBjaGFydF9vcHRpb25zID0gW1xuICB7XG4gICAgdGl0bGU6IGkxOG4oJ2dyYXBocy5sNF9wcm90bycpLFxuICAgIHR5cGU6IG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LkRPTlVULFxuICAgIHVybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L2w0L3Byb3RvX2RhdGEubHVhYCxcbiAgICBpZDogYHRyYWZmaWNfcHJvdG9zYCxcbiAgfSxcbiAge1xuICAgIHRpdGxlOiBpMThuKCdncmFwaHMuY29udGFjdGVkX2hvc3RzJyksXG4gICAgdHlwZTogbnRvcENoYXJ0QXBleC50eXBlQ2hhcnQuRE9OVVQsXG4gICAgdXJsOiBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvbDQvY29udGFjdGVkX2hvc3RzX2RhdGEubHVhYCxcbiAgICBpZDogYGNvbnRhY3RlZF9ob3N0c2AsXG4gIH0sXG4gIHtcbiAgICB0aXRsZTogaTE4bignZ3JhcGhzLnRyYWZmaWMnKSxcbiAgICB0eXBlOiBudG9wQ2hhcnRBcGV4LnR5cGVDaGFydC5ET05VVCxcbiAgICB1cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9sNC90cmFmZmljX2RhdGEubHVhYCxcbiAgICBpZDogYHRyYWZmaWNgLFxuICB9LFxuXVxuXG5mdW5jdGlvbiBzdGFydF9kYXRhdGFibGUoUGFnZVZ1ZSkge1xuICBjb25zdCBkYXRhdGFibGVCdXR0b24gPSBbXTtcbiAgbGV0IHVybF9wYXJhbXMgPSB7fVxuICBcbiAgdXJsX3BhcmFtc1tcImhvc3RcIl0gPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImhvc3RcIilcbiAgdXJsX3BhcmFtc1tcInZsYW5cIl0gPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInZsYW5cIilcbiAgdXJsX3BhcmFtc1tcImlmaWRcIl0gPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImlmaWRcIilcblxuICAvKiBNYW5hZ2UgdGhlIGJ1dHRvbnMgY2xvc2UgdG8gdGhlIHNlYXJjaCBib3ggKi9cbiAgZGF0YXRhYmxlQnV0dG9uLnB1c2goe1xuICAgIHRleHQ6ICc8aSBjbGFzcz1cImZhcyBmYS1zeW5jXCI+PC9pPicsXG4gICAgY2xhc3NOYW1lOiAnYnRuLWxpbmsnLFxuICAgIGFjdGlvbjogZnVuY3Rpb24gKGUsIGR0LCBub2RlLCBjb25maWcpIHtcbiAgICAgIHJlbG9hZF90YWJsZSgpO1xuICAgIH1cbiAgfSk7XG4gICAgXG4gIGxldCBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnID0ge1xuICAgIHRhYmxlX2J1dHRvbnM6IGRhdGF0YWJsZUJ1dHRvbixcbiAgICBkYXRhX3VybDogTnRvcFV0aWxzLmJ1aWxkVVJMKGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9sNC9kYXRhLmx1YWAsIHVybF9wYXJhbXMpLFxuICAgIGVuYWJsZV9zZWFyY2g6IHRydWUsXG4gICAgdGFibGVfY29uZmlnOiB7IFxuICAgICAgc2VydmVyU2lkZTogZmFsc2UsIFxuICAgICAgb3JkZXI6IFtbIDYgLyogcGVyY2VudGFnZSBjb2x1bW4gKi8sICdkZXNjJyBdXSxcbiAgICAgIGNvbHVtbkRlZnM6IFtcbiAgICAgICAgeyB0eXBlOiBcInRpbWUtdW5pXCIsIHRhcmdldHM6IDEgfSxcbiAgICAgICAgeyB0eXBlOiBcImZpbGUtc2l6ZVwiLCB0YXJnZXRzOiAyIH0sXG4gICAgICAgIHsgdHlwZTogXCJmaWxlLXNpemVcIiwgdGFyZ2V0czogMyB9LFxuICAgICAgICB7IHR5cGU6IFwiZmlsZS1zaXplXCIsIHRhcmdldHM6IDUgfSxcbiAgICAgIF1cbiAgICB9XG4gIH07XG4gIFxuICAvKiBBcHBsaWNhdGlvbnMgdGFibGUgY29uZmlndXJhdGlvbiAqLyAgXG5cbiAgbGV0IGNvbHVtbnMgPSBbXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwicHJvdG9jb2xcIiksIHRhcmdldHM6IDAsIG5hbWU6ICdwcm90b2NvbCcsIGRhdGE6ICdwcm90b2NvbCcsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiY2hhcnRcIiksIHRhcmdldHM6IDEsIG5hbWU6ICdoaXN0b3JpY2FsJywgZGF0YTogJ2hpc3RvcmljYWwnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcInRyYWZmaWNfbGFiZWxzLmJ5dGVzX3NlbnRcIiksIHRhcmdldHM6IDIsIG5hbWU6ICdzZW50JywgZGF0YTogJ2J5dGVzX3NlbnQnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiwgcmVuZGVyOiAoZGF0YSkgPT4ge1xuICAgICAgICByZXR1cm4gTnRvcFV0aWxzLmJ5dGVzVG9TaXplKGRhdGEpO1xuICAgICAgfSAgXG4gICAgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJ0cmFmZmljX2xhYmVscy5ieXRlc19yY3ZkXCIpLCB0YXJnZXRzOiAzLCBuYW1lOiAncmN2ZCcsIGRhdGE6ICdieXRlc19yY3ZkJywgIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyIHRleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuYnl0ZXNUb1NpemUoZGF0YSk7XG4gICAgICB9ICBcbiAgICB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcInRyYWZmaWNfbGFiZWxzLmJyZWFrZG93blwiKSwgdGFyZ2V0czogNCwgbmFtZTogJ2JyZWFrZG93bicsIGRhdGE6ICdicmVha2Rvd24nLCBvcmRlcmFibGU6IGZhbHNlLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlciB0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiwgcmVuZGVyOiAoZGF0YSwgdHlwZSwgcm93KSA9PiB7XG4gICAgICAgIGNvbnN0IHBlcmNlbnRhZ2Vfc2VudCA9IChyb3cuYnl0ZXNfc2VudCAqIDEwMCkgLyByb3cudG90YWxfYnl0ZXM7XG4gICAgICAgIGNvbnN0IHBlcmNlbnRhZ2VfcmN2ZCA9IChyb3cuYnl0ZXNfcmN2ZCAqIDEwMCkgLyByb3cudG90YWxfYnl0ZXM7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuY3JlYXRlQnJlYWtkb3duKHBlcmNlbnRhZ2Vfc2VudCwgcGVyY2VudGFnZV9yY3ZkLCBpMThuKCdob3N0X2RldGFpbHMuc2VudCcpLCBpMThuKCdob3N0X2RldGFpbHMucmN2ZCcpKTtcbiAgICAgIH0gIFxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwidHJhZmZpY19sYWJlbHMudG90YWxfYnl0ZXNcIiksIHRhcmdldHM6IDUsIG5hbWU6ICd0b3RfYnl0ZXMnLCBkYXRhOiAndG90YWxfYnl0ZXMnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlciB0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMiwgcmVuZGVyOiAoZGF0YSkgPT4ge1xuICAgICAgICByZXR1cm4gTnRvcFV0aWxzLmJ5dGVzVG9TaXplKGRhdGEpO1xuICAgICAgfSAgIFxuICAgIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwidHJhZmZpY19sYWJlbHMudG90YWxfcGVyY2VudGFnZVwiKSwgdGFyZ2V0czogNiwgd2lkdGg6ICcyMCUnLCBuYW1lOiAncGVyY2VudGFnZScsIGRhdGE6ICd0b3RhbF9wZXJjZW50YWdlJywgIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyIHRleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyLCByZW5kZXI6IChkYXRhKSA9PiB7XG4gICAgICAgIGNvbnN0IHBlcmNlbnRhZ2UgPSBkYXRhLnRvRml4ZWQoMSk7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuY3JlYXRlUHJvZ3Jlc3NCYXIocGVyY2VudGFnZSk7XG4gICAgICB9ICBcbiAgICB9LFxuICBdO1xuXG4gIGxldCB0cmFmZmljQ29uZmlnID0gbnRvcG5nX3V0aWxpdHkuY2xvbmUoZGVmYXVsdERhdGF0YWJsZUNvbmZpZyk7XG4gIHRyYWZmaWNDb25maWcuY29sdW1uc19jb25maWcgPSBjb2x1bW5zO1xuICBjb25maWdfdHJhZmZpY190YWJsZS52YWx1ZSA9IHRyYWZmaWNDb25maWc7XG59XG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsIjwhLS1cbiAgKEMpIDIwMTMtMjIgLSBudG9wLm9yZ1xuLS0+XG5cbjx0ZW1wbGF0ZT5cbjxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wtbGctMTJcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZFwiPlxuICAgICAgPGRpdiBjbGFzcz1cIm92ZXJsYXkganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1jZW50ZXIgcG9zaXRpb24tYWJzb2x1dGUgaC0xMDAgdy0xMDBcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtY2VudGVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInNwaW5uZXItYm9yZGVyIHRleHQtcHJpbWFyeSBtdC01XCIgcm9sZT1cInN0YXR1c1wiPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzci1vbmx5IHBvc2l0aW9uLWFic29sdXRlXCI+TG9hZGluZy4uLjwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cImNoYXJ0X29wdGlvbiBpbiBjaGFydF9vcHRpb25zXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTYgbWItNCBtdC00XCI+XG4gICAgICAgICAgICAgIDxoMyBjbGFzcz1cIndpZGdldC1uYW1lXCI+e3sgY2hhcnRfb3B0aW9uLnRpdGxlIH19PC9oMz5cbiAgICAgICAgICAgICAgPENoYXJ0XG4gICAgICAgICAgICAgICAgOmlkPVwiY2hhcnRfb3B0aW9uLmlkXCJcbiAgICAgICAgICAgICAgICA6Y2hhcnRfdHlwZT1cImNoYXJ0X29wdGlvbi50eXBlXCJcbiAgICAgICAgICAgICAgICA6YmFzZV91cmxfcmVxdWVzdD1cImNoYXJ0X29wdGlvbi51cmxcIlxuICAgICAgICAgICAgICAgIDpyZWdpc3Rlcl9vbl9zdGF0dXNfY2hhbmdlPVwiZmFsc2VcIlxuICAgICAgICAgICAgICAgIEBjaGFydF9yZWxvYWRlZD1cImNoYXJ0X2RvbmVcIj5cbiAgICAgICAgICAgICAgPC9DaGFydD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgb25Nb3VudGVkIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IE50b3BVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL250b3AtdXRpbHNcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgQ2hhcnQgfSBmcm9tIFwiLi9jaGFydC52dWVcIjtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gIHBhZ2VfY3NyZjogU3RyaW5nLFxuICB1cmxfcGFyYW1zOiBPYmplY3QsXG59KVxuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuY29uc3QgY2hhcnRfb3B0aW9ucyA9IFtcbiAge1xuICAgIHRpdGxlOiBpMThuKCdncmFwaHMucGFja2V0c19zZW50JyksXG4gICAgdHlwZTogbnRvcENoYXJ0QXBleC50eXBlQ2hhcnQuRE9OVVQsXG4gICAgdXJsOiBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvcGFja2V0cy9zZW50X2RhdGEubHVhYCxcbiAgICBpZDogYHBhY2tldHNfc2VudGAsXG4gIH0sXG4gIHtcbiAgICB0aXRsZTogaTE4bignZ3JhcGhzLnBhY2tldHNfcmN2ZCcpLFxuICAgIHR5cGU6IG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LkRPTlVULFxuICAgIHVybDogYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L3BhY2tldHMvcmN2ZF9kYXRhLmx1YWAsXG4gICAgaWQ6IGBwYWNrZXRzX3JjdmRgLFxuICB9LFxuICB7XG4gICAgdGl0bGU6IGkxOG4oJ2dyYXBocy50Y3BfZmxhZ3MnKSxcbiAgICB0eXBlOiBudG9wQ2hhcnRBcGV4LnR5cGVDaGFydC5ET05VVCxcbiAgICB1cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9wYWNrZXRzL3RjcF9mbGFnc19kYXRhLmx1YWAsXG4gICAgaWQ6IGB0Y3BfZmxhZ3NgLFxuICB9LFxuICB7XG4gICAgdGl0bGU6IGkxOG4oJ2dyYXBocy5hcnBfZGlzdHJpYnV0aW9uJyksXG4gICAgdHlwZTogbnRvcENoYXJ0QXBleC50eXBlQ2hhcnQuRE9OVVQsXG4gICAgdXJsOiBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvcGFja2V0cy9hcnBfZGF0YS5sdWFgLFxuICAgIGlkOiBgYXJwX3JlcXVlc3RzYCxcbiAgfSxcbl1cblxuZnVuY3Rpb24gY2hhcnRfZG9uZShkYXRhLCB0bXAsIHRtcDIpIHtcbiAgTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpXG59XG5cbm9uTW91bnRlZCgoKSA9PiB7fSlcblxuPC9zY3JpcHQ+XG5cblxuXG5cblxuXG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuPGRpdiB2LWlmPVwibm9fZGF0YVwiIGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiIGlkPVwiZW1wdHktbWVzc2FnZVwiPnt7IG5vX2RhdGFfbWVzc2FnZSB8fCBfaTE4bignZmxvd3NfcGFnZS5ub19kYXRhJykgfX08L2Rpdj5cbjxkaXY+XG4gIDxzdmdcbiAgICByZWY9XCJzYW5rZXlfY2hhcnRfcmVmXCJcbiAgICA6d2lkdGg9XCJzYW5rZXlfc2l6ZS53aWR0aFwiXG4gICAgOmhlaWdodD1cInNhbmtleV9zaXplLmhlaWdodFwiXG4gICAgc3R5bGU9XCJtYXJnaW46MTBweDtcIj5cbiAgICA8ZyBjbGFzcz1cIm5vZGVzXCIgc3R5bGU9XCJzdHJva2U6ICMwMDA7c3Ryb2tlT3BhY2l0eTogMC41O1wiLz5cbiAgICA8ZyBjbGFzcz1cImxpbmtzXCIgc3R5bGU9XCJzdHJva2U6ICMwMDA7c3Ryb2tlT3BhY2l0eTogMC4zO2ZpbGw6bm9uZTtcIi8+XG4gIDwvc3ZnPlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIG9uQmVmb3JlTW91bnQsIGNvbXB1dGVkLCB3YXRjaCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IG50b3BuZ191dGlsaXR5LCBudG9wbmdfdXJsX21hbmFnZXIsIG50b3BuZ19zdGF0dXNfbWFuYWdlciB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzLmpzXCI7XG5cbmNvbnN0IGQzID0gZDN2NztcblxuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFsnbm9kZV9jbGljaycsICd1cGRhdGVfd2lkdGgnLCAndXBkYXRlX2hlaWdodCddKVxuXG5jb25zdCBtYXJnaW4gPSB7XG4gICAgdG9wOiAyLjUsXG4gICAgcmlnaHQ6IDUsXG4gICAgYm90dG9tOiAyLjUsXG4gICAgbGVmdDogNVxufTtcblxuY29uc3Qgbm9kZV93aWR0aCA9IDEwO1xuY29uc3Qgbm9fZGF0YSA9IHJlZihmYWxzZSlcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gIG5vX2RhdGFfbWVzc2FnZTogU3RyaW5nLFxuICB3aWR0aDogTnVtYmVyLFxuICBoZWlnaHQ6IE51bWJlcixcbiAgc2Fua2V5X2RhdGE6IE9iamVjdCxcbn0pO1xuXG5jb25zdCBzYW5rZXlfY2hhcnRfcmVmID0gcmVmKG51bGwpO1xuY29uc3Qgc2Fua2V5X3NpemUgPSByZWYoe30pO1xuXG5vbkJlZm9yZU1vdW50KGFzeW5jKCkgPT4ge30pO1xuXG5vbk1vdW50ZWQoYXN5bmMgKCkgPT4ge1xuICAgIHNldF9zYW5rZXlfZGF0YSgpO1xuICAgIGF0dGFjaF9ldmVudHMoKTtcbn0pO1xuXG53YXRjaCgoKSA9PiBwcm9wcy5zYW5rZXlfZGF0YSwgKGN1cl92YWx1ZSwgb2xkX3ZhbHVlKSA9PiB7XG4gICAgc2V0X3NhbmtleV9kYXRhKHRydWUpO1xufSk7XG5cbmZ1bmN0aW9uIHNldF9zYW5rZXlfZGF0YShyZXNldCkge1xuICAgIGlmIChyZXNldCkge1xuXHQkKFwiLm5vZGVzXCIsIHNhbmtleV9jaGFydF9yZWYudmFsdWUpLmVtcHR5KCk7XG5cdCQoXCIubGlua3NcIiwgc2Fua2V5X2NoYXJ0X3JlZi52YWx1ZSkuZW1wdHkoKTtcbiAgICB9XG4gICAgaWYgKHByb3BzLnNhbmtleV9kYXRhLm5vZGVzID09IG51bGwgfHwgcHJvcHMuc2Fua2V5X2RhdGEubGlua3MgPT0gbnVsbFxuXHR8fCBwcm9wcy5zYW5rZXlfZGF0YS5sZW5ndGggPT0gMCB8fCBwcm9wcy5zYW5rZXlfZGF0YS5saW5rcy5sZW5ndGggPT0gMCkge1xuXHRyZXR1cm47XG4gICAgfVxuICAgIGRyYXdfc2Fua2V5KCk7XG59XG5cbmZ1bmN0aW9uIGF0dGFjaF9ldmVudHMoKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsICgpID0+IHNldF9zYW5rZXlfZGF0YSh0cnVlKSk7XG59XG5cbmxldCBzYW5rZXkgPSBudWxsO1xubGV0IHNhbmtleURhdGEgPSBudWxsO1xuYXN5bmMgZnVuY3Rpb24gZHJhd19zYW5rZXkoKSB7XG4gICAgY29uc3QgY29sb3JzID0gZDMuc2NhbGVPcmRpbmFsKGQzLnNjaGVtZUNhdGVnb3J5MTApO1xuICAgIGxldCBkYXRhID0gcHJvcHMuc2Fua2V5X2RhdGE7Ly9hd2FpdCBnZXRfc2Fua2V5X2RhdGEoKTtcbiAgICBjb25zdCBzaXplID0gZ2V0X3NpemUoKTtcbiAgICBzYW5rZXlfc2l6ZS52YWx1ZSA9IHNpemU7XG4gICAgc2Fua2V5ID0gY3JlYXRlX3NhbmtleShzaXplLndpZHRoIC0gMTAsIHNpemUuaGVpZ2h0IC0gNSk7XG4gICAgc2Fua2V5RGF0YSA9IHNhbmtleShkYXRhKTtcbiAgICBjb25zdCB7IGxpbmtzLCBub2RlcyB9ID0gc2Fua2V5RGF0YTtcbiAgICBcbiAgICBsZXQgZDNfbm9kZXMgPSBkMy5zZWxlY3Qoc2Fua2V5X2NoYXJ0X3JlZi52YWx1ZSlcblx0LnNlbGVjdChcImcubm9kZXNcIilcblx0LnNlbGVjdEFsbChcImdcIilcblx0LmRhdGEobm9kZXMpXG5cdC5qb2luKChlbnRlcikgPT4gZW50ZXIuYXBwZW5kKFwiZ1wiKSlcblx0LmF0dHIoXCJ0cmFuc2Zvcm1cIiwgKGQpID0+IGB0cmFuc2xhdGUoJHtkLngwfSwgJHtkLnkwfSlgKVxuICAgIFxuICAgIGNvbnN0IHpvb20gPSBkMy56b29tKClcblx0ICAuc2NhbGVFeHRlbnQoWzEsIDQwXSlcblx0ICAub24oXCJ6b29tXCIsIHpvb21lZCk7XG4gICAgXG4gICAgZDNfbm9kZXMuYXBwZW5kKFwicmVjdFwiKVxuICAgIC8vIC50cmFuc2l0aW9uKGQzLmVhc2VMaW5lYXIpXG4gICAgLy8gLmRlbGF5KDEwMDApXG4gICAgLy8gLmR1cmF0aW9uKDUwMClcblx0LmF0dHIoXCJoZWlnaHRcIiwgKGQpID0+IGQueTEgLSBkLnkwKVxuXHQuYXR0cihcIndpZHRoXCIsIChkKSA9PiBkLngxIC0gZC54MClcblx0LmF0dHIoXCJkYXRhSW5kZXhcIiwgKGQpID0+IGQuaW5kZXgpXG5cdC5hdHRyKFwiZmlsbFwiLCAoZCkgPT4gY29sb3JzKGQuaW5kZXggLyBub2Rlcy5sZW5ndGgpKVxuXHQuYXR0cihcImNsYXNzXCIsIFwic2Fua2V5LW5vZGVcIilcblx0LmF0dHIoXCJzdHlsZVwiLCBcImN1cnNvcjptb3ZlO1wiKTtcbiAgICBkMy5zZWxlY3RBbGwoXCJyZWN0XCIpLmFwcGVuZChcInRpdGxlXCIpLnRleHQoKGQpID0+IGAke2Q/LmxhYmVsfWApO1xuICAgIFxuICAgIC8vIFJlbGF0aXZlIHRvIGNvbnRhaW5lci8gbm9kZSByZWN0ICAgIFxuICAgIGQzX25vZGVzLmRhdGEobm9kZXMpXG5cdC5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgLy8gLnRyYW5zaXRpb24oZDMuZWFzZUxpbmVhcilcbiAgICAvLyAuZGVsYXkoMTAwMClcbiAgICAvLyAuZHVyYXRpb24oNTAwKVxuICAgIFx0LmF0dHIoJ2NsYXNzJywgJ2xhYmVsJylcbiAgICBcdC5zdHlsZSgncG9pbnRlci1ldmVudHMnLCAnYXV0bycpXG5cdC5hdHRyKFwic3R5bGVcIiwgXCJjdXJzb3I6cG9pbnRlcjtcIilcbiAgICBcdC5zdHlsZSgnZmlsbC1vcGFjaXR5JywgZnVuY3Rpb24oZCkgeyByZXR1cm4gMTsgfSApXG4gICAgXHQuYXR0cihcImZpbGxcIiwgKGQpID0+IFwiIzAwMFwiKVxuICAgIC8vIC5hdHRyKFwiZmlsbFwiLCAoZCkgPT4gZDMucmdiKGNvbG9ycyhkLmluZGV4IC8gbm9kZXMubGVuZ3RoKSkuZGFya2VyKCkpXG5cdC5hdHRyKFwieFwiLCAoZCkgPT4gKGQueDAgPCBzaXplLndpZHRoIC8gMiA/IDYgKyAoZC54MSAtIGQueDApIDogLTYpKVxuXHQuYXR0cihcInlcIiwgKGQpID0+IChkLnkxIC0gZC55MCkgLyAyKVxuICAgIFx0LmF0dHIoXCJhbGlnbm1lbnQtYmFzZWxpbmVcIiwgXCJtaWRkbGVcIilcblx0LmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCAoZCkgPT5cbiAgICAgICAgICAgICAgZC54MCA8IHNpemUud2lkdGggLyAyID8gXCJzdGFydFwiIDogXCJlbmRcIlxuICAgICAgICAgICAgIClcbiAgICBcdC5hdHRyKFwiZm9udC1zaXplXCIsIDEyKVxuICAgIFx0LnRleHQoKGQpID0+IGQubGFiZWwpXG5cdC5vbihcImNsaWNrXCIsIGZ1bmN0aW9uKGV2ZW50LCBkYXRhX29iail7IGVtaXQoJ25vZGVfY2xpY2snLCBkYXRhX29iai5kYXRhKTsgfSk7ICAgIFxuICAgIGQzX25vZGVzXG5cdC5jYWxsKGQzLmRyYWcoKS5zdWJqZWN0KGQgPT4gZCkub24oXCJzdGFydFwiLCBkcmFnU3RhcnQpLm9uKFwiZHJhZ1wiLCBkcmFnTW92ZSkpO1xuICAgIFxuICAgIGNvbnN0IGxpbmtzX2QzID0gZDMuc2VsZWN0KHNhbmtleV9jaGFydF9yZWYudmFsdWUpXG5cdCAgLnNlbGVjdChcImcubGlua3NcIilcblx0ICAuc2VsZWN0QWxsKFwiZ1wiKVxuXHQgIC5kYXRhKGxpbmtzKVxuXHQgIC5qb2luKChlbnRlcikgPT4gZW50ZXIuYXBwZW5kKFwiZ1wiKSlcbiAgICBcbiAgICBsZXQgbGdfZDMgPSBsaW5rc19kMy5hcHBlbmQoXCJsaW5lYXJHcmFkaWVudFwiKTtcbiAgICBsZ19kMy5hdHRyKFwiaWRcIiwgKGQpID0+IGBncmFkaWVudC0ke2QuaW5kZXh9YClcbiAgICBcdC5hdHRyKFwiZ3JhZGllbnRVbml0c1wiLCBcInVzZXJTcGFjZU9uVXNlXCIpXG4gICAgXHQuYXR0cihcIngxXCIsIChkKSA9PiBkLnNvdXJjZS54MSlcbiAgICBcdC5hdHRyKFwieDJcIiwgKGQpID0+IGQudGFyZ2V0LngwKTtcbiAgICBcbiAgICBsZ19kMy5hcHBlbmQoXCJzdG9wXCIpXG4gICAgXHQuYXR0cihcIm9mZnNldFwiLCBcIjBcIilcbiAgICBcdC5hdHRyKFwic3RvcC1jb2xvclwiLCAoZCkgPT4gY29sb3JzKGQuc291cmNlLmluZGV4IC8gbm9kZXMubGVuZ3RoKSk7XG4gICAgXG4gICAgbGdfZDMuYXBwZW5kKFwic3RvcFwiKVxuICAgIFx0LmF0dHIoXCJvZmZzZXRcIiwgXCIxMDAlXCIpXG4gICAgXHQuYXR0cihcInN0b3AtY29sb3JcIiwgKGQpID0+IGNvbG9ycyhkLnRhcmdldC5pbmRleCAvIG5vZGVzLmxlbmd0aCkpO1xuICAgIFxuICAgIGxpbmtzX2QzXG5cdC5hcHBlbmQoXCJwYXRoXCIpXG4gICAgXHQuc3R5bGUoJ3BvaW50ZXItZXZlbnRzJywgJ25vbmUnKVxuXHQuYXR0cihcImNsYXNzXCIsIFwic2Fua2V5LWxpbmtcIilcblx0LmF0dHIoXCJkXCIsIGQzLnNhbmtleUxpbmtIb3Jpem9udGFsKCkpXG4gICAgLy8gLmF0dHIoXCJzdHlsZVwiLCBgc3Ryb2tlLXdpZHRoOiAke2Qud2lkdGh9cHg7YClcblx0LmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgKGQpID0+IHtcblx0ICAgIHJldHVybiBNYXRoLm1heCgxLCBkLndpZHRoKTtcblx0fSlcbiAgICAvLyAudHJhbnNpdGlvbihkMy5lYXNlTGluZWFyKVxuICAgIC8vIC5kZWxheSgxMDAwKVxuICAgIC8vIC5kdXJhdGlvbig1MDApIFxuICAgIFx0LmF0dHIoXCJzdHJva2VcIiwgKGQpID0+IGB1cmwoI2dyYWRpZW50LSR7ZC5pbmRleH1gKVxuICAgIC8vIFx0LmF0dHIoXCJzdHJva2VcIiwgYGJsYWNrYClcbiAgICBcbiAgICAvLyBcdC5hdHRyKFwic3Ryb2tlLXdpZHRoXCIsIChkKSA9PiBNYXRoLm1heCgxMDAsIGQud2lkdGgpKTtcbiAgICAgICAgXG4gICAgbGlua3NfZDNcbiAgICBcdC5hcHBlbmQoXCJ0aXRsZVwiKVxuICAgIFx0LnRleHQoKGQpID0+IGAke2QubGFiZWx9YCk7XG59XG5cbmZ1bmN0aW9uIGRyYWdTdGFydChldmVudCwgZCkge1xuICAgIGQuX194ID0gZXZlbnQueDtcbiAgICBkLl9feSA9IGV2ZW50Lnk7XG4gICAgZC5fX3gwID0gZC54MDtcbiAgICBkLl9feTAgPSBkLnkwO1xuICAgIGQuX194MSA9IGQueDE7XG4gICAgZC5fX3kxID0gZC55MTtcbn0gLy9kcmFnU3RhcnRcblxuZnVuY3Rpb24gZHJhZ01vdmUoZXZlbnQsIGQpIHtcbiAgICBkMy5zZWxlY3QodGhpcykuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbiAoZCkge1xuXHRjb25zdCBkeCA9IGV2ZW50LnggLSBkLl9feDtcblx0Y29uc3QgZHkgPSBldmVudC55IC0gZC5fX3k7XG5cdGNvbnN0IHdpZHRoID0gc2Fua2V5X3NpemUudmFsdWUud2lkdGg7XG5cdGNvbnN0IGhlaWdodCA9IHNhbmtleV9zaXplLnZhbHVlLndpZHRoO1xuXHRkLngwID0gZC5fX3gwICsgZHg7XG5cdGQueDEgPSBkLl9feDEgKyBkeDtcblx0ZC55MCA9IGQuX195MCArIGR5O1xuXHRkLnkxID0gZC5fX3kxICsgZHk7XG5cdFxuXHRpZiAoZC54MCA8IDApIHtcbiAgICAgICAgICAgIGQueDAgPSAwO1xuICAgICAgICAgICAgZC54MSA9IG5vZGVfd2lkdGg7XG5cdH0gLy8gaWZcblx0XG5cdGlmIChkLngxID4gd2lkdGgpIHtcbiAgICAgICAgICAgIGQueDAgPSB3aWR0aCAtIG5vZGVfd2lkdGg7XG4gICAgICAgICAgICBkLngxID0gd2lkdGg7XG5cdH0gLy8gaWZcblx0XG5cdGlmIChkLnkwIDwgMCkge1xuICAgICAgICAgICAgZC55MCA9IDA7XG4gICAgICAgICAgICBkLnkxID0gZC5fX3kxIC0gZC5fX3kwO1xuXHR9IC8vIGlmXG5cdFxuXHRpZiAoZC55MSA+IGhlaWdodCkge1xuICAgICAgICAgICAgZC55MCA9IGhlaWdodCAtIChkLl9feTEgLSBkLl9feTApO1xuICAgICAgICAgICAgZC55MSA9IGhlaWdodDtcblx0fSAvLyBpZlxuXHRzYW5rZXkudXBkYXRlKHNhbmtleURhdGEpO1xuXHRkMy5zZWxlY3RBbGwoXCIuc2Fua2V5LWxpbmtcIikuYXR0cihcImRcIiwgZDMuc2Fua2V5TGlua0hvcml6b250YWwoKSk7XG5cdHJldHVybiBgdHJhbnNsYXRlKCR7ZC54MH0sICR7ZC55MH0pYDtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gem9vbWVkKHt0cmFuc2Zvcm19KSB7XG4gICAgZy5hdHRyKFwidHJhbnNmb3JtXCIsIHRyYW5zZm9ybSk7XG59XG5mdW5jdGlvbiBnZXRfc2l6ZSgpIHtcbiAgICBlbWl0KCd1cGRhdGVfd2lkdGgnKTtcbiAgICBsZXQgd2lkdGggPSBwcm9wcy53aWR0aDtcbiAgICBpZiAod2lkdGggPT0gdW5kZWZpbmVkKSB7IHdpZHRoID0gJChzYW5rZXlfY2hhcnRfcmVmLnZhbHVlKS5wYXJlbnQoKS5wYXJlbnQoKS53aWR0aCgpIC0gMTAgfVxuXG4gICAgZW1pdCgndXBkYXRlX2hlaWdodCcpO1xuICAgIGxldCBoZWlnaHQgPSBwcm9wcy5oZWlnaHRcbiAgICBpZiAoaGVpZ2h0ID09IHVuZGVmaW5lZCkgeyBoZWlnaHQgPSAkKHNhbmtleV9jaGFydF9yZWYudmFsdWUpLnBhcmVudCgpLnBhcmVudCgpLmhlaWdodCgpIC0gODA7IH1cblxuICAgIHJldHVybiB7IHdpZHRoLCBoZWlnaHQgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlX3NhbmtleSh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgY29uc3QgX3NhbmtleSA9IGQzLnNhbmtleSgpXG5cdCAgLm5vZGVBbGlnbihkMy5zYW5rZXlDZW50ZXIpXG5cdCAgLm5vZGVXaWR0aCgxMClcblx0ICAubm9kZVBhZGRpbmcobm9kZV93aWR0aClcblx0ICAuZXh0ZW50KFtcblx0ICAgICAgWzAsIDVdLFxuXHQgICAgICBbd2lkdGgsIGhlaWdodF1cblx0ICBdKTtcbiAgICByZXR1cm4gX3NhbmtleTtcbn1cblxuLyogU2V0IHRvIHRydWUsIHRvIHNob3cgdGhlICdObyBEYXRhJyBtZXNzYWdlICovXG5mdW5jdGlvbiBzZXRfbm9fZGF0YV9mbGFnKHNldF9ub19kYXRhKSB7XG4gIG5vX2RhdGEudmFsdWUgPSBzZXRfbm9fZGF0YVxufVxuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuICAgIFxuZGVmaW5lRXhwb3NlKHsgZHJhd19zYW5rZXksIHNldF9ub19kYXRhX2ZsYWcgfSk7XG5cbjwvc2NyaXB0PlxuXG48c3R5bGU+XG4vKiAubm9kZSByZWN0IHsgKi9cbi8qICAgZmlsbC1vcGFjaXR5OiAwLjk7ICovXG4vKiAgIHNoYXBlLXJlbmRlcmluZzogY3Jpc3BFZGdlczsgKi9cbi8qIH0gKi9cblxuLyogLm5vZGUgdGV4dCB7ICovXG4vKiAgIHBvaW50ZXItZXZlbnRzOiBub25lOyAqL1xuLyogICB0ZXh0LXNoYWRvdzogMCAxcHggMCAjZmZmOyAqL1xuLyogfSAqL1xuXG4vKiBwYXRoLmxpbmsubGluazIgeyAqL1xuLyogICAgIGFsbDogaW5pdGlhbDsgKi9cbi8qICAgICBmaWxsOiB1bnNldDsgKi9cbi8qICAgICBzdHJva2U6IHVuc2V0OyAqL1xuLyogICAgIHN0cm9rZS1vcGFjaXR5OiB1bnNldDsgKi9cbi8qICAgICBzdHJva2Utd2lkdGg6IHVuc2V0OyAqL1xuLyogfSAqL1xuXG4vKiAubGluazpob3ZlciB7ICovXG4vKiAgIHN0cm9rZS1vcGFjaXR5OiAwLjU7ICovXG4vKiB9ICovXG48L3N0eWxlPlxuIiwiPCEtLVxuICAoQykgMjAxMy0yMiAtIG50b3Aub3JnXG4tLT5cblxuPHRlbXBsYXRlPlxuICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wtbGctMTJcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkIGNhcmQtc2hhZG93XCI+XG4gICAgICAgICAgICAgICAgPExvYWRpbmcgdi1pZj1cImxvYWRpbmdcIj48L0xvYWRpbmc+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1lbmQgbWItM1wiXG4gICAgICAgICAgICAgICAgICAgICAgICA6Y2xhc3M9XCJbbG9hZGluZyA/ICdudG9wbmctZ3JheS1vdXQnIDogJyddXCIgc3R5bGU9XCJoZWlnaHQ6IDcwdmg7XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBtYi0yXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBuby13cmFwIG1zLWF1dG9cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm0tMVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT1cIm1pbi13aWR0aDogMTZyZW07XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwibXktYXV0byBtZS0xXCI+e3sgX2kxOG4oJ2hvc3RzJykgfX06IDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cIiBhY3RpdmVfaG9zdHNfdHlwZSBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6b3B0aW9ucz1cIiBzYW5rZXlfZm9ybWF0X2xpc3QgXCIgQHNlbGVjdF9vcHRpb249XCIgdXBkYXRlX3NhbmtleSBcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1NlbGVjdFNlYXJjaD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cIm15LWF1dG8gbWUtMVwiPjwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLWxpbmsgbS0xXCIgdGFiaW5kZXg9XCIwXCIgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cIiByZWxvYWQgXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPjxpIGNsYXNzPVwiZmFzIGZhLXN5bmNcIj48L2k+PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8U2Fua2V5IHJlZj1cInNhbmtleV9jaGFydFwiIEBub2RlX2NsaWNrPVwiIG9uX25vZGVfY2xpY2sgXCIgOnNhbmtleV9kYXRhPVwic2Fua2V5X2RhdGFcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvU2Fua2V5PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgb25CZWZvcmVNb3VudCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0U2VhcmNoIH0gZnJvbSBcIi4vc2VsZWN0LXNlYXJjaC52dWVcIlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBMb2FkaW5nIH0gZnJvbSBcIi4vbG9hZGluZy52dWVcIlxuaW1wb3J0IHsgbnRvcG5nX3V0aWxpdHksIG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzLmpzXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNhbmtleSB9IGZyb20gXCIuL3NhbmtleS52dWVcIjtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gICAgaXNfbG9jYWw6IEJvb2xlYW5cbn0pO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuY29uc3QgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvaG9zdC9mbG93cy9kYXRhLmx1YWA7XG5jb25zdCBzYW5rZXlfY2hhcnQgPSByZWYobnVsbClcbmNvbnN0IGxvYWRpbmcgPSByZWYoZmFsc2UpO1xuXG5jb25zdCBzYW5rZXlfZm9ybWF0X2xpc3QgPSBbXG4gICAgeyBmaWx0ZXJfbmFtZTogJ2hvc3RzX3R5cGUnLCBrZXk6IDMsIGlkOiAnbG9jYWxfb3JpZ2luX3JlbW90ZV90YXJnZXQnLCB0aXRsZTogX2kxOG4oJ2Zsb3dzX3BhZ2UubG9jYWxfY2xpX3JlbW90ZV9zcnYnKSwgbGFiZWw6IF9pMThuKCdmbG93c19wYWdlLmxvY2FsX2NsaV9yZW1vdGVfc3J2JyksIGZpbHRlcl9pY29uOiBmYWxzZSwgY291bnRhYmxlOiBmYWxzZSB9LFxuICAgIHsgZmlsdGVyX25hbWU6ICdob3N0c190eXBlJywga2V5OiA0LCBpZDogJ3JlbW90ZV9vcmlnaW5fbG9jYWxfdGFyZ2V0JywgdGl0bGU6IF9pMThuKCdmbG93c19wYWdlLmxvY2FsX3Nydl9yZW1vdGVfY2xpJyksIGxhYmVsOiBfaTE4bignZmxvd3NfcGFnZS5sb2NhbF9zcnZfcmVtb3RlX2NsaScpLCBmaWx0ZXJfaWNvbjogZmFsc2UsIGNvdW50YWJsZTogZmFsc2UgfSxcbiAgICB7IGZpbHRlcl9uYW1lOiAnaG9zdHNfdHlwZScsIGtleTogNSwgaWQ6ICdhbGxfaG9zdHMnLCB0aXRsZTogX2kxOG4oJ2Zsb3dzX3BhZ2UuYWxsX2Zsb3dzJyksIGxhYmVsOiBfaTE4bignZmxvd3NfcGFnZS5hbGxfZmxvd3MnKSwgZmlsdGVyX2ljb246IGZhbHNlLCBjb3VudGFibGU6IGZhbHNlIH0sXG5dO1xuXG5pZiAocHJvcHMuaXNfbG9jYWwpIHtcbiAgICBzYW5rZXlfZm9ybWF0X2xpc3QudW5zaGlmdCh7IGZpbHRlcl9uYW1lOiAnaG9zdHNfdHlwZScsIGtleTogMSwgaWQ6ICdsb2NhbF9vbmx5JywgdGl0bGU6IF9pMThuKCdmbG93c19wYWdlLmxvY2FsX29ubHknKSwgbGFiZWw6IF9pMThuKCdmbG93c19wYWdlLmxvY2FsX29ubHknKSwgZmlsdGVyX2ljb246IGZhbHNlLCBjb3VudGFibGU6IGZhbHNlIH0pXG59IGVsc2Uge1xuICAgIHNhbmtleV9mb3JtYXRfbGlzdC51bnNoaWZ0KHsgZmlsdGVyX25hbWU6ICdob3N0c190eXBlJywga2V5OiAyLCBpZDogJ3JlbW90ZV9vbmx5JywgdGl0bGU6IF9pMThuKCdmbG93c19wYWdlLnJlbW90ZV9vbmx5JyksIGxhYmVsOiBfaTE4bignZmxvd3NfcGFnZS5yZW1vdGVfb25seScpLCBmaWx0ZXJfaWNvbjogZmFsc2UsIGNvdW50YWJsZTogZmFsc2UgfSlcbn1cblxuY29uc3QgYWN0aXZlX2hvc3RzX3R5cGUgPSByZWYoc2Fua2V5X2Zvcm1hdF9saXN0WzNdKTtcblxuY29uc3Qgc2Fua2V5X2RhdGEgPSByZWYoe30pO1xuXG5vbkJlZm9yZU1vdW50KCgpID0+IHsgfSk7XG5cbm9uTW91bnRlZCgoKSA9PiB7XG4gICAgdXBkYXRlX3NhbmtleSgpO1xufSk7XG5cbmZ1bmN0aW9uIG9uX25vZGVfY2xpY2sobm9kZSkge1xuICAgIGlmIChub2RlLmlzX2xpbmtfbm9kZSA9PSB0cnVlKSB7IHJldHVybjsgfVxuICAgIGxldCB1cmxfb2JqID0ge1xuICAgICAgICBob3N0OiBub2RlLmluZm8uaXAsXG4gICAgICAgIHZsYW46IG5vZGUuaW5mby52bGFuLFxuICAgIH07XG4gICAgbGV0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXModXJsX29iaik7XG4gICAgY29uc3QgaG9zdF91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL2hvc3RfZGV0YWlscy5sdWE/JHt1cmxfcGFyYW1zfWA7XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLmdvX3RvX3VybChob3N0X3VybCk7XG4gICAgLy9ob3N0PScgLi4gZmxvd1tcImNsaS5pcFwiXSAuLiAnJnZsYW49JyAuLiBmbG93W1widmxhblwiXVxufVxuXG5jb25zdCB1cGRhdGVfc2Fua2V5ID0gZnVuY3Rpb24gKCkge1xuICAgIGxldCBlbnRyeSA9IGFjdGl2ZV9ob3N0c190eXBlLnZhbHVlO1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChlbnRyeS5maWx0ZXJfbmFtZSwgZW50cnkuaWQpO1xuICAgIHNldF9zYW5rZXlfZGF0YSgpO1xufVxuXG5jb25zdCByZWxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdXBkYXRlX3NhbmtleSgpXG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNldF9zYW5rZXlfZGF0YSgpIHtcbiAgICBsb2FkaW5nLnZhbHVlID0gdHJ1ZTtcbiAgICBsZXQgZGF0YSA9IGF3YWl0IGdldF9zYW5rZXlfZGF0YSgpO1xuICAgIHNhbmtleV9kYXRhLnZhbHVlID0gZGF0YTtcbiAgICBsb2FkaW5nLnZhbHVlID0gZmFsc2U7XG59XG5cbi8qXG5mdW5jdGlvbiBhZGRfZmFrZV9jaXJjdWxhcl9saW5rKGdyYXBoKSB7XG4gICAgY29uc3Qgbm9kZV9pZF8wID0gXCJub2RlX2lkXzBcIiwgbm9kZV9pZF8xID0gXCJub2RlX2lkXzFcIjtcbiAgICBncmFwaC5ub2Rlcy5wdXNoKHsgbm9kZV9pZDogbm9kZV9pZF8wLCBsYWJlbDogbm9kZV9pZF8wIH0pO1xuICAgIGdyYXBoLm5vZGVzLnB1c2goeyBub2RlX2lkOiBub2RlX2lkXzEsIGxhYmVsOiBub2RlX2lkXzEgfSk7XG4gICAgZ3JhcGgubGlua3MucHVzaCh7IHNvdXJjZV9ub2RlX2lkOiBub2RlX2lkXzAsIHRhcmdldF9ub2RlX2lkOiBub2RlX2lkXzEsIHZhbHVlOiAxMCwgbGFiZWw6IGAke25vZGVfaWRfMH1fJHtub2RlX2lkXzF9YCB9KTtcbiAgICBncmFwaC5saW5rcy5wdXNoKHsgc291cmNlX25vZGVfaWQ6IG5vZGVfaWRfMSwgdGFyZ2V0X25vZGVfaWQ6IG5vZGVfaWRfMCwgdmFsdWU6IDEwLCBsYWJlbDogYCR7bm9kZV9pZF8xfV8ke25vZGVfaWRfMH1gIH0pO1xufVxuKi9cblxuYXN5bmMgZnVuY3Rpb24gZ2V0X3NhbmtleV9kYXRhKCkge1xuICAgIGNvbnN0IHVybF9yZXF1ZXN0ID0gZ2V0X3NhbmtleV91cmwoKTtcbiAgICAvLyBsZXQgZ3JhcGggPSBhd2FpdCBzYW5rZXlVdGlscy5nZXRfZGF0YSgpO1xuICAgIGxldCBncmFwaCA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmxfcmVxdWVzdCk7XG4gICAgLy8gYWRkX2Zha2VfY2lyY3VsYXJfbGluayhncmFwaCk7XG4gICAgZ3JhcGggPSBtYWtlX2NvbXBsZXRlX2dyYXBoKGdyYXBoKTtcbiAgICBsZXQgbWFpbl9ub2RlX2lkID0gZ2V0X21haW5fbm9kZV9pZCgpO1xuICAgIGxldCBzYW5rZXlfZGF0YSA9IGdldF9zYW5rZXlfZGF0YV9mcm9tX3Jlc3RfZGF0YShncmFwaCwgbWFpbl9ub2RlX2lkKTtcbiAgICAoc2Fua2V5X2RhdGEubGlua3MubGVuZ3RoID4gMCAmJiBzYW5rZXlfZGF0YS5ub2Rlcy5sZW5ndGggPiAwKSA/XG4gICAgICAgIHNhbmtleV9jaGFydC52YWx1ZS5zZXRfbm9fZGF0YV9mbGFnKGZhbHNlKSA6XG4gICAgICAgIHNhbmtleV9jaGFydC52YWx1ZS5zZXRfbm9fZGF0YV9mbGFnKHRydWUpO1xuICAgIC8vIHNhbmtleV9kYXRhID0gbWFrZV9kYWdfZ3JhcGgoc2Fua2V5X2RhdGEpO1xuICAgIHJldHVybiBzYW5rZXlfZGF0YTtcbn1cblxuZnVuY3Rpb24gZ2V0X3NhbmtleV91cmwoKSB7XG4gICAgbGV0IHBhcmFtcyA9IHtcbiAgICAgICAgaG9zdDogbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJob3N0XCIpLFxuICAgICAgICB2bGFuOiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInZsYW5cIiksXG4gICAgICAgIGlmaWQ6IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiaWZpZFwiKSxcbiAgICAgICAgaG9zdHNfdHlwZTogbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJob3N0c190eXBlXCIpLFxuICAgIH07XG4gICAgbGV0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMocGFyYW1zKTtcbiAgICBsZXQgdXJsX3JlcXVlc3QgPSBgJHt1cmx9PyR7dXJsX3BhcmFtc31gO1xuICAgIHJldHVybiB1cmxfcmVxdWVzdDtcbn1cblxuZnVuY3Rpb24gZ2V0X21haW5fbm9kZV9pZCgpIHtcbiAgICByZXR1cm4gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJob3N0XCIpO1xufVxuXG5mdW5jdGlvbiBnZXRfc2Fua2V5X2RhdGFfZnJvbV9yZXN0X2RhdGEoZ3JhcGgsIG1haW5fbm9kZV9pZCkge1xuICAgIGlmIChncmFwaC5ub2Rlcy5sZW5ndGggPT0gMCAmJiBncmFwaC5saW5rcy5sZW5ndGggPT0gMCkgeyByZXR1cm4gZ3JhcGg7IH1cbiAgICBsZXQgbm9kZV9kaWN0ID0ge307XG4gICAgLy8gY3JlYXRlIGEgbm9kZSBkaWN0XG4gICAgZ3JhcGgubm9kZXMuZm9yRWFjaCgobm9kZSkgPT4gbm9kZV9kaWN0W25vZGUubm9kZV9pZF0gPSBub2RlKTtcblxuICAgIC8vZ2V0IGxpbmsgZGlyZWN0aW9uIFxuICAgIGNvbnN0IGZfZ2V0X2xpbmtfZGlyZWN0aW9uID0gKGxpbmspID0+IHtcbiAgICAgICAgaWYgKGxpbmsuc291cmNlX25vZGVfaWQgPT0gbWFpbl9ub2RlX2lkKSB7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH0gZWxzZSBpZiAobGluay50YXJnZXRfbm9kZV9pZCA9PSBtYWluX25vZGVfaWQpIHtcbiAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IGBXcm9uZyBkaXJlY3Rpb24gbGluayAke2xpbmsuc291cmNlX25vZGVfaWR9IC0+ICR7bGluay50YXJnZXRfbm9kZV9pZH1gO1xuICAgIH07XG5cbiAgICAvLyBnZXQgbm9kZSBpZCB3aXRoIGRpcmVjdGlvblxuICAgIGNvbnN0IGZfZ2V0X25vZGVfZGlyZWN0aW9uX2lkID0gKG5vZGVfaWQsIGRpcmVjdGlvbikgPT4ge1xuICAgICAgICBpZiAobm9kZV9pZCA9PSBtYWluX25vZGVfaWQpIHtcbiAgICAgICAgICAgIHJldHVybiBub2RlX2lkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgJHtkaXJlY3Rpb259XyR7bm9kZV9pZH1gO1xuICAgIH07XG5cbiAgICAvLyBjcmVhdGUgYSBuZXcgZ3JhcGggZHVwbGljYXRpbmcgYWxsIG5vZGVzIHdpdGggZGlmZmVyZW50IGRpcmVjdGlvblxuICAgIGxldCBncmFwaDJfbm9kZV9kaWN0ID0ge307XG4gICAgbGV0IGdyYXBoMiA9IHsgbm9kZXM6IFtdLCBsaW5rczogW10gfTtcbiAgICBncmFwaC5saW5rcy5mb3JFYWNoKChsaW5rKSA9PiB7XG4gICAgICAgIGxldCBkaXJlY3Rpb24gPSBmX2dldF9saW5rX2RpcmVjdGlvbihsaW5rKTtcbiAgICAgICAgbGV0IG5ld19saW5rID0ge1xuICAgICAgICAgICAgc291cmNlX25vZGVfaWQ6IGZfZ2V0X25vZGVfZGlyZWN0aW9uX2lkKGxpbmsuc291cmNlX25vZGVfaWQsIGRpcmVjdGlvbiksXG4gICAgICAgICAgICB0YXJnZXRfbm9kZV9pZDogZl9nZXRfbm9kZV9kaXJlY3Rpb25faWQobGluay50YXJnZXRfbm9kZV9pZCwgZGlyZWN0aW9uKSxcbiAgICAgICAgICAgIGxhYmVsOiBsaW5rLmxhYmVsLFxuICAgICAgICAgICAgdmFsdWU6IGxpbmsudmFsdWUsXG4gICAgICAgICAgICBkYXRhOiBsaW5rLFxuICAgICAgICB9O1xuICAgICAgICBsZXQgbmV3X25vZGU7XG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT0gLTEpIHtcbiAgICAgICAgICAgIGxldCBuID0gbm9kZV9kaWN0W2xpbmsudGFyZ2V0X25vZGVfaWRdO1xuICAgICAgICAgICAgbmV3X25vZGUgPSB7IG5vZGVfaWQ6IG5ld19saW5rLnRhcmdldF9ub2RlX2lkLCBsYWJlbDogbi5sYWJlbCwgZGF0YTogbiB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IG4gPSBub2RlX2RpY3RbbGluay5zb3VyY2Vfbm9kZV9pZF07XG4gICAgICAgICAgICBuZXdfbm9kZSA9IHsgbm9kZV9pZDogbmV3X2xpbmsuc291cmNlX25vZGVfaWQsIGxhYmVsOiBuLmxhYmVsLCBkYXRhOiBuIH07XG4gICAgICAgIH1cbiAgICAgICAgZ3JhcGgyLmxpbmtzLnB1c2gobmV3X2xpbmspO1xuICAgICAgICBpZiAoZ3JhcGgyX25vZGVfZGljdFtuZXdfbm9kZS5ub2RlX2lkXSA9PSBudWxsKSB7XG4gICAgICAgICAgICBncmFwaDJfbm9kZV9kaWN0W25ld19ub2RlLm5vZGVfaWRdID0gdHJ1ZTtcbiAgICAgICAgICAgIGdyYXBoMi5ub2Rlcy5wdXNoKG5ld19ub2RlKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGxldCBtYWluX25vZGUgPSBub2RlX2RpY3RbbWFpbl9ub2RlX2lkXTtcbiAgICBncmFwaDIubm9kZXMucHVzaCh7IG5vZGVfaWQ6IG1haW5fbm9kZS5ub2RlX2lkLCBsYWJlbDogbWFpbl9ub2RlLmxhYmVsLCBkYXRhOiBtYWluX25vZGUgfSk7XG5cbiAgICAvLyB1cGRhdGUgbm9kZSBkaWN0XG4gICAgZ3JhcGgyLm5vZGVzLmZvckVhY2goKG5vZGUpID0+IG5vZGVfZGljdFtub2RlLm5vZGVfaWRdID0gbm9kZSk7XG5cbiAgICAvLyByZXR1cm4gdGhlIGxpbmsgbm9kZV9pZCBcbiAgICBjb25zdCBmX2dldF9saW5rX25vZGVfaWQgPSAobGluaykgPT4ge1xuICAgICAgICBsZXQgZGlyZWN0aW9uID0gZl9nZXRfbGlua19kaXJlY3Rpb24obGluayk7XG4gICAgICAgIHJldHVybiBgJHtkaXJlY3Rpb259XyR7bGluay5sYWJlbH1gO1xuICAgICAgICAvLyByZXR1cm4gYCR7bGluay5zb3VyY2Vfbm9kZV9pZH1fJHtsaW5rLmxhYmVsfWA7IFxuICAgIH07XG5cbiAgICBsZXQgbGlua190b19ub2Rlc19kaWN0ID0ge307IC8vIGtleTogbGluayBub2RlIGlkLCB2YWx1ZTogbGlua3NcbiAgICAvLyBtZXJnZSBhbGwgbGlua3MgYnkgbGluayBub2RlX2lkXG4gICAgZ3JhcGgyLmxpbmtzLmZvckVhY2goKGxpbmspID0+IHtcbiAgICAgICAgbGV0IGxpbmtfbm9kZV9pZCA9IGZfZ2V0X2xpbmtfbm9kZV9pZChsaW5rKTtcbiAgICAgICAgbGV0IGxpbmtfdG9fbm9kZXMgPSBsaW5rX3RvX25vZGVzX2RpY3RbbGlua19ub2RlX2lkXTtcbiAgICAgICAgaWYgKGxpbmtfdG9fbm9kZXMgPT0gbnVsbCkge1xuICAgICAgICAgICAgbGlua190b19ub2RlcyA9IHtcbiAgICAgICAgICAgICAgICBpZDogbGlua19ub2RlX2lkLFxuICAgICAgICAgICAgICAgIGxhYmVsOiBsaW5rLmxhYmVsLFxuICAgICAgICAgICAgICAgIGRhdGE6IHsgLi4ubGluaywgaXNfbGlua19ub2RlOiB0cnVlIH0sXG4gICAgICAgICAgICAgICAgbm9kZV9saW5rczogW10sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgbGlua190b19ub2Rlc19kaWN0W2xpbmtfbm9kZV9pZF0gPSBsaW5rX3RvX25vZGVzO1xuICAgICAgICB9XG4gICAgICAgIGxpbmtfdG9fbm9kZXMubm9kZV9saW5rcy5wdXNoKHtcbiAgICAgICAgICAgIHNvdXJjZTogbm9kZV9kaWN0W2xpbmsuc291cmNlX25vZGVfaWRdLFxuICAgICAgICAgICAgdGFyZ2V0OiBub2RlX2RpY3RbbGluay50YXJnZXRfbm9kZV9pZF0sXG4gICAgICAgICAgICB2YWx1ZTogZ2V0X2xpbmtfdmFsdWUobGluayksXG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gY3JlYXRlIG5vZGVzIGFuZCBsaW5rcyBncmFwaCwgY3JlYXRpbmcgYSBuZXcgbm9kZSBmb3IgZWFjaCBsaW5rXG4gICAgbGV0IG5vZGVzID0gZ3JhcGgyLm5vZGVzLm1hcCgobikgPT4gbiksIGxpbmtzID0gW107XG4gICAgZm9yIChsZXQgbGlua19ub2RlX2lkIGluIGxpbmtfdG9fbm9kZXNfZGljdCkge1xuICAgICAgICBsZXQgbGlua190b19ub2RlcyA9IGxpbmtfdG9fbm9kZXNfZGljdFtsaW5rX25vZGVfaWRdO1xuICAgICAgICBsZXQgbGlua19ub2RlID0ge1xuICAgICAgICAgICAgbm9kZV9pZDogbGlua190b19ub2Rlcy5pZCxcbiAgICAgICAgICAgIGxhYmVsOiBsaW5rX3RvX25vZGVzLmxhYmVsLFxuICAgICAgICAgICAgZGF0YTogbGlua190b19ub2Rlcy5kYXRhLFxuICAgICAgICB9O1xuICAgICAgICBub2Rlcy5wdXNoKGxpbmtfbm9kZSk7XG4gICAgICAgIGxpbmtfdG9fbm9kZXMubm9kZV9saW5rcy5mb3JFYWNoKChsaW5rKSA9PiB7XG4gICAgICAgICAgICBsaW5rcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBzb3VyY2Vfbm9kZV9pZDogbGluay5zb3VyY2Uubm9kZV9pZCxcbiAgICAgICAgICAgICAgICB0YXJnZXRfbm9kZV9pZDogbGlua19ub2RlLm5vZGVfaWQsXG4gICAgICAgICAgICAgICAgbGFiZWw6IGAke2xpbmsuc291cmNlLmxhYmVsfSAtICR7bGluay50YXJnZXQubGFiZWx9OiAke2xpbmtfbm9kZS5sYWJlbH1gLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBsaW5rLnZhbHVlLFxuICAgICAgICAgICAgICAgIGRhdGE6IGxpbmssXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGxpbmtzLnB1c2goe1xuICAgICAgICAgICAgICAgIHNvdXJjZV9ub2RlX2lkOiBsaW5rX25vZGUubm9kZV9pZCxcbiAgICAgICAgICAgICAgICB0YXJnZXRfbm9kZV9pZDogbGluay50YXJnZXQubm9kZV9pZCxcbiAgICAgICAgICAgICAgICBsYWJlbDogYCR7bGluay5zb3VyY2UubGFiZWx9IC0gJHtsaW5rLnRhcmdldC5sYWJlbH06ICR7bGlua19ub2RlLmxhYmVsfWAsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGxpbmsudmFsdWUsXG4gICAgICAgICAgICAgICAgZGF0YTogbGluayxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBsZXQgc2Fua2V5X25vZGVfZGljdCA9IHt9OyAvLyBrZXk6IG5vZGVfaWQsIHZhbHVlOiBzYW5rZXlfbm9kZVxuICAgIGxldCBzYW5rZXlfbm9kZXMgPSBbXTtcbiAgICBub2Rlcy5tYXAoKG4sIGluZGV4KSA9PiB7XG4gICAgICAgIGxldCBzYW5rZXlfbm9kZSA9IHsgaW5kZXgsIG5vZGVfaWQ6IG4ubm9kZV9pZCwgbGFiZWw6IG4ubGFiZWwsIGRhdGE6IG4uZGF0YSB9O1xuICAgICAgICBzYW5rZXlfbm9kZV9kaWN0W24ubm9kZV9pZF0gPSBzYW5rZXlfbm9kZTtcbiAgICAgICAgc2Fua2V5X25vZGVzLnB1c2goc2Fua2V5X25vZGUpO1xuICAgIH0pO1xuICAgIGxldCBzYW5rZXlfbGlua3MgPSBsaW5rcy5tYXAoKGwpID0+IHtcbiAgICAgICAgbGV0IHNvdXJjZSA9IHNhbmtleV9ub2RlX2RpY3RbbC5zb3VyY2Vfbm9kZV9pZF07XG4gICAgICAgIGxldCB0YXJnZXQgPSBzYW5rZXlfbm9kZV9kaWN0W2wudGFyZ2V0X25vZGVfaWRdO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc291cmNlOiBzb3VyY2UuaW5kZXgsXG4gICAgICAgICAgICB0YXJnZXQ6IHRhcmdldC5pbmRleCxcbiAgICAgICAgICAgIHNvdXJjZV9ub2RlX2lkOiBzb3VyY2UuaW5kZXgsXG4gICAgICAgICAgICB0YXJnZXRfbm9kZV9pZDogdGFyZ2V0LmluZGV4LFxuICAgICAgICAgICAgdmFsdWU6IGwudmFsdWUsXG4gICAgICAgICAgICBsYWJlbDogbC5sYWJlbCxcbiAgICAgICAgfTtcbiAgICB9KTtcbiAgICByZXR1cm4geyBub2Rlczogc2Fua2V5X25vZGVzLCBsaW5rczogc2Fua2V5X2xpbmtzIH07XG59XG5cbi8vIHJlbW92ZSBhbGwgbGlua3Mgd2l0aCBhIG5vdCBleGlzdGluZyBub2RlXG5mdW5jdGlvbiBtYWtlX2NvbXBsZXRlX2dyYXBoKGdyYXBoKSB7XG4gICAgbGV0IGZfbG9nX2xpbmsgPSAobCkgPT4gY29uc29sZS5lcnJvcihgbGluayAoc291cmNlOiAke2wuc291cmNlX25vZGVfaWR9LCB0YXJnZXQ6ICR7bC50YXJnZXRfbm9kZV9pZH0pIHJlbW92ZWQgZm9yIG5vdCBleGlzdGluZyBzb3VyY2UvdGFyZ2V0IG5vZGVgKTtcbiAgICBsZXQgbGlua3MgPSBnZXRfbGlua3Nfd2l0aF9leGlzdGluZ19ub2RlKGdyYXBoLCBmX2xvZ19saW5rKTtcbiAgICByZXR1cm4geyBub2RlczogZ3JhcGgubm9kZXMsIGxpbmtzIH07XG59XG5cbi8vIHJlbWVvdmUgYWxsIGNpcmN1bGFyIGxpbmtzIGFuZCByZXR1cm4gYSBkYWcgZ3JhcGhcbmZ1bmN0aW9uIG1ha2VfZGFnX2dyYXBoKGdyYXBoKSB7XG4gICAgbGV0IG5vZGVzX2Rlc3RfZGljdCA9IHt9OyAvLyBkaWN0aW9uYXJ5IHsgW25vZGVfc291cmNlX2lkXTogbm9kZXNfdGFyZ2V0W10gfVxuICAgIGdyYXBoLmxpbmtzLmZvckVhY2goKGwpID0+IHtcbiAgICAgICAgbGV0IG5vZGVzX2Rlc3QgPSBub2Rlc19kZXN0X2RpY3RbbC5zb3VyY2Vfbm9kZV9pZF07XG4gICAgICAgIGlmIChub2Rlc19kZXN0ID09IG51bGwpIHtcbiAgICAgICAgICAgIG5vZGVzX2Rlc3QgPSBbXTtcbiAgICAgICAgICAgIG5vZGVzX2Rlc3RfZGljdFtsLnNvdXJjZV9ub2RlX2lkXSA9IG5vZGVzX2Rlc3Q7XG4gICAgICAgIH1cbiAgICAgICAgbm9kZXNfZGVzdC5wdXNoKGwudGFyZ2V0X25vZGVfaWQpO1xuICAgIH0pO1xuICAgIGxldCBub2Rlc190b19jaGVjayA9IHt9OyAvLyB0ZW1wIGRpY3Rpb25hcnkgdXNlZCBmcm9tIGZfYWRkX2NpcmN1bGFyX2xpbmsgXG4gICAgZ3JhcGgubm9kZXMuZm9yRWFjaCgobikgPT4ge1xuICAgICAgICBub2Rlc190b19jaGVja1tuLm5vZGVfaWRdID0geyBjaGVja2VkOiBmYWxzZSwgdmlzaXRlZDogZmFsc2UgfTtcbiAgICB9KTtcblxuICAgIC8vIGNpcmN1bGFyIGxpbmtzIGRpY3QgKGtleTogYCR7c291cmNlX25vZGVfaWR9XyR7dGFyZ2V0X25vZGVfaWR9YClcbiAgICBsZXQgY2lyY3VsYXJfbGlua3MgPSB7fTtcbiAgICBsZXQgZl9nZXRfbGlua19rZXkgPSAoc291cmNlX2lkLCB0YXJnZXRfaWQpID0+IGAke3NvdXJjZV9pZH1fJHt0YXJnZXRfaWR9YDtcblxuICAgIC8vIGRlZXAgbmF2aWdhdGUgc3RhcnRpbmcgZnJvbSBub2RlX2lkIGFuZCBhZGQgY2lyY3VsYXJfbGlua3MgdmlzaXRlZCBpbiBjaXJjdWxhcl9saW5rcyBkaWN0IFxuICAgIGxldCBmX3NldF9jaXJjdWxhcl9saW5rcyA9IChub2RlX2lkLCBmcm9tX25vZGVfaWQpID0+IHtcbiAgICAgICAgbGV0IG5vZGVfdG9fY2hlY2sgPSBub2Rlc190b19jaGVja1tub2RlX2lkXTtcbiAgICAgICAgaWYgKG5vZGVfdG9fY2hlY2suY2hlY2tlZCA9PSB0cnVlKSB7IHJldHVybjsgfVxuICAgICAgICBlbHNlIGlmIChub2RlX3RvX2NoZWNrLnZpc2l0ZWQgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgbGV0IGxpbmtfa2V5ID0gZl9nZXRfbGlua19rZXkoZnJvbV9ub2RlX2lkLCBub2RlX2lkKTtcbiAgICAgICAgICAgIGNpcmN1bGFyX2xpbmtzW2xpbmtfa2V5XSA9IHRydWU7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBMaW5rIChzb3VyY2U6ICR7ZnJvbV9ub2RlX2lkfSwgdGFyZ2V0OiAke25vZGVfaWR9ICkgaXMgYSBjaXJjdWxhciBsaW5rYCk7XG4gICAgICAgICAgICBub2RlX3RvX2NoZWNrLnZpc2l0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBub2RlX3RvX2NoZWNrLnZpc2l0ZWQgPSB0cnVlO1xuICAgICAgICBsZXQgbm9kZXNfZGVzdCA9IG5vZGVzX2Rlc3RfZGljdFtub2RlX2lkXTtcbiAgICAgICAgaWYgKG5vZGVzX2Rlc3QgIT0gbnVsbCkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2Rlc19kZXN0Lmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgbGV0IHRhcmdldF9ub2RlX2lkID0gbm9kZXNfZGVzdFtpXTtcbiAgICAgICAgICAgICAgICBmX3NldF9jaXJjdWxhcl9saW5rcyh0YXJnZXRfbm9kZV9pZCwgbm9kZV9pZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbm9kZV90b19jaGVjay52aXNpdGVkID0gZmFsc2U7XG4gICAgICAgIG5vZGVfdG9fY2hlY2suY2hlY2tlZCA9IHRydWU7XG4gICAgfTtcbiAgICAvLyBzZXQgY2lyY3VsYXJfbGlua3MgZGljdGlvbmFyeVxuICAgIGdyYXBoLm5vZGVzLmZvckVhY2goKG4pID0+IGZfc2V0X2NpcmN1bGFyX2xpbmtzKG4ubm9kZV9pZCkpO1xuXG4gICAgLy8gcmVtb3ZlIG5vIGRhZyBub2Rlcy9saW5rc1xuICAgIGxldCBmX2ZpbHRlcl9saW5rID0gKGwpID0+IHtcbiAgICAgICAgbGV0IGxpbmtfa2V5ID0gZl9nZXRfbGlua19rZXkobC5zb3VyY2Vfbm9kZV9pZCwgbC50YXJnZXRfbm9kZV9pZCk7XG4gICAgICAgIGxldCB0YWtlX2xpbmsgPSBjaXJjdWxhcl9saW5rc1tsaW5rX2tleV0gPT0gbnVsbDtcbiAgICAgICAgcmV0dXJuIHRha2VfbGluaztcbiAgICB9O1xuICAgIGxldCBmX2xvZ19saW5rID0gKGwpID0+IGNvbnNvbGUuZXJyb3IoYGxpbmsgKHNvdXJjZTogJHtsLnNvdXJjZV9ub2RlX2lkfSwgdGFyZ2V0OiAke2wudGFyZ2V0X25vZGVfaWR9KSByZW1vdmVkIGZvciBjaXJjdWxhciBsaW5rc2ApO1xuICAgIGxldCBsaW5rcyA9IGZpbHRlcl9sb2coZ3JhcGgubGlua3MsIGZfZmlsdGVyX2xpbmssIGZfbG9nX2xpbmspO1xuXG4gICAgbGV0IGZfbG9nX25vZGUgPSAobikgPT4gY29uc29sZS5lcnJvcihgbm9kZSAke24ubm9kZV9pZH0gcmVtb3ZlZCBmb3IgY2lyY3VsYXIgbGlua3NgKTtcbiAgICBsZXQgbm9kZXMgPSBnZXRfbm9kZXNfd2l0aF9leGlzdGluZ19saW5rKHsgbm9kZXM6IGdyYXBoLm5vZGVzLCBsaW5rcyB9LCBmX2xvZ19ub2RlKTtcblxuICAgIC8vIHJldHVybiBhIGRhZyBncmFwaFxuICAgIHJldHVybiB7IG5vZGVzLCBsaW5rcyB9O1xufVxuXG5mdW5jdGlvbiBnZXRfbGlua3Nfd2l0aF9leGlzdGluZ19ub2RlKGdyYXBoLCBmX2xvZykge1xuICAgIGxldCBub2RlX2RpY3QgPSB7fTtcbiAgICBncmFwaC5ub2Rlcy5mb3JFYWNoKChuKSA9PiBub2RlX2RpY3Rbbi5ub2RlX2lkXSA9IHRydWUpO1xuICAgIGxldCBmX2ZpbHRlciA9IChsKSA9PiBub2RlX2RpY3RbbC5zb3VyY2Vfbm9kZV9pZF0gIT0gbnVsbCAmJiBub2RlX2RpY3RbbC50YXJnZXRfbm9kZV9pZF0gIT0gbnVsbDtcbiAgICBsZXQgbGlua3MgPSBmaWx0ZXJfbG9nKGdyYXBoLmxpbmtzLCBmX2ZpbHRlciwgZl9sb2cpO1xuICAgIHJldHVybiBsaW5rcztcbn1cblxuZnVuY3Rpb24gZ2V0X25vZGVzX3dpdGhfZXhpc3RpbmdfbGluayhncmFwaCwgZl9sb2cpIHtcbiAgICBsZXQgbGlua19zb3VyY2VfZGljdCA9IHt9O1xuICAgIGxldCBsaW5rX3RhcmdldF9kaWN0ID0ge307XG4gICAgZ3JhcGgubGlua3MuZm9yRWFjaCgobCkgPT4ge1xuICAgICAgICBsaW5rX3NvdXJjZV9kaWN0W2wuc291cmNlX25vZGVfaWRdID0gdHJ1ZTtcbiAgICAgICAgbGlua190YXJnZXRfZGljdFtsLnRhcmdldF9ub2RlX2lkXSA9IHRydWU7XG4gICAgfSk7XG4gICAgbGV0IGZfZmlsdGVyID0gKG4pID0+IGxpbmtfc291cmNlX2RpY3Rbbi5ub2RlX2lkXSA9PSB0cnVlIHx8IGxpbmtfdGFyZ2V0X2RpY3Rbbi5ub2RlX2lkXSA9PSB0cnVlO1xuICAgIGxldCBub2RlcyA9IGZpbHRlcl9sb2coZ3JhcGgubm9kZXMsIGZfZmlsdGVyLCBmX2xvZyk7XG4gICAgcmV0dXJuIG5vZGVzO1xufVxuXG4vLyBsb2cgZWxlbWVudHMgZGVsZXRlZCBpZiBmX2xvZyAhPSBudWxsXG5mdW5jdGlvbiBmaWx0ZXJfbG9nKGVsZW1lbnRzLCBmX2ZpbHRlciwgZl9sb2cpIHtcbiAgICByZXR1cm4gZWxlbWVudHMuZmlsdGVyKChlKSA9PiB7XG4gICAgICAgIGNvbnN0IHRha2VfZWxlbWVudCA9IGZfZmlsdGVyKGUpO1xuICAgICAgICBpZiAodGFrZV9lbGVtZW50ID09IGZhbHNlICYmIGZfbG9nICE9IG51bGwpIHtcbiAgICAgICAgICAgIGZfbG9nKGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YWtlX2VsZW1lbnQ7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldF9saW5rX3ZhbHVlKGxpbmspIHtcbiAgICByZXR1cm4gbGluay5kYXRhPy5pbmZvPy50cmFmZmljO1xufVxuXG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsIi8qXG4gIChDKSAyMDEzLTIzIC0gbnRvcC5vcmdcbiAqL1xuXG4vKlxuICBIZXJlIGEgbGlzdCBvZiBmdW5jdGlvbnMgdXNlZCB0byBjaGVjaywgZm9ybWF0IGRhdGE7XG4gIGUuZy4gZnVuY3Rpb25zIHRoYXQgY2hlY2sgaWYgYSBzdHJpbmcgaXMgbnVsbCBvciBlbXB0eVxuICovXG5cbi8qIFRoaXMgZnVuY3Rpb24gY2hlY2sgaWYgdmFsdWUgaXMgbnVsbCwgZW1wdHkgb3IgMCAqL1xuY29uc3QgaXNFbXB0eU9yTnVsbCA9ICh2YWx1ZSkgPT4ge1xuICByZXR1cm4gISEodmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSA9PSBcIlwiIHx8IHZhbHVlID09IDApO1xufVxuXG4vKiBUaGlzIGZ1bmN0aW9uIGNoZWNrIGlmIHZhbHVlIGlzIG51bGwsIG9yIGFuIGVtcHR5IGFycmF5ICovXG5jb25zdCBpc0VtcHR5QXJyYXlPck51bGwgPSAodmFsdWUpID0+IHtcbiAgcmV0dXJuICEhKHZhbHVlID09IG51bGwgfHwgdmFsdWUubGVuZ3RoID09PSAwKTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuY29uc3QgZGF0YVV0aWxzID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4ge1xuICAgIGlzRW1wdHlPck51bGwsXG4gICAgaXNFbXB0eUFycmF5T3JOdWxsLFxuICB9O1xufSgpO1xuXG5leHBvcnQgZGVmYXVsdCBkYXRhVXRpbHM7XG5cbiIsIi8qXG4gIChDKSAyMDEzLTIzIC0gbnRvcC5vcmdcbiAqL1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqLyBcblxuZnVuY3Rpb24gZm9ybWF0X251bV9mb3Jfc29ydChudW0pIHtcbiAgaWYodHlwZW9mIG51bSA9PT0gXCJudW1iZXJcIikge1xuICAgIC8qIENoZWNrIGlmIGl0J3MgYSBudW1iZXIgKi9cbiAgICByZXR1cm4gbnVtO1xuICB9IGVsc2UgaWYodHlwZW9mIG51bSA9PT0gXCJzdHJpbmdcIikge1xuICAgIGlmKG51bSA9PSBcIlwiKSB7XG4gICAgICAvKiBTYWZldHkgY2hlY2sgKi9cbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBcbiAgICAvKiBJZiBpdCdzIGEgc3RyaW5nIGNvbnZlcnQgaXQgaW50byBhIG51bWJlciAqL1xuICAgIG51bSA9IG51bS5zcGxpdCgnLCcpLmpvaW4oXCJcIik7XG4gICAgbnVtID0gcGFyc2VJbnQobnVtKTtcbiAgfSBlbHNlIHtcbiAgICAvKiBJbiBjYXNlIGJvdGggZmFpbGVkLCBjb252ZXJ0IG51bSB0byAwICovXG4gICAgbnVtID0gMDtcbiAgfVxuXG4gIHJldHVybiBudW07XG59XG5cbi8vIG1heCBudW1iZXIgdmFsdWUgZm9yIHNvcnQgbnVtYmVyIHdpdGggbm9ybWFsaXplIG9wdGlvbiBcbi8vIGZvciBjYXNlczogbGFzdCBzY2FuIGFuZCBsYXN0IGR1cmF0aW9uIGNvbHVtbiB0byBoYW5kbGUgZW1wdHkgdmFsdWVzXG5jb25zdCBNQVhfTlVNQkVSX1ZBTFVFID0gOTk5OTk5OTk5OTk7XG5cbmNvbnN0IG5vcm1hbGl6ZV9udW1iZXJfdmFsdWUgPSBmdW5jdGlvbihsb3dlcl92YWx1ZSwgdmFsLCBzb3J0KSB7XG4gIGlmICh2YWwgPT0gbG93ZXJfdmFsdWUpIHtcbiAgICBpZiAoc29ydCA9PSAxKSB7XG4gICAgICB2YWwgPSBNQVhfTlVNQkVSX1ZBTFVFO1xuICAgIH1cbiAgfSAgICBcbiAgcmV0dXJuIHZhbDsgXG59XG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqLyBcblxuLyogU29ydCBieSBOYW1lICovXG5jb25zdCBzb3J0QnlOYW1lID0gZnVuY3Rpb24odmFsXzEsIHZhbF8yLCBzb3J0KSB7XG4gIGlmIChzb3J0ID09IDEpIHtcbiAgICByZXR1cm4gdmFsXzE/LmxvY2FsZUNvbXBhcmUodmFsXzIpO1xuICB9XG4gIHJldHVybiB2YWxfMj8ubG9jYWxlQ29tcGFyZSh2YWxfMSk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovIFxuXG4vKiBTb3J0IGJ5IElQIEFkZHJlc3NlcyAqL1xuY29uc3Qgc29ydEJ5SVAgPSBmdW5jdGlvbih2YWxfMSwgdmFsXzIsIHNvcnQpIHtcbiAgdmFsXzEgPSBOdG9wVXRpbHMuY29udmVydElQQWRkcmVzcyh2YWxfMSk7XG4gIHZhbF8yID0gTnRvcFV0aWxzLmNvbnZlcnRJUEFkZHJlc3ModmFsXzIpO1xuICBpZiAoc29ydCA9PSAxKSB7XG4gICAgcmV0dXJuIHZhbF8xLmxvY2FsZUNvbXBhcmUodmFsXzIpO1xuICB9XG4gIHJldHVybiB2YWxfMi5sb2NhbGVDb21wYXJlKHZhbF8xKTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi8gXG5cbi8qIFNvcnQgYnkgTnVtYmVyICovXG5jb25zdCBzb3J0QnlOdW1iZXIgPSBmdW5jdGlvbih2YWxfMSwgdmFsXzIsIHNvcnQpIHtcbiAgLyogSXQncyBhbiBhcnJheSAqL1xuICB2YWxfMSA9IGZvcm1hdF9udW1fZm9yX3NvcnQodmFsXzEpO1xuICB2YWxfMiA9IGZvcm1hdF9udW1fZm9yX3NvcnQodmFsXzIpO1xuXG4gIGlmIChzb3J0ID09IDEpIHtcbiAgICByZXR1cm4gdmFsXzEgLSB2YWxfMjtcbiAgfVxuICByZXR1cm4gdmFsXzIgLSB2YWxfMTsgXG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovIFxuXG4vKiBTb3J0IGJ5IE51bWJlciBhZnRlciB2YWx1ZXMgbm9ybWFsaXphdGlvbiAqL1xuY29uc3Qgc29ydEJ5TnVtYmVyV2l0aE5vcm1hbGl6YXRpb25WYWx1ZSA9IGZ1bmN0aW9uKHZhbF8xLCB2YWxfMiwgc29ydCwgbG93ZXJfdmFsdWUpIHtcbiAgdmFsXzEgPSBub3JtYWxpemVfbnVtYmVyX3ZhbHVlKGxvd2VyX3ZhbHVlLCB2YWxfMSwgc29ydCk7XG4gIHZhbF8yID0gbm9ybWFsaXplX251bWJlcl92YWx1ZShsb3dlcl92YWx1ZSwgdmFsXzIsIHNvcnQpO1xuXG4gIHJldHVybiBzb3J0QnlOdW1iZXIodmFsXzEsdmFsXzIsc29ydCk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovIFxuXG5jb25zdCBzb3J0aW5nRnVuY3Rpb25zID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4ge1xuICAgIHNvcnRCeUlQLFxuICAgIHNvcnRCeU5hbWUsXG4gICAgc29ydEJ5TnVtYmVyLFxuICAgIHNvcnRCeU51bWJlcldpdGhOb3JtYWxpemF0aW9uVmFsdWUsXG4gIH07XG59KCk7XG5cbmV4cG9ydCBkZWZhdWx0IHNvcnRpbmdGdW5jdGlvbnM7IiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbiAgPG1vZGFsIEBzaG93ZWQ9XCJzaG93ZWQoKVwiIHJlZj1cIm1vZGFsX2lkXCI+XG4gICAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT57eyB0aXRsZSB9fTwvdGVtcGxhdGU+XG4gICAgPHRlbXBsYXRlIHYtc2xvdDpib2R5PlxuXG4gICAgICA8ZGl2IHYtaWY9XCJpbnZhbGlkX2FkZFwiIGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mbyBhbGVydC1kaXNtaXNzYWJsZVwiPlxuICAgICAgICA8c3BhbiBjbGFzcz1cInRleHQtaW5mbyBtZS0xXCI+PC9zcGFuPlxuICAgICAgICA8c3Bhbj4ge3sgX2kxOG4oJ3J1bGVfYWxyZWFkeV9wcmVzZW50JykgfX08L3NwYW4+XG4gICAgICA8L2Rpdj5cbiAgICAgIDwhLS0gVGFyZ2V0IGluZm9ybWF0aW9uLCBoZXJlIGFuIElQIGlzIHB1dCAtLT5cbiAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuXG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS0yXCI+XG4gICAgICAgICAgPGI+e3sgX2kxOG4oXCJpZl9zdGF0c19jb25maWcuYWRkX3J1bGVzX3R5cGVcIikgfX08L2I+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tMTBcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwIGJ0bi1ncm91cC10b2dnbGVcIiBkYXRhLWJzLXRvZ2dsZT1cImJ1dHRvbnNcIj5cbiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImJ0biBcIiA6Y2xhc3M9XCJbcnVsZV90eXBlID09ICdIb3N0JyA/ICdidG4tcHJpbWFyeSBhY3RpdmUnIDogJ2J0bi1zZWNvbmRhcnknXVwiPlxuICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9XCJidG4tY2hlY2tcIiB0eXBlPVwicmFkaW9cIiBuYW1lPVwicnVsZV90eXBlXCIgdmFsdWU9XCJob3N0c1wiIEBjbGljaz1cInNldF9ydWxlX3R5cGUoJ0hvc3QnKVwiPiB7e1xuICAgICAgICAgICAgICAgIF9pMThuKFwiaWZfc3RhdHNfY29uZmlnLmFkZF9ydWxlc190eXBlX2hvc3RcIikgfX1cbiAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJidG4gXCIgOmNsYXNzPVwiW3J1bGVfdHlwZSA9PSAnaW50ZXJmYWNlJyA/ICdidG4tcHJpbWFyeSBhY3RpdmUnIDogJ2J0bi1zZWNvbmRhcnknXVwiPlxuICAgICAgICAgICAgICA8aW5wdXQgQGNsaWNrPVwic2V0X3J1bGVfdHlwZSgnaW50ZXJmYWNlJylcIiBjbGFzcz1cImJ0bi1jaGVja1wiIHR5cGU9XCJyYWRpb1wiIG5hbWU9XCJydWxlX3R5cGVcIlxuICAgICAgICAgICAgICAgIHZhbHVlPVwiaW50ZXJmYWNlXCI+IHt7IF9pMThuKFwiaWZfc3RhdHNfY29uZmlnLmFkZF9ydWxlc190eXBlX2ludGVyZmFjZVwiKSB9fVxuICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgIDxsYWJlbCB2LWlmPVwiZmxvd19kZXZpY2VfdGltZXNlcmllc19hdmFpbGFibGUgPT0gdHJ1ZVwiIGNsYXNzPVwiYnRuIFwiXG4gICAgICAgICAgICAgIDpjbGFzcz1cIltydWxlX3R5cGUgPT0gJ2V4cG9ydGVyJyA/ICdidG4tcHJpbWFyeSBhY3RpdmUnIDogJ2J0bi1zZWNvbmRhcnknXVwiPlxuICAgICAgICAgICAgICA8aW5wdXQgQGNsaWNrPVwic2V0X3J1bGVfdHlwZSgnZXhwb3J0ZXInKVwiIGNsYXNzPVwiYnRuLWNoZWNrXCIgdHlwZT1cInJhZGlvXCIgbmFtZT1cInJ1bGVfdHlwZVwiIHZhbHVlPVwiZXhwb3J0ZXJcIj5cbiAgICAgICAgICAgICAge3sgX2kxOG4oXCJpZl9zdGF0c19jb25maWcuYWRkX3J1bGVzX3R5cGVfZmxvd19leHBvcnRlclwiKSB9fVxuICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgIDxsYWJlbCB2LWlmPVwiaGFzX2hvc3RfcG9vbHMgPT0gdHJ1ZVwiIGNsYXNzPVwiYnRuIFwiXG4gICAgICAgICAgICAgIDpjbGFzcz1cIltydWxlX3R5cGUgPT0gJ2hvc3RfcG9vbCcgPyAnYnRuLXByaW1hcnkgYWN0aXZlJyA6ICdidG4tc2Vjb25kYXJ5J11cIj5cbiAgICAgICAgICAgICAgPGlucHV0IEBjbGljaz1cInNldF9ydWxlX3R5cGUoJ2hvc3RfcG9vbCcpXCIgY2xhc3M9XCJidG4tY2hlY2tcIiB0eXBlPVwicmFkaW9cIiBuYW1lPVwicnVsZV90eXBlXCJcbiAgICAgICAgICAgICAgICB2YWx1ZT1cImhvc3RfcG9vbFwiPiB7eyBfaTE4bihcImlmX3N0YXRzX2NvbmZpZy5hZGRfcnVsZXNfdHlwZV9ob3N0X3Bvb2xcIikgfX1cbiAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICA8bGFiZWwgdi1pZj1cImhhc19jaWRyID09IHRydWVcIiBjbGFzcz1cImJ0biBcIlxuICAgICAgICAgICAgICA6Y2xhc3M9XCJbcnVsZV90eXBlID09ICdDSURSJyA/ICdidG4tcHJpbWFyeSBhY3RpdmUnIDogJ2J0bi1zZWNvbmRhcnknXVwiPlxuICAgICAgICAgICAgICA8aW5wdXQgQGNsaWNrPVwic2V0X3J1bGVfdHlwZSgnQ0lEUicpXCIgY2xhc3M9XCJidG4tY2hlY2tcIiB0eXBlPVwicmFkaW9cIiBuYW1lPVwicnVsZV90eXBlXCIgdmFsdWU9XCJDSURSXCI+IHt7XG4gICAgICAgICAgICAgICAgX2kxOG4oXCJpZl9zdGF0c19jb25maWcuYWRkX3J1bGVzX3R5cGVfY2lkclwiKSB9fVxuICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgIDxsYWJlbCB2LWlmPVwicHJvcHMuaGFzX3ZsYW5zID09IHRydWVcIiBjbGFzcz1cImJ0biBcIlxuICAgICAgICAgICAgICA6Y2xhc3M9XCJbcnVsZV90eXBlID09ICd2bGFuJyA/ICdidG4tcHJpbWFyeSBhY3RpdmUnIDogJ2J0bi1zZWNvbmRhcnknXVwiPlxuICAgICAgICAgICAgICA8aW5wdXQgQGNsaWNrPVwic2V0X3J1bGVfdHlwZSgndmxhbicpXCIgY2xhc3M9XCJidG4tY2hlY2tcIiB0eXBlPVwicmFkaW9cIiBuYW1lPVwicnVsZV90eXBlXCIgdmFsdWU9XCJ2bGFuXCI+IHt7XG4gICAgICAgICAgICAgICAgX2kxOG4oXCJpZl9zdGF0c19jb25maWcuYWRkX3J1bGVzX3R5cGVfdmxhbnNcIikgfX1cbiAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG5cbiAgICAgIDxkaXYgdi1pZj1cInJ1bGVfdHlwZSA9PSAnSG9zdCdcIiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCI+XG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS0yXCI+XG4gICAgICAgICAgPGI+e3sgX2kxOG4oXCJpZl9zdGF0c19jb25maWcudGFyZ2V0XCIpIH19PC9iPlxuICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTEwXCI+XG4gICAgICAgICAgPGlucHV0IHYtbW9kZWw9XCJob3N0XCIgQGlucHV0PVwiY2hlY2tfZW1wdHlfaG9zdFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgdHlwZT1cInRleHRcIiA6cGxhY2Vob2xkZXI9XCJob3N0X3BsYWNlaG9sZGVyXCJcbiAgICAgICAgICAgIHJlcXVpcmVkPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8ZGl2IHYtaWY9XCJydWxlX3R5cGUgPT0gJ0NJRFInXCIgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tMlwiPlxuICAgICAgICAgIDxiPnt7IF9pMThuKFwiaWZfc3RhdHNfY29uZmlnLnRhcmdldFwiKSB9fTwvYj5cbiAgICAgICAgPC9sYWJlbD5cblxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTEwXCI+XG4gICAgICAgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cInNlbGVjdGVkX25ldHdvcmtcIiA6b3B0aW9ucz1cIm5ldHdvcmtfbGlzdFwiPlxuICAgICAgICAgIDwvU2VsZWN0U2VhcmNoPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8ZGl2IHYtaWY9XCJydWxlX3R5cGUgPT0gJ2hvc3RfcG9vbCdcIiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCI+XG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS0yXCI+XG4gICAgICAgICAgPGI+e3sgX2kxOG4oXCJpZl9zdGF0c19jb25maWcudGFyZ2V0XCIpIH19PC9iPlxuICAgICAgICA8L2xhYmVsPlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tMTBcIj5cbiAgICAgICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfaG9zdF9wb29sXCIgOm9wdGlvbnM9XCJob3N0X3Bvb2xfbGlzdFwiPlxuICAgICAgICAgIDwvU2VsZWN0U2VhcmNoPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiB2LWlmPVwicnVsZV90eXBlID09ICdpbnRlcmZhY2UnXCIgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tMlwiPlxuICAgICAgICAgIDxiPnt7IF9pMThuKFwiaWZfc3RhdHNfY29uZmlnLnRhcmdldF9pbnRlcmZhY2VcIikgfX08L2I+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtMTBcIj5cblxuICAgICAgICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF9pZmlkXCIgOm9wdGlvbnM9XCJpZmlkX2xpc3RcIj5cbiAgICAgICAgICA8L1NlbGVjdFNlYXJjaD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPGRpdiB2LWlmPVwicnVsZV90eXBlID09ICdleHBvcnRlcicgJiYgZmxvd19kZXZpY2VfdGltZXNlcmllc19hdmFpbGFibGUgPT0gdHJ1ZVwiXG4gICAgICAgIGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTJcIj5cbiAgICAgICAgICA8Yj57eyBfaTE4bihcImlmX3N0YXRzX2NvbmZpZy50YXJnZXRfZXhwb3J0ZXJfZGV2aWNlXCIpIH19PC9iPlxuICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTEwXCI+XG5cbiAgICAgICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfZXhwb3J0ZXJfZGV2aWNlXCIgOm9wdGlvbnM9XCJmbG93X2V4cG9ydGVyX2RldmljZXNcIlxuICAgICAgICAgICAgQHNlbGVjdF9vcHRpb249XCJjaGFuZ2VfZXhwb3J0ZXJfaW50ZXJmYWNlc1wiPlxuICAgICAgICAgIDwvU2VsZWN0U2VhcmNoPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8dGVtcGxhdGUgdi1pZj1cInNlbGVjdGVkX2V4cG9ydGVyX2RldmljZS5pZCAhPSAnKidcIj5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTJcIj5cbiAgICAgICAgICA8Yj57eyBfaTE4bihcImlmX3N0YXRzX2NvbmZpZy50YXJnZXRfZXhwb3J0ZXJfZGV2aWNlX2lmaWRcIikgfX08L2I+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtMTBcIj5cblxuICAgICAgICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF9leHBvcnRlcl9kZXZpY2VfaWZpZFwiIDpvcHRpb25zPVwiZmxvd19leHBvcnRlcl9kZXZpY2VfaWZpZF9saXN0XCI+XG4gICAgICAgICAgPC9TZWxlY3RTZWFyY2g+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8ZGl2IHYtaWY9XCJydWxlX3R5cGUgPT0gJ3ZsYW4nXCIgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tMlwiPlxuICAgICAgICAgIDxiPnt7IF9pMThuKFwiaWZfc3RhdHNfY29uZmlnLnRhcmdldF92bGFuXCIpIH19PC9iPlxuICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTEwXCI+XG5cbiAgICAgICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfdmxhblwiIDpvcHRpb25zPVwidmxhbl9saXN0XCI+XG4gICAgICAgICAgPC9TZWxlY3RTZWFyY2g+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG5cblxuICAgICAgPCEtLSBNZXRyaWMgaW5mb3JtYXRpb24sIGhlcmUgYSBtZXRyaWMgaXMgc2VsZWN0ZWQgKGUuZy4gRE5TIHRyYWZmaWMpIC0tPlxuICAgICAgPGRpdiB2LWlmPVwibWV0cmljc19yZWFkeVwiIGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTJcIj5cbiAgICAgICAgICA8Yj57eyBfaTE4bihcImlmX3N0YXRzX2NvbmZpZy5tZXRyaWNcIikgfX08L2I+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwicnVsZV90eXBlID09ICdIb3N0J1wiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtMTBcIj5cbiAgICAgICAgICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF9tZXRyaWNcIiBAc2VsZWN0X29wdGlvbj1cImNoYW5nZV90aHJlc2hvbGQoKVwiXG4gICAgICAgICAgICAgIDpvcHRpb25zPVwibWV0cmljX2xpc3RcIj5cbiAgICAgICAgICAgIDwvU2VsZWN0U2VhcmNoPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8dGVtcGxhdGUgdi1lbHNlLWlmPVwicnVsZV90eXBlID09ICdpbnRlcmZhY2UnXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC0xMFwiPlxuICAgICAgICAgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cInNlbGVjdGVkX2ludGVyZmFjZV9tZXRyaWNcIlxuICAgICAgICAgICAgICBAc2VsZWN0X29wdGlvbj1cImNoYW5nZV9pbnRlcmZhY2VfdGhyZXNob2xkKClcIiA6b3B0aW9ucz1cImludGVyZmFjZV9tZXRyaWNfbGlzdFwiPlxuICAgICAgICAgICAgPC9TZWxlY3RTZWFyY2g+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgIDx0ZW1wbGF0ZSB2LWVsc2UtaWY9XCJydWxlX3R5cGUgPT0gJ2V4cG9ydGVyJ1wiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtMTBcIj5cbiAgICAgICAgICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF9mbG93X2RldmljZV9tZXRyaWNcIlxuICAgICAgICAgICAgICBAc2VsZWN0X29wdGlvbj1cImNoYW5nZV9tZXRyaWNfdHlwZV9leHBvcnRlclwiIDpvcHRpb25zPVwiZmxvd19kZXZpY2VfbWV0cmljX2xpc3RcIj5cbiAgICAgICAgICAgIDwvU2VsZWN0U2VhcmNoPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8dGVtcGxhdGUgdi1lbHNlLWlmPVwicnVsZV90eXBlID09ICdob3N0X3Bvb2wnXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC0xMFwiPlxuICAgICAgICAgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cInNlbGVjdGVkX2hvc3RfcG9vbF9tZXRyaWNcIiBAc2VsZWN0X29wdGlvbj1cImNoYW5nZV9tZXRyaWNfdHlwZV9ocCgpXCJcbiAgICAgICAgICAgICAgOm9wdGlvbnM9XCJob3N0X3Bvb2xfbWV0cmljX2xpc3RcIj5cbiAgICAgICAgICAgIDwvU2VsZWN0U2VhcmNoPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L3RlbXBsYXRlPlxuXG4gICAgICAgIDx0ZW1wbGF0ZSB2LWVsc2UtaWY9XCJydWxlX3R5cGUgPT0gJ0NJRFInXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC0xMFwiPlxuICAgICAgICAgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cInNlbGVjdGVkX25ldHdvcmtfbWV0cmljXCIgQHNlbGVjdF9vcHRpb249XCJjaGFuZ2VfbWV0cmljX3R5cGVfaHAoKVwiXG4gICAgICAgICAgICAgIDpvcHRpb25zPVwibmV0d29ya19tZXRyaWNfbGlzdFwiPlxuICAgICAgICAgICAgPC9TZWxlY3RTZWFyY2g+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgIDx0ZW1wbGF0ZSB2LWVsc2UtaWY9XCJydWxlX3R5cGUgPT0gJ3ZsYW4nXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC0xMFwiPlxuICAgICAgICAgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cInNlbGVjdGVkX3ZsYW5fbWV0cmljXCIgXG4gICAgICAgICAgICAgIDpvcHRpb25zPVwidmxhbl9tZXRyaWNfbGlzdFwiIEBzZWxlY3Rfb3B0aW9uPVwiY2hhbmdlX3ZsYW5fdGhyZXNob2xkXCI+XG4gICAgICAgICAgICA8L1NlbGVjdFNlYXJjaD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8IS0tIEZyZXF1ZW5jeSBpbmZvcm1hdGlvbiwgYSBmcmVxdWVuY3kgb2YgMSBkYXksIDUgbWludXRlIG9yIDEgaG91ciBmb3IgZXhhbXBsZSAtLT5cbiAgICAgIDxkaXYgdi1pZj1cIm1ldHJpY3NfcmVhZHlcIiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCI+XG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS0yXCI+XG4gICAgICAgICAgPGI+e3sgX2kxOG4oXCJpZl9zdGF0c19jb25maWcuZnJlcXVlbmN5XCIpIH19PC9iPlxuICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTEwXCI+XG4gICAgICAgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cInNlbGVjdGVkX2ZyZXF1ZW5jeVwiIDpvcHRpb25zPVwiZnJlcXVlbmN5X2xpc3RcIj5cbiAgICAgICAgICA8L1NlbGVjdFNlYXJjaD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPCEtLSBUaHJlc2hvbGQgaW5mb3JtYXRpb24sIG1heGltdW0gYW1vdW50IG9mIGJ5dGVzIC0tPlxuICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCIgc3R5bGU9XCJtYXJnaW4tdG9wOjNweFwiPlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tMlwiPlxuICAgICAgICAgIDxiPnt7IF9pMThuKFwiaWZfc3RhdHNfY29uZmlnLnRocmVzaG9sZFwiKSB9fTwvYj5cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCJ2aXNpYmxlXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS0zXCI+XG4gICAgICAgICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwibWV0cmljX3R5cGVcIiA6b3B0aW9ucz1cImFjdGl2ZV9tZXRyaWNfdHlwZV9saXN0XCI+XG4gICAgICAgICAgICA8L1NlbGVjdFNlYXJjaD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTNcIiA6Y2xhc3M9XCJbbWV0cmljX3R5cGUuaWQgPT0gJ3Rocm91Z2hwdXQnID8gJ3AtMCcgOiAnJ11cIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJidG4tZ3JvdXAgZmxvYXQtZW5kIGJ0bi1ncm91cC10b2dnbGVcIiBkYXRhLWJzLXRvZ2dsZT1cImJ1dHRvbnNcIj5cbiAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCJtZXRyaWNfdHlwZS5pZCA9PSAndGhyb3VnaHB1dCdcIiB2LWZvcj1cIm1lYXN1cmUgaW4gdGhyb3VnaHB1dF90aHJlc2hvbGRfbGlzdFwiPlxuICAgICAgICAgICAgICAgIDxpbnB1dCA6dmFsdWU9XCJtZWFzdXJlLnZhbHVlXCIgOmlkPVwibWVhc3VyZS5pZFwiIHR5cGU9XCJyYWRpb1wiIGNsYXNzPVwiYnRuLWNoZWNrXCIgYXV0b2NvbXBsZXRlPVwib2ZmXCJcbiAgICAgICAgICAgICAgICAgIHJlZj1cInRocmVzaG9sZF9tZWFzdXJlXCIgbmFtZT1cInRocmVzaG9sZF9tZWFzdXJlXCI+XG4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiYnRuIFwiIDppZD1cIm1lYXN1cmUuaWRcIiBAY2xpY2s9XCJzZXRfYWN0aXZlX3JhZGlvXCJcbiAgICAgICAgICAgICAgICAgIHYtYmluZDpjbGFzcz1cIlttZWFzdXJlLmFjdGl2ZSA/ICdidG4tcHJpbWFyeSBhY3RpdmUnIDogJ2J0bi1zZWNvbmRhcnknXVwiIDpmb3I9XCJtZWFzdXJlLmlkXCI+e3tcbiAgICAgICAgICAgICAgICAgICAgbWVhc3VyZS5sYWJlbCB9fTwvbGFiZWw+XG4gICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwibWV0cmljX3R5cGUuaWQgPT0gJ3BlcmNlbnRhZ2UnXCIgdi1mb3I9XCJtZWFzdXJlIGluIHBlcmNlbnRhZ2VfdGhyZXNob2xkX2xpc3RcIj5cbiAgICAgICAgICAgICAgICA8aW5wdXQgOnZhbHVlPVwibWVhc3VyZS52YWx1ZVwiIDppZD1cIm1lYXN1cmUuaWRcIiB0eXBlPVwicmFkaW9cIiBjbGFzcz1cImJ0bi1jaGVja1wiIGF1dG9jb21wbGV0ZT1cIm9mZlwiXG4gICAgICAgICAgICAgICAgICByZWY9XCJ0aHJlc2hvbGRfbWVhc3VyZVwiIG5hbWU9XCJ0aHJlc2hvbGRfbWVhc3VyZVwiPlxuICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImJ0biBcIiA6aWQ9XCJtZWFzdXJlLmlkXCIgQGNsaWNrPVwic2V0X2FjdGl2ZV9yYWRpb1wiXG4gICAgICAgICAgICAgICAgICB2LWJpbmQ6Y2xhc3M9XCJbbWVhc3VyZS5hY3RpdmUgPyAnYnRuLXByaW1hcnkgYWN0aXZlJyA6ICdidG4tc2Vjb25kYXJ5J11cIiA6Zm9yPVwibWVhc3VyZS5pZFwiPnt7XG4gICAgICAgICAgICAgICAgICAgIG1lYXN1cmUubGFiZWwgfX08L2xhYmVsPlxuICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1pZj1cIm1ldHJpY190eXBlLmlkID09ICd2b2x1bWUnXCIgdi1mb3I9XCJtZWFzdXJlIGluIHZvbHVtZV90aHJlc2hvbGRfbGlzdFwiPlxuICAgICAgICAgICAgICAgIDxpbnB1dCA6dmFsdWU9XCJtZWFzdXJlLnZhbHVlXCIgOmlkPVwibWVhc3VyZS5pZFwiIHR5cGU9XCJyYWRpb1wiIGNsYXNzPVwiYnRuLWNoZWNrXCIgYXV0b2NvbXBsZXRlPVwib2ZmXCJcbiAgICAgICAgICAgICAgICAgIHJlZj1cInRocmVzaG9sZF9tZWFzdXJlXCIgbmFtZT1cInRocmVzaG9sZF9tZWFzdXJlXCI+XG4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiYnRuIFwiIDppZD1cIm1lYXN1cmUuaWRcIiBAY2xpY2s9XCJzZXRfYWN0aXZlX3JhZGlvXCJcbiAgICAgICAgICAgICAgICAgIHYtYmluZDpjbGFzcz1cIlttZWFzdXJlLmFjdGl2ZSA/ICdidG4tcHJpbWFyeSBhY3RpdmUnIDogJ2J0bi1zZWNvbmRhcnknXVwiIDpmb3I9XCJtZWFzdXJlLmlkXCI+e3tcbiAgICAgICAgICAgICAgICAgICAgbWVhc3VyZS5sYWJlbCB9fTwvbGFiZWw+XG4gICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cblxuXG4gICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS0yIGJ0bi1ncm91cCBmbG9hdC1lbmQgYnRuLWdyb3VwLXRvZ2dsZVwiIGRhdGEtYnMtdG9nZ2xlPVwiYnV0dG9uc1wiPlxuICAgICAgICAgICAgPHRlbXBsYXRlIHYtZm9yPVwibWVhc3VyZSBpbiBzaWduX3RocmVzaG9sZF9saXN0XCI+XG4gICAgICAgICAgICAgIDxpbnB1dCA6dmFsdWU9XCJtZWFzdXJlLnZhbHVlXCIgOmlkPVwibWVhc3VyZS5pZFwiIHR5cGU9XCJyYWRpb1wiIGNsYXNzPVwiYnRuLWNoZWNrXCIgYXV0b2NvbXBsZXRlPVwib2ZmXCJcbiAgICAgICAgICAgICAgICByZWY9XCJ0aHJlc2hvbGRfc2lnblwiIG5hbWU9XCJ0aHJlc2hvbGRfc2lnblwiPlxuICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJidG4gXCIgOmlkPVwibWVhc3VyZS5pZFwiIEBjbGljaz1cInNldF9hY3RpdmVfc2lnbl9yYWRpb1wiXG4gICAgICAgICAgICAgICAgdi1iaW5kOmNsYXNzPVwiW21lYXN1cmUuYWN0aXZlID8gJ2J0bi1wcmltYXJ5IGFjdGl2ZScgOiAnYnRuLXNlY29uZGFyeSddXCIgOmZvcj1cIm1lYXN1cmUuaWRcIj57e1xuICAgICAgICAgICAgICAgICAgbWVhc3VyZS5sYWJlbCB9fTwvbGFiZWw+XG4gICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDwvdGVtcGxhdGU+XG5cbiAgICAgICAgPGRpdiA6Y2xhc3M9XCJbdmlzaWJsZSA/ICdjb2wtc20tMicgOiAnY29sLXNtLTgnXVwiPlxuICAgICAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwibWV0cmljX3R5cGUuaWQgPT0gJ3BlcmNlbnRhZ2UnXCI+XG4gICAgICAgICAgICA8aW5wdXQgdmFsdWU9XCIxXCIgcmVmPVwidGhyZXNob2xkXCIgdHlwZT1cIm51bWJlclwiIG5hbWU9XCJ0aHJlc2hvbGRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIG1heD1cIjEwMFwiIG1pbj1cIjFcIlxuICAgICAgICAgICAgICByZXF1aXJlZD5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgIDx0ZW1wbGF0ZSB2LWVsc2U+XG4gICAgICAgICAgICA8aW5wdXQgdmFsdWU9XCIxXCIgcmVmPVwidGhyZXNob2xkXCIgdHlwZT1cIm51bWJlclwiIG5hbWU9XCJ0aHJlc2hvbGRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIG1heD1cIjEwMjNcIiBtaW49XCIxXCJcbiAgICAgICAgICAgICAgcmVxdWlyZWQ+XG4gICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwibWV0cmljX3R5cGUuaWQgPT0gJ3BlcmNlbnRhZ2UnXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJtZXNzYWdlIGFsZXJ0IGFsZXJ0LXdhcm5pbmcgbXQtM1wiPlxuICAgICAgICAgIHt7IF9pMThuKFwic2hvd19hbGVydHMuaG9zdF9ydWxlc19wZXJjZW50YWdlXCIpIH19XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC90ZW1wbGF0ZT5cbiAgICA8L3RlbXBsYXRlPlxuICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6Zm9vdGVyPlxuICAgICAgPE5vdGVMaXN0IDpub3RlX2xpc3Q9XCJub3RlX2xpc3RcIiA6YWRkX3N1Yl9ub3Rlcz1cInRydWVcIiA6c3ViX25vdGVfbGlzdD1cInN1Yl9ub3Rlc19saXN0XCI+XG4gICAgICA8L05vdGVMaXN0PlxuICAgICAgPHRlbXBsYXRlIHYtaWY9XCJpc19lZGl0X3BhZ2UgPT0gZmFsc2VcIj5cbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiYWRkX1wiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgOmRpc2FibGVkPVwiZGlzYWJsZV9hZGQgJiYgcnVsZV90eXBlID09ICdIb3N0J1wiPnt7XG4gICAgICAgICAgX2kxOG4oJ2FkZCcpIH19PC9idXR0b24+XG4gICAgICA8L3RlbXBsYXRlPlxuICAgICAgPHRlbXBsYXRlIHYtZWxzZT5cbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiZWRpdF9cIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIDpkaXNhYmxlZD1cImRpc2FibGVfYWRkICYmIHJ1bGVfdHlwZSA9PSAnSG9zdCdcIj57e1xuICAgICAgICAgIF9pMThuKCdhcHBseScpIH19PC9idXR0b24+XG4gICAgICA8L3RlbXBsYXRlPlxuICAgIDwvdGVtcGxhdGU+XG4gIDwvbW9kYWw+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbkJlZm9yZU1vdW50IH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBtb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBOb3RlTGlzdCB9IGZyb20gXCIuL25vdGUtbGlzdC52dWVcIjtcbmltcG9ydCByZWdleFZhbGlkYXRpb24gZnJvbSBcIi4uL3V0aWxpdGllcy9yZWdleC12YWxpZGF0aW9uLmpzXCI7XG5pbXBvcnQgTnRvcFV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvbnRvcC11dGlsc1wiO1xuaW1wb3J0IGRhdGFVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL2RhdGEtdXRpbHNcIlxuaW1wb3J0IHsgZGVmYXVsdCBhcyBzb3J0aW5nRnVuY3Rpb25zIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9zb3J0aW5nLXV0aWxzLmpzXCI7XG5cbmNvbnN0IGlucHV0X21hY19saXN0ID0gcmVmKFwiXCIpO1xuY29uc3QgaW5wdXRfdHJpZ2dlcl9hbGVydHMgPSByZWYoXCJcIik7XG5cblxubGV0IGhhc19ob3N0X3Bvb2xzID0gcmVmKGZhbHNlKTtcbmxldCBoYXNfY2lkciA9IHJlZihmYWxzZSk7XG5jb25zdCBtb2RhbF9pZCA9IHJlZihudWxsKTtcbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbJ2FkZCcsICdlZGl0J10pO1xubGV0IHRpdGxlID0gaTE4bignaWZfc3RhdHNfY29uZmlnLmFkZF9ob3N0X3J1bGVzX3RpdGxlJyk7XG5jb25zdCBob3N0X3BsYWNlaG9sZGVyID0gaTE4bignaWZfc3RhdHNfY29uZmlnLmhvc3RfcGxhY2Vob2xkZXInKVxuXG5jb25zdCBtZXRyaWNzX3JlYWR5ID0gcmVmKGZhbHNlKVxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcbmNvbnN0IG1ldHJpY19saXN0ID0gcmVmKFtdKVxuY29uc3QgaW5pdF9mdW5jID0gcmVmKG51bGwpO1xuY29uc3QgZGVsZXRlX3JvdyA9IHJlZihudWxsKTtcbmNvbnN0IGlmaWRfbGlzdCA9IHJlZihbXSlcbmNvbnN0IGZsb3dfZXhwb3J0ZXJfZGV2aWNlcyA9IHJlZihbXSlcbmNvbnN0IGZsb3dfZXhwb3J0ZXJfZGV2aWNlX2lmaWRfbGlzdCA9IHJlZihbXSlcbmNvbnN0IGludGVyZmFjZV9tZXRyaWNfbGlzdCA9IHJlZihbXSlcbmNvbnN0IGhvc3RfcG9vbF9tZXRyaWNfbGlzdCA9IHJlZihbXSlcbmNvbnN0IGZsb3dfZGV2aWNlX21ldHJpY19saXN0ID0gcmVmKFtdKVxuY29uc3QgZnJlcXVlbmN5X2xpc3QgPSByZWYoW10pXG5jb25zdCB0aHJlc2hvbGRfbWVhc3VyZSA9IHJlZihudWxsKVxuY29uc3QgdGhyZXNob2xkX3NpZ24gPSByZWYobnVsbClcbmNvbnN0IHNlbGVjdGVkX21ldHJpYyA9IHJlZih7fSlcbmNvbnN0IHNlbGVjdGVkX2ZyZXF1ZW5jeSA9IHJlZih7fSlcbmNvbnN0IHNlbGVjdGVkX2lmaWQgPSByZWYoe30pXG5jb25zdCBzZWxlY3RlZF9leHBvcnRlcl9kZXZpY2UgPSByZWYoe30pXG5jb25zdCBzZWxlY3RlZF9leHBvcnRlcl9kZXZpY2VfaWZpZCA9IHJlZih7fSlcbmNvbnN0IHNlbGVjdGVkX2ludGVyZmFjZV9tZXRyaWMgPSByZWYoe30pXG5jb25zdCBzZWxlY3RlZF9ob3N0X3Bvb2xfbWV0cmljID0gcmVmKHt9KVxuY29uc3Qgc2VsZWN0ZWRfZmxvd19kZXZpY2VfbWV0cmljID0gcmVmKHt9KVxuY29uc3QgZGlzYWJsZV9hZGQgPSByZWYodHJ1ZSlcbmNvbnN0IG1ldHJpY190eXBlID0gcmVmKHt9KVxuY29uc3QgdmlzaWJsZSA9IHJlZih0cnVlKVxuY29uc3QgcnVsZV90eXBlID0gcmVmKFwiaG9zdHNcIik7XG5jb25zdCBmbG93X2RldmljZV90aW1lc2VyaWVzX2F2YWlsYWJsZSA9IHJlZihmYWxzZSk7XG5jb25zdCBpc19lZGl0X3BhZ2UgPSByZWYoZmFsc2UpXG5jb25zdCBwYWdlX2NzcmZfID0gcmVmKG51bGwpO1xuY29uc3Qgcm93X3RvX2VkaXRfaWQgPSByZWYobnVsbCk7XG5jb25zdCBpbnZhbGlkX2FkZCA9IHJlZihmYWxzZSk7XG5jb25zdCBob3N0X3Bvb2xfbGlzdCA9IHJlZihudWxsKTtcbmNvbnN0IG5ldHdvcmtfbGlzdCA9IHJlZihudWxsKTtcbmNvbnN0IHNlbGVjdGVkX2hvc3RfcG9vbCA9IHJlZih7fSk7XG5jb25zdCBzZWxlY3RlZF9uZXR3b3JrID0gcmVmKHt9KTtcbmNvbnN0IHNlbGVjdGVkX25ldHdvcmtfbWV0cmljID0gcmVmKHt9KTtcbmNvbnN0IG5ldHdvcmtfbWV0cmljX2xpc3QgPSByZWYobnVsbCk7XG5jb25zdCB2bGFuX2xpc3QgPSByZWYoW10pO1xuY29uc3Qgc2VsZWN0ZWRfdmxhbiA9IHJlZih7fSk7XG5jb25zdCB2bGFuX21ldHJpY19saXN0ID0gcmVmKG51bGwpO1xuY29uc3Qgc2VsZWN0ZWRfdmxhbl9tZXRyaWMgPSByZWYoe30pO1xubGV0IGFjdGl2ZV9tZXRyaWNfdHlwZV9saXN0ID0gcmVmKFtdKTtcblxuXG5jb25zdCBub3RlX2xpc3QgPSBbXG4gIF9pMThuKCdpZl9zdGF0c19jb25maWcubm90ZV8xJyksXG4gIF9pMThuKCdpZl9zdGF0c19jb25maWcubm90ZV8yJyksXG4gIF9pMThuKCdpZl9zdGF0c19jb25maWcubm90ZV8zJyksXG4gIF9pMThuKCdpZl9zdGF0c19jb25maWcubm90ZV80JyksXG5dO1xuXG5jb25zdCBzdWJfbm90ZXNfbGlzdCA9IFtcbiAgX2kxOG4oJ2lmX3N0YXRzX2NvbmZpZy5ub3RlXzUnKVxuXTtcblxuY29uc3QgbWV0cmljX3R5cGVfbGlzdCA9IHJlZihbXG4gIHsgdGl0bGU6IF9pMThuKCd2b2x1bWUnKSwgbGFiZWw6IF9pMThuKCd2b2x1bWUnKSwgaWQ6ICd2b2x1bWUnLCBhY3RpdmU6IHRydWUgfSxcbiAgeyB0aXRsZTogX2kxOG4oJ3Rocm91Z2hwdXQnKSwgbGFiZWw6IF9pMThuKCd0aHJvdWdocHV0JyksIGlkOiAndGhyb3VnaHB1dCcsIGFjdGl2ZTogZmFsc2UgfSxcbiAgeyB0aXRsZTogX2kxOG4oJ3BlcmNlbnRhZ2UnKSwgbGFiZWw6IF9pMThuKCdwZXJjZW50YWdlJyksIGlkOiAncGVyY2VudGFnZScsIGFjdGl2ZTogZmFsc2UgfSxcbl0pXG5cbi8qIEN1cnJlbnRseSBkaXNhYmxlZCB0aGUgcGVyY2VudGFnZSAqL1xuY29uc3QgZXhwb3J0ZXJfbWV0cmljX3R5cGVfbGlzdCA9IHJlZihbXG4gIHsgdGl0bGU6IF9pMThuKCd2b2x1bWUnKSwgbGFiZWw6IF9pMThuKCd2b2x1bWUnKSwgaWQ6ICd2b2x1bWUnLCBhY3RpdmU6IHRydWUgfSxcbiAgeyB0aXRsZTogX2kxOG4oJ3Rocm91Z2hwdXQnKSwgbGFiZWw6IF9pMThuKCd0aHJvdWdocHV0JyksIGlkOiAndGhyb3VnaHB1dCcsIGFjdGl2ZTogZmFsc2UgfSxcbiAgeyB0aXRsZTogX2kxOG4oJ3BlcmNlbnRhZ2UnKSwgbGFiZWw6IF9pMThuKCdwZXJjZW50YWdlJyksIGlkOiAncGVyY2VudGFnZScsIGFjdGl2ZTogZmFsc2UgfSxcbl0pXG5cbmNvbnN0IHBvb2xfbWV0cmljX3R5cGVfbGlzdCA9IHJlZihbXG4gIHsgdGl0bGU6IF9pMThuKCd2b2x1bWUnKSwgbGFiZWw6IF9pMThuKCd2b2x1bWUnKSwgaWQ6ICd2b2x1bWUnLCBhY3RpdmU6IHRydWUsIG1lYXN1cmVfdW5pdDogJ2JwcycgfSxcbiAgeyB0aXRsZTogX2kxOG4oJ3Rocm91Z2hwdXQnKSwgbGFiZWw6IF9pMThuKCd0aHJvdWdocHV0JyksIGlkOiAndGhyb3VnaHB1dCcsIGFjdGl2ZTogZmFsc2UsIG1lYXN1cmVfdW5pdDogJ2JwcycgfSxcbiAgeyB0aXRsZTogX2kxOG4oJ3BlcmNlbnRhZ2UnKSwgbGFiZWw6IF9pMThuKCdwZXJjZW50YWdlJyksIGlkOiAncGVyY2VudGFnZScsIGFjdGl2ZTogZmFsc2UsIG1lYXN1cmVfdW5pdDogJ251bWJlcicgfSxcbiAgeyB0aXRsZTogX2kxOG4oJ3ZhbHVlJyksIGxhYmVsOiBfaTE4bigndmFsdWUnKSwgaWQ6ICd2YWx1ZScsIGFjdGl2ZTogZmFsc2UsIG1lYXN1cmVfdW5pdDogJ251bWJlcicgfVxuXSlcblxuY29uc3QgZXhwb3J0ZXJfdXNhZ2VfdHlwZV9saXN0ID0gcmVmKFtcbiAgeyB0aXRsZTogX2kxOG4oJ3BlcmNlbnRhZ2UnKSwgbGFiZWw6IF9pMThuKCdwZXJjZW50YWdlJyksIGlkOiAnYWJzb2x1dGVfcGVyY2VudGFnZScsIGFjdGl2ZTogZmFsc2UsIG1lYXN1cmVfdW5pdDogJ251bWJlcicgfSxcbl0pXG5cbmNvbnN0IHZvbHVtZV90aHJlc2hvbGRfbGlzdCA9IHJlZihbXG4gIHsgdGl0bGU6IF9pMThuKCdrYicpLCBsYWJlbDogX2kxOG4oJ2tiJyksIGlkOiAna2InLCB2YWx1ZTogMTAyNCwgYWN0aXZlOiBmYWxzZSB9LFxuICB7IHRpdGxlOiBfaTE4bignbWInKSwgbGFiZWw6IF9pMThuKCdtYicpLCBpZDogJ21iJywgdmFsdWU6IDEwNDg1NzYsIGFjdGl2ZTogZmFsc2UgfSxcbiAgeyB0aXRsZTogX2kxOG4oJ2diJyksIGxhYmVsOiBfaTE4bignZ2InKSwgaWQ6ICdnYicsIHZhbHVlOiAxMDczNzQxODI0LCBhY3RpdmU6IHRydWUsIGRlZmF1bHRfYWN0aXZlOiB0cnVlIH0sXG5dKTtcblxuY29uc3QgdGhyb3VnaHB1dF90aHJlc2hvbGRfbGlzdCA9IHJlZihbXG4gIHsgdGl0bGU6IF9pMThuKCdrYnBzJyksIGxhYmVsOiBfaTE4bigna2JwcycpLCBpZDogJ2ticHMnLCB2YWx1ZTogMTAwMCwgYWN0aXZlOiBmYWxzZSB9LFxuICB7IHRpdGxlOiBfaTE4bignbWJwcycpLCBsYWJlbDogX2kxOG4oJ21icHMnKSwgaWQ6ICdtYnBzJywgdmFsdWU6IDEwMDAwMDAsIGFjdGl2ZTogZmFsc2UgfSxcbiAgeyB0aXRsZTogX2kxOG4oJ2dicHMnKSwgbGFiZWw6IF9pMThuKCdnYnBzJyksIGlkOiAnZ2JwcycsIHZhbHVlOiAxMDAwMDAwMDAwLCBhY3RpdmU6IHRydWUsIGRlZmF1bHRfYWN0aXZlOiB0cnVlIH0sXG5dKTtcblxuY29uc3Qgc2lnbl90aHJlc2hvbGRfbGlzdCA9IHJlZihbXG4gIHsgdGl0bGU6IFwiK1wiLCBsYWJlbDogXCI+XCIsIGlkOiAncGx1cycsIHZhbHVlOiAxLCBhY3RpdmU6IGZhbHNlIH0sXG4gIHsgdGl0bGU6IFwiLVwiLCBsYWJlbDogXCI8XCIsIGlkOiAnbWludXMnLCB2YWx1ZTogLTEsIGFjdGl2ZTogdHJ1ZSwgZGVmYXVsdF9hY3RpdmU6IHRydWUgfSxcbl0pO1xuXG5jb25zdCBwZXJjZW50YWdlX3RocmVzaG9sZF9saXN0ID0gW1xuICB7IHRpdGxlOiBcIitcIiwgbGFiZWw6IFwiJVwiLCBpZDogJ3BsdXMnLCB2YWx1ZTogMSwgYWN0aXZlOiB0cnVlIH0sXG5dXG5cbmNvbnN0IGhvc3QgPSByZWYobnVsbClcbmNvbnN0IHRocmVzaG9sZCA9IHJlZihudWxsKVxuXG5jb25zdCBzaG93ZWQgPSAoKSA9PiB7IH07XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICBtZXRyaWNfbGlzdDogQXJyYXksXG4gIGlmaWRfbGlzdDogQXJyYXksXG4gIGZsb3dfZXhwb3J0ZXJfZGV2aWNlczogQXJyYXksXG4gIGludGVyZmFjZV9tZXRyaWNfbGlzdDogQXJyYXksXG4gIGZsb3dfZGV2aWNlX21ldHJpY19saXN0OiBBcnJheSxcbiAgZnJlcXVlbmN5X2xpc3Q6IEFycmF5LFxuICBoYXNfdmxhbnM6IEJvb2xlYW4sXG4gIGluaXRfZnVuYzogRnVuY3Rpb24sXG4gIHBhZ2VfY3NyZjogU3RyaW5nLFxufSk7XG5cbmNvbnN0IHJlc3RfcGFyYW1zID0ge1xuICBjc3JmOiBwcm9wcy5wYWdlX2NzcmZcbn1cblxuZnVuY3Rpb24gcmVzZXRfcmFkaW9fc2VsZWN0aW9uKHJhZGlvX2FycmF5KSB7XG5cbiAgcmFkaW9fYXJyYXkuZm9yRWFjaCgoaXRlbSkgPT4gaXRlbS5hY3RpdmUgPSBpdGVtLmRlZmF1bHRfYWN0aXZlID09IHRydWUpO1xufVxuXG4vKipcbiAqIFxuICogUmVzZXQgZmllbGRzIGluIG1vZGFsIGZvcm0gXG4gKi9cbmNvbnN0IHJlc2V0X21vZGFsX2Zvcm0gPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGludmFsaWRfYWRkLnZhbHVlID0gZmFsc2U7XG4gIGhvc3QudmFsdWUgPSBcIlwiO1xuICBydWxlX3R5cGUudmFsdWUgPSBcIkhvc3RcIjtcbiAgc2VsZWN0ZWRfaWZpZC52YWx1ZSA9IGlmaWRfbGlzdC52YWx1ZVswXTtcbiAgc2VsZWN0ZWRfbWV0cmljLnZhbHVlID0gbWV0cmljX2xpc3QudmFsdWVbMF07XG4gIHNlbGVjdGVkX2ludGVyZmFjZV9tZXRyaWMudmFsdWUgPSBpbnRlcmZhY2VfbWV0cmljX2xpc3QudmFsdWVbMF07XG4gIHNlbGVjdGVkX2Zsb3dfZGV2aWNlX21ldHJpYy52YWx1ZSA9IGZsb3dfZGV2aWNlX21ldHJpY19saXN0LnZhbHVlWzBdO1xuXG4gIGlzX2VkaXRfcGFnZS52YWx1ZSA9IGZhbHNlO1xuICB0aXRsZSA9IGkxOG4oJ2lmX3N0YXRzX2NvbmZpZy5hZGRfaG9zdF9ydWxlc190aXRsZScpO1xuICBzZWxlY3RlZF9mcmVxdWVuY3kudmFsdWUgPSBmcmVxdWVuY3lfbGlzdC52YWx1ZVswXTtcbiAgbWV0cmljX3R5cGUudmFsdWUgPSBtZXRyaWNfdHlwZV9saXN0LnZhbHVlWzBdO1xuICBzZWxlY3RlZF9leHBvcnRlcl9kZXZpY2UudmFsdWUgPSBmbG93X2V4cG9ydGVyX2RldmljZXMudmFsdWVbMV07XG4gIGlmIChzZWxlY3RlZF9leHBvcnRlcl9kZXZpY2UudmFsdWUgIT0gbnVsbCkge1xuICAgIHVwZGF0ZV9leHBvcnRlcl9pbnRlcmZhY2VzKClcbiAgfVxuXG4gIC8vIHJlc2V0IG1ldHJpY190eXBlX2xpc3RcbiAgbWV0cmljX3R5cGVfbGlzdC52YWx1ZS5mb3JFYWNoKCh0KSA9PiB0LmFjdGl2ZSA9IGZhbHNlKTtcbiAgbWV0cmljX3R5cGVfbGlzdC52YWx1ZVswXS5hY3RpdmUgPSB0cnVlO1xuXG4gIGlmIChob3N0X3Bvb2xfbGlzdC52YWx1ZSAhPSBudWxsKVxuICAgIHNlbGVjdGVkX2hvc3RfcG9vbC52YWx1ZSA9IGhvc3RfcG9vbF9saXN0LnZhbHVlWzBdO1xuXG4gIHNlbGVjdGVkX2hvc3RfcG9vbF9tZXRyaWMudmFsdWUgPSBob3N0X3Bvb2xfbWV0cmljX2xpc3QudmFsdWVbMF07XG5cbiAgaWYgKG5ldHdvcmtfbGlzdC52YWx1ZSAhPSBudWxsKVxuICAgIHNlbGVjdGVkX25ldHdvcmsudmFsdWUgPSBuZXR3b3JrX2xpc3QudmFsdWVbMF07XG4gIGlmIChuZXR3b3JrX21ldHJpY19saXN0LnZhbHVlICE9IG51bGwpXG4gICAgc2VsZWN0ZWRfbmV0d29ya19tZXRyaWMudmFsdWUgPSBuZXR3b3JrX21ldHJpY19saXN0LnZhbHVlWzBdO1xuXG5cbiAgcmVzZXRfcmFkaW9fc2VsZWN0aW9uKHZvbHVtZV90aHJlc2hvbGRfbGlzdC52YWx1ZSk7XG4gIHJlc2V0X3JhZGlvX3NlbGVjdGlvbih0aHJvdWdocHV0X3RocmVzaG9sZF9saXN0LnZhbHVlKTtcbiAgcmVzZXRfcmFkaW9fc2VsZWN0aW9uKHNpZ25fdGhyZXNob2xkX2xpc3QudmFsdWUpO1xuXG4gIHJ1bGVfdHlwZS52YWx1ZSA9IFwiSG9zdFwiO1xuXG4gIGRpc2FibGVfYWRkLnZhbHVlID0gdHJ1ZTtcblxuICB0aHJlc2hvbGQudmFsdWUudmFsdWUgPSAxO1xuXG4gIHJvd190b19lZGl0X2lkLnZhbHVlID0gbnVsbDtcblxuICBhY3RpdmVfbWV0cmljX3R5cGVfbGlzdC52YWx1ZSA9IG1ldHJpY190eXBlX2xpc3QudmFsdWU7XG5cbiAgaWYgKHJ1bGVfdHlwZSA9PSAnSG9zdCcgfHwgcnVsZV90eXBlID09ICdpbnRlcmZhY2UnKSB7XG4gICAgbWV0cmljX3R5cGUudmFsZSA9IG1ldHJpY190eXBlX2xpc3QudmFsdWVbMF07XG4gIH0gZWxzZSB7XG4gICAgbWV0cmljX3R5cGUudmFsdWUgPSBhY3RpdmVfbWV0cmljX3R5cGVfbGlzdC52YWx1ZVswXTtcbiAgfVxuXG4gIGlmIChoYXNfdmxhbnMpIHtcbiAgICBzZWxlY3RlZF92bGFuLnZhbHVlID0gdmxhbl9saXN0LnZhbHVlWzBdO1xuICAgIHNlbGVjdGVkX3ZsYW5fbWV0cmljLnZhbHVlID0gdmxhbl9tZXRyaWNfbGlzdC52YWx1ZVswXTtcbiAgfVxuXG59XG5cbmNvbnN0IHNldF9ydWxlX3R5cGUgPSAodHlwZSkgPT4ge1xuICBydWxlX3R5cGUudmFsdWUgPSB0eXBlO1xuXG4gIGFjdGl2ZV9tZXRyaWNfdHlwZV9saXN0LnZhbHVlID0gbWV0cmljX3R5cGVfbGlzdC52YWx1ZTtcblxuICBpZiAodHlwZSA9PSBcImhvc3RfcG9vbFwiIHx8IHR5cGUgPT0gXCJDSURSXCIpIHtcbiAgICBjaGFuZ2VfbWV0cmljX3R5cGVfaHAoKTtcblxuICAgIGlmICh0eXBlID09IFwiaG9zdF9wb29sXCIpXG4gICAgICBtZXRyaWNfdHlwZS52YWx1ZSA9IGFjdGl2ZV9tZXRyaWNfdHlwZV9saXN0LnZhbHVlWzFdO1xuICAgIGVsc2VcbiAgICAgIG1ldHJpY190eXBlLnZhbHVlID0gYWN0aXZlX21ldHJpY190eXBlX2xpc3QudmFsdWVbMF07XG5cblxuICB9IGVsc2Uge1xuICAgIG1ldHJpY190eXBlLnZhbHVlID0gbWV0cmljX3R5cGVfbGlzdC52YWx1ZVswXTtcblxuICB9XG5cblxuXG59XG5cblxuY29uc3QgY2hhbmdlX21ldHJpY190eXBlX2V4cG9ydGVyID0gKCkgPT4ge1xuICBsZXQgdG1wX21ldHJpY190eXBlX2xpc3QgPSBbXTtcbiAgaWYgKChzZWxlY3RlZF9mbG93X2RldmljZV9tZXRyaWMudmFsdWUuaWQgPT0gXCJmbG93ZGV2X3BvcnQ6dXNhZ2VcIikpIHtcbiAgICBleHBvcnRlcl91c2FnZV90eXBlX2xpc3QudmFsdWUuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgaWYgKGl0ZW0ubWVhc3VyZV91bml0ID09ICdudW1iZXInKSB7XG4gICAgICAgIHRtcF9tZXRyaWNfdHlwZV9saXN0LnB1c2goaXRlbSk7XG4gICAgICB9XG4gICAgfSlcbiAgICBhY3RpdmVfbWV0cmljX3R5cGVfbGlzdC52YWx1ZSA9IHRtcF9tZXRyaWNfdHlwZV9saXN0O1xuICB9IGVsc2Uge1xuICAgIGV4cG9ydGVyX21ldHJpY190eXBlX2xpc3QudmFsdWUuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgaWYgKGl0ZW0uaWQgIT0gJ3ZhbHVlJykge1xuICAgICAgICB0bXBfbWV0cmljX3R5cGVfbGlzdC5wdXNoKGl0ZW0pO1xuICAgICAgfVxuICAgIH0pXG4gICAgYWN0aXZlX21ldHJpY190eXBlX2xpc3QudmFsdWUgPSB0bXBfbWV0cmljX3R5cGVfbGlzdDtcbiAgfVxuICBtZXRyaWNfdHlwZS52YWx1ZSA9IGFjdGl2ZV9tZXRyaWNfdHlwZV9saXN0LnZhbHVlWzBdO1xufVxuXG5cbmNvbnN0IGNoYW5nZV9tZXRyaWNfdHlwZV9ocCA9IChzZXRfYWN0aXZlX29uZSkgPT4ge1xuICBsZXQgdG1wX21ldHJpY190eXBlX2xpc3QgPSBbXTtcbiAgaWYgKChydWxlX3R5cGUudmFsdWUgPT0gXCJob3N0X3Bvb2xcIiAmJiBzZWxlY3RlZF9ob3N0X3Bvb2xfbWV0cmljLnZhbHVlLm1lYXN1cmVfdW5pdCAhPSBcImJwc1wiKSB8fCAocnVsZV90eXBlLnZhbHVlID09IFwiQ0lEUlwiICYmIHNlbGVjdGVkX25ldHdvcmtfbWV0cmljLnZhbHVlLm1lYXN1cmVfdW5pdCAhPSBcImJwc1wiKSkge1xuXG4gICAgcG9vbF9tZXRyaWNfdHlwZV9saXN0LnZhbHVlLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgIGlmIChpdGVtLm1lYXN1cmVfdW5pdCA9PSAnbnVtYmVyJykge1xuICAgICAgICB0bXBfbWV0cmljX3R5cGVfbGlzdC5wdXNoKGl0ZW0pO1xuICAgICAgfVxuICAgIH0pXG5cbiAgICBhY3RpdmVfbWV0cmljX3R5cGVfbGlzdC52YWx1ZSA9IHRtcF9tZXRyaWNfdHlwZV9saXN0O1xuXG4gIH0gZWxzZSB7XG5cbiAgICBwb29sX21ldHJpY190eXBlX2xpc3QudmFsdWUuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgaWYgKGl0ZW0uaWQgIT0gJ3ZhbHVlJykge1xuICAgICAgICB0bXBfbWV0cmljX3R5cGVfbGlzdC5wdXNoKGl0ZW0pO1xuICAgICAgfVxuICAgIH0pXG4gICAgYWN0aXZlX21ldHJpY190eXBlX2xpc3QudmFsdWUgPSB0bXBfbWV0cmljX3R5cGVfbGlzdDtcblxuICB9XG4gIGlmIChzZXRfYWN0aXZlX29uZSA9PSBudWxsIHx8IHNldF9hY3RpdmVfb25lID09IGZhbHNlKSB7XG4gICAgbWV0cmljX3R5cGUudmFsdWUgPSBhY3RpdmVfbWV0cmljX3R5cGVfbGlzdC52YWx1ZVswXTtcbiAgfVxuXG59XG5cblxuLyoqXG4gKiBcbiAqIFNldCByb3cgdG8gZWRpdCBcbiAqL1xuY29uc3Qgc2V0X3Jvd190b19lZGl0ID0gKHJvdykgPT4ge1xuXG4gIGlmIChyb3cgIT0gbnVsbCkge1xuICAgIHRpdGxlID0gX2kxOG4oJ2lmX3N0YXRzX2NvbmZpZy5lZGl0X2hvc3RfcnVsZXNfdGl0bGUnKTtcbiAgICBpc19lZGl0X3BhZ2UudmFsdWUgPSB0cnVlO1xuXG4gICAgcm93X3RvX2VkaXRfaWQudmFsdWUgPSByb3cucm93X2lkO1xuXG4gICAgZGlzYWJsZV9hZGQudmFsdWUgPSBmYWxzZTtcblxuICAgIC8vIHNldCB0aHJlc2hvbGQgc2lnblxuICAgIHNpZ25fdGhyZXNob2xkX2xpc3QudmFsdWUuZm9yRWFjaCgodCkgPT4ge1xuICAgICAgdC5hY3RpdmUgPSAodC52YWx1ZSA9PSByb3cudGhyZXNob2xkX3NpZ24pXG4gICAgfSlcblxuICAgIC8vIHNldCBtZXRyaWNfdHlwZVxuICAgIG1ldHJpY190eXBlX2xpc3QudmFsdWUuZm9yRWFjaCgodCkgPT4ge1xuICAgICAgaWYgKHQuaWQgPT0gcm93Lm1ldHJpY190eXBlKSB7XG4gICAgICAgIHQuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgbWV0cmljX3R5cGUudmFsdWUgPSB0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdC5hY3RpdmUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgYWN0aXZlX21ldHJpY190eXBlX2xpc3QudmFsdWUgPSBtZXRyaWNfdHlwZV9saXN0LnZhbHVlO1xuXG4gICAgLy8gc2V0IHRocmVzaG9sZFxuICAgIGlmIChyb3cubWV0cmljX3R5cGUgPT0gJ3ZvbHVtZScpXG4gICAgICB2b2x1bWVfdGhyZXNob2xkX2xpc3QudmFsdWUuZm9yRWFjaCgodCkgPT4ge1xuICAgICAgICBpZiAoKHJvdy50aHJlc2hvbGQgJSB0LnZhbHVlKSA9PSAwKSB7XG4gICAgICAgICAgbGV0IHJvd190aHJlc2hvbGRfdmFsdWUgPSByb3cudGhyZXNob2xkIC8gdC52YWx1ZTtcbiAgICAgICAgICBpZiAocm93X3RocmVzaG9sZF92YWx1ZSA8IDEwMjQpIHtcbiAgICAgICAgICAgIHQuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgIHRocmVzaG9sZC52YWx1ZS52YWx1ZSA9IHJvd190aHJlc2hvbGRfdmFsdWUgPT0gMCA/IDEgOiByb3dfdGhyZXNob2xkX3ZhbHVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0LmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0LmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgIGVsc2VcbiAgICAgIGlmIChyb3cubWV0cmljX3R5cGUgPT0gJ3Rocm91Z2hwdXQnKSB7XG4gICAgICAgIC8vcm93LnRocmVzaG9sZCA9IHJvdy50aHJlc2hvbGQgKiA4O1xuICAgICAgICB0aHJvdWdocHV0X3RocmVzaG9sZF9saXN0LnZhbHVlLmZvckVhY2goKHQpID0+IHtcbiAgICAgICAgICBpZiAoKHJvdy50aHJlc2hvbGQgJSB0LnZhbHVlKSA9PSAwKSB7XG4gICAgICAgICAgICBsZXQgcm93X3RocmVzaG9sZF92YWx1ZSA9IHJvdy50aHJlc2hvbGQgLyB0LnZhbHVlO1xuICAgICAgICAgICAgaWYgKHJvd190aHJlc2hvbGRfdmFsdWUgPCAxMDAwKSB7XG4gICAgICAgICAgICAgIHQuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgdGhyZXNob2xkLnZhbHVlLnZhbHVlID0gcm93X3RocmVzaG9sZF92YWx1ZSA9PSAwID8gMSA6IHJvd190aHJlc2hvbGRfdmFsdWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0LmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0LmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSBpZiAocm93Lm1ldHJpY190eXBlID09ICdwZXJjZW50YWdlJykge1xuXG4gICAgICAgIC8vcGVyY2VudGFnZSBjYXNlXG4gICAgICAgIHRocmVzaG9sZC52YWx1ZS52YWx1ZSA9IHJvdy50aHJlc2hvbGQ7XG4gICAgICB9IGVsc2UgaWYgKHJvdy5tZXRyaWNfdHlwZSA9PSAndmFsdWUnIHx8IHJvdy5tZXRyaWNfdHlwZSA9PSAnYWJzb2x1dGVfcGVyY2VudGFnZScpIHtcbiAgICAgICAgdGhyZXNob2xkLnZhbHVlLnZhbHVlID0gcm93LnRocmVzaG9sZCAqIChyb3cudGhyZXNob2xkX3NpZ24pO1xuICAgICAgfVxuXG4gICAgLy8gc2V0IHJ1bGVfdHlwZVxuICAgIHJ1bGVfdHlwZS52YWx1ZSA9IHJvdy5ydWxlX3R5cGU7XG5cbiAgICBpZiAocnVsZV90eXBlLnZhbHVlID09ICdpbnRlcmZhY2UnKSB7XG5cbiAgICAgIC8vIHNldCBpZmlkXG4gICAgICBpZmlkX2xpc3QudmFsdWUuZm9yRWFjaCgodCkgPT4ge1xuICAgICAgICBpZiAodC5pZCA9PSByb3cudGFyZ2V0KVxuICAgICAgICAgIHNlbGVjdGVkX2lmaWQudmFsdWUgPSB0O1xuICAgICAgfSlcblxuICAgICAgLy8gc2V0IG1ldHJpY1xuICAgICAgaWYgKHJvdy5leHRyYV9tZXRyaWMgIT0gbnVsbCkge1xuICAgICAgICBpbnRlcmZhY2VfbWV0cmljX2xpc3QudmFsdWUuZm9yRWFjaCgodCkgPT4ge1xuICAgICAgICAgIGlmICh0LmlkID09IHJvdy5tZXRyaWMgJiYgdC5leHRyYV9tZXRyaWMgPT0gcm93LmV4dHJhX21ldHJpYykge1xuICAgICAgICAgICAgc2VsZWN0ZWRfaW50ZXJmYWNlX21ldHJpYy52YWx1ZSA9IHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbnRlcmZhY2VfbWV0cmljX2xpc3QudmFsdWUuZm9yRWFjaCgodCkgPT4ge1xuICAgICAgICAgIGlmICh0LmlkID09IHJvdy5tZXRyaWMpIHtcbiAgICAgICAgICAgIHNlbGVjdGVkX2ludGVyZmFjZV9tZXRyaWMudmFsdWUgPSB0O1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHJ1bGVfdHlwZS52YWx1ZSA9PSAnZXhwb3J0ZXInKSB7XG4gICAgICBmbG93X2V4cG9ydGVyX2RldmljZXMudmFsdWUuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICBpZiAoaXRlbS5pZCA9PSByb3cudGFyZ2V0KVxuICAgICAgICAgIHNlbGVjdGVkX2V4cG9ydGVyX2RldmljZS52YWx1ZSA9IGl0ZW1cbiAgICAgIH0pXG4gICAgICBmbG93X2V4cG9ydGVyX2RldmljZV9pZmlkX2xpc3QudmFsdWUuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICBpZiAoaXRlbS5pZCA9PSByb3cuZmxvd19leHBfaWZpZClcbiAgICAgICAgICBzZWxlY3RlZF9leHBvcnRlcl9kZXZpY2VfaWZpZC52YWx1ZSA9IGl0ZW1cbiAgICAgIH0pXG4gICAgfSBlbHNlIGlmIChydWxlX3R5cGUudmFsdWUgPT0gJ0hvc3QnKSB7XG5cbiAgICAgIC8vc2V0IGhvc3RcbiAgICAgIGhvc3QudmFsdWUgPSByb3cudGFyZ2V0O1xuXG4gICAgICAvL3NldCBtZXRyaWNcbiAgICAgIGlmIChyb3cuZXh0cmFfbWV0cmljICE9IG51bGwpIHtcblxuICAgICAgICBtZXRyaWNfbGlzdC52YWx1ZS5mb3JFYWNoKCh0KSA9PiB7XG4gICAgICAgICAgaWYgKHJvdy5tZXRyaWMuY29udGFpbnModC5pZCkgJiYgdC5leHRyYV9tZXRyaWMgPT0gcm93LmV4dHJhX21ldHJpYylcbiAgICAgICAgICAgIHNlbGVjdGVkX21ldHJpYy52YWx1ZSA9IHQ7XG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtZXRyaWNfbGlzdC52YWx1ZS5mb3JFYWNoKCh0KSA9PiB7XG4gICAgICAgICAgaWYgKHQuaWQgPT0gcm93Lm1ldHJpYylcbiAgICAgICAgICAgIHNlbGVjdGVkX21ldHJpYy52YWx1ZSA9IHQ7XG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChydWxlX3R5cGUudmFsdWUgPT0gJ0NJRFInKSB7XG4gICAgICBuZXR3b3JrX2xpc3QudmFsdWUuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICBpZiAoaXRlbS5pZCA9PSByb3cudGFyZ2V0KSB7XG4gICAgICAgICAgc2VsZWN0ZWRfbmV0d29yay52YWx1ZSA9IGl0ZW07XG4gICAgICAgIH1cbiAgICAgIH0pXG5cbiAgICAgIG5ldHdvcmtfbWV0cmljX2xpc3QudmFsdWUuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICBpZiAoaXRlbS5sYWJlbCA9PSByb3cubWV0cmljX2xhYmVsKSB7XG4gICAgICAgICAgc2VsZWN0ZWRfbmV0d29ya19tZXRyaWMudmFsdWUgPSBpdGVtO1xuICAgICAgICB9XG4gICAgICB9KVxuXG4gICAgICBjaGFuZ2VfbWV0cmljX3R5cGVfaHAodHJ1ZSk7XG5cbiAgICAgIGFjdGl2ZV9tZXRyaWNfdHlwZV9saXN0LnZhbHVlLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgaWYgKGl0ZW0uaWQgPT0gcm93Lm1ldHJpY190eXBlKSB7XG4gICAgICAgICAgbWV0cmljX3R5cGUudmFsdWUgPSBpdGVtO1xuICAgICAgICB9XG4gICAgICB9KVxuXG5cbiAgICB9IGVsc2UgaWYgKHJ1bGVfdHlwZS52YWx1ZSA9PSAnaG9zdF9wb29sJykge1xuICAgICAgaG9zdF9wb29sX2xpc3QudmFsdWUuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICBpZiAoaXRlbS5pZCA9PSByb3cudGFyZ2V0KSB7XG4gICAgICAgICAgc2VsZWN0ZWRfaG9zdF9wb29sLnZhbHVlID0gaXRlbTtcbiAgICAgICAgfVxuICAgICAgfSlcblxuICAgICAgaG9zdF9wb29sX21ldHJpY19saXN0LnZhbHVlLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgaWYgKGl0ZW0ubGFiZWwgPT0gcm93Lm1ldHJpY19sYWJlbCkge1xuICAgICAgICAgIHNlbGVjdGVkX2hvc3RfcG9vbF9tZXRyaWMudmFsdWUgPSBpdGVtO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgY2hhbmdlX21ldHJpY190eXBlX2hwKCk7XG5cbiAgICAgIGFjdGl2ZV9tZXRyaWNfdHlwZV9saXN0LnZhbHVlLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgaWYgKGl0ZW0uaWQgPT0gcm93Lm1ldHJpY190eXBlKSB7XG4gICAgICAgICAgbWV0cmljX3R5cGUudmFsdWUgPSBpdGVtO1xuICAgICAgICB9XG4gICAgICB9KVxuXG4gICAgfSBlbHNlIGlmIChydWxlX3R5cGUudmFsdWUgPT0gJ3ZsYW4nKSB7XG4gICAgICBzZWxlY3RlZF92bGFuLnZhbHVlID0gdmxhbl9saXN0LnZhbHVlLmZpbmQoKGl0ZW0pID0+IGl0ZW0uaWQgPT0gcm93LnRhcmdldCk7XG4gICAgICBcbiAgICAgIHZsYW5fbWV0cmljX2xpc3QudmFsdWUuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICBpZihpdGVtLnNjaGVtYSA9PSByb3cubWV0cmljKSB7XG4gICAgICAgICAgc2VsZWN0ZWRfdmxhbl9tZXRyaWMudmFsdWUgPSBpdGVtO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgIH1cbiAgfVxufVxuXG5jb25zdCBzaG93ID0gKHJvdykgPT4ge1xuICBpZiAocm93ICE9IG51bGwpIHtcbiAgICBzZXRfcm93X3RvX2VkaXQocm93KTtcbiAgfSBlbHNlIHtcbiAgICByZXNldF9tb2RhbF9mb3JtKCk7XG4gIH1cblxuXG4gIG1vZGFsX2lkLnZhbHVlLnNob3coKTtcbn07XG5cbmNvbnN0IGNoYW5nZV90aHJlc2hvbGQgPSAoKSA9PiB7XG4gIChzZWxlY3RlZF9tZXRyaWMudmFsdWUuc2hvd192b2x1bWUgPT0gdHJ1ZSkgPyB2aXNpYmxlLnZhbHVlID0gdHJ1ZSA6IHZpc2libGUudmFsdWUgPSBmYWxzZVxufVxuXG5jb25zdCBjaGFuZ2VfaW50ZXJmYWNlX3RocmVzaG9sZCA9ICgpID0+IHtcbiAgKHNlbGVjdGVkX2ludGVyZmFjZV9tZXRyaWMudmFsdWUuc2hvd192b2x1bWUgPT0gdHJ1ZSkgPyB2aXNpYmxlLnZhbHVlID0gdHJ1ZSA6IHZpc2libGUudmFsdWUgPSBmYWxzZVxufVxuXG5jb25zdCBjaGFuZ2Vfdmxhbl90aHJlc2hvbGQgPSAoKSA9PiB7XG4gIChzZWxlY3RlZF92bGFuX21ldHJpYy52YWx1ZS5zaG93X3ZvbHVtZSA9PSB0cnVlKSA/IHZpc2libGUudmFsdWUgPSB0cnVlIDogdmlzaWJsZS52YWx1ZSA9IGZhbHNlXG59XG5cbmNvbnN0IGNoZWNrX2VtcHR5X2hvc3QgPSAoKSA9PiB7XG4gIGxldCByZWdleCA9IG5ldyBSZWdFeHAocmVnZXhWYWxpZGF0aW9uLmdldF9kYXRhX3BhdHRlcm4oJ2lwJykpO1xuICBkaXNhYmxlX2FkZC52YWx1ZSA9ICEocmVnZXgudGVzdChob3N0LnZhbHVlKSB8fCBob3N0LnZhbHVlID09PSAnKicpO1xufVxuXG5jb25zdCBzZXRfYWN0aXZlX3NpZ25fcmFkaW8gPSAoc2VsZWN0ZWRfcmFkaW8pID0+IHtcbiAgY29uc3QgaWQgPSBzZWxlY3RlZF9yYWRpby50YXJnZXQuaWQ7XG4gIHNpZ25fdGhyZXNob2xkX2xpc3QudmFsdWUuZm9yRWFjaCgobWVhc3VyZSkgPT4ge1xuICAgIChtZWFzdXJlLmlkID09PSBpZCkgPyBtZWFzdXJlLmFjdGl2ZSA9IHRydWUgOiBtZWFzdXJlLmFjdGl2ZSA9IGZhbHNlO1xuICB9KVxuXG59XG5cbi8qKlxuICogXG4gKiBTZXQgdGhlIG1ldHJpYyB0eXBlXG4gKi9cbmNvbnN0IHNldF9hY3RpdmVfcmFkaW8gPSAoc2VsZWN0ZWRfcmFkaW8pID0+IHtcbiAgY29uc3QgaWQgPSBzZWxlY3RlZF9yYWRpby50YXJnZXQuaWQ7XG5cbiAgaWYgKG1ldHJpY190eXBlLnZhbHVlLmlkID09ICd0aHJvdWdocHV0Jykge1xuICAgIHRocm91Z2hwdXRfdGhyZXNob2xkX2xpc3QudmFsdWUuZm9yRWFjaCgobWVhc3VyZSkgPT4ge1xuICAgICAgKG1lYXN1cmUuaWQgPT09IGlkKSA/IG1lYXN1cmUuYWN0aXZlID0gdHJ1ZSA6IG1lYXN1cmUuYWN0aXZlID0gZmFsc2U7XG4gICAgfSlcbiAgfSBlbHNlIGlmIChtZXRyaWNfdHlwZS52YWx1ZS5pZCA9PSAndm9sdW1lJykge1xuICAgIHZvbHVtZV90aHJlc2hvbGRfbGlzdC52YWx1ZS5mb3JFYWNoKChtZWFzdXJlKSA9PiB7XG4gICAgICAobWVhc3VyZS5pZCA9PT0gaWQpID8gbWVhc3VyZS5hY3RpdmUgPSB0cnVlIDogbWVhc3VyZS5hY3RpdmUgPSBmYWxzZTtcbiAgICB9KVxuICB9IGVsc2UgaWYgKG1ldHJpY190eXBlLnZhbHVlLmlkID09ICdwZXJjZW50YWdlJykge1xuICAgIHBlcmNlbnRhZ2VfdGhyZXNob2xkX2xpc3QuZm9yRWFjaCgobWVhc3VyZSkgPT4ge1xuICAgICAgKG1lYXN1cmUuaWQgPT09IGlkKSA/IG1lYXN1cmUuYWN0aXZlID0gdHJ1ZSA6IG1lYXN1cmUuYWN0aXZlID0gZmFsc2U7XG4gICAgfSlcbiAgfVxuXG59XG5cblxuLyoqXG4gKiBGdW5jdGlvbiB0byBhZGQgcnVsZSB0byBydWxlcyBsaXN0XG4gKi9cbmNvbnN0IGFkZF8gPSAoaXNfZWRpdCkgPT4ge1xuICBsZXQgdG1wX2hvc3QgPSAnJ1xuICBpZiAocnVsZV90eXBlLnZhbHVlICE9ICdpbnRlcmZhY2UnKVxuICAgIHRtcF9ob3N0ID0gaG9zdC52YWx1ZTtcblxuICBjb25zdCB0bXBfZnJlcXVlbmN5ID0gc2VsZWN0ZWRfZnJlcXVlbmN5LnZhbHVlLmlkO1xuICBsZXQgdG1wX21ldHJpYyA9IHNlbGVjdGVkX21ldHJpYy52YWx1ZS5pZDtcbiAgbGV0IHRtcF9tZXRyaWNfbGFiZWwgPSBzZWxlY3RlZF9tZXRyaWMudmFsdWUubGFiZWw7XG4gXG4gIGNvbnN0IHRtcF9ydWxlX3R5cGUgPSBydWxlX3R5cGUudmFsdWU7XG5cbiAgbGV0IHRtcF9tZXRyaWNfdHlwZSA9IG1ldHJpY190eXBlLnZhbHVlLmlkO1xuICBsZXQgdG1wX2V4dHJhX21ldHJpYyBcbiAgbGV0IGJhc2ljX3ZhbHVlO1xuICBsZXQgYmFzaWNfc2lnbl92YWx1ZTtcbiAgbGV0IHRtcF90aHJlc2hvbGQ7XG4gIGxldCB0bXBfc2lnbl92YWx1ZTtcblxuICBsZXQgdG1wX2VkaXRfcm93X2lkID0gKGlzX2VkaXQpID8gcm93X3RvX2VkaXRfaWQudmFsdWUgOiBudWxsO1xuXG4gIGlmICh2aXNpYmxlLnZhbHVlID09PSBmYWxzZSkge1xuICAgIHRtcF9tZXRyaWNfdHlwZSA9ICcnXG4gICAgdG1wX2V4dHJhX21ldHJpYyA9ICcnXG4gICAgdG1wX3RocmVzaG9sZCA9IHRocmVzaG9sZC52YWx1ZS52YWx1ZTtcbiAgfVxuXG5cbiAgaWYgKHRtcF9tZXRyaWNfdHlwZSA9PSAndGhyb3VnaHB1dCcpIHtcbiAgICBzaWduX3RocmVzaG9sZF9saXN0LnZhbHVlLmZvckVhY2goKG1lYXN1cmUpID0+IHsgaWYgKG1lYXN1cmUuYWN0aXZlKSBiYXNpY19zaWduX3ZhbHVlID0gbWVhc3VyZS52YWx1ZTsgfSlcbiAgICB0bXBfc2lnbl92YWx1ZSA9IHBhcnNlSW50KGJhc2ljX3NpZ25fdmFsdWUpO1xuICAgIHRocm91Z2hwdXRfdGhyZXNob2xkX2xpc3QudmFsdWUuZm9yRWFjaCgobWVhc3VyZSkgPT4geyBpZiAobWVhc3VyZS5hY3RpdmUpIGJhc2ljX3ZhbHVlID0gbWVhc3VyZS52YWx1ZTsgfSlcbiAgICB0bXBfdGhyZXNob2xkID0gYmFzaWNfdmFsdWUgKiBwYXJzZUludCh0aHJlc2hvbGQudmFsdWUudmFsdWUpO1xuICAgIC8qIFRoZSB0aHJvdWdocHV0IGlzIGluIGJpdCwgdGhlIHZvbHVtZSBpbiBCeXRlcyEhICovXG4gIH0gZWxzZSBpZiAodG1wX21ldHJpY190eXBlID09ICd2b2x1bWUnKSB7XG4gICAgc2lnbl90aHJlc2hvbGRfbGlzdC52YWx1ZS5mb3JFYWNoKChtZWFzdXJlKSA9PiB7IGlmIChtZWFzdXJlLmFjdGl2ZSkgYmFzaWNfc2lnbl92YWx1ZSA9IG1lYXN1cmUudmFsdWU7IH0pXG4gICAgdG1wX3NpZ25fdmFsdWUgPSBwYXJzZUludChiYXNpY19zaWduX3ZhbHVlKTtcbiAgICB2b2x1bWVfdGhyZXNob2xkX2xpc3QudmFsdWUuZm9yRWFjaCgobWVhc3VyZSkgPT4geyBpZiAobWVhc3VyZS5hY3RpdmUpIGJhc2ljX3ZhbHVlID0gbWVhc3VyZS52YWx1ZTsgfSlcbiAgICB0bXBfdGhyZXNob2xkID0gYmFzaWNfdmFsdWUgKiBwYXJzZUludCh0aHJlc2hvbGQudmFsdWUudmFsdWUpO1xuICB9IGVsc2UgaWYgKHRtcF9tZXRyaWNfdHlwZSA9PSAncGVyY2VudGFnZScpIHtcbiAgICBzaWduX3RocmVzaG9sZF9saXN0LnZhbHVlLmZvckVhY2goKG1lYXN1cmUpID0+IHsgaWYgKG1lYXN1cmUuYWN0aXZlKSBiYXNpY19zaWduX3ZhbHVlID0gbWVhc3VyZS52YWx1ZTsgfSlcbiAgICB0bXBfc2lnbl92YWx1ZSA9IHBhcnNlSW50KGJhc2ljX3NpZ25fdmFsdWUpO1xuICAgIHRtcF90aHJlc2hvbGQgPSBwYXJzZUludCh0aHJlc2hvbGQudmFsdWUudmFsdWUpO1xuICB9IGVsc2UgaWYgKHRtcF9tZXRyaWNfdHlwZSA9PSAndmFsdWUnIHx8IHRtcF9tZXRyaWNfdHlwZSA9PSAnYWJzb2x1dGVfcGVyY2VudGFnZScpIHtcbiAgICBzaWduX3RocmVzaG9sZF9saXN0LnZhbHVlLmZvckVhY2goKG1lYXN1cmUpID0+IHsgaWYgKG1lYXN1cmUuYWN0aXZlKSBiYXNpY19zaWduX3ZhbHVlID0gbWVhc3VyZS52YWx1ZTsgfSlcbiAgICB0bXBfc2lnbl92YWx1ZSA9IHBhcnNlSW50KGJhc2ljX3NpZ25fdmFsdWUpO1xuICAgIHRtcF90aHJlc2hvbGQgPSB0bXBfc2lnbl92YWx1ZSAqIHBhcnNlSW50KHRocmVzaG9sZC52YWx1ZS52YWx1ZSk7XG4gIH1cbiAgbGV0IGVtaXRfbmFtZSA9ICdhZGQnO1xuXG4gIGlmIChpc19lZGl0ID09IHRydWUpXG4gICAgZW1pdF9uYW1lID0gJ2VkaXQnO1xuXG5cbiAgaWYgKHJ1bGVfdHlwZS52YWx1ZSA9PSAnSG9zdCcpIHtcblxuICAgIHRtcF9leHRyYV9tZXRyaWMgPSAoc2VsZWN0ZWRfbWV0cmljLnZhbHVlLmV4dHJhX21ldHJpYykgPyBzZWxlY3RlZF9tZXRyaWMudmFsdWUuZXh0cmFfbWV0cmljIDogbnVsbDtcblxuICAgIGVtaXQoZW1pdF9uYW1lLCB7XG4gICAgICBob3N0OiB0bXBfaG9zdCxcbiAgICAgIGZyZXF1ZW5jeTogdG1wX2ZyZXF1ZW5jeSxcbiAgICAgIG1ldHJpYzogdG1wX21ldHJpYyxcbiAgICAgIG1ldHJpY19sYWJlbDogdG1wX21ldHJpY19sYWJlbCxcbiAgICAgIHRocmVzaG9sZDogdG1wX3RocmVzaG9sZCxcbiAgICAgIG1ldHJpY190eXBlOiB0bXBfbWV0cmljX3R5cGUsXG4gICAgICBleHRyYV9tZXRyaWM6IHRtcF9leHRyYV9tZXRyaWMsXG4gICAgICBydWxlX3R5cGU6IHRtcF9ydWxlX3R5cGUsXG4gICAgICBydWxlX3RocmVzaG9sZF9zaWduOiB0bXBfc2lnbl92YWx1ZSxcbiAgICAgIHJ1bGVfaWQ6IHRtcF9lZGl0X3Jvd19pZFxuXG4gICAgfSk7XG4gIH0gZWxzZSBpZiAocnVsZV90eXBlLnZhbHVlID09ICdpbnRlcmZhY2UnKSB7XG4gICAgdG1wX2V4dHJhX21ldHJpYyA9ICgoc2VsZWN0ZWRfaW50ZXJmYWNlX21ldHJpYy52YWx1ZS5leHRyYV9tZXRyaWMpID8gc2VsZWN0ZWRfaW50ZXJmYWNlX21ldHJpYy52YWx1ZS5leHRyYV9tZXRyaWMgOiBudWxsKVxuICAgIHRtcF9tZXRyaWMgPSBzZWxlY3RlZF9pbnRlcmZhY2VfbWV0cmljLnZhbHVlLmlkXG4gICAgdG1wX21ldHJpY19sYWJlbCA9IHNlbGVjdGVkX2ludGVyZmFjZV9tZXRyaWMudmFsdWUubGFiZWw7XG4gICAgY29uc3QgdG1wX2ludGVyZmFjZV9tZXRyaWMgPSBzZWxlY3RlZF9pbnRlcmZhY2VfbWV0cmljLnZhbHVlLmlkO1xuICAgIGNvbnN0IHRtcF9pbnRlcmZhY2UgPSBzZWxlY3RlZF9pZmlkLnZhbHVlLmlkO1xuICAgIGVtaXQoZW1pdF9uYW1lLCB7XG4gICAgICBmcmVxdWVuY3k6IHRtcF9mcmVxdWVuY3ksXG4gICAgICBtZXRyaWM6IHRtcF9pbnRlcmZhY2VfbWV0cmljLFxuICAgICAgbWV0cmljX2xhYmVsOiB0bXBfbWV0cmljX2xhYmVsLFxuICAgICAgdGhyZXNob2xkOiB0bXBfdGhyZXNob2xkLFxuICAgICAgbWV0cmljX3R5cGU6IHRtcF9tZXRyaWNfdHlwZSxcbiAgICAgIGV4dHJhX21ldHJpYzogdG1wX2V4dHJhX21ldHJpYyxcbiAgICAgIHJ1bGVfdHlwZTogdG1wX3J1bGVfdHlwZSxcbiAgICAgIGludGVyZmFjZTogdG1wX2ludGVyZmFjZSxcbiAgICAgIHJ1bGVfdGhyZXNob2xkX3NpZ246IHRtcF9zaWduX3ZhbHVlLFxuICAgICAgcnVsZV9pZDogdG1wX2VkaXRfcm93X2lkXG5cbiAgICB9KTtcbiAgfSBlbHNlIGlmIChydWxlX3R5cGUudmFsdWUgPT0gXCJleHBvcnRlclwiKSB7XG4gICAgbGV0IGZsb3dfZGV2aWNlX2lmaW5kZXggPSBzZWxlY3RlZF9leHBvcnRlcl9kZXZpY2VfaWZpZC52YWx1ZS5pZDtcbiAgICBjb25zdCBmbG93X2RldmljZV9pZmluZGV4X25hbWUgPSBzZWxlY3RlZF9leHBvcnRlcl9kZXZpY2VfaWZpZC52YWx1ZS5sYWJlbDtcbiAgICBjb25zdCBmbG93X2RldmljZV9pcCA9IHNlbGVjdGVkX2V4cG9ydGVyX2RldmljZS52YWx1ZS5pZDtcbiAgICBpZiAoZmxvd19kZXZpY2VfaXAgPT0gJyonKSBcbiAgICAgIGZsb3dfZGV2aWNlX2lmaW5kZXggPSAnKic7XG4gICAgY29uc3QgaWZpZCA9IHNlbGVjdGVkX2V4cG9ydGVyX2RldmljZS52YWx1ZS5pZmlkO1xuICAgIGxldCBtZXRyaWNfZXhwO1xuXG4gICAgaWYgKCFzZWxlY3RlZF9mbG93X2RldmljZV9tZXRyaWMudmFsdWUuaWQpIHtcbiAgICAgIG1ldHJpY19leHAgPSBmbG93X2RldmljZV9tZXRyaWNfbGlzdC52YWx1ZS5maW5kKChpdGVtKSA9PiBpdGVtLmlkID09PSBudWxsKTtcbiAgICAgIC8qIEluIGNhc2Ugbm8gbWV0cmljIGlkIGlzIGZvdW5kLCBpdCBtZWFucyBpdCdzIHRoZSB0cmFmZmljIG9uZSAqL1xuICAgICAgaWYgKGZsb3dfZGV2aWNlX2lmaW5kZXggIT0gbnVsbCAmJiBmbG93X2RldmljZV9pZmluZGV4ICE9ICcqJykge1xuICAgICAgICBtZXRyaWNfZXhwID0gc2VsZWN0ZWRfZmxvd19kZXZpY2VfbWV0cmljLnZhbHVlO1xuICAgICAgICBtZXRyaWNfZXhwLmlkID0gXCJmbG93ZGV2X3BvcnQ6dHJhZmZpY1wiO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIG1ldHJpY19leHAgPSBzZWxlY3RlZF9mbG93X2RldmljZV9tZXRyaWMudmFsdWU7XG4gICAgICAgIG1ldHJpY19leHAuaWQgPSBcImZsb3dkZXY6dHJhZmZpY1wiO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBtZXRyaWNfZXhwID0gZmxvd19kZXZpY2VfbWV0cmljX2xpc3QudmFsdWUuZmluZCgoaXRlbSkgPT4gaXRlbS5pZCA9PSBzZWxlY3RlZF9mbG93X2RldmljZV9tZXRyaWMudmFsdWUuaWQpXG4gICAgfVxuXG5cbiAgICBsZXQgbWV0cmljX2V4cF9sYWJlbCA9IG1ldHJpY19leHAubGFiZWw7XG5cbiAgICBlbWl0KGVtaXRfbmFtZSwge1xuICAgICAgaG9zdDogZmxvd19kZXZpY2VfaXAsXG4gICAgICBmcmVxdWVuY3k6IHRtcF9mcmVxdWVuY3ksXG4gICAgICBtZXRyaWM6IG1ldHJpY19leHAuaWQsXG4gICAgICBtZXRyaWNfbGFiZWw6IG1ldHJpY19leHBfbGFiZWwsXG4gICAgICB0aHJlc2hvbGQ6IHRtcF90aHJlc2hvbGQsXG4gICAgICBtZXRyaWNfdHlwZTogdG1wX21ldHJpY190eXBlLFxuICAgICAgcnVsZV90eXBlOiB0bXBfcnVsZV90eXBlLFxuICAgICAgaW50ZXJmYWNlOiBmbG93X2RldmljZV9pZmluZGV4LFxuICAgICAgcnVsZV9pZmlkOiBpZmlkLFxuICAgICAgcnVsZV90aHJlc2hvbGRfc2lnbjogdG1wX3NpZ25fdmFsdWUsXG4gICAgICBydWxlX2lkOiB0bXBfZWRpdF9yb3dfaWRcbiAgICAgIFxuICAgIH0pO1xuICB9IGVsc2UgaWYgKHJ1bGVfdHlwZS52YWx1ZSA9PSBcIkNJRFJcIikge1xuXG4gICAgdG1wX21ldHJpYyA9IHNlbGVjdGVkX25ldHdvcmtfbWV0cmljLnZhbHVlLnNjaGVtYTtcbiAgICB0bXBfbWV0cmljX2xhYmVsID0gc2VsZWN0ZWRfbmV0d29ya19tZXRyaWMudmFsdWUubGFiZWw7XG4gICAgdG1wX2hvc3QgPSBzZWxlY3RlZF9uZXR3b3JrLnZhbHVlLmlkO1xuICAgIGNvbnN0IG5ldHdvcmtfaWQgPSBzZWxlY3RlZF9uZXR3b3JrLnZhbHVlLm5ldHdvcmtfaWQ7XG4gICAgZW1pdChlbWl0X25hbWUsIHtcbiAgICAgIGhvc3Q6IHRtcF9ob3N0LFxuICAgICAgZnJlcXVlbmN5OiB0bXBfZnJlcXVlbmN5LFxuICAgICAgbWV0cmljOiB0bXBfbWV0cmljLFxuICAgICAgbWV0cmljX2xhYmVsOiB0bXBfbWV0cmljX2xhYmVsLFxuICAgICAgdGhyZXNob2xkOiB0bXBfdGhyZXNob2xkLFxuICAgICAgbWV0cmljX3R5cGU6IHRtcF9tZXRyaWNfdHlwZSxcbiAgICAgIGV4dHJhX21ldHJpYzogdG1wX2V4dHJhX21ldHJpYyxcbiAgICAgIHJ1bGVfdHlwZTogdG1wX3J1bGVfdHlwZSxcbiAgICAgIHJ1bGVfdGhyZXNob2xkX3NpZ246IHRtcF9zaWduX3ZhbHVlLFxuICAgICAgcnVsZV9pZDogdG1wX2VkaXRfcm93X2lkLFxuICAgICAgbmV0d29yazogbmV0d29ya19pZFxuXG4gICAgfSk7XG4gIH0gZWxzZSBpZiAocnVsZV90eXBlLnZhbHVlID09IFwiaG9zdF9wb29sXCIpIHtcblxuICAgIHRtcF9tZXRyaWMgPSBzZWxlY3RlZF9ob3N0X3Bvb2xfbWV0cmljLnZhbHVlLnNjaGVtYTtcbiAgICB0bXBfbWV0cmljX2xhYmVsID0gc2VsZWN0ZWRfaG9zdF9wb29sX21ldHJpYy52YWx1ZS5sYWJlbDtcbiAgICBjb25zdCB0bXBfaG9zdF9wb29sX2lkID0gc2VsZWN0ZWRfaG9zdF9wb29sLnZhbHVlLmlkO1xuICAgIGNvbnN0IHRtcF9ob3N0X3Bvb2xfbGFiZWwgPSBzZWxlY3RlZF9ob3N0X3Bvb2wudmFsdWUubGFiZWw7XG5cbiAgICBlbWl0KGVtaXRfbmFtZSwge1xuICAgICAgaG9zdF9wb29sX2lkOiB0bXBfaG9zdF9wb29sX2lkLFxuICAgICAgaG9zdF9wb29sX2xhYmVsOiB0bXBfaG9zdF9wb29sX2xhYmVsLFxuICAgICAgZnJlcXVlbmN5OiB0bXBfZnJlcXVlbmN5LFxuICAgICAgbWV0cmljOiB0bXBfbWV0cmljLFxuICAgICAgbWV0cmljX2xhYmVsOiB0bXBfbWV0cmljX2xhYmVsLFxuICAgICAgdGhyZXNob2xkOiB0bXBfdGhyZXNob2xkLFxuICAgICAgbWV0cmljX3R5cGU6IHRtcF9tZXRyaWNfdHlwZSxcbiAgICAgIGV4dHJhX21ldHJpYzogdG1wX2V4dHJhX21ldHJpYyxcbiAgICAgIHJ1bGVfdHlwZTogdG1wX3J1bGVfdHlwZSxcbiAgICAgIHJ1bGVfdGhyZXNob2xkX3NpZ246IHRtcF9zaWduX3ZhbHVlLFxuICAgICAgcnVsZV9pZDogdG1wX2VkaXRfcm93X2lkXG5cbiAgICB9KTtcblxuICB9IGVsc2UgaWYgKHJ1bGVfdHlwZS52YWx1ZSA9PSBcInZsYW5cIikge1xuXG4gICAgdG1wX21ldHJpYyA9IHNlbGVjdGVkX3ZsYW5fbWV0cmljLnZhbHVlLnNjaGVtYTtcbiAgICB0bXBfbWV0cmljX2xhYmVsID0gc2VsZWN0ZWRfdmxhbl9tZXRyaWMudmFsdWUubGFiZWw7XG4gICAgY29uc3QgdG1wX3ZsYW5faWQgPSBzZWxlY3RlZF92bGFuLnZhbHVlLmlkO1xuICAgIGNvbnN0IHRtcF92bGFuX2xhYmVsID0gc2VsZWN0ZWRfdmxhbi52YWx1ZS5sYWJlbDtcblxuICAgIGVtaXQoZW1pdF9uYW1lLCB7XG4gICAgICB2bGFuX2lkOiB0bXBfdmxhbl9pZCxcbiAgICAgIHZsYW5fbGFiZWw6IHRtcF92bGFuX2xhYmVsLFxuICAgICAgZnJlcXVlbmN5OiB0bXBfZnJlcXVlbmN5LFxuICAgICAgbWV0cmljOiB0bXBfbWV0cmljLFxuICAgICAgbWV0cmljX2xhYmVsOiB0bXBfbWV0cmljX2xhYmVsLFxuICAgICAgdGhyZXNob2xkOiB0bXBfdGhyZXNob2xkLFxuICAgICAgbWV0cmljX3R5cGU6IHRtcF9tZXRyaWNfdHlwZSxcbiAgICAgIGV4dHJhX21ldHJpYzogdG1wX2V4dHJhX21ldHJpYyxcbiAgICAgIHJ1bGVfdHlwZTogdG1wX3J1bGVfdHlwZSxcbiAgICAgIHJ1bGVfdGhyZXNob2xkX3NpZ246IHRtcF9zaWduX3ZhbHVlLFxuICAgICAgcnVsZV9pZDogdG1wX2VkaXRfcm93X2lkXG5cbiAgICB9KTtcbiAgfVxuXG59O1xuXG5cbmNvbnN0IGVkaXRfID0gKCkgPT4ge1xuICBhZGRfKHRydWUpO1xufVxuXG5jb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgaXNfZWRpdF9wYWdlLnZhbHVlID0gZmFsc2U7XG4gIGludmFsaWRfYWRkLnZhbHVlID0gZmFsc2U7XG4gIG1vZGFsX2lkLnZhbHVlLmNsb3NlKCk7XG59O1xuXG5jb25zdCBpbnZhbGlkQWRkID0gKCkgPT4ge1xuICBpbnZhbGlkX2FkZC52YWx1ZSA9IHRydWU7XG59O1xuXG5jb25zdCBjb21wYXJlX2xhYmVscyA9IGZ1bmN0aW9uIChhLGIpIHtcbiAgbGV0IHggPSBhLmxhYmVsLnRvTG93ZXJDYXNlKCk7XG4gIGxldCB5ID0gYi5sYWJlbC50b0xvd2VyQ2FzZSgpO1xuXG4gIGlmICh4IDwgeSkgeyByZXR1cm4gLTE7IH1cbiAgaWYgKHggPiB5KSB7IHJldHVybiAxOyB9XG4gIHJldHVybiAwO1xufVxuXG4vKipcbiAqIFxuICogRnVuY3Rpb24gdG8gZm9ybWF0IGlmaWQgbGlzdFxuICovXG5jb25zdCBmb3JtYXRfaWZpZF9saXN0ID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgbGV0IF9pZmlkX2xpc3QgPSBbXVxuICBkYXRhLmZvckVhY2goKGlmaWQpID0+IHtcbiAgICBsZXQgaXRlbSA9IHsgaWQ6IGlmaWQuaWZpZCwgbGFiZWw6IGlmaWQubmFtZSB9O1xuICAgIF9pZmlkX2xpc3QucHVzaChpdGVtKTtcbiAgfSlcbiAgX2lmaWRfbGlzdC5zb3J0KChhLCBiKSA9PiBjb21wYXJlX2xhYmVscyhhLGIpKTtcbiAgcmV0dXJuIF9pZmlkX2xpc3Rcbn1cblxuY29uc3QgbWV0cmljc0xvYWRlZCA9IGFzeW5jIChfbWV0cmljX2xpc3QsIF9pZmlkX2xpc3QsIF9pbnRlcmZhY2VfbWV0cmljX2xpc3QsIF9mbG93X2V4cG9ydGVyX2RldmljZXMsIF9mbG93X2V4cG9ydGVyX2RldmljZXNfbWV0cmljX2xpc3QsIHBhZ2VfY3NyZiwgX2luaXRfZnVuYywgX2RlbGV0ZV9yb3csIF9ob3N0X3Bvb2xfbGlzdCwgX25ldHdvcmtfbGlzdCwgX2hvc3RfcG9vbF9tZXRyaWNfbGlzdCwgX25ldHdvcmtfbWV0cmljX2xpc3QsIF92bGFuX2xpc3QsIF92bGFuX21ldHJpY19saXN0KSA9PiB7XG4gIG1ldHJpY3NfcmVhZHkudmFsdWUgPSB0cnVlO1xuICBtZXRyaWNfbGlzdC52YWx1ZSA9IF9tZXRyaWNfbGlzdDtcbiAgaW50ZXJmYWNlX21ldHJpY19saXN0LnZhbHVlID0gX2ludGVyZmFjZV9tZXRyaWNfbGlzdDtcbiAgaWZpZF9saXN0LnZhbHVlID0gZm9ybWF0X2lmaWRfbGlzdChfaWZpZF9saXN0KTtcblxuICBmcmVxdWVuY3lfbGlzdC52YWx1ZSA9IHByb3BzLmZyZXF1ZW5jeV9saXN0O1xuICBzZWxlY3RlZF9mcmVxdWVuY3kudmFsdWUgPSBmcmVxdWVuY3lfbGlzdC52YWx1ZVswXTtcbiAgc2VsZWN0ZWRfbWV0cmljLnZhbHVlID0gbWV0cmljX2xpc3QudmFsdWVbMF07XG4gIHNlbGVjdGVkX2lmaWQudmFsdWUgPSBpZmlkX2xpc3QudmFsdWVbMF07XG4gIHBhZ2VfY3NyZl8udmFsdWUgPSBwYWdlX2NzcmY7XG4gIGlmIChfaW5pdF9mdW5jKSB7XG4gICAgaW5pdF9mdW5jLnZhbHVlID0gX2luaXRfZnVuYztcbiAgfVxuXG4gIGlmIChfZGVsZXRlX3Jvdykge1xuICAgIGRlbGV0ZV9yb3cudmFsdWUgPSBfZGVsZXRlX3JvdztcbiAgfVxuXG4gIGZsb3dfZXhwb3J0ZXJfZGV2aWNlcy52YWx1ZSA9IGZvcm1hdF9mbG93X2V4cG9ydGVyX2RldmljZV9saXN0KF9mbG93X2V4cG9ydGVyX2RldmljZXMpO1xuXG4gIGlmICghZGF0YVV0aWxzLmlzRW1wdHlBcnJheU9yTnVsbChfaG9zdF9wb29sX2xpc3QpKSB7XG4gICAgaGFzX2hvc3RfcG9vbHMudmFsdWUgPSB0cnVlO1xuICB9XG4gIGhvc3RfcG9vbF9saXN0LnZhbHVlID0gX2hvc3RfcG9vbF9saXN0O1xuICBob3N0X3Bvb2xfbWV0cmljX2xpc3QudmFsdWUgPSBfaG9zdF9wb29sX21ldHJpY19saXN0O1xuXG4gIGlmICghZGF0YVV0aWxzLmlzRW1wdHlBcnJheU9yTnVsbChfbmV0d29ya19saXN0KSkge1xuICAgIGhhc19jaWRyLnZhbHVlID0gdHJ1ZTtcbiAgfVxuICBuZXR3b3JrX2xpc3QudmFsdWUgPSBfbmV0d29ya19saXN0O1xuICBuZXR3b3JrX21ldHJpY19saXN0LnZhbHVlID0gX25ldHdvcmtfbWV0cmljX2xpc3Q7XG4gIGZsb3dfZGV2aWNlX21ldHJpY19saXN0LnZhbHVlID0gX2Zsb3dfZXhwb3J0ZXJfZGV2aWNlc19tZXRyaWNfbGlzdDtcblxuICBzZWxlY3RlZF9leHBvcnRlcl9kZXZpY2UudmFsdWUgPSBmbG93X2V4cG9ydGVyX2RldmljZXMudmFsdWVbMV07XG4gIGlmIChzZWxlY3RlZF9leHBvcnRlcl9kZXZpY2UudmFsdWUgIT0gbnVsbCkge1xuICAgIHVwZGF0ZV9leHBvcnRlcl9pbnRlcmZhY2VzKClcbiAgfVxuICBpZiAocHJvcHMuaGFzX3ZsYW5zKSB7XG4gICAgdmxhbl9saXN0LnZhbHVlID0gZm9ybWF0X3ZsYW5fbGlzdChfdmxhbl9saXN0KTtcbiAgICBzZWxlY3RlZF92bGFuLnZhbHVlID0gdmxhbl9saXN0LnZhbHVlWzBdO1xuICAgIHZsYW5fbWV0cmljX2xpc3QudmFsdWUgPSBfdmxhbl9tZXRyaWNfbGlzdDtcbiAgICBzZWxlY3RlZF92bGFuX21ldHJpYy52YWx1ZSA9IHZsYW5fbWV0cmljX2xpc3QudmFsdWVbMV07XG4gIH1cbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIFRoaXMgZnVuY3Rpb24gdXBkYXRlcyB0aGUgZXhwb3J0ZXIgaW50ZXJmYWNlcyBsaXN0LCBcbiAqIGJ5IHJlcXVlc3RpbmcgdG8gdGhlIGJhY2sgZW5kIHRoZSBsaXN0IG9mIGludGVyZmFjZXMgZm9yIHRoZSBzZWxlY3RlZCBleHBvcnRlciBcbiAqL1xuYXN5bmMgZnVuY3Rpb24gdXBkYXRlX2V4cG9ydGVyX2ludGVyZmFjZXMoKSB7XG4gIGxldCBpbnRlcmZhY2VzX2xpc3QgPSBbXTtcbiAgaWYgKHNlbGVjdGVkX2V4cG9ydGVyX2RldmljZS52YWx1ZS5pZCA9PSAnKicpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgdXJsX2RldmljZV9leHBvcnRlcl9kZXRhaWxzID1cbiAgICBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvZmxvd2RldmljZS9zdGF0cy5sdWE/aXA9JHtzZWxlY3RlZF9leHBvcnRlcl9kZXZpY2UudmFsdWUuaWR9JmlmaWQ9JHtzZWxlY3RlZF9leHBvcnRlcl9kZXZpY2UudmFsdWUuaWZpZH1gKTtcblxuICBhd2FpdCAkLmdldCh1cmxfZGV2aWNlX2V4cG9ydGVyX2RldGFpbHMsIGZ1bmN0aW9uIChyZXNwb25zZSwgc3RhdHVzKSB7XG4gICAgaW50ZXJmYWNlc19saXN0ID0gcmVzcG9uc2UucnNwO1xuICB9KTtcblxuICBjb25zdCBleHBvcnRlcl9pbnRlcmZhY2VzID0gW1xuICAgIHsgaWQ6IFwiKlwiLCB2YWx1ZTogXCIqXCIsIGxhYmVsOiBcIipcIiwgdGltZXNlcmllc19hdmFpbGFibGU6IGludGVyZmFjZXNfbGlzdFswXT8udGltZXNlcmllc19hdmFpbGFibGUgfVxuICBdO1xuXG4gIGludGVyZmFjZXNfbGlzdC5mb3JFYWNoKChyc3ApID0+IHtcbiAgICBleHBvcnRlcl9pbnRlcmZhY2VzLnB1c2goeyBpZDogcnNwLmlkLCBsYWJlbDogcnNwLm5hbWUsIHRpbWVzZXJpZXNfYXZhaWxhYmxlOiByc3AudGltZXNlcmllc19hdmFpbGFibGUgfSk7XG4gIH0pXG4gIGZsb3dfZXhwb3J0ZXJfZGV2aWNlX2lmaWRfbGlzdC52YWx1ZSA9IGV4cG9ydGVyX2ludGVyZmFjZXM7XG4gIHNlbGVjdGVkX2V4cG9ydGVyX2RldmljZV9pZmlkLnZhbHVlID0gZmxvd19leHBvcnRlcl9kZXZpY2VfaWZpZF9saXN0LnZhbHVlWzFdO1xuICBmbG93X2RldmljZV90aW1lc2VyaWVzX2F2YWlsYWJsZS52YWx1ZSA9IGZsb3dfZXhwb3J0ZXJfZGV2aWNlX2lmaWRfbGlzdC52YWx1ZVswXT8udGltZXNlcmllc19hdmFpbGFibGU7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5cbi8qKlxuICogRnVuY3Rpb24gdG8gZm9ybWF0IGZsb3cgZXhwb3J0ZXIgZGV2aWNlIGxpc3QgXG4gKi9cbmNvbnN0IGZvcm1hdF9mbG93X2V4cG9ydGVyX2RldmljZV9saXN0ID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgY29uc3QgX2ZfZXhwX2Rldl9saXN0ID0gW1xuICAgIHsgaWQ6IFwiKlwiLCB2YWx1ZTogXCIqXCIsIGxhYmVsOiBcIipcIiB9XG4gIF07XG5cbiAgZGF0YS5mb3JFYWNoKChkZXYpID0+IHtcbiAgICBjb25zdCBpcCA9IGRldi5wcm9iZV9pcDtcbiAgICBfZl9leHBfZGV2X2xpc3QucHVzaCh7XG4gICAgICBpZDogaXAsXG4gICAgICBsYWJlbDogaXAsXG4gICAgICB2YWx1ZTogaXAsXG4gICAgICBpZmlkOiBkZXYuaWZpZFxuICAgIH0pO1xuICB9KVxuXG4gIF9mX2V4cF9kZXZfbGlzdC5zb3J0KChhLCBiKSA9PiBzb3J0aW5nRnVuY3Rpb25zLnNvcnRCeUlQKFxuICAgIGEubGFiZWwsXG4gICAgYi5sYWJlbCxcbiAgICAxIC8qIGJ5IGRlZmF1bHQgYXNjICovXG4gICkpO1xuICByZXR1cm4gX2ZfZXhwX2Rldl9saXN0O1xufVxuXG4vKipcbiAqIEZ1bmN0aW9uIHRvIGZvcm1hdCB2bGFuIGxpc3QgXG4gKi9cbmNvbnN0IGZvcm1hdF92bGFuX2xpc3QgPSBmdW5jdGlvbihkYXRhKSB7XG4gIGNvbnN0IGZfdmxhbl9saXN0ID0gW107XG4gIGRhdGEuZm9yRWFjaCgodmxhbikgPT4ge1xuICAgIGlmICh2bGFuLmtleSAhPSAwKSB7XG4gICAgICBsZXQgdmxhbl9sYWJlbCA9IHZsYW4ua2V5O1xuICAgICAgbGV0IHRhZ19zcGxpdHRlZCA9IHZsYW4uY29sdW1uX3ZsYW4uc3BsaXQoXCI+XCIpXG4gICAgICBsZXQgZ3JhcGhzX3NwbGl0dGVyZCA9IHRhZ19zcGxpdHRlZFsxXS5zcGxpdChcIltcIik7XG4gICAgICBpZiAoZ3JhcGhzX3NwbGl0dGVyZC5sZW5ndGggPiAxKSB7XG4gICAgICAgIHZsYW5fbGFiZWwgPSB0YWdfc3BsaXR0ZWRbMV0uc3BsaXQoXCI8XCIpWzBdO1xuICAgICAgfVxuICAgICAgZl92bGFuX2xpc3QucHVzaCh7XG4gICAgICAgIGlkOiB2bGFuLmtleSxcbiAgICAgICAgbGFiZWw6IHZsYW5fbGFiZWwsXG4gICAgICAgIHZhbHVlOiB2bGFuLmtleSxcbiAgICAgIH0pXG4gICAgfVxuICAgIFxuICB9KTtcblxuICBmX3ZsYW5fbGlzdC5zb3J0KChhLCBiKSA9PiBzb3J0aW5nRnVuY3Rpb25zLnNvcnRCeU5hbWUoXG4gICAgYS5sYWJlbCxcbiAgICBiLmxhYmVsLFxuICAgIDEgLyogYnkgZGVmYXVsdCBhc2MgKi9cbiAgKSk7XG4gIHJldHVybiBmX3ZsYW5fbGlzdDtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIFRoaXMgZnVuY3Rpb24gaXMgYXV0b21hdGljYWxseSBjYWxsZWQgd2hlbmV2ZXIgYSBkaWZmZXJlbnQgZXhwb3J0ZXIgaXMgc2VsZWN0ZWRcbiAqIGluIG9yZGVyIHRvIHVwZGF0ZSB0aGUgaW50ZXJmYWNlcyBzZWxlY3QgZHJvcGRvd25cbiAqL1xuY29uc3QgY2hhbmdlX2V4cG9ydGVyX2ludGVyZmFjZXMgPSBmdW5jdGlvbiAoKSB7XG4gIHVwZGF0ZV9leHBvcnRlcl9pbnRlcmZhY2VzKCk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5vbkJlZm9yZU1vdW50KCgpID0+IHtcbiAgbWV0cmljX3R5cGVfbGlzdC52YWx1ZS5mb3JFYWNoKCh0KSA9PiB7XG4gICAgaWYgKHQuYWN0aXZlKSB7XG4gICAgICBtZXRyaWNfdHlwZS52YWx1ZSA9IHQ7XG4gICAgfVxuXG4gIH0pXG4gIGludmFsaWRfYWRkLnZhbHVlID0gZmFsc2U7XG59KVxuXG5kZWZpbmVFeHBvc2UoeyBzaG93LCBjbG9zZSwgbWV0cmljc0xvYWRlZCwgaW52YWxpZEFkZCB9KTtcblxuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD48L3N0eWxlPlxuIiwiPCEtLVxuICAoQykgMjAxMy0yMiAtIG50b3Aub3JnXG4tLT5cblxuPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wtbGctMTJcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJvdmVybGF5IGp1c3RpZnktY29udGVudC1jZW50ZXIgYWxpZ24taXRlbXMtY2VudGVyIHBvc2l0aW9uLWFic29sdXRlIGgtMTAwIHctMTAwXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInRleHQtY2VudGVyXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwic3Bpbm5lci1ib3JkZXIgdGV4dC1wcmltYXJ5IG10LTVcIiByb2xlPVwic3RhdHVzXCI+XG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3Itb25seSBwb3NpdGlvbi1hYnNvbHV0ZVwiPkxvYWRpbmcuLi48L3NwYW4+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cblxuXG4gICAgICAgICAgPGRpdiBjbGFzcz1cIm1iLTRcIj5cbiAgICAgICAgICAgIDxoND57eyBfaTE4bignaWZfc3RhdHNfY29uZmlnLnRyYWZmaWNfcnVsZXMnKSB9fTwvaDQ+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBpZD1cImhvc3RfcnVsZXNcIj5cbiAgICAgICAgICAgIDxNb2RhbERlbGV0ZUNvbmZpcm0gcmVmPVwibW9kYWxfZGVsZXRlX2NvbmZpcm1cIiA6dGl0bGU9XCJ0aXRsZV9kZWxldGVcIiA6Ym9keT1cImJvZHlfZGVsZXRlXCIgQGRlbGV0ZT1cImRlbGV0ZV9yb3dcIj5cbiAgICAgICAgICAgIDwvTW9kYWxEZWxldGVDb25maXJtPlxuICAgICAgICAgICAgPE1vZGFsQWRkSG9zdFJ1bGVzIHJlZj1cIm1vZGFsX2FkZF9ob3N0X3J1bGVcIiA6bWV0cmljX2xpc3Q9XCJtZXRyaWNfbGlzdFwiXG4gICAgICAgICAgICAgIDppbnRlcmZhY2VfbWV0cmljX2xpc3Q9XCJpbnRlcmZhY2VfbWV0cmljX2xpc3RcIiA6ZnJlcXVlbmN5X2xpc3Q9XCJmcmVxdWVuY3lfbGlzdFwiIDppbml0X2Z1bmM9XCJpbml0X2VkaXRcIlxuICAgICAgICAgICAgICA6aGFzX3ZsYW5zPVwicHJvcHMuaGFzX3ZsYW5zXCJcbiAgICAgICAgICAgICAgQGFkZD1cImFkZF9ob3N0X3J1bGVcIiBAZWRpdD1cImVkaXRcIj5cbiAgICAgICAgICAgIDwvTW9kYWxBZGRIb3N0UnVsZXM+XG5cbiAgICAgICAgICAgIDxEYXRhdGFibGUgcmVmPVwidGFibGVfaG9zdF9ydWxlc1wiIDp0YWJsZV9idXR0b25zPVwiaG9zdF9ydWxlc190YWJsZV9jb25maWcudGFibGVfYnV0dG9uc1wiXG4gICAgICAgICAgICAgIDpjb2x1bW5zX2NvbmZpZz1cImhvc3RfcnVsZXNfdGFibGVfY29uZmlnLmNvbHVtbnNfY29uZmlnXCIgOmRhdGFfdXJsPVwiaG9zdF9ydWxlc190YWJsZV9jb25maWcuZGF0YV91cmxcIlxuICAgICAgICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cImhvc3RfcnVsZXNfdGFibGVfY29uZmlnLmVuYWJsZV9zZWFyY2hcIiA6dGFibGVfY29uZmlnPVwiaG9zdF9ydWxlc190YWJsZV9jb25maWcudGFibGVfY29uZmlnXCI+XG4gICAgICAgICAgICA8L0RhdGF0YWJsZT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWZvb3RlclwiPlxuICAgICAgICAgIDxOb3RlTGlzdCA6bm90ZV9saXN0PVwibm90ZV9saXN0XCI+XG4gICAgICAgICAgPC9Ob3RlTGlzdD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbkJlZm9yZU1vdW50LCBvblVubW91bnRlZCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgRGF0YXRhYmxlIH0gZnJvbSBcIi4vZGF0YXRhYmxlLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBOb3RlTGlzdCB9IGZyb20gXCIuL25vdGUtbGlzdC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxEZWxldGVDb25maXJtIH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsQWRkSG9zdFJ1bGVzIH0gZnJvbSBcIi4vbW9kYWwtYWRkLWhvc3QtcnVsZXMudnVlXCI7XG5pbXBvcnQgTnRvcFV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvbnRvcC11dGlsc1wiO1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgcGFnZV9jc3JmOiBTdHJpbmcsXG4gIGhhc192bGFuczogQm9vbGVhbixcbiAgaWZpZDogU3RyaW5nLFxufSk7XG5cbmNvbnN0IHRhYmxlX2hvc3RfcnVsZXMgPSByZWYobnVsbCk7XG5jb25zdCBtb2RhbF9kZWxldGVfY29uZmlybSA9IHJlZihudWxsKTtcbmNvbnN0IG1vZGFsX2FkZF9ob3N0X3J1bGUgPSByZWYobnVsbCk7XG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuY29uc3Qgcm93X3RvX2RlbGV0ZSA9IHJlZih7fSk7XG5jb25zdCByb3dfdG9fZWRpdCA9IHJlZih7fSk7XG5jb25zdCBpbnZhbGlkX2FkZCA9IHJlZihmYWxzZSk7XG5cblxuY29uc3QgbWV0cmljX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2ludGVyZmFjZS9ob3N0X3J1bGVzL2hvc3RfcnVsZXNfbWV0cmljLmx1YT9ydWxlX3R5cGU9aG9zdGA7XG5jb25zdCBtZXRyaWNfaWZuYW1lX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2ludGVyZmFjZS9ob3N0X3J1bGVzL2hvc3RfcnVsZXNfbWV0cmljLmx1YT9ydWxlX3R5cGU9aW50ZXJmYWNlYDtcblxuY29uc3QgbWV0cmljX2hvc3RfcG9vbF91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9pbnRlcmZhY2UvaG9zdF9ydWxlcy9ob3N0X3J1bGVzX21ldHJpYy5sdWE/cnVsZV90eXBlPWhvc3RfcG9vbGA7XG5jb25zdCBtZXRyaWNfbmV0d29ya191cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9pbnRlcmZhY2UvaG9zdF9ydWxlcy9ob3N0X3J1bGVzX21ldHJpYy5sdWE/cnVsZV90eXBlPUNJRFJgO1xuY29uc3QgbWV0cmljX3ZsYW5fdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvaW50ZXJmYWNlL2hvc3RfcnVsZXMvaG9zdF9ydWxlc19tZXRyaWMubHVhP3J1bGVfdHlwZT12bGFuYDtcblxuY29uc3QgbWV0cmljX2Zsb3dfZXhwX2RldmljZV91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9pbnRlcmZhY2UvaG9zdF9ydWxlcy9ob3N0X3J1bGVzX21ldHJpYy5sdWE/cnVsZV90eXBlPWV4cG9ydGVyYDtcbmNvbnN0IGZsb3dfZGV2aWNlc191cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9mbG93ZGV2aWNlcy9zdGF0cy5sdWFgO1xuY29uc3QgZmxvd19kZXZpY2VzX2RldGFpbHNfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9mbG93ZGV2aWNlX2RldGFpbHMubHVhYDtcbmNvbnN0IGhvc3RfcG9vbF91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvcG9vbC9wb29scy5sdWFgO1xuY29uc3QgbmV0d29ya19saXN0X3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvbmV0d29yay9uZXR3b3Jrcy5sdWFgO1xuY29uc3QgaWZpZF91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L250b3BuZy9pbnRlcmZhY2VzLmx1YWA7XG5jb25zdCB2bGFuc191cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL2dldF92bGFuc19kYXRhLmx1YWA7XG5jb25zdCBkYXRhX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2ludGVyZmFjZS9ob3N0X3J1bGVzL2hvc3RfcnVsZXNfZGF0YS5sdWFgO1xuY29uc3QgYWRkX3J1bGVfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9hZGQvaW50ZXJmYWNlL2hvc3RfcnVsZXMvYWRkX2hvc3RfcnVsZS5sdWFgO1xuY29uc3QgcmVtb3ZlX3J1bGVfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9kZWxldGUvaW50ZXJmYWNlL2hvc3RfcnVsZXMvZGVsZXRlX2hvc3RfcnVsZS5sdWFgO1xuXG5jb25zdCBub3RlX2xpc3QgPSBbXG4gIF9pMThuKCdpZl9zdGF0c19jb25maWcuZ2VuZXJpY19ub3Rlc18xJyksXG4gIF9pMThuKCdpZl9zdGF0c19jb25maWcuZ2VuZXJpY19ub3Rlc18yJyksXG4gIF9pMThuKCdpZl9zdGF0c19jb25maWcuZ2VuZXJpY19ub3Rlc18zJyksXG5dO1xuXG5jb25zdCByZXN0X3BhcmFtcyA9IHtcbiAgaWZpZDogcHJvcHMuaWZpZCxcbiAgY3NyZjogcHJvcHMucGFnZV9jc3JmLFxuICBndWk6IHRydWUgLy8gU29tZSBBUEkgcmVxdWlyZXMgdGhpcyB0byByZXR1cm4gaHRtbCBjb250ZW50IGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG59O1xuXG5sZXQgaG9zdF9ydWxlc190YWJsZV9jb25maWcgPSB7fTtcbmxldCB0aXRsZV9kZWxldGUgPSBfaTE4bignaWZfc3RhdHNfY29uZmlnLmRlbGV0ZV9ob3N0X3J1bGVzX3RpdGxlJyk7XG5sZXQgdGl0bGVfZWRpdCA9IF9pMThuKCdpZl9zdGF0c19jb25maWcuZWRpdF9sb2NhbF9uZXR3b3JrX3J1bGVzJyk7XG5sZXQgYm9keV9kZWxldGUgPSBfaTE4bignaWZfc3RhdHNfY29uZmlnLmRlbGV0ZV9ob3N0X3J1bGVzX2Rlc2NyaXB0aW9uJyk7XG5sZXQgbWV0cmljX2xpc3QgPSBbXTtcbmxldCBpbnRlcmZhY2VfbWV0cmljX2xpc3QgPSBbXTtcbmxldCBob3N0X3Bvb2xfbWV0cmljX2xpc3QgPSBbXTtcbmxldCBpZmlkX2xpc3QgPSBbXTtcbmxldCBmbG93X2V4cG9ydGVyX2xpc3QgPSBbXTtcbmxldCBmbG93X2V4cG9ydGVyX21ldHJpY19saXN0ID0gW107XG5sZXQgaG9zdF9wb29sX2xpc3QgPSBbXTtcbmxldCBuZXR3b3JrX2xpc3QgPSBbXTtcbmxldCBuZXR3b3JrX21ldHJpY19saXN0ID0gW107XG5sZXQgdmxhbl9saXN0ID0gW107XG5sZXQgdmxhbl9tZXRyaWNfbGlzdCA9IFtdO1xuXG5cbmNvbnN0IGZyZXF1ZW5jeV9saXN0ID0gW1xuICB7IHRpdGxlOiBpMThuKCdzaG93X2FsZXJ0cy41X21pbicpLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMuNV9taW4nKSwgaWQ6ICc1bWluJywgdmFsdWU6ICc1bWluJyB9LFxuICB7IHRpdGxlOiBpMThuKCdzaG93X2FsZXJ0cy5ob3VybHknKSwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLmhvdXJseScpLCBpZDogJ2hvdXInLCB2YWx1ZTogJ2hvdXInIH0sXG4gIHsgdGl0bGU6IGkxOG4oJ3Nob3dfYWxlcnRzLmRhaWx5JyksIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5kYWlseScpLCBpZDogJ2RheScsIHZhbHVlOiAnZGF5JyB9XG5dO1xuXG5jb25zdCBzaG93X2RlbGV0ZV9kaWFsb2cgPSBmdW5jdGlvbiAocm93KSB7XG4gIHJvd190b19kZWxldGUudmFsdWUgPSByb3c7XG4gIG1vZGFsX2RlbGV0ZV9jb25maXJtLnZhbHVlLnNob3coKTtcbn07XG5cbmNvbnN0IGxvYWRfc2VsZWN0ZWRfZmllbGQgPSBmdW5jdGlvbiAocm93KSB7XG4gIHJvd190b19lZGl0LnZhbHVlID0gcm93O1xuXG4gIHJvd190b19kZWxldGUudmFsdWUgPSByb3c7XG5cbiAgbW9kYWxfYWRkX2hvc3RfcnVsZS52YWx1ZS5zaG93KHJvdyk7XG5cbn07XG5cbmFzeW5jIGZ1bmN0aW9uIGVkaXQocGFyYW1zKSB7XG4gIC8vYXdhaXQgZGVsZXRlX3JvdygpO1xuXG4gIGF3YWl0IGFkZF9ob3N0X3J1bGUocGFyYW1zKTtcbn07XG5cbmNvbnN0IGluaXRfZWRpdCA9IGZ1bmN0aW9uICgpIHtcbiAgY29uc3Qgcm93ID0gcm93X3RvX2VkaXQudmFsdWU7XG4gIHJvd190b19lZGl0LnZhbHVlID0gbnVsbDtcbiAgcmV0dXJuIHJvdztcbn07XG5cbmNvbnN0IGRlc3Ryb3lfdGFibGUgPSBmdW5jdGlvbiAoKSB7XG4gIHRhYmxlX2hvc3RfcnVsZXMudmFsdWUuZGVzdHJveV90YWJsZSgpO1xufTtcblxuY29uc3QgcmVsb2FkX3RhYmxlID0gZnVuY3Rpb24gKCkge1xuICB0YWJsZV9ob3N0X3J1bGVzLnZhbHVlLnJlbG9hZCgpO1xufTtcblxuY29uc3QgZGVsZXRlX3JvdyA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgY29uc3Qgcm93ID0gcm93X3RvX2RlbGV0ZS52YWx1ZTtcbiAgY29uc3QgdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKHJlbW92ZV9ydWxlX3VybCwge1xuICAgIC4uLnJlc3RfcGFyYW1zLFxuICAgIC4uLntcbiAgICAgIHJ1bGVfaWQ6IHJvdy5pZCxcbiAgICAgIHJ1bGVfdHlwZTogcm93LnJ1bGVfdHlwZVxuICAgIH1cbiAgfSlcblxuICBhd2FpdCAkLnBvc3QodXJsLCBmdW5jdGlvbiAocnNwLCBzdGF0dXMpIHtcbiAgICByZWxvYWRfdGFibGUoKTtcbiAgfSk7XG59O1xuXG5jb25zdCBhZGRfaG9zdF9ydWxlID0gYXN5bmMgZnVuY3Rpb24gKHBhcmFtcykge1xuXG4gIHBhcmFtcy5jc3JmID0gcHJvcHMucGFnZV9jc3JmO1xuICBwYXJhbXMuaWZpZCA9IHByb3BzLmlmaWQ7XG4gIGNvbnN0IHJzcCA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcG9zdF9yZXF1ZXN0KGFkZF9ydWxlX3VybCwgcGFyYW1zKTtcblxuICBpbnZhbGlkX2FkZC52YWx1ZSA9IHJzcC5yc3A7XG5cbiAgaWYgKGludmFsaWRfYWRkLnZhbHVlID09IGZhbHNlKSB7XG4gICAgbW9kYWxfYWRkX2hvc3RfcnVsZS52YWx1ZS5jbG9zZSgpO1xuICAgIHJlbG9hZF90YWJsZSgpO1xuICB9IGVsc2Uge1xuICAgIG1vZGFsX2FkZF9ob3N0X3J1bGUudmFsdWUuaW52YWxpZEFkZCgpO1xuICB9XG5cbn07XG5cblxuY29uc3QgYWRkX2FjdGlvbl9jb2x1bW4gPSBmdW5jdGlvbiAocm93RGF0YSkge1xuICBsZXQgZGVsZXRlX2hhbmRsZXIgPSB7XG4gICAgaGFuZGxlcklkOiBcImRlbGV0ZV9ob3N0XCIsXG4gICAgb25DbGljazogKCkgPT4ge1xuICAgICAgc2hvd19kZWxldGVfZGlhbG9nKHJvd0RhdGEpO1xuICAgIH0sXG4gIH07XG5cbiAgbGV0IGVkaXRfaGFuZGxlciA9IHtcbiAgICBoYW5kbGVySWQ6IFwiZWRpdF9ydWxlXCIsXG4gICAgb25DbGljazogKCkgPT4ge1xuICAgICAgbG9hZF9zZWxlY3RlZF9maWVsZChyb3dEYXRhKTtcbiAgICB9LFxuICB9XG5cbiAgcmV0dXJuIERhdGFUYWJsZVV0aWxzLmNyZWF0ZUFjdGlvbkJ1dHRvbnMoW1xuICAgIHsgY2xhc3M6IGBwb2ludGVyYCwgaGFuZGxlcjogZWRpdF9oYW5kbGVyLCBpY29uOiAnZmEtZWRpdCcsIHRpdGxlOiBpMThuKCdlZGl0JykgfSxcbiAgICB7IGNsYXNzOiBgcG9pbnRlcmAsIGhhbmRsZXI6IGRlbGV0ZV9oYW5kbGVyLCBpY29uOiAnZmEtdHJhc2gnLCB0aXRsZTogaTE4bignZGVsZXRlJykgfSxcbiAgXSk7XG59O1xuXG5jb25zdCBmb3JtYXRfbWV0cmljID0gZnVuY3Rpb24gKGRhdGEsIHJvd0RhdGEpIHtcbiAgbGV0IG1ldHJpY19sYWJlbCA9IGRhdGFcblxuICBpZiAocm93RGF0YS5tZXRyaWNfbGFiZWwpIHtcbiAgICBtZXRyaWNfbGFiZWwgPSByb3dEYXRhLm1ldHJpY19sYWJlbDtcbiAgfSBlbHNlIHtcbiAgICBpZiAocm93RGF0YS5ydWxlX3R5cGUgIT0gJ2ludGVyZmFjZScpIHtcbiAgICAgIG1ldHJpY19saXN0LmZvckVhY2goKG1ldHJpYykgPT4ge1xuICAgICAgICBpZiAobWV0cmljLmlkID09IGRhdGEpIHtcbiAgICAgICAgICBpZiAocm93RGF0YS5leHRyYV9tZXRyaWMpIHtcbiAgICAgICAgICAgIGlmIChyb3dEYXRhLmV4dHJhX21ldHJpYyA9PSBtZXRyaWMuZXh0cmFfbWV0cmljKVxuICAgICAgICAgICAgICBtZXRyaWNfbGFiZWwgPSBtZXRyaWMubGFiZWxcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWV0cmljX2xhYmVsID0gbWV0cmljLmxhYmVsXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICBpbnRlcmZhY2VfbWV0cmljX2xpc3QuZm9yRWFjaCgobWV0cmljKSA9PiB7XG4gICAgICAgIGlmIChtZXRyaWMuaWQgPT0gZGF0YSkge1xuICAgICAgICAgIGlmIChyb3dEYXRhLmV4dHJhX21ldHJpYykge1xuICAgICAgICAgICAgaWYgKHJvd0RhdGEuZXh0cmFfbWV0cmljID09IG1ldHJpYy5leHRyYV9tZXRyaWMpXG4gICAgICAgICAgICAgIG1ldHJpY19sYWJlbCA9IG1ldHJpYy5sYWJlbFxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtZXRyaWNfbGFiZWwgPSBtZXRyaWMubGFiZWxcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1ldHJpY19sYWJlbFxufTtcblxuY29uc3QgZm9ybWF0X2ZyZXF1ZW5jeSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIGxldCBmcmVxdWVuY3lfdGl0bGUgPSAnJ1xuICBmcmVxdWVuY3lfbGlzdC5mb3JFYWNoKChmcmVxdWVuY3kpID0+IHtcbiAgICBpZiAoZGF0YSA9PSBmcmVxdWVuY3kuaWQpXG4gICAgICBmcmVxdWVuY3lfdGl0bGUgPSBmcmVxdWVuY3kudGl0bGU7XG4gIH0pXG5cbiAgcmV0dXJuIGZyZXF1ZW5jeV90aXRsZVxufTtcblxuY29uc3QgZm9ybWF0X3RocmVzaG9sZCA9IGZ1bmN0aW9uIChkYXRhLCByb3dEYXRhKSB7XG4gIGxldCBmb3JtYXR0ZWRfZGF0YSA9IHBhcnNlSW50KGRhdGEpO1xuICBsZXQgdGhyZXNob2xkX3NpZ24gPSBcIj4gXCI7XG5cbiAgaWYgKChyb3dEYXRhLnRocmVzaG9sZF9zaWduKSAmJiAocm93RGF0YS50aHJlc2hvbGRfc2lnbiA9PSAnLTEnKSlcbiAgICB0aHJlc2hvbGRfc2lnbiA9IFwiPCBcIlxuXG4gIGlmICgocm93RGF0YS5tZXRyaWNfdHlwZSkgJiYgKHJvd0RhdGEubWV0cmljX3R5cGUgPT0gJ3Rocm91Z2hwdXQnKSkge1xuICAgIGZvcm1hdHRlZF9kYXRhID0gdGhyZXNob2xkX3NpZ24gKyBOdG9wVXRpbHMuYml0c1RvU2l6ZShkYXRhKVxuICB9IGVsc2UgaWYgKChyb3dEYXRhLm1ldHJpY190eXBlKSAmJiAocm93RGF0YS5tZXRyaWNfdHlwZSA9PSAndm9sdW1lJykpIHtcbiAgICBmb3JtYXR0ZWRfZGF0YSA9IHRocmVzaG9sZF9zaWduICsgTnRvcFV0aWxzLmJ5dGVzVG9TaXplKGRhdGEpO1xuICB9IGVsc2UgaWYgKChyb3dEYXRhLm1ldHJpY190eXBlKSAmJiAocm93RGF0YS5tZXRyaWNfdHlwZS5jb250YWlucygncGVyY2VudGFnZScpKSkge1xuICAgIGlmIChkYXRhIDwgMCkge1xuICAgICAgZGF0YSA9IGRhdGEgKiAoLTEpO1xuICAgIH1cbiAgICBmb3JtYXR0ZWRfZGF0YSA9IHRocmVzaG9sZF9zaWduICsgTnRvcFV0aWxzLmZwZXJjZW50KGRhdGEpO1xuICB9IGVsc2UgaWYgKChyb3dEYXRhLm1ldHJpY190eXBlKSAmJiAocm93RGF0YS5tZXRyaWNfdHlwZSA9PSAndmFsdWUnKSkge1xuICAgIGlmIChkYXRhIDwgMCkge1xuICAgICAgZGF0YSA9IGRhdGEgKiAoLTEpO1xuICAgIH1cbiAgICBmb3JtYXR0ZWRfZGF0YSA9IHRocmVzaG9sZF9zaWduICsgZGF0YTtcbiAgfVxuXG4gIHJldHVybiBmb3JtYXR0ZWRfZGF0YVxufTtcblxuY29uc3QgZm9ybWF0X2xhc3RfbWVhc3VyZW1lbnQgPSBmdW5jdGlvbiAoZGF0YSwgcm93RGF0YSkge1xuICBsZXQgZm9ybWF0dGVkX2RhdGEgPSBwYXJzZUludChkYXRhKTtcbiAgaWYgKHJvd0RhdGEudGFyZ2V0ID09IFwiKlwiKSB7XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cblxuICBpZiAoZGF0YSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cbiAgaWYgKChyb3dEYXRhLm1ldHJpY190eXBlKSAmJiAocm93RGF0YS5tZXRyaWNfdHlwZSA9PSAndGhyb3VnaHB1dCcpKSB7XG4gICAgZm9ybWF0dGVkX2RhdGEgPSBOdG9wVXRpbHMuYml0c1RvU2l6ZShkYXRhKVxuICB9IGVsc2UgaWYgKChyb3dEYXRhLm1ldHJpY190eXBlKSAmJiAocm93RGF0YS5tZXRyaWNfdHlwZSA9PSAndm9sdW1lJykpIHtcbiAgICBmb3JtYXR0ZWRfZGF0YSA9IE50b3BVdGlscy5ieXRlc1RvU2l6ZShkYXRhKTtcbiAgfSBlbHNlIGlmICgocm93RGF0YS5tZXRyaWNfdHlwZSkgJiYgKHJvd0RhdGEubWV0cmljX3R5cGUuaW5jbHVkZXMoJ3BlcmNlbnRhZ2UnKSkpIHtcbiAgICBjb25zdCBzaWduX2RhdGEgPSBkYXRhIDwgMCA/IC0xIDogMTtcbiAgICBjb25zdCBhYnNvbHV0ZV92YWx1ZSA9IE50b3BVdGlscy5mcGVyY2VudChkYXRhICogc2lnbl9kYXRhKTtcbiAgICBmb3JtYXR0ZWRfZGF0YSA9IHNpZ25fZGF0YSA9PSAtMSA/IGA8bGFiZWwgdGl0bGU9JyR7aTE4bihcInBlcmNlbnRhZ2VfZGVjcmVhc2VcIil9Jz4gKC0pICR7YWJzb2x1dGVfdmFsdWV9IDwvbGFiZWw+YCA6IGA8bGFiZWwgdGl0bGU9JyR7aTE4bihcInBlcmNlbnRhZ2VfaW5jcmVhc2VcIil9Jz4ke2Fic29sdXRlX3ZhbHVlfTwvbGFiZWw+YDtcbiAgfVxuXG4gIHJldHVybiBmb3JtYXR0ZWRfZGF0YVxufTtcblxuY29uc3QgZm9ybWF0X3J1bGVfdHlwZSA9IGZ1bmN0aW9uIChkYXRhLCByb3dEYXRhKSB7XG4gIGxldCBmb3JtYXR0ZWRfZGF0YSA9ICcnO1xuICBpZiAoKHJvd0RhdGEucnVsZV90eXBlKSAmJiAocm93RGF0YS5ydWxlX3R5cGUgPT0gJ2ludGVyZmFjZScpKSB7XG4gICAgZm9ybWF0dGVkX2RhdGEgPSBcIjxzcGFuIGNsYXNzPSdiYWRnZSBiZy1zZWNvbmRhcnknPlwiICsgX2kxOG4oXCJpbnRlcmZhY2VcIikgKyBcIiA8aSBjbGFzcz0nZmFzIGZhLWV0aGVybmV0Jz48L2k+PC9zcGFuPlwiXG4gIH0gZWxzZSBpZiAoKHJvd0RhdGEucnVsZV90eXBlKSAmJiAocm93RGF0YS5ydWxlX3R5cGUgPT0gJ0hvc3QnKSkge1xuICAgIGZvcm1hdHRlZF9kYXRhID0gXCI8c3BhbiBjbGFzcz0nYmFkZ2UgYmctc2Vjb25kYXJ5Jz5cIiArIF9pMThuKFwiYWJvdXQuaG9zdF9jaGVja3NfZGlyZWN0b3J5XCIpICsgXCIgPGkgY2xhc3M9J2ZhcyBmYS1sYXB0b3AnPjwvaT48L3NwYW4+XCJcbiAgfSBlbHNlIGlmICgocm93RGF0YS5ydWxlX3R5cGUpICYmIHJvd0RhdGEucnVsZV90eXBlID09ICdob3N0X3Bvb2wnKSB7XG4gICAgZm9ybWF0dGVkX2RhdGEgPSBcIjxzcGFuIGNsYXNzPSdiYWRnZSBiZy1zZWNvbmRhcnknPlwiICsgX2kxOG4oXCJhbGVydF9lbnRpdGllcy5ob3N0X3Bvb2xcIikgKyBcIiA8aSBjbGFzcz0nZmFzIGZhLWxhcHRvcCc+PC9pPjwvc3Bhbj5cIlxuXG4gIH0gZWxzZSBpZiAoKHJvd0RhdGEucnVsZV90eXBlKSAmJiByb3dEYXRhLnJ1bGVfdHlwZSA9PSAnQ0lEUicpIHtcbiAgICBmb3JtYXR0ZWRfZGF0YSA9IFwiPHNwYW4gY2xhc3M9J2JhZGdlIGJnLXNlY29uZGFyeSc+XCIgKyBfaTE4bihcIm5ldHdvcmtcIikgKyBcIiA8aSBjbGFzcz0nZmFzIGZhLWxhcHRvcCc+PC9pPjwvc3Bhbj5cIlxuXG4gIH0gZWxzZSBpZiAoKHJvd0RhdGEucnVsZV90eXBlKSAmJiAocm93RGF0YS5ydWxlX3R5cGUgPT0gJ2V4cG9ydGVyJykgJiYgcm93RGF0YS5tZXRyaWMgPT0gXCJmbG93ZGV2OnRyYWZmaWNcIikge1xuICAgIGZvcm1hdHRlZF9kYXRhID0gXCI8c3BhbiBjbGFzcz0nYmFkZ2UgYmctc2Vjb25kYXJ5Jz5cIiArIF9pMThuKFwiZmxvd19leHBvcnRlcl9kZXZpY2VcIikgKyBcIiA8aSBjbGFzcz0nZmFzIGZhLWxhcHRvcCc+PC9pPjwvc3Bhbj5cIlxuXG4gIH0gZWxzZSBpZiAoKHJvd0RhdGEucnVsZV90eXBlKSAmJiAocm93RGF0YS5ydWxlX3R5cGUgPT0gJ2V4cG9ydGVyJykgJiYgcm93RGF0YS5tZXRyaWMuaW5jbHVkZXMoXCJmbG93ZGV2X3BvcnRcIikpIHtcbiAgICBmb3JtYXR0ZWRfZGF0YSA9IFwiPHNwYW4gY2xhc3M9J2JhZGdlIGJnLXNlY29uZGFyeSc+XCIgKyBfaTE4bihcImludGVyZmFjZV9mbG93X2V4cG9ydGVyX2RldmljZVwiKSArIFwiIDxpIGNsYXNzPSdmYXMgZmEtZXRoZXJuZXQnPjwvaT48L3NwYW4+XCJcbiAgfSBlbHNlIGlmICgocm93RGF0YS5ydWxlX3R5cGUpICYmIHJvd0RhdGEucnVsZV90eXBlID09ICd2bGFuJykge1xuICAgIGZvcm1hdHRlZF9kYXRhID0gXCI8c3BhbiBjbGFzcz0nYmFkZ2UgYmctc2Vjb25kYXJ5Jz5cIiArIF9pMThuKFwidmxhblwiKSArIFwiIDxpIGNsYXNzPSdmYXMgZmEtZXRoZXJuZXQnPjwvaT48L3NwYW4+XCJcblxuICB9XG5cbiAgcmV0dXJuIGZvcm1hdHRlZF9kYXRhO1xufTtcblxuY29uc3QgZm9ybWF0X3RhcmdldCA9IGZ1bmN0aW9uIChkYXRhLCByb3dEYXRhKSB7XG4gIGxldCBmb3JtYXR0ZWRfZGF0YSA9ICcnO1xuICBpZiAoKHJvd0RhdGEucnVsZV90eXBlKSAmJiAocm93RGF0YS5ydWxlX3R5cGUgPT0gJ2ludGVyZmFjZScpKSB7XG4gICAgZm9ybWF0dGVkX2RhdGEgPSByb3dEYXRhLnNlbGVjdGVkX2lmYWNlO1xuICB9IGVsc2UgaWYgKHJvd0RhdGEucnVsZV90eXBlICYmIChyb3dEYXRhLnJ1bGVfdHlwZSA9PSAnSG9zdCcgfHwgcm93RGF0YS5ydWxlX3R5cGUgPT0gJ0NJRFInKSkge1xuICAgIGZvcm1hdHRlZF9kYXRhID0gcm93RGF0YS50YXJnZXQ7XG4gIH0gZWxzZSBpZiAocm93RGF0YS5ydWxlX3R5cGUgPT0gJ2hvc3RfcG9vbCcpIHtcbiAgICBmb3JtYXR0ZWRfZGF0YSA9IHJvd0RhdGEuaG9zdF9wb29sX2xhYmVsO1xuICB9IGVsc2UgaWYgKHJvd0RhdGEucnVsZV90eXBlID09ICd2bGFuJykge1xuICAgIGZvcm1hdHRlZF9kYXRhID0gcm93RGF0YS52bGFuX2xhYmVsO1xuICB9IGVsc2UgaWYgKHJvd0RhdGEucnVsZV90eXBlICYmIHJvd0RhdGEucnVsZV90eXBlID09ICdleHBvcnRlcicgJiYgcm93RGF0YS5tZXRyaWMgPT0gXCJmbG93ZGV2OnRyYWZmaWNcIikge1xuICAgIGZvcm1hdHRlZF9kYXRhID0gcm93RGF0YS50YXJnZXQ7XG4gIH0gZWxzZSB7XG4gICAgbGV0IGludGVyZmFjZV9sYWJlbCA9IHJvd0RhdGEuZmxvd19leHBfaWZpZF9uYW1lICE9IFwiXCIgJiYgcm93RGF0YS5mbG93X2V4cF9pZmlkX25hbWUgIT0gbnVsbCAgPyByb3dEYXRhLmZsb3dfZXhwX2lmaWRfbmFtZSA6IHJvd0RhdGEuZmxvd19leHBfaWZpZDtcbiAgICBmb3JtYXR0ZWRfZGF0YSA9IHJvd0RhdGEudGFyZ2V0ICsgXCIgXCIgKyBfaTE4bihcIm9uX2ludGVyZmFjZVwiKSArIFwiOiBcIiArIGludGVyZmFjZV9sYWJlbDtcbiAgfVxuICByZXR1cm4gZm9ybWF0dGVkX2RhdGE7XG59O1xuXG5jb25zdCBnZXRfbWV0cmljX2xpc3QgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IHVybCA9IE50b3BVdGlscy5idWlsZFVSTChtZXRyaWNfdXJsLCByZXN0X3BhcmFtcylcblxuICBhd2FpdCAkLmdldCh1cmwsIGZ1bmN0aW9uIChyc3AsIHN0YXR1cykge1xuICAgIG1ldHJpY19saXN0ID0gcnNwLnJzcDtcbiAgfSk7XG59O1xuXG5cbmNvbnN0IGdldF9ob3N0X3Bvb2xfbGlzdCA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKGhvc3RfcG9vbF91cmwsIHJlc3RfcGFyYW1zKVxuICBsZXQgdG1wX2hvc3RfcG9vbF9saXN0O1xuICBhd2FpdCAkLmdldCh1cmwsIGZ1bmN0aW9uIChyc3AsIHN0YXR1cykge1xuICAgIHRtcF9ob3N0X3Bvb2xfbGlzdCA9IHJzcC5yc3A7XG4gIH0pO1xuXG4gIHRtcF9ob3N0X3Bvb2xfbGlzdC5zb3J0KChhLCBiKSA9PiAoYS5sYWJlbCA+IGIubGFiZWwpID8gMSA6ICgoYi5sYWJlbCA+IGEubGFiZWwpID8gLTEgOiAwKSk7XG4gIGhvc3RfcG9vbF9saXN0ID0gdG1wX2hvc3RfcG9vbF9saXN0O1xufTtcblxuY29uc3QgZ2V0X25ldHdvcmtfbGlzdCA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKG5ldHdvcmtfbGlzdF91cmwsIHJlc3RfcGFyYW1zKVxuXG4gIGxldCB0bXBfbmV0d29ya19saXN0XG4gIGF3YWl0ICQuZ2V0KHVybCwgZnVuY3Rpb24gKHJzcCwgc3RhdHVzKSB7XG4gICAgdG1wX25ldHdvcmtfbGlzdCA9IHJzcC5yc3A7XG4gIH0pO1xuXG4gIHRtcF9uZXR3b3JrX2xpc3Quc29ydCgoYSwgYikgPT4gKGEubGFiZWwgPiBiLmxhYmVsKSA/IDEgOiAoKGIubGFiZWwgPiBhLmxhYmVsKSA/IC0xIDogMCkpO1xuICBuZXR3b3JrX2xpc3QgPSB0bXBfbmV0d29ya19saXN0O1xuXG59O1xuXG5jb25zdCBnZXRfaW50ZXJmYWNlX21ldHJpY19saXN0ID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBjb25zdCB1cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwobWV0cmljX2lmbmFtZV91cmwsIHJlc3RfcGFyYW1zKVxuXG4gIGF3YWl0ICQuZ2V0KHVybCwgZnVuY3Rpb24gKHJzcCwgc3RhdHVzKSB7XG4gICAgaW50ZXJmYWNlX21ldHJpY19saXN0ID0gcnNwLnJzcDtcbiAgfSk7XG5cbn07XG5cbmNvbnN0IGdldF9ob3N0X3Bvb2xfbWV0cmljX2xpc3QgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IHVybCA9IE50b3BVdGlscy5idWlsZFVSTChtZXRyaWNfaG9zdF9wb29sX3VybCwgcmVzdF9wYXJhbXMpXG5cbiAgbGV0IHRtcF9ob3N0X3Bvb2xfbWV0cmljX2xpc3RcbiAgYXdhaXQgJC5nZXQodXJsLCBmdW5jdGlvbiAocnNwLCBzdGF0dXMpIHtcbiAgICB0bXBfaG9zdF9wb29sX21ldHJpY19saXN0ID0gcnNwLnJzcDtcbiAgfSk7XG5cbiAgdG1wX2hvc3RfcG9vbF9tZXRyaWNfbGlzdC5zb3J0KChhLCBiKSA9PiAoYS5sYWJlbCA+IGIubGFiZWwpID8gMSA6ICgoYi5sYWJlbCA+IGEubGFiZWwpID8gLTEgOiAwKSk7XG4gIGhvc3RfcG9vbF9tZXRyaWNfbGlzdCA9IHRtcF9ob3N0X3Bvb2xfbWV0cmljX2xpc3Q7XG59O1xuXG5cbmNvbnN0IGdldF9uZXR3b3JrX21ldHJpY19saXN0ID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBjb25zdCB1cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwobWV0cmljX25ldHdvcmtfdXJsLCByZXN0X3BhcmFtcylcblxuICBsZXQgdG1wX25ldHdvcmtfbWV0cmljX2xpc3Q7XG4gIGF3YWl0ICQuZ2V0KHVybCwgZnVuY3Rpb24gKHJzcCwgc3RhdHVzKSB7XG4gICAgdG1wX25ldHdvcmtfbWV0cmljX2xpc3QgPSByc3AucnNwO1xuICB9KTtcblxuICB0bXBfbmV0d29ya19tZXRyaWNfbGlzdC5zb3J0KChhLCBiKSA9PiAoYS5sYWJlbCA+IGIubGFiZWwpID8gMSA6ICgoYi5sYWJlbCA+IGEubGFiZWwpID8gLTEgOiAwKSk7XG4gIG5ldHdvcmtfbWV0cmljX2xpc3QgPSB0bXBfbmV0d29ya19tZXRyaWNfbGlzdDtcblxufTtcblxuY29uc3QgZ2V0X3ZsYW5fbWV0cmljX2xpc3QgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IHVybCA9IE50b3BVdGlscy5idWlsZFVSTChtZXRyaWNfdmxhbl91cmwsIHJlc3RfcGFyYW1zKVxuXG4gIGxldCB0bXBfdmxhbl9tZXRyaWNfbGlzdDtcbiAgYXdhaXQgJC5nZXQodXJsLCBmdW5jdGlvbiAocnNwLCBzdGF0dXMpIHtcbiAgICB0bXBfdmxhbl9tZXRyaWNfbGlzdCA9IHJzcC5yc3A7XG4gIH0pO1xuXG4gIHRtcF92bGFuX21ldHJpY19saXN0LnNvcnQoKGEsIGIpID0+IChhLmxhYmVsID4gYi5sYWJlbCkgPyAxIDogKChiLmxhYmVsID4gYS5sYWJlbCkgPyAtMSA6IDApKTtcbiAgdmxhbl9tZXRyaWNfbGlzdCA9IHRtcF92bGFuX21ldHJpY19saXN0O1xuXG59O1xuXG5jb25zdCBnZXRfZmxvd19leHBvcnRlcl9kZXZpY2VzX21ldHJpY19saXN0ID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBjb25zdCB1cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwobWV0cmljX2Zsb3dfZXhwX2RldmljZV91cmwsIHtcbiAgICAuLi5yZXN0X3BhcmFtc1xuICB9KVxuXG4gIGF3YWl0ICQuZ2V0KHVybCwgZnVuY3Rpb24gKHJzcCwgc3RhdHVzKSB7XG4gICAgZmxvd19leHBvcnRlcl9tZXRyaWNfbGlzdCA9IHJzcC5yc3A7XG4gIH0pO1xuXG59O1xuXG5jb25zdCBnZXRfZmxvd19leHBvcnRlcl9kZXZpY2VzX2xpc3QgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IHVybCA9IE50b3BVdGlscy5idWlsZFVSTChmbG93X2RldmljZXNfdXJsLCB7XG4gICAgLi4ucmVzdF9wYXJhbXNcbiAgfSlcblxuICBhd2FpdCAkLmdldCh1cmwsIGZ1bmN0aW9uIChyc3AsIHN0YXR1cykge1xuICAgIGZsb3dfZXhwb3J0ZXJfbGlzdCA9IHJzcC5yc3A7XG4gIH0pO1xuXG59O1xuXG5jb25zdCBnZXRfaWZpZF9saXN0ID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBjb25zdCB1cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoaWZpZF91cmwsIHJlc3RfcGFyYW1zKVxuXG4gIGF3YWl0ICQuZ2V0KHVybCwgZnVuY3Rpb24gKHJzcCwgc3RhdHVzKSB7XG4gICAgaWZpZF9saXN0ID0gcnNwLnJzcDtcbiAgfSk7XG59O1xuXG5jb25zdCBnZXRfdmxhbnMgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IHVybCA9IE50b3BVdGlscy5idWlsZFVSTCh2bGFuc191cmwsIHJlc3RfcGFyYW1zKVxuXG4gIGF3YWl0ICQuZ2V0KHVybCwgZnVuY3Rpb24gKHJzcCwgc3RhdHVzKSB7XG4gICAgdmxhbl9saXN0ID0gSlNPTi5wYXJzZShyc3ApLmRhdGE7XG4gIH0pO1xufTtcblxuY29uc3Qgc3RhcnRfZGF0YXRhYmxlID0gZnVuY3Rpb24gKCkge1xuICBjb25zdCBkYXRhdGFibGVCdXR0b24gPSBbXTtcblxuICAvKiBNYW5hZ2UgdGhlIGJ1dHRvbnMgY2xvc2UgdG8gdGhlIHNlYXJjaCBib3ggKi9cbiAgZGF0YXRhYmxlQnV0dG9uLnB1c2goe1xuICAgIHRleHQ6ICc8aSBjbGFzcz1cImZhcyBmYS1zeW5jXCI+PC9pPicsXG4gICAgY2xhc3NOYW1lOiAnYnRuLWxpbmsnLFxuICAgIGFjdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgcmVsb2FkX3RhYmxlKCk7XG4gICAgfVxuICB9LCB7XG4gICAgdGV4dDogJzxpIGNsYXNzPVwiZmFzIGZhLXBsdXNcIj48L2k+JyxcbiAgICBjbGFzc05hbWU6ICdidG4tbGluaycsXG4gICAgYWN0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICBtb2RhbF9hZGRfaG9zdF9ydWxlLnZhbHVlLnNob3coKTtcbiAgICB9XG4gIH0pO1xuXG4gIGNvbnN0IGNvbHVtbnMgPSBbXG4gICAgeyBjb2x1bW5OYW1lOiBfaTE4bihcImFjdGlvbnNcIiksIHdpZHRoOiAnNSUnLCB0YXJnZXRzOjAgLCBuYW1lOiAnYWN0aW9ucycsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgb3JkZXJhYmxlOiBmYWxzZSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAwLCByZW5kZXI6IGZ1bmN0aW9uIChfLCB0eXBlLCByb3dEYXRhKSB7IHJldHVybiBhZGRfYWN0aW9uX2NvbHVtbihyb3dEYXRhKSB9IH0sXG4gICAgeyBjb2x1bW5OYW1lOiBfaTE4bihcImlkXCIpLCB2aXNpYmxlOiBmYWxzZSwgdGFyZ2V0czogMSwgbmFtZTogJ2lkJywgZGF0YTogJ2lkJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEgfSxcbiAgICB7IGNvbHVtbk5hbWU6IF9pMThuKFwiaWZfc3RhdHNfY29uZmlnLnRhcmdldFwiKSwgdGFyZ2V0czogMiwgd2lkdGg6ICcyMCcsIG5hbWU6ICd0YXJnZXQnLCBkYXRhOiAndGFyZ2V0JywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogZnVuY3Rpb24gKGRhdGEsIF8sIHJvd0RhdGEpIHsgcmV0dXJuIGZvcm1hdF90YXJnZXQoZGF0YSwgcm93RGF0YSkgfSB9LFxuICAgIHsgY29sdW1uTmFtZTogX2kxOG4oXCJpZl9zdGF0c19jb25maWcucnVsZV90eXBlXCIpLCB0YXJnZXRzOiAzLCB3aWR0aDogJzIwJywgbmFtZTogJ3J1bGVfdHlwZScsIGRhdGE6ICdydWxlX3R5cGUnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiBmdW5jdGlvbiAoZGF0YSwgXywgcm93RGF0YSkgeyByZXR1cm4gZm9ybWF0X3J1bGVfdHlwZShkYXRhLCByb3dEYXRhKSB9IH0sXG4gICAgeyBjb2x1bW5OYW1lOiBfaTE4bihcImlmX3N0YXRzX2NvbmZpZy5tZXRyaWNcIiksIHRhcmdldHM6IDQsIHdpZHRoOiAnMTAnLCBuYW1lOiAnbWV0cmljJywgZGF0YTogJ21ldHJpYycsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IGZ1bmN0aW9uIChkYXRhLCBfLCByb3dEYXRhKSB7IHJldHVybiBmb3JtYXRfbWV0cmljKGRhdGEsIHJvd0RhdGEpIH0gfSxcbiAgICB7IGNvbHVtbk5hbWU6IF9pMThuKFwiaWZfc3RhdHNfY29uZmlnLmZyZXF1ZW5jeVwiKSwgdGFyZ2V0czogNSwgd2lkdGg6ICcxMCcsIG5hbWU6ICdmcmVxdWVuY3knLCBkYXRhOiAnZnJlcXVlbmN5JywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogZnVuY3Rpb24gKGRhdGEpIHsgcmV0dXJuIGZvcm1hdF9mcmVxdWVuY3koZGF0YSkgfSB9LFxuICAgIHsgY29sdW1uTmFtZTogX2kxOG4oXCJpZl9zdGF0c19jb25maWcubGFzdF9tZWFzdXJlbWVudFwiKSwgdGFyZ2V0czo2ICwgd2lkdGg6ICcxMCcsIG5hbWU6ICdsYXN0X21lYXN1cmVtZW50JywgZGF0YTogJ2xhc3RfbWVhc3VyZW1lbnQnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiBmdW5jdGlvbiAoZGF0YSwgXywgcm93RGF0YSkgeyByZXR1cm4gZm9ybWF0X2xhc3RfbWVhc3VyZW1lbnQoZGF0YSwgcm93RGF0YSkgfSB9LFxuICAgIHsgY29sdW1uTmFtZTogX2kxOG4oXCJpZl9zdGF0c19jb25maWcudGhyZXNob2xkXCIpLCB0YXJnZXRzOiA3LCB3aWR0aDogJzEwJywgbmFtZTogJ3RocmVzaG9sZCcsIGRhdGE6ICd0aHJlc2hvbGQnLCBjbGFzc05hbWU6ICd0ZXh0LWVuZCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiBmdW5jdGlvbiAoZGF0YSwgXywgcm93RGF0YSkgeyByZXR1cm4gZm9ybWF0X3RocmVzaG9sZChkYXRhLCByb3dEYXRhKSB9IH0sXG4gICAgeyBjb2x1bW5OYW1lOiBfaTE4bihcIm1ldHJpY190eXBlXCIpLCB2aXNpYmxlOiBmYWxzZSwgdGFyZ2V0czogOCwgbmFtZTogJ21ldHJpY190eXBlJywgZGF0YTogJ21ldHJpY190eXBlJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEgfSxcbiAgXTtcblxuICBjb25zdCBob3N0UnVsZXNUYWJsZUNvbmZpZyA9IHtcbiAgICB0YWJsZV9idXR0b25zOiBkYXRhdGFibGVCdXR0b24sXG4gICAgZGF0YV91cmw6IE50b3BVdGlscy5idWlsZFVSTChkYXRhX3VybCwgcmVzdF9wYXJhbXMpLFxuICAgIGVuYWJsZV9zZWFyY2g6IHRydWUsXG4gICAgY29sdW1uc19jb25maWc6IGNvbHVtbnMsXG4gICAgdGFibGVfY29uZmlnOiB7XG4gICAgICBzY3JvbGxYOiBmYWxzZSxcbiAgICAgIHNlcnZlclNpZGU6IGZhbHNlLFxuICAgICAgb3JkZXI6IFtbMSAvKiB0YXJnZXQgKi8sICdkZXNjJ11dLFxuICAgICAgY29sdW1uRGVmczogY29sdW1uc1xuICAgIH1cbiAgfTtcblxuICBob3N0X3J1bGVzX3RhYmxlX2NvbmZpZyA9IGhvc3RSdWxlc1RhYmxlQ29uZmlnO1xufTtcblxub25CZWZvcmVNb3VudChhc3luYyAoKSA9PiB7XG4gIHN0YXJ0X2RhdGF0YWJsZSgpO1xuICBhd2FpdCBnZXRfbWV0cmljX2xpc3QoKTtcbiAgYXdhaXQgZ2V0X2lmaWRfbGlzdCgpO1xuICBhd2FpdCBnZXRfaW50ZXJmYWNlX21ldHJpY19saXN0KCk7XG4gIGF3YWl0IGdldF9mbG93X2V4cG9ydGVyX2RldmljZXNfbWV0cmljX2xpc3QoKTtcbiAgYXdhaXQgZ2V0X2Zsb3dfZXhwb3J0ZXJfZGV2aWNlc19saXN0KCk7XG4gIGF3YWl0IGdldF9ob3N0X3Bvb2xfbGlzdCgpO1xuICBhd2FpdCBnZXRfaG9zdF9wb29sX21ldHJpY19saXN0KCk7XG4gIGF3YWl0IGdldF9uZXR3b3JrX2xpc3QoKTtcbiAgYXdhaXQgZ2V0X25ldHdvcmtfbWV0cmljX2xpc3QoKTtcbiAgaWYgKHByb3BzLmhhc192bGFucykge1xuICAgIGF3YWl0IGdldF92bGFucygpO1xuICAgIGF3YWl0IGdldF92bGFuX21ldHJpY19saXN0KCk7XG4gIH1cbiAgbW9kYWxfYWRkX2hvc3RfcnVsZS52YWx1ZS5tZXRyaWNzTG9hZGVkKG1ldHJpY19saXN0LCBpZmlkX2xpc3QsIGludGVyZmFjZV9tZXRyaWNfbGlzdCwgZmxvd19leHBvcnRlcl9saXN0LCBmbG93X2V4cG9ydGVyX21ldHJpY19saXN0LCBwcm9wcy5wYWdlX2NzcmYsIG51bGwsIG51bGwsIGhvc3RfcG9vbF9saXN0LCBuZXR3b3JrX2xpc3QsIGhvc3RfcG9vbF9tZXRyaWNfbGlzdCwgbmV0d29ya19tZXRyaWNfbGlzdCwgdmxhbl9saXN0LCB2bGFuX21ldHJpY19saXN0KTtcbn0pO1xuXG5vblVubW91bnRlZCgoKSA9PiB7XG4gIGRlc3Ryb3lfdGFibGUoKTtcbn0pO1xuPC9zY3JpcHQ+XG5cblxuXG5cblxuXG4iLCI8IS0tXG4gIChDKSAyMDEzLTIyIC0gbnRvcC5vcmdcbi0tPlxuXG48dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmRcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm92ZXJsYXkganVzdGlmeS1jb250ZW50LWNlbnRlciBhbGlnbi1pdGVtcy1jZW50ZXIgcG9zaXRpb24tYWJzb2x1dGUgaC0xMDAgdy0xMDBcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXJcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzcGlubmVyLWJvcmRlciB0ZXh0LXByaW1hcnkgbXQtNVwiIHJvbGU9XCJzdGF0dXNcIj5cbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzci1vbmx5IHBvc2l0aW9uLWFic29sdXRlXCI+TG9hZGluZy4uLjwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgICAgIDxkaXYgaWQ9XCJob3N0X2RldGFpbHNfcG9ydHNcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJyb3cgbWItNCBtdC00XCIgaWQ9XCJob3N0X2RldGFpbHNfcG9ydHNcIj5cbiAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtZm9yPVwidGFibGVfb3B0aW9uIGluIHRhYmxlX29wdGlvbnNcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTZcIj5cbiAgICAgICAgICAgICAgICAgIDxCb290c3RyYXBUYWJsZVxuICAgICAgICAgICAgICAgICAgICA6aWQ9XCJ0YWJsZV9vcHRpb24uaWRcIlxuICAgICAgICAgICAgICAgICAgICA6Y29sdW1ucz1cInRhYmxlX29wdGlvbi5jb2x1bW5zXCJcbiAgICAgICAgICAgICAgICAgICAgOnJvd3M9XCJ0YWJsZV9vcHRpb24uc3RhdHNfcm93c1wiXG4gICAgICAgICAgICAgICAgICAgIDpwcmludF9odG1sX2NvbHVtbj1cIihjb2wpID0+IHByaW50X3N0YXRzX2NvbHVtbihjb2wpXCJcbiAgICAgICAgICAgICAgICAgICAgOnByaW50X2h0bWxfcm93PVwiKGNvbCwgcm93KSA9PiBwcmludF9zdGF0c19yb3coY29sLCByb3cpXCI+XG4gICAgICAgICAgICAgICAgICA8L0Jvb3RzdHJhcFRhYmxlPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbiAgXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvblVubW91bnRlZCwgb25CZWZvcmVNb3VudCwgY29tcHV0ZWQsIHdhdGNoLCBvbk1vdW50ZWQgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIENoYXJ0IH0gZnJvbSBcIi4vY2hhcnQudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIEJvb3RzdHJhcFRhYmxlIH0gZnJvbSBcIi4vYm9vdHN0cmFwLXRhYmxlLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLCBudG9wbmdfdXJsX21hbmFnZXIsIG50b3BuZ191dGlsaXR5IH0gZnJvbSAnLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcyc7XG5pbXBvcnQgTnRvcFV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvbnRvcC11dGlsc1wiO1xuXG5jb25zdCBwb3J0c190YWJsZSA9IHJlZihudWxsKTtcbmNvbnN0IGNoYXJ0cyA9IHJlZihbXSk7XG5jb25zdCBjb25maWdfdHJhZmZpY190YWJsZSA9IHJlZih7fSk7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgcGFnZV9jc3JmOiBTdHJpbmcsXG59KVxuXG5jb25zdCBnZXRfZl9nZXRfY3VzdG9tX2NoYXJ0X29wdGlvbnMgPSAoKSA9PiB7XG4gIGNvbnNvbGUubG9nKFwiZ2V0X2ZfXCIpO1xuICByZXR1cm4gYXN5bmMgKHVybCkgPT4ge1xuICAgIHJldHVybiBjaGFydHNfb3B0aW9uc19pdGVtcy52YWx1ZVtjaGFydF9pbmRleF0uY2hhcnRfb3B0aW9ucztcbiAgfVxufVxuXG5mdW5jdGlvbiBwcmludF9zdGF0c19jb2x1bW4oY29sKSB7XG4gIHJldHVybiBjb2wubGFiZWw7XG59XG5cbmZ1bmN0aW9uIHByaW50X3N0YXRzX3Jvdyhjb2wsIHJvdykge1xuICAvLyBkZWJ1Z2dlcjtcbiAgbGV0IGxhYmVsID0gcm93LmxhYmVsO1xuICByZXR1cm4gbGFiZWw7XG59XG5cbmNvbnN0IGRlc3Ryb3kgPSAoKSA9PiB7XG4gIHRyYWZmaWNfdGFibGUudmFsdWUuZGVzdHJveV90YWJsZSgpO1xufVxuXG5jb25zdCByZWxvYWRfdGFibGUgPSAoKSA9PiB7XG4gIHRyYWZmaWNfdGFibGUudmFsdWUucmVsb2FkKCk7XG59XG4gICAgXG5vbkJlZm9yZU1vdW50KGFzeW5jICgpID0+IHtcbiAgYXdhaXQgc3RhcnRfZGF0YXRhYmxlKCk7XG59KTtcblxub25Nb3VudGVkKGFzeW5jICgpID0+IHtcbiAgTnRvcFV0aWxzLmhpZGVPdmVybGF5cygpO1xufSlcblxub25Vbm1vdW50ZWQoYXN5bmMgKCkgPT4ge1xuICBkZXN0cm95KClcbn0pO1xuXG5jb25zdCBjaGFydF9vcHRpb25zID0gW1xuICB7XG4gICAgdGl0bGU6IGkxOG4oJ2dyYXBocy5jbGlfcG9ydHMnKSxcbiAgICB0eXBlOiBudG9wQ2hhcnRBcGV4LnR5cGVDaGFydC5ET05VVCxcbiAgICB1cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9wb3J0L2NsaV9wb3J0X2RhdGEubHVhYCxcbiAgICBpZDogYGNsaV9wb3J0X2Zsb3dzYCxcbiAgfSxcbiAge1xuICAgIHRpdGxlOiBpMThuKCdncmFwaHMuc3J2X3BvcnRzJyksXG4gICAgdHlwZTogbnRvcENoYXJ0QXBleC50eXBlQ2hhcnQuRE9OVVQsXG4gICAgdXJsOiBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvcG9ydC9zcnZfcG9ydF9kYXRhLmx1YWAsXG4gICAgaWQ6IGBzcnZfcG9ydF9mbG93c2AsXG4gIH0sXG5dXG5cbmNvbnN0IHRhYmxlX29wdGlvbnMgPSBbXG4gIHtcbiAgICB1cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9wb3J0L3RhYmxlX3BvcnRfZGF0YS5sdWFgLFxuICAgIGlkOiBgY2xpX3BvcnRfZmxvd3NgLFxuICAgIGV4dHJhX3BhcmFtczoge1xuICAgICAgbW9kZTogJ2xvY2FsJyxcbiAgICAgIHByb3RvY29sOiAndGNwJ1xuICAgIH0sXG4gICAgY29sdW1uczogW1xuICAgICAgeyBpZDogXCJhY3RpdmVfc2VydmVyX3RjcF9wb3J0c1wiLCBsYWJlbDogX2kxOG4oXCJwb3J0c19wYWdlLmFjdGl2ZV9zZXJ2ZXJfdGNwX3BvcnRzXCIpIH0sXG4gICAgICB7IGlkOiBcInBvcnRfYXBwbGljYXRpb25cIiwgbGFiZWw6IF9pMThuKFwicG9ydFwiKSB9LFxuICAgIF0sXG4gICAgc3RhdHNfcm93czogW10sXG4gIH0sXG4gIHtcbiAgICB1cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9wb3J0L3RhYmxlX3BvcnRfZGF0YS5sdWFgLFxuICAgIGlkOiBgY2xpX3BvcnRfZmxvd3NgLFxuICAgIGV4dHJhX3BhcmFtczoge1xuICAgICAgbW9kZTogJ2xvY2FsJyxcbiAgICAgIHByb3RvY29sOiAndWRwJ1xuICAgIH0sXG4gICAgY29sdW1uczogW1xuICAgICAgeyBpZDogXCJhY3RpdmVfc2VydmVyX3VkcF9wb3J0c1wiLCBsYWJlbDogX2kxOG4oXCJwb3J0c19wYWdlLmFjdGl2ZV9zZXJ2ZXJfdWRwX3BvcnRzXCIpIH0sXG4gICAgICB7IGlkOiBcInBvcnRfYXBwbGljYXRpb25cIiwgbGFiZWw6IF9pMThuKFwicG9ydFwiKSB9LFxuICAgIF0sXG4gICAgc3RhdHNfcm93czogW10sXG4gIH0sXG4gIHtcbiAgICB1cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9wb3J0L3RhYmxlX3BvcnRfZGF0YS5sdWFgLFxuICAgIGlkOiBgc3J2X3BvcnRfZmxvd3NgLFxuICAgIGV4dHJhX3BhcmFtczoge1xuICAgICAgbW9kZTogJ3JlbW90ZScsXG4gICAgICBwcm90b2NvbDogJ3RjcCdcbiAgICB9LFxuICAgIGNvbHVtbnM6IFtcbiAgICAgIHsgaWQ6IFwiY2xpZW50X2NvbnRhY3RlZF9zZXJ2ZXJfdGNwX3BvcnRzXCIsIGxhYmVsOiBfaTE4bihcInBvcnRzX3BhZ2UuY2xpZW50X2NvbnRhY3RlZF9zZXJ2ZXJfdGNwX3BvcnRzXCIpIH0sXG4gICAgICB7IGlkOiBcInBvcnRfYXBwbGljYXRpb25cIiwgbGFiZWw6IF9pMThuKFwicG9ydFwiKSB9LFxuICAgIF0sXG4gICAgc3RhdHNfcm93czogW10sXG4gIH0sXG4gIHtcbiAgICB1cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9wb3J0L3RhYmxlX3BvcnRfZGF0YS5sdWFgLFxuICAgIGlkOiBgc3J2X3BvcnRfZmxvd3NgLFxuICAgIGV4dHJhX3BhcmFtczoge1xuICAgICAgbW9kZTogJ3JlbW90ZScsXG4gICAgICBwcm90b2NvbDogJ3VkcCdcbiAgICB9LFxuICAgIGNvbHVtbnM6IFtcbiAgICAgIHsgaWQ6IFwiY2xpZW50X2NvbnRhY3RlZF9zZXJ2ZXJfdWRwX3BvcnRzXCIsIGxhYmVsOiBfaTE4bihcInBvcnRzX3BhZ2UuY2xpZW50X2NvbnRhY3RlZF9zZXJ2ZXJfdWRwX3BvcnRzXCIpIH0sXG4gICAgICB7IGlkOiBcInBvcnRfYXBwbGljYXRpb25cIiwgbGFiZWw6IF9pMThuKFwicG9ydFwiKSB9LFxuICAgIF0sXG4gICAgc3RhdHNfcm93czogW10sXG4gIH0sXG5dXG5cbmFzeW5jIGZ1bmN0aW9uIHN0YXJ0X2RhdGF0YWJsZSgpIHtcbiAgbGV0IHVybF9wYXJhbXMgPSB7fVxuICBcbiAgdXJsX3BhcmFtc1tcImhvc3RcIl0gPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImhvc3RcIilcbiAgdXJsX3BhcmFtc1tcInZsYW5cIl0gPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInZsYW5cIilcbiAgdXJsX3BhcmFtc1tcImlmaWRcIl0gPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImlmaWRcIilcbiAgICBcbiAgdGFibGVfb3B0aW9ucy5mb3JFYWNoKCh0YWJsZSkgPT4ge1xuICAgIGxldCB0bXBfcGFyYW1zID0ge1xuICAgICAgLi4udGFibGUuZXh0cmFfcGFyYW1zLFxuICAgICAgLi4udXJsX3BhcmFtcyxcbiAgICB9XG5cbiAgICAkLmdldChOdG9wVXRpbHMuYnVpbGRVUkwodGFibGUudXJsLCB0bXBfcGFyYW1zKSwgYXN5bmMgZnVuY3Rpb24oZGF0YSwgc3RhdHVzKXtcbiAgICAgIC8vIGRlYnVnZ2VyO1xuICAgICAgbGV0IHJvd3MgPSBbXVxuICAgICAgZGF0YS5yc3AuZm9yRWFjaCgoZGF0YSkgPT4ge1xuICAgICAgICBjb25zdCBwb3J0ID0gZGF0YS5wb3J0X2luZm8ucG9ydFxuICAgICAgICBjb25zdCBwcm90byA9IGRhdGEucG9ydF9pbmZvLmw3X3Byb3RvXG4gICAgICAgIHJvd3MucHVzaCh7IGxhYmVsOiBgJHtwb3J0fSAoJHtwcm90b30pYCB9KVxuICAgICAgfSlcbiAgICAgIHRhYmxlLnN0YXRzX3Jvd3MgPSByb3dzO1xuICAgIH0pO1xuICB9KVxufVxuPC9zY3JpcHQ+XG5cblxuXG5cblxuXG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuXG48dGVtcGxhdGU+XG48ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtMTJcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZFwiPlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgICA8ZGl2IGNsYXNzPSdhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWVuZCBtYi0zJyBzdHlsZT0naGVpZ2h0OiA3MHZoOyc+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBtcy1hdXRvIGZsZXgtcm93LXJldmVyc2VcIj5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cIm15LWF1dG8gbWUtMVwiPjwvbGFiZWw+XG4gICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tbGluayBtLTFcIiB0YWJpbmRleD1cIjBcIiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwicmVsb2FkXCI+XG4gICAgICAgICAgICAgICAgICA8c3Bhbj48aSBjbGFzcz1cImZhcyBmYS1zeW5jXCI+PC9pPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cIih2YWx1ZSwga2V5LCBpbmRleCkgaW4gYXZhaWxhYmxlX2ZpbHRlcnNcIj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm0tMVwiIHYtaWY9XCJ2YWx1ZS5sZW5ndGggPiAwXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBzdHlsZT1cIm1pbi13aWR0aDogMTRyZW07XCI+XG4gICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJteS1hdXRvIG1lLTFcIj57eyBfaTE4bignYnViYmxlX21hcC4nICsga2V5KSB9fTogPC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgIDxTZWxlY3RTZWFyY2hcbiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJhY3RpdmVfZmlsdGVyX2xpc3Rba2V5XVwiXG4gICAgICAgICAgICAgICAgICAgIDpvcHRpb25zPVwidmFsdWVcIlxuICAgICAgICAgICAgICAgICAgICBAc2VsZWN0X29wdGlvbj1cImNsaWNrX2l0ZW1cIj5cbiAgICAgICAgICAgICAgICAgIDwvU2VsZWN0U2VhcmNoPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPExvYWRpbmcgdi1pZj1cImxvYWRpbmdcIj48L0xvYWRpbmc+XG4gICAgICAgICAgPGRpdiA6aWQ9XCJ3aWRnZXRfbmFtZVwiIHN0eWxlPVwiaGVpZ2h0OiA5MCU7XCIgOmNsYXNzPVwiWyBsb2FkaW5nID8gJ250b3BuZy1ncmF5LW91dCcgOiAnJyBdXCI+XG4gICAgICAgICAgICA8Q2hhcnRcbiAgICAgICAgICAgICAgcmVmPVwiYnViYmxlX2NoYXJ0XCJcbiAgICAgICAgICAgICAgOmlkPVwid2lkZ2V0X25hbWVcIlxuICAgICAgICAgICAgICA6Y2hhcnRfdHlwZT1cImNoYXJ0X3R5cGVcIlxuICAgICAgICAgICAgICA6YmFzZV91cmxfcmVxdWVzdD1cInJlc3RfdXJsXCJcbiAgICAgICAgICAgICAgOmdldF9wYXJhbXNfdXJsX3JlcXVlc3Q9XCJmb3JtYXRfcmVxdWVzdFwiXG4gICAgICAgICAgICAgIDpnZXRfY3VzdG9tX2NoYXJ0X29wdGlvbnM9XCJnZXRfZl9nZXRfY3VzdG9tX2NoYXJ0X29wdGlvbnMoKVwiXG4gICAgICAgICAgICAgIDpyZWdpc3Rlcl9vbl9zdGF0dXNfY2hhbmdlPVwiZmFsc2VcIj5cbiAgICAgICAgICAgIDwvQ2hhcnQ+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIG9uQmVmb3JlTW91bnQgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIENoYXJ0IH0gZnJvbSBcIi4vY2hhcnQudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIExvYWRpbmcgfSBmcm9tIFwiLi9sb2FkaW5nLnZ1ZVwiXG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdFNlYXJjaCB9IGZyb20gXCIuL3NlbGVjdC1zZWFyY2gudnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlc1wiO1xuaW1wb3J0IE50b3BVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL250b3AtdXRpbHNcIjtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICBpZmlkOiBTdHJpbmcsXG4gIHBhZ2VfY3NyZjogU3RyaW5nLFxuICBjaGFydHNfb3B0aW9uczogQXJyYXksXG4gIGF2YWlsYWJsZV9maWx0ZXJzOiBPYmplY3QsXG59KVxuXG5jb25zdCBsb2FkaW5nID0gcmVmKGZhbHNlKTtcbmNvbnN0IGNoYXJ0X3R5cGUgPSBudG9wQ2hhcnRBcGV4LnR5cGVDaGFydC5CVUJCTEVcbmNvbnN0IHJlc3RfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9jaGFydHMvYWxlcnQvYW5hbHlzaXMubHVhYFxuY29uc3Qgd2lkZ2V0X25hbWUgPSAnYWxlcnRzLW1hcCc7XG5jb25zdCBhY3RpdmVfZmlsdGVyX2xpc3QgPSB7fVxuY29uc3QgYnViYmxlX2NoYXJ0ID0gcmVmKG51bGwpXG5cbmNvbnN0IGZvcm1hdF9yZXF1ZXN0ID0gZnVuY3Rpb24oKSB7XG4gIGxldCBwYXJhbXNfc3RyaW5nID0gJydcbiAgY29uc3QgcGFyYW1zID0ge1xuICAgIGJ1YmJsZV9tb2RlOiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgnYnViYmxlX21vZGUnKSxcbiAgICB0aW1lZnJhbWU6IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCd0aW1lZnJhbWUnKSxcbiAgICB2bGFuOiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgndmxhbicpLFxuICAgIGlmaWQ6IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCdpZmlkJyksXG4gIH1cblxuICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhwYXJhbXMpKSB7XG4gICAgcGFyYW1zX3N0cmluZyA9IGAke3BhcmFtc19zdHJpbmd9JiR7a2V5fT0ke3ZhbHVlfWBcbiAgfVxuXG4gIC8qIFJldHVybiBhIGN1c3RvbSBzdHJpbmcsIGNvbnRhaW5pbmcgY3VzdG9tIG9wdGlvbnMgKi9cbiAgcmV0dXJuIHBhcmFtc19zdHJpbmdcbn1cblxuY29uc3QgcmVsb2FkID0gZnVuY3Rpb24oKSB7XG4gIGxvYWRpbmcudmFsdWUgPSB0cnVlO1xuICBidWJibGVfY2hhcnQudmFsdWUudXBkYXRlX2NoYXJ0KGAke3Jlc3RfdXJsfT8ke2Zvcm1hdF9yZXF1ZXN0KCl9YClcbiAgbG9hZGluZy52YWx1ZSA9IGZhbHNlO1xufVxuXG5jb25zdCBmb3JtYXRfb3B0aW9ucyA9IGZ1bmN0aW9uKG1vZGVfaWQpIHtcbiAgbGV0IG9wdGlvbnMgPSB7fVxuXG4gIHByb3BzLmNoYXJ0c19vcHRpb25zLmZvckVhY2goKG9wdGlvbl9saXN0KSA9PiB7XG4gICAgaWYob3B0aW9uX2xpc3QubW9kZV9pZCA9PSBtb2RlX2lkKVxuICAgICAgb3B0aW9ucyA9IG9wdGlvbl9saXN0O1xuICB9KVxuXG4gIC8qIEFkZCB0aGUgY29ycmVjdCBldmVudCBmdW5jdGlvbnMgKi9cbiAgaWYob3B0aW9ucyAmJiBvcHRpb25zLmNoYXJ0ICYmIG9wdGlvbnMuY2hhcnQubnRvcF9ldmVudHMpIHtcbiAgICBvcHRpb25zLmNoYXJ0LmV2ZW50cyA9IG9wdGlvbnMuY2hhcnQuZXZlbnRzIHx8IHt9XG4gICAgZm9yKGNvbnN0IFtldmVudCwgZnVuXSBvZiBPYmplY3QuZW50cmllcyhvcHRpb25zLmNoYXJ0Lm50b3BfZXZlbnRzKSkge1xuICAgICAgaWYoZnVuID09IHVuZGVmaW5lZCkgXG4gICAgICAgIGNvbnRpbnVlXG5cbiAgICAgIG9wdGlvbnMuY2hhcnQuZXZlbnRzW2V2ZW50XSA9IE50b3BVdGlsc1tmdW5dIHx8IE50b3BVdGlscy5mbm9uZVxuICAgIH1cbiAgfVxuXG4gIC8qIEFkZCB0aGUgY29ycmVjdCBmb3JtYXR0aW5nIGZ1bmN0aW9uLCBnaXZlbiBmcm9tIHRoZSBiYWNrZW5kICovXG4gIGlmKG9wdGlvbnMgJiYgb3B0aW9ucy54YXhpcyAmJiBvcHRpb25zLnhheGlzLmxhYmVscyAmJiBvcHRpb25zLnhheGlzLmxhYmVscy5udG9wX3V0aWxzX2Zvcm1hdHRlcikge1xuICAgIG9wdGlvbnMueGF4aXMubGFiZWxzLmZvcm1hdHRlciA9IE50b3BVdGlsc1tvcHRpb25zLnhheGlzLmxhYmVscy5udG9wX3V0aWxzX2Zvcm1hdHRlcl0gfHwgTnRvcFV0aWxzLmZub25lXG4gIH1cblxuICAvKiBBZGQgdGhlIGNvcnJlY3QgZm9ybWF0dGluZyBmdW5jdGlvbiwgZ2l2ZW4gZnJvbSB0aGUgYmFja2VuZCAqL1xuICBpZihvcHRpb25zICYmIG9wdGlvbnMueWF4aXMgJiYgb3B0aW9ucy55YXhpcy5sYWJlbHMgJiYgb3B0aW9ucy55YXhpcy5sYWJlbHMubnRvcF91dGlsc19mb3JtYXR0ZXIpIHtcbiAgICBvcHRpb25zLnlheGlzLmxhYmVscy5mb3JtYXR0ZXIgPSBOdG9wVXRpbHNbb3B0aW9ucy55YXhpcy5sYWJlbHMubnRvcF91dGlsc19mb3JtYXR0ZXJdIHx8IE50b3BVdGlscy5mbm9uZVxuICB9XG5cbiAgLyogQWRkIHRoZSBjb3JyZWN0IGZvcm1hdHRpbmcgZnVuY3Rpb24sIGdpdmVuIGZyb20gdGhlIGJhY2tlbmQgKi9cbiAgaWYob3B0aW9ucyAmJiBvcHRpb25zLnRvb2x0aXAgJiYgb3B0aW9ucy50b29sdGlwLm50b3BfdXRpbHNfZm9ybWF0dGVyKVxuICAgIG9wdGlvbnMudG9vbHRpcC5jdXN0b20gPSBOdG9wVXRpbHNbb3B0aW9ucy50b29sdGlwLm50b3BfdXRpbHNfZm9ybWF0dGVyXVxuXG4gIHJldHVybiBvcHRpb25zXG59XG5cbmNvbnN0IGdldF9mX2dldF9jdXN0b21fY2hhcnRfb3B0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICBcbiAgLyogUmV0dXJuIHRoZSBsaXN0IG9mIGZvcm1hdHRlZCBvcHRpb25zIG9mIHRoZSBjaGFydCAqL1xuICByZXR1cm4gYXN5bmMgKHVybCkgPT4ge1xuICAgIGxldCBvcHRpb25zID0gZm9ybWF0X29wdGlvbnMoTnVtYmVyKGFjdGl2ZV9maWx0ZXJfbGlzdFsnYnViYmxlX21vZGUnXS5pZCkpXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwpO1xuICAgIG9wdGlvbnMuc2VyaWVzID0gZGF0YS5zZXJpZXMgfHwge31cbiAgICByZXR1cm4gb3B0aW9uc1xuICB9XG59XG5cbmNvbnN0IGNsaWNrX2l0ZW0gPSBmdW5jdGlvbihpdGVtKSB7XG4gIGxvYWRpbmcudmFsdWUgPSB0cnVlO1xuICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoaXRlbS5maWx0ZXJfbmFtZSwgaXRlbS5pZClcbiAgYnViYmxlX2NoYXJ0LnZhbHVlLnVwZGF0ZV9jaGFydChgJHtyZXN0X3VybH0/JHtmb3JtYXRfcmVxdWVzdCgpfWApXG4gIGxvYWRpbmcudmFsdWUgPSBmYWxzZTtcbn1cblxub25CZWZvcmVNb3VudCgoKSA9PiB7XG4gIC8qIEJlZm9yZSBtb3VudGluZyB0aGUgdmFyaW91cyB3aWRnZXRzLCB1cGRhdGUgdGhlIHVybCB0byB0aGUgY29ycmVjdCBvbmUsIGJ5IGFkZGluZyBpZmlkLCBlY2MuICovXG4gIGNvbnN0IHRpbWVmcmFtZSA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCd0aW1lZnJhbWUnKTtcbiAgY29uc3QgdmxhbiA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCd2bGFuJyk7XG4gIGNvbnN0IGJ1YmJsZV9tb2RlID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ2J1YmJsZV9tb2RlJyk7XG4gIFxuICBpZighYnViYmxlX21vZGUpIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgnYnViYmxlX21vZGUnLCAwKSAvKiBGaXJzdCBFbnRyeSAqL1xuICBpZighdGltZWZyYW1lKSBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoJ3RpbWVmcmFtZScsIDMwMCkgLyogRGVmYXVsdCA1IG1pbiAqL1xuICBpZighdmxhbikgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCd2bGFuJywgJycpIC8qIERlZmF1bHQgbm8gdmxhbiAqL1xuICBcbiAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCdpZmlkJywgcHJvcHMuaWZpZCkgLyogQ3VycmVudCBpbnRlcmZhY2UgKi9cblxuICBmb3IoY29uc3QgW25hbWUsIGZpbHRlcnNdIG9mIE9iamVjdC5lbnRyaWVzKHByb3BzLmF2YWlsYWJsZV9maWx0ZXJzKSkge1xuICAgIGZpbHRlcnMuZm9yRWFjaCgoZmlsdGVyKSA9PiB7XG4gICAgICBmaWx0ZXIuZmlsdGVyX25hbWUgPSBuYW1lXG4gICAgICBpZihmaWx0ZXIuY3VycmVudGx5X2FjdGl2ZSlcbiAgICAgICAgYWN0aXZlX2ZpbHRlcl9saXN0W25hbWVdID0gZmlsdGVyO1xuICAgIH0pXG4gIH1cbn0pO1xuXG5vbk1vdW50ZWQoKCkgPT4ge1xuICBsb2FkaW5nLnZhbHVlID0gZmFsc2U7XG59KVxuPC9zY3JpcHQ+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuXG48dGVtcGxhdGU+XG48ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtMTJcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZFwiPlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgICA8ZGl2IGNsYXNzPSdhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWVuZCBtYi0zJyBzdHlsZT0naGVpZ2h0OiA3MHZoOyc+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBtcy1hdXRvIGZsZXgtcm93LXJldmVyc2VcIj5cbiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cIm15LWF1dG8gbWUtMVwiPjwvbGFiZWw+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibS0xXCIgdi1mb3I9XCIodmFsdWUsIGtleSwgaW5kZXgpIGluIGF2YWlsYWJsZV9maWx0ZXJzXCI+XG4gICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwidmFsdWUubGVuZ3RoID4gMFwiPlxuICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9XCJtaW4td2lkdGg6IDE4cmVtO1wiPlxuICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwibXktYXV0byBtZS0xXCI+e3sgX2kxOG4oJ2J1YmJsZV9tYXAuJyArIGtleSkgfX06IDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICA8U2VsZWN0U2VhcmNoXG4gICAgICAgICAgICAgICAgICAgIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwiYWN0aXZlX2ZpbHRlcl9saXN0W2tleV1cIlxuICAgICAgICAgICAgICAgICAgICA6b3B0aW9ucz1cInZhbHVlXCJcbiAgICAgICAgICAgICAgICAgICAgQHNlbGVjdF9vcHRpb249XCJjbGlja19pdGVtXCI+XG4gICAgICAgICAgICAgICAgICA8L1NlbGVjdFNlYXJjaD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgOmlkPVwid2lkZ2V0X25hbWVcIiBzdHlsZT1cImhlaWdodDogOTAlO1wiPlxuICAgICAgICAgICAgPENoYXJ0XG4gICAgICAgICAgICAgIHJlZj1cImJ1YmJsZV9jaGFydFwiXG4gICAgICAgICAgICAgIDppZD1cIndpZGdldF9uYW1lXCJcbiAgICAgICAgICAgICAgOmNoYXJ0X3R5cGU9XCJjaGFydF90eXBlXCJcbiAgICAgICAgICAgICAgOmJhc2VfdXJsX3JlcXVlc3Q9XCJyZXN0X3VybFwiXG4gICAgICAgICAgICAgIDpnZXRfcGFyYW1zX3VybF9yZXF1ZXN0PVwiZm9ybWF0X3JlcXVlc3RcIlxuICAgICAgICAgICAgICA6Z2V0X2N1c3RvbV9jaGFydF9vcHRpb25zPVwiZ2V0X2ZfZ2V0X2N1c3RvbV9jaGFydF9vcHRpb25zKClcIlxuICAgICAgICAgICAgICA6cmVnaXN0ZXJfb25fc3RhdHVzX2NoYW5nZT1cImZhbHNlXCI+XG4gICAgICAgICAgICA8L0NoYXJ0PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBvbkJlZm9yZU1vdW50IH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBDaGFydCB9IGZyb20gXCIuL2NoYXJ0LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXNcIjtcbmltcG9ydCBOdG9wVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9udG9wLXV0aWxzXCI7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgaWZpZDogU3RyaW5nLFxuICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgY2hhcnRzX29wdGlvbnM6IEFycmF5LFxuICBhdmFpbGFibGVfZmlsdGVyczogT2JqZWN0LFxufSlcblxuLyogQnkgZGVmYXVsdCB1c2UgdGhlIGZpcnN0IGVudHJ5ICovXG5jb25zdCBjdXJyZW50bHlfc2VsZWN0ZWRfY2hhcnQgPSAwXG5cbmNvbnN0IGNoYXJ0X3R5cGUgPSBudG9wQ2hhcnRBcGV4LnR5cGVDaGFydC5CVUJCTEVcbmNvbnN0IHJlc3RfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2NoYXJ0cy9ob3N0L21hcC5sdWFgXG5jb25zdCB3aWRnZXRfbmFtZSA9ICdhbGVydHMtbWFwJztcbmNvbnN0IGFjdGl2ZV9maWx0ZXJfbGlzdCA9IHt9XG5jb25zdCBidWJibGVfY2hhcnQgPSByZWYobnVsbClcblxuY29uc3QgZm9ybWF0X3JlcXVlc3QgPSBmdW5jdGlvbigpIHtcbiAgbGV0IHBhcmFtc19zdHJpbmcgPSAnJ1xuICBjb25zdCBwYXJhbXMgPSB7XG4gICAgYnViYmxlX21vZGU6IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCdidWJibGVfbW9kZScpLFxuICAgIGlmaWQ6IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCdpZmlkJyksXG4gIH1cblxuICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhwYXJhbXMpKSB7XG4gICAgcGFyYW1zX3N0cmluZyA9IGAke3BhcmFtc19zdHJpbmd9JiR7a2V5fT0ke3ZhbHVlfWBcbiAgfVxuXG4gIC8qIFJldHVybiBhIGN1c3RvbSBzdHJpbmcsIGNvbnRhaW5pbmcgY3VzdG9tIG9wdGlvbnMgKi9cbiAgcmV0dXJuIHBhcmFtc19zdHJpbmdcbn1cblxuY29uc3QgZm9ybWF0X29wdGlvbnMgPSBmdW5jdGlvbihtb2RlX2lkKSB7XG4gIGxldCBvcHRpb25zID0ge31cblxuICBwcm9wcy5jaGFydHNfb3B0aW9ucy5mb3JFYWNoKChvcHRpb25fbGlzdCkgPT4ge1xuICAgIGlmKG9wdGlvbl9saXN0Lm1vZGVfaWQgPT0gbW9kZV9pZClcbiAgICAgIG9wdGlvbnMgPSBvcHRpb25fbGlzdDtcbiAgfSlcblxuICAvKiBBZGQgdGhlIGNvcnJhY3QgZXZlbnQgZnVuY3Rpb25zICovXG4gIGlmKG9wdGlvbnMgJiYgb3B0aW9ucy5jaGFydCAmJiBvcHRpb25zLmNoYXJ0Lm50b3BfZXZlbnRzKSB7XG4gICAgb3B0aW9ucy5jaGFydC5ldmVudHMgPSBvcHRpb25zLmNoYXJ0LmV2ZW50cyB8fCB7fVxuICAgIGZvcihjb25zdCBbZXZlbnQsIGZ1bl0gb2YgT2JqZWN0LmVudHJpZXMob3B0aW9ucy5jaGFydC5udG9wX2V2ZW50cykpIHtcbiAgICAgIGlmKGZ1biA9PSB1bmRlZmluZWQpIFxuICAgICAgICBjb250aW51ZVxuXG4gICAgICBvcHRpb25zLmNoYXJ0LmV2ZW50c1tldmVudF0gPSBOdG9wVXRpbHNbZnVuXSB8fCBOdG9wVXRpbHMuZm5vbmVcbiAgICB9XG4gIH1cblxuICAvKiBBZGQgdGhlIGNvcnJlY3QgZm9ybWF0dGluZyBmdW5jdGlvbiwgZ2l2ZW4gZnJvbSB0aGUgYmFja2VuZCAqL1xuICBpZihvcHRpb25zICYmIG9wdGlvbnMueGF4aXMgJiYgb3B0aW9ucy54YXhpcy5sYWJlbHMgJiYgb3B0aW9ucy54YXhpcy5sYWJlbHMubnRvcF91dGlsc19mb3JtYXR0ZXIpIHtcbiAgICBvcHRpb25zLnhheGlzLmxhYmVscy5mb3JtYXR0ZXIgPSBOdG9wVXRpbHNbb3B0aW9ucy54YXhpcy5sYWJlbHMubnRvcF91dGlsc19mb3JtYXR0ZXJdIHx8IE50b3BVdGlscy5mbm9uZVxuICB9XG5cbiAgLyogQWRkIHRoZSBjb3JyZWN0IGZvcm1hdHRpbmcgZnVuY3Rpb24sIGdpdmVuIGZyb20gdGhlIGJhY2tlbmQgKi9cbiAgaWYob3B0aW9ucyAmJiBvcHRpb25zLnlheGlzICYmIG9wdGlvbnMueWF4aXMubGFiZWxzICYmIG9wdGlvbnMueWF4aXMubGFiZWxzLm50b3BfdXRpbHNfZm9ybWF0dGVyKSB7XG4gICAgb3B0aW9ucy55YXhpcy5sYWJlbHMuZm9ybWF0dGVyID0gTnRvcFV0aWxzW29wdGlvbnMueWF4aXMubGFiZWxzLm50b3BfdXRpbHNfZm9ybWF0dGVyXSB8fCBOdG9wVXRpbHMuZm5vbmVcbiAgfVxuXG4gIC8qIEFkZCB0aGUgY29ycmVjdCBmb3JtYXR0aW5nIGZ1bmN0aW9uLCBnaXZlbiBmcm9tIHRoZSBiYWNrZW5kICovXG4gIGlmKG9wdGlvbnMgJiYgb3B0aW9ucy50b29sdGlwICYmIG9wdGlvbnMudG9vbHRpcC5udG9wX3V0aWxzX2Zvcm1hdHRlcilcbiAgICBvcHRpb25zLnRvb2x0aXAuY3VzdG9tID0gTnRvcFV0aWxzW29wdGlvbnMudG9vbHRpcC5udG9wX3V0aWxzX2Zvcm1hdHRlcl1cblxuICByZXR1cm4gb3B0aW9uc1xufVxuXG5jb25zdCBnZXRfZl9nZXRfY3VzdG9tX2NoYXJ0X29wdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgXG4gIC8qIFJldHVybiB0aGUgbGlzdCBvZiBmb3JtYXR0ZWQgb3B0aW9ucyBvZiB0aGUgY2hhcnQgKi9cbiAgcmV0dXJuIGFzeW5jICh1cmwpID0+IHtcbiAgICBsZXQgb3B0aW9ucyA9IGZvcm1hdF9vcHRpb25zKE51bWJlcihhY3RpdmVfZmlsdGVyX2xpc3RbJ2J1YmJsZV9tb2RlJ10uaWQpKVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsKTtcbiAgICBvcHRpb25zLnNlcmllcyA9IGRhdGEuc2VyaWVzIHx8IHt9XG4gICAgcmV0dXJuIG9wdGlvbnNcbiAgfVxufVxuXG5jb25zdCBjbGlja19pdGVtID0gZnVuY3Rpb24oaXRlbSkge1xuICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoaXRlbS5maWx0ZXJfbmFtZSwgaXRlbS5pZClcbiAgYnViYmxlX2NoYXJ0LnZhbHVlLnVwZGF0ZV9jaGFydChgJHtyZXN0X3VybH0/JHtmb3JtYXRfcmVxdWVzdCgpfWApXG59XG5cbm9uQmVmb3JlTW91bnQoKCkgPT4ge1xuICAvKiBCZWZvcmUgbW91bnRpbmcgdGhlIHZhcmlvdXMgd2lkZ2V0cywgdXBkYXRlIHRoZSB1cmwgdG8gdGhlIGNvcnJlY3Qgb25lLCBieSBhZGRpbmcgaWZpZCwgZWNjLiAqL1xuICBjb25zdCBidWJibGVfbW9kZSA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCdidWJibGVfbW9kZScpO1xuICBcbiAgaWYoIWJ1YmJsZV9tb2RlKSBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoJ2J1YmJsZV9tb2RlJywgMCkgLyogRmlyc3QgRW50cnkgKi9cbiAgXG4gIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgnaWZpZCcsIHByb3BzLmlmaWQpIC8qIEN1cnJlbnQgaW50ZXJmYWNlICovXG5cbiAgZm9yKGNvbnN0IFtuYW1lLCBmaWx0ZXJzXSBvZiBPYmplY3QuZW50cmllcyhwcm9wcy5hdmFpbGFibGVfZmlsdGVycykpIHtcbiAgICBmaWx0ZXJzLmZvckVhY2goKGZpbHRlcikgPT4ge1xuICAgICAgZmlsdGVyLmZpbHRlcl9uYW1lID0gbmFtZVxuICAgICAgaWYoZmlsdGVyLmN1cnJlbnRseV9hY3RpdmUpXG4gICAgICAgIGFjdGl2ZV9maWx0ZXJfbGlzdFtuYW1lXSA9IGZpbHRlcjtcbiAgICB9KVxuICB9XG59KTtcbjwvc2NyaXB0PlxuIiwiPCEtLVxuICAoQykgMjAxMy0yMiAtIG50b3Aub3JnXG4tLT5cblxuPHRlbXBsYXRlPlxuPGRpdiBjbGFzcz1cInJvd1wiPlxuICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkIGNhcmQtc2hhZG93XCI+XG4gICAgICA8TG9hZGluZyB2LWlmPVwibG9hZGluZ1wiPjwvTG9hZGluZz5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImFsaWduLWl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNvbnRlbnQtZW5kIG1iLTJcIiA6Y2xhc3M9XCJbbG9hZGluZyA/ICdudG9wbmctZ3JheS1vdXQnIDogJyddXCIgc3R5bGU9XCJoZWlnaHQ6IDcwdmg7XCIgcmVmPVwiYm9keV9kaXZcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBmbGV4LXJvdy1yZXZlcnNlIG1iLTJcIj5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cIm15LWF1dG8gbWUtMVwiPjwvbGFiZWw+XG4gICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tbGluayBtLTFcIiB0YWJpbmRleD1cIjBcIiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwicmVsb2FkXCI+XG4gICAgICAgICAgICAgICAgICA8c3Bhbj48aSBjbGFzcz1cImZhcyBmYS1zeW5jXCI+PC9pPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cIih2YWx1ZSwga2V5LCBpbmRleCkgaW4gYXZhaWxhYmxlX2ZpbHRlcnNcIj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm0tMVwiIHYtaWY9XCJ2YWx1ZS5sZW5ndGggPiAwXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBzdHlsZT1cIm1pbi13aWR0aDogMTRyZW07XCI+XG4gICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJteS1hdXRvIG1lLTFcIj57eyBfaTE4bigncG9ydHNfYW5hbHlzaXMuJyArIGtleSkgfX06IDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICA8U2VsZWN0U2VhcmNoXG4gICAgICAgICAgICAgICAgICAgIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwiYWN0aXZlX2ZpbHRlcl9saXN0W2tleV1cIlxuICAgICAgICAgICAgICAgICAgICA6b3B0aW9ucz1cInZhbHVlXCJcbiAgICAgICAgICAgICAgICAgICAgQHNlbGVjdF9vcHRpb249XCJjbGlja19pdGVtXCI+XG4gICAgICAgICAgICAgICAgICA8L1NlbGVjdFNlYXJjaD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCJtYXhfZW50cmllc19yZWFjaGVkID09IHRydWVcIj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm10LWF1dG8gbS0xXCIgOnRpdGxlPW1heF9lbnRyeV90aXRsZSBzdHlsZT1cImN1cnNvcjogaGVscDtcIj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tbGlua1wiIGRpc2FibGVkPlxuICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJ0ZXh0LWRhbmdlciBmYS1zb2xpZCBmYS10cmlhbmdsZS1leGNsYW1hdGlvblwiPjwvaT5cbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgPFNhbmtleVxuICAgICAgICAgIHJlZj1cInNhbmtleV9jaGFydFwiXG4gICAgICAgICAgOndpZHRoPVwid2lkdGhcIlxuICAgICAgICAgIDpoZWlnaHQ9XCJoZWlnaHRcIlxuICAgICAgICAgIDpub19kYXRhX21lc3NhZ2U9XCJub19kYXRhX21lc3NhZ2VcIlxuICAgICAgICAgIDpzYW5rZXlfZGF0YT1cInNhbmtleV9kYXRhXCJcbiAgICAgICAgICBAdXBkYXRlX3dpZHRoPVwidXBkYXRlX3dpZHRoXCJcbiAgICAgICAgICBAdXBkYXRlX2hlaWdodD1cInVwZGF0ZV9oZWlnaHRcIlxuICAgICAgICAgIEBub2RlX2NsaWNrPVwib25fbm9kZV9jbGlja1wiPlxuICAgICAgICAgIDwvU2Fua2V5PiAgICAgICAgXG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIG9uQmVmb3JlTW91bnQgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdFNlYXJjaCB9IGZyb20gXCIuL3NlbGVjdC1zZWFyY2gudnVlXCJcbmltcG9ydCB7IGRlZmF1bHQgYXMgTG9hZGluZyB9IGZyb20gXCIuL2xvYWRpbmcudnVlXCJcbmltcG9ydCB7IG50b3BuZ191dGlsaXR5LCBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcy5qc1wiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTYW5rZXkgfSBmcm9tIFwiLi9zYW5rZXkudnVlXCI7XG5cbmNvbnN0IGFjdGl2ZV9maWx0ZXJfbGlzdCA9IHt9XG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgaWZpZDogTnVtYmVyLFxuICBhdmFpbGFibGVfZmlsdGVyczogT2JqZWN0LFxufSk7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5jb25zdCBtYXhfZW50cmllc19yZWFjaGVkID0gcmVmKGZhbHNlKVxuY29uc3QgbWF4X2VudHJ5X3RpdGxlID0gX2kxOG4oJ3BvcnRzX2FuYWx5c2lzLm1heF9lbnRyaWVzJylcbmNvbnN0IG5vX2RhdGFfbWVzc2FnZSA9IF9pMThuKCdwb3J0c19hbmFseXNpcy5ub19kYXRhJylcbmNvbnN0IHNhbmtleV9jaGFydCA9IHJlZihudWxsKVxuY29uc3QgYm9keV9kaXYgPSByZWYobnVsbCk7XG5jb25zdCB3aWR0aCA9IHJlZihudWxsKTtcbmNvbnN0IGhlaWdodCA9IHJlZihudWxsKTtcbmNvbnN0IHNhbmtleV9kYXRhID0gcmVmKHt9KTtcbmNvbnN0IGxpdmVfcmVzdCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L3ZsYW4vbGl2ZV9wb3J0cy5sdWFgXG5jb25zdCBoaXN0b3JpY2FsX3Jlc3QgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC92bGFuL2hpc3RvcmljYWxfcG9ydHMubHVhYFxuY29uc3QgbG9hZGluZyA9IHJlZihmYWxzZSlcblxub25CZWZvcmVNb3VudCgoKSA9PiB7XG4gIC8qIEJlZm9yZSBtb3VudGluZyB0aGUgdmFyaW91cyB3aWRnZXRzLCB1cGRhdGUgdGhlIHVybCB0byB0aGUgY29ycmVjdCBvbmUsIGJ5IGFkZGluZyBpZmlkLCBlY2MuICovXG4gIGNvbnN0IHRpbWVmcmFtZSA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCd0aW1lZnJhbWUnKTtcbiAgY29uc3QgdmxhbiA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCd2bGFuJyk7XG4gIGNvbnN0IGw0X3Byb3RvID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ2w0cHJvdG8nKTtcbiAgXG4gIGlmKCF0aW1lZnJhbWUpIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgndGltZWZyYW1lJywgJ25vbmUnKSAvKiBEZWZhdWx0IGxpdmUgKi9cbiAgaWYoIXZsYW4pIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgndmxhbicsICdub25lJykgLyogRGVmYXVsdCBhbGwgVkxBTnMgKi9cbiAgaWYoIXZsYW4pIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybCgnbDRwcm90bycsICdub25lJykgLyogRGVmYXVsdCBubyBwcm90b2NvbCAqL1xuICBcbiAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCdpZmlkJywgcHJvcHMuaWZpZCkgLyogQ3VycmVudCBpbnRlcmZhY2UgKi9cblxuICBmb3IoY29uc3QgW25hbWUsIGZpbHRlcnNdIG9mIE9iamVjdC5lbnRyaWVzKHByb3BzLmF2YWlsYWJsZV9maWx0ZXJzKSkge1xuICAgIGZpbHRlcnMuZm9yRWFjaCgoZmlsdGVyKSA9PiB7XG4gICAgICBmaWx0ZXIuZmlsdGVyX25hbWUgPSBuYW1lXG4gICAgICBpZihmaWx0ZXIuY3VycmVudGx5X2FjdGl2ZSlcbiAgICAgICAgYWN0aXZlX2ZpbHRlcl9saXN0W25hbWVdID0gZmlsdGVyO1xuICAgIH0pXG4gIH1cbn0pO1xuXG5vbk1vdW50ZWQoKCkgPT4ge1xuICB1cGRhdGVfaGVpZ2h0KCk7XG4gIHVwZGF0ZV93aWR0aCgpO1xuICB1cGRhdGVfc2Fua2V5KCk7XG59KTtcblxuZnVuY3Rpb24gb25fbm9kZV9jbGljayhub2RlKSB7XG4gIGlmIChub2RlLmlzX2xpbmtfbm9kZSA9PSB0cnVlKSB7IHJldHVybjsgfVxuICBpZiAobm9kZS5saW5rKSB7IG50b3BuZ191cmxfbWFuYWdlci5nb190b191cmwobm9kZS5saW5rKTsgfVxufVxuXG5jb25zdCByZWxvYWQgPSBmdW5jdGlvbigpIHtcbiAgdXBkYXRlX3NhbmtleSgpXG59XG5cbmNvbnN0IGNsaWNrX2l0ZW0gPSBmdW5jdGlvbihpdGVtKSB7XG4gIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChpdGVtLmZpbHRlcl9uYW1lLCBpdGVtLmlkKVxuICB1cGRhdGVfc2Fua2V5KCk7XG59XG5cbmNvbnN0IHVwZGF0ZV9zYW5rZXkgPSBmdW5jdGlvbigpIHtcbiAgc2V0X3NhbmtleV9kYXRhKCk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrX21heF9lbnRyaWVzKGRhdGEpIHtcbiAgbWF4X2VudHJpZXNfcmVhY2hlZC52YWx1ZSA9IGRhdGEubWF4X2VudHJpZXNfcmVhY2hlZFxufVxuXG5hc3luYyBmdW5jdGlvbiBzZXRfc2Fua2V5X2RhdGEoKSB7XG4gIGxvYWRpbmcudmFsdWUgPSB0cnVlO1xuICBsZXQgZGF0YSA9IGF3YWl0IGdldF9zYW5rZXlfZGF0YSgpOyAgICBcbiAgc2Fua2V5X2RhdGEudmFsdWUgPSBkYXRhO1xuICBsb2FkaW5nLnZhbHVlID0gZmFsc2U7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldF9zYW5rZXlfZGF0YSgpIHtcbiAgY29uc3QgdXJsX3JlcXVlc3QgPSBnZXRfc2Fua2V5X3VybCgpO1xuICBsZXQgZ3JhcGggPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsX3JlcXVlc3QpO1xuICBjaGVja19tYXhfZW50cmllcyhncmFwaCk7XG4gIGdyYXBoID0gbWFrZV9jb21wbGV0ZV9ncmFwaChncmFwaCk7XG4gIGNvbnN0IHNhbmtleV9kYXRhID0gZ2V0X3NhbmtleV9kYXRhX2Zyb21fcmVzdF9kYXRhKGdyYXBoKTtcbiAgLyogSW4gY2FzZSBubyBkYXRhIGlzIHJldHVybmVkLCBzaG93IHRoZSBObyBEYXRhIG1lc3NhZ2UgKi9cbiAgKHNhbmtleV9kYXRhLmxpbmtzLmxlbmd0aCA+IDAgJiYgc2Fua2V5X2RhdGEubm9kZXMubGVuZ3RoID4gMCkgPyBcbiAgICBzYW5rZXlfY2hhcnQudmFsdWUuc2V0X25vX2RhdGFfZmxhZyhmYWxzZSkgOiBcbiAgICBzYW5rZXlfY2hhcnQudmFsdWUuc2V0X25vX2RhdGFfZmxhZyh0cnVlKTtcbiAgXG4gIFxuICByZXR1cm4gc2Fua2V5X2RhdGE7XG59XG5cbmZ1bmN0aW9uIGdldF9zYW5rZXlfdXJsKCkge1xuICBsZXQgdmxhbiA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwidmxhblwiKTtcbiAgbGV0IHRpbWVmcmFtZSA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwidGltZWZyYW1lXCIpO1xuICBsZXQgbDRwcm90byA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwibDRwcm90b1wiKTtcbiAgaWYodmxhbiA9PSAnbm9uZScpIHsgdmxhbiA9ICcnOyB9XG4gIGlmKHRpbWVmcmFtZSA9PSAnbm9uZScpIHsgdGltZWZyYW1lID0gJyc7IH1cbiAgaWYobDRwcm90byA9PSAnbm9uZScpIHsgbDRwcm90byA9ICcnOyB9XG4gIFxuICBsZXQgdXJsX3JlcXVlc3QgPSAnJztcbiAgbGV0IHBhcmFtcyA9IHtcbiAgICBpZmlkOiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImlmaWRcIiksXG4gICAgdmxhbjogdmxhbixcbiAgICB0aW1lZnJhbWU6IHRpbWVmcmFtZSxcbiAgICBsNHByb3RvOiBsNHByb3RvXG4gIH07XG4gIGxldCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKHBhcmFtcyk7XG5cbiAgaWYodGltZWZyYW1lID09ICcnKSB7IHVybF9yZXF1ZXN0ID0gYCR7bGl2ZV9yZXN0fT8ke3VybF9wYXJhbXN9YDsgfVxuICBlbHNlIHsgdXJsX3JlcXVlc3QgPSBgJHtoaXN0b3JpY2FsX3Jlc3R9PyR7dXJsX3BhcmFtc31gOyB9XG5cbiAgcmV0dXJuIHVybF9yZXF1ZXN0O1xufVxuXG5mdW5jdGlvbiBnZXRfc2Fua2V5X2RhdGFfZnJvbV9yZXN0X2RhdGEocmVzKSB7XG4gICAgbGV0IG5vZGVfZGljdCA9IHt9LCBsaW5rX3RvX25vZGVzX2RpY3QgPSB7fTtcbiAgICAvLyBjcmVhdGUgYSBub2RlIGRpY3RcbiAgICByZXMubm9kZXMuZm9yRWFjaCgobm9kZSkgPT4gbm9kZV9kaWN0W25vZGUubm9kZV9pZF0gPSBub2RlKTtcbiAgICBcbiAgICBsZXQgZl9nZXRfbGlua19ub2RlX2lkID0gKGxpbmspID0+IHtcblx0cmV0dXJuIGAke2xpbmsuc291cmNlX25vZGVfaWR9XyR7bGluay5sYWJlbH1gOyBcbiAgICB9O1xuICAgIC8vIG1lcmdlIGFsbCBsaW5rcyBieSBsYWJlbFxuICAgIHJlcy5saW5rcy5mb3JFYWNoKChsaW5rKSA9PiB7XG5cdGxldCBsaW5rX25vZGVfaWQgPSBmX2dldF9saW5rX25vZGVfaWQobGluayk7XG5cdGxldCBsaW5rX3RvX25vZGVzID0gbGlua190b19ub2Rlc19kaWN0W2xpbmtfbm9kZV9pZF07XG5cdGlmIChsaW5rX3RvX25vZGVzID09IG51bGwpIHtcblx0ICAgIGxpbmtfdG9fbm9kZXMgPSB7XG5cdFx0aWQ6IGxpbmtfbm9kZV9pZCxcblx0XHRsYWJlbDogbGluay5sYWJlbCxcbiAgICBsaW5rOiBsaW5rLm9wdGlvbmFsX2luZm8ubGluayxcblx0XHRub2RlX2xpbmtzOiBbXSxcdFx0XG5cdCAgICB9O1xuXHQgICAgbGlua190b19ub2Rlc19kaWN0W2xpbmtfbm9kZV9pZF0gPSBsaW5rX3RvX25vZGVzO1xuXHR9XG5cdGxpbmtfdG9fbm9kZXMubm9kZV9saW5rcy5wdXNoKHtcblx0ICAgIHNvdXJjZTogbm9kZV9kaWN0W2xpbmsuc291cmNlX25vZGVfaWRdLFxuXHQgICAgdGFyZ2V0OiBub2RlX2RpY3RbbGluay50YXJnZXRfbm9kZV9pZF0sXG5cdCAgICB2YWx1ZTogbGluay52YWx1ZSxcblx0fSk7XHRcbiAgICB9KTtcbiAgICBcbiAgICAvLyBjcmVhdGUgbm9kZXMgYW5kIGxpbmtzXG4gICAgbGV0IG5vZGVzID0gcmVzLm5vZGVzLm1hcCgobikgPT4gbiksIGxpbmtzID0gW107XG4gICAgZm9yIChsZXQgbGlua19ub2RlX2lkIGluIGxpbmtfdG9fbm9kZXNfZGljdCkge1xuXHRsZXQgbGlua190b19ub2RlcyA9IGxpbmtfdG9fbm9kZXNfZGljdFtsaW5rX25vZGVfaWRdO1xuXHRsZXQgbGlua19ub2RlID0ge1xuXHQgICAgbm9kZV9pZDogbGlua190b19ub2Rlcy5pZCxcblx0ICAgIGxhYmVsOiBsaW5rX3RvX25vZGVzLmxhYmVsLFxuICAgICAgbGluazogbGlua190b19ub2Rlcy5saW5rLFxuXHR9O1xuXHRub2Rlcy5wdXNoKGxpbmtfbm9kZSk7XG5cdGxpbmtfdG9fbm9kZXMubm9kZV9saW5rcy5mb3JFYWNoKChsaW5rKSA9PiB7XG5cdCAgICBsaW5rcy5wdXNoKHtcblx0XHRzb3VyY2Vfbm9kZV9pZDogbGluay5zb3VyY2Uubm9kZV9pZCxcblx0XHR0YXJnZXRfbm9kZV9pZDogbGlua19ub2RlLm5vZGVfaWQsXG5cdFx0bGFiZWw6IGAke2xpbmsuc291cmNlLmxhYmVsfSAtICR7bGluay50YXJnZXQubGFiZWx9OiAke2xpbmtfbm9kZS5sYWJlbH1gLFxuXHRcdHZhbHVlOiBsaW5rLnZhbHVlLFxuXHQgICAgfSk7XG5cdCAgICBsaW5rcy5wdXNoKHtcblx0XHRzb3VyY2Vfbm9kZV9pZDogbGlua19ub2RlLm5vZGVfaWQsXG5cdFx0dGFyZ2V0X25vZGVfaWQ6IGxpbmsudGFyZ2V0Lm5vZGVfaWQsXG5cdFx0bGFiZWw6IGAke2xpbmsuc291cmNlLmxhYmVsfSAtICR7bGluay50YXJnZXQubGFiZWx9OiAke2xpbmtfbm9kZS5sYWJlbH1gLFxuXHRcdHZhbHVlOiBsaW5rLnZhbHVlLFxuXHQgICAgfSk7XG5cdH0pO1xuICAgIH1cbiAgICBsZXQgc2Fua2V5X25vZGVzID0gbm9kZXMubWFwKChuLCBpbmRleCkgPT4ge1xuXHRyZXR1cm4geyBpbmRleCwgbGFiZWw6IG4ubGFiZWwsIGRhdGE6IG4gfTtcbiAgICB9KTtcbiAgICBsZXQgc2Fua2V5X25vZGVfZGljdCA9IHt9OyAgICBcbiAgICBzYW5rZXlfbm9kZXMuZm9yRWFjaCgoc24sIGluZGV4KSA9PiBzYW5rZXlfbm9kZV9kaWN0W3NuLmRhdGEubm9kZV9pZF0gPSBzbik7XG4gICAgbGV0IHNhbmtleV9saW5rcyA9IGxpbmtzLm1hcCgobCkgPT4ge1xuXHRsZXQgc291cmNlX2luZGV4ID0gc2Fua2V5X25vZGVfZGljdFtsLnNvdXJjZV9ub2RlX2lkXS5pbmRleDtcblx0bGV0IHRhcmdldF9pbmRleCA9IHNhbmtleV9ub2RlX2RpY3RbbC50YXJnZXRfbm9kZV9pZF0uaW5kZXg7XG5cdHJldHVybiB7XG5cdCAgICBzb3VyY2U6IHNvdXJjZV9pbmRleCxcblx0ICAgIHRhcmdldDogdGFyZ2V0X2luZGV4LFxuXHQgICAgdmFsdWU6IGwudmFsdWUsXG5cdCAgICBsYWJlbDogbC5sYWJlbCxcblx0fTtcbiAgICB9KTtcbiAgICByZXR1cm4geyBub2Rlczogc2Fua2V5X25vZGVzLCBsaW5rczogc2Fua2V5X2xpbmtzIH07XG59XG5cbi8vIHJlbW92ZSBhbGwgbGlua3Mgd2l0aCBhIG5vdCBleGlzdGluZyBub2RlXG5mdW5jdGlvbiBtYWtlX2NvbXBsZXRlX2dyYXBoKGdyYXBoKSB7XG4gICAgbGV0IGZfbG9nX2xpbmsgPSAobCkgPT4gY29uc29sZS5lcnJvcihgbGluayAoc291cmNlOiAke2wuc291cmNlX25vZGVfaWR9LCB0YXJnZXQ6ICR7bC50YXJnZXRfbm9kZV9pZH0pIHJlbW92ZWQgZm9yIG5vdCBleGlzdGluZyBzb3VyY2UvdGFyZ2V0IG5vZGVgKTsgICAgXG4gICAgbGV0IGxpbmtzID0gZ2V0X2xpbmtzX3dpdGhfZXhpc3Rpbmdfbm9kZShncmFwaCwgZl9sb2dfbGluayk7XG4gICAgcmV0dXJuIHsgbm9kZXM6IGdyYXBoLm5vZGVzLCBsaW5rcyB9O1xufVxuXG4vLyByZW1lb3ZlIGFsbCBjaXJjdWxhciBsaW5rcyBhbmQgcmV0dXJuIGEgZGFnIGdyYXBoXG5mdW5jdGlvbiBtYWtlX2RhZ19ncmFwaChncmFwaCkgeyAgICBcbiAgICBsZXQgbm9kZXNfZGVzdF9kaWN0ID0ge307IC8vIGRpY3Rpb25hcnkgeyBbbm9kZV9zb3VyY2VfaWRdOiBub2Rlc190YXJnZXRbXSB9XG4gICAgZ3JhcGgubGlua3MuZm9yRWFjaCgobCkgPT4ge1xuXHRsZXQgbm9kZXNfZGVzdCA9IG5vZGVzX2Rlc3RfZGljdFtsLnNvdXJjZV9ub2RlX2lkXTtcblx0aWYgKG5vZGVzX2Rlc3QgPT0gbnVsbCkge1xuXHQgICAgbm9kZXNfZGVzdCA9IFtdO1xuXHQgICAgbm9kZXNfZGVzdF9kaWN0W2wuc291cmNlX25vZGVfaWRdID0gbm9kZXNfZGVzdDtcblx0fVxuXHRub2Rlc19kZXN0LnB1c2gobC50YXJnZXRfbm9kZV9pZCk7XG4gICAgfSk7XG4gICAgbGV0IG5vZGVzX3RvX2NoZWNrID0ge307IC8vIHRlbXAgZGljdGlvbmFyeSB1c2VkIGZyb20gZl9hZGRfY2lyY3VsYXJfbGluayBcbiAgICBncmFwaC5ub2Rlcy5mb3JFYWNoKChuKSA9PiB7XG5cdG5vZGVzX3RvX2NoZWNrW24ubm9kZV9pZF0gPSB7IGNoZWNrZWQ6IGZhbHNlLCB2aXNpdGVkOiBmYWxzZSB9O1xuICAgIH0pO1xuXG4gICAgLy8gY2lyY3VsYXIgbGlua3MgZGljdCAoa2V5OiBgJHtzb3VyY2Vfbm9kZV9pZH1fJHt0YXJnZXRfbm9kZV9pZH1gKVxuICAgIGxldCBjaXJjdWxhcl9saW5rcyA9IHt9O1xuICAgIGxldCBmX2dldF9saW5rX2tleSA9IChzb3VyY2VfaWQsIHRhcmdldF9pZCkgPT4gYCR7c291cmNlX2lkfV8ke3RhcmdldF9pZH1gO1xuICAgIFxuICAgIC8vIGRlZXAgbmF2aWdhdGUgc3RhcnRpbmcgZnJvbSBub2RlX2lkIGFuZCBhZGQgY2lyY3VsYXJfbGlua3MgdmlzaXRlZCBpbiBjaXJjdWxhcl9saW5rcyBkaWN0IFxuICAgIGxldCBmX3NldF9jaXJjdWxhcl9saW5rcyA9IChub2RlX2lkLCBmcm9tX25vZGVfaWQpID0+IHtcblx0bGV0IG5vZGVfdG9fY2hlY2sgPSBub2Rlc190b19jaGVja1tub2RlX2lkXTtcblx0aWYgKG5vZGVfdG9fY2hlY2suY2hlY2tlZCA9PSB0cnVlKSB7IHJldHVybjsgfVxuXHRlbHNlIGlmIChub2RlX3RvX2NoZWNrLnZpc2l0ZWQgPT0gdHJ1ZSkge1xuXHQgICAgbGV0IGxpbmtfa2V5ID0gZl9nZXRfbGlua19rZXkoZnJvbV9ub2RlX2lkLCBub2RlX2lkKTtcblx0ICAgIGNpcmN1bGFyX2xpbmtzW2xpbmtfa2V5XSA9IHRydWU7XG5cdCAgICBjb25zb2xlLmVycm9yKGBMaW5rIChzb3VyY2U6ICR7ZnJvbV9ub2RlX2lkfSwgdGFyZ2V0OiAke25vZGVfaWR9ICkgaXMgYSBjaXJjdWxhciBsaW5rYCk7XG5cdCAgICBub2RlX3RvX2NoZWNrLnZpc2l0ZWQgPSBmYWxzZTtcblx0ICAgIHJldHVybjtcblx0fVxuXHRub2RlX3RvX2NoZWNrLnZpc2l0ZWQgPSB0cnVlO1xuXHRsZXQgbm9kZXNfZGVzdCA9IG5vZGVzX2Rlc3RfZGljdFtub2RlX2lkXTtcblx0aWYgKG5vZGVzX2Rlc3QgIT0gbnVsbCkge1xuXHQgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2Rlc19kZXN0Lmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0bGV0IHRhcmdldF9ub2RlX2lkID0gbm9kZXNfZGVzdFtpXTtcblx0XHRmX3NldF9jaXJjdWxhcl9saW5rcyh0YXJnZXRfbm9kZV9pZCwgbm9kZV9pZCk7XHQgICAgXG5cdCAgICB9XG5cdH1cblx0bm9kZV90b19jaGVjay52aXNpdGVkID0gZmFsc2U7XG5cdG5vZGVfdG9fY2hlY2suY2hlY2tlZCA9IHRydWU7XG4gICAgfTtcbiAgICAvLyBzZXQgY2lyY3VsYXJfbGlua3MgZGljdGlvbmFyeVxuICAgIGdyYXBoLm5vZGVzLmZvckVhY2goKG4pID0+IGZfc2V0X2NpcmN1bGFyX2xpbmtzKG4ubm9kZV9pZCkpO1xuICAgIFxuICAgIC8vIHJlbW92ZSBubyBkYWcgbm9kZXMvbGlua3NcbiAgICBsZXQgZl9maWx0ZXJfbGluayA9IChsKSA9PiB7XG5cdGxldCBsaW5rX2tleSA9IGZfZ2V0X2xpbmtfa2V5KGwuc291cmNlX25vZGVfaWQsIGwudGFyZ2V0X25vZGVfaWQpO1xuXHRsZXQgdGFrZV9saW5rID0gY2lyY3VsYXJfbGlua3NbbGlua19rZXldID09IG51bGw7XG5cdHJldHVybiB0YWtlX2xpbms7XG4gICAgfTtcbiAgICBsZXQgZl9sb2dfbGluayA9IChsKSA9PiBjb25zb2xlLmVycm9yKGBsaW5rIChzb3VyY2U6ICR7bC5zb3VyY2Vfbm9kZV9pZH0sIHRhcmdldDogJHtsLnRhcmdldF9ub2RlX2lkfSkgcmVtb3ZlZCBmb3IgY2lyY3VsYXIgbGlua3NgKTtcbiAgICBsZXQgbGlua3MgPSBmaWx0ZXJfbG9nKGdyYXBoLmxpbmtzLCBmX2ZpbHRlcl9saW5rLCBmX2xvZ19saW5rKTtcbiAgICBcbiAgICBsZXQgZl9sb2dfbm9kZSA9IChuKSA9PiBjb25zb2xlLmVycm9yKGBub2RlICR7bi5ub2RlX2lkfSByZW1vdmVkIGZvciBjaXJjdWxhciBsaW5rc2ApO1xuICAgIGxldCBub2RlcyA9IGdldF9ub2Rlc193aXRoX2V4aXN0aW5nX2xpbmsoe25vZGVzOiBncmFwaC5ub2RlcywgbGlua3N9LCBmX2xvZ19ub2RlKTtcblxuICAgIC8vIHJldHVybiBhIGRhZyBncmFwaFxuICAgIHJldHVybiB7IG5vZGVzLCBsaW5rcyB9O1xufVxuXG5mdW5jdGlvbiBnZXRfbGlua3Nfd2l0aF9leGlzdGluZ19ub2RlKGdyYXBoLCBmX2xvZykge1xuICAgIGxldCBub2RlX2RpY3QgPSB7fTtcbiAgICBncmFwaC5ub2Rlcy5mb3JFYWNoKChuKSA9PiBub2RlX2RpY3Rbbi5ub2RlX2lkXSA9IHRydWUpO1xuICAgIGxldCBmX2ZpbHRlciA9IChsKSA9PiBub2RlX2RpY3RbbC5zb3VyY2Vfbm9kZV9pZF0gIT0gbnVsbCAmJiBub2RlX2RpY3RbbC50YXJnZXRfbm9kZV9pZF0gIT0gbnVsbDsgICAgXG4gICAgbGV0IGxpbmtzID0gZmlsdGVyX2xvZyhncmFwaC5saW5rcywgZl9maWx0ZXIsIGZfbG9nKTtcbiAgICByZXR1cm4gbGlua3M7XG59XG5cbmZ1bmN0aW9uIGdldF9ub2Rlc193aXRoX2V4aXN0aW5nX2xpbmsoZ3JhcGgsIGZfbG9nKSB7XG4gICAgbGV0IGxpbmtfc291cmNlX2RpY3QgPSB7fTtcbiAgICBsZXQgbGlua190YXJnZXRfZGljdCA9IHt9O1xuICAgIGdyYXBoLmxpbmtzLmZvckVhY2goKGwpID0+IHtcblx0bGlua19zb3VyY2VfZGljdFtsLnNvdXJjZV9ub2RlX2lkXSA9IHRydWU7XG5cdGxpbmtfdGFyZ2V0X2RpY3RbbC50YXJnZXRfbm9kZV9pZF0gPSB0cnVlO1xuICAgIH0pO1xuICAgIGxldCBmX2ZpbHRlciA9IChuKSA9PiBsaW5rX3NvdXJjZV9kaWN0W24ubm9kZV9pZF0gPT0gdHJ1ZSB8fCBsaW5rX3RhcmdldF9kaWN0W24ubm9kZV9pZF0gPT0gdHJ1ZTtcbiAgICBsZXQgbm9kZXMgPSBmaWx0ZXJfbG9nKGdyYXBoLm5vZGVzLCBmX2ZpbHRlciwgZl9sb2cpO1xuICAgIHJldHVybiBub2Rlcztcbn1cblxuLy8gbG9nIGVsZW1lbnRzIGRlbGV0ZWQgaWYgZl9sb2cgIT0gbnVsbFxuZnVuY3Rpb24gZmlsdGVyX2xvZyhlbGVtZW50cywgZl9maWx0ZXIsIGZfbG9nKSB7XG4gICAgcmV0dXJuIGVsZW1lbnRzLmZpbHRlcigoZSkgPT4ge1xuXHRjb25zdCB0YWtlX2VsZW1lbnQgPSBmX2ZpbHRlcihlKTtcblx0aWYgKHRha2VfZWxlbWVudCA9PSBmYWxzZSAmJiBmX2xvZyAhPSBudWxsKSB7XG5cdCAgICBmX2xvZyhlKTtcblx0fVxuXHRyZXR1cm4gdGFrZV9lbGVtZW50O1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVfaGVpZ2h0KCkge1xuICBoZWlnaHQudmFsdWUgPSAkKGJvZHlfZGl2LnZhbHVlKS5oZWlnaHQoKSAtIDEwMDtcbn1cblxuZnVuY3Rpb24gdXBkYXRlX3dpZHRoKCkge1xuICB3aWR0aC52YWx1ZSA9ICQoYm9keV9kaXYudmFsdWUpLndpZHRoKCkgLSAxMDtcbn1cblxuPC9zY3JpcHQ+XG5cblxuXG5cblxuXG4iLCI8IS0tXG4gIChDKSAyMDEzLTIzIC0gbnRvcC5vcmdcbi0tPlxuXG48dGVtcGxhdGU+XG4gICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQgIGNhcmQtc2hhZG93XCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBtYi0yXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IG5vLXdyYXBcIiBzdHlsZT1cInRleHQtYWxpZ246bGVmdDttYXJnaW4tcmlnaHQ6MXJlbTttaW4td2lkdGg6MjVyZW07XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwibXktYXV0byBtZS0xXCI+e3sgX2kxOG4oJ2NyaXRlcmlhX2ZpbHRlcicpIH19OiA8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF9jcml0ZXJpYVwiIDpvcHRpb25zPVwiY3JpdGVyaWFfbGlzdFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBzZWxlY3Rfb3B0aW9uPVwidXBkYXRlX2NyaXRlcmlhXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9TZWxlY3RTZWFyY2g+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICA8VGFibGVXaXRoQ29uZmlnIHJlZj1cInRhYmxlX2FnZ3JlZ2F0ZWRfbGl2ZV9mbG93c1wiXG5cdFx0XHRcdCAgICAgICA6Y3NyZj1cImNzcmZcIlxuXHRcdFx0XHQgICAgICAgOnRhYmxlX2lkPVwidGFibGVfaWRcIlxuXHRcdFx0XHQgICAgICAgOnRhYmxlX2NvbmZpZ19pZD1cInRhYmxlX2NvbmZpZ19pZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Zl9tYXBfY29sdW1ucz1cIm1hcF90YWJsZV9kZWZfY29sdW1uc1wiXG5cdFx0XHRcdCAgICAgICA6Z2V0X2V4dHJhX3BhcmFtc19vYmo9XCJnZXRfZXh0cmFfcGFyYW1zX29ialwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Zl9tYXBfY29uZmlnPVwibWFwX2NvbmZpZ1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6Y3VzdG9tX2hlYWRlcj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxEcm9wZG93biB2LWZvcj1cIih0LCB0X2luZGV4KSBpbiBmaWx0ZXJfdGFibGVfYXJyYXlcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Zl9vbl9vcGVuPVwiZ2V0X29wZW5fZmlsdGVyX3RhYmxlX2Ryb3Bkb3duKHQsIHRfaW5kZXgpXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnJlZj1cImVsID0+IHsgZmlsdGVyX3RhYmxlX2Ryb3Bkb3duX2FycmF5W3RfaW5kZXhdID0gZWwgfVwiIDpoaWRkZW49XCJ0LmhpZGRlblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIERyb3Bkb3duIGNvbHVtbnMgLS0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3Bpbm5lciA6c2hvdz1cInQuc2hvd19zcGlubmVyXCIgc2l6ZT1cIjFyZW1cIiBjbGFzcz1cIm1lLTFcIj48L1NwaW5uZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cIm50b3BuZy10cnVuY2F0ZVwiIDp0aXRsZT1cInQudGl0bGVcIj57eyB0LmxhYmVsIH19PC9hPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90Om1lbnU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSB2LWZvcj1cIm9wdCBpbiB0Lm9wdGlvbnNcIiBzdHlsZT1cImN1cnNvcjpwb2ludGVyOyBkaXNwbGF5OiBibG9jaztcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz1cImFkZF90YWJsZV9maWx0ZXIob3B0LCAkZXZlbnQpXCIgY2xhc3M9XCJudG9wbmctdHJ1bmNhdGUgdGFnLWZpbHRlclwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnRpdGxlPVwib3B0LnZhbHVlXCI+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1pZj1cIm9wdC5jb3VudCA9PSBudWxsXCI+e3sgb3B0LmxhYmVsIH19PC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1lbHNlPnt7IG9wdC5sYWJlbCArIFwiIChcIiArIG9wdC5jb3VudCArIFwiKVwiIH19PC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9Ecm9wZG93bj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9UYWJsZVdpdGhDb25maWc+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBvbkJlZm9yZU1vdW50LCBjb21wdXRlZCwgbmV4dFRpY2sgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfdXRpbGl0eSwgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMuanNcIjtcbmltcG9ydCBOdG9wVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9udG9wLXV0aWxzXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFRhYmxlV2l0aENvbmZpZyB9IGZyb20gXCIuL3RhYmxlLXdpdGgtY29uZmlnLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBEcm9wZG93biB9IGZyb20gXCIuL2Ryb3Bkb3duLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTcGlubmVyIH0gZnJvbSBcIi4vc3Bpbm5lci52dWVcIjtcblxuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiO1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICBjb250ZXh0OiBPYmplY3Rcbn0pO1xuXG5jb25zdCBjc3JmID0gcmVmKHByb3BzLmNvbnRleHQuY3NyZik7XG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuXG5jb25zdCBjcml0ZXJpYV9saXN0X2RlZiA9IFtcbiAgICB7IGxhYmVsOiBfaTE4bihcImFwcGxpY2F0aW9uX3Byb3RvXCIpLCB2YWx1ZTogMSwgcGFyYW06IFwiYXBwbGljYXRpb25fcHJvdG9jb2xcIiwgdGFibGVfaWQ6IFwiYWdncmVnYXRlZF9hcHBfcHJvdG9cIiwgZW50ZXJwcmlzZV9tOiBmYWxzZSwgc2VhcmNoX2VuYWJsZWQ6IHRydWUgfSxcbiAgICB7IGxhYmVsOiBfaTE4bihcImNsaWVudFwiKSwgdmFsdWU6IDIsIHBhcmFtOiBcImNsaWVudFwiLCB0YWJsZV9pZDogXCJhZ2dyZWdhdGVkX2NsaWVudFwiLCBlbnRlcnByaXNlX206IGZhbHNlLCBzZWFyY2hfZW5hYmxlZDogZmFsc2UgfSxcbiAgICB7IGxhYmVsOiBfaTE4bihcImNsaWVudF9zZXJ2ZXJcIiksIHZhbHVlOiA0LCBwYXJhbTogXCJjbGllbnRfc2VydmVyXCIsIHRhYmxlX2lkOiBcImFnZ3JlZ2F0ZWRfY2xpZW50X3NlcnZlclwiLCBlbnRlcnByaXNlX206IHRydWUsIHNlYXJjaF9lbmFibGVkOiBmYWxzZSB9LFxuICAgIHsgbGFiZWw6IF9pMThuKFwiY2xpZW50X3NlcnZlcl9hcHBsaWNhdGlvbl9wcm90b1wiKSwgdmFsdWU6IDUsIHBhcmFtOiBcImFwcF9jbGllbnRfc2VydmVyXCIsIHRhYmxlX2lkOiBcImFnZ3JlZ2F0ZWRfYXBwX2NsaWVudF9zZXJ2ZXJcIiwgZW50ZXJwcmlzZV9tOiB0cnVlLCBzZWFyY2hfZW5hYmxlZDogdHJ1ZSB9LFxuICAgIHsgbGFiZWw6IF9pMThuKFwiY2xpZW50X3NlcnZlcl9zcnZfcG9ydFwiKSwgdmFsdWU6IDcsIHBhcmFtOiBcImNsaWVudF9zZXJ2ZXJfc3J2X3BvcnRcIiwgdGFibGVfaWQ6IFwiYWdncmVnYXRlZF9jbGllbnRfc2VydmVyX3Nydl9wb3J0XCIsIGVudGVycHJpc2VfbTogZmFsc2UsIHNlYXJjaF9lbmFibGVkOiBmYWxzZSB9LFxuICAgIHsgbGFiZWw6IF9pMThuKFwiY2xpZW50X3NlcnZlcl9zcnZfcG9ydF9hcHBfcHJvdG9cIiksIHZhbHVlOiA4LCBwYXJhbTogXCJjbGllbnRfc2VydmVyX3Nydl9wb3J0X2FwcF9wcm90b1wiLCB0YWJsZV9pZDogXCJhZ2dyZWdhdGVkX2NsaWVudF9zZXJ2ZXJfc3J2X3BvcnRfYXBwX3Byb3RvXCIsIGVudGVycHJpc2VfbTogZmFsc2UsIHNlYXJjaF9lbmFibGVkOiBmYWxzZSB9LFxuICAgIHsgbGFiZWw6IF9pMThuKFwiaW5mb1wiKSwgdmFsdWU6IDYsIHBhcmFtOiBcImluZm9cIiwgdGFibGVfaWQ6IFwiYWdncmVnYXRlZF9pbmZvXCIsIGVudGVycHJpc2VfbTogdHJ1ZSwgc2VhcmNoX2VuYWJsZWQ6IHRydWUgfSxcbiAgICB7IGxhYmVsOiBfaTE4bihcInNlcnZlclwiKSwgdmFsdWU6IDMsIHBhcmFtOiBcInNlcnZlclwiLCB0YWJsZV9pZDogXCJhZ2dyZWdhdGVkX3NlcnZlclwiLCBlbnRlcnByaXNlX206IGZhbHNlLCBzZWFyY2hfZW5hYmxlZDogZmFsc2UgfSxcbl07XG5cbmNvbnN0IGxvYWRpbmcgPSByZWYobnVsbClcbmNvbnN0IHRhYmxlX2FnZ3JlZ2F0ZWRfbGl2ZV9mbG93cyA9IHJlZigpO1xuY29uc3QgZmlsdGVyX3RhYmxlX2FycmF5ID0gcmVmKFtdKTtcbmNvbnN0IGZpbHRlcl90YWJsZV9kcm9wZG93bl9hcnJheSA9IHJlZihbXSlcblxuY29uc3QgdGFibGVfY29uZmlnX2lkID0gcmVmKCdhZ2dyZWdhdGVkX2xpdmVfZmxvd3MnKTtcbmNvbnN0IHRhYmxlX2lkID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIGlmIChzZWxlY3RlZF9jcml0ZXJpYS52YWx1ZT8udmFsdWUgPT0gbnVsbCkgeyByZXR1cm4gdGFibGVfY29uZmlnX2lkLnZhbHVlOyB9XG4gICAgbGV0IGlkID0gYCR7dGFibGVfY29uZmlnX2lkLnZhbHVlfV8ke3NlbGVjdGVkX2NyaXRlcmlhLnZhbHVlLnZhbHVlfWA7XG4gICAgcmV0dXJuIGlkO1xufSk7XG5jb25zdCBzZWxlY3RlZF9jcml0ZXJpYSA9IHJlZihjcml0ZXJpYV9saXN0X2RlZlswXSk7XG5sZXQgZGVmYXVsdF91cmxfcGFyYW1zID0ge307XG5cbmNvbnN0IGNyaXRlcmlhX2xpc3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHByb3BzLmNvbnRleHQuaXNfbnRvcF9lbnRlcnByaXNlX20pIHtcbiAgICAgICAgcmV0dXJuIHJlZihjcml0ZXJpYV9saXN0X2RlZik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBsZXQgY3JpdGVyYV9saXN0X2RlZl9jb20gPSBbXTtcbiAgICAgICAgY3JpdGVyaWFfbGlzdF9kZWYuZm9yRWFjaCgoYykgPT4ge1xuICAgICAgICAgICAgaWYgKCFjLmVudGVycHJpc2VfbSlcbiAgICAgICAgICAgICAgICBjcml0ZXJhX2xpc3RfZGVmX2NvbS5wdXNoKGMpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlZihjcml0ZXJhX2xpc3RfZGVmX2NvbSk7XG4gICAgfVxufSgpO1xuXG5vbkJlZm9yZU1vdW50KGFzeW5jICgpID0+IHtcbiAgICBpbml0X3NlbGVjdGVkX2NyaXRlcmlhKCk7XG59KTtcblxub25Nb3VudGVkKGFzeW5jICgpID0+IHtcbiAgICBsb2FkX3RhYmxlX2ZpbHRlcnNfb3ZlcnZpZXcoKTtcbiAgICBcbn0pO1xuXG5mdW5jdGlvbiBpbml0X3NlbGVjdGVkX2NyaXRlcmlhKCkge1xuICAgIGxldCBhZ2dyZWdhdGlvbl9jcml0ZXJpYSA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiYWdncmVnYXRpb25fY3JpdGVyaWFcIik7XG4gICAgaWYgKGFnZ3JlZ2F0aW9uX2NyaXRlcmlhID09IG51bGwgfHwgYWdncmVnYXRpb25fY3JpdGVyaWEgPT0gXCJcIikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHNlbGVjdGVkX2NyaXRlcmlhLnZhbHVlID0gY3JpdGVyaWFfbGlzdF9kZWYuZmluZCgoYykgPT4gYy5wYXJhbSA9PSBhZ2dyZWdhdGlvbl9jcml0ZXJpYSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHVwZGF0ZV9jcml0ZXJpYSgpIHtcbiAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoXCJhZ2dyZWdhdGlvbl9jcml0ZXJpYVwiLCBzZWxlY3RlZF9jcml0ZXJpYS52YWx1ZS5wYXJhbSk7XG59O1xuXG5jb25zdCBnZXRfZXh0cmFfcGFyYW1zX29iaiA9ICgpID0+IHtcbiAgICAvKmxldCBwYXJhbXMgPSBnZXRfdXJsX3BhcmFtcyhhY3RpdmVfcGFnZSwgcGVyX3BhZ2UsIGNvbHVtbnNfd3JhcCwgbWFwX3NlYXJjaCwgZmlyc3RfZ2V0X3Jvd3MpO1xuICAgICAgc2V0X3BhcmFtc19pbl91cmwocGFyYW1zKTsqL1xuICAgIGxldCBwYXJhbXMgPSBnZXRfdXJsX3BhcmFtcygpO1xuICAgIHJldHVybiBwYXJhbXM7XG59O1xuXG5hc3luYyBmdW5jdGlvbiBsb2FkX3RhYmxlX2ZpbHRlcnNfb3ZlcnZpZXcoYWN0aW9uKSB7XG4gICAgZmlsdGVyX3RhYmxlX2FycmF5LnZhbHVlID0gYXdhaXQgbG9hZF90YWJsZV9maWx0ZXJzX2FycmF5KFwib3ZlcnZpZXdcIik7XG4gICAgc2V0X2ZpbHRlcl9hcnJheV9sYWJlbCgpO1xufVxuZnVuY3Rpb24gc2V0X2ZpbHRlcl9hcnJheV9sYWJlbCgpIHtcbiAgICBmaWx0ZXJfdGFibGVfYXJyYXkudmFsdWUuZm9yRWFjaCgoZWwsIGluZGV4KSA9PiB7XG4gICAgICAgIGlmIChlbC5iYXNpY19sYWJlbCA9PSBudWxsKSB7XG4gICAgICAgICAgICBlbC5iYXNpY19sYWJlbCA9IGVsLmxhYmVsO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zdCB1cmxfZW50cnkgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShlbC5pZClcbiAgICAgICAgaWYgKHVybF9lbnRyeSAhPSBudWxsKSB7XG4gICAgICAgICAgICBlbC5vcHRpb25zLmZvckVhY2goKG9wdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb24udmFsdWUudG9TdHJpbmcoKSA9PT0gdXJsX2VudHJ5KSB7XG4gICAgICAgICAgICAgICAgICAgIGVsLmxhYmVsID0gYCR7ZWwuYmFzaWNfbGFiZWx9OiAke29wdGlvbi5sYWJlbCB8fCBvcHRpb24udmFsdWV9YFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9KVxufVxuY29uc3QgZ2V0X29wZW5fZmlsdGVyX3RhYmxlX2Ryb3Bkb3duID0gKGZpbHRlciwgZmlsdGVyX2luZGV4KSA9PiB7XG4gICAgcmV0dXJuIChfKSA9PiB7XG4gICAgICAgIGxvYWRfdGFibGVfZmlsdGVycyhmaWx0ZXIsIGZpbHRlcl9pbmRleCk7XG4gICAgfTtcbn07XG5cbmZ1bmN0aW9uIGFkZF90YWJsZV9maWx0ZXIob3B0LCBldmVudCkge1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChvcHQua2V5LCBgJHtvcHQudmFsdWV9YCk7XG4gICAgc2V0X2ZpbHRlcl9hcnJheV9sYWJlbCgpO1xuICAgIHRhYmxlX2FnZ3JlZ2F0ZWRfbGl2ZV9mbG93cy52YWx1ZS5yZWZyZXNoX3RhYmxlKCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGxvYWRfdGFibGVfZmlsdGVycyhmaWx0ZXIsIGZpbHRlcl9pbmRleCkge1xuICAgIGZpbHRlci5zaG93X3NwaW5uZXIgPSB0cnVlO1xuICAgIGF3YWl0IG5leHRUaWNrKCk7XG4gICAgaWYgKGZpbHRlci5kYXRhX2xvYWRlZCA9PSBmYWxzZSkge1xuICAgICAgICBsZXQgbmV3X2ZpbHRlcl9hcnJheSA9IGF3YWl0IGxvYWRfdGFibGVfZmlsdGVyc19hcnJheShmaWx0ZXIuaWQsIGZpbHRlcik7XG4gICAgICAgIGZpbHRlci5vcHRpb25zID0gbmV3X2ZpbHRlcl9hcnJheS5maW5kKCh0KSA9PiB0LmlkID09IGZpbHRlci5pZCkub3B0aW9ucztcbiAgICAgICAgYXdhaXQgbmV4dFRpY2soKTtcbiAgICAgICAgbGV0IGRyb3Bkb3duID0gZmlsdGVyX3RhYmxlX2Ryb3Bkb3duX2FycmF5LnZhbHVlW2ZpbHRlcl9pbmRleF07XG4gICAgICAgIGRyb3Bkb3duLmxvYWRfbWVudSgpO1xuICAgIH1cbiAgICBmaWx0ZXIuc2hvd19zcGlubmVyID0gZmFsc2U7XG59XG5cbi8qIEZ1bmN0aW9uIHRvIGxvYWQgZmlsdGVycyAoSnVzdCBWTEFOcykgKi9cbmFzeW5jIGZ1bmN0aW9uIGxvYWRfdGFibGVfZmlsdGVyc19hcnJheShhY3Rpb24sIGZpbHRlcikge1xuICAgIGxldCBpZmlkX3BhcmFtID0ge1xuICAgICAgICBpZmlkOiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImlmaWRcIikgfHwgcHJvcHMuY29udGV4dC5pZmlkXG4gICAgfTtcbiAgICBsZXQgaWZpZF9wYXJhbV9mb3JfdXJsID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKGlmaWRfcGFyYW0pO1xuICAgIFxuICAgIFxuICAgIGxldCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfcGFyYW1zKCk7XG4gICAgY29uc3QgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9mbG93L2FnZ3JlZ2F0ZWRfbGl2ZV9mbG93c19maWx0ZXJzLmx1YT9hY3Rpb249JHthY3Rpb259JiR7dXJsX3BhcmFtc30mJHtpZmlkX3BhcmFtX2Zvcl91cmx9YDtcbiAgICBsZXQgcmVzID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCk7XG4gICAgcmV0dXJuIHJlcy5tYXAoKHQpID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlkOiB0LmFjdGlvbiB8fCB0Lm5hbWUsXG4gICAgICAgICAgICBsYWJlbDogdC5sYWJlbCxcbiAgICAgICAgICAgIHRpdGxlOiB0LnRvb2x0aXAsXG4gICAgICAgICAgICBkYXRhX2xvYWRlZDogYWN0aW9uICE9ICdvdmVydmlldycsXG4gICAgICAgICAgICBvcHRpb25zOiB0LnZhbHVlLFxuICAgICAgICAgICAgaGlkZGVuOiAodC52YWx1ZS5sZW5ndGggPT0gMSlcbiAgICAgICAgfTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGdldF91cmxfcGFyYW1zKCkge1xuICAgIGxldCBhY3R1YWxfcGFyYW1zID0ge1xuICAgICAgICBpZmlkOiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImlmaWRcIikgfHwgcHJvcHMuY29udGV4dC5pZmlkLFxuICAgICAgICB2bGFuX2lkOiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInZsYW5faWRcIikgIC8qIE5vIGZpbHRlciBieSBkZWZhdWx0ICovLFxuICAgICAgICBkZXZpY2VJUDogbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJkZXZpY2VJUFwiKSxcbiAgICAgICAgYWdncmVnYXRpb25fY3JpdGVyaWE6IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiYWdncmVnYXRpb25fY3JpdGVyaWFcIikgfHwgc2VsZWN0ZWRfY3JpdGVyaWEudmFsdWUucGFyYW0sXG4gICAgICAgIGhvc3Q6IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiaG9zdFwiKSB8fCBwcm9wcy5jb250ZXh0Lmhvc3QsXG4gICAgfTsgICAgXG4gICAgXG4gICAgcmV0dXJuIGFjdHVhbF9wYXJhbXM7XG59XG5cblxuY29uc3QgbWFwX2NvbmZpZyA9IChjb25maWcpID0+IHtcbiAgICBjb25maWcuZW5hYmxlX3NlYXJjaCA9IHNlbGVjdGVkX2NyaXRlcmlhLnZhbHVlLnNlYXJjaF9lbmFibGVkID09IHRydWU7XG4gICAgcmV0dXJuIGNvbmZpZztcbn07XG5cbi8vLyBtZXRob2RzIHRvIGdldCBjb2x1bW5zIGNvbmZpZ1xuY29uc3QgbWFwX3RhYmxlX2RlZl9jb2x1bW5zID0gYXN5bmMgKGNvbHVtbnMpID0+IHtcbiAgICBjb2x1bW5zID0gW107ICAgIFxuICAgIGNvbHVtbnMucHVzaChcbiAgICAgICAge1xuICAgICAgICAgICAgc29ydGFibGU6IGZhbHNlLCB0aXRsZV9pMThuOidmbG93c19wYWdlLmxpdmVfZmxvd3MnICxuYW1lOiAnZmxvd3NfaWNvbicsIGRhdGFfZmllbGQ6ICdsaXZlX2Zsb3dzJywgY2xhc3M6IFsndGV4dC1jZW50ZXInXSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXJfZnVuYzogKGRhdGFfZmllbGQsIHJvd0RhdGEpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0X2Zsb3dzX2ljb24oZGF0YV9maWVsZCwgcm93RGF0YSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICBpZiAoc2VsZWN0ZWRfY3JpdGVyaWEudmFsdWUudmFsdWUgPT0gMSkge1xuXG4gICAgICAgIC8vIGFwcGxpY2F0aW9uIHByb3RvY29sIGNhc2VcbiAgICAgICAgY29sdW1ucy5wdXNoKFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRpdGxlX2kxOG46IFwiYXBwbGljYXRpb25fcHJvdG9cIiwgc29ydGFibGU6IHRydWUsICBuYW1lOiAnYXBwbGljYXRpb24nLCBkYXRhX2ZpZWxkOiAnYXBwbGljYXRpb24nLCBjbGFzczogWyd0ZXh0LW5vd3JhcCddLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcl9mdW5jOiAoZGF0YV9maWVsZCwgcm93RGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0X2FwcGxpY2F0aW9uX3Byb3RvX2d1ZXNzZWQoZGF0YV9maWVsZCwgcm93RGF0YSlcbiAgICAgICAgICAgICAgICAgICAgLy9yZXR1cm4gYCR7ZGF0YV9maWVsZC5sYWJlbF93aXRoX2ljb25zfWBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBcbiAgICAgICAgICAgIC8qe1xuICAgICAgICAgICAgICAgIHRpdGxlX2kxOG46IFwiYXBwbGljYXRpb25fcHJvdG9fZ3Vlc3NlZFwiLHNvcnRhYmxlOiBmYWxzZSwgbmFtZTogJ2FwcGxpY2F0aW9uJywgZGF0YV9maWVsZDogJ2lzX25vdF9ndWVzc2VkJywgY2xhc3M6IFsndGV4dC1ub3dyYXAnXSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXJfZnVuYzogKGRhdGFfZmllbGQsIHJvd0RhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdF9hcHBsaWNhdGlvbl9wcm90b19ndWVzc2VkKGRhdGFfZmllbGQsIHJvd0RhdGEpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSovXG4gICAgICAgICk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHNlbGVjdGVkX2NyaXRlcmlhLnZhbHVlLnZhbHVlID09IDIpIHtcbiAgICAgICAgLy8gY2xpZW50IGNhc2VcbiAgICAgICAgY29sdW1ucy5wdXNoKFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRpdGxlX2kxOG46IFwiY2xpZW50XCIsIHNvcnRhYmxlOiB0cnVlLCAgbmFtZTogJ2NsaWVudCcsIGRhdGFfZmllbGQ6ICdjbGllbnQnLCBjbGFzczogWyd0ZXh0LW5vd3JhcCddLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcl9mdW5jOiAoZGF0YV9maWVsZCwgcm93RGF0YSkgPT4ge1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXRfY2xpZW50X25hbWUoZGF0YV9maWVsZCwgcm93RGF0YSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoc2VsZWN0ZWRfY3JpdGVyaWEudmFsdWUudmFsdWUgPT0gMykge1xuICAgICAgICAvLyBzZXJ2ZXIgY2FzZVxuICAgICAgICBjb2x1bW5zLnB1c2goXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGl0bGVfaTE4bjogXCJsYXN0X3NlcnZlclwiLHNvcnRhYmxlOiB0cnVlLCAgbmFtZTogJ3NlcnZlcicsIGRhdGFfZmllbGQ6ICdzZXJ2ZXInLCBjbGFzczogWyd0ZXh0LW5vd3JhcCddLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcl9mdW5jOiAoZGF0YV9maWVsZCwgcm93RGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0X3NlcnZlcl9uYW1lKGRhdGFfZmllbGQsIHJvd0RhdGEpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHNlbGVjdGVkX2NyaXRlcmlhLnZhbHVlLnZhbHVlID09IDcpIHtcbiAgICAgICAgICAgIGNvbHVtbnMucHVzaChcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlX2kxOG46IFwiY2xpZW50XCIsIHNvcnRhYmxlOiB0cnVlLCBuYW1lOiAnY2xpZW50JywgZGF0YV9maWVsZDogJ2NsaWVudCcsIGNsYXNzOiBbJ3RleHQtbm93cmFwJ10sIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyX2Z1bmM6IChkYXRhX2ZpZWxkLCByb3dEYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0X2NsaWVudF9uYW1lKGRhdGFfZmllbGQsIHJvd0RhdGEpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgdGl0bGVfaTE4bjogXCJsYXN0X3NlcnZlclwiLCBzb3J0YWJsZTogdHJ1ZSwgbmFtZTogJ3NlcnZlcicsIGRhdGFfZmllbGQ6ICdzZXJ2ZXInLCBjbGFzczogWyd0ZXh0LW5vd3JhcCddLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcl9mdW5jOiAoZGF0YV9maWVsZCwgcm93RGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0X3NlcnZlcl9uYW1lKGRhdGFfZmllbGQsIHJvd0RhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgfSBlbHNlIGlmIChzZWxlY3RlZF9jcml0ZXJpYS52YWx1ZS52YWx1ZSA9PSA4KSB7XG4gICAgICAgICAgICBjb2x1bW5zLnB1c2goXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0aXRsZV9pMThuOiBcImNsaWVudFwiLCBzb3J0YWJsZTogdHJ1ZSwgbmFtZTogJ2NsaWVudCcsIGRhdGFfZmllbGQ6ICdjbGllbnQnLCBjbGFzczogWyd0ZXh0LW5vd3JhcCddLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcl9mdW5jOiAoZGF0YV9maWVsZCwgcm93RGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdF9jbGllbnRfbmFtZShkYXRhX2ZpZWxkLCByb3dEYXRhKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIHRpdGxlX2kxOG46IFwibGFzdF9zZXJ2ZXJcIiwgc29ydGFibGU6IHRydWUsIG5hbWU6ICdzZXJ2ZXInLCBkYXRhX2ZpZWxkOiAnc2VydmVyJywgY2xhc3M6IFsndGV4dC1ub3dyYXAnXSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXJfZnVuYzogKGRhdGFfZmllbGQsIHJvd0RhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdF9zZXJ2ZXJfbmFtZShkYXRhX2ZpZWxkLCByb3dEYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlX2kxOG46IFwiYXBwbGljYXRpb25fcHJvdG9cIixzb3J0YWJsZTogdHJ1ZSwgIG5hbWU6ICdhcHBsaWNhdGlvbicsIGRhdGFfZmllbGQ6ICdhcHBsaWNhdGlvbicsIGNsYXNzOiBbJ3RleHQtbm93cmFwJ10sIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyX2Z1bmM6IChkYXRhX2ZpZWxkLCByb3dEYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0X2FwcGxpY2F0aW9uX3Byb3RvX2d1ZXNzZWQoZGF0YV9maWVsZCwgcm93RGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9yZXR1cm4gYCR7ZGF0YV9maWVsZC5sYWJlbF93aXRoX2ljb25zfWBcbiAgICAgICAgICAgICAgICAgICAgfVxuXHRcdCAgICAgICAgfVxuICAgICAgICAgICAgKVxuICAgIH1cbiAgICBlbHNlIGlmIChwcm9wcy5jb250ZXh0LmlzX250b3BfZW50ZXJwcmlzZV9tKSB7XG4gICAgICAgIGlmIChzZWxlY3RlZF9jcml0ZXJpYS52YWx1ZS52YWx1ZSA9PSA0IHx8IHNlbGVjdGVkX2NyaXRlcmlhLnZhbHVlLnZhbHVlID09IDcgKSB7XG4gICAgICAgICAgICBjb2x1bW5zLnB1c2goXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0aXRsZV9pMThuOiBcImNsaWVudFwiLCBzb3J0YWJsZTogdHJ1ZSwgbmFtZTogJ2NsaWVudCcsIGRhdGFfZmllbGQ6ICdjbGllbnQnLCBjbGFzczogWyd0ZXh0LW5vd3JhcCddLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcl9mdW5jOiAoZGF0YV9maWVsZCwgcm93RGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdF9jbGllbnRfbmFtZShkYXRhX2ZpZWxkLCByb3dEYXRhKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIHRpdGxlX2kxOG46IFwibGFzdF9zZXJ2ZXJcIiwgc29ydGFibGU6IHRydWUsIG5hbWU6ICdzZXJ2ZXInLCBkYXRhX2ZpZWxkOiAnc2VydmVyJywgY2xhc3M6IFsndGV4dC1ub3dyYXAnXSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXJfZnVuYzogKGRhdGFfZmllbGQsIHJvd0RhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdF9zZXJ2ZXJfbmFtZShkYXRhX2ZpZWxkLCByb3dEYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2UgaWYgKHNlbGVjdGVkX2NyaXRlcmlhLnZhbHVlLnZhbHVlID09IDUpIHtcbiAgICAgICAgICAgIGNvbHVtbnMucHVzaChcblx0XHR7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlX2kxOG46IFwiY2xpZW50XCIsIHNvcnRhYmxlOiB0cnVlLCBuYW1lOiAnY2xpZW50JywgZGF0YV9maWVsZDogJ2NsaWVudCcsIGNsYXNzOiBbJ3RleHQtbm93cmFwJ10sIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyX2Z1bmM6IChkYXRhX2ZpZWxkLCByb3dEYXRhKSA9PiB7XG5cdFx0XHRyZXR1cm4gZm9ybWF0X2NsaWVudF9uYW1lKGRhdGFfZmllbGQsIHJvd0RhdGEpOyAgICAgICAgICAgICAgICBcblx0XHQgICAgfVxuXHRcdH0sXG5cdFx0e1xuXHRcdCAgICB0aXRsZV9pMThuOiBcImxhc3Rfc2VydmVyXCIsIHNvcnRhYmxlOiB0cnVlLCBuYW1lOiAnc2VydmVyJywgZGF0YV9maWVsZDogJ3NlcnZlcicsIGNsYXNzOiBbJ3RleHQtbm93cmFwJ10sIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyX2Z1bmM6IChkYXRhX2ZpZWxkLCByb3dEYXRhKSA9PiB7XG5cdFx0XHRyZXR1cm4gZm9ybWF0X3NlcnZlcl9uYW1lKGRhdGFfZmllbGQsIHJvd0RhdGEpO1xuXHRcdCAgICB9XG5cdFx0fSxcblx0XHR7XG5cdFx0ICAgIHRpdGxlX2kxOG46IFwiYXBwbGljYXRpb25fcHJvdG9cIixzb3J0YWJsZTogdHJ1ZSwgIG5hbWU6ICdhcHBsaWNhdGlvbicsIGRhdGFfZmllbGQ6ICdhcHBsaWNhdGlvbicsIGNsYXNzOiBbJ3RleHQtbm93cmFwJ10sIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyX2Z1bmM6IChkYXRhX2ZpZWxkLCByb3dEYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdF9hcHBsaWNhdGlvbl9wcm90b19ndWVzc2VkKGRhdGFfZmllbGQsIHJvd0RhdGEpO1xuICAgICAgICAgICAgICAgICAgICAvL3JldHVybiBgJHtkYXRhX2ZpZWxkLmxhYmVsX3dpdGhfaWNvbnN9YFxuXHRcdCAgICB9XG5cdFx0fSk7XG4gICAgICAgIH0gZWxzZSBpZiAoc2VsZWN0ZWRfY3JpdGVyaWEudmFsdWUudmFsdWUgPT0gNikge1xuICAgICAgICAgICAgY29sdW1ucy5wdXNoKFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGVfaTE4bjogXCJpbmZvXCIsIHNvcnRhYmxlOiB0cnVlLCBuYW1lOiAnaW5mbycsIGRhdGFfZmllbGQ6ICdpbmZvJywgY2xhc3M6IFsndGV4dC1ub3dyYXAnXSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXJfZnVuYzogKGRhdGFfZmllbGQpID0+IHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGAke2RhdGFfZmllbGQubGFiZWx9YFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocHJvcHMuY29udGV4dC52bGFucy5sZW5ndGggPiAyKSB7XG4gICAgICAgIGNvbHVtbnMucHVzaCh7XG4gICAgICAgICAgICB0aXRsZV9pMThuOiBcInZsYW5cIiwgc29ydGFibGU6IHRydWUsIG5hbWU6ICd2bGFuX2lkJywgZGF0YV9maWVsZDogJ3ZsYW5faWQnLCBjbGFzczogWyd0ZXh0LW5vd3JhcCAnLCd0ZXh0LWNlbnRlciddLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcl9mdW5jOiAoZGF0YV9maWVsZCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChkYXRhX2ZpZWxkLmlkID09PSAwIHx8IGRhdGFfZmllbGQuaWQgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhYmVsID0gaTE4bignbm9fdmxhbicpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgPGEgaHJlZj1cIiR7aHR0cF9wcmVmaXh9L2x1YS9mbG93c19zdGF0cy5sdWE/dmxhbj0wXCI+JHtsYWJlbH08L2E+YFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYDxhIGhyZWY9XCIke2h0dHBfcHJlZml4fS9sdWEvZmxvd3Nfc3RhdHMubHVhP3ZsYW49JHtkYXRhX2ZpZWxkLmlkfVwiPiR7ZGF0YV9maWVsZC5sYWJlbH08L2E+YFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvbHVtbnMucHVzaCh7XG4gICAgICAgIHRpdGxlX2kxOG46IFwiZmxvd3NcIiwgc29ydGFibGU6IHRydWUsIG5hbWU6ICdmbG93cycsIGRhdGFfZmllbGQ6ICdmbG93cycsIGNsYXNzOiBbJ3RleHQtbm93cmFwICcsJ3RleHQtY2VudGVyJ10sIHJlc3BvbnNpdmVQcmlvcml0eTogMVxuICAgIH0sIHtcbiAgICAgICAgdGl0bGVfaTE4bjogXCJ0b3RhbF9zY29yZVwiLCBzb3J0YWJsZTogdHJ1ZSwgbmFtZTogJ3Njb3JlJywgZGF0YV9maWVsZDogJ3RvdF9zY29yZScsIGNsYXNzOiBbJ3RleHQtY2VudGVyJ10sIHJlc3BvbnNpdmVQcmlvcml0eTogMVxuICAgIH0pO1xuXG4gICAgaWYgKHNlbGVjdGVkX2NyaXRlcmlhLnZhbHVlLnZhbHVlICE9IDIgJiYgc2VsZWN0ZWRfY3JpdGVyaWEudmFsdWUudmFsdWUgIT0gNCAmJiBzZWxlY3RlZF9jcml0ZXJpYS52YWx1ZS52YWx1ZSAhPSA3KVxuICAgICAgICBjb2x1bW5zLnB1c2goeyB0aXRsZV9pMThuOiBcImNsaWVudHNcIixzb3J0YWJsZTogdHJ1ZSwgIG5hbWU6ICdudW1fY2xpZW50cycsIGRhdGFfZmllbGQ6ICdudW1fY2xpZW50cycsIGNsYXNzOiBbJ3RleHQtbm93cmFwICcsJ3RleHQtY2VudGVyJ10sIHJlc3BvbnNpdmVQcmlvcml0eTogMSB9KTtcblxuICAgIGlmIChzZWxlY3RlZF9jcml0ZXJpYS52YWx1ZS52YWx1ZSAhPSAzICYmIHNlbGVjdGVkX2NyaXRlcmlhLnZhbHVlLnZhbHVlICE9IDQgJiYgc2VsZWN0ZWRfY3JpdGVyaWEudmFsdWUudmFsdWUgIT0gNylcbiAgICAgICAgY29sdW1ucy5wdXNoKHsgdGl0bGVfaTE4bjogXCJzZXJ2ZXJzXCIsc29ydGFibGU6IHRydWUsICBuYW1lOiAnbnVtX3NlcnZlcnMnLCBkYXRhX2ZpZWxkOiAnbnVtX3NlcnZlcnMnLCBjbGFzczogWyd0ZXh0LW5vd3JhcCAnLCd0ZXh0LWNlbnRlciddLCByZXNwb25zaXZlUHJpb3JpdHk6IDEgfSk7XG5cbiAgICBjb2x1bW5zLnB1c2goe1xuICAgICAgICB0aXRsZV9pMThuOiBcImJyZWFrZG93blwiLCAgc29ydGFibGU6IGZhbHNlLCBuYW1lOiAnYnJlYWtkb3duJywgZGF0YV9maWVsZDogJ2JyZWFrZG93bicsIGNsYXNzOiBbJ3RleHQtbm93cmFwJywndGV4dC1jZW50ZXInXSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXJfZnVuYzogKGRhdGFfZmllbGQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBOdG9wVXRpbHMuY3JlYXRlQnJlYWtkb3duKGRhdGFfZmllbGQucGVyY2VudGFnZV9ieXRlc19zZW50LCBkYXRhX2ZpZWxkLnBlcmNlbnRhZ2VfYnl0ZXNfcmN2ZCwgaTE4bignc2VudCcpLCBpMThuKCdyY3ZkJykpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICB0aXRsZV9pMThuOiBcInRyYWZmaWNfc2VudFwiLHNvcnRhYmxlOiB0cnVlLCAgbmFtZTogJ2J5dGVzX3NlbnQnLCBkYXRhX2ZpZWxkOiAnYnl0ZXNfc2VudCcsIGNsYXNzOiBbJ3RleHQtbm93cmFwJywndGV4dC1lbmQnXSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXJfZnVuYzogKGRhdGFfZmllbGQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBOdG9wVXRpbHMuYnl0ZXNUb1NpemUoZGF0YV9maWVsZCk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIHRpdGxlX2kxOG46IFwidHJhZmZpY19yY3ZkXCIsIHNvcnRhYmxlOiB0cnVlLCBuYW1lOiAnYnl0ZXNfcmN2ZCcsIGRhdGFfZmllbGQ6ICdieXRlc19yY3ZkJywgY2xhc3M6IFsndGV4dC1ub3dyYXAnLCd0ZXh0LWVuZCddLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcl9mdW5jOiAoZGF0YV9maWVsZCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIE50b3BVdGlscy5ieXRlc1RvU2l6ZShkYXRhX2ZpZWxkKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAgdGl0bGVfaTE4bjogXCJ0b3RhbF90cmFmZmljXCIsc29ydGFibGU6IHRydWUsICBuYW1lOiAndG90X3RyYWZmaWMnLCBkYXRhX2ZpZWxkOiAndG90X3RyYWZmaWMnLCBjbGFzczogWyd0ZXh0LW5vd3JhcCcsJ3RleHQtZW5kJ10sIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyX2Z1bmM6IChkYXRhX2ZpZWxkKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gTnRvcFV0aWxzLmJ5dGVzVG9TaXplKGRhdGFfZmllbGQpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbHVtbnM7XG59XG5cbmNvbnN0IGZvcm1hdF9jbGllbnRfbmFtZSA9IGZ1bmN0aW9uIChkYXRhLCByb3dEYXRhKSB7XG4gICAgbGV0IGFsZXJ0X2xhYmVsID0gJydcbiAgICBpZiAoZGF0YS5pc19hbGVydGVkKSB7XG4gICAgICAgIGFsZXJ0X2xhYmVsID0gYDxpIGNsYXNzPSdmYXMgZmEtZXhjbGFtYXRpb24tdHJpYW5nbGUnIHN0eWxlPSdjb2xvcjogI0I5NEE0ODsnPjwvaT5gO1xuICAgIH1cblxuICAgIGlmICghZGF0YS5pbl9tZW1vcnkpIHtcbiAgICAgICAgcmV0dXJuIGAke2RhdGEubGFiZWx9ICR7YWxlcnRfbGFiZWx9ICR7ZGF0YS5leHRyYV9sYWJlbHN9YDtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gYDxhIGhyZWY9XCIke2h0dHBfcHJlZml4fS9sdWEvZmxvd3Nfc3RhdHMubHVhP2NsaWVudD0ke2RhdGEuaXB9JnZsYW49JHtkYXRhLnZsYW5faWR9XCI+JHtkYXRhLmxhYmVsfTwvYT4gJHthbGVydF9sYWJlbH0gJHtkYXRhLmV4dHJhX2xhYmVsc30gPGEgaHJlZj1cIiR7aHR0cF9wcmVmaXh9L2x1YS9ob3N0X2RldGFpbHMubHVhP2hvc3Q9JHtkYXRhLmlwfSZ2bGFuPSR7ZGF0YS52bGFuX2lkfVwiIGRhdGEtYnMtdG9nZ2xlPSd0b29sdGlwJyB0aXRsZT0nJz48aSBjbGFzcz0nZmFzIGZhLWxhcHRvcCc+PC9pPjwvYT5gO1xuICAgIH1cbn1cblxuY29uc3QgZm9ybWF0X3NlcnZlcl9uYW1lID0gZnVuY3Rpb24gKGRhdGEsIHJvd0RhdGEpIHtcbiAgICBsZXQgYWxlcnRfbGFiZWwgPSAnJ1xuICAgIGlmIChkYXRhLmlzX2FsZXJ0ZWQpIHtcbiAgICAgICAgYWxlcnRfbGFiZWwgPSBgPGkgY2xhc3M9J2ZhcyBmYS1leGNsYW1hdGlvbi10cmlhbmdsZScgc3R5bGU9J2NvbG9yOiAjQjk0QTQ4Oyc+PC9pPmA7XG4gICAgfVxuXG4gICAgaWYgKCFkYXRhLmluX21lbW9yeSkge1xuICAgICAgICBpZiAoKHNlbGVjdGVkX2NyaXRlcmlhLnZhbHVlLnZhbHVlID09IDcgfHwgc2VsZWN0ZWRfY3JpdGVyaWEudmFsdWUudmFsdWUgPT0gOCkgJiYgcm93RGF0YS5zcnZfcG9ydCAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gYCR7ZGF0YS5sYWJlbH0gJHthbGVydF9sYWJlbH0gJHtkYXRhLmV4dHJhX2xhYmVsc306JHtyb3dEYXRhLnNydl9wb3J0LmxhYmVsfWA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYCR7ZGF0YS5sYWJlbH0gJHthbGVydF9sYWJlbH0gJHtkYXRhLmV4dHJhX2xhYmVsc31gO1xuICAgICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoKHNlbGVjdGVkX2NyaXRlcmlhLnZhbHVlLnZhbHVlID09IDcgfHwgc2VsZWN0ZWRfY3JpdGVyaWEudmFsdWUudmFsdWUgPT0gOCkgJiYgIHJvd0RhdGEuc3J2X3BvcnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGA8YSBocmVmPVwiJHtodHRwX3ByZWZpeH0vbHVhL2Zsb3dzX3N0YXRzLmx1YT9zZXJ2ZXI9JHtkYXRhLmlwfSZ2bGFuPSR7ZGF0YS52bGFuX2lkfVwiPiR7ZGF0YS5sYWJlbH08L2E+ICR7YWxlcnRfbGFiZWx9ICR7ZGF0YS5leHRyYV9sYWJlbHN9IDxhIGhyZWY9XCIke2h0dHBfcHJlZml4fS9sdWEvaG9zdF9kZXRhaWxzLmx1YT9ob3N0PSR7ZGF0YS5pcH0mdmxhbj0ke2RhdGEudmxhbl9pZH1cIiBkYXRhLWJzLXRvZ2dsZT0ndG9vbHRpcCcgdGl0bGU9Jyc+PGkgY2xhc3M9J2ZhcyBmYS1sYXB0b3AnPjwvaT48L2E+OjxhIGhyZWY9XCIke2h0dHBfcHJlZml4fS9sdWEvZmxvd3Nfc3RhdHMubHVhP3BvcnQ9JHtyb3dEYXRhLnNydl9wb3J0LmlkfSZ2bGFuPSR7ZGF0YS52bGFuX2lkfVwiPiR7cm93RGF0YS5zcnZfcG9ydC5sYWJlbH08L2E+YDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBgPGEgaHJlZj1cIiR7aHR0cF9wcmVmaXh9L2x1YS9mbG93c19zdGF0cy5sdWE/c2VydmVyPSR7ZGF0YS5pcH0mdmxhbj0ke2RhdGEudmxhbl9pZH1cIj4ke2RhdGEubGFiZWx9PC9hPiAke2FsZXJ0X2xhYmVsfSAke2RhdGEuZXh0cmFfbGFiZWxzfSA8YSBocmVmPVwiJHtodHRwX3ByZWZpeH0vbHVhL2hvc3RfZGV0YWlscy5sdWE/aG9zdD0ke2RhdGEuaXB9JnZsYW49JHtkYXRhLnZsYW5faWR9XCIgZGF0YS1icy10b2dnbGU9J3Rvb2x0aXAnIHRpdGxlPScnPjxpIGNsYXNzPSdmYXMgZmEtbGFwdG9wJz48L2k+PC9hPmA7XG5cbiAgICAgICAgfVxuICAgIH1cbn1cblxuY29uc3QgZm9ybWF0X2Zsb3dzX2ljb24gPSBmdW5jdGlvbiAoZGF0YSwgcm93RGF0YSkge1xuICAgIGxldCB1cmwgPSBgYDtcbiAgICBsZXQgYWRkX2hvc3QgPSBmYWxzZTtcbiAgICBpZihwcm9wcy5jb250ZXh0Lmhvc3QgIT0gbnVsbCAmJiBwcm9wcy5jb250ZXh0Lmhvc3QgIT0gXCJcIiApXG4gICAgICAgIGFkZF9ob3N0ID0gdHJ1ZTtcbiAgICBpZiAoc2VsZWN0ZWRfY3JpdGVyaWEudmFsdWUudmFsdWUgPT0gMSkge1xuICAgICAgICB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL2Zsb3dzX3N0YXRzLmx1YT9hcHBsaWNhdGlvbj0ke3Jvd0RhdGEuYXBwbGljYXRpb24uaWR9YDtcbiAgICAgICAgaWYgKGFkZF9ob3N0KSB1cmwgPSB1cmwgKyBgJmhvc3Q9YCtwcm9wcy5jb250ZXh0Lmhvc3Q7XG4gICAgfVxuICAgIGVsc2UgaWYgKHNlbGVjdGVkX2NyaXRlcmlhLnZhbHVlLnZhbHVlID09IDIpXG4gICAgICAgIHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvZmxvd3Nfc3RhdHMubHVhP2NsaWVudD0ke3Jvd0RhdGEuY2xpZW50LmlwfSZ2bGFuPSR7cm93RGF0YS5jbGllbnQudmxhbl9pZH1gO1xuICAgIGVsc2UgaWYgKHNlbGVjdGVkX2NyaXRlcmlhLnZhbHVlLnZhbHVlID09IDMpXG4gICAgICAgIHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvZmxvd3Nfc3RhdHMubHVhP3NlcnZlcj0ke3Jvd0RhdGEuc2VydmVyLmlwfSZ2bGFuPSR7cm93RGF0YS5zZXJ2ZXIudmxhbl9pZH1gO1xuICAgIGVsc2UgaWYgKHNlbGVjdGVkX2NyaXRlcmlhLnZhbHVlLnZhbHVlID09IDQpXG4gICAgICAgIHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvZmxvd3Nfc3RhdHMubHVhP2NsaWVudD0ke3Jvd0RhdGEuY2xpZW50LmlwfSZzZXJ2ZXI9JHtyb3dEYXRhLnNlcnZlci5pcH0mdmxhbj0ke3Jvd0RhdGEudmxhbl9pZC5pZH1gO1xuICAgIGVsc2UgaWYgKHNlbGVjdGVkX2NyaXRlcmlhLnZhbHVlLnZhbHVlID09IDUpXG4gICAgICAgIHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvZmxvd3Nfc3RhdHMubHVhP2FwcGxpY2F0aW9uPSR7cm93RGF0YS5hcHBsaWNhdGlvbi5pZH0mY2xpZW50PSR7cm93RGF0YS5jbGllbnQuaXB9JnNlcnZlcj0ke3Jvd0RhdGEuc2VydmVyLmlwfSZ2bGFuPSR7cm93RGF0YS52bGFuX2lkLmlkfWA7XG4gICAgZWxzZSBpZiAoc2VsZWN0ZWRfY3JpdGVyaWEudmFsdWUudmFsdWUgPT0gNikge1xuICAgICAgICB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL2Zsb3dzX3N0YXRzLmx1YT9mbG93X2luZm89JHtyb3dEYXRhLmluZm8uaWR9YDtcbiAgICAgICAgaWYgKGFkZF9ob3N0KSB1cmwgPSB1cmwgKyBgJmhvc3Q9YCtwcm9wcy5jb250ZXh0Lmhvc3Q7XG4gICAgfVxuICAgIGVsc2UgaWYgKHNlbGVjdGVkX2NyaXRlcmlhLnZhbHVlLnZhbHVlID09IDcpIHtcbiAgICAgICAgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9mbG93c19zdGF0cy5sdWE/Y2xpZW50PSR7cm93RGF0YS5jbGllbnQuaXB9JnNlcnZlcj0ke3Jvd0RhdGEuc2VydmVyLmlwfSZ2bGFuPSR7cm93RGF0YS52bGFuX2lkLmlkfSZzcnZfcG9ydD0ke3Jvd0RhdGEuc3J2X3BvcnQuaWR9YDtcbiAgICB9XG4gICAgZWxzZSBpZiAoc2VsZWN0ZWRfY3JpdGVyaWEudmFsdWUudmFsdWUgPT0gOCkge1xuICAgICAgICB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL2Zsb3dzX3N0YXRzLmx1YT9hcHBsaWNhdGlvbj0ke3Jvd0RhdGEuYXBwbGljYXRpb24uaWR9JmNsaWVudD0ke3Jvd0RhdGEuY2xpZW50LmlwfSZzZXJ2ZXI9JHtyb3dEYXRhLnNlcnZlci5pcH0mdmxhbj0ke3Jvd0RhdGEudmxhbl9pZC5pZH0mc3J2X3BvcnQ9JHtyb3dEYXRhLnNydl9wb3J0LmlkfWA7XG4gICAgfVxuXG4gICAgcmV0dXJuIGA8YSBocmVmPSR7dXJsfSBjbGFzcz1cImJ0biBidG4tc20gYnRuLWluZm9cIiA+PGkgY2xhc3M9ICdmYXMgZmEtc3RyZWFtJz48L2k+PC9hPmBcbn1cblxuY29uc3QgZm9ybWF0X2FwcGxpY2F0aW9uX3Byb3RvX2d1ZXNzZWQgPSBmdW5jdGlvbiAoZGF0YSwgcm93RGF0YSkge1xuICAgIGlmKHJvd0RhdGEuY29uZmlkZW5jZSA9PSAwIClcbiAgICAgICAgcmV0dXJuIGAke2RhdGEubGFiZWxfd2l0aF9pY29uc30gPHNwYW4gY2xhc3M9XFxcImJhZGdlIGJnLXdhcm5pbmdcXFwiIHRpdGxlPVxcXCIgYCsgcm93RGF0YS5jb25maWRlbmNlX25hbWUgKyBgXFxcIj5gKyByb3dEYXRhLmNvbmZpZGVuY2VfbmFtZSArIGAgPC9zcGFuPmBcbiAgICBlbHNlIGlmIChyb3dEYXRhLmNvbmZpZGVuY2UpXG4gICAgICAgIHJldHVybiBgJHtkYXRhLmxhYmVsX3dpdGhfaWNvbnN9IDxzcGFuIGNsYXNzPVxcXCJiYWRnZSBiZy1zdWNjZXNzXFxcIiB0aXRsZT1cXFwiYCsgcm93RGF0YS5jb25maWRlbmNlX25hbWUgKyBgIFxcXCI+IGArIHJvd0RhdGEuY29uZmlkZW5jZV9uYW1lICsgYDwvc3Bhbj5gXG4gICAgXG4gICAgICAgIFxufVxuXG48L3NjcmlwdD5cbiIsIjx0ZW1wbGF0ZT5cbiAgPGRpdiBpZD1cImFnZ3JlZ2F0ZWRfbGl2ZV9mbG93c1wiPiAgICAgICAgICBcbiAgICA8RGF0YXRhYmxlIHJlZj1cInRhYmxlX3Rlc3RcIlxuXHQgICAgICAgOnRhYmxlX2J1dHRvbnM9XCJ0YWJsZV9jb25maWcudGFibGVfYnV0dG9uc1wiXG5cdCAgICAgICA6Y29sdW1uc19jb25maWc9XCJ0YWJsZV9jb25maWcuY29sdW1uc19jb25maWdcIlxuXHQgICAgICAgOmRhdGFfdXJsPVwidGFibGVfY29uZmlnLmRhdGFfdXJsXCJcblx0ICAgICAgIDpmaWx0ZXJfYnV0dG9ucz1cInRhYmxlX2NvbmZpZy50YWJsZV9maWx0ZXJzXCJcblx0ICAgICAgIDplbmFibGVfc2VhcmNoPVwidGFibGVfY29uZmlnLmVuYWJsZV9zZWFyY2hcIlxuXHQgICAgICAgOnRhYmxlX2NvbmZpZz1cInRhYmxlX2NvbmZpZy50YWJsZV9jb25maWdcIj5cbiAgICA8L0RhdGF0YWJsZT5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIG9uQmVmb3JlTW91bnQgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgTnRvcFV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvbnRvcC11dGlsc1wiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRhdGFibGUgfSBmcm9tIFwiLi9kYXRhdGFibGUudnVlXCI7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIHVybDogU3RyaW5nLFxuICAgIGlmaWQ6IE51bWJlcixcbiAgICBjb2x1bW5zX2NvbmZpZzogQXJyYXlcbn0pO1xuXG5jb25zdCB0YWJsZV9jb25maWcgPSByZWYoe30pXG5jb25zdCB0YWJsZV90ZXN0ID0gcmVmKG51bGwpO1xuXG5vbkJlZm9yZU1vdW50KCgpID0+IHtcbiAgICBzZXRfZGF0YXRhYmxlX2NvbmZpZygpO1xufSk7XG5cbmZ1bmN0aW9uIHNldF9kYXRhdGFibGVfY29uZmlnKCkge1xuICAgIGNvbnN0IGRhdGF0YWJsZUJ1dHRvbiA9IFtdO1xuICAgIFxuICAgIGxldCBwYXJhbXMgPSB7IFxuXHRpZmlkOiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImlmaWRcIikgfHwgcHJvcHMuaWZpZCxcdFxuICAgIH07XG4gICAgbGV0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMocGFyYW1zKTtcbiAgICBcbiAgICBkYXRhdGFibGVCdXR0b24ucHVzaCh7XG5cdHRleHQ6ICc8aSBjbGFzcz1cImZhcyBmYS1zeW5jXCI+PC9pPicsXG5cdGNsYXNzTmFtZTogJ2J0bi1saW5rJyxcblx0YWN0aW9uOiBmdW5jdGlvbiAoZSwgZHQsIG5vZGUsIGNvbmZpZykge1xuICAgICAgICAgICAgdGFibGVfdGVzdC52YWx1ZS5yZWxvYWQoKTtcblx0fVxuICAgIH0pO1xuICAgIFxuICAgIGxldCBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnID0ge1xuXHR0YWJsZV9idXR0b25zOiBkYXRhdGFibGVCdXR0b24sXG5cdGRhdGFfdXJsOiBgJHtwcm9wcy51cmx9PyR7dXJsX3BhcmFtc31gLFxuXHRlbmFibGVfc2VhcmNoOiB0cnVlLFxuICAgIH07XG4gICAgXG4gICAgbGV0IGNvbHVtbnMgPSBbXTtcbiAgICBcbiAgICBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnLmNvbHVtbnNfY29uZmlnID0gcHJvcHMuY29sdW1uc19jb25maWc7XG4gICAgdGFibGVfY29uZmlnLnZhbHVlID0gZGVmYXVsdERhdGF0YWJsZUNvbmZpZztcbn1cbiAgICBcbjwvc2NyaXB0PlxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbjxtb2RhbCBAc2hvd2VkPVwic2hvd2VkKClcIiByZWY9XCJtb2RhbF9pZFwiPlxuICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPnt7dGl0bGV9fTwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Ym9keT5cbiAgICA8ZGl2IGNsYXNzPVwiY29udGFpbmVyLWZsdWlkXCI+XG5cbiAgICAgIDwhLS0gUnVsZSBJRCAtLT5cbiAgICAgIDxkaXYgY2xhc3M9XCJyb3cgZm9ybS1ncm91cCBtYi0zXCIgdi1zaG93PVwiIWlzX29wZW5faW5fYWRkXCI+XG5cdDxkaXYgY2xhc3M9XCJjb2wgY29sLW1kLTEyXCI+XG4gICAgICAgICAgPGxhYmVsIGNsYXNzPVwiZm9ybS1sYWJlbFwiPnt7X2kxOG4oXCJuZWRnZS5wYWdlX3J1bGVzX2NvbmZpZy5ydWxlX2lkXCIpfX08L2xhYmVsPlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiB2LW1vZGVsPVwibmV3X3J1bGVfaWRcIj5cbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiaGlkZGVuXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiB2LW1vZGVsPVwicnVsZV9pZFwiPlxuXHQ8L2Rpdj5cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8IS0tIFNvdXJjZSAtLT5cbiAgICAgIDxkaXYgY2xhc3M9XCJyb3cgZm9ybS1ncm91cCBtYi0zXCI+XG5cdDxkaXYgY2xhc3M9XCJjb2wgY29sLW1kLTZcIj5cbiAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJmb3JtLWxhYmVsXCI+e3tfaTE4bihcIm5lZGdlLnBhZ2VfcnVsZXNfY29uZmlnLm1vZGFsX3J1bGVfY29uZmlnLnNvdXJjZV90eXBlXCIpfX08L2xhYmVsPlxuXHQgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cInNlbGVjdGVkX3NvdXJjZV90eXBlXCJcblx0XHRcdCAgQHNlbGVjdF9vcHRpb249XCJjaGFuZ2Vfc291cmNlX3R5cGUoKVwiXG5cdFx0XHQgIDpvcHRpb25zPVwidHlwZV9hcnJheVwiPlxuXHQgICAgPC9TZWxlY3RTZWFyY2g+XG5cdDwvZGl2PlxuXHQ8ZGl2IGNsYXNzPVwiY29sIGNvbC1tZC02XCI+XG4gICAgICAgICAgPGxhYmVsIGNsYXNzPVwiZm9ybS1sYWJlbFwiPnt7X2kxOG4oXCJuZWRnZS5wYWdlX3J1bGVzX2NvbmZpZy5zb3VyY2VcIil9fTwvbGFiZWw+XG5cdCAgPGRpdiB2LWlmPVwic2VsZWN0ZWRfc291cmNlX3R5cGUudmFsdWUgPT0gJ2ludGVyZmFjZSdcIj5cblx0ICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF9zb3VyY2VfaW50ZXJmYWNlXCJcblx0XHRcdCAgOm9wdGlvbnM9XCJpbnRlcmZhY2VfYXJyYXlcIj5cblx0ICAgIDwvU2VsZWN0U2VhcmNoPlxuXHQgIDwvZGl2PlxuXHQgIDxkaXYgdi1lbHNlPlx0ICAgIFxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiA6cGF0dGVybj1cInNvdXJjZV9yZWdleFwiICB2LW1vZGVsPVwic291cmNlXCI+XG5cdCAgPC9kaXY+XG5cdDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICBcbiAgICAgIDwhLS0gRGVzdCAtLT5cbiAgICAgIDxkaXYgY2xhc3M9XCJyb3cgZm9ybS1ncm91cCBtYi0zXCI+XG5cdDxkaXYgY2xhc3M9XCJjb2wgY29sLW1kLTZcIj5cbiAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJmb3JtLWxhYmVsXCI+e3tfaTE4bihcIm5lZGdlLnBhZ2VfcnVsZXNfY29uZmlnLm1vZGFsX3J1bGVfY29uZmlnLmRlc3RfdHlwZVwiKX19PC9sYWJlbD5cblx0ICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF9kZXN0X3R5cGVcIlxuXHRcdFx0ICBAc2VsZWN0X29wdGlvbj1cImNoYW5nZV9kZXN0X3R5cGUoKVwiXG5cdFx0XHQgIDpvcHRpb25zPVwidHlwZV9hcnJheVwiPlxuXHQgICAgPC9TZWxlY3RTZWFyY2g+XG5cdDwvZGl2PlxuXHQ8ZGl2IGNsYXNzPVwiY29sIGNvbC1tZC02XCI+XG4gICAgICAgICAgPGxhYmVsIGNsYXNzPVwiZm9ybS1sYWJlbFwiPnt7X2kxOG4oXCJuZWRnZS5wYWdlX3J1bGVzX2NvbmZpZy5kZXN0XCIpfX08L2xhYmVsPlxuXHQgIDxkaXYgdi1pZj1cInNlbGVjdGVkX2Rlc3RfdHlwZS52YWx1ZSA9PSAnaW50ZXJmYWNlJ1wiPlxuXHQgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cInNlbGVjdGVkX2Rlc3RfaW50ZXJmYWNlXCJcblx0XHRcdCAgOm9wdGlvbnM9XCJpbnRlcmZhY2VfYXJyYXlcIj5cblx0ICAgIDwvU2VsZWN0U2VhcmNoPlxuXHQgIDwvZGl2PlxuXHQgIDxkaXYgdi1lbHNlPlx0ICAgIFxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiA6cGF0dGVybj1cImRlc3RfcmVnZXhcIiB2LW1vZGVsPVwiZGVzdFwiPlxuXHQgIDwvZGl2PlxuXHQ8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgXG4gICAgICA8IS0tIERpcmVjdGlvbiAtLT5cbiAgICAgIDxkaXYgY2xhc3M9XCJyb3cgZm9ybS1ncm91cCBtYi0zXCI+XG5cdDxkaXYgY2xhc3M9XCJjb2wgY29sLW1kLTEyXCI+XG4gICAgICAgICAgPGxhYmVsIGNsYXNzPVwiZm9ybS1sYWJlbFwiPnt7X2kxOG4oXCJuZWRnZS5wYWdlX3J1bGVzX2NvbmZpZy5kaXJlY3Rpb25cIil9fTwvbGFiZWw+XG5cdCAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfZGlyZWN0aW9uXCJcblx0XHRcdCAgOm9wdGlvbnM9XCJkaXJlY3Rpb25zXCI+XG5cdCAgICA8L1NlbGVjdFNlYXJjaD5cblx0PC9kaXY+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPCEtLSBBY3Rpb24gLS0+XG4gICAgICA8ZGl2IGNsYXNzPVwicm93IGZvcm0tZ3JvdXAgbWItM1wiPlxuXHQ8ZGl2IGNsYXNzPVwiY29sIGNvbC1tZC0xMlwiPlxuICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImZvcm0tbGFiZWxcIj57e19pMThuKFwibmVkZ2UucGFnZV9ydWxlc19jb25maWcuYWN0aW9uXCIpfX08L2xhYmVsPlxuXHQgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cInNlbGVjdGVkX2FjdGlvblwiXG5cdFx0XHQgIDpvcHRpb25zPVwiYWN0aW9uc1wiPlxuXHQgICAgPC9TZWxlY3RTZWFyY2g+XG5cdDwvZGl2PlxuICAgICAgPC9kaXY+XG5cbiAgICA8L2Rpdj5cbiAgPC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgOmRpc2FibGVkPVwiIWlzX3ZhbGlkX3NvdXJjZSB8fCAhaXNfdmFsaWRfZGVzdFwiIEBjbGljaz1cImFwcGx5XCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj57e2J1dHRvbl90ZXh0fX08L2J1dHRvbj5cbiAgPC90ZW1wbGF0ZT5cbjwvbW9kYWw+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIGNvbXB1dGVkLCB3YXRjaCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IG50b3BuZ191dGlsaXR5IH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMuanNcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgbW9kYWwgfSBmcm9tIFwiLi9tb2RhbC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0U2VhcmNoIH0gZnJvbSBcIi4vc2VsZWN0LXNlYXJjaC52dWVcIjtcbmltcG9ydCByZWdleFZhbGlkYXRpb24gZnJvbSBcIi4uL3V0aWxpdGllcy9yZWdleC12YWxpZGF0aW9uLmpzXCI7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbmNvbnN0IG1vZGFsX2lkID0gcmVmKG51bGwpO1xuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFsnZWRpdCcsICdhZGQnXSk7XG5cbmNvbnN0IHNob3dlZCA9ICgpID0+IHt9O1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbn0pO1xuXG5jb25zdCB0aXRsZSA9IHJlZihcIlwiKTtcblxuY29uc3QgdHlwZV9hcnJheSA9IFtcbiAgICB7IGxhYmVsOiBfaTE4bihcIm5lZGdlLnBhZ2VfcnVsZXNfY29uZmlnLm1vZGFsX3J1bGVfY29uZmlnLmlwXCIpLCB2YWx1ZTogXCJpcFwiLCBkZWZhdWx0OiB0cnVlIH0sXG4gICAgeyBsYWJlbDogX2kxOG4oXCJuZWRnZS5wYWdlX3J1bGVzX2NvbmZpZy5tb2RhbF9ydWxlX2NvbmZpZy5jaWRyXCIpLCB2YWx1ZTogXCJjaWRyXCIgfSxcbiAgICB7IGxhYmVsOiBfaTE4bihcImludGVyZmFjZVwiKSwgdmFsdWU6IFwiaW50ZXJmYWNlXCIgfSxcbl07XG5cbmxldCBkZWZhdWx0X2RpcmVjdGlvbl92YWx1ZSA9IFwic291cmNlX3RvX2Rlc3RcIjtcbmNvbnN0IGRpcmVjdGlvbnMgPSBbXG4gICAgeyBsYWJlbDogX2kxOG4oXCJuZWRnZS5wYWdlX3J1bGVzX2NvbmZpZy5iaWRpcmVjdGlvbmFsXCIpLCB2YWx1ZTogXCJiaWRpcmVjdGlvbmFsXCIsIGJpZGlyZWN0aW9uYWw6IHRydWUsIH0sXG4gICAgeyBsYWJlbDogX2kxOG4oXCJuZWRnZS5wYWdlX3J1bGVzX2NvbmZpZy5zb3VyY2VfdG9fZGVzdFwiKSwgdmFsdWU6IFwic291cmNlX3RvX2Rlc3RcIiwgYmlkaXJlY3Rpb25hbDogZmFsc2UsIH0sXG5dO1xuY29uc3Qgc2VsZWN0ZWRfZGlyZWN0aW9uID0gcmVmKHt9KTtcblxubGV0IGRlZmF1bHRfYWN0aW9uX3ZhbHVlID0gXCJhY2NlcHRcIjtcbmNvbnN0IGFjdGlvbnMgPSBbXG4gICAgeyBsYWJlbDogX2kxOG4oXCJuZWRnZS5wYWdlX3J1bGVzX2NvbmZpZy5hY2NlcHRcIiksIHZhbHVlOiBcImFjY2VwdFwiIH0sXG4gICAgeyBsYWJlbDogX2kxOG4oXCJuZWRnZS5wYWdlX3J1bGVzX2NvbmZpZy5kZW55XCIpLCB2YWx1ZTogXCJkZW55XCIgfSxcbl07XG5jb25zdCBzZWxlY3RlZF9hY3Rpb24gPSByZWYoe30pO1xuXG5jb25zdCBydWxlX2lkID0gcmVmKDApO1xuY29uc3QgbmV3X3J1bGVfaWQgPSByZWYoMCk7XG5cbmNvbnN0IHNlbGVjdGVkX3NvdXJjZV90eXBlID0gcmVmKHt9KTtcbmNvbnN0IHNvdXJjZV9yZWdleCA9IHJlZihcIlwiKTtcbmNvbnN0IHNvdXJjZSA9IHJlZihcIlwiKTtcblxuY29uc3Qgc2VsZWN0ZWRfZGVzdF90eXBlID0gcmVmKHt9KTtcbmNvbnN0IGRlc3RfcmVnZXggPSByZWYoXCJcIik7XG5jb25zdCBkZXN0ID0gcmVmKFwiXCIpO1xuXG5jb25zdCBpbnRlcmZhY2VfbGlzdF91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L25lZGdlL2ludGVyZmFjZXMubHVhYDtcbmxldCBpbnRlcmZhY2VfbGlzdDtcbmNvbnN0IGludGVyZmFjZV9hcnJheSA9IHJlZihbXSk7XG5cbmNvbnN0IHNlbGVjdGVkX3NvdXJjZV9pbnRlcmZhY2UgPSByZWYoe30pO1xuY29uc3Qgc2VsZWN0ZWRfZGVzdF9pbnRlcmZhY2UgPSByZWYoe30pO1xuXG5jb25zdCBidXR0b25fdGV4dCA9IHJlZihcIlwiKTtcblxuY29uc3QgaXNfdmFsaWRfc291cmNlID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIHJldHVybiBpc192YWxpZChzZWxlY3RlZF9zb3VyY2VfdHlwZS52YWx1ZSwgc291cmNlLnZhbHVlLCBzb3VyY2VfcmVnZXgudmFsdWUpO1xufSk7XG5cbmNvbnN0IGlzX3ZhbGlkX2Rlc3QgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgcmV0dXJuIGlzX3ZhbGlkKHNlbGVjdGVkX2Rlc3RfdHlwZS52YWx1ZSwgZGVzdC52YWx1ZSwgZGVzdF9yZWdleC52YWx1ZSk7XG59KTtcblxuY29uc3Qgc2hvdyA9IChyb3csIGRlZmF1bHRfYWN0aW9uKSA9PiB7XG4gICAgaW5pdChyb3csIGRlZmF1bHRfYWN0aW9uKTtcbiAgICBtb2RhbF9pZC52YWx1ZS5zaG93KCk7XG59O1xuXG5jb25zdCBpc19vcGVuX2luX2FkZCA9IHJlZih0cnVlKTtcblxuZnVuY3Rpb24gaW5pdChyb3csIGRlZmF1bHRfYWN0aW9uKSB7XG4gICAgaXNfb3Blbl9pbl9hZGQudmFsdWUgPSByb3cgPT0gbnVsbDtcbiAgICBpZiAoZGVmYXVsdF9hY3Rpb24gIT0gbnVsbCkge1xuXHRkZWZhdWx0X2FjdGlvbl92YWx1ZSA9IGRlZmF1bHRfYWN0aW9uLnZhbHVlO1xuICAgIH1cbiAgICAvLyBjaGVjayBpZiB3ZSBuZWVkIG9wZW4gaW4gZWRpdFxuICAgIGlmIChpc19vcGVuX2luX2FkZC52YWx1ZSA9PSBmYWxzZSkge1xuXHR0aXRsZS52YWx1ZSA9IF9pMThuKFwibmVkZ2UucGFnZV9ydWxlc19jb25maWcubW9kYWxfcnVsZV9jb25maWcudGl0bGVfZWRpdFwiKTtcblx0YnV0dG9uX3RleHQudmFsdWUgPSBfaTE4bihcImVkaXRcIik7XG5cdHNlbGVjdGVkX3NvdXJjZV90eXBlLnZhbHVlID0gdHlwZV9hcnJheS5maW5kKChzKSA9PiBzLnZhbHVlID09IHJvdy5zb3VyY2UudHlwZSk7XG5cdHNlbGVjdGVkX2Rlc3RfdHlwZS52YWx1ZSA9IHR5cGVfYXJyYXkuZmluZCgocykgPT4gcy52YWx1ZSA9PSByb3cuZGVzdGluYXRpb24udHlwZSk7XG5cdHNlbGVjdGVkX2RpcmVjdGlvbi52YWx1ZSA9IGRpcmVjdGlvbnMuZmluZCgoZCkgPT4gZC5iaWRpcmVjdGlvbmFsID09IHJvdy5iaWRpcmVjdGlvbmFsKTtcblx0c2VsZWN0ZWRfYWN0aW9uLnZhbHVlID0gYWN0aW9ucy5maW5kKChhKSA9PiBhLnZhbHVlID09IHJvdy5hY3Rpb24pO1xuXHRydWxlX2lkLnZhbHVlID0gcm93LnJ1bGVfaWQ7XG4gICAgICAgIG5ld19ydWxlX2lkLnZhbHVlID0gcm93LnJ1bGVfaWQ7XG4gICAgfSBlbHNlIHtcblx0dGl0bGUudmFsdWUgPSBfaTE4bihcIm5lZGdlLnBhZ2VfcnVsZXNfY29uZmlnLm1vZGFsX3J1bGVfY29uZmlnLnRpdGxlX2FkZFwiKTtcblx0YnV0dG9uX3RleHQudmFsdWUgPSBfaTE4bihcImFkZFwiKTtcblx0bGV0IGRlZmF1bHRfdHlwZSA9IHR5cGVfYXJyYXkuZmluZCgocykgPT4gcy5kZWZhdWx0ID09IHRydWUpO1xuXHRzZWxlY3RlZF9zb3VyY2VfdHlwZS52YWx1ZSA9IGRlZmF1bHRfdHlwZTtcblx0c2VsZWN0ZWRfZGVzdF90eXBlLnZhbHVlID0gZGVmYXVsdF90eXBlO1xuXHRzZWxlY3RlZF9kaXJlY3Rpb24udmFsdWUgPSBkaXJlY3Rpb25zLmZpbmQoKGQpID0+IGQudmFsdWUgPT0gZGVmYXVsdF9kaXJlY3Rpb25fdmFsdWUpO1xuXHRzZWxlY3RlZF9hY3Rpb24udmFsdWUgPSBhY3Rpb25zLmZpbmQoKGEpID0+IGEudmFsdWUgIT0gZGVmYXVsdF9hY3Rpb25fdmFsdWUpO1xuICAgIH1cbiAgICBjaGFuZ2Vfc291cmNlX3R5cGUocm93KTtcbiAgICBjaGFuZ2VfZGVzdF90eXBlKHJvdyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNoYW5nZV9zb3VyY2VfdHlwZShyb3cpIHtcbiAgICBsZXQgdmFsdWUgPSBudWxsO1xuICAgIGlmIChyb3cgIT0gbnVsbCkge1xuXHR2YWx1ZSA9IHJvdy5zb3VyY2UudmFsdWU7XG4gICAgfVxuICAgIGlmIChzZWxlY3RlZF9zb3VyY2VfdHlwZS52YWx1ZS52YWx1ZSA9PSBcImludGVyZmFjZVwiKSB7XG5cdGF3YWl0IHNldF9pbnRlcmZhY2VfYXJyYXkoKTtcblx0aWYgKHZhbHVlICE9IG51bGwpIHtcblx0ICAgIHNlbGVjdGVkX3NvdXJjZV9pbnRlcmZhY2UudmFsdWUgPSBpbnRlcmZhY2VfYXJyYXkudmFsdWUuZmluZCgoaSkgPT4gaS52YWx1ZSA9PSB2YWx1ZSk7XG5cdH0gZWxzZSB7XG5cdCAgICBzZWxlY3RlZF9zb3VyY2VfaW50ZXJmYWNlLnZhbHVlID0gaW50ZXJmYWNlX2FycmF5LnZhbHVlWzBdO1xuXHR9XG4gICAgfSBlbHNlIHtcblx0aWYgKHJvdyAhPSBudWxsKSB7XG5cdCAgICBzb3VyY2UudmFsdWUgPSByb3cuc291cmNlLnZhbHVlO1xuXHR9IGVsc2Uge1xuXHQgICAgc291cmNlLnZhbHVlID0gXCJcIjtcblx0fVxuXHRzZXRfcmVnZXgoc291cmNlX3JlZ2V4LCBzZWxlY3RlZF9zb3VyY2VfdHlwZS52YWx1ZS52YWx1ZSk7XG4gICAgfSAgICBcbn1cblxuYXN5bmMgZnVuY3Rpb24gY2hhbmdlX2Rlc3RfdHlwZShyb3cpIHtcbiAgICBsZXQgdmFsdWUgPSBudWxsO1xuICAgIGlmIChyb3cgIT0gbnVsbCkge1xuXHR2YWx1ZSA9IHJvdy5kZXN0aW5hdGlvbi52YWx1ZTtcbiAgICB9XG4gICAgaWYgKHNlbGVjdGVkX2Rlc3RfdHlwZS52YWx1ZS52YWx1ZSA9PSBcImludGVyZmFjZVwiKSB7XG5cdGF3YWl0IHNldF9pbnRlcmZhY2VfYXJyYXkoKTtcblx0aWYgKHZhbHVlICE9IG51bGwpIHtcblx0ICAgIHNlbGVjdGVkX2Rlc3RfaW50ZXJmYWNlLnZhbHVlID0gaW50ZXJmYWNlX2FycmF5LnZhbHVlLmZpbmQoKGkpID0+IGkudmFsdWUgPT0gdmFsdWUpO1xuXHR9IGVsc2Uge1xuXHQgICAgc2VsZWN0ZWRfZGVzdF9pbnRlcmZhY2UudmFsdWUgPSBpbnRlcmZhY2VfYXJyYXkudmFsdWVbMF07XG5cdH1cbiAgICB9IGVsc2Uge1xuXHRpZiAocm93ICE9IG51bGwpIHtcblx0ICAgIGRlc3QudmFsdWUgPSByb3cuZGVzdGluYXRpb24udmFsdWU7XG5cdH0gZWxzZSB7XG5cdCAgICBkZXN0LnZhbHVlID0gXCJcIjtcblx0fVxuXHRzZXRfcmVnZXgoZGVzdF9yZWdleCwgc2VsZWN0ZWRfZGVzdF90eXBlLnZhbHVlLnZhbHVlKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGlzX3ZhbGlkKHNlbGVjdGVkX3R5cGUsIHRleHQsIHJnX3RleHQpIHtcbiAgICBpZiAoc2VsZWN0ZWRfdHlwZS52YWx1ZSA9PSBcImludGVyZmFjZVwiKSB7XG5cdHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBsZXQgcmVnZXggPSBuZXcgUmVnRXhwKHJnX3RleHQpO1xuICAgIHJldHVybiByZWdleC50ZXN0KHRleHQpO1xufVxuXG5sZXQgaXNfc2V0X2ludGVyZmFjZV9hcnJheSA9IGZhbHNlO1xuYXN5bmMgZnVuY3Rpb24gc2V0X2ludGVyZmFjZV9hcnJheSgpIHtcbiAgICBpZiAoaXNfc2V0X2ludGVyZmFjZV9hcnJheSA9PSB0cnVlKSB7IHJldHVybjsgfVxuXHRpZiAoaW50ZXJmYWNlX2xpc3QgPT0gbnVsbCkge1xuXHQgICAgaW50ZXJmYWNlX2xpc3QgPSBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QoaW50ZXJmYWNlX2xpc3RfdXJsKTtcblx0fVxuXHRsZXQgcmVzX2ludGVyZmFjZV9saXN0ID0gYXdhaXQgaW50ZXJmYWNlX2xpc3Q7XG5cdGludGVyZmFjZV9hcnJheS52YWx1ZSA9IHJlc19pbnRlcmZhY2VfbGlzdC5maWx0ZXIoKGkpID0+IGkucm9sZSA9PSBcImxhblwiKS5tYXAoKGkpID0+IHtcblx0ICAgIHJldHVybiB7XG5cdFx0bGFiZWw6IGkubGFiZWwsXG5cdFx0dmFsdWU6IGkuaWZuYW1lLFxuXHQgICAgfTtcblx0fSk7XG4gICAgaXNfc2V0X2ludGVyZmFjZV9hcnJheSA9IHRydWU7XG59XG5cbmZ1bmN0aW9uIHNldF9yZWdleChyZywgdHlwZSkge1xuICAgIHJnLnZhbHVlID0gcmVnZXhWYWxpZGF0aW9uLmdldF9kYXRhX3BhdHRlcm4odHlwZSk7XG59XG5cbmNvbnN0IGFwcGx5ID0gKCkgPT4ge1xuICAgIGxldCBzcmNfdHlwZSA9IHNlbGVjdGVkX3NvdXJjZV90eXBlLnZhbHVlLnZhbHVlOyAgICBcbiAgICBsZXQgc3JjX3ZhbHVlID0gc291cmNlLnZhbHVlO1xuICAgIGlmIChzcmNfdHlwZSA9PSBcImludGVyZmFjZVwiKSB7XG5cdHNyY192YWx1ZSA9IHNlbGVjdGVkX3NvdXJjZV9pbnRlcmZhY2UudmFsdWUudmFsdWU7XG4gICAgfVxuICAgIGxldCBkc3RfdHlwZSA9IHNlbGVjdGVkX2Rlc3RfdHlwZS52YWx1ZS52YWx1ZTsgICAgXG4gICAgbGV0IGRzdF92YWx1ZSA9IGRlc3QudmFsdWU7XG4gICAgaWYgKGRzdF90eXBlID09IFwiaW50ZXJmYWNlXCIpIHtcblx0ZHN0X3ZhbHVlID0gc2VsZWN0ZWRfZGVzdF9pbnRlcmZhY2UudmFsdWUudmFsdWU7XG4gICAgfVxuICAgIGxldCBwb2xpY3kgPSBzZWxlY3RlZF9hY3Rpb24udmFsdWUudmFsdWU7XG4gICAgbGV0IGJpZGlyZWN0aW9uYWwgPSBzZWxlY3RlZF9kaXJlY3Rpb24udmFsdWUudmFsdWUgPT0gXCJiaWRpcmVjdGlvbmFsXCI7XG4gICAgbGV0IG9iaiA9IHtcblx0c3JjX3R5cGUsXG5cdHNyY192YWx1ZSxcblx0ZHN0X3R5cGUsXG5cdGRzdF92YWx1ZSxcblx0cG9saWN5LFxuXHRiaWRpcmVjdGlvbmFsLFxuICAgIH07XG4gICAgbGV0IGV2ZW50ID0gXCJhZGRcIjtcbiAgICBpZiAoaXNfb3Blbl9pbl9hZGQudmFsdWUgPT0gZmFsc2UpIHtcblx0b2JqLnJ1bGVfaWQgPSBydWxlX2lkLnZhbHVlO1xuXHRvYmoubmV3X3J1bGVfaWQgPSBuZXdfcnVsZV9pZC52YWx1ZTtcblx0ZXZlbnQgPSBcImVkaXRcIjtcbiAgICB9XG4gICAgXG4gICAgZW1pdChldmVudCwgb2JqKTtcbiAgICBjbG9zZSgpO1xufTtcblxuY29uc3QgY2xvc2UgPSAoKSA9PiB7XG4gICAgbW9kYWxfaWQudmFsdWUuY2xvc2UoKTtcbn07XG5cblxuZGVmaW5lRXhwb3NlKHsgc2hvdywgY2xvc2UgfSk7XG5cbm9uTW91bnRlZCgoKSA9PiB7XG59KTtcblxuPC9zY3JpcHQ+XG5cbjxzdHlsZSBzY29wZWQ+XG5pbnB1dDppbnZhbGlkIHtcbiAgYm9yZGVyLWNvbG9yOiAjZmYwMDAwO1xufVxuPC9zdHlsZT5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG48bW9kYWwgQHNob3dlZD1cInNob3dlZCgpXCIgcmVmPVwibW9kYWxfaWRcIj5cbiAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT57e3RpdGxlfX08L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAgPGRpdiBjbGFzcz1cImNvbnRhaW5lci1mbHVpZFwiPlxuXG4gICAgICA8IS0tIERlZmF1bHQgUG9saWN5IC0tPlxuICAgICAgPGRpdiBjbGFzcz1cInJvdyBmb3JtLWdyb3VwIG1iLTNcIj5cblx0PGRpdiBjbGFzcz1cImNvbCBjb2wtbWQtMTJcIj5cbiAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJmb3JtLWxhYmVsXCI+e3tfaTE4bihcIm5lZGdlLnBhZ2VfcnVsZXNfY29uZmlnLmRlZmF1bHQgcG9saWN5XCIpfX08L2xhYmVsPlxuXHQgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cInNlbGVjdGVkX2FjdGlvblwiXG5cdFx0XHQgIDpvcHRpb25zPVwiYWN0aW9uc1wiPlxuXHQgICAgPC9TZWxlY3RTZWFyY2g+XG5cdDwvZGl2PlxuICAgICAgPC9kaXY+XG5cbiAgICA8L2Rpdj5cbiAgPC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiYXBwbHlcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPnt7X2kxOG4oJ2FwcGx5Jyl9fTwvYnV0dG9uPlxuICA8L3RlbXBsYXRlPlxuPC9tb2RhbD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgY29tcHV0ZWQsIHdhdGNoIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX3V0aWxpdHkgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcy5qc1wiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBtb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiO1xuXG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoWydhcHBseSddKTtcblxuY29uc3QgbW9kYWxfaWQgPSByZWYobnVsbCk7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbmNvbnN0IHRpdGxlID0gX2kxOG4oXCJuZWRnZS5wYWdlX3J1bGVzX2NvbmZpZy5tb2RhbF9jaGFuZ2VfZGVmYXVsdF9wb2xpY3kudGl0bGVcIik7XG5cbmxldCBkZWZhdWx0X2FjdGlvbl92YWx1ZSA9IFwiYWNjZXB0XCI7XG5jb25zdCBhY3Rpb25zID0gW1xuICAgIHsgbGFiZWw6IF9pMThuKFwibmVkZ2UucGFnZV9ydWxlc19jb25maWcuYWNjZXB0XCIpLCB2YWx1ZTogXCJhY2NlcHRcIiB9LFxuICAgIHsgbGFiZWw6IF9pMThuKFwibmVkZ2UucGFnZV9ydWxlc19jb25maWcuZGVueVwiKSwgdmFsdWU6IFwiZGVueVwiIH0sXG5dO1xuY29uc3Qgc2VsZWN0ZWRfYWN0aW9uID0gcmVmKHt9KTtcblxuY29uc3Qgc2hvd2VkID0gKCkgPT4ge1xufTtcblxuY29uc3Qgc2hvdyA9IChwb2xpY3kpID0+IHtcbiAgICBzZWxlY3RlZF9hY3Rpb24udmFsdWUgPSBhY3Rpb25zLmZpbmQoKGEpID0+IGEudmFsdWUgPT0gcG9saWN5LnZhbHVlKTtcbiAgICBtb2RhbF9pZC52YWx1ZS5zaG93KCk7XG59O1xuXG5jb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgICBtb2RhbF9pZC52YWx1ZS5jbG9zZSgpO1xufTtcblxuZnVuY3Rpb24gYXBwbHkoKSB7XG4gICAgZW1pdCgnYXBwbHknLCBzZWxlY3RlZF9hY3Rpb24udmFsdWUudmFsdWUpO1xuICAgIGNsb3NlKCk7XG59XG5cbmRlZmluZUV4cG9zZSh7IHNob3csIGNsb3NlIH0pO1xuXG48L3NjcmlwdD5cbiIsIjwhLS1cbiAgKEMpIDIwMTMtMjIgLSBudG9wLm9yZ1xuICAtLT5cblxuPHRlbXBsYXRlPlxuPGRpdiBjbGFzcz1cIm1iLTJcIj5cbiAgXG4gIDxoMj57eyBfaTE4bihcIm5lZGdlLnJ1bGVzX2NvbmZpZ190aXRsZVwiKSB9fTwvaDI+XG4gIDxiciAvPlxuICA8aDUgY2xhc3M9XCJkLWlubGluZS1ibG9ja1wiPnt7X2kxOG4oXCJuZWRnZS5wYWdlX3J1bGVzX2NvbmZpZy5kZWZhdWx0IHBvbGljeVwiKX19XG4gICAgPHNwYW4gdi1pZj1cImRlZmF1bHRfcG9saWN5Py52YWx1ZSA9PSAnYWNjZXB0J1wiIHN0eWxlPVwiY29sb3I6Z3JlZW47XCI+XG4gICAgICB7eyBkZWZhdWx0X3BvbGljeT8ubGFiZWwgfX1cbiAgICA8L3NwYW4+XG4gICAgPHNwYW4gdi1pZj1cImRlZmF1bHRfcG9saWN5Py52YWx1ZSA9PSAnZGVueSdcIiBzdHlsZT1cImNvbG9yOnJlZDtcIj5cbiAgICAgIHt7IGRlZmF1bHRfcG9saWN5Py5sYWJlbCB9fVxuICAgIDwvc3Bhbj5cblxuICAgIDxzbWFsbD48YSBocmVmPVwiamF2YXNjcmlwdDp2b2lkKDApXCIgc3R5bGU9XCJtYXJnaW4tbGVmdDogMC41cmVtO1wiIEBjbGljaz1cInNob3dfbW9kYWxfY2hhbmdlX3BvbGljeVwiPjxpIGNsYXNzPVwiZmFzIGZhLWNvZ1wiPjwvaT48L2E+PC9zbWFsbD5cbiAgPC9oNT5cbjwvZGl2PlxuXG48ZGl2IGlkPVwiYWdncmVnYXRlZF9saXZlX2Zsb3dzXCI+XG4gIDxEYXRhdGFibGUgcmVmPVwidGFibGVfcnVsZXNcIlxuXHQgICAgIDp0YWJsZV9idXR0b25zPVwidGFibGVfY29uZmlnLnRhYmxlX2J1dHRvbnNcIlxuXHQgICAgIDpjb2x1bW5zX2NvbmZpZz1cInRhYmxlX2NvbmZpZy5jb2x1bW5zX2NvbmZpZ1wiXG5cdCAgICAgOmRhdGFfdXJsPVwidGFibGVfY29uZmlnLmRhdGFfdXJsXCJcblx0ICAgICA6ZmlsdGVyX2J1dHRvbnM9XCJ0YWJsZV9jb25maWcudGFibGVfZmlsdGVyc1wiXG5cdCAgICAgOmVuYWJsZV9zZWFyY2g9XCJ0YWJsZV9jb25maWcuZW5hYmxlX3NlYXJjaFwiXG5cdCAgICAgOnRhYmxlX2NvbmZpZz1cInRhYmxlX2NvbmZpZy50YWJsZV9jb25maWdcIj5cbiAgPC9EYXRhdGFibGU+XG48L2Rpdj5cbjxNb2RhbEFkZFJ1bGVDb25maWcgcmVmPVwibW9kYWxfYWRkX3J1bGVfY29uZmlnXCIgQGFkZD1cImFkZF9ydWxlXCIgQGVkaXQ9XCJlZGl0X3J1bGVcIj48L01vZGFsQWRkUnVsZUNvbmZpZz5cbjxNb2RhbENoYW5nZURlZmF1bHRQb2xpY3kgcmVmPVwibW9kYWxfY2hhbmdlX2RlZmF1bHRfcG9saWN5XCIgQGFwcGx5PVwic2V0X2RlZmF1bHRfcG9saWN5XCIgPjwvTW9kYWxDaGFuZ2VEZWZhdWx0UG9saWN5PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBvbkJlZm9yZU1vdW50IH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IE50b3BVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL250b3AtdXRpbHNcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgRGF0YXRhYmxlIH0gZnJvbSBcIi4vZGF0YXRhYmxlLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbEFkZFJ1bGVDb25maWcgfSBmcm9tIFwiLi9tb2RhbC1uZWRnZS1hZGQtcnVsZS1jb25maWcudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsQ2hhbmdlRGVmYXVsdFBvbGljeSB9IGZyb20gXCIuL21vZGFsLW5lZGdlLWNoYW5nZS1kZWZhdWx0LXBvbGljeS52dWVcIjtcbmltcG9ydCB7IG50b3BuZ191dGlsaXR5LCBudG9wbmdfdXJsX21hbmFnZXIsIG50b3BuZ19zdGF0dXNfbWFuYWdlciB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzLmpzXCI7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbmNvbnN0IHRpbWVvdXRfZGVsZXRlID0gMSAqIDUwMDtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gICAgdXJsOiBTdHJpbmcsXG4gICAgaWZpZDogTnVtYmVyLFxuICAgIGNzcmY6IFN0cmluZyxcbiAgICBjb2x1bW5zX2NvbmZpZzogQXJyYXlcbn0pO1xuXG5jb25zdCB0YWJsZV9jb25maWcgPSByZWYoe30pO1xuY29uc3QgdGFibGVfcnVsZXMgPSByZWYobnVsbCk7XG5jb25zdCBtb2RhbF9hZGRfcnVsZV9jb25maWcgPSByZWYobnVsbCk7XG5jb25zdCBtb2RhbF9jaGFuZ2VfZGVmYXVsdF9wb2xpY3kgPSByZWYobnVsbCk7XG5jb25zdCBkZWZhdWx0X3BvbGljeSA9IHJlZih7fSk7XG5cbm9uQmVmb3JlTW91bnQoYXN5bmMgKCkgPT4ge1xuICAgIHNldF9kYXRhdGFibGVfY29uZmlnKCk7XG4gICAgbG9hZF9kZWZhdWx0X3BvbGljeSgpO1xufSk7XG5cbmZ1bmN0aW9uIGVkaXRfcnVsZShydWxlKSB7ICAgIFxuICAgIGNvbnN0IGVkaXRfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2VkaXQvbmVkZ2UvcG9saWN5L3J1bGUubHVhYDtcbiAgICBzZXRfcnVsZShydWxlLCBlZGl0X3VybCk7XG59XG5cbmZ1bmN0aW9uIGFkZF9ydWxlKHJ1bGUpIHtcbiAgICBjb25zdCBhZGRfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2FkZC9uZWRnZS9wb2xpY3kvcnVsZS5sdWFgO1xuICAgIHNldF9ydWxlKHJ1bGUsIGFkZF91cmwpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBsb2FkX2RlZmF1bHRfcG9saWN5KHBvbGljeSkge1xuICAgIGlmIChwb2xpY3kgPT0gbnVsbCkge1xuXHRjb25zdCBnZXRfcG9saWN5X3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvbmVkZ2UvcG9saWN5L2RlZmF1bHQubHVhYDtcblx0bGV0IHBvbGljeV9yZXMgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QoZ2V0X3BvbGljeV91cmwpO1xuXHRwb2xpY3kgPSBwb2xpY3lfcmVzLmRlZmF1bHRfcG9saWN5O1xuICAgIH1cbiAgICBpZiAocG9saWN5ID09IFwiYWNjZXB0XCIpIHtcblx0ZGVmYXVsdF9wb2xpY3kudmFsdWUgPSB7XG5cdCAgICB2YWx1ZTogcG9saWN5LFxuXHQgICAgbGFiZWw6IF9pMThuKFwibmVkZ2UucGFnZV9ydWxlc19jb25maWcuYWNjZXB0XCIpLFxuXHR9O1xuICAgIH0gZWxzZSB7XG5cdGRlZmF1bHRfcG9saWN5LnZhbHVlID0ge1xuXHQgICAgdmFsdWU6IHBvbGljeSxcblx0ICAgIGxhYmVsOiBfaTE4bihcIm5lZGdlLnBhZ2VfcnVsZXNfY29uZmlnLmRlbnlcIiksXG5cdH07ICAgIFxuICAgIH1cbn1cblxuYXN5bmMgZnVuY3Rpb24gc2V0X2RlZmF1bHRfcG9saWN5KHBvbGljeSkge1xuICAgIGNvbnN0IHNldF9wb2xpY3lfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL3NldC9uZWRnZS9wb2xpY3kvZGVmYXVsdC5sdWFgO1xuICAgIGxldCBoZWFkZXJzID0ge1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgfTtcbiAgICBsZXQgYm9keSA9IEpTT04uc3RyaW5naWZ5KHsgZGVmYXVsdF9wb2xpY3k6IHBvbGljeSwgY3NyZjogcHJvcHMuY3NyZn0pO1xuICAgIGxldCByZXMgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3Qoc2V0X3BvbGljeV91cmwsIHsgbWV0aG9kOiBcInBvc3RcIiwgaGVhZGVycywgYm9keX0pO1xuICAgIGxvYWRfZGVmYXVsdF9wb2xpY3kocG9saWN5KTtcbiAgICByZWZyZXNoX3RhYmxlKCk7ICAgIFxufVxuXG5mdW5jdGlvbiBzZXRfcnVsZShydWxlLCB1cmwpIHtcbiAgICBsZXQgaGVhZGVycyA9IHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgIH07XG4gICAgbGV0IGJvZHkgPSBKU09OLnN0cmluZ2lmeSh7IC4uLnJ1bGUsIGNzcmY6IHByb3BzLmNzcmZ9KTtcbiAgICBcbiAgICBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsLCB7IG1ldGhvZDogXCJwb3N0XCIsIGhlYWRlcnMsIGJvZHl9KTtcbiAgICByZWZyZXNoX3RhYmxlKCk7ICAgIFxufVxuXG5mdW5jdGlvbiBzaG93X21vZGFsX2NoYW5nZV9wb2xpY3koKSB7ICAgIFxuICAgIG1vZGFsX2NoYW5nZV9kZWZhdWx0X3BvbGljeS52YWx1ZS5zaG93KGRlZmF1bHRfcG9saWN5LnZhbHVlKTtcbn1cblxuZnVuY3Rpb24gc2V0X2RhdGF0YWJsZV9jb25maWcoKSB7XG4gICAgY29uc3QgZGF0YXRhYmxlQnV0dG9uID0gW107XG4gICAgXG4gICAgbGV0IHBhcmFtcyA9IHsgXG5cdGlmaWQ6IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiaWZpZFwiKSB8fCBwcm9wcy5pZmlkLFx0XG4gICAgfTtcbiAgICBsZXQgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyhwYXJhbXMpO1xuICAgIFxuICAgIGRhdGF0YWJsZUJ1dHRvbi5wdXNoKHtcblx0dGV4dDogJzxpIGNsYXNzPVwiZmFzIGZhLXN5bmNcIj48L2k+Jyxcblx0Y2xhc3NOYW1lOiAnYnRuLWxpbmsnLFxuXHRhY3Rpb246IGZ1bmN0aW9uIChlLCBkdCwgbm9kZSwgY29uZmlnKSB7XG5cdCAgICByZWZyZXNoX3RhYmxlKCk7XG4gICAgICAgICAgICAvLyB0YWJsZV9ydWxlcy52YWx1ZS5yZWxvYWQoKTtcblx0fVxuICAgIH0sIHtcblx0dGV4dDogJzxpIGNsYXNzPVwiZmFzIGZhLXBsdXNcIj48L2k+Jyxcblx0Y2xhc3NOYW1lOiAnYnRuLWxpbmsnLFxuXHRhY3Rpb246IGZ1bmN0aW9uICgpIHtcblx0ICAgIG1vZGFsX2FkZF9ydWxlX2NvbmZpZy52YWx1ZS5zaG93KG51bGwsIGRlZmF1bHRfcG9saWN5LnZhbHVlKTtcblx0fVxuICAgIH0pO1xuICAgIFxuICAgIGxldCBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnID0ge1xuXHR0YWJsZV9idXR0b25zOiBkYXRhdGFibGVCdXR0b24sXG5cdGRhdGFfdXJsOiBgJHtwcm9wcy51cmx9PyR7dXJsX3BhcmFtc31gLFxuXHRlbmFibGVfc2VhcmNoOiBmYWxzZSxcbiAgICB9O1xuICAgIFxuICAgIGxldCBjb2x1bW5zID0gW1xuXHR7IFxuXHQgICAgY29sdW1uTmFtZTogX2kxOG4oXCJuZWRnZS5wYWdlX3J1bGVzX2NvbmZpZy5ydWxlX2lkXCIpLCB0YXJnZXRzOiAwLCBuYW1lOiAncnVsZV9pZCcsIGRhdGE6ICdydWxlX2lkJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAgdGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDFcblx0fSwgeyBcblx0ICAgIGNvbHVtbk5hbWU6IF9pMThuKFwibmVkZ2UucGFnZV9ydWxlc19jb25maWcuc291cmNlXCIpLCB0YXJnZXRzOiAwLCBuYW1lOiAnc291cmNlJywgZGF0YTogJ3NvdXJjZScsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwIHRleHQtY2VudGVyJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IGZ1bmN0aW9uKHZhbHVlLCB0eXBlLCByb3dEYXRhKSB7XG5cdFx0aWYgKHZhbHVlLmxhYmVsICE9IG51bGwgJiYgdmFsdWUubGFiZWwgIT0gXCJcIikge1xuXHRcdCAgICByZXR1cm4gdmFsdWUubGFiZWw7XG5cdFx0fSBcblx0XHRyZXR1cm4gdmFsdWUudmFsdWU7XG5cdCAgICB9XG5cdH0sIHsgXG5cdCAgICBjb2x1bW5OYW1lOiBfaTE4bihcIm5lZGdlLnBhZ2VfcnVsZXNfY29uZmlnLmRlc3RcIiksIHRhcmdldHM6IDAsIG5hbWU6ICdkZXN0JywgZGF0YTogJ2Rlc3RpbmF0aW9uJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAgdGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogZnVuY3Rpb24odmFsdWUsIHR5cGUsIHJvd0RhdGEpIHtcblx0XHRpZiAodmFsdWUubGFiZWwgIT0gbnVsbCAmJiB2YWx1ZS5sYWJlbCAhPSBcIlwiKSB7XG5cdFx0ICAgIHJldHVybiB2YWx1ZS5sYWJlbDtcblx0XHR9IFxuXHRcdHJldHVybiB2YWx1ZS52YWx1ZTtcblx0ICAgIH1cblx0fSwgeyBcblx0ICAgIGNvbHVtbk5hbWU6IF9pMThuKFwibmVkZ2UucGFnZV9ydWxlc19jb25maWcuZGlyZWN0aW9uXCIpLCB0YXJnZXRzOiAwLCBuYW1lOiAnYmlkaXJlY3Rpb25hbCcsIGRhdGE6ICdiaWRpcmVjdGlvbmFsJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAgdGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogZnVuY3Rpb24odmFsdWUsIHR5cGUsIHJvd0RhdGEpIHtcblx0XHRpZiAodmFsdWUgPT0gdHJ1ZSkge1xuXHRcdCAgICByZXR1cm4gX2kxOG4oXCJuZWRnZS5wYWdlX3J1bGVzX2NvbmZpZy5iaWRpcmVjdGlvbmFsXCIpO1xuXHRcdH0gXG5cdFx0cmV0dXJuIF9pMThuKFwibmVkZ2UucGFnZV9ydWxlc19jb25maWcuc291cmNlX3RvX2Rlc3RcIik7XG5cdCAgICB9XG5cdH0sIHsgXG5cdCAgICBjb2x1bW5OYW1lOiBfaTE4bihcIm5lZGdlLnBhZ2VfcnVsZXNfY29uZmlnLmFjdGlvblwiKSwgdGFyZ2V0czogMCwgbmFtZTogJ2FjdGlvbicsIGRhdGE6ICdhY3Rpb24nLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCB0ZXh0LWNlbnRlcicsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiBmdW5jdGlvbih2YWx1ZSwgdHlwZSwgcm93RGF0YSkge1xuXHRcdGxldCBjb2xvciA9IFwicmVkXCI7XG5cdFx0bGV0IG5hbWUgPSBfaTE4bihgbmVkZ2UucGFnZV9ydWxlc19jb25maWcuZGVueWApO1xuXHRcdGlmICh2YWx1ZSA9PSBcImFjY2VwdFwiKSB7XG5cdFx0ICAgIGNvbG9yID0gXCJncmVlblwiO1xuXHRcdCAgICBuYW1lID0gIF9pMThuKGBuZWRnZS5wYWdlX3J1bGVzX2NvbmZpZy5hY2NlcHRgKTtcblx0XHR9XG5cdFx0cmV0dXJuIGA8c3BhbiBzdHlsZT1cImNvbG9yOiR7Y29sb3J9O1wiPiR7bmFtZX08L3NwYW4+YDtcblx0ICAgIH1cblx0fVxuICAgIF07XG4gICAgbGV0IHdyYXBfY29sdW1uc19jb25maWcgPSBjb2x1bW5zLm1hcCgoYykgPT4gYyk7XG4gICAgLy8gbGV0IHdyYXBfY29sdW1uc19jb25maWcgPSBwcm9wcy5jb2x1bW5zX2NvbmZpZy5tYXAoKGMpID0+IGMpO1xuICAgIHdyYXBfY29sdW1uc19jb25maWcucHVzaCh7IGNvbHVtbk5hbWU6IF9pMThuKFwiYWN0aW9uc1wiKSwgd2lkdGg6ICc1JScsIG5hbWU6ICdhY3Rpb25zJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCBvcmRlcmFibGU6IGZhbHNlLCByZXNwb25zaXZlUHJpb3JpdHk6IDAsIHJlbmRlcjogZnVuY3Rpb24gKF8sIHR5cGUsIHJvd0RhdGEpIHsgcmV0dXJuIGFkZF9hY3Rpb25fY29sdW1uKHJvd0RhdGEpIH0gfSk7XG4gICAgXG4gICAgZGVmYXVsdERhdGF0YWJsZUNvbmZpZy5jb2x1bW5zX2NvbmZpZyA9IHdyYXBfY29sdW1uc19jb25maWc7XG4gICAgdGFibGVfY29uZmlnLnZhbHVlID0gZGVmYXVsdERhdGF0YWJsZUNvbmZpZztcbn1cblxuY29uc3QgYWRkX2FjdGlvbl9jb2x1bW4gPSBmdW5jdGlvbiAocm93RGF0YSkge1xuICAgIGxldCBkZWxldGVfaGFuZGxlciA9IHtcblx0aGFuZGxlcklkOiBcImRlbGV0ZV9ob3N0XCIsXHQgIFxuXHRvbkNsaWNrOiAoKSA9PiB7XG5cdCAgICBkZWxldGVfcnVsZShyb3dEYXRhKTtcblx0fSxcbiAgICB9O1xuICAgIFxuICAgIGxldCBlZGl0X2hhbmRsZXIgPSB7XG5cdGhhbmRsZXJJZDogXCJlZGl0X3J1bGVcIixcblx0b25DbGljazogKCkgPT4ge1xuXHQgICAgbW9kYWxfYWRkX3J1bGVfY29uZmlnLnZhbHVlLnNob3cocm93RGF0YSk7XG5cdH0sXG4gICAgfVxuICAgIFxuICAgIHJldHVybiBEYXRhVGFibGVVdGlscy5jcmVhdGVBY3Rpb25CdXR0b25zKFtcblx0eyBjbGFzczogYGJ0bi1zZWNvbmRhcnlgLCBoYW5kbGVyOiBlZGl0X2hhbmRsZXIsIGhhbmRsZXJJZDogXCJlZGl0X3J1bGVcIiwgaWNvbjogJ2ZhLWVkaXQnLCB0aXRsZTogaTE4bignZWRpdCcpIH0sXG5cdHsgY2xhc3M6IGBidG4tZGFuZ2VyYCwgaGFuZGxlcjogZGVsZXRlX2hhbmRsZXIsIGhhbmRsZXJJZDogXCJkZWxldGVfcnVsZVwiLCBpY29uOiAnZmEtdHJhc2gnLCB0aXRsZTogaTE4bignZGVsZXRlJykgfSxcbiAgICBdKTtcbn07XG5cbmFzeW5jIGZ1bmN0aW9uIGRlbGV0ZV9ydWxlKHJ1bGUpIHtcbiAgICBjb25zdCBhZGRfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2RlbGV0ZS9uZWRnZS9wb2xpY3kvcnVsZS5sdWFgO1xuICAgIGxldCBoZWFkZXJzID0ge1xuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgfTtcbiAgICBsZXQgYm9keSA9IEpTT04uc3RyaW5naWZ5KHsgcnVsZV9pZDogcnVsZS5ydWxlX2lkLCBjc3JmOiBwcm9wcy5jc3JmfSk7XG4gICAgXG4gICAgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KGFkZF91cmwsIHsgbWV0aG9kOiBcInBvc3RcIiwgaGVhZGVycywgYm9keX0pO1xuICAgIHJlZnJlc2hfdGFibGUoKTsgICAgXG59XG5cbmZ1bmN0aW9uIHJlZnJlc2hfdGFibGUoKSB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG5cdG50b3BuZ191cmxfbWFuYWdlci5yZWxvYWRfdXJsKCk7XG4gXHQvLyB0YWJsZV9ydWxlcy52YWx1ZS5yZWxvYWQoKTtcbiAgICB9LCB0aW1lb3V0X2RlbGV0ZSk7XG59XG48L3NjcmlwdD5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG4gIDxtb2RhbCBAc2hvd2VkPVwic2hvd2VkKClcIiByZWY9XCJtb2RhbF9pZFwiPlxuICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+e3sgdGl0bGUgfX08L3RlbXBsYXRlPlxuICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6Ym9keT5cbiAgICAgIDxpbnB1dCBjbGFzcz1cImZvcm0tY29udHJvbFwiIHR5cGU9XCJ0ZXh0XCIgdi1tb2RlbD1cImFwcGxpY2F0aW9uX2lkXCIgc3BlbGxjaGVjaz1cImZhbHNlXCIgaGlkZGVuPlxuXG4gICAgICA8dGVtcGxhdGUgdi1pZj1cImlzX2VkaXRfcGFnZSA9PSBmYWxzZVwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cbiAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tNFwiPlxuICAgICAgICAgICAgPGI+e3sgX2kxOG4oXCJhcHBfbmFtZVwiKSB9fTwvYj5cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtOFwiPlxuICAgICAgICAgICAgPGlucHV0IGNsYXNzPVwiZm9ybS1jb250cm9sXCIgdHlwZT1cInRleHRcIiB2LW1vZGVsPVwiYXBwbGljYXRpb25fbmFtZVwiIEBpbnB1dD1cImNoZWNrX3ZhbGlkYXRpb25cIlxuICAgICAgICAgICAgICBzcGVsbGNoZWNrPVwiZmFsc2VcIj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L3RlbXBsYXRlPlxuICAgICAgPHRlbXBsYXRlIHYtZWxzZT5cbiAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCI+XG4gICAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTRcIj5cbiAgICAgICAgICAgIDxiPnt7IF9pMThuKFwiY2F0ZWdvcnlcIikgfX08L2I+XG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLThcIj5cbiAgICAgICAgICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF9jYXRlZ29yeVwiIDpvcHRpb25zPVwiY2F0ZWdvcnlfbGlzdFwiPlxuICAgICAgICAgICAgPC9TZWxlY3RTZWFyY2g+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC90ZW1wbGF0ZT5cblxuICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCI+XG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00XCI+XG4gICAgICAgICAgPGI+e3sgX2kxOG4oXCJjYXRlZ29yeV9jdXN0b21fcnVsZVwiKSB9fTwvYj5cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC04XCI+XG4gICAgICAgICAgPHRleHRhcmVhIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgQGlucHV0PVwiY2hlY2tfdmFsaWRhdGlvblwiIDpwbGFjZWhvbGRlcj1cImNvbW1lbnRcIiByb3dzPVwiNlwiIHYtbW9kZWw9XCJjdXN0b21fcnVsZXNcIlxuICAgICAgICAgICAgc3BlbGxjaGVjaz1cImZhbHNlXCI+PC90ZXh0YXJlYT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L3RlbXBsYXRlPlxuICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6Zm9vdGVyPlxuICAgICAgPE5vdGVMaXN0IDpub3RlX2xpc3Q9XCJub3RlX2xpc3RcIj5cbiAgICAgIDwvTm90ZUxpc3Q+XG4gICAgICA8dGVtcGxhdGUgdi1pZj1cImlzX2VkaXRfcGFnZSA9PSBmYWxzZVwiPlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJhZGRfXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiA6ZGlzYWJsZWQ9XCJkaXNhYmxlX2FkZFwiPnt7IF9pMThuKCdhZGQnKSB9fTwvYnV0dG9uPlxuICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgIDx0ZW1wbGF0ZSB2LWVsc2U+XG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImFkZF9cIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIDpkaXNhYmxlZD1cImRpc2FibGVfYWRkXCI+e3sgX2kxOG4oJ2FwcGx5JykgfX08L2J1dHRvbj5cbiAgICAgIDwvdGVtcGxhdGU+XG4gICAgPC90ZW1wbGF0ZT5cbiAgPC9tb2RhbD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uQmVmb3JlTW91bnQsIG9uTW91bnRlZCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgbW9kYWwgfSBmcm9tIFwiLi9tb2RhbC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0U2VhcmNoIH0gZnJvbSBcIi4vc2VsZWN0LXNlYXJjaC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTm90ZUxpc3QgfSBmcm9tIFwiLi9ub3RlLWxpc3QudnVlXCI7XG5cbmNvbnN0IG1vZGFsX2lkID0gcmVmKG51bGwpO1xuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFsnYWRkJ10pO1xuY29uc3QgaXNfZWRpdF9wYWdlID0gcmVmKGZhbHNlKVxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcbmNvbnN0IGRpc2FibGVfYWRkID0gcmVmKHRydWUpXG5sZXQgdGl0bGUgPSByZWYoaTE4bignYWRkX2FwcGxpY2F0aW9uJykpO1xuY29uc3QgY29tbWVudCA9IHJlZihpMThuKCdkZXRhaWxzLmN1c3RvbV9ydWxlc19wbGFjZWhvbGRlcicpKTtcbmNvbnN0IHNlbGVjdGVkX2NhdGVnb3J5ID0gcmVmKHt9KTtcbmNvbnN0IGNhdGVnb3J5X2xpc3QgPSByZWYoW10pO1xuY29uc3QgY3VzdG9tX3J1bGVzID0gcmVmKCcnKVxuY29uc3QgYXBwbGljYXRpb25fbmFtZSA9IHJlZignJylcbmNvbnN0IGFwcGxpY2F0aW9uX2lkID0gcmVmKG51bGwpXG5cbmNvbnN0IGxhc3RfYXBwbGljYXRpb24gPSByZWYoe30pXG5cbmNvbnN0IG5vdGVfbGlzdCA9IFtcbiAgX2kxOG4oXCJjdXN0b21fY2F0ZWdvcmllcy5lYWNoX2hvc3Rfc2VwYXJhdGVfbGluZVwiKSxcbiAgX2kxOG4oXCJjdXN0b21fY2F0ZWdvcmllcy5hbGxvd2VkX3J1bGVzXCIpLFxuICBfaTE4bihcImN1c3RvbV9jYXRlZ29yaWVzLmlwX2FkZHJlc3NcIiksXG4gIF9pMThuKFwiY3VzdG9tX2NhdGVnb3JpZXMuaXBfYWRkcmVzc19wb3J0XCIpLFxuICBfaTE4bihcImN1c3RvbV9jYXRlZ29yaWVzLnBvcnRcIiksXG4gIF9pMThuKFwiY3VzdG9tX2NhdGVnb3JpZXMucG9ydF9yYW5nZVwiKSxcbiAgX2kxOG4oXCJjdXN0b21fY2F0ZWdvcmllcy5ob3N0X2RvbWFpblwiKVxuXVxuXG5jb25zdCBzaG93ZWQgPSAoKSA9PiB7IH07XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICBwYWdlX2NzcmY6IFN0cmluZyxcbiAgaWZpZDogU3RyaW5nLFxufSk7XG5cbmZ1bmN0aW9uIHJlc2V0X21vZGFsX2Zvcm0oKSB7XG4gIGFwcGxpY2F0aW9uX25hbWUudmFsdWUgPSAnJztcbiAgc2VsZWN0ZWRfY2F0ZWdvcnkudmFsdWUgPSBjYXRlZ29yeV9saXN0LnZhbHVlWzBdO1xuICBjdXN0b21fcnVsZXMudmFsdWUgPSAnJztcbn1cblxuY29uc3QgY2hlY2tfdmFsaWRhdGlvbiA9ICgpID0+IHtcbiAgaWYgKGNoZWNrX2FwcGxpY2F0aW9uX25hbWUoKSA9PSB0cnVlICYmIGNoZWNrX2N1c3RvbV9ydWxlcygpID09IHRydWUpXG4gICAgZGlzYWJsZV9hZGQudmFsdWUgPSBmYWxzZVxuICBlbHNlXG4gICAgZGlzYWJsZV9hZGQudmFsdWUgPSB0cnVlXG59XG5cbmNvbnN0IGNoZWNrX2FwcGxpY2F0aW9uX25hbWUgPSAoKSA9PiB7XG4gIHJldHVybiAoL15bQS1aYS16MC05Xy1dKiQvLnRlc3QoYXBwbGljYXRpb25fbmFtZS52YWx1ZSkpO1xufVxuXG5jb25zdCBjaGVja19jdXN0b21fcnVsZXMgPSAoKSA9PiB7XG4gIGxldCBjaGVjayA9IHRydWVcblxuICBsZXQgcnVsZXMgPSBjdXN0b21fcnVsZXMudmFsdWUuc3BsaXQoXCJcXG5cIik7XG4gIHJ1bGVzLmZvckVhY2goKHJ1bGUpID0+IHtcbiAgICBjaGVjayA9IGNoZWNrICYmICgvKiB0Y3A6MTEwMCAqLygvXigodGNwfHVkcCk6KDY1NTNbMC01XXw2NTVbMC0yXVswLTldXFxkfDY1WzAtNF0oXFxkKXsyfXw2WzAtNF0oXFxkKXszfXxbMS01XShcXGQpezR9fFsxLTldKFxcZCl7MCwzfSkpJC8udGVzdChydWxlKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAvKiB0Y3A6MTAwMC0xMDAyKi8oL14oKHRjcHx1ZHApOig2NTUzWzAtNV18NjU1WzAtMl1bMC05XVxcZHw2NVswLTRdKFxcZCl7Mn18NlswLTRdKFxcZCl7M318WzEtNV0oXFxkKXs0fXxbMS05XShcXGQpezAsM30pLSg2NTUzWzAtNV18NjU1WzAtMl1bMC05XVxcZHw2NVswLTRdKFxcZCl7Mn18NlswLTRdKFxcZCl7M318WzEtNV0oXFxkKXs0fXxbMS05XShcXGQpezAsM30pKSQvLnRlc3QocnVsZSkpIHx8XG4vLyAgICAgICAgICAgICAgICAgICAgICAoL14oKD8hLiogKS4qKSQvLnRlc3QocnVsZSkpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgLyogaXA6MS4xLjEuMSAqLygvXihpcCk6KDI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPylcXC4oMjVbMC01XXwyWzAtNF1bMC05XXxbMDFdP1swLTldWzAtOV0/KVxcLigyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pXFwuKDI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPykkLy50ZXN0KHJ1bGUpKSB8fFxuICAgICAgICAgICAgICAgICAgICAgIC8qIGlwOjEuMS4xLjE6MTAxMCAqLygvXihpcCk6KDI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPylcXC4oMjVbMC01XXwyWzAtNF1bMC05XXxbMDFdP1swLTldWzAtOV0/KVxcLigyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pXFwuKDI1WzAtNV18MlswLTRdWzAtOV18WzAxXT9bMC05XVswLTldPyk6KDY1NTNbMC01XXw2NTVbMC0yXVswLTldXFxkfDY1WzAtNF0oXFxkKXsyfXw2WzAtNF0oXFxkKXszfXxbMS01XShcXGQpezR9fFsxLTldKFxcZCl7MCwzfSkkLy50ZXN0KHJ1bGUpKSB8fFxuICAgICAgICAgICAgICAgICAgICAgIC8qIGhvc3Q6Z29vZ2xlICovKC9eKChob3N0KTpbYS16QS1aMC05XSspJC8udGVzdChydWxlKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAvKiBob3N0Omdvb2dsZS5jb20gKi8oLyhob3N0KTpbYS16QS1aMC05XS5bYS16QS1aXS9nLnRlc3QocnVsZSkpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgLyogRW1wdHkgc3RyaW5nICovcnVsZSA9PT0gJycpO1xuICB9KVxuXG4gIHJldHVybiBjaGVja1xufVxuXG5jb25zdCBwb3B1bGF0ZV9tb2RhbF9mb3JtID0gKHJvdykgPT4ge1xuICBsZXQgZWRpdF9yb3dfY2F0ZWdvcnkgPSBudWxsO1xuICBjYXRlZ29yeV9saXN0LnZhbHVlLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICBpZihpdGVtLmlkID09IHJvdy5jYXRlZ29yeV9pZCkge1xuICAgICAgZWRpdF9yb3dfY2F0ZWdvcnkgPSBpdGVtO1xuICAgIH1cbiAgfSk7XG5cbiAgc2VsZWN0ZWRfY2F0ZWdvcnkudmFsdWUgPSBlZGl0X3Jvd19jYXRlZ29yeTtcbiAgY3VzdG9tX3J1bGVzLnZhbHVlID0gcm93LmN1c3RvbV9ydWxlcz8ucmVwbGFjZSgnLCcsICdcXG4nKTtcbn1cblxuY29uc3Qgc2hvdyA9IChyb3cpID0+IHtcbiAgcmVzZXRfbW9kYWxfZm9ybSgpO1xuICBpc19lZGl0X3BhZ2UudmFsdWUgPSBmYWxzZTtcbiAgdGl0bGUudmFsdWUgPSBpMThuKCdhZGRfYXBwbGljYXRpb24nKTtcblxuICBpZiAocm93ICE9IG51bGwpIHtcbiAgICBhcHBsaWNhdGlvbl9pZC52YWx1ZSA9IHJvdy5hcHBsaWNhdGlvbl9pZDtcbiAgICBhcHBsaWNhdGlvbl9uYW1lLnZhbHVlID0gcm93LmFwcGxpY2F0aW9uO1xuICAgIGlzX2VkaXRfcGFnZS52YWx1ZSA9IHRydWU7XG4gICAgdGl0bGUudmFsdWUgPSBgJHtpMThuKCdlZGl0X2FwcGxpY2F0aW9uJyl9OiAke2FwcGxpY2F0aW9uX25hbWUudmFsdWV9YDtcbiAgICBwb3B1bGF0ZV9tb2RhbF9mb3JtKHJvdyk7XG4gIH1cbiAgbW9kYWxfaWQudmFsdWUuc2hvdygpO1xuICBjaGVja192YWxpZGF0aW9uKCk7XG59O1xuXG5jb25zdCBhZGRfID0gKCkgPT4ge1xuICBlbWl0KCdhZGQnLCB7XG4gICAgbDdfcHJvdG9faWQ6IGFwcGxpY2F0aW9uX2lkLnZhbHVlLFxuICAgIHByb3RvY29sX2FsaWFzOiBhcHBsaWNhdGlvbl9uYW1lLnZhbHVlLFxuICAgIGNhdGVnb3J5OiBzZWxlY3RlZF9jYXRlZ29yeS52YWx1ZS5pZCxcbiAgICBjdXN0b21fcnVsZXM6IGN1c3RvbV9ydWxlcy52YWx1ZSxcbiAgICBpc19lZGl0X3BhZ2U6IGlzX2VkaXRfcGFnZS52YWx1ZSxcbiAgfSk7XG5cbiAgY2xvc2UoKTtcbn07XG5cbmNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICBtb2RhbF9pZC52YWx1ZS5jbG9zZSgpO1xufTtcblxuY29uc3QgZm9ybWF0X2NhdGVnb3J5X2xpc3QgPSAobGlzdCkgPT4ge1xuICBsZXQgZm9ybWF0dGVkX2xpc3QgPSBbXTtcbiAgbGlzdC5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgZm9ybWF0dGVkX2xpc3QucHVzaCh7XG4gICAgICBpZDogaXRlbS5jYXRfaWQsXG4gICAgICBsYWJlbDogaXRlbS5uYW1lLFxuICAgICAgYXBwX2xpc3Q6IGl0ZW0uYXBwX2xpc3RcblxuICAgIH0pXG4gIH0pXG5cbiAgLy8gc29ydCBmb3JtYXR0ZWQgY2F0ZWdvcmllcztcbiAgZm9ybWF0dGVkX2xpc3QgPSBmb3JtYXR0ZWRfbGlzdC5zb3J0KChhLCBiKSA9PiB7XG5cdFx0ICAgIGlmIChhID09IG51bGwgfHwgYS5sYWJlbCA9PSBudWxsKSB7IHJldHVybiAtMTsgfVxuXHRcdCAgICBpZiAoYiA9PSBudWxsIHx8IGIubGFiZWwgPT0gbnVsbCkgeyByZXR1cm4gMTsgfVxuXHRcdCAgICByZXR1cm4gYS5sYWJlbC50b1N0cmluZygpLmxvY2FsZUNvbXBhcmUoYi5sYWJlbC50b1N0cmluZygpKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGZvcm1hdHRlZF9saXN0O1xufVxuXG5jb25zdCBsb2FkQ2F0ZWdvcnlMaXN0ID0gKGxpc3QpID0+IHtcbiAgY2F0ZWdvcnlfbGlzdC52YWx1ZSA9IGZvcm1hdF9jYXRlZ29yeV9saXN0KGxpc3QpO1xufTtcblxub25CZWZvcmVNb3VudCgoKSA9PiB7IH0pXG5cbmRlZmluZUV4cG9zZSh7IHNob3csIGNsb3NlLCBsb2FkQ2F0ZWdvcnlMaXN0IH0pO1xuXG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPjwvc3R5bGU+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuPG1vZGFsIHJlZj1cIm1vZGFsX2lkXCI+XG4gIDxpbnB1dCBjbGFzcz1cImZvcm0tY29udHJvbFwiIHR5cGU9XCJ0ZXh0XCIgdi1tb2RlbD1cImFwcGxpY2F0aW9uX25hbWVcIiBzcGVsbGNoZWNrPVwiZmFsc2VcIiBoaWRkZW4+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+e3sgdGl0bGUgfX08L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+e3sgYm9keSB9fTwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Zm9vdGVyPlxuICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cIl9yZW1vdmVcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPnt7X2kxOG4oJ2RlbGV0ZScpfX08L2J1dHRvbj5cbiAgPC90ZW1wbGF0ZT5cbjwvbW9kYWw+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBtb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuXG5jb25zdCBtb2RhbF9pZCA9IHJlZihudWxsKTtcbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbJ3JlbW92ZSddKTtcbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5jb25zdCBhcHBsaWNhdGlvbl9uYW1lID0gcmVmKG51bGwpXG5cbmxldCB0aXRsZSA9IHJlZihpMThuKCdjdXN0b21fY2F0ZWdvcmllcy5kZWxldGVfYXBwJykpO1xuY29uc3QgYm9keSA9IGkxOG4oJ2N1c3RvbV9jYXRlZ29yaWVzLmRlbGV0ZV9hcHBfY29uZmlybScpXG5cbmNvbnN0IHNob3cgPSAocm93KSA9PiB7XG4gIGlmKHJvdyAhPSBudWxsKSB7XG4gICAgYXBwbGljYXRpb25fbmFtZS52YWx1ZSA9IHJvdy5hcHBsaWNhdGlvbjtcbiAgICB0aXRsZS52YWx1ZSA9IGAke2kxOG4oJ2N1c3RvbV9jYXRlZ29yaWVzLmRlbGV0ZV9hcHAnKX06ICR7YXBwbGljYXRpb25fbmFtZS52YWx1ZX1gO1xuICB9XG4gIG1vZGFsX2lkLnZhbHVlLnNob3coKTtcbn07XG5cbmNvbnN0IF9yZW1vdmUgPSAoKSA9PiB7XG4gIGVtaXQoJ3JlbW92ZScsIHsgXG4gICAgcHJvdG9jb2xfYWxpYXM6IGFwcGxpY2F0aW9uX25hbWUudmFsdWUsXG4gIH0pO1xuICAgIFxuICBjbG9zZSgpO1xufTtcblxuY29uc3QgY2xvc2UgPSAoKSA9PiB7XG4gIG1vZGFsX2lkLnZhbHVlLmNsb3NlKCk7XG59O1xuXG5kZWZpbmVFeHBvc2UoeyBzaG93LCBjbG9zZSB9KTtcblxuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbjwvc3R5bGU+XG4iLCI8IS0tXG4gIChDKSAyMDEzLTIyIC0gbnRvcC5vcmdcbi0tPlxuXG48dGVtcGxhdGU+ICAgIFxuICA8ZGl2IGNsYXNzPVwib3ZlcmxheSBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGFsaWduLWl0ZW1zLWNlbnRlciBwb3NpdGlvbi1hYnNvbHV0ZSBoLTEwMCB3LTEwMFwiPlxuICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiPlxuICAgICAgPGRpdiBjbGFzcz1cInNwaW5uZXItYm9yZGVyIHRleHQtcHJpbWFyeSBtdC01XCIgcm9sZT1cInN0YXR1c1wiPlxuICAgICAgICA8c3BhbiBjbGFzcz1cInNyLW9ubHkgcG9zaXRpb24tYWJzb2x1dGVcIj5Mb2FkaW5nLi4uPC9zcGFuPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuXG4gIDxkaXYgdi1zaG93PVwiIWhpZGRlblwiIHJlZj1cInVwZGF0ZV9tZXNzYWdlXCIgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvXCI+e3sgbWVzc2FnZSB9fTwvZGl2PlxuXG4gIDxNb2RhbEFkZEFwcGxpY2F0aW9uIHJlZj1cIm1vZGFsX2FkZF9hcHBsaWNhdGlvblwiXG4gICAgOmNhdGVnb3J5X2xpc3Q9XCJjYXRlZ29yeV9saXN0XCJcbiAgICA6cGFnZV9jc3JmPVwicGFnZV9jc3JmXCJcbiAgICA6aWZpZD1cImlmaWRcIlxuICAgIEBhZGQ9XCJfYWRkXCI+XG4gIDwvTW9kYWxBZGRBcHBsaWNhdGlvbj5cbiAgPE1vZGFsRGVsZXRlQXBwbGljYXRpb24gcmVmPVwibW9kYWxfZGVsZXRlX2FwcGxpY2F0aW9uXCJcbiAgICBAcmVtb3ZlPVwiX3JlbW92ZVwiPlxuICA8L01vZGFsRGVsZXRlQXBwbGljYXRpb24+XG5cbiAgPERhdGF0YWJsZSByZWY9XCJhcHBsaWNhdGlvbnNfdGFibGVcIlxuICAgIDp0YWJsZV9idXR0b25zPVwiY29uZmlnX2FwcGxpY2F0aW9uc190YWJsZS50YWJsZV9idXR0b25zXCJcbiAgICA6Y29sdW1uc19jb25maWc9XCJjb25maWdfYXBwbGljYXRpb25zX3RhYmxlLmNvbHVtbnNfY29uZmlnXCJcbiAgICA6ZGF0YV91cmw9XCJjb25maWdfYXBwbGljYXRpb25zX3RhYmxlLmRhdGFfdXJsXCJcbiAgICA6ZW5hYmxlX3NlYXJjaD1cImNvbmZpZ19hcHBsaWNhdGlvbnNfdGFibGUuZW5hYmxlX3NlYXJjaFwiXG4gICAgOnRhYmxlX2NvbmZpZz1cImNvbmZpZ19hcHBsaWNhdGlvbnNfdGFibGUudGFibGVfY29uZmlnXCI+XG4gIDwvRGF0YXRhYmxlPlxuPC90ZW1wbGF0ZT5cbiAgXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvblVubW91bnRlZCwgb25CZWZvcmVNb3VudCwgb25Nb3VudGVkIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRhdGFibGUgfSBmcm9tIFwiLi9kYXRhdGFibGUudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsQWRkQXBwbGljYXRpb24gfSBmcm9tIFwiLi9tb2RhbC1hZGQtYXBwbGljYXRpb24udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRGVsZXRlQXBwbGljYXRpb24gfSBmcm9tIFwiLi9tb2RhbC1kZWxldGUtYXBwbGljYXRpb24udnVlXCI7XG5cbmNvbnN0IGFwcGxpY2F0aW9uc190YWJsZSA9IHJlZihudWxsKTtcbmNvbnN0IG1vZGFsX2RlbGV0ZV9hcHBsaWNhdGlvbiA9IHJlZihudWxsKTtcbmNvbnN0IG1vZGFsX2FkZF9hcHBsaWNhdGlvbiA9IHJlZihudWxsKTtcbmNvbnN0IGNvbmZpZ19hcHBsaWNhdGlvbnNfdGFibGUgPSByZWYoe30pO1xuY29uc3QgY2F0ZWdvcnlfbGlzdCA9IHJlZihbXSk7XG5jb25zdCB1cGRhdGVfbWVzc2FnZSA9IHJlZihudWxsKTtcbmNvbnN0IGhpZGRlbiA9IHJlZih0cnVlKTtcbmxldCBtZXNzYWdlID0gJydcblxuY29uc3QgY2F0ZWdvcnlfbGlzdF91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2w3L2NhdGVnb3J5L2NvbnN0cy5sdWFgXG5jb25zdCBhZGRfYXBwbGljYXRpb25fdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2VkaXQvYXBwbGljYXRpb24vYXBwbGljYXRpb24ubHVhYFxuY29uc3QgZGVsZXRlX2FwcGxpY2F0aW9uX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9kZWxldGUvYXBwbGljYXRpb24vYXBwbGljYXRpb24ubHVhYFxuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gIHBhZ2VfY3NyZjogU3RyaW5nLFxuICBpZmlkOiBTdHJpbmcsXG4gIGhhc19wcm90b3NfZmlsZTogQm9vbGVhbixcbn0pXG5cbmNvbnN0IF9yZW1vdmUgPSBhc3luYyAocGFyYW1zKSA9PiB7ICBcbiAgY29uc3QgdXJsX3BhcmFtcyA9IHtcbiAgICBjc3JmOiBwcm9wcy5wYWdlX2NzcmYsXG4gICAgaWZpZDogcHJvcHMuaWZpZFxuICB9XG5cbiAgY29uc3QgdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKGRlbGV0ZV9hcHBsaWNhdGlvbl91cmwsIHtcbiAgICAuLi51cmxfcGFyYW1zLFxuICAgIC4uLnBhcmFtc1xuICB9KVxuXG4gIGF3YWl0ICQuZ2V0KHVybCwgZnVuY3Rpb24ocnNwLCBzdGF0dXMpe1xuICAgIHNob3dfbWVzc2FnZShpMThuKCdjdXN0b21fY2F0ZWdvcmllcy5zdWNjZXNmdWxseV9yZW1vdmVkJykpO1xuICB9KTtcblxuICByZWxvYWRfdGFibGUoKTtcbn1cblxuY29uc3Qgb3Blbl9kZWxldGVfbW9kYWwgPSAocm93KSA9PiB7XG4gIG1vZGFsX2RlbGV0ZV9hcHBsaWNhdGlvbi52YWx1ZS5zaG93KHJvdyk7XG59XG5cbmNvbnN0IF9hZGQgPSBhc3luYyAocGFyYW1zKSA9PiB7XG4gIGNvbnN0IGlzX2VkaXRfcGFnZSA9IHBhcmFtcy5pc19lZGl0X3BhZ2U7XG4gIHBhcmFtcy5pc19lZGl0X3BhZ2UgPSBudWxsO1xuXG4gIGNvbnN0IHVybF9wYXJhbXMgPSB7XG4gICAgY3NyZjogcHJvcHMucGFnZV9jc3JmLFxuICAgIGlmaWQ6IHByb3BzLmlmaWRcbiAgfVxuXG4gIGNvbnN0IHVybCA9IE50b3BVdGlscy5idWlsZFVSTChhZGRfYXBwbGljYXRpb25fdXJsLCB7XG4gICAgLi4udXJsX3BhcmFtcyxcbiAgICAuLi5wYXJhbXNcbiAgfSlcbiAgXG4gIGF3YWl0ICQuZ2V0KHVybCwgZnVuY3Rpb24ocnNwLCBzdGF0dXMpe1xuICAgIGlmKHN0YXR1cyA9PSAnc3VjY2VzcycpIHtcbiAgICAgIGlmKGlzX2VkaXRfcGFnZSlcbiAgICAgICAgc2hvd19tZXNzYWdlKGkxOG4oJ2N1c3RvbV9jYXRlZ29yaWVzLnN1Y2Nlc2Z1bGx5X2VkaXRlZCcpKTtcbiAgICAgIGVsc2VcbiAgICAgICAgc2hvd19tZXNzYWdlKGkxOG4oJ2N1c3RvbV9jYXRlZ29yaWVzLnN1Y2Nlc2Z1bGx5X2FkZGVkJykpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmVsb2FkX3RhYmxlKCk7XG59XG5cbmNvbnN0IG9wZW5fYWRkX21vZGFsID0gKHJvdykgPT4ge1xuICBtb2RhbF9hZGRfYXBwbGljYXRpb24udmFsdWUuc2hvdyhyb3cpO1xufVxuXG5jb25zdCBzaG93X21lc3NhZ2UgPSAoX21lc3NhZ2UpID0+IHtcbiAgbWVzc2FnZSA9IF9tZXNzYWdlO1xuICBoaWRkZW4udmFsdWUgPSBmYWxzZTtcbiAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgaGlkZGVuLnZhbHVlID0gdHJ1ZTtcbiAgICByZWxvYWRfdGFibGUoKTtcbiAgfSwgNDAwMCk7XG59XG5cbmNvbnN0IGRlc3Ryb3kgPSAoKSA9PiB7XG4gIGFwcGxpY2F0aW9uc190YWJsZS52YWx1ZS5kZXN0cm95X3RhYmxlKCk7XG59XG5cbmNvbnN0IHJlbG9hZF90YWJsZSA9ICgpID0+IHtcbiAgYXBwbGljYXRpb25zX3RhYmxlLnZhbHVlLnJlbG9hZCgpO1xufVxuXG5jb25zdCBsb2FkX2NhdGVnb3JpZXMgPSBhc3luYyAoKSA9PiB7XG4gIGF3YWl0ICQuZ2V0KGNhdGVnb3J5X2xpc3RfdXJsLCBmdW5jdGlvbihyc3AsIHN0YXR1cyl7XG4gICAgY2F0ZWdvcnlfbGlzdC52YWx1ZSA9IHJzcC5yc3A7XG4gIH0pO1xuICBtb2RhbF9hZGRfYXBwbGljYXRpb24udmFsdWUubG9hZENhdGVnb3J5TGlzdChjYXRlZ29yeV9saXN0LnZhbHVlKTtcbn1cblxuY29uc3Qgc2VhcmNoID0gKGZpbHRlcl9hcHApID0+IHtcbiAgYXBwbGljYXRpb25zX3RhYmxlLnZhbHVlLnNlYXJjaF92YWx1ZShmaWx0ZXJfYXBwKTtcbn1cbiAgICBcbm9uQmVmb3JlTW91bnQoYXN5bmMgKCkgPT4ge1xuICBzdGFydF9kYXRhdGFibGUoKTtcbn0pO1xuXG5vbk1vdW50ZWQoYXN5bmMgKCkgPT4ge1xuICBhd2FpdCBsb2FkX2NhdGVnb3JpZXMoKTtcbiAgY29uc3QgZmlsdGVyX2FwcCA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiYXBwbGljYXRpb25cIik7XG4gIGlmKGZpbHRlcl9hcHApIHtcbiAgICBzZWFyY2goZmlsdGVyX2FwcCk7XG4gIH1cbn0pXG5cbm9uVW5tb3VudGVkKGFzeW5jICgpID0+IHtcbiAgZGVzdHJveSgpXG59KTtcblxuXG5jb25zdCBhZGRfYWN0aW9uX2NvbHVtbiA9IGZ1bmN0aW9uIChyb3dEYXRhKSB7XG4gIGxldCBlZGl0X2hhbmRsZXIgPSB7XG4gICAgaGFuZGxlcklkOiBcImVkaXRfcnVsZVwiLFxuICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgIG9wZW5fYWRkX21vZGFsKHJvd0RhdGEpO1xuICAgIH0sXG4gIH1cblxuICBjb25zdCBhY3Rpb25zID0gW1xuICAgIHsgY2xhc3M6IGBwb2ludGVyYCwgaGFuZGxlcjogZWRpdF9oYW5kbGVyLCBpY29uOiAnZmEtZWRpdCcsIHRpdGxlOiBpMThuKCdlZGl0JykgfSxcbiAgXVxuXG4gIGlmKHJvd0RhdGEuaXNfY3VzdG9tKSB7XG4gICAgbGV0IGRlbGV0ZV9oYW5kbGVyID0ge1xuICAgICAgaGFuZGxlcklkOiBcImRlbGV0ZV9ydWxlXCIsXG4gICAgICBvbkNsaWNrOiAoKSA9PiB7XG4gICAgICAgIG9wZW5fZGVsZXRlX21vZGFsKHJvd0RhdGEpO1xuICAgICAgfSxcbiAgICB9XG4gIFxuICAgIGFjdGlvbnMucHVzaCggICAgXG4gICAgICB7IGNsYXNzOiBgcG9pbnRlcmAsIGhhbmRsZXI6IGRlbGV0ZV9oYW5kbGVyLCBpY29uOiAnZmEtdHJhc2gnLCB0aXRsZTogaTE4bignZGVsZXRlJykgfSxcbiAgICApXG4gIH1cbiAgcmV0dXJuIERhdGFUYWJsZVV0aWxzLmNyZWF0ZUFjdGlvbkJ1dHRvbnMoYWN0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIHN0YXJ0X2RhdGF0YWJsZSgpIHtcbiAgY29uc3QgZGF0YXRhYmxlQnV0dG9uID0gW107XG5cbiAgaWYocHJvcHMuaGFzX3Byb3Rvc19maWxlKSB7XG4gICAgZGF0YXRhYmxlQnV0dG9uLnB1c2goe1xuICAgICAgdGV4dDogJzxpIGNsYXNzPVwiZmFzIGZhLXBsdXNcIj48L2k+JyxcbiAgICAgIGNsYXNzTmFtZTogJ2J0bi1saW5rJyxcbiAgICAgIGFjdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICBvcGVuX2FkZF9tb2RhbCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZGF0YXRhYmxlQnV0dG9uLnB1c2goe1xuICAgIHRleHQ6ICc8aSBjbGFzcz1cImZhcyBmYS1zeW5jXCI+PC9pPicsXG4gICAgY2xhc3NOYW1lOiAnYnRuLWxpbmsnLFxuICAgIGFjdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgcmVsb2FkX3RhYmxlKCk7XG4gICAgfVxuICB9KTtcbiAgICBcbiAgbGV0IGRlZmF1bHREYXRhdGFibGVDb25maWcgPSB7XG4gICAgdGFibGVfYnV0dG9uczogZGF0YXRhYmxlQnV0dG9uLFxuICAgIGRhdGFfdXJsOiBOdG9wVXRpbHMuYnVpbGRVUkwoYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9udG9wbmcvYXBwbGljYXRpb25zLmx1YWAsIHsgaWZpZDogcHJvcHMuaWZpZCB9KSxcbiAgICBlbmFibGVfc2VhcmNoOiB0cnVlLFxuICAgIHRhYmxlX2NvbmZpZzogeyBcbiAgICAgIHNlcnZlclNpZGU6IGZhbHNlLCBcbiAgICAgIG9yZGVyOiBbWyAwIC8qIGFwcGxpY2F0aW9uIGNvbHVtbiAqLywgJ2FzYycgXV0sXG4gICAgfVxuICB9O1xuICBcbiAgLyogQXBwbGljYXRpb25zIHRhYmxlIGNvbmZpZ3VyYXRpb24gKi8gIFxuXG4gIGxldCBjb2x1bW5zID0gW1xuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImFwcGxpY2F0aW9uXCIpLCBuYW1lOiAnYXBwbGljYXRpb24nLCBkYXRhOiAnYXBwbGljYXRpb24nLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSB9LFxuICAgIHsgY29sdW1uTmFtZTogaTE4bihcImNhdGVnb3J5XCIpLCBuYW1lOiAnY2F0ZWdvcnknLCBkYXRhOiAnY2F0ZWdvcnknLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiBmdW5jdGlvbiAoZGF0YSwgdHlwZSwgcm93RGF0YSkgeyByZXR1cm4gZGF0YSB9IH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiY3VzdG9tX2NhdGVnb3JpZXMuY3VzdG9tX2hvc3RzXCIpLCBuYW1lOiAnY3VzdG9tX3J1bGVzJywgZGF0YTogJ2N1c3RvbV9ydWxlcycsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gICAgeyB2aXNpYmxlOiBmYWxzZSwgbmFtZTogJ2FwcGxpY2F0aW9uX2hvc3RzJywgZGF0YTogJ2FwcGxpY2F0aW9uX2hvc3RzJyB9LFxuICAgIHsgdmlzaWJsZTogZmFsc2UsIG5hbWU6ICdhcHBsaWNhdGlvbl9pZCcsIGRhdGE6ICdhcHBsaWNhdGlvbl9pZCcgfSxcbiAgICB7IHZpc2libGU6IGZhbHNlLCBuYW1lOiAnY2F0ZWdvcnlfaWQnLCBkYXRhOiAnY2F0ZWdvcnlfaWQnIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBfaTE4bihcImFjdGlvbnNcIiksIHdpZHRoOiAnNSUnLCBuYW1lOiAnYWN0aW9ucycsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgb3JkZXJhYmxlOiBmYWxzZSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAwLCByZW5kZXI6IGZ1bmN0aW9uIChfLCB0eXBlLCByb3dEYXRhKSB7IHJldHVybiBhZGRfYWN0aW9uX2NvbHVtbihyb3dEYXRhKSB9IH1cbiAgXTtcblxuICBsZXQgdHJhZmZpY0NvbmZpZyA9IG50b3BuZ191dGlsaXR5LmNsb25lKGRlZmF1bHREYXRhdGFibGVDb25maWcpO1xuICB0cmFmZmljQ29uZmlnLmNvbHVtbnNfY29uZmlnID0gY29sdW1ucztcbiAgY29uZmlnX2FwcGxpY2F0aW9uc190YWJsZS52YWx1ZSA9IHRyYWZmaWNDb25maWc7XG59XG48L3NjcmlwdD5cblxuXG5cblxuXG5cbiIsIjwhLS1cbiAgKEMpIDIwMTMtMjMgLSBudG9wLm9yZ1xuLS0+XG5cbjx0ZW1wbGF0ZT4gICAgXG4gIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY29sLTEyXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZCBjYXJkLXNoYWRvd1wiPlxuICAgICAgICA8TG9hZGluZyB2LWlmPVwibG9hZGluZ1wiPjwvTG9hZGluZz5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwiZXJyb3JcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1kYW5nZXJcIiByb2xlPVwiYWxlcnRcIiBpZD0nZXJyb3ItYWxlcnQnPlxuICAgICAgICAgICAgICB7eyBlcnJvcl9tZXNzYWdlIH19XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwiIWRpc2NvdmVyeV9yZXF1ZXN0ZWRcIj5cbiAgICAgICAgICAgIDxEYXRhdGFibGUgcmVmPVwibmV0d29ya19kaXNjb3ZlcnlfdGFibGVcIlxuICAgICAgICAgICAgICA6dGFibGVfYnV0dG9ucz1cImNvbmZpZ19uZXR3b3JrX2Rpc2NvdmVyeS50YWJsZV9idXR0b25zXCJcbiAgICAgICAgICAgICAgOmNvbHVtbnNfY29uZmlnPVwiY29uZmlnX25ldHdvcmtfZGlzY292ZXJ5LmNvbHVtbnNfY29uZmlnXCJcbiAgICAgICAgICAgICAgOmRhdGFfdXJsPVwiY29uZmlnX25ldHdvcmtfZGlzY292ZXJ5LmRhdGFfdXJsXCJcbiAgICAgICAgICAgICAgOmVuYWJsZV9zZWFyY2g9XCJjb25maWdfbmV0d29ya19kaXNjb3ZlcnkuZW5hYmxlX3NlYXJjaFwiXG4gICAgICAgICAgICAgIDp0YWJsZV9jb25maWc9XCJjb25maWdfbmV0d29ya19kaXNjb3ZlcnkudGFibGVfY29uZmlnXCI+XG4gICAgICAgICAgICA8L0RhdGF0YWJsZT5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgIDx0ZW1wbGF0ZSB2LWVsc2U+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mbyBhbGVydC1kaXNtaXNzYWJsZVwiPlxuICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNwaW5uZXItYm9yZGVyIHNwaW5uZXItYm9yZGVyLXNtIHRleHQtaW5mb1wiPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICB7eyBkaXNjb3ZlcnlfcmVxdWVzdGVkX21lc3NhZ2UgfX1cbiAgICAgICAgICAgICAgPHNwYW4gdi1odG1sPVwicHJvZ3Jlc3NfbWVzc2FnZVwiPjwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgPE5vdGVMaXN0XG4gICAgICAgICAgICB2LWJpbmQ6bm90ZV9saXN0PVwibm90ZV9saXN0XCI+XG4gICAgICAgICAgPC9Ob3RlTGlzdD5cbiAgICAgICAgICA8IS0tIEFkZGluZyBFeHRyYSBNZXNzYWdlIC0tPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJwLTFcIiB2LWh0bWw9XCJsYXN0X25ldHdvcmtfZGlzY292ZXJ5XCI+PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25CZWZvcmVNb3VudCwgb25Vbm1vdW50ZWQsIG9uTW91bnRlZCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgRGF0YXRhYmxlIH0gZnJvbSBcIi4vZGF0YXRhYmxlLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBMb2FkaW5nIH0gZnJvbSBcIi4vbG9hZGluZy52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTm90ZUxpc3QgfSBmcm9tIFwiLi9ub3RlLWxpc3QudnVlXCI7XG5cbmNvbnN0IGVycm9yID0gcmVmKGZhbHNlKTtcbmNvbnN0IGVycm9yX21lc3NhZ2UgPSBpMThuKFwibWFwX3BhZ2UuZmV0Y2hfZXJyb3JcIik7XG5jb25zdCBkaXNjb3ZlcnlfcmVxdWVzdGVkID0gcmVmKGZhbHNlKTtcbmNvbnN0IG5ldHdvcmtfZGlzY292ZXJ5X3RhYmxlID0gcmVmKG51bGwpO1xuY29uc3QgY29uZmlnX25ldHdvcmtfZGlzY292ZXJ5ID0gcmVmKHt9KTtcbmNvbnN0IHByb2dyZXNzX21lc3NhZ2UgPSByZWYobnVsbCk7XG5jb25zdCBsYXN0X25ldHdvcmtfZGlzY292ZXJ5ID0gcmVmKCcnKVxuY29uc3QgZGlzY292ZXJ5X3JlcXVlc3RlZF9tZXNzYWdlID0gaTE4bignZGlzY292ZXIubmV0d29ya19kaXNjb3Zlcnlfbm90X2VuYWJsZWQnKVxuY29uc3QgbG9hZGluZyA9IHJlZihmYWxzZSk7XG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgaWZpZDogU3RyaW5nLFxufSlcblxuY29uc3QgZ2hvc3RfbWVzc2FnZSA9IGkxOG4oXCJkaXNjb3Zlci5naG9zdF9pY29uX2Rlc2NyXCIpO1xuY29uc3QgdG9vX21hbnlfZGV2aWNlc19tZXNzYWdlID0gaTE4bihcImRpc2NvdmVyLnRvb19tYW55X2RldmljZXNfZGVzY3JcIik7XG5jb25zdCBnaG9zdF9tZXNzYWdlX2FkZGVkID0gcmVmKGZhbHNlKTtcblxubGV0IHRpbWVvdXRfaWQ7XG5cbmNvbnN0IG5vdGVfbGlzdCA9IFtcbiAgaTE4bihcImRpc2NvdmVyLmRpc2NvdmVyeV9ydW5uaW5nXCIpLFxuICBpMThuKFwiZGlzY292ZXIucHJvdG9jb2xzX25vdGVcIilcbl1cblxuY29uc3QgZGlzY292ZXJ5X3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvZ2V0X2Rpc2NvdmVyX3Byb2dyZXNzLmx1YWBcbmNvbnN0IG5ldHdvcmtfZGlzY292ZXJ5X2RhdGEgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L25ldHdvcmsvZGlzY292ZXJ5L2Rpc2NvdmVyLmx1YWBcbmNvbnN0IHJ1bl9uZXR3b3JrX2Rpc2NvdmVyeSA9IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvbmV0d29yay9kaXNjb3ZlcnkvcnVuX2Rpc2NvdmVyeS5sdWFgXG5cbi8qICBUaGlzIGZ1bmN0aW9uIGFkZCBub3RlcyB0byB0aGUgcGFnZXMsIGxpa2UgYWRkaW5nIG5vdGVzIFxuICogIHRvIG5vdGVfbGlzdCBvciBsYXN0IG5ldHdvcmsgZGlzY292ZXJ5IG5vdGUgXG4gKi9cbmNvbnN0IGFkZF9ub3RlcyA9IChyc3ApID0+IHtcbiAgaWYocnNwLmdob3N0X2ZvdW5kID09IHRydWVcbiAgICAgICYmIGdob3N0X21lc3NhZ2VfYWRkZWQudmFsdWUgPT0gZmFsc2UpIHtcbiAgICBub3RlX2xpc3QudW5zaGlmdChnaG9zdF9tZXNzYWdlKTtcbiAgICBnaG9zdF9tZXNzYWdlX2FkZGVkLnZhbHVlID0gdHJ1ZTtcbiAgfVxuICBpZihyc3AudG9vX21hbnlfZGV2aWNlc19tZXNzYWdlID09IHRydWVcbiAgICAgICYmIHRvb19tYW55X2RldmljZXNfbWVzc2FnZS52YWx1ZSA9PSBmYWxzZSkge1xuICAgIG5vdGVfbGlzdC51bnNoaWZ0KHRvb19tYW55X2RldmljZXNfbWVzc2FnZSk7XG4gICAgdG9vX21hbnlfZGV2aWNlc19tZXNzYWdlLnZhbHVlID0gdHJ1ZVxuICB9XG4gIGlmKHJzcC5naG9zdF9mb3VuZCA9PSBmYWxzZVxuICAgICAgJiYgZ2hvc3RfbWVzc2FnZV9hZGRlZC52YWx1ZSA9PSBmYWxzZSkge1xuICAgIG5vdGVfbGlzdC5zaGlmdCgpO1xuICAgIGdob3N0X21lc3NhZ2VfYWRkZWQudmFsdWUgPSBmYWxzZTtcbiAgfVxuICBpZihyc3AudG9vX21hbnlfZGV2aWNlc19tZXNzYWdlID09IGZhbHNlXG4gICAgICAmJiB0b29fbWFueV9kZXZpY2VzX21lc3NhZ2UudmFsdWUgPT0gdHJ1ZSkge1xuICAgIG5vdGVfbGlzdC5zaGlmdCgpO1xuICAgIHRvb19tYW55X2RldmljZXNfbWVzc2FnZS52YWx1ZSA9IGZhbHNlXG4gIH1cblxuICBsYXN0X25ldHdvcmtfZGlzY292ZXJ5LnZhbHVlID0gcnNwLmxhc3RfbmV0d29ya19kaXNjb3Zlcnk7XG59XG5cbi8qICBUaGlzIGZ1bmN0aW9uIGhhbmRsZSB0aGUgZGlzY292ZXJ5LCBhc2tpbmcgdGhlIGJhY2tlbmQgaWYgIFxuICogIGEgbmV3IGRpc2NvdmVyeSB3YXMgcmVxdWVzdGVkIG9yIG5vdCBhbmQgaW4gY2FzZSB1cGRhdGVzIHRoZSBub3Rlc1xuICogIGFuZCB0aGUgdmFyaW91cyBtZXNzYWdlc1xuICovXG5jb25zdCBjaGVja0Rpc2NvdmVyeSA9IGFzeW5jIGZ1bmN0aW9uKCkge1xuICBsb2FkaW5nLnZhbHVlID0gZmFsc2U7XG4gIGF3YWl0ICQuZ2V0KE50b3BVdGlscy5idWlsZFVSTChkaXNjb3ZlcnlfdXJsLCB7IGlmaWQ6IHByb3BzLmlmaWQgfSksIGZ1bmN0aW9uKHJzcCwgc3RhdHVzKXtcbiAgICBpZihyc3AucnNwLmRpc2NvdmVyeV9yZXF1ZXN0ZWQgPT0gdHJ1ZSkge1xuICAgICAgZGlzY292ZXJ5X3JlcXVlc3RlZC52YWx1ZSA9IHRydWU7XG4gICAgICBpZihyc3AucnNwLnByb2dyZXNzICE9IFwiXCIpIHtcbiAgICAgICAgcHJvZ3Jlc3NfbWVzc2FnZS52YWx1ZSA9IHJzcC5yc3AucHJvZ3Jlc3M7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRpc2NvdmVyeV9yZXF1ZXN0ZWQudmFsdWUgPSBmYWxzZTtcbiAgICAgIHByb2dyZXNzX21lc3NhZ2UudmFsdWUgPSAnJztcbiAgICAgIGNsZWFySW50ZXJ2YWwodGltZW91dF9pZCk7XG4gICAgfVxuICAgIGFkZF9ub3Rlcyhyc3AucnNwKTtcbiAgfSk7XG59XG5cbmNvbnN0IGRlc3Ryb3kgPSAoKSA9PiB7XG4gIG5ldHdvcmtfZGlzY292ZXJ5X3RhYmxlLnZhbHVlLmRlc3Ryb3lfdGFibGUoKTtcbn1cblxuY29uc3QgcmVsb2FkX3RhYmxlID0gKCkgPT4ge1xuICBuZXR3b3JrX2Rpc2NvdmVyeV90YWJsZS52YWx1ZS5yZWxvYWQoKTtcbn1cblxub25Nb3VudGVkKCgpID0+IHtcbiAgdGltZW91dF9pZCA9IHNldEludGVydmFsKGNoZWNrRGlzY292ZXJ5LCAzMDAwKTtcbn0pLFxuICAgIFxub25CZWZvcmVNb3VudChhc3luYyAoKSA9PiB7XG4gIHN0YXJ0X2RhdGF0YWJsZSgpO1xufSk7XG5cbm9uVW5tb3VudGVkKGFzeW5jICgpID0+IHtcbiAgZGVzdHJveSgpXG59KTtcblxuLyogIEluaXRpYWxpemUgdGhlIGRhdGF0YWJsZSwgYWRkaW5nIHRoZSBhY3Rpb24gYnV0dG9ucyAobmV4dCB0byB0aGUgc2VhcmNoKSxcbiAqICB0aGUgdmFyaW91cyBjb2x1bW5zLCBuYW1lcyBhbmQgZGF0YSBhbmQgdGhlIGNvbmZpZ3VyYXRpb24gb2YgdGhlIGRhdGF0YWJsZVxuICovXG5mdW5jdGlvbiBzdGFydF9kYXRhdGFibGUoKSB7XG4gIGNvbnN0IGRhdGF0YWJsZUJ1dHRvbiA9IFt7XG4gICAgICB0ZXh0OiAnPGkgY2xhc3M9XCJmYXMgZmEtc3luY1wiPjwvaT4nLFxuICAgICAgY2xhc3NOYW1lOiAnYnRuLWxpbmsnLFxuICAgICAgYWN0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlbG9hZF90YWJsZSgpO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIHRleHQ6IGkxOG4oXCJkaXNjb3Zlci5zdGFydF9kaXNjb3ZlcnlcIikgKyAnIDxpIGNsYXNzPVwiZmEtc29saWQgZmEtcGxheVwiPjwvaT4nLFxuICAgICAgYWN0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgbG9hZGluZy52YWx1ZSA9IGZhbHNlO1xuICAgICAgICAkLmdldChOdG9wVXRpbHMuYnVpbGRVUkwocnVuX25ldHdvcmtfZGlzY292ZXJ5LCB7IGlmaWQ6IHByb3BzLmlmaWQgfSksIGZ1bmN0aW9uKF8pIHt9KVxuICAgICAgICAvKiBTZXQgdGhlIGRlc2NvdmVyeSByZXF1ZXN0ZWQgdG8gdHJ1ZSAqL1xuICAgICAgICB0aW1lb3V0X2lkID0gc2V0SW50ZXJ2YWwoY2hlY2tEaXNjb3ZlcnksIDEwMDApO1xuICAgICAgfVxuICAgIH1cbiAgXTtcbiAgICBcbiAgbGV0IGRlZmF1bHREYXRhdGFibGVDb25maWcgPSB7XG4gICAgdGFibGVfYnV0dG9uczogZGF0YXRhYmxlQnV0dG9uLFxuICAgIGRhdGFfdXJsOiBOdG9wVXRpbHMuYnVpbGRVUkwobmV0d29ya19kaXNjb3ZlcnlfZGF0YSwgeyBpZmlkOiBwcm9wcy5pZmlkIH0pLFxuICAgIGVuYWJsZV9zZWFyY2g6IHRydWUsXG4gICAgdGFibGVfY29uZmlnOiB7IFxuICAgICAgc2VydmVyU2lkZTogZmFsc2UsIFxuICAgICAgb3JkZXI6IFtbIDAgLyogYXBwbGljYXRpb24gY29sdW1uICovLCAnYXNjJyBdXSxcbiAgICB9XG4gIH07XG4gIFxuICAvKiBBcHBsaWNhdGlvbnMgdGFibGUgY29uZmlndXJhdGlvbiAqLyAgXG5cbiAgbGV0IGNvbHVtbnMgPSBbXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaXBfYWRkcmVzc1wiKSwgbmFtZTogJ2lwJywgZGF0YTogJ2lwJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJuYW1lXCIpLCBuYW1lOiAnbmFtZScsIGRhdGE6ICduYW1lJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAgdGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDEgfSxcbiAgICB7IGNvbHVtbk5hbWU6IGkxOG4oXCJtYWNfc3RhdHMubWFudWZhY3R1cmVyXCIpLCBuYW1lOiAnbWFudWZhY3R1cmVyJywgZGF0YTogJ21hbnVmYWN0dXJlcicsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwibWFjX2FkZHJlc3NcIiksIG5hbWU6ICdtYWNfYWRkcmVzcycsIGRhdGE6ICdtYWNfYWRkcmVzcycsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwib3NcIiksIG5hbWU6ICdvcycsIGRhdGE6ICdvcycsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwIHRleHQtY2VudGVyJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiaW5mb1wiKSwgbmFtZTogJ2luZm8nLCBkYXRhOiAnaW5mbycsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gICAgeyBjb2x1bW5OYW1lOiBpMThuKFwiZGV2aWNlXCIpLCBuYW1lOiAnZGV2aWNlJywgZGF0YTogJ2RldmljZScsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAyIH0sXG4gIF07XG5cbiAgbGV0IHRyYWZmaWNDb25maWcgPSBudG9wbmdfdXRpbGl0eS5jbG9uZShkZWZhdWx0RGF0YXRhYmxlQ29uZmlnKTtcbiAgdHJhZmZpY0NvbmZpZy5jb2x1bW5zX2NvbmZpZyA9IGNvbHVtbnM7XG4gIGNvbmZpZ19uZXR3b3JrX2Rpc2NvdmVyeS52YWx1ZSA9IHRyYWZmaWNDb25maWc7XG59XG48L3NjcmlwdD5cblxuIiwiPCEtLVxuICAoQykgMjAxMy0yMiAtIG50b3Aub3JnXG4tLT5cblxuPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wtbGctMTJcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjYXJkICBjYXJkLXNoYWRvd1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICAgICAgPExvYWRpbmcgdi1pZj1cImxvYWRpbmdcIj48L0xvYWRpbmc+XG4gICAgICAgICAgPGRpdiBpZD1cIm1hbmFnZV9jb25maWd1cmF0aW9uc19iYWNrdXBcIiA6Y2xhc3M9XCJbIGxvYWRpbmcgPyAnbnRvcG5nLWdyYXktb3V0JyA6ICcnIF1cIj5cbiAgICAgICAgICAgIDxEYXRhdGFibGUgcmVmPVwidGFibGVfbWFuYWdlX2NvbmZpZ3VyYXRpb25zX2JhY2t1cFwiIDppZD1cInRhYmxlX2NvbmZpZy5pZFwiIDprZXk9XCJ0YWJsZV9jb25maWcuZGF0YV91cmxcIlxuICAgICAgICAgICAgICA6dGFibGVfYnV0dG9ucz1cInRhYmxlX2NvbmZpZy50YWJsZV9idXR0b25zXCIgOmNvbHVtbnNfY29uZmlnPVwidGFibGVfY29uZmlnLmNvbHVtbnNfY29uZmlnXCJcbiAgICAgICAgICAgICAgOmRhdGFfdXJsPVwidGFibGVfY29uZmlnLmRhdGFfdXJsXCIgOnRhYmxlX2NvbmZpZz1cInRhYmxlX2NvbmZpZy50YWJsZV9jb25maWdcIj5cblxuICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90Om1lbnU+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgIDwvRGF0YXRhYmxlPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uQmVmb3JlTW91bnQgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIERhdGF0YWJsZSB9IGZyb20gXCIuL2RhdGF0YWJsZS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTG9hZGluZyB9IGZyb20gXCIuL2xvYWRpbmcudnVlXCJcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcbmNvbnN0IHRhYmxlX21hbmFnZV9jb25maWd1cmF0aW9uc19iYWNrdXAgPSByZWYobnVsbCk7XG5jb25zdCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L3N5c3RlbS9jb25maWd1cmF0aW9ucy9saXN0X2F2YWlsYWJsZV9iYWNrdXBzLmx1YWBcbmNvbnN0IHRhYmxlX2NvbmZpZyA9IHJlZih7fSlcbmNvbnN0IGxvYWRpbmcgPSByZWYoZmFsc2UpO1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgZGF0ZV9mb3JtYXQ6IFN0cmluZyxcbn0pO1xuXG5cbmNvbnN0IGZvcm1hdF9mbG93c19pY29uID0gZnVuY3Rpb24gKGRhdGEsIHJvd0RhdGEpIHtcbiAgY29uc3QgbXNfZGF0YSA9IGRhdGEgKiAxMDAwO1xuICBsZXQgZGF0ZV9mb3JtYXQgPSBcIkhIOk1NOlNTXCI7XG4gIGlmIChwcm9wcy5kYXRlX2Zvcm1hdCA9PSBcImxpdHRsZV9lbmRpYW5cIikge1xuICAgIGRhdGVfZm9ybWF0ID0gXCJERC9NTS9ZWVlZIFwiICsgZGF0ZV9mb3JtYXQ7XG4gIH0gZWxzZSBpZiAocHJvcHMuZGF0ZV9mb3JtYXQgPT0gXCJtaWRkbGVfZW5kaWFuXCIpIHtcbiAgICBkYXRlX2Zvcm1hdCA9IFwiTU0vREQvWVlZWSBcIiArIGRhdGVfZm9ybWF0O1xuICB9IGVsc2Uge1xuICAgIGRhdGVfZm9ybWF0ID0gXCJZWVlZL01NL0REIFwiICsgZGF0ZV9mb3JtYXQ7XG4gIH1cbiAgcmV0dXJuIG50b3BuZ191dGlsaXR5LmZyb21fdXRjX3RvX3NlcnZlcl9kYXRlX2Zvcm1hdChtc19kYXRhLCBkYXRlX2Zvcm1hdCk7XG59XG5cblxuY29uc3QgcmVsb2FkX3RhYmxlID0gKCkgPT4ge1xuICBsb2FkaW5nLnZhbHVlID0gdHJ1ZTtcbiAgdGFibGVfbWFuYWdlX2NvbmZpZ3VyYXRpb25zX2JhY2t1cC52YWx1ZS5yZWxvYWQoKTtcbiAgbG9hZGluZy52YWx1ZSA9IGZhbHNlO1xufVxuXG5vbkJlZm9yZU1vdW50KGFzeW5jICgpID0+IHtcbiAgYXdhaXQgc2V0X2RhdGF0YWJsZV9jb25maWcoKTtcbn0pO1xuXG5jb25zdCB0cmlnZ2VyX2Rvd25sb2FkID0gZnVuY3Rpb24gKHJvdykge1xuICB3aW5kb3cub3BlbihgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L3N5c3RlbS9jb25maWd1cmF0aW9ucy9kb3dubG9hZF9iYWNrdXAubHVhP2Vwb2NoPSR7cm93LmVwb2NofSZkb3dubG9hZD10cnVlYCk7XG59XG5cbmNvbnN0IGFkZF9hY3Rpb25fY29sdW1uID0gZnVuY3Rpb24gKHJvd0RhdGEpIHtcblxuICBsZXQgZG93bmxvYWRfYmFja3VwX2hhbmRsZXIgPSB7XG4gICAgaGFuZGxlcklkOiBcImRvd25sb2FkX2JhY2t1cF9oYW5kbGVyXCIsXG4gICAgb25DbGljazogKCkgPT4ge1xuICAgICAgdHJpZ2dlcl9kb3dubG9hZChyb3dEYXRhKTtcbiAgICB9LFxuICB9XG5cbiAgcmV0dXJuIERhdGFUYWJsZVV0aWxzLmNyZWF0ZUFjdGlvbkJ1dHRvbnMoW1xuICAgIHsgY2xhc3M6IGBwb2ludGVyYCwgaGFuZGxlcjogZG93bmxvYWRfYmFja3VwX2hhbmRsZXIsIGljb246ICdmYXMgZmEtZG93bmxvYWQgZmEtbGcnLCB0aXRsZTogaTE4bignZG93bmxvYWQnKSB9LFxuICBdKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gc2V0X2RhdGF0YWJsZV9jb25maWcoKSB7XG4gIGNvbnN0IGRhdGF0YWJsZUJ1dHRvbiA9IFtdO1xuXG4gIC8qIE1hbmFnZSB0aGUgYnV0dG9ucyBjbG9zZSB0byB0aGUgc2VhcmNoIGJveCAqL1xuICBkYXRhdGFibGVCdXR0b24ucHVzaCh7XG4gICAgdGV4dDogJzxpIGNsYXNzPVwiZmFzIGZhLXN5bmNcIj48L2k+JyxcbiAgICBjbGFzc05hbWU6ICdidG4tbGluaycsXG4gICAgYWN0aW9uOiBmdW5jdGlvbiAoZSwgZHQsIG5vZGUsIGNvbmZpZykge1xuICAgICAgcmVsb2FkX3RhYmxlKCk7XG4gICAgfVxuICB9KTtcblxuXG4gIGxldCBkZWZhdWx0RGF0YXRhYmxlQ29uZmlnID0ge1xuICAgIHRhYmxlX2J1dHRvbnM6IGRhdGF0YWJsZUJ1dHRvbixcbiAgICBkYXRhX3VybDogYCR7dXJsfWAsXG4gICAgZW5hYmxlX3NlYXJjaDogdHJ1ZSxcbiAgICBpZDogXCJtYW5hZ2VfY29uZmlndXJhdGlvbnNfYmFja3VwXCIsXG4gICAgdGFibGVfY29uZmlnOiB7XG4gICAgICBzZXJ2ZXJTaWRlOiB0cnVlLFxuICAgICAgcmVzcG9uc2l2ZTogZmFsc2UsXG4gICAgICBzY3JvbGxYOiB0cnVlLFxuICAgICAgY29sdW1uRGVmczogW1xuICAgICAgICB7IHR5cGU6IFwiZmlsZS1zaXplXCIsIHRhcmdldHM6IDAgfSxcbiAgICAgIF1cbiAgICB9XG4gIH07XG5cbiAgbGV0IGNvbHVtbnMgPSBbXTtcblxuICBjb2x1bW5zLnB1c2goXG4gICAge1xuICAgICAgY29sdW1uTmFtZTogX2kxOG4oXCJiYWNrdXBfZGF0ZVwiKSwgb3JkZXJhYmxlOiB0cnVlLCB0YXJnZXRzOiAwLCBuYW1lOiAnZXBvY2gnLCBkYXRhOiAnZXBvY2gnLCBjbGFzc05hbWU6ICd0ZXh0LWxlZnQnLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogKGRhdGEsIF8sIHJvd0RhdGEpID0+IHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdF9mbG93c19pY29uKGRhdGEsIHJvd0RhdGEpXG4gICAgICB9XG4gICAgfSwge1xuICAgIGNvbHVtbk5hbWU6IF9pMThuKFwiYWN0aW9uc1wiKSwgb3JkZXJhYmxlOiBmYWxzZSwgd2lkdGg6ICc1JScsIG5hbWU6ICdhY3Rpb25zJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCBvcmRlcmFibGU6IGZhbHNlLCByZXNwb25zaXZlUHJpb3JpdHk6IDAsIHJlbmRlcjogZnVuY3Rpb24gKF8sIHR5cGUsIHJvd0RhdGEpIHsgcmV0dXJuIGFkZF9hY3Rpb25fY29sdW1uKHJvd0RhdGEpIH1cbiAgfVxuICAgICxcbiAgKTtcblxuXG5cbiAgZGVmYXVsdERhdGF0YWJsZUNvbmZpZy5jb2x1bW5zX2NvbmZpZyA9IGNvbHVtbnM7XG4gIHRhYmxlX2NvbmZpZy52YWx1ZSA9IGRlZmF1bHREYXRhdGFibGVDb25maWc7XG59XG5cbjwvc2NyaXB0PlxuIiwiPCEtLSAoQykgMjAyMiAtIG50b3Aub3JnICAgICAtLT5cbjx0ZW1wbGF0ZT5cbjxtb2RhbCBAc2hvd2VkPVwic2hvd2VkKClcIiByZWY9XCJtb2RhbF9pZFwiPlxuICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPnt7dGl0bGV9fTwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Ym9keT5cbiAgICA8IS0tIFRhcmdldCBpbmZvcm1hdGlvbiwgaGVyZSBhbiBJUCBpcyBwdXQgLS0+XG4gXG5cbiAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cblx0ICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS0yXCIgPlxuICAgICAgICA8Yj57e19pMThuKFwiaWZfc3RhdHNfY29uZmlnLnNubXBfZGV2aWNlXCIpfX08L2I+XG5cdCAgICA8L2xhYmVsPlxuICAgICAgPGRpdiBjbGFzcz1cImNvbC0xMFwiPlxuXG5cdCAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfc25tcF9kZXZpY2VcIlxuICAgICAgXHRcdFx0ICBAc2VsZWN0X29wdGlvbj1cImNoYW5nZV9pbnRlcmZhY2VzKClcIlxuICAgICAgICAgICAgICA6b3B0aW9ucz1cInNubXBfZGV2aWNlc19saXN0XCI+XG4gICAgICAgIDwvU2VsZWN0U2VhcmNoPlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICBcbiAgICA8dGVtcGxhdGUgdi1pZj1cImVuYWJsZV9pbnRlcmZhY2VzID09IHRydWVcIj5cbiAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCI+XG5cdCAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tMlwiID5cbiAgICAgICAgPGI+e3tfaTE4bihcImlmX3N0YXRzX2NvbmZpZy5zbm1wX2ludGVyZmFjZVwiKX19PC9iPlxuXHQgICAgPC9sYWJlbD5cbiAgICAgIDxkaXYgY2xhc3M9XCJjb2wtMTBcIj5cblxuXHQgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cInNlbGVjdGVkX3NubXBfaW50ZXJmYWNlXCJcbiAgICAgICAgICAgICAgOm9wdGlvbnM9XCJzbm1wX2ludGVyZmFjZXNfbGlzdFwiPlxuICAgICAgICA8L1NlbGVjdFNlYXJjaD5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvdGVtcGxhdGU+XG5cbiAgICA8ZGl2ICBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCI+XG5cdCAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tMlwiID5cbiAgICAgICAgPGI+e3tfaTE4bihcImlmX3N0YXRzX2NvbmZpZy5tZXRyaWNcIil9fTwvYj5cblx0ICAgIDwvbGFiZWw+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtMTBcIj5cbiAgICAgICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfc25tcF9kZXZpY2VfbWV0cmljXCJcbiAgICAgICAgICAgIEBzZWxlY3Rfb3B0aW9uPVwiY2hhbmdlX2FjdGl2ZV90aHJlc2hvbGQoKVwiXG5cbiAgICAgICAgICAgIDpvcHRpb25zPVwic25tcF9tZXRyaWNfbGlzdFwiPlxuICAgICAgICAgIDwvU2VsZWN0U2VhcmNoPlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cblxuICAgIDwhLS0gRnJlcXVlbmN5IGluZm9ybWF0aW9uLCBhIGZyZXF1ZW5jeSBvZiAxIGRheSwgNSBtaW51dGUgb3IgMSBob3VyIGZvciBleGFtcGxlIC0tPlxuICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTJcIiA+XG4gICAgICAgIDxiPnt7X2kxOG4oXCJpZl9zdGF0c19jb25maWcuZnJlcXVlbmN5XCIpfX08L2I+XG4gICAgICA8L2xhYmVsPlxuICAgICAgPGRpdiBjbGFzcz1cImNvbC0xMFwiPlxuICAgICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfZnJlcXVlbmN5XCJcbiAgICAgICAgICA6b3B0aW9ucz1cImZyZXF1ZW5jeV9saXN0XCI+XG5cdFx0XHQgIDwvU2VsZWN0U2VhcmNoPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG5cbiAgICA8IS0tIFRocmVzaG9sZCBpbmZvcm1hdGlvbiwgbWF4aW11bSBhbW91bnQgb2YgYnl0ZXMgLS0+XG4gICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCIgc3R5bGU9XCJtYXJnaW4tdG9wOjNweFwiPlxuXHQgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTJcIiA+XG4gICAgICAgIDxiPnt7X2kxOG4oXCJpZl9zdGF0c19jb25maWcudGhyZXNob2xkXCIpfX08L2I+XG5cdCAgICA8L2xhYmVsPlxuICAgICAgPHRlbXBsYXRlIHYtaWY9XCJ2aXNpYmxlXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tM1wiPlxuICAgICAgICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJtZXRyaWNfdHlwZVwiXG4gICAgICAgICAgICA6b3B0aW9ucz1cIm1ldHJpY190eXBlX2FjdGl2ZV9saXN0XCI+XG4gICAgICAgICAgPC9TZWxlY3RTZWFyY2g+ICBcbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtM1wiIDpjbGFzcz1cIlsgbWV0cmljX3R5cGUuaWQgPT0gJ3Rocm91Z2hwdXQnID8gJ3AtMCcgOiAnJ11cIiA+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImJ0bi1ncm91cCBmbG9hdC1lbmQgYnRuLWdyb3VwLXRvZ2dsZVwiIGRhdGEtYnMtdG9nZ2xlPVwiYnV0dG9uc1wiPlxuICAgICAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCJtZXRyaWNfdHlwZS5pZCA9PSAndGhyb3VnaHB1dCcgJiYgbWV0cmljX3R5cGUuaWQgIT0gJ3BhY2tldHMnXCIgdi1mb3I9XCJtZWFzdXJlIGluIHRocm91Z2hwdXRfdGhyZXNob2xkX2xpc3RcIiA+XG4gICAgICAgICAgICAgIDxpbnB1dCA6dmFsdWU9XCJtZWFzdXJlLnZhbHVlXCIgOmlkPVwibWVhc3VyZS5pZFwiIHR5cGU9XCJyYWRpb1wiIGNsYXNzPVwiYnRuLWNoZWNrXCIgYXV0b2NvbXBsZXRlPVwib2ZmXCIgcmVmPVwidGhyZXNob2xkX21lYXN1cmVcIiBuYW1lPVwidGhyZXNob2xkX21lYXN1cmVcIj5cbiAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiYnRuIFwiIDppZD1cIm1lYXN1cmUuaWRcIiBAY2xpY2s9XCJzZXRfYWN0aXZlX3JhZGlvXCIgdi1iaW5kOmNsYXNzPVwiWyBtZWFzdXJlLmFjdGl2ZSA/ICdidG4tcHJpbWFyeSBhY3RpdmUnIDogJ2J0bi1zZWNvbmRhcnknIF1cIiA6Zm9yPVwibWVhc3VyZS5pZFwiPnt7IG1lYXN1cmUubGFiZWwgfX08L2xhYmVsPlxuICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwibWV0cmljX3R5cGUuaWQgPT0gJ3BlcmNlbnRhZ2UnICYmIG1ldHJpY190eXBlLmlkICE9ICdwYWNrZXRzJ1wiIHYtZm9yPVwibWVhc3VyZSBpbiBwZXJjZW50YWdlX3RocmVzaG9sZF9saXN0XCI+XG4gICAgICAgICAgICAgIDxpbnB1dCA6dmFsdWU9XCJtZWFzdXJlLnZhbHVlXCIgOmlkPVwibWVhc3VyZS5pZFwiIHR5cGU9XCJyYWRpb1wiIGNsYXNzPVwiYnRuLWNoZWNrXCIgYXV0b2NvbXBsZXRlPVwib2ZmXCIgcmVmPVwidGhyZXNob2xkX21lYXN1cmVcIiBuYW1lPVwidGhyZXNob2xkX21lYXN1cmVcIj5cbiAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiYnRuIFwiIDppZD1cIm1lYXN1cmUuaWRcIiBAY2xpY2s9XCJzZXRfYWN0aXZlX3JhZGlvXCIgdi1iaW5kOmNsYXNzPVwiWyBtZWFzdXJlLmFjdGl2ZSA/ICdidG4tcHJpbWFyeSBhY3RpdmUnIDogJ2J0bi1zZWNvbmRhcnknIF1cIiA6Zm9yPVwibWVhc3VyZS5pZFwiPnt7IG1lYXN1cmUubGFiZWwgfX08L2xhYmVsPlxuICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwibWV0cmljX3R5cGUuaWQgPT0gJ3ZvbHVtZScgJiYgbWV0cmljX3R5cGUuaWQgIT0gJ3BhY2tldHMnXCIgdi1mb3I9XCJtZWFzdXJlIGluIHZvbHVtZV90aHJlc2hvbGRfbGlzdFwiID5cbiAgICAgICAgICAgICAgPGlucHV0IDp2YWx1ZT1cIm1lYXN1cmUudmFsdWVcIiA6aWQ9XCJtZWFzdXJlLmlkXCIgdHlwZT1cInJhZGlvXCIgY2xhc3M9XCJidG4tY2hlY2tcIiBhdXRvY29tcGxldGU9XCJvZmZcIiByZWY9XCJ0aHJlc2hvbGRfbWVhc3VyZVwiIG5hbWU9XCJ0aHJlc2hvbGRfbWVhc3VyZVwiPlxuICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJidG4gXCIgOmlkPVwibWVhc3VyZS5pZFwiIEBjbGljaz1cInNldF9hY3RpdmVfcmFkaW9cIiB2LWJpbmQ6Y2xhc3M9XCJbIG1lYXN1cmUuYWN0aXZlID8gJ2J0bi1wcmltYXJ5IGFjdGl2ZScgOiAnYnRuLXNlY29uZGFyeScgXVwiIDpmb3I9XCJtZWFzdXJlLmlkXCI+e3sgbWVhc3VyZS5sYWJlbCB9fTwvbGFiZWw+XG4gICAgICAgICAgICA8L3RlbXBsYXRlPlxuXG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuXG5cbiAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCJtZXRyaWNfdHlwZS5pZCAhPSAncGFja2V0cydcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTIgYnRuLWdyb3VwIGZsb2F0LWVuZCBidG4tZ3JvdXAtdG9nZ2xlXCIgZGF0YS1icy10b2dnbGU9XCJidXR0b25zXCI+XG4gICAgICAgICAgPHRlbXBsYXRlIHYtZm9yPVwibWVhc3VyZSBpbiBzaWduX3RocmVzaG9sZF9saXN0XCIgPlxuICAgICAgICAgICAgPGlucHV0IDp2YWx1ZT1cIm1lYXN1cmUudmFsdWVcIiA6aWQ9XCJtZWFzdXJlLmlkXCIgdHlwZT1cInJhZGlvXCIgY2xhc3M9XCJidG4tY2hlY2tcIiBhdXRvY29tcGxldGU9XCJvZmZcIiByZWY9XCJ0aHJlc2hvbGRfc2lnblwiIG5hbWU9XCJ0aHJlc2hvbGRfc2lnblwiPlxuICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiYnRuIFwiIDppZD1cIm1lYXN1cmUuaWRcIiBAY2xpY2s9XCJzZXRfYWN0aXZlX3NpZ25fcmFkaW9cIiB2LWJpbmQ6Y2xhc3M9XCJbIG1lYXN1cmUuYWN0aXZlID8gJ2J0bi1wcmltYXJ5IGFjdGl2ZScgOiAnYnRuLXNlY29uZGFyeScgXVwiIDpmb3I9XCJtZWFzdXJlLmlkXCI+e3sgbWVhc3VyZS5sYWJlbCB9fTwvbGFiZWw+XG4gICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgPHRlbXBsYXRlIHYtZWxzZT5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTIgYnRuLWdyb3VwIGZsb2F0LWVuZCBidG4tZ3JvdXAtdG9nZ2xlXCIgZGF0YS1icy10b2dnbGU9XCJidXR0b25zXCI+XG4gICAgICAgICAgPHRlbXBsYXRlIHYtZm9yPVwibWVhc3VyZSBpbiBzaWduX2Fic29sdXRlX3ZhbHVlXCIgPlxuICAgICAgICAgICAgPGlucHV0IDp2YWx1ZT1cIm1lYXN1cmUudmFsdWVcIiA6aWQ9XCJtZWFzdXJlLmlkXCIgdHlwZT1cInJhZGlvXCIgY2xhc3M9XCJidG4tY2hlY2tcIiBhdXRvY29tcGxldGU9XCJvZmZcIiByZWY9XCJ0aHJlc2hvbGRfc2lnblwiIG5hbWU9XCJ0aHJlc2hvbGRfc2lnblwiPlxuICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiYnRuIFwiIDppZD1cIm1lYXN1cmUuaWRcIiB2LWJpbmQ6Y2xhc3M9XCJbIG1lYXN1cmUuYWJzb2x1dGVfdmFsdWUgPyAnYnRuLXByaW1hcnkgYWN0aXZlJyA6ICdidG4tc2Vjb25kYXJ5JyBdXCIgOmZvcj1cIm1lYXN1cmUuaWRcIj57eyBtZWFzdXJlLmxhYmVsIH19PC9sYWJlbD5cbiAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICBcbiAgICAgICAgXG4gICAgICA8L3RlbXBsYXRlPlxuXG4gICAgICA8ZGl2IDpjbGFzcz1cIlt2aXNpYmxlID8gJ2NvbC1zbS0yJyA6ICdjb2wtc20tOCddXCI+XG4gICAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwibWV0cmljX3R5cGUuaWQgPT0gJ3BlcmNlbnRhZ2UnXCI+XG4gICAgICAgICAgPGlucHV0IHZhbHVlPVwiMVwiIHJlZj1cInRocmVzaG9sZFwiIHR5cGU9XCJudW1iZXJcIiBuYW1lPVwidGhyZXNob2xkXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBtYXg9XCIxMDBcIiBtaW49XCIxXCIgcmVxdWlyZWQ+XG4gICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgIDx0ZW1wbGF0ZSB2LWVsc2U+IFxuICAgICAgICAgIDxpbnB1dCB2YWx1ZT1cIjFcIiByZWY9XCJ0aHJlc2hvbGRcIiB0eXBlPVwibnVtYmVyXCIgbmFtZT1cInRocmVzaG9sZFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgbWF4PVwiMTAyM1wiIG1pbj1cIjFcIiByZXF1aXJlZD5cbiAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgICAgPHRlbXBsYXRlIHYtaWY9XCJzZWxlY3RlZF9zbm1wX2RldmljZV9tZXRyaWMuaWQgIT0gJ3VzYWdlJyAmJiBtZXRyaWNfdHlwZS5pZCA9PSAncGVyY2VudGFnZSdcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm1lc3NhZ2UgYWxlcnQgYWxlcnQtd2FybmluZyBtdC0zXCI+XG4gICAgICAgICAge3sgX2kxOG4oXCJzaG93X2FsZXJ0cy5ob3N0X3J1bGVzX3BlcmNlbnRhZ2VcIikgfX1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L3RlbXBsYXRlPlxuICA8L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmZvb3Rlcj5cbiAgICA8Tm90ZUxpc3RcbiAgICA6bm90ZV9saXN0PVwibm90ZV9saXN0XCIgOmFkZF9zdWJfbm90ZXM9XCJ0cnVlXCIgOnN1Yl9ub3RlX2xpc3Q9XCJzdWJfbm90ZXNfbGlzdFwiPlxuICAgIDwvTm90ZUxpc3Q+XG4gICAgPHRlbXBsYXRlIHYtaWY9XCJpc19lZGl0X3BhZ2UgPT0gZmFsc2VcIj5cbiAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJhZGRfXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiAgPnt7X2kxOG4oJ2FkZCcpfX08L2J1dHRvbj5cbiAgICA8L3RlbXBsYXRlPlxuICAgIDx0ZW1wbGF0ZSB2LWVsc2U+XG4gICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiZWRpdF9cIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiID57e19pMThuKCdhcHBseScpfX08L2J1dHRvbj5cbiAgICA8L3RlbXBsYXRlPlxuICA8L3RlbXBsYXRlPlxuPC9tb2RhbD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uQmVmb3JlTW91bnQgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIG1vZGFsIH0gZnJvbSBcIi4vbW9kYWwudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdFNlYXJjaCB9IGZyb20gXCIuL3NlbGVjdC1zZWFyY2gudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE5vdGVMaXN0IH0gZnJvbSBcIi4vbm90ZS1saXN0LnZ1ZVwiO1xuaW1wb3J0IHJlZ2V4VmFsaWRhdGlvbiBmcm9tIFwiLi4vdXRpbGl0aWVzL3JlZ2V4LXZhbGlkYXRpb24uanNcIjtcbmltcG9ydCBOdG9wVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9udG9wLXV0aWxzXCI7XG5cbmNvbnN0IGlucHV0X21hY19saXN0ID0gcmVmKFwiXCIpO1xuY29uc3QgaW5wdXRfdHJpZ2dlcl9hbGVydHMgPSByZWYoXCJcIik7XG5cbmNvbnN0IG1vZGFsX2lkID0gcmVmKG51bGwpO1xuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFsnYWRkJywnZWRpdCddKTtcbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5jb25zdCBpbml0X2Z1bmMgPSByZWYobnVsbCk7XG5jb25zdCBkZWxldGVfcm93ID0gcmVmKG51bGwpO1xuY29uc3Qgc25tcF9tZXRyaWNfbGlzdCA9IHJlZihbXSlcbmNvbnN0IHNubXBfZGV2aWNlc19saXN0ID0gcmVmKFtdKVxubGV0IHNubXBfaW50ZXJmYWNlc19saXN0ID0gcmVmKFtdKVxubGV0IGVuYWJsZV9pbnRlcmZhY2VzID0gcmVmKHRydWUpO1xuY29uc3Qgc25tcF9pbnRlcmZhY2VzX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L3NubXAvZGV2aWNlL2F2YWlsYWJsZV9pbnRlcmZhY2VzLmx1YWBcblxuY29uc3QgZnJlcXVlbmN5X2xpc3QgPSByZWYoW10pXG5jb25zdCB0aHJlc2hvbGRfbWVhc3VyZSA9IHJlZihudWxsKVxuY29uc3QgdGhyZXNob2xkX3NpZ24gPSByZWYobnVsbClcbmNvbnN0IHNlbGVjdGVkX21ldHJpYyA9IHJlZih7fSlcbmNvbnN0IHNlbGVjdGVkX3NubXBfZGV2aWNlID0gcmVmKHt9KVxuY29uc3Qgc2VsZWN0ZWRfc25tcF9pbnRlcmZhY2UgPSByZWYoe30pXG5cbmNvbnN0IHNlbGVjdGVkX3NubXBfZGV2aWNlX21ldHJpYyA9IHJlZih7fSlcbmNvbnN0IHNlbGVjdGVkX2ZyZXF1ZW5jeSA9IHJlZih7fSlcbmNvbnN0IGRpc2FibGVfYWRkID0gcmVmKHRydWUpXG5jb25zdCBtZXRyaWNfdHlwZSA9IHJlZih7fSlcbmNvbnN0IHZpc2libGUgPSByZWYodHJ1ZSlcbmNvbnN0IHJ1bGVfdHlwZSA9IHJlZihcInNubXBcIik7XG5jb25zdCBpc19lZGl0X3BhZ2UgPSByZWYoZmFsc2UpXG5jb25zdCBwYWdlX2NzcmZfID0gcmVmKG51bGwpO1xubGV0IG1ldHJpY190eXBlX2FjdGl2ZV9saXN0ID0gcmVmKFtdKTtcblxubGV0IHRpdGxlID0gIF9pMThuKCdpZl9zdGF0c19jb25maWcuYWRkX2hvc3RfcnVsZXNfdGl0bGUnKTtcblxuXG5jb25zdCBub3RlX2xpc3QgPSBbXG4gIF9pMThuKCdpZl9zdGF0c19jb25maWcubm90ZV9zbm1wX2RldmljZV9ydWxlcy5ub3RlXzEnKSxcbiAgX2kxOG4oJ2lmX3N0YXRzX2NvbmZpZy5ub3RlX3NubXBfZGV2aWNlX3J1bGVzLm5vdGVfMicpLFxuICBfaTE4bignaWZfc3RhdHNfY29uZmlnLm5vdGVfc25tcF9kZXZpY2VfcnVsZXMubm90ZV8zJyksXG4gIF9pMThuKCdpZl9zdGF0c19jb25maWcubm90ZV8zJyksXG4gIF9pMThuKCdpZl9zdGF0c19jb25maWcubm90ZV80Jylcbl1cblxuY29uc3Qgc3ViX25vdGVzX2xpc3QgPSBbXG4gIF9pMThuKCdpZl9zdGF0c19jb25maWcubm90ZV81Jylcbl07XG5cbmNvbnN0IG1ldHJpY190eXBlX2xpc3QgPSByZWYoW1xuICB7IHRpdGxlOiBfaTE4bigndm9sdW1lJyksIGxhYmVsOiBfaTE4bigndm9sdW1lJyksIGlkOiAndm9sdW1lJywgYWN0aXZlOiB0cnVlIH0sXG4gIHsgdGl0bGU6IF9pMThuKCd0aHJvdWdocHV0JyksIGxhYmVsOiBfaTE4bigndGhyb3VnaHB1dCcpLCBpZDogJ3Rocm91Z2hwdXQnLCBhY3RpdmU6IGZhbHNlIH0sXG4gIHsgdGl0bGU6IF9pMThuKCdwZXJjZW50YWdlJyksIGxhYmVsOiBfaTE4bigncGVyY2VudGFnZScpLCBpZDogJ3BlcmNlbnRhZ2UnLCBhY3RpdmU6IGZhbHNlIH0sXG4gIHsgdGl0bGU6IF9pMThuKCdwYWNrZXRzJyksIGxhYmVsOiBfaTE4bigncGFja2V0cycpLCBpZDogJ3BhY2tldHMnLCBhY3RpdmU6IGZhbHNlIH1cbl0pXG5cbmNvbnN0IHZvbHVtZV90aHJlc2hvbGRfbGlzdCA9IHJlZihbXG4gIHsgdGl0bGU6IF9pMThuKCdrYicpLCBsYWJlbDogX2kxOG4oJ2tiJyksIGlkOiAna2InLCB2YWx1ZTogMTAyNCwgYWN0aXZlOiBmYWxzZSB9LFxuICB7IHRpdGxlOiBfaTE4bignbWInKSwgbGFiZWw6IF9pMThuKCdtYicpLCBpZDogJ21iJywgdmFsdWU6IDEwNDg1NzYsIGFjdGl2ZTogZmFsc2UgfSxcbiAgeyB0aXRsZTogX2kxOG4oJ2diJyksIGxhYmVsOiBfaTE4bignZ2InKSwgaWQ6ICdnYicsIHZhbHVlOiAxMDczNzQxODI0LCBhY3RpdmU6IHRydWUsIGRlZmF1bHRfYWN0aXZlOiB0cnVlfSxcbl0pO1xuXG5jb25zdCB0aHJvdWdocHV0X3RocmVzaG9sZF9saXN0ID0gcmVmKFtcbiAgeyB0aXRsZTogX2kxOG4oJ2ticHMnKSwgbGFiZWw6IF9pMThuKCdrYnBzJyksIGlkOiAna2JwcycsIHZhbHVlOiAxMDAwLCBhY3RpdmU6IGZhbHNlIH0sXG4gIHsgdGl0bGU6IF9pMThuKCdtYnBzJyksIGxhYmVsOiBfaTE4bignbWJwcycpLCBpZDogJ21icHMnLCB2YWx1ZTogMTAwMDAwMCwgYWN0aXZlOiBmYWxzZSB9LFxuICB7IHRpdGxlOiBfaTE4bignZ2JwcycpLCBsYWJlbDogX2kxOG4oJ2dicHMnKSwgaWQ6ICdnYnBzJywgdmFsdWU6IDEwMDAwMDAwMDAsIGFjdGl2ZTogdHJ1ZSwgZGVmYXVsdF9hY3RpdmU6IHRydWV9LFxuXSk7XG5cbmNvbnN0IHNpZ25fdGhyZXNob2xkX2xpc3QgPSByZWYoW1xuICB7IHRpdGxlOiBcIitcIiwgbGFiZWw6IFwiPlwiLCBpZDogJ3BsdXMnLCB2YWx1ZTogMSwgYWN0aXZlOiBmYWxzZSwgYWJzb2x1dGVfdmFsdWU6IHRydWUgfSxcbiAgeyB0aXRsZTogXCItXCIsIGxhYmVsOiBcIjxcIiwgaWQ6ICdtaW51cycsIHZhbHVlOiAtMSwgYWN0aXZlOiB0cnVlLCBkZWZhdWx0X2FjdGl2ZTogdHJ1ZSB9LFxuXSk7XG5cbmNvbnN0IHNpZ25fYWJzb2x1dGVfdmFsdWUgPSByZWYoW1xuICB7IHRpdGxlOiBcIitcIiwgbGFiZWw6IFwiPlwiLCBpZDogJ3BsdXMnLCB2YWx1ZTogMSwgYWN0aXZlOiB0cnVlLCBhYnNvbHV0ZV92YWx1ZTogdHJ1ZSB9LFxuXSk7XG5cbmNvbnN0IHBlcmNlbnRhZ2VfdGhyZXNob2xkX2xpc3QgPSBbXG4gIHsgdGl0bGU6IFwiK1wiLCBsYWJlbDogXCIlXCIsIGlkOiAncGx1cycsIHZhbHVlOiAxLCBhY3RpdmU6IHRydWUgfSxcbl1cblxuXG5jb25zdCBob3N0ID0gcmVmKG51bGwpXG5jb25zdCB0aHJlc2hvbGQgPSByZWYobnVsbClcblxuY29uc3Qgc2hvd2VkID0gKCkgPT4ge307XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICBpZmlkX2xpc3Q6IEFycmF5LFxuICBzbm1wX2RldmljZXNfbGlzdDogQXJyYXksXG4gIHNubXBfbWV0cmljX2xpc3Q6IEFycmF5LFxuICBmcmVxdWVuY3lfbGlzdDogQXJyYXksXG4gIGluaXRfZnVuYzogRnVuY3Rpb24sXG4gIHBhZ2VfY3NyZjogU3RyaW5nLFxufSk7XG5cbmNvbnN0IHJlc3RfcGFyYW1zID0ge1xuICBjc3JmOiBwcm9wcy5wYWdlX2NzcmZcbn1cblxuZnVuY3Rpb24gcmVzZXRfcmFkaW9fc2VsZWN0aW9uKHJhZGlvX2FycmF5KSB7XG5cbiAgcmFkaW9fYXJyYXkuZm9yRWFjaCgoaXRlbSkgPT4gaXRlbS5hY3RpdmUgPSBpdGVtLmRlZmF1bHRfYWN0aXZlID09IHRydWUgKTtcbn1cblxuLyoqXG4gKiBcbiAqIFJlc2V0IGZpZWxkcyBpbiBtb2RhbCBmb3JtIFxuICovXG5jb25zdCByZXNldF9tb2RhbF9mb3JtID0gYXN5bmMgZnVuY3Rpb24oKSB7XG5cbiAgaG9zdC52YWx1ZSA9IFwiXCI7XG4gIHNlbGVjdGVkX21ldHJpYy52YWx1ZSA9IHNubXBfbWV0cmljX2xpc3QudmFsdWVbMF07XG4gIHNlbGVjdGVkX3NubXBfZGV2aWNlLnZhbHVlID0gbnVsbDtcbiAgc2VsZWN0ZWRfc25tcF9kZXZpY2UudmFsdWUgPSBzbm1wX2RldmljZXNfbGlzdC52YWx1ZVswXTtcbiAgY2hhbmdlX2ludGVyZmFjZXMoKTtcblxuICBzZWxlY3RlZF9zbm1wX2RldmljZV9tZXRyaWMudmFsdWUgPSBzbm1wX21ldHJpY19saXN0LnZhbHVlWzBdO1xuICBjaGFuZ2VfYWN0aXZlX3RocmVzaG9sZCgpXG4gIFxuICBzZWxlY3RlZF9mcmVxdWVuY3kudmFsdWUgPSBmcmVxdWVuY3lfbGlzdC52YWx1ZVswXTtcbiAgbWV0cmljX3R5cGUudmFsdWUgPSBtZXRyaWNfdHlwZV9saXN0LnZhbHVlWzBdO1xuXG4gIC8vIHJlc2V0IG1ldHJpY190eXBlX2xpc3RcbiAgbWV0cmljX3R5cGVfbGlzdC52YWx1ZS5mb3JFYWNoKCh0KSA9PiB0LmFjdGl2ZSA9IGZhbHNlKTtcbiAgbWV0cmljX3R5cGVfbGlzdC52YWx1ZVswXS5hY3RpdmUgPSB0cnVlO1xuICBcbiAgcmVzZXRfcmFkaW9fc2VsZWN0aW9uKHZvbHVtZV90aHJlc2hvbGRfbGlzdC52YWx1ZSk7XG4gIHJlc2V0X3JhZGlvX3NlbGVjdGlvbih0aHJvdWdocHV0X3RocmVzaG9sZF9saXN0LnZhbHVlKTtcbiAgcmVzZXRfcmFkaW9fc2VsZWN0aW9uKHNpZ25fdGhyZXNob2xkX2xpc3QudmFsdWUpO1xuXG4gIHJ1bGVfdHlwZS52YWx1ZSA9IFwic25tcFwiO1xuXG4gIGRpc2FibGVfYWRkLnZhbHVlID0gdHJ1ZTtcbiAgZW5hYmxlX2ludGVyZmFjZXMudmFsdWUgPSBmYWxzZTtcblxuICB0aHJlc2hvbGQudmFsdWUudmFsdWUgPSAxO1xuICBpc19lZGl0X3BhZ2UudmFsdWUgPSBmYWxzZTtcbiAgdGl0bGUgPSBfaTE4bignaWZfc3RhdHNfY29uZmlnLmFkZF9ob3N0X3J1bGVzX3RpdGxlJyk7XG5cbn1cblxuXG5cblxuLyoqXG4gKiBcbiAqIFNldCByb3cgdG8gZWRpdCBcbiAqL1xuY29uc3Qgc2V0X3Jvd190b19lZGl0ID0gKHJvdykgPT4ge1xuICBpZihyb3cgIT0gbnVsbCkge1xuICAgIGlzX2VkaXRfcGFnZS52YWx1ZSA9IHRydWU7XG4gICAgdGl0bGUgPSBfaTE4bignaWZfc3RhdHNfY29uZmlnLmVkaXRfaG9zdF9ydWxlc190aXRsZScpO1xuXG4gICAgZGlzYWJsZV9hZGQudmFsdWUgPSBmYWxzZTtcblxuICAgIHNubXBfZGV2aWNlc19saXN0LnZhbHVlLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgIGlmKGl0ZW0ubGFiZWxfdG9faW5zZXJ0ID09IHJvdy5kZXZpY2UpXG4gICAgICAgIHNlbGVjdGVkX3NubXBfZGV2aWNlLnZhbHVlID0gaXRlbTtcbiAgICB9IClcblxuICAgIC8vIHNldCB0aHJlc2hvbGQgc2lnblxuICAgIHNpZ25fdGhyZXNob2xkX2xpc3QudmFsdWUuZm9yRWFjaCgodCkgPT4ge1xuICAgICAgdC5hY3RpdmUgPSAodC52YWx1ZSA9PSByb3cudGhyZXNob2xkX3NpZ24pXG4gICAgfSlcblxuICAgIHNubXBfbWV0cmljX2xpc3QudmFsdWUuZm9yRWFjaCgodCkgPT4ge1xuICAgICAgaWYodC5pZCA9PSByb3cubWV0cmljKVxuICAgICAgICBzZWxlY3RlZF9zbm1wX2RldmljZV9tZXRyaWMudmFsdWUgPSB0O1xuICAgIH0pXG5cbiAgICAvLyBzZXQgdGhyZXNob2xkXG4gICAgaWYocm93Lm1ldHJpY190eXBlID09ICd2b2x1bWUnKVxuICAgICAgdm9sdW1lX3RocmVzaG9sZF9saXN0LnZhbHVlLmZvckVhY2goKHQpID0+IHtcbiAgICAgICAgaWYgKCAocm93LnRocmVzaG9sZCAlIHQudmFsdWUpID09IDAgKSB7XG4gICAgICAgICAgbGV0IHJvd190aHJlc2hvbGRfdmFsdWUgPSByb3cudGhyZXNob2xkIC8gdC52YWx1ZTtcbiAgICAgICAgICBpZiggcm93X3RocmVzaG9sZF92YWx1ZSA8IDEwMjQpIHtcbiAgICAgICAgICAgIHQuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgIHRocmVzaG9sZC52YWx1ZS52YWx1ZSA9IHJvd190aHJlc2hvbGRfdmFsdWUgPT0gMCA/IDEgOiByb3dfdGhyZXNob2xkX3ZhbHVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0LmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0LmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgIGVsc2UgaWYocm93Lm1ldHJpY190eXBlID09ICd0aHJvdWdocHV0Jykge1xuICAgICAgcm93LnRocmVzaG9sZCA9IHJvdy50aHJlc2hvbGQgKiA4O1xuICAgICAgdGhyb3VnaHB1dF90aHJlc2hvbGRfbGlzdC52YWx1ZS5mb3JFYWNoKCh0KSA9PiB7XG4gICAgICAgICAgaWYgKCAocm93LnRocmVzaG9sZCAlIHQudmFsdWUpID09IDAgKSB7XG4gICAgICAgICAgICBsZXQgcm93X3RocmVzaG9sZF92YWx1ZSA9IHJvdy50aHJlc2hvbGQgLyB0LnZhbHVlO1xuICAgICAgICAgICAgaWYoIHJvd190aHJlc2hvbGRfdmFsdWUgPCAxMDAwKSB7XG4gICAgICAgICAgICAgIHQuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgdGhyZXNob2xkLnZhbHVlLnZhbHVlID0gcm93X3RocmVzaG9sZF92YWx1ZSA9PSAwID8gMSA6IHJvd190aHJlc2hvbGRfdmFsdWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0LmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0LmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcblxuICAgICAgLy9wZXJjZW50YWdlIGNhc2VcbiAgICAgIHRocmVzaG9sZC52YWx1ZS52YWx1ZSA9IHJvdy50aHJlc2hvbGQgKiByb3cudGhyZXNob2xkX3NpZ247XG5cbiAgICB9XG4gICAgY2hhbmdlX2FjdGl2ZV90aHJlc2hvbGQoKTtcbiAgICBtZXRyaWNfdHlwZV9hY3RpdmVfbGlzdC52YWx1ZS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICBpZihpdGVtLmlkID09IHJvdy5tZXRyaWNfdHlwZSkge1xuICAgICAgICBtZXRyaWNfdHlwZS52YWx1ZSA9IGl0ZW07XG4gICAgICAgIGl0ZW0uYWN0aXZlID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBcbiAgICAgICAgaXRlbS5hY3RpdmUgPSBmYWxzZTtcbiAgICB9KVxuXG4gICAgLy8gc2V0IHJ1bGVfdHlwZVxuICAgIHJ1bGVfdHlwZS52YWx1ZSA9IHJvdy5ydWxlX3R5cGU7XG4gICAgc25tcF9kZXZpY2VzX2xpc3QudmFsdWUuZm9yRWFjaCgodCkgPT4ge1xuICAgICAgaWYodC5sYWJlbCA9PSByb3cuZGV2aWNlKVxuICAgICAgICBzZWxlY3RlZF9zbm1wX2RldmljZS52YWx1ZSA9IHQ7XG4gICAgfSlcblxuICAgIGZyZXF1ZW5jeV9saXN0LnZhbHVlLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgIGlmKGl0ZW0uaWQgPT0gcm93LmZyZXF1ZW5jeSlcbiAgICAgICAgc2VsZWN0ZWRfZnJlcXVlbmN5LnZhbHVlID0gaXRlbTtcbiAgICB9KTtcblxuICAgIGNoYW5nZV9pbnRlcmZhY2VzKHJvdy5kZXZpY2VfcG9ydCk7XG4gIFxuICB9XG59XG5cbmNvbnN0IHNob3cgPSAocm93KSA9PiB7XG4gIGlmKHJvdyAhPSBudWxsKSB7XG4gICAgc2V0X3Jvd190b19lZGl0KHJvdyk7XG4gIH0gZWxzZSB7XG4gICAgcmVzZXRfbW9kYWxfZm9ybSgpO1xuICB9XG4gIG1vZGFsX2lkLnZhbHVlLnNob3coKTtcbn07XG5cblxuY29uc3Qgc2V0X2FjdGl2ZV9zaWduX3JhZGlvID0gKHNlbGVjdGVkX3JhZGlvKSA9PiB7XG4gIGNvbnN0IGlkID0gc2VsZWN0ZWRfcmFkaW8udGFyZ2V0LmlkO1xuICBzaWduX3RocmVzaG9sZF9saXN0LnZhbHVlLmZvckVhY2goKG1lYXN1cmUpID0+IHtcbiAgICAobWVhc3VyZS5pZCA9PT0gaWQpID8gbWVhc3VyZS5hY3RpdmUgPSB0cnVlIDogbWVhc3VyZS5hY3RpdmUgPSBmYWxzZTtcbiAgfSlcblxufVxuXG4vKipcbiAqIFxuICogU2V0IHRoZSBtZXRyaWMgdHlwZVxuICovXG5jb25zdCBzZXRfYWN0aXZlX3JhZGlvID0gKHNlbGVjdGVkX3JhZGlvKSA9PiB7XG4gIGNvbnN0IGlkID0gc2VsZWN0ZWRfcmFkaW8udGFyZ2V0LmlkO1xuXG4gIGlmKG1ldHJpY190eXBlLnZhbHVlLmlkID09ICd0aHJvdWdocHV0Jykge1xuICAgIHRocm91Z2hwdXRfdGhyZXNob2xkX2xpc3QudmFsdWUuZm9yRWFjaCgobWVhc3VyZSkgPT4ge1xuICAgICAgKG1lYXN1cmUuaWQgPT09IGlkKSA/IG1lYXN1cmUuYWN0aXZlID0gdHJ1ZSA6IG1lYXN1cmUuYWN0aXZlID0gZmFsc2U7XG4gICAgfSlcbiAgfSBlbHNlIGlmIChtZXRyaWNfdHlwZS52YWx1ZS5pZCA9PSAndm9sdW1lJykge1xuICAgIHZvbHVtZV90aHJlc2hvbGRfbGlzdC52YWx1ZS5mb3JFYWNoKChtZWFzdXJlKSA9PiB7XG4gICAgICAobWVhc3VyZS5pZCA9PT0gaWQpID8gbWVhc3VyZS5hY3RpdmUgPSB0cnVlIDogbWVhc3VyZS5hY3RpdmUgPSBmYWxzZTtcbiAgICB9KVxuICB9IGVsc2UgaWYgKG1ldHJpY190eXBlLnZhbHVlLmlkID09ICdwZXJjZW50YWdlJyl7XG4gICAgcGVyY2VudGFnZV90aHJlc2hvbGRfbGlzdC5mb3JFYWNoKChtZWFzdXJlKSA9PiB7XG4gICAgICAobWVhc3VyZS5pZCA9PT0gaWQpID8gbWVhc3VyZS5hY3RpdmUgPSB0cnVlIDogbWVhc3VyZS5hY3RpdmUgPSBmYWxzZTtcbiAgICB9KVxuICB9IGVsc2UgaWYgKG1ldHJpY190eXBlLnZhbHVlLmlkID09ICdwYWNrZXRzJyl7XG4gICAgXG4gIH0gXG4gIFxufVxuXG5cbmFzeW5jIGZ1bmN0aW9uIGNoYW5nZV9pbnRlcmZhY2VzKGludGVyZmFjZV9pZCkge1xuICBjb25zdCB1cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoc25tcF9pbnRlcmZhY2VzX3VybCtcIj9ob3N0PVwiK3NlbGVjdGVkX3NubXBfZGV2aWNlLnZhbHVlLmxhYmVsX3RvX2luc2VydCwgcmVzdF9wYXJhbXMpXG4gIGxldCBpbnRlcmZhY2VzX2xpc3QgPSBbXVxuICBhd2FpdCAkLmdldCh1cmwsIGZ1bmN0aW9uKHJzcCwgc3RhdHVzKXtcbiAgICBpbnRlcmZhY2VzX2xpc3QgPSByc3AucnNwO1xuICB9KTtcbiAgbGV0IHJlc3VsdF9pbnRlcmZhY2VzID0gW11cblxuICBpbnRlcmZhY2VzX2xpc3QuZm9yRWFjaChpZmFjZSA9PiB7XG4gICAgaWYoaWZhY2UubmFtZSAhPSBudWxsICYmIGlmYWNlLm5hbWUgIT0gXCJcIiAmJiBpZmFjZS5uYW1lICE9IGlmYWNlLmlkKVxuICAgICAgcmVzdWx0X2ludGVyZmFjZXMucHVzaCh7bGFiZWw6IGlmYWNlLm5hbWUgKyBcIiAoXCIraWZhY2UuaWQrXCIpXCIsIGlkOiBpZmFjZS5pZCwgbmFtZTogaWZhY2UubmFtZSB9KVxuICAgIGVsc2VcbiAgICAgIHJlc3VsdF9pbnRlcmZhY2VzLnB1c2goe2xhYmVsOiBpZmFjZS5pZCwgaWQ6IGlmYWNlLmlkLCAgbmFtZTogaWZhY2UuaWR9KVxuICB9KVxuICByZXN1bHRfaW50ZXJmYWNlcy5wdXNoKHtsYWJlbDogXCIqXCIsIGlkOlwiKlwiLCBuYW1lOlwiKlwifSlcbiAgcmVzdWx0X2ludGVyZmFjZXMuc29ydChmdW5jdGlvbihhLGIpIHtyZXR1cm4gKGEubGFiZWwudG9Mb3dlckNhc2UoKSA+IGIubGFiZWwudG9Mb3dlckNhc2UoKSA/IDEgOiAoYS5sYWJlbC50b0xvd2VyQ2FzZSgpIDwgYi5sYWJlbC50b0xvd2VyQ2FzZSgpKSA/IC0xIDogMCk7fSk7XG5cbiAgaWYgKGludGVyZmFjZV9pZCAhPSBudWxsKVxuICAgIHJlc3VsdF9pbnRlcmZhY2VzLmZvckVhY2goKHQpID0+IHtcbiAgICAgIGlmKHQuaWQgPT0gaW50ZXJmYWNlX2lkKVxuICAgICAgICBzZWxlY3RlZF9zbm1wX2ludGVyZmFjZS52YWx1ZSA9IHQ7XG4gICAgfSlcbiAgc25tcF9pbnRlcmZhY2VzX2xpc3QudmFsdWUgPSByZXN1bHRfaW50ZXJmYWNlcztcbiAgLy8gZGVidWdnZXI7XG4gIGlmKHNlbGVjdGVkX3NubXBfZGV2aWNlLnZhbHVlLmxhYmVsX3RvX2luc2VydCA9PSBcImFsbFwiKVxuICAgIGVuYWJsZV9pbnRlcmZhY2VzLnZhbHVlID0gZmFsc2U7XG4gIGVsc2VcbiAgICBlbmFibGVfaW50ZXJmYWNlcy52YWx1ZSA9IHRydWU7XG5cbn1cblxuZnVuY3Rpb24gY2hhbmdlX2FjdGl2ZV90aHJlc2hvbGQoKSB7XG4gIGxldCBsaXN0X21ldHJpY3NfYWN0aXZlID0gW107XG4gIGxldCBsaXN0X3NpZ25fYWN0aXZlID0gW11cbiAgaWYoc2VsZWN0ZWRfc25tcF9kZXZpY2VfbWV0cmljLnZhbHVlLmlkID09ICdwYWNrZXRzJyAgfHwgc2VsZWN0ZWRfc25tcF9kZXZpY2VfbWV0cmljLnZhbHVlLmlkID09ICd1c2FnZScpIHtcbiAgICBtZXRyaWNfdHlwZV9saXN0LnZhbHVlLmZvckVhY2goKHQpID0+IHtcbiAgICAgIGlmKHQuaWQgIT0gJ3BlcmNlbnRhZ2UnKVxuICAgICAgICB0LmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgZWxzZSB7XG4gICAgICAgIHQuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgbGlzdF9tZXRyaWNzX2FjdGl2ZS5wdXNoKHQpO1xuICAgICAgICBtZXRyaWNfdHlwZS52YWx1ZSA9IHQ7XG4gICAgICB9XG4gICAgfSlcbiAgfSBlbHNlIGlmIChzZWxlY3RlZF9zbm1wX2RldmljZV9tZXRyaWMudmFsdWUuaWQgPT0gJ2Vycm9ycycgKSB7XG4gICAgbWV0cmljX3R5cGVfbGlzdC52YWx1ZS5mb3JFYWNoKCh0KSA9PiB7XG4gICAgICBpZih0LmlkICE9ICdwYWNrZXRzJylcbiAgICAgICAgdC5hY3RpdmUgPSBmYWxzZTtcbiAgICAgIGVsc2Uge1xuICAgICAgICB0LmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIGxpc3RfbWV0cmljc19hY3RpdmUucHVzaCh0KTtcbiAgICAgICAgbWV0cmljX3R5cGUudmFsdWUgPSB0O1xuICAgICAgfVxuICAgIH0pXG5cbiAgfSBlbHNlIHtcbiAgICBtZXRyaWNfdHlwZV9saXN0LnZhbHVlLmZvckVhY2goKHQpID0+IHtcbiAgICAgIGlmKHQuaWQgPT0gJ3BhY2tldHMnKVxuICAgICAgICB0LmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgZWxzZSB7XG4gICAgICAgIGxpc3RfbWV0cmljc19hY3RpdmUucHVzaCh0KTtcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cblxuICBtZXRyaWNfdHlwZV9hY3RpdmVfbGlzdC52YWx1ZSA9IGxpc3RfbWV0cmljc19hY3RpdmU7XG59XG5cblxuXG4vKipcbiAqIEZ1bmN0aW9uIHRvIGFkZCBydWxlIHRvIHJ1bGVzIGxpc3RcbiAqL1xuY29uc3QgYWRkXyA9IChpc19lZGl0KSA9PiB7XG4gIGxldCB0bXBfaG9zdCA9ICcnXG4gIHJ1bGVfdHlwZS52YWx1ZSA9ICdzbm1wJztcbiAgdG1wX2hvc3QgPSBob3N0LnZhbHVlO1xuXG4gIGNvbnN0IHRtcF9mcmVxdWVuY3kgPSBzZWxlY3RlZF9mcmVxdWVuY3kudmFsdWUuaWQ7XG4gIGNvbnN0IHRtcF9tZXRyaWMgPSBzZWxlY3RlZF9zbm1wX2RldmljZV9tZXRyaWMudmFsdWUuaWQ7XG4gIGNvbnN0IHRtcF9tZXRyaWNfbGFiZWwgPSBzZWxlY3RlZF9zbm1wX2RldmljZV9tZXRyaWMudmFsdWUubGFiZWw7XG4gIGNvbnN0IHRtcF9kZXZpY2UgPSBzZWxlY3RlZF9zbm1wX2RldmljZS52YWx1ZS5sYWJlbF90b19pbnNlcnQ7XG4gIGNvbnN0IHRtcF9kZXZpY2VfbGFiZWwgPSBzZWxlY3RlZF9zbm1wX2RldmljZS52YWx1ZS5sYWJlbDtcbiAgY29uc3QgdG1wX2RldmljZV9pZmlkID0gc2VsZWN0ZWRfc25tcF9pbnRlcmZhY2UudmFsdWUgPT0gbnVsbCB8fCBPYmplY3QuZW50cmllcyhzZWxlY3RlZF9zbm1wX2ludGVyZmFjZS52YWx1ZSkubGVuZ3RoID09PSAwID8gXCIqXCI6IHNlbGVjdGVkX3NubXBfaW50ZXJmYWNlLnZhbHVlLmlkO1xuICBjb25zdCB0bXBfZGV2aWNlX2lmaWRfbGFiZWwgPSBzZWxlY3RlZF9zbm1wX2ludGVyZmFjZS52YWx1ZSA9PSBudWxsIHx8IE9iamVjdC5lbnRyaWVzKHNlbGVjdGVkX3NubXBfaW50ZXJmYWNlLnZhbHVlKS5sZW5ndGggPT09IDAgPyBcIipcIjpzZWxlY3RlZF9zbm1wX2ludGVyZmFjZS52YWx1ZS5sYWJlbDtcbiAgLy8gZGVidWdnZXI7XG4gIC8vIGNvbnNvbGUubG9nKHRocmVzaG9sZClcbiAgbGV0IHRtcF9tZXRyaWNfdHlwZSA9IG1ldHJpY190eXBlLnZhbHVlLmlkO1xuICBsZXQgYmFzaWNfdmFsdWU7XG4gIGxldCBtZWFzdXJlX3VuaXRfbGFiZWw7XG4gIGxldCBiYXNpY19zaWduX3ZhbHVlO1xuICBsZXQgdG1wX3RocmVzaG9sZDtcbiAgbGV0IHRtcF9zaWduX3ZhbHVlO1xuXG4gIGlmKHZpc2libGUudmFsdWUgPT09IGZhbHNlKSB7XG4gICAgdG1wX21ldHJpY190eXBlID0gJydcbiAgICB0bXBfZXh0cmFfbWV0cmljID0gJydcbiAgICB0bXBfdGhyZXNob2xkID0gdGhyZXNob2xkLnZhbHVlLnZhbHVlO1xuICB9XG4gIGlmKHRtcF9tZXRyaWNfdHlwZSA9PSAndGhyb3VnaHB1dCcpIHtcblxuICAgIHNpZ25fdGhyZXNob2xkX2xpc3QudmFsdWUuZm9yRWFjaCgobWVhc3VyZSkgPT4geyBpZihtZWFzdXJlLmFjdGl2ZSkgYmFzaWNfc2lnbl92YWx1ZSA9IG1lYXN1cmUudmFsdWU7IH0pXG4gICAgdG1wX3NpZ25fdmFsdWUgPSBwYXJzZUludChiYXNpY19zaWduX3ZhbHVlKTtcbiAgICB0aHJvdWdocHV0X3RocmVzaG9sZF9saXN0LnZhbHVlLmZvckVhY2goKG1lYXN1cmUpID0+IHsgaWYobWVhc3VyZS5hY3RpdmUpIHsgYmFzaWNfdmFsdWUgPSBtZWFzdXJlLnZhbHVlOyBtZWFzdXJlX3VuaXRfbGFiZWwgPSBtZWFzdXJlLmxhYmVsOyB9fSlcbiAgICB0bXBfdGhyZXNob2xkID0gYmFzaWNfdmFsdWUgKiBwYXJzZUludCh0aHJlc2hvbGQudmFsdWUudmFsdWUpIC8gODtcbiAgICAvKiBUaGUgdGhyb3VnaHB1dCBpcyBpbiBiaXQsIHRoZSB2b2x1bWUgaW4gQnl0ZXMhISAqL1xuICB9IGVsc2UgaWYodG1wX21ldHJpY190eXBlID09ICd2b2x1bWUnKSB7XG4gICAgc2lnbl90aHJlc2hvbGRfbGlzdC52YWx1ZS5mb3JFYWNoKChtZWFzdXJlKSA9PiB7IGlmKG1lYXN1cmUuYWN0aXZlKSBiYXNpY19zaWduX3ZhbHVlID0gbWVhc3VyZS52YWx1ZTsgfSlcbiAgICB0bXBfc2lnbl92YWx1ZSA9IHBhcnNlSW50KGJhc2ljX3NpZ25fdmFsdWUpO1xuICAgIHZvbHVtZV90aHJlc2hvbGRfbGlzdC52YWx1ZS5mb3JFYWNoKChtZWFzdXJlKSA9PiB7IGlmKG1lYXN1cmUuYWN0aXZlKSB7YmFzaWNfdmFsdWUgPSBtZWFzdXJlLnZhbHVlOyBtZWFzdXJlX3VuaXRfbGFiZWwgPSBtZWFzdXJlLmxhYmVsO30gfSlcbiAgICB0bXBfdGhyZXNob2xkID0gYmFzaWNfdmFsdWUgKiBwYXJzZUludCh0aHJlc2hvbGQudmFsdWUudmFsdWUpO1xuICB9IGVsc2UgaWYodG1wX21ldHJpY190eXBlID09ICdwZXJjZW50YWdlJykge1xuICAgIHNpZ25fdGhyZXNob2xkX2xpc3QudmFsdWUuZm9yRWFjaCgobWVhc3VyZSkgPT4geyBpZihtZWFzdXJlLmFjdGl2ZSkgYmFzaWNfc2lnbl92YWx1ZSA9IG1lYXN1cmUudmFsdWU7IH0pXG4gICAgdG1wX3NpZ25fdmFsdWUgPSBwYXJzZUludChiYXNpY19zaWduX3ZhbHVlKTtcbiAgICB0bXBfdGhyZXNob2xkID0gdG1wX3NpZ25fdmFsdWUgKiBwYXJzZUludCh0aHJlc2hvbGQudmFsdWUudmFsdWUpO1xuICAgIG1lYXN1cmVfdW5pdF9sYWJlbCA9IFwiJVwiO1xuICB9IGVsc2Uge1xuICAgIHRtcF9zaWduX3ZhbHVlID0gMTtcbiAgICB0bXBfdGhyZXNob2xkID0gcGFyc2VJbnQodGhyZXNob2xkLnZhbHVlLnZhbHVlKTtcbiAgfVxuICBsZXQgZW1pdF9uYW1lID0gJ2FkZCc7XG5cbiAgaWYoaXNfZWRpdCA9PSB0cnVlKSBcbiAgICBlbWl0X25hbWUgPSAnZWRpdCc7XG5cbiAgZW1pdChlbWl0X25hbWUsIHsgXG4gICAgZnJlcXVlbmN5OiB0bXBfZnJlcXVlbmN5LCBcbiAgICBtZXRyaWM6IHRtcF9tZXRyaWMsXG4gICAgbWV0cmljX2xhYmVsOiB0bXBfbWV0cmljX2xhYmVsLFxuICAgIHRocmVzaG9sZDogdG1wX3RocmVzaG9sZCxcbiAgICBtZXRyaWNfdHlwZTogdG1wX21ldHJpY190eXBlLFxuICAgIHNubXBfZGV2aWNlOiB0bXBfZGV2aWNlLFxuICAgIHNubXBfZGV2aWNlX2xhYmVsOiB0bXBfZGV2aWNlX2xhYmVsLFxuICAgIHNubXBfZGV2aWNlX3BvcnQ6IHRtcF9kZXZpY2VfaWZpZCxcbiAgICBzbm1wX2RldmljZV9wb3J0X2xhYmVsOiB0bXBfZGV2aWNlX2lmaWRfbGFiZWwsXG4gICAgcnVsZV90aHJlc2hvbGRfc2lnbjogdG1wX3NpZ25fdmFsdWUsXG4gICAgc25tcF90aHJlc2hvbGRfdmFsdWU6IHRocmVzaG9sZC52YWx1ZS52YWx1ZSxcbiAgICBzbm1wX3RocmVzaG9sZF91bml0OiBtZWFzdXJlX3VuaXRfbGFiZWwsXG4gICAgc25tcF9tZXRyaWNfdHlwZV9sYWJlbDogbWV0cmljX3R5cGUudmFsdWUudGl0bGVcbiAgfSk7XG4gIFxuICAgIFxuXG4gIGNsb3NlKCk7XG59O1xuXG5cbmNvbnN0IGVkaXRfID0gKCkgPT4ge1xuICBhZGRfKHRydWUpO1xufVxuXG5jb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgbW9kYWxfaWQudmFsdWUuY2xvc2UoKTtcbn07XG5cbmNvbnN0IGZvcm1hdF9zbm1wX2RldmljZXNfbGlzdCA9IGZ1bmN0aW9uKF9zbm1wX2RldmljZXNfbGlzdCkge1xuICBsZXQgZGV2aWNlc19saXN0ID0gW107XG4gIF9zbm1wX2RldmljZXNfbGlzdC5kYXRhLmZvckVhY2goaXRlbSA9PiB7XG4gICAgaWYoaXRlbS5jb2x1bW5fbmFtZSAhPSBudWxsICYmIGl0ZW0uY29sdW1uX25hbWUgIT0gXCJcIiAmJiBpdGVtLmNvbHVtbl9uYW1lICE9IFwiYWxsXCIpXG4gICAgICBkZXZpY2VzX2xpc3QucHVzaCh7bGFiZWwgOiBpdGVtLmNvbHVtbl9uYW1lICsgXCIgKFwiK2l0ZW0uY29sdW1uX2tleStcIilcIiAsIGxhYmVsX3RvX2luc2VydDogaXRlbS5jb2x1bW5fa2V5fSk7XG4gICAgZWxzZSB7XG4gICAgICBpZiAoaXRlbS5jb2x1bW5fbmFtZSA9PSBcImFsbFwiKVxuICAgICAgICBkZXZpY2VzX2xpc3QucHVzaCh7bGFiZWwgOiBpdGVtLmNvbHVtbl9rZXksIGxhYmVsX3RvX2luc2VydDogaXRlbS5jb2x1bW5fbmFtZX0pO1xuICAgICAgZWxzZVxuICAgICAgICBkZXZpY2VzX2xpc3QucHVzaCh7bGFiZWwgOiBpdGVtLmNvbHVtbl9rZXksIGxhYmVsX3RvX2luc2VydDogaXRlbS5jb2x1bW5fa2V5fSk7XG4gICAgfVxuXG4gIH0pXG4gIGNvbnN0IGlwMmludCA9IHN0ciA9PiBzdHJcbiAgICAuc3BsaXQoJy4nKVxuICAgIC5yZWR1Y2UoKGFjYywgYnl0ZSkgPT4gYWNjICsgYnl0ZS5wYWRTdGFydCgzLCAwKSwgJycpO1xuXG4gIGRldmljZXNfbGlzdC5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtyZXR1cm4gKGEubGFiZWwudG9Mb3dlckNhc2UoKSA+IGIubGFiZWwudG9Mb3dlckNhc2UoKSA/IDEgOiAoYS5sYWJlbC50b0xvd2VyQ2FzZSgpIDwgYi5sYWJlbC50b0xvd2VyQ2FzZSgpKSA/IC0xIDogMCk7fSk7XG4gIHJldHVybiBkZXZpY2VzX2xpc3Q7XG59XG5cbmNvbnN0IG1ldHJpY3NMb2FkZWQgPShfc25tcF9kZXZpY2VzX2xpc3QsIF9zbm1wX21ldHJpY19saXN0LCBwYWdlX2NzcmYpID0+IHtcblxuICBzbm1wX2RldmljZXNfbGlzdC52YWx1ZSA9IGZvcm1hdF9zbm1wX2RldmljZXNfbGlzdChfc25tcF9kZXZpY2VzX2xpc3QpO1xuICBzbm1wX21ldHJpY19saXN0LnZhbHVlID0gX3NubXBfbWV0cmljX2xpc3Q7XG4gIGZyZXF1ZW5jeV9saXN0LnZhbHVlID0gcHJvcHMuZnJlcXVlbmN5X2xpc3Q7XG4gIHNlbGVjdGVkX2ZyZXF1ZW5jeS52YWx1ZSA9IGZyZXF1ZW5jeV9saXN0LnZhbHVlWzBdO1xuICBzZWxlY3RlZF9tZXRyaWMudmFsdWUgPSBzbm1wX21ldHJpY19saXN0LnZhbHVlWzBdO1xuICBwYWdlX2NzcmZfLnZhbHVlID0gcGFnZV9jc3JmO1xuICBcbiAgXG59XG5cblxub25CZWZvcmVNb3VudCgoKSA9PiB7XG4gIG1ldHJpY190eXBlX2xpc3QudmFsdWUuZm9yRWFjaCgodCkgPT4ge1xuICAgIGlmKHQuYWN0aXZlKSB7XG4gICAgICBtZXRyaWNfdHlwZS52YWx1ZSA9IHQ7XG4gICAgfVxuXG4gIH0pXG59KVxuXG5kZWZpbmVFeHBvc2UoeyBzaG93LCBjbG9zZSwgbWV0cmljc0xvYWRlZCB9KTtcblxuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbjwvc3R5bGU+XG4iLCI8IS0tXG4gIChDKSAyMDEzLTIyIC0gbnRvcC5vcmdcbi0tPlxuXG48dGVtcGxhdGU+XG48ZGl2IGNsYXNzPVwicm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgPGRpdiBjbGFzcz1cImNhcmRcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJvdmVybGF5IGp1c3RpZnktY29udGVudC1jZW50ZXIgYWxpZ24taXRlbXMtY2VudGVyIHBvc2l0aW9uLWFic29sdXRlIGgtMTAwIHctMTAwXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0LWNlbnRlclwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJzcGlubmVyLWJvcmRlciB0ZXh0LXByaW1hcnkgbXQtNVwiIHJvbGU9XCJzdGF0dXNcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3Itb25seSBwb3NpdGlvbi1hYnNvbHV0ZVwiPkxvYWRpbmcuLi48L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJtYi00XCI+XG4gICAgICAgICAgPGg0Pnt7IF9pMThuKCdpZl9zdGF0c19jb25maWcuc25tcF9ydWxlcycpIH19PC9oND5cbiAgICAgICAgPC9kaXY+XG4gICAgICBcdDxkaXYgaWQ9XCJob3N0X3J1bGVzXCI+XG4gICAgICAgICAgPE1vZGFsRGVsZXRlQ29uZmlybSByZWY9XCJtb2RhbF9kZWxldGVfY29uZmlybVwiXG4gICAgICAgICAgICA6dGl0bGU9XCJ0aXRsZV9kZWxldGVcIlxuICAgICAgICAgICAgOmJvZHk9XCJib2R5X2RlbGV0ZVwiXG4gICAgICAgICAgICBAZGVsZXRlPVwiZGVsZXRlX3Jvd1wiPlxuICAgICAgICAgIDwvTW9kYWxEZWxldGVDb25maXJtPlxuICAgICAgICAgIDxNb2RhbEFkZFNOTVBSdWxlcyByZWY9XCJtb2RhbF9hZGRfc25tcF9kZXZpY2VfcnVsZVwiXG4gICAgICAgICAgICA6ZnJlcXVlbmN5X2xpc3Q9XCJmcmVxdWVuY3lfbGlzdFwiXG4gICAgICAgICAgICA6aW5pdF9mdW5jPVwiaW5pdF9lZGl0XCJcbiAgICAgICAgICAgIEBhZGQ9XCJhZGRfaG9zdF9ydWxlXCJcbiAgICAgICAgICAgIEBlZGl0PVwiZWRpdFwiPlxuICAgICAgICAgIDwvTW9kYWxBZGRTTk1QUnVsZXM+XG4gICAgICAgICAgXG4gICAgICAgICAgPERhdGF0YWJsZSByZWY9XCJ0YWJsZV9ob3N0X3J1bGVzXCJcbiAgICAgICAgICAgIDp0YWJsZV9idXR0b25zPVwiaG9zdF9ydWxlc190YWJsZV9jb25maWcudGFibGVfYnV0dG9uc1wiXG4gICAgICAgICAgICA6Y29sdW1uc19jb25maWc9XCJob3N0X3J1bGVzX3RhYmxlX2NvbmZpZy5jb2x1bW5zX2NvbmZpZ1wiXG4gICAgICAgICAgICA6ZGF0YV91cmw9XCJob3N0X3J1bGVzX3RhYmxlX2NvbmZpZy5kYXRhX3VybFwiXG4gICAgICAgICAgICA6ZW5hYmxlX3NlYXJjaD1cImhvc3RfcnVsZXNfdGFibGVfY29uZmlnLmVuYWJsZV9zZWFyY2hcIlxuICAgICAgICAgICAgOnRhYmxlX2NvbmZpZz1cImhvc3RfcnVsZXNfdGFibGVfY29uZmlnLnRhYmxlX2NvbmZpZ1wiPlxuICAgICAgICAgIDwvRGF0YXRhYmxlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQtZm9vdGVyXCI+XG4gICAgICAgIDxOb3RlTGlzdFxuICAgICAgICA6bm90ZV9saXN0PVwibm90ZV9saXN0XCI+XG4gICAgICAgIDwvTm90ZUxpc3Q+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uQmVmb3JlTW91bnQsIG9uVW5tb3VudGVkIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRhdGFibGUgfSBmcm9tIFwiLi9kYXRhdGFibGUudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE5vdGVMaXN0IH0gZnJvbSBcIi4vbm90ZS1saXN0LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbERlbGV0ZUNvbmZpcm0gfSBmcm9tIFwiLi9tb2RhbC1kZWxldGUtY29uZmlybS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxBZGRTTk1QUnVsZXMgfSBmcm9tIFwiLi9tb2RhbC1hZGQtc25tcC1kZXZpY2UtcnVsZXMudnVlXCI7XG5pbXBvcnQgTnRvcFV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvbnRvcC11dGlsc1wiO1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgcGFnZV9jc3JmOiBTdHJpbmcsXG4gIGlmaWQ6IFN0cmluZyxcbn0pXG5cbmNvbnN0IHRhYmxlX2hvc3RfcnVsZXMgPSByZWYobnVsbClcbmNvbnN0IG1vZGFsX2RlbGV0ZV9jb25maXJtID0gcmVmKG51bGwpXG5jb25zdCBtb2RhbF9hZGRfc25tcF9kZXZpY2VfcnVsZSA9IHJlZihudWxsKVxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcbmNvbnN0IHJvd190b19kZWxldGUgPSByZWYoe30pXG5jb25zdCByb3dfdG9fZWRpdCA9IHJlZih7fSlcblxuXG5jb25zdCBzbm1wX21ldHJpY191cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9zbm1wL21ldHJpYy9ydWxlX21ldHJpY3MubHVhYFxuY29uc3Qgc25tcF9kZXZpY2VzX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2UvZ2V0X3NubXBfZGV2aWNlc19saXN0Lmx1YWBcblxuY29uc3QgZGF0YV91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9zbm1wL2RldmljZS9ydWxlcy5sdWFgXG5jb25zdCBhZGRfcnVsZV91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2FkZC9zbm1wL2RldmljZS9ydWxlLmx1YWBcbmNvbnN0IHJlbW92ZV9ydWxlX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZGVsZXRlL3NubXAvZGV2aWNlL3J1bGUubHVhYFxuXG5jb25zdCBub3RlX2xpc3QgPSBbXG4gIF9pMThuKCdpZl9zdGF0c19jb25maWcuZ2VuZXJpY19ub3Rlc18xJyksXG4gIF9pMThuKCdpZl9zdGF0c19jb25maWcuZ2VuZXJpY19ub3Rlc18yJyksXG4gIF9pMThuKCdpZl9zdGF0c19jb25maWcuZ2VuZXJpY19ub3Rlc18zJyksXG5dXG5cbmNvbnN0IHJlc3RfcGFyYW1zID0ge1xuICBpZmlkOiBwcm9wcy5pZmlkLFxuICBjc3JmOiBwcm9wcy5wYWdlX2NzcmZcbn1cblxubGV0IGhvc3RfcnVsZXNfdGFibGVfY29uZmlnID0ge31cbmxldCB0aXRsZV9kZWxldGUgPSBfaTE4bignaWZfc3RhdHNfY29uZmlnLmRlbGV0ZV9ob3N0X3J1bGVzX3RpdGxlJylcbmxldCB0aXRsZV9lZGl0ID0gX2kxOG4oJ2lmX3N0YXRzX2NvbmZpZy5lZGl0X2xvY2FsX25ldHdvcmtfcnVsZXMnKVxubGV0IGJvZHlfZGVsZXRlID0gX2kxOG4oJ2lmX3N0YXRzX2NvbmZpZy5kZWxldGVfaG9zdF9ydWxlc19kZXNjcmlwdGlvbicpXG5sZXQgc25tcF9tZXRyaWNfbGlzdCA9IFtdXG5sZXQgc25tcF9pbnRlcmZhY2VzX2xpc3QgPSBbXVxubGV0IHNubXBfZGV2aWNlc19saXN0ID0gW11cbmxldCBpbnRlcmZhY2VfbWV0cmljX2xpc3QgPSBbXVxuXG5cbmNvbnN0IGZyZXF1ZW5jeV9saXN0ID0gW1xuICB7IHRpdGxlOiBpMThuKCdzaG93X2FsZXJ0cy41X21pbicpLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMuNV9taW4nKSwgaWQ6ICc1bWluJyB9LFxuICB7IHRpdGxlOiBpMThuKCdzaG93X2FsZXJ0cy5ob3VybHknKSwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLmhvdXJseScpLCBpZDogJ2hvdXInIH0sXG4gIHsgdGl0bGU6IGkxOG4oJ3Nob3dfYWxlcnRzLmRhaWx5JyksIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5kYWlseScpLCBpZDogJ2RheScgfVxuXVxuXG5jb25zdCBzaG93X2RlbGV0ZV9kaWFsb2cgPSBmdW5jdGlvbihyb3cpIHtcbiAgcm93X3RvX2RlbGV0ZS52YWx1ZSA9IHJvdztcbiAgbW9kYWxfZGVsZXRlX2NvbmZpcm0udmFsdWUuc2hvdygpO1xufVxuXG5jb25zdCBsb2FkX3NlbGVjdGVkX2ZpZWxkID0gZnVuY3Rpb24ocm93KSB7XG4gIHJvd190b19lZGl0LnZhbHVlID0gcm93O1xuICBcbiAgcm93X3RvX2RlbGV0ZS52YWx1ZSA9IHJvdztcblxuICBtb2RhbF9hZGRfc25tcF9kZXZpY2VfcnVsZS52YWx1ZS5zaG93KHJvdyk7XG5cbn1cblxuYXN5bmMgZnVuY3Rpb24gZWRpdChwYXJhbXMpIHtcbiAgYXdhaXQgZGVsZXRlX3JvdygpO1xuXG4gIGF3YWl0IGFkZF9ob3N0X3J1bGUocGFyYW1zKTtcbn1cblxuY29uc3QgaW5pdF9lZGl0ID0gZnVuY3Rpb24oKSB7XG4gIGNvbnN0IHJvdyA9IHJvd190b19lZGl0LnZhbHVlO1xuICByb3dfdG9fZWRpdC52YWx1ZSA9IG51bGw7XG4gIHJldHVybiByb3c7XG59XG5cbmNvbnN0IGRlc3Ryb3lfdGFibGUgPSBmdW5jdGlvbigpIHtcbiAgdGFibGVfaG9zdF9ydWxlcy52YWx1ZS5kZXN0cm95X3RhYmxlKCk7XG59XG5cbmNvbnN0IHJlbG9hZF90YWJsZSA9IGZ1bmN0aW9uKCkge1xuICB0YWJsZV9ob3N0X3J1bGVzLnZhbHVlLnJlbG9hZCgpO1xufVxuXG5jb25zdCBkZWxldGVfcm93ID0gYXN5bmMgZnVuY3Rpb24oKSB7XG4gIGNvbnN0IHJvdyA9IHJvd190b19kZWxldGUudmFsdWU7XG4gIGNvbnN0IHVybCA9IE50b3BVdGlscy5idWlsZFVSTChyZW1vdmVfcnVsZV91cmwsIHtcbiAgICAuLi5yZXN0X3BhcmFtcyxcbiAgICAuLi57XG4gICAgICBydWxlX2lkOiByb3cuaWQsXG4gICAgICBydWxlX3R5cGU6IHJvdy5ydWxlX3R5cGVcbiAgICB9XG4gIH0pXG4gIFxuICBhd2FpdCAkLnBvc3QodXJsLCBmdW5jdGlvbihyc3AsIHN0YXR1cyl7XG4gICAgcmVsb2FkX3RhYmxlKCk7XG4gIH0pO1xufVxuXG5jb25zdCBhZGRfaG9zdF9ydWxlID0gYXN5bmMgZnVuY3Rpb24ocGFyYW1zKSB7XG4gIGNvbnN0IHVybCA9IE50b3BVdGlscy5idWlsZFVSTChhZGRfcnVsZV91cmwsIHtcbiAgICAuLi5yZXN0X3BhcmFtcyxcbiAgICAuLi5wYXJhbXNcbiAgfSlcbiAgXG4gIGF3YWl0ICQucG9zdCh1cmwsIGZ1bmN0aW9uKHJzcCwgc3RhdHVzKXtcbiAgICByZWxvYWRfdGFibGUoKTtcbiAgfSk7XG59XG5cblxuY29uc3QgYWRkX2FjdGlvbl9jb2x1bW4gPSBmdW5jdGlvbiAocm93RGF0YSkge1xuICBsZXQgZGVsZXRlX2hhbmRsZXIgPSB7XG5cdCAgaGFuZGxlcklkOiBcImRlbGV0ZV9ob3N0XCIsXHQgIFxuXHQgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgIHNob3dfZGVsZXRlX2RpYWxvZyhyb3dEYXRhKTtcblx0ICB9LFxuXHR9O1xuXG4gIGxldCBlZGl0X2hhbmRsZXIgPSB7XG4gICAgaGFuZGxlcklkOiBcImVkaXRfcnVsZVwiLFxuICAgIG9uQ2xpY2s6ICgpID0+IHtcbiAgICAgIGxvYWRfc2VsZWN0ZWRfZmllbGQocm93RGF0YSk7XG4gICAgfSxcbiAgfVxuICBcbiAgcmV0dXJuIERhdGFUYWJsZVV0aWxzLmNyZWF0ZUFjdGlvbkJ1dHRvbnMoW1xuICAgIHsgY2xhc3M6IGBwb2ludGVyYCwgaGFuZGxlcjogZWRpdF9oYW5kbGVyLCBpY29uOiAnZmEtZWRpdCcsIHRpdGxlOiBpMThuKCdlZGl0JykgfSxcblx0ICB7IGNsYXNzOiBgcG9pbnRlcmAsIGhhbmRsZXI6IGRlbGV0ZV9oYW5kbGVyLCBpY29uOiAnZmEtdHJhc2gnLCB0aXRsZTogaTE4bignZGVsZXRlJykgfSxcblx0XSk7XG59XG5cbmNvbnN0IGZvcm1hdF9tZXRyaWMgPSBmdW5jdGlvbihkYXRhLCByb3dEYXRhKSB7XG4gIGxldCBtZXRyaWNfbGFiZWwgPSBkYXRhICBcbiAgaWYgKHJvd0RhdGEubWV0cmljX2xhYmVsICYmIHJvd0RhdGEubWV0cmljX2xhYmVsICE9IGRhdGEgJiYgcm93RGF0YS5tZXRyaWNfbGFiZWwgIT0gXCJcIikge1xuICAgIG1ldHJpY19sYWJlbCA9IHJvd0RhdGEubWV0cmljX2xhYmVsO1xuICB9IFxuICBcbiAgXG4gIHJldHVybiBtZXRyaWNfbGFiZWxcbn1cblxuY29uc3QgZm9ybWF0X2ZyZXF1ZW5jeSA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgbGV0IGZyZXF1ZW5jeV90aXRsZSA9ICcnXG4gIGZyZXF1ZW5jeV9saXN0LmZvckVhY2goKGZyZXF1ZW5jeSkgPT4ge1xuICAgIGlmKGRhdGEgPT0gZnJlcXVlbmN5LmlkKVxuICAgICAgZnJlcXVlbmN5X3RpdGxlID0gZnJlcXVlbmN5LnRpdGxlO1xuICB9KVxuXG4gIHJldHVybiBmcmVxdWVuY3lfdGl0bGVcbn1cblxuY29uc3QgZm9ybWF0X3RocmVzaG9sZCA9IGZ1bmN0aW9uKGRhdGEsIHJvd0RhdGEpIHtcbiAgbGV0IGZvcm1hdHRlZF9kYXRhID0gcGFyc2VJbnQoZGF0YSk7XG4gIGxldCB0aHJlc2hvbGRfc2lnbiA9IFwiPiBcIjtcblxuICBpZigocm93RGF0YS50aHJlc2hvbGRfc2lnbikgJiYgKHJvd0RhdGEudGhyZXNob2xkX3NpZ24gPT0gJy0xJykpXG4gICAgdGhyZXNob2xkX3NpZ24gPSBcIjwgXCJcblxuICBpZigocm93RGF0YS5tZXRyaWNfdHlwZSkgJiYgKHJvd0RhdGEubWV0cmljX3R5cGUgPT0gJ3Rocm91Z2hwdXQnKSkge1xuICAgIGZvcm1hdHRlZF9kYXRhID0gdGhyZXNob2xkX3NpZ24gKyBOdG9wVXRpbHMuYml0c1RvU2l6ZV9ub19jb21tYShkYXRhICogOClcbiAgfSBlbHNlIGlmKChyb3dEYXRhLm1ldHJpY190eXBlKSAmJiAocm93RGF0YS5tZXRyaWNfdHlwZSA9PSAndm9sdW1lJykpIHtcbiAgICBmb3JtYXR0ZWRfZGF0YSA9IHRocmVzaG9sZF9zaWduICsgTnRvcFV0aWxzLmJ5dGVzVG9TaXplKGRhdGEpO1xuICB9IGVsc2UgaWYoKHJvd0RhdGEubWV0cmljX3R5cGUpICYmIChyb3dEYXRhLm1ldHJpY190eXBlID09ICdwZXJjZW50YWdlJykpe1xuICAgIGlmIChkYXRhIDwgMCkge1xuICAgICAgZGF0YSA9IGRhdGEgKiAoLTEpO1xuICAgIH1cbiAgICBmb3JtYXR0ZWRfZGF0YSA9IHRocmVzaG9sZF9zaWduICsgTnRvcFV0aWxzLmZwZXJjZW50KGRhdGEpO1xuICB9IGVsc2Uge1xuICAgIGZvcm1hdHRlZF9kYXRhID0gdGhyZXNob2xkX3NpZ24gKyBkYXRhO1xuICB9XG5cbiAgcmV0dXJuIGZvcm1hdHRlZF9kYXRhXG59XG5cblxuY29uc3QgZm9ybWF0X3RhcmdldCA9IGZ1bmN0aW9uKGRhdGEsIHJvd0RhdGEpIHtcbiAgcmV0dXJuIHJvd0RhdGEuZGV2aWNlX2xhYmVsO1xufVxuXG5jb25zdCBmb3JtYXRfaW50ZXJmYWNlID0gZnVuY3Rpb24oZGF0YSwgcm93RGF0YSkge1xuICByZXR1cm4gcm93RGF0YS5kZXZpY2VfcG9ydF9sYWJlbDtcbn1cblxuY29uc3QgZ2V0X3NubXBfbWV0cmljX2xpc3QgPSBhc3luYyBmdW5jdGlvbigpIHtcbiAgY29uc3QgdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKHNubXBfbWV0cmljX3VybCwgcmVzdF9wYXJhbXMpXG4gIFxuICBhd2FpdCAkLmdldCh1cmwsIGZ1bmN0aW9uKHJzcCwgc3RhdHVzKXtcbiAgICBzbm1wX21ldHJpY19saXN0ID0gcnNwLnJzcDtcbiAgfSk7XG59XG5cblxuY29uc3QgZ2V0X3NubXBfZGV2aWNlc19saXN0ID0gYXN5bmMgZnVuY3Rpb24oKSB7XG4gIHJlc3RfcGFyYW1zLnZlcmJvc2UgPSB0cnVlXG4gIGNvbnN0IHVybCA9IE50b3BVdGlscy5idWlsZFVSTChzbm1wX2RldmljZXNfdXJsLCByZXN0X3BhcmFtcylcbiAgYXdhaXQgJC5nZXQodXJsLCBmdW5jdGlvbihyc3AsIHN0YXR1cyl7XG4gICAgc25tcF9kZXZpY2VzX2xpc3QgPSByc3AucnNwO1xuICB9KTtcbiAgc25tcF9kZXZpY2VzX2xpc3QuZGF0YS5wdXNoKHtjb2x1bW5fa2V5OiBcIipcIixjb2x1bW5fbmFtZTogXCJhbGxcIiB9KVxufVxuXG5jb25zdCBzdGFydF9kYXRhdGFibGUgPSBmdW5jdGlvbigpIHtcbiAgY29uc3QgZGF0YXRhYmxlQnV0dG9uID0gW107XG5cbiAgLyogTWFuYWdlIHRoZSBidXR0b25zIGNsb3NlIHRvIHRoZSBzZWFyY2ggYm94ICovXG4gIGRhdGF0YWJsZUJ1dHRvbi5wdXNoKHtcbiAgICB0ZXh0OiAnPGkgY2xhc3M9XCJmYXMgZmEtc3luY1wiPjwvaT4nLFxuICAgIGNsYXNzTmFtZTogJ2J0bi1saW5rJyxcbiAgICBhY3Rpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlbG9hZF90YWJsZSgpO1xuICAgIH1cbiAgfSwge1xuICAgIHRleHQ6ICc8aSBjbGFzcz1cImZhcyBmYS1wbHVzXCI+PC9pPicsXG4gICAgY2xhc3NOYW1lOiAnYnRuLWxpbmsnLFxuICAgIGFjdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgbW9kYWxfYWRkX3NubXBfZGV2aWNlX3J1bGUudmFsdWUuc2hvdygpO1xuICAgIH1cbiAgfSk7XG4gIFxuICBjb25zdCBjb2x1bW5zID0gW1xuICAgIHsgY29sdW1uTmFtZTogX2kxOG4oXCJhY3Rpb25zXCIpLCB0YXJnZXRzOiAwLCB3aWR0aDogJzUlJywgbmFtZTogJ2FjdGlvbnMnLCBjbGFzc05hbWU6ICd0ZXh0LWNlbnRlcicsIG9yZGVyYWJsZTogZmFsc2UsIHJlc3BvbnNpdmVQcmlvcml0eTogMCwgcmVuZGVyOiBmdW5jdGlvbiAoXywgdHlwZSwgcm93RGF0YSkgeyByZXR1cm4gYWRkX2FjdGlvbl9jb2x1bW4ocm93RGF0YSkgfSB9LFxuXG4gICAgeyBjb2x1bW5OYW1lOiBfaTE4bihcImlkXCIpLCB2aXNpYmxlOiBmYWxzZSwgdGFyZ2V0czoxLCBuYW1lOiAnaWQnLCBkYXRhOiAnaWQnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSB9LFxuICAgIHsgY29sdW1uTmFtZTogX2kxOG4oXCJpZl9zdGF0c19jb25maWcuc25tcF9kZXZpY2VcIiksIHRhcmdldHM6IDIsIHdpZHRoOiAnMjAnLCBuYW1lOiAnZGV2aWNlJywgZGF0YTogJ2RldmljZScsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IGZ1bmN0aW9uKGRhdGEsIF8sIHJvd0RhdGEpIHtyZXR1cm4gZm9ybWF0X3RhcmdldChkYXRhLCByb3dEYXRhKSB9IH0sXG4gICAgeyBjb2x1bW5OYW1lOiBfaTE4bihcImlmX3N0YXRzX2NvbmZpZy5zbm1wX2ludGVyZmFjZVwiKSwgdGFyZ2V0czogMywgd2lkdGg6ICcyMCcsIG5hbWU6ICdpbnRlcmZhY2UnLCBkYXRhOiAnaW50ZXJmYWNlJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogZnVuY3Rpb24oZGF0YSwgXywgcm93RGF0YSkge3JldHVybiBmb3JtYXRfaW50ZXJmYWNlKGRhdGEsIHJvd0RhdGEpIH0gfSxcbiAgICB7IGNvbHVtbk5hbWU6IF9pMThuKFwiaWZfc3RhdHNfY29uZmlnLm1ldHJpY1wiKSwgdGFyZ2V0czogNCwgd2lkdGg6ICcxMCcsIG5hbWU6ICdtZXRyaWMnLCBkYXRhOiAnbWV0cmljJywgY2xhc3NOYW1lOiAndGV4dC1jZW50ZXInLCByZXNwb25zaXZlUHJpb3JpdHk6IDEsIHJlbmRlcjogZnVuY3Rpb24oZGF0YSwgXywgcm93RGF0YSkgeyByZXR1cm4gZm9ybWF0X21ldHJpYyhkYXRhLCByb3dEYXRhKSB9IH0sXG4gICAgeyBjb2x1bW5OYW1lOiBfaTE4bihcImlmX3N0YXRzX2NvbmZpZy5mcmVxdWVuY3lcIiksIHRhcmdldHM6IDUsIHdpZHRoOiAnMTAnLCBuYW1lOiAnZnJlcXVlbmN5JywgZGF0YTogJ2ZyZXF1ZW5jeScsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxLCByZW5kZXI6IGZ1bmN0aW9uKGRhdGEpIHsgcmV0dXJuIGZvcm1hdF9mcmVxdWVuY3koZGF0YSkgfSB9LFxuICAgIHsgY29sdW1uTmFtZTogX2kxOG4oXCJpZl9zdGF0c19jb25maWcudGhyZXNob2xkXCIpLCB0YXJnZXRzOiA2LCB3aWR0aDogJzEwJywgbmFtZTogJ3RocmVzaG9sZCcsIGRhdGE6ICd0aHJlc2hvbGQnLCBjbGFzc05hbWU6ICd0ZXh0LWVuZCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiBmdW5jdGlvbihkYXRhLCBfLCByb3dEYXRhKSB7IHJldHVybiBmb3JtYXRfdGhyZXNob2xkKGRhdGEsIHJvd0RhdGEpIH0gfSxcbiAgICB7IGNvbHVtbk5hbWU6IF9pMThuKFwibWV0cmljX3R5cGVcIiksIHZpc2libGU6IGZhbHNlLCB0YXJnZXRzOiA3LCBuYW1lOiAnbWV0cmljX3R5cGUnLCBkYXRhOiAnbWV0cmljX3R5cGUnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSB9LFxuICBdO1xuXG4gIGNvbnN0IGhvc3RSdWxlc1RhYmxlQ29uZmlnID0ge1xuICAgIHRhYmxlX2J1dHRvbnM6IGRhdGF0YWJsZUJ1dHRvbixcbiAgICBkYXRhX3VybDogTnRvcFV0aWxzLmJ1aWxkVVJMKGRhdGFfdXJsLCByZXN0X3BhcmFtcyksXG4gICAgZW5hYmxlX3NlYXJjaDogdHJ1ZSxcbiAgICBjb2x1bW5zX2NvbmZpZzogY29sdW1ucyxcbiAgICB0YWJsZV9jb25maWc6IHsgXG4gICAgICBzY3JvbGxYOiBmYWxzZSxcbiAgICAgIHNlcnZlclNpZGU6IGZhbHNlLCBcbiAgICAgIG9yZGVyOiBbWyAxIC8qIHRhcmdldCAqLywgJ2Rlc2MnIF1dLFxuICAgICAgY29sdW1uRGVmczogY29sdW1uc1xuICAgIH1cbiAgfTtcbiAgaG9zdF9ydWxlc190YWJsZV9jb25maWcgPSBob3N0UnVsZXNUYWJsZUNvbmZpZztcbn1cblxub25CZWZvcmVNb3VudChhc3luYyAoKSA9PiB7XG4gIHN0YXJ0X2RhdGF0YWJsZSgpO1xuICBhd2FpdCBnZXRfc25tcF9tZXRyaWNfbGlzdCgpO1xuICBhd2FpdCBnZXRfc25tcF9kZXZpY2VzX2xpc3QoKTtcbiAgbW9kYWxfYWRkX3NubXBfZGV2aWNlX3J1bGUudmFsdWUubWV0cmljc0xvYWRlZChzbm1wX2RldmljZXNfbGlzdCwgc25tcF9tZXRyaWNfbGlzdCwgcHJvcHMucGFnZV9jc3JmKTtcbn0pXG5cbm9uVW5tb3VudGVkKCgpID0+IHtcbiAgZGVzdHJveV90YWJsZSgpO1xufSlcbjwvc2NyaXB0PlxuXG5cblxuXG5cblxuIiwiPHRlbXBsYXRlPlxuQ2lhbyBNb25kb1xuPE5vdGVMaXN0IDpub3RlX2xpc3Q9XCJub3Rlc1wiPjwvTm90ZUxpc3Q+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIG9uQmVmb3JlTW91bnQgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfY3VzdG9tX2V2ZW50cywgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXNcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTm90ZUxpc3QgfSBmcm9tIFwiLi9ub3RlLWxpc3QudnVlXCI7XG5pbXBvcnQgVGFibGVVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL3RhYmxlLXV0aWxzXCI7XG4vL2ltcG9ydCBOdG9wVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9udG9wLXV0aWxzXCI7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbmNvbnN0IG5vdGVzID0gW19pMThuKFwic25tcC5zbm1wX3NpbWlsYXJpdHlfbm90ZVwiKSwgX2kxOG4oXCJzbm1wLnNubXBfc2ltaWxhcml0eV90aW1lX25vdGVcIildO1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICBjb250ZXh0OiBPYmplY3QsXG59KTtcblxuY29uc3QgdGFibGVfaWQgPSBcInNubXBfc2ltaWxhcml0eV9kYXRhXCI7XG5cbm9uTW91bnRlZChhc3luYyAoKSA9PiB7XG4gICAgVGFibGVVdGlscy5idWlsZF90YWJsZShodHRwX3ByZWZpeCwgdGFibGVfaWQpO1xufSk7XG5cblxuY29uc29sZS5sb2cocHJvcHMuY29udGV4dCk7XG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbjwvc3R5bGU+XG4iLCI8IS0tXG4gIChDKSAyMDEzLTIzIC0gbnRvcC5vcmdcbi0tPlxuXG48dGVtcGxhdGU+XG4gICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQgIGNhcmQtc2hhZG93XCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtYm9keVwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IG1iLTNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIG1sLTIgbWItMlwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggbm8td3JhcFwiIHN0eWxlPVwidGV4dC1hbGlnbjpsZWZ0O21hcmdpbi1yaWdodDoxcmVtO21pbi13aWR0aDoyNXJlbTtcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwibXktYXV0byBtZS0xXCI+e3sgX2kxOG4oJ3Byb3RvY29sJykgfX06IDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF9jcml0ZXJpYVwiIDpvcHRpb25zPVwiY3JpdGVyaWFfbGlzdFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAc2VsZWN0X29wdGlvbj1cInVwZGF0ZV9jcml0ZXJpYVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1NlbGVjdFNlYXJjaD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBtYi0yXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBuby13cmFwXCIgc3R5bGU9XCJ0ZXh0LWFsaWduOmxlZnQ7bWFyZ2luLXJpZ2h0OjFyZW07bWluLXdpZHRoOjI1cmVtO1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJteS1hdXRvIG1lLTFcIj57eyBfaTE4bignYXBwbGljYXRpb24nKSB9fTogPC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cInNlbGVjdGVkX2FwcGxpY2F0aW9uXCIgOm9wdGlvbnM9XCJhcHBsaWNhdGlvbl9saXN0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBzZWxlY3Rfb3B0aW9uPVwidXBkYXRlX3BvcnRfbGlzdFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1NlbGVjdFNlYXJjaD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBtYi0yXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBuby13cmFwXCIgc3R5bGU9XCJ0ZXh0LWFsaWduOmxlZnQ7bWFyZ2luLXJpZ2h0OjFyZW07bWluLXdpZHRoOjI1cmVtO1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJteS1hdXRvIG1lLTFcIj57eyBfaTE4bignZGJfc2VhcmNoLnRhZ3Muc3J2X3BvcnQnKSB9fTogPC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cInNlbGVjdGVkX3BvcnRcIiA6b3B0aW9ucz1cInBvcnRfbGlzdFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAc2VsZWN0X29wdGlvbj1cInVwZGF0ZV9wb3J0XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvU2VsZWN0U2VhcmNoPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPFRhYmxlV2l0aENvbmZpZyByZWY9XCJ0YWJsZV9zZXJ2ZXJfcG9ydHNfYW5hbHlzaXNcIiA6Y3NyZj1cImNzcmZcIiA6dGFibGVfaWQ9XCJ0YWJsZV9pZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOmZfbWFwX2NvbHVtbnM9XCJtYXBfdGFibGVfZGVmX2NvbHVtbnNcIiA6Z2V0X2V4dHJhX3BhcmFtc19vYmo9XCJnZXRfZXh0cmFfcGFyYW1zX29ialwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQGN1c3RvbV9ldmVudD1cIm9uX3RhYmxlX2N1c3RvbV9ldmVudFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6Y3VzdG9tX2hlYWRlcj5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8RHJvcGRvd24gdi1mb3I9XCIodCwgdF9pbmRleCkgaW4gZmlsdGVyX3RhYmxlX2FycmF5XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpmX29uX29wZW49XCJnZXRfb3Blbl9maWx0ZXJfdGFibGVfZHJvcGRvd24odCwgdF9pbmRleClcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnJlZj1cImVsID0+IHsgZmlsdGVyX3RhYmxlX2Ryb3Bkb3duX2FycmF5W3RfaW5kZXhdID0gZWwgfVwiIDpoaWRkZW49XCJ0LmhpZGRlblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBEcm9wZG93biBjb2x1bW5zIC0tPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U3Bpbm5lciA6c2hvdz1cInQuc2hvd19zcGlubmVyXCIgc2l6ZT1cIjFyZW1cIiBjbGFzcz1cIm1lLTFcIj48L1NwaW5uZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XCJudG9wbmctdHJ1bmNhdGVcIiA6dGl0bGU9XCJ0LnRpdGxlXCI+e3sgdC5sYWJlbCB9fTwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90Om1lbnU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgdi1mb3I9XCJvcHQgaW4gdC5vcHRpb25zXCIgc3R5bGU9XCJjdXJzb3I6cG9pbnRlcjsgZGlzcGxheTogYmxvY2s7XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQGNsaWNrPVwiYWRkX3RhYmxlX2ZpbHRlcihvcHQsICRldmVudClcIiBjbGFzcz1cIm50b3BuZy10cnVuY2F0ZSB0YWctZmlsdGVyXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnRpdGxlPVwib3B0LnZhbHVlXCI+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCJvcHQuY291bnQgPT0gbnVsbFwiPnt7IG9wdC5sYWJlbCB9fTwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWVsc2U+e3sgb3B0LmxhYmVsICsgXCIgKFwiICsgb3B0LmNvdW50ICsgXCIpXCIgfX08L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0Ryb3Bkb3duPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+IDwhLS0gRHJvcGRvd24gZmlsdGVycyAtLT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvVGFibGVXaXRoQ29uZmlnPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgbmV4dFRpY2sgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfdXRpbGl0eSwgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMuanNcIjtcbmltcG9ydCBOdG9wVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9udG9wLXV0aWxzXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNwaW5uZXIgfSBmcm9tIFwiLi9zcGlubmVyLnZ1ZVwiO1xuXG5pbXBvcnQgeyBkZWZhdWx0IGFzIFRhYmxlV2l0aENvbmZpZyB9IGZyb20gXCIuL3RhYmxlLXdpdGgtY29uZmlnLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBEcm9wZG93biB9IGZyb20gXCIuL2Ryb3Bkb3duLnZ1ZVwiO1xuXG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdFNlYXJjaCB9IGZyb20gXCIuL3NlbGVjdC1zZWFyY2gudnVlXCI7XG5jb25zdCBmaWx0ZXJfdGFibGVfYXJyYXkgPSByZWYoW10pO1xuY29uc3QgZmlsdGVyX3RhYmxlX2Ryb3Bkb3duX2FycmF5ID0gcmVmKFtdKVxuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICBpc19udG9wX2VudGVycHJpc2VfbTogQm9vbGVhbixcbiAgICBjc3JmOiBTdHJpbmcsXG4gICAgdmxhbnM6IEFycmF5LFxuICAgIGlmaWQ6IE51bWJlcixcbiAgICBhZ2dyZWdhdGlvbl9jcml0ZXJpYTogU3RyaW5nLFxuICAgIHBhZ2U6IE51bWJlcixcbiAgICBzb3J0OiBTdHJpbmcsXG4gICAgb3JkZXI6IFN0cmluZyxcbiAgICBzdGFydDogTnVtYmVyLFxuICAgIGxlbmd0aDogTnVtYmVyLFxuICAgIGhvc3Q6IFN0cmluZyxcbn0pO1xuY29uc3QgY29udGV4dCA9IHJlZih7XG4gICAgY3NyZjogcHJvcHMuY3NyZixcbiAgICBpZmlkOiBwcm9wcy5pZmlkXG59KVxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcblxuLyogTDQgUHJvdG9jb2wgTGlzdCAqL1xuY29uc3QgY3JpdGVyaWFfbGlzdF9kZWYgPSBbXG4gICAgeyBsYWJlbDogX2kxOG4oXCJ0Y3BcIiksIHZhbHVlOiA2LCBwYXJhbTogXCJ0Y3BcIiwgdGFibGVfaWQ6IFwidGNwX3BvcnRzX2FuYWx5c2lzXCIsIGVudGVycHJpc2VfbTogZmFsc2UgfSxcbiAgICB7IGxhYmVsOiBfaTE4bihcInVkcFwiKSwgdmFsdWU6IDE3LCBwYXJhbTogXCJ1ZHBcIiwgdGFibGVfaWQ6IFwidWRwX3BvcnRzX2FuYWx5c2lzXCIsIGVudGVycHJpc2VfbTogZmFsc2UgfSxcbl07XG5cblxuLyogQ29uc3RzICovXG5jb25zdCBzZWxlY3RlZF9jcml0ZXJpYSA9IHJlZihjcml0ZXJpYV9saXN0X2RlZlswXSk7XG5jb25zdCB0YWJsZV9pZCA9IHJlZignc2VydmVyX3BvcnRzX2FuYWx5c2lzJyk7XG5jb25zdCBzZWxlY3RlZF9wb3J0ID0gcmVmKHt9KTtcbmNvbnN0IHNlbGVjdGVkX2FwcGxpY2F0aW9uID0gcmVmKHt9KTtcbmNvbnN0IHRhYmxlX3NlcnZlcl9wb3J0c19hbmFseXNpcyA9IHJlZigpO1xuXG5sZXQgcG9ydF9saXN0ID0gcmVmKFtdKTtcbmxldCBhcHBsaWNhdGlvbl9saXN0ID0gcmVmKFtdKTtcblxuY29uc3QgY3JpdGVyaWFfbGlzdCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAocHJvcHMuaXNfbnRvcF9lbnRlcnByaXNlX20pIHtcbiAgICAgICAgcmV0dXJuIHJlZihjcml0ZXJpYV9saXN0X2RlZik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBsZXQgY3JpdGVyYV9saXN0X2RlZl9jb20gPSBbXTtcbiAgICAgICAgY3JpdGVyaWFfbGlzdF9kZWYuZm9yRWFjaCgoYykgPT4ge1xuICAgICAgICAgICAgaWYgKCFjLmVudGVycHJpc2VfbSlcbiAgICAgICAgICAgICAgICBjcml0ZXJhX2xpc3RfZGVmX2NvbS5wdXNoKGMpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlZihjcml0ZXJhX2xpc3RfZGVmX2NvbSk7XG4gICAgfVxufSgpO1xuXG5vbk1vdW50ZWQoYXN5bmMgKCkgPT4ge1xuICAgIGxldCBwb3J0ID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoJ3BvcnQnKTtcbiAgICBsZXQgbDRfcHJvdG8gPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgncHJvdG9jb2wnKTtcbiAgICBjb25zdCBsN19wcm90byA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KCdhcHBsaWNhdGlvbicpO1xuXG4gICAgaWYgKHBvcnQgIT0gbnVsbCAmJiBwb3J0LmxvY2FsZUNvbXBhcmUoXCJcIikgIT0gMCAmJlxuICAgICAgICBsNF9wcm90byAhPSBudWxsICYmIGw0X3Byb3RvLmxvY2FsZUNvbXBhcmUoXCJcIikgIT0gMCAmJlxuICAgICAgICBsN19wcm90byAhPSBudWxsICYmIGw3X3Byb3RvLmxvY2FsZUNvbXBhcmUoXCJcIikgIT0gMCkge1xuICAgICAgICBcbiAgICAgICAgcG9ydCA9IE51bWJlcihwb3J0KTtcbiAgICAgICAgbDRfcHJvdG8gPSBOdW1iZXIobDRfcHJvdG8pO1xuICAgICAgICBzZWxlY3RlZF9jcml0ZXJpYS52YWx1ZSA9IGNyaXRlcmlhX2xpc3RfZGVmLmZpbmQoKHByb3RvKSA9PiAocHJvdG8udmFsdWUgPT0gbDRfcHJvdG8pKTtcbiAgICAgICAgXG5cbiAgICAgICAgYXdhaXQgdXBkYXRlX2Ryb3Bkb3duX21lbnVzKGZhbHNlLCBsN19wcm90bywgcG9ydCk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgICBzZWxlY3RlZF9jcml0ZXJpYS52YWx1ZSA9IGNyaXRlcmlhX2xpc3RfZGVmWzBdO1xuICAgICAgICBhd2FpdCB1cGRhdGVfZHJvcGRvd25fbWVudXMoZmFsc2UpO1xuXG4gICAgfVxuXG4gICAgbG9hZF90YWJsZV9maWx0ZXJzX292ZXJ2aWV3KCk7XG4gICAgdGFibGVfc2VydmVyX3BvcnRzX2FuYWx5c2lzLnZhbHVlLnJlZnJlc2hfdGFibGUoKTtcblxuXG59KTtcblxuXG5jb25zdCBnZXRfZXh0cmFfcGFyYW1zX29iaiA9ICgpID0+IHtcbiAgICBsZXQgZXh0cmFfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfb2JqZWN0KCk7XG4gICAgcmV0dXJuIGV4dHJhX3BhcmFtcztcbn07XG5cbi8qIEZ1bmN0aW9uIHRvIHVwZGF0ZSBMNCBQcm90b2NvbCAqL1xuYXN5bmMgZnVuY3Rpb24gdXBkYXRlX2NyaXRlcmlhKCkge1xuICAgIGF3YWl0IHVwZGF0ZV9kcm9wZG93bl9tZW51cyhmYWxzZSk7XG4gICAgdGFibGVfc2VydmVyX3BvcnRzX2FuYWx5c2lzLnZhbHVlLnJlZnJlc2hfdGFibGUoKTtcblxufTtcblxuLyogRnVuY3Rpb24gdG8gdXBkYXRlIEFwcGxpY2F0aW9uICovXG5hc3luYyBmdW5jdGlvbiB1cGRhdGVfcG9ydF9saXN0KCkge1xuICAgIGF3YWl0IHVwZGF0ZV9kcm9wZG93bl9tZW51cyh0cnVlKVxuICAgIHRhYmxlX3NlcnZlcl9wb3J0c19hbmFseXNpcy52YWx1ZS5yZWZyZXNoX3RhYmxlKCk7XG59XG5cbi8qIEZ1bmN0aW9uIHRvIHVwZGF0ZSBwb3J0ICovXG5mdW5jdGlvbiB1cGRhdGVfcG9ydCgpIHtcbiAgICBzZXRfcG9ydF9pbl91cmwoKTtcbiAgICB0YWJsZV9zZXJ2ZXJfcG9ydHNfYW5hbHlzaXMudmFsdWUucmVmcmVzaF90YWJsZSgpO1xufVxuXG5mdW5jdGlvbiBzZXRfcG9ydF9pbl91cmwoKSB7XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKFwicG9ydFwiLCBzZWxlY3RlZF9wb3J0LnZhbHVlLmlkKTtcbn1cblxuXG4vKiBGdW5jdGlvbiB0byBsb2FkIGZpbHRlcnMgKEp1c3QgVkxBTnMpICovXG5hc3luYyBmdW5jdGlvbiBsb2FkX3RhYmxlX2ZpbHRlcnNfYXJyYXkoYWN0aW9uLCBmaWx0ZXIpIHtcbiAgICBsZXQgZXh0cmFfcGFyYW1zID0gZ2V0X2V4dHJhX3BhcmFtc19vYmooKTtcbiAgICBsZXQgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyhleHRyYV9wYXJhbXMpO1xuICAgIGNvbnN0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2hvc3QvaG9zdHNfZGV0YWlsc19ieV9wb3J0X2ZpbHRlcnMubHVhP2FjdGlvbj0ke2FjdGlvbn0mJHt1cmxfcGFyYW1zfWA7XG4gICAgbGV0IHJlcyA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwpO1xuICAgIHJldHVybiByZXMubWFwKCh0KSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpZDogdC5hY3Rpb24gfHwgdC5uYW1lLFxuICAgICAgICAgICAgbGFiZWw6IHQubGFiZWwsXG4gICAgICAgICAgICB0aXRsZTogdC50b29sdGlwLFxuICAgICAgICAgICAgZGF0YV9sb2FkZWQ6IGFjdGlvbiAhPSAnb3ZlcnZpZXcnLFxuICAgICAgICAgICAgb3B0aW9uczogdC52YWx1ZSxcbiAgICAgICAgICAgIGhpZGRlbjogKHQudmFsdWUubGVuZ3RoID09IDEpXG4gICAgICAgIH07XG4gICAgfSk7XG59XG5cbmNvbnN0IGdldF9vcGVuX2ZpbHRlcl90YWJsZV9kcm9wZG93biA9IChmaWx0ZXIsIGZpbHRlcl9pbmRleCkgPT4ge1xuICAgIHJldHVybiAoXykgPT4ge1xuICAgICAgICBsb2FkX3RhYmxlX2ZpbHRlcnMoZmlsdGVyLCBmaWx0ZXJfaW5kZXgpO1xuICAgIH07XG59O1xuXG5hc3luYyBmdW5jdGlvbiBsb2FkX3RhYmxlX2ZpbHRlcnMoZmlsdGVyLCBmaWx0ZXJfaW5kZXgpIHtcbiAgICBmaWx0ZXIuc2hvd19zcGlubmVyID0gdHJ1ZTtcbiAgICBhd2FpdCBuZXh0VGljaygpO1xuICAgIGlmIChmaWx0ZXIuZGF0YV9sb2FkZWQgPT0gZmFsc2UpIHtcbiAgICAgICAgbGV0IG5ld19maWx0ZXJfYXJyYXkgPSBhd2FpdCBsb2FkX3RhYmxlX2ZpbHRlcnNfYXJyYXkoZmlsdGVyLmlkLCBmaWx0ZXIpO1xuICAgICAgICBmaWx0ZXIub3B0aW9ucyA9IG5ld19maWx0ZXJfYXJyYXkuZmluZCgodCkgPT4gdC5pZCA9PSBmaWx0ZXIuaWQpLm9wdGlvbnM7XG4gICAgICAgIGF3YWl0IG5leHRUaWNrKCk7XG4gICAgICAgIGxldCBkcm9wZG93biA9IGZpbHRlcl90YWJsZV9kcm9wZG93bl9hcnJheS52YWx1ZVtmaWx0ZXJfaW5kZXhdO1xuICAgICAgICBkcm9wZG93bi5sb2FkX21lbnUoKTtcbiAgICB9XG4gICAgZmlsdGVyLnNob3dfc3Bpbm5lciA9IGZhbHNlO1xufVxuXG5hc3luYyBmdW5jdGlvbiBsb2FkX3RhYmxlX2ZpbHRlcnNfb3ZlcnZpZXcoYWN0aW9uKSB7XG4gICAgZmlsdGVyX3RhYmxlX2FycmF5LnZhbHVlID0gYXdhaXQgbG9hZF90YWJsZV9maWx0ZXJzX2FycmF5KFwib3ZlcnZpZXdcIik7XG4gICAgc2V0X2ZpbHRlcl9hcnJheV9sYWJlbCgpO1xufVxuXG4vKiBGdW5jdGlvbiB0byBoYW5kbGUgYWN0aW9ucyBlbnRyaWVzICovXG5mdW5jdGlvbiBvbl90YWJsZV9jdXN0b21fZXZlbnQoZXZlbnQpIHtcbiAgICBsZXQgZXZlbnRzX21hbmFnZWQgPSB7XG4gICAgICAgIFwiY2xpY2tfYnV0dG9uX2Zsb3dzXCI6IGNsaWNrX2J1dHRvbl9mbG93cyxcbiAgICB9O1xuICAgIGlmIChldmVudHNfbWFuYWdlZFtldmVudC5ldmVudF9pZF0gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGV2ZW50c19tYW5hZ2VkW2V2ZW50LmV2ZW50X2lkXShldmVudCk7XG59XG5cbmZ1bmN0aW9uIGNsaWNrX2J1dHRvbl9mbG93cyhldmVudCkge1xuICAgIGxpdmVfZmxvd3MoZXZlbnQucm93LmlwKTtcbn1cblxuY29uc3QgbGl2ZV9mbG93cyA9IGZ1bmN0aW9uIChkYXRhKSB7XG5cbiAgICBsZXQgcGFyYW1zID0ge1xuICAgICAgICBsNHByb3RvOiBzZWxlY3RlZF9jcml0ZXJpYS52YWx1ZS52YWx1ZSxcbiAgICAgICAgc2VydmVyOiBkYXRhLFxuICAgICAgICBwb3J0OiBzZWxlY3RlZF9wb3J0LnZhbHVlLmlkLFxuICAgICAgICB2bGFuOiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeSgndmxhbl9pZCcpXG4gICAgfTtcbiAgICBsZXQgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyhwYXJhbXMpO1xuICAgIGNvbnN0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvZmxvd3Nfc3RhdHMubHVhPyR7dXJsX3BhcmFtc31gO1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5nb190b191cmwoYCR7dXJsfWApO1xufTtcblxuZnVuY3Rpb24gc2V0X2ZpbHRlcl9hcnJheV9sYWJlbCgpIHtcbiAgICBmaWx0ZXJfdGFibGVfYXJyYXkudmFsdWUuZm9yRWFjaCgoZWwsIGluZGV4KSA9PiB7XG4gICAgICAgIGlmIChlbC5iYXNpY19sYWJlbCA9PSBudWxsKSB7XG4gICAgICAgICAgICBlbC5iYXNpY19sYWJlbCA9IGVsLmxhYmVsO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdXJsX2VudHJ5ID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoZWwuaWQpXG4gICAgICAgIGlmICh1cmxfZW50cnkgIT0gbnVsbCkge1xuICAgICAgICAgICAgZWwub3B0aW9ucy5mb3JFYWNoKChvcHRpb24pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9uLnZhbHVlLnRvU3RyaW5nKCkgPT09IHVybF9lbnRyeSkge1xuICAgICAgICAgICAgICAgICAgICBlbC5sYWJlbCA9IGAke2VsLmJhc2ljX2xhYmVsfTogJHtvcHRpb24ubGFiZWwgfHwgb3B0aW9uLnZhbHVlfWBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfSlcbn1cblxuZnVuY3Rpb24gYWRkX3RhYmxlX2ZpbHRlcihvcHQsIGV2ZW50KSB7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKG9wdC5rZXksIGAke29wdC52YWx1ZX1gKTtcbiAgICBzZXRfZmlsdGVyX2FycmF5X2xhYmVsKCk7XG4gICAgdGFibGVfc2VydmVyX3BvcnRzX2FuYWx5c2lzLnZhbHVlLnJlZnJlc2hfdGFibGUoKTtcbn1cblxuLyogRnVuY3Rpb24gdG8gdXBkYXRlIGRyb3Bkb3duIG1lbnVzICovXG5hc3luYyBmdW5jdGlvbiB1cGRhdGVfZHJvcGRvd25fbWVudXMoaXNfYXBwbGljYXRpb25fc2VsZWN0ZWQsIGFwcCwgcG9ydCkge1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcInByb3RvY29sXCIsIHNlbGVjdGVkX2NyaXRlcmlhLnZhbHVlLnZhbHVlKTtcbiAgICBjb25zdCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9ob3N0L3NlcnZlcl9wb3J0cy5sdWE/cHJvdG9jb2w9YCArIHNlbGVjdGVkX2NyaXRlcmlhLnZhbHVlLnZhbHVlO1xuICAgIGxldCByZXMgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsLCBudWxsLCBudWxsLCB0cnVlKTtcbiAgICBsZXQgcG9ydHMgPSBbXTtcbiAgICBhcHBsaWNhdGlvbl9saXN0LnZhbHVlID0gW107XG4gICAgcG9ydF9saXN0LnZhbHVlID0gW107XG5cbiAgICByZXMucnNwLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgbGV0IG5hbWUgPSBpdGVtLmw3X3Byb3RvX25hbWU7XG4gICAgICAgIHBvcnRzLnB1c2goeyBsYWJlbDogYCR7aXRlbS5zcnZfcG9ydH0vJHtuYW1lfSAoJHtpdGVtLm5faG9zdHN9KWAsIGlkOiBpdGVtLnNydl9wb3J0LCBhcHBsaWNhdGlvbjogbmFtZSwgYXBwbGljYXRpb25faWQ6IGl0ZW0ucHJvdG9faWQsbnVtX2hvc3RzOiBpdGVtLm5faG9zdHMsIHZsYW5faWQ6aXRlbS52bGFuX2lkIH0pXG4gICAgfSlcblxuICAgIHBvcnRzLmZvckVhY2goKHBvcnQpID0+IHtcbiAgICAgICAgbGV0IHByb3RvX2lkID0gcG9ydC5hcHBsaWNhdGlvbl9pZDtcbiAgICAgICAgaWYgKCEgYXBwbGljYXRpb25fbGlzdC52YWx1ZS5maW5kKGl0ZW0gPT4gaXRlbS5pZCA9PSBwcm90b19pZCkpIHtcbiAgICAgICAgICAgIGFwcGxpY2F0aW9uX2xpc3QudmFsdWUucHVzaCh7IGxhYmVsOiBwb3J0LmFwcGxpY2F0aW9uLCBpZDogcG9ydC5hcHBsaWNhdGlvbl9pZCwgdmFsdWU6IHByb3RvX2lkIH0pO1xuICAgICAgICB9XG4gICAgfSlcblxuICAgIGFwcGxpY2F0aW9uX2xpc3QudmFsdWUuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICBsZXQgeCA9IGEubGFiZWwudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgbGV0IHkgPSBiLmxhYmVsLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgICAgaWYgKHggPCB5KSB7IHJldHVybiAtMTsgfVxuICAgICAgICBpZiAoeCA+IHkpIHsgcmV0dXJuIDE7IH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfSlcblxuICAgIGlmICghaXNfYXBwbGljYXRpb25fc2VsZWN0ZWQpIHtcbiAgICAgIC8vIGJ5IGRlZmF1bHQgc2VsZWN0IGZpcnN0IGw3X3Byb3RvXG4gICAgICBzZWxlY3RlZF9hcHBsaWNhdGlvbi52YWx1ZSA9ICAoYXBwID09IG51bGwpID8gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBsaWNhdGlvbl9saXN0LnZhbHVlWzBdIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGxpY2F0aW9uX2xpc3QudmFsdWUuZmluZCgoaXRlbSkgPT4gKGl0ZW0uaWQgPT0gYXBwKSk7XG4gICAgfVxuICAgIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChcImFwcGxpY2F0aW9uXCIsIHNlbGVjdGVkX2FwcGxpY2F0aW9uLnZhbHVlLmlkKTtcbiAgICBwb3J0cy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgIGlmIChpdGVtLmFwcGxpY2F0aW9uID09IHNlbGVjdGVkX2FwcGxpY2F0aW9uLnZhbHVlLmxhYmVsKVxuICAgICAgICAgICAgcG9ydF9saXN0LnZhbHVlLnB1c2goeyBsYWJlbDogaXRlbS5pZCArIFwiIChcIiArIGl0ZW0ubnVtX2hvc3RzICsgXCIpXCIsIGlkOiBpdGVtLmlkLCB2YWx1ZTogaXRlbS5pZCwgdmxhbl9pZDogaXRlbS52bGFuX2lkLCBuX2hvc3RzOiBpdGVtLm51bV9ob3N0cyB9KTtcbiAgICB9KVxuXG4gICAgcG9ydF9saXN0LnZhbHVlLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgbGV0IHggPSBhLmlkO1xuICAgICAgICBsZXQgeSA9IGIuaWQ7XG5cbiAgICAgICAgaWYgKHggPCB5KSB7IHJldHVybiAtMTsgfVxuICAgICAgICBpZiAoeCA+IHkpIHsgcmV0dXJuIDE7IH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfSlcblxuICAgIGlmIChwb3J0ICE9IG51bGwpIHtcbiAgICAgICAgc2VsZWN0ZWRfcG9ydC52YWx1ZSA9IHBvcnRfbGlzdC52YWx1ZS5maW5kKChpdGVtKSA9PiAoaXRlbS5pZCA9PSBwb3J0KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZWN0ZWRfcG9ydC52YWx1ZSA9IHBvcnRfbGlzdC52YWx1ZVswXTtcbiAgICB9XG5cbiAgICBzZXRfcG9ydF9pbl91cmwoKTtcbn1cblxuZnVuY3Rpb24gZ2V0X2NvdW50X3ZsYW5faG9zdHModmxhbl9pZCkge1xuICAgIGxldCBjb3VudF92bGFuX2hvc3QgPSAwO1xuICAgIHBvcnRfbGlzdC52YWx1ZS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgIGlmIChpdGVtLnZsYW5faWQgPT0gdmxhbl9pZCkge1xuICAgICAgICAgICAgY291bnRfdmxhbl9ob3N0ID0gY291bnRfdmxhbl9ob3N0ICsgaXRlbS5uX2hvc3RzXG4gICAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiBjb3VudF92bGFuX2hvc3Q7XG59XG5cbi8qIEZ1bmN0aW9uIHRvIGZvcm1hdCBkYXRhICovXG5jb25zdCBtYXBfdGFibGVfZGVmX2NvbHVtbnMgPSBhc3luYyAoY29sdW1ucykgPT4ge1xuICAgIGxldCBtYXBfY29sdW1ucyA9IHtcbiAgICAgICAgXCJpcFwiOiAoaXAsIHJvdykgPT4ge1xuICAgICAgICAgICAgaWYgKGlwICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0X2lwKGlwLCByb3cpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcIm5hbWVcIjogKG5hbWUsIHJvdykgPT4ge1xuICAgICAgICAgICAgaWYgKG5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXRfaG9zdF9uYW1lKG5hbWUsIHJvdyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwibWFjXCI6IChtYWMsIHJvdykgPT4ge1xuICAgICAgICAgICAgaWYgKG1hYyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdF9tYWMobWFjLCByb3cpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcInRvdF90cmFmZmljXCI6ICh0b3RfdHJhZmZpYywgcm93KSA9PiB7XG4gICAgICAgICAgICBpZiAodG90X3RyYWZmaWMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBOdG9wVXRpbHMuYnl0ZXNUb1NpemUodG90X3RyYWZmaWMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29sdW1ucy5mb3JFYWNoKChjKSA9PiB7XG4gICAgICAgIGMucmVuZGVyX2Z1bmMgPSBtYXBfY29sdW1uc1tjLmRhdGFfZmllbGRdO1xuICAgIH0pO1xuICAgIC8vIGNvbnNvbGUubG9nKGNvbHVtbnMpO1xuICAgIHJldHVybiBjb2x1bW5zO1xufTtcblxuLyogRnVuY3Rpb24gdG8gZm9ybWF0IElQIGxhYmVsICovXG5jb25zdCBmb3JtYXRfaXAgPSBmdW5jdGlvbiAoZGF0YSwgcm93RGF0YSkge1xuICAgIGlmIChkYXRhICE9IG51bGwpIHtcbiAgICAgICAgaWYgKHJvd0RhdGEudmxhbl9pZCAhPSAwKVxuICAgICAgICAgICAgcmV0dXJuIGA8YSBocmVmPVwiJHtodHRwX3ByZWZpeH0vbHVhL2Zsb3dzX3N0YXRzLmx1YT9zZXJ2ZXI9JHtkYXRhfSZ2bGFuPSR7cm93RGF0YS52bGFuX2lkfSZwb3J0PSR7c2VsZWN0ZWRfcG9ydC52YWx1ZS5pZH1cIj4ke2RhdGF9QCR7cm93RGF0YS52bGFuX2lkfTwvYT5gO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXR1cm4gYDxhIGhyZWY9XCIke2h0dHBfcHJlZml4fS9sdWEvZmxvd3Nfc3RhdHMubHVhP3NlcnZlcj0ke2RhdGF9JnBvcnQ9JHtzZWxlY3RlZF9wb3J0LnZhbHVlLmlkfVwiPiR7ZGF0YX08L2E+YDtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG5cbn1cblxuLyogRnVuY3Rpb24gdG8gZm9ybWF0IE1BQyBBZGRyZXNzIGxhYmVsICovXG5jb25zdCBmb3JtYXRfbWFjID0gZnVuY3Rpb24gKGRhdGEsIHJvd0RhdGEpIHtcbiAgICBpZiAoZGF0YSAhPSBudWxsKVxuICAgICAgICByZXR1cm4gYDxhIGhyZWY9XCIke2h0dHBfcHJlZml4fS9sdWEvbWFjX2RldGFpbHMubHVhP2hvc3Q9JHtkYXRhfVwiPiR7ZGF0YX08L2E+YDtcbiAgICByZXR1cm4gZGF0YTtcbn1cblxuLyogRnVuY3Rpb24gdG8gZm9ybWF0IEhvc3QgTmFtZSBsYWJlbCAqL1xuY29uc3QgZm9ybWF0X2hvc3RfbmFtZSA9IGZ1bmN0aW9uIChkYXRhLCByb3dEYXRhKSB7XG4gICAgaWYgKGRhdGEgIT0gbnVsbCkge1xuICAgICAgICBpZiAocm93RGF0YS52bGFuX2lkICE9IDApXG4gICAgICAgICAgICByZXR1cm4gYDxhIGhyZWY9XCIke2h0dHBfcHJlZml4fS9sdWEvaG9zdF9kZXRhaWxzLmx1YT9ob3N0PSR7cm93RGF0YS5pcH0mdmxhbj0ke3Jvd0RhdGEudmxhbl9pZH1cIj4ke2RhdGF9PC9hPmBcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmV0dXJuIGA8YSBocmVmPVwiJHtodHRwX3ByZWZpeH0vbHVhL2hvc3RfZGV0YWlscy5sdWE/aG9zdD0ke3Jvd0RhdGEuaXB9XCI+JHtkYXRhfTwvYT5gXG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xufVxuXG48L3NjcmlwdD5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG48bW9kYWwgQHNob3dlZD1cInNob3dlZCgpXCIgcmVmPVwibW9kYWxfaWRcIj5cbiAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT57e3RpdGxlfX08L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG5cbiAgICAgIDwhLS0gUmVwZWF0ZXIgVHlwZSAtLT5cblx0XHQ8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cblx0XHRcdFx0PGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTNcIj5cblx0XHRcdFx0XHQ8Yj57e19pMThuKFwibmVkZ2UucGFnZV9yZXBlYXRlcl9jb25maWcubW9kYWxfcmVwZWF0ZXJfY29uZmlnLnJlcGVhdGVyX3R5cGVcIil9fTwvYj5cblx0XHRcdFx0PC9sYWJlbD5cblx0XHRcdFx0PGRpdiBjbGFzcz1cImNvbC03XCI+XG5cdFx0XHRcdDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF9yZXBlYXRlcl90eXBlXCJcblx0XHRcdFx0XHRAc2VsZWN0X29wdGlvbj1cImNoYW5nZV9yZXBlYXRlcl90eXBlKClcIlxuXHRcdFx0XHRcdDpvcHRpb25zPVwicmVwZWF0ZXJfdHlwZV9hcnJheVwiPlxuXHRcdFx0XHQ8L1NlbGVjdFNlYXJjaD5cblx0XHRcdFx0PC9kaXY+XG5cdFx0PC9kaXY+XG4gICAgICBcbiAgICAgIDwhLS0gSVAgLS0+XG5cdFxuXG5cdFx0PGRpdiB2LWlmPVwic2VsZWN0ZWRfcmVwZWF0ZXJfdHlwZS52YWx1ZSA9PSAnY3VzdG9tJ1wiID5cblx0XHRcdFx0PGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCI+XG5cblx0XHRcdFx0XHQ8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tM1wiID5cblx0XHRcdFx0XHRcdDxiPnt7X2kxOG4oXCJuZWRnZS5wYWdlX3JlcGVhdGVyX2NvbmZpZy5pcFwiKX19PC9iPlxuXHRcdFx0XHRcdDwvbGFiZWw+XG5cdFx0XHRcdFx0PGRpdiBjbGFzcz1cImNvbC03XCI+XG5cdCAgICAgIFx0PGlucHV0IHYtbW9kZWw9XCJpcFwiICBAZm9jdXNvdXQ9XCJjaGVja19lbXB0eV9ob3N0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2wgY29sLTdcIiB0eXBlPVwidGV4dFwiIDpwbGFjZWhvbGRlcj1cImhvc3RfcGxhY2Vob2xkZXJcIiByZXF1aXJlZD5cblx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0PC9kaXY+XG5cdFx0PC9kaXY+XG4gICAgICAgICAgICBcblx0XHRcdFx0XHRcdFxuXHRcdFx0PCEtLSBQb3J0IC0tPlxuXHRcblxuXHRcdDxkaXYgdi1pZj1cInNlbGVjdGVkX3JlcGVhdGVyX3R5cGUudmFsdWUgPT0gJ2N1c3RvbSdcIiA+XG5cdFx0XHQ8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cblxuXHRcdFx0XHQ8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tM1wiID5cblx0XHRcdFx0XHQ8Yj57e19pMThuKFwibmVkZ2UucGFnZV9yZXBlYXRlcl9jb25maWcucG9ydFwiKX19PC9iPlxuXHRcdFx0XHQ8L2xhYmVsPlxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiY29sLTdcIj5cblxuXHQgICAgICA8aW5wdXQgdi1tb2RlbD1cInBvcnRcIiAgQGZvY3Vzb3V0PVwiY2hlY2tfZW1wdHlfcG9ydFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgdHlwZT1cInRleHRcIiA6cGxhY2Vob2xkZXI9XCJwb3J0X3BsYWNlaG9sZGVyXCIgcmVxdWlyZWQ+XG5cdFx0XHRcdDwvZGl2PlxuXG4gICAgXHQ8L2Rpdj5cblx0XHQ8L2Rpdj5cblxuXHQ8IS0tIEtlZXAgU291cmNlIEFkZHJlc3MgLS0+XG5cdFxuXG5cdFx0PGRpdiB2LWlmPVwic2VsZWN0ZWRfcmVwZWF0ZXJfdHlwZS52YWx1ZSA9PSAnY3VzdG9tJ1wiID5cbiAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuXG5cdFx0XHRcdDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS0zXCIgPlxuXHRcdFx0XHRcdDxiPnt7X2kxOG4oXCJuZWRnZS5wYWdlX3JlcGVhdGVyX2NvbmZpZy5rZWVwX3NyY19hZGRyZXNzXCIpfX08L2I+XG5cdFx0XHRcdDwvbGFiZWw+XG5cblx0XHRcdFx0PGxhYmVsIGNsYXNzPVwic3dpdGNoIGNvbC0xIG10LTNcIj5cblx0XHRcdFx0XHQ8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgdi1tb2RlbD1cImtlZXBfc3JjX2FkZHJlc3NcIj5cblx0XHRcdFx0PC9sYWJlbD5cblx0XHRcdDwvZGl2PlxuXHRcdDwvZGl2PlxuXG5cdFx0PGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCI+XG5cdFxuXHRcdFx0PGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTNcIiA+XG5cdFx0XHRcdDxiPnt7X2kxOG4oXCJuZWRnZS5wYWdlX3JlcGVhdGVyX2NvbmZpZy5pbnRlcmZhY2VzXCIpfX08L2I+XG5cdCAgICA8L2xhYmVsPlxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC03XCI+XG5cblx0XHRcdFx0PFNlbGVjdFNlYXJjaCByZWY9XCJpbnRlcmZhY2VzX3NlYXJjaFwiXG5cdFx0XHRcdFx0XHR2LW1vZGVsOnNlbGVjdGVkX29wdGlvbnM9XCJzZWxlY3RlZF9pbnRlcmZhY2VzXCJcblx0XHRcdFx0XHRcdDpvcHRpb25zPVwiaW50ZXJmYWNlX2FycmF5XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOm11bHRpcGxlPVwidHJ1ZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgIEBzZWxlY3Rfb3B0aW9uPVwidXBkYXRlX2ludGVyZmFjZXNfc2VsZWN0ZWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICBAdW5zZWxlY3Rfb3B0aW9uPVwicmVtb3ZlX2ludGVyZmFjZXNfc2VsZWN0ZWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICBAY2hhbmdlX3NlbGVjdGVkX29wdGlvbnM9XCJhbGxfY3JpdGVyaWFcIj5cbiAgICAgICAgICAgIDwvU2VsZWN0U2VhcmNoPlxuXHRcblxuXHRcdFx0PC9kaXY+XG5cdFx0PC9kaXY+XG5cblxuICA8L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmZvb3Rlcj5cbiAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiA6ZGlzYWJsZWQ9XCJkaXNhYmxlX2FkZFwiIEBjbGljaz1cImFwcGx5XCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj57e2J1dHRvbl90ZXh0fX08L2J1dHRvbj5cbiAgPC90ZW1wbGF0ZT5cbjwvbW9kYWw+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIGNvbXB1dGVkLCB3YXRjaCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IG50b3BuZ191dGlsaXR5IH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMuanNcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgbW9kYWwgfSBmcm9tIFwiLi9tb2RhbC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0U2VhcmNoIH0gZnJvbSBcIi4vc2VsZWN0LXNlYXJjaC52dWVcIjtcbmltcG9ydCByZWdleFZhbGlkYXRpb24gZnJvbSBcIi4uL3V0aWxpdGllcy9yZWdleC12YWxpZGF0aW9uLmpzXCI7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5jb25zdCBob3N0X3BsYWNlaG9sZGVyID0gaTE4bignaWZfc3RhdHNfY29uZmlnLm11bHRpY2FzdF9pcF9wbGFjZWhvbGRlcicpXG5jb25zdCBwb3J0X3BsYWNlaG9sZGVyID0gaTE4bignaWZfc3RhdHNfY29uZmlnLnBvcnRfcGxhY2Vob2xkZXInKVxuY29uc3QgbW9kYWxfaWQgPSByZWYobnVsbCk7XG5jb25zdCBzZWxlY3RlZF9pbnRlcmZhY2VzID0gcmVmKFtdKTtcbmNvbnN0IGlwID0gcmVmKG51bGwpO1xuY29uc3QgcG9ydCA9IHJlZihudWxsKTtcbmNvbnN0IHJlcGVhdGVyX3R5cGUgPSByZWYoe3ZhbHVlOiBcIm1kbnNcIiwgbGFiZWw6IFwiTUROU1wiIH0pO1xuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFsnZWRpdCcsICdhZGQnXSlcbmNvbnN0IGludGVyZmFjZXNfc2VhcmNoID0gcmVmKG51bGwpO1xuY29uc3Qga2VlcF9zcmNfYWRkcmVzcyA9IHJlZihmYWxzZSk7XG5cbmNvbnN0IHNob3dlZCA9ICgpID0+IHt9O1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHt9KTtcblxuY29uc3QgZGlzYWJsZV9hZGQgPSByZWYodHJ1ZSk7XG5jb25zdCBpbnZhbGlkX2lmYWNlX251bWJlciA9IHJlZih0cnVlKTtcbmNvbnN0IG5vdF92YWxpZF9pcCA9IHJlZih0cnVlKTtcbmNvbnN0IG5vdF92YWxpZF9wb3J0ID0gcmVmKHRydWUpO1xuXG5jb25zdCBjaGVja19lbXB0eV9ob3N0ID0gKCkgPT4ge1xuICBsZXQgcmVnZXggPSBuZXcgUmVnRXhwKHJlZ2V4VmFsaWRhdGlvbi5nZXRfZGF0YV9wYXR0ZXJuKCdpcCcpKTtcbiAgbm90X3ZhbGlkX2lwLnZhbHVlID0gIShyZWdleC50ZXN0KGlwLnZhbHVlKSB8fCBpcC52YWx1ZSA9PT0gJyonKTtcblx0ZGlzYWJsZV9hZGQudmFsdWUgPSB1cGRhdGVfZGlzYWJsZV9hZGQoKTtcbn1cblxuY29uc3QgY2hlY2tfZW1wdHlfcG9ydCA9ICgpID0+IHtcblx0bm90X3ZhbGlkX3BvcnQudmFsdWUgPSAocG9ydC52YWx1ZSA8IDEgfHwgcG9ydC52YWx1ZSA+IDY1NTM1KTtcblx0ZGlzYWJsZV9hZGQudmFsdWUgPSB1cGRhdGVfZGlzYWJsZV9hZGQoKTtcbn1cblxuY29uc3QgdXBkYXRlX2Rpc2FibGVfYWRkID0gKCkgPT4ge1xuXHRpZiAocmVwZWF0ZXJfdHlwZS52YWx1ZS52YWx1ZSA9PSAnY3VzdG9tJykge1xuXHRcdHJldHVybiAoaW52YWxpZF9pZmFjZV9udW1iZXIudmFsdWUgfHwgbm90X3ZhbGlkX2lwLnZhbHVlIHx8IG5vdF92YWxpZF9wb3J0LnZhbHVlKTtcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gKGludmFsaWRfaWZhY2VfbnVtYmVyLnZhbHVlKTtcblx0fVxufVxuXG5jb25zdCB0aXRsZSA9IHJlZihcIlwiKTtcblxuY29uc3QgcmVwZWF0ZXJfdHlwZV9hcnJheSA9IFtcbiAgICB7IGxhYmVsOiBfaTE4bihcIm5lZGdlLnBhZ2VfcmVwZWF0ZXJfY29uZmlnLm1vZGFsX3JlcGVhdGVyX2NvbmZpZy5tZG5zXCIpLCB2YWx1ZTogXCJtZG5zXCIsIGRlZmF1bHQ6IHRydWUgfSxcbiAgICB7IGxhYmVsOiBfaTE4bihcIm5lZGdlLnBhZ2VfcmVwZWF0ZXJfY29uZmlnLm1vZGFsX3JlcGVhdGVyX2NvbmZpZy5jdXN0b21cIiksIHZhbHVlOiBcImN1c3RvbVwiIH0sXG5dO1xuXG5jb25zdCByZXBlYXRlcl9pZCA9IHJlZigwKTtcblxuY29uc3Qgc2VsZWN0ZWRfcmVwZWF0ZXJfdHlwZSA9IHJlZih7fSk7XG5cblxuY29uc3QgaW50ZXJmYWNlX2xpc3RfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9uZWRnZS9pbnRlcmZhY2VzLmx1YWA7XG5sZXQgaW50ZXJmYWNlX2xpc3Q7XG5jb25zdCBpbnRlcmZhY2VfYXJyYXkgPSByZWYoW10pO1xuXG5jb25zdCBzZWxlY3RlZF9kZXN0X2ludGVyZmFjZSA9IHJlZihbXSk7XG5cbmNvbnN0IGJ1dHRvbl90ZXh0ID0gcmVmKFwiXCIpO1xuXG5jb25zdCBhbGxfY3JpdGVyaWEgPSAoaXRlbSkgPT4ge1xuXHRzZWxlY3RlZF9kZXN0X2ludGVyZmFjZS52YWx1ZSA9IGl0ZW07XG5cdGludmFsaWRfaWZhY2VfbnVtYmVyLnZhbHVlID0gaXRlbS5sZW5ndGggPCAyO1xuXHRkaXNhYmxlX2FkZC52YWx1ZSA9IHVwZGF0ZV9kaXNhYmxlX2FkZCgpO1xufVxuXG5jb25zdCB1cGRhdGVfaW50ZXJmYWNlc19zZWxlY3RlZCA9IChpdGVtcykgPT4ge1xuXHRzZWxlY3RlZF9pbnRlcmZhY2VzLnZhbHVlID0gaXRlbXM7XG59XG5cbmNvbnN0IHJlbW92ZV9pbnRlcmZhY2VzX3NlbGVjdGVkID0gKGl0ZW1fdG9fZGVsZXRlKSA9PiB7XG5cdHNlbGVjdGVkX2ludGVyZmFjZXMudmFsdWUgPSBzZWxlY3RlZF9pbnRlcmZhY2VzLnZhbHVlLmZpbHRlcigoaXRlbSkgPT4gaXRlbS5sYWJlbCAhPSBpdGVtX3RvX2RlbGV0ZS5sYWJlbCk7XG59XG5cbmNvbnN0IHJlc2V0X21vZGFsID0gKCkgPT4ge1xuXHRzZWxlY3RlZF9yZXBlYXRlcl90eXBlLnZhbHVlID0ge307XG5cdGlwLnZhbHVlID0gXCJcIjtcblx0cG9ydC52YWx1ZSA9IFwiXCI7XG5cdHNlbGVjdGVkX2ludGVyZmFjZXMudmFsdWUgPSBbXTtcblx0bm90X3ZhbGlkX3BvcnQudmFsdWUgPSB0cnVlO1xuXHRub3RfdmFsaWRfaXAudmFsdWUgPSB0cnVlO1xuXHRpbnZhbGlkX2lmYWNlX251bWJlci52YWx1ZSA9IHRydWU7XG59XG5cbmNvbnN0IHNob3cgPSAocm93ICkgPT4ge1xuXHRyZXNldF9tb2RhbCgpO1xuICAgIGluaXQocm93KTtcbiAgICBtb2RhbF9pZC52YWx1ZS5zaG93KCk7XG59O1xuXG5jb25zdCBpc19vcGVuX2luX2FkZCA9IHJlZih0cnVlKTtcblxuZnVuY3Rpb24gaW5pdChyb3cpIHtcbiAgICBpc19vcGVuX2luX2FkZC52YWx1ZSA9IHJvdyA9PSBudWxsO1xuXG4gICAgLy8gY2hlY2sgaWYgd2UgbmVlZCBvcGVuIGluIGVkaXRcbiAgICBpZiAoaXNfb3Blbl9pbl9hZGQudmFsdWUgPT0gZmFsc2UpIHtcblx0XHRcdG5vdF92YWxpZF9wb3J0LnZhbHVlID0gZmFsc2U7XG5cdFx0XHRub3RfdmFsaWRfaXAudmFsdWUgPSBmYWxzZTtcblx0XHRcdGludmFsaWRfaWZhY2VfbnVtYmVyLnZhbHVlID0gZmFsc2U7XG5cdFx0XHRkaXNhYmxlX2FkZC52YWx1ZSA9IGZhbHNlO1xuXHRcdFx0dGl0bGUudmFsdWUgPSBfaTE4bihcIm5lZGdlLnBhZ2VfcnVsZXNfY29uZmlnLm1vZGFsX3J1bGVfY29uZmlnLnRpdGxlX2VkaXRcIik7XG5cdFx0XHRidXR0b25fdGV4dC52YWx1ZSA9IF9pMThuKFwiZWRpdFwiKTtcblx0XHRcdHJlcGVhdGVyX2lkLnZhbHVlID0gcm93LnJlcGVhdGVyX2lkO1xuXHRcdFx0c2VsZWN0ZWRfcmVwZWF0ZXJfdHlwZS52YWx1ZSA9IHJlcGVhdGVyX3R5cGVfYXJyYXkuZmluZCgocykgPT4gKHMubGFiZWwgPT0gcm93LnR5cGUpKTtcblx0XHRcdGlmIChzZWxlY3RlZF9yZXBlYXRlcl90eXBlLnZhbHVlLnZhbHVlID09ICdjdXN0b20nKSB7XG5cdFx0XHRcdGlwLnZhbHVlID0gcm93LmlwO1xuXHRcdFx0XHRwb3J0LnZhbHVlID0gcm93LnBvcnQ7XG5cdFx0XHR9XG5cdFx0XHRrZWVwX3NyY19hZGRyZXNzLnZhbHVlID0gcm93LmtlZXBfc3JjX2FkZHJlc3M7XG5cdFx0XHRjaGFuZ2VfcmVwZWF0ZXJfdHlwZShyb3cpXG5cbiAgICB9IGVsc2Uge1xuXHRcdFx0dGl0bGUudmFsdWUgPSBfaTE4bihcIm5lZGdlLnBhZ2VfcnVsZXNfY29uZmlnLm1vZGFsX3J1bGVfY29uZmlnLnRpdGxlX2FkZFwiKTtcblx0XHRcdGJ1dHRvbl90ZXh0LnZhbHVlID0gX2kxOG4oXCJhZGRcIik7XG5cdFx0XHRsZXQgZGVmYXVsdF90eXBlID0gcmVwZWF0ZXJfdHlwZV9hcnJheS5maW5kKChzKSA9PiBzLmRlZmF1bHQgPT0gdHJ1ZSk7XG4gICAgfVxuXHRcdFxuXHRcdGlmIChpc19vcGVuX2luX2FkZC52YWx1ZSA9PSBmYWxzZSkge1xuXHRcdFx0Y29uc3Qgcm93X2ludGVyZmFjZXMgPSByb3cuaW50ZXJmYWNlcy5zcGxpdChcIixcIik7XG5cdFx0XHRsZXQgdG1wX3NlbGVjdGVkX2ludGVyZmFjZXMgPSBbXTtcblx0XHRcdHJvd19pbnRlcmZhY2VzLmZvckVhY2goKHJvd19pZmFjZSkgPT4ge1xuXHRcdFx0XHRpZiAocm93X2lmYWNlICE9ICcnICYmIHJvd19pZmFjZSAhPSBudWxsKSB7XG5cdFx0XHRcdFx0dG1wX3NlbGVjdGVkX2ludGVyZmFjZXMucHVzaChpbnRlcmZhY2VfYXJyYXkudmFsdWUuZmluZCgoaWZhY2UpID0+IGlmYWNlLnZhbHVlID09IHJvd19pZmFjZSkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KVxuXG5cdFx0XHRzZWxlY3RlZF9pbnRlcmZhY2VzLnZhbHVlID0gdG1wX3NlbGVjdGVkX2ludGVyZmFjZXM7XG5cdFx0fVxufVxuXG5hc3luYyBmdW5jdGlvbiBjaGFuZ2VfcmVwZWF0ZXJfdHlwZSh0eXBlKSB7XG5cdFx0cmVwZWF0ZXJfdHlwZS52YWx1ZSA9IHNlbGVjdGVkX3JlcGVhdGVyX3R5cGUudmFsdWU7XG4gICAgaWYgKHJlcGVhdGVyX3R5cGUudmFsdWUudmFsdWUgPT0gXCJjdXN0b21cIikge1xuXHRcdFx0YXdhaXQgc2V0X2ludGVyZmFjZV9hcnJheSgpO1xuXHRcdH1cbn1cblxuXG5cbmxldCBpc19zZXRfaW50ZXJmYWNlX2FycmF5ID0gZmFsc2U7XG5hc3luYyBmdW5jdGlvbiBzZXRfaW50ZXJmYWNlX2FycmF5KCkge1xuICAgIGlmIChpc19zZXRfaW50ZXJmYWNlX2FycmF5ID09IHRydWUpIHsgcmV0dXJuOyB9XG5cdGlmIChpbnRlcmZhY2VfbGlzdCA9PSBudWxsKSB7XG5cdCAgICBpbnRlcmZhY2VfbGlzdCA9IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdChpbnRlcmZhY2VfbGlzdF91cmwpO1xuXHR9XG5cdGxldCByZXNfaW50ZXJmYWNlX2xpc3QgPSBhd2FpdCBpbnRlcmZhY2VfbGlzdDtcblx0aW50ZXJmYWNlX2FycmF5LnZhbHVlID0gcmVzX2ludGVyZmFjZV9saXN0LmZpbHRlcihpID0+IGkucm9sZSA9PSBcImxhblwiKS5tYXAoKGkpID0+IHtcblx0XHRcdHJldHVybiB7XG5cdFx0bGFiZWw6IGkubGFiZWwsXG5cdFx0dmFsdWU6IGkuaWZuYW1lLFxuXHRcdFx0fTtcblx0fSk7XG4gICAgaXNfc2V0X2ludGVyZmFjZV9hcnJheSA9IHRydWU7XG59XG5cblxuY29uc3QgYXBwbHkgPSAoKSA9PiB7XG4gICAgbGV0IHJlcGVhdGVyX3QgPSByZXBlYXRlcl90eXBlLnZhbHVlLmxhYmVsO1xuXHRcdGxldCBrZWVwX3NyY19hZGRyZXNzX3QgPSBrZWVwX3NyY19hZGRyZXNzLnZhbHVlO1xuICAgIGxldCBvYmogPSB7XG5cdFx0XHRyZXBlYXRlcl90eXBlOiByZXBlYXRlcl90LFxuICAgIH07XG5cdFx0aWYgKHJlcGVhdGVyX3R5cGUudmFsdWUudmFsdWUgPT0gXCJjdXN0b21cIikge1xuXHRcdFx0bGV0IGlwX3QgPSBpcC52YWx1ZTtcblx0XHRcdGxldCBwb3J0X3QgPSBwb3J0LnZhbHVlO1xuXHRcdFx0b2JqID0ge1xuXHRcdFx0XHRyZXBlYXRlcl90eXBlOiByZXBlYXRlcl90LFxuXHRcdFx0XHRpcDogaXBfdCxcblx0XHRcdFx0cG9ydDogcG9ydF90LFxuXHRcdFx0XHRrZWVwX3NyY19hZGRyZXNzOiBrZWVwX3NyY19hZGRyZXNzX3RcbiAgICBcdH07XG5cdFx0fVxuICAgIGxldCBldmVudCA9IFwiYWRkXCI7XG4gICAgaWYgKGlzX29wZW5faW5fYWRkLnZhbHVlID09IGZhbHNlKSB7XG5cdG9iai5yZXBlYXRlcl9pZCA9IHJlcGVhdGVyX2lkLnZhbHVlO1xuXHRldmVudCA9IFwiZWRpdFwiO1xuICAgIH1cblxuXHRsZXQgaW50ZXJmYWNlcyA9IFtdO1xuXHRsZXQgZGV0YWlscyA9IFtdO1xuXHRcblx0c2VsZWN0ZWRfZGVzdF9pbnRlcmZhY2UudmFsdWUuZm9yRWFjaCgoaSkgPT4ge1xuXHRcdGludGVyZmFjZXMucHVzaChpLnZhbHVlKTtcblx0XHRcblx0XHRpZihpLnZhbHVlICE9IGkubGFiZWwgJiYgIWkubGFiZWwuaW5jbHVkZXMoaS52YWx1ZSkpIHtcblx0XHRcdGRldGFpbHMucHVzaChpLmxhYmVsK1wiIChcIitpLnZhbHVlK1wiKVwiKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGV0YWlscy5wdXNoKGkubGFiZWwpO1xuXHRcdH1cblx0fSk7XG5cblx0Y29uc3QgdG1wX2ludGVyZmFjZXMgPSBpbnRlcmZhY2VzLmpvaW4oXCIsXCIpO1xuXHRjb25zdCB0bXBfZGV0YWlscyA9IGRldGFpbHMuam9pbihcIixcIik7XG5cblx0b2JqLmludGVyZmFjZXMgPSB0bXBfaW50ZXJmYWNlcztcblx0b2JqLmludGVyZmFjZV9kZXRhaWxzID0gdG1wX2RldGFpbHM7XG4gICAgZW1pdChldmVudCwgb2JqKTtcbiAgICBjbG9zZSgpO1xufTtcblxuY29uc3QgY2xvc2UgPSAoKSA9PiB7XG4gICAgbW9kYWxfaWQudmFsdWUuY2xvc2UoKTtcbn07XG5cblxuZGVmaW5lRXhwb3NlKHsgc2hvdywgY2xvc2UgfSk7XG5cbm9uTW91bnRlZChhc3luYyAoKSA9PiB7XG5cdGF3YWl0IHNldF9pbnRlcmZhY2VfYXJyYXkoKTtcblxufSk7XG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuaW5wdXQ6aW52YWxpZCB7XG4gIGJvcmRlci1jb2xvcjogI2ZmMDAwMDtcbn1cbjwvc3R5bGU+XG4iLCI8IS0tXG4gIChDKSAyMDEzLTIyIC0gbnRvcC5vcmdcbiAgLS0+XG5cbjx0ZW1wbGF0ZT5cbjxkaXYgY2xhc3M9XCJtYi0yXCI+XG4gIFxuICA8aDI+e3sgX2kxOG4oXCJuZWRnZS5yZXBlYXRlcnNfY29uZmlnX3RpdGxlXCIpIH19PC9oMj5cbiAgPGJyIC8+XG4gIFxuPC9kaXY+XG5cbjxkaXYgaWQ9XCJhZ2dyZWdhdGVkX2xpdmVfZmxvd3NcIj5cbiAgPERhdGF0YWJsZSByZWY9XCJ0YWJsZV9ydWxlc1wiXG5cdCAgICAgOnRhYmxlX2J1dHRvbnM9XCJ0YWJsZV9jb25maWcudGFibGVfYnV0dG9uc1wiXG5cdCAgICAgOmNvbHVtbnNfY29uZmlnPVwidGFibGVfY29uZmlnLmNvbHVtbnNfY29uZmlnXCJcblx0ICAgICA6ZGF0YV91cmw9XCJ0YWJsZV9jb25maWcuZGF0YV91cmxcIlxuXHQgICAgIDpmaWx0ZXJfYnV0dG9ucz1cInRhYmxlX2NvbmZpZy50YWJsZV9maWx0ZXJzXCJcblx0ICAgICA6ZW5hYmxlX3NlYXJjaD1cInRhYmxlX2NvbmZpZy5lbmFibGVfc2VhcmNoXCJcblx0ICAgICA6dGFibGVfY29uZmlnPVwidGFibGVfY29uZmlnLnRhYmxlX2NvbmZpZ1wiPlxuICA8L0RhdGF0YWJsZT5cbjwvZGl2PlxuPE1vZGFsQWRkUmVwZWF0ZXJDb25maWcgcmVmPVwibW9kYWxfYWRkX3JlcGVhdGVyX2NvbmZpZ1wiIEBhZGQ9XCJhZGRfcmVwZWF0ZXJcIiBAZWRpdD1cImVkaXRfcmVwZWF0ZXJcIj48L01vZGFsQWRkUmVwZWF0ZXJDb25maWc+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIG9uQmVmb3JlTW91bnQgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgTnRvcFV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvbnRvcC11dGlsc1wiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRhdGFibGUgfSBmcm9tIFwiLi9kYXRhdGFibGUudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsQWRkUmVwZWF0ZXJDb25maWcgfSBmcm9tIFwiLi9tb2RhbC1uZWRnZS1hZGQtcmVwZWF0ZXItY29uZmlnLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX3V0aWxpdHksIG50b3BuZ191cmxfbWFuYWdlciwgbnRvcG5nX3N0YXR1c19tYW5hZ2VyIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMuanNcIjtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcblxuY29uc3QgdGltZW91dF9kZWxldGUgPSAxICogNTAwO1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICB1cmw6IFN0cmluZyxcbiAgICBpZmlkOiBOdW1iZXIsXG4gICAgY3NyZjogU3RyaW5nLFxuICAgIGNvbHVtbnNfY29uZmlnOiBBcnJheVxufSk7XG5cbmNvbnN0IHRhYmxlX2NvbmZpZyA9IHJlZih7fSk7XG5jb25zdCB0YWJsZV9ydWxlcyA9IHJlZihudWxsKTtcbmNvbnN0IG1vZGFsX2FkZF9yZXBlYXRlcl9jb25maWcgPSByZWYobnVsbCk7XG5cbm9uQmVmb3JlTW91bnQoYXN5bmMgKCkgPT4ge1xuICAgIHNldF9kYXRhdGFibGVfY29uZmlnKCk7XG59KTtcblxuZnVuY3Rpb24gZWRpdF9yZXBlYXRlcihyZXBlYXRlcikgeyAgICBcbiAgICBjb25zdCBlZGl0X3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9lZGl0L25lZGdlL2ZvcndhcmRlci5sdWFgO1xuICAgIHNldF9ydWxlKHJlcGVhdGVyLCBlZGl0X3VybCk7XG59XG5cbmZ1bmN0aW9uIGFkZF9yZXBlYXRlcihyZXBlYXRlcikge1xuICAgIGNvbnN0IGFkZF91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvYWRkL25lZGdlL2ZvcndhcmRlci5sdWFgO1xuICAgIHNldF9ydWxlKHJlcGVhdGVyLCBhZGRfdXJsKTtcbn1cblxuXG5mdW5jdGlvbiBzZXRfcnVsZShydWxlLCB1cmwpIHtcbiAgICBsZXQgaGVhZGVycyA9IHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgIH07XG4gICAgbGV0IGJvZHkgPSBKU09OLnN0cmluZ2lmeSh7IC4uLnJ1bGUsIGNzcmY6IHByb3BzLmNzcmZ9KTtcbiAgICBcbiAgICBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsLCB7IG1ldGhvZDogXCJwb3N0XCIsIGhlYWRlcnMsIGJvZHl9KTtcbiAgICByZWZyZXNoX3RhYmxlKCk7ICAgIFxufVxuXG5cblxuY29uc3QgZm9ybWF0X2ludGVyZmFjZXMgPSBmdW5jdGlvbihkYXRhLCByb3dEYXRhKSB7IFxuICAgIHJldHVybiBkYXRhLnNwbGl0KFwiLFwiKS5qb2luKFwiLCBcIik7XG59XG5mdW5jdGlvbiBzZXRfZGF0YXRhYmxlX2NvbmZpZygpIHtcbiAgICBjb25zdCBkYXRhdGFibGVCdXR0b24gPSBbXTtcbiAgICBcbiAgICBsZXQgcGFyYW1zID0geyBcblx0aWZpZDogbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJpZmlkXCIpIHx8IHByb3BzLmlmaWQsXHRcbiAgICB9O1xuICAgIGxldCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKHBhcmFtcyk7XG4gICAgXG4gICAgZGF0YXRhYmxlQnV0dG9uLnB1c2goe1xuXHR0ZXh0OiAnPGkgY2xhc3M9XCJmYXMgZmEtc3luY1wiPjwvaT4nLFxuXHRjbGFzc05hbWU6ICdidG4tbGluaycsXG5cdGFjdGlvbjogZnVuY3Rpb24gKGUsIGR0LCBub2RlLCBjb25maWcpIHtcblx0ICAgIHJlZnJlc2hfdGFibGUoKTtcbiAgICAgICAgICAgIC8vIHRhYmxlX3J1bGVzLnZhbHVlLnJlbG9hZCgpO1xuXHR9XG4gICAgfSwge1xuXHR0ZXh0OiAnPGkgY2xhc3M9XCJmYXMgZmEtcGx1c1wiPjwvaT4nLFxuXHRjbGFzc05hbWU6ICdidG4tbGluaycsXG5cdGFjdGlvbjogZnVuY3Rpb24gKCkge1xuXHQgICAgbW9kYWxfYWRkX3JlcGVhdGVyX2NvbmZpZy52YWx1ZS5zaG93KG51bGwpO1xuXHR9XG4gICAgfSk7XG4gICAgXG4gICAgbGV0IGRlZmF1bHREYXRhdGFibGVDb25maWcgPSB7XG5cdHRhYmxlX2J1dHRvbnM6IGRhdGF0YWJsZUJ1dHRvbixcblx0ZGF0YV91cmw6IGAke3Byb3BzLnVybH0/JHt1cmxfcGFyYW1zfWAsXG5cdGVuYWJsZV9zZWFyY2g6IGZhbHNlLFxuICAgIH07XG4gICAgXG4gICAgbGV0IGNvbHVtbnMgPSBbXG5cdCB7IFxuXHQgICAgY29sdW1uTmFtZTogX2kxOG4oXCJuZWRnZS5wYWdlX3JlcGVhdGVyX2NvbmZpZy50eXBlXCIpLCB0YXJnZXRzOiAwLCBuYW1lOiAndHlwZScsIGRhdGE6ICd0eXBlJywgY2xhc3NOYW1lOiAndGV4dC1ub3dyYXAgdGV4dC1sZWZ0JywgcmVzcG9uc2l2ZVByaW9yaXR5OiAxXG5cdH0sXG4gICAgIHsgXG5cdCAgICBjb2x1bW5OYW1lOiBfaTE4bihcIm5lZGdlLnBhZ2VfcmVwZWF0ZXJfY29uZmlnLmlwXCIpLCB0YXJnZXRzOiAwLCBuYW1lOiAnaXAnLCBkYXRhOiAnaXAnLCBjbGFzc05hbWU6ICd0ZXh0LW5vd3JhcCB0ZXh0LWxlZnQnLCByZXNwb25zaXZlUHJpb3JpdHk6IDFcblx0fSxcbiAgICAgeyBcblx0ICAgIGNvbHVtbk5hbWU6IF9pMThuKFwibmVkZ2UucGFnZV9yZXBlYXRlcl9jb25maWcucG9ydFwiKSwgdGFyZ2V0czogMCwgbmFtZTogJ3BvcnQnLCBkYXRhOiAncG9ydCcsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwIHRleHQtbGVmdCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMVxuXHR9LFxuICAgIHtcblx0ICAgIGNvbHVtbk5hbWU6IF9pMThuKFwibmVkZ2UucGFnZV9yZXBlYXRlcl9jb25maWcuaW50ZXJmYWNlc1wiKSwgdGFyZ2V0czogMCwgbmFtZTogJ2ludGVyZmFjZXMnLCBkYXRhOiAnZGV0YWlscycsIGNsYXNzTmFtZTogJ3RleHQtbm93cmFwIHRleHQtbGVmdCcsIHJlc3BvbnNpdmVQcmlvcml0eTogMSwgcmVuZGVyOiBmdW5jdGlvbiAoZGF0YSxfLHJvd0RhdGEpICB7XG5cdFx0ICAgIHJldHVybiBmb3JtYXRfaW50ZXJmYWNlcyhkYXRhLCByb3dEYXRhKX1cblx0fSxcbiAgICBdO1xuICAgIGxldCB3cmFwX2NvbHVtbnNfY29uZmlnID0gY29sdW1ucy5tYXAoKGMpID0+IGMpO1xuICAgIC8vIGxldCB3cmFwX2NvbHVtbnNfY29uZmlnID0gcHJvcHMuY29sdW1uc19jb25maWcubWFwKChjKSA9PiBjKTtcbiAgICB3cmFwX2NvbHVtbnNfY29uZmlnLnB1c2goeyBjb2x1bW5OYW1lOiBfaTE4bihcImFjdGlvbnNcIiksIHdpZHRoOiAnNSUnLCBuYW1lOiAnYWN0aW9ucycsIGNsYXNzTmFtZTogJ3RleHQtY2VudGVyJywgb3JkZXJhYmxlOiBmYWxzZSwgcmVzcG9uc2l2ZVByaW9yaXR5OiAwLCByZW5kZXI6IGZ1bmN0aW9uIChfLCB0eXBlLCByb3dEYXRhKSB7IHJldHVybiBhZGRfYWN0aW9uX2NvbHVtbihyb3dEYXRhKSB9IH0pO1xuICAgIFxuICAgIGRlZmF1bHREYXRhdGFibGVDb25maWcuY29sdW1uc19jb25maWcgPSB3cmFwX2NvbHVtbnNfY29uZmlnO1xuICAgIHRhYmxlX2NvbmZpZy52YWx1ZSA9IGRlZmF1bHREYXRhdGFibGVDb25maWc7XG59XG5cbmNvbnN0IGFkZF9hY3Rpb25fY29sdW1uID0gZnVuY3Rpb24gKHJvd0RhdGEpIHtcbiAgICBsZXQgZGVsZXRlX2hhbmRsZXIgPSB7XG5cdGhhbmRsZXJJZDogXCJkZWxldGVfaG9zdFwiLFx0ICBcblx0b25DbGljazogKCkgPT4ge1xuXHQgICAgZGVsZXRlX3J1bGUocm93RGF0YSk7XG5cdH0sXG4gICAgfTtcbiAgICBcbiAgICBsZXQgZWRpdF9oYW5kbGVyID0ge1xuXHRoYW5kbGVySWQ6IFwiZWRpdF9ydWxlXCIsXG5cdG9uQ2xpY2s6ICgpID0+IHtcblx0ICAgIG1vZGFsX2FkZF9yZXBlYXRlcl9jb25maWcudmFsdWUuc2hvdyhyb3dEYXRhKTtcblx0fSxcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIERhdGFUYWJsZVV0aWxzLmNyZWF0ZUFjdGlvbkJ1dHRvbnMoW1xuXHR7IGNsYXNzOiBgcG9pbnRlcmAsIGhhbmRsZXI6IGVkaXRfaGFuZGxlciwgaGFuZGxlcklkOiBcImVkaXRfcnVsZVwiLCBpY29uOiAnZmEtZWRpdCcsIHRpdGxlOiBpMThuKCdlZGl0JykgfSxcblx0eyBjbGFzczogYHBvaW50ZXJgLCBoYW5kbGVyOiBkZWxldGVfaGFuZGxlciwgaGFuZGxlcklkOiBcImRlbGV0ZV9ydWxlXCIsIGljb246ICdmYS10cmFzaCcsIHRpdGxlOiBpMThuKCdkZWxldGUnKSB9LFxuICAgIF0pO1xufTtcblxuZnVuY3Rpb24gZGVsZXRlX3J1bGUocmVwZWF0ZXIpIHtcbiAgICBjb25zdCBhZGRfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2RlbGV0ZS9uZWRnZS9mb3J3YXJkZXIubHVhYDtcbiAgICBsZXQgaGVhZGVycyA9IHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgIH07XG4gICAgbGV0IGJvZHkgPSBKU09OLnN0cmluZ2lmeSh7IHJlcGVhdGVyX2lkOiByZXBlYXRlci5yZXBlYXRlcl9pZCwgY3NyZjogcHJvcHMuY3NyZn0pO1xuICAgIFxuICAgIG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdChhZGRfdXJsLCB7IG1ldGhvZDogXCJwb3N0XCIsIGhlYWRlcnMsIGJvZHl9KTtcbiAgICByZWZyZXNoX3RhYmxlKCk7ICAgIFxufVxuXG5mdW5jdGlvbiByZWZyZXNoX3RhYmxlKCkge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuXHRudG9wbmdfdXJsX21hbmFnZXIucmVsb2FkX3VybCgpO1xuIFx0Ly8gdGFibGVfcnVsZXMudmFsdWUucmVsb2FkKCk7XG4gICAgfSwgdGltZW91dF9kZWxldGUpO1xufVxuPC9zY3JpcHQ+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuICA8bW9kYWwgcmVmPVwibW9kYWxfaWRcIj5cbiAgICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPlxuICAgICAge3sgX2kxOG4oXCJkZWxldGVfaW5hY3RpdmVfaG9zdF90aXRsZVwiKSB9fVxuICAgIDwvdGVtcGxhdGU+XG4gICAgPHRlbXBsYXRlIHYtc2xvdDpib2R5PlxuICAgICAge3sgbWVzc2FnZSB9fVxuICAgICAgPGRpdiB2LWlmPVwic2hvd19yZXR1cm5fbXNnXCIgY2xhc3M9XCJ0ZXh0LWxlZnRcIj5cbiAgICAgICAgPHAgY2xhc3M9XCJ0ZXh0LXNtLXN0YXJ0IGZzLTYgZnctbWVkaXVtIHB0LTMgbS0wXCIgOmNsYXNzPVwiKGVycikgPyAndGV4dC1kYW5nZXInIDogJ3RleHQtc3VjY2VzcydcIj48c21hbGw+e3sgcmV0dXJuX21lc3NhZ2UgfX08L3NtYWxsPjwvcD5cbiAgICAgIDwvZGl2PlxuICAgIDwvdGVtcGxhdGU+PCEtLSBtb2RhbC1ib2R5IC0tPlxuICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6Zm9vdGVyPlxuICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiZGVsZXRlX2hvc3RcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPnt7IF9pMThuKFwiZGVsZXRlXCIpIH19PC9idXR0b24+XG4gICAgPC90ZW1wbGF0ZT5cbiAgPC9tb2RhbD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgbW9kYWwgfSBmcm9tIFwiLi9tb2RhbC52dWVcIjtcbmltcG9ydCB7IG50b3BuZ191dGlsaXR5IH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXNcIjtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcbmNvbnN0IG1vZGFsX2lkID0gcmVmKG51bGwpO1xuY29uc3QgbWVzc2FnZSA9IHJlZignJylcbmNvbnN0IHJldHVybl9tZXNzYWdlID0gcmVmKCcnKVxuY29uc3Qgc2hvd19yZXR1cm5fbXNnID0gcmVmKGZhbHNlKVxuY29uc3QgZXJyID0gcmVmKGZhbHNlKTtcblxuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFtcImRlbGV0ZV9ob3N0XCJdKTtcbmNvbnN0IHJvd19pZCA9IHJlZih7fSk7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICBjb250ZXh0OiBPYmplY3QsXG59KTtcblxub25Nb3VudGVkKCgpID0+IHt9KTtcblxuYXN5bmMgZnVuY3Rpb24gZGVsZXRlX2hvc3QoKSB7XG4gIGNvbnN0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9kZWxldGUvaG9zdC9pbmFjdGl2ZV9ob3N0Lmx1YWA7XG4gIGNvbnN0IHBhcmFtcyA9IHtcbiAgICBjc3JmOiBwcm9wcy5jb250ZXh0LmNzcmYsXG4gICAgaWZpZDogcHJvcHMuY29udGV4dC5pZmlkLFxuICAgIHNlcmlhbF9rZXk6IHJvd19pZC52YWx1ZSxcbiAgfTtcblxuICBsZXQgaGVhZGVycyA9IHtcbiAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gIH07XG4gIGNvbnN0IHJlcyA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcykgfSk7IFxuICBpZihyZXMpIHtcbiAgICBlcnIudmFsdWUgPSBmYWxzZTtcbiAgICBzaG93X3JldHVybl9tc2cudmFsdWUgPSB0cnVlO1xuICAgIGxldCBudW1faG9zdHNfbXNnID0gJydcbiAgICBpZihyZXMuZGVsZXRlZF9ob3N0cyA+IDEpIHtcbiAgICAgIG51bV9ob3N0c19tc2cgPSAnLiBOdW1iZXIgaG9zdHMgZGVsZXRlZDogJyArIHJlcy5kZWxldGVkX2hvc3RzXG4gICAgfVxuICAgIHJldHVybl9tZXNzYWdlLnZhbHVlID0gaTE4bignc3VjY19kZWxfaW5hY3RpdmVfaG9zdHMnKSArIG51bV9ob3N0c19tc2dcbiAgICBlbWl0KFwiZGVsZXRlX2hvc3RcIik7XG4gICAgY2xvc2UoKTtcbiAgfSBlbHNlIHtcbiAgICBlcnIudmFsdWUgPSB0cnVlO1xuICAgIHNob3dfcmV0dXJuX21zZy52YWx1ZSA9IHRydWU7XG4gICAgcmV0dXJuX21lc3NhZ2UudmFsdWUgPSBpMThuKCdlcnJfZGVsX2luYWN0aXZlX2hvc3RzJylcbiAgfVxufVxuXG5cbmNvbnN0IHNob3cgPSAoX3Jvd19pZCwgX21lc3NhZ2UpID0+IHtcbiAgcm93X2lkLnZhbHVlID0gX3Jvd19pZDtcbiAgbWVzc2FnZS52YWx1ZSA9IF9tZXNzYWdlO1xuICBtb2RhbF9pZC52YWx1ZS5zaG93KCk7XG59O1xuXG5jb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgbW9kYWxfaWQudmFsdWUuY2xvc2UoKTtcbiAgfSwgMzAwMCAvKiAzIHNlY29uZHMgKi8pXG59O1xuXG5kZWZpbmVFeHBvc2UoeyBzaG93LCBjbG9zZSB9KTtcblxuPC9zY3JpcHQ+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuICA8bW9kYWwgcmVmPVwibW9kYWxfaWRcIj5cbiAgICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPlxuICAgICAge3sgX2kxOG4oXCJkZWxldGVcIikgfX1cbiAgICA8L3RlbXBsYXRlPlxuICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6Ym9keT5cbiAgICAgIHt7IF9pMThuKFwiZGVsZXRlX3NpbmNlXCIpIH19XG4gICAgICA8ZGl2IGNsYXNzPVwibXQtM1wiIHN0eWxlPVwibWF4LXdpZHRoOiA4cmVtO1wiPlxuICAgICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfZXBvY2hcIiA6b3B0aW9ucz1cImVwb2NoX2xpc3RcIiBAc2VsZWN0X29wdGlvbj1cInVwZGF0ZV9vcHRpb25cIj5cbiAgICAgICAgPC9TZWxlY3RTZWFyY2g+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgdi1pZj1cInNob3dfcmV0dXJuX21zZ1wiIGNsYXNzPVwidGV4dC1sZWZ0XCI+XG4gICAgICAgIDxwIGNsYXNzPVwidGV4dC1zbS1zdGFydCBmcy02IGZ3LW1lZGl1bSBwdC0zIG0tMFwiIDpjbGFzcz1cIihlcnIpID8gJ3RleHQtZGFuZ2VyJyA6ICd0ZXh0LXN1Y2Nlc3MnXCI+PHNtYWxsPnt7IHJldHVybl9tZXNzYWdlIH19PC9zbWFsbD48L3A+XG4gICAgICA8L2Rpdj5cbiAgICA8L3RlbXBsYXRlPjwhLS0gbW9kYWwtYm9keSAtLT5cblxuICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6Zm9vdGVyPlxuICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiZGVsZXRlX2hvc3RcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPnt7IF9pMThuKFwiZGVsZXRlXCIpIH19PC9idXR0b24+XG4gICAgPC90ZW1wbGF0ZT5cbiAgPC9tb2RhbD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgbW9kYWwgfSBmcm9tIFwiLi9tb2RhbC52dWVcIjtcbmltcG9ydCB7IG50b3BuZ191dGlsaXR5IH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXNcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0U2VhcmNoIH0gZnJvbSBcIi4vc2VsZWN0LXNlYXJjaC52dWVcIjtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcbmNvbnN0IGZvcm1hdCA9IHJlZignY3N2Jyk7XG5jb25zdCBzZWxlY3RlZF9lcG9jaCA9IHJlZigpO1xuY29uc3QgcmV0dXJuX21lc3NhZ2UgPSByZWYoJycpXG5jb25zdCBzaG93X3JldHVybl9tc2cgPSByZWYoZmFsc2UpXG5jb25zdCBlcnIgPSByZWYoZmFsc2UpO1xuY29uc3QgZXBvY2hfbGlzdCA9IFtcbiAgeyBsYWJlbDogX2kxOG4oXCJzaG93X2FsZXJ0cy5wcmVzZXRzLjVfbWluXCIpLCB2YWx1ZTogMzAwIH0sXG4gIHsgbGFiZWw6IF9pMThuKFwic2hvd19hbGVydHMucHJlc2V0cy4zMF9taW5cIiksIHZhbHVlOiAxODAwIH0sXG4gIHsgbGFiZWw6IF9pMThuKFwic2hvd19hbGVydHMucHJlc2V0cy5ob3VyXCIpLCB2YWx1ZTogMzYwMCB9LFxuICB7IGxhYmVsOiBfaTE4bihcInNob3dfYWxlcnRzLnByZXNldHMuMl9ob3Vyc1wiKSwgdmFsdWU6IDcyMDAgfSxcbiAgeyBsYWJlbDogX2kxOG4oXCJzaG93X2FsZXJ0cy5wcmVzZXRzLjZfaG91cnNcIiksIHZhbHVlOiAyMTYwMCB9LFxuICB7IGxhYmVsOiBfaTE4bihcInNob3dfYWxlcnRzLnByZXNldHMuMTJfaG91cnNcIiksIHZhbHVlOiA0MzIwMCB9LFxuICB7IGxhYmVsOiBfaTE4bihcInNob3dfYWxlcnRzLnByZXNldHMuZGF5XCIpLCB2YWx1ZTogODY0MDAgfSxcbiAgeyBsYWJlbDogX2kxOG4oXCJzaG93X2FsZXJ0cy5wcmVzZXRzLndlZWtcIiksIHZhbHVlOiA2MDQ4MDAgfSxcbl07XG5cbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbXCJkZWxldGVfaG9zdFwiXSk7XG5jb25zdCBtb2RhbF9pZCA9IHJlZigpO1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgY29udGV4dDogT2JqZWN0LFxufSk7XG5cbm9uTW91bnRlZCgoKSA9PiB7IFxuICBzZWxlY3RlZF9lcG9jaC52YWx1ZSA9IGVwb2NoX2xpc3RbMF07XG59KTtcblxuZnVuY3Rpb24gdXBkYXRlX29wdGlvbihzZWxlY3RlZF92YWx1ZSkge1xuICBzZWxlY3RlZF9lcG9jaC52YWx1ZSA9IHNlbGVjdGVkX3ZhbHVlO1xufVxuXG5hc3luYyBmdW5jdGlvbiBkZWxldGVfaG9zdCgpIHtcbiAgY29uc3QgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2RlbGV0ZS9ob3N0L2luYWN0aXZlX2hvc3QubHVhYDtcbiAgY29uc3QgcGFyYW1zID0ge1xuICAgIGNzcmY6IHByb3BzLmNvbnRleHQuY3NyZixcbiAgICBpZmlkOiBwcm9wcy5jb250ZXh0LmlmaWQsXG4gICAgc2VyaWFsX2tleTogc2VsZWN0ZWRfZXBvY2gudmFsdWUudmFsdWUsXG4gIH07XG5cbiAgbGV0IGhlYWRlcnMgPSB7XG4gICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICB9O1xuICBjb25zdCByZXMgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsLCB7IG1ldGhvZDogJ3Bvc3QnLCBoZWFkZXJzLCBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpIH0pO1xuICBpZihyZXMpIHtcbiAgICBlcnIudmFsdWUgPSBmYWxzZTtcbiAgICBzaG93X3JldHVybl9tc2cudmFsdWUgPSB0cnVlO1xuICAgIGxldCBudW1faG9zdHNfbXNnID0gJydcbiAgICBpZihyZXMuZGVsZXRlZF9ob3N0cyA+IDEpIHtcbiAgICAgIG51bV9ob3N0c19tc2cgPSAnLiBOdW1iZXIgaG9zdHMgZGVsZXRlZDogJyArIHJlcy5kZWxldGVkX2hvc3RzXG4gICAgfVxuICAgIHJldHVybl9tZXNzYWdlLnZhbHVlID0gaTE4bignc3VjY19kZWxfaW5hY3RpdmVfaG9zdHMnKSArIG51bV9ob3N0c19tc2dcbiAgICBlbWl0KFwiZGVsZXRlX2hvc3RcIik7XG4gICAgY2xvc2UoKTtcbiAgfSBlbHNlIHtcbiAgICBlcnIudmFsdWUgPSB0cnVlO1xuICAgIHNob3dfcmV0dXJuX21zZy52YWx1ZSA9IHRydWU7XG4gICAgcmV0dXJuX21lc3NhZ2UudmFsdWUgPSBpMThuKCdlcnJfZGVsX2luYWN0aXZlX2hvc3RzJylcbiAgfVxufVxuXG5jb25zdCBzaG93ID0gKCkgPT4ge1xuICBtb2RhbF9pZC52YWx1ZS5zaG93KCk7XG59O1xuXG5jb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgbW9kYWxfaWQudmFsdWUuY2xvc2UoKTtcbiAgfSwgMzAwMCAvKiAzIHNlY29uZHMgKi8pXG59O1xuXG5kZWZpbmVFeHBvc2UoeyBzaG93LCBjbG9zZSB9KTtcblxuPC9zY3JpcHQ+XG4iLCI8IS0tIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuICA8bW9kYWwgcmVmPVwibW9kYWxfaWRcIj5cbiAgICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPlxuICAgICAge3sgX2kxOG4oXCJkb3dubG9hZFwiKSB9fVxuICAgIDwvdGVtcGxhdGU+XG4gICAgPHRlbXBsYXRlIHYtc2xvdDpib2R5PlxuICAgICAge3sgX2kxOG4oXCJkb3dubG9hZF9mb3JtYXRcIikgfX1cbiAgICAgIDxkaXYgY2xhc3M9XCJtdC0zXCIgc3R5bGU9XCJtYXgtd2lkdGg6IDhyZW07XCI+XG4gICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfZm9ybWF0XCIgOm9wdGlvbnM9XCJmb3JtYXRfbGlzdFwiIEBzZWxlY3Rfb3B0aW9uPVwidXBkYXRlX29wdGlvblwiPlxuICAgICAgPC9TZWxlY3RTZWFyY2g+XG4gICAgPC9kaXY+XG4gICAgPC90ZW1wbGF0ZT48IS0tIG1vZGFsLWJvZHkgLS0+XG5cbiAgICA8dGVtcGxhdGUgdi1zbG90OmZvb3Rlcj5cbiAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImRvd25sb2FkXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj57eyBfaTE4bihcImRvd25sb2FkXCIpIH19PC9idXR0b24+XG4gICAgPC90ZW1wbGF0ZT5cbiAgPC9tb2RhbD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgbW9kYWwgfSBmcm9tIFwiLi9tb2RhbC52dWVcIjtcbmltcG9ydCB7IG50b3BuZ191dGlsaXR5IH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXNcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0U2VhcmNoIH0gZnJvbSBcIi4vc2VsZWN0LXNlYXJjaC52dWVcIjtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcbmNvbnN0IGZvcm1hdCA9IHJlZignY3N2Jyk7XG5jb25zdCBzZWxlY3RlZF9mb3JtYXQgPSByZWYoKTtcbmNvbnN0IGZvcm1hdF9saXN0ID0gW1xuICB7IGxhYmVsOiBfaTE4bihcImNzdlwiKSwgdmFsdWU6IFwiY3N2XCIsIHBhcmFtOiBcImNzdlwiIH0sXG4gIHsgbGFiZWw6IF9pMThuKFwianNvblwiKSwgdmFsdWU6IFwianNvblwiLCBwYXJhbTogXCJqc29uXCIgfSxcbl07XG5cbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbXCJkb3dubG9hZFwiXSk7XG5jb25zdCBtb2RhbF9pZCA9IHJlZigpO1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgY29udGV4dDogT2JqZWN0LFxufSk7XG5cbm9uTW91bnRlZCgoKSA9PiB7IFxuICBzZWxlY3RlZF9mb3JtYXQudmFsdWUgPSBmb3JtYXRfbGlzdFswXTtcbn0pO1xuXG5mdW5jdGlvbiB1cGRhdGVfb3B0aW9uKHNlbGVjdGVkX3ZhbHVlKSB7XG4gIHNlbGVjdGVkX2Zvcm1hdC52YWx1ZSA9IHNlbGVjdGVkX3ZhbHVlO1xufVxuXG5hc3luYyBmdW5jdGlvbiBkb3dubG9hZCgpIHtcbiAgbGV0IHBhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX29iamVjdCh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcbiAgcGFyYW1zLmRvd25sb2FkID0gdHJ1ZTtcbiAgcGFyYW1zLmZvcm1hdCA9IHNlbGVjdGVkX2Zvcm1hdC52YWx1ZS52YWx1ZTtcbiAgY29uc3QgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L2luYWN0aXZlX2xpc3QubHVhP2AgKyBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMocGFyYW1zKTtcbiAgbnRvcG5nX3V0aWxpdHkuZG93bmxvYWRfVVJJKHVybCwgXCJpbmFjdGl2ZV9ob3N0cy5cIiArIHNlbGVjdGVkX2Zvcm1hdC52YWx1ZS52YWx1ZSk7XG4gIGVtaXQoXCJkb3dubG9hZFwiKTtcbiAgY2xvc2UoKTtcbn1cblxuY29uc3Qgc2hvdyA9ICgpID0+IHtcbiAgbW9kYWxfaWQudmFsdWUuc2hvdygpO1xufTtcblxuY29uc3QgY2xvc2UgPSAoKSA9PiB7XG4gIG1vZGFsX2lkLnZhbHVlLmNsb3NlKCk7XG59O1xuXG5kZWZpbmVFeHBvc2UoeyBzaG93LCBjbG9zZSB9KTtcblxuPC9zY3JpcHQ+XG4iLCI8IS0tXG4gIChDKSAyMDEzLTIyIC0gbnRvcC5vcmdcbi0tPlxuXG48dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQgIGNhcmQtc2hhZG93XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgICAgICA8VGFiTGlzdCByZWY9XCJpbmFjdGl2ZV9ob3N0c190YWJfbGlzdFwiIGlkPVwiaW5hY3RpdmVfaG9zdHNfdGFiX2xpc3RcIiA6dGFiX2xpc3Q9XCJ0YWJfbGlzdFwiXG4gICAgICAgICAgICBAY2xpY2tfaXRlbT1cImNoYW5nZV9zaG93X2NoYXJ0c1wiPlxuICAgICAgICAgIDwvVGFiTGlzdD5cbiAgICAgICAgICA8IS0tXG4gICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQgY2FyZC1zaGFkb3dcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHkgcC0xXCI+XG4gICAgICAgICAgICAgIDx0cmFuc2l0aW9uIG5hbWU9XCJjb21wb25lbnQtZmFkZVwiIG1vZGU9XCJvdXQtaW5cIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGtleT1cIjFcIiB2LWlmPVwic2hvd19jaGFydHMgPT0gdHJ1ZVwiIGNsYXNzPVwicm93IG1iLTQgbXQtNFwiIGlkPVwiaG9zdF9kZXRhaWxzX3RyYWZmaWNcIj5cbiAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L3RyYW5zaXRpb24+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwidGV4dC1jZW50ZXJcIiBzdHlsZT1cImN1cnNvcjogcG9pbnRlcjtcIiBAY2xpY2s9XCJjaGFuZ2Vfc2hvd19jaGFydHNcIj5cbiAgICAgICAgICAgIDxpIHYtaWY9XCJzaG93X2NoYXJ0cyA9PSBmYWxzZVwiIGNsYXNzPVwiZmEtc29saWQgZmEtYW5nbGVzLWRvd25cIj48L2k+XG4gICAgICAgICAgICA8aSB2LWVsc2UgY2xhc3M9XCJmYS1zb2xpZCBmYS1hbmdsZXMtdXBcIj48L2k+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgLS0+XG4gICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxkaXYga2V5PVwiMVwiIHYtaWY9XCJzaG93X2NoYXJ0cyA9PSB0cnVlXCIgY2xhc3M9XCJyb3cgbWItNCBtdC00XCIgaWQ9XCJob3N0X2RldGFpbHNfdHJhZmZpY1wiPlxuICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1pZj1cInNob3dfY2hhcnRzID09IHRydWVcIiB2LWZvcj1cImNoYXJ0X29wdGlvbiBpbiBjaGFydF9vcHRpb25zXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC00XCI+XG4gICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9XCJ3aWRnZXQtbmFtZVwiPnt7IGNoYXJ0X29wdGlvbi50aXRsZSB9fTwvaDM+XG4gICAgICAgICAgICAgICAgICA8Q2hhcnQgOnJlZj1cImNoYXJ0X29wdGlvbi5yZWZcIiA6aWQ9XCJjaGFydF9vcHRpb24uaWRcIiA6Y2hhcnRfdHlwZT1cImNoYXJ0X29wdGlvbi50eXBlXCJcbiAgICAgICAgICAgICAgICAgICAgOmJhc2VfdXJsX3JlcXVlc3Q9XCJjaGFydF9vcHRpb24udXJsXCIgOnJlZ2lzdGVyX29uX3N0YXR1c19jaGFuZ2U9XCJ0cnVlXCI+XG4gICAgICAgICAgICAgICAgICA8L0NoYXJ0PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxUYWJsZVdpdGhDb25maWcgdi1lbHNlIHJlZj1cInRhYmxlX2luYWN0aXZlX2hvc3RzXCIgOnRhYmxlX2lkPVwidGFibGVfaWRcIiA6Y3NyZj1cImNzcmZcIlxuICAgICAgICAgICAgICA6Zl9tYXBfY29sdW1ucz1cIm1hcF90YWJsZV9kZWZfY29sdW1uc1wiIDpnZXRfZXh0cmFfcGFyYW1zX29iaj1cImdldF9leHRyYV9wYXJhbXNfb2JqXCJcbiAgICAgICAgICAgICAgQGN1c3RvbV9ldmVudD1cIm9uX3RhYmxlX2N1c3RvbV9ldmVudFwiPlxuICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmN1c3RvbV9oZWFkZXI+XG4gICAgICAgICAgICAgICAgPERyb3Bkb3duIHYtZm9yPVwiKHQsIHRfaW5kZXgpIGluIGZpbHRlcl90YWJsZV9hcnJheVwiXG4gICAgICAgICAgICAgICAgICA6Zl9vbl9vcGVuPVwiZ2V0X29wZW5fZmlsdGVyX3RhYmxlX2Ryb3Bkb3duKHQsIHRfaW5kZXgpXCJcbiAgICAgICAgICAgICAgICAgIDpyZWY9XCJlbCA9PiB7IGZpbHRlcl90YWJsZV9kcm9wZG93bl9hcnJheVt0X2luZGV4XSA9IGVsIH1cIiA6aGlkZGVuPVwidC5oaWRkZW5cIj4gPCEtLSBEcm9wZG93biBjb2x1bW5zIC0tPlxuICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT5cbiAgICAgICAgICAgICAgICAgICAgPFNwaW5uZXIgOnNob3c9XCJ0LnNob3dfc3Bpbm5lclwiIHNpemU9XCIxcmVtXCIgY2xhc3M9XCJtZS0xXCI+PC9TcGlubmVyPlxuICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cIm50b3BuZy10cnVuY2F0ZVwiIDp0aXRsZT1cInQudGl0bGVcIj57eyB0LmxhYmVsIH19PC9hPlxuICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6bWVudT5cbiAgICAgICAgICAgICAgICAgICAgPGEgdi1mb3I9XCJvcHQgaW4gdC5vcHRpb25zXCIgc3R5bGU9XCJjdXJzb3I6cG9pbnRlcjsgZGlzcGxheTogYmxvY2s7XCIgQGNsaWNrPVwiYWRkX3RhYmxlX2ZpbHRlcihvcHQsICRldmVudCwgdCwgdF9pbmRleClcIlxuICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwibnRvcG5nLXRydW5jYXRlIHRhZy1maWx0ZXJcIiA6dGl0bGU9XCJvcHQudmFsdWVcIj5cbiAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1pZj1cIm9wdC5jb3VudCA9PSBudWxsXCI+e3sgb3B0LmxhYmVsIH19PC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1lbHNlPnt7IG9wdC5sYWJlbCArIFwiIChcIiArIG9wdC5jb3VudCArIFwiKVwiIH19PC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICA8L0Ryb3Bkb3duPiA8IS0tIERyb3Bkb3duIGZpbHRlcnMgLS0+XG4gICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICA8L1RhYmxlV2l0aENvbmZpZz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1mb290ZXIgbXQtM1wiPlxuICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgcmVmPVwiZGVsZXRlX2FsbFwiIEBjbGljaz1cImRlbGV0ZV9hbGxfZW50cmllc1wiIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXIgbWUtMVwiPjxpXG4gICAgICAgICAgICAgICAgY2xhc3M9J2ZhcyBmYS10cmFzaCc+PC9pPiB7eyBfaTE4bihcImRlbGV0ZV9hbGxfZW50cmllc1wiKSB9fTwvYnV0dG9uPlxuICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgcmVmPVwiZGVsZXRlX29sZGVyXCIgQGNsaWNrPVwiZGVsZXRlX2VudHJpZXNfc2luY2VcIiBjbGFzcz1cImJ0biBidG4tZGFuZ2VyIG1lLTFcIj48aVxuICAgICAgICAgICAgICAgIGNsYXNzPSdmYXMgZmEtdHJhc2gnPjwvaT4ge3sgX2kxOG4oXCJkZWxldGVfb2xkZXJcIikgfX08L2J1dHRvbj5cbiAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIHJlZj1cImRvd25sb2FkXCIgQGNsaWNrPVwiZG93bmxvYWRcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeSBtZS0xXCI+PGlcbiAgICAgICAgICAgICAgICBjbGFzcz0nZmFzIGZhLWRvd25sb2FkJz48L2k+PC9idXR0b24+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuICA8TW9kYWxEZWxldGVJbmFjdGl2ZUhvc3QgcmVmPVwibW9kYWxfZGVsZXRlXCIgOmNvbnRleHQ9XCJjb250ZXh0XCIgQGRlbGV0ZV9ob3N0PVwicmVmcmVzaF90YWJsZVwiPjwvTW9kYWxEZWxldGVJbmFjdGl2ZUhvc3Q+XG4gIDxNb2RhbERlbGV0ZUluYWN0aXZlSG9zdEVwb2NoIHJlZj1cIm1vZGFsX2RlbGV0ZV9vbGRlclwiIDpjb250ZXh0PVwiY29udGV4dFwiIEBkZWxldGVfaG9zdD1cInJlZnJlc2hfdGFibGVcIj5cbiAgPC9Nb2RhbERlbGV0ZUluYWN0aXZlSG9zdEVwb2NoPlxuICA8TW9kYWxEb3dubG9hZEluYWN0aXZlSG9zdCByZWY9XCJtb2RhbF9kb3dubG9hZFwiIDpjb250ZXh0PVwiY29udGV4dFwiPjwvTW9kYWxEb3dubG9hZEluYWN0aXZlSG9zdD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG5leHRUaWNrLCBvbk1vdW50ZWQgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFRhYmxlV2l0aENvbmZpZyB9IGZyb20gXCIuL3RhYmxlLXdpdGgtY29uZmlnLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBEcm9wZG93biB9IGZyb20gXCIuL2Ryb3Bkb3duLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTcGlubmVyIH0gZnJvbSBcIi4vc3Bpbm5lci52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgQ2hhcnQgfSBmcm9tIFwiLi9jaGFydC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgVGFiTGlzdCB9IGZyb20gXCIuL3RhYi1saXN0LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbERlbGV0ZUluYWN0aXZlSG9zdCB9IGZyb20gXCIuL21vZGFsLWRlbGV0ZS1pbmFjdGl2ZS1ob3N0LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbERlbGV0ZUluYWN0aXZlSG9zdEVwb2NoIH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLWluYWN0aXZlLWhvc3QtZXBvY2gudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRG93bmxvYWRJbmFjdGl2ZUhvc3QgfSBmcm9tIFwiLi9tb2RhbC1kb3dubG9hZC1pbmFjdGl2ZS1ob3N0LnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXNcIjtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcblxuY29uc3QgdGFibGVfaWQgPSByZWYoJ2luYWN0aXZlX2hvc3RzJyk7XG5jb25zdCB0aXRsZSA9IHJlZihfaTE4bignbG9jYWxfaG9zdHNfb25seScpKTtcbmNvbnN0IGZpbHRlcl90YWJsZV9hcnJheSA9IHJlZihbXSk7XG5jb25zdCBmaWx0ZXJfdGFibGVfZHJvcGRvd25fYXJyYXkgPSByZWYoW10pO1xuY29uc3QgdGFibGVfaW5hY3RpdmVfaG9zdHMgPSByZWYoKTtcbmNvbnN0IG1vZGFsX2Rvd25sb2FkID0gcmVmKCk7XG5jb25zdCBtb2RhbF9kZWxldGUgPSByZWYoKTtcbmNvbnN0IG1vZGFsX2RlbGV0ZV9vbGRlciA9IHJlZigpO1xuY29uc3QgY2hhcnRfMSA9IHJlZigpO1xuY29uc3QgY2hhcnRfMiA9IHJlZigpO1xuY29uc3QgY2hhcnRfMyA9IHJlZigpO1xuY29uc3Qgc2hvd19jaGFydHMgPSByZWYoZmFsc2UpO1xuY29uc3QgaW5hY3RpdmVfaG9zdHNfdGFiX2xpc3QgPSByZWYoKTtcbmNvbnN0IGFwcGxpY2F0aW9uc190YWIgPSByZWYoKTtcbmNvbnN0IGNoYW5nZV9hcHBsaWNhdGlvbnNfdGFiX2V2ZW50ID0gXCJjaGFuZ2VfYXBwbGljYXRpb25zX3RhYl9ldmVudFwiO1xuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gIGlmaWQ6IE51bWJlcixcbiAgY3NyZjogU3RyaW5nLFxuICBzaG93X2hpc3RvcmljYWw6IEJvb2xlYW4sXG59KTtcbmNvbnN0IGNvbnRleHQgPSByZWYoe1xuICBjc3JmOiBwcm9wcy5jc3JmLFxuICBpZmlkOiBwcm9wcy5pZmlkXG59KVxuY29uc3QgY2hhcnRfb3B0aW9ucyA9IFtcbiAge1xuICAgIHJlZjogY2hhcnRfMSxcbiAgICB0aXRsZTogaTE4bignYWN0aXZlX2luYWN0aXZlJyksXG4gICAgdHlwZTogbnRvcENoYXJ0QXBleC50eXBlQ2hhcnQuRE9OVVQsXG4gICAgdXJsOiBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvaW5hY3RpdmUvYWN0aXZlX2luYWN0aXZlLmx1YWAsXG4gICAgaWQ6IGBhY3RpdmVfaW5hY3RpdmVfZGlzdHJvYCxcbiAgfSxcbiAge1xuICAgIHJlZjogY2hhcnRfMixcbiAgICB0aXRsZTogaTE4bignaW5hY3Rpdml0eV9wZXJpb2QnKSxcbiAgICB0eXBlOiBudG9wQ2hhcnRBcGV4LnR5cGVDaGFydC5ET05VVCxcbiAgICB1cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9pbmFjdGl2ZS9pbmFjdGl2aXR5X3BlcmlvZC5sdWFgLFxuICAgIGlkOiBgaW5hY3Rpdml0eV9wZXJpb2RgLFxuICB9LFxuICB7XG4gICAgcmVmOiBjaGFydF8zLFxuICAgIHRpdGxlOiBpMThuKCdtYW51ZmFjdHVyZXInKSxcbiAgICB0eXBlOiBudG9wQ2hhcnRBcGV4LnR5cGVDaGFydC5ET05VVCxcbiAgICB1cmw6IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9pbmFjdGl2ZS9pbmFjdGl2ZV9tYW51ZmFjdHVyZXIubHVhYCxcbiAgICBpZDogYGluYWN0aXZlX21hbnVmYWN0dXJlcmAsXG4gIH0sXG5dXG5cbmNvbnN0IHRhYl9saXN0ID0gcmVmKFtcbiAge1xuICAgIHRpdGxlOiBpMThuKCd0YWJsZV92aWV3JyksXG4gICAgYWN0aXZlOiAoc2hvd19jaGFydHMudmFsdWUgPT0gZmFsc2UpLFxuICAgIGlkOiBcInRhYmxlXCJcbiAgfSxcbiAge1xuICAgIHRpdGxlOiBpMThuKCdjaGFydF92aWV3JyksXG4gICAgYWN0aXZlOiAoc2hvd19jaGFydHMudmFsdWUgPT0gdHJ1ZSksXG4gICAgaWQ6IFwiY2hhcnRcIlxuICB9LFxuXSlcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxub25Nb3VudGVkKGFzeW5jICgpID0+IHtcbiAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLm9uX2N1c3RvbV9ldmVudChcImNoYW5nZV9hcHBsaWNhdGlvbnNfdGFiX2V2ZW50XCIsIGNoYW5nZV9hcHBsaWNhdGlvbnNfdGFiX2V2ZW50LCAodGFiKSA9PiB7XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKCd2aWV3JywgdGFiLmlkKTtcbiAgfSk7XG4gIGxvYWRfdGFibGVfZmlsdGVyc19vdmVydmlldygpO1xufSk7XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmNvbnN0IGdldF9vcGVuX2ZpbHRlcl90YWJsZV9kcm9wZG93biA9IChmaWx0ZXIsIGZpbHRlcl9pbmRleCkgPT4ge1xuICByZXR1cm4gKF8pID0+IHtcbiAgICBsb2FkX3RhYmxlX2ZpbHRlcnMoZmlsdGVyLCBmaWx0ZXJfaW5kZXgpO1xuICB9O1xufTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuYXN5bmMgZnVuY3Rpb24gbG9hZF90YWJsZV9maWx0ZXJzX292ZXJ2aWV3KGFjdGlvbikge1xuICBmaWx0ZXJfdGFibGVfYXJyYXkudmFsdWUgPSBhd2FpdCBsb2FkX3RhYmxlX2ZpbHRlcnNfYXJyYXkoXCJvdmVydmlld1wiKTtcbiAgc2V0X2ZpbHRlcl9hcnJheV9sYWJlbCgpO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5mdW5jdGlvbiBzZXRfZmlsdGVyX2FycmF5X2xhYmVsKCkge1xuICBmaWx0ZXJfdGFibGVfYXJyYXkudmFsdWUuZm9yRWFjaCgoZWwsIGluZGV4KSA9PiB7XG4gICAgaWYgKGVsLmJhc2ljX2xhYmVsID09IG51bGwpIHtcbiAgICAgIGVsLmJhc2ljX2xhYmVsID0gZWwubGFiZWw7XG4gICAgfVxuXG4gICAgY29uc3QgdXJsX2VudHJ5ID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoZWwuaWQpXG4gICAgaWYgKHVybF9lbnRyeSAhPSBudWxsKSB7XG4gICAgICBlbC5vcHRpb25zLmZvckVhY2goKG9wdGlvbikgPT4ge1xuICAgICAgICBpZiAob3B0aW9uLnZhbHVlLnRvU3RyaW5nKCkgPT09IHVybF9lbnRyeSkge1xuICAgICAgICAgIGVsLmxhYmVsID0gYCR7ZWwuYmFzaWNfbGFiZWx9OiAke29wdGlvbi5sYWJlbCB8fCBvcHRpb24udmFsdWV9YFxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICBlbC5sYWJlbCA9IGAke2VsLmJhc2ljX2xhYmVsfTogJHtlbC5vcHRpb25zWzBdLmxhYmVsIHx8IGVsLm9wdGlvbnNbMF0udmFsdWV9YFxuICAgIH1cbiAgfSlcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuYXN5bmMgZnVuY3Rpb24gbG9hZF90YWJsZV9maWx0ZXJzKGZpbHRlciwgZmlsdGVyX2luZGV4KSB7XG4gIGZpbHRlci5zaG93X3NwaW5uZXIgPSB0cnVlO1xuICBhd2FpdCBuZXh0VGljaygpO1xuICBpZiAoZmlsdGVyLmRhdGFfbG9hZGVkID09IGZhbHNlKSB7XG4gICAgbGV0IG5ld19maWx0ZXJfYXJyYXkgPSBhd2FpdCBsb2FkX3RhYmxlX2ZpbHRlcnNfYXJyYXkoZmlsdGVyLmlkLCBmaWx0ZXIpO1xuICAgIGZpbHRlci5vcHRpb25zID0gbmV3X2ZpbHRlcl9hcnJheS5maW5kKCh0KSA9PiB0LmlkID09IGZpbHRlci5pZCkub3B0aW9ucztcbiAgICBhd2FpdCBuZXh0VGljaygpO1xuICAgIGxldCBkcm9wZG93biA9IGZpbHRlcl90YWJsZV9kcm9wZG93bl9hcnJheS52YWx1ZVtmaWx0ZXJfaW5kZXhdO1xuICAgIGRyb3Bkb3duLmxvYWRfbWVudSgpO1xuICB9XG4gIGZpbHRlci5zaG93X3NwaW5uZXIgPSBmYWxzZTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuYXN5bmMgZnVuY3Rpb24gbG9hZF90YWJsZV9maWx0ZXJzX2FycmF5KGFjdGlvbikge1xuICBjb25zdCBwYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9wYXJhbXMoKTtcbiAgY29uc3QgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L2luYWN0aXZlX2ZpbHRlcnMubHVhP2FjdGlvbj0ke2FjdGlvbn0mJHtwYXJhbXN9YDtcbiAgbGV0IHJlcyA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwpO1xuICByZXR1cm4gcmVzLm1hcCgodCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBpZDogdC5hY3Rpb24gfHwgdC5uYW1lLFxuICAgICAgbGFiZWw6IHQubGFiZWwsXG4gICAgICB0aXRsZTogdC50b29sdGlwLFxuICAgICAgZGF0YV9sb2FkZWQ6IGFjdGlvbiAhPSAnb3ZlcnZpZXcnLFxuICAgICAgb3B0aW9uczogdC52YWx1ZSxcbiAgICAgIGhpZGRlbjogKHQudmFsdWUubGVuZ3RoID09IDEpXG4gICAgfTtcbiAgfSk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmZ1bmN0aW9uIGFkZF90YWJsZV9maWx0ZXIob3B0LCBldmVudCwgZmlsdGVyLCBmaWx0ZXJfaW5kZXgpIHtcbiAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIG50b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChvcHQua2V5LCBgJHtvcHQudmFsdWV9YCk7XG4gIHNldF9maWx0ZXJfYXJyYXlfbGFiZWwoKTtcbiAgdGFibGVfaW5hY3RpdmVfaG9zdHMudmFsdWUucmVmcmVzaF90YWJsZSgpO1xuICBpZiAoc2hvd19jaGFydHMudmFsdWUgPT0gdHJ1ZSkge1xuICAgIGNoYXJ0X29wdGlvbnMuZm9yRWFjaCgoZWwpID0+IHtcbiAgICAgIGVsLnJlZi52YWx1ZVswXS51cGRhdGVfY2hhcnQoKVxuICAgIH0pXG4gIH1cbiAgbG9hZF90YWJsZV9maWx0ZXJzKGZpbHRlciwgZmlsdGVyX2luZGV4KVxufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5mdW5jdGlvbiByZWZyZXNoX3RhYmxlKCkge1xuICB0YWJsZV9pbmFjdGl2ZV9ob3N0cy52YWx1ZS5yZWZyZXNoX3RhYmxlKCk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmZ1bmN0aW9uIGNoYW5nZV9zaG93X2NoYXJ0cyhpdGVtKSB7XG4gIHNob3dfY2hhcnRzLnZhbHVlID0gIXNob3dfY2hhcnRzLnZhbHVlO1xuICB0YWJfbGlzdC52YWx1ZS5mb3JFYWNoKChpKSA9PiB7XG4gICAgaS5hY3RpdmUgPSBmYWxzZTtcbiAgICBpZihpLmlkID09IFwidGFibGVcIiAmJiBzaG93X2NoYXJ0cy52YWx1ZSA9PSBmYWxzZSlcbiAgICAgIGkuYWN0aXZlID0gdHJ1ZTtcbiAgICBlbHNlIGlmKGkuaWQgPT0gXCJjaGFydFwiICYmIHNob3dfY2hhcnRzLnZhbHVlID09IHRydWUpXG4gICAgICBpLmFjdGl2ZSA9IHRydWU7XG4gIH0pO1xuICBudG9wbmdfZXZlbnRzX21hbmFnZXIuZW1pdF9jdXN0b21fZXZlbnQoY2hhbmdlX2FwcGxpY2F0aW9uc190YWJfZXZlbnQsIGl0ZW0pO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5jb25zdCBnZXRfZXh0cmFfcGFyYW1zX29iaiA9ICgpID0+IHtcbiAgbGV0IGV4dHJhX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX29iamVjdCgpO1xuICByZXR1cm4gZXh0cmFfcGFyYW1zO1xufTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuZnVuY3Rpb24gb25fdGFibGVfY3VzdG9tX2V2ZW50KGV2ZW50KSB7XG4gIGxldCBldmVudHNfbWFuYWdlZCA9IHtcbiAgICBcImNsaWNrX2J1dHRvbl9oaXN0b3JpY2FsX2Zsb3dzXCI6IGNsaWNrX2J1dHRvbl9oaXN0b3JpY2FsX2Zsb3dzLFxuICAgIFwiY2xpY2tfYnV0dG9uX2RlbGV0ZVwiOiBjbGlja19idXR0b25fZGVsZXRlLFxuICB9O1xuICBpZiAoZXZlbnRzX21hbmFnZWRbZXZlbnQuZXZlbnRfaWRdID09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgZXZlbnRzX21hbmFnZWRbZXZlbnQuZXZlbnRfaWRdKGV2ZW50KTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuZnVuY3Rpb24gY2xpY2tfYnV0dG9uX2RlbGV0ZShldmVudCkge1xuICBjb25zdCByb3cgPSBldmVudC5yb3cuc2VyaWFsX2tleTtcbiAgbW9kYWxfZGVsZXRlLnZhbHVlLnNob3cocm93LCBpMThuKCdkZWxldGVfaW5hY3RpdmVfaG9zdCcsIHsgaG9zdDogZXZlbnQucm93Lmhvc3QuaXBfYWRkcmVzcy52YWx1ZSB9KSk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmZ1bmN0aW9uIGRlbGV0ZV9hbGxfZW50cmllcygpIHtcbiAgbW9kYWxfZGVsZXRlLnZhbHVlLnNob3coJ2FsbCcsIGkxOG4oJ2RlbGV0ZV9hbGxfaW5hY3RpdmVfaG9zdHMnKSk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmZ1bmN0aW9uIGRlbGV0ZV9lbnRyaWVzX3NpbmNlKCkge1xuICBtb2RhbF9kZWxldGVfb2xkZXIudmFsdWUuc2hvdygpO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5mdW5jdGlvbiBkb3dubG9hZCgpIHtcbiAgbW9kYWxfZG93bmxvYWQudmFsdWUuc2hvdygpO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5mdW5jdGlvbiBjbGlja19idXR0b25faGlzdG9yaWNhbF9mbG93cyhldmVudCkge1xuICBjb25zdCByb3cgPSBldmVudC5yb3c7XG4gIGxldCB2bGFuID0gJydcbiAgaWYocm93LnZsYW4gIT0gMClcbiAgICB2bGFuID0gYEAke3Jvdy52bGFufWBcbiAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9kYl9zZWFyY2gubHVhP2Vwb2NoX2JlZ2luPSR7cm93LmVwb2NoX2JlZ2luIC0gMTAwfSZlcG9jaF9lbmQ9JHtyb3cuZXBvY2hfZW5kICsgMTAwfSZpcD0ke3Jvdy5pcF9hZGRyZXNzLnZhbHVlIHx8IHJvdy5pcF9hZGRyZXNzfSR7dmxhbn07ZXEmbWFjPSR7cm93Lm1hY19hZGRyZXNzLnZhbHVlIHx8IHJvdy5tYWNfYWRkcmVzc307ZXFgO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5jb25zdCBtYXBfdGFibGVfZGVmX2NvbHVtbnMgPSAoY29sdW1ucykgPT4ge1xuICBsZXQgbWFwX2NvbHVtbnMgPSB7XG4gICAgXCJtYWNfYWRkcmVzc1wiOiAobWFjLCByb3cpID0+IHtcbiAgICAgIGxldCByZXN1bHQgPSBtYWM7XG4gICAgICBpZiAobWFjICE9IG51bGwgJiZcbiAgICAgICAgbWFjLnVybCAhPSBudWxsICYmXG4gICAgICAgIG1hYy5uYW1lICE9IG51bGwgJiZcbiAgICAgICAgbWFjLnZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgcmVzdWx0ID0gYDxhIGhyZWY9JyR7aHR0cF9wcmVmaXh9JHttYWMudXJsfScgdGl0bGU9JyR7bWFjLnZhbHVlfSc+JHttYWMubmFtZX08L2E+YFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG4gICAgXCJuZXR3b3JrXCI6IChuZXR3b3JrLCByb3cpID0+IHtcbiAgICAgIGxldCByZXN1bHQgPSBuZXR3b3JrO1xuICAgICAgaWYgKG5ldHdvcmsudXJsICE9IG51bGwgJiZcbiAgICAgICAgbmV0d29yay5uYW1lICE9IG51bGwgJiZcbiAgICAgICAgbmV0d29yay52YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIHJlc3VsdCA9IGA8YSBocmVmPScke2h0dHBfcHJlZml4fSR7bmV0d29yay51cmx9JyB0aXRsZT0nJHtuZXR3b3JrLnZhbHVlfSc+JHtuZXR3b3JrLm5hbWV9PC9hPmBcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuICAgIFwiaG9zdFwiOiAoaG9zdCwgcm93KSA9PiB7XG4gICAgICBsZXQgcmVzdWx0ID0gJyc7XG4gICAgICBjb25zdCBpcF9hZGRyZXNzID0gaG9zdC5pcF9hZGRyZXNzO1xuICAgICAgcmVzdWx0ID0gYDxhIGhyZWY9JyR7aHR0cF9wcmVmaXh9JHtpcF9hZGRyZXNzLnVybH0nIHRpdGxlPScke2lwX2FkZHJlc3MudmFsdWV9Jz4ke2lwX2FkZHJlc3MubmFtZX08L2E+YFxuXG4gICAgICBpZiAoaG9zdC52bGFuICE9IG51bGwgJiYgaG9zdC52bGFuLm5hbWUgIT0gXCJcIikge1xuICAgICAgICBjb25zdCB2bGFuID0gaG9zdC52bGFuO1xuICAgICAgICBpZiAodmxhbi51cmwgIT0gbnVsbCkge1xuICAgICAgICAgIHJlc3VsdCA9IGAke3Jlc3VsdH1APGEgaHJlZj0nJHtodHRwX3ByZWZpeH0ke3ZsYW4udXJsIHx8ICcjJ30nIHRpdGxlPScke3ZsYW4udmFsdWV9Jz4ke3ZsYW4ubmFtZX08L2E+YFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdCA9IGAke3Jlc3VsdH1AJHt2bGFuLm5hbWV9YFxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYCR7cmVzdWx0fSAke2hvc3QuZGV2aWNlX3R5cGV9YDtcbiAgICB9LFxuICB9O1xuXG4gIGNvbHVtbnMuZm9yRWFjaCgoYykgPT4ge1xuICAgIGMucmVuZGVyX2Z1bmMgPSBtYXBfY29sdW1uc1tjLmRhdGFfZmllbGRdO1xuICAgIGlmIChjLmlkID09IFwiYWN0aW9uc1wiKSB7XG4gICAgICBjb25zdCB2aXNpYmxlX2RpY3QgPSB7XG4gICAgICAgIGhpc3RvcmljYWxfZGF0YTogcHJvcHMuc2hvd19oaXN0b3JpY2FsLFxuICAgICAgfTtcbiAgICAgIGMuYnV0dG9uX2RlZl9hcnJheS5mb3JFYWNoKChiKSA9PiB7XG4gICAgICAgIGlmICghdmlzaWJsZV9kaWN0W2IuaWRdKSB7XG4gICAgICAgICAgYi5jbGFzcy5wdXNoKFwiZGlzYWJsZWRcIik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGNvbHVtbnM7XG59O1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG48L3NjcmlwdD5cbiIsIjwhLS1cbiAgKEMpIDIwMTMtMjIgLSBudG9wLm9yZ1xuLS0+XG5cbjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwibXQtNCBjYXJkIGNhcmQtc2hhZG93XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgICAgICA8Qm9vdHN0cmFwVGFibGUgOmhvcml6b250YWw9XCJ0cnVlXCIgOmlkPVwidGFibGVfaWRcIiA6cm93cz1cInN0YXRzX3Jvd3NcIiA6cHJpbnRfaHRtbF90aXRsZT1cInByaW50X2h0bWxfdGl0bGVcIlxuICAgICAgICAgICAgOnByaW50X2h0bWxfcm93PVwicHJpbnRfc3RhdHNfcm93XCI+XG4gICAgICAgICAgPC9Cb290c3RyYXBUYWJsZT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIEJvb3RzdHJhcFRhYmxlIH0gZnJvbSBcIi4vYm9vdHN0cmFwLXRhYmxlLnZ1ZVwiO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuXG5jb25zdCB1cmwgPSBcIi9sdWEvcmVzdC92Mi9nZXQvaG9zdC9pbmFjdGl2ZV9ob3N0Lmx1YVwiO1xuY29uc3QgdGFibGVfaWQgPSByZWYoJ2luYWN0aXZlX2hvc3RfZGV0YWlscycpO1xuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gIGlmaWQ6IE51bWJlcixcbiAgY3NyZjogU3RyaW5nLFxufSk7XG5cbmNvbnN0IHN0YXRzX3Jvd3MgPSByZWYoW10pO1xuXG5jb25zdCBwcmludF9odG1sX3RpdGxlID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIChuYW1lIHx8IFwiXCIpO1xufVxuXG5jb25zdCBwcmludF9zdGF0c19yb3cgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgbGV0IGxhYmVsID0gdmFsdWUubmFtZSB8fCAnJztcbiAgaWYgKHZhbHVlLnVybCAmJiB2YWx1ZS51cmwgIT0gJycpXG4gICAgbGFiZWwgPSBgPGEgaHJlZj1cIiR7aHR0cF9wcmVmaXh9JHt2YWx1ZS51cmx9XCI+JHtsYWJlbH08Lz5gXG5cbiAgcmV0dXJuIGxhYmVsO1xufVxuXG5vbk1vdW50ZWQoYXN5bmMgKCkgPT4ge1xuICBjb25zdCBleHRyYV9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9vYmplY3QoKTtcbiAgY29uc3QgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyhleHRyYV9wYXJhbXMpO1xuICBjb25zdCBob3N0X3N0YXRzID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KGAke2h0dHBfcHJlZml4fSR7dXJsfT8ke3VybF9wYXJhbXN9YCk7XG4gIHN0YXRzX3Jvd3MudmFsdWUgPSBob3N0X3N0YXRzLmhvc3RfaW5mb1xuICAkKCcjbmF2YmFyX3RpdGxlJykuaHRtbChcIjxpIGNsYXNzPSdmYXMgZmEtbGFwdG9wJz48L2k+IFwiICsgX2kxOG4oJ2hvc3RfZGV0YWlscy5ob3N0JykgKyBcIjogXCIgKyBob3N0X3N0YXRzLmhvc3RfbmFtZSk7XG59KTtcblxuPC9zY3JpcHQ+XG4iLCI8IS0tIChDKSAyMDIyLTIzIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuICA8dGFibGUgY2xhc3M9XCJ0YWJsZSB0YWJsZS1ib3JkZXJlZCB0YWJsZS1zdHJpcGVkXCI+XG4gICAgPHRyPlxuICAgIDx0aD4ge3sgX2kxOG4oXCJmbG93ZGV2X2FsaWFzXCIpIH19IDwvdGg+XG4gICAgICA8dGQ+XG4gICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIHJlZj1cImN1c3RvbV9uYW1lXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBAaW5wdXQ9XCJjaGVja0Rpc2FibGVkXCI+XG4gICAgICA8L3RkPlxuICAgIDwvdHI+XG4gIDwvdGFibGU+XG4gIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiA6Y2xhc3M9XCJbZGlzYWJsZWQgPyAnZGlzYWJsZWQnIDogJyddXCIgQGNsaWNrPVwidXBkYXRlRmxvd0RldkFsaWFzXCIgaWQ9XCJzYXZlXCI+IHt7IF9pMThuKFwic2F2ZV9zZXR0aW5nc1wiKSB9fSA8L2J1dHRvbj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCB9IGZyb20gXCJ2dWVcIjtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcbmNvbnN0IGN1c3RvbV9uYW1lID0gcmVmKG51bGwpO1xuY29uc3QgcHJldl9uYW1lID0gcmVmKCcnKTtcbmNvbnN0IGRpc2FibGVkID0gcmVmKHRydWUpO1xuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gIGlmaWQ6IE51bWJlcixcbiAgY3NyZjogU3RyaW5nLFxuICBmbG93ZGV2X2lwOiBTdHJpbmcsXG59KTtcbmNvbnN0IGdldF9mbG93ZGV2X2FsaWFzX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L2Zsb3dkZXZpY2UvYWxpYXMubHVhP2Zsb3dkZXZfaXA9JHtwcm9wcy5mbG93ZGV2X2lwfSZpZmlkPSR7cHJvcHMuaWZpZH1gXG5jb25zdCB1cGRhdGVfZmxvd2Rldl9hbGlhc191cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL3NldC9mbG93ZGV2aWNlL2FsaWFzLmx1YWBcblxub25Nb3VudGVkKGFzeW5jICgpID0+IHtcbiAgZ2V0Rmxvd0RldkFsaWFzKCk7XG59KTtcblxuYXN5bmMgZnVuY3Rpb24gZ2V0Rmxvd0RldkFsaWFzKCkge1xuICBjb25zdCByc3AgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QoYCR7Z2V0X2Zsb3dkZXZfYWxpYXNfdXJsfWAsIHsgbWV0aG9kOiAnZ2V0JyB9KTtcbiAgY3VzdG9tX25hbWUudmFsdWUudmFsdWUgPSByc3AgfHwgcHJvcHMuZmxvd2Rldl9pcDtcbiAgcHJldl9uYW1lLnZhbHVlID0gY3VzdG9tX25hbWUudmFsdWUudmFsdWU7XG59XG5cbmNvbnN0IHVwZGF0ZUZsb3dEZXZBbGlhcyA9IGFzeW5jIGZ1bmN0aW9uKCkge1xuICBjb25zdCBwYXJhbXMgPSB7XG4gICAgY3NyZjogcHJvcHMuY3NyZixcbiAgICBmbG93ZGV2X2lwOiBwcm9wcy5mbG93ZGV2X2lwLFxuICAgIGFsaWFzOiBjdXN0b21fbmFtZS52YWx1ZS52YWx1ZSxcbiAgICBpZmlkOiBwcm9wcy5pZmlkXG4gIH07XG4gIGxldCBoZWFkZXJzID0ge1xuICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgfTtcbiAgYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVwZGF0ZV9mbG93ZGV2X2FsaWFzX3VybCwgeyBtZXRob2Q6ICdwb3N0JywgaGVhZGVycywgYm9keTogSlNPTi5zdHJpbmdpZnkocGFyYW1zKSB9KTtcbiAgZ2V0Rmxvd0RldkFsaWFzKCk7XG4gIGRpc2FibGVkLnZhbHVlID0gdHJ1ZTtcbn1cblxuY29uc3QgY2hlY2tEaXNhYmxlZCA9IGZ1bmN0aW9uKCkge1xuICBpZiAocHJldl9uYW1lLnZhbHVlID09IGN1c3RvbV9uYW1lLnZhbHVlLnZhbHVlKSB7XG4gICAgZGlzYWJsZWQudmFsdWUgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIGRpc2FibGVkLnZhbHVlID0gZmFsc2U7XG4gIH1cbn1cbjwvc2NyaXB0PiIsIjwhLS0gKEMpIDIwMjItMjMgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG4gIDx0YWJsZSBjbGFzcz1cInRhYmxlIHRhYmxlLXN0cmlwZWQgdGFibGUtYm9yZGVyZWQgY29sLXNtLTEyXCI+XG4gICAgPHRib2R5PlxuICAgICAgPHRyPlxuICAgICAgICA8dGggY2xhc3M9XCJjb2wtM1wiPiB7eyBfaTE4bihcImludGVyZmFjZV9hbGlhc1wiKSB9fSA8L3RoPlxuICAgICAgICA8dGQgY2xhc3M9XCJjb2wtOVwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggcHMtMFwiPlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgcmVmPVwiY3VzdG9tX25hbWVcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIHN0eWxlPVwid2lkdGg6IDE2cmVtO1wiIEBpbnB1dD1cImNoZWNrRGlzYWJsZWRcIj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC90ZD5cbiAgICAgIDwvdHI+XG4gICAgICA8dHI+XG4gICAgICAgIDx0aCBjbGFzcz1cImNvbC0zXCI+IHt7IF9pMThuKFwiaW50ZXJmYWNlX3VwbGlua19zcGVlZFwiKSB9fSA8L3RoPlxuICAgICAgICA8dGQgY2xhc3M9XCJjb2wtOVwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggcHMtMFwiPlxuICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBtZS0yXCI+e3sgX2kxOG4oXCJnYml0XCIpIH19PC9sYWJlbD5cbiAgICAgICAgICAgIDxpbnB1dCByZWY9XCJ1cGxpbmtfc3BlZWRcIiBjbGFzcz1cImZvcm0tY29udHJvbCB0ZXh0LWVuZFwiIHR5cGU9XCJudW1iZXJcIiBtaW49XCIwXCIgc3RlcD1cIjAuMDFcIiBzdHlsZT1cIndpZHRoOiA4cmVtO1wiXG4gICAgICAgICAgICAgIEBpbnB1dD1cImNoZWNrRGlzYWJsZWRcIiAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L3RkPlxuICAgICAgPC90cj5cbiAgICAgIDx0cj5cbiAgICAgICAgPHRoIGNsYXNzPVwiY29sLTNcIj4ge3sgX2kxOG4oXCJpbnRlcmZhY2VfZG93bmxpbmtfc3BlZWRcIikgfX0gPC90aD5cbiAgICAgICAgPHRkIGNsYXNzPVwiY29sLTlcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiZC1mbGV4IHBzLTBcIj5cbiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXIgbWUtMlwiPnt7IF9pMThuKFwiZ2JpdFwiKSB9fTwvbGFiZWw+XG4gICAgICAgICAgICA8aW5wdXQgcmVmPVwiZG93bmxpbmtfc3BlZWRcIiBjbGFzcz1cImZvcm0tY29udHJvbCB0ZXh0LWVuZFwiIHR5cGU9XCJudW1iZXJcIiBtaW49XCIwXCIgc3RlcD1cIjAuMDAxXCJcbiAgICAgICAgICAgICAgc3R5bGU9XCJ3aWR0aDogOHJlbTtcIiBAaW5wdXQ9XCJjaGVja0Rpc2FibGVkXCIgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC90ZD5cbiAgICAgIDwvdHI+XG4gICAgPC90Ym9keT5cbiAgPC90YWJsZT5cbiAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeSBkLWZsZXggbXMtYXV0b1wiIDpjbGFzcz1cIltkaXNhYmxlZCA/ICdkaXNhYmxlZCcgOiAnJ11cIiBAY2xpY2s9XCJ1cGRhdGVJbnRlcmZhY2VDb25maWdcIlxuICAgIGlkPVwic2F2ZVwiPiB7e1xuICAgICAgX2kxOG4oXCJzYXZlX3NldHRpbmdzXCIpIH19IDwvYnV0dG9uPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkIH0gZnJvbSBcInZ1ZVwiO1xuXG5jb25zdCBCSVRfVkFMVUUgPSAxMDAwMDAwMDAwO1xuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcbmNvbnN0IGN1c3RvbV9uYW1lID0gcmVmKG51bGwpO1xuY29uc3QgcHJldl9uYW1lID0gcmVmKCcnKTtcbmNvbnN0IHVwbGlua19zcGVlZCA9IHJlZihudWxsKTtcbmNvbnN0IHByZXZfdXBsaW5rX3NwZWVkID0gcmVmKCcnKTtcbmNvbnN0IGRvd25saW5rX3NwZWVkID0gcmVmKG51bGwpO1xuY29uc3QgcHJldl9kb3dubGlua19zcGVlZCA9IHJlZignJyk7XG5jb25zdCBkaXNhYmxlZCA9IHJlZih0cnVlKTtcbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICBpZmlkOiBTdHJpbmcsXG4gIGNzcmY6IFN0cmluZyxcbiAgZGV2aWNlX2lwOiBTdHJpbmcsXG4gIHBvcnRfaW5kZXg6IFN0cmluZyxcbn0pO1xuXG5jb25zdCBnZXRfaW50ZXJmYWNlX2NvbmZpZ191cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2dldC9mbG93ZGV2aWNlL2ludGVyZmFjZS9jb25maWcubHVhP2RldmljZV9pcD0ke3Byb3BzLmRldmljZV9pcH0mcG9ydF9pbmRleD0ke3Byb3BzLnBvcnRfaW5kZXh9JmlmaWQ9JHtwcm9wcy5pZmlkfWBcbmNvbnN0IHVwZGF0ZV9pbnRlcmZhY2VfY29uZmlnX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvc2V0L2Zsb3dkZXZpY2UvaW50ZXJmYWNlL2NvbmZpZy5sdWFgXG5cbm9uTW91bnRlZChhc3luYyAoKSA9PiB7XG4gIGdldEZsb3dEZXZpY2VJbnRlcmZhY2VDb25maWcoKTtcbn0pO1xuXG5hc3luYyBmdW5jdGlvbiBnZXRGbG93RGV2aWNlSW50ZXJmYWNlQ29uZmlnKCkge1xuICBjb25zdCByc3AgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QoYCR7Z2V0X2ludGVyZmFjZV9jb25maWdfdXJsfWAsIHsgbWV0aG9kOiAnZ2V0JyB9KTtcbiAgY3VzdG9tX25hbWUudmFsdWUudmFsdWUgPSByc3AuYWxpYXM7XG4gIHByZXZfbmFtZS52YWx1ZSA9IGN1c3RvbV9uYW1lLnZhbHVlLnZhbHVlO1xuICB1cGxpbmtfc3BlZWQudmFsdWUudmFsdWUgPSByc3AudXBsaW5rX3NwZWVkIC8gQklUX1ZBTFVFO1xuICBwcmV2X3VwbGlua19zcGVlZC52YWx1ZSA9IHVwbGlua19zcGVlZC52YWx1ZS52YWx1ZTtcbiAgZG93bmxpbmtfc3BlZWQudmFsdWUudmFsdWUgPSByc3AuZG93bmxpbmtfc3BlZWQgLyBCSVRfVkFMVUU7XG4gIHByZXZfZG93bmxpbmtfc3BlZWQudmFsdWUgPSBkb3dubGlua19zcGVlZC52YWx1ZS52YWx1ZTtcbn1cblxuY29uc3QgdXBkYXRlSW50ZXJmYWNlQ29uZmlnID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBjb25zdCBwYXJhbXMgPSB7XG4gICAgaWZpZDogcHJvcHMuaWZpZCxcbiAgICBjc3JmOiBwcm9wcy5jc3JmLFxuICAgIGRldmljZV9pcDogcHJvcHMuZGV2aWNlX2lwLFxuICAgIHBvcnRfaW5kZXg6IHByb3BzLnBvcnRfaW5kZXgsXG4gICAgYWxpYXM6IGN1c3RvbV9uYW1lLnZhbHVlLnZhbHVlLFxuICAgIHVwbGlua19zcGVlZDogTnVtYmVyKHVwbGlua19zcGVlZC52YWx1ZS52YWx1ZSkgKiBCSVRfVkFMVUUsXG4gICAgZG93bmxpbmtfc3BlZWQ6IE51bWJlcihkb3dubGlua19zcGVlZC52YWx1ZS52YWx1ZSkgKiBCSVRfVkFMVUUsXG4gIH07XG4gIGxldCBoZWFkZXJzID0ge1xuICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgfTtcbiAgYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVwZGF0ZV9pbnRlcmZhY2VfY29uZmlnX3VybCwgeyBtZXRob2Q6ICdwb3N0JywgaGVhZGVycywgYm9keTogSlNPTi5zdHJpbmdpZnkocGFyYW1zKSB9KTtcbiAgZ2V0Rmxvd0RldmljZUludGVyZmFjZUNvbmZpZygpO1xuICBkaXNhYmxlZC52YWx1ZSA9IHRydWU7XG59XG5cbmNvbnN0IGNoZWNrRGlzYWJsZWQgPSBmdW5jdGlvbiAoKSB7XG4gIGlmIChwcmV2X25hbWUudmFsdWUgPT0gY3VzdG9tX25hbWUudmFsdWUudmFsdWVcbiAgICAmJiBwcmV2X3VwbGlua19zcGVlZC52YWx1ZSA9PSB1cGxpbmtfc3BlZWQudmFsdWUudmFsdWVcbiAgICAmJiBwcmV2X2Rvd25saW5rX3NwZWVkLnZhbHVlID09IGRvd25saW5rX3NwZWVkLnZhbHVlLnZhbHVlKSB7XG4gICAgZGlzYWJsZWQudmFsdWUgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIGRpc2FibGVkLnZhbHVlID0gZmFsc2U7XG4gIH1cbn1cbjwvc2NyaXB0PiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG48bW9kYWwgQHNob3dlZD1cInNob3dlZCgpXCIgcmVmPVwibW9kYWxfaWRcIj5cbiAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT57e3RpdGxlfX08L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAge3sgYm9keSB9fVxuICAgIDxOb3RlTGlzdCB2LWlmPVwic2hvd19ub3RlX2xpc3RcIlxuICAgICAgOm5vdGVfbGlzdD1cIm5vdGVfbGlzdFwiPlxuICAgIDwvTm90ZUxpc3Q+XG4gIDwvdGVtcGxhdGU+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Zm9vdGVyPlxuICAgIDx0ZW1wbGF0ZSB2LWlmPVwiZGVsZXRlX3R5cGUgPT0gJ2RlbGV0ZV9hbGwnIHx8IGRlbGV0ZV90eXBlID09ICdkZWxldGVfc2luZ2xlX3JvdycgfHwgZGVsZXRlX3R5cGUgPT0gJ2RlbGV0ZV9zaW5nbGVfcmVwb3J0J1wiPlxuICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiZGVsZXRlX1wiIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXJcIj57e19pMThuKCdkZWxldGUnKX19PC9idXR0b24+XG4gICAgPC90ZW1wbGF0ZT5cbiAgICA8dGVtcGxhdGUgdi1lbHNlPlxuICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiZGVsZXRlX1wiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+e3tfaTE4bignaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLnNjaGVkdWxlX3NjYW4nKX19PC9idXR0b24+XG5cbiAgICA8L3RlbXBsYXRlPlxuICA8L3RlbXBsYXRlPlxuPC9tb2RhbD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgY29tcHV0ZWQsIHdhdGNoIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBtb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBOb3RlTGlzdCB9IGZyb20gXCIuL25vdGUtbGlzdC52dWVcIjtcblxuY29uc3QgbW9kYWxfaWQgPSByZWYobnVsbCk7XG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoWydkZWxldGUnLCdkZWxldGVfYWxsJ10pO1xuXG5jb25zdCBzaG93ZWQgPSAoKSA9PiB7fTtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gICAgYm9keTogU3RyaW5nLFxuICAgIHRpdGxlOiBTdHJpbmcsXG59KTtcbmNvbnN0IGJvZHkgPSByZWYoJycpO1xuY29uc3QgdGl0bGUgPSByZWYoJycpO1xuY29uc3QgZGVsZXRlX3R5cGUgPSByZWYoJycpO1xuY29uc3Qgc2hvd19ub3RlX2xpc3QgPSByZWYodHJ1ZSk7XG5jb25zdCBub3RlX2xpc3QgPSBbXG4gIGkxOG4oJ25vdGVfc2Nhbl9ob3N0Jylcbl07XG5cbmNvbnN0IHNob3cgPSAodHlwZSwgdmFsdWUpID0+IHtcbiAgc2hvd19ub3RlX2xpc3QudmFsdWUgPSBmYWxzZTtcbiAgZGVsZXRlX3R5cGUudmFsdWUgPSB0eXBlXG5cbiAgICBpZih0eXBlID09IFwiZGVsZXRlX2FsbFwiKSB7XG4gICAgICB0aXRsZS52YWx1ZSA9IGkxOG4oXCJkZWxldGVfYWxsX2VudHJpZXNcIik7XG4gICAgICBib2R5LnZhbHVlID0gdmFsdWU7XG4gICAgfSBlbHNlIGlmKHR5cGUgPT0gXCJkZWxldGVfc2luZ2xlX3Jvd1wiKSB7XG4gICAgICB0aXRsZS52YWx1ZSA9IGkxOG4oXCJkZWxldGVfdnNfaG9zdF90aXRsZVwiKTtcbiAgICAgIGJvZHkudmFsdWUgPSB2YWx1ZTtcbiAgICB9IGVsc2UgaWYodHlwZSA9PSBcInNjYW5fYWxsX3Jvd3NcIikge1xuICAgICAgdGl0bGUudmFsdWUgPSBpMThuKFwic2Nhbl9hbGxfaG9zdHNfdGl0bGVcIik7XG4gICAgICBib2R5LnZhbHVlID0gdmFsdWU7XG4gICAgfSBlbHNlIGlmKHR5cGUgPT0gXCJzY2FuX3Jvd1wiKSB7XG4gICAgICBzaG93X25vdGVfbGlzdC52YWx1ZSA9IHRydWU7XG4gICAgICB0aXRsZS52YWx1ZSA9IGkxOG4oXCJzY2FuX2hvc3RfdGl0bGVcIik7XG4gICAgICBib2R5LnZhbHVlID0gdmFsdWU7XG4gICAgfSBlbHNlIGlmICh0eXBlID09IFwiZGVsZXRlX3NpbmdsZV9yZXBvcnRcIikge1xuICAgICAgdGl0bGUudmFsdWUgPSBpMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLnJlcG9ydHNfcGFnZS5kZWxldGVfdGl0bGVcIik7XG4gICAgICBib2R5LnZhbHVlID0gaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5yZXBvcnRzX3BhZ2UuZGVsZXRlX2Rlc2NyaXB0aW9uXCIpO1xuICAgIH1cbiAgICBcbiAgICBtb2RhbF9pZC52YWx1ZS5zaG93KCk7XG59O1xuXG5jb25zdCBkZWxldGVfID0gKCkgPT4ge1xuICAgIGlmIChkZWxldGVfdHlwZS52YWx1ZSA9PSBcImRlbGV0ZV9hbGxcIikge1xuICAgICAgZW1pdCgnZGVsZXRlX2FsbCcpO1xuICAgIH0gZWxzZSBpZiAoIGRlbGV0ZV90eXBlLnZhbHVlID09IFwiZGVsZXRlX3NpbmdsZV9yb3dcIiB8fCBkZWxldGVfdHlwZS52YWx1ZSA9PSBcImRlbGV0ZV9zaW5nbGVfcmVwb3J0XCIpIHtcbiAgICAgIGVtaXQoJ2RlbGV0ZScpO1xuICAgIH0gZWxzZSBpZiAoZGVsZXRlX3R5cGUudmFsdWUgPT0gXCJzY2FuX2FsbF9yb3dzXCIpIHtcbiAgICAgIGVtaXQoJ3NjYW5fYWxsX3Jvd3MnKTtcbiAgICB9IGVsc2UgaWYgKGRlbGV0ZV90eXBlLnZhbHVlID09IFwic2Nhbl9yb3dcIikge1xuICAgICAgZW1pdCgnc2Nhbl9yb3cnKTtcbiAgICB9XG4gICAgY2xvc2UoKTtcbn07XG5cbmNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICAgIG1vZGFsX2lkLnZhbHVlLmNsb3NlKCk7XG59O1xuXG5cbmRlZmluZUV4cG9zZSh7IHNob3csIGNsb3NlIH0pO1xuXG5vbk1vdW50ZWQoKCkgPT4ge1xufSk7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuPC9zdHlsZT5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG4gICAgPG1vZGFsIEBzaG93ZWQ9XCJzaG93ZWQoKVwiIHJlZj1cIm1vZGFsX2lkXCI+XG4gICAgICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPnt7dGl0bGV9fTwvdGVtcGxhdGU+XG4gICAgICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuXG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00XCIgPlxuICAgICAgICAgIDxiPnt7X2kxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMuYXV0b21hdGljX3NjYW5cIil9fTwvYj5cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC04XCI+XG4gICAgICAgICAgXG4gICAgICAgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cInNlbGVjdGVkX3NjYW5fZnJlcXVlbmN5XCJcbiAgICAgICAgICAgICAgICA6b3B0aW9ucz1cImF1dG9tYXRpY19zY2FuX2ZyZXF1ZW5jaWVzX2xpc3RcIj5cbiAgICAgICAgICA8L1NlbGVjdFNlYXJjaD4gXG4gICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6Zm9vdGVyPlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJ1cGRhdGVfXCIgY2xhc3M9XCJidG4gYnRuLXNlY29uZGFyeSBtZS00XCI+e3tfaTE4bignaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLnVwZGF0ZV9hbGwnKX19PC9idXR0b24+XG4gICAgICA8L3RlbXBsYXRlPlxuICAgIDwvbW9kYWw+XG4gICAgPC90ZW1wbGF0ZT5cbiAgICBcbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgY29tcHV0ZWQsIHdhdGNoIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiO1xuXG5pbXBvcnQgeyBkZWZhdWx0IGFzIG1vZGFsIH0gZnJvbSBcIi4vbW9kYWwudnVlXCI7XG5cbmNvbnN0IG1vZGFsX2lkID0gcmVmKG51bGwpO1xuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFsndXBkYXRlJyxdKTtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gICAgICAgIHRpdGxlOiBTdHJpbmcsXG4gICAgfSk7XG5jb25zdCBhdXRvbWF0aWNfc2Nhbl9mcmVxdWVuY2llc19saXN0ID0gcmVmKFtcbiAgeyBpZDogXCJkaXNhYmxlZFwiLCBsYWJlbDppMThuKCdob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMuZGlzYWJsZWQnKX0sXG4gIHsgaWQ6IFwiMWRheVwiLCBsYWJlbDppMThuKCdob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMuZXZlcnlfbmlnaHQnKX0sXG4gIHsgaWQ6IFwiMXdlZWtcIiwgbGFiZWw6aTE4bignaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLmV2ZXJ5X3dlZWsnKX0sXG5dKTtcblxubGV0IHNlbGVjdGVkX3NjYW5fZnJlcXVlbmN5ID0gcmVmKGF1dG9tYXRpY19zY2FuX2ZyZXF1ZW5jaWVzX2xpc3QudmFsdWVbMF0pO1xuICAgIFxuY29uc3Qgc2hvd2VkID0gKCkgPT4ge307XG5cbi8vICBjb25zdCB0aXRsZSA9IHJlZihpMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLmRlbGV0ZV9ob3N0X3RpdGxlXCIpKVxuXG5jb25zdCBzaG93ID0gKHJvdykgPT4ge1xuICBtb2RhbF9pZC52YWx1ZS5zaG93KCk7XG59O1xuXG5jb25zdCB1cGRhdGVfID0gKCkgPT4ge1xuICAgIGVtaXQoJ3VwZGF0ZScsIHtzY2FuX2ZyZXF1ZW5jeTogc2VsZWN0ZWRfc2Nhbl9mcmVxdWVuY3kudmFsdWUuaWR9KTtcblxuICAgIGNsb3NlKCk7XG59O1xuXG5jb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgICBtb2RhbF9pZC52YWx1ZS5jbG9zZSgpO1xufTtcblxuXG5kZWZpbmVFeHBvc2UoeyBzaG93LCBjbG9zZSB9KTtcblxub25Nb3VudGVkKCgpID0+IHtcbn0pO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbjwvc3R5bGU+XG4iLCI8IS0tIChDKSAyMDIzIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuICA8bW9kYWwgcmVmPVwibW9kYWxfaWRcIj5cbiAgICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPnt7IHRpdGxlIH19PC90ZW1wbGF0ZT5cbiAgICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAgICA8IS0tIFRhcmdldCBpbmZvcm1hdGlvbiwgaGVyZSBhbiBJUCBpcyBwdXQgLS0+XG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTJcIj5cbiAgICAgICAgICA8Yj57eyBfaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5ob3N0X29yX25ldHdvcmtcIikgfX08L2I+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tOFwiPlxuICAgICAgICAgIDxpbnB1dCB2LW1vZGVsPVwiaG9zdFwiIEBpbnB1dD1cImNoZWNrX2hvc3RfcmVnZXhcIiA6ZGlzYWJsZWQ9XCJpc19lZGl0X3BhZ2VcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgIDpwbGFjZWhvbGRlcj1cImhvc3RfcGxhY2Vob2xkZXJcIiByZXF1aXJlZCAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS0yXCI+XG4gICAgICAgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cInNlbGVjdGVkX2NpZHJcIiA6ZGlzYWJsZWQ9XCJpc19lZGl0X3BhZ2UgfHwgaXNfaXB2NF9uZXRzY2FuXCIgOm9wdGlvbnM9XCJjaWRyX29wdGlvbnNfbGlzdFwiPlxuICAgICAgICAgIDwvU2VsZWN0U2VhcmNoPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTJcIj5cbiAgICAgICAgICA8Yj57eyBfaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5wb3J0c1wiKSB9fTwvYj5cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS0xMFwiPlxuICAgICAgICAgIDxpbnB1dCB2LW1vZGVsPVwicG9ydHNcIiBAZm9jdXNvdXQ9XCJjaGVja19wb3J0c1wiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgOmNsYXNzPVwiaGlkZV9wb3J0c19wbGFjZWhvbGRlciA9PT0gdHJ1ZSA/ICdudG9wbmctaGlkZS1wbGFjZWhvbGRlcicgOiAnJ1xuICAgICAgICAgICAgXCIgdHlwZT1cInRleHRcIiA6cGxhY2Vob2xkZXI9XCJwb3J0c19wbGFjZWhvbGRlclwiIHJlcXVpcmVkIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTJcIj5cbiAgICAgICAgICA8Yj57eyBfaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5zY2FuX3R5cGVcIikgfX08L2I+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtMTBcIj5cbiAgICAgICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfc2Nhbl90eXBlXCIgOm9wdGlvbnM9XCJzY2FuX3R5cGVfbGlzdFwiIDpkaXNhYmxlZD1cImlzX2VkaXRfcGFnZVwiIEBzZWxlY3Rfb3B0aW9uPVwic2V0X2lzX2lwdjRfbmV0c2NhbigpXCI+XG4gICAgICAgICAgPC9TZWxlY3RTZWFyY2g+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8dGVtcGxhdGUgdi1pZj1cInNlbGVjdGVkX3NjYW5fdHlwZS5pZCA9PSAnaXB2NF9uZXRzY2FuJ1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cbiAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tMlwiPlxuICAgICAgICAgICAgPGI+e3sgX2kxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMuaG9zdF9kaXNjb3ZlcmVkX3NjYW5fdHlwZVwiKSB9fTwvYj5cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtMTBcIiA+XG4gICAgICAgICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9ucz1cInNlbGVjdGVkX2Rpc2NvdmVyZWRfc2Nhbl90eXBlc1wiIEBjaGFuZ2Vfc2VsZWN0ZWRfb3B0aW9ucz1cInVwZGF0ZV9zZWxlY3RlZF9kaXNjb3ZlcmVkX3NjYW5fdHlwZXNcIiBAdW5zZWxlY3Rfb3B0aW9uPVwicmVtb3ZlX3NlbGVjdGVkX2Rpc2NvdmVyZWRfc2Nhbl90eXBlc1wiIDpvcHRpb25zPVwiZGlzY292ZXJlZF9zY2FuX3R5cGVfbGlzdFwiIDptdWx0aXBsZT1cInRydWVcIj5cbiAgICAgICAgICAgIDwvU2VsZWN0U2VhcmNoPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvdGVtcGxhdGU+XG4gICAgICA8dGVtcGxhdGUgdi1pZj1cImlzX2VudGVycHJpc2VfbCA9PSB0cnVlXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS0yXCI+XG4gICAgICAgICAgICA8Yj57eyBfaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5wZXJpb2RpY2l0eVwiKSB9fTwvYj5cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtMTBcIj5cbiAgICAgICAgICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF9zY2FuX2ZyZXF1ZW5jeVwiIDpvcHRpb25zPVwic2Nhbl9mcmVxdWVuY2llc19saXN0XCI+XG4gICAgICAgICAgICA8L1NlbGVjdFNlYXJjaD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L3RlbXBsYXRlPlxuXG4gICAgICA8ZGl2IGNsYXNzPVwibXQtNFwiPlxuICAgICAgICA8dGVtcGxhdGUgdi1pZj1cImlzX2VudGVycHJpc2VfbCA9PSBmYWxzZVwiPlxuICAgICAgICAgIDxOb3RlTGlzdCA6bm90ZV9saXN0PVwibm90ZV9saXN0XCI+IDwvTm90ZUxpc3Q+XG4gICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgIDx0ZW1wbGF0ZSB2LWVsc2U+XG4gICAgICAgICAgPE5vdGVMaXN0IDpub3RlX2xpc3Q9XCJlbnRlcnByaXNlX25vdGVfbGlzdFwiPiA8L05vdGVMaXN0PlxuICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgPC9kaXY+XG4gICAgPC90ZW1wbGF0ZT5cblxuICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6Zm9vdGVyPlxuICAgICAgPGRpdiB2LWlmPVwiaXNfZGF0YV9ub3Rfb2tcIiBjbGFzcz1cIm1lLWF1dG8gdGV4dC1kYW5nZXIgZC1pbmxpbmVcIj5cbiAgICAgICAge3sgbm9faG9zdF9mZWVkYmFjayB9fVxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICA8U3Bpbm5lciA6c2hvdz1cImFjdGl2YXRlX2FkZF9zcGlubmVyXCIgc2l6ZT1cIjFyZW1cIiBjbGFzcz1cIm1lLTJcIj48L1NwaW5uZXI+XG4gICAgICAgIDxidXR0b24gdi1pZj1cImlzX2VkaXRfcGFnZSA9PSBmYWxzZVwiIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJhZGRfXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIlxuICAgICAgICAgIDpkaXNhYmxlZD1cIiEoaXNfY2lkcl9jb3JyZWN0ICYmIGlzX2hvc3RfY29ycmVjdCAmJiBpc19wb3J0X2NvcnJlY3QgJiYgaXNfbmV0c2Nhbl9vaylcIj5cbiAgICAgICAgICB7eyBfaTE4bihcImFkZFwiKSB9fVxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPGJ1dHRvbiB2LWVsc2UgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImVkaXRfXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIlxuICAgICAgICAgIDpkaXNhYmxlZD1cIiEoaXNfY2lkcl9jb3JyZWN0ICYmIGlzX2hvc3RfY29ycmVjdCAmJiBpc19wb3J0X2NvcnJlY3QgJiYgaXNfbmV0c2Nhbl9vaylcIj5cbiAgICAgICAgICB7eyBfaTE4bihcImFwcGx5XCIpIH19XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgPC90ZW1wbGF0ZT5cbiAgPC9tb2RhbD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG4vKiBJbXBvcnRzICovXG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgbW9kYWwgfSBmcm9tIFwiLi9tb2RhbC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0U2VhcmNoIH0gZnJvbSBcIi4vc2VsZWN0LXNlYXJjaC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTm90ZUxpc3QgfSBmcm9tIFwiLi9ub3RlLWxpc3QudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNwaW5uZXIgfSBmcm9tIFwiLi9zcGlubmVyLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBkYXRhVXRpbHMgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2RhdGEtdXRpbHNcIjtcbmltcG9ydCByZWdleFZhbGlkYXRpb24gZnJvbSBcIi4uL3V0aWxpdGllcy9yZWdleC12YWxpZGF0aW9uLmpzXCI7XG5pbXBvcnQgTnRvcFV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvbnRvcC11dGlsc1wiO1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbXCJhZGRcIiwgXCJlZGl0XCJdKTtcbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICBjb250ZXh0OiBPYmplY3QsXG59KTtcblxuLyogQ29uc3RzICovXG5jb25zdCB0aXRsZSA9IHJlZihpMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLmFkZF9ob3N0XCIpKTtcbmNvbnN0IG5vX2hvc3RfZmVlZGJhY2sgPSByZWYoaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5ob3N0X25vdF9yZXNvbHZlZFwiKSk7XG5jb25zdCBob3N0X3BsYWNlaG9sZGVyID0gaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5ob3N0X3BsYWNlaG9sZGVyXCIpO1xuY29uc3QgcG9ydHNfcGxhY2Vob2xkZXIgPSBpMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLnBvcnRzX3BsYWNlaG9sZGVyXCIpO1xuY29uc3Qgbm90ZV9saXN0ID0gW1xuICBfaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5ub3Rlcy5ub3RlXzFcIiksXG4gIF9pMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLm5vdGVzLm5vdGVfMlwiKSxcbiAgX2kxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMubm90ZXMubm90ZV8zXCIpLFxuICBfaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5ub3Rlcy5ub3RlXzNfMVwiKSxcbl07XG5jb25zdCBlbnRlcnByaXNlX25vdGVfbGlzdCA9IFtcbiAgX2kxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMubm90ZXMubm90ZV8xXCIpLFxuICBfaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5ub3Rlcy5ub3RlXzJcIiksXG4gIF9pMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLm5vdGVzLm5vdGVfM1wiKSxcbiAgX2kxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMubm90ZXMubm90ZV8zXzFcIiksXG4gIF9pMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLm5vdGVzLm5vdGVfNFwiKSxcbl07XG5cbmNvbnN0IG1vZGFsX2lkID0gcmVmKG51bGwpO1xuY29uc3Qgc2VsZWN0ZWRfc2Nhbl90eXBlID0gcmVmKHt9KTtcbmNvbnN0IHNlbGVjdGVkX2Rpc2NvdmVyZWRfc2Nhbl90eXBlcyA9IHJlZihbXSk7IC8vIGFycmF5IGZvciBob3N0cyBkaXNjb3ZlcmVkIHNjYW4gdHlwZXNcbmNvbnN0IGhpZGVfcG9ydHNfcGxhY2Vob2xkZXIgPSByZWYoXCJcIik7XG5jb25zdCByb3dfdG9fZWRpdF9pZCA9IHJlZihcIlwiKTtcbmNvbnN0IGFjdGl2YXRlX2FkZF9zcGlubmVyID0gcmVmKGZhbHNlKTtcbmNvbnN0IGlzX2VkaXRfcGFnZSA9IHJlZihmYWxzZSk7XG5jb25zdCBzY2FuX3R5cGVfbGlzdCA9IHJlZihbXSk7XG5jb25zdCBkaXNjb3ZlcmVkX3NjYW5fdHlwZV9saXN0ID0gcmVmKFtdKTtcbmNvbnN0IGlmaWQgPSByZWYobnVsbCk7XG5jb25zdCBob3N0ID0gcmVmKG51bGwpO1xuY29uc3QgcG9ydHMgPSByZWYobnVsbCk7XG5jb25zdCBzaG93X3BvcnRfZmVlZGJhY2sgPSByZWYoZmFsc2UpO1xuY29uc3QgaXNfZW50ZXJwcmlzZV9sID0gcmVmKG51bGwpO1xuY29uc3QgaXNfcG9ydF9jb3JyZWN0ID0gcmVmKHRydWUpO1xuY29uc3QgaXNfY2lkcl9jb3JyZWN0ID0gcmVmKHRydWUpO1xuY29uc3QgaXNfbmV0c2Nhbl9vayA9IHJlZih0cnVlKTsgLy8gYm9vbCB0byBiZSBzdXJlIHRoYXQgb24gbmV0c2NhbiBhdCBsZWFzdCBvbmUgZGlzY292ZXJlZCBob3N0cyBzY2FuIHR5cGUgaXMgc2VsZWN0ZWRcbmNvbnN0IGlzX2hvc3RfY29ycmVjdCA9IHJlZihmYWxzZSk7XG5jb25zdCBpc19pcHY0X25ldHNjYW4gPSByZWYoZmFsc2UpO1xuY29uc3Qgc2Nhbl9mcmVxdWVuY2llc19saXN0ID0gcmVmKFtcbiAgeyBpZDogXCJkaXNhYmxlZFwiLCBsYWJlbDogaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5kaXNhYmxlZFwiKSB9LFxuICB7IGlkOiBcIjFkYXlcIiwgbGFiZWw6IGkxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMuZXZlcnlfbmlnaHRcIikgfSxcbiAgeyBpZDogXCIxd2Vla1wiLCBsYWJlbDogaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5ldmVyeV93ZWVrXCIpIH0sXG5dKTtcbmNvbnN0IENJRFJfMjQgPSBcIjI0XCI7XG5jb25zdCBDSURSXzMyID0gXCIzMlwiO1xuY29uc3QgQ0lEUl8xMjggPSBcIjEyOFwiO1xuY29uc3QgY2lkcl9vcHRpb25zX2xpc3QgPSByZWYoW1xuICB7IGlkOiBcIjI0XCIsIGxhYmVsOiBcIi8yNFwiIH0sXG4gIHsgaWQ6IFwiMzJcIiwgbGFiZWw6IFwiLzMyXCIgfSxcbiAgeyBpZDogXCIxMjhcIiwgbGFiZWw6IFwiLzEyOFwiIH0sXG5dKTtcbmNvbnN0IHNlbGVjdGVkX2NpZHIgPSByZWYoY2lkcl9vcHRpb25zX2xpc3QudmFsdWVbMV0pO1xuY29uc3Qgc2VsZWN0ZWRfc2Nhbl9mcmVxdWVuY3kgPSByZWYoc2Nhbl9mcmVxdWVuY2llc19saXN0LnZhbHVlWzBdKTtcbmNvbnN0IGlzX2RhdGFfbm90X29rID0gcmVmKGZhbHNlKTtcbmNvbnN0IHJlZnJlc2hfc2VsZWN0X3NlYXJjaCA9IHJlZihmYWxzZSk7XG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLypcbiAqIFJlc2V0IGZpZWxkcyBpbiBtb2RhbCBmb3JtXG4gKi9cbmNvbnN0IHJlc2V0X21vZGFsX2Zvcm0gPSBmdW5jdGlvbiAoKSB7XG4gIGhvc3QudmFsdWUgPSBcIlwiO1xuICBwb3J0cy52YWx1ZSA9IFwiXCI7XG4gIGlzX3BvcnRfY29ycmVjdC52YWx1ZSA9IHRydWU7XG4gIGlzX2NpZHJfY29ycmVjdC52YWx1ZSA9IHRydWU7XG4gIGlzX2hvc3RfY29ycmVjdC52YWx1ZSA9IGZhbHNlO1xuICBhY3RpdmF0ZV9hZGRfc3Bpbm5lci52YWx1ZSA9IGZhbHNlO1xuICBzaG93X3BvcnRfZmVlZGJhY2sudmFsdWUgPSBmYWxzZTtcbiAgc2VsZWN0ZWRfc2Nhbl90eXBlLnZhbHVlID0gc2Nhbl90eXBlX2xpc3QudmFsdWVbMF07XG4gIHNlbGVjdGVkX2Rpc2NvdmVyZWRfc2Nhbl90eXBlcy52YWx1ZSA9IFtdO1xuICBzZWxlY3RlZF9jaWRyLnZhbHVlID0gY2lkcl9vcHRpb25zX2xpc3QudmFsdWVbMV07XG4gIHJvd190b19lZGl0X2lkLnZhbHVlID0gbnVsbDtcbiAgaXNfZWRpdF9wYWdlLnZhbHVlID0gZmFsc2U7XG4gIGlzX2RhdGFfbm90X29rLnZhbHVlID0gZmFsc2U7XG4gIGlzX2lwdjRfbmV0c2Nhbi52YWx1ZSA9IGZhbHNlO1xuICBpc19uZXRzY2FuX29rLnZhbHVlID0gIWlzX2lwdjRfbmV0c2Nhbi52YWx1ZTtcbn07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKlxuICogU2V0IHJvdyB0byBlZGl0XG4gKi9cbmNvbnN0IHNldF9yb3dfdG9fZWRpdCA9IChyb3cpID0+IHtcbiAgaXNfZWRpdF9wYWdlLnZhbHVlID0gdHJ1ZTtcblxuICAvKiBTZXQgaG9zdCB2YWx1ZXMgKi9cbiAgaG9zdC52YWx1ZSA9IHJvdy5ob3N0O1xuICBwb3J0cy52YWx1ZSA9IHJvdy5wb3J0cztcbiAgaXNfaG9zdF9jb3JyZWN0LnZhbHVlID0gdHJ1ZTtcbiAgaXNfcG9ydF9jb3JyZWN0LnZhbHVlID0gdHJ1ZTtcbiAgcm93X3RvX2VkaXRfaWQudmFsdWUgPSByb3cuaWQ7XG5cbiAgLyogU2V0IHRoZSBjb3JyZWN0IHZhbHVlcyBpZiBhdmFpbGFibGUgKi9cbiAgLyogU2NhbiBUeXBlICovXG4gIHNlbGVjdGVkX3NjYW5fdHlwZS52YWx1ZSA9IHNjYW5fdHlwZV9saXN0LnZhbHVlLmZpbmQoXG4gICAgKGl0ZW0pID0+IGl0ZW0uaWQgPT0gcm93LnNjYW5fdHlwZVxuICApO1xuXG4gIC8qIFN1YiBTY2FucyBUeXBlcyAqL1xuICBpZiAocm93LmRpc2NvdmVyZWRfaG9zdF9zY2FuX3R5cGUgIT0gbnVsbCkge1xuICAgIGNvbnN0IGRpc2NvdmVyZWRfc2Nhbl90eXBlX2lkc19hcnJheSA9IHJvdy5kaXNjb3ZlcmVkX2hvc3Rfc2Nhbl90eXBlLnNwbGl0KFwiLFwiKTtcbiAgICBsZXQgdG1wX3NlbGVjdGVkX3NjYW5fdHlwZXMgPSBbXTtcbiAgICBsZXQgdG1wX2ZvdW5kX3NjYW5fdHlwZTtcbiAgICBkaXNjb3ZlcmVkX3NjYW5fdHlwZV9pZHNfYXJyYXkuZm9yRWFjaCgoc2V0dGVkX3NjYW5fdHlwZSkgPT4ge1xuICAgICAgdG1wX2ZvdW5kX3NjYW5fdHlwZSA9IGRpc2NvdmVyZWRfc2Nhbl90eXBlX2xpc3QudmFsdWUuZmluZCgoaXRlbSkgPT4gaXRlbS5pZCA9PSBzZXR0ZWRfc2Nhbl90eXBlKTtcbiAgICAgIHRtcF9zZWxlY3RlZF9zY2FuX3R5cGVzLnB1c2godG1wX2ZvdW5kX3NjYW5fdHlwZSk7XG4gICAgfSlcbiAgICBzZWxlY3RlZF9kaXNjb3ZlcmVkX3NjYW5fdHlwZXMudmFsdWUgPSB0bXBfc2VsZWN0ZWRfc2Nhbl90eXBlcztcbiAgfVxuXG4gIC8qIENJRFIgKi9cbiAgaWYgKHNlbGVjdGVkX3NjYW5fdHlwZS52YWx1ZS5pZCA9PSAnaXB2NF9uZXRzY2FuJykge1xuICAgIC8vIGlwdjRfbmV0c2NhbiBzY2FuIHR5cGUgY2FzZVxuICAgIHNlbGVjdGVkX2NpZHIudmFsdWUgPSBjaWRyX29wdGlvbnNfbGlzdC52YWx1ZS5maW5kKFxuICAgICAgKGl0ZW0pID0+IGl0ZW0uaWQgPT0gQ0lEUl8yNFxuICAgICk7XG4gIH0gZWxzZSBpZiAocmVnZXhWYWxpZGF0aW9uLnZhbGlkYXRlSVB2NChyb3cuaG9zdCkpIHtcbiAgICBzZWxlY3RlZF9jaWRyLnZhbHVlID0gY2lkcl9vcHRpb25zX2xpc3QudmFsdWUuZmluZChcbiAgICAgIChpdGVtKSA9PiBpdGVtLmlkID09IENJRFJfMzJcbiAgICApOyAvKiBJUHY0ICovXG4gIH0gZWxzZSB7XG4gICAgc2VsZWN0ZWRfY2lkci52YWx1ZSA9IGNpZHJfb3B0aW9uc19saXN0LnZhbHVlLmZpbmQoXG4gICAgICAoaXRlbSkgPT4gaXRlbS5pZCA9PSBDSURSXzEyOFxuICAgICk7IC8qIElQdjYgKi9cbiAgfVxuICBpc19jaWRyX2NvcnJlY3QudmFsdWUgPSB0cnVlO1xuXG4gIC8qIFNjYW4gRnJlcXVlbmN5ICovXG4gIGlmIChpc19lbnRlcnByaXNlX2wpIHtcbiAgICBzZWxlY3RlZF9zY2FuX2ZyZXF1ZW5jeS52YWx1ZSA9IHNjYW5fZnJlcXVlbmNpZXNfbGlzdC52YWx1ZS5maW5kKFxuICAgICAgKGl0ZW0pID0+IGl0ZW0uaWQgPT0gcm93LnNjYW5fZnJlcXVlbmN5XG4gICAgKTtcbiAgfVxufTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCB3aGVuZXZlciB0aGUgbW9kYWwgaXMgb3BlbmVkICovXG5jb25zdCBzaG93ID0gKHJvdywgX2hvc3QpID0+IHtcbiAgLyogRmlyc3Qgb2YgYWxsIHJlc2V0IGFsbCB0aGUgZGF0YSAqL1xuICByZXNldF9tb2RhbF9mb3JtKCk7XG4gIHRpdGxlLnZhbHVlID0gaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5hZGRfaG9zdFwiKTtcbiAgaWYgKCFkYXRhVXRpbHMuaXNFbXB0eU9yTnVsbChyb3cpKSB7XG4gICAgLyogSW4gY2FzZSByb3cgaXMgbm90IG51bGwgdGhlbiBhbiBlZGl0IGlzIHJlcXVlc3RlZCAqL1xuICAgIHRpdGxlLnZhbHVlID0gaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5lZGl0X2hvc3RfdGl0bGVcIik7XG4gICAgc2V0X3Jvd190b19lZGl0KHJvdyk7XG4gIH1cblxuICBpZiAoIWRhdGFVdGlscy5pc0VtcHR5T3JOdWxsKF9ob3N0KSkge1xuICAgIGhvc3QudmFsdWUgPSBfaG9zdDtcbiAgICBpc19ob3N0X2NvcnJlY3QudmFsdWUgPSB0cnVlO1xuICB9XG5cbiAgbW9kYWxfaWQudmFsdWUuc2hvdygpO1xufTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIEZ1bmN0aW9uIGNhbGxlZCB3aGVuIGEgbmV3IHNlbGVjdGVkIGRpc2NvdmVyZWQgc2NhbiB0eXBlXG4gICBpcyBhZGRlZFxuKi9cbmNvbnN0IHVwZGF0ZV9zZWxlY3RlZF9kaXNjb3ZlcmVkX3NjYW5fdHlwZXMgPSAoaXRlbXMpID0+IHtcbiAgc2VsZWN0ZWRfZGlzY292ZXJlZF9zY2FuX3R5cGVzLnZhbHVlID0gaXRlbXM7XG4gIGlzX25ldHNjYW5fb2sudmFsdWUgPSBzZWxlY3RlZF9kaXNjb3ZlcmVkX3NjYW5fdHlwZXMudmFsdWUubGVuZ3RoID4gMDtcbn1cblxuLyogRnVuY3Rpb24gY2FsbGVkIHdoZW4gaXMgcmVtb3ZlZCBhIHNlbGVjdGVkIGRpc2NvdmVyZWQgc2NhbiB0eXBlXG4qL1xuY29uc3QgcmVtb3ZlX3NlbGVjdGVkX2Rpc2NvdmVyZWRfc2Nhbl90eXBlcyA9IChpdGVtX3RvX2RlbGV0ZSkgPT4ge1xuICBzZWxlY3RlZF9kaXNjb3ZlcmVkX3NjYW5fdHlwZXMudmFsdWUgPSBzZWxlY3RlZF9kaXNjb3ZlcmVkX3NjYW5fdHlwZXMudmFsdWUuZmlsdGVyKChpdGVtKSA9PiBpdGVtLmlkICE9IGl0ZW1fdG9fZGVsZXRlLmlkKTtcbiAgaXNfbmV0c2Nhbl9vay52YWx1ZSA9IHNlbGVjdGVkX2Rpc2NvdmVyZWRfc2Nhbl90eXBlcy52YWx1ZS5sZW5ndGggPiAwOyBcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIEZ1bmN0aW9uIHRvIHNldCBpc19pcHY0X25ldHNjYW4gaW4gb3JkZXIgdG8gZGlzYWJsZSBjaWRyIHNlbGVjdGlvXG4gICBvbmx5IC8yNCAoZm9yIG5vdylcbiovXG5jb25zdCBzZXRfaXNfaXB2NF9uZXRzY2FuID0gKCkgPT4ge1xuICBpZiAoc2VsZWN0ZWRfc2Nhbl90eXBlLnZhbHVlLmlkID09ICdpcHY0X25ldHNjYW4nKSB7XG4gICAgLy8gLzI0IFxuICAgIHNlbGVjdGVkX2NpZHIudmFsdWUgPSBjaWRyX29wdGlvbnNfbGlzdC52YWx1ZS5maW5kKFxuICAgICAgKGl0ZW0pID0+IGl0ZW0uaWQgPT0gQ0lEUl8yNFxuICAgICk7IFxuICAgIC8vIGlzX2lwdjRfbmV0c2NhbiAtPiBlbmFibGUgdGhlIGRpc2NvdmVyZWRfaG9zdHNfc2Nhbl90eXBlcyBtdWx0aXNlbGVjdGlvblxuICAgIGlzX2lwdjRfbmV0c2Nhbi52YWx1ZSA9IHRydWU7XG4gICAgLy8gaXNfbmV0c2Nhbl9vayAtPiBkaXNhYmxlZCBhcHBseSBvciBhZGQgYnV0dG9uIGJlY2F1c2UgaXMgbmVjZXNzYXJ5IGF0IGxlYXN0IG9uZSBkaXNjb3ZlcmVkX2hvc3RzX3NjYW5fdHlwZVxuICAgIGlzX25ldHNjYW5fb2sudmFsdWUgPSBmYWxzZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBpc19pcHY0X25ldHNjYW4gLT4gZGlzYWJsZSB0aGUgZGlzY292ZXJlZF9ob3N0c19zY2FuX3R5cGVzIG11bHRpc2VsZWN0aW9uXG4gICAgaXNfaXB2NF9uZXRzY2FuLnZhbHVlID0gZmFsc2U7XG4gICAgLy8gaXNfbmV0c2Nhbl9vayAtPiBlbmFibGUgdGhlIGFkZCBvciBhcHBseSBidXR0b24gYmVjYXVzZSBpcyBub3QgaXB2NF9uZXRzY2FuIGNhc2VcbiAgICBpc19uZXRzY2FuX29rLnZhbHVlID0gdHJ1ZTtcbiAgfVxuXG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBSZWdleCB0byBjaGVjayBpZiB0aGUgaG9zdCBpcyBjb3JyZWN0IG9yIG5vdCAqL1xuY29uc3QgY2hlY2tfaG9zdF9yZWdleCA9ICgpID0+IHtcbiAgY29uc3QgaXNfaXB2NCA9IHJlZ2V4VmFsaWRhdGlvbi52YWxpZGF0ZUlQdjQoaG9zdC52YWx1ZSk7XG4gIGNvbnN0IGlzX2lwdjYgPSByZWdleFZhbGlkYXRpb24udmFsaWRhdGVJUHY2KGhvc3QudmFsdWUpO1xuICBjb25zdCBpc19ob3N0X25hbWUgPSByZWdleFZhbGlkYXRpb24udmFsaWRhdGVIb3N0TmFtZShob3N0LnZhbHVlKTtcbiAgaWYgKHNlbGVjdGVkX3NjYW5fdHlwZS52YWx1ZS5pZCA9PSAnaXB2NF9uZXRzY2FuJykge1xuICAgIFxuICAgIGlmIChpc19pcHY0KSB7XG4gICAgICAvLyB0aGUgSVAgbXVzdCBiZSBhbiBJUHY0XG4gICAgICAvKiBJUHY0ICovXG4gICAgICBpc19ob3N0X2NvcnJlY3QudmFsdWUgPSB0cnVlO1xuICAgICAgLy8gdGhlIHNlbGVjdGVkX2Rpc2NvdmVyZWRfc2Nhbl90eXBlcyBtdXN0IGJlIGFuIGFycmF5IHdpdGggbGVuZ2h0IG1vcmUgdGhhbiAwXG4gICAgICBpc19uZXRzY2FuX29rLnZhbHVlID0gc2VsZWN0ZWRfZGlzY292ZXJlZF9zY2FuX3R5cGVzLnZhbHVlICYmIHNlbGVjdGVkX2Rpc2NvdmVyZWRfc2Nhbl90eXBlcy52YWx1ZS5sZW5ndGggPiAwO1xuICAgIH1cblxuICAgIGlzX25ldHNjYW5fb2sudmFsdWUgPSB0cnVlOyAvLyBub3QgaXB2NF9uZXRzY2FuIGNhc2Ugc28gaXNfbmV0c2Nhbl9vayBpcyB0cnVlXG4gIH0gZWxzZSB7XG5cbiAgICAvKiBXaGVuIGl0IGlzbid0IHRoZSBpcHY0X25ldHNjYW4gY2FzZSB0aGUgY2lkciBzZWxlY3Rpb24gaXMgZW5hYmxlZCAqL1xuXG4gICAgaWYgKGlzX2lwdjQpIHtcbiAgICAgIC8qIElQdjQgKi9cbiAgICAgIGlzX2hvc3RfY29ycmVjdC52YWx1ZSA9IHRydWU7XG4gICAgICBpZiAoIWhvc3QudmFsdWUuZW5kc1dpdGgoMCkpIHtcbiAgICAgICAgLyogSW4gY2FzZSB0aGUgQ0lEUiBpcyB3cm9uZyAqL1xuICAgICAgICBzZWxlY3RlZF9jaWRyLnZhbHVlID0gY2lkcl9vcHRpb25zX2xpc3QudmFsdWUuZmluZChcbiAgICAgICAgICAoaXRlbSkgPT4gaXRlbS5pZCA9PSBDSURSXzMyXG4gICAgICAgICk7IC8qIElQdjQgKi9cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzX2lwdjYpIHtcbiAgICAgIC8qIElQdjYgKi9cbiAgICAgIHNlbGVjdGVkX2NpZHIudmFsdWUgPSBjaWRyX29wdGlvbnNfbGlzdC52YWx1ZVsyXTtcbiAgICAgIGlzX2hvc3RfY29ycmVjdC52YWx1ZSA9IHRydWU7XG4gICAgICAvKiBJbiBjYXNlIHRoZSBDSURSIGlzIHdyb25nICovXG4gICAgICBzZWxlY3RlZF9jaWRyLnZhbHVlID0gY2lkcl9vcHRpb25zX2xpc3QudmFsdWUuZmluZChcbiAgICAgICAgKGl0ZW0pID0+IGl0ZW0uaWQgPT0gQ0lEUl8xMjhcbiAgICAgICk7IC8qIElQdjYgKi9cbiAgICB9IGVsc2UgaWYgKGlzX2hvc3RfbmFtZSkge1xuICAgICAgLyogSG9zdCBOYW1lICovXG4gICAgICBpc19ob3N0X2NvcnJlY3QudmFsdWUgPSB0cnVlO1xuICAgICAgLyogSW4gY2FzZSB0aGUgQ0lEUiBpcyB3cm9uZyAqL1xuICAgICAgc2VsZWN0ZWRfY2lkci52YWx1ZSA9IGNpZHJfb3B0aW9uc19saXN0LnZhbHVlLmZpbmQoXG4gICAgICAgIChpdGVtKSA9PiBpdGVtLmlkID09IENJRFJfMzJcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlzX2hvc3RfY29ycmVjdC52YWx1ZSA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG59O1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogUmVnZXggdG8gY2hlY2sgaWYgcG9ydHMgbGlzdCBpcyBjb3JyZWN0IG9yIG5vdCAqL1xuY29uc3QgY2hlY2tfcG9ydHMgPSAoKSA9PiB7XG4gIGlmIChcbiAgICAhcmVnZXhWYWxpZGF0aW9uLnZhbGlkYXRlUG9ydFJhbmdlKHBvcnRzLnZhbHVlKSAmJlxuICAgICFyZWdleFZhbGlkYXRpb24udmFsaWRhdGVDb21tYVNlcGFyYXRlZFBvcnRMaXN0KHBvcnRzLnZhbHVlKSAmJlxuICAgICFkYXRhVXRpbHMuaXNFbXB0eU9yTnVsbChwb3J0cy52YWx1ZSlcbiAgKSB7XG4gICAgaXNfcG9ydF9jb3JyZWN0LnZhbHVlID0gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgLyogRW1wdHkgcG9ydCBpcyBhbHJpZ2h0ISAqL1xuICAgIGlzX3BvcnRfY29ycmVjdC52YWx1ZSA9IHRydWU7XG4gIH1cbn07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBSZXNvbHZlIGhvc3RuYW1lICovXG5hc3luYyBmdW5jdGlvbiByZXNvbHZlX2hvc3RfbmFtZShob3N0KSB7XG4gIGNvbnN0IHJlc29sdmVfaG9zdF9uYW1lX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9yZXNvbHZlX2hvc3RfbmFtZS5sdWFgO1xuICBjb25zdCB1cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwocmVzb2x2ZV9ob3N0X25hbWVfdXJsLCB7XG4gICAgaG9zdDogaG9zdCxcbiAgfSk7XG5cbiAgcmV0dXJuIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwpO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRnVuY3Rpb24gY2FsbGVkIHdoZW4gdGhlIGVkaXQgYnV0dG9uIGlzIGNsaWNrZWQgKi9cbmNvbnN0IGVkaXRfID0gKCkgPT4ge1xuICBhZGRfKHRydWUpO1xufTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIEZ1bmN0aW9uIGNhbGxlZCB3aGVuIHRoZSBtb2RhbCBpcyBjbG9zZWQgKi9cbmNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICByZWZyZXNoX3NlbGVjdF9zZWFyY2gudmFsdWUgPSBmYWxzZTtcbiAgbW9kYWxfaWQudmFsdWUuY2xvc2UoKTtcbn07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBGdW5jdGlvbiB0byBhZGQgaG9zdCB0byBzY2FuICovXG5jb25zdCBhZGRfID0gYXN5bmMgKGlzX2VkaXQpID0+IHtcbiAgY29uc3QgaG9zdF9wb3J0cyA9IHBvcnRzLnZhbHVlO1xuICBjb25zdCBob3N0X3NjYW5fdHlwZSA9IHNlbGVjdGVkX3NjYW5fdHlwZS52YWx1ZS5pZDtcbiAgY29uc3QgZW1pdF9ldmVudCA9IChpc19lZGl0ID09PSB0cnVlKSA/IFwiZWRpdFwiIDogXCJhZGRcIjtcbiAgY29uc3Qgcm93X2lkID0gKGlzX2VkaXQgPT09IHRydWUpID8gcm93X3RvX2VkaXRfaWQudmFsdWUgOiBudWxsO1xuICBsZXQgbmV3X2hvc3QgPSBob3N0LnZhbHVlO1xuICBsZXQgbmV3X2hvc3RfbmFtZV9yZXNvbHZlZCA9IHRydWU7XG5cbiAgLyogQWN0aXZhdGUgdGhlIHNwaW5uZXIgdG8gZ2l2ZSB0aGUgdXNlciBhIGZlZWRiYWNrICovXG4gIGFjdGl2YXRlX2FkZF9zcGlubmVyLnZhbHVlID0gdHJ1ZTtcblxuICAvKiBDaGVjayBpZiBpdCdzIGFuIElQIG9yIG5vdCwgaWYgbm90IGl0IG1lYW5zIGl0J3MgYW4gaG9zdG5hbWUgKi9cbiAgaWYgKCFyZWdleFZhbGlkYXRpb24udmFsaWRhdGVJUChob3N0LnZhbHVlKSkge1xuICAgIC8qIER1cmluZyB0aGUgdmFsaWRhdGlvbiBkaXNhYmxlIHRoZSBhZGQgYnV0dG9uICovXG4gICAgaXNfaG9zdF9jb3JyZWN0LnZhbHVlID0gZmFsc2U7XG4gICAgbmV3X2hvc3QgPSBhd2FpdCByZXNvbHZlX2hvc3RfbmFtZShob3N0LnZhbHVlKTtcbiAgICBpZiAobmV3X2hvc3QgPT09IFwibm9fc3VjY2Vzc1wiKSB7XG4gICAgICAvKiBUaGUgcmVzb2x1dGlvbiBmYWlsZWQhICovXG4gICAgICBuZXdfaG9zdF9uYW1lX3Jlc29sdmVkID0gZmFsc2U7XG4gICAgICBub19ob3N0X2ZlZWRiYWNrLnZhbHVlID0gaG9zdC52YWx1ZSArIFwiIFwiICsgaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5ob3N0X25vdF9yZXNvbHZlZFwiKTtcbiAgICAgIGlzX2RhdGFfbm90X29rLnZhbHVlID0gdHJ1ZTtcbiAgICAgIC8qIEhpZGUgdGhlIG1lc3NhZ2UgYWZ0ZXIgMyBzZWNvbmRzICovXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaXNfZGF0YV9ub3Rfb2sudmFsdWUgPSBmYWxzZVxuICAgICAgfSwgNDAwMClcbiAgICB9XG4gICAgLyogVmFsaWRhdGlvbiBlbmRlZCwgcmUtZW5hYmxlIHRoZSBidXR0b24gKi9cbiAgICBpc19ob3N0X2NvcnJlY3QudmFsdWUgPSB0cnVlO1xuICB9XG5cbiAgbGV0IHRtcF9zZWNvbmRfc2Nhbl90eXBlcyA9IFtdO1xuICBcbiAgc2VsZWN0ZWRfZGlzY292ZXJlZF9zY2FuX3R5cGVzLnZhbHVlLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICB0bXBfc2Vjb25kX3NjYW5fdHlwZXMucHVzaChpdGVtLmlkKTtcbiAgfSlcbiAgLyogVGhlIGRpc2NvdmVyZWQgc2NhbiB0eXBlcyBhcmUgc2VudCB0byB0aGUgcmVzdCBpbiBjb21tYSBzZXBhcmF0ZWQgc3RyaW5nIGxpc3QgKi9cbiAgY29uc3QgdG1wX3NlY29uZF9zY2FuX3R5cGVzX2Zvcm1hdHRlZCA9IHRtcF9zZWNvbmRfc2Nhbl90eXBlcy5qb2luKFwiLFwiKTtcblxuICAvKiBJZiB0aGUgcmVzb2x1dGlvbiB3YXMgb2sgb3Igbm8gcmVzb2x1dGlvbiBhdCBhbGwgd2FzIGRvbmUgZW1pdCB0aGUgZXZlbnQgKi9cbiAgYWN0aXZhdGVfYWRkX3NwaW5uZXIudmFsdWUgPSBuZXdfaG9zdF9uYW1lX3Jlc29sdmVkO1xuXG4gIGlmIChuZXdfaG9zdF9uYW1lX3Jlc29sdmVkKSB7XG4gICAgLyogRW1pdCB0aGUgZXZlbnQsIG9ubHkgaWYgdGhlIHJlc29sdXRpb24gXG4gICAgd2FzIG9rIG9yIG5vIHJlc29sdXRpb24gYXQgYWxsIHdhcyBuZWVkZWQgKi9cbiAgICBlbWl0KGVtaXRfZXZlbnQsIHtcbiAgICAgIGhvc3Q6IG5ld19ob3N0LFxuICAgICAgc2Nhbl90eXBlOiBob3N0X3NjYW5fdHlwZSxcbiAgICAgIHNjYW5fcG9ydHM6IGhvc3RfcG9ydHMsXG4gICAgICBjaWRyOiBzZWxlY3RlZF9jaWRyLnZhbHVlLmlkLFxuICAgICAgc2Nhbl9mcmVxdWVuY3k6IGlzX2VudGVycHJpc2VfbCA/IHNlbGVjdGVkX3NjYW5fZnJlcXVlbmN5LnZhbHVlLmlkIDogbnVsbCxcbiAgICAgIHNjYW5faWQ6IHJvd19pZCxcbiAgICAgIGRpc2NvdmVyZWRfaG9zdF9zY2FuX3R5cGUgOiB0bXBfc2Vjb25kX3NjYW5fdHlwZXNfZm9ybWF0dGVkXG4gICAgfSk7XG4gIH1cblxufTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIExvYWQgdGhlIGF2YWlsYWJsZSBtZXRyaWNzICovXG5jb25zdCBtZXRyaWNzTG9hZGVkID0gYXN5bmMgKF9zY2FuX3R5cGVfbGlzdCwgX2lmaWQsIF9pc19lbnRlcnByaXNlX2wpID0+IHtcbiAgY29uc3Qgc2Nhbl90eXBlcyA9IF9zY2FuX3R5cGVfbGlzdC5zb3J0KChhLCBiKSA9PlxuICAgIGEubGFiZWwubG9jYWxlQ29tcGFyZShiLmxhYmVsKVxuICApO1xuICBpZmlkLnZhbHVlID0gX2lmaWQ7XG4gIHNjYW5fdHlwZV9saXN0LnZhbHVlID0gc2Nhbl90eXBlcztcbiAgZGlzY292ZXJlZF9zY2FuX3R5cGVfbGlzdC52YWx1ZSA9IHNjYW5fdHlwZXMuZmlsdGVyKChpdGVtKSA9PiAoaXRlbS5pZCAhPSAnaXB2NF9uZXRzY2FuJykpO1xuICBpc19lbnRlcnByaXNlX2wudmFsdWUgPSBfaXNfZW50ZXJwcmlzZV9sO1xuICBzZWxlY3RlZF9zY2FuX3R5cGUudmFsdWUgPSBzY2FuX3R5cGVfbGlzdC52YWx1ZVswXTtcbn07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIEZ1bmN0aW9uIGNhbGxlZCB3aGVuZXZlciB0aGUgQ0lEUiBjaGFuZ2VzLFxuICogaW4gY2FzZSBvZiBhIG5ldHdvcmsgdGhlIHBvcnQgaXMgbm90IG5lZWRlZFxuICovXG4vKiBcblxuPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCI+XG4gIDxkaXYgY2xhc3M9XCJjb2wtMlwiPjwvZGl2PlxuICA8ZGl2IGNsYXNzPVwiY29sLTEwIGQtZmxleCBhbGlnbi1pdGVtcy1jZW50ZXJcIj5cbiAgICA8IS0tXG4gICAgICBISURERU4gQlVUVE9OIEZPUiBOT1dcbiAgICAgIDxidXR0b25cbiAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgQGNsaWNrPVwibG9hZF9wb3J0c1wiXG4gICAgICA6ZGlzYWJsZWQ9XCIhaXNfaG9zdF9jb3JyZWN0IHx8IGRpc2FibGVfbG9hZF9wb3J0c1wiXG4gICAgICBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiXG4gICAgPlxuICAgICAge3sgX2kxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMubG9hZF9wb3J0c1wiKSB9fVxuICAgIDwvYnV0dG9uPlxuICAgIC0tPlxuICAgIDxkZCB2LWlmPVwic2hvd19wb3J0X2ZlZWRiYWNrXCIgY2xhc3M9XCJtcy0yIG1iLTAgdGV4dC1kYW5nZXJcIj5cbiAgICAgIHt7IHBvcnRfZmVlZGJhY2sgfX1cbiAgICA8L2RkPlxuICAgIDxhIGNsYXNzPVwibnRvcG5nLXRydW5jYXRlXCI+PC9hPlxuICA8L2Rpdj5cbjwvZGl2PlxuXG4gLS0gSGlkZGVuIGZ1bmN0aW9uIGZvciBub3csIGl0J3Mgbm90IG5lZWRlZCAtLVxuXG5jb25zdCBwb3J0X2ZlZWRiYWNrID0gaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5ub19wb3J0c19kZXRlY3RlZFwiKTtcbmNvbnN0IHNlcnZlcl9wb3J0cyA9IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC9vcGVuX3BvcnRzLmx1YWA7XG5jb25zdCBkaXNhYmxlX2xvYWRfcG9ydHMgPSByZWYoZmFsc2UpO1xuXG5mdW5jdGlvbiBkaXNhYmxlX3BvcnRzKCkge1xuICBpZiAoc2VsZWN0ZWRfY2lkci52YWx1ZS5pZCAhPSBjaWRyXzI0KSB7XG4gICAgZGlzYWJsZV9sb2FkX3BvcnRzLnZhbHVlID0gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgZGlzYWJsZV9sb2FkX3BvcnRzLnZhbHVlID0gdHJ1ZTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBsb2FkX3BvcnRzKCkge1xuICBhY3RpdmF0ZV9zcGlubmVyLnZhbHVlID0gdHJ1ZTtcbiAgLyogSW4gY2FzZSB0aGUgaG9zdCBpcyBub3QgZW1wdHksIGhpZGUgdGhlIHBsYWNlaG9sZGVyICovXG4vKiAgaWYgKGRhdGFVdGlscy5pc0VtcHR5T3JOdWxsKGhvc3QudmFsdWUpKSB7XG4gICAgaGlkZV9wb3J0c19wbGFjZWhvbGRlci52YWx1ZSA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgaGlkZV9wb3J0c19wbGFjZWhvbGRlci52YWx1ZSA9IGZhbHNlO1xuICB9XG5cbiAgLyogUmVxdWVzdCBmb3IgdGhlIGF2YWlsYWJsZSBwb3J0cyAqL1xuLyogIGNvbnN0IHVybCA9IE50b3BVdGlscy5idWlsZFVSTChzZXJ2ZXJfcG9ydHMsIHtcbiAgICBob3N0OiBob3N0LnZhbHVlLFxuICAgIGlmaWQ6IGlmaWQudmFsdWUsXG4gICAgY2xpc3J2OiBcInNlcnZlclwiLFxuICB9KTtcblxuICBjb25zdCByZXN1bHQgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsKTtcblxuICAvKiBTaG93IHRoZSByZXN1bHRzIG9yIGVtcHR5IGlmIG5vIGRhdGEgd2FzIGZvdW5kICovXG4vKiAgaWYgKCFkYXRhVXRpbHMuaXNFbXB0eU9yTnVsbChyZXN1bHQpKSB7XG4gICAgcG9ydHMudmFsdWUgPSByZXN1bHQubWFwKCh4KSA9PiB4LmtleSkuam9pbihcIixcIik7XG4gICAgc2hvd19wb3J0X2ZlZWRiYWNrLnZhbHVlID0gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgc2hvd19wb3J0X2ZlZWRiYWNrLnZhbHVlID0gdHJ1ZTtcbiAgICBwb3J0cy52YWx1ZSA9IFwiXCI7XG4gICAgLyogUmVtb3ZlIHRoZSBtZXNzYWdlIGFmdGVyIDUgc2Vjb25kcyEgKi9cbi8qICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgc2hvd19wb3J0X2ZlZWRiYWNrLnZhbHVlID0gZmFsc2U7XG4gICAgfSwgNTAwMCk7XG4gIH1cbiAgYWN0aXZhdGVfc3Bpbm5lci52YWx1ZSA9IGZhbHNlO1xufVxuKi9cblxuXG5kZWZpbmVFeHBvc2UoeyBzaG93LCBjbG9zZSwgbWV0cmljc0xvYWRlZCB9KTtcbjwvc2NyaXB0PlxuIiwiXG5leHBvcnQgY29uc3QgY29sdW1uc19mb3JtYXR0ZXIgPSAoY29sdW1ucywgc2Nhbl90eXBlX2xpc3QsIGlzX3JlcG9ydCwgaWZpZCkgPT4ge1xuICBjb25zdCB2aXNpYmxlX2RpY3QgPSB7XG4gICAgICAgIGRvd25sb2FkOiB0cnVlLFxuICAgICAgICBzaG93X3Jlc3VsdDogdHJ1ZVxuICAgICAgfTtcblxuICBsZXQgbWFwX2NvbHVtbnMgPSB7XG4gICAgXCJob3N0XCI6IChob3N0LCByb3cpID0+IHtcbiAgICAgIHJldHVybiBob3N0X2YoaG9zdCxyb3csaWZpZCk7XG4gICAgfSxcbiAgICBcInNjYW5fdHlwZVwiOiAoc2Nhbl90eXBlLCByb3cpID0+IHtcbiAgICAgIHJldHVybiBzY2FuX3R5cGVfZihzY2FuX3R5cGUsIHJvdywgc2Nhbl90eXBlX2xpc3QpO1xuICAgIH0sXG4gICAgXCJsYXN0X3NjYW5cIjogKGxhc3Rfc2Nhbiwgcm93KSA9PiB7XG4gICAgICByZXR1cm4gbGFzdF9zY2FuX2YobGFzdF9zY2FuLCByb3cpO1xuICAgIH0sXG5cbiAgICBcImR1cmF0aW9uXCI6IChsYXN0X3NjYW4sIHJvdykgPT4ge1xuICAgICAgcmV0dXJuIGR1cmF0aW9uX2YobGFzdF9zY2FuLCByb3cpO1xuICAgIH0sXG4gICAgXCJzY2FuX2ZyZXF1ZW5jeVwiIDogKHNjYW5fZnJlcXVlbmN5KSA9PiB7XG4gICAgICByZXR1cm4gc2Nhbl9mcmVxdWVuY3lfZihzY2FuX2ZyZXF1ZW5jeSk7XG4gICAgfSwgXG4gICAgXCJpc19va19sYXN0X3NjYW5cIjogKGlzX29rX2xhc3Rfc2NhbikgPT4ge1xuICAgICAgcmV0dXJuIGlzX29rX2xhc3Rfc2Nhbl9mKGlzX29rX2xhc3Rfc2Nhbik7XG4gICAgICBcbiAgICB9LFxuICAgIFwibWF4X3Njb3JlX2N2ZVwiOiAobWF4X3Njb3JlX2N2ZSwgcm93KSA9PiB7XG4gICAgICByZXR1cm4gbWF4X3Njb3JlX2N2ZV9mKG1heF9zY29yZV9jdmUsIHJvdyk7XG4gICAgfSxcbiAgICBcInRjcF9wb3J0c1wiOiAodGNwX3BvcnRzLCByb3cpID0+IHtcbiAgICAgIHJldHVybiB0Y3BfcG9ydHNfZih0Y3BfcG9ydHMsIHJvdyk7XG4gICAgICBcbiAgICB9LFxuICAgIFwidWRwX3BvcnRzXCI6ICh1ZHBfcG9ydHMsIHJvdykgPT4ge1xuICAgICAgcmV0dXJuIHVkcF9wb3J0c19mKHVkcF9wb3J0cywgcm93KTtcbiAgICB9LFxuICAgIFwibnVtX3Z1bG5lcmFiaWxpdGllc19mb3VuZFwiOiAobnVtX3ZzLCByb3cpID0+IHtcbiAgICAgIHJldHVybiBudW1fdnVsbl9mb3VuZF9mKG51bV92cyxyb3cpO1xuXG4gICAgfVxuICB9O1xuXG4gIGNvbHVtbnMuZm9yRWFjaCgoYykgPT4ge1xuICAgIGMucmVuZGVyX2Z1bmMgPSBtYXBfY29sdW1uc1tjLmRhdGFfZmllbGRdO1xuXG4gICAgaWYgKGMuaWQgPT0gXCJhY3Rpb25zXCIpIHtcbiAgICAgICAgICAgIFxuICAgICAgYy5idXR0b25fZGVmX2FycmF5LmZvckVhY2goKGIpID0+IHtcbiAgICAgICAgICBcbiAgICAgICAgYi5mX21hcF9jbGFzcyA9IChjdXJyZW50X2NsYXNzLCByb3cpID0+IHsgXG4gICAgICAgICAgY3VycmVudF9jbGFzcyA9IGN1cnJlbnRfY2xhc3MuZmlsdGVyKChjbGFzc19pdGVtKSA9PiBjbGFzc19pdGVtICE9IFwibGluay1kaXNhYmxlZFwiKTtcbiAgICAgICAgICAvLyBGSVggTUUgd2l0aCBVRFAgcG9ydHMgY2hlY2tcbiAgICAgICAgICBpZigocm93LmlzX29rX2xhc3Rfc2NhbiA9PSAzIHx8IHJvdy5pc19va19sYXN0X3NjYW4gPT0gbnVsbCB8fCAocm93Lmxhc3Rfc2NhbiA9PSBudWxsIHx8ICgocm93Lmxhc3Rfc2NhbiAhPSBudWxsICYmIHJvdy5sYXN0X3NjYW4udGltZSA9PSBudWxsKSkpICkgJiYgdmlzaWJsZV9kaWN0W2IuaWRdKSB7XG4gICAgICAgICAgICBjdXJyZW50X2NsYXNzLnB1c2goXCJsaW5rLWRpc2FibGVkXCIpOyBcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGN1cnJlbnRfY2xhc3M7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIFxuICByZXR1cm4gY29sdW1ucztcbn07XG5cbmV4cG9ydCBjb25zdCBudW1fdnVsbl9mb3VuZF9mID0gKG51bV92dWxuX2ZvdW5kLCByb3cpID0+IHtcbiAgaWYgKHJvdy5pc19va19sYXN0X3NjYW4gPT0gMSAmJiAocm93Lmxhc3Rfc2NhbiAhPSBudWxsICYmIHJvdy5sYXN0X3NjYW4udGltZSAhPSBudWxsKSkge1xuICAgIHJldHVybiBudW1fdnVsbl9mb3VuZDtcbiAgfVxuICByZXR1cm4gXCJcIjtcblxufVxuZXhwb3J0IGNvbnN0IG1heF9zY29yZV9jdmVfZiA9IChtYXhfc2NvcmVfY3ZlLCByb3cpID0+IHtcbiAgbGV0IGxhYmVsID0gXCJcIjtcblxuICBpZiAocm93LmlzX29rX2xhc3Rfc2NhbiA9PSAxICAmJiAocm93Lmxhc3Rfc2NhbiAhPSBudWxsICYmIHJvdy5sYXN0X3NjYW4udGltZSAhPSBudWxsKSkge1xuICAgIGNvbnN0IHNjb3JlID0gTnVtYmVyKG1heF9zY29yZV9jdmUpO1xuICAgIGxldCBmb250X2NvbG9yID0gXCJcIjtcbiAgXG4gICAgaWYgKG1heF9zY29yZV9jdmUgIT0gbnVsbCkge1xuICBcbiAgICAgIGlmIChzY29yZSA9PSAwKSB7XG4gICAgICAgIGZvbnRfY29sb3IgPSBcImdyZWVuXCI7XG4gICAgICB9IGVsc2UgaWYoc2NvcmUgPCAzLjkpIHtcbiAgICAgICAgZm9udF9jb2xvciA9IFwiZ3JleVwiO1xuICAgICAgfSBlbHNlIGlmKHNjb3JlIDwgNykge1xuICAgICAgICBmb250X2NvbG9yID0gXCJ5ZWxsb3dcIjtcbiAgICAgIH0gZWxzZSAge1xuICAgICAgICBmb250X2NvbG9yID0gXCJyZWRcIjtcbiAgICAgIH0gXG4gIFxuICAgICAgaWYgKHNjb3JlICE9IDApIHtcbiAgICAgICAgbGFiZWwgPSBgPEZPTlQgQ09MT1I9JHtmb250X2NvbG9yfT4ke21heF9zY29yZV9jdmV9YDtcbiAgICAgIH1cbiAgICB9XG5cbiAgfVxuICBcblxuXG4gIHJldHVybiBsYWJlbDtcbn1cblxuXG5leHBvcnQgY29uc3Qgc2Nhbl90eXBlX2YgPSAoc2Nhbl90eXBlLCBmcm9tX3JlcG9ydCwgcm93KSA9PiB7XG4gIGlmIChmcm9tX3JlcG9ydCAmJiByb3cuaXNfZG93bikge1xuICAgIHJldHVybiAnJztcbiAgfVxuICBpZiAoc2Nhbl90eXBlICE9PSB1bmRlZmluZWQpIHtcbiAgICBsZXQgbGFiZWwgPSBzY2FuX3R5cGVcbiAgICBjb25zdCBpMThuX25hbWUgPSBcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5zY2FuX3R5cGVfbGlzdC5cIitzY2FuX3R5cGU7XG4gICAgbGFiZWwgPSBpMThuKGkxOG5fbmFtZSk7XG4gICAgcmV0dXJuIGxhYmVsO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBsYXN0X3NjYW5fZiA9IChsYXN0X3NjYW4sIHJvdykgPT4ge1xuICBpZiAocm93LmlzX29rX2xhc3Rfc2NhbiA9PSAzKSB7XG4gICAgcmV0dXJuIGBgO1xuICB9XG4gIGlmIChsYXN0X3NjYW4gIT09IHVuZGVmaW5lZCAmJiBsYXN0X3NjYW4udGltZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGxhc3Rfc2Nhbi50aW1lO1xuICB9IGVsc2UgaWYgKGxhc3Rfc2NhbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGxhc3Rfc2NhbjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5ub3RfeWV0XCIpO1xuICB9XG59IFxuXG5leHBvcnQgY29uc3QgZHVyYXRpb25fZiA9IChsYXN0X3NjYW4sIHJvdykgPT4ge1xuICBpZiAocm93LmlzX29rX2xhc3Rfc2NhbiA9PSAzICkge1xuICAgIHJldHVybiBgYDtcbiAgfVxuICBpZiAocm93Lmxhc3Rfc2NhbiAhPT0gdW5kZWZpbmVkICYmIHJvdy5sYXN0X3NjYW4uZHVyYXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiByb3cubGFzdF9zY2FuLmR1cmF0aW9uO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBpMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLm5vdF95ZXRcIik7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHNjYW5fZnJlcXVlbmN5X2YgPSAoc2Nhbl9mcmVxdWVuY3kpID0+IHtcbiAgbGV0IGxhYmVsID0gXCJcIjtcbiAgaWYgKHNjYW5fZnJlcXVlbmN5ID09IG51bGwgfHwgc2Nhbl9mcmVxdWVuY3kgPT0gXCJkaXNhYmxlZFwiKSB7XG4gICAgcmV0dXJuIFwiXCI7XG4gIH0gZWxzZSBpZiAoc2Nhbl9mcmVxdWVuY3kgPT0gXCIxZGF5XCIpIHtcbiAgICBsYWJlbCA9ICBpMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLmRhaWx5XCIpO1xuICB9IGVsc2Uge1xuICAgIGxhYmVsID0gIGkxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMud2Vla2x5XCIpO1xuICB9XG4gIHJldHVybiBgPHNwYW4gY2xhc3M9XCJiYWRnZSBiZy1zZWNvbmRhcnlcIiB0aXRsZT1cIiR7bGFiZWx9XCI+JHtsYWJlbH08L3NwYW4+YDtcbn1cblxuZXhwb3J0IGNvbnN0IGlzX29rX2xhc3Rfc2Nhbl9mID0gKGlzX29rX2xhc3Rfc2NhbikgPT4ge1xuICBsZXQgbGFiZWwgPSBcIlwiXG4gIGlmIChpc19va19sYXN0X3NjYW4gPT0gMikge1xuICAgIC8vIHNjaGVkdWxlZFxuICAgIGxhYmVsID0gaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5zY2hlZHVsZWRcIik7XG4gICAgcmV0dXJuIGA8c3BhbiBjbGFzcz1cImJhZGdlIGJnLWRhcmtcIiB0aXRsZT1cIiR7bGFiZWx9XCI+JHtsYWJlbH08L3NwYW4+YDtcbiAgfSBlbHNlIGlmIChpc19va19sYXN0X3NjYW4gPT0gNCkge1xuICAgIC8vIG5vdCBzY2FubmVkXG4gICAgbGFiZWwgPSBpMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLnNjYW5uaW5nXCIpO1xuICAgIHJldHVybiBgPHNwYW4gY2xhc3M9XCJiYWRnZSBiZy1pbmZvXCIgdGl0bGU9XCIke2xhYmVsfVwiPiR7bGFiZWx9PC9zcGFuPmA7IFxuICB9IGVsc2UgaWYgKGlzX29rX2xhc3Rfc2NhbiA9PSAzIHx8IGlzX29rX2xhc3Rfc2NhbiA9PSBudWxsKSB7XG4gICAgLy8gbm90IHNjYW5uZWRcbiAgICBsYWJlbCA9IGkxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMubm90X3NjYW5uZWRcIik7XG4gICAgcmV0dXJuIGA8c3BhbiBjbGFzcz1cImJhZGdlIGJnLXByaW1hcnlcIiB0aXRsZT1cIiR7bGFiZWx9XCI+JHtsYWJlbH08L3NwYW4+YDtcbiAgfSBlbHNlIGlmIChpc19va19sYXN0X3NjYW4gPT0gMSkge1xuICAgIC8vIHN1Y2Nlc3NcbiAgICBsYWJlbCA9IGkxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMuc3VjY2Vzc1wiKTtcbiAgICByZXR1cm4gYDxzcGFuIGNsYXNzPVwiYmFkZ2UgYmctc3VjY2Vzc1wiIHRpdGxlPVwiJHtsYWJlbH1cIj4ke2xhYmVsfTwvc3Bhbj5gO1xuICB9IGVsc2UgaWYgKGlzX29rX2xhc3Rfc2NhbiA9PSAwKSB7XG4gICAgLy8gZXJyb3JcbiAgICBsYWJlbCA9IGkxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMuZXJyb3JcIik7XG4gICAgcmV0dXJuIGA8c3BhbiBjbGFzcz1cImJhZGdlIGJnLWRhbmdlclwiIHRpdGxlPVwiJHtsYWJlbH1cIj4ke2xhYmVsfTwvc3Bhbj5gO1xuICB9IGVsc2UgaWYgKGlzX29rX2xhc3Rfc2NhbiA9PSA1KSB7XG4gICAgLy8gd2FybmluZyAtPiBmYWlsZWRcbiAgICBsYWJlbCA9IGkxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMuZmFpbGVkXCIpO1xuICAgIHJldHVybiBgPHNwYW4gY2xhc3M9XCJiYWRnZSBiZy13YXJuaW5nXCIgdGl0bGU9XCIke2xhYmVsfVwiPiR7bGFiZWx9PC9zcGFuPmA7XG4gIH0gXG59XG5cbmNvbnN0IHBvcnRzX2xpc3Rfc3RyaW5nID0gKHBvcnRfbGlzdCkgPT4ge1xuICBsZXQgcG9ydHNfc3RyaW5nID0gXCJcIjtcbiAgaWYgKHBvcnRfbGlzdCAhPSBudWxsKSB7XG4gICAgcG9ydF9saXN0LmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgIGlmKHBvcnRzX3N0cmluZyA9PSBcIlwiKSB7XG4gICAgICAgIHBvcnRzX3N0cmluZyA9IGl0ZW07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwb3J0c19zdHJpbmcgKz0gYCwgJHtpdGVtfWA7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gcG9ydHNfc3RyaW5nO1xufVxuXG5jb25zdCBnZXRfbnVtX29wZW5fcG9ydHNfaWNvbiA9IChkaWZmX2Nhc2UsIHVudXNlZF9wb3J0X2xpc3QsIGZpbHRlcmVkX3BvcnRfbGlzdCkgPT4ge1xuXG4gIGxldCBsYWJlbCA9IG51bGw7XG4gIHN3aXRjaChkaWZmX2Nhc2UpIHtcbiAgICBjYXNlIDQ6IHtcbiAgICAgIGxldCB1bnVzZWRfcG9ydF9saXN0X3N0cmluZyA9IHBvcnRzX2xpc3Rfc3RyaW5nKHVudXNlZF9wb3J0X2xpc3QpO1xuICAgICAgbGFiZWwgPSBgIDxzcGFuIGNsYXNzPVwiYmFkZ2UgYmctc2Vjb25kYXJ5XCI+PGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1naG9zdFwiIHRpdGxlPScke3VudXNlZF9wb3J0X2xpc3Rfc3RyaW5nfSc+PC9pPjwvc3Bhbj48L2Rpdj5gO1xuICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMzoge1xuICAgICAgbGV0IGZpbHRlcmVkX3BvcnRzX2xpc3Rfc3RyaW5nID0gcG9ydHNfbGlzdF9zdHJpbmcoZmlsdGVyZWRfcG9ydF9saXN0KTtcbiAgICAgIGxhYmVsID0gYCA8c3BhbiBjbGFzcz1cImJhZGdlIGJnLXNlY29uZGFyeVwiPjxpIGNsYXNzPVwiZmEtc29saWQgZmEtZmlsdGVyXCIgdGl0bGU9JyR7ZmlsdGVyZWRfcG9ydHNfbGlzdF9zdHJpbmd9Jz48L2k+PC9zcGFuPmA7XG4gICAgfVxuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgcmV0dXJuIGxhYmVsO1xufVxuXG5leHBvcnQgY29uc3QgdWRwX3BvcnRzX2YgPSAodWRwX3BvcnRzLCByb3cpID0+IHtcbiAgaWYgKHVkcF9wb3J0cyA9PSAwICYmIHJvdy51ZHBfcG9ydHMgPT0gMCAmJiByb3cuc2Nhbl90eXBlLmNvbnRhaW5zKFwidWRwXCIpKSB7XG4gICAgdWRwX3BvcnRzID0gcm93Lm51bV9vcGVuX3BvcnRzO1xuICB9XG4gIGxldCBsYWJlbCA9IFwiXCI7XG5cbiAgaWYgKHVkcF9wb3J0cyA9PSBudWxsIHx8IHVkcF9wb3J0cyA8PSAwKSB7XG4gICAgcmV0dXJuIGxhYmVsO1xuICB9XG5cbiAgaWYgKHJvdy5pc19va19sYXN0X3NjYW4gPT0gMSAmJiAocm93Lmxhc3Rfc2NhbiAhPSBudWxsICYmIHJvdy5sYXN0X3NjYW4udGltZSAhPSBudWxsKSkge1xuICBcbiAgICBsYWJlbCA9IGAke3VkcF9wb3J0c31gO1xuXG4gICAgaWYgKHJvdy5ob3N0X2luX21lbSkge1xuXG4gICAgICBjb25zdCBudW1fcG9ydHNfaWNvbiA9IGdldF9udW1fb3Blbl9wb3J0c19pY29uKHJvdy51ZHBfcG9ydHNfY2FzZSxyb3cudWRwX3BvcnRzX3VudXNlZCwgcm93LnVkcF9maWx0ZXJlZF9wb3J0cyk7XG4gICAgICBpZihudW1fcG9ydHNfaWNvbiAhPSBudWxsKSB7XG4gICAgICAgIGxhYmVsICs9IG51bV9wb3J0c19pY29uO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBsYWJlbDtcbn1cblxuXG5leHBvcnQgY29uc3QgdGNwX3BvcnRzX2YgPSAodGNwX3BvcnRzLCByb3cpID0+IHtcbiAgaWYgKHRjcF9wb3J0cyA9PSAwICYmIHJvdy50Y3BfcG9ydHMgPT0gMCAmJiByb3cuc2Nhbl90eXBlLmNvbnRhaW5zKFwidGNwXCIpKSB7XG4gICAgdGNwX3BvcnRzID0gcm93Lm51bV9vcGVuX3BvcnRzO1xuICB9XG4gIGxldCBsYWJlbCA9IFwiXCI7XG5cbiAgaWYgKHRjcF9wb3J0cyA9PSBudWxsIHx8IHRjcF9wb3J0cyA8PSAwKSB7XG4gICAgcmV0dXJuIGxhYmVsO1xuICB9XG5cbiAgaWYgKHJvdy5pc19va19sYXN0X3NjYW4gPT0gMSAmJiAocm93Lmxhc3Rfc2NhbiAhPSBudWxsICYmIHJvdy5sYXN0X3NjYW4udGltZSAhPSBudWxsKSkge1xuXG4gIFxuICAgIGxhYmVsID0gYCR7dGNwX3BvcnRzfWA7XG5cbiAgICBpZiAocm93Lmhvc3RfaW5fbWVtKSB7XG5cbiAgICAgIGNvbnN0IG51bV9wb3J0c19pY29uID0gZ2V0X251bV9vcGVuX3BvcnRzX2ljb24ocm93LnRjcF9wb3J0c19jYXNlLHJvdy50Y3BfcG9ydHNfdW51c2VkLCByb3cudGNwX3BvcnRzX2ZpbHRlcmVkKTtcbiAgICAgIGlmKG51bV9wb3J0c19pY29uICE9IG51bGwpIHtcbiAgICAgICAgbGFiZWwgKz0gbnVtX3BvcnRzX2ljb247XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxhYmVsO1xufVxuXG5leHBvcnQgY29uc3QgdGNwX3BvcnRfZiA9IChwb3J0LCByb3cpID0+IHtcbiAgbGV0IHJzcCA9IHBvcnQ7XG4gIGlmIChyb3cucG9ydF9sYWJlbCAhPSBudWxsICYmIHJvdy5wb3J0X2xhYmVsICE9IHBvcnQpIHtcbiAgICByc3AgKz0gYCAoJHtyb3cucG9ydF9sYWJlbH0pYFxuICB9XG4gIHJldHVybiByc3A7XG59XG5jb25zdCBmaW5kX2JhZGdlID0gKHBvcnQsIHJvdywgcG9ydHNfdW51c2VkLCBwb3J0c19maWx0ZXJlZCkgPT4ge1xuICBsZXQgcmVzdWx0ID0gJydcbiAgaWYgKHBvcnRzX3VudXNlZCAhPSBudWxsKSB7XG4gICAgcG9ydHNfdW51c2VkLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgIGlmKHBvcnQgPT0gTnVtYmVyKGl0ZW0pICkge1xuICAgICAgICByZXN1bHQgPSBcInVudXNlZFwiO1xuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBpZihyZXN1bHQgIT0gJycpIHtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgaWYgKHBvcnRzX2ZpbHRlcmVkICE9IG51bGwpIHtcbiAgICBwb3J0c19maWx0ZXJlZC5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICBpZihwb3J0ID09IE51bWJlcihpdGVtKSkge1xuICAgICAgICByZXN1bHQgPSBcImZpbHRlcmVkXCI7XG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmNvbnN0IGdldF9pY29uX2NvbXBvbmVudCA9IChpdGVtLCByb3csIHBvcnRzX3VudXNlZCwgcG9ydHNfZml0ZXJlZCkgPT4ge1xuICBsZXQgcG9ydCA9IGl0ZW0uc3BsaXQoXCIgXCIpWzBdLnNwbGl0KFwiL1wiKVswXTtcbiAgbGV0IHBvcnRfYmFkZ2UgPSBmaW5kX2JhZGdlKE51bWJlcihwb3J0KSwgcm93LCBwb3J0c191bnVzZWQsIHBvcnRzX2ZpdGVyZWQpO1xuICBsZXQgaWNvbl9jb21wID0gbnVsbDtcbiAgc3dpdGNoIChwb3J0X2JhZGdlKSB7XG4gICAgY2FzZSAndW51c2VkJzogXG4gICAgICAgIGljb25fY29tcCA9IGAgJm5ic3A7PHNwYW4gY2xhc3M9XCJiYWRnZSBiZy1zZWNvbmRhcnlcIiB0aXRsZT0nJHtpMThuKCdob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMudW51c2VkX3BvcnQnKX0nPjxpIGNsYXNzPVwiZmEtc29saWQgZmEtZ2hvc3RcIj48L2k+PC9zcGFuPmA7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdmaWx0ZXJlZCc6XG4gICAgICAgIGljb25fY29tcCA9IGAgJm5ic3A7PHNwYW4gY2xhc3M9XCJiYWRnZSBiZy1wcmltYXJ5XCIgdGl0bGU9JyR7aTE4bignaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLmZpbHRlcmVkX3BvcnQnKX0nPjxpIGNsYXNzPVwiZmEtc29saWQgZmEtZmlsdGVyXCI+PC9pPjwvc3Bhbj5gO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDogXG4gICAgICBicmVhaztcbiAgfVxuXG4gIHJldHVybiBpY29uX2NvbXA7XG59XG5cbmV4cG9ydCBjb25zdCB0Y3BfdWRwX3BvcnRzX2xpc3RfZiA9ICh0Y3BfcG9ydHNfbGlzdCx1ZHBfcG9ydHNfbGlzdCwgcm93KSA9PiB7XG4gIGxldCBwb3J0c19tYXAgPSBuZXcgTWFwKCk7XG5cbiAgaWYgKHJvdy5pc19va19sYXN0X3NjYW4gPT0gMSAmJiAocm93Lmxhc3Rfc2NhbiAhPSBudWxsICYmIHJvdy5sYXN0X3NjYW4udGltZSAhPSBudWxsKSAmJiB0Y3BfcG9ydHNfbGlzdCAhPSBudWxsICkge1xuICAgIGNvbnN0IHBvcnRzID0gdGNwX3BvcnRzX2xpc3Quc3BsaXQoXCIsXCIpO1xuICAgIGxldCBsYWJlbCA9IFwiXCI7XG4gICAgbGV0IHBvcnRfaWQgPSBcIlwiO1xuICAgIHBvcnRzLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgIGlmKGl0ZW0gIT0gbnVsbCAmJiBpdGVtICE9ICcnKSB7XG5cbiAgICAgICAgbGFiZWwgPSBpdGVtO1xuICAgICAgICBwb3J0X2lkID0gaXRlbTtcbiAgICAgICAgaWYgKHJvdy5ob3N0X2luX21lbSkge1xuICAgICAgICAgIGNvbnN0IGljb25fY29tcCA9IGdldF9pY29uX2NvbXBvbmVudChpdGVtLCByb3csIHJvdy50Y3BfcG9ydHNfdW51c2VkLCByb3cudGNwX3BvcnRzX2ZpbHRlcmVkKTtcbiAgICAgICAgICBpZihpY29uX2NvbXAgIT0gbnVsbCkge1xuICAgICAgICAgICAgbGFiZWwgKz0gaWNvbl9jb21wO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgbGFiZWwgPSBgPGxpPiR7bGFiZWx9PC9saT5gO1xuXG4gICAgICAgIHBvcnRzX21hcC5zZXQoaXRlbSwgIHtwb3J0X2xhYmVsIDpsYWJlbCwgcG9ydF9pZDogTnVtYmVyKHBvcnRfaWQuc3BsaXQoXCIvXCIpWzBdKX0pXG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAocm93LnRjcF9wb3J0c19maWx0ZXJlZCAhPSBudWxsKSB7XG4gICAgICByb3cudGNwX3BvcnRzX2ZpbHRlcmVkLmZvckVhY2goKGl0ZW0pID0+IHtcblxuICAgICAgICBpdGVtICs9IGAvdGNwYDtcbiAgICAgICAgbGFiZWwgPSBpdGVtO1xuICAgICAgICBwb3J0X2lkID0gaXRlbTtcbiAgICAgICAgaWYgKHJvdy5ob3N0X2luX21lbSkge1xuICAgICAgICAgIGxhYmVsICs9IGAgPHNwYW4gY2xhc3M9XCJiYWRnZSBiZy1wcmltYXJ5XCIgdGl0bGU9JyR7aTE4bignaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLmZpbHRlcmVkX3BvcnQnKX0nPjxpIGNsYXNzPVwiZmEtc29saWQgZmEtZmlsdGVyXCI+PC9pPjwvc3Bhbj5gO1xuICAgICAgICB9XG4gICAgICAgIGxhYmVsID0gYDxsaT4ke2xhYmVsfTwvbGk+YDtcbiAgICAgICAgcG9ydHNfbWFwLnNldChpdGVtLCAge3BvcnRfbGFiZWwgOmxhYmVsLCBwb3J0X2lkOiBOdW1iZXIocG9ydF9pZC5zcGxpdChcIi9cIilbMF0pfSk7XG5cblxuICAgICAgfSk7XG4gICAgfVxuICAgIFxuICB9IFxuXG5cbiAgaWYgKHJvdy5pc19va19sYXN0X3NjYW4gPT0gMSAmJiAocm93Lmxhc3Rfc2NhbiAhPSBudWxsICYmIHJvdy5sYXN0X3NjYW4udGltZSAhPSBudWxsKSAmJiB1ZHBfcG9ydHNfbGlzdCAhPSBudWxsKSB7XG4gICAgY29uc3QgcG9ydHMgPSB1ZHBfcG9ydHNfbGlzdC5zcGxpdChcIixcIik7XG5cbiAgICBsZXQgbGFiZWwgPSBcIlwiO1xuICAgIGxldCBwb3J0X2lkID0gXCJcIjtcbiAgICBwb3J0cy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICBpZihpdGVtICE9IG51bGwgJiYgaXRlbSAhPSAnJykge1xuXG4gICAgICAgIGxhYmVsID0gaXRlbTtcbiAgICAgICAgcG9ydF9pZCA9IGl0ZW07XG4gICAgICAgIGlmIChyb3cuaG9zdF9pbl9tZW0pIHtcbiAgICAgICAgICBjb25zdCBpY29uX2NvbXAgPSBnZXRfaWNvbl9jb21wb25lbnQoaXRlbSwgcm93LCByb3cudWRwX3BvcnRzX3VudXNlZCwgcm93LnVkcF9wb3J0c19maWx0ZXJlZCk7XG4gICAgICAgICAgaWYoaWNvbl9jb21wICE9IG51bGwpIHtcbiAgICAgICAgICAgIGxhYmVsICs9IGljb25fY29tcDtcbiAgICAgICAgICB9ICAgICAgICBcbiAgICAgICAgfVxuICAgICAgICBsYWJlbCA9IGA8bGk+JHtsYWJlbH08L2xpPmA7XG5cbiAgICAgICAgcG9ydHNfbWFwLnNldChpdGVtLCB7cG9ydF9sYWJlbCA6bGFiZWwsIHBvcnRfaWQ6IE51bWJlcihwb3J0X2lkLnNwbGl0KFwiL1wiKVswXSl9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChyb3cudWRwX2ZpbHRlcmVkX3BvcnRzICE9IG51bGwpIHtcbiAgICAgIHJvdy51ZHBfcG9ydHNfZmlsdGVyZWQuZm9yRWFjaCgoaXRlbSkgPT4ge1xuXG4gICAgICAgIGl0ZW0gKz0gYC91ZHBgO1xuICAgICAgICBsYWJlbCA9IGl0ZW07XG4gICAgICAgIHBvcnRfaWQgPSBpdGVtO1xuICAgICAgICBpZiAocm93Lmhvc3RfaW5fbWVtKSB7XG4gICAgICAgICAgbGFiZWwgKz0gYCA8c3BhbiBjbGFzcz1cImJhZGdlIGJnLXByaW1hcnlcIiB0aXRsZT0nJHtpMThuKCdob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMuZmlsdGVyZWRfcG9ydCcpfSc+PGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1maWx0ZXJcIj48L2k+PC9zcGFuPmA7XG4gICAgICAgIH1cbiAgICAgICAgbGFiZWwgPSBgPGxpPiR7aXRlbX08L2xpPmA7XG4gICAgICAgIHBvcnRzX21hcC5zZXQoaXRlbSwge3BvcnRfbGFiZWw6IGxhYmVsLCBwb3J0X2lkIDogTnVtYmVyKHBvcnRfaWQuc3BsaXQoXCIvXCIpWzBdKX0pXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBsZXQgY29udGVudF9sYWJlbCA9IFwiXCJcbiAgcG9ydHNfbWFwID0gbmV3IE1hcChbLi4ucG9ydHNfbWFwLmVudHJpZXMoKV0uc29ydCgoYSxiKSA9PiBhWzFdLnBvcnRfaWQtYlsxXS5wb3J0X2lkKSk7XG5cbiAgcG9ydHNfbWFwLmZvckVhY2goKHZhbHVlcywga2V5cykgPT4ge1xuICAgIGNvbnRlbnRfbGFiZWwgKz0gYCR7dmFsdWVzLnBvcnRfbGFiZWx9YDtcbiAgfSlcblxuXG4gIHJldHVybiBjb250ZW50X2xhYmVsO1xufVxuXG5leHBvcnQgY29uc3QgZGlzY292ZXJkX2hvc3RzX2xpc3RfZiA9IChob3N0c19zdHJpbmcpID0+IHtcbiAgY29uc3QgaG9zdHNfbGlzdCA9IGhvc3RzX3N0cmluZy5zcGxpdChcIixcIik7XG4gIGxldCBsYWJlbCA9IFwiXCI7XG4gIGhvc3RzX2xpc3QuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgIGlmIChpdGVtICE9IFwiXCIpXG4gICAgICBsYWJlbCArPSBgPGxpPiR7aXRlbX08L2xpPmA7XG4gIH0pXG4gIHJldHVybiBsYWJlbDtcbn1cbmV4cG9ydCBjb25zdCBob3N0c19mID0gKGhvc3RzLCByb3cpID0+IHtcblxuICBjb25zdCBob3N0c19saXN0ID0gaG9zdHMuc3BsaXQoXCIsIFwiKTtcbiAgbGV0IGxhYmVsID0gXCJcIjtcbiAgbGV0IGhvc3RzX21hcCA9IG5ldyBNYXAoKTtcbiAgaG9zdHNfbGlzdC5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgbGV0IGhvc3RfaW5mbyA9IGl0ZW0uc3BsaXQoXCJ8XCIpO1xuXG4gICAgaG9zdHNfbWFwLnNldChcbiAgICAgIGhvc3RfaW5mby5sZW5ndGggPiA1ICYmIGhvc3RfaW5mb1s1XSAhPSBudWxsICYmIGhvc3RfaW5mb1s1XSAhPSBcIlwiID8gaG9zdF9pbmZvWzVdIDogaG9zdF9pbmZvWzBdLCBcbiAgICAgIHtcbiAgICAgICAgc2Nhbl90eXBlOiBob3N0X2luZm9bMV0sXG4gICAgICAgIGlwOiBob3N0X2luZm9bMF0sXG4gICAgICAgIGRhdGU6IGhvc3RfaW5mb1syXS5yZXBsYWNlKFwiIFwiLFwiX1wiKSxcbiAgICAgICAgaXNfaXB2NDogaG9zdF9pbmZvWzNdID09ICd0cnVlJyxcbiAgICAgICAgZXBvY2g6IGhvc3RfaW5mb1s0XVxuICAgICAgfSlcbiAgfSk7XG5cbiAgaG9zdHNfbWFwID0gbmV3IE1hcChbLi4uaG9zdHNfbWFwLmVudHJpZXMoKV0uc29ydCgpKTtcblxuXG4gIGhvc3RzX21hcC5mb3JFYWNoKCh2YWx1ZXMsIGtleXMpID0+IHtcbiAgICBsZXQgdXJsID0gYnVpbGRfaG9zdF90b19zY2FuX3JlcG9ydF91cmwodmFsdWVzLmlwLCB2YWx1ZXMuc2Nhbl90eXBlLCB2YWx1ZXMuZGF0ZSwgdmFsdWVzLmVwb2NoKTtcblxuICAgIGlmICh2YWx1ZXMuaXNfaXB2NCkge1xuICAgICAgbGFiZWwgKz0gYDxsaT4gPGEgaHJlZj1cIiR7dXJsfVwiPiR7a2V5c308L2E+PC9saT5gIDtcbiAgICB9IGVsc2Uge1xuICAgICAgbGFiZWwgKz0gYDxsaT4gPGEgaHJlZj1cIiR7dXJsfVwiPiR7a2V5c30gPHNwYW4gY2xhc3M9XCJiYWRnZSBiZy1zZWNvbmRhcnlcIj4ke2kxOG4oJ2lwdjYnKX08L3NwYW4+PC9hPjwvbGk+YCA7XG4gICAgfVxuICB9KVxuICByZXR1cm4gbGFiZWw7XG59XG5cbmNvbnN0IGJ1aWxkX2hvc3RfdG9fc2Nhbl9yZXBvcnRfdXJsID0gKGhvc3QsIHNjYW5fdHlwZSwgZGF0ZSwgZXBvY2gpID0+IHtcbiAgY29uc3QgYWN0aXZlX21vbml0b3JpbmdfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS92dWxuZXJhYmlsaXR5X3NjYW4ubHVhYDtcblxuICBsZXQgcGFyYW1zID0ge1xuICAgIGhvc3Q6IGhvc3QsXG4gICAgc2Nhbl90eXBlOiBzY2FuX3R5cGUsXG4gICAgc2Nhbl9yZXR1cm5fcmVzdWx0OiB0cnVlLFxuICAgIHBhZ2U6IFwic2hvd19yZXN1bHRcIixcbiAgICBzY2FuX2RhdGU6IGRhdGUsXG4gICAgZXBvY2g6IGVwb2NoXG5cbiAgfTtcbiAgbGV0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMocGFyYW1zKTtcblxuICByZXR1cm4gYCR7YWN0aXZlX21vbml0b3JpbmdfdXJsfT8ke3VybF9wYXJhbXN9YDtcbn1cblxuZXhwb3J0IGNvbnN0IGhvc3RfZiA9IChob3N0LCByb3csIGlmaWQpID0+IHtcbiAgbGV0IGxhYmVsID0gaG9zdDtcbiAgbGV0IGhvc3Rfbm90X3JlYWNoYWJsZSA9IHJvdy5pc19va19sYXN0X3NjYW4gPT0gNSAmJiByb3cuaXNfZG93biAhPSBudWxsICYmIHJvdy5pc19kb3duID09IHRydWU7XG4gIGlmICgocm93LmlzX29rX2xhc3Rfc2NhbiA9PSAxIHx8IGhvc3Rfbm90X3JlYWNoYWJsZSkgJiYgKHJvdy5sYXN0X3NjYW4gIT0gbnVsbCAmJiByb3cubGFzdF9zY2FuLnRpbWUgIT0gbnVsbCkpIHtcbiAgICBsZXQgdXJsID0gYnVpbGRfaG9zdF90b19zY2FuX3JlcG9ydF91cmwoaG9zdCwgcm93LnNjYW5fdHlwZSwgcm93Lmxhc3Rfc2Nhbi50aW1lLnJlcGxhY2UoXCIgXCIsXCJfXCIpLCByb3cubGFzdF9zY2FuLmVwb2NoKTtcbiAgICBpZiAocm93LnNjYW5fdHlwZSA9PSAnaXB2NF9uZXRzY2FuJykge1xuICAgICAgLy8gYWRkIGNpZHIgb25seSBmb3IgaXB2NF9uZXRzY2FuIFxuICAgICAgaG9zdCA9IGhvc3QgKyBcIi8yNFwiXG4gICAgfVxuICAgIGxhYmVsID0gYDxhIGhyZWY9XCIke3VybH1cIj4ke2hvc3R9PC9hPmA7XG4gICAgaWYgKGhvc3Rfbm90X3JlYWNoYWJsZSkge1xuICAgICAgbGFiZWwgPSBgPGEgaHJlZj1cIiR7dXJsfVwiPiR7aG9zdH0gPGkgY2xhc3M9XFxcImZhcyBmYS1leGNsYW1hdGlvbi10cmlhbmdsZVxcXCIgc3R5bGU9J2NvbG9yOiAjQjk0QTQ4Oyc+PC9pPiA8L2E+YDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGxhYmVsO1xufVxuXG5leHBvcnQgY29uc3QgY3Zlc19mID0gKGN2ZXMsIHJvdykgPT4ge1xuICBsZXQgbGFiZWwgPSBcIlwiO1xuICBsZXQgaW5kZXggPSAwO1xuICBpZiAocm93LmlzX29rX2xhc3Rfc2NhbiA9PSAxICYmIChyb3cubGFzdF9zY2FuICE9IG51bGwgJiYgcm93Lmxhc3Rfc2Nhbi50aW1lICE9IG51bGwpICYmIGN2ZXMgIT0gbnVsbCkge1xuXG4gICAgbGV0IGN2ZXNfbWFwID0gbmV3IE1hcCgpO1xuXG4gICAgLy8gbWFwIHRvIHNvcnQgY3ZlcyBvbiBzY29yZVxuICAgIGN2ZXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgbGV0IGN2ZV9kZXRhaWxzID0gaXRlbS5zcGxpdChcInxcIik7XG4gICAgICBsZXQgYWN0dWFsX3Njb3JlID0gMDtcbiAgICAgIGlmIChjdmVfZGV0YWlscy5sZW5ndGg+IDEpIHtcbiAgICAgICAgYWN0dWFsX3Njb3JlID0gTnVtYmVyKGN2ZV9kZXRhaWxzWzFdKTtcbiAgICAgIH1cbiAgXG4gICAgICBjdmVzX21hcC5zZXQoXG4gICAgICAgIGN2ZV9kZXRhaWxzWzBdLCBcbiAgICAgICAgYWN0dWFsX3Njb3JlKVxuICAgIH0pO1xuICBcbiAgICBjdmVzX21hcCA9IG5ldyBNYXAoWy4uLmN2ZXNfbWFwLmVudHJpZXMoKV0uc29ydCgoYSxiKSA9PiBiWzFdIC0gYVsxXSkpO1xuXG4gICAgLy8gcmV0dXJuIGZpcnN0IDEwMFxuICAgIGN2ZXNfbWFwLmZvckVhY2goKHNjb3JlLCBrZXkpID0+IHtcbiAgICAgIGlmIChpbmRleCA8IDEwMCkge1xuXG4gICAgICAgICAgbGV0IGJhZGdlX3R5cGUgPSBcIlwiO1xuICAgICAgICAgIGlmIChzY29yZSA9PSAwKSB7XG4gICAgICAgICAgICBiYWRnZV90eXBlID0gXCJiZy1zdWNjZXNzXCI7XG4gICAgICAgICAgfSBlbHNlIGlmKHNjb3JlIDwgMy45KSB7XG4gICAgICAgICAgICBiYWRnZV90eXBlID0gXCJiZy1zZWNvbmRhcnlcIjtcbiAgICAgICAgICB9IGVsc2UgaWYoc2NvcmUgPCA3KSB7XG4gICAgICAgICAgICBiYWRnZV90eXBlID0gXCJiZy13YXJuaW5nXCI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJhZGdlX3R5cGUgPSBcImJnLWRhbmdlclwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICBjb25zdCB1cmwgPSBudG9wbmdfdXRpbGl0eS5nZXRfY3ZlX2RldGFpbHNfdXJsKGtleSwgcm93LnNjYW5fdHlwZSk7XG4gICAgICAgICAgbGFiZWwgKz0gYDxsaSAgdGl0bGU9JyR7aTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5yZXBvcnQuY3Zlc190aXRsZVwiKX0nPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cIiR7dXJsfVwiPjxzcGFuIGNsYXNzPVwiYmFkZ2UgJHtiYWRnZV90eXBlfVwiPiR7a2V5fSA8L3NwYW4+PC9hPiBcbiAgICAgICAgICAgICAgICAgICAgICAgICgke3Njb3JlfSlcbiAgICAgICAgICAgICAgICAgICAgPC9saT5gO1xuXG4gICAgICAgIFxuICAgICAgICBpbmRleCsrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGxhYmVsO1xuICAgICAgfVxuICAgIH0pO1xuXG4gIH1cblxuXG4gIHJldHVybiBsYWJlbDtcbn1cblxuIiwiPCEtLVxuICAoQykgMjAxMy0yMyAtIG50b3Aub3JnXG4tLT5cblxuPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wtbGctMTJcIj5cbiAgICAgIDxkaXYgdi1pZj1cImNsaWNraG91c2VfZGlzYWJsZWRcIiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm8gYWxlcnQtZGlzbWlzc2FibGVcIj5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgPHNwYW4+IHt7IGVuYWJsZV9jbGlja2hvdXNlX3RleHQgfX08L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZCBjYXJkLXNoYWRvd1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICAgICAgPGRpdiB2LWlmPVwiYXV0b3JlZnJlc2hcIiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm8gYWxlcnQtZGlzbWlzc2FibGVcIj5cbiAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgIGNsYXNzPVwic3Bpbm5lci1ib3JkZXIgc3Bpbm5lci1ib3JkZXItc20gdGV4dC1pbmZvIG1lLTFcIlxuICAgICAgICAgICAgPjwvc3Bhbj5cbiAgICAgICAgICAgIDxzcGFuPiB7eyBpbl9wcm9ncmVzc19zY2FuX3RleHQgfX08L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgdi1pZj1cImluc2VydF93aXRoX3N1Y2Nlc3NcIlxuICAgICAgICAgICAgY2xhc3M9XCJhbGVydCBhbGVydC1zdWNjZXNzIGFsZXJ0LWRpc21pc3NhYmxlXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRleHQtc3VjY2VzcyBtZS0xXCI+PC9zcGFuPlxuICAgICAgICAgICAgPHNwYW4+IHt7IGluc2VydF90ZXh0IH19PC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIHYtaWY9XCJhbHJlYWR5X2luc2VydGVkXCJcbiAgICAgICAgICAgIGNsYXNzPVwiYWxlcnQgYWxlcnQtZGFuZ2VyIGFsZXJ0LWRpc21pc3NhYmxlXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRleHQtZGFuZ2VyIG1lLTFcIj48L3NwYW4+XG4gICAgICAgICAgICA8c3Bhbj4ge3sgYWxyZWFkeV9pbnNlcnRfdGV4dCB9fTwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgIDxkaXYgaWQ9XCJob3N0c190b19zY2FuXCI+XG4gICAgICAgICAgICA8TW9kYWxEZWxldGVTY2FuQ29uZmlybVxuICAgICAgICAgICAgICByZWY9XCJtb2RhbF9kZWxldGVfY29uZmlybVwiXG4gICAgICAgICAgICAgIDp0aXRsZT1cInRpdGxlX2RlbGV0ZVwiXG4gICAgICAgICAgICAgIDpib2R5PVwiYm9keV9kZWxldGVcIlxuICAgICAgICAgICAgICBAZGVsZXRlPVwiZGVsZXRlX3Jvd1wiXG4gICAgICAgICAgICAgIEBkZWxldGVfYWxsPVwiZGVsZXRlX2FsbF9yb3dzXCJcbiAgICAgICAgICAgICAgQHNjYW5fcm93PVwic2Nhbl9yb3dcIlxuICAgICAgICAgICAgICBAc2Nhbl9hbGxfcm93cz1cInNjYW5fYWxsX2VudHJpZXNcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgPC9Nb2RhbERlbGV0ZVNjYW5Db25maXJtPlxuICAgICAgICAgICAgPE1vZGFsVXBkYXRlUGVyaW9kaWNpdHlTY2FuXG4gICAgICAgICAgICAgIHJlZj1cIm1vZGFsX3VwZGF0ZV9wZXJpb2RpdGljeV9zY2FuXCJcbiAgICAgICAgICAgICAgOnRpdGxlPVwidGl0bGVfdXBkYXRlX3BlcmlvZGljaXR5X3NjYW5cIlxuICAgICAgICAgICAgICBAdXBkYXRlPVwidXBkYXRlX2FsbF9zY2FuX2ZyZXF1ZW5jaWVzXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgIDwvTW9kYWxVcGRhdGVQZXJpb2RpY2l0eVNjYW4+XG4gICAgICAgICAgICA8VGFibGVXaXRoQ29uZmlnXG4gICAgICAgICAgICAgIHJlZj1cInRhYmxlX2hvc3RzX3RvX3NjYW5cIlxuICAgICAgICAgICAgICA6dGFibGVfaWQ9XCJ0YWJsZV9pZFwiXG4gICAgICAgICAgICAgIDpjc3JmPVwiY29udGV4dC5jc3JmXCJcbiAgICAgICAgICAgICAgOmZfbWFwX2NvbHVtbnM9XCJtYXBfdGFibGVfZGVmX2NvbHVtbnNcIlxuICAgICAgICAgICAgICA6Z2V0X2V4dHJhX3BhcmFtc19vYmo9XCJnZXRfZXh0cmFfcGFyYW1zX29ialwiXG4gICAgICAgICAgICAgIDpmX3NvcnRfcm93cz1cImNvbHVtbnNfc29ydGluZ1wiXG4gICAgICAgICAgICAgIEBjdXN0b21fZXZlbnQ9XCJvbl90YWJsZV9jdXN0b21fZXZlbnRcIlxuICAgICAgICAgICAgICBAcm93c19sb2FkZWQ9XCJvbl90YWJsZV9sb2FkZWRcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmN1c3RvbV9oZWFkZXI+XG4gICAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgICAgY2xhc3M9XCJidG4gYnRuLWxpbmtcIlxuICAgICAgICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICAgICAgICByZWY9XCJhZGRfaG9zdFwiXG4gICAgICAgICAgICAgICAgICBAY2xpY2s9XCJhZGRfaG9zdFwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtcGx1c1wiPjwvaT5cbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgIDwvVGFibGVXaXRoQ29uZmlnPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtZm9vdGVyIG10LTNcIj5cbiAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgIHJlZj1cImRlbGV0ZV9hbGxcIlxuICAgICAgICAgICAgQGNsaWNrPVwiZGVsZXRlX2FsbF9lbnRyaWVzXCJcbiAgICAgICAgICAgIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXIgbWUtMVwiXG4gICAgICAgICAgICA6Y2xhc3M9XCJ7IGRpc2FibGVkOiB0b3RhbF9yb3dzID09IDAgfVwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtdHJhc2hcIj48L2k+XG4gICAgICAgICAgICB7eyBfaTE4bihcImRlbGV0ZV9hbGxfZW50cmllc1wiKSB9fVxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgcmVmPVwic2Nhbl9hbGxcIlxuICAgICAgICAgICAgQGNsaWNrPVwiY29uZmlybV9zY2FuX2FsbF9lbnRyaWVzXCJcbiAgICAgICAgICAgIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5IG1lLTFcIlxuICAgICAgICAgICAgOmNsYXNzPVwieyBkaXNhYmxlZDogdG90YWxfcm93cyA9PSAwIH1cIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLWNsb2NrLXJvdGF0ZS1sZWZ0XCI+PC9pPlxuICAgICAgICAgICAge3sgX2kxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMuc2NoZWR1bGVfYWxsX3NjYW5cIikgfX1cbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICA8dGVtcGxhdGUgdi1pZj1cInByb3BzLmNvbnRleHQuaXNfZW50ZXJwcmlzZV9sXCI+XG4gICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgICByZWY9XCJ1cGRhdGVfYWxsXCJcbiAgICAgICAgICAgICAgQGNsaWNrPVwidXBkYXRlX2FsbF9wZXJpb2RpY2l0eVwiXG4gICAgICAgICAgICAgIGNsYXNzPVwiYnRuIGJ0bi1zZWNvbmRhcnkgbWUtMVwiXG4gICAgICAgICAgICAgIDpjbGFzcz1cInsgZGlzYWJsZWQ6IHRvdGFsX3Jvd3MgPT0gMCB9XCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge3tcbiAgICAgICAgICAgICAgICBfaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy51cGRhdGVfcGVyaW9kaWNpdHlfdGl0bGVcIilcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWZvb3RlclwiPlxuICAgICAgICAgIDxOb3RlTGlzdCA6bm90ZV9saXN0PVwibm90ZV9saXN0XCI+IDwvTm90ZUxpc3Q+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuICA8TW9kYWxBZGRIb3N0XG4gICAgcmVmPVwibW9kYWxfYWRkXCJcbiAgICA6Y29udGV4dD1cImNvbnRleHRcIlxuICAgIEBhZGQ9XCJhZGRfaG9zdF9yZXN0XCJcbiAgICBAZWRpdD1cImVkaXRcIlxuICAgIEBjbG9zZU1vZGFsPVwidXBkYXRlX21vZGFsX3N0YXR1cyhmYWxzZSlcIlxuICAgIEBvcGVuTW9kYWw9XCJ1cGRhdGVfbW9kYWxfc3RhdHVzKHRydWUpXCJcbiAgICBAaGlkZGVuPVwidXBkYXRlX21vZGFsX3N0YXR1cyhmYWxzZSlcIlxuICA+XG4gIDwvTW9kYWxBZGRIb3N0PlxuPC90ZW1wbGF0ZT5cbiAgXG48c2NyaXB0IHNldHVwPlxuLyogSW1wb3J0cyAqL1xuaW1wb3J0IHsgcmVmLCBvbkJlZm9yZU1vdW50LCBvbk1vdW50ZWQgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE5vdGVMaXN0IH0gZnJvbSBcIi4vbm90ZS1saXN0LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBUYWJsZVdpdGhDb25maWcgfSBmcm9tIFwiLi90YWJsZS13aXRoLWNvbmZpZy52dWVcIjtcbmltcG9ydCB7IG50b3BuZ191cmxfbWFuYWdlciB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzLmpzXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsRGVsZXRlU2NhbkNvbmZpcm0gfSBmcm9tIFwiLi9tb2RhbC1kZWxldGUtc2Nhbi1jb25maXJtLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbFVwZGF0ZVBlcmlvZGljaXR5U2NhbiB9IGZyb20gXCIuL21vZGFsLXVwZGF0ZS1wZXJpb2RpY2l0eS1zY2FuLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX3V0aWxpdHkgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlc1wiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbEFkZEhvc3QgfSBmcm9tIFwiLi9tb2RhbC1hZGQtdnMtaG9zdC52dWVcIjtcbmltcG9ydCB7IGNvbHVtbnNfZm9ybWF0dGVyIH0gZnJvbSBcIi4uL3V0aWxpdGllcy92c19yZXBvcnRfZm9ybWF0dGVyLmpzXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIHNvcnRpbmdGdW5jdGlvbnMgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3NvcnRpbmctdXRpbHMuanNcIjtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogQ29uc3RzICovXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuXG5jb25zdCBub3RlID0gaTE4bihcbiAgXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMubm90ZXMuZ2VuZXJpY19ub3Rlc18xXCJcbikucmVwbGFjZUFsbChcIiR7aHR0cF9wcmVmaXh9XCIsIGAke2h0dHBfcHJlZml4fWApO1xuY29uc3Qgbm90ZV9saXN0ID0gW25vdGVdO1xuXG5jb25zdCBpbnNlcnRfdGV4dCA9IHJlZihpMThuKFwic2Nhbl9ob3N0X2luc2VydGVkXCIpKTtcbmNvbnN0IGFscmVhZHlfaW5zZXJ0X3RleHQgPSByZWYoaTE4bihcInNjYW5faG9zdF9hbHJlYWR5X2luc2VydGVkXCIpKTtcbmNvbnN0IGluX3Byb2dyZXNzX3NjYW5fdGV4dCA9IHJlZihcIlwiKTtcbmNvbnN0IGVuYWJsZV9jbGlja2hvdXNlX3RleHQgPSByZWYoaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5lbmFibGVfY2xpY2tob3VzZVwiKSk7XG5jb25zdCB0aXRsZV9kZWxldGUgPSBpMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLmRlbGV0ZV9ob3N0X3RpdGxlXCIpO1xuY29uc3QgYm9keV9kZWxldGUgPSBpMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLmRlbGV0ZV9ob3N0X2Rlc2NyaXB0aW9uXCIpO1xuY29uc3QgdGl0bGVfdXBkYXRlX3BlcmlvZGljaXR5X3NjYW4gPSBpMThuKFxuICBcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy51cGRhdGVfcGVyaW9kaWNpdHlfdGl0bGVcIlxuKTtcblxuY29uc3QgYWRkX2hvc3RfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2FkZC9ob3N0L3RvX3NjYW4ubHVhYDtcbmNvbnN0IGVkaXRfaG9zdF91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZWRpdC9ob3N0L3VwZGF0ZV92YV9zY2FuX3BlcmlvZC5sdWFgO1xuY29uc3QgcmVtb3ZlX2hvc3RfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2RlbGV0ZS9ob3N0L2RlbGV0ZV9ob3N0X3RvX3NjYW4ubHVhYDtcbmNvbnN0IHNjYW5faG9zdF91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZXhlYy9ob3N0L3NjaGVkdWxlX3Z1bG5lcmFiaWxpdHlfc2Nhbi5sdWFgO1xuY29uc3Qgc2Nhbl90eXBlX2xpc3RfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L3Z1bG5lcmFiaWxpdHlfc2Nhbl90eXBlX2xpc3QubHVhYDtcbmNvbnN0IGFjdGl2ZV9tb25pdG9yaW5nX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvdnVsbmVyYWJpbGl0eV9zY2FuLmx1YWA7XG5jb25zdCBzY2FuX3Jlc3VsdF91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Jlc3QvdjIvZ2V0L2hvc3QvdnVsbmVyYWJpbGl0eV9zY2FuX3Jlc3VsdC5sdWFgO1xuY29uc3QgY2hlY2tfc3RhdHVzX3VybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcmVzdC92Mi9nZXQvaG9zdC92dWxuZXJhYmlsaXR5X3NjYW5fc3RhdHVzLmx1YWA7XG5cbmNvbnN0IHRhYmxlX2lkID0gcmVmKFwiaG9zdHNfdG9fc2NhblwiKTtcbmNvbnN0IHRhYmxlX2hvc3RzX3RvX3NjYW4gPSByZWYoKTtcbmNvbnN0IG1vZGFsX2RlbGV0ZV9jb25maXJtID0gcmVmKCk7XG5jb25zdCBtb2RhbF9hZGQgPSByZWYoKTtcbmNvbnN0IG1vZGFsX3VwZGF0ZV9wZXJpb2RpdGljeV9zY2FuID0gcmVmKCk7XG5jb25zdCB0b3RhbF9yb3dzID0gcmVmKDApO1xuY29uc3QgaW5fcHJvZ3Jlc3NfbnVtYmVyID0gcmVmKG51bGwpO1xuY29uc3Qgcm93X3RvX2RlbGV0ZSA9IHJlZih7fSk7XG5jb25zdCByb3dfdG9fc2NhbiA9IHJlZih7fSk7XG5jb25zdCBhdXRvcmVmcmVzaCA9IHJlZihmYWxzZSk7XG5jb25zdCBtb2RhbF9vcGVuZWQgPSByZWYoZmFsc2UpO1xuY29uc3QgY2xpY2tob3VzZV9kaXNhYmxlZCA9IHJlZihmYWxzZSk7XG5jb25zdCBpbnNlcnRfd2l0aF9zdWNjZXNzID0gcmVmKGZhbHNlKTtcbmNvbnN0IGFscmVhZHlfaW5zZXJ0ZWQgPSByZWYoZmFsc2UpO1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgY29udGV4dDogT2JqZWN0LFxufSk7XG5jb25zdCByZXN0X3BhcmFtcyA9IHtcbiAgY3NyZjogcHJvcHMuY29udGV4dC5jc3JmLFxufTtcbmNvbnN0IGNvbnRleHQgPSByZWYoe1xuICBjc3JmOiBwcm9wcy5jb250ZXh0LmNzcmYsXG4gIGlmaWQ6IHByb3BzLmNvbnRleHQuaWZpZCxcbiAgaXNfZW50ZXJwcmlzZV9sOiBwcm9wcy5jb250ZXh0LmlzX2VudGVycHJpc2VfbCxcbn0pO1xuXG5sZXQgc2Nhbl90eXBlX2xpc3QgPSBbXTtcbmxldCBnZXRfc2Nhbl90eXBlX2xpc3RfdiA9IG51bGw7XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbm9uQmVmb3JlTW91bnQoKCkgPT4ge1xuICBnZXRfc2Nhbl90eXBlX2xpc3RfdiA9IFByb21pc2UuYWxsKFtcbiAgICBnZXRfc2Nhbl90eXBlX2xpc3QoKSxcbiAgICBjaGVja19pbl9wcm9ncmVzc19zdGF0dXMoKSxcbiAgXSk7XG59KTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxub25Nb3VudGVkKGFzeW5jICgpID0+IHtcbiAgYXdhaXQgZ2V0X3NjYW5fdHlwZV9saXN0X3Y7XG4gIGF3YWl0IG1vZGFsX2FkZC52YWx1ZS5tZXRyaWNzTG9hZGVkKFxuICAgIHNjYW5fdHlwZV9saXN0LFxuICAgIHByb3BzLmNvbnRleHQuaWZpZCxcbiAgICBwcm9wcy5jb250ZXh0LmlzX2VudGVycHJpc2VfbFxuICApO1xuICBpZiAocHJvcHMuY29udGV4dC5ob3N0ICE9IG51bGwpIHtcbiAgICBtb2RhbF9hZGQudmFsdWUuc2hvdyhudWxsLCBwcm9wcy5jb250ZXh0Lmhvc3QpO1xuICB9XG5cbiAgY2xpY2tob3VzZV9kaXNhYmxlZC52YWx1ZSA9ICEocHJvcHMuY29udGV4dC5pc19jbGlja2hvdXNlX2VuYWJsZWQpO1xuXG4gIC8qIENoZWNrIHRoZSBzdGF0dXMgcGVyaW9kaWNhbGx5IGV2ZXJ5IDEwIHNlY29uZHMgKi9cbiAgc2V0SW50ZXJ2YWwoY2hlY2tfYXV0b3JlZnJlc2gsIDEwMDAwKTtcbn0pO1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBGdW5jdGlvbiB0byBhZGQgYSBuZXcgaG9zdCB0byBzY2FuICovXG5mdW5jdGlvbiBhZGRfaG9zdCgpIHtcbiAgaWYgKHByb3BzLmNvbnRleHQuaG9zdCAhPSBudWxsICYmIHByb3BzLmNvbnRleHQuaG9zdCAhPSBcIlwiKVxuICAgIG1vZGFsX2FkZC52YWx1ZS5zaG93KG51bGwsIHByb3BzLmNvbnRleHQuaG9zdCk7XG4gIGVsc2UgbW9kYWxfYWRkLnZhbHVlLnNob3coKTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRnVuY3Rpb24gdG8gcmVmcmVzaCB0YWJsZSAqL1xuZnVuY3Rpb24gcmVmcmVzaF90YWJsZShkaXNhYmxlX2xvYWRpbmcpIHtcbiAgLyogSXQncyBpbXBvcnRhbnQgdG8gc2V0IGF1dG9yZWZyZXNoIHRvIGZhbHNlLCBpbiB0aGlzIHdheSB3aGVuIHJlZnJlc2hlZCBcbiAgICAgYWxsIHRoZSBlbnRyaWVzIGFyZSBnb2luZyB0byBiZSBjaGVja2VkIGFuZCBpZiBhbGwgb2YgdGhlbSBhcmUgbm90IHNjYW5uaW5nIGl0IHN0YXlzIGZhbHNlXG4gICAqL1xuICBpZiAoZGlzYWJsZV9sb2FkaW5nICE9IG51bGwpXG4gICAgdGFibGVfaG9zdHNfdG9fc2Nhbi52YWx1ZS5yZWZyZXNoX3RhYmxlKGRpc2FibGVfbG9hZGluZyk7XG4gIGVsc2UgdGFibGVfaG9zdHNfdG9fc2Nhbi52YWx1ZS5yZWZyZXNoX3RhYmxlKHRydWUpO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5jb25zdCBnZXRfZXh0cmFfcGFyYW1zX29iaiA9ICgpID0+IHtcbiAgbGV0IGV4dHJhX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX29iamVjdCgpO1xuICByZXR1cm4gZXh0cmFfcGFyYW1zO1xufTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRnVuY3Rpb24gdG8gaGFuZGxlIGFsbCBidXR0b25zICovXG5mdW5jdGlvbiBvbl90YWJsZV9jdXN0b21fZXZlbnQoZXZlbnQpIHtcbiAgbGV0IGV2ZW50c19tYW5hZ2VkID0ge1xuICAgIGNsaWNrX2J1dHRvbl9lZGl0X2hvc3Q6IGNsaWNrX2J1dHRvbl9lZGl0X2hvc3QsXG4gICAgY2xpY2tfYnV0dG9uX2RlbGV0ZTogY2xpY2tfYnV0dG9uX2RlbGV0ZSxcbiAgICBjbGlja19idXR0b25fc2NhbjogY2xpY2tfYnV0dG9uX3NjYW4sXG4gICAgY2xpY2tfYnV0dG9uX2Rvd25sb2FkOiBjbGlja19idXR0b25fZG93bmxvYWQsXG4gICAgY2xpY2tfYnV0dG9uX3Nob3dfcmVzdWx0OiBjbGlja19idXR0b25fc2hvd19yZXN1bHQsXG4gIH07XG4gIGlmIChldmVudHNfbWFuYWdlZFtldmVudC5ldmVudF9pZF0gPT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfVxuICBldmVudHNfbWFuYWdlZFtldmVudC5ldmVudF9pZF0oZXZlbnQpO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBEZWZhdWx0IHNvcnRpbmcsIGJ5IGRlZmF1bHQgZGVmYXVsdCBieSBJUCBpbiBBc2Mgb3JkZXIgKi9cbmZ1bmN0aW9uIGNvbXBhcmVfYnlfaG9zdF9pcChyMCwgcjEpIHtcbiAgcmV0dXJuIHNvcnRpbmdGdW5jdGlvbnMuc29ydEJ5SVAoXG4gICAgcjBbXCJob3N0XCJdLFxuICAgIHIxW1wiaG9zdFwiXSxcbiAgICAxIC8qIGJ5IGRlZmF1bHQgYXNjICovXG4gICk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIFRoaXMgZnVuY3Rpb24gc2ltcGx5IHJldHVybiB0aGUgZGF0YSBvZiB0aGUgZXhhY3QgY29sdW1uIGFuZCByb3cgcmVxdWVzdGVkICovXG5mdW5jdGlvbiBjb2x1bW5fZGF0YShjb2wsIHJvdykge1xuICBsZXQgZGF0YSA9IHJvd1tjb2wuZGF0YS5kYXRhX2ZpZWxkXTtcbiAgaWYgKGNvbC5pZCA9PSBcImR1cmF0aW9uXCIpIHtcbiAgICBkYXRhID1cbiAgICAgIHJvd1tcImxhc3Rfc2NhblwiXSA9PT0gdW5kZWZpbmVkXG4gICAgICAgID8gLTFcbiAgICAgICAgOiByb3dbXCJsYXN0X3NjYW5cIl1bXCJkdXJhdGlvbl9lcG9jaFwiXTtcbiAgfSBlbHNlIGlmIChjb2wuaWQgPT0gXCJsYXN0X3NjYW5cIikge1xuICAgIGRhdGEgPVxuICAgICAgcm93W1wibGFzdF9zY2FuXCJdID09PSB1bmRlZmluZWQgXG4gICAgICAgID8gMFxuICAgICAgICA6IHJvd1tcImxhc3Rfc2NhblwiXVtcImVwb2NoXCJdO1xuICB9IGVsc2UgaWYgKGNvbC5pZCA9PSBcImlzX29rX2xhc3Rfc2NhblwiKSB7XG4gICAgZGF0YSA9IGdldF9zY2FuX3N0YXR1c192YWx1ZShkYXRhLCByb3cpO1xuICB9IGVsc2UgaWYgKGNvbC5pZCA9PSBcInNjYW5fZnJlcXVlbmN5XCIpIHtcbiAgICBkYXRhID0gZ2V0X3NjYW5fZnJlcXVlbmN5KGRhdGEpO1xuICB9IGVsc2UgaWYgKGNvbC5pZCA9PSBcIm1heF9zY29yZV9jdmVcIiB8fCBjb2wuaWQgPT0gXCJudW1fdnVsbmVyYWJpbGl0aWVzX2ZvdW5kXCIgfHwgY29sLmlkID09IFwidGNwX3BvcnRzXCIgfHwgY29sLmlkID09IFwidWRwX3BvcnRzXCIpXG4gICAgLy8gdG8gY29ycmVjdGx5IHNvcnQgYWxzbyBkdXJpbmcgc2Nhbi5cbiAgICAvLyBiZWNhdXNlIGR1cmluZyBzY2FuIHRoZSBvbGQgdmFsdWUgaXMgcHJlc2VudCBidXQgbm90IHZpc2libGVcbiAgICAvLyBzdGF0dXMgbXVzdCBub3Qgc3VjY2VzcyBhbmQgbm90IGZhaWxlZFxuICAgIGlmIChyb3dbXCJpc19va19sYXN0X3NjYW5cIl0gIT0gMSAmJiByb3dbXCJpc19va19sYXN0X3NjYW5cIl0gIT0gNSkge1xuICAgICAgZGF0YSA9IDA7XG4gICAgfSBcbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIEZ1bmN0aW9uIHVzZWQgdG8gc29ydCB0aGUgY29sdW1ucyBvZiB0aGUgdGFibGUgKi9cbmZ1bmN0aW9uIGNvbHVtbnNfc29ydGluZyhjb2wsIHIwLCByMSkge1xuICBpZiAoY29sICE9IG51bGwpIHtcbiAgICBsZXQgcjBfY29sID0gY29sdW1uX2RhdGEoY29sLCByMCk7XG4gICAgbGV0IHIxX2NvbCA9IGNvbHVtbl9kYXRhKGNvbCwgcjEpO1xuXG4gICAgLyogSW4gY2FzZSB0aGUgdmFsdWVzIGFyZSB0aGUgc2FtZSwgc29ydCBieSBJUCAqL1xuICAgIGlmIChyMF9jb2wgPT0gcjFfY29sKSB7XG4gICAgICByZXR1cm4gY29tcGFyZV9ieV9ob3N0X2lwKHIwLCByMSk7XG4gICAgfVxuICAgIGlmIChjb2wuaWQgPT0gXCJob3N0XCIpIHtcbiAgICAgIHJldHVybiBzb3J0aW5nRnVuY3Rpb25zLnNvcnRCeUlQKHIwX2NvbCwgcjFfY29sLCBjb2wuc29ydCk7XG4gICAgfSBlbHNlIGlmIChjb2wuaWQgPT0gXCJob3N0X25hbWVcIikge1xuICAgICAgcmV0dXJuIHNvcnRpbmdGdW5jdGlvbnMuc29ydEJ5TmFtZShyMF9jb2wsIHIxX2NvbCwgY29sLnNvcnQpO1xuICAgIH0gZWxzZSBpZiAoY29sLmlkID09IFwibnVtX3Z1bG5lcmFiaWxpdGllc19mb3VuZFwiKSB7XG4gICAgICBjb25zdCBsb3dlcl92YWx1ZSA9IDA7XG4gICAgICByZXR1cm4gc29ydGluZ0Z1bmN0aW9ucy5zb3J0QnlOdW1iZXJXaXRoTm9ybWFsaXphdGlvblZhbHVlKHIwX2NvbCwgcjFfY29sLCBjb2wuc29ydCwgbG93ZXJfdmFsdWUpO1xuXG4gICAgfSBlbHNlIGlmIChjb2wuaWQgPT0gXCJ0Y3BfcG9ydHNcIiB8fCBjb2wuaWQgPT0gXCJ1ZHBfcG9ydHNcIikge1xuICAgICAgY29uc3QgbG93ZXJfdmFsdWUgPSAwO1xuICAgICAgcmV0dXJuIHNvcnRpbmdGdW5jdGlvbnMuc29ydEJ5TnVtYmVyV2l0aE5vcm1hbGl6YXRpb25WYWx1ZShyMF9jb2wsIHIxX2NvbCwgY29sLnNvcnQsIGxvd2VyX3ZhbHVlKTtcblxuICAgIH0gZWxzZSBpZiAoY29sLmlkID09IFwiZHVyYXRpb25cIikge1xuICAgICAgY29uc3QgbG93ZXJfdmFsdWUgPSAtMTtcbiAgICAgIHJldHVybiBzb3J0aW5nRnVuY3Rpb25zLnNvcnRCeU51bWJlcldpdGhOb3JtYWxpemF0aW9uVmFsdWUocjBfY29sLCByMV9jb2wsIGNvbC5zb3J0LCBsb3dlcl92YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChjb2wuaWQgPT0gXCJsYXN0X3NjYW5cIikge1xuICAgICAgY29uc3QgbG93ZXJfdmFsdWUgPSAwO1xuICAgICAgcmV0dXJuIHNvcnRpbmdGdW5jdGlvbnMuc29ydEJ5TnVtYmVyV2l0aE5vcm1hbGl6YXRpb25WYWx1ZShyMF9jb2wsIHIxX2NvbCwgY29sLnNvcnQsIGxvd2VyX3ZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKGNvbC5pZCA9PSBcImlzX29rX2xhc3Rfc2NhblwiKSB7XG4gICAgICByZXR1cm4gc29ydGluZ0Z1bmN0aW9ucy5zb3J0QnlOYW1lKHIwX2NvbCwgcjFfY29sLCBjb2wuc29ydCk7XG4gICAgfSBlbHNlIGlmIChjb2wuaWQgPT0gXCJtYXhfc2NvcmVfY3ZlXCIpIHtcbiAgICAgIGNvbnN0IGxvd2VyX3ZhbHVlID0gMDtcbiAgICAgIHJldHVybiBzb3J0aW5nRnVuY3Rpb25zLnNvcnRCeU51bWJlcldpdGhOb3JtYWxpemF0aW9uVmFsdWUocjBfY29sLCByMV9jb2wsIGNvbC5zb3J0LCBsb3dlcl92YWx1ZSk7XG5cbiAgICB9IGVsc2UgaWYgKGNvbC5pZCA9PSBcInNjYW5fZnJlcXVlbmN5XCIpIHtcbiAgICAgIHJldHVybiBzb3J0aW5nRnVuY3Rpb25zLnNvcnRCeU5hbWUocjBfY29sLCByMV9jb2wsIGNvbC5zb3J0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHNvcnRpbmdGdW5jdGlvbnMuc29ydEJ5TmFtZShyMF9jb2wsIHIxX2NvbCwgY29sLnNvcnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjb21wYXJlX2J5X2hvc3RfaXAocjAsIHIxKTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuZnVuY3Rpb24gZ2V0X3NjYW5fZnJlcXVlbmN5KHNjYW5fZnJlcXVlbmN5KSB7XG4gIGlmIChzY2FuX2ZyZXF1ZW5jeSA9PSBcIjFkYXlcIikge1xuICAgIHJldHVybiBpMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLmRhaWx5XCIpO1xuICB9IGVsc2UgaWYgKHNjYW5fZnJlcXVlbmN5ID09IFwiMXdlZWtcIikge1xuICAgIHJldHVybiBpMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLndlZWtseVwiKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJcIjtcbiAgfVxufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5mdW5jdGlvbiBnZXRfc2Nhbl9zdGF0dXNfdmFsdWUoaXNfb2tfbGFzdF9zY2FuLCByKSB7XG4gIGxldCBzdGF0dXMgPSBcIlwiO1xuICBpZiAoaXNfb2tfbGFzdF9zY2FuID09IDIpIHtcbiAgICBzdGF0dXMgPSBpMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLnNjaGVkdWxlZFwiKTtcbiAgfSBlbHNlIGlmIChpc19va19sYXN0X3NjYW4gPT0gNCkge1xuICAgIHN0YXR1cyA9IGkxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMuc2Nhbm5pbmdcIik7XG4gIH0gZWxzZSBpZiAoaXNfb2tfbGFzdF9zY2FuID09IDMgfHwgaXNfb2tfbGFzdF9zY2FuID09IG51bGwpIHtcbiAgICBzdGF0dXMgPSBpMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLm5vdF9zY2FubmVkXCIpO1xuICB9IGVsc2UgaWYgKGlzX29rX2xhc3Rfc2NhbiA9PSAxKSB7XG4gICAgc3RhdHVzID0gaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5zdWNjZXNzXCIpO1xuICB9IGVsc2UgaWYgKGlzX29rX2xhc3Rfc2NhbiA9PSA1KSB7XG4gICAgc3RhdHVzID0gaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5mYWlsZWRcIik7XG4gIH0gZWxzZSB7XG4gICAgc3RhdHVzID0gaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5lcnJvclwiKTtcbiAgfVxuICByZXR1cm4gc3RhdHVzICsgci5pZDtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRnVuY3Rpb24gdG8gaGFuZGxlIGRlbGV0ZSBidXR0b24gKi9cbmZ1bmN0aW9uIGNsaWNrX2J1dHRvbl9kZWxldGUoZXZlbnQpIHtcbiAgaW5zZXJ0X3dpdGhfc3VjY2Vzcy52YWx1ZSA9IGZhbHNlO1xuICBhbHJlYWR5X2luc2VydGVkLnZhbHVlID0gZmFsc2U7XG4gIHJlZnJlc2hfZmVlZGJhY2tfbWVzc2FnZXMoKTtcbiAgcm93X3RvX2RlbGV0ZS52YWx1ZSA9IGV2ZW50LnJvdztcbiAgbW9kYWxfZGVsZXRlX2NvbmZpcm0udmFsdWUuc2hvdyhcImRlbGV0ZV9zaW5nbGVfcm93XCIsIGkxOG4oXCJkZWxldGVfdnNfaG9zdFwiKSk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIEZ1bmN0aW9uIHRvIGhhbmRsZSBzY2FuIGJ1dHRvbiAqL1xuZnVuY3Rpb24gY2xpY2tfYnV0dG9uX3NjYW4oZXZlbnQpIHtcbiAgaW5zZXJ0X3dpdGhfc3VjY2Vzcy52YWx1ZSA9IGZhbHNlO1xuICBhbHJlYWR5X2luc2VydGVkLnZhbHVlID0gZmFsc2U7XG4gIHJlZnJlc2hfZmVlZGJhY2tfbWVzc2FnZXMoKTtcbiAgcm93X3RvX3NjYW4udmFsdWUgPSBldmVudC5yb3c7XG4gIGNvbnN0IHNjYW5faG9zdF9tc2cgPSBgJHtpMThuKFwic2Nhbl9ob3N0XCIpfWA7XG4gIG1vZGFsX2RlbGV0ZV9jb25maXJtLnZhbHVlLnNob3coXCJzY2FuX3Jvd1wiLCBzY2FuX2hvc3RfbXNnKTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRnVuY3Rpb24gdG8gaGFuZGxlIGVkaXQgYnV0dG9uICovXG5mdW5jdGlvbiBjbGlja19idXR0b25fZWRpdF9ob3N0KGV2ZW50KSB7XG4gIG1vZGFsX2FkZC52YWx1ZS5zaG93KGV2ZW50LnJvdyk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIEZ1bmN0aW9uIHRvIGRlbGV0ZSBhbGwgZW50cmllcyAqL1xuZnVuY3Rpb24gZGVsZXRlX2FsbF9lbnRyaWVzKCkge1xuICBpbnNlcnRfd2l0aF9zdWNjZXNzLnZhbHVlID0gZmFsc2U7XG4gIGFscmVhZHlfaW5zZXJ0ZWQudmFsdWUgPSBmYWxzZTtcbiAgcmVmcmVzaF9mZWVkYmFja19tZXNzYWdlcygpO1xuICBtb2RhbF9kZWxldGVfY29uZmlybS52YWx1ZS5zaG93KFwiZGVsZXRlX2FsbFwiLCBpMThuKFwiZGVsZXRlX2FsbF92c19ob3N0c1wiKSk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIEZ1bmN0aW9uIHRvIGVkaXQgaG9zdCB0byBzY2FuICovXG5hc3luYyBmdW5jdGlvbiBlZGl0KHBhcmFtcykge1xuICBwYXJhbXMuaXNfZWRpdCA9IHRydWU7XG4gIGF3YWl0IGFkZF9ob3N0X3Jlc3QocGFyYW1zKTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRXZlcnkgMTAgc2Vjb25kIGNoZWNrIHRvIGRpc2FibGUgZmVlZGJhY2tzICovXG5mdW5jdGlvbiBzZXRfYWxyZWFkeV9pbnNlcnRfb3JfaW5zZXJ0X3dpdGhfc3VjY2VzcygpIHtcbiAgaWYgKGluc2VydF93aXRoX3N1Y2Nlc3MudmFsdWUgPT09IHRydWUpIHtcbiAgICBpbnNlcnRfd2l0aF9zdWNjZXNzLnZhbHVlID0gZmFsc2U7XG4gIH1cblxuICBpZiAoYWxyZWFkeV9pbnNlcnRlZC52YWx1ZSA9PT0gdHJ1ZSkge1xuICAgIGFscmVhZHlfaW5zZXJ0ZWQudmFsdWUgPSBmYWxzZTtcbiAgfVxufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBFdmVyeSAxMCBzZWNvbmQgY2hlY2sgdG8gZGlzYWJsZSBhdXRvcmVmcmVzaCAqL1xuZnVuY3Rpb24gY2hlY2tfYXV0b3JlZnJlc2goKSB7XG4gIGNoZWNrX2luX3Byb2dyZXNzX3N0YXR1cygpO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBHZXQgdGhlIG51bWJlciBvZiByb3dzIG9mIHRoZSB0YWJsZSAqL1xuZnVuY3Rpb24gb25fdGFibGVfbG9hZGVkKCkge1xuICB0b3RhbF9yb3dzLnZhbHVlID0gdGFibGVfaG9zdHNfdG9fc2Nhbi52YWx1ZS5nZXRfcm93c19udW0oKTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRnVuY3Rpb24gdG8gbWFwIGNvbHVtbnMgZGF0YSAqL1xuY29uc3QgbWFwX3RhYmxlX2RlZl9jb2x1bW5zID0gKGNvbHVtbnMpID0+IHtcbiAgcmV0dXJuIGNvbHVtbnNfZm9ybWF0dGVyKGNvbHVtbnMsIHNjYW5fdHlwZV9saXN0LCBmYWxzZSwgcHJvcHMuY29udGV4dC5pZmlkKTtcbn07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqIFJFU1QgRnVuY3Rpb25zICoqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIEZ1bmN0aW9uIHRvIGFkZCBhIG5ldyBob3N0IGR1cmluZyBlZGl0ICovXG5jb25zdCBhZGRfaG9zdF9yZXN0ID0gYXN5bmMgZnVuY3Rpb24gKHBhcmFtcykge1xuICBjb25zdCB1cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoYWRkX2hvc3RfdXJsLCB7XG4gICAgLi4ucGFyYW1zLFxuICB9KTtcblxuICBjb25zdCByZXN1bHQgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3Bvc3RfcmVxdWVzdCh1cmwsIHJlc3RfcGFyYW1zKTtcbiAgbW9kYWxfYWRkLnZhbHVlLmNsb3NlKCk7XG4gIGlmIChyZXN1bHQucnNwID09PSB0cnVlKSB7XG4gICAgcGFyYW1zLmNpZHIgIT0gbnVsbFxuICAgICAgPyAoaW5zZXJ0X3RleHQudmFsdWUgPSBpMThuKFwic2Nhbl9ob3N0X3VwZGF0ZWRcIikucmVwbGFjZShcbiAgICAgICAgICBcIiV7aG9zdH1cIixcbiAgICAgICAgICBgJHtwYXJhbXMuaG9zdH0vJHtwYXJhbXMuY2lkcn1gXG4gICAgICAgICkpXG4gICAgICA6IChpbnNlcnRfdGV4dC52YWx1ZSA9IGkxOG4oXCJzY2FuX2hvc3RfdXBkYXRlZFwiKS5yZXBsYWNlKFxuICAgICAgICAgIFwiJXtob3N0fVwiLFxuICAgICAgICAgIGAke3BhcmFtcy5ob3N0fWBcbiAgICAgICAgKSk7XG5cbiAgICBpbnNlcnRfd2l0aF9zdWNjZXNzLnZhbHVlID0gdHJ1ZTtcbiAgICBhbHJlYWR5X2luc2VydGVkLnZhbHVlID0gZmFsc2U7XG4gICAgc2V0VGltZW91dChzZXRfYWxyZWFkeV9pbnNlcnRfb3JfaW5zZXJ0X3dpdGhfc3VjY2VzcywgMTAwMDApO1xuICAgIHJlZnJlc2hfdGFibGUoZmFsc2UpO1xuICB9IGVsc2Uge1xuICAgIHBhcmFtcy5jaWRyICE9IG51bGxcbiAgICAgID8gKGFscmVhZHlfaW5zZXJ0X3RleHQudmFsdWUgPSBpMThuKFwic2Nhbl9ob3N0X2FscmVhZHlfaW5zZXJ0ZWRcIikucmVwbGFjZShcbiAgICAgICAgICBcIiV7aG9zdH1cIixcbiAgICAgICAgICBgJHtwYXJhbXMuaG9zdH0vJHtwYXJhbXMuY2lkcn1gXG4gICAgICAgICkpXG4gICAgICA6IChhbHJlYWR5X2luc2VydF90ZXh0LnZhbHVlID0gaTE4bihcInNjYW5faG9zdF9hbHJlYWR5X2luc2VydGVkXCIpLnJlcGxhY2UoXG4gICAgICAgICAgXCIle2hvc3R9XCIsXG4gICAgICAgICAgYCR7cGFyYW1zLmhvc3R9YFxuICAgICAgICApKTtcblxuICAgIGxldCBzY2FuX3R5cGVfbGFiZWwgPSBcIlwiO1xuXG4gICAgc2Nhbl90eXBlX2xpc3QuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgaWYgKGl0ZW0uaWQgPT0gcGFyYW1zLnNjYW5fdHlwZSkge1xuICAgICAgICBzY2FuX3R5cGVfbGFiZWwgPSBpdGVtLmxhYmVsO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgYWxyZWFkeV9pbnNlcnRfdGV4dC52YWx1ZSA9IGkxOG4oXCJzY2FuX2hvc3RfYWxyZWFkeV9pbnNlcnRlZFwiKS5yZXBsYWNlKFxuICAgICAgXCIle3NjYW5fdHlwZX1cIixcbiAgICAgIGAke3NjYW5fdHlwZV9sYWJlbH1gXG4gICAgKTtcbiAgICBhbHJlYWR5X2luc2VydGVkLnZhbHVlID0gdHJ1ZTtcbiAgICBpbnNlcnRfd2l0aF9zdWNjZXNzLnZhbHVlID0gZmFsc2U7XG4gICAgc2V0VGltZW91dChzZXRfYWxyZWFkeV9pbnNlcnRfb3JfaW5zZXJ0X3dpdGhfc3VjY2VzcywgMTAwMDApO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5pc19lZGl0ICE9PSB0cnVlKSB7XG4gICAgcmVmcmVzaF90YWJsZShmYWxzZSk7XG4gIH1cbn07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIFRoaXMgZnVuY3Rpb24gYWRkcyBhIGZlZWRiYWNrIG1lc3NhZ2Ugb24gdGhlIHBhZ2UgKi9cbmNvbnN0IHJlZnJlc2hfZmVlZGJhY2tfbWVzc2FnZXMgPSBmdW5jdGlvbiAoaW5fcHJvZ3Jlc3MpIHtcbiAgLyogSW4gY2FzZSBhIGluX3Byb2dyZXNzIGlzIGEgbnVtYmVyLCBjdXN0b21pemUgdGhlIGZlZWRiYWNrIG1lc3NhZ2UgKi9cbiAgaWYgKGluX3Byb2dyZXNzICE9IG51bGwgJiYgaW5fcHJvZ3Jlc3MgIT0gMCkge1xuICAgIGluX3Byb2dyZXNzX3NjYW5fdGV4dC52YWx1ZSA9IGkxOG4oXCJzY2FuX2luX3Byb2dyZXNzXCIpLnJlcGxhY2UoXG4gICAgICBcInRvdGFsXCIsXG4gICAgICBgJHtpbl9wcm9ncmVzc31gXG4gICAgKTtcbiAgfVxufTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuY29uc3QgdXBkYXRlX2FsbF9zY2FuX2ZyZXF1ZW5jaWVzID0gYXN5bmMgZnVuY3Rpb24gKHBhcmFtcykge1xuICBjb25zdCB1cmwgPSBOdG9wVXRpbHMuYnVpbGRVUkwoZWRpdF9ob3N0X3VybCwge1xuICAgIC4uLnBhcmFtcyxcbiAgfSk7XG5cbiAgYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9wb3N0X3JlcXVlc3QodXJsLCByZXN0X3BhcmFtcyk7XG5cbiAgaW5zZXJ0X3dpdGhfc3VjY2Vzcy52YWx1ZSA9IGZhbHNlO1xuICBhbHJlYWR5X2luc2VydGVkLnZhbHVlID0gZmFsc2U7XG4gIHJlZnJlc2hfZmVlZGJhY2tfbWVzc2FnZXMoKTtcbiAgcmVmcmVzaF90YWJsZShmYWxzZSk7XG59O1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBGdW5jdGlvbiB0byByZXRyaWV2ZSBzY2FuIHR5cGVzIGxpc3QgKi9cbmNvbnN0IGdldF9zY2FuX3R5cGVfbGlzdCA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKHNjYW5fdHlwZV9saXN0X3VybCwge1xuICAgIC4uLnJlc3RfcGFyYW1zLFxuICB9KTtcblxuICBjb25zdCByZXN1bHQgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsKTtcbiAgc2Nhbl90eXBlX2xpc3QgPSByZXN1bHQucnNwO1xufTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRnVuY3Rpb24gdG8gY2hlY2sgaWYgdGhlcmUgaXMgYSBzY2FuIGluIHByb2dyZXNzICovXG5jb25zdCBjaGVja19pbl9wcm9ncmVzc19zdGF0dXMgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IHVybCA9IE50b3BVdGlscy5idWlsZFVSTChjaGVja19zdGF0dXNfdXJsLCB7XG4gICAgLi4ucmVzdF9wYXJhbXMsXG4gIH0pO1xuXG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwpO1xuICBpbnNlcnRfd2l0aF9zdWNjZXNzLnZhbHVlID0gZmFsc2U7XG4gIGFscmVhZHlfaW5zZXJ0ZWQudmFsdWUgPSBmYWxzZTtcbiAgcmVmcmVzaF9mZWVkYmFja19tZXNzYWdlcyhyZXN1bHQucnNwLnRvdGFsX2luX3Byb2dyZXNzKTtcblxuICAvKiBHZXQgdGhlIG51bWJlciBvZiBzY2FucyBjdXJyZW50bHkgaW4gcHJvZ3Jlc3MgKi9cbiAgLyogSW4gY2FzZSB0aGUgbnVtYmVyIGNoYW5nZWQsIHJlZnJlc2ggdGhlIHRhYmxlICovXG4gIGlmIChpbl9wcm9ncmVzc19udW1iZXIudmFsdWUgPT0gbnVsbCkge1xuICAgIC8qIEZpcnN0IHRpbWUgY2hlY2tpbmcgdGhlIG51bWJlciBvZiBzY2FucywgZG9uJ3QgcmVmcmVzaCB0aGUgdGFibGUgKi9cbiAgICBpbl9wcm9ncmVzc19udW1iZXIudmFsdWUgPSByZXN1bHQucnNwLnRvdGFsX2luX3Byb2dyZXNzO1xuICB9XG5cbiAgY29uc3Qgc2NhbnNfZW5kZWQgPVxuICAgIHJlc3VsdC5yc3AudG90YWxfaW5fcHJvZ3Jlc3MgPT0gMCAmJiBpbl9wcm9ncmVzc19udW1iZXIudmFsdWUgPiAwO1xuICBpbl9wcm9ncmVzc19udW1iZXIudmFsdWUgPSByZXN1bHQucnNwLnRvdGFsX2luX3Byb2dyZXNzO1xuICBhdXRvcmVmcmVzaC52YWx1ZSA9XG4gICAgaW5fcHJvZ3Jlc3NfbnVtYmVyLnZhbHVlID4gMCAmJiBtb2RhbF9vcGVuZWQudmFsdWUgPT09IGZhbHNlO1xuXG4gIGlmIChhdXRvcmVmcmVzaC52YWx1ZSA9PT0gdHJ1ZSkge1xuICAgIC8qIFJlZnJlc2ggdGhlIGRhdGEsIHBlcmlvZGljIHVwZGF0ZSAqL1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgcmVmcmVzaF90YWJsZSh0cnVlKTtcbiAgICB9LCAyMDAwKTtcbiAgfSBlbHNlIGlmIChzY2Fuc19lbmRlZCkge1xuICAgIC8qIFJlZnJlc2ggdGhlIGRhdGEsIGFsbCBzY2FucyBlbmRlZCAqL1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgcmVmcmVzaF90YWJsZSh0cnVlKTtcbiAgICB9LCA1MDAwKTtcbiAgfVxufTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRnVuY3Rpb24gdG8gY29uZmlybSB0byBzdGFydCBhbGwgc2NhbiAqL1xuY29uc3QgY29uZmlybV9zY2FuX2FsbF9lbnRyaWVzID0gZnVuY3Rpb24gKCkge1xuICBtb2RhbF9kZWxldGVfY29uZmlybS52YWx1ZS5zaG93KFwic2Nhbl9hbGxfcm93c1wiLCBpMThuKFwic2Nhbl9hbGxfaG9zdHNcIikpO1xuICByZWZyZXNoX3RhYmxlKGZhbHNlKTtcbn07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIEZ1bmN0aW9uIHRvIHVwZGF0ZSBhbGwgc2NhbiAgZnJlcXVlbmNpZXMqL1xuY29uc3QgdXBkYXRlX2FsbF9wZXJpb2RpY2l0eSA9IGZ1bmN0aW9uICgpIHtcbiAgbW9kYWxfdXBkYXRlX3BlcmlvZGl0aWN5X3NjYW4udmFsdWUuc2hvdygpO1xufTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRnVuY3Rpb24gdG8gZXhlYyB0aGUgdnVsbmVyYWJpbGl0eSBzY2FuIG9mIGEgc2luZ2xlIGhvc3QgKi9cbmNvbnN0IHNjYW5fcm93ID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBjb25zdCByb3cgPSByb3dfdG9fc2Nhbi52YWx1ZTtcbiAgYXdhaXQgc2Nhbl9yb3dfcmVzdChyb3cuaG9zdCwgcm93LnNjYW5fdHlwZSwgcm93LnBvcnRzLCByb3cuaWQpO1xuICByZWZyZXNoX3RhYmxlKHRydWUgLyogRGlzYWJsZSBsb2FkaW5nLCBhbm5veWluZyB3aGVuIGVuYWJsaW5nIGEgc2NhbiAqLyk7XG59O1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5jb25zdCBzY2FuX3Jvd19yZXN0ID0gYXN5bmMgZnVuY3Rpb24gKGhvc3QsIHNjYW5fdHlwZSwgcG9ydHMsIGlkKSB7XG4gIGNvbnN0IHVybCA9IE50b3BVdGlscy5idWlsZFVSTChzY2FuX2hvc3RfdXJsLCB7XG4gICAgaG9zdDogaG9zdCxcbiAgICBzY2FuX3R5cGU6IHNjYW5fdHlwZSxcbiAgICBzY2FuX3NpbmdsZV9ob3N0OiB0cnVlLFxuICAgIHNjYW5fcG9ydHM6IHBvcnRzLFxuICAgIHNjYW5faWQ6IGlkLFxuICB9KTtcbiAgYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9wb3N0X3JlcXVlc3QodXJsLCByZXN0X3BhcmFtcyk7XG59O1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBGdW5jdGlvbiB0byBleGVjIGEgdnVsbmVyYWJpbGl0eSBzY2FuIHRvIGFsbCBob3N0cyBzZXQgKi9cbmFzeW5jIGZ1bmN0aW9uIHNjYW5fYWxsX2VudHJpZXMoKSB7XG4gIGNvbnN0IHVybCA9IE50b3BVdGlscy5idWlsZFVSTChzY2FuX2hvc3RfdXJsLCB7XG4gICAgc2Nhbl9zaW5nbGVfaG9zdDogZmFsc2UsXG4gIH0pO1xuICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3Bvc3RfcmVxdWVzdCh1cmwsIHJlc3RfcGFyYW1zKTtcbiAgcmVmcmVzaF90YWJsZShmYWxzZSk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIEZ1bmN0aW9uIHRvIGRlbGV0ZSBob3N0IHRvIHNjYW4gKi9cbmNvbnN0IGRlbGV0ZV9yb3cgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IHJvdyA9IHJvd190b19kZWxldGUudmFsdWU7XG4gIGNvbnN0IHVybCA9IE50b3BVdGlscy5idWlsZFVSTChyZW1vdmVfaG9zdF91cmwsIHtcbiAgICBob3N0OiByb3cuaG9zdCxcbiAgICBzY2FuX3R5cGU6IHJvdy5zY2FuX3R5cGUsXG4gICAgZGVsZXRlX2FsbF9zY2FuX2hvc3RzOiBmYWxzZSxcbiAgICBzY2FuX2lkOiByb3cuaWQsXG4gIH0pO1xuXG4gIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcG9zdF9yZXF1ZXN0KHVybCwgcmVzdF9wYXJhbXMpO1xuICByZWZyZXNoX3RhYmxlKGZhbHNlKTtcbn07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIFRoaXMgZnVuY3Rpb24gZGVsZXRlcyBhbGwgdGhlIHJvd3MgKi9cbmNvbnN0IGRlbGV0ZV9hbGxfcm93cyA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKHJlbW92ZV9ob3N0X3VybCwge1xuICAgIGRlbGV0ZV9hbGxfc2Nhbl9ob3N0czogdHJ1ZSxcbiAgfSk7XG5cbiAgYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9wb3N0X3JlcXVlc3QodXJsLCByZXN0X3BhcmFtcyk7XG4gIHJlZnJlc2hfdGFibGUoZmFsc2UpO1xufTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRnVuY3Rpb24gdG8gZG93bmxvYWQgbGFzdCB2dWxuZXJhYmlsaXR5IHNjYW4gcmVzdWx0ICovXG5mdW5jdGlvbiBjbGlja19idXR0b25fZG93bmxvYWQoZXZlbnQpIHtcbiAgY29uc3QgcGFyYW1zID0ge1xuICAgIGhvc3Q6IGV2ZW50LnJvdy5ob3N0LFxuICAgIHNjYW5fdHlwZTogZXZlbnQucm93LnNjYW5fdHlwZSxcbiAgICBlcG9jaDogZXZlbnQucm93Lmxhc3Rfc2Nhbi5lcG9jaFxuICB9O1xuICBjb25zdCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKHBhcmFtcyk7XG5cbiAgY29uc3QgdXJsID0gYCR7c2Nhbl9yZXN1bHRfdXJsfT8ke3VybF9wYXJhbXN9YDtcbiAgbnRvcG5nX3V0aWxpdHkuZG93bmxvYWRfVVJJKHVybCk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIEZ1bmN0aW9uIHRvIHNob3cgbGFzdCB2dWxuZXJhYmlsaXR5IHNjYW4gcmVzdWx0ICovXG5mdW5jdGlvbiBjbGlja19idXR0b25fc2hvd19yZXN1bHQoZXZlbnQpIHtcbiAgY29uc3QgaG9zdCA9IGV2ZW50LnJvdy5ob3N0O1xuICBjb25zdCBkYXRlID0gZXZlbnQucm93Lmxhc3Rfc2Nhbi50aW1lLnJlcGxhY2UoXCIgXCIsIFwiX1wiKTtcblxuICBjb25zdCBwYXJhbXMgPSB7XG4gICAgaG9zdDogaG9zdCxcbiAgICBzY2FuX3R5cGU6IGV2ZW50LnJvdy5zY2FuX3R5cGUsXG4gICAgc2Nhbl9yZXR1cm5fcmVzdWx0OiB0cnVlLFxuICAgIHBhZ2U6IFwic2hvd19yZXN1bHRcIixcbiAgICBlcG9jaDogZXZlbnQucm93Lmxhc3Rfc2Nhbi5lcG9jaCxcbiAgICBzY2FuX2RhdGU6IGRhdGUsXG4gIH07XG4gIGNvbnN0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMocGFyYW1zKTtcblxuICBjb25zdCB1cmwgPSBgJHthY3RpdmVfbW9uaXRvcmluZ191cmx9PyR7dXJsX3BhcmFtc31gO1xuICBudG9wbmdfdXJsX21hbmFnZXIuZ29fdG9fdXJsKHVybCk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmZ1bmN0aW9uIHVwZGF0ZV9tb2RhbF9zdGF0dXModmFsdWUpIHtcbiAgLyogdXBkYXRlIHRoZSBtb2RhbF9vcGVuZWQgdmFyIHVzZWQgZm9yIGRpc2FibGUvZW5hYmxlIFxuICAgICBhdXRvcmVmcmVzaCB3aGVuIG1vZGFsIGlzIG9wZW4vY2xvc2VkICovXG4gIG1vZGFsX29wZW5lZC52YWx1ZSA9IHZhbHVlO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuPC9zY3JpcHQ+XG4gICIsIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZCAgY2FyZC1zaGFkb3dcIj5cbiAgICAgICAgPGgzIGNsYXNzPVwiZC1pbmxpbmUtYmxvY2sgcHQtMyBwcy0zXCIgdi1odG1sPVwidGl0bGVfaHRtbFwiPjwvaDM+XG4gICAgICAgIDxMb2FkaW5nIHYtaWY9XCJsb2FkaW5nXCI+PC9Mb2FkaW5nPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCIgOmNsYXNzPVwiW2xvYWRpbmcgPyAnbnRvcG5nLWdyYXktb3V0JyA6ICcnXVwiIHYtaHRtbD1cIm1lc3NhZ2VfaHRtbFwiPjwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuICBcbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uQmVmb3JlTW91bnQgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIExvYWRpbmcgfSBmcm9tIFwiLi9sb2FkaW5nLnZ1ZVwiO1xuaW1wb3J0IHJlZ2V4VmFsaWRhdGlvbiBmcm9tIFwiLi4vdXRpbGl0aWVzL3JlZ2V4LXZhbGlkYXRpb24uanNcIjtcblxuY29uc3Qgc2Nhbl9yZXN1bHRfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9yZXN0L3YyL2dldC9ob3N0L3Z1bG5lcmFiaWxpdHlfc2Nhbl9yZXN1bHQubHVhYDtcblxuY29uc3QgbW9kYWxfaWQgPSByZWYobnVsbCk7XG5jb25zdCBsb2FkaW5nID0gcmVmKGZhbHNlKTtcblxuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgY29udGV4dDogT2JqZWN0LFxufSk7IFxuY29uc3QgbWVzc2FnZSA9IHJlZignJyk7XG5jb25zdCBtZXNzYWdlX2h0bWwgPSByZWYoJycpO1xuY29uc3QgdGl0bGVfaHRtbCA9IHJlZignJyk7XG5cbmNvbnN0IHRpdGxlID0gcmVmKCcnKTtcbmNvbnN0IG15X2FycmF5ID0gcmVmKFtdKTtcblxuXG5hc3luYyBmdW5jdGlvbiBnZXRfcmVzdWx0KGhvc3QsIHNjYW5fdHlwZSwgZGF0ZSwgZXBvY2gpIHtcbiAgXG4gIGxvYWRpbmcudmFsdWUgPSB0cnVlO1xuICBsZXQgcGFyYW1zID0ge1xuICAgIGhvc3Q6IGhvc3QsXG4gICAgc2Nhbl90eXBlOiBzY2FuX3R5cGUsXG4gICAgc2Nhbl9yZXR1cm5fcmVzdWx0OiB0cnVlLFxuICAgIGVwb2NoOiBlcG9jaFxuXG4gIH07XG4gIGxldCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKHBhcmFtcyk7XG4gIGxldCB1cmwgPSBgJHtzY2FuX3Jlc3VsdF91cmx9PyR7dXJsX3BhcmFtc31gO1xuICBsZXQgcmVzdWx0ID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCk7XG4gIG1lc3NhZ2UudmFsdWUgPSByZXN1bHQucnNwO1xuICBtZXNzYWdlX2h0bWwudmFsdWUgPSBgPHByZT4ke21lc3NhZ2UudmFsdWV9PC9wcmU+YDtcblxuICBpZiAoc2Nhbl90eXBlID09ICdpcHY0X25ldHNjYW4nKSB7XG4gICAgaG9zdCArPSBcIi8yNFwiO1xuICB9XG4gIGNvbnN0IGhvc3RfaHJlZiA9IHByb3BzLmNvbnRleHQuaXNfaW5fbWVtID09PSAndHJ1ZScgfHwgcHJvcHMuY29udGV4dC5pc19pbl9tZW0gPT0gdHJ1ZSA/IGAke2hvc3R9IDxhIGhyZWY9XCIke2h0dHBfcHJlZml4fS9sdWEvaG9zdF9kZXRhaWxzLmx1YT9ob3N0PSR7aG9zdH1cIj48aSBjbGFzcyA9IFwiZmFzIGZhLWxhcHRvcFwiPjwvaT48L2E+YDogaG9zdDtcbiAgXG4gIFxuICB0aXRsZS52YWx1ZSA9IGkxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMudnNfcmVzdWx0XCIpLnJlcGxhY2UoXCIle2hvc3R9XCIsIGhvc3RfaHJlZik7XG4gIGlmIChkYXRlICE9IG51bGwpXG4gICAgZGF0ZSA9IGRhdGUucmVwbGFjZUFsbChcIl9cIixcIiBcIik7XG5cbiAgXG4gIHRpdGxlLnZhbHVlID0gdGl0bGUudmFsdWUucmVwbGFjZShcIiV7ZGF0ZX1cIixkYXRlKTtcbiAgdGl0bGVfaHRtbC52YWx1ZSA9IHRpdGxlLnZhbHVlO1xuXG4gIGxvYWRpbmcudmFsdWUgPSBmYWxzZTtcbn1cblxuXG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovIFxuXG5vbkJlZm9yZU1vdW50KGFzeW5jICgpID0+IHtcbiAgYXdhaXQgZ2V0X3Jlc3VsdChwcm9wcy5jb250ZXh0Lmhvc3QsIHByb3BzLmNvbnRleHQuc2Nhbl90eXBlLCBwcm9wcy5jb250ZXh0LmRhdGUsIHByb3BzLmNvbnRleHQuZXBvY2gpO1xufSlcblxuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbjwvc3R5bGU+XG4iLCI8IS0tXG4gIChDKSAyMDEzLTIyIC0gbnRvcC5vcmdcbi0tPlxuXG48dGVtcGxhdGU+XG4gIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgICAgPGRpdiBjbGFzcz1cImNhcmQgIGNhcmQtc2hhZG93XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cbiAgICAgICAgICBcbiAgICAgICAgICBcbiAgICAgICAgICA8ZGl2IGlkPVwib3Blbl9wb3J0c1wiPlxuICAgICAgICAgICAgXG4gICAgICAgICAgICA8VGFibGVXaXRoQ29uZmlnIHJlZj1cInRhYmxlX29wZW5fcG9ydHNcIiA6dGFibGVfaWQ9XCJ0YWJsZV9pZFwiIDpjc3JmPVwiY29udGV4dC5jc3JmXCJcbiAgICAgICAgICAgICAgOmZfbWFwX2NvbHVtbnM9XCJtYXBfdGFibGVfZGVmX2NvbHVtbnNcIiA6Z2V0X2V4dHJhX3BhcmFtc19vYmo9XCJnZXRfZXh0cmFfcGFyYW1zX29ialwiXG4gICAgICAgICAgICAgIDpmX3NvcnRfcm93cz1cImNvbHVtbnNfc29ydGluZ1wiIDpmX21hcF9jb25maWc9XCJtYXBfY29uZmlnXCIgQGN1c3RvbV9ldmVudD1cIm9uX3RhYmxlX2N1c3RvbV9ldmVudFwiPlxuICAgICAgICAgICAgICBcbiAgICAgICAgICAgIDwvVGFibGVXaXRoQ29uZmlnPlxuXG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgXG4gICAgICAgIDwvZGl2PlxuICAgICAgICBcblxuICAgICAgICBcblxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cbiAgXG48c2NyaXB0IHNldHVwPlxuXG4vKiBJbXBvcnRzICovIFxuaW1wb3J0IHsgcmVmLCBvbkJlZm9yZU1vdW50LCBvbk1vdW50ZWQgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFRhYmxlV2l0aENvbmZpZyB9IGZyb20gXCIuL3RhYmxlLXdpdGgtY29uZmlnLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMuanNcIjtcbmltcG9ydCB7IG50b3BuZ191dGlsaXR5IH0gZnJvbSAnLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcyc7XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovIFxuXG4vKiBDb25zdHMgKi8gXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuXG5cblxuY29uc3QgYWN0aXZlX21vbml0b3JpbmdfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS92dWxuZXJhYmlsaXR5X3NjYW4ubHVhYDtcbiBcblxuY29uc3QgdGFibGVfaWQgPSByZWYoJ29wZW5fcG9ydHMnKTtcbmNvbnN0IG1hcF9jb25maWcgPSAoY29uZmlnKSA9PiB7XG4gICAgcmV0dXJuIGNvbmZpZztcbn07XG5cbmNvbnN0IHRhYmxlX29wZW5fcG9ydHMgPSByZWYoKTtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gIGNvbnRleHQ6IE9iamVjdCxcbn0pO1xuY29uc3QgcmVzdF9wYXJhbXMgPSB7XG4gIGNzcmY6IHByb3BzLmNvbnRleHQuY3NyZlxufTtcbmNvbnN0IGNvbnRleHQgPSByZWYoe1xuICBjc3JmOiBwcm9wcy5jb250ZXh0LmNzcmYsXG4gIGlmaWQ6IHByb3BzLmNvbnRleHQuaWZpZCxcbiAgaXNfZW50ZXJwcmlzZV9sOiBwcm9wcy5jb250ZXh0LmlzX2VudGVycHJpc2VfbFxufSk7XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovIFxuXG5cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi8gXG5cbmNvbnN0IGdldF9leHRyYV9wYXJhbXNfb2JqID0gKCkgPT4ge1xuICBsZXQgZXh0cmFfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfb2JqZWN0KCk7XG4gIHJldHVybiBleHRyYV9wYXJhbXM7XG59O1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqLyBcblxuLyogRnVuY3Rpb24gdG8gaGFuZGxlIGFsbCBidXR0b25zICovXG5mdW5jdGlvbiBvbl90YWJsZV9jdXN0b21fZXZlbnQoZXZlbnQpIHtcbiAgXG4gIGxldCBldmVudHNfbWFuYWdlZCA9IHtcbiAgICBcImNsaWNrX2J1dHRvbl9zaG93X2hvc3RzXCI6IGNsaWNrX2J1dHRvbl9zaG93X2hvc3RzXG4gIH07XG4gIGlmIChldmVudHNfbWFuYWdlZFtldmVudC5ldmVudF9pZF0gPT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfVxuICBldmVudHNfbWFuYWdlZFtldmVudC5ldmVudF9pZF0oZXZlbnQpO1xufVxuXG5cbmZ1bmN0aW9uIGNvbXBhcmVfYnlfcG9ydChyMCxyMSkge1xuXG4gIGxldCBjb2wgPSB7XG4gICAgICBcImRhdGFcIjoge1xuICAgICAgICAgIFwidGl0bGVfaTE4blwiOiBcInBvcnRcIixcbiAgICAgICAgICBcImRhdGFfZmllbGRcIjogXCJwb3J0XCIsXG4gICAgICAgICAgXCJzb3J0YWJsZVwiOiB0cnVlLFxuICAgICAgICAgIFwiY2xhc3NcIjogW1xuICAgICAgICAgICAgICBcInRleHQtbm93cmFwXCIsXG4gICAgICAgICAgICAgIFwidGV4dC1lbmRcIlxuICAgICAgICAgIF1cbiAgICAgIH1cbiAgICB9O1xuICBsZXQgcjBfY29sID0gcjBbY29sLmRhdGEuZGF0YV9maWVsZF07XG4gIGxldCByMV9jb2wgPSByMVtjb2wuZGF0YS5kYXRhX2ZpZWxkXTtcbiAgICBcbiAgcjBfY29sID0gZm9ybWF0X251bV9wb3J0c19mb3Jfc29ydChyMF9jb2wpO1xuICByMV9jb2wgPSBmb3JtYXRfbnVtX3BvcnRzX2Zvcl9zb3J0KHIxX2NvbCk7XG4gIHJldHVybiByMF9jb2wgLSByMV9jb2w7XG59XG5cbmZ1bmN0aW9uIGNvbHVtbnNfc29ydGluZyhjb2wsIHIwLCByMSkge1xuXG4gIGlmIChjb2wgIT0gbnVsbCkge1xuICAgIGxldCByMF9jb2wgPSByMFtjb2wuZGF0YS5kYXRhX2ZpZWxkXTtcbiAgICBsZXQgcjFfY29sID0gcjFbY29sLmRhdGEuZGF0YV9maWVsZF07XG4gICAgaWYoY29sLmlkID09IFwicG9ydFwiKSB7XG5cbiAgICAgIHIwX2NvbCA9IGZvcm1hdF9udW1fcG9ydHNfZm9yX3NvcnQocjBfY29sKTtcbiAgICAgIHIxX2NvbCA9IGZvcm1hdF9udW1fcG9ydHNfZm9yX3NvcnQocjFfY29sKTtcbiAgICAgIGlmIChjb2wuc29ydCA9PSAxKSB7XG4gICAgICAgIHJldHVybiByMF9jb2wgLSByMV9jb2w7XG4gICAgICB9XG4gICAgICByZXR1cm4gcjFfY29sIC0gcjBfY29sO1xuICAgIH0gZWxzZSBpZihjb2wuaWQgPT0gXCJjb3VudF9ob3N0XCIpIHtcbiAgICAgIHIwX2NvbCA9IGZvcm1hdF9jdmVfbnVtKHIwX2NvbCk7XG4gICAgICByMV9jb2wgPSBmb3JtYXRfY3ZlX251bShyMV9jb2wpO1xuXG4gICAgICBpZiAocjBfY29sID09IHIxX2NvbCkge1xuICAgICAgICByZXR1cm4gY29tcGFyZV9ieV9wb3J0KHIwLHIxKTtcbiAgICAgIH1cbiAgICAgIGlmIChjb2wuc29ydCA9PSAxKSB7XG4gICAgICAgIHJldHVybiByMF9jb2wgLSByMV9jb2w7XG4gICAgICB9XG4gICAgICByZXR1cm4gcjFfY29sIC0gcjBfY29sO1xuICAgIH1cbiAgICBlbHNlIGlmKGNvbC5pZCA9PSBcImN2ZXNcIikge1xuICAgICAgcjBfY29sID0gZm9ybWF0X2N2ZV9udW0ocjBfY29sKTtcbiAgICAgIHIxX2NvbCA9IGZvcm1hdF9jdmVfbnVtKHIxX2NvbCk7XG5cbiAgICAgIGlmIChyMF9jb2wgPT0gcjFfY29sKSB7XG4gICAgICAgIHJldHVybiBjb21wYXJlX2J5X3BvcnQocjAscjEpO1xuICAgICAgfVxuICAgICAgaWYgKGNvbC5zb3J0ID09IDEpIHtcbiAgICAgICAgcmV0dXJuIHIwX2NvbCAtIHIxX2NvbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByMV9jb2wgLSByMF9jb2w7XG4gICAgfVxuICAgIGVsc2UgaWYoY29sLmlkID09IFwiaG9zdHNcIikge1xuICAgICAgLyogSXQncyBhbiBhcnJheSAqL1xuXG4gICAgICBpZiAocjBfY29sID09IHIxX2NvbCkge1xuICAgICAgICByZXR1cm4gY29tcGFyZV9ieV9wb3J0KHIwLHIxKTtcbiAgICAgIH1cbiAgICAgIGlmIChjb2wuc29ydCA9PSAxKSB7XG4gICAgICAgIHJldHVybiByMF9jb2wubG9jYWxlQ29tcGFyZShyMV9jb2wpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHIxX2NvbC5sb2NhbGVDb21wYXJlKHIwX2NvbCk7XG4gICAgfSBlbHNlIHtcblxuICAgICAgaWYgKHIwX2NvbCAhPSBudWxsKSB7XG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHIwX2NvbCA9IFwiXCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChyMV9jb2wgIT0gbnVsbCkge1xuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByMV9jb2wgPSBcIlwiO1xuICAgICAgfVxuICAgICAgaWYgKHIwX2NvbCA9PSByMV9jb2wpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBhcmVfYnlfcG9ydChyMCxyMSk7XG4gICAgICB9XG4gICAgICBpZiAoY29sLnNvcnQgPT0gMSkge1xuICAgICAgICByZXR1cm4gcjBfY29sLmxvY2FsZUNvbXBhcmUocjFfY29sKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByMV9jb2wubG9jYWxlQ29tcGFyZShyMF9jb2wpO1xuICAgIH1cbiAgIFxuICB9IGVsc2Uge1xuICAgIHJldHVybiBjb21wYXJlX2J5X3BvcnQocjAscjEpO1xuICB9XG4gIFxufVxuXG5cblxuXG5mdW5jdGlvbiBmb3JtYXRfY3ZlX251bShudW0pIHtcbiAgbGV0IHZhbHVlID0gMDtcbiAgaWYgKG51bSA9PT0gXCJcIiB8fCBudW0gPT09IG51bGwgfHwgbnVtID09PSBOYU4gfHwgbnVtID09PSB1bmRlZmluZWQpIHtcbiAgICB2YWx1ZSA9IDA7XG4gIH0gZWxzZSB7XG4gICAgbnVtID0gbnVtLnNwbGl0KCcsJykuam9pbihcIlwiKTtcbiAgICB2YWx1ZSA9IHBhcnNlSW50KG51bSk7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdF9udW1fZm9yX3NvcnQobnVtKSB7XG4gIGlmIChudW0gPT09IFwiXCIgfHwgbnVtID09PSBudWxsIHx8IG51bSA9PT0gTmFOIHx8IG51bSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbnVtID0gMDtcbiAgfSBlbHNlIHtcbiAgICBudW0gPSBudW0uc3BsaXQoJywnKS5qb2luKFwiXCIpXG4gICAgbnVtID0gcGFyc2VJbnQobnVtKTtcbiAgfVxuXG4gIHJldHVybiBudW07XG59XG5cbmZ1bmN0aW9uIGZvcm1hdF9udW1fcG9ydHNfZm9yX3NvcnQobnVtKSB7XG4gIGlmIChudW0gPT0gXCJcIiB8fCBudW0gPT0gbnVsbCB8fCBudW0gPT0gTmFOIHx8IG51bSA9PSB1bmRlZmluZWQpIFxuICAgIG51bSA9IDA7XG5cbiAgbnVtID0gcGFyc2VJbnQobnVtKTs7XG4gIHJldHVybiBudW07XG59XG5cblxuXG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovIFxuXG5cbi8qIEZ1bmN0aW9uIHRvIG1hcCBjb2x1bW5zIGRhdGEgKi9cbmNvbnN0IG1hcF90YWJsZV9kZWZfY29sdW1ucyA9IChjb2x1bW5zKSA9PiB7XG4gIGNvbnN0IHZpc2libGVfZGljdCA9IHtcbiAgICAgICAgZG93bmxvYWQ6IHRydWUsXG4gICAgICAgIHNob3dfcmVzdWx0OiB0cnVlXG4gICAgICB9O1xuICBsZXQgbWFwX2NvbHVtbnMgPSB7XG4gICAgXCJob3N0c1wiOiAoaG9zdHMsIHJvdykgPT4ge1xuICAgICAgbGV0IGxhYmVsID0gYGA7XG4gICAgICBjb25zdCBob3N0c19zcGxpdGVkID0gaG9zdHMuc3BsaXQoXCIsIFwiKTtcbiAgICAgIGNvbnN0IGxlbmd0aCA9IGhvc3RzX3NwbGl0ZWQubGVuZ3RoO1xuICAgICAgbGV0IGkgPSAwO1xuICAgICAgd2hpbGUgKCBpIDwgNSAmJiBpIDwgbGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGhvc3Rfc3BsaXR0ZWQgPSBob3N0c19zcGxpdGVkW2ldLnNwbGl0KFwifFwiKTtcbiAgICAgICAgY29uc3QgaG9zdCA9IGhvc3Rfc3BsaXR0ZWRbMF07XG4gICAgICAgIGNvbnN0IHNjYW5fdHlwZSA9IGhvc3Rfc3BsaXR0ZWRbMV07XG4gICAgICAgIGNvbnN0IGRhdGUgPSBob3N0X3NwbGl0dGVkWzJdLnJlcGxhY2UoXCIgXCIsXCJfXCIpO1xuICAgICAgICBjb25zdCBpc19pcHY0ID0gaG9zdF9zcGxpdHRlZFszXSA9PT0gJ3RydWUnO1xuICAgICAgICBjb25zdCBlcG9jaCA9IGhvc3Rfc3BsaXR0ZWRbNF07XG5cbiAgICAgICAgbGV0IGhvc3RfbmFtZSA9ICcnO1xuICAgICAgICBpZiAoaG9zdF9zcGxpdHRlZC5sZW5ndGggPiA1KSB7XG4gICAgICAgICAgaG9zdF9uYW1lID0gaG9zdF9zcGxpdHRlZFs1XTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBwYXJhbXMgPSB7XG4gICAgICAgICAgaG9zdDogaG9zdCxcbiAgICAgICAgICBzY2FuX3R5cGU6IHNjYW5fdHlwZSxcbiAgICAgICAgICBzY2FuX3JldHVybl9yZXN1bHQ6IHRydWUsXG4gICAgICAgICAgcGFnZTogXCJzaG93X3Jlc3VsdFwiLFxuICAgICAgICAgIGVwb2NoOiBlcG9jaCxcbiAgICAgICAgICBzY2FuX2RhdGU6IGRhdGVcblxuICAgICAgICB9O1xuICAgICAgICBsZXQgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyhwYXJhbXMpO1xuXG4gICAgICAgIGxldCB1cmwgPSBgJHthY3RpdmVfbW9uaXRvcmluZ191cmx9PyR7dXJsX3BhcmFtc31gO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgaG9zdF9sYWJlbCA9IGhvc3RfbmFtZSAhPSAnJz8gKGlzX2lwdjQgPT0gZmFsc2UgPyBgJHtob3N0X25hbWV9ICA8c3BhbiBjbGFzcz1cImJhZGdlIGJnLXNlY29uZGFyeVwiPiR7aTE4bignaXB2NicpfTwvc3Bhbj5gIDogaG9zdF9uYW1lKSA6IGhvc3Q7XG4gICAgICAgIFxuICAgICAgICBpZiAobGFiZWwgPT0gYGApXG4gICAgICAgICAgbGFiZWwgKz0gYDxhIGhyZWY9XCIke3VybH1cIj4ke2hvc3RfbGFiZWx9PC9hPmA7ICBcbiAgICAgICAgZWxzZVxuICAgICAgICAgIGxhYmVsICs9IGAsIDxhIGhyZWY9XCIke3VybH1cIj4ke2hvc3RfbGFiZWx9PC9hPmA7ICBcblxuICAgICAgICBpKys7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGlmIChsZW5ndGggPiA1KSB7XG4gICAgICAgIGxhYmVsICs9IGAuLi5gO1xuICAgICAgfSBcblxuICAgICAgcmV0dXJuIGxhYmVsO1xuXG4gICAgfVxuICB9XG4gICAgXG5cbiAgY29sdW1ucy5mb3JFYWNoKChjKSA9PiB7XG4gICAgYy5yZW5kZXJfZnVuYyA9IG1hcF9jb2x1bW5zW2MuZGF0YV9maWVsZF07XG4gIH0pO1xuICBcbiAgcmV0dXJuIGNvbHVtbnM7XG59O1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqLyBcblxuXG5cblxuXG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqIFJFU1QgRnVuY3Rpb25zICoqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIEZ1bmN0aW9uIHRvIHNob3cgYWxsIGhvc3RzIGR1cmluZyBlZGl0ICovXG5cbmFzeW5jIGZ1bmN0aW9uIGNsaWNrX2J1dHRvbl9zaG93X2hvc3RzKGV2ZW50KSB7XG4gIGxldCBwb3J0ID0gZXZlbnQucm93LnBvcnRfbnVtYmVyO1xuXG4gIGxldCBwYXJhbXMgPSB7XG4gICAgcG9ydDogcG9ydCxcbiAgfTtcblxuICBsZXQgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyhwYXJhbXMpO1xuXG4gIGxldCB1cmwgPSBgJHthY3RpdmVfbW9uaXRvcmluZ191cmx9PyR7dXJsX3BhcmFtc31gO1xuICBudG9wbmdfdXJsX21hbmFnZXIuZ29fdG9fdXJsKHVybCk7XG59XG5cblxuLyogRnVuY3Rpb24gdG8gZG93bmxvYWQgbGFzdCB2dWxuZXJhYmlsaXR5IHNjYW4gcmVzdWx0ICovXG5hc3luYyBmdW5jdGlvbiBjbGlja19idXR0b25fZG93bmxvYWQoZXZlbnQpIHtcbiAgbGV0IHBhcmFtcyA9IHtcbiAgICBob3N0OiBldmVudC5yb3cuaG9zdCxcbiAgICBzY2FuX3R5cGU6IGV2ZW50LnJvdy5zY2FuX3R5cGVcbiAgfTtcbiAgbGV0IHVybF9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMocGFyYW1zKTtcblxuICBsZXQgdXJsID0gYCR7c2Nhbl9yZXN1bHRfdXJsfT8ke3VybF9wYXJhbXN9YDtcbiAgbnRvcG5nX3V0aWxpdHkuZG93bmxvYWRfVVJJKHVybCk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovIFxuXG4vKiBGdW5jdGlvbiB0byBzaG93IGxhc3QgdnVsbmVyYWJpbGl0eSBzY2FuIHJlc3VsdCAqL1xuYXN5bmMgZnVuY3Rpb24gY2xpY2tfYnV0dG9uX3Nob3dfcmVzdWx0KGV2ZW50KSB7XG4gIGxldCBob3N0ID0gZXZlbnQucm93Lmhvc3Q7XG4gIGxldCBkYXRlID0gZXZlbnQucm93Lmxhc3Rfc2Nhbi50aW1lO1xuXG4gIGxldCBwYXJhbXMgPSB7XG4gICAgaG9zdDogaG9zdCxcbiAgICBzY2FuX3R5cGU6IGV2ZW50LnJvdy5zY2FuX3R5cGUsXG4gICAgc2Nhbl9yZXR1cm5fcmVzdWx0OiB0cnVlLFxuICAgIHBhZ2U6IFwic2hvd19yZXN1bHRcIixcbiAgICBzY2FuX2RhdGU6IGRhdGVcblxuICB9O1xuICBsZXQgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyhwYXJhbXMpO1xuXG4gIGxldCB1cmwgPSBgJHthY3RpdmVfbW9uaXRvcmluZ191cmx9PyR7dXJsX3BhcmFtc31gO1xuICBudG9wbmdfdXJsX21hbmFnZXIuZ29fdG9fdXJsKHVybCk7XG59XG5cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi8gXG5cbjwvc2NyaXB0PlxuICAiLCI8IS0tIChDKSAyMDIzIC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuICA8bW9kYWwgcmVmPVwibW9kYWxfaWRcIj5cbiAgICA8dGVtcGxhdGUgdi1zbG90OnRpdGxlPnt7IHRpdGxlIH19PC90ZW1wbGF0ZT5cbiAgICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAgICA8IS0tIFRhcmdldCBpbmZvcm1hdGlvbiwgaGVyZSBhbiBJUCBpcyBwdXQgLS0+XG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTJcIj5cbiAgICAgICAgICA8Yj57eyBfaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5yZXBvcnRzX3BhZ2UuZGF0ZVwiKSB9fTwvYj5cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS0xMFwiPlxuICAgICAgICAgIDxpbnB1dCB2LW1vZGVsPVwicmVwb3J0X2RhdGVcIiA6ZGlzYWJsZWQ9XCJ0cnVlXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiB0eXBlPVwidGV4dFwiIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG5cbiAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tMlwiPlxuICAgICAgICAgIDxiPnt7IF9pMThuKFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLnJlcG9ydHNfcGFnZS5uYW1lXCIpIH19PC9iPlxuICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTEwXCI+XG4gICAgICAgICAgPGlucHV0IHYtbW9kZWw9XCJyZXBvcnRfbmFtZVwiICBjbGFzcz1cImZvcm0tY29udHJvbFwiIHR5cGU9XCJ0ZXh0XCIgQGlucHV0PVwiY2hlY2tfdGl0bGVcIiAgcmVxdWlyZWQgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIFxuXG4gICAgICA8ZGl2IGNsYXNzPVwibXQtNFwiPlxuICAgICAgICAgIDxOb3RlTGlzdCA6bm90ZV9saXN0PVwibm90ZV9saXN0XCI+IDwvTm90ZUxpc3Q+XG4gICAgICA8L2Rpdj5cbiAgICA8L3RlbXBsYXRlPlxuXG4gICAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgICBcbiAgICAgIDxkaXY+XG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImVkaXRfXCIgOmRpc2FibGVkPVwiIShpc19yZXBvcnRfbmFtZV9jb3JyZWN0KVwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+XG4gICAgICAgICAge3sgX2kxOG4oXCJhcHBseVwiKSB9fVxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvdGVtcGxhdGU+XG4gIDwvbW9kYWw+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuLyogSW1wb3J0cyAqL1xuaW1wb3J0IHsgcmVmIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBtb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBOb3RlTGlzdCB9IGZyb20gXCIuL25vdGUtbGlzdC52dWVcIjtcbmltcG9ydCByZWdleFZhbGlkYXRpb24gZnJvbSBcIi4uL3V0aWxpdGllcy9yZWdleC12YWxpZGF0aW9uLmpzXCI7XG5cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoW1wiYWRkXCIsIFwiZWRpdFwiXSk7XG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgY29udGV4dDogT2JqZWN0LFxufSk7XG5cbi8qIENvbnN0cyAqL1xuY29uc3QgdGl0bGUgPSByZWYoaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5yZXBvcnRzX3BhZ2UuZWRpdF9yZXBvcnRcIikpO1xuXG5jb25zdCBtb2RhbF9pZCA9IHJlZihudWxsKTtcbmNvbnN0IHJlcG9ydF9kYXRlID0gcmVmKG51bGwpO1xuY29uc3QgcmVwb3J0X25hbWUgPSByZWYobnVsbCk7XG5jb25zdCByb3dfdG9fZWRpdCA9IHJlZihudWxsKTtcblxuY29uc3QgaXNfcmVwb3J0X25hbWVfY29ycmVjdCA9IHJlZihmYWxzZSk7XG5cbmNvbnN0IG5vdGVfbGlzdCA9IFtcbiAgX2kxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMucmVwb3J0c19wYWdlLm5vdGVzLm5vdGVfMVwiKSxcbl07XG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLypcbiAqIFJlc2V0IGZpZWxkcyBpbiBtb2RhbCBmb3JtXG4gKi9cbmNvbnN0IHJlc2V0X21vZGFsX2Zvcm0gPSBmdW5jdGlvbiAoKSB7XG4gIHJlcG9ydF9kYXRlLnZhbHVlID0gXCJcIjtcbiAgcmVwb3J0X25hbWUudmFsdWUgPSBcIlwiO1xuICByb3dfdG9fZWRpdC52YWx1ZSA9IG51bGw7XG4gIFxufTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qXG4gKiBTZXQgcm93IHRvIGVkaXRcbiAqL1xuY29uc3Qgc2V0X3Jvd190b19lZGl0ID0gKHJvdykgPT4ge1xuXG4gIHJvd190b19lZGl0LnZhbHVlID0gcm93O1xuICAvKiBTZXQgaG9zdCB2YWx1ZXMgKi9cbiAgcmVwb3J0X2RhdGUudmFsdWUgPSByb3cucmVwb3J0X2RhdGU7XG4gIHJlcG9ydF9uYW1lLnZhbHVlID0gcm93Lm5hbWU7XG5cbn07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgd2hlbmV2ZXIgdGhlIG1vZGFsIGlzIG9wZW5lZCAqL1xuY29uc3Qgc2hvdyA9IChyb3cpID0+IHtcbiAgLyogRmlyc3Qgb2YgYWxsIHJlc2V0IGFsbCB0aGUgZGF0YSAqL1xuICByZXNldF9tb2RhbF9mb3JtKCk7XG4gIHNldF9yb3dfdG9fZWRpdChyb3cpXG5cbiAgbW9kYWxfaWQudmFsdWUuc2hvdygpO1xufTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIEZ1bmN0aW9uIGNhbGxlZCB3aGVuIHRoZSBlZGl0IGJ1dHRvbiBpcyBjbGlja2VkICovXG5jb25zdCBlZGl0XyA9ICgpID0+IHtcbiAgY29uc3QgdG1wX3JlcG9ydF9kYXRlID0gcm93X3RvX2VkaXQudmFsdWUuZXBvY2g7XG4gIGNvbnN0IHRtcF9uYW1lID0gcmVwb3J0X25hbWUudmFsdWUucmVwbGFjZUFsbChcIiBcIiwgXCJfXCIpO1xuXG4gIGVtaXQoXCJlZGl0XCIsIHtcbiAgICAgIHJlcG9ydF90aXRsZTogdG1wX25hbWUsXG4gICAgICBlcG9jaF9lbmQ6IHRtcF9yZXBvcnRfZGF0ZVxuICAgIH0pO1xuICBcbiAgICBtb2RhbF9pZC52YWx1ZS5jbG9zZSgpO1xufTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIEZ1bmN0aW9uIGNhbGxlZCB3aGVuIHRoZSBtb2RhbCBpcyBjbG9zZWQgKi9cbmNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICBtb2RhbF9pZC52YWx1ZS5jbG9zZSgpO1xufTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cblxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuY29uc3QgY2hlY2tfdGl0bGUgPSAoKSA9PiB7XG4gIGxldCByZXBvcnRfbmFtZV9zcGxpdHRlZF9ieV9zcGFjZXMgPSByZXBvcnRfbmFtZS52YWx1ZS5zcGxpdChcIiBcIik7XG5cbiAgLy8gd2l0aCAuZXZlcnkgdGhlIGxvb3Agc3RvcHMgd2hlbiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQgKGxpa2Ugd2hpbGUpXG4gIGNvbnN0IGlzUmVwb3J0TmFtZVZhbGlkID0gcmVwb3J0X25hbWVfc3BsaXR0ZWRfYnlfc3BhY2VzLmV2ZXJ5KChzaW5nbGVfd29yZCkgPT5cbiAgICAgIHJlZ2V4VmFsaWRhdGlvbi52YWxpZGF0ZVNpbmdsZVdvcmQoc2luZ2xlX3dvcmQpKTtcblxuICBpc19yZXBvcnRfbmFtZV9jb3JyZWN0LnZhbHVlID0gaXNSZXBvcnROYW1lVmFsaWQ7XG59O1xuXG5cblxuZGVmaW5lRXhwb3NlKHsgc2hvdywgY2xvc2UgfSk7XG48L3NjcmlwdD5cbiIsIjwhLS1cbiAgKEMpIDIwMTMtMjMgLSBudG9wLm9yZ1xuLS0+XG5cbjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZCBjYXJkLXNoYWRvd1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICAgICAgXG4gICAgICAgICAgXG4gICAgICAgICAgPGRpdiBpZD1cInZzX3JlcG9ydHNcIj5cbiAgICAgICAgICAgIDxNb2RhbERlbGV0ZVJlcG9ydENvbmZpcm1cbiAgICAgICAgICAgICAgcmVmPVwibW9kYWxfZGVsZXRlX2NvbmZpcm1cIlxuICAgICAgICAgICAgICA6dGl0bGU9XCJ0aXRsZV9kZWxldGVcIlxuICAgICAgICAgICAgICA6Ym9keT1cImJvZHlfZGVsZXRlXCJcbiAgICAgICAgICAgICAgQGRlbGV0ZT1cImRlbGV0ZV9yb3dcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgPC9Nb2RhbERlbGV0ZVJlcG9ydENvbmZpcm0+XG4gICAgICAgICAgICA8VGFibGVXaXRoQ29uZmlnXG4gICAgICAgICAgICAgIHJlZj1cInRhYmxlX3ZzX3JlcG9ydHNcIlxuICAgICAgICAgICAgICA6dGFibGVfaWQ9XCJ0YWJsZV9pZFwiXG4gICAgICAgICAgICAgIDpjc3JmPVwiY29udGV4dC5jc3JmXCJcbiAgICAgICAgICAgICAgOmZfbWFwX2NvbHVtbnM9XCJtYXBfdGFibGVfZGVmX2NvbHVtbnNcIlxuICAgICAgICAgICAgICA6Z2V0X2V4dHJhX3BhcmFtc19vYmo9XCJnZXRfZXh0cmFfcGFyYW1zX29ialwiXG4gICAgICAgICAgICAgIDpmX3NvcnRfcm93cz1cImNvbHVtbnNfc29ydGluZ1wiXG4gICAgICAgICAgICAgIEBjdXN0b21fZXZlbnQ9XCJvbl90YWJsZV9jdXN0b21fZXZlbnRcIlxuICAgICAgICAgICAgICBAcm93c19sb2FkZWQ9XCJvbl90YWJsZV9sb2FkZWRcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgPC9UYWJsZVdpdGhDb25maWc+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIFxuICAgICAgICBcbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbiAgPE1vZGFsRWRpdFJlcG9ydFxuICAgIHJlZj1cIm1vZGFsX2VkaXRcIlxuICAgIDpjb250ZXh0PVwiY29udGV4dFwiXG4gICAgQGVkaXQ9XCJlZGl0XCJcbiAgPlxuICA8L01vZGFsRWRpdFJlcG9ydD5cbjwvdGVtcGxhdGU+XG4gIFxuPHNjcmlwdCBzZXR1cD5cbi8qIEltcG9ydHMgKi9cbmltcG9ydCB7IHJlZiwgb25CZWZvcmVNb3VudCwgb25Nb3VudGVkIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBOb3RlTGlzdCB9IGZyb20gXCIuL25vdGUtbGlzdC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgVGFibGVXaXRoQ29uZmlnIH0gZnJvbSBcIi4vdGFibGUtd2l0aC1jb25maWcudnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfdXJsX21hbmFnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlcy5qc1wiO1xuaW1wb3J0IHsgbnRvcG5nX3V0aWxpdHkgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlc1wiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbEVkaXRSZXBvcnQgfSBmcm9tIFwiLi9tb2RhbC1lZGl0LXZzLXJlcG9ydC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxEZWxldGVSZXBvcnRDb25maXJtIH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLXNjYW4tY29uZmlybS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgc29ydGluZ0Z1bmN0aW9ucyB9IGZyb20gXCIuLi91dGlsaXRpZXMvc29ydGluZy11dGlscy5qc1wiO1xuXG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIENvbnN0cyAqL1xuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcblxuY29uc3Qgbm90ZSA9IGkxOG4oXG4gIFwiaG9zdHNfc3RhdHMucGFnZV9zY2FuX2hvc3RzLm5vdGVzLmdlbmVyaWNfbm90ZXNfMVwiXG4pLnJlcGxhY2VBbGwoXCIke2h0dHBfcHJlZml4fVwiLCBgJHtodHRwX3ByZWZpeH1gKTtcbmNvbnN0IG5vdGVfbGlzdCA9IFtub3RlXTtcblxuY29uc3QgdGl0bGVfZGVsZXRlID0gX2kxOG4oXCJob3N0c19zdGF0cy5wYWdlX3NjYW5faG9zdHMucmVwb3J0X3BhZ2UuZGVsZXRlX3RpdGxlXCIpO1xuY29uc3QgYm9keV9kZWxldGUgPSBfaTE4bihcImhvc3RzX3N0YXRzLnBhZ2Vfc2Nhbl9ob3N0cy5yZXBvcnRfcGFnZS5kZWxldGVfZGVzY3JpcHRpb25cIik7XG5cblxuY29uc3Qgb3Blbl9yZXBvcnRfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9lbnRlcnByaXNlL3Z1bG5lcmFiaWxpdHlfc2Nhbl9yZXBvcnQubHVhYDtcbmNvbnN0IHJlbW92ZV9yZXBvcnRfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9kZWxldGUvdnMvcmVwb3J0Lmx1YWA7XG5jb25zdCBlZGl0X3JlcG9ydF91cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9yZXN0L3YyL2VkaXQvdnMvcmVwb3J0Lmx1YWA7XG5cbmNvbnN0IHRhYmxlX2lkID0gcmVmKFwidnNfcmVwb3J0c1wiKTtcbmNvbnN0IHRhYmxlX3ZzX3JlcG9ydHMgPSByZWYoKTtcbmNvbnN0IG1vZGFsX2VkaXQgPSByZWYoKTtcbmNvbnN0IG1vZGFsX2RlbGV0ZV9jb25maXJtID0gcmVmKCk7XG5jb25zdCB0b3RhbF9yb3dzID0gcmVmKDApO1xuY29uc3Qgcm93X3RvX2RlbGV0ZSA9IHJlZih7fSk7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICBjb250ZXh0OiBPYmplY3QsXG59KTtcbmNvbnN0IHJlc3RfcGFyYW1zID0ge1xuICBjc3JmOiBwcm9wcy5jb250ZXh0LmNzcmYsXG59O1xuY29uc3QgY29udGV4dCA9IHJlZih7XG4gIGNzcmY6IHByb3BzLmNvbnRleHQuY3NyZixcbiAgaWZpZDogcHJvcHMuY29udGV4dC5pZmlkLFxufSk7XG5cbmxldCBzY2FuX3R5cGVfbGlzdCA9IFtdO1xubGV0IGdldF9zY2FuX3R5cGVfbGlzdF92ID0gbnVsbDtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRnVuY3Rpb24gdG8gcmVmcmVzaCB0YWJsZSAqL1xuZnVuY3Rpb24gcmVmcmVzaF90YWJsZSgpIHtcbiAgdGFibGVfdnNfcmVwb3J0cy52YWx1ZS5yZWZyZXNoX3RhYmxlKCk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmNvbnN0IGdldF9leHRyYV9wYXJhbXNfb2JqID0gKCkgPT4ge1xuICBsZXQgZXh0cmFfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfb2JqZWN0KCk7XG4gIHJldHVybiBleHRyYV9wYXJhbXM7XG59O1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBGdW5jdGlvbiB0byBoYW5kbGUgYWxsIGJ1dHRvbnMgKi9cbmZ1bmN0aW9uIG9uX3RhYmxlX2N1c3RvbV9ldmVudChldmVudCkge1xuICBsZXQgZXZlbnRzX21hbmFnZWQgPSB7XG4gICAgY2xpY2tfYnV0dG9uX2VkaXQ6IGNsaWNrX2J1dHRvbl9lZGl0LFxuICAgIGNsaWNrX2J1dHRvbl9kZWxldGU6IGNsaWNrX2J1dHRvbl9kZWxldGUsXG4gIH07XG4gIGlmIChldmVudHNfbWFuYWdlZFtldmVudC5ldmVudF9pZF0gPT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfVxuICBldmVudHNfbWFuYWdlZFtldmVudC5ldmVudF9pZF0oZXZlbnQpO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBUaGlzIGZ1bmN0aW9uIHNpbXBseSByZXR1cm4gdGhlIGRhdGEgb2YgdGhlIGV4YWN0IGNvbHVtbiBhbmQgcm93IHJlcXVlc3RlZCAqL1xuZnVuY3Rpb24gY29sdW1uX2RhdGEoY29sLCByb3cpIHtcbiAgbGV0IGRhdGEgPSByb3dbY29sLmRhdGEuZGF0YV9maWVsZF07XG5cbiAgaWYgKGNvbC5kYXRhLmRhdGFfZmllbGQgPT0gJ3JlcG9ydF9kYXRlJykge1xuICAgIGRhdGEgPSByb3dbJ2Vwb2NoJ11cbiAgfVxuXG4gIGlmIChjb2wuZGF0YS5kYXRhX2ZpZWxkID09ICduYW1lJykge1xuICAgIGRhdGEgPSBmb3JtYXRfcmVwb3J0X25hbWUocm93WyduYW1lJ10sIHJvd1snZXBvY2gnXSlcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBEZWZhdWx0IHNvcnRpbmcsIGJ5IGRhdGUgaW4gREVTQyBvcmRlciAqL1xuZnVuY3Rpb24gY29tcGFyZV9ieV9yZXBvcnRfZGF0ZShyMCwgcjEpIHtcbiAgcmV0dXJuIHNvcnRpbmdGdW5jdGlvbnMuc29ydEJ5TnVtYmVyKFxuICAgIHIwW1wiZXBvY2hcIl0sXG4gICAgcjFbXCJlcG9jaFwiXSxcbiAgICAwIC8qIGJ5IGRlZmF1bHQgYXNjICovXG4gICk7XG59XG5cbi8qIFNwZWNpZmljIGZ1bmN0aW9uIGZvciByZXBvcnQgbmFtZSBiZWNhdXNlIGNvdWxkIGJlIFwiUmVwb3J0IG9mIGRhdGVcIiAoZGVmYXVsdCkgb3IgYSBjdXN0b20gbmFtZSAqL1xuZnVuY3Rpb24gZm9ybWF0X3JlcG9ydF9uYW1lKHJlcG9ydF9uYW1lLCBlcG9jaCkge1xuICBcbiAgbGV0IGZvcm1hdHRlZF9yZXBvcnRfbmFtZSA9IHJlcG9ydF9uYW1lO1xuICBcbiAgaWYgKHJlcG9ydF9uYW1lLnN0YXJ0c1dpdGgoXCJSZXBvcnQgb2ZcIikpIHtcbiAgICBmb3JtYXR0ZWRfcmVwb3J0X25hbWUgPSAncmVwb3J0XycrZXBvY2g7ICAgXG4gIH1cblxuICByZXR1cm4gZm9ybWF0dGVkX3JlcG9ydF9uYW1lO1xuXG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIEZ1bmN0aW9uIHVzZWQgdG8gc29ydCB0aGUgY29sdW1ucyBvZiB0aGUgdGFibGUgKi9cbmZ1bmN0aW9uIGNvbHVtbnNfc29ydGluZyhjb2wsIHIwLCByMSkge1xuICBpZiAoY29sICE9IG51bGwpIHtcbiAgICBsZXQgcjBfY29sID0gY29sdW1uX2RhdGEoY29sLCByMCk7XG4gICAgbGV0IHIxX2NvbCA9IGNvbHVtbl9kYXRhKGNvbCwgcjEpO1xuXG4gICAgLyogSW4gY2FzZSB0aGUgdmFsdWVzIGFyZSB0aGUgc2FtZSwgc29ydCBieSBJUCAqL1xuICAgIGlmIChyMF9jb2wgPT0gcjFfY29sKSB7XG4gICAgICByZXR1cm4gY29tcGFyZV9ieV9yZXBvcnRfZGF0ZShyMCwgcjEpO1xuICAgIH1cbiAgICBcbiAgICBpZiAoY29sLmlkID09IFwicmVwb3J0X2RhdGVcIikge1xuICAgICAgcmV0dXJuIHNvcnRpbmdGdW5jdGlvbnMuc29ydEJ5TnVtYmVyKHIwX2NvbCwgcjFfY29sLCBjb2wuc29ydCk7XG4gICAgfSBlbHNlIGlmIChjb2wuaWQgPT0gXCJ0Y3BfcG9ydHNcIiB8fCBjb2wuaWQgPT0gXCJ1ZHBfcG9ydHNcIikge1xuICAgICAgcmV0dXJuIHNvcnRpbmdGdW5jdGlvbnMuc29ydEJ5TnVtYmVyKHIwX2NvbCwgcjFfY29sLCBjb2wuc29ydCk7XG4gICAgfSBlbHNlIGlmIChjb2wuaWQgPT0gXCJjdmVzXCIpIHtcbiAgICAgIHJldHVybiBzb3J0aW5nRnVuY3Rpb25zLnNvcnRCeU51bWJlcihyMF9jb2wsIHIxX2NvbCwgY29sLnNvcnQpO1xuICAgIH0gZWxzZSBpZiAoY29sLmlkID09IFwibmFtZVwiKSB7XG4gICAgICByZXR1cm4gc29ydGluZ0Z1bmN0aW9ucy5zb3J0QnlOYW1lKHIwX2NvbCwgcjFfY29sLCBjb2wuc29ydCk7XG4gICAgfSBlbHNlIGlmIChjb2wuaWQgPT0gXCJudW1faG9zdHNcIikge1xuICAgICAgcmV0dXJuIHNvcnRpbmdGdW5jdGlvbnMuc29ydEJ5TnVtYmVyKHIwX2NvbCwgcjFfY29sLCBjb2wuc29ydCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBzb3J0aW5nRnVuY3Rpb25zLnNvcnRCeU5hbWUocjBfY29sLCByMV9jb2wsIGNvbC5zb3J0KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY29tcGFyZV9ieV9yZXBvcnRfZGF0ZShyMCwgcjEpO1xufVxuXG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIEZ1bmN0aW9uIHRvIGhhbmRsZSBkZWxldGUgYnV0dG9uICovXG5mdW5jdGlvbiBjbGlja19idXR0b25fZGVsZXRlKGV2ZW50KSB7XG4gIHJvd190b19kZWxldGUudmFsdWUgPSBldmVudC5yb3c7XG4gIG1vZGFsX2RlbGV0ZV9jb25maXJtLnZhbHVlLnNob3coXCJkZWxldGVfc2luZ2xlX3JlcG9ydFwiKTtcbn1cblxuXG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIEZ1bmN0aW9uIHRvIGhhbmRsZSBlZGl0IGJ1dHRvbiAqL1xuZnVuY3Rpb24gY2xpY2tfYnV0dG9uX2VkaXQoZXZlbnQpIHtcbiAgbW9kYWxfZWRpdC52YWx1ZS5zaG93KGV2ZW50LnJvdyk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIEZ1bmN0aW9uIHRvIGVkaXQgcmVwb3J0ICovXG5hc3luYyBmdW5jdGlvbiBlZGl0KHBhcmFtcykge1xuICBhd2FpdCBlZGl0X3JlcG9ydF9yZXN0KHBhcmFtcyk7XG59XG5cbmNvbnN0IGVkaXRfcmVwb3J0X3Jlc3QgPSBhc3luYyBmdW5jdGlvbiAocGFyYW1zKSB7XG4gIGNvbnN0IHVybCA9IE50b3BVdGlscy5idWlsZFVSTChlZGl0X3JlcG9ydF91cmwsIHtcbiAgICAuLi5wYXJhbXMsXG4gIH0pO1xuXG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcG9zdF9yZXF1ZXN0KHVybCwgcmVzdF9wYXJhbXMpO1xuXG4gIHJlZnJlc2hfdGFibGUoKTtcbn07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIEdldCB0aGUgbnVtYmVyIG9mIHJvd3Mgb2YgdGhlIHRhYmxlICovXG5mdW5jdGlvbiBvbl90YWJsZV9sb2FkZWQoKSB7XG4gIHRvdGFsX3Jvd3MudmFsdWUgPSB0YWJsZV92c19yZXBvcnRzLnZhbHVlLmdldF9yb3dzX251bSgpO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBGdW5jdGlvbiB0byBtYXAgY29sdW1ucyBkYXRhICovXG5jb25zdCBtYXBfdGFibGVfZGVmX2NvbHVtbnMgPSAoY29sdW1ucykgPT4ge1xuXG5cbiAgbGV0IG1hcF9jb2x1bW5zID0ge1xuICAgIFwicmVwb3J0X2RhdGVcIjogKHJlcG9ydF9kYXRlLCByb3cpID0+IHtcbiAgICAgICAgY29uc3QgdXJsID0gTnRvcFV0aWxzLmJ1aWxkVVJMKG9wZW5fcmVwb3J0X3VybCwge1xuICAgICAgICBwcmludGFibGU6IGZhbHNlLFxuICAgICAgICBlcG9jaF9lbmQ6IHJvdy5lcG9jaCxcbiAgICAgICAgZXBvY2hfYmVnaW46IHJvdy5lcG9jaFxuICAgICAgfSk7XG4gICAgXG4gICAgcmV0dXJuIGA8YSBocmVmPVwiJHt1cmx9XCI+JHtyZXBvcnRfZGF0ZX08L2E+YDtcbiAgICB9LFxuICB9O1xuXG4gIGNvbHVtbnMuZm9yRWFjaCgoYykgPT4ge1xuICAgIGMucmVuZGVyX2Z1bmMgPSBtYXBfY29sdW1uc1tjLmRhdGFfZmllbGRdO1xuXG4gICAgXG4gIH0pO1xuICBcbiAgcmV0dXJuIGNvbHVtbnM7XG59O1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKiBSRVNUIEZ1bmN0aW9ucyAqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIEZ1bmN0aW9uIHRvIGRlbGV0ZSByZXBvcnQgKi9cbmNvbnN0IGRlbGV0ZV9yb3cgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IHJvdyA9IHJvd190b19kZWxldGUudmFsdWU7XG4gIGNvbnN0IHVybCA9IE50b3BVdGlscy5idWlsZFVSTChyZW1vdmVfcmVwb3J0X3VybCwge1xuICAgIGVwb2NoOiByb3cuZXBvY2hcbiAgfSk7XG4gIGRlYnVnZ2VyO1xuICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3Bvc3RfcmVxdWVzdCh1cmwsIHJlc3RfcGFyYW1zKTtcbiAgcmVmcmVzaF90YWJsZShmYWxzZSk7XG59O1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuPC9zY3JpcHQ+XG4gICIsIjwhLS0gKEMpIDIwMjQgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG4gICAgPGRpdiBjbGFzcz1cImNhcmQgaC0xMDAgb3ZlcmZsb3ctaGlkZGVuXCI+XG4gICAgICAgIDxEYXRlVGltZVJhbmdlUGlja2VyIHN0eWxlPVwibWFyZ2luLXRvcDowLjVyZW07XCIgY2xhc3M9XCJtcy0xXCIgOmlkPVwiaWRfZGF0ZV90aW1lX3BpY2tlclwiIDplbmFibGVfcmVmcmVzaD1cImZhbHNlXCJcbiAgICAgICAgICAgIHJlZj1cImRhdGVfdGltZV9waWNrZXJcIiBAZXBvY2hfY2hhbmdlPVwiZXBvY2hfY2hhbmdlXCIgOmN1c3RvbV90aW1lX2ludGVydmFsX2xpc3Q9XCJ0aW1lX3ByZXNldF9saXN0XCI+XG4gICAgICAgIDwvRGF0ZVRpbWVSYW5nZVBpY2tlcj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm0tMiBtdC0wXCIgc3R5bGU9XCJtYXJnaW4tYm90dG9tOiA7XCI+XG4gICAgICAgICAgICA8VGltZXNlcmllc0NoYXJ0IHJlZj1cImNoYXJ0XCIgOmlkPVwiY2hhcnRfaWRcIiA6Y2hhcnRfdHlwZT1cImNoYXJ0X3R5cGVcIiA6YmFzZV91cmxfcmVxdWVzdD1cImJhc2VfdXJsXCJcbiAgICAgICAgICAgICAgICA6Z2V0X2N1c3RvbV9jaGFydF9vcHRpb25zPVwiZ2V0X2NoYXJ0X29wdGlvbnNcIiA6cmVnaXN0ZXJfb25fc3RhdHVzX2NoYW5nZT1cImZhbHNlXCJcbiAgICAgICAgICAgICAgICA6ZGlzYWJsZV9wb2ludGVyX2V2ZW50cz1cImZhbHNlXCI+XG4gICAgICAgICAgICA8L1RpbWVzZXJpZXNDaGFydD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJtLTIgbWItM1wiPlxuICAgICAgICAgICAgPFRhYmxlV2l0aENvbmZpZyByZWY9XCJ0YWJsZV9zbm1wX3VzYWdlXCIgOnRhYmxlX2lkPVwidGFibGVfaWRcIiA6Y3NyZj1cImNzcmZcIiA6Zl9tYXBfY29sdW1ucz1cIm1hcF90YWJsZV9kZWZfY29sdW1uc1wiXG4gICAgICAgICAgICAgICAgOmdldF9leHRyYV9wYXJhbXNfb2JqPVwiZ2V0X2V4dHJhX3BhcmFtc19vYmpcIiA6Zl9zb3J0X3Jvd3M9XCJjb2x1bW5zX3NvcnRpbmdcIlxuICAgICAgICAgICAgICAgIEBjdXN0b21fZXZlbnQ9XCJvbl90YWJsZV9jdXN0b21fZXZlbnRcIj5cbiAgICAgICAgICAgIDwvVGFibGVXaXRoQ29uZmlnPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1mb290ZXJcIj5cbiAgICAgICAgICAgIDxOb3RlTGlzdCA6bm90ZV9saXN0PVwibm90ZV9saXN0XCI+IDwvTm90ZUxpc3Q+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBOb3RlTGlzdCB9IGZyb20gXCIuL25vdGUtbGlzdC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgVGFibGVXaXRoQ29uZmlnIH0gZnJvbSBcIi4vdGFibGUtd2l0aC1jb25maWcudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIERhdGVUaW1lUmFuZ2VQaWNrZXIgfSBmcm9tIFwiLi9kYXRlLXRpbWUtcmFuZ2UtcGlja2VyLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBzb3J0aW5nRnVuY3Rpb25zIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9zb3J0aW5nLXV0aWxzLmpzXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFRpbWVzZXJpZXNDaGFydCB9IGZyb20gXCIuL3RpbWVzZXJpZXMtY2hhcnQudnVlXCI7XG5pbXBvcnQgdGltZXNlcmllc1V0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvdGltZXNlcmllcy11dGlscy5qc1wiO1xuaW1wb3J0IGZvcm1hdHRlclV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvZm9ybWF0dGVyLXV0aWxzXCI7XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIGNvbnRleHQ6IE9iamVjdCxcbn0pO1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuY29uc3QgdGltZV9wcmVzZXRfbGlzdCA9IFtcbiAgICB7IHZhbHVlOiBcIjEwX21pblwiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy4xMF9taW4nKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfSxcbiAgICB7IHZhbHVlOiBcIjMwX21pblwiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy4zMF9taW4nKSwgY3VycmVudGx5X2FjdGl2ZTogdHJ1ZSB9LFxuICAgIHsgdmFsdWU6IFwiaG91clwiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy5ob3VyJyksIGN1cnJlbnRseV9hY3RpdmU6IGZhbHNlIH0sXG4gICAgeyB2YWx1ZTogXCIyX2hvdXJzXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLjJfaG91cnMnKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfSxcbiAgICB7IHZhbHVlOiBcIjZfaG91cnNcIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMuNl9ob3VycycpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgIHsgdmFsdWU6IFwiMTJfaG91cnNcIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMuMTJfaG91cnMnKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfSxcbiAgICB7IHZhbHVlOiBcImRheVwiLCBsYWJlbDogaTE4bignc2hvd19hbGVydHMucHJlc2V0cy5kYXknKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfSxcbiAgICB7IHZhbHVlOiBcIndlZWtcIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMud2VlaycpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgIHsgdmFsdWU6IFwibW9udGhcIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMubW9udGgnKSwgY3VycmVudGx5X2FjdGl2ZTogZmFsc2UgfSxcbiAgICB7IHZhbHVlOiBcInllYXJcIiwgbGFiZWw6IGkxOG4oJ3Nob3dfYWxlcnRzLnByZXNldHMueWVhcicpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSB9LFxuICAgIHsgdmFsdWU6IFwiY3VzdG9tXCIsIGxhYmVsOiBpMThuKCdzaG93X2FsZXJ0cy5wcmVzZXRzLmN1c3RvbScpLCBjdXJyZW50bHlfYWN0aXZlOiBmYWxzZSwgZGlzYWJsZWQ6IHRydWUsIH0sXG5dO1xuXG5jb25zdCBzZXJpZV9uYW1lID0gXCJDb25nZXN0aW9uXCI7XG5jb25zdCB0YWJsZV9zbm1wX3VzYWdlID0gcmVmKG51bGwpO1xuY29uc3QgZGF0ZV90aW1lX3BpY2tlciA9IHJlZihudWxsKTtcbmNvbnN0IHRhYmxlX2lkID0gcmVmKCdzbm1wX3VzYWdlJyk7XG5jb25zdCBjaGFydF9pZCA9IHJlZignc25tcF91c2FnZV9jaGFydCcpO1xuY29uc3QgY3NyZiA9IHByb3BzLmNvbnRleHQuY3NyZjtcbmNvbnN0IHN5c3RlbV9pbnRlcmZhY2VfaWQgPSAtMTtcbmNvbnN0IGNoYXJ0ID0gcmVmKG51bGwpO1xuY29uc3QgY2hhcnRfdHlwZSA9IHJlZihudG9wQ2hhcnRBcGV4LnR5cGVDaGFydC5UU19MSU5FKTtcbmNvbnN0IGJhc2VfdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vcmVzdC92Mi9nZXQvc25tcC9tZXRyaWMvdXNhZ2VfY2hhcnQubHVhYFxubGV0IGlkX2RhdGVfdGltZV9waWNrZXIgPSBcImRhdGVfdGltZV9waWNrZXJcIjtcblxuY29uc3Qgbm90ZV9saXN0ID0gW1xuICAgIGkxOG4oJ3NubXAuY2hhcnRfY29uZ2VzdGlvbl9yYXRlX25vdGUnKSxcbiAgICBpMThuKCdzbm1wLmNoYXJ0X2Nvbmdlc3Rpb25fbGluaycpLFxuICAgIGkxOG4oJ3NubXAuY2hhcnRfY29uZ2VzdGlvbl9jb25maWd1cmF0aW9uJyksXG4gICAgaTE4bignc25tcC5jaGFydF9jb25nZXN0aW9uX3JhdGVfY29sb3InKSxcbl07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmNvbnN0IG1hcF90YWJsZV9kZWZfY29sdW1ucyA9IChjb2x1bW5zKSA9PiB7XG4gICAgY29uc3QgZm9ybWF0dGVyID0gZm9ybWF0dGVyVXRpbHMuZ2V0Rm9ybWF0dGVyKFwicGVyY2VudGFnZVwiKTtcbiAgICBsZXQgbWFwX2NvbHVtbnMgPSB7XG4gICAgICAgIFwiaXBcIjogKHZhbHVlLCByb3cpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2Uvc25tcF9kZXZpY2VfZGV0YWlscy5sdWE/aXA9JHt2YWx1ZX1gXG4gICAgICAgICAgICByZXR1cm4gYDxhIGhyZWY9JHt1cmx9PiR7dmFsdWV9PC9hPmBcbiAgICAgICAgfSxcbiAgICAgICAgXCJpbnRlcmZhY2VcIjogKHZhbHVlLCByb3cpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2Uvc25tcF9pbnRlcmZhY2VfZGV0YWlscy5sdWE/aG9zdD0ke3Jvdy5pcH0mc25tcF9wb3J0X2lkeD0ke3Jvdy5pZmlkfWBcbiAgICAgICAgICAgIHJldHVybiBgPGEgaHJlZj0ke3VybH0+JHt2YWx1ZX08L2E+YFxuICAgICAgICB9LFxuICAgICAgICBcInR5cGVcIjogKHR5cGUsIHJvdykgPT4ge1xuICAgICAgICAgICAgaWYgKHR5cGUgPT0gJ3VwbGluaycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYCR7aTE4bignb3V0X3VzYWdlJyl9IDxpIGNsYXNzPVwiZmEtc29saWQgZmEtY2lyY2xlLWFycm93LXVwXCIgc3R5bGU9XCJjb2xvcjogI0M2RDlGRFwiPjwvaT5gXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBgJHtpMThuKCdpbl91c2FnZScpfSA8aSBjbGFzcz1cImZhLXNvbGlkIGZhLWNpcmNsZS1hcnJvdy1kb3duXCIgc3R5bGU9XCJjb2xvcjogIzkwRUU5MFwiPjwvaT5gXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFwic3BlZWRcIjogKHZhbHVlLCByb3cpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZvcm1hdHRlZF9zcGVlZCA9IGZvcm1hdHRlclV0aWxzLmdldEZvcm1hdHRlcihcInNwZWVkXCIpKHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiBgJHtmb3JtYXR0ZWRfc3BlZWR9IDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9JyR7Y3JlYXRlX2NvbmZpZ191cmxfbGluayhyb3cpfSc+PGkgY2xhc3M9XCJmYXMgZmEtY29nXCI+PC9pPjwvYT5gXG4gICAgICAgIH0sXG4gICAgICAgIFwibWluXCI6ICh2YWx1ZSwgcm93KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0dGVyKHZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgXCJtYXhcIjogKHZhbHVlLCByb3cpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXR0ZXIodmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICBcImF2ZXJhZ2VcIjogKHZhbHVlLCByb3cpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXR0ZXIodmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICBcImxhc3RfdmFsdWVcIjogKHZhbHVlLCByb3cpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXR0ZXIodmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICBcImNvbmdlc3Rpb25fcmF0ZVwiOiAodmFsdWUsIHJvdykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdHRlcih2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbHVtbnMuZm9yRWFjaCgoYykgPT4ge1xuICAgICAgICBjLnJlbmRlcl9mdW5jID0gbWFwX2NvbHVtbnNbYy5kYXRhX2ZpZWxkXTtcbiAgICAgICAgaWYgKGMuaWQgPT0gXCJhY3Rpb25zXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IHZpc2libGVfZGljdCA9IHtcbiAgICAgICAgICAgICAgICBoaXN0b3JpY2FsX2RhdGE6IHByb3BzLnNob3dfaGlzdG9yaWNhbCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjLmJ1dHRvbl9kZWZfYXJyYXkuZm9yRWFjaCgoYikgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdmlzaWJsZV9kaWN0W2IuaWRdKSB7XG4gICAgICAgICAgICAgICAgICAgIGIuY2xhc3MucHVzaChcImRpc2FibGVkXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gY29sdW1ucztcbn07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmZ1bmN0aW9uIGNvbHVtbnNfc29ydGluZyhjb2wsIHIwLCByMSkge1xuICAgIGlmIChjb2wgIT0gbnVsbCkge1xuICAgICAgICBjb25zdCByMF9jb2wgPSByMFtjb2wuZGF0YS5kYXRhX2ZpZWxkXTtcbiAgICAgICAgY29uc3QgcjFfY29sID0gcjFbY29sLmRhdGEuZGF0YV9maWVsZF07XG5cbiAgICAgICAgLyogSW4gY2FzZSB0aGUgdmFsdWVzIGFyZSB0aGUgc2FtZSwgc29ydCBieSBJUCAqL1xuICAgICAgICBpZiAocjBfY29sID09IHIxX2NvbCkge1xuICAgICAgICAgICAgcmV0dXJuIHNvcnRpbmdGdW5jdGlvbnMuc29ydEJ5TmFtZShyMC5kZXZpY2UsIHIxLmRldmljZSwgY29sID8gY29sLnNvcnQgOiBudWxsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29sLmlkID09IFwiZGV2aWNlX25hbWVcIikge1xuICAgICAgICAgICAgcmV0dXJuIHNvcnRpbmdGdW5jdGlvbnMuc29ydEJ5TmFtZShyMF9jb2wsIHIxX2NvbCwgY29sLnNvcnQpO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbC5pZCA9PSBcImlwXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBzb3J0aW5nRnVuY3Rpb25zLnNvcnRCeUlQKHIwX2NvbCwgcjFfY29sLCBjb2wuc29ydCk7XG4gICAgICAgIH0gZWxzZSBpZiAoY29sLmlkID09IFwiaW50ZXJmYWNlXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBzb3J0aW5nRnVuY3Rpb25zLnNvcnRCeU5hbWUocjBfY29sLCByMV9jb2wsIGNvbC5zb3J0KTtcbiAgICAgICAgfSBlbHNlIGlmIChjb2wuaWQgPT0gXCJ0eXBlXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBzb3J0aW5nRnVuY3Rpb25zLnNvcnRCeU5hbWUocjBfY29sLCByMV9jb2wsIGNvbC5zb3J0KTtcbiAgICAgICAgfSBlbHNlIGlmIChjb2wuaWQgPT0gXCJzcGVlZFwiKSB7XG4gICAgICAgICAgICBjb25zdCBsb3dlcl92YWx1ZSA9IC0xO1xuICAgICAgICAgICAgcmV0dXJuIHNvcnRpbmdGdW5jdGlvbnMuc29ydEJ5TnVtYmVyV2l0aE5vcm1hbGl6YXRpb25WYWx1ZShyMF9jb2wsIHIxX2NvbCwgY29sLnNvcnQsIGxvd2VyX3ZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChjb2wuaWQgPT0gXCJtaW5cIikge1xuICAgICAgICAgICAgY29uc3QgbG93ZXJfdmFsdWUgPSAtMTtcbiAgICAgICAgICAgIHJldHVybiBzb3J0aW5nRnVuY3Rpb25zLnNvcnRCeU51bWJlcldpdGhOb3JtYWxpemF0aW9uVmFsdWUocjBfY29sLCByMV9jb2wsIGNvbC5zb3J0LCBsb3dlcl92YWx1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoY29sLmlkID09IFwibWF4XCIpIHtcbiAgICAgICAgICAgIGNvbnN0IGxvd2VyX3ZhbHVlID0gLTE7XG4gICAgICAgICAgICByZXR1cm4gc29ydGluZ0Z1bmN0aW9ucy5zb3J0QnlOdW1iZXJXaXRoTm9ybWFsaXphdGlvblZhbHVlKHIwX2NvbCwgcjFfY29sLCBjb2wuc29ydCwgbG93ZXJfdmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbC5pZCA9PSBcImF2ZXJhZ2VcIikge1xuICAgICAgICAgICAgY29uc3QgbG93ZXJfdmFsdWUgPSAtMTtcbiAgICAgICAgICAgIHJldHVybiBzb3J0aW5nRnVuY3Rpb25zLnNvcnRCeU51bWJlcldpdGhOb3JtYWxpemF0aW9uVmFsdWUocjBfY29sLCByMV9jb2wsIGNvbC5zb3J0LCBsb3dlcl92YWx1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoY29sLmlkID09IFwiY29uZ2VzdGlvbl9yYXRlXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IGxvd2VyX3ZhbHVlID0gLTE7XG4gICAgICAgICAgICByZXR1cm4gc29ydGluZ0Z1bmN0aW9ucy5zb3J0QnlOdW1iZXJXaXRoTm9ybWFsaXphdGlvblZhbHVlKHIwX2NvbCwgcjFfY29sLCBjb2wuc29ydCwgbG93ZXJfdmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbC5pZCA9PSBcImxhc3RfdmFsdWVcIikge1xuICAgICAgICAgICAgY29uc3QgbG93ZXJfdmFsdWUgPSAtMTtcbiAgICAgICAgICAgIHJldHVybiBzb3J0aW5nRnVuY3Rpb25zLnNvcnRCeU51bWJlcldpdGhOb3JtYWxpemF0aW9uVmFsdWUocjBfY29sLCByMV9jb2wsIGNvbC5zb3J0LCBsb3dlcl92YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc29ydGluZ0Z1bmN0aW9ucy5zb3J0QnlOYW1lKHIwLmRldmljZSwgcjEuZGV2aWNlLCBjb2wgPyBjb2wuc29ydCA6IG51bGwpO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5hc3luYyBmdW5jdGlvbiBlcG9jaF9jaGFuZ2UoKSB7XG4gICAgaWYgKHRhYmxlX3NubXBfdXNhZ2UudmFsdWUpIHtcbiAgICAgICAgdGFibGVfc25tcF91c2FnZS52YWx1ZS5yZWZyZXNoX3RhYmxlKGZhbHNlKTtcbiAgICB9XG5cbiAgICBpZiAoY2hhcnQudmFsdWUpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IGF3YWl0IGdldF9jaGFydF9vcHRpb25zKCk7XG4gICAgICAgIGNoYXJ0LnZhbHVlLnVwZGF0ZV9jaGFydF9zZXJpZXMob3B0aW9ucz8uZGF0YSk7XG4gICAgfVxufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5jb25zdCBnZXRfZXh0cmFfcGFyYW1zX29iaiA9ICgpID0+IHtcbiAgICBsZXQgZXh0cmFfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfb2JqZWN0KCk7XG4gICAgcmV0dXJuIGV4dHJhX3BhcmFtcztcbn07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmZ1bmN0aW9uIGNyZWF0ZV9jb25maWdfdXJsX2xpbmsocm93KSB7XG4gICAgcmV0dXJuIGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2Uvc25tcF9pbnRlcmZhY2VfZGV0YWlscy5sdWE/aG9zdD0ke3Jvdy5pcH0mc25tcF9wb3J0X2lkeD0ke3Jvdy5pZmlkfSZwYWdlPWNvbmZpZ2Bcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuZnVuY3Rpb24gY2xpY2tfYnV0dG9uX3RpbWVzZXJpZXMoZXZlbnQpIHtcbiAgICBjb25zdCByb3cgPSBldmVudC5yb3c7XG4gICAgY29uc3QgZXBvY2hfYmVnaW4gPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImVwb2NoX2JlZ2luXCIpO1xuICAgIGNvbnN0IGVwb2NoX2VuZCA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiZXBvY2hfZW5kXCIpO1xuICAgIHdpbmRvdy5vcGVuKGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2Uvc25tcF9pbnRlcmZhY2VfZGV0YWlscy5sdWE/aG9zdD0ke3Jvdy5pcH0mc25tcF9wb3J0X2lkeD0ke3Jvdy5pZmlkfSZwYWdlPWhpc3RvcmljYWwmaWZpZD0tMSZlcG9jaF9lbmQ9JHtlcG9jaF9lbmR9JmVwb2NoX2JlZ2luPSR7ZXBvY2hfYmVnaW59JnRpbWVzZXJpZXNfZ3JvdXBzX21vZGU9MV9jaGFydF94X21ldHJpYyZ0aW1lc2VyaWVzX2dyb3Vwcz1zbm1wX2ludGVyZmFjZTstMSUyQiR7cm93LmlwfSUyQiR7cm93LmlmaWR9O3NubXBfaWY6dXNhZ2U7dXBsaW5rPXRydWU6ZmFsc2U6ZmFsc2U6ZmFsc2V8ZG93bmxpbms9dHJ1ZTpmYWxzZTpmYWxzZTpmYWxzZWApO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5mdW5jdGlvbiBjbGlja19idXR0b25fY29uZmlndXJhdGlvbihldmVudCkge1xuICAgIGNvbnN0IHJvdyA9IGV2ZW50LnJvdztcbiAgICB3aW5kb3cub3BlbihjcmVhdGVfY29uZmlnX3VybF9saW5rKHJvdykpO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5mdW5jdGlvbiBvbl90YWJsZV9jdXN0b21fZXZlbnQoZXZlbnQpIHtcbiAgICBsZXQgZXZlbnRzX21hbmFnZWQgPSB7XG4gICAgICAgIFwiY2xpY2tfYnV0dG9uX3RpbWVzZXJpZXNcIjogY2xpY2tfYnV0dG9uX3RpbWVzZXJpZXMsXG4gICAgICAgIFwiY2xpY2tfYnV0dG9uX2NvbmZpZ3VyYXRpb25cIjogY2xpY2tfYnV0dG9uX2NvbmZpZ3VyYXRpb25cbiAgICB9O1xuICAgIGlmIChldmVudHNfbWFuYWdlZFtldmVudC5ldmVudF9pZF0gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGV2ZW50c19tYW5hZ2VkW2V2ZW50LmV2ZW50X2lkXShldmVudCk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBUaGlzIGZ1bmN0aW9uIHJ1biB0aGUgUkVTVCBBUEkgd2l0aCB0aGUgZGF0YSAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0X2NoYXJ0X29wdGlvbnMoKSB7XG4gICAgbGV0IHJlc3VsdCA9IG51bGw7XG4gICAgY29uc3QgcG9zdF9wYXJhbXMgPSB7XG4gICAgICAgIGNzcmY6IGNzcmYsXG4gICAgICAgIGlmaWQ6IHN5c3RlbV9pbnRlcmZhY2VfaWQsXG4gICAgICAgIGVwb2NoX2JlZ2luOiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImVwb2NoX2JlZ2luXCIpLFxuICAgICAgICBlcG9jaF9lbmQ6IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiZXBvY2hfZW5kXCIpLFxuICAgICAgICBob3N0OiBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcImhvc3RcIiksXG4gICAgfVxuXG4gICAgcmVzdWx0ID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9wb3N0X3JlcXVlc3QoYmFzZV91cmwsIHBvc3RfcGFyYW1zKTtcbiAgICAvKiBGb3JtYXQgdGhlIHJlc3VsdCBpbiB0aGUgZm9ybWF0IG5lZWRlZCBieSBEeWdyYXBoICovXG4gICAgY29uc3QgY29uZmlnID0gdGltZXNlcmllc1V0aWxzLmZvcm1hdFNpbXBsZVNlcmllKHJlc3VsdCwgc2VyaWVfbmFtZSwgXCJiYXJcIiwgW1wicGVyY2VudGFnZVwiXSwgWzAsIDEwMF0pO1xuXG4gICAgLyogQ3VzdG9tIG9wdGlvbnMgZm9yIHRoaXMgY2hhcnQgKi9cbiAgICBjb25maWcudGl0bGUgPSAnPGRpdiBzdHlsZT1cImZvbnQtc2l6ZToxOHB4O1wiPicgKyBpMThuKCdzbm1wLnRvcF9jb25nZXN0ZWRfZGV2aWNlcycpICsgJzwvZGl2Pic7XG4gICAgY29uZmlnLnRpdGxlSGVpZ2h0ID0gNDg7XG4gICAgY29uZmlnLmF4ZXMueS5heGlzTGFiZWxXaWR0aCA9IDQwO1xuICAgIGNvbmZpZy54QXhpc0hlaWdodCA9IDY7XG4gICAgY29uZmlnLmF4ZXMueC5heGlzTGFiZWxXaWR0aCA9IDEyMDtcbiAgICBjb25maWcuYXhlcy54LnBpeGVsc1BlckxhYmVsID0gMjA7XG4gICAgY29uZmlnLnhSYW5nZVBhZCA9IDUwO1xuXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oYCR7c2VyaWVfbmFtZX1feF9heGlzX2xhYmVsYCwgSlNPTi5zdHJpbmdpZnkocmVzdWx0LmxhYmVscykpO1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGAke3NlcmllX25hbWV9X21ldGFkYXRhYCwgSlNPTi5zdHJpbmdpZnkocmVzdWx0Lm1ldGFkYXRhKSk7XG4gICAgY29uZmlnLmF4ZXMueC5heGlzTGFiZWxGb3JtYXR0ZXIgPSBmdW5jdGlvbiAodmFsdWUsIGdyYW51bGFyaXR5LCBvcHRzLCBkeWdyYXBoKSB7XG4gICAgICAgIHJldHVybiAnJ1xuICAgIH07XG5cbiAgICBjb25maWcuYXhlcy54LnZhbHVlRm9ybWF0dGVyID0gZnVuY3Rpb24gKHZhbHVlLCBncmFudWxhcml0eSwgb3B0cywgZHlncmFwaCkge1xuICAgICAgICAvKiBTb21ldGltZXMgaGFwcGVucyB0aGF0IFggdmFsdWVzIGFyZSBhcHByb3hpbWF0ZWQgaW4gRHlHcmFwaCwgZS5nLiA1IGJlY29tZXMgNS4wMDAwMDFcbiAgICAgICAgICogSW4gdGhpcyBjYXNlIG5vIGxhYmVsIGlzIGZvdW5kIGV2ZW4gaWYgaXQncyBwcmVzZW50LCBzdSByb3VuZCB0aGUgdmFsdWUgYmVmb3JlIGNoZWNraW5nIHRoZSBsYWJlbFxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IHJvdW5kZWRfdmFsdWUgPSBOdW1iZXIodmFsdWUudG9GaXhlZCg0KSlcbiAgICAgICAgICAgIGNvbnN0IGxhYmVsc19qc29uID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oYCR7c2VyaWVfbmFtZX1feF9heGlzX2xhYmVsYClcbiAgICAgICAgICAgIGNvbnN0IGxhYmVsc19hcnJheSA9IEpTT04ucGFyc2UobGFiZWxzX2pzb24pO1xuICAgICAgICAgICAgY29uc3QgbGFiZWwgPSBsYWJlbHNfYXJyYXlbcm91bmRlZF92YWx1ZSAtIDFdO1xuICAgICAgICAgICAgaWYgKGxhYmVsKVxuICAgICAgICAgICAgICAgIHJldHVybiBgPHNwYW4gc3R5bGU9XCJ3aGl0ZS1zcGFjZTogcHJlLXdyYXBcIj4ke2xhYmVsfTwvc3Bhbj5gXG5cbiAgICAgICAgICAgIHJldHVybiAnJ1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGNvbmZpZy5jbGlja0NhbGxiYWNrID0gZnVuY3Rpb24gKGUsIHgsIHBvaW50cykge1xuICAgICAgICAvLyB0YWJsZV9zbm1wX3VzYWdlLnZhbHVlLnNlYXJjaF92YWx1ZSh4KTtcbiAgICAgICAgY29uc3Qgcm91bmRlZF92YWx1ZSA9IE51bWJlcih4LnRvRml4ZWQoNCkpXG4gICAgICAgIGNvbnN0IG1ldGFkYXRhX2pzb24gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShgJHtzZXJpZV9uYW1lfV9tZXRhZGF0YWApXG4gICAgICAgIGNvbnN0IG1ldGFkYXRhX2FycmF5ID0gSlNPTi5wYXJzZShtZXRhZGF0YV9qc29uKTtcbiAgICAgICAgY29uc3QgbWV0YWRhdGEgPSBtZXRhZGF0YV9hcnJheVtyb3VuZGVkX3ZhbHVlIC0gMV07XG4gICAgICAgIGlmIChtZXRhZGF0YSkge1xuICAgICAgICAgICAgY2xpY2tfYnV0dG9uX3RpbWVzZXJpZXMoeyByb3c6IG1ldGFkYXRhIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbmZpZztcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxub25Nb3VudGVkKGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgIG50b3BuZ19zeW5jLm9uX3JlYWR5KGlkX2RhdGVfdGltZV9waWNrZXIpLFxuICAgIF0pO1xufSk7XG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuLmR5Z3JhcGgtYXhpcy1sYWJlbC5keWdyYXBoLWF4aXMtbGFiZWwteCB7XG4gICAgZm9udC1zaXplOiAxMnB4O1xuICAgIHRyYW5zZm9ybTogcm90YXRlKC05MGRlZykgdHJhbnNsYXRlKC0yMHB4LCAwKTtcbn1cbjwvc3R5bGU+XG4iLCI8IS0tIChDKSAyMDI0IC0gbnRvcC5vcmcgICAgIC0tPlxuPHRlbXBsYXRlPlxuICAgIDxkaXYgY2xhc3M9XCJtLTIgbWItM1wiPlxuICAgICAgICA8VGFibGVXaXRoQ29uZmlnIHJlZj1cInRhYmxlX3NubXBfaW50ZXJmYWNlc1wiIDp0YWJsZV9pZD1cInRhYmxlX2lkXCIgOmNzcmY9XCJjc3JmXCJcbiAgICAgICAgICAgIDpmX21hcF9jb2x1bW5zPVwibWFwX3RhYmxlX2RlZl9jb2x1bW5zXCIgOmdldF9leHRyYV9wYXJhbXNfb2JqPVwiZ2V0X2V4dHJhX3BhcmFtc19vYmpcIlxuICAgICAgICAgICAgOmZfc29ydF9yb3dzPVwiY29sdW1uc19zb3J0aW5nXCIgQGN1c3RvbV9ldmVudD1cIm9uX3RhYmxlX2N1c3RvbV9ldmVudFwiPlxuICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDpjdXN0b21faGVhZGVyPlxuICAgICAgICAgICAgICAgIDxEcm9wZG93biB2LWZvcj1cIih0LCB0X2luZGV4KSBpbiBmaWx0ZXJfdGFibGVfYXJyYXlcIiA6Zl9vbl9vcGVuPVwiZ2V0X29wZW5fZmlsdGVyX3RhYmxlX2Ryb3Bkb3duKHQsIHRfaW5kZXgpXCJcbiAgICAgICAgICAgICAgICAgICAgOnJlZj1cImVsID0+IHsgZmlsdGVyX3RhYmxlX2Ryb3Bkb3duX2FycmF5W3RfaW5kZXhdID0gZWwgfVwiIDpoaWRkZW49XCJ0LmhpZGRlblwiPlxuICAgICAgICAgICAgICAgICAgICA8IS0tIERyb3Bkb3duIGNvbHVtbnMgLS0+XG4gICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+XG4gICAgICAgICAgICAgICAgICAgICAgICA8U3Bpbm5lciA6c2hvdz1cInQuc2hvd19zcGlubmVyXCIgc2l6ZT1cIjFyZW1cIiBjbGFzcz1cIm1lLTFcIj48L1NwaW5uZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cIm50b3BuZy10cnVuY2F0ZVwiIDp0aXRsZT1cInQudGl0bGVcIj57eyB0LmxhYmVsIH19PC9hPlxuICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90Om1lbnU+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YSB2LWZvcj1cIm9wdCBpbiB0Lm9wdGlvbnNcIiBzdHlsZT1cImN1cnNvcjpwb2ludGVyOyBkaXNwbGF5OiBibG9jaztcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz1cImFkZF90YWJsZV9maWx0ZXIob3B0LCAkZXZlbnQpXCIgY2xhc3M9XCJudG9wbmctdHJ1bmNhdGUgdGFnLWZpbHRlclwiIDp0aXRsZT1cIm9wdC52YWx1ZVwiPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtaWY9XCJvcHQuY291bnQgPT0gbnVsbFwiPnt7IG9wdC5sYWJlbCB9fTwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtZWxzZT57eyBvcHQubGFiZWwgKyBcIiAoXCIgKyBvcHQuY291bnQgKyBcIilcIiB9fTwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgPC9Ecm9wZG93bj5cbiAgICAgICAgICAgIDwvdGVtcGxhdGU+IDwhLS0gRHJvcGRvd24gZmlsdGVycyAtLT5cbiAgICAgICAgPC9UYWJsZVdpdGhDb25maWc+XG4gICAgPC9kaXY+XG5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZC1mb290ZXJcIj5cbiAgICAgICAgPE5vdGVMaXN0IDpub3RlX2xpc3Q9XCJub3RlX2xpc3RcIj4gPC9Ob3RlTGlzdD5cbiAgICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgbmV4dFRpY2sgfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE5vdGVMaXN0IH0gZnJvbSBcIi4vbm90ZS1saXN0LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTcGlubmVyIH0gZnJvbSBcIi4vc3Bpbm5lci52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgRHJvcGRvd24gfSBmcm9tIFwiLi9kcm9wZG93bi52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgVGFibGVXaXRoQ29uZmlnIH0gZnJvbSBcIi4vdGFibGUtd2l0aC1jb25maWcudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIHNvcnRpbmdGdW5jdGlvbnMgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3NvcnRpbmctdXRpbHMuanNcIjtcbmltcG9ydCBmb3JtYXR0ZXJVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL2Zvcm1hdHRlci11dGlsc1wiO1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICBjb250ZXh0OiBPYmplY3QsXG59KTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogVGhlIHNhbWUgZXhhY3QgcGFnZSBpcyB1c2VkIGZvciBib3RoLCB0aGUgaW50ZXJmYWNlcyBwYWdlIGZvciBhbGwgU05NUCBkZXZpY2VzXG4gKiBhbmQgdGhlIGludGVyZmFjZXMgcGFnZSBmb3IgYSBzcGVjaWZpYyBkZXZpY2UuIEhhdmluZyBkaWZmZXJlbnQgY29sdW1ucywgc2ltcGx5IHN3aXRjaCBiZXR3ZWVuIFxuICogdGhvc2UgdHdvIHRhYmxlcy5cbiAqL1xuY29uc3QgdGFibGVfaWQgPSBwcm9wcy5jb250ZXh0Py5pbnNpZGVfYV9kZXZpY2UgPyByZWYoJ3NubXBfZGV2aWNlX2ludGVyZmFjZXMnKSA6IHJlZignc25tcF9pbnRlcmZhY2VzJyk7XG5jb25zdCB0YWJsZV9zbm1wX2ludGVyZmFjZXMgPSByZWYobnVsbCk7XG5jb25zdCBjc3JmID0gcHJvcHMuY29udGV4dC5jc3JmO1xuY29uc3QgZmlsdGVyX3RhYmxlX2FycmF5ID0gcmVmKFtdKTtcbmNvbnN0IGZpbHRlcl90YWJsZV9kcm9wZG93bl9hcnJheSA9IHJlZihbXSk7XG5cbmNvbnN0IG5vdGVfbGlzdCA9IFtcbiAgICBpMThuKFwic25tcC5zbm1wX25vdGVfcGVyaW9kaWNfaW50ZXJmYWNlc19wb2xsaW5nXCIpLFxuICAgIGkxOG4oXCJzbm1wLnNubXBfbm90ZV90aHB0X2NhbGNcIiksXG4gICAgaTE4bihcInNubXAuc25tcF9ub3RlX2F2Z191c2FnZVwiKVxuXTtcbmNvbnN0IGludGVyZmFjZV9zdGF0dXMgPSB7XG4gICAgW1wiMVwiXTogXCI8Zm9udCBjb2xvcj1ncmVlbj5cIiArIGkxOG4oXCJzbm1wLnN0YXR1c191cFwiKSArIFwiPC9mb250PlwiLFxuICAgIFtcIjEwMVwiXTogXCI8Zm9udCBjb2xvcj1ncmVlbj5cIiArIGkxOG4oXCJzbm1wLnN0YXR1c191cF9pbl91c2VcIikgKyBcIjwvZm9udD5cIixcbiAgICBbXCIyXCJdOiBcIjxmb250IGNvbG9yPXJlZD5cIiArIGkxOG4oXCJzbm1wLnN0YXR1c19kb3duXCIpICsgXCI8L2ZvbnQ+XCIsXG4gICAgW1wiM1wiXTogaTE4bihcInNubXAudGVzdGluZ1wiKSxcbiAgICBbXCI0XCJdOiBpMThuKFwic25tcC5zdGF0dXNfdW5rbm93blwiKSxcbiAgICBbXCI1XCJdOiBpMThuKFwic25tcC5zdGF0dXNfZG9ybWFudFwiKSxcbiAgICBbXCI2XCJdOiBpMThuKFwic3RhdHVzX25vdHByZXNlbnRcIiksXG4gICAgW1wiN1wiXTogXCI8Zm9udCBjb2xvcj1yZWQ+XCIgKyBpMThuKFwic25tcC5zdGF0dXNfbG93ZXJsYXllcmRvd25cIikgKyBcIjwvZm9udD5cIixcbn1cbmNvbnN0IGR1cGxleF9zdGF0dXMgPSB7XG4gICAgW1wiMVwiXTogaTE4bihcInVua25vd25cIiksXG4gICAgW1wiMlwiXTogXCI8Zm9udCBjb2xvcj1vcmFuZ2U+XCIgKyBpMThuKFwiZmxvd19kZXZpY2VzLmhhbGZfZHVwbGV4XCIpICsgXCI8L2ZvbnQ+XCIsXG4gICAgW1wiM1wiXTogXCI8Zm9udCBjb2xvcj1ncmVlbj5cIiArIGkxOG4oXCJmbG93X2RldmljZXMuZnVsbF9kdXBsZXhcIikgKyBcIjwvZm9udD5cIlxufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5jb25zdCBtYXBfdGFibGVfZGVmX2NvbHVtbnMgPSAoY29sdW1ucykgPT4ge1xuICAgIGNvbnN0IGZvcm1hdHRlciA9IGZvcm1hdHRlclV0aWxzLmdldEZvcm1hdHRlcihcInBlcmNlbnRhZ2VcIik7XG4gICAgbGV0IG1hcF9jb2x1bW5zID0ge1xuICAgICAgICBcImRldmljZV9uYW1lXCI6ICh2YWx1ZSwgcm93KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB1cmwgPSBgJHtodHRwX3ByZWZpeH0vbHVhL3Byby9lbnRlcnByaXNlL3NubXBfZGV2aWNlX2RldGFpbHMubHVhP2lwPSR7cm93LmRldmljZV9pcH1gXG4gICAgICAgICAgICByZXR1cm4gYDxhIGhyZWY9JHt1cmx9PiR7dmFsdWV9PC9hPmBcbiAgICAgICAgfSxcbiAgICAgICAgXCJpbnRlcmZhY2VfbmFtZVwiOiAodmFsdWUsIHJvdykgPT4ge1xuICAgICAgICAgICAgY29uc3QgdXJsID0gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9zbm1wX2ludGVyZmFjZV9kZXRhaWxzLmx1YT9ob3N0PSR7cm93LmRldmljZV9pcH0mc25tcF9wb3J0X2lkeD0ke3Jvdy5pbnRlcmZhY2VfaWR9YFxuICAgICAgICAgICAgcmV0dXJuIGA8YSBocmVmPSR7dXJsfT4ke3ZhbHVlfTwvYT5gXG4gICAgICAgIH0sXG4gICAgICAgIFwidmxhblwiOiAodmFsdWUsIHJvdykgPT4ge1xuICAgICAgICAgICAgbGV0IHZsYW5fbmFtZSA9ICcnXG4gICAgICAgICAgICBpZiAocm93LnZsYW5fbmFtZSAhPSAnJykge1xuICAgICAgICAgICAgICAgIHZsYW5fbmFtZSA9ICdbJyArIHJvdy52bGFuX25hbWUgKyAnXSdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBgJHt2YWx1ZX0gJHt2bGFuX25hbWV9YFxuICAgICAgICB9LFxuICAgICAgICBcImFkbWluX3N0YXR1c1wiOiAodmFsdWUsIHJvdykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGAke2ludGVyZmFjZV9zdGF0dXNbdmFsdWVdIHx8ICcnfWBcbiAgICAgICAgfSxcbiAgICAgICAgXCJzdGF0dXNcIjogKHZhbHVlLCByb3cpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBgJHtpbnRlcmZhY2Vfc3RhdHVzW3ZhbHVlXSB8fCAnJ31gXG4gICAgICAgIH0sXG4gICAgICAgIFwiZHVwbGV4X3N0YXR1c1wiOiAodmFsdWUsIHJvdykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGAke2R1cGxleF9zdGF0dXNbdmFsdWVdIHx8ICcnfWBcbiAgICAgICAgfSxcbiAgICAgICAgXCJudW1fbWFjc1wiOiAodmFsdWUsIHJvdykgPT4ge1xuICAgICAgICAgICAgaWYgKHZhbHVlID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2Uvc25tcF9pbnRlcmZhY2VfZGV0YWlscy5sdWE/aG9zdD0ke3Jvdy5kZXZpY2VfaXB9JnNubXBfcG9ydF9pZHg9JHtyb3cuaW50ZXJmYWNlX2lkfSZwYWdlPWxheWVyXzJgXG4gICAgICAgICAgICAgICAgcmV0dXJuIGA8YSBocmVmPSR7dXJsfT4ke3ZhbHVlfTwvYT5gXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gJydcbiAgICAgICAgfSxcbiAgICAgICAgXCJpbl9ieXRlc1wiOiAodmFsdWUsIHJvdykgPT4ge1xuICAgICAgICAgICAgaWYgKHZhbHVlID4gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXR0ZXJVdGlscy5nZXRGb3JtYXR0ZXIoXCJieXRlc1wiKSh2YWx1ZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAnJ1xuICAgICAgICB9LFxuICAgICAgICBcIm91dF9ieXRlc1wiOiAodmFsdWUsIHJvdykgPT4ge1xuICAgICAgICAgICAgaWYgKHZhbHVlID4gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXR0ZXJVdGlscy5nZXRGb3JtYXR0ZXIoXCJieXRlc1wiKSh2YWx1ZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAnJ1xuICAgICAgICB9LFxuICAgICAgICBcImluX2Vycm9yc1wiOiAodmFsdWUsIHJvdykgPT4ge1xuICAgICAgICAgICAgaWYgKHZhbHVlID4gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXR0ZXJVdGlscy5nZXRGb3JtYXR0ZXIoXCJmdWxsX251bWJlclwiKSh2YWx1ZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAnJ1xuICAgICAgICB9LFxuICAgICAgICBcImluX2Rpc2NhcmRzXCI6ICh2YWx1ZSwgcm93KSA9PiB7XG4gICAgICAgICAgICBpZiAodmFsdWUgPiAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdHRlclV0aWxzLmdldEZvcm1hdHRlcihcImZ1bGxfbnVtYmVyXCIpKHZhbHVlKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICcnXG4gICAgICAgIH0sXG4gICAgICAgIFwidGhyb3VnaHB1dFwiOiAodmFsdWUsIHJvdykgPT4ge1xuICAgICAgICAgICAgaWYgKHZhbHVlID4gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXR0ZXJVdGlscy5nZXRGb3JtYXR0ZXIoXCJicHNcIikodmFsdWUpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gJydcbiAgICAgICAgfSxcbiAgICAgICAgXCJ1cGxpbmtfc3BlZWRcIjogKHZhbHVlLCByb3cpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZvcm1hdHRlZF9zcGVlZCA9IGZvcm1hdHRlclV0aWxzLmdldEZvcm1hdHRlcihcInNwZWVkXCIpKHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiBgJHtmb3JtYXR0ZWRfc3BlZWR9IDxhIGhyZWY9JyR7Y3JlYXRlX2NvbmZpZ191cmxfbGluayhyb3csIHRydWUpfSc+PGkgY2xhc3M9XCJmYXMgZmEtY29nXCI+PC9pPjwvYT5gXG4gICAgICAgIH0sXG4gICAgICAgIFwiZG93bmxpbmtfc3BlZWRcIjogKHZhbHVlLCByb3cpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZvcm1hdHRlZF9zcGVlZCA9IGZvcm1hdHRlclV0aWxzLmdldEZvcm1hdHRlcihcInNwZWVkXCIpKHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiBgJHtmb3JtYXR0ZWRfc3BlZWR9IDxhIGhyZWY9JyR7Y3JlYXRlX2NvbmZpZ191cmxfbGluayhyb3csIHRydWUpfSc+PGkgY2xhc3M9XCJmYXMgZmEtY29nXCI+PC9pPjwvYT5gXG4gICAgICAgIH0sXG4gICAgICAgIFwibGFzdF9pbl91c2FnZVwiOiAodmFsdWUsIHJvdykgPT4ge1xuICAgICAgICAgICAgaWYgKHZhbHVlID4gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXR0ZXJVdGlscy5nZXRGb3JtYXR0ZXIoXCJwZXJjZW50YWdlXCIpKHZhbHVlKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICcnXG4gICAgICAgIH0sXG4gICAgICAgIFwibGFzdF9vdXRfdXNhZ2VcIjogKHZhbHVlLCByb3cpID0+IHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA+IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0dGVyVXRpbHMuZ2V0Rm9ybWF0dGVyKFwicGVyY2VudGFnZVwiKSh2YWx1ZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAnJ1xuICAgICAgICB9LFxuICAgICAgICBcImxhc3RfY2hhbmdlXCI6ICh2YWx1ZSwgcm93KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gcm93Lmxhc3RfY2hhbmdlX3N0cmluZ1xuICAgICAgICB9LFxuICAgIH07XG4gICAgY29sdW1ucy5mb3JFYWNoKChjKSA9PiB7XG4gICAgICAgIGMucmVuZGVyX2Z1bmMgPSBtYXBfY29sdW1uc1tjLmRhdGFfZmllbGRdO1xuICAgICAgICBpZiAoYy5pZCA9PSBcImFjdGlvbnNcIikge1xuICAgICAgICAgICAgY29uc3QgdmlzaWJsZV9kaWN0ID0ge1xuICAgICAgICAgICAgICAgIGhpc3RvcmljYWxfZGF0YTogcHJvcHMuc2hvd19oaXN0b3JpY2FsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGMuYnV0dG9uX2RlZl9hcnJheS5mb3JFYWNoKChiKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCF2aXNpYmxlX2RpY3RbYi5pZF0pIHtcbiAgICAgICAgICAgICAgICAgICAgYi5jbGFzcy5wdXNoKFwiZGlzYWJsZWRcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBjb2x1bW5zO1xufTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuZnVuY3Rpb24gc2V0X2ZpbHRlcl9hcnJheV9sYWJlbCgpIHtcbiAgICBmaWx0ZXJfdGFibGVfYXJyYXkudmFsdWUuZm9yRWFjaCgoZWwsIGluZGV4KSA9PiB7XG4gICAgICAgIGlmIChlbC5iYXNpY19sYWJlbCA9PSBudWxsKSB7XG4gICAgICAgICAgICBlbC5iYXNpY19sYWJlbCA9IGVsLmxhYmVsO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdXJsX2VudHJ5ID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoZWwuaWQpXG4gICAgICAgIGlmICh1cmxfZW50cnkgIT0gbnVsbCkge1xuICAgICAgICAgICAgZWwub3B0aW9ucy5mb3JFYWNoKChvcHRpb24pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9uLnZhbHVlLnRvU3RyaW5nKCkgPT09IHVybF9lbnRyeSkge1xuICAgICAgICAgICAgICAgICAgICBlbC5sYWJlbCA9IGAke2VsLmJhc2ljX2xhYmVsfTogJHtvcHRpb24ubGFiZWwgfHwgb3B0aW9uLnZhbHVlfWBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfSlcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuZnVuY3Rpb24gYWRkX3RhYmxlX2ZpbHRlcihvcHQsIGV2ZW50KSB7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLnNldF9rZXlfdG9fdXJsKG9wdC5rZXksIGAke29wdC52YWx1ZX1gKTtcbiAgICBzZXRfZmlsdGVyX2FycmF5X2xhYmVsKCk7XG4gICAgdGFibGVfc25tcF9pbnRlcmZhY2VzLnZhbHVlLnJlZnJlc2hfdGFibGUoKTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuY29uc3QgZ2V0X29wZW5fZmlsdGVyX3RhYmxlX2Ryb3Bkb3duID0gKGZpbHRlciwgZmlsdGVyX2luZGV4KSA9PiB7XG4gICAgcmV0dXJuIChfKSA9PiB7XG4gICAgICAgIGxvYWRfdGFibGVfZmlsdGVycyhmaWx0ZXIsIGZpbHRlcl9pbmRleCk7XG4gICAgfTtcbn07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmFzeW5jIGZ1bmN0aW9uIGxvYWRfdGFibGVfZmlsdGVycyhmaWx0ZXIsIGZpbHRlcl9pbmRleCkge1xuICAgIGZpbHRlci5zaG93X3NwaW5uZXIgPSB0cnVlO1xuICAgIGF3YWl0IG5leHRUaWNrKCk7XG4gICAgZmlsdGVyLm9wdGlvbnMgPSBmaWx0ZXJfdGFibGVfYXJyYXkudmFsdWUuZmluZCgodCkgPT4gdC5pZCA9PSBmaWx0ZXIuaWQpLm9wdGlvbnM7XG4gICAgYXdhaXQgbmV4dFRpY2soKTtcbiAgICBsZXQgZHJvcGRvd24gPSBmaWx0ZXJfdGFibGVfZHJvcGRvd25fYXJyYXkudmFsdWVbZmlsdGVyX2luZGV4XTtcbiAgICBkcm9wZG93bi5sb2FkX21lbnUoKTtcbiAgICBmaWx0ZXIuc2hvd19zcGlubmVyID0gZmFsc2U7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmFzeW5jIGZ1bmN0aW9uIGxvYWRfdGFibGVfZmlsdGVyc19hcnJheSgpIHtcbiAgICBsZXQgZXh0cmFfcGFyYW1zID0gZ2V0X2V4dHJhX3BhcmFtc19vYmooKTtcbiAgICBsZXQgdXJsX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyhleHRyYV9wYXJhbXMpO1xuICAgIGNvbnN0IHVybCA9IGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL3Jlc3QvdjIvZ2V0L3NubXAvbWV0cmljL2ludGVyZmFjZXNfZmlsdGVycy5sdWE/JHt1cmxfcGFyYW1zfWA7XG4gICAgbGV0IHJlcyA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwpO1xuICAgIHJldHVybiByZXMubWFwKCh0KSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpZDogdC5uYW1lLFxuICAgICAgICAgICAgbGFiZWw6IHQubGFiZWwsXG4gICAgICAgICAgICB0aXRsZTogdC50b29sdGlwLFxuICAgICAgICAgICAgb3B0aW9uczogdC52YWx1ZSxcbiAgICAgICAgICAgIGhpZGRlbjogKHQudmFsdWUubGVuZ3RoID09IDEpXG4gICAgICAgIH07XG4gICAgfSk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmZ1bmN0aW9uIGNvbHVtbnNfc29ydGluZyhjb2wsIHIwLCByMSkge1xuICAgIGlmIChjb2wgIT0gbnVsbCkge1xuICAgICAgICBjb25zdCByMF9jb2wgPSByMFtjb2wuZGF0YS5kYXRhX2ZpZWxkXTtcbiAgICAgICAgY29uc3QgcjFfY29sID0gcjFbY29sLmRhdGEuZGF0YV9maWVsZF07XG5cbiAgICAgICAgLyogSW4gY2FzZSB0aGUgdmFsdWVzIGFyZSB0aGUgc2FtZSwgc29ydCBieSBJUCAqL1xuICAgICAgICBpZiAocjBfY29sID09IHIxX2NvbCkge1xuICAgICAgICAgICAgcmV0dXJuIHNvcnRpbmdGdW5jdGlvbnMuc29ydEJ5TmFtZShyMC5kZXZpY2UsIHIxLmRldmljZSwgY29sID8gY29sLnNvcnQgOiBudWxsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29sLmlkID09IFwiZGV2aWNlX25hbWVcIikge1xuICAgICAgICAgICAgcmV0dXJuIHNvcnRpbmdGdW5jdGlvbnMuc29ydEJ5TmFtZShyMF9jb2wsIHIxX2NvbCwgY29sLnNvcnQpO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbC5pZCA9PSBcImlwXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBzb3J0aW5nRnVuY3Rpb25zLnNvcnRCeUlQKHIwX2NvbCwgcjFfY29sLCBjb2wuc29ydCk7XG4gICAgICAgIH0gZWxzZSBpZiAoY29sLmlkID09IFwiaW50ZXJmYWNlXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBzb3J0aW5nRnVuY3Rpb25zLnNvcnRCeU5hbWUocjBfY29sLCByMV9jb2wsIGNvbC5zb3J0KTtcbiAgICAgICAgfSBlbHNlIGlmIChjb2wuaWQgPT0gXCJ0eXBlXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBzb3J0aW5nRnVuY3Rpb25zLnNvcnRCeU5hbWUocjBfY29sLCByMV9jb2wsIGNvbC5zb3J0KTtcbiAgICAgICAgfSBlbHNlIGlmIChjb2wuaWQgPT0gXCJzcGVlZFwiKSB7XG4gICAgICAgICAgICBjb25zdCBsb3dlcl92YWx1ZSA9IC0xO1xuICAgICAgICAgICAgcmV0dXJuIHNvcnRpbmdGdW5jdGlvbnMuc29ydEJ5TnVtYmVyV2l0aE5vcm1hbGl6YXRpb25WYWx1ZShyMF9jb2wsIHIxX2NvbCwgY29sLnNvcnQsIGxvd2VyX3ZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChjb2wuaWQgPT0gXCJtaW5cIikge1xuICAgICAgICAgICAgY29uc3QgbG93ZXJfdmFsdWUgPSAtMTtcbiAgICAgICAgICAgIHJldHVybiBzb3J0aW5nRnVuY3Rpb25zLnNvcnRCeU51bWJlcldpdGhOb3JtYWxpemF0aW9uVmFsdWUocjBfY29sLCByMV9jb2wsIGNvbC5zb3J0LCBsb3dlcl92YWx1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoY29sLmlkID09IFwibWF4XCIpIHtcbiAgICAgICAgICAgIGNvbnN0IGxvd2VyX3ZhbHVlID0gLTE7XG4gICAgICAgICAgICByZXR1cm4gc29ydGluZ0Z1bmN0aW9ucy5zb3J0QnlOdW1iZXJXaXRoTm9ybWFsaXphdGlvblZhbHVlKHIwX2NvbCwgcjFfY29sLCBjb2wuc29ydCwgbG93ZXJfdmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbC5pZCA9PSBcImF2ZXJhZ2VcIikge1xuICAgICAgICAgICAgY29uc3QgbG93ZXJfdmFsdWUgPSAtMTtcbiAgICAgICAgICAgIHJldHVybiBzb3J0aW5nRnVuY3Rpb25zLnNvcnRCeU51bWJlcldpdGhOb3JtYWxpemF0aW9uVmFsdWUocjBfY29sLCByMV9jb2wsIGNvbC5zb3J0LCBsb3dlcl92YWx1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoY29sLmlkID09IFwiY29uZ2VzdGlvbl9yYXRlXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IGxvd2VyX3ZhbHVlID0gLTE7XG4gICAgICAgICAgICByZXR1cm4gc29ydGluZ0Z1bmN0aW9ucy5zb3J0QnlOdW1iZXJXaXRoTm9ybWFsaXphdGlvblZhbHVlKHIwX2NvbCwgcjFfY29sLCBjb2wuc29ydCwgbG93ZXJfdmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbC5pZCA9PSBcImxhc3RfdmFsdWVcIikge1xuICAgICAgICAgICAgY29uc3QgbG93ZXJfdmFsdWUgPSAtMTtcbiAgICAgICAgICAgIHJldHVybiBzb3J0aW5nRnVuY3Rpb25zLnNvcnRCeU51bWJlcldpdGhOb3JtYWxpemF0aW9uVmFsdWUocjBfY29sLCByMV9jb2wsIGNvbC5zb3J0LCBsb3dlcl92YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc29ydGluZ0Z1bmN0aW9ucy5zb3J0QnlOYW1lKHIwLmRldmljZSwgcjEuZGV2aWNlLCBjb2wgPyBjb2wuc29ydCA6IG51bGwpO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5jb25zdCBnZXRfZXh0cmFfcGFyYW1zX29iaiA9ICgpID0+IHtcbiAgICBsZXQgZXh0cmFfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfb2JqZWN0KCk7XG4gICAgcmV0dXJuIGV4dHJhX3BhcmFtcztcbn07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmZ1bmN0aW9uIGNyZWF0ZV9jb25maWdfdXJsX2xpbmsocm93LCBhZGRfaW50ZXJmYWNlKSB7XG4gICAgaWYgKGFkZF9pbnRlcmZhY2UpIHtcbiAgICAgICAgcmV0dXJuIGAke2h0dHBfcHJlZml4fS9sdWEvcHJvL2VudGVycHJpc2Uvc25tcF9pbnRlcmZhY2VfZGV0YWlscy5sdWE/aG9zdD0ke3Jvdy5kZXZpY2VfaXB9JnNubXBfcG9ydF9pZHg9JHtyb3cuaW50ZXJmYWNlX2lkfSZwYWdlPWNvbmZpZ2BcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9zbm1wX2ludGVyZmFjZV9kZXRhaWxzLmx1YT9ob3N0PSR7cm93LmRldmljZV9pcH0mcGFnZT1jb25maWdgXG4gICAgfVxufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5mdW5jdGlvbiBjbGlja19idXR0b25fdGltZXNlcmllcyhldmVudCkge1xuICAgIGNvbnN0IHJvdyA9IGV2ZW50LnJvdztcbiAgICBjb25zdCBlcG9jaF9iZWdpbiA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwiZXBvY2hfYmVnaW5cIik7XG4gICAgY29uc3QgZXBvY2hfZW5kID0gbnRvcG5nX3VybF9tYW5hZ2VyLmdldF91cmxfZW50cnkoXCJlcG9jaF9lbmRcIik7XG4gICAgd2luZG93Lm9wZW4oYCR7aHR0cF9wcmVmaXh9L2x1YS9wcm8vZW50ZXJwcmlzZS9zbm1wX2ludGVyZmFjZV9kZXRhaWxzLmx1YT9ob3N0PSR7cm93LmlwfSZzbm1wX3BvcnRfaWR4PSR7cm93LmlmaWR9JnBhZ2U9aGlzdG9yaWNhbCZpZmlkPS0xJmVwb2NoX2VuZD0ke2Vwb2NoX2VuZH0mZXBvY2hfYmVnaW49JHtlcG9jaF9iZWdpbn0mdGltZXNlcmllc19ncm91cHNfbW9kZT0xX2NoYXJ0X3hfbWV0cmljJnRpbWVzZXJpZXNfZ3JvdXBzPXNubXBfaW50ZXJmYWNlOy0xJTJCJHtyb3cuaXB9JTJCJHtyb3cuaWZpZH07c25tcF9pZjp1c2FnZTt1cGxpbms9dHJ1ZTpmYWxzZTpmYWxzZTpmYWxzZXxkb3dubGluaz10cnVlOmZhbHNlOmZhbHNlOmZhbHNlYCk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmZ1bmN0aW9uIGNsaWNrX2J1dHRvbl9jb25maWd1cmF0aW9uKGV2ZW50KSB7XG4gICAgY29uc3Qgcm93ID0gZXZlbnQucm93O1xuICAgIHdpbmRvdy5vcGVuKGNyZWF0ZV9jb25maWdfdXJsX2xpbmsocm93KSk7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmZ1bmN0aW9uIG9uX3RhYmxlX2N1c3RvbV9ldmVudChldmVudCkge1xuICAgIGxldCBldmVudHNfbWFuYWdlZCA9IHtcbiAgICAgICAgXCJjbGlja19idXR0b25fdGltZXNlcmllc1wiOiBjbGlja19idXR0b25fdGltZXNlcmllcyxcbiAgICAgICAgXCJjbGljZmlsdGVyX3RhYmxlX2FycmF5LnZhbHVla19idXR0b25fY29uZmlndXJhdGlvblwiOiBjbGlja19idXR0b25fY29uZmlndXJhdGlvblxuICAgIH07XG4gICAgaWYgKGV2ZW50c19tYW5hZ2VkW2V2ZW50LmV2ZW50X2lkXSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZXZlbnRzX21hbmFnZWRbZXZlbnQuZXZlbnRfaWRdKGV2ZW50KTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxub25Nb3VudGVkKGFzeW5jICgpID0+IHtcbiAgICBmaWx0ZXJfdGFibGVfYXJyYXkudmFsdWUgPSBhd2FpdCBsb2FkX3RhYmxlX2ZpbHRlcnNfYXJyYXkoKTtcbn0pO1xuXG48L3NjcmlwdD5cbiIsIjwhLS1cbiAgKEMpIDIwMTMtMjMgLSBudG9wLm9yZ1xuLS0+XG5cbjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgY29sLWxnLTEyXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZCBjYXJkLXNoYWRvd1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICAgICAgICA8VGFibGVXaXRoQ29uZmlnXG4gICAgICAgICAgICAgIHJlZj1cInRhYmxlX3RvcG9sb2d5XCJcbiAgICAgICAgICAgICAgOnRhYmxlX2lkPVwidGFibGVfaWRcIlxuICAgICAgICAgICAgICA6Y3NyZj1cImNvbnRleHQuY3NyZlwiXG4gICAgICAgICAgICAgIDpmX21hcF9jb2x1bW5zPVwibWFwX3RhYmxlX2RlZl9jb2x1bW5zXCJcbiAgICAgICAgICAgICAgOmdldF9leHRyYV9wYXJhbXNfb2JqPVwiZ2V0X2V4dHJhX3BhcmFtc19vYmpcIlxuICAgICAgICAgICAgICA6Zl9zb3J0X3Jvd3M9XCJjb2x1bW5zX3NvcnRpbmdcIlxuICAgICAgICAgICAgICBAcm93c19sb2FkZWQ9XCJvbl90YWJsZV9sb2FkZWRcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgPC9UYWJsZVdpdGhDb25maWc+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1mb290ZXJcIj5cbiAgICAgICAgICA8Tm90ZUxpc3QgOm5vdGVfbGlzdD1cIm5vdGVfbGlzdFwiPiA8L05vdGVMaXN0PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG4gIFxuPHNjcmlwdCBzZXR1cD5cbi8qIEltcG9ydHMgKi9cbmltcG9ydCB7IHJlZiB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTm90ZUxpc3QgfSBmcm9tIFwiLi9ub3RlLWxpc3QudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFRhYmxlV2l0aENvbmZpZyB9IGZyb20gXCIuL3RhYmxlLXdpdGgtY29uZmlnLnZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX3VybF9tYW5hZ2VyIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXMuanNcIjtcbmltcG9ydCB7IGNvbHVtbnNfZm9ybWF0dGVyIH0gZnJvbSBcIi4uL3V0aWxpdGllcy92c19yZXBvcnRfZm9ybWF0dGVyLmpzXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIHNvcnRpbmdGdW5jdGlvbnMgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3NvcnRpbmctdXRpbHMuanNcIjtcbmltcG9ydCBOdG9wVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9udG9wLXV0aWxzXCI7XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIENvbnN0cyAqL1xuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcblxuY29uc3Qgbm90ZV9saXN0ID0gW1xuICBfaTE4bihcInNubXAuc25tcF9ub3RlX3BlcmlvZGljX2ludGVyZmFjZXNfcG9sbGluZ1wiKSxcbiAgX2kxOG4oXCJzbm1wLnNubXBfbm90ZV90aHB0X2NhbGNcIiksXG4gIF9pMThuKFwic25tcC5zbm1wX2xsZHBfY2RwX2Rlc2NyXCIpXG5dXG5cbmNvbnN0IHRhYmxlX2lkID0gcmVmKFwidG9wb2xvZ3lcIik7XG5jb25zdCB0YWJsZV90b3BvbG9neSA9IHJlZigpO1xuY29uc3QgdG90YWxfcm93cyA9IHJlZigwKTtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gIGNvbnRleHQ6IE9iamVjdCxcbn0pO1xuY29uc3QgY29udGV4dCA9IHJlZih7XG4gIGNzcmY6IHByb3BzLmNvbnRleHQuY3NyZixcbiAgaWZpZDogcHJvcHMuY29udGV4dC5pZmlkLFxufSk7XG5cblxuXG5jb25zdCBnZXRfZXh0cmFfcGFyYW1zX29iaiA9ICgpID0+IHtcbiAgbGV0IGV4dHJhX3BhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX29iamVjdCgpO1xuICByZXR1cm4gZXh0cmFfcGFyYW1zO1xufTtcblxuXG4vKiBUaGlzIGZ1bmN0aW9uIHNpbXBseSByZXR1cm4gdGhlIGRhdGEgb2YgdGhlIGV4YWN0IGNvbHVtbiBhbmQgcm93IHJlcXVlc3RlZCAqL1xuZnVuY3Rpb24gY29sdW1uX2RhdGEoY29sLCByb3cpIHtcbiAgbGV0IGRhdGEgPSByb3dbY29sLmRhdGEuZGF0YV9maWVsZF07XG4gIGlmIChjb2wuZGF0YS5kYXRhX2ZpZWxkID09IFwicG9ydF9pZFwiKSB7XG4gICAgcmV0dXJuIE51bWJlcihkYXRhLnNwbGl0KFwiPlwiKVsxXS5zcGxpdChcIjxcIilbMF0pO1xuICB9XG4gIHJldHVybiBkYXRhO1xufVxuXG5cbi8qIEZ1bmN0aW9uIHVzZWQgdG8gc29ydCB0aGUgY29sdW1ucyBvZiB0aGUgdGFibGUgKi9cbmZ1bmN0aW9uIGNvbHVtbnNfc29ydGluZyhjb2wsIHIwLCByMSkge1xuICBpZiAoY29sICE9IG51bGwpIHtcbiAgICBsZXQgcjBfY29sID0gY29sdW1uX2RhdGEoY29sLCByMCk7XG4gICAgbGV0IHIxX2NvbCA9IGNvbHVtbl9kYXRhKGNvbCwgcjEpO1xuXG4gICAgXG4gICAgaWYgKGNvbC5pZCA9PSBcInBvcnRfaWRcIikge1xuICAgICAgcmV0dXJuIHNvcnRpbmdGdW5jdGlvbnMuc29ydEJ5TnVtYmVyKHIwX2NvbCwgcjFfY29sLCBjb2wuc29ydCk7XG4gICAgfSBlbHNlIGlmIChjb2wuaWQgPT0gXCJwb3J0X3RocHRfdmFsdWVcIikge1xuICAgICAgcmV0dXJuIHNvcnRpbmdGdW5jdGlvbnMuc29ydEJ5TnVtYmVyKHIwX2NvbCwgcjFfY29sLCBjb2wuc29ydCk7XG4gICAgfSBlbHNlIHsgIFxuICAgICAgcmV0dXJuIHNvcnRpbmdGdW5jdGlvbnMuc29ydEJ5TmFtZShyMF9jb2wsIHIxX2NvbCwgY29sLnNvcnQpO1xuICAgIH1cbiAgfVxuXG59XG5cbi8qIEdldCB0aGUgbnVtYmVyIG9mIHJvd3Mgb2YgdGhlIHRhYmxlICovXG5mdW5jdGlvbiBvbl90YWJsZV9sb2FkZWQoKSB7XG4gIHRvdGFsX3Jvd3MudmFsdWUgPSB0YWJsZV90b3BvbG9neS52YWx1ZS5nZXRfcm93c19udW0oKTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRnVuY3Rpb24gdG8gbWFwIGNvbHVtbnMgZGF0YSAqL1xuY29uc3QgbWFwX3RhYmxlX2RlZl9jb2x1bW5zID0gKGNvbHVtbnMpID0+IHtcbiAgbGV0IG1hcF9jb2x1bW5zID0ge1xuICAgIFwidXBsaW5rX3NwZWVkXCI6IChkYXRhLCByb3cpID0+IHtcbiAgICAgIHJldHVybiBOdG9wVXRpbHMuYml0c1RvU2l6ZShkYXRhKTtcbiAgICB9LFxuICAgIFwiZG93bmxpbmtfc3BlZWRcIjogKGRhdGEsIHJvdykgPT4ge1xuICAgICAgcmV0dXJuIE50b3BVdGlscy5iaXRzVG9TaXplKGRhdGEpO1xuICAgIH0sXG4gICAgXCJwb3J0X3RocHRfdmFsdWVcIjogKGRhdGEsIHJvdykgPT4ge1xuICAgICAgcmV0dXJuIE50b3BVdGlscy5iaXRzVG9TaXplKGRhdGEpO1xuICAgIH1cbiAgfTtcbiAgY29sdW1ucy5mb3JFYWNoKChjKSA9PiB7XG4gICAgYy5yZW5kZXJfZnVuYyA9IG1hcF9jb2x1bW5zW2MuZGF0YV9maWVsZF07XG4gIH0pO1xuICBcbiAgcmV0dXJuIGNvbHVtbnM7XG59O1xuXG48L3NjcmlwdD5cbiAgIiwiPCEtLSAoQykgMjAyMyBudG9wIC0tPlxuPHRlbXBsYXRlPlxuPG1vZGFsIEBzaG93ZWQ9XCJzaG93ZWQoKVwiIHJlZj1cIm1vZGFsX2lkXCI+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+XG4gICAgICB7eyB0aXRsZSB9fVxuICA8L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAgPGRpdiBzdHlsZT1cIm1pbi1oZWlnaHQ6OC41cmVtXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cblx0PGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTRcIj48Yj57e19pMThuKFwibmFtZVwiKX19OjwvYj48L2xhYmVsPlxuXHQ8ZGl2IGNsYXNzPVwiY29sLXNtLTZcIj5cblx0ICA8aW5wdXQgOnBhdHRlcm49XCJwYXR0ZXJuXCIgcGxhY2Vob2xkZXI9XCJcIiByZXF1aXJlZCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIgdi1tb2RlbD1cImZpbGVfbmFtZVwiPlxuXHQ8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L3RlbXBsYXRlPjwhLS0gbW9kYWwtYm9keSAtLT5cbiAgXG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6Zm9vdGVyPlxuICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cInN0b3JlX2ZpbGVcIiA6ZGlzYWJsZWQ9XCJkaXNhYmxlX2FkZFwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+e3tfaTE4bihcInNhdmVcIil9fTwvYnV0dG9uPlxuICA8L3RlbXBsYXRlPlxuPC9tb2RhbD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgY29tcHV0ZWQsIHdhdGNoIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBtb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuXG5jb25zdCBtb2RhbF9pZCA9IHJlZihudWxsKTtcbmNvbnN0IHNob3dlZCA9ICgpID0+IHt9O1xuY29uc3QgZmlsZV9uYW1lID0gcmVmKFwiXCIpO1xuY29uc3Qgb3JkZXJfYnkgPSByZWYoXCJkYXRlXCIpOyAvLyBuYW1lIC8gZGF0ZVxuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICBjc3JmOiBTdHJpbmcsXG4gICAgdGl0bGU6IFN0cmluZyxcbiAgICBnZXRfc3VnZ2VzdGVkX2ZpbGVfbmFtZTogRnVuY3Rpb24sXG4gICAgc3RvcmVfZmlsZTogRnVuY3Rpb24sXG4gICAgYWxsb3dfc3BhY2VzOiBCb29sZWFuXG59KTtcblxuY29uc3QgZW1pdCA9IGRlZmluZUVtaXRzKFsnZmlsZV9zdG9yZWQnXSk7XG5cbmxldCBwYXR0ZXJuID0gTnRvcFV0aWxzLlJFR0VYRVMuc2luZ2xld29yZDtcblxuY29uc3QgZGlzYWJsZV9hZGQgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgbGV0IHJnID0gbmV3IFJlZ0V4cChwYXR0ZXJuKTtcbiAgICByZXR1cm4gIXJnLnRlc3QoZmlsZV9uYW1lLnZhbHVlKTtcbn0pO1xuXG5jb25zdCBzaG93ID0gKCkgPT4ge1xuICAgIGluaXQoKTtcbiAgICBtb2RhbF9pZC52YWx1ZS5zaG93KCk7XG59O1xuXG5hc3luYyBmdW5jdGlvbiBpbml0KCkge1xuICAgIGZpbGVfbmFtZS52YWx1ZSA9IHByb3BzLmdldF9zdWdnZXN0ZWRfZmlsZV9uYW1lKCk7XG59XG5cbmNvbnN0IHN0b3JlX2ZpbGUgPSBhc3luYyAoKSA9PiB7XG4gICAgcHJvcHMuc3RvcmVfZmlsZShmaWxlX25hbWUudmFsdWUpXG4gICAgZW1pdCgnZmlsZV9zdG9yZWQnLCBmaWxlX25hbWUudmFsdWUpO1xuICAgIGNsb3NlKCk7XG59XG5cbmNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICAgIG1vZGFsX2lkLnZhbHVlLmNsb3NlKCk7XG59O1xuXG5kZWZpbmVFeHBvc2UoeyBzaG93LCBjbG9zZSB9KTtcblxub25Nb3VudGVkKCgpID0+IHtcbiAgICBpZiAocHJvcHMuYWxsb3dfc3BhY2VzKSB7XG4gICAgICAgIHBhdHRlcm4gPSBOdG9wVXRpbHMuUkVHRVhFUy5tdWx0aXdvcmQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcGF0dGVybiA9IE50b3BVdGlscy5SRUdFWEVTLnNpbmdsZXdvcmQ7XG4gICAgfVxufSk7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuaW5wdXQ6aW52YWxpZCB7XG4gIGJvcmRlci1jb2xvcjogI2ZmMDAwMDtcbn1cbi5ub3QtYWxsb3dlZCB7XG4gIGN1cnNvcjogbm90LWFsbG93ZWQ7XG59XG48L3N0eWxlPlxuIiwiPCEtLSAoQykgMjAyMyBudG9wIC0tPlxuPHRlbXBsYXRlPlxuPG1vZGFsIEBzaG93ZWQ9XCJzaG93ZWQoKVwiIHJlZj1cIm1vZGFsX2lkXCI+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+XG4gICAge3sgdGl0bGUgfX1cbiAgPC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpib2R5PlxuICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIG1zLTIgbWUtMiBtdC0zIHJvd1wiPlxuICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTRcIiA+XG4gICAgICAgIDxiPnt7IF9pMThuKFwib3JkZXJfYnlcIikgfX08L2I+XG4gICAgICA8L2xhYmVsPlxuICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS04XCI+XG4gICAgICAgIDxzZWxlY3QgY2xhc3M9XCJmb3JtLXNlbGVjdFwiIEBjaGFuZ2U9XCJzb3J0X2ZpbGVzX2J5KClcIiB2LW1vZGVsPVwib3JkZXJfYnlcIj5cbiAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwibmFtZVwiPnt7X2kxOG4oXCJuYW1lXCIpfX08L29wdGlvbj5cbiAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiZGF0ZVwiPnt7X2kxOG4oXCJkYXRlXCIpfX08L29wdGlvbj5cbiAgICAgICAgPC9zZWxlY3Q+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cbiAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00XCIgPlxuICAgICAgICA8Yj57eyBmaWxlX3RpdGxlIH19PC9iPlxuICAgICAgPC9sYWJlbD5cbiAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tOFwiPlxuICAgICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwiZmlsZV9zZWxlY3RlZFwiIDpvcHRpb25zPVwiZmlsZXNcIj5cbiAgICAgICAgPC9TZWxlY3RTZWFyY2g+ICAgICAgICBcbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgPC90ZW1wbGF0ZT48IS0tIG1vZGFsLWJvZHkgLS0+XG4gIFxuICA8dGVtcGxhdGUgdi1zbG90OmZvb3Rlcj5cbiAgICA8YnV0dG9uIEBjbGljaz1cImRlbGV0ZV9maWxlKHRydWUpXCIgdHlwZT1cImJ1dHRvblwiIHN0eWxlPVwidGV4dC1hbGlnbjogbGVmdDttYXJnaW4tbGVmdDogMHB4O1wiIGNsYXNzPVwiYnRuIGJ0bi1kYW5nZXIgc3RhcnQtMCBwb3NpdGlvbi1hYnNvbHV0ZSBtcy0zXCI+e3tfaTE4bihcImRlbGV0ZV9hbGxfZW50cmllc1wiKX19PC9idXR0b24+ICAgIFxuICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImRlbGV0ZV9maWxlXCIgOmRpc2FibGVkPVwiZGlzYWJsZV9zZWxlY3RcIiBjbGFzcz1cImJ0biBidG4tZGFuZ2VyXCI+e3tfaTE4bihcImRlbGV0ZVwiKX19PC9idXR0b24+XG4gICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwic2VsZWN0X2ZpbGVcIiA6ZGlzYWJsZWQ9XCJkaXNhYmxlX3NlbGVjdFwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+e3tfaTE4bihcIm9wZW5cIil9fTwvYnV0dG9uPlxuICA8L3RlbXBsYXRlPlxuPC9tb2RhbD5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgY29tcHV0ZWQsIHdhdGNoIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBtb2RhbCB9IGZyb20gXCIuL21vZGFsLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiO1xuXG5jb25zdCBtb2RhbF9pZCA9IHJlZihudWxsKTtcbmNvbnN0IHNob3dlZCA9ICgpID0+IHt9O1xuY29uc3QgZmlsZV9zZWxlY3RlZCA9IHJlZih7fSk7XG5jb25zdCBmaWxlX25hbWUgPSByZWYoXCJcIik7XG5jb25zdCBmaWxlcyA9IHJlZihbXSk7XG5jb25zdCBvcmRlcl9ieSA9IHJlZihcImRhdGVcIik7IC8vIG5hbWUgLyBkYXRlXG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIGNzcmY6IFN0cmluZyxcbiAgICB0aXRsZTogU3RyaW5nLFxuICAgIGZpbGVfdGl0bGU6IFN0cmluZyxcbiAgICBsaXN0X2ZpbGVzOiBGdW5jdGlvbixcbiAgICBvcGVuX2ZpbGU6IEZ1bmN0aW9uLFxuICAgIGRlbGV0ZV9maWxlOiBGdW5jdGlvbixcbn0pO1xuXG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoWydmaWxlX2RlbGV0ZWQnXSk7XG5cbmxldCBwYXR0ZXJuX3NpbmdsZXdvcmQgPSBOdG9wVXRpbHMuUkVHRVhFUy5zaW5nbGV3b3JkO1xuXG5jb25zdCBkaXNhYmxlX3NlbGVjdCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICByZXR1cm4gZmlsZV9zZWxlY3RlZC52YWx1ZSA9PSBcIlwiO1xufSk7XG5cbmNvbnN0IHNob3cgPSAoKSA9PiB7XG4gICAgaW5pdCgpO1xuICAgIG1vZGFsX2lkLnZhbHVlLnNob3coKTtcbn07XG5cbmZ1bmN0aW9uIGRpc3BsYXlfbmFtZShmaWxlKSB7XG4gICAgbGV0IHV0Y19tcyA9IGZpbGUuZXBvY2ggKiAxMDAwO1xuICAgIGxldCBkYXRlID0gbnRvcG5nX3V0aWxpdHkuZnJvbV91dGNfdG9fc2VydmVyX2RhdGVfZm9ybWF0KHV0Y19tcywgXCJERC9NTS9ZWVlZXCIpO1xuICAgIHJldHVybiBgJHtmaWxlLm5hbWV9ICgke2RhdGV9KWBcbn1cblxuZnVuY3Rpb24gc29ydF9maWxlc19ieSgpIHtcbiAgICBmaWxlcy52YWx1ZSA9IGZpbGVzLnZhbHVlLnNvcnQoKGEsIGIpID0+IHtcblx0aWYgKG9yZGVyX2J5LnZhbHVlID09IFwibmFtZVwiKSB7XG4gICAgICAgICAgICAvKiBOYW1lIGFzYyAqL1xuXHQgICAgcmV0dXJuIGEubmFtZS5sb2NhbGVDb21wYXJlKGIubmFtZSk7XG5cdH0gZWxzZSB7XG4gICAgICAgICAgICAvKiBEYXRlIGRlc2MgKGxhc3QgZmlyc3QpICovXG5cdCAgICByZXR1cm4gYi5lcG9jaCAtIGEuZXBvY2g7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoZmlsZXMudmFsdWUubGVuZ3RoID4gMCkge1xuXHRmaWxlX3NlbGVjdGVkLnZhbHVlID0gZmlsZXMudmFsdWVbMF07XG4gICAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBpbml0KCkge1xuICAgIGZpbGVfbmFtZS52YWx1ZSA9IFwiXCI7XG4gICAgZmlsZXMudmFsdWUgPSBhd2FpdCBwcm9wcy5saXN0X2ZpbGVzKCk7XG4gICAgZmlsZXMudmFsdWUuZm9yRWFjaCgoZikgPT4gZi5sYWJlbCA9IGRpc3BsYXlfbmFtZShmKSk7XG4gICAgc29ydF9maWxlc19ieSgpO1xuICAgIGlmIChmaWxlcy52YWx1ZS5sZW5ndGggPiAwKSB7XG5cdGZpbGVfc2VsZWN0ZWQudmFsdWUgPSBmaWxlcy52YWx1ZVswXTtcbiAgICB9XG59XG5cbmNvbnN0IHNlbGVjdF9maWxlID0gKCkgPT4ge1xuICAgIGNsb3NlKCk7XG4gICAgcHJvcHMub3Blbl9maWxlKGZpbGVfc2VsZWN0ZWQudmFsdWUubmFtZSk7XG59XG5cbmNvbnN0IGRlbGV0ZV9maWxlID0gYXN5bmMgKGRlbGV0ZV9hbGwpID0+IHtcbiAgICBsZXQgbmFtZSA9IGZpbGVfc2VsZWN0ZWQudmFsdWUubmFtZTtcbiAgICBpZiAoZGVsZXRlX2FsbCA9PSB0cnVlKSB7IG5hbWUgPSBcIipcIjsgfVxuICAgIGlmIChwcm9wcy5kZWxldGVfZmlsZShuYW1lKSkge1xuICAgICAgICBlbWl0KCdmaWxlX2RlbGV0ZWQnLCBuYW1lKTtcbiAgICB9XG4gICAgY2xvc2UoKTtcbn1cblxuY29uc3QgY2xvc2UgPSAoKSA9PiB7XG4gICAgbW9kYWxfaWQudmFsdWUuY2xvc2UoKTtcbn07XG5cbmRlZmluZUV4cG9zZSh7IHNob3csIGNsb3NlIH0pO1xuXG5vbk1vdW50ZWQoKCkgPT4ge1xufSk7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuaW5wdXQ6aW52YWxpZCB7XG4gIGJvcmRlci1jb2xvcjogI2ZmMDAwMDtcbn1cbi5ub3QtYWxsb3dlZCB7XG4gIGN1cnNvcjogbm90LWFsbG93ZWQ7XG59XG48L3N0eWxlPlxuIiwiPCEtLSAoQykgMjAyMyBudG9wIC0tPlxuPHRlbXBsYXRlPlxuPG1vZGFsIEBzaG93ZWQ9XCJzaG93ZWQoKVwiIHJlZj1cIm1vZGFsX2lkXCI+XG4gIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+XG4gICAgICB7eyB0aXRsZSB9fVxuICA8L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cbiAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTRcIiA+XG4gICAgICAgICAgICA8Yj57eyBmaWxlX3RpdGxlIH19PC9iPlxuICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLThcIj5cbiAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJvbl9waWNrX2ZpbGVcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPnt7X2kxOG4oXCJ1cGxvYWRcIil9fTwvYnV0dG9uPlxuICAgICAgICAgIDxzcGFuPiZuYnNwOzwvc3Bhbj5cbiAgICAgICAgICA8c21hbGwgdi1zaG93PVwiIWZpbGVfY29udGVudFwiPk5vIGZpbGUgc2VsZWN0ZWQ8L3NtYWxsPlxuICAgICAgICAgIDxzbWFsbCB2LXNob3c9XCJmaWxlX25hbWVcIj57eyBmaWxlX25hbWUgfX08L3NtYWxsPlxuICAgICAgICAgIDxpbnB1dCByZWY9XCJmaWxlX2lucHV0XCIgdHlwZT0nZmlsZScgYWNjZXB0PVwiYXBwbGljYXRpb24vSlNPTlwiIEBjaGFuZ2U9XCJvbl9maWxlX3BpY2tlZFwiIHN0eWxlPVwiZGlzcGxheTogbm9uZVwiIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gIDwvdGVtcGxhdGU+PCEtLSBtb2RhbC1ib2R5IC0tPlxuICBcbiAgPHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG4gICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwic2VsZWN0X2ZpbGVcIiA6ZGlzYWJsZWQ9XCIhZmlsZV9jb250ZW50XCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj57e19pMThuKFwib3BlblwiKX19PC9idXR0b24+XG4gIDwvdGVtcGxhdGU+XG48L21vZGFsPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBjb21wdXRlZCwgd2F0Y2ggfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIG1vZGFsIH0gZnJvbSBcIi4vbW9kYWwudnVlXCI7XG5cbmNvbnN0IG1vZGFsX2lkID0gcmVmKG51bGwpO1xuY29uc3Qgc2hvd2VkID0gKCkgPT4ge307XG5jb25zdCBmaWxlX2NvbnRlbnQgPSByZWYoXCJcIik7XG5jb25zdCBmaWxlX25hbWUgPSByZWYoXCJcIik7XG5jb25zdCBmaWxlX2lucHV0ID0gcmVmKG51bGwpO1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICBjc3JmOiBTdHJpbmcsXG4gICAgdGl0bGU6IFN0cmluZyxcbiAgICBmaWxlX3RpdGxlOiBTdHJpbmcsXG4gICAgdXBsb2FkX2ZpbGU6IEZ1bmN0aW9uLFxufSk7XG5cbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbJ2ZpbGVfdXBsb2FkZWQnXSk7XG5cbmNvbnN0IHNob3cgPSAoKSA9PiB7XG4gICAgaW5pdCgpO1xuICAgIG1vZGFsX2lkLnZhbHVlLnNob3coKTtcbn07XG5cbmFzeW5jIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgZmlsZV9uYW1lLnZhbHVlID0gXCJcIjtcbiAgICBmaWxlX2NvbnRlbnQudmFsdWUgPSBcIlwiO1xufVxuXG5mdW5jdGlvbiBvbl9waWNrX2ZpbGUgKCkge1xuICAgIGZpbGVfaW5wdXQudmFsdWUuY2xpY2soKVxufVxuXG5mdW5jdGlvbiBvbl9maWxlX3BpY2tlZCAoZXZlbnQpIHtcbiAgICBjb25zdCBmaWxlcyA9IGV2ZW50LnRhcmdldC5maWxlcztcblxuICAgIGZpbGVfbmFtZS52YWx1ZSA9IGZpbGVzWzBdLm5hbWU7XG5cbiAgICBjb25zdCBmaWxlUmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICBmaWxlUmVhZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoKSA9PiB7XG4gICAgICAgIGZpbGVfY29udGVudC52YWx1ZSA9IGZpbGVSZWFkZXIucmVzdWx0O1xuICAgIH0pXG4gICAgZmlsZVJlYWRlci5yZWFkQXNUZXh0KGZpbGVzWzBdKTtcblxuICAgIGVtaXQoJ2ZpbGVfdXBsb2FkZWQnLCBmaWxlX25hbWUudmFsdWUpO1xufVxuXG5jb25zdCBzZWxlY3RfZmlsZSA9ICgpID0+IHtcbiAgICBjbG9zZSgpO1xuICAgIHByb3BzLnVwbG9hZF9maWxlKGZpbGVfY29udGVudC52YWx1ZSk7XG59XG5cbmNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICAgIG1vZGFsX2lkLnZhbHVlLmNsb3NlKCk7XG59O1xuXG5kZWZpbmVFeHBvc2UoeyBzaG93LCBjbG9zZSB9KTtcblxub25Nb3VudGVkKCgpID0+IHtcbn0pO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbmlucHV0OmludmFsaWQge1xuICBib3JkZXItY29sb3I6ICNmZjAwMDA7XG59XG4ubm90LWFsbG93ZWQge1xuICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xufVxuPC9zdHlsZT5cbiIsIjwhLS0gKEMpIDIwMjMgbnRvcCAtLT5cbjx0ZW1wbGF0ZT5cbjxtb2RhbCBAc2hvd2VkPVwic2hvd2VkKClcIiByZWY9XCJtb2RhbF9pZFwiPlxuXHQ8dGVtcGxhdGUgdi1zbG90OnRpdGxlPlxuXHR7eyB0aXRsZSB9fVxuXHQ8L3RlbXBsYXRlPlxuXG5cdDx0ZW1wbGF0ZSB2LXNsb3Q6Ym9keT5cblx0PGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCIgc3R5bGU9XCJvdmVyZmxvdy15OiBzY3JvbGw7IGhlaWdodDogNDV2aFwiPlxuXHRcdDx0ZW1wbGF0ZSB2LWZvcj1cImMgaW4gY29tcG9uZW50c1wiPlxuXHRcdDxkaXYgY2xhc3M9XCJjYXJkIHctMTAwIHdpemFyZC1jYXJkXCIgOmNsYXNzPVwieyAnd2l6YXJkLXNlbGVjdGVkJzogc2VsZWN0ZWRfY29tcG9uZW50ID09IGMgfVwiPlxuXHRcdFx0PGEgY2xhc3M9XCJ3aXphcmQtbGlua1wiIGhyZWY9XCIjXCIgQGNsaWNrPVwic2VsZWN0ZWRfY29tcG9uZW50ID0gYzsgb25Nb2RhbENoYW5nZSgpXCI+XG5cdFx0XHRcdDxkaXYgY2xhc3M9XCJjYXJkLWJvZHlcIj5cblx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCB3aXphcmQtZm9ybS1ncm91cFwiPlxuXHRcdFx0XHRcdFx0PGg1PjxpIDpjbGFzcz1cImdldF9jb21wb25lbnRfdHlwZV9pY29uKGMuY29tcG9uZW50KVwiPjwvaT4ge3tfaTE4bihjLmkxOG5fbmFtZSl9fTwvaDU+XG5cdFx0XHRcdFx0XHQ8c21hbGwgY2xhc3M9XCJmb3JtLXRleHQgdGV4dC1tdXRlZFwiPnt7X2kxOG4oYy5pMThuX2Rlc2NyKX19PC9zbWFsbD5cblx0XHRcdFx0XHQ8L2Rpdj5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHQ8L2E+XG5cdFx0PC9kaXY+XG5cdFx0PC90ZW1wbGF0ZT5cblx0PC9kaXY+XG5cdDwvdGVtcGxhdGU+PCEtLSBtb2RhbC1ib2R5IC0tPlxuICBcblx0PHRlbXBsYXRlIHYtc2xvdDpmb290ZXI+XG5cdDwvdGVtcGxhdGU+XG48L21vZGFsPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBjb21wdXRlZCwgd2F0Y2ggfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIG1vZGFsIH0gZnJvbSBcIi4vbW9kYWwudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFNlbGVjdFNlYXJjaCB9IGZyb20gXCIuL3NlbGVjdC1zZWFyY2gudnVlXCI7XG5cbmNvbnN0IG1vZGFsX2lkID0gcmVmKG51bGwpO1xuY29uc3Qgc2hvd2VkID0gKCkgPT4ge307XG5jb25zdCBzZWxlY3RlZF9jb21wb25lbnQgPSByZWYoe30pO1xuY29uc3QgY29tcG9uZW50cyA9IHJlZihbXSk7XG5jb25zdCBvcmRlcl9ieSA9IHJlZihcImRhdGVcIik7IC8vIG5hbWUgLyBkYXRlXG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIGNzcmY6IFN0cmluZyxcbiAgICB0aXRsZTogU3RyaW5nLFxuICAgIGxpc3RfY29tcG9uZW50czogRnVuY3Rpb24sXG4gICAgYWRkX2NvbXBvbmVudDogRnVuY3Rpb25cbn0pO1xuXG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoW10pO1xuXG5jb25zdCBzaG93ID0gKCkgPT4ge1xuICAgIGluaXQoKTtcbiAgICBtb2RhbF9pZC52YWx1ZS5zaG93KCk7XG59O1xuXG5hc3luYyBmdW5jdGlvbiBpbml0KCkge1xuICAgIGNvbXBvbmVudHMudmFsdWUgPSBhd2FpdCBwcm9wcy5saXN0X2NvbXBvbmVudHMoKTtcbiAgICBpZiAoY29tcG9uZW50cy52YWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHNlbGVjdGVkX2NvbXBvbmVudC52YWx1ZSA9IGNvbXBvbmVudHMudmFsdWVbMF07XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnZXRfY29tcG9uZW50X3R5cGVfaWNvbihjb21wb25lbnRfdHlwZSkge1xuICAgIHN3aXRjaCAoY29tcG9uZW50X3R5cGUpIHtcbiAgICAgIGNhc2UgJ3BpZSc6XG4gICAgICAgIHJldHVybiBcImZhLXNvbGlkIGZhLWNoYXJ0LXBpZVwiO1xuICAgICAgY2FzZSAndGFibGUnOlxuICAgICAgICByZXR1cm4gXCJmYS1zb2xpZCBmYS10YWJsZVwiO1xuICAgICAgY2FzZSAndGltZXNlcmllcyc6XG4gICAgICAgIHJldHVybiBcImZhLXNvbGlkIGZhLWNoYXJ0LWxpbmVcIjtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gb25Nb2RhbENoYW5nZShlKSB7XG4gICAgY2xvc2UoKTtcbiAgICBwcm9wcy5hZGRfY29tcG9uZW50KHNlbGVjdGVkX2NvbXBvbmVudC52YWx1ZSk7XG59XG5cbmNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICAgIG1vZGFsX2lkLnZhbHVlLmNsb3NlKCk7XG59O1xuXG5kZWZpbmVFeHBvc2UoeyBzaG93LCBjbG9zZSB9KTtcblxub25Nb3VudGVkKCgpID0+IHtcbn0pO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbmlucHV0OmludmFsaWQge1xuICBib3JkZXItY29sb3I6ICNmZjAwMDA7XG59XG4ubm90LWFsbG93ZWQge1xuICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xufVxuPC9zdHlsZT5cbiIsIjwhLS0gKEMpIDIwMjMgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG4gICAgPG1vZGFsIHJlZj1cIm1vZGFsX2lkXCI+XG4gICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6dGl0bGU+e3sgdGl0bGUgfX08L3RlbXBsYXRlPlxuICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmJvZHk+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIDwhLS0gVGl0bGUgLS0+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cbiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtc20tMiBtdC0yXCI+XG4gICAgICAgICAgICAgICAgICAgIDxiPnt7IF9pMThuKFwiZGFzaGJvYXJkLmNvbXBvbmVudF90aXRsZVwiKSB9fTwvYj5cbiAgICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tMTBcIj5cbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHYtbW9kZWw9XCJjb21wb25lbnRfdGl0bGVcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIHR5cGU9XCJ0ZXh0XCIgcmVxdWlyZWQgLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8IS0tIFdpZHRoIC0tPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTQgcm93XCI+XG4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLXNtLTIgbXQtM1wiPlxuICAgICAgICAgICAgICAgICAgICA8Yj57eyBfaTE4bihcImRhc2hib2FyZC5jb21wb25lbnRfd2lkdGhcIikgfX08L2I+XG4gICAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTYgbXQtMlwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicmFuZ2VcIj5cbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYW5nZVwiIGlkPVwic2xpZGVyXCIgdi1tb2RlbD1cIndpZHRoX3NlbGVjdGVkXCIgc3R5bGU9XCJ3aWR0aDoxMDAlXCIgbWluPVwiMVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXg9XCIzXCIgc3RlcD1cIjFcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNsaWRlcnRpY2tzXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cD57eyBfaTE4bihcImRhc2hib2FyZC5jb21wb25lbnRfc2l6ZXMuc21hbGxcIikgfX08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cD57eyBfaTE4bihcImRhc2hib2FyZC5jb21wb25lbnRfc2l6ZXMubWVkaXVtXCIpIH19PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+e3sgX2kxOG4oXCJkYXNoYm9hcmQuY29tcG9uZW50X3NpemVzLmxhcmdlXCIpIH19PC9wPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIDwhLS0gSGVpZ2h0IC0tPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCI+XG4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLXNtLTIgbXQtMlwiPlxuICAgICAgICAgICAgICAgICAgICA8Yj57eyBfaTE4bihcImRhc2hib2FyZC5jb21wb25lbnRfaGVpZ2h0XCIpIH19PC9iPlxuICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS05IG10LTJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJhbmdlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInJhbmdlXCIgaWQ9XCJzbGlkZXJcIiB2LW1vZGVsPVwiaGVpZ2h0X3NlbGVjdGVkXCIgc3R5bGU9XCJ3aWR0aDoxMDAlXCIgbWluPVwiMVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4PVwiNFwiIHN0ZXA9XCIxXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2xpZGVydGlja3NcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57eyBfaTE4bihcImRhc2hib2FyZC5jb21wb25lbnRfc2l6ZXMuc21hbGxcIikgfX08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+e3sgX2kxOG4oXCJkYXNoYm9hcmQuY29tcG9uZW50X3NpemVzLm1lZGl1bVwiKSB9fTwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57eyBfaTE4bihcImRhc2hib2FyZC5jb21wb25lbnRfc2l6ZXMubGFyZ2VcIikgfX08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+e3sgX2kxOG4oXCJkYXNoYm9hcmQuY29tcG9uZW50X3NpemVzLmF1dG9cIikgfX08L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPCEtLSBUaW1lIFdpbmRvdyAtLT5cbiAgICAgICAgICAgIDxkaXYgdi1pZj1cIiFoaWRkZW5PblJlcG9ydFwiIGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cbiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtc20tMiBtdC0yXCI+XG4gICAgICAgICAgICAgICAgICAgIDxiPnt7IF9pMThuKFwiZGFzaGJvYXJkLnRpbWVfd2luZG93XCIpIH19PC9iPlxuICAgICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS01XCI+XG5cbiAgICAgICAgICAgICAgICAgICAgPFNlbGVjdFNlYXJjaCB2LW1vZGVsOnNlbGVjdGVkX29wdGlvbj1cInNlbGVjdGVkX3RpbWVfd2luZG93XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIDpvcHRpb25zPVwidGltZV93aW5kb3dfbGlzdFwiPlxuICAgICAgICAgICAgICAgICAgICA8L1NlbGVjdFNlYXJjaD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8IS0tIFRpbWUgT2Zmc2V0IC0tPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgbXMtMiBtZS0yIG10LTMgcm93XCI+XG4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLXNtLTIgbXQtMlwiPlxuICAgICAgICAgICAgICAgICAgICA8Yj57eyBfaTE4bihcImRhc2hib2FyZC50aW1lX29mZnNldFwiKSB9fTwvYj5cbiAgICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tNVwiPlxuICAgICAgICAgICAgICAgICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfdGltZV9vZmZzZXRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgOm9wdGlvbnM9XCJ0aW1lX29mZnNldF9saXN0XCI+XG4gICAgICAgICAgICAgICAgICAgIDwvU2VsZWN0U2VhcmNoPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDwhLS0gQWR2YW5jZWQgU2V0dGluZ3MgLS0+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibXMtMiBtYi0zIG10LTQgcm93XCI+XG4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTMgcGUtMFwiIGlkPVwiYWR2YW5jZWQtdmlld1wiPlxuICAgICAgICAgICAgICAgICAgICA8Yj57eyBfaTE4bihcImRhc2hib2FyZC5hZHZhbmNlZF9zZXR0aW5nc1wiKSB9fTwvYj5cbiAgICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tMiBwcy0wXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWNoZWNrIGZvcm0tc3dpdGNoIG10LTJcIiBpZD1cImFkdmFuY2VkLXZpZXdcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBuYW1lPVwic2hvd19hZHZhbmNlZF9zZXR0aW5nc1wiICBjbGFzcz1cImZvcm0tY2hlY2staW5wdXRcIiB0eXBlPVwiY2hlY2tib3hcIiBAaW5wdXQ9XCJ1cGRhdGVBZHZhbmNlZFNldHRpbmdzVmlld1wiIHJvbGU9XCJzd2l0Y2hcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8IS0tIFJFU1QgUGFyYW1zIC0tPlxuICAgICAgICAgICAgPGRpdiB2LWlmPVwic2hvd19hZHZhbmNlZF9zZXR0aW5nc1wiIGNsYXNzPVwiZm9ybS1ncm91cCBtcy0yIG1lLTIgbXQtMyByb3dcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTEyXCI+XG4gICAgICAgICAgICAgICAgICAgIDxwIHYtaWY9XCJpc05vdEpzb25QYXJhbXNWYWxpZFwiIHN0eWxlPVwiY29sb3I6cmdiYSgyNTUsIDAsIDAsIDAuNzk3KVwiPiB7e19pMThuKFwiZGFzaGJvYXJkLmNvbXBvbmVudF9qc29uX2Vycm9yXCIpfX0gPC9wPlxuICAgICAgICAgICAgICAgICAgICA8dGV4dGFyZWEgY2xhc3M9XCJoaWdobGlnaHRlZC1qc29uXCIgdi1tb2RlbD1cInBhcmFtc19qc29uX2RhdGFcIiBAZm9jdXNvdXQ9XCJmb3JtYXRKc29uXCIgc3R5bGU9XCJ3aWR0aDoxMDAlOyBoZWlnaHQ6MTAwJTtcIiByb3dzPVwiMTZcIiBjb2xzPVwiMTBcIiBcbiAgICAgICAgICAgICAgICAgICAgPjwvdGV4dGFyZWE+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmZvb3Rlcj5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiZWRpdF9cIiA6ZGlzYWJsZWQ9XCJpc05vdEpzb25QYXJhbXNWYWxpZFwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+XG4gICAgICAgICAgICAgICAgICAgIHt7IF9pMThuKFwiYXBwbHlcIikgfX1cbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L3RlbXBsYXRlPlxuICAgIDwvbW9kYWw+XG48L3RlbXBsYXRlPlxuICBcbjxzY3JpcHQgc2V0dXA+XG5cbi8qIEltcG9ydHMgKi9cbmltcG9ydCB7IHJlZiB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgbW9kYWwgfSBmcm9tIFwiLi9tb2RhbC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0U2VhcmNoIH0gZnJvbSBcIi4vc2VsZWN0LXNlYXJjaC52dWVcIjsgIFxuaW1wb3J0IGRhdGFVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL2RhdGEtdXRpbHNcIjtcbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRnVuY3Rpb24gdG8gcmV0cmlldmUgdGhlIGxvY2FsIHdvcmQgKi9cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbi8qIEV2ZW50cyBFbWl0dGVkICovXG5jb25zdCBlbWl0ID0gZGVmaW5lRW1pdHMoW1wiZWRpdFwiXSk7XG5cbi8qIE1vZGFsIFByb3BlcnRpZXMgKi9cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIGNzcmY6IFN0cmluZyxcbn0pO1xuXG4vKiBDb25zdHMgKi9cbmNvbnN0IHRpdGxlID0gcmVmKGkxOG4oXCJkYXNoYm9hcmQuZWRpdF9jb21wb25lbnRcIikpO1xuY29uc3QgbW9kYWxfaWQgPSByZWYobnVsbCk7XG5jb25zdCBzbGlkZXJfdmFsdWVzID0gW1xuICAgIHsgaWQ6IDEsIHNpemVfY29tcG9uZW50X3ZhbHVlOiA0ICB9LFxuICAgIHsgaWQ6IDIsIHNpemVfY29tcG9uZW50X3ZhbHVlOiA2ICB9LFxuICAgIHsgaWQ6IDMsIHNpemVfY29tcG9uZW50X3ZhbHVlOiAxMiB9LFxuICAgIHsgaWQ6IDQsIHNpemVfY29tcG9uZW50X3ZhbHVlOiAtMSB9XG5dO1xuXG4vKiBUaW1lIFdpbmRvdyBvcHRpb25zICovXG5jb25zdCB0aW1lX3dpbmRvd19saXN0ID0gcmVmKFtcbiAgICB7IHZhbHVlOidjdXJyZW50JywgbGFiZWw6IF9pMThuKFwiZGFzaGJvYXJkLmN1cnJlbnRfdGltZVwiKSwgZGVmYXVsdDogdHJ1ZSB9LCAgICBcbiAgICB7IHZhbHVlOic1X21pbicsIGxhYmVsOiBfaTE4bihcImRhc2hib2FyZC50aW1lX3dpbmRvd19saXN0LjVfbWluXCIpICB9LFxuICAgIHsgdmFsdWU6JzMwX21pbicsIGxhYmVsOiBfaTE4bihcImRhc2hib2FyZC50aW1lX3dpbmRvd19saXN0LjMwX21pblwiKSB9LFxuICAgIHsgdmFsdWU6J2hvdXInLCBsYWJlbDogX2kxOG4oXCJkYXNoYm9hcmQudGltZV93aW5kb3dfbGlzdC5ob3VyXCIpIH0sXG4gICAgeyB2YWx1ZTonMl9ob3VycycsIGxhYmVsOiBfaTE4bihcImRhc2hib2FyZC50aW1lX3dpbmRvd19saXN0LjJfaG91cnNcIikgfSxcbiAgICB7IHZhbHVlOicxMl9ob3VycycsIGxhYmVsOiBfaTE4bihcImRhc2hib2FyZC50aW1lX3dpbmRvd19saXN0LjEyX2hvdXJzXCIpIH0sXG4gICAgeyB2YWx1ZTonZGF5JywgbGFiZWw6IF9pMThuKFwiZGFzaGJvYXJkLnRpbWVfd2luZG93X2xpc3QuZGF5XCIpIH0sXG4gICAgeyB2YWx1ZTond2VlaycsIGxhYmVsOiBfaTE4bihcImRhc2hib2FyZC50aW1lX3dpbmRvd19saXN0LndlZWtcIikgfSxcbiAgICB7IHZhbHVlOidtb250aCcsIGxhYmVsOiBfaTE4bihcImRhc2hib2FyZC50aW1lX3dpbmRvd19saXN0Lm1vbnRoXCIpIH0sXG4gICAgeyB2YWx1ZToneWVhcicsIGxhYmVsOiBfaTE4bihcImRhc2hib2FyZC50aW1lX3dpbmRvd19saXN0LnllYXJcIikgfSxcbl0pO1xuXG4vKiBUaW1lIE9mZnNldCBvcHRpb25zICovXG5jb25zdCB0aW1lX29mZnNldF9saXN0ID0gcmVmKFtcbiAgICB7IHZhbHVlOidjdXJyZW50JywgbGFiZWw6IF9pMThuKFwiZGFzaGJvYXJkLmN1cnJlbnRfdGltZVwiKSwgZGVmYXVsdDogdHJ1ZSB9LCBcbiAgICB7IHZhbHVlOidob3VyJywgbGFiZWw6IF9pMThuKFwiZGFzaGJvYXJkLnRpbWVfb2Zmc2V0X2xpc3QuaG91clwiKSB9LFxuICAgIHsgdmFsdWU6J2RheScsIGxhYmVsOiBfaTE4bihcImRhc2hib2FyZC50aW1lX29mZnNldF9saXN0LmRheVwiKSB9LFxuICAgIHsgdmFsdWU6J3dlZWsnLCBsYWJlbDogX2kxOG4oXCJkYXNoYm9hcmQudGltZV9vZmZzZXRfbGlzdC53ZWVrXCIpIH0sXG4gICAgeyB2YWx1ZTonbW9udGgnLCBsYWJlbDogX2kxOG4oXCJkYXNoYm9hcmQudGltZV9vZmZzZXRfbGlzdC5tb250aFwiKSB9LFxuICAgIHsgdmFsdWU6J3llYXInLCBsYWJlbDogX2kxOG4oXCJkYXNoYm9hcmQudGltZV9vZmZzZXRfbGlzdC55ZWFyXCIpIH0sXG5dKTtcblxuLyogTW9kYWwgUmVmIENvbnN0cyAqL1xuY29uc3Qgb2xkX2NvbXBvbmVudF90b19lZGl0ID0gcmVmKG51bGwpO1xuY29uc3QgY29tcG9uZW50X3RpdGxlID0gcmVmKG51bGwpO1xuY29uc3Qgd2lkdGhfc2VsZWN0ZWQgPSByZWYobnVsbCk7XG5jb25zdCBoZWlnaHRfc2VsZWN0ZWQgPSByZWYobnVsbCk7XG5jb25zdCBwYXJhbXNfanNvbl9kYXRhID0gcmVmKG51bGwpO1xuY29uc3Qgc2VsZWN0ZWRfdGltZV93aW5kb3cgPSByZWYobnVsbCk7XG5jb25zdCBzZWxlY3RlZF90aW1lX29mZnNldCA9IHJlZihudWxsKTtcbmNvbnN0IHNob3dfYWR2YW5jZWRfc2V0dGluZ3MgPSByZWYoZmFsc2UpOyAvLyBib29sIHVzZWQgdG8gZW5hYmxlIHRoZSBhZHZhbmNlZCB2aWV3XG5jb25zdCBpc05vdEpzb25QYXJhbXNWYWxpZCA9IHJlZihmYWxzZSk7IC8vIGJvb2wgdXNlZCB0byB2YWxpZGF0ZSB0aGUgUkVTVCBQYXJhbXMgaW4gdGV4dGFyZWFcbmNvbnN0IGhpZGRlbk9uUmVwb3J0ID0gcmVmKGZhbHNlKTsgLy8gYm9vbCB1c2VkIHRvIGhpZGUgdGltZV93aW5kb3cgd2hlbiB0aGUgcGFnZSBpcyByZXBvcnRcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKipcbiAqIFxuICogQGJyaWVmIFRoaXMgbWV0aG9kIGNoYW5nZSB0aGUgdmFsdWUgb2YgdGhlIHNob3dfYWR2YW5jZWRfc2V0dGluZ3NcbiAqICAgICAgICBpbiBvcmRlciB0byBlbmFibGUgdGhlIGFkdmFuY2VkIHZpZXcgb3IgZGlzYWJsZSBpdC5cbiAqL1xuY29uc3QgdXBkYXRlQWR2YW5jZWRTZXR0aW5nc1ZpZXcgPSBmdW5jdGlvbigpIHtcbiAgICBzaG93X2FkdmFuY2VkX3NldHRpbmdzLnZhbHVlID0gIXNob3dfYWR2YW5jZWRfc2V0dGluZ3MudmFsdWU7XG59XG5cbi8qKlxuICogXG4gKiBAYnJpZWYgVGhpcyBtZXRob2QgY2hhbmdlcyB0aGUgdmFsdWUgb2YgdGhlIHNob3dfYWR2YW5jZWRfc2V0dGluZ3MgXG4gKiAgICAgICAgYm9vbGVhbiB0byBlbmFibGUgb3IgZGlzYWJsZSB0aGUgYWR2YW5jZWQgdmlldy5cbiAqL1xuY29uc3QgZm9ybWF0SnNvbiA9IGZ1bmN0aW9uKCkge1xuICAgIFxuICAgIGlzTm90SnNvblBhcmFtc1ZhbGlkLnZhbHVlID0gZmFsc2U7XG4gICAgdHJ5IHtcbiAgICAgICAgcGFyYW1zX2pzb25fZGF0YS52YWx1ZSA9IEpTT04uc3RyaW5naWZ5KEpTT04ucGFyc2UocGFyYW1zX2pzb25fZGF0YS52YWx1ZSksIG51bGwsIDIpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaXNOb3RKc29uUGFyYW1zVmFsaWQudmFsdWUgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gcGFyYW1zX2pzb25fZGF0YS52YWx1ZTtcbn07XG5cbi8qKlxuICogXG4gKiBAYnJpZWYgVGhpcyBtZXRob2Qgc2VsZWN0cyBmcm9tIHRoZSB0aW1lX2FycmF5IFxuICogICAgICAgIChlaXRoZXIgdGltZV9vZmZzZXRfbGlzdCBvciB0aW1lX3dpbmRvd19saXN0KSBcbiAqICAgICAgICB0aGUgb2JqZWN0IHdpdGggYSB2YWx1ZSBlcXVhbCB0byB0aW1lX3ZhbHVlICh0aGUgb2xkIHZhbHVlcykuIFxuICogICAgICAgIEluIGNhc2UgdGltZV92YWx1ZSBpcyBlbXB0eSBvciBudWxsLCBcbiAqICAgICAgICB0aGUgbWV0aG9kIHJldHVybnMgdGhlIGRlZmF1bHQgb2JqZWN0ICgnQ3VycmVudCcpLlxuICogQHBhcmFtIHRpbWVfdmFsdWUgVGhlIHRpbWUgdmFsdWUgKDVfbWluLCBob3VyLCAuLi4pIHRvIHNlYXJjaCBmb3JcbiAqIEBwYXJhbSB0aW1lX2FycmF5IFRoZSBhcnJheSBvZiB0aW1lIG9iamVjdHMgXG4gKiAgICAgICAgICAgICAgICAgICAoZWl0aGVyIGZyb20gdGltZV9vZmZzZXRfbGlzdCBvciB0aW1lX3dpbmRvd19saXN0KS5cbiAqL1xuY29uc3QgZmluZF90aW1lX29iamVjdCA9IGZ1bmN0aW9uKHRpbWVfdmFsdWUsIHRpbWVfYXJyYXkpIHtcbiAgICBpZiAoZGF0YVV0aWxzLmlzRW1wdHlPck51bGwodGltZV92YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHRpbWVfYXJyYXkuZmluZCgodCkgPT4gdC5kZWZhdWx0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGltZV9hcnJheS5maW5kKCh0KSA9PiB0LnZhbHVlID09IHRpbWVfdmFsdWUpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBcbiAqICBAYnJpZWYgVGhpcyBtZXRob2QgaXMgY2FsbGVkIHRvIHJlc2V0IHRoZSBtb2RhbCByZWYgY29uc3RhbnRzLlxuICogICovIFxuY29uc3QgcmVzZXRfbW9kYWxfZm9ybSA9IGZ1bmN0aW9uIChoaWRkZW4pIHtcbiAgICBvbGRfY29tcG9uZW50X3RvX2VkaXQudmFsdWUgPSBudWxsO1xuICAgIGlzTm90SnNvblBhcmFtc1ZhbGlkLnZhbHVlID0gZmFsc2U7XG4gICAgaGlkZGVuT25SZXBvcnQudmFsdWUgPSBoaWRkZW47XG4gICAgY29tcG9uZW50X3RpdGxlLnZhbHVlID0gXCJcIjtcbiAgICBoZWlnaHRfc2VsZWN0ZWQudmFsdWUgPSAxO1xuICAgIHdpZHRoX3NlbGVjdGVkLnZhbHVlID0gMTtcbn07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyoqXG4gKiBcbiAqICBAYnJpZWYgVGhpcyBtZXRob2QgaXMgY2FsbGVkIHRvIHNldCB0aGUgb2xkIGRhdGEgb2YgdGhlIHNlbGVjdGVkIGNvbXBvbmVudCBcbiAqICAgICAgICAgZm9yIGVkaXRpbmcuXG4gKiAgQHBhcmFtIG9sZF9jb21wb25lbnRfdG9fZWRpdCBzZWxlY3RlZCBjb21wb25lbnQgdG8gZWRpdFxuICogICovIFxuY29uc3Qgc2V0X29sZF9jb21wb25lbnRfdmFsdWVzID0gKG9sZF9jb21wb25lbnQpID0+IHtcbiAgICBvbGRfY29tcG9uZW50X3RvX2VkaXQudmFsdWUgPSBvbGRfY29tcG9uZW50O1xuXG4gICAgY29tcG9uZW50X3RpdGxlLnZhbHVlID0gb2xkX2NvbXBvbmVudC5jdXN0b21fbmFtZTtcbiAgICB3aWR0aF9zZWxlY3RlZC52YWx1ZSA9IGNvbnZlcnRfc2l6ZV90b19zbGlkZXJfdmFsdWUob2xkX2NvbXBvbmVudC53aWR0aCk7XG4gICAgaGVpZ2h0X3NlbGVjdGVkLnZhbHVlID0gY29udmVydF9zaXplX3RvX3NsaWRlcl92YWx1ZShvbGRfY29tcG9uZW50LmhlaWdodCk7XG4gICAgXG4gICAgc2VsZWN0ZWRfdGltZV93aW5kb3cudmFsdWUgPSBmaW5kX3RpbWVfb2JqZWN0KG9sZF9jb21wb25lbnQudGltZV93aW5kb3csdGltZV93aW5kb3dfbGlzdC52YWx1ZSk7XG4gICAgc2VsZWN0ZWRfdGltZV9vZmZzZXQudmFsdWUgPSBmaW5kX3RpbWVfb2JqZWN0KG9sZF9jb21wb25lbnQudGltZV9vZmZzZXQsIHRpbWVfb2Zmc2V0X2xpc3QudmFsdWUpO1xuXG4gICAgcGFyYW1zX2pzb25fZGF0YS52YWx1ZSA9IEpTT04uc3RyaW5naWZ5KG9sZF9jb21wb25lbnQucGFyYW1zLCBudWxsLCAyKTtcbn07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyoqXG4gKiBcbiAqICBAYnJpZWYgVGhpcyBtZXRob2QgaXMgY2FsbGVkIHdoZW5ldmVyIHRoZSBtb2RhbCBpcyBvcGVuZWQgXG4gKiAgQHBhcmFtIG9sZF9jb21wb25lbnRfdG9fZWRpdCBzZWxlY3RlZCBjb21wb25lbnQgdG8gZWRpdFxuICogICovIFxuY29uc3Qgc2hvdyA9IChvbGRfY29tcG9uZW50X3RvX2VkaXQsIGhpZGRlbk9uUmVwb3J0KSA9PiB7XG4gICAgLyogRmlyc3Qgb2YgYWxsIHJlc2V0IGFsbCB0aGUgZGF0YSAqL1xuICAgIHJlc2V0X21vZGFsX2Zvcm0oaGlkZGVuT25SZXBvcnQpO1xuICAgIC8qIFNldCB0aGUgb2xkIGRhdGEgb2YgdGhlIGNvbXBvbmVudCAqL1xuICAgIHNldF9vbGRfY29tcG9uZW50X3ZhbHVlcyhvbGRfY29tcG9uZW50X3RvX2VkaXQpO1xuICAgIG1vZGFsX2lkLnZhbHVlLnNob3coKTtcbn07XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyoqXG4gKiBcbiAqICBAYnJpZWYgQ29udmVydCBhIHNsaWRlciB2YWx1ZSAgICAgICAgICAgKDEgKFNtYWxsKSwgMiAoTWVkaXVtKSwgMyAoTGFyZ2UpLCAgIDQgKEF1dG8pKSBcbiAqICAgICAgICAgICAgICAgICB0byBjb21wb25lbnQgc2l6ZSB2YWx1ZSAgKDQgKFNtYWxsKSwgNiAoTWVkaXVtKSwgMTIgKExhcmdlKSwgLTEgKEF1dG8pKVxuICogIEBwYXJhbSBzX3Ygc2xpZGVyIHZhbHVlIFxuICogICovIFxuY29uc3QgY29udmVydF9zbGlkZXJfdmFsdWVfdG9fc2l6ZSA9IChzX3YpID0+IHtcbiAgICByZXR1cm4gc2xpZGVyX3ZhbHVlcy5maW5kKChjKSA9PiBjLmlkID09IE51bWJlcihzX3YpKS5zaXplX2NvbXBvbmVudF92YWx1ZTtcbn0gXG5cbi8qKlxuICogXG4gKiAgQGJyaWVmIENvbnZlcnQgYSBjb21wb25lbnQgc2l6ZSB2YWx1ZSAoNCAoU21hbGwpLCA2IChNZWRpdW0pLCAxMiAoTGFyZ2UpLCAtMShBdXRvKSlcbiAqICAgICAgICAgdG8gc2xpZGVyIHZhbHVlICAgICAgICAgICAgICAgICgxIChTbWFsbCksIDIgKE1lZGl1bSksIDMgKExhcmdlKSwgIDQgKEF1dG8pKSAgXG4gKiAgQHBhcmFtIHNpemUgY29tcG9uZW50IHNpemUgdmFsdWUgXG4gKiAgKi8gXG5jb25zdCBjb252ZXJ0X3NpemVfdG9fc2xpZGVyX3ZhbHVlID0gKHNpemUpID0+IHtcbiAgICByZXR1cm4gc2xpZGVyX3ZhbHVlcy5maW5kKChjKSA9PiBjLnNpemVfY29tcG9uZW50X3ZhbHVlID09IE51bWJlcihzaXplKSkuaWQ7XG59IFxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qKlxuICogXG4gKiAgQGJyaWVmIEZ1bmN0aW9uIGNhbGxlZCB3aGVuIHRoZSAnQXBwbHknIGJ1dHRvbiBpcyBjbGlja2VkIFxuICogICAgICAgICB0byBlbWl0IGFuICdlZGl0JyBldmVudCBhbmQgY2xvc2UgdGhlIG1vZGFsLlxuICogICovIFxuY29uc3QgZWRpdF8gPSAoKSA9PiB7XG4gICAgY29uc3QgbmV3X3dpZHRoICAgICA9IGNvbnZlcnRfc2xpZGVyX3ZhbHVlX3RvX3NpemUod2lkdGhfc2VsZWN0ZWQudmFsdWUpO1xuICAgIGNvbnN0IG5ld19oZWlnaHQgICAgPSBjb252ZXJ0X3NsaWRlcl92YWx1ZV90b19zaXplKGhlaWdodF9zZWxlY3RlZC52YWx1ZSk7XG4gICAgY29uc3QgbmV3X3BhcmFtcyAgICA9IGAke3BhcmFtc19qc29uX2RhdGEudmFsdWV9YDtcblxuICAgIGVtaXQoXCJlZGl0XCIsIHtcbiAgICAgICAgaWQ6IG9sZF9jb21wb25lbnRfdG9fZWRpdC52YWx1ZS5pZCxcbiAgICAgICAgdGl0bGU6IGNvbXBvbmVudF90aXRsZS52YWx1ZSxcbiAgICAgICAgaGVpZ2h0OiBuZXdfaGVpZ2h0LFxuICAgICAgICB3aWR0aDogbmV3X3dpZHRoLFxuICAgICAgICB0aW1lX29mZnNldDogc2VsZWN0ZWRfdGltZV9vZmZzZXQudmFsdWUudmFsdWUsXG4gICAgICAgIHRpbWVfd2luZG93OiBzZWxlY3RlZF90aW1lX3dpbmRvdy52YWx1ZS52YWx1ZSxcbiAgICAgICAgcmVzdF9wYXJhbXM6IG5ld19wYXJhbXNcbiAgICB9KTtcbiAgICBtb2RhbF9pZC52YWx1ZS5jbG9zZSgpO1xufTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5kZWZpbmVFeHBvc2UoeyBzaG93IH0pO1xuPC9zY3JpcHQ+XG4gICIsIjwhLS1cbiAgKEMpIDIwMTMtMjIgLSBudG9wLm9yZ1xubnRvcG5nX3V0aWxpdHkuZnJvbV91dGNfdG9fc2VydmVyX2RhdGVfZm9ybWF0KGVwb2NoX2JlZ2luICogMTAwMCwgJ0REL01NL1lZWVkgSEg6bW0nKSArICcgLSAnICsgbnRvcG5nX3V0aWxpdHkuZnJvbV91dGNfdG9fc2VydmVyX2RhdGVfZm9ybWF0KGVwb2NoX2VuZCAqIDEwMDAsICdERC9NTS9ZWVlZIEhIOm1tJylcbi0tPlxuPHRlbXBsYXRlPlxuICA8ZGl2IDpjbGFzcz1cIndpZHRoX2NsYXNzXCIgY2xhc3M9XCJ3aWRnZXQtYm94LW1haW4tZGFzaGJvYXJkXCI+XG4gICAgPGRpdiA6Y2xhc3M9XCJoZWlnaHRfY2xhc3NcIiBjbGFzcz1cIndpZGdldC1ib3hcIiBzdHlsZT1cInBvc2l0aW9uOnJlbGF0aXZlO1wiPlxuICAgICAgPCEtLSB0aXRsZSAtLT5cbiAgICAgIDxzbG90IG5hbWU9XCJib3hfdGl0bGVcIj48L3Nsb3Q+XG5cbiAgICAgIDwhLS0gY29udGVudCAtLT5cbiAgICAgIDxzbG90IG5hbWU9XCJib3hfY29udGVudFwiPjwvc2xvdD5cblxuICAgICAgPCEtLSBmb290ZXIgLS0+XG4gICAgICA8ZGl2IGNsYXNzPVwibWItMSBtZS0zXCIgc3R5bGU9XCJwb3NpdGlvbjphYnNvbHV0ZTtib3R0b206MHB4O3JpZ2h0OjBweDtcIj5cbiAgICAgICAgPHNsb3QgbmFtZT1cImJveF9mb290ZXJcIj48L3Nsb3Q+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBjb21wdXRlZCB9IGZyb20gXCJ2dWVcIjtcblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gIGNvbG9yOiBTdHJpbmcsXG4gIHdpZHRoOiBOdW1iZXIsXG4gIGhlaWdodDogTnVtYmVyLFxufSk7XG5cbmNvbnN0IHdpZHRoX2NsYXNzID0gY29tcHV0ZWQoKCkgPT4ge1xuICByZXR1cm4gYGNvbC0ke3Byb3BzLndpZHRoIHx8IDR9YDtcbn0pO1xuXG5jb25zdCBoZWlnaHRfY2xhc3MgPSBjb21wdXRlZCgoKSA9PiB7XG4gIGxldCBjb2xvcl9jbGFzcyA9IGBgO1xuXG4gIGlmIChwcm9wcy5jb2xvcikge1xuICAgIC8qIEFjY2VwdGVkIGNvbG9yczogcHJpbWFyeSwgc2Vjb25kYXJ5LCBzdWNjZXNzLCBkYW5nZXIsIHdhcm5pbmcsIGluZm8sIGxpZ2h0LCBkYXJrLCB3aGl0ZSAqL1xuICAgIGNvbG9yX2NsYXNzID0gYGJnLSR7cHJvcHMuY29sb3J9YDtcbiAgfVxuXG4gIHJldHVybiBgcm93LSR7cHJvcHMuaGVpZ2h0IHx8IDR9ICR7Y29sb3JfY2xhc3N9YDtcbn0pO1xuPC9zY3JpcHQ+XG5cbiIsIjwhLS1cbiAgKEMpIDIwMTMtMjIgLSBudG9wLm9yZ1xuLS0+XG5cbjx0ZW1wbGF0ZT5cbjxkaXY+PC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIG9uQmVmb3JlTW91bnQsIHdhdGNoIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX2N1c3RvbV9ldmVudHMsIG50b3BuZ19ldmVudHNfbWFuYWdlciB9IGZyb20gXCIuLi9zZXJ2aWNlcy9jb250ZXh0L250b3BuZ19nbG9iYWxzX3NlcnZpY2VzXCI7XG5pbXBvcnQgZm9ybWF0dGVyVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9mb3JtYXR0ZXItdXRpbHNcIjtcbmltcG9ydCBOdG9wVXRpbHMgZnJvbSBcIi4uL3V0aWxpdGllcy9udG9wLXV0aWxzXCI7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIGlkOiBTdHJpbmcsICAgICAgICAgIC8qIENvbXBvbmVudCBJRCAqL1xuICAgIGkxOG5fdGl0bGU6IFN0cmluZywgIC8qIFRpdGxlIChpMThuKSAqL1xuICAgIGlmaWQ6IFN0cmluZywgICAgICAgIC8qIEludGVyZmFjZSBJRCAqL1xuICAgIGVwb2NoX2JlZ2luOiBOdW1iZXIsIC8qIFRpbWUgaW50ZXJ2YWwgYmVnaW4gKi9cbiAgICBlcG9jaF9lbmQ6IE51bWJlciwgICAvKiBUaW1lIGludGVydmFsIGVuZCAqL1xuICAgIG1heF93aWR0aDogTnVtYmVyLCAgIC8qIENvbXBvbmVudCBXaWR0aCAoNCwgOCwgMTIpICovXG4gICAgbWF4X2hlaWdodDogTnVtYmVyLCAgLyogQ29tcG9uZW50IEhlaGdodCAoNCwgOCwgMTIpKi9cbiAgICBwYXJhbXM6IE9iamVjdCwgICAgICAvKiBDb21wb25lbnQtc3BlY2lmaWMgcGFyYW1ldGVycyBmcm9tIHRoZSBKU09OIHRlbXBsYXRlIGRlZmluaXRpb24gKi9cbiAgICBnZXRfY29tcG9uZW50X2RhdGE6IEZ1bmN0aW9uLCAvKiBDYWxsYmFjayB0byByZXF1ZXN0IGRhdGEgKFJFU1QpICovXG4gICAgZmlsdGVyczogT2JqZWN0XG59KTtcblxuLyogV2F0Y2ggLSBkZXRlY3QgY2hhbmdlcyBvbiBlcG9jaF9iZWdpbiAvIGVwb2NoX2VuZCBhbmQgcmVmcmVzaCB0aGUgY29tcG9uZW50ICovXG53YXRjaCgoKSA9PiBbcHJvcHMuZXBvY2hfYmVnaW4sIHByb3BzLmVwb2NoX2VuZCwgcHJvcHMuZmlsdGVyc10sIChjdXJfdmFsdWUsIG9sZF92YWx1ZSkgPT4ge1xuICAgIHJlZnJlc2hfY29tcG9uZW50KCk7XG59LCB7IGZsdXNoOiAncHJlJywgZGVlcDogdHJ1ZSB9KTtcblxub25CZWZvcmVNb3VudCgoKSA9PiB7XG4gICAgaW5pdCgpO1xufSk7XG5cbm9uTW91bnRlZCgoKSA9PiB7XG59KTtcblxuZnVuY3Rpb24gaW5pdCgpIHtcbiAgICByZWZyZXNoX2NvbXBvbmVudCgpO1xufVxuXG5hc3luYyBmdW5jdGlvbiByZWZyZXNoX2NvbXBvbmVudCgpIHtcbiAgICAvKiBSZWZyZXNoIGNvbXBvbmVudCAqL1xufVxuPC9zY3JpcHQ+XG4iLCI8IS0tXG4gIChDKSAyMDEzLTIyIC0gbnRvcC5vcmdcbi0tPlxuXG48dGVtcGxhdGU+XG48ZGl2IGNsYXNzPVwidGFibGUtcmVzcG9uc2l2ZVwiIHN0eWxlPVwibWFyZ2luLWxlZnQ6LTFyZW07bWFyZ2luLXJpZ2h0Oi0xcmVtO1wiPlxuICA8Qm9vdHN0cmFwVGFibGVcbiAgICA6aWQ9XCJ0YWJsZV9pZFwiIFxuICAgIDpjb2x1bW5zPVwiY29sdW1uc1wiXG4gICAgOnJvd3M9XCJ0YWJsZV9yb3dzXCJcbiAgICA6cHJpbnRfaHRtbF9jb2x1bW49XCJyZW5kZXJfY29sdW1uXCJcbiAgICA6cHJpbnRfaHRtbF9yb3c9XCJyZW5kZXJfcm93XCJcbiAgICA6d3JhcF9jb2x1bW5zPVwidHJ1ZVwiPlxuICA8L0Jvb3RzdHJhcFRhYmxlPlxuPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIG9uQmVmb3JlTW91bnQsIHdhdGNoLCBjb21wdXRlZCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgQm9vdHN0cmFwVGFibGUgfSBmcm9tIFwiLi9ib290c3RyYXAtdGFibGUudnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfY3VzdG9tX2V2ZW50cywgbnRvcG5nX2V2ZW50c19tYW5hZ2VyIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXNcIjtcbmltcG9ydCBmb3JtYXR0ZXJVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL2Zvcm1hdHRlci11dGlsc1wiO1xuaW1wb3J0IE50b3BVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL250b3AtdXRpbHNcIjtcbmltcG9ydCB7IHNjYW5fdHlwZV9mLGxhc3Rfc2Nhbl9mLCBkdXJhdGlvbl9mLCBzY2FuX2ZyZXF1ZW5jeV9mLCBpc19va19sYXN0X3NjYW5fZiwgdGNwX3BvcnRzX2YsIHRjcF9wb3J0X2YsIGhvc3RzX2YsIGhvc3RfZiwgY3Zlc19mLCBtYXhfc2NvcmVfY3ZlX2YsIHVkcF9wb3J0c19mLCBudW1fdnVsbl9mb3VuZF9mLCB0Y3BfdWRwX3BvcnRzX2xpc3RfZiwgZGlzY292ZXJkX2hvc3RzX2xpc3RfZiAgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3ZzX3JlcG9ydF9mb3JtYXR0ZXIuanNcIjsgXG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbmNvbnN0IHRhYmxlX2lkID0gcmVmKCdzaW1wbGVfdGFibGUnKTtcbmNvbnN0IHRhYmxlX3Jvd3MgPSByZWYoW10pO1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICBpZDogU3RyaW5nLCAgICAgICAgICAvKiBDb21wb25lbnQgSUQgKi9cbiAgICBpMThuX3RpdGxlOiBTdHJpbmcsICAvKiBUaXRsZSAoaTE4bikgKi9cbiAgICBpZmlkOiBTdHJpbmcsICAgICAgICAvKiBJbnRlcmZhY2UgSUQgKi9cbiAgICBlcG9jaF9iZWdpbjogTnVtYmVyLCAvKiBUaW1lIGludGVydmFsIGJlZ2luICovXG4gICAgZXBvY2hfZW5kOiBOdW1iZXIsICAgLyogVGltZSBpbnRlcnZhbCBlbmQgKi9cbiAgICBtYXhfd2lkdGg6IE51bWJlciwgICAvKiBDb21wb25lbnQgV2lkdGggKDQsIDgsIDEyKSAqL1xuICAgIG1heF9oZWlnaHQ6IE51bWJlciwgIC8qIENvbXBvbmVudCBIZWhnaHQgKDQsIDgsIDEyKSovXG4gICAgcGFyYW1zOiBPYmplY3QsICAgICAgLyogQ29tcG9uZW50LXNwZWNpZmljIHBhcmFtZXRlcnMgZnJvbSB0aGUgSlNPTiB0ZW1wbGF0ZSBkZWZpbml0aW9uICovXG4gICAgZ2V0X2NvbXBvbmVudF9kYXRhOiBGdW5jdGlvbiwgLyogQ2FsbGJhY2sgdG8gcmVxdWVzdCBkYXRhIChSRVNUKSAqL1xuICAgIGZpbHRlcnM6IE9iamVjdFxufSk7XG5cbmNvbnN0IGNvbHVtbnMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgbGV0IGNvbHVtbnMgPSBwcm9wcy5wYXJhbXMuY29sdW1ucy5tYXAoKGMpID0+IHtcbiAgICAgICAgaWYgKCFjLnN0eWxlICYmIGMuZGF0YV90eXBlKSB7XG4gICAgICAgICAgICBpZiAoYy5kYXRhX3R5cGUgPT0gXCJieXRlc1wiIHx8IGMuZGF0YV90eXBlID09IFwiZGF0ZVwiKSB7XG4gICAgICAgICAgICAgICAgYy5zdHlsZSA9IFwidGV4dC1hbGlnbjogcmlnaHRcIjtcbiAgICAgICAgICAgIH0gZWxzZSAgaWYgKGMuZGF0YV90eXBlID09IFwiY291bnRfc2NvcmVcIikge1xuICAgICAgICAgICAgICAgIGMuc3R5bGUgPSBcInRleHQtYWxpZ246IGNlbnRlclwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuXHRyZXR1cm4ge1xuXHQgICAgLi4uYyxcblx0fTtcbiAgICB9KTtcblxuICAgIGNvbHVtbnNbMF0uY2xhc3MgPSAoY29sdW1uc1swXS5jbGFzcyA/IChjb2x1bW5zWzBdLmNsYXNzICsgXCIgXCIpIDogXCJcIikgXG4gICAgICArIFwiZmlyc3QtY29sLXdpZHRoXCI7XG5cbiAgICByZXR1cm4gY29sdW1ucztcbn0pO1xuXG4vKiBXYXRjaCAtIGRldGVjdCBjaGFuZ2VzIG9uIGVwb2NoX2JlZ2luIC8gZXBvY2hfZW5kIGFuZCByZWZyZXNoIHRoZSBjb21wb25lbnQgKi9cbndhdGNoKCgpID0+IFtwcm9wcy5lcG9jaF9iZWdpbiwgcHJvcHMuZXBvY2hfZW5kLCBwcm9wcy5maWx0ZXJzXSwgKGN1cl92YWx1ZSwgb2xkX3ZhbHVlKSA9PiB7XG4gICAgcmVmcmVzaF90YWJsZSgpO1xufSwgeyBmbHVzaDogJ3ByZScsIGRlZXA6IHRydWUgfSk7XG5cbm9uQmVmb3JlTW91bnQoKCkgPT4ge1xuICAgIGluaXQoKTtcbn0pO1xuXG5vbk1vdW50ZWQoKCkgPT4ge1xufSk7XG5cbmZ1bmN0aW9uIGluaXQoKSB7XG4gICAgcmVmcmVzaF90YWJsZSgpO1xufVxuXG5jb25zdCByZW5kZXJfY29sdW1uID0gZnVuY3Rpb24gKGNvbHVtbikge1xuICBpZiAoY29sdW1uLmkxOG5fbmFtZSkgeyByZXR1cm4gX2kxOG4oY29sdW1uLmkxOG5fbmFtZSk7IH1cbiAgcmV0dXJuIFwiXCI7XG59XG5cbmNvbnN0IHJvd19yZW5kZXJfZnVuY3Rpb25zID0ge1xuICAvKiBSZW5kZXIgZnVuY3Rpb24gZm9yICd0aHJvdWdocHV0JyB0YWJsZSB0eXBlICovXG4gIHRocm91Z2hwdXQ6IGZ1bmN0aW9uIChjb2x1bW4sIHJvdykge1xuICAgIGlmIChjb2x1bW4uaWQgPT0gJ25hbWUnKSB7XG4gICAgICBpZiAocm93Wyd1cmwnXSlcbiAgICAgICAgcmV0dXJuIGA8YSBocmVmPScke3Jvdy51cmx9Jz4ke3Jvdy5uYW1lfTwvYT5gO1xuICAgICAgZWxzZVxuICAgICAgICByZXR1cm4gcm93Lm5hbWU7XG4gICAgfSBlbHNlIGlmIChjb2x1bW4uaWQgPT0gJ3Rocm91Z2hwdXQnKSB7XG4gICAgICBpZiAocm93Wyd0aHJvdWdocHV0X3R5cGUnXSAmJiByb3dbJ3Rocm91Z2hwdXRfdHlwZSddID09ICdwcHMnKSB7XG4gICAgICAgIHJldHVybiBOdG9wVXRpbHMuZnBhY2tldHMocm93W2NvbHVtbi5pZF0pO1xuICAgICAgfSBlbHNlIGlmIChyb3dbJ3Rocm91Z2hwdXRfdHlwZSddICYmIHJvd1sndGhyb3VnaHB1dF90eXBlJ10gPT0gJ2JwcycpIHtcbiAgICAgICAgcmV0dXJuIE50b3BVdGlscy5iaXRzVG9TaXplKHJvd1tjb2x1bW4uaWRdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiByb3dbJ3Rocm91Z2hwdXQnXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuICB9LFxuXG4gIC8qIFJlbmRlciBmdW5jdGlvbiBmb3IgJ2RiX3NlYXJjaCcgdGFibGUgdHlwZSAqL1xuICBkYl9zZWFyY2g6IGZ1bmN0aW9uIChjb2x1bW4sIHJvdykge1xuICAgIGlmIChjb2x1bW4uZGF0YV90eXBlID09ICdob3N0Jykge1xuICAgICAgcmV0dXJuIE50b3BVdGlscy5mb3JtYXRIb3N0KHJvd1tjb2x1bW4uaWRdLCByb3csIChjb2x1bW4uaWQgPT0gJ2NsaV9pcCcpKTtcbiAgICB9IGVsc2UgaWYgKGNvbHVtbi5kYXRhX3R5cGUgPT0gJ25ldHdvcmsnKSB7XG4gICAgICByZXR1cm4gTnRvcFV0aWxzLmZvcm1hdE5ldHdvcmsocm93W2NvbHVtbi5pZF0sIHJvdyk7XG4gICAgfSBlbHNlIGlmIChjb2x1bW4uZGF0YV90eXBlID09ICdhc24nKSB7XG4gICAgICByZXR1cm4gTnRvcFV0aWxzLmZvcm1hdEFTTihyb3dbY29sdW1uLmlkXSwgcm93KTtcbiAgICB9IGVsc2UgaWYgKGNvbHVtbi5kYXRhX3R5cGUgPT0gJ2NvdW50cnknKSB7XG4gICAgICByZXR1cm4gTnRvcFV0aWxzLmZvcm1hdENvdW50cnkocm93W2NvbHVtbi5pZF0sIHJvdyk7XG4gICAgfSBlbHNlIGlmIChmb3JtYXR0ZXJVdGlscy50eXBlc1tjb2x1bW4uZGF0YV90eXBlXSkge1xuICAgICAgLy8gJ2J5dGVzJywgJ2JwcycsICdwcHMnLCAuLi5cbiAgICAgIGxldCBmb3JtYXR0ZXIgPSBmb3JtYXR0ZXJVdGlscy5nZXRGb3JtYXR0ZXIoY29sdW1uLmRhdGFfdHlwZSk7XG4gICAgICByZXR1cm4gZm9ybWF0dGVyKHJvd1tjb2x1bW4uaWRdKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiByb3dbY29sdW1uLmlkXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiBOdG9wVXRpbHMuZm9ybWF0R2VuZXJpY09iaihyb3dbY29sdW1uLmlkXSwgcm93KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHJvd1tjb2x1bW4uaWRdO1xuICAgIH1cbiAgfSxcblxuICB2c19zY2FuX3Jlc3VsdDogZnVuY3Rpb24oY29sdW1uLCByb3cpIHtcbiAgICBpZihjb2x1bW4uaWQgPT0gXCJob3N0XCIpIHtcbiAgICAgIHJldHVybiBob3N0X2Yocm93W2NvbHVtbi5pZF0sIHJvdywgcHJvcHMuaWZpZCk7XG4gICAgfSBlbHNlIGlmKGNvbHVtbi5pZCA9PSBcImxhc3Rfc2NhblwiKSB7XG4gICAgICByZXR1cm4gbGFzdF9zY2FuX2Yocm93W2NvbHVtbi5pZF0sIHJvdyk7XG4gICAgfSBlbHNlIGlmKGNvbHVtbi5pZCA9PSBcImR1cmF0aW9uXCIpIHtcbiAgICAgIHJldHVybiBkdXJhdGlvbl9mKHJvd1tjb2x1bW4uaWRdLCByb3cpO1xuICAgIH0gZWxzZSBpZihjb2x1bW4uaWQgPT0gXCJzY2FuX2ZyZXF1ZW5jeVwiKSB7XG4gICAgICByZXR1cm4gc2Nhbl9mcmVxdWVuY3lfZihyb3dbY29sdW1uLmlkXSk7XG4gICAgfSBlbHNlIGlmKGNvbHVtbi5pZCA9PSBcImlzX29rX2xhc3Rfc2NhblwiKSB7XG4gICAgICByZXR1cm4gaXNfb2tfbGFzdF9zY2FuX2Yocm93W2NvbHVtbi5pZF0pO1xuICAgIH0gZWxzZSBpZihjb2x1bW4uaWQgPT0gXCJ0Y3BfcG9ydHNcIikge1xuICAgICAgcmV0dXJuIHRjcF9wb3J0c19mKHJvd1tjb2x1bW4uaWRdLCByb3cpO1xuICAgIH0gZWxzZSBpZihjb2x1bW4uaWQgPT0gXCJ1ZHBfcG9ydHNcIikge1xuICAgICAgcmV0dXJuIHVkcF9wb3J0c19mKHJvd1tjb2x1bW4uaWRdLCByb3cpO1xuICAgIH0gIGVsc2UgaWYoY29sdW1uLmlkID09IFwic2Nhbl90eXBlXCIpIHtcbiAgICAgIHJldHVybiBzY2FuX3R5cGVfZihyb3dbY29sdW1uLmlkXSwgdHJ1ZSwgcm93KTtcbiAgICB9IGVsc2UgaWYgKGNvbHVtbi5pZCA9PSBcImhvc3RzXCIpIHtcbiAgICAgIHJldHVybiBob3N0c19mKHJvd1tjb2x1bW4uaWRdLCByb3cpO1xuICAgIH0gZWxzZSBpZiAoY29sdW1uLmlkID09IFwiY3ZlXCIgfHwgY29sdW1uLmlkID09IFwiY3ZlX2xpc3RcIikge1xuICAgICAgcmV0dXJuIGN2ZXNfZihyb3dbY29sdW1uLmlkXSwgcm93KTtcbiAgICB9IGVsc2UgaWYgKGNvbHVtbi5pZCA9PSBcInBvcnRcIikge1xuICAgICAgcmV0dXJuIHRjcF9wb3J0X2Yocm93W2NvbHVtbi5pZF0scm93KTtcbiAgICB9IGVsc2UgaWYgKGNvbHVtbi5pZCA9PSBcIm1heF9zY29yZV9jdmVcIikge1xuICAgICAgcmV0dXJuIG1heF9zY29yZV9jdmVfZihyb3dbY29sdW1uLmlkXSxyb3cpO1xuICAgIH0gZWxzZSBpZiAoY29sdW1uLmlkID09IFwibnVtX3Z1bG5lcmFiaWxpdGllc19mb3VuZFwiKSB7XG4gICAgICByZXR1cm4gbnVtX3Z1bG5fZm91bmRfZihyb3dbY29sdW1uLmlkXSxyb3cpO1xuICAgIH0gZWxzZSBpZiAoY29sdW1uLmlkID09IFwidGNwX3VkcF9wb3J0c19saXN0XCIpIHtcbiAgICAgIHJldHVybiB0Y3BfdWRwX3BvcnRzX2xpc3RfZihyb3dbXCJ0Y3BfcG9ydHNfbGlzdFwiXSwgcm93W1widWRwX3BvcnRzX2xpc3RcIl0sIHJvdyk7XG4gICAgfSBlbHNlIGlmIChjb2x1bW4uaWQgPT0gXCJkaXNjb3ZlcmVkX2hvc3RzXCIpIHtcbiAgICAgIHJldHVybiBkaXNjb3ZlcmRfaG9zdHNfbGlzdF9mKHJvd1tjb2x1bW4uaWRdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHJvd1tjb2x1bW4uaWRdO1xuICAgIH1cbiAgfVxufTtcblxuY29uc3QgcmVuZGVyX3JvdyA9IGZ1bmN0aW9uIChjb2x1bW4sIHJvdykge1xuICBpZiAocHJvcHMucGFyYW1zICYmIFxuICAgICAgcHJvcHMucGFyYW1zLnRhYmxlX3R5cGUgJiYgXG4gICAgICByb3dfcmVuZGVyX2Z1bmN0aW9uc1twcm9wcy5wYXJhbXMudGFibGVfdHlwZV0pIHtcbiAgICBjb25zdCByZW5kZXJfZnVuYyA9IHJvd19yZW5kZXJfZnVuY3Rpb25zW3Byb3BzLnBhcmFtcy50YWJsZV90eXBlXTtcbiAgICByZXR1cm4gcmVuZGVyX2Z1bmMoY29sdW1uLCByb3cpO1xuICB9IGVsc2UgaWYgKHJvd1tjb2x1bW4uaWRdKSB7XG4gICAgcmV0dXJuIHJvd1tjb2x1bW4uaWRdO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBcIlwiO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJlZnJlc2hfdGFibGUoKSB7XG4gIGNvbnN0IHVybF9wYXJhbXMgPSB7XG4gICAgIGlmaWQ6IHByb3BzLmlmaWQsXG4gICAgIGVwb2NoX2JlZ2luOiBwcm9wcy5lcG9jaF9iZWdpbixcbiAgICAgZXBvY2hfZW5kOiBwcm9wcy5lcG9jaF9lbmQsXG4gICAgIC4uLnByb3BzLnBhcmFtcy51cmxfcGFyYW1zLFxuICAgICAgICAuLi5wcm9wcy5maWx0ZXJzXG4gIH1cbiAgY29uc3QgcXVlcnlfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKHVybF9wYXJhbXMpO1xuIFxuICAvL2xldCBkYXRhID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KGAke2h0dHBfcHJlZml4fSR7cHJvcHMucGFyYW1zLnVybH0/JHtxdWVyeV9wYXJhbXN9YCk7XG4gIGxldCBkYXRhID0gYXdhaXQgcHJvcHMuZ2V0X2NvbXBvbmVudF9kYXRhKGAke2h0dHBfcHJlZml4fSR7cHJvcHMucGFyYW1zLnVybH1gLCBxdWVyeV9wYXJhbXMpO1xuXG4gIGxldCByb3dzID0gW107XG4gIGlmIChwcm9wcy5wYXJhbXMudGFibGVfdHlwZSA9PSAnZGJfc2VhcmNoJykge1xuICAgIHJvd3MgPSBkYXRhLnJlY29yZHM7IC8qIGRiX3NlYXJjaDogcmVhZCBkYXRhIGZyb20gZGF0YS5yZWNvcmRzICovXG4gIH0gZWxzZSB7XG4gICAgcm93cyA9IGRhdGE7IC8qIGRlZmF1bHQ6IGRhdGEgaXMgdGhlIGFycmF5IG9mIHJlY29yZHMgKi9cbiAgfVxuXG4gIGlmICggcHJvcHMucGFyYW1zLnRhYmxlX3R5cGUgIT0gJ3ZzX3NjYW5fcmVzdWx0Jykge1xuICAgIGNvbnN0IG1heF9yb3dzID0gcHJvcHMubWF4X2hlaWdodCA/ICgocHJvcHMubWF4X2hlaWdodC80KSAqIDYpIDogNjtcbiAgICByb3dzID0gcm93cy5zbGljZSgwLCBtYXhfcm93cyk7XG4gIH0gXG5cbiAgdGFibGVfcm93cy52YWx1ZSA9IHJvd3M7XG59XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuLmZpcnN0LWNvbC13aWR0aCB7XG4gICAgLyogbWF4LXdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7ICovXG59XG5cbkBtZWRpYSBwcmludCBhbmQgKG1heC13aWR0aDogMjEwbW0pIHtcbiAgICB0ZC5maXJzdC1jb2wtd2lkdGgge1xuXHRtYXgtd2lkdGg6IDU1bW0gIWltcG9ydGFudDtcbiAgICB9XG59XG5AbWVkaWEgcHJpbnQgYW5kIChtaW4td2lkdGg6IDIxMW1tKSB7XG4gICAgdGQuZmlyc3QtY29sLXdpZHRoIHtcblx0bWF4LXdpZHRoOiA5NW1tICFpbXBvcnRhbnQ7XG4gICAgfVxufVxuXG4vKiBAbWVkaWEgcHJpbnQgYW5kIChtYXgtd2lkdGg6IDE0OG1tKXsgKi9cbi8qIH0gKi9cblxuPC9zdHlsZT5cbiIsIjwhLS1cbiAgKEMpIDIwMTMtMjIgLSBudG9wLm9yZ1xuLS0+XG5cbjx0ZW1wbGF0ZT5cbjxkaXYgY2xhc3M9XCJkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1iZXR3ZWVuXCI+XG4gICAgPGRpdj5cbiAgICAgICAgPGEgOmhyZWY9XCJsaW5rX3VybFwiPlxuICAgICAgICAgICAgPGg0IGNsYXNzPVwiZnctbm9ybWFsIHRleHQtd2hpdGVcIj57eyBjb3VudGVyIH19PC9oND5cbiAgICAgICAgICAgIDxwIGNsYXNzPVwic3VidGl0bGUgdGV4dC13aGl0ZSB0ZXh0LXNtIHRleHQgbWItMCBoNVwiPnt7IG5hbWUgfX08L3A+XG4gICAgICAgIDwvYT5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiZmxleC1zaHJpbmstMCBtcy0zXCI+XG4gICAgICAgIDxpIGNsYXNzPVwidGV4dC13aGl0ZVwiIDpjbGFzcz1cImljb25cIj48L2k+XG4gICAgPC9kaXY+XG48L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgb25CZWZvcmVNb3VudCwgd2F0Y2ggfSBmcm9tIFwidnVlXCI7XG5pbXBvcnQgeyBudG9wbmdfY3VzdG9tX2V2ZW50cywgbnRvcG5nX2V2ZW50c19tYW5hZ2VyIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXNcIjtcbmltcG9ydCBmb3JtYXR0ZXJVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL2Zvcm1hdHRlci11dGlsc1wiO1xuaW1wb3J0IE50b3BVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL250b3AtdXRpbHNcIjtcblxuY29uc3QgX2kxOG4gPSAodCkgPT4gaTE4bih0KTtcblxuY29uc3QgY291bnRlciA9IHJlZignJylcbmNvbnN0IG5hbWUgPSByZWYoJycpXG5jb25zdCBpY29uID0gcmVmKCcnKVxuY29uc3QgbGlua191cmwgPSByZWYoJyMnKVxuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICBpZDogU3RyaW5nLCAgICAgICAgICAvKiBDb21wb25lbnQgSUQgKi9cbiAgICBpMThuX3RpdGxlOiBTdHJpbmcsICAvKiBUaXRsZSAoaTE4bikgKi9cbiAgICBpZmlkOiBTdHJpbmcsICAgICAgICAvKiBJbnRlcmZhY2UgSUQgKi9cbiAgICBlcG9jaF9iZWdpbjogTnVtYmVyLCAvKiBUaW1lIGludGVydmFsIGJlZ2luICovXG4gICAgZXBvY2hfZW5kOiBOdW1iZXIsICAgLyogVGltZSBpbnRlcnZhbCBlbmQgKi9cbiAgICBtYXhfd2lkdGg6IE51bWJlciwgICAvKiBDb21wb25lbnQgV2lkdGggKDQsIDgsIDEyKSAqL1xuICAgIG1heF9oZWlnaHQ6IE51bWJlciwgIC8qIENvbXBvbmVudCBIZWhnaHQgKDQsIDgsIDEyKSovXG4gICAgcGFyYW1zOiBPYmplY3QsICAgICAgLyogQ29tcG9uZW50LXNwZWNpZmljIHBhcmFtZXRlcnMgZnJvbSB0aGUgSlNPTiB0ZW1wbGF0ZSBkZWZpbml0aW9uICovXG4gICAgZ2V0X2NvbXBvbmVudF9kYXRhOiBGdW5jdGlvbiwgLyogQ2FsbGJhY2sgdG8gcmVxdWVzdCBkYXRhIChSRVNUKSAqL1xuICAgIHNldF9jb21wb25lbnRfYXR0cjogRnVuY3Rpb24sIC8qIENhbGxiYWNrIHRvIHNldCBjb21wb25lbnQgYXR0cmlidXRlcyAoZS5nLiBCb3ggYWN0aXZlIGNvbG9yKSAqL1xuICAgIGZpbHRlcnM6IE9iamVjdFxufSk7XG5cbi8qIFdhdGNoIC0gZGV0ZWN0IGNoYW5nZXMgb24gZXBvY2hfYmVnaW4gLyBlcG9jaF9lbmQgYW5kIHJlZnJlc2ggdGhlIGNvbXBvbmVudCAqL1xud2F0Y2goKCkgPT4gW3Byb3BzLmVwb2NoX2JlZ2luLCBwcm9wcy5lcG9jaF9lbmQsIHByb3BzLmZpbHRlcnNdLCAoY3VyX3ZhbHVlLCBvbGRfdmFsdWUpID0+IHtcbiAgcmVmcmVzaF9jb21wb25lbnQoKTtcbn0sIHsgZmx1c2g6ICdwcmUnLCBkZWVwOiB0cnVlIH0pO1xuXG5vbkJlZm9yZU1vdW50KCgpID0+IHtcbiAgaW5pdCgpO1xufSk7XG5cbm9uTW91bnRlZCgoKSA9PiB7XG59KTtcblxuZnVuY3Rpb24gaW5pdCgpIHtcbiAgaWYgKHByb3BzLnBhcmFtcy5pMThuX25hbWUpIHtcbiAgICBuYW1lLnZhbHVlID0gX2kxOG4ocHJvcHMucGFyYW1zLmkxOG5fbmFtZSk7XG4gIH1cblxuICBpZiAocHJvcHMucGFyYW1zLmljb24pIHtcbiAgICBpY29uLnZhbHVlID0gcHJvcHMucGFyYW1zLmljb24gKyAnIGZhLTJ4bCc7XG4gIH1cblxuICByZWZyZXNoX2NvbXBvbmVudCgpO1xufVxuXG5hc3luYyBmdW5jdGlvbiByZWZyZXNoX2NvbXBvbmVudCgpIHtcbiAgLyogUmVmcmVzaCBjb21wb25lbnQgKi9cblxuICBpZiAocHJvcHMucGFyYW1zLnVybCkge1xuXG4gICAgY29uc3QgdXJsX3BhcmFtcyA9IHtcbiAgICAgIGlmaWQ6IHByb3BzLmlmaWQsXG4gICAgICBlcG9jaF9iZWdpbjogcHJvcHMuZXBvY2hfYmVnaW4sXG4gICAgICBlcG9jaF9lbmQ6IHByb3BzLmVwb2NoX2VuZCxcbiAgICAgIC4uLnByb3BzLnBhcmFtcy51cmxfcGFyYW1zLFxuICAgICAgLi4ucHJvcHMuZmlsdGVyc1xuICAgIH1cbiAgICBjb25zdCBxdWVyeV9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXModXJsX3BhcmFtcyk7XG5cbiAgICAvLyBsZXQgZGF0YSA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdChgJHtodHRwX3ByZWZpeH0ke3Byb3BzLnBhcmFtcy51cmx9PyR7cXVlcnlfcGFyYW1zfWApO1xuICAgIGxldCBkYXRhID0gYXdhaXQgcHJvcHMuZ2V0X2NvbXBvbmVudF9kYXRhKGAke2h0dHBfcHJlZml4fSR7cHJvcHMucGFyYW1zLnVybH1gLCBxdWVyeV9wYXJhbXMpO1xuXG4gICAgLyogVE9ETyBoYW5kbGUgZG90LXNlcGFyYXRlZCBwYXRoIGZvciBub24tZmxhdCBqc29uICovXG4gICAgbGV0IGNvdW50ZXJfdmFsdWUgPSBkYXRhW3Byb3BzLnBhcmFtcy5jb3VudGVyX3BhdGhdO1xuXG4gICAgbGV0IGNvdW50ZXJfZm9ybWF0dGVyID0gZGF0YVtwcm9wcy5wYXJhbXMuY291bnRlcl9mb3JtYXR0ZXJdO1xuICAgIGlmICghY291bnRlcl9mb3JtYXR0ZXIpIHtcbiAgICAgIGNvdW50ZXJfZm9ybWF0dGVyID0gXCJudW1iZXJcIjtcbiAgICB9XG5cbiAgICBsZXQgZm9ybWF0Q291bnRlciA9IGZvcm1hdHRlclV0aWxzLmdldEZvcm1hdHRlcihjb3VudGVyX2Zvcm1hdHRlcik7XG4gICAgY291bnRlci52YWx1ZSA9IGZvcm1hdENvdW50ZXIoY291bnRlcl92YWx1ZSlcblxuICAgIGlmIChjb3VudGVyX3ZhbHVlKSB7XG4gICAgICAgIHByb3BzLnNldF9jb21wb25lbnRfYXR0cignYWN0aXZlJywgdHJ1ZSk7XG4gICAgfVxuXG4gICAgaWYgKHByb3BzLnBhcmFtcy5saW5rKSB7XG4gICAgICBjb25zdCBsaW5rX3VybF9wYXJhbXMgPSB7XG4gICAgICAgIGlmaWQ6IHByb3BzLmlmaWQsXG4gICAgICAgIGVwb2NoX2JlZ2luOiBwcm9wcy5lcG9jaF9iZWdpbixcbiAgICAgICAgZXBvY2hfZW5kOiBwcm9wcy5lcG9jaF9lbmQsXG4gICAgICAgIC4uLnByb3BzLnBhcmFtcy5saW5rLnVybF9wYXJhbXNcbiAgICAgIH1cblxuICAgICAgY29uc3QgbGlua19xdWVyeV9wYXJhbXMgPSBudG9wbmdfdXJsX21hbmFnZXIub2JqX3RvX3VybF9wYXJhbXMobGlua191cmxfcGFyYW1zKTtcbiAgICAgIGxpbmtfdXJsLnZhbHVlID0gYCR7aHR0cF9wcmVmaXh9JHtwcm9wcy5wYXJhbXMubGluay51cmx9PyR7bGlua19xdWVyeV9wYXJhbXN9YDtcbiAgICB9XG4gIH1cbn1cbjwvc2NyaXB0PlxuIiwiPCEtLVxuICAoQykgMjAxMy0yMiAtIG50b3Aub3JnXG4tLT5cblxuPHRlbXBsYXRlPlxuICAgIDxkaXY+XG4gICAgICAgIDxDaGFydCByZWY9XCJjaGFydFwiIDppZD1cImlkXCIgOmNoYXJ0X3R5cGU9XCJjaGFydF90eXBlXCIgOmJhc2VfdXJsX3JlcXVlc3Q9XCJiYXNlX3VybFwiXG4gICAgICAgICAgICA6Z2V0X2N1c3RvbV9jaGFydF9vcHRpb25zPVwiZ2V0X2NoYXJ0X29wdGlvbnNcIiA6cmVnaXN0ZXJfb25fc3RhdHVzX2NoYW5nZT1cImZhbHNlXCI+XG4gICAgICAgIDwvQ2hhcnQ+XG4gICAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIG9uQmVmb3JlTW91bnQsIHdhdGNoLCBjb21wdXRlZCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IG50b3BuZ19jdXN0b21fZXZlbnRzLCBudG9wbmdfZXZlbnRzX21hbmFnZXIgfSBmcm9tIFwiLi4vc2VydmljZXMvY29udGV4dC9udG9wbmdfZ2xvYmFsc19zZXJ2aWNlc1wiO1xuaW1wb3J0IGZvcm1hdHRlclV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvZm9ybWF0dGVyLXV0aWxzXCI7XG5pbXBvcnQgTnRvcFV0aWxzIGZyb20gXCIuLi91dGlsaXRpZXMvbnRvcC11dGlsc1wiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBDaGFydCB9IGZyb20gXCIuL2NoYXJ0LnZ1ZVwiO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuXG5jb25zdCBjaGFydF90eXBlID0gcmVmKG50b3BDaGFydEFwZXgudHlwZUNoYXJ0LkRPTlVUKTtcbmNvbnN0IGNoYXJ0ID0gcmVmKG51bGwpO1xuXG5jb25zdCBwcm9wcyA9IGRlZmluZVByb3BzKHtcbiAgICBpZDogU3RyaW5nLCAgICAgICAgICAvKiBDb21wb25lbnQgSUQgKi9cbiAgICBpMThuX3RpdGxlOiBTdHJpbmcsICAvKiBUaXRsZSAoaTE4bikgKi9cbiAgICBpZmlkOiBTdHJpbmcsICAgICAgICAvKiBJbnRlcmZhY2UgSUQgKi9cbiAgICBlcG9jaF9iZWdpbjogTnVtYmVyLCAvKiBUaW1lIGludGVydmFsIGJlZ2luICovXG4gICAgZXBvY2hfZW5kOiBOdW1iZXIsICAgLyogVGltZSBpbnRlcnZhbCBlbmQgKi9cbiAgICBtYXhfd2lkdGg6IE51bWJlciwgICAvKiBDb21wb25lbnQgV2lkdGggKDQsIDgsIDEyKSAqL1xuICAgIG1heF9oZWlnaHQ6IE51bWJlciwgIC8qIENvbXBvbmVudCBIZWhnaHQgKDQsIDgsIDEyKSovXG4gICAgcGFyYW1zOiBPYmplY3QsICAgICAgLyogQ29tcG9uZW50LXNwZWNpZmljIHBhcmFtZXRlcnMgZnJvbSB0aGUgSlNPTiB0ZW1wbGF0ZSBkZWZpbml0aW9uICovXG4gICAgZ2V0X2NvbXBvbmVudF9kYXRhOiBGdW5jdGlvbiwgLyogQ2FsbGJhY2sgdG8gcmVxdWVzdCBkYXRhIChSRVNUKSAqL1xuICAgIGZpbHRlcnM6IE9iamVjdFxufSk7XG5cbmNvbnN0IGJhc2VfdXJsID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIHJldHVybiBgJHtodHRwX3ByZWZpeH0ke3Byb3BzLnBhcmFtcy51cmx9YDtcbn0pO1xuXG5jb25zdCBnZXRfdXJsX3BhcmFtcyA9ICgpID0+IHtcbiAgICBjb25zdCB1cmxfcGFyYW1zID0ge1xuICAgICAgICBpZmlkOiBwcm9wcy5pZmlkLFxuICAgICAgICBlcG9jaF9iZWdpbjogcHJvcHMuZXBvY2hfYmVnaW4sXG4gICAgICAgIGVwb2NoX2VuZDogcHJvcHMuZXBvY2hfZW5kLFxuICAgICAgICBuZXdfY2hhcnRzOiB0cnVlLFxuICAgICAgICAuLi5wcm9wcy5wYXJhbXMudXJsX3BhcmFtcyxcbiAgICAgICAgLi4ucHJvcHMuZmlsdGVyc1xuICAgIH1cbiAgICBsZXQgcXVlcnlfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKHVybF9wYXJhbXMpO1xuXG4gICAgLyogUHVzaCBpZmlkIHRvIHRoZSBwYXJhbWV0ZXJzIChlLmcuIFwidHNfcXVlcnk9aWZpZDokSUZJRCRcIiAqL1xuICAgIHF1ZXJ5X3BhcmFtcyA9IHF1ZXJ5X3BhcmFtcy5yZXBsYWNlQWxsKFwiJTI0SUZJRCUyNFwiIC8qICRJRklEJCAqLywgcHJvcHMuaWZpZCk7XG5cbiAgICByZXR1cm4gcXVlcnlfcGFyYW1zO1xufVxuXG5mdW5jdGlvbiBnZXRfY2hhcnRfb3B0aW9ucygpIHtcbiAgICBjb25zdCB1cmwgPSBiYXNlX3VybC52YWx1ZTtcbiAgICBjb25zdCB1cmxfcGFyYW1zID0gZ2V0X3VybF9wYXJhbXMoKTtcbiAgICByZXR1cm4gcHJvcHMuZ2V0X2NvbXBvbmVudF9kYXRhKHVybCwgdXJsX3BhcmFtcyk7XG59XG5cbi8qIFdhdGNoIC0gZGV0ZWN0IGNoYW5nZXMgb24gZXBvY2hfYmVnaW4gLyBlcG9jaF9lbmQgYW5kIHJlZnJlc2ggdGhlIGNvbXBvbmVudCAqL1xud2F0Y2goKCkgPT4gW3Byb3BzLmVwb2NoX2JlZ2luLCBwcm9wcy5lcG9jaF9lbmQsIHByb3BzLmZpbHRlcnNdLCAoY3VyX3ZhbHVlLCBvbGRfdmFsdWUpID0+IHtcbiAgICByZWZyZXNoX2NoYXJ0KCk7XG59LCB7IGZsdXNoOiAncHJlJywgZGVlcDogdHJ1ZSB9KTtcblxub25CZWZvcmVNb3VudCgoKSA9PiB7XG4gICAgaW5pdCgpO1xufSk7XG5cbm9uTW91bnRlZCgoKSA9PiB7XG59KTtcblxuZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAvL3JlZnJlc2hfY2hhcnQoKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcmVmcmVzaF9jaGFydCgpIHtcbiAgICBjaGFydC52YWx1ZS51cGRhdGVfY2hhcnQoKTtcbn1cbjwvc2NyaXB0PiIsIjwhLS1cbiAgKEMpIDIwMTMtMjIgLSBudG9wLm9yZ1xuLS0+XG4gICAgICA8IS0tIDpnZXRfcGFyYW1zX3VybF9yZXF1ZXN0PVwiZ2V0X3VybF9wYXJhbXNcIiAtLT5cblxuPHRlbXBsYXRlPlxuICA8ZGl2PlxuICAgIDxUaW1lc2VyaWVzQ2hhcnQgcmVmPVwiY2hhcnRcIiA6aWQ9XCJpZFwiIDpjaGFydF90eXBlPVwiY2hhcnRfdHlwZVwiIDpiYXNlX3VybF9yZXF1ZXN0PVwiYmFzZV91cmxcIlxuICAgICAgOmdldF9jdXN0b21fY2hhcnRfb3B0aW9ucz1cImdldF9jaGFydF9vcHRpb25zXCIgOnJlZ2lzdGVyX29uX3N0YXR1c19jaGFuZ2U9XCJmYWxzZVwiIDpkaXNhYmxlX3BvaW50ZXJfZXZlbnRzPVwiZmFsc2VcIj5cbiAgICA8L1RpbWVzZXJpZXNDaGFydD5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIG9uQmVmb3JlTW91bnQsIHdhdGNoLCBjb21wdXRlZCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCBtZXRyaWNzTWFuYWdlciBmcm9tIFwiLi4vdXRpbGl0aWVzL21ldHJpY3MtbWFuYWdlci5qc1wiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBUaW1lc2VyaWVzQ2hhcnQgfSBmcm9tIFwiLi90aW1lc2VyaWVzLWNoYXJ0LnZ1ZVwiO1xuaW1wb3J0IHRpbWVzZXJpZXNVdGlscyBmcm9tIFwiLi4vdXRpbGl0aWVzL3RpbWVzZXJpZXMtdXRpbHMuanNcIjtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmNvbnN0IGhlaWdodF9wZXJfcm93ID0gNjIuNSAvKiBweCAqL1xuY29uc3QgY2hhcnRfdHlwZSA9IHJlZihudG9wQ2hhcnRBcGV4LnR5cGVDaGFydC5UU19MSU5FKTtcbmNvbnN0IGNoYXJ0ID0gcmVmKG51bGwpO1xuY29uc3QgdGltZXNlcmllc19ncm91cHMgPSByZWYoW10pO1xuY29uc3QgZ3JvdXBfb3B0aW9uX21vZGUgPSB0aW1lc2VyaWVzVXRpbHMuZ2V0R3JvdXBPcHRpb25Nb2RlKCcxX2NoYXJ0X3hfeWF4aXMnKTtcbmNvbnN0IGhlaWdodCA9IHJlZihudWxsKTtcbmNvbnN0IHRzX3JlcXVlc3QgPSByZWYoW10pO1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gIGlkOiBTdHJpbmcsICAgICAgICAgIC8qIENvbXBvbmVudCBJRCAqL1xuICBpMThuX3RpdGxlOiBTdHJpbmcsICAvKiBUaXRsZSAoaTE4bikgKi9cbiAgaWZpZDogU3RyaW5nLCAgICAgICAgLyogSW50ZXJmYWNlIElEICovXG4gIGVwb2NoX2JlZ2luOiBOdW1iZXIsIC8qIFRpbWUgaW50ZXJ2YWwgYmVnaW4gKi9cbiAgZXBvY2hfZW5kOiBOdW1iZXIsICAgLyogVGltZSBpbnRlcnZhbCBlbmQgKi9cbiAgbWF4X3dpZHRoOiBOdW1iZXIsICAgLyogQ29tcG9uZW50IFdpZHRoICg0LCA4LCAxMikgKi9cbiAgbWF4X2hlaWdodDogTnVtYmVyLCAgLyogQ29tcG9uZW50IEhlaGdodCAoNCwgOCwgMTIpKi9cbiAgcGFyYW1zOiBPYmplY3QsICAgICAgLyogQ29tcG9uZW50LXNwZWNpZmljIHBhcmFtZXRlcnMgZnJvbSB0aGUgSlNPTiB0ZW1wbGF0ZSBkZWZpbml0aW9uICovXG4gIGdldF9jb21wb25lbnRfZGF0YTogRnVuY3Rpb24sIC8qIENhbGxiYWNrIHRvIHJlcXVlc3QgZGF0YSAoUkVTVCkgKi9cbiAgY3NyZjogU3RyaW5nLFxuICBmaWx0ZXJzOiBPYmplY3QsXG59KTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIFJldHVybiB0aGUgYmFzZSB1cmwgb2YgdGhlIFJFU1QgQVBJICovXG5jb25zdCBiYXNlX3VybCA9IGNvbXB1dGVkKCgpID0+IHtcbiAgcmV0dXJuIGAke2h0dHBfcHJlZml4fSR7cHJvcHMucGFyYW1zLnVybH1gO1xufSk7XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5mdW5jdGlvbiBzdWJzdGl0dXRlX2lmaWQocGFyYW1zX3RvX2Zvcm1hdCwgY3VycmVudF9pZmlkKSB7XG4gIGxldCBuZXdfZm9ybWF0dGVkX3BhcmFtcyA9IHt9O1xuICBmb3IgKGNvbnN0IHBhcmFtIGluIChwYXJhbXNfdG9fZm9ybWF0KSkge1xuICAgIGlmIChwYXJhbXNfdG9fZm9ybWF0W3BhcmFtXS5jb250YWlucygnJElGSUQkJykpIHtcbiAgICAgIC8qIENvbnRhaW5zICRJRklEJCwgc3Vic3RpdHV0ZSB3aXRoIHRoZSBpbnRlcmZhY2UgaWQgKi9cbiAgICAgIG5ld19mb3JtYXR0ZWRfcGFyYW1zW3BhcmFtXSA9IHBhcmFtc190b19mb3JtYXRbcGFyYW1dLnJlcGxhY2UoJyRJRklEJCcsIGN1cnJlbnRfaWZpZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8qIGRvZXMgTk9UIENvbnRhaW5zICRJRklEJCwgYWRkIHRoZSBwbGFpbiBwYXJhbSAqL1xuICAgICAgbmV3X2Zvcm1hdHRlZF9wYXJhbXNbcGFyYW1dID0gcGFyYW1zX3RvX2Zvcm1hdFtwYXJhbV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ld19mb3JtYXR0ZWRfcGFyYW1zO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuZnVuY3Rpb24gc3Vic3RpdHV0ZV9leHBvcnRlcihwYXJhbXNfdG9fZm9ybWF0LCBjdXJyZW50X2V4cG9ydGVyKSB7XG4gIGxldCBuZXdfZm9ybWF0dGVkX3BhcmFtcyA9IHt9O1xuICBmb3IgKGNvbnN0IHBhcmFtIGluIChwYXJhbXNfdG9fZm9ybWF0KSkge1xuICAgIGlmIChwYXJhbXNfdG9fZm9ybWF0W3BhcmFtXS5jb250YWlucygnJEVYUE9SVEVSJCcpKSB7XG4gICAgICAvKiBDb250YWlucyAkRVhQT1JURVIkLCBzdWJzdGl0dXRlIHdpdGggdGhlIGludGVyZmFjZSBpZCAqL1xuICAgICAgbmV3X2Zvcm1hdHRlZF9wYXJhbXNbcGFyYW1dID0gcGFyYW1zX3RvX2Zvcm1hdFtwYXJhbV0ucmVwbGFjZSgnJEVYUE9SVEVSJCcsIGN1cnJlbnRfZXhwb3J0ZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvKiBkb2VzIE5PVCBDb250YWlucyAkRVhQT1JURVIkLCBhZGQgdGhlIHBsYWluIHBhcmFtICovXG4gICAgICBuZXdfZm9ybWF0dGVkX3BhcmFtc1twYXJhbV0gPSBwYXJhbXNfdG9fZm9ybWF0W3BhcmFtXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3X2Zvcm1hdHRlZF9wYXJhbXM7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG5mdW5jdGlvbiBzdWJzdGl0dXRlX25ldHdvcmsocGFyYW1zX3RvX2Zvcm1hdCwgY3VycmVudF9uZXR3b3JrKSB7XG4gIGxldCBuZXdfZm9ybWF0dGVkX3BhcmFtcyA9IHt9O1xuICBmb3IgKGNvbnN0IHBhcmFtIGluIChwYXJhbXNfdG9fZm9ybWF0KSkge1xuICAgIGlmIChwYXJhbXNfdG9fZm9ybWF0W3BhcmFtXS5jb250YWlucygnJE5FVFdPUkskJykpIHtcbiAgICAgIC8qIENvbnRhaW5zICRORVRXT1JLJCwgc3Vic3RpdHV0ZSB3aXRoIHRoZSBpbnRlcmZhY2UgaWQgKi9cbiAgICAgIG5ld19mb3JtYXR0ZWRfcGFyYW1zW3BhcmFtXSA9IHBhcmFtc190b19mb3JtYXRbcGFyYW1dLnJlcGxhY2UoJyRORVRXT1JLJCcsIGN1cnJlbnRfbmV0d29yayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8qIGRvZXMgTk9UIENvbnRhaW5zICRORVRXT1JLJCwgYWRkIHRoZSBwbGFpbiBwYXJhbSAqL1xuICAgICAgbmV3X2Zvcm1hdHRlZF9wYXJhbXNbcGFyYW1dID0gcGFyYW1zX3RvX2Zvcm1hdFtwYXJhbV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ld19mb3JtYXR0ZWRfcGFyYW1zO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIHN1YnN0aXR1dGUgdG8gdGhlICRJRklEJCBmb3VuZCBpbiB0aGVcbiAqIGNvbmZpZ3VyYXRpb24gdGhlIGNvcnJlY3QgaW50ZXJmYWNlIGlkXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGZvcm1hdF9pZmlkcyhwYXJhbXNfdG9fZm9ybWF0KSB7XG4gIGlmICh0c19yZXF1ZXN0LnZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAvKiBBbHJlYWR5IHBvcHVsYXRlZCwgcmV0dXJuICovXG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGlmaWRfdXJsID0gXCJsdWEvcmVzdC92Mi9nZXQvbnRvcG5nL2ludGVyZmFjZXMubHVhXCJcbiAgY29uc3QgaWZpZF9saXN0ID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KGAke2h0dHBfcHJlZml4fS8ke2lmaWRfdXJsfWApIHx8IFtdO1xuICBpZmlkX2xpc3QuZm9yRWFjaCgoaWZhY2UpID0+IHtcbiAgICBsZXQgbmV3X2Zvcm1hdHRlZF9wYXJhbXMgPSBzdWJzdGl0dXRlX2lmaWQocGFyYW1zX3RvX2Zvcm1hdCwgaWZhY2UuaWZpZCk7XG4gICAgbmV3X2Zvcm1hdHRlZF9wYXJhbXMuc291cmNlX2RlZiA9IFtpZmFjZS5pZmlkXVxuICAgIHRzX3JlcXVlc3QudmFsdWUucHVzaChuZXdfZm9ybWF0dGVkX3BhcmFtcyk7XG4gIH0pO1xufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIHN1YnN0aXR1dGUgdG8gdGhlICRFWFBPUlRFUiQgZm91bmQgaW4gdGhlXG4gKiBjb25maWd1cmF0aW9uIHRoZSBjb3JyZWN0IGZsb3cgZXhwb3J0ZXJcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZm9ybWF0X2V4cG9ydGVycyhwYXJhbXNfdG9fZm9ybWF0KSB7XG4gIGlmICh0c19yZXF1ZXN0LnZhbHVlLmxlbmd0aCA+IDApIHtcbiAgICAvKiBBbHJlYWR5IHBvcHVsYXRlZCwgcmV0dXJuICovXG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGV4cG9ydGVyc191cmwgPSBcImx1YS9wcm8vcmVzdC92Mi9nZXQvZmxvd2RldmljZXMvc3RhdHMubHVhXCJcbiAgY29uc3QgZXhwb3J0ZXJzX2xpc3QgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QoYCR7aHR0cF9wcmVmaXh9LyR7ZXhwb3J0ZXJzX3VybH0/aWZpZD0ke3Byb3BzLmlmaWR9Jmd1aT10cnVlYCkgfHwgW107XG4gIGlmIChleHBvcnRlcnNfbGlzdCkge1xuICAgIGV4cG9ydGVyc19saXN0LmZvckVhY2goKGV4cG9ydGVyKSA9PiB7XG4gICAgICBpZiAoZXhwb3J0ZXIpIHtcbiAgICAgICAgbGV0IG5ld19mb3JtYXR0ZWRfcGFyYW1zID0gc3Vic3RpdHV0ZV9leHBvcnRlcihwYXJhbXNfdG9fZm9ybWF0LCBleHBvcnRlci5wcm9iZV9pcCk7XG4gICAgICAgIG5ld19mb3JtYXR0ZWRfcGFyYW1zID0gc3Vic3RpdHV0ZV9pZmlkKG5ld19mb3JtYXR0ZWRfcGFyYW1zLCBleHBvcnRlci5pZmlkKTtcbiAgICAgICAgbmV3X2Zvcm1hdHRlZF9wYXJhbXMuc291cmNlX2RlZiA9IFtleHBvcnRlci5pZmlkLCBleHBvcnRlci5wcm9iZV9pcF1cbiAgICAgICAgdHNfcmVxdWVzdC52YWx1ZS5wdXNoKG5ld19mb3JtYXR0ZWRfcGFyYW1zKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIHN1YnN0aXR1dGUgdG8gdGhlICRORVRXT1JLJCBmb3VuZCBpbiB0aGVcbiAqIGNvbmZpZ3VyYXRpb24gaW4gdGhlIGNvcnJlY3QgbmV0d29ya3NcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZm9ybWF0X25ldHdvcmtzKHBhcmFtc190b19mb3JtYXQpIHtcbiAgaWYgKHRzX3JlcXVlc3QudmFsdWUubGVuZ3RoID4gMCkge1xuICAgIC8qIEFscmVhZHkgcG9wdWxhdGVkLCByZXR1cm4gKi9cbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgbmV0d29ya3NfdXJsID0gXCJsdWEvcmVzdC92Mi9nZXQvbmV0d29yay9uZXR3b3Jrcy5sdWFcIlxuICBjb25zdCBuZXR3b3Jrc19saXN0ID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KGAke2h0dHBfcHJlZml4fS8ke25ldHdvcmtzX3VybH0/aWZpZD0ke3Byb3BzLmlmaWR9YCkgfHwgW107XG4gIGlmIChuZXR3b3Jrc19saXN0KSB7XG4gICAgbmV0d29ya3NfbGlzdC5mb3JFYWNoKChuZXR3b3JrKSA9PiB7XG4gICAgICBpZiAobmV0d29yaykge1xuICAgICAgICBsZXQgbmV3X2Zvcm1hdHRlZF9wYXJhbXMgPSBzdWJzdGl0dXRlX25ldHdvcmsocGFyYW1zX3RvX2Zvcm1hdCwgbmV0d29yay5pZCk7XG4gICAgICAgIG5ld19mb3JtYXR0ZWRfcGFyYW1zID0gc3Vic3RpdHV0ZV9pZmlkKG5ld19mb3JtYXR0ZWRfcGFyYW1zLCBwcm9wcy5pZmlkKTtcbiAgICAgICAgbmV3X2Zvcm1hdHRlZF9wYXJhbXMuc291cmNlX2RlZiA9IFtwcm9wcy5pZmlkLCBuZXR3b3JrLmlkXTtcbiAgICAgICAgdHNfcmVxdWVzdC52YWx1ZS5wdXNoKG5ld19mb3JtYXR0ZWRfcGFyYW1zKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIHRyYW5zZm9ybSB0aGUgJEFOWSQgcGFyYW1zIGluIHRoZSBcbiAqIGNvcnJlY3QgdmFsdWUgKGUuZy4gJEFOWV9JRklEJCAtPiBsaXN0IG9mIGFsbCBpZmlkKVxuICovXG5hc3luYyBmdW5jdGlvbiByZXNvbHZlX2FueV9wYXJhbXMoKSB7XG4gIC8qIENsZWFyIHRoZSBBcnJheSAqL1xuICB0c19yZXF1ZXN0LnZhbHVlID0gW107XG4gIC8qIEhlcmUgcG9zc2libGUgQU5ZLCBjYW4gYmUgZm91bmQgaW4gdGhlIHBvc3RfcGFyYW1zICovXG4gIGNvbnN0IHBhcmFtcyA9IHByb3BzLnBhcmFtcy5wb3N0X3BhcmFtcz8udHNfcmVxdWVzdHM7XG4gIGZvciAoY29uc3QgYW55X3BhcmFtIGluIChwYXJhbXMgfHwge30pKSB7XG4gICAgc3dpdGNoIChhbnlfcGFyYW0pIHtcbiAgICAgIGNhc2UgJyRBTllfSUZJRCQnOlxuICAgICAgICBhd2FpdCBmb3JtYXRfaWZpZHMocGFyYW1zW2FueV9wYXJhbV0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJyRBTllfRVhQT1JURVIkJzpcbiAgICAgICAgYXdhaXQgZm9ybWF0X2V4cG9ydGVycyhwYXJhbXNbYW55X3BhcmFtXSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnJEFOWV9ORVRXT1JLJCc6XG4gICAgICAgIGF3YWl0IGZvcm1hdF9uZXR3b3JrcyhwYXJhbXNbYW55X3BhcmFtXSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbGV0IG5ld19mb3JtYXR0ZWRfcGFyYW1zID0gc3Vic3RpdHV0ZV9pZmlkKHBhcmFtc1thbnlfcGFyYW1dLCBwcm9wcy5pZmlkKTtcbiAgICAgICAgbmV3X2Zvcm1hdHRlZF9wYXJhbXMuc291cmNlX2RlZiA9IFtwcm9wcy5pZmlkXTtcbiAgICAgICAgdHNfcmVxdWVzdC52YWx1ZS5wdXNoKG5ld19mb3JtYXR0ZWRfcGFyYW1zKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBUaGUgc291cmNlX3R5cGUgY2FuIGJlIGZvdW5kIG9uIHRoZSBqc29uIGFuZCB0aGUgc291cmNlX2FycmF5IGlzIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkXG4gKiBieSB1c2luZyB0aGUgc291cmNlX3R5cGVcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0X3RpbWVzZXJpZXNfZ3JvdXBzX2Zyb21fbWV0cmljKG1ldHJpY19zY2hlbWEsIHNvdXJjZV9kZWYpIHtcbiAgY29uc3Qgc3RhdHVzID0ge1xuICAgIGVwb2NoX2JlZ2luOiBwcm9wcy5lcG9jaF9iZWdpbixcbiAgICBlcG9jaF9lbmQ6IHByb3BzLmVwb2NoX2VuZCxcbiAgfTtcbiAgY29uc3Qgc291cmNlX3R5cGUgPSBtZXRyaWNzTWFuYWdlci5nZXRfc291cmNlX3R5cGVfZnJvbV9pZChwcm9wcy5wYXJhbXM/LnNvdXJjZV90eXBlKTtcbiAgY29uc3Qgc291cmNlX2FycmF5ID0gYXdhaXQgbWV0cmljc01hbmFnZXIuZ2V0X3NvdXJjZV9hcnJheV9mcm9tX3ZhbHVlX2FycmF5KGh0dHBfcHJlZml4LCBzb3VyY2VfdHlwZSwgc291cmNlX2RlZik7XG4gIGNvbnN0IG1ldHJpYyA9IGF3YWl0IG1ldHJpY3NNYW5hZ2VyLmdldF9tZXRyaWNfZnJvbV9zY2hlbWEoaHR0cF9wcmVmaXgsIHNvdXJjZV90eXBlLCBzb3VyY2VfYXJyYXksIG1ldHJpY19zY2hlbWEsIG51bGwsIHN0YXR1cyk7XG4gIGNvbnN0IHRzX2dyb3VwID0gbWV0cmljc01hbmFnZXIuZ2V0X3RzX2dyb3VwKHNvdXJjZV90eXBlLCBzb3VyY2VfYXJyYXksIG1ldHJpYyk7XG4gIHJldHVybiB0c19ncm91cDtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbmFzeW5jIGZ1bmN0aW9uIHJldHJpZXZlX2Jhc2ljX2luZm8oKSB7XG4gIC8qIFJldHVybiB0aGUgdGltZXNlcmllcyBncm91cCwgaW5mbyBmb3VuZCBpbiB0aGUganNvbiAqL1xuICBpZiAodGltZXNlcmllc19ncm91cHMudmFsdWUubGVuZ3RoID09IDApIHtcbiAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHRzX3JlcXVlc3QudmFsdWUpIHtcbiAgICAgIGNvbnN0IG1ldHJpY19zY2hlbWEgPSB2YWx1ZT8udHNfc2NoZW1hO1xuICAgICAgY29uc3Qgc291cmNlX2RlZiA9IHZhbHVlLnNvdXJjZV9kZWY7XG4gICAgICBkZWxldGUgdmFsdWUuc291cmNlX2RlZiAvKiBSZW1vdmUgdGhlIHByb3BlcnR5IG90aGVyd2lzZSBpdCdzIGdvaW5nIHRvIGJlIGFkZGVkIHRvIHRoZSBSRVNUICovXG4gICAgICBjb25zdCBncm91cCA9IGF3YWl0IGdldF90aW1lc2VyaWVzX2dyb3Vwc19mcm9tX21ldHJpYyhtZXRyaWNfc2NoZW1hLCBzb3VyY2VfZGVmKTtcbiAgICAgIHRpbWVzZXJpZXNfZ3JvdXBzLnZhbHVlLnB1c2goZ3JvdXApO1xuICAgIH1cbiAgfVxufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogUmVtb3ZlIHRoZSBwcm9wZXJ0eSBvdGhlcndpc2UgaXQncyBnb2luZyB0byBiZSBhZGRlZCB0byB0aGUgUkVTVCAqL1xuZnVuY3Rpb24gcmVtb3ZlX2V4dHJhX3BhcmFtcygpIHtcbiAgZm9yIChjb25zdCB2YWx1ZSBvZiB0c19yZXF1ZXN0LnZhbHVlKSB7XG4gICAgaWYgKHZhbHVlLnNvdXJjZV9kZWYpIHtcbiAgICAgIGRlbGV0ZSB2YWx1ZS5zb3VyY2VfZGVmXG4gICAgfVxuICB9XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBUaGlzIGZ1bmN0aW9uIHJ1biB0aGUgUkVTVCBBUEkgd2l0aCB0aGUgZGF0YSAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0X2NoYXJ0X29wdGlvbnMoKSB7XG4gIGF3YWl0IHJlc29sdmVfYW55X3BhcmFtcygpO1xuICBhd2FpdCByZXRyaWV2ZV9iYXNpY19pbmZvKCk7XG4gIHJlbW92ZV9leHRyYV9wYXJhbXMoKTtcbiAgY29uc3QgdXJsID0gYmFzZV91cmwudmFsdWU7XG4gIGNvbnN0IHBvc3RfcGFyYW1zID0ge1xuICAgIGNzcmY6IHByb3BzLmNzcmYsXG4gICAgaWZpZDogcHJvcHMuaWZpZCxcbiAgICBlcG9jaF9iZWdpbjogcHJvcHMuZXBvY2hfYmVnaW4sXG4gICAgZXBvY2hfZW5kOiBwcm9wcy5lcG9jaF9lbmQsXG4gICAgLi4ucHJvcHMucGFyYW1zLnBvc3RfcGFyYW1zLFxuICAgIC4uLntcbiAgICAgIHRzX3JlcXVlc3RzOiB0c19yZXF1ZXN0LnZhbHVlXG4gICAgfVxuICB9XG4gIC8qIEhhdmUgdG8gYmUgdXNlZCB0aGlzIGdldF9jb21wb25lbnRfZGF0YSwgaW4gb3JkZXIgdG8gY3JlYXRlIHJlcG9ydCB0b28gKi9cbiAgbGV0IHJlc3VsdCA9IGF3YWl0IHByb3BzLmdldF9jb21wb25lbnRfZGF0YSh1cmwsICcnLCBwb3N0X3BhcmFtcyk7XG4gIC8qIEZvcm1hdCB0aGUgcmVzdWx0IGluIHRoZSBmb3JtYXQgbmVlZGVkIGJ5IER5Z3JhcGggKi9cbiAgcmVzdWx0ID0gdGltZXNlcmllc1V0aWxzLnRzQXJyYXlUb09wdGlvbnNBcnJheShyZXN1bHQsIHRpbWVzZXJpZXNfZ3JvdXBzLnZhbHVlLCBncm91cF9vcHRpb25fbW9kZSwgJycpO1xuICBpZiAocmVzdWx0WzBdKSB7XG4gICAgcmVzdWx0WzBdLmhlaWdodCA9IGhlaWdodC52YWx1ZTtcbiAgfVxuICByZXR1cm4gcmVzdWx0Py5bMF07XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBXYXRjaCAtIGRldGVjdCBjaGFuZ2VzIG9uIGVwb2NoX2JlZ2luIC8gZXBvY2hfZW5kIGFuZCByZWZyZXNoIHRoZSBjb21wb25lbnQgKi9cbndhdGNoKCgpID0+IFtwcm9wcy5lcG9jaF9iZWdpbiwgcHJvcHMuZXBvY2hfZW5kLCBwcm9wcy5maWx0ZXJzXSwgKGN1cl92YWx1ZSwgb2xkX3ZhbHVlKSA9PiB7XG4gIHJlZnJlc2hfY2hhcnQoKTtcbn0sIHsgZmx1c2g6ICdwcmUnLCBkZWVwOiB0cnVlIH0pO1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogUnVuIHRoZSBpbml0IGhlcmUgKi9cbm9uQmVmb3JlTW91bnQoYXN5bmMgKCkgPT4ge1xuICBhd2FpdCBpbml0KCk7XG59KTtcblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbm9uTW91bnRlZChhc3luYyAoKSA9PiB7IH0pO1xuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogRGVmaW5pbmcgdGhlIG5lZWRlZCBpbmZvIGJ5IHRoZSBnZXRfY2hhcnRfb3B0aW9ucyBmdW5jdGlvbiAqL1xuYXN5bmMgZnVuY3Rpb24gaW5pdCgpIHtcbiAgaGVpZ2h0LnZhbHVlID0gKHByb3BzLm1heF9oZWlnaHQgfHwgNCkgKiBoZWlnaHRfcGVyX3Jvdztcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIFJlZnJlc2ggZnVuY3Rpb24gKi9cbmFzeW5jIGZ1bmN0aW9uIHJlZnJlc2hfY2hhcnQoKSB7XG4gIGlmIChjaGFydC52YWx1ZSkge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGdldF9jaGFydF9vcHRpb25zKCk7XG4gICAgY2hhcnQudmFsdWUudXBkYXRlX2NoYXJ0X3NlcmllcyhyZXN1bHQuZGF0YSk7XG4gIH1cbn1cbjwvc2NyaXB0PlxuXG4iLCI8IS0tXG4gIChDKSAyMDIzIC0gbnRvcC5vcmdcbi0tPlxuXG48dGVtcGxhdGU+XG48ZGl2IHJlZj1cImJvZHlfZGl2XCI+XG4gIDxTYW5rZXlcbiAgICByZWY9XCJzYW5rZXlfY2hhcnRcIlxuICAgIDp3aWR0aD1cIndpZHRoXCJcbiAgICA6aGVpZ2h0PVwiaGVpZ2h0XCJcbiAgICA6bm9fZGF0YV9tZXNzYWdlPVwibm9fZGF0YV9tZXNzYWdlXCJcbiAgICA6c2Fua2V5X2RhdGE9XCJzYW5rZXlfZGF0YVwiXG4gICAgQG5vZGVfY2xpY2s9XCJvbl9ub2RlX2NsaWNrXCI+XG4gIDwvU2Fua2V5PiBcbjwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgb25Nb3VudGVkLCBvbkJlZm9yZU1vdW50LCB3YXRjaCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU2Fua2V5IH0gZnJvbSBcIi4vc2Fua2V5LnZ1ZVwiO1xuXG5jb25zdCBfaTE4biA9ICh0KSA9PiBpMThuKHQpO1xuY29uc3Qgbm9fZGF0YV9tZXNzYWdlID0gX2kxOG4oJ3BvcnRzX2FuYWx5c2lzLm5vX2RhdGEnKVxuXG5jb25zdCBzYW5rZXlfY2hhcnQgPSByZWYobnVsbCk7XG5jb25zdCBzYW5rZXlfZGF0YSA9IHJlZih7fSk7XG5jb25zdCBib2R5X2RpdiA9IHJlZihudWxsKTtcbmNvbnN0IHdpZHRoID0gcmVmKG51bGwpO1xuY29uc3QgaGVpZ2h0ID0gcmVmKG51bGwpO1xuY29uc3QgaGVpZ2h0X3Blcl9yb3cgPSA2Mi41IC8qIHB4ICovXG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIGlkOiBTdHJpbmcsICAgICAgICAgIC8qIENvbXBvbmVudCBJRCAqL1xuICAgIGkxOG5fdGl0bGU6IFN0cmluZywgIC8qIFRpdGxlIChpMThuKSAqL1xuICAgIGlmaWQ6IFN0cmluZywgICAgICAgIC8qIEludGVyZmFjZSBJRCAqL1xuICAgIGVwb2NoX2JlZ2luOiBOdW1iZXIsIC8qIFRpbWUgaW50ZXJ2YWwgYmVnaW4gKi9cbiAgICBlcG9jaF9lbmQ6IE51bWJlciwgICAvKiBUaW1lIGludGVydmFsIGVuZCAqL1xuICAgIG1heF93aWR0aDogTnVtYmVyLCAgIC8qIENvbXBvbmVudCBXaWR0aCAoNCwgOCwgMTIpICovXG4gICAgbWF4X2hlaWdodDogTnVtYmVyLCAgLyogQ29tcG9uZW50IEhlaGdodCAoNCwgOCwgMTIpKi9cbiAgICBwYXJhbXM6IE9iamVjdCwgICAgICAvKiBDb21wb25lbnQtc3BlY2lmaWMgcGFyYW1ldGVycyBmcm9tIHRoZSBKU09OIHRlbXBsYXRlIGRlZmluaXRpb24gKi9cbiAgICBnZXRfY29tcG9uZW50X2RhdGE6IEZ1bmN0aW9uLCAvKiBDYWxsYmFjayB0byByZXF1ZXN0IGRhdGEgKFJFU1QpICovXG4gICAgZmlsdGVyczogT2JqZWN0XG59KTtcblxuLyogV2F0Y2ggLSBkZXRlY3QgY2hhbmdlcyBvbiBlcG9jaF9iZWdpbiAvIGVwb2NoX2VuZCBhbmQgcmVmcmVzaCB0aGUgY29tcG9uZW50ICovXG53YXRjaCgoKSA9PiBbcHJvcHMuZXBvY2hfYmVnaW4sIHByb3BzLmVwb2NoX2VuZCwgcHJvcHMuZmlsdGVyc10sIChjdXJfdmFsdWUsIG9sZF92YWx1ZSkgPT4ge1xuICAgIHVwZGF0ZV9zYW5rZXkoKTtcbn0sIHsgZmx1c2g6ICdwcmUnLCBkZWVwOiB0cnVlIH0pO1xuXG5vbkJlZm9yZU1vdW50KCgpID0+IHtcbn0pO1xuXG5vbk1vdW50ZWQoKCkgPT4ge1xuICAgIHVwZGF0ZV9oZWlnaHQoKTtcbiAgICB1cGRhdGVfd2lkdGgoKTtcblxuICAgIGluaXQoKTtcbn0pO1xuXG5mdW5jdGlvbiBpbml0KCkge1xuICAgIHVwZGF0ZV9zYW5rZXkoKTtcbn1cblxuY29uc3QgdXBkYXRlX3NhbmtleSA9IGZ1bmN0aW9uKCkge1xuICBzZXRfc2Fua2V5X2RhdGEoKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gc2V0X3NhbmtleV9kYXRhKCkge1xuICAgIGxldCBkYXRhID0gYXdhaXQgZ2V0X3NhbmtleV9kYXRhKCk7ICAgIFxuICAgIHNhbmtleV9kYXRhLnZhbHVlID0gZGF0YTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0X3NhbmtleV9kYXRhKCkge1xuICAgIGNvbnN0IHVybCA9IGAke2h0dHBfcHJlZml4fSR7cHJvcHMucGFyYW1zLnVybH1gO1xuXG4gICAgY29uc3QgcXVlcnlfcGFyYW1zID0ge1xuICAgICAgICBpZmlkOiBwcm9wcy5pZmlkLFxuICAgICAgICAgZXBvY2hfYmVnaW46IHByb3BzLmVwb2NoX2JlZ2luLFxuICAgICAgICAgZXBvY2hfZW5kOiBwcm9wcy5lcG9jaF9lbmQsXG4gICAgICAgICBzYW5rZXlfdmVyc2lvbjogMyxcbiAgICAgICAgIC4uLnByb3BzLnBhcmFtcy51cmxfcGFyYW1zLFxuICAgICAgICAuLi5wcm9wcy5maWx0ZXJzXG4gICAgfVxuICAgIGxldCB1cmxfcGFyYW1zID0gbnRvcG5nX3VybF9tYW5hZ2VyLm9ial90b191cmxfcGFyYW1zKHF1ZXJ5X3BhcmFtcyk7XG5cbiAgICBsZXQgZ3JhcGggPSBhd2FpdCBwcm9wcy5nZXRfY29tcG9uZW50X2RhdGEodXJsLCB1cmxfcGFyYW1zKTtcblxuICAgIGdyYXBoID0gbWFrZV9jb21wbGV0ZV9ncmFwaChncmFwaCk7XG5cbiAgICBjb25zdCBzYW5rZXlfZGF0YSA9IGdldF9zYW5rZXlfZGF0YV9mcm9tX3Jlc3RfZGF0YShncmFwaCk7XG4gICAgXG4gICAgLyogSW4gY2FzZSBubyBkYXRhIGlzIHJldHVybmVkLCBzaG93IHRoZSBObyBEYXRhIG1lc3NhZ2UgKi9cbiAgICAoc2Fua2V5X2RhdGEubGlua3MubGVuZ3RoID4gMCAmJiBzYW5rZXlfZGF0YS5ub2Rlcy5sZW5ndGggPiAwKSA/IFxuICAgICAgICBzYW5rZXlfY2hhcnQudmFsdWUuc2V0X25vX2RhdGFfZmxhZyhmYWxzZSkgOiBcbiAgICAgICAgc2Fua2V5X2NoYXJ0LnZhbHVlLnNldF9ub19kYXRhX2ZsYWcodHJ1ZSk7XG4gIFxuICAgIHJldHVybiBzYW5rZXlfZGF0YTtcbn1cblxuLy8gcmVtb3ZlIGFsbCBsaW5rcyB3aXRoIGEgbm90IGV4aXN0aW5nIG5vZGVcbmZ1bmN0aW9uIG1ha2VfY29tcGxldGVfZ3JhcGgoZ3JhcGgpIHtcbiAgICBsZXQgZl9sb2dfbGluayA9IChsKSA9PiBjb25zb2xlLmVycm9yKGBsaW5rIChzb3VyY2U6ICR7bC5zb3VyY2Vfbm9kZV9pZH0sIHRhcmdldDogJHtsLnRhcmdldF9ub2RlX2lkfSkgcmVtb3ZlZCBmb3Igbm90IGV4aXN0aW5nIHNvdXJjZS90YXJnZXQgbm9kZWApOyAgICBcbiAgICBsZXQgbGlua3MgPSBnZXRfbGlua3Nfd2l0aF9leGlzdGluZ19ub2RlKGdyYXBoLCBmX2xvZ19saW5rKTtcbiAgICByZXR1cm4geyBub2RlczogZ3JhcGgubm9kZXMsIGxpbmtzIH07XG59XG5cbmZ1bmN0aW9uIGdldF9saW5rc193aXRoX2V4aXN0aW5nX25vZGUoZ3JhcGgsIGZfbG9nKSB7XG4gICAgbGV0IG5vZGVfZGljdCA9IHt9O1xuICAgIGdyYXBoLm5vZGVzLmZvckVhY2goKG4pID0+IG5vZGVfZGljdFtuLm5vZGVfaWRdID0gdHJ1ZSk7XG4gICAgbGV0IGZfZmlsdGVyID0gKGwpID0+IG5vZGVfZGljdFtsLnNvdXJjZV9ub2RlX2lkXSAhPSBudWxsICYmIG5vZGVfZGljdFtsLnRhcmdldF9ub2RlX2lkXSAhPSBudWxsOyAgICBcbiAgICBsZXQgbGlua3MgPSBmaWx0ZXJfbG9nKGdyYXBoLmxpbmtzLCBmX2ZpbHRlciwgZl9sb2cpO1xuICAgIHJldHVybiBsaW5rcztcbn1cblxuZnVuY3Rpb24gZ2V0X25vZGVzX3dpdGhfZXhpc3RpbmdfbGluayhncmFwaCwgZl9sb2cpIHtcbiAgICBsZXQgbGlua19zb3VyY2VfZGljdCA9IHt9O1xuICAgIGxldCBsaW5rX3RhcmdldF9kaWN0ID0ge307XG4gICAgZ3JhcGgubGlua3MuZm9yRWFjaCgobCkgPT4ge1xuXHRsaW5rX3NvdXJjZV9kaWN0W2wuc291cmNlX25vZGVfaWRdID0gdHJ1ZTtcblx0bGlua190YXJnZXRfZGljdFtsLnRhcmdldF9ub2RlX2lkXSA9IHRydWU7XG4gICAgfSk7XG4gICAgbGV0IGZfZmlsdGVyID0gKG4pID0+IGxpbmtfc291cmNlX2RpY3Rbbi5ub2RlX2lkXSA9PSB0cnVlIHx8IGxpbmtfdGFyZ2V0X2RpY3Rbbi5ub2RlX2lkXSA9PSB0cnVlO1xuICAgIGxldCBub2RlcyA9IGZpbHRlcl9sb2coZ3JhcGgubm9kZXMsIGZfZmlsdGVyLCBmX2xvZyk7XG4gICAgcmV0dXJuIG5vZGVzO1xufVxuXG4vLyBsb2cgZWxlbWVudHMgZGVsZXRlZCBpZiBmX2xvZyAhPSBudWxsXG5mdW5jdGlvbiBmaWx0ZXJfbG9nKGVsZW1lbnRzLCBmX2ZpbHRlciwgZl9sb2cpIHtcbiAgICByZXR1cm4gZWxlbWVudHMuZmlsdGVyKChlKSA9PiB7XG5cdGNvbnN0IHRha2VfZWxlbWVudCA9IGZfZmlsdGVyKGUpO1xuXHRpZiAodGFrZV9lbGVtZW50ID09IGZhbHNlICYmIGZfbG9nICE9IG51bGwpIHtcblx0ICAgIGZfbG9nKGUpO1xuXHR9XG5cdHJldHVybiB0YWtlX2VsZW1lbnQ7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldF9zYW5rZXlfZGF0YV9mcm9tX3Jlc3RfZGF0YShyZXMpIHtcbiAgICBsZXQgbm9kZV9kaWN0ID0ge30sIGxpbmtfdG9fbm9kZXNfZGljdCA9IHt9O1xuICAgIC8vIGNyZWF0ZSBhIG5vZGUgZGljdFxuICAgIHJlcy5ub2Rlcy5mb3JFYWNoKChub2RlKSA9PiBub2RlX2RpY3Rbbm9kZS5ub2RlX2lkXSA9IG5vZGUpO1xuICAgIFxuICAgIGxldCBmX2dldF9saW5rX25vZGVfaWQgPSAobGluaykgPT4ge1xuXHRyZXR1cm4gYCR7bGluay5zb3VyY2Vfbm9kZV9pZH1fJHtsaW5rLmxhYmVsfWA7IFxuICAgIH07XG4gICAgLy8gbWVyZ2UgYWxsIGxpbmtzIGJ5IGxhYmVsXG4gICAgcmVzLmxpbmtzLmZvckVhY2goKGxpbmspID0+IHtcblx0bGV0IGxpbmtfbm9kZV9pZCA9IGZfZ2V0X2xpbmtfbm9kZV9pZChsaW5rKTtcblx0bGV0IGxpbmtfdG9fbm9kZXMgPSBsaW5rX3RvX25vZGVzX2RpY3RbbGlua19ub2RlX2lkXTtcblx0aWYgKGxpbmtfdG9fbm9kZXMgPT0gbnVsbCkge1xuXHQgICAgbGlua190b19ub2RlcyA9IHtcblx0XHRpZDogbGlua19ub2RlX2lkLFxuXHRcdGxhYmVsOiBsaW5rLmxhYmVsLFxuICAgIGxpbms6IGxpbmsub3B0aW9uYWxfaW5mby5saW5rLFxuXHRcdG5vZGVfbGlua3M6IFtdLFx0XHRcblx0ICAgIH07XG5cdCAgICBsaW5rX3RvX25vZGVzX2RpY3RbbGlua19ub2RlX2lkXSA9IGxpbmtfdG9fbm9kZXM7XG5cdH1cblx0bGlua190b19ub2Rlcy5ub2RlX2xpbmtzLnB1c2goe1xuXHQgICAgc291cmNlOiBub2RlX2RpY3RbbGluay5zb3VyY2Vfbm9kZV9pZF0sXG5cdCAgICB0YXJnZXQ6IG5vZGVfZGljdFtsaW5rLnRhcmdldF9ub2RlX2lkXSxcblx0ICAgIHZhbHVlOiBsaW5rLnZhbHVlLFxuXHR9KTtcdFxuICAgIH0pO1xuICAgIFxuICAgIC8vIGNyZWF0ZSBub2RlcyBhbmQgbGlua3NcbiAgICBsZXQgbm9kZXMgPSByZXMubm9kZXMubWFwKChuKSA9PiBuKSwgbGlua3MgPSBbXTtcbiAgICBmb3IgKGxldCBsaW5rX25vZGVfaWQgaW4gbGlua190b19ub2Rlc19kaWN0KSB7XG5cdGxldCBsaW5rX3RvX25vZGVzID0gbGlua190b19ub2Rlc19kaWN0W2xpbmtfbm9kZV9pZF07XG5cdGxldCBsaW5rX25vZGUgPSB7XG5cdCAgICBub2RlX2lkOiBsaW5rX3RvX25vZGVzLmlkLFxuXHQgICAgbGFiZWw6IGxpbmtfdG9fbm9kZXMubGFiZWwsXG4gICAgICBsaW5rOiBsaW5rX3RvX25vZGVzLmxpbmssXG5cdH07XG5cdG5vZGVzLnB1c2gobGlua19ub2RlKTtcblx0bGlua190b19ub2Rlcy5ub2RlX2xpbmtzLmZvckVhY2goKGxpbmspID0+IHtcblx0ICAgIGxpbmtzLnB1c2goe1xuXHRcdHNvdXJjZV9ub2RlX2lkOiBsaW5rLnNvdXJjZS5ub2RlX2lkLFxuXHRcdHRhcmdldF9ub2RlX2lkOiBsaW5rX25vZGUubm9kZV9pZCxcblx0XHRsYWJlbDogYCR7bGluay5zb3VyY2UubGFiZWx9IC0gJHtsaW5rLnRhcmdldC5sYWJlbH06ICR7bGlua19ub2RlLmxhYmVsfWAsXG5cdFx0dmFsdWU6IGxpbmsudmFsdWUsXG5cdCAgICB9KTtcblx0ICAgIGxpbmtzLnB1c2goe1xuXHRcdHNvdXJjZV9ub2RlX2lkOiBsaW5rX25vZGUubm9kZV9pZCxcblx0XHR0YXJnZXRfbm9kZV9pZDogbGluay50YXJnZXQubm9kZV9pZCxcblx0XHRsYWJlbDogYCR7bGluay5zb3VyY2UubGFiZWx9IC0gJHtsaW5rLnRhcmdldC5sYWJlbH06ICR7bGlua19ub2RlLmxhYmVsfWAsXG5cdFx0dmFsdWU6IGxpbmsudmFsdWUsXG5cdCAgICB9KTtcblx0fSk7XG4gICAgfVxuICAgIGxldCBzYW5rZXlfbm9kZXMgPSBub2Rlcy5tYXAoKG4sIGluZGV4KSA9PiB7XG5cdHJldHVybiB7IGluZGV4LCBsYWJlbDogbi5sYWJlbCwgZGF0YTogbiB9O1xuICAgIH0pO1xuICAgIGxldCBzYW5rZXlfbm9kZV9kaWN0ID0ge307ICAgIFxuICAgIHNhbmtleV9ub2Rlcy5mb3JFYWNoKChzbiwgaW5kZXgpID0+IHNhbmtleV9ub2RlX2RpY3Rbc24uZGF0YS5ub2RlX2lkXSA9IHNuKTtcbiAgICBsZXQgc2Fua2V5X2xpbmtzID0gbGlua3MubWFwKChsKSA9PiB7XG5cdGxldCBzb3VyY2VfaW5kZXggPSBzYW5rZXlfbm9kZV9kaWN0W2wuc291cmNlX25vZGVfaWRdLmluZGV4O1xuXHRsZXQgdGFyZ2V0X2luZGV4ID0gc2Fua2V5X25vZGVfZGljdFtsLnRhcmdldF9ub2RlX2lkXS5pbmRleDtcblx0cmV0dXJuIHtcblx0ICAgIHNvdXJjZTogc291cmNlX2luZGV4LFxuXHQgICAgdGFyZ2V0OiB0YXJnZXRfaW5kZXgsXG5cdCAgICB2YWx1ZTogbC52YWx1ZSxcblx0ICAgIGxhYmVsOiBsLmxhYmVsLFxuXHR9O1xuICAgIH0pO1xuICAgIHJldHVybiB7IG5vZGVzOiBzYW5rZXlfbm9kZXMsIGxpbmtzOiBzYW5rZXlfbGlua3MgfTtcbn1cblxuZnVuY3Rpb24gb25fbm9kZV9jbGljayhub2RlKSB7XG4gICAgaWYgKG5vZGUuaXNfbGlua19ub2RlID09IHRydWUpIHsgcmV0dXJuOyB9XG4gICAgaWYgKG5vZGUubGluaykgeyBudG9wbmdfdXJsX21hbmFnZXIuZ29fdG9fdXJsKG5vZGUubGluayk7IH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlX2hlaWdodCgpIHtcbiAgICBoZWlnaHQudmFsdWUgPSBoZWlnaHRfcGVyX3JvdyAqIHByb3BzLm1heF9oZWlnaHQ7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZV93aWR0aCgpIHtcbiAgICB3aWR0aC52YWx1ZSA9ICQoYm9keV9kaXYudmFsdWUpLndpZHRoKCk7XG59XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuPC9zdHlsZT5cbiIsIjwhLS0gKEMpIDIwMjMgLSBudG9wLm9yZyAtLT5cbjx0ZW1wbGF0ZT5cbiAgICA8ZGl2IGNsYXNzPSdyb3cnPlxuXG4gICAgICAgIDwhLS0gPERyb3Bkb3duIHYtZm9yPVwiKHQsIHRfaW5kZXgpIGluIHRvcF90YWJsZV9hcnJheVwiIC0tPlxuICAgICAgICA8IS0tICAgICAgICAgICA6cmVmPVwiZWwgPT4geyB0b3BfdGFibGVfZHJvcGRvd25fYXJyYXlbdF9pbmRleF0gPSBlbCB9XCI+IC0tPlxuICAgICAgICA8IS0tICAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT4gLS0+XG4gICAgICAgIDwhLS0gICAgIDxTcGlubmVyIDpzaG93PVwidC5zaG93X3NwaW5uZXJcIiBzaXplPVwiMXJlbVwiIGNsYXNzPVwibWUtMVwiPjwvU3Bpbm5lcj4gLS0+XG4gICAgICAgIDwhLS0gICAgIDxhIGNsYXNzPVwibnRvcG5nLXRydW5jYXRlXCIgOnRpdGxlPVwidC50aXRsZVwiPnt7IHQubGFiZWwgfX08L2E+IC0tPlxuICAgICAgICA8IS0tICAgPC90ZW1wbGF0ZT4gLS0+XG4gICAgICAgIDwhLS0gICA8dGVtcGxhdGUgdi1zbG90Om1lbnU+IC0tPlxuICAgICAgICA8IS0tICAgICA8YSB2LWZvcj1cIm9wdCBpbiB0Lm9wdGlvbnNcIiBzdHlsZT1cImN1cnNvcjpwb2ludGVyOyBkaXNwbGF5OiBibG9jaztcIiAtLT5cbiAgICAgICAgPCEtLSAgICAgICAgQGNsaWNrPVwiYWRkX3RvcF90YWJsZV9maWx0ZXIob3B0LCAkZXZlbnQpXCIgY2xhc3M9XCJudG9wbmctdHJ1bmNhdGUgdGFnLWZpbHRlciBcIiAtLT5cbiAgICAgICAgPCEtLSAgICAgICAgOnRpdGxlPVwib3B0LnZhbHVlXCI+e3sgb3B0LmxhYmVsIH19PC9hPiAtLT5cbiAgICAgICAgPCEtLSAgIDwvdGVtcGxhdGU+ICAgICAtLT5cbiAgICAgICAgPCEtLSA8L0Ryb3Bkb3duPiAtLT5cblxuICAgICAgICA8RGF0ZVRpbWVSYW5nZVBpY2tlciB2LWlmPVwiZW5hYmxlX2RhdGVfdGltZV9yYW5nZV9waWNrZXJcIiBjbGFzcz1cImRvbnRwcmludFwiXG4gICAgICAgICAgICA6ZGlzYWJsZWRfZGF0ZV9waWNrZXI9XCJkaXNhYmxlX2RhdGVfdGltZV9waWNrZXJcIiBpZD1cImRhc2hib2FyZC1kYXRlLXRpbWUtcGlja2VyXCIgOnJvdW5kX3RpbWU9XCJ0cnVlXCJcbiAgICAgICAgICAgIG1pbl90aW1lX2ludGVydmFsX2lkPVwibWluXCIgQGVwb2NoX2NoYW5nZT1cInNldF9jb21wb25lbnRzX2Vwb2NoX2ludGVydmFsXCI+XG5cbiAgICAgICAgICAgIDwhLS0gUmVwb3J0IFNlbGVjdG9yIC0tPlxuICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDpiZWdpbj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWUtMlwiPlxuICAgICAgICAgICAgICAgICAgICA8U2VsZWN0U2VhcmNoIHYtbW9kZWw6c2VsZWN0ZWRfb3B0aW9uPVwic2VsZWN0ZWRfcmVwb3J0X3RlbXBsYXRlXCIgOm9wdGlvbnM9XCJyZXBvcnRzX3RlbXBsYXRlc1wiXG4gICAgICAgICAgICAgICAgICAgICAgICBAc2VsZWN0X29wdGlvbj1cInNlbGVjdF9yZXBvcnRfdGVtcGxhdGVcIj5cbiAgICAgICAgICAgICAgICAgICAgPC9TZWxlY3RTZWFyY2g+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L3RlbXBsYXRlPlxuXG4gICAgICAgICAgICA8IS0tIFJlcG9ydCBUb29sYm94IChTdG9yZSwgU2F2ZSwgLi4uKSAtLT5cbiAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LXNsb3Q6ZXh0cmFfYnV0dG9ucz5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1saW5rIGJ0bi1zbVwiIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJzaG93X3N0b3JlX3JlcG9ydF9tb2RhbFwiXG4gICAgICAgICAgICAgICAgICAgIDp0aXRsZT1cIl9pMThuKCdkYXNoYm9hcmQuc3RvcmUnKVwiPlxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhLXNvbGlkIGZhLWZsb3BweS1kaXNrXCI+PC9pPlxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLWxpbmsgYnRuLXNtXCIgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cInNob3dfb3Blbl9yZXBvcnRfbW9kYWxcIlxuICAgICAgICAgICAgICAgICAgICA6dGl0bGU9XCJfaTE4bignZGFzaGJvYXJkLm9wZW4nKVwiPlxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhLXNvbGlkIGZhLWZvbGRlci1vcGVuXCI+PC9pPlxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLWxpbmsgYnRuLXNtXCIgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImRvd25sb2FkX3JlcG9ydFwiIDp0aXRsZT1cIl9pMThuKCdkb3dubG9hZCcpXCI+XG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmEtc29saWQgZmEtZmlsZS1hcnJvdy1kb3duXCI+PC9pPlxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLWxpbmsgYnRuLXNtXCIgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cInNob3dfdXBsb2FkX3JlcG9ydF9tb2RhbFwiXG4gICAgICAgICAgICAgICAgICAgIDp0aXRsZT1cIl9pMThuKCd1cGxvYWQnKVwiPlxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhLXNvbGlkIGZhLWZpbGUtYXJyb3ctdXBcIj48L2k+XG4gICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tbGluayBidG4tc21cIiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwicHJpbnRfcmVwb3J0XCIgOnRpdGxlPVwiX2kxOG4oJ2Rhc2hib2FyZC5wcmludCcpXCI+XG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLXByaW50XCI+PC9pPlxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDxidXR0b24gdi1pZj1cImFsbG93X2VkaXRcIiBjbGFzcz1cImJ0biBidG4tbGluayBidG4tc21cIiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwic2hvd19uZXdfdGVtcGxhdGVfbW9kYWxcIiA6dGl0bGU9XCJfaTE4bignZGFzaGJvYXJkLm5ld190ZW1wbGF0ZScpXCI+XG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLWZvbGRlci1wbHVzXCI+PC9pPlxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDxidXR0b24gdi1pZj1cImFsbG93X2VkaXQgJiYgc2VsZWN0ZWRfcmVwb3J0X3RlbXBsYXRlLmFsbG93X2VkaXRcIiBjbGFzcz1cImJ0biBidG4tbGluayBidG4tc21cIiA6Y2xhc3M9XCJlZGl0X21vZGUgPyAndGV4dC13YXJuaW5nJyA6ICcnXCIgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cInRvZ2dsZV9lZGl0X21vZGVcIiA6dGl0bGU9XCJfaTE4bignZGFzaGJvYXJkLmVkaXRfbW9kZScpXCI+XG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLXBlbi10by1zcXVhcmVcIj48L2k+XG4gICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICA8L0RhdGVUaW1lUmFuZ2VQaWNrZXI+XG5cbiAgICAgICAgPCEtLSBGaWx0ZXJzIC0tPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiYnRuLWdyb3VwIG1lLWF1dG8gbXQtMiBidG4tZ3JvdXAtc20gZmxleC13cmFwIGQtZmxleFwiPlxuICAgICAgICAgICAgPHRlbXBsYXRlIHYtZm9yPVwiZmlsdGVyX2lkIGluIGZpbHRlcnNfdG9fc2hvd1wiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtZS0yXCI+XG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cIm1zLTEgbXktYXV0byBtZS0yIGZpbHRlcnMtbGFiZWxcIj48Yj57eyBfaTE4bignZGJfc2VhcmNoLicgKyBmaWx0ZXJfaWQpIH19PC9iPjwvbGFiZWw+XG4gICAgICAgICAgICAgICAgICAgIDxTZWxlY3RTZWFyY2ggdi1tb2RlbDpzZWxlY3RlZF9vcHRpb249XCJzZWxlY3RlZF9maWx0ZXJzW2ZpbHRlcl9pZF1cIlxuICAgICAgICAgICAgICAgICAgICAgICAgOm9wdGlvbnM9XCJmaWx0ZXJlZF9maWx0ZXJzW2ZpbHRlcl9pZF1cIiA6c3R5bGU9XCInd2lkdGg6IDUwJTsnXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIEBzZWxlY3Rfb3B0aW9uPVwic2VsZWN0X2ZpbHRlcihzZWxlY3RlZF9maWx0ZXJzW2ZpbHRlcl9pZF0sIGZpbHRlcl9pZClcIj5cbiAgICAgICAgICAgICAgICAgICAgPC9TZWxlY3RTZWFyY2g+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L3RlbXBsYXRlPlxuXG4gICAgICAgICAgICA8dGVtcGxhdGUgdi1pZj1cIk9iamVjdC5rZXlzKGZpbHRlcnNfdG9fc2hvdykubGVuZ3RoID4gMFwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIG1zLTJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1lLTJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwibXktYXV0byBtZS0yXCI+PC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXNtIGJ0bi1wcmltYXJ5XCIgQGNsaWNrPVwicmVzZXRfZmlsdGVyc1wiPnt7IF9pMThuKCdyZXNldCcpIH19PC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPCEtLSBUZW1wbGF0ZSBFZGl0b3IgVG9vbGJveCAtLT5cbiAgICAgICAgPGRpdiB2LWlmPVwiZWRpdF9tb2RlXCIgY2xhc3M9XCJtZS1hdXRvIG10LTIgZmxleC13cmFwIGQtZmxleFwiPlxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tbGcgYnRuLWxpbmsgdGV4dC13YXJuaW5nXCIgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cInNob3dfYWRkX3RlbXBsYXRlX2NvbXBvbmVudF9tb2RhbFwiIDp0aXRsZT1cIl9pMThuKCdkYXNoYm9hcmQuYWRkX2NvbXBvbmVudCcpXCI+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtc3F1YXJlLXBsdXNcIj48L2k+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLWxnIGJ0bi1saW5rIHRleHQtd2FybmluZ1wiIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJzaG93X2RlbGV0ZV90ZW1wbGF0ZV9tb2RhbFwiIDp0aXRsZT1cIl9pMThuKCdkYXNoYm9hcmQuZGVsX3RlbXBsYXRlJylcIj5cbiAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS10cmFzaC1jYW5cIj48L2k+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDxoMiBjbGFzcz1cInRleHQtd2FybmluZ1wiIHN0eWxlPVwibWFyZ2luLXRvcDogMC41cmVtOyBtYXJnaW4tbGVmdDogMXJlbVwiPnt7IF9pMThuKCdkYXNoYm9hcmQuZWRpdF9tb2RlJykgfX08L2gyPlxuICAgICAgICAgICAgPCEtLVxuICAgICAgICAgICAgPGRpdiBzdHlsZT1cIm1hcmdpbjogYXV0b1wiPjwvZGl2PlxuICAgICAgICAgICAgPGg0PjxzcGFuIGNsYXNzPVwiYmFkZ2UgYmctd2FybmluZ1wiPnt7IF9pMThuKCdkYXNoYm9hcmQuZWRpdF9tb2RlJykgfX08L3NwYW4+PC9oND5cbiAgICAgICAgICAgIC0tPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8IS0tIFJlcG9ydCBUaXRsZSBhbmQgc21hbGwgYnV0dG9ucyAtLT5cbiAgICAgICAgPGRpdiB2LWlmPVwiZW5hYmxlX3JlcG9ydF90aXRsZVwiIGNsYXNzPVwibXQtM1wiIHN0eWxlPVwibWFyZ2luLWJvdHRvbTotMC41cmVtOyBkaXNwbGF5OiBpbmxpbmVcIj5cbiAgICAgICAgICAgIDxoMyBzdHlsZT1cInRleHQtYWxpZ246Y2VudGVyO1wiPnt7IHJlcG9ydF90aXRsZSB9fVxuICAgICAgICAgICAgICAgIDxzcGFuIHYtaWY9XCJlbmFibGVfc21hbGxfcGlja2VyXCI+XG4gICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWlmPVwiZW5hYmxlX3NtYWxsX3BpY2tlcl9hY3Rpb25zXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1saW5rIGJ0bi1zbVwiIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJkb3dubG9hZF9yZXBvcnRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDp0aXRsZT1cIl9pMThuKCdkb3dubG9hZCcpXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1maWxlLWFycm93LWRvd25cIj48L2k+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLWxpbmsgYnRuLXNtXCIgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cInNob3dfdXBsb2FkX3JlcG9ydF9tb2RhbFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOnRpdGxlPVwiX2kxOG4oJ3VwbG9hZCcpXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1maWxlLWFycm93LXVwXCI+PC9pPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLWxpbmsgYnRuLXNtXCIgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cInByaW50X3JlcG9ydFwiXG4gICAgICAgICAgICAgICAgICAgICAgICA6dGl0bGU9XCJfaTE4bignZGFzaGJvYXJkLnByaW50JylcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLXByaW50XCI+PC9pPlxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8L2gzPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8IS0tIFJlcG9ydC9EYXNoYm9hcmQgQ29udGVudCAtLT5cbiAgICAgICAgPGRpdiByZWY9XCJyZXBvcnRfYm94XCIgaWQ9XCJkcmFnLXpvbmVcIiBjbGFzcz1cInJvd1wiIDprZXk9XCJjb21wb25lbnRzXCI+XG5cbiAgICAgICAgICAgIDwhLS0gV2FybmluZyBNZXNzYWdlIC0tPlxuICAgICAgICAgICAgPGRpdiB2LWlmPVwid2FybmluZ19tZXNzYWdlXCIgY2xhc3M9XCJjb2wtc20gbXQtMVwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gICAgICAgICAgICAgICAgICAgIHt7IHdhcm5pbmdfbWVzc2FnZSB9fVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDwhLS0gRW1wdHkgdGVtcGxhdGUgbWVzc2FnZSAtLT5cbiAgICAgICAgICAgIDxkaXYgdi1pZj1cImNvbXBvbmVudHNfbG9hZGVkICYmICFjb21wb25lbnRzLmxlbmd0aCAmJiAhZWRpdF9tb2RlXCIgY2xhc3M9XCJjb2wtc20gbXQtMVwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1zZWNvbmRhcnkgc20tMSB0ZXh0LWNlbnRlclwiIHN0eWxlPVwid2lkdGg6NDAlOyBtYXJnaW46IGF1dG87IG1hcmdpbi10b3A6IDV2aDsgbWFyZ2luLWJvdHRvbTogNXZoXCI+XG4gICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzcz1cImFsZXJ0LWhlYWRpbmdcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHt7IF9pMThuKFwiZGFzaGJvYXJkLmVtcHR5X3RlbXBsYXRlXCIpIH19XG4gICAgICAgICAgICAgICAgICAgIDwvaDQ+XG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwibWItMFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAge3sgX2kxOG4oXCJkYXNoYm9hcmQuZW1wdHlfdGVtcGxhdGVfbm90ZVwiKSB9fVxuICAgICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPCEtLSBSZW5kZXJlZCBDb21wb25lbnRzIC0tPlxuICAgICAgICAgICAgPHRlbXBsYXRlIHYtZm9yPVwiYyBpbiBjb21wb25lbnRzXCI+XG4gICAgICAgICAgICAgICAgPEJveCBzdHlsZT1cIm1pbi13aWR0aDoyMHJlbTtcIiA6Y29sb3I9XCIoYy5hY3RpdmUgJiYgYy5jb2xvcikgfHwgYy5pbmFjdGl2ZV9jb2xvclwiIDp3aWR0aD1cImMud2lkdGhcIiA6aGVpZ2h0PVwiYy5oZWlnaHRcIiA6aWQ9XCJjLmlkXCIgY2xhc3M9XCJkcmFnLWl0ZW1cIj5cbiAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDpib3hfdGl0bGU+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYtaWY9XCJjLmkxOG5fbmFtZVwiIGNsYXNzPVwiZGFzaGJvYXJkLWNvbXBvbmVudC10aXRsZSBtb2RhbC1oZWFkZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9XCJtb2RhbC10aXRsZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBjLmN1c3RvbV9uYW1lID8gIGMuY3VzdG9tX25hbWUgOiBfaTE4bihjLmkxOG5fbmFtZSkgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9XCJjb2xvcjogZ3JheVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3sgYy50aW1lX29mZnNldCA/IF9pMThuKCdkYXNoYm9hcmQuJyArIChpc19saXZlID8gJ3RpbWVfYWdvJyA6ICd0aW1lX29mZnNldF9saXN0JykgKyAnLicgKyBjLnRpbWVfb2Zmc2V0KSA6ICcnIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2g0PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1pZj1cImVkaXRfbW9kZVwiIGNsYXNzPVwibW9kYWwtY2xvc2VcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcyA9J2J0bi1ncm91cCc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uICB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4tY2xvc2UgYnRuLWVkaXQgbWUtMVwiIDpkYXRhLWNvbXBvbmVudC1pZD1cImMuaWRcIiBAY2xpY2s9XCJzaG93X2VkaXRfdGVtcGxhdGVfY29tcG9uZW50XCI+PC9idXR0b24+IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4tY2xvc2VcIiA6ZGF0YS1jb21wb25lbnQtaWQ9XCJjLmlkXCIgQGNsaWNrPVwicmVtb3ZlX3RlbXBsYXRlX2NvbXBvbmVudFwiPjwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgdi1zbG90OmJveF9jb250ZW50PlxuICAgICAgICAgICAgICAgICAgICAgICAgPExvYWRpbmcgdi1pZj1cImxvYWRpbmcgJiYgc2hvd19sb2FkaW5nXCIgOnN0eWxlcz1cIidtYXJnaW4tdG9wOiAycmVtICFpbXBvcnRhbnQ7J1wiPjwvTG9hZGluZz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgOmNsYXNzPVwiWyhsb2FkaW5nICYmIHNob3dfbG9hZGluZykgPyAnbnRvcG5nLWdyYXktb3V0JyA6ICcnXVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb21wb25lbnQgOmlzPVwiY29tcG9uZW50c19kaWN0W2MuY29tcG9uZW50XVwiIDppZD1cImMuaWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6c3R5bGU9XCJjb21wb25lbnRfY3VzdG9tX3N0eWxlKGMpXCIgOmVwb2NoX2JlZ2luPVwiYy5lcG9jaF9iZWdpblwiIDplcG9jaF9lbmQ9XCJjLmVwb2NoX2VuZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDppMThuX3RpdGxlPVwiYy5pMThuX25hbWVcIiA6aWZpZD1cImMuaWZpZCA/IGMuaWZpZC50b1N0cmluZygpIDogY29udGV4dC5pZmlkLnRvU3RyaW5nKClcIiA6bWF4X3dpZHRoPVwiYy53aWR0aFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDptYXhfaGVpZ2h0PVwiYy5oZWlnaHRcIiA6cGFyYW1zPVwiYy5wYXJhbXNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Z2V0X2NvbXBvbmVudF9kYXRhPVwiZ2V0X2NvbXBvbmVudF9kYXRhX2Z1bmMoYylcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6c2V0X2NvbXBvbmVudF9hdHRyPVwic2V0X2NvbXBvbmVudF9hdHRyX2Z1bmMoYylcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6Y3NyZj1cImNvbnRleHQuY3NyZlwiIDpmaWx0ZXJzPVwiYy5maWx0ZXJzXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9jb21wb25lbnQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlIHYtc2xvdDpib3hfZm9vdGVyPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdi1pZj1cImMuY29tcG9uZW50ICE9ICdlbXB0eScgJiYgYy5pMThuX25hbWUgJiYgIWRpc2FibGVfZGF0ZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9XCJjb2xvcjogbGlnaHRncmF5O2ZvbnQtc2l6ZToxMnB4O1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt7IGNvbXBvbmVudF9pbnRlcnZhbChjKSB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgIDwvQm94PlxuICAgICAgICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgPC9kaXY+XG5cbiAgICA8L2Rpdj4gPCEtLSBkaXYgcm93IC0tPlxuXG4gICAgPE1vZGFsU2F2ZSByZWY9XCJtb2RhbF9zdG9yZV9yZXBvcnRcIiA6Z2V0X3N1Z2dlc3RlZF9maWxlX25hbWU9XCJnZXRfc3VnZ2VzdGVkX3JlcG9ydF9uYW1lXCIgOnN0b3JlX2ZpbGU9XCJzdG9yZV9yZXBvcnRcIlxuICAgICAgICA6Y3NyZj1cImNvbnRleHQuY3NyZlwiIDp0aXRsZT1cIl9pMThuKCdkYXNoYm9hcmQuc3RvcmUnKVwiPlxuICAgIDwvTW9kYWxTYXZlPlxuICAgIDxNb2RhbE9wZW4gcmVmPVwibW9kYWxfb3Blbl9yZXBvcnRcIiA6bGlzdF9maWxlcz1cImxpc3RfcmVwb3J0c1wiIDpvcGVuX2ZpbGU9XCJvcGVuX3JlcG9ydFwiIDpkZWxldGVfZmlsZT1cImRlbGV0ZV9yZXBvcnRcIlxuICAgICAgICA6Y3NyZj1cImNvbnRleHQuY3NyZlwiIDp0aXRsZT1cIl9pMThuKCdkYXNoYm9hcmQub3BlbicpXCIgOmZpbGVfdGl0bGU9XCJfaTE4bigncmVwb3J0LnJlcG9ydF9uYW1lJylcIj5cbiAgICA8L01vZGFsT3Blbj5cbiAgICA8TW9kYWxVcGxvYWQgcmVmPVwibW9kYWxfdXBsb2FkX3JlcG9ydFwiIDp1cGxvYWRfZmlsZT1cInVwbG9hZF9yZXBvcnRcIiA6dGl0bGU9XCJfaTE4bigndXBsb2FkJylcIlxuICAgICAgICA6ZmlsZV90aXRsZT1cIl9pMThuKCdyZXBvcnQuZmlsZScpXCI+XG4gICAgPC9Nb2RhbFVwbG9hZD5cbiAgICA8TW9kYWxTYXZlIHJlZj1cIm1vZGFsX25ld190ZW1wbGF0ZVwiIDpnZXRfc3VnZ2VzdGVkX2ZpbGVfbmFtZT1cImdldF9zdWdnZXN0ZWRfdGVtcGxhdGVfbmFtZVwiIDpzdG9yZV9maWxlPVwibmV3X3RlbXBsYXRlXCIgOmFsbG93X3NwYWNlcz1cInRydWVcIlxuICAgICAgICA6Y3NyZj1cImNvbnRleHQuY3NyZlwiIDp0aXRsZT1cIl9pMThuKCdkYXNoYm9hcmQubmV3X3RlbXBsYXRlJylcIj5cbiAgICA8L01vZGFsU2F2ZT5cbiAgICA8TW9kYWxTZWxlY3RDb21wb25lbnQgcmVmPVwibW9kYWxfYWRkX3RlbXBsYXRlX2NvbXBvbmVudFwiIDpsaXN0X2NvbXBvbmVudHM9XCJsaXN0X3RlbXBsYXRlX2NvbXBvbmVudHNcIiA6YWRkX2NvbXBvbmVudD1cImFkZF90ZW1wbGF0ZV9jb21wb25lbnRcIlxuICAgICAgICA6Y3NyZj1cImNvbnRleHQuY3NyZlwiIDp0aXRsZT1cIl9pMThuKCdkYXNoYm9hcmQuYWRkX2NvbXBvbmVudCcpXCI+XG4gICAgPC9Nb2RhbFNlbGVjdENvbXBvbmVudD5cbiAgICA8TW9kYWxFZGl0Q29tcG9uZW50IHJlZj1cIm1vZGFsX2VkaXRfdGVtcGxhdGVfY29tcG9uZW50XCIgOmNzcmY9XCJjb250ZXh0LmNzcmZcIiBAZWRpdD1cImVkaXRfdGVtcGxhdGVfY29tcG9uZW50XCI+XG4gICAgPC9Nb2RhbEVkaXRDb21wb25lbnQ+XG4gICAgPE1vZGFsRGVsZXRlQ29uZmlybSByZWY9XCJtb2RhbF9kZWxldGVfdGVtcGxhdGVcIiA6dGl0bGU9XCJfaTE4bignZGFzaGJvYXJkLmRlbF90ZW1wbGF0ZScpXCIgOmJvZHk9XCJfaTE4bignZGFzaGJvYXJkLmRlbF90ZW1wbGF0ZV9jb25maXJtJylcIiBAZGVsZXRlPVwiZGVsZXRlX3RlbXBsYXRlXCI+XG4gICAgPC9Nb2RhbERlbGV0ZUNvbmZpcm0+XG5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQgc2V0dXA+XG5pbXBvcnQgeyByZWYsIG9uTW91bnRlZCwgb25CZWZvcmVNb3VudCwgY29tcHV0ZWQsIG5leHRUaWNrIH0gZnJvbSBcInZ1ZVwiO1xuaW1wb3J0IHsgbnRvcG5nX3N0YXR1c19tYW5hZ2VyLCBudG9wbmdfdXJsX21hbmFnZXIsIG50b3BuZ191dGlsaXR5LCBudG9wbmdfZXZlbnRzX21hbmFnZXIsIG50b3BuZ19zeW5jIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2NvbnRleHQvbnRvcG5nX2dsb2JhbHNfc2VydmljZXNcIjtcblxuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRlVGltZVJhbmdlUGlja2VyIH0gZnJvbSBcIi4vZGF0ZS10aW1lLXJhbmdlLXBpY2tlci52dWVcIjtcblxuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbFNhdmUgfSBmcm9tIFwiLi9tb2RhbC1maWxlLXNhdmUudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsT3BlbiB9IGZyb20gXCIuL21vZGFsLWZpbGUtb3Blbi52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxVcGxvYWQgfSBmcm9tIFwiLi9tb2RhbC1maWxlLXVwbG9hZC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxTZWxlY3RDb21wb25lbnQgfSBmcm9tIFwiLi9tb2RhbC1zZWxlY3QtY29tcG9uZW50LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbEVkaXRDb21wb25lbnQgfSBmcm9tIFwiLi9tb2RhbC1lZGl0LWNvbXBvbmVudC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxEZWxldGVDb25maXJtIH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIExvYWRpbmcgfSBmcm9tIFwiLi9sb2FkaW5nLnZ1ZVwiO1xuXG5pbXBvcnQgeyBkZWZhdWx0IGFzIEJveCB9IGZyb20gXCIuL2Rhc2hib2FyZC1ib3gudnVlXCI7XG5cbmltcG9ydCB7IGRlZmF1bHQgYXMgRW1wdHlDb21wb25lbnQgfSBmcm9tIFwiLi9kYXNoYm9hcmQtZW1wdHkudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFRhYmxlQ29tcG9uZW50IH0gZnJvbSBcIi4vZGFzaGJvYXJkLXRhYmxlLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBCYWRnZUNvbXBvbmVudCB9IGZyb20gXCIuL2Rhc2hib2FyZC1iYWRnZS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGllQ29tcG9uZW50IH0gZnJvbSBcIi4vZGFzaGJvYXJkLXBpZS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgVGltZXNlcmllc0NvbXBvbmVudCB9IGZyb20gXCIuL2Rhc2hib2FyZC10aW1lc2VyaWVzLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTYW5rZXlDb21wb25lbnQgfSBmcm9tIFwiLi9kYXNoYm9hcmQtc2Fua2V5LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTZWxlY3RTZWFyY2ggfSBmcm9tIFwiLi9zZWxlY3Qtc2VhcmNoLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBkYXRhVXRpbHMgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2RhdGEtdXRpbHNcIjtcblxuaW1wb3J0IHsgZGVmYXVsdCBhcyBTd2l0Y2ggfSBmcm9tIFwiLi9zd2l0Y2gudnVlXCI7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5jb25zdCB0aW1lZnJhbWVzX2RpY3QgPSBudG9wbmdfdXRpbGl0eS5nZXRfdGltZWZyYW1lc19kaWN0KCk7XG5cbmNvbnN0IHByb3BzID0gZGVmaW5lUHJvcHMoe1xuICAgIGNvbnRleHQ6IE9iamVjdCxcbn0pO1xuXG5jb25zdCBjb21wb25lbnRzX2RpY3QgPSB7XG4gICAgXCJiYWRnZVwiOiBCYWRnZUNvbXBvbmVudCxcbiAgICBcImVtcHR5XCI6IEVtcHR5Q29tcG9uZW50LFxuICAgIFwicGllXCI6IFBpZUNvbXBvbmVudCxcbiAgICBcInRpbWVzZXJpZXNcIjogVGltZXNlcmllc0NvbXBvbmVudCxcbiAgICBcInRhYmxlXCI6IFRhYmxlQ29tcG9uZW50LFxuICAgIFwic2Fua2V5XCI6IFNhbmtleUNvbXBvbmVudCxcbn1cblxuY29uc3QgbG9hZGluZyA9IHJlZih0cnVlKTtcbmNvbnN0IHBhZ2VfaWQgPSBcInBhZ2UtZGFzaGJvYXJkXCI7XG5jb25zdCBzaG93X2xvYWRpbmcgPSBwcm9wcy5jb250ZXh0LnNob3dfbG9hZGluZyB8fCBmYWxzZTtcbmNvbnN0IGFsbG93X2VkaXQgPSBwcm9wcy5jb250ZXh0LmFsbG93X2VkaXQgfHwgZmFsc2U7XG5jb25zdCByZXBvcnRfYm94ID0gcmVmKG51bGwpO1xuXG5jb25zdCBtb2RhbF9zdG9yZV9yZXBvcnQgPSByZWYobnVsbCk7XG5jb25zdCBtb2RhbF9vcGVuX3JlcG9ydCA9IHJlZihudWxsKTtcbmNvbnN0IG1vZGFsX3VwbG9hZF9yZXBvcnQgPSByZWYobnVsbCk7XG5cbmNvbnN0IG1vZGFsX2FkZF90ZW1wbGF0ZV9jb21wb25lbnQgPSByZWYobnVsbCk7XG5jb25zdCBtb2RhbF9lZGl0X3RlbXBsYXRlX2NvbXBvbmVudCA9IHJlZihudWxsKTtcbmNvbnN0IG1vZGFsX2RlbGV0ZV90ZW1wbGF0ZSA9IHJlZihudWxsKVxuXG5jb25zdCBtYWluX2Vwb2NoX2ludGVydmFsID0gcmVmKG51bGwpO1xuXG5jb25zdCBjb21wb25lbnRzID0gcmVmKFtdKTtcbmNvbnN0IGNvbXBvbmVudHNfbG9hZGVkID0gcmVmKGZhbHNlKTtcblxuY29uc3Qgc2VsZWN0ZWRfZmlsdGVycyA9IHJlZih7fSk7XG5jb25zdCBhbGxfYXZhaWxhYmxlX2ZpbHRlcnMgPSByZWYoe30pO1xuY29uc3QgZmlsdGVyZWRfZmlsdGVycyA9IHJlZih7fSk7XG5jb25zdCBmaWx0ZXJzX3RvX3Nob3cgPSByZWYoW10pO1xuY29uc3QgbmVzdGVkX2ZpbHRlcnMgPSByZWYoW10pO1xuXG5jb25zdCByZXBvcnRzX3RlbXBsYXRlcyA9IHJlZihbXSk7XG5jb25zdCBzZWxlY3RlZF9yZXBvcnRfdGVtcGxhdGUgPSByZWYoe30pO1xuXG5jb25zdCB3YXJuaW5nX21lc3NhZ2UgPSByZWYoXCJcIik7XG5cbmxldCBjb21wb25lbnRzX2luZm8gPSB7fTtcbmxldCBkYXRhX2Zyb21fYmFja3VwID0gZmFsc2U7XG5sZXQgcHJpbnRhYmxlID0gZmFsc2U7XG5cbmNvbnN0IGVkaXRfbW9kZSA9IHJlZihmYWxzZSk7XG5sZXQgdGVtcGxhdGVfc29ydGFibGUgPSBudWxsO1xuY29uc3QgbW9kYWxfbmV3X3RlbXBsYXRlID0gcmVmKG51bGwpO1xuXG5jb25zdCBpc19saXZlID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIHJldHVybiBwcm9wcy5jb250ZXh0LnBhZ2UgIT0gXCJyZXBvcnRcIiAmJiBwcm9wcy5jb250ZXh0LnBhZ2UgIT0gXCJ2cy1yZXBvcnRcIjtcbn0pO1xuXG5jb25zdCBlbmFibGVfZGF0ZV90aW1lX3JhbmdlX3BpY2tlciA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICByZXR1cm4gcHJvcHMuY29udGV4dC5wYWdlID09IFwicmVwb3J0XCJcbiAgICAgICAgJiYgIXByaW50YWJsZTtcbn0pO1xuXG5jb25zdCBlbmFibGVfc21hbGxfcGlja2VyID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIHJldHVybiBwcm9wcy5jb250ZXh0LnBhZ2UgPT0gXCJ2cy1yZXBvcnRcIjtcbn0pO1xuXG5jb25zdCBlbmFibGVfc21hbGxfcGlja2VyX2FjdGlvbnMgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgcmV0dXJuIHRydWU7IC8vIFNldCB0byBmYWxzZSBmb3IgaGlkaW5nIG9wZW4vc2F2ZSBhY3Rpb25zIGluIHRoZSBzbWFsbCBwaWNrZXJcbn0pO1xuXG5jb25zdCBkaXNhYmxlX2RhdGUgPSBjb21wdXRlZCgoKSA9PiB7XG4gICAgcmV0dXJuIHNlbGVjdGVkX3JlcG9ydF90ZW1wbGF0ZS52YWx1ZT8udG9vbGJveD8udGltZT8uaGlkZSA9PSB0cnVlO1xufSk7XG5cbmNvbnN0IGRpc2FibGVfZGF0ZV90aW1lX3BpY2tlciA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBjb25zdCBkaXNhYmxlZCA9IHNlbGVjdGVkX3JlcG9ydF90ZW1wbGF0ZS52YWx1ZS5pc19vcGVuX3JlcG9ydCA9PSB0cnVlXG4gICAgICAgIHx8IGRpc2FibGVfZGF0ZS52YWx1ZTtcbiAgICByZXR1cm4gZGlzYWJsZWQ7XG59KTtcblxuY29uc3QgZW5hYmxlX3JlcG9ydF90aXRsZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBjb25zdCBlbmFibGUgPSBzZWxlY3RlZF9yZXBvcnRfdGVtcGxhdGUudmFsdWUuaXNfb3Blbl9yZXBvcnQgPT0gdHJ1ZVxuICAgICAgICB8fCBwcm9wcy5jb250ZXh0LnBhZ2UgPT0gXCJ2cy1yZXBvcnRcIjtcbiAgICByZXR1cm4gZW5hYmxlO1xufSk7XG5cbmNvbnN0IHJlcG9ydF90aXRsZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICBsZXQgdGl0bGUgPSBcIlwiO1xuXG4gICAgaWYgKHNlbGVjdGVkX3JlcG9ydF90ZW1wbGF0ZS52YWx1ZS5pc19vcGVuX3JlcG9ydCkge1xuICAgICAgICB0aXRsZSA9IGBSZXBvcnQ6ICR7c2VsZWN0ZWRfcmVwb3J0X3RlbXBsYXRlLnZhbHVlLnZhbHVlfWA7XG4gICAgfSBlbHNlIGlmIChwcm9wcy5jb250ZXh0LnRpdGxlKSB7XG4gICAgICAgIHRpdGxlID0gcHJvcHMuY29udGV4dC50aXRsZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGl0bGU7XG59KTtcblxuY29uc3QgY29tcG9uZW50X2N1c3RvbV9zdHlsZSA9IGNvbXB1dGVkKCgpID0+IHtcbiAgICByZXR1cm4gKGMpID0+IHtcbiAgICAgICAgaWYgKGMucGFyYW1zLmN1c3RvbV9zdHlsZSAhPSBudWxsICYmICghcHJpbnRhYmxlIHx8IGMucGFyYW1zLmN1c3RvbV9wcmludF9zdHlsZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBjLnBhcmFtcy5jdXN0b21fc3R5bGU7XG4gICAgICAgIH0gZWxzZSBpZiAoYy5wYXJhbXMuY3VzdG9tX3ByaW50X3N0eWxlICYmIHByaW50YWJsZSA9PSB0cnVlKSB7XG4gICAgICAgICAgICByZXR1cm4gYy5wYXJhbXMuY3VzdG9tX3ByaW50X3N0eWxlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgIH07XG59KTtcblxuY29uc3QgY29tcG9uZW50X2ludGVydmFsID0gY29tcHV0ZWQoKCkgPT4ge1xuICAgIHJldHVybiAoYykgPT4ge1xuICAgICAgICBjb25zdCB0aW1lX2ludGVydmFsX3N0cmluZyA9IGdldF90aW1lX2ludGVydmFsX3N0cmluZyhjLmVwb2NoX2JlZ2luLCBjLmVwb2NoX2VuZCk7XG4gICAgICAgIHJldHVybiB0aW1lX2ludGVydmFsX3N0cmluZztcbiAgICB9O1xufSk7XG5cbi8qIFBhcmFtIHJlcG9ydF90ZW1wbGF0ZSBpcyBvcHRpb25hbCAodXNlcyB1cmwgcmVwb3J0X3RlbXBsYXRlIG9yIHByb3BzLmNvbnRleHQudGVtcGxhdGUgb3RoZXJ3aXNlKSAqL1xuYXN5bmMgZnVuY3Rpb24gc2V0X3RlbXBsYXRlKHJlcG9ydF90ZW1wbGF0ZSkge1xuICAgIGxldCBlcG9jaF9pbnRlcnZhbCA9IG51bGw7XG5cbiAgICBwcmludGFibGUgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInByaW50YWJsZVwiKSA9PSBcInRydWVcIjtcblxuICAgIGlmIChwcm9wcy5jb250ZXh0LnBhZ2UgPT0gXCJyZXBvcnRcIiB8fCBwcm9wcy5jb250ZXh0LnBhZ2UgPT0gXCJ2cy1yZXBvcnRcIikge1xuICAgICAgICBpZiAocHJvcHMuY29udGV4dC5wYWdlID09IFwicmVwb3J0XCIpIHtcbiAgICAgICAgICAgIGVwb2NoX2ludGVydmFsID0gbnRvcG5nX3V0aWxpdHkuY2hlY2tfYW5kX3NldF9kZWZhdWx0X3RpbWVfaW50ZXJ2YWwodW5kZWZpbmVkLCB1bmRlZmluZWQsIHRydWUsIFwibWluXCIpO1xuICAgICAgICB9IGVsc2UgaWYgKHByb3BzLmNvbnRleHQucGFnZSA9PSBcInZzLXJlcG9ydFwiKSB7XG4gICAgICAgICAgICBlcG9jaF9pbnRlcnZhbCA9IG50b3BuZ191dGlsaXR5LmNoZWNrX2FuZF9zZXRfZGVmYXVsdF90aW1lX2ludGVydmFsKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBtYWluX2Vwb2NoX2ludGVydmFsLnZhbHVlID0gZXBvY2hfaW50ZXJ2YWw7XG4gICAgfVxuXG4gICAgYXdhaXQgc2V0X3RlbXBsYXRlc19saXN0KHJlcG9ydF90ZW1wbGF0ZSk7XG5cbiAgICBsZXQgcmVwb3J0X25hbWUgPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9lbnRyeShcInJlcG9ydF9uYW1lXCIpO1xuICAgIGlmIChyZXBvcnRfbmFtZSAhPSBudWxsICYmIHJlcG9ydF9uYW1lICE9IFwiXCIpIHtcbiAgICAgICAgLyogUmVwb3J0IG5hbWUgcHJvdmlkZWQgLSBvcGVuIGEgcmVwb3J0IGJhY2t1cCAqL1xuICAgICAgICBhd2FpdCBvcGVuX3JlcG9ydChyZXBvcnRfbmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLyogTG9hZCBhIHRlbXBsYXRlIGFuZCBidWlsZCBhIG5ldyByZXBvcnQgKi9cbiAgICAgICAgYXdhaXQgbG9hZF9jb21wb25lbnRzKGVwb2NoX2ludGVydmFsLCBzZWxlY3RlZF9yZXBvcnRfdGVtcGxhdGUudmFsdWUudmFsdWUpO1xuICAgIH1cbiAgICBpZiAocHJpbnRhYmxlID09IHRydWUpIHtcbiAgICAgICAgc2V0X3JlcG9ydF90aXRsZSgpO1xuICAgICAgICAvLyBhd2FpdCBuZXh0VGljaygpO1xuICAgICAgICAvLyBudG9wbmdfc3luYy5yZWFkeShcInByaW50X3JlcG9ydFwiKTtcbiAgICB9XG5cbiAgICBjb21wb25lbnRzX2xvYWRlZC52YWx1ZSA9IHRydWVcbn1cblxub25CZWZvcmVNb3VudChhc3luYyAoKSA9PiB7XG4gICAgc2V0X3RlbXBsYXRlKCk7XG59KTtcblxub25Nb3VudGVkKGFzeW5jICgpID0+IHtcbiAgICBpZiAocHJvcHMuY29udGV4dC5wYWdlID09IFwiZGFzaGJvYXJkXCIpIHtcbiAgICAgICAgc3RhcnRfZGFzaGJvYXJkX3JlZnJlc2hfbG9vcCgpO1xuICAgIH1cbiAgICAvLyBpZiAocHJpbnRhYmxlID09IHRydWUpIHtcbiAgICAvLyAgICAgYXdhaXQgbnRvcG5nX3N5bmMub25fcmVhZHkoXCJwcmludF9yZXBvcnRcIik7XG4gICAgLy8gfVxufSk7XG5cbmFzeW5jIGZ1bmN0aW9uIHNldF90ZW1wbGF0ZXNfbGlzdChyZXBvcnRfdGVtcGxhdGUpIHtcbiAgICBjb25zdCB1cmxfcmVxdWVzdCA9IHByb3BzLmNvbnRleHQudGVtcGxhdGVfbGlzdF9lbmRwb2ludDtcbiAgICBsZXQgcmVzID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybF9yZXF1ZXN0KTtcbiAgICBpZiAocmVzPy5saXN0ID09IG51bGwpIHsgcmV0dXJuOyB9XG5cbiAgICBsZXQgdGVtcGxhdGVzX2xpc3QgPSByZXMubGlzdC5tYXAoKHQpID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiB0Lm5hbWUsXG4gICAgICAgICAgICBsYWJlbDogdC5sYWJlbCxcbiAgICAgICAgICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICAgICAgICAgIHRvb2xib3g6IHQudG9vbGJveCxcbiAgICAgICAgICAgIGlzX29wZW5fcmVwb3J0OiBmYWxzZSxcbiAgICAgICAgICAgIGFsbG93X2VkaXQ6IHQuYWxsb3dfZWRpdCxcbiAgICAgICAgfTtcbiAgICB9KTtcblxuICAgIHRlbXBsYXRlc19saXN0LnNvcnQoKGEsIGIpID0+IGEubGFiZWwudG9VcHBlckNhc2UoKS5sb2NhbGVDb21wYXJlKGIubGFiZWwudG9VcHBlckNhc2UoKSkpO1xuXG4gICAgcmVwb3J0c190ZW1wbGF0ZXMudmFsdWUgPSB0ZW1wbGF0ZXNfbGlzdDtcblxuICAgIGNvbnN0IHJlcG9ydF90ZW1wbGF0ZV92YWx1ZSA9IHJlcG9ydF90ZW1wbGF0ZSB8fCBcbiAgICAgIG50b3BuZ191cmxfbWFuYWdlci5nZXRfdXJsX2VudHJ5KFwicmVwb3J0X3RlbXBsYXRlXCIpIHx8IFxuICAgICAgcHJvcHMuY29udGV4dC50ZW1wbGF0ZTtcblxuICAgIHByb3BzLmNvbnRleHQudGVtcGxhdGUgPSByZXBvcnRfdGVtcGxhdGVfdmFsdWU7XG4gICAgc2VsZWN0ZWRfcmVwb3J0X3RlbXBsYXRlLnZhbHVlID0gcmVwb3J0c190ZW1wbGF0ZXMudmFsdWUuZmluZCgodCkgPT4gdC52YWx1ZSA9PSByZXBvcnRfdGVtcGxhdGVfdmFsdWUpO1xuXG4gICAgaWYgKHNlbGVjdGVkX3JlcG9ydF90ZW1wbGF0ZS52YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHNlbGVjdGVkX3JlcG9ydF90ZW1wbGF0ZS52YWx1ZSA9IHJlcG9ydHNfdGVtcGxhdGVzLnZhbHVlWzBdO1xuICAgIH1cblxuICAgIGlmICghc2VsZWN0ZWRfcmVwb3J0X3RlbXBsYXRlLnZhbHVlLmFsbG93X2VkaXQgJiYgZWRpdF9tb2RlLnZhbHVlKSB7XG4gICAgICAgIHRvZ2dsZV9lZGl0X21vZGUoKTtcbiAgICB9XG59XG5cbmxldCBkYXNib2FyZF9sb29wX2ludGVydmFsO1xuXG4vKiBEYXNoYm9hcmQgdXBkYXRlIGludGVydmFsL2ZyZXF1ZW5jeSAqL1xuY29uc3QgbG9vcF9pbnRlcnZhbCA9IDEwICogMTAwMDtcblxuZnVuY3Rpb24gc3RhcnRfZGFzaGJvYXJkX3JlZnJlc2hfbG9vcCgpIHtcbiAgICBkYXNib2FyZF9sb29wX2ludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICBzZXRfY29tcG9uZW50c19lcG9jaF9pbnRlcnZhbCgpO1xuICAgIH0sIGxvb3BfaW50ZXJ2YWwpO1xufVxuXG5mdW5jdGlvbiBzZXRfY29tcG9uZW50c19maWx0ZXIoZmlsdGVyX2lkLCBmaWx0ZXJfdmFsdWUpIHtcbiAgICBpZiAoZmlsdGVyX3ZhbHVlKSB7IGZpbHRlcl92YWx1ZSA9IGZpbHRlcl92YWx1ZSArIFwiO2VxXCI7IH1cbiAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoZmlsdGVyX2lkLCBmaWx0ZXJfdmFsdWUpO1xuICAgIGNvbXBvbmVudHMudmFsdWUuZm9yRWFjaCgoYywgaSkgPT4ge1xuICAgICAgICB1cGRhdGVfY29tcG9uZW50X2ZpbHRlcnMoYywgZmlsdGVyX2lkLCBmaWx0ZXJfdmFsdWUpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBzZXRfY29tcG9uZW50c19lcG9jaF9pbnRlcnZhbChlcG9jaF9pbnRlcnZhbCkge1xuICAgIGlmIChlcG9jaF9pbnRlcnZhbCkge1xuICAgICAgICBtYWluX2Vwb2NoX2ludGVydmFsLnZhbHVlID0gZXBvY2hfaW50ZXJ2YWw7XG4gICAgfVxuXG4gICAgY29tcG9uZW50cy52YWx1ZS5mb3JFYWNoKChjLCBpKSA9PiB7XG4gICAgICAgIHVwZGF0ZV9jb21wb25lbnRfZXBvY2hfaW50ZXJ2YWwoYywgZXBvY2hfaW50ZXJ2YWwpO1xuICAgIH0pO1xufVxuXG4vKiBUaGlzIGlzIHVzZWQgdG8gcmVzZXQgdGhlIGZpbHRlcnMgcHV0dGluZyBhbGwgb2YgdGhlbSB0byB0aGUgQUxMIHZhbHVlICovXG5mdW5jdGlvbiByZXNldF9maWx0ZXJzKCkge1xuICAgIC8qIEl0ZXJhdGUgYWxsIHRoZSBmaWx0ZXJzIGF2YWlsYWJsZSAqL1xuICAgIGZvciAoY29uc3QgW2ZpbHRlciwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGFsbF9hdmFpbGFibGVfZmlsdGVycy52YWx1ZSkpIHtcbiAgICAgICAgLyogU2V0IGVhY2ggZmlsdGVyIHRvIHRoZSBBTEwgdmFsdWUgKGZpcnN0IHZhbHVlKSAqL1xuICAgICAgICBzZXRfY29tcG9uZW50c19maWx0ZXIoZmlsdGVyLCB2YWx1ZVswXS52YWx1ZSk7XG4gICAgICAgIHNlbGVjdGVkX2ZpbHRlcnMudmFsdWVbZmlsdGVyXSA9IHZhbHVlWzBdO1xuICAgICAgICAvKiBIaWRlIGFsbCB0aGUgbmVlZGVkIGZpbHRlcnMgKi9cbiAgICAgICAgaGlkZV9uZXN0ZWRfZmlsdGVycyhmaWx0ZXIpO1xuICAgIH1cbn1cblxuLyogVGhpcyBmdW5jdGlvbiBsb2FkcyB0aGUgZmlsdGVycyAqL1xuYXN5bmMgZnVuY3Rpb24gbG9hZF9maWx0ZXJzKGZpbHRlcnNfYXZhaWxhYmxlLCByZXMpIHtcbiAgICBjb25zdCBhZGRlZF9maWx0ZXJzX2xpc3QgPSBbXTtcbiAgICBpZiAoIXJlcyAmJiBgJHtwcm9wcy5jb250ZXh0LnJlcG9ydF9maWx0ZXJzX2VuZHBvaW50fWApIHtcbiAgICAgICAgcmVzID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KGAke3Byb3BzLmNvbnRleHQucmVwb3J0X2ZpbHRlcnNfZW5kcG9pbnR9YCk7XG4gICAgfVxuICAgIGZpbHRlcnNfYXZhaWxhYmxlLmZvckVhY2goYXN5bmMgKGVsZW1lbnQpID0+IHtcbiAgICAgICAgY29uc3QgaWQgPSBlbGVtZW50Py5uYW1lIHx8IFwiXCI7XG4gICAgICAgIGNvbnN0IGZpbHRlcl9vcHRpb25zID0gcmVzLmZpbmQoKGVsKSA9PiBlbC5pZCA9PSBpZCk/Lm9wdGlvbnM7XG4gICAgICAgIC8qIENoZWNrIHRoZSBmaWx0ZXJzIGF2YWlsYWJsZSwgaWYgbm8gZmlsdGVyIG9yIG9ubHkgMSBmaWx0ZXIgaXMgcHJvdmlkZWQsIGhpZGUgdGhlIGRyb3Bkb3duICovXG4gICAgICAgIGlmIChmaWx0ZXJfb3B0aW9ucyAmJiBmaWx0ZXJfb3B0aW9ucy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBsZXQgYWxsX2xhYmVsID0gaTE4bignZGJfc2VhcmNoLmFsbC4nICsgaWQpXG4gICAgICAgICAgICBpZiAoZGF0YVV0aWxzLmlzRW1wdHlPck51bGwoYWxsX2xhYmVsKSkge1xuICAgICAgICAgICAgICAgIGFsbF9sYWJlbCA9IGkxOG4oJ2FsbCcpICsgXCIgXCIgKyBpMThuKCdkYl9zZWFyY2guJyArIGlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qIEFkZCB0aGUgJ0FsbCcgZmlsdGVyICovXG4gICAgICAgICAgICAvKiBUbyBiZSBzYWZlLCBhZGQgYSBkZWZhdWx0IG5hbWUgKi9cbiAgICAgICAgICAgIGZpbHRlcl9vcHRpb25zLnVuc2hpZnQoe1xuICAgICAgICAgICAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgICAgICAgICAgIGxhYmVsOiBhbGxfbGFiZWxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBhbGxfYXZhaWxhYmxlX2ZpbHRlcnMudmFsdWVbaWRdID0gZmlsdGVyX29wdGlvbnM7XG4gICAgICAgICAgICBzZWxlY3RlZF9maWx0ZXJzLnZhbHVlW2lkXSA9IGZpbHRlcl9vcHRpb25zWzBdO1xuICAgICAgICAgICAgZmlsdGVyZWRfZmlsdGVycy52YWx1ZVtpZF0gPSBmaWx0ZXJfb3B0aW9uc1xuICAgICAgICAgICAgYWRkZWRfZmlsdGVyc19saXN0LnB1c2goaWQpO1xuXG4gICAgICAgICAgICBjb25zdCBuZXN0ZWQgPSBlbGVtZW50Py5uZXN0ZWQgfHwgW107XG4gICAgICAgICAgICBpZiAobmVzdGVkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBuZXN0ZWRfZmlsdGVycy52YWx1ZVtpZF0gPSBhd2FpdCBsb2FkX2ZpbHRlcnMobmVzdGVkLCByZXMgLyogU2tpcCB0aGUgcmVxdWVzdCB0byB0aGUgYmFja2VuZCAqLylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qIE5vdyBjaGVjayB0aGUgbmVzdGVkIGZpbHRlcnMsIHRoZXkgYXBwZWFyIE9OTFkgXG4gICAgICAgICAgICAqIGlmIHRoZSBmaWx0ZXIgc2VsZWN0ZWQgaXMgbm90IEFMTCAoZmlyc3QgZW50cnkpIFxuICAgICAgICAgICAgKi9cbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBhZGRlZF9maWx0ZXJzX2xpc3Q7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGxvYWRfY29tcG9uZW50cyhlcG9jaF9pbnRlcnZhbCwgdGVtcGxhdGVfbmFtZSkge1xuICAgIC8qIEVuYWJsZSBSRVNUIGNhbGxzICovXG4gICAgZGF0YV9mcm9tX2JhY2t1cCA9IGZhbHNlO1xuXG4gICAgbGV0IHVybF9yZXF1ZXN0ID0gYCR7cHJvcHMuY29udGV4dC50ZW1wbGF0ZV9lbmRwb2ludH0/dGVtcGxhdGU9JHt0ZW1wbGF0ZV9uYW1lfWA7XG4gICAgbGV0IHJlcyA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmxfcmVxdWVzdCk7XG4gICAgY29tcG9uZW50cy52YWx1ZSA9IHJlcy5saXN0LmZpbHRlcigoYykgPT4gY29tcG9uZW50c19kaWN0W2MuY29tcG9uZW50XSAhPSBudWxsKVxuICAgICAgICAubWFwKChjLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgbGV0IGNfZXh0ID0ge1xuICAgICAgICAgICAgICAgIGZpbHRlcnM6IHt9LFxuICAgICAgICAgICAgICAgIC4uLmNcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB1cGRhdGVfY29tcG9uZW50X2Vwb2NoX2ludGVydmFsKGNfZXh0LCBlcG9jaF9pbnRlcnZhbCk7XG4gICAgICAgICAgICByZXR1cm4gY19leHQ7XG4gICAgICAgIH0pO1xuICAgIHJlc2V0X2ZpbHRlcnMoKTtcbiAgICBpZihyZXMuZmlsdGVycykge1xuICAgICAgICBmaWx0ZXJzX3RvX3Nob3cudmFsdWUgPSBhd2FpdCBsb2FkX2ZpbHRlcnMocmVzLmZpbHRlcnMpO1xuICAgIH1cbiAgICBhd2FpdCBuZXh0VGljaygpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVfY29tcG9uZW50X2Vwb2NoX2ludGVydmFsKGMsIGVwb2NoX2ludGVydmFsKSB7XG4gICAgY29uc3QgaW50ZXJ2YWxfc2Vjb25kcyA9IHRpbWVmcmFtZXNfZGljdFtjLnRpbWVfd2luZG93IHx8IFwiNV9taW5cIl07XG4gICAgaWYgKGVwb2NoX2ludGVydmFsID09IG51bGwpIHtcbiAgICAgICAgY29uc3QgZXBvY2hfZW5kID0gbnRvcG5nX3V0aWxpdHkuZ2V0X3V0Y19zZWNvbmRzKCk7XG4gICAgICAgIGVwb2NoX2ludGVydmFsID0geyBlcG9jaF9iZWdpbjogZXBvY2hfZW5kIC0gaW50ZXJ2YWxfc2Vjb25kcywgZXBvY2hfZW5kOiBlcG9jaF9lbmQgfTtcbiAgICB9XG4gICAgY29uc3QgdXRjX29mZnNldCA9IHRpbWVmcmFtZXNfZGljdFtjLnRpbWVfb2Zmc2V0XSB8fCAwO1xuICAgIGMuZXBvY2hfYmVnaW4gPSBlcG9jaF9pbnRlcnZhbC5lcG9jaF9iZWdpbiAtIHV0Y19vZmZzZXQ7XG4gICAgYy5lcG9jaF9lbmQgPSBlcG9jaF9pbnRlcnZhbC5lcG9jaF9lbmQgLSB1dGNfb2Zmc2V0O1xufVxuXG5mdW5jdGlvbiB1cGRhdGVfY29tcG9uZW50X2ZpbHRlcnMoYywgZmlsdGVyX2lkLCBmaWx0ZXJfdmFsdWUpIHtcbiAgICBjLmZpbHRlcnNbZmlsdGVyX2lkXSA9IGZpbHRlcl92YWx1ZTtcbn1cblxuLyogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG5cbi8qIFRoaXMgZnVuY3Rpb24gaGlkZXMgdGhlIG5lc3RlZCBmaWx0ZXJzICh0aGUgb25lcyB0byBub3Qgc2hvdykgKi9cbmZ1bmN0aW9uIGhpZGVfbmVzdGVkX2ZpbHRlcnMoZmlsdGVyKSB7XG4gICAgY29uc3QgdG9faGlkZV9maWx0ZXJzID0gbmVzdGVkX2ZpbHRlcnMudmFsdWVbZmlsdGVyXTtcbiAgICB0b19oaWRlX2ZpbHRlcnM/LmZvckVhY2goKGZpbHRlcl90b19yZW1vdmUpID0+IHtcbiAgICAgICAgLyogRm9yIGVhY2ggZmlsdGVyIGNoZWNrIGlmIGN1cnJlbnRseSBpdCdzIGRpc3BsYXllZCAqL1xuICAgICAgICBpZiAoZmlsdGVyc190b19zaG93LnZhbHVlLmluY2x1ZGVzKGZpbHRlcl90b19yZW1vdmUpKSB7XG4gICAgICAgICAgICAvKiBJZiBpdCdzIGRpc3BsYXllZCwgdGhlbiByZW1vdmUgaXQgKi9cbiAgICAgICAgICAgIGZpbHRlcnNfdG9fc2hvdy52YWx1ZSA9IGZpbHRlcnNfdG9fc2hvdy52YWx1ZS5maWx0ZXIoKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudCAhPSBmaWx0ZXJfdG9fcmVtb3ZlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvKiBSZXNldCBpdHMgdmFsdWUgdG8gdGhlIGRlZmF1bHQgb25lICovXG4gICAgICAgICAgICBjb25zdCBhbGxfdmFsdWUgPSBhbGxfYXZhaWxhYmxlX2ZpbHRlcnMudmFsdWVbZmlsdGVyX3RvX3JlbW92ZV1bMF07XG4gICAgICAgICAgICBzZWxlY3RlZF9maWx0ZXJzLnZhbHVlW2ZpbHRlcl90b19yZW1vdmVdID0gYWxsX3ZhbHVlO1xuICAgICAgICAgICAgc2V0X2NvbXBvbmVudHNfZmlsdGVyKGZpbHRlcl90b19yZW1vdmUsIGFsbF92YWx1ZS52YWx1ZSlcbiAgICAgICAgfVxuICAgIH0pXG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG4vKiBUaGlzIGZ1bmN0aW9uIHNob3dzIHRoZSBmaWx0ZXJzIHdoZW4gY2xpY2tpbmcgb24gYSBmaWx0ZXIgaGF2aW5nIGEgbmVzdGVkIG9wdGlvbiAqL1xuZnVuY3Rpb24gc2hvd19uZXN0ZWRfZmlsdGVycyhmaWx0ZXJfdG9fY2hlY2ssIGN1cnJlbnRseV9zZWxlY3RlZF9maWx0ZXIpIHtcbiAgICAvKiBHZXRzIHRoZSBuZXN0ZWQgZmlsdGVycyBvZiB0aGUgZmlsdGVyIHRvIGNoZWNrICovXG4gICAgY29uc3Qgc2hvd19maWx0ZXJzID0gbmVzdGVkX2ZpbHRlcnMudmFsdWVbZmlsdGVyX3RvX2NoZWNrXTtcbiAgICBzaG93X2ZpbHRlcnM/LmZvckVhY2goKGZpbHRlcl90b19hZGQpID0+IHtcbiAgICAgICAgLyogR2V0IGFsbCB0aGUgYXZhaWxhYmxlIG9wdGlvbnMgZm9yIHRoZSBuZXN0ZWQgb3B0aW9uICovXG4gICAgICAgIGNvbnN0IGFsbF9maWx0ZXJzID0gYWxsX2F2YWlsYWJsZV9maWx0ZXJzLnZhbHVlW2ZpbHRlcl90b19hZGRdO1xuICAgICAgICBjb25zdCBmaWx0ZXJzX3RvX2VuYWJsZSA9IFtdO1xuXG4gICAgICAgIC8qIENoZWNrIGlmIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgZmlsdGVyIGlzIHRoZSBmaWx0ZXIgdG8gY2hlY2sgZm9yIHRoZSBuZXN0ZWQgZmlsdGVycyAqL1xuICAgICAgICBpZiAoY3VycmVudGx5X3NlbGVjdGVkX2ZpbHRlciA9PSBmaWx0ZXJfdG9fY2hlY2spIHtcbiAgICAgICAgICAgIC8qIElmIGl0IGlzLCByZXNldCBpdHMgdmFsdWUgdG8gdGhlIGRlZmF1bHQgb25lcyAqL1xuICAgICAgICAgICAgY29uc3QgYWxsX3ZhbHVlID0gYWxsX2F2YWlsYWJsZV9maWx0ZXJzLnZhbHVlW2ZpbHRlcl90b19hZGRdWzBdO1xuICAgICAgICAgICAgc2VsZWN0ZWRfZmlsdGVycy52YWx1ZVtmaWx0ZXJfdG9fYWRkXSA9IGFsbF92YWx1ZTtcbiAgICAgICAgICAgIHNldF9jb21wb25lbnRzX2ZpbHRlcihmaWx0ZXJfdG9fYWRkLCBhbGxfdmFsdWUudmFsdWUpXG4gICAgICAgIH1cblxuICAgICAgICAvKiBGaWx0ZXIgb3V0IHRoZSB2YWx1ZXMgb2YgdGhlIG5lc3RlZCBmaWx0ZXIgdGhhdCBoYXZlIHRvIGJlIGhpZGUgKi9cbiAgICAgICAgYWxsX2ZpbHRlcnM/LmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChlbGVtZW50LnNob3dfb25seV92YWx1ZSA9PT0gc2VsZWN0ZWRfZmlsdGVycy52YWx1ZVtmaWx0ZXJfdG9fY2hlY2tdLnZhbHVlIHx8IGVsZW1lbnQudmFsdWUgPT0gbnVsbClcbiAgICAgICAgICAgICAgICBmaWx0ZXJzX3RvX2VuYWJsZS5wdXNoKGVsZW1lbnQpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvKiBBZGQgdGhlIHJlbWFpbmluZyB2YWx1ZXMgdG8gdGhlIGFycmF5IHRoYXQgc2hvd3MgdGhlIGZpbHRlcnMgKi9cbiAgICAgICAgaWYgKCFmaWx0ZXJzX3RvX3Nob3cudmFsdWUuaW5jbHVkZXMoZmlsdGVyX3RvX2FkZCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4X3RvX3B1c2ggPSBmaWx0ZXJzX3RvX3Nob3cudmFsdWUuaW5kZXhPZihmaWx0ZXJfdG9fY2hlY2spO1xuICAgICAgICAgICAgZmlsdGVyc190b19zaG93LnZhbHVlLnNwbGljZShpbmRleF90b19wdXNoICsgMSwgMCwgZmlsdGVyX3RvX2FkZCk7XG4gICAgICAgIH1cbiAgICAgICAgZmlsdGVyc190b19lbmFibGUubGVuZ3RoID4gMCA/XG4gICAgICAgICAgICBmaWx0ZXJlZF9maWx0ZXJzLnZhbHVlW2ZpbHRlcl90b19hZGRdID0gZmlsdGVyc190b19lbmFibGUgOlxuICAgICAgICAgICAgZGVsZXRlIGZpbHRlcmVkX2ZpbHRlcnMudmFsdWVbZmlsdGVyX3RvX2FkZF1cbiAgICB9KVxufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgd2hlbmV2ZXIgYSBmaWx0ZXIgaXMgY2xpY2tlZCAqL1xuZnVuY3Rpb24gc2VsZWN0X2ZpbHRlcihvcHRpb24sIGZpbHRlcl9pZCkge1xuICAgIC8qIFNldCB0aGUgZmlsdGVyLCByZWFkeSBmb3IgdGhlIHJlc3QgKi9cbiAgICBzZXRfY29tcG9uZW50c19maWx0ZXIoZmlsdGVyX2lkLCBvcHRpb24udmFsdWUpO1xuICAgIGZvciAoY29uc3QgW2ZpbHRlciwgX10gb2YgT2JqZWN0LmVudHJpZXMoYWxsX2F2YWlsYWJsZV9maWx0ZXJzLnZhbHVlKSkge1xuICAgICAgICAvKiBJdGVyYXRlIGFsbCB0aGUgYXZhaWxhYmxlIGZpbHRlcnMgYW5kIGhpZGUgdGhlIG9uZXMgdG8gaGlkZVxuICAgICAgICAqIGFuZCBzaG93IHRoZSBvbmVzIHRvIHNob3dcbiAgICAgICAgKi9cbiAgICAgICAgY29uc3QgZmlsdGVyX3RvX2NoZWNrID0gc2VsZWN0ZWRfZmlsdGVycy52YWx1ZVtmaWx0ZXJdO1xuICAgICAgICBmaWx0ZXJfdG9fY2hlY2s/LnZhbHVlID8gc2hvd19uZXN0ZWRfZmlsdGVycyhmaWx0ZXIsIGZpbHRlcl9pZCkgOiBoaWRlX25lc3RlZF9maWx0ZXJzKGZpbHRlcik7XG4gICAgfVxufVxuXG4vKiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuZnVuY3Rpb24gc2VsZWN0X3JlcG9ydF90ZW1wbGF0ZSgpIHtcbiAgICBpZiAoIXNlbGVjdGVkX3JlcG9ydF90ZW1wbGF0ZS52YWx1ZS5hbGxvd19lZGl0ICYmIGVkaXRfbW9kZS52YWx1ZSkge1xuICAgICAgICB0b2dnbGVfZWRpdF9tb2RlKCk7XG4gICAgfVxuXG4gICAgaWYgKHByaW50YWJsZSA9PSB0cnVlKSB7XG4gICAgICAgIHNldF9yZXBvcnRfdGl0bGUoKTtcbiAgICB9XG4gICAgaWYgKHNlbGVjdGVkX3JlcG9ydF90ZW1wbGF0ZS52YWx1ZS5pc19vcGVuX3JlcG9ydCA9PSB0cnVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29tcG9uZW50c19pbmZvID0ge307XG4gICAgdXBkYXRlX3RlbXBsYXRlc19saXN0KCk7XG4gICAgY29uc3QgZ2xvYmFsX3N0YXR1cyA9IG50b3BuZ19zdGF0dXNfbWFuYWdlci5nZXRfc3RhdHVzKHRydWUpO1xuICAgIGxldCBlcG9jaF9pbnRlcnZhbCA9IHsgZXBvY2hfYmVnaW46IGdsb2JhbF9zdGF0dXMuZXBvY2hfYmVnaW4sIGVwb2NoX2VuZDogZ2xvYmFsX3N0YXR1cy5lcG9jaF9lbmQgfTtcbiAgICBpZiAoZGF0YV9mcm9tX2JhY2t1cCA9PSB0cnVlKSB7IC8vIGxhc3QgcmVwb3J0IHNlbGVjdGVkIGl0IHdhcyBhIHNhdmVkIHJlcG9ydCBhbmQgdGhlbiB3ZSBtdXN0IHRvIHJlc3RvcmUgZGVmYXVsdCB0aW1lc3RhbXBcbiAgICAgICAgZXBvY2hfaW50ZXJ2YWwgPSBudG9wbmdfdXRpbGl0eS5zZXRfZGVmYXVsdF90aW1lX2ludGVydmFsKHVuZGVmaW5lZCwgXCJtaW5cIik7XG4gICAgICAgIG50b3BuZ19ldmVudHNfbWFuYWdlci5lbWl0X2V2ZW50KG50b3BuZ19ldmVudHMuRVBPQ0hfQ0hBTkdFLCBlcG9jaF9pbnRlcnZhbCwgcHJvcHMuY29udGV4dC5wYWdlKTtcbiAgICB9XG4gICAgbG9hZF9jb21wb25lbnRzKGVwb2NoX2ludGVydmFsLCBzZWxlY3RlZF9yZXBvcnRfdGVtcGxhdGUudmFsdWUudmFsdWUpO1xufVxuXG5mdW5jdGlvbiBzaG93X3N0b3JlX3JlcG9ydF9tb2RhbCgpIHtcbiAgICBtb2RhbF9zdG9yZV9yZXBvcnQudmFsdWUuc2hvdygpO1xufVxuXG5mdW5jdGlvbiBzaG93X29wZW5fcmVwb3J0X21vZGFsKCkge1xuICAgIG1vZGFsX29wZW5fcmVwb3J0LnZhbHVlLnNob3coKTtcbn1cblxuZnVuY3Rpb24gc2hvd191cGxvYWRfcmVwb3J0X21vZGFsKCkge1xuICAgIG1vZGFsX3VwbG9hZF9yZXBvcnQudmFsdWUuc2hvdygpO1xufVxuXG5mdW5jdGlvbiBnZXRfc3VnZ2VzdGVkX3JlcG9ydF9uYW1lKCkge1xuICAgIGxldCBuYW1lID0gXCJyZXBvcnRcIjtcbiAgICBpZiAocHJvcHMuY29udGV4dC5wYWdlID09IFwidnMtcmVwb3J0XCIpIHtcbiAgICAgICAgbmFtZSA9IHByb3BzLmNvbnRleHQudGl0bGU7XG4gICAgfSBlbHNlIGlmIChtYWluX2Vwb2NoX2ludGVydmFsLnZhbHVlICYmXG4gICAgICAgIG1haW5fZXBvY2hfaW50ZXJ2YWwudmFsdWUuZXBvY2hfZW5kKSB7XG4gICAgICAgIG5hbWUgKz0gXCItXCIgKyBudG9wbmdfdXRpbGl0eS5mcm9tX3V0Y190b19zZXJ2ZXJfZGF0ZV9mb3JtYXQobWFpbl9lcG9jaF9pbnRlcnZhbC52YWx1ZS5lcG9jaF9lbmQgKiAxMDAwLCAnREQtTU0tWVlZWScpO1xuICAgIH1cbiAgICByZXR1cm4gbmFtZTtcbn1cblxuY29uc3QgdXBsb2FkX3JlcG9ydCA9IGFzeW5jIChjb250ZW50X3N0cmluZykgPT4ge1xuICAgIGxldCBjb250ZW50ID0gSlNPTi5wYXJzZShjb250ZW50X3N0cmluZyk7XG4gICAgc2V0X3JlcG9ydChjb250ZW50LCBjb250ZW50Lm5hbWUpO1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5kZWxldGVfa2V5X2Zyb21fdXJsKFwicmVwb3J0X25hbWVcIik7XG59XG5cbmZ1bmN0aW9uIHNldF9yZXBvcnQoY29udGVudCwgbmFtZSkge1xuICAgIHVwZGF0ZV90ZW1wbGF0ZXNfbGlzdChuYW1lKTtcbiAgICBjb25zdCBlcG9jaF9zdGF0dXMgPSB7IGVwb2NoX2JlZ2luOiBjb250ZW50LmVwb2NoX2JlZ2luLCBlcG9jaF9lbmQ6IGNvbnRlbnQuZXBvY2hfZW5kIH07XG4gICAgbnRvcG5nX2V2ZW50c19tYW5hZ2VyLmVtaXRfZXZlbnQobnRvcG5nX2V2ZW50cy5FUE9DSF9DSEFOR0UsIGVwb2NoX3N0YXR1cywgcHJvcHMuY29udGV4dC5wYWdlKTtcbiAgICBsb2FkX3JlcG9ydChjb250ZW50KTtcbn1cblxuY29uc3QgbGlzdF9yZXBvcnRzID0gYXN5bmMgKCkgPT4ge1xuICAgIGxldCB1cmwgPSBgJHtwcm9wcy5jb250ZXh0LnJlcG9ydF9saXN0X2VuZHBvaW50fT9pZmlkPSR7cHJvcHMuY29udGV4dC5pZmlkfWA7XG4gICAgbGV0IGZpbGVzX29iaiA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwpO1xuICAgIGxldCBmaWxlcyA9IG50b3BuZ191dGlsaXR5Lm9iamVjdF90b19hcnJheShmaWxlc19vYmopO1xuXG4gICAgLyogUmV0dXJuIGFycmF5IG9mIFt7IG5hbWU6IFN0cmluZywgZXBvY2g6IE51bWJlciB9LCAuLi5dICovXG5cbiAgICByZXR1cm4gZmlsZXM7XG59XG5cbmNvbnN0IGxvYWRfcmVwb3J0ID0gYXN5bmMgKGNvbnRlbnQpID0+IHtcbiAgICBsZXQgdG1wX2Vwb2NoX2ludGVydmFsID0ge1xuICAgICAgICBlcG9jaF9iZWdpbjogY29udGVudC5lcG9jaF9iZWdpbixcbiAgICAgICAgZXBvY2hfZW5kOiBjb250ZW50LmVwb2NoX2VuZFxuICAgIH07XG4gICAgbGV0IHRtcF90ZW1wbGF0ZSA9IGNvbnRlbnQudGVtcGxhdGU7XG4gICAgbGV0IHRtcF9jb21wb25lbnRzX2RhdGEgPSBjb250ZW50LmRhdGE7XG5cbiAgICBsZXQgdG1wX2NvbXBvbmVudHNfaW5mbyA9IHt9O1xuICAgIGZvciAobGV0IGtleSBpbiB0bXBfY29tcG9uZW50c19kYXRhKSB7XG4gICAgICAgIGxldCBpbmZvID0ge1xuICAgICAgICAgICAgZGF0YTogdG1wX2NvbXBvbmVudHNfZGF0YVtrZXldLFxuICAgICAgICB9O1xuICAgICAgICB0bXBfY29tcG9uZW50c19pbmZvW2tleV0gPSBpbmZvO1xuICAgIH1cblxuICAgIC8qIERpc2FibGUgUkVTVCBjYWxscyAqL1xuICAgIGRhdGFfZnJvbV9iYWNrdXAgPSB0cnVlO1xuXG4gICAgLyogU2V0IHRoZSBjYWNoZWQgZGF0YSBmcm9tIHRoZSBiYWNrdXAgKi9cbiAgICBjb21wb25lbnRzX2luZm8gPSB0bXBfY29tcG9uZW50c19pbmZvO1xuXG4gICAgLyogQ2hhbmdlIHRoZSBjb21wb25lbnRzICh0ZW1wbGF0ZSkgZnJvbSB0aGUgYmFja3VwICovXG4gICAgY29tcG9uZW50cy52YWx1ZSA9IHRtcF90ZW1wbGF0ZTtcblxuICAgIC8qIENoYW5nZSB0aGUgdGltZSBpbnRlcnZhbCBvbiBjb21wb25lbnRzICovXG4gICAgc2V0X2NvbXBvbmVudHNfZXBvY2hfaW50ZXJ2YWwodG1wX2Vwb2NoX2ludGVydmFsKTtcbn1cblxuY29uc3Qgb3Blbl9yZXBvcnQgPSBhc3luYyAoZmlsZV9uYW1lKSA9PiB7XG4gICAgbGV0IHVybCA9IGAke3Byb3BzLmNvbnRleHQucmVwb3J0X29wZW5fZW5kcG9pbnR9P2lmaWQ9JHtwcm9wcy5jb250ZXh0LmlmaWR9JnJlcG9ydF9uYW1lPSR7ZmlsZV9uYW1lfWA7XG4gICAgbGV0IGNvbnRlbnQgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsKTtcbiAgICBpZiAoY29udGVudCkge1xuICAgICAgICBzZXRfcmVwb3J0KGNvbnRlbnQsIGZpbGVfbmFtZSk7XG4gICAgICAgIHdhcm5pbmdfbWVzc2FnZS52YWx1ZSA9IFwiXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgd2FybmluZ19tZXNzYWdlLnZhbHVlID0gX2kxOG4oXCJyZXBvcnQudW5hYmxlX3RvX29wZW5cIik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVfdGVtcGxhdGVzX2xpc3QocmVwb3J0X25hbWVfdG9fb3Blbikge1xuICAgIHJlcG9ydHNfdGVtcGxhdGVzLnZhbHVlID0gcmVwb3J0c190ZW1wbGF0ZXMudmFsdWUuZmlsdGVyKCh0KSA9PiB0LmlzX29wZW5fcmVwb3J0ID09IGZhbHNlKTtcbiAgICBpZiAocmVwb3J0X25hbWVfdG9fb3BlbiA9PSBudWxsKSB7IC8vIGluIHRoaXMgY2FzZSBpcyBzZWxlY3RlZCBhIHJlcG9ydF90ZW1wbGF0ZVxuICAgICAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoXCJyZXBvcnRfdGVtcGxhdGVcIiwgc2VsZWN0ZWRfcmVwb3J0X3RlbXBsYXRlLnZhbHVlLnZhbHVlKTtcbiAgICAgICAgcHJvcHMuY29udGV4dC50ZW1wbGF0ZSA9IHNlbGVjdGVkX3JlcG9ydF90ZW1wbGF0ZS52YWx1ZS52YWx1ZTtcbiAgICAgICAgbnRvcG5nX3VybF9tYW5hZ2VyLmRlbGV0ZV9rZXlfZnJvbV91cmwoXCJyZXBvcnRfbmFtZVwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCB0X2VudHJ5ID0ge1xuICAgICAgICB2YWx1ZTogcmVwb3J0X25hbWVfdG9fb3BlbixcbiAgICAgICAgbGFiZWw6IF9pMThuKFwiZGFzaGJvYXJkLmN1c3RvbVwiKSxcbiAgICAgICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgICAgICB0b29sYm94OiBudWxsLFxuICAgICAgICBpc19vcGVuX3JlcG9ydDogdHJ1ZSxcbiAgICAgICAgYWxsb3dfZWRpdDogZmFsc2VcbiAgICB9O1xuICAgIHJlcG9ydHNfdGVtcGxhdGVzLnZhbHVlLnB1c2godF9lbnRyeSk7XG4gICAgc2VsZWN0ZWRfcmVwb3J0X3RlbXBsYXRlLnZhbHVlID0gdF9lbnRyeTtcbiAgICBwcm9wcy5jb250ZXh0LnRlbXBsYXRlID0gcmVwb3J0X25hbWVfdG9fb3BlbjtcbiAgICBudG9wbmdfdXJsX21hbmFnZXIuc2V0X2tleV90b191cmwoXCJyZXBvcnRfbmFtZVwiLCBzZWxlY3RlZF9yZXBvcnRfdGVtcGxhdGUudmFsdWUudmFsdWUpO1xuICAgIG50b3BuZ191cmxfbWFuYWdlci5kZWxldGVfa2V5X2Zyb21fdXJsKFwicmVwb3J0X3RlbXBsYXRlXCIpO1xufVxuXG5jb25zdCBkZWxldGVfcmVwb3J0ID0gYXN5bmMgKGZpbGVfbmFtZSkgPT4ge1xuICAgIGxldCBzdWNjZXNzID0gZmFsc2U7XG5cbiAgICBsZXQgcGFyYW1zID0ge1xuICAgICAgICBjc3JmOiBwcm9wcy5jb250ZXh0LmNzcmYsXG4gICAgICAgIGlmaWQ6IHByb3BzLmNvbnRleHQuaWZpZCxcbiAgICAgICAgcmVwb3J0X25hbWU6IGZpbGVfbmFtZVxuICAgIH07XG5cbiAgICBsZXQgdXJsID0gYCR7cHJvcHMuY29udGV4dC5yZXBvcnRfZGVsZXRlX2VuZHBvaW50fWA7XG4gICAgdHJ5IHtcbiAgICAgICAgbGV0IGhlYWRlcnMgPSB7XG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIH07XG4gICAgICAgIGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBhcmFtcykgfSk7XG4gICAgICAgIHN1Y2Nlc3MgPSB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1Y2Nlc3M7XG59XG5cbi8qIER1bXAgcmVwb3J0IGNvbnRlbnQgLSBrZWVwIGluIHN5bmMgd2l0aCBkYXNoYm9hcmRfdXRpbHMuYnVpbGRfcmVwb3J0IChsdWEpICovXG5jb25zdCBzZXJpYWxpemVfcmVwb3J0ID0gYXN5bmMgKG5hbWUpID0+IHtcblxuICAgIGxldCBjb21wb25lbnRzX2RhdGEgPSB7fTtcbiAgICBmb3IgKHZhciBrZXkgaW4gY29tcG9uZW50c19pbmZvKSB7XG4gICAgICAgIGNvbXBvbmVudHNfZGF0YVtrZXldID0gYXdhaXQgY29tcG9uZW50c19pbmZvW2tleV0uZGF0YTtcbiAgICB9XG5cbiAgICBsZXQgY29udGVudCA9IHtcbiAgICAgICAgdmVyc2lvbjogXCIxLjBcIiwgLy8gUmVwb3J0IGR1bXAgdmVyc2lvblxuICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICB0ZW1wbGF0ZTogY29tcG9uZW50cy52YWx1ZSxcbiAgICAgICAgZGF0YTogY29tcG9uZW50c19kYXRhXG4gICAgfTtcblxuICAgIGlmIChtYWluX2Vwb2NoX2ludGVydmFsLnZhbHVlICYmXG4gICAgICAgIG1haW5fZXBvY2hfaW50ZXJ2YWwudmFsdWUuZXBvY2hfYmVnaW4gJiZcbiAgICAgICAgbWFpbl9lcG9jaF9pbnRlcnZhbC52YWx1ZS5lcG9jaF9lbmQpIHtcbiAgICAgICAgY29udGVudC5lcG9jaF9iZWdpbiA9IG1haW5fZXBvY2hfaW50ZXJ2YWwudmFsdWUuZXBvY2hfYmVnaW47XG4gICAgICAgIGNvbnRlbnQuZXBvY2hfZW5kID0gbWFpbl9lcG9jaF9pbnRlcnZhbC52YWx1ZS5lcG9jaF9lbmQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGNvbnRlbnQpO1xufVxuXG5jb25zdCBzdG9yZV9yZXBvcnQgPSBhc3luYyAoZmlsZV9uYW1lKSA9PiB7XG4gICAgbGV0IHN1Y2Nlc3MgPSBmYWxzZTtcblxuICAgIGxldCBkYXRhID0ge1xuICAgICAgICBjc3JmOiBwcm9wcy5jb250ZXh0LmNzcmYsXG4gICAgICAgIGlmaWQ6IHByb3BzLmNvbnRleHQuaWZpZCxcbiAgICAgICAgcmVwb3J0X25hbWU6IGZpbGVfbmFtZSxcbiAgICAgICAgY29udGVudDogYXdhaXQgc2VyaWFsaXplX3JlcG9ydChmaWxlX25hbWUpXG4gICAgfTtcblxuICAgIGxldCB1cmwgPSBgJHtwcm9wcy5jb250ZXh0LnJlcG9ydF9zdG9yZV9lbmRwb2ludH1gO1xuICAgIHRyeSB7XG4gICAgICAgIGxldCBoZWFkZXJzID0ge1xuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICB9O1xuICAgICAgICBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsLCB7IG1ldGhvZDogJ3Bvc3QnLCBoZWFkZXJzLCBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKSB9KTtcbiAgICAgICAgc3VjY2VzcyA9IHRydWU7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3VjY2Vzcztcbn1cblxuYXN5bmMgZnVuY3Rpb24gZG93bmxvYWRfcmVwb3J0KCkge1xuICAgIHZhciBuYW1lID0gZ2V0X3N1Z2dlc3RlZF9yZXBvcnRfbmFtZSgpO1xuICAgIHZhciBmaWxlbmFtZSA9IG5hbWUgKyAnLmpzb24nO1xuICAgIHZhciBjb250ZW50ID0gYXdhaXQgc2VyaWFsaXplX3JlcG9ydChuYW1lKTtcbiAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnaHJlZicsICdkYXRhOnRleHQvcGxhaW47Y2hhcnNldD11dGYtOCwnICsgZW5jb2RlVVJJQ29tcG9uZW50KGNvbnRlbnQpKTtcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnZG93bmxvYWQnLCBmaWxlbmFtZSk7XG4gICAgZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gICAgZWxlbWVudC5jbGljaygpO1xuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZWxlbWVudCk7XG59XG5cbmZ1bmN0aW9uIHByaW50X3JlcG9ydCgpIHtcbiAgICBpZiAocHJpbnRhYmxlID09IHRydWUpIHtcbiAgICAgICAgd2luZG93LnByaW50KCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBsZXQgdXJsX3BhcmFtc19vYmogPSBudG9wbmdfdXJsX21hbmFnZXIuZ2V0X3VybF9vYmplY3QoKTtcbiAgICB1cmxfcGFyYW1zX29iai5wcmludGFibGUgPSB0cnVlO1xuICAgIGNvbnN0IHBhcmFtcyA9IG50b3BuZ191cmxfbWFuYWdlci5vYmpfdG9fdXJsX3BhcmFtcyh1cmxfcGFyYW1zX29iaik7XG5cbiAgICBsZXQgdXJsID0gYCR7d2luZG93LmxvY2F0aW9uLm9yaWdpbn0ke3dpbmRvdy5sb2NhdGlvbi5wYXRobmFtZX0/JHtwYXJhbXN9YDtcblxuICAgIC8vY29uc3QgcHJpbnRfa2V5ID0gXCJwcmludGFibGVcIjtcbiAgICAvL250b3BuZ191cmxfbWFuYWdlci5zZXRfa2V5X3RvX3VybChwcmludF9rZXksIHRydWUpO1xuXG4gICAgbnRvcG5nX3VybF9tYW5hZ2VyLm9wZW5fbmV3X3dpbmRvdyh1cmwpO1xuXG4gICAgLy9udG9wbmdfdXJsX21hbmFnZXIuZGVsZXRlX2tleV9mcm9tX3VybChwcmludF9rZXkpO1xuICAgIC8vICQocmVwb3J0X2JveC52YWx1ZSkucHJpbnQoe21lZGlhUHJpbnQ6IHRydWUsIHRpbWVvdXQ6IDEwMDB9KTsgXG4gICAgLy8gJChyZXBvcnRfYm94LnZhbHVlKS5wcmludCgpO1xufVxuXG5mdW5jdGlvbiBnZXRfdGltZV9pbnRlcnZhbF9zdHJpbmcoZXBvY2hfYmVnaW4sIGVwb2NoX2VuZCkge1xuICAgIGlmIChkaXNhYmxlX2RhdGUudmFsdWUgPT0gdHJ1ZSkgeyByZXR1cm4gXCJcIjsgfVxuXG4gICAgY29uc3QgZXBvY2hfYmVnaW5fbXNlYyA9IGVwb2NoX2JlZ2luICogMTAwMDtcbiAgICBjb25zdCBlcG9jaF9lbmRfbXNlYyA9IGVwb2NoX2VuZCAqIDEwMDA7XG5cbiAgICBjb25zdCBiZWdpbl9kYXRlID0gbnRvcG5nX3V0aWxpdHkuZnJvbV91dGNfdG9fc2VydmVyX2RhdGVfZm9ybWF0KGVwb2NoX2JlZ2luX21zZWMsICdERC9NTS9ZWVlZJyk7XG4gICAgY29uc3QgYmVnaW5fdGltZSA9IG50b3BuZ191dGlsaXR5LmZyb21fdXRjX3RvX3NlcnZlcl9kYXRlX2Zvcm1hdChlcG9jaF9iZWdpbl9tc2VjLCAnSEg6bW06c3MnKTtcblxuICAgIGNvbnN0IGVuZF9kYXRlID0gbnRvcG5nX3V0aWxpdHkuZnJvbV91dGNfdG9fc2VydmVyX2RhdGVfZm9ybWF0KGVwb2NoX2VuZF9tc2VjLCAnREQvTU0vWVlZWScpO1xuICAgIGNvbnN0IGVuZF90aW1lID0gbnRvcG5nX3V0aWxpdHkuZnJvbV91dGNfdG9fc2VydmVyX2RhdGVfZm9ybWF0KGVwb2NoX2VuZF9tc2VjLCAnSEg6bW06c3MnKTtcblxuICAgIGNvbnN0IGJlZ2luID0gYCR7YmVnaW5fZGF0ZX0gJHtiZWdpbl90aW1lfWA7XG4gICAgY29uc3QgZW5kID0gKGJlZ2luX2RhdGUgPT0gZW5kX2RhdGUpID8gYCR7ZW5kX3RpbWV9YCA6IGAke2VuZF9kYXRlfSAke2VuZF90aW1lfWA7XG4gICAgcmV0dXJuIGAke2JlZ2lufSAtICR7ZW5kfWA7XG59XG5cbmZ1bmN0aW9uIHNldF9yZXBvcnRfdGl0bGUoKSB7XG4gICAgY29uc3QgZXBvY2hfaW50ZXJ2YWwgPSBudG9wbmdfc3RhdHVzX21hbmFnZXIuZ2V0X3N0YXR1cyh0cnVlKTtcbiAgICBjb25zdCB0aW1lX2ludGVydmFsX3N0cmluZyA9IGdldF90aW1lX2ludGVydmFsX3N0cmluZyhlcG9jaF9pbnRlcnZhbC5lcG9jaF9iZWdpbiwgZXBvY2hfaW50ZXJ2YWwuZXBvY2hfZW5kKTtcbiAgICBsZXQgdGl0bGUgPSBgbnRvcG5nIC0gUmVwb3J0ICR7c2VsZWN0ZWRfcmVwb3J0X3RlbXBsYXRlLnZhbHVlLmxhYmVsfSAke3RpbWVfaW50ZXJ2YWxfc3RyaW5nfWA7XG4gICAgZG9jdW1lbnQudGl0bGUgPSB0aXRsZTtcbn1cblxuLyogQ2FsbGJhY2sgdG8gcmVxdWVzdCBSRVNUIGRhdGEgZnJvbSBjb21wb25lbnRzICovXG5mdW5jdGlvbiBnZXRfY29tcG9uZW50X2RhdGFfZnVuYyhjb21wb25lbnQpIHtcbiAgICBjb25zdCBnZXRfY29tcG9uZW50X2RhdGEgPSBhc3luYyAodXJsLCB1cmxfcGFyYW1zLCBwb3N0X3BhcmFtcykgPT4ge1xuICAgICAgICBsZXQgaW5mbyA9IHt9O1xuICAgICAgICBpZiAoZGF0YV9mcm9tX2JhY2t1cCkge1xuICAgICAgICAgICAgaWYgKCFjb21wb25lbnRzX2luZm9bY29tcG9uZW50LmlkXSkgeyAvKiBTYWZldHkgY2hlY2sgKi9cbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiTm8gZGF0YSBmb3IgXCIgKyBjb21wb25lbnQuaWQpO1xuICAgICAgICAgICAgICAgIGluZm8uZGF0YSA9IHt9O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpbmZvID0gY29tcG9uZW50c19pbmZvW2NvbXBvbmVudC5pZF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIC8qIENoZWNrIGlmIHRoZXJlIGlzIGFscmVhZHkgYSBwcm9taXNlIGZvciB0aGUgc2FtZSByZXF1ZXN0ICovXG4gICAgICAgICAgICBpZiAoY29tcG9uZW50c19pbmZvW2NvbXBvbmVudC5pZF0pIHtcbiAgICAgICAgICAgICAgICBpbmZvID0gY29tcG9uZW50c19pbmZvW2NvbXBvbmVudC5pZF07XG4gICAgICAgICAgICAgICAgaWYgKGluZm8uZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBpbmZvLmRhdGE7IC8qIHdhaXQgaW4gY2FzZSBvZiBwcmV2aW91cyBwZW5kaW5nIHJlcXVlc3RzICovXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBkYXRhX3VybCA9IGAke3VybH0/JHt1cmxfcGFyYW1zfWA7XG5cbiAgICAgICAgICAgIGxvYWRpbmcudmFsdWUgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKHBvc3RfcGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgaW5mby5kYXRhID0gbnRvcG5nX3V0aWxpdHkuaHR0cF9wb3N0X3JlcXVlc3QoZGF0YV91cmwsIHBvc3RfcGFyYW1zKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpbmZvLmRhdGEgPSBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QoZGF0YV91cmwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5mby5kYXRhLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIGxvYWRpbmcudmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb21wb25lbnRzX2luZm9bY29tcG9uZW50LmlkXSA9IGluZm87XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGluZm8uZGF0YTtcbiAgICB9O1xuICAgIHJldHVybiBnZXRfY29tcG9uZW50X2RhdGFcbn1cblxuLyogQ2FsbGJhY2sgdG8gcmVxdWVzdCBSRVNUIGRhdGEgZnJvbSBjb21wb25lbnRzICovXG5mdW5jdGlvbiBzZXRfY29tcG9uZW50X2F0dHJfZnVuYyhjb21wb25lbnQpIHtcbiAgICBjb25zdCBzZXRfY29tcG9uZW50X2F0dHIgPSBhc3luYyAoYXR0ciwgdmFsdWUpID0+IHtcbiAgICAgICAgY29tcG9uZW50W2F0dHJdID0gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBzZXRfY29tcG9uZW50X2F0dHI7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuLyogKioqKioqKioqKioqKiogVGVtcGxhdGUgRWRpdG9yICoqKioqKioqKioqKioqICovXG5cbmZ1bmN0aW9uIHNob3dfbmV3X3RlbXBsYXRlX21vZGFsKCkge1xuICAgIG1vZGFsX25ld190ZW1wbGF0ZS52YWx1ZS5zaG93KCk7XG59XG5cbmZ1bmN0aW9uIGdldF9zdWdnZXN0ZWRfdGVtcGxhdGVfbmFtZSgpIHtcbiAgICBsZXQgbmFtZSA9IFwiTmV3IFRlbXBsYXRlXCI7XG4gICAgcmV0dXJuIG5hbWU7XG59XG5cbmNvbnN0IG5ld190ZW1wbGF0ZSA9IGFzeW5jICh0ZW1wbGF0ZV9uYW1lKSA9PiB7XG4gICAgbGV0IHN1Y2Nlc3MgPSBmYWxzZTtcblxuICAgIGxldCBkYXRhID0ge1xuICAgICAgICBjc3JmOiBwcm9wcy5jb250ZXh0LmNzcmYsXG4gICAgICAgIHRlbXBsYXRlX25hbWU6IHRlbXBsYXRlX25hbWUsXG4gICAgfTtcblxuICAgIGxldCB1cmwgPSBgJHtwcm9wcy5jb250ZXh0LnRlbXBsYXRlX2FkZF9lbmRwb2ludH1gO1xuICAgIHRyeSB7XG4gICAgICAgIGxldCBoZWFkZXJzID0ge1xuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICB9O1xuICAgICAgICBsZXQgcmVzID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCwgeyBtZXRob2Q6ICdwb3N0JywgaGVhZGVycywgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSkgfSk7XG5cbiAgICAgICAgaWYgKHJlcyAmJiByZXMudGVtcGxhdGVfaWQpIHtcbiAgICAgICAgICAgIGF3YWl0IHNldF90ZW1wbGF0ZShyZXMudGVtcGxhdGVfaWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3VjY2VzcyA9IHRydWU7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3VjY2Vzcztcbn1cblxuYXN5bmMgZnVuY3Rpb24gY29tbWl0X3RlbXBsYXRlX2NoYW5nZShlKSB7XG5cbiAgICBsZXQgY29tcG9uZW50c19pZHMgPSBjb21wb25lbnRzLnZhbHVlLm1hcCgoYykgPT4geyByZXR1cm4gYy5pZDsgfSk7XG5cbiAgICBsZXQgZGF0YSA9IHtcbiAgICAgICAgY3NyZjogcHJvcHMuY29udGV4dC5jc3JmLFxuICAgICAgICB0ZW1wbGF0ZTogc2VsZWN0ZWRfcmVwb3J0X3RlbXBsYXRlLnZhbHVlLnZhbHVlLFxuICAgICAgICBjb21wb25lbnRzOiBjb21wb25lbnRzX2lkcy50b1N0cmluZygpXG4gICAgfTtcblxuICAgIGxldCBzdWNjZXNzID0gZmFsc2U7XG4gICAgbGV0IHVybCA9IGAke3Byb3BzLmNvbnRleHQudGVtcGxhdGVfZWRpdF9lbmRwb2ludH1gO1xuICAgIHRyeSB7XG4gICAgICAgIGxldCBoZWFkZXJzID0ge1xuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICB9O1xuICAgICAgICBsZXQgcmVzID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCwgeyBtZXRob2Q6ICdwb3N0JywgaGVhZGVycywgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSkgfSk7XG4gICAgICAgIHN1Y2Nlc3MgPSB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1Y2Nlc3M7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNvbXBvbmVudF9kcmFnZ2VkKGUpIHtcblxuICAgIC8qIGNvbnNvbGUubG9nKHRlbXBsYXRlX3NvcnRhYmxlLnRvQXJyYXkoKS50b1N0cmluZygpKTsgKi9cblxuICAgIGxldCBuZXdfY29tcG9uZW50cyA9IHRlbXBsYXRlX3NvcnRhYmxlLnRvQXJyYXkoKS5tYXAoKGlkKSA9PiB7XG4gICAgICAgIHJldHVybiBjb21wb25lbnRzLnZhbHVlLmZpbmQoKGMpID0+IGMuaWQgPT0gaWQpO1xuICAgIH0pO1xuXG4gICAgdW5zZXRfc29ydGFibGVfdGVtcGxhdGUoKTtcblxuICAgIGNvbXBvbmVudHMudmFsdWUgPSBuZXdfY29tcG9uZW50cztcblxuICAgIGF3YWl0IG5leHRUaWNrKCk7XG4gICAgc2V0X3NvcnRhYmxlX3RlbXBsYXRlKCk7XG5cbiAgICBjb21taXRfdGVtcGxhdGVfY2hhbmdlKCk7XG59XG5cbmZ1bmN0aW9uIHNldF9zb3J0YWJsZV90ZW1wbGF0ZSgpIHtcbiAgICBpZiAodGVtcGxhdGVfc29ydGFibGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBkcmFnX3pvbmUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZHJhZy16b25lJyk7XG4gICAgdGVtcGxhdGVfc29ydGFibGUgPSB3aW5kb3cuU29ydGFibGUuY3JlYXRlKGRyYWdfem9uZSwge1xuICAgICAgICBkcmFnZ2FibGU6IFwiLmRyYWctaXRlbVwiLFxuICAgICAgICBkYXRhSWRBdHRyOiBcImlkXCIsXG4gICAgICAgIG9uVXBkYXRlOiBjb21wb25lbnRfZHJhZ2dlZFxuICAgIH0pO1xuXG4gICAgLy9jb25zb2xlLmxvZyhcIlNvcnRhYmxlIE9OXCIpO1xufVxuXG5mdW5jdGlvbiB1bnNldF9zb3J0YWJsZV90ZW1wbGF0ZSgpIHtcbiAgICBpZiAodGVtcGxhdGVfc29ydGFibGUpIHtcbiAgICAgICAgdGVtcGxhdGVfc29ydGFibGUuZGVzdHJveSgpO1xuICAgICAgICB0ZW1wbGF0ZV9zb3J0YWJsZSA9IG51bGw7XG4gICAgICAgIC8vY29uc29sZS5sb2coXCJTb3J0YWJsZSBPRkZcIik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiB0b2dnbGVfZWRpdF9tb2RlKCkge1xuICAgIGVkaXRfbW9kZS52YWx1ZSA9ICFlZGl0X21vZGUudmFsdWU7XG5cbiAgICBpZiAoZWRpdF9tb2RlLnZhbHVlKSB7XG4gICAgICAgIHNldF9zb3J0YWJsZV90ZW1wbGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHVuc2V0X3NvcnRhYmxlX3RlbXBsYXRlKCk7XG4gICAgfVxufVxuXG5jb25zdCBsaXN0X3RlbXBsYXRlX2NvbXBvbmVudHMgPSBhc3luYyAoKSA9PiB7XG4gICAgbGV0IHVybCA9IGAke3Byb3BzLmNvbnRleHQudGVtcGxhdGVfbGlzdF93aWRnZXRzX2VuZHBvaW50fWA7XG4gICAgbGV0IHJlcyA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwpO1xuICAgIGlmIChyZXM/Lmxpc3QgPT0gbnVsbCkgeyByZXR1cm4ge307IH1cbiAgICBsZXQgd2lkZ2V0cyA9IHJlcy5saXN0O1xuXG4gICAgd2lkZ2V0cy5zb3J0KChhLCBiKSA9PiBfaTE4bihhLmkxOG5fbmFtZSkudG9VcHBlckNhc2UoKS5sb2NhbGVDb21wYXJlKF9pMThuKGIuaTE4bl9uYW1lKS50b1VwcGVyQ2FzZSgpKSk7XG5cbiAgICByZXR1cm4gd2lkZ2V0cztcbn1cblxuZnVuY3Rpb24gc2hvd19hZGRfdGVtcGxhdGVfY29tcG9uZW50X21vZGFsKCkge1xuICAgIG1vZGFsX2FkZF90ZW1wbGF0ZV9jb21wb25lbnQudmFsdWUuc2hvdygpO1xufVxuXG5mdW5jdGlvbiBzaG93X2RlbGV0ZV90ZW1wbGF0ZV9tb2RhbCgpIHtcbiAgICBtb2RhbF9kZWxldGVfdGVtcGxhdGUudmFsdWUuc2hvdygpO1xufVxuXG5jb25zdCBhZGRfdGVtcGxhdGVfY29tcG9uZW50ID0gYXN5bmMgKGMpID0+IHtcbiAgICB1bnNldF9zb3J0YWJsZV90ZW1wbGF0ZSgpO1xuXG4gICAgbGV0IHVybCA9IGAke3Byb3BzLmNvbnRleHQudGVtcGxhdGVfY29tcG9uZW50X2FkZF9lbmRwb2ludH1gO1xuICAgIGxldCBwYXJhbXMgPSB7XG4gICAgICAgIGNzcmY6IHByb3BzLmNvbnRleHQuY3NyZixcbiAgICAgICAgdGVtcGxhdGU6IHByb3BzLmNvbnRleHQudGVtcGxhdGUsXG4gICAgICAgIGNvbXBvbmVudDogYy5pZFxuICAgIH07XG4gICAgbGV0IGhlYWRlcnMgPSB7XG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICB9O1xuICAgIHRyeSB7XG4gICAgICAgIGxldCBjb250ZW50ID0gYXdhaXQgbnRvcG5nX3V0aWxpdHkuaHR0cF9yZXF1ZXN0KHVybCwgeyBtZXRob2Q6ICdwb3N0JywgaGVhZGVycywgYm9keTogSlNPTi5zdHJpbmdpZnkocGFyYW1zKSB9KTtcbiAgICAgICAgd2FybmluZ19tZXNzYWdlLnZhbHVlID0gXCJcIjtcbiAgICAgICAgYXdhaXQgc2V0X3RlbXBsYXRlKHNlbGVjdGVkX3JlcG9ydF90ZW1wbGF0ZS52YWx1ZS52YWx1ZSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHdhcm5pbmdfbWVzc2FnZS52YWx1ZSA9IF9pMThuKFwicmVwb3J0LnVuYWJsZV90b19vcGVuXCIpO1xuICAgIH1cblxuICAgIGF3YWl0IG5leHRUaWNrKCk7XG4gICAgc2V0X3NvcnRhYmxlX3RlbXBsYXRlKCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJlbW92ZV90ZW1wbGF0ZV9jb21wb25lbnQoZSkge1xuICAgIHVuc2V0X3NvcnRhYmxlX3RlbXBsYXRlKCk7XG5cbiAgICBjb25zdCBjb21wb25lbnRfaWQgPSBlLnRhcmdldC5kYXRhc2V0LmNvbXBvbmVudElkO1xuICAgIGNvbXBvbmVudHMudmFsdWUgPSBjb21wb25lbnRzLnZhbHVlLmZpbHRlcihjID0+IGMuaWQgIT09IGNvbXBvbmVudF9pZCk7XG5cbiAgICBhd2FpdCBuZXh0VGljaygpO1xuICAgIHNldF9zb3J0YWJsZV90ZW1wbGF0ZSgpO1xuXG4gICAgY29tbWl0X3RlbXBsYXRlX2NoYW5nZSgpO1xufVxuXG4vKipcbiAqIEBicmllZiBUaGUgbWV0aG9kIHVzZWQgdG8gb3BlbiB0aGUgZWRpdCBjb21wb25lbnQgbW9kYWwgXG4gKiAgICAgICAgaW52b2x2ZXMgdHJpZ2dlcmluZyBhIGNsaWNrIGV2ZW50IG9uIHRoZSAnRWRpdCcgKHBlbmNpbCBpY29uKSBidXR0b24uXG4gKiBAcGFyYW0gZSBldmVudCBvYmplY3RcbiAqL1xuZnVuY3Rpb24gc2hvd19lZGl0X3RlbXBsYXRlX2NvbXBvbmVudChlKSB7XG4gICAgY29uc3QgY29tcG9uZW50X2lkID0gZS50YXJnZXQuZGF0YXNldC5jb21wb25lbnRJZDtcbiAgICBjb25zdCBjb21wb25lbnQgPSBjb21wb25lbnRzLnZhbHVlLmZpbmQoYyA9PiBjLmlkID09PSBjb21wb25lbnRfaWQpO1xuICAgIGNvbnN0IGlzX3JlcG9ydF9wYWdlID0gcHJvcHMuY29udGV4dC5wYWdlID09ICdyZXBvcnQnO1xuICAgIG1vZGFsX2VkaXRfdGVtcGxhdGVfY29tcG9uZW50LnZhbHVlLnNob3coY29tcG9uZW50LCBpc19yZXBvcnRfcGFnZSk7XG59XG5cbi8qKlxuICogXG4gKiBAYnJpZWYgVGhlIG1ldGhvZCB1c2VkIHRvIHVwZGF0ZSB0aGUgc2VsZWN0ZWQgY29tcG9uZW50IHdpdGggbmV3IHNldHRpbmdzIFxuICogICAgICAgIGludm9sdmVzIG1ha2luZyBhIFJFU1QgY2FsbC5cbiAqIEBwYXJhbSBuZXdfY29tcG9uZW50IEFuIG9iamVjdCB3aXRoIG5ldyBzZXR0aW5ncyBmb3IgdGhlIGNvbXBvbmVudCB0byBlZGl0LiBcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZWRpdF90ZW1wbGF0ZV9jb21wb25lbnQobmV3X2NvbXBvbmVudCkge1xuICAgIHVuc2V0X3NvcnRhYmxlX3RlbXBsYXRlKCk7XG5cbiAgICBsZXQgdXJsID0gYCR7cHJvcHMuY29udGV4dC50ZW1wbGF0ZV9jb21wb25lbnRfZWRpdF9lbmRwb2ludH1gO1xuICAgIGxldCBwYXJhbXMgPSB7XG4gICAgICAgIGNzcmY6IHByb3BzLmNvbnRleHQuY3NyZixcbiAgICAgICAgdGVtcGxhdGU6IHByb3BzLmNvbnRleHQudGVtcGxhdGUsXG4gICAgICAgIGNvbXBvbmVudDogbmV3X2NvbXBvbmVudC5pZCxcbiAgICAgICAgY29tcG9uZW50X3RpdGxlOiBuZXdfY29tcG9uZW50LnRpdGxlLFxuICAgICAgICBjb21wb25lbnRfaGVpZ2h0OiBuZXdfY29tcG9uZW50LmhlaWdodCxcbiAgICAgICAgY29tcG9uZW50X3dpZHRoOiBuZXdfY29tcG9uZW50LndpZHRoLFxuICAgICAgICBjb21wb25lbnRfdGltZV9vZmZzZXQ6IG5ld19jb21wb25lbnQudGltZV9vZmZzZXQsXG4gICAgICAgIGNvbXBvbmVudF90aW1lX3dpbmRvdzogbmV3X2NvbXBvbmVudC50aW1lX3dpbmRvdyxcbiAgICAgICAgY29tcG9uZW50X3BhcmFtczogbmV3X2NvbXBvbmVudC5yZXN0X3BhcmFtc1xuICAgIH07XG5cbiAgICBsZXQgaGVhZGVycyA9IHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgIH07XG4gICAgdHJ5IHtcbiAgICAgICAgbGV0IGNvbnRlbnQgPSBhd2FpdCBudG9wbmdfdXRpbGl0eS5odHRwX3JlcXVlc3QodXJsLCB7IG1ldGhvZDogJ3Bvc3QnLCBoZWFkZXJzLCBib2R5OiBKU09OLnN0cmluZ2lmeShwYXJhbXMpIH0pO1xuICAgICAgICB3YXJuaW5nX21lc3NhZ2UudmFsdWUgPSBcIlwiO1xuICAgICAgICBhd2FpdCBzZXRfdGVtcGxhdGUoc2VsZWN0ZWRfcmVwb3J0X3RlbXBsYXRlLnZhbHVlLnZhbHVlKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgd2FybmluZ19tZXNzYWdlLnZhbHVlID0gX2kxOG4oXCJyZXBvcnQudW5hYmxlX3RvX29wZW5cIik7XG4gICAgfVxuXG4gICAgYXdhaXQgbmV4dFRpY2soKTtcbiAgICBzZXRfc29ydGFibGVfdGVtcGxhdGUoKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZGVsZXRlX3RlbXBsYXRlKCkge1xuICAgIGxldCBzdWNjZXNzID0gZmFsc2U7XG5cbiAgICBsZXQgZGF0YSA9IHtcbiAgICAgICAgY3NyZjogcHJvcHMuY29udGV4dC5jc3JmLFxuICAgICAgICB0ZW1wbGF0ZTogc2VsZWN0ZWRfcmVwb3J0X3RlbXBsYXRlLnZhbHVlLnZhbHVlLFxuICAgIH07XG5cbiAgICBsZXQgdXJsID0gYCR7cHJvcHMuY29udGV4dC50ZW1wbGF0ZV9kZWxldGVfZW5kcG9pbnR9YDtcbiAgICB0cnkge1xuICAgICAgICBsZXQgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgfTtcbiAgICAgICAgbGV0IHJlcyA9IGF3YWl0IG50b3BuZ191dGlsaXR5Lmh0dHBfcmVxdWVzdCh1cmwsIHsgbWV0aG9kOiAncG9zdCcsIGhlYWRlcnMsIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpIH0pO1xuXG4gICAgICAgIGF3YWl0IHNldF90ZW1wbGF0ZSgpO1xuXG4gICAgICAgIHN1Y2Nlc3MgPSB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1Y2Nlc3M7XG59XG5cbi8qICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiAqL1xuXG48L3NjcmlwdD5cblxuPHN0eWxlIHNjb3BlZD5cbkBtZWRpYSBwcmludCB7XG4gICAgLmRvbnRwcmludCB7XG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgfVxuXG4gICAgLnBhZ2VicmVhay1iZWdpbiB7XG4gICAgICAgIHBhZ2UtYnJlYWstYmVmb3JlOiBhbHdheXM7XG4gICAgfVxuXG4gICAgLnBhZ2VicmVhay1lbmQge1xuICAgICAgICBwYWdlLWJyZWFrLWFmdGVyOiBhbHdheXMgIWltcG9ydGFudDtcbiAgICB9XG5cbiAgICAucHJpbnQtZWxlbWVudC1jbGFzcyB7XG4gICAgICAgIHBhZ2UtYnJlYWstaW5zaWRlOiBhdm9pZCAhaW1wb3J0YW50O1xuICAgICAgICBwYWdlLWJyZWFrLWFmdGVyOiBhdXRvXG4gICAgfVxufVxuXG4vKiBAbWVkaWEgcHJpbnQgYW5kIChvcmllbnRhdGlvbjogcG9ydHJhaXQpIGFuZCAobWF4LXdpZHRoOiAyOTdtbSl7ICovXG4vKiAgICAgLmNvbC00IHsgKi9cbi8qICAgICAgICAgd2lkdGg6IDUwJSAhaW1wb3J0YW50OyAqL1xuLyogICAgICAgICBmbGV4OiAwIDAgYXV0bzsgKi9cbi8qICAgICB9ICovXG4vKiB9ICovXG5AcGFnZSB7XG4gICAgLyogc2l6ZTogQTMgbGFuZHNjYXBlOyAqL1xuICAgIC8qIHBvc2l0aW9uOmFic29sdXRlOyB3aWR0aDoxMDAlOyB0b3A6MDtsZWZ0OjA7cmlnaHQ6MDtib3R0b206MDsgcGFkZGluZzowOyBtYXJnaW46LTFweDsgKi9cbn1cblxuLyogUHJpbnQgb24gQTQgKi9cbkBtZWRpYSBwcmludCBhbmQgKG1heC13aWR0aDogMjk3bW0pIGFuZCAobWluLXdpZHRoOiAyMTBtbSkge1xuXG4gICAgLyogLnJvdyB7ICovXG4gICAgLyogICAgICAgICBwYWRkaW5nLWxlZnQ6IDA7ICovXG4gICAgLyogICAgICAgICBwYWRkaW5nLXJpZ2h0OiAwOyAqL1xuICAgIC8qICAgICAgICAgbWFyZ2luLWxlZnQ6IC0xMHJlbTsgKi9cbiAgICAvKiAgICAgICAgIG1hcmdpbi1yaWdodDogMDsgKi9cbiAgICAvKiB9ICovXG4gICAgLmNvbC00IHtcbiAgICAgICAgd2lkdGg6IDUwJSAhaW1wb3J0YW50O1xuICAgICAgICBmbGV4OiAwIDAgYXV0bztcbiAgICB9XG59XG5cbi8qIFByaW50IG9uIEE1IChjb21tZW50ZWQgb3V0IGFzIHRoaXMgaXMgbm90IHdvcmtpbmcgb24gQ2hyb21lL1NhZmFyaSkgKi9cblxuLyogQG1lZGlhIHByaW50IGFuZCAobWF4LXdpZHRoOiAxNDhtbSl7ICovXG4vKiAgICAgLmNvbC00IHsgKi9cbi8qICAgICAgICAgd2lkdGg6IDEwMCUgIWltcG9ydGFudDsgKi9cbi8qICAgICAgICAgZmxleDogMCAwIGF1dG87ICovXG4vKiAgICAgfSAqL1xuLyogICAgIC5jb2wtNiB7ICovXG4vKiAgICAgICAgIHdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7ICovXG4vKiAgICAgICAgIGZsZXg6IDAgMCBhdXRvOyAqL1xuLyogICAgIH0gKi9cbi8qIH0gKi9cblxuLmFsaWduLWNlbnRlciB7fVxuPC9zdHlsZT5cbiIsIjwhLS0gKEMpIDIwMjIgLSBudG9wLm9yZyAgICAgLS0+XG48dGVtcGxhdGU+XG48bW9kYWwgQHNob3dlZD1cInNob3dlZCgpXCIgcmVmPVwibW9kYWxfaWRcIj5cbiAgPHRlbXBsYXRlIHYtc2xvdDp0aXRsZT57eyBfaTE4bihcImNoZWNrX2V4Y2x1c2lvbi5hZGRfZXhjbHVzaW9uXCIpIH19PC90ZW1wbGF0ZT5cbiAgPHRlbXBsYXRlIHYtc2xvdDpib2R5PiAgICBcbiAgICA8dGVtcGxhdGUgdi1pZj1cImFsZXJ0X2V4Y2x1c2lvbnNfcGFnZSA9PSAnaG9zdHMnXCI+IDwhLS0gbW9kYWwgaG9zdHMgLS0+XG4gICAgICA8ZGl2IGNsYXNzPVwibWItMyByb3dcIj5cblx0PGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTRcIiA+XG5cdCAgPGI+e3sgX2kxOG4oXCJjaGVja19leGNsdXNpb24ubWVtYmVyX3R5cGVcIikgfX08L2I+XG5cdDwvbGFiZWw+XG5cdDxkaXYgY2xhc3M9XCJjb2wtc20tNlwiPlxuXHQgIDxkaXYgY2xhc3M9XCJidG4tZ3JvdXAgYnRuLWdyb3VwLXRvZ2dsZVwiIGRhdGEtYnMtdG9nZ2xlPVwiYnV0dG9uc1wiPlxuXHQgICAgPGxhYmVsIDpjbGFzcz1cInsnYWN0aXZlJzogZXhjbHVkZV90eXBlID09ICdpcCd9XCIgY2xhc3M9XCJidG4gYnRuLXNlY29uZGFyeVwiPlxuXHQgICAgICA8aW5wdXQgIGNsYXNzPVwiYnRuLWNoZWNrXCIgdHlwZT1cInJhZGlvXCIgbmFtZT1cIm1lbWJlcl90eXBlXCIgdmFsdWU9XCJpcFwiIEBjbGljaz1cInNldF9leGNsdWRlX3R5cGUoJ2lwJylcIj4ge3sgX2kxOG4oXCJjaGVja19leGNsdXNpb24uaXBfYWRkcmVzc1wiKSB9fVxuXHQgICAgPC9sYWJlbD5cblx0ICAgIDxsYWJlbCA6Y2xhc3M9XCJ7J2FjdGl2ZSc6IGV4Y2x1ZGVfdHlwZSA9PSAnbmV0d29yayd9XCIgY2xhc3M9XCJidG4gYnRuLXNlY29uZGFyeVwiPlxuXHQgICAgICA8aW5wdXQgQGNsaWNrPVwic2V0X2V4Y2x1ZGVfdHlwZSgnbmV0d29yaycpXCIgY2xhc3M9XCJidG4tY2hlY2tcIiAgdHlwZT1cInJhZGlvXCIgbmFtZT1cIm1lbWJlcl90eXBlXCIgdmFsdWU9XCJuZXR3b3JrXCI+IHt7IF9pMThuKFwiY2hlY2tfZXhjbHVzaW9uLm5ldHdvcmtcIikgfX1cblx0ICAgIDwvbGFiZWw+XG5cdCAgPC9kaXY+XG5cdDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8aHI+XG4gICAgICBcbiAgICAgIDxkaXYgY2xhc3M9XCJob3N0LWFsZXJ0LWZpZWxkc1wiPlxuXHQ8ZGl2IGNsYXNzPVwibWItMyByb3dcIj5cbiAgICBcdCAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTRcIiA+XG4gICAgXHQgICAgPGI+e3sgX2kxOG4oXCJjaGVja19leGNsdXNpb24uaG9zdF9hbGVydF90eXBlXCIpIH19PC9iPlxuICAgIFx0ICA8L2xhYmVsPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tNlwiPlxuICAgICAgICAgICAgPHNlbGVjdCBuYW1lPVwidmFsdWVcIiBjbGFzcz1cImZvcm0tc2VsZWN0IGFsZXJ0LXNlbGVjdFwiIHYtbW9kZWw9XCJob3N0X3NlbGVjdGVkXCI+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJcIj57eyBfaTE4bihcImNoZWNrX2V4Y2x1c2lvbi5ub25lXCIpIH19PC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCIwXCI+e3sgX2kxOG4oXCJjaGVja19leGNsdXNpb24uZXhjbHVkZV9hbGxfYWxlcnRzXCIpIH19PC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gZGlzYWJsZWQ+e3sgX2kxOG4oXCJjaGVja19leGNsdXNpb24uc3BhY2luZ19iYXJcIikgfX08L29wdGlvbj5cblx0ICAgICAgPHRlbXBsYXRlIHYtZm9yPVwiaXRlbSBpbiBob3N0X2FsZXJ0X3R5cGVzXCI+XG5cdFx0PG9wdGlvbiB2LWlmPVwiaXRlbSAhPSBudWxsXCIgOnZhbHVlPVwiaXRlbS5hbGVydF9pZFwiPnt7IGl0ZW0ubGFiZWwgfX08L29wdGlvbj5cblx0ICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICAgIDwvZGl2PlxuXHQ8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgXG4gICAgICA8ZGl2IGNsYXNzPVwiZmxvdy1hbGVydC1maWVsZHNcIj5cblx0PGRpdiBjbGFzcz1cIm1iLTMgcm93XCI+XG4gICAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTRcIiA+XG4gICAgICAgICAgICA8Yj57eyBfaTE4bihcImNoZWNrX2V4Y2x1c2lvbi5mbG93X2FsZXJ0X3R5cGVcIikgfX08L2I+XG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTZcIj5cbiAgICAgICAgICAgIDxzZWxlY3QgaWQ9XCJmbG93LWFsZXJ0LXNlbGVjdFwiIG5hbWU9XCJ2YWx1ZVwiIGNsYXNzPVwiZm9ybS1zZWxlY3QgYWxlcnQtc2VsZWN0XCIgdi1tb2RlbD1cImZsb3dfc2VsZWN0ZWRcIj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIlwiPnt7IF9pMThuKFwiY2hlY2tfZXhjbHVzaW9uLm5vbmVcIikgfX08L29wdGlvbj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIjBcIj57eyBfaTE4bihcImNoZWNrX2V4Y2x1c2lvbi5leGNsdWRlX2FsbF9hbGVydHNcIikgfX08L29wdGlvbj5cbiAgICAgICAgICAgICAgPG9wdGlvbiBkaXNhYmxlZD57eyBfaTE4bihcImNoZWNrX2V4Y2x1c2lvbi5zcGFjaW5nX2JhclwiKSB9fTwvb3B0aW9uPlxuXHQgICAgICA8dGVtcGxhdGUgdi1mb3I9XCJpdGVtIGluIGZsb3dfYWxlcnRfdHlwZXNcIj5cblx0XHQ8b3B0aW9uICB2LWlmPVwiaXRlbSAhPSBudWxsXCIgOnZhbHVlPVwiaXRlbS5hbGVydF9pZFwiPnt7IGl0ZW0ubGFiZWwgfX08L29wdGlvbj5cblx0ICAgICAgPC90ZW1wbGF0ZT5cbiAgICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICAgIDwvZGl2PlxuXHQ8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgXG4gICAgICA8ZGl2IHYtaWY9XCJleGNsdWRlX3R5cGUgPT0gJ2lwJ1wiIGNsYXNzPVwiaXAtZmllbGRzXCI+XG5cdDxkaXYgY2xhc3M9XCJtYi0zIHJvd1wiPlxuICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImNvbC1mb3JtLWxhYmVsIGNvbC1zbS00XCIgPlxuICAgICAgICAgICAgPGI+e3sgX2kxOG4oXCJjaGVja19leGNsdXNpb24uaXBfYWRkcmVzc1wiKSB9fTwvYj5cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tNlwiPlxuICAgICAgICAgICAgPGlucHV0IDpwYXR0ZXJuPVwicGF0dGVybl9pcFwiIHBsYWNlaG9sZGVyPVwiMTkyLjE2OC4xLjFcIiByZXF1aXJlZCB0eXBlPVwidGV4dFwiIG5hbWU9XCJpcF9hZGRyZXNzXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiB2LW1vZGVsPVwiaW5wdXRfaXBcIiAvPlxuICAgICAgICAgIDwvZGl2PlxuXHQ8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgXG4gICAgICA8ZGl2IHYtaWY9XCJleGNsdWRlX3R5cGUgPT0gJ25ldHdvcmsnXCIgY2xhc3M9XCJuZXR3b3JrLWZpZWxkc1wiPlxuXHQ8ZGl2IGNsYXNzPVwibWItMyByb3dcIj5cbiAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tNFwiID5cbiAgICAgICAgICAgIDxiPnt7IF9pMThuKFwiY2hlY2tfZXhjbHVzaW9uLm5ldHdvcmtcIikgfX08L2I+XG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTQgcHItMFwiPlxuICAgICAgICAgICAgPGlucHV0IHJlcXVpcmVkIHN0eWxlPVwid2lkdGg6IGNhbGMoMTAwJSAtIDEwcHgpO1wiIG5hbWU9XCJuZXR3b3JrXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2wgZC1pbmxpbmVcIiBwbGFjZWhvbGRlcj1cIjE3Mi4xNi4wLjBcIiA6cGF0dGVybj1cInBhdHRlcm5faXBcIiB2LW1vZGVsPVwiaW5wdXRfbmV0d29ya1wiLz5cbiAgICBcdCAgPC9kaXY+XG4gICAgXHQgIDxkaXYgY2xhc3M9XCJjb2wtc20tMiBwcy00IHBlLTBcIj5cbiAgICBcdCAgICA8c3BhbiBjbGFzcz1cIm1lLTJcIj4vPC9zcGFuPlxuICAgIFx0ICAgIDxpbnB1dCBwbGFjZWhvbGRlcj0nMjQnIHJlcXVpcmVkIGNsYXNzPVwiZm9ybS1jb250cm9sIGQtaW5saW5lIHctNzVcIiBtaW49XCIxXCIgbWF4PVwiMTI3XCIgdHlwZT1cIm51bWJlclwiIG5hbWU9XCJjaWRyXCIgdi1tb2RlbD1cIm5ldG1hc2tcIj5cbiAgICBcdCAgPC9kaXY+XG5cdDwvZGl2PlxuICAgICAgPC9kaXY+XG5cbiAgICAgIDxkaXYgY2xhc3M9XCJtYi0zIHJvd1wiPlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbCBjb2wtc20tNFwiID5cbiAgICAgICAgICA8Yj57eyBfaTE4bigndmxhbicpIH19PC9iPlxuICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTZcIj5cbiAgICAgICAgICA8aW5wdXQgcGxhY2Vob2xkZXI9XCIwXCIgbWluPVwiMFwiIHR5cGU9XCJudW1iZXJcIiB2LW1vZGVsPVwiaW5wdXRfdmxhblwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCIvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PiAgICAgIFxuICAgIDwvdGVtcGxhdGU+IDwhLS0gbWRvYWwgaG9zdHMgLS0+XG4gICAgXG4gICAgPHRlbXBsYXRlIHYtaWY9XCJhbGVydF9leGNsdXNpb25zX3BhZ2UgIT0gJ2hvc3RzJ1wiPiA8IS0tIG1vZGFsIGRvbWFpbl9uYW1lcy0tPlxuICAgICAgPGRpdj5cblx0PGRpdiBjbGFzcz1cIm1iLTMgcm93XCI+XG4gICAgICAgICAgPGxhYmVsIGNsYXNzPVwiY29sLWZvcm0tbGFiZWwgY29sLXNtLTRcIiA+XG4gICAgICAgICAgICA8YiB2LWlmPVwiYWxlcnRfZXhjbHVzaW9uc19wYWdlID09ICdkb21haW5fbmFtZXMnXCI+e3sgX2kxOG4oXCJjaGVja19leGNsdXNpb24uZG9tYWluXCIpIH19PC9iPlxuICAgICAgICAgICAgPGIgdi1pZj1cImFsZXJ0X2V4Y2x1c2lvbnNfcGFnZSA9PSAndGxzX2NlcnRpZmljYXRlJ1wiPnt7IF9pMThuKFwiY2hlY2tfZXhjbHVzaW9uLnRsc19jZXJ0aWZpY2F0ZVwiKSB9fTwvYj5cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tNlwiPlxuICAgICAgICAgICAgPGlucHV0IHYtaWY9XCJhbGVydF9leGNsdXNpb25zX3BhZ2UgPT0gJ2RvbWFpbl9uYW1lcydcIiBwbGFjZWhvbGRlcj1cIlwiIDpwYXR0ZXJuPVwicGF0dGVybl9kb21haW5cIiByZXF1aXJlZCB0eXBlPVwidGV4dFwiIG5hbWU9XCJpcF9hZGRyZXNzXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiB2LW1vZGVsPVwiaW5wdXRfdGV4dFwiIC8+XG4gICAgICAgICAgICA8aW5wdXQgdi1pZj1cImFsZXJ0X2V4Y2x1c2lvbnNfcGFnZSA9PSAndGxzX2NlcnRpZmljYXRlJ1wiIHBsYWNlaG9sZGVyPVwiQ049ODEzODQ1NjU3MDAzMzM5ODM4LCBPPUNvZGU0MiwgT1U9VEVTVCwgU1Q9TU4sIEM9VVwiIDpwYXR0ZXJuPVwicGF0dGVybl9jZXJ0aWZpY2F0ZVwiIHJlcXVpcmVkIHR5cGU9XCJ0ZXh0XCIgbmFtZT1cImlwX2FkZHJlc3NcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIHYtbW9kZWw9XCJpbnB1dF90ZXh0XCIgLz5cbiAgICAgICAgICA8L2Rpdj5cblx0PC9kaXY+XG4gICAgICA8L2Rpdj4gICAgICBcbiAgICA8L3RlbXBsYXRlPiA8IS0tIG1vZGFsIGNvbW1lbnQtLT5cbiAgICA8aHIgY2xhc3M9XCJzZXBhcmF0b3IgbXQtNVwiID5cbiAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgcm93XCI+XG4gICAgICA8ZGl2PlxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJjb2wtZm9ybS1sYWJlbFwiPjxiPnt7IF9pMThuKFwic2hvd19hbGVydHMuYWRkX2FfY29tbWVudFwiKSB9fTwvYj48L2xhYmVsPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwibXQtMVwiPlxuICAgICAgICA8dGV4dGFyZWEgOnBsYWNlaG9sZGVyPWNvbW1lbnRfcGxhY2Vob2xkZXIgaWQ9XCJhbGVydC1sYWJlbFwiIG5hbWU9XCJsYWJlbFwiIHJvd3M9XCIzXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiB0eXBlPVwidGV4dFwiIHYtbW9kZWw9XCJjb21tZW50XCIgbWF4bGVuZ3RoPVwiNDUwXCI+PC90ZXh0YXJlYT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L3RlbXBsYXRlPlxuICA8dGVtcGxhdGUgdi1zbG90OmZvb3Rlcj5cbiAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiA6ZGlzYWJsZWQ9XCJjaGVja19kaXNhYmxlX2FwcGx5KClcIiBAY2xpY2s9XCJhZGRcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPnt7X2kxOG4oJ2FkZCcpfX08L2J1dHRvbj5cbiAgPC90ZW1wbGF0ZT5cbjwvbW9kYWw+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0IHNldHVwPlxuaW1wb3J0IHsgcmVmLCBvbk1vdW50ZWQsIGNvbXB1dGVkLCB3YXRjaCB9IGZyb20gXCJ2dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgbW9kYWwgfSBmcm9tIFwiLi9tb2RhbC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxEZWxldGVDb25maXJtIH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLWNvbmZpcm0udnVlXCI7XG5cbmNvbnN0IG1vZGFsX2lkID0gcmVmKG51bGwpO1xuY29uc3QgbW9kYWxfZGVsZXRlX2NvbmZpcm0gPSByZWYobnVsbCk7XG5jb25zdCBleGNsdWRlX3R5cGUgPSByZWYoXCJpcFwiKTtcbmNvbnN0IGlucHV0X2lwID0gcmVmKFwiXCIpO1xuY29uc3QgaW5wdXRfbmV0d29yayA9IHJlZihcIlwiKTtcbmNvbnN0IGlucHV0X3ZsYW4gPSByZWYoMCk7XG5jb25zdCBpbnB1dF90ZXh0ID0gcmVmKFwiXCIpO1xuY29uc3QgaG9zdF9zZWxlY3RlZCA9IHJlZihcIlwiKTtcbmNvbnN0IGZsb3dfc2VsZWN0ZWQgPSByZWYoXCJcIik7XG5jb25zdCBuZXRtYXNrID0gcmVmKFwiXCIpO1xuY29uc3QgY29tbWVudCA9IHJlZihudWxsKTtcbmNvbnN0IGNvbW1lbnRfcGxhY2Vob2xkZXIgPSBpMThuKFwiZGV0YWlscy5jb21tZW50X3BsYWNlaG9sZGVyXCIpO1xuY29uc3QgaXNfZWRpdCA9IHJlZihudWxsKTtcbmNvbnN0IHJvd190b19kZWxldGUgPSByZWYobnVsbCk7XG5cbmNvbnN0IGVtaXQgPSBkZWZpbmVFbWl0cyhbJ2FkZCddKTtcbi8vcy5zcGxpdChcIixcIikuZXZlcnkoKGEpID0+IHtyZXR1cm4gLy4rPS4rLy50ZXN0KGEpfSlcbmZ1bmN0aW9uIGdldF9kYXRhX3BhdHRlcm4odmFsdWVfdHlwZSkge1xuICAgIGlmICh2YWx1ZV90eXBlID09IFwidGV4dFwiKSB7XG5cdHJldHVybiBOdG9wVXRpbHMuUkVHRVhFUy5ub25fcXVvdGVkX3RleHQ7XG4gICAgfSBlbHNlIGlmICh2YWx1ZV90eXBlID09IFwiaXBcIikge1xuXHRsZXQgcl9pcHY0ID0gTnRvcFV0aWxzLlJFR0VYRVMuaXB2NDtcblx0bGV0IHJfaXB2NF92bGFuID0gcl9pcHY0LnJlcGxhY2VBbGwoXCIkXCIsIFwiQFswLTldezAsNX0kXCIpO1xuXHRsZXQgcl9pcHY2ID0gTnRvcFV0aWxzLlJFR0VYRVMuaXB2Njtcblx0bGV0IHJfaXB2Nl92bGFuID0gcl9pcHY2LnJlcGxhY2VBbGwoXCIkXCIsIFwiQFswLTldezAsNX0kXCIpO1xuXHRyZXR1cm4gYCgke3JfaXB2NH0pfCgke3JfaXB2NF92bGFufSl8KCR7cl9pcHY2fSl8KCR7cl9pcHY2X3ZsYW59KWA7XG4gICAgfSBlbHNlIGlmICh2YWx1ZV90eXBlID09IFwiaG9zdG5hbWVcIikge1xuXHRyZXR1cm4gYCR7TnRvcFV0aWxzLlJFR0VYRVMuc2luZ2xld29yZH18W2EtekEtWjAtOS5fLV17MywyNTB9QFswLTldezAsNX0kYDtcbiAgICB9IGVsc2UgaWYgKHZhbHVlX3R5cGUgPT0gXCJjZXJ0aWZpY2F0ZVwiKSB7XG5cdHJldHVybiBOdG9wVXRpbHMuUkVHRVhFUy50bHNfY2VydGlmaWNhdGU7XG4gICAgfVxuICAgIHJldHVybiBOdG9wVXRpbHMuUkVHRVhFU1t2YWx1ZV90eXBlXTtcbn1cblxuY29uc3QgcHJvcHMgPSBkZWZpbmVQcm9wcyh7XG4gICAgYWxlcnRfZXhjbHVzaW9uc19wYWdlOiBTdHJpbmcsXG4gICAgaG9zdF9hbGVydF90eXBlczogQXJyYXksXG4gICAgZmxvd19hbGVydF90eXBlczogQXJyYXksICAgIFxufSk7XG5cbmxldCBwYXR0ZXJuX2lwID0gZ2V0X2RhdGFfcGF0dGVybihcImlwXCIpO1xubGV0IHBhdHRlcm5fdGV4dCA9IGdldF9kYXRhX3BhdHRlcm4oXCJ0ZXh0XCIpO1xubGV0IHBhdHRlcm5fY2VydGlmaWNhdGUgPSBnZXRfZGF0YV9wYXR0ZXJuKFwiY2VydGlmaWNhdGVcIik7XG5sZXQgcGF0dGVybl9kb21haW4gPSBnZXRfZGF0YV9wYXR0ZXJuKFwiZG9tYWluX25hbWVfbm90X3N0cmljdFwiKTtcblxuY29uc3Qgc2V0X2V4Y2x1ZGVfdHlwZSA9ICh0eXBlKSA9PiB7XG4gICAgZXhjbHVkZV90eXBlLnZhbHVlID0gdHlwZTtcbn07XG5cbmNvbnN0IGNoZWNrX2Rpc2FibGVfYXBwbHkgPSAoKSA9PiB7XG4gICAgbGV0IHJlZ2V4ID0gbnVsbDtcbiAgICBsZXQgZGlzYWJsZV9hcHBseSA9IHRydWU7XG4gICAgaWYgKHByb3BzLmFsZXJ0X2V4Y2x1c2lvbnNfcGFnZSA9PSAnaG9zdHMnKSB7XG5cdHJlZ2V4ID0gbmV3IFJlZ0V4cChwYXR0ZXJuX2lwKTtcblx0aWYgKGV4Y2x1ZGVfdHlwZS52YWx1ZSA9PSBcImlwXCIpIHtcblx0ICAgIGRpc2FibGVfYXBwbHkgPSAoaW5wdXRfaXAudmFsdWUgPT0gbnVsbCB8fCBpbnB1dF9pcC52YWx1ZSA9PSBcIlwiKSB8fCAocmVnZXgudGVzdChpbnB1dF9pcC52YWx1ZSkgPT0gZmFsc2UpIHx8IChob3N0X3NlbGVjdGVkLnZhbHVlID09IFwiXCIgJiYgZmxvd19zZWxlY3RlZC52YWx1ZSA9PSBcIlwiKTtcblx0fSBlbHNlIHtcblx0ICAgIGRpc2FibGVfYXBwbHkgPSAoaW5wdXRfbmV0d29yay52YWx1ZSA9PSBudWxsIHx8IGlucHV0X25ldHdvcmsudmFsdWUgPT0gXCJcIilcblx0XHR8fCAocmVnZXgudGVzdChpbnB1dF9uZXR3b3JrLnZhbHVlKSA9PSBmYWxzZSlcblx0XHR8fCAoaG9zdF9zZWxlY3RlZC52YWx1ZSA9PSBcIlwiICYmIGZsb3dfc2VsZWN0ZWQudmFsdWUgPT0gXCJcIilcblx0XHR8fCAobmV0bWFzay52YWx1ZSA9PSBudWxsIHx8IG5ldG1hc2sudmFsdWUgPT0gXCJcIiB8fCBwYXJzZUludChuZXRtYXNrLnZhbHVlKSA8IDEgfHwgcGFyc2VJbnQobmV0bWFzay52YWx1ZSkgPiAxMjcpO1xuXHR9XG4gICAgfSBlbHNlIGlmIChwcm9wcy5hbGVydF9leGNsdXNpb25zX3BhZ2UgPT0gJ2RvbWFpbl9uYW1lcycpIHtcblx0cmVnZXggPSBuZXcgUmVnRXhwKHBhdHRlcm5fZG9tYWluKTtcblx0ZGlzYWJsZV9hcHBseSA9IChpbnB1dF90ZXh0LnZhbHVlID09IG51bGwgfHwgaW5wdXRfdGV4dC52YWx1ZSA9PSBcIlwiKSB8fCAocmVnZXgudGVzdChpbnB1dF90ZXh0LnZhbHVlKSA9PSBmYWxzZSk7XG5cdFxuICAgIH0gZWxzZSBpZiAocHJvcHMuYWxlcnRfZXhjbHVzaW9uc19wYWdlID09ICd0bHNfY2VydGlmaWNhdGUnKSB7XG5cdHJlZ2V4ID0gbmV3IFJlZ0V4cChwYXR0ZXJuX2NlcnRpZmljYXRlKTtcblx0ZGlzYWJsZV9hcHBseSA9IChpbnB1dF90ZXh0LnZhbHVlID09IG51bGwgfHwgaW5wdXRfdGV4dC52YWx1ZSA9PSBcIlwiKSB8fCAocmVnZXgudGVzdChpbnB1dF90ZXh0LnZhbHVlKSA9PSBmYWxzZSk7XG4gICAgfVxuICAgIHJldHVybiBkaXNhYmxlX2FwcGx5O1xufTtcblxuY29uc3Qgc2hvd2VkID0gKCkgPT4ge307XG5cbmNvbnN0IHNob3cgPSAocm93KSA9PiB7XG4gICAgLy9kZWJ1Z2dlcjtcbiAgICBpZihyb3cpIHtcbiAgICAgIGlzX2VkaXQudmFsdWUgPSB0cnVlO1xuICAgICAgcm93X3RvX2RlbGV0ZS52YWx1ZSA9IHJvdztcblxuICAgICAgY29tbWVudC52YWx1ZSA9IHJvdy5sYWJlbDtcbiAgICAgIFxuICAgICAgaWYocm93LnR5cGUgPT0gJ2hvc3QnKSB7XG4gICAgICAgIGxldCBuZXR3b3JrX2RldGFpbHMgPSByb3cuYWxlcnRfYWRkci5zcGxpdChcIi9cIik7XG4gICAgICAgIGxldCB2bGFuX3NwbGl0ID0gcm93LmFsZXJ0X2FkZHIuc3BsaXQoXCJAXCIpO1xuXG4gICAgICAgIGlmKG5ldHdvcmtfZGV0YWlscy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgZXhjbHVkZV90eXBlLnZhbHVlID0gXCJuZXR3b3JrXCI7XG4gICAgICAgICAgaW5wdXRfbmV0d29yay52YWx1ZSA9IG5ldHdvcmtfZGV0YWlsc1swXTtcbiAgICAgICAgICBuZXRtYXNrLnZhbHVlID0gbmV0d29ya19kZXRhaWxzWzFdO1xuICAgICAgICAgIGlucHV0X2lwLnZhbHVlID0gXCJcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBleGNsdWRlX3R5cGUudmFsdWUgPSBcImlwXCI7XG4gICAgICAgICAgaW5wdXRfaXAudmFsdWUgPSB2bGFuX3NwbGl0WzBdO1xuICAgICAgICAgIGlucHV0X25ldHdvcmsudmFsdWUgPSBcIlwiO1xuICAgICAgICAgIG5ldG1hc2sudmFsdWUgPSBcIlwiO1xuICAgICAgICB9IFxuXG4gICAgICAgIGlmKHZsYW5fc3BsaXQubGVuZ3RoID4gMSApIHtcbiAgICAgICAgICBpbnB1dF92bGFuLnZhbHVlID0gdmxhbl9zcGxpdFsxXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbnB1dF92bGFuLnZhbHVlID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKHJvdy5ob3N0X2FsZXJ0X2tleSAhPSBudWxsKSBcbiAgICAgICAgICBob3N0X3NlbGVjdGVkLnZhbHVlID0gJycrcm93Lmhvc3RfYWxlcnRfa2V5O1xuICAgICAgICBlbHNlIFxuICAgICAgICAgIGhvc3Rfc2VsZWN0ZWQudmFsdWUgPSBcIlwiO1xuICAgICAgXG4gICAgICAgIGlmKHJvdy5mbG93X2FsZXJ0X2tleSAhPSBudWxsKSBcbiAgICAgICAgICBmbG93X3NlbGVjdGVkLnZhbHVlID0gJycrcm93LmZsb3dfYWxlcnRfa2V5O1xuICAgICAgICBlbHNlIFxuICAgICAgICAgIGZsb3dfc2VsZWN0ZWQudmFsdWUgPSBcIlwiO1xuXG4gICAgICB9IGVsc2UgaWYocm93LnR5cGUgPT0gJ2RvbWFpbicpIHtcbiAgICAgICAgaW5wdXRfdGV4dC52YWx1ZSA9IHJvdy5hbGVydF9kb21haW47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbnB1dF90ZXh0LnZhbHVlID0gcm93LmFsZXJ0X2NlcnRpZmljYXRlO1xuICAgICAgfVxuICAgICAgICAgICAgXG4gICAgfSBlbHNlIHtcblxuICAgICAgZXhjbHVkZV90eXBlLnZhbHVlID0gXCJpcFwiO1xuICAgICAgaW5wdXRfaXAudmFsdWUgPSBcIlwiO1xuICAgICAgaW5wdXRfbmV0d29yay52YWx1ZSA9IFwiXCI7XG4gICAgICBpbnB1dF92bGFuLnZhbHVlID0gMDtcbiAgICAgIGhvc3Rfc2VsZWN0ZWQudmFsdWUgPSBcIjBcIjtcbiAgICAgIGZsb3dfc2VsZWN0ZWQudmFsdWUgPSBcIlwiO1xuICAgICAgbmV0bWFzay52YWx1ZSA9IFwiXCI7XG4gICAgICBpbnB1dF90ZXh0LnZhbHVlID0gXCJcIjtcbiAgICAgIGNvbW1lbnQudmFsdWUgPSBcIlwiO1xuICAgIH1cblxuICAgIG1vZGFsX2lkLnZhbHVlLnNob3coKTtcbn07XG5cbmNvbnN0IGNsb3NlID0gKCkgPT4ge1xuICAgIG1vZGFsX2lkLnZhbHVlLmNsb3NlKCk7XG59O1xuXG5jb25zdCBub3JtYWxpemVfYWxlcnRfa2V5X3ZhbHVlID0gKGFsZXJ0X2tleSkgPT4ge1xuICBpZiAoYWxlcnRfa2V5ID09IFwiXCIpIHJldHVybiAtMTtcbiAgcmV0dXJuIGFsZXJ0X2tleTtcbn0gXG5cbmNvbnN0IGFkZCA9ICgpID0+IHtcbiAgICBsZXQgcGFyYW1zO1xuICAgIGxldCBhbGVydF9hZGRyID0gaW5wdXRfaXAudmFsdWU7XG4gICAgaWYgKHByb3BzLmFsZXJ0X2V4Y2x1c2lvbnNfcGFnZSA9PSBcImhvc3RzXCIpIHtcblx0aWYgKGV4Y2x1ZGVfdHlwZS52YWx1ZSA9PSBcIm5ldHdvcmtcIikge1xuXHQgICAgYWxlcnRfYWRkciA9IGAke2lucHV0X25ldHdvcmsudmFsdWV9LyR7bmV0bWFzay52YWx1ZX1gO1xuXHR9XG4gICAgICAgIGlmIChpbnB1dF92bGFuLnZhbHVlICE9IG51bGwgJiYgaW5wdXRfdmxhbi52YWx1ZSAhPSAwKSB7XG5cdCAgICBhbGVydF9hZGRyID0gYCR7YWxlcnRfYWRkcn1AJHtpbnB1dF92bGFuLnZhbHVlfWA7XG4gICAgICAgIH1cblx0cGFyYW1zID0geyBhbGVydF9hZGRyLCBob3N0X2FsZXJ0X2tleTogbm9ybWFsaXplX2FsZXJ0X2tleV92YWx1ZShob3N0X3NlbGVjdGVkLnZhbHVlKSwgZmxvd19hbGVydF9rZXk6IG5vcm1hbGl6ZV9hbGVydF9rZXlfdmFsdWUoZmxvd19zZWxlY3RlZC52YWx1ZSkgfTtcbiAgICB9IGVsc2UgaWYgKHByb3BzLmFsZXJ0X2V4Y2x1c2lvbnNfcGFnZSA9PSBcImRvbWFpbl9uYW1lc1wiKSB7XG5cdHBhcmFtcyA9IHsgYWxlcnRfZG9tYWluOiBpbnB1dF90ZXh0LnZhbHVlIH07XG4gICAgfSBlbHNlIGlmIChwcm9wcy5hbGVydF9leGNsdXNpb25zX3BhZ2UgPT0gXCJ0bHNfY2VydGlmaWNhdGVcIikge1xuXHRwYXJhbXMgPSB7IGFsZXJ0X2NlcnRpZmljYXRlOiBpbnB1dF90ZXh0LnZhbHVlIH07XG4gICAgfVxuICAgIHBhcmFtcy5sYWJlbCA9IGNvbW1lbnQudmFsdWU7XG4gICAgaWYoaXNfZWRpdC52YWx1ZSkge1xuICAgICAgcGFyYW1zLm9sZF90eXBlID0gcm93X3RvX2RlbGV0ZS52YWx1ZS50eXBlO1xuICAgICAgcGFyYW1zLm9sZF9zdWJkaXIgPSByb3dfdG9fZGVsZXRlLnZhbHVlLnN1YmRpcjtcbiAgICAgIHBhcmFtcy5vbGRfYWxlcnRfZG9tYWluID0gcm93X3RvX2RlbGV0ZS52YWx1ZS5hbGVydF9kb21haW47XG4gICAgICBwYXJhbXMub2xkX2FsZXJ0X2NlcnRpZmljYXRlID0gcm93X3RvX2RlbGV0ZS52YWx1ZS5hbGVydF9jZXJ0aWZpY2F0ZTtcbiAgICAgIHBhcmFtcy5vbGRfYWxlcnRfYWRkciA9IHJvd190b19kZWxldGUudmFsdWUuYWxlcnRfYWRkcjtcbiAgICAgIHBhcmFtcy5vbGRfZmxvd19hbGVydF9rZXkgPSByb3dfdG9fZGVsZXRlLnZhbHVlLmZsb3dfYWxlcnRfa2V5O1xuICAgICAgcGFyYW1zLm9sZF9ob3N0X2FsZXJ0X2tleSA9IHJvd190b19kZWxldGUudmFsdWUuaG9zdF9hbGVydF9rZXk7XG4gICAgfVxuICAgIGVtaXQoJ2FkZCcsIHBhcmFtcyk7XG4gICAgY2xvc2UoKTtcbiBcbn07XG5cbmRlZmluZUV4cG9zZSh7IHNob3csIGNsb3NlIH0pO1xuXG5vbk1vdW50ZWQoKCkgPT4ge1xufSk7XG5cbmNvbnN0IF9pMThuID0gKHQpID0+IGkxOG4odCk7XG5cbjwvc2NyaXB0PlxuXG48c3R5bGUgc2NvcGVkPlxuaW5wdXQ6aW52YWxpZCB7XG4gIGJvcmRlci1jb2xvcjogI2ZmMDAwMDtcbn0gIFxuPC9zdHlsZT5cbiIsIi8qKlxuICAgIChDKSAyMDIyIC0gbnRvcC5vcmcgICAgXG4qL1xuXG5pbXBvcnQgKiBhcyBWdWUgZnJvbSBcInZ1ZVwiO1xuLy8gd2luZG93LlZ1ZSA9IFZ1ZTtcblxuLy8gcGFnZXNcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZUFsZXJ0U3RhdHMgfSBmcm9tIFwiLi9wYWdlLWFsZXJ0LXN0YXRzLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlRmxvd0hpc3RvcmljYWwgfSBmcm9tIFwiLi9wYWdlLWZsb3ctaGlzdG9yaWNhbC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZVN0YXRzIH0gZnJvbSBcIi4vcGFnZS1zdGF0cy52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZUFzc2V0VGFibGUgfSBmcm9tIFwiLi9wYWdlLWFzc2V0LXRhYmxlLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlUGVyaW9kaWNpdHlUYWJsZSB9IGZyb20gXCIuL3BhZ2UtcGVyaW9kaWNpdHktdGFibGUudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VTZXJ2aWNlVGFibGUgfSBmcm9tIFwiLi9wYWdlLXNlcnZpY2UtdGFibGUudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VTZXJ2aWNlTWFwIH0gZnJvbSBcIi4vcGFnZS1zZXJ2aWNlLW1hcC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZVBlcmlvZGljaXR5TWFwIH0gZnJvbSBcIi4vcGFnZS1wZXJpb2RpY2l0eS1tYXAudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VBc3NldE1hcCB9IGZyb20gXCIuL3BhZ2UtYXNzZXQtbWFwLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlRGV2aWNlRXhjbHVzaW9ucyB9IGZyb20gXCIuL3BhZ2UtZGV2aWNlLWV4Y2x1c2lvbnMudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VIb3N0VExTIH0gZnJvbSBcIi4vcGFnZS1ob3N0LXRscy52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZUhvc3RTU0ggfSBmcm9tIFwiLi9wYWdlLWhvc3Qtc3NoLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlSG9tZU1hcCB9IGZyb20gXCIuL3BhZ2UtaG9tZS1tYXAudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VTYW5rZXkgfSBmcm9tIFwiLi9wYWdlLXNhbmtleS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZUhvc3REZXRhaWxzQXBwbGljYXRpb25zIH0gZnJvbSBcIi4vcGFnZS1ob3N0LWRldGFpbHMtYXBwbGljYXRpb25zLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlSG9zdERldGFpbHNUcmFmZmljIH0gZnJvbSBcIi4vcGFnZS1ob3N0LWRldGFpbHMtdHJhZmZpYy52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZUhvc3REZXRhaWxzUGFja2V0cyB9IGZyb20gXCIuL3BhZ2UtaG9zdC1kZXRhaWxzLXBhY2tldHMudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VIb3N0RGV0YWlsc0Zsb3dTYW5rZXkgfSBmcm9tIFwiLi9wYWdlLWhvc3QtZGV0YWlscy1mbG93LXNhbmtleS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZUhvc3RSdWxlcyB9IGZyb20gXCIuL3BhZ2UtaG9zdC1ydWxlcy52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZUhvc3REZXRhaWxzUG9ydHMgfSBmcm9tIFwiLi9wYWdlLWhvc3QtZGV0YWlscy1wb3J0cy52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZUFsZXJ0QW5hbHlzaXMgfSBmcm9tIFwiLi9wYWdlLWFsZXJ0LWFuYWx5c2lzLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlSG9zdE1hcCB9IGZyb20gXCIuL3BhZ2UtaG9zdC1tYXAudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VWTEFOUG9ydHNTYW5rZXkgfSBmcm9tIFwiLi9wYWdlLXZsYW4tcG9ydHMtc2Fua2V5LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlQWdncmVnYXRlZExpdmVGbG93cyB9IGZyb20gXCIuL3BhZ2UtYWdncmVnYXRlZC1saXZlLWZsb3dzLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlVGVzdFRhYmxlIH0gZnJvbSBcIi4vcGFnZS10ZXN0LXRhYmxlLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBOZWRnZVJ1bGVzQ29uZmlnIH0gZnJvbSBcIi4vcGFnZS1uZWRnZS1ydWxlcy1jb25maWcudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VFZGl0QXBwbGljYXRpb25zIH0gZnJvbSBcIi4vcGFnZS1lZGl0LWFwcGxpY2F0aW9ucy52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZU5ldHdvcmtEaXNjb3ZlcnkgfSBmcm9tIFwiLi9wYWdlLW5ldHdvcmstZGlzY292ZXJ5LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlTWFuYWdlQ29uZmlndXJhdGlvbkJhY2t1cCB9IGZyb20gXCIuL3BhZ2UtbWFuYWdlLWNvbmZpZ3VyYXRpb25zLWJhY2t1cC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZVNOTVBEZXZpY2VSdWxlcyB9IGZyb20gXCIuL3BhZ2Utc25tcC1kZXZpY2UtcnVsZXMudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VTbm1wRGV2aWNlc0ludGVyZmFjZXNTaW1pbGFyaXR5IH0gZnJvbSBcIi4vcGFnZS1zbm1wLWRldmljZXMtaW50ZXJmYWNlcy1zaW1pbGFyaXR5LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlSG9zdHNQb3J0c0FuYWx5c2lzIH0gZnJvbSBcIi4vcGFnZS1ob3N0cy1wb3J0cy1hbmFseXNpcy52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTmVkZ2VSZXBlYXRlcnNDb25maWcgfSBmcm9tIFwiLi9wYWdlLW5lZGdlLXJlcGVhdGVycy1jb25maWcudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VJbmFjdGl2ZUhvc3RzIH0gZnJvbSBcIi4vcGFnZS1pbmFjdGl2ZS1ob3N0cy52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZUluYWN0aXZlSG9zdERldGFpbHMgfSBmcm9tIFwiLi9wYWdlLWluYWN0aXZlLWhvc3QtZGV0YWlscy52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZUZsb3dEZXZpY2VEZXRhaWxzIH0gZnJvbSBcIi4vcGFnZS1mbG93ZGV2aWNlLWNvbmZpZy52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZUZsb3dEZXZpY2VJbnRlcmZhY2VEZXRhaWxzIH0gZnJvbSBcIi4vcGFnZS1mbG93ZGV2aWNlLWludGVyZmFjZS1jb25maWcudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VWdWxuZXJhYmlsaXR5U2NhbiB9IGZyb20gXCIuL3BhZ2UtdnVsbmVyYWJpbGl0eS1zY2FuLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBQYWdlSG9zdFZzUmVzdWx0IH0gZnJvbSBcIi4vcGFnZS1ob3N0LXZzLXJlc3VsdC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZU9wZW5Qb3J0cyB9IGZyb20gXCIuL3BhZ2Utb3Blbi1wb3J0cy52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZVZ1bG5lcmFiaWxpdHlTY2FuUmVwb3J0IH0gZnJvbSBcIi4vcGFnZS12dWxuZXJhYmlsaXR5LXNjYW4tcmVwb3J0LnZ1ZVwiXG5pbXBvcnQgeyBkZWZhdWx0IGFzIFBhZ2VTTk1QVXNhZ2UgfSBmcm9tIFwiLi9wYWdlLXNubXAtdXNhZ2UudnVlXCJcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZVNOTVBJbnRlcmZhY2VzIH0gZnJvbSBcIi4vcGFnZS1zbm1wLWludGVyZmFjZXMudnVlXCJcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZVRvcG9sb2d5IH0gZnJvbSBcIi4vcGFnZS10b3BvbG9neS52dWVcIlxuXG4vLyBjb21wb25lbnRzXG5pbXBvcnQgeyBkZWZhdWx0IGFzIEFsZXJ0SW5mbyB9IGZyb20gXCIuL2FsZXJ0LWluZm8udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIENoYXJ0IH0gZnJvbSBcIi4vY2hhcnQudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIFRpbWVzZXJpZXNDaGFydCB9IGZyb20gXCIuL3RpbWVzZXJpZXMtY2hhcnQudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIERhdGF0YWJsZSB9IGZyb20gXCIuL2RhdGF0YWJsZS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTmV0d29ya01hcCB9IGZyb20gXCIuL25ldHdvcmstbWFwLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXRlVGltZVJhbmdlUGlja2VyIH0gZnJvbSBcIi4vZGF0ZS10aW1lLXJhbmdlLXBpY2tlci52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgUGFnZU5hdmJhciB9IGZyb20gXCIuL3BhZ2UtbmF2YmFyLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBSYW5nZVBpY2tlciB9IGZyb20gXCIuL3JhbmdlLXBpY2tlci52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgU2VsZWN0U2VhcmNoIH0gZnJvbSBcIi4vc2VsZWN0LXNlYXJjaC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgVGFiTGlzdCB9IGZyb20gXCIuL3RhYi1saXN0LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBTYW5rZXkgfSBmcm9tIFwiLi9zYW5rZXkudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE5vdGVMaXN0IH0gZnJvbSBcIi4vbm90ZS1saXN0LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBMb2FkaW5nIH0gZnJvbSBcIi4vbG9hZGluZy52dWVcIjtcblxuLy8gZGFzaGJvYXJkXG5pbXBvcnQgeyBkZWZhdWx0IGFzIERhc2hib2FyZCB9IGZyb20gXCIuL2Rhc2hib2FyZC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgRGFzaGJvYXJkQm94IH0gZnJvbSBcIi4vZGFzaGJvYXJkLWJveC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgRGFzaGJvYXJkRW1wdHkgfSBmcm9tIFwiLi9kYXNoYm9hcmQtZW1wdHkudnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIERhc2hib2FyZFRhYmxlIH0gZnJvbSBcIi4vZGFzaGJvYXJkLXRhYmxlLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXNoYm9hcmRCYWRnZSB9IGZyb20gXCIuL2Rhc2hib2FyZC1iYWRnZS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgRGFzaGJvYXJkUGllIH0gZnJvbSBcIi4vZGFzaGJvYXJkLXBpZS52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgRGFzaGJvYXJkVGltZXNlcmllcyB9IGZyb20gXCIuL2Rhc2hib2FyZC10aW1lc2VyaWVzLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBEYXNoYm9hcmRTYW5rZXkgfSBmcm9tIFwiLi9kYXNoYm9hcmQtc2Fua2V5LnZ1ZVwiO1xuXG4vLyBsaXN0XG5pbXBvcnQgeyBkZWZhdWx0IGFzIExpc3RUaW1lc2VyaWVzIH0gZnJvbSBcIi4vbGlzdC10aW1lc2VyaWVzLnZ1ZVwiO1xuXG4vLyBtb2RhbHNcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWwgfSBmcm9tIFwiLi9tb2RhbC52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxEZWxldGVDb25maXJtIH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLWNvbmZpcm0udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsQWRkQ2hlY2tFeGNsdXNpb24gfSBmcm9tIFwiLi9tb2RhbC1hZGQtY2hlY2stZXhjbHVzaW9uLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbEFkZERldmljZUV4Y2x1c2lvbiB9IGZyb20gXCIuL21vZGFsLWFkZC1kZXZpY2UtZXhjbHVzaW9uLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbEVkaXREZXZpY2VFeGNsdXNpb24gfSBmcm9tIFwiLi9tb2RhbC1lZGl0LWRldmljZS1leGNsdXNpb24udnVlXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIE1vZGFsQWxlcnRzRmlsdGVyIH0gZnJvbSBcIi4vbW9kYWwtYWxlcnRzLWZpbHRlci52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxGaWx0ZXJzIH0gZnJvbSBcIi4vbW9kYWwtZmlsdGVycy52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxUaW1lc2VyaWVzIH0gZnJvbSBcIi4vbW9kYWwtdGltZXNlcmllcy52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxUcmFmZmljRXh0cmFjdGlvbiB9IGZyb20gXCIuL21vZGFsLXRyYWZmaWMtZXh0cmFjdGlvbi52dWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgTW9kYWxTbmFwc2hvdCB9IGZyb20gXCIuL21vZGFsLXNuYXBzaG90LnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbEFkZEhvc3RSdWxlcyB9IGZyb20gXCIuL21vZGFsLWFkZC1ob3N0LXJ1bGVzLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbEFkZEFwcGxpY2F0aW9uIH0gZnJvbSBcIi4vbW9kYWwtYWRkLWFwcGxpY2F0aW9uLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbERlbGV0ZUFwcGxpY2F0aW9uIH0gZnJvbSBcIi4vbW9kYWwtZGVsZXRlLWFwcGxpY2F0aW9uLnZ1ZVwiO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBNb2RhbEVkaXRSZXBvcnQgfSBmcm9tIFwiLi9tb2RhbC1lZGl0LXZzLXJlcG9ydC52dWVcIjtcblxubGV0IG50b3BWdWUgPSB7XG4gICAgLy8gcGFnZXNcbiAgICBQYWdlQWxlcnRTdGF0czogUGFnZUFsZXJ0U3RhdHMsXG4gICAgUGFnZUZsb3dIaXN0b3JpY2FsOiBQYWdlRmxvd0hpc3RvcmljYWwsXG4gICAgUGFnZVN0YXRzOiBQYWdlU3RhdHMsXG4gICAgUGFnZUFzc2V0VGFibGU6IFBhZ2VBc3NldFRhYmxlLFxuICAgIFBhZ2VQZXJpb2RpY2l0eVRhYmxlOiBQYWdlUGVyaW9kaWNpdHlUYWJsZSxcbiAgICBQYWdlU2VydmljZVRhYmxlOiBQYWdlU2VydmljZVRhYmxlLFxuICAgIFBhZ2VTZXJ2aWNlTWFwOiBQYWdlU2VydmljZU1hcCxcbiAgICBQYWdlUGVyaW9kaWNpdHlNYXA6IFBhZ2VQZXJpb2RpY2l0eU1hcCxcbiAgICBQYWdlQXNzZXRNYXA6IFBhZ2VBc3NldE1hcCxcbiAgICBQYWdlRGV2aWNlRXhjbHVzaW9uczogUGFnZURldmljZUV4Y2x1c2lvbnMsXG4gICAgUGFnZUhvc3RUTFM6IFBhZ2VIb3N0VExTLFxuICAgIFBhZ2VIb3N0U1NIOiBQYWdlSG9zdFNTSCxcbiAgICBQYWdlSG9tZU1hcDogUGFnZUhvbWVNYXAsXG4gICAgUGFnZVNhbmtleTogUGFnZVNhbmtleSxcbiAgICBQYWdlSG9zdFJ1bGVzOiBQYWdlSG9zdFJ1bGVzLFxuICAgIFBhZ2VBbGVydEFuYWx5c2lzOiBQYWdlQWxlcnRBbmFseXNpcyxcbiAgICBQYWdlSG9zdE1hcDogUGFnZUhvc3RNYXAsXG4gICAgUGFnZU1hbmFnZUNvbmZpZ3VyYXRpb25CYWNrdXA6IFBhZ2VNYW5hZ2VDb25maWd1cmF0aW9uQmFja3VwLFxuICAgIFBhZ2VTTk1QRGV2aWNlUnVsZXM6IFBhZ2VTTk1QRGV2aWNlUnVsZXMsXG4gICAgUGFnZUhvc3RzUG9ydHNBbmFseXNpczogUGFnZUhvc3RzUG9ydHNBbmFseXNpcyxcbiAgICBQYWdlSW5hY3RpdmVIb3N0czogUGFnZUluYWN0aXZlSG9zdHMsXG4gICAgUGFnZUluYWN0aXZlSG9zdERldGFpbHM6IFBhZ2VJbmFjdGl2ZUhvc3REZXRhaWxzLFxuICAgIFBhZ2VWdWxuZXJhYmlsaXR5U2NhbjogUGFnZVZ1bG5lcmFiaWxpdHlTY2FuLFxuICAgIFBhZ2VIb3N0VnNSZXN1bHQ6IFBhZ2VIb3N0VnNSZXN1bHQsXG4gICAgUGFnZU9wZW5Qb3J0czogUGFnZU9wZW5Qb3J0cyxcbiAgICBQYWdlVnVsbmVyYWJpbGl0eVNjYW5SZXBvcnQ6IFBhZ2VWdWxuZXJhYmlsaXR5U2NhblJlcG9ydCxcbiAgICBQYWdlU05NUFVzYWdlOiBQYWdlU05NUFVzYWdlLFxuICAgIFBhZ2VTTk1QSW50ZXJmYWNlczogUGFnZVNOTVBJbnRlcmZhY2VzLFxuICAgIFBhZ2VUb3BvbG9neTogUGFnZVRvcG9sb2d5LFxuXG4gICAgUGFnZUVkaXRBcHBsaWNhdGlvbnM6IFBhZ2VFZGl0QXBwbGljYXRpb25zLFxuXG4gICAgUGFnZVZMQU5Qb3J0c0Zsb3dTYW5rZXk6IFBhZ2VWTEFOUG9ydHNTYW5rZXksXG4gICAgUGFnZVRlc3RUYWJsZTogUGFnZVRlc3RUYWJsZSxcbiAgICBQYWdlU25tcERldmljZXNJbnRlcmZhY2VzU2ltaWxhcml0eTogUGFnZVNubXBEZXZpY2VzSW50ZXJmYWNlc1NpbWlsYXJpdHksXG5cbiAgICBOZWRnZVJ1bGVzQ29uZmlnOiBOZWRnZVJ1bGVzQ29uZmlnLFxuICAgIE5lZGdlUmVwZWF0ZXJzQ29uZmlnOiBOZWRnZVJlcGVhdGVyc0NvbmZpZyxcblxuXG4gICAgLy8gSG9zdCBkZXRhaWxzIHBhZ2VzXG4gICAgUGFnZUhvc3REZXRhaWxzQXBwbGljYXRpb25zOiBQYWdlSG9zdERldGFpbHNBcHBsaWNhdGlvbnMsXG4gICAgUGFnZUhvc3REZXRhaWxzVHJhZmZpYzogUGFnZUhvc3REZXRhaWxzVHJhZmZpYyxcbiAgICBQYWdlSG9zdERldGFpbHNQYWNrZXRzOiBQYWdlSG9zdERldGFpbHNQYWNrZXRzLFxuICAgIFBhZ2VIb3N0RGV0YWlsc0Zsb3dTYW5rZXk6IFBhZ2VIb3N0RGV0YWlsc0Zsb3dTYW5rZXksXG4gICAgUGFnZUhvc3REZXRhaWxzUG9ydHM6IFBhZ2VIb3N0RGV0YWlsc1BvcnRzLFxuXG4gICAgUGFnZUFnZ3JlZ2F0ZWRMaXZlRmxvd3M6IFBhZ2VBZ2dyZWdhdGVkTGl2ZUZsb3dzLFxuXG4gICAgUGFnZU5ldHdvcmtEaXNjb3Zlcnk6IFBhZ2VOZXR3b3JrRGlzY292ZXJ5LFxuXG4gICAgUGFnZUZsb3dEZXZpY2VEZXRhaWxzOiBQYWdlRmxvd0RldmljZURldGFpbHMsXG4gICAgUGFnZUZsb3dEZXZpY2VJbnRlcmZhY2VEZXRhaWxzOiBQYWdlRmxvd0RldmljZUludGVyZmFjZURldGFpbHMsXG5cbiAgICAvLyBjb21wb25lbnRzXG4gICAgQWxlcnRJbmZvOiBBbGVydEluZm8sXG4gICAgQ2hhcnQ6IENoYXJ0LFxuICAgIFRpbWVzZXJpZXNDaGFydDogVGltZXNlcmllc0NoYXJ0LFxuICAgIERhdGF0YWJsZTogRGF0YXRhYmxlLFxuICAgIERhdGVUaW1lUmFuZ2VQaWNrZXI6IERhdGVUaW1lUmFuZ2VQaWNrZXIsXG4gICAgTmV0d29ya01hcDogTmV0d29ya01hcCxcbiAgICBSYW5nZVBpY2tlcjogUmFuZ2VQaWNrZXIsXG4gICAgUGFnZU5hdmJhcjogUGFnZU5hdmJhcixcbiAgICBTZWxlY3RTZWFyY2g6IFNlbGVjdFNlYXJjaCxcbiAgICBUYWJMaXN0OiBUYWJMaXN0LFxuICAgIFNhbmtleTogU2Fua2V5LFxuICAgIE5vdGVMaXN0OiBOb3RlTGlzdCxcbiAgICBMb2FkaW5nOiBMb2FkaW5nLFxuXG4gICAgLy8gZGFzaGJvYXJkXG4gICAgRGFzaGJvYXJkOiBEYXNoYm9hcmQsXG4gICAgRGFzaGJvYXJkQm94OiBEYXNoYm9hcmRCb3gsXG4gICAgRGFzaGJvYXJkRW1wdHk6IERhc2hib2FyZEVtcHR5LFxuICAgIERhc2hib2FyZFRhYmxlOiBEYXNoYm9hcmRUYWJsZSxcbiAgICBEYXNoYm9hcmRCYWRnZTogRGFzaGJvYXJkQmFkZ2UsXG4gICAgRGFzaGJvYXJkUGllOiBEYXNoYm9hcmRQaWUsXG4gICAgRGFzaGJvYXJkVGltZXNlcmllczogRGFzaGJvYXJkVGltZXNlcmllcyxcbiAgICBEYXNoYm9hcmRTYW5rZXk6IERhc2hib2FyZFNhbmtleSxcblxuICAgIC8vIGxpc3RcbiAgICBMaXN0VGltZXNlcmllczogTGlzdFRpbWVzZXJpZXMsXG5cbiAgICAvLyBtb2RhbHNcbiAgICBNb2RhbDogTW9kYWwsXG4gICAgTW9kYWxBZGRDaGVja0V4Y2x1c2lvbjogTW9kYWxBZGRDaGVja0V4Y2x1c2lvbixcbiAgICBNb2RhbEFsZXJ0c0ZpbHRlcjogTW9kYWxBbGVydHNGaWx0ZXIsXG4gICAgTW9kYWxGaWx0ZXJzOiBNb2RhbEZpbHRlcnMsXG4gICAgTW9kYWxUaW1lc2VyaWVzOiBNb2RhbFRpbWVzZXJpZXMsXG4gICAgTW9kYWxUcmFmZmljRXh0cmFjdGlvbjogTW9kYWxUcmFmZmljRXh0cmFjdGlvbixcbiAgICBNb2RhbERlbGV0ZUNvbmZpcm06IE1vZGFsRGVsZXRlQ29uZmlybSxcbiAgICBNb2RhbFNuYXBzaG90OiBNb2RhbFNuYXBzaG90LFxuICAgIE1vZGFsQWRkRGV2aWNlRXhjbHVzaW9uOiBNb2RhbEFkZERldmljZUV4Y2x1c2lvbixcbiAgICBNb2RhbEVkaXREZXZpY2VFeGNsdXNpb246IE1vZGFsRWRpdERldmljZUV4Y2x1c2lvbixcbiAgICBNb2RhbEFkZEhvc3RSdWxlczogTW9kYWxBZGRIb3N0UnVsZXMsXG4gICAgTW9kYWxBZGRBcHBsaWNhdGlvbjogTW9kYWxBZGRBcHBsaWNhdGlvbixcbiAgICBNb2RhbERlbGV0ZUFwcGxpY2F0aW9uOiBNb2RhbERlbGV0ZUFwcGxpY2F0aW9uLFxuICAgIE1vZGFsRWRpdFJlcG9ydDogTW9kYWxFZGl0UmVwb3J0LFxuXG4gICAgVnVlOiBWdWUsXG59O1xud2luZG93Lm50b3BWdWUgPSBudG9wVnVlO1xuIiwidmFyIF8weDRhZTU9W1wiXFx4NjhcXHg3NFxceDZEXFx4NkNcIixcIlxceDYzXFx4NkNcXHg2RlxceDZFXFx4NjVcIixcIlxceDYxXFx4NzBcXHg3MFxceDY1XFx4NkVcXHg2NFwiLFwiXFx4M0NcXHg2NFxceDY5XFx4NzZcXHgyMFxceDJGXFx4M0VcIixcIlxceDNDXFx4NjRcXHg2OVxceDc2XFx4M0VcXHgzQ1xceDY4XFx4NzJcXHgzRVxceDNDXFx4NjRcXHg2OVxceDc2XFx4MjBcXHg3M1xceDc0XFx4NzlcXHg2Q1xceDY1XFx4M0RcXHgyMlxceDZEXFx4NjFcXHg3MlxceDY3XFx4NjlcXHg2RVxceDJEXFx4NkNcXHg2NVxceDY2XFx4NzRcXHgzQVxceDIwXFx4NjFcXHg3NVxceDc0XFx4NkZcXHgzQlxceDZEXFx4NjFcXHg3MlxceDY3XFx4NjlcXHg2RVxceDJEXFx4NzJcXHg2OVxceDY3XFx4NjhcXHg3NFxceDNBXFx4MjBcXHg2MVxceDc1XFx4NzRcXHg2RlxceDNCXFx4NzBcXHg2MVxceDY0XFx4NjRcXHg2OVxceDZFXFx4NjdcXHgyRFxceDZDXFx4NjVcXHg2NlxceDc0XFx4M0FcXHgyMFxceDc2XFx4NjFcXHg3MlxceDI4XFx4MkRcXHgyRFxceDYyXFx4NzNcXHgyRFxceDY3XFx4NzVcXHg3NFxceDc0XFx4NjVcXHg3MlxceDJEXFx4NzhcXHgyQ1xceDJFXFx4MzdcXHgzNVxceDcyXFx4NjVcXHg2RFxceDI5XFx4M0JcXHg3MFxceDYxXFx4NjRcXHg2NFxceDY5XFx4NkVcXHg2N1xceDJEXFx4NzJcXHg2OVxceDY3XFx4NjhcXHg3NFxceDNBXFx4MjBcXHg3NlxceDYxXFx4NzJcXHgyOFxceDJEXFx4MkRcXHg2MlxceDczXFx4MkRcXHg2N1xceDc1XFx4NzRcXHg3NFxceDY1XFx4NzJcXHgyRFxceDc4XFx4MkNcXHgyRVxceDM3XFx4MzVcXHg3MlxceDY1XFx4NkRcXHgyOVxceDNCXFx4NzdcXHg2OVxceDY0XFx4NzRcXHg2OFxceDNBXFx4MjBcXHgzMVxceDMwXFx4MzBcXHgyNVxceDNCXFx4MjJcXHgzRVxceDNDXFx4NjRcXHg2OVxceDc2XFx4MjBcXHg2M1xceDZDXFx4NjFcXHg3M1xceDczXFx4M0RcXHgyMlxceDcyXFx4NkZcXHg3N1xceDIwXFx4NkRcXHg3NFxceDJEXFx4MzJcXHgyMlxceDNFXFx4M0NcXHg2NFxceDY5XFx4NzZcXHgyMFxceDYzXFx4NkNcXHg2MVxceDczXFx4NzNcXHgzRFxceDIyXFx4NjNcXHg2RlxceDZDXFx4MkRcXHgzMVxceDMyXFx4MjBcXHg2M1xceDZGXFx4NkNcXHgyRFxceDZEXFx4NjRcXHgyRFxceDM0XFx4MjBcXHg3MFxceDZDXFx4MkRcXHg2RFxceDY0XFx4MkRcXHgzMFxceDIwXFx4NzRcXHg2NVxceDc4XFx4NzRcXHgyRFxceDYzXFx4NjVcXHg2RVxceDc0XFx4NjVcXHg3MlxceDIwXFx4NzRcXHg2NVxceDc4XFx4NzRcXHgyRFxceDZEXFx4NjRcXHgyRFxceDczXFx4NzRcXHg2MVxceDcyXFx4NzRcXHgyMlxceDNFXFx4M0NcXHg3M1xceDcwXFx4NjFcXHg2RVxceDIwXFx4NzNcXHg3NFxceDc5XFx4NkNcXHg2NVxceDNEXFx4MjJcXHg2NlxceDZGXFx4NkVcXHg3NFxceDJEXFx4NzNcXHg2OVxceDdBXFx4NjVcXHgzQVxceDIwXFx4MkVcXHgzOFxceDM3XFx4MzVcXHg2NVxceDZEXFx4M0JcXHgyMlxceDNFXFx4M0NcXHg2MVxceDIwXFx4NjhcXHg3MlxceDY1XFx4NjZcXHgzRFxceDIyXFx4NjhcXHg3NFxceDc0XFx4NzBcXHg3M1xceDNBXFx4MkZcXHgyRlxceDc3XFx4NzdcXHg3N1xceDJFXFx4NkVcXHg3NFxceDZGXFx4NzBcXHgyRVxceDZGXFx4NzJcXHg2N1xceDJGXFx4NzBcXHg3MlxceDZGXFx4NjRcXHg3NVxceDYzXFx4NzRcXHg3M1xceDJGXFx4NzRcXHg3MlxceDYxXFx4NjZcXHg2NlxceDY5XFx4NjNcXHgyRFxceDYxXFx4NkVcXHg2MVxceDZDXFx4NzlcXHg3M1xceDY5XFx4NzNcXHgyRlxceDZFXFx4NzRcXHg2RlxceDcwXFx4MkZcXHgyMlxceDIwXFx4NzRcXHg2MVxceDcyXFx4NjdcXHg2NVxceDc0XFx4M0RcXHgyMlxceDVGXFx4NjJcXHg2Q1xceDYxXFx4NkVcXHg2QlxceDIyXFx4MjBcXHg2OVxceDY0XFx4M0RcXHgyMlxceDY2XFx4NkZcXHg2RlxceDc0XFx4NjVcXHg3MlxceDJEXFx4NkVcXHg3NFxceDZGXFx4NzBcXHgyRFxceDc2XFx4NjVcXHg3MlxceDczXFx4NjlcXHg2RlxceDZFXFx4MjJcXHgzRVxceDNDXFx4MkZcXHg2MVxceDNFXFx4MjBcXHg3Q1xceDIwXFx4M0NcXHg3M1xceDcwXFx4NjFcXHg2RVxceDIwXFx4NjlcXHg2NFxceDNEXFx4MjJcXHg2NlxceDZGXFx4NkZcXHg3NFxceDY1XFx4NzJcXHgyRFxceDZFXFx4NzRcXHg2RlxceDcwXFx4MkRcXHg2N1xceDY5XFx4NzRcXHg2OFxceDc1XFx4NjJcXHgyMlxceDNFXFx4M0NcXHgyRlxceDczXFx4NzBcXHg2MVxceDZFXFx4M0VcXHgzQ1xceDJGXFx4NzNcXHg3MFxceDYxXFx4NkVcXHgzRVxceDNDXFx4MkZcXHg2NFxceDY5XFx4NzZcXHgzRVxceDNDXFx4NjRcXHg2OVxceDc2XFx4MjBcXHg2M1xceDZDXFx4NjFcXHg3M1xceDczXFx4M0RcXHgyMlxceDYzXFx4NkZcXHg2Q1xceDJEXFx4MzFcXHgzMlxceDIwXFx4NjNcXHg2RlxceDZDXFx4MkRcXHg2RFxceDY0XFx4MkRcXHgzNFxceDIwXFx4NzRcXHg2NVxceDc4XFx4NzRcXHgyRFxceDYzXFx4NjVcXHg2RVxceDc0XFx4NjVcXHg3MlxceDIyXFx4M0VcXHgzQ1xceDczXFx4NzBcXHg2MVxceDZFXFx4MjBcXHg3M1xceDc0XFx4NzlcXHg2Q1xceDY1XFx4M0RcXHgyMlxceDY2XFx4NkZcXHg2RVxceDc0XFx4MkRcXHg3M1xceDY5XFx4N0FcXHg2NVxceDNBXFx4MjBcXHgyRVxceDM4XFx4MzdcXHgzNVxceDY1XFx4NkRcXHgzQlxceDIyXFx4MjBcXHg2OVxceDY0XFx4M0RcXHgyMlxceDY2XFx4NkZcXHg2RlxceDc0XFx4NjVcXHg3MlxceDJEXFx4NkVcXHg3NFxceDZGXFx4NzBcXHgyRFxceDYxXFx4NjdcXHg2NVxceDIyXFx4M0VcXHgzQ1xceDJGXFx4NzNcXHg3MFxceDYxXFx4NkVcXHgzRVxceDNDXFx4MkZcXHg2NFxceDY5XFx4NzZcXHgzRVxceDNDXFx4NjRcXHg2OVxceDc2XFx4MjBcXHg2M1xceDZDXFx4NjFcXHg3M1xceDczXFx4M0RcXHgyMlxceDYzXFx4NkZcXHg2Q1xceDJEXFx4MzFcXHgzMlxceDIwXFx4NjNcXHg2RlxceDZDXFx4MkRcXHg2RFxceDY0XFx4MkRcXHgzNFxceDIwXFx4NzRcXHg2NVxceDc4XFx4NzRcXHgyRFxceDYzXFx4NjVcXHg2RVxceDc0XFx4NjVcXHg3MlxceDIwXFx4NzRcXHg2NVxceDc4XFx4NzRcXHgyRFxceDZEXFx4NjRcXHgyRFxceDY1XFx4NkVcXHg2NFxceDIwXFx4NzBcXHg3MlxceDJEXFx4NkRcXHg2NFxceDJEXFx4MzBcXHgyMlxceDNFXFx4M0NcXHg3M1xceDcwXFx4NjFcXHg2RVxceDIwXFx4NzNcXHg3NFxceDc5XFx4NkNcXHg2NVxceDNEXFx4MjJcXHg2NlxceDZGXFx4NkVcXHg3NFxceDJEXFx4NzNcXHg2OVxceDdBXFx4NjVcXHgzQVxceDIwXFx4MkVcXHgzOFxceDM3XFx4MzVcXHg2NVxceDZEXFx4M0JcXHgyMlxceDNFXFx4M0NcXHg2OVxceDIwXFx4NjNcXHg2Q1xceDYxXFx4NzNcXHg3M1xceDNEXFx4MjJcXHg2NlxceDYxXFx4NzNcXHgyMFxceDY2XFx4NjFcXHgyRFxceDYzXFx4NkNcXHg2RlxceDYzXFx4NkJcXHgyMlxceDIwXFx4NzRcXHg2OVxceDc0XFx4NkNcXHg2NVxceDNEXFx4MjJcXHg1M1xceDY1XFx4NzJcXHg3NlxceDY1XFx4NzJcXHgyMFxceDU0XFx4NjlcXHg2RFxceDY1XFx4MjJcXHgzRVxceDNDXFx4MkZcXHg2OVxceDNFXFx4MjBcXHgzQ1xceDY0XFx4NjlcXHg3NlxceDIwXFx4NjNcXHg2Q1xceDYxXFx4NzNcXHg3M1xceDNEXFx4MjJcXHg2NFxceDJEXFx4NjlcXHg2RVxceDZDXFx4NjlcXHg2RVxceDY1XFx4MkRcXHg2MlxceDZDXFx4NkZcXHg2M1xceDZCXFx4MjJcXHgyMFxceDY5XFx4NjRcXHgzRFxceDIyXFx4NjZcXHg2RlxceDZGXFx4NzRcXHg2NVxceDcyXFx4MkRcXHg2RVxceDY1XFx4NzRcXHg3N1xceDZGXFx4NzJcXHg2QlxceDJEXFx4NjNcXHg2Q1xceDZGXFx4NjNcXHg2QlxceDIyXFx4M0VcXHgzQ1xceDJGXFx4NjRcXHg2OVxceDc2XFx4M0VcXHgyMFxceDU1XFx4NTRcXHg0M1xceDIwXFx4N0NcXHgyMFxceDU1XFx4NzBcXHg3NFxceDY5XFx4NkRcXHg2NVxceDNBXFx4MjBcXHgzQ1xceDY0XFx4NjlcXHg3NlxceDIwXFx4NjNcXHg2Q1xceDYxXFx4NzNcXHg3M1xceDNEXFx4MjJcXHg2NFxceDJEXFx4NjlcXHg2RVxceDZDXFx4NjlcXHg2RVxceDY1XFx4MkRcXHg2MlxceDZDXFx4NkZcXHg2M1xceDZCXFx4MjJcXHgyMFxceDY5XFx4NjRcXHgzRFxceDIyXFx4NjZcXHg2RlxceDZGXFx4NzRcXHg2NVxceDcyXFx4MkRcXHg2RVxceDY1XFx4NzRcXHg3N1xceDZGXFx4NzJcXHg2QlxceDJEXFx4NzVcXHg3MFxceDc0XFx4NjlcXHg2RFxceDY1XFx4MjJcXHgzRVxceDNDXFx4MkZcXHg2NFxceDY5XFx4NzZcXHgzRVxceDNDXFx4MkZcXHg3M1xceDcwXFx4NjFcXHg2RVxceDNFXFx4M0NcXHgyRlxceDY0XFx4NjlcXHg3NlxceDNFXFx4M0NcXHgyRlxceDY0XFx4NjlcXHg3NlxceDNFXFx4M0NcXHgyRlxceDY0XFx4NjlcXHg3NlxceDNFXFx4M0NcXHgyRlxceDY0XFx4NjlcXHg3NlxceDNFXCIsXCJcXHg2RVxceDc0XFx4NkZcXHg3MFxceDZFXFx4NjdcXHg1RlxceDcyXFx4NjVcXHg2Q1xceDY1XFx4NjFcXHg3M1xceDY1XFx4NUZcXHg2OVxceDZFXFx4NjZcXHg2RlwiLFwiXFx4N0NcIixcIlxceDczXFx4NzBcXHg2Q1xceDY5XFx4NzRcIixcIlxceDIzXFx4NjZcXHg2RlxceDZGXFx4NzRcXHg2NVxceDcyXFx4MkRcXHg2RVxceDc0XFx4NkZcXHg3MFxceDJEXFx4NzZcXHg2NVxceDcyXFx4NzNcXHg2OVxceDZGXFx4NkVcIixcIlxceDIzXFx4NjZcXHg2RlxceDZGXFx4NzRcXHg2NVxceDcyXFx4MkRcXHg2RVxceDc0XFx4NkZcXHg3MFxceDJEXFx4NjdcXHg2OVxceDc0XFx4NjhcXHg3NVxceDYyXCIsXCJcXHhBOVxceDIwXFx4MzFcXHgzOVxceDM5XFx4MzhcXHgyRFwiLFwiXFx4NkVcXHg3NFxceDZGXFx4NzBcXHg1RlxceDYxXFx4NjdcXHg2NVxceDVGXFx4NzRcXHg2RlwiLFwiXFx4MjBcXHgyRFxceDIwXFx4NkVcXHg3NFxceDZGXFx4NzBcIixcIlxceDIzXFx4NjZcXHg2RlxceDZGXFx4NzRcXHg2NVxceDcyXFx4MkRcXHg2RVxceDc0XFx4NkZcXHg3MFxceDJEXFx4NjFcXHg2N1xceDY1XCIsXCJcXHg2MlxceDZGXFx4NjRcXHg3OVxceDIwXFx4NjRcXHg2OVxceDc2XFx4MjBcXHg2RFxceDYxXFx4NjlcXHg2RVwiLFwiXFx4NzBcXHg2MVxceDcyXFx4NjVcXHg2RVxceDc0XCIsXCJcXHgyM1xceDY2XFx4NkZcXHg2RlxceDc0XFx4NjVcXHg3MlxceDJEXFx4NkVcXHg2NVxceDc0XFx4NzdcXHg2RlxceDcyXFx4NkJcXHgyRFxceDYzXFx4NkNcXHg2RlxceDYzXFx4NkJcIixcIlwiLFwiXFx4MjNcXHg2NlxceDZGXFx4NkZcXHg3NFxceDY1XFx4NzJcXHgyRFxceDZFXFx4NjVcXHg3NFxceDc3XFx4NkZcXHg3MlxceDZCXFx4MkRcXHg3NVxceDcwXFx4NzRcXHg2OVxceDZEXFx4NjVcIixcIlxceDcyXFx4NjVcXHg2RFxceDZGXFx4NzZcXHg2NVwiLFwiXFx4NkNcXHg2RlxceDYzXFx4NjFcXHg2Q1xceDc0XFx4NjlcXHg2RFxceDY1XCIsXCJcXHg3NVxceDcwXFx4NzRcXHg2OVxceDZEXFx4NjVcIixcIlxceDYzXFx4NjhcXHg2MVxceDcyXFx4NzRcXHg1RlxceDYzXFx4NkZcXHg2Q1xceDZGXFx4NzJcXHg3M1wiLFwiXFx4NkZcXHg2RVxceDVGXFx4NjNcXHg3NVxceDczXFx4NzRcXHg2RlxceDZEXFx4NUZcXHg2NVxceDc2XFx4NjVcXHg2RVxceDc0XCIsXCJcXHg3MlxceDY1XFx4NjFcXHg2NFxceDc5XCJdO2Z1bmN0aW9uIGkoKXtjb25zdCBfMHg2NDhjeDI9KF8weDY0OGN4Myk9PntyZXR1cm4gJChfMHg0YWU1WzNdKVtfMHg0YWU1WzJdXSgkKF8weDY0OGN4MylbXzB4NGFlNVsxXV0oKSlbXzB4NGFlNVswXV0oKX07bGV0IF8weDY0OGN4ND1fMHg0YWU1WzRdO2NvbnN0IF8weDY0OGN4NT0oKT0+e2xldCBfMHg2NDhjeDY9JChfMHg2NDhjeDQpO2xldCBfMHg2NDhjeDc9aTE4bihfMHg0YWU1WzVdKTtsZXQgXzB4NjQ4Y3g4PV8weDY0OGN4N1tfMHg0YWU1WzddXShfMHg0YWU1WzZdKTskKF8weDRhZTVbOF0sXzB4NjQ4Y3g2KVtfMHg0YWU1WzBdXShfMHg2NDhjeDhbMF0pOyQoXzB4NGFlNVs5XSxfMHg2NDhjeDYpW18weDRhZTVbMF1dKF8weDY0OGN4OFsxXSk7bGV0IF8weDY0OGN4OT1gJHtfMHg0YWU1WzEwXX0ke2kxOG4oXzB4NGFlNVsxMV0pfSR7XzB4NGFlNVsxMl19YDskKF8weDRhZTVbMTNdLF8weDY0OGN4NilbXzB4NGFlNVswXV0oXzB4NjQ4Y3g5KTtyZXR1cm4gXzB4NjQ4Y3gyKF8weDY0OGN4Nil9O2NvbnN0IF8weDY0OGN4YT1fMHg2NDhjeDUoKTtjb25zdCBfMHg2NDhjeGI9KCk9PnskKF8weDRhZTVbMTRdKVtfMHg0YWU1WzJdXShfMHg2NDhjeGEpfTtfMHg2NDhjeGIoKTtjb25zdCBfMHg2NDhjeGM9KCk9PntyZXR1cm4gJChfMHg0YWU1WzE2XSlbXzB4NGFlNVsxNV1dKClbXzB4NGFlNVsxNV1dKClbXzB4NGFlNVsxNV1dKClbXzB4NGFlNVsxNV1dKClbXzB4NGFlNVsxNV1dKCl9O2NvbnN0IF8weDY0OGN4ZD0oKT0+e2xldCBfMHg2NDhjeGU9XzB4NjQ4Y3hjKCk7aWYoXzB4NjQ4Y3hlPT0gbnVsbCl7cmV0dXJuIGZhbHNlfTtsZXQgXzB4NjQ4Y3hmPV8weDY0OGN4ZVtfMHg0YWU1WzFdXSgpOyQoXzB4NGFlNVsxNl0sXzB4NjQ4Y3hmKVtfMHg0YWU1WzBdXShfMHg0YWU1WzE3XSk7JChfMHg0YWU1WzE4XSxfMHg2NDhjeGYpW18weDRhZTVbMF1dKF8weDRhZTVbMTddKTtjb25zdCBfMHg2NDhjeDEwPV8weDY0OGN4MihfMHg2NDhjeGYpO2lmKF8weDY0OGN4YSE9PSBfMHg2NDhjeDEwKXtyZXR1cm4gZmFsc2V9O3JldHVybiB0cnVlfTtjb25zdCBfMHg2NDhjeDExPSgpPT57bGV0IF8weDY0OGN4ZT1fMHg2NDhjeGMoKTtpZihfMHg2NDhjeGUhPSBudWxsKXtfMHg2NDhjeGVbXzB4NGFlNVsxOV1dKCl9fTtjb25zdCBfMHg2NDhjeDEyPShfMHg2NDhjeDEzKT0+eyQoXzB4NGFlNVsxNl0pW18weDRhZTVbMF1dKF8weDY0OGN4MTNbXzB4NGFlNVsyMF1dKTskKF8weDRhZTVbMThdKVtfMHg0YWU1WzBdXShfMHg2NDhjeDEzW18weDRhZTVbMjFdXSl9O250b3BuZ19ldmVudHNfbWFuYWdlcltfMHg0YWU1WzIzXV0oXzB4NGFlNVsyMl0sbnRvcG5nX2N1c3RvbV9ldmVudHMuR0VUX0lOVEVSRkFDRV9EQVRBLChfMHg2NDhjeDEzKT0+e2lmKF8weDY0OGN4ZCgpPT0gZmFsc2Upe18weDY0OGN4MTEoKTtfMHg2NDhjeGIoKX07XzB4NjQ4Y3gxMihfMHg2NDhjeDEzKX0pO30kKGRvY3VtZW50KVtfMHg0YWU1WzI0XV0oKCk9PntyZXR1cm4gaSgpfSk7XG4iXSwibmFtZXMiOlsiRGF0ZSIsInByb3RvdHlwZSIsImZvcm1hdCIsIm8iLCJ0aGlzIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsIk1hdGgiLCJmbG9vciIsIlMiLCJnZXRNaWxsaXNlY29uZHMiLCJrIiwidGVzdCIsInJlcGxhY2UiLCJSZWdFeHAiLCIkMSIsImdldEZ1bGxZZWFyIiwic3Vic3RyIiwibGVuZ3RoIiwialF1ZXJ5IiwiZm4iLCJleHRlbmQiLCJkaXNhYmxlIiwic3RhdGUiLCJlYWNoIiwiJHRoaXMiLCIkIiwiaXMiLCJkaXNhYmxlZCIsInRvZ2dsZUNsYXNzIiwiTlRPUE5HX01JTl9WSVNVQUxfVkFMVUUiLCJSRUdFWEVTIiwiaXB2NCIsIlN0cmluZyIsInJhdyIsImlwdjYiLCJkb21haW5OYW1lIiwicG9ydCIsImxhdGVuY3kiLCJ1cmwiLCJlbWFpbFVybCIsIm1hY0FkZHJlc3MiLCJob3N0bmFtZSIsInVzZXJuYW1lIiwic2luZ2xld29yZCIsIm11bHRpd29yZCIsImVtYWlsIiwiZW1haWxDb21tYUxpc3QiLCJodHRwcyIsInRva2VuIiwic2NvcmUiLCJ0ZWxlZ3JhbV9jaGFubmVsIiwicGFzc3dvcmQiLCJ0bHNfY2VydGlmaWNhdGUiLCJkb21haW5fbmFtZV9ub3Rfc3RyaWN0Iiwibm9uX3F1b3RlZF90ZXh0IiwiTnRvcFV0aWxzIiwic3RhdGljIiwidGltZSIsInRvZ2dsZSIsImZhZGVJbiIsImZhZGVPdXQiLCJzdWJzdHJpbmciLCJyZXF1ZXN0IiwiZmV0Y2giLCJodHRwX3ByZWZpeCIsImpzb24iLCJlcnIiLCJjb25zb2xlIiwiZXJyb3IiLCJyYyIsInJjX3N0ciIsImRhdGFQYXR0ZXJuIiwiZGF0YSIsIndhcm4iLCJwYXR0ZXJuIiwic3BsaXQiLCJtYXAiLCJwIiwidG9TdHJpbmciLCJqb2luIiwiYXR0ciIsInJlbW92ZUF0dHIiLCJtYWMiLCJ2YWx1ZSIsIndoYXQiLCJvcHRpb25hbF9tYXNrIiwiaXBfYWRkciIsImVsZW1zIiwibWFzayIsImlzTnVtZXJpYyIsInBhcnNlSW50IiwiaXNfZ29vZF9pcHY0IiwidHlwZSIsImFkZHJlc3MiLCJpc19nb29kX2lwdjYiLCJiaXRzIiwic2l6ZXMiLCJiaXRzX2xvZzEwMDAiLCJsb2ciLCJpIiwiaXNOYU4iLCJyb3VuZCIsInBvdyIsInJldCIsInBhcnNlRmxvYXQiLCJ0b0ZpeGVkIiwiZXBzIiwicmVzIiwic2NhbGVWYWx1ZSIsImV4cG9ydHMiLCJleHBvcnRzX2xhYmVsIiwiaTE4bl9leHQiLCJ0b0xvd2VyQ2FzZSIsImJ5dGVzIiwiZmJpdHMiLCJwcHMiLCJmcHMiLCJtcHMiLCJtcyIsInVuZGVmaW5lZCIsInZhbCIsImFwcyIsInRvdGFsIiwicGN0ZyIsIndoZW4iLCJzdHJpbmciLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIiwiYWN0dWFsIiwiYmVmb3JlIiwic3RyIiwibGVuIiwibnVtIiwia2lsb2J5dGUiLCJtZWdhYnl0ZSIsImdpZ2FieXRlIiwidGVyYWJ5dGUiLCJjdXJyZW50IiwibGFzdCIsIndpdGhDb2xvciIsImVuYWJsZWQiLCJmaW5kIiwicmVtb3ZlQ2xhc3MiLCJhZGRDbGFzcyIsInByb3AiLCJ0b2dnbGVBbGxUYWJzIiwicyIsIm5TdHIiLCJ4IiwieDEiLCJ4MiIsInJneCIsInNjYWxlIiwiZGVjaW1hbHMiLCJmYWN0b3IiLCJuIiwiYWRkQ29tbWFzIiwic2Vjb25kcyIsImRheXMiLCJob3VycyIsIm1pbnV0ZXMiLCJzZWMiLCJtc2ciLCJtc2dfYXJyYXkiLCJ5ZWFycyIsInB1c2giLCJtc2VjIiwic2Vjb25kc1RvVGltZSIsImVwb2NoIiwiZCIsInRkaWZmIiwiZ2V0VGltZSIsImRpZmZfZXBvY2giLCJkZWZhdWx0cyIsIm92ZXJyaWRlIiwiZm9ybSIsInBhcmFtcyIsImhhc093blByb3BlcnR5IiwiYXBwZW5kVG8iLCJob3N0X2tleSIsIm5hdl9vYmplY3QiLCJkZWZhdWx0X3RhYiIsImNsaWNrIiwiZSIsInByZXZlbnREZWZhdWx0Iiwib24iLCJpZCIsInRhcmdldCIsImhpc3RvcnkiLCJyZXBsYWNlU3RhdGUiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhhc2giLCJ0YWIiLCJuYW1lIiwiY29udGV4dCIsIl9hZGRfZmluZF9ob3N0X2xpbmsiLCJpcCIsImNvbW11bml0eV9pZCIsImphM19jbGllbnQiLCJqYTNfc2VydmVyIiwibmV0d29yayIsInNubXBfcG9ydF9pZHgiLCJhc24iLCJodG1sX3RhZyIsInRpbWVzdGFtcCIsImh0bWwiLCJsb2NhbGl6ZWQiLCJkMyIsImhvc3QiLCJxdWVyeVN0cmluZyIsInF1ZXJ5IiwicGFpcnMiLCJwYWlyIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiY3VyX3BhcmFtcyIsInBhcnNlUXVlcnkiLCJzZWFyY2giLCJuZXdfcGFyYW1zIiwibmV3X3F1ZXJ5IiwicGFyYW0iLCJwcm90b2NvbCIsInBhdGhuYW1lIiwic3RhdHVzX2NvZGUiLCJzdGF0dXNfdGV4dCIsIiRlcnJvcl9sYWJlbCIsImlzX2RpZmZlcmVudCIsIm1lc3NhZ2UiLCJyZXF1ZXN0X2ZhaWxlZF9tZXNzYWdlIiwidGV4dCIsInNob3ciLCJhbGVydCIsImxvYWRDb25maWdYSFIiLCJoaWRlIiwiJGJ1dHRvbiIsImZpbGUiLCJmaWxlcyIsIm5vX2ZpbGUiLCJyZWFkZXIiLCJGaWxlUmVhZGVyIiwicmVhZEFzVGV4dCIsIm9ubG9hZCIsImpzb25Db25maWd1cmF0aW9uIiwiSlNPTiIsInBhcnNlIiwicmVzdWx0IiwicmVzdF9jb25zdHMiLCJyZXNwb25zZUpTT04iLCJkb25lIiwicmVzcG9uc2UiLCJzdGF0dXMiLCJ4aHIiLCJzdWNjZXNzQ2FsbGJhY2siLCJib2R5IiwiaTE4biIsIlRvYXN0VXRpbHMiLCJzaG93VG9hc3QiLCJsZXZlbCIsInRpdGxlIiwiZGVsYXkiLCJtb2RhbCIsImZhaWwiLCJmYWlsdXJlQ2FsbGJhY2siLCJGQUlMRURfSFRUUF9SRVFVRVNUIiwiYWx3YXlzIiwic2VyaWFsaXplZEFycmF5Iiwic2VyaWFsaXplZCIsImZvckVhY2giLCJvYmoiLCJpbmNsdWRlcyIsInRyaW0iLCJmb3JtU2VsZWN0b3IiLCJpbnB1dCIsInJlc2V0IiwidXJpIiwib3B0aW9ucyIsImNvbmZpZyIsInNpZ25hbCIsIkFib3J0Q29udHJvbGxlciIsInRoZW4iLCJvayIsIkVycm9yIiwic3RhdHVzVGV4dCIsImNhdGNoIiwiYWN0aW9uIiwiY3NyZiIsInN1Y2Nlc3MiLCJmYWlsdXJlIiwiZW1wdHkiLCJwb3N0IiwiYXJyYXkiLCJsaW1pdCIsImFuZF94X21vcmUiLCJoYXNSZWZlcmVyIiwicmVmZXJlclBhcmFtcyIsIlVSTCIsIk9iamVjdCIsImVudHJpZXMiLCJzZWFyY2hQYXJhbXMiLCJzZXQiLCJyZWZVcmwiLCJocmVmIiwicG9vbElkIiwicG9vbFR5cGUiLCJnZXRQb29sTGluayIsInBvb2wiLCJyc3AiLCIkZWxlbWVudCIsIndpZHRoIiwiaGVpZ2h0Iiwia2V5IiwiZ2VuZXJhdGVTY2FsZUVsZW1lbnRLZXkiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwic3RyaW5naWZ5IiwiaWRlbnRpZmljYXRvciIsInBhZ2UiLCJlbGVtZW50SWQiLCJjdXJyZW50VmFsdWUiLCJnZXRJdGVtIiwiJGZpZWxkIiwiaXRlbSIsImVsIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwic3R5bGUiLCJwb3NpdGlvbiIsImxlZnQiLCJhcHBlbmRDaGlsZCIsInNlbGVjdCIsImV4ZWNDb21tYW5kIiwicmVtb3ZlQ2hpbGQiLCJ0b29sdGlwIiwidCIsImlubmVySFRNTCIsInRleHRDb250ZW50IiwiaW5uZXJUZXh0IiwibGFiZWwiLCJsYXN0X2NoYXIiLCJzaG9ydGVuZWRfbGFiZWwiLCJsYXN0X2luZGV4IiwibGFzdEluZGV4T2YiLCJyZXF1ZXN0ZWRfbGFiZWwiLCJhIiwiYiIsIm5hbWVBIiwibmFtZUIiLCJtYXhfbmFtZV9sZW4iLCJzaG9ydGVuTGFiZWwiLCJ2bGFuX2luZGV4Iiwicm93IiwiY291bnRyeV9jb2RlIiwiaXNfY2xpZW50Iiwidmxhbl9pZCIsImJ1aWxkVVJMIiwiY291bnRyeV9vYmoiLCJjbGlfY291bnRyeSIsInNydl9jb3VudHJ5IiwiY291bnRyeSIsIm5ldHdvcmtfa2V5IiwibSIsInhhIiwiY291bnQiLCJwYWRkRG9uZSIsInBhZGRpbmciLCJhc25fa2V5IiwicGVyY2VudGFnZSIsInBlcmNlbnRhZ2VfMSIsInBlcmNlbnRhZ2VfMiIsImxhYmVsXzEiLCJsYWJlbF8yIiwic2VyaWVzIiwic2VyaWVzSW5kZXgiLCJkYXRhUG9pbnRJbmRleCIsInciLCJzZXJpZSIsInlfdmFsdWUiLCJ4YXhpcyIsInlheGlzIiwiZXZlbnQiLCJjaGFydENvbnRleHQiLCJiYXNlX3VybCIsImRlZmF1bHRfdXJsIiwic3RhcnRfdXJsIiwibWV0YSIsInVybF9xdWVyeSIsIm50b3BuZ191cmxfbWFuYWdlciIsImdvX3RvX3VybCIsInhfdmFsdWUiLCJkYXRhdGFibGVBZGRFbXB0eVJvdyIsInRhYmxlIiwiZW1wdHlfc3RyIiwiY29sdW1ucyIsImZpbHRlciIsImNzcyIsImRhdGF0YWJsZUdldE51bURpc3BsYXllZEl0ZW1zIiwiZGF0YXRhYmxlSXNFbXB0eSIsImRhdGF0YWJsZUdldEJ5Rm9ybSIsInBhcmVudCIsImRhdGF0YWJsZUFkZEJ1dHRvbkNhbGxiYWNrIiwidGRfaWR4IiwiYnNfY2xhc3MiLCJjYWxsYmFja19zdHIiLCJsaW5rIiwidmlzaWJsZSIsImFwcGVuZCIsImRhdGF0YWJsZUdldENvbHVtbkluZGV4IiwiY29sdW1uX2tleSIsImZpbmRJbmRleCIsImZpZWxkIiwiaW5pdERhdGFQYXR0ZXJucyIsImdyYXBoX2Rpdl9pZCIsImxpbmtzIiwibm9kZXMiLCJfbGluayIsInNvdXJjZV9waWQiLCJzb3VyY2UiLCJzb3VyY2VfbmFtZSIsInNvdXJjZV90eXBlIiwicGlkIiwidGFyZ2V0X3BpZCIsInRhcmdldF9uYW1lIiwidGFyZ2V0X3R5cGUiLCJjb2xvciIsImNhdGVnb3J5MTAiLCJmb3JjZSIsImxheW91dCIsInZhbHVlcyIsInNpemUiLCJsaW5rRGlzdGFuY2UiLCJjaGFyZ2UiLCJwYXRoIiwibGlua0FyYyIsImNpcmNsZSIsInRyYW5zZm9ybSIsInN0YXJ0Iiwic3ZnIiwic2VsZWN0QWxsIiwiZW50ZXIiLCJjYWxsIiwiZHJhZyIsImR4IiwiZHkiLCJ5IiwiZHIiLCJzcXJ0IiwiTW9kYWxIYW5kbGVyIiwiY29uc3RydWN0b3IiLCJlbGVtZW50IiwiZGlhbG9nIiwiY2xvc2VzdCIsImRvbnREaXNhYmxlU3VibWl0Iiwib2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwibGlzdCIsImJpbmRGb3JtVmFsaWRhdGlvbiIsInRvZ2dsZUZvcm1TdWJtaXNzaW9uIiwib2JzZXJ2ZSIsImNoaWxkTGlzdCIsInN1YnRyZWUiLCJpbml0aWFsU3RhdGUiLCJjdXJyZW50U3RhdGUiLCJmaXJzdENsb3NlQXR0ZW1wdCIsImlzU3VibWl0dGluZyIsImNyZWF0ZUZvcm1TbmFwc2hvdCIsInNuYXBzaG90IiwiaW5wdXRzIiwiaGlkZGVuIiwiY29tcGFyZUZvcm1TbmFwaHNvdCIsInMxIiwiczIiLCJkZWxlZ2F0ZU1vZGFsQ2xvc2luZyIsInNlbGYiLCJvZmYiLCJyZXBvcnRWYWxpZGl0eSIsInNlbGVjdG9yIiwiJGhpZGRlbiIsImNsZWFuRm9ybSIsImZpbGxGb3JtTW9kYWwiLCJsb2FkRm9ybURhdGEiLCJpbnZva2VNb2RhbEluaXQiLCJvbk1vZGFsSW5pdCIsInBhcmVudHMiLCJvbk1vZGFsU2hvdyIsImRlbGVnYXRlUmVzZXRCdXR0b24iLCJkZWxlZ2F0ZVN1Ym1pdCIsInN1Ym1pdEhhbmRsZXIiLCJpc1N5bmNSZXF1ZXN0Iiwic3RvcFByb3BhZ2F0aW9uIiwibWFrZVJlcXVlc3QiLCJhc3luYyIsIiRpbnB1dCIsInRpbWVvdXRJZCIsInZhbGlkSW5wdXQiLCJ2YWxpZGF0aW9uIiwicmVzb2x2ZUROUyIsIm1hdGNoIiwiJHNwaW5uZXIiLCJzZXRDdXN0b21WYWxpZGl0eSIsInJjX3N0cl9ociIsInZhbGlkSG9zdG5hbWUiLCJjYW5ub3RCZUVtcHR5IiwiaXNJbnB1dEVtcHR5IiwidmFsaWRhdGlvbkVtcHR5TWVzc2FnZSIsIm1pc3NpbmdfZmllbGQiLCJ2YWxpZGl0eSIsInBhdHRlcm5NaXNtYXRjaCIsInZhbGlkYXRpb25NZXNzYWdlIiwiaW52YWxpZF9maWVsZCIsInJhbmdlT3ZlcmZsb3ciLCJyYW5nZU92ZXJmbG93TWVzc2FnZSIsInJhbmdlVW5kZXJmbG93IiwicmFuZ2VVbmRlcmZsb3dNZXNzYWdlIiwiY2hlY2tWYWxpZGF0aW9uIiwiaXNWYWxpZCIsIm1lc3NhZ2VUb1Nob3ciLCIkZXJyb3IiLCJyZW1vdmUiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiZ2V0TW9kYWxJRCIsImlkeCIsInZhbGlkIiwiJGZlZWRiYWNrTGFiZWwiLCJzdWJtaXRCdXR0b24iLCJkYXRhVG9TZW5kIiwiYmVmb3JlU3VtYml0Iiwic3VibWl0T3B0aW9ucyIsImVuZHBvaW50IiwibWV0aG9kIiwiYWpheCIsImRhdGFUeXBlIiwiY29udGVudFR5cGUiLCJnZXQiLCJ0ZXh0U3RhdHVzIiwicmVzZXRBZnRlclN1Ym1pdCIsIm9uU3VibWl0U3VjY2VzcyIsImpxeGhyIiwiZXJyb3JUaHJvd24iLCJvblN1Ym1pdEVycm9yIiwicmVzZXRCdXR0b24iLCJkZWZhdWx0VmFsdWVzIiwic2VyaWFsaXplRm9ybUFycmF5Iiwic2VyaWFsaXplQXJyYXkiLCJ0eXBlcyIsIm5vX2Zvcm1hdHRpbmciLCJ1bSIsInN0ZXAiLCJkZWNpbWFsIiwic2NhbGVfdmFsdWVzIiwibnVtYmVyIiwiZnVsbF9udW1iZXIiLCJ0aG91c2FuZHNfc2VwIiwiYWJzb2x1dGVfdmFsdWUiLCJicHMiLCJzcGVlZCIsImZsb3dzIiwiYWxlcnRzIiwiYWxlcnRwcyIsImhpdHMiLCJoaXRzcyIsInBhY2tldHMiLCJtYXhfdmFsdWUiLCJnZXRVbml0TWVhc3VyZUxlbiIsInNwYWNlVmFsdWUiLCJzcGFjZVVtIiwibWF4IiwiZ2V0U2NhbGVGYWN0b3JJbmRleCIsInR5cGVPcHRpb25zIiwibWVhc3VyZXMiLCJnZXRGb3JtYXR0ZXIiLCJhYnNvbHV0ZVZhbHVlIiwic2NhbGVGYWN0b3JJbmRleCIsIm5lZ2F0aXZlVmFsdWUiLCJmb3JtYXR0ZXJVdGlscyIsImRhdGF0YWJsZUluaXRSZWZyZXNoUm93cyIsImNvbHVtbl9pZCIsInJlZnJlc2hfaW50ZXJ2YWwiLCJ0cmVuZF9jb2x1bW5zIiwiJGR0Iiwicm93cyIsInJlc3VsdHNldCIsIm9sZF90aW1lciIsIm9sZF9yZXEiLCJjbGVhckludGVydmFsIiwicmVtb3ZlRGF0YSIsImFib3J0IiwiaWRzIiwiaWRfdG9fcm93IiwiZGF0YV9pZCIsImN1c3RvbV9ob3N0cyIsImZpcnN0X2xvYWQiLCJfcHJvY2Vzc19yZXN1bHQiLCJyb3dfaWR4Iiwicm93X2h0bWwiLCJyb3dfdGRzIiwiY2VsbCIsIiRjZWxsIiwib2xkX3ZhbCIsInRyZW5kX3ZhbHVlX2Zvcm1hdHRlciIsIm5ld192YWwiLCJhcnJvd3MiLCJkcmF3VHJlbmQiLCJzZXRJbnRlcnZhbCIsImNhY2hlIiwiZGF0YXRhYmxlRm9yRWFjaFJvdyIsImNhbGxiYWNrcyIsInJvd19pIiwiYmluZCIsImRhdGF0YWJsZVJlbW92ZUVtcHR5Um93IiwiZGF0YXRhYmxlVW5kb0FkZFJvdyIsIm5ld19yb3ciLCJidF90b19lbmFibGUiLCJheXNVcGRhdGVGb3JtIiwiZHQiLCJkYXRhdGFibGVBZGREZWxldGVCdXR0b25DYWxsYmFjayIsImRhdGF0YWJsZUFkZEFjdGlvbkJ1dHRvbkNhbGxiYWNrIiwiZGF0YXRhYmxlQWRkRmlsdGVyQnV0dG9uQ2FsbGJhY2siLCJkYXRhdGFibGVBZGRMaW5rQnV0dG9uQ2FsbGJhY2siLCJkYXRhdGFibGVNYWtlU2VsZWN0VW5pcXVlIiwidHJfb2JqIiwiYWRkZWRfcm93c19wcmVmaXgiLCJkYXRhdGFibGVGb3JlYWNoU2VsZWN0T3RoZXJUaGFuIiwidGhpc19zZWxlY3QiLCJzZWxlY3Rvcl9mbiIsImNhbGxiYWNrIiwib3RoZXIiLCJkYXRhdGFibGVPcHRpb25DaGFuZ2VTdGF0dXMiLCJvcHRpb25fb2JqIiwiZW5hYmxlIiwic2VsZWN0X29iaiIsInNob3VsZF9yZXNldCIsImZpcnN0IiwiZGF0YXRhYmxlT25TZWxlY3RFbnRyeUNoYW5nZSIsImNoYW5nZV9jYWxsYmFjayIsIm9sZF92YWx1ZSIsIm5ld192YWx1ZSIsIm90aGVycyIsInBhcmFtc0V4dGVuZCIsIm9uX2NoYW5nZSIsIm5vb3AiLCJ0cmlnZ2VyIiwiZGF0YXRhYmxlT25BZGRTZWxlY3RFbnRyeSIsImRhdGF0YWJsZUlzTGFzdFBhZ2UiLCJsYXN0cGFnZSIsImhhc0NsYXNzIiwiZGF0YXRhYmxlR2V0Q29sdW1uIiwiaWRfa2V5IiwiaWRfdmFsdWUiLCJtb2RhbEhhbmRsZXIiLCJhcmdzIiwibG9hZGVkRGF0YSIsInNlbnQiLCJvbk1vZGFsUmVzZXQiLCJkZWZhdWx0RGF0YSIsIm1oIiwiZWJwZlV0aWxzIiwibnRvcEZvcm1hdHRlclV0aWxzIiwiZmlsdGVyc190b192YWxpZGF0ZSIsIm1ha2VVbmlxdWVWYWxpZGF0b3IiLCJpdGVtc19mdW5jdGlvbiIsImNtcF9uYW1lIiwibWVtYmVyVmFsdWVWYWxpZGF0b3IiLCJtZW1iZXIiLCJpc19tYWNfYWRkcmVzcyIsImlzX25ldHdvcmtfbWFzayIsIm1ha2VQYXNzd29yZFBhdHRlcm5WYWxpZGF0b3IiLCJwYXNzd29yZE1hdGNoVmFsaWRhdG9yIiwib3RoZXJfaW5wdXQiLCJub3QiLCJwb29sbmFtZVZhbGlkYXRvciIsInBhc3N3b3JkTWF0Y2hSZWNoZWNrIiwiaXRlbXMiLCJub3RfZW1wdHkiLCJob3N0T3JNYWNWYWxpZGF0b3IiLCJpcEFkZHJlc3NWYWxpZGF0b3IiLCJicGZWYWxpZGF0b3IiLCJmaWx0ZXJfZmllbGQiLCJzeW5jIiwiYWpheF9vYmoiLCJ0aW1lciIsInN1Ym1pdF9yZW1pbmQiLCJsYXN0X3ZhbCIsInNlbmRBamF4IiwiZmluYWxseV9jaGVjayIsIm50b3BuZ19zeW5jIiwiY29tcG9uZW50c19yZWFkeSIsInN1YnNjcmliZXJzIiwicmVhZHkiLCJjb21wb25lbnRfbmFtZSIsInJlc29sdmUiLCJvbl9yZWFkeSIsIlByb21pc2UiLCJyZWpldnQiLCJjb21wbGV0ZWQiLCJudG9wbmdfdXRpbGl0eSIsImdsb2JhbF9odHRwX2hlYWRlcnMiLCJpc19hcnJheSIsIkFycmF5IiwiaXNBcnJheSIsImlzX29iamVjdCIsImNsb25lIiwib2JqZWN0X3RvX2FycmF5IiwiZ2V0X3V0Y19zZWNvbmRzIiwidXRjX21zIiwibm93IiwiTnVtYmVyIiwiZ2V0X3RpbWVmcmFtZXNfZGljdCIsIm1pbiIsInRfZGF5IiwidF93ZWVrIiwidF9tb250aCIsInRfeWVhciIsImhvdXIiLCJkYXkiLCJzZXREYXRlIiwid2VlayIsIm1vbnRoIiwic2V0TW9udGgiLCJ5ZWFyIiwiZ2V0X3RpbWVmcmFtZV9mcm9tX3RpbWVmcmFtZV9pZCIsInRpbWVmcmFtZV9pZCIsInRpbWVmcmFtZXNfZGljdCIsImtleXMiLCJyb3VuZF90aW1lX2J5X3RpbWVmcmFtZV9pZCIsInRzIiwic2V0X2RlZmF1bHRfdGltZV9pbnRlcnZhbCIsInRpbWVfaW50ZXJ2YWxfaWQiLCJyb3VuZF90aW1lZnJhbWVfaWQiLCJlcG9jaF9iZWdpbiIsImdldF91cmxfZW50cnkiLCJlcG9jaF9lbmQiLCJub3dfcyIsInNlY29uZHNfaW5faW50ZXJ2YWwiLCJzZXRfa2V5X3RvX3VybCIsImNoZWNrX2FuZF9zZXRfZGVmYXVsdF90aW1lX2ludGVydmFsIiwiZl9jb25kaXRpb24iLCJnZXRfZXBvY2giLCJnZXRfdXJsX2Vwb2NoX2ludGVydmFsIiwiZnJvbV91dGNfc190b19zZXJ2ZXJfZGF0ZSIsInV0Y19zZWNvbmRzIiwidXRjIiwibG9jYWxfb2Zmc2V0IiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJzZXJ2ZXJfb2Zmc2V0IiwibW9tZW50IiwidHoiLCJudG9wX3pvbmVpbmZvIiwiX29mZnNldCIsImdldF9kYXRlX2Zvcm1hdCIsImlzX3JhbmdlX3BpY2tlciIsInJlc3RfcGFyYW1zIiwiZGF0ZV9mb3JtYXRfdXJsIiwiaHR0cF9yZXF1ZXN0IiwiZnJvbV91dGNfdG9fc2VydmVyX2RhdGVfZm9ybWF0IiwiY29weV9vYmplY3Rfa2V5cyIsInNvdXJjZV9vYmoiLCJkZXN0X29iaiIsInJlY3Vyc2l2ZV9vYmplY3QiLCJnZXRfY3ZlX2RldGFpbHNfdXJsIiwiY3ZlX2lkIiwic2Nhbl90eXBlIiwic2V0X2h0dHBfZ2xvYmFsc19oZWFkZXJzIiwiaGVhZGVycyIsImh0dHBfcG9zdF9yZXF1ZXN0IiwidGhyb3dfZXhjZXB0aW9uIiwibm90X3Vud3JhcCIsImpzb25fcmVzIiwiZG93bmxvYWRfVVJJIiwiZG93bmxvYWQiLCJnZXRfcmFuZG9tX3N0cmluZyIsInJhbmRvbSIsInN0cmluZ19oYXNoX2NvZGUiLCJjaHIiLCJjaGFyQ29kZUF0IiwibW9kIiwibnRvcG5nX3N0YXR1c19tYW5hZ2VyIiwiZ2xvYmFsX3N0YXR1cyIsIm5vdGlmeV9zdWJzY3JpYmVycyIsInNraXBfaWQiLCJmX29uX2NoYW5nZSIsImdldF9zdGF0dXMiLCJub3RfY2xvbmUiLCJ1cGRhdGVfc3Vic2NyaWJlcnMiLCJvbl9zdGF0dXNfY2hhbmdlIiwiZ2V0X2luaXRfbm90aWZ5IiwicmVwbGFjZV9zdGF0dXMiLCJyZWxwbGFjZV9nbG9iYWxfc3RhdHVzIiwiYWRkX29ial90b19zdGF0dXMiLCJuZXdfc3RhdHVzIiwiYWRkX3ZhbHVlX3RvX3N0YXR1cyIsIm50b3BuZ19wYXJhbXNfdXJsX3NlcmlhbGl6ZXIiLCJjdXN0b21fcGFyYW1zX3NlcmlhbGl6ZXIiLCJnZXRfdXJsX3BhcmFtcyIsImdldF91cmxfc2VhcmNoX3BhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsImdldF91cmxfZW50cmllcyIsInBhcmFtX25hbWUiLCJnZXRfdXJsX29iamVjdCIsIm9wZW5fbmV3X3dpbmRvdyIsIm9wZW4iLCJyZWxvYWRfdXJsIiwicmVsb2FkIiwicHVzaFN0YXRlIiwicmVwbGFjZV91cmwiLCJ1cmxfcGFyYW1zIiwicmVwbGFjZV91cmxfYW5kX3JlbG9hZCIsInNlcmlhbGl6ZV9wYXJhbSIsImVuY29kZVVSSUNvbXBvbmVudCIsInNldF9jdXN0b21fa2V5X3NlcmlhbGl6ZXIiLCJmX2dldF91cmxfcGFyYW0iLCJvYmpfdG9fdXJsX3BhcmFtcyIsImRlZmF1bHRfc2VyaWFsaXplciIsInNlcmlhbGl6ZXIiLCJkZWxldGVfcGFyYW1zIiwicGFyYW1zX2tleSIsInNlYXJjaF9wYXJhbXMiLCJkZWxldGUiLCJkZWxldGVfa2V5X2Zyb21fdXJsIiwiYWRkX29ial90b191cmwiLCJ1cmxfcGFyYW1zX29iaiIsIm5ld191cmxfcGFyYW1zIiwibmV3X2VudHJpZXMiLCJuZXdfdXJsIiwibnRvcG5nX2V2ZW50cyIsIkVQT0NIX0NIQU5HRSIsIkZJTFRFUlNfQ0hBTkdFIiwibnRvcG5nX2V2ZW50c19jb21wYXJlIiwib2xkX3N0YXR1cyIsImZpbHRlcnMiLCJzb21lIiwiZl9uZXciLCJmX29sZCIsIm50b3BuZ19jdXN0b21fZXZlbnRzIiwiU0hPV19NT0RBTF9GSUxURVJTIiwiTU9EQUxfRklMVEVSU19BUFBMWSIsIlNIT1dfR0xPQkFMX0FMRVJUX0lORk8iLCJWSVNfREFUQV9MT0FERUQiLCJDSEFOR0VfUEFHRV9USVRMRSIsIkRBVEFUQUJMRV9MT0FERUQiLCJHRVRfSU5URVJGQUNFX0ZBVEEiLCJDT01QT05FTlRfRVBPQ0hfSU5URVJWQUxfQ0hBTkdFIiwibnRvcG5nX2V2ZW50c19tYW5hZ2VyIiwiZXZlbnRzX21hbmFnZXJfaWQiLCJldmVudHNfc3Vic2NyaWJlcnMiLCJnZXRfZXZlbnRfZm9yX3NpbmdsZV9kZXN0IiwiZGVzdF9pZCIsImV2ZW50X25hbWUiLCJmX2NvbXBhcmUiLCJlbWl0Iiwib25fZXZlbnQiLCJmX29uX2V2ZW50IiwiaXNfc2luZ2xlX2Rlc3RfZXZlbnQiLCJlbWl0X2N1c3RvbV9ldmVudCIsIm9uX2N1c3RvbV9ldmVudCIsImVtaXRfZXZlbnQiLCJvbl9ldmVudF9jaGFuZ2UiLCJQaWVDaGFydCIsInVwZGF0ZV91cmwiLCJ1bml0cyIsInJlZnJlc2giLCJzdHJlYWtlckRhdGFBZGRlZCIsInBhdGhzIiwibGluZXMiLCJ2YWx1ZUxhYmVscyIsIm5hbWVMYWJlbHMiLCJwaWVEYXRhIiwib2xkUGllRGF0YSIsImZpbHRlcmVkUGllRGF0YSIsImgiLCJpciIsInRleHRPZmZzZXQiLCJ0d2VlbkR1cmF0aW9uIiwiciIsImRvbnV0IiwicGllIiwiY2F0ZWdvcnkyMCIsImFyYyIsInN0YXJ0QW5nbGUiLCJlbmRBbmdsZSIsImlubmVyUmFkaXVzIiwib3V0ZXJSYWRpdXMiLCJ2aXMiLCJhcmNfZ3JvdXAiLCJsYWJlbF9ncm91cCIsImNlbnRlcl9ncm91cCIsInRvdGFsVW5pdHMiLCJ0b3RhbFZhbHVlIiwiY3JlYXRlX3BpZV9jaGFydCIsImNvbXBhcmVfYnlfbGFiZWwiLCJwaWVUd2VlbiIsInMwIiwiZTAiLCJpbnRlcnBvbGF0ZSIsInJlbW92ZVBpZVR3ZWVuIiwiUEkiLCJ0ZXh0VHdlZW4iLCJpbnRlcnBvbGF0ZU51bWJlciIsImNvcyIsInNpbiIsInVwZGF0ZSIsImNvbnRlbnQiLCJwYXJzZWRfY29udGVudCIsInBhcnNlSlNPTiIsInNvcnQiLCJ0b3RhbE9jdGV0cyIsImZpbHRlckRhdGEiLCJpbmRleCIsInRyYW5zaXRpb24iLCJkdXJhdGlvbiIsImF0dHJUd2VlbiIsImV4aXQiLCJ1cGRhdGVfcGllX2NoYXJ0Iiwic2V0VXJsUGFyYW1zIiwiZm9yY2VVcGRhdGUiLCJzdG9wSW50ZXJ2YWwiLCJzdGFydEludGVydmFsIiwicF9waWVJbnRlcnZhbCIsInBpZUludGVydmFsIiwiREVGSU5FRF9XSURHRVRTIiwiREVGSU5FRF9FVkVOVFMiLCJkYl9hbmFseXplIiwiZmlsdGVyaW5nX2xhYmVscyIsIm9wZXJhdG9yIiwibm9uZSIsInN0YW5kYXJkIiwiREVGSU5FRF9UT09MVElQIiwiZm9ybWF0X2J5dGVzIiwiYnl0ZXNUb1NpemUiLCJmb3JtYXRfcGt0cyIsImZvcm1hdFBhY2tldHMiLCJmb3JtYXRfdmFsdWUiLCJmb3JtYXRWYWx1ZSIsImZvcm1hdF9tdWx0aXBsZV9kYXRlIiwiZm9ybWF0X2xhYmVsX2Zyb21feHkiLCJmb3JtYXRfbGFiZWxfZnJvbV94bmFtZSIsIkRFRkFVTFRfRk9STUFUVEVSIiwiV2lkZ2V0VXRpbHMiLCJ3aWRnZXQiLCJ3aWRnZXROYW1lIiwiV2lkZ2V0IiwiZGF0YXNvdXJjZSIsInVwZGF0ZVRpbWUiLCJhZGRpdGlvbmFsUGFyYW1zIiwiX2ZldGNoZWREYXRhIiwiX3VwZGF0ZVRpbWUiLCJfZGF0YXNvdXJjZSIsIl9hZGRpdGlvbmFsUGFyYW1zIiwicmVnaXN0ZXJXaWRnZXQiLCJfZmV0Y2hEYXRhIiwiZGF0YXNvdXJjZVBhcmFtcyIsImRlc3Ryb3kiLCJ1Iiwib3JpZ2luIiwicmVxIiwiZml4U3ViTWVudVBvc2l0aW9uIiwiJHN1Ym1lbnUiLCIkaG92ZXJCdXR0b24iLCJkaXN0RnJvbUFib3ZlIiwidG9wIiwic3VibWVudUhlaWdodCIsImRvY3VtZW50SGVpZ2h0IiwiY3VycmVudFN1Ym1lbnVIZWlnaHQiLCJvdXRlckhlaWdodCIsInNjcm9sbFRvcCIsInRvZ2dsZVNpZGViYXIiLCIkbGF5ZXIiLCJtb3VzZWVudGVyIiwic3VibWVudSIsIm1vdXNlbGVhdmUiLCIkY3VycmVudFN1Ym1lbnUiLCJudG9wQ2hhcnRBcGV4IiwiX2RlZmF1bHRfQkFTRV9DaGFydE9wdGlvbnMiLCJjaGFydCIsInRvb2xiYXIiLCJ0b29scyIsInpvb21vdXQiLCJ6b29taW4iLCJ6b29tIiwic2VsZWN0aW9uIiwicGFuIiwiZXZlbnRzIiwibGFiZWxzIiwiY29sb3JzIiwiZm9udFNpemUiLCJmb250V2VpZ2h0IiwiY3NzQ2xhc3MiLCJyb3RhdGUiLCJvZmZzZXRZIiwib2Zmc2V0WCIsImdyaWQiLCJsZWdlbmQiLCJfc2V0WFRpbWVGb3JtYXR0ZXIiLCJjaGFydE9wdGlvbnMiLCJmb3JtYXR0ZXIiLCJfZGVmYXVsdF9UU19DT0xVTU5fQ2hhcnRPcHRpb25zIiwic3RhY2tlZCIsImRhdGV0aW1lVVRDIiwiYXhpc1RpY2tzIiwiYXhpc0JvcmRlciIsImNvbnZlcnRlZENhdFRvTnVtZXJpYyIsImRhdGFMYWJlbHMiLCJzdHJva2UiLCJjdXJ2ZSIsImZpbGwiLCJfZGVmYXVsdF9UU19TVEFDS0VEX0NoYXJ0T3B0aW9ucyIsIl9kZWZhdWx0X1RTX1BPTEFSX0NoYXJ0T3B0aW9ucyIsIlRTX1NUQUNLRURfQ2hhcnRPcHRpb25zIiwib3B0cyIsIl9kZWZhdWx0X1RTX0RPTlVUX0NoYXJ0T3B0aW9ucyIsIkZvcm1hdHRlclV0aWxzIiwibm9EYXRhIiwiZm9udEZhbWlseSIsIl9kZWZhdWx0X1RTX1JBRElBTEJBUl9DaGFydE9wdGlvbnMiLCJwbG90T3B0aW9ucyIsInJhZGlhbEJhciIsImhvbGxvdyIsIm1hcmdpbiIsImJhY2tncm91bmQiLCJpbWFnZSIsImZsb2F0aW5nIiwidXNlU2VyaWVzQ29sb3JzIiwibWFya2VycyIsInNlcmllc05hbWUiLCJnbG9iYWxzIiwiaXRlbU1hcmdpbiIsInZlcnRpY2FsIiwicmVzcG9uc2l2ZSIsImJyZWFrcG9pbnQiLCJfZGVmYXVsdF9UU19QSUVfQ2hhcnRPcHRpb25zIiwiX2RlZmF1bHRfVFNfTElORV9DaGFydE9wdGlvbnMiLCJzaGFyZWQiLCJfZGVmYXVsdF9UU19CVUJCTEVfQ2hhcnRPcHRpb25zIiwiVFNfQlVCQkxFX0NoYXJ0T3B0aW9ucyIsImF1dG9TY2FsZVlheGlzIiwiZGF0YVBvaW50U2VsZWN0aW9uIiwiZm9yY2VOaWNlU2NhbGUiLCJjdXN0b20iLCJ0eXBlQ2hhcnQiLCJUU19MSU5FIiwiVFNfU1RBQ0tFRCIsIlRTX0NPTFVNTiIsIlBJRSIsIkRPTlVUIiwiUkFESUFMQkFSIiwiUkFEQVIiLCJCVUJCTEUiLCJCQVNFIiwibmV3Q2hhcnQiLCJfY2hhcnQiLCJfY2hhcnRPcHRpb25zIiwiUE9MQVIiLCJzZXRZYXhpc0Zvcm1hdHRlciIsImNoYXJ0Rm9ybWF0dGVyIiwiZHJhd0NoYXJ0IiwiaHRtbEVsZW1lbnQiLCJBcGV4Q2hhcnRzIiwicmVuZGVyIiwidG9fZGF0YV91cmkiLCJkYXRhVVJJIiwiaW1nVVJJIiwiZGVzdHJveUNoYXJ0IiwidXBkYXRlQ2hhcnQiLCJ1cGRhdGVPcHRpb25zIiwidXBkYXRlU2VyaWVzIiwicmVnaXN0ZXJFdmVudCIsImV2ZW50TmFtZSIsIkRhdGFUYWJsZUhhbmRsZXJzIiwiaGFuZGxlcnNJZERpY3QiLCJhZGRIYW5kbGVyIiwiaGFuZGxlcnMiLCJoYW5kbGVySWQiLCJvbkNsaWNrIiwiZ2V0SGFuZGxlciIsInJvd0lkIiwiZGVsZXRlSGFuZGxlcnNCeUlkIiwiRGF0YVRhYmxlVXRpbHMiLCJkdEJ1dHRvbnMiLCJkb20iLCJwYWdpbmdUeXBlIiwibGVuZ3RoTWVudSIsImxhbmd1YWdlIiwic2NyaXB0X3NlYXJjaCIsInBhZ2luYXRlIiwicHJldmlvdXMiLCJuZXh0Iiwic2F2ZVN0YXRlIiwiYnV0dG9ucyIsImJ1dHRvbiIsImNsYXNzTmFtZSIsImNvbnRhaW5lciIsImhhbmRsZXIiLCJhY3Rpb25zIiwib25jbGljayIsImNsYXNzIiwiZXh0ZXJuYWwiLCJpY29uIiwiZGF0YVNyYyIsImV4dGVuc2lvbiIsImhhc0ZpbHRlcnMiLCJzdGF0ZVNhdmVDYWxsYmFjayIsInNldHRpbmdzIiwic0luc3RhbmNlIiwic3RhdGVMb2FkQ2FsbGJhY2siLCJzdGF0ZVNhdmVQYXJhbXMiLCJhY3RpdmVGaWx0ZXIiLCJwYWRaZXJvZXMiLCJwYWRTdGFydCIsIm1pbnMiLCJ1cmxQYXJhbXMiLCJoYXMiLCJwYXJhbU5hbWUiLCJkYXRhSUQiLCJkYXRhdGFibGVJbnN0YW5jZSIsInRvQXJyYXkiLCJjYW5jZWxJZiIsIiRtb2RhbCIsInJlZmVyZXIiLCJ0YWJsZUFQSSIsInRvZ2dsZUNhbGxiYWNrIiwiY29sIiwidGFibGVJRCIsIm5vZGUiLCJfbG9hZENvbHVtbnNWaXNpYmlsaXR5IiwiZmV0Y2hlZERhdGEiLCJzYXZlZENvbHVtbnMiLCJpZ25vcmVkQ29sdW1ucyIsIiRkYXRhdGFibGVXcmFwcGVyIiwiblRhYmxlV3JhcHBlciIsImV2ZXJ5IiwiY29sdW1uIiwiaGVhZGVyIiwiJGJ0bkdyb3VwIiwiJGRyb3Bkb3duTWVudSIsIiRjaGVja2JveGVzIiwidG9nZ2xlZCIsImluZGV4T2YiLCIkY2hlY2tib3giLCIkd3JhcHBlciIsImhpZGRlbkNvbHVtbnMiLCJfX0NTUkZfREFUQVRBQkxFX18iLCJwcmVwZW5kIiwiRGF0YVRhYmxlUmVuZGVycyIsInNldmVyaXR5IiwiZm9ybWF0VmFsdWVMYWJlbCIsImFsZXJ0X2lkIiwiemVyb19pc19udWxsIiwic3BhbiIsImZpbnQiLCJ0YWdfbGFiZWwiLCJpc19zbm1wX2lwIiwiZGVzY3IiLCJzaG9ydGVuX2Rlc2NyIiwidG90YWxfYnl0ZXMiLCJ0b3RhbF9wYWNrZXRzIiwiYnl0ZXNUb1ZvbHVtZSIsImZpbHRlcml6ZSIsImh0bWxfcmVmIiwicmVmZXJlbmNlIiwiZmlsdGVyaXplXzIiLCJsYWJlbF9sb25nIiwiaG9zdEtleSIsImhvc3RWYWx1ZSIsInJvbGUiLCJyb2xlX2NsaV9zcnYiLCJmbG93IiwidmFsdWVWbGFuIiwibGFiZWxWbGFuIiwidGl0bGVWbGFuIiwidmxhbiIsImFjdGl2ZV9yZWYiLCJhY3RpdmVfdXJsIiwiY2xpTGFiZWwiLCJjbGlfaXAiLCJmaWx0ZXJpemVWbGFuIiwiY2xpRmxhZ0xhYmVsIiwiY2xpUG9ydExhYmVsIiwiY2xpX3BvcnQiLCJjbGlCbGFja2xpc3RlZCIsImJsYWNrbGlzdGVkIiwic3J2TGFiZWwiLCJzcnZfaXAiLCJzcnZQb3J0TGFiZWwiLCJzcnZfcG9ydCIsInNydkZsYWdMYWJlbCIsInNydkJsYWNrbGlzdGVkIiwiY2xpSWNvbnMiLCJzcnZJY29ucyIsImNsaV9yb2xlIiwic3J2X3JvbGUiLCJmdWxsbmFtZSIsImNlbGxEYXRhIiwicm93RGF0YSIsInJvd0luZGV4IiwiY29sSW5kZXgiLCJoaWdobGlnaHQiLCJjcmVhdGUiLCJkb19waWUiLCJEYXRhVGFibGVGaWx0ZXJzTWVudSIsImZpbHRlck1lbnVLZXkiLCJmaWx0ZXJUaXRsZSIsImNvbHVtbkluZGV4IiwiZXh0cmFBdHRyaWJ1dGVzIiwicmVtb3ZlQWxsRW50cnkiLCJjYWxsYmFja0Z1bmN0aW9uIiwicmF3RmlsdGVycyIsInByZXZlbnRVcGRhdGUiLCJjdXJyZW50RmlsdGVyU2VsZWN0ZWQiLCJzZWxlY3RlZEZpbHRlciIsImluaXQiLCJfcmVuZGVyIiwiX3VwZGF0ZSIsIl9jb3VudEVudHJpZXMiLCJyZWdleCIsInJlZyIsImNlbGxWYWx1ZSIsIl9jcmVhdGVNZW51RW50cnkiLCIkZW50cnkiLCJjdXJyZW50bHlfYWN0aXZlIiwiJGRyb3Bkb3duIiwibmV3Q29udGVudCIsImNvdW50YWJsZSIsIiRjb3VudGVyIiwibmV3VXJsUGFyYW1zIiwiZHJhdyIsIl9jcmVhdGVGaWx0ZXJzIiwiZmlsdGVyc0NyZWF0ZWQiLCIkZmlsdGVyIiwiJG5vZGUiLCJpbnNlcnRCZWZvcmUiLCIkZHJvcGRvd25Db250YWluZXIiLCIkZHJvcGRvd25CdXR0b24iLCIkZHJvcGRvd25UaXRsZSIsIiRtZW51Q29udGFpbmVyIiwiXyIsImFsbEZpbHRlciIsIl9nZW5lcmF0ZUFsbEZpbHRlciIsIl9zZWxlY3RGaWx0ZXJGcm9tU3RhdGUiLCJmaWx0ZXJLZXkiLCJsb2FkZWQiLCJzYXZlIiwiYWxsIiwiQ2hhcnRXaWRnZXQiLCJzdXBlciIsIl9jaGFydFR5cGUiLCJfJGh0bWxDaGFydCIsInF1ZXJ5U2VsZWN0b3IiLCJnZXRXaWRnZXRCeU5hbWUiLCJ1cGRhdGVkT3B0aW9ucyIsIl9nZW5lcmF0ZUNvbmZpZyIsImVuYWJsZWRPblNlcmllcyIsInoiLCJ6YXhpcyIsIm9uSXRlbUNsaWNrIiwidG9nZ2xlRGF0YVNlcmllcyIsImJhciIsImJvcmRlclJhZGl1cyIsImhvcml6b250YWwiLCJhbGlnbiIsInZlcnRpY2FsQWxpZ24iLCJhcGV4IiwiYXNzaWduIiwiX2J1aWxkVG9vbHRpcCIsImF4aXMiLCJfYnVpbGRBeGlzRm9ybWF0dGVyIiwiYXhpc05hbWUiLCJudG9wX3V0aWxzX2Zvcm1hdHRlciIsInNlbGVjdGVkRm9ybWF0dGVyIiwiX2J1aWxkRGF0YUxhYmVscyIsImRhdGFMYWJlbHNPcHRzIiwiX2J1aWxkQ29uZmlnIiwiYWRkaXRpb25hbHMiLCJhZGRpdGlvbmFsIiwiX2luaXRpYWxpemVDaGFydCIsIl9jaGFydENvbmZpZyIsInVwZGF0ZUJ5VXJsIiwiY2F0ZWdvcmllcyIsImRlc3Ryb3lBbmRVcGRhdGUiLCJibG9nTm90aWZjYXRpb25DbGljayIsIm1ldGFLZXkiLCJjdHJsS2V5Iiwid2hpY2giLCJibG9nX25vdGlmaWNhdGlvbl9pZCIsIl9fQkxPR19OT1RJRklDQVRJT05fQ1NSRl9fIiwiRSIsIlAiLCJsIiwiTSIsImMiLCJmIiwiUiIsIkEiLCJJIiwiRiIsImciLCJfX3ZfaXNSZWYiLCJyZWR1Y2UiLCJPIiwiTCIsInYiLCJDIiwic3RhcnRzV2l0aCIsInNwbGljZSIsIlQiLCJOIiwiQiIsIlYiLCJqIiwiVSIsIkQiLCJIIiwiVyIsIksiLCJHIiwicSIsIkoiLCJZIiwiWiIsIlEiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJYIiwiZWUiLCJ0ZSIsIm5lIiwiYWN0aXZlIiwiZWZmZWN0cyIsImNsZWFudXBzIiwic2NvcGVzIiwicnVuIiwic3RvcCIsInBvcCIsIm9lIiwicmUiLCJzZSIsImllIiwibGUiLCJTZXQiLCJjZSIsImZlIiwiYWUiLCJ1ZSIsIldlYWtNYXAiLCJkZSIsInBlIiwiaGUiLCJTeW1ib2wiLCJtZSIsImdlIiwic2NoZWR1bGVyIiwiZGVwcyIsImJlIiwidmUiLCJkZWZlclN0b3AiLCJvblN0b3AiLCJ5ZSIsImVmZmVjdCIsInNjb3BlIiwibGF6eSIsIl9lIiwiU2UiLCJ4ZSIsIkNlIiwid2UiLCJNYXAiLCJrZSIsImFkZCIsIlRlIiwiTmUiLCJjb21wdXRlZCIsIkVlIiwiYWxsb3dSZWN1cnNlIiwiJGUiLCJPZSIsImdldE93blByb3BlcnR5TmFtZXMiLCJSZSIsIkllIiwiRmUiLCJQZSIsIkFlIiwiTWUiLCJrdCIsImFwcGx5IiwiVmUiLCJodCIsImZ0IiwicHQiLCJSZWZsZWN0IiwiUnQiLCJ5dCIsImd0IiwiQmUiLCJ4dCIsIkN0IiwiTGUiLCJkZWxldGVQcm9wZXJ0eSIsIm93bktleXMiLCJqZSIsIlVlIiwiRGUiLCJIZSIsIldlIiwiZ2V0UHJvdG90eXBlT2YiLCJ6ZSIsIl9fdl9yYXciLCJFdCIsIk50IiwiS2UiLCJHZSIsInFlIiwiSmUiLCJZZSIsIlplIiwiY2xlYXIiLCJRZSIsIlhlIiwiaXRlcmF0b3IiLCJldCIsIm50Iiwib3QiLCJydCIsInN0IiwidHQiLCJpdCIsImx0IiwiY3QiLCJhdCIsInV0IiwiYnQiLCJ2dCIsIl90IiwiX192X2lzUmVhY3RpdmUiLCJfX3Zfc2tpcCIsImlzRXh0ZW5zaWJsZSIsIm10IiwiUHJveHkiLCJTdCIsIl9fdl9pc1JlYWRvbmx5IiwiX192X2lzU2hhbGxvdyIsInd0IiwiVHQiLCIkdCIsImRlcCIsIk90IiwiRnQiLCJBdCIsIlB0IiwiTXQiLCJfcmF3VmFsdWUiLCJfdmFsdWUiLCJWdCIsIkl0IiwiQnQiLCJMdCIsImp0IiwiX2dldCIsIl9zZXQiLCJVdCIsIkR0IiwiV3QiLCJIdCIsIl9vYmplY3QiLCJfa2V5IiwiX2RlZmF1bHRWYWx1ZSIsInp0IiwiX3NldHRlciIsIl9kaXJ0eSIsIl9jYWNoZWFibGUiLCJLdCIsIkd0IiwiY29tcG9uZW50IiwiYXBwQ29udGV4dCIsIndhcm5IYW5kbGVyIiwidm5vZGUiLCJyZWN1cnNlQ291bnQiLCJZdCIsInByb3h5IiwiTHMiLCJwcm9wcyIsInF0IiwiSnQiLCJRdCIsIlp0IiwiZWMiLCJlcnJvckhhbmRsZXIiLCJYdCIsImVuIiwidG4iLCJubiIsInJuIiwic24iLCJsbiIsImNuIiwiYW4iLCJ1biIsInBuIiwiZG4iLCJobiIsImJuIiwibW4iLCJTbiIsImduIiwidm4iLCJ5biIsIl9uIiwieG4iLCJDbiIsInduIiwiSFRNTEVsZW1lbnQiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJfX1ZVRV9ERVZUT09MU19IT09LX1JFUExBWV9fIiwia24iLCJpc1VubW91bnRlZCIsImVtaXR0ZWQiLCJUbiIsImVtaXRzQ2FjaGUiLCJlbWl0cyIsIm1peGlucyIsImV4dGVuZHMiLCJObiIsIkVuIiwiJG4iLCJPbiIsIl9fc2NvcGVJZCIsIlJuIiwiRm4iLCJQbiIsIkFuIiwiX2QiLCJYciIsIl9jIiwiTW4iLCJ3aXRoUHJveHkiLCJwcm9wc09wdGlvbnMiLCJzbG90cyIsImF0dHJzIiwicmVuZGVyQ2FjaGUiLCJzZXR1cFN0YXRlIiwiY3R4IiwiaW5oZXJpdEF0dHJzIiwic2hhcGVGbGFnIiwiZ3MiLCJWbiIsInFyIiwidXMiLCJLciIsIkluIiwiZnMiLCJkaXJzIiwiY29uY2F0IiwiQm4iLCJMbiIsInN1YlRyZWUiLCJqbiIsIl9faXNTdXNwZW5zZSIsIlVuIiwicHJvY2VzcyIsInN1c3BlbnNlIiwiSG4iLCJwZW5kaW5nQnJhbmNoIiwic3NDb250ZW50IiwiRG4iLCJzc0ZhbGxiYWNrIiwiS24iLCJhY3RpdmVCcmFuY2giLCJpc0luRmFsbGJhY2siLCJpc0h5ZHJhdGluZyIsInJzIiwiaGlkZGVuQ29udGFpbmVyIiwicGVuZGluZ0lkIiwidGltZW91dCIsImZhbGxiYWNrIiwiaHlkcmF0ZSIsInBhcmVudE5vZGUiLCJub3JtYWxpemUiLCJjaGlsZHJlbiIsIlduIiwiZGVmYXVsdCIsInBhcmVudENvbXBvbmVudCIsImlzU1ZHIiwiYW5jaG9yIiwibW9kZSIsImFmdGVyTGVhdmUiLCJtb3ZlIiwicmVnaXN0ZXJEZXAiLCJhc3luY0RlcCIsInN1c3BlbnNlSWQiLCJhc3luY1Jlc29sdmVkIiwiUnMiLCJ1bm1vdW50IiwiUXIiLCJZciIsIkpyIiwiWnIiLCJvcyIsImR5bmFtaWNDaGlsZHJlbiIsInpuIiwiR24iLCJDcyIsInByb3ZpZGVzIiwicW4iLCJhcmd1bWVudHMiLCJKbiIsImVvIiwiWW4iLCJmbHVzaCIsIlpuIiwiUW4iLCJYbiIsImltbWVkaWF0ZSIsImRlZXAiLCJvbyIsIlByIiwidG8iLCJubyIsImtzIiwiVHMiLCJybyIsImlzTW91bnRlZCIsImlzTGVhdmluZyIsImlzVW5tb3VudGluZyIsImxlYXZpbmdWTm9kZXMiLCJPbyIsIlBvIiwic28iLCJGdW5jdGlvbiIsImlvIiwiYXBwZWFyIiwiQm9vbGVhbiIsInBlcnNpc3RlZCIsIm9uQmVmb3JlRW50ZXIiLCJvbkVudGVyIiwib25BZnRlckVudGVyIiwib25FbnRlckNhbmNlbGxlZCIsIm9uQmVmb3JlTGVhdmUiLCJvbkxlYXZlIiwib25BZnRlckxlYXZlIiwib25MZWF2ZUNhbmNlbGxlZCIsIm9uQmVmb3JlQXBwZWFyIiwib25BcHBlYXIiLCJvbkFmdGVyQXBwZWFyIiwib25BcHBlYXJDYW5jZWxsZWQiLCJzZXR1cCIsIndzIiwiZm8iLCJhbyIsInVvIiwiY28iLCJwbyIsImdldFRyYW5zaXRpb25LZXkiLCJkZWxheUxlYXZlIiwibG8iLCJfbGVhdmVDYiIsImRlbGF5ZWRMZWF2ZSIsImJlZm9yZUVudGVyIiwiX2VudGVyQ2IiLCJsZWF2ZSIsInlvIiwiV3IiLCJwYXRjaEZsYWciLCJobyIsIm1vIiwiX19hc3luY0xvYWRlciIsImdvIiwibG9hZGVyIiwibG9hZGluZ0NvbXBvbmVudCIsImVycm9yQ29tcG9uZW50Iiwic3VzcGVuc2libGUiLCJvbkVycm9yIiwiX19lc01vZHVsZSIsInRvU3RyaW5nVGFnIiwiX19hc3luY1Jlc29sdmVkIiwidm8iLCJyZWYiLCJfX2lzS2VlcEFsaXZlIiwiX28iLCJpbmNsdWRlIiwiZXhjbHVkZSIsInJlbmRlcmVyIiwia28iLCJCcyIsImFjdGl2YXRlIiwic2xvdFNjb3BlSWRzIiwiaXNEZWFjdGl2YXRlZCIsIm9uVm5vZGVNb3VudGVkIiwiYnMiLCJkZWFjdGl2YXRlIiwiZGEiLCJvblZub2RlVW5tb3VudGVkIiwiYm8iLCJUbyIsIkZvIiwiU28iLCJDbyIsInhvIiwiX193ZGMiLCJObyIsIndvIiwiQW8iLCJfX3dlaCIsInVuc2hpZnQiLCJFbyIsIk9zIiwiJG8iLCJSbyIsIk1vIiwiVm8iLCJJbyIsIkJvIiwiTG8iLCJWcyIsIm1vdW50ZWQiLCJ1cGRhdGVkIiwiZGlyIiwiaW5zdGFuY2UiLCJvbGRWYWx1ZSIsImFyZyIsIm1vZGlmaWVycyIsImpvIiwiVW8iLCJ6byIsIkRvIiwiSG8iLCJXbyIsIktvIiwiR28iLCJmcm9tIiwicW8iLCJKbyIsImlzQ0UiLCJZbyIsIm5zIiwic2NvcGVJZCIsIlpvIiwiUW8iLCJOcyIsIlhvIiwiJGVsIiwiJGRhdGEiLCIkcHJvcHMiLCIkYXR0cnMiLCIkc2xvdHMiLCIkcmVmcyIsInJlZnMiLCIkcGFyZW50IiwiJHJvb3QiLCJyb290IiwiJGVtaXQiLCIkb3B0aW9ucyIsIiRmb3JjZVVwZGF0ZSIsIiRuZXh0VGljayIsIiR3YXRjaCIsImVyIiwiYWNjZXNzQ2FjaGUiLCJuciIsIl9fY3NzTW9kdWxlcyIsImdsb2JhbFByb3BlcnRpZXMiLCJ0ciIsInVuc2NvcGFibGVzIiwicnIiLCJzciIsIm9wdGlvbnNDYWNoZSIsIm9wdGlvbk1lcmdlU3RyYXRlZ2llcyIsImxyIiwiY3IiLCJhciIsImZyIiwibWV0aG9kcyIsImJlZm9yZUNyZWF0ZSIsInByIiwiY3JlYXRlZCIsImJlZm9yZU1vdW50IiwiYmVmb3JlVXBkYXRlIiwiYmVmb3JlRGVzdHJveSIsImJlZm9yZVVubW91bnQiLCJkZXN0cm95ZWQiLCJ1bm1vdW50ZWQiLCJhY3RpdmF0ZWQiLCJkZWFjdGl2YXRlZCIsImVycm9yQ2FwdHVyZWQiLCJzZXJ2ZXJQcmVmZXRjaCIsImNvbXBvbmVudHMiLCJkaXJlY3RpdmVzIiwid2F0Y2giLCJwcm92aWRlIiwiaW5qZWN0IiwidXIiLCJlbWl0c09wdGlvbnMiLCJociIsInByb3BzRGVmYXVsdHMiLCJtciIsInByb3BzQ2FjaGUiLCJnciIsIl9yIiwidnIiLCJ5ciIsImJyIiwiU3IiLCJ4ciIsIkNyIiwiX2N0eCIsIndyIiwia3IiLCJhcHAiLCJpc05hdGl2ZVRhZyIsInBlcmZvcm1hbmNlIiwiY29tcGlsZXJPcHRpb25zIiwiVHIiLCJOciIsIl91aWQiLCJfY29tcG9uZW50IiwiX3Byb3BzIiwiX2NvbnRhaW5lciIsIl9jb250ZXh0IiwiX2luc3RhbmNlIiwidmVyc2lvbiIsIm9pIiwidXNlIiwiaW5zdGFsbCIsIm1peGluIiwiZGlyZWN0aXZlIiwibW91bnQiLCJfX3Z1ZV9hcHBfXyIsIkVyIiwiJHIiLCJPciIsIm5hbWVzcGFjZVVSSSIsInRhZ05hbWUiLCJSciIsIm5vZGVUeXBlIiwiRnIiLCJwYXRjaFByb3AiLCJjcmVhdGVUZXh0IiwibmV4dFNpYmxpbmciLCJpbnNlcnQiLCJjcmVhdGVDb21tZW50IiwienIiLCJHciIsInN0YXRpY0NvdW50Iiwib3V0ZXJIVE1MIiwicHJldmlvdXNTaWJsaW5nIiwibGFzdENoaWxkIiwiZHMiLCJlbmRzV2l0aCIsIm9uVm5vZGVCZWZvcmVNb3VudCIsImZpcnN0Q2hpbGQiLCJoYXNDaGlsZE5vZGVzIiwiX3Zub2RlIiwiQXIiLCJWciIsIk1yIiwiZ2xvYmFsVGhpcyIsImdsb2JhbCIsIl9fVlVFX18iLCJzZXRUZXh0Iiwic2V0RWxlbWVudFRleHQiLCJzZXRTY29wZUlkIiwiY2xvbmVOb2RlIiwiaW5zZXJ0U3RhdGljQ29udGVudCIsInZzIiwiSXIiLCJvblZub2RlQmVmb3JlVXBkYXRlIiwiZHluYW1pY1Byb3BzIiwib25Wbm9kZVVwZGF0ZWQiLCJCciIsIlNzIiwidWlkIiwieHMiLCJleHBvc2VkIiwiZXhwb3NlUHJveHkiLCJzZXR1cENvbnRleHQiLCJiYyIsImJtIiwiYnUiLCJidW0iLCJydGciLCJydGMiLCJzcCIsIk1zIiwiQXMiLCIkc3RhYmxlIiwib25Wbm9kZUJlZm9yZVVubW91bnQiLCJtYyIsInBjIiwicGJjIiwiY3JlYXRlQXBwIiwiTHIiLCJqciIsIlNWR0VsZW1lbnQiLCJVciIsIkRyIiwidGFyZ2V0QW5jaG9yIiwiSHIiLCJfX2lzVGVsZXBvcnQiLCJfbHBhIiwiZXMiLCJhcyIsIl9fdl9pc1ZOb2RlIiwic3MiLCJscyIsImNzIiwicmVmX2tleSIsInJlZl9mb3IiLCJ5cyIsIl9fdmNjT3B0cyIsInBzIiwiX3MiLCJocyIsIm1lbW8iLCJFcyIsIiRzIiwiRnMiLCJfcmMiLCJQcyIsInRlbXBsYXRlIiwiaXNDdXN0b21FbGVtZW50IiwiZGVsaW1pdGVycyIsInJlbmRlclRyYWNrZWQiLCJyZW5kZXJUcmlnZ2VyZWQiLCJleHBvc2UiLCJ1bndyYXBJbmplY3RlZFJlZiIsImpzIiwib3IiLCJJcyIsImRpc3BsYXlOYW1lIiwiX19uYW1lIiwiX19maWxlIiwiVXMiLCJEcyIsIkhzIiwiV3MiLCJ6cyIsIkdzIiwiS3MiLCJxcyIsIkpzIiwiWXMiLCJacyIsIlFzIiwiWHMiLCJlaSIsInRpIiwibmkiLCJsaSIsImNpIiwiYWkiLCJjcmVhdGVFbGVtZW50TlMiLCJtdWx0aXBsZSIsImNyZWF0ZVRleHROb2RlIiwibm9kZVZhbHVlIiwidWkiLCJwaSIsInNldFByb3BlcnR5IiwiZGkiLCJmaSIsImhpIiwibWkiLCJnaSIsImNyZWF0ZUV2ZW50IiwidGltZVN0YW1wIiwidmkiLCJ5aSIsIl9pIiwiYmkiLCJhZGRFdmVudExpc3RlbmVyIiwieGkiLCJDaSIsIndpIiwiTmkiLCJkZWYiLCJraSIsIlRsIiwiVGkiLCJfZGVmIiwiX2Nvbm5lY3RlZCIsIl9yZXNvbHZlZCIsIl9udW1iZXJQcm9wcyIsInNoYWRvd1Jvb3QiLCJfY3JlYXRlVk5vZGUiLCJhdHRhY2hTaGFkb3ciLCJjb25uZWN0ZWRDYWxsYmFjayIsIl9yZXNvbHZlRGVmIiwiZGlzY29ubmVjdGVkQ2FsbGJhY2siLCJrbCIsImF0dHJpYnV0ZXMiLCJfc2V0QXR0ciIsImF0dHJpYnV0ZU5hbWUiLCJzdHlsZXMiLCJfc2V0UHJvcCIsIl9nZXRQcm9wIiwiX2FwcGx5U3R5bGVzIiwiZ2V0QXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwiZGlzcGF0Y2hFdmVudCIsIkN1c3RvbUV2ZW50IiwiZGV0YWlsIiwiRWkiLCIkaSIsIk9pIiwiZGlzY29ubmVjdCIsIlJpIiwiRmkiLCJJaSIsIlBpIiwiZW50ZXJGcm9tQ2xhc3MiLCJlbnRlckFjdGl2ZUNsYXNzIiwiZW50ZXJUb0NsYXNzIiwiYXBwZWFyRnJvbUNsYXNzIiwiYXBwZWFyQWN0aXZlQ2xhc3MiLCJhcHBlYXJUb0NsYXNzIiwibGVhdmVGcm9tQ2xhc3MiLCJsZWF2ZUFjdGl2ZUNsYXNzIiwibGVhdmVUb0NsYXNzIiwiQWkiLCJNaSIsIlZpIiwiQmkiLCJqaSIsIl9pc0xlYXZpbmciLCJVaSIsIkxpIiwiSGkiLCJHaSIsImNsYXNzTGlzdCIsIl92dGMiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJEaSIsIl9lbmRJZCIsInByb3BDb3VudCIsIldpIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImdldENvbXB1dGVkU3R5bGUiLCJ6aSIsImhhc1RyYW5zZm9ybSIsInRyYW5zaXRpb25Qcm9wZXJ0eSIsIktpIiwib2Zmc2V0SGVpZ2h0IiwicWkiLCJKaSIsIllpIiwidGFnIiwibW92ZUNsYXNzIiwiZGlzcGxheSIsIlppIiwiUWkiLCJYaSIsIndlYmtpdFRyYW5zZm9ybSIsInRyYW5zaXRpb25EdXJhdGlvbiIsIl9tb3ZlQ2IiLCJwcm9wZXJ0eU5hbWUiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ0bCIsImNvbXBvc2luZyIsIm5sIiwiRXZlbnQiLCJvbCIsIl9hc3NpZ24iLCJhY3RpdmVFbGVtZW50IiwicmwiLCJfbW9kZWxWYWx1ZSIsImFsIiwiY2hlY2tlZCIsInVsIiwic2wiLCJpbCIsImxsIiwic2VsZWN0ZWQiLCJjbCIsInNlbGVjdGVkSW5kZXgiLCJwbCIsImZsIiwiZGwiLCJobCIsInByZXZlbnQiLCJjdXJyZW50VGFyZ2V0IiwiY3RybCIsInNoaWZ0Iiwic2hpZnRLZXkiLCJhbHQiLCJhbHRLZXkiLCJtaWRkbGUiLCJyaWdodCIsImV4YWN0IiwibWwiLCJnbCIsImVzYyIsInNwYWNlIiwidXAiLCJkb3duIiwidmwiLCJ5bCIsIl92b2QiLCJfbCIsImJsIiwiY3NzVGV4dCIsIl92ZWkiLCJhdHRhY2hlZCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsIl9zdG9wcGVkIiwiU2kiLCJfdHJ1ZVZhbHVlIiwiX2ZhbHNlVmFsdWUiLCJyZW1vdmVBdHRyaWJ1dGVOUyIsInNldEF0dHJpYnV0ZU5TIiwiU2wiLCJ4bCIsIkNsIiwid2wiLCJObCIsIiRsIiwiRWxlbWVudCIsIkVsIiwiT2wiLCJSbCIsImZyZWV6ZSIsIl9fcHJvdG9fXyIsImNyZWF0ZVNTUkFwcCIsImluaXREaXJlY3RpdmVzRm9yU1NSIiwiZGVmaW5lQ3VzdG9tRWxlbWVudCIsImRlZmluZVNTUkN1c3RvbUVsZW1lbnQiLCJWdWVFbGVtZW50IiwidXNlQ3NzTW9kdWxlIiwidXNlQ3NzVmFycyIsIlRyYW5zaXRpb24iLCJUcmFuc2l0aW9uR3JvdXAiLCJ2TW9kZWxUZXh0Iiwidk1vZGVsQ2hlY2tib3giLCJ2TW9kZWxSYWRpbyIsInZNb2RlbFNlbGVjdCIsInZNb2RlbER5bmFtaWMiLCJ3aXRoTW9kaWZpZXJzIiwid2l0aEtleXMiLCJ2U2hvdyIsInJlYWN0aXZlIiwicmVhZG9ubHkiLCJ1bnJlZiIsInByb3h5UmVmcyIsImlzUmVmIiwidG9SZWYiLCJ0b1JlZnMiLCJpc1Byb3h5IiwiaXNSZWFjdGl2ZSIsImlzUmVhZG9ubHkiLCJpc1NoYWxsb3ciLCJjdXN0b21SZWYiLCJ0cmlnZ2VyUmVmIiwic2hhbGxvd1JlZiIsInNoYWxsb3dSZWFjdGl2ZSIsInNoYWxsb3dSZWFkb25seSIsIm1hcmtSYXciLCJ0b1JhdyIsIlJlYWN0aXZlRWZmZWN0IiwiZWZmZWN0U2NvcGUiLCJFZmZlY3RTY29wZSIsImdldEN1cnJlbnRTY29wZSIsIm9uU2NvcGVEaXNwb3NlIiwid2F0Y2hFZmZlY3QiLCJ3YXRjaFBvc3RFZmZlY3QiLCJ3YXRjaFN5bmNFZmZlY3QiLCJvbkJlZm9yZU1vdW50Iiwib25Nb3VudGVkIiwib25CZWZvcmVVcGRhdGUiLCJvblVwZGF0ZWQiLCJvbkJlZm9yZVVubW91bnQiLCJvblVubW91bnRlZCIsIm9uQWN0aXZhdGVkIiwib25EZWFjdGl2YXRlZCIsIm9uUmVuZGVyVHJhY2tlZCIsIm9uUmVuZGVyVHJpZ2dlcmVkIiwib25FcnJvckNhcHR1cmVkIiwib25TZXJ2ZXJQcmVmZXRjaCIsIm5leHRUaWNrIiwiZGVmaW5lQ29tcG9uZW50IiwiZGVmaW5lQXN5bmNDb21wb25lbnQiLCJ1c2VBdHRycyIsInVzZVNsb3RzIiwiZGVmaW5lUHJvcHMiLCJkZWZpbmVFbWl0cyIsImRlZmluZUV4cG9zZSIsIndpdGhEZWZhdWx0cyIsIm1lcmdlRGVmYXVsdHMiLCJjcmVhdGVQcm9wc1Jlc3RQcm94eSIsIndpdGhBc3luY0NvbnRleHQiLCJnZXRDdXJyZW50SW5zdGFuY2UiLCJjcmVhdGVWTm9kZSIsImNsb25lVk5vZGUiLCJtZXJnZVByb3BzIiwiaXNWTm9kZSIsIkZyYWdtZW50IiwiVGV4dCIsIkNvbW1lbnQiLCJTdGF0aWMiLCJUZWxlcG9ydCIsIlN1c3BlbnNlIiwiS2VlcEFsaXZlIiwiQmFzZVRyYW5zaXRpb24iLCJ3aXRoRGlyZWN0aXZlcyIsInVzZVNTUkNvbnRleHQiLCJzc3JDb250ZXh0S2V5IiwiY3JlYXRlUmVuZGVyZXIiLCJjcmVhdGVIeWRyYXRpb25SZW5kZXJlciIsInF1ZXVlUG9zdEZsdXNoQ2IiLCJoYW5kbGVFcnJvciIsImNhbGxXaXRoRXJyb3JIYW5kbGluZyIsImNhbGxXaXRoQXN5bmNFcnJvckhhbmRsaW5nIiwicmVzb2x2ZUNvbXBvbmVudCIsInJlc29sdmVEaXJlY3RpdmUiLCJyZXNvbHZlRHluYW1pY0NvbXBvbmVudCIsInJlZ2lzdGVyUnVudGltZUNvbXBpbGVyIiwiaXNSdW50aW1lT25seSIsInVzZVRyYW5zaXRpb25TdGF0ZSIsInJlc29sdmVUcmFuc2l0aW9uSG9va3MiLCJzZXRUcmFuc2l0aW9uSG9va3MiLCJnZXRUcmFuc2l0aW9uUmF3Q2hpbGRyZW4iLCJpbml0Q3VzdG9tRm9ybWF0dGVyIiwiZGV2dG9vbHMiLCJzZXREZXZ0b29sc0hvb2siLCJ3aXRoQ3R4IiwicHVzaFNjb3BlSWQiLCJwb3BTY29wZUlkIiwid2l0aFNjb3BlSWQiLCJyZW5kZXJMaXN0IiwidG9IYW5kbGVycyIsInJlbmRlclNsb3QiLCJjcmVhdGVTbG90cyIsIndpdGhNZW1vIiwiaXNNZW1vU2FtZSIsIm9wZW5CbG9jayIsImNyZWF0ZUJsb2NrIiwic2V0QmxvY2tUcmFja2luZyIsImNyZWF0ZVRleHRWTm9kZSIsImNyZWF0ZUNvbW1lbnRWTm9kZSIsImNyZWF0ZVN0YXRpY1ZOb2RlIiwiY3JlYXRlRWxlbWVudFZOb2RlIiwiY3JlYXRlRWxlbWVudEJsb2NrIiwiZ3VhcmRSZWFjdGl2ZVByb3BzIiwidG9EaXNwbGF5U3RyaW5nIiwiY2FtZWxpemUiLCJjYXBpdGFsaXplIiwidG9IYW5kbGVyS2V5Iiwibm9ybWFsaXplUHJvcHMiLCJub3JtYWxpemVDbGFzcyIsIm5vcm1hbGl6ZVN0eWxlIiwidHJhbnNmb3JtVk5vZGVBcmdzIiwic3NyVXRpbHMiLCJyZXNvbHZlRmlsdGVyIiwiY29tcGF0VXRpbHMiLCJGbCIsIlBsIiwiQWwiLCJTeW50YXhFcnJvciIsImNvZGUiLCJsb2MiLCJNbCIsIlZsIiwiSWwiLCJCbCIsIkxsIiwiamwiLCJVbCIsIkRsIiwiSGwiLCJXbCIsInpsIiwiS2wiLCJHbCIsInFsIiwiSmwiLCJZbCIsIlpsIiwiUWwiLCJYbCIsInRjIiwibmMiLCJvYyIsInNjIiwiaWMiLCJsYyIsImNjIiwiYWMiLCJ1YyIsImZjIiwiZGMiLCJoYyIsImdjIiwidmMiLCJ5YyIsIlNjIiwibGluZSIsIm9mZnNldCIsImVuZCIsInhjIiwiaGVscGVyIiwiWmMiLCJpblNTUiIsIlljIiwiaXNCbG9jayIsImRpc2FibGVUcmFja2luZyIsImlzQ29tcG9uZW50IiwiQ2MiLCJlbGVtZW50cyIsIndjIiwicHJvcGVydGllcyIsImtjIiwiVGMiLCJpc1N0YXRpYyIsImNvbnN0VHlwZSIsIk5jIiwiRWMiLCJjYWxsZWUiLCIkYyIsInJldHVybnMiLCJuZXdsaW5lIiwiaXNTbG90IiwiT2MiLCJjb25zZXF1ZW50IiwiYWx0ZXJuYXRlIiwiUmMiLCJGYyIsIlBjIiwiQWMiLCJNYyIsIlZjIiwiSWMiLCJCYyIsIkxjIiwiamMiLCJVYyIsIkRjIiwiSGMiLCJleHAiLCJXYyIsInpjIiwiS2MiLCJHYyIsInFjIiwidGFnVHlwZSIsIkpjIiwiUWMiLCJYYyIsImVhIiwidGEiLCJuYSIsInJlbW92ZUhlbHBlciIsIm9hIiwicmEiLCJhbXAiLCJhcG9zIiwicXVvdCIsInNhIiwiZ2V0TmFtZXNwYWNlIiwiZ2V0VGV4dE1vZGUiLCJpc1ZvaWRUYWciLCJpc1ByZVRhZyIsImRlY29kZUVudGl0aWVzIiwib25XYXJuIiwiY29tbWVudHMiLCJsYSIsIk5hIiwiaW5WUHJlIiwiQ2EiLCJ2YSIsInVhIiwicGEiLCJhYSIsIndhIiwiaGEiLCJmYSIsInlhIiwiY2EiLCJ3aGl0ZXNwYWNlIiwiaW5QcmUiLCJiYSIsImV4ZWMiLCJTYSIsImlzU2VsZkNsb3NpbmciLCJFYSIsImthIiwibWEiLCJpc0J1aWx0SW5Db21wb25lbnQiLCJjb2RlZ2VuTm9kZSIsImdhIiwiX2EiLCJpc1F1b3RlZCIsIlRhIiwib3JpZ2luYWxTb3VyY2UiLCIkYSIsIlJhIiwiT2EiLCJGYSIsImhvaXN0IiwiSWEiLCJNYSIsIlZhIiwidlNsb3QiLCJicmFuY2hlcyIsInRyYW5zZm9ybUhvaXN0IiwiY29uc3RhbnRDYWNoZSIsIlBhIiwiQWEiLCJMYSIsImZpbGVuYW1lIiwicHJlZml4SWRlbnRpZmllcnMiLCJob2lzdFN0YXRpYyIsImNhY2hlSGFuZGxlcnMiLCJub2RlVHJhbnNmb3JtcyIsImRpcmVjdGl2ZVRyYW5zZm9ybXMiLCJleHByZXNzaW9uUGx1Z2lucyIsInNsb3R0ZWQiLCJzc3IiLCJzc3JDc3NWYXJzIiwiYmluZGluZ01ldGFkYXRhIiwiaW5saW5lIiwiaXNUUyIsImNvbXBhdENvbmZpZyIsInNlbGZOYW1lIiwiaGVscGVycyIsImhvaXN0cyIsImltcG9ydHMiLCJ0ZW1wcyIsImNhY2hlZCIsImlkZW50aWZpZXJzIiwidkZvciIsInZQcmUiLCJ2T25jZSIsImN1cnJlbnROb2RlIiwiY2hpbGRJbmRleCIsImluVk9uY2UiLCJoZWxwZXJTdHJpbmciLCJyZXBsYWNlTm9kZSIsInJlbW92ZU5vZGUiLCJvbk5vZGVSZW1vdmVkIiwiYWRkSWRlbnRpZmllcnMiLCJyZW1vdmVJZGVudGlmaWVycyIsImhvaXN0ZWQiLCJCYSIsImphIiwiVWEiLCJEYSIsIldhIiwiemEiLCJpbmRlbnQiLCJLYSIsImRlaW5kZW50IiwiR2EiLCJxYSIsInB1cmUiLCJKYSIsIllhIiwiaW5kZW50TGV2ZWwiLCJaYSIsIlFhIiwiWGEiLCJjb25kaXRpb24iLCJ1c2VyS2V5IiwiaXNUZW1wbGF0ZUlmIiwiZXUiLCJ0dSIsInN1IiwidmFsdWVBbGlhcyIsImtleUFsaWFzIiwib2JqZWN0SW5kZXhBbGlhcyIsInBhcnNlUmVzdWx0IiwibHUiLCJudSIsIm91IiwicnUiLCJpdSIsInJlcGVhdCIsImN1IiwiYXUiLCJ1dSIsInB1IiwiZnUiLCJodSIsImR1IiwiaGFzRHluYW1pY1Nsb3RzIiwibXUiLCJndSIsInZ1IiwiZHluYW1pY1Byb3BOYW1lcyIsInNob3VsZFVzZUJsb2NrIiwieXUiLCJuZWVkUnVudGltZSIsImlzSGFuZGxlcktleSIsIl91IiwiU3UiLCJzbG90TmFtZSIsInNsb3RQcm9wcyIsInh1IiwiQ3UiLCJ3dSIsImt1IiwiVHUiLCJOdSIsIldlYWtTZXQiLCJFdSIsIiR1IiwiT3UiLCJSdSIsIkZ1IiwiUHUiLCJpYSIsIm1vZGVsIiwic291cmNlTWFwIiwib3B0aW1pemVJbXBvcnRzIiwicnVudGltZUdsb2JhbE5hbWUiLCJydW50aW1lTW9kdWxlTmFtZSIsInNzclJ1bnRpbWVNb2R1bGVOYW1lIiwib25Db250ZXh0Q3JlYXRlZCIsImFzdCIsInByZWFtYmxlIiwidG9KU09OIiwiSGEiLCJBdSIsIk11IiwiVnUiLCJJdSIsIkJ1IiwiTHUiLCJqdSIsIlV1IiwiRHUiLCJIdSIsIld1IiwienUiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJLdSIsIkd1IiwicXUiLCJKdSIsIll1IiwiWnUiLCJRdSIsIlh1IiwiZXAiLCJ0cCIsIm5wIiwiY2xvYWsiLCJrZXlNb2RpZmllcnMiLCJub25LZXlNb2RpZmllcnMiLCJldmVudE9wdGlvbk1vZGlmaWVycyIsIm9wIiwicnAiLCJzY3JpcHQkMUkiLCJvbGRWYWwiLCJtZW51X29wdGlvbnMiLCJkcm9wZG93biIsImRyb3Bkb3duX2J1dHRvbiIsImRlZmF1bHRfb3ZlcmZsb3ciLCJhdXRvX2xvYWQiLCJsb2FkX21lbnUiLCJmX29uX29wZW4iLCJmX29uX2Nsb3NlIiwiYnV0dG9uX2NsYXNzXzIiLCJidXR0b25fY2xhc3MiLCJtZW51IiwibV9vcHRpb25zIiwib3B0X3Nsb3QiLCJfaTE4biIsImdldF9mX3ByaW50X3Z1ZV9ub2RlX3JvdyIsInRhYmxlX2RlZiIsImF2YWlsYWJsZV90eXBlcyIsImJ1dHRvbl9saXN0IiwiZ2V0X2ZfcHJpbnRfdl9ub2RlX2J1dHRvbnMiLCJidXR0b25fYXJyYXkiLCJ2dWVfb2JqIiwicmV0dXJuX3RydWVfaWZfZGVmIiwicmVuZGVyX3Zfbm9kZV90eXBlIiwicmVuZGVyX3ZfZnVuYyIsInByaW50X3Zfbm9kZV9idXR0b25zIiwiZ2V0X2ZfcHJpbnRfaHRtbF9yb3ciLCJkYXRhX2ZpZWxkIiwicmVuZGVyX2dlbmVyaWMiLCJnZXRGb3JtYXRHZW5lcmljRmllbGQiLCJyZW5kZXJfZnVuYyIsInJlbmRlcl90eXBlIiwibGlzdF9vcl9hcnJheSIsIm9uX2NsaWNrIiwiZXZlbnRfaWQiLCJ2X25vZGVzIiwiYnV0dG9uX2RlZl9hcnJheSIsImJfZGVmIiwiY2xhc3NfYXJyYXkiLCJmX21hcF9jbGFzcyIsIl9jbGFzcyIsInRpdGxlX2kxOG4iLCJ2X3RpdGxlIiwiRHJvcGRvd24iLCJidXR0b25fc3R5bGUiLCJnZXRfcm93c19mdW5jIiwiZl9nZXRfZXh0cmFfcGFyYW1zX29iaiIsImZfb25fZ2V0X3Jvd3MiLCJmX2dldF9jb2x1bW5faWQiLCJnZXRfY29sdW1uX2lkX2Z1bmMiLCJhY3RpdmVfcGFnZSIsInBlcl9wYWdlIiwiY29sdW1uc193cmFwIiwibWFwX3NlYXJjaCIsImZpcnN0X2dldF9yb3dzIiwic29ydF9jb2x1bW4iLCJ2aXNpYmxlX2NvbHVtbnMiLCJvcmRlciIsImV4dHJhX3BhcmFtcyIsImRhdGFfdXJsIiwicnNwX3JlY29yZHNfZmllbGQiLCJxdWVyeV9pbmZvIiwicnNwX3F1ZXJ5X2luZm9fZmllbGQiLCJyZWNvcmRzRmlsdGVyZWQiLCJyZWNvcmRzVG90YWwiLCJ0b3RhbF9yb3dzIiwiZ2V0X2ZfcHJpbnRfY29sdW1uX25hbWUiLCJ0YWJsZV91dGlscyIsImdldF9jb2x1bW5zX2Zyb21fZGF0YXRhYmxlX2NvbHVtbnMiLCJkYXRhdGFibGVfY29sdW1uc190aXRsZSIsImRhdGF0YWJsZV9jb2x1bW5zX2pzIiwidGFibGVfY29sdW1uc19jb25maWciLCJvcmRlcmFibGUiLCJidWlsZF90YWJsZSIsInRhYmxlX2lkIiwiZl9tYXBfY29sdW1ucyIsInRhYmxlX2RlZl91cmwiLCJnZXRfcm93cyIsImdldF9jb2x1bW5faWQiLCJwcmludF9jb2x1bW5fbmFtZSIsInByaW50X2h0bWxfcm93IiwicHJpbnRfdnVlX25vZGVfcm93IiwiZl9pc19jb2x1bW5fc29ydGFibGUiLCJzb3J0YWJsZSIsImZfZ2V0X2NvbHVtbl9jbGFzc2VzIiwiY2xhc3NlcyIsImZfZ2V0X2NvbHVtbl9zdHlsZSIsImRpc3BsYXlfZW1wdHlfcm93cyIsImVuYWJsZV9zZWFyY2giLCJkZWZhdWx0X3NvcnQiLCJzaG93X2F1dG9yZWZyZXNoIiwicGFnaW5nIiwiZmlsdGVyc19jb25zdF9kaWN0IiwiZ2V0X2ZpbHRlcl9jb25zdCIsInVybF9yZXF1ZXN0IiwibG9hZF9maWx0ZXJzX2RhdGEiLCJmaWx0ZXJzX2NvbnN0IiwibG9jYWxlQ29tcGFyZSIsInRhZ3MiLCJUQUdfT1BFUkFUT1JTIiwiREVGSU5FRF9UQUdTIiwiZl9kZWYiLCJvcGVyYXRvcnMiLCJmaWx0ZXJfZGVmIiwiRklMVEVSU19DT05TVCIsIm9wdF9zdGlybmciLCJvcHQiLCJ2YWx1ZV9sYWJlbCIsInZhbHVlX3R5cGUiLCJnZXRfZmlsdGVyc19vYmplY3QiLCJmaWx0ZXJzX2dyb3VwcyIsImdyb3VwIiwiZmlsdGVyc19vYmplY3QiLCJmX2lkIiwiZmlsdGVyX3ZhbHVlcyIsImZpbHRlcnNNYW5hZ2VyIiwidGFnX29wZXJhdG9yX2xhYmVsX2RpY3QiLCJlcSIsIm5lcSIsImd0ZSIsImx0ZSIsImluIiwibmluIiwic2VsZWN0MiIsIm9wdGlvbnNfMiIsImdyb3Vwc19vcHRpb25zXzIiLCJzZWxlY3RlZF9vcHRpb25fMiIsInNlbGVjdGVkX3ZhbHVlcyIsInJlZnJlc2hfb3B0aW9ucyIsImZpcnN0X3RpbWVfcmVuZGVyIiwic2V0X2lucHV0IiwiZ3JvdXBzX2RpY3QiLCJvcHRpb24iLCJvcHRfMiIsInNldF9vcHRpb25zIiwic2V0X3NlbGVjdGVkX29wdGlvbiIsInNldF9zZWxlY3RlZF92YWx1ZXMiLCJkaXNhYmxlX2NoYW5nZSIsInNlbGVjdGVkX29wdGlvbiIsImN1cl92YWx1ZSIsImNoYW5nZV9zZWxlY3RfMl9zZWxlY3RlZF92YWx1ZSIsInNlbGVjdGVkX29wdGlvbnMiLCJjdXJyZW50X3ZhbHVlIiwic2VsZWN0MkRpdiIsInRoZW1lIiwiZHJvcGRvd25QYXJlbnQiLCJkcm9wZG93bkF1dG9XaWR0aCIsImFkZF90YWciLCJmaW5kX29wdGlvbl9mcm9tX3ZhbHVlIiwiZmluZF9vcHRpb25zX2Zyb21fdmFsdWVzIiwiZ2V0X3ZhbHVlX2Zyb21fc2VsZWN0ZWRfb3B0aW9uIiwiaXNfc2VsZWN0ZWQiLCJpc196ZXJvX3ZhbHVlIiwiZ2V0X3Byb3BzX3NlbGVjdGVkX29wdGlvbiIsIm9wdGlvbl8yIiwiZmluZF9vcHRpb25fMl9mcm9tX3ZhbHVlIiwic2NyaXB0JDFGIiwibWFpbl90aXRsZSIsInNlY29uZGFyeV90aXRsZV9saXN0IiwiaGVscF9saW5rIiwiaXRlbXNfdGFibGUiLCJfaG9pc3RlZF8xIiwiX2hvaXN0ZWRfNyIsIl9jcmVhdGVFbGVtZW50Vk5vZGUiLCJfaG9pc3RlZF8xMCIsImZsb2F0IiwiX2hvaXN0ZWRfMTciLCJfb3BlbkJsb2NrIiwiX2NyZWF0ZUVsZW1lbnRCbG9jayIsIl9ob2lzdGVkXzIiLCJfbm9ybWFsaXplQ2xhc3MiLCJfdG9EaXNwbGF5U3RyaW5nIiwiX2hvaXN0ZWRfMyIsIl9ob2lzdGVkXzQiLCJfRnJhZ21lbnQiLCJfcmVuZGVyTGlzdCIsIl9ob2lzdGVkXzYiLCJfaG9pc3RlZF84IiwiX2hvaXN0ZWRfOSIsIiRldmVudCIsImJhZGdlX251bSIsIl9ob2lzdGVkXzEyIiwiX2hvaXN0ZWRfMTQiLCJfaG9pc3RlZF8xNiIsIl9ob2lzdGVkXzE4Iiwic2NyaXB0JDFFIiwibm9fY2xvc2VfYnV0dG9uIiwic2hvd19hbGVydCIsImFsZXJ0X3R5cGUiLCJpbmZvIiwiY2xvc2UiLCJ0ZXh0X2h0bWwiLCJzY3JpcHQkMUQiLCJjaGFydF90eXBlIiwicmVnaXN0ZXJfb25fc3RhdHVzX2NoYW5nZSIsIm5vdF9lbWl0X2dsb2JhbF9zdGF0dXNfdXBkYXRlIiwiYmFzZV91cmxfcmVxdWVzdCIsImdldF9wYXJhbXNfdXJsX3JlcXVlc3QiLCJnZXRfY3VzdG9tX2NoYXJ0X29wdGlvbnMiLCJtYXBfY2hhcnRfb3B0aW9ucyIsIm1pbl90aW1lX2ludGVydmFsX2lkIiwicm91bmRfdGltZSIsImNoYXJ0X29wdGlvbnMiLCJmcm9tX3pvb20iLCJnZXRfdXJsX3JlcXVlc3QiLCJyZWdpc3Rlcl9zdGF0dXMiLCJkcmF3X2NoYXJ0IiwiZ2V0X2RhdGFfdXJpIiwiZG93bmxvYWRfY2hhcnRfcG5nIiwiZmlsZV9uYW1lIiwiZGF0YV91cmkiLCJkb3dubG9hZFVSSSIsIm5ld191cmxfcmVxdWVzdCIsInVwZGF0ZV9jaGFydCIsImNoYXJ0QXBleCIsImNoYXJ0X2NvbnRleHQiLCJvbl9iZWZvcmVfem9vbSIsIm9uX3pvb21lZCIsImdldF9jaGFydF9vcHRpb25zIiwidXBkYXRlX2NoYXJ0X29wdGlvbnMiLCJ1cGRhdGVfY2hhcnRfc2VyaWVzIiwibmV3X2Vwb2NoX3N0YXR1cyIsImdldF9lcG9jaF9mcm9tX3hheGlzX2V2ZW50IiwibWluX3RpbWVfaW50ZXJ2YWwiLCJiZWdpbiIsInVuaXgiLCJzY3JpcHQkMUMiLCJTZWxlY3RTZWFyY2giLCJlbmFibGVfcmVmcmVzaCIsImRpc2FibGVkX2RhdGVfcGlja2VyIiwiY3VzdG9tX3RpbWVfaW50ZXJ2YWxfbGlzdCIsImludmFsaWRfZGF0ZV9tZXNzYWdlIiwid3JvbmdfZGF0ZSIsIndyb25nX21pbl9pbnRlcnZhbCIsInN0YXJ0X3JlZnJlc2giLCJ0aW1lX3ByZXNldF9saXN0IiwidGltZV9wcmVzZXRfbGlzdF9maWx0ZXJlZCIsImdldF90aW1lZnJhbWVzX2F2YWlsYWJsZSIsImVsZW0iLCJlbWl0X2Vwb2NoX2NoYW5nZSIsImZfc2V0X3BpY2tlciIsInBpY2tlciIsInZhcl9uYW1lIiwiZmxhdHBpY2tyIiwiZW5hYmxlVGltZSIsImRhdGVGb3JtYXQiLCJ0aW1lXzI0aHIiLCJjbGlja09wZW5zIiwib25DaGFuZ2UiLCJzZWxlY3RlZERhdGVzIiwiZGF0ZVN0ciIsImVuYWJsZV9hcHBseSIsImZsYXRfYmVnaW5fZGF0ZSIsImZsYXRfZW5kX2RhdGUiLCJvbl9zdGF0dXNfdXBkYXRlZCIsInNlbGVjdGVkX3RpbWVfb3B0aW9uIiwidXBkYXRlX2Zyb21faW50ZXJ2YWwiLCJjaGFuZ2Vfc2VsZWN0X3RpbWUiLCJyZWZyZXNoX2ludGVydmFsX3NlY29uZHMiLCJ1dGNfc190b19zZXJ2ZXJfZGF0ZSIsInNlcnZlcl9kYXRlX3RvX2RhdGUiLCJkYXRlIiwiZW5kX2RhdGVfdGltZV91dGMiLCJiZWdpbl9kYXRlX3RpbWVfdXRjIiwic2V0X3NlbGVjdF90aW1lX3ZhbHVlIiwiZXBvY2hfc3RhdHVzIiwiYWRkX3N0YXR1c19pbl9oaXN0b3J5IiwiYmVnaW5fdXRjIiwiZW5kX3V0YyIsInJvdW5kX3RpbWVfYnlfbWluX2ludGVydmFsIiwiZW5kX3V0Y19zIiwiYmVnaW5fdXRjX3MiLCJpc19iZXR3ZWVuIiwic2VsZWN0X3RpbWVfdmFsdWUiLCJ0aW1lX2lkIiwiYmVnaW5fZGF0ZSIsImVuZF9kYXRlIiwicmVmcmVzaF9kYXRhIiwiaW50ZXJ2YWxfcyIsInRpbWVmcmFtZXNfaWRzIiwidGltZWZyYW1lc19hdmFpbGFibGUiLCJ0Zl9pZCIsInRvbGVyYW5jZSIsImludGVydmFsIiwiY2VudGVyIiwianVtcF90aW1lX2JhY2siLCJqdW1wX3RpbWVfYWhlYWQiLCJwcmV2aW91c19lbmQiLCJlbWl0X29ubHlfZ2xvYmFsX2V2ZW50IiwiaGlzdG9yeV9sYXN0X3N0YXR1cyIsImFwcGx5X3N0YXR1c19ieV9oaXN0b3J5IiwiX2hvaXN0ZWRfNSIsIl9ob2lzdGVkXzEzIiwiX2hvaXN0ZWRfMTUiLCJzdHlsZUluamVjdCIsImluc2VydEF0IiwiaGVhZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwic3R5bGVTaGVldCIsIl9yZW5kZXJTbG90IiwiX2NvbXBvbmVudF9zZWxlY3Rfc2VhcmNoIiwib25TZWxlY3Rfb3B0aW9uIiwicGxhY2Vob2xkZXIiLCJfY3JlYXRlQ29tbWVudFZOb2RlIiwiX3ZTaG93Iiwic2NyaXB0JDFCIiwicHJldmVudEVudGVyIiwib25TdWJtaXQiLCJ0YWJpbmRleCIsInJlZ2V4ZXMiLCJtYWNfYWRkcmVzcyIsImNvbW1hX3NlcGFydGVkX3BvcnRfcmVnZXgiLCJwb3J0X3JhbmdlX3JlZ2V4IiwiaG9zdF9uYW1lIiwidmFsaWRhdGVJUCIsInZhbGlkYXRlSVB2NCIsInZhbGlkYXRlSVB2NiIsIlV0aWxzIiwiZ2V0X2RhdGFfcGF0dGVybiIsInJfaXB2NCIsInJfaXB2NF92bGFuIiwicmVwbGFjZUFsbCIsInJfaXB2NiIsInJfaXB2Nl92bGFuIiwibmV0d29ya19pcHY0IiwiaXB2NF9jaWRyIiwiaXB2NF9jaWRyX3ZsYW4iLCJuZXR3b3JrX2lwdjYiLCJyZWdleFZhbGlkYXRpb24iLCJ2YWxpZGF0ZUhvc3ROYW1lIiwidmFsaWRhdGVDb21tYVNlcGFyYXRlZFBvcnRMaXN0IiwicG9ydHMiLCJ2YWxpZGF0ZVBvcnRSYW5nZSIsInBvcnRfYXJyYXkiLCJsb3ciLCJoaWdoIiwidmFsaWRhdGVTaW5nbGVXb3JkIiwid29yZCIsInNjcmlwdCQxQSIsIk1vZGFsIiwiZmlsdGVyc19vcHRpb25zIiwiaWRfbW9kYWwiLCJmaWx0ZXJfdHlwZV9zZWxlY3RlZCIsImZpbHRlcl90eXBlX2xhYmVsX3NlbGVjdGVkIiwib3BlcmF0b3Jfc2VsZWN0ZWQiLCJvcHRpb25fc2VsZWN0ZWQiLCJpbnB1dF92YWx1ZSIsImlucHV0X3R5cGUiLCJkYXRhX3BhdHRlcm5fc2VsZWN0ZWQiLCJpbnB1dF9yZXF1aXJlZCIsIm9wdGlvbnNfdG9fc2hvdyIsIm9wZXJhdG9yc190b19zaG93IiwiY2hhbmdlX2ZpbHRlciIsInBvc3RfY2hhbmdlIiwiY2hhbmdlX29wZXJhdG9yX3R5cGUiLCJzZWxlY3RlZF9vcGVyYXRvcl90eXBlIiwiY2hhbmdlX2RhdGFfZmlsdGVyIiwic2VsZWN0ZWRfZmlsdGVyIiwiY2hhbmdlX2lucHV0X3ZhbHVlIiwiY2hlY2tfZGlzYWJsZV9hcHBseSIsImF1dG9jb21wbGV0ZSIsImZvciIsIl9jcmVhdGVCbG9jayIsInJlcXVpcmVkIiwiZm9vdGVyIiwiaW5pdGlhbFRhZ3MiLCJUQUdJRlkiLCJJU19BTEVSVF9TVEFUU19VUkwiLCJTVEFUVVNfVklFVyIsIlBBR0UiLCJhbGVydF9zdGF0c19wYWdlIiwiZ2V0X3BhZ2UiLCJpc19hbGVydF9zdGF0c191cmwiLCJxdWVyeV9wcmVzZXQiLCJhZ2dyZWdhdGVkIiwic2NyaXB0JDF6IiwiRGF0ZVRpbWVSYW5nZVBpY2tlciIsIk1vZGFsRmlsdGVycyIsImR0X3JhbmdlX3BpY2tlcl9tb3VudGVkIiwiaWRfZGF0YV90aW1lX3JhbmdlX3BpY2tlciIsImlkX21vZGFsX2ZpbHRlcnMiLCJyYW5nZV9waWNrZXJfdnVlIiwidGFnaWZ5IiwiVGFnaWZ5IiwiZHVwbGljYXRlcyIsImNsYXNzbmFtZSIsImF1dG9Db21wbGV0ZSIsInRlbXBsYXRlcyIsInRhZ0RhdGEiLCJzZWxlY3RlZE9wZXJhdG9yIiwidmFsaWRhdGUiLCJhZGRUYWdzIiwiYWRkRmlsdGVyVGFnIiwicmVhbFZhbHVlIiwiZXhpc3RpbmdUYWdFbGVtZW50IiwiZ2V0VGFnRWxtcyIsImh0bWxUYWciLCJyZW1vdmVUYWdzIiwiZWRpdF90YWciLCJjcmVhdGVfdGFnaWZ5IiwicmVsb2FkX3N0YXR1cyIsIm1vZGFsX2RhdGEiLCJzaG93X2ZpbHRlcnMiLCJzdGF0dXNfdmlldyIsImxhc3RfZmlsdGVycyIsImlzX2ZpbHRlcl9kZWZpbmVkIiwidXBkYXRlX3N0YXR1c192aWV3Iiwic2hvd19tb2RhbF9maWx0ZXJzIiwicmVtb3ZlX2ZpbHRlcnMiLCJyZW1vdmVBbGxUYWdzIiwiZl9jb25zdCIsImNyZWF0ZV90YWdfZnJvbV9maWx0ZXIiLCJhcHBseV9tb2RhbCIsIl9jb21wb25lbnRfbW9kYWxfZmlsdGVycyIsIm9uQXBwbHkiLCJfY29tcG9uZW50X2RhdGVfdGltZV9yYW5nZV9waWNrZXIiLCJleHRyYV9idXR0b25zIiwiX2hvaXN0ZWRfMTEiLCJzdGFydF9wYWdlX2J1dHRvbiIsIm51bV9wYWdlX2J1dHRvbnMiLCJ0b3RhbF9wYWdlcyIsImNhbGN1bGF0ZV9wYWdlcyIsImNoYW5nZV9hY3RpdmVfcGFnZSIsInNldF90ZXh0IiwiZW5hYmxlX2ZpcnN0X3BhZ2UiLCJlbmFibGVfbGFzdF9wYWdlIiwibmV3X2FjdGl2ZV9wYWdlIiwibmV3X3N0YXJ0X3BhZ2VfYnV0dG9uIiwiZW5kX3BhZ2VfYnV0dG9uIiwiZm9ybWF0X251bWJlciIsImxvYWRpbmciLCJvdmVybGF5IiwiaGlkZV9sb2FkaW5nIiwic2hvd19sb2FkaW5nIiwidmFsdWVfMiIsInRhYmxlX2NvbnRhaW5lciIsImFjdGl2ZV9yb3dzIiwicGVyX3BhZ2Vfb3B0aW9ucyIsInN0b3JlIiwic2VsZWN0X3RhYmxlX3BhZ2UiLCJxdWVyeV9pbmZvX3NxbF9idXR0b24iLCJjaGFuZ2luZ19jb2x1bW5fdmlzaWJpbGl0eSIsImNoYW5naW5nX3Jvd3MiLCJlbmFibGVfYXV0b3JlZnJlc2giLCJsb2FkX3RhYmxlIiwiYXV0b3JlZnJlc2hfdGl0bGUiLCJnZXRfY29sX2lkIiwiY29sc192aXNpYmlsaXR5X2RpY3QiLCJjb2x1bW5zX3Zpc2libGUiLCJjb2x1bW5zX3Zpc2libGVfZGljdCIsImdldF9jb2x1bW5zX3Zpc2liaWxpdHlfZGljdCIsImlzX3RhYmxlX25vdF9zb3J0ZWQiLCJjb2xfb3B0IiwiaXNfY29sdW1uX3NvcnRhYmxlIiwic2V0X2NvbHVtbnNfdmlzaWJpbGl0eSIsInNldF9jb2x1bW5zX3dyYXAiLCJzZXRfcm93cyIsInNldF9jb2x1bW5zX3Jlc2l6YWJsZSIsImF1dG9yZWZyZXNoX2ludGVydmFsIiwidXBkYXRlX2F1dG9yZWZyZXNoIiwicmVkcmF3X3RhYmxlX3Jlc2l6YWJsZSIsInRhYmxlX2tleSIsInJlZHJhd190YWJsZSIsIm1pbldpZHRoIiwicmVzaXphYmxlQ29sdW1ucyIsInZpc2libGVfY29sdW1uc19pZHMiLCJyZXNldF9jb2x1bW5fc2l6ZSIsImNoYW5nZV9wZXJfcGFnZSIsInNlbGVjdF9wYWdlc19rZXkiLCJ0YWJsZV9jb250ZW50X2lkIiwiZm9yY2VfcmVmcmVzaCIsInNldF9hY3RpdmVfcm93cyIsImZvcmNlX2Rpc2FibGVfbG9hZGluZyIsInJlZnJlc2hfdGFibGUiLCJkaXNhYmxlX2xvYWRpbmciLCJtYXBfc2VhcmNoX2NoYW5nZV90aW1lb3V0Iiwic3RhcnRfcm93X2luZGV4IiwiZl9zb3J0IiwiZl9zb3J0X3Jvd3MiLCJyMCIsInIxIiwicjBfY29sIiwicjFfY29sIiwiY29sX3RvX3NvcnQiLCJnZXRfY29sdW1uX3RvX3NvcnQiLCJvbl9jaGFuZ2VfbWFwX3NlYXJjaCIsImNvcHlfcXVlcnlfaW50b19jbGlwYm9hcmQiLCJjb3B5VG9DbGlwYm9hcmQiLCJnZXRfY29sdW1uc19kZWZzIiwiZ2V0X3Jvd3NfbnVtIiwic2VhcmNoX3ZhbHVlIiwiY29sX2luZGV4IiwidGFibGVfY29uZmlnIiwibW91bnRfdGFibGUiLCJ0YWJsZV9jb25maWdfaWQiLCJ0YWJsZV9pZF8yIiwidGFibGVfY29uZmlnX2lkXzIiLCJUYWJsZVV0aWxzIiwiZ2V0X2V4dHJhX3BhcmFtc19vYmoiLCJmX21hcF9jb25maWciLCJvbl9sb2FkZWQiLCJyb3dzX2xvYWRlZCIsInNjcmlwdCQxciIsImRlc2NyaXB0aW9uIiwiaW52YWxpZF9icGYiLCJicGZfZmlsdGVyIiwiZXh0cmFjdF9ub3ciLCJzaG93X21lbnUiLCJkYXRhX2F2YWlsYWJsZSIsImVwb2NoX2ludGVydmFsIiwicGFkMl9udW1iZXIiLCJmb3JtYXRfZGF0ZSIsImRfbXMiLCJ2YWx1ZU9mIiwidXJsX3JlcXVlc3Rfb2JqIiwiaWZpZCIsInVybF9yZXF1ZXN0X3BhcmFtcyIsImpvYl9pZCIsImFsZXJ0X3RleHRfaHRtbCIsInBhZ2VfbmFtZSIsImF2YWlsYWJsZSIsImV4dHJhX2luZm8iLCJicGYiLCJzZXRfZGVzY3JpcHRpb25zIiwiZGF0ZV9iZWdpbiIsImRhdGVfZW5kIiwiZGVzYyIsInNob3dfaGlkZV9tZW51IiwiX2NvbXBvbmVudF9tb2RhbCIsIl9jcmVhdGVUZXh0Vk5vZGUiLCJfd2l0aERpcmVjdGl2ZXMiLCJzcGVsbGNoZWNrIiwiX2hvaXN0ZWRfMTkiLCJtb2RhbF9pZCIsInNuYXBzaG90X3NlbGVjdGVkIiwiYXBwbHlfdGltZSIsImFwcGx5X3RpbWVfdGV4dCIsInNhdmVfdGltZSIsInNhdmVfdGltZV90ZXh0Iiwic25hcHNob3RfbmFtZSIsInNuYXBzaG90cyIsIm9yZGVyX2J5IiwicGF0dGVybl9zaW5nbGV3b3JkIiwiZGlzYWJsZV9hZGQiLCJkaXNhYmxlX3NlbGVjdCIsImxhc3Rfb3JkZXJfYnkiLCJzb3J0X3NuYXBzaG90c19ieSIsImxvYWRfc25hcHNob3RzIiwiYWRkX3NuYXBzaG90IiwicGFyYW1zX29iaiIsInNlbGVjdF9zbmFwc2hvdCIsImRlbGV0ZV9zbmFwc2hvdCIsImRlbGV0ZV9hbGwiLCJzYXZlX3RpbWVfZmlsdGVyX3RleHQiLCJiZWdpbl90aW1lIiwiZW5kX3RpbWUiLCJhcHBseV90aW1lX2ZpbHRlcl90ZXh0Iiwic25hcHNob3RzX29iaiIsInJhZGlvX3NlbGVjdGVkIiwiZGlzYWJsZV9hbGVydHMiLCJkb21haW4iLCJjb21tZW50IiwiY29tbWVudF9wbGFjZWhvbGRlciIsImV4dHJhY3RfZG9tYWluX25hbWVfZnJvbV9pbmZvIiwiaXNzdWVyZG4iLCJkb21haW5fbmFtZSIsImluZm9fc3BsaXR0ZWRfIiwiaW5mb19zcGxpdHRlZF9vbl93d3ciLCJyZWdleF9kb21haW4iLCJwYXR0ZXJuX2RvbWFpbiIsInJlZ2V4X2NlcnRpZmljYXRlIiwicGF0dGVybl9jZXJ0aWZpY2F0ZSIsImFsZXJ0X25hbWUiLCJob3N0X2FkZHIiLCJmbG93X2FkZHIiLCJjbGlfdmFsdWUiLCJjbGlfbGFiZWwiLCJzcnZfdmFsdWUiLCJzcnZfbGFiZWwiLCJkZWxldGVfYWxlcnRzIiwiYWRkciIsImFsZXJ0X2FkZHIiLCJmbG93X2FsZXJ0X2tleSIsImhvc3RfYWxlcnRfa2V5IiwiYWxlcnRfZG9tYWluIiwiYWxlcnRfY2VydGlmaWNhdGUiLCJhbGVydF9pbmZvIiwidGl0bGVfZGVzYyIsImFja25vd2xlZGdlIiwicm93X2lkIiwiX2FsZXJ0IiwiJHR5cGUiLCJ1c2VyX2xhYmVsIiwibWVzc2FnZV9ib2R5IiwiZGVsZXRlX2FsZXJ0IiwiX3N0YXR1c192aWV3IiwiYWNrbm93bGVkZ2VfYWxlcnRzIiwidGFibGVfYWxlcnRzIiwibW9kYWxfdHJhZmZpY19leHRyYWN0aW9uIiwibW9kYWxfc25hcHNob3QiLCJyYW5nZV9waWNrZXIiLCJwZXJtYW5lbnRfbGlua19idXR0b24iLCJtb2RhbF9hbGVydHNfZmlsdGVyIiwibW9kYWxfYWNrbm93bGVkZ2UiLCJtb2RhbF9kZWxldGUiLCJtb2RhbF9hY2tub3dsZWRnZV9hbGVydHMiLCJtb2RhbF9kZWxldGVfYWxlcnRzIiwiY291bnRfcGFnZV9jb21wb25lbnRzX3JlbG9hZGVkIiwiZGlzcGxheV9tZXNzYWdlIiwibWVzc2FnZV90b19kaXNwbGF5IiwiY3VycmVudF9hbGVydCIsImRlZmF1bHRfaWZpZCIsImNoYXJ0X2RhdGFfdXJsIiwidG9wX3RhYmxlX2FycmF5IiwidG9wX3RhYmxlX2Ryb3Bkb3duX2FycmF5Iiwibm90ZV9saXN0Iiwic2VsZWN0ZWRfcXVlcnlfcHJlc2V0IiwicXVlcnlfcHJlc2V0cyIsIm1vdW50X3JhbmdlX3BpY2tlciIsImhyZWZfZG93bmxvYWRfcmVjb3JkcyIsInNob3dfY2hhcnQiLCJkb3dubG9hZF9lbmRwb2ludCIsImlzX3ZhIiwiaW5pdF9wYXJhbXMiLCJkZWZhdWx0X2Vwb2NoX2JlZ2luIiwiZGVmYXVsdF9lcG9jaF9lbmQiLCJpbml0X3VybF9wYXJhbXMiLCJpc19udG9wX2VudGVycHJpc2VfbCIsImdldF9xdWVyeV9wcmVzZXRzX3N5bmNfa2V5IiwiYnVpbHRpbiIsImlzX3ByZXNldCIsInNldF9xdWVyeV9wcmVzZXRzIiwibG9hZF90b3BfdGFibGVfYXJyYXlfb3ZlcnZpZXciLCJyZWdpc3Rlcl9jb21wb25lbnRzX29uX3N0YXR1c191cGRhdGUiLCJzaG93X2NhcmRzIiwibG9hZF90b3BfdGFibGVfYXJyYXkiLCJlbmRwb2ludF9jYXJkcyIsInNob3dfc3Bpbm5lciIsImRhdGFfbG9hZGVkIiwiZ2V0X29wZW5fdG9wX3RhYmxlX2Ryb3Bkb3duIiwidG9wX2luZGV4IiwibmV3X3RvcF9hcnJheSIsImxvYWRfdG9wX3RhYmxlX2RldGFpbHMiLCJvbl90YWJsZV9sb2FkZWQiLCJhZGRfdGFibGVfcm93X2ZpbHRlciIsIm1hcF90YWJsZV9kZWZfY29sdW1ucyIsIm1hcF9jb2x1bW5zIiwibDdfcHJvdG8iLCJwcm90byIsImNvbmZpZGVuY2UiLCJjb3B5X2J1dHRvbiIsInNldF9xdWVyeV9wcmVzZXRfY29sdW1ucyIsImNvbHVtbnNfZGVmIiwidmlzaWJsZV9kaWN0Iiwic25tcF9pbmZvIiwic2hvd19zbm1wX2luZm8iLCJzaG93X2luZm8iLCJoaXN0b3JpY2FsX2RhdGEiLCJzaG93X2hpc3RvcmljYWwiLCJzaG93X2Fja25vd2xlZGdlIiwic2hvd19kaXNhYmxlIiwic2hvd19zZXR0aW5ncyIsInNob3dfZGVsZXRlIiwiYWRkX2ZpbHRlciIsImNsaWNrX25hdmJhcl9pdGVtIiwicmVtb3ZlX2ZpbHRlcnNfZnJvbV91cmwiLCJnZXRfcGVybWFuZW50X2xpbmsiLCJzaG93X21vZGFsX3RyYWZmaWNfZXh0cmFjdGlvbiIsInNob3dfbW9kYWxfc25hcHNob3QiLCJhZGRfZXhjbHVkZSIsInJlZnJlc2hfcGFnZV9jb21wb25lbnRzIiwib25fdGFibGVfY3VzdG9tX2V2ZW50IiwiZXZlbnRzX21hbmFnZWQiLCJjbGlja19idXR0b25fc25tcF9pbmZvIiwiY2xpY2tfYnV0dG9uX2luZm8iLCJjbGlja19idXR0b25faGlzdG9yaWNhbF9mbG93cyIsImNsaWNrX2J1dHRvbl9hY2tub3dsZWRnZSIsImNsaWNrX2J1dHRvbl9kaXNhYmxlIiwiY2xpY2tfYnV0dG9uX3NldHRpbmdzIiwiY2xpY2tfYnV0dG9uX3JlbW92ZSIsImNsaWNrX2J1dHRvbl9leHBhbmQiLCJyb3dfZmlsdGVycyIsInRhZ19maWx0ZXJzIiwiZmlsdGVyc19kaWN0Iiwic2hvd19tb2RhbF9hY2tub3dsZWRnZV9hbGVydHMiLCJzaG93X21vZGFsX2RlbGV0ZV9hbGVydHMiLCJnZXRfc3RhdHVzX3ZpZXciLCJjaGVja19zZXR0aW5nc19ocmVmIiwiY29uZmlnc2V0X3JlZiIsInNob3dfbW9kYWxfYWxlcnRzX2ZpbHRlciIsImxpbmtfdG9fcGFzdF9mbG93cyIsInRzdGFtcCIsImFsZXJ0X2RldGFpbHNfdXJsIiwidGFibGVfZmxvd3MiLCJjaGFydF9zdHlsZSIsImZsb3dzX2FnZ3JlZ2F0ZWQiLCJmbG93X3R5cGVfbGFiZWwiLCJnZXRfY2hhcnRfY29uZmlnX2Zyb21fcHJlc2V0X2NvbnN0IiwicHJlc2V0X2NvbnN0IiwiZl9jaGVja19sYXN0X21pbnV0ZV9lcG9jaF9lbmQiLCJjaGFydF9jb25maWciLCJmX21hcF9jaGFydF9vcHRpb25zIiwiZm9ybWF0dGVyX3R5cGUiLCJ1bml0X21lYXN1cmUiLCJjaGFuZ2VfZmxvd190eXBlIiwiZl9wcmludF9hc24iLCJmX3ByaW50X2xhdGVuY3kiLCJtc2VjVG9UaW1lIiwiZmlyc3Rfc2VlbiIsIkRVUkFUSU9OIiwiVEhST1VHSFBVVCIsInRocm91Z2hwdXQiLCJsN3Byb3RvIiwiY2xpX2FzbiIsInNydl9hc24iLCJmbG93X3Jpc2siLCJmbG93X3Jpc2tzIiwiZmxvd19yaXNrX2xhYmVsIiwiZmxvd19yaXNrX2hlbHAiLCJoZWxwIiwiY2xpX253X2xhdGVuY3kiLCJzcnZfbndfbGF0ZW5jeSIsImZsb3dfYWxlcnRzIiwic2hvd19hbGVydHMiLCJwY2FwX2Rvd25sb2FkIiwic2hvd19wY2FwX2Rvd25sb2FkIiwicm93X2RhdGEiLCJpc19lbnRlcnByaXNlX3hsIiwibm90X3JlZnJlc2hfdGFibGUiLCJjbGlja19idXR0b25fZmxvd19hbGVydHMiLCJjbGlja19idXR0b25fcGNhcF9kb3dubG9hZCIsImNsaWNrX2J1dHRvbl9mbG93cyIsInJvd2lkIiwiTlRPUE5HX0lOU1RBTkNFX05BTUUiLCJmaWx0ZXJzX3BhcmFtc19vYmplY3QiLCJmaWx0ZXJfa2V5IiwidGFnX2tleSIsImFsZXJ0c191cmwiLCJwcm9iZV9pcCIsImluc3RhbmNlX25hbWUiLCJhc192bGFuIiwib3V0cHV0X3NubXAiLCJhc19vdXRwdXRfc25tcCIsImlucHV0X3NubXAiLCJzY3JpcHQkMWkiLCJkaXNhYmxlX3BvaW50ZXJfZXZlbnRzIiwidGltZXNlcmllc192aXNpYmlsaXR5IiwidGltZXNlcmllc19saXN0IiwiZ2V0X2ltYWdlIiwiRHlncmFwaCIsIkV4cG9ydCIsImFzUE5HIiwiY2hhbmdlX3Zpc2liaWxpdHkiLCJzZXRWaXNpYmlsaXR5IiwiZGF0ZV9mb3JtYXQiLCJheGVzIiwiYXhpc0xhYmVsRm9ybWF0dGVyIiwidmFsdWVGb3JtYXR0ZXIiLCJ6b29tQ2FsbGJhY2siLCJkaXNhYmxlVHNMaXN0IiwibWluRGF0ZSIsIm1heERhdGUiLCJfbm9ybWFsaXplU3R5bGUiLCJiYWNrZ3JvdW5kQ29sb3IiLCJ1cGRhdGVfdGltZXNlcmllcyIsInRpbWVzZXJpZXMiLCJkZWxldGVfdHMiLCJieXRlc1RvU2l6ZUZvcm1hdHRlciIsImhhbmRsZXJJZEFkZExpbmsiLCJoYW5kbGVySWRKdW1wSGlzdG9yaWNhbCIsInRvcF9hcHBsaWNhdGlvbiIsInRhYmxlX3ZhbHVlIiwidmlldyIsImRlZmF1bHRfc29ydGluZ19jb2x1bW5zIiwiY29sdW1uRGVmcyIsInRhcmdldHMiLCJjb2x1bW5OYW1lIiwic2VydmljZSIsInNjaGVtYSIsInRzX3NjaGVtYSIsImFkZF9tZXRyaWNfZnJvbV9tZXRyaWNfc2NoZW1hIiwidHNfcXVlcnkiLCJjcmVhdGVMaW5rQ2FsbGJhY2siLCJjcmVhdGVQcm9ncmVzc0JhciIsInJlc3BvbnNpdmVQcmlvcml0eSIsInJlbmRlcl9pZiIsImlzX2hpc3RvcnlfZW5hYmxlZCIsImp1bXBfdG9faGlzdG9yaWNhbCIsImhpc3RvcmljYWxfZmxvd3NfdXJsIiwic291cmNlX2FycmF5IiwicGFyYW1zX2FycmF5Iiwic291cmNlX2RlZl9hcnJheSIsInNvdXJjZV9kZWYiLCJjcmVhdGVBY3Rpb25CdXR0b25zIiwidG9wX2NhdGVnb3JpZXMiLCJjYXRlZ29yeSIsImludGVyZmFjZV90b3BfdGFibGVzIiwiaG9zdF9yZWYiLCJhZGRfdHNfZ3JvdXBfZnJvbV9zb3VyY2VfdmFsdWVfZGljdCIsInNvdXJjZXNfdHlwZXNfZW5hYmxlZCIsImlzX2xvY2FsIiwiaXNfYXZhaWxhYmxlIiwiaG9zdF90c19hdmFpbGFibGUiLCJwX3VybCIsImp1bXBfdG9faG9zdCIsImhvc3RfdXJsIiwidG9wX2FwcGxpY2F0aW9uX2ludGVyZmFjZSIsImludGVyZmFjZVRvcFRhYmxlcyIsImhvc3RfdG9wX3RhYmxlcyIsImJwc0Zvcm1hdHRlciIsInRvcF9zbm1wX2ludGVyZmFjZSIsInRhYmxlX3NvdXJjZV9kZWZfdmFsdWVfZGljdCIsImRldmljZSIsImlmX2luZGV4IiwiZl9nZXRfbGFiZWwiLCJ0c19ncm91cCIsInNvdXJjZV9sYWJlbCIsImxhYmVsX3RleHQiLCJhbGlhcyIsInNubXBfaW50ZXJmYWNlX3RvcF90YWJsZXMiLCJ0b3BfZmxvd19pbnRlcmZhY2UiLCJmbG93X2Rldl90b3BfdGFibGVzIiwiYXZhaWxhYmxlX2ludGVyZmFjZXMiLCJzbm1wX2RldmljZV9wb3J0X3VybCIsInNubXBfZGV2aWNlX3BvcnRzIiwiaWZhY2UiLCJzb3J0QWxwaGFiZXRpY2FsbHkiLCJwcm94eV9zbm1wIiwidWlfdHlwZXMiLCJzb3VyY2VzX3VybF9lbF90b19zb3VyY2UiLCJpZm5hbWUiLCJwb29sX2lkIiwiYW1faG9zdCIsImFtIiwibWVhc3VyZW1lbnQiLCJtZWFzdXJlbWVudF9rZXkiLCJibGFja2xpc3QiLCJjb2x1bW5fbmFtZSIsInNvdXJjZXNfdHlwZXNfdGFibGVzIiwiaW50ZXJmYWNlIiwiaG9zdFRvcFRhYmxlcyIsInNubXBfaW50ZXJmYWNlIiwic25tcEludGVyZmFjZVRvcFRhYmxlcyIsInNubXBfZGV2aWNlIiwiZmxvd19kZXZpY2UiLCJmbG93RGV2aWNlVG9wVGFibGVzIiwiZmxvd19pbnRlcmZhY2UiLCJzb3VyY2VzX3R5cGVzIiwicmVnZXhfcGFnZV91cmwiLCJmX21hcF90c19vcHRpb25zIiwibWFpbl9zb3VyY2VfZGVmIiwicmVnZXhfdHlwZSIsInJlZnJlc2hfb25fc291cmNlc19jaGFuZ2UiLCJzb3VyY2VzX3VybCIsInNvdXJjZXNfZnVuY3Rpb24iLCJ2YWx1ZV91cmwiLCJ2YWx1ZV9tYXBfc291cmNlc19yZXMiLCJkaXNhYmxlX3Rza2V5IiwiZl9nZXRfdmFsdWVfdXJsIiwiZl9zZXRfdmFsdWVfdXJsIiwidWlfdHlwZSIsInRzX29wdGlvbnMiLCJtZXRyaWMiLCJpZF9ncm91cCIsImRldmljZV9ob3N0Iiwic2VsZWN0ZWRfc291cmNlX3ZhbHVlX2FycmF5IiwicHJveHlTbm1wIiwibWV0cmljc0NvbnN0cyIsInNldF90aW1lc2VyaWVzX2dyb3Vwc19pbl91cmwiLCJ0aW1lc2VyaWVzX2dyb3VwcyIsInBhcmFtc190aW1lc2VyaWVzX2dyb3VwcyIsInBhc3QiLCJhdmciLCJwZXJjXzk1IiwibWV0cmljX3NjaGVtYV9xdWVyeSIsInRpbWVzZXJpZXNfcGFyYW0iLCJzb3VyY2VfdmFsdWVfYXJyYXlfcXVlcnkiLCJnZXRfdHNfZ3JvdXBfdXJsX3BhcmFtIiwidXJsX3RpbWVzZXJpZXNfZ3JvdXBzIiwiZ2V0X3RzX2dyb3VwIiwiZ2V0X3RzX2dyb3VwX2lkIiwiZ2V0X2RlZmF1bHRfdGltZXNlcmllc19ncm91cHMiLCJtZXRyaWNfdHNfc2NoZW1hIiwibWV0cmljX3F1ZXJ5IiwiZ2V0X2N1cnJlbnRfcGFnZV9zb3VyY2VfdHlwZSIsImdldF9kZWZhdWx0X3NvdXJjZV9hcnJheSIsIm1ldHJpY3MiLCJnZXRfbWV0cmljcyIsImdldF9kZWZhdWx0X21ldHJpYyIsImdldF91cmxfcGFyYW1fZnJvbV90c19ncm91cCIsInRzX2dyb3VwX3VybF9wYXJhbSIsInNvdXJjZV90eXBlX2lkIiwic291cmNlX3ZhbHVlX2FycmF5IiwibWV0cmljX3NjaGVtYV9xdWVyeV9hcnJheSIsInRpbWVzZXJpZXNfdXJsIiwiZ2V0X3NvdXJjZV90eXBlX2Zyb21faWQiLCJnZXRfc291cmNlX2FycmF5X2Zyb21fdmFsdWVfYXJyYXkiLCJnZXRfbWV0cmljX2Zyb21fc2NoZW1hIiwidHNfdXJsX2FycmF5IiwidHNfdXJsIiwiZ2V0X3RpbWVzZXJpZXMiLCJlbmFibGVfc291cmNlX2RlZl92YWx1ZV9kaWN0Iiwic2V0X3NvdXJjZV90eXBlX2lkX2dyb3VwIiwibWV0cmljX2lkIiwic291cmNlX2RlZl92YWx1ZSIsImdldF9kZWZhdWx0X3NvdXJjZV92YWx1ZV9hcnJheSIsImdldF9zb3VyY2VfYXJyYXlfZnJvbV92YWx1ZV9kaWN0Iiwic291cmNlX3ZhbHVlX2RpY3QiLCJzb3VyY2VfdmFsdWUiLCJzb3VyY2VzIiwiZ2V0X3NvdXJjZXMiLCJjYWNoZV9zb3VyY2VzIiwiZ2V0X3NvdXJjZV9kZWZfa2V5IiwiZl9tYXBfc291cmNlX2VsZW1lbnQiLCJzZXRfc291cmNlX3ZhbHVlX29iamVjdF9pbl91cmwiLCJzb3VyY2VfdmFsdWVfb2JqZWN0IiwiY2FjaGVfbWV0cmljcyIsImxhc3RfbWV0cmljc190aW1lX2ludGVydmFsIiwiY3VycmVudF9sYXN0X21ldHJpY3NfdGltZV9pbnRlcnZhbCIsImVwb2NoX3N0cmluZyIsImdldF9tZXRyaWNzX3VybCIsInNvdXJjZV9hcnJheV9rZXkiLCJnZXRfbWV0cmljX2tleSIsImRlZmF1bHRfdmlzaWJsZSIsIm1ldHJpY19zY2hlbWEiLCJnZXRfbWV0cmljX3F1ZXJ5X2Zyb21fdHNfcXVlcnkiLCJzb3VyY2VfZGVmX2RpY3QiLCJzX2RlZiIsInRzX3F1ZXJ5X2FycmF5IiwidHNfdmFsX2tleSIsImRlZmF1bHRfbWV0cmljIiwibWV0cmljc01hbmFnZXIiLCJnZXRfdGltZXNlcmllc19ncm91cHNfZnJvbV91cmwiLCJncm91cHMiLCJQbHVnaW5zIiwiTGVnZW5kIiwieFZhbHVlIiwic2VsZWN0ZWRYIiwicG9pbnRzIiwic2VsZWN0ZWRQb2ludHMiLCJzZWxlY3RlZFJvdyIsImxlZ2VuZE1vZGUiLCJkeWdyYXBoIiwiZ2V0T3B0aW9uIiwiZ2VuZXJhdGVMZWdlbmRIVE1MIiwib25lX2VtX3dpZHRoXyIsIk5vZGUiLCJET0NVTUVOVF9GUkFHTUVOVF9OT0RFIiwibGVnZW5kX2Rpdl8iLCJwb2ludCIsImFyZWEiLCJwbG90dGVyXyIsImxhYmVsc0RpdldpZHRoIiwib2Zmc2V0V2lkdGgiLCJ5QXhpc0xhYmVsV2lkdGgiLCJnZXRPcHRpb25Gb3JBeGlzIiwiaGlnaGxpZ2h0U2VyaWVzIiwiZ2V0SGlnaGxpZ2h0U2VyaWVzIiwiZm9sbG93T2Zmc2V0WCIsImdldE51bWVyaWNPcHRpb24iLCJsZWZ0TGVnZW5kIiwiY2xpZW50WSIsImlzX2dlbmVyYXRlZF9kaXZfIiwiRklMTF9DT0xPUlMiLCJnZXRDb2xvciIsImRlZmF1bHRfY29sb3IiLCJjb2xvclN0ciIsInRvUkdCXyIsImRhcmtlbkNvbG9yIiwiY29sb3JzX21vZHVsZSIsImJhckNoYXJ0UGxvdHRlciIsImRyYXdpbmdDb250ZXh0IiwieV9ib3R0b20iLCJ0b0RvbVlDb29yZCIsInVzZXJfYXR0cnNfIiwidmFsdWVSYW5nZSIsIm1pbl9zZXAiLCJJbmZpbml0eSIsInNlcCIsImNhbnZhc3giLCJiYXJfd2lkdGgiLCJjZW50ZXJfeCIsInl2YWwiLCJmaWxsU3R5bGUiLCJhYnMiLCJmaWxsUmVjdCIsImNhbnZhc3kiLCJzdHJva2VSZWN0IiwiZHlncmFwaFBsb3R0ZXJzIiwidHJhbnNmb3JtQ29sb3JzIiwiY29sb3JzUG9zaXRpb25EaWN0IiwibmV3Q29sb3JzIiwiY29sb3JzUG9zaXRpb24iLCJnZXRDb2xvcnNGcm9tQ29sb3IiLCJjUG9zaXRpb24iLCJiYXNlQ29sb3IiLCJzb3VyY2VDb2xvciIsInJlZFNvdXJjZSIsImdyZWVuU291cmNlIiwiYmx1ZVNvdXJjZSIsImNSZWQiLCJnZXRDb2xvckludGVycG9sYXRpb24iLCJjR3JlZW4iLCJjQmx1ZSIsImNvbXBvbmVudFRvSGV4IiwicmdiVG9IZXgiLCJnZW5lcmF0ZUNvbG9yIiwiY29sb3JTb3VyY2UiLCJjb2xvclN0YXJ0IiwidHJ1bmMiLCJjb2xvckVuZCIsImhleCIsImNvbG9yc0ludGVycG9sYXRpb24iLCJnZXRBeGlzQ29uZmlndXJhdGlvbiIsIm51bV9vcl9taWxsaXMiLCJzZXJpZV9wb2ludCIsInJhd0RhdGFfIiwiYXhpc0xhYmVsV2lkdGgiLCJidWlsZENoYXJ0T3B0aW9ucyIsImludGVycG9sYXRlZF9jb2xvcnMiLCJoaWdobGlnaHRfY29sb3IiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiZ2V0SGlnaGxpZ2h0Q29sb3IiLCJsYWJlbHNTZXBhcmF0ZUxpbmVzIiwiY29ubmVjdFNlcGFyYXRlZFBvaW50cyIsImluY2x1ZGVaZXJvIiwiZHJhd1BvaW50cyIsImhpZ2hsaWdodFNlcmllc0JhY2tncm91bmRBbHBoYSIsImhpZ2hsaWdodFNlcmllc09wdHMiLCJzdHJva2VXaWR0aCIsInBvaW50U2l6ZSIsImhpZ2hsaWdodENpcmNsZVNpemUiLCJheGlzTGFiZWxGb250U2l6ZSIsImN1c3RvbUJhcnMiLCJzdGFja2VkR3JhcGgiLCJ2YWx1ZV9yYW5nZSIsImhpZ2hsaWdodFNlcmllc0JhY2tncm91bmRDb2xvciIsImRpc2FibGVfdHNfbGlzdCIsInlSYW5nZVBhZCIsInBsb3R0ZXIiLCJmb3JtYXR0ZXJzIiwieTEiLCJ5MiIsImNoYW5nZUZvcm1hdHRlcnMiLCJmb3JtYXRTZXJpZVByb3BlcnRpZXMiLCJmaWxsR3JhcGgiLCJzdHJva2VQYXR0ZXJuIiwiREFTSEVEX0xJTkUiLCJmaWxsQWxwaGEiLCJkeWdyYXBoQ29uZmlnIiwiZGVmYXVsdENvbG9ycyIsImNvbnN0YW50X3NlcmllX2NvbG9ycyIsImdldFNlcmllSWQiLCJmb3JtYXRTZXJpZUNvbG9ycyIsInBhbGV0dGVfbGlzdCIsImNvbG9yc19saXN0IiwiY291bnQwIiwiY291bnQxIiwiY29sb3JzMCIsImNvbG9yczEiLCJkM3Y3Iiwic2NoZW1lQ2F0ZWdvcnkxMCIsInBhbGV0dGUiLCJnZXRTZXJpZU5hbWUiLCJ0c0dyb3VwIiwidXNlRnVsbE5hbWUiLCJuYW1lX21vcmVfc3BhY2UiLCJzb3VyY2VfaW5kZXgiLCJnZXRQbG90dGVyIiwiYWRkTmV3U2VyaWUiLCJzZXJpZV9uYW1lIiwiZm9ybWF0Qm91bmRzU2VyaWUiLCJ0aW1lc2VyaWVfaW5mbyIsInRpbWVzZXJpZV9vcHRpb25zIiwibWV0YWRhdGEiLCJlcG9jaF9zdGVwIiwidHNfaW5mbyIsInRzX2lkIiwic2NhbGFyIiwiaW52ZXJ0X2RpcmVjdGlvbiIsIm1lYXN1cmVfdW5pdCIsIk5hTiIsInNwbGl0Qm91bmRTZXJpZSIsImZvcm1hdHRlZF9uYW1lIiwiZm9ybWF0dGVyX2ZvdW5kIiwiZm9ybWF0U3RhbmRhcmRTZXJpZSIsInRzQ29tcGFyZSIsIm1pbl92YWx1ZSIsInBhc3Rfc2VyaWUiLCJhZGRpdGlvbmFsX3NlcmllcyIsImRyYXdfc3RhY2tlZCIsImV4dHJhX3RpbWVzZXJpZXMiLCJ0aW1lc2VyaWVfbmFtZSIsInVzZV9zZXJpZV9uYW1lIiwiZXh0X2xhYmVsIiwiZ2V0TmFtZSIsInVzZV9mdWxsX25hbWUiLCJhdmdfbmFtZSIsInBlcmNfbmFtZSIsInBhc3RfbmFtZSIsInBhc3RfdmFsdWUiLCJuYW1lcyIsImF2Z192YWx1ZSIsInN0YXRpc3RpY3MiLCJwZXJjX3ZhbHVlIiwicGFzdF9sYWJlbCIsImNvbXBhY3RTZXJpZSIsImZvcm1hdFNpbXBsZVNlcmllIiwiY291bnRlciIsInRtcF9zZXJpZSIsImZvcm1hdFNlcmllIiwidHNPcHRpb25zQXJyYXkiLCJ0c0dyb3Vwc0FycmF5IiwidHNPcHRpb25zIiwiYm91bmRzIiwiZm9ybWF0U2luZ2xlU2VyaWUiLCJmdWxsX3NlcmllIiwiZm91bmQiLCJmb3JtYXRGdWxsU2VyaWUiLCJkeWdyYXBoRm9ybWF0IiwiZ3JvdXBzT3B0aW9uc01vZGVzRW51bSIsImdldEdyb3VwT3B0aW9uTW9kZSIsImdyb3VwX2lkIiwidHNBcnJheVRvT3B0aW9uc0FycmF5IiwiZ3JvdXBzT3B0aW9uc01vZGUiLCJ0c0FycmF5VG9PcHRpb25zQXJyYXlSYXciLCJzcGxpdHRlZFRzQXJyYXkiLCJ0c09wdGlvbnNBcnJheVN0YWNrZWQiLCJ0c0dyb3Vwc0FycmF5U3RhY2tlZCIsInRzT3B0aW9uc0FycmF5Tm90U3RhY2tlZCIsInRzR3JvdXBzQXJyYXlOb3RTdGFja2VkIiwibm90X3N0YWNrZWQiLCJzcGxpdFRzQXJyYXlTdGFja2VkIiwidHNEaWN0IiwieWF4aXNJZCIsInRzRWwiLCJkaXNwbGF5X2Z1bGxfbmFtZSIsIkR5Z3JhcGhPcHRpb25zQXJyYXkiLCJ0c0FycmF5IiwidHNPcHRpb25zQXJyYXkyIiwidHNHcm91cHNBcnJheTIiLCJEeWdyYXBoT3B0aW9ucyIsInRzQXJyYXlUb09wdGlvbnMiLCJvcHRpb25zQXJyYXkiLCJnZXRUc1F1ZXJ5Iiwibm90X21ldHJpY19xdWVyeSIsInRzUXVlcnkiLCJnZXRNYWluU291cmNlRGVmSW5kZXgiLCJnZXRUc0NoYXJ0c0RhdGFVcmwiLCJodHRwUHJlZml4IiwiZXBvY2hTdGF0dXMiLCJ0aW1lc2VyaWVzR3JvdXBzIiwiaXNQcm8iLCJwYXJhbXNFcG9jaE9iaiIsInVybF9hbmRfYm9keSIsInBhcmFtc0NoYXJ0IiwidHNfY29tcGFyZSIsInRzUmVxdWVzdHMiLCJtYWluX3NvdXJjZV9pbmRleCIsInBPYmoiLCJ0c2tleSIsInRzX3JlcXVlc3RzIiwidHNEYXRhVXJsIiwicGFyYW1zVXJsUmVxdWVzdCIsInBVcmxSZXF1ZXN0IiwiZ2V0VHNDaGFydHNPcHRpb25zIiwidHNDaGFydHNPcHRpb25zIiwidGltZXNlcmllc1V0aWxzIiwic2VsZWN0X3NlYXJjaF9tZXRyaWNzIiwiY3VycmVudF9wYWdlX3NvdXJjZV90eXBlIiwic2VsZWN0ZWRfc291cmNlX3R5cGUiLCJzb3VyY2VzX2FycmF5Iiwic2VsZWN0ZWRfc291cmNlX2FycmF5Iiwic2VsZWN0ZWRfc291cmNlX3RleHRfYXJyYXkiLCJzZWxlY3RlZF9zb3VyY2VzX3VuaW9uX2xhYmVsIiwic291cmNlX3RleHRfdmFsaWRhdGlvbl9hcnJheSIsImlzX3NlbGVjdGVkX3NvdXJjZV9jaGFuZ2VkIiwiZW5hYmxlX2FwcGx5X3NvdXJjZSIsInJnX3RleHQiLCJzb3VyY2VfdGV4dCIsImhpZGVfc291cmNlcyIsInNlbGVjdGVkX21ldHJpYyIsInRpbWVzZXJpZXNfZ3JvdXBzX2FkZGVkIiwidGltZXNlcmllc190b19hZGQiLCJ3YWl0X2luaXQiLCJjaGFuZ2Vfc291cmNlX3R5cGUiLCJ1cGRhdGVfdGltZXNlcmllc190b19hZGQiLCJjaGFuZ2VfYWN0aW9uIiwicmVnZXhfc291cmNlX2FycmF5IiwicmVnZXhfc291cmNlIiwic2V0X3JlZ2V4Iiwic2QiLCJzZXRfaGlkZV9zb3VyY2VzIiwic291cmNlc19hcnJheV90ZW1wIiwiZGVmYXVsdF9zb3VyY2VfYXJyYXkiLCJkZWZhdWx0X3NvcnVjZV92YWx1ZV9hcnJheSIsInNldF9zZWxlY3RlZF9zb3VyY2VzX3VuaW9uX2xhYmVsIiwic2V0X3NvdXJjZXNfYXJyYXkiLCJzZXRfbWV0cmljcyIsImFwcGx5X3NvdXJjZV9hcnJheSIsInNldF9zb3VyY2VfaW5wdXQiLCJjaGFuZ2Vfc291cmNlX2FycmF5IiwiY2hhbmdlX3NlbGVjdGVkX3NvdXJjZSIsInNvdXJjZV9kZWZfaW5kZXgiLCJmb3JjZV9yZWxvYWRfc291cmNlcyIsInJlbG9hZF9zb3VyY2VzIiwiaW5wdXRfY29uZmlybSIsImRlZmF1bHRfY29uZmlnIiwiZ2V0X3RpbWVzZXJpZXNfZ3JvdXBfbmFtZSIsInNvdXJjZV90eXBlX25hbWUiLCJnZXRfdGltZXNlcmllc19ncm91cF9pZCIsInRzX2dyb3VwX2lkIiwiYWRkX3RzX2dyb3VwIiwidHNfZ3JvdXBfdG9fYWRkIiwiZW1pdF9hcHBseSIsInRzX2dyb3VwX2luZGV4Iiwic2V0X3RpbWVzZXJpZXNfZ3JvdXBzIiwiZmlsZW5hbWVfdmFsaWRhdGlvbiIsImVuYWJsZV9kb3dubG9hZCIsImV4dCIsInNhdmVfbGFzdF9zb3J0IiwibGFzdF9zb3J0aW5nIiwic29ydGluZ19wcmVmIiwic29ydGluZ19rZXkiLCJsb2FkX2xhc3Rfc29ydCIsInVuZm9ybWF0dGVkX3ByZWYiLCJzcGxpdHRlZF9wcmVmIiwiYmFzZV9wYXJhbXMiLCJleHRlbmRfY29uZmlnIiwic2VydmVyU2lkZSIsInNjcm9sbFgiLCJzZWFyY2hpbmciLCJjb2x1bW5zX2NvbmZpZyIsImF1dG9XaWR0aCIsInRhYmxlQXBpIiwib0luc3RhbmNlIiwiYXBpIiwib3JkZXJDb2x1bW5JbmRleCIsIm9yZGVyQ29sdW1uTmFtZSIsImJlZm9yZVNlbmQiLCJzaG93T3ZlcmxheXMiLCJkcmF3Q2FsbGJhY2siLCJoaWRlT3ZlcmxheXMiLCJhTGFzdFNvcnQiLCJnZXRTdGREYXRhdGFibGVDb25maWciLCJ0YWJsZV9idXR0b25zIiwiZXh0ZW5kQ29uZmlnIiwiRGF0YVRhYmxlIiwibG9hZF90YWJsZV9tZW51IiwiZmlsdGVyX2J1dHRvbnMiLCJjdXJyX3ZhbHVlIiwibnVtX25vbl9hY3RpdmVfZW50cmllcyIsImxvYWREYXRhdGFibGUiLCJ0YWJsZV9kZWZhdWx0X21lbnUiLCJ0YWJsZV93cmFwcGVyIiwiZ2V0X3RhYmxlX2RlZmF1bHRfbWVudSIsIm1lbnVfYXJyYXkiLCJ2Tm9kZSIsInJlbmRlcl9jb21wb25lbnQiLCJkZWxldGVfYnV0dG9uX2hhbmRsZXJzIiwiZGVsZXRlQnV0dG9uSGFuZGxlcnMiLCJpc19kZXN0cm95ZWQiLCJkZXN0cm95X3RhYmxlIiwicmVmcmVzaF9tZW51IiwiaXNfbGFzdF9zb3J0aW5nX2F2YWlsYWJsZSIsInZhbHVlX3RvX3NlYXJjaCIsImlkX2RhdGVfdGltZV9waWNrZXIiLCJjaGFydHMiLCJkYXRlX3RpbWVfcGlja2VyIiwidG9wX3RhYmxlX3JlZiIsIm1vZGFsX3RpbWVzZXJpZXMiLCJtb2RhbF9kb3dubG9hZF9maWxlIiwiaXNfc2FmYXJpIiwiaW1hZ2VfYnV0dG9uX3RpdGxlIiwiZW5hYmxlX3N0YXRzX3RhYmxlIiwiY2hhcnRzX29wdGlvbnNfaXRlbXMiLCJncm91cHNfb3B0aW9uc19tb2RlcyIsImN1cnJlbnRfZ3JvdXBzX29wdGlvbnNfbW9kZSIsImdyb3Vwc19tb2RlIiwiaW5pdF9ncm91cHNfb3B0aW9uX21vZGUiLCJsYXN0X3RpbWVzZXJpZXNfZ3JvdXBzX2xvYWRlZCIsImN1c3RvbV9tZXRyaWMiLCJwYWdlX3NuYXBzaG90cyIsInRzX21lbnVfcmVhZHkiLCJjb2x1bW5zX3RtcCIsInN0YXRzX2NvbHVtbnMiLCJzZXRfZGVmYXVsdF9zb3VyY2Vfb2JqZWN0X2luX3VybCIsInB1c2hfY3VzdG9tX21ldHJpYyIsImxvYWRfcGFnZV9zdGF0c19kYXRhIiwiY2FjaGVfc25hcHNob3RzIiwiZW5hYmxlX3NuYXBzaG90cyIsIm1ldHJpY3Nfc25hcHNob3RzIiwiaXNfc25hcHNob3QiLCJnZXRfc25hcHNob3RzX21ldHJpY3MiLCJzbSIsImdldF90aW1lc2VyaWVzX2dyb3Vwc19mcm9tX21ldHJpYyIsInNlbGVjdF9tZXRyaWMiLCJ1cmxfcGFyYW1ldGVycyIsInRpbWVzZXJpZXNfdXJsX3BhcmFtcyIsImdldF9zZWxlY3RlZF90aW1lc2VyaWVzX2dyb3VwcyIsImxvYWRfc2VsZWN0ZWRfbWV0cmljX3BhZ2Vfc3RhdHNfZGF0YSIsInJlZnJlc2hfbWV0cmljcyIsImVwb2NoX2NoYW5nZSIsIm5ld19lcG9jaCIsImlzX250b3BfcHJvIiwic2VsZWN0ZWRfdG9wX3RhYmxlIiwidGFibGVfY29uZmlnX2RlZiIsImdldF90b3BfdGFibGVfdXJsIiwicmVmcmVzaF90b3BfdGFibGUiLCJjaGFydF9yZWxvYWRlZCIsInNob3dfbWFuYWdlX3RpbWVzZXJpZXMiLCJnZXRfZl9nZXRfY3VzdG9tX2NoYXJ0X29wdGlvbnMiLCJjaGFydF9pbmRleCIsInRzX2NoYXJ0c19vcHRpb25zIiwicmVmcmVzaF9zbmFwc2hvdHMiLCJhcHBseV9tb2RhbF90aW1lc2VyaWVzIiwiY2hhbmdlX2dyb3Vwc19vcHRpb25zX21vZGUiLCJyZWxvYWRfY2hhcnRzX2RhdGEiLCJyZWxvYWRfdG9wX3RhYmxlX29wdGlvbnMiLCJyZWZyZXNoZWRfdGltZV9pbnRlcnZhbCIsImdldF90c19jb21wYXJlIiwic2V0X3RpbWVzZXJpZXNfZ3JvdXBzX3NvdXJjZV9sYWJlbCIsImNoYXJ0c19vcHRpb25zIiwidXBkYXRlX2NoYXJ0cyIsInNldF9jaGFydHNfb3B0aW9uc19pdGVtcyIsImV4dGVuZF9zZXJpZV9uYW1lIiwiZGlzYWJsZV9zdGF0cyIsImZfZ2V0X3RvdGFsX2Zvcm1hdHRlcl90eXBlIiwibWFwX3R5cGUiLCJzdGF0c19yb3dzIiwidHNfc3RhdHMiLCJzX21ldGFkYXRhIiwidG90YWxfZm9ybWF0dGVyX3R5cGUiLCJ0b3RhbF9mb3JtYXR0ZXIiLCJhdmVyYWdlIiwibWF4X3ZhbCIsIm1pbl92YWwiLCJzZXRfc3RhdHNfcm93cyIsInRzX2dyb3VwX2RpY3QiLCJ0b3BfdGFibGVfaWRfZGljdCIsInRvcF90YWJsZV9vcHRpb25zIiwibWFpbl9zb3VyY2UiLCJzb3VyY2VfdHlwZV90YWJsZXMiLCJlbmFibGVzX3RhYmxlX3ZhbHVlIiwic291cmNlc190eXBlc190b3BfZW5hYmxlZCIsInJlbmRlcl9pZl9jb250ZXh0Iiwic2V0X3RvcF90YWJsZV9vcHRpb25zIiwidGFibGVfdmlldyIsInBfb2JqIiwiZGV0YWlsX3ZpZXciLCJuZXdfY2hhcnRzIiwianVtcF90b19oaXN0b3JpY2FsX2Zsb3dzIiwiaGlzdG9yaWNhbF91cmwiLCJzaG93X21vZGFsX2Rvd25sb2FkX2ZpbGUiLCJjaGFydF9pbWFnZV9hcnJheV9wcm9taXNlIiwiY2FudmFzIiwiSW1hZ2UiLCJyZWplY3QiLCJjaGFydF9pbWFnZV9hcnJheSIsImNhbnZhc19jb250ZXh0IiwiZ2V0Q29udGV4dCIsImRyYXdJbWFnZSIsInRvRGF0YVVSTCIsInNjcmlwdCQxYiIsInRhYl9saXN0Iiwib2xkX3RhYiIsInRtcCIsImNoYW5nZV90YWIiLCJib2R5X2RlbGV0ZSIsInRpdGxlX2RlbGV0ZSIsImRlbGV0ZV8iLCJjaGFuZ2VfYXNzZXRfdGFibGVfdGFiX2V2ZW50Iiwic2NyaXB0JDE5IiwiZGF0YXRhYmxlIiwiRGF0YXRhYmxlIiwiTW9kYWxEZWxldGVDb25maXJtIiwiVGFiTGlzdCIsIk5vdGVMaXN0IiwicGFnZV9jc3JmIiwidGFibGVfZmlsdGVycyIsImFzc2V0X2ZhbWlseSIsImFzc2V0X3RhYmxlX3RhYiIsInNlcnZpY2VfdGFibGVfdGFiIiwiRGF0YXRhYmxlVnVlIiwiZGF0YXRhYmxlQnV0dG9uIiwiZ2V0X3VybCIsInJlbG9hZF90YWJsZSIsInRtcF9wYXJhbXMiLCJkZWZhdWx0RGF0YXRhYmxlQ29uZmlnIiwiY3JlYXRlX2FjdGlvbl9idXR0b25faGlzdG9yaWNhbF9mbG93X2xpbmsiLCJjb25maWdEZXZpY2VzIiwiY29uZmlnX2RldmljZXNfc3RhbmRhcmQiLCJjZW50cmFsaXR5Q29uZmlnRGV2aWNlcyIsImNvbmZpZ19kZXZpY2VzX2NlbnRyYWxpdHkiLCJzdGFydF9kYXRhdGFibGUiLCJoaWRlX2Ryb3Bkb3ducyIsImdldF9hY3RpdmVfdGFibGUiLCJzaG93X2RlbGV0ZV9hbGxfZGlhbG9nIiwidGl0bGVfZG93bmxvYWQiLCJib2R5X2Rvd25sb2FkIiwibm90ZXMiLCJjbGlja19pdGVtIiwiaGlzdG9yaWNhbF9mbG93X2xpbmsiLCJjbGllbnRfaXAiLCJjbGllbnQiLCJzZXJ2ZXJfaXAiLCJzZXJ2ZXIiLCJoaXN0b3JpY2FsX2Zsb3ciLCJfY29tcG9uZW50X21vZGFsX2RlbGV0ZV9jb25maXJtIiwib25EZWxldGUiLCJfY29tcG9uZW50X3RhYl9saXN0Iiwib25DbGlja19pdGVtIiwiX2NvbXBvbmVudF9kYXRhdGFibGUiLCJzY3JpcHQkMTgiLCJpc19hZG1pbiIsImxhc3Rfc2VlbiIsImxpdmVfZmxvd19saW5rIiwibGl2ZV9mbG93IiwiZGVmYXVsdE9wdGlvbnMiLCJhdXRvUmVzaXplIiwic2hhcGUiLCJzY2FsaW5nIiwiZHJhd1RocmVzaG9sZCIsImZvbnQiLCJzaGFkb3ciLCJlZGdlcyIsImluaGVyaXQiLCJzbW9vdGgiLCJyb3VuZG5lc3MiLCJzY2FsZUZhY3RvciIsImFycm93U3RyaWtldGhyb3VnaCIsImltcHJvdmVkTGF5b3V0IiwiaW50ZXJhY3Rpb24iLCJoaWRlRWRnZXNPbkRyYWciLCJoaWRlRWRnZXNPblpvb20iLCJob3ZlciIsInRvb2x0aXBEZWxheSIsInBoeXNpY3MiLCJzb2x2ZXIiLCJzdGFiaWxpemF0aW9uIiwiaXRlcmF0aW9ucyIsImZvcmNlQXRsYXMyQmFzZWQiLCJjZW50cmFsR3Jhdml0eSIsInNwcmluZ0xlbmd0aCIsInVua25vd24iLCJwcmludGVyIiwiZmFjZSIsIndlaWdodCIsInZpZGVvIiwid29ya3N0YXRpb24iLCJsYXB0b3AiLCJ0YWJsZXQiLCJwaG9uZSIsInR2IiwibmV0d29ya2luZyIsIndpZmkiLCJuYXMiLCJtdWx0aW1lZGlhIiwiaW90IiwibnRvcG5nX21hcF9tYW5hZ2VyIiwic2VydmljZV9pZCIsIm5ld19zdGF0ZSIsInNlcnZpY2Vfc3RhdHVzIiwiY2hhbmdlX3NlcnZpY2VfdGFibGVfdGFiX2V2ZW50Iiwic2NyaXB0JDE3Iiwic2VydmljZV9hY2NlcHRhbmNlIiwiY3JlYXRlZENlbGwiLCJhcHBseUNlbGxTdHlsZSIsImNyZWF0ZV9hY3Rpb25fYnV0dG9ucyIsInRvZ2dsZV9hbGxvd2VkX3N0YXRlIiwiaGFzaF9pZCIsInRvZ2dsZV9kZW5pZWRfc3RhdGUiLCJ0b2dnbGVfdW5kZWNpZGVkX3N0YXRlIiwiY3VycmVudFN0YXR1cyIsImFjY2VwdGFuY2UiLCJhbGxvd2VkQnV0dG9uIiwiZGVuaWVkQnV0dG9uIiwidW5kZWNpZGVkQnV0dG9uIiwic3dpdGNoX3RvX3N0YW5kYXJkIiwic3dpdGNoX3RvX2NlbnRyYWxpdHkiLCJkYXRhUmVxdWVzdCIsIm1hcF9pZCIsIm5vZGVzX2RhdGFzZXQiLCJlZGdlc19kYXRhc2V0IiwiaGlnaGxpZ2h0QWN0aXZlIiwibWF4X2VudHJpZXNfcmVhY2hlZCIsImVtcHR5X21hcCIsImRhdGFzZXRzIiwiYWxsX25vZGVzIiwiZ2V0RWxlbWVudEJ5SWQiLCJsb2FkX3NjYWxlIiwicmVxdWVzdF9pbmZvIiwiTmV0d29yayIsInNldF9ldmVudF9saXN0ZW5lciIsIm1heF9lbnRyeV9yZWFjaGVkIiwiRGF0YVNldCIsImdlbmVyYXRlX2h0bWxfdG9vbHRpcCIsInJldHVyblR5cGUiLCJlbXB0eV9uZXR3b3JrIiwib2xkU2NhbGUiLCJsb2FkRWxlbWVudFNjYWxlIiwic2F2ZUVsZW1lbnRTY2FsZSIsInNldE9wdGlvbnMiLCJzZWxlY3RlZE5vZGUiLCJub2RlSWQiLCJvbGRfY29sb3IiLCJvbGRfaWNvbl9jb2xvciIsImhpZGRlbkxhYmVsIiwiY29ubmVjdGVkTm9kZXMiLCJnZXRDb25uZWN0ZWROb2RlcyIsImFsbENvbm5lY3RlZE5vZGVzIiwidXBkYXRlQXJyYXkiLCJuZWlnaGJvdXJob29kSGlnaGxpZ2h0IiwiaG9zdF9pbmZvIiwiZXZlbnRfbGlzdGVuZXJzIiwic2V0RGF0YSIsImlzX21heF9lbnRyeV9yZWFjaGVkIiwiYXV0b2xheW91dCIsInN0YWJpbGl6ZSIsInVwZGF0ZV91cmxfcGFyYW1zIiwiYXV0b2xheW91dF8iLCJjaGFuZ2VfZmlsdGVyX2V2ZW50Iiwic2NyaXB0JDE0IiwiTmV0d29ya01hcCIsIk1vZGFsQXV0b2xheW91dENvbmZpcm0iLCJhbGxfZmlsdGVyX2xpc3QiLCJOZXR3b3JrTWFwVnVlIiwiZmlsdGVyX25hbWUiLCJmaWx0ZXJfbGlzdCIsImFjdGl2ZV9maWx0ZXIiLCJhY3RpdmVfZmlsdGVyX2xpc3QiLCJkb3dubG9hZF91cmwiLCJzdGFydF92aXNfbmV0d29ya19tYXAiLCJyZWxvYWRfbWFwIiwiZmlsdGVyX2VsIiwidXBkYXRlX2FuZF9yZWxvYWRfbWFwIiwiZ2V0X21hcCIsInNob3dfYXV0b2xheW91dF9kaWFsb2ciLCJ1cGRhdGVfdmlld19zdGF0ZV9pZCIsInRpdGxlX2F1dG9sYXlvdXQiLCJib2R5X2F1dG9sYXlvdXQiLCJub19zZXJ2aWNlc19tZXNzYWdlIiwibWF4X2VudHJ5X3RpdGxlIiwiX2NvbXBvbmVudF9tb2RhbF9hdXRvbGF5b3V0X2NvbmZpcm0iLCJvbkF1dG9sYXlvdXQiLCJfY29tcG9uZW50X25ldHdvcmtfbWFwIiwiZW1wdHlfbWVzc2FnZSIsInNjcmlwdCQxMyIsInVwZGF0ZWRfdXJsX3BhcmFtcyIsInNjcmlwdCQxMiIsImlucHV0X21hY19saXN0IiwiaW5wdXRfdHJpZ2dlcl9hbGVydHMiLCJhZGRfIiwibWFjX2xpc3QiLCJ0cmlnZ2VyX2FsZXJ0cyIsImlucHV0X21hY19hZGRyZXNzX25hbWUiLCJpbnB1dF9kZXZpY2Vfc3RhdHVzIiwiY3VzdG9tX25hbWVfcGxhY2Vob2xkZXIiLCJkZXZpY2Vfc3RhdHVzX2xpc3QiLCJlZGl0X2FsbCIsImVkaXRfIiwibWFjX2FsaWFzIiwibWFjX3N0YXR1cyIsInRtcF9kZXZpY2Vfc3RhdHVzIiwidHJpZ2dlcl9hbGVydCIsInRhYmxlX2RldmljZV9leGNsdXNpb25zIiwibW9kYWxfZGVsZXRlX2NvbmZpcm0iLCJtb2RhbF9kZWxldGVfYWxsIiwibW9kYWxfYWRkX2RldmljZSIsIm1vZGFsX2VkaXRfZGV2aWNlIiwiYWRkX3VybCIsImRlbGV0ZV91cmwiLCJlZGl0X3VybCIsImxlYXJuaW5nX3N0YXR1c191cmwiLCJpc19sZWFybmluZ19zdGF0dXMiLCJ0aXRsZV9kZWxldGVfYWxsIiwiYm9keV9kZWxldGVfYWxsIiwidGl0bGVfYWRkIiwiYm9keV9hZGQiLCJmb290ZXJfYWRkIiwibGlzdF9ub3Rlc19hZGQiLCJ0aXRsZV9lZGl0IiwidGl0bGVfZWRpdF9hbGwiLCJsZWFybmluZ19tZXNzYWdlIiwicm93X3RvX2RlbGV0ZSIsInJvd190b19lZGl0Iiwibm90ZXNfbGlzdCIsInN1Yl9ub3Rlc19saXN0IiwiY2xpY2tfYnV0dG9uX2VkaXRfZGV2aWNlIiwiY2xpY2tfYnV0dG9uX2RlbGV0ZSIsImxlYXJuaW5nX3N0YXR1cyIsImNyc2YiLCJkZWxldGVfcm93IiwiZGVsZXRlX2FsbF9jb25maXJtIiwiZWRpdF9hbGxfZGV2aWNlc19jb25maXJtIiwibGVhcm5pbmdfZG9uZSIsImFkZF9kZXZpY2UiLCJhZGRfZGV2aWNlX3Jlc3QiLCJzZXRfcGFyYW1zX2luX3VybCIsImVkaXRfcm93IiwiY29sdW1uc19zb3J0aW5nIiwidGFrZV9pcCIsImNvbnZlcnRJUEFkZHJlc3MiLCJmb3JtYXRfYm9vbCIsInJfY29sIiwic3ltYm9saWNfbWFjIiwiaXNfZW5hYmxlZCIsIm1hcF9jb25maWciLCJzY3JpcHQkXyIsInNjcmlwdCRaIiwiY2hhbmdlX21hcF9ldmVudCIsInNjcmlwdCRZIiwiUGFnZVBlcmlvZGljaXR5TWFwIiwiUGFnZVBlcmlvZGljaXR5VGFibGUiLCJQYWdlQXNzZXRNYXAiLCJQYWdlQXNzZXRUYWJsZSIsIlBhZ2VTZXJ2aWNlTWFwIiwiUGFnZVNlcnZpY2VUYWJsZSIsIlBhZ2VOYXZiYXIiLCJiYXNlX3VybF9wYXJhbXMiLCJuYXZiYXJfaW5mbyIsInNlcnZpY2VfbWFwX2ZpbHRlcl9saXN0Iiwic2VydmljZV90YWJsZV9maWx0ZXJfbGlzdCIsInBlcmlvZGljaXR5X21hcF9maWx0ZXJfbGlzdCIsInBlcmlvZGljaXR5X3RhYmxlX2ZpbHRlcl9saXN0IiwiYXNzZXRfbWFwX2ZpbHRlcl9saXN0IiwiYXNzZXRfdGFibGVfZmlsdGVyX2xpc3QiLCJhY3RpdmVfdGFiIiwidXBkYXRlZF92aWV3IiwibmF2YmFyX2NvbnRleHQiLCJmb3JtYXRfbmF2YmFyIiwiZm9ybWF0X25hdmJhcl90aXRsZSIsInNlbGVjdGVkX2lmYWNlIiwic2VsZWN0ZWRfaG9zdCIsIm5hdmJhcl9ub2RlIiwiZ2V0X2FjdGl2ZV90YWIiLCJyZW1vdmVWbGFuIiwiZm9ybWF0TmFtZVZhbHVlIiwiaXNfYWN0aXZlIiwidGFyZ2V0X2JsYW5rIiwiX2NvbXBvbmVudF9wYWdlX25hdmJhciIsIl9jb21wb25lbnRfcGFnZV9zZXJ2aWNlX21hcCIsIl9jb21wb25lbnRfcGFnZV9zZXJ2aWNlX3RhYmxlIiwiX2NvbXBvbmVudF9wYWdlX3BlcmlvZGljaXR5X21hcCIsIl9jb21wb25lbnRfcGFnZV9wZXJpb2RpY2l0eV90YWJsZSIsIl9jb21wb25lbnRfcGFnZV9hc3NldF9tYXAiLCJzYW5rZXlfY2hhcnRfcmVmIiwic2Fua2V5X3NpemUiLCJnZXRfc2Fua2V5X2RhdGEiLCJub2Rlc19hZGRlZF9kaWN0IiwiZl9hZGRfbm9kZSIsIm5vZGVfaWQiLCJuZXdfbm9kZSIsImZfYWRkX2xpbmsiLCJuZXdfbGluayIsInNvdXJjZV9saW5rIiwic291cmNlX2NvbG9yIiwidGFyZ2V0X2xpbmsiLCJ0YXJnZXRfY29sb3IiLCJ3cmFwX2dyYXBoX3JzcCIsImxpbmtfY29sb3IiLCJ0YXJnZXRfbm9kZSIsInNvdXJjZV9ub2RlIiwic2NhbGVPcmRpbmFsIiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwiZ2V0X3NpemUiLCJzYW5rZXkiLCJub2RlQWxpZ24iLCJzYW5rZXlDZW50ZXIiLCJub2RlV2lkdGgiLCJub2RlUGFkZGluZyIsImV4dGVudCIsInNhbmtleWltcGwiLCJjYWxjdWxhdGVfc2Fua2V5IiwieDAiLCJ5MCIsImVhc2VMaW5lYXIiLCJyZ2IiLCJkYXJrZXIiLCJsZyIsInNhbmtleUxpbmtIb3Jpem9udGFsIiwiZHJhd19zYW5rZXkiLCJjaGFuZ2VfYXBwbGljYXRpb25zX3RhYl9ldmVudCIsInNjcmlwdCRXIiwiQ2hhcnQiLCJpc19jaF9lbmFibGVkIiwiaXNfbG9jYWxlIiwidHNfbDdfZW5hYmxlZCIsInRzX2NhdF9lbmFibGVkIiwiYXBwbGljYXRpb25zX3RhYiIsIlBhZ2VWdWUiLCJwZXJjZW50YWdlX3NlbnQiLCJieXRlc19zZW50IiwidG90X2J5dGVzIiwicGVyY2VudGFnZV9yY3ZkIiwiYnl0ZXNfcmN2ZCIsImNyZWF0ZUJyZWFrZG93biIsImFkZF9hY3Rpb25fY29sdW1uIiwiYXBwbGljYXRpb25zQ29uZmlnIiwiY29uZmlnX2RldmljZXNfYXBwbGljYXRpb25zIiwiY2F0ZWdvcnlfaWQiLCJtb3JlX3Byb3RvcyIsImNhdGVnb3JpZXNDb25maWciLCJjb25maWdfZGV2aWNlc19jYXRlZ29yaWVzIiwiY2hhcnRfb3B0aW9uIiwidHJhZmZpY190YWJsZSIsImNvbmZpZ190cmFmZmljX3RhYmxlIiwidHJhZmZpY0NvbmZpZyIsImNoYXJ0X2RvbmUiLCJ0bXAyIiwibm9fZGF0YSIsInNldF9zYW5rZXlfZGF0YSIsInNhbmtleV9kYXRhIiwic2Fua2V5RGF0YSIsImQzX25vZGVzIiwic2NhbGVFeHRlbnQiLCJ6b29tZWQiLCJkYXRhX29iaiIsInN1YmplY3QiLCJkcmFnU3RhcnQiLCJkcmFnTW92ZSIsImxpbmtzX2QzIiwibGdfZDMiLCJfX3giLCJfX3kiLCJfX3gwIiwiX195MCIsIl9feDEiLCJfX3kxIiwic2V0X25vX2RhdGFfZmxhZyIsInNldF9ub19kYXRhIiwic2Fua2V5X2NoYXJ0Iiwic2Fua2V5X2Zvcm1hdF9saXN0IiwiZmlsdGVyX2ljb24iLCJhY3RpdmVfaG9zdHNfdHlwZSIsIm9uX25vZGVfY2xpY2siLCJpc19saW5rX25vZGUiLCJ1cmxfb2JqIiwidXBkYXRlX3NhbmtleSIsImVudHJ5IiwiaG9zdHNfdHlwZSIsImdldF9zYW5rZXlfdXJsIiwiZ3JhcGgiLCJmX2xvZ19saW5rIiwic291cmNlX25vZGVfaWQiLCJ0YXJnZXRfbm9kZV9pZCIsImZfbG9nIiwibm9kZV9kaWN0IiwiZl9maWx0ZXIiLCJ0YWtlX2VsZW1lbnQiLCJmaWx0ZXJfbG9nIiwiZ2V0X2xpbmtzX3dpdGhfZXhpc3Rpbmdfbm9kZSIsIm1ha2VfY29tcGxldGVfZ3JhcGgiLCJtYWluX25vZGVfaWQiLCJmX2dldF9saW5rX2RpcmVjdGlvbiIsImZfZ2V0X25vZGVfZGlyZWN0aW9uX2lkIiwiZGlyZWN0aW9uIiwiZ3JhcGgyX25vZGVfZGljdCIsImdyYXBoMiIsIm1haW5fbm9kZSIsImZfZ2V0X2xpbmtfbm9kZV9pZCIsImxpbmtfdG9fbm9kZXNfZGljdCIsImxpbmtfbm9kZV9pZCIsImxpbmtfdG9fbm9kZXMiLCJub2RlX2xpbmtzIiwiZ2V0X2xpbmtfdmFsdWUiLCJsaW5rX25vZGUiLCJzYW5rZXlfbm9kZV9kaWN0Iiwic2Fua2V5X25vZGVzIiwic2Fua2V5X25vZGUiLCJzYW5rZXlfbGlua3MiLCJnZXRfc2Fua2V5X2RhdGFfZnJvbV9yZXN0X2RhdGEiLCJ0cmFmZmljIiwiZGF0YVV0aWxzIiwiaXNFbXB0eU9yTnVsbCIsImlzRW1wdHlBcnJheU9yTnVsbCIsImZvcm1hdF9udW1fZm9yX3NvcnQiLCJub3JtYWxpemVfbnVtYmVyX3ZhbHVlIiwibG93ZXJfdmFsdWUiLCJzb3J0QnlOdW1iZXIiLCJ2YWxfMSIsInZhbF8yIiwic29ydEJ5TnVtYmVyV2l0aE5vcm1hbGl6YXRpb25WYWx1ZSIsInNvcnRpbmdGdW5jdGlvbnMiLCJzb3J0QnlJUCIsInNvcnRCeU5hbWUiLCJoYXNfaG9zdF9wb29scyIsImhhc19jaWRyIiwiaG9zdF9wbGFjZWhvbGRlciIsIm1ldHJpY3NfcmVhZHkiLCJtZXRyaWNfbGlzdCIsImluaXRfZnVuYyIsImlmaWRfbGlzdCIsImZsb3dfZXhwb3J0ZXJfZGV2aWNlcyIsImZsb3dfZXhwb3J0ZXJfZGV2aWNlX2lmaWRfbGlzdCIsImludGVyZmFjZV9tZXRyaWNfbGlzdCIsImhvc3RfcG9vbF9tZXRyaWNfbGlzdCIsImZsb3dfZGV2aWNlX21ldHJpY19saXN0IiwiZnJlcXVlbmN5X2xpc3QiLCJ0aHJlc2hvbGRfbWVhc3VyZSIsInRocmVzaG9sZF9zaWduIiwic2VsZWN0ZWRfZnJlcXVlbmN5Iiwic2VsZWN0ZWRfaWZpZCIsInNlbGVjdGVkX2V4cG9ydGVyX2RldmljZSIsInNlbGVjdGVkX2V4cG9ydGVyX2RldmljZV9pZmlkIiwic2VsZWN0ZWRfaW50ZXJmYWNlX21ldHJpYyIsInNlbGVjdGVkX2hvc3RfcG9vbF9tZXRyaWMiLCJzZWxlY3RlZF9mbG93X2RldmljZV9tZXRyaWMiLCJtZXRyaWNfdHlwZSIsInJ1bGVfdHlwZSIsImZsb3dfZGV2aWNlX3RpbWVzZXJpZXNfYXZhaWxhYmxlIiwiaXNfZWRpdF9wYWdlIiwicGFnZV9jc3JmXyIsInJvd190b19lZGl0X2lkIiwiaW52YWxpZF9hZGQiLCJob3N0X3Bvb2xfbGlzdCIsIm5ldHdvcmtfbGlzdCIsInNlbGVjdGVkX2hvc3RfcG9vbCIsInNlbGVjdGVkX25ldHdvcmsiLCJzZWxlY3RlZF9uZXR3b3JrX21ldHJpYyIsIm5ldHdvcmtfbWV0cmljX2xpc3QiLCJ2bGFuX2xpc3QiLCJzZWxlY3RlZF92bGFuIiwidmxhbl9tZXRyaWNfbGlzdCIsInNlbGVjdGVkX3ZsYW5fbWV0cmljIiwiYWN0aXZlX21ldHJpY190eXBlX2xpc3QiLCJtZXRyaWNfdHlwZV9saXN0IiwiZXhwb3J0ZXJfbWV0cmljX3R5cGVfbGlzdCIsInBvb2xfbWV0cmljX3R5cGVfbGlzdCIsImV4cG9ydGVyX3VzYWdlX3R5cGVfbGlzdCIsInZvbHVtZV90aHJlc2hvbGRfbGlzdCIsImRlZmF1bHRfYWN0aXZlIiwidGhyb3VnaHB1dF90aHJlc2hvbGRfbGlzdCIsInNpZ25fdGhyZXNob2xkX2xpc3QiLCJwZXJjZW50YWdlX3RocmVzaG9sZF9saXN0IiwidGhyZXNob2xkIiwicmVzZXRfcmFkaW9fc2VsZWN0aW9uIiwicmFkaW9fYXJyYXkiLCJzZXRfcnVsZV90eXBlIiwiY2hhbmdlX21ldHJpY190eXBlX2hwIiwiY2hhbmdlX21ldHJpY190eXBlX2V4cG9ydGVyIiwidG1wX21ldHJpY190eXBlX2xpc3QiLCJzZXRfYWN0aXZlX29uZSIsImNoYW5nZV92bGFuX3RocmVzaG9sZCIsInNob3dfdm9sdW1lIiwiY2hlY2tfZW1wdHlfaG9zdCIsInNldF9hY3RpdmVfc2lnbl9yYWRpbyIsInNlbGVjdGVkX3JhZGlvIiwibWVhc3VyZSIsInNldF9hY3RpdmVfcmFkaW8iLCJpc19lZGl0IiwidG1wX2hvc3QiLCJ0bXBfZnJlcXVlbmN5IiwidG1wX21ldHJpYyIsInRtcF9tZXRyaWNfbGFiZWwiLCJ0bXBfcnVsZV90eXBlIiwidG1wX2V4dHJhX21ldHJpYyIsImJhc2ljX3ZhbHVlIiwiYmFzaWNfc2lnbl92YWx1ZSIsInRtcF90aHJlc2hvbGQiLCJ0bXBfc2lnbl92YWx1ZSIsInRtcF9tZXRyaWNfdHlwZSIsInRtcF9lZGl0X3Jvd19pZCIsImVtaXRfbmFtZSIsImV4dHJhX21ldHJpYyIsImZyZXF1ZW5jeSIsIm1ldHJpY19sYWJlbCIsInJ1bGVfdGhyZXNob2xkX3NpZ24iLCJydWxlX2lkIiwidG1wX2ludGVyZmFjZV9tZXRyaWMiLCJ0bXBfaW50ZXJmYWNlIiwiZmxvd19kZXZpY2VfaWZpbmRleCIsImZsb3dfZGV2aWNlX2lwIiwibWV0cmljX2V4cCIsIm1ldHJpY19leHBfbGFiZWwiLCJydWxlX2lmaWQiLCJuZXR3b3JrX2lkIiwidG1wX2hvc3RfcG9vbF9pZCIsInRtcF9ob3N0X3Bvb2xfbGFiZWwiLCJob3N0X3Bvb2xfaWQiLCJob3N0X3Bvb2xfbGFiZWwiLCJ0bXBfdmxhbl9pZCIsInRtcF92bGFuX2xhYmVsIiwidmxhbl9sYWJlbCIsInVwZGF0ZV9leHBvcnRlcl9pbnRlcmZhY2VzIiwiaW50ZXJmYWNlc19saXN0IiwidXJsX2RldmljZV9leHBvcnRlcl9kZXRhaWxzIiwiZXhwb3J0ZXJfaW50ZXJmYWNlcyIsInRpbWVzZXJpZXNfYXZhaWxhYmxlIiwiZm9ybWF0X2Zsb3dfZXhwb3J0ZXJfZGV2aWNlX2xpc3QiLCJfZl9leHBfZGV2X2xpc3QiLCJkZXYiLCJmb3JtYXRfdmxhbl9saXN0IiwiZl92bGFuX2xpc3QiLCJ0YWdfc3BsaXR0ZWQiLCJjb2x1bW5fdmxhbiIsImNoYW5nZV9leHBvcnRlcl9pbnRlcmZhY2VzIiwicm93X3RocmVzaG9sZF92YWx1ZSIsImZsb3dfZXhwX2lmaWQiLCJjb250YWlucyIsInNldF9yb3dfdG9fZWRpdCIsInZhbGUiLCJoYXNfdmxhbnMiLCJyZXNldF9tb2RhbF9mb3JtIiwibWV0cmljc0xvYWRlZCIsIl9tZXRyaWNfbGlzdCIsIl9pZmlkX2xpc3QiLCJfaW50ZXJmYWNlX21ldHJpY19saXN0IiwiX2Zsb3dfZXhwb3J0ZXJfZGV2aWNlcyIsIl9mbG93X2V4cG9ydGVyX2RldmljZXNfbWV0cmljX2xpc3QiLCJfaW5pdF9mdW5jIiwiX2RlbGV0ZV9yb3ciLCJfaG9zdF9wb29sX2xpc3QiLCJfbmV0d29ya19saXN0IiwiX2hvc3RfcG9vbF9tZXRyaWNfbGlzdCIsIl9uZXR3b3JrX21ldHJpY19saXN0IiwiX3ZsYW5fbGlzdCIsIl92bGFuX21ldHJpY19saXN0IiwiY29tcGFyZV9sYWJlbHMiLCJmb3JtYXRfaWZpZF9saXN0IiwiaW52YWxpZEFkZCIsInRhYmxlX2hvc3RfcnVsZXMiLCJtb2RhbF9hZGRfaG9zdF9ydWxlIiwibWV0cmljX3VybCIsIm1ldHJpY19pZm5hbWVfdXJsIiwibWV0cmljX2hvc3RfcG9vbF91cmwiLCJtZXRyaWNfbmV0d29ya191cmwiLCJtZXRyaWNfdmxhbl91cmwiLCJtZXRyaWNfZmxvd19leHBfZGV2aWNlX3VybCIsImZsb3dfZGV2aWNlc191cmwiLCJob3N0X3Bvb2xfdXJsIiwibmV0d29ya19saXN0X3VybCIsImlmaWRfdXJsIiwidmxhbnNfdXJsIiwiYWRkX3J1bGVfdXJsIiwicmVtb3ZlX3J1bGVfdXJsIiwiZ3VpIiwiaG9zdF9ydWxlc190YWJsZV9jb25maWciLCJmbG93X2V4cG9ydGVyX2xpc3QiLCJmbG93X2V4cG9ydGVyX21ldHJpY19saXN0IiwiZWRpdCIsImFkZF9ob3N0X3J1bGUiLCJpbml0X2VkaXQiLCJkZWxldGVfaGFuZGxlciIsImVkaXRfaGFuZGxlciIsImZvcm1hdHRlZF9kYXRhIiwiaW50ZXJmYWNlX2xhYmVsIiwiZmxvd19leHBfaWZpZF9uYW1lIiwiZm9ybWF0X3RhcmdldCIsImZvcm1hdF9ydWxlX3R5cGUiLCJmb3JtYXRfbWV0cmljIiwiZnJlcXVlbmN5X3RpdGxlIiwiZm9ybWF0X2ZyZXF1ZW5jeSIsImJpdHNUb1NpemUiLCJzaWduX2RhdGEiLCJmcGVyY2VudCIsImZvcm1hdF9sYXN0X21lYXN1cmVtZW50IiwiZm9ybWF0X3RocmVzaG9sZCIsImhvc3RSdWxlc1RhYmxlQ29uZmlnIiwiZ2V0X21ldHJpY19saXN0IiwiZ2V0X2lmaWRfbGlzdCIsImdldF9pbnRlcmZhY2VfbWV0cmljX2xpc3QiLCJnZXRfZmxvd19leHBvcnRlcl9kZXZpY2VzX21ldHJpY19saXN0IiwiZ2V0X2Zsb3dfZXhwb3J0ZXJfZGV2aWNlc19saXN0IiwidG1wX2hvc3RfcG9vbF9saXN0IiwiZ2V0X2hvc3RfcG9vbF9saXN0IiwidG1wX2hvc3RfcG9vbF9tZXRyaWNfbGlzdCIsImdldF9ob3N0X3Bvb2xfbWV0cmljX2xpc3QiLCJ0bXBfbmV0d29ya19saXN0IiwiZ2V0X25ldHdvcmtfbGlzdCIsInRtcF9uZXR3b3JrX21ldHJpY19saXN0IiwiZ2V0X25ldHdvcmtfbWV0cmljX2xpc3QiLCJnZXRfdmxhbnMiLCJ0bXBfdmxhbl9tZXRyaWNfbGlzdCIsImdldF92bGFuX21ldHJpY19saXN0IiwidGFibGVfb3B0aW9ucyIsInBvcnRfaW5mbyIsInJlc3RfdXJsIiwid2lkZ2V0X25hbWUiLCJidWJibGVfY2hhcnQiLCJmb3JtYXRfcmVxdWVzdCIsInBhcmFtc19zdHJpbmciLCJidWJibGVfbW9kZSIsInRpbWVmcmFtZSIsIm1vZGVfaWQiLCJvcHRpb25fbGlzdCIsIm50b3BfZXZlbnRzIiwiZnVuIiwiZm5vbmUiLCJmb3JtYXRfb3B0aW9ucyIsImF2YWlsYWJsZV9maWx0ZXJzIiwibm9fZGF0YV9tZXNzYWdlIiwiYm9keV9kaXYiLCJsaXZlX3Jlc3QiLCJoaXN0b3JpY2FsX3Jlc3QiLCJ1cGRhdGVfaGVpZ2h0IiwidXBkYXRlX3dpZHRoIiwibDRwcm90byIsImNoZWNrX21heF9lbnRyaWVzIiwib3B0aW9uYWxfaW5mbyIsImNyaXRlcmlhX2xpc3RfZGVmIiwiZW50ZXJwcmlzZV9tIiwic2VhcmNoX2VuYWJsZWQiLCJ0YWJsZV9hZ2dyZWdhdGVkX2xpdmVfZmxvd3MiLCJmaWx0ZXJfdGFibGVfYXJyYXkiLCJmaWx0ZXJfdGFibGVfZHJvcGRvd25fYXJyYXkiLCJzZWxlY3RlZF9jcml0ZXJpYSIsImNyaXRlcmlhX2xpc3QiLCJpc19udG9wX2VudGVycHJpc2VfbSIsImNyaXRlcmFfbGlzdF9kZWZfY29tIiwidXBkYXRlX2NyaXRlcmlhIiwiYWdncmVnYXRpb25fY3JpdGVyaWEiLCJpbml0X3NlbGVjdGVkX2NyaXRlcmlhIiwibG9hZF90YWJsZV9maWx0ZXJzX2FycmF5Iiwic2V0X2ZpbHRlcl9hcnJheV9sYWJlbCIsImxvYWRfdGFibGVfZmlsdGVyc19vdmVydmlldyIsImRldmljZUlQIiwiYmFzaWNfbGFiZWwiLCJ1cmxfZW50cnkiLCJnZXRfb3Blbl9maWx0ZXJfdGFibGVfZHJvcGRvd24iLCJmaWx0ZXJfaW5kZXgiLCJuZXdfZmlsdGVyX2FycmF5IiwibG9hZF90YWJsZV9maWx0ZXJzIiwiaWZpZF9wYXJhbSIsImlmaWRfcGFyYW1fZm9yX3VybCIsImZvcm1hdF9mbG93c19pY29uIiwiZm9ybWF0X2FwcGxpY2F0aW9uX3Byb3RvX2d1ZXNzZWQiLCJmb3JtYXRfY2xpZW50X25hbWUiLCJmb3JtYXRfc2VydmVyX25hbWUiLCJ2bGFucyIsInBlcmNlbnRhZ2VfYnl0ZXNfc2VudCIsInBlcmNlbnRhZ2VfYnl0ZXNfcmN2ZCIsImFsZXJ0X2xhYmVsIiwiaXNfYWxlcnRlZCIsImluX21lbW9yeSIsImV4dHJhX2xhYmVscyIsImFkZF9ob3N0IiwiYXBwbGljYXRpb24iLCJsYWJlbF93aXRoX2ljb25zIiwiY29uZmlkZW5jZV9uYW1lIiwidGFibGVfdGVzdCIsInNldF9kYXRhdGFibGVfY29uZmlnIiwidHlwZV9hcnJheSIsImRlZmF1bHRfZGlyZWN0aW9uX3ZhbHVlIiwiZGlyZWN0aW9ucyIsImJpZGlyZWN0aW9uYWwiLCJzZWxlY3RlZF9kaXJlY3Rpb24iLCJkZWZhdWx0X2FjdGlvbl92YWx1ZSIsInNlbGVjdGVkX2FjdGlvbiIsIm5ld19ydWxlX2lkIiwic291cmNlX3JlZ2V4Iiwic2VsZWN0ZWRfZGVzdF90eXBlIiwiZGVzdF9yZWdleCIsImRlc3QiLCJpbnRlcmZhY2VfbGlzdF91cmwiLCJpbnRlcmZhY2VfbGlzdCIsImludGVyZmFjZV9hcnJheSIsInNlbGVjdGVkX3NvdXJjZV9pbnRlcmZhY2UiLCJzZWxlY3RlZF9kZXN0X2ludGVyZmFjZSIsImJ1dHRvbl90ZXh0IiwiaXNfdmFsaWRfc291cmNlIiwiaXNfdmFsaWQiLCJpc192YWxpZF9kZXN0IiwiaXNfb3Blbl9pbl9hZGQiLCJzZXRfaW50ZXJmYWNlX2FycmF5IiwiY2hhbmdlX2Rlc3RfdHlwZSIsImRlc3RpbmF0aW9uIiwic2VsZWN0ZWRfdHlwZSIsImlzX3NldF9pbnRlcmZhY2VfYXJyYXkiLCJyZXNfaW50ZXJmYWNlX2xpc3QiLCJyZyIsInNyY190eXBlIiwic3JjX3ZhbHVlIiwiZHN0X3R5cGUiLCJkc3RfdmFsdWUiLCJwb2xpY3kiLCJkZWZhdWx0X2FjdGlvbiIsImRlZmF1bHRfdHlwZSIsInRhYmxlX3J1bGVzIiwibW9kYWxfYWRkX3J1bGVfY29uZmlnIiwibW9kYWxfY2hhbmdlX2RlZmF1bHRfcG9saWN5IiwiZGVmYXVsdF9wb2xpY3kiLCJlZGl0X3J1bGUiLCJydWxlIiwic2V0X3J1bGUiLCJhZGRfcnVsZSIsImxvYWRfZGVmYXVsdF9wb2xpY3kiLCJnZXRfcG9saWN5X3VybCIsInNldF9kZWZhdWx0X3BvbGljeSIsInNldF9wb2xpY3lfdXJsIiwic2hvd19tb2RhbF9jaGFuZ2VfcG9saWN5Iiwid3JhcF9jb2x1bW5zX2NvbmZpZyIsImRlbGV0ZV9ydWxlIiwic2VsZWN0ZWRfY2F0ZWdvcnkiLCJjYXRlZ29yeV9saXN0IiwiY3VzdG9tX3J1bGVzIiwiYXBwbGljYXRpb25fbmFtZSIsImFwcGxpY2F0aW9uX2lkIiwiY2hlY2tfdmFsaWRhdGlvbiIsImNoZWNrX2FwcGxpY2F0aW9uX25hbWUiLCJjaGVja19jdXN0b21fcnVsZXMiLCJjaGVjayIsImw3X3Byb3RvX2lkIiwicHJvdG9jb2xfYWxpYXMiLCJlZGl0X3Jvd19jYXRlZ29yeSIsInBvcHVsYXRlX21vZGFsX2Zvcm0iLCJsb2FkQ2F0ZWdvcnlMaXN0IiwiZm9ybWF0dGVkX2xpc3QiLCJjYXRfaWQiLCJhcHBfbGlzdCIsImZvcm1hdF9jYXRlZ29yeV9saXN0IiwiX3JlbW92ZSIsImFwcGxpY2F0aW9uc190YWJsZSIsIm1vZGFsX2RlbGV0ZV9hcHBsaWNhdGlvbiIsIm1vZGFsX2FkZF9hcHBsaWNhdGlvbiIsImNvbmZpZ19hcHBsaWNhdGlvbnNfdGFibGUiLCJ1cGRhdGVfbWVzc2FnZSIsImNhdGVnb3J5X2xpc3RfdXJsIiwiYWRkX2FwcGxpY2F0aW9uX3VybCIsImRlbGV0ZV9hcHBsaWNhdGlvbl91cmwiLCJzaG93X21lc3NhZ2UiLCJfYWRkIiwib3Blbl9hZGRfbW9kYWwiLCJfbWVzc2FnZSIsImhhc19wcm90b3NfZmlsZSIsImlzX2N1c3RvbSIsImxvYWRfY2F0ZWdvcmllcyIsImZpbHRlcl9hcHAiLCJlcnJvcl9tZXNzYWdlIiwiZGlzY292ZXJ5X3JlcXVlc3RlZCIsIm5ldHdvcmtfZGlzY292ZXJ5X3RhYmxlIiwiY29uZmlnX25ldHdvcmtfZGlzY292ZXJ5IiwicHJvZ3Jlc3NfbWVzc2FnZSIsImxhc3RfbmV0d29ya19kaXNjb3ZlcnkiLCJkaXNjb3ZlcnlfcmVxdWVzdGVkX21lc3NhZ2UiLCJnaG9zdF9tZXNzYWdlIiwidG9vX21hbnlfZGV2aWNlc19tZXNzYWdlIiwiZ2hvc3RfbWVzc2FnZV9hZGRlZCIsInRpbWVvdXRfaWQiLCJkaXNjb3ZlcnlfdXJsIiwibmV0d29ya19kaXNjb3ZlcnlfZGF0YSIsInJ1bl9uZXR3b3JrX2Rpc2NvdmVyeSIsImNoZWNrRGlzY292ZXJ5IiwicHJvZ3Jlc3MiLCJnaG9zdF9mb3VuZCIsImFkZF9ub3RlcyIsInRhYmxlX21hbmFnZV9jb25maWd1cmF0aW9uc19iYWNrdXAiLCJtc19kYXRhIiwiZG93bmxvYWRfYmFja3VwX2hhbmRsZXIiLCJzbm1wX21ldHJpY19saXN0Iiwic25tcF9kZXZpY2VzX2xpc3QiLCJzbm1wX2ludGVyZmFjZXNfbGlzdCIsImVuYWJsZV9pbnRlcmZhY2VzIiwic25tcF9pbnRlcmZhY2VzX3VybCIsInNlbGVjdGVkX3NubXBfZGV2aWNlIiwic2VsZWN0ZWRfc25tcF9pbnRlcmZhY2UiLCJzZWxlY3RlZF9zbm1wX2RldmljZV9tZXRyaWMiLCJtZXRyaWNfdHlwZV9hY3RpdmVfbGlzdCIsInNpZ25fYWJzb2x1dGVfdmFsdWUiLCJjaGFuZ2VfaW50ZXJmYWNlcyIsImludGVyZmFjZV9pZCIsImxhYmVsX3RvX2luc2VydCIsInJlc3VsdF9pbnRlcmZhY2VzIiwiY2hhbmdlX2FjdGl2ZV90aHJlc2hvbGQiLCJsaXN0X21ldHJpY3NfYWN0aXZlIiwidG1wX2RldmljZSIsInRtcF9kZXZpY2VfbGFiZWwiLCJ0bXBfZGV2aWNlX2lmaWQiLCJ0bXBfZGV2aWNlX2lmaWRfbGFiZWwiLCJtZWFzdXJlX3VuaXRfbGFiZWwiLCJzbm1wX2RldmljZV9sYWJlbCIsInNubXBfZGV2aWNlX3BvcnQiLCJzbm1wX2RldmljZV9wb3J0X2xhYmVsIiwic25tcF90aHJlc2hvbGRfdmFsdWUiLCJzbm1wX3RocmVzaG9sZF91bml0Iiwic25tcF9tZXRyaWNfdHlwZV9sYWJlbCIsImRldmljZV9wb3J0IiwiX3NubXBfZGV2aWNlc19saXN0IiwiX3NubXBfbWV0cmljX2xpc3QiLCJkZXZpY2VzX2xpc3QiLCJmb3JtYXRfc25tcF9kZXZpY2VzX2xpc3QiLCJtb2RhbF9hZGRfc25tcF9kZXZpY2VfcnVsZSIsInNubXBfbWV0cmljX3VybCIsInNubXBfZGV2aWNlc191cmwiLCJkZXZpY2VfbGFiZWwiLCJkZXZpY2VfcG9ydF9sYWJlbCIsImZvcm1hdF9pbnRlcmZhY2UiLCJiaXRzVG9TaXplX25vX2NvbW1hIiwiZ2V0X3NubXBfbWV0cmljX2xpc3QiLCJ2ZXJib3NlIiwiZ2V0X3NubXBfZGV2aWNlc19saXN0Iiwic2VsZWN0ZWRfcG9ydCIsInNlbGVjdGVkX2FwcGxpY2F0aW9uIiwidGFibGVfc2VydmVyX3BvcnRzX2FuYWx5c2lzIiwicG9ydF9saXN0IiwiYXBwbGljYXRpb25fbGlzdCIsImw0X3Byb3RvIiwidXBkYXRlX2Ryb3Bkb3duX21lbnVzIiwidXBkYXRlX3BvcnRfbGlzdCIsInVwZGF0ZV9wb3J0Iiwic2V0X3BvcnRfaW5fdXJsIiwibGl2ZV9mbG93cyIsImlzX2FwcGxpY2F0aW9uX3NlbGVjdGVkIiwibDdfcHJvdG9fbmFtZSIsIm5faG9zdHMiLCJwcm90b19pZCIsIm51bV9ob3N0cyIsImZvcm1hdF9pcCIsImZvcm1hdF9ob3N0X25hbWUiLCJmb3JtYXRfbWFjIiwidG90X3RyYWZmaWMiLCJwb3J0X3BsYWNlaG9sZGVyIiwic2VsZWN0ZWRfaW50ZXJmYWNlcyIsInJlcGVhdGVyX3R5cGUiLCJpbnRlcmZhY2VzX3NlYXJjaCIsImtlZXBfc3JjX2FkZHJlc3MiLCJpbnZhbGlkX2lmYWNlX251bWJlciIsIm5vdF92YWxpZF9pcCIsIm5vdF92YWxpZF9wb3J0IiwidXBkYXRlX2Rpc2FibGVfYWRkIiwiY2hlY2tfZW1wdHlfcG9ydCIsInJlcGVhdGVyX3R5cGVfYXJyYXkiLCJyZXBlYXRlcl9pZCIsInNlbGVjdGVkX3JlcGVhdGVyX3R5cGUiLCJhbGxfY3JpdGVyaWEiLCJ1cGRhdGVfaW50ZXJmYWNlc19zZWxlY3RlZCIsInJlbW92ZV9pbnRlcmZhY2VzX3NlbGVjdGVkIiwiaXRlbV90b19kZWxldGUiLCJjaGFuZ2VfcmVwZWF0ZXJfdHlwZSIsInJlcGVhdGVyX3QiLCJrZWVwX3NyY19hZGRyZXNzX3QiLCJpbnRlcmZhY2VzIiwiZGV0YWlscyIsInRtcF9pbnRlcmZhY2VzIiwidG1wX2RldGFpbHMiLCJpbnRlcmZhY2VfZGV0YWlscyIsInJvd19pbnRlcmZhY2VzIiwidG1wX3NlbGVjdGVkX2ludGVyZmFjZXMiLCJyb3dfaWZhY2UiLCJtb2RhbF9hZGRfcmVwZWF0ZXJfY29uZmlnIiwiZWRpdF9yZXBlYXRlciIsInJlcGVhdGVyIiwiYWRkX3JlcGVhdGVyIiwiZm9ybWF0X2ludGVyZmFjZXMiLCJyZXR1cm5fbWVzc2FnZSIsInNob3dfcmV0dXJuX21zZyIsImRlbGV0ZV9ob3N0Iiwic2VyaWFsX2tleSIsIm51bV9ob3N0c19tc2ciLCJkZWxldGVkX2hvc3RzIiwiX3Jvd19pZCIsInNlbGVjdGVkX2Vwb2NoIiwiZXBvY2hfbGlzdCIsInVwZGF0ZV9vcHRpb24iLCJzZWxlY3RlZF92YWx1ZSIsInNlbGVjdGVkX2Zvcm1hdCIsImZvcm1hdF9saXN0IiwidGFibGVfaW5hY3RpdmVfaG9zdHMiLCJtb2RhbF9kb3dubG9hZCIsIm1vZGFsX2RlbGV0ZV9vbGRlciIsImNoYXJ0XzEiLCJjaGFydF8yIiwiY2hhcnRfMyIsInNob3dfY2hhcnRzIiwiaW5hY3RpdmVfaG9zdHNfdGFiX2xpc3QiLCJjaGFuZ2Vfc2hvd19jaGFydHMiLCJpcF9hZGRyZXNzIiwiZGVsZXRlX2FsbF9lbnRyaWVzIiwiZGVsZXRlX2VudHJpZXNfc2luY2UiLCJkZXZpY2VfdHlwZSIsInByaW50X2h0bWxfdGl0bGUiLCJwcmludF9zdGF0c19yb3ciLCJob3N0X3N0YXRzIiwiY3VzdG9tX25hbWUiLCJwcmV2X25hbWUiLCJnZXRfZmxvd2Rldl9hbGlhc191cmwiLCJmbG93ZGV2X2lwIiwidXBkYXRlX2Zsb3dkZXZfYWxpYXNfdXJsIiwiZ2V0Rmxvd0RldkFsaWFzIiwidXBkYXRlRmxvd0RldkFsaWFzIiwiY2hlY2tEaXNhYmxlZCIsIkJJVF9WQUxVRSIsInVwbGlua19zcGVlZCIsInByZXZfdXBsaW5rX3NwZWVkIiwiZG93bmxpbmtfc3BlZWQiLCJwcmV2X2Rvd25saW5rX3NwZWVkIiwiZ2V0X2ludGVyZmFjZV9jb25maWdfdXJsIiwiZGV2aWNlX2lwIiwicG9ydF9pbmRleCIsInVwZGF0ZV9pbnRlcmZhY2VfY29uZmlnX3VybCIsImdldEZsb3dEZXZpY2VJbnRlcmZhY2VDb25maWciLCJ1cGRhdGVJbnRlcmZhY2VDb25maWciLCJkZWxldGVfdHlwZSIsInNob3dfbm90ZV9saXN0IiwiYXV0b21hdGljX3NjYW5fZnJlcXVlbmNpZXNfbGlzdCIsInNlbGVjdGVkX3NjYW5fZnJlcXVlbmN5IiwidXBkYXRlXyIsInNjYW5fZnJlcXVlbmN5Iiwibm9faG9zdF9mZWVkYmFjayIsInBvcnRzX3BsYWNlaG9sZGVyIiwiZW50ZXJwcmlzZV9ub3RlX2xpc3QiLCJzZWxlY3RlZF9zY2FuX3R5cGUiLCJzZWxlY3RlZF9kaXNjb3ZlcmVkX3NjYW5fdHlwZXMiLCJoaWRlX3BvcnRzX3BsYWNlaG9sZGVyIiwiYWN0aXZhdGVfYWRkX3NwaW5uZXIiLCJzY2FuX3R5cGVfbGlzdCIsImRpc2NvdmVyZWRfc2Nhbl90eXBlX2xpc3QiLCJzaG93X3BvcnRfZmVlZGJhY2siLCJpc19lbnRlcnByaXNlX2wiLCJpc19wb3J0X2NvcnJlY3QiLCJpc19jaWRyX2NvcnJlY3QiLCJpc19uZXRzY2FuX29rIiwiaXNfaG9zdF9jb3JyZWN0IiwiaXNfaXB2NF9uZXRzY2FuIiwic2Nhbl9mcmVxdWVuY2llc19saXN0IiwiQ0lEUl8zMiIsImNpZHJfb3B0aW9uc19saXN0Iiwic2VsZWN0ZWRfY2lkciIsImlzX2RhdGFfbm90X29rIiwicmVmcmVzaF9zZWxlY3Rfc2VhcmNoIiwidXBkYXRlX3NlbGVjdGVkX2Rpc2NvdmVyZWRfc2Nhbl90eXBlcyIsInJlbW92ZV9zZWxlY3RlZF9kaXNjb3ZlcmVkX3NjYW5fdHlwZXMiLCJjaGVja19ob3N0X3JlZ2V4IiwiaXNfaXB2NCIsImlzX2lwdjYiLCJpc19ob3N0X25hbWUiLCJjaGVja19wb3J0cyIsImhvc3RfcG9ydHMiLCJob3N0X3NjYW5fdHlwZSIsIm5ld19ob3N0IiwibmV3X2hvc3RfbmFtZV9yZXNvbHZlZCIsInJlc29sdmVfaG9zdF9uYW1lX3VybCIsInJlc29sdmVfaG9zdF9uYW1lIiwidG1wX3NlY29uZF9zY2FuX3R5cGVzIiwidG1wX3NlY29uZF9zY2FuX3R5cGVzX2Zvcm1hdHRlZCIsInNjYW5fcG9ydHMiLCJjaWRyIiwic2Nhbl9pZCIsImRpc2NvdmVyZWRfaG9zdF9zY2FuX3R5cGUiLCJfaG9zdCIsImRpc2NvdmVyZWRfc2Nhbl90eXBlX2lkc19hcnJheSIsInRtcF9mb3VuZF9zY2FuX3R5cGUiLCJ0bXBfc2VsZWN0ZWRfc2Nhbl90eXBlcyIsInNldHRlZF9zY2FuX3R5cGUiLCJfc2Nhbl90eXBlX2xpc3QiLCJfaWZpZCIsIl9pc19lbnRlcnByaXNlX2wiLCJzY2FuX3R5cGVzIiwibnVtX3Z1bG5fZm91bmRfZiIsIm51bV92dWxuX2ZvdW5kIiwiaXNfb2tfbGFzdF9zY2FuIiwibGFzdF9zY2FuIiwibWF4X3Njb3JlX2N2ZV9mIiwibWF4X3Njb3JlX2N2ZSIsImZvbnRfY29sb3IiLCJzY2FuX3R5cGVfZiIsImZyb21fcmVwb3J0IiwiaXNfZG93biIsImxhc3Rfc2Nhbl9mIiwiZHVyYXRpb25fZiIsInNjYW5fZnJlcXVlbmN5X2YiLCJpc19va19sYXN0X3NjYW5fZiIsInBvcnRzX2xpc3Rfc3RyaW5nIiwicG9ydHNfc3RyaW5nIiwiZ2V0X251bV9vcGVuX3BvcnRzX2ljb24iLCJkaWZmX2Nhc2UiLCJ1bnVzZWRfcG9ydF9saXN0IiwiZmlsdGVyZWRfcG9ydF9saXN0IiwidWRwX3BvcnRzX2YiLCJ1ZHBfcG9ydHMiLCJudW1fb3Blbl9wb3J0cyIsImhvc3RfaW5fbWVtIiwibnVtX3BvcnRzX2ljb24iLCJ1ZHBfcG9ydHNfY2FzZSIsInVkcF9wb3J0c191bnVzZWQiLCJ1ZHBfZmlsdGVyZWRfcG9ydHMiLCJ0Y3BfcG9ydHNfZiIsInRjcF9wb3J0cyIsInRjcF9wb3J0c19jYXNlIiwidGNwX3BvcnRzX3VudXNlZCIsInRjcF9wb3J0c19maWx0ZXJlZCIsImdldF9pY29uX2NvbXBvbmVudCIsInBvcnRzX3VudXNlZCIsInBvcnRzX2ZpdGVyZWQiLCJwb3J0X2JhZGdlIiwiZmluZF9iYWRnZSIsInBvcnRzX2ZpbHRlcmVkIiwiaWNvbl9jb21wIiwiYnVpbGRfaG9zdF90b19zY2FuX3JlcG9ydF91cmwiLCJzY2FuX3JldHVybl9yZXN1bHQiLCJzY2FuX2RhdGUiLCJob3N0X2YiLCJob3N0X25vdF9yZWFjaGFibGUiLCJpbnNlcnRfdGV4dCIsImFscmVhZHlfaW5zZXJ0X3RleHQiLCJpbl9wcm9ncmVzc19zY2FuX3RleHQiLCJlbmFibGVfY2xpY2tob3VzZV90ZXh0IiwidGl0bGVfdXBkYXRlX3BlcmlvZGljaXR5X3NjYW4iLCJhZGRfaG9zdF91cmwiLCJlZGl0X2hvc3RfdXJsIiwicmVtb3ZlX2hvc3RfdXJsIiwic2Nhbl9ob3N0X3VybCIsInNjYW5fdHlwZV9saXN0X3VybCIsImFjdGl2ZV9tb25pdG9yaW5nX3VybCIsInNjYW5fcmVzdWx0X3VybCIsImNoZWNrX3N0YXR1c191cmwiLCJ0YWJsZV9ob3N0c190b19zY2FuIiwibW9kYWxfYWRkIiwibW9kYWxfdXBkYXRlX3BlcmlvZGl0aWN5X3NjYW4iLCJpbl9wcm9ncmVzc19udW1iZXIiLCJyb3dfdG9fc2NhbiIsImF1dG9yZWZyZXNoIiwibW9kYWxfb3BlbmVkIiwiY2xpY2tob3VzZV9kaXNhYmxlZCIsImluc2VydF93aXRoX3N1Y2Nlc3MiLCJhbHJlYWR5X2luc2VydGVkIiwiZ2V0X3NjYW5fdHlwZV9saXN0X3YiLCJnZXRfc2Nhbl90eXBlX2xpc3QiLCJjaGVja19pbl9wcm9ncmVzc19zdGF0dXMiLCJpc19jbGlja2hvdXNlX2VuYWJsZWQiLCJjaGVja19hdXRvcmVmcmVzaCIsImNsaWNrX2J1dHRvbl9lZGl0X2hvc3QiLCJjbGlja19idXR0b25fc2NhbiIsImNsaWNrX2J1dHRvbl9kb3dubG9hZCIsImNsaWNrX2J1dHRvbl9zaG93X3Jlc3VsdCIsImNvbXBhcmVfYnlfaG9zdF9pcCIsImNvbHVtbl9kYXRhIiwiZ2V0X3NjYW5fc3RhdHVzX3ZhbHVlIiwicmVmcmVzaF9mZWVkYmFja19tZXNzYWdlcyIsInNjYW5faG9zdF9tc2ciLCJhZGRfaG9zdF9yZXN0Iiwic2V0X2FscmVhZHlfaW5zZXJ0X29yX2luc2VydF93aXRoX3N1Y2Nlc3MiLCJjb2x1bW5zX2Zvcm1hdHRlciIsImlzX3JlcG9ydCIsInNob3dfcmVzdWx0IiwibnVtX3Z1bG5lcmFiaWxpdGllc19mb3VuZCIsIm51bV92cyIsImN1cnJlbnRfY2xhc3MiLCJjbGFzc19pdGVtIiwic2Nhbl90eXBlX2xhYmVsIiwiaW5fcHJvZ3Jlc3MiLCJ1cGRhdGVfYWxsX3NjYW5fZnJlcXVlbmNpZXMiLCJ0b3RhbF9pbl9wcm9ncmVzcyIsInNjYW5zX2VuZGVkIiwiY29uZmlybV9zY2FuX2FsbF9lbnRyaWVzIiwidXBkYXRlX2FsbF9wZXJpb2RpY2l0eSIsInNjYW5fcm93Iiwic2Nhbl9yb3dfcmVzdCIsInNjYW5fc2luZ2xlX2hvc3QiLCJzY2FuX2FsbF9lbnRyaWVzIiwiZGVsZXRlX2FsbF9zY2FuX2hvc3RzIiwiZGVsZXRlX2FsbF9yb3dzIiwidXBkYXRlX21vZGFsX3N0YXR1cyIsIm1lc3NhZ2VfaHRtbCIsInRpdGxlX2h0bWwiLCJob3N0X2hyZWYiLCJpc19pbl9tZW0iLCJnZXRfcmVzdWx0IiwidGFibGVfb3Blbl9wb3J0cyIsImNsaWNrX2J1dHRvbl9zaG93X2hvc3RzIiwiY29tcGFyZV9ieV9wb3J0IiwiZm9ybWF0X251bV9wb3J0c19mb3Jfc29ydCIsImZvcm1hdF9jdmVfbnVtIiwiaG9zdHMiLCJob3N0c19zcGxpdGVkIiwiaG9zdF9zcGxpdHRlZCIsImhvc3RfbGFiZWwiLCJwb3J0X251bWJlciIsInJlcG9ydF9kYXRlIiwicmVwb3J0X25hbWUiLCJpc19yZXBvcnRfbmFtZV9jb3JyZWN0IiwidG1wX3JlcG9ydF9kYXRlIiwidG1wX25hbWUiLCJyZXBvcnRfdGl0bGUiLCJjaGVja190aXRsZSIsImlzUmVwb3J0TmFtZVZhbGlkIiwic2luZ2xlX3dvcmQiLCJvcGVuX3JlcG9ydF91cmwiLCJyZW1vdmVfcmVwb3J0X3VybCIsImVkaXRfcmVwb3J0X3VybCIsInRhYmxlX3ZzX3JlcG9ydHMiLCJtb2RhbF9lZGl0IiwiY2xpY2tfYnV0dG9uX2VkaXQiLCJmb3JtYXR0ZWRfcmVwb3J0X25hbWUiLCJmb3JtYXRfcmVwb3J0X25hbWUiLCJjb21wYXJlX2J5X3JlcG9ydF9kYXRlIiwiZWRpdF9yZXBvcnRfcmVzdCIsInByaW50YWJsZSIsInRhYmxlX3NubXBfdXNhZ2UiLCJjaGFydF9pZCIsImNyZWF0ZV9jb25maWdfdXJsX2xpbmsiLCJsYXN0X3ZhbHVlIiwiY29uZ2VzdGlvbl9yYXRlIiwiY2xpY2tfYnV0dG9uX3RpbWVzZXJpZXMiLCJjbGlja19idXR0b25fY29uZmlndXJhdGlvbiIsInBvc3RfcGFyYW1zIiwidGl0bGVIZWlnaHQiLCJ4QXhpc0hlaWdodCIsInBpeGVsc1BlckxhYmVsIiwieFJhbmdlUGFkIiwiZ3JhbnVsYXJpdHkiLCJyb3VuZGVkX3ZhbHVlIiwibGFiZWxzX2pzb24iLCJjbGlja0NhbGxiYWNrIiwibWV0YWRhdGFfanNvbiIsImluc2lkZV9hX2RldmljZSIsInRhYmxlX3NubXBfaW50ZXJmYWNlcyIsImludGVyZmFjZV9zdGF0dXMiLCJkdXBsZXhfc3RhdHVzIiwiZGV2aWNlX25hbWUiLCJpbnRlcmZhY2VfbmFtZSIsInZsYW5fbmFtZSIsImFkbWluX3N0YXR1cyIsIm51bV9tYWNzIiwiaW5fYnl0ZXMiLCJvdXRfYnl0ZXMiLCJpbl9lcnJvcnMiLCJpbl9kaXNjYXJkcyIsImxhc3RfaW5fdXNhZ2UiLCJsYXN0X291dF91c2FnZSIsImxhc3RfY2hhbmdlIiwibGFzdF9jaGFuZ2Vfc3RyaW5nIiwiYWRkX3RhYmxlX2ZpbHRlciIsImFkZF9pbnRlcmZhY2UiLCJ0YWJsZV90b3BvbG9neSIsInBvcnRfdGhwdF92YWx1ZSIsInN0b3JlX2ZpbGUiLCJnZXRfc3VnZ2VzdGVkX2ZpbGVfbmFtZSIsImFsbG93X3NwYWNlcyIsImZpbGVfc2VsZWN0ZWQiLCJzb3J0X2ZpbGVzX2J5Iiwic2VsZWN0X2ZpbGUiLCJvcGVuX2ZpbGUiLCJkZWxldGVfZmlsZSIsImxpc3RfZmlsZXMiLCJkaXNwbGF5X25hbWUiLCJmaWxlX2NvbnRlbnQiLCJmaWxlX2lucHV0Iiwib25fcGlja19maWxlIiwib25fZmlsZV9waWNrZWQiLCJmaWxlUmVhZGVyIiwidXBsb2FkX2ZpbGUiLCJzZWxlY3RlZF9jb21wb25lbnQiLCJnZXRfY29tcG9uZW50X3R5cGVfaWNvbiIsImNvbXBvbmVudF90eXBlIiwibGlzdF9jb21wb25lbnRzIiwiYWRkX2NvbXBvbmVudCIsInNsaWRlcl92YWx1ZXMiLCJzaXplX2NvbXBvbmVudF92YWx1ZSIsInRpbWVfd2luZG93X2xpc3QiLCJ0aW1lX29mZnNldF9saXN0Iiwib2xkX2NvbXBvbmVudF90b19lZGl0IiwiY29tcG9uZW50X3RpdGxlIiwid2lkdGhfc2VsZWN0ZWQiLCJoZWlnaHRfc2VsZWN0ZWQiLCJwYXJhbXNfanNvbl9kYXRhIiwic2VsZWN0ZWRfdGltZV93aW5kb3ciLCJzZWxlY3RlZF90aW1lX29mZnNldCIsInNob3dfYWR2YW5jZWRfc2V0dGluZ3MiLCJpc05vdEpzb25QYXJhbXNWYWxpZCIsImhpZGRlbk9uUmVwb3J0IiwidXBkYXRlQWR2YW5jZWRTZXR0aW5nc1ZpZXciLCJmb3JtYXRKc29uIiwiZmluZF90aW1lX29iamVjdCIsInRpbWVfdmFsdWUiLCJ0aW1lX2FycmF5Iiwic2V0X29sZF9jb21wb25lbnRfdmFsdWVzIiwib2xkX2NvbXBvbmVudCIsImNvbnZlcnRfc2l6ZV90b19zbGlkZXJfdmFsdWUiLCJ0aW1lX3dpbmRvdyIsInRpbWVfb2Zmc2V0IiwiY29udmVydF9zbGlkZXJfdmFsdWVfdG9fc2l6ZSIsInNfdiIsIm5ld193aWR0aCIsIm5ld19oZWlnaHQiLCJ3aWR0aF9jbGFzcyIsImhlaWdodF9jbGFzcyIsImNvbG9yX2NsYXNzIiwicmVmcmVzaF9jb21wb25lbnQiLCJ0YWJsZV9yb3dzIiwiZGF0YV90eXBlIiwicmVuZGVyX2NvbHVtbiIsImkxOG5fbmFtZSIsInJvd19yZW5kZXJfZnVuY3Rpb25zIiwiZnBhY2tldHMiLCJkYl9zZWFyY2giLCJmb3JtYXRIb3N0IiwiZm9ybWF0TmV0d29yayIsImZvcm1hdEFTTiIsImZvcm1hdENvdW50cnkiLCJmb3JtYXRHZW5lcmljT2JqIiwidnNfc2Nhbl9yZXN1bHQiLCJob3N0c19mIiwiaG9zdHNfbGlzdCIsImhvc3RzX21hcCIsImN2ZXNfZiIsImN2ZXMiLCJjdmVzX21hcCIsImN2ZV9kZXRhaWxzIiwiYWN0dWFsX3Njb3JlIiwiYmFkZ2VfdHlwZSIsInRjcF9wb3J0X2YiLCJwb3J0X2xhYmVsIiwidGNwX3VkcF9wb3J0c19saXN0X2YiLCJ0Y3BfcG9ydHNfbGlzdCIsInVkcF9wb3J0c19saXN0IiwicG9ydHNfbWFwIiwicG9ydF9pZCIsInVkcF9wb3J0c19maWx0ZXJlZCIsImNvbnRlbnRfbGFiZWwiLCJob3N0c19zdHJpbmciLCJkaXNjb3ZlcmRfaG9zdHNfbGlzdF9mIiwicmVuZGVyX3JvdyIsInRhYmxlX3R5cGUiLCJxdWVyeV9wYXJhbXMiLCJnZXRfY29tcG9uZW50X2RhdGEiLCJyZWNvcmRzIiwibWF4X3Jvd3MiLCJtYXhfaGVpZ2h0IiwibGlua191cmwiLCJjb3VudGVyX3ZhbHVlIiwiY291bnRlcl9wYXRoIiwiY291bnRlcl9mb3JtYXR0ZXIiLCJmb3JtYXRDb3VudGVyIiwic2V0X2NvbXBvbmVudF9hdHRyIiwibGlua191cmxfcGFyYW1zIiwibGlua19xdWVyeV9wYXJhbXMiLCJyZWZyZXNoX2NoYXJ0IiwiZ3JvdXBfb3B0aW9uX21vZGUiLCJ0c19yZXF1ZXN0Iiwic3Vic3RpdHV0ZV9pZmlkIiwicGFyYW1zX3RvX2Zvcm1hdCIsImN1cnJlbnRfaWZpZCIsIm5ld19mb3JtYXR0ZWRfcGFyYW1zIiwiZm9ybWF0X2lmaWRzIiwiZm9ybWF0X2V4cG9ydGVycyIsImV4cG9ydGVyc19saXN0IiwiZXhwb3J0ZXIiLCJjdXJyZW50X2V4cG9ydGVyIiwic3Vic3RpdHV0ZV9leHBvcnRlciIsImZvcm1hdF9uZXR3b3JrcyIsIm5ldHdvcmtzX2xpc3QiLCJjdXJyZW50X25ldHdvcmsiLCJzdWJzdGl0dXRlX25ldHdvcmsiLCJhbnlfcGFyYW0iLCJyZXNvbHZlX2FueV9wYXJhbXMiLCJyZXRyaWV2ZV9iYXNpY19pbmZvIiwicmVtb3ZlX2V4dHJhX3BhcmFtcyIsInNhbmtleV92ZXJzaW9uIiwiY29tcG9uZW50c19kaWN0IiwiYmFkZ2UiLCJCYWRnZUNvbXBvbmVudCIsIkVtcHR5Q29tcG9uZW50IiwiUGllQ29tcG9uZW50IiwiVGltZXNlcmllc0NvbXBvbmVudCIsIlRhYmxlQ29tcG9uZW50IiwiU2Fua2V5Q29tcG9uZW50IiwiYWxsb3dfZWRpdCIsInJlcG9ydF9ib3giLCJtb2RhbF9zdG9yZV9yZXBvcnQiLCJtb2RhbF9vcGVuX3JlcG9ydCIsIm1vZGFsX3VwbG9hZF9yZXBvcnQiLCJtb2RhbF9hZGRfdGVtcGxhdGVfY29tcG9uZW50IiwibW9kYWxfZWRpdF90ZW1wbGF0ZV9jb21wb25lbnQiLCJtb2RhbF9kZWxldGVfdGVtcGxhdGUiLCJtYWluX2Vwb2NoX2ludGVydmFsIiwiY29tcG9uZW50c19sb2FkZWQiLCJzZWxlY3RlZF9maWx0ZXJzIiwiYWxsX2F2YWlsYWJsZV9maWx0ZXJzIiwiZmlsdGVyZWRfZmlsdGVycyIsImZpbHRlcnNfdG9fc2hvdyIsIm5lc3RlZF9maWx0ZXJzIiwicmVwb3J0c190ZW1wbGF0ZXMiLCJzZWxlY3RlZF9yZXBvcnRfdGVtcGxhdGUiLCJ3YXJuaW5nX21lc3NhZ2UiLCJjb21wb25lbnRzX2luZm8iLCJkYXRhX2Zyb21fYmFja3VwIiwiZWRpdF9tb2RlIiwidGVtcGxhdGVfc29ydGFibGUiLCJtb2RhbF9uZXdfdGVtcGxhdGUiLCJpc19saXZlIiwiZW5hYmxlX2RhdGVfdGltZV9yYW5nZV9waWNrZXIiLCJlbmFibGVfc21hbGxfcGlja2VyIiwiZW5hYmxlX3NtYWxsX3BpY2tlcl9hY3Rpb25zIiwiZGlzYWJsZV9kYXRlIiwidG9vbGJveCIsImRpc2FibGVfZGF0ZV90aW1lX3BpY2tlciIsImlzX29wZW5fcmVwb3J0IiwiZW5hYmxlX3JlcG9ydF90aXRsZSIsImNvbXBvbmVudF9jdXN0b21fc3R5bGUiLCJjdXN0b21fc3R5bGUiLCJjdXN0b21fcHJpbnRfc3R5bGUiLCJjb21wb25lbnRfaW50ZXJ2YWwiLCJnZXRfdGltZV9pbnRlcnZhbF9zdHJpbmciLCJzZXRfdGVtcGxhdGUiLCJyZXBvcnRfdGVtcGxhdGUiLCJ0ZW1wbGF0ZV9saXN0X2VuZHBvaW50IiwidGVtcGxhdGVzX2xpc3QiLCJyZXBvcnRfdGVtcGxhdGVfdmFsdWUiLCJ0b2dnbGVfZWRpdF9tb2RlIiwic2V0X3RlbXBsYXRlc19saXN0Iiwib3Blbl9yZXBvcnQiLCJsb2FkX2NvbXBvbmVudHMiLCJzZXRfcmVwb3J0X3RpdGxlIiwic2V0X2NvbXBvbmVudHNfZXBvY2hfaW50ZXJ2YWwiLCJzZXRfY29tcG9uZW50c19maWx0ZXIiLCJmaWx0ZXJfaWQiLCJmaWx0ZXJfdmFsdWUiLCJ1cGRhdGVfY29tcG9uZW50X2ZpbHRlcnMiLCJ1cGRhdGVfY29tcG9uZW50X2Vwb2NoX2ludGVydmFsIiwicmVzZXRfZmlsdGVycyIsImhpZGVfbmVzdGVkX2ZpbHRlcnMiLCJsb2FkX2ZpbHRlcnMiLCJmaWx0ZXJzX2F2YWlsYWJsZSIsImFkZGVkX2ZpbHRlcnNfbGlzdCIsInJlcG9ydF9maWx0ZXJzX2VuZHBvaW50IiwiZmlsdGVyX29wdGlvbnMiLCJhbGxfbGFiZWwiLCJuZXN0ZWQiLCJ0ZW1wbGF0ZV9uYW1lIiwidGVtcGxhdGVfZW5kcG9pbnQiLCJjX2V4dCIsImludGVydmFsX3NlY29uZHMiLCJ1dGNfb2Zmc2V0IiwidG9faGlkZV9maWx0ZXJzIiwiZmlsdGVyX3RvX3JlbW92ZSIsImFsbF92YWx1ZSIsInNob3dfbmVzdGVkX2ZpbHRlcnMiLCJmaWx0ZXJfdG9fY2hlY2siLCJjdXJyZW50bHlfc2VsZWN0ZWRfZmlsdGVyIiwiZmlsdGVyX3RvX2FkZCIsImFsbF9maWx0ZXJzIiwiZmlsdGVyc190b19lbmFibGUiLCJzaG93X29ubHlfdmFsdWUiLCJpbmRleF90b19wdXNoIiwic2VsZWN0X3JlcG9ydF90ZW1wbGF0ZSIsInVwZGF0ZV90ZW1wbGF0ZXNfbGlzdCIsInNob3dfc3RvcmVfcmVwb3J0X21vZGFsIiwic2hvd19vcGVuX3JlcG9ydF9tb2RhbCIsInNob3dfdXBsb2FkX3JlcG9ydF9tb2RhbCIsImdldF9zdWdnZXN0ZWRfcmVwb3J0X25hbWUiLCJ1cGxvYWRfcmVwb3J0IiwiY29udGVudF9zdHJpbmciLCJzZXRfcmVwb3J0IiwibG9hZF9yZXBvcnQiLCJsaXN0X3JlcG9ydHMiLCJyZXBvcnRfbGlzdF9lbmRwb2ludCIsImZpbGVzX29iaiIsInRtcF9lcG9jaF9pbnRlcnZhbCIsInRtcF90ZW1wbGF0ZSIsInRtcF9jb21wb25lbnRzX2RhdGEiLCJ0bXBfY29tcG9uZW50c19pbmZvIiwicmVwb3J0X29wZW5fZW5kcG9pbnQiLCJyZXBvcnRfbmFtZV90b19vcGVuIiwidF9lbnRyeSIsImRlbGV0ZV9yZXBvcnQiLCJyZXBvcnRfZGVsZXRlX2VuZHBvaW50Iiwic2VyaWFsaXplX3JlcG9ydCIsImNvbXBvbmVudHNfZGF0YSIsInN0b3JlX3JlcG9ydCIsInJlcG9ydF9zdG9yZV9lbmRwb2ludCIsImRvd25sb2FkX3JlcG9ydCIsInByaW50X3JlcG9ydCIsInByaW50IiwiZXBvY2hfYmVnaW5fbXNlYyIsImVwb2NoX2VuZF9tc2VjIiwidGltZV9pbnRlcnZhbF9zdHJpbmciLCJzZXRfY29tcG9uZW50X2F0dHJfZnVuYyIsInNob3dfbmV3X3RlbXBsYXRlX21vZGFsIiwiZ2V0X3N1Z2dlc3RlZF90ZW1wbGF0ZV9uYW1lIiwibmV3X3RlbXBsYXRlIiwidGVtcGxhdGVfYWRkX2VuZHBvaW50IiwidGVtcGxhdGVfaWQiLCJjb21taXRfdGVtcGxhdGVfY2hhbmdlIiwiY29tcG9uZW50c19pZHMiLCJ0ZW1wbGF0ZV9lZGl0X2VuZHBvaW50IiwiY29tcG9uZW50X2RyYWdnZWQiLCJuZXdfY29tcG9uZW50cyIsInVuc2V0X3NvcnRhYmxlX3RlbXBsYXRlIiwic2V0X3NvcnRhYmxlX3RlbXBsYXRlIiwiZHJhZ196b25lIiwiU29ydGFibGUiLCJkcmFnZ2FibGUiLCJkYXRhSWRBdHRyIiwib25VcGRhdGUiLCJsaXN0X3RlbXBsYXRlX2NvbXBvbmVudHMiLCJ0ZW1wbGF0ZV9saXN0X3dpZGdldHNfZW5kcG9pbnQiLCJ3aWRnZXRzIiwic2hvd19hZGRfdGVtcGxhdGVfY29tcG9uZW50X21vZGFsIiwic2hvd19kZWxldGVfdGVtcGxhdGVfbW9kYWwiLCJhZGRfdGVtcGxhdGVfY29tcG9uZW50IiwidGVtcGxhdGVfY29tcG9uZW50X2FkZF9lbmRwb2ludCIsInJlbW92ZV90ZW1wbGF0ZV9jb21wb25lbnQiLCJjb21wb25lbnRfaWQiLCJkYXRhc2V0IiwiY29tcG9uZW50SWQiLCJzaG93X2VkaXRfdGVtcGxhdGVfY29tcG9uZW50IiwiaXNfcmVwb3J0X3BhZ2UiLCJlZGl0X3RlbXBsYXRlX2NvbXBvbmVudCIsIm5ld19jb21wb25lbnQiLCJ0ZW1wbGF0ZV9jb21wb25lbnRfZWRpdF9lbmRwb2ludCIsImNvbXBvbmVudF9oZWlnaHQiLCJjb21wb25lbnRfd2lkdGgiLCJjb21wb25lbnRfdGltZV9vZmZzZXQiLCJjb21wb25lbnRfdGltZV93aW5kb3ciLCJjb21wb25lbnRfcGFyYW1zIiwiZGVsZXRlX3RlbXBsYXRlIiwidGVtcGxhdGVfZGVsZXRlX2VuZHBvaW50IiwiZXhjbHVkZV90eXBlIiwiaW5wdXRfaXAiLCJpbnB1dF9uZXR3b3JrIiwiaW5wdXRfdmxhbiIsImlucHV0X3RleHQiLCJob3N0X3NlbGVjdGVkIiwiZmxvd19zZWxlY3RlZCIsIm5ldG1hc2siLCJwYXR0ZXJuX2lwIiwic2V0X2V4Y2x1ZGVfdHlwZSIsImRpc2FibGVfYXBwbHkiLCJhbGVydF9leGNsdXNpb25zX3BhZ2UiLCJub3JtYWxpemVfYWxlcnRfa2V5X3ZhbHVlIiwiYWxlcnRfa2V5Iiwib2xkX3R5cGUiLCJvbGRfc3ViZGlyIiwic3ViZGlyIiwib2xkX2FsZXJ0X2RvbWFpbiIsIm9sZF9hbGVydF9jZXJ0aWZpY2F0ZSIsIm9sZF9hbGVydF9hZGRyIiwib2xkX2Zsb3dfYWxlcnRfa2V5Iiwib2xkX2hvc3RfYWxlcnRfa2V5IiwibmV0d29ya19kZXRhaWxzIiwidmxhbl9zcGxpdCIsIm50b3BWdWUiLCJQYWdlQWxlcnRTdGF0cyIsIlBhZ2VGbG93SGlzdG9yaWNhbCIsIlBhZ2VTdGF0cyIsIlBhZ2VEZXZpY2VFeGNsdXNpb25zIiwiUGFnZUhvc3RUTFMiLCJQYWdlSG9zdFNTSCIsIlBhZ2VIb21lTWFwIiwiUGFnZVNhbmtleSIsIlBhZ2VIb3N0UnVsZXMiLCJQYWdlQWxlcnRBbmFseXNpcyIsIlBhZ2VIb3N0TWFwIiwiUGFnZU1hbmFnZUNvbmZpZ3VyYXRpb25CYWNrdXAiLCJQYWdlU05NUERldmljZVJ1bGVzIiwiUGFnZUhvc3RzUG9ydHNBbmFseXNpcyIsIlBhZ2VJbmFjdGl2ZUhvc3RzIiwiUGFnZUluYWN0aXZlSG9zdERldGFpbHMiLCJQYWdlVnVsbmVyYWJpbGl0eVNjYW4iLCJQYWdlSG9zdFZzUmVzdWx0IiwiUGFnZU9wZW5Qb3J0cyIsIlBhZ2VWdWxuZXJhYmlsaXR5U2NhblJlcG9ydCIsIlBhZ2VTTk1QVXNhZ2UiLCJQYWdlU05NUEludGVyZmFjZXMiLCJQYWdlVG9wb2xvZ3kiLCJQYWdlRWRpdEFwcGxpY2F0aW9ucyIsIlBhZ2VWTEFOUG9ydHNGbG93U2Fua2V5IiwiUGFnZVZMQU5Qb3J0c1NhbmtleSIsIlBhZ2VUZXN0VGFibGUiLCJQYWdlU25tcERldmljZXNJbnRlcmZhY2VzU2ltaWxhcml0eSIsIk5lZGdlUnVsZXNDb25maWciLCJOZWRnZVJlcGVhdGVyc0NvbmZpZyIsIlBhZ2VIb3N0RGV0YWlsc0FwcGxpY2F0aW9ucyIsIlBhZ2VIb3N0RGV0YWlsc1RyYWZmaWMiLCJQYWdlSG9zdERldGFpbHNQYWNrZXRzIiwiUGFnZUhvc3REZXRhaWxzRmxvd1NhbmtleSIsIlBhZ2VIb3N0RGV0YWlsc1BvcnRzIiwiUGFnZUFnZ3JlZ2F0ZWRMaXZlRmxvd3MiLCJQYWdlTmV0d29ya0Rpc2NvdmVyeSIsIlBhZ2VGbG93RGV2aWNlRGV0YWlscyIsIlBhZ2VGbG93RGV2aWNlSW50ZXJmYWNlRGV0YWlscyIsIkFsZXJ0SW5mbyIsIlRpbWVzZXJpZXNDaGFydCIsIlJhbmdlUGlja2VyIiwiU2Fua2V5IiwiTG9hZGluZyIsIkRhc2hib2FyZCIsIkRhc2hib2FyZEJveCIsIkRhc2hib2FyZEVtcHR5IiwiRGFzaGJvYXJkVGFibGUiLCJEYXNoYm9hcmRCYWRnZSIsIkRhc2hib2FyZFBpZSIsIkRhc2hib2FyZFRpbWVzZXJpZXMiLCJEYXNoYm9hcmRTYW5rZXkiLCJMaXN0VGltZXNlcmllcyIsIk1vZGFsQWRkQ2hlY2tFeGNsdXNpb24iLCJNb2RhbEFsZXJ0c0ZpbHRlciIsIk1vZGFsVGltZXNlcmllcyIsIk1vZGFsVHJhZmZpY0V4dHJhY3Rpb24iLCJNb2RhbFNuYXBzaG90IiwiTW9kYWxBZGREZXZpY2VFeGNsdXNpb24iLCJNb2RhbEVkaXREZXZpY2VFeGNsdXNpb24iLCJNb2RhbEFkZEhvc3RSdWxlcyIsIk1vZGFsQWRkQXBwbGljYXRpb24iLCJNb2RhbERlbGV0ZUFwcGxpY2F0aW9uIiwiTW9kYWxFZGl0UmVwb3J0IiwiVnVlIiwiXzB4NGFlNSIsIl8weDY0OGN4MiIsIl8weDY0OGN4MyIsIl8weDY0OGN4NCIsIl8weDY0OGN4YSIsIl8weDY0OGN4NSIsIl8weDY0OGN4NiIsIl8weDY0OGN4OCIsIl8weDY0OGN4OSIsIl8weDY0OGN4YiIsIl8weDY0OGN4YyIsIkdFVF9JTlRFUkZBQ0VfREFUQSIsIl8weDY0OGN4MTMiLCJfMHg2NDhjeGQiLCJfMHg2NDhjeGUiLCJfMHg2NDhjeGYiLCJfMHg2NDhjeDEwIiwiXzB4NjQ4Y3gxMSIsIl8weDY0OGN4MTIiXSwibWFwcGluZ3MiOiJ5QkFDQUEsS0FBS0MsVUFBVUMsT0FBUyxTQUFVQSxHQUMxQixJQUFJQyxFQUFJLENBQ0EsS0FBTUMsS0FBS0MsV0FBYSxFQUN4QixLQUFNRCxLQUFLRSxVQUNYLEtBQU1GLEtBQUtHLFdBQ1gsS0FBTUgsS0FBS0ksYUFDWCxLQUFNSixLQUFLSyxhQUNYLEtBQU1DLEtBQUtDLE9BQU9QLEtBQUtDLFdBQWEsR0FBSyxHQUN6Q08sRUFB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
