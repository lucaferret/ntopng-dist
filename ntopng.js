!function(){"use strict";Date.prototype.format=function(e){var t={"M+":this.getMonth()+1,"d+":this.getDate(),"h+":this.getHours(),"m+":this.getMinutes(),"s+":this.getSeconds(),"q+":Math.floor((this.getMonth()+3)/3),S:this.getMilliseconds()};for(var a in/(y+)/.test(e)&&(e=e.replace(RegExp.$1,(this.getFullYear()+"").substr(4-RegExp.$1.length))),t)new RegExp("("+a+")").test(e)&&(e=e.replace(RegExp.$1,1==RegExp.$1.length?t[a]:("00"+t[a]).substr((""+t[a]).length)));return e},jQuery.fn.extend({disable:function(e){return this.each((function(){var t=$(this);t.is("input, button, textarea, select")?this.disabled=e:t.toggleClass("disabled",e)}))}});const e=.005,t={ipv4:String.raw`^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$`,ipv6:String.raw`^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$|^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*)$`,domainName:String.raw`^([a-zA-Z]([a-zA-Z]|[0-9])?\.[a-zA-Z]{2,13}|[a-zA-Z0-9]([\-_.a-zA-Z0-9]{1,61}[a-zA-Z0-9])?\.[a-zA-Z]{2,13}|[a-zA-Z0-9]([\-_.a-zA-Z0-9]{1,61}[a-zA-Z0-9])?\.[a-zA-Z]{2,30}\.[a-zA-Z]{2,3})$`,port:String.raw`^([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$`,latency:String.raw`^([0-9]*[.])?[0-9]+$`,url:String.raw`^(https?\:\/\/[^\/\s]+(\/.*)?)$`,emailUrl:String.raw`^smtps?:\/\/[\-a-zA-Z0-9:.]{1,256}$`,macAddress:String.raw`^([0-9A-Fa-f]{2}:){5}([0-9A-Fa-f]{2})$`,hostname:String.raw`^(?!\s*$)[a-zA-Z0-9._: \-\/]{1,250}|^[a-zA-Z0-9._: \-\/]{1,250}@[0-9]{0,5}`,username:String.raw`^[a-zA-Z0-9._@!-?]{3,30}$`,singleword:String.raw`^(?=[a-zA-Z0-9._:\-]{3,253}$)(?!.*[_.:\-]{2})[^_.:\-].*[^_.:\-]$`,multiword:String.raw`^([a-zA-Z0-9._:\-\s]{3,253})$`,email:String.raw`^([a-zA-Z0-9.!#$%&'*+\-\/=?^_\`\|~]+@[a-zA-Z0-9\-]+(?:\.[a-zA-Z0-9\-]+)*)$|^[a-zA-Z\d.!#$%&'*+\-\/=?^_\`\|~]{1,128}$`,emailCommaList:String.raw`^((?:[a-zA-Z0-9.!#$%&'*+\-\/=?^_\`\|~]+@[a-zA-Z0-9\-]+(?:\.[a-zA-Z0-9\-]+)*)|([a-zA-Z\d.!#$%&'*+\-\/=?^_\`\|~]{1,128}))(?:,((?:[a-zA-Z0-9.!#$%&'*+\-\/=?^_\`\|~]+@[a-zA-Z0-9\-]+(?:\.[a-zA-Z0-9\-]+)*)|([a-zA-Z\d.!#$%&'*+\-\/=?^_\`\|~]{1,128})))*$`,https:String.raw`^https?:\/\/.+$`,token:String.raw`^[0-9a-f]{32}`,score:String.raw`^[0-9]{1,5}`,telegram_channel:String.raw`^[0-9\-]{1,15}`,password:String.raw`^[\w\/$!\/()=?^*@_-]{5,31}$`,tls_certificate:String.raw`^[^=,]+=[^=,]+(,\s[^=,]+=[^=,]+)*$`,domain_name_not_strict:String.raw`^[a-zA-Z0-9\-_~]+((\.[a-zA-Z0-9\-_~]+)+)$`,non_quoted_text:String.raw`^[a-zA-Z0-9.-_]+$`};class a{static toggleOverlays(e=500){$(".overlay").toggle(e)}static showOverlays(e=500){$(".overlay").fadeIn(e)}static hideOverlays(e=500){$(".overlay").fadeOut(e)}static get REGEXES(){return t}static getIPv4RegexWithCIDR(){const e=t.ipv4.length;return`${t.ipv4.substring(0,e-1)}(\\/?)(\\b([0-9]|[12][0-9]|3[0-2])?\\b)$`}static getIPv6RegexWithCIDR(){const e=t.ipv6.length;return`${t.ipv6.substring(0,e-1)}(\\/?)\\b([0-9]|[1-9][0-9]|1[01][0-9]|12[0-8])?\\b$`}static async resolveDNS(e="ntop.org"){try{const t=await fetch(`${http_prefix}/lua/rest/v2/get/dns/resolve.lua?hostname=${e}`);return await t.json()}catch(e){console.error(`Something went wrong when resolving hostname: ${e}`)}return{rc:-1,rc_str:"FAILED_HTTP_REQUEST"}}static initDataPatterns(){$("input[data-pattern]").each((function(){const e=$(this).data("pattern");if(!e)return void console.warn("An empty data-pattern on an input was found!",this);const a=e.split("|").map((e=>t[e].toString())).join("|");$(this).attr("pattern",a),$(this).removeAttr("data-pattern")}))}static is_good_ipv4(e){return new RegExp(t.ipv4).test(e)}static is_good_ipv6(e){return new RegExp(t.ipv6).test(e)}static is_mac_address(e){return new RegExp(t.macAddress).test(e)}static isNumeric(e){return/^\d+$/.test(e)}static is_network_mask(e,t){var l,n=e.split("/"),s=null;if(2!=n.length){if(!t)return null;l=e}else{if(l=n[0],!a.isNumeric(n[1]))return null;if((s=parseInt(n[1]))<0)return null}if(a.is_good_ipv4(l)){if(null===s)s=32;else if(s>32)return null;return{type:"ipv4",address:l,mask:s}}if(a.is_good_ipv6(n[0])){if(null===s)s=128;else if(s>128)return!1;return{type:"ipv6",address:l,mask:s}}return null}static fbits(t){const a=["bps","Kbps","Mbps","Gbps","Tbps"];if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 bps";var l=Math.log(t)/Math.log(1e3),n=parseInt(Math.floor(l));if(n<0||isNaN(n))n=0;else if(n>=a.length)return"> "+a[a.length-1];if(n<=1)return Math.round(t/Math.pow(1e3,n)*100)/100+" "+a[n];var s=parseFloat(t/Math.pow(1e3,n)).toFixed(2);return s%1==0&&(s=Math.round(s)),s+" "+a[n]}static export_rate(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 exps/s";var l=a.scaleValue(t,["exp/s","Kexp/s"],1e3);return Math.round(100*l[0])/100+" "+l[1]}static exports_format(t){if(void 0===t)return"-";var l=i18n_ext.exports.toLowerCase(),n=[l,"K "+l];if(0==t)return"0";if(t>0&&t<e)return"< 0.005 exps/s";var s=a.scaleValue(t,n,1e3);return Math.round(100*s[0])/100+" "+s[1]}static fbits_from_bytes(e){return void 0===e?"-":a.fbits(8*e)}static fpackets(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 pps";var l=a.scaleValue(t,["pps","Kpps","Mpps","Gpps","Tpps"],1e3);return Math.round(100*l[0])/100+" "+l[1]}static fpoints(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 pt/s";var l=a.scaleValue(t,["pt/s","Kpt/s","Mpt/s","Gpt/s","Tpt/s"],1e3);return Math.round(100*l[0])/100+" "+l[1]}static fflows(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 fps";var l=a.scaleValue(t,["fps","Kfps","Mfps","Gfps","Tfps"],1e3);return Math.round(100*l[0])/100+" "+l[1]}static fmsgs(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 mps";var l=a.scaleValue(t,["msg/s","Kmsg/s","Msg/s","Gmsg/s","Tmsg/s"],1e3);return Math.round(100*l[0])/100+" "+l[1]}static fmillis(e){if(void 0===e)return"-";const t=a.scaleValue(e,["ms"],1e3);return Math.round(100*t[0])/100+" "+t[1]}static fnone(e){return void 0===e?"-":Math.round(100*e)/100}static falerts(e){return void 0===e?"-":Math.round(100*e)/100+" alerts/s"}static fint(e){return void 0===e?"-":Math.round(e).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")}static ffloat(e){return void 0===e?"-":(Math.round(100*e)/100).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")}static fpercent(e){return void 0===e?"-":Math.round(100*e)/100+" %"}static percentage(e,t){if(t>0){var a=Math.round(1e4*e/t);if(a>0)return" [ "+a/100+" % ] "}return""}static fdate(e){return new Date(1e3*e)}static capitaliseFirstLetter(e){return e.charAt(0).toUpperCase()+e.slice(1)}static get_trend(e,t){return void 0===e||void 0===t||e==t?'<i class="fas fa-minus"></i>':e>t?'<i class="fas fa-arrow-up"></i>':'<i class="fas fa-arrow-down"></i>'}static abbreviateString(e,t){return e?e.length<t?e:e.substring(0,t)+"...":""}static toFixed2(e){return e?e.toFixed(2):""}static bytesToSize(e){if(void 0===e)return"-";var t=1024,a=1048576,l=1073741824,n=1099511627776;return e>=0&&e<t?0!=e?parseFloat(e.toFixed(2))+" Bytes":parseFloat(e)+" Bytes":e>=t&&e<a?parseFloat((e/t).toFixed(2))+" KB":e>=a&&e<l?parseFloat((e/a).toFixed(2))+" MB":e>=l&&e<n?parseFloat((e/l).toFixed(2))+" GB":e>=n?parseFloat((e/n).toFixed(2))+" TB":parseFloat(e.toFixed(2))+" Bytes"}static drawTrend(e,t,a){return e==t?'<i class="fas fa-minus"></i>':e>t?'<i class="fas fa-arrow-up"'+a+"></i>":'<i class="fas fa-arrow-down"></i>'}static toggleAllTabs(e){!0===e?$("#historical-tabs-container").find("li").removeClass("disabled").find("a").attr("data-toggle","tab"):$("#historical-tabs-container").find("li").addClass("disabled").find("a").removeAttr("data-toggle")}static disableAllDropdownsAndTabs(){$("select").each((function(){$(this).prop("disabled",!0)})),a.toggleAllTabs(!1)}static enableAllDropdownsAndTabs(){$("select").each((function(){$(this).prop("disabled",!1)})),a.toggleAllTabs(!0)}static capitalize(e){return e&&e[0].toUpperCase()+e.slice(1)}static addCommas(e){for(var t=(e+="").split("."),a=t[0],l=t.length>1?"."+t[1]:"",n=/(\d+)(\d{3})/;n.test(a);)a=a.replace(n,"$1,$2");return a+l}static scaleValue(e,t,a,l){if(0==e)return[0,t[0]];let n=l?10*l:10;var s=parseInt(Math.floor(Math.log(e)/Math.log(a)));return s<0||isNaN(s)?s=0:s>=t.length&&(s=t.length-1),[Math.round(e/Math.pow(a,s)*n)/n,t[s]]}static formatValue(t,l){if(0==t)return"0";if(t>0&&t<e)return"< "+e;null==l&&(l=0);var n=a.scaleValue(t,["","K","M","G","T"],1e3,l);return n[0]+n[1]}static formatPackets(e){return a.addCommas(e.toFixed(0))+" Pkts"}static bytesToVolume(t){if(0==t)return"0 Bytes";if(t>0&&t<e)return"< 0.005 Bytes";var l=a.scaleValue(t,["Bytes","KB","MB","GB","TB"],1024);return parseFloat(l[0])+" "+l[1]}static bytesToVolumeAndLabel(e){if(0==e)return"0 Bytes";var t=parseInt(Math.floor(Math.log(e)/Math.log(1024)));return[(e/Math.pow(1024,t)).toFixed(2),["Bytes","KB","MB","GB","TB"][t]]}static bitsToSize(t,l){l=l||1e3;if(0==t)return"0 bps";if(t>0&&t<e)return"< 0.005 bps";var n=a.scaleValue(t,["bps","Kbps","Mbps","Gbps","Tbps"],l);return n[0].toFixed(2)+" "+n[1]}static bitsToSize_no_comma(t,l){l=l||1e3;if(0==t)return"0 bps";if(t>0&&t<e)return"< 0.005 bps";var n=a.scaleValue(t,["bps","Kbps","Mbps","Gbps","Tbps"],l);return n[0]+" "+n[1]}static secondsToTime(e){if(e<1)return"< 1 sec";let t=Math.floor(e/86400),a=Math.floor(e/3600-24*t),l=Math.floor(e/60-1440*t-60*a),n=e%60,s="",i=[];if(t>0){let e=Math.floor(t/365);e>0&&(t%=365,s=e+" year",e>1&&(s+="s"),i.push(s),s=""),s=t+" day",t>1&&(s+="s"),i.push(s),s=""}return a>0&&(a<10&&(s="0"),s+=a+":"),l<10&&(s+="0"),s+=l+":",n<10&&(s+="0"),s+=n,i.push(s),i.join(", ")}static msecToTime(e){return e>=1e3?a.secondsToTime(e/1e3):(Math.round(1e3*e)/1e3).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")+" ms"}static epoch2Seen(e){var t=new Date(1e3*e),l=Math.floor((new Date).getTime()/1e3-e);return t.format("dd/MM/yyyy hh:mm:ss")+" ["+a.secondsToTime(l)+" ago]"}static graphGetXAxisTicksFormat(e){return e<=86400?"%H:%M:%S":e<=172800?"%b %e, %H:%M:%S":"%b %e"}static paramsExtend(e,t){return $.extend({},e,t)}static paramsToForm(e,t){for(var a in e=$(e),t){if(t.hasOwnProperty(a))$('<input type="hidden" name="'+a+'" value="'+t[a]+'">').appendTo(e)}return e}static paramsPairsEncode(e){var t=0,a={};for(var l in e)a["key_"+t]=l,a["val_"+t]=e[l],t+=1;return a}static hostkey2hostInfo(e){return(e=(e=(e=e.replace(/____/g,":")).replace(/___/g,"/")).replace(/__/g,".")).split("@")}static handle_tab_state(e,t){$("a",e).click((function(e){e.preventDefault()})),$(" > li > a",e).on("shown.bs.tab",(function(e){var t=$(e.target).attr("href").substr(1);history.replaceState?history.replaceState(null,null,"#"+t):window.location.hash=t}));var a=window.location.hash;a||(a="#"+t),$('a[href="'+a+'"]',e).tab("show")}static _add_find_host_link(e,t,a){$("<input>").attr({type:"hidden",id:t,name:t,value:a}).appendTo(e)}static makeFindHostBeforeSubmitCallback(e){return function(t,l){return l.context&&"historical"==l.context?(t.attr("action",e+"/lua/pro/db_search.lua"),"ip"==l.type?a._add_find_host_link(t,"ip",l.ip):"mac"==l.type?a._add_find_host_link(t,"mac",l.mac):"community_id"==l.type?a._add_find_host_link(t,"community_id",l.community_id):"ja3_client"==l.type?a._add_find_host_link(t,"ja3_client",l.ja3_client):"ja3_server"==l.type?a._add_find_host_link(t,"ja3_server",l.ja3_server):a._add_find_host_link(t,"name",l.hostname?l.hostname:l.name)):"mac"==l.type?t.attr("action",e+"/lua/mac_details.lua"):"network"==l.type?(t.attr("action",e+"/lua/hosts_stats.lua"),a._add_find_host_link(t,"network",l.network)):"snmp"==l.type?(t.attr("action",e+"/lua/pro/enterprise/snmp_interface_details.lua"),a._add_find_host_link(t,"snmp_port_idx",l.snmp_port_idx)):"snmp_device"==l.type?t.attr("action",e+"/lua/pro/enterprise/snmp_device_details.lua"):"asn"==l.type?(t.attr("action",e+"/lua/hosts_stats.lua"),a._add_find_host_link(t,"asn",l.asn)):(t.attr("action",e+"/lua/host_details.lua"),a._add_find_host_link(t,"mode","restore")),!0}}static tstampToDateString(e,t,a){a=a||0;var l=parseInt(e.html())+a,n=d3.time.format(t)(new Date(1e3*l));return e.html(n).removeClass("hidden"),n}static noHtml(e){return e.replace(/<[^>]+>/g,"")}static cleanCustomHostUrl(e){return e.replace(/^http:\/\//gi,"").replace(/^https:\/\//gi,"").replace(/^www\./gi,"").replace(/[^0-9a-zA-Z\.:\/_-]/gi,"")}static parseQuery(e){for(var t={},a=("?"===e[0]?e.substr(1):e).split("&"),l=0;l<a.length;l++){var n=a[l].split("=");t[decodeURIComponent(n[0])]=decodeURIComponent(n[1]||"")}return t}static getHistoryParameters(e){var t=a.parseQuery(window.location.search),l=$.extend(t,e),n="?"+$.param(l,!0);return[location.protocol,"//",location.host,location.pathname].join("")+n}static check_status_code(e,t,a){const l=200!=e;if(l&&null!=a){let l=i18n_ext.request_failed_message;e&&t&&(l+=`: ${e} - ${t}`),a.text(l).show()}else l&&null==a&&alert(`${i18n_ext.request_failed_message}: ${e} - ${t}`);return l}static importModalHelper(e){if(!e.loadConfigXHR)throw"importModalHelper:: Missing 'loadConfigXHR' param";$("input#import-input").on("change",(function(){$("#btn-confirm-import").removeAttr("disabled")})),$("#import-modal").on("hidden.bs.modal",(function(){$("#import-input").val(""),$("#import-error").hide().removeClass("text-warning").addClass("invalid-feedback"),$("#btn-confirm-import").attr("disabled","disabled")})),$("#import-modal").on("submit","form",(function(t){t.preventDefault();const a=$("#btn-confirm-import");a.attr("disabled","");const l=$("#import-input")[0].files[0];if(!l)return $("#import-error").text(`${i18n_ext.no_file}`).show(),void a.removeAttr("disabled");const n=new FileReader;n.readAsText(l,"UTF-8"),n.onload=function(){let t=null;try{t=JSON.parse(n.result)}catch(e){}if(!t)return $("#import-error").text(i18n_ext.rest_consts[responseJSON.rc_str]||"Not Implemented Yet").show(),void a.removeAttr("disabled");e.loadConfigXHR(n.result).done(((t,a,l)=>{if(t.rc<0)return void $("#import-error").text(t.rc_str).show();e.successCallback&&e.successCallback(t);const n="all"==$("input[name='configuration']:checked").val()?i18n("manage_configurations.messages.import_all_success"):i18n("manage_configurations.messages.import_success");ToastUtils.showToast({id:"import-configuration-alert",level:"success",title:i18n("success"),body:n,delay:2e3}),$("#import-modal").modal("hide")})).fail((({responseJSON:t})=>{e.failureCallback&&e.failureCallback(t),t&&t.rc>0||(-28==t.rc&&$("#import-error").removeClass("invalid-feedback").addClass("text-warning"),$("#import-error").text(i18n_ext.rest_consts[t.rc_str]||i18n_ext.FAILED_HTTP_REQUEST).show())})).always((()=>{a.removeAttr("disabled")}))}}))}static serializeFormArray(e){const t={};return e.forEach((e=>{e.name.includes("[]")||("string"==typeof e.value&&(e.value=e.value.trim()),t[e.name]=e.value)})),t}static cleanForm(e){$(e).find("input,select,textarea").each((function(e,t){$(this).removeClass("is-valid").removeClass("is-invalid")})),$(e)[0].reset()}static fetchWithTimeout(e,t={},a=5e3){const l={...t,signal:(new AbortController).signal};return fetch(e,l).then((e=>{if(!e.ok)throw new Error(`${e.status}: ${e.statusText}`);return e})).catch((e=>{if("AbortError"===e.name)throw new Error("Response timed out")}))}static setPref(e,t,a,l){if(null==e)return void console.warn("An action key must be defined to set a preference!");const n=()=>{},s=$.post(`${http_prefix}/lua/update_prefs.lua`,{action:e,csrf:t});s.done(a||n),s.fail(l||n)}static arrayToListString(e,t){return null==e?"":e.length>t?e.slice(0,t).join(", ")+` ${i18n_ext.and_x_more.replace("$num",e.length-t)}`:e.slice(0,t).join(", ")}static buildURL(e,t={},a=!1,l={}){const n=new URL(e,window.location);for(const[e,a]of Object.entries(t))(a||0===a)&&n.searchParams.set(e,a);if(a){const e=new URL(window.location.href);for(const[t,a]of Object.entries(l))a&&e.searchParams.set(t,a);n.searchParams.set("referer",e.toString())}return n.toString()}static getEditPoolLink(e,t){const a=new URL(e,window.location);return a.searchParams.set("pool_id",t),a.toString()}static getPoolLink(e,t=0){return`${http_prefix}/lua/rest/v2/get/${e}/pools.lua?pool=${t}`}static async getPool(e,t=0){if(null===e)throw"A pool type must be defined!";try{const l=await fetch(a.getPoolLink(e,t)),n=await l.json();return n.rc<0?[!1,{}]:[!0,n.rsp[0]]}catch(e){return[!1,{}]}}static saveElementScale(e,t={width:0,height:0}){const l=a.generateScaleElementKey(e);localStorage.setItem(l,JSON.stringify(t))}static generateScaleElementKey(e){let t;const a=location.pathname,l=e.attr("id");if(""!==l)t=l;else{t=e.attr("class")}return`${t}-${a}-scale`}static loadElementScale(e){const t=a.generateScaleElementKey(e),l=localStorage.getItem(t);if(null!=l)return JSON.parse(l)}static fillFieldIfValid(e,t){void 0===t?e.val(""):e.val(t)}static copyToClipboard(e,t){const a=document.createElement("textarea");a.value=e,a.setAttribute("readonly",""),a.style.position="absolute",a.style.left="-9999px",document.body.appendChild(a),a.select(),document.execCommand("copy"),document.body.removeChild(a),$(t).attr("title","Copied!").tooltip("dispose").tooltip().tooltip("show"),$(t).removeAttr("data-bs-original-title"),$(t).attr("title",e)}static stripTags(e){let t=document.createElement("div");return t.innerHTML=e,t.textContent||t.innerText||""}static shortenLabel(e,t,a){let l=e;if(e.length>t+5)if(a){let n=e.lastIndexOf(a);const s=e.slice(n);t>n&&(t=n),l=e.slice(0,t)+"... "+s}else l=e.slice(0,t)+"...";return l}static sortAlphabetically(e,t){const a=e.label?.toUpperCase(),l=t.label?.toUpperCase();return a<l?-1:a>l?1:0}static formatNameValue(e,t,a){let l=e;return e!=t&&(a&&"number"==typeof a&&(l=this.shortenLabel(l,a,".")),l=`${l} [${t}]`),l}static removeVlan(e){let t=e;const a=t.lastIndexOf("@");if(-1!=a){0==t.slice(a+1)&&(t=t.slice(0,a))}return t}static formatGenericObj(e,t){let a=e.label?e.label:e.value;return e.value,a}static formatCountry(e,t){let a=e.value;return`${e.label?e.label:e.value} <img src="/dist/images/blank.gif" class="flag flag-${a.toLowerCase()}">`}static formatHost(e,t,l){let n="";if(!e)return n;let s=e.ip;t.vlan_id&&t.vlan_id.value&&(s=s+"@"+t.vlan_id.value),n=e.label?e.label:e.value,t.vlan_id&&t.vlan_id.label&&(n+=`@${t.vlan_id.label}`);n=`<a href="${a.buildURL(`${http_prefix}/lua/host_details.lua`,{host:s})}">${n}</a>`;let i=l?t.cli_country:t.srv_country;return!i&&t.country&&(i=t.country),i&&i.value&&(n+=` <img src="${http_prefix}/dist/images/blank.gif" class="flag flag-${i.value.toLowerCase()}" title="${i.title}"></a>`),n}static formatNetwork(e,t){let l="";if(!e)return l;let n=e.value;l=e.label?e.label:e.value,t.vlan_id&&t.vlan_id.label&&(l+=`@${t.vlan_id.label}`);return l=`<a href="${a.buildURL(`${http_prefix}/lua/hosts_stats.lua`,{network:n})}">${l}</a>`,l}static convertIPAddress(e){var t,a,l,n,s,i,o;if(!e)return 0;if(l=2==(s=(e=e.replace(/<[\s\S]*?>/g,"")).split(":")).length?s[0].split("."):e.split("."),n=e.split(":"),i="",o="",4==l.length)for(t=0;t<l.length;t++)1==(a=l[t]).length?i+="00"+a:2==a.length?i+="0"+a:i+=a;else if(n.length>0){var r=0;for(t=0;t<n.length;t++)t>0&&(o+=":"),0===(a=n[t]).length?r+=0:1==a.length?(o+="000"+a,r+=4):2==a.length?(o+="00"+a,r+=4):3==a.length?(o+="0"+a,r+=4):(o+=a,r+=4);n=o.split(":");var c=0;for(t=0;t<n.length;t++)if(0===(a=n[t]).length&&0===c)for(var u=0;u<32-r;u++)i+="0",c=1;else i+=a}return i}static formatASN(e,t){let l="";if(!e)return l;let n=e.value;l=e.label?e.label:e.value;return l=`<a href="${a.buildURL(`${http_prefix}/lua/hosts_stats.lua`,{asn:n})}">${l}</a>`,l}static createProgressBar(e){return`<div class="d-flex flex-row align-items-center">\n              <div class="col-9 progress">\n                <div class="progress-bar bg-warning" aria-valuenow="${e}" aria-valuemin="0" aria-valuemax="100" style="width: ${e}%;">\n                </div>\n              </div>\n              <div class="col"> ${e} %</div>\n            </div>`}static createBreakdown(e,t,a,l){return`<div class="d-flex flex-row align-items-center">\n              <div class="col-12 progress">\n                <div class="progress-bar bg-warning" aria-valuenow="${e}" aria-valuemin="0" aria-valuemax="100" style="width: ${e}%;">${a}</div>\n                <div class="progress-bar bg-success" aria-valuenow="${t}" aria-valuemin="0" aria-valuemax="100" style="width: ${t}%;">${l}</div>\n              </div>\n            </div>`}static getNumTableRows(){return[10,20,50,100]}static formatApexChartLabelFromXandName({series:e,seriesIndex:t,dataPointIndex:a,w:l}){const n=l.config.series[t].data[a],s=n.name,i=n.y;return`\n    <div class='apexcharts-theme-light apexcharts-active' id='test'>\n        <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n            ${n.meta.label}\n        </div>\n        <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n            <div class='apexcharts-tooltip-text text-left'>\n                <b>${l.config.xaxis.title.text}</b>: ${s}\n            </div>\n            <div class='apexcharts-tooltip-text text-left'>\n                <b>${l.config.yaxis[0].title.text}</b>: ${i}\n            </div>\n        </div>\n    </div>\n    `}static apexChartJumpToAlerts(e,t,a){const{seriesIndex:l,dataPointIndex:n}=a,{series:s}=a.config;if(-1===l)return;if(void 0===s)return;const i=s[l],o=i.base_url||s[0].base_url,r=i.start_url||s[0].start_url;if(null!=o&&null!=r){const e=i.data[n].meta.url_query;location.href=`${o}?${r}${e}`}}static apexChartJumpToHostDetails(e,t,a){const{seriesIndex:l,dataPointIndex:n}=a,{series:s}=a.config;if(-1===l)return;if(void 0===s)return;const i=s[l],o=i.base_url||s[0].base_url;if(null!=o){const e=`${o}?${i.data[n].meta.url_query}`;ntopng_url_manager.go_to_url(e)}}static formatApexChartLabelFromXandY({series:e,seriesIndex:t,dataPointIndex:a,w:l}){const n=l.config.series[t].data[a],s=n.x,i=n.y;return`\n      <div class='apexcharts-theme-light apexcharts-active' id='test'>\n          <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n              ${n.meta.label}\n          </div>\n          <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n              <div class='apexcharts-tooltip-text text-left'>\n                  <b>${l.config.xaxis.title.text}</b>: ${s}\n              </div>\n              <div class='apexcharts-tooltip-text text-left'>\n                  <b>${l.config.yaxis[0].title.text}</b>: ${i}\n              </div>\n          </div>\n      </div>\n    `}}function l(e,t){var a=$("thead th",$(e)).filter((function(){return"none"!=$(this).css("display")})).length;$("tbody",$(e)).html('<tr class="emptyRow"><td colspan="'+a+'"><i>'+t+"</i></td></tr>")}function n(e){return $("tr:not(.emptyRow)",$(e)).length-1}function s(e){return 0==n(e)}function i(e){return $("table",$("#dt-top-details",$(e)).parent())}function o(e,t,a,l,n,s=!0,i=""){0==$("td:nth-child("+e+")",$(this)).find("div.d-flex").length&&($("td:nth-child("+e+")",$(this)).empty(),$("td:nth-child("+e+")",$(this)).append($("<div class='d-flex justify-content-center'></div>"))),$("td:nth-child("+e+")",$(this)).find(".d-flex").append('<a href="'+n+`" title='${i}' data-placement="bottom" class="btn btn-sm mx-1 ${a} ${s?"":"disabled"}" onclick="`+l+'" role="button">'+t+"</a>")}function r(e,t){return e.data("datatable").options.columns.findIndex((function(e){return e.field===t}))}$((function(){a.initDataPatterns()}));var c=Object.freeze({__proto__:null,draw_processes_graph:function(e,t,a){var l,n={},s=e+"/lua/get_processes_graph_data.lua?host="+a;d3.json(s,(function(s,i){if(s)return console.warn(s);var o;(l=i).forEach((function(t){o=-1==t.source_pid?e+"/lua/host_details.lua?host="+t.source:e+"/lua/process_details.lua?pid="+t.source_pid+"&pid_name="+t.source_name+"&host="+a+"&page=flows",t.source=n[t.source]||(n[t.source]={name:t.source_name,num:t.source,link:o,type:t.source_type,pid:t.source_pid}),o=-1==t.target_pid?e+"/lua/host_details.lua?host="+t.target:e+"/lua/process_details.lua?pid="+t.target_pid+"&pid_name="+t.target_name+"&host="+a+"&page=flows",t.target=n[t.target]||(n[t.target]={name:t.target_name,num:t.target,link:o,type:t.target_type,pid:t.target_pid})}));var r=d3.scale.category10();r.proc="red",r.host="lightsteelblue";var c=d3.layout.force().nodes(d3.values(n)).links(l).size([960,500]).linkDistance(120).charge(-400).on("tick",(function(){d.attr("d",f),_.attr("transform",m),p.attr("transform",m)})).start(),u=d3.select("#"+t).append("svg").attr("id","ebpf_graph").attr("width",960).attr("height",500);u.append("defs").selectAll("marker").data(["proc2proc","proc2host","host2proc","host2host"]).enter().append("marker").attr("id",(function(e){return e})).attr("viewBox","0 -5 20 20").attr("refX",15).attr("refY",-1.5).attr("markerWidth",6).attr("markerHeight",6).attr("orient","auto").append("path").attr("d","M0,-5L10,0L0,5");var d=u.append("g").selectAll("path").data(c.links()).enter().append("path").attr("class",(function(e){return"link "+e.type})).attr("marker-end",(function(e){return"url(#"+e.type+")"})),_=u.append("g").selectAll("circle").data(c.nodes()).enter().append("circle").attr("class","ebpf_circle").attr("r",15).style("fill",(function(e){return r[e.type]})).call(c.drag).on("dblclick",(function(e){window.location.href=e.link})),p=u.append("g").selectAll("text").data(c.nodes()).enter().append("text").attr("class","ebpf_text").attr("x",12).attr("y","0.5rem").style("font-size","1rem").text((function(e){return e.pid>=0?e.name+" [pid: "+e.pid+"]":e.name}));function f(e){var t=e.target.x-e.source.x,a=e.target.y-e.source.y,l=Math.sqrt(t*t+a*a);return"M"+e.source.x+","+e.source.y+"A"+l+","+l+" 0 0,1 "+e.target.x+","+e.target.y}function m(e){return"translate("+e.x+","+e.y+")"}}))}});class u{constructor(e,t){if(void 0===t.csrf)throw new Error("ModalHandler::Missing CSRF token!");this.element=e,this.dialog=$(e).closest(".modal"),this.options=t,this.csrf=t.csrf,this.dontDisableSubmit=t.dontDisableSubmit,this.observer=new MutationObserver((e=>{this.bindFormValidation(),this.toggleFormSubmission(),this.initDataPatterns()})),this.observer.observe(this.element[0],{childList:!0,subtree:!0}),this.initialState=null,this.currentState=null,this.firstCloseAttempt=!1,this.isSubmitting=!1;if(0==$(this.element).find("[type='submit']").length)throw new Error("ModalHandler::The submit button was not found inside the form!");this.toggleFormSubmission()}initDataPatterns(){NtopUtils.initDataPatterns()}createFormSnapshot(){const e={inputs:{},hidden:[]};return $(this.element).find('textarea,select,input[type!="radio"]').each((function(){const t=$(this).prop("nodeName").toLowerCase(),a=$(this).attr("name");e.inputs[`${t}[name='${a}']`]=$(this).val()})),$(this.element).find("[style='display: none;'], span.invalid-feedback").each((function(){e.hidden.push($(this))})),e}compareFormSnaphsot(e,t){if(null==e||null==t)return!0;for(let[a,l]of Object.entries(e.inputs))if(t.inputs[a]!=l)return!1;return!0}delegateModalClosing(){const e=this;$(this.dialog).find("button.cancel").off("click").click((function(){e.firstCloseAttempt=!1,$(e.element)[0].reportValidity(),$(e.dialog).find(".confirm-closing").fadeOut(100,(function(){$(e.dialog).find("button.btn-close").fadeIn(100)}))})),$(this.dialog).off("hide.bs.modal").on("hide.bs.modal",(function(t){e.isSubmitting?t.preventDefault():e.compareFormSnaphsot(e.currentState,e.initialState)||e.firstCloseAttempt||(t.preventDefault(),e.firstCloseAttempt=!0,$(e.dialog).find("button.btn-close").fadeOut(100,(function(){$(e.dialog).find(".confirm-closing").fadeIn(100)})))})),$(this.dialog).off("hidden.bs.modal").on("hidden.bs.modal",(function(t){for(const[t,a]of Object.entries(e.initialState.inputs))$(e.dialog).find(t).val(a),$(e.dialog).find(t).removeClass("is-invalid");e.initialState.hidden.forEach((e=>{e.hide()})),e.element.find("[type='submit']").attr("disabled","disabled"),e.currentState=null,e.firstCloseAttempt=!1,$(e.dialog).find(".confirm-closing").fadeOut(100,(function(){$(e.dialog).find("button.btn-close").fadeIn(100)})),e.cleanForm()}))}fillFormModal(){return this.options.loadFormData()}invokeModalInit(e={}){const t=this;this.delegateModalClosing(),this.data=e||this.fillFormModal(),this.options.onModalInit(this.data,this),$(this.element).parents(".modal").on("show.bs.modal",(function(){t.options.onModalShow()})),this.initialState=this.createFormSnapshot(),this.currentState=null,this.delegateResetButton()}delegateSubmit(){this.bindFormValidation();const e=this;this.submitHandler=function(t){e.options.isSyncRequest||(t.preventDefault(),t.stopPropagation(),e.makeRequest())},$(this.element).on("submit",this.submitHandler)}bindFormValidation(){const e=this;$(this.element).find("input,select,textarea").each((async function(t,a){const l=$(this);let n=-1;const s=async e=>e.data.resolveDNS&&l.val().match(NtopUtils.REGEXES.domainName)?await(async()=>{const e=l.parent().find(".spinner-border");l.attr("readonly",!0),e.show();const t=await NtopUtils.resolveDNS($(a).val());return l.removeAttr("readonly"),e.hide(),t.rc<0?(a.setCustomValidity(t.rc_str),[!1,t.rc_str_hr]):(a.setCustomValidity(""),[!0,"Success"])})():e.data.cannotBeEmpty&&e.isInputEmpty?(a.setCustomValidity("Please fill the input."),[!1,e.data.validationEmptyMessage||i18n_ext.missing_field]):a.validity.patternMismatch?(a.setCustomValidity("Pattern mismatch."),[!1,e.data.validationMessage||i18n_ext.invalid_field]):a.validity.rangeOverflow?(a.setCustomValidity("Value exceed the maximum value."),[!1,e.data.rangeOverflowMessage||i18n_ext.invalid_field]):a.validity.rangeUnderflow?(a.setCustomValidity("Value is under the minimum value."),[!1,e.data.rangeUnderflowMessage||i18n_ext.invalid_field]):(a.setCustomValidity(""),[!0,"Success"]),i=async()=>{const e={data:{validationMessage:l.data("validationMessage"),validationEmptyMessage:l.data("validationEmptyMessage"),cannotBeEmpty:"required"===l.attr("required")||1==l.data("validationNotEmpty"),resolveDNS:l.data("validationResolvedns"),rangeOverflowMessage:l.data("validationRangeOverflowMessage"),rangeUnderflowMessage:l.data("validationUnderflowOverflowMessage")},isInputEmpty:"string"==typeof l.val()&&""==l.val().trim()},[t,a]=await s(e);let n=l.parent().find(".invalid-feedback");0==n.length&&(n=$("<span class='invalid-feedback'></span>")),t?(l.removeClass("is-invalid"),n.fadeOut(500,(function(){$(this).remove()}))):(l.addClass("is-invalid"),l.parent().append(n),n.text(a))};$(this).off("input").on("input",(function(t){e.currentState=e.createFormSnapshot(),-1!=n&&clearTimeout(n),l.attr("formnovalidate")||(n=setTimeout((()=>{i(),e.toggleFormSubmission()}),300),e.firstCloseAttempt=!1)})),$(this).off("invalid").on("invalid",(function(e){e.preventDefault(),l.attr("formnovalidate")||i()}))}))}getModalID(){return $(this.element).parents(".modal").attr("id")}toggleFormSubmission(){let e=!0;$(this.element).find("input:not(:disabled),select:not(:disabled),textarea:not(:disabled)").each((function(t,a){e&=a.validity.valid})),e?$(this.element).find("[type='submit'],[type='test']").removeAttr("disabled"):$(this.element).find("[type='submit'],[type='test']").attr("disabled","disabled")}cleanForm(){$(this.element).find("input,textarea,select").each((function(e,t){$(this).removeClass("is-valid").removeClass("is-invalid")})),$(this.element)[0].reset()}makeRequest(){const e=$(this.element).find(".invalid-feedback"),t=$(this.element).find("[type='submit']");let a=this.options.beforeSumbit(this.data);a.csrf=this.csrf,a=$.extend(a,this.options.submitOptions),t.attr("disabled","disabled");const l=this;if(this.options.endpoint){let n;n="post"==l.options.method?$.ajax({url:this.options.endpoint,data:JSON.stringify(a),method:l.options.method,dataType:"json",contentType:"application/json; charset=utf-8"}):$.get(this.options.endpoint,a),this.isSubmitting=!0,n.done((function(t,n){l.isSubmitting=!1,l.currentState=null,l.options.resetAfterSubmit&&l.cleanForm(),e.hide();l.options.onSubmitSuccess(t,a,l)&&(l.dialog.modal?l.dialog.modal("hide"):(l.dialog[0].hidden=!0,$(".modal-backdrop.fade.show").remove())),$(l.element).off("submit",l.submitHandler),l.delegateSubmit()})).fail((function(t,n,s){l.isSubmitting=!1;const i=t.responseJSON;void 0!==i.rc&&i.rc<0&&e.html(i.rc_str_hr).show(),l.options.onSubmitError(i,a,n,s)})).always((function(e){t.removeAttr("disabled")}))}else{l.currentState=null,e.hide();l.options.onSubmitSuccess({},a,l)&&(l.dialog.modal?l.dialog.modal("hide"):l.dialog[0].hidden=!0),$(l.element).off("submit",l.submitHandler),l.delegateSubmit(),t.removeAttr("disabled")}}delegateResetButton(){const e=this,t=$(this.element).find("[type='reset']");if(0==t.length)return;const a=NtopUtils.serializeFormArray($(this.element).serializeArray());t.click((function(t){t.preventDefault(),$(e.element).find("input:visible,select").each((function(e,t){const l=$(t).attr("name");$(t).val(a[l]).removeClass("is-invalid").removeClass("is-valid")}))}))}}const d={no_formatting:{id:"no_formatting",um:null,step:null,decimal:null,scale_values:null},number:{id:"number",um:["","K","M","G","T"],step:1e3,decimal:null,scale_values:null},full_number:{id:"number",um:["","K","M","G","T"],step:1e3,decimal:null,scale_values:null,thousands_sep:","},bytes:{id:"bytes",um:["B","KB","MB","GB","TB","PB","EB"],step:1024,decimal:2,scale_values:null,absolute_value:!0},bps:{id:"bps",um:["bps","Kbps","Mbps","Gbps","Tbps","Pbps"],step:1e3,decimal:2,scale_values:8,absolute_value:!0},bps_no_scale:{id:"bps_no_scale",um:["bps","Kbps","Mbps","Gbps","Tbps","Pbps"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},speed:{id:"speed",um:["bit","Kbit","Mbit","Gbit","Tbit","Pbit"],step:1e3,decimal:0,scale_values:null,absolute_value:!0},flows:{id:"flows",um:["flows","Kflows","Mflows","Gflows"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},fps:{id:"fps",um:["flows/s","Kflows/s","Mflows/s","Gflows/s"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},alerts:{id:"alerts",um:["alerts","Kalerts","Malerts","Galerts"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},alertps:{id:"alertps",um:["alerts/s","Kalerts/s","Malerts/s","Galerts/s"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},hits:{id:"hits",um:["hits","Khits","Mhits","Ghits"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},hitss:{id:"hitss",um:["hits/s","Khits/s","Mhits/s","Ghits/s"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},packets:{id:"packets",um:["packets","Kpackets","Mpackets","Gpackets","Tpackets"],step:1e3,decimal:0,scale_values:null,absolute_value:!0},pps:{id:"pps",um:["pps","Kpps","Mpps","Gpps","Tpps"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},ms:{id:"ms",um:["ms","s"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},percentage:{id:"percentage",um:["%"],step:101,decimal:1,scale_values:null,max_value:100,absolute_value:!0}};function _(e){let t=d[e],a=3;null!=t.decimal&&t.decimal>0&&(a=6);let l=0;return null!=t.um&&(l=Math.max(...t.um.map((e=>e.length)))),a+1+l}function p(e,t){let a=d[e];if(e==d.no_formatting.id||null==t)return null;null!=a.scale_values&&(t*=a.scale_values);let l=a.step;t<0&&(t*=-1);let n=0,s=a.um;for(;t>=l&&n<s.length;)t/=l,n+=1;return n}function f(e,t,a){let l=d[e];if(null==l)return null;t|=l.absolute_value;return function(n){if(null==n)return"";if(e==d.no_formatting.id)return n;null!=l.scale_values&&(n*=l.scale_values);let s=n<0;if(s&&(n*=-1),null!=l.max_value&&n>l.max_value&&(n=l.max_value),l.thousands_sep){for(var i=(n+="").split("."),o=i[0],r=i.length>1?"."+i[1]:"",c=/(\d+)(\d{3})/;c.test(o);)o=o.replace(c,"$1,$2");return o+r}let u=l.step,_=l.decimal,p=l.um,f=0;for(;n>=u&&f<p.length&&!a||null!=a&&f<a;)n/=u,f+=1;return null!=_&&_>0?(n*=Math.pow(10,_),n=Math.round(n),n=(n/=Math.pow(10,_)).toFixed(_)):n=Math.round(n),s&&!t&&(n*=-1),`${`${n}`} ${`${p[f]}`}`}}const m={types:d,getUnitMeasureLen:_,getFormatter:f,getScaleFactorIndex:p};window.NtopUtils=a,window.datatableInitRefreshRows=function(e,t,a,l){var n=e.data("datatable"),s=n.resultset.data,i=e.data("dt-rr-timer"),o=e.data("dt-rr-ajax");l=l||{},i&&(clearInterval(i),e.removeData("dt-rr-timer")),o&&(o.abort(),e.removeData("dt-rr-ajax"));var c=[],u={};for(var d in s){var _=s[d];if(_[t]){var p=_[t];u[p]=d,c.push(p)}}var f={custom_hosts:c.join(",")},m=n.options.url,v=!0,h=function(a){if("string"==typeof a&&(a=JSON.parse(a)),a){for(var s in a.data){var i=a.data[s],o=i[t];if(o&&u[o]){var c=u[o],d=n.rows[c],_=$("td",d);for(var p in i){var f=_[r(e,p)],m=$(f),h=m.data("dt-rr-cur-val")||$(f).html(),g=l[p],b=i[p],y="";g&&(parseFloat(b)!=b&&console.warn("Invalid number: "+b),v||(y=" "+NtopUtils.drawTrend(parseFloat(b),parseFloat(h))),m.data("dt-rr-cur-val",b),b=g(b)),$(f).html(0!=b?b+y:"")}}}v=!1,e.removeData("dt-rr-ajax")}else console.error("Bad JSON result")};e.data("dt-rr-timer",setInterval((function(){e.data("dt-rr-ajax")||e.data("dt-rr-ajax",$.ajax({type:"GET",url:m,data:f,cache:!1,success:h}))}),a)),h(n.resultset)},window.datatableForEachRow=function(e,t){$("tr:not(:first)",e).each((function(e){var a;if("function"==typeof t)t.bind(this)(e);else for(a=0;a<t.length;a++)t[a].bind(this)(e)}))},window.datatableIsEmpty=s,window.datatableRemoveEmptyRow=function(e){$("tbody tr.emptyRow",$(e)).remove()},window.datatableAddEmptyRow=l,window.datatableGetNumDisplayedItems=n,window.datatableGetByForm=i,window.datatableUndoAddRow=function(e,t,a,n){a&&$(a).removeAttr("disabled").removeClass("disabled");var o=$(e).closest("form");$(e).remove(),aysUpdateForm(o);var r=i(o);s(r)&&l(r,t),n&&window[n](e)},window.datatableAddButtonCallback=o,window.datatableAddDeleteButtonCallback=function(e,t,a){o.bind(this)(e,a,"btn-danger",t,"javascript:void(0)",!0,"Delete")},window.datatableAddActionButtonCallback=function(e,t,a,l=!0,n=""){o.bind(this)(e,a,"btn-info",t,"javascript:void(0)",l,n)},window.datatableAddFilterButtonCallback=function(e,t,a,l="",n=!0){o.bind(this)(e,a,"btn-warning",t,"javascript:void(0)",n,l)},window.datatableAddLinkButtonCallback=function(e,t,a,l=""){o.bind(this)(e,a,"btn-info","",t,!0,l)},window.datatableMakeSelectUnique=function(e,t,a){function l(e,t,a,l){$("[id^="+t+"]").each((function(){var t=a($(this));t[0]!=e[0]&&l(t)}))}function n(e,t){if(t)e.removeAttr("disabled");else{var a=e.closest("select"),l=a.val()==e.val();if(e.attr("disabled","disabled"),l){var n=a.find("option:not([disabled])").first().val();a.val(n),a.attr("data-old-val",n)}}}function s(e,t,a){var s=$(this).attr("data-old-val")||"",i=$(this).val()||"",o=[];s==i&&(s=""),l($(this),e,t,(function(e){n(e.find("option[value='"+s+"']"),!0),n(e.find("option[value='"+i+"']"),!1),o.push(e)})),a($(this),s,i,o,n),$(this).attr("data-old-val",i)}var i=(a=NtopUtils.paramsExtend({on_change:$.noop,selector_fn:function(e){return e.find("select").first()}},a)).selector_fn(e);i.on("change",(function(){s.bind(this)(t,a.selector_fn,a.on_change)})),i.on("remove",(function(){$(this).val("").trigger("change")})),function(e,t,a){e.val(""),l(e,t,a,(function(e){e.trigger("change")}));var n=e.find("option:not([disabled])").first().val();e.val(n),e.trigger("change")}(i,t,a.selector_fn)},window.datatableIsLastPage=function(e){var t=$("#dt-bottom-details .pagination li:nth-last-child(3)",$(e));return!(1==t.length&&0==t.hasClass("active"))},window.datatableGetColumn=function(e,t,a){var l=e.data("datatable").resultset.data.filter((function(e){return e[t]===a}));if(l)return l[0]},window.datatableGetColumnIndex=r,window.$.fn.modalHandler=function(e){if(1!=this.length)throw new Error("Only a form element can by initialized!");const t=$.extend({csrf:"",endpoint:"",resetAfterSubmit:!0,dontDisableSubmit:!1,isSyncRequest:!1,method:"get",loadFormData:function(){},onModalInit:function(e){},onModalShow:function(){},beforeSumbit:function(){return{}},onSubmitSuccess:function(e){},onSubmitError:function(e,t,a){},onModalReset:function(e){}},e),a=new u(this,t);return a.delegateSubmit(),a},window.ebpfUtils=c,window.ntopFormatterUtils=m;var v={};window.makeUniqueValidator=function(e){return function(t){var a=t.val(),l=0;return!a||(e(t).each((function(){$(this).val()==a&&(l+=1)})),1==l)}},window.memberValueValidator=function(e){var t=e.val();return""===t||(NtopUtils.is_mac_address(t)||NtopUtils.is_network_mask(t,!0))},window.makePasswordPatternValidator=function(e){return function(t){return!t.val()||$(t).val().match(e)}},window.passwordMatchValidator=function(e){var t=$(e).closest("form").find("[data-passwordmatch]").not(e);return!e.val()||!t.val()||t.val()===e.val()},window.poolnameValidator=function(e){return!e.val()||$(e).val().match(/^[a-z0-9_]*$/)},window.passwordMatchRecheck=function(e){var t=$(e).find("[data-passwordmatch]"),a=0;t.each((function(){""!=$(this).val()&&a++})),a==t.length&&t.trigger("input")},window.hostOrMacValidator=function(e){var t=e.val();return""===t||(NtopUtils.is_mac_address(t)||NtopUtils.is_good_ipv4(t)||NtopUtils.is_good_ipv6(t))},window.ipAddressValidator=function(e){var t=e.val();return""===t||(NtopUtils.is_good_ipv4(t)||NtopUtils.is_good_ipv6(t))},window.bpfValidator=function(e,t=!1){var a=e.val();if(""===a.trim())return!0;var l=e.attr("name");v[l]||(v[l]={ajax_obj:null,valid:!0,timer:null,submit_remind:!1,last_val:null});var n=v[l],s=function(){n.timer=null;var e=function(e){n.ajax_obj=null,n.valid=e,n.last_val=a};n.last_val!==a?(n.ajax_obj&&n.ajax_obj.abort(),n.ajax_obj=$.ajax({type:"GET",url:`${http_prefix}/lua/pro/rest/v2/check/filter.lua`,async:!t,data:{query:a},error:function(){e(n.valid)},success:function(t){var a=!!t.response;e(a)}})):e(n.valid)};return t?s():n.last_val===a||(n.timer&&(clearTimeout(n.timer),n.submit_remind=!1),n.timer=setTimeout(s,250)),n.valid};const h=function(){let e={},t=[];return{ready:function(a){e[a]=!0,t.filter((e=>e.component_name==a)).forEach((e=>e.resolve())),t=t.filter((e=>e.component_name!=a))},on_ready:function(a){return new Promise(((l,n)=>{e[a]?l():t.push({resolve:l,component_name:a,completed:!1})}))}}}(),b=function(){let e={};return{is_array:function(e){return Array.isArray(e)},is_object:function(e){return"object"==typeof e&&!this.is_array(e)&&null!==e},clone:function(e){if(null==e)return null;if(this.is_object(e))return $.extend(!0,{},e);if(Array.isArray(e)){let t=[];for(let a=0;a<e.length;a+=1){let l=this.clone(e[a]);t.push(l)}return t}return e},object_to_array:function(e){if(null==e)return[];let t=[];for(let a in e)t.push(e[a]);return t},get_utc_seconds:function(e){return null==e&&(e=Date.now()),Number.parseInt(e/1e3)},get_timeframes_dict:function(){const e=60;let t=new Date,a=new Date,l=new Date,n=new Date;return{min:e,"5_min":300,"10_min":600,"30_min":1800,hour:3600,"2_hours":7200,"6_hours":21600,"12_hours":43200,day:this.get_utc_seconds(Date.now()-t.setDate(t.getDate()-1)),week:this.get_utc_seconds(Date.now()-a.setDate(a.getDate()-7)),month:this.get_utc_seconds(Date.now()-l.setMonth(l.getMonth()-1)),year:this.get_utc_seconds(Date.now()-n.setMonth(n.getMonth()-12))}},get_timeframe_from_timeframe_id:function(e){let t=this.get_timeframes_dict();if(null==t[e])throw`Wrong timeframe_id passed ${e}, valid intervals are: ${Object.keys(t).join(", ")}`;return t[e]},round_time_by_timeframe_id:function(e,t){return e-e%this.get_timeframe_from_timeframe_id(t)},set_default_time_interval:function(e="30_min",t){let a={epoch_begin:x.get_url_entry("epoch_begin"),epoch_end:x.get_url_entry("epoch_end")};const l=this.get_utc_seconds(Date.now());let n=this.get_timeframe_from_timeframe_id(e);return a.epoch_begin=l-n,a.epoch_end=l,null!=t&&(a.epoch_begin=this.round_time_by_timeframe_id(a.epoch_begin,t),a.epoch_end=this.round_time_by_timeframe_id(a.epoch_end,t)),x.set_key_to_url("epoch_begin",a.epoch_begin),x.set_key_to_url("epoch_end",a.epoch_end),a},check_and_set_default_time_interval:function(e="30_min",t,a=!1,l){let n=this.get_url_epoch_interval();return null==n.epoch_begin||null==n.epoch_end||null!=t&&1==t(n)?(n=this.set_default_time_interval(e,l),n):1==a?n:null},get_url_epoch_interval:function(){return{epoch_begin:x.get_url_entry("epoch_begin"),epoch_end:x.get_url_entry("epoch_end")}},from_utc_s_to_server_date:function(e){let t=1e3*e,a=new Date(t).getTimezoneOffset(),l=moment.tz(t,ntop_zoneinfo)._offset;return new Date(t+1e3*(l+a)*60)},get_date_format:async function(e,t,a){const l={csrf:t};let n=`${a}/lua/rest/v2/get/timeseries/date_format.lua`;const s=NtopUtils.buildURL(n,{is_range_picker:e});return await b.http_request(s,l)},from_utc_to_server_date_format:function(e,t){return null==t&&(t="DD/MMM/YYYY HH:mm:ss"),moment.tz(e,ntop_zoneinfo).format(t)},copy_object_keys:function(e,t,a=!1){if(null!=e)for(let l in e)null!=e[l]&&"__proto__"!==l&&"constructor"!==l&&(1==a&&this.is_object(e[l])&&this.is_object(t[l])?this.copy_object_keys(e[l],t[l],a):t[l]=e[l])},get_cve_details_url:(e,t)=>"cve"==t?`https://nvd.nist.gov/vuln/detail/${e}`:"openvas"==t?`https://vulners.com/openvas/OPENVAS:${e}`:void 0,set_http_globals_headers(t){e=t},http_post_request:async function(e,t,a,l){if(null==t.csrf)throw`NULL csrf in ${e} POST request.`;return this.http_request(e,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)},a,l)},http_request:async function(t,a,l,n){try{null==a&&(a={}),null==a.headers&&(a.headers={}),null!=a.headers&&null!=e&&(a.headers={...a.headers,...e});let l=await fetch(t,a);if(!1===l.ok)return console.error(`http_request ${t}\n ok == false`),console.error(l),null;let s=await l.json();return!0===n?s:s.rsp}catch(e){if(console.error(e),console.error("URL: "+t),1==l)throw e;return null}},download_URI:function(e,t){var a=document.createElement("a");a.download=t,a.href=e,document.body.appendChild(a),a.click(),document.body.removeChild(a)},get_random_string:function(){return Math.random().toString(16).substr(2,8)},string_hash_code:function(e){let t,a,l=0;if(0===e.length)return l;for(t=0;t<e.length;t++)a=e.charCodeAt(t),l=(l<<5)-l+a,l|=0;return l},mod:function(e,t){return(e%=t)<0&&(e+=t),e}}}(),y=function(){let e={},t={};const a=e=>b.clone(e),l=function(e,l){for(let n in t){if(n==l)continue;(0,t[n])(a(e))}};return{get_status:function(t){return 1==t?e:a(e)},update_subscribers:function(){const e=this.get_status();l(e)},on_status_change:function(e,l,n){if(t[e]=l,1==n){let e=this.get_status();l(a(e))}},replace_status:function(t,a){!function(t){e=t}(t),l(t,a)},add_obj_to_status:function(e,t){let a=this.get_status();b.copy_object_keys(e,a),this.replace_status(a,t)},add_value_to_status:function(e,t,a){let l=this.get_status();l[e]=t,this.replace_status(l,a)}}}(),w={},x=function(){let e={};return b.copy_object_keys(w,e),{get_url_params:function(){return window.location.search.substring(1)},get_url_search_params:function(e){null==e&&(e=this.get_url_params());return new URLSearchParams(e)},get_url_entries:function(e){return this.get_url_search_params(e).entries()},get_url_entry:function(e,t){let a=this.get_url_entries(t);for(const[t,l]of a)if(t==e)return l;return null},get_url_object:function(e){let t=this.get_url_entries(e),a={};for(const[e,l]of t)a[e]=l;return a},open_new_window:function(e){null==e&&(e=window.location),window.open(e)},reload_url:function(){window.location.reload()},go_to_url:function(e){window.history.pushState({},"",window.location),window.location.replace(e)},replace_url:function(e){window.history.replaceState({},null,`?${e}`)},replace_url_and_reload:function(e){this.replace_url(e),this.reload_url()},serialize_param:function(e,t){return null==t&&(t=""),`${e}=${encodeURIComponent(t)}`},set_custom_key_serializer:function(t,a){e[t]=a},obj_to_url_params:function(t){let a=[];const l=this.serialize_param;for(let n in t){let s=e[n];null==s&&(s=l);let i=s(n,t[n]);a.push(i)}return a.join("&")},delete_params:function(e){let t=this.get_url_search_params();e.forEach((e=>{t.delete(e)})),this.replace_url(t.toString())},delete_key_from_url:function(e){let t=this.get_url_search_params();t.delete(e),this.replace_url(t.toString())},set_key_to_url:function(e,t){null==t&&(t="");let a=this.get_url_search_params();a.set(e,t),this.replace_url(a.toString())},add_obj_to_url:function(e,t){let a=this.obj_to_url_params(e),l=this.get_url_search_params(t),n=this.get_url_entries(a);for(const[e,t]of n)l.set(e,t);let s=l.toString();if(null!=t)return s;this.replace_url(s)}}}(),k={EPOCH_CHANGE:"epoch_change",FILTERS_CHANGE:"filters_change"},S={EPOCH_CHANGE:function(e,t){return e.epoch_begin!=t.epoch_begin||e.epoch_end!=t.epoch_end},FILTERS_CHANGE:function(e,t){return null==e.filters&&null!=t.filters||null!=e.filters&&null==t.filters||null!=e.filters&&null!=t.filters&&(e.filters.length!=t.filters.length||e.filters.some((e=>null==t.filters.find((t=>t.id==e.id)))))}},N={SHOW_MODAL_FILTERS:"show_modal_filters",MODAL_FILTERS_APPLY:"modal_filters_apply",SHOW_GLOBAL_ALERT_INFO:"show_global_alert_info",VIS_DATA_LOADED:"vis_data_loaded",CHANGE_PAGE_TITLE:"change_page_title",DATATABLE_LOADED:"datatable_loaded",GET_INTERFACE_FATA:"get_interface_data",COMPONENT_EPOCH_INTERVAL_CHANGE:"component_epoch_interval_change"},C=function(){const e="events_manager";let t={},a={};const l=e=>b.clone(e),n=function(e,t,a){for(let n in e){if(n==a)continue;(0,e[n])(l(t))}},s=(e,t)=>`${e}_${t}`;y.on_status_change(e,(function(e){for(let l in k){if(1==(0,S[l])(e,t)){let t=a[l];n(t,e)}}t=e}),!0);const i=function(e,t,l,i){null!=i&&(e=s(e,i));let o=a[e];null!=o&&n(o,t,l)},o=function(e,t,n,i,o){if(1==o&&(t=s(t,e)),null==a[t]&&(a[t]={}),1==i){let e=y.get_status();n(l(e))}a[t][e]=n};return{emit_custom_event:function(e,t,a){i(e,t,null,a)},on_custom_event:function(e,t,a,l){o(e,t,a,null,l)},emit_event:function(t,a,l){i(t,a,l),y.add_obj_to_status(a,e)},on_event_change:function(e,t,a,l){o(e,t,a,l)}}}();function E(e,t,a,l,n){this.name=e,this.update_url=t,this.url_params=a,this.units=l,this.refresh=n;let s=[],i="",o=[],r=[],c=[];var u=[],d=[],_=[],p=function(e,t){var a=500,l=325,n=52,s=14,i=250,o=116;$(e).hasClass("pie-chart-small")&&(l=250,n=(o=(a=330)/5+15)/2);var r=d3.layout.pie().value((function(e){return 0==e.value&&(e.value=1),e.value})),c=d3.scale.category20(),u=d3.svg.arc().startAngle((function(e){return e.startAngle})).endAngle((function(e){return e.endAngle})).innerRadius(n).outerRadius(o),d=d3.select(e).append("svg:svg").attr("width",a).attr("height",l).attr("viewBox","0 0 "+a+" "+l).attr("preserveAspectRatio","xMidYMid"),_=d.append("svg:g").attr("class","arc").attr("transform","translate("+a/2+","+l/2+")"),p=d.append("svg:g").attr("class","label_group").attr("transform","translate("+a/2+","+l/2+")"),f=d.append("svg:g").attr("class","center_group").attr("transform","translate("+a/2+","+l/2+")");_.append("svg:circle").attr("fill","#EFEFEF").attr("r",o),f.append("svg:circle").attr("fill","white").attr("r",n);var m=null,v=null;t&&(f.append("svg:text").attr("class","label").attr("dy",-15).attr("text-anchor","middle").text("TOTAL"),v=f.append("svg:text").attr("class","total").attr("dy",7).attr("text-anchor","middle").text("Waiting..."),m=f.append("svg:text").attr("class","units").attr("dy",21).attr("text-anchor","middle").text(t));return[_,r,v,m,c,i,u,p,f,o,s]}(e,l),f=p[0],m=p[1],v=p[2],h=p[4],g=p[5],b=p[6],y=p[7],w=p[9],x=p[10];function k(e,t){return e.label<t.label?-1:e.label>t.label?1:0}function S(e,t){var a,l;d[t]?(a=d[t].startAngle,l=d[t].endAngle):!d[t]&&d[t-1]?(a=d[t-1].endAngle,l=d[t-1].endAngle):!d[t-1]&&d.length>0?(a=d[d.length-1].endAngle,l=d[d.length-1].endAngle):(a=0,l=0);t=d3.interpolate({startAngle:a,endAngle:l},{startAngle:e.startAngle,endAngle:e.endAngle});return function(e){var a=t(e);return b(a)}}function N(e,t){s0=2*Math.PI,e0=2*Math.PI;t=d3.interpolate({startAngle:e.startAngle,endAngle:e.endAngle},{startAngle:s0,endAngle:e0});return function(e){var a=t(e);return b(a)}}function C(e,t){var a;a=d[t]?(d[t].startAngle+d[t].endAngle-Math.PI)/2:!d[t]&&d[t-1]?(d[t-1].startAngle+d[t-1].endAngle-Math.PI)/2:!d[t-1]&&d.length>0?(d[d.length-1].startAngle+d[d.length-1].endAngle-Math.PI)/2:0;var l=(e.startAngle+e.endAngle-Math.PI)/2,n=d3.interpolateNumber(a,l);return function(e){var t=n(e);return"translate("+Math.cos(t)*(w+x)+","+Math.sin(t)*(w+x)+")"}}this.update=function(){$.ajax({type:"GET",url:this.update_url,data:this.url_params,success:function(e){let t;"object"==typeof e?t=e:"string"==typeof e&&(t=jQuery.parseJSON(e)),t&&function(e){e.rsp&&(e=e.rsp);e.sort(k),s=e,d=_,u=m(s);var t=0;function a(e,a,l){return e.name=s[a].label,e.value=s[a].value,e.url=s[a].url,t+=e.value,e.value>0}(_=u.filter(a)).length>0&&d.length>0&&(f.selectAll("circle").remove(),v&&v.text((function(){return(t/1024).toFixed(1)})),i=f.selectAll("path").data(_),i.enter().append("svg:path").attr("stroke","white").attr("stroke-width",.5).attr("fill",(function(e,t){return h(t)})).transition().duration(g).attrTween("d",S),i.transition().duration(g).attrTween("d",S),i.exit().transition().duration(g).attrTween("d",N).remove(),o=y.selectAll("line").data(_),o.enter().append("svg:line").attr("x1",0).attr("x2",0).attr("y1",-w-3).attr("y2",-w-8).attr("stroke","gray").attr("transform",(function(e){return"rotate("+(e.startAngle+e.endAngle)/2*(180/Math.PI)+")"})),o.transition().duration(g).attr("transform",(function(e){return"rotate("+(e.startAngle+e.endAngle)/2*(180/Math.PI)+")"})),o.exit().remove(),r=y.selectAll("text.value").data(_).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?5:-7})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){return(e.value/t*100).toFixed(1)+"%"})),r.enter().append("svg:text").attr("class","value").attr("transform",(function(e){return"translate("+Math.cos((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+","+Math.sin((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+")"})).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?5:-7})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){if(t<=1)return"";return(e.value/t*100).toFixed(1)+"%"})),r.transition().duration(g).attrTween("transform",C),r.exit().remove(),c=y.selectAll("text.units").data(_).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?17:5})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){return e.name})).on("click",(function(e){e.url&&(window.location.href=e.url)})),c.enter().append("svg:text").attr("class","units").attr("transform",(function(e){return"translate("+Math.cos((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+","+Math.sin((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+")"})).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?17:5})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){return e.name})).on("click",(function(e){e.url&&(window.location.href=e.url)})),c.transition().duration(g).attrTween("transform",C),c.exit().remove())}(t)}})},this.update(),this.update()}window.ntopng_events=k,window.ntopng_events_manager=C,window.ntopng_status_manager=y,window.ntopng_utility=b,window.ntopng_url_manager=x,window.ntopng_sync=h,window.ntopng_custom_events=N,E.prototype.setUrlParams=function(e){this.url_params=e,this.forceUpdate()},E.prototype.forceUpdate=function(e){this.stopInterval(),this.update(),this.startInterval()},E.prototype.setInterval=function(e){this.pieInterval=e},E.prototype.stopInterval=function(){clearInterval(this.pieInterval)},E.prototype.startInterval=function(){this.pieInterval=setInterval(this.update(),this.refresh)};const A={},T={db_analyze:function(e,t,a){const{dataPointIndex:l}=a,{filter:n}=a.w.config;let s;if(a.w.config.filtering_labels&&(s=a.w.config.filtering_labels[l]),0==n.length||void 0===s)return;let i=ntopng_status_manager.get_status().filters;i.push({id:n[0],operator:"eq",value:s}),ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:i})},none:function(e,t,a){},standard:function(e,t,a){const{seriesIndex:l,dataPointIndex:n}=a,{series:s}=a.w.config;if(-1===l)return;if(void 0===s)return;const i=s[l];if(void 0!==i.base_url){const e=i.start_url||"",t=i.data[n].meta.url_query;location.href=`${i.base_url}?${e}${t}`}}},I={format_bytes:function(e,{config:t,seriesIndex:a,dataPointIndex:l}){return NtopUtils.bytesToSize(e)},format_pkts:function(e,{config:t,seriesIndex:a,dataPointIndex:l}){return NtopUtils.formatPackets(e)},format_value:function(e,{config:t,seriesIndex:a,dataPointIndex:l}){return NtopUtils.formatValue(e)},format_multiple_date:function(e,{config:t,seriesIndex:a,dataPointIndex:l}){return new Date(e[0])+" - "+new Date(e[1])},format_label_from_xy:function({series:e,seriesIndex:t,dataPointIndex:a,w:l}){const n=l.config.series[t].data[a],s=n.x,i=n.y;return`\n            <div class='apexcharts-theme-light apexcharts-active' id='test'>\n                <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n                    ${n.meta.label}\n                </div>\n                <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${l.config.xaxis.title.text}</b>: ${s}\n                    </div>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${l.config.yaxis[0].title.text}</b>: ${i}\n                    </div>\n                </div>\n            </div>`},format_label_from_xname:function({series:e,seriesIndex:t,dataPointIndex:a,w:l}){const n=l.config.series[t].data[a],s=n.name,i=n.y;return`\n            <div class='apexcharts-theme-light apexcharts-active' id='test'>\n                <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n                    ${n.meta.label}\n                </div>\n                <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${l.config.xaxis.title.text}</b>: ${s}\n                    </div>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${l.config.yaxis[0].title.text}</b>: ${i}\n                    </div>\n                </div>\n            </div>`}},O=I.format_value;class P{static registerWidget(e){if(null===e)throw new Error("The passed widget reference is null!");if(e.name in A)throw new Error(`The widget ${e.name} is already defined!`);A[e.name]=e}static getWidgetByName(e){if(e in A)return A[e];throw new Error(`Widget ${e} not found!`)}}class U{constructor(e,t={},a=0,l={}){this._fetchedData=[],this.name=e,this._updateTime=a,this._datasource=t,this._additionalParams=l}async init(){P.registerWidget(this),this._fetchedData=await this._fetchData(),this._updateTime>0&&setInterval((async()=>{await this.update(this._datasource.params)}),this._updateTime)}async destroy(){}async destroyAndUpdate(e={}){await this.destroy(),await this.update(e)}async updateByUrl(e){const t=new URL(`${location.origin}${this._datasource.name}`);let a=ntopng_url_manager.get_url_entries(e);for(const[e,l]of a)t.searchParams.set(e,l);this._datasource.endpoint=t.pathname+t.search,this._fetchedData=await this._fetchData()}async update(e={}){const t=new URL(`${location.origin}${this._datasource.name}`);for(const[a,l]of Object.entries(e))t.searchParams.set(a,l);this._datasource.endpoint=t.pathname+t.search,this._fetchedData=await this._fetchData()}async _fetchData(){const e=await fetch(`${http_prefix}${this._datasource.endpoint}`);return await e.json()}}const j=(e,t)=>{let a=t.position().top;const l=e.height(),n=$(window).height();if(l+a>=n){const s=n-a;s<=150?a=a-l+t.outerHeight():e.css({"max-height":s-20,"overflow-y":"auto"})}e.css("top",`${a}px`)};$(window).on("scroll",(function(){$(this).scrollTop()>=32?$("#n-navbar").addClass("scrolled bg-light"):$("#n-navbar").removeClass("scrolled bg-light")})),$((()=>{const e=()=>{if(0==$(".sidebar-close-layer").length){const e=$("<div class='sidebar-close-layer' style='display:none'></div>");e.on("click",(function(){$("#n-sidebar").removeClass("active"),e.fadeOut((function(){$(this).remove()}))})),$("#wrapper").append(e),e.fadeIn()}else $(".sidebar-close-layer").fadeOut((function(){$(this).remove()}));$("#n-sidebar").toggleClass("active")};$("#n-sidebar a.submenu").bind({mouseenter:function(){let e=$(this).parent().find("div[id$='submenu']");j(e,$(this)),e.show()},mouseleave:function(){$(this).parent().find("div[id$='submenu']").hide()}}),$("div[id$='submenu']").bind({mouseenter:function(){$(this).show()},mouseleave:function(){$(this).hide()}}),$("button[data-bs-toggle='sidebar']").on("click",(function(){e()}))})),$(window).on("resize",(function(){const e=$("#n-sidebar").find("div.show[id$='submenu']");if(e.length>0){const t=e.parent().find("a[data-bs-toggle='collapse']");j(e,t)}}));const M=function(){const e={series:[],chart:{height:"100%",width:"100%",toolbar:{tools:{zoomout:!1,download:!1,zoomin:!1,zoom:" ",selection:!1,pan:!1,reset:!1}},events:{}},xaxis:{tooltip:{enabled:!1}},yaxis:{labels:{show:!0,style:{colors:[],fontSize:"11px",fontWeight:400,cssClass:""}},title:{rotate:-90,offsetY:0,offsetX:0,style:{fontSize:"11px",fontWeight:900,cssClass:""}},tooltip:{enabled:!1}},grid:{show:!1},legend:{show:!0}},t=function(e){e.xaxis.labels.formatter=function(e,{series:t,seriesIndex:a,dataPointIndex:l,w:n}){return b.from_utc_to_server_date_format(e)}},l=function(){let t=b.clone(e);return b.copy_object_keys({chart:{stacked:!0,type:"bar",zoom:{enabled:!0,type:"x"}},tooltip:{x:{format:"dd MMM yyyy HH:mm:ss"},y:{}},xaxis:{labels:{show:!0,datetimeUTC:!1,formatter:null},axisTicks:{show:!1},type:"datetime",axisBorder:{show:!0},convertedCatToNumeric:!1},dataLabels:{enabled:!1},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"}},t,!0),t}(),n=function(){let t=b.clone(e);return b.copy_object_keys({chart:{stacked:!0,type:"area",zoom:{enabled:!0,type:"x"}},tooltip:{x:{format:"dd MMM yyyy HH:mm:ss"},y:{}},xaxis:{labels:{show:!0,datetimeUTC:!1,formatter:null},axisTicks:{show:!1},type:"datetime",axisBorder:{show:!0},convertedCatToNumeric:!1},dataLabels:{enabled:!1},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"}},t,!0),t}(),s=function(){let t=b.clone(e),l={chart:{stacked:!0,type:"polarArea",height:400},yaxis:{show:!0,labels:{formatter:a.bytesToSize}},dataLabels:{enabled:!0,formatter:function(e,t){return e?`${e.toFixed(1)}%`:"0%"}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},tooltip:{y:{formatter:a.bytesToSize}}};return b.copy_object_keys(l,t,!0),t}(),i=function(){let t=b.clone(e),l={chart:{stacked:!0,type:"donut",height:300},yaxis:{show:!0,labels:{formatter:a.bytesToSize}},dataLabels:{enabled:!0,formatter:function(e,t){return e?`${e.toFixed(1)}%`:"0%"}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},tooltip:{y:{formatter:m.getFormatter("number")}},noData:{text:"No Data",style:{color:void 0,fontSize:"24px",fontFamily:void 0}}};return b.copy_object_keys(l,t,!0),t}(),o=function(){let t=b.clone(e),l={chart:{stacked:!0,type:"radialBar",height:300},yaxis:{show:!0},dataLabels:{enabled:!0,formatter:function(e,t){return e}},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},tooltip:{y:{formatter:a.bytesToSize}},noData:{text:"No Data",style:{color:void 0,fontSize:"24px",fontFamily:void 0}},plotOptions:{radialBar:{offsetY:0,startAngle:0,endAngle:270,hollow:{margin:5,size:"30%",background:"transparent",image:void 0},dataLabels:{name:{show:!1},value:{show:!1}}}},legend:{show:!0,floating:!0,fontSize:"16px",position:"left",offsetX:160,offsetY:15,labels:{useSeriesColors:!0},markers:{size:0},formatter:function(e,t){return e+":  "+t.w.globals.series[t.seriesIndex]},itemMargin:{vertical:3}},responsive:[{breakpoint:480,options:{legend:{show:!1}}}]};return b.copy_object_keys(l,t,!0),t}(),r=function(){let t=b.clone(e),l={chart:{stacked:!0,type:"pie",height:400},yaxis:{show:!0,labels:{formatter:a.bytesToSize}},dataLabels:{enabled:!0,formatter:function(e,t){return e?`${e.toFixed(1)}%`:"0%"}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},tooltip:{y:{formatter:a.bytesToSize}}};return b.copy_object_keys(l,t,!0),t}(),c=function(){let t=b.clone(e);return b.copy_object_keys({chart:{type:"line",zoom:{enabled:!0,type:"x"}},tooltip:{shared:!0,x:{format:"dd MMM yyyy HH:mm:ss"},y:{}},xaxis:{labels:{show:!1,datetimeUTC:!1,formatter:null},axisTicks:{show:!0},type:"datetime",axisBorder:{show:!0},convertedCatToNumeric:!1},stroke:{show:!0,width:2,curve:"smooth"},grid:{show:!0},dataLabels:{enabled:!1}},t,!0),t}(),u=function({series:e,seriesIndex:t,dataPointIndex:a,w:l}){const n=l.config.series[t].data[a],s=n.name,i=n.y;return`\n          <div class='apexcharts-theme-light apexcharts-active' id='test'>\n              <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n                  ${n.meta.label}\n              </div>\n              <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n                  <div class='apexcharts-tooltip-text text-left'>\n                      <b>${l.config.xaxis.title.text}</b>: ${s}\n                  </div>\n                  <div class='apexcharts-tooltip-text text-left'>\n                      <b>${l.config.yaxis[0].title.text}</b>: ${i}\n                  </div>\n              </div>\n          </div>`},d=function(){let t=b.clone(e),a={chart:{width:"100%",height:"100%",stacked:!0,type:"bubble",zoom:{autoScaleYaxis:!0}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},events:{dataPointSelection:"standard"},grid:{padding:{left:6}},xaxis:{type:"numeric",labels:{}},yaxis:{type:"numeric",forceNiceScale:!0,labels:{}},dataLabels:{enabled:!1},tooltip:{custom:u}};return b.copy_object_keys(a,t,!0),t}();return{typeChart:{TS_LINE:"TS_LINE",TS_STACKED:"TS_STACKED",TS_COLUMN:"TS_COLUMN",PIE:"PIE",DONUT:"DONUT",RADIALBAR:"RADIALBAR",RADAR:"RADAR",BUBBLE:"BUBBLE",BASE:"BASE"},newChart:function(a){let u,_={};if(a==this.typeChart.TS_STACKED)_=b.clone(n),t(_);else if(a==this.typeChart.TS_LINE)_=b.clone(c),t(_);else if(a==this.typeChart.TS_COLUMN)_=b.clone(l),t(_);else if(a==this.typeChart.PIE)_=b.clone(r);else if(a==this.typeChart.DONUT)_=b.clone(i);else if(a==this.typeChart.RADIALBAR)_=b.clone(o);else if(a==this.typeChart.POLAR)_=b.clone(s);else if(a==this.typeChart.BUBBLE)_=b.clone(d);else{if(a!=this.typeChart.BASE)throw`ntopChartApex::newChart: chart type = ${a} unsupported`;_=b.clone(e)}const p=e=>{if("string"==typeof e?.yaxis?.labels?.formatter){const t=e.yaxis.labels.formatter;let a=m.getFormatter(t);null!=a?e.yaxis.labels.formatter=a:"formatValue"==t?e.yaxis.labels.formatter=m.getFormatter("number"):"bytesToSize"==t&&(e.yaxis.labels.formatter=m.getFormatter("bytes"))}};return{drawChart:function(e,t){p(t),b.copy_object_keys(t,_,!0),u=new ApexCharts(e,_),u.render()},to_data_uri:async function(e){if(null==u)return;return(await u.dataURI(e)).imgURI},destroyChart:function(){null!=u&&u.destroy()},updateChart:function(e){null!=u&&(p(e),u.updateOptions(e,!1,!1,!1))},updateSeries:function(e){null!=u&&u.updateSeries(e)},registerEvent:function(e,t,a=!1){_.chart.events[e]=t,1==a&&u.updateOptions(_)}}}}}(),F=function(){let e={};return{addHandler:function(t){let a=e[t.handlerId];return null==a&&(a=[],e[t.handlerId]=a),a.push((()=>{t.onClick()})),`window['_DataTableButtonsOnClick']('${t.handlerId}', '${a.length-1}')`},getHandler:function(t,a){let l=e[t];return null==l?null:l[a]},deleteHandlersById:function(t){e[t]=null}}}();window._DataTableButtonsOnClick=function(e,t){let a=F.getHandler(e,t);null!=a&&a()};class L{static getStdDatatableConfig(e=[],t="<'row'<'col-sm-2 d-inline-block'l><'col-sm-10 text-end d-inline-block'<'dt-search'f>B>rtip>"){return 0==e.length&&(t="fBrtip"),{dom:t,pagingType:"full_numbers",lengthMenu:[[10,20,50,100],[10,20,50,100]],language:{search:i18n.script_search,paginate:{previous:"&lt;",next:"&gt;",first:"«",last:"»"}},saveState:!0,responsive:!0,buttons:{buttons:e,dom:{button:{className:"btn btn-link"},container:{className:"d-inline-block"}}}}}static createLinkCallback(e){let t="";return t=`onclick="${F.addHandler(e.handler)}"`,`<a href=#\n                   ${t}>\n                   ${e.text||""}\n                </a>`}static createActionButtons(e=[]){const t=[];e.forEach(((e,a)=>{let l="";if(e.handler){l=`onclick="${F.addHandler(e.handler)}"`}let n=`\n            <li>\n                <a\n                    ${e.href||e.modal?`href='${e.href||e.modal}'`:""}\n                    ${l}\n                    ${e.onclick?`onclick='${e.onclick}'`:""}\n                    ${e.modal?"data-bs-toggle='modal'":""}\n                    class='dropdown-item ${e.class?e.class:""}'\n                    ${e.hidden?"style='display: none'":""}\n                    ${e.external?"target='_about'":""}\n                    >\n                    <i class='fas ${e.icon}'></i> ${e.title||""}\n                </a>\n            </li>\n            `;t.push(n)}));return`<div class='dropdown'><button type="button" class="btn btn-sm btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false"><i class="fas fa-align-justify"></i></button>${`<ul class="dropdown-menu">${t.join("")}</ul>`}</div>`}static deleteButtonHandlers(e){F.deleteHandlersById(e)}static setAjaxConfig(e,t,a="",l="get",n={}){return e.ajax={url:t,type:l,dataSrc:a,data:function(e){return $.extend({},e,n)}},e}static extendConfig(e,t){return t.hasFilters&&(t.stateSaveCallback=function(e,t){localStorage.setItem("DataTables_"+e.sInstance,JSON.stringify(t))},t.stateLoadCallback=function(e){return JSON.parse(localStorage.getItem("DataTables_"+e.sInstance))},t.stateSaveParams=function(e,t){$("[data-filter]").each((function(){const e=$(this).find("li.active").data("filter-key");e&&(t.filters||(t.filters={}),t.filters[$(this).data("filter")]=e)}))}),$.extend({},e,t)}static secondsToHHMMSS(e){const t=e=>`${e}`.padStart(2,"0"),a=e%60,l=Math.floor(e/60)%60;return`${t(Math.floor(e/3600))}:${t(l)}:${t(a)}`}static openEditModalByQuery(e){const t=new URLSearchParams(window.location.search);if(!t.has(e.paramName))return;const a=t.get(e.paramName),l=e.datatableInstance.data().toArray().find((t=>t[e.paramName]==a));if("function"==typeof e.cancelIf&&e.cancelIf(l))return;const n=$(`#${e.modalHandler.getModalID()}`);if(void 0!==l&&(e.modalHandler.invokeModalInit(l),n.modal("show")),!t.has("referer"))return void n.on("hidden.bs.modal",(function(t){const a=new URL(window.location.href);a.searchParams.delete(e.paramName),history.replaceState({},"",a.toString())}));const s=t.get("referer");n.on("hidden.bs.modal",(function(e){window.location=s}))}static addToggleColumnsDropdown(e,t=((e,t)=>{})){if(void 0===e)throw"The $table is undefined!";const a=e.table().node().id;L._loadColumnsVisibility(e).then((function(l){let n=[-1];l.success?n=l.columns.map((e=>parseInt(e))):console.warn(l.message);const s=[],i=[],o=$(e.context[0].nTableWrapper);e.columns().every((function(t){e.column(t).visible()?s.push({index:t,name:this.header().textContent,label:this.i18n.name}):i.push(t)}));const r=$('\n                <div class="btn-group">\n                    <button type="button" class="btn btn-link dropdown-toggle" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\n                        <i class="fas fa-eye"></i>\n                    </button>\n                </div>\n            '),c=$('<div class="dropdown-menu dropdown-menu-right" style=\'width: max-content;\'><h6 class="dropdown-header">Show Columns</h6></div>'),u=$("<div class='px-4'></div>");for(let l=0;l<s.length;l++){const o=s[l];if(""==o.name)continue;const r=`toggle-${o.name.split().join("_")}`,c=-1===n.indexOf(o.index);if(!c){e.column(o.index).visible(!1)}const d=$(`<input class="form-check-input" ${c?"checked":""} type="checkbox" id="${r}">`),_=$(`\n                    <div class="form-check form-switch">\n                        <label class="form-check-label" for="${r}">\n                            ${o.name}\n                        </label>\n                    </div>\n                `);d.on("change",(function(l){$(".overlay").toggle(500);const n=e.column(o.index);n.visible(!n.visible());const s=n.visible(),r=[];e.columns().every((function(t){e.column(t).visible()||-1!==i.indexOf(t)||r.push(t)})),$.post(`${http_prefix}/lua/datatable_columns.lua`,{action:"save",table:a,columns:r.join(","),csrf:window.__CSRF_DATATABLE__}).then((function(e){e.success||console.warn(e.message)})),void 0!==t&&t(n,s)})),_.prepend(d),u.append(_)}c.on("click.bs.dropdown",(function(e){e.stopPropagation()})),r.append(c.append(u)),o.find(".dt-search").parent().append(r)}))}static async _loadColumnsVisibility(e){const t=e.table().node().id;return $.get(`${http_prefix}/lua/datatable_columns.lua?table=${t}&action=load`)}}class R{static alertSeverityAndType(e,t,a){return`${R.formatValueLabel(e,t,a)} ${R.formatValueLabel(a.alert_id,t,a)}`}static hideIfZero(e,t,l,n){let s=void 0!==e.color?e.color:"#aaa",i=void 0!==e.value?e.value:e;"display"===t&&0===parseInt(i)&&(s="#aaa");let o=`<span style='color: ${s}'>${a.fint(i)}</span>`;return void 0!==e.url&&(o=`<a href="${e.url}">${o}</a>`),o}static secondsToTime(e,t,l,n){return"display"===t?a.secondsToTime(e):e}static filterize(e,t,l,n,s,i,o,r){let c=`<a class='tag-filter' data-tag-key='${e}' title='${s||t}' data-tag-value='${t}' data-tag-label='${n||l||t}' href='javascript:void(0)'>${i||l||t}</a>`;if(null!=o)if(o){if(t){c+=` <a href='${a.buildURL(`${http_prefix}/lua/pro/enterprise/snmp_device_details.lua?host=${t}`)}'data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`}}else if(r&&t){c+=` <a href='${a.buildURL(`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${r}&snmp_port_idx=${t}`)}'data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`}return c}static formatValueLabel(e,t,a,l){if("display"!==t)return e.value;let n=e.label;return 1==l&&0==e.value&&(n=""),e.color&&(n=`<span class='font-weight-bold' style='color: ${e.color}'>${n}</span>`),n}static formatCategory(e,t,a,l){if("display"!==t)return e.value;let n=`<a class='tag-filter' data-tag-key='alert_category' data-tag-value='${e.value}' data-tag-label='${e.label}' href='javascript:void(0)'><i class="fa fas ${e.icon}" title="${e.label}"></i></a>`;return 1==l&&0==e.value&&(n=""),n}static formatScore(e,t,a,l){if("display"!==t)return e.value;let n=e.label;return 1==l&&0==e.value&&(n=""),e.color&&(n=`<span class='font-weight-bold' style='color: ${e.color}'>${n}</span>`),`<a class='tag-filter' data-tag-key='score' title='${e.label}' data-tag-value='${e.value}' data-tag-label='${e.label}' href='javascript:void(0)'>${n}</a>`}static formatMessage(e,t,a,l){if("display"!==t)return e.value;let n=e.descr;return e.shorten_descr&&(n=`<span title="${e.descr}">${e.shorten_descr}</span>`),n}static formatTraffic(e,t,l,n){if("display"!==t)return e.total_bytes;return`${a.formatPackets(e.total_packets)} / ${a.bytesToVolume(e.total_bytes)}`}static formatSubtype(e,t,a,l){if("display"!==t)return e;return R.filterize("subtype",e,e)}static filterize_2(e,t,a,l,n,s){return null==t||0==t&&(null==a||""==a)?"":`<a class='tag-filter' data-tag-key='${e}' title='${n||t}' data-tag-value='${t}' data-tag-label='${l||a||t}' href='javascript:void(0)'>${s||a||t}</a>`}static getFormatGenericField(e,t){return function(a,l,n){if("display"!==l)return a.value;if(1==t&&0==a?.value)return"";let s="";return void 0!==a.reference&&(s=a.reference),R.filterize_2(e,n[e].value,n[e].label,n[e].label,n[e].label)+" "+s}}static formatSNMPInterface(e,t,a){if("display"!==t)return e.value;let l=R.filterize("snmp_interface",`${a.ip}_${e.value}`,e.label,e.label,e.label,null,!1,a.ip);return e.color&&(l=`<span class='font-weight-bold' style='color: ${e.color}'>${l}</span>`),l}static formatSNMPIP(e,t,a,l){return"display"!==t?e:R.filterize("ip",e,e,e,e,null,!0)}static formatNetwork(e,t,a,l){return"display"!==t?e:R.filterize("network_name",e,e,e,e,null,!1)}static formatProbeIP(e,t,a,l){if("display"!==t)return e;return R.filterize("probe_ip",e.value,e.label,e.label,e.label_long)}static formatHost(e,t,a,l){if("display"!==t)return e;let n="";void 0!==e.reference&&(n=e.reference);let s,i,o="";return e.label&&e.label!=e.value?(s="name",i=e.label_long,o=R.filterize("name",e.label_long,e.label,e.label,e.label_long)):(s="ip",i=e.value,o=R.filterize("ip",e.value,e.label,e.label,e.label_long)),a.vlan_id&&""!=a.vlan_id&&"0"!=a.vlan_id&&(o=R.filterize(s,`${i}@${a.vlan_id}`,`${e.label}@${a.vlan_id}`,`${e.label}@${a.vlan_id}`,`${e.label_long}@${a.vlan_id}`)),e.country&&(o+=R.filterize("country",e.country,e.country,e.country,e.country,' <img src="'+http_prefix+'/dist/images/blank.gif" class="flag flag-'+e.country.toLowerCase()+'"></a> ')),a.role&&"attacker"==a.role.value?o=o+" "+R.filterize("role",a.role.value,'<i class="fas fa-skull" title="'+a.role.label+'"></i>',a.role.label):a.role&&"victim"==a.role.value&&(o=o+" "+R.filterize("role",a.role.value,'<i class="fas fa-sad-tear" title="'+a.role.label+'"></i>',a.role.label)),a.role_cli_srv&&"client"==a.role_cli_srv.value?o=o+" "+R.filterize("role_cli_srv",a.role_cli_srv.value,'<i class="fas fa-long-arrow-alt-right" title="'+a.role_cli_srv.label+'"></i>',a.role_cli_srv.label):a.role_cli_srv&&"server"==a.role_cli_srv.value&&(o=o+" "+R.filterize("role_cli_srv",a.role_cli_srv.value,'<i class="fas fa-long-arrow-alt-left" title="'+a.role_cli_srv.label+'"></i>',a.role_cli_srv.label)),o+" "+n}static filterizeVlan(e,t,l,n,s,i){let o=n,r=s,c=i;return e.vlan&&0!=e.vlan.value&&(o=`${n}@${e.vlan.value}`,r=`${s}@${e.vlan.label}`,c=`${i}@${e.vlan.title}`),r=a.shortenLabel(r,16,"."),R.filterize(l,o,r,r,c)}static formatFlowTuple(e,t,a,l){let n=e.active_url?`<a href="${e.active_url}"><i class="fas fa-stream"></i></a>`:"",s="";if(e.cli_ip.name){let t="";e.cli_ip.label_long&&(t=e.cli_ip.value+" ["+e.cli_ip.label_long+"]"),s=R.filterizeVlan(e,a,"cli_name",e.cli_ip.name,e.cli_ip.label,t)}else s=R.filterizeVlan(e,a,"cli_ip",e.cli_ip.value,e.cli_ip.label,e.cli_ip.label_long);let i="";e.cli_ip.country&&"nil"!==e.cli_ip.country&&(i=R.filterize("cli_country",e.cli_ip.country,e.cli_ip.country,e.cli_ip.country,e.cli_ip.country,' <img src="'+http_prefix+'/dist/images/blank.gif" class="flag flag-'+e.cli_ip.country.toLowerCase()+'"></a> '));let o=e.cli_port&&e.cli_port>0?":"+R.filterize("cli_port",e.cli_port,e.cli_port):"",r="";1==e.cli_ip.blacklisted&&(r=" <i class='fas fa-ban fa-sm' title='"+i18n("hosts_stats.blacklisted")+"'></i>");let c="";if(e.srv_ip.name){let t="";e.srv_ip.label_long&&(t=e.srv_ip.value+" ["+e.srv_ip.label_long+"]"),c=R.filterizeVlan(e,a,"srv_name",e.srv_ip.name,e.srv_ip.label,t)}else c=R.filterizeVlan(e,a,"srv_ip",e.srv_ip.value,e.srv_ip.label,e.srv_ip.label_long);let u=e.srv_port&&e.srv_port>0?":"+R.filterize("srv_port",e.srv_port,e.srv_port):"",d="";e.srv_ip.country&&"nil"!==e.srv_ip.country&&(d=R.filterize("srv_country",e.srv_ip.country,e.srv_ip.country,e.srv_ip.country,e.srv_ip.country,' <img src="'+http_prefix+'/dist/images/blank.gif" class="flag flag-'+e.srv_ip.country.toLowerCase()+'"></a> '));let _="";1==e.srv_ip.blacklisted&&(_=" <i class='fas fa-ban fa-sm' title='"+i18n("hosts_stats.blacklisted")+"'></i>");let p="",f="";return a.cli_role&&("attacker"==a.cli_role.value?p+=R.filterize("role","attacker",'<i class="fas fa-skull" title="'+a.cli_role.label+'"></i>',a.cli_role.tag_label):"victim"==a.cli_role.value&&(p+=R.filterize("role","victim",'<i class="fas fa-sad-tear" title="'+a.cli_role.label+'"></i>',a.cli_role.tag_label))),a.srv_role&&("attacker"==a.srv_role.value?f+=R.filterize("role","attacker",'<i class="fas fa-skull" title="'+a.srv_role.label+'"></i>',a.srv_role.tag_label):"victim"==a.srv_role.value&&(f+=R.filterize("role","victim",'<i class="fas fa-sad-tear" title="'+a.srv_role.label+'"></i>',a.srv_role.tag_label))),`${n} ${s}${r}${i}${o} ${p} ${e.cli_ip.reference} <i class="fas fa-exchange-alt fa-lg" aria-hidden="true"></i> ${c}${_}${d}${u} ${f} ${e.srv_ip.reference}`}static formatSubtypeValueLabel(e,t,a,l){if("display"!==t)return e.name;return R.filterize("subtype",e.value,e.name,e.fullname,e.fullname)}static formatNameDescription(e,t,a,l){if("display"!==t)return e.name;return R.filterize("alert_id",e.value,e.name,e.fullname,e.fullname)}static applyCellStyle(e,t,a,l,n){t.highlight&&$(e).css("border-left","5px solid "+t.highlight)}}function D(e,t){const a=Object.create(null),l=e.split(",");for(let e=0;e<l.length;e++)a[l[e]]=!0;return t?e=>!!a[e.toLowerCase()]:e=>!!a[e]}window.do_pie=function(e,t,a,l,n){var s=new E(e,t,a,l,n);return n&&s.setInterval(setInterval((function(){s.update()}),n)),s},window.DataTableUtils=L,window.DataTableFiltersMenu=class{constructor({tableAPI:e,filterMenuKey:t,filterTitle:a,filters:l,columnIndex:n,icon:s=null,extraAttributes:i="",id:o=null,url:r=null,urlParams:c=null,removeAllEntry:u=!1,callbackFunction:d=null}){this.rawFilters=l,this.tableAPI=e,this.filterTitle=a,this.icon=s,this.filterMenuKey=t,this.columnIndex=n,this.preventUpdate=!1,this.currentFilterSelected=void 0,this.$datatableWrapper=$(e.context[0].nTableWrapper),this.extraAttributes=i,this.id=o,this.url=r,this.removeAllEntry=u,this.callbackFunction=d}get selectedFilter(){return this.currentFilterSelected}init(){const e=this;return this.$datatableWrapper.on("init.dt",(function(){e._render(e.rawFilters)})),this.tableAPI.on("draw",(function(){e._update()})),e}_countEntries(e,t=[]){void 0===e&&console.error("DataTableFiltersMenu::_countEntries() => the passed regex is undefined!");const a=new RegExp(e);return t.filter((e=>a.test(e))).length}_createMenuEntry(e){const t=this;let a=$(`<li class='dropdown-item pointer'>${e.label} </li>`);if(t.url){if(a=$(`<li class='dropdown-item pointer'><a href=# class='p-1 standard-color'>${e.label} </li>`),1==e.currently_active){0==t.$dropdown.title.parent().find("i.fas").length&&t.$dropdown.title.parent().prepend("<i class='fas fa-filter'></i>");const l=a.html();t.$dropdown.title.html(l),t.$dropdown.container.find("li").removeClass("active"),"all"!==e.key&&a.addClass("active")}}else if(void 0!==e.regex&&(void 0===e.countable||e.countable)){const t=this.tableAPI.columns(this.columnIndex).data()[0],l=this._countEntries(e.regex,t),n=$(`<span class='counter'>(${l})</span>`);0==l&&a.hide(),a.append(n)}return a.on("click",(function(l){0==t.$dropdown.title.parent().find("i.fas").length&&t.$dropdown.title.parent().prepend("<i class='fas fa-filter'></i>");const n=a.html();if(t.$dropdown.title.html(n),t.$dropdown.container.find("li").removeClass("active"),"all"!==e.key&&a.addClass("active"),t.callbackFunction)return t.callbackFunction(t.tableAPI,e),void(e.callback&&e.callback());if(t.url){t.urlParams=window.location.search;const a=new URLSearchParams(t.urlParams);a.set(t.filterMenuKey,void 0!==e.id?e.id:""),window.history.pushState("","",window.location.pathname+"?"+a.toString()),location.reload()}else t.preventUpdate=!0,e.callback&&e.callback(),t.tableAPI.column(t.columnIndex).search(e.regex,!0,!1).draw(),t.currentFilterSelected=e})),a}_createFilters(e){const t={};for(const a of e){const e=this._createMenuEntry(a);t[a.key]={filter:a,$node:e}}return t}_render(e){if(void 0===this.columnIndex)$(`<span id="${this.id}" ${this.extraAttributes} title="${this.filterTitle}">${this.icon||this.filterTitle}</span>`).insertBefore(this.$datatableWrapper.find(".dataTables_filter").parent());else{const t=$(`<div id='${this.filterMenuKey}_dropdown' class='dropdown d-inline'></div>`),a=$("<button class='btn-link btn dropdown-toggle' data-bs-toggle=\"dropdown\" type='button'></button>"),l=$(`<span class='filter-title'>${this.filterTitle}</span>`);a.append(l),this.$dropdown={container:t,title:l,button:a},this.filters=this._createFilters(e);const n=$(`<ul class='dropdown-menu dropdown-menu-lg-end scrollable-dropdown' id='${this.filterMenuKey}_dropdown_menu'></ul>`);for(const[e,t]of Object.entries(this.filters))n.append(t.$node);if(!this.removeAllEntry){const e=this._generateAllFilter();n.prepend(this._createMenuEntry(e))}t.append(a),t.append(n),t.insertBefore(this.$datatableWrapper.find(".dataTables_filter").parent()),this._selectFilterFromState(this.filterMenuKey)}}_selectFilterFromState(e){this.tableAPI.state&&this.tableAPI.state.loaded()&&this.tableAPI.state.loaded().filters&&tableAPI.state.save()}_generateAllFilter(){return{key:"all",label:i18n_ext.all,regex:"",countable:!1,callback:()=>{this.$dropdown.title.parent().find("i.fas.fa-filter").remove(),this.$dropdown.title.html(`${this.filterTitle}`)}}}_update(){if(void 0!==this.filters)if(this.preventUpdate)this.preventUpdate=!1;else for(const[e,t]of Object.entries(this.filters)){if(0==t.countable||0==t.filter.countable)continue;const e=this.tableAPI.columns(this.columnIndex).data()[0],a=this._countEntries(t.filter.regex,e);0==a?t.$node.hide():t.$node.show(),t.$node.find(".counter").text(`(${a})`),this.$dropdown.button.find(".counter").text(`(${a})`)}}},window.DataTableRenders=R,window.ChartWidget=class extends U{constructor(e,t="line",a={},l=0,n={}){super(e,a,l,n),this._chartType=t,this._chart={},this._$htmlChart=document.querySelector(`#canvas-widget-${e}`)}static registerEventCallback(e,t,a){setTimeout((async()=>{try{const l=P.getWidgetByName(e),n={chart:{events:{[t]:a}}};await l._chart.updateOptions(n)}catch(e){}}),1e3)}_generateConfig(){const e={series:[],tooltip:{enabledOnSeries:[0],x:{show:!0,format:"dd/MM/yyyy HH:mm:ss"},y:{formatter:function(e,{series:t,seriesIndex:a,dataPointIndex:l,w:n}){return e}},z:{show:!1}},chart:{type:this._chartType,events:{},height:"100%",toolbar:{show:!1}},xaxis:{labels:{style:{fontSize:"14px"}},tooltip:{enabled:!0,formatter:function(e){return e}}},yaxis:{labels:{style:{fontSize:"14px"}},tooltip:{enabled:!0,formatter:function(e){return e}}},zaxis:{labels:{style:{fontSize:"14px"}},tooltip:{enabled:!0}},dataLabels:{enabled:!0,style:{fontSize:"14px"}},labels:[],legend:{show:!0,fontSize:"14px",position:"bottom",onItemClick:{toggleDataSeries:!0}},plotOptions:{bar:{borderRadius:4,horizontal:!0}},noData:{text:"No Data",align:"center",verticalAlign:"middle",style:{fontSize:"24px"}}};if(this._additionalParams&&this._additionalParams.apex){return Object.assign(e,this._additionalParams.apex)}return e}_buildTooltip(e,t){if(e.tooltip.y={formatter:function(e,{series:t,seriesIndex:a,dataPointIndex:l,w:n}){return e}},t.tooltip){for(const a in t.tooltip)if("x"===a||"y"===a||"z"===a){const l=t.tooltip[a].formatter;e.tooltip[a]||(e.tooltip[a]={}),e.tooltip[a].formatter=I[l]||NtopUtils[l]}t.tooltip.custom&&(e.tooltip.custom=I[t.tooltip.custom]||NtopUtils[t.tooltip.custom])}}_buildAxisFormatter(e,t){const a=e[t];if(void 0!==a&&void 0!==a.labels&&void 0!==a.labels.ntop_utils_formatter&&"none"!==a.labels.ntop_utils_formatter){const e=a.labels.ntop_utils_formatter;void 0===NtopUtils[e]?console.error(`xaxis: Formatting function '${e}' didn't found inside NtopUtils.`):a.labels.formatter=NtopUtils[e]}}_buildDataLabels(e,t){if(t.dataLabels)for(const[a,l]of Object.entries(t.dataLabels))e.dataLabels[a]=l;let a=e.dataLabels.formatter;a&&I[a]&&(e.dataLabels.formatter=I[a])}_buildConfig(){const e=this._generateConfig(),t=this._fetchedData.rsp,a=["series","xaxis","yaxis","colors","labels","fill","filter","filtering_labels"];for(const l of a)void 0!==t[l]&&(void 0!==e[l]?e[l]=Object.assign(e[l],t[l]):e[l]=t[l]);if(t.events)for(const a in t.events)e.chart.events[a]=T[t.events[a]];return void 0!==t.horizontal_chart&&(e.plotOptions.bar.horizontal=t.horizontal_chart),this._buildTooltip(e,t),this._buildAxisFormatter(e,"xaxis"),this._buildAxisFormatter(e,"yaxis"),this._buildDataLabels(e,t),e}_initializeChart(){const e=this._buildConfig();this._chartConfig=e,this._chart=new ApexCharts(this._$htmlChart,this._chartConfig),this._chart.render()}async init(){await super.init(),this._initializeChart()}async destroy(){await super.destroy(),this._chart.destroy(),this._chart=null}async update(e={}){if(void 0!==this._chartConfig&&(e?await super.update(e):await super.updateByUrl(),null!=this._chart)){const{colors:e,series:t,dataLabels:a,labels:l,xaxis:n,filtering_labels:s}=this._fetchedData.rsp;if(this._chartConfig.colors=e,this._chartConfig.series=t,n&&n.categories&&(this._chartConfig.xaxis.categories=n.categories),s&&(this._chartConfig.filtering_labels=s),a){let e=this._chartConfig.dataLabels.formatter;this._chartConfig.dataLabels.formatter=e&&I[e]?I[e]:O}l&&(this._chartConfig.labels=l),this._chart.updateOptions(this._chartConfig,!0)}}async destroyAndUpdate(e={}){await super.destroyAndUpdate(e),this._initializeChart()}},window.WidgetUtils=P,window.ntopChartApex=M,$((function(){function e(e){if("mousedown"==e.type&&(e.metaKey||e.ctrlKey||2!==e.which))return;const t=$(this).data("id");$.post(`${http_prefix}/lua/update_blog_posts.lua`,{blog_notification_id:t,csrf:window.__BLOG_NOTIFICATION_CSRF__},(e=>{if(e.success){$(this).off("click").off("mousedown").attr("data-read","true").data("read","true").find(".badge").remove();const e=$(".blog-notification[data-read='false']").length;0==e?$(".notification-bell").remove():$(".notification-bell").html(e)}}))}$(".blog-notification[data-read='false']").on("click",e).on("mousedown",e)}));const z=D("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt"),q=D("itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly");function B(e){return!!e||""===e}function V(e){if(fe(e)){const t={};for(let a=0;a<e.length;a++){const l=e[a],n=be(l)?W(l):V(l);if(n)for(const e in n)t[e]=n[e]}return t}return be(e)||we(e)?e:void 0}const H=/;(?![^(]*\))/g,G=/:(.+)/;function W(e){const t={};return e.split(H).forEach((e=>{if(e){const a=e.split(G);a.length>1&&(t[a[0].trim()]=a[1].trim())}})),t}function K(e){let t="";if(be(e))t=e;else if(fe(e))for(let a=0;a<e.length;a++){const l=K(e[a]);l&&(t+=l+" ")}else if(we(e))for(const a in e)e[a]&&(t+=a+" ");return t.trim()}function J(e){if(!e)return null;let{class:t,style:a}=e;return t&&!be(t)&&(e.class=K(t)),a&&(e.style=V(a)),e}const Y=D("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot"),Z=D("svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view"),X=D("area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr");function Q(e,t){if(e===t)return!0;let a=he(e),l=he(t);if(a||l)return!(!a||!l)&&e.getTime()===t.getTime();if(a=ye(e),l=ye(t),a||l)return e===t;if(a=fe(e),l=fe(t),a||l)return!(!a||!l)&&function(e,t){if(e.length!==t.length)return!1;let a=!0;for(let l=0;a&&l<e.length;l++)a=Q(e[l],t[l]);return a}(e,t);if(a=we(e),l=we(t),a||l){if(!a||!l)return!1;if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const a in e){const l=e.hasOwnProperty(a),n=t.hasOwnProperty(a);if(l&&!n||!l&&n||!Q(e[a],t[a]))return!1}}return String(e)===String(t)}function ee(e,t){return e.findIndex((e=>Q(e,t)))}const te=e=>be(e)?e:null==e?"":fe(e)||we(e)&&(e.toString===ke||!ge(e.toString))?JSON.stringify(e,ae,2):String(e),ae=(e,t)=>t&&t.__v_isRef?ae(e,t.value):me(t)?{[`Map(${t.size})`]:[...t.entries()].reduce(((e,[t,a])=>(e[`${t} =>`]=a,e)),{})}:ve(t)?{[`Set(${t.size})`]:[...t.values()]}:!we(t)||fe(t)||Se(t)?t:String(t),le={},ne=[],se=()=>{},ie=()=>!1,oe=/^on[^a-z]/,re=e=>oe.test(e),ce=e=>e.startsWith("onUpdate:"),ue=Object.assign,de=(e,t)=>{const a=e.indexOf(t);a>-1&&e.splice(a,1)},_e=Object.prototype.hasOwnProperty,pe=(e,t)=>_e.call(e,t),fe=Array.isArray,me=e=>"[object Map]"===$e(e),ve=e=>"[object Set]"===$e(e),he=e=>"[object Date]"===$e(e),ge=e=>"function"==typeof e,be=e=>"string"==typeof e,ye=e=>"symbol"==typeof e,we=e=>null!==e&&"object"==typeof e,xe=e=>we(e)&&ge(e.then)&&ge(e.catch),ke=Object.prototype.toString,$e=e=>ke.call(e),Se=e=>"[object Object]"===$e(e),Ne=e=>be(e)&&"NaN"!==e&&"-"!==e[0]&&""+parseInt(e,10)===e,Ce=D(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),Ee=D("bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo"),Ae=e=>{const t=Object.create(null);return a=>t[a]||(t[a]=e(a))},Te=/-(\w)/g,Ie=Ae((e=>e.replace(Te,((e,t)=>t?t.toUpperCase():"")))),Oe=/\B([A-Z])/g,Pe=Ae((e=>e.replace(Oe,"-$1").toLowerCase())),Ue=Ae((e=>e.charAt(0).toUpperCase()+e.slice(1))),je=Ae((e=>e?`on${Ue(e)}`:"")),Me=(e,t)=>!Object.is(e,t),Fe=(e,t)=>{for(let a=0;a<e.length;a++)e[a](t)},Le=(e,t,a)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:a})},Re=e=>{const t=parseFloat(e);return isNaN(t)?e:t};let De,ze;class qe{constructor(e=!1){this.active=!0,this.effects=[],this.cleanups=[],!e&&ze&&(this.parent=ze,this.index=(ze.scopes||(ze.scopes=[])).push(this)-1)}run(e){if(this.active){const t=ze;try{return ze=this,e()}finally{ze=t}}}on(){ze=this}off(){ze=this.parent}stop(e){if(this.active){let t,a;for(t=0,a=this.effects.length;t<a;t++)this.effects[t].stop();for(t=0,a=this.cleanups.length;t<a;t++)this.cleanups[t]();if(this.scopes)for(t=0,a=this.scopes.length;t<a;t++)this.scopes[t].stop(!0);if(this.parent&&!e){const e=this.parent.scopes.pop();e&&e!==this&&(this.parent.scopes[this.index]=e,e.index=this.index)}this.active=!1}}}function Be(e){return new qe(e)}function Ve(e,t=ze){t&&t.active&&t.effects.push(e)}function He(){return ze}function Ge(e){ze&&ze.cleanups.push(e)}const We=e=>{const t=new Set(e);return t.w=0,t.n=0,t},Ke=e=>(e.w&Qe)>0,Je=e=>(e.n&Qe)>0,Ye=new WeakMap;let Ze,Xe=0,Qe=1;const et=Symbol(""),tt=Symbol("");class at{constructor(e,t=null,a){this.fn=e,this.scheduler=t,this.active=!0,this.deps=[],this.parent=void 0,Ve(this,a)}run(){if(!this.active)return this.fn();let e=Ze,t=it;for(;e;){if(e===this)return;e=e.parent}try{return this.parent=Ze,Ze=this,it=!0,Qe=1<<++Xe,Xe<=30?(({deps:e})=>{if(e.length)for(let t=0;t<e.length;t++)e[t].w|=Qe})(this):lt(this),this.fn()}finally{Xe<=30&&(e=>{const{deps:t}=e;if(t.length){let a=0;for(let l=0;l<t.length;l++){const n=t[l];Ke(n)&&!Je(n)?n.delete(e):t[a++]=n,n.w&=~Qe,n.n&=~Qe}t.length=a}})(this),Qe=1<<--Xe,Ze=this.parent,it=t,this.parent=void 0,this.deferStop&&this.stop()}}stop(){Ze===this?this.deferStop=!0:this.active&&(lt(this),this.onStop&&this.onStop(),this.active=!1)}}function lt(e){const{deps:t}=e;if(t.length){for(let a=0;a<t.length;a++)t[a].delete(e);t.length=0}}function nt(e,t){e.effect&&(e=e.effect.fn);const a=new at(e);t&&(ue(a,t),t.scope&&Ve(a,t.scope)),t&&t.lazy||a.run();const l=a.run.bind(a);return l.effect=a,l}function st(e){e.effect.stop()}let it=!0;const ot=[];function rt(){ot.push(it),it=!1}function ct(){const e=ot.pop();it=void 0===e||e}function ut(e,t,a){if(it&&Ze){let t=Ye.get(e);t||Ye.set(e,t=new Map);let l=t.get(a);l||t.set(a,l=We()),dt(l)}}function dt(e,t){let a=!1;Xe<=30?Je(e)||(e.n|=Qe,a=!Ke(e)):a=!e.has(Ze),a&&(e.add(Ze),Ze.deps.push(e))}function _t(e,t,a,l,n,s){const i=Ye.get(e);if(!i)return;let o=[];if("clear"===t)o=[...i.values()];else if("length"===a&&fe(e))i.forEach(((e,t)=>{("length"===t||t>=l)&&o.push(e)}));else switch(void 0!==a&&o.push(i.get(a)),t){case"add":fe(e)?Ne(a)&&o.push(i.get("length")):(o.push(i.get(et)),me(e)&&o.push(i.get(tt)));break;case"delete":fe(e)||(o.push(i.get(et)),me(e)&&o.push(i.get(tt)));break;case"set":me(e)&&o.push(i.get(et))}if(1===o.length)o[0]&&pt(o[0]);else{const e=[];for(const t of o)t&&e.push(...t);pt(We(e))}}function pt(e,t){const a=fe(e)?e:[...e];for(const e of a)e.computed&&ft(e);for(const e of a)e.computed||ft(e)}function ft(e,t){(e!==Ze||e.allowRecurse)&&(e.scheduler?e.scheduler():e.run())}const mt=D("__proto__,__v_isRef,__isVue"),vt=new Set(Object.getOwnPropertyNames(Symbol).filter((e=>"arguments"!==e&&"caller"!==e)).map((e=>Symbol[e])).filter(ye)),ht=xt(),gt=xt(!1,!0),bt=xt(!0),yt=xt(!0,!0),wt=function(){const e={};return["includes","indexOf","lastIndexOf"].forEach((t=>{e[t]=function(...e){const a=ra(this);for(let e=0,t=this.length;e<t;e++)ut(a,0,e+"");const l=a[t](...e);return-1===l||!1===l?a[t](...e.map(ra)):l}})),["push","pop","shift","unshift","splice"].forEach((t=>{e[t]=function(...e){rt();const a=ra(this)[t].apply(this,e);return ct(),a}})),e}();function xt(e=!1,t=!1){return function(a,l,n){if("__v_isReactive"===l)return!e;if("__v_isReadonly"===l)return e;if("__v_isShallow"===l)return t;if("__v_raw"===l&&n===(e?t?Xt:Zt:t?Yt:Jt).get(a))return a;const s=fe(a);if(!e&&s&&pe(wt,l))return Reflect.get(wt,l,n);const i=Reflect.get(a,l,n);return(ye(l)?vt.has(l):mt(l))?i:(e||ut(a,0,l),t?i:fa(i)?s&&Ne(l)?i:i.value:we(i)?e?ta(i):Qt(i):i)}}function kt(e=!1){return function(t,a,l,n){let s=t[a];if(sa(s)&&fa(s)&&!fa(l))return!1;if(!e&&!sa(l)&&(ia(l)||(l=ra(l),s=ra(s)),!fe(t)&&fa(s)&&!fa(l)))return s.value=l,!0;const i=fe(t)&&Ne(a)?Number(a)<t.length:pe(t,a),o=Reflect.set(t,a,l,n);return t===ra(n)&&(i?Me(l,s)&&_t(t,"set",a,l):_t(t,"add",a,l)),o}}const $t={get:ht,set:kt(),deleteProperty:function(e,t){const a=pe(e,t),l=Reflect.deleteProperty(e,t);return l&&a&&_t(e,"delete",t,void 0),l},has:function(e,t){const a=Reflect.has(e,t);return ye(t)&&vt.has(t)||ut(e,0,t),a},ownKeys:function(e){return ut(e,0,fe(e)?"length":et),Reflect.ownKeys(e)}},St={get:bt,set:(e,t)=>!0,deleteProperty:(e,t)=>!0},Nt=ue({},$t,{get:gt,set:kt(!0)}),Ct=ue({},St,{get:yt}),Et=e=>e,At=e=>Reflect.getPrototypeOf(e);function Tt(e,t,a=!1,l=!1){const n=ra(e=e.__v_raw),s=ra(t);a||(t!==s&&ut(n,0,t),ut(n,0,s));const{has:i}=At(n),o=l?Et:a?da:ua;return i.call(n,t)?o(e.get(t)):i.call(n,s)?o(e.get(s)):void(e!==n&&e.get(t))}function It(e,t=!1){const a=this.__v_raw,l=ra(a),n=ra(e);return t||(e!==n&&ut(l,0,e),ut(l,0,n)),e===n?a.has(e):a.has(e)||a.has(n)}function Ot(e,t=!1){return e=e.__v_raw,!t&&ut(ra(e),0,et),Reflect.get(e,"size",e)}function Pt(e){e=ra(e);const t=ra(this);return At(t).has.call(t,e)||(t.add(e),_t(t,"add",e,e)),this}function Ut(e,t){t=ra(t);const a=ra(this),{has:l,get:n}=At(a);let s=l.call(a,e);s||(e=ra(e),s=l.call(a,e));const i=n.call(a,e);return a.set(e,t),s?Me(t,i)&&_t(a,"set",e,t):_t(a,"add",e,t),this}function jt(e){const t=ra(this),{has:a,get:l}=At(t);let n=a.call(t,e);n||(e=ra(e),n=a.call(t,e)),l&&l.call(t,e);const s=t.delete(e);return n&&_t(t,"delete",e,void 0),s}function Mt(){const e=ra(this),t=0!==e.size,a=e.clear();return t&&_t(e,"clear",void 0,void 0),a}function Ft(e,t){return function(a,l){const n=this,s=n.__v_raw,i=ra(s),o=t?Et:e?da:ua;return!e&&ut(i,0,et),s.forEach(((e,t)=>a.call(l,o(e),o(t),n)))}}function Lt(e,t,a){return function(...l){const n=this.__v_raw,s=ra(n),i=me(s),o="entries"===e||e===Symbol.iterator&&i,r="keys"===e&&i,c=n[e](...l),u=a?Et:t?da:ua;return!t&&ut(s,0,r?tt:et),{next(){const{value:e,done:t}=c.next();return t?{value:e,done:t}:{value:o?[u(e[0]),u(e[1])]:u(e),done:t}},[Symbol.iterator](){return this}}}}function Rt(e){return function(...t){return"delete"!==e&&this}}const[Dt,zt,qt,Bt]=function(){const e={get(e){return Tt(this,e)},get size(){return Ot(this)},has:It,add:Pt,set:Ut,delete:jt,clear:Mt,forEach:Ft(!1,!1)},t={get(e){return Tt(this,e,!1,!0)},get size(){return Ot(this)},has:It,add:Pt,set:Ut,delete:jt,clear:Mt,forEach:Ft(!1,!0)},a={get(e){return Tt(this,e,!0)},get size(){return Ot(this,!0)},has(e){return It.call(this,e,!0)},add:Rt("add"),set:Rt("set"),delete:Rt("delete"),clear:Rt("clear"),forEach:Ft(!0,!1)},l={get(e){return Tt(this,e,!0,!0)},get size(){return Ot(this,!0)},has(e){return It.call(this,e,!0)},add:Rt("add"),set:Rt("set"),delete:Rt("delete"),clear:Rt("clear"),forEach:Ft(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach((n=>{e[n]=Lt(n,!1,!1),a[n]=Lt(n,!0,!1),t[n]=Lt(n,!1,!0),l[n]=Lt(n,!0,!0)})),[e,a,t,l]}();function Vt(e,t){const a=t?e?Bt:qt:e?zt:Dt;return(t,l,n)=>"__v_isReactive"===l?!e:"__v_isReadonly"===l?e:"__v_raw"===l?t:Reflect.get(pe(a,l)&&l in t?a:t,l,n)}const Ht={get:Vt(!1,!1)},Gt={get:Vt(!1,!0)},Wt={get:Vt(!0,!1)},Kt={get:Vt(!0,!0)},Jt=new WeakMap,Yt=new WeakMap,Zt=new WeakMap,Xt=new WeakMap;function Qt(e){return sa(e)?e:la(e,!1,$t,Ht,Jt)}function ea(e){return la(e,!1,Nt,Gt,Yt)}function ta(e){return la(e,!0,St,Wt,Zt)}function aa(e){return la(e,!0,Ct,Kt,Xt)}function la(e,t,a,l,n){if(!we(e))return e;if(e.__v_raw&&(!t||!e.__v_isReactive))return e;const s=n.get(e);if(s)return s;const i=function(e){return e.__v_skip||!Object.isExtensible(e)?0:function(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}((e=>$e(e).slice(8,-1))(e))}(e);if(0===i)return e;const o=new Proxy(e,2===i?l:a);return n.set(e,o),o}function na(e){return sa(e)?na(e.__v_raw):!(!e||!e.__v_isReactive)}function sa(e){return!(!e||!e.__v_isReadonly)}function ia(e){return!(!e||!e.__v_isShallow)}function oa(e){return na(e)||sa(e)}function ra(e){const t=e&&e.__v_raw;return t?ra(t):e}function ca(e){return Le(e,"__v_skip",!0),e}const ua=e=>we(e)?Qt(e):e,da=e=>we(e)?ta(e):e;function _a(e){it&&Ze&&dt((e=ra(e)).dep||(e.dep=We()))}function pa(e,t){(e=ra(e)).dep&&pt(e.dep)}function fa(e){return!(!e||!0!==e.__v_isRef)}function ma(e){return ha(e,!1)}function va(e){return ha(e,!0)}function ha(e,t){return fa(e)?e:new ga(e,t)}class ga{constructor(e,t){this.__v_isShallow=t,this.dep=void 0,this.__v_isRef=!0,this._rawValue=t?e:ra(e),this._value=t?e:ua(e)}get value(){return _a(this),this._value}set value(e){e=this.__v_isShallow?e:ra(e),Me(e,this._rawValue)&&(this._rawValue=e,this._value=this.__v_isShallow?e:ua(e),pa(this))}}function ba(e){pa(e)}function ya(e){return fa(e)?e.value:e}const wa={get:(e,t,a)=>ya(Reflect.get(e,t,a)),set:(e,t,a,l)=>{const n=e[t];return fa(n)&&!fa(a)?(n.value=a,!0):Reflect.set(e,t,a,l)}};function xa(e){return na(e)?e:new Proxy(e,wa)}class ka{constructor(e){this.dep=void 0,this.__v_isRef=!0;const{get:t,set:a}=e((()=>_a(this)),(()=>pa(this)));this._get=t,this._set=a}get value(){return this._get()}set value(e){this._set(e)}}function $a(e){return new ka(e)}function Sa(e){const t=fe(e)?new Array(e.length):{};for(const a in e)t[a]=Ca(e,a);return t}class Na{constructor(e,t,a){this._object=e,this._key=t,this._defaultValue=a,this.__v_isRef=!0}get value(){const e=this._object[this._key];return void 0===e?this._defaultValue:e}set value(e){this._object[this._key]=e}}function Ca(e,t,a){const l=e[t];return fa(l)?l:new Na(e,t,a)}class Ea{constructor(e,t,a,l){this._setter=t,this.dep=void 0,this.__v_isRef=!0,this._dirty=!0,this.effect=new at(e,(()=>{this._dirty||(this._dirty=!0,pa(this))})),this.effect.computed=this,this.effect.active=this._cacheable=!l,this.__v_isReadonly=a}get value(){const e=ra(this);return _a(e),!e._dirty&&e._cacheable||(e._dirty=!1,e._value=e.effect.run()),e._value}set value(e){this._setter(e)}}const Aa=[];function Ta(e,...t){rt();const a=Aa.length?Aa[Aa.length-1].component:null,l=a&&a.appContext.config.warnHandler,n=function(){let e=Aa[Aa.length-1];if(!e)return[];const t=[];for(;e;){const a=t[0];a&&a.vnode===e?a.recurseCount++:t.push({vnode:e,recurseCount:0});const l=e.component&&e.component.parent;e=l&&l.vnode}return t}();if(l)Pa(l,a,11,[e+t.join(""),a&&a.proxy,n.map((({vnode:e})=>`at <${yi(a,e.type)}>`)).join("\n"),n]);else{const a=[`[Vue warn]: ${e}`,...t];n.length&&a.push("\n",...function(e){const t=[];return e.forEach(((e,a)=>{t.push(...0===a?[]:["\n"],...function({vnode:e,recurseCount:t}){const a=t>0?`... (${t} recursive calls)`:"",l=` at <${yi(e.component,e.type,!!e.component&&null==e.component.parent)}`,n=">"+a;return e.props?[l,...Ia(e.props),n]:[l+n]}(e))})),t}(n)),console.warn(...a)}ct()}function Ia(e){const t=[],a=Object.keys(e);return a.slice(0,3).forEach((a=>{t.push(...Oa(a,e[a]))})),a.length>3&&t.push(" ..."),t}function Oa(e,t,a){return be(t)?(t=JSON.stringify(t),a?t:[`${e}=${t}`]):"number"==typeof t||"boolean"==typeof t||null==t?a?t:[`${e}=${t}`]:fa(t)?(t=Oa(e,ra(t.value),!0),a?t:[`${e}=Ref<`,t,">"]):ge(t)?[`${e}=fn${t.name?`<${t.name}>`:""}`]:(t=ra(t),a?t:[`${e}=`,t])}function Pa(e,t,a,l){let n;try{n=l?e(...l):e()}catch(e){ja(e,t,a)}return n}function Ua(e,t,a,l){if(ge(e)){const n=Pa(e,t,a,l);return n&&xe(n)&&n.catch((e=>{ja(e,t,a)})),n}const n=[];for(let s=0;s<e.length;s++)n.push(Ua(e[s],t,a,l));return n}function ja(e,t,a,l=!0){if(t){let l=t.parent;const n=t.proxy,s=a;for(;l;){const t=l.ec;if(t)for(let a=0;a<t.length;a++)if(!1===t[a](e,n,s))return;l=l.parent}const i=t.appContext.config.errorHandler;if(i)return void Pa(i,null,10,[e,n,s])}!function(e,t,a,l=!0){console.error(e)}(e,0,0,l)}let Ma=!1,Fa=!1;const La=[];let Ra=0;const Da=[];let za=null,qa=0;const Ba=[];let Va=null,Ha=0;const Ga=Promise.resolve();let Wa=null,Ka=null;function Ja(e){const t=Wa||Ga;return e?t.then(this?e.bind(this):e):t}function Ya(e){La.length&&La.includes(e,Ma&&e.allowRecurse?Ra+1:Ra)||e===Ka||(null==e.id?La.push(e):La.splice(function(e){let t=Ra+1,a=La.length;for(;t<a;){const l=t+a>>>1;al(La[l])<e?t=l+1:a=l}return t}(e.id),0,e),Za())}function Za(){Ma||Fa||(Fa=!0,Wa=Ga.then(ll))}function Xa(e,t,a,l){fe(e)?a.push(...e):t&&t.includes(e,e.allowRecurse?l+1:l)||a.push(e),Za()}function Qa(e){Xa(e,Va,Ba,Ha)}function el(e,t=null){if(Da.length){for(Ka=t,za=[...new Set(Da)],Da.length=0,qa=0;qa<za.length;qa++)za[qa]();za=null,qa=0,Ka=null,el(e,t)}}function tl(e){if(el(),Ba.length){const e=[...new Set(Ba)];if(Ba.length=0,Va)return void Va.push(...e);for(Va=e,Va.sort(((e,t)=>al(e)-al(t))),Ha=0;Ha<Va.length;Ha++)Va[Ha]();Va=null,Ha=0}}const al=e=>null==e.id?1/0:e.id;function ll(e){Fa=!1,Ma=!0,el(e),La.sort(((e,t)=>al(e)-al(t)));try{for(Ra=0;Ra<La.length;Ra++){const e=La[Ra];e&&!1!==e.active&&Pa(e,null,14)}}finally{Ra=0,La.length=0,tl(),Ma=!1,Wa=null,(La.length||Da.length||Ba.length)&&ll(e)}}let nl,sl=[];function il(e,t){var a,l;nl=e,nl?(nl.enabled=!0,sl.forEach((({event:e,args:t})=>nl.emit(e,...t))),sl=[]):"undefined"!=typeof window&&window.HTMLElement&&!(null===(l=null===(a=window.navigator)||void 0===a?void 0:a.userAgent)||void 0===l?void 0:l.includes("jsdom"))?((t.__VUE_DEVTOOLS_HOOK_REPLAY__=t.__VUE_DEVTOOLS_HOOK_REPLAY__||[]).push((e=>{il(e,t)})),setTimeout((()=>{nl||(t.__VUE_DEVTOOLS_HOOK_REPLAY__=null,sl=[])}),3e3)):sl=[]}function ol(e,t,...a){if(e.isUnmounted)return;const l=e.vnode.props||le;let n=a;const s=t.startsWith("update:"),i=s&&t.slice(7);if(i&&i in l){const e=`${"modelValue"===i?"model":i}Modifiers`,{number:t,trim:s}=l[e]||le;s&&(n=a.map((e=>e.trim()))),t&&(n=a.map(Re))}let o,r=l[o=je(t)]||l[o=je(Ie(t))];!r&&s&&(r=l[o=je(Pe(t))]),r&&Ua(r,e,6,n);const c=l[o+"Once"];if(c){if(e.emitted){if(e.emitted[o])return}else e.emitted={};e.emitted[o]=!0,Ua(c,e,6,n)}}function rl(e,t,a=!1){const l=t.emitsCache,n=l.get(e);if(void 0!==n)return n;const s=e.emits;let i={},o=!1;if(!ge(e)){const l=e=>{const a=rl(e,t,!0);a&&(o=!0,ue(i,a))};!a&&t.mixins.length&&t.mixins.forEach(l),e.extends&&l(e.extends),e.mixins&&e.mixins.forEach(l)}return s||o?(fe(s)?s.forEach((e=>i[e]=null)):ue(i,s),l.set(e,i),i):(l.set(e,null),null)}function cl(e,t){return!(!e||!re(t))&&(t=t.slice(2).replace(/Once$/,""),pe(e,t[0].toLowerCase()+t.slice(1))||pe(e,Pe(t))||pe(e,t))}let ul=null,dl=null;function _l(e){const t=ul;return ul=e,dl=e&&e.type.__scopeId||null,t}function pl(e){dl=e}function fl(){dl=null}const ml=e=>vl;function vl(e,t=ul,a){if(!t)return e;if(e._n)return e;const l=(...a)=>{l._d&&Us(-1);const n=_l(t),s=e(...a);return _l(n),l._d&&Us(1),s};return l._n=!0,l._c=!0,l._d=!0,l}function hl(e){const{type:t,vnode:a,proxy:l,withProxy:n,props:s,propsOptions:[i],slots:o,attrs:r,emit:c,render:u,renderCache:d,data:_,setupState:p,ctx:f,inheritAttrs:m}=e;let v,h;const g=_l(e);try{if(4&a.shapeFlag){const e=n||l;v=Zs(u.call(e,e,d,s,p,_,f)),h=r}else{v=Zs(t(s,t.length>1?{attrs:r,slots:o,emit:c}:null)),h=t.props?r:gl(r)}}catch(t){As.length=0,ja(t,e,1),v=Hs(Cs)}let b=v;if(h&&!1!==m){const e=Object.keys(h),{shapeFlag:t}=b;e.length&&7&t&&(i&&e.some(ce)&&(h=bl(h,i)),b=Ws(b,h))}return a.dirs&&(b=Ws(b),b.dirs=b.dirs?b.dirs.concat(a.dirs):a.dirs),a.transition&&(b.transition=a.transition),v=b,_l(g),v}const gl=e=>{let t;for(const a in e)("class"===a||"style"===a||re(a))&&((t||(t={}))[a]=e[a]);return t},bl=(e,t)=>{const a={};for(const l in e)ce(l)&&l.slice(9)in t||(a[l]=e[l]);return a};function yl(e,t,a){const l=Object.keys(t);if(l.length!==Object.keys(e).length)return!0;for(let n=0;n<l.length;n++){const s=l[n];if(t[s]!==e[s]&&!cl(a,s))return!0}return!1}function wl({vnode:e,parent:t},a){for(;t&&t.subTree===e;)(e=t.vnode).el=a,t=t.parent}const xl=e=>e.__isSuspense,kl={name:"Suspense",__isSuspense:!0,process(e,t,a,l,n,s,i,o,r,c){null==e?function(e,t,a,l,n,s,i,o,r){const{p:c,o:{createElement:u}}=r,d=u("div"),_=e.suspense=Sl(e,n,l,t,d,a,s,i,o,r);c(null,_.pendingBranch=e.ssContent,d,null,l,_,s,i),_.deps>0?($l(e,"onPending"),$l(e,"onFallback"),c(null,e.ssFallback,t,a,l,null,s,i),El(_,e.ssFallback)):_.resolve()}(t,a,l,n,s,i,o,r,c):function(e,t,a,l,n,s,i,o,{p:r,um:c,o:{createElement:u}}){const d=t.suspense=e.suspense;d.vnode=t,t.el=e.el;const _=t.ssContent,p=t.ssFallback,{activeBranch:f,pendingBranch:m,isInFallback:v,isHydrating:h}=d;if(m)d.pendingBranch=_,Rs(_,m)?(r(m,_,d.hiddenContainer,null,n,d,s,i,o),d.deps<=0?d.resolve():v&&(r(f,p,a,l,n,null,s,i,o),El(d,p))):(d.pendingId++,h?(d.isHydrating=!1,d.activeBranch=m):c(m,n,d),d.deps=0,d.effects.length=0,d.hiddenContainer=u("div"),v?(r(null,_,d.hiddenContainer,null,n,d,s,i,o),d.deps<=0?d.resolve():(r(f,p,a,l,n,null,s,i,o),El(d,p))):f&&Rs(_,f)?(r(f,_,a,l,n,d,s,i,o),d.resolve(!0)):(r(null,_,d.hiddenContainer,null,n,d,s,i,o),d.deps<=0&&d.resolve()));else if(f&&Rs(_,f))r(f,_,a,l,n,d,s,i,o),El(d,_);else if($l(t,"onPending"),d.pendingBranch=_,d.pendingId++,r(null,_,d.hiddenContainer,null,n,d,s,i,o),d.deps<=0)d.resolve();else{const{timeout:e,pendingId:t}=d;e>0?setTimeout((()=>{d.pendingId===t&&d.fallback(p)}),e):0===e&&d.fallback(p)}}(e,t,a,l,n,i,o,r,c)},hydrate:function(e,t,a,l,n,s,i,o,r){const c=t.suspense=Sl(t,l,a,e.parentNode,document.createElement("div"),null,n,s,i,o,!0),u=r(e,c.pendingBranch=t.ssContent,a,c,s,i);return 0===c.deps&&c.resolve(),u},create:Sl,normalize:function(e){const{shapeFlag:t,children:a}=e,l=32&t;e.ssContent=Nl(l?a.default:a),e.ssFallback=l?Nl(a.fallback):Hs(Cs)}};function $l(e,t){const a=e.props&&e.props[t];ge(a)&&a()}function Sl(e,t,a,l,n,s,i,o,r,c,u=!1){const{p:d,m:_,um:p,n:f,o:{parentNode:m,remove:v}}=c,h=Re(e.props&&e.props.timeout),g={vnode:e,parent:t,parentComponent:a,isSVG:i,container:l,hiddenContainer:n,anchor:s,deps:0,pendingId:0,timeout:"number"==typeof h?h:-1,activeBranch:null,pendingBranch:null,isInFallback:!0,isHydrating:u,isUnmounted:!1,effects:[],resolve(e=!1){const{vnode:t,activeBranch:a,pendingBranch:l,pendingId:n,effects:s,parentComponent:i,container:o}=g;if(g.isHydrating)g.isHydrating=!1;else if(!e){const e=a&&l.transition&&"out-in"===l.transition.mode;e&&(a.transition.afterLeave=()=>{n===g.pendingId&&_(l,o,t,0)});let{anchor:t}=g;a&&(t=f(a),p(a,i,g,!0)),e||_(l,o,t,0)}El(g,l),g.pendingBranch=null,g.isInFallback=!1;let r=g.parent,c=!1;for(;r;){if(r.pendingBranch){r.effects.push(...s),c=!0;break}r=r.parent}c||Qa(s),g.effects=[],$l(t,"onResolve")},fallback(e){if(!g.pendingBranch)return;const{vnode:t,activeBranch:a,parentComponent:l,container:n,isSVG:s}=g;$l(t,"onFallback");const i=f(a),c=()=>{g.isInFallback&&(d(null,e,n,i,l,null,s,o,r),El(g,e))},u=e.transition&&"out-in"===e.transition.mode;u&&(a.transition.afterLeave=c),g.isInFallback=!0,p(a,l,null,!0),u||c()},move(e,t,a){g.activeBranch&&_(g.activeBranch,e,t,a),g.container=e},next:()=>g.activeBranch&&f(g.activeBranch),registerDep(e,t){const a=!!g.pendingBranch;a&&g.deps++;const l=e.vnode.el;e.asyncDep.catch((t=>{ja(t,e,0)})).then((n=>{if(e.isUnmounted||g.isUnmounted||g.pendingId!==e.suspenseId)return;e.asyncResolved=!0;const{vnode:s}=e;_i(e,n,!1),l&&(s.el=l);const o=!l&&e.subTree.el;t(e,s,m(l||e.subTree.el),l?null:f(e.subTree),g,i,r),o&&v(o),wl(e,s.el),a&&0==--g.deps&&g.resolve()}))},unmount(e,t){g.isUnmounted=!0,g.activeBranch&&p(g.activeBranch,a,e,t),g.pendingBranch&&p(g.pendingBranch,a,e,t)}};return g}function Nl(e){let t;if(ge(e)){const a=Ps&&e._c;a&&(e._d=!1,Is()),e=e(),a&&(e._d=!0,t=Ts,Os())}if(fe(e)){const t=function(e){let t;for(let a=0;a<e.length;a++){const l=e[a];if(!Ls(l))return;if(l.type!==Cs||"v-if"===l.children){if(t)return;t=l}}return t}(e);e=t}return e=Zs(e),t&&!e.dynamicChildren&&(e.dynamicChildren=t.filter((t=>t!==e))),e}function Cl(e,t){t&&t.pendingBranch?fe(e)?t.effects.push(...e):t.effects.push(e):Qa(e)}function El(e,t){e.activeBranch=t;const{vnode:a,parentComponent:l}=e,n=a.el=t.el;l&&l.subTree===a&&(l.vnode.el=n,wl(l,n))}function Al(e,t){if(ni){let a=ni.provides;const l=ni.parent&&ni.parent.provides;l===a&&(a=ni.provides=Object.create(l)),a[e]=t}}function Tl(e,t,a=!1){const l=ni||ul;if(l){const n=null==l.parent?l.vnode.appContext&&l.vnode.appContext.provides:l.parent.provides;if(n&&e in n)return n[e];if(arguments.length>1)return a&&ge(t)?t.call(l.proxy):t}}function Il(e,t){return Ml(e,null,t)}function Ol(e,t){return Ml(e,null,{flush:"post"})}function Pl(e,t){return Ml(e,null,{flush:"sync"})}const Ul={};function jl(e,t,a){return Ml(e,t,a)}function Ml(e,t,{immediate:a,deep:l,flush:n}=le){const s=ni;let i,o,r=!1,c=!1;if(fa(e)?(i=()=>e.value,r=ia(e)):na(e)?(i=()=>e,l=!0):fe(e)?(c=!0,r=e.some((e=>na(e)||ia(e))),i=()=>e.map((e=>fa(e)?e.value:na(e)?Rl(e):ge(e)?Pa(e,s,2):void 0))):i=ge(e)?t?()=>Pa(e,s,2):()=>{if(!s||!s.isUnmounted)return o&&o(),Ua(e,s,3,[u])}:se,t&&l){const e=i;i=()=>Rl(e())}let u=e=>{o=f.onStop=()=>{Pa(e,s,4)}},d=c?[]:Ul;const _=()=>{if(f.active)if(t){const e=f.run();(l||r||(c?e.some(((e,t)=>Me(e,d[t]))):Me(e,d)))&&(o&&o(),Ua(t,s,3,[e,d===Ul?void 0:d,u]),d=e)}else f.run()};let p;_.allowRecurse=!!t,p="sync"===n?_:"post"===n?()=>fs(_,s&&s.suspense):()=>function(e){Xa(e,za,Da,qa)}(_);const f=new at(i,p);return t?a?_():d=f.run():"post"===n?fs(f.run.bind(f),s&&s.suspense):f.run(),()=>{f.stop(),s&&s.scope&&de(s.scope.effects,f)}}function Fl(e,t,a){const l=this.proxy,n=be(e)?e.includes(".")?Ll(l,e):()=>l[e]:e.bind(l,l);let s;ge(t)?s=t:(s=t.handler,a=t);const i=ni;ii(this);const o=Ml(n,s.bind(l),a);return i?ii(i):oi(),o}function Ll(e,t){const a=t.split(".");return()=>{let t=e;for(let e=0;e<a.length&&t;e++)t=t[a[e]];return t}}function Rl(e,t){if(!we(e)||e.__v_skip)return e;if((t=t||new Set).has(e))return e;if(t.add(e),fa(e))Rl(e.value,t);else if(fe(e))for(let a=0;a<e.length;a++)Rl(e[a],t);else if(ve(e)||me(e))e.forEach((e=>{Rl(e,t)}));else if(Se(e))for(const a in e)Rl(e[a],t);return e}function Dl(){const e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return _n((()=>{e.isMounted=!0})),mn((()=>{e.isUnmounting=!0})),e}const zl=[Function,Array],ql={name:"BaseTransition",props:{mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:zl,onEnter:zl,onAfterEnter:zl,onEnterCancelled:zl,onBeforeLeave:zl,onLeave:zl,onAfterLeave:zl,onLeaveCancelled:zl,onBeforeAppear:zl,onAppear:zl,onAfterAppear:zl,onAppearCancelled:zl},setup(e,{slots:t}){const a=si(),l=Dl();let n;return()=>{const s=t.default&&Kl(t.default(),!0);if(!s||!s.length)return;let i=s[0];if(s.length>1)for(const e of s)if(e.type!==Cs){i=e;break}const o=ra(e),{mode:r}=o;if(l.isLeaving)return Hl(i);const c=Gl(i);if(!c)return Hl(i);const u=Vl(c,o,l,a);Wl(c,u);const d=a.subTree,_=d&&Gl(d);let p=!1;const{getTransitionKey:f}=c.type;if(f){const e=f();void 0===n?n=e:e!==n&&(n=e,p=!0)}if(_&&_.type!==Cs&&(!Rs(c,_)||p)){const e=Vl(_,o,l,a);if(Wl(_,e),"out-in"===r)return l.isLeaving=!0,e.afterLeave=()=>{l.isLeaving=!1,a.update()},Hl(i);"in-out"===r&&c.type!==Cs&&(e.delayLeave=(e,t,a)=>{Bl(l,_)[String(_.key)]=_,e._leaveCb=()=>{t(),e._leaveCb=void 0,delete u.delayedLeave},u.delayedLeave=a})}return i}}};function Bl(e,t){const{leavingVNodes:a}=e;let l=a.get(t.type);return l||(l=Object.create(null),a.set(t.type,l)),l}function Vl(e,t,a,l){const{appear:n,mode:s,persisted:i=!1,onBeforeEnter:o,onEnter:r,onAfterEnter:c,onEnterCancelled:u,onBeforeLeave:d,onLeave:_,onAfterLeave:p,onLeaveCancelled:f,onBeforeAppear:m,onAppear:v,onAfterAppear:h,onAppearCancelled:g}=t,b=String(e.key),y=Bl(a,e),w=(e,t)=>{e&&Ua(e,l,9,t)},x=(e,t)=>{const a=t[1];w(e,t),fe(e)?e.every((e=>e.length<=1))&&a():e.length<=1&&a()},k={mode:s,persisted:i,beforeEnter(t){let l=o;if(!a.isMounted){if(!n)return;l=m||o}t._leaveCb&&t._leaveCb(!0);const s=y[b];s&&Rs(e,s)&&s.el._leaveCb&&s.el._leaveCb(),w(l,[t])},enter(e){let t=r,l=c,s=u;if(!a.isMounted){if(!n)return;t=v||r,l=h||c,s=g||u}let i=!1;const o=e._enterCb=t=>{i||(i=!0,w(t?s:l,[e]),k.delayedLeave&&k.delayedLeave(),e._enterCb=void 0)};t?x(t,[e,o]):o()},leave(t,l){const n=String(e.key);if(t._enterCb&&t._enterCb(!0),a.isUnmounting)return l();w(d,[t]);let s=!1;const i=t._leaveCb=a=>{s||(s=!0,l(),w(a?f:p,[t]),t._leaveCb=void 0,y[n]===e&&delete y[n])};y[n]=e,_?x(_,[t,i]):i()},clone:e=>Vl(e,t,a,l)};return k}function Hl(e){if(Ql(e))return(e=Ws(e)).children=null,e}function Gl(e){return Ql(e)?e.children?e.children[0]:void 0:e}function Wl(e,t){6&e.shapeFlag&&e.component?Wl(e.component.subTree,t):128&e.shapeFlag?(e.ssContent.transition=t.clone(e.ssContent),e.ssFallback.transition=t.clone(e.ssFallback)):e.transition=t}function Kl(e,t=!1,a){let l=[],n=0;for(let s=0;s<e.length;s++){let i=e[s];const o=null==a?i.key:String(a)+String(null!=i.key?i.key:s);i.type===Ss?(128&i.patchFlag&&n++,l=l.concat(Kl(i.children,t,o))):(t||i.type!==Cs)&&l.push(null!=o?Ws(i,{key:o}):i)}if(n>1)for(let e=0;e<l.length;e++)l[e].patchFlag=-2;return l}function Jl(e){return ge(e)?{setup:e,name:e.name}:e}const Yl=e=>!!e.type.__asyncLoader;function Zl(e){ge(e)&&(e={loader:e});const{loader:t,loadingComponent:a,errorComponent:l,delay:n=200,timeout:s,suspensible:i=!0,onError:o}=e;let r,c=null,u=0;const d=()=>{let e;return c||(e=c=t().catch((e=>{if(e=e instanceof Error?e:new Error(String(e)),o)return new Promise(((t,a)=>{o(e,(()=>t((u++,c=null,d()))),(()=>a(e)),u+1)}));throw e})).then((t=>e!==c&&c?c:(t&&(t.__esModule||"Module"===t[Symbol.toStringTag])&&(t=t.default),r=t,t))))};return Jl({name:"AsyncComponentWrapper",__asyncLoader:d,get __asyncResolved(){return r},setup(){const e=ni;if(r)return()=>Xl(r,e);const t=t=>{c=null,ja(t,e,13,!l)};if(i&&e.suspense)return d().then((t=>()=>Xl(t,e))).catch((e=>(t(e),()=>l?Hs(l,{error:e}):null)));const o=ma(!1),u=ma(),_=ma(!!n);return n&&setTimeout((()=>{_.value=!1}),n),null!=s&&setTimeout((()=>{if(!o.value&&!u.value){const e=new Error(`Async component timed out after ${s}ms.`);t(e),u.value=e}}),s),d().then((()=>{o.value=!0,e.parent&&Ql(e.parent.vnode)&&Ya(e.parent.update)})).catch((e=>{t(e),u.value=e})),()=>o.value&&r?Xl(r,e):u.value&&l?Hs(l,{error:u.value}):a&&!_.value?Hs(a):void 0}})}function Xl(e,{vnode:{ref:t,props:a,children:l}}){const n=Hs(e,a,l);return n.ref=t,n}const Ql=e=>e.type.__isKeepAlive,en={name:"KeepAlive",__isKeepAlive:!0,props:{include:[String,RegExp,Array],exclude:[String,RegExp,Array],max:[String,Number]},setup(e,{slots:t}){const a=si(),l=a.ctx,n=new Map,s=new Set;let i=null;const o=a.suspense,{renderer:{p:r,m:c,um:u,o:{createElement:d}}}=l,_=d("div");function p(e){on(e),u(e,a,o,!0)}function f(e){n.forEach(((t,a)=>{const l=bi(t.type);!l||e&&e(l)||m(a)}))}function m(e){const t=n.get(e);i&&t.type===i.type?i&&on(i):p(t),n.delete(e),s.delete(e)}l.activate=(e,t,a,l,n)=>{const s=e.component;c(e,t,a,0,o),r(s.vnode,e,t,a,s,o,l,e.slotScopeIds,n),fs((()=>{s.isDeactivated=!1,s.a&&Fe(s.a);const t=e.props&&e.props.onVnodeMounted;t&&ti(t,s.parent,e)}),o)},l.deactivate=e=>{const t=e.component;c(e,_,null,1,o),fs((()=>{t.da&&Fe(t.da);const a=e.props&&e.props.onVnodeUnmounted;a&&ti(a,t.parent,e),t.isDeactivated=!0}),o)},jl((()=>[e.include,e.exclude]),(([e,t])=>{e&&f((t=>tn(e,t))),t&&f((e=>!tn(t,e)))}),{flush:"post",deep:!0});let v=null;const h=()=>{null!=v&&n.set(v,rn(a.subTree))};return _n(h),fn(h),mn((()=>{n.forEach((e=>{const{subTree:t,suspense:l}=a,n=rn(t);if(e.type!==n.type)p(e);else{on(n);const e=n.component.da;e&&fs(e,l)}}))})),()=>{if(v=null,!t.default)return null;const a=t.default(),l=a[0];if(a.length>1)return i=null,a;if(!Ls(l)||!(4&l.shapeFlag||128&l.shapeFlag))return i=null,l;let o=rn(l);const r=o.type,c=bi(Yl(o)?o.type.__asyncResolved||{}:r),{include:u,exclude:d,max:_}=e;if(u&&(!c||!tn(u,c))||d&&c&&tn(d,c))return i=o,l;const p=null==o.key?r:o.key,f=n.get(p);return o.el&&(o=Ws(o),128&l.shapeFlag&&(l.ssContent=o)),v=p,f?(o.el=f.el,o.component=f.component,o.transition&&Wl(o,o.transition),o.shapeFlag|=512,s.delete(p),s.add(p)):(s.add(p),_&&s.size>parseInt(_,10)&&m(s.values().next().value)),o.shapeFlag|=256,i=o,xl(l.type)?l:o}}};function tn(e,t){return fe(e)?e.some((e=>tn(e,t))):be(e)?e.split(",").includes(t):!!e.test&&e.test(t)}function an(e,t){nn(e,"a",t)}function ln(e,t){nn(e,"da",t)}function nn(e,t,a=ni){const l=e.__wdc||(e.__wdc=()=>{let t=a;for(;t;){if(t.isDeactivated)return;t=t.parent}return e()});if(cn(t,l,a),a){let e=a.parent;for(;e&&e.parent;)Ql(e.parent.vnode)&&sn(l,t,a,e),e=e.parent}}function sn(e,t,a,l){const n=cn(t,e,l,!0);vn((()=>{de(l[t],n)}),a)}function on(e){let t=e.shapeFlag;256&t&&(t-=256),512&t&&(t-=512),e.shapeFlag=t}function rn(e){return 128&e.shapeFlag?e.ssContent:e}function cn(e,t,a=ni,l=!1){if(a){const n=a[e]||(a[e]=[]),s=t.__weh||(t.__weh=(...l)=>{if(a.isUnmounted)return;rt(),ii(a);const n=Ua(t,a,e,l);return oi(),ct(),n});return l?n.unshift(s):n.push(s),s}}const un=e=>(t,a=ni)=>(!di||"sp"===e)&&cn(e,t,a),dn=un("bm"),_n=un("m"),pn=un("bu"),fn=un("u"),mn=un("bum"),vn=un("um"),hn=un("sp"),gn=un("rtg"),bn=un("rtc");function yn(e,t=ni){cn("ec",e,t)}function wn(e,t){const a=ul;if(null===a)return e;const l=hi(a)||a.proxy,n=e.dirs||(e.dirs=[]);for(let e=0;e<t.length;e++){let[a,s,i,o=le]=t[e];ge(a)&&(a={mounted:a,updated:a}),a.deep&&Rl(s),n.push({dir:a,instance:l,value:s,oldValue:void 0,arg:i,modifiers:o})}return e}function xn(e,t,a,l){const n=e.dirs,s=t&&t.dirs;for(let i=0;i<n.length;i++){const o=n[i];s&&(o.oldValue=s[i].value);let r=o.dir[l];r&&(rt(),Ua(r,a,8,[e.el,o,e,t]),ct())}}function kn(e,t){return Cn("components",e,!0,t)||e}const $n=Symbol();function Sn(e){return be(e)?Cn("components",e,!1)||e:e||$n}function Nn(e){return Cn("directives",e)}function Cn(e,t,a=!0,l=!1){const n=ul||ni;if(n){const a=n.type;if("components"===e){const e=bi(a,!1);if(e&&(e===t||e===Ie(t)||e===Ue(Ie(t))))return a}const s=En(n[e]||a[e],t)||En(n.appContext[e],t);return!s&&l?a:s}}function En(e,t){return e&&(e[t]||e[Ie(t)]||e[Ue(Ie(t))])}function An(e,t,a,l){let n;const s=a&&a[l];if(fe(e)||be(e)){n=new Array(e.length);for(let a=0,l=e.length;a<l;a++)n[a]=t(e[a],a,void 0,s&&s[a])}else if("number"==typeof e){n=new Array(e);for(let a=0;a<e;a++)n[a]=t(a+1,a,void 0,s&&s[a])}else if(we(e))if(e[Symbol.iterator])n=Array.from(e,((e,a)=>t(e,a,void 0,s&&s[a])));else{const a=Object.keys(e);n=new Array(a.length);for(let l=0,i=a.length;l<i;l++){const i=a[l];n[l]=t(e[i],i,l,s&&s[l])}}else n=[];return a&&(a[l]=n),n}function Tn(e,t){for(let a=0;a<t.length;a++){const l=t[a];if(fe(l))for(let t=0;t<l.length;t++)e[l[t].name]=l[t].fn;else l&&(e[l.name]=l.fn)}return e}function In(e,t,a={},l,n){if(ul.isCE||ul.parent&&Yl(ul.parent)&&ul.parent.isCE)return Hs("slot","default"===t?null:{name:t},l&&l());let s=e[t];s&&s._c&&(s._d=!1),Is();const i=s&&On(s(a)),o=Fs(Ss,{key:a.key||`_${t}`},i||(l?l():[]),i&&1===e._?64:-2);return!n&&o.scopeId&&(o.slotScopeIds=[o.scopeId+"-s"]),s&&s._c&&(s._d=!0),o}function On(e){return e.some((e=>!Ls(e)||e.type!==Cs&&!(e.type===Ss&&!On(e.children))))?e:null}function Pn(e){const t={};for(const a in e)t[je(a)]=e[a];return t}const Un=e=>e?ri(e)?hi(e)||e.proxy:Un(e.parent):null,jn=ue(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>e.props,$attrs:e=>e.attrs,$slots:e=>e.slots,$refs:e=>e.refs,$parent:e=>Un(e.parent),$root:e=>Un(e.root),$emit:e=>e.emit,$options:e=>zn(e),$forceUpdate:e=>e.f||(e.f=()=>Ya(e.update)),$nextTick:e=>e.n||(e.n=Ja.bind(e.proxy)),$watch:e=>Fl.bind(e)}),Mn={get({_:e},t){const{ctx:a,setupState:l,data:n,props:s,accessCache:i,type:o,appContext:r}=e;let c;if("$"!==t[0]){const o=i[t];if(void 0!==o)switch(o){case 1:return l[t];case 2:return n[t];case 4:return a[t];case 3:return s[t]}else{if(l!==le&&pe(l,t))return i[t]=1,l[t];if(n!==le&&pe(n,t))return i[t]=2,n[t];if((c=e.propsOptions[0])&&pe(c,t))return i[t]=3,s[t];if(a!==le&&pe(a,t))return i[t]=4,a[t];Ln&&(i[t]=0)}}const u=jn[t];let d,_;return u?("$attrs"===t&&ut(e,0,t),u(e)):(d=o.__cssModules)&&(d=d[t])?d:a!==le&&pe(a,t)?(i[t]=4,a[t]):(_=r.config.globalProperties,pe(_,t)?_[t]:void 0)},set({_:e},t,a){const{data:l,setupState:n,ctx:s}=e;return n!==le&&pe(n,t)?(n[t]=a,!0):l!==le&&pe(l,t)?(l[t]=a,!0):!(pe(e.props,t)||"$"===t[0]&&t.slice(1)in e||(s[t]=a,0))},has({_:{data:e,setupState:t,accessCache:a,ctx:l,appContext:n,propsOptions:s}},i){let o;return!!a[i]||e!==le&&pe(e,i)||t!==le&&pe(t,i)||(o=s[0])&&pe(o,i)||pe(l,i)||pe(jn,i)||pe(n.config.globalProperties,i)},defineProperty(e,t,a){return null!=a.get?e._.accessCache[t]=0:pe(a,"value")&&this.set(e,t,a.value,null),Reflect.defineProperty(e,t,a)}},Fn=ue({},Mn,{get(e,t){if(t!==Symbol.unscopables)return Mn.get(e,t,e)},has:(e,t)=>"_"!==t[0]&&!z(t)});let Ln=!0;function Rn(e,t,a){Ua(fe(e)?e.map((e=>e.bind(t.proxy))):e.bind(t.proxy),t,a)}function Dn(e,t,a,l){const n=l.includes(".")?Ll(a,l):()=>a[l];if(be(e)){const a=t[e];ge(a)&&jl(n,a)}else if(ge(e))jl(n,e.bind(a));else if(we(e))if(fe(e))e.forEach((e=>Dn(e,t,a,l)));else{const l=ge(e.handler)?e.handler.bind(a):t[e.handler];ge(l)&&jl(n,l,e)}}function zn(e){const t=e.type,{mixins:a,extends:l}=t,{mixins:n,optionsCache:s,config:{optionMergeStrategies:i}}=e.appContext,o=s.get(t);let r;return o?r=o:n.length||a||l?(r={},n.length&&n.forEach((e=>qn(r,e,i,!0))),qn(r,t,i)):r=t,s.set(t,r),r}function qn(e,t,a,l=!1){const{mixins:n,extends:s}=t;s&&qn(e,s,a,!0),n&&n.forEach((t=>qn(e,t,a,!0)));for(const n in t)if(l&&"expose"===n);else{const l=Bn[n]||a&&a[n];e[n]=l?l(e[n],t[n]):t[n]}return e}const Bn={data:Vn,props:Wn,emits:Wn,methods:Wn,computed:Wn,beforeCreate:Gn,created:Gn,beforeMount:Gn,mounted:Gn,beforeUpdate:Gn,updated:Gn,beforeDestroy:Gn,beforeUnmount:Gn,destroyed:Gn,unmounted:Gn,activated:Gn,deactivated:Gn,errorCaptured:Gn,serverPrefetch:Gn,components:Wn,directives:Wn,watch:function(e,t){if(!e)return t;if(!t)return e;const a=ue(Object.create(null),e);for(const l in t)a[l]=Gn(e[l],t[l]);return a},provide:Vn,inject:function(e,t){return Wn(Hn(e),Hn(t))}};function Vn(e,t){return t?e?function(){return ue(ge(e)?e.call(this,this):e,ge(t)?t.call(this,this):t)}:t:e}function Hn(e){if(fe(e)){const t={};for(let a=0;a<e.length;a++)t[e[a]]=e[a];return t}return e}function Gn(e,t){return e?[...new Set([].concat(e,t))]:t}function Wn(e,t){return e?ue(ue(Object.create(null),e),t):t}function Kn(e,t,a,l){const[n,s]=e.propsOptions;let i,o=!1;if(t)for(let r in t){if(Ce(r))continue;const c=t[r];let u;n&&pe(n,u=Ie(r))?s&&s.includes(u)?(i||(i={}))[u]=c:a[u]=c:cl(e.emitsOptions,r)||r in l&&c===l[r]||(l[r]=c,o=!0)}if(s){const t=ra(a),l=i||le;for(let i=0;i<s.length;i++){const o=s[i];a[o]=Jn(n,t,o,l[o],e,!pe(l,o))}}return o}function Jn(e,t,a,l,n,s){const i=e[a];if(null!=i){const e=pe(i,"default");if(e&&void 0===l){const e=i.default;if(i.type!==Function&&ge(e)){const{propsDefaults:s}=n;a in s?l=s[a]:(ii(n),l=s[a]=e.call(null,t),oi())}else l=e}i[0]&&(s&&!e?l=!1:!i[1]||""!==l&&l!==Pe(a)||(l=!0))}return l}function Yn(e,t,a=!1){const l=t.propsCache,n=l.get(e);if(n)return n;const s=e.props,i={},o=[];let r=!1;if(!ge(e)){const l=e=>{r=!0;const[a,l]=Yn(e,t,!0);ue(i,a),l&&o.push(...l)};!a&&t.mixins.length&&t.mixins.forEach(l),e.extends&&l(e.extends),e.mixins&&e.mixins.forEach(l)}if(!s&&!r)return l.set(e,ne),ne;if(fe(s))for(let e=0;e<s.length;e++){const t=Ie(s[e]);Zn(t)&&(i[t]=le)}else if(s)for(const e in s){const t=Ie(e);if(Zn(t)){const a=s[e],l=i[t]=fe(a)||ge(a)?{type:a}:a;if(l){const e=es(Boolean,l.type),a=es(String,l.type);l[0]=e>-1,l[1]=a<0||e<a,(e>-1||pe(l,"default"))&&o.push(t)}}}const c=[i,o];return l.set(e,c),c}function Zn(e){return"$"!==e[0]}function Xn(e){const t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:null===e?"null":""}function Qn(e,t){return Xn(e)===Xn(t)}function es(e,t){return fe(t)?t.findIndex((t=>Qn(t,e))):ge(t)&&Qn(t,e)?0:-1}const ts=e=>"_"===e[0]||"$stable"===e,as=e=>fe(e)?e.map(Zs):[Zs(e)],ls=(e,t,a)=>{if(t._n)return t;const l=vl(((...e)=>as(t(...e))),a);return l._c=!1,l},ns=(e,t,a)=>{const l=e._ctx;for(const a in e){if(ts(a))continue;const n=e[a];if(ge(n))t[a]=ls(0,n,l);else if(null!=n){const e=as(n);t[a]=()=>e}}},ss=(e,t)=>{const a=as(t);e.slots.default=()=>a};function is(){return{app:null,config:{isNativeTag:ie,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let os=0;function rs(e,t){return function(a,l=null){ge(a)||(a=Object.assign({},a)),null==l||we(l)||(l=null);const n=is(),s=new Set;let i=!1;const o=n.app={_uid:os++,_component:a,_props:l,_container:null,_context:n,_instance:null,version:Li,get config(){return n.config},set config(e){},use:(e,...t)=>(s.has(e)||(e&&ge(e.install)?(s.add(e),e.install(o,...t)):ge(e)&&(s.add(e),e(o,...t))),o),mixin:e=>(n.mixins.includes(e)||n.mixins.push(e),o),component:(e,t)=>t?(n.components[e]=t,o):n.components[e],directive:(e,t)=>t?(n.directives[e]=t,o):n.directives[e],mount(s,r,c){if(!i){const u=Hs(a,l);return u.appContext=n,r&&t?t(u,s):e(u,s,c),i=!0,o._container=s,s.__vue_app__=o,hi(u.component)||u.component.proxy}},unmount(){i&&(e(null,o._container),delete o._container.__vue_app__)},provide:(e,t)=>(n.provides[e]=t,o)};return o}}function cs(e,t,a,l,n=!1){if(fe(e))return void e.forEach(((e,s)=>cs(e,t&&(fe(t)?t[s]:t),a,l,n)));if(Yl(l)&&!n)return;const s=4&l.shapeFlag?hi(l.component)||l.component.proxy:l.el,i=n?null:s,{i:o,r:r}=e,c=t&&t.r,u=o.refs===le?o.refs={}:o.refs,d=o.setupState;if(null!=c&&c!==r&&(be(c)?(u[c]=null,pe(d,c)&&(d[c]=null)):fa(c)&&(c.value=null)),ge(r))Pa(r,o,12,[i,u]);else{const t=be(r),l=fa(r);if(t||l){const o=()=>{if(e.f){const a=t?u[r]:r.value;n?fe(a)&&de(a,s):fe(a)?a.includes(s)||a.push(s):t?(u[r]=[s],pe(d,r)&&(d[r]=u[r])):(r.value=[s],e.k&&(u[e.k]=r.value))}else t?(u[r]=i,pe(d,r)&&(d[r]=i)):l&&(r.value=i,e.k&&(u[e.k]=i))};i?(o.id=-1,fs(o,a)):o()}}}let us=!1;const ds=e=>/svg/.test(e.namespaceURI)&&"foreignObject"!==e.tagName,_s=e=>8===e.nodeType;function ps(e){const{mt:t,p:a,o:{patchProp:l,createText:n,nextSibling:s,parentNode:i,remove:o,insert:r,createComment:c}}=e,u=(a,l,o,c,v,h=!1)=>{const g=_s(a)&&"["===a.data,b=()=>f(a,l,o,c,v,g),{type:y,ref:w,shapeFlag:x,patchFlag:k}=l,$=a.nodeType;l.el=a,-2===k&&(h=!1,l.dynamicChildren=null);let S=null;switch(y){case Ns:3!==$?""===l.children?(r(l.el=n(""),i(a),a),S=a):S=b():(a.data!==l.children&&(us=!0,a.data=l.children),S=s(a));break;case Cs:S=8!==$||g?b():s(a);break;case Es:if(1===$||3===$){S=a;const e=!l.children.length;for(let t=0;t<l.staticCount;t++)e&&(l.children+=1===S.nodeType?S.outerHTML:S.data),t===l.staticCount-1&&(l.anchor=S),S=s(S);return S}S=b();break;case Ss:S=g?p(a,l,o,c,v,h):b();break;default:if(1&x)S=1!==$||l.type.toLowerCase()!==a.tagName.toLowerCase()?b():d(a,l,o,c,v,h);else if(6&x){l.slotScopeIds=v;const e=i(a);if(t(l,e,null,o,c,ds(e),h),S=g?m(a):s(a),S&&_s(S)&&"teleport end"===S.data&&(S=s(S)),Yl(l)){let t;g?(t=Hs(Ss),t.anchor=S?S.previousSibling:e.lastChild):t=3===a.nodeType?Ks(""):Hs("div"),t.el=a,l.component.subTree=t}}else 64&x?S=8!==$?b():l.type.hydrate(a,l,o,c,v,h,e,_):128&x&&(S=l.type.hydrate(a,l,o,c,ds(i(a)),v,h,e,u))}return null!=w&&cs(w,null,c,l),S},d=(e,t,a,n,s,i)=>{i=i||!!t.dynamicChildren;const{type:r,props:c,patchFlag:u,shapeFlag:d,dirs:p}=t,f="input"===r&&p||"option"===r;if(f||-1!==u){if(p&&xn(t,null,a,"created"),c)if(f||!i||48&u)for(const t in c)(f&&t.endsWith("value")||re(t)&&!Ce(t))&&l(e,t,null,c[t],!1,void 0,a);else c.onClick&&l(e,"onClick",null,c.onClick,!1,void 0,a);let r;if((r=c&&c.onVnodeBeforeMount)&&ti(r,a,t),p&&xn(t,null,a,"beforeMount"),((r=c&&c.onVnodeMounted)||p)&&Cl((()=>{r&&ti(r,a,t),p&&xn(t,null,a,"mounted")}),n),16&d&&(!c||!c.innerHTML&&!c.textContent)){let l=_(e.firstChild,t,e,a,n,s,i);for(;l;){us=!0;const e=l;l=l.nextSibling,o(e)}}else 8&d&&e.textContent!==t.children&&(us=!0,e.textContent=t.children)}return e.nextSibling},_=(e,t,l,n,s,i,o)=>{o=o||!!t.dynamicChildren;const r=t.children,c=r.length;for(let t=0;t<c;t++){const c=o?r[t]:r[t]=Zs(r[t]);if(e)e=u(e,c,n,s,i,o);else{if(c.type===Ns&&!c.children)continue;us=!0,a(null,c,l,null,n,s,ds(l),i)}}return e},p=(e,t,a,l,n,o)=>{const{slotScopeIds:u}=t;u&&(n=n?n.concat(u):u);const d=i(e),p=_(s(e),t,d,a,l,n,o);return p&&_s(p)&&"]"===p.data?s(t.anchor=p):(us=!0,r(t.anchor=c("]"),d,p),p)},f=(e,t,l,n,r,c)=>{if(us=!0,t.el=null,c){const t=m(e);for(;;){const a=s(e);if(!a||a===t)break;o(a)}}const u=s(e),d=i(e);return o(e),a(null,t,d,u,l,n,ds(d),r),u},m=e=>{let t=0;for(;e;)if((e=s(e))&&_s(e)&&("["===e.data&&t++,"]"===e.data)){if(0===t)return s(e);t--}return e};return[(e,t)=>{if(!t.hasChildNodes())return a(null,e,t),tl(),void(t._vnode=e);us=!1,u(t.firstChild,e,null,null,null),tl(),t._vnode=e,us&&console.error("Hydration completed but contains mismatches.")},u]}const fs=Cl;function ms(e){return hs(e)}function vs(e){return hs(e,ps)}function hs(e,t){(De||(De="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{})).__VUE__=!0;const{insert:a,remove:l,patchProp:n,createElement:s,createText:i,createComment:o,setText:r,setElementText:c,parentNode:u,nextSibling:d,setScopeId:_=se,cloneNode:p,insertStaticContent:f}=e,m=(e,t,a,l=null,n=null,s=null,i=!1,o=null,r=!!t.dynamicChildren)=>{if(e===t)return;e&&!Rs(e,t)&&(l=z(e),M(e,n,s,!0),e=null),-2===t.patchFlag&&(r=!1,t.dynamicChildren=null);const{type:c,ref:u,shapeFlag:d}=t;switch(c){case Ns:v(e,t,a,l);break;case Cs:h(e,t,a,l);break;case Es:null==e&&g(t,a,l,i);break;case Ss:N(e,t,a,l,n,s,i,o,r);break;default:1&d?b(e,t,a,l,n,s,i,o,r):6&d?C(e,t,a,l,n,s,i,o,r):(64&d||128&d)&&c.process(e,t,a,l,n,s,i,o,r,B)}null!=u&&n&&cs(u,e&&e.ref,s,t||e,!t)},v=(e,t,l,n)=>{if(null==e)a(t.el=i(t.children),l,n);else{const a=t.el=e.el;t.children!==e.children&&r(a,t.children)}},h=(e,t,l,n)=>{null==e?a(t.el=o(t.children||""),l,n):t.el=e.el},g=(e,t,a,l)=>{[e.el,e.anchor]=f(e.children,t,a,l,e.el,e.anchor)},b=(e,t,a,l,n,s,i,o,r)=>{i=i||"svg"===t.type,null==e?y(t,a,l,n,s,i,o,r):k(e,t,n,s,i,o,r)},y=(e,t,l,i,o,r,u,d)=>{let _,f;const{type:m,props:v,shapeFlag:h,transition:g,patchFlag:b,dirs:y}=e;if(e.el&&void 0!==p&&-1===b)_=e.el=p(e.el);else{if(_=e.el=s(e.type,r,v&&v.is,v),8&h?c(_,e.children):16&h&&x(e.children,_,null,i,o,r&&"foreignObject"!==m,u,d),y&&xn(e,null,i,"created"),v){for(const t in v)"value"===t||Ce(t)||n(_,t,null,v[t],r,e.children,i,o,D);"value"in v&&n(_,"value",null,v.value),(f=v.onVnodeBeforeMount)&&ti(f,i,e)}w(_,e,e.scopeId,u,i)}y&&xn(e,null,i,"beforeMount");const k=(!o||o&&!o.pendingBranch)&&g&&!g.persisted;k&&g.beforeEnter(_),a(_,t,l),((f=v&&v.onVnodeMounted)||k||y)&&fs((()=>{f&&ti(f,i,e),k&&g.enter(_),y&&xn(e,null,i,"mounted")}),o)},w=(e,t,a,l,n)=>{if(a&&_(e,a),l)for(let t=0;t<l.length;t++)_(e,l[t]);if(n&&t===n.subTree){const t=n.vnode;w(e,t,t.scopeId,t.slotScopeIds,n.parent)}},x=(e,t,a,l,n,s,i,o,r=0)=>{for(let c=r;c<e.length;c++){const r=e[c]=o?Xs(e[c]):Zs(e[c]);m(null,r,t,a,l,n,s,i,o)}},k=(e,t,a,l,s,i,o)=>{const r=t.el=e.el;let{patchFlag:u,dynamicChildren:d,dirs:_}=t;u|=16&e.patchFlag;const p=e.props||le,f=t.props||le;let m;a&&gs(a,!1),(m=f.onVnodeBeforeUpdate)&&ti(m,a,t,e),_&&xn(t,e,a,"beforeUpdate"),a&&gs(a,!0);const v=s&&"foreignObject"!==t.type;if(d?$(e.dynamicChildren,d,r,a,l,v,i):o||O(e,t,r,null,a,l,v,i,!1),u>0){if(16&u)S(r,t,p,f,a,l,s);else if(2&u&&p.class!==f.class&&n(r,"class",null,f.class,s),4&u&&n(r,"style",p.style,f.style,s),8&u){const i=t.dynamicProps;for(let t=0;t<i.length;t++){const o=i[t],c=p[o],u=f[o];u===c&&"value"!==o||n(r,o,c,u,s,e.children,a,l,D)}}1&u&&e.children!==t.children&&c(r,t.children)}else o||null!=d||S(r,t,p,f,a,l,s);((m=f.onVnodeUpdated)||_)&&fs((()=>{m&&ti(m,a,t,e),_&&xn(t,e,a,"updated")}),l)},$=(e,t,a,l,n,s,i)=>{for(let o=0;o<t.length;o++){const r=e[o],c=t[o],d=r.el&&(r.type===Ss||!Rs(r,c)||70&r.shapeFlag)?u(r.el):a;m(r,c,d,null,l,n,s,i,!0)}},S=(e,t,a,l,s,i,o)=>{if(a!==l){for(const r in l){if(Ce(r))continue;const c=l[r],u=a[r];c!==u&&"value"!==r&&n(e,r,u,c,o,t.children,s,i,D)}if(a!==le)for(const r in a)Ce(r)||r in l||n(e,r,a[r],null,o,t.children,s,i,D);"value"in l&&n(e,"value",a.value,l.value)}},N=(e,t,l,n,s,o,r,c,u)=>{const d=t.el=e?e.el:i(""),_=t.anchor=e?e.anchor:i("");let{patchFlag:p,dynamicChildren:f,slotScopeIds:m}=t;m&&(c=c?c.concat(m):m),null==e?(a(d,l,n),a(_,l,n),x(t.children,l,_,s,o,r,c,u)):p>0&&64&p&&f&&e.dynamicChildren?($(e.dynamicChildren,f,l,s,o,r,c),(null!=t.key||s&&t===s.subTree)&&bs(e,t,!0)):O(e,t,l,_,s,o,r,c,u)},C=(e,t,a,l,n,s,i,o,r)=>{t.slotScopeIds=o,null==e?512&t.shapeFlag?n.ctx.activate(t,a,l,i,r):E(t,a,l,n,s,i,r):A(e,t,r)},E=(e,t,a,l,n,s,i)=>{const o=e.component=function(e,t,a){const l=e.type,n=(t?t.appContext:e.appContext)||ai,s={uid:li++,vnode:e,type:l,parent:t,appContext:n,root:null,next:null,subTree:null,effect:null,update:null,scope:new qe(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:t?t.provides:Object.create(n.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:Yn(l,n),emitsOptions:rl(l,n),emit:null,emitted:null,propsDefaults:le,inheritAttrs:l.inheritAttrs,ctx:le,data:le,props:le,attrs:le,slots:le,refs:le,setupState:le,setupContext:null,suspense:a,suspenseId:a?a.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return s.ctx={_:s},s.root=t?t.root:s,s.emit=ol.bind(null,s),e.ce&&e.ce(s),s}(e,l,n);if(Ql(e)&&(o.ctx.renderer=B),function(e,t=!1){di=t;const{props:a,children:l}=e.vnode,n=ri(e);(function(e,t,a,l=!1){const n={},s={};Le(s,zs,1),e.propsDefaults=Object.create(null),Kn(e,t,n,s);for(const t in e.propsOptions[0])t in n||(n[t]=void 0);e.props=a?l?n:ea(n):e.type.props?n:s,e.attrs=s})(e,a,n,t),((e,t)=>{if(32&e.vnode.shapeFlag){const a=t._;a?(e.slots=ra(t),Le(t,"_",a)):ns(t,e.slots={})}else e.slots={},t&&ss(e,t);Le(e.slots,zs,1)})(e,l),n&&function(e,t){const a=e.type;e.accessCache=Object.create(null),e.proxy=ca(new Proxy(e.ctx,Mn));const{setup:l}=a;if(l){const a=e.setupContext=l.length>1?vi(e):null;ii(e),rt();const n=Pa(l,e,0,[e.props,a]);if(ct(),oi(),xe(n)){if(n.then(oi,oi),t)return n.then((a=>{_i(e,a,t)})).catch((t=>{ja(t,e,0)}));e.asyncDep=n}else _i(e,n,t)}else mi(e,t)}(e,t),di=!1}(o),o.asyncDep){if(n&&n.registerDep(o,T),!e.el){const e=o.subTree=Hs(Cs);h(null,e,t,a)}}else T(o,e,t,a,n,s,i)},A=(e,t,a)=>{const l=t.component=e.component;if(function(e,t,a){const{props:l,children:n,component:s}=e,{props:i,children:o,patchFlag:r}=t,c=s.emitsOptions;if(t.dirs||t.transition)return!0;if(!(a&&r>=0))return!(!n&&!o||o&&o.$stable)||l!==i&&(l?!i||yl(l,i,c):!!i);if(1024&r)return!0;if(16&r)return l?yl(l,i,c):!!i;if(8&r){const e=t.dynamicProps;for(let t=0;t<e.length;t++){const a=e[t];if(i[a]!==l[a]&&!cl(c,a))return!0}}return!1}(e,t,a)){if(l.asyncDep&&!l.asyncResolved)return void I(l,t,a);l.next=t,function(e){const t=La.indexOf(e);t>Ra&&La.splice(t,1)}(l.update),l.update()}else t.el=e.el,l.vnode=t},T=(e,t,a,l,n,s,i)=>{const o=e.effect=new at((()=>{if(e.isMounted){let t,{next:a,bu:l,u:o,parent:r,vnode:c}=e,d=a;gs(e,!1),a?(a.el=c.el,I(e,a,i)):a=c,l&&Fe(l),(t=a.props&&a.props.onVnodeBeforeUpdate)&&ti(t,r,a,c),gs(e,!0);const _=hl(e),p=e.subTree;e.subTree=_,m(p,_,u(p.el),z(p),e,n,s),a.el=_.el,null===d&&wl(e,_.el),o&&fs(o,n),(t=a.props&&a.props.onVnodeUpdated)&&fs((()=>ti(t,r,a,c)),n)}else{let i;const{el:o,props:r}=t,{bm:c,m:u,parent:d}=e,_=Yl(t);if(gs(e,!1),c&&Fe(c),!_&&(i=r&&r.onVnodeBeforeMount)&&ti(i,d,t),gs(e,!0),o&&H){const a=()=>{e.subTree=hl(e),H(o,e.subTree,e,n,null)};_?t.type.__asyncLoader().then((()=>!e.isUnmounted&&a())):a()}else{const i=e.subTree=hl(e);m(null,i,a,l,e,n,s),t.el=i.el}if(u&&fs(u,n),!_&&(i=r&&r.onVnodeMounted)){const e=t;fs((()=>ti(i,d,e)),n)}(256&t.shapeFlag||d&&Yl(d.vnode)&&256&d.vnode.shapeFlag)&&e.a&&fs(e.a,n),e.isMounted=!0,t=a=l=null}}),(()=>Ya(r)),e.scope),r=e.update=()=>o.run();r.id=e.uid,gs(e,!0),r()},I=(e,t,a)=>{t.component=e;const l=e.vnode.props;e.vnode=t,e.next=null,function(e,t,a,l){const{props:n,attrs:s,vnode:{patchFlag:i}}=e,o=ra(n),[r]=e.propsOptions;let c=!1;if(!(l||i>0)||16&i){let l;Kn(e,t,n,s)&&(c=!0);for(const s in o)t&&(pe(t,s)||(l=Pe(s))!==s&&pe(t,l))||(r?!a||void 0===a[s]&&void 0===a[l]||(n[s]=Jn(r,o,s,void 0,e,!0)):delete n[s]);if(s!==o)for(const e in s)t&&pe(t,e)||(delete s[e],c=!0)}else if(8&i){const a=e.vnode.dynamicProps;for(let l=0;l<a.length;l++){let i=a[l];if(cl(e.emitsOptions,i))continue;const u=t[i];if(r)if(pe(s,i))u!==s[i]&&(s[i]=u,c=!0);else{const t=Ie(i);n[t]=Jn(r,o,t,u,e,!1)}else u!==s[i]&&(s[i]=u,c=!0)}}c&&_t(e,"set","$attrs")}(e,t.props,l,a),((e,t,a)=>{const{vnode:l,slots:n}=e;let s=!0,i=le;if(32&l.shapeFlag){const e=t._;e?a&&1===e?s=!1:(ue(n,t),a||1!==e||delete n._):(s=!t.$stable,ns(t,n)),i=t}else t&&(ss(e,t),i={default:1});if(s)for(const e in n)ts(e)||e in i||delete n[e]})(e,t.children,a),rt(),el(void 0,e.update),ct()},O=(e,t,a,l,n,s,i,o,r=!1)=>{const u=e&&e.children,d=e?e.shapeFlag:0,_=t.children,{patchFlag:p,shapeFlag:f}=t;if(p>0){if(128&p)return void U(u,_,a,l,n,s,i,o,r);if(256&p)return void P(u,_,a,l,n,s,i,o,r)}8&f?(16&d&&D(u,n,s),_!==u&&c(a,_)):16&d?16&f?U(u,_,a,l,n,s,i,o,r):D(u,n,s,!0):(8&d&&c(a,""),16&f&&x(_,a,l,n,s,i,o,r))},P=(e,t,a,l,n,s,i,o,r)=>{const c=(e=e||ne).length,u=(t=t||ne).length,d=Math.min(c,u);let _;for(_=0;_<d;_++){const l=t[_]=r?Xs(t[_]):Zs(t[_]);m(e[_],l,a,null,n,s,i,o,r)}c>u?D(e,n,s,!0,!1,d):x(t,a,l,n,s,i,o,r,d)},U=(e,t,a,l,n,s,i,o,r)=>{let c=0;const u=t.length;let d=e.length-1,_=u-1;for(;c<=d&&c<=_;){const l=e[c],u=t[c]=r?Xs(t[c]):Zs(t[c]);if(!Rs(l,u))break;m(l,u,a,null,n,s,i,o,r),c++}for(;c<=d&&c<=_;){const l=e[d],c=t[_]=r?Xs(t[_]):Zs(t[_]);if(!Rs(l,c))break;m(l,c,a,null,n,s,i,o,r),d--,_--}if(c>d){if(c<=_){const e=_+1,d=e<u?t[e].el:l;for(;c<=_;)m(null,t[c]=r?Xs(t[c]):Zs(t[c]),a,d,n,s,i,o,r),c++}}else if(c>_)for(;c<=d;)M(e[c],n,s,!0),c++;else{const p=c,f=c,v=new Map;for(c=f;c<=_;c++){const e=t[c]=r?Xs(t[c]):Zs(t[c]);null!=e.key&&v.set(e.key,c)}let h,g=0;const b=_-f+1;let y=!1,w=0;const x=new Array(b);for(c=0;c<b;c++)x[c]=0;for(c=p;c<=d;c++){const l=e[c];if(g>=b){M(l,n,s,!0);continue}let u;if(null!=l.key)u=v.get(l.key);else for(h=f;h<=_;h++)if(0===x[h-f]&&Rs(l,t[h])){u=h;break}void 0===u?M(l,n,s,!0):(x[u-f]=c+1,u>=w?w=u:y=!0,m(l,t[u],a,null,n,s,i,o,r),g++)}const k=y?function(e){const t=e.slice(),a=[0];let l,n,s,i,o;const r=e.length;for(l=0;l<r;l++){const r=e[l];if(0!==r){if(n=a[a.length-1],e[n]<r){t[l]=n,a.push(l);continue}for(s=0,i=a.length-1;s<i;)o=s+i>>1,e[a[o]]<r?s=o+1:i=o;r<e[a[s]]&&(s>0&&(t[l]=a[s-1]),a[s]=l)}}for(s=a.length,i=a[s-1];s-- >0;)a[s]=i,i=t[i];return a}(x):ne;for(h=k.length-1,c=b-1;c>=0;c--){const e=f+c,d=t[e],_=e+1<u?t[e+1].el:l;0===x[c]?m(null,d,a,_,n,s,i,o,r):y&&(h<0||c!==k[h]?j(d,a,_,2):h--)}}},j=(e,t,l,n,s=null)=>{const{el:i,type:o,transition:r,children:c,shapeFlag:u}=e;if(6&u)j(e.component.subTree,t,l,n);else if(128&u)e.suspense.move(t,l,n);else if(64&u)o.move(e,t,l,B);else if(o!==Ss)if(o!==Es)if(2!==n&&1&u&&r)if(0===n)r.beforeEnter(i),a(i,t,l),fs((()=>r.enter(i)),s);else{const{leave:e,delayLeave:n,afterLeave:s}=r,o=()=>a(i,t,l),c=()=>{e(i,(()=>{o(),s&&s()}))};n?n(i,o,c):c()}else a(i,t,l);else(({el:e,anchor:t},l,n)=>{let s;for(;e&&e!==t;)s=d(e),a(e,l,n),e=s;a(t,l,n)})(e,t,l);else{a(i,t,l);for(let e=0;e<c.length;e++)j(c[e],t,l,n);a(e.anchor,t,l)}},M=(e,t,a,l=!1,n=!1)=>{const{type:s,props:i,ref:o,children:r,dynamicChildren:c,shapeFlag:u,patchFlag:d,dirs:_}=e;if(null!=o&&cs(o,null,a,e,!0),256&u)return void t.ctx.deactivate(e);const p=1&u&&_,f=!Yl(e);let m;if(f&&(m=i&&i.onVnodeBeforeUnmount)&&ti(m,t,e),6&u)R(e.component,a,l);else{if(128&u)return void e.suspense.unmount(a,l);p&&xn(e,null,t,"beforeUnmount"),64&u?e.type.remove(e,t,a,n,B,l):c&&(s!==Ss||d>0&&64&d)?D(c,t,a,!1,!0):(s===Ss&&384&d||!n&&16&u)&&D(r,t,a),l&&F(e)}(f&&(m=i&&i.onVnodeUnmounted)||p)&&fs((()=>{m&&ti(m,t,e),p&&xn(e,null,t,"unmounted")}),a)},F=e=>{const{type:t,el:a,anchor:n,transition:s}=e;if(t===Ss)return void L(a,n);if(t===Es)return void(({el:e,anchor:t})=>{let a;for(;e&&e!==t;)a=d(e),l(e),e=a;l(t)})(e);const i=()=>{l(a),s&&!s.persisted&&s.afterLeave&&s.afterLeave()};if(1&e.shapeFlag&&s&&!s.persisted){const{leave:t,delayLeave:l}=s,n=()=>t(a,i);l?l(e.el,i,n):n()}else i()},L=(e,t)=>{let a;for(;e!==t;)a=d(e),l(e),e=a;l(t)},R=(e,t,a)=>{const{bum:l,scope:n,update:s,subTree:i,um:o}=e;l&&Fe(l),n.stop(),s&&(s.active=!1,M(i,e,t,a)),o&&fs(o,t),fs((()=>{e.isUnmounted=!0}),t),t&&t.pendingBranch&&!t.isUnmounted&&e.asyncDep&&!e.asyncResolved&&e.suspenseId===t.pendingId&&(t.deps--,0===t.deps&&t.resolve())},D=(e,t,a,l=!1,n=!1,s=0)=>{for(let i=s;i<e.length;i++)M(e[i],t,a,l,n)},z=e=>6&e.shapeFlag?z(e.component.subTree):128&e.shapeFlag?e.suspense.next():d(e.anchor||e.el),q=(e,t,a)=>{null==e?t._vnode&&M(t._vnode,null,null,!0):m(t._vnode||null,e,t,null,null,null,a),tl(),t._vnode=e},B={p:m,um:M,m:j,r:F,mt:E,mc:x,pc:O,pbc:$,n:z,o:e};let V,H;return t&&([V,H]=t(B)),{render:q,hydrate:V,createApp:rs(q,V)}}function gs({effect:e,update:t},a){e.allowRecurse=t.allowRecurse=a}function bs(e,t,a=!1){const l=e.children,n=t.children;if(fe(l)&&fe(n))for(let e=0;e<l.length;e++){const t=l[e];let s=n[e];1&s.shapeFlag&&!s.dynamicChildren&&((s.patchFlag<=0||32===s.patchFlag)&&(s=n[e]=Xs(n[e]),s.el=t.el),a||bs(t,s))}}const ys=e=>e&&(e.disabled||""===e.disabled),ws=e=>"undefined"!=typeof SVGElement&&e instanceof SVGElement,xs=(e,t)=>{const a=e&&e.to;return be(a)?t?t(a):null:a};function ks(e,t,a,{o:{insert:l},m:n},s=2){0===s&&l(e.targetAnchor,t,a);const{el:i,anchor:o,shapeFlag:r,children:c,props:u}=e,d=2===s;if(d&&l(i,t,a),(!d||ys(u))&&16&r)for(let e=0;e<c.length;e++)n(c[e],t,a,2);d&&l(o,t,a)}const $s={__isTeleport:!0,process(e,t,a,l,n,s,i,o,r,c){const{mc:u,pc:d,pbc:_,o:{insert:p,querySelector:f,createText:m}}=c,v=ys(t.props);let{shapeFlag:h,children:g,dynamicChildren:b}=t;if(null==e){const e=t.el=m(""),c=t.anchor=m("");p(e,a,l),p(c,a,l);const d=t.target=xs(t.props,f),_=t.targetAnchor=m("");d&&(p(_,d),i=i||ws(d));const b=(e,t)=>{16&h&&u(g,e,t,n,s,i,o,r)};v?b(a,c):d&&b(d,_)}else{t.el=e.el;const l=t.anchor=e.anchor,u=t.target=e.target,p=t.targetAnchor=e.targetAnchor,m=ys(e.props),h=m?a:u,g=m?l:p;if(i=i||ws(u),b?(_(e.dynamicChildren,b,h,n,s,i,o),bs(e,t,!0)):r||d(e,t,h,g,n,s,i,o,!1),v)m||ks(t,a,l,c,1);else if((t.props&&t.props.to)!==(e.props&&e.props.to)){const e=t.target=xs(t.props,f);e&&ks(t,e,null,c,0)}else m&&ks(t,u,p,c,1)}},remove(e,t,a,l,{um:n,o:{remove:s}},i){const{shapeFlag:o,children:r,anchor:c,targetAnchor:u,target:d,props:_}=e;if(d&&s(u),(i||!ys(_))&&(s(c),16&o))for(let e=0;e<r.length;e++){const l=r[e];n(l,t,a,!0,!!l.dynamicChildren)}},move:ks,hydrate:function(e,t,a,l,n,s,{o:{nextSibling:i,parentNode:o,querySelector:r}},c){const u=t.target=xs(t.props,r);if(u){const r=u._lpa||u.firstChild;if(16&t.shapeFlag)if(ys(t.props))t.anchor=c(i(e),t,o(e),a,l,n,s),t.targetAnchor=r;else{t.anchor=i(e);let o=r;for(;o;)if(o=i(o),o&&8===o.nodeType&&"teleport anchor"===o.data){t.targetAnchor=o,u._lpa=t.targetAnchor&&i(t.targetAnchor);break}c(r,t,u,a,l,n,s)}}return t.anchor&&i(t.anchor)}},Ss=Symbol(void 0),Ns=Symbol(void 0),Cs=Symbol(void 0),Es=Symbol(void 0),As=[];let Ts=null;function Is(e=!1){As.push(Ts=e?null:[])}function Os(){As.pop(),Ts=As[As.length-1]||null}let Ps=1;function Us(e){Ps+=e}function js(e){return e.dynamicChildren=Ps>0?Ts||ne:null,Os(),Ps>0&&Ts&&Ts.push(e),e}function Ms(e,t,a,l,n,s){return js(Vs(e,t,a,l,n,s,!0))}function Fs(e,t,a,l,n){return js(Hs(e,t,a,l,n,!0))}function Ls(e){return!!e&&!0===e.__v_isVNode}function Rs(e,t){return e.type===t.type&&e.key===t.key}function Ds(e){}const zs="__vInternal",qs=({key:e})=>null!=e?e:null,Bs=({ref:e,ref_key:t,ref_for:a})=>null!=e?be(e)||fa(e)||ge(e)?{i:ul,r:e,k:t,f:!!a}:e:null;function Vs(e,t=null,a=null,l=0,n=null,s=(e===Ss?0:1),i=!1,o=!1){const r={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&qs(t),ref:t&&Bs(t),scopeId:dl,slotScopeIds:null,children:a,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:s,patchFlag:l,dynamicProps:n,dynamicChildren:null,appContext:null};return o?(Qs(r,a),128&s&&e.normalize(r)):a&&(r.shapeFlag|=be(a)?8:16),Ps>0&&!i&&Ts&&(r.patchFlag>0||6&s)&&32!==r.patchFlag&&Ts.push(r),r}const Hs=function(e,t=null,a=null,l=0,n=null,s=!1){if(e&&e!==$n||(e=Cs),Ls(e)){const l=Ws(e,t,!0);return a&&Qs(l,a),Ps>0&&!s&&Ts&&(6&l.shapeFlag?Ts[Ts.indexOf(e)]=l:Ts.push(l)),l.patchFlag|=-2,l}var i;if(ge(i=e)&&"__vccOpts"in i&&(e=e.__vccOpts),t){t=Gs(t);let{class:e,style:a}=t;e&&!be(e)&&(t.class=K(e)),we(a)&&(oa(a)&&!fe(a)&&(a=ue({},a)),t.style=V(a))}return Vs(e,t,a,l,n,be(e)?1:xl(e)?128:(e=>e.__isTeleport)(e)?64:we(e)?4:ge(e)?2:0,s,!0)};function Gs(e){return e?oa(e)||zs in e?ue({},e):e:null}function Ws(e,t,a=!1){const{props:l,ref:n,patchFlag:s,children:i}=e,o=t?ei(l||{},t):l;return{__v_isVNode:!0,__v_skip:!0,type:e.type,props:o,key:o&&qs(o),ref:t&&t.ref?a&&n?fe(n)?n.concat(Bs(t)):[n,Bs(t)]:Bs(t):n,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:i,target:e.target,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==Ss?-1===s?16:16|s:s,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:e.transition,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&Ws(e.ssContent),ssFallback:e.ssFallback&&Ws(e.ssFallback),el:e.el,anchor:e.anchor}}function Ks(e=" ",t=0){return Hs(Ns,null,e,t)}function Js(e,t){const a=Hs(Es,null,e);return a.staticCount=t,a}function Ys(e="",t=!1){return t?(Is(),Fs(Cs,null,e)):Hs(Cs,null,e)}function Zs(e){return null==e||"boolean"==typeof e?Hs(Cs):fe(e)?Hs(Ss,null,e.slice()):"object"==typeof e?Xs(e):Hs(Ns,null,String(e))}function Xs(e){return null===e.el||e.memo?e:Ws(e)}function Qs(e,t){let a=0;const{shapeFlag:l}=e;if(null==t)t=null;else if(fe(t))a=16;else if("object"==typeof t){if(65&l){const a=t.default;return void(a&&(a._c&&(a._d=!1),Qs(e,a()),a._c&&(a._d=!0)))}{a=32;const l=t._;l||zs in t?3===l&&ul&&(1===ul.slots._?t._=1:(t._=2,e.patchFlag|=1024)):t._ctx=ul}}else ge(t)?(t={default:t,_ctx:ul},a=32):(t=String(t),64&l?(a=16,t=[Ks(t)]):a=8);e.children=t,e.shapeFlag|=a}function ei(...e){const t={};for(let a=0;a<e.length;a++){const l=e[a];for(const e in l)if("class"===e)t.class!==l.class&&(t.class=K([t.class,l.class]));else if("style"===e)t.style=V([t.style,l.style]);else if(re(e)){const a=t[e],n=l[e];!n||a===n||fe(a)&&a.includes(n)||(t[e]=a?[].concat(a,n):n)}else""!==e&&(t[e]=l[e])}return t}function ti(e,t,a,l=null){Ua(e,t,7,[a,l])}const ai=is();let li=0,ni=null;const si=()=>ni||ul,ii=e=>{ni=e,e.scope.on()},oi=()=>{ni&&ni.scope.off(),ni=null};function ri(e){return 4&e.vnode.shapeFlag}let ci,ui,di=!1;function _i(e,t,a){ge(t)?e.render=t:we(t)&&(e.setupState=xa(t)),mi(e,a)}function pi(e){ci=e,ui=e=>{e.render._rc&&(e.withProxy=new Proxy(e.ctx,Fn))}}const fi=()=>!ci;function mi(e,t,a){const l=e.type;if(!e.render){if(!t&&ci&&!l.render){const t=l.template;if(t){const{isCustomElement:a,compilerOptions:n}=e.appContext.config,{delimiters:s,compilerOptions:i}=l,o=ue(ue({isCustomElement:a,delimiters:s},n),i);l.render=ci(t,o)}}e.render=l.render||se,ui&&ui(e)}ii(e),rt(),function(e){const t=zn(e),a=e.proxy,l=e.ctx;Ln=!1,t.beforeCreate&&Rn(t.beforeCreate,e,"bc");const{data:n,computed:s,methods:i,watch:o,provide:r,inject:c,created:u,beforeMount:d,mounted:_,beforeUpdate:p,updated:f,activated:m,deactivated:v,beforeUnmount:h,unmounted:g,render:b,renderTracked:y,renderTriggered:w,errorCaptured:x,serverPrefetch:k,expose:$,inheritAttrs:S,components:N,directives:C}=t;if(c&&function(e,t,a=se,l=!1){fe(e)&&(e=Hn(e));for(const a in e){const n=e[a];let s;s=we(n)?"default"in n?Tl(n.from||a,n.default,!0):Tl(n.from||a):Tl(n),fa(s)&&l?Object.defineProperty(t,a,{enumerable:!0,configurable:!0,get:()=>s.value,set:e=>s.value=e}):t[a]=s}}(c,l,null,e.appContext.config.unwrapInjectedRef),i)for(const e in i){const t=i[e];ge(t)&&(l[e]=t.bind(a))}if(n){const t=n.call(a,a);we(t)&&(e.data=Qt(t))}if(Ln=!0,s)for(const e in s){const t=s[e],n=ge(t)?t.bind(a,a):ge(t.get)?t.get.bind(a,a):se,i=!ge(t)&&ge(t.set)?t.set.bind(a):se,o=wi({get:n,set:i});Object.defineProperty(l,e,{enumerable:!0,configurable:!0,get:()=>o.value,set:e=>o.value=e})}if(o)for(const e in o)Dn(o[e],l,a,e);if(r){const e=ge(r)?r.call(a):r;Reflect.ownKeys(e).forEach((t=>{Al(t,e[t])}))}function E(e,t){fe(t)?t.forEach((t=>e(t.bind(a)))):t&&e(t.bind(a))}if(u&&Rn(u,e,"c"),E(dn,d),E(_n,_),E(pn,p),E(fn,f),E(an,m),E(ln,v),E(yn,x),E(bn,y),E(gn,w),E(mn,h),E(vn,g),E(hn,k),fe($))if($.length){const t=e.exposed||(e.exposed={});$.forEach((e=>{Object.defineProperty(t,e,{get:()=>a[e],set:t=>a[e]=t})}))}else e.exposed||(e.exposed={});b&&e.render===se&&(e.render=b),null!=S&&(e.inheritAttrs=S),N&&(e.components=N),C&&(e.directives=C)}(e),ct(),oi()}function vi(e){let t;return{get attrs(){return t||(t=function(e){return new Proxy(e.attrs,{get:(t,a)=>(ut(e,0,"$attrs"),t[a])})}(e))},slots:e.slots,emit:e.emit,expose:t=>{e.exposed=t||{}}}}function hi(e){if(e.exposed)return e.exposeProxy||(e.exposeProxy=new Proxy(xa(ca(e.exposed)),{get:(t,a)=>a in t?t[a]:a in jn?jn[a](e):void 0}))}const gi=/(?:^|[-_])(\w)/g;function bi(e,t=!0){return ge(e)?e.displayName||e.name:e.name||t&&e.__name}function yi(e,t,a=!1){let l=bi(t);if(!l&&t.__file){const e=t.__file.match(/([^/\\]+)\.\w+$/);e&&(l=e[1])}if(!l&&e&&e.parent){const a=e=>{for(const a in e)if(e[a]===t)return a};l=a(e.components||e.parent.type.components)||a(e.appContext.components)}return l?l.replace(gi,(e=>e.toUpperCase())).replace(/[-_]/g,""):a?"App":"Anonymous"}const wi=(e,t)=>function(e,t,a=!1){let l,n;const s=ge(e);return s?(l=e,n=se):(l=e.get,n=e.set),new Ea(l,n,s||!n,a)}(e,0,di);function xi(){return null}function ki(){return null}function $i(e){}function Si(e,t){return null}function Ni(){return Ei().slots}function Ci(){return Ei().attrs}function Ei(){const e=si();return e.setupContext||(e.setupContext=vi(e))}function Ai(e,t){const a=fe(e)?e.reduce(((e,t)=>(e[t]={},e)),{}):e;for(const e in t){const l=a[e];l?fe(l)||ge(l)?a[e]={type:l,default:t[e]}:l.default=t[e]:null===l&&(a[e]={default:t[e]})}return a}function Ti(e,t){const a={};for(const l in e)t.includes(l)||Object.defineProperty(a,l,{enumerable:!0,get:()=>e[l]});return a}function Ii(e){const t=si();let a=e();return oi(),xe(a)&&(a=a.catch((e=>{throw ii(t),e}))),[a,()=>ii(t)]}function Oi(e,t,a){const l=arguments.length;return 2===l?we(t)&&!fe(t)?Ls(t)?Hs(e,null,[t]):Hs(e,t):Hs(e,null,t):(l>3?a=Array.prototype.slice.call(arguments,2):3===l&&Ls(a)&&(a=[a]),Hs(e,t,a))}const Pi=Symbol(""),Ui=()=>{{const e=Tl(Pi);return e||Ta("Server rendering context not provided. Make sure to only call useSSRContext() conditionally in the server build."),e}};function ji(){}function Mi(e,t,a,l){const n=a[l];if(n&&Fi(n,e))return n;const s=t();return s.memo=e.slice(),a[l]=s}function Fi(e,t){const a=e.memo;if(a.length!=t.length)return!1;for(let e=0;e<a.length;e++)if(Me(a[e],t[e]))return!1;return Ps>0&&Ts&&Ts.push(e),!0}const Li="3.2.37",Ri="undefined"!=typeof document?document:null,Di=Ri&&Ri.createElement("template"),zi={insert:(e,t,a)=>{t.insertBefore(e,a||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,a,l)=>{const n=t?Ri.createElementNS("http://www.w3.org/2000/svg",e):Ri.createElement(e,a?{is:a}:void 0);return"select"===e&&l&&null!=l.multiple&&n.setAttribute("multiple",l.multiple),n},createText:e=>Ri.createTextNode(e),createComment:e=>Ri.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>Ri.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},cloneNode(e){const t=e.cloneNode(!0);return"_value"in e&&(t._value=e._value),t},insertStaticContent(e,t,a,l,n,s){const i=a?a.previousSibling:t.lastChild;if(n&&(n===s||n.nextSibling))for(;t.insertBefore(n.cloneNode(!0),a),n!==s&&(n=n.nextSibling););else{Di.innerHTML=l?`<svg>${e}</svg>`:e;const n=Di.content;if(l){const e=n.firstChild;for(;e.firstChild;)n.appendChild(e.firstChild);n.removeChild(e)}t.insertBefore(n,a)}return[i?i.nextSibling:t.firstChild,a?a.previousSibling:t.lastChild]}},qi=/\s*!important$/;function Bi(e,t,a){if(fe(a))a.forEach((a=>Bi(e,t,a)));else if(null==a&&(a=""),t.startsWith("--"))e.setProperty(t,a);else{const l=function(e,t){const a=Hi[t];if(a)return a;let l=Ie(t);if("filter"!==l&&l in e)return Hi[t]=l;l=Ue(l);for(let a=0;a<Vi.length;a++){const n=Vi[a]+l;if(n in e)return Hi[t]=n}return t}(e,t);qi.test(a)?e.setProperty(Pe(l),a.replace(qi,""),"important"):e[l]=a}}const Vi=["Webkit","Moz","ms"],Hi={},Gi="http://www.w3.org/1999/xlink",[Wi,Ki]=(()=>{let e=Date.now,t=!1;if("undefined"!=typeof window){Date.now()>document.createEvent("Event").timeStamp&&(e=performance.now.bind(performance));const a=navigator.userAgent.match(/firefox\/(\d+)/i);t=!!(a&&Number(a[1])<=53)}return[e,t]})();let Ji=0;const Yi=Promise.resolve(),Zi=()=>{Ji=0};function Xi(e,t,a,l){e.addEventListener(t,a,l)}const Qi=/(?:Once|Passive|Capture)$/,eo=/^on[a-z]/;function to(e,t){const a=Jl(e);class l extends no{constructor(e){super(a,e,t)}}return l.def=a,l}const ao=e=>to(e,nr),lo="undefined"!=typeof HTMLElement?HTMLElement:class{};class no extends lo{constructor(e,t={},a){super(),this._def=e,this._props=t,this._instance=null,this._connected=!1,this._resolved=!1,this._numberProps=null,this.shadowRoot&&a?a(this._createVNode(),this.shadowRoot):this.attachShadow({mode:"open"})}connectedCallback(){this._connected=!0,this._instance||this._resolveDef()}disconnectedCallback(){this._connected=!1,Ja((()=>{this._connected||(lr(null,this.shadowRoot),this._instance=null)}))}_resolveDef(){if(this._resolved)return;this._resolved=!0;for(let e=0;e<this.attributes.length;e++)this._setAttr(this.attributes[e].name);new MutationObserver((e=>{for(const t of e)this._setAttr(t.attributeName)})).observe(this,{attributes:!0});const e=e=>{const{props:t,styles:a}=e,l=!fe(t),n=t?l?Object.keys(t):t:[];let s;if(l)for(const e in this._props){const a=t[e];(a===Number||a&&a.type===Number)&&(this._props[e]=Re(this._props[e]),(s||(s=Object.create(null)))[e]=!0)}this._numberProps=s;for(const e of Object.keys(this))"_"!==e[0]&&this._setProp(e,this[e],!0,!1);for(const e of n.map(Ie))Object.defineProperty(this,e,{get(){return this._getProp(e)},set(t){this._setProp(e,t)}});this._applyStyles(a),this._update()},t=this._def.__asyncLoader;t?t().then(e):e(this._def)}_setAttr(e){let t=this.getAttribute(e);this._numberProps&&this._numberProps[e]&&(t=Re(t)),this._setProp(Ie(e),t,!1)}_getProp(e){return this._props[e]}_setProp(e,t,a=!0,l=!0){t!==this._props[e]&&(this._props[e]=t,l&&this._instance&&this._update(),a&&(!0===t?this.setAttribute(Pe(e),""):"string"==typeof t||"number"==typeof t?this.setAttribute(Pe(e),t+""):t||this.removeAttribute(Pe(e))))}_update(){lr(this._createVNode(),this.shadowRoot)}_createVNode(){const e=Hs(this._def,ue({},this._props));return this._instance||(e.ce=e=>{this._instance=e,e.isCE=!0,e.emit=(e,...t)=>{this.dispatchEvent(new CustomEvent(e,{detail:t}))};let t=this;for(;t=t&&(t.parentNode||t.host);)if(t instanceof no){e.parent=t._instance;break}}),e}_applyStyles(e){e&&e.forEach((e=>{const t=document.createElement("style");t.textContent=e,this.shadowRoot.appendChild(t)}))}}function so(e="$style"){{const t=si();if(!t)return le;const a=t.type.__cssModules;if(!a)return le;return a[e]||le}}function io(e){const t=si();if(!t)return;const a=()=>oo(t.subTree,e(t.proxy));Ol(a),_n((()=>{const e=new MutationObserver(a);e.observe(t.subTree.el.parentNode,{childList:!0}),vn((()=>e.disconnect()))}))}function oo(e,t){if(128&e.shapeFlag){const a=e.suspense;e=a.activeBranch,a.pendingBranch&&!a.isHydrating&&a.effects.push((()=>{oo(a.activeBranch,t)}))}for(;e.component;)e=e.component.subTree;if(1&e.shapeFlag&&e.el)ro(e.el,t);else if(e.type===Ss)e.children.forEach((e=>oo(e,t)));else if(e.type===Es){let{el:a,anchor:l}=e;for(;a&&(ro(a,t),a!==l);)a=a.nextSibling}}function ro(e,t){if(1===e.nodeType){const a=e.style;for(const e in t)a.setProperty(`--${e}`,t[e])}}const co=(e,{slots:t})=>Oi(ql,mo(e),t);co.displayName="Transition";const uo={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},_o=co.props=ue({},ql.props,uo),po=(e,t=[])=>{fe(e)?e.forEach((e=>e(...t))):e&&e(...t)},fo=e=>!!e&&(fe(e)?e.some((e=>e.length>1)):e.length>1);function mo(e){const t={};for(const a in e)a in uo||(t[a]=e[a]);if(!1===e.css)return t;const{name:a="v",type:l,duration:n,enterFromClass:s=`${a}-enter-from`,enterActiveClass:i=`${a}-enter-active`,enterToClass:o=`${a}-enter-to`,appearFromClass:r=s,appearActiveClass:c=i,appearToClass:u=o,leaveFromClass:d=`${a}-leave-from`,leaveActiveClass:_=`${a}-leave-active`,leaveToClass:p=`${a}-leave-to`}=e,f=function(e){if(null==e)return null;if(we(e))return[vo(e.enter),vo(e.leave)];{const t=vo(e);return[t,t]}}(n),m=f&&f[0],v=f&&f[1],{onBeforeEnter:h,onEnter:g,onEnterCancelled:b,onLeave:y,onLeaveCancelled:w,onBeforeAppear:x=h,onAppear:k=g,onAppearCancelled:$=b}=t,S=(e,t,a)=>{go(e,t?u:o),go(e,t?c:i),a&&a()},N=(e,t)=>{e._isLeaving=!1,go(e,d),go(e,p),go(e,_),t&&t()},C=e=>(t,a)=>{const n=e?k:g,i=()=>S(t,e,a);po(n,[t,i]),bo((()=>{go(t,e?r:s),ho(t,e?u:o),fo(n)||wo(t,l,m,i)}))};return ue(t,{onBeforeEnter(e){po(h,[e]),ho(e,s),ho(e,i)},onBeforeAppear(e){po(x,[e]),ho(e,r),ho(e,c)},onEnter:C(!1),onAppear:C(!0),onLeave(e,t){e._isLeaving=!0;const a=()=>N(e,t);ho(e,d),So(),ho(e,_),bo((()=>{e._isLeaving&&(go(e,d),ho(e,p),fo(y)||wo(e,l,v,a))})),po(y,[e,a])},onEnterCancelled(e){S(e,!1),po(b,[e])},onAppearCancelled(e){S(e,!0),po($,[e])},onLeaveCancelled(e){N(e),po(w,[e])}})}function vo(e){return Re(e)}function ho(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.add(t))),(e._vtc||(e._vtc=new Set)).add(t)}function go(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.remove(t)));const{_vtc:a}=e;a&&(a.delete(t),a.size||(e._vtc=void 0))}function bo(e){requestAnimationFrame((()=>{requestAnimationFrame(e)}))}let yo=0;function wo(e,t,a,l){const n=e._endId=++yo,s=()=>{n===e._endId&&l()};if(a)return setTimeout(s,a);const{type:i,timeout:o,propCount:r}=xo(e,t);if(!i)return l();const c=i+"end";let u=0;const d=()=>{e.removeEventListener(c,_),s()},_=t=>{t.target===e&&++u>=r&&d()};setTimeout((()=>{u<r&&d()}),o+1),e.addEventListener(c,_)}function xo(e,t){const a=window.getComputedStyle(e),l=e=>(a[e]||"").split(", "),n=l("transitionDelay"),s=l("transitionDuration"),i=ko(n,s),o=l("animationDelay"),r=l("animationDuration"),c=ko(o,r);let u=null,d=0,_=0;return"transition"===t?i>0&&(u="transition",d=i,_=s.length):"animation"===t?c>0&&(u="animation",d=c,_=r.length):(d=Math.max(i,c),u=d>0?i>c?"transition":"animation":null,_=u?"transition"===u?s.length:r.length:0),{type:u,timeout:d,propCount:_,hasTransform:"transition"===u&&/\b(transform|all)(,|$)/.test(a.transitionProperty)}}function ko(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max(...t.map(((t,a)=>$o(t)+$o(e[a]))))}function $o(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function So(){return document.body.offsetHeight}const No=new WeakMap,Co=new WeakMap,Eo={name:"TransitionGroup",props:ue({},_o,{tag:String,moveClass:String}),setup(e,{slots:t}){const a=si(),l=Dl();let n,s;return fn((()=>{if(!n.length)return;const t=e.moveClass||`${e.name||"v"}-move`;if(!function(e,t,a){const l=e.cloneNode();e._vtc&&e._vtc.forEach((e=>{e.split(/\s+/).forEach((e=>e&&l.classList.remove(e)))})),a.split(/\s+/).forEach((e=>e&&l.classList.add(e))),l.style.display="none";const n=1===t.nodeType?t:t.parentNode;n.appendChild(l);const{hasTransform:s}=xo(l);return n.removeChild(l),s}(n[0].el,a.vnode.el,t))return;n.forEach(Ao),n.forEach(To);const l=n.filter(Io);So(),l.forEach((e=>{const a=e.el,l=a.style;ho(a,t),l.transform=l.webkitTransform=l.transitionDuration="";const n=a._moveCb=e=>{e&&e.target!==a||e&&!/transform$/.test(e.propertyName)||(a.removeEventListener("transitionend",n),a._moveCb=null,go(a,t))};a.addEventListener("transitionend",n)}))})),()=>{const i=ra(e),o=mo(i);let r=i.tag||Ss;n=s,s=t.default?Kl(t.default()):[];for(let e=0;e<s.length;e++){const t=s[e];null!=t.key&&Wl(t,Vl(t,o,l,a))}if(n)for(let e=0;e<n.length;e++){const t=n[e];Wl(t,Vl(t,o,l,a)),No.set(t,t.el.getBoundingClientRect())}return Hs(r,null,s)}}};function Ao(e){const t=e.el;t._moveCb&&t._moveCb(),t._enterCb&&t._enterCb()}function To(e){Co.set(e,e.el.getBoundingClientRect())}function Io(e){const t=No.get(e),a=Co.get(e),l=t.left-a.left,n=t.top-a.top;if(l||n){const t=e.el.style;return t.transform=t.webkitTransform=`translate(${l}px,${n}px)`,t.transitionDuration="0s",e}}const Oo=e=>{const t=e.props["onUpdate:modelValue"]||!1;return fe(t)?e=>Fe(t,e):t};function Po(e){e.target.composing=!0}function Uo(e){const t=e.target;t.composing&&(t.composing=!1,t.dispatchEvent(new Event("input")))}const jo={created(e,{modifiers:{lazy:t,trim:a,number:l}},n){e._assign=Oo(n);const s=l||n.props&&"number"===n.props.type;Xi(e,t?"change":"input",(t=>{if(t.target.composing)return;let l=e.value;a&&(l=l.trim()),s&&(l=Re(l)),e._assign(l)})),a&&Xi(e,"change",(()=>{e.value=e.value.trim()})),t||(Xi(e,"compositionstart",Po),Xi(e,"compositionend",Uo),Xi(e,"change",Uo))},mounted(e,{value:t}){e.value=null==t?"":t},beforeUpdate(e,{value:t,modifiers:{lazy:a,trim:l,number:n}},s){if(e._assign=Oo(s),e.composing)return;if(document.activeElement===e&&"range"!==e.type){if(a)return;if(l&&e.value.trim()===t)return;if((n||"number"===e.type)&&Re(e.value)===t)return}const i=null==t?"":t;e.value!==i&&(e.value=i)}},Mo={deep:!0,created(e,t,a){e._assign=Oo(a),Xi(e,"change",(()=>{const t=e._modelValue,a=zo(e),l=e.checked,n=e._assign;if(fe(t)){const e=ee(t,a),s=-1!==e;if(l&&!s)n(t.concat(a));else if(!l&&s){const a=[...t];a.splice(e,1),n(a)}}else if(ve(t)){const e=new Set(t);l?e.add(a):e.delete(a),n(e)}else n(qo(e,l))}))},mounted:Fo,beforeUpdate(e,t,a){e._assign=Oo(a),Fo(e,t,a)}};function Fo(e,{value:t,oldValue:a},l){e._modelValue=t,fe(t)?e.checked=ee(t,l.props.value)>-1:ve(t)?e.checked=t.has(l.props.value):t!==a&&(e.checked=Q(t,qo(e,!0)))}const Lo={created(e,{value:t},a){e.checked=Q(t,a.props.value),e._assign=Oo(a),Xi(e,"change",(()=>{e._assign(zo(e))}))},beforeUpdate(e,{value:t,oldValue:a},l){e._assign=Oo(l),t!==a&&(e.checked=Q(t,l.props.value))}},Ro={deep:!0,created(e,{value:t,modifiers:{number:a}},l){const n=ve(t);Xi(e,"change",(()=>{const t=Array.prototype.filter.call(e.options,(e=>e.selected)).map((e=>a?Re(zo(e)):zo(e)));e._assign(e.multiple?n?new Set(t):t:t[0])})),e._assign=Oo(l)},mounted(e,{value:t}){Do(e,t)},beforeUpdate(e,t,a){e._assign=Oo(a)},updated(e,{value:t}){Do(e,t)}};function Do(e,t){const a=e.multiple;if(!a||fe(t)||ve(t)){for(let l=0,n=e.options.length;l<n;l++){const n=e.options[l],s=zo(n);if(a)n.selected=fe(t)?ee(t,s)>-1:t.has(s);else if(Q(zo(n),t))return void(e.selectedIndex!==l&&(e.selectedIndex=l))}a||-1===e.selectedIndex||(e.selectedIndex=-1)}}function zo(e){return"_value"in e?e._value:e.value}function qo(e,t){const a=t?"_trueValue":"_falseValue";return a in e?e[a]:t}const Bo={created(e,t,a){Vo(e,t,a,null,"created")},mounted(e,t,a){Vo(e,t,a,null,"mounted")},beforeUpdate(e,t,a,l){Vo(e,t,a,l,"beforeUpdate")},updated(e,t,a,l){Vo(e,t,a,l,"updated")}};function Vo(e,t,a,l,n){const s=function(e,t){switch(e){case"SELECT":return Ro;case"TEXTAREA":return jo;default:switch(t){case"checkbox":return Mo;case"radio":return Lo;default:return jo}}}(e.tagName,a.props&&a.props.type)[n];s&&s(e,t,a,l)}const Ho=["ctrl","shift","alt","meta"],Go={stop:e=>e.stopPropagation(),prevent:e=>e.preventDefault(),self:e=>e.target!==e.currentTarget,ctrl:e=>!e.ctrlKey,shift:e=>!e.shiftKey,alt:e=>!e.altKey,meta:e=>!e.metaKey,left:e=>"button"in e&&0!==e.button,middle:e=>"button"in e&&1!==e.button,right:e=>"button"in e&&2!==e.button,exact:(e,t)=>Ho.some((a=>e[`${a}Key`]&&!t.includes(a)))},Wo=(e,t)=>(a,...l)=>{for(let e=0;e<t.length;e++){const l=Go[t[e]];if(l&&l(a,t))return}return e(a,...l)},Ko={esc:"escape",space:" ",up:"arrow-up",left:"arrow-left",right:"arrow-right",down:"arrow-down",delete:"backspace"},Jo=(e,t)=>a=>{if(!("key"in a))return;const l=Pe(a.key);return t.some((e=>e===l||Ko[e]===l))?e(a):void 0},Yo={beforeMount(e,{value:t},{transition:a}){e._vod="none"===e.style.display?"":e.style.display,a&&t?a.beforeEnter(e):Zo(e,t)},mounted(e,{value:t},{transition:a}){a&&t&&a.enter(e)},updated(e,{value:t,oldValue:a},{transition:l}){!t!=!a&&(l?t?(l.beforeEnter(e),Zo(e,!0),l.enter(e)):l.leave(e,(()=>{Zo(e,!1)})):Zo(e,t))},beforeUnmount(e,{value:t}){Zo(e,t)}};function Zo(e,t){e.style.display=t?e._vod:"none"}const Xo=ue({patchProp:(e,t,a,l,n=!1,s,i,o,r)=>{"class"===t?function(e,t,a){const l=e._vtc;l&&(t=(t?[t,...l]:[...l]).join(" ")),null==t?e.removeAttribute("class"):a?e.setAttribute("class",t):e.className=t}(e,l,n):"style"===t?function(e,t,a){const l=e.style,n=be(a);if(a&&!n){for(const e in a)Bi(l,e,a[e]);if(t&&!be(t))for(const e in t)null==a[e]&&Bi(l,e,"")}else{const s=l.display;n?t!==a&&(l.cssText=a):t&&e.removeAttribute("style"),"_vod"in e&&(l.display=s)}}(e,a,l):re(t)?ce(t)||function(e,t,a,l,n=null){const s=e._vei||(e._vei={}),i=s[t];if(l&&i)i.value=l;else{const[a,o]=function(e){let t;if(Qi.test(e)){let a;for(t={};a=e.match(Qi);)e=e.slice(0,e.length-a[0].length),t[a[0].toLowerCase()]=!0}return[Pe(e.slice(2)),t]}(t);if(l){const i=s[t]=function(e,t){const a=e=>{const l=e.timeStamp||Wi();(Ki||l>=a.attached-1)&&Ua(function(e,t){if(fe(t)){const a=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{a.call(e),e._stopped=!0},t.map((e=>t=>!t._stopped&&e&&e(t)))}return t}(e,a.value),t,5,[e])};return a.value=e,a.attached=Ji||(Yi.then(Zi),Ji=Wi()),a}(l,n);Xi(e,a,i,o)}else i&&(function(e,t,a,l){e.removeEventListener(t,a,l)}(e,a,i,o),s[t]=void 0)}}(e,t,0,l,i):("."===t[0]?(t=t.slice(1),1):"^"===t[0]?(t=t.slice(1),0):function(e,t,a,l){return l?"innerHTML"===t||"textContent"===t||!!(t in e&&eo.test(t)&&ge(a)):"spellcheck"!==t&&"draggable"!==t&&"translate"!==t&&("form"!==t&&(("list"!==t||"INPUT"!==e.tagName)&&(("type"!==t||"TEXTAREA"!==e.tagName)&&((!eo.test(t)||!be(a))&&t in e))))}(e,t,l,n))?function(e,t,a,l,n,s,i){if("innerHTML"===t||"textContent"===t)return l&&i(l,n,s),void(e[t]=null==a?"":a);if("value"===t&&"PROGRESS"!==e.tagName&&!e.tagName.includes("-")){e._value=a;const l=null==a?"":a;return e.value===l&&"OPTION"!==e.tagName||(e.value=l),void(null==a&&e.removeAttribute(t))}let o=!1;if(""===a||null==a){const l=typeof e[t];"boolean"===l?a=B(a):null==a&&"string"===l?(a="",o=!0):"number"===l&&(a=0,o=!0)}try{e[t]=a}catch(e){}o&&e.removeAttribute(t)}(e,t,l,s,i,o,r):("true-value"===t?e._trueValue=l:"false-value"===t&&(e._falseValue=l),function(e,t,a,l,n){if(l&&t.startsWith("xlink:"))null==a?e.removeAttributeNS(Gi,t.slice(6,t.length)):e.setAttributeNS(Gi,t,a);else{const l=q(t);null==a||l&&!B(a)?e.removeAttribute(t):e.setAttribute(t,l?"":a)}}(e,t,l,n))}},zi);let Qo,er=!1;function tr(){return Qo||(Qo=ms(Xo))}function ar(){return Qo=er?Qo:vs(Xo),er=!0,Qo}const lr=(...e)=>{tr().render(...e)},nr=(...e)=>{ar().hydrate(...e)},sr=(...e)=>{const t=tr().createApp(...e),{mount:a}=t;return t.mount=e=>{const l=or(e);if(!l)return;const n=t._component;ge(n)||n.render||n.template||(n.template=l.innerHTML),l.innerHTML="";const s=a(l,!1,l instanceof SVGElement);return l instanceof Element&&(l.removeAttribute("v-cloak"),l.setAttribute("data-v-app","")),s},t},ir=(...e)=>{const t=ar().createApp(...e),{mount:a}=t;return t.mount=e=>{const t=or(e);if(t)return a(t,!0,t instanceof SVGElement)},t};function or(e){return be(e)?document.querySelector(e):e}const rr=se;var cr=Object.freeze({__proto__:null,render:lr,hydrate:nr,createApp:sr,createSSRApp:ir,initDirectivesForSSR:rr,defineCustomElement:to,defineSSRCustomElement:ao,VueElement:no,useCssModule:so,useCssVars:io,Transition:co,TransitionGroup:Eo,vModelText:jo,vModelCheckbox:Mo,vModelRadio:Lo,vModelSelect:Ro,vModelDynamic:Bo,withModifiers:Wo,withKeys:Jo,vShow:Yo,reactive:Qt,ref:ma,readonly:ta,unref:ya,proxyRefs:xa,isRef:fa,toRef:Ca,toRefs:Sa,isProxy:oa,isReactive:na,isReadonly:sa,isShallow:ia,customRef:$a,triggerRef:ba,shallowRef:va,shallowReactive:ea,shallowReadonly:aa,markRaw:ca,toRaw:ra,effect:nt,stop:st,ReactiveEffect:at,effectScope:Be,EffectScope:qe,getCurrentScope:He,onScopeDispose:Ge,computed:wi,watch:jl,watchEffect:Il,watchPostEffect:Ol,watchSyncEffect:Pl,onBeforeMount:dn,onMounted:_n,onBeforeUpdate:pn,onUpdated:fn,onBeforeUnmount:mn,onUnmounted:vn,onActivated:an,onDeactivated:ln,onRenderTracked:bn,onRenderTriggered:gn,onErrorCaptured:yn,onServerPrefetch:hn,provide:Al,inject:Tl,nextTick:Ja,defineComponent:Jl,defineAsyncComponent:Zl,useAttrs:Ci,useSlots:Ni,defineProps:xi,defineEmits:ki,defineExpose:$i,withDefaults:Si,mergeDefaults:Ai,createPropsRestProxy:Ti,withAsyncContext:Ii,getCurrentInstance:si,h:Oi,createVNode:Hs,cloneVNode:Ws,mergeProps:ei,isVNode:Ls,Fragment:Ss,Text:Ns,Comment:Cs,Static:Es,Teleport:$s,Suspense:kl,KeepAlive:en,BaseTransition:ql,withDirectives:wn,useSSRContext:Ui,ssrContextKey:Pi,createRenderer:ms,createHydrationRenderer:vs,queuePostFlushCb:Qa,warn:Ta,handleError:ja,callWithErrorHandling:Pa,callWithAsyncErrorHandling:Ua,resolveComponent:kn,resolveDirective:Nn,resolveDynamicComponent:Sn,registerRuntimeCompiler:pi,isRuntimeOnly:fi,useTransitionState:Dl,resolveTransitionHooks:Vl,setTransitionHooks:Wl,getTransitionRawChildren:Kl,initCustomFormatter:ji,get devtools(){return nl},setDevtoolsHook:il,withCtx:vl,pushScopeId:pl,popScopeId:fl,withScopeId:ml,renderList:An,toHandlers:Pn,renderSlot:In,createSlots:Tn,withMemo:Mi,isMemoSame:Fi,openBlock:Is,createBlock:Fs,setBlockTracking:Us,createTextVNode:Ks,createCommentVNode:Ys,createStaticVNode:Js,createElementVNode:Vs,createElementBlock:Ms,guardReactiveProps:Gs,toDisplayString:te,camelize:Ie,capitalize:Ue,toHandlerKey:je,normalizeProps:J,normalizeClass:K,normalizeStyle:V,transformVNodeArgs:Ds,version:Li,ssrUtils:null,resolveFilter:null,compatUtils:null});function ur(e){throw e}function dr(e){}function _r(e,t,a,l){const n=new SyntaxError(String(e));return n.code=e,n.loc=t,n}const pr=Symbol(""),fr=Symbol(""),mr=Symbol(""),vr=Symbol(""),hr=Symbol(""),gr=Symbol(""),br=Symbol(""),yr=Symbol(""),wr=Symbol(""),xr=Symbol(""),kr=Symbol(""),$r=Symbol(""),Sr=Symbol(""),Nr=Symbol(""),Cr=Symbol(""),Er=Symbol(""),Ar=Symbol(""),Tr=Symbol(""),Ir=Symbol(""),Or=Symbol(""),Pr=Symbol(""),Ur=Symbol(""),jr=Symbol(""),Mr=Symbol(""),Fr=Symbol(""),Lr=Symbol(""),Rr=Symbol(""),Dr=Symbol(""),zr=Symbol(""),qr=Symbol(""),Br=Symbol(""),Vr=Symbol(""),Hr=Symbol(""),Gr=Symbol(""),Wr=Symbol(""),Kr=Symbol(""),Jr=Symbol(""),Yr=Symbol(""),Zr=Symbol(""),Xr={[pr]:"Fragment",[fr]:"Teleport",[mr]:"Suspense",[vr]:"KeepAlive",[hr]:"BaseTransition",[gr]:"openBlock",[br]:"createBlock",[yr]:"createElementBlock",[wr]:"createVNode",[xr]:"createElementVNode",[kr]:"createCommentVNode",[$r]:"createTextVNode",[Sr]:"createStaticVNode",[Nr]:"resolveComponent",[Cr]:"resolveDynamicComponent",[Er]:"resolveDirective",[Ar]:"resolveFilter",[Tr]:"withDirectives",[Ir]:"renderList",[Or]:"renderSlot",[Pr]:"createSlots",[Ur]:"toDisplayString",[jr]:"mergeProps",[Mr]:"normalizeClass",[Fr]:"normalizeStyle",[Lr]:"normalizeProps",[Rr]:"guardReactiveProps",[Dr]:"toHandlers",[zr]:"camelize",[qr]:"capitalize",[Br]:"toHandlerKey",[Vr]:"setBlockTracking",[Hr]:"pushScopeId",[Gr]:"popScopeId",[Wr]:"withCtx",[Kr]:"unref",[Jr]:"isRef",[Yr]:"withMemo",[Zr]:"isMemoSame"},Qr={source:"",start:{line:1,column:1,offset:0},end:{line:1,column:1,offset:0}};function ec(e,t,a,l,n,s,i,o=!1,r=!1,c=!1,u=Qr){return e&&(o?(e.helper(gr),e.helper(Ac(e.inSSR,c))):e.helper(Ec(e.inSSR,c)),i&&e.helper(Tr)),{type:13,tag:t,props:a,children:l,patchFlag:n,dynamicProps:s,directives:i,isBlock:o,disableTracking:r,isComponent:c,loc:u}}function tc(e,t=Qr){return{type:17,loc:t,elements:e}}function ac(e,t=Qr){return{type:15,loc:t,properties:e}}function lc(e,t){return{type:16,loc:Qr,key:be(e)?nc(e,!0):e,value:t}}function nc(e,t=!1,a=Qr,l=0){return{type:4,loc:a,content:e,isStatic:t,constType:t?3:l}}function sc(e,t=Qr){return{type:8,loc:t,children:e}}function ic(e,t=[],a=Qr){return{type:14,loc:a,callee:e,arguments:t}}function oc(e,t,a=!1,l=!1,n=Qr){return{type:18,params:e,returns:t,newline:a,isSlot:l,loc:n}}function rc(e,t,a,l=!0){return{type:19,test:e,consequent:t,alternate:a,newline:l,loc:Qr}}const cc=e=>4===e.type&&e.isStatic,uc=(e,t)=>e===t||e===Pe(t);function dc(e){return uc(e,"Teleport")?fr:uc(e,"Suspense")?mr:uc(e,"KeepAlive")?vr:uc(e,"BaseTransition")?hr:void 0}const _c=/^\d|[^\$\w]/,pc=e=>!_c.test(e),fc=/[A-Za-z_$\xA0-\uFFFF]/,mc=/[\.\?\w$\xA0-\uFFFF]/,vc=/\s+[.[]\s*|\s*[.[]\s+/g,hc=e=>{e=e.trim().replace(vc,(e=>e.trim()));let t=0,a=[],l=0,n=0,s=null;for(let i=0;i<e.length;i++){const o=e.charAt(i);switch(t){case 0:if("["===o)a.push(t),t=1,l++;else if("("===o)a.push(t),t=2,n++;else if(!(0===i?fc:mc).test(o))return!1;break;case 1:"'"===o||'"'===o||"`"===o?(a.push(t),t=3,s=o):"["===o?l++:"]"===o&&(--l||(t=a.pop()));break;case 2:if("'"===o||'"'===o||"`"===o)a.push(t),t=3,s=o;else if("("===o)n++;else if(")"===o){if(i===e.length-1)return!1;--n||(t=a.pop())}break;case 3:o===s&&(t=a.pop(),s=null)}}return!l&&!n};function gc(e,t,a){const l={source:e.source.slice(t,t+a),start:bc(e.start,e.source,t),end:e.end};return null!=a&&(l.end=bc(e.start,e.source,t+a)),l}function bc(e,t,a=t.length){return yc(ue({},e),t,a)}function yc(e,t,a=t.length){let l=0,n=-1;for(let e=0;e<a;e++)10===t.charCodeAt(e)&&(l++,n=e);return e.offset+=a,e.line+=l,e.column=-1===n?e.column+a:a-n,e}function wc(e,t,a=!1){for(let l=0;l<e.props.length;l++){const n=e.props[l];if(7===n.type&&(a||n.exp)&&(be(t)?n.name===t:t.test(n.name)))return n}}function xc(e,t,a=!1,l=!1){for(let n=0;n<e.props.length;n++){const s=e.props[n];if(6===s.type){if(a)continue;if(s.name===t&&(s.value||l))return s}else if("bind"===s.name&&(s.exp||l)&&kc(s.arg,t))return s}}function kc(e,t){return!(!e||!cc(e)||e.content!==t)}function $c(e){return 5===e.type||2===e.type}function Sc(e){return 7===e.type&&"slot"===e.name}function Nc(e){return 1===e.type&&3===e.tagType}function Cc(e){return 1===e.type&&2===e.tagType}function Ec(e,t){return e||t?wr:xr}function Ac(e,t){return e||t?br:yr}const Tc=new Set([Lr,Rr]);function Ic(e,t=[]){if(e&&!be(e)&&14===e.type){const a=e.callee;if(!be(a)&&Tc.has(a))return Ic(e.arguments[0],t.concat(e))}return[e,t]}function Oc(e,t,a){let l,n,s=13===e.type?e.props:e.arguments[2],i=[];if(s&&!be(s)&&14===s.type){const e=Ic(s);s=e[0],i=e[1],n=i[i.length-1]}if(null==s||be(s))l=ac([t]);else if(14===s.type){const e=s.arguments[0];be(e)||15!==e.type?s.callee===Dr?l=ic(a.helper(jr),[ac([t]),s]):s.arguments.unshift(ac([t])):e.properties.unshift(t),!l&&(l=s)}else if(15===s.type){let e=!1;if(4===t.key.type){const a=t.key.content;e=s.properties.some((e=>4===e.key.type&&e.key.content===a))}e||s.properties.unshift(t),l=s}else l=ic(a.helper(jr),[ac([t]),s]),n&&n.callee===Rr&&(n=i[i.length-2]);13===e.type?n?n.arguments[0]=l:e.props=l:n?n.arguments[0]=l:e.arguments[2]=l}function Pc(e,t){return`_${t}_${e.replace(/[^\w]/g,((t,a)=>"-"===t?"_":e.charCodeAt(a).toString()))}`}function Uc(e,{helper:t,removeHelper:a,inSSR:l}){e.isBlock||(e.isBlock=!0,a(Ec(l,e.isComponent)),t(gr),t(Ac(l,e.isComponent)))}const jc=/&(gt|lt|amp|apos|quot);/g,Mc={gt:">",lt:"<",amp:"&",apos:"'",quot:'"'},Fc={delimiters:["{{","}}"],getNamespace:()=>0,getTextMode:()=>0,isVoidTag:ie,isPreTag:ie,isCustomElement:ie,decodeEntities:e=>e.replace(jc,((e,t)=>Mc[t])),onError:ur,onWarn:dr,comments:!1};function Lc(e,t,a){const l=Qc(a),n=l?l.ns:0,s=[];for(;!nu(e,t,a);){const i=e.source;let o;if(0===t||1===t)if(!e.inVPre&&eu(i,e.options.delimiters[0]))o=Kc(e,t);else if(0===t&&"<"===i[0])if(1===i.length);else if("!"===i[1])o=eu(i,"\x3c!--")?zc(e):eu(i,"<!DOCTYPE")?qc(e):eu(i,"<![CDATA[")&&0!==n?Dc(e,a):qc(e);else if("/"===i[1])if(2===i.length);else{if(">"===i[2]){tu(e,3);continue}if(/[a-z]/i.test(i[2])){Hc(e,1,l);continue}o=qc(e)}else/[a-z]/i.test(i[1])?o=Bc(e,a):"?"===i[1]&&(o=qc(e));if(o||(o=Jc(e,t)),fe(o))for(let e=0;e<o.length;e++)Rc(s,o[e]);else Rc(s,o)}let i=!1;if(2!==t&&1!==t){const t="preserve"!==e.options.whitespace;for(let a=0;a<s.length;a++){const l=s[a];if(e.inPre||2!==l.type)3!==l.type||e.options.comments||(i=!0,s[a]=null);else if(/[^\t\r\n\f ]/.test(l.content))t&&(l.content=l.content.replace(/[\t\r\n\f ]+/g," "));else{const e=s[a-1],n=s[a+1];!e||!n||t&&(3===e.type||3===n.type||1===e.type&&1===n.type&&/[\r\n]/.test(l.content))?(i=!0,s[a]=null):l.content=" "}}if(e.inPre&&l&&e.options.isPreTag(l.tag)){const e=s[0];e&&2===e.type&&(e.content=e.content.replace(/^\r?\n/,""))}}return i?s.filter(Boolean):s}function Rc(e,t){if(2===t.type){const a=Qc(e);if(a&&2===a.type&&a.loc.end.offset===t.loc.start.offset)return a.content+=t.content,a.loc.end=t.loc.end,void(a.loc.source+=t.loc.source)}e.push(t)}function Dc(e,t){tu(e,9);const a=Lc(e,3,t);return 0===e.source.length||tu(e,3),a}function zc(e){const t=Zc(e);let a;const l=/--(\!)?>/.exec(e.source);if(l){a=e.source.slice(4,l.index);const t=e.source.slice(0,l.index);let n=1,s=0;for(;-1!==(s=t.indexOf("\x3c!--",n));)tu(e,s-n+1),n=s+1;tu(e,l.index+l[0].length-n+1)}else a=e.source.slice(4),tu(e,e.source.length);return{type:3,content:a,loc:Xc(e,t)}}function qc(e){const t=Zc(e),a="?"===e.source[1]?1:2;let l;const n=e.source.indexOf(">");return-1===n?(l=e.source.slice(a),tu(e,e.source.length)):(l=e.source.slice(a,n),tu(e,n+1)),{type:3,content:l,loc:Xc(e,t)}}function Bc(e,t){const a=e.inPre,l=e.inVPre,n=Qc(t),s=Hc(e,0,n),i=e.inPre&&!a,o=e.inVPre&&!l;if(s.isSelfClosing||e.options.isVoidTag(s.tag))return i&&(e.inPre=!1),o&&(e.inVPre=!1),s;t.push(s);const r=e.options.getTextMode(s,n),c=Lc(e,r,t);if(t.pop(),s.children=c,su(e.source,s.tag))Hc(e,1,n);else if(0===e.source.length&&"script"===s.tag.toLowerCase()){const e=c[0];e&&eu(e.loc.source,"\x3c!--")}return s.loc=Xc(e,s.loc.start),i&&(e.inPre=!1),o&&(e.inVPre=!1),s}const Vc=D("if,else,else-if,for,slot");function Hc(e,t,a){const l=Zc(e),n=/^<\/?([a-z][^\t\r\n\f />]*)/i.exec(e.source),s=n[1],i=e.options.getNamespace(s,a);tu(e,n[0].length),au(e);const o=Zc(e),r=e.source;e.options.isPreTag(s)&&(e.inPre=!0);let c=Gc(e,t);0===t&&!e.inVPre&&c.some((e=>7===e.type&&"pre"===e.name))&&(e.inVPre=!0,ue(e,o),e.source=r,c=Gc(e,t).filter((e=>"v-pre"!==e.name)));let u=!1;if(0===e.source.length||(u=eu(e.source,"/>"),tu(e,u?2:1)),1===t)return;let d=0;return e.inVPre||("slot"===s?d=2:"template"===s?c.some((e=>7===e.type&&Vc(e.name)))&&(d=3):function(e,t,a){const l=a.options;if(l.isCustomElement(e))return!1;if("component"===e||/^[A-Z]/.test(e)||dc(e)||l.isBuiltInComponent&&l.isBuiltInComponent(e)||l.isNativeTag&&!l.isNativeTag(e))return!0;for(let e=0;e<t.length;e++){const a=t[e];if(6===a.type){if("is"===a.name&&a.value&&a.value.content.startsWith("vue:"))return!0}else{if("is"===a.name)return!0;"bind"===a.name&&kc(a.arg,"is")}}}(s,c,e)&&(d=1)),{type:1,ns:i,tag:s,tagType:d,props:c,isSelfClosing:u,children:[],loc:Xc(e,l),codegenNode:void 0}}function Gc(e,t){const a=[],l=new Set;for(;e.source.length>0&&!eu(e.source,">")&&!eu(e.source,"/>");){if(eu(e.source,"/")){tu(e,1),au(e);continue}const n=Wc(e,l);6===n.type&&n.value&&"class"===n.name&&(n.value.content=n.value.content.replace(/\s+/g," ").trim()),0===t&&a.push(n),/^[^\t\r\n\f />]/.test(e.source),au(e)}return a}function Wc(e,t){const a=Zc(e),l=/^[^\t\r\n\f />][^\t\r\n\f />=]*/.exec(e.source)[0];t.has(l),t.add(l);{const e=/["'<]/g;for(;e.exec(l););}let n;tu(e,l.length),/^[\t\r\n\f ]*=/.test(e.source)&&(au(e),tu(e,1),au(e),n=function(e){const t=Zc(e);let a;const l=e.source[0],n='"'===l||"'"===l;if(n){tu(e,1);const t=e.source.indexOf(l);-1===t?a=Yc(e,e.source.length,4):(a=Yc(e,t,4),tu(e,1))}else{const t=/^[^\t\r\n\f >]+/.exec(e.source);if(!t)return;const l=/["'<=`]/g;for(;l.exec(t[0]););a=Yc(e,t[0].length,4)}return{content:a,isQuoted:n,loc:Xc(e,t)}}(e));const s=Xc(e,a);if(!e.inVPre&&/^(v-[A-Za-z0-9-]|:|\.|@|#)/.test(l)){const t=/(?:^v-([a-z0-9-]+))?(?:(?::|^\.|^@|^#)(\[[^\]]+\]|[^\.]+))?(.+)?$/i.exec(l);let i,o=eu(l,"."),r=t[1]||(o||eu(l,":")?"bind":eu(l,"@")?"on":"slot");if(t[2]){const n="slot"===r,s=l.lastIndexOf(t[2]),o=Xc(e,lu(e,a,s),lu(e,a,s+t[2].length+(n&&t[3]||"").length));let c=t[2],u=!0;c.startsWith("[")?(u=!1,c=c.endsWith("]")?c.slice(1,c.length-1):c.slice(1)):n&&(c+=t[3]||""),i={type:4,content:c,isStatic:u,constType:u?3:0,loc:o}}if(n&&n.isQuoted){const e=n.loc;e.start.offset++,e.start.column++,e.end=bc(e.start,n.content),e.source=e.source.slice(1,-1)}const c=t[3]?t[3].slice(1).split("."):[];return o&&c.push("prop"),{type:7,name:r,exp:n&&{type:4,content:n.content,isStatic:!1,constType:0,loc:n.loc},arg:i,modifiers:c,loc:s}}return!e.inVPre&&eu(l,"v-"),{type:6,name:l,value:n&&{type:2,content:n.content,loc:n.loc},loc:s}}function Kc(e,t){const[a,l]=e.options.delimiters,n=e.source.indexOf(l,a.length);if(-1===n)return;const s=Zc(e);tu(e,a.length);const i=Zc(e),o=Zc(e),r=n-a.length,c=e.source.slice(0,r),u=Yc(e,r,t),d=u.trim(),_=u.indexOf(d);return _>0&&yc(i,c,_),yc(o,c,r-(u.length-d.length-_)),tu(e,l.length),{type:5,content:{type:4,isStatic:!1,constType:0,content:d,loc:Xc(e,i,o)},loc:Xc(e,s)}}function Jc(e,t){const a=3===t?["]]>"]:["<",e.options.delimiters[0]];let l=e.source.length;for(let t=0;t<a.length;t++){const n=e.source.indexOf(a[t],1);-1!==n&&l>n&&(l=n)}const n=Zc(e);return{type:2,content:Yc(e,l,t),loc:Xc(e,n)}}function Yc(e,t,a){const l=e.source.slice(0,t);return tu(e,t),2!==a&&3!==a&&l.includes("&")?e.options.decodeEntities(l,4===a):l}function Zc(e){const{column:t,line:a,offset:l}=e;return{column:t,line:a,offset:l}}function Xc(e,t,a){return{start:t,end:a=a||Zc(e),source:e.originalSource.slice(t.offset,a.offset)}}function Qc(e){return e[e.length-1]}function eu(e,t){return e.startsWith(t)}function tu(e,t){const{source:a}=e;yc(e,a,t),e.source=a.slice(t)}function au(e){const t=/^[\t\r\n\f ]+/.exec(e.source);t&&tu(e,t[0].length)}function lu(e,t,a){return bc(t,e.originalSource.slice(t.offset,a),a)}function nu(e,t,a){const l=e.source;switch(t){case 0:if(eu(l,"</"))for(let e=a.length-1;e>=0;--e)if(su(l,a[e].tag))return!0;break;case 1:case 2:{const e=Qc(a);if(e&&su(l,e.tag))return!0;break}case 3:if(eu(l,"]]>"))return!0}return!l}function su(e,t){return eu(e,"</")&&e.slice(2,2+t.length).toLowerCase()===t.toLowerCase()&&/[\t\r\n\f />]/.test(e[2+t.length]||">")}function iu(e,t){ru(e,t,ou(e,e.children[0]))}function ou(e,t){const{children:a}=e;return 1===a.length&&1===t.type&&!Cc(t)}function ru(e,t,a=!1){const{children:l}=e,n=l.length;let s=0;for(let e=0;e<l.length;e++){const n=l[e];if(1===n.type&&0===n.tagType){const e=a?0:cu(n,t);if(e>0){if(e>=2){n.codegenNode.patchFlag="-1",n.codegenNode=t.hoist(n.codegenNode),s++;continue}}else{const e=n.codegenNode;if(13===e.type){const a=fu(e);if((!a||512===a||1===a)&&_u(n,t)>=2){const a=pu(n);a&&(e.props=t.hoist(a))}e.dynamicProps&&(e.dynamicProps=t.hoist(e.dynamicProps))}}}else 12===n.type&&cu(n.content,t)>=2&&(n.codegenNode=t.hoist(n.codegenNode),s++);if(1===n.type){const e=1===n.tagType;e&&t.scopes.vSlot++,ru(n,t),e&&t.scopes.vSlot--}else if(11===n.type)ru(n,t,1===n.children.length);else if(9===n.type)for(let e=0;e<n.branches.length;e++)ru(n.branches[e],t,1===n.branches[e].children.length)}s&&t.transformHoist&&t.transformHoist(l,t,e),s&&s===n&&1===e.type&&0===e.tagType&&e.codegenNode&&13===e.codegenNode.type&&fe(e.codegenNode.children)&&(e.codegenNode.children=t.hoist(tc(e.codegenNode.children)))}function cu(e,t){const{constantCache:a}=t;switch(e.type){case 1:if(0!==e.tagType)return 0;const l=a.get(e);if(void 0!==l)return l;const n=e.codegenNode;if(13!==n.type)return 0;if(n.isBlock&&"svg"!==e.tag&&"foreignObject"!==e.tag)return 0;if(fu(n))return a.set(e,0),0;{let l=3;const s=_u(e,t);if(0===s)return a.set(e,0),0;s<l&&(l=s);for(let n=0;n<e.children.length;n++){const s=cu(e.children[n],t);if(0===s)return a.set(e,0),0;s<l&&(l=s)}if(l>1)for(let n=0;n<e.props.length;n++){const s=e.props[n];if(7===s.type&&"bind"===s.name&&s.exp){const n=cu(s.exp,t);if(0===n)return a.set(e,0),0;n<l&&(l=n)}}if(n.isBlock){for(let t=0;t<e.props.length;t++)if(7===e.props[t].type)return a.set(e,0),0;t.removeHelper(gr),t.removeHelper(Ac(t.inSSR,n.isComponent)),n.isBlock=!1,t.helper(Ec(t.inSSR,n.isComponent))}return a.set(e,l),l}case 2:case 3:return 3;case 9:case 11:case 10:default:return 0;case 5:case 12:return cu(e.content,t);case 4:return e.constType;case 8:let s=3;for(let a=0;a<e.children.length;a++){const l=e.children[a];if(be(l)||ye(l))continue;const n=cu(l,t);if(0===n)return 0;n<s&&(s=n)}return s}}const uu=new Set([Mr,Fr,Lr,Rr]);function du(e,t){if(14===e.type&&!be(e.callee)&&uu.has(e.callee)){const a=e.arguments[0];if(4===a.type)return cu(a,t);if(14===a.type)return du(a,t)}return 0}function _u(e,t){let a=3;const l=pu(e);if(l&&15===l.type){const{properties:e}=l;for(let l=0;l<e.length;l++){const{key:n,value:s}=e[l],i=cu(n,t);if(0===i)return i;let o;if(i<a&&(a=i),o=4===s.type?cu(s,t):14===s.type?du(s,t):0,0===o)return o;o<a&&(a=o)}}return a}function pu(e){const t=e.codegenNode;if(13===t.type)return t.props}function fu(e){const t=e.patchFlag;return t?parseInt(t,10):void 0}function mu(e,t){const a=function(e,{filename:t="",prefixIdentifiers:a=!1,hoistStatic:l=!1,cacheHandlers:n=!1,nodeTransforms:s=[],directiveTransforms:i={},transformHoist:o=null,isBuiltInComponent:r=se,isCustomElement:c=se,expressionPlugins:u=[],scopeId:d=null,slotted:_=!0,ssr:p=!1,inSSR:f=!1,ssrCssVars:m="",bindingMetadata:v=le,inline:h=!1,isTS:g=!1,onError:b=ur,onWarn:y=dr,compatConfig:w}){const x=t.replace(/\?.*$/,"").match(/([^/\\]+)\.\w+$/),k={selfName:x&&Ue(Ie(x[1])),prefixIdentifiers:a,hoistStatic:l,cacheHandlers:n,nodeTransforms:s,directiveTransforms:i,transformHoist:o,isBuiltInComponent:r,isCustomElement:c,expressionPlugins:u,scopeId:d,slotted:_,ssr:p,inSSR:f,ssrCssVars:m,bindingMetadata:v,inline:h,isTS:g,onError:b,onWarn:y,compatConfig:w,root:e,helpers:new Map,components:new Set,directives:new Set,hoists:[],imports:[],constantCache:new Map,temps:0,cached:0,identifiers:Object.create(null),scopes:{vFor:0,vSlot:0,vPre:0,vOnce:0},parent:null,currentNode:e,childIndex:0,inVOnce:!1,helper(e){const t=k.helpers.get(e)||0;return k.helpers.set(e,t+1),e},removeHelper(e){const t=k.helpers.get(e);if(t){const a=t-1;a?k.helpers.set(e,a):k.helpers.delete(e)}},helperString:e=>`_${Xr[k.helper(e)]}`,replaceNode(e){k.parent.children[k.childIndex]=k.currentNode=e},removeNode(e){const t=e?k.parent.children.indexOf(e):k.currentNode?k.childIndex:-1;e&&e!==k.currentNode?k.childIndex>t&&(k.childIndex--,k.onNodeRemoved()):(k.currentNode=null,k.onNodeRemoved()),k.parent.children.splice(t,1)},onNodeRemoved:()=>{},addIdentifiers(e){},removeIdentifiers(e){},hoist(e){be(e)&&(e=nc(e)),k.hoists.push(e);const t=nc(`_hoisted_${k.hoists.length}`,!1,e.loc,2);return t.hoisted=e,t},cache:(e,t=!1)=>function(e,t,a=!1){return{type:20,index:e,value:t,isVNode:a,loc:Qr}}(k.cached++,e,t)};return k}(e,t);vu(e,a),t.hoistStatic&&iu(e,a),t.ssr||function(e,t){const{helper:a}=t,{children:l}=e;if(1===l.length){const a=l[0];if(ou(e,a)&&a.codegenNode){const l=a.codegenNode;13===l.type&&Uc(l,t),e.codegenNode=l}else e.codegenNode=a}else if(l.length>1){let l=64;e.codegenNode=ec(t,a(pr),void 0,e.children,l+"",void 0,void 0,!0,void 0,!1)}}(e,a),e.helpers=[...a.helpers.keys()],e.components=[...a.components],e.directives=[...a.directives],e.imports=a.imports,e.hoists=a.hoists,e.temps=a.temps,e.cached=a.cached}function vu(e,t){t.currentNode=e;const{nodeTransforms:a}=t,l=[];for(let n=0;n<a.length;n++){const s=a[n](e,t);if(s&&(fe(s)?l.push(...s):l.push(s)),!t.currentNode)return;e=t.currentNode}switch(e.type){case 3:t.ssr||t.helper(kr);break;case 5:t.ssr||t.helper(Ur);break;case 9:for(let a=0;a<e.branches.length;a++)vu(e.branches[a],t);break;case 10:case 11:case 1:case 0:!function(e,t){let a=0;const l=()=>{a--};for(;a<e.children.length;a++){const n=e.children[a];be(n)||(t.parent=e,t.childIndex=a,t.onNodeRemoved=l,vu(n,t))}}(e,t)}t.currentNode=e;let n=l.length;for(;n--;)l[n]()}function hu(e,t){const a=be(e)?t=>t===e:t=>e.test(t);return(e,l)=>{if(1===e.type){const{props:n}=e;if(3===e.tagType&&n.some(Sc))return;const s=[];for(let i=0;i<n.length;i++){const o=n[i];if(7===o.type&&a(o.name)){n.splice(i,1),i--;const a=t(e,o,l);a&&s.push(a)}}return s}}}const gu=e=>`${Xr[e]}: _${Xr[e]}`;function bu(e,t,{helper:a,push:l,newline:n,isTS:s}){const i=a("component"===t?Nr:Er);for(let a=0;a<e.length;a++){let o=e[a];const r=o.endsWith("__self");r&&(o=o.slice(0,-6)),l(`const ${Pc(o,t)} = ${i}(${JSON.stringify(o)}${r?", true":""})${s?"!":""}`),a<e.length-1&&n()}}function yu(e,t){const a=e.length>3||!1;t.push("["),a&&t.indent(),wu(e,t,a),a&&t.deindent(),t.push("]")}function wu(e,t,a=!1,l=!0){const{push:n,newline:s}=t;for(let i=0;i<e.length;i++){const o=e[i];be(o)?n(o):fe(o)?yu(o,t):xu(o,t),i<e.length-1&&(a?(l&&n(","),s()):l&&n(", "))}}function xu(e,t){if(be(e))t.push(e);else if(ye(e))t.push(t.helper(e));else switch(e.type){case 1:case 9:case 11:case 12:xu(e.codegenNode,t);break;case 2:!function(e,t){t.push(JSON.stringify(e.content),e)}(e,t);break;case 4:ku(e,t);break;case 5:!function(e,t){const{push:a,helper:l,pure:n}=t;n&&a("/*#__PURE__*/"),a(`${l(Ur)}(`),xu(e.content,t),a(")")}(e,t);break;case 8:$u(e,t);break;case 3:!function(e,t){const{push:a,helper:l,pure:n}=t;n&&a("/*#__PURE__*/"),a(`${l(kr)}(${JSON.stringify(e.content)})`,e)}(e,t);break;case 13:!function(e,t){const{push:a,helper:l,pure:n}=t,{tag:s,props:i,children:o,patchFlag:r,dynamicProps:c,directives:u,isBlock:d,disableTracking:_,isComponent:p}=e;u&&a(l(Tr)+"("),d&&a(`(${l(gr)}(${_?"true":""}), `),n&&a("/*#__PURE__*/");a(l(d?Ac(t.inSSR,p):Ec(t.inSSR,p))+"(",e),wu(function(e){let t=e.length;for(;t--&&null==e[t];);return e.slice(0,t+1).map((e=>e||"null"))}([s,i,o,r,c]),t),a(")"),d&&a(")"),u&&(a(", "),xu(u,t),a(")"))}(e,t);break;case 14:!function(e,t){const{push:a,helper:l,pure:n}=t,s=be(e.callee)?e.callee:l(e.callee);n&&a("/*#__PURE__*/"),a(s+"(",e),wu(e.arguments,t),a(")")}(e,t);break;case 15:!function(e,t){const{push:a,indent:l,deindent:n,newline:s}=t,{properties:i}=e;if(!i.length)return void a("{}",e);const o=i.length>1||!1;a(o?"{":"{ "),o&&l();for(let e=0;e<i.length;e++){const{key:l,value:n}=i[e];Su(l,t),a(": "),xu(n,t),e<i.length-1&&(a(","),s())}o&&n(),a(o?"}":" }")}(e,t);break;case 17:!function(e,t){yu(e.elements,t)}(e,t);break;case 18:!function(e,t){const{push:a,indent:l,deindent:n}=t,{params:s,returns:i,body:o,newline:r,isSlot:c}=e;c&&a(`_${Xr[Wr]}(`),a("(",e),fe(s)?wu(s,t):s&&xu(s,t),a(") => "),(r||o)&&(a("{"),l()),i?(r&&a("return "),fe(i)?yu(i,t):xu(i,t)):o&&xu(o,t),(r||o)&&(n(),a("}")),c&&a(")")}(e,t);break;case 19:!function(e,t){const{test:a,consequent:l,alternate:n,newline:s}=e,{push:i,indent:o,deindent:r,newline:c}=t;if(4===a.type){const e=!pc(a.content);e&&i("("),ku(a,t),e&&i(")")}else i("("),xu(a,t),i(")");s&&o(),t.indentLevel++,s||i(" "),i("? "),xu(l,t),t.indentLevel--,s&&c(),s||i(" "),i(": ");const u=19===n.type;u||t.indentLevel++,xu(n,t),u||t.indentLevel--,s&&r(!0)}(e,t);break;case 20:!function(e,t){const{push:a,helper:l,indent:n,deindent:s,newline:i}=t;a(`_cache[${e.index}] || (`),e.isVNode&&(n(),a(`${l(Vr)}(-1),`),i()),a(`_cache[${e.index}] = `),xu(e.value,t),e.isVNode&&(a(","),i(),a(`${l(Vr)}(1),`),i(),a(`_cache[${e.index}]`),s()),a(")")}(e,t);break;case 21:wu(e.body,t,!0,!1)}}function ku(e,t){const{content:a,isStatic:l}=e;t.push(l?JSON.stringify(a):a,e)}function $u(e,t){for(let a=0;a<e.children.length;a++){const l=e.children[a];be(l)?t.push(l):xu(l,t)}}function Su(e,t){const{push:a}=t;8===e.type?(a("["),$u(e,t),a("]")):e.isStatic?a(pc(e.content)?e.content:JSON.stringify(e.content),e):a(`[${e.content}]`,e)}const Nu=hu(/^(if|else|else-if)$/,((e,t,a)=>function(e,t,a,l){if("else"===t.name||t.exp&&t.exp.content.trim()||(t.exp=nc("true",!1,t.exp?t.exp.loc:e.loc)),"if"===t.name){const n=Cu(e,t),s={type:9,loc:e.loc,branches:[n]};if(a.replaceNode(s),l)return l(s,n,!0)}else{const n=a.parent.children;let s=n.indexOf(e);for(;s-- >=-1;){const i=n[s];if(!i||2!==i.type||i.content.trim().length){if(i&&9===i.type){a.removeNode();const n=Cu(e,t);i.branches.push(n);const s=l&&l(i,n,!1);vu(n,a),s&&s(),a.currentNode=null}break}a.removeNode(i)}}}(e,t,a,((e,t,l)=>{const n=a.parent.children;let s=n.indexOf(e),i=0;for(;s-- >=0;){const e=n[s];e&&9===e.type&&(i+=e.branches.length)}return()=>{if(l)e.codegenNode=Eu(t,i,a);else{const l=function(e){for(;;)if(19===e.type){if(19!==e.alternate.type)return e;e=e.alternate}else 20===e.type&&(e=e.value)}(e.codegenNode);l.alternate=Eu(t,i+e.branches.length-1,a)}}}))));function Cu(e,t){const a=3===e.tagType;return{type:10,loc:e.loc,condition:"else"===t.name?void 0:t.exp,children:a&&!wc(e,"for")?e.children:[e],userKey:xc(e,"key"),isTemplateIf:a}}function Eu(e,t,a){return e.condition?rc(e.condition,Au(e,t,a),ic(a.helper(kr),['""',"true"])):Au(e,t,a)}function Au(e,t,a){const{helper:l}=a,n=lc("key",nc(`${t}`,!1,Qr,2)),{children:s}=e,i=s[0];if(1!==s.length||1!==i.type){if(1===s.length&&11===i.type){const e=i.codegenNode;return Oc(e,n,a),e}{let t=64;return ec(a,l(pr),ac([n]),s,t+"",void 0,void 0,!0,!1,!1,e.loc)}}{const e=i.codegenNode,t=14===(o=e).type&&o.callee===Yr?o.arguments[1].returns:o;return 13===t.type&&Uc(t,a),Oc(t,n,a),e}var o}const Tu=hu("for",((e,t,a)=>{const{helper:l,removeHelper:n}=a;return function(e,t,a,l){if(!t.exp)return;const n=Uu(t.exp);if(!n)return;const{scopes:s}=a,{source:i,value:o,key:r,index:c}=n,u={type:11,loc:t.loc,source:i,valueAlias:o,keyAlias:r,objectIndexAlias:c,parseResult:n,children:Nc(e)?e.children:[e]};a.replaceNode(u),s.vFor++;const d=l&&l(u);return()=>{s.vFor--,d&&d()}}(e,t,a,(t=>{const s=ic(l(Ir),[t.source]),i=Nc(e),o=wc(e,"memo"),r=xc(e,"key"),c=r&&(6===r.type?nc(r.value.content,!0):r.exp),u=r?lc("key",c):null,d=4===t.source.type&&t.source.constType>0,_=d?64:r?128:256;return t.codegenNode=ec(a,l(pr),void 0,s,_+"",void 0,void 0,!0,!d,!1,e.loc),()=>{let r;const{children:_}=t,p=1!==_.length||1!==_[0].type,f=Cc(e)?e:i&&1===e.children.length&&Cc(e.children[0])?e.children[0]:null;if(f?(r=f.codegenNode,i&&u&&Oc(r,u,a)):p?r=ec(a,l(pr),u?ac([u]):void 0,e.children,"64",void 0,void 0,!0,void 0,!1):(r=_[0].codegenNode,i&&u&&Oc(r,u,a),r.isBlock!==!d&&(r.isBlock?(n(gr),n(Ac(a.inSSR,r.isComponent))):n(Ec(a.inSSR,r.isComponent))),r.isBlock=!d,r.isBlock?(l(gr),l(Ac(a.inSSR,r.isComponent))):l(Ec(a.inSSR,r.isComponent))),o){const e=oc(Mu(t.parseResult,[nc("_cached")]));e.body={type:21,body:[sc(["const _memo = (",o.exp,")"]),sc(["if (_cached",...c?[" && _cached.key === ",c]:[],` && ${a.helperString(Zr)}(_cached, _memo)) return _cached`]),sc(["const _item = ",r]),nc("_item.memo = _memo"),nc("return _item")],loc:Qr},s.arguments.push(e,nc("_cache"),nc(String(a.cached++)))}else s.arguments.push(oc(Mu(t.parseResult),r,!0))}}))})),Iu=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,Ou=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,Pu=/^\(|\)$/g;function Uu(e,t){const a=e.loc,l=e.content,n=l.match(Iu);if(!n)return;const[,s,i]=n,o={source:ju(a,i.trim(),l.indexOf(i,s.length)),value:void 0,key:void 0,index:void 0};let r=s.trim().replace(Pu,"").trim();const c=s.indexOf(r),u=r.match(Ou);if(u){r=r.replace(Ou,"").trim();const e=u[1].trim();let t;if(e&&(t=l.indexOf(e,c+r.length),o.key=ju(a,e,t)),u[2]){const n=u[2].trim();n&&(o.index=ju(a,n,l.indexOf(n,o.key?t+e.length:c+r.length)))}}return r&&(o.value=ju(a,r,c)),o}function ju(e,t,a){return nc(t,!1,gc(e,a,t.length))}function Mu({value:e,key:t,index:a},l=[]){return function(e){let t=e.length;for(;t--&&!e[t];);return e.slice(0,t+1).map(((e,t)=>e||nc("_".repeat(t+1),!1)))}([e,t,a,...l])}const Fu=nc("undefined",!1),Lu=(e,t)=>{if(1===e.type&&(1===e.tagType||3===e.tagType)){if(wc(e,"slot"))return t.scopes.vSlot++,()=>{t.scopes.vSlot--}}},Ru=(e,t,a)=>oc(e,t,!1,!0,t.length?t[0].loc:a);function Du(e,t,a=Ru){t.helper(Wr);const{children:l,loc:n}=e,s=[],i=[];let o=t.scopes.vSlot>0||t.scopes.vFor>0;const r=wc(e,"slot",!0);if(r){const{arg:e,exp:t}=r;e&&!cc(e)&&(o=!0),s.push(lc(e||nc("default",!0),a(t,l,n)))}let c=!1,u=!1;const d=[],_=new Set;for(let e=0;e<l.length;e++){const n=l[e];let p;if(!Nc(n)||!(p=wc(n,"slot",!0))){3!==n.type&&d.push(n);continue}if(r)break;c=!0;const{children:f,loc:m}=n,{arg:v=nc("default",!0),exp:h}=p;let g;cc(v)?g=v?v.content:"default":o=!0;const b=a(h,f,m);let y,w,x;if(y=wc(n,"if"))o=!0,i.push(rc(y.exp,zu(v,b),Fu));else if(w=wc(n,/^else(-if)?$/,!0)){let t,a=e;for(;a--&&(t=l[a],3===t.type););if(t&&Nc(t)&&wc(t,"if")){l.splice(e,1),e--;let t=i[i.length-1];for(;19===t.alternate.type;)t=t.alternate;t.alternate=w.exp?rc(w.exp,zu(v,b),Fu):zu(v,b)}}else if(x=wc(n,"for")){o=!0;const e=x.parseResult||Uu(x.exp);e&&i.push(ic(t.helper(Ir),[e.source,oc(Mu(e),zu(v,b),!0)]))}else{if(g){if(_.has(g))continue;_.add(g),"default"===g&&(u=!0)}s.push(lc(v,b))}}if(!r){const e=(e,t)=>lc("default",a(e,t,n));c?d.length&&d.some((e=>Bu(e)))&&(u||s.push(e(void 0,d))):s.push(e(void 0,l))}const p=o?2:qu(e.children)?3:1;let f=ac(s.concat(lc("_",nc(p+"",!1))),n);return i.length&&(f=ic(t.helper(Pr),[f,tc(i)])),{slots:f,hasDynamicSlots:o}}function zu(e,t){return ac([lc("name",e),lc("fn",t)])}function qu(e){for(let t=0;t<e.length;t++){const a=e[t];switch(a.type){case 1:if(2===a.tagType||qu(a.children))return!0;break;case 9:if(qu(a.branches))return!0;break;case 10:case 11:if(qu(a.children))return!0}}return!1}function Bu(e){return 2!==e.type&&12!==e.type||(2===e.type?!!e.content.trim():Bu(e.content))}const Vu=new WeakMap,Hu=(e,t)=>function(){if(1!==(e=t.currentNode).type||0!==e.tagType&&1!==e.tagType)return;const{tag:a,props:l}=e,n=1===e.tagType;let s=n?function(e,t,a=!1){let{tag:l}=e;const n=Ju(l),s=xc(e,"is");if(s)if(n){const e=6===s.type?s.value&&nc(s.value.content,!0):s.exp;if(e)return ic(t.helper(Cr),[e])}else 6===s.type&&s.value.content.startsWith("vue:")&&(l=s.value.content.slice(4));const i=!n&&wc(e,"is");if(i&&i.exp)return ic(t.helper(Cr),[i.exp]);const o=dc(l)||t.isBuiltInComponent(l);return o?(a||t.helper(o),o):(t.helper(Nr),t.components.add(l),Pc(l,"component"))}(e,t):`"${a}"`;const i=we(s)&&s.callee===Cr;let o,r,c,u,d,_,p=0,f=i||s===fr||s===mr||!n&&("svg"===a||"foreignObject"===a);if(l.length>0){const a=Gu(e,t,void 0,n,i);o=a.props,p=a.patchFlag,d=a.dynamicPropNames;const l=a.directives;_=l&&l.length?tc(l.map((e=>function(e,t){const a=[],l=Vu.get(e);l?a.push(t.helperString(l)):(t.helper(Er),t.directives.add(e.name),a.push(Pc(e.name,"directive")));const{loc:n}=e;if(e.exp&&a.push(e.exp),e.arg&&(e.exp||a.push("void 0"),a.push(e.arg)),Object.keys(e.modifiers).length){e.arg||(e.exp||a.push("void 0"),a.push("void 0"));const t=nc("true",!1,n);a.push(ac(e.modifiers.map((e=>lc(e,t))),n))}return tc(a,e.loc)}(e,t)))):void 0,a.shouldUseBlock&&(f=!0)}if(e.children.length>0)if(s===vr&&(f=!0,p|=1024),n&&s!==fr&&s!==vr){const{slots:a,hasDynamicSlots:l}=Du(e,t);r=a,l&&(p|=1024)}else if(1===e.children.length&&s!==fr){const a=e.children[0],l=a.type,n=5===l||8===l;n&&0===cu(a,t)&&(p|=1),r=n||2===l?a:e.children}else r=e.children;0!==p&&(c=String(p),d&&d.length&&(u=function(e){let t="[";for(let a=0,l=e.length;a<l;a++)t+=JSON.stringify(e[a]),a<l-1&&(t+=", ");return t+"]"}(d))),e.codegenNode=ec(t,s,o,r,c,u,_,!!f,!1,n,e.loc)};function Gu(e,t,a=e.props,l,n,s=!1){const{tag:i,loc:o,children:r}=e;let c=[];const u=[],d=[],_=r.length>0;let p=!1,f=0,m=!1,v=!1,h=!1,g=!1,b=!1,y=!1;const w=[],x=({key:e,value:a})=>{if(cc(e)){const s=e.content,i=re(s);if(!i||l&&!n||"onclick"===s.toLowerCase()||"onUpdate:modelValue"===s||Ce(s)||(g=!0),i&&Ce(s)&&(y=!0),20===a.type||(4===a.type||8===a.type)&&cu(a,t)>0)return;"ref"===s?m=!0:"class"===s?v=!0:"style"===s?h=!0:"key"===s||w.includes(s)||w.push(s),!l||"class"!==s&&"style"!==s||w.includes(s)||w.push(s)}else b=!0};for(let l=0;l<a.length;l++){const n=a[l];if(6===n.type){const{loc:e,name:a,value:l}=n;let s=!0;if("ref"===a&&(m=!0,t.scopes.vFor>0&&c.push(lc(nc("ref_for",!0),nc("true")))),"is"===a&&(Ju(i)||l&&l.content.startsWith("vue:")))continue;c.push(lc(nc(a,!0,gc(e,0,a.length)),nc(l?l.content:"",s,l?l.loc:e)))}else{const{name:a,arg:l,exp:r,loc:f}=n,m="bind"===a,v="on"===a;if("slot"===a)continue;if("once"===a||"memo"===a)continue;if("is"===a||m&&kc(l,"is")&&Ju(i))continue;if(v&&s)continue;if((m&&kc(l,"key")||v&&_&&kc(l,"vue:before-update"))&&(p=!0),m&&kc(l,"ref")&&t.scopes.vFor>0&&c.push(lc(nc("ref_for",!0),nc("true"))),!l&&(m||v)){b=!0,r&&(c.length&&(u.push(ac(Wu(c),o)),c=[]),u.push(m?r:{type:14,loc:f,callee:t.helper(Dr),arguments:[r]}));continue}const h=t.directiveTransforms[a];if(h){const{props:a,needRuntime:l}=h(n,e,t);!s&&a.forEach(x),c.push(...a),l&&(d.push(n),ye(l)&&Vu.set(n,l))}else Ee(a)||(d.push(n),_&&(p=!0))}}let k;if(u.length?(c.length&&u.push(ac(Wu(c),o)),k=u.length>1?ic(t.helper(jr),u,o):u[0]):c.length&&(k=ac(Wu(c),o)),b?f|=16:(v&&!l&&(f|=2),h&&!l&&(f|=4),w.length&&(f|=8),g&&(f|=32)),p||0!==f&&32!==f||!(m||y||d.length>0)||(f|=512),!t.inSSR&&k)switch(k.type){case 15:let e=-1,a=-1,l=!1;for(let t=0;t<k.properties.length;t++){const n=k.properties[t].key;cc(n)?"class"===n.content?e=t:"style"===n.content&&(a=t):n.isHandlerKey||(l=!0)}const n=k.properties[e],s=k.properties[a];l?k=ic(t.helper(Lr),[k]):(n&&!cc(n.value)&&(n.value=ic(t.helper(Mr),[n.value])),s&&(h||4===s.value.type&&"["===s.value.content.trim()[0]||17===s.value.type)&&(s.value=ic(t.helper(Fr),[s.value])));break;case 14:break;default:k=ic(t.helper(Lr),[ic(t.helper(Rr),[k])])}return{props:k,directives:d,patchFlag:f,dynamicPropNames:w,shouldUseBlock:p}}function Wu(e){const t=new Map,a=[];for(let l=0;l<e.length;l++){const n=e[l];if(8===n.key.type||!n.key.isStatic){a.push(n);continue}const s=n.key.content,i=t.get(s);i?("style"===s||"class"===s||re(s))&&Ku(i,n):(t.set(s,n),a.push(n))}return a}function Ku(e,t){17===e.value.type?e.value.elements.push(t.value):e.value=tc([e.value,t.value],e.loc)}function Ju(e){return"component"===e||"Component"===e}const Yu=(e,t)=>{if(Cc(e)){const{children:a,loc:l}=e,{slotName:n,slotProps:s}=function(e,t){let a,l='"default"';const n=[];for(let t=0;t<e.props.length;t++){const a=e.props[t];6===a.type?a.value&&("name"===a.name?l=JSON.stringify(a.value.content):(a.name=Ie(a.name),n.push(a))):"bind"===a.name&&kc(a.arg,"name")?a.exp&&(l=a.exp):("bind"===a.name&&a.arg&&cc(a.arg)&&(a.arg.content=Ie(a.arg.content)),n.push(a))}if(n.length>0){const{props:l,directives:s}=Gu(e,t,n,!1,!1);a=l}return{slotName:l,slotProps:a}}(e,t),i=[t.prefixIdentifiers?"_ctx.$slots":"$slots",n,"{}","undefined","true"];let o=2;s&&(i[2]=s,o=3),a.length&&(i[3]=oc([],a,!1,!1,l),o=4),t.scopeId&&!t.slotted&&(o=5),i.splice(o),e.codegenNode=ic(t.helper(Or),i,l)}},Zu=/^\s*([\w$_]+|(async\s*)?\([^)]*?\))\s*=>|^\s*(async\s+)?function(?:\s+[\w$]+)?\s*\(/,Xu=(e,t,a,l)=>{const{loc:n,modifiers:s,arg:i}=e;let o;if(4===i.type)if(i.isStatic){let e=i.content;e.startsWith("vue:")&&(e=`vnode-${e.slice(4)}`),o=nc(je(Ie(e)),!0,i.loc)}else o=sc([`${a.helperString(Br)}(`,i,")"]);else o=i,o.children.unshift(`${a.helperString(Br)}(`),o.children.push(")");let r=e.exp;r&&!r.content.trim()&&(r=void 0);let c=a.cacheHandlers&&!r&&!a.inVOnce;if(r){const e=hc(r.content),t=!(e||Zu.test(r.content)),a=r.content.includes(";");(t||c&&e)&&(r=sc([`${t?"$event":"(...args)"} => ${a?"{":"("}`,r,a?"}":")"]))}let u={props:[lc(o,r||nc("() => {}",!1,n))]};return l&&(u=l(u)),c&&(u.props[0].value=a.cache(u.props[0].value)),u.props.forEach((e=>e.key.isHandlerKey=!0)),u},Qu=(e,t,a)=>{const{exp:l,modifiers:n,loc:s}=e,i=e.arg;return 4!==i.type?(i.children.unshift("("),i.children.push(') || ""')):i.isStatic||(i.content=`${i.content} || ""`),n.includes("camel")&&(4===i.type?i.content=i.isStatic?Ie(i.content):`${a.helperString(zr)}(${i.content})`:(i.children.unshift(`${a.helperString(zr)}(`),i.children.push(")"))),a.inSSR||(n.includes("prop")&&ed(i,"."),n.includes("attr")&&ed(i,"^")),!l||4===l.type&&!l.content.trim()?{props:[lc(i,nc("",!0,s))]}:{props:[lc(i,l)]}},ed=(e,t)=>{4===e.type?e.content=e.isStatic?t+e.content:`\`${t}\${${e.content}}\``:(e.children.unshift(`'${t}' + (`),e.children.push(")"))},td=(e,t)=>{if(0===e.type||1===e.type||11===e.type||10===e.type)return()=>{const a=e.children;let l,n=!1;for(let e=0;e<a.length;e++){const t=a[e];if($c(t)){n=!0;for(let n=e+1;n<a.length;n++){const s=a[n];if(!$c(s)){l=void 0;break}l||(l=a[e]=sc([t],t.loc)),l.children.push(" + ",s),a.splice(n,1),n--}}}if(n&&(1!==a.length||0!==e.type&&(1!==e.type||0!==e.tagType||e.props.find((e=>7===e.type&&!t.directiveTransforms[e.name])))))for(let e=0;e<a.length;e++){const l=a[e];if($c(l)||8===l.type){const n=[];2===l.type&&" "===l.content||n.push(l),t.ssr||0!==cu(l,t)||n.push("1"),a[e]={type:12,content:l,loc:l.loc,codegenNode:ic(t.helper($r),n)}}}}},ad=new WeakSet,ld=(e,t)=>{if(1===e.type&&wc(e,"once",!0)){if(ad.has(e)||t.inVOnce)return;return ad.add(e),t.inVOnce=!0,t.helper(Vr),()=>{t.inVOnce=!1;const e=t.currentNode;e.codegenNode&&(e.codegenNode=t.cache(e.codegenNode,!0))}}},nd=(e,t,a)=>{const{exp:l,arg:n}=e;if(!l)return sd();const s=l.loc.source,i=4===l.type?l.content:s;if(!i.trim()||!hc(i))return sd();const o=n||nc("modelValue",!0),r=n?cc(n)?`onUpdate:${n.content}`:sc(['"onUpdate:" + ',n]):"onUpdate:modelValue";let c;c=sc([(a.isTS?"($event: any)":"$event")+" => ((",l,") = $event)"]);const u=[lc(o,e.exp),lc(r,c)];if(e.modifiers.length&&1===t.tagType){const t=e.modifiers.map((e=>(pc(e)?e:JSON.stringify(e))+": true")).join(", "),a=n?cc(n)?`${n.content}Modifiers`:sc([n,' + "Modifiers"']):"modelModifiers";u.push(lc(a,nc(`{ ${t} }`,!1,e.loc,2)))}return sd(u)};function sd(e=[]){return{props:e}}const id=new WeakSet,od=(e,t)=>{if(1===e.type){const a=wc(e,"memo");if(!a||id.has(e))return;return id.add(e),()=>{const l=e.codegenNode||t.currentNode.codegenNode;l&&13===l.type&&(1!==e.tagType&&Uc(l,t),e.codegenNode=ic(t.helper(Yr),[a.exp,oc(void 0,l),"_cache",String(t.cached++)]))}}};function rd(e,t={}){const a=t.onError||ur,l="module"===t.mode;!0===t.prefixIdentifiers?a(_r(46)):l&&a(_r(47)),t.cacheHandlers&&a(_r(48)),t.scopeId&&!l&&a(_r(49));const n=be(e)?function(e,t={}){const a=function(e,t){const a=ue({},Fc);let l;for(l in t)a[l]=void 0===t[l]?Fc[l]:t[l];return{options:a,column:1,line:1,offset:0,originalSource:e,source:e,inPre:!1,inVPre:!1,onWarn:a.onWarn}}(e,t),l=Zc(a);return function(e,t=Qr){return{type:0,children:e,helpers:[],components:[],directives:[],hoists:[],imports:[],cached:0,temps:0,codegenNode:void 0,loc:t}}(Lc(a,0,[]),Xc(a,l))}(e,t):e,[s,i]=[[ld,Nu,od,Tu,Yu,Hu,Lu,td],{on:Xu,bind:Qu,model:nd}];return mu(n,ue({},t,{prefixIdentifiers:!1,nodeTransforms:[...s,...t.nodeTransforms||[]],directiveTransforms:ue({},i,t.directiveTransforms||{})})),function(e,t={}){const a=function(e,{mode:t="function",prefixIdentifiers:a="module"===t,sourceMap:l=!1,filename:n="template.vue.html",scopeId:s=null,optimizeImports:i=!1,runtimeGlobalName:o="Vue",runtimeModuleName:r="vue",ssrRuntimeModuleName:c="vue/server-renderer",ssr:u=!1,isTS:d=!1,inSSR:_=!1}){const p={mode:t,prefixIdentifiers:a,sourceMap:l,filename:n,scopeId:s,optimizeImports:i,runtimeGlobalName:o,runtimeModuleName:r,ssrRuntimeModuleName:c,ssr:u,isTS:d,inSSR:_,source:e.loc.source,code:"",column:1,line:1,offset:0,indentLevel:0,pure:!1,map:void 0,helper:e=>`_${Xr[e]}`,push(e,t){p.code+=e},indent(){f(++p.indentLevel)},deindent(e=!1){e?--p.indentLevel:f(--p.indentLevel)},newline(){f(p.indentLevel)}};function f(e){p.push("\n"+"  ".repeat(e))}return p}(e,t);t.onContextCreated&&t.onContextCreated(a);const{mode:l,push:n,prefixIdentifiers:s,indent:i,deindent:o,newline:r,ssr:c}=a,u=e.helpers.length>0,d=!s&&"module"!==l;if(function(e,t){const{push:a,newline:l,runtimeGlobalName:n}=t,s=n;e.helpers.length>0&&(a(`const _Vue = ${s}\n`),e.hoists.length)&&a(`const { ${[wr,xr,kr,$r,Sr].filter((t=>e.helpers.includes(t))).map(gu).join(", ")} } = _Vue\n`),function(e,t){if(!e.length)return;t.pure=!0;const{push:a,newline:l}=t;l();for(let n=0;n<e.length;n++){const s=e[n];s&&(a(`const _hoisted_${n+1} = `),xu(s,t),l())}t.pure=!1}(e.hoists,t),l(),a("return ")}(e,a),n(`function ${c?"ssrRender":"render"}(${(c?["_ctx","_push","_parent","_attrs"]:["_ctx","_cache"]).join(", ")}) {`),i(),d&&(n("with (_ctx) {"),i(),u&&(n(`const { ${e.helpers.map(gu).join(", ")} } = _Vue`),n("\n"),r())),e.components.length&&(bu(e.components,"component",a),(e.directives.length||e.temps>0)&&r()),e.directives.length&&(bu(e.directives,"directive",a),e.temps>0&&r()),e.temps>0){n("let ");for(let t=0;t<e.temps;t++)n(`${t>0?", ":""}_temp${t}`)}return(e.components.length||e.directives.length||e.temps)&&(n("\n"),r()),c||n("return "),e.codegenNode?xu(e.codegenNode,a):n("null"),d&&(o(),n("}")),o(),n("}"),{ast:e,code:a.code,preamble:"",map:a.map?a.map.toJSON():void 0}}(n,ue({},t,{prefixIdentifiers:!1}))}const cd=Symbol(""),ud=Symbol(""),dd=Symbol(""),_d=Symbol(""),pd=Symbol(""),fd=Symbol(""),md=Symbol(""),vd=Symbol(""),hd=Symbol(""),gd=Symbol("");var bd;let yd;bd={[cd]:"vModelRadio",[ud]:"vModelCheckbox",[dd]:"vModelText",[_d]:"vModelSelect",[pd]:"vModelDynamic",[fd]:"withModifiers",[md]:"withKeys",[vd]:"vShow",[hd]:"Transition",[gd]:"TransitionGroup"},Object.getOwnPropertySymbols(bd).forEach((e=>{Xr[e]=bd[e]}));const wd=D("style,iframe,script,noscript",!0),xd={isVoidTag:X,isNativeTag:e=>Y(e)||Z(e),isPreTag:e=>"pre"===e,decodeEntities:function(e,t=!1){return yd||(yd=document.createElement("div")),t?(yd.innerHTML=`<div foo="${e.replace(/"/g,"&quot;")}">`,yd.children[0].getAttribute("foo")):(yd.innerHTML=e,yd.textContent)},isBuiltInComponent:e=>uc(e,"Transition")?hd:uc(e,"TransitionGroup")?gd:void 0,getNamespace(e,t){let a=t?t.ns:0;if(t&&2===a)if("annotation-xml"===t.tag){if("svg"===e)return 1;t.props.some((e=>6===e.type&&"encoding"===e.name&&null!=e.value&&("text/html"===e.value.content||"application/xhtml+xml"===e.value.content)))&&(a=0)}else/^m(?:[ions]|text)$/.test(t.tag)&&"mglyph"!==e&&"malignmark"!==e&&(a=0);else t&&1===a&&("foreignObject"!==t.tag&&"desc"!==t.tag&&"title"!==t.tag||(a=0));if(0===a){if("svg"===e)return 1;if("math"===e)return 2}return a},getTextMode({tag:e,ns:t}){if(0===t){if("textarea"===e||"title"===e)return 1;if(wd(e))return 2}return 0}},kd=(e,t)=>{const a=W(e);return nc(JSON.stringify(a),!1,t,3)},$d=D("passive,once,capture"),Sd=D("stop,prevent,self,ctrl,shift,alt,meta,exact,middle"),Nd=D("left,right"),Cd=D("onkeyup,onkeydown,onkeypress",!0),Ed=(e,t)=>cc(e)&&"onclick"===e.content.toLowerCase()?nc(t,!0):4!==e.type?sc(["(",e,`) === "onClick" ? "${t}" : (`,e,")"]):e,Ad=(e,t)=>{1!==e.type||0!==e.tagType||"script"!==e.tag&&"style"!==e.tag||t.removeNode()},Td=[e=>{1===e.type&&e.props.forEach(((t,a)=>{6===t.type&&"style"===t.name&&t.value&&(e.props[a]={type:7,name:"bind",arg:nc("style",!0,t.loc),exp:kd(t.value.content,t.loc),modifiers:[],loc:t.loc})}))}],Id={cloak:()=>({props:[]}),html:(e,t,a)=>{const{exp:l,loc:n}=e;return t.children.length&&(t.children.length=0),{props:[lc(nc("innerHTML",!0,n),l||nc("",!0))]}},text:(e,t,a)=>{const{exp:l,loc:n}=e;return t.children.length&&(t.children.length=0),{props:[lc(nc("textContent",!0),l?cu(l,a)>0?l:ic(a.helperString(Ur),[l],n):nc("",!0))]}},model:(e,t,a)=>{const l=nd(e,t,a);if(!l.props.length||1===t.tagType)return l;const{tag:n}=t,s=a.isCustomElement(n);if("input"===n||"textarea"===n||"select"===n||s){let e=dd,i=!1;if("input"===n||s){const a=xc(t,"type");if(a){if(7===a.type)e=pd;else if(a.value)switch(a.value.content){case"radio":e=cd;break;case"checkbox":e=ud;break;case"file":i=!0}}else(function(e){return e.props.some((e=>!(7!==e.type||"bind"!==e.name||e.arg&&4===e.arg.type&&e.arg.isStatic)))})(t)&&(e=pd)}else"select"===n&&(e=_d);i||(l.needRuntime=a.helper(e))}return l.props=l.props.filter((e=>!(4===e.key.type&&"modelValue"===e.key.content))),l},on:(e,t,a)=>Xu(e,0,a,(t=>{const{modifiers:l}=e;if(!l.length)return t;let{key:n,value:s}=t.props[0];const{keyModifiers:i,nonKeyModifiers:o,eventOptionModifiers:r}=((e,t,a,l)=>{const n=[],s=[],i=[];for(let a=0;a<t.length;a++){const l=t[a];$d(l)?i.push(l):Nd(l)?cc(e)?Cd(e.content)?n.push(l):s.push(l):(n.push(l),s.push(l)):Sd(l)?s.push(l):n.push(l)}return{keyModifiers:n,nonKeyModifiers:s,eventOptionModifiers:i}})(n,l);if(o.includes("right")&&(n=Ed(n,"onContextmenu")),o.includes("middle")&&(n=Ed(n,"onMouseup")),o.length&&(s=ic(a.helper(fd),[s,JSON.stringify(o)])),!i.length||cc(n)&&!Cd(n.content)||(s=ic(a.helper(md),[s,JSON.stringify(i)])),r.length){const e=r.map(Ue).join("");n=cc(n)?nc(`${n.content}${e}`,!0):sc(["(",n,`) + "${e}"`])}return{props:[lc(n,s)]}})),show:(e,t,a)=>({props:[],needRuntime:a.helper(vd)})},Od=Object.create(null);function Pd(e,t){if(!be(e)){if(!e.nodeType)return se;e=e.innerHTML}const a=e,l=Od[a];if(l)return l;if("#"===e[0]){const t=document.querySelector(e);e=t?t.innerHTML:""}const{code:n}=function(e,t={}){return rd(e,ue({},xd,t,{nodeTransforms:[Ad,...Td,...t.nodeTransforms||[]],directiveTransforms:ue({},Id,t.directiveTransforms||{}),transformHoist:null}))}(e,ue({hoistStatic:!0,onError:void 0,onWarn:se},t)),s=new Function("Vue",n)(cr);return s._rc=!0,Od[a]=s}pi(Pd);var Ud=Object.freeze({__proto__:null,BaseTransition:ql,Comment:Cs,EffectScope:qe,Fragment:Ss,KeepAlive:en,ReactiveEffect:at,Static:Es,Suspense:kl,Teleport:$s,Text:Ns,Transition:co,TransitionGroup:Eo,VueElement:no,callWithAsyncErrorHandling:Ua,callWithErrorHandling:Pa,camelize:Ie,capitalize:Ue,cloneVNode:Ws,compatUtils:null,compile:Pd,computed:wi,createApp:sr,createBlock:Fs,createCommentVNode:Ys,createElementBlock:Ms,createElementVNode:Vs,createHydrationRenderer:vs,createPropsRestProxy:Ti,createRenderer:ms,createSSRApp:ir,createSlots:Tn,createStaticVNode:Js,createTextVNode:Ks,createVNode:Hs,customRef:$a,defineAsyncComponent:Zl,defineComponent:Jl,defineCustomElement:to,defineEmits:ki,defineExpose:$i,defineProps:xi,defineSSRCustomElement:ao,get devtools(){return nl},effect:nt,effectScope:Be,getCurrentInstance:si,getCurrentScope:He,getTransitionRawChildren:Kl,guardReactiveProps:Gs,h:Oi,handleError:ja,hydrate:nr,initCustomFormatter:ji,initDirectivesForSSR:rr,inject:Tl,isMemoSame:Fi,isProxy:oa,isReactive:na,isReadonly:sa,isRef:fa,isRuntimeOnly:fi,isShallow:ia,isVNode:Ls,markRaw:ca,mergeDefaults:Ai,mergeProps:ei,nextTick:Ja,normalizeClass:K,normalizeProps:J,normalizeStyle:V,onActivated:an,onBeforeMount:dn,onBeforeUnmount:mn,onBeforeUpdate:pn,onDeactivated:ln,onErrorCaptured:yn,onMounted:_n,onRenderTracked:bn,onRenderTriggered:gn,onScopeDispose:Ge,onServerPrefetch:hn,onUnmounted:vn,onUpdated:fn,openBlock:Is,popScopeId:fl,provide:Al,proxyRefs:xa,pushScopeId:pl,queuePostFlushCb:Qa,reactive:Qt,readonly:ta,ref:ma,registerRuntimeCompiler:pi,render:lr,renderList:An,renderSlot:In,resolveComponent:kn,resolveDirective:Nn,resolveDynamicComponent:Sn,resolveFilter:null,resolveTransitionHooks:Vl,setBlockTracking:Us,setDevtoolsHook:il,setTransitionHooks:Wl,shallowReactive:ea,shallowReadonly:aa,shallowRef:va,ssrContextKey:Pi,ssrUtils:null,stop:st,toDisplayString:te,toHandlerKey:je,toHandlers:Pn,toRaw:ra,toRef:Ca,toRefs:Sa,transformVNodeArgs:Ds,triggerRef:ba,unref:ya,useAttrs:Ci,useCssModule:so,useCssVars:io,useSSRContext:Ui,useSlots:Ni,useTransitionState:Dl,vModelCheckbox:Mo,vModelDynamic:Bo,vModelRadio:Lo,vModelSelect:Ro,vModelText:jo,vShow:Yo,version:Li,warn:Ta,watch:jl,watchEffect:Il,watchPostEffect:Ol,watchSyncEffect:Pl,withAsyncContext:Ii,withCtx:vl,withDefaults:Si,withDirectives:wn,withKeys:Jo,withMemo:Mi,withModifiers:Wo,withScopeId:ml});var jd={props:["content"],watch:{content:function(e,t){}},render(){return Oi(this.$props.content)},__file:"http_src/vue/vue_node.vue"};const Md=["id"],Fd=["aria-labelledby"],Ld={class:"dropdown-item"};var Rd={__name:"dropdown",props:{id:String,auto_load:Boolean,button_class:String,button_style:String,f_on_open:Function,f_on_close:Function},emits:[],setup(e,{expose:t,emit:a}){const l=Ni(),n=ma([]);ma([]);const s=ma([]),i=ma(null),o=ma(null),r=e;let c=null;_n((()=>{c=$(i.value).parent().closest("div").css("overflow"),1==r.auto_load&&d();let e={dropdown:i.value,dropdown_button:o.value};$(i.value).on("show.bs.dropdown",(function(){$(i.value).parent().closest("div").css("overflow","visible"),null!=r.f_on_open&&r.f_on_open(e)})),$(i.value).on("hide.bs.dropdown",(function(){$(i.value).parent().closest("div").css("overflow",c),null!=r.f_on_close&&r.f_on_close(e)}))}));const u=wi((()=>null!=r.button_class?r.button_class:"btn-link"));async function d(){if(n.value=[],null==l||null==l.menu)return;let e=l.menu();null!=e&&0!=e.length&&("symbol"==typeof e[0].type&&(e=e[0].children),s.value=[],e.forEach((e=>{let t=e;s.value.push(t)})),await Ja())}return t({load_menu:d}),(t,a)=>(Is(),Ms("div",{class:"dropdown",ref_key:"dropdown",ref:i,style:{display:"inline-block"}},[Vs("button",{class:K(["btn dropdown-toggle",u.value]),style:V(e.button_style),type:"button",id:e.id,ref_key:"dropdown_button",ref:o,"aria-expanded":"false","data-bs-toggle":"dropdown"},[In(t.$slots,"title")],14,Md),Vs("ul",{class:"dropdown-menu","aria-labelledby":e.id,style:{"max-height":"25rem",overflow:"auto"}},[Ys(' <slot name="menu"></slot> '),Ys(' <li class="dropdown-item" v-for="(opt, i) in options" :ref="el => { menu[i] = el }"> '),Ys("   asd "),Ys("   </li> "),(Is(!0),Ms(Ss,null,An(s.value,((e,t)=>(Is(),Ms("li",Ld,[Hs(jd,{content:e},null,8,["content"])])))),256))],8,Fd)],512))},__file:"http_src/vue/dropdown.vue"};const Dd=e=>i18n(e);function zd(e){const t={button_list:Bd(!0),button_array:Bd(!1)};return(e,a,l,n)=>{if(null==e.render_v_node_type&&null==e.render_v_func)return null;if(1==n)return!0;if(null!=e.render_v_func)return e.render_v_func(e,a,l,n);return(0,t[e.render_v_node_type])(e,a,l)}}function qd(e){return(e,t,a)=>{if(null!=e.render_v_func)return null;if(1==a)return!0;let l;if(null!=e.data_field&&(l=t[e.data_field]),null!=e.zero_is_null&&null!=l&&0==l&&(l=""),null!=e.render_generic){return R.getFormatGenericField(e.render_generic,e.zero_is_null)(l,"display",t)}if(null!=e.render_func)return e.render_func(l,t);if(null!=e.render_type){if(null!=m.types[e.render_type])return e.render_func=m.getFormatter(e.render_type),e.render_func(l);if(null!=R[e.render_type])return R[e.render_type](l,"display",t,e.zero_is_null);throw`In column ${e.data_field} render_type: ${e.render_type} not found`}return l}}function Bd(e){return(t,a,l)=>{const n=e=>n=>{n.stopPropagation();let s={event_id:e,row:a,col:t};l.emit("custom_event",s)};let s=t.button_def_array.map((t=>{let s={};null!=t.attributes&&(s=t.attributes);let i=b.clone(t.class);null!=t.f_map_class&&(i=t.f_map_class(i,a));let o="";return null!=i&&i.length>0&&(o=i.join(" ")),0==e?l.h("button",{class:`btn btn-sm btn-secondary ${o}`,style:"margin-right:0.2rem;",onClick:n(t.event_id),...s},[l.h("span",{class:t.icon,style:"",title:Dd(t.title_i18n)})]):l.h("a",{class:`${o} btn-sm`,onClick:n(t.event_id),style:"display:block;",...s},[l.h("span",{class:t.icon,style:"margin-right:0.2rem;cursor:pointer;"}),Dd(t.title_i18n)])}));if(1==e){let e=l.h("span",{class:"fas fa-sm fa-align-justify"});return l.h(Rd,{auto_load:!0,button_style:"",button_class:"btn-secondary btn-sm"},{title:()=>e,menu:()=>s})}return l.h("div",{class:"button-group"},s)}}function Vd(e,t,a){let l=Gd(e);return async(n,s,i,o,r)=>{let c=i.find((e=>0!=e.sort)),u=i.filter((e=>1==e.visible)).map((e=>l(e))).join(","),d={start:n*s,length:s,map_search:o,visible_columns:u};if(null!=c&&(d.sort=l(c.data),d.order=1==c.sort?"asc":"desc"),null!=t){let e=t();d={...d,...e}}const _=x.obj_to_url_params(d),p=`${http_prefix}/${e.data_url}?${_}`;let f=await b.http_request(p,null,null,!0);null!=a&&a(d);let m=f.rsp;null!=e.rsp_records_field&&(m=f.rsp[e.rsp_records_field]);let v=f.query_info;return null!=e.rsp_query_info_field&&(v=f.rsp[e.rsp_query_info_field]),f.recordsFiltered>f.recordsTotal&&(f.recordsTotal=f.recordsFiltered),{total_rows:f.recordsTotal,rows:m,query_info:v}}}function Hd(e){return e=>null!=e.title_i18n?Dd(e.title_i18n):null!=e.title?e.title:""}function Gd(e){return t=>null!=t.id?t.id:null!=t.data_field?t.data_field:e.columns.findIndex((e=>e==t))}const Wd={get_columns_from_datatable_columns:function(e,t){let a=t.map(((t,a)=>{t.data,e[a],null==t.orderable||t.orderable,null!=t.className&&t.className.split(" "),null!=t.render&&(t.render_func=(e,a)=>t.render(e,"display",a))}));return a},build_table:async function(e,t,a,l,n){let s=`${e}/tables_config/${t}.json?epoch_end=${Number.parseInt(Date.now()/1e3)}`,i=await b.http_request(s,null,null,!0);return null==i?{id:t,columns:[]}:(null!=a&&(i.columns=await a(i.columns)),{id:t,columns:i.columns,get_rows:Vd(i,l,n),get_column_id:Gd(i),print_column_name:Hd(),print_html_row:qd(),print_vue_node_row:zd(),f_is_column_sortable:e=>e.sortable,f_get_column_classes:e=>{let t=e?.class;if(null!=t)return t;return[]},f_get_column_style:e=>{let t=e?.style;if(null!=t)return t;return""},display_empty_rows:i.display_empty_rows,enable_search:i.enable_search,default_sort:i.default_sort,show_autorefresh:i.show_autorefresh,paging:i.paging})}};let Kd={};async function Jd(e){return null==Kd[e]&&(Kd[e]=ntopng_utility.http_request(e)),await Kd[e]}const Yd=async function(e){e.filter((e=>null==e.label)).forEach((e=>{console.error(`label not defined for filter ${JSON.stringify(e)}`),e.label=""})),e.sort(((e,t)=>e.label.localeCompare(t.label))),i18n_ext.tags={},TAG_OPERATORS={},DEFINED_TAGS={},e.forEach((e=>{i18n_ext.tags[e.id]=e.label,e.operators.forEach((e=>TAG_OPERATORS[e.id]=e.label)),DEFINED_TAGS[e.id]=e.operators.map((e=>e.id))}));let t=ntopng_url_manager.get_url_entries(),a=[];for(const[e,l]of t){let t=FILTERS_CONST.find((t=>t.id==e));if(null!=t){l.split(",").forEach((e=>{let[l,n]=e.split(";");if(null==n||null==l||""==n||null!=t.options&&null==t.options.find((e=>e.value==l)))return;let s=l;"array"==t.value_type&&(s=t?.options?.find((e=>e.value==l))?.label),a.push({id:t.id,operator:n,value:l,label:t.label,value_label:s})}))}}return a};function Zd(e){let t={};e.forEach((e=>{let a=t[e.id];null==a&&(a=[],t[e.id]=a),a.push(e)}));let a={};for(let e in t){let l=t[e].filter((e=>null!=e.value&&null!=e.operator&&""!=e.operator)).map((e=>`${e.value};${e.operator}`)).join(",");a[e]=l}return a}const Xd={get_filter_const:Jd,get_filters_object:Zd,load_filters_data:Yd,tag_operator_label_dict:{eq:"=",neq:"!=",lt:"<",gt:">",gte:">=",lte:"<=",in:"contains",nin:"does not contain"}},Qd=["multiple","disabled"],e_=["selected","value","disabled"],t_=["label"],a_=["selected","value","disabled"];var l_={__name:"select-search",props:{id:String,options:Array,selected_option:Object,selected_options:Array,multiple:Boolean,add_tag:Boolean,disable_change:Boolean,theme:String,dropdown_size:String,disabled:Boolean},emits:["update:selected_option","update:selected_options","select_option","unselect_option","change_selected_options"],setup(e,{expose:t,emit:a}){const l=ma(null),n=a,s=ma([]),i=ma([]),o=ma({}),r=ma([]),c=ma(0),u=e;let d=!0;function _(){!function(){if(s.value=[],i.value=[],null==u.options)return;let e={};u.options.forEach((t=>{let a={...t};null==a.value&&(a.value=a.label),null==t.group?s.value.push(a):(null==e[t.group]&&(e[t.group]={group:a.group,options:[]}),e[t.group].options.push(a))})),i.value=ntopng_utility.object_to_array(e),c.value+=1}(),h(),v()}_n((()=>{u.options&&(u.disable_change&&d||_())})),jl((()=>u.selected_option),((e,t)=>{h(e),f()}),{flush:"pre"}),jl((()=>u.selected_options),((e,t)=>{v(),f()}),{flush:"pre"}),jl([c],((e,t)=>{p()}),{flush:"post"}),jl((()=>u.options),((e,t)=>{1!=u.disable_change&&null!=e&&_()}),{flush:"pre"});const p=()=>{let e=l.value;0==d&&x(),$(e).hasClass("select2-hidden-accessible")||($(e).select2({width:"100%",theme:u.theme?u.theme:"bootstrap-5",dropdownParent:$(e).parent(),dropdownAutoWidth:!0,tags:u.add_tag&&!u.multiple,selectionCssClass:"small"==u.dropdown_size?"select2--small":"",dropdownCssClass:"small"==u.dropdown_size?"select2--small":""}),$(e).on("select2:select",(function(e){let t=e.params.data;if(null===t.element){let e={label:t.text,value:t.id};return n("update:selected_option",e),void n("select_option",e)}let a=t.element._value,l=w(a);if(a!==u.selected_option&&(n("update:selected_option",l),n("select_option",l)),!u.multiple)return;r.value=r.value.filter((e=>e!=a)),r.value.push(a);let s=y(r.value);n("update:selected_options",s),n("change_selected_options",s)})),$(e).on("select2:unselect",(function(e){let t=e.params.data.element._value;if(!u.multiple)return;r.value=r.value.filter((e=>e!=t));let a=w(t),l=y(r.value);n("unselect_option",a),n("update:selected_options",l),n("change_selected_options",l)}))),d=!1,f()};function f(){let e=l.value;if(u.multiple)$(e).val(r.value),$(e).trigger("change");else{let t=b(u.selected_option);$(e).val(t),$(e).trigger("change")}}function m(e){if(!u.multiple){const t=0==o.value.value||"0"==o.value.value;return e.value==o.value.value||t&&e.label==o.value.label}return null!=r.value.find((t=>t==e.value))||e.selected}function v(){null!=u.selected_options&&u.multiple&&(r.value=[],u.selected_options.forEach((e=>{let t=e.value||e.label;r.value.push(t)})))}function h(e){null!=e||u.multiple||(e=g()),o.value=e}function g(){return null==u.selected_option?u.options[0]:u.selected_option}function b(e){let t;return null==e&&(e=g()),t=null!=e.value?e.value:e.label,t}function y(e){let t=e.map((e=>w(e)));return t}function w(e){let t=function(e){null==e&&(e=b());let t=s.value.find((t=>t.value===e));if(null!=t)return t;for(let a=0;a<i.value.length;a+=1){if(t=i.value[a].options.find((t=>t.value===e)),null!=t)return t}return null}(e),a=u.options.find((e=>e.value===t.value||e.label==t.label));return a}function x(){try{$(l.value).select2("destroy"),$(l.value).off("select2:select")}catch(e){console.error("Destroy select-search catch error:"),console.error(e)}}return t({render:p}),mn((()=>{x()})),(t,a)=>(Is(),Ms("select",{class:"select2 form-select",ref_key:"select2",ref:l,required:"",name:"filter_type",multiple:e.multiple,disabled:e.disabled},[(Is(!0),Ms(Ss,null,An(s.value,((e,t)=>(Is(),Ms("option",{class:"no-wrap p-0",selected:m(e),value:e.value,disabled:e.disabled},te(e.label),9,e_)))),256)),(Is(!0),Ms(Ss,null,An(i.value,((e,t)=>(Is(),Ms("optgroup",{label:e.group},[(Is(!0),Ms(Ss,null,An(e.options,((e,t)=>(Is(),Ms("option",{selected:m(e),value:e.value,disabled:e.disabled},te(e.label),9,a_)))),256))],8,t_)))),256))],8,Qd))},__file:"http_src/vue/select-search.vue"},n_=Jl({components:{},props:{id:String,main_title:Object,secondary_title_list:Array,help_link:String,items_table:Array},emits:["click_item"],created(){},data:()=>({}),mounted(){ntopng_sync.ready(this.$props.id)},methods:{}});const s_={class:"navbar navbar-shadow navbar-expand-lg navbar-light bg-light px-2 mb-2"},i_={class:"me-1 text-nowrap",style:{"font-size":"1.1rem"}},o_=["href","title"],r_=["title"],c_=["href","title"],u_=["title"],d_=Vs("span",{class:"text-muted ms-1 d-none d-lg-inline d-md-none"},"|",-1),__=Vs("button",{class:"navbar-toggler",type:"button"},[Vs("span",{class:"navbar-toggler-icon"})],-1),p_={class:"collapse navbar-collapse scroll-x",id:"navbarNav"},f_={class:"navbar-nav"},m_=["onClick"],v_={key:0,class:"badge rounded-pill bg-dark",style:{float:"right","margin-bottom":"-10px"}},h_=["onClick"],g_={key:0,class:"badge rounded-pill bg-dark",style:{float:"right","margin-bottom":"-10px"}},b_=["onClick"],y_={key:0,class:"badge rounded-pill bg-dark",style:{float:"right","margin-bottom":"-10px"}},w_={class:"navbar-nav ms-auto"},x_=Vs("a",{href:"javascript:history.back()",class:"nav-item nav-link text-muted"},[Vs("i",{class:"fas fa-arrow-left"})],-1),k_=["href"],$_=[Vs("i",{class:"fas fa-question-circle"},null,-1)];n_.render=function(e,t,a,l,n,s){return Is(),Ms("nav",s_,[Vs("span",i_,[Vs("i",{class:K(e.main_title.icon)},null,2),e.main_title.href?(Is(),Ms("a",{key:0,href:e.main_title.href,title:e.main_title.title},te(e.main_title.label),9,o_)):(Is(),Ms("span",{key:1,title:e.main_title.title},te(e.main_title.label),9,r_)),(Is(!0),Ms(Ss,null,An(e.secondary_title_list,(e=>(Is(),Ms(Ss,null,[Ks(" / "),e.href?(Is(),Ms("a",{key:0,class:K(e.class),href:e.href,title:e.title},[Ks(te(e.label)+" ",1),e.icon?(Is(),Ms("i",{key:0,class:K(e.icon)},null,2)):Ys("v-if",!0)],10,c_)):(Is(),Ms("span",{key:1,title:e.title},te(e.label),9,u_))],64)))),256))]),d_,__,Vs("div",p_,[Vs("ul",f_,[(Is(!0),Ms(Ss,null,An(e.items_table,(e=>(Is(),Ms(Ss,null,[e.active?(Is(),Ms(Ss,{key:0},[e.active?(Is(),Ms("li",{key:0,onClick:t=>this.$emit("click_item",e),class:K(["nav-item nav-link active",e.class])},[e.badge_num>0?(Is(),Ms("span",v_,te(e.badge_num),1)):Ys("v-if",!0),Vs("b",null,[Vs("i",{class:K(e.icon)},null,2),Ks(" "+te(e.label),1)])],10,m_)):(Is(),Ms("li",{key:1,onClick:t=>this.$emit("click_item",e),class:K(["nav-item nav-link",e.class])},[e.badge_num>0?(Is(),Ms("span",g_,te(e.badge_num),1)):Ys("v-if",!0),Vs("b",null,[Vs("i",{class:K(e.icon)},null,2),Ks(" "+te(e.label),1)])],10,h_))],64)):(Is(),Ms("a",{key:1,onClick:t=>this.$emit("click_item",e),href:"#",class:K(["nav-item nav-link",e.class])},[e.badge_num>0?(Is(),Ms("span",y_,te(e.badge_num),1)):Ys("v-if",!0),Vs("i",{class:K(e.icon)},null,2),Ks(" "+te(e.label),1)],10,b_))],64)))),256))]),Vs("ul",w_,[x_,Vs("a",{target:"_newtab",href:e.help_link,class:"nav-item nav-link text-muted"},[...$_],8,k_)])])])},n_.__file="http_src/vue/page-navbar.vue";var S_=Jl({components:{},props:{id:String,global:Boolean,no_close_button:Boolean},emits:[],created(){},data:()=>({show_alert:!1,i18n:e=>i18n(e),body:"",alert_type:"alert-success"}),mounted(){1==this.global&&ntopng_events_manager.on_custom_event(this.$props.id,ntopng_custom_events.SHOW_GLOBAL_ALERT_INFO,(e=>{null!=e.type&&(this.alert_type=e.type),null!=e.timeout&&setTimeout((()=>{this.close()}),1e3*e.timeout),this.show(e.text_html)}))},methods:{close:function(){this.show_alert=!1},show:function(e,t){this.show_alert=!0,this.body=e,null!=t&&(this.alert_type=t)}}});const N_=["innerHTML"];S_.render=function(e,t,a,l,n,s){return 1==e.show_alert?(Is(),Ms("div",{key:0,style:{width:"100%"},class:K(["alert alert-dismissable",e.alert_type])},[Vs("span",{innerHTML:e.body},null,8,N_),e.no_close_button?Ys("v-if",!0):(Is(),Ms("button",{key:0,type:"button",onClick:t[0]||(t[0]=(...t)=>e.close&&e.close(...t)),class:"btn-close","aria-label":"Close"}))],2)):Ys("v-if",!0)},S_.__file="http_src/vue/alert-info.vue";var C_={components:{},props:{id:String,chart_type:String,register_on_status_change:Boolean,not_emit_global_status_update:Boolean,base_url_request:String,get_params_url_request:Function,get_custom_chart_options:Function,map_chart_options:Function,min_time_interval_id:String,round_time:Boolean},emits:["apply","hidden","showed","chart_reloaded","zoom"],created(){},beforeUnmount(){this.chart.destroyChart()},data:()=>({chart:null,chart_options:null,from_zoom:!1}),async mounted(){await this.init(),ntopng_sync.ready(this.$props.id)},methods:{init:async function(){let e=ntopng_status_manager.get_status(),t=this.get_url_request(e);this.register_on_status_change&&this.register_status(e),await this.draw_chart(t)},get_data_uri:async function(e){if(null==this.chart)return null;return await this.chart.to_data_uri()},download_chart_png:async function(e,t){if(null==this.chart)return;let a=await this.chart.to_data_uri();downloadURI(a,e)},register_status:function(e){let t=this.get_url_request(e);ntopng_status_manager.on_status_change(this.id,(e=>{1==this.from_zoom&&(this.from_zoom=!1);let a=this.get_url_request(e);a!=t?(t=a,this.update_chart(a)):t=a}),!1)},get_url_request:function(e){let t;return null!=this.get_params_url_request?(null==e&&(e=ntopng_status_manager.get_status()),t=this.get_params_url_request(e)):t=x.get_url_params(),`${this.base_url_request}?${t}`},draw_chart:async function(e){let t=ntopChartApex,a=this.chart_type;null==a&&(a=t.typeChart.TS_STACKED),this.chart=t.newChart(a);let l=this;this.chart.registerEvent("beforeZoom",(function(e,t){l.on_before_zoom(e,t)})),this.chart.registerEvent("zoomed",(function(e,t){l.on_zoomed(e,t)}));let n=await this.get_chart_options(e);this.chart.drawChart(this.$refs.chart,n)},update_chart:async function(e){null==e&&(e=this.get_url_request());let t=await this.get_chart_options(e);this.chart.updateChart(t)},update_chart_options:function(e){this.chart.updateChart(e)},update_chart_series:function(e){null!=e&&this.chart.updateSeries(e)},get_chart_options:async function(e){let t;return t=null==this.get_custom_chart_options?await b.http_request(e):await this.get_custom_chart_options(e),null!=this.map_chart_options&&(t=this.map_chart_options(t)),this.$emit("chart_reloaded",t),t},on_before_zoom:function(e,{xaxis:t,yaxis:a}){let l=this.get_epoch_from_xaxis_event(t);if(null!=this.min_time_interval_id){const e=b.get_timeframe_from_timeframe_id(this.min_time_interval_id);l.epoch_end-l.epoch_begin<e&&(l.epoch_end=l.epoch_end+e,l.epoch_end=l.epoch_end-l.epoch_end%e,l.epoch_begin=l.epoch_end-e),1==this.round_time&&(l.epoch_begin=b.round_time_by_timeframe_id(l.epoch_begin,this.min_time_interval_id),l.epoch_end=b.round_time_by_timeframe_id(l.epoch_end,this.min_time_interval_id)),t.min=1e3*l.epoch_begin,t.max=1e3*l.epoch_end}return t},on_zoomed:function(e,{xaxis:t,yaxis:a}){this.from_zoom=!0;const l=this.get_epoch_from_xaxis_event(t);this.not_emit_global_status_update||C.emit_event(ntopng_events.EPOCH_CHANGE,l,this.id),this.$emit("zoom",l)},get_epoch_from_xaxis_event:function(e){const t=moment(e.min),a=moment(e.max);return{epoch_begin:Number.parseInt(t.unix()),epoch_end:Number.parseInt(a.unix())}}}};const E_={style:{width:"100%"},ref:"chart"};C_.render=function(e,t,a,l,n,s){return Is(),Ms("div",E_,null,512)},C_.__file="http_src/vue/chart.vue";var A_={components:{"select-search":l_},props:{id:String,enable_refresh:Boolean,disabled_date_picker:Boolean,min_time_interval_id:String,round_time:Boolean,custom_time_interval_list:Array},computed:{invalid_date_message:function(){if(this.wrong_date)return this.i18n("wrong_date_range");if(this.wrong_min_interval){let e=this.i18n("wrong_min_interval");return e.replace("%time_interval",this.i18n(`show_alerts.presets.${this.min_time_interval_id}`)),e}}},watch:{enable_refresh:function(e,t){1==e?this.start_refresh():null!=this.refresh_interval&&(clearInterval(this.refresh_interval),this.refresh_interval=null)},min_time_interval_id:function(){},round_time:function(){}},emits:["epoch_change"],created(){},beforeMount(){if(null!=this.$props.custom_time_interval_list&&(this.time_preset_list=this.$props.custom_time_interval_list),null==this.min_time_interval_id)return void(this.time_preset_list_filtered=this.time_preset_list);const e=this.get_timeframes_available(),t=e[this.min_time_interval_id];this.time_preset_list_filtered=this.time_preset_list.filter((a=>"custom"==a.value||(null==t||e[a.value]>=t)))},mounted(){let e=x.get_url_entry("epoch_begin"),t=x.get_url_entry("epoch_end");null!=e&&null!=t&&this.emit_epoch_change({epoch_begin:Number.parseInt(e),epoch_end:Number.parseInt(t)},this.$props.id,!0);let a=this,l=(e,t)=>flatpickr($(this.$refs[e]),{enableTime:!0,dateFormat:"d/m/Y H:i",time_24hr:!0,clickOpens:!0,onChange:function(e,t,l){a.enable_apply=!0,a.wrong_date=a.flat_begin_date.selectedDates[0].getTime()>a.flat_end_date.selectedDates[0].getTime(),a.wrong_min_interval=a.min_time_interval_id&&a.get_utc_seconds(a.flat_end_date.selectedDates[0].getTime()-a.flat_begin_date.selectedDates[0].getTime()<b.get_timeframe_from_timeframe_id(a.min_time_interval_id))}});this.flat_begin_date=l("begin-date"),this.flat_end_date=l("end-date"),C.on_event_change(this.$props.id,ntopng_events.EPOCH_CHANGE,(e=>this.on_status_updated(e)),!0),ntopng_sync.ready(this.$props.id),this.enable_refresh&&this.start_refresh()},methods:{start_refresh:function(){this.refresh_interval=setInterval((()=>{let e=this.selected_time_option?.value;this.enable_refresh&&null!=e&&"custom"!=e&&(this.update_from_interval=!0,this.change_select_time(!0))}),1e3*this.refresh_interval_seconds)},utc_s_to_server_date:function(e){let t=1e3*e,a=new Date(t).getTimezoneOffset(),l=moment.tz(t,ntop_zoneinfo)._offset;return new Date(t+1e3*(l+a)*60)},server_date_to_date:function(e,t){let a=e.getTime(),l=e.getTimezoneOffset(),n=moment.tz(a,ntop_zoneinfo)._offset;return new Date(a-1e3*(n+l)*60)},on_status_updated:function(e){let t=Date.now(),a=t-18e5;null!=e.epoch_end&&null!=e.epoch_begin&&Number.parseInt(e.epoch_end)>Number.parseInt(e.epoch_begin)?(e.epoch_begin=Number.parseInt(e.epoch_begin),e.epoch_end=Number.parseInt(e.epoch_end),t=1e3*e.epoch_end,a=1e3*e.epoch_begin):(e.epoch_end=this.get_utc_seconds(t),e.epoch_begin=this.get_utc_seconds(a),x.add_obj_to_url(e),this.emit_epoch_change(e,this.$props.id)),this.flat_begin_date.setDate(this.utc_s_to_server_date(e.epoch_begin)),this.flat_end_date.setDate(this.utc_s_to_server_date(e.epoch_end)),this.set_select_time_value(a,t),this.epoch_status={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end},0==this.update_from_interval&&this.add_status_in_history(this.epoch_status),this.enable_apply=!1,this.update_from_interval=!1,x.add_obj_to_url(this.epoch_status)},set_select_time_value:function(e,t){const a=this.get_timeframes_available();let l=this.get_utc_seconds(Date.now());1==this.round_time&&null!=this.min_time_interval_id&&(l=this.round_time_by_min_interval(l));const n=this.get_utc_seconds(t),s=this.get_utc_seconds(e);if(this.is_between(n,l,60)){this.select_time_value=null;for(let e in a)this.is_between(s,l-a[e],60)&&(this.select_time_value=e);null==this.select_time_value&&(this.select_time_value="custom")}else this.select_time_value="custom";this.time_preset_list_filtered.forEach((e=>{e.currently_active=!1,e.value==this.select_time_value&&(this.selected_time_option=e,e.currently_active=!0)}))},apply:function(){let e=this.get_utc_seconds(Date.now()),t=this.server_date_to_date(this.flat_begin_date.selectedDates[0]),a=this.get_utc_seconds(t.getTime()),l=this.server_date_to_date(this.flat_end_date.selectedDates[0]),n=this.get_utc_seconds(l.getTime());n>e&&(n=e);let s={epoch_begin:a,epoch_end:n};this.emit_epoch_change(s)},change_select_time:function(e){let t=this.get_timeframes_available()[this.selected_time_option.value],a=this.get_utc_seconds(Date.now()),l={epoch_begin:a-t,epoch_end:a,refresh_data:e};this.emit_epoch_change(l)},get_timeframes_available:function(){const e=b.get_timeframes_dict(),t=this.time_preset_list.map((e=>e.value));let a={};return t.forEach((t=>{a[t]=e[t]})),a},get_utc_seconds:function(e){return b.get_utc_seconds(e)},is_between:function(e,t,a){return e>=t-a&&e<=t},zoom:function(e){if(null==this.epoch_status)return;let t=(this.epoch_status.epoch_end-this.epoch_status.epoch_begin)/e,a=this.epoch_status.epoch_end/2+this.epoch_status.epoch_begin/2;this.epoch_status.epoch_begin=a-t/2,this.epoch_status.epoch_end=a+t/2;let l=this.get_utc_seconds(Date.now());this.epoch_status.epoch_end>l&&(this.epoch_status.epoch_end=l),this.epoch_status.epoch_end=Number.parseInt(this.epoch_status.epoch_end),this.epoch_status.epoch_begin=Number.parseInt(this.epoch_status.epoch_begin),this.epoch_status.epoch_begin==this.epoch_status.epoch_end&&(this.epoch_status.epoch_begin-=2),this.emit_epoch_change(this.epoch_status)},jump_time_back:function(){if(null==this.epoch_status)return;this.epoch_status.epoch_begin-=1800,this.epoch_status.epoch_end-=1800,this.emit_epoch_change(this.epoch_status)},jump_time_ahead:function(){if(null==this.epoch_status)return;let e=this.epoch_status.epoch_end,t=this.get_utc_seconds(Date.now());this.epoch_status.epoch_end+=1800,this.epoch_status.epoch_end>t&&(this.epoch_status.epoch_end=t),this.epoch_status.epoch_begin+=this.epoch_status.epoch_end-e,this.emit_epoch_change(this.epoch_status)},emit_epoch_change:function(e,t,a){null!=e.epoch_end&&null!=e.epoch_begin&&(this.wrong_date=!1,e.epoch_begin>e.epoch_end?this.wrong_date=!0:(this.min_time_interval_id&&1==this.round_time&&(e.epoch_begin=this.round_time_by_min_interval(e.epoch_begin),e.epoch_end=this.round_time_by_min_interval(e.epoch_end)),t!=this.id&&this.on_status_updated(e),C.emit_event(ntopng_events.EPOCH_CHANGE,e,this.id),a||this.$emit("epoch_change",e)))},round_time_by_min_interval:function(e){return b.round_time_by_timeframe_id(e,this.min_time_interval_id)},add_status_in_history:function(e){this.history_last_status=this.history[this.history.length-1],this.history.length>5&&this.history.shift(),this.history.push(e)},apply_status_by_history:function(){null!=this.history_last_status&&(this.history.pop(),this.history.pop(),this.emit_epoch_change(this.history_last_status))}},data:()=>({i18n:e=>i18n(e),epoch_status:null,refresh_interval:null,refresh_interval_seconds:60,update_from_interval:!1,history:[],history_last_status:null,enable_apply:!1,select_time_value:"5_min",selected_time_option:{value:"5_min",label:i18n("show_alerts.presets.5_min"),currently_active:!1},wrong_date:!1,wrong_min_interval:!1,flat_begin_date:null,flat_end_date:null,time_preset_list:[{value:"5_min",label:i18n("show_alerts.presets.5_min"),currently_active:!1},{value:"10_min",label:i18n("show_alerts.presets.10_min"),currently_active:!1},{value:"30_min",label:i18n("show_alerts.presets.30_min"),currently_active:!0},{value:"hour",label:i18n("show_alerts.presets.hour"),currently_active:!1},{value:"2_hours",label:i18n("show_alerts.presets.2_hours"),currently_active:!1},{value:"6_hours",label:i18n("show_alerts.presets.6_hours"),currently_active:!1},{value:"12_hours",label:i18n("show_alerts.presets.12_hours"),currently_active:!1},{value:"day",label:i18n("show_alerts.presets.day"),currently_active:!1},{value:"week",label:i18n("show_alerts.presets.week"),currently_active:!1},{value:"month",label:i18n("show_alerts.presets.month"),currently_active:!1},{value:"year",label:i18n("show_alerts.presets.year"),currently_active:!1},{value:"custom",label:i18n("show_alerts.presets.custom"),currently_active:!1,disabled:!0}],time_preset_list_filtered:[]})};const T_=e=>(pl("data-v-6ae24a28"),e=e(),fl(),e),I_={class:"input-group"},O_={class:"form-group"},P_={class:"controls"},U_={class:"btn-group me-auto btn-group-sm flex-wrap d-flex"},j_={class:"btn-group ms-2"},M_=T_((()=>Vs("span",{class:"input-group-text"},[Vs("i",{class:"fas fa-calendar-alt"})],-1))),F_=["disabled"],L_=T_((()=>Vs("span",{class:"input-group-text"},[Vs("i",{class:"fas fa-long-arrow-alt-right"})],-1))),R_=["disabled"],D_=["title"],z_=[T_((()=>Vs("i",{class:"fas fa-exclamation-circle"},null,-1)))],q_={class:"d-flex align-items-center ms-2"},B_=["disabled"],V_={class:"btn-group"},H_=["disabled","title"],G_=[T_((()=>Vs("i",{class:"fas fa-long-arrow-alt-left"},null,-1)))],W_=["disabled","title"],K_=[T_((()=>Vs("i",{class:"fas fa-long-arrow-alt-right"},null,-1)))],J_=["disabled","title"],Y_=[T_((()=>Vs("i",{class:"fas fa-search-plus"},null,-1)))],Z_=["disabled","title"],X_=[T_((()=>Vs("i",{class:"fas fa-search-minus"},null,-1)))],Q_=["disabled","title"],ep=[T_((()=>Vs("i",{class:"fas fa-undo"},null,-1)))],tp=["disabled","title"],ap=[T_((()=>Vs("i",{class:"fas fa-sync"},null,-1)))];function lp(e,t){void 0===t&&(t={});var a=t.insertAt;if(e&&"undefined"!=typeof document){var l=document.head||document.getElementsByTagName("head")[0],n=document.createElement("style");n.type="text/css","top"===a&&l.firstChild?l.insertBefore(n,l.firstChild):l.appendChild(n),n.styleSheet?n.styleSheet.cssText=e:n.appendChild(document.createTextNode(e))}}lp("\n.date_time_input[data-v-6ae24a28] {\n    width: 10.5rem;\n    max-width: 10.5rem;\n    min-width: 10.5rem;\n}\n"),A_.render=function(e,t,a,l,n,s){const i=kn("select-search");return Is(),Ms("div",I_,[Vs("div",O_,[Vs("div",P_,[Vs("div",U_,[In(e.$slots,"begin"),Vs("div",null,[Hs(i,{disabled:a.disabled_date_picker,selected_option:n.selected_time_option,"onUpdate:selected_option":t[0]||(t[0]=e=>n.selected_time_option=e),id:"time_preset_range_picker",options:n.time_preset_list_filtered,onSelect_option:t[1]||(t[1]=e=>s.change_select_time(null))},null,8,["disabled","selected_option","options"])]),Vs("div",j_,[M_,Vs("input",{disabled:a.disabled_date_picker,class:"flatpickr flatpickr-input form-control",type:"text",placeholder:"Choose a date..","data-id":"datetime",ref:"begin-date",style:{width:"10rem"}},null,8,F_),Ys(' <input ref="begin-date" @change="enable_apply=true" @change="change_begin_date" type="date" class="date_time_input begin-timepicker form-control border-right-0 fix-safari-input"> '),Ys(' <input ref="begin-time" @change="enable_apply=true" type="time" class="date_time_input begin-timepicker form-control border-right-0 fix-safari-input"> '),L_,Vs("input",{disabled:a.disabled_date_picker,class:"flatpickr flatpickr-input form-control",type:"text",placeholder:"Choose a date..","data-id":"datetime",ref:"end-date",style:{width:"10rem"}},null,8,R_),Ys(' <input ref="end-date" @change="enable_apply=true" type="date" class="date_time_input end-timepicker form-control border-left-0 fix-safari-input" style="width: 2.5rem;"> '),Ys(' <input ref="end-time" @change="enable_apply=true" type="time" class="date_time_input end-timepicker form-control border-left-0 fix-safari-input"> '),wn(Vs("span",{title:s.invalid_date_message,style:{"margin-left":"0.2rem",color:"red"}},[...z_],8,D_),[[Yo,n.wrong_date||n.wrong_min_interval]])]),Vs("div",q_,[Vs("button",{disabled:!n.enable_apply||n.wrong_date||n.wrong_min_interval,onClick:t[2]||(t[2]=(...e)=>s.apply&&s.apply(...e)),type:"button",class:"btn btn-sm btn-primary"},te(n.i18n("apply")),9,B_),Vs("div",V_,[Vs("button",{disabled:a.disabled_date_picker,onClick:t[3]||(t[3]=e=>s.jump_time_back()),type:"button",class:"btn btn-sm btn-link",ref:"btn-jump-time-back",title:n.i18n("date_time_range_picker.btn_move_left")},[...G_],8,H_),Vs("button",{disabled:a.disabled_date_picker,onClick:t[4]||(t[4]=e=>s.jump_time_ahead()),type:"button",class:"btn btn-sm btn-link me-2",ref:"btn-jump-time-ahead",title:n.i18n("date_time_range_picker.btn_move_right")},[...K_],8,W_),Vs("button",{disabled:a.disabled_date_picker,onClick:t[5]||(t[5]=e=>s.zoom(2)),type:"button",class:"btn btn-sm btn-link",ref:"btn-zoom-in",title:n.i18n("date_time_range_picker.btn_zoom_in")},[...Y_],8,J_),Vs("button",{disabled:a.disabled_date_picker,onClick:t[6]||(t[6]=e=>s.zoom(.5)),type:"button",class:"btn btn-sm btn-link",ref:"btn-zoom-out",title:n.i18n("date_time_range_picker.btn_zoom_out")},[...X_],8,Z_),Vs("button",{disabled:null==n.history_last_status||a.disabled_date_picker,type:"button",onClick:t[7]||(t[7]=e=>s.apply_status_by_history()),class:"btn btn-sm btn-link",title:n.i18n("date_time_range_picker.btn_undo")},[...ep],8,Q_),Vs("button",{disabled:"custom"==n.select_time_value||a.disabled_date_picker,onClick:t[8]||(t[8]=e=>s.change_select_time()),type:"button",class:"btn btn-sm btn-link",title:n.i18n("date_time_range_picker.btn_refresh")},[...ap],8,tp),In(e.$slots,"extra_buttons")])])])])])])},A_.__scopeId="data-v-6ae24a28",A_.__file="http_src/vue/date-time-range-picker.vue";var np=Jl({components:{},props:{id:String},emits:["hidden","showed","closeModal","openModal"],created(){},data:()=>({}),mounted(){let e=this;$(this.$refs.modal_id).on("shown.bs.modal",(function(t){e.$emit("showed")})),$(this.$refs.modal_id).on("hidden.bs.modal",(function(t){e.$emit("hidden")})),ntopng_sync.ready(this.$props.id)},methods:{show:function(){$(this.$refs.modal_id).modal("show"),this.$emit("openModal")},preventEnter:function(){},close:function(){$(this.$refs.modal_id).modal("hide"),this.$emit("closeModal")}}});const sp={class:"modal-dialog modal-dialog-centered modal-lg",role:"document"},ip={class:"modal-content"},op={class:"modal-header"},rp={class:"modal-title"},cp=Vs("div",{class:"modal-close"},[Vs("button",{type:"button",class:"btn-close","data-bs-dismiss":"modal","aria-label":"Close"})],-1),up={class:"modal-body"},dp={class:"modal-footer"},_p=Vs("div",{class:"mr-auto"},null,-1),pp=Vs("div",{class:"alert alert-info test-feedback w-100",style:{display:"none"}},null,-1);np.render=function(e,t,a,l,n,s){return Is(),Ms("div",{onSubmit:t[0]||(t[0]=Wo(((...t)=>e.preventEnter&&e.preventEnter(...t)),["prevent"])),class:"modal fade",ref:"modal_id",tabindex:"-1",role:"dialog","aria-labelledby":"dt-add-filter-modal-title","aria-hidden":"true"},[Vs("div",sp,[Vs("div",ip,[Vs("div",op,[Vs("h5",rp,[In(e.$slots,"title")]),cp]),Vs("div",up,[In(e.$slots,"body")]),Vs("div",dp,[_p,In(e.$slots,"footer"),pp])])])],544)},np.__file="http_src/vue/modal.vue";const fp={ipv4:String.raw`^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$`,ipv6:String.raw`^(?:(?:[a-fA-F\d]{1,4}:){7}(?:[a-fA-F\d]{1,4}|:)|(?:[a-fA-F\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|:[a-fA-F\d]{1,4}|:)|(?:[a-fA-F\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,2}|:)|(?:[a-fA-F\d]{1,4}:){4}(?:(?::[a-fA-F\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,3}|:)|(?:[a-fA-F\d]{1,4}:){3}(?:(?::[a-fA-F\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,4}|:)|(?:[a-fA-F\d]{1,4}:){2}(?:(?::[a-fA-F\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,5}|:)|(?:[a-fA-F\d]{1,4}:){1}(?:(?::[a-fA-F\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,6}|:)|(?::(?:(?::[a-fA-F\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,7}|:)))(?:%[0-9a-zA-Z]{1,})?$`,mac_address:String.raw`^([0-9A-Fa-f]{2}:){5}([0-9A-Fa-f]{2})$`,comma_separted_port_regex:String.raw`^(\d{1,5})(,\s*\d{1,5})*$`,port_range_regex:String.raw`^(\d{1,5})-(\d{1,5})$`,host_name:String.raw`^(?!\s*$)[a-zA-Z0-9._: \-\/]{1,250}|^[a-zA-Z0-9._: \-\/]{1,250}@[0-9]{0,5}`,singleword:String.raw`^(?=[a-zA-Z0-9._:\-]{3,253}$)(?!.*[_.:\-]{2})[^_.:\-].*[^_.:\-]$`},mp=e=>vp(e)||hp(e),vp=e=>new RegExp(fp.ipv4).test(e),hp=e=>new RegExp(fp.ipv6).test(e),gp=a;function bp(e){if("text"==e)return".*";if("vlan"==e){return String.raw`@(([1-9])|([1-9][0-9]{1,2})|([1-3][0-9]{3})|(40[0-8][0-9])|(409[0-5]))`}if("ip"==e||"cidr"==e){let t=bp("vlan"),a=gp.REGEXES.ipv4,l=a.replaceAll("$",`${t}$`),n=gp.REGEXES.ipv6,s=n.replaceAll("$",`${t}$`);if("cidr"==e){let e=String.raw`(\/(([1-9])|([1-2][0-9])|(3[0-2])))`,l=a.replaceAll("$",`${e}$`),s=a.replaceAll("$",`${e}${t}$`),i=String.raw`(\/(([1-9])|([1-9][0-9])|(1[0-1][0-9])|(12[0-8])))`;return`(${l}|${s}|${n.replaceAll("$",`${i}$`)}|${n.replaceAll("$",`${i}${t}$`)})`}return`(${a})|(${l})|(${n})|(${s})`}if("mac"==e)return gp.REGEXES.macAddress;if("ip,cidr"==e){return`(${bp("ip")})|(${bp("cidr")})`}return gp.REGEXES[e]}const yp={get_data_pattern:bp,validateIP:mp,validateIPv4:vp,validateIPv6:hp,validateHostName:e=>new RegExp(fp.host_name).test(e),validateCommaSeparatedPortList:e=>new RegExp(fp.comma_separted_port_regex).test(e),validatePortRange:e=>{const t=e.split("-",2),a=Number(t[0]),l=Number(t[1]);return!isNaN(a)&&!isNaN(l)&&(a>0&&a<l&&l<65536)},validateSingleWord:e=>new RegExp(fp.singleword).test(e)};var wp={components:{modal:np,"select-search":l_},props:{id:String,filters_options:Array},updated(){},data(){return{i18n:e=>i18n(e),jQuery:$,id_modal:`${this.$props.id}_modal`,filter_type_selected:{},filter_type_label_selected:null,operator_selected:{},option_selected:{},input_value:null,input_type:null,data_pattern_selected:null,input_required:!1,options_to_show:null,operators_to_show:[]}},emits:["apply"],created(){},async mounted(){await ntopng_sync.on_ready(this.id_modal),ntopng_events_manager.on_custom_event(this.$props.id,ntopng_custom_events.SHOW_MODAL_FILTERS,(e=>this.show(e))),ntopng_sync.ready(this.$props.id)},methods:{show:function(e){null!=this.$props.filters_options&&0!=this.$props.filters_options.length&&(null!=e?(this.filter_type_selected=e,this.change_filter(e)):(this.filter_type_selected=this.$props.filters_options[0],this.change_filter()),this.$refs.modal.show())},post_change:function(e,t){e.id&&this.$props.filters_options&&(this.filter_type_selected=this.$props.filters_options.find((t=>t.id==e.id))),null!=e.value&&(this.options_to_show?this.option_selected=this.options_to_show.find((t=>t.value==e.value)):(this.option_selected={},this.input_value=e.value,this.data_pattern_selected=this.get_data_pattern(t))),e.operator&&this.operators_to_show&&(this.operator_selected=this.operators_to_show.find((t=>t.id==e.operator)))},change_operator_type:function(e){this.operator_selected=e},change_data_filter:function(e){this.option_selected=e},change_input_value:function(e){this.input_value=e},change_filter:function(e){this.options_to_show=null,this.option_selected=null,this.input_value=null;let t=this.$props.filters_options.find((e=>e.id==this.filter_type_selected.id));null!=t&&(this.input_type=t.type,this.operators_to_show=t.operators,this.filter_type_label_selected=t.label,"select"==this.input_type?(this.options_to_show=t.options.sort(((e,t)=>null==e||null==e.label?-1:null==t||null==t.label?1:e.label.toString().localeCompare(t.label.toString()))),this.option_selected=this.options_to_show[0]):"select-with-input"==this.input_type?(this.options_to_show=t.options?.sort(((e,t)=>null==e||null==e.label?-1:null==t||null==t.label?1:e.label.toString().localeCompare(t.label.toString()))),this.option_selected=this.options_to_show[0],this.data_pattern_selected=this.get_data_pattern(t.value_type)):(this.options_to_show=null,this.data_pattern_selected=this.get_data_pattern(t.value_type)),t.operators&&null==this.operator_selected?.id&&(this.operator_selected=t.operators[0]),null!=e&&this.post_change(e,t.value_type))},get_data_pattern:function(e){return this.input_required=!0,"text"==e?(this.input_required=!1,".*"):yp.get_data_pattern(e)},check_disable_apply:function(){let e=new RegExp(this.data_pattern_selected);return!this.options_to_show&&(this.input_required&&(null==this.input_value||""==this.input_value)||0==e.test(this.input_value))},apply:function(){let e=this.input_value,t=this.input_value;if(null==e||null!=this.option_selected?.value){let a=this.filters_options.find((e=>e.id==this.filter_type_selected.id)),l=a.options.find((e=>e.value==this.option_selected.value));null==l&&(l=this.option_selected),e=l.value,t=l.value_label||l.label}let a={id:this.filter_type_selected.id,label:this.filter_type_label_selected,operator:this.operator_selected.id,value:e,value_label:t};this.$emit("apply",a),ntopng_events_manager.emit_custom_event(ntopng_custom_events.MODAL_FILTERS_APPLY,a),this.close()},close:function(){this.$refs.modal.close()}}};const xp=e=>(pl("data-v-3119c83e"),e=e(),fl(),e),kp={autocomplete:"off"},$p={class:"form-group row"},Sp=xp((()=>Vs("label",{class:"col-form-label col-sm-3",for:"dt-filter-type-select"},[Vs("b",null,"Filter")],-1))),Np={class:"col-sm-8"},Cp=xp((()=>Vs("hr",null,null,-1))),Ep={class:"dt-filter-template-container form-group row"},Ap={class:"col-form-label col-sm-3"},Tp={class:"col-sm-8"},Ip={class:"input-group mb-3"},Op={class:"input-group-prepend col-sm-3"},Pp={key:0,class:"col-sm-9"},Up={key:1,class:"col-sm-9"},jp=["pattern","required"],Mp={style:{margin:"0px",padding:"0"},class:"alert invalid-feedback"},Fp=["disabled"];lp("\ninput ~ .alert[data-v-3119c83e] {\n  display: none;\n}\ninput:invalid ~ .alert[data-v-3119c83e] {\n  display: block;\n}\n"),wp.render=function(e,t,a,l,n,s){const i=kn("select-search"),o=kn("modal");return Is(),Fs(o,{id:n.id_modal,ref:"modal"},{title:vl((()=>[Ks(te(n.i18n("alerts_dashboard.add_filter")),1)])),body:vl((()=>[Vs("form",kp,[Vs("div",$p,[Sp,Vs("div",Np,[Hs(i,{selected_option:n.filter_type_selected,"onUpdate:selected_option":t[0]||(t[0]=e=>n.filter_type_selected=e),id:"filter_type",options:a.filters_options,onSelect_option:t[1]||(t[1]=e=>s.change_filter())},null,8,["selected_option","options"])])]),Cp,Vs("div",Ep,[Vs("label",Ap,[Vs("b",null,te(n.filter_type_label_selected),1)]),Vs("div",Tp,[Vs("div",Ip,[Vs("div",Op,[Hs(i,{selected_option:n.operator_selected,"onUpdate:selected_option":t[2]||(t[2]=e=>n.operator_selected=e),id:"operator_filter",options:n.operators_to_show,onSelect_option:s.change_operator_type},null,8,["selected_option","options","onSelect_option"])]),"select"==n.input_type?(Is(),Ms("div",Pp,[Hs(i,{selected_option:n.option_selected,"onUpdate:selected_option":t[3]||(t[3]=e=>n.option_selected=e),id:"data_filter",options:n.options_to_show,onSelect_option:s.change_data_filter},null,8,["selected_option","options","onSelect_option"])])):"select-with-input"==n.input_type?(Is(),Ms("div",Up,[Hs(i,{selected_option:n.option_selected,"onUpdate:selected_option":t[4]||(t[4]=e=>n.option_selected=e),id:"data_filter",add_tag:!0,pattern:n.data_pattern_selected,options:n.options_to_show,onSelect_option:s.change_data_filter},null,8,["selected_option","pattern","options","onSelect_option"])])):(Is(),Ms(Ss,{key:2},[wn(Vs("input",{"onUpdate:modelValue":t[5]||(t[5]=e=>n.input_value=e),pattern:n.data_pattern_selected,name:"value",required:n.input_required,type:"text",class:"form-control"},null,8,jp),[[jo,n.input_value]]),Vs("span",Mp,te(n.i18n("invalid_value")),1)],64))]),Ys(" end div input-group mb-3 ")]),Ys(" end div form-group-row ")])])])),footer:vl((()=>[Vs("button",{type:"button",disabled:s.check_disable_apply(),onClick:t[6]||(t[6]=(...e)=>s.apply&&s.apply(...e)),class:"btn btn-primary"},te(n.i18n("apply")),9,Fp)])),_:1},8,["id"])},wp.__scopeId="data-v-3119c83e",wp.__file="http_src/vue/modal-filters.vue";let Lp,Rp,Dp,zp,qp=[],Bp=null!=window.location.toString().match(/alert_stats.lua/),Vp=ntopng_url_manager.get_url_entry("status");null!=Vp&&""!=Vp||(Vp="historical");let Hp=function(e){let t=ntopng_url_manager.get_url_entry("page");return null==t&&(t=e?"all":"overview"),t}(Bp);const Gp=async function(){qp=await async function(e,t){let a,l=ntopng_url_manager.get_url_entry("query_preset");if(null==l&&(l=""),e)a=`${http_prefix}/lua/rest/v2/get/alert/filter/consts.lua?page=${t}&query_preset=${l}`;else{let e=ntopng_url_manager.get_url_entry("aggregated");a=`${http_prefix}/lua/pro/rest/v2/get/db/filter/consts.lua?page=${t}&query_preset=${l}&aggregated=${e}`}return await ntopng_utility.http_request(a)}(Bp,Hp),qp.filter((e=>null==e.label)).forEach((e=>{console.error(`label not defined for filter ${JSON.stringify(e)}`),e.label=""})),qp.sort(((e,t)=>e.label.localeCompare(t.label))),i18n_ext.tags={},Lp={},Rp={},qp.forEach((e=>{i18n_ext.tags[e.id]=e.label,e.operators.forEach((e=>Lp[e.id]=e.label)),Rp[e.id]=e.operators.map((e=>e.id))}));let e=ntopng_url_manager.get_url_entries(),t=[];for(const[a,l]of e){let e=qp.find((e=>e.id==a));if(null!=e){l.split(",").forEach((a=>{let[l,n]=a.split(";");if(null==n||null==l||""==n||null!=e.options&&null==e.options.find((e=>e.value==l)))return;let s=l;"array"==e.value_type&&(s=e?.options?.find((e=>e.value==l))?.label),t.push({id:e.id,operator:n,value:l,label:e.label,value_label:s})}))}}return t};var Wp={props:{id:String,min_time_interval_id:String,round_time:Boolean},components:{"date-time-range-picker":A_,"modal-filters":wp},created(){},async mounted(){let e=ntopng_sync.on_ready(this.id_data_time_range_picker);if(ntopng_sync.on_ready(this.id_modal_filters),await e,"all"!=this.page){let e=await Gp();zp=function(e){const t=new Tagify(e.$refs.tagify,{duplicates:!0,delimiters:null,dropdown:{enabled:1,classname:"extra-properties"},autoComplete:{enabled:!1},templates:{tag:function(e){try{return`<tag title='${e.value}' contenteditable='false' spellcheck="false" class='tagify__tag'>\n                        <x title='remove tag' class='tagify__tag__removeBtn'></x>\n                        <div>\n                           <b>${e.label?e.label:e.key}</b>&nbsp;\n                           <b class='operator'>${e.selectedOperator?Lp[e.selectedOperator]:"="}</b>&nbsp;\n                            <span class='tagify__tag-text'>${e.value}</span>\n                        </div>\n                    </tag>`}catch(e){console.error(`An error occured when creating a new tag: ${e}`)}}},validate:function(e){return void 0!==e.key&&void 0!==e.selectedOperator&&void 0!==e.value}});$(document).ready((function(){t.addTags(Dp)}));const a=async function(e){"number"==typeof e.realValue&&(e.realValue=""+e.realValue),"number"==typeof e.value&&(e.value=""+e.value);let a=t.getTagElms().find((t=>t.getAttribute("key")===e.key&&t.getAttribute("realValue")===e.realValue));void 0===t.tagData(a)&&(Rp[e.key]&&!Array.isArray(Rp[e.key])&&(e.operators=Rp[e.key].operators),e.selectedOperator||(e.selectedOperator="eq"),t.addTags([e]))};return t.on("remove",(async function(e){const t=e.detail.data.key,a=e.detail.data.realValue,l=ntopng_status_manager.get_status();if(void 0===t)return;if(null==l.filters)return;const n=l.filters.filter((e=>e.id!=t||e.id==t&&e.value!=a));ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:n})})),t.on("add",(async function(e){const a=e.detail;if(void 0===a.data)return;return a.data.key?void 0:(t.removeTags([e.detail.tag]),e.preventDefault(),void e.stopPropagation())})),t.on("click",(async function(t){const a=t.detail;if(void 0===a.data)return;if(void 0===a.data.key)return;const l=a.data;e.edit_tag=l,ntopng_events_manager.emit_custom_event(ntopng_custom_events.SHOW_MODAL_FILTERS,{id:l.key,operator:l.selectedOperator,value:l.realValue})})),t.on("edit:updated",(async function(e){console.warn("UPDATED")})),$("tags").on("change","select.operator",(async function(e){console.warn("TAGS change")})),{tagify:t,addFilterTag:a}}(this),ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:e}),ntopng_events_manager.on_event_change(this.$props.id,ntopng_events.FILTERS_CHANGE,(e=>this.reload_status(e)),!0)}this.modal_data=qp,ntopng_sync.ready(this.$props.id)},data(){return{i18n:i18n,id_modal_filters:`${this.$props.id}_modal_filters`,id_data_time_range_picker:`${this.$props.id}_date-time-range-picker`,show_filters:!1,edit_tag:null,is_alert_stats_url:Bp,status_view:Vp,page:Hp,modal_data:[],last_filters:[]}},methods:{is_filter_defined:function(e){return null!=Rp[e.id]},update_status_view:function(e){ntopng_url_manager.set_key_to_url("status",e),ntopng_url_manager.reload_url()},show_modal_filters:function(){this.$refs.modal_filters.show()},remove_filters:function(){ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:[]})},reload_status:function(e){let t=e.filters;if(null==t)return;ntopng_url_manager.delete_params(qp.map((e=>e.id))),zp.tagify.removeAllTags();let a=Xd.get_filters_object(t);ntopng_url_manager.add_obj_to_url(a),t.forEach((e=>{let t=function(e){let t=qp.find((t=>t.id==e.id));null==t&&console.error("create_tag_from_filter: filter const not found;");let a=e.value;if(null!=t.options){let l=t.options.find((t=>t.value==e.value));null!=l&&(a=l.label)}const l={label:t.label,key:t.id,value:a,realValue:e.value,title:`${t.label}${e.operator}${a}`,selectedOperator:e.operator};return""==l.value&&(l.value="''"),null==l.realValue||null==l.selectedOperator||""==l.selectedOperator?null:l}(e);null!=t&&zp.addFilterTag(t)})),this.last_filters=t},apply_modal:function(e){let t=ntopng_status_manager.get_status().filters;null==t&&(t=[]),null!=this.edit_tag&&(t=t.filter((e=>e.id!=this.edit_tag.key||e.value!=this.edit_tag.realValue)),this.edit_tag=null),t.push(e),ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:t})}}};const Kp=e=>(pl("data-v-aaee59ea"),e=e(),fl(),e),Jp={style:{width:"100%"}},Yp={class:"mb-1"},Zp={key:0,style:{"margin-right":"0.1rem"},class:"d-flex align-items-center me-2"},Xp={class:"btn-group",id:"statusSwitch",role:"group"},Qp=[Kp((()=>Vs("i",{class:"fa-solid fa-hourglass-half",title:"Engaged"},null,-1)))],ef=[Kp((()=>Vs("i",{class:"fa-regular fa-eye",title:"Require Attention"},null,-1)))],tf=[Kp((()=>Vs("i",{class:"fa-solid fa-inbox",title:"All"},null,-1)))],af={key:0,class:"d-flex mt-1",style:{width:"100%"}},lf=["placeholder"],nf=[Kp((()=>Vs("span",null,[Vs("i",{class:"fas fa-plus","data-original-title":"",title:"Add Filter"})],-1)))],sf=[Kp((()=>Vs("i",{class:"fas fa-times"},null,-1)))];lp("\n.tagify__input[data-v-aaee59ea] {\n    min-width: 175px;\n}\n.tagify__tag[data-v-aaee59ea] {\n    white-space: nowrap;\n    margin: 3px 0px 5px 5px;\n}\n.tagify__tag select.operator[data-v-aaee59ea] {\n    margin: 0px 4px;\n    border: 1px solid #c4c4c4;\n    border-radius: 4px;\n}\n.tagify__tag b.operator[data-v-aaee59ea] {\n    margin: 0px 4px;\n    background-color: white;\n    border: 1px solid #c4c4c4;\n    border-radius: 4px;\n    padding: 0.05em 0.2em;\n}\n.tagify__tag>div[data-v-aaee59ea] {\n    display: flex;\n    align-items: center;\n}\n"),Wp.render=function(e,t,a,l,n,s){const i=kn("modal-filters"),o=kn("date-time-range-picker");return Is(),Ms("div",Jp,[Vs("div",Yp,[Hs(i,{filters_options:n.modal_data,onApply:s.apply_modal,ref:"modal_filters",id:n.id_modal_filters},null,8,["filters_options","onApply","id"]),Hs(o,{id:n.id_data_time_range_picker,min_time_interval_id:a.min_time_interval_id,round_time:a.round_time},{begin:vl((()=>[n.is_alert_stats_url?(Is(),Ms("div",Zp,[Vs("div",Xp,["flow"!=n.page?(Is(),Ms("a",{key:0,href:"#",onClick:t[0]||(t[0]=e=>s.update_status_view("engaged")),class:K(["btn btn-sm",{active:"engaged"==n.status_view,"btn-seconday":"engaged"!=n.status_view,"btn-primary":"engaged"==n.status_view}])},[...Qp],2)):Ys("v-if",!0),Vs("a",{href:"#",onClick:t[1]||(t[1]=e=>s.update_status_view("historical")),class:K(["btn btn-sm",{active:"historical"==n.status_view||"flow"==n.page&&"engaged"==n.status_view,"btn-seconday":"historical"!=n.status_view,"btn-primary":"historical"==n.status_view||"flow"==n.page&&"engaged"==n.status_view}])},[...ef],2),Ys(" <a href=\"#\" @click=\"update_status_view('acknowledged')\" class=\"btn btn-sm\"\n                                :class=\"{ 'active': status_view == 'acknowledged', 'btn-seconday': status_view != 'acknowledged', 'btn-primary': status_view == 'acknowledged' }\"><i class=\"fa-solid fa-check-double\" title=\"Acknowledged\"></i></a>"),Vs("a",{href:"#",onClick:t[2]||(t[2]=e=>s.update_status_view("any")),class:K(["btn btn-sm",{active:"any"==n.status_view,"btn-seconday":"any"!=n.status_view,"btn-primary":"any"==n.status_view}])},[...tf],2)])])):Ys("v-if",!0),In(e.$slots,"begin")])),extra_buttons:vl((()=>[In(e.$slots,"extra_range_buttons")])),_:3},8,["id","min_time_interval_id","round_time"])]),Ys(" tagify "),"all"!=n.page?(Is(),Ms("div",af,[Vs("input",{class:"w-100 form-control h-auto",name:"tags",ref:"tagify",placeholder:n.i18n("show_alerts.filters")},null,8,lf),wn(Vs("button",{class:"btn btn-link","aria-controls":"flow-alerts-table",type:"button",id:"btn-add-alert-filter",onClick:t[3]||(t[3]=(...e)=>s.show_modal_filters&&s.show_modal_filters(...e))},[...nf],512),[[Yo,n.modal_data&&n.modal_data.length>0]]),wn(Vs("button",{"data-bs-toggle":"tooltip","data-placement":"bottom",title:"{{ i18n('show_alerts.remove_filters') }}",onClick:t[4]||(t[4]=(...e)=>s.remove_filters&&s.remove_filters(...e)),class:"btn ms-1 my-auto btn-sm btn-remove-tags"},[...sf],512),[[Yo,n.modal_data&&n.modal_data.length>0]])])):Ys("v-if",!0),Ys(" end tagify ")])},Wp.__scopeId="data-v-aaee59ea",Wp.__file="http_src/vue/range-picker.vue";const of={class:"row",style:{"margin-left":"-2px","margin-right":"-2px","margin-top":"1rem","margin-bottom":"-1rem"}},rf={class:"col-sm-12 col-md-5"},cf={class:"dataTables_info",role:"status","aria-live":"polite"},uf={class:"col-sm-12 col-md-7"},df={class:"dataTables_paginate paging_simple_numbers",style:{display:"flex","justify-content":"flex-end"}},_f={class:"pagination"},pf={class:"paginate_button page-item previous"},ff=["onClick"],mf={href:"javascript:void(0);","aria-controls":"default-datatable","data-dt-idx":"1",tabindex:"0",class:"page-link"},vf={class:"paginate_button page-item previous"};var hf={__name:"select_table_page",props:{total_rows:Number,per_page:Number},emits:["change_active_page"],setup(e,{expose:t,emit:a}){const l=e,n=a,s=ma(0),i=ma(0),o=ma(0),r=ma(0),c=ma("");function u(){if(null==l.total_rows)return;let e=l.per_page;o.value=Number.parseInt((l.total_rows+e-1)/e),i.value=6,o.value<i.value&&(i.value=o.value),r.value>=o.value&&o.value>0&&(r.value=o.value-1,s.value=o.value-i.value,p(r.value)),f()}_n((()=>{u()})),jl((()=>[l.total_rows,l.per_page]),((e,t)=>{u()}),{flush:"pre",immediate:!0});const d=wi((()=>!(o.value<6)&&r.value>=i.value-1)),_=wi((()=>!(o.value<6)&&r.value<o.value-i.value+1));function p(e,t){null!=e&&(r.value=e),null!=t&&(s.value=t),r.value==s.value&&s.value>0&&(s.value-=1);const a=s.value+i.value-1;r.value==a&&o.value-1>a&&(s.value+=1),r.value>o.value-1&&0!=o.value&&(r.value=o.value-1,s.value=r.value),f(),n("change_active_page",r.value)}function f(){c.value="Showing page %active_page of %total_pages: total %total_rows rows".replace("%active_page",m(`${r.value+1}`)).replace("%total_pages",m(`${o.value}`)).replace("%total_rows",m(`${l.total_rows}`)).replace("%per_page",m(`${l.per_page}`))}function m(e){return e.replace(/(.)(?=(\d{3})+$)/g,"$1,")}return t({change_active_page:p}),(e,t)=>(Is(),Ms(Ss,null,[Ys(" PerPage "),Vs("div",of,[Ys(" div col-md-5 "),Vs("div",rf,[Vs("div",cf,te(c.value),1)]),Ys(" div col-md-5 "),Ys(" start div col-sm-12 "),wn(Vs("div",uf,[Vs("div",df,[Vs("ul",_f,[wn(Vs("li",pf,[Vs("a",{href:"javascript:void(0);",onClick:t[0]||(t[0]=e=>p(0,0)),"aria-controls":"default-datatable","data-dt-idx":"0",tabindex:"0",class:"page-link"}," « ")],512),[[Yo,d.value]]),Vs("li",{class:K(["paginate_button page-item previous",{disabled:0==r.value}])},[Vs("a",{href:"javascript:void(0);",onClick:t[1]||(t[1]=e=>{p(r.value-1)}),"aria-controls":"default-datatable","data-dt-idx":"0",tabindex:"0",class:"page-link"}," < ")],2),(Is(!0),Ms(Ss,null,An(i.value,(e=>(Is(),Ms("li",{onClick:t=>p(s.value+e-1),class:K([{active:r.value==s.value+e-1},"paginate_button page-item"])},[Vs("a",mf,te(s.value+e),1),Ys('  :key="total_rows"')],10,ff)))),256)),Vs("li",{class:K(["paginate_button page-item next",{disabled:r.value==o.value-1}]),id:"default-datatable_next"},[Vs("a",{href:"javascript:void(0);",onClick:t[2]||(t[2]=e=>{p(r.value+1)}),"aria-controls":"default-datatable","data-dt-idx":"7",tabindex:"0",class:"page-link"}," > ")],2),wn(Vs("li",vf,[Vs("a",{href:"javascript:void(0);",onClick:t[3]||(t[3]=e=>p(o.value-1,o.value-i.value)),"aria-controls":"default-datatable","data-dt-idx":"0",tabindex:"0",class:"page-link"}," » ")],512),[[Yo,_.value]])])])],512),[[Yo,o.value>0]]),Ys(" end div col-md-7 ")]),Ys(" PerPage ")],2112))},__file:"http_src/vue/select_table_page.vue"};const gf={class:"text-center"},bf={class:"sr-only position-absolute"};var yf={__name:"loading",props:{styles:String},setup(e,{expose:t}){const a=i18n("loading"),l=ma(null);return t({hide_loading:function(e=500){$(l.value).fadeOut(e)},show_loading:function(e=500){$(l.value).fadeIn(e)}}),(t,n)=>(Is(),Ms("div",{ref_key:"overlay",ref:l,class:"overlay centered-message"},[Vs("div",gf,[Vs("div",{class:"spinner-border text-primary mt-6",style:V(e.styles),role:"status"},[Vs("span",bf,te(ya(a)),1)],4)])],512))},__file:"http_src/vue/loading.vue"};const wf={class:"form-check form-switch ms-1",style:{"white-space":"nowrap"}},xf=["checked","title"],kf=["innerHTML"];var $f={__name:"switch",props:{value:Boolean,title:String,label:String},emits:["update:value","change_value"],setup(e,{emit:t}){const a=t,l=e,n=ma(!1);return _n((()=>{n.value=l.value})),jl((()=>l.value),((e,t)=>{n.value=l.value}),{flush:"pre"}),(t,l)=>(Is(),Ms("div",wf,[Vs("input",{class:"form-check-input",style:{cursor:"pointer"},checked:1==n.value,onClick:l[0]||(l[0]=e=>(a("update:value",!n.value),void a("change_value",!n.value))),type:"checkbox",id:"toggle-Begin",title:e.title},null,8,xf),Vs("label",{class:"form-check-label",for:"toggle-Begin",innerHTML:e.label},null,8,kf)]))},__file:"http_src/vue/switch.vue"};const Sf=e=>(pl("data-v-61956e9e"),e=e(),fl(),e),Nf=["id"],Cf={class:"button-group mb-2 d-flex align-items-center"},Ef={class:"form-group d-flex align-items-end",style:{"flex-wrap":"wrap"}},Af={style:{"text-align":"right"},class:"form-group d-flex align-items-center ms-auto"},Tf={class:"d-flex align-items-center"},If={key:0,class:"d-inline me-2 ms-auto"},Of={class:"me-2"},Pf=["value"],Uf=[Sf((()=>Vs("i",{class:"fas fa-columns"},null,-1)))],jf=[Sf((()=>Vs("i",{class:"fas fa-refresh"},null,-1)))],Mf={key:1,class:"d-inline-block"},Ff=Sf((()=>Vs("i",{class:"fas fa-eye"},null,-1))),Lf={class:"form-check form-switch ms-1"},Rf=["checked","onClick","id"],Df=["for","innerHTML"],zf={key:0,class:"centered-message"},qf=["innerHTML"],Bf=["data-resizable-columns-id"],Vf=["onClick","data-resizable-column-id"],Hf={style:{display:"flex"}},Gf=["innerHTML"],Wf={class:"fa fa-fw fa-sort-up"},Kf={class:"fa fa-fw fa-sort-down"},Jf={key:0,scope:"col",class:""},Yf=["innerHTML"],Zf={key:0,style:{},class:"",scope:"col"},Xf=[Sf((()=>Vs("div",{class:"wrap-column"},null,-1)))],Qf={key:1,class:"mt-2"},em={class:"text-end"},tm={style:{},class:"query text-end"},am={class:"records"},lm={class:"text-start"},nm={id:"historical_flows_table-query-time",style:{},class:"query"},sm={class:"seconds"},im=["title"];var om={__name:"table",props:{id:String,columns:Array,get_rows:Function,get_column_id:Function,print_column_name:Function,print_html_row:Function,print_vue_node_row:Function,f_is_column_sortable:Function,f_sort_rows:Function,f_get_column_classes:Function,f_get_column_style:Function,enable_search:Boolean,display_empty_rows:Boolean,show_autorefresh:Number,default_sort:Object,csrf:String,paging:Boolean,display_message:Boolean,message_to_display:String},emits:["custom_event","loaded","rows_loaded"],setup(e,{expose:t,emit:a}){const l=a,n={emit:l,h:Oi,nextTick:Ja},s=e,i=e=>i18n(e);ma(!0);const o=ma(null),r=ma(null),c=ma(null);ma([]);let u=0,d=[];const _=ma([]),p=ma([]),f=ma(0),m=[10,20,40,50,80,100],v=ma(10),h=window.store,g=ma(""),y=ma(null),w=ma(!1),k=ma(null),S=ma(null),N=ma(!1),C=ma(!1),E=ma(!1);_n((async()=>{null!=s.columns&&I()}));const A=wi((()=>{if(null==s.show_autorefresh||s.show_autorefresh<=0)return"";return i("table.autorefresh").replace("%time",s.show_autorefresh)}));function T(e){return null!=e&&null!=e.id?e.id:"toggle-Begin"}async function I(){await async function(){let e=await async function(){if(null==s.csrf)return{};const e={table_id:s.id},t=x.obj_to_url_params(e),a=`${http_prefix}/lua/rest/v2/get/tables/user_columns_config.lua?${t}`;let l=await b.http_request(a),n={};return l.forEach((e=>{n[e.id]=e})),n}(),t=!0;for(let a in e)t&=e[a]?.sort;_.value=s.columns.map(((a,l)=>{let n=[],i="";null!=s.f_get_column_classes&&(n=s.f_get_column_classes(a)),null!=s.f_get_column_style&&(i=s.f_get_column_style(a));let o=s.get_column_id(a),r=e[o],c=r?.sort;return c=1==t&&null==c&&null!=s.default_sort&&o==s.default_sort.column_id?s.default_sort.sort:r?.sort?r?.sort:0,{id:o,visible:null==r?.visible||1==r?.visible,sort:c,sortable:Z(a),order:r?.order||l,classes:n,style:i,data:a}})),await F()}(),await Y(),M(),c.value.load_menu(),l("loaded")}let O;function P(){0!=E.value?O=setInterval((()=>{q()}),1e3*s.show_autorefresh):clearInterval(O)}async function U(){await async function(){j.value+=1,await Ja()}(),M()}jl((()=>[s.id,s.columns]),((e,t)=>{I()}),{flush:"pre"});const j=ma(0);function M(){let e={store:h,minWidth:72};$(r.value).resizableColumns(e)}async function F(){if(null==s.csrf)return;let e={table_id:s.id,visible_columns_ids:[],csrf:s.csrf};e.visible_columns_ids=_.value.map(((e,t)=>({id:e.id,visible:e.visible,order:e.order,sort:e.sort})));const t=`${http_prefix}/lua/rest/v2/add/tables/user_columns_config.lua`;await b.http_post_request(t,e)}async function L(){s.columns.forEach((e=>{let t=`${s.id}-${s.get_column_id(e)}`;h.remove(t)})),await U()}function R(){D.value+=1,q(0)}const D=ma(0);const z=ma(0);async function q(e){null!=e&&(u=e),null==u&&(u=0),1==s.paging||B?await Y():X(),z.value+=1}let B=!1,H=!1;async function G(e){B=!0,H=e||!1,H?y.value.change_active_page():y.value.change_active_page(0,0),await Ja(),B=!1,H=!1}let W,J=!0;async function Y(){w.value=!H;let e=await s.get_rows(u,v.value,_.value,g.value,J);k.value=null,null!=e.query_info&&(k.value=e.query_info),J=!1,f.value=e.rows.length,1==s.paging&&(f.value=e.total_rows),d=e.rows,X(),w.value=!1,await Ja(),l("rows_loaded",e)}function Z(e){return null==s.f_is_column_sortable||s.f_is_column_sortable(e)}function X(){let e=0;if(0==s.paging&&(e=u*v.value),0==s.paging){let e=null!=s.f_sort_rows?s.f_sort_rows:(e,t,a)=>{let l=s.print_html_row(e.data,t),n=s.print_html_row(e.data,a);return 1==e.sort?l.localeCompare(n):n.localeCompare(l)},t=function(){let e=_.value.find((e=>0!=e.sort));return e}();d=d.sort(((a,l)=>e(t,a,l)))}p.value=d.slice(e,e+v.value)}async function Q(){let e=1e3;null!=W?clearTimeout(W):e=0,W=setTimeout((async()=>{await Y(),W=null}),e)}function ee(e){NtopUtils.copyToClipboard(k.value.query,S.value)}return t({load_table:I,refresh_table:G,get_columns_defs:function(){return _.value},get_rows_num:function(){return f.value},search_value:function(e){g.value=e,Q()}}),(t,a)=>(Is(),Ms(Ss,null,[In(t.$slots,"custom_header2"),Vs("div",{ref_key:"table_container",ref:o,id:e.id},[w.value?(Is(),Fs(yf,{key:0})):Ys("v-if",!0),Vs("div",Cf,[Ys(" TableHeader "),Vs("div",Ef,[In(t.$slots,"custom_header")]),Vs("div",Af,[Vs("div",Tf,[e.enable_search?(Is(),Ms("div",If,[Vs("label",null,[Ks(te(i("search"))+": ",1),wn(Vs("input",{type:"search","onUpdate:modelValue":a[0]||(a[0]=e=>g.value=e),onInput:Q,class:""},null,544),[[jo,g.value]])])])):Ys("v-if",!0),Vs("div",Of,[Vs("label",null,[wn(Vs("select",{"onUpdate:modelValue":a[1]||(a[1]=e=>v.value=e),onChange:R},[(Is(),Ms(Ss,null,An(m,(e=>Vs("option",{value:e},te(e),9,Pf))),64))],544),[[Ro,v.value]])])]),Vs("button",{class:"btn btn-link",type:"button",onClick:L},[...Uf]),Vs("button",{class:"btn btn-link",type:"button",onClick:a[2]||(a[2]=e=>G())},[...jf]),e.show_autorefresh>0?(Is(),Ms("div",Mf,[Hs($f,{value:E.value,"onUpdate:value":a[3]||(a[3]=e=>E.value=e),class:"me-2 mt-1",title:A.value,style:{},onChange_value:P},null,8,["value","title"])])):Ys("v-if",!0),Hs(Rd,{id:e.id+"_dropdown",ref_key:"dropdown",ref:c},{title:vl((()=>[Ff])),menu:vl((()=>[(Is(!0),Ms(Ss,null,An(_.value,(t=>(Is(),Ms("div",Lf,[Vs("input",{class:"form-check-input",style:{cursor:"pointer"},checked:1==t.visible,onClick:e=>async function(e){N.value=!0,e.visible=!e.visible,s.paging&&await Y(),await U(),await F(),N.value=!1}(t),type:"checkbox",id:T(t)},null,8,Rf),Vs("label",{class:"form-check-label",for:T(t),innerHTML:e.print_column_name(t.data)},null,8,Df)])))),256))])),_:1},8,["id"]),Ys(" Dropdown columns ")])])]),Ys(" TableHeader "),(Is(),Ms("div",{key:j.value,style:{overflow:"auto",width:"100%"}},[Ys(" Table "),1==e.display_message?(Is(),Ms("div",zf,[Vs("span",{innerHTML:e.message_to_display},null,8,qf)])):Ys("v-if",!0),Vs("table",{ref_key:"table",ref:r,class:K(["table table-striped table-bordered ml-0 mr-0 mb-0 ntopng-table",[e.display_message||w.value?"ntopng-gray-out":""]]),"data-resizable":"true","data-resizable-columns-id":e.id},[Ys(" Table "),Vs("thead",null,[Vs("tr",null,[(Is(!0),Ms(Ss,null,An(_.value,((t,a)=>(Is(),Ms(Ss,null,[t.visible?(Is(),Ms("th",{key:0,scope:"col",class:K({pointer:t.sortable,unset:!t.sortable}),style:{"white-space":"nowrap"},onClick:e=>async function(e,t){e.sortable&&(e.sort=(e.sort+1)%3,_.value.filter(((e,a)=>a!=t)).forEach((e=>e.sort=0)),0!=e.sort&&(s.paging?await Y():X(),await F()))}(t,a),"data-resizable-column-id":e.get_column_id(t.data)},[Vs("div",Hf,[Vs("span",{innerHTML:e.print_column_name(t.data),class:"wrap-column"},null,8,Gf),Ys(' <i v-show="col.sort == 0" class="fa fa-fw fa-sort"></i> '),wn(Vs("i",Wf,null,512),[[Yo,1==t.sort&&t.sortable]]),wn(Vs("i",Kf,null,512),[[Yo,2==t.sort&&t.sortable]])])],10,Vf)):Ys("v-if",!0)],64)))),256))])]),Vs("tbody",null,[N.value||C.value?Ys("v-if",!0):(Is(!0),Ms(Ss,{key:0},An(p.value,(t=>(Is(),Ms("tr",null,[(Is(!0),Ms(Ss,null,An(_.value,((a,l)=>(Is(),Ms(Ss,null,[a.visible?(Is(),Ms("td",Jf,[null!=e.print_html_row&&null!=e.print_html_row(a.data,t,!0)?(Is(),Ms("div",{key:0,class:K([a.classes,"wrap-column"]),style:V(a.style),innerHTML:e.print_html_row(a.data,t)},null,14,Yf)):Ys("v-if",!0),Vs("div",{style:V([a.style,{}]),class:K(["wrap-column margin-sm",a.classes])},[null!=e.print_vue_node_row&&null!=e.print_vue_node_row(a.data,t,n,!0)?(Is(),Fs(jd,{key:t,content:e.print_vue_node_row(a.data,t,n)},null,8,["content"])):Ys("v-if",!0)],6)])):Ys("v-if",!0)],64)))),256))])))),256)),e.display_empty_rows&&p.value.length<v.value?(Is(!0),Ms(Ss,{key:1},An(v.value-p.value.length,(e=>(Is(),Ms("tr",null,[(Is(!0),Ms(Ss,null,An(_.value,((e,t)=>(Is(),Ms(Ss,null,[e.visible?(Is(),Ms("td",Zf,[...Xf])):Ys("v-if",!0)],64)))),256))])))),256)):Ys("v-if",!0)])],10,Bf),Ys(" Table ")])),Ys(" Table div"),Vs("div",null,[(Is(),Fs(hf,{ref_key:"select_table_page",ref:y,key:D.value,total_rows:f.value,per_page:v.value,onChange_active_page:q},null,8,["total_rows","per_page"]))]),null!=k.value?(Is(),Ms("div",Qf,[Vs("div",em,[Vs("small",tm,[Vs("span",am,te(k.value.num_records_processed),1),Ks(".")])]),Vs("div",lm,[Vs("small",nm,[Ks("Query performed in "),Vs("span",sm,te((k.value.query_duration_msec/1e3).toFixed(3)),1),Ks(" seconds. "),Vs("span",{id:"historical_flows_table-query",style:{cursor:"pointer"},class:"badge bg-secondary",title:k.value.query,onClick:ee,ref_key:"query_info_sql_button",ref:S},"SQL",8,im)])])])):Ys("v-if",!0)],8,Nf)],64))}};lp("\n.sticky[data-v-61956e9e] {\n    position: sticky;\n    left: 0;\n    background-color: white;\n}\n.wrap-column[data-v-61956e9e] {\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow: hidden;\n    width: 100%;\n}\n.pointer[data-v-61956e9e] {\n    cursor: pointer;\n}\n.unset[data-v-61956e9e] {\n    cursor: unset;\n}\n.link-button[data-v-61956e9e] {\n    color: var(--bs-dropdown-link-color);\n    cursor: pointer;\n}\n.link-disabled[data-v-61956e9e] {\n    pointer-events: none;\n    color: #ccc;\n}\ntd[data-v-61956e9e] {\n    height: 2.5rem;\n}\n.margin-sm[data-v-61956e9e] {\n    margin-bottom: -0.25rem;\n    margin-top: -0.25rem;\n}\n"),om.__scopeId="data-v-61956e9e",om.__file="http_src/vue/table.vue";var rm={__name:"table-with-config",props:{table_config_id:String,table_id:String,csrf:String,f_map_config:Function,f_map_columns:Function,f_sort_rows:Function,get_extra_params_obj:Function,display_message:Boolean,message_to_display:String},emits:["custom_event","loaded","rows_loaded"],setup(e,{expose:t,emit:a}){const l=a,n=e,s=ma({}),i=ma(null),o=ma(!1);_n((async()=>{null==n.table_id&&null==n.table_config_id||c()})),jl((()=>[n.table_id,n.table_config_id]),((e,t)=>{c()}),{flush:"pre"});const r=wi((()=>null!=n.table_id?n.table_id:n.table_config_id));async function c(){o.value=!1,await Ja();let e=n.table_config_id;null==e&&(e=n.table_id),s.value=await Wd.build_table(http_prefix,e,n.f_map_columns,n.get_extra_params_obj),null!=n.f_map_config&&(s.value=n.f_map_config(s.value)),o.value=!0,await Ja()}function u(){l("loaded")}function d(e){l("custom_event",e)}function _(e){l("rows_loaded",e)}return t({refresh_table:e=>{i.value&&i.value.refresh_table(e)},get_columns_defs:()=>null==i.value?[]:i.value.get_columns_defs(),get_rows_num:()=>i.value.get_rows_num(),search_value:e=>{i.value.search_value(e)}}),(t,a)=>o.value?(Is(),Fs(om,{key:0,ref_key:"table",ref:i,id:r.value,columns:s.value.columns,get_rows:s.value.get_rows,get_column_id:s.value.get_column_id,print_column_name:s.value.print_column_name,print_html_row:s.value.print_html_row,print_vue_node_row:s.value.print_vue_node_row,f_is_column_sortable:s.value.f_is_column_sortable,f_get_column_classes:s.value.f_get_column_classes,f_get_column_style:s.value.f_get_column_style,display_empty_rows:s.value.display_empty_rows,f_sort_rows:e.f_sort_rows,enable_search:s.value.enable_search,default_sort:s.value.default_sort,show_autorefresh:s.value.show_autorefresh,paging:s.value.paging,csrf:e.csrf,display_message:e.display_message,message_to_display:e.message_to_display,onLoaded:u,onRows_loaded:_,onCustom_event:d},{custom_header:vl((()=>[In(t.$slots,"custom_header")])),_:3},8,["id","columns","get_rows","get_column_id","print_column_name","print_html_row","print_vue_node_row","f_is_column_sortable","f_get_column_classes","f_get_column_style","display_empty_rows","f_sort_rows","enable_search","default_sort","show_autorefresh","paging","csrf","display_message","message_to_display"])):Ys("v-if",!0)},__file:"http_src/vue/table-with-config.vue"},cm={__name:"spinner",props:{size:String,show:Boolean},setup:e=>(_n((async()=>{})),(t,a)=>e.show?(Is(),Ms("div",{key:0,class:"spinner-border text-primary",style:V({width:e.size,height:e.size}),role:"status"},null,4)):Ys("v-if",!0)),__file:"http_src/vue/spinner.vue"};const um={id:"script-description",class:"notes bg-light border",role:"alert"},dm=["innerHTML"],_m={key:0},pm=["innerHTML"];var fm={__name:"note-list",props:{note_list:Array,sub_note_list:Array,add_sub_notes:Boolean},setup(e){const t=e=>i18n(e),a=e;return(e,l)=>(Is(),Ms("div",um,[Vs("b",null,te(t("notes")),1),Vs("ul",null,[(Is(!0),Ms(Ss,null,An(a.note_list,(e=>(Is(),Ms("li",{innerHTML:e},null,8,dm)))),256)),a.add_sub_notes?(Is(),Ms("ul",_m,[(Is(!0),Ms(Ss,null,An(a.sub_note_list,(e=>(Is(),Ms("li",{innerHTML:e},null,8,pm)))),256))])):Ys("v-if",!0)])]))},__file:"http_src/vue/note-list.vue"},mm=Jl({components:{modal:np},props:{id:String},updated(){},data(){return{description:"",invalid_bpf:!1,bpf_filter:"",extract_now:!0,show_menu:!0,data_available:0,i18n:e=>i18n(e),epoch_interval:null,id_modal:`${this.$props.id}_modal`}},emits:["apply"],created(){},mounted(){},methods:{pad2_number:function(e){return String(e).padStart(2,"0")},format_date:function(e){let t=e.valueOf();return ntopng_utility.from_utc_to_server_date_format(t)},apply:async function(){if(null!=this.bpf_filter&&""!=this.bpf_filter){let e=`${http_prefix}/lua/pro/rest/v2/check/filter.lua?query=${this.bpf_filter}`,t=await ntopng_utility.http_request(e,null,!1,!0);if(this.invalid_bpf=!t.response,1==this.invalid_bpf)return}let e={ifid:ntopng_url_manager.get_url_entry("ifid"),epoch_begin:this.epoch_interval.epoch_begin,epoch_end:this.epoch_interval.epoch_end,bpf_filter:this.bpf_filter},t=ntopng_url_manager.obj_to_url_params(e);if(1==this.extract_now){let e=`${http_prefix}/lua/rest/v2/get/pcap/live_extraction.lua?${t}`;window.open(e,"_self",!1)}else{let e=`${http_prefix}/lua/rest/v2/create/pcap/extraction/task.lua?${t}`,a=(await ntopng_utility.http_request(e)).id,l=i18n("traffic_recording.extraction_scheduled"),n=i18n("traffic_recording.traffic_extraction_jobs"),s=`<a href="/lua/if_stats.lua?ifid=${ntopng_url_manager.get_url_entry("ifid")}&page=traffic_recording&tab=jobs&job_id=${a}">${n}</a>`;l=l.replace("%{page}",s),l=`${l} ${a}`,ntopng_events_manager.emit_custom_event(ntopng_custom_events.SHOW_GLOBAL_ALERT_INFO,{text_html:l,type:"alert-success"})}this.close()},close:function(){this.$refs.modal.close(),setTimeout((()=>{this.data_available=0}),1e3)},show:async function(e,t){if(null==t){let e=ntopng_status_manager.get_status();if(null==e.epoch_begin||null==e.epoch_end)return void console.error("modal-traffic-extraction: epoch_begin and epoch_end undefined in url");t={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end}}this.epoch_interval=t;let a=ntopng_url_manager.obj_to_url_params(t),l=`${http_prefix}/lua/check_recording_data.lua?${a}`,n=await ntopng_utility.http_request(l,null,null,!0);if(0==n.available)return this.data_available=2,this.description=i18n("traffic_recording.no_recorded_data"),void this.$refs.modal.show();this.data_available=1;let s="";if(null!=n.info&&(s=n.info),null==e){let t=ntopng_url_manager.get_url_params(),a=`${http_prefix}/lua/pro/rest/v2/get/db/filter/bpf.lua?${t}`,l=await ntopng_utility.http_request(a);if(null==l||null==l.bpf)return void console.error(`modal-traffic-extraction: ${a} return null value`);e=l.bpf}this.set_descriptions(t.epoch_begin,t.epoch_end,s),this.bpf_filter=e,this.$refs.modal.show()},set_descriptions:function(e,t,a){let l=new Date(1e3*e),n=new Date(1e3*t),s=i18n("traffic_recording.about_to_download_flow");s=s.replace("%{date_begin}",this.format_date(l)),s=s.replace("%{date_end}",this.format_date(n)),s=s.replace("%{extra_info}",a),this.description=s},show_hide_menu:function(){this.show_menu=!this.show_menu}}});const vm=e=>(pl("data-v-0be978c4"),e=e(),fl(),e),hm=["innerHTML"],gm={key:0,style:{height:"95%"}},bm={class:"tab-content",style:{height:"100%"}},ym={class:"row"},wm={class:"form-group mb-3 col-md-3 has-feedback"},xm={class:"form-group mb-3 col-md-9 text-right asd"},km={class:"radio-inline",style:{"margin-left":"1rem"}},$m={class:"radio-inline"},Sm={class:"row",id:"pcapDownloadModal_advanced",style:{}},Nm={class:"form-group mb-3 col-md-12 has-feedback"},Cm=vm((()=>Vs("br",null,null,-1))),Em={class:"form-label"},Am=vm((()=>Vs("a",{class:"ntopng-external-link",href:"https://www.ntop.org/guides/n2disk/filters.html"},[Vs("i",{class:"fas fa-external-link-alt"})],-1))),Tm={class:"input-group"},Im=vm((()=>Vs("span",{class:"input-group-addon"},[Vs("span",{class:"glyphicon glyphicon-filter"})],-1))),Om=vm((()=>Vs("br",null,null,-1))),Pm={class:"form-label"},Um=vm((()=>Vs("br",null,null,-1))),jm=vm((()=>Vs("ul",null,[Vs("li",null,[Ks("Host: "),Vs("i",null,"host 192.168.1.2")]),Vs("li",null,[Ks("HTTP: "),Vs("i",null,"tcp and port 80")]),Vs("li",null,[Ks("Traffic between hosts: "),Vs("i",null,"ip host 192.168.1.1 and 192.168.1.2")]),Vs("li",null,[Ks("Traffic from an host to another: "),Vs("i",null,"ip src 192.168.1.1 and dst 192.168.1.2")])],-1)));lp("\ninput ~ .alert[data-v-0be978c4] {\n  display: none;\n}\ninput:invalid ~ .alert[data-v-0be978c4] {\n  display: block;\n}\n"),mm.render=function(e,t,a,l,n,s){const i=kn("modal");return Is(),Fs(i,{id:e.id_modal,onApply:e.apply,ref:"modal"},{title:vl((()=>[Ks(te(e.i18n("traffic_recording.pcap_extract")),1)])),body:vl((()=>[Vs("div",{class:K(["alert",{"alert-info":2!=e.data_available,"alert-warning":2==e.data_available}]),innerHTML:e.description},null,10,hm),1==e.data_available?(Is(),Ms("form",gm,[Vs("div",bm,[Vs("div",ym,[Vs("div",wm,[Vs("button",{class:"btn btn-sm btn-secondary",type:"button",onClick:t[0]||(t[0]=(...t)=>e.show_hide_menu&&e.show_hide_menu(...t))},[Ks(te(e.i18n("advanced")),1),Vs("i",{class:K({"fas fa-caret-down":e.show_menu,"fas fa-caret-up":!e.show_menu})},null,2)])]),Vs("div",xm,[Vs("label",km,[wn(Vs("input",{type:"radio",name:"extract_now","onUpdate:modelValue":t[1]||(t[1]=t=>e.extract_now=t),value:"true",checked:""},null,512),[[Lo,e.extract_now]]),Ks(" "+te(e.i18n("traffic_recording.extract_now")),1)]),Vs("label",$m,[wn(Vs("input",{type:"radio",name:"extract_now","onUpdate:modelValue":t[2]||(t[2]=t=>e.extract_now=t),value:"false"},null,512),[[Lo,e.extract_now]]),Ks(" "+te(e.i18n("traffic_recording.queue_as_job")),1)])])]),wn(Vs("div",Sm,[Vs("div",Nm,[Cm,Vs("label",Em,[Ks(te(e.i18n("traffic_recording.filter_bpf"))+" ",1),Am]),Vs("div",Tm,[Im,wn(Vs("input",{name:"bpf_filter","onUpdate:modelValue":t[3]||(t[3]=t=>e.bpf_filter=t),class:"form-control input-sm","data-bpf":"bpf",autocomplete:"off",spellcheck:"false"},null,512),[[jo,e.bpf_filter]]),wn(Vs("span",{style:{margin:"0px",padding:"0",display:"block"},class:"invalid-feedback"},te(e.i18n("invalid_value")),513),[[Yo,e.invalid_bpf]])]),Om,Vs("label",Pm,te(e.i18n("traffic_recording.filter_examples"))+":",1),Um,jm])],512),[[Yo,e.show_menu]])])])):Ys("v-if",!0)])),footer:vl((()=>[wn(Vs("button",{type:"button",onClick:t[4]||(t[4]=(...t)=>e.apply&&e.apply(...t)),class:"btn btn-primary"},te(e.i18n("apply")),513),[[Yo,2!=e.data_available]]),wn(Vs("button",{type:"button",onClick:t[5]||(t[5]=(...t)=>e.close&&e.close(...t)),class:"btn btn-primary"},te(e.i18n("ok")),513),[[Yo,2==e.data_available]])])),_:1},8,["id","onApply"])},mm.__scopeId="data-v-0be978c4",mm.__file="http_src/vue/modal-traffic-extraction.vue";const Mm=e=>(pl("data-v-089b0491"),e=e(),fl(),e),Fm=Mm((()=>Vs("a",{target:"_newtab",href:"#",style:{},class:"nav-item text-muted"},[Vs("i",{class:"fas fa-question-circle",style:{"margin-left":"28rem","padding-top":"0.8rem"}})],-1))),Lm={class:"nav nav-tabs"},Rm=["disabled"],Dm={key:0,style:{"min-height":"8.5rem"}},zm={class:"form-group ms-2 me-2 mt-3 row"},qm={class:"col-form-label col-sm-4"},Bm={class:"col-sm-6"},Vm=["pattern"],Hm={key:1,style:{"min-height":"8.5rem"}},Gm={class:"form-group ms-2 me-2 mt-3 row"},Wm={class:"col-form-label col-sm-4"},Km={class:"col-sm-8"},Jm={value:"name"},Ym={value:"date"},Zm={class:"form-group ms-2 me-2 mt-3 row"},Xm={class:"col-form-label col-sm-4"},Qm={class:"col-sm-8"},ev=["value"],tv={class:"form-group ms-2 me-2 mt-3 row"},av={class:"custom-control custom-switch"},lv={class:"custom-control-label ms-1 form-check-label"},nv=["disabled"],sv=["disabled"],iv=["disabled"];var ov={__name:"modal-snapshot",props:{csrf:String,page:String},emits:["added_snapshot","deleted_snapshot","deleted_all_snapshots"],setup(e,{expose:t,emit:a}){const l=ma(null),n=ma("add"),s=ma(""),i=ma(!1),o=ma(""),r=ma(!0),c=ma(""),u=ma(""),d=ma([]),_=ma("date"),p=e,f=a;let m=NtopUtils.REGEXES.singleword;const v=wi((()=>!new RegExp(m).test(u.value))),h=wi((()=>""==s.value));function g(){if(null!=p.page)return p.page;let e="alerts";return null!=window.location.toString().match(/alert_stats.lua/)||(e="flows"),e}let b=null;function y(){b!=_.value&&(d.value.sort(((e,t)=>"name"==_.value?e.name.localeCompare(t.name):e.utc-t.utc)),d.value.length>0&&(s.value=d.value[0]),b=_.value)}let w=!0;const x=async()=>{let e;if(r.value)e=ntopng_url_manager.get_url_params();else{let t=ntopng_url_manager.get_url_object();delete t.epoch_begin,delete t.epoch_end,e=ntopng_url_manager.obj_to_url_params(t)}let t=g(),a={snapshot_name:u.value,filters:e,page:t};a.csrf=p.csrf;let l=`${http_prefix}/lua/pro/rest/v2/add/filters/snapshot.lua`;try{let e={"Content-Type":"application/json"};await ntopng_utility.http_request(l,{method:"post",headers:e,body:JSON.stringify(a)}),w=!0}catch(e){console.error(e)}S(),f("added_snapshots",a)},k=()=>{S();let e=s.value.filters;if(1==i.value){let t=ntopng_status_manager.get_status(),a=ntopng_url_manager.get_url_object(e);a.epoch_begin=t.epoch_begin,a.epoch_end=t.epoch_end,e=ntopng_url_manager.obj_to_url_params(a)}ntopng_url_manager.replace_url_and_reload(e)},$=async e=>{let t=s.value.name;1==e&&(t="*");let a={snapshot_name:t,page:g()};a.csrf=p.csrf;let l=`${http_prefix}/lua/pro/rest/v2/delete/filters/snapshot.lua`;try{let e={"Content-Type":"application/json"};await ntopng_utility.http_request(l,{method:"post",headers:e,body:JSON.stringify(a)}),w=!0}catch(e){console.error(e)}f(1==e?"deleted_all_snapshots":"deleted_snapshot",a),S()},S=()=>{l.value.close()};t({show:()=>{!async function(){n.value="add",u.value="",r.value=!0,i.value=!1;let e=ntopng_status_manager.get_status(),t=N("snapshots.save_time"),a=ntopng_utility.from_utc_to_server_date_format(1e3*e.epoch_begin,"DD/MM/YYYY HH:mm"),l=ntopng_utility.from_utc_to_server_date_format(1e3*e.epoch_end,"DD/MM/YYYY HH:mm");t=t.replace(/\%begin_time/,a),t=t.replace(/\%end_time/,l),c.value=t;let _=N("snapshots.apply_time");if(_=_.replace(/\%begin_time/,a),_=_.replace(/\%end_time/,l),o.value=_,w){w=!1;let e=g(),t=`${http_prefix}/lua/pro/rest/v2/get/filters/snapshots.lua?page=${e}`,a=await ntopng_utility.http_request(t);d.value=ntopng_utility.object_to_array(a)}y(),d.value.length>0&&(s.value=d.value[0])}(),l.value.show()},close:S}),_n((()=>{}));const N=e=>i18n(e);return(e,t)=>(Is(),Fs(np,{onShowed:t[8]||(t[8]=e=>{}),ref_key:"modal_id",ref:l},{title:vl((()=>[Ks(te(N("snapshots.manage"))+" ",1),Fm])),body:vl((()=>[Vs("ul",Lm,[Vs("li",{class:"nav-item",onClick:t[0]||(t[0]=e=>n.value="add")},[Vs("a",{class:K(["nav-link",{active:"add"==n.value}]),href:"#"},te(N("snapshots.add")),3)]),Vs("li",{class:"nav-item",onClick:t[1]||(t[1]=e=>(e=>{0==d.value.length&&"select"==e||(n.value=e)})("select"))},[Vs("a",{disabled:0==d.value.length,class:K(["nav-link",{active:"select"==n.value,"not-allowed":0==d.value.length}]),href:"#"},te(N("snapshots.manage")),11,Rm)])]),"add"==n.value?(Is(),Ms("div",Dm,[Vs("div",zm,[Vs("label",qm,[Vs("b",null,te(N("snapshots.name"))+":",1)]),Vs("div",Bm,[wn(Vs("input",{pattern:ya(m),placeholder:"",required:"",type:"text",class:"form-control","onUpdate:modelValue":t[2]||(t[2]=e=>u.value=e)},null,8,Vm),[[jo,u.value]])])]),Ys(' <div class="form-group ms-2 me-2 mt-3 row"> '),Ys(' \t<div class="custom-control custom-switch"> '),Ys(' \t  <input type="checkbox" class="custom-control-input whitespace form-check-input" v-model="save_time"> '),Ys(' \t  <label class="custom-control-label ms-1 form-check-label">{{save_time_text}}</label> '),Ys(" \t</div> "),Ys(" </div>       ")])):Ys("v-if",!0),Ys(" action add "),"select"==n.value?(Is(),Ms("div",Hm,[Vs("div",Gm,[Vs("label",Wm,[Vs("b",null,te(N("snapshots.order_by")),1)]),Vs("div",Km,[wn(Vs("select",{class:"form-select",onChange:t[3]||(t[3]=e=>y()),"onUpdate:modelValue":t[4]||(t[4]=e=>_.value=e)},[Vs("option",Jm,te(N("snapshots.name")),1),Vs("option",Ym,te(N("snapshots.date")),1)],544),[[Ro,_.value]])])]),Vs("div",Zm,[Vs("label",Xm,[Vs("b",null,te(N("snapshots.select")),1)]),Vs("div",Qm,[wn(Vs("select",{class:"form-select","onUpdate:modelValue":t[5]||(t[5]=e=>s.value=e)},[(Is(!0),Ms(Ss,null,An(d.value,(e=>(Is(),Ms("option",{value:e},te(function(e){let t=1e3*e.utc,a=ntopng_utility.from_utc_to_server_date_format(t,"DD/MM/YYYY");return`${e.name} (${a})`}(e)),9,ev)))),256))],512),[[Ro,s.value]])])]),Vs("div",tv,[Vs("div",av,[wn(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input","onUpdate:modelValue":t[6]||(t[6]=e=>i.value=e)},null,512),[[Mo,i.value]]),Vs("label",lv,te(o.value),1)])])])):Ys("v-if",!0),Ys(" action select ")])),footer:vl((()=>["add"==n.value?(Is(),Ms("button",{key:0,type:"button",onClick:x,disabled:v.value,class:"btn btn-primary"},te(N("snapshots.add")),9,nv)):Ys("v-if",!0),"select"==n.value?(Is(),Ms("button",{key:1,onClick:t[7]||(t[7]=e=>$(!0)),type:"button",style:{"text-align":"left","margin-left":"0px"},class:"btn btn-danger start-0 position-absolute ms-3"},te(N("snapshots.delete_all")),1)):Ys("v-if",!0),"select"==n.value?(Is(),Ms("button",{key:2,type:"button",onClick:$,disabled:h.value,class:"btn btn-danger"},te(N("snapshots.delete")),9,sv)):Ys("v-if",!0),"select"==n.value?(Is(),Ms("button",{key:3,type:"button",onClick:k,disabled:h.value,class:"btn btn-primary"},te(N("snapshots.apply")),9,iv)):Ys("v-if",!0)])),_:1},512))}};lp("\ninput[data-v-089b0491]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-089b0491] {\n  cursor: not-allowed;\n}\n"),ov.__scopeId="data-v-089b0491",ov.__file="http_src/vue/modal-snapshot.vue";const rv=e=>(pl("data-v-19c5b1f1"),e=e(),fl(),e),cv=["innerHTML"],uv={class:"form-group mb-3"},dv=["innerHTML"],_v={class:"alert_label"},pv={class:"form-check"},fv={class:"form-check-label"},mv={key:0,class:"form-check"},vv={class:"form-check-label"},hv={class:"form-check"},gv={class:"form-check-label"},bv={class:"form-check"},yv={class:"form-check-label"},wv={key:0,class:"exclude-domain-certificate"},xv={class:"alert_label"},kv={key:0,class:"form-check"},$v={class:"form-check-label whitespace"},Sv=["pattern","disabled"],Nv={key:1,class:"form-check"},Cv={class:"form-check-label whitespace"},Ev=["disabled","pattern"],Av={key:0,class:"form-group row"},Tv={class:"col-form-label"},Iv={class:"mt-1"},Ov=["placeholder"],Pv={class:"separator"},Uv=rv((()=>Vs("hr",{class:"separator"},null,-1))),jv={class:"form-group mb-3"},Mv={class:"custom-control custom-switch"},Fv={class:"custom-control-label"},Lv={class:"alert alert-warning border",role:"alert"},Rv=["disabled"];var Dv={__name:"modal-alerts-filter",props:{alert:Object,page:String},emits:["exclude"],setup(e,{expose:t,emit:a}){const l=ma(null),n=ma("any"),s=ma(!0),i=ma(null),o=ma(null),r=ma(null),c=i18n("details.comment_placeholder"),u=a,d=e;jl((()=>d.alert),((e,t)=>{null!=e&&(n.value="any",s.value=!0,i.value=""==e.info?.value?null:_(e.info?.value),o.value=""==e.info?.issuerdn?null:e.info?.issuerdn)}));const _=e=>{let t=e,a=e.split("://");a.length>1&&(t=a[1]),t=t.split(":")[0];let l=t.split("www.");return l.length>1&&(t=l[1]),t=t.split("/")[0],t},p=()=>{if("domain"==n.value){let e=new RegExp(h);return null==i.value||0==e.test(i.value)}if("certificate"==n.value){let e=new RegExp(g);return null==o.value||0==e.test(o.value)}return!1},f=wi((()=>d.alert?.alert_name)),m=wi((()=>{let e={value:"",label:""};if("host"!=d.page||null==d.alert)return e;let t=d.alert;return e.value=t.ip.value,null!=t.vlan&&null!=t.vlan.value&&0!=t.vlan.value&&(e.value=e.value+"@"+t.vlan.value),e.label=t.ip.label?`${t.ip.label} (${t.ip.value})`:t.ip.value,e})),v=wi((()=>{let e={cli_value:"",cli_label:"",srv_value:"",srv_label:""};if("flow"!=d.page||null==d.alert)return e;let t=d.alert;e.cli_value=t.flow.cli_ip.value,e.srv_value=t.flow.srv_ip.value;let a=`${t.flow.cli_ip.label||t.flow.cli_ip.value}`,l=`${t.flow.srv_ip.label||t.flow.srv_ip.value}`;return null!=t.flow.vlan&&null!=t.flow.vlan.value&&0!=t.flow.vlan.value&&(a=`${a}@${t.flow.vlan.label}`,l=`${l}@${t.flow.vlan.label}`,e.cli_value=e.cli_value+"@"+t.flow.vlan.value,e.srv_value=e.srv_value+"@"+t.flow.vlan.value),a!==e.cli_value&&(a=`${a} (${e.cli_value})`),l!==e.srv_value&&(l=`${l} (${e.srv_value})`),e.cli_label=a,e.srv_label=l,e}));let h=NtopUtils.REGEXES.domain_name_not_strict,g=NtopUtils.REGEXES.tls_certificate;const b=()=>{let e=d.page,t="domain"==n.value||"certificate"==n.value?n.value:"host",a={delete_alerts:s.value,label:r.value,type:t},l=null;"host"==t?("host"==n.value?l=m.value.value:"server_host"==n.value?l=v.value.srv_value:"client_host"==n.value&&(l=v.value.cli_value),a.alert_addr=l,"flow"==e?a.flow_alert_key=d.alert.alert_id.value:"host"==e&&(a.host_alert_key=d.alert.alert_id.value)):"domain"==t?(a.delete_alerts=!1,a.alert_domain=i.value):"certificate"==t&&(a.delete_alerts=!1,a.alert_certificate=o.value),y(),u("exclude",a)},y=()=>{l.value.close()};t({show:()=>{r.value="",l.value.show()},close:y}),_n((()=>{}));const w=e=>i18n(e);return(t,a)=>(Is(),Fs(np,{onShowed:a[10]||(a[10]=e=>{}),ref_key:"modal_id",ref:l},{title:vl((()=>[Ks(te(w("exclude_check"))+": ",1),Vs("span",{innerHTML:f.value},null,8,cv)])),body:vl((()=>[Vs("div",uv,[Vs("div",null,[Vs("label",null,[Ks(te(w("exclude_check"))+' "',1),Vs("b",{innerHTML:f.value},null,8,dv),Ks('". '),Vs("span",_v,te(w("exclude_for"))+":",1)]),Vs("div",pv,[wn(Vs("input",{class:"form-check-input",type:"radio",value:"any","onUpdate:modelValue":a[0]||(a[0]=e=>n.value=e)},null,512),[[Lo,n.value]]),Vs("label",fv,[Vs("span",null,te(w("show_alerts.filter_disable_check")),1)])]),"host"==e.page?(Is(),Ms("div",mv,[wn(Vs("input",{class:"form-check-input",type:"radio",value:"host","onUpdate:modelValue":a[1]||(a[1]=e=>n.value=e)},null,512),[[Lo,n.value]]),Vs("label",vv,[Vs("span",null,te(m.value.label),1)])])):Ys("v-if",!0),"flow"==e.page?(Is(),Ms(Ss,{key:1},[Vs("div",hv,[wn(Vs("input",{class:"form-check-input",type:"radio",value:"client_host","onUpdate:modelValue":a[2]||(a[2]=e=>n.value=e)},null,512),[[Lo,n.value]]),Vs("label",gv,[Vs("span",null,te(w("client"))+": "+te(v.value.cli_label),1)])]),Vs("div",bv,[wn(Vs("input",{class:"form-check-input",type:"radio",value:"server_host","onUpdate:modelValue":a[3]||(a[3]=e=>n.value=e)},null,512),[[Lo,n.value]]),Vs("label",yv,[Vs("span",null,te(w("server"))+": "+te(v.value.srv_label),1)])])],64)):Ys("v-if",!0)]),null!=i.value||null!=o.value?(Is(),Ms("div",wv,[Vs("label",null,[Vs("span",xv,te(w("check_exclusion.exclude_all_checks_for"))+":",1)]),null!=i.value?(Is(),Ms("div",kv,[wn(Vs("input",{class:"form-check-input",type:"radio",value:"domain","onUpdate:modelValue":a[4]||(a[4]=e=>n.value=e)},null,512),[[Lo,n.value]]),Vs("label",$v,[Vs("span",null,te(w("check_exclusion.domain"))+":",1)]),wn(Vs("input",{type:"text",pattern:ya(h),disabled:"domain"!=n.value,required:"","onUpdate:modelValue":a[5]||(a[5]=e=>i.value=e),class:"form-check-label custom-width"},null,8,Sv),[[jo,i.value]])])):Ys("v-if",!0),null!=o.value?(Is(),Ms("div",Nv,[wn(Vs("input",{class:"form-check-input",type:"radio",value:"certificate","onUpdate:modelValue":a[6]||(a[6]=e=>n.value=e)},null,512),[[Lo,n.value]]),Vs("label",Cv,[Vs("span",null,te(w("check_exclusion.tls_certificate"))+":",1)]),wn(Vs("input",{type:"text",disabled:"certificate"!=n.value,"onUpdate:modelValue":a[7]||(a[7]=e=>o.value=e),pattern:ya(g),required:"",class:"form-check-label custom-width"},null,8,Ev),[[jo,o.value]])])):Ys("v-if",!0)])):Ys("v-if",!0)]),"any"!=n.value?(Is(),Ms("div",Av,[Vs("div",null,[Vs("label",Tv,[Vs("b",null,te(w("show_alerts.add_a_comment")),1)])]),Vs("div",Iv,[wn(Vs("textarea",{placeholder:ya(c),id:"alert-label",name:"label",rows:"3",class:"form-control",type:"text","onUpdate:modelValue":a[8]||(a[8]=e=>r.value=e),maxlength:"450"},null,8,Ov),[[jo,r.value]])])])):Ys("v-if",!0),wn(Vs("hr",Pv,null,512),[[Yo,s.value]]),"domain"!=n.value&&"certificate"!=n.value?(Is(),Ms(Ss,{key:1},[wn(Vs("div",{class:"message alert alert-danger"},te(w("show_alerts.confirm_delete_filtered_alerts")),513),[[Yo,s.value]]),Uv,Vs("div",jv,[Vs("div",Mv,[wn(Vs("input",{type:"checkbox",class:"custom-control-input whitespace","onUpdate:modelValue":a[9]||(a[9]=e=>s.value=e)},null,512),[[Mo,s.value]]),Vs("label",Fv,te(w("delete_disabled_alerts")),1)])])],64)):Ys("v-if",!0),Vs("div",Lv,te(w("show_alerts.confirm_filter_alert")),1)])),footer:vl((()=>[Vs("button",{type:"button",onClick:b,disabled:p(),class:"btn btn-warning"},te(w("filter")),9,Rv)])),_:1},512))}};lp("\n.whitespace[data-v-19c5b1f1] {\n  margin-right: 0.2rem;\n}\n.custom-width[data-v-19c5b1f1] {\n  display: block;\n  min-width: 100%;\n}\ninput[data-v-19c5b1f1]:invalid {\n  border-color: #ff0000;\n}\n.exclude-domain-certificate[data-v-19c5b1f1] {\n  margin-top: 0.4rem;\n}\n"),Dv.__scopeId="data-v-19c5b1f1",Dv.__file="http_src/vue/modal-alerts-filter.vue";const zv={class:"form-group row mb-2"},qv={class:"col-sm-6"},Bv={class:"col-form-label"},Vv={class:"col-sm-6 mt-1"};var Hv={__name:"modal-acknowledge-alert",props:{context:Object,page:String},emits:["acknowledge"],setup(e,{expose:t,emit:a}){const l=e=>i18n(e),n=ma(null),s=ma(null),i=ma(""),o=ma(""),r=a,c=e;async function u(){const e=`${http_prefix}/lua/rest/v2/acknowledge/${c.page}/alerts.lua`,t={csrf:c.context.csrf,ifid:c.context.ifid,label:i.value,row_id:d.value.row_id};await b.http_request(e,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}),r("acknowledge"),_()}_n((()=>{}));const d=ma({}),_=()=>{n.value.close()};return t({show:e=>{d.value=e;const t=$(`<span>${e.alert_id.label}</span>`);o.value=t.text().trim(),i.value=e.user_label;let a=l("show_alerts.confirm_acknowledge_alert");s.value.show(a,"alert-warning"),n.value.show()},close:_}),(e,t)=>(Is(),Fs(np,{ref_key:"modal_id",ref:n},{title:vl((()=>[Ks(te(l("show_alerts.acknowledge_alert"))+": "+te(o.value),1)])),body:vl((()=>[Vs("div",zv,[Vs("div",qv,[Vs("label",Bv,[Vs("b",null,te(l("show_alerts.add_a_comment")),1)])]),Vs("div",Vv,[wn(Vs("input",{"onUpdate:modelValue":t[0]||(t[0]=e=>i.value=e),class:"form-control",type:"text",maxlength:"255"},null,512),[[jo,i.value]])])]),Hs(S_,{no_close_button:!0,ref_key:"alert_info",ref:s},null,512)])),footer:vl((()=>[Vs("button",{type:"button",onClick:u,class:"btn btn-primary"},te(l("acknowledge")),1)])),_:1},512))},__file:"http_src/vue/modal-acknowledge-alert.vue"},Gv={__name:"modal-delete-alert",props:{context:Object,page:String},emits:["delete_alert"],setup(e,{expose:t,emit:a}){const l=e=>i18n(e),n=ma(null),s=ma(null),i=a,o=ma({});let r="historical";const c=e;async function u(){const e=`${http_prefix}/lua/rest/v2/delete/${c.page}/alerts.lua`,t={csrf:c.context.csrf,ifid:c.context.ifid,status:r,row_id:o.value.row_id};await b.http_request(e,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}),i("delete_alert"),d()}_n((()=>{}));const d=()=>{n.value.close()};return t({show:(e,t)=>{o.value=e,r=t;let a=l("show_alerts.confirm_label_alert");s.value.show(a,"alert-danger"),n.value.show()},close:d}),(e,t)=>(Is(),Fs(np,{ref_key:"modal_id",ref:n},{title:vl((()=>[Ks(te(l("show_alerts.delete_alert")),1)])),body:vl((()=>[Hs(S_,{no_close_button:!0,ref_key:"alert_info",ref:s},null,512)])),footer:vl((()=>[Vs("button",{type:"button",onClick:u,class:"btn btn-primary"},te(l("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-alert.vue"};const Wv={class:"form-group row"},Kv={class:"col-sm-6"},Jv={class:"col-form-label"},Yv={class:"col-sm-6"},Zv=["value"],Xv={class:"form-group row mb-2"},Qv={class:"col-sm-6"},eh={class:"col-form-label"},th={class:"col-sm-6 mt-1"},ah=["value"];var lh={__name:"modal-acknowledge-alerts",props:{page:String,context:Object},emits:["acknowledge_alerts"],setup(e,{expose:t,emit:a}){const l=e,n=a,s=e=>i18n(e),i=ma(null),o=ma(null),r=ma(""),c=ma("");ma([]),_n((()=>{}));async function u(){const e=`${http_prefix}/lua/rest/v2/acknowledge/${l.page}/alerts.lua`,t=x.get_url_object(),a={csrf:l.context.csrf,...t};await b.http_post_request(e,a),n("acknowledge_alerts"),d()}const d=()=>{i.value.close()};return t({show:e=>{r.value=b.from_utc_to_server_date_format(1e3*e.epoch_begin),c.value=b.from_utc_to_server_date_format(1e3*e.epoch_end);let t=s("show_alerts.confirm_acknowledge_alerts");o.value.show(t,"alert-danger"),i.value.show()},close:d}),(e,t)=>(Is(),Fs(np,{ref_key:"modal_id",ref:i},{title:vl((()=>[Ks(te(s("acknowledge_alerts")),1)])),body:vl((()=>[Vs("div",Wv,[Vs("div",Kv,[Vs("label",Jv,[Vs("b",null,te(s("date_from")),1)])]),Vs("div",Yv,[Vs("input",{class:"form-control",type:"text",value:r.value,disabled:""},null,8,Zv)])]),Vs("div",Xv,[Vs("div",Qv,[Vs("label",eh,[Vs("b",null,te(s("date_from")),1)])]),Vs("div",th,[Vs("input",{class:"form-control",type:"text",value:c.value,disabled:""},null,8,ah)])]),Hs(S_,{no_close_button:!0,ref_key:"alert_info",ref:o},null,512)])),footer:vl((()=>[Vs("button",{type:"button",onClick:u,class:"btn btn-primary"},te(s("acknowledge")),1)])),_:1},512))},__file:"http_src/vue/modal-acknowledge-alerts.vue"};const nh={class:"form-group row"},sh={class:"col-sm-6"},ih={class:"col-form-label"},oh={class:"col-sm-6"},rh=["value"],ch={class:"form-group row"},uh={class:"col-sm-6"},dh={class:"col-form-label"},_h={class:"col-sm-6 mt-1"},ph=["value"],fh={class:"form-group filters-list mb-2"},mh={class:"form-group row"},vh={class:"col-sm-6"},hh={class:"col-form-label"},gh={class:"col-sm-6 mt-1"},bh=["value"];var yh={__name:"modal-delete-alerts",props:{page:String,context:Object},emits:["delete_alerts"],setup(e,{expose:t,emit:a}){const l=e,n=a,s=e=>i18n(e),i=ma(null),o=ma(null),r=ma(""),c=ma(""),u=ma([]);_n((()=>{}));async function d(){const e=`${http_prefix}/lua/rest/v2/delete/${l.page}/alerts.lua`,t=x.get_url_object(),a={csrf:l.context.csrf,...t};await b.http_post_request(e,a),n("delete_alerts"),_()}const _=()=>{i.value.close()};return t({show:e=>{r.value=b.from_utc_to_server_date_format(1e3*e.epoch_begin),c.value=b.from_utc_to_server_date_format(1e3*e.epoch_end);const t=Xd.tag_operator_label_dict;u.value=e.filters.map((e=>({label:e.label,value:`${t[e.operator]} ${e.value_label}`})));let a=s("show_alerts.confirm_delete_alerts");o.value.show(a,"alert-danger"),i.value.show()},close:_}),(e,t)=>(Is(),Fs(np,{ref_key:"modal_id",ref:i},{title:vl((()=>[Ks(te(s("delete_alerts")),1)])),body:vl((()=>[Vs("div",nh,[Vs("div",sh,[Vs("label",ih,[Vs("b",null,te(s("date_from")),1)])]),Vs("div",oh,[Vs("input",{class:"form-control",type:"text",value:r.value,disabled:""},null,8,rh)])]),Vs("div",ch,[Vs("div",uh,[Vs("label",dh,[Vs("b",null,te(s("date_from")),1)])]),Vs("div",_h,[Vs("input",{class:"form-control",type:"text",value:c.value,disabled:""},null,8,ph)])]),Vs("div",fh,[(Is(!0),Ms(Ss,null,An(u.value,(e=>(Is(),Ms("div",mh,[Vs("div",vh,[Vs("label",hh,[Vs("b",null,te(e.label),1)])]),Vs("div",gh,[Vs("input",{class:"form-control",type:"text",value:e.value,disabled:""},null,8,bh)])])))),256))]),Hs(S_,{no_close_button:!0,ref_key:"alert_info",ref:o},null,512)])),footer:vl((()=>[Vs("button",{type:"button",onClick:d,class:"btn btn-primary"},te(s("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-alerts.vue"};const wh={class:"row"},xh={class:"col-12"},kh={class:"mb-2"},$h={class:"w-100"},Sh={clas:"range-container d-flex flex-wrap"},Nh={class:"range-picker d-flex m-auto flex-wrap"},Ch={key:0,class:"ms-1 me-2"},Eh=["value"],Ah=["label"],Th=["value"],Ih=["title"],Oh=[Vs("i",{class:"fas fa-lg fa-link"},null,-1)],Ph=["title","href"],Uh=[Vs("i",{class:"fas fa-lg fa-file"},null,-1)],jh=["title"],Mh=[Vs("i",{class:"fas fa-lg fa-download"},null,-1)],Fh=["title"],Lh=[Vs("i",{class:"fas fa-lg fa-camera-retro"},null,-1)],Rh={class:"col-12"},Dh={class:"card card-shadow"},zh={class:"card-body"},qh={key:0,class:"row"},Bh={class:"col-12 mb-2",id:"chart-vue"},Vh={class:"card h-100 overflow-hidden"},Hh=Vs("div",null,null,-1),Gh=["title"],Wh=["onClick","title"],Kh={class:"card-footer"},Jh=Vs("i",{class:"fas fa fa-user-check"},null,-1),Yh=Vs("i",{class:"fas fa fa-trash"},null,-1);var Zh={__name:"page-alert-stats",props:{context:Object},setup(e){const t=e=>i18n(e),a=e,l=ma(null),n=ma(null),s=ma(null),i=ma(null),o=ma(null),r=ma(null),c=ma(null),u=ma(null),d=ma(null),_=ma(null),p=ma(null),f=ma(null),m=ma(0),v=ma(!1),g=ma(""),w=ma(null),k=a.context.ifid;let S;const C=ma(""),E=ma("");let A=`${http_prefix}/lua/pro/rest/v2/get/db/ts.lua`;const T=M.typeChart.TS_COLUMN,I=ma([]),O=ma([]),P=ma([t("show_alerts.alerts_info")]),U=ma({}),j=ma([]),F=ma(!1),L=wi((()=>{if(!a.context.show_chart||null==s.value)return"";if(m.value<0)throw"never run";const e=a.context.download.endpoint;let t=x.get_url_object(),l=s.value.get_columns_defs().filter((e=>e.visible)).map((e=>e.id)).join(",");t.format="txt",t.visible_columns=l;const n=x.obj_to_url_params(t);return`${location.origin}/${e}?${n}`}));function D(){return"page-alert-stats_query_presets"}async function z(e){1==a.context.show_cards&&1!=U.value.is_preset&&(I.value=await q("overview"))}async function q(e,t){const l=x.get_url_params(),n=`${a.context.endpoint_cards}?${l}&action=${e}`;return(await b.http_request(n)).map((t=>({id:t.name,label:t.label,title:t.tooltip,show_spinner:!1,data_loaded:"overview"!=e,options:t.value})))}dn((async()=>{g.value=`<div class="alert alert-success alert-dismissable"><span>${i18n("no_alerts_require_attention")}</span></div>`,a.context.is_va&&b.check_and_set_default_time_interval("day"),async function(){S=x.get_url_entry("page");const e=x.get_url_entry("status");null==S&&(S="all");"engaged"==e&&"flow"==S&&x.set_key_to_url("status","historical");A="snmp_device"==S?`${http_prefix}/lua/pro/rest/v2/get/snmp/device/alert/ts.lua`:`${http_prefix}/lua/rest/v2/get/${S}/alert/ts.lua`,U.value={value:x.get_url_entry("query_preset"),count:x.get_url_entry("count")},null==U.value.value&&(U.value.value="");C.value=`alert_${S}`,E.value=`${C.value}_${U.value.value}`}(),function(){null==x.get_url_entry("ifid")&&x.set_key_to_url("ifid",k);if(null==x.get_url_entry("epoch_begin")||null==x.get_url_entry("epoch_end")){let e=Number.parseInt((Date.now()-18e5)/1e3),t=Number.parseInt(Date.now()/1e3);x.set_key_to_url("epoch_begin",e),x.set_key_to_url("epoch_end",t)}"flow"==x.get_url_entry("page")&&"engaged"==x.get_url_entry("status")&&x.set_key_to_url("status","historical")}(),await async function(){if(!a.context.is_ntop_enterprise_l||"engaged"==x.get_url_entry("status"))return void h.ready(D());let e=`${http_prefix}/lua/pro/rest/v2/get/alert/preset/consts.lua?page=${S}`,t=await b.http_request(e);if(null==t||0==t.length)return j.value=[],x.set_key_to_url("query_preset",""),x.set_key_to_url("count",""),void h.ready(D());j.value=t[0].list.map((e=>({value:e.id,name:e.name,count:e.count,builtin:!0}))),t.length>1&&t[1].list.forEach((e=>{let t={value:e.id,name:e.name,count:e.count,is_preset:!0};j.value.push(t)}));if(null==U.value||""==U.value.value)U.value=j.value[0];else{let e=j.value.find((e=>e.value==U.value.value));U.value=e||j.value[0]}x.set_key_to_url("query_preset",U.value.value),x.set_key_to_url("count",U.value.count),h.ready(D())}(),F.value=!0,await z()})),_n((async()=>{!async function(){await h.on_ready("range_picker"),n.value.register_status(),y.on_status_change(S,(e=>{x.get_url_params(),s.value.refresh_table(),z()}),!1)}()}));const B=(e,t)=>a=>{!async function(e,t){if(e.show_spinner=!0,await Ja(),0==e.data_loaded){let a=await q(e.id);e.options=a.find((t=>t.id==e.id)).options,await Ja(),O.value[t].load_menu()}e.show_spinner=!1}(e,t)};function V(){$(`#${E.value}`).on("click","a.tag-filter",(async function(e){G(e,$(this))}))}const H=async e=>{await h.on_ready("page-alert-stats_query_presets");let t={l7_proto:(e,t)=>{let a="";if(void 0!==e.confidence){const t=e.confidence;a="DPI"==t?`<span class="badge bg-success" title="${t}">${t}</span>`:`<span class="badge bg-warning" title="${t}">${t}</span>`}return R.filterize("l7proto",e.value,e.label)+" "+`${a}`},info:(e,t)=>{let a="";return e.value&&(a=`<button class="btn btn-light btn-sm border ms-1" data-placement="bottom" onclick="\n                    const textArea = document.createElement('textarea');\n                    textArea.value = '${e.value}';    \n                    textArea.style.position = 'absolute';\n                    textArea.style.left = '-999999px';    \n                    document.body.prepend(textArea);\n                    textArea.select();\n                    document.execCommand('copy');"\n                    ><i class="fas fa-copy"></i></button>`),`${a} ${R.filterize("info",e.value,e.label)}`}},l=U.value.is_preset&&e.length>0;return l&&(e=[e[0]].concat(a.context.columns_def)),e.forEach((e=>{if(e.render_func=t[e.data_field],"actions"==e.id){if(1==l)return void(e.button_def_array=[{id:"expand",icon:"fas fa fa-search-plus",class:["link-button"],title_i18n:"db_search.expand_button",event_id:"click_button_expand"}]);const t={snmp_info:a.context.actions.show_snmp_info,info:a.context.actions.show_info,historical_data:a.context.actions.show_historical,acknowledge:a.context.actions.show_acknowledge,disable:a.context.actions.show_disable,settings:a.context.actions.show_settings,remove:a.context.actions.show_delete};e.button_def_array.forEach((e=>{t[e.id]||e.class.push("link-disabled")}))}})),e},G=(e,t)=>{let a,l;e.stopPropagation();let n="eq";null!=t.data("tagKey")&&(a=t.data("tagKey")),null!=t.data("tagRealvalue")?l=t.data("tagRealvalue"):null!=t.data("tagValue")&&(l=t.data("tagValue")),null!=t.data("tagOperator")&&(n=t.data("tagOperator")),W({id:a,value:l,operator:n})};function W(e){if(!r.value.is_filter_defined(e))throw`Filter ${e.value} not defined`;ntopng_events_manager.emit_custom_event(N.SHOW_MODAL_FILTERS,e)}const K=()=>x.get_url_object();function J(e){x.set_key_to_url("page",e.page_name),null!=window.location.toString().match(/alert_stats.lua/)&&function(){let e=y.get_status().filters;if(null==e)return;x.delete_params(e.map((e=>e.id)))}(),x.reload_url()}function Y(){const e=$(c.value),a=document.createElement("input");a.value=location.href,document.body.appendChild(a),a.select(),document.execCommand("copy"),document.body.removeChild(a),e.attr("title",`${t("copied")}!`).tooltip("dispose").tooltip().tooltip("show")}function Z(){i.value.show()}function X(){o.value.show()}async function Q(e){e.csrf=a.context.csrf;let l=`${http_prefix}/lua/pro/rest/v2/add/alert/exclusion.lua`;try{let a={"Content-Type":"application/json"};await b.http_request(l,{method:"post",headers:a,body:JSON.stringify(e)});x.get_url_params();setTimeout((()=>{ntopng_events_manager.emit_custom_event(N.SHOW_GLOBAL_ALERT_INFO,{text_html:t("check_exclusion.disable_warn"),type:"alert-info",timeout:2})}),1e3)}catch(e){console.error(e)}}function ee(){let e=s.value,t=n.value;setTimeout((()=>{e.refresh_table(),t.update_chart()}),1e3)}function ae(e){null!=e?.rows&&(v.value=0==e.rows.length)}function le(e){let t={click_button_snmp_info:_e,click_button_info:pe,click_button_historical_flows:de,click_button_acknowledge:ue,click_button_disable:ce,click_button_settings:re,click_button_remove:oe,click_button_expand:ne};null!=t[e.event_id]&&t[e.event_id](e)}function ne(e){const t=e.row;x.set_key_to_url("query_preset",""),x.set_key_to_url("count","");let a=y.get_status().filters,l=t?.filter?.tag_filters;l?.length>0&&(l=l.map((e=>({id:e.id,operator:e.op,value:e.value}))),a=a.concat(l));let n={};a.forEach((e=>n[`${e.id}_${e.operator}_${e.value}`]=e)),a=b.object_to_array(n);let s=Xd.get_filters_object(a);x.add_obj_to_url(s),x.reload_url()}function se(){let e=y.get_status();p.value.show(e)}function ie(){let e=y.get_status();f.value.show(e)}function oe(e){const t=e.row;let a=fe();_.value.show(t,a)}function re(e){const t=e.row,a=$(t.msg.configset_ref).attr("href");window.location.href=a}function ce(e){!function(e){w.value=e,u.value.show()}(e.row)}function ue(e){const t=e.row;d.value.show(t,a.context)}function de(e){const t=e.row;t.link_to_past_flows?window.location.href=t.link_to_past_flows:window.location.href=`${http_prefix}/lua/pro/db_search.lua`}function _e(e){const t=e.row;let a="";a=null!=t.port.value?`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${t.ip}&snmp_port_idx=${t.port.value}`:`${http_prefix}/lua/pro/enterprise/snmp_device_details.lua?host=${t.ip}`,window.open(a,"_blank")}function pe(e){const t=e.row;let l=fe(),n={page:S,status:l,row_id:t.row_id,tstamp:t.tstamp.value},s=x.obj_to_url_params(n);const i=`${a.context.alert_details_url}?${s}`;window.open(i,"_blank")}function fe(){let e=x.get_url_entry("status");return null!=e&&""!=e||(e="historical"),e}return(a,m)=>(Is(),Ms(Ss,null,[Hs(n_,{id:"navbar",main_title:e.context.navbar.main_title,base_url:e.context.navbar.base_url,help_link:e.context.navbar.help_link,items_table:e.context.navbar.items_table,onClick_item:J},null,8,["main_title","base_url","help_link","items_table"]),Vs("div",wh,[Vs("div",xh,[Vs("div",kh,[Vs("div",$h,[Vs("div",Sh,[Vs("div",Nh,[Hs(S_,{id:"alert_info",global:!0,ref_key:"alert_info",ref:l},null,512),Hs(mm,{id:"modal_traffic_extraction",ref_key:"modal_traffic_extraction",ref:i},null,512),Hs(ov,{ref_key:"modal_snapshot",ref:o,csrf:e.context.csrf},null,8,["csrf"]),F.value?(Is(),Fs(Wp,{key:0,ref_key:"range_picker",ref:r,id:"range_picker"},{begin:vl((()=>[j.value.length>0?(Is(),Ms("div",Ch,[wn(Vs("select",{class:"me-2 form-select","onUpdate:modelValue":m[0]||(m[0]=e=>U.value=e),onChange:m[1]||(m[1]=e=>(x.get_url_params(),x.set_key_to_url("query_preset",U.value.value),x.set_key_to_url("count",U.value.count),void x.reload_url()))},[(Is(!0),Ms(Ss,null,An(j.value,(e=>(Is(),Ms(Ss,null,[1==e.builtin?(Is(),Ms("option",{key:0,value:e},te(e.name),9,Eh)):Ys("v-if",!0)],64)))),256)),"analysis"!=ya(S)?(Is(),Ms("optgroup",{key:0,label:t("queries.queries")},[(Is(!0),Ms(Ss,null,An(j.value,(e=>(Is(),Ms(Ss,null,[e.builtin?Ys("v-if",!0):(Is(),Ms("option",{key:0,value:e},te(e.name),9,Th))],64)))),256))],8,Ah)):Ys("v-if",!0)],544),[[Ro,U.value]])])):Ys("v-if",!0)])),extra_range_buttons:vl((()=>[e.context.show_permalink?(Is(),Ms("button",{key:0,class:"btn btn-link btn-sm",onClick:Y,title:t("graphs.get_permanent_link"),ref_key:"permanent_link_button",ref:c},[...Oh],8,Ih)):Ys("v-if",!0),e.context.show_download?(Is(),Ms("a",{key:1,class:"btn btn-link btn-sm",id:"dt-btn-download",title:t("graphs.download_records"),href:L.value},[...Uh],8,Ph)):Ys("v-if",!0),e.context.show_pcap_download?(Is(),Ms("button",{key:2,class:"btn btn-link btn-sm",onClick:Z,title:t("traffic_recording.pcap_download")},[...Mh],8,jh)):Ys("v-if",!0),e.context.is_ntop_enterprise_m?(Is(),Ms("button",{key:3,class:"btn btn-link btn-sm",onClick:X,title:t("datatable.manage_snapshots")},[...Lh],8,Fh)):Ys("v-if",!0)])),_:1},512)):Ys("v-if",!0)])])])])]),Vs("div",Rh,[Vs("div",Dh,[Vs("div",zh,[e.context.show_chart?(Is(),Ms("div",qh,[Vs("div",Bh,[Vs("div",Vh,[Hs(C_,{ref_key:"chart",ref:n,id:"chart_alert_stats",chart_type:ya(T),base_url_request:ya(A),register_on_status_change:!1},null,8,["chart_type","base_url_request"])])]),Hh,Hs(rm,{ref_key:"table_alerts",ref:s,table_config_id:C.value,table_id:E.value,csrf:e.context.csrf,f_map_columns:H,get_extra_params_obj:K,display_message:v.value,message_to_display:g.value,onLoaded:V,onCustom_event:le,onRows_loaded:ae},{custom_header:vl((()=>[(Is(!0),Ms(Ss,null,An(I.value,((e,t)=>(Is(),Fs(Rd,{f_on_open:B(e,t),ref_for:!0,ref:e=>{O.value[t]=e}},{title:vl((()=>[Hs(cm,{show:e.show_spinner,size:"1rem",class:"me-1"},null,8,["show"]),Vs("a",{class:"ntopng-truncate",title:e.title},te(e.label),9,Gh)])),menu:vl((()=>[(Is(!0),Ms(Ss,null,An(e.options,(e=>(Is(),Ms("a",{style:{cursor:"pointer",display:"block"},onClick:t=>function(e,t){t.stopPropagation(),W({id:e.key,value:e.value,operator:e.operator})}(e,t),class:"ntopng-truncate tag-filter",title:e.value},te(e.label),9,Wh)))),256))])),_:2},1032,["f_on_open"])))),256)),Ys(" Dropdown columns ")])),_:1},8,["table_config_id","table_id","csrf","display_message","message_to_display"])])):Ys("v-if",!0)]),Ys(" card body "),wn(Vs("div",Kh,[e.context.show_acknowledge_all?(Is(),Ms("button",{key:0,onClick:se,class:"btn btn-primary me-1"},[Jh,Ks(" "+te(t("acknowledge_alerts")),1)])):Ys("v-if",!0),e.context.show_delete_all?(Is(),Ms("button",{key:1,onClick:ie,class:"btn btn-danger"},[Yh,Ks(" "+te(t("delete_alerts")),1)])):Ys("v-if",!0)],512),[[Yo,"all"!=ya(S)]]),Ys(" card footer ")]),Ys(" card-shadow ")]),Ys(" div col "),Hs(fm,{note_list:P.value},null,8,["note_list"])]),Ys(" div row "),Hs(Hv,{ref_key:"modal_acknowledge",ref:d,context:e.context,page:ya(S),onAcknowledge:ee},null,8,["context","page"]),Hs(Gv,{ref_key:"modal_delete",ref:_,context:e.context,page:ya(S),onDelete_alert:ee},null,8,["context","page"]),Hs(lh,{ref_key:"modal_acknowledge_alerts",ref:p,context:e.context,page:ya(S),onAcknowledge_alerts:ee},null,8,["context","page"]),Hs(yh,{ref_key:"modal_delete_alerts",ref:f,context:e.context,page:ya(S),onDelete_alerts:ee},null,8,["context","page"]),Hs(Dv,{alert:w.value,page:ya(S),onExclude:Q,ref_key:"modal_alerts_filter",ref:u},null,8,["alert","page"])],64))},__file:"http_src/vue/page-alert-stats.vue"};const Xh={class:"row"},Qh={class:"col-12"},eg={class:"mb-2"},tg={class:"w-100"},ag={clas:"range-container d-flex flex-wrap"},lg={class:"range-picker d-flex m-auto flex-wrap"},ng={class:"ms-1 me-2"},sg=["value"],ig=["label"],og=["value"],rg=["title"],cg=[Vs("i",{class:"fas fa-lg fa-link"},null,-1)],ug=["title","href"],dg=[Vs("i",{class:"fas fa-lg fa-file"},null,-1)],_g=["title"],pg=[Vs("i",{class:"fas fa-lg fa-download"},null,-1)],fg=["title"],mg=[Vs("i",{class:"fas fa-lg fa-camera-retro"},null,-1)],vg={class:"col-12"},hg={class:"card card-shadow"},gg={class:"card-body"},bg={class:"row"},yg={key:0,class:"col-12 mb-2",id:"chart-vue"},wg=["title"],xg=["onClick","title"],kg={key:0,class:"card-footer"},$g={key:0,id:"dt-btn-acknowledge",disabled:!0,"data-bs-target":"#dt-acknowledge-modal","data-bs-toggle":"modal",class:"btn btn-primary me-1"},Sg=Vs("i",{class:"fas fa fa-user-check"},null,-1),Ng={key:1,id:"dt-btn-delete",disabled:!0,"data-bs-target":"#dt-delete-modal","data-bs-toggle":"modal",class:"btn btn-danger"},Cg=Vs("i",{class:"fas fa fa-trash"},null,-1);var Eg={__name:"page-flow-historical",props:{context:Object},setup(e){const t=e=>i18n(e),l=e,n=ma(null),s=ma(null),i=ma(null),o=ma(null),r=ma(null),c=ma(null),u=ma(null),d=ma(null),_=ma(null),p=ma(null),f=ma(null),v=l.context.ifid,g=ma(""),w=ma(""),k=wi((()=>{if(null==O.value?.value)return w.value;return`${w.value}_${O.value.value}`})),S=wi((()=>{if(z.value<0)throw"never run";const e=l.context.download.endpoint;let t=x.get_url_object(),a=i.value.get_columns_defs().filter((e=>e.visible)).map((e=>e.id)).join(",");t.format="txt",t.visible_columns=a;const n=x.obj_to_url_params(t);return`${location.origin}/${e}?${n}`}));let C=`${http_prefix}/lua/pro/rest/v2/get/db/ts.lua`;const E=wi((()=>"topk-timeseries"==l.context?.chart_type?"height:450px!important":"height:300px!important")),A=wi((()=>"topk-timeseries"==l.context?.chart_type?M.typeChart.TS_STACKED:M.typeChart.TS_COLUMN)),T=ma([]),I=ma([]),O=ma({}),P=ma([]);ma([]);const U=ma(!1),j=ma(!1),F=ma(t("datatable.aggregated")),L=ma(null),D=ma(!1),z=ma(0);function q(e){let t=e?.chart;return null!=t&&t.length>0?t[0]:{}}dn((async()=>{!function(){g.value=x.get_url_entry("page"),null==g.value&&(g.value="overview");C=`${http_prefix}/lua/pro/rest/v2/get/db/ts.lua`,O.value={value:x.get_url_entry("query_preset")},null==O.value.value&&(O.value.value="");w.value="flow_historical";"true"==x.get_url_entry("aggregated")&&(w.value="flow_historical_aggregated",j.value=!0,L.value="hour",D.value=!0)}(),function(){null==x.get_url_entry("ifid")&&x.set_key_to_url("ifid",v);if(0==j.value)b.check_and_set_default_time_interval();else{const e=e=>{let t=b.get_timeframe_from_timeframe_id(L.value);return e.epoch_end-e.epoch_begin<t},t=b.check_and_set_default_time_interval(L.value,e);null!=t&&(t.epoch_begin=b.round_time_by_timeframe_id(t.epoch_begin,L.value),t.epoch_end=b.round_time_by_timeframe_id(t.epoch_end,L.value),x.set_key_to_url("epoch_begin",t.epoch_begin),x.set_key_to_url("epoch_end",t.epoch_end))}"flow"==x.get_url_entry("page")&&"engaged"==x.get_url_entry("status")&&x.set_key_to_url("status","historical");null==x.get_url_entry("aggregated")&&x.set_key_to_url("aggregated","false")}(),await async function(){let e=`${http_prefix}/lua/pro/rest/v2/get/db/preset/consts.lua?page=${g.value}&aggregated=${j.value}`,t=await b.http_request(e);P.value=t[0].list.map((e=>{let t=q(e);return{value:e.id,name:e.name,count:t?.params?.count,chart_config:t,builtin:!0}})),t.length>1&&t[1].list.forEach((e=>{let t=q(e),a={value:e.id,name:e.name,count:t?.params?.count,chart_config:t,is_preset:!0};P.value.push(a)}));if(null==O.value||""==O.value.value)O.value=P.value[0];else{let e=P.value.find((e=>e.value==O.value.value));O.value=e||P.value[0]}x.set_key_to_url("query_preset",O.value.value),x.set_key_to_url("count",O.value.count),h.ready(pe())}(),U.value=!0})),_n((async()=>{!async function(){await h.on_ready("range_picker"),l.context.show_chart&&s.value.register_status();y.on_status_change(g.value,(e=>{x.get_url_params(),i.value.refresh_table(),G(),z.value+=1}),!1)}(),G()}));const B=async e=>{await h.on_ready(pe());let t=O.value.chart_config?.unit_measure;return null==t&&(t="number"),e.yaxis.labels.formatter=m.getFormatter(t),e};function H(){0==j.value?x.delete_params(["aggregated"]):x.set_key_to_url("aggregated","true"),x.reload_url()}async function G(e){1==l.context.show_cards&&(T.value=await W("overview"))}async function W(e,t){const a=x.get_url_params(),l=`${http_prefix}/lua/pro/rest/v2/get/flow/top.lua?${a}&action=${e}`;return(await b.http_request(l)).map((t=>({id:t.action||t.name,label:t.label,title:t.tooltip,show_spinner:!1,data_loaded:"overview"!=e,options:t.value})))}const K=(e,t)=>a=>{!async function(e,t){if(e.show_spinner=!0,await Ja(),0==e.data_loaded){let a=await W(e.id);e.options=a.find((t=>t.id==e.id)).options,await Ja(),I.value[t].load_menu()}e.show_spinner=!1}(e,t)};function J(){$(`#${k.value}`).on("click","a.tag-filter",(async function(e){Z(e,$(this))}))}const Y=async e=>{await h.on_ready(pe());const t=(e,t,a)=>void 0!==t&&0!=t.value?`<a class='tag-filter' data-tag-key='${e}' data-tag-value='${t.value}' title='${t.title}' href='javascript:void(0)'>${t.label}</a>`:"",n=(e,t,l)=>null==t||0==t?"":`<a class='tag-filter' data-tag-key='${e}' data-tag-value='${t}' href='javascript:void(0)'>${a.msecToTime(t)}</a>`,s=(e,t,a)=>null==t||0==t?"":`<a class='tag-filter' data-tag-key='${e}' data-tag-value='${t.value}' href='javascript:void(0)'>${t.title}</a>`;let i={first_seen:(e,t)=>{if(void 0!==e)return e.time},DURATION:(e,t)=>a.secondsToTime(e),THROUGHPUT:(e,t)=>m.getFormatter("bps_no_scale")(e),l7proto:(e,t)=>{let a="";if(void 0!==e.confidence){const t=e.confidence;a="DPI"==t?`<span class="badge bg-success" title="${t}">${t}</span>`:`<span class="badge bg-warning" title="${t}">${t}</span>`}return R.filterize("l7proto",e.value,e.label)+" "+`${a}`},asn:(e,a)=>t("asn",e),cli_asn:(e,a)=>t("cli_asn",e),srv_asn:(e,a)=>t("srv_asn",e),flow_risk:(e,t)=>{if(null==e)return"";let a=[];for(let t=0;t<e.length;t++){const l=e[t],n=l.label||l.value,s=l.help;a.push(`${n} ${s}`)}return a.join(", ")},cli_nw_latency:(e,t)=>n("cli_nw_latency",e),srv_nw_latency:(e,t)=>n("srv_nw_latency",e),major_connection_state:(e,t)=>s("major_connection_state",e),minor_connection_state:(e,t)=>s("minor_connection_state",e),info:(e,t)=>null==e?"":`<a class='tag-filter' data-tag-key='info' data-tag-value='${e.title}' title='${e.title}' href='javascript:void(0)'>${e.label}</a>`};return e=e.filter((e=>0!=l.context?.visible_columns[e.data_field])),O.value.is_preset&&e.length>0&&(e=[e[0]].concat(l.context.columns_def)),e.forEach((e=>{if(e.render_func=i[e.data_field],"actions"==e.id){const t={info:l.context.actions.show_info,historical_data:l.context.actions.show_historical,flow_alerts:l.context.actions.show_alerts,pcap_download:l.context.actions.show_pcap_download,row_data:l.context.is_enterprise_xl&&j.value};e.button_def_array.forEach((e=>{null!=t[e.id]&&0==t[e.id]&&e.class.push("link-disabled")}))}})),e},Z=(e,t)=>{let a,l;e.stopPropagation();let n="eq";null!=t.data("tagKey")&&(a=t.data("tagKey")),null!=t.data("tagRealvalue")?l=t.data("tagRealvalue"):null!=t.data("tagValue")&&(l=t.data("tagValue")),null!=t.data("tagOperator")&&(n=t.data("tagOperator")),X({id:a,value:l,operator:n})};function X(e){c.value.is_filter_defined(e)?ntopng_events_manager.emit_custom_event(N.SHOW_MODAL_FILTERS,e):(x.set_key_to_url("query_preset",""),x.set_key_to_url(e.id,`${e.value};${e.operator}`),x.reload_url())}const Q=()=>x.get_url_object();function ee(e){x.set_key_to_url("page",e.page_name),x.reload_url()}function ae(){const e=$(u.value),a=document.createElement("input");a.value=location.href,document.body.appendChild(a),a.select(),document.execCommand("copy"),document.body.removeChild(a),e.attr("title",`${t("copied")}!`).tooltip("dispose").tooltip().tooltip("show")}function le(){o.value.show()}function ne(){r.value.show()}async function se(e){e.csrf=l.context.csrf;let a=`${http_prefix}/lua/pro/rest/v2/add/alert/exclusion.lua`;try{let l={"Content-Type":"application/json"};await b.http_request(a,{method:"post",headers:l,body:JSON.stringify(e)});x.get_url_params();setTimeout((()=>{ntopng_events_manager.emit_custom_event(N.SHOW_GLOBAL_ALERT_INFO,{text_html:t("check_exclusion.disable_warn"),type:"alert-info",timeout:2})}),1e3)}catch(e){console.error(e)}}function ie(e){let t=i.value,a=s.value;setTimeout((()=>{e||t.refresh_table(),a.update_chart()}),1e3)}function oe(e){let t={click_button_info:re,click_button_flow_alerts:de,click_button_historical_flows:ue,click_button_pcap_download:ce,click_button_flows:_e};null!=t[e.event_id]&&t[e.event_id](e)}function re(e){const t=e.row,a=`${http_prefix}/lua/pro/db_flow_details.lua?row_id=${t.rowid}&tstamp=${t.tstamp}&instance_name=${t.NTOPNG_INSTANCE_NAME}`;window.open(a,"_blank")}function ce(e){const t=e.row,a={epoch_begin:t?.filter?.epoch_begin,epoch_end:t?.filter?.epoch_end};o.value.show(t?.filter?.bpf,a)}function ue(e){const t=e.row;let a={};for(let e in t){let l=e;if(null!=t[e].tag_key&&""!=t[e].tag_key&&(l=t[e].tag_key),null==t[e].value&&""!=t[e].value)continue;let n=`${t[e].value};eq`;a[l]=n}x.set_key_to_url("query_preset",""),x.add_obj_to_url(a),x.reload_url()}function de(e){const t=e.row;t.alerts_url&&x.go_to_url(t.alerts_url)}function _e(e){const t=e.row,a=t.filter.epoch_begin,l=t.filter.epoch_end,n=t.flow.cli_ip.value,s=t.flow.srv_ip.value,i=t.flow.srv_port,o=t.probe_ip.value,r=t.NTOPNG_INSTANCE_NAME,c=t.vlan_id.value;let u=0!=c;const d=t.output_snmp.value;let _=0!=d;const p=t.input_snmp.value;let f=`${http_prefix}/lua/pro/db_search.lua?aggregated=false&epoch_begin=${a}&epoch_end=${l}&cli_ip=${n};eq&srv_ip=${s};eq&srv_port=${i};eq&probe_ip=${o};eq&instance_name=${r}`;u&&(f+=`&vlan_id=${c};eq`),0!=p&&(f+=`&input_snmp=${p};eq`),_&&(f+=`&output_snmp=${d};eq`),x.go_to_url(f)}function pe(){return"page-flow-historical_query_presets"}return(a,m)=>(Is(),Ms(Ss,null,[Hs(n_,{id:"navbar",main_title:e.context.navbar.main_title,base_url:e.context.navbar.base_url,help_link:e.context.navbar.help_link,items_table:e.context.navbar.items_table,onClick_item:ee},null,8,["main_title","base_url","help_link","items_table"]),Vs("div",Xh,[Vs("div",Qh,[Vs("div",eg,[Vs("div",tg,[Vs("div",ag,[Vs("div",lg,[Hs(S_,{id:"alert_info",global:!0,ref_key:"alert_info",ref:n},null,512),U.value?(Is(),Fs(Wp,{key:0,ref_key:"range_picker",ref:c,id:"range_picker",min_time_interval_id:L.value,round_time:D.value},{begin:vl((()=>[l.context.is_enterprise_xl?(Is(),Fs($f,{key:0,value:j.value,"onUpdate:value":m[0]||(m[0]=e=>j.value=e),class:"me-2 mt-1",change_label_side:!0,label:F.value,style:{},onChange_value:H},null,8,["value","label"])):Ys("v-if",!0),Vs("div",ng,[wn(Vs("select",{class:"me-2 form-select",style:{"min-width":"8rem"},"onUpdate:modelValue":m[1]||(m[1]=e=>O.value=e),onChange:m[2]||(m[2]=e=>(x.get_url_params(),x.set_key_to_url("query_preset",O.value.value),x.set_key_to_url("count",O.value.count),void x.reload_url()))},[(Is(!0),Ms(Ss,null,An(P.value,(e=>(Is(),Ms(Ss,null,[1==e.builtin?(Is(),Ms("option",{key:0,value:e},te(e.name),9,sg)):Ys("v-if",!0)],64)))),256)),"analysis"!=g.value?(Is(),Ms("optgroup",{key:0,label:t("queries.queries")},[(Is(!0),Ms(Ss,null,An(P.value,(e=>(Is(),Ms(Ss,null,[e.builtin?Ys("v-if",!0):(Is(),Ms("option",{key:0,value:e},te(e.name),9,og))],64)))),256))],8,ig)):Ys("v-if",!0)],544),[[Ro,O.value]])])])),extra_range_buttons:vl((()=>[e.context.show_permalink?(Is(),Ms("button",{key:0,class:"btn btn-link btn-sm",onClick:ae,title:t("graphs.get_permanent_link"),ref_key:"permanent_link_button",ref:u},[...cg],8,rg)):Ys("v-if",!0),e.context.show_download?(Is(),Ms("a",{key:1,class:"btn btn-link btn-sm",title:t("graphs.download_records"),href:S.value},[...dg],8,ug)):Ys("v-if",!0),e.context.show_pcap_download?(Is(),Ms("button",{key:2,class:"btn btn-link btn-sm",onClick:le,title:t("traffic_recording.pcap_download")},[...pg],8,_g)):Ys("v-if",!0),e.context.is_ntop_enterprise_m?(Is(),Ms("button",{key:3,class:"btn btn-link btn-sm",onClick:ne,title:t("datatable.manage_snapshots")},[...mg],8,fg)):Ys("v-if",!0)])),_:1},8,["min_time_interval_id","round_time"])):Ys("v-if",!0)])])])])]),Vs("div",vg,[Vs("div",hg,[Vs("div",gg,[Vs("div",bg,[e.context.show_chart?(Is(),Ms("div",yg,[Vs("div",{class:"card overflow-hidden",style:V(E.value)},[Ys(' <div class="card h-300 overflow-hidden"> '),Hs(C_,{ref_key:"chart",ref:s,id:"chart_0",chart_type:A.value,base_url_request:ya(C),map_chart_options:B,register_on_status_change:!1,min_time_interval_id:L.value,round_time:D.value},null,8,["chart_type","base_url_request","min_time_interval_id","round_time"])],4)])):Ys("v-if",!0),Hs(rm,{ref_key:"table_flows",ref:i,table_id:k.value,table_config_id:w.value,csrf:e.context.csrf,f_map_columns:Y,get_extra_params_obj:Q,onLoaded:J,onCustom_event:oe},{custom_header:vl((()=>[(Is(!0),Ms(Ss,null,An(T.value,((e,t)=>(Is(),Fs(Rd,{f_on_open:K(e,t),ref_for:!0,ref:e=>{I.value[t]=e}},{title:vl((()=>[Hs(cm,{show:e.show_spinner,size:"1rem",class:"me-1"},null,8,["show"]),Vs("a",{class:"ntopng-truncate",title:e.title},te(e.label),9,wg)])),menu:vl((()=>[(Is(!0),Ms(Ss,null,An(e.options,(e=>(Is(),Ms("a",{style:{cursor:"pointer",display:"block"},onClick:t=>function(e,t){t.stopPropagation(),X({id:e.key,value:e.value,operator:e.operator})}(e,t),class:"ntopng-truncate tag-filter",title:e.value},te(e.label),9,xg)))),256))])),_:2},1032,["f_on_open"])))),256)),Ys(" Dropdown columns ")])),_:1},8,["table_id","table_config_id","csrf"])])]),Ys(" card body "),l.context.show_acknowledge_all||l.context.show_delete_all?(Is(),Ms("div",kg,[l.context.show_acknowledge_all?(Is(),Ms("button",$g,[Sg,Ks(" Acknowledge Alerts ")])):Ys("v-if",!0),l.context.show_delete_all?(Is(),Ms("button",Ng,[Cg,Ks(" Delete Alerts ")])):Ys("v-if",!0)])):Ys("v-if",!0),Ys(" card footer ")]),Ys(" card-shadow ")]),Ys(" div col ")]),Ys(" div row "),Hs(mm,{id:"modal_traffic_extraction",ref_key:"modal_traffic_extraction",ref:o},null,512),Hs(ov,{ref_key:"modal_snapshot",ref:r,csrf:e.context.csrf},null,8,["csrf"]),Hs(Hv,{ref_key:"modal_acknowledge",ref:_,context:e.context,onAcknowledge:ie},null,8,["context"]),Hs(Gv,{ref_key:"modal_delete",ref:p,context:e.context,onDelete_alert:ie},null,8,["context"]),Hs(Dv,{alert:f.value,page:g.value,onExclude:se,ref_key:"modal_alerts_filter",ref:d},null,8,["alert","page"])],64))},__file:"http_src/vue/page-flow-historical.vue"},Ag={components:{},props:{id:String,chart_type:String,register_on_status_change:Boolean,base_url_request:String,get_params_url_request:Function,get_custom_chart_options:Function,disable_pointer_events:Boolean},emits:["apply","hidden","showed","chart_reloaded","zoom"],created(){},beforeUnmount(){},data:()=>({chart:null,chart_options:null,from_zoom:!1,timeseries_visibility:null,timeseries_list:[]}),async mounted(){await this.init(),ntopng_sync.ready(this.$props.id)},methods:{init:async function(){let e=ntopng_status_manager.get_status(),t=this.get_url_request(e);this.register_on_status_change&&this.register_status(e),await this.draw_chart(t)},get_image:function(e){return Dygraph.Export.asPNG(this.chart,e,this.$refs.chart)},change_visibility:function(e,t){null!=this.timeseries_list[t]&&(this.timeseries_list[t].checked=e,this.chart.setVisibility(t,e))},register_status:function(e){let t=this.get_url_request(e);ntopng_status_manager.on_status_change(this.id,(e=>{1==this.from_zoom&&(this.from_zoom=!1);let a=this.get_url_request(e);a!=t?(t=a,this.update_chart(a)):t=a}),!1)},get_url_request:function(e){let t;return null!=this.$props.get_params_url_request?(null==e&&(e=ntopng_status_manager.get_status()),t=this.$props.get_params_url_request(e)):t=ntopng_url_manager.get_url_params(),`${this.$props.base_url_request||""}?${t}`},get_chart_options:async function(e){let t=null;const a=await ntopng_utility.get_date_format(!1,this.$props.csrf,http_prefix);return t=null==this.$props.get_custom_chart_options?await ntopng_utility.http_request(e):await this.$props.get_custom_chart_options(e),t?.axes?.x?.axisLabelFormatter||(t.axes.x.axisLabelFormatter=function(e){return ntopng_utility.from_utc_to_server_date_format(e,a)}),t?.axes.x?.valueFormatter||(t.axes.x.valueFormatter=function(e){return ntopng_utility.from_utc_to_server_date_format(e,a)}),this.$emit("chart_reloaded",t),t},draw_chart:async function(e){let t=await this.get_chart_options(e);const a=t.data||[];t.data=null,t.zoomCallback=this.on_zoomed,this.timeseries_list=[];let l=0;if(!t.disableTsList)for(const e in t.series)this.timeseries_list.push({name:e,checked:!0,id:l,color:t.colors[l]+"!important"}),l+=1;this.chart=new Dygraph(this.$refs.chart,a,t)},update_chart:async function(e){if(this.chart){let t=await this.get_chart_options(e);this.chart.updateChart(t)}},update_chart_options:function(e){this.chart&&this.chart.updateChart(e)},update_chart_series:function(e){null!=e&&this.chart&&this.chart.updateOptions({file:e})},on_zoomed:function(e,t){this.from_zoom=!0;const a=moment(e),l=moment(t);let n={epoch_begin:Number.parseInt(a.unix()),epoch_end:Number.parseInt(l.unix())};ntopng_events_manager.emit_event(ntopng_events.EPOCH_CHANGE,n,this.id),this.$emit("zoom",n)}}};const Tg={style:{width:"100% height:380px"},class:"text-end mb-2"},Ig={class:"form-check-label form-control-sm"},Og=["onClick","checked"],Pg={key:0,class:"mb-3",style:{width:"100%","pointer-events":"none"},ref:"chart"},Ug={key:1,class:"mb-3",style:{width:"100%"},ref:"chart"};lp("\n.dygraph-legend {\n\tcolor: #111111;\n\tbackground-color: #FFFFFF !important;\n\tborder-color: #a7a6a6;\n\tborder-style: solid;\n\tborder-width: thin;\n\tz-index: 80 !important;\n\tbox-shadow: 0 0.5rem 1rem rgba(0, 0, 0, .15);\n\tborder-radius: 0.375rem;\n\tposition: fixed;\n\twidth: auto;\n\tword-wrap: break-word;\n\tpadding: 8px !important;\n}\n.dygraph-legend>span {\n\tcolor: #111111;\n\tpadding-left: 5px;\n\tpadding-right: 2px;\n\tmargin-left: -5px;\n\tbackground-color: #FFFFFF !important;\n}\n.dygraph-legend>span:first-child {\n\tmargin-top: 2px;\n}\n"),Ag.render=function(e,t,a,l,n,s){return Is(),Ms(Ss,null,[Vs("div",Tg,[(Is(!0),Ms(Ss,null,An(n.timeseries_list,((e,t)=>(Is(),Ms("label",Ig,[Vs("input",{type:"checkbox",class:"form-check-input align-middle mt-0",onClick:a=>s.change_visibility(!e.checked,t),checked:e.checked,style:V([{"border-color":"#0d6efd"},{backgroundColor:e.color}])},null,12,Og),Ks(" "+te(e.name),1)])))),256))]),1==a.disable_pointer_events?(Is(),Ms("div",Pg,null,512)):(Is(),Ms("div",Ug,null,512))],64)},Ag.__file="http_src/vue/timeseries-chart.vue";const jg=e=>(pl("data-v-185590b6"),e=e(),fl(),e),Mg={class:"form-group ms-2 me-2 mt-3 row"},Fg={class:"col-11"},Lg={class:"col-form-label"},Rg=[jg((()=>Vs("button",{type:"button",class:"btn border"},[Vs("span",null,[Vs("i",{class:"fas fa-trash"})])],-1)))],Dg={class:"container"},zg={class:"row custom-ms me-2 mt-1"},qg={class:"col-5"},Bg=["onUpdate:modelValue"],Vg={class:"custom-control-label ms-1 form-check-label"},Hg={class:"col-2"},Gg=["onUpdate:modelValue"],Wg=jg((()=>Vs("label",{class:"custom-control-label ms-1 form-check-label"},"Past ",-1))),Kg={class:"col-2"},Jg=["onUpdate:modelValue"],Yg=jg((()=>Vs("label",{class:"custom-control-label ms-1 form-check-label"},"Avg ",-1))),Zg={class:"col-3"},Xg=["onUpdate:modelValue"],Qg=jg((()=>Vs("label",{class:"custom-control-label ms-1 form-check-label"},"95th Perc ",-1)));var eb={__name:"list-timeseries",props:{id:String,timeseries:Array,title:String,show_delete_button:Boolean},emits:["delete_ts","update:timeseries"],setup(e,{emit:t}){const a=e,l=t;function n(){l("update:timeseries",a.timeseries)}function s(){l("delete_ts",a.id)}return(t,a)=>(Is(),Ms("div",null,[Vs("div",Mg,[Vs("div",Fg,[Vs("label",Lg,[Vs("b",null,te(e.title),1)])]),e.show_delete_button?(Is(),Ms("div",{key:0,class:"col-1",onClick:s},[...Rg])):Ys("v-if",!0)]),Vs("div",Dg,[(Is(!0),Ms(Ss,null,An(e.timeseries,(e=>(Is(),Ms("div",zg,[Vs("div",qg,[wn(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:n,"onUpdate:modelValue":t=>e.raw=t},null,40,Bg),[[Mo,e.raw]]),Vs("label",Vg,te(e.label),1)]),Vs("div",Hg,[wn(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:n,"onUpdate:modelValue":t=>e.past=t},null,40,Gg),[[Mo,e.past]]),Wg]),Vs("div",Kg,[wn(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:n,"onUpdate:modelValue":t=>e.avg=t},null,40,Jg),[[Mo,e.avg]]),Yg]),Vs("div",Zg,[wn(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:n,"onUpdate:modelValue":t=>e.perc_95=t},null,40,Xg),[[Mo,e.perc_95]]),Qg])])))),256))])]))}};lp("\n.custom-ms[data-v-185590b6] {\n  margin-left: 2rem !important;\n}\n.inline-block[data-v-185590b6] {\n    display: inline-block;\n    margin-right: 1rem;\n}\n.border[data-v-185590b6] {\n    border-style: solid !important;\n}\n"),eb.__scopeId="data-v-185590b6",eb.__file="http_src/vue/list-timeseries.vue";const tb=m.getFormatter(m.types.bytes.id),ab="page-stats-action-link",lb="page-stats-action-jump-historical",nb={table_value:"interface",title:i18n("page_stats.top.top_applications"),view:"top_protocols",default_sorting_columns:1,default:!0,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("application"),name:"application",data:"protocol",handlerId:ab,render:function(e,t,a){let l=this,n={handlerId:ab,onClick:function(){let e=`top:${a.ts_schema}`;l.add_metric_from_metric_schema(e,a.ts_query)}};return L.createLinkCallback({text:e.label,handler:n})}},{columnName:i18n("traffic"),name:"traffic",className:"text-end",data:"traffic",orderable:!0,render:e=>a.bytesToSize(e)},{columnName:i18n("percentage"),name:"traffic_perc",className:"text-center",data:"percentage",orderable:!1,render:e=>{const t=e.toFixed(1);return a.createProgressBar(t)}},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:lb,render_if:function(e){return e.is_history_enabled},render:function(e,t,a){let l=this;const n={handlerId:lb,onClick:function(){let e=x.serialize_param("l7proto",`${a.protocol.id};eq`),t=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}&${e}`,n=l.source_type,s=l.source_array,i="",o=n.source_def_array.map(((e,t)=>{let a=s[t];return"ifid"==e.value?x.serialize_param("ifid",a.value):"host"==e.value?x.serialize_param("ip",`${a.value};eq`):void 0}));i=o.join("&"),t=`${t}&${i}`,window.open(t)}};return L.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:n}])}}]},sb={table_value:"interface",title:i18n("page_stats.top.top_categories"),view:"top_categories",default_sorting_columns:2,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("category"),name:"category",data:"category",handlerId:ab,render:function(e,t,a){let l=this,n={handlerId:ab,onClick:function(){let e=`top:${a.ts_schema}`;l.add_metric_from_metric_schema(e,a.ts_query)}};return L.createLinkCallback({text:e.label,handler:n})}},{columnName:i18n("traffic"),name:"traffic",className:"text-end",data:"traffic",orderable:!0,render:e=>tb(e)},{columnName:i18n("percentage"),name:"traffic_perc",className:"text-center",data:"percentage",render:e=>{const t=e.toFixed(1);return a.createProgressBar(t)}},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:lb,render_if:function(e){return e.is_history_enabled},render:function(e,t,a){let l=this;const n={handlerId:lb,onClick:function(){let e=x.serialize_param("l7cat",`${a.category.id};eq`),t=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}&${e}`,n=l.source_type,s=l.source_array,i="",o=n.source_def_array.map(((e,t)=>{let a=s[t];return"ifid"==e.value?x.serialize_param("ifid",a.value):"host"==e.value?x.serialize_param("ip",`${a.value};eq`):void 0}));i=o.join("&"),t=`${t}&${i}`,window.open(t)}};return L.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:n}])}}]},ib=[nb,sb,{table_value:"interface",title:i18n("page_stats.top.top_senders"),view:"top_senders",default_sorting_columns:1,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("page_stats.top.host_name"),name:"host_name",data:"host",handlerId:ab,render:function(e,t,a){let l=this,n=e.label,s="",i={handlerId:ab,onClick:async function(){l.add_ts_group_from_source_value_dict("host",a.tags,"host:traffic")}};return l.sources_types_enabled.host&&e.is_local&&(n=L.createLinkCallback({text:e.label,handler:i})),e.is_available&&(s=` <a href="/lua/host_details.lua?host=${e.id}" data-bs-toggle="tooltip" title=""><i class="fas fa-laptop"></i></a>`),`${n}${s}`}},{columnName:i18n("page_stats.top.sent"),name:"sent",className:"text-end",data:"traffic",orderable:!0,render:e=>tb(e)},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:lb,render_if:function(e){return e.is_history_enabled},render:function(e,t,a){let l=this;const n=a.host.id,s=a.host.is_local,i={handlerId:lb,onClick:function(){let e=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}`,t="",n=[];for(let e in a.tags){let t=a.tags[e],l="";"ifid"==e?l=x.serialize_param(e,t):"host"==e&&(l=x.serialize_param("ip",`${t};eq`)),n.push(l)}t=n.join("&"),e=`${e}&${t}`,window.open(e)}},o={handlerId:lb,onClick:function(){const e=x.get_url_entry("ifid"),t=`${http_prefix}/lua/host_details.lua?host=${n}&page=historical&ts_query=ifid:${e},host:${n}&ts_schema=host:details&epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}`;window.open(t)}},r=[{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:i}];return l.sources_types_enabled.host&&s&&r.push({class:"dropdown-item",href:"#",title:i18n("db_explorer.host_data"),handler:o}),L.createActionButtons(r)}}]},{table_value:"interface",title:i18n("page_stats.top.top_receivers"),view:"top_receivers",default_sorting_columns:1,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("page_stats.top.host_name"),name:"host_name",data:"host",handlerId:ab,render:function(e,t,a){let l=this,n=e.label,s="",i={handlerId:ab,onClick:async function(){l.add_ts_group_from_source_value_dict("host",a.tags,"host:traffic")}};return l.sources_types_enabled.host&&e.is_local&&(n=L.createLinkCallback({text:e.label,handler:i})),e.is_available&&(s=` <a href="/lua/host_details.lua?host=${e.id}" data-bs-toggle="tooltip" title=""><i class="fas fa-laptop"></i></a>`),`${n}${s}`}},{columnName:i18n("page_stats.top.received"),name:"received",className:"text-end",data:"traffic",orderable:!0,render:e=>tb(e)},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:lb,render_if:function(e){return e.is_history_enabled},render:function(e,t,a){let l=this;const n=a.host.id,s=a.host.is_local,i={handlerId:lb,onClick:function(){let e=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}`,t="",n=[];for(let e in a.tags){let t=a.tags[e],l="";"ifid"==e?l=x.serialize_param(e,t):"host"==e&&(l=x.serialize_param("ip",`${t};eq`)),n.push(l)}t=n.join("&"),e=`${e}&${t}`,window.open(e)}},o={handlerId:lb,onClick:function(){const e=x.get_url_entry("ifid"),t=`${http_prefix}/lua/host_details.lua?host=${n}&page=historical&ts_query=ifid:${e},host:${n}&ts_schema=host:details&epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}`;window.open(t)}},r=[{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:i}];return l.sources_types_enabled.host&&s&&r.push({class:"dropdown-item",href:"#",title:i18n("db_explorer.host_data"),handler:o}),L.createActionButtons(r)}}]}];let ob=ib.find((e=>"top_protocols"==e.view));null!=ob&&(ob=b.clone(ob),ob.table_value="host");const rb=[ob],cb=m.getFormatter(m.types.bytes.id),ub=m.getFormatter(m.types.bps.id),db="page-stats-action-link",_b={table_value:"snmp",table_source_def_value_dict:{ifid:!0,device:!0,if_index:!1},title:i18n("page_stats.top.top_interfaces"),view:"top_snmp_ifaces",default_sorting_columns:4,columnDefs:[{type:"file-size",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3}],f_get_label:e=>{let t,a=e.source_type.source_def_array;for(let l=0;l<a.length;l+=1)if("device"==a[l].value){t=e.source_array[l].label;break}return`${i18n("page_stats.top.top_interfaces")} - SNMP ${i18n("page_stats.source_def.device")} ${t}`},default:!0,columns:[{columnName:i18n("interface_name"),name:"interface",data:"interface",handlerId:db,render:function(e,t,a){let l=this,n={handlerId:db,onClick:function(){l.add_ts_group_from_source_value_dict("snmp_interface",a.tags,"snmp_if:traffic")}},s=`${e.name}`;return L.createLinkCallback({text:s,handler:n})}},{columnName:i18n("interface_alias"),name:"interface",data:"interface",handlerId:db,render:function(e){return`${e.alias}`}},{columnName:i18n("page_stats.top.sent"),name:"sent",className:"text-end",data:"sent",orderable:!0,render:e=>cb(e)},{columnName:i18n("page_stats.top.received"),name:"received",className:"text-end",data:"rcvd",orderable:!0,render:e=>cb(e)},{columnName:i18n("traffic"),name:"traffic",className:"text-end",data:"total",orderable:!0,render:e=>cb(e)},{columnName:i18n("last_downlink_usage"),name:"traffic_perc",className:"text-center no-wrap",data:"downlink_usage_percentage",render:e=>{let t=e.toFixed(1);return t>100&&(t=100),a.createProgressBar(t)}},{columnName:i18n("last_uplink_usage"),name:"traffic_perc",className:"text-center no-wrap",data:"uplink_usage_percentage",render:e=>{let t=e.toFixed(1);return t>100&&(t=100),a.createProgressBar(t)}},{columnName:i18n("page_stats.top.throughput"),name:"throughput",className:"text-end",data:"throughput",orderable:!0,render:e=>ub(e)}]},pb=[_b],fb=m.getFormatter(m.types.bytes.id),mb=m.getFormatter(m.types.bps.id),vb="page-stats-action-link",hb={table_value:"flowdevice",table_source_def_value_dict:{ifid:!0,device:!0,if_index:!1},title:i18n("page_stats.top.top_interfaces"),view:"top_flowdev_ifaces",default_sorting_columns:4,columnDefs:[{type:"file-size",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3}],f_get_label:e=>{let t,a=e.source_type.source_def_array;for(let l=0;l<a.length;l+=1)if("device"==a[l].value){t=e.source_array[l].label;break}return`${i18n("page_stats.top.top_interfaces")} - Flow Exporter ${t}`},default:!0,columns:[{columnName:i18n("interface_name"),name:"interface",data:"interface",handlerId:vb,render:function(e,t,a){let l=this,n={handlerId:vb,onClick:function(){l.add_ts_group_from_source_value_dict("flow_interface",a.tags,"flowdev_port:traffic")}},s=`${e.label}`;return L.createLinkCallback({text:s,handler:n})}},{columnName:i18n("page_stats.top.sent"),name:"sent",className:"text-end",data:"sent",orderable:!0,render:e=>fb(e)},{columnName:i18n("page_stats.top.received"),name:"received",className:"text-end",data:"rcvd",orderable:!0,render:e=>fb(e)},{columnName:i18n("traffic"),name:"traffic",className:"text-end",data:"total",orderable:!0,render:e=>fb(e)},{columnName:i18n("percentage"),name:"traffic_perc",className:"text-center",data:"percentage",render:e=>{const t=e.toFixed(1);return a.createProgressBar(t)}},{columnName:i18n("page_stats.top.throughput"),name:"throughput",className:"text-end",data:"throughput",orderable:!0,render:e=>mb(e)}]},gb=[hb],bb=async e=>{const t={host:e},a=x.obj_to_url_params(t),l=`${http_prefix}/lua/pro/rest/v2/get/snmp/device/available_interfaces.lua?${a}`;return await b.http_request(l)},yb=async e=>(await bb(e)).map((e=>null!=e.name&&""!=e.name&&e.name!=e.id?{label:`${e.name} (${e.id})`,id:e.id,name:e.name}:{label:e.id,id:e.id,name:e.id})).sort(a.sortAlphabetically),wb={available_interfaces:bb,snmp_device_ports:yb},xb={hide:"hide",select:"select",input:"input",input:"input_confirm"},kb={ifid:e=>{let t=e.ifname;return null!=e.name&&(t=e.name),{label:t,value:e.ifid}},pool:e=>{let t=e.pool_id;return null!=e.name&&(t=e.name),{label:t,value:e.pool_id}},am_host:e=>({label:`${e.label} ${e.measurement}`,value:`${e.host},metric:${e.measurement_key}`}),blacklist:e=>{let t=`${e.column_name}`;return{label:t,value:t}},device:e=>({label:`${e.name}`,value:`${e.ip}`}),if_index:e=>""},$b={interface:ib,host:rb,snmp_interface:pb,snmp_device:pb,flow_device:gb,flow_interface:gb},Sb=[{id:"interface",regex_page_url:"lua/if_stats",label:i18n("page_stats.source_def.interface"),query:"iface",f_map_ts_options:null,source_def_array:[{main_source_def:!0,label:i18n("page_stats.source_def.interface"),regex_type:null,refresh_on_sources_change:!1,sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",sources_function:null,value:"ifid",value_url:null,value_map_sources_res:null,disable_tskey:null,f_get_value_url:null,f_set_value_url:null,ui_type:xb.select}]},{id:"blacklist",regex_page_url:"lua/blacklists_stats",label:i18n("page_stats.source_def.blacklist"),query:"blacklist",f_map_ts_options:(e,t)=>(null==e.series||e.series.forEach((e=>{null!=t.metric.query?e.name=t.metric.label:(e.name=e.name.replaceAll("_"," "),e.type=void 0)})),e),source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"System",value:-1}],value:"ifid",ui_type:xb.hide}]},{id:"vulnerability_scan",regex_page_url:"lua/vulnerability_scan",label:i18n("page_stats.source_def.vuln_scan"),query:"am_vuln_scan",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"System",value:-1}],value:"ifid",ui_type:xb.hide}]},{id:"host",regex_page_url:"lua/host_details",label:i18n("page_stats.source_def.host"),table_value:"host",query:"host",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{main_source_def:!0,label:i18n("page_stats.source_def.host"),regex_type:"ip",value:"host",ui_type:xb.input}]},{id:"mac",regex_page_url:"lua/mac_details",label:i18n("page_stats.source_def.mac"),query:"mac",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{main_source_def:!0,label:i18n("page_stats.source_def.mac"),regex_type:"macAddress",value:"mac",value_url:"host",ui_type:xb.input}]},{id:"network",regex_page_url:"lua/network_details",label:i18n("page_stats.source_def.network"),query:"subnet",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{main_source_def:!0,label:i18n("page_stats.source_def.network"),regex_type:"text",value:"subnet",ui_type:xb.input}]},{id:"as",regex_page_url:"lua/as_details",label:i18n("page_stats.source_def.as"),query:"asn",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{main_source_def:!0,label:i18n("page_stats.source_def.as"),regex_type:"text",value:"asn",ui_type:xb.input}]},{id:"country",regex_page_url:"lua/country_details",label:i18n("page_stats.source_def.country"),query:"country",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{main_source_def:!0,label:i18n("page_stats.source_def.country"),regex_type:"text",value:"country",ui_type:xb.input}]},{id:"os",regex_page_url:"lua/os_details",label:i18n("page_stats.source_def.os"),query:"os",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{main_source_def:!0,label:i18n("page_stats.source_def.os"),regex_type:"text",value:"os",ui_type:xb.input}]},{id:"vlan",regex_page_url:"lua/vlan_details",label:i18n("page_stats.source_def.vlan"),query:"vlan",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{main_source_def:!0,label:i18n("page_stats.source_def.vlan"),regex_type:"text",value:"vlan",ui_type:xb.input}]},{id:"pool",regex_page_url:"lua/pool_details",label:i18n("page_stats.source_def.pool"),query:"host_pool",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{main_source_def:!0,label:i18n("page_stats.source_def.pool"),sources_url:"lua/rest/v2/get/host/pools.lua",value:"pool",ui_type:xb.select}]},{id:"system",regex_page_url:"lua/system_stats",label:i18n("page_stats.source_def.system"),query:"system",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"System",value:-1}],value:"ifid",ui_type:xb.hide}]},{id:"profile",regex_page_url:"lua/profile_details",label:i18n("page_stats.source_def.profile"),query:"profile",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{main_source_def:!0,label:i18n("page_stats.source_def.profile"),regex_type:"text",value:"profile",ui_type:xb.input}]},{id:"redis",regex_page_url:"lua/monitor/redis_monitor.lua",label:i18n("page_stats.source_def.redis"),query:"redis",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"Redis",value:-1}],value:"ifid",ui_type:xb.hide}]},{id:"influx",regex_page_url:"lua/monitor/influxdb_monitor.lua",label:i18n("page_stats.source_def.influx"),query:"influxdb",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"Influx",value:-1}],value:"ifid",ui_type:xb.hide}]},{id:"active_monitoring",regex_page_url:"lua/monitor/active_monitoring_monitor.lua",label:i18n("page_stats.source_def.active_monitoring"),query:"am",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"",value:-1}],value:"ifid",ui_type:xb.hide},{main_source_def:!0,label:i18n("page_stats.source_def.active_monitoring"),sources_url:"lua/rest/v2/get/am_host/list.lua",value:"host",disable_tskey:!0,value_map_sources_res:"am_host",ui_type:xb.select}]},{id:"snmp_interface",id_group:"snmp",regex_page_url:"lua/pro/enterprise/snmp_interface_details",label:i18n("page_stats.source_def.snmp_interface"),query:"snmp_interface",f_map_ts_options:(e,t)=>e,source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"",value:-1}],value:"ifid",ui_type:xb.hide},{label:i18n("page_stats.source_def.device"),regex_type:"ip",sources_url:"lua/pro/rest/v2/get/snmp/device/list.lua",value:"device",value_url:"host",ui_type:xb.select},{main_source_def:!0,label:i18n("page_stats.source_def.snmp_interface"),regex_type:"text",refresh_on_sources_change:!0,sources_function:async e=>{const t=e[1];return(await wb.available_interfaces(t)).map((e=>({label:e.name,value:e.id})))},value:"if_index",value_url:"snmp_port_idx",ui_type:xb.select}]},{id:"snmp_device",id_group:"snmp",regex_page_url:"lua/pro/enterprise/snmp_device_details",label:i18n("page_stats.source_def.snmp_device"),query:"snmp_device",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"",value:-1}],value:"ifid",ui_type:xb.hide},{main_source_def:!0,label:i18n("page_stats.source_def.device"),regex_type:"ip",sources_url:"lua/pro/rest/v2/get/snmp/device/list.lua",value:"device",value_url:"host",ui_type:xb.input}]},{id:"flow_device",regex_page_url:"lua/pro/enterprise/flowdevices_stats",label:i18n("page_stats.source_def.flow_device"),query:"flowdev",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{main_source_def:!0,label:i18n("page_stats.source_def.device"),sources_url:"lua/pro/rest/v2/get/flowdevices/list.lua",regex_type:"ip",value:"device",value_url:"ip",ui_type:xb.input}]},{id:"flow_interface",regex_page_url:"lua/pro/enterprise/flowdevice_interface_details",label:i18n("page_stats.source_def.flow_interface"),query:"flowdev_port",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:xb.input},{main_source_def:!0,label:i18n("page_stats.source_def.port"),regex_type:"port",value:"port",value_url:"snmp_port_idx",ui_type:xb.input}]},{id:"sflow_device",regex_page_url:"lua/pro/enterprise/sflowdevices_stats",label:i18n("page_stats.source_def.sflow_device"),query:"sflowdev",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{main_source_def:!0,label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:xb.input}]},{id:"sflow_interface",regex_page_url:"lua/pro/enterprise/sflowdevice_interface_details",label:i18n("page_stats.source_def.sflow_interface"),query:"sflowdev_port",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:xb.input},{main_source_def:!0,label:i18n("page_stats.source_def.port"),regex_type:"port",value:"port",value_url:"snmp_port_idx",ui_type:xb.input}]},{id:"observation_point",regex_page_url:"lua/pro/enterprise/observation_points",label:i18n("page_stats.source_def.observation_point"),query:"obs_point",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{main_source_def:!0,label:i18n("page_stats.source_def.observation_point"),regex_type:"text",value:"obs_point",value_url:"observation_point",ui_type:xb.input}]},{id:"pod",regex_page_url:"lua/pod_details",label:i18n("page_stats.source_def.pod"),query:"pod",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{main_source_def:!0,label:i18n("page_stats.source_def.pod"),regex_type:"text",value:"pod",ui_type:xb.input}]},{id:"container",regex_page_url:"lua/container_details",label:i18n("page_stats.source_def.container"),query:"container",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{main_source_def:!0,label:i18n("page_stats.source_def.container"),regex_type:"text",value:"container",ui_type:xb.input}]},{id:"nedge",regex_page_url:"lua/pro/nedge/if_stats.lua",label:i18n("page_stats.source_def.nedge"),query:"nedge",source_def_array:[{label:i18n("page_stats.source_def.interface"),regex_type:"text",value:"ifid",value_url:"ifname",ui_type:xb.input}]}],Nb={ui_types:xb,sources_url_el_to_source:kb,sources_types:Sb,sources_types_tables:$b},Cb=e=>{let t=[];e.forEach((e=>{let a=function(e){let t=[];e.timeseries.forEach((e=>{t.push(`${e.id}=${e.raw}:${e.past}:${e.avg}:${e.perc_95}`)}));let a=e.metric.schema;null!=e.metric.query&&(a=`${a}+${e.metric.query}`);let l=t.join("|"),n=e.source_array.map((e=>e.value)).join("+"),s=`${e.source_type.id};${n};${a};${l}`;return s}(e);t.push(a)}));let a=t.join(";;");x.set_key_to_url("timeseries_groups",a)};const Eb=(e,t,a,l)=>{let n={raw:!0,past:!0,avg:!1,perc_95:!1};l&&null!=l.raw&&(n.raw=l.raw),l&&null!=l.past&&(n.past=l.past),l&&null!=l.avg&&(n.avg=l.avg),l&&null!=l.perc_95&&(n.perc_95=l.perc_95);let s=Ib(e,t,a),i=[];for(let e in a.timeseries){let t=a.timeseries[e];n.id=e,n.label=t.label,i.push(n)}return{id:s,source_type:e,source_array:t,metric:a,timeseries:i}},Ab=async(e,t,a)=>{let l=Hb(),n=await jb(e,l),s=await Vb(e,l,n),i=Kb(s,t,a);return[Eb(l,n,i)]};async function Tb(e){let t=e.split(";"),a=t[0],l=t[1].split("+"),n=t[2].split("+");n.length<2&&n.push(null);let s=t[3],i=Ub(a),o=await Fb(http_prefix,i,l),r=await Gb(http_prefix,i,o,n[0],n[1]),c=function(e,t){let a=e.split("|"),l=/(.+)=(.+):(.+):(.+):(.+)/,n=[];return a.forEach((e=>{let a=l.exec(e);if(a.length>0){let e=a[1],l=t.timeseries[e].label,s=JSON.parse(a[2]),i=JSON.parse(a[3]),o=JSON.parse(a[4]),r=JSON.parse(a[5]);n.push({id:e,label:l,raw:s,past:i,avg:o,perc_95:r})}})),n}(s,r);return{id:Ib(i,o,r),source_type:i,source_array:o,metric:r,timeseries:c}}const Ib=(e,t,a,l,n)=>{let s="";null!=a&&(s=a.schema,null!=a.query&&(s=`${s} - ${a.query}`));let i=e.source_def_array,o=t.map(((e,t)=>{let a=i[t].value;return null==l||l[a]?e.value:null})).filter((e=>null!=e)).join("_"),r=e.id;return n&&null!=e.id_group&&(r=e.id_group),`${r} - ${o} - ${s}`};const Ob=Nb.sources_url_el_to_source,Pb=Nb.sources_types,Ub=e=>Pb.find((t=>t.id==e)),jb=async(e,t)=>{let a=zb(t);return await Fb(e,t,a)};async function Mb(e,t,a){let l=t.source_def_array.map((e=>a[e.value]));return await Fb(e,t,l)}const Fb=async(e,t,a)=>{null==t&&(t=Hb());let l,n=[];for(let s=0;s<a.length;s++){let i=a[s],o=t.source_def_array[s];if(o.sources_url||o.sources_function){let n=[];n=await Rb(e,t.id,o,a),l=n.find((e=>e.value==i)),null==l&&(l=n[0])}else l={label:i,value:i};n.push(l)}return n};let Lb={};const Rb=async(e,t,l,n)=>{let s=function(e,t,a){let l=`${e}_${t.value}`;return t.refresh_on_sources_change?(l=`${l}_${a.join("_")}`,l):l}(t,l,n);if(null==Lb[s])if(l.sources_url){let t=`${e}/${l.sources_url}`;Lb[s]=b.http_request(t)}else{if(!l.sources_function)return[];Lb[s]=l.sources_function(n)}let i=await Lb[s];if(l.sources_url){let e=Ob[l.value_map_sources_res];if(null==e&&(e=Ob[l.value]),null==e)throw`:Error: metrics-manager.js, missing sources_url_to_source ${l.value} key`;i=i.map((t=>e(t)))}return i.sort(a.sortAlphabetically)};function Db(e,t){e.source_def_array.forEach((e=>{let a=t[e.value];null!=a&&(null!=e.f_set_value_url?e.f_set_value_url():null!=e.value_url?x.set_key_to_url(e.value_url,a):x.set_key_to_url(e.value,a))}))}const zb=e=>(null==e&&(e=Hb()),e.source_def_array.map((e=>{if(null!=e.f_get_value_url)return e.f_get_value_url();let t=e.value_url;return null==t&&(t=e.value),x.get_url_entry(t)})));let qb={},Bb=null;const Vb=async(e,t,a,l)=>{let n=l?.epoch_begin||x.get_url_entry("epoch_begin"),s=l?.epoch_end||x.get_url_entry("epoch_end"),i=`${n}_${s}`;null==t&&(t=Hb()),null==a&&(a=await jb(e,t));let o=function(e,t,a,l){let n=t.source_def_array.map(((e,t)=>`${e.value}=${a[t].value}`)).join("&"),s="";return null!=l&&(s=`epoch_end=${l.epoch_end}&epoch_begin=${l.epoch_begin}`),`${e}/lua/rest/v2/get/timeseries/type/consts.lua?query=${t.query}&${n}&${s}`}(e,t,a,{epoch_begin:n,epoch_end:s}),r=function(e,t){let a=t.map((e=>e.value)).join("_");return`${e.id}_${a}`}(t,a);i!=Bb&&(qb[r]=null,Bb=i),null==qb[r]&&(qb[r]=b.http_request(o));let c=await qb[r];return null==c||0==c.length?[{}]:(0==c.some((e=>1==e.default_visible))&&(c[0].default_visible=!0),b.clone(c))},Hb=()=>{let e=window.location.pathname;for(let t=0;t<Pb.length;t+=1){if(1==new RegExp(Pb[t].regex_page_url).test(e))return Pb[t]}throw`source_type not found for ${e}`},Gb=async(e,t,a,l,n,s)=>(await Vb(e,t,a,s)).find((e=>e.schema==l&&e.query==n)),Wb=(e,t)=>{null==t&&(t=Hb());let a={};t.source_def_array.forEach((e=>a[e.value]=!0));let l=e.split(",");for(let e=0;e<l.length;e+=1){let t=l[e].split(":")[0];if(null==a[t])return l[e]}return null},Kb=(e,t,a)=>{let l;return null!=t&&(l=e.find((e=>e.schema==t&&(null==a||e.query==a)))),null==l&&(l=e.find((e=>1==e.default_visible))),null!=l?l:e[0]},Jb={set_timeseries_groups_in_url:Cb,get_timeseries_groups_from_url:async(e,t)=>{if(null==t&&(t=x.get_url_entry("timeseries_groups")),null==t||""==t)return null;let a=t.split(";;");return a.map((async e=>await Tb(e))),Promise.all(a.map((async e=>await Tb(e))))},get_default_timeseries_groups:Ab,get_ts_group:Eb,get_ts_group_id:Ib,sources_types:Pb,sources_types_tables:Nb.sources_types_tables,get_source_type_from_id:Ub,get_current_page_source_type:Hb,get_sources:Rb,get_default_source_array:jb,get_source_array_from_value_dict:Mb,get_source_array_from_value_array:Fb,get_default_source_value_array:zb,get_metrics:Vb,get_metric_from_schema:Gb,get_metric_query_from_ts_query:Wb,get_default_metric:Kb,set_source_value_object_in_url:Db,ui_types:Nb.ui_types};Dygraph.Plugins.Legend.prototype.select=function(e){var t=e.selectedX,a=e.selectedPoints,l=e.selectedRow,n=e.dygraph.getOption("legend");if("never"!==n){var s=Dygraph.Plugins.Legend.generateLegendHTML(e.dygraph,t,a,this.one_em_width_,l);if(s instanceof Node&&s.nodeType===Node.DOCUMENT_FRAGMENT_NODE?(this.legend_div_.innerHTML="",this.legend_div_.appendChild(s)):this.legend_div_.innerHTML=s,this.legend_div_.style.display="","follow"===n){var i,o=e.dygraph.plotter_.area,r=this.legend_div_.offsetWidth,c=e.dygraph.getOptionForAxis("axisLabelWidth","y"),u=e.dygraph.getHighlightSeries();u?(i=a.find((e=>e.name===u)),i||(i=a[0])):i=a[0];const t=e.dygraph.getNumericOption("legendFollowOffsetX");var d=(null!=i?.x?i.x:1)*o.w+t;d+r+1>o.w&&(d=d-2*t-r-(c-o.x)),this.legend_div_.style.left=c+d+"px",document.addEventListener("mousemove",(e=>{localStorage.setItem("timeseries-mouse-top-position",e.clientY+50+"px")})),this.legend_div_.style.top=localStorage.getItem("timeseries-mouse-top-position")}else if("onmouseover"===n&&this.is_generated_div_){o=e.dygraph.plotter_.area,r=this.legend_div_.offsetWidth;this.legend_div_.style.left=o.x+o.w-r-1+"px",this.legend_div_.style.top=o.y+"px"}}else this.legend_div_.style.display="none"};const Yb=["rgb(144, 238, 144)","rgb(25, 135, 84)","rgb(255, 193, 7)","rgb(220, 53, 69)"];function Zb(e,t,a){if(!t||!e)return function(e){const t=Dygraph.toRGB_(e);return t.r=Math.floor((255+t.r)/2),t.g=Math.floor((255+t.g)/2),t.b=Math.floor((255+t.b)/2),"rgb("+t.r+","+t.g+","+t.b+", 0.9)"}(a);e>t&&(e=t);const l=t/Yb.length;for(let t=1;t<Yb.length+1;t++)if(e<=l*t)return Yb[t-1]}function Xb(e){const t=e.drawingContext,a=e.points,l=e.dygraph.toDomYCoord(0),n=e.dygraph.user_attrs_.valueRange[1],s=e.color;let i=1/0;for(let e=1;e<a.length;e++){const t=a[e].canvasx-a[e-1].canvasx;t<i&&(i=t)}i>90&&(i=90);const o=Math.floor(.95*i);for(var r=0;r<a.length;r++){const e=a[r],i=e.canvasx,c=e.yval;t.fillStyle=Zb(Math.abs(c),Math.abs(n),s),t.fillRect(i-o/2,e.canvasy,o,l-e.canvasy),t.strokeRect(i-o/2,e.canvasy,o,l-e.canvasy)}}const Qb={barChartPlotter:Xb};function ey(e){let t={};e.forEach(((e,a)=>{null==t[e]?t[e]=[a]:t[e].push(a)}));let a=b.clone(e);for(let e in t){let l=t[e];ty(e,l.length).forEach(((e,t)=>{let n=l[t];a[n]=e}))}return a}function ty(e,t){return[...Array(t).keys()].map(((a,l)=>function(e,t,a){let l=e.replace("#",""),n=parseInt(l.substring(0,2),16),s=parseInt(l.substring(2,4),16),i=parseInt(l.substring(4,6),16),o=ay(n,t,a),r=ay(s,t,a),c=ay(i,t,a);return function(e,t,a){return"#"+ly(e)+ly(t)+ly(a)}(o,r,c)}(e,l+1,t)))}function ay(e,t,a){if(a<=1)return e;let l=Math.trunc(e/2),n=Math.trunc(e+(255-e)/2);return l+t*Math.trunc((n-l)/a)}function ly(e){let t=e.toString(16);return 1==t.length?"0"+t:t}const ny={transformColors:ey};function sy(e){return{axisLabelFormatter:e,valueFormatter:function(t,a,l,n,s,i){const o=n?.rawData_?.[s][i];let r="";return"object"==typeof o?(o.forEach((t=>{r=`${r} / ${e(t||0)}`})),r=r.substring(3)):r=e(t),r},axisLabelWidth:80}}function iy(e){const t=ny.transformColors(e.colors),a=function(){let e="rgb(255, 255, 255)";return document.getElementsByClassName("body dark").length>0&&(e="rgb(13, 17, 23)"),e}(),l={labelsSeparateLines:!0,legend:"follow",connectSeparatedPoints:!0,includeZero:!0,drawPoints:!0,highlightSeriesBackgroundAlpha:.7,highlightSeriesOpts:{strokeWidth:2,pointSize:3,highlightCircleSize:6},axisLabelFontSize:12,axes:{x:{axisLabelWidth:90}}};return l.customBars=e.customBars,l.labels=e.labels,l.series=e.properties,l.data=e.serie,l.stackedGraph=e.stacked,l.valueRange=e.value_range,l.highlightSeriesBackgroundColor=a,l.colors=t,l.disableTsList=e.disable_ts_list,l.yRangePad=e.yRangePad||1,e.plotter&&(l.plotter=e.plotter),function(e,t){t.formatters.length>1?(e.axes.y1=sy(m.getFormatter(t.formatters[0])),e.axes.y2=sy(m.getFormatter(t.formatters[1]))):1==t.formatters.length&&(e.axes.y=sy(m.getFormatter(t.formatters[0])))}(l,e),l}function oy(e){switch(e){case"dash":return{fillGraph:!1,customBars:!1,strokePattern:Dygraph.DASHED_LINE};case"point":return{fillGraph:!1,customBars:!1,strokeWidth:0,pointSize:2};case"bounds":return{fillGraph:!1,strokeWidth:1,pointSize:1.5,fillAlpha:.5};case"line":return{fillGraph:!1,customBars:!1,strokeWidth:1.5,pointSize:1.5};default:return{fillGraph:!0,customBars:!1,strokeWidth:1,pointSize:1.5,fillAlpha:.5}}}const ry={buildChartOptions:iy,formatSerieProperties:oy},cy=["#C6D9FD","#90EE90","#EE8434","#C95D63","#AE8799","#717EC3","#496DDB","#5A7ADE","#6986E1","#7791E4","#839BE6","#8EA4E8"],uy={default_color:"#C6D9FD","95_perc":"#8EA4E8",avg:"#839BE6"};function dy(e){return`${e.id}`}function _y(e){let t=e,a=0,l=0,n=cy,s=d3v7.schemeCategory10;t.forEach(((t,i)=>{0==t.palette?(e.find(((e,a)=>e.color===t.color&&a!==i))?e[i]=n[a%n.length]:e[i]=t.color,a+=1):1==t.palette&&(e[i]=s[l%s.length],l+=1)}))}function py(e,t,a,l){null==e&&(e=t);let n="";if(null!=e&&(n=`${e}`),0==l)return e;let s=0,i=a.source_type.source_def_array;for(let e=0;e<i.length;e+=1){if(1==i[e].main_source_def){s=e;break}}return`${`${a.source_array[s].label}`} - ${n}`}function fy(e){if("bar"===e)return Qb.barChartPlotter}function my(e,t,a,l){l.labels.push(e),null==l.properties&&(l.properties={}),l.properties[e]={},l.properties[e]=ry.formatSerieProperties(t),l.colors.push(a)}function vy(e,t,a){const l=e.metric.chart_type||"filled",n=t.series||[],s=t.metadata.epoch_begin,i=t.metadata.epoch_step,{serie:o,color:r,formatter:c,serie_name:u,properties:d}=function(e,t){let a={},l=null,n=null,s={},i=[];return e.forEach(((e,o)=>{const r=dy(e),c=e.data||[],u=t.metric.timeseries[r],d=!0===u?.invert_direction?1:-1;"metric"==u.type&&(n=py(u.label,r,t,!0),s=ry.formatSerieProperties("bounds"),a={color:u.color,palette:0},l=t.metric.measure_unit);for(let e=0;e<c.length;e++){let t=null===c[e]?NaN:c[e];null==i[e]&&(i[e]=[0,NaN,0]),"lower_bound"==u.type?i[e][0]=t*d:"metric"==u.type?i[e][1]=t*d:"upper_bound"==u.type&&(i[e][2]=t*d)}})),{serie:i,color:a,formatter:l,serie_name:n,properties:s}}(n,e);let _=s;const p=`${u} ${i18n("lower_value_upper")}`,f=a.formatters.find((e=>e==c));f||a.formatters.push(c),a.plotter=fy(l),a.customBars=!0,a.colors.push(r),a.labels.push(p),a.properties[p]=d,Object.keys(o).forEach((e=>{a.serie[_]||(a.serie[_]=[{value:new Date(1e3*_),name:"Time"},{value:o[e],name:p}]),_+=i}))}function hy(e,t,a,l){const n=t.series||[],s=e.metric.chart_type||"filled",i=t.metadata.epoch_begin,o=t.metadata.epoch_step,r=e.metric.measure_unit,c=e.metric.max_value||null,u=e.metric.min_value||null,d=t.additional_series;a.value_range=[u,c],a.plotter=fy(s),a.stacked||(a.stacked=e.metric.draw_stacked||!1),n.forEach(((t,n)=>{const c=t.data||[],u=e.timeseries[0],_=dy(t),p=e.metric.timeseries[_],f=!0===p.invert_direction?-1:1,m=function(e,t){let a=1==t.use_serie_name?e.name:t.label;return e.ext_label&&(a=e.ext_label),a}(t,p),v=py(m,_,e,a.use_full_name),h=py(m+" Avg",_,e,a.use_full_name),g=py(m+" 95th Perc",_,e,a.use_full_name),b=py(m+" "+l+" Ago",_,e,a.use_full_name),y=d?d[`${l}_ago`]?.series[n]?.data:null;if(p.hidden)return;const w=a.formatters.find((e=>e==r));w||a.formatters.push(r),my(v,s,{color:p.color,palette:0},a),1==u?.avg&&my(h,"point",{color:uy.avg,palette:1},a),1==u?.perc_95&&my(g,"point",{color:uy.perc_95,palette:1},a),1==u?.past&&my(b,"dash",{color:uy.past,palette:1},a),function(e,t,a,l,n,s,i,o,r){const c=t.statistics.average,u=t.statistics["95th_percentile"];let d=o;for(let t=0;t<l.length;t++){const o=l[t];if(e.serie[d]||(e.serie[d]=[{value:new Date(1e3*d),name:"Time"}]),null!==o?e.serie[d].push({value:o*s,name:r.serie_name}):e.serie[d].push({value:NaN,name:r.serie_name}),1==a?.avg&&e.serie[d].push({value:c*s,name:r.avg_name}),1==a?.perc_95&&e.serie[d].push({value:u*s,name:r.perc_name}),1==a?.past){const a=n?n[t]:null;a?e.serie[d].push({value:a*s,name:r.past_name}):e.serie[d].push({value:NaN,name:r.past_label})}d+=i}}(a,t,u,c,y,f,o,i,{serie_name:v,avg_name:h,perc_name:g,past_name:b})}))}function gy(e,t,a,l,n){let s=1;const i=[];e.serie.forEach((e=>{i.push([s,e]),s++})),0==i.length&&i.push([1,null]);const o={serie:i,formatters:l,labels:["index"],colors:[],stacked:!1,customBars:!1,use_full_name:!1,plotter:fy(a),value_range:n,disable_ts_list:!0};return"string"==typeof t?my(t,a,{color:uy.default_color,palette:0},o):t.forEach((e=>{my(e,a,{color:uy.default_color,palette:0},o)})),_y(o.colors),ry.buildChartOptions(o)}function by(e,t,a,l){const n={serie:[],formatters:[],labels:["Time"],colors:[],properties:[],stacked:!1,customBars:!1,use_full_name:null!=l&&l};return e.forEach(((e,l)=>{!function(e,t,a,l){null!=e.source_type.f_map_ts_options&&(t=(0,e.source_type.f_map_ts_options)(t,e));1==(e.metric.bounds||!1)?vy(e,t,l):hy(e,t,l,a)}(t[l],e,a,n)})),function(e){const t=[];Object.keys(e.serie).forEach(((a,l)=>{t[l]=[],e.labels.forEach((n=>{let s=!1;for(let i=0;i<e.serie[a].length;i++)if(e.serie[a][i].name==n){t[l].push(e.serie[a][i].value),s=!0;break}0==s&&t[l].push(null)}))})),e.serie=t}(n),_y(n.colors),ry.buildChartOptions(n)}const yy={formatSerie:by,formatSimpleSerie:gy,getSerieId:dy,getSerieName:py};function wy(e){return yy.getSerieId(e)}function xy(e,t,a,l){return yy.getSerieName(e,t,a,l)}const ky={"1_chart_x_metric":{value:"1_chart_x_metric",label:i18n("page_stats.layout_1_per_1")},"1_chart_x_yaxis":{value:"1_chart_x_yaxis",label:i18n("page_stats.layout_1_per_y")}};function $y(e){return ky[e]||null}function Sy(e,t,a,l){if(a.value==ky["1_chart_x_metric"].value)return Ny(e,t,a,l);let n=function(e,t){let a=[],l=[],n=[],s=[];return t.forEach(((t,i)=>{1==t.metric.draw_stacked?(a.push(e[i]),l.push(t)):(n.push(e[i]),s.push(t))})),{stacked:{tsOptionsArray:a,tsGroupsArray:l},not_stacked:{tsOptionsArray:n,tsGroupsArray:s}}}(e,t);return[...Ny(n.stacked.tsOptionsArray,n.stacked.tsGroupsArray,a,l),...Ny(n.not_stacked.tsOptionsArray,n.not_stacked.tsGroupsArray,a,l)]}function Ny(e,t,a,l){let n=!1;if(a.value==ky["1_chart_x_yaxis"].value){let a={};t.forEach(((t,l)=>{let n=`${(s=t.metric).measure_unit}_${s.scale}`;var s;let i={tsGroup:t,tsOptions:e[l]};null==a[n]?a[n]=[i]:a[n].push(i)})),n=t.length>1||t.length>0&&!0===t[0].source_type.display_full_name;let s=[];for(let e in a){let t=a[e],i=t.map((e=>e.tsOptions)),o=t.map((e=>e.tsGroup)),r=Ey(i,o,l,n);s.push(r)}return s}if(a.value==ky["1_chart_x_metric"].value){n=e.length>1||t.length>0&&!0===t[0].source_type.display_full_name;let a=[];return e.forEach(((e,s)=>{let i=Ey([e],[t[s]],l,n);a.push(i)})),a}return[]}function Cy(e,t,a,l,n){return yy.formatSimpleSerie(e,t,a,l,n)}function Ey(e,t,a,l){return yy.formatSerie(e,t,a,l)}function Ay(e,t,a){let l=e.source_type.source_def_array.map(((t,l)=>{if(null!=a&&!a[t.value])return null;let n=e.source_array[l].value;return`${t.value}:${n}`})).filter((e=>null!=e)).join(",");return t||null==e.metric.query||(l=`${l},${e.metric.query}`),l}function Ty(e){let t=e.source_type.source_def_array;for(let e=0;e<t.length;e+=1){if(1==t[e].main_source_def)return e}return 0}function Iy(e,t,a,l,n){let s={epoch_begin:t.epoch_begin,epoch_end:t.epoch_end},i={};if(n){let t={zoom:a,limit:180,version:4,ts_compare:a},n=l.map((e=>{let t=Ty(e),a={ts_query:Ay(e),ts_schema:`${e.metric.schema}`};return e.source_type.source_def_array[t].disable_tskey||(a.tskey=e.source_array[t].value),a}));i.url=`${e}/lua/pro/rest/v2/get/timeseries/ts_multi.lua`,i.body={ts_requests:n,...s,...t}}else{let t=`${e}/lua/rest/v2/get/timeseries/ts.lua`,n=`ts_compare=${a}&version=4&zoom=${a}&limit=180`,o=l[0],r=Ty(o),c=Ay(o),u={...s,ts_query:c,ts_schema:`${o.metric.schema}`};o.source_type.source_def_array[r].disable_tskey||(u.tskey=o.source_array[r].value);let d=x.add_obj_to_url(u,n);i.url=`${t}?${d}`}return i}async function Oy(e,t,a,l,n){let s;const i=Iy(e,t,a,l,n);if(n){let e={"Content-Type":"application/json"};s=await b.http_request(i.url,{method:"post",headers:e,body:JSON.stringify(i.body)})}else{s=[await b.http_request(i.url)]}return s}const Py={groupsOptionsModesEnum:ky,tsArrayToOptions:Ey,formatSimpleSerie:Cy,tsArrayToOptionsArray:Sy,getGroupOptionMode:$y,getSerieId:wy,getSerieName:xy,getTsChartsOptions:Oy,getTsChartsDataUrl:Iy,getTsQuery:Ay,getMainSourceDefIndex:Ty},Uy=e=>(pl("data-v-103cd911"),e=e(),fl(),e),jy={class:"nav nav-tabs"},My={class:"form-group ms-2 me-2 mt-3 row"},Fy={class:"form-group row"},Ly={class:"col-form-label col-sm-4"},Ry={class:"col-sm-8"},Dy={key:0,class:"form-group ms-2 me-2 mb-2 mt-3 row"},zy={class:"form-group row"},qy={class:"col-form-label col-sm-4"},By={class:"col-sm-8"},Vy=["title"],Hy={key:0,class:"form-group mt-2 row"},Gy={class:"col-form-label col-sm-4"},Wy={class:"col-sm-8"},Ky={key:1,class:"form-group mt-2 row"},Jy={class:"col-form-label col-sm-4"},Yy={class:"col-sm-8"},Zy=["onInput","onUpdate:modelValue","pattern"],Xy={key:2,class:"form-group mt-2 row"},Qy={class:"col-form-label col-sm-4"},ew={class:"col-sm-7"},tw=["onInput","onUpdate:modelValue","pattern"],aw={class:"col-sm-1"},lw=["onClick","title","disabled"],nw=[Uy((()=>Vs("i",{class:"fas fa-refresh"},null,-1)))],sw={class:"form-group row mt-2",style:{"text-align":"end"}},iw={class:"col-sm-12"},ow=["disabled"],rw={class:"form-group ms-2 me-2 mt-3 row"},cw={class:"form-group row"},uw={class:"col-form-label col-sm-4"},dw={class:"col-sm-8"},_w=["disabled"];var pw={__name:"modal-timeseries",props:{sources_types_enabled:Object},emits:["apply"],setup(e,{expose:t,emit:a}){const l=e,n=ma(null),s=ma(null),i=ma("select");let o=Jb.get_current_page_source_type();const r=Jb.sources_types,c=ma(o),u=Jb.ui_types,d=ma([]),_=ma([]),p=ma([]),f=ma(""),m=ma([]),v=ma(!1),h=wi((()=>{if(0==v.value)return!1;for(let e=0;e<m.value.length;e+=1){let t=m.value[e];if(null==t)continue;let a=new RegExp(t),l=p.value[e];if(0==a.test(l))return!1}return!0})),g=ma(!1),y=ma([]),w=ma({}),x=ma([]),k=ma([]),$=a;let S=null;dn((()=>{r.forEach((e=>{l.sources_types_enabled[e.id]}))})),_n((async()=>{S=async function(){await C(),U()}()}));function N(e){i.value=e}async function C(){v.value=!1,function(){let e=c.value?.source_def_array.map((e=>e.regex_type));null==e&&(e=[]);m.value=e.map((e=>null==e?null:yp.get_data_pattern(e)))}(),function(){let e=c.value;g.value=e.source_def_array.map((e=>e.ui_type==u.hide)).every((e=>1==e))}(),await async function(){let e=c.value.source_def_array,t=[],a=await Jb.get_default_source_array(http_prefix,c.value),l=a.map((e=>e.value));for(let a=0;a<e.length;a+=1){let n=await Jb.get_sources(http_prefix,c.value.id,e[a],l);t.push(n)}_.value=a,d.value=t,p.value=l,O()}(),await P()}async function E(){v.value=!1,p.value.forEach(((e,t)=>{if(c.value.source_def_array[t].ui_type==u.input){A(_.value[t],e)}})),await async function(){await P()}(),O()}function A(e,t){e.value=t,e.label=t}function T(e,t,a){v.value=!0,1==a&&I(e,t)}async function I(e,t){e.ui_type==u.input_confirm&&A(_.value[t],p.value[t]);let a=c.value.source_def_array,l=_.value.map((e=>e.value));for(let e=t+1;e<a.length;e+=1){const t=a[e];if(!t.refresh_on_sources_change)continue;let n=await Jb.get_sources(http_prefix,c.value.id,t,l);d.value[e]=n,n.length>0?_.value[e]=n[0]:(_.value[e]={label:"",value:""},console.warn(`No sources availables to select for ${c.value.id} sorce_def`))}}function O(){f.value=`${_.value.filter((e=>null!=e.label&&""!=e.label)).map((e=>e.label)).join(" - ")}`}async function P(){y.value=await Jb.get_metrics(http_prefix,c.value,_.value),y.value.sort(NtopUtils.sortAlphabetically),w.value=Jb.get_default_metric(y.value),U()}function U(e){k.value=[];let t=w.value.timeseries;for(let e in t)k.value.push({id:e,label:t[e].label,raw:!0,past:!1,avg:!1,perc_95:!1})}function j(e){let t=e.source_type.label,a=Py.getMainSourceDefIndex(e);return`${t} - ${e.source_array[a].label} - ${e.metric.label}`}function M(e){let t,a,l;return null==e?(t=c.value,a=_.value,l=w.value):(t=e.source_type,a=e.source_array,l=e.metric),Jb.get_ts_group_id(t,a,l)}const F=e=>{x.value=x.value.filter((t=>M(t)!=e))},L=(e,t)=>{let a=x.value.findIndex((t=>t.id==e.id));a<0?x.value.push(e):x.value[a]=e,t&&$("apply",x.value)},R=()=>{if("add"==i.value){let e={id:M(),source_type:c.value,source_array:b.clone(_.value),metric:w.value,timeseries:b.clone(k.value)};L(e)}$("apply",x.value),D()},D=()=>{n.value.close()},z=e=>i18n(e);return t({show:async e=>{x.value=e,await S,i.value="select",n.value.show()},close:D,add_ts_group:L,set_timeseries_groups:(e,t)=>{x.value=e,t&&$("apply",x.value)}}),(e,t)=>(Is(),Fs(np,{onShowed:t[8]||(t[8]=e=>{}),ref_key:"modal_id",ref:n},{title:vl((()=>[Ks(te(z("modal_timeseries.title")),1)])),body:vl((()=>[Vs("ul",jy,[Vs("li",{class:"nav-item",onClick:t[0]||(t[0]=e=>N("add"))},[Vs("a",{class:K(["nav-link",{active:"add"==i.value}]),href:"#"},te(z("modal_timeseries.add_timeseries")),3)]),Vs("li",{class:"nav-item",onClick:t[1]||(t[1]=e=>N("select"))},[Vs("a",{class:K(["nav-link",{active:"select"==i.value}]),href:"#"},te(z("modal_timeseries.manage_timeseries")),3)])]),Ys(" action add "),"add"==i.value?(Is(),Ms(Ss,{key:0},[Ys(" Sources Types "),Vs("div",My,[Vs("div",Fy,[Vs("label",Ly,[Vs("b",null,te(z("modal_timeseries.source_type")),1)]),Vs("div",Ry,[Hs(l_,{selected_option:c.value,"onUpdate:selected_option":t[2]||(t[2]=e=>c.value=e),onSelect_option:t[3]||(t[3]=e=>C()),options:ya(r)},null,8,["selected_option","options"])])])]),Ys(" Sources "),g.value?Ys("v-if",!0):(Is(),Ms("div",Dy,[Vs("div",zy,[Vs("label",qy,[Vs("b",null,te(z("modal_timeseries.source")),1)]),Vs("div",By,[wn(Vs("input",{class:"form-control","onUpdate:modelValue":t[4]||(t[4]=e=>f.value=e),title:f.value,style:{overflow:"hidden","text-overflow":"ellipsis","white-space":"nowrap"},type:"text",disabled:""},null,8,Vy),[[jo,f.value]])])]),(Is(!0),Ms(Ss,null,An(c.value.source_def_array,((e,t)=>(Is(),Ms(Ss,null,[Ys(" select "),e.ui_type==ya(u).select?(Is(),Ms("div",Hy,[Vs("label",Gy,[Vs("b",null,te(e.label),1)]),Vs("div",Wy,[Hs(l_,{selected_option:_.value[t],"onUpdate:selected_option":e=>_.value[t]=e,onSelect_option:a=>T(e,t,!0),options:d.value[t]},null,8,["selected_option","onUpdate:selected_option","onSelect_option","options"])])])):Ys("v-if",!0),Ys(" end select "),Ys(" input text "),e.ui_type==ya(u).input?(Is(),Ms("div",Ky,[Vs("label",Jy,[Vs("b",null,te(e.label),1)]),Vs("div",Yy,[wn(Vs("input",{class:"form-control",onInput:a=>T(e,t),"onUpdate:modelValue":e=>p.value[t]=e,pattern:m.value[t],required:"",type:"text",placeholder:""},null,40,Zy),[[jo,p.value[t]]])])])):Ys("v-if",!0),Ys(" input text "),Ys(" input confirm text "),e.ui_type==ya(u).input_confirm?(Is(),Ms("div",Xy,[Vs("label",Qy,[Vs("b",null,te(e.label),1)]),Vs("div",ew,[wn(Vs("input",{class:"form-control",onInput:a=>T(e,t),"onUpdate:modelValue":e=>p.value[t]=e,pattern:m.value[t],required:"",type:"text",placeholder:""},null,40,tw),[[jo,p.value[t]]])]),Vs("div",aw,[Vs("button",{type:"button",class:"btn btn-link btn-sm",onClick:a=>I(e,t),title:z(e.refresh_i18n),disabled:!h.value},[...nw],8,lw)])])):Ys("v-if",!0),Ys(" input confirm text ")],64)))),256)),wn(Vs("div",sw,[Vs("div",iw,[Vs("button",{type:"button",onClick:E,disabled:0==h.value,class:"btn btn-primary"},te(z("modal_timeseries.apply_source")),9,ow)])],512),[[Yo,h.value]])])),Ys(" end Sources "),Ys(" Metrics "),Vs("div",rw,[Vs("div",cw,[Vs("label",uw,[Vs("b",null,te(z("modal_timeseries.metric")),1)]),Vs("div",dw,[Hs(l_,{ref_key:"select_search_metrics",ref:s,onSelect_option:t[5]||(t[5]=e=>U()),selected_option:w.value,"onUpdate:selected_option":t[6]||(t[6]=e=>w.value=e),options:y.value},null,8,["selected_option","options"])])])]),Hs(eb,{title:z("modal_timeseries.timeseries_list"),timeseries:k.value,"onUpdate:timeseries":t[7]||(t[7]=e=>k.value=e)},null,8,["title","timeseries"])],64)):Ys("v-if",!0),Ys(" action == add "),Ys(" action select"),"select"==i.value?(Is(),Ms(Ss,{key:1},[(Is(!0),Ms(Ss,null,An(x.value,(e=>(Is(),Fs(eb,{id:M(e),title:j(e),timeseries:e.timeseries,"onUpdate:timeseries":t=>e.timeseries=t,show_delete_button:x.value.length>1,onDelete_ts:F},null,8,["id","title","timeseries","onUpdate:timeseries","show_delete_button"])))),256)),Ys(" v-for timeseries_groups_added ")],64)):Ys("v-if",!0),Ys(" action == select ")])),footer:vl((()=>[wn(Vs("button",{type:"button",onClick:R,disabled:h.value,class:"btn btn-primary"},te(z("modal_timeseries.add")),9,_w),[[Yo,"add"==i.value]]),wn(Vs("button",{type:"button",onClick:R,class:"btn btn-primary"},te(z("modal_timeseries.apply")),513),[[Yo,"select"==i.value]])])),_:1},512))}};lp("\ninput[data-v-103cd911]:invalid {\n  border-color: #ff0000;\n}\n.custom-margin[data-v-103cd911] {\nmargin-left: -0.4rem;\n}\n.warn[data-v-103cd911] {\nborder-color: #ffd500;\nborder-style: solid;\n}\n"),pw.__scopeId="data-v-103cd911",pw.__file="http_src/vue/modal-timeseries.vue";const fw={class:"form-group mt-2 row"},mw={class:"col-form-label col-sm-4"},vw={class:"col-sm-6"},hw={class:"col-form-label col-sm-2"},gw=["disabled"];var bw={__name:"modal-download-file",props:{title:String,ext:String},emits:["download"],setup(e,{expose:t,emit:a}){const l=ma(null),n=ma(""),s=String.raw`^[a-zA-Z_\-1-9]*$`,i=wi((()=>new RegExp(s).test(n.value))),o=e,r=a;function c(){let e=`${n.value}.${o.ext}`;r("download",e),u()}const u=()=>{l.value.close()};t({show:e=>{null==e&&(e=""),e=e.replaceAll(/[^a-zA-Z0-9]/g,"_"),n.value=e,l.value.show()},close:u}),_n((()=>{}));const d=e=>i18n(e);return(e,t)=>(Is(),Fs(np,{ref_key:"modal_id",ref:l},{title:vl((()=>[Ks(te(o.title),1)])),body:vl((()=>[Vs("div",fw,[Vs("label",mw,[Vs("b",null,te(d("modal_download_file.filename"))+":",1)]),Vs("div",vw,[wn(Vs("input",{class:"form-control",pattern:s,"onUpdate:modelValue":t[0]||(t[0]=e=>n.value=e),type:"text",required:""},null,512),[[jo,n.value]])]),Vs("label",hw," ."+te(o.ext),1)])])),footer:vl((()=>[Vs("button",{type:"button",onClick:c,class:"btn btn-primary",disabled:0==i.value},te(d("modal_download_file.download")),9,gw)])),_:1},512))}};lp("\ninput[data-v-59120eb8]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-59120eb8] {\n  cursor: not-allowed;\n}\n"),bw.__scopeId="data-v-59120eb8",bw.__file="http_src/vue/modal-download-file.vue";const yw={key:0},ww={class:"text-center"},xw=Vs("tbody",null,null,-1);var kw={__name:"datatable",props:{id:String,table_buttons:Array,columns_config:Array,data_url:String,enable_search:Boolean,filter_buttons:{type:Array,required:!1},table_config:{type:Object,required:!1},base_url:String,base_params:Object},emits:["drawed"],setup(e,{expose:t,emit:a}){const l=si(),n=Ni(),s=e,i=a,o=(e,t)=>{if((t||s.id)&&null!=e.dir){const a=[e.col,e.dir],l=`${t||s.id}_sorting_preferences`;localStorage.setItem(l,a)}},r=e=>{let t=null;if(e||s.id){const a=`${e||s.id}_sorting_preferences`,l=localStorage.getItem(a);if(l){const e=l.split(",");2==e.length&&(t=[Number(e[0]),e[1]])}}return t};let c=s.base_params;const u=ma(null),d=r()||[0,"asc"];let _=null;_n((()=>{!function(){let e=!1,t={serverSide:!1,scrollX:!1,destroy:!0,searching:s.enable_search,order:[d],pagingType:"full_numbers",columns:s.columns_config,autoWidth:!1,responsive:!0,ajax:{method:"get",url:s.data_url,dataSrc:"rsp",data:(e,t)=>{if(0==Object.keys(e).length)return;const a=t.oInstance.api(),l=e.order[0].column,n=a.column(l).name()||void 0;return e.order&&(e.order=e.order[0].dir,e.sort=n),void 0!==e.columns&&delete e.columns,void 0!==e.search&&(e.map_search=e.search.value,delete e.search),e},beforeSend:function(){NtopUtils.showOverlays()}},drawCallback:function(e){NtopUtils.hideOverlays(),i("drawed"),ntopng_events_manager.emit_custom_event(ntopng_custom_events.DATATABLE_LOADED),o(e.aLastSort[0])}};for(const e in s.table_config||{})t[e]=s.table_config[e];let a=DataTableUtils.getStdDatatableConfig(s.table_buttons);a=DataTableUtils.extendConfig(a,t),_=$(u.value).DataTable(a),f();for(const t of s.filter_buttons||[]){const a=x.get_url_entry(t.filterMenuKey);if(a&&""!=a){let l=0;t.filters.forEach((e=>{e.currently_active=!1,l+=1,e.id==a&&(e.currently_active=!0,l-=1)})),l==t.filters.length&&(x.set_key_to_url(t.filterMenuKey,""),e=!0)}new DataTableFiltersMenu({filterTitle:t.filterTitle,tableAPI:_,filters:t.filters,filterMenuKey:t.filterMenuKey,columnIndex:t.columnIndex,url:s.data_url,id:t.id,removeAllEntry:t.removeAllEntry,callbackFunction:t.callbackFunction}).init()}if(e&&s.base_params){const e=x.get_url_entries();for(const[t,a]of e)c[t]=a;_.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,c)),m()}}()}));let p=null;function f(){if(null==p&&(p=function(){if(null==_)return;let e=$(_.context[0].nTableWrapper);return $($(".row .text-end",e).children()[0])}()),null==n||null==n.menu)return;let e=n.menu();if(null==e||0==e.length)return;let t=n.menu()[0],a=$("<div class='d-inline-block'></div>")[0];const{vNode:s,el:i}=function(e,{props:t,children:a,element:l,app:n}={}){let s=l,i=Hs(e,t,a);return n&&n._context&&(i.appContext=n._context),s?lr(i,s):"undefined"!=typeof document&&lr(i,s=document.createElement("div")),{vNode:i,destroy:()=>{s&&lr(null,s),s=null,i=null},el:s}}(t,{app:l?.appContext?.app,element:a});let o=$(_.context[0].nTableWrapper);$($(".row .text-end",o).children()[0]).append(i)}const m=()=>{null!=_&&_.ajax.reload()},v=e=>{DataTableUtils.deleteButtonHandlers(e)};let h=!1;const g=()=>{_.clear(),_.destroy(!0),h=!0,s.columns_config.filter((e=>null!=e.handlerId)).forEach((e=>{v(e.handlerId)}))};return t({reload:m,delete_button_handlers:v,destroy_table:g,update_url:e=>{null!=_&&_.ajax.url(e)},refresh_menu:()=>{let e=$(_.context[0].nTableWrapper);$($(".row .text-end",e).children()[0]).html(""),f()},is_last_sorting_available:e=>null!=r(e),load_last_sort:r,save_last_sort:o,search_value:function(e){null!=_&&_.search(e).draw()}}),mn((()=>{1!=h&&g()})),(t,a)=>(Is(),Ms(Ss,null,[(Is(),Ms("div",yw,[Ys(' <slot name="menu"></slot> ')])),Vs("div",null,[Vs("table",{ref_key:"table_id",ref:u,class:"table w-100 table-striped table-hover table-bordered"},[Vs("thead",null,[Vs("tr",null,[(Is(!0),Ms(Ss,null,An(e.columns_config,(e=>(Is(),Ms("th",ww,te(e.columnName),1)))),256))])]),xw],512)])],64))},__file:"http_src/vue/datatable.vue"};const $w={key:0,class:"table table-striped table-bordered col-sm-12",style:{}},Sw=["innerHTML"],Nw={class:""},Cw=["innerHTML"],Ew=["innerHTML"],Aw={class:"table table-striped table-bordered"},Tw=["innerHTML"],Iw=["colspan","innerHTML"];var Ow={__name:"bootstrap-table",props:{id:String,columns:Array,rows:Array,print_html_column:Function,print_html_row:Function,print_html_title:Function,horizontal:Boolean,wrap_columns:Boolean},setup:e=>(t,a)=>(Is(),Ms(Ss,null,[Ys(" Normal table "),e.horizontal&&0!=e.horizontal?(Is(),Ms(Ss,{key:1},[Ys(" Horizontal table, with th on the rows "),Vs("table",Aw,[Vs("tbody",null,[(Is(!0),Ms(Ss,null,An(e.rows,(t=>(Is(),Ms("tr",null,[Vs("th",{class:"col 5",innerHTML:e.print_html_title(t.name)},null,8,Tw),(Is(!0),Ms(Ss,null,An(t.values,(a=>(Is(),Ms("td",{colspan:[t.values.length<=1?2:1],innerHTML:e.print_html_row(a)},null,8,Iw)))),256))])))),256))])])],2112)):(Is(),Ms("table",$w,[Vs("thead",null,[Vs("tr",null,[(Is(!0),Ms(Ss,null,An(e.columns,(t=>(Is(),Ms("th",{scope:"col",class:K(t.class),innerHTML:e.print_html_column(t)},null,10,Sw)))),256))])]),Vs("tbody",null,[(Is(!0),Ms(Ss,null,An(e.rows,(t=>(Is(),Ms("tr",Nw,[1==e.wrap_columns?(Is(!0),Ms(Ss,{key:0},An(e.columns,(a=>(Is(),Ms("td",{scope:"col",style:{height:"2.5rem"},class:K(a.class)},[Vs("div",{class:"wrap-column",style:V(a.style),innerHTML:e.print_html_row(a,t)},null,12,Cw)],2)))),256)):(Is(!0),Ms(Ss,{key:1},An(e.columns,(a=>(Is(),Ms("td",{scope:"col",class:K([a.class,"wrap_column"]),style:V(a.style),innerHTML:e.print_html_row(a,t)},null,14,Ew)))),256))])))),256))])]))],2112))};lp("\n.wrap-column[data-v-0533335c] {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  max-width:100%;\n}\n"),Ow.__scopeId="data-v-0533335c",Ow.__file="http_src/vue/bootstrap-table.vue";const Pw=e=>(pl("data-v-937058e4"),e=e(),fl(),e),Uw={class:"col-12 mb-2 mt-2"},jw={class:"card h-100 overflow-hidden"},Mw=["title"],Fw=[Pw((()=>Vs("i",{class:"fas fa-lg fa-camera-retro"},null,-1)))],Lw=["title"],Rw=[Pw((()=>Vs("i",{class:"fas fa-lg fa-download"},null,-1)))],Dw=["disabled","title"],zw=[Pw((()=>Vs("i",{class:"fas fa-lg fa-file-image"},null,-1)))],qw=["title"],Bw=[Pw((()=>Vs("i",{class:"fas fa-lg fa-table"},null,-1)))],Vw={class:"form-group ms-1 mt-2 d-flex align-items-center"},Hw={class:"inline select2-size me-2"},Gw={class:"inline select2-size me-2"},Ww={key:0,class:"mt-4 card card-shadow"},Kw={class:"card-body"},Jw={key:1,class:"mt-4 card card-shadow"},Yw={class:"card-body"},Zw={key:0,class:"inline select2-size me-2 mt-2"},Xw="timeseries";var Qw={__name:"page-stats",props:{csrf:String,is_ntop_pro:Boolean,source_value_object:Object,sources_types_enabled:Object,sources_types_top_enabled:Object,enable_snapshots:Boolean,is_history_enabled:Boolean,traffic_extraction_permitted:Boolean,is_dark_mode:Boolean},setup(e){const t=e,l=e=>i18n(e);let n="date_time_picker",s=ntopChartApex.typeChart.TS_LINE;ma({}),ma(!1);const i=ma([]),o=ma(null),r=ma(null),c=ma(null),u=ma(null),d=ma(null),_=/^((?!chrome|android).)*safari/i.test(navigator.userAgent),p=l(_?"page_stats.download_image_disabled":"page_stats.title_modal_download_file"),f=ma(null),v=ma([]),h=ma({});Jb.get_current_page_source_type();const g=ma(!1);ma(!1);const w=ma([]),k=b.object_to_array(Py.groupsOptionsModesEnum),$=ma(function(){let e=x.get_url_entry("timeseries_groups_mode");if(null!=e&&""!=e)return Py.getGroupOptionMode(e);return k[0]}());let S=null;const N={label:i18n("page_stats.custom_metrics"),currently_active:!1},C=ma(!1),E=[{value:"10_min",label:i18n("show_alerts.presets.10_min"),currently_active:!1},{value:"30_min",label:i18n("show_alerts.presets.30_min"),currently_active:!0},{value:"hour",label:i18n("show_alerts.presets.hour"),currently_active:!1},{value:"2_hours",label:i18n("show_alerts.presets.2_hours"),currently_active:!1},{value:"6_hours",label:i18n("show_alerts.presets.6_hours"),currently_active:!1},{value:"12_hours",label:i18n("show_alerts.presets.12_hours"),currently_active:!1},{value:"day",label:i18n("show_alerts.presets.day"),currently_active:!1},{value:"week",label:i18n("show_alerts.presets.week"),currently_active:!1},{value:"month",label:i18n("show_alerts.presets.month"),currently_active:!1},{value:"year",label:i18n("show_alerts.presets.year"),currently_active:!1},{value:"custom",label:i18n("show_alerts.presets.custom"),currently_active:!1,disabled:!0}];dn((async()=>{if("va_historical"==x.get_url_entry("page")){let e=[];Y.forEach((t=>{t.va&&e.push(t)})),Y=e}t.source_value_object.is_va&&(f.value="hour",b.check_and_set_default_time_interval("day")),function(){if(null==t.source_value_object)return;let e=Jb.get_current_page_source_type();Jb.set_source_value_object_in_url(e,t.source_value_object)}()})),_n((async()=>{!async function(){let e,t,a=!0,l=await Jb.get_timeseries_groups_from_url(http_prefix);if(null==l){a=!1,e=x.get_url_entry("ts_schema");let n=x.get_url_entry("ts_query");null!=n&&""!=n&&(t=Jb.get_metric_query_from_ts_query(n)),""==e&&(e=null),l=await Jb.get_default_timeseries_groups(http_prefix,e,t)}v.value=await A(a),h.value=1==a?N:Jb.get_default_metric(v.value,e,t);C.value=!0,await G(l,!0,!0)}(),await Promise.all([ntopng_sync.on_ready(n)])}));async function A(e,l){let n=await Jb.get_metrics(http_prefix);if(!l&&null==e)return n.value;if(e&&n.push(N),(null==z||l)&&(z=await async function(){if(!t.enable_snapshots)return;let e=`${http_prefix}/lua/pro/rest/v2/get/filters/snapshots.lua?page=${Xw}`,a=await b.http_request(e),l=b.object_to_array(a).map((e=>({...e,is_snapshot:!0,label:`${e.name}`,group:"Snapshots"})));return l}()),t.enable_snapshots){z.forEach((e=>n.push(e)))}return n.length>0&&n.sort(a.sortAlphabetically),n}async function T(e){let t=Jb.get_current_page_source_type(),a=await Jb.get_default_source_array(http_prefix,t);return[Jb.get_ts_group(t,a,e)]}const I=async(e,t,a)=>{let l=Jb.get_source_type_from_id(e),n=await Jb.get_source_array_from_value_dict(http_prefix,l,t),s=await Jb.get_metric_from_schema(http_prefix,l,n,a);P(Jb.get_ts_group(l,n,s))},O=async(e,t)=>{let a=v.value.find((a=>a.schema==e&&a.query==t));null!=a?P((await T(a))[0]):console.error(`metric = ${e}, query = ${t} not found.`)};function P(e){c.value.set_timeseries_groups(S),c.value.add_ts_group(e,!0)}async function U(e){if(1==e.is_snapshot){let t=e.filters,a=x.get_url_entry("timeseries_groups",t),l=await Jb.get_timeseries_groups_from_url(http_prefix,a);$.value=Py.getGroupOptionMode(x.get_url_entry("timeseries_groups_mode",t)),await G(l,!0,!1)}else await async function(){let e=await async function(){return T(h.value)}();await G(e,!0,!1)}(),B(!1)}function j(e){let a=h.value.label==N.label;G(S,!0,!1,e.refresh_data),async function(){if(!t.is_ntop_pro)return;let e=J.value?.table_config_def;if(null==e)return;let a=W(e.ts_group,e.table_def.table_value,e.table_def.view,e.table_source_def_value_dict);r.value.update_url(a),r.value.reload()}(),B(a,!0)}function M(e){}function F(){u.value.show()}function L(){null!=S&&c.value.show(S)}function R(e){return async t=>w.value[e].chart_options}let D,z=null;function q(){B(h.value.label==N.label,!0)}async function B(e,t){v.value=await A(e,t),e&&(h.value=N)}async function V(e){B(!0),await G(e,!0,!0)}function H(){G(S,!1,!1)}async function G(e,a,l,n){let s=y.get_status(),o=function(e){let t=Number.parseInt((e.epoch_end-e.epoch_begin)/60);return t<=5?"5m":t<=30?"30m":t<=60?"1h":t<=1440?"1d":t<=10080?"1w":t<=43200?"1M":"1Y"}(s);if(a){if(null==e)return e=[],void console.warn("Empty timeseries_groups request");D=await Py.getTsChartsOptions(http_prefix,s,o,e,t.is_ntop_pro)}!function(e,t){e.forEach(((e,a)=>{let l=t[a],n=l?.metadata?.label;if(null!=n){let t=Py.getMainSourceDefIndex(e);e.source_array[t].label=n}}))}(e,D);let r=Py.tsArrayToOptionsArray(D,e,$.value,o);n?function(e){e.forEach(((e,t)=>{i.value[t].update_chart_series(e?.serie)}))}(r):function(e){w.value=e.map(((e,t)=>({key:b.get_random_string(),chart_options:e})))}(r),function(e,t,a){const l=e.length>1;if(g.value=t.map((e=>!e.source_type.disable_stats)).reduce(((e,t)=>e|t),!1),!g.value)return;const n=e=>{let t={bps:"bytes",fps:"flows",alertps:"alerts",hitss:"hits",pps:"packets"};return null!=t[e]?t[e]:e};Z.value=[],e.forEach(((e,a)=>{let s=t[a];1!=s.source_type.disable_stats&&e.series?.forEach(((e,t)=>{let a,i=Py.getSerieId(e),o=s.metric.timeseries[i],r=m.getFormatter(s.metric.measure_unit),c=o.label;if(o.hidden)return;if(1==o.use_serie_name&&(c=e.name),e?.data.length>t&&(a=e.statistics),null==a)return;e.ext_label&&(c=e.ext_label),c=Py.getSerieName(c,i,s,l);let u=n(s.metric.measure_unit),d={metric:c,total:m.getFormatter(u)(a.total),perc_95:r(a["95th_percentile"]),avg:r(a.average),max:r(a.max_val),min:r(a.min_val)};Z.value.push(d)}))}))}(D,e),l&&function(e,a){if(!t.is_ntop_pro)return;null==e&&(e=S);null==a&&(a=y.get_status());let l=Jb.sources_types_tables,n={};e.forEach((e=>{e.source_type;let t=Jb.get_ts_group_id(e.source_type,e.source_array);n[t]=e}));let s={};K.value=[];for(let e in n){let i=n[e],o=Py.getMainSourceDefIndex(i),r=i.source_array[o],c=i.source_type,u=l[c.id];null!=u&&u.forEach((e=>{let l=t.sources_types_top_enabled[e.table_value];if(null==l)return;if(!l[e.view])return;let n=e.table_source_def_value_dict,o=W(i,e.table_value,e.view,n,a),u=Jb.get_ts_group_id(i.source_type,i.source_array,null,n,!0);if(u=`${u}_${e.view}`,null!=s[u])return;s[u]=!0;let d,_=`${e.table_value}_${e.view}_${u}`;d=null==e.f_get_label?`${e.title} - ${c.label} ${r.label}`:e.f_get_label(i);const p={ts_group:i,table_def:e,table_buttons:[],data_url:o,enable_search:!0,table_config:{serverSide:!1,order:[[e.default_sorting_columns,"desc"]],columnDefs:e.columnDefs||[]}};p.columns_config=e.columns.map((e=>{let l={is_history_enabled:t.is_history_enabled},n={visible:!e.render_if||e.render_if(l),...e};return null==n.className&&(n.className="text-nowrap"),null==n.responsivePriority&&(n.responsivePriority=1),n.render=e.render.bind({add_metric_from_metric_schema:O,add_ts_group_from_source_value_dict:I,sources_types_enabled:t.sources_types_enabled,status:a,source_type:c,source_array:i.source_array}),n}));let f={value:_,label:d,table_config_def:p};K.value.push(f)}))}if(null!=J.value&&K.value.find((e=>e.value==J.value.value)))return;J.value=K.value.find((e=>1==e.table_config_def.default)),null==J.value&&(J.value=K.value[0])}(e,s),S=e,x.set_key_to_url("timeseries_groups_mode",$.value.value),Jb.set_timeseries_groups_in_url(S)}function W(e,t,a,l,n){null==n&&(n=y.get_status());let s=Py.getTsQuery(e,!0,l),i=`${http_prefix}/lua/pro/rest/v2/get/${t}/top/ts_stats.lua`,o={zoom:"5m",ts_query:s,epoch_begin:`${n.epoch_begin}`,epoch_end:`${n.epoch_end}`,detail_view:`${a}`,new_charts:"true"};return`${i}?${x.add_obj_to_url(o,"")}`}const K=ma([]),J=ma({});let Y=[{id:"metric",label:l("page_stats.metric"),va:!0},{id:"avg",label:l("page_stats.average"),class:"text-end",va:!0},{id:"perc_95",label:l("page_stats.95_perc"),class:"text-end",va:!0},{id:"max",label:l("page_stats.max"),class:"text-end",va:!0},{id:"min",label:l("page_stats.min"),class:"text-end",va:!0},{id:"total",label:l("page_stats.total"),class:"text-end",va:!1}];const Z=ma([]);function X(){let e=y.get_status(),t={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end},a=x.obj_to_url_params(t);const l=`${http_prefix}/lua/pro/db_search.lua?${a}`;x.go_to_url(l)}const Q=ma(null);function ee(){Q.value.show()}function te(){if(!D?.length)return;let e=S[0],t=Py.getSerieName(null,null,e);d.value.show(t)}async function ae(e){let t=i.value.map((async e=>{let t=new Image;return e.get_image(t),new Promise((async(e,a)=>{t.onload=function(){e(t)}}))})),a=0,l=await Promise.all(t);l.forEach((e=>{a+=e.height}));let n=document.createElement("canvas"),s=n.getContext("2d");n.width=l[0].width,n.height=a,a=0,l.forEach((e=>{s.drawImage(e,0,a,e.width,e.height),a+=e.height})),b.download_URI(n.toDataURL(),e)}return(t,a)=>(Is(),Ms(Ss,null,[Vs("div",Uw,[Hs(S_),Vs("div",jw,[Hs(A_,{style:{"margin-top":"0.5rem"},class:"ms-1",id:ya(n),enable_refresh:!0,ref_key:"date_time_picker",ref:o,onEpoch_change:j,min_time_interval_id:f.value,custom_time_interval_list:E},{begin:vl((()=>[])),extra_buttons:vl((()=>[e.enable_snapshots?(Is(),Ms("button",{key:0,class:"btn btn-link btn-sm",onClick:F,title:l("page_stats.manage_snapshots_btn")},[...Fw],8,Mw)):Ys("v-if",!0),e.traffic_extraction_permitted?(Is(),Ms("button",{key:1,class:"btn btn-link btn-sm",onClick:ee,title:l("traffic_recording.pcap_download")},[...Rw],8,Lw)):Ys("v-if",!0),Vs("button",{disabled:ya(_),class:"btn btn-link btn-sm",onClick:te,title:ya(p)},[...zw],8,Dw),e.is_history_enabled?(Is(),Ms("button",{key:2,class:"btn btn-link btn-sm",onClick:X,title:l("page_stats.historical_flows")},[...Bw],8,qw)):Ys("v-if",!0)])),_:1},8,["id","min_time_interval_id"]),Ys(" select metric "),wn(Vs("div",Vw,[Vs("div",Hw,[Hs(l_,{selected_option:h.value,"onUpdate:selected_option":a[0]||(a[0]=e=>h.value=e),options:v.value,onSelect_option:U},null,8,["selected_option","options"])]),Vs("div",Gw,[Hs(l_,{selected_option:$.value,"onUpdate:selected_option":a[1]||(a[1]=e=>$.value=e),options:ya(k),onSelect_option:H},null,8,["selected_option","options"])]),e.is_ntop_pro?(Is(),Ms("button",{key:0,type:"button",onClick:L,class:"btn btn-sm btn-primary inline",style:{"vertical-align":"super"}}," Manage Timeseries ")):Ys("v-if",!0)],512),[[Yo,C.value]]),(Is(!0),Ms(Ss,null,An(w.value,((e,t)=>(Is(),Fs(Ag,{key:e.key,id:ya("chart")+t,ref_for:!0,ref:e=>{i.value[t]=e},chart_type:ya(s),register_on_status_change:!1,get_custom_chart_options:R(t),onZoom:j,onChart_reloaded:M},null,8,["id","chart_type","get_custom_chart_options"])))),128))]),g.value?(Is(),Ms("div",Ww,[Vs("div",Kw,[Hs(Ow,{id:"page_stats_bootstrap_table",columns:ya(Y),rows:Z.value,print_html_column:e=>function(e){return e.label}(e),print_html_row:(e,t)=>function(e,t){return t[e.id]}(e,t)},null,8,["columns","rows","print_html_column","print_html_row"])])])):Ys("v-if",!0),e.is_ntop_pro?(Is(),Ms("div",Jw,[Vs("div",Yw,[J.value?.table_config_def?(Is(),Ms("div",Zw,[Hs(l_,{selected_option:J.value,"onUpdate:selected_option":a[2]||(a[2]=e=>J.value=e),options:K.value},null,8,["selected_option","options"])])):Ys("v-if",!0),J.value?.table_config_def?(Is(),Fs(kw,{key:J.value?.value,ref_key:"top_table_ref",ref:r,table_buttons:J.value.table_config_def.table_button,columns_config:J.value.table_config_def.columns_config,data_url:J.value.table_config_def.data_url,enable_search:J.value.table_config_def.enable_search,table_config:J.value.table_config_def.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])):Ys("v-if",!0)])])):Ys("v-if",!0)]),e.enable_snapshots?(Is(),Fs(ov,{key:0,ref_key:"modal_snapshot",ref:u,csrf:e.csrf,page:Xw,onAdded_snapshot:q,onDeleted_snapshots:q,onDeleted_all_snapshots:q},null,8,["csrf"])):Ys("v-if",!0),e.is_ntop_pro?(Is(),Fs(pw,{key:1,ref_key:"modal_timeseries",ref:c,sources_types_enabled:e.sources_types_enabled,onApply:V},null,8,["sources_types_enabled"])):Ys("v-if",!0),Hs(mm,{id:"page_stats_modal_traffic_extraction",ref_key:"modal_traffic_extraction",ref:Q},null,512),Hs(bw,{ref_key:"modal_download_file",ref:d,title:l("page_stats.title_modal_download_file"),ext:"png",onDownload:ae},null,8,["title"])],64))}};lp("\n.inline[data-v-937058e4] {\n    display: inline-block;\n}\n.select2-size[data-v-937058e4] {\n    min-width: 18rem;\n}\n"),Qw.__scopeId="data-v-937058e4",Qw.__file="http_src/vue/page-stats.vue";var ex=Jl({components:{},props:{id:String,tab_list:Array},emits:["click_item"],created(){},data:()=>({old_tab:null}),mounted(){let e=null;this.$props.tab_list.forEach((function(t){t.active&&(e=t)})),this.old_tab=e||this.$props.tab_list[0],ntopng_sync.ready(this.$props.id)},methods:{change_tab:function(e){(null!=e.id&&this.old_tab.id!=e.id||null!=e.name&&this.old_tab.name!=e.name)&&(this.old_tab=e,this.$emit("click_item",e))}}});const tx={class:"card-header mb-2"},ax={class:"nav nav-tabs card-header-tabs",role:"tablist"},lx=["onClick"],nx=["onClick"];ex.render=function(e,t,a,l,n,s){return Is(),Ms("div",tx,[Vs("ul",ax,[(Is(!0),Ms(Ss,null,An(e.tab_list,(t=>(Is(),Ms(Ss,null,[t.active?(Is(),Ms("li",{key:0,onClick:a=>e.change_tab(t),class:K([{active:t.active},"nav-item nav-link"])},te(t.title),11,lx)):(Is(),Ms("a",{key:1,onClick:a=>e.change_tab(t),href:"#",class:"nav-item nav-link"},te(t.title),9,nx))],64)))),256))])])},ex.__file="http_src/vue/tab-list.vue";var sx={__name:"modal-delete-confirm",props:{body:String,title:String},emits:["delete","delete_all"],setup(e,{expose:t,emit:a}){const l=ma(null),n=a;let s=ma(""),i=ma("");const o=e,r=()=>{n("delete"),c()},c=()=>{l.value.close()};t({show:(e,t)=>{null!=e&&null!=t?(s.value=e,i.value=t):(s.value=o.body,i.value=o.title),l.value.show()},close:c}),_n((()=>{}));const u=e=>i18n(e);return(e,t)=>(Is(),Fs(np,{onShowed:t[0]||(t[0]=e=>{}),ref_key:"modal_id",ref:l},{title:vl((()=>[Ks(te(ya(i)),1)])),body:vl((()=>[Ks(te(ya(s)),1)])),footer:vl((()=>[Vs("button",{type:"button",onClick:r,class:"btn btn-danger"},te(u("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-confirm.vue"};const ix="change_asset_table_tab_event";var ox={components:{datatable:kw,"modal-delete-confirm":sx,"tab-list":ex,NoteList:fm},props:{page_csrf:String,url_params:Object,view:String,table_filters:Array},created(){x.set_key_to_url("asset_family",this.$props.url_params.asset_family),this.asset_table_tab=x.get_url_entry("view")||"centrality",x.set_key_to_url("view",this.service_table_tab),this.tab_list.forEach((e=>{this.asset_table_tab==e.id&&(e.active=!0)})),function(e){const t=[];let a=[];e.get_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,url_params),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let l=url_params;l.view="standard";let n={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l),enable_search:!0},s=[];for(let t of e.$props.table_filters||[])t.callbackFunction=(a,n)=>{l.view=e.asset_table_tab,l[t.filterMenuKey]=n.id,x.set_key_to_url(t.filterMenuKey,n.id),a.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l)),NtopUtils.showOverlays(),a.ajax.reload(),NtopUtils.hideOverlays()},s.push(t);a=[{columnName:i18n("actions"),name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(t,a,l){return e.create_action_button_historical_flow_link(t,a,l)}},{columnName:i18n("map_page.client"),name:"client",data:"client",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.server"),name:"server",data:"server",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.asset_family"),name:"family",data:"family",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.last_seen"),name:"last_seen",data:"last_seen",className:"text-center",responsivePriority:2}];let i=ntopng_utility.clone(n);i.table_config={serverSide:!1,order:[[4,"desc"]]},i.columns_config=a,i.table_filters=s,e.config_devices_standard=i,l.view="centrality",n.data_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l),a=[{columnName:i18n("map_page.host"),name:"host",data:"host",className:"text-nowrap",render:(e,t)=>e.label,responsivePriority:1},{columnName:i18n("map_page.asset_total_edges"),name:"total_edges",data:"total_edges",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.asset_in_edges"),name:"in_edges",data:"in_edges",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.asset_out_edges"),name:"out_edges",data:"out_edges",className:"text-center",responsivePriority:2}];let o=ntopng_utility.clone(n);o.table_config={serverSide:!1,order:[[1,"desc"]]},o.columns_config=a,o.table_filters=s,console.log(i),console.log(o),e.config_devices_centrality=o}(this)},mounted(){C.on_custom_event("page_asset_table",ntopng_custom_events.DATATABLE_LOADED,(()=>{x.get_url_entry("host")&&this.hide_dropdowns()})),C.on_custom_event("change_asset_table_tab",ix,(e=>{let t=this.get_active_table();x.set_key_to_url("view",e),t.destroy_table(),this.asset_table_tab=e})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog()))},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null,title_delete:i18n("map_page.delete_assets"),body_delete:i18n("map_page.delete_assets_message"),title_download:i18n("map_page.download"),body_download:i18n("map_page.download_message"),get_url:null,asset_table_tab:null,notes:[i18n("map_page.table_note_asset_map")],tab_list:[{title:i18n("map_page.standard_view"),active:"standard"==view,id:"standard"},{title:i18n("map_page.centrality_view"),active:"centrality"==view,id:"centrality"}]}),methods:{destroy:function(){this.get_active_table().destroy_table()},click_item:function(e){this.tab_list.forEach((e=>e.active=!1)),e.active=!0,C.emit_custom_event(ix,e.id)},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",page:this.url_params.page,csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)}),this.reload_table()}catch(e){this.reload_table()}},create_action_button_historical_flow_link:function(e,t,a){let l={handlerId:"historical_flow_link",onClick:()=>{!function(e){const t=e.client.split("host=")[1].split("&")[0],a=e.server.split("host=")[1].split("&")[0],l=e.epoch_end,n={epoch_begin:e.epoch_begin,epoch_end:l,srv_ip:`${a};eq`,cli_ip:`${t};eq`},s=x.obj_to_url_params(n);x.go_to_url(`${http_prefix}/lua/pro/db_search.lua?${s}`)}(a)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:l,icon:"fas fa-stream",title:i18n("db_explorer.historical_data")}])},hide_dropdowns:function(){$("#network_dropdown").removeClass("d-inline"),$("#vlan_id_dropdown").removeClass("d-inline"),$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},get_active_table:function(){return this.$refs[`table_asset_${this.asset_table_tab}`]},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()}}};const rx={class:"row"},cx={class:"col-md-12 col-lg-12"},ux=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),dx={class:"card"},_x=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),px={class:"card-body"},fx={id:"table_asset"},mx={class:"card-footer"},vx={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},hx=Vs("i",{class:"fas fa-trash"},null,-1),gx=["href"],bx=[Vs("i",{class:"fas fa-download"},null,-1)];ox.render=function(e,t,a,l,n,s){const i=kn("modal-delete-confirm"),o=kn("tab-list"),r=kn("datatable"),c=kn("NoteList");return Is(),Ms("div",rx,[Vs("div",cx,[ux,Vs("div",dx,[_x,Vs("div",px,[Vs("div",fx,[Hs(i,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(o,{ref:"asset_tab_list",id:"asset_tab_list",tab_list:n.tab_list,onClick_item:s.click_item},null,8,["tab_list","onClick_item"]),"standard"==n.asset_table_tab?(Is(),Fs(r,{key:0,ref:"table_asset_standard",table_buttons:n.config_devices_standard.table_buttons,columns_config:n.config_devices_standard.columns_config,data_url:n.config_devices_standard.data_url,enable_search:n.config_devices_standard.enable_search,filter_buttons:n.config_devices_standard.table_filters},{default:vl((()=>[Ks(' :table_config="config_devices_standard.table_config"> ')])),_:1},8,["table_buttons","columns_config","data_url","enable_search","filter_buttons"])):Ys("v-if",!0),"centrality"==n.asset_table_tab?(Is(),Fs(r,{key:1,ref:"table_asset_centrality",table_buttons:n.config_devices_centrality.table_buttons,columns_config:n.config_devices_centrality.columns_config,data_url:n.config_devices_centrality.data_url,enable_search:n.config_devices_centrality.enable_search,filter_buttons:n.config_devices_centrality.table_filters},{default:vl((()=>[Ks(' :table_config="config_devices_centrality.table_config"> ')])),_:1},8,["table_buttons","columns_config","data_url","enable_search","filter_buttons"])):Ys("v-if",!0)])]),Vs("div",mx,[Vs("button",vx,[hx,Ks(" "+te(n.i18n("map_page.delete_assets")),1)]),Vs("a",{href:n.get_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"asset_map.json",target:"_blank"},[...bx],8,gx)])]),Hs(c,{note_list:n.notes},null,8,["note_list"])])])},ox.__file="http_src/vue/page-asset-table.vue";var yx={components:{datatable:kw,"modal-delete-confirm":sx,NoteList:fm},props:{page_csrf:String,url_params:Object,view:String,table_filters:Array,is_admin:Boolean},created(){!function(e){const t=[];let a=[],l=0;e.get_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,url_params),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let n=ntopng_utility.clone(url_params);n.view=null;let s={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,n),enable_search:!0},i=[];for(let t of e.$props.table_filters||[])t.callbackFunction=(e,a)=>{n[t.filterMenuKey]=a.id,x.set_key_to_url(t.filterMenuKey,a.id),e.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,n)),NtopUtils.showOverlays(),e.ajax.reload(),NtopUtils.hideOverlays()},i.push(t);a=[{columnName:i18n("actions"),name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(t,a,l){return e.create_action_button_historical_flow_link(t,a,l)}},{columnName:i18n("map_page.last_seen"),name:"last_seen",data:"last_seen",className:"text-center text-nowrap",render:(e,t)=>e.value,responsivePriority:2},{columnName:i18n("map_page.client"),name:"client",data:"client",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.server"),name:"server",data:"server",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.port"),name:"port",data:"port",className:"text-center",responsivePriority:4},{columnName:i18n("map_page.protocol"),name:"l7proto",data:"protocol",className:"text-nowrap",responsivePriority:3},{columnName:i18n("map_page.first_seen"),name:"first_seen",data:"first_seen",visible:!1,responsivePriority:3},{columnName:i18n("duration"),name:"duration",data:"duration",className:"text-center text-nowrap",responsivePriority:3,orderable:!0},{columnName:i18n("map_page.observations"),name:"observations",data:"observations",className:"text-center",responsivePriority:4},{columnName:i18n("map_page.frequency"),name:"frequency",data:"frequency",className:"text-center",orderable:!0,responsivePriority:4,render:(e,t,a)=>"sort"==t||"type"==t?e:e+" sec"}],l=8;let o={serverSide:!0,order:[[l,"desc"]]},r=ntopng_utility.clone(s);r.table_buttons=s.table_buttons,r.data_url=`${r.data_url}`,r.columns_config=a,r.table_filters=i,r.table_config=ntopng_utility.clone(o),e.config_devices_standard=r}(this)},mounted(){$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),ntopng_events_manager.on_custom_event("page_periodicity_table",ntopng_custom_events.DATATABLE_LOADED,(()=>{x.get_url_entry("host")&&this.hide_dropdowns()}))},data:()=>({i18n:e=>i18n(e),base_url:`${http_prefix}/lua/pro/enterprise/get_map.lua`,config_devices_standard:null,config_devices_centrality:null,title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_download:i18n("map_page.download"),body_download:i18n("map_page.download_message"),notes:[i18n("map_page.table_note_periodicity_map")],get_url:null}),methods:{hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden"),$("#network_dropdown").removeClass("d-inline"),$("#vlan_id_dropdown").removeClass("d-inline")},create_action_button_historical_flow_link:function(e,t,a){let l={handlerId:"historical_flow_link",onClick:()=>{!function(e){const t=e.client.split("host=")[1].split(">")[0],a=t.substring(0,t.length-1),l=e.server.split("host=")[1].split(">")[0],n=l.substring(0,l.length-1),s=e.port,i=e.first_seen,o=e.last_seen.epoch_end,r={epoch_begin:i,epoch_end:o,srv_ip:`${n};eq`,cli_ip:`${a};eq`,srv_port:`${s};eq`},c=x.obj_to_url_params(r),u=`${http_prefix}/lua/pro/db_search.lua?${c}`;x.go_to_url(u)}(a)}},n={handlerId:"live_flow_link",onClick:()=>{!function(e){const t=e.client.split("host=")[1].split(">")[0],a=t.substring(0,t.length-1),l=e.server.split("host=")[1].split(">")[0],n=l.substring(0,l.length-1),s=e.port,i={server:`${n}`,client:`${a}`,port:`${s}`},o=x.obj_to_url_params(i),r=`${http_prefix}/lua/flows_stats.lua?${o}`;x.go_to_url(r)}(a)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:l,icon:"fas fa-stream",title:i18n("db_explorer.historical_data")},{class:"pointer",handler:n,icon:"fas fa-stream",title:i18n("live_flows")}])},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",page:this.url_params.page,csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)}),this.reload_table()}catch(e){this.reload_table()}},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},destroy:function(){this.get_active_table().destroy_table()},get_active_table:function(){return this.$refs.table_periodicity},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()}}};const wx={class:"row"},xx={class:"col-md-12 col-lg-12"},kx=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),$x={class:"card"},Sx=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Nx={class:"card-body"},Cx={id:"periodicity-table"},Ex={class:"card-footer"},Ax={key:0,type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Tx=Vs("i",{class:"fas fa-trash"},null,-1),Ix=["href"],Ox=[Vs("i",{class:"fas fa-download"},null,-1)];yx.render=function(e,t,a,l,n,s){const i=kn("modal-delete-confirm"),o=kn("datatable"),r=kn("NoteList");return Is(),Ms("div",wx,[Vs("div",xx,[kx,Vs("div",$x,[Sx,Vs("div",Nx,[Vs("div",Cx,[Hs(i,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(o,{ref:"table_periodicity",table_buttons:n.config_devices_standard.table_buttons,columns_config:n.config_devices_standard.columns_config,data_url:n.config_devices_standard.data_url,enable_search:n.config_devices_standard.enable_search,filter_buttons:n.config_devices_standard.table_filters,table_config:n.config_devices_standard.table_config,base_url:n.base_url,base_params:a.url_params},null,8,["table_buttons","columns_config","data_url","enable_search","filter_buttons","table_config","base_url","base_params"])])]),Vs("div",Ex,[a.is_admin?(Is(),Ms("button",Ax,[Tx,Ks(" "+te(n.i18n("map_page.delete_services")),1)])):Ys("v-if",!0),Vs("a",{href:n.get_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"periodicity_map.json",target:"_blank"},[...Ox],8,Ix)])]),Hs(r,{note_list:n.notes},null,8,["note_list"])])])},yx.__file="http_src/vue/page-periodicity-table.vue";const Px={autoResize:!0,nodes:{shape:"dot",scaling:{min:10,max:30,label:{enabled:!0,min:8,max:30,drawThreshold:12}},font:{color:"#212529"},shadow:!1},edges:{width:.2,color:{inherit:"from"},smooth:{type:"continuous",roundness:0},arrows:{to:{enabled:!0,scaleFactor:.3}},arrowStrikethrough:!1,scaling:{min:1,max:5}},layout:{improvedLayout:!1},interaction:{hideEdgesOnDrag:!1,hideEdgesOnZoom:!0,hover:!1,tooltipDelay:0},physics:{enabled:!0,solver:"forceAtlas2Based",stabilization:{iterations:300,enabled:!0},forceAtlas2Based:{centralGravity:.01,springLength:100}},groups:{unknown:{shape:"dot"},printer:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},video:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},workstation:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},laptop:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},tablet:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},phone:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},tv:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},networking:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},wifi:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},nas:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},multimedia:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},iot:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}}}},Ux=function(e,t,a,l){$.post(`${http_prefix}/lua/pro/enterprise/switch_service_state.lua`,{service_id:e,service_status:t,csrf:l}).then((e=>{e.success&&a&&a()}))},jx=function(){return Px},Mx="change_service_table_tab_event";var Fx={components:{datatable:kw,"modal-delete-confirm":sx,"tab-list":ex,NoteList:fm},props:{page_csrf:String,url_params:Object,view:String,table_filters:Array,is_admin:Boolean,service_acceptance:Array},created(){this.service_table_tab=x.get_url_entry("view")||"standard",x.set_key_to_url("view",this.service_table_tab),this.tab_list.forEach((e=>{this.service_table_tab==e.id&&(e.active=!0)})),function(e){const t=[];let a=[],l=0;e.get_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,url_params),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let n=url_params;n.view="standard";let s={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,n),enable_search:!0},i=[];for(let t of e.$props.table_filters||[])t.callbackFunction=(a,l)=>{n.view=e.service_table_tab,n[t.filterMenuKey]=l.id,x.set_key_to_url(t.filterMenuKey,l.id),a.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,n)),NtopUtils.showOverlays(),a.ajax.reload(),NtopUtils.hideOverlays()},i.push(t);a=[{columnName:i18n("actions"),name:"actions",data:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(t,a,l){return e.create_action_button_historical_flow_link(t,a,l)},createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("map_page.last_seen"),name:"last_seen",data:"last_seen",className:"text-center text-nowrap",render:(e,t)=>e.value,responsivePriority:2},{columnName:i18n("map_page.client"),name:"client",data:"client",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.server"),name:"server",data:"server",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.port"),name:"port",data:"port",className:"text-center",responsivePriority:4},{columnName:i18n("map_page.protocol"),name:"l7proto",data:"protocol",className:"text-nowrap",responsivePriority:3},{columnName:i18n("map_page.first_seen"),name:"first_seen",data:"first_seen",visible:!1,responsivePriority:3},{columnName:i18n("map_page.num_uses"),name:"num_uses",data:"num_uses",className:"text-center text-nowrap",responsivePriority:4},{columnName:i18n("map_page.info"),name:"info",data:"info",responsivePriority:5}],l=7,e.is_admin&&a.push({columnName:i18n("map_page.status"),name:"service_acceptance",data:"service_acceptance",className:"text-center",orderable:!1,responsivePriority:1,render:(t,a,l)=>e.create_action_buttons(t,a,l)});let o={serverSide:!0,order:[[l,"desc"]]},r=ntopng_utility.clone(s);r.table_buttons=s.table_buttons,r.data_url=`${r.data_url}`,r.columns_config=a,r.table_filters=i,r.table_config=ntopng_utility.clone(o),e.config_devices_standard=r,n.view="centrality",s.data_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,n),a=[{columnName:i18n("map_page.host"),name:"host",data:"host",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.total_edges"),name:"total_edges",data:"total_edges",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.rank"),name:"rank",data:"rank",className:"text-center",responsivePriority:2},{columnName:i18n("map_page.in_edges"),name:"in_edges",data:"in_edges",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.out_edges"),name:"out_edges",data:"out_edges",className:"text-center",responsivePriority:2}],l=2,o.order=[[l,"desc"]],r=ntopng_utility.clone(s),r.table_buttons=s.table_buttons,r.data_url=`${r.data_url}`,r.columns_config=a,r.table_filters=i,r.table_config=ntopng_utility.clone(o),e.config_devices_centrality=r}(this)},mounted(){C.on_custom_event("page_service_table",ntopng_custom_events.DATATABLE_LOADED,(()=>{x.get_url_entry("host")&&this.hide_dropdowns()})),C.on_custom_event("change_service_table_tab",Mx,(e=>{let t=this.get_active_table();x.set_key_to_url("view",e),t.delete_button_handlers(this.service_table_tab),t.destroy_table(),this.service_table_tab=e})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog()))},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null,title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),get_url:null,service_table_tab:null,notes:[i18n("map_page.table_note_service_map")],tab_list:[{title:i18n("map_page.standard_view"),active:"standard"==view,id:"standard"},{title:i18n("map_page.centrality_view"),active:"centrality"==view,id:"centrality"}]}),methods:{hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden"),$("#network_dropdown").removeClass("d-inline"),$("#vlan_id_dropdown").removeClass("d-inline")},destroy:function(){let e=this.get_active_table();e.delete_button_handlers(this.service_table_tab),e.destroy_table()},click_item:function(e){this.tab_list.forEach((e=>e.active=!1)),e.active=!0,C.emit_custom_event(Mx,e.id)},create_action_buttons:function(e,t,a){const l=this.reload_table,n=this.$props.page_csrf,s={onClick:()=>{Ux(a.hash_id,this.$props.service_acceptance[0].id,l,n)}},i={onClick:()=>{Ux(a.hash_id,this.$props.service_acceptance[1].id,l,n)}},o={onClick:()=>{Ux(a.hash_id,this.$props.service_acceptance[2].id,l,n)}};if("display"!==t)return e;const r=a.acceptance,c={class:"dropdown-item",href:"#",title:this.$props.service_acceptance[0].label,handler:s},u={class:"dropdown-item",href:"#",title:this.$props.service_acceptance[1].label,handler:i},d={class:"dropdown-item disabled",href:"#",title:this.$props.service_acceptance[2].label,handler:o};switch(r){case 0:c.class="dropdown-item active";break;case 1:u.class="dropdown-item active";break;case 2:d.class="dropdown-item active disabled"}return DataTableUtils.createActionButtons([d,c,u])},create_action_button_historical_flow_link:function(e,t,a){let l={handlerId:"historical_flow_link",onClick:()=>{!function(e){const t=e.client.split("host=")[1].split(">")[0],a=t.substring(0,t.length-1),l=e.server.split("host=")[1].split(">")[0],n=l.substring(0,l.length-1),s=e.port,i=e.first_seen,o=e.last_seen.epoch_end,r={epoch_begin:i,epoch_end:o,srv_ip:`${n};eq`,cli_ip:`${a};eq`,srv_port:`${s};eq`},c=x.obj_to_url_params(r),u=`${http_prefix}/lua/pro/db_search.lua?${c}`;x.go_to_url(u)}(a)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:l,icon:"fas fa-stream",title:i18n("db_explorer.historical_data")}])},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",page:this.url_params.page,csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)}),this.reload_table()}catch(e){this.reload_table()}},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},get_active_table:function(){return this.$refs[`table_service_${this.service_table_tab}`]},switch_to_standard:function(){this.url_params.view="standard",document.location.href=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/network_maps.lua`,url_params)},switch_to_centrality:function(){this.url_params.view="centrality",document.location.href=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/network_maps.lua`,url_params)},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()}}};const Lx={class:"row"},Rx={class:"col-md-12 col-lg-12"},Dx=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),zx={class:"card"},qx=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Bx={class:"card-body"},Vx={id:"table_service"},Hx={class:"card-footer"},Gx={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Wx=Vs("i",{class:"fas fa-trash"},null,-1),Kx=["href"],Jx=[Vs("i",{class:"fas fa-download"},null,-1)];Fx.render=function(e,t,a,l,n,s){const i=kn("modal-delete-confirm"),o=kn("tab-list"),r=kn("datatable"),c=kn("NoteList");return Is(),Ms("div",Lx,[Vs("div",Rx,[Dx,Vs("div",zx,[qx,Vs("div",Bx,[Vs("div",Vx,[Hs(i,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(o,{ref:"service_tab_list",id:"service_tab_list",tab_list:n.tab_list,onClick_item:s.click_item},null,8,["tab_list","onClick_item"]),"standard"==n.service_table_tab?(Is(),Fs(r,{key:0,ref:"table_service_standard",table_buttons:n.config_devices_standard.table_buttons,columns_config:n.config_devices_standard.columns_config,data_url:n.config_devices_standard.data_url,enable_search:n.config_devices_standard.enable_search,filter_buttons:n.config_devices_standard.table_filters,table_config:n.config_devices_standard.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","filter_buttons","table_config"])):Ys("v-if",!0),"centrality"==n.service_table_tab?(Is(),Fs(r,{key:1,ref:"table_service_centrality",table_buttons:n.config_devices_centrality.table_buttons,columns_config:n.config_devices_centrality.columns_config,data_url:n.config_devices_centrality.data_url,enable_search:n.config_devices_centrality.enable_search,filter_buttons:n.config_devices_centrality.table_filters,table_config:n.config_devices_centrality.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","filter_buttons","table_config"])):Ys("v-if",!0)])]),Vs("div",Hx,[Ys('\n        {% if is_admin then %}\n          <form class="d-inline" id=\'switch-state-form\'>\n            <div class="form-group mb-3 d-inline">\n              <label>{* i18n("map_page.set_state", {label = "<span class=\'count\'></span>"}) *}</label>\n              <select name="new_state" class="form-select d-inline" style="width: 16rem" {{ ternary(map.services_num == 0, "disabled=\'disabled\'", "") }}>\n              {% for _, status in pairsByField(map.filters.service_status_filters, label, asc_insensitive) do %}\n                <option value="{{ status.id }}">{* status.label *}</option>\n              {% end %}\n              </select>\n              <button class="btn btn-secondary d-inline" class="btn-switch-state" {{ ternary(map.services_num == 0, "disabled=\'disabled\'", "") }}>\n                <i class="fas fa-random"></i> {{ i18n("set") }}\n              </button>\n            </div>\n          </form>\n        {% end %}\n    '),Vs("button",Gx,[Wx,Ks(" "+te(n.i18n("map_page.delete_services")),1)]),Vs("a",{href:n.get_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"service_map.json",target:"_blank"},[...Jx],8,Kx)])]),Hs(c,{note_list:n.notes},null,8,["note_list"])])])},Fx.__file="http_src/vue/page-service-table.vue";const Yx={key:0,class:"alert alert-info"},Zx=["id"];var Xx={__name:"network-map",props:{empty_message:String,event_listeners:Object,page_csrf:String,url:String,url_params:Object,map_id:String},setup(e,{expose:t}){const a=e,l={ifid:a.url_params.ifid,action:"load_graph",map:a.url_params.map_id};let n={},s={},i=!1,o=null;const r=ma(!1),c=ma(!0),u=ma(!1),d=ma({}),_=ma(null),p=ma(null),f=ma(null);_n((async()=>{const e=document.getElementById(a.map_id);h(),await m(),p.value=jx(),o=new vis.Network(e,_.value,p.value),g()})),mn((()=>{1!=u.value&&b()}));const m=async()=>{d.value=a.url_params;const e=NtopUtils.buildURL(a.url,d.value);await $.get(e,l,(async function(e){const{nodes:t,edges:a,max_entry_reached:l}=e.rsp;r.value=l,n=new vis.DataSet(t.map((e=>(e.title=(e=>{const t=document.createElement("div");return t.innerHTML=`<b>${e.label}</b><br><br>${i18n("db_explorer.host_data")}: ${e.id}`,t})(e),e)))),s=new vis.DataSet(a),_.value={nodes:n,edges:s},f.value=n.get({returnType:"Object"}),v()}))},v=()=>{0==_.value?.nodes.length&&0==_.value?.edges.length?c.value=!0:c.value=!1},h=()=>{const e=NtopUtils.loadElementScale($(".resizable-y-container"));if(null!=e)$(".resizable-y-container").width(e.width),$(".resizable-y-container").height(e.height),$(".resizable-y-container").on("mouseup",(function(){const e={width:$(".resizable-y-container").width(),height:$(".resizable-y-container").height()};NtopUtils.saveElementScale($(this),e)}));else{const e={width:$(".resizable-y-container").width(),height:$(".resizable-y-container").height()};NtopUtils.saveElementScale($(this),e)}};const g=()=>{o.on("stabilizationIterationsDone",(function(){o.setOptions({physics:!1})})),o.on("click",(function(e){!function(e){if(e.nodes.length>0){var t,a;i=!0;var l=e.nodes[0];for(var s in f.value)f.value[s].old_color||(f.value[s].old_color=f.value[s].color),f.value[s].old_icon_color||(f.value[s].old_icon_color=f.value[s].icon),f.value[s].color="#c8c8c8",f.value[s].icon={color:"#c8c8c8"},void 0===f.value[s].hiddenLabel&&(f.value[s].hiddenLabel=f.value[s].label,f.value[s].label=void 0);var r=o.getConnectedNodes(l),c=[];for(t=1;t<2;t++)for(a=0;a<r.length;a++)c=c.concat(o.getConnectedNodes(r[a]));for(t=0;t<r.length;t++)f.value[r[t]].color=f.value[r[t]].old_color,f.value[r[t]].icon=f.value[r[t]].old_icon_color,void 0!==f.value[r[t]].hiddenLabel&&(f.value[r[t]].label=f.value[r[t]].hiddenLabel,f.value[r[t]].hiddenLabel=void 0);f.value[l].color=f.value[l].old_color,f.value[l].icon=f.value[l].old_icon_color,void 0!==f.value[l].hiddenLabel&&(f.value[l].label=f.value[l].hiddenLabel,f.value[l].hiddenLabel=void 0)}else if(!0===i){for(var s in f.value)f.value[s].color=f.value[s].old_color,f.value[s].icon=f.value[s].old_icon_color,void 0!==f.value[s].hiddenLabel&&(f.value[s].label=f.value[s].hiddenLabel,f.value[s].hiddenLabel=void 0);i=!1}var u=[];for(s in f.value)f.value.hasOwnProperty(s)&&u.push(f.value[s]);n.update(u)}(e)})),o.on("doubleClick",(function(e){(async e=>{const t=e.id.split("@");d.value.host=t[0],d.value.vlan_id=t[1],x.set_key_to_url("host",d.value.host),x.set_key_to_url("vlan_id",d.value.vlan_id),C.emit_custom_event(ntopng_custom_events.CHANGE_PAGE_TITLE,e),await y()})(n.get(e.nodes[0]))})),o.on("afterDrawing",(function(e){C.emit_custom_event(ntopng_custom_events.VIS_DATA_LOADED)}));for(const e in a.event_listeners||{})o.on(e,a.event_listeners[e])},b=()=>{null!=o&&o.destroy(!0),u.value=!0},y=async()=>{await m(),null!=o&&(o.setOptions({physics:p.value.physics}),o.setData(_.value))};return t({reload:y,destroy:b,is_max_entry_reached:()=>r.value,autolayout:()=>{null!=o?o instanceof vis.Network?o.stabilize():console.error("Not a vis.Network instance!"):console.error("The network is undefined!")},update_url_params:e=>{d.value=e}}),(t,a)=>(Is(),Ms(Ss,null,[c.value?(Is(),Ms("div",Yx,te(e.empty_message),1)):Ys("v-if",!0),Vs("div",{class:"d-flex justify-content-center align-items-center resizable-y-container",style:{width:"100%",height:"60vh"},id:e.map_id},null,8,Zx)],64))},__file:"http_src/vue/network-map.vue"},Qx={__name:"modal-autolayout-confirm",props:{body:String,title:String},emits:["autolayout"],setup(e,{expose:t,emit:a}){const l=ma(null),n=a,s=()=>{n("autolayout"),i()},i=()=>{l.value.close()};t({show:()=>{l.value.show()},close:i}),_n((()=>{}));const o=e=>i18n(e);return(t,a)=>(Is(),Fs(np,{onShowed:a[0]||(a[0]=e=>{}),ref_key:"modal_id",ref:l},{title:vl((()=>[Ks(te(e.title),1)])),body:vl((()=>[Ks(te(e.body),1)])),footer:vl((()=>[Vs("button",{type:"button",onClick:s,class:"btn btn-primary"},te(o("confirm")),1)])),_:1},512))},__file:"http_src/vue/modal-autolayout-confirm.vue"};const ek="change_filter_event";var tk={components:{"network-map":Xx,"modal-delete-confirm":sx,"modal-autolayout-confirm":Qx,"select-search":l_,NoteList:fm},props:{page_csrf:String,ifid:Number,url_params:Object,map_id:String,is_admin:Boolean,all_filter_list:Object},created(){!function(e){for(const t in e.$props.all_filter_list){e.filter_list.push(e.$props.all_filter_list[t]);const a=ntopng_url_manager.get_url_entry(t);for(let[l,n]of Object.entries(e.$props.all_filter_list[t]))n.filter_name=t,a?n.id==a&&e.active_filter_list.push(n):1==n.currently_active&&e.active_filter_list.push(n)}e.get_url=`${http_prefix}/lua/pro/rest/v2/get/interface/map/data.lua`,e.download_url=NtopUtils.buildURL(e.get_url,e.$props.url_params),e.event_listeners={}}(this)},mounted(){const e=this.max_entry_reached,t=this.reload_map;this.$props.url_params.host&&""!=this.$props.url_params.host&&this.hide_dropdowns(),C.on_custom_event("page_service_map",ntopng_custom_events.CHANGE_PAGE_TITLE,(e=>{this.hide_dropdowns()})),C.on_custom_event("change_filter_event",ek,(e=>{this.active_filter_list.forEach(((t,a)=>{t.filter_name==e.filter_name&&(this.active_filter_list[a]=e)})),ntopng_url_manager.set_key_to_url(e.filter_name,e.key),this.url_params[e.filter_name]=e.key,this.update_and_reload_map()})),C.on_custom_event(this.get_map(),ntopng_custom_events.VIS_DATA_LOADED,(t=>{e()?$("#max-entries-reached").removeAttr("hidden"):$("#max-entries-reached").attr("hidden","hidden"),NtopUtils.hideOverlays()}));let a=ntopng_url_manager.get_url_entries();for(const[e,t]of a)this.url_params[e]=t;$("#reload-graph").click((function(e){t()})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),$("#autolayout").click((()=>this.show_autolayout_dialog()))},data:()=>({i18n:e=>i18n(e),container:null,update_view_state_id:null,get_url:null,download_url:null,filter_list:[],active_filter_list:[],event_listeners:{},title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_autolayout:i18n("map_page.autolayout_services"),body_autolayout:i18n("map_page.autolayout_services_message"),no_services_message:i18n("map_page.no_services"),max_entry_title:i18n("max_entries_reached"),notes:[i18n("map_page.graph_note_service_map")]}),methods:{destroy:function(){this.get_map().destroy()},click_item:function(e){C.emit_custom_event(ek,e)},get_map:function(){return this.$refs.service_map},max_entry_reached:function(){return this.get_map().is_max_entry_reached()},reload_map:async function(){NtopUtils.showOverlays();let e=this.get_map();await e.reload()},update_and_reload_map:async function(){let e=this.get_map();NtopUtils.showOverlays(),e.update_url_params(this.url_params),await e.reload()},autolayout:function(){this.get_map().autolayout()},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_autolayout_dialog:function(){this.$refs.modal_autolayout.show()},hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)})}finally{this.reload_map()}}}};const ak={class:"row"},lk={class:"col-md-12 col-lg-12"},nk={class:"card card-shadow"},sk=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),ik={class:"card-body"},ok={id:"table_service"},rk={class:"d-flex align-items-center justify-content-end mb-2"},ck=["title"],uk=[Vs("i",{class:"text-danger fa-solid fa-triangle-exclamation"},null,-1)],dk={class:"d-flex ms-auto"},_k={class:"m-1"},pk=Vs("button",{type:"button",id:"reload-graph",class:"btn btn-link btn-reload-graph"},[Vs("i",{class:"fas fa-sync"})],-1),fk=Vs("button",{type:"button",id:"autolayout",class:"btn btn-link btn-stabilize"},[Vs("i",{class:"fas fa-magic"})],-1),mk={class:"card-footer"},vk={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},hk=Vs("i",{class:"fas fa-trash"},null,-1),gk=["href"],bk=[Vs("i",{class:"fas fa-download"},null,-1)];tk.render=function(e,t,a,l,n,s){const i=kn("select-search"),o=kn("modal-delete-confirm"),r=kn("modal-autolayout-confirm"),c=kn("network-map"),u=kn("NoteList");return Is(),Ms("div",ak,[Vs("div",lk,[Vs("div",nk,[sk,Vs("div",ik,[Vs("div",ok,[Vs("div",rk,[Vs("button",{id:"max-entries-reached",type:"button",class:"btn btn-link",title:n.max_entry_title,disabled:"",hidden:""},[...uk],8,ck),Vs("div",dk,[(Is(!0),Ms(Ss,null,An(n.filter_list,((e,t)=>(Is(),Ms("div",_k,[Hs(i,{selected_option:n.active_filter_list[t],"onUpdate:selected_option":e=>n.active_filter_list[t]=e,options:n.filter_list[t],onSelect_option:s.click_item},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256))]),pk,fk]),Hs(o,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(r,{ref:"modal_autolayout",title:n.title_autolayout,body:n.body_autolayout,onAutolayout:s.reload_map},null,8,["title","body","onAutolayout"]),Hs(c,{ref:"service_map",empty_message:n.no_services_message,event_listeners:n.event_listeners,page_csrf:a.page_csrf,url:n.get_url,url_params:a.url_params,map_id:a.map_id},null,8,["empty_message","event_listeners","page_csrf","url","url_params","map_id"])])]),Vs("div",mk,[Vs("button",vk,[hk,Ks(" "+te(n.i18n("map_page.delete_services")),1)]),Vs("a",{href:n.download_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"service_map.json",target:"_blank"},[...bk],8,gk)])]),Hs(u,{note_list:n.notes},null,8,["note_list"])])])},tk.__file="http_src/vue/page-service-map.vue";const yk="change_filter_event";var wk={components:{"network-map":Xx,"modal-delete-confirm":sx,"modal-autolayout-confirm":Qx,"select-search":l_,NoteList:fm},props:{page_csrf:String,ifid:Number,url_params:Object,map_id:String,is_admin:Boolean,all_filter_list:Object},created(){!function(e){for(const t in e.$props.all_filter_list){e.filter_list.push(e.$props.all_filter_list[t]);const a=ntopng_url_manager.get_url_entry(t);for(let[l,n]of Object.entries(e.$props.all_filter_list[t]))n.filter_name=t,a?n.id==a&&e.active_filter_list.push(n):1==n.currently_active&&e.active_filter_list.push(n)}e.get_url=`${http_prefix}/lua/pro/rest/v2/get/interface/map/data.lua`,e.download_url=NtopUtils.buildURL(e.get_url,e.updated_url_params),e.event_listeners={}}(this)},mounted(){this.updated_url_params=this.$props.url_params;let e=ntopng_url_manager.get_url_entries();for(const[t,a]of e)this.updated_url_params[t]=a;const t=this.max_entry_reached,a=this.reload_map;this.update_and_reload_map(),this.$props.url_params.host&&""!=this.$props.url_params.host&&this.hide_dropdowns(),C.on_custom_event("page_periodicity_map",ntopng_custom_events.CHANGE_PAGE_TITLE,(e=>{this.hide_dropdowns()})),C.on_custom_event("change_filter_event",yk,(e=>{this.active_filter_list.forEach(((t,a)=>{t.filter_name==e.filter_name&&(this.active_filter_list[a]=e)})),ntopng_url_manager.set_key_to_url(e.filter_name,e.key),this.url_params[e.filter_name]=e.key,this.update_and_reload_map()})),C.on_custom_event(this.get_map(),ntopng_custom_events.VIS_DATA_LOADED,(e=>{t()?$("#max-entries-reached").removeAttr("hidden"):$("#max-entries-reached").attr("hidden","hidden"),NtopUtils.hideOverlays()})),$("#reload-graph").click((function(e){a()})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),$("#autolayout").click((()=>this.show_autolayout_dialog()))},data:()=>({i18n:e=>i18n(e),container:null,update_view_state_id:null,get_url:null,download_url:null,updated_url_params:{},filter_list:[],active_filter_list:[],event_listeners:{},title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_autolayout:i18n("map_page.autolayout_services"),body_autolayout:i18n("map_page.autolayout_services_message"),no_services_message:i18n("map_page.no_services"),max_entry_title:i18n("max_entries_reached"),notes:[i18n("map_page.graph_note_periodicity_map")]}),methods:{destroy:function(){this.get_map().destroy()},click_item:function(e){C.emit_custom_event(yk,e)},get_map:function(){return this.$refs.periodicity_map},max_entry_reached:function(){return this.get_map().is_max_entry_reached()},reload_map:async function(){NtopUtils.showOverlays();let e=this.get_map();await e.reload()},hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},update_and_reload_map:async function(){let e=this.get_map();NtopUtils.showOverlays(),e.update_url_params(this.updated_url_params),await e.reload()},autolayout:function(){this.get_map().autolayout()},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_autolayout_dialog:function(){this.$refs.modal_autolayout.show()},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.updated_url_params.ifid,action:"reset",csrf:this.$props.page_csrf,map:this.updated_url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)})}finally{this.reload_map()}}}};const xk={class:"row"},kk={class:"col-md-12 col-lg-12"},$k={class:"card card-shadow"},Sk=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Nk={class:"card-body"},Ck={id:"table_periodicity"},Ek={class:"d-flex align-items-center justify-content-end mb-2"},Ak=["title"],Tk=[Vs("i",{class:"text-danger fa-solid fa-triangle-exclamation"},null,-1)],Ik={class:"d-flex ms-auto"},Ok={class:"m-1"},Pk=Vs("button",{type:"button",id:"reload-graph",class:"btn btn-link btn-reload-graph"},[Vs("i",{class:"fas fa-sync"})],-1),Uk=Vs("button",{type:"button",id:"autolayout",class:"btn btn-link btn-stabilize"},[Vs("i",{class:"fas fa-magic"})],-1),jk={class:"card-footer"},Mk={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Fk=Vs("i",{class:"fas fa-trash"},null,-1),Lk=["href"],Rk=[Vs("i",{class:"fas fa-download"},null,-1)];wk.render=function(e,t,a,l,n,s){const i=kn("select-search"),o=kn("modal-delete-confirm"),r=kn("modal-autolayout-confirm"),c=kn("network-map"),u=kn("NoteList");return Is(),Ms("div",xk,[Vs("div",kk,[Vs("div",$k,[Sk,Vs("div",Nk,[Vs("div",Ck,[Vs("div",Ek,[Vs("button",{id:"max-entries-reached",type:"button",class:"btn btn-link",title:n.max_entry_title,disabled:"",hidden:""},[...Tk],8,Ak),Vs("div",Ik,[(Is(!0),Ms(Ss,null,An(n.filter_list,((e,t)=>(Is(),Ms("div",Ok,[Hs(i,{selected_option:n.active_filter_list[t],"onUpdate:selected_option":e=>n.active_filter_list[t]=e,options:n.filter_list[t],onSelect_option:s.click_item},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256))]),Pk,Uk]),Hs(o,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(r,{ref:"modal_autolayout",title:n.title_autolayout,body:n.body_autolayout,onAutolayout:s.reload_map},null,8,["title","body","onAutolayout"]),Hs(c,{ref:"periodicity_map",empty_message:n.no_services_message,event_listeners:n.event_listeners,page_csrf:a.page_csrf,url:n.get_url,url_params:a.url_params,map_id:a.map_id},null,8,["empty_message","event_listeners","page_csrf","url","url_params","map_id"])])]),Vs("div",jk,[Vs("button",Mk,[Fk,Ks(" "+te(n.i18n("map_page.delete_services")),1)]),Vs("a",{href:n.download_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"periodicity_map.json",target:"_blank"},[...Rk],8,Lk)])]),Hs(u,{note_list:n.notes},null,8,["note_list"])])])},wk.__file="http_src/vue/page-periodicity-map.vue";const Dk="change_filter_event";var zk={components:{"network-map":Xx,"modal-delete-confirm":sx,"modal-autolayout-confirm":Qx,"select-search":l_,NoteList:fm},props:{page_csrf:String,ifid:Number,url_params:Object,map_id:String,is_admin:Boolean,all_filter_list:Object},created(){!function(e){for(const t in e.$props.all_filter_list){e.filter_list.push(e.$props.all_filter_list[t]);const a=x.get_url_entry(t);for(let[l,n]of Object.entries(e.$props.all_filter_list[t]))n.filter_name=t,a?n.id==a&&e.active_filter_list.push(n):1==n.currently_active&&e.active_filter_list.push(n)}e.get_url=`${http_prefix}/lua/pro/rest/v2/get/interface/map/data.lua`,e.download_url=NtopUtils.buildURL(e.get_url,e.$props.url_params),e.event_listeners={}}(this)},mounted(){const e=this.max_entry_reached,t=this.reload_map;this.$props.url_params.host&&""!=this.$props.url_params.host&&this.hide_dropdowns(),C.on_custom_event("page_service_map",ntopng_custom_events.CHANGE_PAGE_TITLE,(e=>{this.hide_dropdowns()})),C.on_custom_event("change_filter_event",Dk,(e=>{this.active_filter_list.forEach(((t,a)=>{t.filter_name==e.filter_name&&(this.active_filter_list[a]=e)})),x.set_key_to_url(e.filter_name,e.key),this.url_params[e.filter_name]=e.key,this.update_and_reload_map()})),C.on_custom_event(this.get_map(),ntopng_custom_events.VIS_DATA_LOADED,(t=>{e()?$("#max-entries-reached").removeAttr("hidden"):$("#max-entries-reached").attr("hidden","hidden"),NtopUtils.hideOverlays()}));let a=x.get_url_entries();for(const[e,t]of a)this.url_params[e]=t;$("#reload-graph").click((function(e){t()})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),$("#autolayout").click((()=>this.show_autolayout_dialog()))},data:()=>({i18n:e=>i18n(e),container:null,update_view_state_id:null,get_url:null,download_url:null,filter_list:[],active_filter_list:[],event_listeners:{},title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_autolayout:i18n("map_page.autolayout_services"),body_autolayout:i18n("map_page.autolayout_services_message"),no_services_message:i18n("map_page.no_services"),max_entry_title:i18n("max_entries_reached"),notes:[i18n("map_page.graph_note_asset_map")]}),methods:{destroy:function(){this.get_map().destroy()},click_item:function(e){C.emit_custom_event(Dk,e)},get_map:function(){return this.$refs.asset_map},hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},max_entry_reached:function(){return this.get_map().is_max_entry_reached()},reload_map:async function(){NtopUtils.showOverlays();let e=this.get_map();await e.reload()},update_and_reload_map:async function(){let e=this.get_map();NtopUtils.showOverlays(),e.update_url_params(this.url_params),await e.reload()},autolayout:function(){this.get_map().autolayout()},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_autolayout_dialog:function(){this.$refs.modal_autolayout.show()},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)})}finally{NtopUtils.showOverlays(),this.reload_map()}}}};const qk={class:"row"},Bk={class:"col-md-12 col-lg-12"},Vk={class:"card card-shadow"},Hk=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Gk={class:"card-body"},Wk={id:"table_asset"},Kk={class:"d-flex align-items-center justify-content-end mb-2"},Jk=["title"],Yk=[Vs("i",{class:"text-danger fa-solid fa-triangle-exclamation"},null,-1)],Zk={class:"d-flex ms-auto"},Xk={class:"m-1"},Qk=Vs("button",{type:"button",id:"reload-graph",class:"btn btn-link btn-reload-graph"},[Vs("i",{class:"fas fa-sync"})],-1),e$=Vs("button",{type:"button",id:"autolayout",class:"btn btn-link btn-stabilize"},[Vs("i",{class:"fas fa-magic"})],-1),t$={class:"card-footer"},a$={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},l$=Vs("i",{class:"fas fa-trash"},null,-1),n$=["href"],s$=[Vs("i",{class:"fas fa-download"},null,-1)];zk.render=function(e,t,a,l,n,s){const i=kn("select-search"),o=kn("modal-delete-confirm"),r=kn("modal-autolayout-confirm"),c=kn("network-map"),u=kn("NoteList");return Is(),Ms("div",qk,[Vs("div",Bk,[Vs("div",Vk,[Hk,Vs("div",Gk,[Vs("div",Wk,[Vs("div",Kk,[Vs("button",{id:"max-entries-reached",type:"button",class:"btn btn-link",title:n.max_entry_title,disabled:"",hidden:""},[...Yk],8,Jk),Vs("div",Zk,[(Is(!0),Ms(Ss,null,An(n.filter_list,((e,t)=>(Is(),Ms("div",Xk,[Hs(i,{selected_option:n.active_filter_list[t],"onUpdate:selected_option":e=>n.active_filter_list[t]=e,options:n.filter_list[t],onSelect_option:s.click_item},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256))]),Qk,e$]),Hs(o,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(r,{ref:"modal_autolayout",title:n.title_autolayout,body:n.body_autolayout,onAutolayout:s.reload_map},null,8,["title","body","onAutolayout"]),Hs(c,{ref:"asset_map",empty_message:n.no_services_message,event_listeners:n.event_listeners,page_csrf:a.page_csrf,url:n.get_url,url_params:a.url_params,map_id:a.map_id},null,8,["empty_message","event_listeners","page_csrf","url","url_params","map_id"])])]),Vs("div",t$,[Vs("button",a$,[l$,Ks(" "+te(n.i18n("map_page.delete_services")),1)]),Vs("a",{href:n.download_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"asset_map.json",target:"_blank"},[...s$],8,n$)])]),Hs(u,{note_list:n.notes},null,8,["note_list"])])])},zk.__file="http_src/vue/page-asset-map.vue";const i$={class:"form-group mb-3 row"},o$={class:"col-form-label col-sm-4"},r$={class:"col-sm-7"},c$=Vs("div",{class:"invalid-feedback"},null,-1),u$={class:"form-group mb-3 row"},d$={class:"col-form-label col-sm-4 pt-2"},_$={class:"form-switch col-sm-7 pt-2 ps-3"},p$={class:"col-form-label"};var f$={__name:"modal-add-device-exclusion",props:{body:String,title:String,footer:String,list_notes:String},emits:["add"],setup(e,{expose:t,emit:a}){const l=ma(""),n=ma(""),s=ma(null),i=a,o=()=>{i("add",{mac_list:l.value,trigger_alerts:n.value}),r()},r=()=>{s.value.close()};t({show:()=>{l.value="",s.value.show()},close:r}),_n((()=>{}));const c=e=>i18n(e);return(t,a)=>(Is(),Fs(np,{onShowed:a[2]||(a[2]=e=>{}),ref_key:"modal_id",ref:s},{title:vl((()=>[Ks(te(e.title),1)])),body:vl((()=>[Vs("div",i$,[Vs("label",o$,te(e.body),1),Vs("div",r$,[wn(Vs("textarea",{name:"items-list",id:"itemslist-textarea",class:"w-100 form-control",rows:"6","onUpdate:modelValue":a[0]||(a[0]=e=>l.value=e)},null,512),[[jo,l.value]]),Vs("small",null,te(e.list_notes),1),c$])]),Vs("div",u$,[Vs("label",d$,te(c("edit_check.trigger_device_disconnected_alert")),1),Vs("div",_$,[wn(Vs("input",{type:"checkbox",class:"form-check-input ms-0","onUpdate:modelValue":a[1]||(a[1]=e=>n.value=e)},null,512),[[Mo,n.value]])]),Vs("small",p$,te(c("edit_check.trigger_device_disconnected_alert_descr")),1)])])),footer:vl((()=>[Ks(te(c("host_details.notes"))+": "+te(e.footer)+" ",1),Vs("button",{type:"button",onClick:o,class:"btn btn-primary"},te(c("add")),1)])),_:1},512))},__file:"http_src/vue/modal-add-device-exclusion.vue"};const m$={key:0,class:"form-group mb-3 row"},v$={class:"col-form-label col-sm-4"},h$={class:"col-sm-7"},g$=["placeholder"],b$={class:"form-group mb-3 row"},y$={class:"col-form-label col-sm-4"},w$={class:"col-sm-7"},x$={class:"form-group mb-3 row"},k$={class:"col-form-label col-sm-4 pt-2"},$$={class:"form-switch col-sm-7 pt-2 ps-3"},S$={class:"col-form-label"};var N$={__name:"modal-edit-device-exclusion",props:{title:String,title_edit_all:String},emits:["edit"],setup(e,{expose:t,emit:a}){const l=ma(""),n=ma(""),s=ma(""),i=ma(i18n("if_stats_config.custom_name")),o=ma(null),r=a,c=e=>i18n(e),u=ma([{id:"allowed",value:"allowed",label:c("edit_check.authorized")},{id:"denied",value:"denied",label:c("edit_check.unauthorized")}]),d=ma(!1),_=()=>{0==d.value?r("edit",{mac_alias:l.value,mac_status:n.value.value,trigger_alerts:s.value}):r("edit",{mac_status:n.value.value,trigger_alerts:s.value,mac_alias:"all"}),p()},p=()=>{o.value.close()};return t({show:e=>{if(null!=e){let t=null;u.value.forEach((a=>{a.id==e.status&&(t=a)})),n.value=t,l.value=e.mac_address.mac,s.value=e.trigger_alert||!1}else n.value=u.value[0],d.value=!0;o.value.show()},close:p}),_n((()=>{})),(t,a)=>(Is(),Fs(np,{onShowed:a[3]||(a[3]=e=>{}),ref_key:"modal_id",ref:o},{title:vl((()=>[0==d.value?(Is(),Ms(Ss,{key:0},[Ks(te(e.title),1)],64)):(Is(),Ms(Ss,{key:1},[Ks(te(e.title_edit_all),1)],64))])),body:vl((()=>[0==d.value?(Is(),Ms("div",m$,[Vs("label",v$,te(c("edit_check.device_alias")),1),Vs("div",h$,[wn(Vs("input",{type:"text",name:"custom_name",class:"form-control",placeholder:i.value,"onUpdate:modelValue":a[0]||(a[0]=e=>l.value=e)},null,8,g$),[[jo,l.value]])])])):Ys("v-if",!0),Vs("div",b$,[Vs("label",y$,te(c("edit_check.device_status")),1),Vs("div",w$,[Hs(l_,{selected_option:n.value,"onUpdate:selected_option":a[1]||(a[1]=e=>n.value=e),options:u.value},null,8,["selected_option","options"])])]),Vs("div",x$,[Vs("label",k$,te(c("edit_check.trigger_device_disconnected_alert")),1),Vs("div",$$,[wn(Vs("input",{type:"checkbox",class:"form-check-input ms-0","onUpdate:modelValue":a[2]||(a[2]=e=>s.value=e)},null,512),[[Mo,s.value]])]),Vs("small",S$,te(c("edit_check.trigger_device_disconnected_alert_descr")),1)])])),footer:vl((()=>[Vs("button",{type:"button",onClick:_,class:"btn btn-primary"},te(c("edit")),1)])),_:1},512))},__file:"http_src/vue/modal-edit-device-exclusion.vue"};const C$={class:"row"},E$={class:"col-md-12 col-lg-12"},A$=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),T$={class:"card"},I$={class:"card-body"},O$={key:0,class:"alert alert-info"},P$={id:"table_devices_vue"},U$=[Vs("i",{class:"fas fa-plus"},null,-1)],j$={class:"card-footer mt-3"},M$=Vs("i",{class:"fas fa-trash"},null,-1),F$=Vs("i",{class:"fas fa-edit"},null,-1);var L$={__name:"page-device-exclusions",props:{context:Object},setup(e){const t=ma(),a=ma(),l=ma(),n=ma(),s=ma(),i=ma("device_exclusions"),o=`${http_prefix}/lua/pro/rest/v2/add/device/exclusion.lua`,r=`${http_prefix}/lua/pro/rest/v2/delete/device/exclusion.lua`,c=`${http_prefix}/lua/pro/rest/v2/edit/device/exclusion.lua`,u=`${http_prefix}/lua/pro/rest/v2/get/device/learning_status.lua`,d=ma(!1),_=e=>i18n(e);let p="",f="",m=_("edit_check.delete_all_device_exclusions"),v=_("edit_check.delete_all_device_exclusions_message"),h=_("edit_check.add_device_exclusion"),g=_("edit_check.add_device_exclusion_message"),b=_("edit_check.add_device_exclusion_notes"),y=_("edit_check.add_device_exclusion_list_notes"),w=_("edit_check.edit_device_exclusion"),x=_("edit_check.edit_all_devices_status"),k=_("edit_check.learning"),$=ma(null),S=ma(null);const N=e,C={csrf:N.context.csrf,ifid:N.context.ifid},E=[_("edit_check.device_exclusion_page_notes.note_1")],A=[_("edit_check.device_exclusion_page_notes.sub_note_1"),_("edit_check.device_exclusion_page_notes.sub_note_2")];function T(e){let t={click_button_edit_device:O,click_button_historical_flows:P,click_button_delete:I};null!=t[e.event_id]&&t[e.event_id](e)}async function I(e){let t=`${i18n("edit_check.delete_device_exclusion")} ${e.row.mac_address.mac}`;$.value=e.row,f=t,p=i18n("edit_check.device_exclusion"),a.value.show(f,p)}async function O(e){S.value=e.row,s.value.show(S.value)}function P(e){const t=e.row,a=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${t.first_seen.timestamp}&epoch_end=${t.last_seen.timestamp}&mac=${t.mac_address.mac};eq&aggregated=false`;window.open(a,"_blank")}_n((async()=>{await R()}));const U=N.crsf,j=async function(){const e=$.value,t=NtopUtils.buildURL(r,{device:e.mac_address.mac});C.device={mac:e.mac_address.mac},await ntopng_utility.http_post_request(t,C),D()},M=async function(){l.value.show()},F=async function(){s.value.show()},L=async function(){const e=NtopUtils.buildURL(r,{device:"all"});await ntopng_utility.http_post_request(e,C),D()},R=async function(){(await ntopng_utility.http_request(u)).learning_done?d.value=!1:d.value=!0},D=async function(){await R(),t.value.refresh_table()};function z(){n.value.show()}const q=async function(e){let t=e;t.mac_list=t.mac_list.replace(/(?:\t| )/g,""),t.mac_list=t.mac_list.replace(/(?:\r\n|\r|\n)/g,",");const a=NtopUtils.buildURL(o,{...t});await ntopng_utility.http_post_request(a,C),D()},B=async function(e){let t=S.value;null!=t&&(e.mac_alias=e.mac_alias.replace(/(?:\t| )/g,"")),null!=t&&(e.mac=t.mac_address.mac),e.csrf=N.context.csrf;const a=NtopUtils.buildURL(c,{...e});await ntopng_utility.http_post_request(a,C),D()};function V(e,t,a){if(null!=e){let l=t[e.data.data_field],n=a[e.data.data_field];if("last_ip"==e.id)return""!=l&&(l=H(l),l=NtopUtils.convertIPAddress(l)),""!=n&&(n=H(n),n=NtopUtils.convertIPAddress(n)),1==e.sort?l.localeCompare(n):n.localeCompare(l);if("manufacturer"==e.id)return void 0===l&&(l=""),void 0===n&&(n=""),1==e.sort?l.localeCompare(n):n.localeCompare(l);if("mac_address"==e.id)return l=l.mac,n=n.mac,1==e.sort?l.localeCompare(n):n.localeCompare(l);if("first_seen"==e.id)return l=0==t.first_seen.timestamp?"":t.first_seen.data,n=0==a.first_seen.timestamp?"":a.first_seen.data,1==e.sort?l.localeCompare(n):n.localeCompare(l);if("last_seen"==e.id)return l=0==t.last_seen.timestamp?"":t.last_seen.data,n=0==a.last_seen.timestamp?"":a.last_seen.data,1==e.sort?l.localeCompare(n):n.localeCompare(l);if("status"==e.id)return 1==e.sort?l.localeCompare(n):n.localeCompare(l);if("trigger_alert"==e.id)return l=G(l),n=G(n),1==e.sort?l.localeCompare(n):n.localeCompare(l)}}function H(e){return e.split("host=")[1].split("'")[0]}function G(e){return e?"true":e?"true"==e||"false"==e?e:void 0:"false"}const W=async e=>{let t={mac_address:(e,t)=>{let a=e.mac,l=e.alias;return e.symbolic_mac&&e.symbolic_mac!=a&&(a=e.symbolic_mac),null!=l&&l!=a&&(a=`${a} (${l})`),null!=e.url&&(a=`<a href='${e.url}' title='${e.mac}'>${a}</a>`),a},first_seen:(e,t)=>0==e.timestamp?"":e.data,last_seen:(e,t)=>0==e.timestamp?"":e.data,status:(e,t)=>{let a="";return"allowed"==e?(a=_("edit_check.authorized"),`<span class="badge bg-success" title="${a}">${a}</span>`):(a=_("edit_check.unauthorized"),`<span class="badge bg-danger" title="${a}">${a}</span>`)},trigger_alert:(e,t)=>{let a=!1;return a="false"!=e&&e,a?'<i class="fas fa-check text-success"></i>':'<i class="fas fa-times text-danger"></i>'}};return e.forEach((e=>{e.render_func=t[e.data_field]})),e},K=()=>({ifid:ntopng_url_manager.get_url_entry("ifid")||N.context.ifid});const J=e=>e;return(e,o)=>(Is(),Ms("div",C$,[Vs("div",E$,[A$,Vs("div",T$,[Vs("div",I$,[d.value?(Is(),Ms("div",O$,te(ya(k)),1)):Ys("v-if",!0),Vs("div",P$,[Hs(sx,{ref_key:"modal_delete_confirm",ref:a,title:ya(p),body:ya(f),onDelete:j},null,8,["title","body"]),Hs(sx,{ref_key:"modal_delete_all",ref:l,title:ya(m),body:ya(v),onDelete:L},null,8,["title","body"]),Hs(f$,{ref_key:"modal_add_device",ref:n,title:ya(h),body:ya(g),footer:ya(b),list_notes:ya(y),onAdd:q},null,8,["title","body","footer","list_notes"]),Hs(N$,{ref_key:"modal_edit_device",ref:s,title:ya(w),title_edit_all:ya(x),onEdit:B},null,8,["title","title_edit_all"]),Hs(rm,{ref_key:"table_device_exclusions",ref:t,csrf:ya(U),table_id:i.value,f_map_columns:W,get_extra_params_obj:K,f_map_config:J,f_sort_rows:V,onCustom_event:T},{custom_header:vl((()=>[Vs("button",{class:"btn btn-link",type:"button",ref:"add_device",onClick:z},[...U$],512)])),_:1},8,["csrf","table_id"])])]),Vs("div",j$,[Vs("button",{type:"button",onClick:M,class:"btn btn-danger me-1"},[M$,Ks(" "+te(_("edit_check.delete_all_device_exclusions")),1)]),Vs("button",{type:"button",onClick:F,class:"btn btn-secondary"},[F$,Ks(" "+te(_("edit_check.edit_all_devices_status")),1)])])]),Hs(fm,{note_list:E,add_sub_notes:"true",sub_note_list:A})])]))},__file:"http_src/vue/page-device-exclusions.vue"},R$={components:{datatable:kw},props:{page_csrf:String,url_params:Object},created(){!function(e){const t=[];let a=[],l=3;t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let n={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/fingerprint/data.lua`,url_params),enable_search:!0};a=[{columnName:i18n("client_fingerprint_type"),name:"type",data:"type",className:"text-nowrap",render:(e,t)=>"JA3"==e?`<a class="ntopng-external-link" href="https://github.com/salesforce/ja3">${e} <i class="fas fa-external-link-alt"></i></a>`:`<a class="ntopng-external-link" href="https://github.com/FoxIO-LLC/ja4">${e} <i class="fas fa-external-link-alt"></i></a>`,responsivePriority:0,createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("client_fingerprint"),name:"hash",data:"hash",className:"text-nowrap",render:(e,t,a)=>"JA3"==a.type?`<a class="ntopng-external-link" style="max-width:315px" href="https://sslbl.abuse.ch/ja3-fingerprints/${e}">${e} <i class="fas fa-external-link-alt"></i></a>`:e,responsivePriority:0,createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("status"),name:"is_malicious",data:"is_malicious",className:"text-nowrap text-center",responsivePriority:0,render:(e,t)=>e?`<i class="fa-solid fa-face-frown text-danger" title="${i18n("malicious")}"></i>`:`<i class="fa-solid fa-face-smile text-success" title="${i18n("ok")}"></i>`},{columnName:i18n("app_name"),name:"app_name",data:"app_name",className:"text-nowrap text-right",responsivePriority:1},{columnName:i18n("num_uses"),name:"num_uses",data:"num_uses",className:"text-nowrap text-right",responsivePriority:1,render:e=>NtopUtils.formatValue(e)}];let s={serverSide:!1,order:[[l,"desc"]]},i=ntopng_utility.clone(n);i.table_buttons=n.table_buttons,i.data_url=`${i.data_url}`,i.columns_config=a,i.table_config=ntopng_utility.clone(s),e.config_devices_standard=i}(this)},mounted(){},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null}),methods:{reload_table:function(){this.get_active_table().reload()},get_active_table:function(){return this.$refs.table_fingerprint}}};const D$={class:"row"},z$={class:"col-md-12 col-lg-12"},q$=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),B$={class:"card"},V$={class:"card-body"},H$={id:"table_host_tls"},G$={class:"card-footer"};R$.render=function(e,t,a,l,n,s){const i=kn("datatable");return Is(),Ms("div",D$,[Vs("div",z$,[q$,Vs("div",B$,[Vs("div",V$,[Vs("div",H$,[Hs(i,{ref:"table_fingerprint",table_buttons:n.config_devices_standard.table_buttons,columns_config:n.config_devices_standard.columns_config,data_url:n.config_devices_standard.data_url,enable_search:n.config_devices_standard.enable_search,table_config:n.config_devices_standard.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])]),Vs("div",G$,[Vs("b",null,te(n.i18n("fingerprint_note")),1)])])])])},R$.__file="http_src/vue/page-host-tls.vue";var W$={components:{datatable:kw},props:{page_csrf:String,url_params:Object},created(){!function(e){const t=[];let a=[],l=3;t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let n={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/fingerprint/data.lua`,url_params),enable_search:!0};a=[{columnName:i18n("hassh_fingerprint"),name:"ja3",data:"ja3",className:"text-nowrap",render:(e,t)=>`<a class="ntopng-external-link" href="https://sslbl.abuse.ch/ja3-fingerprints/${e}">${e} <i class="fas fa-external-link-alt"></i></a>`,responsivePriority:0,createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("status"),name:"is_malicious",data:"is_malicious",className:"text-nowrap text-center",responsivePriority:0,render:(e,t)=>e?`<i class="fa-solid fa-face-frown text-danger" title="${i18n("malicious")}"></i>`:`<i class="fa-solid fa-face-smile text-success" title="${i18n("ok")}"></i>`},{columnName:i18n("app_name"),name:"app_name",data:"app_name",className:"text-nowrap text-right",responsivePriority:1},{columnName:i18n("num_uses"),name:"num_uses",data:"num_uses",className:"text-nowrap text-right",responsivePriority:1,render:e=>NtopUtils.formatValue(e)}];let s={serverSide:!1,order:[[l,"desc"]]},i=ntopng_utility.clone(n);i.table_buttons=n.table_buttons,i.data_url=`${i.data_url}`,i.columns_config=a,i.table_config=ntopng_utility.clone(s),e.config_devices_standard=i}(this)},mounted(){},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null}),methods:{reload_table:function(){this.get_active_table().reload()},get_active_table:function(){return this.$refs.table_hassh}}};const K$={class:"row"},J$={class:"col-md-12 col-lg-12"},Y$=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),Z$={class:"card"},X$={class:"card-body"},Q$={id:"table_host_ssh"};W$.render=function(e,t,a,l,n,s){const i=kn("datatable");return Is(),Ms("div",K$,[Vs("div",J$,[Y$,Vs("div",Z$,[Vs("div",X$,[Vs("div",Q$,[Hs(i,{ref:"table_hassh",table_buttons:n.config_devices_standard.table_buttons,columns_config:n.config_devices_standard.columns_config,data_url:n.config_devices_standard.data_url,enable_search:n.config_devices_standard.enable_search,table_config:n.config_devices_standard.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])])])])])},W$.__file="http_src/vue/page-host-ssh.vue";const eS="change_map_event";var tS={components:{"page-periodicity-map":wk,"page-periodicity-table":yx,"page-asset-map":zk,"page-asset-table":ox,"page-service-map":tk,"page-service-table":Fx,"page-navbar":n_},props:{page_csrf:String,base_url_params:Object,ifid:Number,is_admin:Boolean,map_id:String,view:String,navbar_info:Object,service_acceptance:Array,service_map_filter_list:Object,service_table_filter_list:Array,periodicity_map_filter_list:Object,periodicity_table_filter_list:Array,asset_map_filter_list:Object,asset_table_filter_list:Array},created(){this.url_params=this.$props.base_url_params,this.active_tab=this.$props.map_id,this.page=this.url_params.page,this.updated_view=this.$props.view,asset_map_filter_list&&asset_table_filter_list&&(this.navbar_context.items_table.push({active:!1,class:"disabled ps-0 pe-0",label:"-"}),this.navbar_context.items_table.push({active:!1,icon:"fas fa-lg fa-compass",class:"disabled pe-0",title:i18n("asset_map"),label:i18n("asset")+": "}),this.navbar_context.items_table.push({active:!1,label:i18n("map_format"),id:"asset_map",page:"graph"}),this.navbar_context.items_table.push({active:!1,class:"disabled ps-0 pe-0",label:"/"}),this.navbar_context.items_table.push({active:!1,label:i18n("table_format"),id:"asset_map",page:"table"})),this.navbar_context.items_table.forEach((e=>{e.id==this.active_tab&&e.page==this.page?e.active=!0:e.active=!1}))},mounted(){const e=this.format_navbar_title;e(this.$props.navbar_info),ntopng_events_manager.on_custom_event("page_navbar",ntopng_custom_events.CHANGE_PAGE_TITLE,(t=>{e({selected_iface:this.$props.navbar_info.selected_iface,selected_host:t})})),ntopng_events_manager.on_custom_event("change_service_table_tab",eS,(t=>{x.set_key_to_url("map",t.id),x.set_key_to_url("page",t.page),"table"==t.page&&this.destroy(),this.active_tab=t.id,this.page=t.page,this.url_params.map=t.id,this.url_params.page=t.page,this.updated_view=x.get_url_entry("view"),e()}))},data:()=>({i18n:e=>i18n(e),active_tab:null,page:null,url_params:{},updated_view:null,navbar_node:{},navbar_context:{main_title:{label:" "+i18n("maps"),icon:"fas fa-map"},secondary_title_list:[],items_table:[{active:!1,icon:"fas fa-lg fa-concierge-bell",class:"disabled pe-0",title:i18n("service_map"),label:i18n("service")+": "},{active:!0,label:i18n("map_format"),id:"service_map",page:"graph"},{active:!1,class:"disabled ps-0 pe-0",label:"/"},{active:!1,label:i18n("table_format"),id:"service_map",page:"table"},{active:!1,class:"disabled ps-0 pe-0",label:"-"},{active:!1,icon:"fas fa-lg fa-clock",class:"disabled pe-0",title:i18n("periodicity_map"),label:i18n("periodicity")+": "},{active:!1,label:i18n("map_format"),id:"periodicity_map",page:"graph"},{active:!1,class:"disabled ps-0 pe-0",label:"/"},{active:!1,label:i18n("table_format"),id:"periodicity_map",page:"table"}]}}),methods:{destroy:function(){this.get_active_tab().destroy()},format_navbar_title:function(e){if(e?this.navbar_node=e:e=this.navbar_node,this.navbar_context.secondary_title_list=[{label:e.selected_iface.label,title:NtopUtils.shortenLabel(`${e.selected_iface.label}`,16)}],e.selected_host&&""!=e.selected_host.id){const t=e.selected_host.label,a=NtopUtils.removeVlan(e.selected_host.id);this.navbar_context.secondary_title_list[0].href=`${http_prefix}/lua/pro/enterprise/network_maps.lua?map=${this.active_tab}&page=${this.page}&ifid=${this.$props.ifid}`,this.navbar_context.secondary_title_list.push({label:`${NtopUtils.formatNameValue(t,a)}`,title:`${e.selected_host.label}`,href:e.selected_host.is_active?`${http_prefix}/lua/host_details.lua?host=${a}`:null,icon:"fa-solid fa-laptop",target_blank:"true"})}},get_active_tab:function(){return this.$refs[this.active_tab+"_"+this.page]},click_item:function(e){e.id==this.active_tab&&e.page==this.page||(this.navbar_context.items_table.forEach((e=>e.active=!1)),e.active=!0,ntopng_events_manager.emit_custom_event(eS,e))}}};tS.render=function(e,t,a,l,n,s){const i=kn("page-navbar"),o=kn("page-service-map"),r=kn("page-service-table"),c=kn("page-periodicity-map"),u=kn("page-periodicity-table"),d=kn("page-asset-map"),_=kn("page-asset-table");return Is(),Ms(Ss,null,[Hs(i,{id:"page_navbar",main_title:n.navbar_context.main_title,secondary_title_list:n.navbar_context.secondary_title_list,help_link:n.navbar_context.help_link,items_table:n.navbar_context.items_table,onClick_item:s.click_item},null,8,["main_title","secondary_title_list","help_link","items_table","onClick_item"]),"service_map"==n.active_tab&&"graph"==n.page?(Is(),Fs(o,{key:0,ref:"service_map_graph",page_csrf:a.page_csrf,url_params:n.url_params,ifid:a.ifid,is_admin:a.is_admin,map_id:a.map_id,all_filter_list:a.service_map_filter_list},null,8,["page_csrf","url_params","ifid","is_admin","map_id","all_filter_list"])):Ys("v-if",!0),"service_map"==n.active_tab&&"table"==n.page?(Is(),Fs(r,{key:1,ref:"service_map_table",page_csrf:a.page_csrf,url_params:n.url_params,view:n.updated_view,table_filters:a.service_table_filter_list,is_admin:a.is_admin,service_acceptance:a.service_acceptance},null,8,["page_csrf","url_params","view","table_filters","is_admin","service_acceptance"])):Ys("v-if",!0),"periodicity_map"==n.active_tab&&"graph"==n.page?(Is(),Fs(c,{key:2,ref:"periodicity_map_graph",page_csrf:a.page_csrf,url_params:n.url_params,ifid:a.ifid,is_admin:a.is_admin,map_id:a.map_id,all_filter_list:a.periodicity_map_filter_list},null,8,["page_csrf","url_params","ifid","is_admin","map_id","all_filter_list"])):Ys("v-if",!0),"periodicity_map"==n.active_tab&&"table"==n.page?(Is(),Fs(u,{key:3,ref:"periodicity_map_table",page_csrf:a.page_csrf,url_params:n.url_params,view:n.updated_view,table_filters:a.periodicity_table_filter_list,is_admin:a.is_admin},null,8,["page_csrf","url_params","view","table_filters","is_admin"])):Ys("v-if",!0),a.asset_map_filter_list&&a.asset_table_filter_list?(Is(),Ms(Ss,{key:4},["asset_map"==n.active_tab&&"graph"==n.page?(Is(),Fs(d,{key:0,ref:"asset_map_graph",page_csrf:a.page_csrf,url_params:n.url_params,ifid:a.ifid,is_admin:a.is_admin,map_id:a.map_id,all_filter_list:a.asset_map_filter_list},null,8,["page_csrf","url_params","ifid","is_admin","map_id","all_filter_list"])):Ys("v-if",!0),"asset_map"==n.active_tab&&"table"==n.page?(Is(),Fs(_,{key:1,ref:"asset_map_table",page_csrf:a.page_csrf,url_params:n.url_params,view:n.updated_view,table_filters:a.asset_table_filter_list},null,8,["page_csrf","url_params","view","table_filters"])):Ys("v-if",!0)],64)):Ys("v-if",!0)],64)},tS.__file="http_src/vue/page-home-map.vue";const aS=["width","height"],lS=[Vs("defs",null,null,-1),Vs("g",{class:"nodes",style:{stroke:"#000",strokeOpacity:"0.5"}},null,-1),Vs("g",{class:"links",style:{stroke:"#000",strokeOpacity:"0.3",fill:"none"}},null,-1),Vs("g",{class:"texts"},null,-1)];var nS={__name:"page-sankey",props:{width:Number,height:Number},setup(e){const t=d3v7,a=e,l=ma(null),n=ma({});async function s(){return data=function(e){let t=[],a=[],l={};const n=(e,a,n)=>{if(null!=l[e])return;let s=t.length;l[e]=s;let i={index:s,name:e,href:a,color:n};t.push(i)},s=(e,t,n,s)=>{let i={source:l[e],target:l[t],value:n,label:s};a.push(i)};return e.forEach((e=>{n(e.source,e.source_link,e.source_color),n(e.target,e.target_link,e.target_color),s(e.source,e.target,e.value,e.link)})),{nodes:t,links:a}}([{link_color:"#e377c2",source_color:"#e377c2",source_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=IGMP",target:"224.0.0.251",source:"IGMP",link:"IGMP",target_link:"/lua/host_details.lua?host=224.0.0.251&vlan=0",target_node:"224.0.0.251",source_node:"192.168.1.7",value:60},{link_color:"#e377c2",source_link:"/lua/host_details.lua?host=192.168.1.7&vlan=0",target:"IGMP",source:"192.168.1.7",link:"IGMP",target_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=IGMP",target_node:"224.0.0.2",target_color:"#e377c2",source_node:"192.168.1.7",value:120},{link_color:"#e377c2",source_color:"#e377c2",source_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=IGMP",target:"224.0.0.2",source:"IGMP",link:"IGMP",target_link:"/lua/host_details.lua?host=224.0.0.2&vlan=0",target_node:"224.0.0.2",source_node:"192.168.1.7",value:60},{link_color:"#bcbd22",source_link:"/lua/host_details.lua?host=192.168.1.7&vlan=0",target:"MDNS",source:"192.168.1.7",link:"MDNS",target_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=MDNS",target_node:"224.0.0.251",target_color:"#bcbd22",source_node:"192.168.1.7",value:396},{link_color:"#bcbd22",source_color:"#bcbd22",source_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=MDNS",target:"224.0.0.251",source:"MDNS",link:"MDNS",target_link:"/lua/host_details.lua?host=224.0.0.251&vlan=0",target_node:"224.0.0.251",source_node:"192.168.1.7",value:396}]),data}return dn((async()=>{})),_n((async()=>{!async function(){const e=t.scaleOrdinal(t.schemeCategory10);let i=await s();const o=function(){let e=a.width;null==e&&(e=window.innerWidth-200);let t=a.height;null==t&&(t=window.innerHeight-50);return{width:e,height:t}}();n.value=o;const{links:r,nodes:c}=function(e,a,l){return t.sankey().nodeAlign(t.sankeyCenter).nodeWidth(10).nodePadding(10).extent([[0,5],[a,l]])(e)}(i,o.width-10,o.height-5);t.select(l.value).select("g.nodes").selectAll("rect").data(c).join((a=>{const l=a.append("rect");l.attr("x",(e=>e.x0)).attr("y",(e=>e.y0)),l.transition(t.easeLinear).delay(1e3).duration(500).attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("dataIndex",(e=>e.index)).attr("fill",(t=>e(t.index/c.length))),l.append("title").text((e=>`${e.name}\n${e.hours}`))}),(a=>a.transition(t.easeLinear).delay(500).duration(500).attr("x",(e=>e.x0)).attr("y",(e=>e.y0)).attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("dataIndex",(e=>e.index)).attr("fill",(t=>e(t.index/c.length))).select("title").text((e=>`${e.name}\n${e.hours}`))),(e=>e.transition(t.easeLinear).duration(500).style("opacity",0).remove())).on("dblclick",(function(e){})),t.select(l.value).select("g.texts").selectAll("text").data(c).join((a=>{a.append("text").transition(t.easeLinear).delay(1e3).duration(500).attr("x",(e=>e.x0<o.width/2?e.x1+6:e.x0-6)).attr("y",(e=>(e.y1+e.y0)/2)).attr("fill",(a=>t.rgb(e(a.index/c.length)).darker())).attr("alignment-baseline","middle").attr("text-anchor",(e=>e.x0<o.width/2?"start":"end")).attr("font-size",9).text((e=>e.name))}),(a=>a.transition(t.easeLinear).delay(500).duration(500).attr("x",(e=>e.x0<o.width/2?e.x1+6:e.x0-6)).attr("y",(e=>(e.y1+e.y0)/2)).attr("fill",(a=>t.rgb(e(a.index/c.length)).darker())).attr("text-anchor",(e=>e.x0<o.width/2?"start":"end")).attr("font-size",9).text((e=>e.name))),(e=>e.transition(t.easeLinear).duration(500).style("opacity",0).remove())),t.select(l.value).select("defs").selectAll("linearGradient").data(r).join((t=>{const a=t.append("linearGradient");a.attr("id",(e=>`gradient-${e.index}`)).attr("gradientUnits","userSpaceOnUse").attr("x1",(e=>e.source.x1)).attr("x2",(e=>e.target.x0)),a.append("stop").attr("offset","0").attr("stop-color",(t=>e(t.source.index/c.length))),a.append("stop").attr("offset","100%").attr("stop-color",(t=>e(t.target.index/c.length)))}),(t=>{t.attr("id",(e=>`gradient-${e.index}`)).attr("gradientUnits","userSpaceOnUse").attr("x1",(e=>e.source.x1)).attr("x2",(e=>e.target.x0)),t.selectAll("stop").remove(),t.append("stop").attr("offset","0").attr("stop-color",(t=>e(t.source.index/c.length))),t.append("stop").attr("offset","100%").attr("stop-color",(t=>e(t.target.index/c.length)))}),(e=>e.remove())),t.select(l.value).select("g.links").selectAll("path").data(r).join((e=>{const a=e.append("path");a.transition(t.easeLinear).delay(1e3).duration(500).attr("d",t.sankeyLinkHorizontal()).attr("stroke",(e=>`url(#gradient-${e.index}`)).attr("stroke-width",(e=>e.width)),a.append("title").text((e=>`${e.hours}`))}),(e=>e.transition(t.easeLinear).delay(500).duration(500).attr("d",t.sankeyLinkHorizontal()).attr("stroke",(e=>`url(#gradient-${e.index}`)).attr("stroke-width",(e=>e.width)).select("title").text((e=>`${e.hours}`))),(e=>e.transition(t.easeLinear).duration(500).style("opacity",0).remove()))}()})),(e,t)=>(Is(),Ms("div",null,[(Is(),Ms("svg",{ref_key:"sankey_chart_ref",ref:l,width:n.value.width,height:n.value.height,style:{margin:"10px"}},[...lS],8,aS))]))}};lp("\n.node rect {\n  fill-opacity: 0.9;\n  shape-rendering: crispEdges;\n}\n.node text {\n  pointer-events: none;\n  text-shadow: 0 1px 0 #fff;\n}\n.link {\n  fill: none;\n  stroke: #000;\n  stroke-opacity: 0.2;\n}\n.link:hover {\n  stroke-opacity: 0.5;\n}\n"),nS.__file="http_src/vue/page-sankey.vue";const sS="change_applications_tab_event";var iS={components:{chart:C_,datatable:kw,"modal-delete-confirm":sx,"tab-list":ex},props:{page_csrf:String,url_params:Object,view:String,is_ch_enabled:Boolean,is_locale:String,ts_l7_enabled:Boolean,ts_cat_enabled:Boolean},created(){this.applications_tab=x.get_url_entry("view")||this.$props.view,this.tab_list.forEach((e=>{this.applications_tab==e.id?e.active=!0:e.active=!1})),function(e){const t=[];t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let a=url_params;a.view="applications";let l={table_buttons:t,data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/l7/data.lua`,a),enable_search:!0,table_config:{serverSide:!1,order:[[6,"desc"]],columnDefs:[{type:"time-uni",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3},{type:"file-size",targets:5}]}},n=[{columnName:i18n("host_details.application"),targets:0,width:"20",name:"application",data:"application",className:"text-nowrap",responsivePriority:1,render:t=>"1"==e.$props.is_locale&&!0===e.$props.ts_l7_enabled?`<a href="${http_prefix}/lua/host_details.lua?host=${e.$props.url_params.host}@${e.$props.url_params.vlan}&page=historical&ifid=${e.$props.url_params.ifid}&protocol=${t.label}&ts_schema=host:ndpi" target="_blank">${t.label}</a>`:`${t.label}`},{columnName:i18n("host_details.duration"),targets:1,width:"10",name:"duration",data:"duration",className:"text-nowrap",responsivePriority:1,render:e=>NtopUtils.secondsToTime(e)},{columnName:i18n("host_details.sent"),targets:2,width:"10",name:"sent",data:"bytes_sent",className:"text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.rcvd"),targets:3,width:"10",name:"rcvd",data:"bytes_rcvd",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.breakdown"),targets:4,width:"10",name:"breakdown",data:"breakdown",orderable:!1,className:"text-center text-nowrap",responsivePriority:2,render:(e,t,a)=>{const l=100*a.bytes_sent/a.tot_bytes,n=100*a.bytes_rcvd/a.tot_bytes;return NtopUtils.createBreakdown(l,n,i18n("host_details.sent"),i18n("host_details.rcvd"))}},{columnName:i18n("host_details.tot_bytes"),targets:5,width:"20",name:"tot_bytes",data:"tot_bytes",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.tot_percentage"),targets:6,width:"20",name:"percentage",data:"percentage",className:"text-center text-nowrap",responsivePriority:2,render:e=>{const t=e.toFixed(1);return NtopUtils.createProgressBar(t)}}];is_ch_enabled&&e.add_action_column(n,"l7proto","application");let s=ntopng_utility.clone(l);s.columns_config=n,e.config_devices_applications=s,a.view="categories",l.data_url=NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/l7/data.lua`,a),n=[{columnName:i18n("host_details.category"),targets:0,name:"category",data:"category",className:"text-nowrap",responsivePriority:1,render:t=>"1"==e.$props.is_locale&&!0===e.$props.ts_cat_enabled?`<a href="${http_prefix}/lua/host_details.lua?host=${e.$props.url_params.host}@${e.$props.url_params.vlan}&ts_schema=host:ndpi_categories&page=historical&category=${t.label}" target="_blank">${t.label}</a>`:`${t.label}`},{columnName:i18n("host_details.applications"),targets:0,name:"applications",data:"applications",orderable:!1,className:"text-nowrap",responsivePriority:1,render:t=>"1"==e.$props.is_locale?`${t.label||""} <a href="${http_prefix}/${t.href}${t.category_id}">${t.more_protos||""}</a>`:`${t.label||""}`},{columnName:i18n("host_details.duration"),targets:0,name:"duration",data:"duration",className:"text-nowrap",responsivePriority:1,render:e=>NtopUtils.secondsToTime(e)},{columnName:i18n("host_details.tot_bytes"),targets:0,name:"tot_bytes",data:"tot_bytes",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.tot_percentage"),targets:0,name:"percentage",data:"percentage",className:"text-center text-nowrap",responsivePriority:2,render:e=>{const t=e.toFixed(1);return NtopUtils.createProgressBar(t)}}],is_ch_enabled&&e.add_action_column(n,"l7cat","category");let i=ntopng_utility.clone(l);i.columns_config=n,i.table_config.order=[[4,"desc"]],i.table_config.columnDefs=[{type:"time-uni",targets:2},{type:"file-size",targets:3}],e.config_devices_categories=i}(this)},mounted(){C.on_custom_event("change_applications_tab_event",sS,(e=>{let t=this.get_active_table();x.set_key_to_url("view",e.id),t.destroy_table(),this.applications_tab=e.id}))},data(){return{i18n:e=>i18n(e),applications_tab:null,config_devices_applications:null,config_devices_categories:null,chart_options:[{title:i18n("graphs.top_10_ndpi_protocols"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l7/proto_data.lua`,tab:"applications",id:"top_applications"},{title:i18n("graphs.top_breed"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l7/breed_data.lua`,tab:"applications",id:"top_breed"},{title:i18n("graphs.top_10_ndpi_categories"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l7/cat_data.lua`,tab:"categories",id:"top_categories"},{title:i18n("graphs.top_breed"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l7/breed_data.lua`,tab:"categories",id:"top_breed"}],tab_list:[{title:i18n("host_details.applications_tab"),active:"applications"==this.$props.view,id:"applications"},{title:i18n("host_details.categories_tab"),active:"categories"==this.$props.view,id:"categories"}]}},methods:{add_action_column:function(e,t,a){const l=`${this.$props.url_params.host}`,n=`${this.$props.url_params.vlan}`,s=`${this.$props.url_params.ifid}`;let i="page-stats-action-jump-historical";e.push({columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:i,render:(e,o,r)=>{const c={handlerId:i,onClick:()=>{let e=`${http_prefix}/lua/pro/db_search.lua?ifid=${s}&${t}=${r[a].id};eq&ip=${l};eq`;0!=n&&(e=`${e}&vlan_id=${n};eq`),window.open(e)}};return DataTableUtils.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:c}])}})},destroy:function(){this.get_active_table().destroy_table()},click_item:function(e){this.tab_list.forEach((e=>e.active=!1)),e.active=!0,C.emit_custom_event(sS,e)},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},get_active_table:function(){return this.$refs[`table_host_${this.applications_tab}`]},get_f_get_custom_chart_options:()=>(console.log("get_f_"),async e=>charts_options_items.value[chart_index].chart_options)}};const oS={class:"row"},rS={class:"col-md-12 col-lg-12"},cS={class:"card"},uS=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),dS={class:"card-body"},_S={id:"host_details_applications"},pS={class:"row mb-4 mt-4",id:"host_details_applications"},fS={class:"col-6"},mS={key:0,class:"widget-name"};iS.render=function(e,t,a,l,n,s){const i=kn("tab-list"),o=kn("chart"),r=kn("datatable");return Is(),Ms("div",oS,[Vs("div",rS,[Vs("div",cS,[uS,Vs("div",dS,[Vs("div",_S,[Hs(i,{ref:"host_details_applications_tab_list",id:"host_details_applications_tab_list",tab_list:n.tab_list,onClick_item:s.click_item},null,8,["tab_list","onClick_item"]),Vs("div",pS,[(Is(!0),Ms(Ss,null,An(n.chart_options,(e=>(Is(),Ms("div",fS,[e.tab==n.applications_tab?(Is(),Ms("h3",mS,te(e.title),1)):Ys("v-if",!0),e.tab==n.applications_tab?(Is(),Fs(o,{key:1,id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!1},null,8,["id","chart_type","base_url_request"])):Ys("v-if",!0)])))),256))]),"applications"==n.applications_tab?(Is(),Fs(r,{key:0,ref:"table_host_applications",table_buttons:n.config_devices_applications.table_buttons,columns_config:n.config_devices_applications.columns_config,data_url:n.config_devices_applications.data_url,enable_search:n.config_devices_applications.enable_search,table_config:n.config_devices_applications.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])):Ys("v-if",!0),"categories"==n.applications_tab?(Is(),Fs(r,{key:1,ref:"table_host_categories",table_buttons:n.config_devices_categories.table_buttons,columns_config:n.config_devices_categories.columns_config,data_url:n.config_devices_categories.data_url,enable_search:n.config_devices_categories.enable_search,table_config:n.config_devices_categories.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])):Ys("v-if",!0)])])])])])},iS.__file="http_src/vue/page-host-details-applications.vue";const vS={class:"row"},hS={class:"col-md-12 col-lg-12"},gS={class:"card"},bS=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),yS={class:"card-body"},wS={id:"host_details_traffic"},xS={class:"row mb-4 mt-4",id:"host_details_traffic"},kS={class:"col-4"},$S={class:"widget-name"};var SS={__name:"page-host-details-traffic",props:{page_csrf:String},setup(e){const t=ma(null);ma([]);const a=ma({});dn((async()=>{!function(e){const l=[];let n={};n.host=x.get_url_entry("host"),n.vlan=x.get_url_entry("vlan"),n.ifid=x.get_url_entry("ifid"),l.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,a,l,n){t.value.reload()}});let s={table_buttons:l,data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/l4/data.lua`,n),enable_search:!0,table_config:{serverSide:!1,order:[[6,"desc"]],columnDefs:[{type:"time-uni",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3},{type:"file-size",targets:5}]}},i=[{columnName:i18n("protocol"),targets:0,name:"protocol",data:"protocol",className:"text-nowrap",responsivePriority:1},{columnName:i18n("chart"),targets:1,name:"historical",data:"historical",className:"text-nowrap",responsivePriority:1},{columnName:i18n("traffic_labels.bytes_sent"),targets:2,name:"sent",data:"bytes_sent",className:"text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("traffic_labels.bytes_rcvd"),targets:3,name:"rcvd",data:"bytes_rcvd",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("traffic_labels.breakdown"),targets:4,name:"breakdown",data:"breakdown",orderable:!1,className:"text-center text-nowrap",responsivePriority:2,render:(e,t,a)=>{const l=100*a.bytes_sent/a.total_bytes,n=100*a.bytes_rcvd/a.total_bytes;return NtopUtils.createBreakdown(l,n,i18n("host_details.sent"),i18n("host_details.rcvd"))}},{columnName:i18n("traffic_labels.total_bytes"),targets:5,name:"tot_bytes",data:"total_bytes",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("traffic_labels.total_percentage"),targets:6,width:"20%",name:"percentage",data:"total_percentage",className:"text-center text-nowrap",responsivePriority:2,render:e=>{const t=e.toFixed(1);return NtopUtils.createProgressBar(t)}}],o=ntopng_utility.clone(s);o.columns_config=i,a.value=o}()})),vn((async()=>{t.value.destroy_table()}));const l=[{title:i18n("graphs.l4_proto"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l4/proto_data.lua`,id:"traffic_protos"},{title:i18n("graphs.contacted_hosts"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l4/contacted_hosts_data.lua`,id:"contacted_hosts"},{title:i18n("graphs.traffic"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l4/traffic_data.lua`,id:"traffic"}];return(e,n)=>(Is(),Ms("div",vS,[Vs("div",hS,[Vs("div",gS,[bS,Vs("div",yS,[Vs("div",wS,[Vs("div",xS,[(Is(),Ms(Ss,null,An(l,(e=>Vs("div",kS,[Vs("h3",$S,te(e.title),1),Hs(C_,{id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!1},null,8,["id","chart_type","base_url_request"])]))),64))]),Hs(kw,{ref_key:"traffic_table",ref:t,table_buttons:a.value.table_buttons,columns_config:a.value.columns_config,data_url:a.value.data_url,enable_search:a.value.enable_search,table_config:a.value.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])])])])]))},__file:"http_src/vue/page-host-details-traffic.vue"};const NS={class:"row"},CS={class:"col-md-12 col-lg-12"},ES={class:"card"},AS=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),TS={class:"card-body"},IS={class:"row"},OS={class:"col-6 mb-4 mt-4"},PS={class:"widget-name"};var US={__name:"page-host-details-packets",props:{page_csrf:String,url_params:Object},setup(e){const t=[{title:i18n("graphs.packets_sent"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/packets/sent_data.lua`,id:"packets_sent"},{title:i18n("graphs.packets_rcvd"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/packets/rcvd_data.lua`,id:"packets_rcvd"},{title:i18n("graphs.tcp_flags"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/packets/tcp_flags_data.lua`,id:"tcp_flags"},{title:i18n("graphs.arp_distribution"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/packets/arp_data.lua`,id:"arp_requests"}];function l(e,t,l){a.hideOverlays()}return _n((()=>{})),(e,a)=>(Is(),Ms("div",NS,[Vs("div",CS,[Vs("div",ES,[AS,Vs("div",TS,[Vs("div",IS,[(Is(),Ms(Ss,null,An(t,(e=>Vs("div",OS,[Vs("h3",PS,te(e.title),1),Hs(C_,{id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!1,onChart_reloaded:l},null,8,["id","chart_type","base_url_request"])]))),64))])])])])]))},__file:"http_src/vue/page-host-details-packets.vue"};const jS={key:0,class:"alert alert-info",id:"empty-message"},MS=["width","height"],FS=[Vs("g",{class:"nodes",style:{stroke:"#000",strokeOpacity:"0.5"}},null,-1),Vs("g",{class:"links",style:{stroke:"#000",strokeOpacity:"0.3",fill:"none"}},null,-1)];var LS={__name:"sankey",props:{no_data_message:String,width:Number,height:Number,sankey_data:Object},emits:["node_click","update_width","update_height"],setup(e,{expose:t,emit:a}){const l=d3v7,n=a,s=ma(!1),i=e,o=ma(null),r=ma({});function c(e){e&&($(".nodes",o.value).empty(),$(".links",o.value).empty()),null!=i.sankey_data.nodes&&null!=i.sankey_data.links&&0!=i.sankey_data.length&&0!=i.sankey_data.links.length&&_()}dn((async()=>{})),_n((async()=>{c(),window.addEventListener("resize",(()=>c(!0)))})),jl((()=>i.sankey_data),((e,t)=>{c(!0)}));let u=null,d=null;async function _(){const e=l.scaleOrdinal(l.schemeCategory10);let t=i.sankey_data;const a=function(){n("update_width");let e=i.width;null==e&&(e=$(o.value).parent().parent().width()-10);n("update_height");let t=i.height;null==t&&(t=$(o.value).parent().parent().height()-80);return{width:e,height:t}}();var s,c;r.value=a,s=a.width-10,c=a.height-5,u=l.sankey().nodeAlign(l.sankeyCenter).nodeWidth(10).nodePadding(10).extent([[0,5],[s,c]]),d=u(t);const{links:_,nodes:v}=d;let h=l.select(o.value).select("g.nodes").selectAll("g").data(v).join((e=>e.append("g"))).attr("transform",(e=>`translate(${e.x0}, ${e.y0})`));l.zoom().scaleExtent([1,40]).on("zoom",m),h.append("rect").attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("dataIndex",(e=>e.index)).attr("fill",(t=>e(t.index/v.length))).attr("class","sankey-node").attr("style","cursor:move;"),l.selectAll("rect").append("title").text((e=>`${e?.label}`)),h.data(v).append("text").attr("class","label").style("pointer-events","auto").attr("style","cursor:pointer;").style("fill-opacity",(function(e){return 1})).attr("fill",(e=>"#000")).attr("x",(e=>e.x0<a.width/2?e.x1-e.x0+6:-6)).attr("y",(e=>(e.y1-e.y0)/2)).attr("alignment-baseline","middle").attr("text-anchor",(e=>e.x0<a.width/2?"start":"end")).attr("font-size",12).text((e=>e.label)).on("click",(function(e,t){n("node_click",t.data)})),h.call(l.drag().subject((e=>e)).on("start",p).on("drag",f));const g=l.select(o.value).select("g.links").selectAll("g").data(_).join((e=>e.append("g")));let b=g.append("linearGradient");b.attr("id",(e=>`gradient-${e.index}`)).attr("gradientUnits","userSpaceOnUse").attr("x1",(e=>e.source.x1)).attr("x2",(e=>e.target.x0)),b.append("stop").attr("offset","0").attr("stop-color",(t=>e(t.source.index/v.length))),b.append("stop").attr("offset","100%").attr("stop-color",(t=>e(t.target.index/v.length))),g.append("path").style("pointer-events","none").attr("class","sankey-link").attr("d",l.sankeyLinkHorizontal()).attr("stroke-width",(e=>Math.max(1,e.width))).attr("stroke",(e=>`url(#gradient-${e.index}`)),g.append("title").text((e=>`${e.label}`))}function p(e,t){t.__x=e.x,t.__y=e.y,t.__x0=t.x0,t.__y0=t.y0,t.__x1=t.x1,t.__y1=t.y1}function f(e,t){l.select(this).attr("transform",(function(t){const a=e.x-t.__x,n=e.y-t.__y,s=r.value.width,i=r.value.width;return t.x0=t.__x0+a,t.x1=t.__x1+a,t.y0=t.__y0+n,t.y1=t.__y1+n,t.x0<0&&(t.x0=0,t.x1=10),t.x1>s&&(t.x0=s-10,t.x1=s),t.y0<0&&(t.y0=0,t.y1=t.__y1-t.__y0),t.y1>i&&(t.y0=i-(t.__y1-t.__y0),t.y1=i),u.update(d),l.selectAll(".sankey-link").attr("d",l.sankeyLinkHorizontal()),`translate(${t.x0}, ${t.y0})`}))}function m({transform:e}){g.attr("transform",e)}const v=e=>i18n(e);return t({draw_sankey:_,set_no_data_flag:function(e){s.value=e}}),(t,a)=>(Is(),Ms(Ss,null,[s.value?(Is(),Ms("div",jS,te(e.no_data_message||v("flows_page.no_data")),1)):Ys("v-if",!0),Vs("div",null,[(Is(),Ms("svg",{ref_key:"sankey_chart_ref",ref:o,width:r.value.width,height:r.value.height,style:{margin:"10px"}},[...FS],8,MS))])],64))}};lp("\n/* .node rect { */\n/*   fill-opacity: 0.9; */\n/*   shape-rendering: crispEdges; */\n/* } */\n\n/* .node text { */\n/*   pointer-events: none; */\n/*   text-shadow: 0 1px 0 #fff; */\n/* } */\n\n/* path.link.link2 { */\n/*     all: initial; */\n/*     fill: unset; */\n/*     stroke: unset; */\n/*     stroke-opacity: unset; */\n/*     stroke-width: unset; */\n/* } */\n\n/* .link:hover { */\n/*   stroke-opacity: 0.5; */\n/* } */\n"),LS.__file="http_src/vue/sankey.vue";const RS={class:"row"},DS={class:"col-md-12 col-lg-12"},zS={class:"card card-shadow"},qS={class:"card-body"},BS={class:"d-flex align-items-center mb-2"},VS={class:"d-flex no-wrap ms-auto"},HS={class:"m-1"},GS={style:{"min-width":"16rem"}},WS={class:"my-auto me-1"},KS=Vs("label",{class:"my-auto me-1"},null,-1),JS=[Vs("span",null,[Vs("i",{class:"fas fa-sync"})],-1)];var YS={__name:"page-host-details-flow-sankey",props:{is_local:Boolean},setup(e){const t=e,a=e=>i18n(e),l=`${http_prefix}/lua/pro/rest/v2/get/host/flows/data.lua`,n=ma(null),s=ma(!1),i=[{filter_name:"hosts_type",key:3,id:"local_origin_remote_target",title:a("flows_page.local_cli_remote_srv"),label:a("flows_page.local_cli_remote_srv"),filter_icon:!1,countable:!1},{filter_name:"hosts_type",key:4,id:"remote_origin_local_target",title:a("flows_page.local_srv_remote_cli"),label:a("flows_page.local_srv_remote_cli"),filter_icon:!1,countable:!1},{filter_name:"hosts_type",key:5,id:"all_hosts",title:a("flows_page.all_flows"),label:a("flows_page.all_flows"),filter_icon:!1,countable:!1}];t.is_local?i.unshift({filter_name:"hosts_type",key:1,id:"local_only",title:a("flows_page.local_only"),label:a("flows_page.local_only"),filter_icon:!1,countable:!1}):i.unshift({filter_name:"hosts_type",key:2,id:"remote_only",title:a("flows_page.remote_only"),label:a("flows_page.remote_only"),filter_icon:!1,countable:!1});const o=ma(i[3]),r=ma({});function c(e){if(1==e.is_link_node)return;let t={host:e.info.ip,vlan:e.info.vlan},a=x.obj_to_url_params(t);const l=`${http_prefix}/lua/host_details.lua?${a}`;x.go_to_url(l)}dn((()=>{})),_n((()=>{u()}));const u=function(){let e=o.value;x.set_key_to_url(e.filter_name,e.id),async function(){s.value=!0;let e=await async function(){const e=function(){let e={host:x.get_url_entry("host"),vlan:x.get_url_entry("vlan"),ifid:x.get_url_entry("ifid"),hosts_type:x.get_url_entry("hosts_type")},t=x.obj_to_url_params(e),a=`${l}?${t}`;return a}();let t=await b.http_request(e);t=function(e){let t=e=>console.error(`link (source: ${e.source_node_id}, target: ${e.target_node_id}) removed for not existing source/target node`),a=function(e,t){let a={};e.nodes.forEach((e=>a[e.node_id]=!0));let l=e=>null!=a[e.source_node_id]&&null!=a[e.target_node_id],n=function(e,t,a){return e.filter((e=>{const l=t(e);return 0==l&&null!=a&&a(e),l}))}(e.links,l,t);return n}(e,t);return{nodes:e.nodes,links:a}}(t);let a=x.get_url_entry("host"),s=function(e,t){if(0==e.nodes.length&&0==e.links.length)return e;let a={};e.nodes.forEach((e=>a[e.node_id]=e));const l=e=>{if(e.source_node_id==t)return-1;if(e.target_node_id==t)return 1;throw`Wrong direction link ${e.source_node_id} -> ${e.target_node_id}`},n=(e,a)=>e==t?e:`${a}_${e}`;let s={},i={nodes:[],links:[]};e.links.forEach((e=>{let t,o=l(e),r={source_node_id:n(e.source_node_id,o),target_node_id:n(e.target_node_id,o),label:e.label,value:e.value,data:e};if(-1==o){let l=a[e.target_node_id];t={node_id:r.target_node_id,label:l.label,data:l}}else{let l=a[e.source_node_id];t={node_id:r.source_node_id,label:l.label,data:l}}i.links.push(r),null==s[t.node_id]&&(s[t.node_id]=!0,i.nodes.push(t))}));let o=a[t];i.nodes.push({node_id:o.node_id,label:o.label,data:o}),i.nodes.forEach((e=>a[e.node_id]=e));const r=e=>`${l(e)}_${e.label}`;let c={};i.links.forEach((e=>{let t=r(e),l=c[t];null==l&&(l={id:t,label:e.label,data:{...e,is_link_node:!0},node_links:[]},c[t]=l),l.node_links.push({source:a[e.source_node_id],target:a[e.target_node_id],value:_(e)})}));let u=i.nodes.map((e=>e)),d=[];for(let e in c){let t=c[e],a={node_id:t.id,label:t.label,data:t.data};u.push(a),t.node_links.forEach((e=>{d.push({source_node_id:e.source.node_id,target_node_id:a.node_id,label:`${e.source.label} - ${e.target.label}: ${a.label}`,value:e.value,data:e}),d.push({source_node_id:a.node_id,target_node_id:e.target.node_id,label:`${e.source.label} - ${e.target.label}: ${a.label}`,value:e.value,data:e})}))}let p={},f=[];u.map(((e,t)=>{let a={index:t,node_id:e.node_id,label:e.label,data:e.data};p[e.node_id]=a,f.push(a)}));let m=d.map((e=>{let t=p[e.source_node_id],a=p[e.target_node_id];return{source:t.index,target:a.index,source_node_id:t.index,target_node_id:a.index,value:e.value,label:e.label}}));return{nodes:f,links:m}}(t,a);return s.links.length>0&&s.nodes.length>0?n.value.set_no_data_flag(!1):n.value.set_no_data_flag(!0),s}();r.value=e,s.value=!1}()},d=function(){u()};function _(e){return e.data?.info?.traffic}return(e,t)=>(Is(),Ms("div",RS,[Vs("div",DS,[Vs("div",zS,[s.value?(Is(),Fs(yf,{key:0})):Ys("v-if",!0),Vs("div",qS,[Vs("div",{class:K(["align-items-center justify-content-end mb-3",[s.value?"ntopng-gray-out":""]]),style:{height:"70vh"}},[Vs("div",BS,[Vs("div",VS,[Vs("div",HS,[Vs("div",GS,[Vs("label",WS,te(a("hosts"))+": ",1),Hs(l_,{selected_option:o.value,"onUpdate:selected_option":t[0]||(t[0]=e=>o.value=e),options:i,onSelect_option:u},null,8,["selected_option","options","onSelect_option"])])]),Vs("div",null,[KS,Vs("div",null,[Vs("button",{class:"btn btn-link m-1",tabindex:"0",type:"button",onClick:t[1]||(t[1]=(...e)=>d&&d(...e))},[...JS])])])])]),Hs(LS,{ref_key:"sankey_chart",ref:n,onNode_click:c,sankey_data:r.value},null,8,["onNode_click","sankey_data"])],2)])])])]))},__file:"http_src/vue/page-host-details-flow-sankey.vue"};const ZS={isEmptyOrNull:e=>!(null!=e&&""!=e&&0!=e),isEmptyArrayOrNull:e=>!(null!=e&&0!==e.length)};function XS(e){if("number"==typeof e)return e;if("string"==typeof e){if(""==e)return 0;e=e.split(",").join(""),e=parseInt(e)}else e=0;return e}const QS=function(e,t,a){return t==e&&1==a&&(t=99999999999),t},eN=function(e,t,a){return e=XS(e),t=XS(t),1==a?e-t:t-e},tN=function(e,t,a,l){return e=QS(l,e,a),t=QS(l,t,a),eN(e,t,a)},aN={sortByIP:function(e,t,a){return e=NtopUtils.convertIPAddress(e),t=NtopUtils.convertIPAddress(t),1==a?e.localeCompare(t):t.localeCompare(e)},sortByName:function(e,t,a){return 1==a?e?.localeCompare(t):t?.localeCompare(e)},sortByNumber:eN,sortByNumberWithNormalizationValue:tN},lN={key:0,class:"alert alert-info alert-dismissable"},nN=Vs("span",{class:"text-info me-1"},null,-1),sN={class:"form-group ms-2 me-2 mt-3 row"},iN={class:"col-form-label col-sm-2"},oN={class:"col-sm-10"},rN={class:"btn-group btn-group-toggle","data-bs-toggle":"buttons"},cN={key:1,class:"form-group ms-2 me-2 mt-3 row"},uN={class:"col-form-label col-sm-2"},dN={class:"col-sm-10"},_N=["placeholder"],pN={key:2,class:"form-group ms-2 me-2 mt-3 row"},fN={class:"col-form-label col-sm-2"},mN={class:"col-sm-10"},vN={key:3,class:"form-group ms-2 me-2 mt-3 row"},hN={class:"col-form-label col-sm-2"},gN={class:"col-sm-10"},bN={key:4,class:"form-group ms-2 me-2 mt-3 row"},yN={class:"col-form-label col-sm-2"},wN={class:"col-10"},xN={key:5,class:"form-group ms-2 me-2 mt-3 row"},kN={class:"col-form-label col-sm-2"},$N={class:"col-10"},SN={class:"col-form-label col-sm-2"},NN={class:"col-10"},CN={key:6,class:"form-group ms-2 me-2 mt-3 row"},EN={class:"col-form-label col-sm-2"},AN={class:"col-10"},TN={key:7,class:"form-group ms-2 me-2 mt-3 row"},IN={class:"col-form-label col-sm-2"},ON={class:"col-10"},PN={key:8,class:"form-group ms-2 me-2 mt-3 row"},UN={class:"col-form-label col-sm-2"},jN={key:0,class:"col-10"},MN={key:1,class:"col-10"},FN={key:2,class:"col-10"},LN={key:3,class:"col-10"},RN={key:4,class:"col-10"},DN={key:5,class:"col-10"},zN={key:6,class:"col-10"},qN={key:9,class:"form-group ms-2 me-2 mt-3 row"},BN={class:"col-form-label col-sm-2"},VN={class:"col-10"},HN={class:"form-group ms-2 me-2 mt-3 row",style:{"margin-top":"3px"}},GN={class:"col-form-label col-sm-2"},WN={class:"col-sm-3"},KN={class:"btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},JN=["value","id"],YN=["id","for"],ZN=["value","id"],XN=["id","for"],QN=["value","id"],eC=["id","for"],tC={class:"col-sm-2 btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},aC=["value","id"],lC=["id","for"],nC={key:10,class:"message alert alert-warning mt-3"},sC=["disabled"],iC=["disabled"];var oC={__name:"modal-add-host-rules",props:{metric_list:Array,ifid_list:Array,flow_exporter_devices:Array,interface_metric_list:Array,flow_device_metric_list:Array,frequency_list:Array,has_vlans:Boolean,has_profiles:Boolean,init_func:Function,page_csrf:String},emits:["add","edit"],setup(e,{expose:t,emit:l}){ma(""),ma("");let n=ma(!1),s=ma(!1);const i=ma(null),o=l;let r=i18n("if_stats_config.add_host_rules_title");const c=i18n("if_stats_config.host_placeholder"),u=ma(!1),d=e=>i18n(e),_=ma([]),p=ma(null),f=ma(null),m=ma([]),v=ma([]),h=ma([]),g=ma([]),b=ma([]),y=ma([]),w=ma([]),x=ma(null),k=ma(null),S=ma({}),N=ma({}),C=ma({}),E=ma({}),A=ma({}),T=ma({}),I=ma({}),O=ma({}),P=ma(!0),U=ma({}),j=ma(!0),M=ma("hosts"),F=ma(!1),L=ma(!1),R=ma(null),D=ma(null),z=ma(!1),q=ma(null),B=ma(null),V=ma({}),H=ma({}),G=ma({}),W=ma(null),J=ma([]),Y=ma({}),Z=ma(null),X=ma({}),Q=ma([]),ee=ma({}),ae=ma(null),le=ma({});let ne=ma([]);const se=[d("if_stats_config.note_1"),d("if_stats_config.note_2"),d("if_stats_config.note_3"),d("if_stats_config.note_4")],ie=[d("if_stats_config.note_5")],oe=ma([{title:d("volume"),label:d("volume"),id:"volume",active:!0},{title:d("throughput"),label:d("throughput"),id:"throughput",active:!1},{title:d("percentage"),label:d("percentage"),id:"percentage",active:!1}]),re=ma([{title:d("volume"),label:d("volume"),id:"volume",active:!0},{title:d("throughput"),label:d("throughput"),id:"throughput",active:!1},{title:d("percentage"),label:d("percentage"),id:"percentage",active:!1}]),ce=ma([{title:d("volume"),label:d("volume"),id:"volume",active:!0,measure_unit:"bps"},{title:d("throughput"),label:d("throughput"),id:"throughput",active:!1,measure_unit:"bps"},{title:d("percentage"),label:d("percentage"),id:"percentage",active:!1,measure_unit:"number"},{title:d("value"),label:d("value"),id:"value",active:!1,measure_unit:"number"}]),ue=ma([{title:d("percentage"),label:d("percentage"),id:"absolute_percentage",active:!1,measure_unit:"number"}]),de=ma([{title:d("kb"),label:d("kb"),id:"kb",value:1024,active:!1},{title:d("mb"),label:d("mb"),id:"mb",value:1048576,active:!1},{title:d("gb"),label:d("gb"),id:"gb",value:1073741824,active:!0,default_active:!0}]),_e=ma([{title:d("kbps"),label:d("kbps"),id:"kbps",value:1e3,active:!1},{title:d("mbps"),label:d("mbps"),id:"mbps",value:1e6,active:!1},{title:d("gbps"),label:d("gbps"),id:"gbps",value:1e9,active:!0,default_active:!0}]),pe=ma([{title:"+",label:">",id:"plus",value:1,active:!1},{title:"-",label:"<",id:"minus",value:-1,active:!0,default_active:!0}]),fe=[{title:"+",label:"%",id:"plus",value:1,active:!0}],me=ma(null),ve=ma(null),he=e;function ge(e){e.forEach((e=>e.active=1==e.default_active))}he.page_csrf;const be=e=>{M.value=e,ne.value=oe.value,"host_pool"==e||"CIDR"==e?(we(),U.value="host_pool"==e?ne.value[1]:ne.value[0],j.value=!0):(U.value=oe.value[0],"Host"==e?xe():"interface"==e?ke():"vlan"==e?$e():j.value=!0)},ye=()=>{let e=[];"flowdev_port:usage"==O.value.id?(ue.value.forEach((t=>{"number"==t.measure_unit&&e.push(t)})),ne.value=e):(re.value.forEach((t=>{"value"!=t.id&&e.push(t)})),ne.value=e),U.value=ne.value[0]},we=e=>{let t=[];"host_pool"==M.value&&"bps"!=I.value.measure_unit||"CIDR"==M.value&&"bps"!=G.value.measure_unit?(ce.value.forEach((e=>{"number"==e.measure_unit&&t.push(e)})),ne.value=t):(ce.value.forEach((e=>{"value"!=e.id&&t.push(e)})),ne.value=t),null!=e&&0!=e||(U.value=ne.value[0])},xe=()=>{1==S.value.show_volume?j.value=!0:j.value=!1},ke=()=>{1==T.value.show_volume?j.value=!0:j.value=!1},$e=()=>{1==X.value.show_volume?j.value=!0:j.value=!1},Se=()=>{let e=new RegExp(yp.get_data_pattern("ip"));P.value=!(e.test(me.value)||"*"===me.value)},Ne=e=>{const t=e.target.id;pe.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1}))},Ce=e=>{const t=e.target.id;"throughput"==U.value.id?_e.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):"volume"==U.value.id?de.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):"percentage"==U.value.id&&fe.forEach((e=>{e.id===t?e.active=!0:e.active=!1}))},Ee=e=>{let t="";"interface"!=M.value&&(t=me.value);const a=N.value.id;let l=S.value.id,n=S.value.label;const s=M.value;let i,r,c,u,d,_=U.value.id,p=e?D.value:null;!1===j.value&&(_="",i="",u=ve.value.value),"throughput"==_?(pe.value.forEach((e=>{e.active&&(c=e.value)})),d=parseInt(c),_e.value.forEach((e=>{e.active&&(r=e.value)})),u=r*parseInt(ve.value.value)):"volume"==_?(pe.value.forEach((e=>{e.active&&(c=e.value)})),d=parseInt(c),de.value.forEach((e=>{e.active&&(r=e.value)})),u=r*parseInt(ve.value.value)):"percentage"==_?(pe.value.forEach((e=>{e.active&&(c=e.value)})),d=parseInt(c),u=parseInt(ve.value.value)):"value"!=_&&"absolute_percentage"!=_||(pe.value.forEach((e=>{e.active&&(c=e.value)})),d=parseInt(c),u=d*parseInt(ve.value.value));let f="add";if(1==e&&(f="edit"),"Host"==M.value)i=S.value.extra_metric?S.value.extra_metric:null,o(f,{host:t,frequency:a,metric:l,metric_label:n,threshold:u,metric_type:_,extra_metric:i,rule_type:s,rule_threshold_sign:d,rule_id:p});else if("interface"==M.value){i=T.value.extra_metric?T.value.extra_metric:null,l=T.value.id,n=T.value.label;const e=T.value.id,t=C.value.id;o(f,{frequency:a,metric:e,metric_label:n,threshold:u,metric_type:_,extra_metric:i,rule_type:s,interface:t,rule_threshold_sign:d,rule_id:p})}else if("exporter"==M.value){let e=A.value.id;A.value.label;const t=E.value.id;"*"==t&&(e="*");const l=E.value.ifid;let n;O.value.id?n=y.value.find((e=>e.id==O.value.id)):(n=y.value.find((e=>null===e.id)),null!=e&&"*"!=e?(n=O.value,n.id="flowdev_port:traffic"):(n=O.value,n.id="flowdev:traffic"));let i=n.label;o(f,{host:t,frequency:a,metric:n.id,metric_label:i,threshold:u,metric_type:_,rule_type:s,interface:e,rule_ifid:l,rule_threshold_sign:d,rule_id:p})}else if("CIDR"==M.value){l=G.value.schema,n=G.value.label,t=H.value.id;const e=H.value.network_id;o(f,{host:t,frequency:a,metric:l,metric_label:n,threshold:u,metric_type:_,extra_metric:i,rule_type:s,rule_threshold_sign:d,rule_id:p,network:e})}else if("host_pool"==M.value){l=I.value.schema,n=I.value.label;const e=V.value.id,t=V.value.label;o(f,{host_pool_id:e,host_pool_label:t,frequency:a,metric:l,metric_label:n,threshold:u,metric_type:_,extra_metric:i,rule_type:s,rule_threshold_sign:d,rule_id:p})}else if("vlan"==M.value){l=X.value.schema,n=X.value.label;const e=Y.value.id,t=Y.value.label;o(f,{vlan_id:e,vlan_label:t,frequency:a,metric:l,metric_label:n,threshold:u,metric_type:_,extra_metric:i,rule_type:s,rule_threshold_sign:d,rule_id:p})}else if("profiles"==M.value){l=le.value.schema,n=le.value.label;const e=ee.value.id;o(f,{profile:e,frequency:a,metric:l,metric_label:n,threshold:u,metric_type:_,extra_metric:i,rule_type:s,rule_threshold_sign:d,rule_id:p})}},Ae=()=>{Ee(!0)};async function Te(){let e=[];if("*"==E.value.id)return;const t=a.buildURL(`${http_prefix}/lua/pro/rest/v2/get/flowdevice/stats.lua?ip=${E.value.id}&ifid=${E.value.ifid}`);await $.get(t,(function(t,a){e=t.rsp}));const l=[{id:"*",value:"*",label:"*",timeseries_available:e[0]?.timeseries_available}];e.forEach((e=>{l.push({id:e.id,label:e.name,timeseries_available:e.timeseries_available})})),h.value=l,A.value=h.value[1],F.value=h.value[0]?.timeseries_available}const Ie=function(e){const t=[{id:"*",value:"*",label:"*"}];return e.forEach((e=>{const a=e.probe_ip;t.push({id:a,label:a,value:a,ifid:e.ifid})})),t.sort(((e,t)=>aN.sortByIP(e.label,t.label,1))),t},Oe=function(e){const t=[];return e.forEach((e=>{if(0!=e.key){let a=e.key,l=e.column_vlan.split(">");l[1].split("[").length>1&&(a=l[1].split("<")[0]),t.push({id:e.key,label:a,value:e.key})}})),t.sort(((e,t)=>aN.sortByName(e.label,t.label,1))),t},Pe=function(e){const t=[];return e.forEach((e=>{""!=e.column_profile&&t.push({id:e.column_profile,label:e.column_profile,value:e.column_profile})})),t.sort(((e,t)=>aN.sortByName(e.id,t.id,1))),t},Ue=function(){Te()};return dn((()=>{oe.value.forEach((e=>{e.active&&(U.value=e)})),z.value=!1})),t({show:e=>{null!=e?(e=>{null!=e&&(r=d("if_stats_config.edit_host_rules_title"),L.value=!0,D.value=e.row_id,P.value=!1,pe.value.forEach((t=>{t.active=t.value==e.threshold_sign})),oe.value.forEach((t=>{t.id==e.metric_type?(t.active=!0,U.value=t):t.active=!1})),ne.value=oe.value,"volume"==e.metric_type?de.value.forEach((t=>{if(e.threshold%t.value==0){let a=e.threshold/t.value;a<1024?(t.active=!0,ve.value.value=0==a?1:a):t.active=!1}else t.active=!1})):"throughput"==e.metric_type?_e.value.forEach((t=>{if(e.threshold%t.value==0){let a=e.threshold/t.value;a<1e3?(t.active=!0,ve.value.value=0==a?1:a):t.active=!1}else t.active=!1})):"percentage"==e.metric_type?ve.value.value=e.threshold:"value"!=e.metric_type&&"absolute_percentage"!=e.metric_type||(ve.value.value=e.threshold*e.threshold_sign),M.value=e.rule_type,"interface"==M.value?(m.value.forEach((t=>{t.id==e.target&&(C.value=t)})),null!=e.extra_metric?g.value.forEach((t=>{t.id==e.metric&&t.extra_metric==e.extra_metric&&(T.value=t)})):g.value.forEach((t=>{t.id==e.metric&&(T.value=t)}))):"exporter"==M.value?(v.value.forEach((t=>{t.id==e.target&&(E.value=t)})),h.value.forEach((t=>{t.id==e.flow_exp_ifid&&(A.value=t)}))):"Host"==M.value?(me.value=e.target,null!=e.extra_metric?_.value.forEach((t=>{e.metric.contains(t.id)&&t.extra_metric==e.extra_metric&&(S.value=t)})):_.value.forEach((t=>{t.id==e.metric&&(S.value=t)}))):"CIDR"==M.value?(B.value.forEach((t=>{t.id==e.target&&(H.value=t)})),W.value.forEach((t=>{t.label==e.metric_label&&(G.value=t)})),we(!0),ne.value.forEach((t=>{t.id==e.metric_type&&(U.value=t)}))):"host_pool"==M.value?(q.value.forEach((t=>{t.id==e.target&&(V.value=t)})),b.value.forEach((t=>{t.label==e.metric_label&&(I.value=t)})),we(),ne.value.forEach((t=>{t.id==e.metric_type&&(U.value=t)}))):"vlan"==M.value?(Y.value=J.value.find((t=>t.id==e.target)),Z.value.forEach((t=>{t.schema==e.metric&&(X.value=t)}))):"profiles"==M.value&&(ee.value=Q.value.find((t=>t.id==e.target)),le.value=ae.value.find((t=>t.schema==e.metric))))})(e):async function(){z.value=!1,me.value="",M.value="Host",C.value=m.value[0],S.value=_.value[0],T.value=g.value[0],O.value=y.value[0],L.value=!1,r=i18n("if_stats_config.add_host_rules_title"),N.value=w.value[0],U.value=oe.value[0],E.value=v.value[1],null!=E.value&&Te(),oe.value.forEach((e=>e.active=!1)),oe.value[0].active=!0,null!=q.value&&(V.value=q.value[0]),I.value=b.value[0],null!=B.value&&(H.value=B.value[0]),null!=W.value&&(G.value=W.value[0]),ge(de.value),ge(_e.value),ge(pe.value),M.value="Host",P.value=!0,ve.value.value=1,D.value=null,ne.value=oe.value,"Host"==M||"interface"==M?U.vale=oe.value[0]:U.value=ne.value[0],he.has_vlans&&(Y.value=J.value[0],X.value=Z.value[0])}(),i.value.show()},close:()=>{L.value=!1,z.value=!1,i.value.close()},metricsLoaded:async(e,t,a,l,i,o,r,c,d,h,x,k,$,A,T,I)=>{u.value=!0,_.value=e,g.value=a,m.value=function(e){let t=[];return e.forEach((e=>{let a={id:e.ifid,label:e.name};t.push(a)})),t.sort(((e,t)=>function(e,t){let a=e.label.toLowerCase(),l=t.label.toLowerCase();return a<l?-1:a>l?1:0}(e,t))),t}(t),w.value=he.frequency_list,N.value=w.value[0],S.value=_.value[0],C.value=m.value[0],R.value=o,r&&(p.value=r),c&&(f.value=c),v.value=Ie(l),ZS.isEmptyArrayOrNull(d)||(n.value=!0),q.value=d,b.value=x,ZS.isEmptyArrayOrNull(h)||(s.value=!0),B.value=h,W.value=k,y.value=i,E.value=v.value[1],null!=E.value&&Te(),he.has_vlans&&(J.value=Oe($),Y.value=J.value[0],Z.value=A,X.value=Z.value[1]),he.has_profiles&&(Q.value=Pe(T),ee.value=Q.value[0],ae.value=I,le.value=ae.value[0])},invalidAdd:()=>{z.value=!0}}),(e,t)=>(Is(),Fs(np,{onShowed:t[28]||(t[28]=e=>{}),ref_key:"modal_id",ref:i},{title:vl((()=>[Ks(te(ya(r)),1)])),body:vl((()=>[z.value?(Is(),Ms("div",lN,[nN,Vs("span",null,te(d("rule_already_present")),1)])):Ys("v-if",!0),Ys(" Target information, here an IP is put "),Vs("div",sN,[Vs("label",iN,[Vs("b",null,te(d("if_stats_config.add_rules_type")),1)]),Vs("div",oN,[Vs("div",rN,[Vs("label",{class:K(["btn",["Host"==M.value?"btn-primary active":"btn-secondary"]])},[Vs("input",{class:"btn-check",type:"radio",name:"rule_type",value:"hosts",onClick:t[0]||(t[0]=e=>be("Host"))}),Ks(" "+te(d("if_stats_config.add_rules_type_host")),1)],2),Vs("label",{class:K(["btn",["interface"==M.value?"btn-primary active":"btn-secondary"]])},[Vs("input",{onClick:t[1]||(t[1]=e=>be("interface")),class:"btn-check",type:"radio",name:"rule_type",value:"interface"}),Ks(" "+te(d("if_stats_config.add_rules_type_interface")),1)],2),1==F.value?(Is(),Ms("label",{key:0,class:K(["btn",["exporter"==M.value?"btn-primary active":"btn-secondary"]])},[Vs("input",{onClick:t[2]||(t[2]=e=>be("exporter")),class:"btn-check",type:"radio",name:"rule_type",value:"exporter"}),Ks(" "+te(d("if_stats_config.add_rules_type_flow_exporter")),1)],2)):Ys("v-if",!0),1==ya(n)?(Is(),Ms("label",{key:1,class:K(["btn",["host_pool"==M.value?"btn-primary active":"btn-secondary"]])},[Vs("input",{onClick:t[3]||(t[3]=e=>be("host_pool")),class:"btn-check",type:"radio",name:"rule_type",value:"host_pool"}),Ks(" "+te(d("if_stats_config.add_rules_type_host_pool")),1)],2)):Ys("v-if",!0),1==ya(s)?(Is(),Ms("label",{key:2,class:K(["btn",["CIDR"==M.value?"btn-primary active":"btn-secondary"]])},[Vs("input",{onClick:t[4]||(t[4]=e=>be("CIDR")),class:"btn-check",type:"radio",name:"rule_type",value:"CIDR"}),Ks(" "+te(d("if_stats_config.add_rules_type_cidr")),1)],2)):Ys("v-if",!0),1==he.has_vlans?(Is(),Ms("label",{key:3,class:K(["btn",["vlan"==M.value?"btn-primary active":"btn-secondary"]])},[Vs("input",{onClick:t[5]||(t[5]=e=>be("vlan")),class:"btn-check",type:"radio",name:"rule_type",value:"vlan"}),Ks(" "+te(d("if_stats_config.add_rules_type_vlans")),1)],2)):Ys("v-if",!0),1==he.has_profiles?(Is(),Ms("label",{key:4,class:K(["btn",["profiles"==M.value?"btn-primary active":"btn-secondary"]])},[Vs("input",{onClick:t[6]||(t[6]=e=>be("profiles")),class:"btn-check",type:"radio",name:"rule_type",value:"profiles"}),Ks(" "+te(d("if_stats_config.add_rules_type_profiles")),1)],2)):Ys("v-if",!0)])])]),"Host"==M.value?(Is(),Ms("div",cN,[Vs("label",uN,[Vs("b",null,te(d("if_stats_config.target")),1)]),Vs("div",dN,[wn(Vs("input",{"onUpdate:modelValue":t[7]||(t[7]=e=>me.value=e),onInput:Se,class:"form-control",type:"text",placeholder:ya(c),required:""},null,40,_N),[[jo,me.value]])])])):Ys("v-if",!0),"CIDR"==M.value?(Is(),Ms("div",pN,[Vs("label",fN,[Vs("b",null,te(d("if_stats_config.target")),1)]),Vs("div",mN,[Hs(l_,{selected_option:H.value,"onUpdate:selected_option":t[8]||(t[8]=e=>H.value=e),options:B.value},null,8,["selected_option","options"])])])):Ys("v-if",!0),"host_pool"==M.value?(Is(),Ms("div",vN,[Vs("label",hN,[Vs("b",null,te(d("if_stats_config.target")),1)]),Vs("div",gN,[Hs(l_,{selected_option:V.value,"onUpdate:selected_option":t[9]||(t[9]=e=>V.value=e),options:q.value},null,8,["selected_option","options"])])])):Ys("v-if",!0),"interface"==M.value?(Is(),Ms("div",bN,[Vs("label",yN,[Vs("b",null,te(d("if_stats_config.target_interface")),1)]),Vs("div",wN,[Hs(l_,{selected_option:C.value,"onUpdate:selected_option":t[10]||(t[10]=e=>C.value=e),options:m.value},null,8,["selected_option","options"])])])):Ys("v-if",!0),"exporter"==M.value&&1==F.value?(Is(),Ms("div",xN,[Vs("label",kN,[Vs("b",null,te(d("if_stats_config.target_exporter_device")),1)]),Vs("div",$N,[Hs(l_,{selected_option:E.value,"onUpdate:selected_option":t[11]||(t[11]=e=>E.value=e),options:v.value,onSelect_option:Ue},null,8,["selected_option","options"])]),"*"!=E.value.id?(Is(),Ms(Ss,{key:0},[Vs("label",SN,[Vs("b",null,te(d("if_stats_config.target_exporter_device_ifid")),1)]),Vs("div",NN,[Hs(l_,{selected_option:A.value,"onUpdate:selected_option":t[12]||(t[12]=e=>A.value=e),options:h.value},null,8,["selected_option","options"])])],64)):Ys("v-if",!0)])):Ys("v-if",!0),"vlan"==M.value?(Is(),Ms("div",CN,[Vs("label",EN,[Vs("b",null,te(d("if_stats_config.target_vlan")),1)]),Vs("div",AN,[Hs(l_,{selected_option:Y.value,"onUpdate:selected_option":t[13]||(t[13]=e=>Y.value=e),options:J.value},null,8,["selected_option","options"])])])):Ys("v-if",!0),Ys(" Traffic Profiles "),"profiles"==M.value?(Is(),Ms("div",TN,[Vs("label",IN,[Vs("b",null,te(d("if_stats_config.target_profile")),1)]),Vs("div",ON,[Hs(l_,{selected_option:ee.value,"onUpdate:selected_option":t[14]||(t[14]=e=>ee.value=e),options:Q.value},null,8,["selected_option","options"])])])):Ys("v-if",!0),Ys(" Metric information, here a metric is selected (e.g. DNS traffic) "),u.value?(Is(),Ms("div",PN,[Vs("label",UN,[Vs("b",null,te(d("if_stats_config.metric")),1)]),"Host"==M.value?(Is(),Ms("div",jN,[Hs(l_,{selected_option:S.value,"onUpdate:selected_option":t[15]||(t[15]=e=>S.value=e),onSelect_option:t[16]||(t[16]=e=>xe()),options:_.value},null,8,["selected_option","options"])])):"interface"==M.value?(Is(),Ms("div",MN,[Hs(l_,{selected_option:T.value,"onUpdate:selected_option":t[17]||(t[17]=e=>T.value=e),onSelect_option:t[18]||(t[18]=e=>ke()),options:g.value},null,8,["selected_option","options"])])):"exporter"==M.value?(Is(),Ms("div",FN,[Hs(l_,{selected_option:O.value,"onUpdate:selected_option":t[19]||(t[19]=e=>O.value=e),onSelect_option:ye,options:y.value},null,8,["selected_option","options"])])):"host_pool"==M.value?(Is(),Ms("div",LN,[Hs(l_,{selected_option:I.value,"onUpdate:selected_option":t[20]||(t[20]=e=>I.value=e),onSelect_option:t[21]||(t[21]=e=>we()),options:b.value},null,8,["selected_option","options"])])):"CIDR"==M.value?(Is(),Ms("div",RN,[Hs(l_,{selected_option:G.value,"onUpdate:selected_option":t[22]||(t[22]=e=>G.value=e),onSelect_option:t[23]||(t[23]=e=>we()),options:W.value},null,8,["selected_option","options"])])):"vlan"==M.value?(Is(),Ms("div",DN,[Hs(l_,{selected_option:X.value,"onUpdate:selected_option":t[24]||(t[24]=e=>X.value=e),options:Z.value,onSelect_option:$e},null,8,["selected_option","options"])])):"profiles"==M.value?(Is(),Ms("div",zN,[Hs(l_,{selected_option:le.value,"onUpdate:selected_option":t[25]||(t[25]=e=>le.value=e),options:ae.value},null,8,["selected_option","options"])])):Ys("v-if",!0)])):Ys("v-if",!0),Ys(" Frequency information, a frequency of 1 day, 5 minute or 1 hour for example "),u.value?(Is(),Ms("div",qN,[Vs("label",BN,[Vs("b",null,te(d("if_stats_config.frequency")),1)]),Vs("div",VN,[Hs(l_,{selected_option:N.value,"onUpdate:selected_option":t[26]||(t[26]=e=>N.value=e),options:w.value},null,8,["selected_option","options"])])])):Ys("v-if",!0),Ys(" Threshold information, maximum amount of bytes "),Vs("div",HN,[Vs("label",GN,[Vs("b",null,te(d("if_stats_config.threshold")),1)]),j.value?(Is(),Ms(Ss,{key:0},[Vs("div",WN,[Hs(l_,{selected_option:U.value,"onUpdate:selected_option":t[27]||(t[27]=e=>U.value=e),options:ya(ne)},null,8,["selected_option","options"])]),Vs("div",{class:K(["col-3",["throughput"==U.value.id?"p-0":""]])},[Vs("div",KN,["throughput"==U.value.id?(Is(!0),Ms(Ss,{key:0},An(_e.value,(e=>(Is(),Ms(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:x,name:"threshold_measure"},null,8,JN),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:Ce,for:e.id},te(e.label),11,YN)],64)))),256)):Ys("v-if",!0),"percentage"==U.value.id?(Is(),Ms(Ss,{key:1},An(fe,(e=>(Is(),Ms(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:x,name:"threshold_measure"},null,8,ZN),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:Ce,for:e.id},te(e.label),11,XN)],64)))),64)):Ys("v-if",!0),"volume"==U.value.id?(Is(!0),Ms(Ss,{key:2},An(de.value,(e=>(Is(),Ms(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:x,name:"threshold_measure"},null,8,QN),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:Ce,for:e.id},te(e.label),11,eC)],64)))),256)):Ys("v-if",!0)])],2),Vs("div",tC,[(Is(!0),Ms(Ss,null,An(pe.value,(e=>(Is(),Ms(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_sign",ref:k,name:"threshold_sign"},null,8,aC),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:Ne,for:e.id},te(e.label),11,lC)],64)))),256))])],64)):Ys("v-if",!0),Vs("div",{class:K([j.value?"col-sm-2":"col-sm-8"])},["percentage"==U.value.id?(Is(),Ms("input",{key:0,value:"1",ref_key:"threshold",ref:ve,type:"number",name:"threshold",class:"form-control",max:"100",min:"1",required:""},null,512)):(Is(),Ms("input",{key:1,value:"1",ref_key:"threshold",ref:ve,type:"number",name:"threshold",class:"form-control",max:"1023",min:"1",required:""},null,512))],2)]),"percentage"==U.value.id?(Is(),Ms("div",nC,te(d("show_alerts.host_rules_percentage")),1)):Ys("v-if",!0)])),footer:vl((()=>[Hs(fm,{note_list:se,add_sub_notes:!0,sub_note_list:ie}),0==L.value?(Is(),Ms("button",{key:0,type:"button",onClick:Ee,class:"btn btn-primary",disabled:P.value&&"Host"==M.value},te(d("add")),9,sC)):(Is(),Ms("button",{key:1,type:"button",onClick:Ae,class:"btn btn-primary",disabled:P.value&&"Host"==M.value},te(d("apply")),9,iC))])),_:1},512))},__file:"http_src/vue/modal-add-host-rules.vue"};const rC={class:"row"},cC={class:"col-md-12 col-lg-12"},uC={class:"card"},dC=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),_C={class:"card-body"},pC={class:"mb-4"},fC={id:"host_rules"},mC={class:"card-footer"};var vC={__name:"page-host-rules",props:{page_csrf:String,has_vlans:Boolean,has_profiles:Boolean,ifid:String},setup(e){const t=e,l=ma(null),n=ma(null),s=ma(null),i=e=>i18n(e),o=ma({}),r=ma({}),c=ma(!1),u=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=host`,d=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=interface`,_=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=host_pool`,p=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=CIDR`,f=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=vlan`,m=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=profiles`,v=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=exporter`,h=`${http_prefix}/lua/pro/rest/v2/get/flowdevices/stats.lua`;http_prefix;const g=`${http_prefix}/lua/rest/v2/get/host/pool/pools.lua`,b=`${http_prefix}/lua/rest/v2/get/network/networks.lua`,y=`${http_prefix}/lua/rest/v2/get/ntopng/interfaces.lua`,w=`${http_prefix}/lua/get_vlans_data.lua`,x=`${http_prefix}/lua/get_traffic_profiles.lua`,k=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_data.lua`,S=`${http_prefix}/lua/pro/rest/v2/add/interface/host_rules/add_host_rule.lua`,N=`${http_prefix}/lua/pro/rest/v2/delete/interface/host_rules/delete_host_rule.lua`,C=[i("if_stats_config.generic_notes_1"),i("if_stats_config.generic_notes_2"),i("if_stats_config.generic_notes_3")],E={ifid:t.ifid,csrf:t.page_csrf,gui:!0};let A={},T=i("if_stats_config.delete_host_rules_title");i("if_stats_config.edit_local_network_rules");let I=i("if_stats_config.delete_host_rules_description"),O=[],P=[],U=[],j=[],M=[],F=[],L=[],R=[],D=[],z=[],q=[],B=[],V=[];const H=[{title:i18n("show_alerts.5_min"),label:i18n("show_alerts.5_min"),id:"5min",value:"5min"},{title:i18n("show_alerts.hourly"),label:i18n("show_alerts.hourly"),id:"hour",value:"hour"},{title:i18n("show_alerts.daily"),label:i18n("show_alerts.daily"),id:"day",value:"day"}];async function G(e){await Y(e)}const W=function(){const e=r.value;return r.value=null,e},K=function(){l.value.reload()},J=async function(){const e=o.value,t=a.buildURL(N,{...E,rule_id:e.id,rule_type:e.rule_type});await $.post(t,(function(e,t){K()}))},Y=async function(e){e.csrf=t.page_csrf,e.ifid=t.ifid;const a=await ntopng_utility.http_post_request(S,e);c.value=a.rsp,0==c.value?(s.value.close(),K()):s.value.invalidAdd()},Z=function(e){let t={handlerId:"delete_host",onClick:()=>{var t;t=e,o.value=t,n.value.show()}},a={handlerId:"edit_rule",onClick:()=>{var t;t=e,r.value=t,o.value=t,s.value.show(t)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:a,icon:"fa-edit",title:i18n("edit")},{class:"pointer",handler:t,icon:"fa-trash",title:i18n("delete")}])},X=function(){const e=[];e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(){K()}},{text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){s.value.show()}});const t=[{columnName:i("actions"),width:"5%",targets:0,name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return Z(a)}},{columnName:i("id"),visible:!1,targets:1,name:"id",data:"id",className:"text-nowrap",responsivePriority:1},{columnName:i("if_stats_config.target"),targets:2,width:"20",name:"target",data:"target",className:"text-nowrap",responsivePriority:1,render:function(e,t,a){return function(e,t){let a="";if(t.rule_type&&"interface"==t.rule_type)a=t.selected_iface;else if(!t.rule_type||"Host"!=t.rule_type&&"CIDR"!=t.rule_type)if("host_pool"==t.rule_type)a=t.host_pool_label;else if("vlan"==t.rule_type)a=t.vlan_label;else if("profiles"==t.rule_type)a=t.target;else if(t.rule_type&&"exporter"==t.rule_type&&"flowdev:traffic"==t.metric)a=t.target;else{let e=""!=t.flow_exp_ifid_name&&null!=t.flow_exp_ifid_name?t.flow_exp_ifid_name:t.flow_exp_ifid;a=t.target+" "+i("on_interface")+": "+e}else a=t.target;return a}(0,a)}},{columnName:i("if_stats_config.rule_type"),targets:3,width:"20",name:"rule_type",data:"rule_type",className:"text-center",responsivePriority:1,render:function(e,t,a){return function(e,t){let a="";return t.rule_type&&"interface"==t.rule_type?a="<span class='badge bg-secondary'>"+i("interface")+" <i class='fas fa-ethernet'></i></span>":t.rule_type&&"Host"==t.rule_type?a="<span class='badge bg-secondary'>"+i("about.host_checks_directory")+" <i class='fas fa-laptop'></i></span>":t.rule_type&&"host_pool"==t.rule_type?a="<span class='badge bg-secondary'>"+i("alert_entities.host_pool")+" <i class='fas fa-laptop'></i></span>":t.rule_type&&"CIDR"==t.rule_type?a="<span class='badge bg-secondary'>"+i("network")+" <i class='fas fa-laptop'></i></span>":t.rule_type&&"exporter"==t.rule_type&&"flowdev:traffic"==t.metric?a="<span class='badge bg-secondary'>"+i("flow_exporter_device")+" <i class='fas fa-laptop'></i></span>":t.rule_type&&"exporter"==t.rule_type&&t.metric.includes("flowdev_port")?a="<span class='badge bg-secondary'>"+i("interface_flow_exporter_device")+" <i class='fas fa-ethernet'></i></span>":t.rule_type&&"vlan"==t.rule_type?a="<span class='badge bg-secondary'>"+i("vlan")+" <i class='fas fa-ethernet'></i></span>":t.rule_type&&"profiles"==t.rule_type&&(a="<span class='badge bg-secondary'>"+i("if_stats_config.target_profile")+" <i class='fas fa-ethernet'></i></span>"),a}(0,a)}},{columnName:i("if_stats_config.metric"),targets:4,width:"10",name:"metric",data:"metric",className:"text-center",responsivePriority:1,render:function(e,t,a){return function(e,t){let a=e;return t.metric_label?a=t.metric_label:"interface"!=t.rule_type?O.forEach((l=>{l.id==e&&(t.extra_metric?t.extra_metric==l.extra_metric&&(a=l.label):a=l.label)})):P.forEach((l=>{l.id==e&&(t.extra_metric?t.extra_metric==l.extra_metric&&(a=l.label):a=l.label)})),a}(e,a)}},{columnName:i("if_stats_config.frequency"),targets:5,width:"10",name:"frequency",data:"frequency",className:"text-center",responsivePriority:1,render:function(e){return function(e){let t="";return H.forEach((a=>{e==a.id&&(t=a.title)})),t}(e)}},{columnName:i("if_stats_config.last_measurement"),targets:6,width:"10",name:"last_measurement",data:"last_measurement",className:"text-center",responsivePriority:1,render:function(e,t,l){return function(e,t){let l=parseInt(e);if("*"==t.target)return"";if(null==e)return"";if(t.metric_type&&"throughput"==t.metric_type)l=a.bitsToSize(e);else if(t.metric_type&&"volume"==t.metric_type)l=a.bytesToSize(e);else if(t.metric_type&&t.metric_type.includes("percentage")){const t=e<0?-1:1,n=a.fpercent(e*t);l=-1==t?`<label title='${i18n("percentage_decrease")}'> (-) ${n} </label>`:`<label title='${i18n("percentage_increase")}'>${n}</label>`}return l}(e,l)}},{columnName:i("if_stats_config.threshold"),targets:7,width:"10",name:"threshold",data:"threshold",className:"text-end",responsivePriority:1,render:function(e,t,l){return function(e,t){let l=parseInt(e),n="> ";return t.threshold_sign&&"-1"==t.threshold_sign&&(n="< "),t.metric_type&&"throughput"==t.metric_type?l=n+a.bitsToSize(e):t.metric_type&&"volume"==t.metric_type?l=n+a.bytesToSize(e):t.metric_type&&t.metric_type.contains("percentage")?(e<0&&(e*=-1),l=n+a.fpercent(e)):t.metric_type&&"value"==t.metric_type&&(e<0&&(e*=-1),l=n+e),l}(e,l)}},{columnName:i("metric_type"),visible:!1,targets:8,name:"metric_type",data:"metric_type",className:"text-nowrap",responsivePriority:1}],l={table_buttons:e,data_url:a.buildURL(k,E),enable_search:!0,columns_config:t,table_config:{scrollX:!1,serverSide:!1,order:[[1,"desc"]],columnDefs:t}};A=l};return dn((async()=>{X(),await async function(){const e=a.buildURL(u,E);await $.get(e,(function(e,t){O=e.rsp}))}(),await async function(){const e=a.buildURL(y,E);await $.get(e,(function(e,t){j=e.rsp}))}(),await async function(){const e=a.buildURL(d,E);await $.get(e,(function(e,t){P=e.rsp}))}(),await async function(){const e=a.buildURL(v,{...E});await $.get(e,(function(e,t){F=e.rsp}))}(),await async function(){const e=a.buildURL(h,{...E});await $.get(e,(function(e,t){M=e.rsp}))}(),await async function(){const e=a.buildURL(g,E);let t;await $.get(e,(function(e,a){t=e.rsp})),t.sort(((e,t)=>e.label>t.label?1:t.label>e.label?-1:0)),L=t}(),await async function(){const e=a.buildURL(_,E);let t;await $.get(e,(function(e,a){t=e.rsp})),t.sort(((e,t)=>e.label>t.label?1:t.label>e.label?-1:0)),U=t}(),await async function(){const e=a.buildURL(b,E);let t;await $.get(e,(function(e,a){t=e.rsp})),t.sort(((e,t)=>e.label>t.label?1:t.label>e.label?-1:0)),R=t}(),await async function(){const e=a.buildURL(p,E);let t;await $.get(e,(function(e,a){t=e.rsp})),t.sort(((e,t)=>e.label>t.label?1:t.label>e.label?-1:0)),D=t}(),t.has_vlans&&(await async function(){const e=a.buildURL(w,E);await $.get(e,(function(e,t){z=JSON.parse(e).data}))}(),await async function(){const e=a.buildURL(f,E);let t;await $.get(e,(function(e,a){t=e.rsp})),t.sort(((e,t)=>e.label>t.label?1:t.label>e.label?-1:0)),q=t}()),t.has_profiles&&(await async function(){const e=a.buildURL(x,E);await $.get(e,(function(e,t){B=e.data}))}(),await async function(){const e=a.buildURL(m,E);let t;await $.get(e,(function(e,a){t=e.rsp})),V=t}()),s.value.metricsLoaded(O,j,P,M,F,t.page_csrf,null,null,L,R,U,D,z,q,B,V)})),vn((()=>{l.value.destroy_table()})),(e,a)=>(Is(),Ms("div",rC,[Vs("div",cC,[Vs("div",uC,[dC,Vs("div",_C,[Vs("div",pC,[Vs("h4",null,te(i("if_stats_config.traffic_rules")),1)]),Vs("div",fC,[Hs(sx,{ref_key:"modal_delete_confirm",ref:n,title:ya(T),body:ya(I),onDelete:J},null,8,["title","body"]),Hs(oC,{ref_key:"modal_add_host_rule",ref:s,metric_list:ya(O),interface_metric_list:ya(P),frequency_list:H,init_func:W,has_vlans:t.has_vlans,has_profiles:t.has_profiles,onAdd:Y,onEdit:G},null,8,["metric_list","interface_metric_list","has_vlans","has_profiles"]),Hs(kw,{ref_key:"table_host_rules",ref:l,table_buttons:ya(A).table_buttons,columns_config:ya(A).columns_config,data_url:ya(A).data_url,enable_search:ya(A).enable_search,table_config:ya(A).table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])]),Vs("div",mC,[Hs(fm,{note_list:C})])])])]))},__file:"http_src/vue/page-host-rules.vue"};const hC={class:"row"},gC={class:"col-md-12 col-lg-12"},bC={class:"card"},yC=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),wC={class:"card-body"},xC={id:"host_details_ports"},kC={class:"row mb-4 mt-4",id:"host_details_ports"},$C={class:"col-6"};var SC={__name:"page-host-details-ports",props:{page_csrf:String},setup(e){ma(null),ma([]),ma({});const t=e=>i18n(e);dn((async()=>{await async function(){let e={};e.host=x.get_url_entry("host"),e.vlan=x.get_url_entry("vlan"),e.ifid=x.get_url_entry("ifid"),l.forEach((t=>{let l={...t.extra_params,...e};$.get(a.buildURL(t.url,l),(async function(e,a){let l=[];e.rsp.forEach((e=>{const t=e.port_info.port,a=e.port_info.l7_proto;l.push({label:`${t} (${a})`})})),t.stats_rows=l}))}))}()})),_n((async()=>{a.hideOverlays()})),vn((async()=>{traffic_table.value.destroy_table()})),i18n("graphs.cli_ports"),ntopChartApex.typeChart.DONUT,http_prefix,i18n("graphs.srv_ports"),ntopChartApex.typeChart.DONUT,http_prefix;const l=[{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"cli_port_flows",extra_params:{mode:"local",protocol:"tcp"},columns:[{id:"active_server_tcp_ports",label:t("ports_page.active_server_tcp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]},{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"cli_port_flows",extra_params:{mode:"local",protocol:"udp"},columns:[{id:"active_server_udp_ports",label:t("ports_page.active_server_udp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]},{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"srv_port_flows",extra_params:{mode:"remote",protocol:"tcp"},columns:[{id:"client_contacted_server_tcp_ports",label:t("ports_page.client_contacted_server_tcp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]},{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"srv_port_flows",extra_params:{mode:"remote",protocol:"udp"},columns:[{id:"client_contacted_server_udp_ports",label:t("ports_page.client_contacted_server_udp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]}];return(e,t)=>(Is(),Ms("div",hC,[Vs("div",gC,[Vs("div",bC,[yC,Vs("div",wC,[Vs("div",xC,[Vs("div",kC,[(Is(),Ms(Ss,null,An(l,(e=>Vs("div",$C,[Hs(Ow,{id:e.id,columns:e.columns,rows:e.stats_rows,print_html_column:e=>function(e){return e.label}(e),print_html_row:(e,t)=>function(e,t){return t.label}(0,t)},null,8,["id","columns","rows","print_html_column","print_html_row"])]))),64))])])])])])]))},__file:"http_src/vue/page-host-details-ports.vue"};const NC={class:"row"},CC={class:"col-12"},EC={class:"card"},AC={class:"card-body"},TC={class:"align-items-center justify-content-end mb-3",style:{height:"70vh"}},IC={class:"d-flex ms-auto flex-row-reverse"},OC=Vs("label",{class:"my-auto me-1"},null,-1),PC=[Vs("span",null,[Vs("i",{class:"fas fa-sync"})],-1)],UC={key:0,class:"m-1"},jC={style:{"min-width":"14rem"}},MC={class:"my-auto me-1"},FC="alerts-map";var LC={__name:"page-alert-analysis",props:{ifid:String,page_csrf:String,charts_options:Array,available_filters:Object},setup(e){const t=e=>i18n(e),l=e,n=ma(!1),s=ntopChartApex.typeChart.BUBBLE,i=`${http_prefix}/lua/pro/rest/v2/charts/alert/analysis.lua`,o={},r=ma(null),c=function(){let e="";const t={bubble_mode:x.get_url_entry("bubble_mode"),timeframe:x.get_url_entry("timeframe"),vlan:x.get_url_entry("vlan"),ifid:x.get_url_entry("ifid")};for(const[a,l]of Object.entries(t))e=`${e}&${a}=${l}`;return e},u=function(){n.value=!0,r.value.update_chart(`${i}?${c()}`),n.value=!1},d=function(){return async e=>{let t=function(e){let t={};if(l.charts_options.forEach((a=>{a.mode_id==e&&(t=a)})),t&&t.chart&&t.chart.ntop_events){t.chart.events=t.chart.events||{};for(const[e,l]of Object.entries(t.chart.ntop_events))null!=l&&(t.chart.events[e]=a[l]||a.fnone)}return t&&t.xaxis&&t.xaxis.labels&&t.xaxis.labels.ntop_utils_formatter&&(t.xaxis.labels.formatter=a[t.xaxis.labels.ntop_utils_formatter]||a.fnone),t&&t.yaxis&&t.yaxis.labels&&t.yaxis.labels.ntop_utils_formatter&&(t.yaxis.labels.formatter=a[t.yaxis.labels.ntop_utils_formatter]||a.fnone),t&&t.tooltip&&t.tooltip.ntop_utils_formatter&&(t.tooltip.custom=a[t.tooltip.ntop_utils_formatter]),t}(Number(o.bubble_mode.id));const n=await ntopng_utility.http_request(e);return t.series=n.series||{},t}},_=function(e){n.value=!0,x.set_key_to_url(e.filter_name,e.id),r.value.update_chart(`${i}?${c()}`),n.value=!1};return dn((()=>{const e=x.get_url_entry("timeframe"),t=x.get_url_entry("vlan");x.get_url_entry("bubble_mode")||x.set_key_to_url("bubble_mode",0),e||x.set_key_to_url("timeframe",300),t||x.set_key_to_url("vlan",""),x.set_key_to_url("ifid",l.ifid);for(const[e,t]of Object.entries(l.available_filters))t.forEach((t=>{t.filter_name=e,t.currently_active&&(o[e]=t)}))})),_n((()=>{n.value=!1})),(a,l)=>(Is(),Ms("div",NC,[Vs("div",CC,[Vs("div",EC,[Vs("div",AC,[Vs("div",TC,[Vs("div",IC,[Vs("div",null,[OC,Vs("div",null,[Vs("button",{class:"btn btn-link m-1",tabindex:"0",type:"button",onClick:u},[...PC])])]),(Is(!0),Ms(Ss,null,An(e.available_filters,((e,a,l)=>(Is(),Ms(Ss,null,[e.length>0?(Is(),Ms("div",UC,[Vs("div",jC,[Vs("label",MC,te(t("bubble_map."+a))+": ",1),Hs(l_,{selected_option:o[a],"onUpdate:selected_option":e=>o[a]=e,options:e,onSelect_option:_},null,8,["selected_option","onUpdate:selected_option","options"])])])):Ys("v-if",!0)],64)))),256))]),n.value?(Is(),Fs(yf,{key:0})):Ys("v-if",!0),Vs("div",{id:FC,style:{height:"90%"},class:K([n.value?"ntopng-gray-out":""])},[Hs(C_,{ref_key:"bubble_chart",ref:r,id:FC,chart_type:ya(s),base_url_request:i,get_params_url_request:c,get_custom_chart_options:d(),register_on_status_change:!1},null,8,["chart_type","get_custom_chart_options"])],2)])])])])]))},__file:"http_src/vue/page-alert-analysis.vue"};const RC={class:"row"},DC={class:"col-12"},zC={class:"card"},qC={class:"card-body"},BC={class:"align-items-center justify-content-end mb-3",style:{height:"70vh"}},VC={class:"d-flex ms-auto flex-row-reverse"},HC=Vs("label",{class:"my-auto me-1"},null,-1),GC={class:"m-1"},WC={key:0,style:{"min-width":"18rem"}},KC={class:"my-auto me-1"},JC="alerts-map";var YC={__name:"page-host-map",props:{ifid:String,page_csrf:String,charts_options:Array,available_filters:Object},setup(e){const t=e=>i18n(e),l=e,n=ntopChartApex.typeChart.BUBBLE,s=`${http_prefix}/lua/rest/v2/charts/host/map.lua`,i={},o=ma(null),r=function(){let e="";const t={bubble_mode:x.get_url_entry("bubble_mode"),ifid:x.get_url_entry("ifid")};for(const[a,l]of Object.entries(t))e=`${e}&${a}=${l}`;return e},c=function(){return async e=>{let t=function(e){let t={};if(l.charts_options.forEach((a=>{a.mode_id==e&&(t=a)})),t&&t.chart&&t.chart.ntop_events){t.chart.events=t.chart.events||{};for(const[e,l]of Object.entries(t.chart.ntop_events))null!=l&&(t.chart.events[e]=a[l]||a.fnone)}return t&&t.xaxis&&t.xaxis.labels&&t.xaxis.labels.ntop_utils_formatter&&(t.xaxis.labels.formatter=a[t.xaxis.labels.ntop_utils_formatter]||a.fnone),t&&t.yaxis&&t.yaxis.labels&&t.yaxis.labels.ntop_utils_formatter&&(t.yaxis.labels.formatter=a[t.yaxis.labels.ntop_utils_formatter]||a.fnone),t&&t.tooltip&&t.tooltip.ntop_utils_formatter&&(t.tooltip.custom=a[t.tooltip.ntop_utils_formatter]),t}(Number(i.bubble_mode.id));const n=await ntopng_utility.http_request(e);return t.series=n.series||{},t}},u=function(e){x.set_key_to_url(e.filter_name,e.id),o.value.update_chart(`${s}?${r()}`)};return dn((()=>{x.get_url_entry("bubble_mode")||x.set_key_to_url("bubble_mode",0),x.set_key_to_url("ifid",l.ifid);for(const[e,t]of Object.entries(l.available_filters))t.forEach((t=>{t.filter_name=e,t.currently_active&&(i[e]=t)}))})),(a,l)=>(Is(),Ms("div",RC,[Vs("div",DC,[Vs("div",zC,[Vs("div",qC,[Vs("div",BC,[Vs("div",VC,[HC,(Is(!0),Ms(Ss,null,An(e.available_filters,((e,a,l)=>(Is(),Ms("div",GC,[e.length>0?(Is(),Ms("div",WC,[Vs("label",KC,te(t("bubble_map."+a))+": ",1),Hs(l_,{selected_option:i[a],"onUpdate:selected_option":e=>i[a]=e,options:e,onSelect_option:u},null,8,["selected_option","onUpdate:selected_option","options"])])):Ys("v-if",!0)])))),256))]),Vs("div",{id:JC,style:{height:"90%"}},[Hs(C_,{ref_key:"bubble_chart",ref:o,id:JC,chart_type:ya(n),base_url_request:s,get_params_url_request:r,get_custom_chart_options:c(),register_on_status_change:!1},null,8,["chart_type","get_custom_chart_options"])])])])])])]))},__file:"http_src/vue/page-host-map.vue"};const ZC={class:"row"},XC={class:"col-md-12 col-lg-12"},QC={class:"card card-shadow"},eE={class:"card-body"},tE={class:"d-flex align-items-center flex-row-reverse mb-2"},aE=Vs("label",{class:"my-auto me-1"},null,-1),lE=[Vs("span",null,[Vs("i",{class:"fas fa-sync"})],-1)],nE={key:0,class:"m-1"},sE={style:{"min-width":"14rem"}},iE={class:"my-auto me-1"},oE=["title"],rE=[Vs("button",{type:"button",class:"btn btn-link",disabled:""},[Vs("i",{class:"text-danger fa-solid fa-triangle-exclamation"})],-1)];var cE={__name:"page-vlan-ports-sankey",props:{ifid:Number,available_filters:Object},setup(e){const t={},a=e,l=e=>i18n(e),n=ma(!1),s=l("ports_analysis.max_entries"),i=l("ports_analysis.no_data"),o=ma(null),r=ma(null),c=ma(null),u=ma(null),d=ma({}),_=`${http_prefix}/lua/pro/rest/v2/get/vlan/live_ports.lua`,p=`${http_prefix}/lua/pro/rest/v2/get/vlan/historical_ports.lua`,f=ma(!1);function m(e){1!=e.is_link_node&&e.link&&x.go_to_url(e.link)}dn((()=>{const e=x.get_url_entry("timeframe"),l=x.get_url_entry("vlan");x.get_url_entry("l4proto"),e||x.set_key_to_url("timeframe","none"),l||x.set_key_to_url("vlan","none"),l||x.set_key_to_url("l4proto","none"),x.set_key_to_url("ifid",a.ifid);for(const[e,l]of Object.entries(a.available_filters))l.forEach((a=>{a.filter_name=e,a.currently_active&&(t[e]=a)}))})),_n((()=>{y(),w(),g()}));const v=function(){g()},h=function(e){x.set_key_to_url(e.filter_name,e.id),g()},g=function(){!async function(){f.value=!0;let e=await async function(){const e=function(){let e=x.get_url_entry("vlan"),t=x.get_url_entry("timeframe"),a=x.get_url_entry("l4proto");"none"==e&&(e="");"none"==t&&(t="");"none"==a&&(a="");let l="",n={ifid:x.get_url_entry("ifid"),vlan:e,timeframe:t,l4proto:a},s=x.obj_to_url_params(n);l=""==t?`${_}?${s}`:`${p}?${s}`;return l}();let t=await b.http_request(e);(function(e){n.value=e.max_entries_reached})(t),t=function(e){let t=e=>console.error(`link (source: ${e.source_node_id}, target: ${e.target_node_id}) removed for not existing source/target node`),a=function(e,t){let a={};e.nodes.forEach((e=>a[e.node_id]=!0));let l=e=>null!=a[e.source_node_id]&&null!=a[e.target_node_id],n=function(e,t,a){return e.filter((e=>{const l=t(e);return 0==l&&null!=a&&a(e),l}))}(e.links,l,t);return n}(e,t);return{nodes:e.nodes,links:a}}(t);const a=function(e){let t={},a={};e.nodes.forEach((e=>t[e.node_id]=e));let l=e=>`${e.source_node_id}_${e.label}`;e.links.forEach((e=>{let n=l(e),s=a[n];null==s&&(s={id:n,label:e.label,link:e.optional_info.link,node_links:[]},a[n]=s),s.node_links.push({source:t[e.source_node_id],target:t[e.target_node_id],value:e.value})}));let n=e.nodes.map((e=>e)),s=[];for(let e in a){let t=a[e],l={node_id:t.id,label:t.label,link:t.link};n.push(l),t.node_links.forEach((e=>{s.push({source_node_id:e.source.node_id,target_node_id:l.node_id,label:`${e.source.label} - ${e.target.label}: ${l.label}`,value:e.value}),s.push({source_node_id:l.node_id,target_node_id:e.target.node_id,label:`${e.source.label} - ${e.target.label}: ${l.label}`,value:e.value})}))}let i=n.map(((e,t)=>({index:t,label:e.label,data:e}))),o={};i.forEach(((e,t)=>o[e.data.node_id]=e));let r=s.map((e=>({source:o[e.source_node_id].index,target:o[e.target_node_id].index,value:e.value,label:e.label})));return{nodes:i,links:r}}(t);return a.links.length>0&&a.nodes.length>0?o.value.set_no_data_flag(!1):o.value.set_no_data_flag(!0),a}();d.value=e,f.value=!1}()};function y(){u.value=$(r.value).height()-100}function w(){c.value=$(r.value).width()-10}return(a,_)=>(Is(),Ms("div",ZC,[Vs("div",XC,[Vs("div",QC,[f.value?(Is(),Fs(yf,{key:0})):Ys("v-if",!0),Vs("div",eE,[Vs("div",{class:K(["align-items-center justify-content-end mb-2",[f.value?"ntopng-gray-out":""]]),style:{height:"70vh"},ref_key:"body_div",ref:r},[Vs("div",tE,[Vs("div",null,[aE,Vs("div",null,[Vs("button",{class:"btn btn-link m-1",tabindex:"0",type:"button",onClick:v},[...lE])])]),(Is(!0),Ms(Ss,null,An(e.available_filters,((e,a,n)=>(Is(),Ms(Ss,null,[e.length>0?(Is(),Ms("div",nE,[Vs("div",sE,[Vs("label",iE,te(l("ports_analysis."+a))+": ",1),Hs(l_,{selected_option:t[a],"onUpdate:selected_option":e=>t[a]=e,options:e,onSelect_option:h},null,8,["selected_option","onUpdate:selected_option","options"])])])):Ys("v-if",!0)],64)))),256)),1==n.value?(Is(),Ms("div",{key:0,class:"mt-auto m-1",title:ya(s),style:{cursor:"help"}},[...rE],8,oE)):Ys("v-if",!0)]),Hs(LS,{ref_key:"sankey_chart",ref:o,width:c.value,height:u.value,no_data_message:ya(i),sankey_data:d.value,onUpdate_width:w,onUpdate_height:y,onNode_click:m},null,8,["width","height","no_data_message","sankey_data"])],2)])])])]))},__file:"http_src/vue/page-vlan-ports-sankey.vue"};const uE={class:"row"},dE={class:"col-md-12 col-lg-12"},_E={class:"card card-shadow"},pE={class:"card-body"},fE={class:"d-flex align-items-center mb-2"},mE={class:"d-flex no-wrap",style:{"text-align":"left","margin-right":"1rem","min-width":"25rem"}},vE={class:"my-auto me-1"},hE={class:"dropdown me-3 d-inline-block"},gE={class:"no-wrap d-flex align-items-center filters-label"},bE={class:"d-flex justify-content-center align-items-center"};var yE={__name:"page-aggregated-live-flows",props:{context:Object},setup(e){const t=e,l=ma(t.context.csrf),n=e=>i18n(e),s=[{label:n("application_proto"),value:1,param:"application_protocol",table_id:"aggregated_app_proto",enterprise_m:!1,search_enabled:!0},{label:n("client"),value:2,param:"client",table_id:"aggregated_client",enterprise_m:!1,search_enabled:!1},{label:n("client_server"),value:4,param:"client_server",table_id:"aggregated_client_server",enterprise_m:!0,search_enabled:!1},{label:n("client_server_application_proto"),value:5,param:"app_client_server",table_id:"aggregated_app_client_server",enterprise_m:!0,search_enabled:!0},{label:n("client_server_srv_port"),value:7,param:"client_server_srv_port",table_id:"aggregated_client_server_srv_port",enterprise_m:!1,search_enabled:!1},{label:n("client_server_srv_port_app_proto"),value:8,param:"client_server_srv_port_app_proto",table_id:"aggregated_client_server_srv_port_app_proto",enterprise_m:!1,search_enabled:!1},{label:n("info"),value:6,param:"info",table_id:"aggregated_info",enterprise_m:!0,search_enabled:!0},{label:n("server"),value:3,param:"server",table_id:"aggregated_server",enterprise_m:!1,search_enabled:!1}],i=ma(!1),o=ma(),r=ma([]);ma([]);const c=ma([]),u=ma("aggregated_live_flows"),d=wi((()=>{if(null==_.value?.value)return u.value;return`${u.value}_${_.value.value}`})),_=ma(s[0]),p=function(){if(t.context.is_ntop_enterprise_m)return ma(s);{let e=[];return s.forEach((t=>{t.enterprise_m||e.push(t)})),ma(e)}}();async function f(){x.set_key_to_url("aggregation_criteria",_.value.param)}dn((async()=>{!function(){let e=x.get_url_entry("aggregation_criteria");if(null==e||""==e)return;_.value=s.find((t=>t.param==e))}(),y()}));const m=()=>({ifid:x.get_url_entry("ifid")||t.context.ifid,vlan_id:x.get_url_entry("vlan_id"),deviceIP:x.get_url_entry("deviceIP"),inIfIdx:x.get_url_entry("inIfIdx"),outIfIdx:x.get_url_entry("outIfIdx"),aggregation_criteria:x.get_url_entry("aggregation_criteria")||_.value.param,host:x.get_url_entry("host")||t.context.host});function v(){r.value.forEach(((e,t)=>{x.set_key_to_url(e.id,"")})),y(),o.value.refresh_table()}function h(e){if(e)return c.value=e.map((e=>(null===x.get_url_entry(e.name)&&x.set_key_to_url(e.name,""),{id:e.name,label:e.label,title:e.tooltip,options:e.value,show_with_key:e.show_with_key,show_with_value:e.show_with_value}))),void h();r.value=c.value.filter((e=>{if(e.show_with_key){if(x.get_url_entry(e.show_with_key)!==e.show_with_value)return!1}return!0})),r.value.forEach(((e,t)=>{null==e.basic_label&&(e.basic_label=e.label);const a=x.get_url_entry(e.id);e.options.forEach((t=>{t.value.toString()===a&&(e.current_option=t)}))}))}function g(e,t){x.set_key_to_url(e.key,`${e.value}`),t&&x.set_key_to_url(t.key,`${t.value}`),o.value.refresh_table(),y()}async function y(){i.value=!0;let e=m(),t=x.obj_to_url_params(e);const a=`${http_prefix}/lua/rest/v2/get/flow/aggregated_live_flows_filters.lua?${t}`;h(await b.http_request(a)),i.value=!1}const w=e=>(e.enable_search=1==_.value.search_enabled,e),k=async e=>((e=[]).push({sortable:!1,title_i18n:"flows_page.live_flows",name:"flows_icon",data_field:"live_flows",class:["text-center"],responsivePriority:1,render_func:(e,t)=>N(e,t)}),1==_.value.value?e.push({title_i18n:"application_proto",sortable:!0,name:"application",data_field:"application",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>C(e,t)}):2==_.value.value?e.push({title_i18n:"client",sortable:!0,name:"client",data_field:"client",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>$(e)}):3==_.value.value?e.push({title_i18n:"last_server",sortable:!0,name:"server",data_field:"server",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>S(e,t)}):7==_.value.value?e.push({title_i18n:"client",sortable:!0,name:"client",data_field:"client",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>$(e)},{title_i18n:"last_server",sortable:!0,name:"server",data_field:"server",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>S(e,t)}):8==_.value.value?e.push({title_i18n:"client",sortable:!0,name:"client",data_field:"client",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>$(e)},{title_i18n:"last_server",sortable:!0,name:"server",data_field:"server",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>S(e,t)},{title_i18n:"application_proto",sortable:!0,name:"application",data_field:"application",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>C(e,t)}):t.context.is_ntop_enterprise_m&&(4==_.value.value||7==_.value.value?e.push({title_i18n:"client",sortable:!0,name:"client",data_field:"client",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>$(e)},{title_i18n:"last_server",sortable:!0,name:"server",data_field:"server",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>S(e,t)}):5==_.value.value?e.push({title_i18n:"client",sortable:!0,name:"client",data_field:"client",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>$(e)},{title_i18n:"last_server",sortable:!0,name:"server",data_field:"server",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>S(e,t)},{title_i18n:"application_proto",sortable:!0,name:"application",data_field:"application",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>C(e,t)}):6==_.value.value&&e.push({title_i18n:"info",sortable:!0,name:"info",data_field:"info",class:["text-nowrap"],responsivePriority:1,render_func:e=>`${e.label}`})),t.context.vlans.length>2&&e.push({title_i18n:"vlan",sortable:!0,name:"vlan_id",data_field:"vlan_id",class:["text-nowrap ","text-center"],responsivePriority:1,render_func:e=>{if(0===e.id||null==e.id){const e=i18n("no_vlan");return`<a href="${http_prefix}/lua/flows_stats.lua?vlan=0">${e}</a>`}return`<a href="${http_prefix}/lua/flows_stats.lua?vlan=${e.id}">${e.label}</a>`}}),e.push({title_i18n:"flows",sortable:!0,name:"flows",data_field:"flows",class:["text-nowrap ","text-center"],responsivePriority:1},{title_i18n:"total_score",sortable:!0,name:"score",data_field:"tot_score",class:["text-center"],responsivePriority:1}),2!=_.value.value&&4!=_.value.value&&7!=_.value.value&&e.push({title_i18n:"clients",sortable:!0,name:"num_clients",data_field:"num_clients",class:["text-nowrap ","text-center"],responsivePriority:1}),3!=_.value.value&&4!=_.value.value&&7!=_.value.value&&e.push({title_i18n:"servers",sortable:!0,name:"num_servers",data_field:"num_servers",class:["text-nowrap ","text-center"],responsivePriority:1}),e.push({title_i18n:"breakdown",sortable:!1,name:"breakdown",data_field:"breakdown",class:["text-nowrap","text-center"],responsivePriority:1,render_func:e=>a.createBreakdown(e.percentage_bytes_sent,e.percentage_bytes_rcvd,i18n("sent"),i18n("rcvd"))},{title_i18n:"traffic_sent",sortable:!0,name:"bytes_sent",data_field:"bytes_sent",class:["text-nowrap","text-end"],responsivePriority:1,render_func:e=>a.bytesToSize(e)},{title_i18n:"traffic_rcvd",sortable:!0,name:"bytes_rcvd",data_field:"bytes_rcvd",class:["text-nowrap","text-end"],responsivePriority:1,render_func:e=>a.bytesToSize(e)},{title_i18n:"total_traffic",sortable:!0,name:"tot_traffic",data_field:"tot_traffic",class:["text-nowrap","text-end"],responsivePriority:1,render_func:e=>a.bytesToSize(e)}),e),$=function(e,t){let a="";return e.is_alerted&&(a="<i class='fas fa-exclamation-triangle' style='color: #B94A48;'></i>"),e.in_memory?`<a href="${http_prefix}/lua/flows_stats.lua?client=${e.ip}&vlan=${e.vlan_id}">${e.label}</a> ${a} ${e.extra_labels} <a href="${http_prefix}/lua/host_details.lua?host=${e.ip}&vlan=${e.vlan_id}" data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`:`${e.label} ${a} ${e.extra_labels}`},S=function(e,t){let a="";return e.is_alerted&&(a="<i class='fas fa-exclamation-triangle' style='color: #B94A48;'></i>"),e.in_memory?7!=_.value.value&&8!=_.value.value||null==t.srv_port?`<a href="${http_prefix}/lua/flows_stats.lua?server=${e.ip}&vlan=${e.vlan_id}">${e.label}</a> ${a} ${e.extra_labels} <a href="${http_prefix}/lua/host_details.lua?host=${e.ip}&vlan=${e.vlan_id}" data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`:`<a href="${http_prefix}/lua/flows_stats.lua?server=${e.ip}&vlan=${e.vlan_id}">${e.label}</a> ${a} ${e.extra_labels} <a href="${http_prefix}/lua/host_details.lua?host=${e.ip}&vlan=${e.vlan_id}" data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>:<a href="${http_prefix}/lua/flows_stats.lua?port=${t.srv_port.id}&vlan=${e.vlan_id}">${t.srv_port.label}</a>`:7!=_.value.value&&8!=_.value.value||null==t.srv_port?`${e.label} ${a} ${e.extra_labels}`:`${e.label} ${a} ${e.extra_labels}:${t.srv_port.label}`},N=function(e,a){let l="",n=!1;const s=x.get_url_entry("deviceIP"),i=x.get_url_entry("inIfIdx"),o=x.get_url_entry("outIfIdx");return null!=t.context.host&&""!=t.context.host&&(n=!0),1==_.value.value?(l=`${http_prefix}/lua/flows_stats.lua?application=${a.application.id}`,n&&(l=l+"&host="+t.context.host)):2==_.value.value?l=`${http_prefix}/lua/flows_stats.lua?client=${a.client.ip}&vlan=${a.client.vlan_id}`:3==_.value.value?l=`${http_prefix}/lua/flows_stats.lua?server=${a.server.ip}&vlan=${a.server.vlan_id}`:4==_.value.value?l=`${http_prefix}/lua/flows_stats.lua?client=${a.client.ip}&server=${a.server.ip}&vlan=${a.vlan_id.id}`:5==_.value.value?l=`${http_prefix}/lua/flows_stats.lua?application=${a.application.id}&client=${a.client.ip}&server=${a.server.ip}&vlan=${a.vlan_id.id}`:6==_.value.value?(l=`${http_prefix}/lua/flows_stats.lua?flow_info=${a.info.id}`,n&&(l=l+"&host="+t.context.host)):7==_.value.value?l=`${http_prefix}/lua/flows_stats.lua?client=${a.client.ip}&server=${a.server.ip}&vlan=${a.vlan_id.id}&srv_port=${a.srv_port.id}`:8==_.value.value&&(l=`${http_prefix}/lua/flows_stats.lua?application=${a.application.id}&client=${a.client.ip}&server=${a.server.ip}&vlan=${a.vlan_id.id}&srv_port=${a.srv_port.id}`),""!==s&&(l=`${l}&deviceIP=${s}`),""!==i&&(l=`${l}&inIfIdx=${i}`),""!==o&&(l=`${l}&outIfIdx=${o}`),`<a href=${l} class="btn btn-sm btn-info" ><i class= 'fas fa-stream'></i></a>`},C=function(e,t){return 0==t.confidence?`${e.label_with_icons} <span class="badge bg-warning" title=" `+t.confidence_name+'">'+t.confidence_name+" </span>":t.confidence?`${e.label_with_icons} <span class="badge bg-success" title="`+t.confidence_name+' "> '+t.confidence_name+"</span>":void 0};return(e,t)=>(Is(),Ms("div",uE,[Vs("div",dE,[Vs("div",_E,[Vs("div",pE,[Vs("div",fE,[Vs("div",mE,[Vs("label",vE,te(n("criteria_filter"))+": ",1),Hs(l_,{selected_option:_.value,"onUpdate:selected_option":t[0]||(t[0]=e=>_.value=e),options:ya(p),onSelect_option:f},null,8,["selected_option","options"])])]),Vs("div",null,[Hs(rm,{ref_key:"table_aggregated_live_flows",ref:o,csrf:l.value,table_id:d.value,table_config_id:u.value,f_map_columns:k,get_extra_params_obj:m,f_map_config:w},{custom_header:vl((()=>[(Is(!0),Ms(Ss,null,An(r.value,(e=>(Is(),Ms("div",hE,[Vs("span",gE,[Vs("b",null,te(e.basic_label),1)]),Hs(l_,{selected_option:e.current_option,"onUpdate:selected_option":t=>e.current_option=t,theme:"bootstrap-5",dropdown_size:"small",disabled:i.value,options:e.options,onSelect_option:g},null,8,["selected_option","onUpdate:selected_option","disabled","options"])])))),256)),Vs("div",bE,[Vs("div",{class:"btn btn-sm btn-primary mt-2 me-3",type:"button",onClick:v},te(n("reset")),1),Hs(cm,{show:i.value,size:"1rem",class:"me-1"},null,8,["show"])])])),_:1},8,["csrf","table_id","table_config_id"])])])])])]))},__file:"http_src/vue/page-aggregated-live-flows.vue"};const wE={id:"aggregated_live_flows"};var xE={__name:"page-test-table",props:{url:String,ifid:Number,columns_config:Array},setup(e){const t=e,a=ma({}),l=ma(null);return dn((()=>{!function(){const e=[];let n={ifid:ntopng_url_manager.get_url_entry("ifid")||t.ifid},s=ntopng_url_manager.obj_to_url_params(n);e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,a,n){l.value.reload()}});let i={table_buttons:e,data_url:`${t.url}?${s}`,enable_search:!0};i.columns_config=t.columns_config,a.value=i}()})),(e,t)=>(Is(),Ms("div",wE,[Hs(kw,{ref_key:"table_test",ref:l,table_buttons:a.value.table_buttons,columns_config:a.value.columns_config,data_url:a.value.data_url,filter_buttons:a.value.table_filters,enable_search:a.value.enable_search,table_config:a.value.table_config},null,8,["table_buttons","columns_config","data_url","filter_buttons","enable_search","table_config"])]))},__file:"http_src/vue/page-test-table.vue"};const kE={class:"container-fluid"},$E={class:"row form-group mb-3"},SE={class:"col col-md-12"},NE={class:"form-label"},CE={class:"row form-group mb-3"},EE={class:"col col-md-6"},AE={class:"form-label"},TE={class:"col col-md-6"},IE={class:"form-label"},OE={key:0},PE={key:1},UE=["pattern"],jE={class:"row form-group mb-3"},ME={class:"col col-md-6"},FE={class:"form-label"},LE={class:"col col-md-6"},RE={class:"form-label"},DE={key:0},zE={key:1},qE=["pattern"],BE={class:"row form-group mb-3"},VE={class:"col col-md-12"},HE={class:"form-label"},GE={class:"row form-group mb-3"},WE={class:"col col-md-12"},KE={class:"form-label"},JE=["disabled"];var YE={__name:"modal-nedge-add-rule-config",props:{},emits:["edit","add"],setup(e,{expose:t,emit:a}){const l=e=>i18n(e),n=ma(null),s=a,i=ma(""),o=[{label:l("nedge.page_rules_config.modal_rule_config.ip"),value:"ip",default:!0},{label:l("nedge.page_rules_config.modal_rule_config.cidr"),value:"cidr"},{label:l("interface"),value:"interface"}];let r="source_to_dest";const c=[{label:l("nedge.page_rules_config.bidirectional"),value:"bidirectional",bidirectional:!0},{label:l("nedge.page_rules_config.source_to_dest"),value:"source_to_dest",bidirectional:!1}],u=ma({});let d="accept";const _=[{label:l("nedge.page_rules_config.accept"),value:"accept"},{label:l("nedge.page_rules_config.deny"),value:"deny"}],p=ma({}),f=ma(0),m=ma(0),v=ma({}),h=ma(""),g=ma(""),y=ma({}),w=ma(""),x=ma(""),k=`${http_prefix}/lua/rest/v2/get/nedge/interfaces.lua`;let $;const S=ma([]),N=ma({}),C=ma({}),E=ma(""),A=wi((()=>U(v.value,g.value,h.value))),T=wi((()=>U(y.value,x.value,w.value))),I=ma(!0);async function O(e){let t=null;null!=e&&(t=e.source.value),"interface"==v.value.value?(await M(),N.value=null!=t?S.value.find((e=>e.value==t)):S.value[0]):(g.value=null!=e?e.source.value:"",F(h,v.value.value))}async function P(e){let t=null;null!=e&&(t=e.destination.value),"interface"==y.value.value?(await M(),C.value=null!=t?S.value.find((e=>e.value==t)):S.value[0]):(x.value=null!=e?e.destination.value:"",F(w,y.value.value))}function U(e,t,a){if("interface"==e.value)return!0;return new RegExp(a).test(t)}let j=!1;async function M(){if(1==j)return;null==$&&($=b.http_request(k));let e=await $;S.value=e.filter((e=>"lan"==e.role)).map((e=>({label:e.label,value:e.ifname}))),j=!0}function F(e,t){e.value=yp.get_data_pattern(t)}const L=()=>{let e=v.value.value,t=g.value;"interface"==e&&(t=N.value.value);let a=y.value.value,l=x.value;"interface"==a&&(l=C.value.value);let n={src_type:e,src_value:t,dst_type:a,dst_value:l,policy:p.value.value,bidirectional:"bidirectional"==u.value.value},i="add";0==I.value&&(n.rule_id=f.value,n.new_rule_id=m.value,i="edit"),s(i,n),R()},R=()=>{n.value.close()};return t({show:(e,t)=>{!function(e,t){I.value=null==e,null!=t&&(d=t.value);if(0==I.value)i.value=l("nedge.page_rules_config.modal_rule_config.title_edit"),E.value=l("edit"),v.value=o.find((t=>t.value==e.source.type)),y.value=o.find((t=>t.value==e.destination.type)),u.value=c.find((t=>t.bidirectional==e.bidirectional)),p.value=_.find((t=>t.value==e.action)),f.value=e.rule_id,m.value=e.rule_id;else{i.value=l("nedge.page_rules_config.modal_rule_config.title_add"),E.value=l("add");let e=o.find((e=>1==e.default));v.value=e,y.value=e,u.value=c.find((e=>e.value==r)),p.value=_.find((e=>e.value!=d))}O(e),P(e)}(e,t),n.value.show()},close:R}),_n((()=>{})),(e,t)=>(Is(),Fs(np,{onShowed:t[12]||(t[12]=e=>{}),ref_key:"modal_id",ref:n},{title:vl((()=>[Ks(te(i.value),1)])),body:vl((()=>[Vs("div",kE,[Ys(" Rule ID "),wn(Vs("div",$E,[Vs("div",SE,[Vs("label",NE,te(l("nedge.page_rules_config.rule_id")),1),wn(Vs("input",{type:"text",class:"form-control","onUpdate:modelValue":t[0]||(t[0]=e=>m.value=e)},null,512),[[jo,m.value]]),wn(Vs("input",{type:"hidden",class:"form-control","onUpdate:modelValue":t[1]||(t[1]=e=>f.value=e)},null,512),[[jo,f.value]])])],512),[[Yo,!I.value]]),Ys(" Source "),Vs("div",CE,[Vs("div",EE,[Vs("label",AE,te(l("nedge.page_rules_config.modal_rule_config.source_type")),1),Hs(l_,{selected_option:v.value,"onUpdate:selected_option":t[2]||(t[2]=e=>v.value=e),onSelect_option:t[3]||(t[3]=e=>O()),options:o},null,8,["selected_option"])]),Vs("div",TE,[Vs("label",IE,te(l("nedge.page_rules_config.source")),1),"interface"==v.value.value?(Is(),Ms("div",OE,[Hs(l_,{selected_option:N.value,"onUpdate:selected_option":t[4]||(t[4]=e=>N.value=e),options:S.value},null,8,["selected_option","options"])])):(Is(),Ms("div",PE,[wn(Vs("input",{type:"text",class:"form-control",pattern:h.value,"onUpdate:modelValue":t[5]||(t[5]=e=>g.value=e)},null,8,UE),[[jo,g.value]])]))])]),Ys(" Dest "),Vs("div",jE,[Vs("div",ME,[Vs("label",FE,te(l("nedge.page_rules_config.modal_rule_config.dest_type")),1),Hs(l_,{selected_option:y.value,"onUpdate:selected_option":t[6]||(t[6]=e=>y.value=e),onSelect_option:t[7]||(t[7]=e=>P()),options:o},null,8,["selected_option"])]),Vs("div",LE,[Vs("label",RE,te(l("nedge.page_rules_config.dest")),1),"interface"==y.value.value?(Is(),Ms("div",DE,[Hs(l_,{selected_option:C.value,"onUpdate:selected_option":t[8]||(t[8]=e=>C.value=e),options:S.value},null,8,["selected_option","options"])])):(Is(),Ms("div",zE,[wn(Vs("input",{type:"text",class:"form-control",pattern:w.value,"onUpdate:modelValue":t[9]||(t[9]=e=>x.value=e)},null,8,qE),[[jo,x.value]])]))])]),Ys(" Direction "),Vs("div",BE,[Vs("div",VE,[Vs("label",HE,te(l("nedge.page_rules_config.direction")),1),Hs(l_,{selected_option:u.value,"onUpdate:selected_option":t[10]||(t[10]=e=>u.value=e),options:c},null,8,["selected_option"])])]),Ys(" Action "),Vs("div",GE,[Vs("div",WE,[Vs("label",KE,te(l("nedge.page_rules_config.action")),1),Hs(l_,{selected_option:p.value,"onUpdate:selected_option":t[11]||(t[11]=e=>p.value=e),options:_},null,8,["selected_option"])])])])])),footer:vl((()=>[Vs("button",{type:"button",disabled:!A.value||!T.value,onClick:L,class:"btn btn-primary"},te(E.value),9,JE)])),_:1},512))}};lp("\ninput[data-v-50692d68]:invalid {\n  border-color: #ff0000;\n}\n"),YE.__scopeId="data-v-50692d68",YE.__file="http_src/vue/modal-nedge-add-rule-config.vue";const ZE={class:"container-fluid"},XE={class:"row form-group mb-3"},QE={class:"col col-md-12"},eA={class:"form-label"};var tA={__name:"modal-nedge-change-default-policy",emits:["apply"],setup(e,{expose:t,emit:a}){const l=a,n=ma(null),s=e=>i18n(e),i=s("nedge.page_rules_config.modal_change_default_policy.title"),o=[{label:s("nedge.page_rules_config.accept"),value:"accept"},{label:s("nedge.page_rules_config.deny"),value:"deny"}],r=ma({}),c=()=>{n.value.close()};function u(){l("apply",r.value.value),c()}return t({show:e=>{r.value=o.find((t=>t.value==e.value)),n.value.show()},close:c}),(e,t)=>(Is(),Fs(np,{onShowed:t[1]||(t[1]=e=>{}),ref_key:"modal_id",ref:n},{title:vl((()=>[Ks(te(ya(i)),1)])),body:vl((()=>[Vs("div",ZE,[Ys(" Default Policy "),Vs("div",XE,[Vs("div",QE,[Vs("label",eA,te(s("nedge.page_rules_config.default policy")),1),Hs(l_,{selected_option:r.value,"onUpdate:selected_option":t[0]||(t[0]=e=>r.value=e),options:o},null,8,["selected_option"])])])])])),footer:vl((()=>[Vs("button",{type:"button",onClick:u,class:"btn btn-primary"},te(s("apply")),1)])),_:1},512))},__file:"http_src/vue/modal-nedge-change-default-policy.vue"};const aA={class:"mb-2"},lA=Vs("br",null,null,-1),nA={class:"d-inline-block"},sA={key:0,style:{color:"green"}},iA={key:1,style:{color:"red"}},oA=[Vs("i",{class:"fas fa-cog"},null,-1)],rA={id:"aggregated_live_flows"};var cA={__name:"page-nedge-rules-config",props:{url:String,ifid:Number,csrf:String,columns_config:Array},setup(e){const t=e=>i18n(e),a=e,l=ma({}),n=ma(null),s=ma(null),i=ma(null),o=ma({});function r(e){_(e,`${http_prefix}/lua/rest/v2/edit/nedge/policy/rule.lua`)}function c(e){_(e,`${http_prefix}/lua/rest/v2/add/nedge/policy/rule.lua`)}async function u(e){if(null==e){const t=`${http_prefix}/lua/rest/v2/get/nedge/policy/default.lua`;e=(await b.http_request(t)).default_policy}o.value="accept"==e?{value:e,label:t("nedge.page_rules_config.accept")}:{value:e,label:t("nedge.page_rules_config.deny")}}async function d(e){const t=`${http_prefix}/lua/rest/v2/set/nedge/policy/default.lua`;let l=JSON.stringify({default_policy:e,csrf:a.csrf});await b.http_request(t,{method:"post",headers:{"Content-Type":"application/json"},body:l}),u(e),m()}function _(e,t){let l=JSON.stringify({...e,csrf:a.csrf});b.http_request(t,{method:"post",headers:{"Content-Type":"application/json"},body:l}),m()}function p(){i.value.show(o.value)}dn((async()=>{!function(){const e=[];let n={ifid:x.get_url_entry("ifid")||a.ifid},i=x.obj_to_url_params(n);e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,a,l){m()}},{text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){s.value.show(null,o.value)}});let r={table_buttons:e,data_url:`${a.url}?${i}`,enable_search:!1},c=[{columnName:t("nedge.page_rules_config.rule_id"),targets:0,name:"rule_id",data:"rule_id",className:"text-nowrap text-center",responsivePriority:1},{columnName:t("nedge.page_rules_config.source"),targets:0,name:"source",data:"source",className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,a){return null!=e.label&&""!=e.label?e.label:e.value}},{columnName:t("nedge.page_rules_config.dest"),targets:0,name:"dest",data:"destination",className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,a){return null!=e.label&&""!=e.label?e.label:e.value}},{columnName:t("nedge.page_rules_config.direction"),targets:0,name:"bidirectional",data:"bidirectional",className:"text-nowrap text-center",responsivePriority:1,render:function(e,a,l){return t(1==e?"nedge.page_rules_config.bidirectional":"nedge.page_rules_config.source_to_dest")}},{columnName:t("nedge.page_rules_config.action"),targets:0,name:"action",data:"action",className:"text-nowrap text-center",responsivePriority:1,render:function(e,a,l){let n="red",s=t("nedge.page_rules_config.deny");return"accept"==e&&(n="green",s=t("nedge.page_rules_config.accept")),`<span style="color:${n};">${s}</span>`}}].map((e=>e));c.push({columnName:t("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return f(a)}}),r.columns_config=c,l.value=r}(),u()}));const f=function(e){let t={handlerId:"delete_host",onClick:()=>{!async function(e){const t=`${http_prefix}/lua/rest/v2/delete/nedge/policy/rule.lua`;let l={"Content-Type":"application/json"},n=JSON.stringify({rule_id:e.rule_id,csrf:a.csrf});b.http_request(t,{method:"post",headers:l,body:n}),m()}(e)}},l={handlerId:"edit_rule",onClick:()=>{s.value.show(e)}};return DataTableUtils.createActionButtons([{class:"btn-secondary",handler:l,handlerId:"edit_rule",icon:"fa-edit",title:i18n("edit")},{class:"btn-danger",handler:t,handlerId:"delete_rule",icon:"fa-trash",title:i18n("delete")}])};function m(){setTimeout((()=>{x.reload_url()}),500)}return(e,a)=>(Is(),Ms(Ss,null,[Vs("div",aA,[Vs("h2",null,te(t("nedge.rules_config_title")),1),lA,Vs("h5",nA,[Ks(te(t("nedge.page_rules_config.default policy"))+" ",1),"accept"==o.value?.value?(Is(),Ms("span",sA,te(o.value?.label),1)):Ys("v-if",!0),"deny"==o.value?.value?(Is(),Ms("span",iA,te(o.value?.label),1)):Ys("v-if",!0),Vs("small",null,[Vs("a",{href:"javascript:void(0)",style:{"margin-left":"0.5rem"},onClick:p},[...oA])])])]),Vs("div",rA,[Hs(kw,{ref_key:"table_rules",ref:n,table_buttons:l.value.table_buttons,columns_config:l.value.columns_config,data_url:l.value.data_url,filter_buttons:l.value.table_filters,enable_search:l.value.enable_search,table_config:l.value.table_config},null,8,["table_buttons","columns_config","data_url","filter_buttons","enable_search","table_config"])]),Hs(YE,{ref_key:"modal_add_rule_config",ref:s,onAdd:c,onEdit:r},null,512),Hs(tA,{ref_key:"modal_change_default_policy",ref:i,onApply:d},null,512)],64))},__file:"http_src/vue/page-nedge-rules-config.vue"};const uA={key:0,class:"form-group ms-2 me-2 mt-3 row"},dA={class:"col-form-label col-sm-4"},_A={class:"col-8"},pA={key:1,class:"form-group ms-2 me-2 mt-3 row"},fA={class:"col-form-label col-sm-4"},mA={class:"col-8"},vA={class:"form-group ms-2 me-2 mt-3 row"},hA={class:"col-form-label col-sm-4"},gA={class:"col-8"},bA=["placeholder"],yA=["disabled"],wA=["disabled"];var xA={__name:"modal-add-application",props:{page_csrf:String,ifid:String},emits:["add"],setup(e,{expose:t,emit:a}){const l=ma(null),n=a,s=ma(!1),i=e=>i18n(e),o=ma(!0);let r=ma(i18n("add_application"));const c=ma(i18n("details.custom_rules_placeholder")),u=ma({}),d=ma([]),_=ma(""),p=ma(""),f=ma(null);ma({});const m=[i("custom_categories.each_host_separate_line"),i("custom_categories.allowed_rules"),i("custom_categories.ip_address"),i("custom_categories.ip_address_port"),i("custom_categories.port"),i("custom_categories.port_range"),i("custom_categories.host_domain")];const v=()=>{1==h()&&1==g()?o.value=!1:o.value=!0},h=()=>/^[A-Za-z0-9_-]*$/.test(p.value),g=()=>{let e=!0;return _.value.split("\n").forEach((t=>{e=e&&(/^((tcp|udp):(6553[0-5]|655[0-2][0-9]\d|65[0-4](\d){2}|6[0-4](\d){3}|[1-5](\d){4}|[1-9](\d){0,3}))$/.test(t)||/^((tcp|udp):(6553[0-5]|655[0-2][0-9]\d|65[0-4](\d){2}|6[0-4](\d){3}|[1-5](\d){4}|[1-9](\d){0,3})-(6553[0-5]|655[0-2][0-9]\d|65[0-4](\d){2}|6[0-4](\d){3}|[1-5](\d){4}|[1-9](\d){0,3}))$/.test(t)||/^(ip):(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(t)||/^(ip):(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?):(6553[0-5]|655[0-2][0-9]\d|65[0-4](\d){2}|6[0-4](\d){3}|[1-5](\d){4}|[1-9](\d){0,3})$/.test(t)||/^((host):[a-zA-Z0-9]+)$/.test(t)||/(host):[a-zA-Z0-9].[a-zA-Z]/g.test(t)||""===t)})),e},b=()=>{n("add",{l7_proto_id:f.value,protocol_alias:p.value,category:u.value.id,custom_rules:_.value,is_edit_page:s.value}),y()},y=()=>{l.value.close()};return dn((()=>{})),t({show:e=>{p.value="",u.value=d.value[0],_.value="",s.value=!1,r.value=i18n("add_application"),null!=e&&(f.value=e.application_id,p.value=e.application,s.value=!0,r.value=`${i18n("edit_application")}: ${p.value}`,(e=>{let t=null;d.value.forEach((a=>{a.id==e.category_id&&(t=a)})),u.value=t,_.value=e.custom_rules?.replace(",","\n")})(e)),l.value.show(),v()},close:y,loadCategoryList:e=>{d.value=(e=>{let t=[];return e.forEach((e=>{t.push({id:e.cat_id,label:e.name,app_list:e.app_list})})),t=t.sort(((e,t)=>null==e||null==e.label?-1:null==t||null==t.label?1:e.label.toString().localeCompare(t.label.toString()))),t})(e)}}),(e,t)=>(Is(),Fs(np,{onShowed:t[4]||(t[4]=e=>{}),ref_key:"modal_id",ref:l},{title:vl((()=>[Ks(te(ya(r)),1)])),body:vl((()=>[wn(Vs("input",{class:"form-control",type:"text","onUpdate:modelValue":t[0]||(t[0]=e=>f.value=e),spellcheck:"false",hidden:""},null,512),[[jo,f.value]]),0==s.value?(Is(),Ms("div",uA,[Vs("label",dA,[Vs("b",null,te(i("app_name")),1)]),Vs("div",_A,[wn(Vs("input",{class:"form-control",type:"text","onUpdate:modelValue":t[1]||(t[1]=e=>p.value=e),onInput:v,spellcheck:"false"},null,544),[[jo,p.value]])])])):(Is(),Ms("div",pA,[Vs("label",fA,[Vs("b",null,te(i("category")),1)]),Vs("div",mA,[Hs(l_,{selected_option:u.value,"onUpdate:selected_option":t[2]||(t[2]=e=>u.value=e),options:d.value},null,8,["selected_option","options"])])])),Vs("div",vA,[Vs("label",hA,[Vs("b",null,te(i("category_custom_rule")),1)]),Vs("div",gA,[wn(Vs("textarea",{class:"form-control",onInput:v,placeholder:c.value,rows:"6","onUpdate:modelValue":t[3]||(t[3]=e=>_.value=e),spellcheck:"false"},null,40,bA),[[jo,_.value]])])])])),footer:vl((()=>[Hs(fm,{note_list:m}),0==s.value?(Is(),Ms("button",{key:0,type:"button",onClick:b,class:"btn btn-primary",disabled:o.value},te(i("add")),9,yA)):(Is(),Ms("button",{key:1,type:"button",onClick:b,class:"btn btn-primary",disabled:o.value},te(i("apply")),9,wA))])),_:1},512))},__file:"http_src/vue/modal-add-application.vue"},kA={__name:"modal-delete-application",emits:["remove"],setup(e,{expose:t,emit:a}){const l=ma(null),n=a,s=e=>i18n(e),i=ma(null);let o=ma(i18n("custom_categories.delete_app"));const r=i18n("custom_categories.delete_app_confirm"),c=()=>{n("remove",{protocol_alias:i.value}),u()},u=()=>{l.value.close()};return t({show:e=>{null!=e&&(i.value=e.application,o.value=`${i18n("custom_categories.delete_app")}: ${i.value}`),l.value.show()},close:u}),(e,t)=>(Is(),Fs(np,{ref_key:"modal_id",ref:l},{title:vl((()=>[Ks(te(ya(o)),1)])),body:vl((()=>[Ks(te(ya(r)),1)])),footer:vl((()=>[Vs("button",{type:"button",onClick:c,class:"btn btn-primary"},te(s("delete")),1)])),default:vl((()=>[wn(Vs("input",{class:"form-control",type:"text","onUpdate:modelValue":t[0]||(t[0]=e=>i.value=e),spellcheck:"false",hidden:""},null,512),[[jo,i.value]])])),_:1},512))},__file:"http_src/vue/modal-delete-application.vue"};const $A=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1);var SA={__name:"page-edit-applications",props:{page_csrf:String,ifid:String,has_protos_file:Boolean},setup(e){const t=ma(null),a=ma(null),l=ma(null),n=ma({}),s=ma([]),i=ma(null),o=ma(!0);let r="";const c=`${http_prefix}/lua/rest/v2/get/l7/category/consts.lua`,u=`${http_prefix}/lua/rest/v2/edit/application/application.lua`,d=`${http_prefix}/lua/rest/v2/delete/application/application.lua`,_=e=>i18n(e),p=e,f=async e=>{const t={csrf:p.page_csrf,ifid:p.ifid},a=NtopUtils.buildURL(d,{...t,...e});await $.get(a,(function(e,t){h(i18n("custom_categories.succesfully_removed"))})),g()},m=async e=>{const t=e.is_edit_page;e.is_edit_page=null;const a={csrf:p.page_csrf,ifid:p.ifid},l=NtopUtils.buildURL(u,{...a,...e});await $.get(l,(function(e,a){"success"==a&&h(t?i18n("custom_categories.succesfully_edited"):i18n("custom_categories.succesfully_added"))})),g()},v=e=>{l.value.show(e)},h=e=>{r=e,o.value=!1,setTimeout((()=>{o.value=!0,g()}),4e3)},g=()=>{t.value.reload()};dn((async()=>{!function(){const e=[];p.has_protos_file&&e.push({text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){v()}});e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(){g()}});let t={table_buttons:e,data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/ntopng/applications.lua`,{ifid:p.ifid}),enable_search:!0,table_config:{serverSide:!1,order:[[0,"asc"]]}},l=[{columnName:i18n("application"),name:"application",data:"application",className:"text-nowrap",responsivePriority:1},{columnName:i18n("category"),name:"category",data:"category",className:"text-nowrap",responsivePriority:1,render:function(e,t,a){return e}},{columnName:i18n("custom_categories.custom_hosts"),name:"custom_rules",data:"custom_rules",className:"text-nowrap",responsivePriority:2},{visible:!1,name:"application_hosts",data:"application_hosts"},{visible:!1,name:"application_id",data:"application_id"},{visible:!1,name:"category_id",data:"category_id"},{columnName:_("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,l){return function(e){let t={handlerId:"edit_rule",onClick:()=>{v(e)}};const l=[{class:"pointer",handler:t,icon:"fa-edit",title:i18n("edit")}];if(e.is_custom){let t={handlerId:"delete_rule",onClick:()=>{var t;t=e,a.value.show(t)}};l.push({class:"pointer",handler:t,icon:"fa-trash",title:i18n("delete")})}return DataTableUtils.createActionButtons(l)}(l)}}],s=ntopng_utility.clone(t);s.columns_config=l,n.value=s}()})),_n((async()=>{await(async()=>{await $.get(c,(function(e,t){s.value=e.rsp})),l.value.loadCategoryList(s.value)})();const e=ntopng_url_manager.get_url_entry("application");e&&(e=>{t.value.search_value(e)})(e)})),vn((async()=>{t.value.destroy_table()}));return(c,u)=>(Is(),Ms(Ss,null,[$A,wn(Vs("div",{ref_key:"update_message",ref:i,class:"alert alert-info"},te(ya(r)),513),[[Yo,!o.value]]),Hs(xA,{ref_key:"modal_add_application",ref:l,category_list:s.value,page_csrf:e.page_csrf,ifid:e.ifid,onAdd:m},null,8,["category_list","page_csrf","ifid"]),Hs(kA,{ref_key:"modal_delete_application",ref:a,onRemove:f},null,512),Hs(kw,{ref_key:"applications_table",ref:t,table_buttons:n.value.table_buttons,columns_config:n.value.columns_config,data_url:n.value.data_url,enable_search:n.value.enable_search,table_config:n.value.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])],64))},__file:"http_src/vue/page-edit-applications.vue"};const NA={class:"row"},CA={class:"col-12"},EA={class:"card card-shadow"},AA={class:"card-body"},TA={key:0,class:"alert alert-danger",role:"alert",id:"error-alert"},IA={key:2,class:"alert alert-info alert-dismissable"},OA=Vs("span",{class:"spinner-border spinner-border-sm text-info"},null,-1),PA=["innerHTML"],UA=["innerHTML"];var jA={__name:"page-network-discovery",props:{ifid:String},setup(e){const t=ma(!1),a=i18n("map_page.fetch_error"),l=ma(!1),n=ma(null),s=ma({}),i=ma(null),o=ma(""),r=i18n("discover.network_discovery_not_enabled"),c=ma(!1),u=e,d=i18n("discover.ghost_icon_descr"),_=i18n("discover.too_many_devices_descr"),p=ma(!1);let f;const m=[i18n("discover.discovery_running"),i18n("discover.protocols_note")],v=`${http_prefix}/lua/get_discover_progress.lua`,h=`${http_prefix}/lua/rest/v2/get/network/discovery/discover.lua`,g=`${http_prefix}/lua/rest/v2/get/network/discovery/run_discovery.lua`,b=async function(){c.value=!1,await $.get(NtopUtils.buildURL(v,{ifid:u.ifid}),(function(e,t){1==e.rsp.discovery_requested?(l.value=!0,""!=e.rsp.progress&&(i.value=e.rsp.progress)):(l.value=!1,i.value="",clearInterval(f)),(e=>{1==e.ghost_found&&0==p.value&&(m.unshift(d),p.value=!0),1==e.too_many_devices_message&&0==_.value&&(m.unshift(_),_.value=!0),0==e.ghost_found&&0==p.value&&(m.shift(),p.value=!1),0==e.too_many_devices_message&&1==_.value&&(m.shift(),_.value=!1),o.value=e.last_network_discovery})(e.rsp)}))};return _n((()=>{f=setInterval(b,3e3)})),dn((async()=>{!function(){let e={table_buttons:[{text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(){n.value.reload()}},{text:i18n("discover.start_discovery")+' <i class="fa-solid fa-play"></i>',action:function(){c.value=!1,$.get(NtopUtils.buildURL(g,{ifid:u.ifid}),(function(e){})),f=setInterval(b,1e3)}}],data_url:NtopUtils.buildURL(h,{ifid:u.ifid}),enable_search:!0,table_config:{serverSide:!1,order:[[0,"asc"]]}},t=[{columnName:i18n("ip_address"),name:"ip",data:"ip",className:"text-nowrap",responsivePriority:1},{columnName:i18n("name"),name:"name",data:"name",className:"text-nowrap text-center",responsivePriority:1},{columnName:i18n("mac_stats.manufacturer"),name:"manufacturer",data:"manufacturer",className:"text-nowrap",responsivePriority:2},{columnName:i18n("mac_address"),name:"mac_address",data:"mac_address",className:"text-nowrap",responsivePriority:2},{columnName:i18n("os"),name:"os",data:"os",className:"text-nowrap text-center",responsivePriority:2},{columnName:i18n("info"),name:"info",data:"info",className:"text-nowrap",responsivePriority:2},{columnName:i18n("device"),name:"device",data:"device",className:"text-nowrap",responsivePriority:2}],a=ntopng_utility.clone(e);a.columns_config=t,s.value=a}()})),vn((async()=>{n.value.destroy_table()})),(e,u)=>(Is(),Ms("div",NA,[Vs("div",CA,[Vs("div",EA,[c.value?(Is(),Fs(yf,{key:0})):Ys("v-if",!0),Vs("div",AA,[t.value?(Is(),Ms("div",TA,te(ya(a)),1)):Ys("v-if",!0),l.value?(Is(),Ms("div",IA,[OA,Ks(" "+te(ya(r))+" ",1),Vs("span",{innerHTML:i.value},null,8,PA)])):(Is(),Fs(kw,{key:1,ref_key:"network_discovery_table",ref:n,table_buttons:s.value.table_buttons,columns_config:s.value.columns_config,data_url:s.value.data_url,enable_search:s.value.enable_search,table_config:s.value.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])),Hs(fm,{note_list:m}),Ys(" Adding Extra Message "),Vs("div",{class:"p-1",innerHTML:o.value},null,8,UA)])])])]))},__file:"http_src/vue/page-network-discovery.vue"};const MA={class:"row"},FA={class:"col-md-12 col-lg-12"},LA={class:"card card-shadow"},RA={class:"card-body"},DA=Vs("div",{class:"d-flex align-items-center"},null,-1);var zA={__name:"page-manage-configurations-backup",props:{date_format:String},setup(e){const t=e=>i18n(e),a=ma(null),l=`${http_prefix}/lua/rest/v2/get/system/configurations/list_available_backups.lua`,n=ma({}),s=ma(!1),i=e;dn((async()=>{await async function(){const e=[];e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,l,n){s.value=!0,a.value.reload(),s.value=!1}});let o={table_buttons:e,data_url:`${l}`,enable_search:!0,id:"manage_configurations_backup",table_config:{serverSide:!0,responsive:!1,scrollX:!0,columnDefs:[{type:"file-size",targets:0}]}},r=[];r.push({columnName:t("backup_date"),orderable:!0,targets:0,name:"epoch",data:"epoch",className:"text-left",responsivePriority:1,render:(e,t,a)=>function(e,t){const a=1e3*e;let l="HH:MM:SS";return l="little_endian"==i.date_format?"DD/MM/YYYY "+l:"middle_endian"==i.date_format?"MM/DD/YYYY "+l:"YYYY/MM/DD "+l,ntopng_utility.from_utc_to_server_date_format(a,l)}(e)},{columnName:t("actions"),orderable:!1,width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return function(e){let t={handlerId:"download_backup_handler",onClick:()=>{var t;t=e,window.open(`${http_prefix}/lua/rest/v2/get/system/configurations/download_backup.lua?epoch=${t.epoch}&download=true`)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:t,icon:"fas fa-download fa-lg",title:i18n("download")}])}(a)}}),o.columns_config=r,n.value=o}()}));return(e,t)=>(Is(),Ms("div",MA,[Vs("div",FA,[Vs("div",LA,[Vs("div",RA,[s.value?(Is(),Fs(yf,{key:0})):Ys("v-if",!0),Vs("div",{id:"manage_configurations_backup",class:K([s.value?"ntopng-gray-out":""])},[(Is(),Fs(kw,{ref_key:"table_manage_configurations_backup",ref:a,id:n.value.id,key:n.value.data_url,table_buttons:n.value.table_buttons,columns_config:n.value.columns_config,data_url:n.value.data_url,table_config:n.value.table_config},{menu:vl((()=>[DA])),_:1},8,["id","table_buttons","columns_config","data_url","table_config"]))],2)])])])]))},__file:"http_src/vue/page-manage-configurations-backup.vue"};const qA={class:"form-group ms-2 me-2 mt-3 row"},BA={class:"col-form-label col-sm-2"},VA={class:"col-10"},HA={key:0,class:"form-group ms-2 me-2 mt-3 row"},GA={class:"col-form-label col-sm-2"},WA={class:"col-10"},KA={class:"form-group ms-2 me-2 mt-3 row"},JA={class:"col-form-label col-sm-2"},YA={class:"col-10"},ZA={class:"form-group ms-2 me-2 mt-3 row"},XA={class:"col-form-label col-sm-2"},QA={class:"col-10"},eT={class:"form-group ms-2 me-2 mt-3 row",style:{"margin-top":"3px"}},tT={class:"col-form-label col-sm-2"},aT={class:"col-sm-3"},lT={class:"btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},nT=["value","id"],sT=["id","for"],iT=["value","id"],oT=["id","for"],rT=["value","id"],cT=["id","for"],uT={key:0,class:"col-sm-2 btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},dT=["value","id"],_T=["id","for"],pT={key:1,class:"col-sm-2 btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},fT=["value","id"],mT=["id","for"],vT={key:1,class:"message alert alert-warning mt-3"};var hT={__name:"modal-add-snmp-device-rules",props:{ifid_list:Array,snmp_devices_list:Array,snmp_metric_list:Array,frequency_list:Array,init_func:Function,page_csrf:String},emits:["add","edit"],setup(e,{expose:t,emit:l}){ma(""),ma("");const n=ma(null),s=l,i=e=>i18n(e);ma(null),ma(null);const o=ma([]),r=ma([]);let c=ma([]),u=ma(!0);const d=`${http_prefix}/lua/pro/rest/v2/get/snmp/device/available_interfaces.lua`,_=ma([]),p=ma(null),f=ma(null),m=ma({}),v=ma({}),h=ma({}),g=ma({}),b=ma({}),y=ma(!0),w=ma({}),x=ma(!0),k=ma("snmp"),S=ma(!1),N=ma(null);let C=ma([]),E=i("if_stats_config.add_host_rules_title");const A=[i("if_stats_config.note_snmp_device_rules.note_1"),i("if_stats_config.note_snmp_device_rules.note_2"),i("if_stats_config.note_snmp_device_rules.note_3"),i("if_stats_config.note_3"),i("if_stats_config.note_4")],T=[i("if_stats_config.note_5")],I=ma([{title:i("volume"),label:i("volume"),id:"volume",active:!0},{title:i("throughput"),label:i("throughput"),id:"throughput",active:!1},{title:i("percentage"),label:i("percentage"),id:"percentage",active:!1},{title:i("packets"),label:i("packets"),id:"packets",active:!1}]),O=ma([{title:i("kb"),label:i("kb"),id:"kb",value:1024,active:!1},{title:i("mb"),label:i("mb"),id:"mb",value:1048576,active:!1},{title:i("gb"),label:i("gb"),id:"gb",value:1073741824,active:!0,default_active:!0}]),P=ma([{title:i("kbps"),label:i("kbps"),id:"kbps",value:1e3,active:!1},{title:i("mbps"),label:i("mbps"),id:"mbps",value:1e6,active:!1},{title:i("gbps"),label:i("gbps"),id:"gbps",value:1e9,active:!0,default_active:!0}]),U=ma([{title:"+",label:">",id:"plus",value:1,active:!1,absolute_value:!0},{title:"-",label:"<",id:"minus",value:-1,active:!0,default_active:!0}]),j=ma([{title:"+",label:">",id:"plus",value:1,active:!0,absolute_value:!0}]),M=[{title:"+",label:"%",id:"plus",value:1,active:!0}],F=ma(null),L=ma(null),R=e,D={csrf:R.page_csrf};function z(e){e.forEach((e=>e.active=1==e.default_active))}const q=e=>{const t=e.target.id;U.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1}))},B=e=>{const t=e.target.id;"throughput"==w.value.id?P.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):"volume"==w.value.id?O.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):"percentage"==w.value.id?M.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):w.value.id};async function V(e){const t=a.buildURL(d+"?host="+v.value.label_to_insert,D);let l=[];await $.get(t,(function(e,t){l=e.rsp}));let n=[];l.forEach((e=>{null!=e.name&&""!=e.name&&e.name!=e.id?n.push({label:e.name+" ("+e.id+")",id:e.id,name:e.name}):n.push({label:e.id,id:e.id,name:e.id})})),n.push({label:"*",id:"*",name:"*"}),n.sort((function(e,t){return e.label.toLowerCase()>t.label.toLowerCase()?1:e.label.toLowerCase()<t.label.toLowerCase()?-1:0})),null!=e&&n.forEach((t=>{t.id==e&&(h.value=t)})),c.value=n,"all"==v.value.label_to_insert?u.value=!1:u.value=!0}function H(){let e=[];"packets"==g.value.id||"usage"==g.value.id?I.value.forEach((t=>{"percentage"!=t.id?t.active=!1:(t.active=!0,e.push(t),w.value=t)})):"errors"==g.value.id?I.value.forEach((t=>{"packets"!=t.id?t.active=!1:(t.active=!0,e.push(t),w.value=t)})):I.value.forEach((t=>{"packets"==t.id?t.active=!1:e.push(t)})),C.value=e}const G=e=>{k.value="snmp",F.value;const t=b.value.id,a=g.value.id,l=g.value.label,n=v.value.label_to_insert,i=v.value.label,o=null==h.value||0===Object.entries(h.value).length?"*":h.value.id,r=null==h.value||0===Object.entries(h.value).length?"*":h.value.label;let c,u,d,_,p,f=w.value.id;!1===x.value&&(f="",tmp_extra_metric="",_=L.value.value),"throughput"==f?(U.value.forEach((e=>{e.active&&(d=e.value)})),p=parseInt(d),P.value.forEach((e=>{e.active&&(c=e.value,u=e.label)})),_=c*parseInt(L.value.value)/8):"volume"==f?(U.value.forEach((e=>{e.active&&(d=e.value)})),p=parseInt(d),O.value.forEach((e=>{e.active&&(c=e.value,u=e.label)})),_=c*parseInt(L.value.value)):"percentage"==f?(U.value.forEach((e=>{e.active&&(d=e.value)})),p=parseInt(d),_=p*parseInt(L.value.value),u="%"):(p=1,_=parseInt(L.value.value));let m="add";1==e&&(m="edit"),s(m,{frequency:t,metric:a,metric_label:l,threshold:_,metric_type:f,snmp_device:n,snmp_device_label:i,snmp_device_port:o,snmp_device_port_label:r,rule_threshold_sign:p,snmp_threshold_value:L.value.value,snmp_threshold_unit:u,snmp_metric_type_label:w.value.title}),J()},W=()=>{G(!0)},J=()=>{n.value.close()};return dn((()=>{I.value.forEach((e=>{e.active&&(w.value=e)}))})),t({show:e=>{null!=e?(e=>{null!=e&&(S.value=!0,E=i("if_stats_config.edit_host_rules_title"),y.value=!1,r.value.forEach((t=>{t.label_to_insert==e.device&&(v.value=t)})),U.value.forEach((t=>{t.active=t.value==e.threshold_sign})),o.value.forEach((t=>{t.id==e.metric&&(g.value=t)})),"volume"==e.metric_type?O.value.forEach((t=>{if(e.threshold%t.value==0){let a=e.threshold/t.value;a<1024?(t.active=!0,L.value.value=0==a?1:a):t.active=!1}else t.active=!1})):"throughput"==e.metric_type?(e.threshold=8*e.threshold,P.value.forEach((t=>{if(e.threshold%t.value==0){let a=e.threshold/t.value;a<1e3?(t.active=!0,L.value.value=0==a?1:a):t.active=!1}else t.active=!1}))):L.value.value=e.threshold*e.threshold_sign,H(),C.value.forEach((t=>{t.id==e.metric_type?(w.value=t,t.active=!0):t.active=!1})),k.value=e.rule_type,r.value.forEach((t=>{t.label==e.device&&(v.value=t)})),_.value.forEach((t=>{t.id==e.frequency&&(b.value=t)})),V(e.device_port))})(e):async function(){F.value="",m.value=o.value[0],v.value=null,v.value=r.value[0],V(),g.value=o.value[0],H(),b.value=_.value[0],w.value=I.value[0],I.value.forEach((e=>e.active=!1)),I.value[0].active=!0,z(O.value),z(P.value),z(U.value),k.value="snmp",y.value=!0,u.value=!1,L.value.value=1,S.value=!1,E=i("if_stats_config.add_host_rules_title")}(),n.value.show()},close:J,metricsLoaded:(e,t,a)=>{r.value=function(e){let t=[];return e.data.forEach((e=>{null!=e.column_name&&""!=e.column_name&&"all"!=e.column_name?t.push({label:e.column_name+" ("+e.column_key+")",label_to_insert:e.column_key}):"all"==e.column_name?t.push({label:e.column_key,label_to_insert:e.column_name}):t.push({label:e.column_key,label_to_insert:e.column_key})})),t.sort((function(e,t){return e.label.toLowerCase()>t.label.toLowerCase()?1:e.label.toLowerCase()<t.label.toLowerCase()?-1:0})),t}(e),o.value=t,_.value=R.frequency_list,b.value=_.value[0],m.value=o.value[0],N.value=a}}),(e,t)=>(Is(),Fs(np,{onShowed:t[7]||(t[7]=e=>{}),ref_key:"modal_id",ref:n},{title:vl((()=>[Ks(te(ya(E)),1)])),body:vl((()=>[Ys(" Target information, here an IP is put "),Vs("div",qA,[Vs("label",BA,[Vs("b",null,te(i("if_stats_config.snmp_device")),1)]),Vs("div",VA,[Hs(l_,{selected_option:v.value,"onUpdate:selected_option":t[0]||(t[0]=e=>v.value=e),onSelect_option:t[1]||(t[1]=e=>V()),options:r.value},null,8,["selected_option","options"])])]),1==ya(u)?(Is(),Ms("div",HA,[Vs("label",GA,[Vs("b",null,te(i("if_stats_config.snmp_interface")),1)]),Vs("div",WA,[Hs(l_,{selected_option:h.value,"onUpdate:selected_option":t[2]||(t[2]=e=>h.value=e),options:ya(c)},null,8,["selected_option","options"])])])):Ys("v-if",!0),Vs("div",KA,[Vs("label",JA,[Vs("b",null,te(i("if_stats_config.metric")),1)]),Vs("div",YA,[Hs(l_,{selected_option:g.value,"onUpdate:selected_option":t[3]||(t[3]=e=>g.value=e),onSelect_option:t[4]||(t[4]=e=>H()),options:o.value},null,8,["selected_option","options"])])]),Ys(" Frequency information, a frequency of 1 day, 5 minute or 1 hour for example "),Vs("div",ZA,[Vs("label",XA,[Vs("b",null,te(i("if_stats_config.frequency")),1)]),Vs("div",QA,[Hs(l_,{selected_option:b.value,"onUpdate:selected_option":t[5]||(t[5]=e=>b.value=e),options:_.value},null,8,["selected_option","options"])])]),Ys(" Threshold information, maximum amount of bytes "),Vs("div",eT,[Vs("label",tT,[Vs("b",null,te(i("if_stats_config.threshold")),1)]),x.value?(Is(),Ms(Ss,{key:0},[Vs("div",aT,[Hs(l_,{selected_option:w.value,"onUpdate:selected_option":t[6]||(t[6]=e=>w.value=e),options:ya(C)},null,8,["selected_option","options"])]),Vs("div",{class:K(["col-3",["throughput"==w.value.id?"p-0":""]])},[Vs("div",lT,["throughput"==w.value.id&&"packets"!=w.value.id?(Is(!0),Ms(Ss,{key:0},An(P.value,(e=>(Is(),Ms(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:p,name:"threshold_measure"},null,8,nT),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:B,for:e.id},te(e.label),11,sT)],64)))),256)):Ys("v-if",!0),"percentage"==w.value.id&&"packets"!=w.value.id?(Is(),Ms(Ss,{key:1},An(M,(e=>(Is(),Ms(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:p,name:"threshold_measure"},null,8,iT),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:B,for:e.id},te(e.label),11,oT)],64)))),64)):Ys("v-if",!0),"volume"==w.value.id&&"packets"!=w.value.id?(Is(!0),Ms(Ss,{key:2},An(O.value,(e=>(Is(),Ms(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:p,name:"threshold_measure"},null,8,rT),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:B,for:e.id},te(e.label),11,cT)],64)))),256)):Ys("v-if",!0)])],2),"packets"!=w.value.id?(Is(),Ms("div",uT,[(Is(!0),Ms(Ss,null,An(U.value,(e=>(Is(),Ms(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_sign",ref:f,name:"threshold_sign"},null,8,dT),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:q,for:e.id},te(e.label),11,_T)],64)))),256))])):(Is(),Ms("div",pT,[(Is(!0),Ms(Ss,null,An(j.value,(e=>(Is(),Ms(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_sign",ref:f,name:"threshold_sign"},null,8,fT),Vs("label",{class:K(["btn",[e.absolute_value?"btn-primary active":"btn-secondary"]]),id:e.id,for:e.id},te(e.label),11,mT)],64)))),256))]))],64)):Ys("v-if",!0),Vs("div",{class:K([x.value?"col-sm-2":"col-sm-8"])},["percentage"==w.value.id?(Is(),Ms("input",{key:0,value:"1",ref_key:"threshold",ref:L,type:"number",name:"threshold",class:"form-control",max:"100",min:"1",required:""},null,512)):(Is(),Ms("input",{key:1,value:"1",ref_key:"threshold",ref:L,type:"number",name:"threshold",class:"form-control",max:"1023",min:"1",required:""},null,512))],2)]),"usage"!=g.value.id&&"percentage"==w.value.id?(Is(),Ms("div",vT,te(i("show_alerts.host_rules_percentage")),1)):Ys("v-if",!0)])),footer:vl((()=>[Hs(fm,{note_list:A,add_sub_notes:!0,sub_note_list:T}),0==S.value?(Is(),Ms("button",{key:0,type:"button",onClick:G,class:"btn btn-primary"},te(i("add")),1)):(Is(),Ms("button",{key:1,type:"button",onClick:W,class:"btn btn-primary"},te(i("apply")),1))])),_:1},512))},__file:"http_src/vue/modal-add-snmp-device-rules.vue"};const gT={class:"row"},bT={class:"col-md-12 col-lg-12"},yT={class:"card"},wT=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),xT={class:"card-body"},kT={class:"mb-4"},$T={id:"host_rules"},ST={class:"card-footer"};var NT={__name:"page-snmp-device-rules",props:{page_csrf:String,ifid:String},setup(e){const t=e,l=ma(null),n=ma(null),s=ma(null),i=e=>i18n(e),o=ma({}),r=ma({}),c=`${http_prefix}/lua/pro/rest/v2/get/snmp/metric/rule_metrics.lua`,u=`${http_prefix}/lua/pro/enterprise/get_snmp_devices_list.lua`,d=`${http_prefix}/lua/pro/rest/v2/get/snmp/device/rules.lua`,_=`${http_prefix}/lua/pro/rest/v2/add/snmp/device/rule.lua`,p=`${http_prefix}/lua/pro/rest/v2/delete/snmp/device/rule.lua`,f=[i("if_stats_config.generic_notes_1"),i("if_stats_config.generic_notes_2"),i("if_stats_config.generic_notes_3")],m={ifid:t.ifid,csrf:t.page_csrf};let v={},h=i("if_stats_config.delete_host_rules_title");i("if_stats_config.edit_local_network_rules");let g=i("if_stats_config.delete_host_rules_description"),b=[],y=[];const w=[{title:i18n("show_alerts.5_min"),label:i18n("show_alerts.5_min"),id:"5min"},{title:i18n("show_alerts.hourly"),label:i18n("show_alerts.hourly"),id:"hour"},{title:i18n("show_alerts.daily"),label:i18n("show_alerts.daily"),id:"day"}];async function x(e){await N(),await C(e)}const k=function(){const e=r.value;return r.value=null,e},S=function(){l.value.reload()},N=async function(){const e=o.value,t=a.buildURL(p,{...m,rule_id:e.id,rule_type:e.rule_type});await $.post(t,(function(e,t){S()}))},C=async function(e){const t=a.buildURL(_,{...m,...e});await $.post(t,(function(e,t){S()}))},E=function(e){let t={handlerId:"delete_host",onClick:()=>{var t;t=e,o.value=t,n.value.show()}},a={handlerId:"edit_rule",onClick:()=>{var t;t=e,r.value=t,o.value=t,s.value.show(t)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:a,icon:"fa-edit",title:i18n("edit")},{class:"pointer",handler:t,icon:"fa-trash",title:i18n("delete")}])},A=function(){const e=[];e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(){S()}},{text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){s.value.show()}});const t=[{columnName:i("actions"),targets:0,width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return E(a)}},{columnName:i("id"),visible:!1,targets:1,name:"id",data:"id",className:"text-nowrap",responsivePriority:1},{columnName:i("if_stats_config.snmp_device"),targets:2,width:"20",name:"device",data:"device",className:"text-nowrap",responsivePriority:1,render:function(e,t,a){return function(e,t){return t.device_label}(0,a)}},{columnName:i("if_stats_config.snmp_interface"),targets:3,width:"20",name:"interface",data:"interface",className:"text-center",responsivePriority:1,render:function(e,t,a){return function(e,t){return t.device_port_label}(0,a)}},{columnName:i("if_stats_config.metric"),targets:4,width:"10",name:"metric",data:"metric",className:"text-center",responsivePriority:1,render:function(e,t,a){return function(e,t){let a=e;return t.metric_label&&t.metric_label!=e&&""!=t.metric_label&&(a=t.metric_label),a}(e,a)}},{columnName:i("if_stats_config.frequency"),targets:5,width:"10",name:"frequency",data:"frequency",className:"text-center",responsivePriority:1,render:function(e){return function(e){let t="";return w.forEach((a=>{e==a.id&&(t=a.title)})),t}(e)}},{columnName:i("if_stats_config.threshold"),targets:6,width:"10",name:"threshold",data:"threshold",className:"text-end",responsivePriority:1,render:function(e,t,l){return function(e,t){let l=parseInt(e),n="> ";return t.threshold_sign&&"-1"==t.threshold_sign&&(n="< "),t.metric_type&&"throughput"==t.metric_type?l=n+a.bitsToSize_no_comma(8*e):t.metric_type&&"volume"==t.metric_type?l=n+a.bytesToSize(e):t.metric_type&&"percentage"==t.metric_type?(e<0&&(e*=-1),l=n+a.fpercent(e)):l=n+e,l}(e,l)}},{columnName:i("metric_type"),visible:!1,targets:7,name:"metric_type",data:"metric_type",className:"text-nowrap",responsivePriority:1}],l={table_buttons:e,data_url:a.buildURL(d,m),enable_search:!0,columns_config:t,table_config:{scrollX:!1,serverSide:!1,order:[[1,"desc"]],columnDefs:t}};v=l};return dn((async()=>{A(),await async function(){const e=a.buildURL(c,m);await $.get(e,(function(e,t){b=e.rsp}))}(),await async function(){m.verbose=!0;const e=a.buildURL(u,m);await $.get(e,(function(e,t){y=e.rsp})),y.data.push({column_key:"*",column_name:"all"})}(),s.value.metricsLoaded(y,b,t.page_csrf)})),vn((()=>{l.value.destroy_table()})),(e,t)=>(Is(),Ms("div",gT,[Vs("div",bT,[Vs("div",yT,[wT,Vs("div",xT,[Vs("div",kT,[Vs("h4",null,te(i("if_stats_config.snmp_rules")),1)]),Vs("div",$T,[Hs(sx,{ref_key:"modal_delete_confirm",ref:n,title:ya(h),body:ya(g),onDelete:N},null,8,["title","body"]),Hs(hT,{ref_key:"modal_add_snmp_device_rule",ref:s,frequency_list:w,init_func:k,onAdd:C,onEdit:x},null,512),Hs(kw,{ref_key:"table_host_rules",ref:l,table_buttons:ya(v).table_buttons,columns_config:ya(v).columns_config,data_url:ya(v).data_url,enable_search:ya(v).enable_search,table_config:ya(v).table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])]),Vs("div",ST,[Hs(fm,{note_list:f})])])])]))},__file:"http_src/vue/page-snmp-device-rules.vue"};var CT={__name:"page-snmp-devices-interfaces-similarity",props:{context:Object},setup(e){const t=e=>i18n(e),a=[t("snmp.snmp_similarity_note"),t("snmp.snmp_similarity_time_note")],l=e;return _n((async()=>{Wd.build_table(http_prefix,"snmp_similarity_data")})),console.log(l.context),(e,t)=>(Is(),Ms(Ss,null,[Ks(" Ciao Mondo "),Hs(fm,{note_list:a})],64))},__file:"http_src/vue/page-snmp-devices-interfaces-similarity.vue"};const ET={class:"row"},AT={class:"col-md-12 col-lg-12"},TT={class:"card card-shadow"},IT={class:"card-body"},OT={class:"d-flex mb-3"},PT={class:"d-flex align-items-center ml-2 mb-2"},UT={class:"d-flex no-wrap",style:{"text-align":"left","margin-right":"1rem","min-width":"25rem"}},jT={class:"my-auto me-1"},MT={class:"d-flex align-items-center mb-2"},FT={class:"d-flex no-wrap",style:{"text-align":"left","margin-right":"1rem","min-width":"25rem"}},LT={class:"my-auto me-1"},RT={class:"d-flex align-items-center mb-2"},DT={class:"d-flex no-wrap",style:{"text-align":"left","margin-right":"1rem","min-width":"25rem"}},zT={class:"my-auto me-1"},qT=["title"],BT=["onClick","title"];var VT={__name:"page-hosts-ports-analysis",props:{is_ntop_enterprise_m:Boolean,csrf:String,vlans:Array,ifid:Number,aggregation_criteria:String,page:Number,sort:String,order:String,start:Number,length:Number,host:String},setup(e){const t=ma([]),l=ma([]),n=e;ma({csrf:n.csrf,ifid:n.ifid});const s=e=>i18n(e),i=[{label:s("tcp"),value:6,param:"tcp",table_id:"tcp_ports_analysis",enterprise_m:!1},{label:s("udp"),value:17,param:"udp",table_id:"udp_ports_analysis",enterprise_m:!1}],o=ma(i[0]),r=ma("server_ports_analysis"),c=ma({}),u=ma({}),d=ma();let _=ma([]),p=ma([]);const f=function(){if(n.is_ntop_enterprise_m)return ma(i);{let e=[];return i.forEach((t=>{t.enterprise_m||e.push(t)})),ma(e)}}();_n((async()=>{let e=x.get_url_entry("port"),a=x.get_url_entry("protocol");const l=x.get_url_entry("application");x.set_key_to_url("ifid",n.ifid),null!=e&&0!=e.localeCompare("")&&null!=a&&0!=a.localeCompare("")&&null!=l&&0!=l.localeCompare("")?(e=Number(e),a=Number(a),o.value=i.find((e=>e.value==a)),await E(!1,l,e)):(o.value=i[0],await E(!1)),async function(e){t.value=await w("overview"),C()}(),d.value.refresh_table()}));const m=()=>x.get_url_object();async function v(){await E(!1),d.value.refresh_table()}async function h(){await E(!0),d.value.refresh_table()}function g(){y(),d.value.refresh_table()}function y(){x.set_key_to_url("port",c.value.id)}async function w(e,t){let a=m(),l=x.obj_to_url_params(a);const n=`${http_prefix}/lua/pro/rest/v2/get/host/hosts_details_by_port_filters.lua?action=${e}&${l}`;return(await b.http_request(n)).map((t=>({id:t.action||t.name,label:t.label,title:t.tooltip,data_loaded:"overview"!=e,options:t.value,hidden:1==t.value.length})))}const k=(e,t)=>a=>{!async function(e,t){if(e.show_spinner=!0,await Ja(),0==e.data_loaded){let a=await w(e.id);e.options=a.find((t=>t.id==e.id)).options,await Ja(),l.value[t].load_menu()}e.show_spinner=!1}(e,t)};function $(e){let t={click_button_flows:S};null!=t[e.event_id]&&t[e.event_id](e)}function S(e){N(e.row.ip)}const N=function(e){let t={l4proto:o.value.value,server:e,port:c.value.id,vlan:x.get_url_entry("vlan_id")},a=x.obj_to_url_params(t);const l=`${http_prefix}/lua/flows_stats.lua?${a}`;x.go_to_url(`${l}`)};function C(){t.value.forEach(((e,t)=>{null==e.basic_label&&(e.basic_label=e.label);const a=x.get_url_entry(e.id);null!=a&&e.options.forEach((t=>{t.value.toString()===a&&(e.label=`${e.basic_label}: ${t.label||t.value}`)}))}))}async function E(e,t,a){x.set_key_to_url("protocol",o.value.value);const l=x.get_url_entry("vlan_id")||"",s=`${http_prefix}/lua/pro/rest/v2/get/host/server_ports.lua?protocol=${o.value.value}&ifid=${n.ifid}&vlan_id=${l}`;let i=await b.http_request(s,null,null,!0),r=[];p.value=[],_.value=[],i.rsp.forEach((e=>{let t=e.l7_proto_name;r.push({label:`${e.srv_port}/${t} (${e.n_hosts})`,id:e.srv_port,application:t,application_id:e.proto_id,num_hosts:e.n_hosts,vlan_id:e.vlan_id})})),r.forEach((e=>{let t=e.application_id;p.value.find((e=>e.id==t))||p.value.push({label:e.application,id:e.application_id,value:t})})),p.value.sort(((e,t)=>{let a=e.label.toLowerCase(),l=t.label.toLowerCase();return a<l?-1:a>l?1:0})),e||(u.value=null==t?p.value[0]:p.value.find((e=>e.id==t))),x.set_key_to_url("application",u.value.id),r.forEach((e=>{e.application==u.value.label&&_.value.push({label:e.id+" ("+e.num_hosts+")",id:e.id,value:e.id,vlan_id:e.vlan_id,n_hosts:e.num_hosts})})),_.value.sort(((e,t)=>{let a=e.id,l=t.id;return a<l?-1:a>l?1:0})),c.value=null!=a?_.value.find((e=>e.id==a)):_.value[0],y()}const A=async e=>{let t={ip:(e,t)=>{if(void 0!==e)return T(e,t)},name:(e,t)=>{if(void 0!==e)return O(e,t)},mac:(e,t)=>{if(void 0!==e)return I(e)},tot_traffic:(e,t)=>{if(void 0!==e)return a.bytesToSize(e)}};return e.forEach((e=>{e.render_func=t[e.data_field]})),e},T=function(e,t){return null!=e?0!=t.vlan_id?`<a href="${http_prefix}/lua/flows_stats.lua?server=${e}&vlan=${t.vlan_id}&port=${c.value.id}">${e}@${t.vlan_id}</a>`:`<a href="${http_prefix}/lua/flows_stats.lua?server=${e}&port=${c.value.id}">${e}</a>`:e},I=function(e,t){return null!=e?`<a href="${http_prefix}/lua/mac_details.lua?host=${e}">${e}</a>`:e},O=function(e,t){return null!=e?0!=t.vlan_id?`<a href="${http_prefix}/lua/host_details.lua?host=${t.ip}&vlan=${t.vlan_id}">${e}</a>`:`<a href="${http_prefix}/lua/host_details.lua?host=${t.ip}">${e}</a>`:e};return(a,n)=>(Is(),Ms("div",ET,[Vs("div",AT,[Vs("div",TT,[Vs("div",IT,[Vs("div",OT,[Vs("div",PT,[Vs("div",UT,[Vs("label",jT,te(s("protocol"))+": ",1),Hs(l_,{selected_option:o.value,"onUpdate:selected_option":n[0]||(n[0]=e=>o.value=e),options:ya(f),onSelect_option:v},null,8,["selected_option","options"])])]),Vs("div",MT,[Vs("div",FT,[Vs("label",LT,te(s("application"))+": ",1),Hs(l_,{selected_option:u.value,"onUpdate:selected_option":n[1]||(n[1]=e=>u.value=e),options:ya(p),onSelect_option:h},null,8,["selected_option","options"])])]),Vs("div",RT,[Vs("div",DT,[Vs("label",zT,te(s("db_search.tags.srv_port"))+": ",1),Hs(l_,{selected_option:c.value,"onUpdate:selected_option":n[2]||(n[2]=e=>c.value=e),options:ya(_),onSelect_option:g},null,8,["selected_option","options"])])])]),Vs("div",null,[Hs(rm,{ref_key:"table_server_ports_analysis",ref:d,csrf:e.csrf,table_id:r.value,f_map_columns:A,get_extra_params_obj:m,onCustom_event:$},{custom_header:vl((()=>[(Is(!0),Ms(Ss,null,An(t.value,((e,t)=>(Is(),Fs(Rd,{f_on_open:k(e,t),ref_for:!0,ref:e=>{l.value[t]=e},hidden:e.hidden},{title:vl((()=>[Hs(cm,{show:e.show_spinner,size:"1rem",class:"me-1"},null,8,["show"]),Vs("a",{class:"ntopng-truncate",title:e.title},te(e.label),9,qT)])),menu:vl((()=>[(Is(!0),Ms(Ss,null,An(e.options,(e=>(Is(),Ms("a",{style:{cursor:"pointer",display:"block"},onClick:t=>function(e,t){t.stopPropagation(),x.set_key_to_url(e.key,`${e.value}`),C(),d.value.refresh_table()}(e,t),class:"ntopng-truncate tag-filter",title:e.value},[null==e.count?(Is(),Ms(Ss,{key:0},[Ks(te(e.label),1)],64)):(Is(),Ms(Ss,{key:1},[Ks(te(e.label+" ("+e.count+")"),1)],64))],8,BT)))),256))])),_:2},1032,["f_on_open","hidden"])))),256))])),_:1},8,["csrf","table_id"])])])])])]))},__file:"http_src/vue/page-hosts-ports-analysis.vue"};const HT={class:"form-group ms-2 me-2 mt-3 row"},GT={class:"col-form-label col-sm-3"},WT={class:"col-7"},KT={key:0},JT={class:"form-group ms-2 me-2 mt-3 row"},YT={class:"col-form-label col-sm-3"},ZT={class:"col-7"},XT=["placeholder"],QT={class:"form-group ms-2 me-2 mt-3 row"},eI={class:"col-form-label col-sm-3"},tI={class:"col-7"},aI=["disabled"];var lI={__name:"modal-nedge-add-repeater-config",props:{},emits:["edit","add"],setup(e,{expose:t,emit:a}){const l=e=>i18n(e),n=i18n("if_stats_config.multicast_ip_placeholder"),s=ma(null),i=ma([]),o=ma(null),r=ma({value:"mdns",label:"MDNS"}),c=a,u=ma(null),d=ma(!0),_=ma(!0),p=ma(!0),f=()=>{let e=new RegExp(yp.get_data_pattern("ip"));p.value=!(e.test(o.value)||"*"===o.value),d.value=m()},m=()=>"custom"==r.value.value?_.value||p.value:_.value,v=ma(""),h=[{label:l("nedge.page_repeater_config.modal_repeater_config.mdns"),value:"mdns",default:!0},{label:l("nedge.page_repeater_config.modal_repeater_config.custom"),value:"custom"}],g=ma(0),y=ma({}),w=`${http_prefix}/lua/rest/v2/get/nedge/interfaces.lua`;let x;const k=ma([]),$=ma(""),S=e=>{_.value=e.length<2,d.value=m()},N=e=>{i.value=e},C=e=>{i.value=i.value.filter((t=>t.label!=e.label))},E=ma(!0);async function A(e){r.value=y.value,"custom"==r.value.value&&await I()}let T=!1;async function I(){if(1==T)return;null==x&&(x=b.http_request(w));let e=await x;k.value=e.filter((e=>"lan"==e.role)).map((e=>({label:e.label,value:e.ifname}))),T=!0}const O=()=>{let e=r.value.value,t={repeater_type:e};if("custom"==r.value.value){t={repeater_type:e,ip:o.value}}let a="add";0==E.value&&(t.repeater_id=g.value,a="edit");let l=[],n=[];i.value.forEach((e=>{l.push(e.value),e.value==e.label||e.label.includes(e.value)?n.push(e.label):n.push(e.label+" ("+e.value+")")}));const s=l.join(","),u=n.join(",");t.interfaces=s,t.interface_details=u,c(a,t),P()},P=()=>{s.value.close()};return t({show:e=>{y.value={},o.value="",i.value=[],p.value=!0,_.value=!0,function(e){E.value=null==e,0==E.value?(p.value=!1,_.value=!1,d.value=!1,v.value=l("nedge.page_rules_config.modal_rule_config.title_edit"),$.value=l("edit"),g.value=e.repeater_id,y.value=h.find((t=>t.value==e.type)),"custom"==y.value.value&&(o.value=e.ip),A()):(v.value=l("nedge.page_rules_config.modal_rule_config.title_add"),$.value=l("add"),h.find((e=>1==e.default)));if(0==E.value){const t=e.interfaces.split(",");let a=[];t.forEach((e=>{""!=e&&null!=e&&a.push(k.value.find((t=>t.value==e)))})),i.value=a}}(e),s.value.show()},close:P}),_n((async()=>{await I()})),(e,t)=>(Is(),Fs(np,{onShowed:t[4]||(t[4]=e=>{}),ref_key:"modal_id",ref:s},{title:vl((()=>[Ks(te(v.value),1)])),body:vl((()=>[Ys(" Repeater Type "),Vs("div",HT,[Vs("label",GT,[Vs("b",null,te(l("nedge.page_repeater_config.modal_repeater_config.repeater_type")),1)]),Vs("div",WT,[Hs(l_,{selected_option:y.value,"onUpdate:selected_option":t[0]||(t[0]=e=>y.value=e),onSelect_option:t[1]||(t[1]=e=>A()),options:h},null,8,["selected_option"])])]),Ys(" IP "),"custom"==y.value.value?(Is(),Ms("div",KT,[Vs("div",JT,[Vs("label",YT,[Vs("b",null,te(l("nedge.page_repeater_config.ip")),1)]),Vs("div",ZT,[wn(Vs("input",{"onUpdate:modelValue":t[2]||(t[2]=e=>o.value=e),onFocusout:f,class:"form-control col-7",type:"text",placeholder:ya(n),required:""},null,40,XT),[[jo,o.value]])])])])):Ys("v-if",!0),Vs("div",QT,[Vs("label",eI,[Vs("b",null,te(l("nedge.page_repeater_config.interfaces")),1)]),Vs("div",tI,[Hs(l_,{ref_key:"interfaces_search",ref:u,selected_options:i.value,"onUpdate:selected_options":t[3]||(t[3]=e=>i.value=e),options:k.value,multiple:!0,onSelect_option:N,onUnselect_option:C,onChange_selected_options:S},null,8,["selected_options","options"])])])])),footer:vl((()=>[Vs("button",{type:"button",disabled:d.value,onClick:O,class:"btn btn-primary"},te($.value),9,aI)])),_:1},512))}};lp("\ninput[data-v-5b3dc248]:invalid {\n  border-color: #ff0000;\n}\n"),lI.__scopeId="data-v-5b3dc248",lI.__file="http_src/vue/modal-nedge-add-repeater-config.vue";const nI={class:"mb-2"},sI=Vs("br",null,null,-1),iI={id:"aggregated_live_flows"};var oI={__name:"page-nedge-repeaters-config",props:{url:String,ifid:Number,csrf:String,columns_config:Array},setup(e){const t=e=>i18n(e),a=e,l=ma({}),n=ma(null),s=ma(null);function i(e){r(e,`${http_prefix}/lua/rest/v2/edit/nedge/forwarder.lua`)}function o(e){r(e,`${http_prefix}/lua/rest/v2/add/nedge/forwarder.lua`)}function r(e,t){let l=JSON.stringify({...e,csrf:a.csrf});b.http_request(t,{method:"post",headers:{"Content-Type":"application/json"},body:l}),u()}dn((async()=>{!function(){const e=[];let n={ifid:x.get_url_entry("ifid")||a.ifid},i=x.obj_to_url_params(n);e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,a,l){u()}},{text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){s.value.show(null)}});let o={table_buttons:e,data_url:`${a.url}?${i}`,enable_search:!1},r=[{columnName:t("nedge.page_repeater_config.type"),targets:0,name:"type",data:"type",className:"text-nowrap text-left",responsivePriority:1,render:function(e,a,l){return t("custom"==e?"nedge.page_repeater_config.modal_repeater_config.custom":"nedge.page_repeater_config.modal_repeater_config.mdns")}},{columnName:t("nedge.page_repeater_config.ip"),targets:0,name:"ip",data:"ip",className:"text-nowrap text-left",responsivePriority:1},{columnName:t("nedge.page_repeater_config.port"),targets:0,name:"port",data:"port",className:"text-nowrap text-left",responsivePriority:1},{columnName:t("nedge.page_repeater_config.interfaces"),targets:0,name:"interfaces",data:"details",className:"text-nowrap text-left",responsivePriority:1,render:function(e,t,a){return function(e,t){return e.split(",").join(", ")}(e)}}].map((e=>e));r.push({columnName:t("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return c(a)}}),o.columns_config=r,l.value=o}()}));const c=function(e){let t={handlerId:"delete_host",onClick:()=>{!function(e){const t=`${http_prefix}/lua/rest/v2/delete/nedge/forwarder.lua`;let l={"Content-Type":"application/json"},n=JSON.stringify({repeater_id:e.repeater_id,csrf:a.csrf});b.http_request(t,{method:"post",headers:l,body:n}),u()}(e)}},l={handlerId:"edit_rule",onClick:()=>{s.value.show(e)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:l,handlerId:"edit_rule",icon:"fa-edit",title:i18n("edit")},{class:"pointer",handler:t,handlerId:"delete_rule",icon:"fa-trash",title:i18n("delete")}])};function u(){setTimeout((()=>{x.reload_url()}),500)}return(e,a)=>(Is(),Ms(Ss,null,[Vs("div",nI,[Vs("h2",null,te(t("nedge.repeaters_config_title")),1),sI]),Vs("div",iI,[Hs(kw,{ref_key:"table_rules",ref:n,table_buttons:l.value.table_buttons,columns_config:l.value.columns_config,data_url:l.value.data_url,filter_buttons:l.value.table_filters,enable_search:l.value.enable_search,table_config:l.value.table_config},null,8,["table_buttons","columns_config","data_url","filter_buttons","enable_search","table_config"])]),Hs(lI,{ref_key:"modal_add_repeater_config",ref:s,onAdd:o,onEdit:i},null,512)],64))},__file:"http_src/vue/page-nedge-repeaters-config.vue"};const rI={key:0,class:"text-left"};var cI={__name:"modal-delete-inactive-host",props:{context:Object},emits:["delete_host"],setup(e,{expose:t,emit:a}){const l=e=>i18n(e),n=ma(null),s=ma(""),i=ma(""),o=ma(!1),r=ma(!1),c=a,u=ma({}),d=e;async function _(){const e=`${http_prefix}/lua/rest/v2/delete/host/inactive_host.lua`,t={csrf:d.context.csrf,ifid:d.context.ifid,serial_key:u.value};const a=await b.http_request(e,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(a){r.value=!1,o.value=!0;let e="";a.deleted_hosts>1&&(e=". Number hosts deleted: "+a.deleted_hosts),i.value=i18n("succ_del_inactive_hosts")+e,c("delete_host"),p()}else r.value=!0,o.value=!0,i.value=i18n("err_del_inactive_hosts")}_n((()=>{}));const p=()=>{setTimeout((()=>{n.value.close()}),3e3)};return t({show:(e,t)=>{u.value=e,s.value=t,n.value.show()},close:p}),(e,t)=>(Is(),Fs(np,{ref_key:"modal_id",ref:n},{title:vl((()=>[Ks(te(l("delete_inactive_host_title")),1)])),body:vl((()=>[Ks(te(s.value)+" ",1),o.value?(Is(),Ms("div",rI,[Vs("p",{class:K(["text-sm-start fs-6 fw-medium pt-3 m-0",r.value?"text-danger":"text-success"])},[Vs("small",null,te(i.value),1)],2)])):Ys("v-if",!0)])),footer:vl((()=>[Vs("button",{type:"button",onClick:_,class:"btn btn-primary"},te(l("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-inactive-host.vue"};const uI={class:"mt-3",style:{"max-width":"8rem"}},dI={key:0,class:"text-left"};var _I={__name:"modal-delete-inactive-host-epoch",props:{context:Object},emits:["delete_host"],setup(e,{expose:t,emit:a}){const l=e=>i18n(e);ma("csv");const n=ma(),s=ma(""),i=ma(!1),o=ma(!1),r=[{label:l("show_alerts.presets.5_min"),value:300},{label:l("show_alerts.presets.30_min"),value:1800},{label:l("show_alerts.presets.hour"),value:3600},{label:l("show_alerts.presets.2_hours"),value:7200},{label:l("show_alerts.presets.6_hours"),value:21600},{label:l("show_alerts.presets.12_hours"),value:43200},{label:l("show_alerts.presets.day"),value:86400},{label:l("show_alerts.presets.week"),value:604800}],c=a,u=ma(),d=e;function _(e){n.value=e}async function p(){const e=`${http_prefix}/lua/rest/v2/delete/host/inactive_host.lua`,t={csrf:d.context.csrf,ifid:d.context.ifid,serial_key:n.value.value};const a=await b.http_request(e,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(a){o.value=!1,i.value=!0;let e="";a.deleted_hosts>1&&(e=". Number hosts deleted: "+a.deleted_hosts),s.value=i18n("succ_del_inactive_hosts")+e,c("delete_host"),f()}else o.value=!0,i.value=!0,s.value=i18n("err_del_inactive_hosts")}_n((()=>{n.value=r[0]}));const f=()=>{setTimeout((()=>{u.value.close()}),3e3)};return t({show:()=>{u.value.show()},close:f}),(e,t)=>(Is(),Fs(np,{ref_key:"modal_id",ref:u},{title:vl((()=>[Ks(te(l("delete")),1)])),body:vl((()=>[Ks(te(l("delete_since"))+" ",1),Vs("div",uI,[Hs(l_,{selected_option:n.value,"onUpdate:selected_option":t[0]||(t[0]=e=>n.value=e),options:r,onSelect_option:_},null,8,["selected_option"])]),i.value?(Is(),Ms("div",dI,[Vs("p",{class:K(["text-sm-start fs-6 fw-medium pt-3 m-0",o.value?"text-danger":"text-success"])},[Vs("small",null,te(s.value),1)],2)])):Ys("v-if",!0)])),footer:vl((()=>[Vs("button",{type:"button",onClick:p,class:"btn btn-primary"},te(l("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-inactive-host-epoch.vue"};const pI={class:"mt-3",style:{"max-width":"8rem"}};var fI={__name:"modal-download-inactive-host",props:{context:Object},emits:["download"],setup(e,{expose:t,emit:a}){const l=e=>i18n(e);ma("csv");const n=ma(),s=[{label:l("csv"),value:"csv",param:"csv"},{label:l("json"),value:"json",param:"json"}],i=a,o=ma();function r(e){n.value=e}async function c(){let e=ntopng_url_manager.get_url_object(window.location.search);e.download=!0,e.format=n.value.value;const t=`${http_prefix}/lua/rest/v2/get/host/inactive_list.lua?`+ntopng_url_manager.obj_to_url_params(e);b.download_URI(t,"inactive_hosts."+n.value.value),i("download"),u()}_n((()=>{n.value=s[0]}));const u=()=>{o.value.close()};return t({show:()=>{o.value.show()},close:u}),(e,t)=>(Is(),Fs(np,{ref_key:"modal_id",ref:o},{title:vl((()=>[Ks(te(l("download")),1)])),body:vl((()=>[Ks(te(l("download_format"))+" ",1),Vs("div",pI,[Hs(l_,{selected_option:n.value,"onUpdate:selected_option":t[0]||(t[0]=e=>n.value=e),options:s,onSelect_option:r},null,8,["selected_option"])])])),footer:vl((()=>[Vs("button",{type:"button",onClick:c,class:"btn btn-primary"},te(l("download")),1)])),_:1},512))},__file:"http_src/vue/modal-download-inactive-host.vue"};const mI={class:"row"},vI={class:"col-md-12 col-lg-12"},hI={class:"card card-shadow"},gI={class:"card-body"},bI={key:"1",class:"row mb-4 mt-4",id:"host_details_traffic"},yI={class:"col-4"},wI={class:"widget-name"},xI=["title"],kI=["onClick","title"],$I={class:"card-footer mt-3"},SI=Vs("i",{class:"fas fa-trash"},null,-1),NI=Vs("i",{class:"fas fa-trash"},null,-1),CI=[Vs("i",{class:"fas fa-download"},null,-1)],EI="change_applications_tab_event";var AI={__name:"page-inactive-hosts",props:{ifid:Number,csrf:String,show_historical:Boolean},setup(e){const t=e=>i18n(e),a=ma("inactive_hosts");ma(t("local_hosts_only"));const l=ma([]),n=ma([]),s=ma(),i=ma(),o=ma(),r=ma(),c=ma(),u=ma(),d=ma(),_=ma(!1),p=ma();ma();const f=e,m=ma({csrf:f.csrf,ifid:f.ifid}),v=[{ref:c,title:i18n("active_inactive"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/inactive/active_inactive.lua`,id:"active_inactive_distro"},{ref:u,title:i18n("inactivity_period"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/inactive/inactivity_period.lua`,id:"inactivity_period"},{ref:d,title:i18n("manufacturer"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/inactive/inactive_manufacturer.lua`,id:"inactive_manufacturer"}],h=ma([{title:i18n("table_view"),active:0==_.value,id:"table"},{title:i18n("chart_view"),active:1==_.value,id:"chart"}]);_n((async()=>{ntopng_events_manager.on_custom_event("change_applications_tab_event",EI,(e=>{x.set_key_to_url("view",e.id)})),async function(e){l.value=await y("overview"),g()}()}));function g(){l.value.forEach(((e,t)=>{null==e.basic_label&&(e.basic_label=e.label);const a=x.get_url_entry(e.id);null!=a?e.options.forEach((t=>{t.value.toString()===a&&(e.label=`${e.basic_label}: ${t.label||t.value}`)})):e.label=`${e.basic_label}: ${e.options[0].label||e.options[0].value}`}))}async function b(e,t){if(e.show_spinner=!0,await Ja(),0==e.data_loaded){let a=await y(e.id);e.options=a.find((t=>t.id==e.id)).options,await Ja(),n.value[t].load_menu()}e.show_spinner=!1}async function y(e){const t=x.get_url_params(),a=`${http_prefix}/lua/rest/v2/get/host/inactive_filters.lua?action=${e}&${t}`;return(await ntopng_utility.http_request(a)).map((t=>({id:t.action||t.name,label:t.label,title:t.tooltip,data_loaded:"overview"!=e,options:t.value,hidden:1==t.value.length})))}function w(){s.value.refresh_table()}function k(e){_.value=!_.value,h.value.forEach((e=>{e.active=!1,("table"==e.id&&0==_.value||"chart"==e.id&&1==_.value)&&(e.active=!0)})),ntopng_events_manager.emit_custom_event(EI,e)}const $=()=>x.get_url_object();function S(e){let t={click_button_historical_flows:T,click_button_delete:N};null!=t[e.event_id]&&t[e.event_id](e)}function N(e){const t=e.row.serial_key;o.value.show(t,i18n("delete_inactive_host",{host:e.row.host.ip_address.value}))}function C(){o.value.show("all",i18n("delete_all_inactive_hosts"))}function E(){r.value.show()}function A(){i.value.show()}function T(e){const t=e.row;let a="";0!=t.vlan&&(a=`@${t.vlan}`),window.location.href=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${t.epoch_begin-100}&epoch_end=${t.epoch_end+100}&ip=${t.ip_address.value||t.ip_address}${a};eq&mac=${t.mac_address.value||t.mac_address};eq`}const I=e=>{let t={mac_address:(e,t)=>{let a=e;return null!=e&&null!=e.url&&null!=e.name&&null!=e.value&&(a=`<a href='${http_prefix}${e.url}' title='${e.value}'>${e.name}</a>`),a},network:(e,t)=>{let a=e;return null!=e.url&&null!=e.name&&null!=e.value&&(a=`<a href='${http_prefix}${e.url}' title='${e.value}'>${e.name}</a>`),a},host:(e,t)=>{let a="";const l=e.ip_address;if(a=`<a href='${http_prefix}${l.url}' title='${l.value}'>${l.name}</a>`,null!=e.vlan&&""!=e.vlan.name){const t=e.vlan;a=null!=t.url?`${a}@<a href='${http_prefix}${t.url||"#"}' title='${t.value}'>${t.name}</a>`:`${a}@${t.name}`}return`${a} ${e.device_type}`}};return e.forEach((e=>{if(e.render_func=t[e.data_field],"actions"==e.id){const t={historical_data:f.show_historical};e.button_def_array.forEach((e=>{t[e.id]||e.class.push("disabled")}))}})),e};return(c,u)=>(Is(),Ms(Ss,null,[Vs("div",mI,[Vs("div",vI,[Vs("div",hI,[Vs("div",gI,[Hs(ex,{ref_key:"inactive_hosts_tab_list",ref:p,id:"inactive_hosts_tab_list",tab_list:h.value,onClick_item:k},null,8,["tab_list"]),Ys('\n          <div class="card card-shadow">\n            <div class="card-body p-1">\n              <transition name="component-fade" mode="out-in">\n                <div key="1" v-if="show_charts == true" class="row mb-4 mt-4" id="host_details_traffic">\n                  \n                </div>\n              </transition>\n            </div>\n          </div>\n          <div class="text-center" style="cursor: pointer;" @click="change_show_charts">\n            <i v-if="show_charts == false" class="fa-solid fa-angles-down"></i>\n            <i v-else class="fa-solid fa-angles-up"></i>\n          </div>\n          '),Vs("div",null,[1==_.value?(Is(),Ms("div",bI,[1==_.value?(Is(),Ms(Ss,{key:0},An(v,(e=>Vs("div",yI,[Vs("h3",wI,te(e.title),1),Hs(C_,{ref_for:!0,ref:e.ref,id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!0},null,8,["id","chart_type","base_url_request"])]))),64)):Ys("v-if",!0)])):(Is(),Fs(rm,{key:1,ref_key:"table_inactive_hosts",ref:s,table_id:a.value,csrf:e.csrf,f_map_columns:I,get_extra_params_obj:$,onCustom_event:S},{custom_header:vl((()=>[(Is(!0),Ms(Ss,null,An(l.value,((e,t)=>{return Is(),Fs(Rd,{f_on_open:(a=e,l=t,e=>{b(a,l)}),ref_for:!0,ref:e=>{n.value[t]=e},hidden:e.hidden},{title:vl((()=>[Hs(cm,{show:e.show_spinner,size:"1rem",class:"me-1"},null,8,["show"]),Vs("a",{class:"ntopng-truncate",title:e.title},te(e.label),9,xI)])),menu:vl((()=>[(Is(!0),Ms(Ss,null,An(e.options,(a=>(Is(),Ms("a",{style:{cursor:"pointer",display:"block"},onClick:l=>function(e,t,a,l){t.stopPropagation(),x.set_key_to_url(e.key,`${e.value}`),g(),s.value.refresh_table(),1==_.value&&v.forEach((e=>{e.ref.value[0].update_chart()})),b(a,l)}(a,l,e,t),class:"ntopng-truncate tag-filter",title:a.value},[null==a.count?(Is(),Ms(Ss,{key:0},[Ks(te(a.label),1)],64)):(Is(),Ms(Ss,{key:1},[Ks(te(a.label+" ("+a.count+")"),1)],64))],8,kI)))),256))])),_:2},1032,["f_on_open","hidden"]);var a,l})),256)),Ys(" Dropdown filters ")])),_:1},8,["table_id","csrf"]))]),Vs("div",$I,[Vs("button",{type:"button",ref:"delete_all",onClick:C,class:"btn btn-danger me-1"},[SI,Ks(" "+te(t("delete_all_entries")),1)],512),Vs("button",{type:"button",ref:"delete_older",onClick:E,class:"btn btn-danger me-1"},[NI,Ks(" "+te(t("delete_older")),1)],512),Vs("button",{type:"button",ref:"download",onClick:A,class:"btn btn-primary me-1"},[...CI],512)])])])])]),Hs(cI,{ref_key:"modal_delete",ref:o,context:m.value,onDelete_host:w},null,8,["context"]),Hs(_I,{ref_key:"modal_delete_older",ref:r,context:m.value,onDelete_host:w},null,8,["context"]),Hs(fI,{ref_key:"modal_download",ref:i,context:m.value},null,8,["context"])],64))},__file:"http_src/vue/page-inactive-hosts.vue"};const TI={class:"row"},II={class:"col-md-12 col-lg-12"},OI={class:"mt-4 card card-shadow"},PI={class:"card-body"};var UI={__name:"page-inactive-host-details",props:{ifid:Number,csrf:String},setup(e){const t=ma("inactive_host_details"),a=ma([]),l=function(e){return e||""},n=function(e){let t=e.name||"";return e.url&&""!=e.url&&(t=`<a href="${http_prefix}${e.url}">${t}</>`),t};return _n((async()=>{const e=ntopng_url_manager.get_url_object(),t=ntopng_url_manager.obj_to_url_params(e),l=await ntopng_utility.http_request(`${http_prefix}/lua/rest/v2/get/host/inactive_host.lua?${t}`);a.value=l.host_info,$("#navbar_title").html("<i class='fas fa-laptop'></i> "+(e=>i18n(e))("host_details.host")+": "+l.host_name)})),(e,s)=>(Is(),Ms("div",TI,[Vs("div",II,[Vs("div",OI,[Vs("div",PI,[Hs(Ow,{horizontal:!0,id:t.value,rows:a.value,print_html_title:l,print_html_row:n},null,8,["id","rows"])])])])]))},__file:"http_src/vue/page-inactive-host-details.vue"};const jI={class:"table table-bordered table-striped"};var MI={__name:"page-flowdevice-config",props:{ifid:Number,csrf:String,flowdev_ip:String},setup(e){const t=e=>i18n(e),a=ma(null),l=ma(""),n=ma(!0),s=e,i=`${http_prefix}/lua/pro/rest/v2/get/flowdevice/alias.lua?flowdev_ip=${s.flowdev_ip}&ifid=${s.ifid}`,o=`${http_prefix}/lua/pro/rest/v2/set/flowdevice/alias.lua`;async function r(){const e=await ntopng_utility.http_request(`${i}`,{method:"get"});a.value.value=e||s.flowdev_ip,l.value=a.value.value}_n((async()=>{r()}));const c=async function(){const e={csrf:s.csrf,flowdev_ip:s.flowdev_ip,alias:a.value.value,ifid:s.ifid};await ntopng_utility.http_request(o,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}),r(),n.value=!0},u=function(){l.value==a.value.value?n.value=!0:n.value=!1};return(e,l)=>(Is(),Ms(Ss,null,[Vs("table",jI,[Vs("tr",null,[Vs("th",null,te(t("flowdev_alias")),1),Vs("td",null,[Vs("input",{type:"text",ref_key:"custom_name",ref:a,class:"form-control",onInput:u},null,544)])])]),Vs("button",{class:K(["btn btn-primary",[n.value?"disabled":""]]),onClick:c,id:"save"},te(t("save_settings")),3)],64))},__file:"http_src/vue/page-flowdevice-config.vue"};const FI={class:"table table-striped table-bordered col-sm-12"},LI={class:"col-3"},RI={class:"col-9"},DI={class:"d-flex ps-0"},zI={class:"col-3"},qI={class:"col-9"},BI={class:"d-flex ps-0"},VI={class:"d-flex align-items-center me-2"},HI={class:"col-3"},GI={class:"col-9"},WI={class:"d-flex ps-0"},KI={class:"d-flex align-items-center me-2"},JI=1e9;var YI={__name:"page-flowdevice-interface-config",props:{ifid:String,csrf:String,device_ip:String,port_index:String},setup(e){const t=e=>i18n(e),a=ma(null),l=ma(""),n=ma(null),s=ma(""),i=ma(null),o=ma(""),r=ma(!0),c=e,u=`${http_prefix}/lua/pro/rest/v2/get/flowdevice/interface/config.lua?device_ip=${c.device_ip}&port_index=${c.port_index}&ifid=${c.ifid}`,d=`${http_prefix}/lua/pro/rest/v2/set/flowdevice/interface/config.lua`;async function _(){const e=await ntopng_utility.http_request(`${u}`,{method:"get"});a.value.value=e.alias,l.value=a.value.value,n.value.value=e.uplink_speed/JI,s.value=n.value.value,i.value.value=e.downlink_speed/JI,o.value=i.value.value}_n((async()=>{_()}));const p=async function(){const e={ifid:c.ifid,csrf:c.csrf,device_ip:c.device_ip,port_index:c.port_index,alias:a.value.value,uplink_speed:Number(n.value.value)*JI,downlink_speed:Number(i.value.value)*JI};await ntopng_utility.http_request(d,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}),_(),r.value=!0},f=function(){l.value==a.value.value&&s.value==n.value.value&&o.value==i.value.value?r.value=!0:r.value=!1};return(e,l)=>(Is(),Ms(Ss,null,[Vs("table",FI,[Vs("tbody",null,[Vs("tr",null,[Vs("th",LI,te(t("interface_alias")),1),Vs("td",RI,[Vs("div",DI,[Vs("input",{type:"text",ref_key:"custom_name",ref:a,class:"form-control",style:{width:"16rem"},onInput:f},null,544)])])]),Vs("tr",null,[Vs("th",zI,te(t("interface_uplink_speed")),1),Vs("td",qI,[Vs("div",BI,[Vs("label",VI,te(t("gbit")),1),Vs("input",{ref_key:"uplink_speed",ref:n,class:"form-control text-end",type:"number",min:"0",step:"0.01",style:{width:"8rem"},onInput:f},null,544)])])]),Vs("tr",null,[Vs("th",HI,te(t("interface_downlink_speed")),1),Vs("td",GI,[Vs("div",WI,[Vs("label",KI,te(t("gbit")),1),Vs("input",{ref_key:"downlink_speed",ref:i,class:"form-control text-end",type:"number",min:"0",step:"0.001",style:{width:"8rem"},onInput:f},null,544)])])])])]),Vs("button",{class:K(["btn btn-primary d-flex ms-auto",[r.value?"disabled":""]]),onClick:p,id:"save"},te(t("save_settings")),3)],64))},__file:"http_src/vue/page-flowdevice-interface-config.vue"},ZI={__name:"modal-delete-scan-confirm",props:{body:String,title:String},emits:["delete","delete_all"],setup(e,{expose:t,emit:a}){const l=ma(null),n=a,s=ma(""),i=ma(""),o=ma(""),r=ma(!0),c=[i18n("note_scan_host")],u=()=>{"delete_all"==o.value?n("delete_all"):"delete_single_row"==o.value||"delete_single_report"==o.value?n("delete"):"scan_all_rows"==o.value?n("scan_all_rows"):"scan_row"==o.value&&n("scan_row"),d()},d=()=>{l.value.close()};t({show:(e,t)=>{r.value=!1,o.value=e,"delete_all"==e?(i.value=i18n("delete_all_entries"),s.value=t):"delete_single_row"==e?(i.value=i18n("delete_vs_host_title"),s.value=t):"scan_all_rows"==e?(i.value=i18n("scan_all_hosts_title"),s.value=t):"scan_row"==e?(r.value=!0,i.value=i18n("scan_host_title"),s.value=t):"delete_single_report"==e&&(i.value=i18n("hosts_stats.page_scan_hosts.reports_page.delete_title"),s.value=i18n("hosts_stats.page_scan_hosts.reports_page.delete_description")),l.value.show()},close:d}),_n((()=>{}));const _=e=>i18n(e);return(e,t)=>(Is(),Fs(np,{onShowed:t[0]||(t[0]=e=>{}),ref_key:"modal_id",ref:l},{title:vl((()=>[Ks(te(i.value),1)])),body:vl((()=>[Ks(te(s.value)+" ",1),r.value?(Is(),Fs(fm,{key:0,note_list:c})):Ys("v-if",!0)])),footer:vl((()=>["delete_all"==o.value||"delete_single_row"==o.value||"delete_single_report"==o.value?(Is(),Ms("button",{key:0,type:"button",onClick:u,class:"btn btn-danger"},te(_("delete")),1)):(Is(),Ms("button",{key:1,type:"button",onClick:u,class:"btn btn-primary"},te(_("hosts_stats.page_scan_hosts.schedule_scan")),1))])),_:1},512))},__file:"http_src/vue/modal-delete-scan-confirm.vue"};const XI={class:"form-group ms-2 me-2 mt-3 row"},QI={class:"col-form-label col-sm-4"},eO={class:"col-8"};var tO={__name:"modal-update-periodicity-scan",props:{title:String},emits:["update"],setup(e,{expose:t,emit:a}){const l=ma(null),n=a,s=ma([{id:"disabled",label:i18n("hosts_stats.page_scan_hosts.disabled")},{id:"1day",label:i18n("hosts_stats.page_scan_hosts.every_night")},{id:"1week",label:i18n("hosts_stats.page_scan_hosts.every_week")}]);let i=ma(s.value[0]);const o=()=>{n("update",{scan_frequency:i.value.id}),r()},r=()=>{l.value.close()};t({show:e=>{l.value.show()},close:r}),_n((()=>{}));const c=e=>i18n(e);return(t,a)=>(Is(),Fs(np,{onShowed:a[1]||(a[1]=e=>{}),ref_key:"modal_id",ref:l},{title:vl((()=>[Ks(te(e.title),1)])),body:vl((()=>[Vs("div",XI,[Vs("label",QI,[Vs("b",null,te(c("hosts_stats.page_scan_hosts.automatic_scan")),1)]),Vs("div",eO,[Hs(l_,{selected_option:ya(i),"onUpdate:selected_option":a[0]||(a[0]=e=>fa(i)?i.value=e:i=e),options:s.value},null,8,["selected_option","options"])])])])),footer:vl((()=>[Vs("button",{type:"button",onClick:o,class:"btn btn-secondary me-4"},te(c("hosts_stats.page_scan_hosts.update_all")),1)])),_:1},512))},__file:"http_src/vue/modal-update-periodicity-scan.vue"};const aO={class:"form-group ms-2 me-2 mt-3 row"},lO={class:"col-form-label col-sm-2"},nO={class:"col-sm-4 pe-0"},sO=["disabled","placeholder"],iO=Vs("div",{class:"col-1 ps-5 pe-0 mt-1"},[Vs("span",null,"/")],-1),oO={class:"col-2 ps-0"},rO=["disabled","placeholder"],cO={class:"form-group ms-2 me-2 mt-3 row"},uO={class:"col-form-label col-sm-2"},dO={class:"col-sm-10"},_O=["placeholder"],pO={class:"form-group ms-2 me-2 mt-3 row"},fO={class:"col-form-label col-sm-2"},mO={class:"col-10"},vO={key:0,class:"form-group ms-2 me-2 mt-3 row"},hO={class:"col-form-label col-sm-2"},gO={class:"col-10"},bO={key:1,class:"form-group ms-2 me-2 mt-3 row"},yO={class:"col-form-label col-sm-2"},wO={class:"col-10"},xO={class:"mt-4"},kO={key:0,class:"me-auto text-danger d-inline"},$O=["disabled"],SO=["disabled"];var NO={__name:"modal-add-vs-host",props:{context:Object},emits:["add","edit"],setup(e,{expose:t,emit:l}){const n=e=>i18n(e),s=l,i=ma(i18n("hosts_stats.page_scan_hosts.add_host")),o=ma(i18n("hosts_stats.page_scan_hosts.host_not_resolved")),r=i18n("hosts_stats.page_scan_hosts.host_placeholder"),c=i18n("hosts_stats.page_scan_hosts.cidr_placeholder"),u=i18n("hosts_stats.page_scan_hosts.ports_placeholder"),d=[n("hosts_stats.page_scan_hosts.notes.note_1"),n("hosts_stats.page_scan_hosts.notes.note_2"),n("hosts_stats.page_scan_hosts.notes.note_3"),n("hosts_stats.page_scan_hosts.notes.note_3_1")],_=[n("hosts_stats.page_scan_hosts.notes.note_1"),n("hosts_stats.page_scan_hosts.notes.note_2"),n("hosts_stats.page_scan_hosts.notes.note_3"),n("hosts_stats.page_scan_hosts.notes.note_3_1"),n("hosts_stats.page_scan_hosts.notes.note_4")],p=ma(null),f=ma({}),m=ma([]),v=ma(""),h=ma(""),g=ma(!1),b=ma(!1),y=ma([]),w=ma([]),x=ma(null),k=ma(null),$=ma(null),S=ma(!1),N=ma(null),C=ma(!0),E=ma(!1),A=ma(!0),T=ma(!1),I=ma(!1),O=ma([{id:"disabled",label:i18n("hosts_stats.page_scan_hosts.disabled")},{id:"1day",label:i18n("hosts_stats.page_scan_hosts.every_night")},{id:"1week",label:i18n("hosts_stats.page_scan_hosts.every_week")}]),P=ma(null),U=ma(O.value[0]),j=ma(!1),M=ma(!1),F=e=>{m.value=e,A.value=m.value.length>0},L=e=>{m.value=m.value.filter((t=>t.id!=e.id)),A.value=m.value.length>0},R=e=>{const t=e.split(".");if(t.length>3)return 0==t[3]},D=()=>{const e=yp.validateIPv4(k.value),t=yp.validateIPv6(k.value),a=yp.validateHostName(k.value);"ipv4_netscan"==f.value.id?(e&&(T.value=!0,A.value=m.value&&m.value.length>0),A.value=!0):e?(R(k.value)?P.value=24:P.value=32,T.value=!0,E.value=!0):t?(T.value=!0,E.value=!0,P.value=128):a?(T.value=!0,E.value=!0,P.value=32):T.value=!1},z=()=>P.value>=24&&P.value<=30||32==P.value||128==P.value?(E.value=!0,!0):(E.value=!1,!1),q=()=>{yp.validatePortRange($.value)||yp.validateCommaSeparatedPortList($.value)||ZS.isEmptyOrNull($.value)?C.value=!0:C.value=!1};const B=()=>{V(!0)},V=async e=>{const t=$.value,l=f.value.id,n=!0===e?"edit":"add",i=!0===e?h.value:null;let r=k.value,c=!0;g.value=!0,yp.validateIP(k.value)||(T.value=!1,r=await async function(e){const t=`${http_prefix}/lua/rest/v2/get/host/resolve_host_name.lua`,l=a.buildURL(t,{host:e});return await ntopng_utility.http_request(l)}(k.value),"no_success"===r&&(c=!1,o.value=k.value+" "+i18n("hosts_stats.page_scan_hosts.host_not_resolved"),j.value=!0,setTimeout((()=>{j.value=!1}),4e3)),T.value=!0);let u=[];m.value.forEach((e=>{u.push(e.id)}));const d=u.join(",");g.value=c,c&&s(n,{host:r,scan_type:l,scan_ports:t,vs_cidr:P.value,scan_frequency:N?U.value.id:null,scan_id:i,discovered_host_scan_type:d})};return t({show:(e,t)=>{k.value="",$.value="",P.value="",C.value=!0,E.value=!1,T.value=!1,g.value=!1,S.value=!1,f.value=y.value[0],m.value=[],h.value=null,b.value=!1,j.value=!1,I.value=!1,A.value=!I.value,i.value=i18n("hosts_stats.page_scan_hosts.add_host"),ZS.isEmptyOrNull(e)||(i.value=i18n("hosts_stats.page_scan_hosts.edit_host_title"),(e=>{if(b.value=!0,k.value=e.host,$.value=e.ports,T.value=!0,C.value=!0,h.value=e.id,f.value=y.value.find((t=>t.id==e.scan_type)),null!=e.discovered_host_scan_type){const t=e.discovered_host_scan_type.split(",");let a,l=[];t.forEach((e=>{a=w.value.find((t=>t.id==e)),l.push(a)})),m.value=l}R(k.value)||128==e.cidr?P.value=e.cidr:P.value=32,E.value=!0,N&&(U.value=O.value.find((t=>t.id==e.scan_frequency)))})(e)),ZS.isEmptyOrNull(t)||(k.value=t,T.value=!0),p.value.show()},close:()=>{M.value=!1,p.value.close()},metricsLoaded:async(e,t,a)=>{const l=e.sort(((e,t)=>e.label.localeCompare(t.label)));x.value=t,y.value=l,w.value=l.filter((e=>"ipv4_netscan"!=e.id)),N.value=a,f.value=y.value[0]}}),(e,t)=>(Is(),Fs(np,{ref_key:"modal_id",ref:p},{title:vl((()=>[Ks(te(i.value),1)])),body:vl((()=>[Ys(" Target information, here an IP is put "),Vs("div",aO,[Vs("label",lO,[Vs("b",null,te(n("hosts_stats.page_scan_hosts.host_or_network")),1)]),Vs("div",nO,[wn(Vs("input",{"onUpdate:modelValue":t[0]||(t[0]=e=>k.value=e),onInput:D,disabled:b.value,class:"form-control",type:"text",placeholder:ya(r),required:""},null,40,sO),[[jo,k.value]])]),iO,Vs("div",oO,[wn(Vs("input",{"onUpdate:modelValue":t[1]||(t[1]=e=>P.value=e),onInput:z,disabled:b.value,class:"form-control",type:"text",placeholder:ya(c),required:""},null,40,rO),[[jo,P.value]])])]),Vs("div",cO,[Vs("label",uO,[Vs("b",null,te(n("hosts_stats.page_scan_hosts.ports")),1)]),Vs("div",dO,[wn(Vs("input",{"onUpdate:modelValue":t[2]||(t[2]=e=>$.value=e),onFocusout:q,class:K(["form-control",!0===v.value?"ntopng-hide-placeholder":""]),type:"text",placeholder:ya(u),required:""},null,42,_O),[[jo,$.value]])])]),Vs("div",pO,[Vs("label",fO,[Vs("b",null,te(n("hosts_stats.page_scan_hosts.scan_type")),1)]),Vs("div",mO,[Hs(l_,{selected_option:f.value,"onUpdate:selected_option":t[3]||(t[3]=e=>f.value=e),options:y.value,disabled:b.value,onSelect_option:t[4]||(t[4]=e=>{"ipv4_netscan"==f.value.id?(P.value=24,I.value=!0,A.value=!1):(I.value=!1,A.value=!0)})},null,8,["selected_option","options","disabled"])])]),"ipv4_netscan"==f.value.id?(Is(),Ms("div",vO,[Vs("label",hO,[Vs("b",null,te(n("hosts_stats.page_scan_hosts.host_discovered_scan_type")),1)]),Vs("div",gO,[Hs(l_,{selected_options:m.value,"onUpdate:selected_options":t[5]||(t[5]=e=>m.value=e),onChange_selected_options:F,onUnselect_option:L,options:w.value,multiple:!0},null,8,["selected_options","options"])])])):Ys("v-if",!0),1==N.value?(Is(),Ms("div",bO,[Vs("label",yO,[Vs("b",null,te(n("hosts_stats.page_scan_hosts.periodicity")),1)]),Vs("div",wO,[Hs(l_,{selected_option:U.value,"onUpdate:selected_option":t[6]||(t[6]=e=>U.value=e),options:O.value},null,8,["selected_option","options"])])])):Ys("v-if",!0),Vs("div",xO,[0==N.value?(Is(),Fs(fm,{key:0,note_list:d})):(Is(),Fs(fm,{key:1,note_list:_}))])])),footer:vl((()=>[j.value?(Is(),Ms("div",kO,te(o.value),1)):Ys("v-if",!0),Vs("div",null,[Hs(cm,{show:g.value,size:"1rem",class:"me-2"},null,8,["show"]),0==b.value?(Is(),Ms("button",{key:0,type:"button",onClick:V,class:"btn btn-primary",disabled:!(E.value&&T.value&&C.value&&A.value)},te(n("add")),9,$O)):(Is(),Ms("button",{key:1,type:"button",onClick:B,class:"btn btn-primary",disabled:!(E.value&&T.value&&C.value&&A.value)},te(n("apply")),9,SO))])])),_:1},512))},__file:"http_src/vue/modal-add-vs-host.vue"};const CO=(e,t)=>1==t.is_ok_last_scan&&null!=t.last_scan&&null!=t.last_scan.time?e:"",EO=(e,t)=>{let a="";if(1==t.is_ok_last_scan&&null!=t.last_scan&&null!=t.last_scan.time){const t=Number(e);let l="";null!=e&&(l=0==t?"green":t<3.9?"grey":t<7?"yellow":"red",0!=t&&(a=`<FONT COLOR=${l}>${e}`))}return a},AO=(e,t,a)=>{if(t&&a.is_down)return"";if(void 0!==e){let t=e;return t=i18n("hosts_stats.page_scan_hosts.scan_type_list."+e),t}},TO=(e,t)=>3==t.is_ok_last_scan?"":void 0!==e&&void 0!==e.time?e.time:void 0!==e?e:i18n("hosts_stats.page_scan_hosts.not_yet"),IO=(e,t)=>3==t.is_ok_last_scan?"":void 0!==t.last_scan&&void 0!==t.last_scan.duration?t.last_scan.duration:i18n("hosts_stats.page_scan_hosts.not_yet"),OO=e=>{let t="";return null==e||"disabled"==e?"":(t="1day"==e?i18n("hosts_stats.page_scan_hosts.daily"):i18n("hosts_stats.page_scan_hosts.weekly"),`<span class="badge bg-secondary" title="${t}">${t}</span>`)},PO=e=>{let t="";return 2==e?(t=i18n("hosts_stats.page_scan_hosts.scheduled"),`<span class="badge bg-dark" title="${t}">${t}</span>`):4==e?(t=i18n("hosts_stats.page_scan_hosts.scanning"),`<span class="badge bg-info" title="${t}">${t}</span>`):3==e||null==e?(t=i18n("hosts_stats.page_scan_hosts.not_scanned"),`<span class="badge bg-primary" title="${t}">${t}</span>`):1==e?(t=i18n("hosts_stats.page_scan_hosts.success"),`<span class="badge bg-success" title="${t}">${t}</span>`):0==e?(t=i18n("hosts_stats.page_scan_hosts.error"),`<span class="badge bg-danger" title="${t}">${t}</span>`):5==e?(t=i18n("hosts_stats.page_scan_hosts.failed"),`<span class="badge bg-warning" title="${t}">${t}</span>`):void 0},UO=e=>{let t="";return null!=e&&e.forEach((e=>{""==t?t=e:t+=`, ${e}`})),t},jO=(e,t,a)=>{let l=null;switch(e){case 4:l=` <span class="badge bg-secondary"><i class="fa-solid fa-ghost" title='${UO(t)}'></i></span></div>`;break;case 3:l=` <span class="badge bg-secondary"><i class="fa-solid fa-filter" title='${UO(a)}'></i></span>`}return l},MO=(e,t)=>{0==e&&0==t.udp_ports&&t.scan_type.contains("udp")&&(e=t.num_open_ports);let a="";if(null==e||e<=0)return a;if(1==t.is_ok_last_scan&&null!=t.last_scan&&null!=t.last_scan.time&&(a=`${e}`,t.host_in_mem)){const e=jO(t.udp_ports_case,t.udp_ports_unused,t.udp_filtered_ports);null!=e&&(a+=e)}return a},FO=(e,t)=>{0==e&&0==t.tcp_ports&&t.scan_type.contains("tcp")&&(e=t.num_open_ports);let a="";if(null==e||e<=0)return a;if(1==t.is_ok_last_scan&&null!=t.last_scan&&null!=t.last_scan.time&&(a=`${e}`,t.host_in_mem)){const e=jO(t.tcp_ports_case,t.tcp_ports_unused,t.tcp_ports_filtered);null!=e&&(a+=e)}return a},LO=(e,t,a,l)=>{let n=e.split(" ")[0].split("/")[0],s=((e,t,a,l)=>{let n="";return null!=a&&a.forEach((t=>{e==Number(t)&&(n="unused")})),""!=n||null!=l&&l.forEach((t=>{e==Number(t)&&(n="filtered")})),n})(Number(n),0,a,l),i=null;switch(s){case"unused":i=` &nbsp;<span class="badge bg-secondary" title='${i18n("hosts_stats.page_scan_hosts.unused_port")}'><i class="fa-solid fa-ghost"></i></span>`;break;case"filtered":i=` &nbsp;<span class="badge bg-primary" title='${i18n("hosts_stats.page_scan_hosts.filtered_port")}'><i class="fa-solid fa-filter"></i></span>`}return i},RO=(e,t,a,l)=>{let n={host:e,scan_type:t,scan_return_result:!0,page:"show_result",scan_date:a,epoch:l};return`${`${http_prefix}/lua/vulnerability_scan.lua`}?${ntopng_url_manager.obj_to_url_params(n)}`},DO=(e,t,a)=>{let l=e,n=5==t.is_ok_last_scan&&null!=t.is_down&&1==t.is_down;if((1==t.is_ok_last_scan||n)&&null!=t.last_scan&&null!=t.last_scan.time){let a=RO(e,t.scan_type,t.last_scan.time.replace(" ","_"),t.last_scan.epoch);if("ipv4_netscan"==t.scan_type){e+=null!=t.cidr?"/"+t.cidr:"/24"}l=`<a href="${a}">${e}</a>`,n&&(l=`<a href="${a}">${e} <i class="fas fa-exclamation-triangle" style='color: #B94A48;'></i> </a>`)}return l},zO={class:"row"},qO={class:"col-md-12 col-lg-12"},BO={key:0,class:"alert alert-info alert-dismissable"},VO={class:"card card-shadow"},HO={class:"card-body"},GO={key:0,class:"alert alert-info alert-dismissable"},WO=Vs("span",{class:"spinner-border spinner-border-sm text-info me-1"},null,-1),KO={key:1,class:"alert alert-success alert-dismissable"},JO=Vs("span",{class:"text-success me-1"},null,-1),YO={key:2,class:"alert alert-danger alert-dismissable"},ZO=Vs("span",{class:"text-danger me-1"},null,-1),XO={key:3,class:"alert alert-warning alert-dismissable"},QO=Vs("span",{class:"text-warning me-1"},null,-1),eP={id:"hosts_to_scan"},tP=[Vs("i",{class:"fas fa-plus"},null,-1)],aP={class:"card-footer mt-3"},lP=Vs("i",{class:"fas fa-trash"},null,-1),nP=Vs("i",{class:"fas fa-clock-rotate-left"},null,-1),sP={class:"card-footer"};var iP={__name:"page-vulnerability-scan",props:{context:Object},setup(e){const t=e=>i18n(e),a=[i18n("hosts_stats.page_scan_hosts.notes.generic_notes_1").replaceAll("${http_prefix}",`${http_prefix}`)],l=ma(i18n("scan_host_inserted")),n=ma(i18n("scan_host_already_inserted")),s=ma(i18n("scan_net_not_found_hosts")),i=ma(""),o=ma(i18n("hosts_stats.page_scan_hosts.enable_clickhouse")),r=i18n("hosts_stats.page_scan_hosts.delete_host_title"),c=i18n("hosts_stats.page_scan_hosts.delete_host_description"),u=i18n("hosts_stats.page_scan_hosts.update_periodicity_title"),d=`${http_prefix}/lua/rest/v2/add/host/to_scan.lua`,_=`${http_prefix}/lua/rest/v2/edit/host/update_va_scan_period.lua`,p=`${http_prefix}/lua/rest/v2/delete/host/delete_host_to_scan.lua`,f=`${http_prefix}/lua/rest/v2/exec/host/schedule_vulnerability_scan.lua`,m=`${http_prefix}/lua/rest/v2/get/host/vulnerability_scan_type_list.lua`,v=`${http_prefix}/lua/vulnerability_scan.lua`,h=`${http_prefix}/lua/rest/v2/get/host/vulnerability_scan_result.lua`,g=`${http_prefix}/lua/rest/v2/get/host/vulnerability_scan_status.lua`,y=ma("hosts_to_scan"),w=ma(),k=ma(),$=ma(),S=ma(),N=ma(0),C=ma(null),E=ma({}),A=ma({}),T=ma(!1),I=ma(!1),O=ma(!1),P=ma(!1),U=ma(!1),j=ma(!1),M=e,F={csrf:M.context.csrf},L=ma({csrf:M.context.csrf,ifid:M.context.ifid,is_enterprise_l:M.context.is_enterprise_l});let R=[],D=null;function z(){null!=M.context.host&&""!=M.context.host?$.value.show(null,M.context.host):$.value.show()}function q(e){null!=e?w.value.refresh_table(e):w.value.refresh_table(!0)}dn((()=>{D=Promise.all([re(),ce()])})),_n((async()=>{await D,await $.value.metricsLoaded(R,M.context.ifid,M.context.is_enterprise_l),null!=M.context.host&&$.value.show(null,M.context.host),O.value=!M.context.is_clickhouse_enabled,setInterval(ae,1e4)}));const B=()=>x.get_url_object();function V(e){let t={click_button_edit_host:Z,click_button_delete:J,click_button_scan:Y,click_button_download:he,click_button_show_result:ge};null!=t[e.event_id]&&t[e.event_id](e)}function H(e,t){return aN.sortByIP(e.host,t.host,1)}function G(e,t){let a=t[e.data.data_field];var l;return"duration"==e.id?a=void 0===t.last_scan?-1:t.last_scan.duration_epoch:"last_scan"==e.id?a=void 0===t.last_scan?0:t.last_scan.epoch:"is_ok_last_scan"==e.id?a=function(e,t){let a="";a=2==e?i18n("hosts_stats.page_scan_hosts.scheduled"):4==e?i18n("hosts_stats.page_scan_hosts.scanning"):3==e||null==e?i18n("hosts_stats.page_scan_hosts.not_scanned"):1==e?i18n("hosts_stats.page_scan_hosts.success"):5==e?i18n("hosts_stats.page_scan_hosts.failed"):i18n("hosts_stats.page_scan_hosts.error");return a+t.id}(a,t):"scan_frequency"==e.id?a="1day"==(l=a)?i18n("hosts_stats.page_scan_hosts.daily"):"1week"==l?i18n("hosts_stats.page_scan_hosts.weekly"):"":"max_score_cve"!=e.id&&"num_vulnerabilities_found"!=e.id&&"tcp_ports"!=e.id&&"udp_ports"!=e.id||1!=t.is_ok_last_scan&&5!=t.is_ok_last_scan&&(a=0),a}function W(e,t,a){if(null!=e){let l=G(e,t),n=G(e,a);if(l==n)return H(t,a);if("host"==e.id)return aN.sortByIP(l,n,e.sort);if("host_name"==e.id)return aN.sortByName(l,n,e.sort);if("num_vulnerabilities_found"==e.id){const t=0;return aN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("tcp_ports"==e.id||"udp_ports"==e.id){const t=0;return aN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("duration"==e.id){const t=-1;return aN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("last_scan"==e.id){const t=0;return aN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("is_ok_last_scan"==e.id)return aN.sortByName(l,n,e.sort);if("max_score_cve"==e.id){const t=0;return aN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}return e.id,aN.sortByName(l,n,e.sort)}return H(t,a)}function J(e){P.value=!1,U.value=!1,j.value=!1,ie(),E.value=e.row,k.value.show("delete_single_row",i18n("delete_vs_host"))}function Y(e){P.value=!1,U.value=!1,j.value=!1,ie(),A.value=e.row;const t=`${i18n("scan_host")}`;k.value.show("scan_row",t)}function Z(e){$.value.show(e.row)}function X(){P.value=!1,U.value=!1,j.value=!1,ie(),k.value.show("delete_all",i18n("delete_all_vs_hosts"))}async function Q(e){e.is_edit=!0,await se(e)}function ee(){!0===P.value&&(P.value=!1),!0===U.value&&(U.value=!1),1==j.value&&(j.value=!1)}function ae(){ce()}function le(){N.value=w.value.get_rows_num()}const ne=e=>((e,t,a,l)=>{const n={download:!0,show_result:!0};let s={host:(e,t)=>DO(e,t),scan_type:(e,a)=>AO(e,a,t),last_scan:(e,t)=>TO(e,t),duration:(e,t)=>IO(e,t),scan_frequency:e=>OO(e),is_ok_last_scan:e=>PO(e),max_score_cve:(e,t)=>EO(e,t),tcp_ports:(e,t)=>FO(e,t),udp_ports:(e,t)=>MO(e,t),num_vulnerabilities_found:(e,t)=>CO(e,t)};return e.forEach((e=>{e.render_func=s[e.data_field],"actions"==e.id&&e.button_def_array.forEach((e=>{e.f_map_class=(t,a)=>(t=t.filter((e=>"link-disabled"!=e)),(3==a.is_ok_last_scan||null==a.is_ok_last_scan||null==a.last_scan||null!=a.last_scan&&null==a.last_scan.time)&&n[e.id]&&t.push("link-disabled"),t)}))})),e})(e,R,0,M.context.ifid),se=async function(e){const t=NtopUtils.buildURL(d,{...e}),a=await b.http_post_request(t,F);if($.value.close(),1===a.rsp)null!=e.vs_cidr?l.value=i18n("scan_host_updated").replace("%{host}",`${e.host}/${e.vs_cidr}`):l.value=i18n("scan_host_updated").replace("%{host}",`${e.host}`),P.value=!0,U.value=!1,j.value=!1,setTimeout(ee,1e4),q(!1);else if(2===a.rsp){null!=e.vs_cidr?n.value=i18n("scan_host_already_inserted").replace("%{host}",`${e.host}/${e.vs_cidr}`):n.value=i18n("scan_host_already_inserted").replace("%{host}",`${e.host}`);let t="";R.forEach((a=>{a.id==e.scan_type&&(t=a.label)})),n.value=i18n("scan_host_already_inserted").replace("%{scan_type}",`${t}`),U.value=!0,P.value=!1,j.value=!1,setTimeout(ee,1e4)}else 3===a.rsp&&(null!=e.vs_cidr?s.value=i18n("scan_net_not_found_hosts").replace("%{host}",`${e.host}/${e.vs_cidr}`):s.value=i18n("scan_net_not_found_hosts").replace("%{host}",`${e.host}`),U.value=!1,P.value=!1,j.value=!0,setTimeout(ee,1e4));!0!==e.is_edit&&q(!1)},ie=function(e){null!=e&&0!=e&&(i.value=i18n("scan_in_progress").replace("total",`${e}`))},oe=async function(e){const t=NtopUtils.buildURL(_,{...e});await b.http_post_request(t,F),P.value=!1,U.value=!1,j.value=!1,ie(),q(!1)},re=async function(){const e=NtopUtils.buildURL(m,{...F}),t=await b.http_request(e);R=t.rsp},ce=async function(){const e=NtopUtils.buildURL(g,{...F}),t=await b.http_request(e);P.value=!1,U.value=!1,j.value=!1,ie(t.rsp.total_in_progress),null==C.value&&(C.value=t.rsp.total_in_progress);const a=0==t.rsp.total_in_progress&&C.value>0;C.value=t.rsp.total_in_progress,T.value=C.value>0&&!1===I.value,!0===T.value?setTimeout((function(){q(!0)}),2e3):a&&setTimeout((function(){q(!0)}),5e3)},ue=function(){k.value.show("scan_all_rows",i18n("scan_all_hosts")),q(!1)},de=function(){S.value.show()},_e=async function(){const e=A.value;await pe(e.host,e.scan_type,e.ports,e.id,e.cidr),q(!0)},pe=async function(e,t,a,l,n){const s=NtopUtils.buildURL(f,{host:e,scan_type:t,scan_single_host:!0,scan_ports:a,scan_id:l,vs_cidr:n});await b.http_post_request(s,F)};async function fe(){const e=NtopUtils.buildURL(f,{scan_single_host:!1});await b.http_post_request(e,F),q(!1)}const me=async function(){const e=E.value,t=NtopUtils.buildURL(p,{host:e.host,scan_type:e.scan_type,delete_all_scan_hosts:!1,scan_id:e.id});await b.http_post_request(t,F),q(!1)},ve=async function(){const e=NtopUtils.buildURL(p,{delete_all_scan_hosts:!0});await b.http_post_request(e,F),q(!1)};function he(e){const t={host:e.row.host,scan_type:e.row.scan_type,epoch:e.row.last_scan.epoch},a=x.obj_to_url_params(t),l=`${h}?${a}`;b.download_URI(l)}function ge(e){const t=e.row.host,a=e.row.last_scan.time.replace(" ","_"),l={host:t,scan_type:e.row.scan_type,scan_return_result:!0,page:"show_result",epoch:e.row.last_scan.epoch,scan_date:a},n=x.obj_to_url_params(l),s=`${v}?${n}`;x.go_to_url(s)}function be(e){I.value=e}return(e,d)=>(Is(),Ms(Ss,null,[Vs("div",zO,[Vs("div",qO,[O.value?(Is(),Ms("div",BO,[Vs("span",null,te(o.value),1)])):Ys("v-if",!0),Vs("div",VO,[Vs("div",HO,[T.value?(Is(),Ms("div",GO,[WO,Vs("span",null,te(i.value),1)])):Ys("v-if",!0),P.value?(Is(),Ms("div",KO,[JO,Vs("span",null,te(l.value),1)])):Ys("v-if",!0),U.value?(Is(),Ms("div",YO,[ZO,Vs("span",null,te(n.value),1)])):Ys("v-if",!0),j.value?(Is(),Ms("div",XO,[QO,Vs("span",null,te(s.value),1)])):Ys("v-if",!0),Vs("div",eP,[Hs(ZI,{ref_key:"modal_delete_confirm",ref:k,title:ya(r),body:ya(c),onDelete:me,onDelete_all:ve,onScan_row:_e,onScan_all_rows:fe},null,8,["title","body"]),Hs(tO,{ref_key:"modal_update_perioditicy_scan",ref:S,title:ya(u),onUpdate:oe},null,8,["title"]),Hs(rm,{ref_key:"table_hosts_to_scan",ref:w,table_id:y.value,csrf:L.value.csrf,f_map_columns:ne,get_extra_params_obj:B,f_sort_rows:W,onCustom_event:V,onRows_loaded:le},{custom_header:vl((()=>[Vs("button",{class:"btn btn-link",type:"button",ref:"add_host",onClick:z},[...tP],512)])),_:1},8,["table_id","csrf"])])]),Vs("div",aP,[Vs("button",{type:"button",ref:"delete_all",onClick:X,class:K(["btn btn-danger me-1",{disabled:0==N.value}])},[lP,Ks(" "+te(t("delete_all_entries")),1)],2),Vs("button",{type:"button",ref:"scan_all",onClick:ue,class:K(["btn btn-primary me-1",{disabled:0==N.value}])},[nP,Ks(" "+te(t("hosts_stats.page_scan_hosts.schedule_all_scan")),1)],2),M.context.is_enterprise_l?(Is(),Ms("button",{key:0,type:"button",ref:"update_all",onClick:de,class:K(["btn btn-secondary me-1",{disabled:0==N.value}])},te(t("hosts_stats.page_scan_hosts.update_periodicity_title")),3)):Ys("v-if",!0)]),Vs("div",sP,[Hs(fm,{note_list:a})])])])]),Hs(NO,{ref_key:"modal_add",ref:$,context:L.value,onAdd:se,onEdit:Q,onCloseModal:d[0]||(d[0]=e=>be(!1)),onOpenModal:d[1]||(d[1]=e=>be(!0)),onHidden:d[2]||(d[2]=e=>be(!1))},null,8,["context"])],64))},__file:"http_src/vue/page-vulnerability-scan.vue"};const oP={class:"row"},rP={class:"col-md-12 col-lg-12"},cP={class:"card card-shadow"},uP=["innerHTML"],dP=["innerHTML"];var _P={__name:"page-host-vs-result",props:{context:Object},setup(e){const t=`${http_prefix}/lua/rest/v2/get/host/vulnerability_scan_result.lua`;ma(null);const a=ma(!1),l=e,n=ma(""),s=ma(""),i=ma(""),o=ma("");return ma([]),dn((async()=>{await async function(e,r,c,u){a.value=!0;let d={host:e,scan_type:r,scan_return_result:!0,epoch:u},_=ntopng_url_manager.obj_to_url_params(d),p=`${t}?${_}`,f=await ntopng_utility.http_request(p);n.value=f.rsp,s.value=`<pre>${n.value}</pre>`,"ipv4_netscan"==r&&(e+="/24");const m="true"===l.context.is_in_mem||1==l.context.is_in_mem?`${e} <a href="${http_prefix}/lua/host_details.lua?host=${e}"><i class = "fas fa-laptop"></i></a>`:e;o.value=i18n("hosts_stats.page_scan_hosts.vs_result").replace("%{host}",m),null!=c&&(c=c.replaceAll("_"," ")),o.value=o.value.replace("%{date}",c),i.value=o.value,a.value=!1}(l.context.host,l.context.scan_type,l.context.date,l.context.epoch)})),(e,t)=>(Is(),Ms("div",oP,[Vs("div",rP,[Vs("div",cP,[Vs("h3",{class:"d-inline-block pt-3 ps-3",innerHTML:i.value},null,8,uP),a.value?(Is(),Fs(yf,{key:0})):Ys("v-if",!0),Vs("div",{class:K(["card-body",[a.value?"ntopng-gray-out":""]]),innerHTML:s.value},null,10,dP)])])]))},__file:"http_src/vue/page-host-vs-result.vue"};const pP={class:"row"},fP={class:"col-md-12 col-lg-12"},mP={class:"card card-shadow"},vP={class:"card-body"},hP={id:"open_ports"};var gP={__name:"page-open-ports",props:{context:Object},setup(e){const t=`${http_prefix}/lua/vulnerability_scan.lua`,a=ma("open_ports"),l=e=>e,n=ma(),s=e;s.context.csrf;const i=ma({csrf:s.context.csrf,ifid:s.context.ifid,is_enterprise_l:s.context.is_enterprise_l}),o=()=>x.get_url_object();function r(e){let t={click_button_show_hosts:f};null!=t[e.event_id]&&t[e.event_id](e)}function c(e,t){let a={title_i18n:"port",data_field:"port",sortable:!0,class:["text-nowrap","text-end"]},l=e[a.data_field],n=t[a.data_field];return l=_(l),n=_(n),l-n}function u(e,t,a){if(null!=e){let l=t[e.data.data_field],n=a[e.data.data_field];return"port"==e.id?(l=_(l),n=_(n),1==e.sort?l-n:n-l):"count_host"==e.id||"cves"==e.id?(l=d(l),n=d(n),l==n?c(t,a):1==e.sort?l-n:n-l):("hosts"==e.id||(null!=l||(l=""),null!=n||(n="")),l==n?c(t,a):1==e.sort?l.localeCompare(n):n.localeCompare(l))}return c(t,a)}function d(e){let t=0;return""===e||null===e||NaN===e||void 0===e?t=0:(e=e.split(",").join(""),t=parseInt(e)),t}function _(e){return""!=e&&null!=e&&NaN!=e&&null!=e||(e=0),e=parseInt(e)}const p=e=>{let a={hosts:(e,a)=>{let l="";const n=e.split(", "),s=n.length;let i=0;for(;i<5&&i<s;){const e=n[i].split("|"),a=e[0],s=e[1],o=e[2].replace(" ","_"),r="true"===e[3],c=e[4];let u="";e.length>5&&(u=e[5]);let d={host:a,scan_type:s,scan_return_result:!0,page:"show_result",epoch:c,scan_date:o},_=x.obj_to_url_params(d),p=`${t}?${_}`;const f=""!=u?0==r?`${u}  <span class="badge bg-secondary">${i18n("ipv6")}</span>`:u:a;l+=""==l?`<a href="${p}">${f}</a>`:`, <a href="${p}">${f}</a>`,i++}return s>5&&(l+="..."),l}};return e.forEach((e=>{e.render_func=a[e.data_field]})),e};async function f(e){let a={port:e.row.port_number},l=x.obj_to_url_params(a),n=`${t}?${l}`;x.go_to_url(n)}return(e,t)=>(Is(),Ms("div",pP,[Vs("div",fP,[Vs("div",mP,[Vs("div",vP,[Vs("div",hP,[Hs(rm,{ref_key:"table_open_ports",ref:n,table_id:a.value,csrf:i.value.csrf,f_map_columns:p,get_extra_params_obj:o,f_sort_rows:u,f_map_config:l,onCustom_event:r},null,8,["table_id","csrf"])])])])])]))},__file:"http_src/vue/page-open-ports.vue"};const bP={class:"form-group ms-2 me-2 mt-3 row"},yP={class:"col-form-label col-sm-2"},wP={class:"col-sm-10"},xP={class:"form-group ms-2 me-2 mt-3 row"},kP={class:"col-form-label col-sm-2"},$P={class:"col-sm-10"},SP={class:"mt-4"},NP=["disabled"];var CP={__name:"modal-edit-vs-report",props:{context:Object},emits:["add","edit"],setup(e,{expose:t,emit:a}){const l=e=>i18n(e),n=a,s=ma(i18n("hosts_stats.page_scan_hosts.reports_page.edit_report")),i=ma(null),o=ma(null),r=ma(null),c=ma(null),u=ma(!1),d=[l("hosts_stats.page_scan_hosts.reports_page.notes.note_1")],_=()=>{const e=c.value.epoch,t=r.value.replaceAll(" ","_");n("edit",{report_title:t,epoch_end:e}),i.value.close()},p=()=>{const e=r.value.split(" ").every((e=>yp.validateSingleWord(e)));u.value=e};return t({show:e=>{o.value="",r.value="",c.value=null,(e=>{c.value=e,o.value=e.report_date,r.value=e.name})(e),i.value.show()},close:()=>{i.value.close()}}),(e,t)=>(Is(),Fs(np,{ref_key:"modal_id",ref:i},{title:vl((()=>[Ks(te(s.value),1)])),body:vl((()=>[Ys(" Target information, here an IP is put "),Vs("div",bP,[Vs("label",yP,[Vs("b",null,te(l("hosts_stats.page_scan_hosts.reports_page.date")),1)]),Vs("div",wP,[wn(Vs("input",{"onUpdate:modelValue":t[0]||(t[0]=e=>o.value=e),disabled:!0,class:"form-control",type:"text"},null,512),[[jo,o.value]])])]),Vs("div",xP,[Vs("label",kP,[Vs("b",null,te(l("hosts_stats.page_scan_hosts.reports_page.name")),1)]),Vs("div",$P,[wn(Vs("input",{"onUpdate:modelValue":t[1]||(t[1]=e=>r.value=e),class:"form-control",type:"text",onInput:p,required:""},null,544),[[jo,r.value]])])]),Vs("div",SP,[Hs(fm,{note_list:d})])])),footer:vl((()=>[Vs("div",null,[Vs("button",{type:"button",onClick:_,disabled:!u.value,class:"btn btn-primary"},te(l("apply")),9,NP)])])),_:1},512))},__file:"http_src/vue/modal-edit-vs-report.vue"};const EP={class:"row"},AP={class:"col-md-12 col-lg-12"},TP={class:"card card-shadow"},IP={class:"card-body"},OP={id:"vs_reports"};var PP={__name:"page-vulnerability-scan-report",props:{context:Object},setup(e){const t=e=>i18n(e);i18n("hosts_stats.page_scan_hosts.notes.generic_notes_1").replaceAll("${http_prefix}",`${http_prefix}`);const a=t("hosts_stats.page_scan_hosts.report_page.delete_title"),l=t("hosts_stats.page_scan_hosts.report_page.delete_description"),n=`${http_prefix}/lua/enterprise/vulnerability_scan_report.lua`,s=`${http_prefix}/lua/pro/rest/v2/delete/vs/report.lua`,i=`${http_prefix}/lua/pro/rest/v2/edit/vs/report.lua`,o=ma("vs_reports"),r=ma(),c=ma(),u=ma(),d=ma(0),_=ma({}),p=e,f={csrf:p.context.csrf},m=ma({csrf:p.context.csrf,ifid:p.context.ifid});function v(){r.value.refresh_table()}const h=()=>x.get_url_object();function g(e){let t={click_button_edit:S,click_button_delete:$};null!=t[e.event_id]&&t[e.event_id](e)}function y(e,t){let a=t[e.data.data_field];return"report_date"==e.data.data_field&&(a=t.epoch),"name"==e.data.data_field&&(a=function(e,t){let a=e;e.startsWith("Report of")&&(a="report_"+t);return a}(t.name,t.epoch)),a}function w(e,t){return aN.sortByNumber(e.epoch,t.epoch,0)}function k(e,t,a){if(null!=e){let l=y(e,t),n=y(e,a);return l==n?w(t,a):"report_date"==e.id||"tcp_ports"==e.id||"udp_ports"==e.id||"cves"==e.id?aN.sortByNumber(l,n,e.sort):"name"==e.id?aN.sortByName(l,n,e.sort):"num_hosts"==e.id?aN.sortByNumber(l,n,e.sort):aN.sortByName(l,n,e.sort)}return w(t,a)}function $(e){_.value=e.row,u.value.show("delete_single_report")}function S(e){c.value.show(e.row)}async function N(e){await C(e)}const C=async function(e){const t=NtopUtils.buildURL(i,{...e});await b.http_post_request(t,f),v()};function E(){d.value=r.value.get_rows_num()}const A=e=>{let t={report_date:(e,t)=>`<a href="${NtopUtils.buildURL(n,{printable:!1,epoch_end:t.epoch,epoch_begin:t.epoch})}">${e}</a>`};return e.forEach((e=>{e.render_func=t[e.data_field]})),e},T=async function(){const e=_.value,t=NtopUtils.buildURL(s,{epoch:e.epoch});await b.http_post_request(t,f),v()};return(e,t)=>(Is(),Ms(Ss,null,[Vs("div",EP,[Vs("div",AP,[Vs("div",TP,[Vs("div",IP,[Vs("div",OP,[Hs(ZI,{ref_key:"modal_delete_confirm",ref:u,title:ya(a),body:ya(l),onDelete:T},null,8,["title","body"]),Hs(rm,{ref_key:"table_vs_reports",ref:r,table_id:o.value,csrf:m.value.csrf,f_map_columns:A,get_extra_params_obj:h,f_sort_rows:k,onCustom_event:g,onRows_loaded:E},null,8,["table_id","csrf"])])])])])]),Hs(CP,{ref_key:"modal_edit",ref:c,context:m.value,onEdit:N},null,8,["context"])],64))},__file:"http_src/vue/page-vulnerability-scan-report.vue"};const UP={class:"card h-100 overflow-hidden"},jP={class:"m-2 mt-0",style:{"margin-bottom":""}},MP={class:"m-2 mb-3"},FP={class:"card-footer"},LP="Congestion";var RP={__name:"page-snmp-usage",props:{context:Object},setup(e){const t=e,a=[{value:"10_min",label:i18n("show_alerts.presets.10_min"),currently_active:!1},{value:"30_min",label:i18n("show_alerts.presets.30_min"),currently_active:!0},{value:"hour",label:i18n("show_alerts.presets.hour"),currently_active:!1},{value:"2_hours",label:i18n("show_alerts.presets.2_hours"),currently_active:!1},{value:"6_hours",label:i18n("show_alerts.presets.6_hours"),currently_active:!1},{value:"12_hours",label:i18n("show_alerts.presets.12_hours"),currently_active:!1},{value:"day",label:i18n("show_alerts.presets.day"),currently_active:!1},{value:"week",label:i18n("show_alerts.presets.week"),currently_active:!1},{value:"month",label:i18n("show_alerts.presets.month"),currently_active:!1},{value:"year",label:i18n("show_alerts.presets.year"),currently_active:!1},{value:"custom",label:i18n("show_alerts.presets.custom"),currently_active:!1,disabled:!0}],l=ma(null),n=ma(null),s=ma("snmp_usage"),i=ma("snmp_usage_chart"),o=t.context.csrf,r=ma(null),c=ma(ntopChartApex.typeChart.TS_LINE),u=`${http_prefix}/lua/pro/rest/v2/get/snmp/metric/usage_chart.lua`;let d="date_time_picker";const _=[i18n("snmp.chart_congestion_rate_note"),i18n("snmp.chart_congestion_link"),i18n("snmp.chart_congestion_configuration"),i18n("snmp.chart_congestion_rate_color")],p=e=>{const a=m.getFormatter("percentage");let l={ip:(e,t)=>`<a href=${`${http_prefix}/lua/pro/enterprise/snmp_device_details.lua?ip=${e}`}>${e}</a>`,interface:(e,t)=>`<a href=${`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${t.ip}&snmp_port_idx=${t.ifid}`}>${e}</a>`,type:(e,t)=>"uplink"==e?`${i18n("out_usage")} <i class="fa-solid fa-circle-arrow-up" style="color: #C6D9FD"></i>`:`${i18n("in_usage")} <i class="fa-solid fa-circle-arrow-down" style="color: #90EE90"></i>`,speed:(e,t)=>`${m.getFormatter("speed")(e)} <a target="_blank" href='${g(t)}'><i class="fas fa-cog"></i></a>`,min:(e,t)=>a(e),max:(e,t)=>a(e),average:(e,t)=>a(e),last_value:(e,t)=>a(e),congestion_rate:(e,t)=>a(e)};return e.forEach((e=>{if(e.render_func=l[e.data_field],"actions"==e.id){const a={historical_data:t.show_historical};e.button_def_array.forEach((e=>{a[e.id]||e.class.push("disabled")}))}})),e};function f(e,t,a){if(null!=e){const l=t[e.data.data_field],n=a[e.data.data_field];if(l==n)return aN.sortByName(t.device,a.device,e?e.sort:null);if("device_name"==e.id)return aN.sortByName(l,n,e.sort);if("ip"==e.id)return aN.sortByIP(l,n,e.sort);if("interface"==e.id)return aN.sortByName(l,n,e.sort);if("type"==e.id)return aN.sortByName(l,n,e.sort);if("speed"==e.id){const t=-1;return aN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("min"==e.id){const t=-1;return aN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("max"==e.id){const t=-1;return aN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("average"==e.id){const t=-1;return aN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("congestion_rate"==e.id){const t=-1;return aN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("last_value"==e.id){const t=-1;return aN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}}return aN.sortByName(t.device,a.device,e?e.sort:null)}async function v(){if(l.value&&l.value.refresh_table(!1),r.value){const e=await x();r.value.update_chart_series(e?.data)}}const h=()=>ntopng_url_manager.get_url_object();function g(e){return`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${e.ip}&snmp_port_idx=${e.ifid}&page=config`}function b(e){const t=e.row,a=ntopng_url_manager.get_url_entry("epoch_begin"),l=ntopng_url_manager.get_url_entry("epoch_end");window.open(`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${t.ip}&snmp_port_idx=${t.ifid}&page=historical&ifid=-1&epoch_end=${l}&epoch_begin=${a}&timeseries_groups_mode=1_chart_x_metric&timeseries_groups=snmp_interface;-1%2B${t.ip}%2B${t.ifid};snmp_if:usage;uplink=true:false:false:false|downlink=true:false:false:false`)}function y(e){const t=e.row;window.open(g(t))}function w(e){let t={click_button_timeseries:b,click_button_configuration:y};null!=t[e.event_id]&&t[e.event_id](e)}async function x(){let e=null;const t={csrf:o,ifid:-1,epoch_begin:ntopng_url_manager.get_url_entry("epoch_begin"),epoch_end:ntopng_url_manager.get_url_entry("epoch_end"),host:ntopng_url_manager.get_url_entry("host")};e=await ntopng_utility.http_post_request(u,t);const a=Py.formatSimpleSerie(e,LP,"bar",["percentage"],[0,100]);return a.title='<div style="font-size:18px;">'+i18n("snmp.top_congested_devices")+"</div>",a.titleHeight=48,a.axes.y.axisLabelWidth=40,a.xAxisHeight=6,a.axes.x.axisLabelWidth=120,a.axes.x.pixelsPerLabel=20,a.xRangePad=50,localStorage.setItem(`${LP}_x_axis_label`,JSON.stringify(e.labels)),localStorage.setItem(`${LP}_metadata`,JSON.stringify(e.metadata)),a.axes.x.axisLabelFormatter=function(e,t,a,l){return""},a.axes.x.valueFormatter=function(e,t,a,l){if(null!=e){const t=Number(e.toFixed(4)),a=localStorage.getItem(`${LP}_x_axis_label`),l=JSON.parse(a)[t-1];return l?`<span style="white-space: pre-wrap">${l}</span>`:""}},a.clickCallback=function(e,t,a){const l=Number(t.toFixed(4)),n=localStorage.getItem(`${LP}_metadata`),s=JSON.parse(n)[l-1];s&&b({row:s})},a}return _n((async()=>{await Promise.all([ntopng_sync.on_ready(d)])})),(e,t)=>(Is(),Ms("div",UP,[Hs(A_,{style:{"margin-top":"0.5rem"},class:"ms-1",id:ya(d),enable_refresh:!1,ref_key:"date_time_picker",ref:n,onEpoch_change:v,custom_time_interval_list:a},null,8,["id"]),Vs("div",jP,[Hs(Ag,{ref_key:"chart",ref:r,id:i.value,chart_type:c.value,base_url_request:u,get_custom_chart_options:x,register_on_status_change:!1,disable_pointer_events:!1},null,8,["id","chart_type"])]),Vs("div",MP,[Hs(rm,{ref_key:"table_snmp_usage",ref:l,table_id:s.value,csrf:ya(o),f_map_columns:p,get_extra_params_obj:h,f_sort_rows:f,onCustom_event:w},null,8,["table_id","csrf"])]),Vs("div",FP,[Hs(fm,{note_list:_})])]))}};lp("\n.dygraph-axis-label.dygraph-axis-label-x[data-v-da0f3f1a] {\n    font-size: 12px;\n    transform: rotate(-90deg) translate(-20px, 0);\n}\n"),RP.__scopeId="data-v-da0f3f1a",RP.__file="http_src/vue/page-snmp-usage.vue";const DP=[{name:"Unknown",icon:""},{name:"Linux",icon:"<i class='fab fa-linux fa-lg'></i>"},{name:"Windows",icon:"<i class='fab fa-windows fa-lg'></i>"},{name:"MacOS",icon:"<i class='fab fa-apple fa-lg'></i>"},{name:"iOS",icon:"<i class='fab fa-apple fa-lg'></i>"},{name:"Android",icon:"<i class='fab fa-android fa-lg'></i>"},{name:"LaserJET",icon:"LasetJET"},{name:"AppleAirport",icon:"Apple Airport"}],zP=[{id:"unknown",icon:"",name:i18n("device_types.unknown")},{id:"printer",icon:'<i class="fas fa-print fa-lg devtype-icon" aria-hidden="true"></i>',name:i18n("device_types.printer")},{id:"video",icon:'<i class="fas fa-video fa-lg devtype-icon" aria-hidden="true"></i>',name:i18n("device_types.video")},{id:"workstation",icon:'<i class="fas fa-desktop fa-lg devtype-icon" aria-hidden="true"></i>',name:i18n("device_types.workstation")},{id:"laptop",icon:'<i class="fas fa-laptop fa-lg devtype-icon" aria-hidden="true"></i>',name:i18n("device_types.laptop")},{id:"tablet",icon:'<i class="fas fa-tablet fa-lg devtype-icon" aria-hidden="true"></i>',name:i18n("device_types.tablet")},{id:"phone",icon:'<i class="fas fa-mobile fa-lg devtype-icon" aria-hidden="true"></i>',name:i18n("device_types.phone")},{id:"tv",icon:'<i class="fas fa-tv fa-lg devtype-icon" aria-hidden="true"></i>',name:i18n("device_types.tv")},{id:"networking",icon:'<i class="fas fa-arrows-alt fa-lg devtype-icon" aria-hidden="true"></i>',name:i18n("device_types.networking")},{id:"wifi",icon:'<i class="fas fa-wifi fa-lg devtype-icon" aria-hidden="true"></i>',name:i18n("device_types.wifi")},{id:"nas",icon:'<i class="fas fa-database fa-lg devtype-icon" aria-hidden="true"></i>',name:i18n("device_types.nas")},{id:"multimedia",icon:'<i class="fas fa-music fa-lg devtype-icon" aria-hidden="true"></i>',name:i18n("device_types.multimedia")},{id:"iot",icon:'<i class="fas fa-thermometer fa-lg devtype-icon" aria-hidden="true"></i>',name:i18n("device_types.iot")}],qP={getOSList:()=>icons,getAssetIconsList:()=>zP,getOS:e=>DP[e]||DP[0],getAssetIcon:e=>null!=zP[e]?zP[e].icon:""},BP={class:"m-2 mb-3"},VP={class:"dropdown me-3 d-inline-block"},HP={class:"no-wrap d-flex align-items-center my-auto me-2 filters-label"};var GP={__name:"page-hosts-list",props:{context:Object},setup(e){const t=e,l=t.context?.has_vlans?ma("hosts_list_with_vlans"):ma("hosts_list"),n=ma(null),s=t.context.csrf,i=ma([]);ma([]);const o="<font color='#5cb85c'><i class='fas fa-lg fa-child' aria-hidden='true' title='"+i18n("host_pools.children_safe")+"'></i></font>",r="<i class='fas fa-flag' title='"+i18n("system_host")+"'></i>",c="<i class='fas fa-eye-slash' title='"+i18n("hidden_from_top_talkers")+"'></i>",u="<i class='fas fa-ban fa-sm' title='"+i18n("hosts_stats.blacklisted")+"'></i>",d="<i class='fas fa-spider fa-sm' title='"+i18n("hosts_stats.crawler_bot_scanner")+"'></i>",_="<abbr title='"+i18n("multicast")+"'><span class='badge bg-primary'>"+i18n("short_multicast")+"</span></abbr>",p="<abbr title='"+i18n("details.label_local_host")+"'><span class='badge bg-success'>"+i18n("details.label_short_local_host")+"</span></abbr>",f="<abbr title='"+i18n("details.label_remote")+"'><span class='badge bg-secondary'>"+i18n("details.label_short_remote")+"</span></abbr>",v="<abbr title='"+i18n("details.label_blackhole")+"'><span class='badge bg-info'>"+i18n("details.label_short_blackhole")+"</span></abbr>",h="<i class='fas fa-hourglass' title='"+i18n("hosts_stats.blocking_traffic_policy_popup_msg")+"'></i>",g={1:"<i class='fas fa-arrow-up'></i>",2:"<i class='fas fa-arrow-down'></i>",3:"<i class='fas fa-minus'></i>"},b=e=>{let t={ip_address:(e,t)=>{const a=t.host;let l=a.ip,n="";const s=`${http_prefix}/lua/host_details.lua?host=${a.ip}&vlan=${a.vlan.id}`;if(ZS.isEmptyOrNull(a.system_host)||(n=`${n} ${r}`),!ZS.isEmptyOrNull(a.os)){n=`${n} ${qP.getOS(a.os).icon}`}return ZS.isEmptyOrNull(a.device_type)||(n=`${n} ${qP.getAssetIcon(a.device_type)||""}`),ZS.isEmptyOrNull(a.hidden_from_top)||(n=`${n} ${c}`),ZS.isEmptyOrNull(a.child_safe)||(n=`${n} ${o}`),ZS.isEmptyOrNull(a.dhcp_host)||(n=`${n} <i class="fa-solid fa-bolt" title="DHCP Host"></i>`),ZS.isEmptyOrNull(a.blocking_traffic_policy)||(n=`${n} ${h}`),ZS.isEmptyOrNull(a.country)||(n=`${n} <a href='${http_prefix}/lua/hosts_stats.lua?country=${a.country}'><img src='${http_prefix}/dist/images/blank.gif' class='flag flag-${a.country.toLowerCase()}'></a>`),ZS.isEmptyOrNull(a.is_blacklisted)||(n=`${n} ${u}`),ZS.isEmptyOrNull(a.crawler_bot_scanner_host)||(n=`${n} ${d}`),ZS.isEmptyOrNull(a.is_multicast)||(n=`${n} ${_}`),ZS.isEmptyOrNull(a.localhost)||(n=`${n} ${p}`),ZS.isEmptyOrNull(a.remotehost)||(n=`${n} ${f}`),ZS.isEmptyOrNull(a.is_blackhole)||(n=`${n} ${v}`),`<a href=${s}>${l}</a> ${n}`},num_flows:(e,t)=>e>0?m.getFormatter("full_number")(e):"",alerts:(e,t)=>e>0?m.getFormatter("full_number")(e)+" <i class='fas fa-exclamation-triangle' style='color: #B94A48;'></i>":"",vlan:(e,t)=>{const a=t.host.vlan;return ZS.isEmptyOrNull(a.name)?ZS.isEmptyOrNull(a.id)?"":a.id:a.name},num_cves:(e,t)=>e>0?m.getFormatter("full_number")(e):"",tcp_unresp_as_server:(e,t)=>e>0?m.getFormatter("full_number")(e):"",hostname:(e,t)=>{let a=e.name;return ZS.isEmptyOrNull(e.alt_name)||(a=e.alt_name,e.alt_name==e.name||ZS.isEmptyOrNull(e.name)||(a=`${a} [${e.name}]`)),a},first_seen:(e,t)=>e>0?a.secondsToTime(Math.round((new Date).getTime()/1e3)-e):"",score:(e,t)=>e>0?m.getFormatter("full_number")(e):"",traffic_breakdown:(e,t)=>{const l=100*t.bytes.sent/t.bytes.total,n=100*t.bytes.rcvd/t.bytes.total;return a.createBreakdown(l,n,i18n("sent"),i18n("rcvd"))},throughput:(e,t)=>{let a="";return"bps"!==e.type||ZS.isEmptyOrNull(e.bps)?"pps"!==e.type||ZS.isEmptyOrNull(e.pps)||(a=m.getFormatter("pps")(e.pps)):a=m.getFormatter("bps")(e.bps),ZS.isEmptyOrNull(a)||ZS.isEmptyOrNull(e.trend)||(a=`${a} ${g[e.trend]}`),a},bytes:(e,t)=>ZS.isEmptyOrNull(e.total)?"":m.getFormatter("bytes")(e.total)};return e.forEach((e=>{e.render_func=t[e.data_field]})),e};function y(){i.value.forEach(((e,t)=>{null==e.basic_label&&(e.basic_label=e.label);const a=ntopng_url_manager.get_url_entry(e.id);e.options.forEach((t=>{t.value.toString()===a&&(e.current_option=t)}))}))}function w(){y()}function x(e){ntopng_url_manager.set_key_to_url(e.key,`${e.value}`),y(),n.value.refresh_table()}function k(e,t,a){}const $=()=>ntopng_url_manager.get_url_object();function S(e){const t=e.row;window.open(function(e){return`${http_prefix}/lua/host_details.lua?host=${e.host.ip}&vlan=${e.host.vlan.id}&page=flows`}(t))}function N(e){let t={click_button_live_flows:S};null!=t[e.event_id]&&t[e.event_id](e)}function C(){n.value.refresh_table(!0)}return _n((async()=>{setInterval(C,1e4),i.value=await async function(){let e=$(),t=ntopng_url_manager.obj_to_url_params(e);const a=`${http_prefix}/lua/rest/v2/get/host/host_filters.lua?${t}`;return(await ntopng_utility.http_request(a)).map((e=>{const t=ntopng_url_manager.get_url_entry(e.name);return ZS.isEmptyOrNull(t)&&ntopng_url_manager.set_key_to_url(e.name,""),{id:e.name,label:e.label,title:e.tooltip,options:e.value,hidden:1==e.value.length}}))}(),y()})),(e,t)=>(Is(),Ms("div",BP,[Hs(rm,{ref_key:"table_hosts_list",ref:n,table_id:ya(l),csrf:ya(s),f_map_columns:b,get_extra_params_obj:$,f_sort_rows:k,onCustom_event:N,onRows_loaded:w},{custom_header:vl((()=>[(Is(!0),Ms(Ss,null,An(i.value,(e=>(Is(),Ms("div",VP,[Vs("span",HP,[Vs("b",null,te(e.basic_label),1)]),Hs(l_,{selected_option:e.current_option,"onUpdate:selected_option":t=>e.current_option=t,theme:"bootstrap-5",dropdown_size:"small",options:e.options,onSelect_option:x},null,8,["selected_option","onUpdate:selected_option","options"])])))),256))])),_:1},8,["table_id","csrf"])]))},__file:"http_src/vue/page-hosts-list.vue"};const WP={Safe:"<i class='fas fa-thumbs-up'></i>",Acceptable:"<i class='fas fa-thumbs-up'></i>",Fun:"<i class='fas fa-smile'></i>",Unsafe:"<i class='fas fa-thumbs-down'></i>",Dangerous:"<i class='fas fa-exclamation-triangle'></i>"},KP=[{id:-1,icon_class:"badge bg-warning"},{id:0,icon_class:"badge bg-warning"},{id:1,icon_class:"badge bg-success"}],JP=function(e,t){let a="";return KP.forEach((l=>{Number(l.id)===Number(t)&&(a=`<span class="${l.icon_class}" title="${e}">${e}</span>`)})),a},YP={formatBreedIcon:function(e,t){let a="";return WP[e]&&(a=WP[e]),t?`${a} <i class='fas fa-lock'></i>`:a},formatConfidence:JP},ZP={none:{severity_id:0,label:"bg-info",color:"#a8e4ef",icon:"",i18n_title:"alerts_dashboard.none",syslog_severity:10},debug:{severity_id:1,label:"bg-info",icon:"fas fa-bug text-info",color:"#a8e4ef",i18n_title:"alerts_dashboard.debug",syslog_severity:7,emoji:"â¹"},info:{severity_id:2,label:"bg-info",icon:"fas fa-info-circle text-info",color:"#c1f0c1",i18n_title:"alerts_dashboard.info",syslog_severity:6,used_by_alerts:!0,emoji:"â¹"},notice:{severity_id:3,label:"bg-info",icon:"fas fa-info-circle text-info",color:"#5cd65c",i18n_title:"alerts_dashboard.notice",syslog_severity:5,used_by_alerts:!0,emoji:"â¹"},warning:{severity_id:4,label:"bg-warning",icon:"fas fa-exclamation-triangle text-warning",color:"#ffc007",i18n_title:"alerts_dashboard.warning",syslog_severity:4,used_by_alerts:!0,emoji:"â "},error:{severity_id:5,label:"bg-danger",icon:"fas fa-exclamation-triangle text-danger",color:"#ff3231",i18n_title:"alerts_dashboard.error",syslog_severity:3,used_by_alerts:!0,emoji:"â"},critical:{severity_id:6,label:"bg-danger",icon:"fas fa-exclamation-triangle text-danger",color:"#fb6962",i18n_title:"alerts_dashboard.critical",syslog_severity:2,emoji:"â"},emergency:{severity_id:8,label:"bg-danger text-danger",icon:"fas fa-bomb text-danger",color:"#fb6962",i18n_title:"alerts_dashboard.emergency",syslog_severity:0,emoji:"ð©"}},XP={getSeverityIcon:function(e){for(const[t,a]of Object.entries(ZP))if(Number(e)==Number(a.severity_id))return a.icon}},QP={class:"m-2 mb-3"},eU={class:"dropdown me-3 d-inline-block"},tU={class:"no-wrap d-flex align-items-center filters-label"},aU={class:"d-flex justify-content-center align-items-center"},lU="<i class='fas fa-file-export'></i>";var nU={__name:"page-flows-list",props:{context:Object},setup(e){const t=e=>i18n(e),l=e,n=l.context?.has_exporters?ma("flows_list_with_exporters"):ma("flows_list"),s=ma(null),i=l.context.csrf,o=ma([]),r=ma([]),c=`${http_prefix}/lua/host_details.lua`,u=`${http_prefix}/lua/pro/enterprise/flowdevice_details.lua`,d="<font color='#5cb85c'><i class='fas fa-lg fa-child' aria-hidden='true' title='"+i18n("host_pools.children_safe")+"'></i></font>",_="<i class='fas fa-flag' title='"+i18n("system_host")+"'></i>",p="<i class='fas fa-eye-slash' title='"+i18n("hidden_from_top_talkers")+"'></i>",f="<i class='fas fa-ban fa-sm' title='"+i18n("hosts_stats.blacklisted")+"'></i>",v="<i class='fas fa-spider fa-sm' title='"+i18n("hosts_stats.crawler_bot_scanner")+"'></i>",h="<abbr title='"+i18n("multicast")+"'><span class='badge bg-primary'>"+i18n("short_multicast")+"</span></abbr>",g="<abbr title='"+i18n("details.label_local_host")+"'><span class='badge bg-success'>"+i18n("details.label_short_local_host")+"</span></abbr>",b="<abbr title='"+i18n("details.label_remote")+"'><span class='badge bg-secondary'>"+i18n("details.label_short_remote")+"</span></abbr>",y="<abbr title='"+i18n("details.label_blackhole")+"'><span class='badge bg-info'>"+i18n("details.label_short_blackhole")+"</span></abbr>",w="<i class='fas fa-hourglass' title='"+i18n("hosts_stats.blocking_traffic_policy_popup_msg")+"'></i>",x={1:"<i class='fas fa-arrow-up'></i>",2:"<i class='fas fa-arrow-down'></i>",3:"<i class='fas fa-minus'></i>"},k=ma(!1),$=ma(null),S=function(e){let t="",a=` : ${e.port}`,n="",s="";const i=`${c}?host=${e.ip}&vlan=${e.vlan||""}`;if(ZS.isEmptyOrNull(e.system_host)||(t=`${t} ${_}`),!ZS.isEmptyOrNull(e.os)){t=`${t} ${osUtils.getOS(e.os).icon}`}return ZS.isEmptyOrNull(e.device_type)||(t=`${t} ${osUtils.getAssetIcon(e.device_type)||""}`),ZS.isEmptyOrNull(e.hidden_from_top)||(t=`${t} ${p}`),ZS.isEmptyOrNull(e.child_safe)||(t=`${t} ${d}`),ZS.isEmptyOrNull(e.dhcp_host)||(t=`${t} <i class="fa-solid fa-bolt" title="DHCP Host"></i>`),ZS.isEmptyOrNull(e.blocking_traffic_policy)||(t=`${t} ${w}`),ZS.isEmptyOrNull(e.country)||(t=`${t} <a href='${http_prefix}/lua/hosts_stats.lua?country=${e.country}'><img src='${http_prefix}/dist/images/blank.gif' class='flag flag-${e.country.toLowerCase()}'></a>`),ZS.isEmptyOrNull(e.is_blacklisted)||(t=`${t} ${f}`),ZS.isEmptyOrNull(e.crawler_bot_scanner_host)||(t=`${t} ${v}`),ZS.isEmptyOrNull(e.is_multicast)||(t=`${t} ${h}`),ZS.isEmptyOrNull(e.localhost)||(t=`${t} ${g}`),ZS.isEmptyOrNull(e.remotehost)||(t=`${t} ${b}`),ZS.isEmptyOrNull(e.is_blackhole)||(t=`${t} ${y}`),a=0!==e.port?` : <a href="#" class="tableFilter" tag-filter="port" tag-value="${e.port}">${e.service_port||e.port}</a>`:"",ZS.isEmptyOrNull(e.process.name)||(n=` <a href="${http_prefix}/lua/process_details.lua?host=${e.ip}&vlan=${e.vlan}&pid_name=${e.process.pid_name}&pid=${e.process.pid}"><i class='fas fa-terminal'></i> ${e.process.process_name}</a>`),ZS.isEmptyOrNull(e.container.id)||(s=` <a href="${http_prefix}/lua/flows_stats.lua?container=${e.container.id}"><i class='fas fa-ship'></i> ${e.container.name}</a>`),l.context.is_viewed?`<a href="#" class="tableFilter" tag-filter="flowhosts_type" tag-value="${e.ip}@${e.vlan||0}">${e.name}</a> ${t}${a}${n}${s}`:`<a href="#" class="tableFilter" tag-filter="flowhosts_type" tag-value="${e.ip}@${e.vlan||0}">${e.name}</a> ${t} <a href=${i}><i class='fas fa-laptop'></i></a>${a}${n}${s}`},N=e=>{let t={flow:(e,t)=>`${S(t.client)} <i class="fas fa-exchange-alt fa-lg" aria-hidden="true"></i> ${S(t.server)}`,protocol:(e,t)=>{e=t.application;const a=t.verdict?` <strike>${e.name}</strike>`:`${e.name}`,l=`<a href="#" class="tableFilter" tag-filter="application" tag-value="${ZS.isEmptyOrNull(e.master_id)||e.master_id===e.app_id?e.app_id:`${e.master_id}.${e.app_id}`}">${a} ${YP.formatBreedIcon(e.breed,e.encrypted)}</a> ${YP.formatConfidence(e.confidence,e.confidence_id)}`;let n="";return(e=t.l4_proto)&&e.name&&(n=t.verdict?` <strike>${e.name}</strike>`:`${e.name}`),n=`<a href="#" class="tableFilter" tag-filter="l4proto" tag-value="${e.id}">${n}</a>`,`${n}:${l}`},proto:(e,t)=>{if(e){return t.verdict?` <strike>${e}</strike>`:`${e}`}return""},first_seen:(e,t)=>e>0?a.secondsToTime(Math.round((new Date).getTime()/1e3)-e):"",last_seen:(e,t)=>e>0?a.secondsToTime(Math.round((new Date).getTime()/1e3)-e):"",score:(e,t)=>{if(e>0){let a="";return ZS.isEmptyOrNull(t.predominant_alert)||(a=` <i class="${XP.getSeverityIcon(t.predominant_alert.severity_id)}" title="${t.predominant_alert.name}"></i>`),`${m.getFormatter("full_number")(e)}${a}`}return""},traffic_breakdown:(e,t)=>{const l=100*t.bytes.cli_bytes/t.bytes.total,n=100*(t.bytes.total-t.bytes.cli_bytes)/t.bytes.total;return a.createBreakdown(l,n,i18n("client"),i18n("server"))},throughput:(e,t)=>{let a="";return"bps"!==e.type||ZS.isEmptyOrNull(e.bps)?"pps"!==e.type||ZS.isEmptyOrNull(e.pps)||(a=m.getFormatter("pps")(e.pps)):a=m.getFormatter("bps")(e.bps),ZS.isEmptyOrNull(a)||ZS.isEmptyOrNull(e.trend)||(a=`${a} ${x[e.trend]}`),a},bytes:(e,t)=>ZS.isEmptyOrNull(e.total)?"":m.getFormatter("bytes")(e.total),info:(e,t)=>{let a="";if(!ZS.isEmptyOrNull(e)){a=e;const l=`${http_prefix}/lua/pro/enterprise/network_maps.lua?map=periodicity_map&page=table`;if(t.periodic_flow){a=`${e} <a href="${l}&host=${t.client.mac?t.client.mac:t.client.host}&l7proto=${t.application.name}"><span class="badge bg-warning text-dark">${i18n("periodic_flow")}</span></a>`}if(t.application.http_method){let e="warning",l="badge bg-danger";"GET"==t.application.http_method&&(e="success"),t.application.return_code<400&&(l="badge bg-success"),a=`<span class="badge bg-${e}">${t.application.http_method}</span> <span class="${l}">${t.application.rsp_status_code}</span> ${a}`}}return a},flow_exporter:e=>ZS.isEmptyOrNull(e)?"":`<a href="${u}?ip=${e.device.ip}">${lU}</a> <a href="#" class="tableFilter" tag-filter="deviceIP" tag-value="${e.device.ip}">${e.device.name}</a>`,in_index:(e,t)=>{if(!ZS.isEmptyOrNull(t.flow_exporter)){let e=t.flow_exporter.in_port.name;return e!==t.flow_exporter.in_port.index&&(e=`${e} [${t.flow_exporter.in_port.index}]`),`<a href="${u}?ip=${t.flow_exporter.device.ip}&snmp_port_idx=${t.flow_exporter.in_port.index}">${lU}</a> <a href="#" class="tableFilter" tag-filter="inIfIdx" tag-filter2="deviceIP" tag-value="${t.flow_exporter.in_port.index}" tag-value2="${t.flow_exporter.device.ip}">${e}</a>`}return""},out_index:(e,t)=>{if(!ZS.isEmptyOrNull(t.flow_exporter)){let e=t.flow_exporter.out_port.name;return e!==t.flow_exporter.out_port.index&&(e=`${e} [${t.flow_exporter.out_port.index}]`),`<a href="${u}?ip=${t.flow_exporter.device.ip}&snmp_port_idx=${t.flow_exporter.out_port.index}">${lU}</a> <a href="#" class="tableFilter" tag-filter="outIfIdx" tag-filter2="deviceIP" tag-value="${t.flow_exporter.out_port.index}" tag-value2="${t.flow_exporter.device.ip}">${e}</a>`}return""}};return e.forEach((e=>{e.render_func=t[e.data_field]})),e};function C(e){const t=e.target.getAttribute("tag-value"),a=e.target.getAttribute("tag-filter"),l=e.target.getAttribute("tag-value2"),n=e.target.getAttribute("tag-filter2");A({key:a,value:t},n?{key:n,value:l}:null)}function E(){document.querySelectorAll(".tableFilter").forEach((e=>{e.addEventListener("click",C)}))}function A(e,t){ntopng_url_manager.set_key_to_url(e.key,`${e.value}`),t&&ntopng_url_manager.set_key_to_url(t.key,`${t.value}`),s.value.refresh_table(),I()}function T(e){if(e)return r.value=e.map((e=>(null===ntopng_url_manager.get_url_entry(e.name)&&ntopng_url_manager.set_key_to_url(e.name,""),{id:e.name,label:e.label,title:e.tooltip,options:e.value,show_with_key:e.show_with_key,show_with_value:e.show_with_value}))),void T();o.value=r.value.filter((e=>{if(e.show_with_key){if(ntopng_url_manager.get_url_entry(e.show_with_key)!==e.show_with_value)return!1}return!0})),o.value.forEach(((e,t)=>{null==e.basic_label&&(e.basic_label=e.label);const a=ntopng_url_manager.get_url_entry(e.id);e.options.forEach((t=>{t.value.toString()===a&&(e.current_option=t)}))}))}async function I(){clearInterval($.value),k.value=!0;let e=U(),t=ntopng_url_manager.obj_to_url_params(e);const a=`${http_prefix}/lua/rest/v2/get/flow/flow_filters.lua?${t}`;T(await ntopng_utility.http_request(a)),k.value=!1,clearInterval($.value),$.value=setInterval(F,1e4)}function O(){o.value.forEach(((e,t)=>{ntopng_url_manager.set_key_to_url(e.id,"")})),I(),s.value.refresh_table()}function P(e,t,a){}const U=()=>ntopng_url_manager.get_url_object();function j(e){const t=e.row;window.open(function(e){return`${http_prefix}/lua/flow_details.lua?flow_key=${e.key}&flow_hash_id=${e.hash_id}`}(t))}function M(e){let t={click_button_live_flows:j};null!=t[e.event_id]&&t[e.event_id](e)}function F(){s.value.refresh_table(!0)}return dn((()=>{I()})),_n((()=>{clearInterval($.value),$.value=setInterval(F,1e4)})),(e,a)=>(Is(),Ms("div",QP,[Ys('    <div class="d-flex justify-content-center align-items-center">\n            <div class="col-12">\n                <PietyChart ref="chart" :id="piety_id" :refresh_rate="refresh_rate">\n                </PietyChart>\n            </div>\n        </div>\n'),Hs(rm,{ref_key:"table_flows_list",ref:s,table_id:ya(n),csrf:ya(i),f_map_columns:N,get_extra_params_obj:U,f_sort_rows:P,onCustom_event:M,onRows_loaded:E},{custom_header:vl((()=>[(Is(!0),Ms(Ss,null,An(o.value,(e=>(Is(),Ms("div",eU,[Vs("span",tU,[Vs("b",null,te(e.basic_label),1)]),Hs(l_,{selected_option:e.current_option,"onUpdate:selected_option":t=>e.current_option=t,theme:"bootstrap-5",dropdown_size:"small",disabled:k.value,options:e.options,onSelect_option:A},null,8,["selected_option","onUpdate:selected_option","disabled","options"])])))),256)),Vs("div",aU,[Vs("div",{class:"btn btn-sm btn-primary mt-2 me-3",type:"button",onClick:O},te(t("reset")),1),Hs(cm,{show:k.value,size:"1rem",class:"me-1"},null,8,["show"])])])),_:1},8,["table_id","csrf"])]))},__file:"http_src/vue/page-flows-list.vue"};const sU={class:"m-2 mb-3"},iU=["title"],oU=["onClick","title"],rU={class:"card-footer"};var cU={__name:"page-snmp-interfaces",props:{context:Object},setup(e){const t=e,a=t.context?.inside_a_device?ma("snmp_device_interfaces"):ma("snmp_interfaces"),l=ma(null),n=t.context.csrf,s=ma([]),i=ma([]),o=[i18n("snmp.snmp_note_periodic_interfaces_polling"),i18n("snmp.snmp_note_thpt_calc"),i18n("snmp.snmp_note_avg_usage")],r={1:"<font color=green>"+i18n("snmp.status_up")+"</font>",101:"<font color=green>"+i18n("snmp.status_up_in_use")+"</font>",2:"<font color=red>"+i18n("snmp.status_down")+"</font>",3:i18n("snmp.testing"),4:i18n("snmp.status_unknown"),5:i18n("snmp.status_dormant"),6:i18n("status_notpresent"),7:"<font color=red>"+i18n("snmp.status_lowerlayerdown")+"</font>"},c={1:i18n("unknown"),2:"<font color=orange>"+i18n("flow_devices.half_duplex")+"</font>",3:"<font color=green>"+i18n("flow_devices.full_duplex")+"</font>"},u=e=>{m.getFormatter("percentage");let a={device_name:(e,t)=>`<a href=${`${http_prefix}/lua/pro/enterprise/snmp_device_details.lua?ip=${t.device_ip}`}>${e}</a>`,interface_name:(e,t)=>`<a href=${`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${t.device_ip}&snmp_port_idx=${t.interface_id}`}>${e}</a>`,vlan:(e,t)=>{let a="";return""!=t.vlan_name&&(a="["+t.vlan_name+"]"),`${e} ${a}`},admin_status:(e,t)=>`${r[e]||""}`,status:(e,t)=>`${r[e]||""}`,duplex_status:(e,t)=>`${c[e]||""}`,num_macs:(e,t)=>{if(e>0){return`<a href=${`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${t.device_ip}&snmp_port_idx=${t.interface_id}&page=layer_2`}>${e}</a>`}return""},in_bytes:(e,t)=>e>0?m.getFormatter("bytes")(e):"",out_bytes:(e,t)=>e>0?m.getFormatter("bytes")(e):"",in_errors:(e,t)=>e>0?m.getFormatter("full_number")(e):"",in_discards:(e,t)=>e>0?m.getFormatter("full_number")(e):"",throughput:(e,t)=>e>0?m.getFormatter("bps")(e):"",uplink_speed:(e,t)=>`${m.getFormatter("speed")(e)} <a href='${v(t,!0)}'><i class="fas fa-cog"></i></a>`,downlink_speed:(e,t)=>`${m.getFormatter("speed")(e)} <a href='${v(t,!0)}'><i class="fas fa-cog"></i></a>`,last_in_usage:(e,t)=>e>0?m.getFormatter("percentage")(e):"",last_out_usage:(e,t)=>e>0?m.getFormatter("percentage")(e):"",last_change:(e,t)=>t.last_change_string};return e.forEach((e=>{if(e.render_func=a[e.data_field],"actions"==e.id){const a={historical_data:t.show_historical};e.button_def_array.forEach((e=>{a[e.id]||e.class.push("disabled")}))}})),e};function d(e,t){t.stopPropagation(),ntopng_url_manager.set_key_to_url(e.key,`${e.value}`),s.value.forEach(((e,t)=>{null==e.basic_label&&(e.basic_label=e.label);const a=ntopng_url_manager.get_url_entry(e.id);null!=a&&e.options.forEach((t=>{t.value.toString()===a&&(e.label=`${e.basic_label}: ${t.label||t.value}`)}))})),l.value.refresh_table()}const _=(e,t)=>a=>{!async function(e,t){e.show_spinner=!0,await Ja(),e.options=s.value.find((t=>t.id==e.id)).options,await Ja();let a=i.value[t];a.load_menu(),e.show_spinner=!1}(e,t)};function p(e,t,a){if(null!=e){const l=t[e.data.data_field],n=a[e.data.data_field];if(l==n)return aN.sortByName(t.device,a.device,e?e.sort:null);if("device_name"==e.id)return aN.sortByName(l,n,e.sort);if("ip"==e.id)return aN.sortByIP(l,n,e.sort);if("interface"==e.id)return aN.sortByName(l,n,e.sort);if("type"==e.id)return aN.sortByName(l,n,e.sort);if("speed"==e.id){const t=-1;return aN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("min"==e.id){const t=-1;return aN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("max"==e.id){const t=-1;return aN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("average"==e.id){const t=-1;return aN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("congestion_rate"==e.id){const t=-1;return aN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("last_value"==e.id){const t=-1;return aN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}}return aN.sortByName(t.device,a.device,e?e.sort:null)}const f=()=>ntopng_url_manager.get_url_object();function v(e,t){return t?`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${e.device_ip}&snmp_port_idx=${e.interface_id}&page=config`:`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${e.device_ip}&page=config`}function h(e){const t=e.row,a=ntopng_url_manager.get_url_entry("epoch_begin"),l=ntopng_url_manager.get_url_entry("epoch_end");window.open(`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${t.ip}&snmp_port_idx=${t.ifid}&page=historical&ifid=-1&epoch_end=${l}&epoch_begin=${a}&timeseries_groups_mode=1_chart_x_metric&timeseries_groups=snmp_interface;-1%2B${t.ip}%2B${t.ifid};snmp_if:usage;uplink=true:false:false:false|downlink=true:false:false:false`)}function g(e){const t=e.row;window.open(v(t,!0))}function b(e){let t={click_button_timeseries:h,click_button_configuration:g};null!=t[e.event_id]&&t[e.event_id](e)}return _n((async()=>{s.value=await async function(){let e=f(),t=ntopng_url_manager.obj_to_url_params(e);const a=`${http_prefix}/lua/pro/rest/v2/get/snmp/metric/interfaces_filters.lua?${t}`;return(await ntopng_utility.http_request(a)).map((e=>({id:e.name,label:e.label,title:e.tooltip,options:e.value,hidden:1==e.value.length})))}()})),(e,t)=>(Is(),Ms(Ss,null,[Vs("div",sU,[Hs(rm,{ref_key:"table_snmp_interfaces",ref:l,table_id:ya(a),csrf:ya(n),f_map_columns:u,get_extra_params_obj:f,f_sort_rows:p,onCustom_event:b},{custom_header:vl((()=>[(Is(!0),Ms(Ss,null,An(s.value,((e,t)=>(Is(),Fs(Rd,{f_on_open:_(e,t),ref_for:!0,ref:e=>{i.value[t]=e},hidden:e.hidden},{title:vl((()=>[Hs(cm,{show:e.show_spinner,size:"1rem",class:"me-1"},null,8,["show"]),Vs("a",{class:"ntopng-truncate",title:e.title},te(e.label),9,iU)])),menu:vl((()=>[(Is(!0),Ms(Ss,null,An(e.options,(e=>(Is(),Ms("a",{style:{cursor:"pointer",display:"block"},onClick:t=>d(e,t),class:"ntopng-truncate tag-filter",title:e.value},[null==e.count?(Is(),Ms(Ss,{key:0},[Ks(te(e.label),1)],64)):(Is(),Ms(Ss,{key:1},[Ks(te(e.label+" ("+e.count+")"),1)],64))],8,oU)))),256))])),_:2},1032,["f_on_open","hidden"])))),256))])),_:1},8,["table_id","csrf"])]),Vs("div",rU,[Hs(fm,{note_list:o})])],64))},__file:"http_src/vue/page-snmp-interfaces.vue"};const uU={class:"row"},dU={class:"col-md-12 col-lg-12"},_U={class:"card card-shadow"},pU={class:"card-body"},fU={class:"card-footer"};var mU={__name:"page-topology",props:{context:Object},setup(e){const t=e=>i18n(e),l=[t("snmp.snmp_note_periodic_interfaces_polling"),t("snmp.snmp_note_thpt_calc"),t("snmp.snmp_lldp_cdp_descr")],n=ma("topology"),s=ma(),i=ma(0),o=e,r=ma({csrf:o.context.csrf,ifid:o.context.ifid}),c=()=>x.get_url_object();function u(e,t){let a=t[e.data.data_field];return"port_id"==e.data.data_field?Number(a.split(">")[1].split("<")[0]):a}function d(e,t,a){if(null!=e){let l=u(e,t),n=u(e,a);return"port_id"==e.id||"port_thpt_value"==e.id?aN.sortByNumber(l,n,e.sort):aN.sortByName(l,n,e.sort)}}function _(){i.value=s.value.get_rows_num()}const p=e=>{let t={uplink_speed:(e,t)=>a.bitsToSize(e),downlink_speed:(e,t)=>a.bitsToSize(e),port_thpt_value:(e,t)=>(null==e&&(e=0),a.bitsToSize(e))};return e.forEach((e=>{e.render_func=t[e.data_field]})),e};return(e,t)=>(Is(),Ms("div",uU,[Vs("div",dU,[Vs("div",_U,[Vs("div",pU,[Hs(rm,{ref_key:"table_topology",ref:s,table_id:n.value,csrf:r.value.csrf,f_map_columns:p,get_extra_params_obj:c,f_sort_rows:d,onRows_loaded:_},null,8,["table_id","csrf"])]),Vs("div",fU,[Hs(fm,{note_list:l})])])])]))},__file:"http_src/vue/page-topology.vue"};const vU={style:{"min-height":"8.5rem"}},hU={class:"form-group ms-2 me-2 mt-3 row"},gU={class:"col-form-label col-sm-4"},bU={class:"col-sm-6"},yU=["pattern"],wU=["disabled"];var xU={__name:"modal-file-save",props:{csrf:String,title:String,get_suggested_file_name:Function,store_file:Function,allow_spaces:Boolean},emits:["file_stored"],setup(e,{expose:t,emit:a}){const l=ma(null),n=ma("");ma("date");const s=e,i=a;let o=NtopUtils.REGEXES.singleword;const r=wi((()=>!new RegExp(o).test(n.value)));const c=async()=>{s.store_file(n.value),i("file_stored",n.value),u()},u=()=>{l.value.close()};t({show:()=>{!async function(){n.value=s.get_suggested_file_name()}(),l.value.show()},close:u}),_n((()=>{o=s.allow_spaces?NtopUtils.REGEXES.multiword:NtopUtils.REGEXES.singleword}));const d=e=>i18n(e);return(t,a)=>(Is(),Fs(np,{onShowed:a[1]||(a[1]=e=>{}),ref_key:"modal_id",ref:l},{title:vl((()=>[Ks(te(e.title),1)])),body:vl((()=>[Vs("div",vU,[Vs("div",hU,[Vs("label",gU,[Vs("b",null,te(d("name"))+":",1)]),Vs("div",bU,[wn(Vs("input",{pattern:ya(o),placeholder:"",required:"",type:"text",class:"form-control","onUpdate:modelValue":a[0]||(a[0]=e=>n.value=e)},null,8,yU),[[jo,n.value]])])])])])),footer:vl((()=>[Vs("button",{type:"button",onClick:c,disabled:r.value,class:"btn btn-primary"},te(d("save")),9,wU)])),_:1},512))}};lp("\ninput[data-v-87fda19e]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-87fda19e] {\n  cursor: not-allowed;\n}\n"),xU.__scopeId="data-v-87fda19e",xU.__file="http_src/vue/modal-file-save.vue";const kU={class:"form-group ms-2 me-2 mt-3 row"},$U={class:"col-form-label col-sm-4"},SU={class:"col-sm-8"},NU={value:"name"},CU={value:"date"},EU={class:"form-group ms-2 me-2 mt-3 row"},AU={class:"col-form-label col-sm-4"},TU={class:"col-sm-8"},IU=["disabled"],OU=["disabled"];var PU={__name:"modal-file-open",props:{csrf:String,title:String,file_title:String,list_files:Function,open_file:Function,delete_file:Function},emits:["file_deleted"],setup(e,{expose:t,emit:a}){const l=ma(null),n=ma({}),s=ma(""),i=ma([]),o=ma("date"),r=e,c=a;NtopUtils.REGEXES.singleword;const u=wi((()=>""==n.value));function d(){i.value=i.value.sort(((e,t)=>"name"==o.value?e.name.localeCompare(t.name):t.epoch-e.epoch)),i.value.length>0&&(n.value=i.value[0])}const _=()=>{f(),r.open_file(n.value.name)},p=async e=>{let t=n.value.name;1==e&&(t="*"),r.delete_file(t)&&c("file_deleted",t),f()},f=()=>{l.value.close()};t({show:()=>{!async function(){s.value="",i.value=await r.list_files(),i.value.forEach((e=>e.label=function(e){let t=1e3*e.epoch,a=ntopng_utility.from_utc_to_server_date_format(t,"DD/MM/YYYY");return`${e.name} (${a})`}(e))),d(),i.value.length>0&&(n.value=i.value[0])}(),l.value.show()},close:f}),_n((()=>{}));const m=e=>i18n(e);return(t,a)=>(Is(),Fs(np,{onShowed:a[4]||(a[4]=e=>{}),ref_key:"modal_id",ref:l},{title:vl((()=>[Ks(te(e.title),1)])),body:vl((()=>[Vs("div",kU,[Vs("label",$U,[Vs("b",null,te(m("order_by")),1)]),Vs("div",SU,[wn(Vs("select",{class:"form-select",onChange:a[0]||(a[0]=e=>d()),"onUpdate:modelValue":a[1]||(a[1]=e=>o.value=e)},[Vs("option",NU,te(m("name")),1),Vs("option",CU,te(m("date")),1)],544),[[Ro,o.value]])])]),Vs("div",EU,[Vs("label",AU,[Vs("b",null,te(e.file_title),1)]),Vs("div",TU,[Hs(l_,{selected_option:n.value,"onUpdate:selected_option":a[2]||(a[2]=e=>n.value=e),options:i.value},null,8,["selected_option","options"])])])])),footer:vl((()=>[Vs("button",{onClick:a[3]||(a[3]=e=>p(!0)),type:"button",style:{"text-align":"left","margin-left":"0px"},class:"btn btn-danger start-0 position-absolute ms-3"},te(m("delete_all_entries")),1),Vs("button",{type:"button",onClick:p,disabled:u.value,class:"btn btn-danger"},te(m("delete")),9,IU),Vs("button",{type:"button",onClick:_,disabled:u.value,class:"btn btn-primary"},te(m("open")),9,OU)])),_:1},512))}};lp("\ninput[data-v-1976657e]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-1976657e] {\n  cursor: not-allowed;\n}\n"),PU.__scopeId="data-v-1976657e",PU.__file="http_src/vue/modal-file-open.vue";const UU=e=>(pl("data-v-9db8ba96"),e=e(),fl(),e),jU={class:"form-group ms-2 me-2 mt-3 row"},MU={class:"col-form-label col-sm-4"},FU={class:"col-sm-8"},LU=UU((()=>Vs("span",null," ",-1))),RU=["disabled"];var DU={__name:"modal-file-upload",props:{csrf:String,title:String,file_title:String,upload_file:Function},emits:["file_uploaded"],setup(e,{expose:t,emit:a}){const l=ma(null),n=ma(""),s=ma(""),i=ma(null),o=e,r=a;function c(){i.value.click()}function u(e){const t=e.target.files;s.value=t[0].name;const a=new FileReader;a.addEventListener("load",(()=>{n.value=a.result})),a.readAsText(t[0]),r("file_uploaded",s.value)}const d=()=>{_(),o.upload_file(n.value)},_=()=>{l.value.close()};t({show:()=>{!async function(){s.value="",n.value=""}(),l.value.show()},close:_}),_n((()=>{}));const p=e=>i18n(e);return(t,a)=>(Is(),Fs(np,{onShowed:a[0]||(a[0]=e=>{}),ref_key:"modal_id",ref:l},{title:vl((()=>[Ks(te(e.title),1)])),body:vl((()=>[Vs("div",jU,[Vs("label",MU,[Vs("b",null,te(e.file_title),1)]),Vs("div",FU,[Vs("button",{type:"button",onClick:c,class:"btn btn-primary"},te(p("upload")),1),LU,wn(Vs("small",null,"No file selected",512),[[Yo,!n.value]]),wn(Vs("small",null,te(s.value),513),[[Yo,s.value]]),Vs("input",{ref_key:"file_input",ref:i,type:"file",accept:"application/JSON",onChange:u,style:{display:"none"}},null,544)])])])),footer:vl((()=>[Vs("button",{type:"button",onClick:d,disabled:!n.value,class:"btn btn-primary"},te(p("open")),9,RU)])),_:1},512))}};lp("\ninput[data-v-9db8ba96]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-9db8ba96] {\n  cursor: not-allowed;\n}\n"),DU.__scopeId="data-v-9db8ba96",DU.__file="http_src/vue/modal-file-upload.vue";const zU={class:"form-group ms-2 me-2 mt-3 row",style:{"overflow-y":"scroll",height:"45vh"}},qU=["onClick"],BU={class:"card-body"},VU={class:"form-group wizard-form-group"},HU={class:"form-text text-muted"};var GU={__name:"modal-select-component",props:{csrf:String,title:String,list_components:Function,add_component:Function},emits:[],setup(e,{expose:t,emit:a}){const l=ma(null),n=ma({}),s=ma([]);ma("date");const i=e;function o(e){switch(e){case"pie":return"fa-solid fa-chart-pie";case"table":return"fa-solid fa-table";case"timeseries":return"fa-solid fa-chart-line";default:return""}}const r=()=>{l.value.close()};t({show:()=>{!async function(){s.value=await i.list_components(),s.value.length>0&&(n.value=s.value[0])}(),l.value.show()},close:r}),_n((()=>{}));const c=e=>i18n(e);return(t,a)=>(Is(),Fs(np,{onShowed:a[0]||(a[0]=e=>{}),ref_key:"modal_id",ref:l},{title:vl((()=>[Ks(te(e.title),1)])),body:vl((()=>[Vs("div",zU,[(Is(!0),Ms(Ss,null,An(s.value,(e=>(Is(),Ms("div",{class:K(["card w-100 wizard-card",{"wizard-selected":n.value==e}])},[Vs("a",{class:"wizard-link",href:"#",onClick:t=>{n.value=e,r(),i.add_component(n.value)}},[Vs("div",BU,[Vs("div",VU,[Vs("h5",null,[Vs("i",{class:K(o(e.component))},null,2),Ks(" "+te(c(e.i18n_name)),1)]),Vs("small",HU,te(c(e.i18n_descr)),1)])])],8,qU)],2)))),256))])])),footer:vl((()=>[])),_:1},512))}};lp("\ninput[data-v-16713f39]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-16713f39] {\n  cursor: not-allowed;\n}\n"),GU.__scopeId="data-v-16713f39",GU.__file="http_src/vue/modal-select-component.vue";const WU={class:"form-group ms-2 me-2 mt-3 row"},KU={class:"col-sm-2 mt-2"},JU={class:"col-sm-10"},YU={class:"form-group ms-2 me-2 mt-4 row"},ZU={class:"col-sm-2 mt-3"},XU={class:"col-sm-6 mt-2"},QU={class:"range"},ej={class:"sliderticks"},tj={class:"form-group ms-2 me-2 mt-3 row"},aj={class:"col-sm-2 mt-2"},lj={class:"col-sm-9 mt-2"},nj={class:"range"},sj={class:"sliderticks"},ij={key:0,class:"form-group ms-2 me-2 mt-3 row"},oj={class:"col-sm-2 mt-2"},rj={class:"col-sm-5"},cj={class:"form-group ms-2 me-2 mt-3 row"},uj={class:"col-sm-2 mt-2"},dj={class:"col-sm-5"},_j={class:"ms-2 mb-3 mt-4 row"},pj={class:"col-form-label col-sm-3 pe-0",id:"advanced-view"},fj={class:"col-sm-2 ps-0"},mj={class:"form-check form-switch mt-2",id:"advanced-view"},vj={key:1,class:"form-group ms-2 me-2 mt-3 row"},hj={class:"col-sm-12"},gj={key:0,style:{color:"rgba(255, 0, 0, 0.797)"}},bj=["disabled"];var yj={__name:"modal-edit-component",props:{csrf:String},emits:["edit"],setup(e,{expose:t,emit:a}){const l=e=>i18n(e),n=a,s=ma(i18n("dashboard.edit_component")),i=ma(null),o=[{id:1,size_component_value:4},{id:2,size_component_value:6},{id:3,size_component_value:12},{id:4,size_component_value:-1}],r=ma([{value:"current",label:l("dashboard.current_time"),default:!0},{value:"5_min",label:l("dashboard.time_window_list.5_min")},{value:"30_min",label:l("dashboard.time_window_list.30_min")},{value:"hour",label:l("dashboard.time_window_list.hour")},{value:"2_hours",label:l("dashboard.time_window_list.2_hours")},{value:"12_hours",label:l("dashboard.time_window_list.12_hours")},{value:"day",label:l("dashboard.time_window_list.day")},{value:"week",label:l("dashboard.time_window_list.week")},{value:"month",label:l("dashboard.time_window_list.month")},{value:"year",label:l("dashboard.time_window_list.year")}]),c=ma([{value:"current",label:l("dashboard.current_time"),default:!0},{value:"hour",label:l("dashboard.time_offset_list.hour")},{value:"day",label:l("dashboard.time_offset_list.day")},{value:"week",label:l("dashboard.time_offset_list.week")},{value:"month",label:l("dashboard.time_offset_list.month")},{value:"year",label:l("dashboard.time_offset_list.year")}]),u=ma(null),d=ma(null),_=ma(null),p=ma(null),f=ma(null),m=ma(null),v=ma(null),h=ma(!1),g=ma(!1),b=ma(!1),y=function(){h.value=!h.value},w=function(){g.value=!1;try{f.value=JSON.stringify(JSON.parse(f.value),null,2)}catch(e){g.value=!0}return f.value},x=function(e,t){return ZS.isEmptyOrNull(e)?t.find((e=>e.default)):t.find((t=>t.value==e))},k=function(e){u.value=null,g.value=!1,b.value=e,d.value="",p.value=1,_.value=1},$=e=>{u.value=e,d.value=e.custom_name,_.value=N(e.width),p.value=N(e.height),m.value=x(e.time_window,r.value),v.value=x(e.time_offset,c.value),f.value=JSON.stringify(e.params,null,2)},S=e=>o.find((t=>t.id==Number(e))).size_component_value,N=e=>o.find((t=>t.size_component_value==Number(e))).id,C=()=>{const e=S(_.value),t=S(p.value),a=`${f.value}`;n("edit",{id:u.value.id,title:d.value,height:t,width:e,time_offset:v.value.value,time_window:m.value.value,rest_params:a}),i.value.close()};return t({show:(e,t)=>{k(t),$(e),i.value.show()}}),(e,t)=>(Is(),Fs(np,{ref_key:"modal_id",ref:i},{title:vl((()=>[Ks(te(s.value),1)])),body:vl((()=>[Ys(" Title "),Vs("div",WU,[Vs("label",KU,[Vs("b",null,te(l("dashboard.component_title")),1)]),Vs("div",JU,[wn(Vs("input",{"onUpdate:modelValue":t[0]||(t[0]=e=>d.value=e),class:"form-control",type:"text",required:""},null,512),[[jo,d.value]])])]),Ys(" Width "),Vs("div",YU,[Vs("label",ZU,[Vs("b",null,te(l("dashboard.component_width")),1)]),Vs("div",XU,[Vs("div",QU,[wn(Vs("input",{type:"range",id:"slider","onUpdate:modelValue":t[1]||(t[1]=e=>_.value=e),style:{width:"100%"},min:"1",max:"3",step:"1"},null,512),[[jo,_.value]]),Vs("div",ej,[Vs("p",null,te(l("dashboard.component_sizes.small")),1),Vs("p",null,te(l("dashboard.component_sizes.medium")),1),Vs("p",null,te(l("dashboard.component_sizes.large")),1)])])])]),Ys(" Height "),Vs("div",tj,[Vs("label",aj,[Vs("b",null,te(l("dashboard.component_height")),1)]),Vs("div",lj,[Vs("div",nj,[wn(Vs("input",{type:"range",id:"slider","onUpdate:modelValue":t[2]||(t[2]=e=>p.value=e),style:{width:"100%"},min:"1",max:"4",step:"1"},null,512),[[jo,p.value]]),Vs("div",sj,[Vs("p",null,te(l("dashboard.component_sizes.small")),1),Vs("p",null,te(l("dashboard.component_sizes.medium")),1),Vs("p",null,te(l("dashboard.component_sizes.large")),1),Vs("p",null,te(l("dashboard.component_sizes.auto")),1)])])])]),Ys(" Time Window "),b.value?Ys("v-if",!0):(Is(),Ms("div",ij,[Vs("label",oj,[Vs("b",null,te(l("dashboard.time_window")),1)]),Vs("div",rj,[Hs(l_,{selected_option:m.value,"onUpdate:selected_option":t[3]||(t[3]=e=>m.value=e),options:r.value},null,8,["selected_option","options"])])])),Ys(" Time Offset "),Vs("div",cj,[Vs("label",uj,[Vs("b",null,te(l("dashboard.time_offset")),1)]),Vs("div",dj,[Hs(l_,{selected_option:v.value,"onUpdate:selected_option":t[4]||(t[4]=e=>v.value=e),options:c.value},null,8,["selected_option","options"])])]),Ys(" Advanced Settings "),Vs("div",_j,[Vs("label",pj,[Vs("b",null,te(l("dashboard.advanced_settings")),1)]),Vs("div",fj,[Vs("div",mj,[Vs("input",{name:"show_advanced_settings",class:"form-check-input",type:"checkbox",onInput:y,role:"switch"},null,32)])])]),Ys(" REST Params "),h.value?(Is(),Ms("div",vj,[Vs("div",hj,[g.value?(Is(),Ms("p",gj,te(l("dashboard.component_json_error")),1)):Ys("v-if",!0),wn(Vs("textarea",{class:"highlighted-json","onUpdate:modelValue":t[5]||(t[5]=e=>f.value=e),onFocusout:w,style:{width:"100%",height:"100%"},rows:"16",cols:"10"},null,544),[[jo,f.value]])])])):Ys("v-if",!0)])),footer:vl((()=>[Vs("div",null,[Vs("button",{type:"button",onClick:C,disabled:g.value,class:"btn btn-primary"},te(l("apply")),9,bj)])])),_:1},512))},__file:"http_src/vue/modal-edit-component.vue"};const wj={class:"mb-1 me-3",style:{position:"absolute",bottom:"0px",right:"0px"}};var xj={__name:"dashboard-box",props:{color:String,width:Number,height:Number},setup(e){const t=e,a=wi((()=>`col-${t.width||4}`)),l=wi((()=>{let e="";return t.color&&(e=`bg-${t.color}`),`row-${t.height||4} ${e}`}));return(e,t)=>(Is(),Ms("div",{class:K([a.value,"widget-box-main-dashboard"])},[Vs("div",{class:K([l.value,"widget-box"]),style:{position:"relative"}},[Ys(" title "),In(e.$slots,"box_title"),Ys(" content "),In(e.$slots,"box_content"),Ys(" footer "),Vs("div",wj,[In(e.$slots,"box_footer")])],2)],2))},__file:"http_src/vue/dashboard-box.vue"},kj={__name:"dashboard-empty",props:{id:String,i18n_title:String,ifid:String,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function,filters:Object},setup(e){const t=e;async function a(){}return jl((()=>[t.epoch_begin,t.epoch_end,t.filters]),((e,t)=>{a()}),{flush:"pre",deep:!0}),dn((()=>{a()})),_n((()=>{})),(e,t)=>(Is(),Ms("div"))},__file:"http_src/vue/dashboard-empty.vue"};const $j={class:"table-responsive",style:{"margin-left":"-1rem","margin-right":"-1rem"}};var Sj={__name:"dashboard-table",props:{id:String,i18n_title:String,ifid:String,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function,filters:Object},setup(e){const t=ma("simple_table"),l=ma([]),n=e,s=wi((()=>{let e=n.params.columns.map((e=>(!e.style&&e.data_type&&("bytes"==e.data_type||"date"==e.data_type?e.style="text-align: right":"count_score"==e.data_type&&(e.style="text-align: center")),{...e})));return e[0].class=(e[0].class?e[0].class+" ":"")+"first-col-width",e}));jl((()=>[n.epoch_begin,n.epoch_end,n.filters]),((e,t)=>{c()}),{flush:"pre",deep:!0}),dn((()=>{c()})),_n((()=>{}));const i=function(e){return e.i18n_name?(e=>i18n(e))(e.i18n_name):""},o={throughput:function(e,t){return"name"==e.id?t.url?`<a href='${t.url}'>${t.name}</a>`:t.name:"throughput"==e.id?t.throughput_type&&"pps"==t.throughput_type?a.fpackets(t[e.id]):t.throughput_type&&"bps"==t.throughput_type?a.bitsToSize(t[e.id]):t.throughput:""},db_search:function(e,t){if("host"==e.data_type)return a.formatHost(t[e.id],t,"cli_ip"==e.id);if("network"==e.data_type)return a.formatNetwork(t[e.id],t);if("asn"==e.data_type)return a.formatASN(t[e.id],t);if("country"==e.data_type)return a.formatCountry(t[e.id],t);if(m.types[e.data_type]){return m.getFormatter(e.data_type)(t[e.id])}return"object"==typeof t[e.id]?a.formatGenericObj(t[e.id],t):t[e.id]},vs_scan_result:function(e,t){return"host"==e.id?DO(t[e.id],t,n.ifid):"last_scan"==e.id?TO(t[e.id],t):"duration"==e.id?IO(t[e.id],t):"scan_frequency"==e.id?OO(t[e.id]):"is_ok_last_scan"==e.id?PO(t[e.id]):"tcp_ports"==e.id?FO(t[e.id],t):"udp_ports"==e.id?MO(t[e.id],t):"scan_type"==e.id?AO(t[e.id],!0,t):"hosts"==e.id?((e,t)=>{const a=e.split(", ");let l="",n=new Map;return a.forEach((e=>{let t=e.split("|");n.set(t.length>5&&null!=t[5]&&""!=t[5]?t[5]:t[0],{scan_type:t[1],ip:t[0],date:t[2].replace(" ","_"),is_ipv4:"true"==t[3],epoch:t[4]})})),n=new Map([...n.entries()].sort()),n.forEach(((e,t)=>{let a=RO(e.ip,e.scan_type,e.date,e.epoch);e.is_ipv4?l+=`<li> <a href="${a}">${t}</a></li>`:l+=`<li> <a href="${a}">${t} <span class="badge bg-secondary">${i18n("ipv6")}</span></a></li>`})),l})(t[e.id]):"cve"==e.id||"cve_list"==e.id?((e,t)=>{let a="",l=0;if(1==t.is_ok_last_scan&&null!=t.last_scan&&null!=t.last_scan.time&&null!=e){let n=new Map;e.forEach((e=>{let t=e.split("|"),a=0;t.length>1&&(a=Number(t[1])),n.set(t[0],a)})),n=new Map([...n.entries()].sort(((e,t)=>t[1]-e[1]))),n.forEach(((e,n)=>{if(!(l<100))return a;{let s="";s=0==e?"bg-success":e<3.9?"bg-secondary":e<7?"bg-warning":"bg-danger";const i=ntopng_utility.get_cve_details_url(n,t.scan_type);a+=`<li  title='${i18n("hosts_stats.page_scan_hosts.report.cves_title")}'>\n                        <a href="${i}"><span class="badge ${s}">${n} </span></a> \n                        (${e})\n                    </li>`,l++}}))}return a})(t[e.id],t):"port"==e.id?((e,t)=>{let a=e;return null!=t.port_label&&t.port_label!=e&&(a+=` (${t.port_label})`),a})(t[e.id],t):"max_score_cve"==e.id?EO(t[e.id],t):"num_vulnerabilities_found"==e.id?CO(t[e.id],t):"tcp_udp_ports_list"==e.id?((e,t,a)=>{let l=new Map;if(1==a.is_ok_last_scan&&null!=a.last_scan&&null!=a.last_scan.time&&null!=e){const t=e.split(",");let n="",s="";t.forEach((e=>{if(null!=e&&""!=e){if(n=e,s=e,a.host_in_mem){const t=LO(e,0,a.tcp_ports_unused,a.tcp_ports_filtered);null!=t&&(n+=t)}n=`<li>${n}</li>`,l.set(e,{port_label:n,port_id:Number(s.split("/")[0])})}})),null!=a.tcp_ports_filtered&&a.tcp_ports_filtered.forEach((e=>{n=e+="/tcp",s=e,a.host_in_mem&&(n+=` <span class="badge bg-primary" title='${i18n("hosts_stats.page_scan_hosts.filtered_port")}'><i class="fa-solid fa-filter"></i></span>`),n=`<li>${n}</li>`,l.set(e,{port_label:n,port_id:Number(s.split("/")[0])})}))}if(1==a.is_ok_last_scan&&null!=a.last_scan&&null!=a.last_scan.time&&null!=t){const e=t.split(",");let n="",s="";e.forEach((e=>{if(null!=e&&""!=e){if(n=e,s=e,a.host_in_mem){const t=LO(e,0,a.udp_ports_unused,a.udp_ports_filtered);null!=t&&(n+=t)}n=`<li>${n}</li>`,l.set(e,{port_label:n,port_id:Number(s.split("/")[0])})}})),null!=a.udp_filtered_ports&&a.udp_ports_filtered.forEach((e=>{n=e+="/udp",s=e,a.host_in_mem&&(n+=` <span class="badge bg-primary" title='${i18n("hosts_stats.page_scan_hosts.filtered_port")}'><i class="fa-solid fa-filter"></i></span>`),n=`<li>${e}</li>`,l.set(e,{port_label:n,port_id:Number(s.split("/")[0])})}))}let n="";return l=new Map([...l.entries()].sort(((e,t)=>e[1].port_id-t[1].port_id))),l.forEach(((e,t)=>{n+=`${e.port_label}`})),n})(t.tcp_ports_list,t.udp_ports_list,t):"discovered_hosts"==e.id?(e=>{const t=e.split(",");let a="";return t.forEach((e=>{""!=e&&(a+=`<li>${e}</li>`)})),a})(t[e.id]):t[e.id]}},r=function(e,t){if(n.params&&n.params.table_type&&o[n.params.table_type]){return(0,o[n.params.table_type])(e,t)}return t[e.id]?t[e.id]:""};async function c(){const e={ifid:n.ifid,epoch_begin:n.epoch_begin,epoch_end:n.epoch_end,...n.params.url_params,...n.filters},t=ntopng_url_manager.obj_to_url_params(e);let a=await n.get_component_data(`${http_prefix}${n.params.url}`,t),s=[];if(s="db_search"==n.params.table_type?a.records:a,"vs_scan_result"!=n.params.table_type){const e=n.max_height?n.max_height/4*6:6;s=s.slice(0,e)}l.value=s}return(e,a)=>(Is(),Ms("div",$j,[Hs(Ow,{id:t.value,columns:s.value,rows:l.value,print_html_column:i,print_html_row:r,wrap_columns:!0},null,8,["id","columns","rows"])]))}};lp("\n.first-col-width {\n    /* max-width: 100% !important; */\n}\n@media print and (max-width: 210mm) {\ntd.first-col-width {\n\tmax-width: 55mm !important;\n}\n}\n@media print and (min-width: 211mm) {\ntd.first-col-width {\n\tmax-width: 95mm !important;\n}\n}\n\n/* @media print and (max-width: 148mm){ */\n/* } */\n\n"),Sj.__file="http_src/vue/dashboard-table.vue";const Nj={class:"d-flex align-items-center justify-content-between"},Cj=["href"],Ej={class:"fw-normal text-white"},Aj={class:"subtitle text-white text-sm text mb-0 h5"},Tj={class:"flex-shrink-0 ms-3"};var Ij={__name:"dashboard-badge",props:{id:String,i18n_title:String,ifid:String,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function,set_component_attr:Function,filters:Object},setup(e){const t=ma(""),a=ma(""),l=ma(""),n=ma("#"),s=e;async function i(){if(s.params.url){const e={ifid:s.ifid,epoch_begin:s.epoch_begin,epoch_end:s.epoch_end,...s.params.url_params,...s.filters},a=ntopng_url_manager.obj_to_url_params(e);let l=await s.get_component_data(`${http_prefix}${s.params.url}`,a),i=l[s.params.counter_path],o=l[s.params.counter_formatter];o||(o="number");let r=m.getFormatter(o);if(t.value=r(i),i&&s.set_component_attr("active",!0),s.params.link){const e={ifid:s.ifid,epoch_begin:s.epoch_begin,epoch_end:s.epoch_end,...s.params.link.url_params},t=ntopng_url_manager.obj_to_url_params(e);n.value=`${http_prefix}${s.params.link.url}?${t}`}}}return jl((()=>[s.epoch_begin,s.epoch_end,s.filters]),((e,t)=>{i()}),{flush:"pre",deep:!0}),dn((()=>{!function(){s.params.i18n_name&&(a.value=(e=>i18n(e))(s.params.i18n_name));s.params.icon&&(l.value=s.params.icon+" fa-2xl");i()}()})),_n((()=>{})),(e,s)=>(Is(),Ms("div",Nj,[Vs("div",null,[Vs("a",{href:n.value},[Vs("h4",Ej,te(t.value),1),Vs("p",Aj,te(a.value),1)],8,Cj)]),Vs("div",Tj,[Vs("i",{class:K(["text-white",l.value])},null,2)])]))},__file:"http_src/vue/dashboard-badge.vue"},Oj={__name:"dashboard-pie",props:{id:String,i18n_title:String,ifid:String,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function,filters:Object},setup(e){const t=ma(ntopChartApex.typeChart.DONUT),a=ma(null),l=e,n=wi((()=>`${http_prefix}${l.params.url}`));function s(){const e=n.value,t=(()=>{const e={ifid:l.ifid,epoch_begin:l.epoch_begin,epoch_end:l.epoch_end,new_charts:!0,...l.params.url_params,...l.filters};let t=ntopng_url_manager.obj_to_url_params(e);return t=t.replaceAll("%24IFID%24",l.ifid),t})();return l.get_component_data(e,t)}return jl((()=>[l.epoch_begin,l.epoch_end,l.filters]),((e,t)=>{!async function(){a.value.update_chart()}()}),{flush:"pre",deep:!0}),dn((()=>{})),_n((()=>{})),(l,i)=>(Is(),Ms("div",null,[Hs(C_,{ref_key:"chart",ref:a,id:e.id,chart_type:t.value,base_url_request:n.value,get_custom_chart_options:s,register_on_status_change:!1},null,8,["id","chart_type","base_url_request"])]))},__file:"http_src/vue/dashboard-pie.vue"};var Pj={__name:"dashboard-timeseries",props:{id:String,i18n_title:String,ifid:String,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function,csrf:String,filters:Object},setup(e){const t=ma(ntopChartApex.typeChart.TS_LINE),a=ma(null),l=ma([]),n=Py.getGroupOptionMode("1_chart_x_yaxis"),s=ma(null),i=ma([]),o=e,r=wi((()=>`${http_prefix}${o.params.url}`));function c(e,t){let a={};for(const l in e)e[l].contains("$IFID$")?a[l]=e[l].replace("$IFID$",t):a[l]=e[l];return a}async function u(e){if(i.value.length>0)return;(await ntopng_utility.http_request(`${http_prefix}/lua/rest/v2/get/ntopng/interfaces.lua`)||[]).forEach((t=>{let a=c(e,t.ifid);a.source_def=[t.ifid],i.value.push(a)}))}async function d(e){if(i.value.length>0)return;const t=await ntopng_utility.http_request(`${http_prefix}/lua/pro/rest/v2/get/flowdevices/stats.lua?ifid=${o.ifid}&gui=true`)||[];t&&t.forEach((t=>{if(t){let a=function(e,t){let a={};for(const l in e)e[l].contains("$EXPORTER$")?a[l]=e[l].replace("$EXPORTER$",t):a[l]=e[l];return a}(e,t.probe_ip);a=c(a,t.ifid),a.source_def=[t.ifid,t.probe_ip],i.value.push(a)}}))}async function _(e){if(i.value.length>0)return;const t=await ntopng_utility.http_request(`${http_prefix}/lua/rest/v2/get/network/networks.lua?ifid=${o.ifid}`)||[];t&&t.forEach((t=>{if(t){let a=function(e,t){let a={};for(const l in e)e[l].contains("$NETWORK$")?a[l]=e[l].replace("$NETWORK$",t):a[l]=e[l];return a}(e,t.id);a=c(a,o.ifid),a.source_def=[o.ifid,t.id],i.value.push(a)}}))}async function p(e,t){const a={epoch_begin:o.epoch_begin,epoch_end:o.epoch_end},l=Jb.get_source_type_from_id(o.params?.source_type),n=await Jb.get_source_array_from_value_array(http_prefix,l,t),s=await Jb.get_metric_from_schema(http_prefix,l,n,e,null,a);return Jb.get_ts_group(l,n,s,{past:!1})}async function f(){await async function(){i.value=[];const e=o.params.post_params?.ts_requests;for(const t in e||{})switch(t){case"$ANY_IFID$":await u(e[t]);break;case"$ANY_EXPORTER$":await d(e[t]);break;case"$ANY_NETWORK$":await _(e[t]);break;default:let a=c(e[t],o.ifid);a.source_def=[o.ifid],i.value.push(a)}}(),await async function(){if(0==l.value.length)for(const e of i.value){const t=e?.ts_schema,a=e.source_def;delete e.source_def;const n=await p(t,a);l.value.push(n)}}(),function(){for(const e of i.value)e.source_def&&delete e.source_def}();const e=r.value,t={csrf:o.csrf,ifid:o.ifid,epoch_begin:o.epoch_begin,epoch_end:o.epoch_end,...o.params.post_params,ts_requests:i.value};let a=await o.get_component_data(e,"",t);return a=Py.tsArrayToOptionsArray(a,l.value,n,""),a[0]&&(a[0].height=s.value),a?.[0]}return jl((()=>[o.epoch_begin,o.epoch_end,o.filters]),((e,t)=>{!async function(){if(a.value){const e=await f();a.value.update_chart_series(e.data)}}()}),{flush:"pre",deep:!0}),dn((async()=>{await async function(){s.value=62.5*(o.max_height||4)}()})),_n((async()=>{})),(l,n)=>(Is(),Ms("div",null,[Hs(Ag,{ref_key:"chart",ref:a,id:e.id,chart_type:t.value,base_url_request:r.value,get_custom_chart_options:f,register_on_status_change:!1,disable_pointer_events:!1},null,8,["id","chart_type","base_url_request"])]))},__file:"http_src/vue/dashboard-timeseries.vue"};var Uj={__name:"dashboard-sankey",props:{id:String,i18n_title:String,ifid:String,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function,filters:Object},setup(e){const t=(e=>i18n(e))("ports_analysis.no_data"),a=ma(null),l=ma({}),n=ma(null),s=ma(null),i=ma(null),o=e;jl((()=>[o.epoch_begin,o.epoch_end,o.filters]),((e,t)=>{r()}),{flush:"pre",deep:!0}),dn((()=>{})),_n((()=>{i.value=62.5*o.max_height,s.value=$(n.value).width(),r()}));const r=function(){!async function(){let e=await async function(){const e=`${http_prefix}${o.params.url}`,t={ifid:o.ifid,epoch_begin:o.epoch_begin,epoch_end:o.epoch_end,sankey_version:3,...o.params.url_params,...o.filters};let l=ntopng_url_manager.obj_to_url_params(t),n=await o.get_component_data(e,l);n=function(e){let t=e=>console.error(`link (source: ${e.source_node_id}, target: ${e.target_node_id}) removed for not existing source/target node`),a=function(e,t){let a={};e.nodes.forEach((e=>a[e.node_id]=!0));let l=e=>null!=a[e.source_node_id]&&null!=a[e.target_node_id],n=function(e,t,a){return e.filter((e=>{const l=t(e);return 0==l&&null!=a&&a(e),l}))}(e.links,l,t);return n}(e,t);return{nodes:e.nodes,links:a}}(n);const s=function(e){let t={},a={};e.nodes.forEach((e=>t[e.node_id]=e));let l=e=>`${e.source_node_id}_${e.label}`;e.links.forEach((e=>{let n=l(e),s=a[n];null==s&&(s={id:n,label:e.label,link:e.optional_info.link,node_links:[]},a[n]=s),s.node_links.push({source:t[e.source_node_id],target:t[e.target_node_id],value:e.value})}));let n=e.nodes.map((e=>e)),s=[];for(let e in a){let t=a[e],l={node_id:t.id,label:t.label,link:t.link};n.push(l),t.node_links.forEach((e=>{s.push({source_node_id:e.source.node_id,target_node_id:l.node_id,label:`${e.source.label} - ${e.target.label}: ${l.label}`,value:e.value}),s.push({source_node_id:l.node_id,target_node_id:e.target.node_id,label:`${e.source.label} - ${e.target.label}: ${l.label}`,value:e.value})}))}let i=n.map(((e,t)=>({index:t,label:e.label,data:e}))),o={};i.forEach(((e,t)=>o[e.data.node_id]=e));let r=s.map((e=>({source:o[e.source_node_id].index,target:o[e.target_node_id].index,value:e.value,label:e.label})));return{nodes:i,links:r}}(n);return s.links.length>0&&s.nodes.length>0?a.value.set_no_data_flag(!1):a.value.set_no_data_flag(!0),s}();l.value=e}()};function c(e){1!=e.is_link_node&&e.link&&ntopng_url_manager.go_to_url(e.link)}return(e,o)=>(Is(),Ms("div",{ref_key:"body_div",ref:n},[Hs(LS,{ref_key:"sankey_chart",ref:a,width:s.value,height:i.value,no_data_message:ya(t),sankey_data:l.value,onNode_click:c},null,8,["width","height","no_data_message","sankey_data"])],512))},__file:"http_src/vue/dashboard-sankey.vue"};const jj=e=>(pl("data-v-c360f212"),e=e(),fl(),e),Mj={class:"row"},Fj={class:"me-2"},Lj=["title"],Rj=[jj((()=>Vs("i",{class:"fa-solid fa-floppy-disk"},null,-1)))],Dj=["title"],zj=[jj((()=>Vs("i",{class:"fa-solid fa-folder-open"},null,-1)))],qj=["title"],Bj=[jj((()=>Vs("i",{class:"fa-solid fa-file-arrow-down"},null,-1)))],Vj=["title"],Hj=[jj((()=>Vs("i",{class:"fa-solid fa-file-arrow-up"},null,-1)))],Gj=["title"],Wj=[jj((()=>Vs("i",{class:"fas fa-print"},null,-1)))],Kj=["title"],Jj=[jj((()=>Vs("i",{class:"fas fa-folder-plus"},null,-1)))],Yj=["title"],Zj=[jj((()=>Vs("i",{class:"fas fa-pen-to-square"},null,-1)))],Xj={class:"me-2"},Qj={class:"ms-1 my-auto me-2 filters-label"},eM={key:0,class:"d-flex align-items-center ms-2"},tM={class:"me-2"},aM=jj((()=>Vs("div",null,[Vs("label",{class:"my-auto me-2"})],-1))),lM={key:1,class:"me-auto mt-2 flex-wrap d-flex"},nM=["title"],sM=[jj((()=>Vs("i",{class:"fas fa-square-plus"},null,-1)))],iM=["title"],oM=[jj((()=>Vs("i",{class:"fas fa-trash-can"},null,-1)))],rM={class:"text-warning",style:{"margin-top":"0.5rem","margin-left":"1rem"}},cM={key:2,class:"mt-3",style:{"margin-bottom":"-0.5rem",display:"inline"}},uM={style:{"text-align":"center"}},dM={key:0},_M=["title"],pM=[jj((()=>Vs("i",{class:"fa-solid fa-file-arrow-down"},null,-1)))],fM=["title"],mM=[jj((()=>Vs("i",{class:"fa-solid fa-file-arrow-up"},null,-1)))],vM=["title"],hM=[jj((()=>Vs("i",{class:"fas fa-print"},null,-1)))],gM={key:0,class:"col-sm mt-1"},bM={class:"alert alert-warning"},yM={key:1,class:"col-sm mt-1"},wM={class:"alert alert-secondary sm-1 text-center",style:{width:"40%",margin:"auto","margin-top":"5vh","margin-bottom":"5vh"}},xM={class:"alert-heading"},kM={class:"mb-0"},$M={key:0,class:"dashboard-component-title modal-header"},SM={class:"modal-title"},NM={style:{color:"gray"}},CM={key:0,class:"modal-close"},EM={class:"btn-group"},AM=["data-component-id"],TM=["data-component-id"],IM={key:0,style:{color:"lightgray","font-size":"12px"}};var OM={__name:"dashboard",props:{context:Object},setup(e){const t=e=>i18n(e),a=b.get_timeframes_dict(),l=e,n={badge:Ij,empty:kj,pie:Oj,timeseries:Pj,table:Sj,sankey:Uj},s=ma(!0),i=ma(!1),o=l.context.show_loading||!1,r=l.context.allow_edit||!1,c=ma(null),u=ma(null),d=ma(null),_=ma(null),p=ma(null),f=ma(null),m=ma(null),v=ma(null),h=ma([]),g=ma(!1),w=ma({}),k=ma({}),$=ma({}),S=ma([]),N=ma([]),E=ma([]),A=ma({}),T=ma("");let I={},O=!1,P=!1;const U=ma(!1);let j=null;const M=ma(null),F=wi((()=>"report"!=l.context.page&&"vs-report"!=l.context.page)),L=wi((()=>"report"==l.context.page&&!P)),R=wi((()=>"vs-report"==l.context.page)),D=wi((()=>!0)),z=wi((()=>1==A.value?.toolbox?.time?.hide)),q=wi((()=>1==A.value.is_open_report||z.value)),B=wi((()=>1==A.value.is_open_report||"vs-report"==l.context.page)),H=wi((()=>{let e="";return A.value.is_open_report?e=`Report: ${A.value.value}`:l.context.title&&(e=l.context.title),e})),G=wi((()=>e=>null==e.params.custom_style||P&&!e.params.custom_print_style?e.params.custom_print_style&&1==P?e.params.custom_print_style:"":e.params.custom_style)),W=wi((()=>e=>we(e.epoch_begin,e.epoch_end)));async function J(e){let t=null;P="true"==x.get_url_entry("printable"),"report"!=l.context.page&&"vs-report"!=l.context.page||("report"==l.context.page?t=b.check_and_set_default_time_interval(void 0,void 0,!0,"min"):"vs-report"==l.context.page&&(t=b.check_and_set_default_time_interval(void 0,void 0,!0)),v.value=t),await async function(e){const t=l.context.template_list_endpoint;let a=await b.http_request(t);if(null==a?.list)return;let n=a.list.map((e=>({value:e.name,label:e.label,disabled:!1,toolbox:e.toolbox,is_open_report:!1,allow_edit:e.allow_edit})));n.sort(((e,t)=>e.label.toUpperCase().localeCompare(t.label.toUpperCase()))),E.value=n;const s=e||x.get_url_entry("report_template")||l.context.template;l.context.template=s,A.value=E.value.find((e=>e.value==s)),null==A.value&&(A.value=E.value[0]);!A.value.allow_edit&&U.value&&Ie()}(e);let a=x.get_url_entry("report_name");null!=a&&""!=a?await fe(a):await ee(t,A.value.value),1==P&&xe(),g.value=!0}function Y(e,t){t&&(t+=";eq"),x.set_key_to_url(e,t),h.value.forEach(((a,l)=>{!function(e,t,a){e.filters[t]=a}(a,e,t)}))}function Z(e){e&&(v.value=e),h.value.forEach(((t,a)=>{ae(t,e)}))}function X(){for(const[e,t]of Object.entries(k.value))Y(e,t[0].value),w.value[e]=t[0],le(e)}async function Q(e,t){i.value=!0;const a=[];return!t&&`${l.context.report_filters_endpoint}`&&(t=await b.http_request(`${l.context.report_filters_endpoint}?hide_exporters_name=true`)),i.value=!1,e.forEach((async e=>{const l=e?.name||"",n=t.find((e=>e.id==l))?.options;if(n&&n.length>1){let s=i18n("db_search.all."+l);ZS.isEmptyOrNull(s)&&(s=i18n("all")+" "+i18n("db_search."+l)),n.unshift({value:null,label:s}),k.value[l]=n,w.value[l]=n[0],$.value[l]=n,a.push(l);const i=e?.nested||[];i.length>0&&(N.value[l]=await Q(i,t))}})),a}async function ee(e,t){O=!1;let a=`${l.context.template_endpoint}?template=${t}`,s=await b.http_request(a);h.value=s.list.filter((e=>null!=n[e.component])).map(((t,a)=>{let l={filters:{},component_id:`auto_${t.id}_${a}`,...t};return ae(l,e),l})),X(),s.filters&&(S.value=await Q(s.filters)),await Ja()}function ae(e,t){const l=a[e.time_window||"5_min"];if(null==t){const e=b.get_utc_seconds();t={epoch_begin:e-l,epoch_end:e}}const n=a[e.time_offset]||0;e.epoch_begin=t.epoch_begin-n,e.epoch_end=t.epoch_end-n}function le(e){const t=N.value[e];t?.forEach((e=>{if(S.value.includes(e)){S.value=S.value.filter((t=>t!=e));const t=k.value[e][0];w.value[e]=t,Y(e,t.value)}}))}function ne(e,t){const a=N.value[e];a?.forEach((a=>{const l=k.value[a],n=[];if(t==e){const e=k.value[a][0];w.value[a]=e,Y(a,e.value)}if(l?.forEach((t=>{t.show_only_value!==w.value[e].value&&null!=t.value||n.push(t)})),!S.value.includes(a)){const t=S.value.indexOf(e);S.value.splice(t+1,0,a)}n.length>0?$.value[a]=n:delete $.value[a]}))}function se(){if(!A.value.allow_edit&&U.value&&Ie(),1==P&&xe(),1==A.value.is_open_report)return;I={},me();const e=y.get_status(!0);let t={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end};1==O&&(t=b.set_default_time_interval(void 0,"min"),C.emit_event(ntopng_events.EPOCH_CHANGE,t,l.context.page)),ee(t,A.value.value)}function ie(){u.value.show()}function oe(){d.value.show()}function re(){_.value.show()}function ce(){let e="report";return"vs-report"==l.context.page?e=l.context.title:v.value&&v.value.epoch_end&&(e+="-"+b.from_utc_to_server_date_format(1e3*v.value.epoch_end,"DD-MM-YYYY")),e}dn((async()=>{J()})),_n((async()=>{"dashboard"==l.context.page&&setInterval((()=>{Z()}),1e4)}));const ue=async e=>{let t=JSON.parse(e);de(t,t.name),x.delete_key_from_url("report_name")};function de(e,t){me(t);const a={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end};C.emit_event(ntopng_events.EPOCH_CHANGE,a,l.context.page),pe(e)}const _e=async()=>{let e=`${l.context.report_list_endpoint}?ifid=${l.context.ifid}`,t=await b.http_request(e);return b.object_to_array(t)},pe=async e=>{let t={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end},a=e.template,l=e.data,n={};for(let e in l){let t={data:l[e]};n[e]=t}O=!0,I=n,h.value=a,Z(t)},fe=async e=>{let a=`${l.context.report_open_endpoint}?ifid=${l.context.ifid}&report_name=${e}`,n=await b.http_request(a);n?(de(n,e),T.value=""):T.value=t("report.unable_to_open")};function me(e){if(E.value=E.value.filter((e=>0==e.is_open_report)),null==e)return x.set_key_to_url("report_template",A.value.value),l.context.template=A.value.value,void x.delete_key_from_url("report_name");let a={value:e,label:t("dashboard.custom"),disabled:!1,toolbox:null,is_open_report:!0,allow_edit:!1};E.value.push(a),A.value=a,l.context.template=e,x.set_key_to_url("report_name",A.value.value),x.delete_key_from_url("report_template")}const ve=async e=>{let t=!1,a={csrf:l.context.csrf,ifid:l.context.ifid,report_name:e},n=`${l.context.report_delete_endpoint}`;try{let e={"Content-Type":"application/json"};await b.http_request(n,{method:"post",headers:e,body:JSON.stringify(a)}),t=!0}catch(e){console.error(e)}return t},he=async e=>{let t={};for(var a in I)t[a]=await I[a].data;let l={version:"1.0",name:e,template:h.value,data:t};return v.value&&v.value.epoch_begin&&v.value.epoch_end&&(l.epoch_begin=v.value.epoch_begin,l.epoch_end=v.value.epoch_end),JSON.stringify(l)},ge=async e=>{let t=!1,a={csrf:l.context.csrf,ifid:l.context.ifid,report_name:e,content:await he(e)},n=`${l.context.report_store_endpoint}`;try{let e={"Content-Type":"application/json"};await b.http_request(n,{method:"post",headers:e,body:JSON.stringify(a)}),t=!0}catch(e){console.error(e)}return t};async function be(){var e=ce(),t=e+".json",a=await he(e),l=document.createElement("a");l.setAttribute("href","data:text/plain;charset=utf-8,"+encodeURIComponent(a)),l.setAttribute("download",t),l.style.display="none",document.body.appendChild(l),l.click(),document.body.removeChild(l)}function ye(){if(1==P)return window.print(),!1;let e=x.get_url_object();e.printable=!0;const t=x.obj_to_url_params(e);let a=`${window.location.origin}${window.location.pathname}?${t}`;x.open_new_window(a)}function we(e,t){if(1==z.value)return"";const a=1e3*e,l=1e3*t,n=b.from_utc_to_server_date_format(a,"DD/MM/YYYY"),s=b.from_utc_to_server_date_format(a,"HH:mm:ss"),i=b.from_utc_to_server_date_format(l,"DD/MM/YYYY"),o=b.from_utc_to_server_date_format(l,"HH:mm:ss");return`${`${n} ${s}`} - ${n==i?`${o}`:`${i} ${o}`}`}function xe(){const e=y.get_status(!0),t=we(e.epoch_begin,e.epoch_end);let a=`ntopng - Report ${A.value.label} ${t}`;document.title=a}function ke(e){return async(t,a)=>{e[t]=a}}function $e(){M.value.show()}function Se(){return"New Template"}const Ne=async e=>{let t=!1,a={csrf:l.context.csrf,template_name:e},n=`${l.context.template_add_endpoint}`;try{let e={"Content-Type":"application/json"},l=await b.http_request(n,{method:"post",headers:e,body:JSON.stringify(a)});l&&l.template_id&&await J(l.template_id),t=!0}catch(e){console.error(e)}return t};async function Ce(e){let t=h.value.map((e=>e.id)),a={csrf:l.context.csrf,template:A.value.value,components:t.toString()},n=!1,s=`${l.context.template_edit_endpoint}`;try{let e={"Content-Type":"application/json"};await b.http_request(s,{method:"post",headers:e,body:JSON.stringify(a)});n=!0}catch(e){console.error(e)}return n}async function Ee(e){let t=j.toArray().map((e=>h.value.find((t=>t.id==e))));Te(),h.value=t,await Ja(),Ae(),Ce()}function Ae(){if(!j){var e=document.getElementById("drag-zone");j=window.Sortable.create(e,{draggable:".drag-item",dataIdAttr:"id",onUpdate:Ee})}}function Te(){j&&(j.destroy(),j=null)}function Ie(){U.value=!U.value,U.value?Ae():Te()}const Oe=async()=>{let e=`${l.context.template_list_widgets_endpoint}`,a=await b.http_request(e);if(null==a?.list)return{};let n=a.list;return n.sort(((e,a)=>t(e.i18n_name).toUpperCase().localeCompare(t(a.i18n_name).toUpperCase()))),n};function Pe(){p.value.show()}function Ue(){m.value.show()}const je=async e=>{Te();let a=`${l.context.template_component_add_endpoint}`,n={csrf:l.context.csrf,template:l.context.template,component:e.id},s={"Content-Type":"application/json"};try{await b.http_request(a,{method:"post",headers:s,body:JSON.stringify(n)});T.value="",await J(A.value.value)}catch(e){T.value=t("report.unable_to_open")}await Ja(),Ae()};async function Me(e){Te();const t=e.target.dataset.componentId;h.value=h.value.filter((e=>e.id!==t)),await Ja(),Ae(),Ce()}function Fe(e){const t=e.target.dataset.componentId,a=h.value.find((e=>e.id===t)),n="report"==l.context.page;f.value.show(a,n)}async function Le(e){Te();let a=`${l.context.template_component_edit_endpoint}`,n={csrf:l.context.csrf,template:l.context.template,component:e.id,component_title:e.title,component_height:e.height,component_width:e.width,component_time_offset:e.time_offset,component_time_window:e.time_window,component_params:e.rest_params},s={"Content-Type":"application/json"};try{await b.http_request(a,{method:"post",headers:s,body:JSON.stringify(n)});T.value="",await J(A.value.value)}catch(e){T.value=t("report.unable_to_open")}await Ja(),Ae()}async function Re(){let e=!1,t={csrf:l.context.csrf,template:A.value.value},a=`${l.context.template_delete_endpoint}`;try{let l={"Content-Type":"application/json"};await b.http_request(a,{method:"post",headers:l,body:JSON.stringify(t)});await J(),e=!0}catch(e){console.error(e)}return e}return(a,l)=>(Is(),Ms(Ss,null,[Vs("div",Mj,[Ys(' <Dropdown v-for="(t, t_index) in top_table_array" '),Ys('           :ref="el => { top_table_dropdown_array[t_index] = el }"> '),Ys("   <template v-slot:title> "),Ys('     <Spinner :show="t.show_spinner" size="1rem" class="me-1"></Spinner> '),Ys('     <a class="ntopng-truncate" :title="t.title">{{ t.label }}</a> '),Ys("   </template> "),Ys("   <template v-slot:menu> "),Ys('     <a v-for="opt in t.options" style="cursor:pointer; display: block;" '),Ys('        @click="add_top_table_filter(opt, $event)" class="ntopng-truncate tag-filter " '),Ys('        :title="opt.value">{{ opt.label }}</a> '),Ys("   </template>     "),Ys(" </Dropdown> "),L.value?(Is(),Fs(A_,{key:0,class:"dontprint",disabled_date_picker:q.value,id:"dashboard-date-time-picker",round_time:!0,min_time_interval_id:"min",onEpoch_change:Z},{begin:vl((()=>[Vs("div",Fj,[Hs(l_,{selected_option:A.value,"onUpdate:selected_option":l[0]||(l[0]=e=>A.value=e),options:E.value,onSelect_option:se},null,8,["selected_option","options"])])])),extra_buttons:vl((()=>[Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:ie,title:t("dashboard.store")},[...Rj],8,Lj),Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:oe,title:t("dashboard.open")},[...zj],8,Dj),Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:be,title:t("download")},[...Bj],8,qj),Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:re,title:t("upload")},[...Hj],8,Vj),Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:ye,title:t("dashboard.print")},[...Wj],8,Gj),ya(r)?(Is(),Ms("button",{key:0,class:"btn btn-link btn-sm",type:"button",onClick:$e,title:t("dashboard.new_template")},[...Jj],8,Kj)):Ys("v-if",!0),ya(r)&&A.value.allow_edit?(Is(),Ms("button",{key:1,class:K(["btn btn-link btn-sm",U.value?"text-warning":""]),type:"button",onClick:Ie,title:t("dashboard.edit_mode")},[...Zj],10,Yj)):Ys("v-if",!0)])),_:1},8,["disabled_date_picker"])):Ys("v-if",!0),Ys(" Filters "),Vs("div",{class:K(["btn-group me-auto mt-2 btn-group-sm flex-wrap d-flex",[i.value?"justify-content-center align-items-center":""]])},[Hs(cm,{show:i.value,size:"1rem",class:"me-1"},null,8,["show"]),(Is(!0),Ms(Ss,null,An(S.value,(e=>(Is(),Ms("div",Xj,[Vs("label",Qj,[Vs("b",null,te(t("db_search."+e)),1)]),Hs(l_,{selected_option:w.value[e],"onUpdate:selected_option":t=>w.value[e]=t,options:$.value[e],style:"width: 50%;",theme:"bootstrap-5",dropdown_size:"small",onSelect_option:t=>function(e,t){Y(t,e.value);for(const[e,a]of Object.entries(k.value)){const a=w.value[e];a?.value?ne(e,t):le(e)}}(w.value[e],e)},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256)),Object.keys(S.value).length>0?(Is(),Ms("div",eM,[Vs("div",tM,[aM,Vs("button",{type:"button",class:"btn btn-sm btn-primary",onClick:X},te(t("reset")),1)])])):Ys("v-if",!0)],2),Ys(" Template Editor Toolbox "),U.value?(Is(),Ms("div",lM,[Vs("button",{class:"btn btn-lg btn-link text-warning",type:"button",onClick:Pe,title:t("dashboard.add_component")},[...sM],8,nM),Vs("button",{class:"btn btn-lg btn-link text-warning",type:"button",onClick:Ue,title:t("dashboard.del_template")},[...oM],8,iM),Vs("h2",rM,te(t("dashboard.edit_mode")),1),Ys('\n            <div style="margin: auto"></div>\n            <h4><span class="badge bg-warning">{{ _i18n(\'dashboard.edit_mode\') }}</span></h4>\n            ')])):Ys("v-if",!0),Ys(" Report Title and small buttons "),B.value?(Is(),Ms("div",cM,[Vs("h3",uM,[Ks(te(H.value)+" ",1),R.value?(Is(),Ms("span",dM,[D.value?(Is(),Ms(Ss,{key:0},[Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:be,title:t("download")},[...pM],8,_M),Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:re,title:t("upload")},[...mM],8,fM)],64)):Ys("v-if",!0),Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:ye,title:t("dashboard.print")},[...hM],8,vM)])):Ys("v-if",!0)])])):Ys("v-if",!0),Ys(" Report/Dashboard Content "),(Is(),Ms("div",{ref_key:"report_box",ref:c,id:"drag-zone",class:"row",key:h.value},[Ys(" Warning Message "),T.value?(Is(),Ms("div",gM,[Vs("div",bM,te(T.value),1)])):Ys("v-if",!0),Ys(" Empty template message "),!g.value||h.value.length||U.value?Ys("v-if",!0):(Is(),Ms("div",yM,[Vs("div",wM,[Vs("h4",xM,te(t("dashboard.empty_template")),1),Vs("p",kM,te(t("dashboard.empty_template_note")),1)])])),Ys(" Rendered Components "),(Is(!0),Ms(Ss,null,An(h.value,(a=>(Is(),Fs(xj,{style:{"min-width":"20rem"},color:a.active&&a.color||a.inactive_color,width:a.width,height:a.height,id:a.id,class:"drag-item"},{box_title:vl((()=>[a.i18n_name?(Is(),Ms("div",$M,[Vs("h4",SM,[Ks(te(a.custom_name?a.custom_name:t(a.i18n_name))+" ",1),Vs("span",NM,te(a.time_offset?t("dashboard."+(F.value?"time_ago":"time_offset_list")+"."+a.time_offset):""),1)]),U.value?(Is(),Ms("div",CM,[Vs("div",EM,[Vs("button",{type:"button",class:"btn-close btn-edit me-1","data-component-id":a.id,onClick:Fe},null,8,AM),Vs("button",{type:"button",class:"btn-close","data-component-id":a.id,onClick:Me},null,8,TM)])])):Ys("v-if",!0)])):Ys("v-if",!0)])),box_content:vl((()=>{return[s.value&&ya(o)?(Is(),Fs(yf,{key:0,styles:"margin-top: 2rem !important;"})):Ys("v-if",!0),Vs("div",{class:K([s.value&&ya(o)?"ntopng-gray-out":""])},[(Is(),Fs(Sn(n[a.component]),{id:a.id,style:V(G.value(a)),epoch_begin:a.epoch_begin,epoch_end:a.epoch_end,i18n_title:a.i18n_name,ifid:a.ifid?a.ifid.toString():e.context.ifid.toString(),max_width:a.width,max_height:a.height,params:a.params,get_component_data:(t=a,async(e,a,l)=>{let n={};if(O)null==t.component_id&&(t.component_id=t.id),I[t.component_id]?n=I[t.component_id]:(console.error("No data for "+t.component_id),n.data={}),s.value=!1;else{I[t.component_id]&&(n=I[t.component_id],n.data&&await n.data);const i=`${e}?${a}`;s.value=!0,n.data=l?b.http_post_request(i,l):b.http_request(i),n.data.then((()=>{s.value=!1})),I[t.component_id]=n}return n.data}),set_component_attr:ke(a),csrf:e.context.csrf,filters:a.filters},null,8,["id","style","epoch_begin","epoch_end","i18n_title","ifid","max_width","max_height","params","get_component_data","set_component_attr","csrf","filters"]))],2)];var t})),box_footer:vl((()=>["empty"!=a.component&&a.i18n_name&&!z.value?(Is(),Ms("span",IM,te(W.value(a)),1)):Ys("v-if",!0)])),_:2},1032,["color","width","height","id"])))),256))]))]),Ys(" div row "),Hs(xU,{ref_key:"modal_store_report",ref:u,get_suggested_file_name:ce,store_file:ge,csrf:e.context.csrf,title:t("dashboard.store")},null,8,["csrf","title"]),Hs(PU,{ref_key:"modal_open_report",ref:d,list_files:_e,open_file:fe,delete_file:ve,csrf:e.context.csrf,title:t("dashboard.open"),file_title:t("report.report_name")},null,8,["csrf","title","file_title"]),Hs(DU,{ref_key:"modal_upload_report",ref:_,upload_file:ue,title:t("upload"),file_title:t("report.file")},null,8,["title","file_title"]),Hs(xU,{ref_key:"modal_new_template",ref:M,get_suggested_file_name:Se,store_file:Ne,allow_spaces:!0,csrf:e.context.csrf,title:t("dashboard.new_template")},null,8,["csrf","title"]),Hs(GU,{ref_key:"modal_add_template_component",ref:p,list_components:Oe,add_component:je,csrf:e.context.csrf,title:t("dashboard.add_component")},null,8,["csrf","title"]),Hs(yj,{ref_key:"modal_edit_template_component",ref:f,csrf:e.context.csrf,onEdit:Le},null,8,["csrf"]),Hs(sx,{ref_key:"modal_delete_template",ref:m,title:t("dashboard.del_template"),body:t("dashboard.del_template_confirm"),onDelete:Re},null,8,["title","body"])],64))}};lp("\n@media print {\n.dontprint[data-v-c360f212] {\n        display: none;\n}\n.pagebreak-begin[data-v-c360f212] {\n        page-break-before: always;\n}\n.pagebreak-end[data-v-c360f212] {\n        page-break-after: always !important;\n}\n.print-element-class[data-v-c360f212] {\n        page-break-inside: avoid !important;\n        page-break-after: auto\n}\n}\n\n/* @media print and (orientation: portrait) and (max-width: 297mm){ */\n/*     .col-4 { */\n/*         width: 50% !important; */\n/*         flex: 0 0 auto; */\n/*     } */\n/* } */\n@page {\n    /* size: A3 landscape; */\n    /* position:absolute; width:100%; top:0;left:0;right:0;bottom:0; padding:0; margin:-1px; */\n}\n\n/* Print on A4 */\n@media print and (max-width: 297mm) and (min-width: 210mm) {\n\n    /* .row { */\n    /*         padding-left: 0; */\n    /*         padding-right: 0; */\n    /*         margin-left: -10rem; */\n    /*         margin-right: 0; */\n    /* } */\n.col-4[data-v-c360f212] {\n        width: 50% !important;\n        flex: 0 0 auto;\n}\n}\n\n/* Print on A5 (commented out as this is not working on Chrome/Safari) */\n\n/* @media print and (max-width: 148mm){ */\n/*     .col-4 { */\n/*         width: 100% !important; */\n/*         flex: 0 0 auto; */\n/*     } */\n/*     .col-6 { */\n/*         width: 100% !important; */\n/*         flex: 0 0 auto; */\n/*     } */\n/* } */\n.align-center[data-v-c360f212] {}\n"),OM.__scopeId="data-v-c360f212",OM.__file="http_src/vue/dashboard.vue";const PM=e=>(pl("data-v-7e5acce0"),e=e(),fl(),e),UM={class:"mb-3 row"},jM={class:"col-form-label col-sm-4"},MM={class:"col-sm-6"},FM={class:"btn-group btn-group-toggle","data-bs-toggle":"buttons"},LM=PM((()=>Vs("hr",null,null,-1))),RM={class:"host-alert-fields"},DM={class:"mb-3 row"},zM={class:"col-form-label col-sm-4"},qM={class:"col-sm-6"},BM={value:""},VM={value:"0"},HM={disabled:""},GM=["value"],WM={class:"flow-alert-fields"},KM={class:"mb-3 row"},JM={class:"col-form-label col-sm-4"},YM={class:"col-sm-6"},ZM={value:""},XM={value:"0"},QM={disabled:""},eF=["value"],tF={key:0,class:"ip-fields"},aF={class:"mb-3 row"},lF={class:"col-form-label col-sm-4"},nF={class:"col-sm-6"},sF=["pattern"],iF={key:1,class:"network-fields"},oF={class:"mb-3 row"},rF={class:"col-form-label col-sm-4"},cF={class:"col-sm-4 pr-0"},uF=["pattern"],dF={class:"col-sm-2 ps-4 pe-0"},_F=PM((()=>Vs("span",{class:"me-2"},"/",-1))),pF={class:"mb-3 row"},fF={class:"col-form-label col-sm-4"},mF={class:"col-sm-6"},vF={class:"mb-3 row"},hF={class:"col-form-label col-sm-4"},gF={key:0},bF={key:1},yF={class:"col-sm-6"},wF=["pattern"],xF=["pattern"],kF=PM((()=>Vs("hr",{class:"separator mt-5"},null,-1))),$F={class:"form-group row"},SF={class:"col-form-label"},NF={class:"mt-1"},CF=["placeholder"],EF=["disabled"];var AF={__name:"modal-add-check-exclusion",props:{alert_exclusions_page:String,host_alert_types:Array,flow_alert_types:Array},emits:["add"],setup(e,{expose:t,emit:a}){const l=ma(null);ma(null);const n=ma("ip"),s=ma(""),i=ma(""),o=ma(0),r=ma(""),c=ma(""),u=ma(""),d=ma(""),_=ma(null),p=i18n("details.comment_placeholder"),f=ma(null),m=ma(null),v=a;function h(e){if("text"==e)return NtopUtils.REGEXES.non_quoted_text;if("ip"==e){let e=NtopUtils.REGEXES.ipv4,t=e.replaceAll("$","@[0-9]{0,5}$"),a=NtopUtils.REGEXES.ipv6,l=a.replaceAll("$","@[0-9]{0,5}$");return`(${e})|(${t})|(${a})|(${l})`}return"hostname"==e?`${NtopUtils.REGEXES.singleword}|[a-zA-Z0-9._-]{3,250}@[0-9]{0,5}$`:"certificate"==e?NtopUtils.REGEXES.tls_certificate:NtopUtils.REGEXES[e]}const g=e;let b=h("ip");h("text");let y=h("certificate"),w=h("domain_name_not_strict");const x=e=>{n.value=e},k=()=>{let e=null,t=!0;return"hosts"==g.alert_exclusions_page?(e=new RegExp(b),t="ip"==n.value?null==s.value||""==s.value||0==e.test(s.value)||""==c.value&&""==u.value:null==i.value||""==i.value||0==e.test(i.value)||""==c.value&&""==u.value||null==d.value||""==d.value||parseInt(d.value)<1||parseInt(d.value)>127):"domain_names"==g.alert_exclusions_page?(e=new RegExp(w),t=null==r.value||""==r.value||0==e.test(r.value)):"tls_certificate"==g.alert_exclusions_page&&(e=new RegExp(y),t=null==r.value||""==r.value||0==e.test(r.value)),t},$=()=>{l.value.close()},S=e=>""==e?-1:e,N=()=>{let e,t=s.value;"hosts"==g.alert_exclusions_page?("network"==n.value&&(t=`${i.value}/${d.value}`),null!=o.value&&0!=o.value&&(t=`${t}@${o.value}`),e={alert_addr:t,host_alert_key:S(c.value),flow_alert_key:S(u.value)}):"domain_names"==g.alert_exclusions_page?e={alert_domain:r.value}:"tls_certificate"==g.alert_exclusions_page&&(e={alert_certificate:r.value}),e.label=_.value,f.value&&(e.old_type=m.value.type,e.old_subdir=m.value.subdir,e.old_alert_domain=m.value.alert_domain,e.old_alert_certificate=m.value.alert_certificate,e.old_alert_addr=m.value.alert_addr,e.old_flow_alert_key=m.value.flow_alert_key,e.old_host_alert_key=m.value.host_alert_key),v("add",e),$()};t({show:e=>{if(e)if(f.value=!0,m.value=e,_.value=e.label,"host"==e.type){let t=e.alert_addr.split("/"),a=e.alert_addr.split("@");t.length>1?(n.value="network",i.value=t[0],d.value=t[1],s.value=""):(n.value="ip",s.value=a[0],i.value="",d.value=""),a.length>1?o.value=a[1]:o.value=0,null!=e.host_alert_key?c.value=""+e.host_alert_key:c.value="",null!=e.flow_alert_key?u.value=""+e.flow_alert_key:u.value=""}else"domain"==e.type?r.value=e.alert_domain:r.value=e.alert_certificate;else n.value="ip",s.value="",i.value="",o.value=0,c.value="0",u.value="",d.value="",r.value="",_.value="";l.value.show()},close:$}),_n((()=>{}));const C=e=>i18n(e);return(t,a)=>(Is(),Fs(np,{onShowed:a[11]||(a[11]=e=>{}),ref_key:"modal_id",ref:l},{title:vl((()=>[Ks(te(C("check_exclusion.add_exclusion")),1)])),body:vl((()=>["hosts"==e.alert_exclusions_page?(Is(),Ms(Ss,{key:0},[Ys(" modal hosts "),Vs("div",UM,[Vs("label",jM,[Vs("b",null,te(C("check_exclusion.member_type")),1)]),Vs("div",MM,[Vs("div",FM,[Vs("label",{class:K([{active:"ip"==n.value},"btn btn-secondary"])},[Vs("input",{class:"btn-check",type:"radio",name:"member_type",value:"ip",onClick:a[0]||(a[0]=e=>x("ip"))}),Ks(" "+te(C("check_exclusion.ip_address")),1)],2),Vs("label",{class:K([{active:"network"==n.value},"btn btn-secondary"])},[Vs("input",{onClick:a[1]||(a[1]=e=>x("network")),class:"btn-check",type:"radio",name:"member_type",value:"network"}),Ks(" "+te(C("check_exclusion.network")),1)],2)])])]),LM,Vs("div",RM,[Vs("div",DM,[Vs("label",zM,[Vs("b",null,te(C("check_exclusion.host_alert_type")),1)]),Vs("div",qM,[wn(Vs("select",{name:"value",class:"form-select alert-select","onUpdate:modelValue":a[2]||(a[2]=e=>c.value=e)},[Vs("option",BM,te(C("check_exclusion.none")),1),Vs("option",VM,te(C("check_exclusion.exclude_all_alerts")),1),Vs("option",HM,te(C("check_exclusion.spacing_bar")),1),(Is(!0),Ms(Ss,null,An(e.host_alert_types,(e=>(Is(),Ms(Ss,null,[null!=e?(Is(),Ms("option",{key:0,value:e.alert_id},te(e.label),9,GM)):Ys("v-if",!0)],64)))),256))],512),[[Ro,c.value]])])])]),Vs("div",WM,[Vs("div",KM,[Vs("label",JM,[Vs("b",null,te(C("check_exclusion.flow_alert_type")),1)]),Vs("div",YM,[wn(Vs("select",{id:"flow-alert-select",name:"value",class:"form-select alert-select","onUpdate:modelValue":a[3]||(a[3]=e=>u.value=e)},[Vs("option",ZM,te(C("check_exclusion.none")),1),Vs("option",XM,te(C("check_exclusion.exclude_all_alerts")),1),Vs("option",QM,te(C("check_exclusion.spacing_bar")),1),(Is(!0),Ms(Ss,null,An(e.flow_alert_types,(e=>(Is(),Ms(Ss,null,[null!=e?(Is(),Ms("option",{key:0,value:e.alert_id},te(e.label),9,eF)):Ys("v-if",!0)],64)))),256))],512),[[Ro,u.value]])])])]),"ip"==n.value?(Is(),Ms("div",tF,[Vs("div",aF,[Vs("label",lF,[Vs("b",null,te(C("check_exclusion.ip_address")),1)]),Vs("div",nF,[wn(Vs("input",{pattern:ya(b),placeholder:"192.168.1.1",required:"",type:"text",name:"ip_address",class:"form-control","onUpdate:modelValue":a[4]||(a[4]=e=>s.value=e)},null,8,sF),[[jo,s.value]])])])])):Ys("v-if",!0),"network"==n.value?(Is(),Ms("div",iF,[Vs("div",oF,[Vs("label",rF,[Vs("b",null,te(C("check_exclusion.network")),1)]),Vs("div",cF,[wn(Vs("input",{required:"",style:{width:"calc(100% - 10px)"},name:"network",class:"form-control d-inline",placeholder:"172.16.0.0",pattern:ya(b),"onUpdate:modelValue":a[5]||(a[5]=e=>i.value=e)},null,8,uF),[[jo,i.value]])]),Vs("div",dF,[_F,wn(Vs("input",{placeholder:"24",required:"",class:"form-control d-inline w-75",min:"1",max:"127",type:"number",name:"cidr","onUpdate:modelValue":a[6]||(a[6]=e=>d.value=e)},null,512),[[jo,d.value]])])])])):Ys("v-if",!0),Vs("div",pF,[Vs("label",fF,[Vs("b",null,te(C("vlan")),1)]),Vs("div",mF,[wn(Vs("input",{placeholder:"0",min:"0",type:"number","onUpdate:modelValue":a[7]||(a[7]=e=>o.value=e),class:"form-control"},null,512),[[jo,o.value]])])])],64)):Ys("v-if",!0),Ys(" mdoal hosts "),"hosts"!=e.alert_exclusions_page?(Is(),Ms(Ss,{key:1},[Ys(" modal domain_names"),Vs("div",null,[Vs("div",vF,[Vs("label",hF,["domain_names"==e.alert_exclusions_page?(Is(),Ms("b",gF,te(C("check_exclusion.domain")),1)):Ys("v-if",!0),"tls_certificate"==e.alert_exclusions_page?(Is(),Ms("b",bF,te(C("check_exclusion.tls_certificate")),1)):Ys("v-if",!0)]),Vs("div",yF,["domain_names"==e.alert_exclusions_page?wn((Is(),Ms("input",{key:0,placeholder:"",pattern:ya(w),required:"",type:"text",name:"ip_address",class:"form-control","onUpdate:modelValue":a[8]||(a[8]=e=>r.value=e)},null,8,wF)),[[jo,r.value]]):Ys("v-if",!0),"tls_certificate"==e.alert_exclusions_page?wn((Is(),Ms("input",{key:1,placeholder:"CN=813845657003339838, O=Code42, OU=TEST, ST=MN, C=U",pattern:ya(y),required:"",type:"text",name:"ip_address",class:"form-control","onUpdate:modelValue":a[9]||(a[9]=e=>r.value=e)},null,8,xF)),[[jo,r.value]]):Ys("v-if",!0)])])])],64)):Ys("v-if",!0),Ys(" modal comment"),kF,Vs("div",$F,[Vs("div",null,[Vs("label",SF,[Vs("b",null,te(C("show_alerts.add_a_comment")),1)])]),Vs("div",NF,[wn(Vs("textarea",{placeholder:ya(p),id:"alert-label",name:"label",rows:"3",class:"form-control",type:"text","onUpdate:modelValue":a[10]||(a[10]=e=>_.value=e),maxlength:"450"},null,8,CF),[[jo,_.value]])])])])),footer:vl((()=>[Vs("button",{type:"button",disabled:k(),onClick:N,class:"btn btn-primary"},te(C("add")),9,EF)])),_:1},512))}};lp("\ninput[data-v-7e5acce0]:invalid {\n  border-color: #ff0000;\n}  \n"),AF.__scopeId="data-v-7e5acce0",AF.__file="http_src/vue/modal-add-check-exclusion.vue";let TF={PageAlertStats:Zh,PageFlowHistorical:Eg,PageStats:Qw,PageAssetTable:ox,PagePeriodicityTable:yx,PageServiceTable:Fx,PageServiceMap:tk,PagePeriodicityMap:wk,PageAssetMap:zk,PageDeviceExclusions:L$,PageHostTLS:R$,PageHostSSH:W$,PageHomeMap:tS,PageSankey:nS,PageHostRules:vC,PageAlertAnalysis:LC,PageHostMap:YC,PageManageConfigurationBackup:zA,PageSNMPDeviceRules:NT,PageHostsPortsAnalysis:VT,PageInactiveHosts:AI,PageInactiveHostDetails:UI,PageVulnerabilityScan:iP,PageHostVsResult:_P,PageOpenPorts:gP,PageVulnerabilityScanReport:PP,PageSNMPUsage:RP,PageSNMPInterfaces:cU,PageTopology:mU,PageFlowsList:nU,PageEditApplications:SA,PageVLANPortsFlowSankey:cE,PageTestTable:xE,PageSnmpDevicesInterfacesSimilarity:CT,NedgeRulesConfig:cA,NedgeRepeatersConfig:oI,PageHostDetailsApplications:iS,PageHostDetailsTraffic:SS,PageHostDetailsPackets:US,PageHostDetailsFlowSankey:YS,PageHostDetailsPorts:SC,PageHostsList:GP,PageAggregatedLiveFlows:yE,PageNetworkDiscovery:jA,PageFlowDeviceDetails:MI,PageFlowDeviceInterfaceDetails:YI,AlertInfo:S_,Chart:C_,TimeseriesChart:Ag,Datatable:kw,DateTimeRangePicker:A_,NetworkMap:Xx,RangePicker:Wp,PageNavbar:n_,SelectSearch:l_,TabList:ex,Sankey:LS,NoteList:fm,Loading:yf,Dashboard:OM,DashboardBox:xj,DashboardEmpty:kj,DashboardTable:Sj,DashboardBadge:Ij,DashboardPie:Oj,DashboardTimeseries:Pj,DashboardSankey:Uj,ListTimeseries:eb,Modal:np,ModalAddCheckExclusion:AF,ModalAlertsFilter:Dv,ModalFilters:wp,ModalTimeseries:pw,ModalTrafficExtraction:mm,ModalDeleteConfirm:sx,ModalSnapshot:ov,ModalAddDeviceExclusion:f$,ModalEditDeviceExclusion:N$,ModalAddHostRules:oC,ModalAddApplication:xA,ModalDeleteApplication:kA,ModalEditReport:CP,Vue:Ud};window.ntopVue=TF;var IF=["html","clone","append","<div />",'<div><hr><div style="margin-left: auto;margin-right: auto;padding-left: var(--bs-gutter-x,.75rem);padding-right: var(--bs-gutter-x,.75rem);width: 100%;"><div class="row mt-2"><div class="col-12 col-md-4 pl-md-0 text-center text-md-start"><span style="font-size: .875em;"><a href="https://www.ntop.org/products/traffic-analysis/ntop/" target="_blank" id="footer-ntop-version"></a> | <span id="footer-ntop-github"></span></span></div><div class="col-12 col-md-4 text-center"><span style="font-size: .875em;" id="footer-ntop-age"></span></div><div class="col-12 col-md-4 text-center text-md-end pr-md-0"><span style="font-size: .875em;"><i class="fas fa-clock" title="Server Time"></i> <div class="d-inline-block" id="footer-network-clock"></div> UTC | Uptime: <div class="d-inline-block" id="footer-network-uptime"></div></span></div></div></div></div>',"ntopng_release_info","|","split","#footer-ntop-version","#footer-ntop-github","© 1998-","ntop_age_to"," - ntop","#footer-ntop-age","body div main","parent","#footer-network-clock","","#footer-network-uptime","remove","localtime","uptime","chart_colors","on_custom_event","ready"];function OF(){const e=e=>$(IF[3])[IF[2]]($(e)[IF[1]]())[IF[0]]();let t=IF[4];const a=(()=>{let a=$(t),l=i18n(IF[5])[IF[7]](IF[6]);$(IF[8],a)[IF[0]](l[0]),$(IF[9],a)[IF[0]](l[1]);let n=`${IF[10]}${i18n(IF[11])}${IF[12]}`;return $(IF[13],a)[IF[0]](n),e(a)})(),l=()=>{$(IF[14])[IF[2]](a)};l();const n=()=>$(IF[16])[IF[15]]()[IF[15]]()[IF[15]]()[IF[15]]()[IF[15]]();ntopng_events_manager[IF[23]](IF[22],ntopng_custom_events.GET_INTERFACE_DATA,(t=>{0==(()=>{let t=n();if(null==t)return!1;let l=t[IF[1]]();$(IF[16],l)[IF[0]](IF[17]),$(IF[18],l)[IF[0]](IF[17]);const s=e(l);return a===s})()&&((()=>{let e=n();null!=e&&e[IF[19]]()})(),l()),(e=>{$(IF[16])[IF[0]](e[IF[20]]),$(IF[18])[IF[0]](e[IF[21]])})(t)}))}$(document)[IF[24]]((()=>OF()))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
