!function(){"use strict";Date.prototype.format=function(e){var t={"M+":this.getMonth()+1,"d+":this.getDate(),"h+":this.getHours(),"m+":this.getMinutes(),"s+":this.getSeconds(),"q+":Math.floor((this.getMonth()+3)/3),S:this.getMilliseconds()};for(var a in/(y+)/.test(e)&&(e=e.replace(RegExp.$1,(this.getFullYear()+"").substr(4-RegExp.$1.length))),t)new RegExp("("+a+")").test(e)&&(e=e.replace(RegExp.$1,1==RegExp.$1.length?t[a]:("00"+t[a]).substr((""+t[a]).length)));return e},jQuery.fn.extend({disable:function(e){return this.each((function(){var t=$(this);t.is("input, button, textarea, select")?this.disabled=e:t.toggleClass("disabled",e)}))}});const e=.005,t={ipv4:String.raw`^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$`,ipv6:String.raw`^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$|^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*)$`,domainName:String.raw`^([a-zA-Z]([a-zA-Z]|[0-9])?\.[a-zA-Z]{2,13}|[a-zA-Z0-9]([\-_.a-zA-Z0-9]{1,61}[a-zA-Z0-9])?\.[a-zA-Z]{2,13}|[a-zA-Z0-9]([\-_.a-zA-Z0-9]{1,61}[a-zA-Z0-9])?\.[a-zA-Z]{2,30}\.[a-zA-Z]{2,3})$`,port:String.raw`^([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$`,latency:String.raw`^([0-9]*[.])?[0-9]+$`,url:String.raw`^(https?\:\/\/[^\/\s]+(\/.*)?)$`,emailUrl:String.raw`^smtps?:\/\/[\-a-zA-Z0-9:.]{1,256}$`,macAddress:String.raw`^([0-9A-Fa-f]{2}:){5}([0-9A-Fa-f]{2})$`,hostname:String.raw`^(?!\s*$)[a-zA-Z0-9._: \-\/]{1,250}|^[a-zA-Z0-9._: \-\/]{1,250}@[0-9]{0,5}`,username:String.raw`^[a-zA-Z0-9._@!-?]{3,30}$`,singleword:String.raw`^(?=[a-zA-Z0-9._:\-]{3,253}$)(?!.*[_.:\-]{2})[^_.:\-].*[^_.:\-]$`,multiword:String.raw`^([a-zA-Z0-9._:\-\s]{3,253})$`,email:String.raw`^([a-zA-Z0-9.!#$%&'*+\-\/=?^_\`\|~]+@[a-zA-Z0-9\-]+(?:\.[a-zA-Z0-9\-]+)*)$|^[a-zA-Z\d.!#$%&'*+\-\/=?^_\`\|~]{1,128}$`,emailCommaList:String.raw`^((?:[a-zA-Z0-9.!#$%&'*+\-\/=?^_\`\|~]+@[a-zA-Z0-9\-]+(?:\.[a-zA-Z0-9\-]+)*)|([a-zA-Z\d.!#$%&'*+\-\/=?^_\`\|~]{1,128}))(?:,((?:[a-zA-Z0-9.!#$%&'*+\-\/=?^_\`\|~]+@[a-zA-Z0-9\-]+(?:\.[a-zA-Z0-9\-]+)*)|([a-zA-Z\d.!#$%&'*+\-\/=?^_\`\|~]{1,128})))*$`,https:String.raw`^https?:\/\/.+$`,token:String.raw`^[0-9a-f]{32}`,score:String.raw`^[0-9]{1,5}`,telegram_channel:String.raw`^[0-9\-]{1,15}`,password:String.raw`^[\w\/$!\/()=?^*@_-]{5,31}$`,tls_certificate:String.raw`^[^=,]+=[^=,]+(,\s[^=,]+=[^=,]+)*$`,domain_name_not_strict:String.raw`^[a-zA-Z0-9\-_~]+((\.[a-zA-Z0-9\-_~]+)+)$`,non_quoted_text:String.raw`^[a-zA-Z0-9.-_]+$`};class a{static toggleOverlays(e=500){$(".overlay").toggle(e)}static showOverlays(e=500){$(".overlay").fadeIn(e)}static hideOverlays(e=500){$(".overlay").fadeOut(e)}static get REGEXES(){return t}static getIPv4RegexWithCIDR(){const e=t.ipv4.length;return`${t.ipv4.substring(0,e-1)}(\\/?)(\\b([0-9]|[12][0-9]|3[0-2])?\\b)$`}static getIPv6RegexWithCIDR(){const e=t.ipv6.length;return`${t.ipv6.substring(0,e-1)}(\\/?)\\b([0-9]|[1-9][0-9]|1[01][0-9]|12[0-8])?\\b$`}static async resolveDNS(e="ntop.org"){try{const t=await fetch(`${http_prefix}/lua/rest/v2/get/dns/resolve.lua?hostname=${e}`);return await t.json()}catch(e){console.error(`Something went wrong when resolving hostname: ${e}`)}return{rc:-1,rc_str:"FAILED_HTTP_REQUEST"}}static initDataPatterns(){$("input[data-pattern]").each((function(){const e=$(this).data("pattern");if(!e)return void console.warn("An empty data-pattern on an input was found!",this);const a=e.split("|").map((e=>t[e].toString())).join("|");$(this).attr("pattern",a),$(this).removeAttr("data-pattern")}))}static is_good_ipv4(e){return new RegExp(t.ipv4).test(e)}static is_good_ipv6(e){return new RegExp(t.ipv6).test(e)}static is_mac_address(e){return new RegExp(t.macAddress).test(e)}static isNumeric(e){return/^\d+$/.test(e)}static is_network_mask(e,t){var l,n=e.split("/"),s=null;if(2!=n.length){if(!t)return null;l=e}else{if(l=n[0],!a.isNumeric(n[1]))return null;if((s=parseInt(n[1]))<0)return null}if(a.is_good_ipv4(l)){if(null===s)s=32;else if(s>32)return null;return{type:"ipv4",address:l,mask:s}}if(a.is_good_ipv6(n[0])){if(null===s)s=128;else if(s>128)return!1;return{type:"ipv6",address:l,mask:s}}return null}static fbits(t){const a=["bps","Kbps","Mbps","Gbps","Tbps"];if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 bps";var l=Math.log(t)/Math.log(1e3),n=parseInt(Math.floor(l));if(n<0||isNaN(n))n=0;else if(n>=a.length)return"> "+a[a.length-1];if(n<=1)return Math.round(t/Math.pow(1e3,n)*100)/100+" "+a[n];var s=parseFloat(t/Math.pow(1e3,n)).toFixed(2);return s%1==0&&(s=Math.round(s)),s+" "+a[n]}static export_rate(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 exps/s";var l=a.scaleValue(t,["exp/s","Kexp/s"],1e3);return Math.round(100*l[0])/100+" "+l[1]}static exports_format(t){if(void 0===t)return"-";var l=i18n_ext.exports.toLowerCase(),n=[l,"K "+l];if(0==t)return"0";if(t>0&&t<e)return"< 0.005 exps/s";var s=a.scaleValue(t,n,1e3);return Math.round(100*s[0])/100+" "+s[1]}static fbits_from_bytes(e){return void 0===e?"-":a.fbits(8*e)}static fpackets(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 pps";var l=a.scaleValue(t,["pps","Kpps","Mpps","Gpps","Tpps"],1e3);return Math.round(100*l[0])/100+" "+l[1]}static fpoints(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 pt/s";var l=a.scaleValue(t,["pt/s","Kpt/s","Mpt/s","Gpt/s","Tpt/s"],1e3);return Math.round(100*l[0])/100+" "+l[1]}static fflows(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 fps";var l=a.scaleValue(t,["fps","Kfps","Mfps","Gfps","Tfps"],1e3);return Math.round(100*l[0])/100+" "+l[1]}static fmsgs(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 mps";var l=a.scaleValue(t,["msg/s","Kmsg/s","Msg/s","Gmsg/s","Tmsg/s"],1e3);return Math.round(100*l[0])/100+" "+l[1]}static fmillis(e){if(void 0===e)return"-";const t=a.scaleValue(e,["ms"],1e3);return Math.round(100*t[0])/100+" "+t[1]}static fnone(e){return void 0===e?"-":Math.round(100*e)/100}static falerts(e){return void 0===e?"-":Math.round(100*e)/100+" alerts/s"}static fint(e){return void 0===e?"-":Math.round(e).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")}static ffloat(e){return void 0===e?"-":(Math.round(100*e)/100).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")}static fpercent(e){return void 0===e?"-":Math.round(100*e)/100+" %"}static percentage(e,t){if(t>0){var a=Math.round(1e4*e/t);if(a>0)return" [ "+a/100+" % ] "}return""}static fdate(e){return new Date(1e3*e)}static capitaliseFirstLetter(e){return e.charAt(0).toUpperCase()+e.slice(1)}static get_trend(e,t){return void 0===e||void 0===t||e==t?'<i class="fas fa-minus"></i>':e>t?'<i class="fas fa-arrow-up"></i>':'<i class="fas fa-arrow-down"></i>'}static abbreviateString(e,t){return e?e.length<t?e:e.substring(0,t)+"...":""}static toFixed2(e){return e?e.toFixed(2):""}static bytesToSize(e){if(void 0===e)return"-";var t=1024,a=1048576,l=1073741824,n=1099511627776;return e>=0&&e<t?0!=e?parseFloat(e.toFixed(2))+" Bytes":parseFloat(e)+" Bytes":e>=t&&e<a?parseFloat((e/t).toFixed(2))+" KB":e>=a&&e<l?parseFloat((e/a).toFixed(2))+" MB":e>=l&&e<n?parseFloat((e/l).toFixed(2))+" GB":e>=n?parseFloat((e/n).toFixed(2))+" TB":parseFloat(e.toFixed(2))+" Bytes"}static drawTrend(e,t,a){return e==t?'<i class="fas fa-minus"></i>':e>t?'<i class="fas fa-arrow-up"'+a+"></i>":'<i class="fas fa-arrow-down"></i>'}static toggleAllTabs(e){!0===e?$("#historical-tabs-container").find("li").removeClass("disabled").find("a").attr("data-toggle","tab"):$("#historical-tabs-container").find("li").addClass("disabled").find("a").removeAttr("data-toggle")}static disableAllDropdownsAndTabs(){$("select").each((function(){$(this).prop("disabled",!0)})),a.toggleAllTabs(!1)}static enableAllDropdownsAndTabs(){$("select").each((function(){$(this).prop("disabled",!1)})),a.toggleAllTabs(!0)}static capitalize(e){return e&&e[0].toUpperCase()+e.slice(1)}static addCommas(e){for(var t=(e+="").split("."),a=t[0],l=t.length>1?"."+t[1]:"",n=/(\d+)(\d{3})/;n.test(a);)a=a.replace(n,"$1,$2");return a+l}static scaleValue(e,t,a,l){if(0==e)return[0,t[0]];let n=l?10*l:10;var s=parseInt(Math.floor(Math.log(e)/Math.log(a)));return s<0||isNaN(s)?s=0:s>=t.length&&(s=t.length-1),[Math.round(e/Math.pow(a,s)*n)/n,t[s]]}static formatValue(t,l){if(0==t)return"0";if(t>0&&t<e)return"< "+e;null==l&&(l=0);var n=a.scaleValue(t,["","K","M","G","T"],1e3,l);return n[0]+n[1]}static formatPackets(e){return a.addCommas(e.toFixed(0))+" Pkts"}static bytesToVolume(t){if(0==t)return"0 Bytes";if(t>0&&t<e)return"< 0.005 Bytes";var l=a.scaleValue(t,["Bytes","KB","MB","GB","TB"],1024);return parseFloat(l[0])+" "+l[1]}static bytesToVolumeAndLabel(e){if(0==e)return"0 Bytes";var t=parseInt(Math.floor(Math.log(e)/Math.log(1024)));return[(e/Math.pow(1024,t)).toFixed(2),["Bytes","KB","MB","GB","TB"][t]]}static bitsToSize(t,l){l=l||1e3;if(0==t)return"0 bps";if(t>0&&t<e)return"< 0.005 bps";var n=a.scaleValue(t,["bps","Kbps","Mbps","Gbps","Tbps"],l);return n[0].toFixed(2)+" "+n[1]}static bitsToSize_no_comma(t,l){l=l||1e3;if(0==t)return"0 bps";if(t>0&&t<e)return"< 0.005 bps";var n=a.scaleValue(t,["bps","Kbps","Mbps","Gbps","Tbps"],l);return n[0]+" "+n[1]}static secondsToTime(e){if(e<1)return"< 1 sec";let t=Math.floor(e/86400),a=Math.floor(e/3600-24*t),l=Math.floor(e/60-1440*t-60*a),n=e%60,s="",o=[];if(t>0){let e=Math.floor(t/365);e>0&&(t%=365,s=e+" year",e>1&&(s+="s"),o.push(s),s=""),s=t+" day",t>1&&(s+="s"),o.push(s),s=""}return a>0&&(a<10&&(s="0"),s+=a+":"),l<10&&(s+="0"),s+=l+":",n<10&&(s+="0"),s+=n,o.push(s),o.join(", ")}static msecToTime(e){return e>=1e3?a.secondsToTime(e/1e3):(Math.round(1e3*e)/1e3).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")+" ms"}static epoch2Seen(e){var t=new Date(1e3*e),l=Math.floor((new Date).getTime()/1e3-e);return t.format("dd/MM/yyyy hh:mm:ss")+" ["+a.secondsToTime(l)+" ago]"}static graphGetXAxisTicksFormat(e){return e<=86400?"%H:%M:%S":e<=172800?"%b %e, %H:%M:%S":"%b %e"}static paramsExtend(e,t){return $.extend({},e,t)}static paramsToForm(e,t){for(var a in e=$(e),t){if(t.hasOwnProperty(a))$('<input type="hidden" name="'+a+'" value="'+t[a]+'">').appendTo(e)}return e}static paramsPairsEncode(e){var t=0,a={};for(var l in e)a["key_"+t]=l,a["val_"+t]=e[l],t+=1;return a}static hostkey2hostInfo(e){return(e=(e=(e=e.replace(/____/g,":")).replace(/___/g,"/")).replace(/__/g,".")).split("@")}static handle_tab_state(e,t){$("a",e).click((function(e){e.preventDefault()})),$(" > li > a",e).on("shown.bs.tab",(function(e){var t=$(e.target).attr("href").substr(1);history.replaceState?history.replaceState(null,null,"#"+t):window.location.hash=t}));var a=window.location.hash;a||(a="#"+t),$('a[href="'+a+'"]',e).tab("show")}static _add_find_host_link(e,t,a){$("<input>").attr({type:"hidden",id:t,name:t,value:a}).appendTo(e)}static makeFindHostBeforeSubmitCallback(e){return function(t,l){return l.context&&"historical"==l.context?(t.attr("action",e+"/lua/pro/db_search.lua"),"ip"==l.type?a._add_find_host_link(t,"ip",l.ip):"mac"==l.type?a._add_find_host_link(t,"mac",l.mac):"community_id"==l.type?a._add_find_host_link(t,"community_id",l.community_id):"ja3_client"==l.type?a._add_find_host_link(t,"ja3_client",l.ja3_client):"ja3_server"==l.type?a._add_find_host_link(t,"ja3_server",l.ja3_server):a._add_find_host_link(t,"name",l.hostname?l.hostname:l.name)):"mac"==l.type?t.attr("action",e+"/lua/mac_details.lua"):"network"==l.type?(t.attr("action",e+"/lua/hosts_stats.lua"),a._add_find_host_link(t,"network",l.network)):"snmp"==l.type?(t.attr("action",e+"/lua/pro/enterprise/snmp_interface_details.lua"),a._add_find_host_link(t,"snmp_port_idx",l.snmp_port_idx)):"snmp_device"==l.type?t.attr("action",e+"/lua/pro/enterprise/snmp_device_details.lua"):"asn"==l.type?(t.attr("action",e+"/lua/hosts_stats.lua"),a._add_find_host_link(t,"asn",l.asn)):(t.attr("action",e+"/lua/host_details.lua"),a._add_find_host_link(t,"mode","restore")),!0}}static tstampToDateString(e,t,a){a=a||0;var l=parseInt(e.html())+a,n=d3.time.format(t)(new Date(1e3*l));return e.html(n).removeClass("hidden"),n}static noHtml(e){return e.replace(/<[^>]+>/g,"")}static cleanCustomHostUrl(e){return e.replace(/^http:\/\//gi,"").replace(/^https:\/\//gi,"").replace(/^www\./gi,"").replace(/[^0-9a-zA-Z\.:\/_-]/gi,"")}static parseQuery(e){for(var t={},a=("?"===e[0]?e.substr(1):e).split("&"),l=0;l<a.length;l++){var n=a[l].split("=");t[decodeURIComponent(n[0])]=decodeURIComponent(n[1]||"")}return t}static getHistoryParameters(e){var t=a.parseQuery(window.location.search),l=$.extend(t,e),n="?"+$.param(l,!0);return[location.protocol,"//",location.host,location.pathname].join("")+n}static check_status_code(e,t,a){const l=200!=e;if(l&&null!=a){let l=i18n_ext.request_failed_message;e&&t&&(l+=`: ${e} - ${t}`),a.text(l).show()}else l&&null==a&&alert(`${i18n_ext.request_failed_message}: ${e} - ${t}`);return l}static importModalHelper(e){if(!e.loadConfigXHR)throw"importModalHelper:: Missing 'loadConfigXHR' param";$("input#import-input").on("change",(function(){$("#btn-confirm-import").removeAttr("disabled")})),$("#import-modal").on("hidden.bs.modal",(function(){$("#import-input").val(""),$("#import-error").hide().removeClass("text-warning").addClass("invalid-feedback"),$("#btn-confirm-import").attr("disabled","disabled")})),$("#import-modal").on("submit","form",(function(t){t.preventDefault();const a=$("#btn-confirm-import");a.attr("disabled","");const l=$("#import-input")[0].files[0];if(!l)return $("#import-error").text(`${i18n_ext.no_file}`).show(),void a.removeAttr("disabled");const n=new FileReader;n.readAsText(l,"UTF-8"),n.onload=function(){let t=null;try{t=JSON.parse(n.result)}catch(e){}if(!t)return $("#import-error").text(i18n_ext.rest_consts[responseJSON.rc_str]||"Not Implemented Yet").show(),void a.removeAttr("disabled");e.loadConfigXHR(n.result).done(((t,a,l)=>{if(t.rc<0)return void $("#import-error").text(t.rc_str).show();e.successCallback&&e.successCallback(t);const n="all"==$("input[name='configuration']:checked").val()?i18n("manage_configurations.messages.import_all_success"):i18n("manage_configurations.messages.import_success");ToastUtils.showToast({id:"import-configuration-alert",level:"success",title:i18n("success"),body:n,delay:2e3}),$("#import-modal").modal("hide")})).fail((({responseJSON:t})=>{e.failureCallback&&e.failureCallback(t),t&&t.rc>0||(-28==t.rc&&$("#import-error").removeClass("invalid-feedback").addClass("text-warning"),$("#import-error").text(i18n_ext.rest_consts[t.rc_str]||i18n_ext.FAILED_HTTP_REQUEST).show())})).always((()=>{a.removeAttr("disabled")}))}}))}static serializeFormArray(e){const t={};return e.forEach((e=>{e.name.includes("[]")||("string"==typeof e.value&&(e.value=e.value.trim()),t[e.name]=e.value)})),t}static cleanForm(e){$(e).find("input,select,textarea").each((function(e,t){$(this).removeClass("is-valid").removeClass("is-invalid")})),$(e)[0].reset()}static fetchWithTimeout(e,t={},a=5e3){const l={...t,signal:(new AbortController).signal};return fetch(e,l).then((e=>{if(!e.ok)throw new Error(`${e.status}: ${e.statusText}`);return e})).catch((e=>{if("AbortError"===e.name)throw new Error("Response timed out")}))}static setPref(e,t,a,l){if(null==e)return void console.warn("An action key must be defined to set a preference!");const n=()=>{},s=$.post(`${http_prefix}/lua/update_prefs.lua`,{action:e,csrf:t});s.done(a||n),s.fail(l||n)}static arrayToListString(e,t){return null==e?"":e.length>t?e.slice(0,t).join(", ")+` ${i18n_ext.and_x_more.replace("$num",e.length-t)}`:e.slice(0,t).join(", ")}static buildURL(e,t={},a=!1,l={}){const n=new URL(e,window.location);for(const[e,a]of Object.entries(t))(a||0===a)&&n.searchParams.set(e,a);if(a){const e=new URL(window.location.href);for(const[t,a]of Object.entries(l))a&&e.searchParams.set(t,a);n.searchParams.set("referer",e.toString())}return n.toString()}static getEditPoolLink(e,t){const a=new URL(e,window.location);return a.searchParams.set("pool_id",t),a.toString()}static getPoolLink(e,t=0){return`${http_prefix}/lua/rest/v2/get/${e}/pools.lua?pool=${t}`}static async getPool(e,t=0){if(null===e)throw"A pool type must be defined!";try{const l=await fetch(a.getPoolLink(e,t)),n=await l.json();return n.rc<0?[!1,{}]:[!0,n.rsp[0]]}catch(e){return[!1,{}]}}static saveElementScale(e,t={width:0,height:0}){const l=a.generateScaleElementKey(e);localStorage.setItem(l,JSON.stringify(t))}static generateScaleElementKey(e){let t;const a=location.pathname,l=e.attr("id");if(""!==l)t=l;else{t=e.attr("class")}return`${t}-${a}-scale`}static loadElementScale(e){const t=a.generateScaleElementKey(e),l=localStorage.getItem(t);if(null!=l)return JSON.parse(l)}static fillFieldIfValid(e,t){void 0===t?e.val(""):e.val(t)}static copyToClipboard(e,t){const a=document.createElement("textarea");a.value=e,a.setAttribute("readonly",""),a.style.position="absolute",a.style.left="-9999px",document.body.appendChild(a),a.select(),document.execCommand("copy"),document.body.removeChild(a),$(t).attr("title","Copied!").tooltip("dispose").tooltip().tooltip("show"),$(t).removeAttr("data-bs-original-title"),$(t).attr("title",e)}static stripTags(e){let t=document.createElement("div");return t.innerHTML=e,t.textContent||t.innerText||""}static shortenLabel(e,t,a){let l=e;if(e.length>t+5)if(a){let n=e.lastIndexOf(a);const s=e.slice(n);t>n&&(t=n),l=e.slice(0,t)+"... "+s}else l=e.slice(0,t)+"...";return l}static sortAlphabetically(e,t){const a=e.label?.toUpperCase(),l=t.label?.toUpperCase();return a<l?-1:a>l?1:0}static formatNameValue(e,t,a){let l=e;return e!=t&&(a&&"number"==typeof a&&(l=this.shortenLabel(l,a,".")),l=`${l} [${t}]`),l}static removeVlan(e){let t=e;const a=t.lastIndexOf("@");if(-1!=a){0==t.slice(a+1)&&(t=t.slice(0,a))}return t}static formatGenericObj(e,t){let a=e.label?e.label:e.value;return e.value,a}static formatCountry(e,t){let a=e.value;return`${e.label?e.label:e.value} <img src="/dist/images/blank.gif" class="flag flag-${a.toLowerCase()}">`}static formatHost(e,t,l){let n="";if(!e)return n;let s=e.ip;t.vlan_id&&t.vlan_id.value&&(s=s+"@"+t.vlan_id.value),n=e.label?e.label:e.value,t.vlan_id&&t.vlan_id.label&&(n+=`@${t.vlan_id.label}`);n=`<a href="${a.buildURL(`${http_prefix}/lua/host_details.lua`,{host:s})}">${n}</a>`;let o=l?t.cli_country:t.srv_country;return!o&&t.country&&(o=t.country),o&&o.value&&(n+=` <img src="${http_prefix}/dist/images/blank.gif" class="flag flag-${o.value.toLowerCase()}" title="${o.title}"></a>`),n}static formatNetwork(e,t){let l="";if(!e)return l;let n=e.value;l=e.label?e.label:e.value,t.vlan_id&&t.vlan_id.label&&(l+=`@${t.vlan_id.label}`);return l=`<a href="${a.buildURL(`${http_prefix}/lua/hosts_stats.lua`,{network:n})}">${l}</a>`,l}static convertIPAddress(e){var t,a,l,n,s,o,i;if(!e)return 0;if(l=2==(s=(e=e.replace(/<[\s\S]*?>/g,"")).split(":")).length?s[0].split("."):e.split("."),n=e.split(":"),o="",i="",4==l.length)for(t=0;t<l.length;t++)1==(a=l[t]).length?o+="00"+a:2==a.length?o+="0"+a:o+=a;else if(n.length>0){var r=0;for(t=0;t<n.length;t++)t>0&&(i+=":"),0===(a=n[t]).length?r+=0:1==a.length?(i+="000"+a,r+=4):2==a.length?(i+="00"+a,r+=4):3==a.length?(i+="0"+a,r+=4):(i+=a,r+=4);n=i.split(":");var c=0;for(t=0;t<n.length;t++)if(0===(a=n[t]).length&&0===c)for(var u=0;u<32-r;u++)o+="0",c=1;else o+=a}return o}static formatASN(e,t){let l="";if(!e)return l;let n=e.value;l=e.label?e.label:e.value;return l=`<a href="${a.buildURL(`${http_prefix}/lua/hosts_stats.lua`,{asn:n})}">${l}</a>`,l}static createProgressBar(e){return`<div class="d-flex flex-row align-items-center">\n              <div class="col-9 progress">\n                <div class="progress-bar bg-warning" aria-valuenow="${e}" aria-valuemin="0" aria-valuemax="100" style="width: ${e}%;">\n                </div>\n              </div>\n              <div class="col"> ${e} %</div>\n            </div>`}static createBreakdown(e,t,a,l){return`<div class="d-flex flex-row">\n              <div class="col-12 progress">\n                <div class="progress-bar bg-warning" aria-valuenow="${e}" aria-valuemin="0" aria-valuemax="100" style="width: ${e}%;">${a}</div>\n                <div class="progress-bar bg-success" aria-valuenow="${t}" aria-valuemin="0" aria-valuemax="100" style="width: ${t}%;">${l}</div>\n              </div>\n            </div>`}static getNumTableRows(){return[10,20,50,100]}static formatApexChartLabelFromXandName({series:e,seriesIndex:t,dataPointIndex:a,w:l}){const n=l.config.series[t].data[a],s=n.name,o=n.y;return`\n    <div class='apexcharts-theme-light apexcharts-active' id='test'>\n        <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n            ${n.meta.label}\n        </div>\n        <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n            <div class='apexcharts-tooltip-text text-left'>\n                <b>${l.config.xaxis.title.text}</b>: ${s}\n            </div>\n            <div class='apexcharts-tooltip-text text-left'>\n                <b>${l.config.yaxis[0].title.text}</b>: ${o}\n            </div>\n        </div>\n    </div>\n    `}static apexChartJumpToAlerts(e,t,a){const{seriesIndex:l,dataPointIndex:n}=a,{series:s}=a.config;if(-1===l)return;if(void 0===s)return;const o=s[l],i=o.base_url||s[0].base_url,r=o.start_url||s[0].start_url;if(null!=i&&null!=r){const e=o.data[n].meta.url_query;location.href=`${i}?${r}${e}`}}static apexChartJumpToHostDetails(e,t,a){const{seriesIndex:l,dataPointIndex:n}=a,{series:s}=a.config;if(-1===l)return;if(void 0===s)return;const o=s[l],i=o.base_url||s[0].base_url;if(null!=i){const e=`${i}?${o.data[n].meta.url_query}`;ntopng_url_manager.go_to_url(e)}}static formatApexChartLabelFromXandY({series:e,seriesIndex:t,dataPointIndex:a,w:l}){const n=l.config.series[t].data[a],s=n.x,o=n.y;return`\n      <div class='apexcharts-theme-light apexcharts-active' id='test'>\n          <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n              ${n.meta.label}\n          </div>\n          <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n              <div class='apexcharts-tooltip-text text-left'>\n                  <b>${l.config.xaxis.title.text}</b>: ${s}\n              </div>\n              <div class='apexcharts-tooltip-text text-left'>\n                  <b>${l.config.yaxis[0].title.text}</b>: ${o}\n              </div>\n          </div>\n      </div>\n    `}}function l(e,t){var a=$("thead th",$(e)).filter((function(){return"none"!=$(this).css("display")})).length;$("tbody",$(e)).html('<tr class="emptyRow"><td colspan="'+a+'"><i>'+t+"</i></td></tr>")}function n(e){return $("tr:not(.emptyRow)",$(e)).length-1}function s(e){return 0==n(e)}function o(e){return $("table",$("#dt-top-details",$(e)).parent())}function i(e,t,a,l,n,s=!0,o=""){0==$("td:nth-child("+e+")",$(this)).find("div.d-flex").length&&($("td:nth-child("+e+")",$(this)).empty(),$("td:nth-child("+e+")",$(this)).append($("<div class='d-flex justify-content-center'></div>"))),$("td:nth-child("+e+")",$(this)).find(".d-flex").append('<a href="'+n+`" title='${o}' data-placement="bottom" class="btn btn-sm mx-1 ${a} ${s?"":"disabled"}" onclick="`+l+'" role="button">'+t+"</a>")}function r(e,t){return e.data("datatable").options.columns.findIndex((function(e){return e.field===t}))}$((function(){a.initDataPatterns()}));var c=Object.freeze({__proto__:null,draw_processes_graph:function(e,t,a){var l,n={},s=e+"/lua/get_processes_graph_data.lua?host="+a;d3.json(s,(function(s,o){if(s)return console.warn(s);var i;(l=o).forEach((function(t){i=-1==t.source_pid?e+"/lua/host_details.lua?host="+t.source:e+"/lua/process_details.lua?pid="+t.source_pid+"&pid_name="+t.source_name+"&host="+a+"&page=flows",t.source=n[t.source]||(n[t.source]={name:t.source_name,num:t.source,link:i,type:t.source_type,pid:t.source_pid}),i=-1==t.target_pid?e+"/lua/host_details.lua?host="+t.target:e+"/lua/process_details.lua?pid="+t.target_pid+"&pid_name="+t.target_name+"&host="+a+"&page=flows",t.target=n[t.target]||(n[t.target]={name:t.target_name,num:t.target,link:i,type:t.target_type,pid:t.target_pid})}));var r=d3.scale.category10();r.proc="red",r.host="lightsteelblue";var c=d3.layout.force().nodes(d3.values(n)).links(l).size([960,500]).linkDistance(120).charge(-400).on("tick",(function(){d.attr("d",f),_.attr("transform",v),p.attr("transform",v)})).start(),u=d3.select("#"+t).append("svg").attr("id","ebpf_graph").attr("width",960).attr("height",500);u.append("defs").selectAll("marker").data(["proc2proc","proc2host","host2proc","host2host"]).enter().append("marker").attr("id",(function(e){return e})).attr("viewBox","0 -5 20 20").attr("refX",15).attr("refY",-1.5).attr("markerWidth",6).attr("markerHeight",6).attr("orient","auto").append("path").attr("d","M0,-5L10,0L0,5");var d=u.append("g").selectAll("path").data(c.links()).enter().append("path").attr("class",(function(e){return"link "+e.type})).attr("marker-end",(function(e){return"url(#"+e.type+")"})),_=u.append("g").selectAll("circle").data(c.nodes()).enter().append("circle").attr("class","ebpf_circle").attr("r",15).style("fill",(function(e){return r[e.type]})).call(c.drag).on("dblclick",(function(e){window.location.href=e.link})),p=u.append("g").selectAll("text").data(c.nodes()).enter().append("text").attr("class","ebpf_text").attr("x",12).attr("y","0.5rem").style("font-size","1rem").text((function(e){return e.pid>=0?e.name+" [pid: "+e.pid+"]":e.name}));function f(e){var t=e.target.x-e.source.x,a=e.target.y-e.source.y,l=Math.sqrt(t*t+a*a);return"M"+e.source.x+","+e.source.y+"A"+l+","+l+" 0 0,1 "+e.target.x+","+e.target.y}function v(e){return"translate("+e.x+","+e.y+")"}}))}});class u{constructor(e,t){if(void 0===t.csrf)throw new Error("ModalHandler::Missing CSRF token!");this.element=e,this.dialog=$(e).closest(".modal"),this.options=t,this.csrf=t.csrf,this.dontDisableSubmit=t.dontDisableSubmit,this.observer=new MutationObserver((e=>{this.bindFormValidation(),this.toggleFormSubmission(),this.initDataPatterns()})),this.observer.observe(this.element[0],{childList:!0,subtree:!0}),this.initialState=null,this.currentState=null,this.firstCloseAttempt=!1,this.isSubmitting=!1;if(0==$(this.element).find("[type='submit']").length)throw new Error("ModalHandler::The submit button was not found inside the form!");this.toggleFormSubmission()}initDataPatterns(){NtopUtils.initDataPatterns()}createFormSnapshot(){const e={inputs:{},hidden:[]};return $(this.element).find('textarea,select,input[type!="radio"]').each((function(){const t=$(this).prop("nodeName").toLowerCase(),a=$(this).attr("name");e.inputs[`${t}[name='${a}']`]=$(this).val()})),$(this.element).find("[style='display: none;'], span.invalid-feedback").each((function(){e.hidden.push($(this))})),e}compareFormSnaphsot(e,t){if(null==e||null==t)return!0;for(let[a,l]of Object.entries(e.inputs))if(t.inputs[a]!=l)return!1;return!0}delegateModalClosing(){const e=this;$(this.dialog).find("button.cancel").off("click").click((function(){e.firstCloseAttempt=!1,$(e.element)[0].reportValidity(),$(e.dialog).find(".confirm-closing").fadeOut(100,(function(){$(e.dialog).find("button.btn-close").fadeIn(100)}))})),$(this.dialog).off("hide.bs.modal").on("hide.bs.modal",(function(t){e.isSubmitting?t.preventDefault():e.compareFormSnaphsot(e.currentState,e.initialState)||e.firstCloseAttempt||(t.preventDefault(),e.firstCloseAttempt=!0,$(e.dialog).find("button.btn-close").fadeOut(100,(function(){$(e.dialog).find(".confirm-closing").fadeIn(100)})))})),$(this.dialog).off("hidden.bs.modal").on("hidden.bs.modal",(function(t){for(const[t,a]of Object.entries(e.initialState.inputs))$(e.dialog).find(t).val(a),$(e.dialog).find(t).removeClass("is-invalid");e.initialState.hidden.forEach((e=>{e.hide()})),e.element.find("[type='submit']").attr("disabled","disabled"),e.currentState=null,e.firstCloseAttempt=!1,$(e.dialog).find(".confirm-closing").fadeOut(100,(function(){$(e.dialog).find("button.btn-close").fadeIn(100)})),e.cleanForm()}))}fillFormModal(){return this.options.loadFormData()}invokeModalInit(e={}){const t=this;this.delegateModalClosing(),this.data=e||this.fillFormModal(),this.options.onModalInit(this.data,this),$(this.element).parents(".modal").on("show.bs.modal",(function(){t.options.onModalShow()})),this.initialState=this.createFormSnapshot(),this.currentState=null,this.delegateResetButton()}delegateSubmit(){this.bindFormValidation();const e=this;this.submitHandler=function(t){e.options.isSyncRequest||(t.preventDefault(),t.stopPropagation(),e.makeRequest())},$(this.element).on("submit",this.submitHandler)}bindFormValidation(){const e=this;$(this.element).find("input,select,textarea").each((async function(t,a){const l=$(this);let n=-1;const s=async e=>e.data.resolveDNS&&l.val().match(NtopUtils.REGEXES.domainName)?await(async()=>{const e=l.parent().find(".spinner-border");l.attr("readonly",!0),e.show();const t=await NtopUtils.resolveDNS($(a).val());return l.removeAttr("readonly"),e.hide(),t.rc<0?(a.setCustomValidity(t.rc_str),[!1,t.rc_str_hr]):(a.setCustomValidity(""),[!0,"Success"])})():e.data.cannotBeEmpty&&e.isInputEmpty?(a.setCustomValidity("Please fill the input."),[!1,e.data.validationEmptyMessage||i18n_ext.missing_field]):a.validity.patternMismatch?(a.setCustomValidity("Pattern mismatch."),[!1,e.data.validationMessage||i18n_ext.invalid_field]):a.validity.rangeOverflow?(a.setCustomValidity("Value exceed the maximum value."),[!1,e.data.rangeOverflowMessage||i18n_ext.invalid_field]):a.validity.rangeUnderflow?(a.setCustomValidity("Value is under the minimum value."),[!1,e.data.rangeUnderflowMessage||i18n_ext.invalid_field]):(a.setCustomValidity(""),[!0,"Success"]),o=async()=>{const e={data:{validationMessage:l.data("validationMessage"),validationEmptyMessage:l.data("validationEmptyMessage"),cannotBeEmpty:"required"===l.attr("required")||1==l.data("validationNotEmpty"),resolveDNS:l.data("validationResolvedns"),rangeOverflowMessage:l.data("validationRangeOverflowMessage"),rangeUnderflowMessage:l.data("validationUnderflowOverflowMessage")},isInputEmpty:"string"==typeof l.val()&&""==l.val().trim()},[t,a]=await s(e);let n=l.parent().find(".invalid-feedback");0==n.length&&(n=$("<span class='invalid-feedback'></span>")),t?(l.removeClass("is-invalid"),n.fadeOut(500,(function(){$(this).remove()}))):(l.addClass("is-invalid"),l.parent().append(n),n.text(a))};$(this).off("input").on("input",(function(t){e.currentState=e.createFormSnapshot(),-1!=n&&clearTimeout(n),l.attr("formnovalidate")||(n=setTimeout((()=>{o(),e.toggleFormSubmission()}),300),e.firstCloseAttempt=!1)})),$(this).off("invalid").on("invalid",(function(e){e.preventDefault(),l.attr("formnovalidate")||o()}))}))}getModalID(){return $(this.element).parents(".modal").attr("id")}toggleFormSubmission(){let e=!0;$(this.element).find("input:not(:disabled),select:not(:disabled),textarea:not(:disabled)").each((function(t,a){e&=a.validity.valid})),e?$(this.element).find("[type='submit'],[type='test']").removeAttr("disabled"):$(this.element).find("[type='submit'],[type='test']").attr("disabled","disabled")}cleanForm(){$(this.element).find("input,textarea,select").each((function(e,t){$(this).removeClass("is-valid").removeClass("is-invalid")})),$(this.element)[0].reset()}makeRequest(){const e=$(this.element).find(".invalid-feedback"),t=$(this.element).find("[type='submit']");let a=this.options.beforeSumbit(this.data);a.csrf=this.csrf,a=$.extend(a,this.options.submitOptions),t.attr("disabled","disabled");const l=this;if(this.options.endpoint){let n;n="post"==l.options.method?$.ajax({url:this.options.endpoint,data:JSON.stringify(a),method:l.options.method,dataType:"json",contentType:"application/json; charset=utf-8"}):$.get(this.options.endpoint,a),this.isSubmitting=!0,n.done((function(t,n){l.isSubmitting=!1,l.currentState=null,l.options.resetAfterSubmit&&l.cleanForm(),e.hide();l.options.onSubmitSuccess(t,a,l)&&(l.dialog.modal?l.dialog.modal("hide"):(l.dialog[0].hidden=!0,$(".modal-backdrop.fade.show").remove())),$(l.element).off("submit",l.submitHandler),l.delegateSubmit()})).fail((function(t,n,s){l.isSubmitting=!1;const o=t.responseJSON;void 0!==o.rc&&o.rc<0&&e.html(o.rc_str_hr).show(),l.options.onSubmitError(o,a,n,s)})).always((function(e){t.removeAttr("disabled")}))}else{l.currentState=null,e.hide();l.options.onSubmitSuccess({},a,l)&&(l.dialog.modal?l.dialog.modal("hide"):l.dialog[0].hidden=!0),$(l.element).off("submit",l.submitHandler),l.delegateSubmit(),t.removeAttr("disabled")}}delegateResetButton(){const e=this,t=$(this.element).find("[type='reset']");if(0==t.length)return;const a=NtopUtils.serializeFormArray($(this.element).serializeArray());t.click((function(t){t.preventDefault(),$(e.element).find("input:visible,select").each((function(e,t){const l=$(t).attr("name");$(t).val(a[l]).removeClass("is-invalid").removeClass("is-valid")}))}))}}const d={no_formatting:{id:"no_formatting",um:null,step:null,decimal:null,scale_values:null},number:{id:"number",um:["","K","M","G","T"],step:1e3,decimal:null,scale_values:null},full_number:{id:"number",um:["","K","M","G","T"],step:1e3,decimal:null,scale_values:null,thousands_sep:","},bytes:{id:"bytes",um:["B","KB","MB","GB","TB","PB","EB"],step:1024,decimal:2,scale_values:null,absolute_value:!0},bps:{id:"bps",um:["bps","Kbps","Mbps","Gbps","Tbps","Pbps"],step:1e3,decimal:2,scale_values:8,absolute_value:!0},bps_no_scale:{id:"bps_no_scale",um:["bps","Kbps","Mbps","Gbps","Tbps","Pbps"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},speed:{id:"speed",um:["bit","Kbit","Mbit","Gbit","Tbit","Pbit"],step:1e3,decimal:0,scale_values:null,absolute_value:!0},flows:{id:"flows",um:["flows","Kflows","Mflows","Gflows"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},fps:{id:"fps",um:["flows/s","Kflows/s","Mflows/s","Gflows/s"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},alerts:{id:"alerts",um:["alerts","Kalerts","Malerts","Galerts"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},alertps:{id:"alertps",um:["alerts/s","Kalerts/s","Malerts/s","Galerts/s"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},hits:{id:"hits",um:["hits","Khits","Mhits","Ghits"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},hitss:{id:"hitss",um:["hits/s","Khits/s","Mhits/s","Ghits/s"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},packets:{id:"packets",um:["packets","Kpackets","Mpackets","Gpackets","Tpackets"],step:1e3,decimal:0,scale_values:null,absolute_value:!0},pps:{id:"pps",um:["pps","Kpps","Mpps","Gpps","Tpps"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},ms:{id:"ms",um:["ms","s"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},percentage:{id:"percentage",um:["%"],step:101,decimal:1,scale_values:null,max_value:100,absolute_value:!0}};function _(e){let t=d[e],a=3;null!=t.decimal&&t.decimal>0&&(a=6);let l=0;return null!=t.um&&(l=Math.max(...t.um.map((e=>e.length)))),a+1+l}function p(e,t){let a=d[e];if(e==d.no_formatting.id||null==t)return null;null!=a.scale_values&&(t*=a.scale_values);let l=a.step;t<0&&(t*=-1);let n=0,s=a.um;for(;t>=l&&n<s.length;)t/=l,n+=1;return n}function f(e,t,a){let l=d[e];if(null==l)return null;t|=l.absolute_value;return function(n){if(null==n)return"";if(e==d.no_formatting.id)return n;null!=l.scale_values&&(n*=l.scale_values);let s=n<0;if(s&&(n*=-1),null!=l.max_value&&n>l.max_value&&(n=l.max_value),l.thousands_sep){for(var o=(n+="").split("."),i=o[0],r=o.length>1?"."+o[1]:"",c=/(\d+)(\d{3})/;c.test(i);)i=i.replace(c,"$1,$2");return i+r}let u=l.step,_=l.decimal,p=l.um,f=0;for(;n>=u&&f<p.length&&!a||null!=a&&f<a;)n/=u,f+=1;return null!=_&&_>0?(n*=Math.pow(10,_),n=Math.round(n),n=(n/=Math.pow(10,_)).toFixed(_)):n=Math.round(n),s&&!t&&(n*=-1),`${`${n}`} ${`${p[f]}`}`}}const v={types:d,getUnitMeasureLen:_,getFormatter:f,getScaleFactorIndex:p};window.NtopUtils=a,window.datatableInitRefreshRows=function(e,t,a,l){var n=e.data("datatable"),s=n.resultset.data,o=e.data("dt-rr-timer"),i=e.data("dt-rr-ajax");l=l||{},o&&(clearInterval(o),e.removeData("dt-rr-timer")),i&&(i.abort(),e.removeData("dt-rr-ajax"));var c=[],u={};for(var d in s){var _=s[d];if(_[t]){var p=_[t];u[p]=d,c.push(p)}}var f={custom_hosts:c.join(",")},v=n.options.url,m=!0,h=function(a){if("string"==typeof a&&(a=JSON.parse(a)),a){for(var s in a.data){var o=a.data[s],i=o[t];if(i&&u[i]){var c=u[i],d=n.rows[c],_=$("td",d);for(var p in o){var f=_[r(e,p)],v=$(f),h=v.data("dt-rr-cur-val")||$(f).html(),g=l[p],b=o[p],y="";g&&(parseFloat(b)!=b&&console.warn("Invalid number: "+b),m||(y=" "+NtopUtils.drawTrend(parseFloat(b),parseFloat(h))),v.data("dt-rr-cur-val",b),b=g(b)),$(f).html(0!=b?b+y:"")}}}m=!1,e.removeData("dt-rr-ajax")}else console.error("Bad JSON result")};e.data("dt-rr-timer",setInterval((function(){e.data("dt-rr-ajax")||e.data("dt-rr-ajax",$.ajax({type:"GET",url:v,data:f,cache:!1,success:h}))}),a)),h(n.resultset)},window.datatableForEachRow=function(e,t){$("tr:not(:first)",e).each((function(e){var a;if("function"==typeof t)t.bind(this)(e);else for(a=0;a<t.length;a++)t[a].bind(this)(e)}))},window.datatableIsEmpty=s,window.datatableRemoveEmptyRow=function(e){$("tbody tr.emptyRow",$(e)).remove()},window.datatableAddEmptyRow=l,window.datatableGetNumDisplayedItems=n,window.datatableGetByForm=o,window.datatableUndoAddRow=function(e,t,a,n){a&&$(a).removeAttr("disabled").removeClass("disabled");var i=$(e).closest("form");$(e).remove(),aysUpdateForm(i);var r=o(i);s(r)&&l(r,t),n&&window[n](e)},window.datatableAddButtonCallback=i,window.datatableAddDeleteButtonCallback=function(e,t,a){i.bind(this)(e,a,"btn-danger",t,"javascript:void(0)",!0,"Delete")},window.datatableAddActionButtonCallback=function(e,t,a,l=!0,n=""){i.bind(this)(e,a,"btn-info",t,"javascript:void(0)",l,n)},window.datatableAddFilterButtonCallback=function(e,t,a,l="",n=!0){i.bind(this)(e,a,"btn-warning",t,"javascript:void(0)",n,l)},window.datatableAddLinkButtonCallback=function(e,t,a,l=""){i.bind(this)(e,a,"btn-info","",t,!0,l)},window.datatableMakeSelectUnique=function(e,t,a){function l(e,t,a,l){$("[id^="+t+"]").each((function(){var t=a($(this));t[0]!=e[0]&&l(t)}))}function n(e,t){if(t)e.removeAttr("disabled");else{var a=e.closest("select"),l=a.val()==e.val();if(e.attr("disabled","disabled"),l){var n=a.find("option:not([disabled])").first().val();a.val(n),a.attr("data-old-val",n)}}}function s(e,t,a){var s=$(this).attr("data-old-val")||"",o=$(this).val()||"",i=[];s==o&&(s=""),l($(this),e,t,(function(e){n(e.find("option[value='"+s+"']"),!0),n(e.find("option[value='"+o+"']"),!1),i.push(e)})),a($(this),s,o,i,n),$(this).attr("data-old-val",o)}var o=(a=NtopUtils.paramsExtend({on_change:$.noop,selector_fn:function(e){return e.find("select").first()}},a)).selector_fn(e);o.on("change",(function(){s.bind(this)(t,a.selector_fn,a.on_change)})),o.on("remove",(function(){$(this).val("").trigger("change")})),function(e,t,a){e.val(""),l(e,t,a,(function(e){e.trigger("change")}));var n=e.find("option:not([disabled])").first().val();e.val(n),e.trigger("change")}(o,t,a.selector_fn)},window.datatableIsLastPage=function(e){var t=$("#dt-bottom-details .pagination li:nth-last-child(3)",$(e));return!(1==t.length&&0==t.hasClass("active"))},window.datatableGetColumn=function(e,t,a){var l=e.data("datatable").resultset.data.filter((function(e){return e[t]===a}));if(l)return l[0]},window.datatableGetColumnIndex=r,window.$.fn.modalHandler=function(e){if(1!=this.length)throw new Error("Only a form element can by initialized!");const t=$.extend({csrf:"",endpoint:"",resetAfterSubmit:!0,dontDisableSubmit:!1,isSyncRequest:!1,method:"get",loadFormData:function(){},onModalInit:function(e){},onModalShow:function(){},beforeSumbit:function(){return{}},onSubmitSuccess:function(e){},onSubmitError:function(e,t,a){},onModalReset:function(e){}},e),a=new u(this,t);return a.delegateSubmit(),a},window.ebpfUtils=c,window.ntopFormatterUtils=v;var m={};window.makeUniqueValidator=function(e){return function(t){var a=t.val(),l=0;return!a||(e(t).each((function(){$(this).val()==a&&(l+=1)})),1==l)}},window.memberValueValidator=function(e){var t=e.val();return""===t||(NtopUtils.is_mac_address(t)||NtopUtils.is_network_mask(t,!0))},window.makePasswordPatternValidator=function(e){return function(t){return!t.val()||$(t).val().match(e)}},window.passwordMatchValidator=function(e){var t=$(e).closest("form").find("[data-passwordmatch]").not(e);return!e.val()||!t.val()||t.val()===e.val()},window.poolnameValidator=function(e){return!e.val()||$(e).val().match(/^[a-z0-9_]*$/)},window.passwordMatchRecheck=function(e){var t=$(e).find("[data-passwordmatch]"),a=0;t.each((function(){""!=$(this).val()&&a++})),a==t.length&&t.trigger("input")},window.hostOrMacValidator=function(e){var t=e.val();return""===t||(NtopUtils.is_mac_address(t)||NtopUtils.is_good_ipv4(t)||NtopUtils.is_good_ipv6(t))},window.ipAddressValidator=function(e){var t=e.val();return""===t||(NtopUtils.is_good_ipv4(t)||NtopUtils.is_good_ipv6(t))},window.bpfValidator=function(e,t=!1){var a=e.val();if(""===a.trim())return!0;var l=e.attr("name");m[l]||(m[l]={ajax_obj:null,valid:!0,timer:null,submit_remind:!1,last_val:null});var n=m[l],s=function(){n.timer=null;var e=function(e){n.ajax_obj=null,n.valid=e,n.last_val=a};n.last_val!==a?(n.ajax_obj&&n.ajax_obj.abort(),n.ajax_obj=$.ajax({type:"GET",url:`${http_prefix}/lua/pro/rest/v2/check/filter.lua`,async:!t,data:{query:a},error:function(){e(n.valid)},success:function(t){var a=!!t.response;e(a)}})):e(n.valid)};return t?s():n.last_val===a||(n.timer&&(clearTimeout(n.timer),n.submit_remind=!1),n.timer=setTimeout(s,250)),n.valid};const h=function(){let e={},t=[];return{ready:function(a){e[a]=!0,t.filter((e=>e.component_name==a)).forEach((e=>e.resolve())),t=t.filter((e=>e.component_name!=a))},on_ready:function(a){return new Promise(((l,n)=>{e[a]?l():t.push({resolve:l,component_name:a,completed:!1})}))}}}(),b=function(){let e={};return{is_array:function(e){return Array.isArray(e)},is_object:function(e){return"object"==typeof e&&!this.is_array(e)&&null!==e},clone:function(e){if(null==e)return null;if(this.is_object(e))return $.extend(!0,{},e);if(Array.isArray(e)){let t=[];for(let a=0;a<e.length;a+=1){let l=this.clone(e[a]);t.push(l)}return t}return e},object_to_array:function(e){if(null==e)return[];let t=[];for(let a in e)t.push(e[a]);return t},get_utc_seconds:function(e){return null==e&&(e=Date.now()),Number.parseInt(e/1e3)},get_timeframes_dict:function(){const e=60;let t=new Date,a=new Date,l=new Date,n=new Date;return{min:e,"5_min":300,"10_min":600,"30_min":1800,hour:3600,"2_hours":7200,"6_hours":21600,"12_hours":43200,day:this.get_utc_seconds(Date.now()-t.setDate(t.getDate()-1)),week:this.get_utc_seconds(Date.now()-a.setDate(a.getDate()-7)),month:this.get_utc_seconds(Date.now()-l.setMonth(l.getMonth()-1)),year:this.get_utc_seconds(Date.now()-n.setMonth(n.getMonth()-12))}},get_timeframe_from_timeframe_id:function(e){let t=this.get_timeframes_dict();if(null==t[e])throw`Wrong timeframe_id passed ${e}, valid intervals are: ${Object.keys(t).join(", ")}`;return t[e]},round_time_by_timeframe_id:function(e,t){return e-e%this.get_timeframe_from_timeframe_id(t)},set_default_time_interval:function(e="30_min",t){let a={epoch_begin:x.get_url_entry("epoch_begin"),epoch_end:x.get_url_entry("epoch_end")};const l=this.get_utc_seconds(Date.now());let n=this.get_timeframe_from_timeframe_id(e);return a.epoch_begin=l-n,a.epoch_end=l,null!=t&&(a.epoch_begin=this.round_time_by_timeframe_id(a.epoch_begin,t),a.epoch_end=this.round_time_by_timeframe_id(a.epoch_end,t)),x.set_key_to_url("epoch_begin",a.epoch_begin),x.set_key_to_url("epoch_end",a.epoch_end),a},check_and_set_default_time_interval:function(e="30_min",t,a=!1,l){let n=this.get_url_epoch_interval();return null==n.epoch_begin||null==n.epoch_end||null!=t&&1==t(n)?(n=this.set_default_time_interval(e,l),n):1==a?n:null},get_url_epoch_interval:function(){return{epoch_begin:x.get_url_entry("epoch_begin"),epoch_end:x.get_url_entry("epoch_end")}},from_utc_s_to_server_date:function(e){let t=1e3*e,a=new Date(t).getTimezoneOffset(),l=moment.tz(t,ntop_zoneinfo)._offset;return new Date(t+1e3*(l+a)*60)},get_date_format:async function(e,t,a){const l={csrf:t};let n=`${a}/lua/rest/v2/get/timeseries/date_format.lua`;const s=NtopUtils.buildURL(n,{is_range_picker:e});return await b.http_request(s,l)},from_utc_to_server_date_format:function(e,t){return null==t&&(t="DD/MMM/YYYY HH:mm:ss"),moment.tz(e,ntop_zoneinfo).format(t)},copy_object_keys:function(e,t,a=!1){if(null!=e)for(let l in e)null!=e[l]&&"__proto__"!==l&&"constructor"!==l&&(1==a&&this.is_object(e[l])&&this.is_object(t[l])?this.copy_object_keys(e[l],t[l],a):t[l]=e[l])},get_cve_details_url:(e,t)=>"cve"==t?`https://nvd.nist.gov/vuln/detail/${e}`:"openvas"==t?`https://vulners.com/openvas/OPENVAS:${e}`:void 0,set_http_globals_headers(t){e=t},http_post_request:async function(e,t,a,l){if(null==t.csrf)throw`NULL csrf in ${e} POST request.`;return this.http_request(e,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)},a,l)},http_request:async function(t,a,l,n){try{null==a&&(a={}),null==a.headers&&(a.headers={}),null!=a.headers&&null!=e&&(a.headers={...a.headers,...e});let l=await fetch(t,a);if(!1===l.ok)return console.error(`http_request ${t}\n ok == false`),console.error(l),null;let s=await l.json();return!0===n?s:s.rsp}catch(e){if(console.error(e),console.error("URL: "+t),1==l)throw e;return null}},download_URI:function(e,t){var a=document.createElement("a");a.download=t,a.href=e,document.body.appendChild(a),a.click(),document.body.removeChild(a)},get_random_string:function(){return Math.random().toString(16).substr(2,8)},string_hash_code:function(e){let t,a,l=0;if(0===e.length)return l;for(t=0;t<e.length;t++)a=e.charCodeAt(t),l=(l<<5)-l+a,l|=0;return l},mod:function(e,t){return(e%=t)<0&&(e+=t),e}}}(),y=function(){let e={},t={};const a=e=>b.clone(e),l=function(e,l){for(let n in t){if(n==l)continue;(0,t[n])(a(e))}};return{get_status:function(t){return 1==t?e:a(e)},update_subscribers:function(){const e=this.get_status();l(e)},on_status_change:function(e,l,n){if(t[e]=l,1==n){let e=this.get_status();l(a(e))}},replace_status:function(t,a){!function(t){e=t}(t),l(t,a)},add_obj_to_status:function(e,t){let a=this.get_status();b.copy_object_keys(e,a),this.replace_status(a,t)},add_value_to_status:function(e,t,a){let l=this.get_status();l[e]=t,this.replace_status(l,a)}}}(),w={},x=function(){let e={};return b.copy_object_keys(w,e),{get_url_params:function(){return window.location.search.substring(1)},get_url_search_params:function(e){null==e&&(e=this.get_url_params());return new URLSearchParams(e)},get_url_entries:function(e){return this.get_url_search_params(e).entries()},get_url_entry:function(e,t){let a=this.get_url_entries(t);for(const[t,l]of a)if(t==e)return l;return null},get_url_object:function(e){let t=this.get_url_entries(e),a={};for(const[e,l]of t)a[e]=l;return a},open_new_window:function(e){null==e&&(e=window.location),window.open(e)},reload_url:function(){window.location.reload()},go_to_url:function(e){window.history.pushState({},"",window.location),window.location.replace(e)},replace_url:function(e){window.history.replaceState({},null,`?${e}`)},replace_url_and_reload:function(e){this.replace_url(e),this.reload_url()},serialize_param:function(e,t){return null==t&&(t=""),`${e}=${encodeURIComponent(t)}`},set_custom_key_serializer:function(t,a){e[t]=a},obj_to_url_params:function(t){let a=[];const l=this.serialize_param;for(let n in t){let s=e[n];null==s&&(s=l);let o=s(n,t[n]);a.push(o)}return a.join("&")},delete_params:function(e){let t=this.get_url_search_params();e.forEach((e=>{t.delete(e)})),this.replace_url(t.toString())},delete_key_from_url:function(e){let t=this.get_url_search_params();t.delete(e),this.replace_url(t.toString())},set_key_to_url:function(e,t){null==t&&(t="");let a=this.get_url_search_params();a.set(e,t),this.replace_url(a.toString())},add_obj_to_url:function(e,t){let a=this.obj_to_url_params(e),l=this.get_url_search_params(t),n=this.get_url_entries(a);for(const[e,t]of n)l.set(e,t);let s=l.toString();if(null!=t)return s;this.replace_url(s)}}}(),k={EPOCH_CHANGE:"epoch_change",FILTERS_CHANGE:"filters_change"},S={EPOCH_CHANGE:function(e,t){return e.epoch_begin!=t.epoch_begin||e.epoch_end!=t.epoch_end},FILTERS_CHANGE:function(e,t){return null==e.filters&&null!=t.filters||null!=e.filters&&null==t.filters||null!=e.filters&&null!=t.filters&&(e.filters.length!=t.filters.length||e.filters.some((e=>null==t.filters.find((t=>t.id==e.id)))))}},N={SHOW_MODAL_FILTERS:"show_modal_filters",MODAL_FILTERS_APPLY:"modal_filters_apply",SHOW_GLOBAL_ALERT_INFO:"show_global_alert_info",VIS_DATA_LOADED:"vis_data_loaded",CHANGE_PAGE_TITLE:"change_page_title",DATATABLE_LOADED:"datatable_loaded",GET_INTERFACE_FATA:"get_interface_data",COMPONENT_EPOCH_INTERVAL_CHANGE:"component_epoch_interval_change"},C=function(){const e="events_manager";let t={},a={};const l=e=>b.clone(e),n=function(e,t,a){for(let n in e){if(n==a)continue;(0,e[n])(l(t))}},s=(e,t)=>`${e}_${t}`;y.on_status_change(e,(function(e){for(let l in k){if(1==(0,S[l])(e,t)){let t=a[l];n(t,e)}}t=e}),!0);const o=function(e,t,l,o){null!=o&&(e=s(e,o));let i=a[e];null!=i&&n(i,t,l)},i=function(e,t,n,o,i){if(1==i&&(t=s(t,e)),null==a[t]&&(a[t]={}),1==o){let e=y.get_status();n(l(e))}a[t][e]=n};return{emit_custom_event:function(e,t,a){o(e,t,null,a)},on_custom_event:function(e,t,a,l){i(e,t,a,null,l)},emit_event:function(t,a,l){o(t,a,l),y.add_obj_to_status(a,e)},on_event_change:function(e,t,a,l){i(e,t,a,l)}}}();function A(e,t,a,l,n){this.name=e,this.update_url=t,this.url_params=a,this.units=l,this.refresh=n;let s=[],o="",i=[],r=[],c=[];var u=[],d=[],_=[],p=function(e,t){var a=500,l=325,n=52,s=14,o=250,i=116;$(e).hasClass("pie-chart-small")&&(l=250,n=(i=(a=330)/5+15)/2);var r=d3.layout.pie().value((function(e){return 0==e.value&&(e.value=1),e.value})),c=d3.scale.category20(),u=d3.svg.arc().startAngle((function(e){return e.startAngle})).endAngle((function(e){return e.endAngle})).innerRadius(n).outerRadius(i),d=d3.select(e).append("svg:svg").attr("width",a).attr("height",l).attr("viewBox","0 0 "+a+" "+l).attr("preserveAspectRatio","xMidYMid"),_=d.append("svg:g").attr("class","arc").attr("transform","translate("+a/2+","+l/2+")"),p=d.append("svg:g").attr("class","label_group").attr("transform","translate("+a/2+","+l/2+")"),f=d.append("svg:g").attr("class","center_group").attr("transform","translate("+a/2+","+l/2+")");_.append("svg:circle").attr("fill","#EFEFEF").attr("r",i),f.append("svg:circle").attr("fill","white").attr("r",n);var v=null,m=null;t&&(f.append("svg:text").attr("class","label").attr("dy",-15).attr("text-anchor","middle").text("TOTAL"),m=f.append("svg:text").attr("class","total").attr("dy",7).attr("text-anchor","middle").text("Waiting..."),v=f.append("svg:text").attr("class","units").attr("dy",21).attr("text-anchor","middle").text(t));return[_,r,m,v,c,o,u,p,f,i,s]}(e,l),f=p[0],v=p[1],m=p[2],h=p[4],g=p[5],b=p[6],y=p[7],w=p[9],x=p[10];function k(e,t){return e.label<t.label?-1:e.label>t.label?1:0}function S(e,t){var a,l;d[t]?(a=d[t].startAngle,l=d[t].endAngle):!d[t]&&d[t-1]?(a=d[t-1].endAngle,l=d[t-1].endAngle):!d[t-1]&&d.length>0?(a=d[d.length-1].endAngle,l=d[d.length-1].endAngle):(a=0,l=0);t=d3.interpolate({startAngle:a,endAngle:l},{startAngle:e.startAngle,endAngle:e.endAngle});return function(e){var a=t(e);return b(a)}}function N(e,t){s0=2*Math.PI,e0=2*Math.PI;t=d3.interpolate({startAngle:e.startAngle,endAngle:e.endAngle},{startAngle:s0,endAngle:e0});return function(e){var a=t(e);return b(a)}}function C(e,t){var a;a=d[t]?(d[t].startAngle+d[t].endAngle-Math.PI)/2:!d[t]&&d[t-1]?(d[t-1].startAngle+d[t-1].endAngle-Math.PI)/2:!d[t-1]&&d.length>0?(d[d.length-1].startAngle+d[d.length-1].endAngle-Math.PI)/2:0;var l=(e.startAngle+e.endAngle-Math.PI)/2,n=d3.interpolateNumber(a,l);return function(e){var t=n(e);return"translate("+Math.cos(t)*(w+x)+","+Math.sin(t)*(w+x)+")"}}this.update=function(){$.ajax({type:"GET",url:this.update_url,data:this.url_params,success:function(e){let t;"object"==typeof e?t=e:"string"==typeof e&&(t=jQuery.parseJSON(e)),t&&function(e){e.rsp&&(e=e.rsp);e.sort(k),s=e,d=_,u=v(s);var t=0;function a(e,a,l){return e.name=s[a].label,e.value=s[a].value,e.url=s[a].url,t+=e.value,e.value>0}(_=u.filter(a)).length>0&&d.length>0&&(f.selectAll("circle").remove(),m&&m.text((function(){return(t/1024).toFixed(1)})),o=f.selectAll("path").data(_),o.enter().append("svg:path").attr("stroke","white").attr("stroke-width",.5).attr("fill",(function(e,t){return h(t)})).transition().duration(g).attrTween("d",S),o.transition().duration(g).attrTween("d",S),o.exit().transition().duration(g).attrTween("d",N).remove(),i=y.selectAll("line").data(_),i.enter().append("svg:line").attr("x1",0).attr("x2",0).attr("y1",-w-3).attr("y2",-w-8).attr("stroke","gray").attr("transform",(function(e){return"rotate("+(e.startAngle+e.endAngle)/2*(180/Math.PI)+")"})),i.transition().duration(g).attr("transform",(function(e){return"rotate("+(e.startAngle+e.endAngle)/2*(180/Math.PI)+")"})),i.exit().remove(),r=y.selectAll("text.value").data(_).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?5:-7})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){return(e.value/t*100).toFixed(1)+"%"})),r.enter().append("svg:text").attr("class","value").attr("transform",(function(e){return"translate("+Math.cos((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+","+Math.sin((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+")"})).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?5:-7})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){if(t<=1)return"";return(e.value/t*100).toFixed(1)+"%"})),r.transition().duration(g).attrTween("transform",C),r.exit().remove(),c=y.selectAll("text.units").data(_).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?17:5})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){return e.name})).on("click",(function(e){e.url&&(window.location.href=e.url)})),c.enter().append("svg:text").attr("class","units").attr("transform",(function(e){return"translate("+Math.cos((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+","+Math.sin((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+")"})).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?17:5})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){return e.name})).on("click",(function(e){e.url&&(window.location.href=e.url)})),c.transition().duration(g).attrTween("transform",C),c.exit().remove())}(t)}})},this.update(),this.update()}window.ntopng_events=k,window.ntopng_events_manager=C,window.ntopng_status_manager=y,window.ntopng_utility=b,window.ntopng_url_manager=x,window.ntopng_sync=h,window.ntopng_custom_events=N,A.prototype.setUrlParams=function(e){this.url_params=e,this.forceUpdate()},A.prototype.forceUpdate=function(e){this.stopInterval(),this.update(),this.startInterval()},A.prototype.setInterval=function(e){this.pieInterval=e},A.prototype.stopInterval=function(){clearInterval(this.pieInterval)},A.prototype.startInterval=function(){this.pieInterval=setInterval(this.update(),this.refresh)};const E={},T={db_analyze:function(e,t,a){const{dataPointIndex:l}=a,{filter:n}=a.w.config;let s;if(a.w.config.filtering_labels&&(s=a.w.config.filtering_labels[l]),0==n.length||void 0===s)return;let o=ntopng_status_manager.get_status().filters;o.push({id:n[0],operator:"eq",value:s}),ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:o})},none:function(e,t,a){},standard:function(e,t,a){const{seriesIndex:l,dataPointIndex:n}=a,{series:s}=a.w.config;if(-1===l)return;if(void 0===s)return;const o=s[l];if(void 0!==o.base_url){const e=o.start_url||"",t=o.data[n].meta.url_query;location.href=`${o.base_url}?${e}${t}`}}},P={format_bytes:function(e,{config:t,seriesIndex:a,dataPointIndex:l}){return NtopUtils.bytesToSize(e)},format_pkts:function(e,{config:t,seriesIndex:a,dataPointIndex:l}){return NtopUtils.formatPackets(e)},format_value:function(e,{config:t,seriesIndex:a,dataPointIndex:l}){return NtopUtils.formatValue(e)},format_multiple_date:function(e,{config:t,seriesIndex:a,dataPointIndex:l}){return new Date(e[0])+" - "+new Date(e[1])},format_label_from_xy:function({series:e,seriesIndex:t,dataPointIndex:a,w:l}){const n=l.config.series[t].data[a],s=n.x,o=n.y;return`\n            <div class='apexcharts-theme-light apexcharts-active' id='test'>\n                <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n                    ${n.meta.label}\n                </div>\n                <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${l.config.xaxis.title.text}</b>: ${s}\n                    </div>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${l.config.yaxis[0].title.text}</b>: ${o}\n                    </div>\n                </div>\n            </div>`},format_label_from_xname:function({series:e,seriesIndex:t,dataPointIndex:a,w:l}){const n=l.config.series[t].data[a],s=n.name,o=n.y;return`\n            <div class='apexcharts-theme-light apexcharts-active' id='test'>\n                <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n                    ${n.meta.label}\n                </div>\n                <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${l.config.xaxis.title.text}</b>: ${s}\n                    </div>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${l.config.yaxis[0].title.text}</b>: ${o}\n                    </div>\n                </div>\n            </div>`}},U=P.format_value;class I{static registerWidget(e){if(null===e)throw new Error("The passed widget reference is null!");if(e.name in E)throw new Error(`The widget ${e.name} is already defined!`);E[e.name]=e}static getWidgetByName(e){if(e in E)return E[e];throw new Error(`Widget ${e} not found!`)}}class O{constructor(e,t={},a=0,l={}){this._fetchedData=[],this.name=e,this._updateTime=a,this._datasource=t,this._additionalParams=l}async init(){I.registerWidget(this),this._fetchedData=await this._fetchData(),this._updateTime>0&&setInterval((async()=>{await this.update(this._datasource.params)}),this._updateTime)}async destroy(){}async destroyAndUpdate(e={}){await this.destroy(),await this.update(e)}async updateByUrl(e){const t=new URL(`${location.origin}${this._datasource.name}`);let a=ntopng_url_manager.get_url_entries(e);for(const[e,l]of a)t.searchParams.set(e,l);this._datasource.endpoint=t.pathname+t.search,this._fetchedData=await this._fetchData()}async update(e={}){const t=new URL(`${location.origin}${this._datasource.name}`);for(const[a,l]of Object.entries(e))t.searchParams.set(a,l);this._datasource.endpoint=t.pathname+t.search,this._fetchedData=await this._fetchData()}async _fetchData(){const e=await fetch(`${http_prefix}${this._datasource.endpoint}`);return await e.json()}}const j=(e,t)=>{let a=t.position().top;const l=e.height(),n=$(window).height();if(l+a>=n){const s=n-a;s<=150?a=a-l+t.outerHeight():e.css({"max-height":s-20,"overflow-y":"auto"})}e.css("top",`${a}px`)};$(window).on("scroll",(function(){$(this).scrollTop()>=32?$("#n-navbar").addClass("scrolled bg-light"):$("#n-navbar").removeClass("scrolled bg-light")})),$((()=>{const e=()=>{if(0==$(".sidebar-close-layer").length){const e=$("<div class='sidebar-close-layer' style='display:none'></div>");e.on("click",(function(){$("#n-sidebar").removeClass("active"),e.fadeOut((function(){$(this).remove()}))})),$("#wrapper").append(e),e.fadeIn()}else $(".sidebar-close-layer").fadeOut((function(){$(this).remove()}));$("#n-sidebar").toggleClass("active")};$("#n-sidebar a.submenu").bind({mouseenter:function(){let e=$(this).parent().find("div[id$='submenu']");j(e,$(this)),e.show()},mouseleave:function(){$(this).parent().find("div[id$='submenu']").hide()}}),$("div[id$='submenu']").bind({mouseenter:function(){$(this).show()},mouseleave:function(){$(this).hide()}}),$("button[data-bs-toggle='sidebar']").on("click",(function(){e()}))})),$(window).on("resize",(function(){const e=$("#n-sidebar").find("div.show[id$='submenu']");if(e.length>0){const t=e.parent().find("a[data-bs-toggle='collapse']");j(e,t)}}));const M=function(){const e={series:[],chart:{height:"100%",width:"100%",toolbar:{tools:{zoomout:!1,download:!1,zoomin:!1,zoom:" ",selection:!1,pan:!1,reset:!1}},events:{}},xaxis:{tooltip:{enabled:!1}},yaxis:{labels:{show:!0,style:{colors:[],fontSize:"11px",fontWeight:400,cssClass:""}},title:{rotate:-90,offsetY:0,offsetX:0,style:{fontSize:"11px",fontWeight:900,cssClass:""}},tooltip:{enabled:!1}},grid:{show:!1},legend:{show:!0}},t=function(e){e.xaxis.labels.formatter=function(e,{series:t,seriesIndex:a,dataPointIndex:l,w:n}){return b.from_utc_to_server_date_format(e)}},l=function(){let t=b.clone(e);return b.copy_object_keys({chart:{stacked:!0,type:"bar",zoom:{enabled:!0,type:"x"}},tooltip:{x:{format:"dd MMM yyyy HH:mm:ss"},y:{}},xaxis:{labels:{show:!0,datetimeUTC:!1,formatter:null},axisTicks:{show:!1},type:"datetime",axisBorder:{show:!0},convertedCatToNumeric:!1},dataLabels:{enabled:!1},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"}},t,!0),t}(),n=function(){let t=b.clone(e);return b.copy_object_keys({chart:{stacked:!0,type:"area",zoom:{enabled:!0,type:"x"}},tooltip:{x:{format:"dd MMM yyyy HH:mm:ss"},y:{}},xaxis:{labels:{show:!0,datetimeUTC:!1,formatter:null},axisTicks:{show:!1},type:"datetime",axisBorder:{show:!0},convertedCatToNumeric:!1},dataLabels:{enabled:!1},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"}},t,!0),t}(),s=function(){let t=b.clone(e),l={chart:{stacked:!0,type:"polarArea",height:400},yaxis:{show:!0,labels:{formatter:a.bytesToSize}},dataLabels:{enabled:!0,formatter:function(e,t){return e?`${e.toFixed(1)}%`:"0%"}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},tooltip:{y:{formatter:a.bytesToSize}}};return b.copy_object_keys(l,t,!0),t}(),o=function(){let t=b.clone(e),l={chart:{stacked:!0,type:"donut",height:300},yaxis:{show:!0,labels:{formatter:a.bytesToSize}},dataLabels:{enabled:!0,formatter:function(e,t){return e?`${e.toFixed(1)}%`:"0%"}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},tooltip:{y:{formatter:v.getFormatter("number")}},noData:{text:"No Data",style:{color:void 0,fontSize:"24px",fontFamily:void 0}}};return b.copy_object_keys(l,t,!0),t}(),i=function(){let t=b.clone(e),l={chart:{stacked:!0,type:"radialBar",height:300},yaxis:{show:!0},dataLabels:{enabled:!0,formatter:function(e,t){return e}},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},tooltip:{y:{formatter:a.bytesToSize}},noData:{text:"No Data",style:{color:void 0,fontSize:"24px",fontFamily:void 0}},plotOptions:{radialBar:{offsetY:0,startAngle:0,endAngle:270,hollow:{margin:5,size:"30%",background:"transparent",image:void 0},dataLabels:{name:{show:!1},value:{show:!1}}}},legend:{show:!0,floating:!0,fontSize:"16px",position:"left",offsetX:160,offsetY:15,labels:{useSeriesColors:!0},markers:{size:0},formatter:function(e,t){return e+":  "+t.w.globals.series[t.seriesIndex]},itemMargin:{vertical:3}},responsive:[{breakpoint:480,options:{legend:{show:!1}}}]};return b.copy_object_keys(l,t,!0),t}(),r=function(){let t=b.clone(e),l={chart:{stacked:!0,type:"pie",height:400},yaxis:{show:!0,labels:{formatter:a.bytesToSize}},dataLabels:{enabled:!0,formatter:function(e,t){return e?`${e.toFixed(1)}%`:"0%"}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},tooltip:{y:{formatter:a.bytesToSize}}};return b.copy_object_keys(l,t,!0),t}(),c=function(){let t=b.clone(e);return b.copy_object_keys({chart:{type:"line",zoom:{enabled:!0,type:"x"}},tooltip:{shared:!0,x:{format:"dd MMM yyyy HH:mm:ss"},y:{}},xaxis:{labels:{show:!1,datetimeUTC:!1,formatter:null},axisTicks:{show:!0},type:"datetime",axisBorder:{show:!0},convertedCatToNumeric:!1},stroke:{show:!0,width:2,curve:"smooth"},grid:{show:!0},dataLabels:{enabled:!1}},t,!0),t}(),u=function({series:e,seriesIndex:t,dataPointIndex:a,w:l}){const n=l.config.series[t].data[a],s=n.name,o=n.y;return`\n          <div class='apexcharts-theme-light apexcharts-active' id='test'>\n              <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n                  ${n.meta.label}\n              </div>\n              <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n                  <div class='apexcharts-tooltip-text text-left'>\n                      <b>${l.config.xaxis.title.text}</b>: ${s}\n                  </div>\n                  <div class='apexcharts-tooltip-text text-left'>\n                      <b>${l.config.yaxis[0].title.text}</b>: ${o}\n                  </div>\n              </div>\n          </div>`},d=function(){let t=b.clone(e),a={chart:{width:"100%",height:"100%",stacked:!0,type:"bubble",zoom:{autoScaleYaxis:!0}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},events:{dataPointSelection:"standard"},grid:{padding:{left:6}},xaxis:{type:"numeric",labels:{}},yaxis:{type:"numeric",forceNiceScale:!0,labels:{}},dataLabels:{enabled:!1},tooltip:{custom:u}};return b.copy_object_keys(a,t,!0),t}();return{typeChart:{TS_LINE:"TS_LINE",TS_STACKED:"TS_STACKED",TS_COLUMN:"TS_COLUMN",PIE:"PIE",DONUT:"DONUT",RADIALBAR:"RADIALBAR",RADAR:"RADAR",BUBBLE:"BUBBLE",BASE:"BASE"},newChart:function(a){let u,_={};if(a==this.typeChart.TS_STACKED)_=b.clone(n),t(_);else if(a==this.typeChart.TS_LINE)_=b.clone(c),t(_);else if(a==this.typeChart.TS_COLUMN)_=b.clone(l),t(_);else if(a==this.typeChart.PIE)_=b.clone(r);else if(a==this.typeChart.DONUT)_=b.clone(o);else if(a==this.typeChart.RADIALBAR)_=b.clone(i);else if(a==this.typeChart.POLAR)_=b.clone(s);else if(a==this.typeChart.BUBBLE)_=b.clone(d);else{if(a!=this.typeChart.BASE)throw`ntopChartApex::newChart: chart type = ${a} unsupported`;_=b.clone(e)}const p=e=>{if("string"==typeof e?.yaxis?.labels?.formatter){const t=e.yaxis.labels.formatter;let a=v.getFormatter(t);null!=a?e.yaxis.labels.formatter=a:"formatValue"==t?e.yaxis.labels.formatter=v.getFormatter("number"):"bytesToSize"==t&&(e.yaxis.labels.formatter=v.getFormatter("bytes"))}};return{drawChart:function(e,t){p(t),b.copy_object_keys(t,_,!0),u=new ApexCharts(e,_),u.render()},to_data_uri:async function(e){if(null==u)return;return(await u.dataURI(e)).imgURI},destroyChart:function(){null!=u&&u.destroy()},updateChart:function(e){null!=u&&(p(e),u.updateOptions(e,!1,!1,!1))},updateSeries:function(e){null!=u&&u.updateSeries(e)},registerEvent:function(e,t,a=!1){_.chart.events[e]=t,1==a&&u.updateOptions(_)}}}}}(),L=function(){let e={};return{addHandler:function(t){let a=e[t.handlerId];return null==a&&(a=[],e[t.handlerId]=a),a.push((()=>{t.onClick()})),`window['_DataTableButtonsOnClick']('${t.handlerId}', '${a.length-1}')`},getHandler:function(t,a){let l=e[t];return null==l?null:l[a]},deleteHandlersById:function(t){e[t]=null}}}();window._DataTableButtonsOnClick=function(e,t){let a=L.getHandler(e,t);null!=a&&a()};class F{static getStdDatatableConfig(e=[],t="<'row'<'col-sm-2 d-inline-block'l><'col-sm-10 text-end d-inline-block'<'dt-search'f>B>rtip>"){return 0==e.length&&(t="fBrtip"),{dom:t,pagingType:"full_numbers",lengthMenu:[[10,20,50,100],[10,20,50,100]],language:{search:i18n.script_search,paginate:{previous:"&lt;",next:"&gt;",first:"«",last:"»"}},saveState:!0,responsive:!0,buttons:{buttons:e,dom:{button:{className:"btn btn-link"},container:{className:"d-inline-block"}}}}}static createLinkCallback(e){let t="";return t=`onclick="${L.addHandler(e.handler)}"`,`<a href=#\n                   ${t}>\n                   ${e.text||""}\n                </a>`}static createActionButtons(e=[]){const t=[];e.forEach(((e,a)=>{let l="";if(e.handler){l=`onclick="${L.addHandler(e.handler)}"`}let n=`\n            <li>\n                <a\n                    ${e.href||e.modal?`href='${e.href||e.modal}'`:""}\n                    ${l}\n                    ${e.onclick?`onclick='${e.onclick}'`:""}\n                    ${e.modal?"data-bs-toggle='modal'":""}\n                    class='dropdown-item ${e.class?e.class:""}'\n                    ${e.hidden?"style='display: none'":""}\n                    ${e.external?"target='_about'":""}\n                    >\n                    <i class='fas ${e.icon}'></i> ${e.title||""}\n                </a>\n            </li>\n            `;t.push(n)}));return`<div class='dropdown'><button type="button" class="btn btn-sm btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false"><i class="fas fa-align-justify"></i></button>${`<ul class="dropdown-menu">${t.join("")}</ul>`}</div>`}static deleteButtonHandlers(e){L.deleteHandlersById(e)}static setAjaxConfig(e,t,a="",l="get",n={}){return e.ajax={url:t,type:l,dataSrc:a,data:function(e){return $.extend({},e,n)}},e}static extendConfig(e,t){return t.hasFilters&&(t.stateSaveCallback=function(e,t){localStorage.setItem("DataTables_"+e.sInstance,JSON.stringify(t))},t.stateLoadCallback=function(e){return JSON.parse(localStorage.getItem("DataTables_"+e.sInstance))},t.stateSaveParams=function(e,t){$("[data-filter]").each((function(){const e=$(this).find("li.active").data("filter-key");e&&(t.filters||(t.filters={}),t.filters[$(this).data("filter")]=e)}))}),$.extend({},e,t)}static secondsToHHMMSS(e){const t=e=>`${e}`.padStart(2,"0"),a=e%60,l=Math.floor(e/60)%60;return`${t(Math.floor(e/3600))}:${t(l)}:${t(a)}`}static openEditModalByQuery(e){const t=new URLSearchParams(window.location.search);if(!t.has(e.paramName))return;const a=t.get(e.paramName),l=e.datatableInstance.data().toArray().find((t=>t[e.paramName]==a));if("function"==typeof e.cancelIf&&e.cancelIf(l))return;const n=$(`#${e.modalHandler.getModalID()}`);if(void 0!==l&&(e.modalHandler.invokeModalInit(l),n.modal("show")),!t.has("referer"))return void n.on("hidden.bs.modal",(function(t){const a=new URL(window.location.href);a.searchParams.delete(e.paramName),history.replaceState({},"",a.toString())}));const s=t.get("referer");n.on("hidden.bs.modal",(function(e){window.location=s}))}static addToggleColumnsDropdown(e,t=((e,t)=>{})){if(void 0===e)throw"The $table is undefined!";const a=e.table().node().id;F._loadColumnsVisibility(e).then((function(l){let n=[-1];l.success?n=l.columns.map((e=>parseInt(e))):console.warn(l.message);const s=[],o=[],i=$(e.context[0].nTableWrapper);e.columns().every((function(t){e.column(t).visible()?s.push({index:t,name:this.header().textContent,label:this.i18n.name}):o.push(t)}));const r=$('\n                <div class="btn-group">\n                    <button type="button" class="btn btn-link dropdown-toggle" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\n                        <i class="fas fa-eye"></i>\n                    </button>\n                </div>\n            '),c=$('<div class="dropdown-menu dropdown-menu-right" style=\'width: max-content;\'><h6 class="dropdown-header">Show Columns</h6></div>'),u=$("<div class='px-4'></div>");for(let l=0;l<s.length;l++){const i=s[l];if(""==i.name)continue;const r=`toggle-${i.name.split().join("_")}`,c=-1===n.indexOf(i.index);if(!c){e.column(i.index).visible(!1)}const d=$(`<input class="form-check-input" ${c?"checked":""} type="checkbox" id="${r}">`),_=$(`\n                    <div class="form-check form-switch">\n                        <label class="form-check-label" for="${r}">\n                            ${i.name}\n                        </label>\n                    </div>\n                `);d.on("change",(function(l){$(".overlay").toggle(500);const n=e.column(i.index);n.visible(!n.visible());const s=n.visible(),r=[];e.columns().every((function(t){e.column(t).visible()||-1!==o.indexOf(t)||r.push(t)})),$.post(`${http_prefix}/lua/datatable_columns.lua`,{action:"save",table:a,columns:r.join(","),csrf:window.__CSRF_DATATABLE__}).then((function(e){e.success||console.warn(e.message)})),void 0!==t&&t(n,s)})),_.prepend(d),u.append(_)}c.on("click.bs.dropdown",(function(e){e.stopPropagation()})),r.append(c.append(u)),i.find(".dt-search").parent().append(r)}))}static async _loadColumnsVisibility(e){const t=e.table().node().id;return $.get(`${http_prefix}/lua/datatable_columns.lua?table=${t}&action=load`)}}class R{static alertSeverityAndType(e,t,a){return`${R.formatValueLabel(e,t,a)} ${R.formatValueLabel(a.alert_id,t,a)}`}static hideIfZero(e,t,l,n){let s=void 0!==e.color?e.color:"#aaa",o=void 0!==e.value?e.value:e;"display"===t&&0===parseInt(o)&&(s="#aaa");let i=`<span style='color: ${s}'>${a.fint(o)}</span>`;return void 0!==e.url&&(i=`<a href="${e.url}">${i}</a>`),i}static secondsToTime(e,t,l,n){return"display"===t?a.secondsToTime(e):e}static filterize(e,t,l,n,s,o,i,r){let c=`<a class='tag-filter' data-tag-key='${e}' title='${s||t}' data-tag-value='${t}' data-tag-label='${n||l||t}' href='javascript:void(0)'>${o||l||t}</a>`;if(null!=i)if(i){if(t){c+=` <a href='${a.buildURL(`${http_prefix}/lua/pro/enterprise/snmp_device_details.lua?host=${t}`)}'data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`}}else if(r&&t){c+=` <a href='${a.buildURL(`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${r}&snmp_port_idx=${t}`)}'data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`}return c}static formatValueLabel(e,t,a,l){if("display"!==t)return e.value;let n=e.label;return 1==l&&0==e.value&&(n=""),e.color&&(n=`<span class='font-weight-bold' style='color: ${e.color}'>${n}</span>`),n}static formatCategory(e,t,a,l){if("display"!==t)return e.value;let n=`<a class='tag-filter' data-tag-key='alert_category' data-tag-value='${e.value}' data-tag-label='${e.label}' href='javascript:void(0)'><i class="fa fas ${e.icon}" title="${e.label}"></i></a>`;return 1==l&&0==e.value&&(n=""),n}static formatScore(e,t,a,l){if("display"!==t)return e.value;let n=e.label;return 1==l&&0==e.value&&(n=""),e.color&&(n=`<span class='font-weight-bold' style='color: ${e.color}'>${n}</span>`),`<a class='tag-filter' data-tag-key='score' title='${e.label}' data-tag-value='${e.value}' data-tag-label='${e.label}' href='javascript:void(0)'>${n}</a>`}static formatMessage(e,t,a,l){if("display"!==t)return e.value;let n=e.descr;return e.shorten_descr&&(n=`<span title="${e.descr}">${e.shorten_descr}</span>`),n}static formatTraffic(e,t,l,n){if("display"!==t)return e.total_bytes;return`${a.formatPackets(e.total_packets)} / ${a.bytesToVolume(e.total_bytes)}`}static formatSubtype(e,t,a,l){if("display"!==t)return e;return R.filterize("subtype",e,e)}static filterize_2(e,t,a,l,n,s){return null==t||0==t&&(null==a||""==a)?"":`<a class='tag-filter' data-tag-key='${e}' title='${n||t}' data-tag-value='${t}' data-tag-label='${l||a||t}' href='javascript:void(0)'>${s||a||t}</a>`}static getFormatGenericField(e,t){return function(a,l,n){if("display"!==l)return a.value;if(1==t&&0==a?.value)return"";let s="";return void 0!==a.reference&&(s=a.reference),R.filterize_2(e,n[e].value,n[e].label,n[e].label,n[e].label)+" "+s}}static formatSNMPInterface(e,t,a){if("display"!==t)return e.value;let l=R.filterize("snmp_interface",`${a.ip}_${e.value}`,e.label,e.label,e.label,null,!1,a.ip);return e.color&&(l=`<span class='font-weight-bold' style='color: ${e.color}'>${l}</span>`),l}static formatSNMPIP(e,t,a,l){return"display"!==t?e:R.filterize("ip",e,e,e,e,null,!0)}static formatNetwork(e,t,a,l){return"display"!==t?e:R.filterize("network_name",e,e,e,e,null,!1)}static formatProbeIP(e,t,a,l){if("display"!==t)return e;return R.filterize("probe_ip",e.value,e.label,e.label,e.label_long)}static formatHost(e,t,a,l){if("display"!==t)return e;let n="";void 0!==e.reference&&(n=e.reference);let s,o,i="";return e.label&&e.label!=e.value?(s="name",o=e.label_long,i=R.filterize("name",e.label_long,e.label,e.label,e.label_long)):(s="ip",o=e.value,i=R.filterize("ip",e.value,e.label,e.label,e.label_long)),a.vlan_id&&""!=a.vlan_id&&"0"!=a.vlan_id&&(i=R.filterize(s,`${o}@${a.vlan_id}`,`${e.label}@${a.vlan_id}`,`${e.label}@${a.vlan_id}`,`${e.label_long}@${a.vlan_id}`)),e.country&&(i+=R.filterize("country",e.country,e.country,e.country,e.country,' <img src="'+http_prefix+'/dist/images/blank.gif" class="flag flag-'+e.country.toLowerCase()+'"></a> ')),a.role&&"attacker"==a.role.value?i=i+" "+R.filterize("role",a.role.value,'<i class="fas fa-skull" title="'+a.role.label+'"></i>',a.role.label):a.role&&"victim"==a.role.value&&(i=i+" "+R.filterize("role",a.role.value,'<i class="fas fa-sad-tear" title="'+a.role.label+'"></i>',a.role.label)),a.role_cli_srv&&"client"==a.role_cli_srv.value?i=i+" "+R.filterize("role_cli_srv",a.role_cli_srv.value,'<i class="fas fa-long-arrow-alt-right" title="'+a.role_cli_srv.label+'"></i>',a.role_cli_srv.label):a.role_cli_srv&&"server"==a.role_cli_srv.value&&(i=i+" "+R.filterize("role_cli_srv",a.role_cli_srv.value,'<i class="fas fa-long-arrow-alt-left" title="'+a.role_cli_srv.label+'"></i>',a.role_cli_srv.label)),i+" "+n}static filterizeVlan(e,t,l,n,s,o){let i=n,r=s,c=o;return e.vlan&&0!=e.vlan.value&&(i=`${n}@${e.vlan.value}`,r=`${s}@${e.vlan.label}`,c=`${o}@${e.vlan.title}`),r=a.shortenLabel(r,16,"."),R.filterize(l,i,r,r,c)}static formatFlowTuple(e,t,a,l){let n=e.active_url?`<a href="${e.active_url}"><i class="fas fa-stream"></i></a>`:"",s="";if(e.cli_ip.name){let t="";e.cli_ip.label_long&&(t=e.cli_ip.value+" ["+e.cli_ip.label_long+"]"),s=R.filterizeVlan(e,a,"cli_name",e.cli_ip.name,e.cli_ip.label,t)}else s=R.filterizeVlan(e,a,"cli_ip",e.cli_ip.value,e.cli_ip.label,e.cli_ip.label_long);let o="";e.cli_ip.country&&"nil"!==e.cli_ip.country&&(o=R.filterize("cli_country",e.cli_ip.country,e.cli_ip.country,e.cli_ip.country,e.cli_ip.country,' <img src="'+http_prefix+'/dist/images/blank.gif" class="flag flag-'+e.cli_ip.country.toLowerCase()+'"></a> '));let i=e.cli_port&&e.cli_port>0?":"+R.filterize("cli_port",e.cli_port,e.cli_port):"",r="";1==e.cli_ip.blacklisted&&(r=" <i class='fas fa-ban fa-sm' title='"+i18n("hosts_stats.blacklisted")+"'></i>");let c="";if(e.srv_ip.name){let t="";e.srv_ip.label_long&&(t=e.srv_ip.value+" ["+e.srv_ip.label_long+"]"),c=R.filterizeVlan(e,a,"srv_name",e.srv_ip.name,e.srv_ip.label,t)}else c=R.filterizeVlan(e,a,"srv_ip",e.srv_ip.value,e.srv_ip.label,e.srv_ip.label_long);let u=e.srv_port&&e.srv_port>0?":"+R.filterize("srv_port",e.srv_port,e.srv_port):"",d="";e.srv_ip.country&&"nil"!==e.srv_ip.country&&(d=R.filterize("srv_country",e.srv_ip.country,e.srv_ip.country,e.srv_ip.country,e.srv_ip.country,' <img src="'+http_prefix+'/dist/images/blank.gif" class="flag flag-'+e.srv_ip.country.toLowerCase()+'"></a> '));let _="";1==e.srv_ip.blacklisted&&(_=" <i class='fas fa-ban fa-sm' title='"+i18n("hosts_stats.blacklisted")+"'></i>");let p="",f="";return a.cli_role&&("attacker"==a.cli_role.value?p+=R.filterize("role","attacker",'<i class="fas fa-skull" title="'+a.cli_role.label+'"></i>',a.cli_role.tag_label):"victim"==a.cli_role.value&&(p+=R.filterize("role","victim",'<i class="fas fa-sad-tear" title="'+a.cli_role.label+'"></i>',a.cli_role.tag_label))),a.srv_role&&("attacker"==a.srv_role.value?f+=R.filterize("role","attacker",'<i class="fas fa-skull" title="'+a.srv_role.label+'"></i>',a.srv_role.tag_label):"victim"==a.srv_role.value&&(f+=R.filterize("role","victim",'<i class="fas fa-sad-tear" title="'+a.srv_role.label+'"></i>',a.srv_role.tag_label))),`${n} ${s}${r}${o}${i} ${p} ${e.cli_ip.reference} <i class="fas fa-exchange-alt fa-lg" aria-hidden="true"></i> ${c}${_}${d}${u} ${f} ${e.srv_ip.reference}`}static formatSubtypeValueLabel(e,t,a,l){if("display"!==t)return e.name;return R.filterize("subtype",e.value,e.name,e.fullname,e.fullname)}static formatNameDescription(e,t,a,l){if("display"!==t)return e.name;return R.filterize("alert_id",e.value,e.name,e.fullname,e.fullname)}static applyCellStyle(e,t,a,l,n){t.highlight&&$(e).css("border-left","5px solid "+t.highlight)}}function D(e,t){const a=Object.create(null),l=e.split(",");for(let e=0;e<l.length;e++)a[l[e]]=!0;return t?e=>!!a[e.toLowerCase()]:e=>!!a[e]}window.do_pie=function(e,t,a,l,n){var s=new A(e,t,a,l,n);return n&&s.setInterval(setInterval((function(){s.update()}),n)),s},window.DataTableUtils=F,window.DataTableFiltersMenu=class{constructor({tableAPI:e,filterMenuKey:t,filterTitle:a,filters:l,columnIndex:n,icon:s=null,extraAttributes:o="",id:i=null,url:r=null,urlParams:c=null,removeAllEntry:u=!1,callbackFunction:d=null}){this.rawFilters=l,this.tableAPI=e,this.filterTitle=a,this.icon=s,this.filterMenuKey=t,this.columnIndex=n,this.preventUpdate=!1,this.currentFilterSelected=void 0,this.$datatableWrapper=$(e.context[0].nTableWrapper),this.extraAttributes=o,this.id=i,this.url=r,this.removeAllEntry=u,this.callbackFunction=d}get selectedFilter(){return this.currentFilterSelected}init(){const e=this;return this.$datatableWrapper.on("init.dt",(function(){e._render(e.rawFilters)})),this.tableAPI.on("draw",(function(){e._update()})),e}_countEntries(e,t=[]){void 0===e&&console.error("DataTableFiltersMenu::_countEntries() => the passed regex is undefined!");const a=new RegExp(e);return t.filter((e=>a.test(e))).length}_createMenuEntry(e){const t=this;let a=$(`<li class='dropdown-item pointer'>${e.label} </li>`);if(t.url){if(a=$(`<li class='dropdown-item pointer'><a href=# class='p-1 standard-color'>${e.label} </li>`),1==e.currently_active){0==t.$dropdown.title.parent().find("i.fas").length&&t.$dropdown.title.parent().prepend("<i class='fas fa-filter'></i>");const l=a.html();t.$dropdown.title.html(l),t.$dropdown.container.find("li").removeClass("active"),"all"!==e.key&&a.addClass("active")}}else if(void 0!==e.regex&&(void 0===e.countable||e.countable)){const t=this.tableAPI.columns(this.columnIndex).data()[0],l=this._countEntries(e.regex,t),n=$(`<span class='counter'>(${l})</span>`);0==l&&a.hide(),a.append(n)}return a.on("click",(function(l){0==t.$dropdown.title.parent().find("i.fas").length&&t.$dropdown.title.parent().prepend("<i class='fas fa-filter'></i>");const n=a.html();if(t.$dropdown.title.html(n),t.$dropdown.container.find("li").removeClass("active"),"all"!==e.key&&a.addClass("active"),t.callbackFunction)return t.callbackFunction(t.tableAPI,e),void(e.callback&&e.callback());if(t.url){t.urlParams=window.location.search;const a=new URLSearchParams(t.urlParams);a.set(t.filterMenuKey,void 0!==e.id?e.id:""),window.history.pushState("","",window.location.pathname+"?"+a.toString()),location.reload()}else t.preventUpdate=!0,e.callback&&e.callback(),t.tableAPI.column(t.columnIndex).search(e.regex,!0,!1).draw(),t.currentFilterSelected=e})),a}_createFilters(e){const t={};for(const a of e){const e=this._createMenuEntry(a);t[a.key]={filter:a,$node:e}}return t}_render(e){if(void 0===this.columnIndex)$(`<span id="${this.id}" ${this.extraAttributes} title="${this.filterTitle}">${this.icon||this.filterTitle}</span>`).insertBefore(this.$datatableWrapper.find(".dataTables_filter").parent());else{const t=$(`<div id='${this.filterMenuKey}_dropdown' class='dropdown d-inline'></div>`),a=$("<button class='btn-link btn dropdown-toggle' data-bs-toggle=\"dropdown\" type='button'></button>"),l=$(`<span class='filter-title'>${this.filterTitle}</span>`);a.append(l),this.$dropdown={container:t,title:l,button:a},this.filters=this._createFilters(e);const n=$(`<ul class='dropdown-menu dropdown-menu-lg-end scrollable-dropdown' id='${this.filterMenuKey}_dropdown_menu'></ul>`);for(const[e,t]of Object.entries(this.filters))n.append(t.$node);if(!this.removeAllEntry){const e=this._generateAllFilter();n.prepend(this._createMenuEntry(e))}t.append(a),t.append(n),t.insertBefore(this.$datatableWrapper.find(".dataTables_filter").parent()),this._selectFilterFromState(this.filterMenuKey)}}_selectFilterFromState(e){this.tableAPI.state&&this.tableAPI.state.loaded()&&this.tableAPI.state.loaded().filters&&tableAPI.state.save()}_generateAllFilter(){return{key:"all",label:i18n_ext.all,regex:"",countable:!1,callback:()=>{this.$dropdown.title.parent().find("i.fas.fa-filter").remove(),this.$dropdown.title.html(`${this.filterTitle}`)}}}_update(){if(void 0!==this.filters)if(this.preventUpdate)this.preventUpdate=!1;else for(const[e,t]of Object.entries(this.filters)){if(0==t.countable||0==t.filter.countable)continue;const e=this.tableAPI.columns(this.columnIndex).data()[0],a=this._countEntries(t.filter.regex,e);0==a?t.$node.hide():t.$node.show(),t.$node.find(".counter").text(`(${a})`),this.$dropdown.button.find(".counter").text(`(${a})`)}}},window.DataTableRenders=R,window.ChartWidget=class extends O{constructor(e,t="line",a={},l=0,n={}){super(e,a,l,n),this._chartType=t,this._chart={},this._$htmlChart=document.querySelector(`#canvas-widget-${e}`)}static registerEventCallback(e,t,a){setTimeout((async()=>{try{const l=I.getWidgetByName(e),n={chart:{events:{[t]:a}}};await l._chart.updateOptions(n)}catch(e){}}),1e3)}_generateConfig(){const e={series:[],tooltip:{enabledOnSeries:[0],x:{show:!0,format:"dd/MM/yyyy HH:mm:ss"},y:{formatter:function(e,{series:t,seriesIndex:a,dataPointIndex:l,w:n}){return e}},z:{show:!1}},chart:{type:this._chartType,events:{},height:"100%",toolbar:{show:!1}},xaxis:{labels:{style:{fontSize:"14px"}},tooltip:{enabled:!0,formatter:function(e){return e}}},yaxis:{labels:{style:{fontSize:"14px"}},tooltip:{enabled:!0,formatter:function(e){return e}}},zaxis:{labels:{style:{fontSize:"14px"}},tooltip:{enabled:!0}},dataLabels:{enabled:!0,style:{fontSize:"14px"}},labels:[],legend:{show:!0,fontSize:"14px",position:"bottom",onItemClick:{toggleDataSeries:!0}},plotOptions:{bar:{borderRadius:4,horizontal:!0}},noData:{text:"No Data",align:"center",verticalAlign:"middle",style:{fontSize:"24px"}}};if(this._additionalParams&&this._additionalParams.apex){return Object.assign(e,this._additionalParams.apex)}return e}_buildTooltip(e,t){if(e.tooltip.y={formatter:function(e,{series:t,seriesIndex:a,dataPointIndex:l,w:n}){return e}},t.tooltip){for(const a in t.tooltip)if("x"===a||"y"===a||"z"===a){const l=t.tooltip[a].formatter;e.tooltip[a]||(e.tooltip[a]={}),e.tooltip[a].formatter=P[l]||NtopUtils[l]}t.tooltip.custom&&(e.tooltip.custom=P[t.tooltip.custom]||NtopUtils[t.tooltip.custom])}}_buildAxisFormatter(e,t){const a=e[t];if(void 0!==a&&void 0!==a.labels&&void 0!==a.labels.ntop_utils_formatter&&"none"!==a.labels.ntop_utils_formatter){const e=a.labels.ntop_utils_formatter;void 0===NtopUtils[e]?console.error(`xaxis: Formatting function '${e}' didn't found inside NtopUtils.`):a.labels.formatter=NtopUtils[e]}}_buildDataLabels(e,t){if(t.dataLabels)for(const[a,l]of Object.entries(t.dataLabels))e.dataLabels[a]=l;let a=e.dataLabels.formatter;a&&P[a]&&(e.dataLabels.formatter=P[a])}_buildConfig(){const e=this._generateConfig(),t=this._fetchedData.rsp,a=["series","xaxis","yaxis","colors","labels","fill","filter","filtering_labels"];for(const l of a)void 0!==t[l]&&(void 0!==e[l]?e[l]=Object.assign(e[l],t[l]):e[l]=t[l]);if(t.events)for(const a in t.events)e.chart.events[a]=T[t.events[a]];return void 0!==t.horizontal_chart&&(e.plotOptions.bar.horizontal=t.horizontal_chart),this._buildTooltip(e,t),this._buildAxisFormatter(e,"xaxis"),this._buildAxisFormatter(e,"yaxis"),this._buildDataLabels(e,t),e}_initializeChart(){const e=this._buildConfig();this._chartConfig=e,this._chart=new ApexCharts(this._$htmlChart,this._chartConfig),this._chart.render()}async init(){await super.init(),this._initializeChart()}async destroy(){await super.destroy(),this._chart.destroy(),this._chart=null}async update(e={}){if(void 0!==this._chartConfig&&(e?await super.update(e):await super.updateByUrl(),null!=this._chart)){const{colors:e,series:t,dataLabels:a,labels:l,xaxis:n,filtering_labels:s}=this._fetchedData.rsp;if(this._chartConfig.colors=e,this._chartConfig.series=t,n&&n.categories&&(this._chartConfig.xaxis.categories=n.categories),s&&(this._chartConfig.filtering_labels=s),a){let e=this._chartConfig.dataLabels.formatter;this._chartConfig.dataLabels.formatter=e&&P[e]?P[e]:U}l&&(this._chartConfig.labels=l),this._chart.updateOptions(this._chartConfig,!0)}}async destroyAndUpdate(e={}){await super.destroyAndUpdate(e),this._initializeChart()}},window.WidgetUtils=I,window.ntopChartApex=M,$((function(){function e(e){if("mousedown"==e.type&&(e.metaKey||e.ctrlKey||2!==e.which))return;const t=$(this).data("id");$.post(`${http_prefix}/lua/update_blog_posts.lua`,{blog_notification_id:t,csrf:window.__BLOG_NOTIFICATION_CSRF__},(e=>{if(e.success){$(this).off("click").off("mousedown").attr("data-read","true").data("read","true").find(".badge").remove();const e=$(".blog-notification[data-read='false']").length;0==e?$(".notification-bell").remove():$(".notification-bell").html(e)}}))}$(".blog-notification[data-read='false']").on("click",e).on("mousedown",e)}));const z=D("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt"),q=D("itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly");function B(e){return!!e||""===e}function V(e){if(fe(e)){const t={};for(let a=0;a<e.length;a++){const l=e[a],n=be(l)?W(l):V(l);if(n)for(const e in n)t[e]=n[e]}return t}return be(e)||we(e)?e:void 0}const H=/;(?![^(]*\))/g,G=/:(.+)/;function W(e){const t={};return e.split(H).forEach((e=>{if(e){const a=e.split(G);a.length>1&&(t[a[0].trim()]=a[1].trim())}})),t}function K(e){let t="";if(be(e))t=e;else if(fe(e))for(let a=0;a<e.length;a++){const l=K(e[a]);l&&(t+=l+" ")}else if(we(e))for(const a in e)e[a]&&(t+=a+" ");return t.trim()}function J(e){if(!e)return null;let{class:t,style:a}=e;return t&&!be(t)&&(e.class=K(t)),a&&(e.style=V(a)),e}const Y=D("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot"),Z=D("svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view"),X=D("area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr");function Q(e,t){if(e===t)return!0;let a=he(e),l=he(t);if(a||l)return!(!a||!l)&&e.getTime()===t.getTime();if(a=ye(e),l=ye(t),a||l)return e===t;if(a=fe(e),l=fe(t),a||l)return!(!a||!l)&&function(e,t){if(e.length!==t.length)return!1;let a=!0;for(let l=0;a&&l<e.length;l++)a=Q(e[l],t[l]);return a}(e,t);if(a=we(e),l=we(t),a||l){if(!a||!l)return!1;if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const a in e){const l=e.hasOwnProperty(a),n=t.hasOwnProperty(a);if(l&&!n||!l&&n||!Q(e[a],t[a]))return!1}}return String(e)===String(t)}function ee(e,t){return e.findIndex((e=>Q(e,t)))}const te=e=>be(e)?e:null==e?"":fe(e)||we(e)&&(e.toString===ke||!ge(e.toString))?JSON.stringify(e,ae,2):String(e),ae=(e,t)=>t&&t.__v_isRef?ae(e,t.value):ve(t)?{[`Map(${t.size})`]:[...t.entries()].reduce(((e,[t,a])=>(e[`${t} =>`]=a,e)),{})}:me(t)?{[`Set(${t.size})`]:[...t.values()]}:!we(t)||fe(t)||Se(t)?t:String(t),le={},ne=[],se=()=>{},oe=()=>!1,ie=/^on[^a-z]/,re=e=>ie.test(e),ce=e=>e.startsWith("onUpdate:"),ue=Object.assign,de=(e,t)=>{const a=e.indexOf(t);a>-1&&e.splice(a,1)},_e=Object.prototype.hasOwnProperty,pe=(e,t)=>_e.call(e,t),fe=Array.isArray,ve=e=>"[object Map]"===$e(e),me=e=>"[object Set]"===$e(e),he=e=>"[object Date]"===$e(e),ge=e=>"function"==typeof e,be=e=>"string"==typeof e,ye=e=>"symbol"==typeof e,we=e=>null!==e&&"object"==typeof e,xe=e=>we(e)&&ge(e.then)&&ge(e.catch),ke=Object.prototype.toString,$e=e=>ke.call(e),Se=e=>"[object Object]"===$e(e),Ne=e=>be(e)&&"NaN"!==e&&"-"!==e[0]&&""+parseInt(e,10)===e,Ce=D(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),Ae=D("bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo"),Ee=e=>{const t=Object.create(null);return a=>t[a]||(t[a]=e(a))},Te=/-(\w)/g,Pe=Ee((e=>e.replace(Te,((e,t)=>t?t.toUpperCase():"")))),Ue=/\B([A-Z])/g,Ie=Ee((e=>e.replace(Ue,"-$1").toLowerCase())),Oe=Ee((e=>e.charAt(0).toUpperCase()+e.slice(1))),je=Ee((e=>e?`on${Oe(e)}`:"")),Me=(e,t)=>!Object.is(e,t),Le=(e,t)=>{for(let a=0;a<e.length;a++)e[a](t)},Fe=(e,t,a)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:a})},Re=e=>{const t=parseFloat(e);return isNaN(t)?e:t};let De,ze;class qe{constructor(e=!1){this.active=!0,this.effects=[],this.cleanups=[],!e&&ze&&(this.parent=ze,this.index=(ze.scopes||(ze.scopes=[])).push(this)-1)}run(e){if(this.active){const t=ze;try{return ze=this,e()}finally{ze=t}}}on(){ze=this}off(){ze=this.parent}stop(e){if(this.active){let t,a;for(t=0,a=this.effects.length;t<a;t++)this.effects[t].stop();for(t=0,a=this.cleanups.length;t<a;t++)this.cleanups[t]();if(this.scopes)for(t=0,a=this.scopes.length;t<a;t++)this.scopes[t].stop(!0);if(this.parent&&!e){const e=this.parent.scopes.pop();e&&e!==this&&(this.parent.scopes[this.index]=e,e.index=this.index)}this.active=!1}}}function Be(e){return new qe(e)}function Ve(e,t=ze){t&&t.active&&t.effects.push(e)}function He(){return ze}function Ge(e){ze&&ze.cleanups.push(e)}const We=e=>{const t=new Set(e);return t.w=0,t.n=0,t},Ke=e=>(e.w&Qe)>0,Je=e=>(e.n&Qe)>0,Ye=new WeakMap;let Ze,Xe=0,Qe=1;const et=Symbol(""),tt=Symbol("");class at{constructor(e,t=null,a){this.fn=e,this.scheduler=t,this.active=!0,this.deps=[],this.parent=void 0,Ve(this,a)}run(){if(!this.active)return this.fn();let e=Ze,t=ot;for(;e;){if(e===this)return;e=e.parent}try{return this.parent=Ze,Ze=this,ot=!0,Qe=1<<++Xe,Xe<=30?(({deps:e})=>{if(e.length)for(let t=0;t<e.length;t++)e[t].w|=Qe})(this):lt(this),this.fn()}finally{Xe<=30&&(e=>{const{deps:t}=e;if(t.length){let a=0;for(let l=0;l<t.length;l++){const n=t[l];Ke(n)&&!Je(n)?n.delete(e):t[a++]=n,n.w&=~Qe,n.n&=~Qe}t.length=a}})(this),Qe=1<<--Xe,Ze=this.parent,ot=t,this.parent=void 0,this.deferStop&&this.stop()}}stop(){Ze===this?this.deferStop=!0:this.active&&(lt(this),this.onStop&&this.onStop(),this.active=!1)}}function lt(e){const{deps:t}=e;if(t.length){for(let a=0;a<t.length;a++)t[a].delete(e);t.length=0}}function nt(e,t){e.effect&&(e=e.effect.fn);const a=new at(e);t&&(ue(a,t),t.scope&&Ve(a,t.scope)),t&&t.lazy||a.run();const l=a.run.bind(a);return l.effect=a,l}function st(e){e.effect.stop()}let ot=!0;const it=[];function rt(){it.push(ot),ot=!1}function ct(){const e=it.pop();ot=void 0===e||e}function ut(e,t,a){if(ot&&Ze){let t=Ye.get(e);t||Ye.set(e,t=new Map);let l=t.get(a);l||t.set(a,l=We()),dt(l)}}function dt(e,t){let a=!1;Xe<=30?Je(e)||(e.n|=Qe,a=!Ke(e)):a=!e.has(Ze),a&&(e.add(Ze),Ze.deps.push(e))}function _t(e,t,a,l,n,s){const o=Ye.get(e);if(!o)return;let i=[];if("clear"===t)i=[...o.values()];else if("length"===a&&fe(e))o.forEach(((e,t)=>{("length"===t||t>=l)&&i.push(e)}));else switch(void 0!==a&&i.push(o.get(a)),t){case"add":fe(e)?Ne(a)&&i.push(o.get("length")):(i.push(o.get(et)),ve(e)&&i.push(o.get(tt)));break;case"delete":fe(e)||(i.push(o.get(et)),ve(e)&&i.push(o.get(tt)));break;case"set":ve(e)&&i.push(o.get(et))}if(1===i.length)i[0]&&pt(i[0]);else{const e=[];for(const t of i)t&&e.push(...t);pt(We(e))}}function pt(e,t){const a=fe(e)?e:[...e];for(const e of a)e.computed&&ft(e);for(const e of a)e.computed||ft(e)}function ft(e,t){(e!==Ze||e.allowRecurse)&&(e.scheduler?e.scheduler():e.run())}const vt=D("__proto__,__v_isRef,__isVue"),mt=new Set(Object.getOwnPropertyNames(Symbol).filter((e=>"arguments"!==e&&"caller"!==e)).map((e=>Symbol[e])).filter(ye)),ht=xt(),gt=xt(!1,!0),bt=xt(!0),yt=xt(!0,!0),wt=function(){const e={};return["includes","indexOf","lastIndexOf"].forEach((t=>{e[t]=function(...e){const a=ra(this);for(let e=0,t=this.length;e<t;e++)ut(a,0,e+"");const l=a[t](...e);return-1===l||!1===l?a[t](...e.map(ra)):l}})),["push","pop","shift","unshift","splice"].forEach((t=>{e[t]=function(...e){rt();const a=ra(this)[t].apply(this,e);return ct(),a}})),e}();function xt(e=!1,t=!1){return function(a,l,n){if("__v_isReactive"===l)return!e;if("__v_isReadonly"===l)return e;if("__v_isShallow"===l)return t;if("__v_raw"===l&&n===(e?t?Xt:Zt:t?Yt:Jt).get(a))return a;const s=fe(a);if(!e&&s&&pe(wt,l))return Reflect.get(wt,l,n);const o=Reflect.get(a,l,n);return(ye(l)?mt.has(l):vt(l))?o:(e||ut(a,0,l),t?o:fa(o)?s&&Ne(l)?o:o.value:we(o)?e?ta(o):Qt(o):o)}}function kt(e=!1){return function(t,a,l,n){let s=t[a];if(sa(s)&&fa(s)&&!fa(l))return!1;if(!e&&!sa(l)&&(oa(l)||(l=ra(l),s=ra(s)),!fe(t)&&fa(s)&&!fa(l)))return s.value=l,!0;const o=fe(t)&&Ne(a)?Number(a)<t.length:pe(t,a),i=Reflect.set(t,a,l,n);return t===ra(n)&&(o?Me(l,s)&&_t(t,"set",a,l):_t(t,"add",a,l)),i}}const $t={get:ht,set:kt(),deleteProperty:function(e,t){const a=pe(e,t),l=Reflect.deleteProperty(e,t);return l&&a&&_t(e,"delete",t,void 0),l},has:function(e,t){const a=Reflect.has(e,t);return ye(t)&&mt.has(t)||ut(e,0,t),a},ownKeys:function(e){return ut(e,0,fe(e)?"length":et),Reflect.ownKeys(e)}},St={get:bt,set:(e,t)=>!0,deleteProperty:(e,t)=>!0},Nt=ue({},$t,{get:gt,set:kt(!0)}),Ct=ue({},St,{get:yt}),At=e=>e,Et=e=>Reflect.getPrototypeOf(e);function Tt(e,t,a=!1,l=!1){const n=ra(e=e.__v_raw),s=ra(t);a||(t!==s&&ut(n,0,t),ut(n,0,s));const{has:o}=Et(n),i=l?At:a?da:ua;return o.call(n,t)?i(e.get(t)):o.call(n,s)?i(e.get(s)):void(e!==n&&e.get(t))}function Pt(e,t=!1){const a=this.__v_raw,l=ra(a),n=ra(e);return t||(e!==n&&ut(l,0,e),ut(l,0,n)),e===n?a.has(e):a.has(e)||a.has(n)}function Ut(e,t=!1){return e=e.__v_raw,!t&&ut(ra(e),0,et),Reflect.get(e,"size",e)}function It(e){e=ra(e);const t=ra(this);return Et(t).has.call(t,e)||(t.add(e),_t(t,"add",e,e)),this}function Ot(e,t){t=ra(t);const a=ra(this),{has:l,get:n}=Et(a);let s=l.call(a,e);s||(e=ra(e),s=l.call(a,e));const o=n.call(a,e);return a.set(e,t),s?Me(t,o)&&_t(a,"set",e,t):_t(a,"add",e,t),this}function jt(e){const t=ra(this),{has:a,get:l}=Et(t);let n=a.call(t,e);n||(e=ra(e),n=a.call(t,e)),l&&l.call(t,e);const s=t.delete(e);return n&&_t(t,"delete",e,void 0),s}function Mt(){const e=ra(this),t=0!==e.size,a=e.clear();return t&&_t(e,"clear",void 0,void 0),a}function Lt(e,t){return function(a,l){const n=this,s=n.__v_raw,o=ra(s),i=t?At:e?da:ua;return!e&&ut(o,0,et),s.forEach(((e,t)=>a.call(l,i(e),i(t),n)))}}function Ft(e,t,a){return function(...l){const n=this.__v_raw,s=ra(n),o=ve(s),i="entries"===e||e===Symbol.iterator&&o,r="keys"===e&&o,c=n[e](...l),u=a?At:t?da:ua;return!t&&ut(s,0,r?tt:et),{next(){const{value:e,done:t}=c.next();return t?{value:e,done:t}:{value:i?[u(e[0]),u(e[1])]:u(e),done:t}},[Symbol.iterator](){return this}}}}function Rt(e){return function(...t){return"delete"!==e&&this}}const[Dt,zt,qt,Bt]=function(){const e={get(e){return Tt(this,e)},get size(){return Ut(this)},has:Pt,add:It,set:Ot,delete:jt,clear:Mt,forEach:Lt(!1,!1)},t={get(e){return Tt(this,e,!1,!0)},get size(){return Ut(this)},has:Pt,add:It,set:Ot,delete:jt,clear:Mt,forEach:Lt(!1,!0)},a={get(e){return Tt(this,e,!0)},get size(){return Ut(this,!0)},has(e){return Pt.call(this,e,!0)},add:Rt("add"),set:Rt("set"),delete:Rt("delete"),clear:Rt("clear"),forEach:Lt(!0,!1)},l={get(e){return Tt(this,e,!0,!0)},get size(){return Ut(this,!0)},has(e){return Pt.call(this,e,!0)},add:Rt("add"),set:Rt("set"),delete:Rt("delete"),clear:Rt("clear"),forEach:Lt(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach((n=>{e[n]=Ft(n,!1,!1),a[n]=Ft(n,!0,!1),t[n]=Ft(n,!1,!0),l[n]=Ft(n,!0,!0)})),[e,a,t,l]}();function Vt(e,t){const a=t?e?Bt:qt:e?zt:Dt;return(t,l,n)=>"__v_isReactive"===l?!e:"__v_isReadonly"===l?e:"__v_raw"===l?t:Reflect.get(pe(a,l)&&l in t?a:t,l,n)}const Ht={get:Vt(!1,!1)},Gt={get:Vt(!1,!0)},Wt={get:Vt(!0,!1)},Kt={get:Vt(!0,!0)},Jt=new WeakMap,Yt=new WeakMap,Zt=new WeakMap,Xt=new WeakMap;function Qt(e){return sa(e)?e:la(e,!1,$t,Ht,Jt)}function ea(e){return la(e,!1,Nt,Gt,Yt)}function ta(e){return la(e,!0,St,Wt,Zt)}function aa(e){return la(e,!0,Ct,Kt,Xt)}function la(e,t,a,l,n){if(!we(e))return e;if(e.__v_raw&&(!t||!e.__v_isReactive))return e;const s=n.get(e);if(s)return s;const o=function(e){return e.__v_skip||!Object.isExtensible(e)?0:function(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}((e=>$e(e).slice(8,-1))(e))}(e);if(0===o)return e;const i=new Proxy(e,2===o?l:a);return n.set(e,i),i}function na(e){return sa(e)?na(e.__v_raw):!(!e||!e.__v_isReactive)}function sa(e){return!(!e||!e.__v_isReadonly)}function oa(e){return!(!e||!e.__v_isShallow)}function ia(e){return na(e)||sa(e)}function ra(e){const t=e&&e.__v_raw;return t?ra(t):e}function ca(e){return Fe(e,"__v_skip",!0),e}const ua=e=>we(e)?Qt(e):e,da=e=>we(e)?ta(e):e;function _a(e){ot&&Ze&&dt((e=ra(e)).dep||(e.dep=We()))}function pa(e,t){(e=ra(e)).dep&&pt(e.dep)}function fa(e){return!(!e||!0!==e.__v_isRef)}function va(e){return ha(e,!1)}function ma(e){return ha(e,!0)}function ha(e,t){return fa(e)?e:new ga(e,t)}class ga{constructor(e,t){this.__v_isShallow=t,this.dep=void 0,this.__v_isRef=!0,this._rawValue=t?e:ra(e),this._value=t?e:ua(e)}get value(){return _a(this),this._value}set value(e){e=this.__v_isShallow?e:ra(e),Me(e,this._rawValue)&&(this._rawValue=e,this._value=this.__v_isShallow?e:ua(e),pa(this))}}function ba(e){pa(e)}function ya(e){return fa(e)?e.value:e}const wa={get:(e,t,a)=>ya(Reflect.get(e,t,a)),set:(e,t,a,l)=>{const n=e[t];return fa(n)&&!fa(a)?(n.value=a,!0):Reflect.set(e,t,a,l)}};function xa(e){return na(e)?e:new Proxy(e,wa)}class ka{constructor(e){this.dep=void 0,this.__v_isRef=!0;const{get:t,set:a}=e((()=>_a(this)),(()=>pa(this)));this._get=t,this._set=a}get value(){return this._get()}set value(e){this._set(e)}}function $a(e){return new ka(e)}function Sa(e){const t=fe(e)?new Array(e.length):{};for(const a in e)t[a]=Ca(e,a);return t}class Na{constructor(e,t,a){this._object=e,this._key=t,this._defaultValue=a,this.__v_isRef=!0}get value(){const e=this._object[this._key];return void 0===e?this._defaultValue:e}set value(e){this._object[this._key]=e}}function Ca(e,t,a){const l=e[t];return fa(l)?l:new Na(e,t,a)}class Aa{constructor(e,t,a,l){this._setter=t,this.dep=void 0,this.__v_isRef=!0,this._dirty=!0,this.effect=new at(e,(()=>{this._dirty||(this._dirty=!0,pa(this))})),this.effect.computed=this,this.effect.active=this._cacheable=!l,this.__v_isReadonly=a}get value(){const e=ra(this);return _a(e),!e._dirty&&e._cacheable||(e._dirty=!1,e._value=e.effect.run()),e._value}set value(e){this._setter(e)}}const Ea=[];function Ta(e,...t){rt();const a=Ea.length?Ea[Ea.length-1].component:null,l=a&&a.appContext.config.warnHandler,n=function(){let e=Ea[Ea.length-1];if(!e)return[];const t=[];for(;e;){const a=t[0];a&&a.vnode===e?a.recurseCount++:t.push({vnode:e,recurseCount:0});const l=e.component&&e.component.parent;e=l&&l.vnode}return t}();if(l)Ia(l,a,11,[e+t.join(""),a&&a.proxy,n.map((({vnode:e})=>`at <${wo(a,e.type)}>`)).join("\n"),n]);else{const a=[`[Vue warn]: ${e}`,...t];n.length&&a.push("\n",...function(e){const t=[];return e.forEach(((e,a)=>{t.push(...0===a?[]:["\n"],...function({vnode:e,recurseCount:t}){const a=t>0?`... (${t} recursive calls)`:"",l=` at <${wo(e.component,e.type,!!e.component&&null==e.component.parent)}`,n=">"+a;return e.props?[l,...Pa(e.props),n]:[l+n]}(e))})),t}(n)),console.warn(...a)}ct()}function Pa(e){const t=[],a=Object.keys(e);return a.slice(0,3).forEach((a=>{t.push(...Ua(a,e[a]))})),a.length>3&&t.push(" ..."),t}function Ua(e,t,a){return be(t)?(t=JSON.stringify(t),a?t:[`${e}=${t}`]):"number"==typeof t||"boolean"==typeof t||null==t?a?t:[`${e}=${t}`]:fa(t)?(t=Ua(e,ra(t.value),!0),a?t:[`${e}=Ref<`,t,">"]):ge(t)?[`${e}=fn${t.name?`<${t.name}>`:""}`]:(t=ra(t),a?t:[`${e}=`,t])}function Ia(e,t,a,l){let n;try{n=l?e(...l):e()}catch(e){ja(e,t,a)}return n}function Oa(e,t,a,l){if(ge(e)){const n=Ia(e,t,a,l);return n&&xe(n)&&n.catch((e=>{ja(e,t,a)})),n}const n=[];for(let s=0;s<e.length;s++)n.push(Oa(e[s],t,a,l));return n}function ja(e,t,a,l=!0){if(t){let l=t.parent;const n=t.proxy,s=a;for(;l;){const t=l.ec;if(t)for(let a=0;a<t.length;a++)if(!1===t[a](e,n,s))return;l=l.parent}const o=t.appContext.config.errorHandler;if(o)return void Ia(o,null,10,[e,n,s])}!function(e,t,a,l=!0){console.error(e)}(e,0,0,l)}let Ma=!1,La=!1;const Fa=[];let Ra=0;const Da=[];let za=null,qa=0;const Ba=[];let Va=null,Ha=0;const Ga=Promise.resolve();let Wa=null,Ka=null;function Ja(e){const t=Wa||Ga;return e?t.then(this?e.bind(this):e):t}function Ya(e){Fa.length&&Fa.includes(e,Ma&&e.allowRecurse?Ra+1:Ra)||e===Ka||(null==e.id?Fa.push(e):Fa.splice(function(e){let t=Ra+1,a=Fa.length;for(;t<a;){const l=t+a>>>1;al(Fa[l])<e?t=l+1:a=l}return t}(e.id),0,e),Za())}function Za(){Ma||La||(La=!0,Wa=Ga.then(ll))}function Xa(e,t,a,l){fe(e)?a.push(...e):t&&t.includes(e,e.allowRecurse?l+1:l)||a.push(e),Za()}function Qa(e){Xa(e,Va,Ba,Ha)}function el(e,t=null){if(Da.length){for(Ka=t,za=[...new Set(Da)],Da.length=0,qa=0;qa<za.length;qa++)za[qa]();za=null,qa=0,Ka=null,el(e,t)}}function tl(e){if(el(),Ba.length){const e=[...new Set(Ba)];if(Ba.length=0,Va)return void Va.push(...e);for(Va=e,Va.sort(((e,t)=>al(e)-al(t))),Ha=0;Ha<Va.length;Ha++)Va[Ha]();Va=null,Ha=0}}const al=e=>null==e.id?1/0:e.id;function ll(e){La=!1,Ma=!0,el(e),Fa.sort(((e,t)=>al(e)-al(t)));try{for(Ra=0;Ra<Fa.length;Ra++){const e=Fa[Ra];e&&!1!==e.active&&Ia(e,null,14)}}finally{Ra=0,Fa.length=0,tl(),Ma=!1,Wa=null,(Fa.length||Da.length||Ba.length)&&ll(e)}}let nl,sl=[];function ol(e,t){var a,l;nl=e,nl?(nl.enabled=!0,sl.forEach((({event:e,args:t})=>nl.emit(e,...t))),sl=[]):"undefined"!=typeof window&&window.HTMLElement&&!(null===(l=null===(a=window.navigator)||void 0===a?void 0:a.userAgent)||void 0===l?void 0:l.includes("jsdom"))?((t.__VUE_DEVTOOLS_HOOK_REPLAY__=t.__VUE_DEVTOOLS_HOOK_REPLAY__||[]).push((e=>{ol(e,t)})),setTimeout((()=>{nl||(t.__VUE_DEVTOOLS_HOOK_REPLAY__=null,sl=[])}),3e3)):sl=[]}function il(e,t,...a){if(e.isUnmounted)return;const l=e.vnode.props||le;let n=a;const s=t.startsWith("update:"),o=s&&t.slice(7);if(o&&o in l){const e=`${"modelValue"===o?"model":o}Modifiers`,{number:t,trim:s}=l[e]||le;s&&(n=a.map((e=>e.trim()))),t&&(n=a.map(Re))}let i,r=l[i=je(t)]||l[i=je(Pe(t))];!r&&s&&(r=l[i=je(Ie(t))]),r&&Oa(r,e,6,n);const c=l[i+"Once"];if(c){if(e.emitted){if(e.emitted[i])return}else e.emitted={};e.emitted[i]=!0,Oa(c,e,6,n)}}function rl(e,t,a=!1){const l=t.emitsCache,n=l.get(e);if(void 0!==n)return n;const s=e.emits;let o={},i=!1;if(!ge(e)){const l=e=>{const a=rl(e,t,!0);a&&(i=!0,ue(o,a))};!a&&t.mixins.length&&t.mixins.forEach(l),e.extends&&l(e.extends),e.mixins&&e.mixins.forEach(l)}return s||i?(fe(s)?s.forEach((e=>o[e]=null)):ue(o,s),l.set(e,o),o):(l.set(e,null),null)}function cl(e,t){return!(!e||!re(t))&&(t=t.slice(2).replace(/Once$/,""),pe(e,t[0].toLowerCase()+t.slice(1))||pe(e,Ie(t))||pe(e,t))}let ul=null,dl=null;function _l(e){const t=ul;return ul=e,dl=e&&e.type.__scopeId||null,t}function pl(e){dl=e}function fl(){dl=null}const vl=e=>ml;function ml(e,t=ul,a){if(!t)return e;if(e._n)return e;const l=(...a)=>{l._d&&Os(-1);const n=_l(t),s=e(...a);return _l(n),l._d&&Os(1),s};return l._n=!0,l._c=!0,l._d=!0,l}function hl(e){const{type:t,vnode:a,proxy:l,withProxy:n,props:s,propsOptions:[o],slots:i,attrs:r,emit:c,render:u,renderCache:d,data:_,setupState:p,ctx:f,inheritAttrs:v}=e;let m,h;const g=_l(e);try{if(4&a.shapeFlag){const e=n||l;m=Zs(u.call(e,e,d,s,p,_,f)),h=r}else{m=Zs(t(s,t.length>1?{attrs:r,slots:i,emit:c}:null)),h=t.props?r:gl(r)}}catch(t){Es.length=0,ja(t,e,1),m=Hs(Cs)}let b=m;if(h&&!1!==v){const e=Object.keys(h),{shapeFlag:t}=b;e.length&&7&t&&(o&&e.some(ce)&&(h=bl(h,o)),b=Ws(b,h))}return a.dirs&&(b=Ws(b),b.dirs=b.dirs?b.dirs.concat(a.dirs):a.dirs),a.transition&&(b.transition=a.transition),m=b,_l(g),m}const gl=e=>{let t;for(const a in e)("class"===a||"style"===a||re(a))&&((t||(t={}))[a]=e[a]);return t},bl=(e,t)=>{const a={};for(const l in e)ce(l)&&l.slice(9)in t||(a[l]=e[l]);return a};function yl(e,t,a){const l=Object.keys(t);if(l.length!==Object.keys(e).length)return!0;for(let n=0;n<l.length;n++){const s=l[n];if(t[s]!==e[s]&&!cl(a,s))return!0}return!1}function wl({vnode:e,parent:t},a){for(;t&&t.subTree===e;)(e=t.vnode).el=a,t=t.parent}const xl=e=>e.__isSuspense,kl={name:"Suspense",__isSuspense:!0,process(e,t,a,l,n,s,o,i,r,c){null==e?function(e,t,a,l,n,s,o,i,r){const{p:c,o:{createElement:u}}=r,d=u("div"),_=e.suspense=Sl(e,n,l,t,d,a,s,o,i,r);c(null,_.pendingBranch=e.ssContent,d,null,l,_,s,o),_.deps>0?($l(e,"onPending"),$l(e,"onFallback"),c(null,e.ssFallback,t,a,l,null,s,o),Al(_,e.ssFallback)):_.resolve()}(t,a,l,n,s,o,i,r,c):function(e,t,a,l,n,s,o,i,{p:r,um:c,o:{createElement:u}}){const d=t.suspense=e.suspense;d.vnode=t,t.el=e.el;const _=t.ssContent,p=t.ssFallback,{activeBranch:f,pendingBranch:v,isInFallback:m,isHydrating:h}=d;if(v)d.pendingBranch=_,Rs(_,v)?(r(v,_,d.hiddenContainer,null,n,d,s,o,i),d.deps<=0?d.resolve():m&&(r(f,p,a,l,n,null,s,o,i),Al(d,p))):(d.pendingId++,h?(d.isHydrating=!1,d.activeBranch=v):c(v,n,d),d.deps=0,d.effects.length=0,d.hiddenContainer=u("div"),m?(r(null,_,d.hiddenContainer,null,n,d,s,o,i),d.deps<=0?d.resolve():(r(f,p,a,l,n,null,s,o,i),Al(d,p))):f&&Rs(_,f)?(r(f,_,a,l,n,d,s,o,i),d.resolve(!0)):(r(null,_,d.hiddenContainer,null,n,d,s,o,i),d.deps<=0&&d.resolve()));else if(f&&Rs(_,f))r(f,_,a,l,n,d,s,o,i),Al(d,_);else if($l(t,"onPending"),d.pendingBranch=_,d.pendingId++,r(null,_,d.hiddenContainer,null,n,d,s,o,i),d.deps<=0)d.resolve();else{const{timeout:e,pendingId:t}=d;e>0?setTimeout((()=>{d.pendingId===t&&d.fallback(p)}),e):0===e&&d.fallback(p)}}(e,t,a,l,n,o,i,r,c)},hydrate:function(e,t,a,l,n,s,o,i,r){const c=t.suspense=Sl(t,l,a,e.parentNode,document.createElement("div"),null,n,s,o,i,!0),u=r(e,c.pendingBranch=t.ssContent,a,c,s,o);return 0===c.deps&&c.resolve(),u},create:Sl,normalize:function(e){const{shapeFlag:t,children:a}=e,l=32&t;e.ssContent=Nl(l?a.default:a),e.ssFallback=l?Nl(a.fallback):Hs(Cs)}};function $l(e,t){const a=e.props&&e.props[t];ge(a)&&a()}function Sl(e,t,a,l,n,s,o,i,r,c,u=!1){const{p:d,m:_,um:p,n:f,o:{parentNode:v,remove:m}}=c,h=Re(e.props&&e.props.timeout),g={vnode:e,parent:t,parentComponent:a,isSVG:o,container:l,hiddenContainer:n,anchor:s,deps:0,pendingId:0,timeout:"number"==typeof h?h:-1,activeBranch:null,pendingBranch:null,isInFallback:!0,isHydrating:u,isUnmounted:!1,effects:[],resolve(e=!1){const{vnode:t,activeBranch:a,pendingBranch:l,pendingId:n,effects:s,parentComponent:o,container:i}=g;if(g.isHydrating)g.isHydrating=!1;else if(!e){const e=a&&l.transition&&"out-in"===l.transition.mode;e&&(a.transition.afterLeave=()=>{n===g.pendingId&&_(l,i,t,0)});let{anchor:t}=g;a&&(t=f(a),p(a,o,g,!0)),e||_(l,i,t,0)}Al(g,l),g.pendingBranch=null,g.isInFallback=!1;let r=g.parent,c=!1;for(;r;){if(r.pendingBranch){r.effects.push(...s),c=!0;break}r=r.parent}c||Qa(s),g.effects=[],$l(t,"onResolve")},fallback(e){if(!g.pendingBranch)return;const{vnode:t,activeBranch:a,parentComponent:l,container:n,isSVG:s}=g;$l(t,"onFallback");const o=f(a),c=()=>{g.isInFallback&&(d(null,e,n,o,l,null,s,i,r),Al(g,e))},u=e.transition&&"out-in"===e.transition.mode;u&&(a.transition.afterLeave=c),g.isInFallback=!0,p(a,l,null,!0),u||c()},move(e,t,a){g.activeBranch&&_(g.activeBranch,e,t,a),g.container=e},next:()=>g.activeBranch&&f(g.activeBranch),registerDep(e,t){const a=!!g.pendingBranch;a&&g.deps++;const l=e.vnode.el;e.asyncDep.catch((t=>{ja(t,e,0)})).then((n=>{if(e.isUnmounted||g.isUnmounted||g.pendingId!==e.suspenseId)return;e.asyncResolved=!0;const{vnode:s}=e;po(e,n,!1),l&&(s.el=l);const i=!l&&e.subTree.el;t(e,s,v(l||e.subTree.el),l?null:f(e.subTree),g,o,r),i&&m(i),wl(e,s.el),a&&0==--g.deps&&g.resolve()}))},unmount(e,t){g.isUnmounted=!0,g.activeBranch&&p(g.activeBranch,a,e,t),g.pendingBranch&&p(g.pendingBranch,a,e,t)}};return g}function Nl(e){let t;if(ge(e)){const a=Is&&e._c;a&&(e._d=!1,Ps()),e=e(),a&&(e._d=!0,t=Ts,Us())}if(fe(e)){const t=function(e){let t;for(let a=0;a<e.length;a++){const l=e[a];if(!Fs(l))return;if(l.type!==Cs||"v-if"===l.children){if(t)return;t=l}}return t}(e);e=t}return e=Zs(e),t&&!e.dynamicChildren&&(e.dynamicChildren=t.filter((t=>t!==e))),e}function Cl(e,t){t&&t.pendingBranch?fe(e)?t.effects.push(...e):t.effects.push(e):Qa(e)}function Al(e,t){e.activeBranch=t;const{vnode:a,parentComponent:l}=e,n=a.el=t.el;l&&l.subTree===a&&(l.vnode.el=n,wl(l,n))}function El(e,t){if(no){let a=no.provides;const l=no.parent&&no.parent.provides;l===a&&(a=no.provides=Object.create(l)),a[e]=t}}function Tl(e,t,a=!1){const l=no||ul;if(l){const n=null==l.parent?l.vnode.appContext&&l.vnode.appContext.provides:l.parent.provides;if(n&&e in n)return n[e];if(arguments.length>1)return a&&ge(t)?t.call(l.proxy):t}}function Pl(e,t){return Ml(e,null,t)}function Ul(e,t){return Ml(e,null,{flush:"post"})}function Il(e,t){return Ml(e,null,{flush:"sync"})}const Ol={};function jl(e,t,a){return Ml(e,t,a)}function Ml(e,t,{immediate:a,deep:l,flush:n}=le){const s=no;let o,i,r=!1,c=!1;if(fa(e)?(o=()=>e.value,r=oa(e)):na(e)?(o=()=>e,l=!0):fe(e)?(c=!0,r=e.some((e=>na(e)||oa(e))),o=()=>e.map((e=>fa(e)?e.value:na(e)?Rl(e):ge(e)?Ia(e,s,2):void 0))):o=ge(e)?t?()=>Ia(e,s,2):()=>{if(!s||!s.isUnmounted)return i&&i(),Oa(e,s,3,[u])}:se,t&&l){const e=o;o=()=>Rl(e())}let u=e=>{i=f.onStop=()=>{Ia(e,s,4)}},d=c?[]:Ol;const _=()=>{if(f.active)if(t){const e=f.run();(l||r||(c?e.some(((e,t)=>Me(e,d[t]))):Me(e,d)))&&(i&&i(),Oa(t,s,3,[e,d===Ol?void 0:d,u]),d=e)}else f.run()};let p;_.allowRecurse=!!t,p="sync"===n?_:"post"===n?()=>fs(_,s&&s.suspense):()=>function(e){Xa(e,za,Da,qa)}(_);const f=new at(o,p);return t?a?_():d=f.run():"post"===n?fs(f.run.bind(f),s&&s.suspense):f.run(),()=>{f.stop(),s&&s.scope&&de(s.scope.effects,f)}}function Ll(e,t,a){const l=this.proxy,n=be(e)?e.includes(".")?Fl(l,e):()=>l[e]:e.bind(l,l);let s;ge(t)?s=t:(s=t.handler,a=t);const o=no;oo(this);const i=Ml(n,s.bind(l),a);return o?oo(o):io(),i}function Fl(e,t){const a=t.split(".");return()=>{let t=e;for(let e=0;e<a.length&&t;e++)t=t[a[e]];return t}}function Rl(e,t){if(!we(e)||e.__v_skip)return e;if((t=t||new Set).has(e))return e;if(t.add(e),fa(e))Rl(e.value,t);else if(fe(e))for(let a=0;a<e.length;a++)Rl(e[a],t);else if(me(e)||ve(e))e.forEach((e=>{Rl(e,t)}));else if(Se(e))for(const a in e)Rl(e[a],t);return e}function Dl(){const e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return _n((()=>{e.isMounted=!0})),vn((()=>{e.isUnmounting=!0})),e}const zl=[Function,Array],ql={name:"BaseTransition",props:{mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:zl,onEnter:zl,onAfterEnter:zl,onEnterCancelled:zl,onBeforeLeave:zl,onLeave:zl,onAfterLeave:zl,onLeaveCancelled:zl,onBeforeAppear:zl,onAppear:zl,onAfterAppear:zl,onAppearCancelled:zl},setup(e,{slots:t}){const a=so(),l=Dl();let n;return()=>{const s=t.default&&Kl(t.default(),!0);if(!s||!s.length)return;let o=s[0];if(s.length>1)for(const e of s)if(e.type!==Cs){o=e;break}const i=ra(e),{mode:r}=i;if(l.isLeaving)return Hl(o);const c=Gl(o);if(!c)return Hl(o);const u=Vl(c,i,l,a);Wl(c,u);const d=a.subTree,_=d&&Gl(d);let p=!1;const{getTransitionKey:f}=c.type;if(f){const e=f();void 0===n?n=e:e!==n&&(n=e,p=!0)}if(_&&_.type!==Cs&&(!Rs(c,_)||p)){const e=Vl(_,i,l,a);if(Wl(_,e),"out-in"===r)return l.isLeaving=!0,e.afterLeave=()=>{l.isLeaving=!1,a.update()},Hl(o);"in-out"===r&&c.type!==Cs&&(e.delayLeave=(e,t,a)=>{Bl(l,_)[String(_.key)]=_,e._leaveCb=()=>{t(),e._leaveCb=void 0,delete u.delayedLeave},u.delayedLeave=a})}return o}}};function Bl(e,t){const{leavingVNodes:a}=e;let l=a.get(t.type);return l||(l=Object.create(null),a.set(t.type,l)),l}function Vl(e,t,a,l){const{appear:n,mode:s,persisted:o=!1,onBeforeEnter:i,onEnter:r,onAfterEnter:c,onEnterCancelled:u,onBeforeLeave:d,onLeave:_,onAfterLeave:p,onLeaveCancelled:f,onBeforeAppear:v,onAppear:m,onAfterAppear:h,onAppearCancelled:g}=t,b=String(e.key),y=Bl(a,e),w=(e,t)=>{e&&Oa(e,l,9,t)},x=(e,t)=>{const a=t[1];w(e,t),fe(e)?e.every((e=>e.length<=1))&&a():e.length<=1&&a()},k={mode:s,persisted:o,beforeEnter(t){let l=i;if(!a.isMounted){if(!n)return;l=v||i}t._leaveCb&&t._leaveCb(!0);const s=y[b];s&&Rs(e,s)&&s.el._leaveCb&&s.el._leaveCb(),w(l,[t])},enter(e){let t=r,l=c,s=u;if(!a.isMounted){if(!n)return;t=m||r,l=h||c,s=g||u}let o=!1;const i=e._enterCb=t=>{o||(o=!0,w(t?s:l,[e]),k.delayedLeave&&k.delayedLeave(),e._enterCb=void 0)};t?x(t,[e,i]):i()},leave(t,l){const n=String(e.key);if(t._enterCb&&t._enterCb(!0),a.isUnmounting)return l();w(d,[t]);let s=!1;const o=t._leaveCb=a=>{s||(s=!0,l(),w(a?f:p,[t]),t._leaveCb=void 0,y[n]===e&&delete y[n])};y[n]=e,_?x(_,[t,o]):o()},clone:e=>Vl(e,t,a,l)};return k}function Hl(e){if(Ql(e))return(e=Ws(e)).children=null,e}function Gl(e){return Ql(e)?e.children?e.children[0]:void 0:e}function Wl(e,t){6&e.shapeFlag&&e.component?Wl(e.component.subTree,t):128&e.shapeFlag?(e.ssContent.transition=t.clone(e.ssContent),e.ssFallback.transition=t.clone(e.ssFallback)):e.transition=t}function Kl(e,t=!1,a){let l=[],n=0;for(let s=0;s<e.length;s++){let o=e[s];const i=null==a?o.key:String(a)+String(null!=o.key?o.key:s);o.type===Ss?(128&o.patchFlag&&n++,l=l.concat(Kl(o.children,t,i))):(t||o.type!==Cs)&&l.push(null!=i?Ws(o,{key:i}):o)}if(n>1)for(let e=0;e<l.length;e++)l[e].patchFlag=-2;return l}function Jl(e){return ge(e)?{setup:e,name:e.name}:e}const Yl=e=>!!e.type.__asyncLoader;function Zl(e){ge(e)&&(e={loader:e});const{loader:t,loadingComponent:a,errorComponent:l,delay:n=200,timeout:s,suspensible:o=!0,onError:i}=e;let r,c=null,u=0;const d=()=>{let e;return c||(e=c=t().catch((e=>{if(e=e instanceof Error?e:new Error(String(e)),i)return new Promise(((t,a)=>{i(e,(()=>t((u++,c=null,d()))),(()=>a(e)),u+1)}));throw e})).then((t=>e!==c&&c?c:(t&&(t.__esModule||"Module"===t[Symbol.toStringTag])&&(t=t.default),r=t,t))))};return Jl({name:"AsyncComponentWrapper",__asyncLoader:d,get __asyncResolved(){return r},setup(){const e=no;if(r)return()=>Xl(r,e);const t=t=>{c=null,ja(t,e,13,!l)};if(o&&e.suspense)return d().then((t=>()=>Xl(t,e))).catch((e=>(t(e),()=>l?Hs(l,{error:e}):null)));const i=va(!1),u=va(),_=va(!!n);return n&&setTimeout((()=>{_.value=!1}),n),null!=s&&setTimeout((()=>{if(!i.value&&!u.value){const e=new Error(`Async component timed out after ${s}ms.`);t(e),u.value=e}}),s),d().then((()=>{i.value=!0,e.parent&&Ql(e.parent.vnode)&&Ya(e.parent.update)})).catch((e=>{t(e),u.value=e})),()=>i.value&&r?Xl(r,e):u.value&&l?Hs(l,{error:u.value}):a&&!_.value?Hs(a):void 0}})}function Xl(e,{vnode:{ref:t,props:a,children:l}}){const n=Hs(e,a,l);return n.ref=t,n}const Ql=e=>e.type.__isKeepAlive,en={name:"KeepAlive",__isKeepAlive:!0,props:{include:[String,RegExp,Array],exclude:[String,RegExp,Array],max:[String,Number]},setup(e,{slots:t}){const a=so(),l=a.ctx,n=new Map,s=new Set;let o=null;const i=a.suspense,{renderer:{p:r,m:c,um:u,o:{createElement:d}}}=l,_=d("div");function p(e){on(e),u(e,a,i,!0)}function f(e){n.forEach(((t,a)=>{const l=yo(t.type);!l||e&&e(l)||v(a)}))}function v(e){const t=n.get(e);o&&t.type===o.type?o&&on(o):p(t),n.delete(e),s.delete(e)}l.activate=(e,t,a,l,n)=>{const s=e.component;c(e,t,a,0,i),r(s.vnode,e,t,a,s,i,l,e.slotScopeIds,n),fs((()=>{s.isDeactivated=!1,s.a&&Le(s.a);const t=e.props&&e.props.onVnodeMounted;t&&to(t,s.parent,e)}),i)},l.deactivate=e=>{const t=e.component;c(e,_,null,1,i),fs((()=>{t.da&&Le(t.da);const a=e.props&&e.props.onVnodeUnmounted;a&&to(a,t.parent,e),t.isDeactivated=!0}),i)},jl((()=>[e.include,e.exclude]),(([e,t])=>{e&&f((t=>tn(e,t))),t&&f((e=>!tn(t,e)))}),{flush:"post",deep:!0});let m=null;const h=()=>{null!=m&&n.set(m,rn(a.subTree))};return _n(h),fn(h),vn((()=>{n.forEach((e=>{const{subTree:t,suspense:l}=a,n=rn(t);if(e.type!==n.type)p(e);else{on(n);const e=n.component.da;e&&fs(e,l)}}))})),()=>{if(m=null,!t.default)return null;const a=t.default(),l=a[0];if(a.length>1)return o=null,a;if(!Fs(l)||!(4&l.shapeFlag||128&l.shapeFlag))return o=null,l;let i=rn(l);const r=i.type,c=yo(Yl(i)?i.type.__asyncResolved||{}:r),{include:u,exclude:d,max:_}=e;if(u&&(!c||!tn(u,c))||d&&c&&tn(d,c))return o=i,l;const p=null==i.key?r:i.key,f=n.get(p);return i.el&&(i=Ws(i),128&l.shapeFlag&&(l.ssContent=i)),m=p,f?(i.el=f.el,i.component=f.component,i.transition&&Wl(i,i.transition),i.shapeFlag|=512,s.delete(p),s.add(p)):(s.add(p),_&&s.size>parseInt(_,10)&&v(s.values().next().value)),i.shapeFlag|=256,o=i,xl(l.type)?l:i}}};function tn(e,t){return fe(e)?e.some((e=>tn(e,t))):be(e)?e.split(",").includes(t):!!e.test&&e.test(t)}function an(e,t){nn(e,"a",t)}function ln(e,t){nn(e,"da",t)}function nn(e,t,a=no){const l=e.__wdc||(e.__wdc=()=>{let t=a;for(;t;){if(t.isDeactivated)return;t=t.parent}return e()});if(cn(t,l,a),a){let e=a.parent;for(;e&&e.parent;)Ql(e.parent.vnode)&&sn(l,t,a,e),e=e.parent}}function sn(e,t,a,l){const n=cn(t,e,l,!0);mn((()=>{de(l[t],n)}),a)}function on(e){let t=e.shapeFlag;256&t&&(t-=256),512&t&&(t-=512),e.shapeFlag=t}function rn(e){return 128&e.shapeFlag?e.ssContent:e}function cn(e,t,a=no,l=!1){if(a){const n=a[e]||(a[e]=[]),s=t.__weh||(t.__weh=(...l)=>{if(a.isUnmounted)return;rt(),oo(a);const n=Oa(t,a,e,l);return io(),ct(),n});return l?n.unshift(s):n.push(s),s}}const un=e=>(t,a=no)=>(!_o||"sp"===e)&&cn(e,t,a),dn=un("bm"),_n=un("m"),pn=un("bu"),fn=un("u"),vn=un("bum"),mn=un("um"),hn=un("sp"),gn=un("rtg"),bn=un("rtc");function yn(e,t=no){cn("ec",e,t)}function wn(e,t){const a=ul;if(null===a)return e;const l=go(a)||a.proxy,n=e.dirs||(e.dirs=[]);for(let e=0;e<t.length;e++){let[a,s,o,i=le]=t[e];ge(a)&&(a={mounted:a,updated:a}),a.deep&&Rl(s),n.push({dir:a,instance:l,value:s,oldValue:void 0,arg:o,modifiers:i})}return e}function xn(e,t,a,l){const n=e.dirs,s=t&&t.dirs;for(let o=0;o<n.length;o++){const i=n[o];s&&(i.oldValue=s[o].value);let r=i.dir[l];r&&(rt(),Oa(r,a,8,[e.el,i,e,t]),ct())}}function kn(e,t){return Cn("components",e,!0,t)||e}const $n=Symbol();function Sn(e){return be(e)?Cn("components",e,!1)||e:e||$n}function Nn(e){return Cn("directives",e)}function Cn(e,t,a=!0,l=!1){const n=ul||no;if(n){const a=n.type;if("components"===e){const e=yo(a,!1);if(e&&(e===t||e===Pe(t)||e===Oe(Pe(t))))return a}const s=An(n[e]||a[e],t)||An(n.appContext[e],t);return!s&&l?a:s}}function An(e,t){return e&&(e[t]||e[Pe(t)]||e[Oe(Pe(t))])}function En(e,t,a,l){let n;const s=a&&a[l];if(fe(e)||be(e)){n=new Array(e.length);for(let a=0,l=e.length;a<l;a++)n[a]=t(e[a],a,void 0,s&&s[a])}else if("number"==typeof e){n=new Array(e);for(let a=0;a<e;a++)n[a]=t(a+1,a,void 0,s&&s[a])}else if(we(e))if(e[Symbol.iterator])n=Array.from(e,((e,a)=>t(e,a,void 0,s&&s[a])));else{const a=Object.keys(e);n=new Array(a.length);for(let l=0,o=a.length;l<o;l++){const o=a[l];n[l]=t(e[o],o,l,s&&s[l])}}else n=[];return a&&(a[l]=n),n}function Tn(e,t){for(let a=0;a<t.length;a++){const l=t[a];if(fe(l))for(let t=0;t<l.length;t++)e[l[t].name]=l[t].fn;else l&&(e[l.name]=l.fn)}return e}function Pn(e,t,a={},l,n){if(ul.isCE||ul.parent&&Yl(ul.parent)&&ul.parent.isCE)return Hs("slot","default"===t?null:{name:t},l&&l());let s=e[t];s&&s._c&&(s._d=!1),Ps();const o=s&&Un(s(a)),i=Ls(Ss,{key:a.key||`_${t}`},o||(l?l():[]),o&&1===e._?64:-2);return!n&&i.scopeId&&(i.slotScopeIds=[i.scopeId+"-s"]),s&&s._c&&(s._d=!0),i}function Un(e){return e.some((e=>!Fs(e)||e.type!==Cs&&!(e.type===Ss&&!Un(e.children))))?e:null}function In(e){const t={};for(const a in e)t[je(a)]=e[a];return t}const On=e=>e?ro(e)?go(e)||e.proxy:On(e.parent):null,jn=ue(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>e.props,$attrs:e=>e.attrs,$slots:e=>e.slots,$refs:e=>e.refs,$parent:e=>On(e.parent),$root:e=>On(e.root),$emit:e=>e.emit,$options:e=>zn(e),$forceUpdate:e=>e.f||(e.f=()=>Ya(e.update)),$nextTick:e=>e.n||(e.n=Ja.bind(e.proxy)),$watch:e=>Ll.bind(e)}),Mn={get({_:e},t){const{ctx:a,setupState:l,data:n,props:s,accessCache:o,type:i,appContext:r}=e;let c;if("$"!==t[0]){const i=o[t];if(void 0!==i)switch(i){case 1:return l[t];case 2:return n[t];case 4:return a[t];case 3:return s[t]}else{if(l!==le&&pe(l,t))return o[t]=1,l[t];if(n!==le&&pe(n,t))return o[t]=2,n[t];if((c=e.propsOptions[0])&&pe(c,t))return o[t]=3,s[t];if(a!==le&&pe(a,t))return o[t]=4,a[t];Fn&&(o[t]=0)}}const u=jn[t];let d,_;return u?("$attrs"===t&&ut(e,0,t),u(e)):(d=i.__cssModules)&&(d=d[t])?d:a!==le&&pe(a,t)?(o[t]=4,a[t]):(_=r.config.globalProperties,pe(_,t)?_[t]:void 0)},set({_:e},t,a){const{data:l,setupState:n,ctx:s}=e;return n!==le&&pe(n,t)?(n[t]=a,!0):l!==le&&pe(l,t)?(l[t]=a,!0):!(pe(e.props,t)||"$"===t[0]&&t.slice(1)in e||(s[t]=a,0))},has({_:{data:e,setupState:t,accessCache:a,ctx:l,appContext:n,propsOptions:s}},o){let i;return!!a[o]||e!==le&&pe(e,o)||t!==le&&pe(t,o)||(i=s[0])&&pe(i,o)||pe(l,o)||pe(jn,o)||pe(n.config.globalProperties,o)},defineProperty(e,t,a){return null!=a.get?e._.accessCache[t]=0:pe(a,"value")&&this.set(e,t,a.value,null),Reflect.defineProperty(e,t,a)}},Ln=ue({},Mn,{get(e,t){if(t!==Symbol.unscopables)return Mn.get(e,t,e)},has:(e,t)=>"_"!==t[0]&&!z(t)});let Fn=!0;function Rn(e,t,a){Oa(fe(e)?e.map((e=>e.bind(t.proxy))):e.bind(t.proxy),t,a)}function Dn(e,t,a,l){const n=l.includes(".")?Fl(a,l):()=>a[l];if(be(e)){const a=t[e];ge(a)&&jl(n,a)}else if(ge(e))jl(n,e.bind(a));else if(we(e))if(fe(e))e.forEach((e=>Dn(e,t,a,l)));else{const l=ge(e.handler)?e.handler.bind(a):t[e.handler];ge(l)&&jl(n,l,e)}}function zn(e){const t=e.type,{mixins:a,extends:l}=t,{mixins:n,optionsCache:s,config:{optionMergeStrategies:o}}=e.appContext,i=s.get(t);let r;return i?r=i:n.length||a||l?(r={},n.length&&n.forEach((e=>qn(r,e,o,!0))),qn(r,t,o)):r=t,s.set(t,r),r}function qn(e,t,a,l=!1){const{mixins:n,extends:s}=t;s&&qn(e,s,a,!0),n&&n.forEach((t=>qn(e,t,a,!0)));for(const n in t)if(l&&"expose"===n);else{const l=Bn[n]||a&&a[n];e[n]=l?l(e[n],t[n]):t[n]}return e}const Bn={data:Vn,props:Wn,emits:Wn,methods:Wn,computed:Wn,beforeCreate:Gn,created:Gn,beforeMount:Gn,mounted:Gn,beforeUpdate:Gn,updated:Gn,beforeDestroy:Gn,beforeUnmount:Gn,destroyed:Gn,unmounted:Gn,activated:Gn,deactivated:Gn,errorCaptured:Gn,serverPrefetch:Gn,components:Wn,directives:Wn,watch:function(e,t){if(!e)return t;if(!t)return e;const a=ue(Object.create(null),e);for(const l in t)a[l]=Gn(e[l],t[l]);return a},provide:Vn,inject:function(e,t){return Wn(Hn(e),Hn(t))}};function Vn(e,t){return t?e?function(){return ue(ge(e)?e.call(this,this):e,ge(t)?t.call(this,this):t)}:t:e}function Hn(e){if(fe(e)){const t={};for(let a=0;a<e.length;a++)t[e[a]]=e[a];return t}return e}function Gn(e,t){return e?[...new Set([].concat(e,t))]:t}function Wn(e,t){return e?ue(ue(Object.create(null),e),t):t}function Kn(e,t,a,l){const[n,s]=e.propsOptions;let o,i=!1;if(t)for(let r in t){if(Ce(r))continue;const c=t[r];let u;n&&pe(n,u=Pe(r))?s&&s.includes(u)?(o||(o={}))[u]=c:a[u]=c:cl(e.emitsOptions,r)||r in l&&c===l[r]||(l[r]=c,i=!0)}if(s){const t=ra(a),l=o||le;for(let o=0;o<s.length;o++){const i=s[o];a[i]=Jn(n,t,i,l[i],e,!pe(l,i))}}return i}function Jn(e,t,a,l,n,s){const o=e[a];if(null!=o){const e=pe(o,"default");if(e&&void 0===l){const e=o.default;if(o.type!==Function&&ge(e)){const{propsDefaults:s}=n;a in s?l=s[a]:(oo(n),l=s[a]=e.call(null,t),io())}else l=e}o[0]&&(s&&!e?l=!1:!o[1]||""!==l&&l!==Ie(a)||(l=!0))}return l}function Yn(e,t,a=!1){const l=t.propsCache,n=l.get(e);if(n)return n;const s=e.props,o={},i=[];let r=!1;if(!ge(e)){const l=e=>{r=!0;const[a,l]=Yn(e,t,!0);ue(o,a),l&&i.push(...l)};!a&&t.mixins.length&&t.mixins.forEach(l),e.extends&&l(e.extends),e.mixins&&e.mixins.forEach(l)}if(!s&&!r)return l.set(e,ne),ne;if(fe(s))for(let e=0;e<s.length;e++){const t=Pe(s[e]);Zn(t)&&(o[t]=le)}else if(s)for(const e in s){const t=Pe(e);if(Zn(t)){const a=s[e],l=o[t]=fe(a)||ge(a)?{type:a}:a;if(l){const e=es(Boolean,l.type),a=es(String,l.type);l[0]=e>-1,l[1]=a<0||e<a,(e>-1||pe(l,"default"))&&i.push(t)}}}const c=[o,i];return l.set(e,c),c}function Zn(e){return"$"!==e[0]}function Xn(e){const t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:null===e?"null":""}function Qn(e,t){return Xn(e)===Xn(t)}function es(e,t){return fe(t)?t.findIndex((t=>Qn(t,e))):ge(t)&&Qn(t,e)?0:-1}const ts=e=>"_"===e[0]||"$stable"===e,as=e=>fe(e)?e.map(Zs):[Zs(e)],ls=(e,t,a)=>{if(t._n)return t;const l=ml(((...e)=>as(t(...e))),a);return l._c=!1,l},ns=(e,t,a)=>{const l=e._ctx;for(const a in e){if(ts(a))continue;const n=e[a];if(ge(n))t[a]=ls(0,n,l);else if(null!=n){const e=as(n);t[a]=()=>e}}},ss=(e,t)=>{const a=as(t);e.slots.default=()=>a};function os(){return{app:null,config:{isNativeTag:oe,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let is=0;function rs(e,t){return function(a,l=null){ge(a)||(a=Object.assign({},a)),null==l||we(l)||(l=null);const n=os(),s=new Set;let o=!1;const i=n.app={_uid:is++,_component:a,_props:l,_container:null,_context:n,_instance:null,version:Ro,get config(){return n.config},set config(e){},use:(e,...t)=>(s.has(e)||(e&&ge(e.install)?(s.add(e),e.install(i,...t)):ge(e)&&(s.add(e),e(i,...t))),i),mixin:e=>(n.mixins.includes(e)||n.mixins.push(e),i),component:(e,t)=>t?(n.components[e]=t,i):n.components[e],directive:(e,t)=>t?(n.directives[e]=t,i):n.directives[e],mount(s,r,c){if(!o){const u=Hs(a,l);return u.appContext=n,r&&t?t(u,s):e(u,s,c),o=!0,i._container=s,s.__vue_app__=i,go(u.component)||u.component.proxy}},unmount(){o&&(e(null,i._container),delete i._container.__vue_app__)},provide:(e,t)=>(n.provides[e]=t,i)};return i}}function cs(e,t,a,l,n=!1){if(fe(e))return void e.forEach(((e,s)=>cs(e,t&&(fe(t)?t[s]:t),a,l,n)));if(Yl(l)&&!n)return;const s=4&l.shapeFlag?go(l.component)||l.component.proxy:l.el,o=n?null:s,{i:i,r:r}=e,c=t&&t.r,u=i.refs===le?i.refs={}:i.refs,d=i.setupState;if(null!=c&&c!==r&&(be(c)?(u[c]=null,pe(d,c)&&(d[c]=null)):fa(c)&&(c.value=null)),ge(r))Ia(r,i,12,[o,u]);else{const t=be(r),l=fa(r);if(t||l){const i=()=>{if(e.f){const a=t?u[r]:r.value;n?fe(a)&&de(a,s):fe(a)?a.includes(s)||a.push(s):t?(u[r]=[s],pe(d,r)&&(d[r]=u[r])):(r.value=[s],e.k&&(u[e.k]=r.value))}else t?(u[r]=o,pe(d,r)&&(d[r]=o)):l&&(r.value=o,e.k&&(u[e.k]=o))};o?(i.id=-1,fs(i,a)):i()}}}let us=!1;const ds=e=>/svg/.test(e.namespaceURI)&&"foreignObject"!==e.tagName,_s=e=>8===e.nodeType;function ps(e){const{mt:t,p:a,o:{patchProp:l,createText:n,nextSibling:s,parentNode:o,remove:i,insert:r,createComment:c}}=e,u=(a,l,i,c,m,h=!1)=>{const g=_s(a)&&"["===a.data,b=()=>f(a,l,i,c,m,g),{type:y,ref:w,shapeFlag:x,patchFlag:k}=l,$=a.nodeType;l.el=a,-2===k&&(h=!1,l.dynamicChildren=null);let S=null;switch(y){case Ns:3!==$?""===l.children?(r(l.el=n(""),o(a),a),S=a):S=b():(a.data!==l.children&&(us=!0,a.data=l.children),S=s(a));break;case Cs:S=8!==$||g?b():s(a);break;case As:if(1===$||3===$){S=a;const e=!l.children.length;for(let t=0;t<l.staticCount;t++)e&&(l.children+=1===S.nodeType?S.outerHTML:S.data),t===l.staticCount-1&&(l.anchor=S),S=s(S);return S}S=b();break;case Ss:S=g?p(a,l,i,c,m,h):b();break;default:if(1&x)S=1!==$||l.type.toLowerCase()!==a.tagName.toLowerCase()?b():d(a,l,i,c,m,h);else if(6&x){l.slotScopeIds=m;const e=o(a);if(t(l,e,null,i,c,ds(e),h),S=g?v(a):s(a),S&&_s(S)&&"teleport end"===S.data&&(S=s(S)),Yl(l)){let t;g?(t=Hs(Ss),t.anchor=S?S.previousSibling:e.lastChild):t=3===a.nodeType?Ks(""):Hs("div"),t.el=a,l.component.subTree=t}}else 64&x?S=8!==$?b():l.type.hydrate(a,l,i,c,m,h,e,_):128&x&&(S=l.type.hydrate(a,l,i,c,ds(o(a)),m,h,e,u))}return null!=w&&cs(w,null,c,l),S},d=(e,t,a,n,s,o)=>{o=o||!!t.dynamicChildren;const{type:r,props:c,patchFlag:u,shapeFlag:d,dirs:p}=t,f="input"===r&&p||"option"===r;if(f||-1!==u){if(p&&xn(t,null,a,"created"),c)if(f||!o||48&u)for(const t in c)(f&&t.endsWith("value")||re(t)&&!Ce(t))&&l(e,t,null,c[t],!1,void 0,a);else c.onClick&&l(e,"onClick",null,c.onClick,!1,void 0,a);let r;if((r=c&&c.onVnodeBeforeMount)&&to(r,a,t),p&&xn(t,null,a,"beforeMount"),((r=c&&c.onVnodeMounted)||p)&&Cl((()=>{r&&to(r,a,t),p&&xn(t,null,a,"mounted")}),n),16&d&&(!c||!c.innerHTML&&!c.textContent)){let l=_(e.firstChild,t,e,a,n,s,o);for(;l;){us=!0;const e=l;l=l.nextSibling,i(e)}}else 8&d&&e.textContent!==t.children&&(us=!0,e.textContent=t.children)}return e.nextSibling},_=(e,t,l,n,s,o,i)=>{i=i||!!t.dynamicChildren;const r=t.children,c=r.length;for(let t=0;t<c;t++){const c=i?r[t]:r[t]=Zs(r[t]);if(e)e=u(e,c,n,s,o,i);else{if(c.type===Ns&&!c.children)continue;us=!0,a(null,c,l,null,n,s,ds(l),o)}}return e},p=(e,t,a,l,n,i)=>{const{slotScopeIds:u}=t;u&&(n=n?n.concat(u):u);const d=o(e),p=_(s(e),t,d,a,l,n,i);return p&&_s(p)&&"]"===p.data?s(t.anchor=p):(us=!0,r(t.anchor=c("]"),d,p),p)},f=(e,t,l,n,r,c)=>{if(us=!0,t.el=null,c){const t=v(e);for(;;){const a=s(e);if(!a||a===t)break;i(a)}}const u=s(e),d=o(e);return i(e),a(null,t,d,u,l,n,ds(d),r),u},v=e=>{let t=0;for(;e;)if((e=s(e))&&_s(e)&&("["===e.data&&t++,"]"===e.data)){if(0===t)return s(e);t--}return e};return[(e,t)=>{if(!t.hasChildNodes())return a(null,e,t),tl(),void(t._vnode=e);us=!1,u(t.firstChild,e,null,null,null),tl(),t._vnode=e,us&&console.error("Hydration completed but contains mismatches.")},u]}const fs=Cl;function vs(e){return hs(e)}function ms(e){return hs(e,ps)}function hs(e,t){(De||(De="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{})).__VUE__=!0;const{insert:a,remove:l,patchProp:n,createElement:s,createText:o,createComment:i,setText:r,setElementText:c,parentNode:u,nextSibling:d,setScopeId:_=se,cloneNode:p,insertStaticContent:f}=e,v=(e,t,a,l=null,n=null,s=null,o=!1,i=null,r=!!t.dynamicChildren)=>{if(e===t)return;e&&!Rs(e,t)&&(l=z(e),M(e,n,s,!0),e=null),-2===t.patchFlag&&(r=!1,t.dynamicChildren=null);const{type:c,ref:u,shapeFlag:d}=t;switch(c){case Ns:m(e,t,a,l);break;case Cs:h(e,t,a,l);break;case As:null==e&&g(t,a,l,o);break;case Ss:N(e,t,a,l,n,s,o,i,r);break;default:1&d?b(e,t,a,l,n,s,o,i,r):6&d?C(e,t,a,l,n,s,o,i,r):(64&d||128&d)&&c.process(e,t,a,l,n,s,o,i,r,B)}null!=u&&n&&cs(u,e&&e.ref,s,t||e,!t)},m=(e,t,l,n)=>{if(null==e)a(t.el=o(t.children),l,n);else{const a=t.el=e.el;t.children!==e.children&&r(a,t.children)}},h=(e,t,l,n)=>{null==e?a(t.el=i(t.children||""),l,n):t.el=e.el},g=(e,t,a,l)=>{[e.el,e.anchor]=f(e.children,t,a,l,e.el,e.anchor)},b=(e,t,a,l,n,s,o,i,r)=>{o=o||"svg"===t.type,null==e?y(t,a,l,n,s,o,i,r):k(e,t,n,s,o,i,r)},y=(e,t,l,o,i,r,u,d)=>{let _,f;const{type:v,props:m,shapeFlag:h,transition:g,patchFlag:b,dirs:y}=e;if(e.el&&void 0!==p&&-1===b)_=e.el=p(e.el);else{if(_=e.el=s(e.type,r,m&&m.is,m),8&h?c(_,e.children):16&h&&x(e.children,_,null,o,i,r&&"foreignObject"!==v,u,d),y&&xn(e,null,o,"created"),m){for(const t in m)"value"===t||Ce(t)||n(_,t,null,m[t],r,e.children,o,i,D);"value"in m&&n(_,"value",null,m.value),(f=m.onVnodeBeforeMount)&&to(f,o,e)}w(_,e,e.scopeId,u,o)}y&&xn(e,null,o,"beforeMount");const k=(!i||i&&!i.pendingBranch)&&g&&!g.persisted;k&&g.beforeEnter(_),a(_,t,l),((f=m&&m.onVnodeMounted)||k||y)&&fs((()=>{f&&to(f,o,e),k&&g.enter(_),y&&xn(e,null,o,"mounted")}),i)},w=(e,t,a,l,n)=>{if(a&&_(e,a),l)for(let t=0;t<l.length;t++)_(e,l[t]);if(n&&t===n.subTree){const t=n.vnode;w(e,t,t.scopeId,t.slotScopeIds,n.parent)}},x=(e,t,a,l,n,s,o,i,r=0)=>{for(let c=r;c<e.length;c++){const r=e[c]=i?Xs(e[c]):Zs(e[c]);v(null,r,t,a,l,n,s,o,i)}},k=(e,t,a,l,s,o,i)=>{const r=t.el=e.el;let{patchFlag:u,dynamicChildren:d,dirs:_}=t;u|=16&e.patchFlag;const p=e.props||le,f=t.props||le;let v;a&&gs(a,!1),(v=f.onVnodeBeforeUpdate)&&to(v,a,t,e),_&&xn(t,e,a,"beforeUpdate"),a&&gs(a,!0);const m=s&&"foreignObject"!==t.type;if(d?$(e.dynamicChildren,d,r,a,l,m,o):i||U(e,t,r,null,a,l,m,o,!1),u>0){if(16&u)S(r,t,p,f,a,l,s);else if(2&u&&p.class!==f.class&&n(r,"class",null,f.class,s),4&u&&n(r,"style",p.style,f.style,s),8&u){const o=t.dynamicProps;for(let t=0;t<o.length;t++){const i=o[t],c=p[i],u=f[i];u===c&&"value"!==i||n(r,i,c,u,s,e.children,a,l,D)}}1&u&&e.children!==t.children&&c(r,t.children)}else i||null!=d||S(r,t,p,f,a,l,s);((v=f.onVnodeUpdated)||_)&&fs((()=>{v&&to(v,a,t,e),_&&xn(t,e,a,"updated")}),l)},$=(e,t,a,l,n,s,o)=>{for(let i=0;i<t.length;i++){const r=e[i],c=t[i],d=r.el&&(r.type===Ss||!Rs(r,c)||70&r.shapeFlag)?u(r.el):a;v(r,c,d,null,l,n,s,o,!0)}},S=(e,t,a,l,s,o,i)=>{if(a!==l){for(const r in l){if(Ce(r))continue;const c=l[r],u=a[r];c!==u&&"value"!==r&&n(e,r,u,c,i,t.children,s,o,D)}if(a!==le)for(const r in a)Ce(r)||r in l||n(e,r,a[r],null,i,t.children,s,o,D);"value"in l&&n(e,"value",a.value,l.value)}},N=(e,t,l,n,s,i,r,c,u)=>{const d=t.el=e?e.el:o(""),_=t.anchor=e?e.anchor:o("");let{patchFlag:p,dynamicChildren:f,slotScopeIds:v}=t;v&&(c=c?c.concat(v):v),null==e?(a(d,l,n),a(_,l,n),x(t.children,l,_,s,i,r,c,u)):p>0&&64&p&&f&&e.dynamicChildren?($(e.dynamicChildren,f,l,s,i,r,c),(null!=t.key||s&&t===s.subTree)&&bs(e,t,!0)):U(e,t,l,_,s,i,r,c,u)},C=(e,t,a,l,n,s,o,i,r)=>{t.slotScopeIds=i,null==e?512&t.shapeFlag?n.ctx.activate(t,a,l,o,r):A(t,a,l,n,s,o,r):E(e,t,r)},A=(e,t,a,l,n,s,o)=>{const i=e.component=function(e,t,a){const l=e.type,n=(t?t.appContext:e.appContext)||ao,s={uid:lo++,vnode:e,type:l,parent:t,appContext:n,root:null,next:null,subTree:null,effect:null,update:null,scope:new qe(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:t?t.provides:Object.create(n.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:Yn(l,n),emitsOptions:rl(l,n),emit:null,emitted:null,propsDefaults:le,inheritAttrs:l.inheritAttrs,ctx:le,data:le,props:le,attrs:le,slots:le,refs:le,setupState:le,setupContext:null,suspense:a,suspenseId:a?a.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return s.ctx={_:s},s.root=t?t.root:s,s.emit=il.bind(null,s),e.ce&&e.ce(s),s}(e,l,n);if(Ql(e)&&(i.ctx.renderer=B),function(e,t=!1){_o=t;const{props:a,children:l}=e.vnode,n=ro(e);(function(e,t,a,l=!1){const n={},s={};Fe(s,zs,1),e.propsDefaults=Object.create(null),Kn(e,t,n,s);for(const t in e.propsOptions[0])t in n||(n[t]=void 0);e.props=a?l?n:ea(n):e.type.props?n:s,e.attrs=s})(e,a,n,t),((e,t)=>{if(32&e.vnode.shapeFlag){const a=t._;a?(e.slots=ra(t),Fe(t,"_",a)):ns(t,e.slots={})}else e.slots={},t&&ss(e,t);Fe(e.slots,zs,1)})(e,l),n&&function(e,t){const a=e.type;e.accessCache=Object.create(null),e.proxy=ca(new Proxy(e.ctx,Mn));const{setup:l}=a;if(l){const a=e.setupContext=l.length>1?ho(e):null;oo(e),rt();const n=Ia(l,e,0,[e.props,a]);if(ct(),io(),xe(n)){if(n.then(io,io),t)return n.then((a=>{po(e,a,t)})).catch((t=>{ja(t,e,0)}));e.asyncDep=n}else po(e,n,t)}else mo(e,t)}(e,t),_o=!1}(i),i.asyncDep){if(n&&n.registerDep(i,T),!e.el){const e=i.subTree=Hs(Cs);h(null,e,t,a)}}else T(i,e,t,a,n,s,o)},E=(e,t,a)=>{const l=t.component=e.component;if(function(e,t,a){const{props:l,children:n,component:s}=e,{props:o,children:i,patchFlag:r}=t,c=s.emitsOptions;if(t.dirs||t.transition)return!0;if(!(a&&r>=0))return!(!n&&!i||i&&i.$stable)||l!==o&&(l?!o||yl(l,o,c):!!o);if(1024&r)return!0;if(16&r)return l?yl(l,o,c):!!o;if(8&r){const e=t.dynamicProps;for(let t=0;t<e.length;t++){const a=e[t];if(o[a]!==l[a]&&!cl(c,a))return!0}}return!1}(e,t,a)){if(l.asyncDep&&!l.asyncResolved)return void P(l,t,a);l.next=t,function(e){const t=Fa.indexOf(e);t>Ra&&Fa.splice(t,1)}(l.update),l.update()}else t.el=e.el,l.vnode=t},T=(e,t,a,l,n,s,o)=>{const i=e.effect=new at((()=>{if(e.isMounted){let t,{next:a,bu:l,u:i,parent:r,vnode:c}=e,d=a;gs(e,!1),a?(a.el=c.el,P(e,a,o)):a=c,l&&Le(l),(t=a.props&&a.props.onVnodeBeforeUpdate)&&to(t,r,a,c),gs(e,!0);const _=hl(e),p=e.subTree;e.subTree=_,v(p,_,u(p.el),z(p),e,n,s),a.el=_.el,null===d&&wl(e,_.el),i&&fs(i,n),(t=a.props&&a.props.onVnodeUpdated)&&fs((()=>to(t,r,a,c)),n)}else{let o;const{el:i,props:r}=t,{bm:c,m:u,parent:d}=e,_=Yl(t);if(gs(e,!1),c&&Le(c),!_&&(o=r&&r.onVnodeBeforeMount)&&to(o,d,t),gs(e,!0),i&&H){const a=()=>{e.subTree=hl(e),H(i,e.subTree,e,n,null)};_?t.type.__asyncLoader().then((()=>!e.isUnmounted&&a())):a()}else{const o=e.subTree=hl(e);v(null,o,a,l,e,n,s),t.el=o.el}if(u&&fs(u,n),!_&&(o=r&&r.onVnodeMounted)){const e=t;fs((()=>to(o,d,e)),n)}(256&t.shapeFlag||d&&Yl(d.vnode)&&256&d.vnode.shapeFlag)&&e.a&&fs(e.a,n),e.isMounted=!0,t=a=l=null}}),(()=>Ya(r)),e.scope),r=e.update=()=>i.run();r.id=e.uid,gs(e,!0),r()},P=(e,t,a)=>{t.component=e;const l=e.vnode.props;e.vnode=t,e.next=null,function(e,t,a,l){const{props:n,attrs:s,vnode:{patchFlag:o}}=e,i=ra(n),[r]=e.propsOptions;let c=!1;if(!(l||o>0)||16&o){let l;Kn(e,t,n,s)&&(c=!0);for(const s in i)t&&(pe(t,s)||(l=Ie(s))!==s&&pe(t,l))||(r?!a||void 0===a[s]&&void 0===a[l]||(n[s]=Jn(r,i,s,void 0,e,!0)):delete n[s]);if(s!==i)for(const e in s)t&&pe(t,e)||(delete s[e],c=!0)}else if(8&o){const a=e.vnode.dynamicProps;for(let l=0;l<a.length;l++){let o=a[l];if(cl(e.emitsOptions,o))continue;const u=t[o];if(r)if(pe(s,o))u!==s[o]&&(s[o]=u,c=!0);else{const t=Pe(o);n[t]=Jn(r,i,t,u,e,!1)}else u!==s[o]&&(s[o]=u,c=!0)}}c&&_t(e,"set","$attrs")}(e,t.props,l,a),((e,t,a)=>{const{vnode:l,slots:n}=e;let s=!0,o=le;if(32&l.shapeFlag){const e=t._;e?a&&1===e?s=!1:(ue(n,t),a||1!==e||delete n._):(s=!t.$stable,ns(t,n)),o=t}else t&&(ss(e,t),o={default:1});if(s)for(const e in n)ts(e)||e in o||delete n[e]})(e,t.children,a),rt(),el(void 0,e.update),ct()},U=(e,t,a,l,n,s,o,i,r=!1)=>{const u=e&&e.children,d=e?e.shapeFlag:0,_=t.children,{patchFlag:p,shapeFlag:f}=t;if(p>0){if(128&p)return void O(u,_,a,l,n,s,o,i,r);if(256&p)return void I(u,_,a,l,n,s,o,i,r)}8&f?(16&d&&D(u,n,s),_!==u&&c(a,_)):16&d?16&f?O(u,_,a,l,n,s,o,i,r):D(u,n,s,!0):(8&d&&c(a,""),16&f&&x(_,a,l,n,s,o,i,r))},I=(e,t,a,l,n,s,o,i,r)=>{const c=(e=e||ne).length,u=(t=t||ne).length,d=Math.min(c,u);let _;for(_=0;_<d;_++){const l=t[_]=r?Xs(t[_]):Zs(t[_]);v(e[_],l,a,null,n,s,o,i,r)}c>u?D(e,n,s,!0,!1,d):x(t,a,l,n,s,o,i,r,d)},O=(e,t,a,l,n,s,o,i,r)=>{let c=0;const u=t.length;let d=e.length-1,_=u-1;for(;c<=d&&c<=_;){const l=e[c],u=t[c]=r?Xs(t[c]):Zs(t[c]);if(!Rs(l,u))break;v(l,u,a,null,n,s,o,i,r),c++}for(;c<=d&&c<=_;){const l=e[d],c=t[_]=r?Xs(t[_]):Zs(t[_]);if(!Rs(l,c))break;v(l,c,a,null,n,s,o,i,r),d--,_--}if(c>d){if(c<=_){const e=_+1,d=e<u?t[e].el:l;for(;c<=_;)v(null,t[c]=r?Xs(t[c]):Zs(t[c]),a,d,n,s,o,i,r),c++}}else if(c>_)for(;c<=d;)M(e[c],n,s,!0),c++;else{const p=c,f=c,m=new Map;for(c=f;c<=_;c++){const e=t[c]=r?Xs(t[c]):Zs(t[c]);null!=e.key&&m.set(e.key,c)}let h,g=0;const b=_-f+1;let y=!1,w=0;const x=new Array(b);for(c=0;c<b;c++)x[c]=0;for(c=p;c<=d;c++){const l=e[c];if(g>=b){M(l,n,s,!0);continue}let u;if(null!=l.key)u=m.get(l.key);else for(h=f;h<=_;h++)if(0===x[h-f]&&Rs(l,t[h])){u=h;break}void 0===u?M(l,n,s,!0):(x[u-f]=c+1,u>=w?w=u:y=!0,v(l,t[u],a,null,n,s,o,i,r),g++)}const k=y?function(e){const t=e.slice(),a=[0];let l,n,s,o,i;const r=e.length;for(l=0;l<r;l++){const r=e[l];if(0!==r){if(n=a[a.length-1],e[n]<r){t[l]=n,a.push(l);continue}for(s=0,o=a.length-1;s<o;)i=s+o>>1,e[a[i]]<r?s=i+1:o=i;r<e[a[s]]&&(s>0&&(t[l]=a[s-1]),a[s]=l)}}for(s=a.length,o=a[s-1];s-- >0;)a[s]=o,o=t[o];return a}(x):ne;for(h=k.length-1,c=b-1;c>=0;c--){const e=f+c,d=t[e],_=e+1<u?t[e+1].el:l;0===x[c]?v(null,d,a,_,n,s,o,i,r):y&&(h<0||c!==k[h]?j(d,a,_,2):h--)}}},j=(e,t,l,n,s=null)=>{const{el:o,type:i,transition:r,children:c,shapeFlag:u}=e;if(6&u)j(e.component.subTree,t,l,n);else if(128&u)e.suspense.move(t,l,n);else if(64&u)i.move(e,t,l,B);else if(i!==Ss)if(i!==As)if(2!==n&&1&u&&r)if(0===n)r.beforeEnter(o),a(o,t,l),fs((()=>r.enter(o)),s);else{const{leave:e,delayLeave:n,afterLeave:s}=r,i=()=>a(o,t,l),c=()=>{e(o,(()=>{i(),s&&s()}))};n?n(o,i,c):c()}else a(o,t,l);else(({el:e,anchor:t},l,n)=>{let s;for(;e&&e!==t;)s=d(e),a(e,l,n),e=s;a(t,l,n)})(e,t,l);else{a(o,t,l);for(let e=0;e<c.length;e++)j(c[e],t,l,n);a(e.anchor,t,l)}},M=(e,t,a,l=!1,n=!1)=>{const{type:s,props:o,ref:i,children:r,dynamicChildren:c,shapeFlag:u,patchFlag:d,dirs:_}=e;if(null!=i&&cs(i,null,a,e,!0),256&u)return void t.ctx.deactivate(e);const p=1&u&&_,f=!Yl(e);let v;if(f&&(v=o&&o.onVnodeBeforeUnmount)&&to(v,t,e),6&u)R(e.component,a,l);else{if(128&u)return void e.suspense.unmount(a,l);p&&xn(e,null,t,"beforeUnmount"),64&u?e.type.remove(e,t,a,n,B,l):c&&(s!==Ss||d>0&&64&d)?D(c,t,a,!1,!0):(s===Ss&&384&d||!n&&16&u)&&D(r,t,a),l&&L(e)}(f&&(v=o&&o.onVnodeUnmounted)||p)&&fs((()=>{v&&to(v,t,e),p&&xn(e,null,t,"unmounted")}),a)},L=e=>{const{type:t,el:a,anchor:n,transition:s}=e;if(t===Ss)return void F(a,n);if(t===As)return void(({el:e,anchor:t})=>{let a;for(;e&&e!==t;)a=d(e),l(e),e=a;l(t)})(e);const o=()=>{l(a),s&&!s.persisted&&s.afterLeave&&s.afterLeave()};if(1&e.shapeFlag&&s&&!s.persisted){const{leave:t,delayLeave:l}=s,n=()=>t(a,o);l?l(e.el,o,n):n()}else o()},F=(e,t)=>{let a;for(;e!==t;)a=d(e),l(e),e=a;l(t)},R=(e,t,a)=>{const{bum:l,scope:n,update:s,subTree:o,um:i}=e;l&&Le(l),n.stop(),s&&(s.active=!1,M(o,e,t,a)),i&&fs(i,t),fs((()=>{e.isUnmounted=!0}),t),t&&t.pendingBranch&&!t.isUnmounted&&e.asyncDep&&!e.asyncResolved&&e.suspenseId===t.pendingId&&(t.deps--,0===t.deps&&t.resolve())},D=(e,t,a,l=!1,n=!1,s=0)=>{for(let o=s;o<e.length;o++)M(e[o],t,a,l,n)},z=e=>6&e.shapeFlag?z(e.component.subTree):128&e.shapeFlag?e.suspense.next():d(e.anchor||e.el),q=(e,t,a)=>{null==e?t._vnode&&M(t._vnode,null,null,!0):v(t._vnode||null,e,t,null,null,null,a),tl(),t._vnode=e},B={p:v,um:M,m:j,r:L,mt:A,mc:x,pc:U,pbc:$,n:z,o:e};let V,H;return t&&([V,H]=t(B)),{render:q,hydrate:V,createApp:rs(q,V)}}function gs({effect:e,update:t},a){e.allowRecurse=t.allowRecurse=a}function bs(e,t,a=!1){const l=e.children,n=t.children;if(fe(l)&&fe(n))for(let e=0;e<l.length;e++){const t=l[e];let s=n[e];1&s.shapeFlag&&!s.dynamicChildren&&((s.patchFlag<=0||32===s.patchFlag)&&(s=n[e]=Xs(n[e]),s.el=t.el),a||bs(t,s))}}const ys=e=>e&&(e.disabled||""===e.disabled),ws=e=>"undefined"!=typeof SVGElement&&e instanceof SVGElement,xs=(e,t)=>{const a=e&&e.to;return be(a)?t?t(a):null:a};function ks(e,t,a,{o:{insert:l},m:n},s=2){0===s&&l(e.targetAnchor,t,a);const{el:o,anchor:i,shapeFlag:r,children:c,props:u}=e,d=2===s;if(d&&l(o,t,a),(!d||ys(u))&&16&r)for(let e=0;e<c.length;e++)n(c[e],t,a,2);d&&l(i,t,a)}const $s={__isTeleport:!0,process(e,t,a,l,n,s,o,i,r,c){const{mc:u,pc:d,pbc:_,o:{insert:p,querySelector:f,createText:v}}=c,m=ys(t.props);let{shapeFlag:h,children:g,dynamicChildren:b}=t;if(null==e){const e=t.el=v(""),c=t.anchor=v("");p(e,a,l),p(c,a,l);const d=t.target=xs(t.props,f),_=t.targetAnchor=v("");d&&(p(_,d),o=o||ws(d));const b=(e,t)=>{16&h&&u(g,e,t,n,s,o,i,r)};m?b(a,c):d&&b(d,_)}else{t.el=e.el;const l=t.anchor=e.anchor,u=t.target=e.target,p=t.targetAnchor=e.targetAnchor,v=ys(e.props),h=v?a:u,g=v?l:p;if(o=o||ws(u),b?(_(e.dynamicChildren,b,h,n,s,o,i),bs(e,t,!0)):r||d(e,t,h,g,n,s,o,i,!1),m)v||ks(t,a,l,c,1);else if((t.props&&t.props.to)!==(e.props&&e.props.to)){const e=t.target=xs(t.props,f);e&&ks(t,e,null,c,0)}else v&&ks(t,u,p,c,1)}},remove(e,t,a,l,{um:n,o:{remove:s}},o){const{shapeFlag:i,children:r,anchor:c,targetAnchor:u,target:d,props:_}=e;if(d&&s(u),(o||!ys(_))&&(s(c),16&i))for(let e=0;e<r.length;e++){const l=r[e];n(l,t,a,!0,!!l.dynamicChildren)}},move:ks,hydrate:function(e,t,a,l,n,s,{o:{nextSibling:o,parentNode:i,querySelector:r}},c){const u=t.target=xs(t.props,r);if(u){const r=u._lpa||u.firstChild;if(16&t.shapeFlag)if(ys(t.props))t.anchor=c(o(e),t,i(e),a,l,n,s),t.targetAnchor=r;else{t.anchor=o(e);let i=r;for(;i;)if(i=o(i),i&&8===i.nodeType&&"teleport anchor"===i.data){t.targetAnchor=i,u._lpa=t.targetAnchor&&o(t.targetAnchor);break}c(r,t,u,a,l,n,s)}}return t.anchor&&o(t.anchor)}},Ss=Symbol(void 0),Ns=Symbol(void 0),Cs=Symbol(void 0),As=Symbol(void 0),Es=[];let Ts=null;function Ps(e=!1){Es.push(Ts=e?null:[])}function Us(){Es.pop(),Ts=Es[Es.length-1]||null}let Is=1;function Os(e){Is+=e}function js(e){return e.dynamicChildren=Is>0?Ts||ne:null,Us(),Is>0&&Ts&&Ts.push(e),e}function Ms(e,t,a,l,n,s){return js(Vs(e,t,a,l,n,s,!0))}function Ls(e,t,a,l,n){return js(Hs(e,t,a,l,n,!0))}function Fs(e){return!!e&&!0===e.__v_isVNode}function Rs(e,t){return e.type===t.type&&e.key===t.key}function Ds(e){}const zs="__vInternal",qs=({key:e})=>null!=e?e:null,Bs=({ref:e,ref_key:t,ref_for:a})=>null!=e?be(e)||fa(e)||ge(e)?{i:ul,r:e,k:t,f:!!a}:e:null;function Vs(e,t=null,a=null,l=0,n=null,s=(e===Ss?0:1),o=!1,i=!1){const r={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&qs(t),ref:t&&Bs(t),scopeId:dl,slotScopeIds:null,children:a,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:s,patchFlag:l,dynamicProps:n,dynamicChildren:null,appContext:null};return i?(Qs(r,a),128&s&&e.normalize(r)):a&&(r.shapeFlag|=be(a)?8:16),Is>0&&!o&&Ts&&(r.patchFlag>0||6&s)&&32!==r.patchFlag&&Ts.push(r),r}const Hs=function(e,t=null,a=null,l=0,n=null,s=!1){if(e&&e!==$n||(e=Cs),Fs(e)){const l=Ws(e,t,!0);return a&&Qs(l,a),Is>0&&!s&&Ts&&(6&l.shapeFlag?Ts[Ts.indexOf(e)]=l:Ts.push(l)),l.patchFlag|=-2,l}var o;if(ge(o=e)&&"__vccOpts"in o&&(e=e.__vccOpts),t){t=Gs(t);let{class:e,style:a}=t;e&&!be(e)&&(t.class=K(e)),we(a)&&(ia(a)&&!fe(a)&&(a=ue({},a)),t.style=V(a))}return Vs(e,t,a,l,n,be(e)?1:xl(e)?128:(e=>e.__isTeleport)(e)?64:we(e)?4:ge(e)?2:0,s,!0)};function Gs(e){return e?ia(e)||zs in e?ue({},e):e:null}function Ws(e,t,a=!1){const{props:l,ref:n,patchFlag:s,children:o}=e,i=t?eo(l||{},t):l;return{__v_isVNode:!0,__v_skip:!0,type:e.type,props:i,key:i&&qs(i),ref:t&&t.ref?a&&n?fe(n)?n.concat(Bs(t)):[n,Bs(t)]:Bs(t):n,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:o,target:e.target,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==Ss?-1===s?16:16|s:s,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:e.transition,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&Ws(e.ssContent),ssFallback:e.ssFallback&&Ws(e.ssFallback),el:e.el,anchor:e.anchor}}function Ks(e=" ",t=0){return Hs(Ns,null,e,t)}function Js(e,t){const a=Hs(As,null,e);return a.staticCount=t,a}function Ys(e="",t=!1){return t?(Ps(),Ls(Cs,null,e)):Hs(Cs,null,e)}function Zs(e){return null==e||"boolean"==typeof e?Hs(Cs):fe(e)?Hs(Ss,null,e.slice()):"object"==typeof e?Xs(e):Hs(Ns,null,String(e))}function Xs(e){return null===e.el||e.memo?e:Ws(e)}function Qs(e,t){let a=0;const{shapeFlag:l}=e;if(null==t)t=null;else if(fe(t))a=16;else if("object"==typeof t){if(65&l){const a=t.default;return void(a&&(a._c&&(a._d=!1),Qs(e,a()),a._c&&(a._d=!0)))}{a=32;const l=t._;l||zs in t?3===l&&ul&&(1===ul.slots._?t._=1:(t._=2,e.patchFlag|=1024)):t._ctx=ul}}else ge(t)?(t={default:t,_ctx:ul},a=32):(t=String(t),64&l?(a=16,t=[Ks(t)]):a=8);e.children=t,e.shapeFlag|=a}function eo(...e){const t={};for(let a=0;a<e.length;a++){const l=e[a];for(const e in l)if("class"===e)t.class!==l.class&&(t.class=K([t.class,l.class]));else if("style"===e)t.style=V([t.style,l.style]);else if(re(e)){const a=t[e],n=l[e];!n||a===n||fe(a)&&a.includes(n)||(t[e]=a?[].concat(a,n):n)}else""!==e&&(t[e]=l[e])}return t}function to(e,t,a,l=null){Oa(e,t,7,[a,l])}const ao=os();let lo=0,no=null;const so=()=>no||ul,oo=e=>{no=e,e.scope.on()},io=()=>{no&&no.scope.off(),no=null};function ro(e){return 4&e.vnode.shapeFlag}let co,uo,_o=!1;function po(e,t,a){ge(t)?e.render=t:we(t)&&(e.setupState=xa(t)),mo(e,a)}function fo(e){co=e,uo=e=>{e.render._rc&&(e.withProxy=new Proxy(e.ctx,Ln))}}const vo=()=>!co;function mo(e,t,a){const l=e.type;if(!e.render){if(!t&&co&&!l.render){const t=l.template;if(t){const{isCustomElement:a,compilerOptions:n}=e.appContext.config,{delimiters:s,compilerOptions:o}=l,i=ue(ue({isCustomElement:a,delimiters:s},n),o);l.render=co(t,i)}}e.render=l.render||se,uo&&uo(e)}oo(e),rt(),function(e){const t=zn(e),a=e.proxy,l=e.ctx;Fn=!1,t.beforeCreate&&Rn(t.beforeCreate,e,"bc");const{data:n,computed:s,methods:o,watch:i,provide:r,inject:c,created:u,beforeMount:d,mounted:_,beforeUpdate:p,updated:f,activated:v,deactivated:m,beforeUnmount:h,unmounted:g,render:b,renderTracked:y,renderTriggered:w,errorCaptured:x,serverPrefetch:k,expose:$,inheritAttrs:S,components:N,directives:C}=t;if(c&&function(e,t,a=se,l=!1){fe(e)&&(e=Hn(e));for(const a in e){const n=e[a];let s;s=we(n)?"default"in n?Tl(n.from||a,n.default,!0):Tl(n.from||a):Tl(n),fa(s)&&l?Object.defineProperty(t,a,{enumerable:!0,configurable:!0,get:()=>s.value,set:e=>s.value=e}):t[a]=s}}(c,l,null,e.appContext.config.unwrapInjectedRef),o)for(const e in o){const t=o[e];ge(t)&&(l[e]=t.bind(a))}if(n){const t=n.call(a,a);we(t)&&(e.data=Qt(t))}if(Fn=!0,s)for(const e in s){const t=s[e],n=ge(t)?t.bind(a,a):ge(t.get)?t.get.bind(a,a):se,o=!ge(t)&&ge(t.set)?t.set.bind(a):se,i=xo({get:n,set:o});Object.defineProperty(l,e,{enumerable:!0,configurable:!0,get:()=>i.value,set:e=>i.value=e})}if(i)for(const e in i)Dn(i[e],l,a,e);if(r){const e=ge(r)?r.call(a):r;Reflect.ownKeys(e).forEach((t=>{El(t,e[t])}))}function A(e,t){fe(t)?t.forEach((t=>e(t.bind(a)))):t&&e(t.bind(a))}if(u&&Rn(u,e,"c"),A(dn,d),A(_n,_),A(pn,p),A(fn,f),A(an,v),A(ln,m),A(yn,x),A(bn,y),A(gn,w),A(vn,h),A(mn,g),A(hn,k),fe($))if($.length){const t=e.exposed||(e.exposed={});$.forEach((e=>{Object.defineProperty(t,e,{get:()=>a[e],set:t=>a[e]=t})}))}else e.exposed||(e.exposed={});b&&e.render===se&&(e.render=b),null!=S&&(e.inheritAttrs=S),N&&(e.components=N),C&&(e.directives=C)}(e),ct(),io()}function ho(e){let t;return{get attrs(){return t||(t=function(e){return new Proxy(e.attrs,{get:(t,a)=>(ut(e,0,"$attrs"),t[a])})}(e))},slots:e.slots,emit:e.emit,expose:t=>{e.exposed=t||{}}}}function go(e){if(e.exposed)return e.exposeProxy||(e.exposeProxy=new Proxy(xa(ca(e.exposed)),{get:(t,a)=>a in t?t[a]:a in jn?jn[a](e):void 0}))}const bo=/(?:^|[-_])(\w)/g;function yo(e,t=!0){return ge(e)?e.displayName||e.name:e.name||t&&e.__name}function wo(e,t,a=!1){let l=yo(t);if(!l&&t.__file){const e=t.__file.match(/([^/\\]+)\.\w+$/);e&&(l=e[1])}if(!l&&e&&e.parent){const a=e=>{for(const a in e)if(e[a]===t)return a};l=a(e.components||e.parent.type.components)||a(e.appContext.components)}return l?l.replace(bo,(e=>e.toUpperCase())).replace(/[-_]/g,""):a?"App":"Anonymous"}const xo=(e,t)=>function(e,t,a=!1){let l,n;const s=ge(e);return s?(l=e,n=se):(l=e.get,n=e.set),new Aa(l,n,s||!n,a)}(e,0,_o);function ko(){return null}function $o(){return null}function So(e){}function No(e,t){return null}function Co(){return Eo().slots}function Ao(){return Eo().attrs}function Eo(){const e=so();return e.setupContext||(e.setupContext=ho(e))}function To(e,t){const a=fe(e)?e.reduce(((e,t)=>(e[t]={},e)),{}):e;for(const e in t){const l=a[e];l?fe(l)||ge(l)?a[e]={type:l,default:t[e]}:l.default=t[e]:null===l&&(a[e]={default:t[e]})}return a}function Po(e,t){const a={};for(const l in e)t.includes(l)||Object.defineProperty(a,l,{enumerable:!0,get:()=>e[l]});return a}function Uo(e){const t=so();let a=e();return io(),xe(a)&&(a=a.catch((e=>{throw oo(t),e}))),[a,()=>oo(t)]}function Io(e,t,a){const l=arguments.length;return 2===l?we(t)&&!fe(t)?Fs(t)?Hs(e,null,[t]):Hs(e,t):Hs(e,null,t):(l>3?a=Array.prototype.slice.call(arguments,2):3===l&&Fs(a)&&(a=[a]),Hs(e,t,a))}const Oo=Symbol(""),jo=()=>{{const e=Tl(Oo);return e||Ta("Server rendering context not provided. Make sure to only call useSSRContext() conditionally in the server build."),e}};function Mo(){}function Lo(e,t,a,l){const n=a[l];if(n&&Fo(n,e))return n;const s=t();return s.memo=e.slice(),a[l]=s}function Fo(e,t){const a=e.memo;if(a.length!=t.length)return!1;for(let e=0;e<a.length;e++)if(Me(a[e],t[e]))return!1;return Is>0&&Ts&&Ts.push(e),!0}const Ro="3.2.37",Do="undefined"!=typeof document?document:null,zo=Do&&Do.createElement("template"),qo={insert:(e,t,a)=>{t.insertBefore(e,a||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,a,l)=>{const n=t?Do.createElementNS("http://www.w3.org/2000/svg",e):Do.createElement(e,a?{is:a}:void 0);return"select"===e&&l&&null!=l.multiple&&n.setAttribute("multiple",l.multiple),n},createText:e=>Do.createTextNode(e),createComment:e=>Do.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>Do.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},cloneNode(e){const t=e.cloneNode(!0);return"_value"in e&&(t._value=e._value),t},insertStaticContent(e,t,a,l,n,s){const o=a?a.previousSibling:t.lastChild;if(n&&(n===s||n.nextSibling))for(;t.insertBefore(n.cloneNode(!0),a),n!==s&&(n=n.nextSibling););else{zo.innerHTML=l?`<svg>${e}</svg>`:e;const n=zo.content;if(l){const e=n.firstChild;for(;e.firstChild;)n.appendChild(e.firstChild);n.removeChild(e)}t.insertBefore(n,a)}return[o?o.nextSibling:t.firstChild,a?a.previousSibling:t.lastChild]}},Bo=/\s*!important$/;function Vo(e,t,a){if(fe(a))a.forEach((a=>Vo(e,t,a)));else if(null==a&&(a=""),t.startsWith("--"))e.setProperty(t,a);else{const l=function(e,t){const a=Go[t];if(a)return a;let l=Pe(t);if("filter"!==l&&l in e)return Go[t]=l;l=Oe(l);for(let a=0;a<Ho.length;a++){const n=Ho[a]+l;if(n in e)return Go[t]=n}return t}(e,t);Bo.test(a)?e.setProperty(Ie(l),a.replace(Bo,""),"important"):e[l]=a}}const Ho=["Webkit","Moz","ms"],Go={},Wo="http://www.w3.org/1999/xlink",[Ko,Jo]=(()=>{let e=Date.now,t=!1;if("undefined"!=typeof window){Date.now()>document.createEvent("Event").timeStamp&&(e=performance.now.bind(performance));const a=navigator.userAgent.match(/firefox\/(\d+)/i);t=!!(a&&Number(a[1])<=53)}return[e,t]})();let Yo=0;const Zo=Promise.resolve(),Xo=()=>{Yo=0};function Qo(e,t,a,l){e.addEventListener(t,a,l)}const ei=/(?:Once|Passive|Capture)$/,ti=/^on[a-z]/;function ai(e,t){const a=Jl(e);class l extends si{constructor(e){super(a,e,t)}}return l.def=a,l}const li=e=>ai(e,nr),ni="undefined"!=typeof HTMLElement?HTMLElement:class{};class si extends ni{constructor(e,t={},a){super(),this._def=e,this._props=t,this._instance=null,this._connected=!1,this._resolved=!1,this._numberProps=null,this.shadowRoot&&a?a(this._createVNode(),this.shadowRoot):this.attachShadow({mode:"open"})}connectedCallback(){this._connected=!0,this._instance||this._resolveDef()}disconnectedCallback(){this._connected=!1,Ja((()=>{this._connected||(lr(null,this.shadowRoot),this._instance=null)}))}_resolveDef(){if(this._resolved)return;this._resolved=!0;for(let e=0;e<this.attributes.length;e++)this._setAttr(this.attributes[e].name);new MutationObserver((e=>{for(const t of e)this._setAttr(t.attributeName)})).observe(this,{attributes:!0});const e=e=>{const{props:t,styles:a}=e,l=!fe(t),n=t?l?Object.keys(t):t:[];let s;if(l)for(const e in this._props){const a=t[e];(a===Number||a&&a.type===Number)&&(this._props[e]=Re(this._props[e]),(s||(s=Object.create(null)))[e]=!0)}this._numberProps=s;for(const e of Object.keys(this))"_"!==e[0]&&this._setProp(e,this[e],!0,!1);for(const e of n.map(Pe))Object.defineProperty(this,e,{get(){return this._getProp(e)},set(t){this._setProp(e,t)}});this._applyStyles(a),this._update()},t=this._def.__asyncLoader;t?t().then(e):e(this._def)}_setAttr(e){let t=this.getAttribute(e);this._numberProps&&this._numberProps[e]&&(t=Re(t)),this._setProp(Pe(e),t,!1)}_getProp(e){return this._props[e]}_setProp(e,t,a=!0,l=!0){t!==this._props[e]&&(this._props[e]=t,l&&this._instance&&this._update(),a&&(!0===t?this.setAttribute(Ie(e),""):"string"==typeof t||"number"==typeof t?this.setAttribute(Ie(e),t+""):t||this.removeAttribute(Ie(e))))}_update(){lr(this._createVNode(),this.shadowRoot)}_createVNode(){const e=Hs(this._def,ue({},this._props));return this._instance||(e.ce=e=>{this._instance=e,e.isCE=!0,e.emit=(e,...t)=>{this.dispatchEvent(new CustomEvent(e,{detail:t}))};let t=this;for(;t=t&&(t.parentNode||t.host);)if(t instanceof si){e.parent=t._instance;break}}),e}_applyStyles(e){e&&e.forEach((e=>{const t=document.createElement("style");t.textContent=e,this.shadowRoot.appendChild(t)}))}}function oi(e="$style"){{const t=so();if(!t)return le;const a=t.type.__cssModules;if(!a)return le;return a[e]||le}}function ii(e){const t=so();if(!t)return;const a=()=>ri(t.subTree,e(t.proxy));Ul(a),_n((()=>{const e=new MutationObserver(a);e.observe(t.subTree.el.parentNode,{childList:!0}),mn((()=>e.disconnect()))}))}function ri(e,t){if(128&e.shapeFlag){const a=e.suspense;e=a.activeBranch,a.pendingBranch&&!a.isHydrating&&a.effects.push((()=>{ri(a.activeBranch,t)}))}for(;e.component;)e=e.component.subTree;if(1&e.shapeFlag&&e.el)ci(e.el,t);else if(e.type===Ss)e.children.forEach((e=>ri(e,t)));else if(e.type===As){let{el:a,anchor:l}=e;for(;a&&(ci(a,t),a!==l);)a=a.nextSibling}}function ci(e,t){if(1===e.nodeType){const a=e.style;for(const e in t)a.setProperty(`--${e}`,t[e])}}const ui=(e,{slots:t})=>Io(ql,vi(e),t);ui.displayName="Transition";const di={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},_i=ui.props=ue({},ql.props,di),pi=(e,t=[])=>{fe(e)?e.forEach((e=>e(...t))):e&&e(...t)},fi=e=>!!e&&(fe(e)?e.some((e=>e.length>1)):e.length>1);function vi(e){const t={};for(const a in e)a in di||(t[a]=e[a]);if(!1===e.css)return t;const{name:a="v",type:l,duration:n,enterFromClass:s=`${a}-enter-from`,enterActiveClass:o=`${a}-enter-active`,enterToClass:i=`${a}-enter-to`,appearFromClass:r=s,appearActiveClass:c=o,appearToClass:u=i,leaveFromClass:d=`${a}-leave-from`,leaveActiveClass:_=`${a}-leave-active`,leaveToClass:p=`${a}-leave-to`}=e,f=function(e){if(null==e)return null;if(we(e))return[mi(e.enter),mi(e.leave)];{const t=mi(e);return[t,t]}}(n),v=f&&f[0],m=f&&f[1],{onBeforeEnter:h,onEnter:g,onEnterCancelled:b,onLeave:y,onLeaveCancelled:w,onBeforeAppear:x=h,onAppear:k=g,onAppearCancelled:$=b}=t,S=(e,t,a)=>{gi(e,t?u:i),gi(e,t?c:o),a&&a()},N=(e,t)=>{e._isLeaving=!1,gi(e,d),gi(e,p),gi(e,_),t&&t()},C=e=>(t,a)=>{const n=e?k:g,o=()=>S(t,e,a);pi(n,[t,o]),bi((()=>{gi(t,e?r:s),hi(t,e?u:i),fi(n)||wi(t,l,v,o)}))};return ue(t,{onBeforeEnter(e){pi(h,[e]),hi(e,s),hi(e,o)},onBeforeAppear(e){pi(x,[e]),hi(e,r),hi(e,c)},onEnter:C(!1),onAppear:C(!0),onLeave(e,t){e._isLeaving=!0;const a=()=>N(e,t);hi(e,d),Si(),hi(e,_),bi((()=>{e._isLeaving&&(gi(e,d),hi(e,p),fi(y)||wi(e,l,m,a))})),pi(y,[e,a])},onEnterCancelled(e){S(e,!1),pi(b,[e])},onAppearCancelled(e){S(e,!0),pi($,[e])},onLeaveCancelled(e){N(e),pi(w,[e])}})}function mi(e){return Re(e)}function hi(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.add(t))),(e._vtc||(e._vtc=new Set)).add(t)}function gi(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.remove(t)));const{_vtc:a}=e;a&&(a.delete(t),a.size||(e._vtc=void 0))}function bi(e){requestAnimationFrame((()=>{requestAnimationFrame(e)}))}let yi=0;function wi(e,t,a,l){const n=e._endId=++yi,s=()=>{n===e._endId&&l()};if(a)return setTimeout(s,a);const{type:o,timeout:i,propCount:r}=xi(e,t);if(!o)return l();const c=o+"end";let u=0;const d=()=>{e.removeEventListener(c,_),s()},_=t=>{t.target===e&&++u>=r&&d()};setTimeout((()=>{u<r&&d()}),i+1),e.addEventListener(c,_)}function xi(e,t){const a=window.getComputedStyle(e),l=e=>(a[e]||"").split(", "),n=l("transitionDelay"),s=l("transitionDuration"),o=ki(n,s),i=l("animationDelay"),r=l("animationDuration"),c=ki(i,r);let u=null,d=0,_=0;return"transition"===t?o>0&&(u="transition",d=o,_=s.length):"animation"===t?c>0&&(u="animation",d=c,_=r.length):(d=Math.max(o,c),u=d>0?o>c?"transition":"animation":null,_=u?"transition"===u?s.length:r.length:0),{type:u,timeout:d,propCount:_,hasTransform:"transition"===u&&/\b(transform|all)(,|$)/.test(a.transitionProperty)}}function ki(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max(...t.map(((t,a)=>$i(t)+$i(e[a]))))}function $i(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function Si(){return document.body.offsetHeight}const Ni=new WeakMap,Ci=new WeakMap,Ai={name:"TransitionGroup",props:ue({},_i,{tag:String,moveClass:String}),setup(e,{slots:t}){const a=so(),l=Dl();let n,s;return fn((()=>{if(!n.length)return;const t=e.moveClass||`${e.name||"v"}-move`;if(!function(e,t,a){const l=e.cloneNode();e._vtc&&e._vtc.forEach((e=>{e.split(/\s+/).forEach((e=>e&&l.classList.remove(e)))})),a.split(/\s+/).forEach((e=>e&&l.classList.add(e))),l.style.display="none";const n=1===t.nodeType?t:t.parentNode;n.appendChild(l);const{hasTransform:s}=xi(l);return n.removeChild(l),s}(n[0].el,a.vnode.el,t))return;n.forEach(Ei),n.forEach(Ti);const l=n.filter(Pi);Si(),l.forEach((e=>{const a=e.el,l=a.style;hi(a,t),l.transform=l.webkitTransform=l.transitionDuration="";const n=a._moveCb=e=>{e&&e.target!==a||e&&!/transform$/.test(e.propertyName)||(a.removeEventListener("transitionend",n),a._moveCb=null,gi(a,t))};a.addEventListener("transitionend",n)}))})),()=>{const o=ra(e),i=vi(o);let r=o.tag||Ss;n=s,s=t.default?Kl(t.default()):[];for(let e=0;e<s.length;e++){const t=s[e];null!=t.key&&Wl(t,Vl(t,i,l,a))}if(n)for(let e=0;e<n.length;e++){const t=n[e];Wl(t,Vl(t,i,l,a)),Ni.set(t,t.el.getBoundingClientRect())}return Hs(r,null,s)}}};function Ei(e){const t=e.el;t._moveCb&&t._moveCb(),t._enterCb&&t._enterCb()}function Ti(e){Ci.set(e,e.el.getBoundingClientRect())}function Pi(e){const t=Ni.get(e),a=Ci.get(e),l=t.left-a.left,n=t.top-a.top;if(l||n){const t=e.el.style;return t.transform=t.webkitTransform=`translate(${l}px,${n}px)`,t.transitionDuration="0s",e}}const Ui=e=>{const t=e.props["onUpdate:modelValue"]||!1;return fe(t)?e=>Le(t,e):t};function Ii(e){e.target.composing=!0}function Oi(e){const t=e.target;t.composing&&(t.composing=!1,t.dispatchEvent(new Event("input")))}const ji={created(e,{modifiers:{lazy:t,trim:a,number:l}},n){e._assign=Ui(n);const s=l||n.props&&"number"===n.props.type;Qo(e,t?"change":"input",(t=>{if(t.target.composing)return;let l=e.value;a&&(l=l.trim()),s&&(l=Re(l)),e._assign(l)})),a&&Qo(e,"change",(()=>{e.value=e.value.trim()})),t||(Qo(e,"compositionstart",Ii),Qo(e,"compositionend",Oi),Qo(e,"change",Oi))},mounted(e,{value:t}){e.value=null==t?"":t},beforeUpdate(e,{value:t,modifiers:{lazy:a,trim:l,number:n}},s){if(e._assign=Ui(s),e.composing)return;if(document.activeElement===e&&"range"!==e.type){if(a)return;if(l&&e.value.trim()===t)return;if((n||"number"===e.type)&&Re(e.value)===t)return}const o=null==t?"":t;e.value!==o&&(e.value=o)}},Mi={deep:!0,created(e,t,a){e._assign=Ui(a),Qo(e,"change",(()=>{const t=e._modelValue,a=zi(e),l=e.checked,n=e._assign;if(fe(t)){const e=ee(t,a),s=-1!==e;if(l&&!s)n(t.concat(a));else if(!l&&s){const a=[...t];a.splice(e,1),n(a)}}else if(me(t)){const e=new Set(t);l?e.add(a):e.delete(a),n(e)}else n(qi(e,l))}))},mounted:Li,beforeUpdate(e,t,a){e._assign=Ui(a),Li(e,t,a)}};function Li(e,{value:t,oldValue:a},l){e._modelValue=t,fe(t)?e.checked=ee(t,l.props.value)>-1:me(t)?e.checked=t.has(l.props.value):t!==a&&(e.checked=Q(t,qi(e,!0)))}const Fi={created(e,{value:t},a){e.checked=Q(t,a.props.value),e._assign=Ui(a),Qo(e,"change",(()=>{e._assign(zi(e))}))},beforeUpdate(e,{value:t,oldValue:a},l){e._assign=Ui(l),t!==a&&(e.checked=Q(t,l.props.value))}},Ri={deep:!0,created(e,{value:t,modifiers:{number:a}},l){const n=me(t);Qo(e,"change",(()=>{const t=Array.prototype.filter.call(e.options,(e=>e.selected)).map((e=>a?Re(zi(e)):zi(e)));e._assign(e.multiple?n?new Set(t):t:t[0])})),e._assign=Ui(l)},mounted(e,{value:t}){Di(e,t)},beforeUpdate(e,t,a){e._assign=Ui(a)},updated(e,{value:t}){Di(e,t)}};function Di(e,t){const a=e.multiple;if(!a||fe(t)||me(t)){for(let l=0,n=e.options.length;l<n;l++){const n=e.options[l],s=zi(n);if(a)n.selected=fe(t)?ee(t,s)>-1:t.has(s);else if(Q(zi(n),t))return void(e.selectedIndex!==l&&(e.selectedIndex=l))}a||-1===e.selectedIndex||(e.selectedIndex=-1)}}function zi(e){return"_value"in e?e._value:e.value}function qi(e,t){const a=t?"_trueValue":"_falseValue";return a in e?e[a]:t}const Bi={created(e,t,a){Vi(e,t,a,null,"created")},mounted(e,t,a){Vi(e,t,a,null,"mounted")},beforeUpdate(e,t,a,l){Vi(e,t,a,l,"beforeUpdate")},updated(e,t,a,l){Vi(e,t,a,l,"updated")}};function Vi(e,t,a,l,n){const s=function(e,t){switch(e){case"SELECT":return Ri;case"TEXTAREA":return ji;default:switch(t){case"checkbox":return Mi;case"radio":return Fi;default:return ji}}}(e.tagName,a.props&&a.props.type)[n];s&&s(e,t,a,l)}const Hi=["ctrl","shift","alt","meta"],Gi={stop:e=>e.stopPropagation(),prevent:e=>e.preventDefault(),self:e=>e.target!==e.currentTarget,ctrl:e=>!e.ctrlKey,shift:e=>!e.shiftKey,alt:e=>!e.altKey,meta:e=>!e.metaKey,left:e=>"button"in e&&0!==e.button,middle:e=>"button"in e&&1!==e.button,right:e=>"button"in e&&2!==e.button,exact:(e,t)=>Hi.some((a=>e[`${a}Key`]&&!t.includes(a)))},Wi=(e,t)=>(a,...l)=>{for(let e=0;e<t.length;e++){const l=Gi[t[e]];if(l&&l(a,t))return}return e(a,...l)},Ki={esc:"escape",space:" ",up:"arrow-up",left:"arrow-left",right:"arrow-right",down:"arrow-down",delete:"backspace"},Ji=(e,t)=>a=>{if(!("key"in a))return;const l=Ie(a.key);return t.some((e=>e===l||Ki[e]===l))?e(a):void 0},Yi={beforeMount(e,{value:t},{transition:a}){e._vod="none"===e.style.display?"":e.style.display,a&&t?a.beforeEnter(e):Zi(e,t)},mounted(e,{value:t},{transition:a}){a&&t&&a.enter(e)},updated(e,{value:t,oldValue:a},{transition:l}){!t!=!a&&(l?t?(l.beforeEnter(e),Zi(e,!0),l.enter(e)):l.leave(e,(()=>{Zi(e,!1)})):Zi(e,t))},beforeUnmount(e,{value:t}){Zi(e,t)}};function Zi(e,t){e.style.display=t?e._vod:"none"}const Xi=ue({patchProp:(e,t,a,l,n=!1,s,o,i,r)=>{"class"===t?function(e,t,a){const l=e._vtc;l&&(t=(t?[t,...l]:[...l]).join(" ")),null==t?e.removeAttribute("class"):a?e.setAttribute("class",t):e.className=t}(e,l,n):"style"===t?function(e,t,a){const l=e.style,n=be(a);if(a&&!n){for(const e in a)Vo(l,e,a[e]);if(t&&!be(t))for(const e in t)null==a[e]&&Vo(l,e,"")}else{const s=l.display;n?t!==a&&(l.cssText=a):t&&e.removeAttribute("style"),"_vod"in e&&(l.display=s)}}(e,a,l):re(t)?ce(t)||function(e,t,a,l,n=null){const s=e._vei||(e._vei={}),o=s[t];if(l&&o)o.value=l;else{const[a,i]=function(e){let t;if(ei.test(e)){let a;for(t={};a=e.match(ei);)e=e.slice(0,e.length-a[0].length),t[a[0].toLowerCase()]=!0}return[Ie(e.slice(2)),t]}(t);if(l){const o=s[t]=function(e,t){const a=e=>{const l=e.timeStamp||Ko();(Jo||l>=a.attached-1)&&Oa(function(e,t){if(fe(t)){const a=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{a.call(e),e._stopped=!0},t.map((e=>t=>!t._stopped&&e&&e(t)))}return t}(e,a.value),t,5,[e])};return a.value=e,a.attached=Yo||(Zo.then(Xo),Yo=Ko()),a}(l,n);Qo(e,a,o,i)}else o&&(function(e,t,a,l){e.removeEventListener(t,a,l)}(e,a,o,i),s[t]=void 0)}}(e,t,0,l,o):("."===t[0]?(t=t.slice(1),1):"^"===t[0]?(t=t.slice(1),0):function(e,t,a,l){return l?"innerHTML"===t||"textContent"===t||!!(t in e&&ti.test(t)&&ge(a)):"spellcheck"!==t&&"draggable"!==t&&"translate"!==t&&("form"!==t&&(("list"!==t||"INPUT"!==e.tagName)&&(("type"!==t||"TEXTAREA"!==e.tagName)&&((!ti.test(t)||!be(a))&&t in e))))}(e,t,l,n))?function(e,t,a,l,n,s,o){if("innerHTML"===t||"textContent"===t)return l&&o(l,n,s),void(e[t]=null==a?"":a);if("value"===t&&"PROGRESS"!==e.tagName&&!e.tagName.includes("-")){e._value=a;const l=null==a?"":a;return e.value===l&&"OPTION"!==e.tagName||(e.value=l),void(null==a&&e.removeAttribute(t))}let i=!1;if(""===a||null==a){const l=typeof e[t];"boolean"===l?a=B(a):null==a&&"string"===l?(a="",i=!0):"number"===l&&(a=0,i=!0)}try{e[t]=a}catch(e){}i&&e.removeAttribute(t)}(e,t,l,s,o,i,r):("true-value"===t?e._trueValue=l:"false-value"===t&&(e._falseValue=l),function(e,t,a,l,n){if(l&&t.startsWith("xlink:"))null==a?e.removeAttributeNS(Wo,t.slice(6,t.length)):e.setAttributeNS(Wo,t,a);else{const l=q(t);null==a||l&&!B(a)?e.removeAttribute(t):e.setAttribute(t,l?"":a)}}(e,t,l,n))}},qo);let Qi,er=!1;function tr(){return Qi||(Qi=vs(Xi))}function ar(){return Qi=er?Qi:ms(Xi),er=!0,Qi}const lr=(...e)=>{tr().render(...e)},nr=(...e)=>{ar().hydrate(...e)},sr=(...e)=>{const t=tr().createApp(...e),{mount:a}=t;return t.mount=e=>{const l=ir(e);if(!l)return;const n=t._component;ge(n)||n.render||n.template||(n.template=l.innerHTML),l.innerHTML="";const s=a(l,!1,l instanceof SVGElement);return l instanceof Element&&(l.removeAttribute("v-cloak"),l.setAttribute("data-v-app","")),s},t},or=(...e)=>{const t=ar().createApp(...e),{mount:a}=t;return t.mount=e=>{const t=ir(e);if(t)return a(t,!0,t instanceof SVGElement)},t};function ir(e){return be(e)?document.querySelector(e):e}const rr=se;var cr=Object.freeze({__proto__:null,render:lr,hydrate:nr,createApp:sr,createSSRApp:or,initDirectivesForSSR:rr,defineCustomElement:ai,defineSSRCustomElement:li,VueElement:si,useCssModule:oi,useCssVars:ii,Transition:ui,TransitionGroup:Ai,vModelText:ji,vModelCheckbox:Mi,vModelRadio:Fi,vModelSelect:Ri,vModelDynamic:Bi,withModifiers:Wi,withKeys:Ji,vShow:Yi,reactive:Qt,ref:va,readonly:ta,unref:ya,proxyRefs:xa,isRef:fa,toRef:Ca,toRefs:Sa,isProxy:ia,isReactive:na,isReadonly:sa,isShallow:oa,customRef:$a,triggerRef:ba,shallowRef:ma,shallowReactive:ea,shallowReadonly:aa,markRaw:ca,toRaw:ra,effect:nt,stop:st,ReactiveEffect:at,effectScope:Be,EffectScope:qe,getCurrentScope:He,onScopeDispose:Ge,computed:xo,watch:jl,watchEffect:Pl,watchPostEffect:Ul,watchSyncEffect:Il,onBeforeMount:dn,onMounted:_n,onBeforeUpdate:pn,onUpdated:fn,onBeforeUnmount:vn,onUnmounted:mn,onActivated:an,onDeactivated:ln,onRenderTracked:bn,onRenderTriggered:gn,onErrorCaptured:yn,onServerPrefetch:hn,provide:El,inject:Tl,nextTick:Ja,defineComponent:Jl,defineAsyncComponent:Zl,useAttrs:Ao,useSlots:Co,defineProps:ko,defineEmits:$o,defineExpose:So,withDefaults:No,mergeDefaults:To,createPropsRestProxy:Po,withAsyncContext:Uo,getCurrentInstance:so,h:Io,createVNode:Hs,cloneVNode:Ws,mergeProps:eo,isVNode:Fs,Fragment:Ss,Text:Ns,Comment:Cs,Static:As,Teleport:$s,Suspense:kl,KeepAlive:en,BaseTransition:ql,withDirectives:wn,useSSRContext:jo,ssrContextKey:Oo,createRenderer:vs,createHydrationRenderer:ms,queuePostFlushCb:Qa,warn:Ta,handleError:ja,callWithErrorHandling:Ia,callWithAsyncErrorHandling:Oa,resolveComponent:kn,resolveDirective:Nn,resolveDynamicComponent:Sn,registerRuntimeCompiler:fo,isRuntimeOnly:vo,useTransitionState:Dl,resolveTransitionHooks:Vl,setTransitionHooks:Wl,getTransitionRawChildren:Kl,initCustomFormatter:Mo,get devtools(){return nl},setDevtoolsHook:ol,withCtx:ml,pushScopeId:pl,popScopeId:fl,withScopeId:vl,renderList:En,toHandlers:In,renderSlot:Pn,createSlots:Tn,withMemo:Lo,isMemoSame:Fo,openBlock:Ps,createBlock:Ls,setBlockTracking:Os,createTextVNode:Ks,createCommentVNode:Ys,createStaticVNode:Js,createElementVNode:Vs,createElementBlock:Ms,guardReactiveProps:Gs,toDisplayString:te,camelize:Pe,capitalize:Oe,toHandlerKey:je,normalizeProps:J,normalizeClass:K,normalizeStyle:V,transformVNodeArgs:Ds,version:Ro,ssrUtils:null,resolveFilter:null,compatUtils:null});function ur(e){throw e}function dr(e){}function _r(e,t,a,l){const n=new SyntaxError(String(e));return n.code=e,n.loc=t,n}const pr=Symbol(""),fr=Symbol(""),vr=Symbol(""),mr=Symbol(""),hr=Symbol(""),gr=Symbol(""),br=Symbol(""),yr=Symbol(""),wr=Symbol(""),xr=Symbol(""),kr=Symbol(""),$r=Symbol(""),Sr=Symbol(""),Nr=Symbol(""),Cr=Symbol(""),Ar=Symbol(""),Er=Symbol(""),Tr=Symbol(""),Pr=Symbol(""),Ur=Symbol(""),Ir=Symbol(""),Or=Symbol(""),jr=Symbol(""),Mr=Symbol(""),Lr=Symbol(""),Fr=Symbol(""),Rr=Symbol(""),Dr=Symbol(""),zr=Symbol(""),qr=Symbol(""),Br=Symbol(""),Vr=Symbol(""),Hr=Symbol(""),Gr=Symbol(""),Wr=Symbol(""),Kr=Symbol(""),Jr=Symbol(""),Yr=Symbol(""),Zr=Symbol(""),Xr={[pr]:"Fragment",[fr]:"Teleport",[vr]:"Suspense",[mr]:"KeepAlive",[hr]:"BaseTransition",[gr]:"openBlock",[br]:"createBlock",[yr]:"createElementBlock",[wr]:"createVNode",[xr]:"createElementVNode",[kr]:"createCommentVNode",[$r]:"createTextVNode",[Sr]:"createStaticVNode",[Nr]:"resolveComponent",[Cr]:"resolveDynamicComponent",[Ar]:"resolveDirective",[Er]:"resolveFilter",[Tr]:"withDirectives",[Pr]:"renderList",[Ur]:"renderSlot",[Ir]:"createSlots",[Or]:"toDisplayString",[jr]:"mergeProps",[Mr]:"normalizeClass",[Lr]:"normalizeStyle",[Fr]:"normalizeProps",[Rr]:"guardReactiveProps",[Dr]:"toHandlers",[zr]:"camelize",[qr]:"capitalize",[Br]:"toHandlerKey",[Vr]:"setBlockTracking",[Hr]:"pushScopeId",[Gr]:"popScopeId",[Wr]:"withCtx",[Kr]:"unref",[Jr]:"isRef",[Yr]:"withMemo",[Zr]:"isMemoSame"},Qr={source:"",start:{line:1,column:1,offset:0},end:{line:1,column:1,offset:0}};function ec(e,t,a,l,n,s,o,i=!1,r=!1,c=!1,u=Qr){return e&&(i?(e.helper(gr),e.helper(Ec(e.inSSR,c))):e.helper(Ac(e.inSSR,c)),o&&e.helper(Tr)),{type:13,tag:t,props:a,children:l,patchFlag:n,dynamicProps:s,directives:o,isBlock:i,disableTracking:r,isComponent:c,loc:u}}function tc(e,t=Qr){return{type:17,loc:t,elements:e}}function ac(e,t=Qr){return{type:15,loc:t,properties:e}}function lc(e,t){return{type:16,loc:Qr,key:be(e)?nc(e,!0):e,value:t}}function nc(e,t=!1,a=Qr,l=0){return{type:4,loc:a,content:e,isStatic:t,constType:t?3:l}}function sc(e,t=Qr){return{type:8,loc:t,children:e}}function oc(e,t=[],a=Qr){return{type:14,loc:a,callee:e,arguments:t}}function ic(e,t,a=!1,l=!1,n=Qr){return{type:18,params:e,returns:t,newline:a,isSlot:l,loc:n}}function rc(e,t,a,l=!0){return{type:19,test:e,consequent:t,alternate:a,newline:l,loc:Qr}}const cc=e=>4===e.type&&e.isStatic,uc=(e,t)=>e===t||e===Ie(t);function dc(e){return uc(e,"Teleport")?fr:uc(e,"Suspense")?vr:uc(e,"KeepAlive")?mr:uc(e,"BaseTransition")?hr:void 0}const _c=/^\d|[^\$\w]/,pc=e=>!_c.test(e),fc=/[A-Za-z_$\xA0-\uFFFF]/,vc=/[\.\?\w$\xA0-\uFFFF]/,mc=/\s+[.[]\s*|\s*[.[]\s+/g,hc=e=>{e=e.trim().replace(mc,(e=>e.trim()));let t=0,a=[],l=0,n=0,s=null;for(let o=0;o<e.length;o++){const i=e.charAt(o);switch(t){case 0:if("["===i)a.push(t),t=1,l++;else if("("===i)a.push(t),t=2,n++;else if(!(0===o?fc:vc).test(i))return!1;break;case 1:"'"===i||'"'===i||"`"===i?(a.push(t),t=3,s=i):"["===i?l++:"]"===i&&(--l||(t=a.pop()));break;case 2:if("'"===i||'"'===i||"`"===i)a.push(t),t=3,s=i;else if("("===i)n++;else if(")"===i){if(o===e.length-1)return!1;--n||(t=a.pop())}break;case 3:i===s&&(t=a.pop(),s=null)}}return!l&&!n};function gc(e,t,a){const l={source:e.source.slice(t,t+a),start:bc(e.start,e.source,t),end:e.end};return null!=a&&(l.end=bc(e.start,e.source,t+a)),l}function bc(e,t,a=t.length){return yc(ue({},e),t,a)}function yc(e,t,a=t.length){let l=0,n=-1;for(let e=0;e<a;e++)10===t.charCodeAt(e)&&(l++,n=e);return e.offset+=a,e.line+=l,e.column=-1===n?e.column+a:a-n,e}function wc(e,t,a=!1){for(let l=0;l<e.props.length;l++){const n=e.props[l];if(7===n.type&&(a||n.exp)&&(be(t)?n.name===t:t.test(n.name)))return n}}function xc(e,t,a=!1,l=!1){for(let n=0;n<e.props.length;n++){const s=e.props[n];if(6===s.type){if(a)continue;if(s.name===t&&(s.value||l))return s}else if("bind"===s.name&&(s.exp||l)&&kc(s.arg,t))return s}}function kc(e,t){return!(!e||!cc(e)||e.content!==t)}function $c(e){return 5===e.type||2===e.type}function Sc(e){return 7===e.type&&"slot"===e.name}function Nc(e){return 1===e.type&&3===e.tagType}function Cc(e){return 1===e.type&&2===e.tagType}function Ac(e,t){return e||t?wr:xr}function Ec(e,t){return e||t?br:yr}const Tc=new Set([Fr,Rr]);function Pc(e,t=[]){if(e&&!be(e)&&14===e.type){const a=e.callee;if(!be(a)&&Tc.has(a))return Pc(e.arguments[0],t.concat(e))}return[e,t]}function Uc(e,t,a){let l,n,s=13===e.type?e.props:e.arguments[2],o=[];if(s&&!be(s)&&14===s.type){const e=Pc(s);s=e[0],o=e[1],n=o[o.length-1]}if(null==s||be(s))l=ac([t]);else if(14===s.type){const e=s.arguments[0];be(e)||15!==e.type?s.callee===Dr?l=oc(a.helper(jr),[ac([t]),s]):s.arguments.unshift(ac([t])):e.properties.unshift(t),!l&&(l=s)}else if(15===s.type){let e=!1;if(4===t.key.type){const a=t.key.content;e=s.properties.some((e=>4===e.key.type&&e.key.content===a))}e||s.properties.unshift(t),l=s}else l=oc(a.helper(jr),[ac([t]),s]),n&&n.callee===Rr&&(n=o[o.length-2]);13===e.type?n?n.arguments[0]=l:e.props=l:n?n.arguments[0]=l:e.arguments[2]=l}function Ic(e,t){return`_${t}_${e.replace(/[^\w]/g,((t,a)=>"-"===t?"_":e.charCodeAt(a).toString()))}`}function Oc(e,{helper:t,removeHelper:a,inSSR:l}){e.isBlock||(e.isBlock=!0,a(Ac(l,e.isComponent)),t(gr),t(Ec(l,e.isComponent)))}const jc=/&(gt|lt|amp|apos|quot);/g,Mc={gt:">",lt:"<",amp:"&",apos:"'",quot:'"'},Lc={delimiters:["{{","}}"],getNamespace:()=>0,getTextMode:()=>0,isVoidTag:oe,isPreTag:oe,isCustomElement:oe,decodeEntities:e=>e.replace(jc,((e,t)=>Mc[t])),onError:ur,onWarn:dr,comments:!1};function Fc(e,t,a){const l=Qc(a),n=l?l.ns:0,s=[];for(;!nu(e,t,a);){const o=e.source;let i;if(0===t||1===t)if(!e.inVPre&&eu(o,e.options.delimiters[0]))i=Kc(e,t);else if(0===t&&"<"===o[0])if(1===o.length);else if("!"===o[1])i=eu(o,"\x3c!--")?zc(e):eu(o,"<!DOCTYPE")?qc(e):eu(o,"<![CDATA[")&&0!==n?Dc(e,a):qc(e);else if("/"===o[1])if(2===o.length);else{if(">"===o[2]){tu(e,3);continue}if(/[a-z]/i.test(o[2])){Hc(e,1,l);continue}i=qc(e)}else/[a-z]/i.test(o[1])?i=Bc(e,a):"?"===o[1]&&(i=qc(e));if(i||(i=Jc(e,t)),fe(i))for(let e=0;e<i.length;e++)Rc(s,i[e]);else Rc(s,i)}let o=!1;if(2!==t&&1!==t){const t="preserve"!==e.options.whitespace;for(let a=0;a<s.length;a++){const l=s[a];if(e.inPre||2!==l.type)3!==l.type||e.options.comments||(o=!0,s[a]=null);else if(/[^\t\r\n\f ]/.test(l.content))t&&(l.content=l.content.replace(/[\t\r\n\f ]+/g," "));else{const e=s[a-1],n=s[a+1];!e||!n||t&&(3===e.type||3===n.type||1===e.type&&1===n.type&&/[\r\n]/.test(l.content))?(o=!0,s[a]=null):l.content=" "}}if(e.inPre&&l&&e.options.isPreTag(l.tag)){const e=s[0];e&&2===e.type&&(e.content=e.content.replace(/^\r?\n/,""))}}return o?s.filter(Boolean):s}function Rc(e,t){if(2===t.type){const a=Qc(e);if(a&&2===a.type&&a.loc.end.offset===t.loc.start.offset)return a.content+=t.content,a.loc.end=t.loc.end,void(a.loc.source+=t.loc.source)}e.push(t)}function Dc(e,t){tu(e,9);const a=Fc(e,3,t);return 0===e.source.length||tu(e,3),a}function zc(e){const t=Zc(e);let a;const l=/--(\!)?>/.exec(e.source);if(l){a=e.source.slice(4,l.index);const t=e.source.slice(0,l.index);let n=1,s=0;for(;-1!==(s=t.indexOf("\x3c!--",n));)tu(e,s-n+1),n=s+1;tu(e,l.index+l[0].length-n+1)}else a=e.source.slice(4),tu(e,e.source.length);return{type:3,content:a,loc:Xc(e,t)}}function qc(e){const t=Zc(e),a="?"===e.source[1]?1:2;let l;const n=e.source.indexOf(">");return-1===n?(l=e.source.slice(a),tu(e,e.source.length)):(l=e.source.slice(a,n),tu(e,n+1)),{type:3,content:l,loc:Xc(e,t)}}function Bc(e,t){const a=e.inPre,l=e.inVPre,n=Qc(t),s=Hc(e,0,n),o=e.inPre&&!a,i=e.inVPre&&!l;if(s.isSelfClosing||e.options.isVoidTag(s.tag))return o&&(e.inPre=!1),i&&(e.inVPre=!1),s;t.push(s);const r=e.options.getTextMode(s,n),c=Fc(e,r,t);if(t.pop(),s.children=c,su(e.source,s.tag))Hc(e,1,n);else if(0===e.source.length&&"script"===s.tag.toLowerCase()){const e=c[0];e&&eu(e.loc.source,"\x3c!--")}return s.loc=Xc(e,s.loc.start),o&&(e.inPre=!1),i&&(e.inVPre=!1),s}const Vc=D("if,else,else-if,for,slot");function Hc(e,t,a){const l=Zc(e),n=/^<\/?([a-z][^\t\r\n\f />]*)/i.exec(e.source),s=n[1],o=e.options.getNamespace(s,a);tu(e,n[0].length),au(e);const i=Zc(e),r=e.source;e.options.isPreTag(s)&&(e.inPre=!0);let c=Gc(e,t);0===t&&!e.inVPre&&c.some((e=>7===e.type&&"pre"===e.name))&&(e.inVPre=!0,ue(e,i),e.source=r,c=Gc(e,t).filter((e=>"v-pre"!==e.name)));let u=!1;if(0===e.source.length||(u=eu(e.source,"/>"),tu(e,u?2:1)),1===t)return;let d=0;return e.inVPre||("slot"===s?d=2:"template"===s?c.some((e=>7===e.type&&Vc(e.name)))&&(d=3):function(e,t,a){const l=a.options;if(l.isCustomElement(e))return!1;if("component"===e||/^[A-Z]/.test(e)||dc(e)||l.isBuiltInComponent&&l.isBuiltInComponent(e)||l.isNativeTag&&!l.isNativeTag(e))return!0;for(let e=0;e<t.length;e++){const a=t[e];if(6===a.type){if("is"===a.name&&a.value&&a.value.content.startsWith("vue:"))return!0}else{if("is"===a.name)return!0;"bind"===a.name&&kc(a.arg,"is")}}}(s,c,e)&&(d=1)),{type:1,ns:o,tag:s,tagType:d,props:c,isSelfClosing:u,children:[],loc:Xc(e,l),codegenNode:void 0}}function Gc(e,t){const a=[],l=new Set;for(;e.source.length>0&&!eu(e.source,">")&&!eu(e.source,"/>");){if(eu(e.source,"/")){tu(e,1),au(e);continue}const n=Wc(e,l);6===n.type&&n.value&&"class"===n.name&&(n.value.content=n.value.content.replace(/\s+/g," ").trim()),0===t&&a.push(n),/^[^\t\r\n\f />]/.test(e.source),au(e)}return a}function Wc(e,t){const a=Zc(e),l=/^[^\t\r\n\f />][^\t\r\n\f />=]*/.exec(e.source)[0];t.has(l),t.add(l);{const e=/["'<]/g;for(;e.exec(l););}let n;tu(e,l.length),/^[\t\r\n\f ]*=/.test(e.source)&&(au(e),tu(e,1),au(e),n=function(e){const t=Zc(e);let a;const l=e.source[0],n='"'===l||"'"===l;if(n){tu(e,1);const t=e.source.indexOf(l);-1===t?a=Yc(e,e.source.length,4):(a=Yc(e,t,4),tu(e,1))}else{const t=/^[^\t\r\n\f >]+/.exec(e.source);if(!t)return;const l=/["'<=`]/g;for(;l.exec(t[0]););a=Yc(e,t[0].length,4)}return{content:a,isQuoted:n,loc:Xc(e,t)}}(e));const s=Xc(e,a);if(!e.inVPre&&/^(v-[A-Za-z0-9-]|:|\.|@|#)/.test(l)){const t=/(?:^v-([a-z0-9-]+))?(?:(?::|^\.|^@|^#)(\[[^\]]+\]|[^\.]+))?(.+)?$/i.exec(l);let o,i=eu(l,"."),r=t[1]||(i||eu(l,":")?"bind":eu(l,"@")?"on":"slot");if(t[2]){const n="slot"===r,s=l.lastIndexOf(t[2]),i=Xc(e,lu(e,a,s),lu(e,a,s+t[2].length+(n&&t[3]||"").length));let c=t[2],u=!0;c.startsWith("[")?(u=!1,c=c.endsWith("]")?c.slice(1,c.length-1):c.slice(1)):n&&(c+=t[3]||""),o={type:4,content:c,isStatic:u,constType:u?3:0,loc:i}}if(n&&n.isQuoted){const e=n.loc;e.start.offset++,e.start.column++,e.end=bc(e.start,n.content),e.source=e.source.slice(1,-1)}const c=t[3]?t[3].slice(1).split("."):[];return i&&c.push("prop"),{type:7,name:r,exp:n&&{type:4,content:n.content,isStatic:!1,constType:0,loc:n.loc},arg:o,modifiers:c,loc:s}}return!e.inVPre&&eu(l,"v-"),{type:6,name:l,value:n&&{type:2,content:n.content,loc:n.loc},loc:s}}function Kc(e,t){const[a,l]=e.options.delimiters,n=e.source.indexOf(l,a.length);if(-1===n)return;const s=Zc(e);tu(e,a.length);const o=Zc(e),i=Zc(e),r=n-a.length,c=e.source.slice(0,r),u=Yc(e,r,t),d=u.trim(),_=u.indexOf(d);return _>0&&yc(o,c,_),yc(i,c,r-(u.length-d.length-_)),tu(e,l.length),{type:5,content:{type:4,isStatic:!1,constType:0,content:d,loc:Xc(e,o,i)},loc:Xc(e,s)}}function Jc(e,t){const a=3===t?["]]>"]:["<",e.options.delimiters[0]];let l=e.source.length;for(let t=0;t<a.length;t++){const n=e.source.indexOf(a[t],1);-1!==n&&l>n&&(l=n)}const n=Zc(e);return{type:2,content:Yc(e,l,t),loc:Xc(e,n)}}function Yc(e,t,a){const l=e.source.slice(0,t);return tu(e,t),2!==a&&3!==a&&l.includes("&")?e.options.decodeEntities(l,4===a):l}function Zc(e){const{column:t,line:a,offset:l}=e;return{column:t,line:a,offset:l}}function Xc(e,t,a){return{start:t,end:a=a||Zc(e),source:e.originalSource.slice(t.offset,a.offset)}}function Qc(e){return e[e.length-1]}function eu(e,t){return e.startsWith(t)}function tu(e,t){const{source:a}=e;yc(e,a,t),e.source=a.slice(t)}function au(e){const t=/^[\t\r\n\f ]+/.exec(e.source);t&&tu(e,t[0].length)}function lu(e,t,a){return bc(t,e.originalSource.slice(t.offset,a),a)}function nu(e,t,a){const l=e.source;switch(t){case 0:if(eu(l,"</"))for(let e=a.length-1;e>=0;--e)if(su(l,a[e].tag))return!0;break;case 1:case 2:{const e=Qc(a);if(e&&su(l,e.tag))return!0;break}case 3:if(eu(l,"]]>"))return!0}return!l}function su(e,t){return eu(e,"</")&&e.slice(2,2+t.length).toLowerCase()===t.toLowerCase()&&/[\t\r\n\f />]/.test(e[2+t.length]||">")}function ou(e,t){ru(e,t,iu(e,e.children[0]))}function iu(e,t){const{children:a}=e;return 1===a.length&&1===t.type&&!Cc(t)}function ru(e,t,a=!1){const{children:l}=e,n=l.length;let s=0;for(let e=0;e<l.length;e++){const n=l[e];if(1===n.type&&0===n.tagType){const e=a?0:cu(n,t);if(e>0){if(e>=2){n.codegenNode.patchFlag="-1",n.codegenNode=t.hoist(n.codegenNode),s++;continue}}else{const e=n.codegenNode;if(13===e.type){const a=fu(e);if((!a||512===a||1===a)&&_u(n,t)>=2){const a=pu(n);a&&(e.props=t.hoist(a))}e.dynamicProps&&(e.dynamicProps=t.hoist(e.dynamicProps))}}}else 12===n.type&&cu(n.content,t)>=2&&(n.codegenNode=t.hoist(n.codegenNode),s++);if(1===n.type){const e=1===n.tagType;e&&t.scopes.vSlot++,ru(n,t),e&&t.scopes.vSlot--}else if(11===n.type)ru(n,t,1===n.children.length);else if(9===n.type)for(let e=0;e<n.branches.length;e++)ru(n.branches[e],t,1===n.branches[e].children.length)}s&&t.transformHoist&&t.transformHoist(l,t,e),s&&s===n&&1===e.type&&0===e.tagType&&e.codegenNode&&13===e.codegenNode.type&&fe(e.codegenNode.children)&&(e.codegenNode.children=t.hoist(tc(e.codegenNode.children)))}function cu(e,t){const{constantCache:a}=t;switch(e.type){case 1:if(0!==e.tagType)return 0;const l=a.get(e);if(void 0!==l)return l;const n=e.codegenNode;if(13!==n.type)return 0;if(n.isBlock&&"svg"!==e.tag&&"foreignObject"!==e.tag)return 0;if(fu(n))return a.set(e,0),0;{let l=3;const s=_u(e,t);if(0===s)return a.set(e,0),0;s<l&&(l=s);for(let n=0;n<e.children.length;n++){const s=cu(e.children[n],t);if(0===s)return a.set(e,0),0;s<l&&(l=s)}if(l>1)for(let n=0;n<e.props.length;n++){const s=e.props[n];if(7===s.type&&"bind"===s.name&&s.exp){const n=cu(s.exp,t);if(0===n)return a.set(e,0),0;n<l&&(l=n)}}if(n.isBlock){for(let t=0;t<e.props.length;t++)if(7===e.props[t].type)return a.set(e,0),0;t.removeHelper(gr),t.removeHelper(Ec(t.inSSR,n.isComponent)),n.isBlock=!1,t.helper(Ac(t.inSSR,n.isComponent))}return a.set(e,l),l}case 2:case 3:return 3;case 9:case 11:case 10:default:return 0;case 5:case 12:return cu(e.content,t);case 4:return e.constType;case 8:let s=3;for(let a=0;a<e.children.length;a++){const l=e.children[a];if(be(l)||ye(l))continue;const n=cu(l,t);if(0===n)return 0;n<s&&(s=n)}return s}}const uu=new Set([Mr,Lr,Fr,Rr]);function du(e,t){if(14===e.type&&!be(e.callee)&&uu.has(e.callee)){const a=e.arguments[0];if(4===a.type)return cu(a,t);if(14===a.type)return du(a,t)}return 0}function _u(e,t){let a=3;const l=pu(e);if(l&&15===l.type){const{properties:e}=l;for(let l=0;l<e.length;l++){const{key:n,value:s}=e[l],o=cu(n,t);if(0===o)return o;let i;if(o<a&&(a=o),i=4===s.type?cu(s,t):14===s.type?du(s,t):0,0===i)return i;i<a&&(a=i)}}return a}function pu(e){const t=e.codegenNode;if(13===t.type)return t.props}function fu(e){const t=e.patchFlag;return t?parseInt(t,10):void 0}function vu(e,t){const a=function(e,{filename:t="",prefixIdentifiers:a=!1,hoistStatic:l=!1,cacheHandlers:n=!1,nodeTransforms:s=[],directiveTransforms:o={},transformHoist:i=null,isBuiltInComponent:r=se,isCustomElement:c=se,expressionPlugins:u=[],scopeId:d=null,slotted:_=!0,ssr:p=!1,inSSR:f=!1,ssrCssVars:v="",bindingMetadata:m=le,inline:h=!1,isTS:g=!1,onError:b=ur,onWarn:y=dr,compatConfig:w}){const x=t.replace(/\?.*$/,"").match(/([^/\\]+)\.\w+$/),k={selfName:x&&Oe(Pe(x[1])),prefixIdentifiers:a,hoistStatic:l,cacheHandlers:n,nodeTransforms:s,directiveTransforms:o,transformHoist:i,isBuiltInComponent:r,isCustomElement:c,expressionPlugins:u,scopeId:d,slotted:_,ssr:p,inSSR:f,ssrCssVars:v,bindingMetadata:m,inline:h,isTS:g,onError:b,onWarn:y,compatConfig:w,root:e,helpers:new Map,components:new Set,directives:new Set,hoists:[],imports:[],constantCache:new Map,temps:0,cached:0,identifiers:Object.create(null),scopes:{vFor:0,vSlot:0,vPre:0,vOnce:0},parent:null,currentNode:e,childIndex:0,inVOnce:!1,helper(e){const t=k.helpers.get(e)||0;return k.helpers.set(e,t+1),e},removeHelper(e){const t=k.helpers.get(e);if(t){const a=t-1;a?k.helpers.set(e,a):k.helpers.delete(e)}},helperString:e=>`_${Xr[k.helper(e)]}`,replaceNode(e){k.parent.children[k.childIndex]=k.currentNode=e},removeNode(e){const t=e?k.parent.children.indexOf(e):k.currentNode?k.childIndex:-1;e&&e!==k.currentNode?k.childIndex>t&&(k.childIndex--,k.onNodeRemoved()):(k.currentNode=null,k.onNodeRemoved()),k.parent.children.splice(t,1)},onNodeRemoved:()=>{},addIdentifiers(e){},removeIdentifiers(e){},hoist(e){be(e)&&(e=nc(e)),k.hoists.push(e);const t=nc(`_hoisted_${k.hoists.length}`,!1,e.loc,2);return t.hoisted=e,t},cache:(e,t=!1)=>function(e,t,a=!1){return{type:20,index:e,value:t,isVNode:a,loc:Qr}}(k.cached++,e,t)};return k}(e,t);mu(e,a),t.hoistStatic&&ou(e,a),t.ssr||function(e,t){const{helper:a}=t,{children:l}=e;if(1===l.length){const a=l[0];if(iu(e,a)&&a.codegenNode){const l=a.codegenNode;13===l.type&&Oc(l,t),e.codegenNode=l}else e.codegenNode=a}else if(l.length>1){let l=64;e.codegenNode=ec(t,a(pr),void 0,e.children,l+"",void 0,void 0,!0,void 0,!1)}}(e,a),e.helpers=[...a.helpers.keys()],e.components=[...a.components],e.directives=[...a.directives],e.imports=a.imports,e.hoists=a.hoists,e.temps=a.temps,e.cached=a.cached}function mu(e,t){t.currentNode=e;const{nodeTransforms:a}=t,l=[];for(let n=0;n<a.length;n++){const s=a[n](e,t);if(s&&(fe(s)?l.push(...s):l.push(s)),!t.currentNode)return;e=t.currentNode}switch(e.type){case 3:t.ssr||t.helper(kr);break;case 5:t.ssr||t.helper(Or);break;case 9:for(let a=0;a<e.branches.length;a++)mu(e.branches[a],t);break;case 10:case 11:case 1:case 0:!function(e,t){let a=0;const l=()=>{a--};for(;a<e.children.length;a++){const n=e.children[a];be(n)||(t.parent=e,t.childIndex=a,t.onNodeRemoved=l,mu(n,t))}}(e,t)}t.currentNode=e;let n=l.length;for(;n--;)l[n]()}function hu(e,t){const a=be(e)?t=>t===e:t=>e.test(t);return(e,l)=>{if(1===e.type){const{props:n}=e;if(3===e.tagType&&n.some(Sc))return;const s=[];for(let o=0;o<n.length;o++){const i=n[o];if(7===i.type&&a(i.name)){n.splice(o,1),o--;const a=t(e,i,l);a&&s.push(a)}}return s}}}const gu=e=>`${Xr[e]}: _${Xr[e]}`;function bu(e,t,{helper:a,push:l,newline:n,isTS:s}){const o=a("component"===t?Nr:Ar);for(let a=0;a<e.length;a++){let i=e[a];const r=i.endsWith("__self");r&&(i=i.slice(0,-6)),l(`const ${Ic(i,t)} = ${o}(${JSON.stringify(i)}${r?", true":""})${s?"!":""}`),a<e.length-1&&n()}}function yu(e,t){const a=e.length>3||!1;t.push("["),a&&t.indent(),wu(e,t,a),a&&t.deindent(),t.push("]")}function wu(e,t,a=!1,l=!0){const{push:n,newline:s}=t;for(let o=0;o<e.length;o++){const i=e[o];be(i)?n(i):fe(i)?yu(i,t):xu(i,t),o<e.length-1&&(a?(l&&n(","),s()):l&&n(", "))}}function xu(e,t){if(be(e))t.push(e);else if(ye(e))t.push(t.helper(e));else switch(e.type){case 1:case 9:case 11:case 12:xu(e.codegenNode,t);break;case 2:!function(e,t){t.push(JSON.stringify(e.content),e)}(e,t);break;case 4:ku(e,t);break;case 5:!function(e,t){const{push:a,helper:l,pure:n}=t;n&&a("/*#__PURE__*/"),a(`${l(Or)}(`),xu(e.content,t),a(")")}(e,t);break;case 8:$u(e,t);break;case 3:!function(e,t){const{push:a,helper:l,pure:n}=t;n&&a("/*#__PURE__*/"),a(`${l(kr)}(${JSON.stringify(e.content)})`,e)}(e,t);break;case 13:!function(e,t){const{push:a,helper:l,pure:n}=t,{tag:s,props:o,children:i,patchFlag:r,dynamicProps:c,directives:u,isBlock:d,disableTracking:_,isComponent:p}=e;u&&a(l(Tr)+"("),d&&a(`(${l(gr)}(${_?"true":""}), `),n&&a("/*#__PURE__*/");a(l(d?Ec(t.inSSR,p):Ac(t.inSSR,p))+"(",e),wu(function(e){let t=e.length;for(;t--&&null==e[t];);return e.slice(0,t+1).map((e=>e||"null"))}([s,o,i,r,c]),t),a(")"),d&&a(")"),u&&(a(", "),xu(u,t),a(")"))}(e,t);break;case 14:!function(e,t){const{push:a,helper:l,pure:n}=t,s=be(e.callee)?e.callee:l(e.callee);n&&a("/*#__PURE__*/"),a(s+"(",e),wu(e.arguments,t),a(")")}(e,t);break;case 15:!function(e,t){const{push:a,indent:l,deindent:n,newline:s}=t,{properties:o}=e;if(!o.length)return void a("{}",e);const i=o.length>1||!1;a(i?"{":"{ "),i&&l();for(let e=0;e<o.length;e++){const{key:l,value:n}=o[e];Su(l,t),a(": "),xu(n,t),e<o.length-1&&(a(","),s())}i&&n(),a(i?"}":" }")}(e,t);break;case 17:!function(e,t){yu(e.elements,t)}(e,t);break;case 18:!function(e,t){const{push:a,indent:l,deindent:n}=t,{params:s,returns:o,body:i,newline:r,isSlot:c}=e;c&&a(`_${Xr[Wr]}(`),a("(",e),fe(s)?wu(s,t):s&&xu(s,t),a(") => "),(r||i)&&(a("{"),l()),o?(r&&a("return "),fe(o)?yu(o,t):xu(o,t)):i&&xu(i,t),(r||i)&&(n(),a("}")),c&&a(")")}(e,t);break;case 19:!function(e,t){const{test:a,consequent:l,alternate:n,newline:s}=e,{push:o,indent:i,deindent:r,newline:c}=t;if(4===a.type){const e=!pc(a.content);e&&o("("),ku(a,t),e&&o(")")}else o("("),xu(a,t),o(")");s&&i(),t.indentLevel++,s||o(" "),o("? "),xu(l,t),t.indentLevel--,s&&c(),s||o(" "),o(": ");const u=19===n.type;u||t.indentLevel++,xu(n,t),u||t.indentLevel--,s&&r(!0)}(e,t);break;case 20:!function(e,t){const{push:a,helper:l,indent:n,deindent:s,newline:o}=t;a(`_cache[${e.index}] || (`),e.isVNode&&(n(),a(`${l(Vr)}(-1),`),o()),a(`_cache[${e.index}] = `),xu(e.value,t),e.isVNode&&(a(","),o(),a(`${l(Vr)}(1),`),o(),a(`_cache[${e.index}]`),s()),a(")")}(e,t);break;case 21:wu(e.body,t,!0,!1)}}function ku(e,t){const{content:a,isStatic:l}=e;t.push(l?JSON.stringify(a):a,e)}function $u(e,t){for(let a=0;a<e.children.length;a++){const l=e.children[a];be(l)?t.push(l):xu(l,t)}}function Su(e,t){const{push:a}=t;8===e.type?(a("["),$u(e,t),a("]")):e.isStatic?a(pc(e.content)?e.content:JSON.stringify(e.content),e):a(`[${e.content}]`,e)}const Nu=hu(/^(if|else|else-if)$/,((e,t,a)=>function(e,t,a,l){if("else"===t.name||t.exp&&t.exp.content.trim()||(t.exp=nc("true",!1,t.exp?t.exp.loc:e.loc)),"if"===t.name){const n=Cu(e,t),s={type:9,loc:e.loc,branches:[n]};if(a.replaceNode(s),l)return l(s,n,!0)}else{const n=a.parent.children;let s=n.indexOf(e);for(;s-- >=-1;){const o=n[s];if(!o||2!==o.type||o.content.trim().length){if(o&&9===o.type){a.removeNode();const n=Cu(e,t);o.branches.push(n);const s=l&&l(o,n,!1);mu(n,a),s&&s(),a.currentNode=null}break}a.removeNode(o)}}}(e,t,a,((e,t,l)=>{const n=a.parent.children;let s=n.indexOf(e),o=0;for(;s-- >=0;){const e=n[s];e&&9===e.type&&(o+=e.branches.length)}return()=>{if(l)e.codegenNode=Au(t,o,a);else{const l=function(e){for(;;)if(19===e.type){if(19!==e.alternate.type)return e;e=e.alternate}else 20===e.type&&(e=e.value)}(e.codegenNode);l.alternate=Au(t,o+e.branches.length-1,a)}}}))));function Cu(e,t){const a=3===e.tagType;return{type:10,loc:e.loc,condition:"else"===t.name?void 0:t.exp,children:a&&!wc(e,"for")?e.children:[e],userKey:xc(e,"key"),isTemplateIf:a}}function Au(e,t,a){return e.condition?rc(e.condition,Eu(e,t,a),oc(a.helper(kr),['""',"true"])):Eu(e,t,a)}function Eu(e,t,a){const{helper:l}=a,n=lc("key",nc(`${t}`,!1,Qr,2)),{children:s}=e,o=s[0];if(1!==s.length||1!==o.type){if(1===s.length&&11===o.type){const e=o.codegenNode;return Uc(e,n,a),e}{let t=64;return ec(a,l(pr),ac([n]),s,t+"",void 0,void 0,!0,!1,!1,e.loc)}}{const e=o.codegenNode,t=14===(i=e).type&&i.callee===Yr?i.arguments[1].returns:i;return 13===t.type&&Oc(t,a),Uc(t,n,a),e}var i}const Tu=hu("for",((e,t,a)=>{const{helper:l,removeHelper:n}=a;return function(e,t,a,l){if(!t.exp)return;const n=Ou(t.exp);if(!n)return;const{scopes:s}=a,{source:o,value:i,key:r,index:c}=n,u={type:11,loc:t.loc,source:o,valueAlias:i,keyAlias:r,objectIndexAlias:c,parseResult:n,children:Nc(e)?e.children:[e]};a.replaceNode(u),s.vFor++;const d=l&&l(u);return()=>{s.vFor--,d&&d()}}(e,t,a,(t=>{const s=oc(l(Pr),[t.source]),o=Nc(e),i=wc(e,"memo"),r=xc(e,"key"),c=r&&(6===r.type?nc(r.value.content,!0):r.exp),u=r?lc("key",c):null,d=4===t.source.type&&t.source.constType>0,_=d?64:r?128:256;return t.codegenNode=ec(a,l(pr),void 0,s,_+"",void 0,void 0,!0,!d,!1,e.loc),()=>{let r;const{children:_}=t,p=1!==_.length||1!==_[0].type,f=Cc(e)?e:o&&1===e.children.length&&Cc(e.children[0])?e.children[0]:null;if(f?(r=f.codegenNode,o&&u&&Uc(r,u,a)):p?r=ec(a,l(pr),u?ac([u]):void 0,e.children,"64",void 0,void 0,!0,void 0,!1):(r=_[0].codegenNode,o&&u&&Uc(r,u,a),r.isBlock!==!d&&(r.isBlock?(n(gr),n(Ec(a.inSSR,r.isComponent))):n(Ac(a.inSSR,r.isComponent))),r.isBlock=!d,r.isBlock?(l(gr),l(Ec(a.inSSR,r.isComponent))):l(Ac(a.inSSR,r.isComponent))),i){const e=ic(Mu(t.parseResult,[nc("_cached")]));e.body={type:21,body:[sc(["const _memo = (",i.exp,")"]),sc(["if (_cached",...c?[" && _cached.key === ",c]:[],` && ${a.helperString(Zr)}(_cached, _memo)) return _cached`]),sc(["const _item = ",r]),nc("_item.memo = _memo"),nc("return _item")],loc:Qr},s.arguments.push(e,nc("_cache"),nc(String(a.cached++)))}else s.arguments.push(ic(Mu(t.parseResult),r,!0))}}))})),Pu=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,Uu=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,Iu=/^\(|\)$/g;function Ou(e,t){const a=e.loc,l=e.content,n=l.match(Pu);if(!n)return;const[,s,o]=n,i={source:ju(a,o.trim(),l.indexOf(o,s.length)),value:void 0,key:void 0,index:void 0};let r=s.trim().replace(Iu,"").trim();const c=s.indexOf(r),u=r.match(Uu);if(u){r=r.replace(Uu,"").trim();const e=u[1].trim();let t;if(e&&(t=l.indexOf(e,c+r.length),i.key=ju(a,e,t)),u[2]){const n=u[2].trim();n&&(i.index=ju(a,n,l.indexOf(n,i.key?t+e.length:c+r.length)))}}return r&&(i.value=ju(a,r,c)),i}function ju(e,t,a){return nc(t,!1,gc(e,a,t.length))}function Mu({value:e,key:t,index:a},l=[]){return function(e){let t=e.length;for(;t--&&!e[t];);return e.slice(0,t+1).map(((e,t)=>e||nc("_".repeat(t+1),!1)))}([e,t,a,...l])}const Lu=nc("undefined",!1),Fu=(e,t)=>{if(1===e.type&&(1===e.tagType||3===e.tagType)){if(wc(e,"slot"))return t.scopes.vSlot++,()=>{t.scopes.vSlot--}}},Ru=(e,t,a)=>ic(e,t,!1,!0,t.length?t[0].loc:a);function Du(e,t,a=Ru){t.helper(Wr);const{children:l,loc:n}=e,s=[],o=[];let i=t.scopes.vSlot>0||t.scopes.vFor>0;const r=wc(e,"slot",!0);if(r){const{arg:e,exp:t}=r;e&&!cc(e)&&(i=!0),s.push(lc(e||nc("default",!0),a(t,l,n)))}let c=!1,u=!1;const d=[],_=new Set;for(let e=0;e<l.length;e++){const n=l[e];let p;if(!Nc(n)||!(p=wc(n,"slot",!0))){3!==n.type&&d.push(n);continue}if(r)break;c=!0;const{children:f,loc:v}=n,{arg:m=nc("default",!0),exp:h}=p;let g;cc(m)?g=m?m.content:"default":i=!0;const b=a(h,f,v);let y,w,x;if(y=wc(n,"if"))i=!0,o.push(rc(y.exp,zu(m,b),Lu));else if(w=wc(n,/^else(-if)?$/,!0)){let t,a=e;for(;a--&&(t=l[a],3===t.type););if(t&&Nc(t)&&wc(t,"if")){l.splice(e,1),e--;let t=o[o.length-1];for(;19===t.alternate.type;)t=t.alternate;t.alternate=w.exp?rc(w.exp,zu(m,b),Lu):zu(m,b)}}else if(x=wc(n,"for")){i=!0;const e=x.parseResult||Ou(x.exp);e&&o.push(oc(t.helper(Pr),[e.source,ic(Mu(e),zu(m,b),!0)]))}else{if(g){if(_.has(g))continue;_.add(g),"default"===g&&(u=!0)}s.push(lc(m,b))}}if(!r){const e=(e,t)=>lc("default",a(e,t,n));c?d.length&&d.some((e=>Bu(e)))&&(u||s.push(e(void 0,d))):s.push(e(void 0,l))}const p=i?2:qu(e.children)?3:1;let f=ac(s.concat(lc("_",nc(p+"",!1))),n);return o.length&&(f=oc(t.helper(Ir),[f,tc(o)])),{slots:f,hasDynamicSlots:i}}function zu(e,t){return ac([lc("name",e),lc("fn",t)])}function qu(e){for(let t=0;t<e.length;t++){const a=e[t];switch(a.type){case 1:if(2===a.tagType||qu(a.children))return!0;break;case 9:if(qu(a.branches))return!0;break;case 10:case 11:if(qu(a.children))return!0}}return!1}function Bu(e){return 2!==e.type&&12!==e.type||(2===e.type?!!e.content.trim():Bu(e.content))}const Vu=new WeakMap,Hu=(e,t)=>function(){if(1!==(e=t.currentNode).type||0!==e.tagType&&1!==e.tagType)return;const{tag:a,props:l}=e,n=1===e.tagType;let s=n?function(e,t,a=!1){let{tag:l}=e;const n=Ju(l),s=xc(e,"is");if(s)if(n){const e=6===s.type?s.value&&nc(s.value.content,!0):s.exp;if(e)return oc(t.helper(Cr),[e])}else 6===s.type&&s.value.content.startsWith("vue:")&&(l=s.value.content.slice(4));const o=!n&&wc(e,"is");if(o&&o.exp)return oc(t.helper(Cr),[o.exp]);const i=dc(l)||t.isBuiltInComponent(l);return i?(a||t.helper(i),i):(t.helper(Nr),t.components.add(l),Ic(l,"component"))}(e,t):`"${a}"`;const o=we(s)&&s.callee===Cr;let i,r,c,u,d,_,p=0,f=o||s===fr||s===vr||!n&&("svg"===a||"foreignObject"===a);if(l.length>0){const a=Gu(e,t,void 0,n,o);i=a.props,p=a.patchFlag,d=a.dynamicPropNames;const l=a.directives;_=l&&l.length?tc(l.map((e=>function(e,t){const a=[],l=Vu.get(e);l?a.push(t.helperString(l)):(t.helper(Ar),t.directives.add(e.name),a.push(Ic(e.name,"directive")));const{loc:n}=e;if(e.exp&&a.push(e.exp),e.arg&&(e.exp||a.push("void 0"),a.push(e.arg)),Object.keys(e.modifiers).length){e.arg||(e.exp||a.push("void 0"),a.push("void 0"));const t=nc("true",!1,n);a.push(ac(e.modifiers.map((e=>lc(e,t))),n))}return tc(a,e.loc)}(e,t)))):void 0,a.shouldUseBlock&&(f=!0)}if(e.children.length>0)if(s===mr&&(f=!0,p|=1024),n&&s!==fr&&s!==mr){const{slots:a,hasDynamicSlots:l}=Du(e,t);r=a,l&&(p|=1024)}else if(1===e.children.length&&s!==fr){const a=e.children[0],l=a.type,n=5===l||8===l;n&&0===cu(a,t)&&(p|=1),r=n||2===l?a:e.children}else r=e.children;0!==p&&(c=String(p),d&&d.length&&(u=function(e){let t="[";for(let a=0,l=e.length;a<l;a++)t+=JSON.stringify(e[a]),a<l-1&&(t+=", ");return t+"]"}(d))),e.codegenNode=ec(t,s,i,r,c,u,_,!!f,!1,n,e.loc)};function Gu(e,t,a=e.props,l,n,s=!1){const{tag:o,loc:i,children:r}=e;let c=[];const u=[],d=[],_=r.length>0;let p=!1,f=0,v=!1,m=!1,h=!1,g=!1,b=!1,y=!1;const w=[],x=({key:e,value:a})=>{if(cc(e)){const s=e.content,o=re(s);if(!o||l&&!n||"onclick"===s.toLowerCase()||"onUpdate:modelValue"===s||Ce(s)||(g=!0),o&&Ce(s)&&(y=!0),20===a.type||(4===a.type||8===a.type)&&cu(a,t)>0)return;"ref"===s?v=!0:"class"===s?m=!0:"style"===s?h=!0:"key"===s||w.includes(s)||w.push(s),!l||"class"!==s&&"style"!==s||w.includes(s)||w.push(s)}else b=!0};for(let l=0;l<a.length;l++){const n=a[l];if(6===n.type){const{loc:e,name:a,value:l}=n;let s=!0;if("ref"===a&&(v=!0,t.scopes.vFor>0&&c.push(lc(nc("ref_for",!0),nc("true")))),"is"===a&&(Ju(o)||l&&l.content.startsWith("vue:")))continue;c.push(lc(nc(a,!0,gc(e,0,a.length)),nc(l?l.content:"",s,l?l.loc:e)))}else{const{name:a,arg:l,exp:r,loc:f}=n,v="bind"===a,m="on"===a;if("slot"===a)continue;if("once"===a||"memo"===a)continue;if("is"===a||v&&kc(l,"is")&&Ju(o))continue;if(m&&s)continue;if((v&&kc(l,"key")||m&&_&&kc(l,"vue:before-update"))&&(p=!0),v&&kc(l,"ref")&&t.scopes.vFor>0&&c.push(lc(nc("ref_for",!0),nc("true"))),!l&&(v||m)){b=!0,r&&(c.length&&(u.push(ac(Wu(c),i)),c=[]),u.push(v?r:{type:14,loc:f,callee:t.helper(Dr),arguments:[r]}));continue}const h=t.directiveTransforms[a];if(h){const{props:a,needRuntime:l}=h(n,e,t);!s&&a.forEach(x),c.push(...a),l&&(d.push(n),ye(l)&&Vu.set(n,l))}else Ae(a)||(d.push(n),_&&(p=!0))}}let k;if(u.length?(c.length&&u.push(ac(Wu(c),i)),k=u.length>1?oc(t.helper(jr),u,i):u[0]):c.length&&(k=ac(Wu(c),i)),b?f|=16:(m&&!l&&(f|=2),h&&!l&&(f|=4),w.length&&(f|=8),g&&(f|=32)),p||0!==f&&32!==f||!(v||y||d.length>0)||(f|=512),!t.inSSR&&k)switch(k.type){case 15:let e=-1,a=-1,l=!1;for(let t=0;t<k.properties.length;t++){const n=k.properties[t].key;cc(n)?"class"===n.content?e=t:"style"===n.content&&(a=t):n.isHandlerKey||(l=!0)}const n=k.properties[e],s=k.properties[a];l?k=oc(t.helper(Fr),[k]):(n&&!cc(n.value)&&(n.value=oc(t.helper(Mr),[n.value])),s&&(h||4===s.value.type&&"["===s.value.content.trim()[0]||17===s.value.type)&&(s.value=oc(t.helper(Lr),[s.value])));break;case 14:break;default:k=oc(t.helper(Fr),[oc(t.helper(Rr),[k])])}return{props:k,directives:d,patchFlag:f,dynamicPropNames:w,shouldUseBlock:p}}function Wu(e){const t=new Map,a=[];for(let l=0;l<e.length;l++){const n=e[l];if(8===n.key.type||!n.key.isStatic){a.push(n);continue}const s=n.key.content,o=t.get(s);o?("style"===s||"class"===s||re(s))&&Ku(o,n):(t.set(s,n),a.push(n))}return a}function Ku(e,t){17===e.value.type?e.value.elements.push(t.value):e.value=tc([e.value,t.value],e.loc)}function Ju(e){return"component"===e||"Component"===e}const Yu=(e,t)=>{if(Cc(e)){const{children:a,loc:l}=e,{slotName:n,slotProps:s}=function(e,t){let a,l='"default"';const n=[];for(let t=0;t<e.props.length;t++){const a=e.props[t];6===a.type?a.value&&("name"===a.name?l=JSON.stringify(a.value.content):(a.name=Pe(a.name),n.push(a))):"bind"===a.name&&kc(a.arg,"name")?a.exp&&(l=a.exp):("bind"===a.name&&a.arg&&cc(a.arg)&&(a.arg.content=Pe(a.arg.content)),n.push(a))}if(n.length>0){const{props:l,directives:s}=Gu(e,t,n,!1,!1);a=l}return{slotName:l,slotProps:a}}(e,t),o=[t.prefixIdentifiers?"_ctx.$slots":"$slots",n,"{}","undefined","true"];let i=2;s&&(o[2]=s,i=3),a.length&&(o[3]=ic([],a,!1,!1,l),i=4),t.scopeId&&!t.slotted&&(i=5),o.splice(i),e.codegenNode=oc(t.helper(Ur),o,l)}},Zu=/^\s*([\w$_]+|(async\s*)?\([^)]*?\))\s*=>|^\s*(async\s+)?function(?:\s+[\w$]+)?\s*\(/,Xu=(e,t,a,l)=>{const{loc:n,modifiers:s,arg:o}=e;let i;if(4===o.type)if(o.isStatic){let e=o.content;e.startsWith("vue:")&&(e=`vnode-${e.slice(4)}`),i=nc(je(Pe(e)),!0,o.loc)}else i=sc([`${a.helperString(Br)}(`,o,")"]);else i=o,i.children.unshift(`${a.helperString(Br)}(`),i.children.push(")");let r=e.exp;r&&!r.content.trim()&&(r=void 0);let c=a.cacheHandlers&&!r&&!a.inVOnce;if(r){const e=hc(r.content),t=!(e||Zu.test(r.content)),a=r.content.includes(";");(t||c&&e)&&(r=sc([`${t?"$event":"(...args)"} => ${a?"{":"("}`,r,a?"}":")"]))}let u={props:[lc(i,r||nc("() => {}",!1,n))]};return l&&(u=l(u)),c&&(u.props[0].value=a.cache(u.props[0].value)),u.props.forEach((e=>e.key.isHandlerKey=!0)),u},Qu=(e,t,a)=>{const{exp:l,modifiers:n,loc:s}=e,o=e.arg;return 4!==o.type?(o.children.unshift("("),o.children.push(') || ""')):o.isStatic||(o.content=`${o.content} || ""`),n.includes("camel")&&(4===o.type?o.content=o.isStatic?Pe(o.content):`${a.helperString(zr)}(${o.content})`:(o.children.unshift(`${a.helperString(zr)}(`),o.children.push(")"))),a.inSSR||(n.includes("prop")&&ed(o,"."),n.includes("attr")&&ed(o,"^")),!l||4===l.type&&!l.content.trim()?{props:[lc(o,nc("",!0,s))]}:{props:[lc(o,l)]}},ed=(e,t)=>{4===e.type?e.content=e.isStatic?t+e.content:`\`${t}\${${e.content}}\``:(e.children.unshift(`'${t}' + (`),e.children.push(")"))},td=(e,t)=>{if(0===e.type||1===e.type||11===e.type||10===e.type)return()=>{const a=e.children;let l,n=!1;for(let e=0;e<a.length;e++){const t=a[e];if($c(t)){n=!0;for(let n=e+1;n<a.length;n++){const s=a[n];if(!$c(s)){l=void 0;break}l||(l=a[e]=sc([t],t.loc)),l.children.push(" + ",s),a.splice(n,1),n--}}}if(n&&(1!==a.length||0!==e.type&&(1!==e.type||0!==e.tagType||e.props.find((e=>7===e.type&&!t.directiveTransforms[e.name])))))for(let e=0;e<a.length;e++){const l=a[e];if($c(l)||8===l.type){const n=[];2===l.type&&" "===l.content||n.push(l),t.ssr||0!==cu(l,t)||n.push("1"),a[e]={type:12,content:l,loc:l.loc,codegenNode:oc(t.helper($r),n)}}}}},ad=new WeakSet,ld=(e,t)=>{if(1===e.type&&wc(e,"once",!0)){if(ad.has(e)||t.inVOnce)return;return ad.add(e),t.inVOnce=!0,t.helper(Vr),()=>{t.inVOnce=!1;const e=t.currentNode;e.codegenNode&&(e.codegenNode=t.cache(e.codegenNode,!0))}}},nd=(e,t,a)=>{const{exp:l,arg:n}=e;if(!l)return sd();const s=l.loc.source,o=4===l.type?l.content:s;if(!o.trim()||!hc(o))return sd();const i=n||nc("modelValue",!0),r=n?cc(n)?`onUpdate:${n.content}`:sc(['"onUpdate:" + ',n]):"onUpdate:modelValue";let c;c=sc([(a.isTS?"($event: any)":"$event")+" => ((",l,") = $event)"]);const u=[lc(i,e.exp),lc(r,c)];if(e.modifiers.length&&1===t.tagType){const t=e.modifiers.map((e=>(pc(e)?e:JSON.stringify(e))+": true")).join(", "),a=n?cc(n)?`${n.content}Modifiers`:sc([n,' + "Modifiers"']):"modelModifiers";u.push(lc(a,nc(`{ ${t} }`,!1,e.loc,2)))}return sd(u)};function sd(e=[]){return{props:e}}const od=new WeakSet,id=(e,t)=>{if(1===e.type){const a=wc(e,"memo");if(!a||od.has(e))return;return od.add(e),()=>{const l=e.codegenNode||t.currentNode.codegenNode;l&&13===l.type&&(1!==e.tagType&&Oc(l,t),e.codegenNode=oc(t.helper(Yr),[a.exp,ic(void 0,l),"_cache",String(t.cached++)]))}}};function rd(e,t={}){const a=t.onError||ur,l="module"===t.mode;!0===t.prefixIdentifiers?a(_r(46)):l&&a(_r(47)),t.cacheHandlers&&a(_r(48)),t.scopeId&&!l&&a(_r(49));const n=be(e)?function(e,t={}){const a=function(e,t){const a=ue({},Lc);let l;for(l in t)a[l]=void 0===t[l]?Lc[l]:t[l];return{options:a,column:1,line:1,offset:0,originalSource:e,source:e,inPre:!1,inVPre:!1,onWarn:a.onWarn}}(e,t),l=Zc(a);return function(e,t=Qr){return{type:0,children:e,helpers:[],components:[],directives:[],hoists:[],imports:[],cached:0,temps:0,codegenNode:void 0,loc:t}}(Fc(a,0,[]),Xc(a,l))}(e,t):e,[s,o]=[[ld,Nu,id,Tu,Yu,Hu,Fu,td],{on:Xu,bind:Qu,model:nd}];return vu(n,ue({},t,{prefixIdentifiers:!1,nodeTransforms:[...s,...t.nodeTransforms||[]],directiveTransforms:ue({},o,t.directiveTransforms||{})})),function(e,t={}){const a=function(e,{mode:t="function",prefixIdentifiers:a="module"===t,sourceMap:l=!1,filename:n="template.vue.html",scopeId:s=null,optimizeImports:o=!1,runtimeGlobalName:i="Vue",runtimeModuleName:r="vue",ssrRuntimeModuleName:c="vue/server-renderer",ssr:u=!1,isTS:d=!1,inSSR:_=!1}){const p={mode:t,prefixIdentifiers:a,sourceMap:l,filename:n,scopeId:s,optimizeImports:o,runtimeGlobalName:i,runtimeModuleName:r,ssrRuntimeModuleName:c,ssr:u,isTS:d,inSSR:_,source:e.loc.source,code:"",column:1,line:1,offset:0,indentLevel:0,pure:!1,map:void 0,helper:e=>`_${Xr[e]}`,push(e,t){p.code+=e},indent(){f(++p.indentLevel)},deindent(e=!1){e?--p.indentLevel:f(--p.indentLevel)},newline(){f(p.indentLevel)}};function f(e){p.push("\n"+"  ".repeat(e))}return p}(e,t);t.onContextCreated&&t.onContextCreated(a);const{mode:l,push:n,prefixIdentifiers:s,indent:o,deindent:i,newline:r,ssr:c}=a,u=e.helpers.length>0,d=!s&&"module"!==l;if(function(e,t){const{push:a,newline:l,runtimeGlobalName:n}=t,s=n;e.helpers.length>0&&(a(`const _Vue = ${s}\n`),e.hoists.length)&&a(`const { ${[wr,xr,kr,$r,Sr].filter((t=>e.helpers.includes(t))).map(gu).join(", ")} } = _Vue\n`),function(e,t){if(!e.length)return;t.pure=!0;const{push:a,newline:l}=t;l();for(let n=0;n<e.length;n++){const s=e[n];s&&(a(`const _hoisted_${n+1} = `),xu(s,t),l())}t.pure=!1}(e.hoists,t),l(),a("return ")}(e,a),n(`function ${c?"ssrRender":"render"}(${(c?["_ctx","_push","_parent","_attrs"]:["_ctx","_cache"]).join(", ")}) {`),o(),d&&(n("with (_ctx) {"),o(),u&&(n(`const { ${e.helpers.map(gu).join(", ")} } = _Vue`),n("\n"),r())),e.components.length&&(bu(e.components,"component",a),(e.directives.length||e.temps>0)&&r()),e.directives.length&&(bu(e.directives,"directive",a),e.temps>0&&r()),e.temps>0){n("let ");for(let t=0;t<e.temps;t++)n(`${t>0?", ":""}_temp${t}`)}return(e.components.length||e.directives.length||e.temps)&&(n("\n"),r()),c||n("return "),e.codegenNode?xu(e.codegenNode,a):n("null"),d&&(i(),n("}")),i(),n("}"),{ast:e,code:a.code,preamble:"",map:a.map?a.map.toJSON():void 0}}(n,ue({},t,{prefixIdentifiers:!1}))}const cd=Symbol(""),ud=Symbol(""),dd=Symbol(""),_d=Symbol(""),pd=Symbol(""),fd=Symbol(""),vd=Symbol(""),md=Symbol(""),hd=Symbol(""),gd=Symbol("");var bd;let yd;bd={[cd]:"vModelRadio",[ud]:"vModelCheckbox",[dd]:"vModelText",[_d]:"vModelSelect",[pd]:"vModelDynamic",[fd]:"withModifiers",[vd]:"withKeys",[md]:"vShow",[hd]:"Transition",[gd]:"TransitionGroup"},Object.getOwnPropertySymbols(bd).forEach((e=>{Xr[e]=bd[e]}));const wd=D("style,iframe,script,noscript",!0),xd={isVoidTag:X,isNativeTag:e=>Y(e)||Z(e),isPreTag:e=>"pre"===e,decodeEntities:function(e,t=!1){return yd||(yd=document.createElement("div")),t?(yd.innerHTML=`<div foo="${e.replace(/"/g,"&quot;")}">`,yd.children[0].getAttribute("foo")):(yd.innerHTML=e,yd.textContent)},isBuiltInComponent:e=>uc(e,"Transition")?hd:uc(e,"TransitionGroup")?gd:void 0,getNamespace(e,t){let a=t?t.ns:0;if(t&&2===a)if("annotation-xml"===t.tag){if("svg"===e)return 1;t.props.some((e=>6===e.type&&"encoding"===e.name&&null!=e.value&&("text/html"===e.value.content||"application/xhtml+xml"===e.value.content)))&&(a=0)}else/^m(?:[ions]|text)$/.test(t.tag)&&"mglyph"!==e&&"malignmark"!==e&&(a=0);else t&&1===a&&("foreignObject"!==t.tag&&"desc"!==t.tag&&"title"!==t.tag||(a=0));if(0===a){if("svg"===e)return 1;if("math"===e)return 2}return a},getTextMode({tag:e,ns:t}){if(0===t){if("textarea"===e||"title"===e)return 1;if(wd(e))return 2}return 0}},kd=(e,t)=>{const a=W(e);return nc(JSON.stringify(a),!1,t,3)},$d=D("passive,once,capture"),Sd=D("stop,prevent,self,ctrl,shift,alt,meta,exact,middle"),Nd=D("left,right"),Cd=D("onkeyup,onkeydown,onkeypress",!0),Ad=(e,t)=>cc(e)&&"onclick"===e.content.toLowerCase()?nc(t,!0):4!==e.type?sc(["(",e,`) === "onClick" ? "${t}" : (`,e,")"]):e,Ed=(e,t)=>{1!==e.type||0!==e.tagType||"script"!==e.tag&&"style"!==e.tag||t.removeNode()},Td=[e=>{1===e.type&&e.props.forEach(((t,a)=>{6===t.type&&"style"===t.name&&t.value&&(e.props[a]={type:7,name:"bind",arg:nc("style",!0,t.loc),exp:kd(t.value.content,t.loc),modifiers:[],loc:t.loc})}))}],Pd={cloak:()=>({props:[]}),html:(e,t,a)=>{const{exp:l,loc:n}=e;return t.children.length&&(t.children.length=0),{props:[lc(nc("innerHTML",!0,n),l||nc("",!0))]}},text:(e,t,a)=>{const{exp:l,loc:n}=e;return t.children.length&&(t.children.length=0),{props:[lc(nc("textContent",!0),l?cu(l,a)>0?l:oc(a.helperString(Or),[l],n):nc("",!0))]}},model:(e,t,a)=>{const l=nd(e,t,a);if(!l.props.length||1===t.tagType)return l;const{tag:n}=t,s=a.isCustomElement(n);if("input"===n||"textarea"===n||"select"===n||s){let e=dd,o=!1;if("input"===n||s){const a=xc(t,"type");if(a){if(7===a.type)e=pd;else if(a.value)switch(a.value.content){case"radio":e=cd;break;case"checkbox":e=ud;break;case"file":o=!0}}else(function(e){return e.props.some((e=>!(7!==e.type||"bind"!==e.name||e.arg&&4===e.arg.type&&e.arg.isStatic)))})(t)&&(e=pd)}else"select"===n&&(e=_d);o||(l.needRuntime=a.helper(e))}return l.props=l.props.filter((e=>!(4===e.key.type&&"modelValue"===e.key.content))),l},on:(e,t,a)=>Xu(e,0,a,(t=>{const{modifiers:l}=e;if(!l.length)return t;let{key:n,value:s}=t.props[0];const{keyModifiers:o,nonKeyModifiers:i,eventOptionModifiers:r}=((e,t,a,l)=>{const n=[],s=[],o=[];for(let a=0;a<t.length;a++){const l=t[a];$d(l)?o.push(l):Nd(l)?cc(e)?Cd(e.content)?n.push(l):s.push(l):(n.push(l),s.push(l)):Sd(l)?s.push(l):n.push(l)}return{keyModifiers:n,nonKeyModifiers:s,eventOptionModifiers:o}})(n,l);if(i.includes("right")&&(n=Ad(n,"onContextmenu")),i.includes("middle")&&(n=Ad(n,"onMouseup")),i.length&&(s=oc(a.helper(fd),[s,JSON.stringify(i)])),!o.length||cc(n)&&!Cd(n.content)||(s=oc(a.helper(vd),[s,JSON.stringify(o)])),r.length){const e=r.map(Oe).join("");n=cc(n)?nc(`${n.content}${e}`,!0):sc(["(",n,`) + "${e}"`])}return{props:[lc(n,s)]}})),show:(e,t,a)=>({props:[],needRuntime:a.helper(md)})},Ud=Object.create(null);function Id(e,t){if(!be(e)){if(!e.nodeType)return se;e=e.innerHTML}const a=e,l=Ud[a];if(l)return l;if("#"===e[0]){const t=document.querySelector(e);e=t?t.innerHTML:""}const{code:n}=function(e,t={}){return rd(e,ue({},xd,t,{nodeTransforms:[Ed,...Td,...t.nodeTransforms||[]],directiveTransforms:ue({},Pd,t.directiveTransforms||{}),transformHoist:null}))}(e,ue({hoistStatic:!0,onError:void 0,onWarn:se},t)),s=new Function("Vue",n)(cr);return s._rc=!0,Ud[a]=s}fo(Id);var Od=Object.freeze({__proto__:null,BaseTransition:ql,Comment:Cs,EffectScope:qe,Fragment:Ss,KeepAlive:en,ReactiveEffect:at,Static:As,Suspense:kl,Teleport:$s,Text:Ns,Transition:ui,TransitionGroup:Ai,VueElement:si,callWithAsyncErrorHandling:Oa,callWithErrorHandling:Ia,camelize:Pe,capitalize:Oe,cloneVNode:Ws,compatUtils:null,compile:Id,computed:xo,createApp:sr,createBlock:Ls,createCommentVNode:Ys,createElementBlock:Ms,createElementVNode:Vs,createHydrationRenderer:ms,createPropsRestProxy:Po,createRenderer:vs,createSSRApp:or,createSlots:Tn,createStaticVNode:Js,createTextVNode:Ks,createVNode:Hs,customRef:$a,defineAsyncComponent:Zl,defineComponent:Jl,defineCustomElement:ai,defineEmits:$o,defineExpose:So,defineProps:ko,defineSSRCustomElement:li,get devtools(){return nl},effect:nt,effectScope:Be,getCurrentInstance:so,getCurrentScope:He,getTransitionRawChildren:Kl,guardReactiveProps:Gs,h:Io,handleError:ja,hydrate:nr,initCustomFormatter:Mo,initDirectivesForSSR:rr,inject:Tl,isMemoSame:Fo,isProxy:ia,isReactive:na,isReadonly:sa,isRef:fa,isRuntimeOnly:vo,isShallow:oa,isVNode:Fs,markRaw:ca,mergeDefaults:To,mergeProps:eo,nextTick:Ja,normalizeClass:K,normalizeProps:J,normalizeStyle:V,onActivated:an,onBeforeMount:dn,onBeforeUnmount:vn,onBeforeUpdate:pn,onDeactivated:ln,onErrorCaptured:yn,onMounted:_n,onRenderTracked:bn,onRenderTriggered:gn,onScopeDispose:Ge,onServerPrefetch:hn,onUnmounted:mn,onUpdated:fn,openBlock:Ps,popScopeId:fl,provide:El,proxyRefs:xa,pushScopeId:pl,queuePostFlushCb:Qa,reactive:Qt,readonly:ta,ref:va,registerRuntimeCompiler:fo,render:lr,renderList:En,renderSlot:Pn,resolveComponent:kn,resolveDirective:Nn,resolveDynamicComponent:Sn,resolveFilter:null,resolveTransitionHooks:Vl,setBlockTracking:Os,setDevtoolsHook:ol,setTransitionHooks:Wl,shallowReactive:ea,shallowReadonly:aa,shallowRef:ma,ssrContextKey:Oo,ssrUtils:null,stop:st,toDisplayString:te,toHandlerKey:je,toHandlers:In,toRaw:ra,toRef:Ca,toRefs:Sa,transformVNodeArgs:Ds,triggerRef:ba,unref:ya,useAttrs:Ao,useCssModule:oi,useCssVars:ii,useSSRContext:jo,useSlots:Co,useTransitionState:Dl,vModelCheckbox:Mi,vModelDynamic:Bi,vModelRadio:Fi,vModelSelect:Ri,vModelText:ji,vShow:Yi,version:Ro,warn:Ta,watch:jl,watchEffect:Pl,watchPostEffect:Ul,watchSyncEffect:Il,withAsyncContext:Uo,withCtx:ml,withDefaults:No,withDirectives:wn,withKeys:Ji,withMemo:Lo,withModifiers:Wi,withScopeId:vl});const jd=function(e,{props:t,children:a,element:l,app:n}={}){let s=l,o=Hs(e,t,a);n&&n._context&&(o.appContext=n._context),s?lr(o,s):"undefined"!=typeof document&&lr(o,s=document.createElement("div"));return{vNode:o,destroy:()=>{s&&lr(null,s),s=null,o=null},el:s}};var Md={props:["content"],watch:{content:function(e,t){}},render(){return Io(this.$props.content)},__file:"http_src/vue/vue_node.vue"};const Ld=["id"],Fd=["aria-labelledby"],Rd={class:"dropdown-item"};var Dd={__name:"dropdown",props:{id:String,auto_load:Boolean,button_class:String,button_style:String,f_on_open:Function,f_on_close:Function},emits:[],setup(e,{expose:t,emit:a}){const l=e,n=Co(),s=va([]);va([]);const o=va([]),i=va(null),r=va(null);let c=null;_n((()=>{c=$(i.value).parent().closest("div").css("overflow"),1==l.auto_load&&d();let e={dropdown:i.value,dropdown_button:r.value};$(i.value).on("show.bs.dropdown",(function(){$(i.value).parent().closest("div").css("overflow","visible"),null!=l.f_on_open&&l.f_on_open(e)})),$(i.value).on("hide.bs.dropdown",(function(){$(i.value).parent().closest("div").css("overflow",c),null!=l.f_on_close&&l.f_on_close(e)}))}));const u=xo((()=>null!=l.button_class?l.button_class:"btn-link"));async function d(){if(s.value=[],null==n||null==n.menu)return;let e=n.menu();null!=e&&0!=e.length&&("symbol"==typeof e[0].type&&(e=e[0].children),o.value=[],e.forEach((e=>{let t=e;o.value.push(t)})),await Ja())}return t({load_menu:d}),(t,a)=>(Ps(),Ms("div",{class:"dropdown",ref_key:"dropdown",ref:i,style:{display:"inline-block"}},[Vs("button",{class:K(["btn dropdown-toggle",ya(u)]),style:V(e.button_style),type:"button",id:e.id,ref_key:"dropdown_button",ref:r,"aria-expanded":"false","data-bs-toggle":"dropdown"},[Pn(t.$slots,"title")],14,Ld),Vs("ul",{class:"dropdown-menu","aria-labelledby":e.id,style:{"max-height":"25rem",overflow:"auto"}},[Ys(' <slot name="menu"></slot> '),Ys(' <li class="dropdown-item" v-for="(opt, i) in options" :ref="el => { menu[i] = el }"> '),Ys("   asd "),Ys("   </li> "),(Ps(!0),Ms(Ss,null,En(o.value,((e,t)=>(Ps(),Ms("li",Rd,[Hs(Md,{content:e},null,8,["content"])])))),256))],8,Fd)],512))},__file:"http_src/vue/dropdown.vue"};const zd=e=>i18n(e);function qd(e){const t={button_list:Vd(!0),button_array:Vd(!1)};return(e,a,l,n)=>{if(null==e.render_v_node_type&&null==e.render_v_func)return null;if(1==n)return!0;if(null!=e.render_v_func)return e.render_v_func(e,a,l,n);return(0,t[e.render_v_node_type])(e,a,l)}}function Bd(e){return(e,t,a)=>{if(null!=e.render_v_func)return null;if(1==a)return!0;let l;if(null!=e.data_field&&(l=t[e.data_field]),null!=e.zero_is_null&&null!=l&&0==l&&(l=""),null!=e.render_generic){return R.getFormatGenericField(e.render_generic,e.zero_is_null)(l,"display",t)}if(null!=e.render_func)return e.render_func(l,t);if(null!=e.render_type){if(null!=v.types[e.render_type])return e.render_func=v.getFormatter(e.render_type),e.render_func(l);if(null!=R[e.render_type])return R[e.render_type](l,"display",t,e.zero_is_null);throw`In column ${e.data_field} render_type: ${e.render_type} not found`}return l}}function Vd(e){return(t,a,l)=>{const n=e=>n=>{n.stopPropagation();let s={event_id:e,row:a,col:t};l.emit("custom_event",s)};let s=t.button_def_array.map((t=>{let s={};null!=t.attributes&&(s=t.attributes);let o=b.clone(t.class);null!=t.f_map_class&&(o=t.f_map_class(o,a));let i="";return null!=o&&o.length>0&&(i=o.join(" ")),0==e?l.h("button",{class:`btn btn-sm btn-secondary ${i}`,style:"margin-right:0.2rem;",onClick:n(t.event_id),...s},[l.h("span",{class:t.icon,style:"",title:zd(t.title_i18n)})]):l.h("a",{class:`${i} btn-sm`,onClick:n(t.event_id),style:"display:block;",...s},[l.h("span",{class:t.icon,style:"margin-right:0.2rem;cursor:pointer;"}),zd(t.title_i18n)])}));if(1==e){let e=l.h("span",{class:"fas fa-sm fa-align-justify"});return l.h(Dd,{auto_load:!0,button_style:"",button_class:"btn-secondary btn-sm"},{title:()=>e,menu:()=>s})}return l.h("div",{class:"button-group"},s)}}function Hd(e,t,a){let l=Wd(e);return async(n,s,o,i,r)=>{let c=o.find((e=>0!=e.sort)),u=o.filter((e=>1==e.visible)).map((e=>l(e))).join(","),d={start:n*s,length:s,map_search:i,visible_columns:u};if(null!=c&&(d.sort=l(c.data),d.order=1==c.sort?"asc":"desc"),null!=t){let e=t();d={...d,...e}}const _=x.obj_to_url_params(d),p=`${http_prefix}/${e.data_url}?${_}`;let f=await b.http_request(p,null,null,!0);null!=a&&a(d);let v=f.rsp;null!=e.rsp_records_field&&(v=f.rsp[e.rsp_records_field]);let m=f.query_info;return null!=e.rsp_query_info_field&&(m=f.rsp[e.rsp_query_info_field]),f.recordsFiltered>f.recordsTotal&&(f.recordsTotal=f.recordsFiltered),{total_rows:f.recordsTotal,rows:v,query_info:m}}}function Gd(e){return e=>null!=e.title_i18n?zd(e.title_i18n):null!=e.title?e.title:""}function Wd(e){return t=>null!=t.id?t.id:null!=t.data_field?t.data_field:e.columns.findIndex((e=>e==t))}const Kd={get_columns_from_datatable_columns:function(e,t){let a=t.map(((t,a)=>{t.data,e[a],null==t.orderable||t.orderable,null!=t.className&&t.className.split(" "),null!=t.render&&(t.render_func=(e,a)=>t.render(e,"display",a))}));return a},build_table:async function(e,t,a,l,n){let s=`${e}/tables_config/${t}.json?epoch_end=${Number.parseInt(Date.now()/1e3)}`,o=await b.http_request(s,null,null,!0);return null==o?{id:t,columns:[]}:(null!=a&&(o.columns=await a(o.columns)),{id:t,columns:o.columns,get_rows:Hd(o,l,n),get_column_id:Wd(o),print_column_name:Gd(),print_html_row:Bd(),print_vue_node_row:qd(),f_is_column_sortable:e=>e.sortable,f_get_column_classes:e=>{let t=e?.class;if(null!=t)return t;return[]},f_get_column_style:e=>{let t=e?.style;if(null!=t)return t;return""},display_empty_rows:o.display_empty_rows,enable_search:o.enable_search,default_sort:o.default_sort,show_autorefresh:o.show_autorefresh,paging:o.paging})}};let Jd={};async function Yd(e){return null==Jd[e]&&(Jd[e]=ntopng_utility.http_request(e)),await Jd[e]}const Zd=async function(e){e.filter((e=>null==e.label)).forEach((e=>{console.error(`label not defined for filter ${JSON.stringify(e)}`),e.label=""})),e.sort(((e,t)=>e.label.localeCompare(t.label))),i18n_ext.tags={},TAG_OPERATORS={},DEFINED_TAGS={},e.forEach((e=>{i18n_ext.tags[e.id]=e.label,e.operators.forEach((e=>TAG_OPERATORS[e.id]=e.label)),DEFINED_TAGS[e.id]=e.operators.map((e=>e.id))}));let t=ntopng_url_manager.get_url_entries(),a=[];for(const[e,l]of t){let t=FILTERS_CONST.find((t=>t.id==e));if(null!=t){l.split(",").forEach((e=>{let[l,n]=e.split(";");if(null==n||null==l||""==n||null!=t.options&&null==t.options.find((e=>e.value==l)))return;let s=l;"array"==t.value_type&&(s=t?.options?.find((e=>e.value==l))?.label),a.push({id:t.id,operator:n,value:l,label:t.label,value_label:s})}))}}return a};function Xd(e){let t={};e.forEach((e=>{let a=t[e.id];null==a&&(a=[],t[e.id]=a),a.push(e)}));let a={};for(let e in t){let l=t[e].filter((e=>null!=e.value&&null!=e.operator&&""!=e.operator)).map((e=>`${e.value};${e.operator}`)).join(",");a[e]=l}return a}const Qd={get_filter_const:Yd,get_filters_object:Xd,load_filters_data:Zd,tag_operator_label_dict:{eq:"=",neq:"!=",lt:"<",gt:">",gte:">=",lte:"<=",in:"contains",nin:"does not contain"}},e_=["multiple"],t_=["selected","value","disabled"],a_=["label"],l_=["selected","value","disabled"];var n_={__name:"select-search",props:{id:String,options:Array,selected_option:Object,selected_options:Array,multiple:Boolean,add_tag:Boolean,disable_change:Boolean},emits:["update:selected_option","update:selected_options","select_option","unselect_option","change_selected_options"],setup(e,{expose:t,emit:a}){const l=e,n=va(null),s=va([]),o=va([]),i=va({}),r=va([]),c=va(0);let u=!0;function d(){!function(){if(s.value=[],o.value=[],null==l.options)return;let e={};l.options.forEach((t=>{let a={...t};null==a.value&&(a.value=a.label),null==t.group?s.value.push(a):(null==e[t.group]&&(e[t.group]={group:a.group,options:[]}),e[t.group].options.push(a))})),o.value=ntopng_utility.object_to_array(e),c.value+=1}(),m(),v()}_n((()=>{l.options&&(l.disable_change&&u||d())})),jl((()=>l.selected_option),((e,t)=>{m(e),p()}),{flush:"pre"}),jl((()=>l.selected_options),((e,t)=>{v(),p()}),{flush:"pre"}),jl([c],((e,t)=>{_()}),{flush:"post"}),jl((()=>l.options),((e,t)=>{1!=l.disable_change&&null!=e&&d()}),{flush:"pre"});const _=()=>{let e=n.value;0==u&&w(),$(e).hasClass("select2-hidden-accessible")||($(e).select2({width:"100%",height:"500px",theme:"bootstrap-5",dropdownParent:$(e).parent(),dropdownAutoWidth:!0,tags:l.add_tag&&!l.multiple}),$(e).on("select2:select",(function(e){let t=e.params.data;if(null==t.element){let e={label:t.text,value:t.id};return a("update:selected_option",e),void a("select_option",e)}let n=t.element._value,s=y(n);if(n!=l.selected_option&&(a("update:selected_option",s),a("select_option",s)),!l.multiple)return;r.value=r.value.filter((e=>e!=n)),r.value.push(n);let o=b(r.value);a("update:selected_options",o),a("change_selected_options",o)})),$(e).on("select2:unselect",(function(e){let t=e.params.data.element._value;if(!l.multiple)return;r.value=r.value.filter((e=>e!=t));let n=y(t),s=b(r.value);a("unselect_option",n),a("update:selected_options",s),a("change_selected_options",s)}))),u=!1,p()};function p(){let e=n.value;if(l.multiple)$(e).val(r.value),$(e).trigger("change");else{let t=g(l.selected_option);$(e).val(t),$(e).trigger("change")}}function f(e){if(!l.multiple){const t=0==i.value.value||"0"==i.value.value;return e.value==i.value.value||t&&e.label==i.value.label}return null!=r.value.find((t=>t==e.value))||e.selected}function v(){null!=l.selected_options&&l.multiple&&(r.value=[],l.selected_options.forEach((e=>{let t=e.value||e.label;r.value.push(t)})))}function m(e){null!=e||l.multiple||(e=h()),i.value=e}function h(){return null==l.selected_option?l.options[0]:l.selected_option}function g(e){let t;return null==e&&(e=h()),t=null!=e.value?e.value:e.label,t}function b(e){let t=e.map((e=>y(e)));return t}function y(e){let t=function(e){null==e&&(e=g());let t=s.value.find((t=>t.value==e));if(null!=t)return t;for(let a=0;a<o.value.length;a+=1){if(t=o.value[a].options.find((t=>t.value==e)),null!=t)return t}return null}(e),a=l.options.find((e=>e.label==t.label));return a}function w(){try{$(n.value).select2("destroy"),$(n.value).off("select2:select")}catch(e){console.error("Destroy select-search catch error:"),console.error(e)}}return t({render:_}),vn((()=>{w()})),(t,a)=>(Ps(),Ms("select",{class:"select2 form-select",ref_key:"select2",ref:n,required:"",name:"filter_type",multiple:e.multiple},[(Ps(!0),Ms(Ss,null,En(s.value,((e,t)=>(Ps(),Ms("option",{class:"ntopng-dropdown-min-width no-wrap",selected:f(e),value:e.value,disabled:e.disabled},te(e.label),9,t_)))),256)),(Ps(!0),Ms(Ss,null,En(o.value,((e,t)=>(Ps(),Ms("optgroup",{label:e.group},[(Ps(!0),Ms(Ss,null,En(e.options,((e,t)=>(Ps(),Ms("option",{selected:f(e),value:e.value,disabled:e.disabled},te(e.label),9,l_)))),256))],8,a_)))),256))],8,e_))},__file:"http_src/vue/select-search.vue"},s_=Jl({components:{},props:{id:String,main_title:Object,secondary_title_list:Array,help_link:String,items_table:Array},emits:["click_item"],created(){},data:()=>({}),mounted(){ntopng_sync.ready(this.$props.id)},methods:{}});const o_={class:"navbar navbar-shadow navbar-expand-lg navbar-light bg-light px-2 mb-2"},i_={class:"me-1 text-nowrap",style:{"font-size":"1.1rem"}},r_=["href","title"],c_=["title"],u_=["href","title"],d_=["title"],__=Vs("span",{class:"text-muted ms-1 d-none d-lg-inline d-md-none"},"|",-1),p_=Vs("button",{class:"navbar-toggler",type:"button"},[Vs("span",{class:"navbar-toggler-icon"})],-1),f_={class:"collapse navbar-collapse scroll-x",id:"navbarNav"},v_={class:"navbar-nav"},m_=["onClick"],h_={key:0,class:"badge rounded-pill bg-dark",style:{float:"right","margin-bottom":"-10px"}},g_=["onClick"],b_={key:0,class:"badge rounded-pill bg-dark",style:{float:"right","margin-bottom":"-10px"}},y_=["onClick"],w_={key:0,class:"badge rounded-pill bg-dark",style:{float:"right","margin-bottom":"-10px"}},x_={class:"navbar-nav ms-auto"},k_=Vs("a",{href:"javascript:history.back()",class:"nav-item nav-link text-muted"},[Vs("i",{class:"fas fa-arrow-left"})],-1),$_=["href"],S_=[Vs("i",{class:"fas fa-question-circle"},null,-1)];s_.render=function(e,t,a,l,n,s){return Ps(),Ms("nav",o_,[Vs("span",i_,[Vs("i",{class:K(e.main_title.icon)},null,2),e.main_title.href?(Ps(),Ms("a",{key:0,href:e.main_title.href,title:e.main_title.title},te(e.main_title.label),9,r_)):(Ps(),Ms("span",{key:1,title:e.main_title.title},te(e.main_title.label),9,c_)),(Ps(!0),Ms(Ss,null,En(e.secondary_title_list,(e=>(Ps(),Ms(Ss,null,[Ks(" / "),e.href?(Ps(),Ms("a",{key:0,class:K(e.class),href:e.href,title:e.title},[Ks(te(e.label)+" ",1),e.icon?(Ps(),Ms("i",{key:0,class:K(e.icon)},null,2)):Ys("v-if",!0)],10,u_)):(Ps(),Ms("span",{key:1,title:e.title},te(e.label),9,d_))],64)))),256))]),__,p_,Vs("div",f_,[Vs("ul",v_,[(Ps(!0),Ms(Ss,null,En(e.items_table,(e=>(Ps(),Ms(Ss,null,[e.active?(Ps(),Ms(Ss,{key:0},[e.active?(Ps(),Ms("li",{key:0,onClick:t=>this.$emit("click_item",e),class:K(["nav-item nav-link active",e.class])},[e.badge_num>0?(Ps(),Ms("span",h_,te(e.badge_num),1)):Ys("v-if",!0),Vs("b",null,[Vs("i",{class:K(e.icon)},null,2),Ks(" "+te(e.label),1)])],10,m_)):(Ps(),Ms("li",{key:1,onClick:t=>this.$emit("click_item",e),class:K(["nav-item nav-link",e.class])},[e.badge_num>0?(Ps(),Ms("span",b_,te(e.badge_num),1)):Ys("v-if",!0),Vs("b",null,[Vs("i",{class:K(e.icon)},null,2),Ks(" "+te(e.label),1)])],10,g_))],64)):(Ps(),Ms("a",{key:1,onClick:t=>this.$emit("click_item",e),href:"#",class:K(["nav-item nav-link",e.class])},[e.badge_num>0?(Ps(),Ms("span",w_,te(e.badge_num),1)):Ys("v-if",!0),Vs("i",{class:K(e.icon)},null,2),Ks(" "+te(e.label),1)],10,y_))],64)))),256))]),Vs("ul",x_,[k_,Vs("a",{target:"_newtab",href:e.help_link,class:"nav-item nav-link text-muted"},S_,8,$_)])])])},s_.__file="http_src/vue/page-navbar.vue";var N_=Jl({components:{},props:{id:String,global:Boolean,no_close_button:Boolean},emits:[],created(){},data:()=>({show_alert:!1,i18n:e=>i18n(e),body:"",alert_type:"alert-success"}),mounted(){1==this.global&&ntopng_events_manager.on_custom_event(this.$props.id,ntopng_custom_events.SHOW_GLOBAL_ALERT_INFO,(e=>{null!=e.type&&(this.alert_type=e.type),null!=e.timeout&&setTimeout((()=>{this.close()}),1e3*e.timeout),this.show(e.text_html)}))},methods:{close:function(){this.show_alert=!1},show:function(e,t){this.show_alert=!0,this.body=e,null!=t&&(this.alert_type=t)}}});const C_=["innerHTML"];N_.render=function(e,t,a,l,n,s){return 1==e.show_alert?(Ps(),Ms("div",{key:0,style:{width:"100%"},class:K(["alert alert-dismissable",e.alert_type])},[Vs("span",{innerHTML:e.body},null,8,C_),e.no_close_button?Ys("v-if",!0):(Ps(),Ms("button",{key:0,type:"button",onClick:t[0]||(t[0]=(...t)=>e.close&&e.close(...t)),class:"btn-close","aria-label":"Close"}))],2)):Ys("v-if",!0)},N_.__file="http_src/vue/alert-info.vue";var A_={components:{},props:{id:String,chart_type:String,register_on_status_change:Boolean,not_emit_global_status_update:Boolean,base_url_request:String,get_params_url_request:Function,get_custom_chart_options:Function,map_chart_options:Function,min_time_interval_id:String,round_time:Boolean},emits:["apply","hidden","showed","chart_reloaded","zoom"],created(){},beforeUnmount(){this.chart.destroyChart()},data:()=>({chart:null,chart_options:null,from_zoom:!1}),async mounted(){await this.init(),ntopng_sync.ready(this.$props.id)},methods:{init:async function(){let e=ntopng_status_manager.get_status(),t=this.get_url_request(e);this.register_on_status_change&&this.register_status(e),await this.draw_chart(t)},get_data_uri:async function(e){if(null==this.chart)return null;return await this.chart.to_data_uri()},download_chart_png:async function(e,t){if(null==this.chart)return;let a=await this.chart.to_data_uri();downloadURI(a,e)},register_status:function(e){let t=this.get_url_request(e);ntopng_status_manager.on_status_change(this.id,(e=>{1==this.from_zoom&&(this.from_zoom=!1);let a=this.get_url_request(e);a!=t?(t=a,this.update_chart(a)):t=a}),!1)},get_url_request:function(e){let t;return null!=this.get_params_url_request?(null==e&&(e=ntopng_status_manager.get_status()),t=this.get_params_url_request(e)):t=x.get_url_params(),`${this.base_url_request}?${t}`},draw_chart:async function(e){let t=ntopChartApex,a=this.chart_type;null==a&&(a=t.typeChart.TS_STACKED),this.chart=t.newChart(a);let l=this;this.chart.registerEvent("beforeZoom",(function(e,t){l.on_before_zoom(e,t)})),this.chart.registerEvent("zoomed",(function(e,t){l.on_zoomed(e,t)}));let n=await this.get_chart_options(e);this.chart.drawChart(this.$refs.chart,n)},update_chart:async function(e){null==e&&(e=this.get_url_request());let t=await this.get_chart_options(e);this.chart.updateChart(t)},update_chart_options:function(e){this.chart.updateChart(e)},update_chart_series:function(e){null!=e&&this.chart.updateSeries(e)},get_chart_options:async function(e){let t;return t=null==this.get_custom_chart_options?await b.http_request(e):await this.get_custom_chart_options(e),null!=this.map_chart_options&&(t=this.map_chart_options(t)),this.$emit("chart_reloaded",t),t},on_before_zoom:function(e,{xaxis:t,yaxis:a}){let l=this.get_epoch_from_xaxis_event(t);if(null!=this.min_time_interval_id){const e=b.get_timeframe_from_timeframe_id(this.min_time_interval_id);l.epoch_end-l.epoch_begin<e&&(l.epoch_end=l.epoch_end+e,l.epoch_end=l.epoch_end-l.epoch_end%e,l.epoch_begin=l.epoch_end-e),1==this.round_time&&(l.epoch_begin=b.round_time_by_timeframe_id(l.epoch_begin,this.min_time_interval_id),l.epoch_end=b.round_time_by_timeframe_id(l.epoch_end,this.min_time_interval_id)),t.min=1e3*l.epoch_begin,t.max=1e3*l.epoch_end}return t},on_zoomed:function(e,{xaxis:t,yaxis:a}){this.from_zoom=!0;const l=this.get_epoch_from_xaxis_event(t);this.not_emit_global_status_update||C.emit_event(ntopng_events.EPOCH_CHANGE,l,this.id),this.$emit("zoom",l)},get_epoch_from_xaxis_event:function(e){const t=moment(e.min),a=moment(e.max);return{epoch_begin:Number.parseInt(t.unix()),epoch_end:Number.parseInt(a.unix())}}}};const E_={style:{width:"100%"},ref:"chart"};A_.render=function(e,t,a,l,n,s){return Ps(),Ms("div",E_,null,512)},A_.__file="http_src/vue/chart.vue";var T_={components:{"select-search":n_},props:{id:String,enable_refresh:Boolean,disabled_date_picker:Boolean,min_time_interval_id:String,round_time:Boolean,custom_time_interval_list:Array},computed:{invalid_date_message:function(){if(this.wrong_date)return this.i18n("wrong_date_range");if(this.wrong_min_interval){let e=this.i18n("wrong_min_interval");return e.replace("%time_interval",this.i18n(`show_alerts.presets.${this.min_time_interval_id}`)),e}}},watch:{enable_refresh:function(e,t){1==e?this.start_refresh():null!=this.refresh_interval&&(clearInterval(this.refresh_interval),this.refresh_interval=null)},min_time_interval_id:function(){},round_time:function(){}},emits:["epoch_change"],created(){},beforeMount(){if(null!=this.$props.custom_time_interval_list&&(this.time_preset_list=this.$props.custom_time_interval_list),null==this.min_time_interval_id)return void(this.time_preset_list_filtered=this.time_preset_list);const e=this.get_timeframes_available(),t=e[this.min_time_interval_id];this.time_preset_list_filtered=this.time_preset_list.filter((a=>"custom"==a.value||(null==t||e[a.value]>=t)))},mounted(){let e=x.get_url_entry("epoch_begin"),t=x.get_url_entry("epoch_end");null!=e&&null!=t&&this.emit_epoch_change({epoch_begin:Number.parseInt(e),epoch_end:Number.parseInt(t)},this.$props.id,!0);let a=this,l=(e,t)=>flatpickr($(this.$refs[e]),{enableTime:!0,dateFormat:"d/m/Y H:i",time_24hr:!0,clickOpens:!0,onChange:function(e,t,l){a.enable_apply=!0,a.wrong_date=a.flat_begin_date.selectedDates[0].getTime()>a.flat_end_date.selectedDates[0].getTime(),a.wrong_min_interval=a.min_time_interval_id&&a.get_utc_seconds(a.flat_end_date.selectedDates[0].getTime()-a.flat_begin_date.selectedDates[0].getTime()<b.get_timeframe_from_timeframe_id(a.min_time_interval_id))}});this.flat_begin_date=l("begin-date"),this.flat_end_date=l("end-date"),C.on_event_change(this.$props.id,ntopng_events.EPOCH_CHANGE,(e=>this.on_status_updated(e)),!0),ntopng_sync.ready(this.$props.id),this.enable_refresh&&this.start_refresh()},methods:{start_refresh:function(){this.refresh_interval=setInterval((()=>{let e=this.selected_time_option?.value;this.enable_refresh&&null!=e&&"custom"!=e&&(this.update_from_interval=!0,this.change_select_time(!0))}),1e3*this.refresh_interval_seconds)},utc_s_to_server_date:function(e){let t=1e3*e,a=new Date(t).getTimezoneOffset(),l=moment.tz(t,ntop_zoneinfo)._offset;return new Date(t+1e3*(l+a)*60)},server_date_to_date:function(e,t){let a=e.getTime(),l=e.getTimezoneOffset(),n=moment.tz(a,ntop_zoneinfo)._offset;return new Date(a-1e3*(n+l)*60)},on_status_updated:function(e){let t=Date.now(),a=t-18e5;null!=e.epoch_end&&null!=e.epoch_begin&&Number.parseInt(e.epoch_end)>Number.parseInt(e.epoch_begin)?(e.epoch_begin=Number.parseInt(e.epoch_begin),e.epoch_end=Number.parseInt(e.epoch_end),t=1e3*e.epoch_end,a=1e3*e.epoch_begin):(e.epoch_end=this.get_utc_seconds(t),e.epoch_begin=this.get_utc_seconds(a),x.add_obj_to_url(e),this.emit_epoch_change(e,this.$props.id)),this.flat_begin_date.setDate(this.utc_s_to_server_date(e.epoch_begin)),this.flat_end_date.setDate(this.utc_s_to_server_date(e.epoch_end)),this.set_select_time_value(a,t),this.epoch_status={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end},0==this.update_from_interval&&this.add_status_in_history(this.epoch_status),this.enable_apply=!1,this.update_from_interval=!1,x.add_obj_to_url(this.epoch_status)},set_select_time_value:function(e,t){const a=this.get_timeframes_available();let l=this.get_utc_seconds(Date.now());1==this.round_time&&null!=this.min_time_interval_id&&(l=this.round_time_by_min_interval(l));const n=this.get_utc_seconds(t),s=this.get_utc_seconds(e);if(this.is_between(n,l,60)){this.select_time_value=null;for(let e in a)this.is_between(s,l-a[e],60)&&(this.select_time_value=e);null==this.select_time_value&&(this.select_time_value="custom")}else this.select_time_value="custom";this.time_preset_list_filtered.forEach((e=>{e.currently_active=!1,e.value==this.select_time_value&&(this.selected_time_option=e,e.currently_active=!0)}))},apply:function(){let e=this.get_utc_seconds(Date.now()),t=this.server_date_to_date(this.flat_begin_date.selectedDates[0]),a=this.get_utc_seconds(t.getTime()),l=this.server_date_to_date(this.flat_end_date.selectedDates[0]),n=this.get_utc_seconds(l.getTime());n>e&&(n=e);let s={epoch_begin:a,epoch_end:n};this.emit_epoch_change(s)},change_select_time:function(e){let t=this.get_timeframes_available()[this.selected_time_option.value],a=this.get_utc_seconds(Date.now()),l={epoch_begin:a-t,epoch_end:a,refresh_data:e};this.emit_epoch_change(l)},get_timeframes_available:function(){const e=b.get_timeframes_dict(),t=this.time_preset_list.map((e=>e.value));let a={};return t.forEach((t=>{a[t]=e[t]})),a},get_utc_seconds:function(e){return b.get_utc_seconds(e)},is_between:function(e,t,a){return e>=t-a&&e<=t},zoom:function(e){if(null==this.epoch_status)return;let t=(this.epoch_status.epoch_end-this.epoch_status.epoch_begin)/e,a=this.epoch_status.epoch_end/2+this.epoch_status.epoch_begin/2;this.epoch_status.epoch_begin=a-t/2,this.epoch_status.epoch_end=a+t/2;let l=this.get_utc_seconds(Date.now());this.epoch_status.epoch_end>l&&(this.epoch_status.epoch_end=l),this.epoch_status.epoch_end=Number.parseInt(this.epoch_status.epoch_end),this.epoch_status.epoch_begin=Number.parseInt(this.epoch_status.epoch_begin),this.epoch_status.epoch_begin==this.epoch_status.epoch_end&&(this.epoch_status.epoch_begin-=2),this.emit_epoch_change(this.epoch_status)},jump_time_back:function(){if(null==this.epoch_status)return;this.epoch_status.epoch_begin-=1800,this.epoch_status.epoch_end-=1800,this.emit_epoch_change(this.epoch_status)},jump_time_ahead:function(){if(null==this.epoch_status)return;let e=this.epoch_status.epoch_end,t=this.get_utc_seconds(Date.now());this.epoch_status.epoch_end+=1800,this.epoch_status.epoch_end>t&&(this.epoch_status.epoch_end=t),this.epoch_status.epoch_begin+=this.epoch_status.epoch_end-e,this.emit_epoch_change(this.epoch_status)},emit_epoch_change:function(e,t,a){null!=e.epoch_end&&null!=e.epoch_begin&&(this.wrong_date=!1,e.epoch_begin>e.epoch_end?this.wrong_date=!0:(this.min_time_interval_id&&1==this.round_time&&(e.epoch_begin=this.round_time_by_min_interval(e.epoch_begin),e.epoch_end=this.round_time_by_min_interval(e.epoch_end)),t!=this.id&&this.on_status_updated(e),C.emit_event(ntopng_events.EPOCH_CHANGE,e,this.id),a||this.$emit("epoch_change",e)))},round_time_by_min_interval:function(e){return b.round_time_by_timeframe_id(e,this.min_time_interval_id)},add_status_in_history:function(e){this.history_last_status=this.history[this.history.length-1],this.history.length>5&&this.history.shift(),this.history.push(e)},apply_status_by_history:function(){null!=this.history_last_status&&(this.history.pop(),this.history.pop(),this.emit_epoch_change(this.history_last_status))}},data:()=>({i18n:e=>i18n(e),epoch_status:null,refresh_interval:null,refresh_interval_seconds:60,update_from_interval:!1,history:[],history_last_status:null,enable_apply:!1,select_time_value:"5_min",selected_time_option:{value:"5_min",label:i18n("show_alerts.presets.5_min"),currently_active:!1},wrong_date:!1,wrong_min_interval:!1,flat_begin_date:null,flat_end_date:null,time_preset_list:[{value:"5_min",label:i18n("show_alerts.presets.5_min"),currently_active:!1},{value:"10_min",label:i18n("show_alerts.presets.10_min"),currently_active:!1},{value:"30_min",label:i18n("show_alerts.presets.30_min"),currently_active:!0},{value:"hour",label:i18n("show_alerts.presets.hour"),currently_active:!1},{value:"2_hours",label:i18n("show_alerts.presets.2_hours"),currently_active:!1},{value:"6_hours",label:i18n("show_alerts.presets.6_hours"),currently_active:!1},{value:"12_hours",label:i18n("show_alerts.presets.12_hours"),currently_active:!1},{value:"day",label:i18n("show_alerts.presets.day"),currently_active:!1},{value:"week",label:i18n("show_alerts.presets.week"),currently_active:!1},{value:"month",label:i18n("show_alerts.presets.month"),currently_active:!1},{value:"year",label:i18n("show_alerts.presets.year"),currently_active:!1},{value:"custom",label:i18n("show_alerts.presets.custom"),currently_active:!1,disabled:!0}],time_preset_list_filtered:[]})};const P_=e=>(pl("data-v-6ae24a28"),e=e(),fl(),e),U_={class:"input-group"},I_={class:"form-group"},O_={class:"controls"},j_={class:"btn-group me-auto btn-group-sm flex-wrap d-flex"},M_={class:"btn-group ms-2"},L_=P_((()=>Vs("span",{class:"input-group-text"},[Vs("i",{class:"fas fa-calendar-alt"})],-1))),F_=["disabled"],R_=P_((()=>Vs("span",{class:"input-group-text"},[Vs("i",{class:"fas fa-long-arrow-alt-right"})],-1))),D_=["disabled"],z_=["title"],q_=[P_((()=>Vs("i",{class:"fas fa-exclamation-circle"},null,-1)))],B_={class:"d-flex align-items-center ms-2"},V_=["disabled"],H_={class:"btn-group"},G_=["disabled","title"],W_=[P_((()=>Vs("i",{class:"fas fa-long-arrow-alt-left"},null,-1)))],K_=["disabled","title"],J_=[P_((()=>Vs("i",{class:"fas fa-long-arrow-alt-right"},null,-1)))],Y_=["disabled","title"],Z_=[P_((()=>Vs("i",{class:"fas fa-search-plus"},null,-1)))],X_=["disabled","title"],Q_=[P_((()=>Vs("i",{class:"fas fa-search-minus"},null,-1)))],ep=["disabled","title"],tp=[P_((()=>Vs("i",{class:"fas fa-undo"},null,-1)))],ap=["disabled","title"],lp=[P_((()=>Vs("i",{class:"fas fa-sync"},null,-1)))];function np(e,t){void 0===t&&(t={});var a=t.insertAt;if(e&&"undefined"!=typeof document){var l=document.head||document.getElementsByTagName("head")[0],n=document.createElement("style");n.type="text/css","top"===a&&l.firstChild?l.insertBefore(n,l.firstChild):l.appendChild(n),n.styleSheet?n.styleSheet.cssText=e:n.appendChild(document.createTextNode(e))}}np("\n.date_time_input[data-v-6ae24a28] {\n    width: 10.5rem;\n    max-width: 10.5rem;\n    min-width: 10.5rem;\n}\n"),T_.render=function(e,t,a,l,n,s){const o=kn("select-search");return Ps(),Ms("div",U_,[Vs("div",I_,[Vs("div",O_,[Vs("div",j_,[Pn(e.$slots,"begin"),Vs("div",null,[Hs(o,{disabled:a.disabled_date_picker,selected_option:n.selected_time_option,"onUpdate:selected_option":t[0]||(t[0]=e=>n.selected_time_option=e),id:"time_preset_range_picker",options:n.time_preset_list_filtered,onSelect_option:t[1]||(t[1]=e=>s.change_select_time(null))},null,8,["disabled","selected_option","options"])]),Vs("div",M_,[L_,Vs("input",{disabled:a.disabled_date_picker,class:"flatpickr flatpickr-input form-control",type:"text",placeholder:"Choose a date..","data-id":"datetime",ref:"begin-date",style:{width:"10rem"}},null,8,F_),Ys(' <input ref="begin-date" @change="enable_apply=true" @change="change_begin_date" type="date" class="date_time_input begin-timepicker form-control border-right-0 fix-safari-input"> '),Ys(' <input ref="begin-time" @change="enable_apply=true" type="time" class="date_time_input begin-timepicker form-control border-right-0 fix-safari-input"> '),R_,Vs("input",{disabled:a.disabled_date_picker,class:"flatpickr flatpickr-input form-control",type:"text",placeholder:"Choose a date..","data-id":"datetime",ref:"end-date",style:{width:"10rem"}},null,8,D_),Ys(' <input ref="end-date" @change="enable_apply=true" type="date" class="date_time_input end-timepicker form-control border-left-0 fix-safari-input" style="width: 2.5rem;"> '),Ys(' <input ref="end-time" @change="enable_apply=true" type="time" class="date_time_input end-timepicker form-control border-left-0 fix-safari-input"> '),wn(Vs("span",{title:s.invalid_date_message,style:{"margin-left":"0.2rem",color:"red"}},q_,8,z_),[[Yi,n.wrong_date||n.wrong_min_interval]])]),Vs("div",B_,[Vs("button",{disabled:!n.enable_apply||n.wrong_date||n.wrong_min_interval,onClick:t[2]||(t[2]=(...e)=>s.apply&&s.apply(...e)),type:"button",class:"btn btn-sm btn-primary"},te(n.i18n("apply")),9,V_),Vs("div",H_,[Vs("button",{disabled:a.disabled_date_picker,onClick:t[3]||(t[3]=e=>s.jump_time_back()),type:"button",class:"btn btn-sm btn-link",ref:"btn-jump-time-back",title:n.i18n("date_time_range_picker.btn_move_left")},W_,8,G_),Vs("button",{disabled:a.disabled_date_picker,onClick:t[4]||(t[4]=e=>s.jump_time_ahead()),type:"button",class:"btn btn-sm btn-link me-2",ref:"btn-jump-time-ahead",title:n.i18n("date_time_range_picker.btn_move_right")},J_,8,K_),Vs("button",{disabled:a.disabled_date_picker,onClick:t[5]||(t[5]=e=>s.zoom(2)),type:"button",class:"btn btn-sm btn-link",ref:"btn-zoom-in",title:n.i18n("date_time_range_picker.btn_zoom_in")},Z_,8,Y_),Vs("button",{disabled:a.disabled_date_picker,onClick:t[6]||(t[6]=e=>s.zoom(.5)),type:"button",class:"btn btn-sm btn-link",ref:"btn-zoom-out",title:n.i18n("date_time_range_picker.btn_zoom_out")},Q_,8,X_),Vs("button",{disabled:null==n.history_last_status||a.disabled_date_picker,type:"button",onClick:t[7]||(t[7]=e=>s.apply_status_by_history()),class:"btn btn-sm btn-link",title:n.i18n("date_time_range_picker.btn_undo")},tp,8,ep),Vs("button",{disabled:"custom"==n.select_time_value||a.disabled_date_picker,onClick:t[8]||(t[8]=e=>s.change_select_time()),type:"button",class:"btn btn-sm btn-link",title:n.i18n("date_time_range_picker.btn_refresh")},lp,8,ap),Pn(e.$slots,"extra_buttons")])])])])])])},T_.__scopeId="data-v-6ae24a28",T_.__file="http_src/vue/date-time-range-picker.vue";var sp=Jl({components:{},props:{id:String},emits:["hidden","showed","closeModal","openModal"],created(){},data:()=>({}),mounted(){let e=this;$(this.$refs.modal_id).on("shown.bs.modal",(function(t){e.$emit("showed")})),$(this.$refs.modal_id).on("hidden.bs.modal",(function(t){e.$emit("hidden")})),ntopng_sync.ready(this.$props.id)},methods:{show:function(){$(this.$refs.modal_id).modal("show"),this.$emit("openModal")},preventEnter:function(){},close:function(){$(this.$refs.modal_id).modal("hide"),this.$emit("closeModal")}}});const op={class:"modal-dialog modal-dialog-centered modal-lg",role:"document"},ip={class:"modal-content"},rp={class:"modal-header"},cp={class:"modal-title"},up=Vs("div",{class:"modal-close"},[Vs("button",{type:"button",class:"btn-close","data-bs-dismiss":"modal","aria-label":"Close"})],-1),dp={class:"modal-body"},_p={class:"modal-footer"},pp=Vs("div",{class:"mr-auto"},null,-1),fp=Vs("div",{class:"alert alert-info test-feedback w-100",style:{display:"none"}},null,-1);sp.render=function(e,t,a,l,n,s){return Ps(),Ms("div",{onSubmit:t[0]||(t[0]=Wi(((...t)=>e.preventEnter&&e.preventEnter(...t)),["prevent"])),class:"modal fade",ref:"modal_id",tabindex:"-1",role:"dialog","aria-labelledby":"dt-add-filter-modal-title","aria-hidden":"true"},[Vs("div",op,[Vs("div",ip,[Vs("div",rp,[Vs("h5",cp,[Pn(e.$slots,"title")]),up]),Vs("div",dp,[Pn(e.$slots,"body")]),Vs("div",_p,[pp,Pn(e.$slots,"footer"),fp])])])],544)},sp.__file="http_src/vue/modal.vue";const vp={ipv4:String.raw`^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$`,ipv6:String.raw`^(?:(?:[a-fA-F\d]{1,4}:){7}(?:[a-fA-F\d]{1,4}|:)|(?:[a-fA-F\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|:[a-fA-F\d]{1,4}|:)|(?:[a-fA-F\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,2}|:)|(?:[a-fA-F\d]{1,4}:){4}(?:(?::[a-fA-F\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,3}|:)|(?:[a-fA-F\d]{1,4}:){3}(?:(?::[a-fA-F\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,4}|:)|(?:[a-fA-F\d]{1,4}:){2}(?:(?::[a-fA-F\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,5}|:)|(?:[a-fA-F\d]{1,4}:){1}(?:(?::[a-fA-F\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,6}|:)|(?::(?:(?::[a-fA-F\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,7}|:)))(?:%[0-9a-zA-Z]{1,})?$`,mac_address:String.raw`^([0-9A-Fa-f]{2}:){5}([0-9A-Fa-f]{2})$`,comma_separted_port_regex:String.raw`^(\d{1,5})(,\s*\d{1,5})*$`,port_range_regex:String.raw`^(\d{1,5})-(\d{1,5})$`,host_name:String.raw`^(?!\s*$)[a-zA-Z0-9._: \-\/]{1,250}|^[a-zA-Z0-9._: \-\/]{1,250}@[0-9]{0,5}`,singleword:String.raw`^(?=[a-zA-Z0-9._:\-]{3,253}$)(?!.*[_.:\-]{2})[^_.:\-].*[^_.:\-]$`},mp=e=>hp(e)||gp(e),hp=e=>new RegExp(vp.ipv4).test(e),gp=e=>new RegExp(vp.ipv6).test(e),bp=a;function yp(e){if("text"==e)return".*";if("vlan"==e){return String.raw`@(([1-9])|([1-9][0-9]{1,2})|([1-3][0-9]{3})|(40[0-8][0-9])|(409[0-5]))`}if("ip"==e||"cidr"==e){let t=yp("vlan"),a=bp.REGEXES.ipv4,l=a.replaceAll("$",`${t}$`),n=bp.REGEXES.ipv6,s=n.replaceAll("$",`${t}$`);if("cidr"==e){let e=String.raw`(\/(([1-9])|([1-2][0-9])|(3[0-2])))`,l=a.replaceAll("$",`${e}$`),s=a.replaceAll("$",`${e}${t}$`),o=String.raw`(\/(([1-9])|([1-9][0-9])|(1[0-1][0-9])|(12[0-8])))`;return`(${l}|${s}|${n.replaceAll("$",`${o}$`)}|${n.replaceAll("$",`${o}${t}$`)})`}return`(${a})|(${l})|(${n})|(${s})`}if("mac"==e)return bp.REGEXES.macAddress;if("ip,cidr"==e){return`(${yp("ip")})|(${yp("cidr")})`}return bp.REGEXES[e]}const wp={get_data_pattern:yp,validateIP:mp,validateIPv4:hp,validateIPv6:gp,validateHostName:e=>new RegExp(vp.host_name).test(e),validateCommaSeparatedPortList:e=>new RegExp(vp.comma_separted_port_regex).test(e),validatePortRange:e=>{const t=e.split("-",2),a=Number(t[0]),l=Number(t[1]);return!isNaN(a)&&!isNaN(l)&&(a>0&&a<l&&l<65536)},validateSingleWord:e=>new RegExp(vp.singleword).test(e)};var xp={components:{modal:sp,"select-search":n_},props:{id:String,filters_options:Array},updated(){},data(){return{i18n:e=>i18n(e),jQuery:$,id_modal:`${this.$props.id}_modal`,filter_type_selected:{},filter_type_label_selected:null,operator_selected:{},option_selected:{},input_value:null,input_type:null,data_pattern_selected:null,input_required:!1,options_to_show:null,operators_to_show:[]}},emits:["apply"],created(){},async mounted(){await ntopng_sync.on_ready(this.id_modal),ntopng_events_manager.on_custom_event(this.$props.id,ntopng_custom_events.SHOW_MODAL_FILTERS,(e=>this.show(e))),ntopng_sync.ready(this.$props.id)},methods:{show:function(e){null!=this.$props.filters_options&&0!=this.$props.filters_options.length&&(null!=e?(this.filter_type_selected=e,this.change_filter(e)):(this.filter_type_selected=this.$props.filters_options[0],this.change_filter()),this.$refs.modal.show())},post_change:function(e,t){e.id&&this.$props.filters_options&&(this.filter_type_selected=this.$props.filters_options.find((t=>t.id==e.id))),null!=e.value&&(this.options_to_show?this.option_selected=this.options_to_show.find((t=>t.value==e.value)):(this.option_selected={},this.input_value=e.value,this.data_pattern_selected=this.get_data_pattern(t))),e.operator&&this.operators_to_show&&(this.operator_selected=this.operators_to_show.find((t=>t.id==e.operator)))},change_operator_type:function(e){this.operator_selected=e},change_data_filter:function(e){this.option_selected=e},change_input_value:function(e){this.input_value=e},change_filter:function(e){this.options_to_show=null,this.option_selected=null,this.input_value=null;let t=this.$props.filters_options.find((e=>e.id==this.filter_type_selected.id));null!=t&&(this.input_type=t.type,this.operators_to_show=t.operators,this.filter_type_label_selected=t.label,"select"==this.input_type?(this.options_to_show=t.options.sort(((e,t)=>null==e||null==e.label?-1:null==t||null==t.label?1:e.label.toString().localeCompare(t.label.toString()))),this.option_selected=this.options_to_show[0]):"select-with-input"==this.input_type?(this.options_to_show=t.options?.sort(((e,t)=>null==e||null==e.label?-1:null==t||null==t.label?1:e.label.toString().localeCompare(t.label.toString()))),this.option_selected=this.options_to_show[0],this.data_pattern_selected=this.get_data_pattern(t.value_type)):(this.options_to_show=null,this.data_pattern_selected=this.get_data_pattern(t.value_type)),t.operators&&null==this.operator_selected?.id&&(this.operator_selected=t.operators[0]),null!=e&&this.post_change(e,t.value_type))},get_data_pattern:function(e){return this.input_required=!0,"text"==e?(this.input_required=!1,".*"):wp.get_data_pattern(e)},check_disable_apply:function(){let e=new RegExp(this.data_pattern_selected);return!this.options_to_show&&(this.input_required&&(null==this.input_value||""==this.input_value)||0==e.test(this.input_value))},apply:function(){let e=this.input_value,t=this.input_value;if(null==e||null!=this.option_selected?.value){let a=this.filters_options.find((e=>e.id==this.filter_type_selected.id)),l=a.options.find((e=>e.value==this.option_selected.value));null==l&&(l=this.option_selected),e=l.value,t=l.value_label||l.label}let a={id:this.filter_type_selected.id,label:this.filter_type_label_selected,operator:this.operator_selected.id,value:e,value_label:t};this.$emit("apply",a),ntopng_events_manager.emit_custom_event(ntopng_custom_events.MODAL_FILTERS_APPLY,a),this.close()},close:function(){this.$refs.modal.close()}}};const kp=e=>(pl("data-v-3119c83e"),e=e(),fl(),e),$p={autocomplete:"off"},Sp={class:"form-group row"},Np=kp((()=>Vs("label",{class:"col-form-label col-sm-3",for:"dt-filter-type-select"},[Vs("b",null,"Filter")],-1))),Cp={class:"col-sm-8"},Ap=kp((()=>Vs("hr",null,null,-1))),Ep={class:"dt-filter-template-container form-group row"},Tp={class:"col-form-label col-sm-3"},Pp={class:"col-sm-8"},Up={class:"input-group mb-3"},Ip={class:"input-group-prepend col-sm-3"},Op={key:0,class:"col-sm-9"},jp={key:1,class:"col-sm-9"},Mp=["pattern","required"],Lp={style:{margin:"0px",padding:"0"},class:"alert invalid-feedback"},Fp=["disabled"];np("\ninput ~ .alert[data-v-3119c83e] {\n  display: none;\n}\ninput:invalid ~ .alert[data-v-3119c83e] {\n  display: block;\n}\n"),xp.render=function(e,t,a,l,n,s){const o=kn("select-search"),i=kn("modal");return Ps(),Ls(i,{id:n.id_modal,ref:"modal"},{title:ml((()=>[Ks(te(n.i18n("alerts_dashboard.add_filter")),1)])),body:ml((()=>[Vs("form",$p,[Vs("div",Sp,[Np,Vs("div",Cp,[Hs(o,{selected_option:n.filter_type_selected,"onUpdate:selected_option":t[0]||(t[0]=e=>n.filter_type_selected=e),id:"filter_type",options:a.filters_options,onSelect_option:t[1]||(t[1]=e=>s.change_filter())},null,8,["selected_option","options"])])]),Ap,Vs("div",Ep,[Vs("label",Tp,[Vs("b",null,te(n.filter_type_label_selected),1)]),Vs("div",Pp,[Vs("div",Up,[Vs("div",Ip,[Hs(o,{selected_option:n.operator_selected,"onUpdate:selected_option":t[2]||(t[2]=e=>n.operator_selected=e),id:"operator_filter",options:n.operators_to_show,onSelect_option:s.change_operator_type},null,8,["selected_option","options","onSelect_option"])]),"select"==n.input_type?(Ps(),Ms("div",Op,[Hs(o,{selected_option:n.option_selected,"onUpdate:selected_option":t[3]||(t[3]=e=>n.option_selected=e),id:"data_filter",options:n.options_to_show,onSelect_option:s.change_data_filter},null,8,["selected_option","options","onSelect_option"])])):"select-with-input"==n.input_type?(Ps(),Ms("div",jp,[Hs(o,{selected_option:n.option_selected,"onUpdate:selected_option":t[4]||(t[4]=e=>n.option_selected=e),id:"data_filter",add_tag:!0,pattern:n.data_pattern_selected,options:n.options_to_show,onSelect_option:s.change_data_filter},null,8,["selected_option","pattern","options","onSelect_option"])])):(Ps(),Ms(Ss,{key:2},[wn(Vs("input",{"onUpdate:modelValue":t[5]||(t[5]=e=>n.input_value=e),pattern:n.data_pattern_selected,name:"value",required:n.input_required,type:"text",class:"form-control"},null,8,Mp),[[ji,n.input_value]]),Vs("span",Lp,te(n.i18n("invalid_value")),1)],64))]),Ys(" end div input-group mb-3 ")]),Ys(" end div form-group-row ")])])])),footer:ml((()=>[Vs("button",{type:"button",disabled:s.check_disable_apply(),onClick:t[6]||(t[6]=(...e)=>s.apply&&s.apply(...e)),class:"btn btn-primary"},te(n.i18n("apply")),9,Fp)])),_:1},8,["id"])},xp.__scopeId="data-v-3119c83e",xp.__file="http_src/vue/modal-filters.vue";let Rp,Dp,zp,qp,Bp=[],Vp=null!=window.location.toString().match(/alert_stats.lua/),Hp=ntopng_url_manager.get_url_entry("status");null!=Hp&&""!=Hp||(Hp="historical");let Gp=function(e){let t=ntopng_url_manager.get_url_entry("page");return null==t&&(t=e?"all":"overview"),t}(Vp);const Wp=async function(){Bp=await async function(e,t){let a,l=ntopng_url_manager.get_url_entry("query_preset");if(null==l&&(l=""),e)a=`${http_prefix}/lua/rest/v2/get/alert/filter/consts.lua?page=${t}&query_preset=${l}`;else{let e=ntopng_url_manager.get_url_entry("aggregated");a=`${http_prefix}/lua/pro/rest/v2/get/db/filter/consts.lua?page=${t}&query_preset=${l}&aggregated=${e}`}return await ntopng_utility.http_request(a)}(Vp,Gp),Bp.filter((e=>null==e.label)).forEach((e=>{console.error(`label not defined for filter ${JSON.stringify(e)}`),e.label=""})),Bp.sort(((e,t)=>e.label.localeCompare(t.label))),i18n_ext.tags={},Rp={},Dp={},Bp.forEach((e=>{i18n_ext.tags[e.id]=e.label,e.operators.forEach((e=>Rp[e.id]=e.label)),Dp[e.id]=e.operators.map((e=>e.id))}));let e=ntopng_url_manager.get_url_entries(),t=[];for(const[a,l]of e){let e=Bp.find((e=>e.id==a));if(null!=e){l.split(",").forEach((a=>{let[l,n]=a.split(";");if(null==n||null==l||""==n||null!=e.options&&null==e.options.find((e=>e.value==l)))return;let s=l;"array"==e.value_type&&(s=e?.options?.find((e=>e.value==l))?.label),t.push({id:e.id,operator:n,value:l,label:e.label,value_label:s})}))}}return t};var Kp={props:{id:String,min_time_interval_id:String,round_time:Boolean},components:{"date-time-range-picker":T_,"modal-filters":xp},created(){},async mounted(){let e=ntopng_sync.on_ready(this.id_data_time_range_picker);if(ntopng_sync.on_ready(this.id_modal_filters),await e,"all"!=this.page){let e=await Wp();qp=function(e){const t=new Tagify(e.$refs.tagify,{duplicates:!0,delimiters:null,dropdown:{enabled:1,classname:"extra-properties"},autoComplete:{enabled:!1},templates:{tag:function(e){try{return`<tag title='${e.value}' contenteditable='false' spellcheck="false" class='tagify__tag'>\n                        <x title='remove tag' class='tagify__tag__removeBtn'></x>\n                        <div>\n                           <b>${e.label?e.label:e.key}</b>&nbsp;\n                           <b class='operator'>${e.selectedOperator?Rp[e.selectedOperator]:"="}</b>&nbsp;\n                            <span class='tagify__tag-text'>${e.value}</span>\n                        </div>\n                    </tag>`}catch(e){console.error(`An error occured when creating a new tag: ${e}`)}}},validate:function(e){return void 0!==e.key&&void 0!==e.selectedOperator&&void 0!==e.value}});$(document).ready((function(){t.addTags(zp)}));const a=async function(e){"number"==typeof e.realValue&&(e.realValue=""+e.realValue),"number"==typeof e.value&&(e.value=""+e.value);let a=t.getTagElms().find((t=>t.getAttribute("key")===e.key&&t.getAttribute("realValue")===e.realValue));void 0===t.tagData(a)&&(Dp[e.key]&&!Array.isArray(Dp[e.key])&&(e.operators=Dp[e.key].operators),e.selectedOperator||(e.selectedOperator="eq"),t.addTags([e]))};return t.on("remove",(async function(e){const t=e.detail.data.key,a=e.detail.data.realValue,l=ntopng_status_manager.get_status();if(void 0===t)return;if(null==l.filters)return;const n=l.filters.filter((e=>e.id!=t||e.id==t&&e.value!=a));ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:n})})),t.on("add",(async function(e){const a=e.detail;if(void 0===a.data)return;return a.data.key?void 0:(t.removeTags([e.detail.tag]),e.preventDefault(),void e.stopPropagation())})),t.on("click",(async function(t){const a=t.detail;if(void 0===a.data)return;if(void 0===a.data.key)return;const l=a.data;e.edit_tag=l,ntopng_events_manager.emit_custom_event(ntopng_custom_events.SHOW_MODAL_FILTERS,{id:l.key,operator:l.selectedOperator,value:l.realValue})})),t.on("edit:updated",(async function(e){console.warn("UPDATED")})),$("tags").on("change","select.operator",(async function(e){console.warn("TAGS change")})),{tagify:t,addFilterTag:a}}(this),ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:e}),ntopng_events_manager.on_event_change(this.$props.id,ntopng_events.FILTERS_CHANGE,(e=>this.reload_status(e)),!0)}this.modal_data=Bp,ntopng_sync.ready(this.$props.id)},data(){return{i18n:i18n,id_modal_filters:`${this.$props.id}_modal_filters`,id_data_time_range_picker:`${this.$props.id}_date-time-range-picker`,show_filters:!1,edit_tag:null,is_alert_stats_url:Vp,status_view:Hp,page:Gp,modal_data:[],last_filters:[]}},methods:{is_filter_defined:function(e){return null!=Dp[e.id]},update_status_view:function(e){ntopng_url_manager.set_key_to_url("status",e),ntopng_url_manager.reload_url()},show_modal_filters:function(){this.$refs.modal_filters.show()},remove_filters:function(){ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:[]})},reload_status:function(e){let t=e.filters;if(null==t)return;ntopng_url_manager.delete_params(Bp.map((e=>e.id))),qp.tagify.removeAllTags();let a=Qd.get_filters_object(t);ntopng_url_manager.add_obj_to_url(a),t.forEach((e=>{let t=function(e){let t=Bp.find((t=>t.id==e.id));null==t&&console.error("create_tag_from_filter: filter const not found;");let a=e.value;if(null!=t.options){let l=t.options.find((t=>t.value==e.value));null!=l&&(a=l.label)}const l={label:t.label,key:t.id,value:a,realValue:e.value,title:`${t.label}${e.operator}${a}`,selectedOperator:e.operator};return""==l.value&&(l.value="''"),null==l.realValue||null==l.selectedOperator||""==l.selectedOperator?null:l}(e);null!=t&&qp.addFilterTag(t)})),this.last_filters=t},apply_modal:function(e){let t=ntopng_status_manager.get_status().filters;null==t&&(t=[]),null!=this.edit_tag&&(t=t.filter((e=>e.id!=this.edit_tag.key||e.value!=this.edit_tag.realValue)),this.edit_tag=null),t.push(e),ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:t})}}};const Jp=e=>(pl("data-v-aaee59ea"),e=e(),fl(),e),Yp={style:{width:"100%"}},Zp={class:"mb-1"},Xp={key:0,style:{"margin-right":"0.1rem"},class:"d-flex align-items-center me-2"},Qp={class:"btn-group",id:"statusSwitch",role:"group"},ef=[Jp((()=>Vs("i",{class:"fa-solid fa-hourglass-half",title:"Engaged"},null,-1)))],tf=[Jp((()=>Vs("i",{class:"fa-regular fa-eye",title:"Require Attention"},null,-1)))],af=[Jp((()=>Vs("i",{class:"fa-solid fa-inbox",title:"All"},null,-1)))],lf={key:0,class:"d-flex mt-1",style:{width:"100%"}},nf=["placeholder"],sf=[Jp((()=>Vs("span",null,[Vs("i",{class:"fas fa-plus","data-original-title":"",title:"Add Filter"})],-1)))],of=[Jp((()=>Vs("i",{class:"fas fa-times"},null,-1)))];np("\n.tagify__input[data-v-aaee59ea] {\n    min-width: 175px;\n}\n.tagify__tag[data-v-aaee59ea] {\n    white-space: nowrap;\n    margin: 3px 0px 5px 5px;\n}\n.tagify__tag select.operator[data-v-aaee59ea] {\n    margin: 0px 4px;\n    border: 1px solid #c4c4c4;\n    border-radius: 4px;\n}\n.tagify__tag b.operator[data-v-aaee59ea] {\n    margin: 0px 4px;\n    background-color: white;\n    border: 1px solid #c4c4c4;\n    border-radius: 4px;\n    padding: 0.05em 0.2em;\n}\n.tagify__tag>div[data-v-aaee59ea] {\n    display: flex;\n    align-items: center;\n}\n"),Kp.render=function(e,t,a,l,n,s){const o=kn("modal-filters"),i=kn("date-time-range-picker");return Ps(),Ms("div",Yp,[Vs("div",Zp,[Hs(o,{filters_options:n.modal_data,onApply:s.apply_modal,ref:"modal_filters",id:n.id_modal_filters},null,8,["filters_options","onApply","id"]),Hs(i,{id:n.id_data_time_range_picker,min_time_interval_id:a.min_time_interval_id,round_time:a.round_time},{begin:ml((()=>[n.is_alert_stats_url?(Ps(),Ms("div",Xp,[Vs("div",Qp,["flow"!=n.page?(Ps(),Ms("a",{key:0,href:"#",onClick:t[0]||(t[0]=e=>s.update_status_view("engaged")),class:K(["btn btn-sm",{active:"engaged"==n.status_view,"btn-seconday":"engaged"!=n.status_view,"btn-primary":"engaged"==n.status_view}])},ef,2)):Ys("v-if",!0),Vs("a",{href:"#",onClick:t[1]||(t[1]=e=>s.update_status_view("historical")),class:K(["btn btn-sm",{active:"historical"==n.status_view||"flow"==n.page&&"engaged"==n.status_view,"btn-seconday":"historical"!=n.status_view,"btn-primary":"historical"==n.status_view||"flow"==n.page&&"engaged"==n.status_view}])},tf,2),Ys(" <a href=\"#\" @click=\"update_status_view('acknowledged')\" class=\"btn btn-sm\"\n                                :class=\"{ 'active': status_view == 'acknowledged', 'btn-seconday': status_view != 'acknowledged', 'btn-primary': status_view == 'acknowledged' }\"><i class=\"fa-solid fa-check-double\" title=\"Acknowledged\"></i></a>"),Vs("a",{href:"#",onClick:t[2]||(t[2]=e=>s.update_status_view("any")),class:K(["btn btn-sm",{active:"any"==n.status_view,"btn-seconday":"any"!=n.status_view,"btn-primary":"any"==n.status_view}])},af,2)])])):Ys("v-if",!0),Pn(e.$slots,"begin")])),extra_buttons:ml((()=>[Pn(e.$slots,"extra_range_buttons")])),_:3},8,["id","min_time_interval_id","round_time"])]),Ys(" tagify "),"all"!=n.page?(Ps(),Ms("div",lf,[Vs("input",{class:"w-100 form-control h-auto",name:"tags",ref:"tagify",placeholder:n.i18n("show_alerts.filters")},null,8,nf),wn(Vs("button",{class:"btn btn-link","aria-controls":"flow-alerts-table",type:"button",id:"btn-add-alert-filter",onClick:t[3]||(t[3]=(...e)=>s.show_modal_filters&&s.show_modal_filters(...e))},sf,512),[[Yi,n.modal_data&&n.modal_data.length>0]]),wn(Vs("button",{"data-bs-toggle":"tooltip","data-placement":"bottom",title:"{{ i18n('show_alerts.remove_filters') }}",onClick:t[4]||(t[4]=(...e)=>s.remove_filters&&s.remove_filters(...e)),class:"btn ms-1 my-auto btn-sm btn-remove-tags"},of,512),[[Yi,n.modal_data&&n.modal_data.length>0]])])):Ys("v-if",!0),Ys(" end tagify ")])},Kp.__scopeId="data-v-aaee59ea",Kp.__file="http_src/vue/range-picker.vue";const rf={class:"row",style:{"margin-left":"-2px","margin-right":"-2px","margin-top":"1rem","margin-bottom":"-1rem"}},cf={class:"col-sm-12 col-md-5"},uf={class:"dataTables_info",role:"status","aria-live":"polite"},df={class:"col-sm-12 col-md-7"},_f={class:"dataTables_paginate paging_simple_numbers",style:{display:"flex","justify-content":"flex-end"}},pf={class:"pagination"},ff={class:"paginate_button page-item previous"},vf=["onClick"],mf={href:"javascript:void(0);","aria-controls":"default-datatable","data-dt-idx":"1",tabindex:"0",class:"page-link"},hf={class:"paginate_button page-item previous"};var gf={__name:"select_table_page",props:{total_rows:Number,per_page:Number},emits:["change_active_page"],setup(e,{expose:t,emit:a}){const l=e,n=6,s=va(0),o=va(0),i=va(0),r=va(0),c="Showing page %active_page of %total_pages: total %total_rows rows",u=va("");function d(){if(null==l.total_rows)return;let e=l.per_page;i.value=Number.parseInt((l.total_rows+e-1)/e),o.value=n,i.value<o.value&&(o.value=i.value),r.value>=i.value&&i.value>0&&(r.value=i.value-1,s.value=i.value-o.value,f(r.value)),v()}_n((()=>{d()})),jl((()=>[l.total_rows,l.per_page]),((e,t)=>{d()}),{flush:"pre",immediate:!0});const _=xo((()=>!(i.value<n)&&r.value>=o.value-1)),p=xo((()=>!(i.value<n)&&r.value<i.value-o.value+1));function f(e,t){null!=e&&(r.value=e),null!=t&&(s.value=t),r.value==s.value&&s.value>0&&(s.value-=1);const l=s.value+o.value-1;r.value==l&&i.value-1>l&&(s.value+=1),r.value>i.value-1&&0!=i.value&&(r.value=i.value-1,s.value=r.value),v(),a("change_active_page",r.value)}function v(){u.value=c.replace("%active_page",m(`${r.value+1}`)).replace("%total_pages",m(`${i.value}`)).replace("%total_rows",m(`${l.total_rows}`)).replace("%per_page",m(`${l.per_page}`))}function m(e){return e.replace(/(.)(?=(\d{3})+$)/g,"$1,")}return t({change_active_page:f}),(e,t)=>(Ps(),Ms(Ss,null,[Ys(" PerPage "),Vs("div",rf,[Ys(" div col-md-5 "),Vs("div",cf,[Vs("div",uf,te(u.value),1)]),Ys(" div col-md-5 "),Ys(" start div col-sm-12 "),wn(Vs("div",df,[Vs("div",_f,[Vs("ul",pf,[wn(Vs("li",ff,[Vs("a",{href:"javascript:void(0);",onClick:t[0]||(t[0]=e=>f(0,0)),"aria-controls":"default-datatable","data-dt-idx":"0",tabindex:"0",class:"page-link"}," « ")],512),[[Yi,ya(_)]]),Vs("li",{class:K(["paginate_button page-item previous",{disabled:0==r.value}])},[Vs("a",{href:"javascript:void(0);",onClick:t[1]||(t[1]=e=>{f(r.value-1)}),"aria-controls":"default-datatable","data-dt-idx":"0",tabindex:"0",class:"page-link"}," < ")],2),(Ps(!0),Ms(Ss,null,En(o.value,(e=>(Ps(),Ms("li",{onClick:t=>f(s.value+e-1),class:K([{active:r.value==s.value+e-1},"paginate_button page-item"])},[Vs("a",mf,te(s.value+e),1),Ys('  :key="total_rows"')],10,vf)))),256)),Vs("li",{class:K(["paginate_button page-item next",{disabled:r.value==i.value-1}]),id:"default-datatable_next"},[Vs("a",{href:"javascript:void(0);",onClick:t[2]||(t[2]=e=>{f(r.value+1)}),"aria-controls":"default-datatable","data-dt-idx":"7",tabindex:"0",class:"page-link"}," > ")],2),wn(Vs("li",hf,[Vs("a",{href:"javascript:void(0);",onClick:t[3]||(t[3]=e=>f(i.value-1,i.value-o.value)),"aria-controls":"default-datatable","data-dt-idx":"0",tabindex:"0",class:"page-link"}," » ")],512),[[Yi,ya(p)]])])])],512),[[Yi,i.value>0]]),Ys(" end div col-md-7 ")]),Ys(" PerPage ")],2112))},__file:"http_src/vue/select_table_page.vue"};const bf={class:"text-center"},yf={class:"sr-only position-absolute"};var wf={__name:"loading",props:{styles:String},setup(e,{expose:t}){const a=i18n("loading"),l=va(null);return t({hide_loading:function(e=500){$(l.value).fadeOut(e)},show_loading:function(e=500){$(l.value).fadeIn(e)}}),(t,n)=>(Ps(),Ms("div",{ref_key:"overlay",ref:l,class:"overlay centered-message"},[Vs("div",bf,[Vs("div",{class:"spinner-border text-primary mt-6",style:V(e.styles),role:"status"},[Vs("span",yf,te(ya(a)),1)],4)])],512))},__file:"http_src/vue/loading.vue"};const xf={class:"form-check form-switch ms-1",style:{"white-space":"nowrap"}},kf=["checked","title"],$f=["innerHTML"];var Sf={__name:"switch",props:{value:Boolean,title:String,label:String},emits:["update:value","change_value"],setup(e,{emit:t}){const a=e,l=va(!1);return _n((()=>{l.value=a.value})),jl((()=>a.value),((e,t)=>{l.value=a.value}),{flush:"pre"}),(a,n)=>(Ps(),Ms("div",xf,[Vs("input",{class:"form-check-input",style:{cursor:"pointer"},checked:1==l.value,onClick:n[0]||(n[0]=e=>(t("update:value",!l.value),void t("change_value",!l.value))),type:"checkbox",id:"toggle-Begin",title:e.title},null,8,kf),Vs("label",{class:"form-check-label",for:"toggle-Begin",innerHTML:e.label},null,8,$f)]))},__file:"http_src/vue/switch.vue"};const Nf=e=>(pl("data-v-61956e9e"),e=e(),fl(),e),Cf=["id"],Af={class:"button-group mb-2"},Ef={style:{float:"left","margin-top":"0.5rem"}},Tf=["value"],Pf=Nf((()=>Vs("div",{style:{"text-align":"right"},class:"form-group"},null,-1))),Uf={style:{"text-align":"right"},class:"form-group"},If={key:0,class:"d-inline"},Of=[Nf((()=>Vs("i",{class:"fas fa-columns"},null,-1)))],jf=[Nf((()=>Vs("i",{class:"fas fa-refresh"},null,-1)))],Mf={key:1,class:"d-inline-block"},Lf=Nf((()=>Vs("i",{class:"fas fa-eye"},null,-1))),Ff={class:"form-check form-switch ms-1"},Rf=["checked","onClick","id"],Df=["for","innerHTML"],zf={key:0,class:"centered-message"},qf=["innerHTML"],Bf=["data-resizable-columns-id"],Vf=["onClick","data-resizable-column-id"],Hf={style:{display:"flex"}},Gf=["innerHTML"],Wf={class:"fa fa-fw fa-sort-up"},Kf={class:"fa fa-fw fa-sort-down"},Jf={key:0,scope:"col",class:""},Yf=["innerHTML"],Zf={key:0,style:{},class:"",scope:"col"},Xf=[Nf((()=>Vs("div",{class:"wrap-column"},null,-1)))],Qf={key:1,class:"mt-2"},ev={class:"text-end"},tv={style:{},class:"query text-end"},av={class:"records"},lv={class:"text-start"},nv={id:"historical_flows_table-query-time",style:{},class:"query"},sv={class:"seconds"},ov=["title"];var iv={__name:"table",props:{id:String,columns:Array,get_rows:Function,get_column_id:Function,print_column_name:Function,print_html_row:Function,print_vue_node_row:Function,f_is_column_sortable:Function,f_sort_rows:Function,f_get_column_classes:Function,f_get_column_style:Function,enable_search:Boolean,display_empty_rows:Boolean,show_autorefresh:Number,default_sort:Object,csrf:String,paging:Boolean,display_message:Boolean,message_to_display:String},emits:["custom_event","loaded","rows_loaded"],setup(e,{expose:t,emit:a}){const l=e,n={emit:a,h:Io,nextTick:Ja},s=e=>i18n(e);va(!0);const o=va(null),i=va(null),r=va(null);va([]);let c=0,u=[];const d=va([]),_=va([]),p=va(0),f=[10,20,40,50,80,100],v=va(10),m=window.store,h=va(""),g=va(null),y=va(!1),w=va(null),k=va(null),S=va(!1),N=va(!1),C=va(!1);_n((async()=>{null!=l.columns&&T()}));const A=xo((()=>{if(null==l.show_autorefresh||l.show_autorefresh<=0)return"";return s("table.autorefresh").replace("%time",l.show_autorefresh)}));function E(e){return null!=e&&null!=e.id?e.id:"toggle-Begin"}async function T(){await async function(){let e=await async function(){if(null==l.csrf)return{};const e={table_id:l.id},t=x.obj_to_url_params(e),a=`${http_prefix}/lua/rest/v2/get/tables/user_columns_config.lua?${t}`;let n=await b.http_request(a),s={};return n.forEach((e=>{s[e.id]=e})),s}(),t=!0;for(let a in e)t&=e[a]?.sort;d.value=l.columns.map(((a,n)=>{let s=[],o="";null!=l.f_get_column_classes&&(s=l.f_get_column_classes(a)),null!=l.f_get_column_style&&(o=l.f_get_column_style(a));let i=l.get_column_id(a),r=e[i],c=r?.sort;return c=1==t&&null==c&&null!=l.default_sort&&i==l.default_sort.column_id?l.default_sort.sort:r?.sort?r?.sort:0,{id:i,visible:null==r?.visible||1==r?.visible,sort:c,sortable:Y(a),order:r?.order||n,classes:s,style:o,data:a}})),await M()}(),await J(),j(),await Ja(),r.value.load_menu(),a("loaded")}let P;function U(){0!=C.value?P=setInterval((()=>{z()}),1e3*l.show_autorefresh):clearInterval(P)}async function I(){await async function(){O.value+=1,await Ja()}(),j()}jl((()=>[l.id,l.columns]),((e,t)=>{T()}),{flush:"pre"});const O=va(0);function j(){let e={store:m,minWidth:32};$(i.value).resizableColumns(e)}async function M(){if(null==l.csrf)return;let e={table_id:l.id,visible_columns_ids:[],csrf:l.csrf};e.visible_columns_ids=d.value.map(((e,t)=>({id:e.id,visible:e.visible,order:e.order,sort:e.sort})));const t=`${http_prefix}/lua/rest/v2/add/tables/user_columns_config.lua`;await b.http_post_request(t,e)}async function L(){l.columns.forEach((e=>{let t=`${l.id}-${l.get_column_id(e)}`;m.remove(t)})),await I()}function F(){R.value+=1,z(0)}const R=va(0);const D=va(0);async function z(e){null!=e&&(c=e),null==c&&(c=0),1==l.paging||q?await J():Z(),D.value+=1}let q=!1,B=!1;async function H(e){q=!0,B=e||!1,B?g.value.change_active_page():g.value.change_active_page(0,0),await Ja(),q=!1,B=!1}let G,W=!0;async function J(){y.value=!B;let e=await l.get_rows(c,v.value,d.value,h.value,W);w.value=null,null!=e.query_info&&(w.value=e.query_info),W=!1,p.value=e.rows.length,1==l.paging&&(p.value=e.total_rows),u=e.rows,Z(),y.value=!1,a("rows_loaded",e)}function Y(e){return null==l.f_is_column_sortable||l.f_is_column_sortable(e)}function Z(){let e=0;if(0==l.paging&&(e=c*v.value),0==l.paging){let e=null!=l.f_sort_rows?l.f_sort_rows:(e,t,a)=>{let n=l.print_html_row(e.data,t),s=l.print_html_row(e.data,a);return 1==e.sort?n.localeCompare(s):s.localeCompare(n)},t=function(){let e=d.value.find((e=>0!=e.sort));return e}();u=u.sort(((a,l)=>e(t,a,l)))}_.value=u.slice(e,e+v.value)}async function X(){let e=1e3;null!=G?clearTimeout(G):e=0,G=setTimeout((async()=>{await J(),G=null}),e)}function Q(e){NtopUtils.copyToClipboard(w.value.query,k.value)}return t({load_table:T,refresh_table:H,get_columns_defs:function(){return d.value},get_rows_num:function(){return p.value},search_value:function(e){h.value=e,X()}}),(t,a)=>(Ps(),Ms(Ss,null,[Pn(t.$slots,"custom_header2"),Vs("div",{ref_key:"table_container",ref:o,id:e.id},[y.value?(Ps(),Ls(wf,{key:0})):Ys("v-if",!0),Vs("div",Af,[Ys(" TableHeader "),Vs("div",Ef,[Vs("label",null,[Ks(" Show "),wn(Vs("select",{"onUpdate:modelValue":a[0]||(a[0]=e=>v.value=e),onChange:F},[(Ps(),Ms(Ss,null,En(f,(e=>Vs("option",{value:e},te(e),9,Tf))),64))],544),[[Ri,v.value]]),Ks(" Entries ")])]),Pf,Vs("div",Uf,[Pn(t.$slots,"custom_header"),e.enable_search?(Ps(),Ms("div",If,[Vs("label",null,[Ks(te(s("search"))+": ",1),wn(Vs("input",{type:"search","onUpdate:modelValue":a[1]||(a[1]=e=>h.value=e),onInput:X,class:""},null,544),[[ji,h.value]])])])):Ys("v-if",!0),Vs("button",{class:"btn btn-link me-1",type:"button",onClick:L},Of),Vs("button",{class:"btn btn-link me-1",type:"button",onClick:a[2]||(a[2]=e=>H())},jf),e.show_autorefresh>0?(Ps(),Ms("div",Mf,[Hs(Sf,{value:C.value,"onUpdate:value":a[3]||(a[3]=e=>C.value=e),class:"me-2 mt-1",title:ya(A),style:{},onChange_value:U},null,8,["value","title"])])):Ys("v-if",!0),Hs(Dd,{id:e.id+"_dropdown",ref_key:"dropdown",ref:r},{title:ml((()=>[Lf])),menu:ml((()=>[(Ps(!0),Ms(Ss,null,En(d.value,(t=>(Ps(),Ms("div",Ff,[Vs("input",{class:"form-check-input",style:{cursor:"pointer"},checked:1==t.visible,onClick:e=>async function(e){S.value=!0,e.visible=!e.visible,l.paging&&await J(),await I(),await M(),S.value=!1}(t),type:"checkbox",id:E(t)},null,8,Rf),Vs("label",{class:"form-check-label",for:E(t),innerHTML:e.print_column_name(t.data)},null,8,Df)])))),256))])),_:1},8,["id"]),Ys(" Dropdown columns ")])]),Ys(" TableHeader "),(Ps(),Ms("div",{key:O.value,style:{overflow:"auto",width:"100%"}},[Ys(" Table "),1==e.display_message?(Ps(),Ms("div",zf,[Vs("span",{innerHTML:e.message_to_display},null,8,qf)])):Ys("v-if",!0),Vs("table",{ref_key:"table",ref:i,class:K(["table table-striped table-bordered ml-0 mr-0 mb-0 ntopng-table",[e.display_message||y.value?"ntopng-gray-out":""]]),"data-resizable":"true","data-resizable-columns-id":e.id},[Ys(" Table "),Vs("thead",null,[Vs("tr",null,[(Ps(!0),Ms(Ss,null,En(d.value,((t,a)=>(Ps(),Ms(Ss,null,[t.visible?(Ps(),Ms("th",{key:0,scope:"col",class:K({pointer:t.sortable,unset:!t.sortable}),style:{"white-space":"nowrap"},onClick:e=>async function(e,t){e.sortable&&(e.sort=(e.sort+1)%3,d.value.filter(((e,a)=>a!=t)).forEach((e=>e.sort=0)),0!=e.sort&&(l.paging?await J():Z(),await M()))}(t,a),"data-resizable-column-id":e.get_column_id(t.data)},[Vs("div",Hf,[Vs("span",{innerHTML:e.print_column_name(t.data),class:"wrap-column"},null,8,Gf),Ys(' <i v-show="col.sort == 0" class="fa fa-fw fa-sort"></i> '),wn(Vs("i",Wf,null,512),[[Yi,1==t.sort&&t.sortable]]),wn(Vs("i",Kf,null,512),[[Yi,2==t.sort&&t.sortable]])])],10,Vf)):Ys("v-if",!0)],64)))),256))])]),Vs("tbody",null,[S.value||N.value?Ys("v-if",!0):(Ps(!0),Ms(Ss,{key:0},En(_.value,(t=>(Ps(),Ms("tr",null,[(Ps(!0),Ms(Ss,null,En(d.value,((a,l)=>(Ps(),Ms(Ss,null,[a.visible?(Ps(),Ms("td",Jf,[null!=e.print_html_row&&null!=e.print_html_row(a.data,t,!0)?(Ps(),Ms("div",{key:0,class:K([a.classes,"wrap-column"]),style:V(a.style),innerHTML:e.print_html_row(a.data,t)},null,14,Yf)):Ys("v-if",!0),Vs("div",{style:V([a.style,{}]),class:K(["wrap-column margin-sm",a.classes])},[null!=e.print_vue_node_row&&null!=e.print_vue_node_row(a.data,t,n,!0)?(Ps(),Ls(Md,{key:t,content:e.print_vue_node_row(a.data,t,n)},null,8,["content"])):Ys("v-if",!0)],6)])):Ys("v-if",!0)],64)))),256))])))),256)),e.display_empty_rows&&_.value.length<v.value?(Ps(!0),Ms(Ss,{key:1},En(v.value-_.value.length,(e=>(Ps(),Ms("tr",null,[(Ps(!0),Ms(Ss,null,En(d.value,((e,t)=>(Ps(),Ms(Ss,null,[e.visible?(Ps(),Ms("td",Zf,Xf)):Ys("v-if",!0)],64)))),256))])))),256)):Ys("v-if",!0)])],10,Bf),Ys(" Table ")])),Ys(" Table div"),Vs("div",null,[(Ps(),Ls(gf,{ref_key:"select_table_page",ref:g,key:R.value,total_rows:p.value,per_page:v.value,onChange_active_page:z},null,8,["total_rows","per_page"]))]),null!=w.value?(Ps(),Ms("div",Qf,[Vs("div",ev,[Vs("small",tv,[Vs("span",av,te(w.value.num_records_processed),1),Ks(".")])]),Vs("div",lv,[Vs("small",nv,[Ks("Query performed in "),Vs("span",sv,te((w.value.query_duration_msec/1e3).toFixed(3)),1),Ks(" seconds. "),Vs("span",{id:"historical_flows_table-query",style:{cursor:"pointer"},class:"badge bg-secondary",title:w.value.query,onClick:Q,ref_key:"query_info_sql_button",ref:k},"SQL",8,ov)])])])):Ys("v-if",!0)],8,Cf)],64))}};np("\n.sticky[data-v-61956e9e] {\n    position: sticky;\n    left: 0;\n    background-color: white;\n}\n.wrap-column[data-v-61956e9e] {\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow: hidden;\n    width: 100%;\n}\n.pointer[data-v-61956e9e] {\n    cursor: pointer;\n}\n.unset[data-v-61956e9e] {\n    cursor: unset;\n}\n.link-button[data-v-61956e9e] {\n    color: var(--bs-dropdown-link-color);\n    cursor: pointer;\n}\n.link-disabled[data-v-61956e9e] {\n    pointer-events: none;\n    color: #ccc;\n}\ntd[data-v-61956e9e] {\n    height: 2.5rem;\n}\n.margin-sm[data-v-61956e9e] {\n    margin-bottom: -0.25rem;\n    margin-top: -0.25rem;\n}\n"),iv.__scopeId="data-v-61956e9e",iv.__file="http_src/vue/table.vue";var rv={__name:"table-with-config",props:{table_config_id:String,table_id:String,csrf:String,f_map_config:Function,f_map_columns:Function,f_sort_rows:Function,get_extra_params_obj:Function,display_message:Boolean,message_to_display:String},emits:["custom_event","loaded","rows_loaded"],setup(e,{expose:t,emit:a}){const l=e,n=va({}),s=va(null),o=va(!1);_n((async()=>{null==l.table_id&&null==l.table_config_id||r()})),jl((()=>[l.table_id,l.table_config_id]),((e,t)=>{r()}),{flush:"pre"});const i=xo((()=>null!=l.table_id?l.table_id:l.table_config_id));async function r(){o.value=!1,await Ja();let e=l.table_config_id;null==e&&(e=l.table_id),n.value=await Kd.build_table(http_prefix,e,l.f_map_columns,l.get_extra_params_obj),null!=l.f_map_config&&(n.value=l.f_map_config(n.value)),o.value=!0,await Ja()}function c(){a("loaded")}function u(e){a("custom_event",e)}function d(e){a("rows_loaded",e)}return t({refresh_table:e=>{s.value&&s.value.refresh_table(e)},get_columns_defs:()=>null==s.value?[]:s.value.get_columns_defs(),get_rows_num:()=>s.value.get_rows_num(),search_value:e=>{s.value.search_value(e)}}),(t,a)=>o.value?(Ps(),Ls(iv,{key:0,ref_key:"table",ref:s,id:ya(i),columns:n.value.columns,get_rows:n.value.get_rows,get_column_id:n.value.get_column_id,print_column_name:n.value.print_column_name,print_html_row:n.value.print_html_row,print_vue_node_row:n.value.print_vue_node_row,f_is_column_sortable:n.value.f_is_column_sortable,f_get_column_classes:n.value.f_get_column_classes,f_get_column_style:n.value.f_get_column_style,display_empty_rows:n.value.display_empty_rows,f_sort_rows:e.f_sort_rows,enable_search:n.value.enable_search,default_sort:n.value.default_sort,show_autorefresh:n.value.show_autorefresh,paging:n.value.paging,csrf:e.csrf,display_message:e.display_message,message_to_display:e.message_to_display,onLoaded:c,onRows_loaded:d,onCustom_event:u},{custom_header:ml((()=>[Pn(t.$slots,"custom_header")])),_:3},8,["id","columns","get_rows","get_column_id","print_column_name","print_html_row","print_vue_node_row","f_is_column_sortable","f_get_column_classes","f_get_column_style","display_empty_rows","f_sort_rows","enable_search","default_sort","show_autorefresh","paging","csrf","display_message","message_to_display"])):Ys("v-if",!0)},__file:"http_src/vue/table-with-config.vue"},cv={__name:"spinner",props:{size:String,show:Boolean},setup:e=>(_n((async()=>{})),(t,a)=>e.show?(Ps(),Ms("div",{key:0,class:"spinner-border text-primary",style:V({width:e.size,height:e.size}),role:"status"},null,4)):Ys("v-if",!0)),__file:"http_src/vue/spinner.vue"};const uv={id:"script-description",class:"notes bg-light border",role:"alert"},dv=["innerHTML"],_v={key:0},pv=["innerHTML"];var fv={__name:"note-list",props:{note_list:Array,sub_note_list:Array,add_sub_notes:Boolean},setup(e){const t=e,a=e=>i18n(e);return(e,l)=>(Ps(),Ms("div",uv,[Vs("b",null,te(a("notes")),1),Vs("ul",null,[(Ps(!0),Ms(Ss,null,En(t.note_list,(e=>(Ps(),Ms("li",{innerHTML:e},null,8,dv)))),256)),t.add_sub_notes?(Ps(),Ms("ul",_v,[(Ps(!0),Ms(Ss,null,En(t.sub_note_list,(e=>(Ps(),Ms("li",{innerHTML:e},null,8,pv)))),256))])):Ys("v-if",!0)])]))},__file:"http_src/vue/note-list.vue"},vv=Jl({components:{modal:sp},props:{id:String},updated(){},data(){return{description:"",invalid_bpf:!1,bpf_filter:"",extract_now:!0,show_menu:!0,data_available:0,i18n:e=>i18n(e),epoch_interval:null,id_modal:`${this.$props.id}_modal`}},emits:["apply"],created(){},mounted(){},methods:{pad2_number:function(e){return String(e).padStart(2,"0")},format_date:function(e){let t=e.valueOf();return ntopng_utility.from_utc_to_server_date_format(t)},apply:async function(){if(null!=this.bpf_filter&&""!=this.bpf_filter){let e=`${http_prefix}/lua/pro/rest/v2/check/filter.lua?query=${this.bpf_filter}`,t=await ntopng_utility.http_request(e,null,!1,!0);if(this.invalid_bpf=!t.response,1==this.invalid_bpf)return}let e={ifid:ntopng_url_manager.get_url_entry("ifid"),epoch_begin:this.epoch_interval.epoch_begin,epoch_end:this.epoch_interval.epoch_end,bpf_filter:this.bpf_filter},t=ntopng_url_manager.obj_to_url_params(e);if(1==this.extract_now){let e=`${http_prefix}/lua/rest/v2/get/pcap/live_extraction.lua?${t}`;window.open(e,"_self",!1)}else{let e=`${http_prefix}/lua/traffic_extraction.lua?${t}`,a=(await ntopng_utility.http_request(e,null,!1,!0)).id,l=i18n("traffic_recording.extraction_scheduled"),n=i18n("traffic_recording.traffic_extraction_jobs"),s=`<a href="/lua/if_stats.lua?ifid=${ntopng_url_manager.get_url_entry("ifid")}&page=traffic_recording&tab=jobs&job_id=${a}">${n}</a>`;l=l.replace("%{page}",s),l=`${l} ${a}`,ntopng_events_manager.emit_custom_event(ntopng_custom_events.SHOW_GLOBAL_ALERT_INFO,{text_html:l,type:"alert-success"})}this.close()},close:function(){this.$refs.modal.close(),setTimeout((()=>{this.data_available=0}),1e3)},show:async function(e,t){if(null==t){let e=ntopng_status_manager.get_status();if(null==e.epoch_begin||null==e.epoch_end)return void console.error("modal-traffic-extraction: epoch_begin and epoch_end undefined in url");t={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end}}this.epoch_interval=t;let a=ntopng_url_manager.obj_to_url_params(t),l=`${http_prefix}/lua/check_recording_data.lua?${a}`,n=await ntopng_utility.http_request(l,null,null,!0);if(0==n.available)return this.data_available=2,this.description=i18n("traffic_recording.no_recorded_data"),void this.$refs.modal.show();this.data_available=1;let s="";if(null!=n.info&&(s=n.info),null==e){let t=ntopng_url_manager.get_url_params(),a=`${http_prefix}/lua/pro/rest/v2/get/db/filter/bpf.lua?${t}`,l=await ntopng_utility.http_request(a);if(null==l||null==l.bpf)return void console.error(`modal-traffic-extraction: ${a} return null value`);e=l.bpf}this.set_descriptions(t.epoch_begin,t.epoch_end,s),this.bpf_filter=e,this.$refs.modal.show()},set_descriptions:function(e,t,a){let l=new Date(1e3*e),n=new Date(1e3*t),s=i18n("traffic_recording.about_to_download_flow");s=s.replace("%{date_begin}",this.format_date(l)),s=s.replace("%{date_end}",this.format_date(n)),s=s.replace("%{extra_info}",a),this.description=s},show_hide_menu:function(){this.show_menu=!this.show_menu}}});const mv=e=>(pl("data-v-0be978c4"),e=e(),fl(),e),hv=["innerHTML"],gv={key:0,style:{height:"95%"}},bv={class:"tab-content",style:{height:"100%"}},yv={class:"row"},wv={class:"form-group mb-3 col-md-3 has-feedback"},xv={class:"form-group mb-3 col-md-9 text-right asd"},kv={class:"radio-inline",style:{"margin-left":"1rem"}},$v={class:"radio-inline"},Sv={class:"row",id:"pcapDownloadModal_advanced",style:{}},Nv={class:"form-group mb-3 col-md-12 has-feedback"},Cv=mv((()=>Vs("br",null,null,-1))),Av={class:"form-label"},Ev=mv((()=>Vs("a",{class:"ntopng-external-link",href:"https://www.ntop.org/guides/n2disk/filters.html"},[Vs("i",{class:"fas fa-external-link-alt"})],-1))),Tv={class:"input-group"},Pv=mv((()=>Vs("span",{class:"input-group-addon"},[Vs("span",{class:"glyphicon glyphicon-filter"})],-1))),Uv=mv((()=>Vs("br",null,null,-1))),Iv={class:"form-label"},Ov=mv((()=>Vs("br",null,null,-1))),jv=mv((()=>Vs("ul",null,[Vs("li",null,[Ks("Host: "),Vs("i",null,"host 192.168.1.2")]),Vs("li",null,[Ks("HTTP: "),Vs("i",null,"tcp and port 80")]),Vs("li",null,[Ks("Traffic between hosts: "),Vs("i",null,"ip host 192.168.1.1 and 192.168.1.2")]),Vs("li",null,[Ks("Traffic from an host to another: "),Vs("i",null,"ip src 192.168.1.1 and dst 192.168.1.2")])],-1)));np("\ninput ~ .alert[data-v-0be978c4] {\n  display: none;\n}\ninput:invalid ~ .alert[data-v-0be978c4] {\n  display: block;\n}\n"),vv.render=function(e,t,a,l,n,s){const o=kn("modal");return Ps(),Ls(o,{id:e.id_modal,onApply:e.apply,ref:"modal"},{title:ml((()=>[Ks(te(e.i18n("traffic_recording.pcap_extract")),1)])),body:ml((()=>[Vs("div",{class:K(["alert",{"alert-info":2!=e.data_available,"alert-warning":2==e.data_available}]),innerHTML:e.description},null,10,hv),1==e.data_available?(Ps(),Ms("form",gv,[Vs("div",bv,[Vs("div",yv,[Vs("div",wv,[Vs("button",{class:"btn btn-sm btn-secondary",type:"button",onClick:t[0]||(t[0]=(...t)=>e.show_hide_menu&&e.show_hide_menu(...t))},[Ks(te(e.i18n("advanced")),1),Vs("i",{class:K({"fas fa-caret-down":e.show_menu,"fas fa-caret-up":!e.show_menu})},null,2)])]),Vs("div",xv,[Vs("label",kv,[wn(Vs("input",{type:"radio",name:"extract_now","onUpdate:modelValue":t[1]||(t[1]=t=>e.extract_now=t),value:"true",checked:""},null,512),[[Fi,e.extract_now]]),Ks(" "+te(e.i18n("traffic_recording.extract_now")),1)]),Vs("label",$v,[wn(Vs("input",{type:"radio",name:"extract_now","onUpdate:modelValue":t[2]||(t[2]=t=>e.extract_now=t),value:"false"},null,512),[[Fi,e.extract_now]]),Ks(" "+te(e.i18n("traffic_recording.queue_as_job")),1)])])]),wn(Vs("div",Sv,[Vs("div",Nv,[Cv,Vs("label",Av,[Ks(te(e.i18n("traffic_recording.filter_bpf"))+" ",1),Ev]),Vs("div",Tv,[Pv,wn(Vs("input",{name:"bpf_filter","onUpdate:modelValue":t[3]||(t[3]=t=>e.bpf_filter=t),class:"form-control input-sm","data-bpf":"bpf",autocomplete:"off",spellcheck:"false"},null,512),[[ji,e.bpf_filter]]),wn(Vs("span",{style:{margin:"0px",padding:"0",display:"block"},class:"invalid-feedback"},te(e.i18n("invalid_value")),513),[[Yi,e.invalid_bpf]])]),Uv,Vs("label",Iv,te(e.i18n("traffic_recording.filter_examples"))+":",1),Ov,jv])],512),[[Yi,e.show_menu]])])])):Ys("v-if",!0)])),footer:ml((()=>[wn(Vs("button",{type:"button",onClick:t[4]||(t[4]=(...t)=>e.apply&&e.apply(...t)),class:"btn btn-primary"},te(e.i18n("apply")),513),[[Yi,2!=e.data_available]]),wn(Vs("button",{type:"button",onClick:t[5]||(t[5]=(...t)=>e.close&&e.close(...t)),class:"btn btn-primary"},te(e.i18n("ok")),513),[[Yi,2==e.data_available]])])),_:1},8,["id","onApply"])},vv.__scopeId="data-v-0be978c4",vv.__file="http_src/vue/modal-traffic-extraction.vue";const Mv=e=>(pl("data-v-089b0491"),e=e(),fl(),e),Lv=Mv((()=>Vs("a",{target:"_newtab",href:"#",style:{},class:"nav-item text-muted"},[Vs("i",{class:"fas fa-question-circle",style:{"margin-left":"28rem","padding-top":"0.8rem"}})],-1))),Fv={class:"nav nav-tabs"},Rv=["disabled"],Dv={key:0,style:{"min-height":"8.5rem"}},zv={class:"form-group ms-2 me-2 mt-3 row"},qv={class:"col-form-label col-sm-4"},Bv={class:"col-sm-6"},Vv=["pattern"],Hv={key:1,style:{"min-height":"8.5rem"}},Gv={class:"form-group ms-2 me-2 mt-3 row"},Wv={class:"col-form-label col-sm-4"},Kv={class:"col-sm-8"},Jv={value:"name"},Yv={value:"date"},Zv={class:"form-group ms-2 me-2 mt-3 row"},Xv={class:"col-form-label col-sm-4"},Qv={class:"col-sm-8"},em=["value"],tm={class:"form-group ms-2 me-2 mt-3 row"},am={class:"custom-control custom-switch"},lm={class:"custom-control-label ms-1 form-check-label"},nm=["disabled"],sm=["disabled"],om=["disabled"];var im={__name:"modal-snapshot",props:{csrf:String,page:String},emits:["added_snapshot","deleted_snapshot","deleted_all_snapshots"],setup(e,{expose:t,emit:a}){const l=e,n=va(null),s=va("add"),o=va(""),i=va(!1),r=va(""),c=va(!0),u=va(""),d=va(""),_=va([]),p=va("date");let f=NtopUtils.REGEXES.singleword;const v=xo((()=>!new RegExp(f).test(d.value))),m=xo((()=>""==o.value));function h(){if(null!=l.page)return l.page;let e="alerts";return null!=window.location.toString().match(/alert_stats.lua/)||(e="flows"),e}let g=null;function b(){g!=p.value&&(_.value.sort(((e,t)=>"name"==p.value?e.name.localeCompare(t.name):e.utc-t.utc)),_.value.length>0&&(o.value=_.value[0]),g=p.value)}let y=!0;const w=async()=>{let e;if(c.value)e=ntopng_url_manager.get_url_params();else{let t=ntopng_url_manager.get_url_object();delete t.epoch_begin,delete t.epoch_end,e=ntopng_url_manager.obj_to_url_params(t)}let t=h(),n={snapshot_name:d.value,filters:e,page:t};n.csrf=l.csrf;let s=`${http_prefix}/lua/pro/rest/v2/add/filters/snapshot.lua`;try{let e={"Content-Type":"application/json"};await ntopng_utility.http_request(s,{method:"post",headers:e,body:JSON.stringify(n)}),y=!0}catch(e){console.error(e)}$(),a("added_snapshots",n)},x=()=>{$();let e=o.value.filters;if(1==i.value){let t=ntopng_status_manager.get_status(),a=ntopng_url_manager.get_url_object(e);a.epoch_begin=t.epoch_begin,a.epoch_end=t.epoch_end,e=ntopng_url_manager.obj_to_url_params(a)}ntopng_url_manager.replace_url_and_reload(e)},k=async e=>{let t=o.value.name;1==e&&(t="*");let n={snapshot_name:t,page:h()};n.csrf=l.csrf;let s=`${http_prefix}/lua/pro/rest/v2/delete/filters/snapshot.lua`;try{let e={"Content-Type":"application/json"};await ntopng_utility.http_request(s,{method:"post",headers:e,body:JSON.stringify(n)}),y=!0}catch(e){console.error(e)}a(1==e?"deleted_all_snapshots":"deleted_snapshot",n),$()},$=()=>{n.value.close()};t({show:()=>{!async function(){s.value="add",d.value="",c.value=!0,i.value=!1;let e=ntopng_status_manager.get_status(),t=S("snapshots.save_time"),a=ntopng_utility.from_utc_to_server_date_format(1e3*e.epoch_begin,"DD/MM/YYYY HH:mm"),l=ntopng_utility.from_utc_to_server_date_format(1e3*e.epoch_end,"DD/MM/YYYY HH:mm");t=t.replace(/\%begin_time/,a),t=t.replace(/\%end_time/,l),u.value=t;let n=S("snapshots.apply_time");if(n=n.replace(/\%begin_time/,a),n=n.replace(/\%end_time/,l),r.value=n,y){y=!1;let e=h(),t=`${http_prefix}/lua/pro/rest/v2/get/filters/snapshots.lua?page=${e}`,a=await ntopng_utility.http_request(t);_.value=ntopng_utility.object_to_array(a)}b(),_.value.length>0&&(o.value=_.value[0])}(),n.value.show()},close:$}),_n((()=>{}));const S=e=>i18n(e);return(e,t)=>(Ps(),Ls(sp,{onShowed:t[8]||(t[8]=e=>{}),ref_key:"modal_id",ref:n},{title:ml((()=>[Ks(te(S("snapshots.manage"))+" ",1),Lv])),body:ml((()=>[Vs("ul",Fv,[Vs("li",{class:"nav-item",onClick:t[0]||(t[0]=e=>s.value="add")},[Vs("a",{class:K(["nav-link",{active:"add"==s.value}]),href:"#"},te(S("snapshots.add")),3)]),Vs("li",{class:"nav-item",onClick:t[1]||(t[1]=e=>(e=>{0==_.value.length&&"select"==e||(s.value=e)})("select"))},[Vs("a",{disabled:0==_.value.length,class:K(["nav-link",{active:"select"==s.value,"not-allowed":0==_.value.length}]),href:"#"},te(S("snapshots.manage")),11,Rv)])]),"add"==s.value?(Ps(),Ms("div",Dv,[Vs("div",zv,[Vs("label",qv,[Vs("b",null,te(S("snapshots.name"))+":",1)]),Vs("div",Bv,[wn(Vs("input",{pattern:ya(f),placeholder:"",required:"",type:"text",class:"form-control","onUpdate:modelValue":t[2]||(t[2]=e=>d.value=e)},null,8,Vv),[[ji,d.value]])])]),Ys(' <div class="form-group ms-2 me-2 mt-3 row"> '),Ys(' \t<div class="custom-control custom-switch"> '),Ys(' \t  <input type="checkbox" class="custom-control-input whitespace form-check-input" v-model="save_time"> '),Ys(' \t  <label class="custom-control-label ms-1 form-check-label">{{save_time_text}}</label> '),Ys(" \t</div> "),Ys(" </div>       ")])):Ys("v-if",!0),Ys(" action add "),"select"==s.value?(Ps(),Ms("div",Hv,[Vs("div",Gv,[Vs("label",Wv,[Vs("b",null,te(S("snapshots.order_by")),1)]),Vs("div",Kv,[wn(Vs("select",{class:"form-select",onChange:t[3]||(t[3]=e=>b()),"onUpdate:modelValue":t[4]||(t[4]=e=>p.value=e)},[Vs("option",Jv,te(S("snapshots.name")),1),Vs("option",Yv,te(S("snapshots.date")),1)],544),[[Ri,p.value]])])]),Vs("div",Zv,[Vs("label",Xv,[Vs("b",null,te(S("snapshots.select")),1)]),Vs("div",Qv,[wn(Vs("select",{class:"form-select","onUpdate:modelValue":t[5]||(t[5]=e=>o.value=e)},[(Ps(!0),Ms(Ss,null,En(_.value,(e=>(Ps(),Ms("option",{value:e},te(function(e){let t=1e3*e.utc,a=ntopng_utility.from_utc_to_server_date_format(t,"DD/MM/YYYY");return`${e.name} (${a})`}(e)),9,em)))),256))],512),[[Ri,o.value]])])]),Vs("div",tm,[Vs("div",am,[wn(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input","onUpdate:modelValue":t[6]||(t[6]=e=>i.value=e)},null,512),[[Mi,i.value]]),Vs("label",lm,te(r.value),1)])])])):Ys("v-if",!0),Ys(" action select ")])),footer:ml((()=>["add"==s.value?(Ps(),Ms("button",{key:0,type:"button",onClick:w,disabled:ya(v),class:"btn btn-primary"},te(S("snapshots.add")),9,nm)):Ys("v-if",!0),"select"==s.value?(Ps(),Ms("button",{key:1,onClick:t[7]||(t[7]=e=>k(!0)),type:"button",style:{"text-align":"left","margin-left":"0px"},class:"btn btn-danger start-0 position-absolute ms-3"},te(S("snapshots.delete_all")),1)):Ys("v-if",!0),"select"==s.value?(Ps(),Ms("button",{key:2,type:"button",onClick:k,disabled:ya(m),class:"btn btn-danger"},te(S("snapshots.delete")),9,sm)):Ys("v-if",!0),"select"==s.value?(Ps(),Ms("button",{key:3,type:"button",onClick:x,disabled:ya(m),class:"btn btn-primary"},te(S("snapshots.apply")),9,om)):Ys("v-if",!0)])),_:1},512))}};np("\ninput[data-v-089b0491]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-089b0491] {\n  cursor: not-allowed;\n}\n"),im.__scopeId="data-v-089b0491",im.__file="http_src/vue/modal-snapshot.vue";const rm=e=>(pl("data-v-19c5b1f1"),e=e(),fl(),e),cm=["innerHTML"],um={class:"form-group mb-3"},dm=["innerHTML"],_m={class:"alert_label"},pm={class:"form-check"},fm={class:"form-check-label"},vm={key:0,class:"form-check"},mm={class:"form-check-label"},hm={class:"form-check"},gm={class:"form-check-label"},bm={class:"form-check"},ym={class:"form-check-label"},wm={key:0,class:"exclude-domain-certificate"},xm={class:"alert_label"},km={key:0,class:"form-check"},$m={class:"form-check-label whitespace"},Sm=["pattern","disabled"],Nm={key:1,class:"form-check"},Cm={class:"form-check-label whitespace"},Am=["disabled","pattern"],Em={key:0,class:"form-group row"},Tm={class:"col-form-label"},Pm={class:"mt-1"},Um=["placeholder"],Im={class:"separator"},Om=rm((()=>Vs("hr",{class:"separator"},null,-1))),jm={class:"form-group mb-3"},Mm={class:"custom-control custom-switch"},Lm={class:"custom-control-label"},Fm={class:"alert alert-warning border",role:"alert"},Rm=["disabled"];var Dm={__name:"modal-alerts-filter",props:{alert:Object,page:String},emits:["exclude"],setup(e,{expose:t,emit:a}){const l=e,n=va(null),s=va("any"),o=va(!0),i=va(null),r=va(null),c=va(null),u=i18n("details.comment_placeholder");jl((()=>l.alert),((e,t)=>{null!=e&&(s.value="any",o.value=!0,i.value=""==e.info?.value?null:d(e.info?.value),r.value=""==e.info?.issuerdn?null:e.info?.issuerdn)}));const d=e=>{let t=e,a=e.split("://");a.length>1&&(t=a[1]),t=t.split(":")[0];let l=t.split("www.");return l.length>1&&(t=l[1]),t=t.split("/")[0],t},_=()=>{if("domain"==s.value){let e=new RegExp(m);return null==i.value||0==e.test(i.value)}if("certificate"==s.value){let e=new RegExp(h);return null==r.value||0==e.test(r.value)}return!1},p=xo((()=>l.alert?.alert_name)),f=xo((()=>{let e={value:"",label:""};if("host"!=l.page||null==l.alert)return e;let t=l.alert;return e.value=t.ip.value,null!=t.vlan&&null!=t.vlan.value&&0!=t.vlan.value&&(e.value=e.value+"@"+t.vlan.value),e.label=t.ip.label?`${t.ip.label} (${t.ip.value})`:t.ip.value,e})),v=xo((()=>{let e={cli_value:"",cli_label:"",srv_value:"",srv_label:""};if("flow"!=l.page||null==l.alert)return e;let t=l.alert;e.cli_value=t.flow.cli_ip.value,e.srv_value=t.flow.srv_ip.value;let a=`${t.flow.cli_ip.label||t.flow.cli_ip.value}`,n=`${t.flow.srv_ip.label||t.flow.srv_ip.value}`;return null!=t.flow.vlan&&null!=t.flow.vlan.value&&0!=t.flow.vlan.value&&(a=`${a}@${t.flow.vlan.label}`,n=`${n}@${t.flow.vlan.label}`,e.cli_value=e.cli_value+"@"+t.flow.vlan.value,e.srv_value=e.srv_value+"@"+t.flow.vlan.value),a!==e.cli_value&&(a=`${a} (${e.cli_value})`),n!==e.srv_value&&(n=`${n} (${e.srv_value})`),e.cli_label=a,e.srv_label=n,e}));let m=NtopUtils.REGEXES.domain_name_not_strict,h=NtopUtils.REGEXES.tls_certificate;const g=()=>{let e=l.page,t="domain"==s.value||"certificate"==s.value?s.value:"host",n={delete_alerts:o.value,label:c.value,type:t},u=null;"host"==t?("host"==s.value?u=f.value.value:"server_host"==s.value?u=v.value.srv_value:"client_host"==s.value&&(u=v.value.cli_value),n.alert_addr=u,"flow"==e?n.flow_alert_key=l.alert.alert_id.value:"host"==e&&(n.host_alert_key=l.alert.alert_id.value)):"domain"==t?(n.delete_alerts=!1,n.alert_domain=i.value):"certificate"==t&&(n.delete_alerts=!1,n.alert_certificate=r.value),b(),a("exclude",n)},b=()=>{n.value.close()};t({show:()=>{c.value="",n.value.show()},close:b}),_n((()=>{}));const y=e=>i18n(e);return(t,a)=>(Ps(),Ls(sp,{onShowed:a[10]||(a[10]=e=>{}),ref_key:"modal_id",ref:n},{title:ml((()=>[Ks(te(y("exclude_check"))+": ",1),Vs("span",{innerHTML:ya(p)},null,8,cm)])),body:ml((()=>[Vs("div",um,[Vs("div",null,[Vs("label",null,[Ks(te(y("exclude_check"))+' "',1),Vs("b",{innerHTML:ya(p)},null,8,dm),Ks('". '),Vs("span",_m,te(y("exclude_for"))+":",1)]),Vs("div",pm,[wn(Vs("input",{class:"form-check-input",type:"radio",value:"any","onUpdate:modelValue":a[0]||(a[0]=e=>s.value=e)},null,512),[[Fi,s.value]]),Vs("label",fm,[Vs("span",null,te(y("show_alerts.filter_disable_check")),1)])]),"host"==e.page?(Ps(),Ms("div",vm,[wn(Vs("input",{class:"form-check-input",type:"radio",value:"host","onUpdate:modelValue":a[1]||(a[1]=e=>s.value=e)},null,512),[[Fi,s.value]]),Vs("label",mm,[Vs("span",null,te(ya(f).label),1)])])):Ys("v-if",!0),"flow"==e.page?(Ps(),Ms(Ss,{key:1},[Vs("div",hm,[wn(Vs("input",{class:"form-check-input",type:"radio",value:"client_host","onUpdate:modelValue":a[2]||(a[2]=e=>s.value=e)},null,512),[[Fi,s.value]]),Vs("label",gm,[Vs("span",null,te(y("client"))+": "+te(ya(v).cli_label),1)])]),Vs("div",bm,[wn(Vs("input",{class:"form-check-input",type:"radio",value:"server_host","onUpdate:modelValue":a[3]||(a[3]=e=>s.value=e)},null,512),[[Fi,s.value]]),Vs("label",ym,[Vs("span",null,te(y("server"))+": "+te(ya(v).srv_label),1)])])],64)):Ys("v-if",!0)]),null!=i.value||null!=r.value?(Ps(),Ms("div",wm,[Vs("label",null,[Vs("span",xm,te(y("check_exclusion.exclude_all_checks_for"))+":",1)]),null!=i.value?(Ps(),Ms("div",km,[wn(Vs("input",{class:"form-check-input",type:"radio",value:"domain","onUpdate:modelValue":a[4]||(a[4]=e=>s.value=e)},null,512),[[Fi,s.value]]),Vs("label",$m,[Vs("span",null,te(y("check_exclusion.domain"))+":",1)]),wn(Vs("input",{type:"text",pattern:ya(m),disabled:"domain"!=s.value,required:"","onUpdate:modelValue":a[5]||(a[5]=e=>i.value=e),class:"form-check-label custom-width"},null,8,Sm),[[ji,i.value]])])):Ys("v-if",!0),null!=r.value?(Ps(),Ms("div",Nm,[wn(Vs("input",{class:"form-check-input",type:"radio",value:"certificate","onUpdate:modelValue":a[6]||(a[6]=e=>s.value=e)},null,512),[[Fi,s.value]]),Vs("label",Cm,[Vs("span",null,te(y("check_exclusion.tls_certificate"))+":",1)]),wn(Vs("input",{type:"text",disabled:"certificate"!=s.value,"onUpdate:modelValue":a[7]||(a[7]=e=>r.value=e),pattern:ya(h),required:"",class:"form-check-label custom-width"},null,8,Am),[[ji,r.value]])])):Ys("v-if",!0)])):Ys("v-if",!0)]),"any"!=s.value?(Ps(),Ms("div",Em,[Vs("div",null,[Vs("label",Tm,[Vs("b",null,te(y("show_alerts.add_a_comment")),1)])]),Vs("div",Pm,[wn(Vs("textarea",{placeholder:ya(u),id:"alert-label",name:"label",rows:"3",class:"form-control",type:"text","onUpdate:modelValue":a[8]||(a[8]=e=>c.value=e),maxlength:"450"},null,8,Um),[[ji,c.value]])])])):Ys("v-if",!0),wn(Vs("hr",Im,null,512),[[Yi,o.value]]),"domain"!=s.value&&"certificate"!=s.value?(Ps(),Ms(Ss,{key:1},[wn(Vs("div",{class:"message alert alert-danger"},te(y("show_alerts.confirm_delete_filtered_alerts")),513),[[Yi,o.value]]),Om,Vs("div",jm,[Vs("div",Mm,[wn(Vs("input",{type:"checkbox",class:"custom-control-input whitespace","onUpdate:modelValue":a[9]||(a[9]=e=>o.value=e)},null,512),[[Mi,o.value]]),Vs("label",Lm,te(y("delete_disabled_alerts")),1)])])],64)):Ys("v-if",!0),Vs("div",Fm,te(y("show_alerts.confirm_filter_alert")),1)])),footer:ml((()=>[Vs("button",{type:"button",onClick:g,disabled:_(),class:"btn btn-warning"},te(y("filter")),9,Rm)])),_:1},512))}};np("\n.whitespace[data-v-19c5b1f1] {\n  margin-right: 0.2rem;\n}\n.custom-width[data-v-19c5b1f1] {\n  display: block;\n  min-width: 100%;\n}\ninput[data-v-19c5b1f1]:invalid {\n  border-color: #ff0000;\n}\n.exclude-domain-certificate[data-v-19c5b1f1] {\n  margin-top: 0.4rem;\n}\n"),Dm.__scopeId="data-v-19c5b1f1",Dm.__file="http_src/vue/modal-alerts-filter.vue";const zm={class:"form-group row mb-2"},qm={class:"col-sm-6"},Bm={class:"col-form-label"},Vm={class:"col-sm-6 mt-1"};var Hm={__name:"modal-acknowledge-alert",props:{context:Object,page:String},emits:["acknowledge"],setup(e,{expose:t,emit:a}){const l=e,n=e=>i18n(e),s=va(null),o=va(null),i=va(""),r=va("");async function c(){const e=`${http_prefix}/lua/rest/v2/acknowledge/${l.page}/alerts.lua`,t={csrf:l.context.csrf,ifid:l.context.ifid,label:i.value,row_id:u.value.row_id};await b.http_request(e,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}),a("acknowledge"),d()}_n((()=>{}));const u=va({}),d=()=>{s.value.close()};return t({show:e=>{u.value=e;const t=$(`<span>${e.alert_id.label}</span>`);r.value=t.text().trim(),i.value=e.user_label;let a=n("show_alerts.confirm_acknowledge_alert");o.value.show(a,"alert-warning"),s.value.show()},close:d}),(e,t)=>(Ps(),Ls(sp,{ref_key:"modal_id",ref:s},{title:ml((()=>[Ks(te(n("show_alerts.acknowledge_alert"))+": "+te(r.value),1)])),body:ml((()=>[Vs("div",zm,[Vs("div",qm,[Vs("label",Bm,[Vs("b",null,te(n("show_alerts.add_a_comment")),1)])]),Vs("div",Vm,[wn(Vs("input",{"onUpdate:modelValue":t[0]||(t[0]=e=>i.value=e),class:"form-control",type:"text",maxlength:"255"},null,512),[[ji,i.value]])])]),Hs(N_,{no_close_button:!0,ref_key:"alert_info",ref:o},null,512)])),footer:ml((()=>[Vs("button",{type:"button",onClick:c,class:"btn btn-primary"},te(n("acknowledge")),1)])),_:1},512))},__file:"http_src/vue/modal-acknowledge-alert.vue"},Gm={__name:"modal-delete-alert",props:{context:Object,page:String},emits:["delete_alert"],setup(e,{expose:t,emit:a}){const l=e,n=e=>i18n(e),s=va(null),o=va(null),i=va({});let r="historical";async function c(){const e=`${http_prefix}/lua/rest/v2/delete/${l.page}/alerts.lua`,t={csrf:l.context.csrf,ifid:l.context.ifid,status:r,row_id:i.value.row_id};await b.http_request(e,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}),a("delete_alert"),u()}_n((()=>{}));const u=()=>{s.value.close()};return t({show:(e,t)=>{i.value=e,r=t;let a=n("show_alerts.confirm_label_alert");o.value.show(a,"alert-danger"),s.value.show()},close:u}),(e,t)=>(Ps(),Ls(sp,{ref_key:"modal_id",ref:s},{title:ml((()=>[Ks(te(n("show_alerts.delete_alert")),1)])),body:ml((()=>[Hs(N_,{no_close_button:!0,ref_key:"alert_info",ref:o},null,512)])),footer:ml((()=>[Vs("button",{type:"button",onClick:c,class:"btn btn-primary"},te(n("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-alert.vue"};const Wm={class:"form-group row"},Km={class:"col-sm-6"},Jm={class:"col-form-label"},Ym={class:"col-sm-6"},Zm=["value"],Xm={class:"form-group row mb-2"},Qm={class:"col-sm-6"},eh={class:"col-form-label"},th={class:"col-sm-6 mt-1"},ah=["value"];var lh={__name:"modal-acknowledge-alerts",props:{page:String,context:Object},emits:["acknowledge_alerts"],setup(e,{expose:t,emit:a}){const l=e,n=e=>i18n(e),s=va(null),o=va(null),i=va(""),r=va("");va([]),_n((()=>{}));async function c(){const e=`${http_prefix}/lua/rest/v2/acknowledge/${l.page}/alerts.lua`,t=x.get_url_object(),n={csrf:l.context.csrf,...t};await b.http_post_request(e,n),a("acknowledge_alerts"),u()}const u=()=>{s.value.close()};return t({show:e=>{i.value=b.from_utc_to_server_date_format(1e3*e.epoch_begin),r.value=b.from_utc_to_server_date_format(1e3*e.epoch_end);let t=n("show_alerts.confirm_acknowledge_alerts");o.value.show(t,"alert-danger"),s.value.show()},close:u}),(e,t)=>(Ps(),Ls(sp,{ref_key:"modal_id",ref:s},{title:ml((()=>[Ks(te(n("acknowledge_alerts")),1)])),body:ml((()=>[Vs("div",Wm,[Vs("div",Km,[Vs("label",Jm,[Vs("b",null,te(n("date_from")),1)])]),Vs("div",Ym,[Vs("input",{class:"form-control",type:"text",value:i.value,disabled:""},null,8,Zm)])]),Vs("div",Xm,[Vs("div",Qm,[Vs("label",eh,[Vs("b",null,te(n("date_from")),1)])]),Vs("div",th,[Vs("input",{class:"form-control",type:"text",value:r.value,disabled:""},null,8,ah)])]),Hs(N_,{no_close_button:!0,ref_key:"alert_info",ref:o},null,512)])),footer:ml((()=>[Vs("button",{type:"button",onClick:c,class:"btn btn-primary"},te(n("acknowledge")),1)])),_:1},512))},__file:"http_src/vue/modal-acknowledge-alerts.vue"};const nh={class:"form-group row"},sh={class:"col-sm-6"},oh={class:"col-form-label"},ih={class:"col-sm-6"},rh=["value"],ch={class:"form-group row"},uh={class:"col-sm-6"},dh={class:"col-form-label"},_h={class:"col-sm-6 mt-1"},ph=["value"],fh={class:"form-group filters-list mb-2"},vh={class:"form-group row"},mh={class:"col-sm-6"},hh={class:"col-form-label"},gh={class:"col-sm-6 mt-1"},bh=["value"];var yh={__name:"modal-delete-alerts",props:{page:String,context:Object},emits:["delete_alerts"],setup(e,{expose:t,emit:a}){const l=e,n=e=>i18n(e),s=va(null),o=va(null),i=va(""),r=va(""),c=va([]);_n((()=>{}));async function u(){const e=`${http_prefix}/lua/rest/v2/delete/${l.page}/alerts.lua`,t=x.get_url_object(),n={csrf:l.context.csrf,...t};await b.http_post_request(e,n),a("delete_alerts"),d()}const d=()=>{s.value.close()};return t({show:e=>{i.value=b.from_utc_to_server_date_format(1e3*e.epoch_begin),r.value=b.from_utc_to_server_date_format(1e3*e.epoch_end);const t=Qd.tag_operator_label_dict;c.value=e.filters.map((e=>({label:e.label,value:`${t[e.operator]} ${e.value_label}`})));let a=n("show_alerts.confirm_delete_alerts");o.value.show(a,"alert-danger"),s.value.show()},close:d}),(e,t)=>(Ps(),Ls(sp,{ref_key:"modal_id",ref:s},{title:ml((()=>[Ks(te(n("delete_alerts")),1)])),body:ml((()=>[Vs("div",nh,[Vs("div",sh,[Vs("label",oh,[Vs("b",null,te(n("date_from")),1)])]),Vs("div",ih,[Vs("input",{class:"form-control",type:"text",value:i.value,disabled:""},null,8,rh)])]),Vs("div",ch,[Vs("div",uh,[Vs("label",dh,[Vs("b",null,te(n("date_from")),1)])]),Vs("div",_h,[Vs("input",{class:"form-control",type:"text",value:r.value,disabled:""},null,8,ph)])]),Vs("div",fh,[(Ps(!0),Ms(Ss,null,En(c.value,(e=>(Ps(),Ms("div",vh,[Vs("div",mh,[Vs("label",hh,[Vs("b",null,te(e.label),1)])]),Vs("div",gh,[Vs("input",{class:"form-control",type:"text",value:e.value,disabled:""},null,8,bh)])])))),256))]),Hs(N_,{no_close_button:!0,ref_key:"alert_info",ref:o},null,512)])),footer:ml((()=>[Vs("button",{type:"button",onClick:u,class:"btn btn-primary"},te(n("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-alerts.vue"};const wh={class:"row"},xh={class:"col-12"},kh={class:"mb-2"},$h={class:"w-100"},Sh={clas:"range-container d-flex flex-wrap"},Nh={class:"range-picker d-flex m-auto flex-wrap"},Ch={key:0,class:"ms-1 me-2"},Ah=["value"],Eh=["label"],Th=["value"],Ph=["title"],Uh=[Vs("i",{class:"fas fa-lg fa-link"},null,-1)],Ih=["title","href"],Oh=[Vs("i",{class:"fas fa-lg fa-file"},null,-1)],jh=["title"],Mh=[Vs("i",{class:"fas fa-lg fa-download"},null,-1)],Lh=["title"],Fh=[Vs("i",{class:"fas fa-lg fa-camera-retro"},null,-1)],Rh={class:"col-12"},Dh={class:"card card-shadow"},zh={class:"card-body"},qh={key:0,class:"row"},Bh={class:"col-12 mb-2",id:"chart-vue"},Vh={class:"card h-100 overflow-hidden"},Hh=Vs("div",null,null,-1),Gh=["title"],Wh=["onClick","title"],Kh={class:"card-footer"},Jh=Vs("i",{class:"fas fa fa-user-check"},null,-1),Yh=Vs("i",{class:"fas fa fa-trash"},null,-1);var Zh={__name:"page-alert-stats",props:{context:Object},setup(e){const t=e,a=e=>i18n(e),l=va(null),n=va(null),s=va(null),o=va(null),i=va(null),r=va(null),c=va(null),u=va(null),d=va(null),_=va(null),p=va(null),f=va(null),v=va(0),m=va(!1),g=va(""),w=va(null),k=t.context.ifid;let S;const C=va(""),A=va("");let E=`${http_prefix}/lua/pro/rest/v2/get/db/ts.lua`;const T=M.typeChart.TS_COLUMN,P=va([]),U=va([]),I=va([a("show_alerts.alerts_info")]),O=va({}),j=va([]),L=va(!1),F=xo((()=>{if(!t.context.show_chart||null==s.value)return"";if(v.value<0)throw"never run";const e=t.context.download.endpoint;let a=x.get_url_object(),l=s.value.get_columns_defs().filter((e=>e.visible)).map((e=>e.id)).join(",");a.format="txt",a.visible_columns=l;const n=x.obj_to_url_params(a);return`${location.origin}/${e}?${n}`}));dn((async()=>{g.value=`<div class="alert alert-success alert-dismissable"><span>${i18n("no_alerts_require_attention")}</span></div>`,t.context.is_va&&b.check_and_set_default_time_interval("day"),async function(){S=x.get_url_entry("page");const e=x.get_url_entry("status");null==S&&(S="all");"engaged"==e&&"flow"==S&&x.set_key_to_url("status","historical");E="snmp_device"==S?`${http_prefix}/lua/pro/rest/v2/get/snmp/device/alert/ts.lua`:`${http_prefix}/lua/rest/v2/get/${S}/alert/ts.lua`,O.value={value:x.get_url_entry("query_preset"),count:x.get_url_entry("count")},null==O.value.value&&(O.value.value="");C.value=`alert_${S}`,A.value=`${C.value}_${O.value.value}`}(),function(){null==x.get_url_entry("ifid")&&x.set_key_to_url("ifid",k);if(null==x.get_url_entry("epoch_begin")||null==x.get_url_entry("epoch_end")){let e=Number.parseInt((Date.now()-18e5)/1e3),t=Number.parseInt(Date.now()/1e3);x.set_key_to_url("epoch_begin",e),x.set_key_to_url("epoch_end",t)}"flow"==x.get_url_entry("page")&&"engaged"==x.get_url_entry("status")&&x.set_key_to_url("status","historical")}(),await async function(){if(!t.context.is_ntop_enterprise_l||"engaged"==x.get_url_entry("status"))return void h.ready(z());let e=`${http_prefix}/lua/pro/rest/v2/get/alert/preset/consts.lua?page=${S}`,a=await b.http_request(e);if(null==a||0==a.length)return j.value=[],x.set_key_to_url("query_preset",""),x.set_key_to_url("count",""),void h.ready(z());j.value=a[0].list.map((e=>({value:e.id,name:e.name,count:e.count,builtin:!0}))),a.length>1&&a[1].list.forEach((e=>{let t={value:e.id,name:e.name,count:e.count,is_preset:!0};j.value.push(t)}));if(null==O.value||""==O.value.value)O.value=j.value[0];else{let e=j.value.find((e=>e.value==O.value.value));O.value=e||j.value[0]}x.set_key_to_url("query_preset",O.value.value),x.set_key_to_url("count",O.value.count),h.ready(z())}(),L.value=!0,await q()})),_n((async()=>{!async function(){await h.on_ready("range_picker"),n.value.register_status(),y.on_status_change(S,(e=>{x.get_url_params(),s.value.refresh_table(),q()}),!1)}()}));const D="page-alert-stats";function z(){return`${D}_query_presets`}async function q(e){1==t.context.show_cards&&1!=O.value.is_preset&&(P.value=await B("overview"))}async function B(e,a){const l=x.get_url_params(),n=`${t.context.endpoint_cards}?${l}&action=${e}`;return(await b.http_request(n)).map((t=>({id:t.name,label:t.label,title:t.tooltip,show_spinner:!1,data_loaded:"overview"!=e,options:t.value})))}const V=(e,t)=>a=>{!async function(e,t){if(e.show_spinner=!0,await Ja(),0==e.data_loaded){let a=await B(e.id);e.options=a.find((t=>t.id==e.id)).options,await Ja(),U.value[t].load_menu()}e.show_spinner=!1}(e,t)};function H(){$(`#${A.value}`).on("click","a.tag-filter",(async function(e){W(e,$(this))}))}const G=async e=>{await h.on_ready(z());let a={l7_proto:(e,t)=>{let a="";if(void 0!==e.confidence){const t=e.confidence;a="DPI"==t?`<span class="badge bg-success" title="${t}">${t}</span>`:`<span class="badge bg-warning" title="${t}">${t}</span>`}return R.filterize("l7proto",e.value,e.label)+" "+`${a}`},info:(e,t)=>{let a="";return e.value&&(a=`<button class="btn btn-light btn-sm border ms-1" data-placement="bottom" onclick="\n                    const textArea = document.createElement('textarea');\n                    textArea.value = '${e.value}';    \n                    textArea.style.position = 'absolute';\n                    textArea.style.left = '-999999px';    \n                    document.body.prepend(textArea);\n                    textArea.select();\n                    document.execCommand('copy');"\n                    ><i class="fas fa-copy"></i></button>`),`${a} ${R.filterize("info",e.value,e.label)}`}},l=O.value.is_preset&&e.length>0;return l&&(e=[e[0]].concat(t.context.columns_def)),e.forEach((e=>{if(e.render_func=a[e.data_field],"actions"==e.id){if(1==l)return void(e.button_def_array=[{id:"expand",icon:"fas fa fa-search-plus",class:["link-button"],title_i18n:"db_search.expand_button",event_id:"click_button_expand"}]);const a={snmp_info:t.context.actions.show_snmp_info,info:t.context.actions.show_info,historical_data:t.context.actions.show_historical,acknowledge:t.context.actions.show_acknowledge,disable:t.context.actions.show_disable,settings:t.context.actions.show_settings,remove:t.context.actions.show_delete};e.button_def_array.forEach((e=>{a[e.id]||e.class.push("link-disabled")}))}})),e},W=(e,t)=>{let a,l;e.stopPropagation();let n="eq";null!=t.data("tagKey")&&(a=t.data("tagKey")),null!=t.data("tagRealvalue")?l=t.data("tagRealvalue"):null!=t.data("tagValue")&&(l=t.data("tagValue")),null!=t.data("tagOperator")&&(n=t.data("tagOperator")),K({id:a,value:l,operator:n})};function K(e){if(!r.value.is_filter_defined(e))throw`Filter ${e.value} not defined`;ntopng_events_manager.emit_custom_event(N.SHOW_MODAL_FILTERS,e)}const J=()=>x.get_url_object();function Y(e){x.set_key_to_url("page",e.page_name),null!=window.location.toString().match(/alert_stats.lua/)&&function(){let e=y.get_status().filters;if(null==e)return;x.delete_params(e.map((e=>e.id)))}(),x.reload_url()}function Z(){const e=$(c.value),t=document.createElement("input");t.value=location.href,document.body.appendChild(t),t.select(),document.execCommand("copy"),document.body.removeChild(t),e.attr("title",`${a("copied")}!`).tooltip("dispose").tooltip().tooltip("show")}function X(){o.value.show()}function Q(){i.value.show()}async function ee(e){e.csrf=t.context.csrf;let l=`${http_prefix}/lua/pro/rest/v2/add/alert/exclusion.lua`;try{let t={"Content-Type":"application/json"};await b.http_request(l,{method:"post",headers:t,body:JSON.stringify(e)});x.get_url_params();setTimeout((()=>{ntopng_events_manager.emit_custom_event(N.SHOW_GLOBAL_ALERT_INFO,{text_html:a("check_exclusion.disable_warn"),type:"alert-info",timeout:2})}),1e3)}catch(e){console.error(e)}}function ae(){let e=s.value,t=n.value;setTimeout((()=>{e.refresh_table(),t.update_chart()}),1e3)}function le(e){null!=e?.rows&&(m.value=0==e.rows.length)}function ne(e){let t={click_button_snmp_info:pe,click_button_info:fe,click_button_historical_flows:_e,click_button_acknowledge:de,click_button_disable:ue,click_button_settings:ce,click_button_remove:re,click_button_expand:se};null!=t[e.event_id]&&t[e.event_id](e)}function se(e){const t=e.row;x.set_key_to_url("query_preset",""),x.set_key_to_url("count","");let a=y.get_status().filters,l=t?.filter?.tag_filters;l?.length>0&&(l=l.map((e=>({id:e.id,operator:e.op,value:e.value}))),a=a.concat(l));let n={};a.forEach((e=>n[`${e.id}_${e.operator}_${e.value}`]=e)),a=b.object_to_array(n);let s=Qd.get_filters_object(a);x.add_obj_to_url(s),x.reload_url()}function oe(){let e=y.get_status();p.value.show(e)}function ie(){let e=y.get_status();f.value.show(e)}function re(e){const t=e.row;let a=ve();_.value.show(t,a)}function ce(e){const t=e.row,a=$(t.msg.configset_ref).attr("href");window.location.href=a}function ue(e){!function(e){w.value=e,u.value.show()}(e.row)}function de(e){const a=e.row;d.value.show(a,t.context)}function _e(e){const t=e.row;t.link_to_past_flows?window.location.href=t.link_to_past_flows:window.location.href=`${http_prefix}/lua/pro/db_search.lua`}function pe(e){const t=e.row;let a="";a=null!=t.port.value?`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${t.ip}&snmp_port_idx=${t.port.value}`:`${http_prefix}/lua/pro/enterprise/snmp_device_details.lua?host=${t.ip}`,window.open(a,"_blank")}function fe(e){const a=e.row;let l=ve(),n={page:S,status:l,row_id:a.row_id,tstamp:a.tstamp.value},s=x.obj_to_url_params(n);const o=`${t.context.alert_details_url}?${s}`;window.open(o,"_blank")}function ve(){let e=x.get_url_entry("status");return null!=e&&""!=e||(e="historical"),e}return(t,v)=>(Ps(),Ms(Ss,null,[Hs(s_,{id:"navbar",main_title:e.context.navbar.main_title,base_url:e.context.navbar.base_url,help_link:e.context.navbar.help_link,items_table:e.context.navbar.items_table,onClick_item:Y},null,8,["main_title","base_url","help_link","items_table"]),Vs("div",wh,[Vs("div",xh,[Vs("div",kh,[Vs("div",$h,[Vs("div",Sh,[Vs("div",Nh,[Hs(N_,{id:"alert_info",global:!0,ref_key:"alert_info",ref:l},null,512),Hs(vv,{id:"modal_traffic_extraction",ref_key:"modal_traffic_extraction",ref:o},null,512),Hs(im,{ref_key:"modal_snapshot",ref:i,csrf:e.context.csrf},null,8,["csrf"]),L.value?(Ps(),Ls(Kp,{key:0,ref_key:"range_picker",ref:r,id:"range_picker"},{begin:ml((()=>[j.value.length>0?(Ps(),Ms("div",Ch,[wn(Vs("select",{class:"me-2 form-select","onUpdate:modelValue":v[0]||(v[0]=e=>O.value=e),onChange:v[1]||(v[1]=e=>(x.get_url_params(),x.set_key_to_url("query_preset",O.value.value),x.set_key_to_url("count",O.value.count),void x.reload_url()))},[(Ps(!0),Ms(Ss,null,En(j.value,(e=>(Ps(),Ms(Ss,null,[1==e.builtin?(Ps(),Ms("option",{key:0,value:e},te(e.name),9,Ah)):Ys("v-if",!0)],64)))),256)),"analysis"!=ya(S)?(Ps(),Ms("optgroup",{key:0,label:a("queries.queries")},[(Ps(!0),Ms(Ss,null,En(j.value,(e=>(Ps(),Ms(Ss,null,[e.builtin?Ys("v-if",!0):(Ps(),Ms("option",{key:0,value:e},te(e.name),9,Th))],64)))),256))],8,Eh)):Ys("v-if",!0)],544),[[Ri,O.value]])])):Ys("v-if",!0)])),extra_range_buttons:ml((()=>[e.context.show_permalink?(Ps(),Ms("button",{key:0,class:"btn btn-link btn-sm",onClick:Z,title:a("graphs.get_permanent_link"),ref_key:"permanent_link_button",ref:c},Uh,8,Ph)):Ys("v-if",!0),e.context.show_download?(Ps(),Ms("a",{key:1,class:"btn btn-link btn-sm",id:"dt-btn-download",title:a("graphs.download_records"),href:ya(F)},Oh,8,Ih)):Ys("v-if",!0),e.context.show_pcap_download?(Ps(),Ms("button",{key:2,class:"btn btn-link btn-sm",onClick:X,title:a("traffic_recording.pcap_download")},Mh,8,jh)):Ys("v-if",!0),e.context.is_ntop_enterprise_m?(Ps(),Ms("button",{key:3,class:"btn btn-link btn-sm",onClick:Q,title:a("datatable.manage_snapshots")},Fh,8,Lh)):Ys("v-if",!0)])),_:1},512)):Ys("v-if",!0)])])])])]),Vs("div",Rh,[Vs("div",Dh,[Vs("div",zh,[e.context.show_chart?(Ps(),Ms("div",qh,[Vs("div",Bh,[Vs("div",Vh,[Hs(A_,{ref_key:"chart",ref:n,id:"chart_alert_stats",chart_type:ya(T),base_url_request:ya(E),register_on_status_change:!1},null,8,["chart_type","base_url_request"])])]),Hh,Hs(rv,{ref_key:"table_alerts",ref:s,table_config_id:C.value,table_id:A.value,csrf:e.context.csrf,f_map_columns:G,get_extra_params_obj:J,display_message:m.value,message_to_display:g.value,onLoaded:H,onCustom_event:ne,onRows_loaded:le},{custom_header:ml((()=>[(Ps(!0),Ms(Ss,null,En(P.value,((e,t)=>(Ps(),Ls(Dd,{f_on_open:V(e,t),ref_for:!0,ref:e=>{U.value[t]=e}},{title:ml((()=>[Hs(cv,{show:e.show_spinner,size:"1rem",class:"me-1"},null,8,["show"]),Vs("a",{class:"ntopng-truncate",title:e.title},te(e.label),9,Gh)])),menu:ml((()=>[(Ps(!0),Ms(Ss,null,En(e.options,(e=>(Ps(),Ms("a",{style:{cursor:"pointer",display:"block"},onClick:t=>function(e,t){t.stopPropagation(),K({id:e.key,value:e.value,operator:e.operator})}(e,t),class:"ntopng-truncate tag-filter",title:e.value},te(e.label),9,Wh)))),256))])),_:2},1032,["f_on_open"])))),256)),Ys(" Dropdown columns ")])),_:1},8,["table_config_id","table_id","csrf","display_message","message_to_display"])])):Ys("v-if",!0)]),Ys(" card body "),wn(Vs("div",Kh,[e.context.show_acknowledge_all?(Ps(),Ms("button",{key:0,onClick:oe,class:"btn btn-primary me-1"},[Jh,Ks(" "+te(a("acknowledge_alerts")),1)])):Ys("v-if",!0),e.context.show_delete_all?(Ps(),Ms("button",{key:1,onClick:ie,class:"btn btn-danger"},[Yh,Ks(" "+te(a("delete_alerts")),1)])):Ys("v-if",!0)],512),[[Yi,"all"!=ya(S)]]),Ys(" card footer ")]),Ys(" card-shadow ")]),Ys(" div col "),Hs(fv,{note_list:I.value},null,8,["note_list"])]),Ys(" div row "),Hs(Hm,{ref_key:"modal_acknowledge",ref:d,context:e.context,page:ya(S),onAcknowledge:ae},null,8,["context","page"]),Hs(Gm,{ref_key:"modal_delete",ref:_,context:e.context,page:ya(S),onDelete_alert:ae},null,8,["context","page"]),Hs(lh,{ref_key:"modal_acknowledge_alerts",ref:p,context:e.context,page:ya(S),onAcknowledge_alerts:ae},null,8,["context","page"]),Hs(yh,{ref_key:"modal_delete_alerts",ref:f,context:e.context,page:ya(S),onDelete_alerts:ae},null,8,["context","page"]),Hs(Dm,{alert:w.value,page:ya(S),onExclude:ee,ref_key:"modal_alerts_filter",ref:u},null,8,["alert","page"])],64))},__file:"http_src/vue/page-alert-stats.vue"};const Xh={class:"row"},Qh={class:"col-12"},eg={class:"mb-2"},tg={class:"w-100"},ag={clas:"range-container d-flex flex-wrap"},lg={class:"range-picker d-flex m-auto flex-wrap"},ng={class:"ms-1 me-2"},sg=["value"],og=["label"],ig=["value"],rg=["title"],cg=[Vs("i",{class:"fas fa-lg fa-link"},null,-1)],ug=["title","href"],dg=[Vs("i",{class:"fas fa-lg fa-file"},null,-1)],_g=["title"],pg=[Vs("i",{class:"fas fa-lg fa-download"},null,-1)],fg=["title"],vg=[Vs("i",{class:"fas fa-lg fa-camera-retro"},null,-1)],mg={class:"col-12"},hg={class:"card card-shadow"},gg={class:"card-body"},bg={class:"row"},yg={key:0,class:"col-12 mb-2",id:"chart-vue"},wg=["title"],xg=["onClick","title"],kg={key:0,class:"card-footer"},$g={key:0,id:"dt-btn-acknowledge",disabled:!0,"data-bs-target":"#dt-acknowledge-modal","data-bs-toggle":"modal",class:"btn btn-primary me-1"},Sg=Vs("i",{class:"fas fa fa-user-check"},null,-1),Ng={key:1,id:"dt-btn-delete",disabled:!0,"data-bs-target":"#dt-delete-modal","data-bs-toggle":"modal",class:"btn btn-danger"},Cg=Vs("i",{class:"fas fa fa-trash"},null,-1);var Ag={__name:"page-flow-historical",props:{context:Object},setup(e){const t=e,l=e=>i18n(e),n="page-flow-historical",s=va(null),o=va(null),i=va(null),r=va(null),c=va(null),u=va(null),d=va(null),_=va(null),p=va(null),f=va(null),m=va(null),g=t.context.ifid,w=va(""),k=va(""),S=xo((()=>{if(null==I.value?.value)return k.value;return`${k.value}_${I.value.value}`})),C=xo((()=>{if(q.value<0)throw"never run";const e=t.context.download.endpoint;let a=x.get_url_object(),l=i.value.get_columns_defs().filter((e=>e.visible)).map((e=>e.id)).join(",");a.format="txt",a.visible_columns=l;const n=x.obj_to_url_params(a);return`${location.origin}/${e}?${n}`}));let A=`${http_prefix}/lua/pro/rest/v2/get/db/ts.lua`;const E=xo((()=>"topk-timeseries"==t.context?.chart_type?"height:450px!important":"height:300px!important")),T=xo((()=>"topk-timeseries"==t.context?.chart_type?M.typeChart.TS_STACKED:M.typeChart.TS_COLUMN)),P=va([]),U=va([]),I=va({}),O=va([]);va([]);const j=va(!1),L=va(!1),F=va(l("datatable.aggregated")),D=va(null),z=va(!1),q=va(0);function B(e){let t=e?.chart;return null!=t&&t.length>0?t[0]:{}}dn((async()=>{!function(){w.value=x.get_url_entry("page"),null==w.value&&(w.value="overview");A=`${http_prefix}/lua/pro/rest/v2/get/db/ts.lua`,I.value={value:x.get_url_entry("query_preset")},null==I.value.value&&(I.value.value="");k.value="flow_historical";"true"==x.get_url_entry("aggregated")&&(k.value="flow_historical_aggregated",L.value=!0,D.value="hour",z.value=!0)}(),function(){null==x.get_url_entry("ifid")&&x.set_key_to_url("ifid",g);if(0==L.value)b.check_and_set_default_time_interval();else{const e=e=>{let t=b.get_timeframe_from_timeframe_id(D.value);return e.epoch_end-e.epoch_begin<t},t=b.check_and_set_default_time_interval(D.value,e);null!=t&&(t.epoch_begin=b.round_time_by_timeframe_id(t.epoch_begin,D.value),t.epoch_end=b.round_time_by_timeframe_id(t.epoch_end,D.value),x.set_key_to_url("epoch_begin",t.epoch_begin),x.set_key_to_url("epoch_end",t.epoch_end))}"flow"==x.get_url_entry("page")&&"engaged"==x.get_url_entry("status")&&x.set_key_to_url("status","historical");null==x.get_url_entry("aggregated")&&x.set_key_to_url("aggregated","false")}(),await async function(){let e=`${http_prefix}/lua/pro/rest/v2/get/db/preset/consts.lua?page=${w.value}&aggregated=${L.value}`,t=await b.http_request(e);O.value=t[0].list.map((e=>{let t=B(e);return{value:e.id,name:e.name,count:t?.params?.count,chart_config:t,builtin:!0}})),t.length>1&&t[1].list.forEach((e=>{let t=B(e),a={value:e.id,name:e.name,count:t?.params?.count,chart_config:t,is_preset:!0};O.value.push(a)}));if(null==I.value||""==I.value.value)I.value=O.value[0];else{let e=O.value.find((e=>e.value==I.value.value));I.value=e||O.value[0]}x.set_key_to_url("query_preset",I.value.value),x.set_key_to_url("count",I.value.count),h.ready(fe())}(),j.value=!0})),_n((async()=>{!async function(){await h.on_ready("range_picker"),t.context.show_chart&&o.value.register_status();y.on_status_change(w.value,(e=>{x.get_url_params(),i.value.refresh_table(),W(),q.value+=1}),!1)}(),W()}));const H=async e=>{await h.on_ready(fe());let t=I.value.chart_config?.unit_measure;return null==t&&(t="number"),e.yaxis.labels.formatter=v.getFormatter(t),e};function G(){0==L.value?x.delete_params(["aggregated"]):x.set_key_to_url("aggregated","true"),x.reload_url()}async function W(e){1==t.context.show_cards&&(P.value=await K("overview"))}async function K(e,t){const a=x.get_url_params(),l=`${http_prefix}/lua/pro/rest/v2/get/flow/top.lua?${a}&action=${e}`;return(await b.http_request(l)).map((t=>({id:t.action||t.name,label:t.label,title:t.tooltip,show_spinner:!1,data_loaded:"overview"!=e,options:t.value})))}const J=(e,t)=>a=>{!async function(e,t){if(e.show_spinner=!0,await Ja(),0==e.data_loaded){let a=await K(e.id);e.options=a.find((t=>t.id==e.id)).options,await Ja(),U.value[t].load_menu()}e.show_spinner=!1}(e,t)};function Y(){$(`#${S.value}`).on("click","a.tag-filter",(async function(e){X(e,$(this))}))}const Z=async e=>{await h.on_ready(fe());const l=(e,t,a)=>void 0!==t&&0!=t.value?`<a class='tag-filter' data-tag-key='${e}' data-tag-value='${t.value}' title='${t.title}' href='javascript:void(0)'>${t.label}</a>`:"",n=(e,t,l)=>null==t||0==t?"":`<a class='tag-filter' data-tag-key='${e}' data-tag-value='${t}' href='javascript:void(0)'>${a.msecToTime(t)}</a>`,s=(e,t,a)=>null==t||0==t?"":`<a class='tag-filter' data-tag-key='${e}' data-tag-value='${t.value}' href='javascript:void(0)'>${t.title}</a>`;let o={first_seen:(e,t)=>{if(void 0!==e)return e.time},DURATION:(e,t)=>a.secondsToTime(e),THROUGHPUT:(e,t)=>v.getFormatter("bps_no_scale")(e),l7proto:(e,t)=>{let a="";if(void 0!==e.confidence){const t=e.confidence;a="DPI"==t?`<span class="badge bg-success" title="${t}">${t}</span>`:`<span class="badge bg-warning" title="${t}">${t}</span>`}return R.filterize("l7proto",e.value,e.label)+" "+`${a}`},asn:(e,t)=>l("asn",e),cli_asn:(e,t)=>l("cli_asn",e),srv_asn:(e,t)=>l("srv_asn",e),flow_risk:(e,t)=>{if(null==e)return"";let a=[];for(let t=0;t<e.length;t++){const l=e[t],n=l.label||l.value,s=l.help;a.push(`${n} ${s}`)}return a.join(", ")},cli_nw_latency:(e,t)=>n("cli_nw_latency",e),srv_nw_latency:(e,t)=>n("srv_nw_latency",e),major_connection_state:(e,t)=>s("major_connection_state",e),minor_connection_state:(e,t)=>s("minor_connection_state",e),info:(e,t)=>null==e?"":`<a class='tag-filter' data-tag-key='info' data-tag-value='${e.title}' title='${e.title}' href='javascript:void(0)'>${e.label}</a>`};return e=e.filter((e=>0!=t.context?.visible_columns[e.data_field])),I.value.is_preset&&e.length>0&&(e=[e[0]].concat(t.context.columns_def)),e.forEach((e=>{if(e.render_func=o[e.data_field],"actions"==e.id){const a={info:t.context.actions.show_info,historical_data:t.context.actions.show_historical,flow_alerts:t.context.actions.show_alerts,pcap_download:t.context.actions.show_pcap_download,row_data:t.context.is_enterprise_xl&&L.value};e.button_def_array.forEach((e=>{null!=a[e.id]&&0==a[e.id]&&e.class.push("link-disabled")}))}})),e},X=(e,t)=>{let a,l;e.stopPropagation();let n="eq";null!=t.data("tagKey")&&(a=t.data("tagKey")),null!=t.data("tagRealvalue")?l=t.data("tagRealvalue"):null!=t.data("tagValue")&&(l=t.data("tagValue")),null!=t.data("tagOperator")&&(n=t.data("tagOperator")),Q({id:a,value:l,operator:n})};function Q(e){u.value.is_filter_defined(e)?ntopng_events_manager.emit_custom_event(N.SHOW_MODAL_FILTERS,e):(x.set_key_to_url("query_preset",""),x.set_key_to_url(e.id,`${e.value};${e.operator}`),x.reload_url())}const ee=()=>x.get_url_object();function ae(e){x.set_key_to_url("page",e.page_name),x.reload_url()}function le(){const e=$(d.value),t=document.createElement("input");t.value=location.href,document.body.appendChild(t),t.select(),document.execCommand("copy"),document.body.removeChild(t),e.attr("title",`${l("copied")}!`).tooltip("dispose").tooltip().tooltip("show")}function ne(){r.value.show()}function se(){c.value.show()}async function oe(e){e.csrf=t.context.csrf;let a=`${http_prefix}/lua/pro/rest/v2/add/alert/exclusion.lua`;try{let t={"Content-Type":"application/json"};await b.http_request(a,{method:"post",headers:t,body:JSON.stringify(e)});x.get_url_params();setTimeout((()=>{ntopng_events_manager.emit_custom_event(N.SHOW_GLOBAL_ALERT_INFO,{text_html:l("check_exclusion.disable_warn"),type:"alert-info",timeout:2})}),1e3)}catch(e){console.error(e)}}function ie(e){let t=i.value,a=o.value;setTimeout((()=>{e||t.refresh_table(),a.update_chart()}),1e3)}function re(e){let t={click_button_info:ce,click_button_flow_alerts:_e,click_button_historical_flows:de,click_button_pcap_download:ue,click_button_flows:pe};null!=t[e.event_id]&&t[e.event_id](e)}function ce(e){const t=e.row,a=`${http_prefix}/lua/pro/db_flow_details.lua?row_id=${t.rowid}&tstamp=${t.tstamp}&instance_name=${t.NTOPNG_INSTANCE_NAME}`;window.open(a,"_blank")}function ue(e){const t=e.row,a={epoch_begin:t?.filter?.epoch_begin,epoch_end:t?.filter?.epoch_end};r.value.show(t?.filter?.bpf,a)}function de(e){const t=e.row;let a={};for(let e in t){let l=e;if(null!=t[e].tag_key&&""!=t[e].tag_key&&(l=t[e].tag_key),null==t[e].value&&""!=t[e].value)continue;let n=`${t[e].value};eq`;a[l]=n}x.set_key_to_url("query_preset",""),x.add_obj_to_url(a),x.reload_url()}function _e(e){const t=e.row;t.alerts_url&&x.go_to_url(t.alerts_url)}function pe(e){const t=e.row,a=t.filter.epoch_begin,l=t.filter.epoch_end,n=t.flow.cli_ip.value,s=t.flow.srv_ip.value,o=t.flow.srv_port,i=t.probe_ip.value,r=t.NTOPNG_INSTANCE_NAME,c=t.vlan_id.value;let u=0!=c;const d=t.output_snmp.value;let _=0!=d;const p=t.input_snmp.value;let f=`${http_prefix}/lua/pro/db_search.lua?aggregated=false&epoch_begin=${a}&epoch_end=${l}&cli_ip=${n};eq&srv_ip=${s};eq&srv_port=${o};eq&probe_ip=${i};eq&instance_name=${r}`;u&&(f+=`&vlan_id=${c};eq`),0!=p&&(f+=`&input_snmp=${p};eq`),_&&(f+=`&output_snmp=${d};eq`),x.go_to_url(f)}function fe(){return`${n}_query_presets`}return(a,n)=>(Ps(),Ms(Ss,null,[Hs(s_,{id:"navbar",main_title:e.context.navbar.main_title,base_url:e.context.navbar.base_url,help_link:e.context.navbar.help_link,items_table:e.context.navbar.items_table,onClick_item:ae},null,8,["main_title","base_url","help_link","items_table"]),Vs("div",Xh,[Vs("div",Qh,[Vs("div",eg,[Vs("div",tg,[Vs("div",ag,[Vs("div",lg,[Hs(N_,{id:"alert_info",global:!0,ref_key:"alert_info",ref:s},null,512),j.value?(Ps(),Ls(Kp,{key:0,ref_key:"range_picker",ref:u,id:"range_picker",min_time_interval_id:D.value,round_time:z.value},{begin:ml((()=>[t.context.is_enterprise_xl?(Ps(),Ls(Sf,{key:0,value:L.value,"onUpdate:value":n[0]||(n[0]=e=>L.value=e),class:"me-2 mt-1",change_label_side:!0,label:F.value,style:{},onChange_value:G},null,8,["value","label"])):Ys("v-if",!0),Vs("div",ng,[wn(Vs("select",{class:"me-2 form-select",style:{"min-width":"8rem"},"onUpdate:modelValue":n[1]||(n[1]=e=>I.value=e),onChange:n[2]||(n[2]=e=>(x.get_url_params(),x.set_key_to_url("query_preset",I.value.value),x.set_key_to_url("count",I.value.count),void x.reload_url()))},[(Ps(!0),Ms(Ss,null,En(O.value,(e=>(Ps(),Ms(Ss,null,[1==e.builtin?(Ps(),Ms("option",{key:0,value:e},te(e.name),9,sg)):Ys("v-if",!0)],64)))),256)),"analysis"!=w.value?(Ps(),Ms("optgroup",{key:0,label:l("queries.queries")},[(Ps(!0),Ms(Ss,null,En(O.value,(e=>(Ps(),Ms(Ss,null,[e.builtin?Ys("v-if",!0):(Ps(),Ms("option",{key:0,value:e},te(e.name),9,ig))],64)))),256))],8,og)):Ys("v-if",!0)],544),[[Ri,I.value]])])])),extra_range_buttons:ml((()=>[e.context.show_permalink?(Ps(),Ms("button",{key:0,class:"btn btn-link btn-sm",onClick:le,title:l("graphs.get_permanent_link"),ref_key:"permanent_link_button",ref:d},cg,8,rg)):Ys("v-if",!0),e.context.show_download?(Ps(),Ms("a",{key:1,class:"btn btn-link btn-sm",title:l("graphs.download_records"),href:ya(C)},dg,8,ug)):Ys("v-if",!0),e.context.show_pcap_download?(Ps(),Ms("button",{key:2,class:"btn btn-link btn-sm",onClick:ne,title:l("traffic_recording.pcap_download")},pg,8,_g)):Ys("v-if",!0),e.context.is_ntop_enterprise_m?(Ps(),Ms("button",{key:3,class:"btn btn-link btn-sm",onClick:se,title:l("datatable.manage_snapshots")},vg,8,fg)):Ys("v-if",!0)])),_:1},8,["min_time_interval_id","round_time"])):Ys("v-if",!0)])])])])]),Vs("div",mg,[Vs("div",hg,[Vs("div",gg,[Vs("div",bg,[e.context.show_chart?(Ps(),Ms("div",yg,[Vs("div",{class:"card overflow-hidden",style:V(ya(E))},[Ys(' <div class="card h-300 overflow-hidden"> '),Hs(A_,{ref_key:"chart",ref:o,id:"chart_0",chart_type:ya(T),base_url_request:ya(A),map_chart_options:H,register_on_status_change:!1,min_time_interval_id:D.value,round_time:z.value},null,8,["chart_type","base_url_request","min_time_interval_id","round_time"])],4)])):Ys("v-if",!0),Hs(rv,{ref_key:"table_flows",ref:i,table_id:ya(S),table_config_id:k.value,csrf:e.context.csrf,f_map_columns:Z,get_extra_params_obj:ee,onLoaded:Y,onCustom_event:re},{custom_header:ml((()=>[(Ps(!0),Ms(Ss,null,En(P.value,((e,t)=>(Ps(),Ls(Dd,{f_on_open:J(e,t),ref_for:!0,ref:e=>{U.value[t]=e}},{title:ml((()=>[Hs(cv,{show:e.show_spinner,size:"1rem",class:"me-1"},null,8,["show"]),Vs("a",{class:"ntopng-truncate",title:e.title},te(e.label),9,wg)])),menu:ml((()=>[(Ps(!0),Ms(Ss,null,En(e.options,(e=>(Ps(),Ms("a",{style:{cursor:"pointer",display:"block"},onClick:t=>function(e,t){t.stopPropagation(),Q({id:e.key,value:e.value,operator:e.operator})}(e,t),class:"ntopng-truncate tag-filter",title:e.value},te(e.label),9,xg)))),256))])),_:2},1032,["f_on_open"])))),256)),Ys(" Dropdown columns ")])),_:1},8,["table_id","table_config_id","csrf"])])]),Ys(" card body "),t.context.show_acknowledge_all||t.context.show_delete_all?(Ps(),Ms("div",kg,[t.context.show_acknowledge_all?(Ps(),Ms("button",$g,[Sg,Ks(" Acknowledge Alerts ")])):Ys("v-if",!0),t.context.show_delete_all?(Ps(),Ms("button",Ng,[Cg,Ks(" Delete Alerts ")])):Ys("v-if",!0)])):Ys("v-if",!0),Ys(" card footer ")]),Ys(" card-shadow ")]),Ys(" div col ")]),Ys(" div row "),Hs(vv,{id:"modal_traffic_extraction",ref_key:"modal_traffic_extraction",ref:r},null,512),Hs(im,{ref_key:"modal_snapshot",ref:c,csrf:e.context.csrf},null,8,["csrf"]),Hs(Hm,{ref_key:"modal_acknowledge",ref:p,context:e.context,onAcknowledge:ie},null,8,["context"]),Hs(Gm,{ref_key:"modal_delete",ref:f,context:e.context,onDelete_alert:ie},null,8,["context"]),Hs(Dm,{alert:m.value,page:w.value,onExclude:oe,ref_key:"modal_alerts_filter",ref:_},null,8,["alert","page"])],64))},__file:"http_src/vue/page-flow-historical.vue"},Eg={components:{},props:{id:String,chart_type:String,register_on_status_change:Boolean,base_url_request:String,get_params_url_request:Function,get_custom_chart_options:Function,disable_pointer_events:Boolean},emits:["apply","hidden","showed","chart_reloaded","zoom"],created(){},beforeUnmount(){},data:()=>({chart:null,chart_options:null,from_zoom:!1,timeseries_visibility:null,timeseries_list:[]}),async mounted(){await this.init(),ntopng_sync.ready(this.$props.id)},methods:{init:async function(){let e=ntopng_status_manager.get_status(),t=this.get_url_request(e);this.register_on_status_change&&this.register_status(e),await this.draw_chart(t)},get_image:function(e){return Dygraph.Export.asPNG(this.chart,e,this.$refs.chart)},change_visibility:function(e,t){null!=this.timeseries_list[t]&&(this.timeseries_list[t].checked=e,this.chart.setVisibility(t,e))},register_status:function(e){let t=this.get_url_request(e);ntopng_status_manager.on_status_change(this.id,(e=>{1==this.from_zoom&&(this.from_zoom=!1);let a=this.get_url_request(e);a!=t?(t=a,this.update_chart(a)):t=a}),!1)},get_url_request:function(e){let t;return null!=this.$props.get_params_url_request?(null==e&&(e=ntopng_status_manager.get_status()),t=this.$props.get_params_url_request(e)):t=ntopng_url_manager.get_url_params(),`${this.$props.base_url_request||""}?${t}`},get_chart_options:async function(e){let t=null;const a=await ntopng_utility.get_date_format(!1,this.$props.csrf,http_prefix);return t=null==this.$props.get_custom_chart_options?await ntopng_utility.http_request(e):await this.$props.get_custom_chart_options(e),t?.axes?.x?.axisLabelFormatter||(t.axes.x.axisLabelFormatter=function(e){return ntopng_utility.from_utc_to_server_date_format(e,a)}),t?.axes.x?.valueFormatter||(t.axes.x.valueFormatter=function(e){return ntopng_utility.from_utc_to_server_date_format(e,a)}),this.$emit("chart_reloaded",t),t},draw_chart:async function(e){let t=await this.get_chart_options(e);const a=t.data||[];t.data=null,t.zoomCallback=this.on_zoomed,this.timeseries_list=[];let l=0;if(!t.disableTsList)for(const e in t.series)this.timeseries_list.push({name:e,checked:!0,id:l,color:t.colors[l]+"!important"}),l+=1;this.chart=new Dygraph(this.$refs.chart,a,t)},update_chart:async function(e){if(this.chart){let t=await this.get_chart_options(e);this.chart.updateChart(t)}},update_chart_options:function(e){this.chart&&this.chart.updateChart(e)},update_chart_series:function(e){null!=e&&this.chart&&this.chart.updateOptions({file:e})},on_zoomed:function(e,t){this.from_zoom=!0;const a=moment(e),l=moment(t);let n={epoch_begin:Number.parseInt(a.unix()),epoch_end:Number.parseInt(l.unix())};ntopng_events_manager.emit_event(ntopng_events.EPOCH_CHANGE,n,this.id),this.$emit("zoom",n)}}};const Tg={style:{width:"100% height:380px"},class:"text-end mb-2"},Pg={class:"form-check-label form-control-sm"},Ug=["onClick","checked"],Ig={key:0,class:"mb-3",style:{width:"100%","pointer-events":"none"},ref:"chart"},Og={key:1,class:"mb-3",style:{width:"100%"},ref:"chart"};np("\n.dygraph-legend {\n\tcolor: #111111;\n\tbackground-color: #FFFFFF !important;\n\tborder-color: #a7a6a6;\n\tborder-style: solid;\n\tborder-width: thin;\n\tz-index: 80 !important;\n\tbox-shadow: 0 0.5rem 1rem rgba(0, 0, 0, .15);\n\tborder-radius: 0.375rem;\n\tposition: fixed;\n\twidth: auto;\n\tword-wrap: break-word;\n\tpadding: 8px !important;\n}\n.dygraph-legend>span {\n\tcolor: #111111;\n\tpadding-left: 5px;\n\tpadding-right: 2px;\n\tmargin-left: -5px;\n\tbackground-color: #FFFFFF !important;\n}\n.dygraph-legend>span:first-child {\n\tmargin-top: 2px;\n}\n"),Eg.render=function(e,t,a,l,n,s){return Ps(),Ms(Ss,null,[Vs("div",Tg,[(Ps(!0),Ms(Ss,null,En(n.timeseries_list,((e,t)=>(Ps(),Ms("label",Pg,[Vs("input",{type:"checkbox",class:"form-check-input align-middle mt-0",onClick:a=>s.change_visibility(!e.checked,t),checked:e.checked,style:V([{"border-color":"#0d6efd"},{backgroundColor:e.color}])},null,12,Ug),Ks(" "+te(e.name),1)])))),256))]),1==a.disable_pointer_events?(Ps(),Ms("div",Ig,null,512)):(Ps(),Ms("div",Og,null,512))],64)},Eg.__file="http_src/vue/timeseries-chart.vue";const jg=e=>(pl("data-v-185590b6"),e=e(),fl(),e),Mg={class:"form-group ms-2 me-2 mt-3 row"},Lg={class:"col-11"},Fg={class:"col-form-label"},Rg=[jg((()=>Vs("button",{type:"button",class:"btn border"},[Vs("span",null,[Vs("i",{class:"fas fa-trash"})])],-1)))],Dg={class:"container"},zg={class:"row custom-ms me-2 mt-1"},qg={class:"col-5"},Bg=["onUpdate:modelValue"],Vg={class:"custom-control-label ms-1 form-check-label"},Hg={class:"col-2"},Gg=["onUpdate:modelValue"],Wg=jg((()=>Vs("label",{class:"custom-control-label ms-1 form-check-label"},"Past ",-1))),Kg={class:"col-2"},Jg=["onUpdate:modelValue"],Yg=jg((()=>Vs("label",{class:"custom-control-label ms-1 form-check-label"},"Avg ",-1))),Zg={class:"col-3"},Xg=["onUpdate:modelValue"],Qg=jg((()=>Vs("label",{class:"custom-control-label ms-1 form-check-label"},"95th Perc ",-1)));var eb={__name:"list-timeseries",props:{id:String,timeseries:Array,title:String,show_delete_button:Boolean},emits:["delete_ts","update:timeseries"],setup(e,{emit:t}){const a=e;function l(){t("update:timeseries",a.timeseries)}function n(){t("delete_ts",a.id)}return(t,a)=>(Ps(),Ms("div",null,[Vs("div",Mg,[Vs("div",Lg,[Vs("label",Fg,[Vs("b",null,te(e.title),1)])]),e.show_delete_button?(Ps(),Ms("div",{key:0,class:"col-1",onClick:n},Rg)):Ys("v-if",!0)]),Vs("div",Dg,[(Ps(!0),Ms(Ss,null,En(e.timeseries,(e=>(Ps(),Ms("div",zg,[Vs("div",qg,[wn(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:l,"onUpdate:modelValue":t=>e.raw=t},null,40,Bg),[[Mi,e.raw]]),Vs("label",Vg,te(e.label),1)]),Vs("div",Hg,[wn(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:l,"onUpdate:modelValue":t=>e.past=t},null,40,Gg),[[Mi,e.past]]),Wg]),Vs("div",Kg,[wn(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:l,"onUpdate:modelValue":t=>e.avg=t},null,40,Jg),[[Mi,e.avg]]),Yg]),Vs("div",Zg,[wn(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:l,"onUpdate:modelValue":t=>e.perc_95=t},null,40,Xg),[[Mi,e.perc_95]]),Qg])])))),256))])]))}};np("\n.custom-ms[data-v-185590b6] {\n  margin-left: 2rem !important;\n}\n.inline-block[data-v-185590b6] {\n    display: inline-block;\n    margin-right: 1rem;\n}\n.border[data-v-185590b6] {\n    border-style: solid !important;\n}\n"),eb.__scopeId="data-v-185590b6",eb.__file="http_src/vue/list-timeseries.vue";const tb=v.getFormatter(v.types.bytes.id),ab="page-stats-action-link",lb="page-stats-action-jump-historical",nb={table_value:"interface",title:i18n("page_stats.top.top_applications"),view:"top_protocols",default_sorting_columns:1,default:!0,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("application"),name:"application",data:"protocol",handlerId:ab,render:function(e,t,a){let l=this,n={handlerId:ab,onClick:function(){let e=`top:${a.ts_schema}`;l.add_metric_from_metric_schema(e,a.ts_query)}};return F.createLinkCallback({text:e.label,handler:n})}},{columnName:i18n("traffic"),name:"traffic",className:"text-end",data:"traffic",orderable:!0,render:e=>a.bytesToSize(e)},{columnName:i18n("percentage"),name:"traffic_perc",className:"text-center",data:"percentage",orderable:!1,render:e=>{const t=e.toFixed(1);return a.createProgressBar(t)}},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:lb,render_if:function(e){return e.is_history_enabled},render:function(e,t,a){let l=this;const n={handlerId:lb,onClick:function(){let e=x.serialize_param("l7proto",`${a.protocol.id};eq`),t=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}&${e}`,n=l.source_type,s=l.source_array,o="",i=n.source_def_array.map(((e,t)=>{let a=s[t];return"ifid"==e.value?x.serialize_param("ifid",a.value):"host"==e.value?x.serialize_param("ip",`${a.value};eq`):void 0}));o=i.join("&"),t=`${t}&${o}`,window.open(t)}};return F.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:n}])}}]},sb={table_value:"interface",title:i18n("page_stats.top.top_categories"),view:"top_categories",default_sorting_columns:2,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("category"),name:"category",data:"category",handlerId:ab,render:function(e,t,a){let l=this,n={handlerId:ab,onClick:function(){let e=`top:${a.ts_schema}`;l.add_metric_from_metric_schema(e,a.ts_query)}};return F.createLinkCallback({text:e.label,handler:n})}},{columnName:i18n("traffic"),name:"traffic",className:"text-end",data:"traffic",orderable:!0,render:e=>tb(e)},{columnName:i18n("percentage"),name:"traffic_perc",className:"text-center",data:"percentage",render:e=>{const t=e.toFixed(1);return a.createProgressBar(t)}},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:lb,render_if:function(e){return e.is_history_enabled},render:function(e,t,a){let l=this;const n={handlerId:lb,onClick:function(){let e=x.serialize_param("l7cat",`${a.category.id};eq`),t=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}&${e}`,n=l.source_type,s=l.source_array,o="",i=n.source_def_array.map(((e,t)=>{let a=s[t];return"ifid"==e.value?x.serialize_param("ifid",a.value):"host"==e.value?x.serialize_param("ip",`${a.value};eq`):void 0}));o=i.join("&"),t=`${t}&${o}`,window.open(t)}};return F.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:n}])}}]},ob=[nb,sb,{table_value:"interface",title:i18n("page_stats.top.top_senders"),view:"top_senders",default_sorting_columns:1,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("page_stats.top.host_name"),name:"host_name",data:"host",handlerId:ab,render:function(e,t,a){let l=this,n=e.label,s="",o={handlerId:ab,onClick:async function(){l.add_ts_group_from_source_value_dict("host",a.tags,"host:traffic")}};return l.sources_types_enabled.host&&e.is_local&&(n=F.createLinkCallback({text:e.label,handler:o})),e.is_available&&(s=` <a href="/lua/host_details.lua?host=${e.id}" data-bs-toggle="tooltip" title=""><i class="fas fa-laptop"></i></a>`),`${n}${s}`}},{columnName:i18n("page_stats.top.sent"),name:"sent",className:"text-end",data:"traffic",orderable:!0,render:e=>tb(e)},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:lb,render_if:function(e){return e.is_history_enabled},render:function(e,t,a){let l=this;const n=a.host.id,s=a.host.is_local,o={handlerId:lb,onClick:function(){let e=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}`,t="",n=[];for(let e in a.tags){let t=a.tags[e],l="";"ifid"==e?l=x.serialize_param(e,t):"host"==e&&(l=x.serialize_param("ip",`${t};eq`)),n.push(l)}t=n.join("&"),e=`${e}&${t}`,window.open(e)}},i={handlerId:lb,onClick:function(){const e=x.get_url_entry("ifid"),t=`${http_prefix}/lua/host_details.lua?host=${n}&page=historical&ts_query=ifid:${e},host:${n}&ts_schema=host:details&epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}`;window.open(t)}},r=[{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:o}];return l.sources_types_enabled.host&&s&&r.push({class:"dropdown-item",href:"#",title:i18n("db_explorer.host_data"),handler:i}),F.createActionButtons(r)}}]},{table_value:"interface",title:i18n("page_stats.top.top_receivers"),view:"top_receivers",default_sorting_columns:1,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("page_stats.top.host_name"),name:"host_name",data:"host",handlerId:ab,render:function(e,t,a){let l=this,n=e.label,s="",o={handlerId:ab,onClick:async function(){l.add_ts_group_from_source_value_dict("host",a.tags,"host:traffic")}};return l.sources_types_enabled.host&&e.is_local&&(n=F.createLinkCallback({text:e.label,handler:o})),e.is_available&&(s=` <a href="/lua/host_details.lua?host=${e.id}" data-bs-toggle="tooltip" title=""><i class="fas fa-laptop"></i></a>`),`${n}${s}`}},{columnName:i18n("page_stats.top.received"),name:"received",className:"text-end",data:"traffic",orderable:!0,render:e=>tb(e)},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:lb,render_if:function(e){return e.is_history_enabled},render:function(e,t,a){let l=this;const n=a.host.id,s=a.host.is_local,o={handlerId:lb,onClick:function(){let e=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}`,t="",n=[];for(let e in a.tags){let t=a.tags[e],l="";"ifid"==e?l=x.serialize_param(e,t):"host"==e&&(l=x.serialize_param("ip",`${t};eq`)),n.push(l)}t=n.join("&"),e=`${e}&${t}`,window.open(e)}},i={handlerId:lb,onClick:function(){const e=x.get_url_entry("ifid"),t=`${http_prefix}/lua/host_details.lua?host=${n}&page=historical&ts_query=ifid:${e},host:${n}&ts_schema=host:details&epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}`;window.open(t)}},r=[{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:o}];return l.sources_types_enabled.host&&s&&r.push({class:"dropdown-item",href:"#",title:i18n("db_explorer.host_data"),handler:i}),F.createActionButtons(r)}}]}];let ib=ob.find((e=>"top_protocols"==e.view));null!=ib&&(ib=b.clone(ib),ib.table_value="host");const rb=[ib],cb=v.getFormatter(v.types.bytes.id),ub=v.getFormatter(v.types.bps.id),db="page-stats-action-link",_b={table_value:"snmp",table_source_def_value_dict:{ifid:!0,device:!0,if_index:!1},title:i18n("page_stats.top.top_interfaces"),view:"top_snmp_ifaces",default_sorting_columns:4,columnDefs:[{type:"file-size",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3}],f_get_label:e=>{let t,a=e.source_type.source_def_array;for(let l=0;l<a.length;l+=1)if("device"==a[l].value){t=e.source_array[l].label;break}return`${i18n("page_stats.top.top_interfaces")} - SNMP ${i18n("page_stats.source_def.device")} ${t}`},default:!0,columns:[{columnName:i18n("interface_name"),name:"interface",data:"interface",handlerId:db,render:function(e,t,a){let l=this,n={handlerId:db,onClick:function(){l.add_ts_group_from_source_value_dict("snmp_interface",a.tags,"snmp_if:traffic")}},s=`${e.name}`;return F.createLinkCallback({text:s,handler:n})}},{columnName:i18n("interface_alias"),name:"interface",data:"interface",handlerId:db,render:function(e){return`${e.alias}`}},{columnName:i18n("page_stats.top.sent"),name:"sent",className:"text-end",data:"sent",orderable:!0,render:e=>cb(e)},{columnName:i18n("page_stats.top.received"),name:"received",className:"text-end",data:"rcvd",orderable:!0,render:e=>cb(e)},{columnName:i18n("traffic"),name:"traffic",className:"text-end",data:"total",orderable:!0,render:e=>cb(e)},{columnName:i18n("last_downlink_usage"),name:"traffic_perc",className:"text-center no-wrap",data:"downlink_usage_percentage",render:e=>{const t=e.toFixed(1);return t>100&&(t=100),a.createProgressBar(t)}},{columnName:i18n("last_uplink_usage"),name:"traffic_perc",className:"text-center no-wrap",data:"uplink_usage_percentage",render:e=>{const t=e.toFixed(1);return t>100&&(t=100),a.createProgressBar(t)}},{columnName:i18n("page_stats.top.throughput"),name:"throughput",className:"text-end",data:"throughput",orderable:!0,render:e=>ub(e)}]},pb=[_b],fb=v.getFormatter(v.types.bytes.id),vb=v.getFormatter(v.types.bps.id),mb="page-stats-action-link",hb={table_value:"flowdevice",table_source_def_value_dict:{ifid:!0,device:!0,if_index:!1},title:i18n("page_stats.top.top_interfaces"),view:"top_flowdev_ifaces",default_sorting_columns:4,columnDefs:[{type:"file-size",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3}],f_get_label:e=>{let t,a=e.source_type.source_def_array;for(let l=0;l<a.length;l+=1)if("device"==a[l].value){t=e.source_array[l].label;break}return`${i18n("page_stats.top.top_interfaces")} - Flow Exporter ${t}`},default:!0,columns:[{columnName:i18n("interface_name"),name:"interface",data:"interface",handlerId:mb,render:function(e,t,a){let l=this,n={handlerId:mb,onClick:function(){l.add_ts_group_from_source_value_dict("flow_interface",a.tags,"flowdev_port:traffic")}},s=`${e.label}`;return F.createLinkCallback({text:s,handler:n})}},{columnName:i18n("page_stats.top.sent"),name:"sent",className:"text-end",data:"sent",orderable:!0,render:e=>fb(e)},{columnName:i18n("page_stats.top.received"),name:"received",className:"text-end",data:"rcvd",orderable:!0,render:e=>fb(e)},{columnName:i18n("traffic"),name:"traffic",className:"text-end",data:"total",orderable:!0,render:e=>fb(e)},{columnName:i18n("percentage"),name:"traffic_perc",className:"text-center",data:"percentage",render:e=>{const t=e.toFixed(1);return a.createProgressBar(t)}},{columnName:i18n("page_stats.top.throughput"),name:"throughput",className:"text-end",data:"throughput",orderable:!0,render:e=>vb(e)}]},gb=[hb],bb=async e=>{const t={host:e},a=x.obj_to_url_params(t),l=`${http_prefix}/lua/pro/rest/v2/get/snmp/device/available_interfaces.lua?${a}`;return await b.http_request(l)},yb=async e=>(await bb(e)).map((e=>null!=e.name&&""!=e.name&&e.name!=e.id?{label:`${e.name} (${e.id})`,id:e.id,name:e.name}:{label:e.id,id:e.id,name:e.id})).sort(a.sortAlphabetically),wb={available_interfaces:bb,snmp_device_ports:yb},xb={hide:"hide",select:"select",input:"input",input:"input_confirm"},kb={ifid:e=>{let t=e.ifname;return null!=e.name&&(t=e.name),{label:t,value:e.ifid}},pool:e=>{let t=e.pool_id;return null!=e.name&&(t=e.name),{label:t,value:e.pool_id}},am_host:e=>({label:`${e.label} ${e.measurement}`,value:`${e.host},metric:${e.measurement_key}`}),blacklist:e=>{let t=`${e.column_name}`;return{label:t,value:t}},device:e=>({label:`${e.name}`,value:`${e.ip}`}),if_index:e=>""},$b={interface:ob,host:rb,snmp_interface:pb,snmp_device:pb,flow_device:gb,flow_interface:gb},Sb=[{id:"interface",regex_page_url:"lua/if_stats",label:i18n("page_stats.source_def.interface"),query:"iface",f_map_ts_options:null,source_def_array:[{main_source_def:!0,label:i18n("page_stats.source_def.interface"),regex_type:null,refresh_on_sources_change:!1,sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",sources_function:null,value:"ifid",value_url:null,value_map_sources_res:null,disable_tskey:null,f_get_value_url:null,f_set_value_url:null,ui_type:xb.select}]},{id:"blacklist",regex_page_url:"lua/blacklists_stats",label:i18n("page_stats.source_def.blacklist"),query:"blacklist",f_map_ts_options:(e,t)=>(null==e.series||e.series.forEach((e=>{null!=t.metric.query?e.name=t.metric.label:(e.name=e.name.replaceAll("_"," "),e.type=void 0)})),e),source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"System",value:-1}],value:"ifid",ui_type:xb.hide}]},{id:"vulnerability_scan",regex_page_url:"lua/vulnerability_scan",label:i18n("page_stats.source_def.vuln_scan"),query:"am_vuln_scan",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"System",value:-1}],value:"ifid",ui_type:xb.hide}]},{id:"host",regex_page_url:"lua/host_details",label:i18n("page_stats.source_def.host"),table_value:"host",query:"host",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{main_source_def:!0,label:i18n("page_stats.source_def.host"),regex_type:"ip",value:"host",ui_type:xb.input}]},{id:"mac",regex_page_url:"lua/mac_details",label:i18n("page_stats.source_def.mac"),query:"mac",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{main_source_def:!0,label:i18n("page_stats.source_def.mac"),regex_type:"macAddress",value:"mac",value_url:"host",ui_type:xb.input}]},{id:"network",regex_page_url:"lua/network_details",label:i18n("page_stats.source_def.network"),query:"subnet",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{main_source_def:!0,label:i18n("page_stats.source_def.network"),regex_type:"text",value:"subnet",ui_type:xb.input}]},{id:"as",regex_page_url:"lua/as_details",label:i18n("page_stats.source_def.as"),query:"asn",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{main_source_def:!0,label:i18n("page_stats.source_def.as"),regex_type:"text",value:"asn",ui_type:xb.input}]},{id:"country",regex_page_url:"lua/country_details",label:i18n("page_stats.source_def.country"),query:"country",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{main_source_def:!0,label:i18n("page_stats.source_def.country"),regex_type:"text",value:"country",ui_type:xb.input}]},{id:"os",regex_page_url:"lua/os_details",label:i18n("page_stats.source_def.os"),query:"os",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{main_source_def:!0,label:i18n("page_stats.source_def.os"),regex_type:"text",value:"os",ui_type:xb.input}]},{id:"vlan",regex_page_url:"lua/vlan_details",label:i18n("page_stats.source_def.vlan"),query:"vlan",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{main_source_def:!0,label:i18n("page_stats.source_def.vlan"),regex_type:"text",value:"vlan",ui_type:xb.input}]},{id:"pool",regex_page_url:"lua/pool_details",label:i18n("page_stats.source_def.pool"),query:"host_pool",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{main_source_def:!0,label:i18n("page_stats.source_def.pool"),sources_url:"lua/rest/v2/get/host/pools.lua",value:"pool",ui_type:xb.select}]},{id:"system",regex_page_url:"lua/system_stats",label:i18n("page_stats.source_def.system"),query:"system",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"System",value:-1}],value:"ifid",ui_type:xb.hide}]},{id:"profile",regex_page_url:"lua/profile_details",label:i18n("page_stats.source_def.profile"),query:"profile",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{main_source_def:!0,label:i18n("page_stats.source_def.profile"),regex_type:"text",value:"profile",ui_type:xb.input}]},{id:"redis",regex_page_url:"lua/monitor/redis_monitor.lua",label:i18n("page_stats.source_def.redis"),query:"redis",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"Redis",value:-1}],value:"ifid",ui_type:xb.hide}]},{id:"influx",regex_page_url:"lua/monitor/influxdb_monitor.lua",label:i18n("page_stats.source_def.influx"),query:"influxdb",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"Influx",value:-1}],value:"ifid",ui_type:xb.hide}]},{id:"active_monitoring",regex_page_url:"lua/monitor/active_monitoring_monitor.lua",label:i18n("page_stats.source_def.active_monitoring"),query:"am",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"",value:-1}],value:"ifid",ui_type:xb.hide},{main_source_def:!0,label:i18n("page_stats.source_def.active_monitoring"),sources_url:"lua/rest/v2/get/am_host/list.lua",value:"host",disable_tskey:!0,value_map_sources_res:"am_host",ui_type:xb.select}]},{id:"snmp_interface",id_group:"snmp",regex_page_url:"lua/pro/enterprise/snmp_interface_details",label:i18n("page_stats.source_def.snmp_interface"),query:"snmp_interface",f_map_ts_options:(e,t)=>e,source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"",value:-1}],value:"ifid",ui_type:xb.hide},{label:i18n("page_stats.source_def.device"),regex_type:"ip",sources_url:"lua/pro/rest/v2/get/snmp/device/list.lua",value:"device",value_url:"host",ui_type:xb.select},{main_source_def:!0,label:i18n("page_stats.source_def.snmp_interface"),regex_type:"text",refresh_on_sources_change:!0,sources_function:async e=>{const t=e[1];return(await wb.available_interfaces(t)).map((e=>({label:e.name,value:e.id})))},value:"if_index",value_url:"snmp_port_idx",ui_type:xb.select}]},{id:"snmp_device",id_group:"snmp",regex_page_url:"lua/pro/enterprise/snmp_device_details",label:i18n("page_stats.source_def.snmp_device"),query:"snmp_device",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"",value:-1}],value:"ifid",ui_type:xb.hide},{main_source_def:!0,label:i18n("page_stats.source_def.device"),regex_type:"ip",sources_url:"lua/pro/rest/v2/get/snmp/device/list.lua",value:"device",value_url:"host",ui_type:xb.input}]},{id:"flow_device",regex_page_url:"lua/pro/enterprise/flowdevices_stats",label:i18n("page_stats.source_def.flow_device"),query:"flowdev",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{main_source_def:!0,label:i18n("page_stats.source_def.device"),sources_url:"lua/pro/rest/v2/get/flowdevices/list.lua",regex_type:"ip",value:"device",value_url:"ip",ui_type:xb.input}]},{id:"flow_interface",regex_page_url:"lua/pro/enterprise/flowdevice_interface_details",label:i18n("page_stats.source_def.flow_interface"),query:"flowdev_port",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:xb.input},{main_source_def:!0,label:i18n("page_stats.source_def.port"),regex_type:"port",value:"port",value_url:"snmp_port_idx",ui_type:xb.input}]},{id:"sflow_device",regex_page_url:"lua/pro/enterprise/sflowdevices_stats",label:i18n("page_stats.source_def.sflow_device"),query:"sflowdev",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{main_source_def:!0,label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:xb.input}]},{id:"sflow_interface",regex_page_url:"lua/pro/enterprise/sflowdevice_interface_details",label:i18n("page_stats.source_def.sflow_interface"),query:"sflowdev_port",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:xb.input},{main_source_def:!0,label:i18n("page_stats.source_def.port"),regex_type:"port",value:"port",value_url:"snmp_port_idx",ui_type:xb.input}]},{id:"observation_point",regex_page_url:"lua/pro/enterprise/observation_points",label:i18n("page_stats.source_def.observation_point"),query:"obs_point",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{main_source_def:!0,label:i18n("page_stats.source_def.observation_point"),regex_type:"text",value:"obs_point",value_url:"observation_point",ui_type:xb.input}]},{id:"pod",regex_page_url:"lua/pod_details",label:i18n("page_stats.source_def.pod"),query:"pod",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{main_source_def:!0,label:i18n("page_stats.source_def.pod"),regex_type:"text",value:"pod",ui_type:xb.input}]},{id:"container",regex_page_url:"lua/container_details",label:i18n("page_stats.source_def.container"),query:"container",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{main_source_def:!0,label:i18n("page_stats.source_def.container"),regex_type:"text",value:"container",ui_type:xb.input}]},{id:"nedge",regex_page_url:"lua/pro/nedge/if_stats.lua",label:i18n("page_stats.source_def.nedge"),query:"nedge",source_def_array:[{label:i18n("page_stats.source_def.interface"),regex_type:"text",value:"ifid",value_url:"ifname",ui_type:xb.input}]}],Nb={ui_types:xb,sources_url_el_to_source:kb,sources_types:Sb,sources_types_tables:$b},Cb=e=>{let t=[];e.forEach((e=>{let a=function(e){let t=[];e.timeseries.forEach((e=>{t.push(`${e.id}=${e.raw}:${e.past}:${e.avg}:${e.perc_95}`)}));let a=e.metric.schema;null!=e.metric.query&&(a=`${a}+${e.metric.query}`);let l=t.join("|"),n=e.source_array.map((e=>e.value)).join("+"),s=`${e.source_type.id};${n};${a};${l}`;return s}(e);t.push(a)}));let a=t.join(";;");x.set_key_to_url("timeseries_groups",a)};const Ab=(e,t,a,l)=>{let n={raw:!0,past:!0,avg:!1,perc_95:!1};l&&null!=l.raw&&(n.raw=l.raw),l&&null!=l.past&&(n.past=l.past),l&&null!=l.avg&&(n.avg=l.avg),l&&null!=l.perc_95&&(n.perc_95=l.perc_95);let s=Pb(e,t,a),o=[];for(let e in a.timeseries){let t=a.timeseries[e];n.id=e,n.label=t.label,o.push(n)}return{id:s,source_type:e,source_array:t,metric:a,timeseries:o}},Eb=async(e,t,a)=>{let l=Hb(),n=await jb(e,l),s=await Vb(e,l,n),o=Kb(s,t,a);return[Ab(l,n,o)]};async function Tb(e){let t=e.split(";"),a=t[0],l=t[1].split("+"),n=t[2].split("+");n.length<2&&n.push(null);let s=t[3],o=Ob(a),i=await Lb(http_prefix,o,l),r=await Gb(http_prefix,o,i,n[0],n[1]),c=function(e,t){let a=e.split("|"),l=/(.+)=(.+):(.+):(.+):(.+)/,n=[];return a.forEach((e=>{let a=l.exec(e);if(a.length>0){let e=a[1],l=t.timeseries[e].label,s=JSON.parse(a[2]),o=JSON.parse(a[3]),i=JSON.parse(a[4]),r=JSON.parse(a[5]);n.push({id:e,label:l,raw:s,past:o,avg:i,perc_95:r})}})),n}(s,r);return{id:Pb(o,i,r),source_type:o,source_array:i,metric:r,timeseries:c}}const Pb=(e,t,a,l,n)=>{let s="";null!=a&&(s=a.schema,null!=a.query&&(s=`${s} - ${a.query}`));let o=e.source_def_array,i=t.map(((e,t)=>{let a=o[t].value;return null==l||l[a]?e.value:null})).filter((e=>null!=e)).join("_"),r=e.id;return n&&null!=e.id_group&&(r=e.id_group),`${r} - ${i} - ${s}`};const Ub=Nb.sources_url_el_to_source,Ib=Nb.sources_types,Ob=e=>Ib.find((t=>t.id==e)),jb=async(e,t)=>{let a=zb(t);return await Lb(e,t,a)};async function Mb(e,t,a){let l=t.source_def_array.map((e=>a[e.value]));return await Lb(e,t,l)}const Lb=async(e,t,a)=>{null==t&&(t=Hb());let l,n=[];for(let s=0;s<a.length;s++){let o=a[s],i=t.source_def_array[s];if(i.sources_url||i.sources_function){let n=[];n=await Rb(e,t.id,i,a),l=n.find((e=>e.value==o)),null==l&&(l=n[0])}else l={label:o,value:o};n.push(l)}return n};let Fb={};const Rb=async(e,t,l,n)=>{let s=function(e,t,a){let l=`${e}_${t.value}`;return t.refresh_on_sources_change?(l=`${l}_${a.join("_")}`,l):l}(t,l,n);if(null==Fb[s])if(l.sources_url){let t=`${e}/${l.sources_url}`;Fb[s]=b.http_request(t)}else{if(!l.sources_function)return[];Fb[s]=l.sources_function(n)}let o=await Fb[s];if(l.sources_url){let e=Ub[l.value_map_sources_res];if(null==e&&(e=Ub[l.value]),null==e)throw`:Error: metrics-manager.js, missing sources_url_to_source ${l.value} key`;o=o.map((t=>e(t)))}return o.sort(a.sortAlphabetically)};function Db(e,t){e.source_def_array.forEach((e=>{let a=t[e.value];null!=a&&(null!=e.f_set_value_url?e.f_set_value_url():null!=e.value_url?x.set_key_to_url(e.value_url,a):x.set_key_to_url(e.value,a))}))}const zb=e=>(null==e&&(e=Hb()),e.source_def_array.map((e=>{if(null!=e.f_get_value_url)return e.f_get_value_url();let t=e.value_url;return null==t&&(t=e.value),x.get_url_entry(t)})));let qb={},Bb=null;const Vb=async(e,t,a,l)=>{let n=l?.epoch_begin||x.get_url_entry("epoch_begin"),s=l?.epoch_end||x.get_url_entry("epoch_end"),o=`${n}_${s}`;null==t&&(t=Hb()),null==a&&(a=await jb(e,t));let i=function(e,t,a,l){let n=t.source_def_array.map(((e,t)=>`${e.value}=${a[t].value}`)).join("&"),s="";return null!=l&&(s=`epoch_end=${l.epoch_end}&epoch_begin=${l.epoch_begin}`),`${e}/lua/rest/v2/get/timeseries/type/consts.lua?query=${t.query}&${n}&${s}`}(e,t,a,{epoch_begin:n,epoch_end:s}),r=function(e,t){let a=t.map((e=>e.value)).join("_");return`${e.id}_${a}`}(t,a);o!=Bb&&(qb[r]=null,Bb=o),null==qb[r]&&(qb[r]=b.http_request(i));let c=await qb[r];return null==c||0==c.length?[{}]:(0==c.some((e=>1==e.default_visible))&&(c[0].default_visible=!0),b.clone(c))},Hb=()=>{let e=window.location.pathname;for(let t=0;t<Ib.length;t+=1){if(1==new RegExp(Ib[t].regex_page_url).test(e))return Ib[t]}throw`source_type not found for ${e}`},Gb=async(e,t,a,l,n,s)=>(await Vb(e,t,a,s)).find((e=>e.schema==l&&e.query==n)),Wb=(e,t)=>{null==t&&(t=Hb());let a={};t.source_def_array.forEach((e=>a[e.value]=!0));let l=e.split(",");for(let e=0;e<l.length;e+=1){let t=l[e].split(":")[0];if(null==a[t])return l[e]}return null},Kb=(e,t,a)=>{let l;return null!=t&&(l=e.find((e=>e.schema==t&&(null==a||e.query==a)))),null==l&&(l=e.find((e=>1==e.default_visible))),null!=l?l:e[0]},Jb={set_timeseries_groups_in_url:Cb,get_timeseries_groups_from_url:async(e,t)=>{if(null==t&&(t=x.get_url_entry("timeseries_groups")),null==t||""==t)return null;let a=t.split(";;");return a.map((async e=>await Tb(e))),Promise.all(a.map((async e=>await Tb(e))))},get_default_timeseries_groups:Eb,get_ts_group:Ab,get_ts_group_id:Pb,sources_types:Ib,sources_types_tables:Nb.sources_types_tables,get_source_type_from_id:Ob,get_current_page_source_type:Hb,get_sources:Rb,get_default_source_array:jb,get_source_array_from_value_dict:Mb,get_source_array_from_value_array:Lb,get_default_source_value_array:zb,get_metrics:Vb,get_metric_from_schema:Gb,get_metric_query_from_ts_query:Wb,get_default_metric:Kb,set_source_value_object_in_url:Db,ui_types:Nb.ui_types};Dygraph.Plugins.Legend.prototype.select=function(e){var t=e.selectedX,a=e.selectedPoints,l=e.selectedRow,n=e.dygraph.getOption("legend");if("never"!==n){var s=Dygraph.Plugins.Legend.generateLegendHTML(e.dygraph,t,a,this.one_em_width_,l);if(s instanceof Node&&s.nodeType===Node.DOCUMENT_FRAGMENT_NODE?(this.legend_div_.innerHTML="",this.legend_div_.appendChild(s)):this.legend_div_.innerHTML=s,this.legend_div_.style.display="","follow"===n){var o,i=e.dygraph.plotter_.area,r=this.legend_div_.offsetWidth,c=e.dygraph.getOptionForAxis("axisLabelWidth","y"),u=e.dygraph.getHighlightSeries();u?(o=a.find((e=>e.name===u)),o||(o=a[0])):o=a[0];const t=e.dygraph.getNumericOption("legendFollowOffsetX");var d=(null!=o?.x?o.x:1)*i.w+t;d+r+1>i.w&&(d=d-2*t-r-(c-i.x)),this.legend_div_.style.left=c+d+"px",document.addEventListener("mousemove",(e=>{localStorage.setItem("timeseries-mouse-top-position",e.clientY+50+"px")})),this.legend_div_.style.top=localStorage.getItem("timeseries-mouse-top-position")}else if("onmouseover"===n&&this.is_generated_div_){i=e.dygraph.plotter_.area,r=this.legend_div_.offsetWidth;this.legend_div_.style.left=i.x+i.w-r-1+"px",this.legend_div_.style.top=i.y+"px"}}else this.legend_div_.style.display="none"};const Yb=90,Zb=["rgb(144, 238, 144)","rgb(25, 135, 84)","rgb(255, 193, 7)","rgb(220, 53, 69)"];function Xb(e,t,a){if(!t||!e)return function(e){const t=Dygraph.toRGB_(e);return t.r=Math.floor((255+t.r)/2),t.g=Math.floor((255+t.g)/2),t.b=Math.floor((255+t.b)/2),"rgb("+t.r+","+t.g+","+t.b+", 0.9)"}(a);e>t&&(e=t);const l=t/Zb.length;for(let t=1;t<Zb.length+1;t++)if(e<=l*t)return Zb[t-1]}function Qb(e){const t=e.drawingContext,a=e.points,l=e.dygraph.toDomYCoord(0),n=e.dygraph.user_attrs_.valueRange[1],s=e.color;let o=1/0;for(let e=1;e<a.length;e++){const t=a[e].canvasx-a[e-1].canvasx;t<o&&(o=t)}o>Yb&&(o=Yb);const i=Math.floor(.95*o);for(var r=0;r<a.length;r++){const e=a[r],o=e.canvasx,c=e.yval;t.fillStyle=Xb(Math.abs(c),Math.abs(n),s),t.fillRect(o-i/2,e.canvasy,i,l-e.canvasy),t.strokeRect(o-i/2,e.canvasy,i,l-e.canvasy)}}const ey={barChartPlotter:Qb};function ty(e){let t={};e.forEach(((e,a)=>{null==t[e]?t[e]=[a]:t[e].push(a)}));let a=b.clone(e);for(let e in t){let l=t[e];ay(e,l.length).forEach(((e,t)=>{let n=l[t];a[n]=e}))}return a}function ay(e,t){return[...Array(t).keys()].map(((a,l)=>function(e,t,a){let l=e.replace("#",""),n=parseInt(l.substring(0,2),16),s=parseInt(l.substring(2,4),16),o=parseInt(l.substring(4,6),16),i=ly(n,t,a),r=ly(s,t,a),c=ly(o,t,a);return function(e,t,a){return"#"+ny(e)+ny(t)+ny(a)}(i,r,c)}(e,l+1,t)))}function ly(e,t,a){if(a<=1)return e;let l=Math.trunc(e/2),n=Math.trunc(e+(255-e)/2);return l+t*Math.trunc((n-l)/a)}function ny(e){let t=e.toString(16);return 1==t.length?"0"+t:t}const sy={transformColors:ty};function oy(e){return{axisLabelFormatter:e,valueFormatter:function(t,a,l,n,s,o){const i=n?.rawData_?.[s][o];let r="";return"object"==typeof i?(i.forEach((t=>{r=`${r} / ${e(t||0)}`})),r=r.substring(3)):r=e(t),r},axisLabelWidth:80}}function iy(e){const t=sy.transformColors(e.colors),a=function(){let e="rgb(255, 255, 255)";return document.getElementsByClassName("body dark").length>0&&(e="rgb(13, 17, 23)"),e}(),l={labelsSeparateLines:!0,legend:"follow",connectSeparatedPoints:!0,includeZero:!0,drawPoints:!0,highlightSeriesBackgroundAlpha:.7,highlightSeriesOpts:{strokeWidth:2,pointSize:3,highlightCircleSize:6},axisLabelFontSize:12,axes:{x:{axisLabelWidth:90}}};return l.customBars=e.customBars,l.labels=e.labels,l.series=e.properties,l.data=e.serie,l.stackedGraph=e.stacked,l.valueRange=e.value_range,l.highlightSeriesBackgroundColor=a,l.colors=t,l.disableTsList=e.disable_ts_list,l.yRangePad=e.yRangePad||1,e.plotter&&(l.plotter=e.plotter),function(e,t){t.formatters.length>1?(e.axes.y1=oy(v.getFormatter(t.formatters[0])),e.axes.y2=oy(v.getFormatter(t.formatters[1]))):1==t.formatters.length&&(e.axes.y=oy(v.getFormatter(t.formatters[0])))}(l,e),l}function ry(e){switch(e){case"dash":return{fillGraph:!1,customBars:!1,strokePattern:Dygraph.DASHED_LINE};case"point":return{fillGraph:!1,customBars:!1,strokeWidth:0,pointSize:2};case"bounds":return{fillGraph:!1,strokeWidth:1,pointSize:1.5,fillAlpha:.5};case"line":return{fillGraph:!1,customBars:!1,strokeWidth:1.5,pointSize:1.5};default:return{fillGraph:!0,customBars:!1,strokeWidth:1,pointSize:1.5,fillAlpha:.5}}}const cy={buildChartOptions:iy,formatSerieProperties:ry},uy=["#C6D9FD","#90EE90","#EE8434","#C95D63","#AE8799","#717EC3","#496DDB","#5A7ADE","#6986E1","#7791E4","#839BE6","#8EA4E8"],dy={default_color:"#C6D9FD","95_perc":"#8EA4E8",avg:"#839BE6"};function _y(e){return`${e.id}`}function py(e){let t=e,a=0,l=0,n=uy,s=d3v7.schemeCategory10;t.forEach(((t,o)=>{0==t.palette?(e.find(((e,a)=>e.color===t.color&&a!==o))?e[o]=n[a%n.length]:e[o]=t.color,a+=1):1==t.palette&&(e[o]=s[l%s.length],l+=1)}))}function fy(e,t,a,l){null==e&&(e=t);let n="";if(null!=e&&(n=`${e}`),0==l)return e;let s=0,o=a.source_type.source_def_array;for(let e=0;e<o.length;e+=1){if(1==o[e].main_source_def){s=e;break}}return`${`${a.source_array[s].label}`} - ${n}`}function vy(e){if("bar"===e)return ey.barChartPlotter}function my(e,t,a,l){l.labels.push(e),l.properties[e]={},l.properties[e]=cy.formatSerieProperties(t),l.colors.push(a)}function hy(e,t,a){const l=e.metric.chart_type||"filled",n=t.series||[],s=t.metadata.epoch_begin,o=t.metadata.epoch_step,{serie:i,color:r,formatter:c,serie_name:u,properties:d}=function(e,t){let a={},l=null,n=null,s={},o=[];return e.forEach(((e,i)=>{const r=_y(e),c=e.data||[],u=t.metric.timeseries[r],d=!0===u?.invert_direction?1:-1;"metric"==u.type&&(n=fy(u.label,r,t,!0),s=cy.formatSerieProperties("bounds"),a={color:u.color,palette:0},l=t.metric.measure_unit);for(let e=0;e<c.length;e++){let t=null===c[e]?NaN:c[e];null==o[e]&&(o[e]=[0,NaN,0]),"lower_bound"==u.type?o[e][0]=t*d:"metric"==u.type?o[e][1]=t*d:"upper_bound"==u.type&&(o[e][2]=t*d)}})),{serie:o,color:a,formatter:l,serie_name:n,properties:s}}(n,e);let _=s;const p=`${u} ${i18n("lower_value_upper")}`,f=a.formatters.find((e=>e==c));f||a.formatters.push(c),a.plotter=vy(l),a.customBars=!0,a.colors.push(r),a.labels.push(p),a.properties[p]=d,Object.keys(i).forEach((e=>{a.serie[_]||(a.serie[_]=[{value:new Date(1e3*_),name:"Time"},{value:i[e],name:p}]),_+=o}))}function gy(e,t,a,l){const n=t.series||[],s=e.metric.chart_type||"filled",o=t.metadata.epoch_begin,i=t.metadata.epoch_step,r=e.metric.measure_unit,c=e.metric.max_value||null,u=e.metric.min_value||null,d=t.additional_series;a.value_range=[u,c],a.plotter=vy(s),a.stacked||(a.stacked=e.metric.draw_stacked||!1),n.forEach(((t,n)=>{const c=t.data||[],u=e.timeseries[0],_=_y(t),p=e.metric.timeseries[_],f=!0===p.invert_direction?-1:1,v=function(e,t){let a=1==t.use_serie_name?e.name:t.label;return e.ext_label&&(a=e.ext_label),a}(t,p),m=fy(v,_,e,a.use_full_name),h=fy(v+" Avg",_,e,a.use_full_name),g=fy(v+" 95th Perc",_,e,a.use_full_name),b=fy(v+" "+l+" Ago",_,e,a.use_full_name),y=d?d[`${l}_ago`]?.series[n]?.data:null;if(p.hidden)return;const w=a.formatters.find((e=>e==r));w||a.formatters.push(r),my(m,s,{color:p.color,palette:0},a),1==u?.avg&&my(h,"point",{color:dy.avg,palette:1},a),1==u?.perc_95&&my(g,"point",{color:dy.perc_95,palette:1},a),1==u?.past&&my(b,"dash",{color:dy.past,palette:1},a),function(e,t,a,l,n,s,o,i,r){const c=t.statistics.average,u=t.statistics["95th_percentile"];let d=i;for(let t=0;t<l.length;t++){const i=l[t];if(e.serie[d]||(e.serie[d]=[{value:new Date(1e3*d),name:"Time"}]),null!==i?e.serie[d].push({value:i*s,name:r.serie_name}):e.serie[d].push({value:NaN,name:r.serie_name}),1==a?.avg&&e.serie[d].push({value:c*s,name:r.avg_name}),1==a?.perc_95&&e.serie[d].push({value:u*s,name:r.perc_name}),1==a?.past){const a=n?n[t]:null;a?e.serie[d].push({value:a*s,name:r.past_name}):e.serie[d].push({value:NaN,name:r.past_label})}d+=o}}(a,t,u,c,y,f,i,o,{serie_name:m,avg_name:h,perc_name:g,past_name:b})}))}function by(e,t,a,l,n){let s=1;const o=[];e.serie.forEach((e=>{o.push([s,e]),s++})),0==o.length&&o.push([1,null]);const i={serie:o,formatters:l,labels:["index"],colors:[],properties:cy.formatSerieProperties(a),stacked:!1,customBars:!1,use_full_name:!1,plotter:vy(a),value_range:n,disable_ts_list:!0};return my(t,a,{color:dy.default_color,palette:0},i),py(i.colors),cy.buildChartOptions(i)}function yy(e,t,a,l){const n={serie:[],formatters:[],labels:["Time"],colors:[],properties:[],stacked:!1,customBars:!1,use_full_name:null!=l&&l};return e.forEach(((e,l)=>{!function(e,t,a,l){null!=e.source_type.f_map_ts_options&&(t=(0,e.source_type.f_map_ts_options)(t,e));1==(e.metric.bounds||!1)?hy(e,t,l):gy(e,t,l,a)}(t[l],e,a,n)})),function(e){const t=[];Object.keys(e.serie).forEach(((a,l)=>{t[l]=[],e.labels.forEach((n=>{let s=!1;for(let o=0;o<e.serie[a].length;o++)if(e.serie[a][o].name==n){t[l].push(e.serie[a][o].value),s=!0;break}0==s&&t[l].push(null)}))})),e.serie=t}(n),py(n.colors),cy.buildChartOptions(n)}const wy={formatSerie:yy,formatSimpleSerie:by,getSerieId:_y,getSerieName:fy};function xy(e){return wy.getSerieId(e)}function ky(e,t,a,l){return wy.getSerieName(e,t,a,l)}const $y={"1_chart_x_metric":{value:"1_chart_x_metric",label:i18n("page_stats.layout_1_per_1")},"1_chart_x_yaxis":{value:"1_chart_x_yaxis",label:i18n("page_stats.layout_1_per_y")}};function Sy(e){return $y[e]||null}function Ny(e,t,a,l){if(a.value==$y["1_chart_x_metric"].value)return Cy(e,t,a,l);let n=function(e,t){let a=[],l=[],n=[],s=[];return t.forEach(((t,o)=>{1==t.metric.draw_stacked?(a.push(e[o]),l.push(t)):(n.push(e[o]),s.push(t))})),{stacked:{tsOptionsArray:a,tsGroupsArray:l},not_stacked:{tsOptionsArray:n,tsGroupsArray:s}}}(e,t);return[...Cy(n.stacked.tsOptionsArray,n.stacked.tsGroupsArray,a,l),...Cy(n.not_stacked.tsOptionsArray,n.not_stacked.tsGroupsArray,a,l)]}function Cy(e,t,a,l){let n=!1;if(a.value==$y["1_chart_x_yaxis"].value){let a={};t.forEach(((t,l)=>{let n=`${(s=t.metric).measure_unit}_${s.scale}`;var s;let o={tsGroup:t,tsOptions:e[l]};null==a[n]?a[n]=[o]:a[n].push(o)})),n=t.length>1||t.length>0&&!0===t[0].source_type.display_full_name;let s=[];for(let e in a){let t=a[e],o=t.map((e=>e.tsOptions)),i=t.map((e=>e.tsGroup)),r=Ey(o,i,l,n);s.push(r)}return s}if(a.value==$y["1_chart_x_metric"].value){n=e.length>1||t.length>0&&!0===t[0].source_type.display_full_name;let a=[];return e.forEach(((e,s)=>{let o=Ey([e],[t[s]],l,n);a.push(o)})),a}return[]}function Ay(e,t,a,l,n){return wy.formatSimpleSerie(e,t,a,l,n)}function Ey(e,t,a,l){return wy.formatSerie(e,t,a,l)}function Ty(e,t,a){let l=e.source_type.source_def_array.map(((t,l)=>{if(null!=a&&!a[t.value])return null;let n=e.source_array[l].value;return`${t.value}:${n}`})).filter((e=>null!=e)).join(",");return t||null==e.metric.query||(l=`${l},${e.metric.query}`),l}function Py(e){let t=e.source_type.source_def_array;for(let e=0;e<t.length;e+=1){if(1==t[e].main_source_def)return e}return 0}function Uy(e,t,a,l,n){let s={epoch_begin:t.epoch_begin,epoch_end:t.epoch_end},o={};if(n){let t={zoom:a,limit:180,version:4,ts_compare:a},n=l.map((e=>{let t=Py(e),a={ts_query:Ty(e),ts_schema:`${e.metric.schema}`};return e.source_type.source_def_array[t].disable_tskey||(a.tskey=e.source_array[t].value),a}));o.url=`${e}/lua/pro/rest/v2/get/timeseries/ts_multi.lua`,o.body={ts_requests:n,...s,...t}}else{let t=`${e}/lua/rest/v2/get/timeseries/ts.lua`,n=`ts_compare=${a}&version=4&zoom=${a}&limit=180`,i=l[0],r=Py(i),c=Ty(i),u={...s,ts_query:c,ts_schema:`${i.metric.schema}`};i.source_type.source_def_array[r].disable_tskey||(u.tskey=i.source_array[r].value);let d=x.add_obj_to_url(u,n);o.url=`${t}?${d}`}return o}async function Iy(e,t,a,l,n){let s;const o=Uy(e,t,a,l,n);if(n){let e={"Content-Type":"application/json"};s=await b.http_request(o.url,{method:"post",headers:e,body:JSON.stringify(o.body)})}else{s=[await b.http_request(o.url)]}return s}const Oy={groupsOptionsModesEnum:$y,tsArrayToOptions:Ey,formatSimpleSerie:Ay,tsArrayToOptionsArray:Ny,getGroupOptionMode:Sy,getSerieId:xy,getSerieName:ky,getTsChartsOptions:Iy,getTsChartsDataUrl:Uy,getTsQuery:Ty,getMainSourceDefIndex:Py},jy=e=>(pl("data-v-103cd911"),e=e(),fl(),e),My={class:"nav nav-tabs"},Ly={class:"form-group ms-2 me-2 mt-3 row"},Fy={class:"form-group row"},Ry={class:"col-form-label col-sm-4"},Dy={class:"col-sm-8"},zy={key:0,class:"form-group ms-2 me-2 mb-2 mt-3 row"},qy={class:"form-group row"},By={class:"col-form-label col-sm-4"},Vy={class:"col-sm-8"},Hy=["title"],Gy={key:0,class:"form-group mt-2 row"},Wy={class:"col-form-label col-sm-4"},Ky={class:"col-sm-8"},Jy={key:1,class:"form-group mt-2 row"},Yy={class:"col-form-label col-sm-4"},Zy={class:"col-sm-8"},Xy=["onInput","onUpdate:modelValue","pattern"],Qy={key:2,class:"form-group mt-2 row"},ew={class:"col-form-label col-sm-4"},tw={class:"col-sm-7"},aw=["onInput","onUpdate:modelValue","pattern"],lw={class:"col-sm-1"},nw=["onClick","title","disabled"],sw=[jy((()=>Vs("i",{class:"fas fa-refresh"},null,-1)))],ow={class:"form-group row mt-2",style:{"text-align":"end"}},iw={class:"col-sm-12"},rw=["disabled"],cw={class:"form-group ms-2 me-2 mt-3 row"},uw={class:"form-group row"},dw={class:"col-form-label col-sm-4"},_w={class:"col-sm-8"},pw=["disabled"];var fw={__name:"modal-timeseries",props:{sources_types_enabled:Object},emits:["apply"],setup(e,{expose:t,emit:a}){const l=e,n=va(null),s=va(null),o=va("select");let i=Jb.get_current_page_source_type();const r=Jb.sources_types,c=va(i),u=Jb.ui_types,d=va([]),_=va([]),p=va([]),f=va(""),v=va([]),m=va(!1),h=xo((()=>{if(0==m.value)return!1;for(let e=0;e<v.value.length;e+=1){let t=v.value[e];if(null==t)continue;let a=new RegExp(t),l=p.value[e];if(0==a.test(l))return!1}return!0})),g=va(!1),y=va([]),w=va({}),x=va([]),k=va([]);let $=null;dn((()=>{r.forEach((e=>{l.sources_types_enabled[e.id]}))})),_n((async()=>{$=async function(){await N(),I()}()}));function S(e){o.value=e}async function N(){m.value=!1,function(){let e=c.value?.source_def_array.map((e=>e.regex_type));null==e&&(e=[]);v.value=e.map((e=>null==e?null:wp.get_data_pattern(e)))}(),function(){let e=c.value;g.value=e.source_def_array.map((e=>e.ui_type==u.hide)).every((e=>1==e))}(),await async function(){let e=c.value.source_def_array,t=[],a=await Jb.get_default_source_array(http_prefix,c.value),l=a.map((e=>e.value));for(let a=0;a<e.length;a+=1){let n=await Jb.get_sources(http_prefix,c.value.id,e[a],l);t.push(n)}_.value=a,d.value=t,p.value=l,P()}(),await U()}async function C(){m.value=!1,p.value.forEach(((e,t)=>{if(c.value.source_def_array[t].ui_type==u.input){A(_.value[t],e)}})),await async function(){await U()}(),P()}function A(e,t){e.value=t,e.label=t}function E(e,t,a){m.value=!0,1==a&&T(e,t)}async function T(e,t){e.ui_type==u.input_confirm&&A(_.value[t],p.value[t]);let a=c.value.source_def_array,l=_.value.map((e=>e.value));for(let e=t+1;e<a.length;e+=1){const t=a[e];if(!t.refresh_on_sources_change)continue;let n=await Jb.get_sources(http_prefix,c.value.id,t,l);d.value[e]=n,n.length>0?_.value[e]=n[0]:(_.value[e]={label:"",value:""},console.warn(`No sources availables to select for ${c.value.id} sorce_def`))}}function P(){f.value=`${_.value.filter((e=>null!=e.label&&""!=e.label)).map((e=>e.label)).join(" - ")}`}async function U(){y.value=await Jb.get_metrics(http_prefix,c.value,_.value),y.value.sort(NtopUtils.sortAlphabetically),w.value=Jb.get_default_metric(y.value),I()}function I(e){k.value=[];let t=w.value.timeseries;for(let e in t)k.value.push({id:e,label:t[e].label,raw:!0,past:!1,avg:!1,perc_95:!1})}function O(e){let t=e.source_type.label,a=Oy.getMainSourceDefIndex(e);return`${t} - ${e.source_array[a].label} - ${e.metric.label}`}function j(e){let t,a,l;return null==e?(t=c.value,a=_.value,l=w.value):(t=e.source_type,a=e.source_array,l=e.metric),Jb.get_ts_group_id(t,a,l)}const M=e=>{x.value=x.value.filter((t=>j(t)!=e))},L=(e,t)=>{let l=x.value.findIndex((t=>t.id==e.id));l<0?x.value.push(e):x.value[l]=e,t&&a("apply",x.value)},F=()=>{if("add"==o.value){let e={id:j(),source_type:c.value,source_array:b.clone(_.value),metric:w.value,timeseries:b.clone(k.value)};L(e)}a("apply",x.value),R()},R=()=>{n.value.close()},D=e=>i18n(e);return t({show:async e=>{x.value=e,await $,o.value="select",n.value.show()},close:R,add_ts_group:L,set_timeseries_groups:(e,t)=>{x.value=e,t&&a("apply",x.value)}}),(e,t)=>(Ps(),Ls(sp,{onShowed:t[8]||(t[8]=e=>{}),ref_key:"modal_id",ref:n},{title:ml((()=>[Ks(te(D("modal_timeseries.title")),1)])),body:ml((()=>[Vs("ul",My,[Vs("li",{class:"nav-item",onClick:t[0]||(t[0]=e=>S("add"))},[Vs("a",{class:K(["nav-link",{active:"add"==o.value}]),href:"#"},te(D("modal_timeseries.add_timeseries")),3)]),Vs("li",{class:"nav-item",onClick:t[1]||(t[1]=e=>S("select"))},[Vs("a",{class:K(["nav-link",{active:"select"==o.value}]),href:"#"},te(D("modal_timeseries.manage_timeseries")),3)])]),Ys(" action add "),"add"==o.value?(Ps(),Ms(Ss,{key:0},[Ys(" Sources Types "),Vs("div",Ly,[Vs("div",Fy,[Vs("label",Ry,[Vs("b",null,te(D("modal_timeseries.source_type")),1)]),Vs("div",Dy,[Hs(n_,{selected_option:c.value,"onUpdate:selected_option":t[2]||(t[2]=e=>c.value=e),onSelect_option:t[3]||(t[3]=e=>N()),options:ya(r)},null,8,["selected_option","options"])])])]),Ys(" Sources "),g.value?Ys("v-if",!0):(Ps(),Ms("div",zy,[Vs("div",qy,[Vs("label",By,[Vs("b",null,te(D("modal_timeseries.source")),1)]),Vs("div",Vy,[wn(Vs("input",{class:"form-control","onUpdate:modelValue":t[4]||(t[4]=e=>f.value=e),title:f.value,style:{overflow:"hidden","text-overflow":"ellipsis","white-space":"nowrap"},type:"text",disabled:""},null,8,Hy),[[ji,f.value]])])]),(Ps(!0),Ms(Ss,null,En(c.value.source_def_array,((e,t)=>(Ps(),Ms(Ss,null,[Ys(" select "),e.ui_type==ya(u).select?(Ps(),Ms("div",Gy,[Vs("label",Wy,[Vs("b",null,te(e.label),1)]),Vs("div",Ky,[Hs(n_,{selected_option:_.value[t],"onUpdate:selected_option":e=>_.value[t]=e,onSelect_option:a=>E(e,t,!0),options:d.value[t]},null,8,["selected_option","onUpdate:selected_option","onSelect_option","options"])])])):Ys("v-if",!0),Ys(" end select "),Ys(" input text "),e.ui_type==ya(u).input?(Ps(),Ms("div",Jy,[Vs("label",Yy,[Vs("b",null,te(e.label),1)]),Vs("div",Zy,[wn(Vs("input",{class:"form-control",onInput:a=>E(e,t),"onUpdate:modelValue":e=>p.value[t]=e,pattern:v.value[t],required:"",type:"text",placeholder:""},null,40,Xy),[[ji,p.value[t]]])])])):Ys("v-if",!0),Ys(" input text "),Ys(" input confirm text "),e.ui_type==ya(u).input_confirm?(Ps(),Ms("div",Qy,[Vs("label",ew,[Vs("b",null,te(e.label),1)]),Vs("div",tw,[wn(Vs("input",{class:"form-control",onInput:a=>E(e,t),"onUpdate:modelValue":e=>p.value[t]=e,pattern:v.value[t],required:"",type:"text",placeholder:""},null,40,aw),[[ji,p.value[t]]])]),Vs("div",lw,[Vs("button",{type:"button",class:"btn btn-link btn-sm",onClick:a=>T(e,t),title:D(e.refresh_i18n),disabled:!ya(h)},sw,8,nw)])])):Ys("v-if",!0),Ys(" input confirm text ")],64)))),256)),wn(Vs("div",ow,[Vs("div",iw,[Vs("button",{type:"button",onClick:C,disabled:0==ya(h),class:"btn btn-primary"},te(D("modal_timeseries.apply_source")),9,rw)])],512),[[Yi,ya(h)]])])),Ys(" end Sources "),Ys(" Metrics "),Vs("div",cw,[Vs("div",uw,[Vs("label",dw,[Vs("b",null,te(D("modal_timeseries.metric")),1)]),Vs("div",_w,[Hs(n_,{ref_key:"select_search_metrics",ref:s,onSelect_option:t[5]||(t[5]=e=>I()),selected_option:w.value,"onUpdate:selected_option":t[6]||(t[6]=e=>w.value=e),options:y.value},null,8,["selected_option","options"])])])]),Hs(eb,{title:D("modal_timeseries.timeseries_list"),timeseries:k.value,"onUpdate:timeseries":t[7]||(t[7]=e=>k.value=e)},null,8,["title","timeseries"])],64)):Ys("v-if",!0),Ys(" action == add "),Ys(" action select"),"select"==o.value?(Ps(),Ms(Ss,{key:1},[(Ps(!0),Ms(Ss,null,En(x.value,(e=>(Ps(),Ls(eb,{id:j(e),title:O(e),timeseries:e.timeseries,"onUpdate:timeseries":t=>e.timeseries=t,show_delete_button:x.value.length>1,onDelete_ts:M},null,8,["id","title","timeseries","onUpdate:timeseries","show_delete_button"])))),256)),Ys(" v-for timeseries_groups_added ")],64)):Ys("v-if",!0),Ys(" action == select ")])),footer:ml((()=>[wn(Vs("button",{type:"button",onClick:F,disabled:ya(h),class:"btn btn-primary"},te(D("modal_timeseries.add")),9,pw),[[Yi,"add"==o.value]]),wn(Vs("button",{type:"button",onClick:F,class:"btn btn-primary"},te(D("modal_timeseries.apply")),513),[[Yi,"select"==o.value]])])),_:1},512))}};np("\ninput[data-v-103cd911]:invalid {\n  border-color: #ff0000;\n}\n.custom-margin[data-v-103cd911] {\nmargin-left: -0.4rem;\n}\n.warn[data-v-103cd911] {\nborder-color: #ffd500;\nborder-style: solid;\n}\n"),fw.__scopeId="data-v-103cd911",fw.__file="http_src/vue/modal-timeseries.vue";const vw={class:"form-group mt-2 row"},mw={class:"col-form-label col-sm-4"},hw={class:"col-sm-6"},gw={class:"col-form-label col-sm-2"},bw=["disabled"];var yw={__name:"modal-download-file",props:{title:String,ext:String},emits:["download"],setup(e,{expose:t,emit:a}){const l=e,n=va(null),s=va(""),o=String.raw`^[a-zA-Z_\-1-9]*$`,i=xo((()=>new RegExp(o).test(s.value)));function r(){let e=`${s.value}.${l.ext}`;a("download",e),c()}const c=()=>{n.value.close()};t({show:e=>{null==e&&(e=""),e=e.replaceAll(/[^a-zA-Z0-9]/g,"_"),s.value=e,n.value.show()},close:c}),_n((()=>{}));const u=e=>i18n(e);return(e,t)=>(Ps(),Ls(sp,{ref_key:"modal_id",ref:n},{title:ml((()=>[Ks(te(l.title),1)])),body:ml((()=>[Vs("div",vw,[Vs("label",mw,[Vs("b",null,te(u("modal_download_file.filename"))+":",1)]),Vs("div",hw,[wn(Vs("input",{class:"form-control",pattern:o,"onUpdate:modelValue":t[0]||(t[0]=e=>s.value=e),type:"text",required:""},null,512),[[ji,s.value]])]),Vs("label",gw," ."+te(l.ext),1)])])),footer:ml((()=>[Vs("button",{type:"button",onClick:r,class:"btn btn-primary",disabled:0==ya(i)},te(u("modal_download_file.download")),9,bw)])),_:1},512))}};np("\ninput[data-v-59120eb8]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-59120eb8] {\n  cursor: not-allowed;\n}\n"),yw.__scopeId="data-v-59120eb8",yw.__file="http_src/vue/modal-download-file.vue";const ww={key:0},xw={class:"text-center"},kw=Vs("tbody",null,null,-1);var $w={__name:"datatable",props:{id:String,table_buttons:Array,columns_config:Array,data_url:String,enable_search:Boolean,filter_buttons:{type:Array,required:!1},table_config:{type:Object,required:!1},base_url:String,base_params:Object},emits:["drawed"],setup(e,{expose:t,emit:a}){const l=e,n=so(),s=Co(),o=(e,t)=>{if((t||l.id)&&null!=e.dir){const a=[e.col,e.dir],n=`${t||l.id}_sorting_preferences`;localStorage.setItem(n,a)}},i=e=>{let t=null;if(e||l.id){const a=`${e||l.id}_sorting_preferences`,n=localStorage.getItem(a);if(n){const e=n.split(",");2==e.length&&(t=[Number(e[0]),e[1]])}}return t};let r=l.base_params;const c=va(null),u=i()||[0,"asc"];let d=null;_n((()=>{!function(){let e=!1,t={serverSide:!1,scrollX:!1,destroy:!0,searching:l.enable_search,order:[u],pagingType:"full_numbers",columns:l.columns_config,autoWidth:!1,responsive:!0,ajax:{method:"get",url:l.data_url,dataSrc:"rsp",data:(e,t)=>{if(0==Object.keys(e).length)return;const a=t.oInstance.api(),l=e.order[0].column,n=a.column(l).name()||void 0;return e.order&&(e.order=e.order[0].dir,e.sort=n),void 0!==e.columns&&delete e.columns,void 0!==e.search&&(e.map_search=e.search.value,delete e.search),e},beforeSend:function(){NtopUtils.showOverlays()}},drawCallback:function(e){NtopUtils.hideOverlays(),a("drawed"),ntopng_events_manager.emit_custom_event(ntopng_custom_events.DATATABLE_LOADED),o(e.aLastSort[0])}};for(const e in l.table_config||{})t[e]=l.table_config[e];let n=DataTableUtils.getStdDatatableConfig(l.table_buttons);n=DataTableUtils.extendConfig(n,t),d=$(c.value).DataTable(n),p();for(const t of l.filter_buttons||[]){const a=x.get_url_entry(t.filterMenuKey);if(a&&""!=a){let l=0;t.filters.forEach((e=>{e.currently_active=!1,l+=1,e.id==a&&(e.currently_active=!0,l-=1)})),l==t.filters.length&&(x.set_key_to_url(t.filterMenuKey,""),e=!0)}new DataTableFiltersMenu({filterTitle:t.filterTitle,tableAPI:d,filters:t.filters,filterMenuKey:t.filterMenuKey,columnIndex:t.columnIndex,url:l.data_url,id:t.id,removeAllEntry:t.removeAllEntry,callbackFunction:t.callbackFunction}).init()}if(e&&l.base_params){const e=x.get_url_entries();for(const[t,a]of e)r[t]=a;d.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,r)),f()}}()}));let _=null;function p(){if(null==_&&(_=function(){if(null==d)return;let e=$(d.context[0].nTableWrapper);return $($(".row .text-end",e).children()[0])}()),null==s||null==s.menu)return;let e=s.menu();if(null==e||0==e.length)return;let t=s.menu()[0],a=$("<div class='d-inline-block'></div>")[0];const{vNode:l,el:o}=jd(t,{app:n?.appContext?.app,element:a});let i=$(d.context[0].nTableWrapper);$($(".row .text-end",i).children()[0]).append(o)}const f=()=>{null!=d&&d.ajax.reload()},v=e=>{DataTableUtils.deleteButtonHandlers(e)};let m=!1;const h=()=>{d.clear(),d.destroy(!0),m=!0,l.columns_config.filter((e=>null!=e.handlerId)).forEach((e=>{v(e.handlerId)}))};return t({reload:f,delete_button_handlers:v,destroy_table:h,update_url:e=>{null!=d&&d.ajax.url(e)},refresh_menu:()=>{let e=$(d.context[0].nTableWrapper);$($(".row .text-end",e).children()[0]).html(""),p()},is_last_sorting_available:e=>null!=i(e),load_last_sort:i,save_last_sort:o,search_value:function(e){null!=d&&d.search(e).draw()}}),vn((()=>{1!=m&&h()})),(t,a)=>(Ps(),Ms(Ss,null,[(Ps(),Ms("div",ww,[Ys(' <slot name="menu"></slot> ')])),Vs("div",null,[Vs("table",{ref_key:"table_id",ref:c,class:"table w-100 table-striped table-hover table-bordered"},[Vs("thead",null,[Vs("tr",null,[(Ps(!0),Ms(Ss,null,En(e.columns_config,(e=>(Ps(),Ms("th",xw,te(e.columnName),1)))),256))])]),kw],512)])],64))},__file:"http_src/vue/datatable.vue"};const Sw={key:0,class:"table table-striped table-bordered col-sm-12",style:{}},Nw=["innerHTML"],Cw={class:""},Aw=["innerHTML"],Ew=["innerHTML"],Tw={class:"table table-striped table-bordered"},Pw=["innerHTML"],Uw=["colspan","innerHTML"];var Iw={__name:"bootstrap-table",props:{id:String,columns:Array,rows:Array,print_html_column:Function,print_html_row:Function,print_html_title:Function,horizontal:Boolean,wrap_columns:Boolean},setup:e=>(t,a)=>(Ps(),Ms(Ss,null,[Ys(" Normal table "),e.horizontal&&0!=e.horizontal?(Ps(),Ms(Ss,{key:1},[Ys(" Horizontal table, with th on the rows "),Vs("table",Tw,[Vs("tbody",null,[(Ps(!0),Ms(Ss,null,En(e.rows,(t=>(Ps(),Ms("tr",null,[Vs("th",{class:"col 5",innerHTML:e.print_html_title(t.name)},null,8,Pw),(Ps(!0),Ms(Ss,null,En(t.values,(a=>(Ps(),Ms("td",{colspan:[t.values.length<=1?2:1],innerHTML:e.print_html_row(a)},null,8,Uw)))),256))])))),256))])])],2112)):(Ps(),Ms("table",Sw,[Vs("thead",null,[Vs("tr",null,[(Ps(!0),Ms(Ss,null,En(e.columns,(t=>(Ps(),Ms("th",{scope:"col",class:K(t.class),innerHTML:e.print_html_column(t)},null,10,Nw)))),256))])]),Vs("tbody",null,[(Ps(!0),Ms(Ss,null,En(e.rows,(t=>(Ps(),Ms("tr",Cw,[1==e.wrap_columns?(Ps(!0),Ms(Ss,{key:0},En(e.columns,(a=>(Ps(),Ms("td",{scope:"col",style:{height:"2.5rem"},class:K(a.class)},[Vs("div",{class:"wrap-column",style:V(a.style),innerHTML:e.print_html_row(a,t)},null,12,Aw)],2)))),256)):(Ps(!0),Ms(Ss,{key:1},En(e.columns,(a=>(Ps(),Ms("td",{scope:"col",class:K([a.class,"wrap_column"]),style:V(a.style),innerHTML:e.print_html_row(a,t)},null,14,Ew)))),256))])))),256))])]))],2112))};np("\n.wrap-column[data-v-0533335c] {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  max-width:100%;\n}\n"),Iw.__scopeId="data-v-0533335c",Iw.__file="http_src/vue/bootstrap-table.vue";const Ow=e=>(pl("data-v-937058e4"),e=e(),fl(),e),jw={class:"col-12 mb-2 mt-2"},Mw={class:"card h-100 overflow-hidden"},Lw=["title"],Fw=[Ow((()=>Vs("i",{class:"fas fa-lg fa-camera-retro"},null,-1)))],Rw=["title"],Dw=[Ow((()=>Vs("i",{class:"fas fa-lg fa-download"},null,-1)))],zw=["disabled","title"],qw=[Ow((()=>Vs("i",{class:"fas fa-lg fa-file-image"},null,-1)))],Bw=["title"],Vw=[Ow((()=>Vs("i",{class:"fas fa-lg fa-table"},null,-1)))],Hw={class:"form-group ms-1 me-1 mt-1"},Gw={class:"inline select2-size me-2 mt-2"},Ww={class:"inline select2-size me-2 mt-2"},Kw={key:0,class:"mt-4 card card-shadow"},Jw={class:"card-body"},Yw={key:1,class:"mt-4 card card-shadow"},Zw={class:"card-body"},Xw={key:0,class:"inline select2-size me-2 mt-2"};var Qw={__name:"page-stats",props:{csrf:String,is_ntop_pro:Boolean,source_value_object:Object,sources_types_enabled:Object,sources_types_top_enabled:Object,enable_snapshots:Boolean,is_history_enabled:Boolean,traffic_extraction_permitted:Boolean,is_dark_mode:Boolean},setup(e){const t=e,l=e=>i18n(e);let n="date_time_picker",s=ntopChartApex.typeChart.TS_LINE;va({}),va(!1);const o=va([]),i=va(null),r=va(null),c=va(null),u=va(null),d=va(null),_=/^((?!chrome|android).)*safari/i.test(navigator.userAgent),p=l(_?"page_stats.download_image_disabled":"page_stats.title_modal_download_file"),f=va(null),m=va([]),h=va({});Jb.get_current_page_source_type();const g=va(!1);va(!1);const w=va([]),k=b.object_to_array(Oy.groupsOptionsModesEnum),$=va(function(){let e=x.get_url_entry("timeseries_groups_mode");if(null!=e&&""!=e)return Oy.getGroupOptionMode(e);return k[0]}());let S=null;const N={label:i18n("page_stats.custom_metrics"),currently_active:!1},C="timeseries",A=va(!1),E=[{value:"10_min",label:i18n("show_alerts.presets.10_min"),currently_active:!1},{value:"30_min",label:i18n("show_alerts.presets.30_min"),currently_active:!0},{value:"hour",label:i18n("show_alerts.presets.hour"),currently_active:!1},{value:"2_hours",label:i18n("show_alerts.presets.2_hours"),currently_active:!1},{value:"6_hours",label:i18n("show_alerts.presets.6_hours"),currently_active:!1},{value:"12_hours",label:i18n("show_alerts.presets.12_hours"),currently_active:!1},{value:"day",label:i18n("show_alerts.presets.day"),currently_active:!1},{value:"week",label:i18n("show_alerts.presets.week"),currently_active:!1},{value:"month",label:i18n("show_alerts.presets.month"),currently_active:!1},{value:"year",label:i18n("show_alerts.presets.year"),currently_active:!1},{value:"custom",label:i18n("show_alerts.presets.custom"),currently_active:!1,disabled:!0}];dn((async()=>{if("va_historical"==x.get_url_entry("page")){let e=[];X.forEach((t=>{t.va&&e.push(t)})),X=e}t.source_value_object.is_va&&(f.value="hour",b.check_and_set_default_time_interval("day")),function(){if(null==t.source_value_object)return;let e=Jb.get_current_page_source_type();Jb.set_source_value_object_in_url(e,t.source_value_object)}()})),_n((async()=>{!async function(){let e,t,a=!0,l=await Jb.get_timeseries_groups_from_url(http_prefix);if(null==l){a=!1,e=x.get_url_entry("ts_schema");let n=x.get_url_entry("ts_query");null!=n&&""!=n&&(t=Jb.get_metric_query_from_ts_query(n)),""==e&&(e=null),l=await Jb.get_default_timeseries_groups(http_prefix,e,t)}m.value=await P(a),h.value=1==a?N:Jb.get_default_metric(m.value,e,t);A.value=!0,await K(l,!0,!0)}(),await Promise.all([ntopng_sync.on_ready(n)])}));let T=null;async function P(e,l){let n=await Jb.get_metrics(http_prefix);if(!l&&T==e)return n.value;if(e&&n.push(N),(null==B||l)&&(B=await async function(){if(!t.enable_snapshots)return;let e=`${http_prefix}/lua/pro/rest/v2/get/filters/snapshots.lua?page=${C}`,a=await b.http_request(e),l=b.object_to_array(a).map((e=>({...e,is_snapshot:!0,label:`${e.name}`,group:"Snapshots"})));return l}()),t.enable_snapshots){B.forEach((e=>n.push(e)))}return n.length>0&&n.sort(a.sortAlphabetically),n}async function U(e){let t=Jb.get_current_page_source_type(),a=await Jb.get_default_source_array(http_prefix,t);return[Jb.get_ts_group(t,a,e)]}const I=async(e,t,a)=>{let l=Jb.get_source_type_from_id(e),n=await Jb.get_source_array_from_value_dict(http_prefix,l,t),s=await Jb.get_metric_from_schema(http_prefix,l,n,a);j(Jb.get_ts_group(l,n,s))},O=async(e,t)=>{let a=m.value.find((a=>a.schema==e&&a.query==t));null!=a?j((await U(a))[0]):console.error(`metric = ${e}, query = ${t} not found.`)};function j(e){c.value.set_timeseries_groups(S),c.value.add_ts_group(e,!0)}async function M(e){if(1==e.is_snapshot){let t=e.filters,a=x.get_url_entry("timeseries_groups",t),l=await Jb.get_timeseries_groups_from_url(http_prefix,a);$.value=Oy.getGroupOptionMode(x.get_url_entry("timeseries_groups_mode",t)),await K(l,!0,!1)}else await async function(){let e=await async function(){return U(h.value)}();await K(e,!0,!1)}(),H(!1)}function L(e){let a=h.value.label==N.label;K(S,!0,!1,e.refresh_data),async function(){if(!t.is_ntop_pro)return;let e=Z.value?.table_config_def;if(null==e)return;let a=J(e.ts_group,e.table_def.table_value,e.table_def.view,e.table_source_def_value_dict);r.value.update_url(a),r.value.reload()}(),H(a,!0)}function F(e){}function R(){u.value.show()}function D(){null!=S&&c.value.show(S)}function z(e){return async t=>w.value[e].chart_options}let q,B=null;function V(){H(h.value.label==N.label,!0)}async function H(e,t){m.value=await P(e,t),e&&(h.value=N)}async function G(e){H(!0),await K(e,!0,!0)}function W(){K(S,!1,!1)}async function K(e,a,l,n){let s=y.get_status(),i=function(e){let t=Number.parseInt((e.epoch_end-e.epoch_begin)/60);return t<=5?"5m":t<=30?"30m":t<=60?"1h":t<=1440?"1d":t<=10080?"1w":t<=43200?"1M":"1Y"}(s);if(a){if(null==e)return e=[],void console.warn("Empty timeseries_groups request");q=await Oy.getTsChartsOptions(http_prefix,s,i,e,t.is_ntop_pro)}!function(e,t){e.forEach(((e,a)=>{let l=t[a],n=l?.metadata?.label;if(null!=n){let t=Oy.getMainSourceDefIndex(e);e.source_array[t].label=n}}))}(e,q);let r=Oy.tsArrayToOptionsArray(q,e,$.value,i);n?function(e){e.forEach(((e,t)=>{o.value[t].update_chart_series(e?.serie)}))}(r):function(e){w.value=e.map(((e,t)=>({key:b.get_random_string(),chart_options:e})))}(r),function(e,t,a){const l=e.length>1;if(g.value=t.map((e=>!e.source_type.disable_stats)).reduce(((e,t)=>e|t),!1),!g.value)return;const n=e=>{let t={bps:"bytes",fps:"flows",alertps:"alerts",hitss:"hits",pps:"packets"};return null!=t[e]?t[e]:e};Q.value=[],e.forEach(((e,a)=>{let s=t[a];1!=s.source_type.disable_stats&&e.series?.forEach(((e,t)=>{let a,o=Oy.getSerieId(e),i=s.metric.timeseries[o],r=v.getFormatter(s.metric.measure_unit),c=i.label;if(i.hidden)return;if(1==i.use_serie_name&&(c=e.name),e?.data.length>t&&(a=e.statistics),null==a)return;e.ext_label&&(c=e.ext_label),c=Oy.getSerieName(c,o,s,l);let u=n(s.metric.measure_unit),d={metric:c,total:v.getFormatter(u)(a.total),perc_95:r(a["95th_percentile"]),avg:r(a.average),max:r(a.max_val),min:r(a.min_val)};Q.value.push(d)}))}))}(q,e),l&&function(e,a){if(!t.is_ntop_pro)return;null==e&&(e=S);null==a&&(a=y.get_status());let l=Jb.sources_types_tables,n={};e.forEach((e=>{e.source_type;let t=Jb.get_ts_group_id(e.source_type,e.source_array);n[t]=e}));let s={};Y.value=[];for(let e in n){let o=n[e],i=Oy.getMainSourceDefIndex(o),r=o.source_array[i],c=o.source_type,u=l[c.id];null!=u&&u.forEach((e=>{let l=t.sources_types_top_enabled[e.table_value];if(null==l)return;if(!l[e.view])return;let n=e.table_source_def_value_dict,i=J(o,e.table_value,e.view,n,a),u=Jb.get_ts_group_id(o.source_type,o.source_array,null,n,!0);if(u=`${u}_${e.view}`,null!=s[u])return;s[u]=!0;let d,_=`${e.table_value}_${e.view}_${u}`;d=null==e.f_get_label?`${e.title} - ${c.label} ${r.label}`:e.f_get_label(o);const p={ts_group:o,table_def:e,table_buttons:[],data_url:i,enable_search:!0,table_config:{serverSide:!1,order:[[e.default_sorting_columns,"desc"]],columnDefs:e.columnDefs||[]}};p.columns_config=e.columns.map((e=>{let l={is_history_enabled:t.is_history_enabled},n={visible:!e.render_if||e.render_if(l),...e};return null==n.className&&(n.className="text-nowrap"),null==n.responsivePriority&&(n.responsivePriority=1),n.render=e.render.bind({add_metric_from_metric_schema:O,add_ts_group_from_source_value_dict:I,sources_types_enabled:t.sources_types_enabled,status:a,source_type:c,source_array:o.source_array}),n}));let f={value:_,label:d,table_config_def:p};Y.value.push(f)}))}if(null!=Z.value&&Y.value.find((e=>e.value==Z.value.value)))return;Z.value=Y.value.find((e=>1==e.table_config_def.default)),null==Z.value&&(Z.value=Y.value[0])}(e,s),S=e,x.set_key_to_url("timeseries_groups_mode",$.value.value),Jb.set_timeseries_groups_in_url(S)}function J(e,t,a,l,n){null==n&&(n=y.get_status());let s=Oy.getTsQuery(e,!0,l),o=`${http_prefix}/lua/pro/rest/v2/get/${t}/top/ts_stats.lua`,i={zoom:"5m",ts_query:s,epoch_begin:`${n.epoch_begin}`,epoch_end:`${n.epoch_end}`,detail_view:`${a}`,new_charts:"true"};return`${o}?${x.add_obj_to_url(i,"")}`}const Y=va([]),Z=va({});let X=[{id:"metric",label:l("page_stats.metric"),va:!0},{id:"avg",label:l("page_stats.average"),class:"text-end",va:!0},{id:"perc_95",label:l("page_stats.95_perc"),class:"text-end",va:!0},{id:"max",label:l("page_stats.max"),class:"text-end",va:!0},{id:"min",label:l("page_stats.min"),class:"text-end",va:!0},{id:"total",label:l("page_stats.total"),class:"text-end",va:!1}];const Q=va([]);function ee(){let e=y.get_status(),t={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end},a=x.obj_to_url_params(t);const l=`${http_prefix}/lua/pro/db_search.lua?${a}`;x.go_to_url(l)}const te=va(null);function ae(){te.value.show()}function le(){if(!q?.length)return;let e=S[0],t=Oy.getSerieName(null,null,e);d.value.show(t)}async function ne(e){let t=o.value.map((async e=>{let t=new Image;return e.get_image(t),new Promise((async(e,a)=>{t.onload=function(){e(t)}}))})),a=0,l=await Promise.all(t);l.forEach((e=>{a+=e.height}));let n=document.createElement("canvas"),s=n.getContext("2d");n.width=l[0].width,n.height=a,a=0,l.forEach((e=>{s.drawImage(e,0,a,e.width,e.height),a+=e.height})),b.download_URI(n.toDataURL(),e)}return(t,a)=>(Ps(),Ms(Ss,null,[Vs("div",jw,[Hs(N_),Vs("div",Mw,[Hs(T_,{style:{"margin-top":"0.5rem"},class:"ms-1",id:ya(n),enable_refresh:!0,ref_key:"date_time_picker",ref:i,onEpoch_change:L,min_time_interval_id:f.value,custom_time_interval_list:E},{begin:ml((()=>[])),extra_buttons:ml((()=>[e.enable_snapshots?(Ps(),Ms("button",{key:0,class:"btn btn-link btn-sm",onClick:R,title:l("page_stats.manage_snapshots_btn")},Fw,8,Lw)):Ys("v-if",!0),e.traffic_extraction_permitted?(Ps(),Ms("button",{key:1,class:"btn btn-link btn-sm",onClick:ae,title:l("traffic_recording.pcap_download")},Dw,8,Rw)):Ys("v-if",!0),Vs("button",{disabled:ya(_),class:"btn btn-link btn-sm",onClick:le,title:ya(p)},qw,8,zw),e.is_history_enabled?(Ps(),Ms("button",{key:2,class:"btn btn-link btn-sm",onClick:ee,title:l("page_stats.historical_flows")},Vw,8,Bw)):Ys("v-if",!0)])),_:1},8,["id","min_time_interval_id"]),Ys(" select metric "),wn(Vs("div",Hw,[Vs("div",Gw,[Hs(n_,{selected_option:h.value,"onUpdate:selected_option":a[0]||(a[0]=e=>h.value=e),options:m.value,onSelect_option:M},null,8,["selected_option","options"])]),Vs("div",Ww,[Hs(n_,{selected_option:$.value,"onUpdate:selected_option":a[1]||(a[1]=e=>$.value=e),options:ya(k),onSelect_option:W},null,8,["selected_option","options"])]),e.is_ntop_pro?(Ps(),Ms("button",{key:0,type:"button",onClick:D,class:"btn btn-sm btn-primary inline",style:{"vertical-align":"super"}}," Manage Timeseries ")):Ys("v-if",!0)],512),[[Yi,A.value]]),(Ps(!0),Ms(Ss,null,En(w.value,((e,t)=>(Ps(),Ls(Eg,{key:e.key,id:ya("chart")+t,ref_for:!0,ref:e=>{o.value[t]=e},chart_type:ya(s),register_on_status_change:!1,get_custom_chart_options:z(t),onZoom:L,onChart_reloaded:F},null,8,["id","chart_type","get_custom_chart_options"])))),128))]),g.value?(Ps(),Ms("div",Kw,[Vs("div",Jw,[Hs(Iw,{id:"page_stats_bootstrap_table",columns:ya(X),rows:Q.value,print_html_column:e=>function(e){return e.label}(e),print_html_row:(e,t)=>function(e,t){return t[e.id]}(e,t)},null,8,["columns","rows","print_html_column","print_html_row"])])])):Ys("v-if",!0),e.is_ntop_pro?(Ps(),Ms("div",Yw,[Vs("div",Zw,[Z.value?.table_config_def?(Ps(),Ms("div",Xw,[Hs(n_,{selected_option:Z.value,"onUpdate:selected_option":a[2]||(a[2]=e=>Z.value=e),options:Y.value},null,8,["selected_option","options"])])):Ys("v-if",!0),Z.value?.table_config_def?(Ps(),Ls($w,{key:Z.value?.value,ref_key:"top_table_ref",ref:r,table_buttons:Z.value.table_config_def.table_button,columns_config:Z.value.table_config_def.columns_config,data_url:Z.value.table_config_def.data_url,enable_search:Z.value.table_config_def.enable_search,table_config:Z.value.table_config_def.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])):Ys("v-if",!0)])])):Ys("v-if",!0)]),e.enable_snapshots?(Ps(),Ls(im,{key:0,ref_key:"modal_snapshot",ref:u,csrf:e.csrf,page:C,onAdded_snapshot:V,onDeleted_snapshots:V,onDeleted_all_snapshots:V},null,8,["csrf"])):Ys("v-if",!0),e.is_ntop_pro?(Ps(),Ls(fw,{key:1,ref_key:"modal_timeseries",ref:c,sources_types_enabled:e.sources_types_enabled,onApply:G},null,8,["sources_types_enabled"])):Ys("v-if",!0),Hs(vv,{id:"page_stats_modal_traffic_extraction",ref_key:"modal_traffic_extraction",ref:te},null,512),Hs(yw,{ref_key:"modal_download_file",ref:d,title:l("page_stats.title_modal_download_file"),ext:"png",onDownload:ne},null,8,["title"])],64))}};np("\n.inline[data-v-937058e4] {\n    display: inline-block;\n}\n.select2-size[data-v-937058e4] {\n    min-width: 18rem;\n}\n"),Qw.__scopeId="data-v-937058e4",Qw.__file="http_src/vue/page-stats.vue";var ex=Jl({components:{},props:{id:String,tab_list:Array},emits:["click_item"],created(){},data:()=>({old_tab:null}),mounted(){let e=null;this.$props.tab_list.forEach((function(t){t.active&&(e=t)})),this.old_tab=e||this.$props.tab_list[0],ntopng_sync.ready(this.$props.id)},methods:{change_tab:function(e){(null!=e.id&&this.old_tab.id!=e.id||null!=e.name&&this.old_tab.name!=e.name)&&(this.old_tab=e,this.$emit("click_item",e))}}});const tx={class:"card-header mb-2"},ax={class:"nav nav-tabs card-header-tabs",role:"tablist"},lx=["onClick"],nx=["onClick"];ex.render=function(e,t,a,l,n,s){return Ps(),Ms("div",tx,[Vs("ul",ax,[(Ps(!0),Ms(Ss,null,En(e.tab_list,(t=>(Ps(),Ms(Ss,null,[t.active?(Ps(),Ms("li",{key:0,onClick:a=>e.change_tab(t),class:K([{active:t.active},"nav-item nav-link"])},te(t.title),11,lx)):(Ps(),Ms("a",{key:1,onClick:a=>e.change_tab(t),href:"#",class:"nav-item nav-link"},te(t.title),9,nx))],64)))),256))])])},ex.__file="http_src/vue/tab-list.vue";var sx={__name:"modal-delete-confirm",props:{body:String,title:String},emits:["delete","delete_all"],setup(e,{expose:t,emit:a}){const l=e,n=va(null);let s=va(""),o=va("");const i=()=>{a("delete"),r()},r=()=>{n.value.close()};t({show:(e,t)=>{null!=e&&null!=t?(s.value=e,o.value=t):(s.value=l.body,o.value=l.title),n.value.show()},close:r}),_n((()=>{}));const c=e=>i18n(e);return(e,t)=>(Ps(),Ls(sp,{onShowed:t[0]||(t[0]=e=>{}),ref_key:"modal_id",ref:n},{title:ml((()=>[Ks(te(ya(o)),1)])),body:ml((()=>[Ks(te(ya(s)),1)])),footer:ml((()=>[Vs("button",{type:"button",onClick:i,class:"btn btn-danger"},te(c("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-confirm.vue"};const ox="change_asset_table_tab_event";var ix={components:{datatable:$w,"modal-delete-confirm":sx,"tab-list":ex,NoteList:fv},props:{page_csrf:String,url_params:Object,view:String,table_filters:Array},created(){x.set_key_to_url("asset_family",this.$props.url_params.asset_family),this.asset_table_tab=x.get_url_entry("view")||"centrality",x.set_key_to_url("view",this.service_table_tab),this.tab_list.forEach((e=>{this.asset_table_tab==e.id&&(e.active=!0)})),function(e){const t=[];let a=[];e.get_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,url_params),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let l=url_params;l.view="standard";let n={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l),enable_search:!0},s=[];for(let t of e.$props.table_filters||[])t.callbackFunction=(a,n)=>{l.view=e.asset_table_tab,l[t.filterMenuKey]=n.id,x.set_key_to_url(t.filterMenuKey,n.id),a.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l)),NtopUtils.showOverlays(),a.ajax.reload(),NtopUtils.hideOverlays()},s.push(t);a=[{columnName:i18n("actions"),name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(t,a,l){return e.create_action_button_historical_flow_link(t,a,l)}},{columnName:i18n("map_page.client"),name:"client",data:"client",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.server"),name:"server",data:"server",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.asset_family"),name:"family",data:"family",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.last_seen"),name:"last_seen",data:"last_seen",className:"text-center",responsivePriority:2}];let o=ntopng_utility.clone(n);o.table_config={serverSide:!1,order:[[4,"desc"]]},o.columns_config=a,o.table_filters=s,e.config_devices_standard=o,l.view="centrality",n.data_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l),a=[{columnName:i18n("map_page.host"),name:"host",data:"host",className:"text-nowrap",render:(e,t)=>e.label,responsivePriority:1},{columnName:i18n("map_page.asset_total_edges"),name:"total_edges",data:"total_edges",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.asset_in_edges"),name:"in_edges",data:"in_edges",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.asset_out_edges"),name:"out_edges",data:"out_edges",className:"text-center",responsivePriority:2}];let i=ntopng_utility.clone(n);i.table_config={serverSide:!1,order:[[1,"desc"]]},i.columns_config=a,i.table_filters=s,console.log(o),console.log(i),e.config_devices_centrality=i}(this)},mounted(){C.on_custom_event("page_asset_table",ntopng_custom_events.DATATABLE_LOADED,(()=>{x.get_url_entry("host")&&this.hide_dropdowns()})),C.on_custom_event("change_asset_table_tab",ox,(e=>{let t=this.get_active_table();x.set_key_to_url("view",e),t.destroy_table(),this.asset_table_tab=e})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog()))},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null,title_delete:i18n("map_page.delete_assets"),body_delete:i18n("map_page.delete_assets_message"),title_download:i18n("map_page.download"),body_download:i18n("map_page.download_message"),get_url:null,asset_table_tab:null,notes:[i18n("map_page.table_note_asset_map")],tab_list:[{title:i18n("map_page.standard_view"),active:"standard"==view,id:"standard"},{title:i18n("map_page.centrality_view"),active:"centrality"==view,id:"centrality"}]}),methods:{destroy:function(){this.get_active_table().destroy_table()},click_item:function(e){this.tab_list.forEach((e=>e.active=!1)),e.active=!0,C.emit_custom_event(ox,e.id)},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",page:this.url_params.page,csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)}),this.reload_table()}catch(e){this.reload_table()}},create_action_button_historical_flow_link:function(e,t,a){let l={handlerId:"historical_flow_link",onClick:()=>{!function(e){const t=e.client.split("host=")[1].split("&")[0],a=e.server.split("host=")[1].split("&")[0],l=e.epoch_end,n={epoch_begin:e.epoch_begin,epoch_end:l,srv_ip:`${a};eq`,cli_ip:`${t};eq`},s=x.obj_to_url_params(n);x.go_to_url(`${http_prefix}/lua/pro/db_search.lua?${s}`)}(a)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:l,icon:"fas fa-stream",title:i18n("db_explorer.historical_data")}])},hide_dropdowns:function(){$("#network_dropdown").removeClass("d-inline"),$("#vlan_id_dropdown").removeClass("d-inline"),$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},get_active_table:function(){return this.$refs[`table_asset_${this.asset_table_tab}`]},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()}}};const rx={class:"row"},cx={class:"col-md-12 col-lg-12"},ux=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),dx={class:"card"},_x=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),px={class:"card-body"},fx={id:"table_asset"},vx={class:"card-footer"},mx={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},hx=Vs("i",{class:"fas fa-trash"},null,-1),gx=["href"],bx=[Vs("i",{class:"fas fa-download"},null,-1)];ix.render=function(e,t,a,l,n,s){const o=kn("modal-delete-confirm"),i=kn("tab-list"),r=kn("datatable"),c=kn("NoteList");return Ps(),Ms("div",rx,[Vs("div",cx,[ux,Vs("div",dx,[_x,Vs("div",px,[Vs("div",fx,[Hs(o,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(i,{ref:"asset_tab_list",id:"asset_tab_list",tab_list:n.tab_list,onClick_item:s.click_item},null,8,["tab_list","onClick_item"]),"standard"==n.asset_table_tab?(Ps(),Ls(r,{key:0,ref:"table_asset_standard",table_buttons:n.config_devices_standard.table_buttons,columns_config:n.config_devices_standard.columns_config,data_url:n.config_devices_standard.data_url,enable_search:n.config_devices_standard.enable_search,filter_buttons:n.config_devices_standard.table_filters},{default:ml((()=>[Ks(' :table_config="config_devices_standard.table_config"> ')])),_:1},8,["table_buttons","columns_config","data_url","enable_search","filter_buttons"])):Ys("v-if",!0),"centrality"==n.asset_table_tab?(Ps(),Ls(r,{key:1,ref:"table_asset_centrality",table_buttons:n.config_devices_centrality.table_buttons,columns_config:n.config_devices_centrality.columns_config,data_url:n.config_devices_centrality.data_url,enable_search:n.config_devices_centrality.enable_search,filter_buttons:n.config_devices_centrality.table_filters},{default:ml((()=>[Ks(' :table_config="config_devices_centrality.table_config"> ')])),_:1},8,["table_buttons","columns_config","data_url","enable_search","filter_buttons"])):Ys("v-if",!0)])]),Vs("div",vx,[Vs("button",mx,[hx,Ks(" "+te(n.i18n("map_page.delete_assets")),1)]),Vs("a",{href:n.get_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"asset_map.json",target:"_blank"},bx,8,gx)])]),Hs(c,{note_list:n.notes},null,8,["note_list"])])])},ix.__file="http_src/vue/page-asset-table.vue";var yx={components:{datatable:$w,"modal-delete-confirm":sx,NoteList:fv},props:{page_csrf:String,url_params:Object,view:String,table_filters:Array,is_admin:Boolean},created(){!function(e){const t=[];let a=[],l=0;e.get_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,url_params),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let n=ntopng_utility.clone(url_params);n.view=null;let s={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,n),enable_search:!0},o=[];for(let t of e.$props.table_filters||[])t.callbackFunction=(e,a)=>{n[t.filterMenuKey]=a.id,x.set_key_to_url(t.filterMenuKey,a.id),e.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,n)),NtopUtils.showOverlays(),e.ajax.reload(),NtopUtils.hideOverlays()},o.push(t);a=[{columnName:i18n("actions"),name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(t,a,l){return e.create_action_button_historical_flow_link(t,a,l)}},{columnName:i18n("map_page.last_seen"),name:"last_seen",data:"last_seen",className:"text-center text-nowrap",render:(e,t)=>e.value,responsivePriority:2},{columnName:i18n("map_page.client"),name:"client",data:"client",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.server"),name:"server",data:"server",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.port"),name:"port",data:"port",className:"text-center",responsivePriority:4},{columnName:i18n("map_page.protocol"),name:"l7proto",data:"protocol",className:"text-nowrap",responsivePriority:3},{columnName:i18n("map_page.first_seen"),name:"first_seen",data:"first_seen",visible:!1,responsivePriority:3},{columnName:i18n("duration"),name:"duration",data:"duration",className:"text-center text-nowrap",responsivePriority:3,orderable:!0},{columnName:i18n("map_page.observations"),name:"observations",data:"observations",className:"text-center",responsivePriority:4},{columnName:i18n("map_page.frequency"),name:"frequency",data:"frequency",className:"text-center",orderable:!0,responsivePriority:4,render:(e,t,a)=>"sort"==t||"type"==t?e:e+" sec"}],l=8;let i={serverSide:!0,order:[[l,"desc"]]},r=ntopng_utility.clone(s);r.table_buttons=s.table_buttons,r.data_url=`${r.data_url}`,r.columns_config=a,r.table_filters=o,r.table_config=ntopng_utility.clone(i),e.config_devices_standard=r}(this)},mounted(){$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),ntopng_events_manager.on_custom_event("page_periodicity_table",ntopng_custom_events.DATATABLE_LOADED,(()=>{x.get_url_entry("host")&&this.hide_dropdowns()}))},data:()=>({i18n:e=>i18n(e),base_url:`${http_prefix}/lua/pro/enterprise/get_map.lua`,config_devices_standard:null,config_devices_centrality:null,title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_download:i18n("map_page.download"),body_download:i18n("map_page.download_message"),notes:[i18n("map_page.table_note_periodicity_map")],get_url:null}),methods:{hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden"),$("#network_dropdown").removeClass("d-inline"),$("#vlan_id_dropdown").removeClass("d-inline")},create_action_button_historical_flow_link:function(e,t,a){let l={handlerId:"historical_flow_link",onClick:()=>{!function(e){const t=e.client.split("host=")[1].split(">")[0],a=t.substring(0,t.length-1),l=e.server.split("host=")[1].split(">")[0],n=l.substring(0,l.length-1),s=e.port,o=e.first_seen,i=e.last_seen.epoch_end,r={epoch_begin:o,epoch_end:i,srv_ip:`${n};eq`,cli_ip:`${a};eq`,srv_port:`${s};eq`},c=x.obj_to_url_params(r),u=`${http_prefix}/lua/pro/db_search.lua?${c}`;x.go_to_url(u)}(a)}},n={handlerId:"live_flow_link",onClick:()=>{!function(e){const t=e.client.split("host=")[1].split(">")[0],a=t.substring(0,t.length-1),l=e.server.split("host=")[1].split(">")[0],n=l.substring(0,l.length-1),s=e.port,o={server:`${n}`,client:`${a}`,port:`${s}`},i=x.obj_to_url_params(o),r=`${http_prefix}/lua/flows_stats.lua?${i}`;x.go_to_url(r)}(a)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:l,icon:"fas fa-stream",title:i18n("db_explorer.historical_data")},{class:"pointer",handler:n,icon:"fas fa-stream",title:i18n("live_flows")}])},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",page:this.url_params.page,csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)}),this.reload_table()}catch(e){this.reload_table()}},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},destroy:function(){this.get_active_table().destroy_table()},get_active_table:function(){return this.$refs.table_periodicity},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()}}};const wx={class:"row"},xx={class:"col-md-12 col-lg-12"},kx=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),$x={class:"card"},Sx=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Nx={class:"card-body"},Cx={id:"periodicity-table"},Ax={class:"card-footer"},Ex={key:0,type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Tx=Vs("i",{class:"fas fa-trash"},null,-1),Px=["href"],Ux=[Vs("i",{class:"fas fa-download"},null,-1)];yx.render=function(e,t,a,l,n,s){const o=kn("modal-delete-confirm"),i=kn("datatable"),r=kn("NoteList");return Ps(),Ms("div",wx,[Vs("div",xx,[kx,Vs("div",$x,[Sx,Vs("div",Nx,[Vs("div",Cx,[Hs(o,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(i,{ref:"table_periodicity",table_buttons:n.config_devices_standard.table_buttons,columns_config:n.config_devices_standard.columns_config,data_url:n.config_devices_standard.data_url,enable_search:n.config_devices_standard.enable_search,filter_buttons:n.config_devices_standard.table_filters,table_config:n.config_devices_standard.table_config,base_url:n.base_url,base_params:a.url_params},null,8,["table_buttons","columns_config","data_url","enable_search","filter_buttons","table_config","base_url","base_params"])])]),Vs("div",Ax,[a.is_admin?(Ps(),Ms("button",Ex,[Tx,Ks(" "+te(n.i18n("map_page.delete_services")),1)])):Ys("v-if",!0),Vs("a",{href:n.get_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"periodicity_map.json",target:"_blank"},Ux,8,Px)])]),Hs(r,{note_list:n.notes},null,8,["note_list"])])])},yx.__file="http_src/vue/page-periodicity-table.vue";const Ix={autoResize:!0,nodes:{shape:"dot",scaling:{min:10,max:30,label:{enabled:!0,min:8,max:30,drawThreshold:12}},font:{color:"#212529"},shadow:!1},edges:{width:.2,color:{inherit:"from"},smooth:{type:"continuous",roundness:0},arrows:{to:{enabled:!0,scaleFactor:.3}},arrowStrikethrough:!1,scaling:{min:1,max:5}},layout:{improvedLayout:!1},interaction:{hideEdgesOnDrag:!1,hideEdgesOnZoom:!0,hover:!1,tooltipDelay:0},physics:{enabled:!0,solver:"forceAtlas2Based",stabilization:{iterations:300,enabled:!0},forceAtlas2Based:{centralGravity:.01,springLength:100}},groups:{unknown:{shape:"dot"},printer:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},video:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},workstation:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},laptop:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},tablet:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},phone:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},tv:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},networking:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},wifi:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},nas:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},multimedia:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},iot:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}}}},Ox=function(e,t,a,l){$.post(`${http_prefix}/lua/pro/enterprise/switch_service_state.lua`,{service_id:e,service_status:t,csrf:l}).then((e=>{e.success&&a&&a()}))},jx=function(){return Ix},Mx="change_service_table_tab_event";var Lx={components:{datatable:$w,"modal-delete-confirm":sx,"tab-list":ex,NoteList:fv},props:{page_csrf:String,url_params:Object,view:String,table_filters:Array,is_admin:Boolean,service_acceptance:Array},created(){this.service_table_tab=x.get_url_entry("view")||"standard",x.set_key_to_url("view",this.service_table_tab),this.tab_list.forEach((e=>{this.service_table_tab==e.id&&(e.active=!0)})),function(e){const t=[];let a=[],l=0;e.get_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,url_params),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let n=url_params;n.view="standard";let s={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,n),enable_search:!0},o=[];for(let t of e.$props.table_filters||[])t.callbackFunction=(a,l)=>{n.view=e.service_table_tab,n[t.filterMenuKey]=l.id,x.set_key_to_url(t.filterMenuKey,l.id),a.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,n)),NtopUtils.showOverlays(),a.ajax.reload(),NtopUtils.hideOverlays()},o.push(t);a=[{columnName:i18n("actions"),name:"actions",data:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(t,a,l){return e.create_action_button_historical_flow_link(t,a,l)},createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("map_page.last_seen"),name:"last_seen",data:"last_seen",className:"text-center text-nowrap",render:(e,t)=>e.value,responsivePriority:2},{columnName:i18n("map_page.client"),name:"client",data:"client",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.server"),name:"server",data:"server",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.port"),name:"port",data:"port",className:"text-center",responsivePriority:4},{columnName:i18n("map_page.protocol"),name:"l7proto",data:"protocol",className:"text-nowrap",responsivePriority:3},{columnName:i18n("map_page.first_seen"),name:"first_seen",data:"first_seen",visible:!1,responsivePriority:3},{columnName:i18n("map_page.num_uses"),name:"num_uses",data:"num_uses",className:"text-center text-nowrap",responsivePriority:4},{columnName:i18n("map_page.info"),name:"info",data:"info",responsivePriority:5}],l=7,e.is_admin&&a.push({columnName:i18n("map_page.status"),name:"service_acceptance",data:"service_acceptance",className:"text-center",orderable:!1,responsivePriority:1,render:(t,a,l)=>e.create_action_buttons(t,a,l)});let i={serverSide:!0,order:[[l,"desc"]]},r=ntopng_utility.clone(s);r.table_buttons=s.table_buttons,r.data_url=`${r.data_url}`,r.columns_config=a,r.table_filters=o,r.table_config=ntopng_utility.clone(i),e.config_devices_standard=r,n.view="centrality",s.data_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,n),a=[{columnName:i18n("map_page.host"),name:"host",data:"host",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.total_edges"),name:"total_edges",data:"total_edges",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.rank"),name:"rank",data:"rank",className:"text-center",responsivePriority:2},{columnName:i18n("map_page.in_edges"),name:"in_edges",data:"in_edges",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.out_edges"),name:"out_edges",data:"out_edges",className:"text-center",responsivePriority:2}],l=2,i.order=[[l,"desc"]],r=ntopng_utility.clone(s),r.table_buttons=s.table_buttons,r.data_url=`${r.data_url}`,r.columns_config=a,r.table_filters=o,r.table_config=ntopng_utility.clone(i),e.config_devices_centrality=r}(this)},mounted(){C.on_custom_event("page_service_table",ntopng_custom_events.DATATABLE_LOADED,(()=>{x.get_url_entry("host")&&this.hide_dropdowns()})),C.on_custom_event("change_service_table_tab",Mx,(e=>{let t=this.get_active_table();x.set_key_to_url("view",e),t.delete_button_handlers(this.service_table_tab),t.destroy_table(),this.service_table_tab=e})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog()))},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null,title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),get_url:null,service_table_tab:null,notes:[i18n("map_page.table_note_service_map")],tab_list:[{title:i18n("map_page.standard_view"),active:"standard"==view,id:"standard"},{title:i18n("map_page.centrality_view"),active:"centrality"==view,id:"centrality"}]}),methods:{hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden"),$("#network_dropdown").removeClass("d-inline"),$("#vlan_id_dropdown").removeClass("d-inline")},destroy:function(){let e=this.get_active_table();e.delete_button_handlers(this.service_table_tab),e.destroy_table()},click_item:function(e){this.tab_list.forEach((e=>e.active=!1)),e.active=!0,C.emit_custom_event(Mx,e.id)},create_action_buttons:function(e,t,a){const l=this.reload_table,n=this.$props.page_csrf,s={onClick:()=>{Ox(a.hash_id,this.$props.service_acceptance[0].id,l,n)}},o={onClick:()=>{Ox(a.hash_id,this.$props.service_acceptance[1].id,l,n)}},i={onClick:()=>{Ox(a.hash_id,this.$props.service_acceptance[2].id,l,n)}};if("display"!==t)return e;const r=a.acceptance,c={class:"dropdown-item",href:"#",title:this.$props.service_acceptance[0].label,handler:s},u={class:"dropdown-item",href:"#",title:this.$props.service_acceptance[1].label,handler:o},d={class:"dropdown-item disabled",href:"#",title:this.$props.service_acceptance[2].label,handler:i};switch(r){case 0:c.class="dropdown-item active";break;case 1:u.class="dropdown-item active";break;case 2:d.class="dropdown-item active disabled"}return DataTableUtils.createActionButtons([d,c,u])},create_action_button_historical_flow_link:function(e,t,a){let l={handlerId:"historical_flow_link",onClick:()=>{!function(e){const t=e.client.split("host=")[1].split(">")[0],a=t.substring(0,t.length-1),l=e.server.split("host=")[1].split(">")[0],n=l.substring(0,l.length-1),s=e.port,o=e.first_seen,i=e.last_seen.epoch_end,r={epoch_begin:o,epoch_end:i,srv_ip:`${n};eq`,cli_ip:`${a};eq`,srv_port:`${s};eq`},c=x.obj_to_url_params(r),u=`${http_prefix}/lua/pro/db_search.lua?${c}`;x.go_to_url(u)}(a)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:l,icon:"fas fa-stream",title:i18n("db_explorer.historical_data")}])},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",page:this.url_params.page,csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)}),this.reload_table()}catch(e){this.reload_table()}},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},get_active_table:function(){return this.$refs[`table_service_${this.service_table_tab}`]},switch_to_standard:function(){this.url_params.view="standard",document.location.href=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/network_maps.lua`,url_params)},switch_to_centrality:function(){this.url_params.view="centrality",document.location.href=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/network_maps.lua`,url_params)},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()}}};const Fx={class:"row"},Rx={class:"col-md-12 col-lg-12"},Dx=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),zx={class:"card"},qx=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Bx={class:"card-body"},Vx={id:"table_service"},Hx={class:"card-footer"},Gx={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Wx=Vs("i",{class:"fas fa-trash"},null,-1),Kx=["href"],Jx=[Vs("i",{class:"fas fa-download"},null,-1)];Lx.render=function(e,t,a,l,n,s){const o=kn("modal-delete-confirm"),i=kn("tab-list"),r=kn("datatable"),c=kn("NoteList");return Ps(),Ms("div",Fx,[Vs("div",Rx,[Dx,Vs("div",zx,[qx,Vs("div",Bx,[Vs("div",Vx,[Hs(o,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(i,{ref:"service_tab_list",id:"service_tab_list",tab_list:n.tab_list,onClick_item:s.click_item},null,8,["tab_list","onClick_item"]),"standard"==n.service_table_tab?(Ps(),Ls(r,{key:0,ref:"table_service_standard",table_buttons:n.config_devices_standard.table_buttons,columns_config:n.config_devices_standard.columns_config,data_url:n.config_devices_standard.data_url,enable_search:n.config_devices_standard.enable_search,filter_buttons:n.config_devices_standard.table_filters,table_config:n.config_devices_standard.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","filter_buttons","table_config"])):Ys("v-if",!0),"centrality"==n.service_table_tab?(Ps(),Ls(r,{key:1,ref:"table_service_centrality",table_buttons:n.config_devices_centrality.table_buttons,columns_config:n.config_devices_centrality.columns_config,data_url:n.config_devices_centrality.data_url,enable_search:n.config_devices_centrality.enable_search,filter_buttons:n.config_devices_centrality.table_filters,table_config:n.config_devices_centrality.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","filter_buttons","table_config"])):Ys("v-if",!0)])]),Vs("div",Hx,[Ys('\n        {% if is_admin then %}\n          <form class="d-inline" id=\'switch-state-form\'>\n            <div class="form-group mb-3 d-inline">\n              <label>{* i18n("map_page.set_state", {label = "<span class=\'count\'></span>"}) *}</label>\n              <select name="new_state" class="form-select d-inline" style="width: 16rem" {{ ternary(map.services_num == 0, "disabled=\'disabled\'", "") }}>\n              {% for _, status in pairsByField(map.filters.service_status_filters, label, asc_insensitive) do %}\n                <option value="{{ status.id }}">{* status.label *}</option>\n              {% end %}\n              </select>\n              <button class="btn btn-secondary d-inline" class="btn-switch-state" {{ ternary(map.services_num == 0, "disabled=\'disabled\'", "") }}>\n                <i class="fas fa-random"></i> {{ i18n("set") }}\n              </button>\n            </div>\n          </form>\n        {% end %}\n    '),Vs("button",Gx,[Wx,Ks(" "+te(n.i18n("map_page.delete_services")),1)]),Vs("a",{href:n.get_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"service_map.json",target:"_blank"},Jx,8,Kx)])]),Hs(c,{note_list:n.notes},null,8,["note_list"])])])},Lx.__file="http_src/vue/page-service-table.vue";const Yx={key:0,class:"alert alert-info"},Zx=["id"];var Xx={__name:"network-map",props:{empty_message:String,event_listeners:Object,page_csrf:String,url:String,url_params:Object,map_id:String},setup(e,{expose:t}){const a=e,l={ifid:a.url_params.ifid,action:"load_graph",map:a.url_params.map_id};let n={},s={},o=!1,i=null;const r=va(!1),c=va(!0),u=va(!1),d=va({}),_=va(null),p=va(null),f=va(null);_n((async()=>{const e=document.getElementById(a.map_id);h(),await v(),p.value=jx(),i=new vis.Network(e,_.value,p.value),g()})),vn((()=>{1!=u.value&&b()}));const v=async()=>{d.value=a.url_params;const e=NtopUtils.buildURL(a.url,d.value);await $.get(e,l,(async function(e){const{nodes:t,edges:a,max_entry_reached:l}=e.rsp;r.value=l,n=new vis.DataSet(t.map((e=>(e.title=(e=>{const t=document.createElement("div");return t.innerHTML=`<b>${e.label}</b><br><br>${i18n("db_explorer.host_data")}: ${e.id}`,t})(e),e)))),s=new vis.DataSet(a),_.value={nodes:n,edges:s},f.value=n.get({returnType:"Object"}),m()}))},m=()=>{0==_.value?.nodes.length&&0==_.value?.edges.length?c.value=!0:c.value=!1},h=()=>{const e=NtopUtils.loadElementScale($(".resizable-y-container"));if(null!=e)$(".resizable-y-container").width(e.width),$(".resizable-y-container").height(e.height),$(".resizable-y-container").on("mouseup",(function(){const e={width:$(".resizable-y-container").width(),height:$(".resizable-y-container").height()};NtopUtils.saveElementScale($(this),e)}));else{const e={width:$(".resizable-y-container").width(),height:$(".resizable-y-container").height()};NtopUtils.saveElementScale($(this),e)}};const g=()=>{i.on("stabilizationIterationsDone",(function(){i.setOptions({physics:!1})})),i.on("click",(function(e){!function(e){if(e.nodes.length>0){var t,a;o=!0;var l=e.nodes[0];for(var s in f.value)f.value[s].old_color||(f.value[s].old_color=f.value[s].color),f.value[s].old_icon_color||(f.value[s].old_icon_color=f.value[s].icon),f.value[s].color="#c8c8c8",f.value[s].icon={color:"#c8c8c8"},void 0===f.value[s].hiddenLabel&&(f.value[s].hiddenLabel=f.value[s].label,f.value[s].label=void 0);var r=i.getConnectedNodes(l),c=[];for(t=1;t<2;t++)for(a=0;a<r.length;a++)c=c.concat(i.getConnectedNodes(r[a]));for(t=0;t<r.length;t++)f.value[r[t]].color=f.value[r[t]].old_color,f.value[r[t]].icon=f.value[r[t]].old_icon_color,void 0!==f.value[r[t]].hiddenLabel&&(f.value[r[t]].label=f.value[r[t]].hiddenLabel,f.value[r[t]].hiddenLabel=void 0);f.value[l].color=f.value[l].old_color,f.value[l].icon=f.value[l].old_icon_color,void 0!==f.value[l].hiddenLabel&&(f.value[l].label=f.value[l].hiddenLabel,f.value[l].hiddenLabel=void 0)}else if(!0===o){for(var s in f.value)f.value[s].color=f.value[s].old_color,f.value[s].icon=f.value[s].old_icon_color,void 0!==f.value[s].hiddenLabel&&(f.value[s].label=f.value[s].hiddenLabel,f.value[s].hiddenLabel=void 0);o=!1}var u=[];for(s in f.value)f.value.hasOwnProperty(s)&&u.push(f.value[s]);n.update(u)}(e)})),i.on("doubleClick",(function(e){(async e=>{const t=e.id.split("@");d.value.host=t[0],d.value.vlan_id=t[1],x.set_key_to_url("host",d.value.host),x.set_key_to_url("vlan_id",d.value.vlan_id),C.emit_custom_event(ntopng_custom_events.CHANGE_PAGE_TITLE,e),await y()})(n.get(e.nodes[0]))})),i.on("afterDrawing",(function(e){C.emit_custom_event(ntopng_custom_events.VIS_DATA_LOADED)}));for(const e in a.event_listeners||{})i.on(e,a.event_listeners[e])},b=()=>{null!=i&&i.destroy(!0),u.value=!0},y=async()=>{await v(),null!=i&&(i.setOptions({physics:p.value.physics}),i.setData(_.value))};return t({reload:y,destroy:b,is_max_entry_reached:()=>r.value,autolayout:()=>{null!=i?i instanceof vis.Network?i.stabilize():console.error("Not a vis.Network instance!"):console.error("The network is undefined!")},update_url_params:e=>{d.value=e}}),(t,a)=>(Ps(),Ms(Ss,null,[c.value?(Ps(),Ms("div",Yx,te(e.empty_message),1)):Ys("v-if",!0),Vs("div",{class:"d-flex justify-content-center align-items-center resizable-y-container",style:{width:"100%",height:"60vh"},id:e.map_id},null,8,Zx)],64))},__file:"http_src/vue/network-map.vue"},Qx={__name:"modal-autolayout-confirm",props:{body:String,title:String},emits:["autolayout"],setup(e,{expose:t,emit:a}){const l=va(null),n=()=>{a("autolayout"),s()},s=()=>{l.value.close()};t({show:()=>{l.value.show()},close:s}),_n((()=>{}));const o=e=>i18n(e);return(t,a)=>(Ps(),Ls(sp,{onShowed:a[0]||(a[0]=e=>{}),ref_key:"modal_id",ref:l},{title:ml((()=>[Ks(te(e.title),1)])),body:ml((()=>[Ks(te(e.body),1)])),footer:ml((()=>[Vs("button",{type:"button",onClick:n,class:"btn btn-primary"},te(o("confirm")),1)])),_:1},512))},__file:"http_src/vue/modal-autolayout-confirm.vue"};const ek="change_filter_event";var tk={components:{"network-map":Xx,"modal-delete-confirm":sx,"modal-autolayout-confirm":Qx,"select-search":n_,NoteList:fv},props:{page_csrf:String,ifid:Number,url_params:Object,map_id:String,is_admin:Boolean,all_filter_list:Object},created(){!function(e){for(const t in e.$props.all_filter_list){e.filter_list.push(e.$props.all_filter_list[t]);const a=ntopng_url_manager.get_url_entry(t);for(let[l,n]of Object.entries(e.$props.all_filter_list[t]))n.filter_name=t,a?n.id==a&&e.active_filter_list.push(n):1==n.currently_active&&e.active_filter_list.push(n)}e.get_url=`${http_prefix}/lua/pro/rest/v2/get/interface/map/data.lua`,e.download_url=NtopUtils.buildURL(e.get_url,e.$props.url_params),e.event_listeners={}}(this)},mounted(){const e=this.max_entry_reached,t=this.reload_map;this.$props.url_params.host&&""!=this.$props.url_params.host&&this.hide_dropdowns(),C.on_custom_event("page_service_map",ntopng_custom_events.CHANGE_PAGE_TITLE,(e=>{this.hide_dropdowns()})),C.on_custom_event("change_filter_event",ek,(e=>{this.active_filter_list.forEach(((t,a)=>{t.filter_name==e.filter_name&&(this.active_filter_list[a]=e)})),ntopng_url_manager.set_key_to_url(e.filter_name,e.key),this.url_params[e.filter_name]=e.key,this.update_and_reload_map()})),C.on_custom_event(this.get_map(),ntopng_custom_events.VIS_DATA_LOADED,(t=>{e()?$("#max-entries-reached").removeAttr("hidden"):$("#max-entries-reached").attr("hidden","hidden"),NtopUtils.hideOverlays()}));let a=ntopng_url_manager.get_url_entries();for(const[e,t]of a)this.url_params[e]=t;$("#reload-graph").click((function(e){t()})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),$("#autolayout").click((()=>this.show_autolayout_dialog()))},data:()=>({i18n:e=>i18n(e),container:null,update_view_state_id:null,get_url:null,download_url:null,filter_list:[],active_filter_list:[],event_listeners:{},title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_autolayout:i18n("map_page.autolayout_services"),body_autolayout:i18n("map_page.autolayout_services_message"),no_services_message:i18n("map_page.no_services"),max_entry_title:i18n("max_entries_reached"),notes:[i18n("map_page.graph_note_service_map")]}),methods:{destroy:function(){this.get_map().destroy()},click_item:function(e){C.emit_custom_event(ek,e)},get_map:function(){return this.$refs.service_map},max_entry_reached:function(){return this.get_map().is_max_entry_reached()},reload_map:async function(){NtopUtils.showOverlays();let e=this.get_map();await e.reload()},update_and_reload_map:async function(){let e=this.get_map();NtopUtils.showOverlays(),e.update_url_params(this.url_params),await e.reload()},autolayout:function(){this.get_map().autolayout()},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_autolayout_dialog:function(){this.$refs.modal_autolayout.show()},hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)})}finally{this.reload_map()}}}};const ak={class:"row"},lk={class:"col-md-12 col-lg-12"},nk={class:"card card-shadow"},sk=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),ok={class:"card-body"},ik={id:"table_service"},rk={class:"d-flex align-items-center justify-content-end mb-2"},ck=["title"],uk=[Vs("i",{class:"text-danger fa-solid fa-triangle-exclamation"},null,-1)],dk={class:"d-flex ms-auto"},_k={class:"m-1"},pk=Vs("button",{type:"button",id:"reload-graph",class:"btn btn-link btn-reload-graph"},[Vs("i",{class:"fas fa-sync"})],-1),fk=Vs("button",{type:"button",id:"autolayout",class:"btn btn-link btn-stabilize"},[Vs("i",{class:"fas fa-magic"})],-1),vk={class:"card-footer"},mk={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},hk=Vs("i",{class:"fas fa-trash"},null,-1),gk=["href"],bk=[Vs("i",{class:"fas fa-download"},null,-1)];tk.render=function(e,t,a,l,n,s){const o=kn("select-search"),i=kn("modal-delete-confirm"),r=kn("modal-autolayout-confirm"),c=kn("network-map"),u=kn("NoteList");return Ps(),Ms("div",ak,[Vs("div",lk,[Vs("div",nk,[sk,Vs("div",ok,[Vs("div",ik,[Vs("div",rk,[Vs("button",{id:"max-entries-reached",type:"button",class:"btn btn-link",title:n.max_entry_title,disabled:"",hidden:""},uk,8,ck),Vs("div",dk,[(Ps(!0),Ms(Ss,null,En(n.filter_list,((e,t)=>(Ps(),Ms("div",_k,[Hs(o,{selected_option:n.active_filter_list[t],"onUpdate:selected_option":e=>n.active_filter_list[t]=e,options:n.filter_list[t],onSelect_option:s.click_item},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256))]),pk,fk]),Hs(i,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(r,{ref:"modal_autolayout",title:n.title_autolayout,body:n.body_autolayout,onAutolayout:s.reload_map},null,8,["title","body","onAutolayout"]),Hs(c,{ref:"service_map",empty_message:n.no_services_message,event_listeners:n.event_listeners,page_csrf:a.page_csrf,url:n.get_url,url_params:a.url_params,map_id:a.map_id},null,8,["empty_message","event_listeners","page_csrf","url","url_params","map_id"])])]),Vs("div",vk,[Vs("button",mk,[hk,Ks(" "+te(n.i18n("map_page.delete_services")),1)]),Vs("a",{href:n.download_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"service_map.json",target:"_blank"},bk,8,gk)])]),Hs(u,{note_list:n.notes},null,8,["note_list"])])])},tk.__file="http_src/vue/page-service-map.vue";const yk="change_filter_event";var wk={components:{"network-map":Xx,"modal-delete-confirm":sx,"modal-autolayout-confirm":Qx,"select-search":n_,NoteList:fv},props:{page_csrf:String,ifid:Number,url_params:Object,map_id:String,is_admin:Boolean,all_filter_list:Object},created(){!function(e){for(const t in e.$props.all_filter_list){e.filter_list.push(e.$props.all_filter_list[t]);const a=ntopng_url_manager.get_url_entry(t);for(let[l,n]of Object.entries(e.$props.all_filter_list[t]))n.filter_name=t,a?n.id==a&&e.active_filter_list.push(n):1==n.currently_active&&e.active_filter_list.push(n)}e.get_url=`${http_prefix}/lua/pro/rest/v2/get/interface/map/data.lua`,e.download_url=NtopUtils.buildURL(e.get_url,e.updated_url_params),e.event_listeners={}}(this)},mounted(){this.updated_url_params=this.$props.url_params;let e=ntopng_url_manager.get_url_entries();for(const[t,a]of e)this.updated_url_params[t]=a;const t=this.max_entry_reached,a=this.reload_map;this.update_and_reload_map(),this.$props.url_params.host&&""!=this.$props.url_params.host&&this.hide_dropdowns(),C.on_custom_event("page_periodicity_map",ntopng_custom_events.CHANGE_PAGE_TITLE,(e=>{this.hide_dropdowns()})),C.on_custom_event("change_filter_event",yk,(e=>{this.active_filter_list.forEach(((t,a)=>{t.filter_name==e.filter_name&&(this.active_filter_list[a]=e)})),ntopng_url_manager.set_key_to_url(e.filter_name,e.key),this.url_params[e.filter_name]=e.key,this.update_and_reload_map()})),C.on_custom_event(this.get_map(),ntopng_custom_events.VIS_DATA_LOADED,(e=>{t()?$("#max-entries-reached").removeAttr("hidden"):$("#max-entries-reached").attr("hidden","hidden"),NtopUtils.hideOverlays()})),$("#reload-graph").click((function(e){a()})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),$("#autolayout").click((()=>this.show_autolayout_dialog()))},data:()=>({i18n:e=>i18n(e),container:null,update_view_state_id:null,get_url:null,download_url:null,updated_url_params:{},filter_list:[],active_filter_list:[],event_listeners:{},title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_autolayout:i18n("map_page.autolayout_services"),body_autolayout:i18n("map_page.autolayout_services_message"),no_services_message:i18n("map_page.no_services"),max_entry_title:i18n("max_entries_reached"),notes:[i18n("map_page.graph_note_periodicity_map")]}),methods:{destroy:function(){this.get_map().destroy()},click_item:function(e){C.emit_custom_event(yk,e)},get_map:function(){return this.$refs.periodicity_map},max_entry_reached:function(){return this.get_map().is_max_entry_reached()},reload_map:async function(){NtopUtils.showOverlays();let e=this.get_map();await e.reload()},hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},update_and_reload_map:async function(){let e=this.get_map();NtopUtils.showOverlays(),e.update_url_params(this.updated_url_params),await e.reload()},autolayout:function(){this.get_map().autolayout()},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_autolayout_dialog:function(){this.$refs.modal_autolayout.show()},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.updated_url_params.ifid,action:"reset",csrf:this.$props.page_csrf,map:this.updated_url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)})}finally{this.reload_map()}}}};const xk={class:"row"},kk={class:"col-md-12 col-lg-12"},$k={class:"card card-shadow"},Sk=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Nk={class:"card-body"},Ck={id:"table_periodicity"},Ak={class:"d-flex align-items-center justify-content-end mb-2"},Ek=["title"],Tk=[Vs("i",{class:"text-danger fa-solid fa-triangle-exclamation"},null,-1)],Pk={class:"d-flex ms-auto"},Uk={class:"m-1"},Ik=Vs("button",{type:"button",id:"reload-graph",class:"btn btn-link btn-reload-graph"},[Vs("i",{class:"fas fa-sync"})],-1),Ok=Vs("button",{type:"button",id:"autolayout",class:"btn btn-link btn-stabilize"},[Vs("i",{class:"fas fa-magic"})],-1),jk={class:"card-footer"},Mk={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Lk=Vs("i",{class:"fas fa-trash"},null,-1),Fk=["href"],Rk=[Vs("i",{class:"fas fa-download"},null,-1)];wk.render=function(e,t,a,l,n,s){const o=kn("select-search"),i=kn("modal-delete-confirm"),r=kn("modal-autolayout-confirm"),c=kn("network-map"),u=kn("NoteList");return Ps(),Ms("div",xk,[Vs("div",kk,[Vs("div",$k,[Sk,Vs("div",Nk,[Vs("div",Ck,[Vs("div",Ak,[Vs("button",{id:"max-entries-reached",type:"button",class:"btn btn-link",title:n.max_entry_title,disabled:"",hidden:""},Tk,8,Ek),Vs("div",Pk,[(Ps(!0),Ms(Ss,null,En(n.filter_list,((e,t)=>(Ps(),Ms("div",Uk,[Hs(o,{selected_option:n.active_filter_list[t],"onUpdate:selected_option":e=>n.active_filter_list[t]=e,options:n.filter_list[t],onSelect_option:s.click_item},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256))]),Ik,Ok]),Hs(i,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(r,{ref:"modal_autolayout",title:n.title_autolayout,body:n.body_autolayout,onAutolayout:s.reload_map},null,8,["title","body","onAutolayout"]),Hs(c,{ref:"periodicity_map",empty_message:n.no_services_message,event_listeners:n.event_listeners,page_csrf:a.page_csrf,url:n.get_url,url_params:a.url_params,map_id:a.map_id},null,8,["empty_message","event_listeners","page_csrf","url","url_params","map_id"])])]),Vs("div",jk,[Vs("button",Mk,[Lk,Ks(" "+te(n.i18n("map_page.delete_services")),1)]),Vs("a",{href:n.download_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"periodicity_map.json",target:"_blank"},Rk,8,Fk)])]),Hs(u,{note_list:n.notes},null,8,["note_list"])])])},wk.__file="http_src/vue/page-periodicity-map.vue";const Dk="change_filter_event";var zk={components:{"network-map":Xx,"modal-delete-confirm":sx,"modal-autolayout-confirm":Qx,"select-search":n_,NoteList:fv},props:{page_csrf:String,ifid:Number,url_params:Object,map_id:String,is_admin:Boolean,all_filter_list:Object},created(){!function(e){for(const t in e.$props.all_filter_list){e.filter_list.push(e.$props.all_filter_list[t]);const a=x.get_url_entry(t);for(let[l,n]of Object.entries(e.$props.all_filter_list[t]))n.filter_name=t,a?n.id==a&&e.active_filter_list.push(n):1==n.currently_active&&e.active_filter_list.push(n)}e.get_url=`${http_prefix}/lua/pro/rest/v2/get/interface/map/data.lua`,e.download_url=NtopUtils.buildURL(e.get_url,e.$props.url_params),e.event_listeners={}}(this)},mounted(){const e=this.max_entry_reached,t=this.reload_map;this.$props.url_params.host&&""!=this.$props.url_params.host&&this.hide_dropdowns(),C.on_custom_event("page_service_map",ntopng_custom_events.CHANGE_PAGE_TITLE,(e=>{this.hide_dropdowns()})),C.on_custom_event("change_filter_event",Dk,(e=>{this.active_filter_list.forEach(((t,a)=>{t.filter_name==e.filter_name&&(this.active_filter_list[a]=e)})),x.set_key_to_url(e.filter_name,e.key),this.url_params[e.filter_name]=e.key,this.update_and_reload_map()})),C.on_custom_event(this.get_map(),ntopng_custom_events.VIS_DATA_LOADED,(t=>{e()?$("#max-entries-reached").removeAttr("hidden"):$("#max-entries-reached").attr("hidden","hidden"),NtopUtils.hideOverlays()}));let a=x.get_url_entries();for(const[e,t]of a)this.url_params[e]=t;$("#reload-graph").click((function(e){t()})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),$("#autolayout").click((()=>this.show_autolayout_dialog()))},data:()=>({i18n:e=>i18n(e),container:null,update_view_state_id:null,get_url:null,download_url:null,filter_list:[],active_filter_list:[],event_listeners:{},title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_autolayout:i18n("map_page.autolayout_services"),body_autolayout:i18n("map_page.autolayout_services_message"),no_services_message:i18n("map_page.no_services"),max_entry_title:i18n("max_entries_reached"),notes:[i18n("map_page.graph_note_asset_map")]}),methods:{destroy:function(){this.get_map().destroy()},click_item:function(e){C.emit_custom_event(Dk,e)},get_map:function(){return this.$refs.asset_map},hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},max_entry_reached:function(){return this.get_map().is_max_entry_reached()},reload_map:async function(){NtopUtils.showOverlays();let e=this.get_map();await e.reload()},update_and_reload_map:async function(){let e=this.get_map();NtopUtils.showOverlays(),e.update_url_params(this.url_params),await e.reload()},autolayout:function(){this.get_map().autolayout()},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_autolayout_dialog:function(){this.$refs.modal_autolayout.show()},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)})}finally{NtopUtils.showOverlays(),this.reload_map()}}}};const qk={class:"row"},Bk={class:"col-md-12 col-lg-12"},Vk={class:"card card-shadow"},Hk=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Gk={class:"card-body"},Wk={id:"table_asset"},Kk={class:"d-flex align-items-center justify-content-end mb-2"},Jk=["title"],Yk=[Vs("i",{class:"text-danger fa-solid fa-triangle-exclamation"},null,-1)],Zk={class:"d-flex ms-auto"},Xk={class:"m-1"},Qk=Vs("button",{type:"button",id:"reload-graph",class:"btn btn-link btn-reload-graph"},[Vs("i",{class:"fas fa-sync"})],-1),e$=Vs("button",{type:"button",id:"autolayout",class:"btn btn-link btn-stabilize"},[Vs("i",{class:"fas fa-magic"})],-1),t$={class:"card-footer"},a$={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},l$=Vs("i",{class:"fas fa-trash"},null,-1),n$=["href"],s$=[Vs("i",{class:"fas fa-download"},null,-1)];zk.render=function(e,t,a,l,n,s){const o=kn("select-search"),i=kn("modal-delete-confirm"),r=kn("modal-autolayout-confirm"),c=kn("network-map"),u=kn("NoteList");return Ps(),Ms("div",qk,[Vs("div",Bk,[Vs("div",Vk,[Hk,Vs("div",Gk,[Vs("div",Wk,[Vs("div",Kk,[Vs("button",{id:"max-entries-reached",type:"button",class:"btn btn-link",title:n.max_entry_title,disabled:"",hidden:""},Yk,8,Jk),Vs("div",Zk,[(Ps(!0),Ms(Ss,null,En(n.filter_list,((e,t)=>(Ps(),Ms("div",Xk,[Hs(o,{selected_option:n.active_filter_list[t],"onUpdate:selected_option":e=>n.active_filter_list[t]=e,options:n.filter_list[t],onSelect_option:s.click_item},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256))]),Qk,e$]),Hs(i,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(r,{ref:"modal_autolayout",title:n.title_autolayout,body:n.body_autolayout,onAutolayout:s.reload_map},null,8,["title","body","onAutolayout"]),Hs(c,{ref:"asset_map",empty_message:n.no_services_message,event_listeners:n.event_listeners,page_csrf:a.page_csrf,url:n.get_url,url_params:a.url_params,map_id:a.map_id},null,8,["empty_message","event_listeners","page_csrf","url","url_params","map_id"])])]),Vs("div",t$,[Vs("button",a$,[l$,Ks(" "+te(n.i18n("map_page.delete_services")),1)]),Vs("a",{href:n.download_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"asset_map.json",target:"_blank"},s$,8,n$)])]),Hs(u,{note_list:n.notes},null,8,["note_list"])])])},zk.__file="http_src/vue/page-asset-map.vue";const o$={class:"form-group mb-3 row"},i$={class:"col-form-label col-sm-4"},r$={class:"col-sm-7"},c$=Vs("div",{class:"invalid-feedback"},null,-1),u$={class:"form-group mb-3 row"},d$={class:"col-form-label col-sm-4 pt-2"},_$={class:"form-switch col-sm-7 pt-2 ps-3"},p$={class:"col-form-label"};var f$={__name:"modal-add-device-exclusion",props:{body:String,title:String,footer:String,list_notes:String},emits:["add"],setup(e,{expose:t,emit:a}){const l=va(""),n=va(""),s=va(null),o=()=>{a("add",{mac_list:l.value,trigger_alerts:n.value}),i()},i=()=>{s.value.close()};t({show:()=>{l.value="",s.value.show()},close:i}),_n((()=>{}));const r=e=>i18n(e);return(t,a)=>(Ps(),Ls(sp,{onShowed:a[2]||(a[2]=e=>{}),ref_key:"modal_id",ref:s},{title:ml((()=>[Ks(te(e.title),1)])),body:ml((()=>[Vs("div",o$,[Vs("label",i$,te(e.body),1),Vs("div",r$,[wn(Vs("textarea",{name:"items-list",id:"itemslist-textarea",class:"w-100 form-control",rows:"6","onUpdate:modelValue":a[0]||(a[0]=e=>l.value=e)},null,512),[[ji,l.value]]),Vs("small",null,te(e.list_notes),1),c$])]),Vs("div",u$,[Vs("label",d$,te(r("edit_check.trigger_device_disconnected_alert")),1),Vs("div",_$,[wn(Vs("input",{type:"checkbox",class:"form-check-input ms-0","onUpdate:modelValue":a[1]||(a[1]=e=>n.value=e)},null,512),[[Mi,n.value]])]),Vs("small",p$,te(r("edit_check.trigger_device_disconnected_alert_descr")),1)])])),footer:ml((()=>[Ks(te(r("host_details.notes"))+": "+te(e.footer)+" ",1),Vs("button",{type:"button",onClick:o,class:"btn btn-primary"},te(r("add")),1)])),_:1},512))},__file:"http_src/vue/modal-add-device-exclusion.vue"};const v$={key:0,class:"form-group mb-3 row"},m$={class:"col-form-label col-sm-4"},h$={class:"col-sm-7"},g$=["placeholder"],b$={class:"form-group mb-3 row"},y$={class:"col-form-label col-sm-4"},w$={class:"col-sm-7"},x$={class:"form-group mb-3 row"},k$={class:"col-form-label col-sm-4 pt-2"},$$={class:"form-switch col-sm-7 pt-2 ps-3"},S$={class:"col-form-label"};var N$={__name:"modal-edit-device-exclusion",props:{title:String,title_edit_all:String},emits:["edit"],setup(e,{expose:t,emit:a}){const l=va(""),n=va(""),s=va(""),o=va(i18n("if_stats_config.custom_name")),i=va(null),r=e=>i18n(e),c=va([{id:"allowed",value:"allowed",label:r("edit_check.authorized")},{id:"denied",value:"denied",label:r("edit_check.unauthorized")}]),u=va(!1),d=()=>{0==u.value?a("edit",{mac_alias:l.value,mac_status:n.value.value,trigger_alerts:s.value}):a("edit",{mac_status:n.value.value,trigger_alerts:s.value,mac_alias:"all"}),_()},_=()=>{i.value.close()};return t({show:e=>{if(null!=e){let t=null;c.value.forEach((a=>{a.id==e.status&&(t=a)})),n.value=t,l.value=e.mac_address.mac,s.value=e.trigger_alert||!1}else n.value=c.value[0],u.value=!0;i.value.show()},close:_}),_n((()=>{})),(t,a)=>(Ps(),Ls(sp,{onShowed:a[3]||(a[3]=e=>{}),ref_key:"modal_id",ref:i},{title:ml((()=>[0==u.value?(Ps(),Ms(Ss,{key:0},[Ks(te(e.title),1)],64)):(Ps(),Ms(Ss,{key:1},[Ks(te(e.title_edit_all),1)],64))])),body:ml((()=>[0==u.value?(Ps(),Ms("div",v$,[Vs("label",m$,te(r("edit_check.device_alias")),1),Vs("div",h$,[wn(Vs("input",{type:"text",name:"custom_name",class:"form-control",placeholder:o.value,"onUpdate:modelValue":a[0]||(a[0]=e=>l.value=e)},null,8,g$),[[ji,l.value]])])])):Ys("v-if",!0),Vs("div",b$,[Vs("label",y$,te(r("edit_check.device_status")),1),Vs("div",w$,[Hs(n_,{selected_option:n.value,"onUpdate:selected_option":a[1]||(a[1]=e=>n.value=e),options:c.value},null,8,["selected_option","options"])])]),Vs("div",x$,[Vs("label",k$,te(r("edit_check.trigger_device_disconnected_alert")),1),Vs("div",$$,[wn(Vs("input",{type:"checkbox",class:"form-check-input ms-0","onUpdate:modelValue":a[2]||(a[2]=e=>s.value=e)},null,512),[[Mi,s.value]])]),Vs("small",S$,te(r("edit_check.trigger_device_disconnected_alert_descr")),1)])])),footer:ml((()=>[Vs("button",{type:"button",onClick:d,class:"btn btn-primary"},te(r("edit")),1)])),_:1},512))},__file:"http_src/vue/modal-edit-device-exclusion.vue"};const C$={class:"row"},A$={class:"col-md-12 col-lg-12"},E$=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),T$={class:"card"},P$={class:"card-body"},U$={key:0,class:"alert alert-info"},I$={id:"table_devices_vue"},O$=[Vs("i",{class:"fas fa-plus"},null,-1)],j$={class:"card-footer mt-3"},M$=Vs("i",{class:"fas fa-trash"},null,-1),L$=Vs("i",{class:"fas fa-edit"},null,-1);var F$={__name:"page-device-exclusions",props:{context:Object},setup(e){const t=e,a=va(),l=va(),n=va(),s=va(),o=va(),i=va("device_exclusions"),r=`${http_prefix}/lua/pro/rest/v2/add/device/exclusion.lua`,c=`${http_prefix}/lua/pro/rest/v2/delete/device/exclusion.lua`,u=`${http_prefix}/lua/pro/rest/v2/edit/device/exclusion.lua`,d=`${http_prefix}/lua/pro/rest/v2/get/device/learning_status.lua`,_=va(!1),p=e=>i18n(e);let f="",v="",m=p("edit_check.delete_all_device_exclusions"),h=p("edit_check.delete_all_device_exclusions_message"),g=p("edit_check.add_device_exclusion"),b=p("edit_check.add_device_exclusion_message"),y=p("edit_check.add_device_exclusion_notes"),w=p("edit_check.add_device_exclusion_list_notes"),x=p("edit_check.edit_device_exclusion"),k=p("edit_check.edit_all_devices_status"),$=p("edit_check.learning"),S=va(null),N=va(null);const C={csrf:t.context.csrf,ifid:t.context.ifid},A=[p("edit_check.device_exclusion_page_notes.note_1")],E=[p("edit_check.device_exclusion_page_notes.sub_note_1"),p("edit_check.device_exclusion_page_notes.sub_note_2")];function T(e){let t={click_button_edit_device:U,click_button_historical_flows:I,click_button_delete:P};null!=t[e.event_id]&&t[e.event_id](e)}async function P(e){let t=`${i18n("edit_check.delete_device_exclusion")} ${e.row.mac_address.mac}`;S.value=e.row,v=t,f=i18n("edit_check.device_exclusion"),l.value.show(v,f)}async function U(e){N.value=e.row,o.value.show(N.value)}function I(e){const t=e.row,a=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${t.first_seen.timestamp}&epoch_end=${t.last_seen.timestamp}&mac=${t.mac_address.mac};eq&aggregated=false`;window.open(a,"_blank")}_n((async()=>{await R()}));const O=t.crsf,j=async function(){const e=S.value,t=NtopUtils.buildURL(c,{device:e.mac_address.mac});C.device={mac:e.mac_address.mac},await ntopng_utility.http_post_request(t,C),D()},M=async function(){n.value.show()},L=async function(){o.value.show()},F=async function(){const e=NtopUtils.buildURL(c,{device:"all"});await ntopng_utility.http_post_request(e,C),D()},R=async function(){(await ntopng_utility.http_request(d)).learning_done?_.value=!1:_.value=!0},D=async function(){await R(),a.value.refresh_table()};function z(){s.value.show()}const q=async function(e){let t=e;t.mac_list=t.mac_list.replace(/(?:\t| )/g,""),t.mac_list=t.mac_list.replace(/(?:\r\n|\r|\n)/g,",");const a=NtopUtils.buildURL(r,{...t});await ntopng_utility.http_post_request(a,C),D()},B=async function(e){let a=N.value;null!=a&&(e.mac_alias=e.mac_alias.replace(/(?:\t| )/g,"")),null!=a&&(e.mac=a.mac_address.mac),e.csrf=t.context.csrf;const l=NtopUtils.buildURL(u,{...e});await ntopng_utility.http_post_request(l,C),D()};function V(e,t,a){if(null!=e){let l=t[e.data.data_field],n=a[e.data.data_field];if("last_ip"==e.id)return""!=l&&(l=H(l),l=NtopUtils.convertIPAddress(l)),""!=n&&(n=H(n),n=NtopUtils.convertIPAddress(n)),1==e.sort?l.localeCompare(n):n.localeCompare(l);if("manufacturer"==e.id)return void 0===l&&(l=""),void 0===n&&(n=""),1==e.sort?l.localeCompare(n):n.localeCompare(l);if("mac_address"==e.id)return l=l.mac,n=n.mac,1==e.sort?l.localeCompare(n):n.localeCompare(l);if("first_seen"==e.id)return l=0==t.first_seen.timestamp?"":t.first_seen.data,n=0==a.first_seen.timestamp?"":a.first_seen.data,1==e.sort?l.localeCompare(n):n.localeCompare(l);if("last_seen"==e.id)return l=0==t.last_seen.timestamp?"":t.last_seen.data,n=0==a.last_seen.timestamp?"":a.last_seen.data,1==e.sort?l.localeCompare(n):n.localeCompare(l);if("status"==e.id)return 1==e.sort?l.localeCompare(n):n.localeCompare(l);if("trigger_alert"==e.id)return l=G(l),n=G(n),1==e.sort?l.localeCompare(n):n.localeCompare(l)}}function H(e){return e.split("host=")[1].split("'")[0]}function G(e){return e?"true":e?"true"==e||"false"==e?e:void 0:"false"}const W=async e=>{let t={mac_address:(e,t)=>{let a=e.mac,l=e.alias;return e.symbolic_mac&&e.symbolic_mac!=a&&(a=e.symbolic_mac),null!=l&&l!=a&&(a=`${a} (${l})`),null!=e.url&&(a=`<a href='${e.url}' title='${e.mac}'>${a}</a>`),a},first_seen:(e,t)=>0==e.timestamp?"":e.data,last_seen:(e,t)=>0==e.timestamp?"":e.data,status:(e,t)=>{let a="";return"allowed"==e?(a=p("edit_check.authorized"),`<span class="badge bg-success" title="${a}">${a}</span>`):(a=p("edit_check.unauthorized"),`<span class="badge bg-danger" title="${a}">${a}</span>`)},trigger_alert:(e,t)=>{let a=!1;return a="false"!=e&&e,a?'<i class="fas fa-check text-success"></i>':'<i class="fas fa-times text-danger"></i>'}};return e.forEach((e=>{e.render_func=t[e.data_field]})),e},K=()=>({ifid:ntopng_url_manager.get_url_entry("ifid")||t.context.ifid});const J=e=>e;return(e,t)=>(Ps(),Ms("div",C$,[Vs("div",A$,[E$,Vs("div",T$,[Vs("div",P$,[_.value?(Ps(),Ms("div",U$,te(ya($)),1)):Ys("v-if",!0),Vs("div",I$,[Hs(sx,{ref_key:"modal_delete_confirm",ref:l,title:ya(f),body:ya(v),onDelete:j},null,8,["title","body"]),Hs(sx,{ref_key:"modal_delete_all",ref:n,title:ya(m),body:ya(h),onDelete:F},null,8,["title","body"]),Hs(f$,{ref_key:"modal_add_device",ref:s,title:ya(g),body:ya(b),footer:ya(y),list_notes:ya(w),onAdd:q},null,8,["title","body","footer","list_notes"]),Hs(N$,{ref_key:"modal_edit_device",ref:o,title:ya(x),title_edit_all:ya(k),onEdit:B},null,8,["title","title_edit_all"]),Hs(rv,{ref_key:"table_device_exclusions",ref:a,csrf:ya(O),table_id:i.value,f_map_columns:W,get_extra_params_obj:K,f_map_config:J,f_sort_rows:V,onCustom_event:T},{custom_header:ml((()=>[Vs("button",{class:"btn btn-link",type:"button",ref:"add_device",onClick:z},O$,512)])),_:1},8,["csrf","table_id"])])]),Vs("div",j$,[Vs("button",{type:"button",onClick:M,class:"btn btn-danger me-1"},[M$,Ks(" "+te(p("edit_check.delete_all_device_exclusions")),1)]),Vs("button",{type:"button",onClick:L,class:"btn btn-secondary"},[L$,Ks(" "+te(p("edit_check.edit_all_devices_status")),1)])])]),Hs(fv,{note_list:A,add_sub_notes:"true",sub_note_list:E})])]))},__file:"http_src/vue/page-device-exclusions.vue"},R$={components:{datatable:$w},props:{page_csrf:String,url_params:Object},created(){!function(e){const t=[];let a=[],l=3;t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let n={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/fingerprint/data.lua`,url_params),enable_search:!0};a=[{columnName:i18n("client_fingerprint_type"),name:"type",data:"type",className:"text-nowrap",render:(e,t)=>"JA3"==e?`<a class="ntopng-external-link" href="https://github.com/salesforce/ja3">${e} <i class="fas fa-external-link-alt"></i></a>`:`<a class="ntopng-external-link" href="https://github.com/FoxIO-LLC/ja4">${e} <i class="fas fa-external-link-alt"></i></a>`,responsivePriority:0,createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("client_fingerprint"),name:"hash",data:"hash",className:"text-nowrap",render:(e,t,a)=>"JA3"==a.type?`<a class="ntopng-external-link" style="max-width:315px" href="https://sslbl.abuse.ch/ja3-fingerprints/${e}">${e} <i class="fas fa-external-link-alt"></i></a>`:e,responsivePriority:0,createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("status"),name:"is_malicious",data:"is_malicious",className:"text-nowrap text-center",responsivePriority:0,render:(e,t)=>e?`<i class="fa-solid fa-face-frown text-danger" title="${i18n("malicious")}"></i>`:`<i class="fa-solid fa-face-smile text-success" title="${i18n("ok")}"></i>`},{columnName:i18n("app_name"),name:"app_name",data:"app_name",className:"text-nowrap text-right",responsivePriority:1},{columnName:i18n("num_uses"),name:"num_uses",data:"num_uses",className:"text-nowrap text-right",responsivePriority:1,render:e=>NtopUtils.formatValue(e)}];let s={serverSide:!1,order:[[l,"desc"]]},o=ntopng_utility.clone(n);o.table_buttons=n.table_buttons,o.data_url=`${o.data_url}`,o.columns_config=a,o.table_config=ntopng_utility.clone(s),e.config_devices_standard=o}(this)},mounted(){},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null}),methods:{reload_table:function(){this.get_active_table().reload()},get_active_table:function(){return this.$refs.table_fingerprint}}};const D$={class:"row"},z$={class:"col-md-12 col-lg-12"},q$=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),B$={class:"card"},V$={class:"card-body"},H$={id:"table_host_tls"},G$={class:"card-footer"};R$.render=function(e,t,a,l,n,s){const o=kn("datatable");return Ps(),Ms("div",D$,[Vs("div",z$,[q$,Vs("div",B$,[Vs("div",V$,[Vs("div",H$,[Hs(o,{ref:"table_fingerprint",table_buttons:n.config_devices_standard.table_buttons,columns_config:n.config_devices_standard.columns_config,data_url:n.config_devices_standard.data_url,enable_search:n.config_devices_standard.enable_search,table_config:n.config_devices_standard.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])]),Vs("div",G$,[Vs("b",null,te(n.i18n("fingerprint_note")),1)])])])])},R$.__file="http_src/vue/page-host-tls.vue";var W$={components:{datatable:$w},props:{page_csrf:String,url_params:Object},created(){!function(e){const t=[];let a=[],l=3;t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let n={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/fingerprint/data.lua`,url_params),enable_search:!0};a=[{columnName:i18n("hassh_fingerprint"),name:"ja3",data:"ja3",className:"text-nowrap",render:(e,t)=>`<a class="ntopng-external-link" href="https://sslbl.abuse.ch/ja3-fingerprints/${e}">${e} <i class="fas fa-external-link-alt"></i></a>`,responsivePriority:0,createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("status"),name:"is_malicious",data:"is_malicious",className:"text-nowrap text-center",responsivePriority:0,render:(e,t)=>e?`<i class="fa-solid fa-face-frown text-danger" title="${i18n("malicious")}"></i>`:`<i class="fa-solid fa-face-smile text-success" title="${i18n("ok")}"></i>`},{columnName:i18n("app_name"),name:"app_name",data:"app_name",className:"text-nowrap text-right",responsivePriority:1},{columnName:i18n("num_uses"),name:"num_uses",data:"num_uses",className:"text-nowrap text-right",responsivePriority:1,render:e=>NtopUtils.formatValue(e)}];let s={serverSide:!1,order:[[l,"desc"]]},o=ntopng_utility.clone(n);o.table_buttons=n.table_buttons,o.data_url=`${o.data_url}`,o.columns_config=a,o.table_config=ntopng_utility.clone(s),e.config_devices_standard=o}(this)},mounted(){},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null}),methods:{reload_table:function(){this.get_active_table().reload()},get_active_table:function(){return this.$refs.table_hassh}}};const K$={class:"row"},J$={class:"col-md-12 col-lg-12"},Y$=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),Z$={class:"card"},X$={class:"card-body"},Q$={id:"table_host_ssh"};W$.render=function(e,t,a,l,n,s){const o=kn("datatable");return Ps(),Ms("div",K$,[Vs("div",J$,[Y$,Vs("div",Z$,[Vs("div",X$,[Vs("div",Q$,[Hs(o,{ref:"table_hassh",table_buttons:n.config_devices_standard.table_buttons,columns_config:n.config_devices_standard.columns_config,data_url:n.config_devices_standard.data_url,enable_search:n.config_devices_standard.enable_search,table_config:n.config_devices_standard.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])])])])])},W$.__file="http_src/vue/page-host-ssh.vue";const eS="change_map_event";var tS={components:{"page-periodicity-map":wk,"page-periodicity-table":yx,"page-asset-map":zk,"page-asset-table":ix,"page-service-map":tk,"page-service-table":Lx,"page-navbar":s_},props:{page_csrf:String,base_url_params:Object,ifid:Number,is_admin:Boolean,map_id:String,view:String,navbar_info:Object,service_acceptance:Array,service_map_filter_list:Object,service_table_filter_list:Array,periodicity_map_filter_list:Object,periodicity_table_filter_list:Array,asset_map_filter_list:Object,asset_table_filter_list:Array},created(){this.url_params=this.$props.base_url_params,this.active_tab=this.$props.map_id,this.page=this.url_params.page,this.updated_view=this.$props.view,asset_map_filter_list&&asset_table_filter_list&&(this.navbar_context.items_table.push({active:!1,class:"disabled ps-0 pe-0",label:"-"}),this.navbar_context.items_table.push({active:!1,icon:"fas fa-lg fa-compass",class:"disabled pe-0",title:i18n("asset_map"),label:i18n("asset")+": "}),this.navbar_context.items_table.push({active:!1,label:i18n("map_format"),id:"asset_map",page:"graph"}),this.navbar_context.items_table.push({active:!1,class:"disabled ps-0 pe-0",label:"/"}),this.navbar_context.items_table.push({active:!1,label:i18n("table_format"),id:"asset_map",page:"table"})),this.navbar_context.items_table.forEach((e=>{e.id==this.active_tab&&e.page==this.page?e.active=!0:e.active=!1}))},mounted(){const e=this.format_navbar_title;e(this.$props.navbar_info),ntopng_events_manager.on_custom_event("page_navbar",ntopng_custom_events.CHANGE_PAGE_TITLE,(t=>{e({selected_iface:this.$props.navbar_info.selected_iface,selected_host:t})})),ntopng_events_manager.on_custom_event("change_service_table_tab",eS,(t=>{x.set_key_to_url("map",t.id),x.set_key_to_url("page",t.page),"table"==t.page&&this.destroy(),this.active_tab=t.id,this.page=t.page,this.url_params.map=t.id,this.url_params.page=t.page,this.updated_view=x.get_url_entry("view"),e()}))},data:()=>({i18n:e=>i18n(e),active_tab:null,page:null,url_params:{},updated_view:null,navbar_node:{},navbar_context:{main_title:{label:" "+i18n("maps"),icon:"fas fa-map"},secondary_title_list:[],items_table:[{active:!1,icon:"fas fa-lg fa-concierge-bell",class:"disabled pe-0",title:i18n("service_map"),label:i18n("service")+": "},{active:!0,label:i18n("map_format"),id:"service_map",page:"graph"},{active:!1,class:"disabled ps-0 pe-0",label:"/"},{active:!1,label:i18n("table_format"),id:"service_map",page:"table"},{active:!1,class:"disabled ps-0 pe-0",label:"-"},{active:!1,icon:"fas fa-lg fa-clock",class:"disabled pe-0",title:i18n("periodicity_map"),label:i18n("periodicity")+": "},{active:!1,label:i18n("map_format"),id:"periodicity_map",page:"graph"},{active:!1,class:"disabled ps-0 pe-0",label:"/"},{active:!1,label:i18n("table_format"),id:"periodicity_map",page:"table"}]}}),methods:{destroy:function(){this.get_active_tab().destroy()},format_navbar_title:function(e){if(e?this.navbar_node=e:e=this.navbar_node,this.navbar_context.secondary_title_list=[{label:e.selected_iface.label,title:NtopUtils.shortenLabel(`${e.selected_iface.label}`,16)}],e.selected_host&&""!=e.selected_host.id){const t=e.selected_host.label,a=NtopUtils.removeVlan(e.selected_host.id);this.navbar_context.secondary_title_list[0].href=`${http_prefix}/lua/pro/enterprise/network_maps.lua?map=${this.active_tab}&page=${this.page}&ifid=${this.$props.ifid}`,this.navbar_context.secondary_title_list.push({label:`${NtopUtils.formatNameValue(t,a)}`,title:`${e.selected_host.label}`,href:e.selected_host.is_active?`${http_prefix}/lua/host_details.lua?host=${a}`:null,icon:"fa-solid fa-laptop",target_blank:"true"})}},get_active_tab:function(){return this.$refs[this.active_tab+"_"+this.page]},click_item:function(e){e.id==this.active_tab&&e.page==this.page||(this.navbar_context.items_table.forEach((e=>e.active=!1)),e.active=!0,ntopng_events_manager.emit_custom_event(eS,e))}}};tS.render=function(e,t,a,l,n,s){const o=kn("page-navbar"),i=kn("page-service-map"),r=kn("page-service-table"),c=kn("page-periodicity-map"),u=kn("page-periodicity-table"),d=kn("page-asset-map"),_=kn("page-asset-table");return Ps(),Ms(Ss,null,[Hs(o,{id:"page_navbar",main_title:n.navbar_context.main_title,secondary_title_list:n.navbar_context.secondary_title_list,help_link:n.navbar_context.help_link,items_table:n.navbar_context.items_table,onClick_item:s.click_item},null,8,["main_title","secondary_title_list","help_link","items_table","onClick_item"]),"service_map"==n.active_tab&&"graph"==n.page?(Ps(),Ls(i,{key:0,ref:"service_map_graph",page_csrf:a.page_csrf,url_params:n.url_params,ifid:a.ifid,is_admin:a.is_admin,map_id:a.map_id,all_filter_list:a.service_map_filter_list},null,8,["page_csrf","url_params","ifid","is_admin","map_id","all_filter_list"])):Ys("v-if",!0),"service_map"==n.active_tab&&"table"==n.page?(Ps(),Ls(r,{key:1,ref:"service_map_table",page_csrf:a.page_csrf,url_params:n.url_params,view:n.updated_view,table_filters:a.service_table_filter_list,is_admin:a.is_admin,service_acceptance:a.service_acceptance},null,8,["page_csrf","url_params","view","table_filters","is_admin","service_acceptance"])):Ys("v-if",!0),"periodicity_map"==n.active_tab&&"graph"==n.page?(Ps(),Ls(c,{key:2,ref:"periodicity_map_graph",page_csrf:a.page_csrf,url_params:n.url_params,ifid:a.ifid,is_admin:a.is_admin,map_id:a.map_id,all_filter_list:a.periodicity_map_filter_list},null,8,["page_csrf","url_params","ifid","is_admin","map_id","all_filter_list"])):Ys("v-if",!0),"periodicity_map"==n.active_tab&&"table"==n.page?(Ps(),Ls(u,{key:3,ref:"periodicity_map_table",page_csrf:a.page_csrf,url_params:n.url_params,view:n.updated_view,table_filters:a.periodicity_table_filter_list,is_admin:a.is_admin},null,8,["page_csrf","url_params","view","table_filters","is_admin"])):Ys("v-if",!0),a.asset_map_filter_list&&a.asset_table_filter_list?(Ps(),Ms(Ss,{key:4},["asset_map"==n.active_tab&&"graph"==n.page?(Ps(),Ls(d,{key:0,ref:"asset_map_graph",page_csrf:a.page_csrf,url_params:n.url_params,ifid:a.ifid,is_admin:a.is_admin,map_id:a.map_id,all_filter_list:a.asset_map_filter_list},null,8,["page_csrf","url_params","ifid","is_admin","map_id","all_filter_list"])):Ys("v-if",!0),"asset_map"==n.active_tab&&"table"==n.page?(Ps(),Ls(_,{key:1,ref:"asset_map_table",page_csrf:a.page_csrf,url_params:n.url_params,view:n.updated_view,table_filters:a.asset_table_filter_list},null,8,["page_csrf","url_params","view","table_filters"])):Ys("v-if",!0)],64)):Ys("v-if",!0)],64)},tS.__file="http_src/vue/page-home-map.vue";const aS=["width","height"],lS=[Vs("defs",null,null,-1),Vs("g",{class:"nodes",style:{stroke:"#000",strokeOpacity:"0.5"}},null,-1),Vs("g",{class:"links",style:{stroke:"#000",strokeOpacity:"0.3",fill:"none"}},null,-1),Vs("g",{class:"texts"},null,-1)];var nS={__name:"page-sankey",props:{width:Number,height:Number},setup(e){const t=e,a=d3v7,l=va(null),n=va({});async function s(){return data=function(e){let t=[],a=[],l={};const n=(e,a,n)=>{if(null!=l[e])return;let s=t.length;l[e]=s;let o={index:s,name:e,href:a,color:n};t.push(o)},s=(e,t,n,s)=>{let o={source:l[e],target:l[t],value:n,label:s};a.push(o)};return e.forEach((e=>{n(e.source,e.source_link,e.source_color),n(e.target,e.target_link,e.target_color),s(e.source,e.target,e.value,e.link)})),{nodes:t,links:a}}([{link_color:"#e377c2",source_color:"#e377c2",source_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=IGMP",target:"224.0.0.251",source:"IGMP",link:"IGMP",target_link:"/lua/host_details.lua?host=224.0.0.251&vlan=0",target_node:"224.0.0.251",source_node:"192.168.1.7",value:60},{link_color:"#e377c2",source_link:"/lua/host_details.lua?host=192.168.1.7&vlan=0",target:"IGMP",source:"192.168.1.7",link:"IGMP",target_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=IGMP",target_node:"224.0.0.2",target_color:"#e377c2",source_node:"192.168.1.7",value:120},{link_color:"#e377c2",source_color:"#e377c2",source_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=IGMP",target:"224.0.0.2",source:"IGMP",link:"IGMP",target_link:"/lua/host_details.lua?host=224.0.0.2&vlan=0",target_node:"224.0.0.2",source_node:"192.168.1.7",value:60},{link_color:"#bcbd22",source_link:"/lua/host_details.lua?host=192.168.1.7&vlan=0",target:"MDNS",source:"192.168.1.7",link:"MDNS",target_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=MDNS",target_node:"224.0.0.251",target_color:"#bcbd22",source_node:"192.168.1.7",value:396},{link_color:"#bcbd22",source_color:"#bcbd22",source_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=MDNS",target:"224.0.0.251",source:"MDNS",link:"MDNS",target_link:"/lua/host_details.lua?host=224.0.0.251&vlan=0",target_node:"224.0.0.251",source_node:"192.168.1.7",value:396}]),data}return dn((async()=>{})),_n((async()=>{!async function(){const e=a.scaleOrdinal(a.schemeCategory10);let o=await s();const i=function(){let e=t.width;null==e&&(e=window.innerWidth-200);let a=t.height;null==a&&(a=window.innerHeight-50);return{width:e,height:a}}();n.value=i;const{links:r,nodes:c}=function(e,t,l){return a.sankey().nodeAlign(a.sankeyCenter).nodeWidth(10).nodePadding(10).extent([[0,5],[t,l]])(e)}(o,i.width-10,i.height-5);a.select(l.value).select("g.nodes").selectAll("rect").data(c).join((t=>{const l=t.append("rect");l.attr("x",(e=>e.x0)).attr("y",(e=>e.y0)),l.transition(a.easeLinear).delay(1e3).duration(500).attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("dataIndex",(e=>e.index)).attr("fill",(t=>e(t.index/c.length))),l.append("title").text((e=>`${e.name}\n${e.hours}`))}),(t=>t.transition(a.easeLinear).delay(500).duration(500).attr("x",(e=>e.x0)).attr("y",(e=>e.y0)).attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("dataIndex",(e=>e.index)).attr("fill",(t=>e(t.index/c.length))).select("title").text((e=>`${e.name}\n${e.hours}`))),(e=>e.transition(a.easeLinear).duration(500).style("opacity",0).remove())).on("dblclick",(function(e){})),a.select(l.value).select("g.texts").selectAll("text").data(c).join((t=>{t.append("text").transition(a.easeLinear).delay(1e3).duration(500).attr("x",(e=>e.x0<i.width/2?e.x1+6:e.x0-6)).attr("y",(e=>(e.y1+e.y0)/2)).attr("fill",(t=>a.rgb(e(t.index/c.length)).darker())).attr("alignment-baseline","middle").attr("text-anchor",(e=>e.x0<i.width/2?"start":"end")).attr("font-size",9).text((e=>e.name))}),(t=>t.transition(a.easeLinear).delay(500).duration(500).attr("x",(e=>e.x0<i.width/2?e.x1+6:e.x0-6)).attr("y",(e=>(e.y1+e.y0)/2)).attr("fill",(t=>a.rgb(e(t.index/c.length)).darker())).attr("text-anchor",(e=>e.x0<i.width/2?"start":"end")).attr("font-size",9).text((e=>e.name))),(e=>e.transition(a.easeLinear).duration(500).style("opacity",0).remove())),a.select(l.value).select("defs").selectAll("linearGradient").data(r).join((t=>{const a=t.append("linearGradient");a.attr("id",(e=>`gradient-${e.index}`)).attr("gradientUnits","userSpaceOnUse").attr("x1",(e=>e.source.x1)).attr("x2",(e=>e.target.x0)),a.append("stop").attr("offset","0").attr("stop-color",(t=>e(t.source.index/c.length))),a.append("stop").attr("offset","100%").attr("stop-color",(t=>e(t.target.index/c.length)))}),(t=>{t.attr("id",(e=>`gradient-${e.index}`)).attr("gradientUnits","userSpaceOnUse").attr("x1",(e=>e.source.x1)).attr("x2",(e=>e.target.x0)),t.selectAll("stop").remove(),t.append("stop").attr("offset","0").attr("stop-color",(t=>e(t.source.index/c.length))),t.append("stop").attr("offset","100%").attr("stop-color",(t=>e(t.target.index/c.length)))}),(e=>e.remove())),a.select(l.value).select("g.links").selectAll("path").data(r).join((e=>{const t=e.append("path");t.transition(a.easeLinear).delay(1e3).duration(500).attr("d",a.sankeyLinkHorizontal()).attr("stroke",(e=>`url(#gradient-${e.index}`)).attr("stroke-width",(e=>e.width)),t.append("title").text((e=>`${e.hours}`))}),(e=>e.transition(a.easeLinear).delay(500).duration(500).attr("d",a.sankeyLinkHorizontal()).attr("stroke",(e=>`url(#gradient-${e.index}`)).attr("stroke-width",(e=>e.width)).select("title").text((e=>`${e.hours}`))),(e=>e.transition(a.easeLinear).duration(500).style("opacity",0).remove()))}()})),(e,t)=>(Ps(),Ms("div",null,[(Ps(),Ms("svg",{ref_key:"sankey_chart_ref",ref:l,width:n.value.width,height:n.value.height,style:{margin:"10px"}},lS,8,aS))]))}};np("\n.node rect {\n  fill-opacity: 0.9;\n  shape-rendering: crispEdges;\n}\n.node text {\n  pointer-events: none;\n  text-shadow: 0 1px 0 #fff;\n}\n.link {\n  fill: none;\n  stroke: #000;\n  stroke-opacity: 0.2;\n}\n.link:hover {\n  stroke-opacity: 0.5;\n}\n"),nS.__file="http_src/vue/page-sankey.vue";const sS="change_applications_tab_event";var oS={components:{chart:A_,datatable:$w,"modal-delete-confirm":sx,"tab-list":ex},props:{page_csrf:String,url_params:Object,view:String,is_ch_enabled:Boolean,is_locale:String,ts_l7_enabled:Boolean,ts_cat_enabled:Boolean},created(){this.applications_tab=x.get_url_entry("view")||this.$props.view,this.tab_list.forEach((e=>{this.applications_tab==e.id?e.active=!0:e.active=!1})),function(e){const t=[];t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let a=url_params;a.view="applications";let l={table_buttons:t,data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/l7/data.lua`,a),enable_search:!0,table_config:{serverSide:!1,order:[[6,"desc"]],columnDefs:[{type:"time-uni",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3},{type:"file-size",targets:5}]}},n=[{columnName:i18n("host_details.application"),targets:0,width:"20",name:"application",data:"application",className:"text-nowrap",responsivePriority:1,render:t=>"1"==e.$props.is_locale&&!0===e.$props.ts_l7_enabled?`<a href="${http_prefix}/lua/host_details.lua?host=${e.$props.url_params.host}@${e.$props.url_params.vlan}&page=historical&ifid=${e.$props.url_params.ifid}&protocol=${t.label}&ts_schema=host:ndpi" target="_blank">${t.label}</a>`:`${t.label}`},{columnName:i18n("host_details.duration"),targets:1,width:"10",name:"duration",data:"duration",className:"text-nowrap",responsivePriority:1,render:e=>NtopUtils.secondsToTime(e)},{columnName:i18n("host_details.sent"),targets:2,width:"10",name:"sent",data:"bytes_sent",className:"text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.rcvd"),targets:3,width:"10",name:"rcvd",data:"bytes_rcvd",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.breakdown"),targets:4,width:"10",name:"breakdown",data:"breakdown",orderable:!1,className:"text-center text-nowrap",responsivePriority:2,render:(e,t,a)=>{const l=100*a.bytes_sent/a.tot_bytes,n=100*a.bytes_rcvd/a.tot_bytes;return NtopUtils.createBreakdown(l,n,i18n("host_details.sent"),i18n("host_details.rcvd"))}},{columnName:i18n("host_details.tot_bytes"),targets:5,width:"20",name:"tot_bytes",data:"tot_bytes",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.tot_percentage"),targets:6,width:"20",name:"percentage",data:"percentage",className:"text-center text-nowrap",responsivePriority:2,render:e=>{const t=e.toFixed(1);return NtopUtils.createProgressBar(t)}}];is_ch_enabled&&e.add_action_column(n,"l7proto","application");let s=ntopng_utility.clone(l);s.columns_config=n,e.config_devices_applications=s,a.view="categories",l.data_url=NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/l7/data.lua`,a),n=[{columnName:i18n("host_details.category"),targets:0,name:"category",data:"category",className:"text-nowrap",responsivePriority:1,render:t=>"1"==e.$props.is_locale&&!0===e.$props.ts_cat_enabled?`<a href="${http_prefix}/lua/host_details.lua?host=${e.$props.url_params.host}@${e.$props.url_params.vlan}&ts_schema=host:ndpi_categories&page=historical&category=${t.label}" target="_blank">${t.label}</a>`:`${t.label}`},{columnName:i18n("host_details.applications"),targets:0,name:"applications",data:"applications",orderable:!1,className:"text-nowrap",responsivePriority:1,render:t=>"1"==e.$props.is_locale?`${t.label||""} <a href="${http_prefix}/${t.href}${t.category_id}">${t.more_protos||""}</a>`:`${t.label||""}`},{columnName:i18n("host_details.duration"),targets:0,name:"duration",data:"duration",className:"text-nowrap",responsivePriority:1,render:e=>NtopUtils.secondsToTime(e)},{columnName:i18n("host_details.tot_bytes"),targets:0,name:"tot_bytes",data:"tot_bytes",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.tot_percentage"),targets:0,name:"percentage",data:"percentage",className:"text-center text-nowrap",responsivePriority:2,render:e=>{const t=e.toFixed(1);return NtopUtils.createProgressBar(t)}}],is_ch_enabled&&e.add_action_column(n,"l7cat","category");let o=ntopng_utility.clone(l);o.columns_config=n,o.table_config.order=[[4,"desc"]],o.table_config.columnDefs=[{type:"time-uni",targets:2},{type:"file-size",targets:3}],e.config_devices_categories=o}(this)},mounted(){C.on_custom_event("change_applications_tab_event",sS,(e=>{let t=this.get_active_table();x.set_key_to_url("view",e.id),t.destroy_table(),this.applications_tab=e.id}))},data(){return{i18n:e=>i18n(e),applications_tab:null,config_devices_applications:null,config_devices_categories:null,chart_options:[{title:i18n("graphs.top_10_ndpi_protocols"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l7/proto_data.lua`,tab:"applications",id:"top_applications"},{title:i18n("graphs.top_breed"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l7/breed_data.lua`,tab:"applications",id:"top_breed"},{title:i18n("graphs.top_10_ndpi_categories"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l7/cat_data.lua`,tab:"categories",id:"top_categories"},{title:i18n("graphs.top_breed"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l7/breed_data.lua`,tab:"categories",id:"top_breed"}],tab_list:[{title:i18n("host_details.applications_tab"),active:"applications"==this.$props.view,id:"applications"},{title:i18n("host_details.categories_tab"),active:"categories"==this.$props.view,id:"categories"}]}},methods:{add_action_column:function(e,t,a){const l=`${this.$props.url_params.host}`,n=`${this.$props.url_params.vlan}`,s=`${this.$props.url_params.ifid}`;let o="page-stats-action-jump-historical";e.push({columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:o,render:(e,i,r)=>{const c={handlerId:o,onClick:()=>{let e=`${http_prefix}/lua/pro/db_search.lua?ifid=${s}&${t}=${r[a].id};eq&ip=${l};eq`;0!=n&&(e=`${e}&vlan_id=${n};eq`),window.open(e)}};return DataTableUtils.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:c}])}})},destroy:function(){this.get_active_table().destroy_table()},click_item:function(e){this.tab_list.forEach((e=>e.active=!1)),e.active=!0,C.emit_custom_event(sS,e)},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},get_active_table:function(){return this.$refs[`table_host_${this.applications_tab}`]},get_f_get_custom_chart_options:()=>(console.log("get_f_"),async e=>charts_options_items.value[chart_index].chart_options)}};const iS={class:"row"},rS={class:"col-md-12 col-lg-12"},cS={class:"card"},uS=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),dS={class:"card-body"},_S={id:"host_details_applications"},pS={class:"row mb-4 mt-4",id:"host_details_applications"},fS={class:"col-6"},vS={key:0,class:"widget-name"};oS.render=function(e,t,a,l,n,s){const o=kn("tab-list"),i=kn("chart"),r=kn("datatable");return Ps(),Ms("div",iS,[Vs("div",rS,[Vs("div",cS,[uS,Vs("div",dS,[Vs("div",_S,[Hs(o,{ref:"host_details_applications_tab_list",id:"host_details_applications_tab_list",tab_list:n.tab_list,onClick_item:s.click_item},null,8,["tab_list","onClick_item"]),Vs("div",pS,[(Ps(!0),Ms(Ss,null,En(n.chart_options,(e=>(Ps(),Ms("div",fS,[e.tab==n.applications_tab?(Ps(),Ms("h3",vS,te(e.title),1)):Ys("v-if",!0),e.tab==n.applications_tab?(Ps(),Ls(i,{key:1,id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!1},null,8,["id","chart_type","base_url_request"])):Ys("v-if",!0)])))),256))]),"applications"==n.applications_tab?(Ps(),Ls(r,{key:0,ref:"table_host_applications",table_buttons:n.config_devices_applications.table_buttons,columns_config:n.config_devices_applications.columns_config,data_url:n.config_devices_applications.data_url,enable_search:n.config_devices_applications.enable_search,table_config:n.config_devices_applications.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])):Ys("v-if",!0),"categories"==n.applications_tab?(Ps(),Ls(r,{key:1,ref:"table_host_categories",table_buttons:n.config_devices_categories.table_buttons,columns_config:n.config_devices_categories.columns_config,data_url:n.config_devices_categories.data_url,enable_search:n.config_devices_categories.enable_search,table_config:n.config_devices_categories.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])):Ys("v-if",!0)])])])])])},oS.__file="http_src/vue/page-host-details-applications.vue";const mS={class:"row"},hS={class:"col-md-12 col-lg-12"},gS={class:"card"},bS=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),yS={class:"card-body"},wS={id:"host_details_traffic"},xS={class:"row mb-4 mt-4",id:"host_details_traffic"},kS={class:"col-4"},$S={class:"widget-name"};var SS={__name:"page-host-details-traffic",props:{page_csrf:String},setup(e){const t=va(null);va([]);const a=va({}),l=()=>{t.value.reload()};dn((async()=>{!function(e){const t=[];let n={};n.host=x.get_url_entry("host"),n.vlan=x.get_url_entry("vlan"),n.ifid=x.get_url_entry("ifid"),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,a,n){l()}});let s={table_buttons:t,data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/l4/data.lua`,n),enable_search:!0,table_config:{serverSide:!1,order:[[6,"desc"]],columnDefs:[{type:"time-uni",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3},{type:"file-size",targets:5}]}},o=[{columnName:i18n("protocol"),targets:0,name:"protocol",data:"protocol",className:"text-nowrap",responsivePriority:1},{columnName:i18n("chart"),targets:1,name:"historical",data:"historical",className:"text-nowrap",responsivePriority:1},{columnName:i18n("traffic_labels.bytes_sent"),targets:2,name:"sent",data:"bytes_sent",className:"text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("traffic_labels.bytes_rcvd"),targets:3,name:"rcvd",data:"bytes_rcvd",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("traffic_labels.breakdown"),targets:4,name:"breakdown",data:"breakdown",orderable:!1,className:"text-center text-nowrap",responsivePriority:2,render:(e,t,a)=>{const l=100*a.bytes_sent/a.total_bytes,n=100*a.bytes_rcvd/a.total_bytes;return NtopUtils.createBreakdown(l,n,i18n("host_details.sent"),i18n("host_details.rcvd"))}},{columnName:i18n("traffic_labels.total_bytes"),targets:5,name:"tot_bytes",data:"total_bytes",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("traffic_labels.total_percentage"),targets:6,width:"20%",name:"percentage",data:"total_percentage",className:"text-center text-nowrap",responsivePriority:2,render:e=>{const t=e.toFixed(1);return NtopUtils.createProgressBar(t)}}],i=ntopng_utility.clone(s);i.columns_config=o,a.value=i}()})),mn((async()=>{t.value.destroy_table()}));const n=[{title:i18n("graphs.l4_proto"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l4/proto_data.lua`,id:"traffic_protos"},{title:i18n("graphs.contacted_hosts"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l4/contacted_hosts_data.lua`,id:"contacted_hosts"},{title:i18n("graphs.traffic"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l4/traffic_data.lua`,id:"traffic"}];return(e,l)=>(Ps(),Ms("div",mS,[Vs("div",hS,[Vs("div",gS,[bS,Vs("div",yS,[Vs("div",wS,[Vs("div",xS,[(Ps(),Ms(Ss,null,En(n,(e=>Vs("div",kS,[Vs("h3",$S,te(e.title),1),Hs(A_,{id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!1},null,8,["id","chart_type","base_url_request"])]))),64))]),Hs($w,{ref_key:"traffic_table",ref:t,table_buttons:a.value.table_buttons,columns_config:a.value.columns_config,data_url:a.value.data_url,enable_search:a.value.enable_search,table_config:a.value.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])])])])]))},__file:"http_src/vue/page-host-details-traffic.vue"};const NS={class:"row"},CS={class:"col-md-12 col-lg-12"},AS={class:"card"},ES=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),TS={class:"card-body"},PS={class:"row"},US={class:"col-6 mb-4 mt-4"},IS={class:"widget-name"};var OS={__name:"page-host-details-packets",props:{page_csrf:String,url_params:Object},setup(e){const t=[{title:i18n("graphs.packets_sent"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/packets/sent_data.lua`,id:"packets_sent"},{title:i18n("graphs.packets_rcvd"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/packets/rcvd_data.lua`,id:"packets_rcvd"},{title:i18n("graphs.tcp_flags"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/packets/tcp_flags_data.lua`,id:"tcp_flags"},{title:i18n("graphs.arp_distribution"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/packets/arp_data.lua`,id:"arp_requests"}];function l(e,t,l){a.hideOverlays()}return _n((()=>{})),(e,a)=>(Ps(),Ms("div",NS,[Vs("div",CS,[Vs("div",AS,[ES,Vs("div",TS,[Vs("div",PS,[(Ps(),Ms(Ss,null,En(t,(e=>Vs("div",US,[Vs("h3",IS,te(e.title),1),Hs(A_,{id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!1,onChart_reloaded:l},null,8,["id","chart_type","base_url_request"])]))),64))])])])])]))},__file:"http_src/vue/page-host-details-packets.vue"};const jS={key:0,class:"alert alert-info",id:"empty-message"},MS=["width","height"],LS=[Vs("g",{class:"nodes",style:{stroke:"#000",strokeOpacity:"0.5"}},null,-1),Vs("g",{class:"links",style:{stroke:"#000",strokeOpacity:"0.3",fill:"none"}},null,-1)];var FS={__name:"sankey",props:{no_data_message:String,width:Number,height:Number,sankey_data:Object},emits:["node_click","update_width","update_height"],setup(e,{expose:t,emit:a}){const l=e,n=d3v7,s=10,o=va(!1),i=va(null),r=va({});function c(e){e&&($(".nodes",i.value).empty(),$(".links",i.value).empty()),null!=l.sankey_data.nodes&&null!=l.sankey_data.links&&0!=l.sankey_data.length&&0!=l.sankey_data.links.length&&_()}dn((async()=>{})),_n((async()=>{c(),window.addEventListener("resize",(()=>c(!0)))})),jl((()=>l.sankey_data),((e,t)=>{c(!0)}));let u=null,d=null;async function _(){const e=n.scaleOrdinal(n.schemeCategory10);let t=l.sankey_data;const o=function(){a("update_width");let e=l.width;null==e&&(e=$(i.value).parent().parent().width()-10);a("update_height");let t=l.height;null==t&&(t=$(i.value).parent().parent().height()-80);return{width:e,height:t}}();var c,_;r.value=o,c=o.width-10,_=o.height-5,u=n.sankey().nodeAlign(n.sankeyCenter).nodeWidth(10).nodePadding(s).extent([[0,5],[c,_]]),d=u(t);const{links:m,nodes:h}=d;let g=n.select(i.value).select("g.nodes").selectAll("g").data(h).join((e=>e.append("g"))).attr("transform",(e=>`translate(${e.x0}, ${e.y0})`));n.zoom().scaleExtent([1,40]).on("zoom",v),g.append("rect").attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("dataIndex",(e=>e.index)).attr("fill",(t=>e(t.index/h.length))).attr("class","sankey-node").attr("style","cursor:move;"),n.selectAll("rect").append("title").text((e=>`${e?.label}`)),g.data(h).append("text").attr("class","label").style("pointer-events","auto").attr("style","cursor:pointer;").style("fill-opacity",(function(e){return 1})).attr("fill",(e=>"#000")).attr("x",(e=>e.x0<o.width/2?e.x1-e.x0+6:-6)).attr("y",(e=>(e.y1-e.y0)/2)).attr("alignment-baseline","middle").attr("text-anchor",(e=>e.x0<o.width/2?"start":"end")).attr("font-size",12).text((e=>e.label)).on("click",(function(e,t){a("node_click",t.data)})),g.call(n.drag().subject((e=>e)).on("start",p).on("drag",f));const b=n.select(i.value).select("g.links").selectAll("g").data(m).join((e=>e.append("g")));let y=b.append("linearGradient");y.attr("id",(e=>`gradient-${e.index}`)).attr("gradientUnits","userSpaceOnUse").attr("x1",(e=>e.source.x1)).attr("x2",(e=>e.target.x0)),y.append("stop").attr("offset","0").attr("stop-color",(t=>e(t.source.index/h.length))),y.append("stop").attr("offset","100%").attr("stop-color",(t=>e(t.target.index/h.length))),b.append("path").style("pointer-events","none").attr("class","sankey-link").attr("d",n.sankeyLinkHorizontal()).attr("stroke-width",(e=>Math.max(1,e.width))).attr("stroke",(e=>`url(#gradient-${e.index}`)),b.append("title").text((e=>`${e.label}`))}function p(e,t){t.__x=e.x,t.__y=e.y,t.__x0=t.x0,t.__y0=t.y0,t.__x1=t.x1,t.__y1=t.y1}function f(e,t){n.select(this).attr("transform",(function(t){const a=e.x-t.__x,l=e.y-t.__y,o=r.value.width,i=r.value.width;return t.x0=t.__x0+a,t.x1=t.__x1+a,t.y0=t.__y0+l,t.y1=t.__y1+l,t.x0<0&&(t.x0=0,t.x1=s),t.x1>o&&(t.x0=o-s,t.x1=o),t.y0<0&&(t.y0=0,t.y1=t.__y1-t.__y0),t.y1>i&&(t.y0=i-(t.__y1-t.__y0),t.y1=i),u.update(d),n.selectAll(".sankey-link").attr("d",n.sankeyLinkHorizontal()),`translate(${t.x0}, ${t.y0})`}))}function v({transform:e}){g.attr("transform",e)}const m=e=>i18n(e);return t({draw_sankey:_,set_no_data_flag:function(e){o.value=e}}),(t,a)=>(Ps(),Ms(Ss,null,[o.value?(Ps(),Ms("div",jS,te(e.no_data_message||m("flows_page.no_data")),1)):Ys("v-if",!0),Vs("div",null,[(Ps(),Ms("svg",{ref_key:"sankey_chart_ref",ref:i,width:r.value.width,height:r.value.height,style:{margin:"10px"}},LS,8,MS))])],64))}};np("\n/* .node rect { */\n/*   fill-opacity: 0.9; */\n/*   shape-rendering: crispEdges; */\n/* } */\n\n/* .node text { */\n/*   pointer-events: none; */\n/*   text-shadow: 0 1px 0 #fff; */\n/* } */\n\n/* path.link.link2 { */\n/*     all: initial; */\n/*     fill: unset; */\n/*     stroke: unset; */\n/*     stroke-opacity: unset; */\n/*     stroke-width: unset; */\n/* } */\n\n/* .link:hover { */\n/*   stroke-opacity: 0.5; */\n/* } */\n"),FS.__file="http_src/vue/sankey.vue";const RS={class:"row"},DS={class:"col-md-12 col-lg-12"},zS={class:"card card-shadow"},qS={class:"card-body"},BS={class:"d-flex align-items-center mb-2"},VS={class:"d-flex no-wrap ms-auto"},HS={class:"m-1"},GS={style:{"min-width":"16rem"}},WS={class:"my-auto me-1"},KS=Vs("label",{class:"my-auto me-1"},null,-1),JS=[Vs("span",null,[Vs("i",{class:"fas fa-sync"})],-1)];var YS={__name:"page-host-details-flow-sankey",props:{is_local:Boolean},setup(e){const t=e,a=e=>i18n(e),l=`${http_prefix}/lua/pro/rest/v2/get/host/flows/data.lua`,n=va(null),s=va(!1),o=[{filter_name:"hosts_type",key:3,id:"local_origin_remote_target",title:a("flows_page.local_cli_remote_srv"),label:a("flows_page.local_cli_remote_srv"),filter_icon:!1,countable:!1},{filter_name:"hosts_type",key:4,id:"remote_origin_local_target",title:a("flows_page.local_srv_remote_cli"),label:a("flows_page.local_srv_remote_cli"),filter_icon:!1,countable:!1},{filter_name:"hosts_type",key:5,id:"all_hosts",title:a("flows_page.all_flows"),label:a("flows_page.all_flows"),filter_icon:!1,countable:!1}];t.is_local?o.unshift({filter_name:"hosts_type",key:1,id:"local_only",title:a("flows_page.local_only"),label:a("flows_page.local_only"),filter_icon:!1,countable:!1}):o.unshift({filter_name:"hosts_type",key:2,id:"remote_only",title:a("flows_page.remote_only"),label:a("flows_page.remote_only"),filter_icon:!1,countable:!1});const i=va(o[3]),r=va({});function c(e){if(1==e.is_link_node)return;let t={host:e.info.ip,vlan:e.info.vlan},a=x.obj_to_url_params(t);const l=`${http_prefix}/lua/host_details.lua?${a}`;x.go_to_url(l)}dn((()=>{})),_n((()=>{u()}));const u=function(){let e=i.value;x.set_key_to_url(e.filter_name,e.id),async function(){s.value=!0;let e=await async function(){const e=function(){let e={host:x.get_url_entry("host"),vlan:x.get_url_entry("vlan"),ifid:x.get_url_entry("ifid"),hosts_type:x.get_url_entry("hosts_type")},t=x.obj_to_url_params(e),a=`${l}?${t}`;return a}();let t=await b.http_request(e);t=function(e){let t=e=>console.error(`link (source: ${e.source_node_id}, target: ${e.target_node_id}) removed for not existing source/target node`),a=function(e,t){let a={};e.nodes.forEach((e=>a[e.node_id]=!0));let l=e=>null!=a[e.source_node_id]&&null!=a[e.target_node_id],n=function(e,t,a){return e.filter((e=>{const l=t(e);return 0==l&&null!=a&&a(e),l}))}(e.links,l,t);return n}(e,t);return{nodes:e.nodes,links:a}}(t);let a=x.get_url_entry("host"),s=function(e,t){if(0==e.nodes.length&&0==e.links.length)return e;let a={};e.nodes.forEach((e=>a[e.node_id]=e));const l=e=>{if(e.source_node_id==t)return-1;if(e.target_node_id==t)return 1;throw`Wrong direction link ${e.source_node_id} -> ${e.target_node_id}`},n=(e,a)=>e==t?e:`${a}_${e}`;let s={},o={nodes:[],links:[]};e.links.forEach((e=>{let t,i=l(e),r={source_node_id:n(e.source_node_id,i),target_node_id:n(e.target_node_id,i),label:e.label,value:e.value,data:e};if(-1==i){let l=a[e.target_node_id];t={node_id:r.target_node_id,label:l.label,data:l}}else{let l=a[e.source_node_id];t={node_id:r.source_node_id,label:l.label,data:l}}o.links.push(r),null==s[t.node_id]&&(s[t.node_id]=!0,o.nodes.push(t))}));let i=a[t];o.nodes.push({node_id:i.node_id,label:i.label,data:i}),o.nodes.forEach((e=>a[e.node_id]=e));const r=e=>`${l(e)}_${e.label}`;let c={};o.links.forEach((e=>{let t=r(e),l=c[t];null==l&&(l={id:t,label:e.label,data:{...e,is_link_node:!0},node_links:[]},c[t]=l),l.node_links.push({source:a[e.source_node_id],target:a[e.target_node_id],value:_(e)})}));let u=o.nodes.map((e=>e)),d=[];for(let e in c){let t=c[e],a={node_id:t.id,label:t.label,data:t.data};u.push(a),t.node_links.forEach((e=>{d.push({source_node_id:e.source.node_id,target_node_id:a.node_id,label:`${e.source.label} - ${e.target.label}: ${a.label}`,value:e.value,data:e}),d.push({source_node_id:a.node_id,target_node_id:e.target.node_id,label:`${e.source.label} - ${e.target.label}: ${a.label}`,value:e.value,data:e})}))}let p={},f=[];u.map(((e,t)=>{let a={index:t,node_id:e.node_id,label:e.label,data:e.data};p[e.node_id]=a,f.push(a)}));let v=d.map((e=>{let t=p[e.source_node_id],a=p[e.target_node_id];return{source:t.index,target:a.index,source_node_id:t.index,target_node_id:a.index,value:e.value,label:e.label}}));return{nodes:f,links:v}}(t,a);return s.links.length>0&&s.nodes.length>0?n.value.set_no_data_flag(!1):n.value.set_no_data_flag(!0),s}();r.value=e,s.value=!1}()},d=function(){u()};function _(e){return e.data?.info?.traffic}return(e,t)=>(Ps(),Ms("div",RS,[Vs("div",DS,[Vs("div",zS,[s.value?(Ps(),Ls(wf,{key:0})):Ys("v-if",!0),Vs("div",qS,[Vs("div",{class:K(["align-items-center justify-content-end mb-3",[s.value?"ntopng-gray-out":""]]),style:{height:"70vh"}},[Vs("div",BS,[Vs("div",VS,[Vs("div",HS,[Vs("div",GS,[Vs("label",WS,te(a("hosts"))+": ",1),Hs(n_,{selected_option:i.value,"onUpdate:selected_option":t[0]||(t[0]=e=>i.value=e),options:o,onSelect_option:u},null,8,["selected_option","options","onSelect_option"])])]),Vs("div",null,[KS,Vs("div",null,[Vs("button",{class:"btn btn-link m-1",tabindex:"0",type:"button",onClick:t[1]||(t[1]=(...e)=>d&&d(...e))},JS)])])])]),Hs(FS,{ref_key:"sankey_chart",ref:n,onNode_click:c,sankey_data:r.value},null,8,["onNode_click","sankey_data"])],2)])])])]))},__file:"http_src/vue/page-host-details-flow-sankey.vue"};const ZS={isEmptyOrNull:e=>!(null!=e&&""!=e&&0!=e),isEmptyArrayOrNull:e=>!(null!=e&&0!==e.length)};function XS(e){if("number"==typeof e)return e;if("string"==typeof e){if(""==e)return 0;e=e.split(",").join(""),e=parseInt(e)}else e=0;return e}const QS=function(e,t,a){return t==e&&1==a&&(t=99999999999),t},eN=function(e,t,a){return e=XS(e),t=XS(t),1==a?e-t:t-e},tN=function(e,t,a,l){return e=QS(l,e,a),t=QS(l,t,a),eN(e,t,a)},aN={sortByIP:function(e,t,a){return e=NtopUtils.convertIPAddress(e),t=NtopUtils.convertIPAddress(t),1==a?e.localeCompare(t):t.localeCompare(e)},sortByName:function(e,t,a){return 1==a?e?.localeCompare(t):t?.localeCompare(e)},sortByNumber:eN,sortByNumberWithNormalizationValue:tN},lN={key:0,class:"alert alert-info alert-dismissable"},nN=Vs("span",{class:"text-info me-1"},null,-1),sN={class:"form-group ms-2 me-2 mt-3 row"},oN={class:"col-form-label col-sm-2"},iN={class:"col-sm-10"},rN={class:"btn-group btn-group-toggle","data-bs-toggle":"buttons"},cN={key:1,class:"form-group ms-2 me-2 mt-3 row"},uN={class:"col-form-label col-sm-2"},dN={class:"col-sm-10"},_N=["placeholder"],pN={key:2,class:"form-group ms-2 me-2 mt-3 row"},fN={class:"col-form-label col-sm-2"},vN={class:"col-sm-10"},mN={key:3,class:"form-group ms-2 me-2 mt-3 row"},hN={class:"col-form-label col-sm-2"},gN={class:"col-sm-10"},bN={key:4,class:"form-group ms-2 me-2 mt-3 row"},yN={class:"col-form-label col-sm-2"},wN={class:"col-10"},xN={key:5,class:"form-group ms-2 me-2 mt-3 row"},kN={class:"col-form-label col-sm-2"},$N={class:"col-10"},SN={class:"col-form-label col-sm-2"},NN={class:"col-10"},CN={key:6,class:"form-group ms-2 me-2 mt-3 row"},AN={class:"col-form-label col-sm-2"},EN={class:"col-10"},TN={key:7,class:"form-group ms-2 me-2 mt-3 row"},PN={class:"col-form-label col-sm-2"},UN={class:"col-10"},IN={key:8,class:"form-group ms-2 me-2 mt-3 row"},ON={class:"col-form-label col-sm-2"},jN={key:0,class:"col-10"},MN={key:1,class:"col-10"},LN={key:2,class:"col-10"},FN={key:3,class:"col-10"},RN={key:4,class:"col-10"},DN={key:5,class:"col-10"},zN={key:6,class:"col-10"},qN={key:9,class:"form-group ms-2 me-2 mt-3 row"},BN={class:"col-form-label col-sm-2"},VN={class:"col-10"},HN={class:"form-group ms-2 me-2 mt-3 row",style:{"margin-top":"3px"}},GN={class:"col-form-label col-sm-2"},WN={class:"col-sm-3"},KN={class:"btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},JN=["value","id"],YN=["id","for"],ZN=["value","id"],XN=["id","for"],QN=["value","id"],eC=["id","for"],tC={class:"col-sm-2 btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},aC=["value","id"],lC=["id","for"],nC={key:10,class:"message alert alert-warning mt-3"},sC=["disabled"],oC=["disabled"];var iC={__name:"modal-add-host-rules",props:{metric_list:Array,ifid_list:Array,flow_exporter_devices:Array,interface_metric_list:Array,flow_device_metric_list:Array,frequency_list:Array,has_vlans:Boolean,has_profiles:Boolean,init_func:Function,page_csrf:String},emits:["add","edit"],setup(e,{expose:t,emit:l}){const n=e;va(""),va("");let s=va(!1),o=va(!1);const i=va(null);let r=i18n("if_stats_config.add_host_rules_title");const c=i18n("if_stats_config.host_placeholder"),u=va(!1),d=e=>i18n(e),_=va([]),p=va(null),f=va(null),v=va([]),m=va([]),h=va([]),g=va([]),b=va([]),y=va([]),w=va([]),x=va(null),k=va(null),S=va({}),N=va({}),C=va({}),A=va({}),E=va({}),T=va({}),P=va({}),U=va({}),I=va(!0),O=va({}),j=va(!0),M=va("hosts"),L=va(!1),F=va(!1),R=va(null),D=va(null),z=va(!1),q=va(null),B=va(null),V=va({}),H=va({}),G=va({}),W=va(null),J=va([]),Y=va({}),Z=va(null),X=va({}),Q=va([]),ee=va({}),ae=va(null),le=va({});let ne=va([]);const se=[d("if_stats_config.note_1"),d("if_stats_config.note_2"),d("if_stats_config.note_3"),d("if_stats_config.note_4")],oe=[d("if_stats_config.note_5")],ie=va([{title:d("volume"),label:d("volume"),id:"volume",active:!0},{title:d("throughput"),label:d("throughput"),id:"throughput",active:!1},{title:d("percentage"),label:d("percentage"),id:"percentage",active:!1}]),re=va([{title:d("volume"),label:d("volume"),id:"volume",active:!0},{title:d("throughput"),label:d("throughput"),id:"throughput",active:!1},{title:d("percentage"),label:d("percentage"),id:"percentage",active:!1}]),ce=va([{title:d("volume"),label:d("volume"),id:"volume",active:!0,measure_unit:"bps"},{title:d("throughput"),label:d("throughput"),id:"throughput",active:!1,measure_unit:"bps"},{title:d("percentage"),label:d("percentage"),id:"percentage",active:!1,measure_unit:"number"},{title:d("value"),label:d("value"),id:"value",active:!1,measure_unit:"number"}]),ue=va([{title:d("percentage"),label:d("percentage"),id:"absolute_percentage",active:!1,measure_unit:"number"}]),de=va([{title:d("kb"),label:d("kb"),id:"kb",value:1024,active:!1},{title:d("mb"),label:d("mb"),id:"mb",value:1048576,active:!1},{title:d("gb"),label:d("gb"),id:"gb",value:1073741824,active:!0,default_active:!0}]),_e=va([{title:d("kbps"),label:d("kbps"),id:"kbps",value:1e3,active:!1},{title:d("mbps"),label:d("mbps"),id:"mbps",value:1e6,active:!1},{title:d("gbps"),label:d("gbps"),id:"gbps",value:1e9,active:!0,default_active:!0}]),pe=va([{title:"+",label:">",id:"plus",value:1,active:!1},{title:"-",label:"<",id:"minus",value:-1,active:!0,default_active:!0}]),fe=[{title:"+",label:"%",id:"plus",value:1,active:!0}],ve=va(null),me=va(null);function he(e){e.forEach((e=>e.active=1==e.default_active))}n.page_csrf;const ge=e=>{M.value=e,ne.value=ie.value,"host_pool"==e||"CIDR"==e?(ye(),O.value="host_pool"==e?ne.value[1]:ne.value[0]):O.value=ie.value[0]},be=()=>{let e=[];"flowdev_port:usage"==U.value.id?(ue.value.forEach((t=>{"number"==t.measure_unit&&e.push(t)})),ne.value=e):(re.value.forEach((t=>{"value"!=t.id&&e.push(t)})),ne.value=e),O.value=ne.value[0]},ye=e=>{let t=[];"host_pool"==M.value&&"bps"!=P.value.measure_unit||"CIDR"==M.value&&"bps"!=G.value.measure_unit?(ce.value.forEach((e=>{"number"==e.measure_unit&&t.push(e)})),ne.value=t):(ce.value.forEach((e=>{"value"!=e.id&&t.push(e)})),ne.value=t),null!=e&&0!=e||(O.value=ne.value[0])},we=()=>{1==X.value.show_volume?j.value=!0:j.value=!1},xe=()=>{let e=new RegExp(wp.get_data_pattern("ip"));I.value=!(e.test(ve.value)||"*"===ve.value)},ke=e=>{const t=e.target.id;pe.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1}))},$e=e=>{const t=e.target.id;"throughput"==O.value.id?_e.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):"volume"==O.value.id?de.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):"percentage"==O.value.id&&fe.forEach((e=>{e.id===t?e.active=!0:e.active=!1}))},Se=e=>{let t="";"interface"!=M.value&&(t=ve.value);const a=N.value.id;let n=S.value.id,s=S.value.label;const o=M.value;let i,r,c,u,d,_=O.value.id,p=e?D.value:null;!1===j.value&&(_="",i="",u=me.value.value),"throughput"==_?(pe.value.forEach((e=>{e.active&&(c=e.value)})),d=parseInt(c),_e.value.forEach((e=>{e.active&&(r=e.value)})),u=r*parseInt(me.value.value)):"volume"==_?(pe.value.forEach((e=>{e.active&&(c=e.value)})),d=parseInt(c),de.value.forEach((e=>{e.active&&(r=e.value)})),u=r*parseInt(me.value.value)):"percentage"==_?(pe.value.forEach((e=>{e.active&&(c=e.value)})),d=parseInt(c),u=parseInt(me.value.value)):"value"!=_&&"absolute_percentage"!=_||(pe.value.forEach((e=>{e.active&&(c=e.value)})),d=parseInt(c),u=d*parseInt(me.value.value));let f="add";if(1==e&&(f="edit"),"Host"==M.value)i=S.value.extra_metric?S.value.extra_metric:null,l(f,{host:t,frequency:a,metric:n,metric_label:s,threshold:u,metric_type:_,extra_metric:i,rule_type:o,rule_threshold_sign:d,rule_id:p});else if("interface"==M.value){i=T.value.extra_metric?T.value.extra_metric:null,n=T.value.id,s=T.value.label;const e=T.value.id,t=C.value.id;l(f,{frequency:a,metric:e,metric_label:s,threshold:u,metric_type:_,extra_metric:i,rule_type:o,interface:t,rule_threshold_sign:d,rule_id:p})}else if("exporter"==M.value){let e=E.value.id;E.value.label;const t=A.value.id;"*"==t&&(e="*");const n=A.value.ifid;let s;U.value.id?s=y.value.find((e=>e.id==U.value.id)):(s=y.value.find((e=>null===e.id)),null!=e&&"*"!=e?(s=U.value,s.id="flowdev_port:traffic"):(s=U.value,s.id="flowdev:traffic"));let i=s.label;l(f,{host:t,frequency:a,metric:s.id,metric_label:i,threshold:u,metric_type:_,rule_type:o,interface:e,rule_ifid:n,rule_threshold_sign:d,rule_id:p})}else if("CIDR"==M.value){n=G.value.schema,s=G.value.label,t=H.value.id;const e=H.value.network_id;l(f,{host:t,frequency:a,metric:n,metric_label:s,threshold:u,metric_type:_,extra_metric:i,rule_type:o,rule_threshold_sign:d,rule_id:p,network:e})}else if("host_pool"==M.value){n=P.value.schema,s=P.value.label;const e=V.value.id,t=V.value.label;l(f,{host_pool_id:e,host_pool_label:t,frequency:a,metric:n,metric_label:s,threshold:u,metric_type:_,extra_metric:i,rule_type:o,rule_threshold_sign:d,rule_id:p})}else if("vlan"==M.value){n=X.value.schema,s=X.value.label;const e=Y.value.id,t=Y.value.label;l(f,{vlan_id:e,vlan_label:t,frequency:a,metric:n,metric_label:s,threshold:u,metric_type:_,extra_metric:i,rule_type:o,rule_threshold_sign:d,rule_id:p})}else if("profiles"==M.value){n=le.value.schema,s=le.value.label;const e=ee.value.id;l(f,{profile:e,frequency:a,metric:n,metric_label:s,threshold:u,metric_type:_,extra_metric:i,rule_type:o,rule_threshold_sign:d,rule_id:p})}},Ne=()=>{Se(!0)};async function Ce(){let e=[];if("*"==A.value.id)return;const t=a.buildURL(`${http_prefix}/lua/pro/rest/v2/get/flowdevice/stats.lua?ip=${A.value.id}&ifid=${A.value.ifid}`);await $.get(t,(function(t,a){e=t.rsp}));const l=[{id:"*",value:"*",label:"*",timeseries_available:e[0]?.timeseries_available}];e.forEach((e=>{l.push({id:e.id,label:e.name,timeseries_available:e.timeseries_available})})),h.value=l,E.value=h.value[1],L.value=h.value[0]?.timeseries_available}const Ae=function(e){const t=[{id:"*",value:"*",label:"*"}];return e.forEach((e=>{const a=e.probe_ip;t.push({id:a,label:a,value:a,ifid:e.ifid})})),t.sort(((e,t)=>aN.sortByIP(e.label,t.label,1))),t},Ee=function(e){const t=[];return e.forEach((e=>{if(0!=e.key){let a=e.key,l=e.column_vlan.split(">");l[1].split("[").length>1&&(a=l[1].split("<")[0]),t.push({id:e.key,label:a,value:e.key})}})),t.sort(((e,t)=>aN.sortByName(e.label,t.label,1))),t},Te=function(e){const t=[];return e.forEach((e=>{""!=e.column_profile&&t.push({id:e.column_profile,label:e.column_profile,value:e.column_profile})})),t.sort(((e,t)=>aN.sortByName(e.id,t.id,1))),t},Pe=function(){Ce()};return dn((()=>{ie.value.forEach((e=>{e.active&&(O.value=e)})),z.value=!1})),t({show:e=>{null!=e?(e=>{null!=e&&(r=d("if_stats_config.edit_host_rules_title"),F.value=!0,D.value=e.row_id,I.value=!1,pe.value.forEach((t=>{t.active=t.value==e.threshold_sign})),ie.value.forEach((t=>{t.id==e.metric_type?(t.active=!0,O.value=t):t.active=!1})),ne.value=ie.value,"volume"==e.metric_type?de.value.forEach((t=>{if(e.threshold%t.value==0){let a=e.threshold/t.value;a<1024?(t.active=!0,me.value.value=0==a?1:a):t.active=!1}else t.active=!1})):"throughput"==e.metric_type?_e.value.forEach((t=>{if(e.threshold%t.value==0){let a=e.threshold/t.value;a<1e3?(t.active=!0,me.value.value=0==a?1:a):t.active=!1}else t.active=!1})):"percentage"==e.metric_type?me.value.value=e.threshold:"value"!=e.metric_type&&"absolute_percentage"!=e.metric_type||(me.value.value=e.threshold*e.threshold_sign),M.value=e.rule_type,"interface"==M.value?(v.value.forEach((t=>{t.id==e.target&&(C.value=t)})),null!=e.extra_metric?g.value.forEach((t=>{t.id==e.metric&&t.extra_metric==e.extra_metric&&(T.value=t)})):g.value.forEach((t=>{t.id==e.metric&&(T.value=t)}))):"exporter"==M.value?(m.value.forEach((t=>{t.id==e.target&&(A.value=t)})),h.value.forEach((t=>{t.id==e.flow_exp_ifid&&(E.value=t)}))):"Host"==M.value?(ve.value=e.target,null!=e.extra_metric?_.value.forEach((t=>{e.metric.contains(t.id)&&t.extra_metric==e.extra_metric&&(S.value=t)})):_.value.forEach((t=>{t.id==e.metric&&(S.value=t)}))):"CIDR"==M.value?(B.value.forEach((t=>{t.id==e.target&&(H.value=t)})),W.value.forEach((t=>{t.label==e.metric_label&&(G.value=t)})),ye(!0),ne.value.forEach((t=>{t.id==e.metric_type&&(O.value=t)}))):"host_pool"==M.value?(q.value.forEach((t=>{t.id==e.target&&(V.value=t)})),b.value.forEach((t=>{t.label==e.metric_label&&(P.value=t)})),ye(),ne.value.forEach((t=>{t.id==e.metric_type&&(O.value=t)}))):"vlan"==M.value?(Y.value=J.value.find((t=>t.id==e.target)),Z.value.forEach((t=>{t.schema==e.metric&&(X.value=t)}))):"profiles"==M.value&&(ee.value=Q.value.find((t=>t.id==e.target)),le.value=ae.value.find((t=>t.schema==e.metric))))})(e):async function(){z.value=!1,ve.value="",M.value="Host",C.value=v.value[0],S.value=_.value[0],T.value=g.value[0],U.value=y.value[0],F.value=!1,r=i18n("if_stats_config.add_host_rules_title"),N.value=w.value[0],O.value=ie.value[0],A.value=m.value[1],null!=A.value&&Ce(),ie.value.forEach((e=>e.active=!1)),ie.value[0].active=!0,null!=q.value&&(V.value=q.value[0]),P.value=b.value[0],null!=B.value&&(H.value=B.value[0]),null!=W.value&&(G.value=W.value[0]),he(de.value),he(_e.value),he(pe.value),M.value="Host",I.value=!0,me.value.value=1,D.value=null,ne.value=ie.value,"Host"==M||"interface"==M?O.vale=ie.value[0]:O.value=ne.value[0],n.has_vlans&&(Y.value=J.value[0],X.value=Z.value[0])}(),i.value.show()},close:()=>{F.value=!1,z.value=!1,i.value.close()},metricsLoaded:async(e,t,a,l,i,r,c,d,h,x,k,$,E,T,P,U)=>{u.value=!0,_.value=e,g.value=a,v.value=function(e){let t=[];return e.forEach((e=>{let a={id:e.ifid,label:e.name};t.push(a)})),t.sort(((e,t)=>function(e,t){let a=e.label.toLowerCase(),l=t.label.toLowerCase();return a<l?-1:a>l?1:0}(e,t))),t}(t),w.value=n.frequency_list,N.value=w.value[0],S.value=_.value[0],C.value=v.value[0],R.value=r,c&&(p.value=c),d&&(f.value=d),m.value=Ae(l),ZS.isEmptyArrayOrNull(h)||(s.value=!0),q.value=h,b.value=k,ZS.isEmptyArrayOrNull(x)||(o.value=!0),B.value=x,W.value=$,y.value=i,A.value=m.value[1],null!=A.value&&Ce(),n.has_vlans&&(J.value=Ee(E),Y.value=J.value[0],Z.value=T,X.value=Z.value[1]),n.has_profiles&&(Q.value=Te(P),ee.value=Q.value[0],ae.value=U,le.value=ae.value[0])},invalidAdd:()=>{z.value=!0}}),(e,t)=>(Ps(),Ls(sp,{onShowed:t[28]||(t[28]=e=>{}),ref_key:"modal_id",ref:i},{title:ml((()=>[Ks(te(ya(r)),1)])),body:ml((()=>[z.value?(Ps(),Ms("div",lN,[nN,Vs("span",null,te(d("rule_already_present")),1)])):Ys("v-if",!0),Ys(" Target information, here an IP is put "),Vs("div",sN,[Vs("label",oN,[Vs("b",null,te(d("if_stats_config.add_rules_type")),1)]),Vs("div",iN,[Vs("div",rN,[Vs("label",{class:K(["btn",["Host"==M.value?"btn-primary active":"btn-secondary"]])},[Vs("input",{class:"btn-check",type:"radio",name:"rule_type",value:"hosts",onClick:t[0]||(t[0]=e=>ge("Host"))}),Ks(" "+te(d("if_stats_config.add_rules_type_host")),1)],2),Vs("label",{class:K(["btn",["interface"==M.value?"btn-primary active":"btn-secondary"]])},[Vs("input",{onClick:t[1]||(t[1]=e=>ge("interface")),class:"btn-check",type:"radio",name:"rule_type",value:"interface"}),Ks(" "+te(d("if_stats_config.add_rules_type_interface")),1)],2),1==L.value?(Ps(),Ms("label",{key:0,class:K(["btn",["exporter"==M.value?"btn-primary active":"btn-secondary"]])},[Vs("input",{onClick:t[2]||(t[2]=e=>ge("exporter")),class:"btn-check",type:"radio",name:"rule_type",value:"exporter"}),Ks(" "+te(d("if_stats_config.add_rules_type_flow_exporter")),1)],2)):Ys("v-if",!0),1==ya(s)?(Ps(),Ms("label",{key:1,class:K(["btn",["host_pool"==M.value?"btn-primary active":"btn-secondary"]])},[Vs("input",{onClick:t[3]||(t[3]=e=>ge("host_pool")),class:"btn-check",type:"radio",name:"rule_type",value:"host_pool"}),Ks(" "+te(d("if_stats_config.add_rules_type_host_pool")),1)],2)):Ys("v-if",!0),1==ya(o)?(Ps(),Ms("label",{key:2,class:K(["btn",["CIDR"==M.value?"btn-primary active":"btn-secondary"]])},[Vs("input",{onClick:t[4]||(t[4]=e=>ge("CIDR")),class:"btn-check",type:"radio",name:"rule_type",value:"CIDR"}),Ks(" "+te(d("if_stats_config.add_rules_type_cidr")),1)],2)):Ys("v-if",!0),1==n.has_vlans?(Ps(),Ms("label",{key:3,class:K(["btn",["vlan"==M.value?"btn-primary active":"btn-secondary"]])},[Vs("input",{onClick:t[5]||(t[5]=e=>ge("vlan")),class:"btn-check",type:"radio",name:"rule_type",value:"vlan"}),Ks(" "+te(d("if_stats_config.add_rules_type_vlans")),1)],2)):Ys("v-if",!0),1==n.has_profiles?(Ps(),Ms("label",{key:4,class:K(["btn",["profiles"==M.value?"btn-primary active":"btn-secondary"]])},[Vs("input",{onClick:t[6]||(t[6]=e=>ge("profiles")),class:"btn-check",type:"radio",name:"rule_type",value:"profiles"}),Ks(" "+te(d("if_stats_config.add_rules_type_profiles")),1)],2)):Ys("v-if",!0)])])]),"Host"==M.value?(Ps(),Ms("div",cN,[Vs("label",uN,[Vs("b",null,te(d("if_stats_config.target")),1)]),Vs("div",dN,[wn(Vs("input",{"onUpdate:modelValue":t[7]||(t[7]=e=>ve.value=e),onInput:xe,class:"form-control",type:"text",placeholder:ya(c),required:""},null,40,_N),[[ji,ve.value]])])])):Ys("v-if",!0),"CIDR"==M.value?(Ps(),Ms("div",pN,[Vs("label",fN,[Vs("b",null,te(d("if_stats_config.target")),1)]),Vs("div",vN,[Hs(n_,{selected_option:H.value,"onUpdate:selected_option":t[8]||(t[8]=e=>H.value=e),options:B.value},null,8,["selected_option","options"])])])):Ys("v-if",!0),"host_pool"==M.value?(Ps(),Ms("div",mN,[Vs("label",hN,[Vs("b",null,te(d("if_stats_config.target")),1)]),Vs("div",gN,[Hs(n_,{selected_option:V.value,"onUpdate:selected_option":t[9]||(t[9]=e=>V.value=e),options:q.value},null,8,["selected_option","options"])])])):Ys("v-if",!0),"interface"==M.value?(Ps(),Ms("div",bN,[Vs("label",yN,[Vs("b",null,te(d("if_stats_config.target_interface")),1)]),Vs("div",wN,[Hs(n_,{selected_option:C.value,"onUpdate:selected_option":t[10]||(t[10]=e=>C.value=e),options:v.value},null,8,["selected_option","options"])])])):Ys("v-if",!0),"exporter"==M.value&&1==L.value?(Ps(),Ms("div",xN,[Vs("label",kN,[Vs("b",null,te(d("if_stats_config.target_exporter_device")),1)]),Vs("div",$N,[Hs(n_,{selected_option:A.value,"onUpdate:selected_option":t[11]||(t[11]=e=>A.value=e),options:m.value,onSelect_option:Pe},null,8,["selected_option","options"])]),"*"!=A.value.id?(Ps(),Ms(Ss,{key:0},[Vs("label",SN,[Vs("b",null,te(d("if_stats_config.target_exporter_device_ifid")),1)]),Vs("div",NN,[Hs(n_,{selected_option:E.value,"onUpdate:selected_option":t[12]||(t[12]=e=>E.value=e),options:h.value},null,8,["selected_option","options"])])],64)):Ys("v-if",!0)])):Ys("v-if",!0),"vlan"==M.value?(Ps(),Ms("div",CN,[Vs("label",AN,[Vs("b",null,te(d("if_stats_config.target_vlan")),1)]),Vs("div",EN,[Hs(n_,{selected_option:Y.value,"onUpdate:selected_option":t[13]||(t[13]=e=>Y.value=e),options:J.value},null,8,["selected_option","options"])])])):Ys("v-if",!0),Ys(" Traffic Profiles "),"profiles"==M.value?(Ps(),Ms("div",TN,[Vs("label",PN,[Vs("b",null,te(d("if_stats_config.target_profile")),1)]),Vs("div",UN,[Hs(n_,{selected_option:ee.value,"onUpdate:selected_option":t[14]||(t[14]=e=>ee.value=e),options:Q.value},null,8,["selected_option","options"])])])):Ys("v-if",!0),Ys(" Metric information, here a metric is selected (e.g. DNS traffic) "),u.value?(Ps(),Ms("div",IN,[Vs("label",ON,[Vs("b",null,te(d("if_stats_config.metric")),1)]),"Host"==M.value?(Ps(),Ms("div",jN,[Hs(n_,{selected_option:S.value,"onUpdate:selected_option":t[15]||(t[15]=e=>S.value=e),onSelect_option:t[16]||(t[16]=e=>{1==S.value.show_volume?j.value=!0:j.value=!1}),options:_.value},null,8,["selected_option","options"])])):"interface"==M.value?(Ps(),Ms("div",MN,[Hs(n_,{selected_option:T.value,"onUpdate:selected_option":t[17]||(t[17]=e=>T.value=e),onSelect_option:t[18]||(t[18]=e=>{1==T.value.show_volume?j.value=!0:j.value=!1}),options:g.value},null,8,["selected_option","options"])])):"exporter"==M.value?(Ps(),Ms("div",LN,[Hs(n_,{selected_option:U.value,"onUpdate:selected_option":t[19]||(t[19]=e=>U.value=e),onSelect_option:be,options:y.value},null,8,["selected_option","options"])])):"host_pool"==M.value?(Ps(),Ms("div",FN,[Hs(n_,{selected_option:P.value,"onUpdate:selected_option":t[20]||(t[20]=e=>P.value=e),onSelect_option:t[21]||(t[21]=e=>ye()),options:b.value},null,8,["selected_option","options"])])):"CIDR"==M.value?(Ps(),Ms("div",RN,[Hs(n_,{selected_option:G.value,"onUpdate:selected_option":t[22]||(t[22]=e=>G.value=e),onSelect_option:t[23]||(t[23]=e=>ye()),options:W.value},null,8,["selected_option","options"])])):"vlan"==M.value?(Ps(),Ms("div",DN,[Hs(n_,{selected_option:X.value,"onUpdate:selected_option":t[24]||(t[24]=e=>X.value=e),options:Z.value,onSelect_option:we},null,8,["selected_option","options"])])):"profiles"==M.value?(Ps(),Ms("div",zN,[Hs(n_,{selected_option:le.value,"onUpdate:selected_option":t[25]||(t[25]=e=>le.value=e),options:ae.value},null,8,["selected_option","options"])])):Ys("v-if",!0)])):Ys("v-if",!0),Ys(" Frequency information, a frequency of 1 day, 5 minute or 1 hour for example "),u.value?(Ps(),Ms("div",qN,[Vs("label",BN,[Vs("b",null,te(d("if_stats_config.frequency")),1)]),Vs("div",VN,[Hs(n_,{selected_option:N.value,"onUpdate:selected_option":t[26]||(t[26]=e=>N.value=e),options:w.value},null,8,["selected_option","options"])])])):Ys("v-if",!0),Ys(" Threshold information, maximum amount of bytes "),Vs("div",HN,[Vs("label",GN,[Vs("b",null,te(d("if_stats_config.threshold")),1)]),j.value?(Ps(),Ms(Ss,{key:0},[Vs("div",WN,[Hs(n_,{selected_option:O.value,"onUpdate:selected_option":t[27]||(t[27]=e=>O.value=e),options:ya(ne)},null,8,["selected_option","options"])]),Vs("div",{class:K(["col-3",["throughput"==O.value.id?"p-0":""]])},[Vs("div",KN,["throughput"==O.value.id?(Ps(!0),Ms(Ss,{key:0},En(_e.value,(e=>(Ps(),Ms(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:x,name:"threshold_measure"},null,8,JN),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:$e,for:e.id},te(e.label),11,YN)],64)))),256)):Ys("v-if",!0),"percentage"==O.value.id?(Ps(),Ms(Ss,{key:1},En(fe,(e=>(Ps(),Ms(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:x,name:"threshold_measure"},null,8,ZN),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:$e,for:e.id},te(e.label),11,XN)],64)))),64)):Ys("v-if",!0),"volume"==O.value.id?(Ps(!0),Ms(Ss,{key:2},En(de.value,(e=>(Ps(),Ms(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:x,name:"threshold_measure"},null,8,QN),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:$e,for:e.id},te(e.label),11,eC)],64)))),256)):Ys("v-if",!0)])],2),Vs("div",tC,[(Ps(!0),Ms(Ss,null,En(pe.value,(e=>(Ps(),Ms(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_sign",ref:k,name:"threshold_sign"},null,8,aC),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:ke,for:e.id},te(e.label),11,lC)],64)))),256))])],64)):Ys("v-if",!0),Vs("div",{class:K([j.value?"col-sm-2":"col-sm-8"])},["percentage"==O.value.id?(Ps(),Ms("input",{key:0,value:"1",ref_key:"threshold",ref:me,type:"number",name:"threshold",class:"form-control",max:"100",min:"1",required:""},null,512)):(Ps(),Ms("input",{key:1,value:"1",ref_key:"threshold",ref:me,type:"number",name:"threshold",class:"form-control",max:"1023",min:"1",required:""},null,512))],2)]),"percentage"==O.value.id?(Ps(),Ms("div",nC,te(d("show_alerts.host_rules_percentage")),1)):Ys("v-if",!0)])),footer:ml((()=>[Hs(fv,{note_list:se,add_sub_notes:!0,sub_note_list:oe}),0==F.value?(Ps(),Ms("button",{key:0,type:"button",onClick:Se,class:"btn btn-primary",disabled:I.value&&"Host"==M.value},te(d("add")),9,sC)):(Ps(),Ms("button",{key:1,type:"button",onClick:Ne,class:"btn btn-primary",disabled:I.value&&"Host"==M.value},te(d("apply")),9,oC))])),_:1},512))},__file:"http_src/vue/modal-add-host-rules.vue"};const rC={class:"row"},cC={class:"col-md-12 col-lg-12"},uC={class:"card"},dC=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),_C={class:"card-body"},pC={class:"mb-4"},fC={id:"host_rules"},vC={class:"card-footer"};var mC={__name:"page-host-rules",props:{page_csrf:String,has_vlans:Boolean,has_profiles:Boolean,ifid:String},setup(e){const t=e,l=va(null),n=va(null),s=va(null),o=e=>i18n(e),i=va({}),r=va({}),c=va(!1),u=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=host`,d=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=interface`,_=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=host_pool`,p=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=CIDR`,f=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=vlan`,v=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=profiles`,m=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=exporter`,h=`${http_prefix}/lua/pro/rest/v2/get/flowdevices/stats.lua`;http_prefix;const g=`${http_prefix}/lua/rest/v2/get/host/pool/pools.lua`,b=`${http_prefix}/lua/rest/v2/get/network/networks.lua`,y=`${http_prefix}/lua/rest/v2/get/ntopng/interfaces.lua`,w=`${http_prefix}/lua/get_vlans_data.lua`,x=`${http_prefix}/lua/get_traffic_profiles.lua`,k=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_data.lua`,S=`${http_prefix}/lua/pro/rest/v2/add/interface/host_rules/add_host_rule.lua`,N=`${http_prefix}/lua/pro/rest/v2/delete/interface/host_rules/delete_host_rule.lua`,C=[o("if_stats_config.generic_notes_1"),o("if_stats_config.generic_notes_2"),o("if_stats_config.generic_notes_3")],A={ifid:t.ifid,csrf:t.page_csrf,gui:!0};let E={},T=o("if_stats_config.delete_host_rules_title");o("if_stats_config.edit_local_network_rules");let P=o("if_stats_config.delete_host_rules_description"),U=[],I=[],O=[],j=[],M=[],L=[],F=[],R=[],D=[],z=[],q=[],B=[],V=[];const H=[{title:i18n("show_alerts.5_min"),label:i18n("show_alerts.5_min"),id:"5min",value:"5min"},{title:i18n("show_alerts.hourly"),label:i18n("show_alerts.hourly"),id:"hour",value:"hour"},{title:i18n("show_alerts.daily"),label:i18n("show_alerts.daily"),id:"day",value:"day"}];async function G(e){await Y(e)}const W=function(){const e=r.value;return r.value=null,e},K=function(){l.value.reload()},J=async function(){const e=i.value,t=a.buildURL(N,{...A,rule_id:e.id,rule_type:e.rule_type});await $.post(t,(function(e,t){K()}))},Y=async function(e){e.csrf=t.page_csrf,e.ifid=t.ifid;const a=await ntopng_utility.http_post_request(S,e);c.value=a.rsp,0==c.value?(s.value.close(),K()):s.value.invalidAdd()},Z=function(e){let t={handlerId:"delete_host",onClick:()=>{var t;t=e,i.value=t,n.value.show()}},a={handlerId:"edit_rule",onClick:()=>{var t;t=e,r.value=t,i.value=t,s.value.show(t)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:a,icon:"fa-edit",title:i18n("edit")},{class:"pointer",handler:t,icon:"fa-trash",title:i18n("delete")}])},X=function(){const e=[];e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(){K()}},{text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){s.value.show()}});const t=[{columnName:o("actions"),width:"5%",targets:0,name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return Z(a)}},{columnName:o("id"),visible:!1,targets:1,name:"id",data:"id",className:"text-nowrap",responsivePriority:1},{columnName:o("if_stats_config.target"),targets:2,width:"20",name:"target",data:"target",className:"text-nowrap",responsivePriority:1,render:function(e,t,a){return function(e,t){let a="";if(t.rule_type&&"interface"==t.rule_type)a=t.selected_iface;else if(!t.rule_type||"Host"!=t.rule_type&&"CIDR"!=t.rule_type)if("host_pool"==t.rule_type)a=t.host_pool_label;else if("vlan"==t.rule_type)a=t.vlan_label;else if("profiles"==t.rule_type)a=t.target;else if(t.rule_type&&"exporter"==t.rule_type&&"flowdev:traffic"==t.metric)a=t.target;else{let e=""!=t.flow_exp_ifid_name&&null!=t.flow_exp_ifid_name?t.flow_exp_ifid_name:t.flow_exp_ifid;a=t.target+" "+o("on_interface")+": "+e}else a=t.target;return a}(0,a)}},{columnName:o("if_stats_config.rule_type"),targets:3,width:"20",name:"rule_type",data:"rule_type",className:"text-center",responsivePriority:1,render:function(e,t,a){return function(e,t){let a="";return t.rule_type&&"interface"==t.rule_type?a="<span class='badge bg-secondary'>"+o("interface")+" <i class='fas fa-ethernet'></i></span>":t.rule_type&&"Host"==t.rule_type?a="<span class='badge bg-secondary'>"+o("about.host_checks_directory")+" <i class='fas fa-laptop'></i></span>":t.rule_type&&"host_pool"==t.rule_type?a="<span class='badge bg-secondary'>"+o("alert_entities.host_pool")+" <i class='fas fa-laptop'></i></span>":t.rule_type&&"CIDR"==t.rule_type?a="<span class='badge bg-secondary'>"+o("network")+" <i class='fas fa-laptop'></i></span>":t.rule_type&&"exporter"==t.rule_type&&"flowdev:traffic"==t.metric?a="<span class='badge bg-secondary'>"+o("flow_exporter_device")+" <i class='fas fa-laptop'></i></span>":t.rule_type&&"exporter"==t.rule_type&&t.metric.includes("flowdev_port")?a="<span class='badge bg-secondary'>"+o("interface_flow_exporter_device")+" <i class='fas fa-ethernet'></i></span>":t.rule_type&&"vlan"==t.rule_type?a="<span class='badge bg-secondary'>"+o("vlan")+" <i class='fas fa-ethernet'></i></span>":t.rule_type&&"profiles"==t.rule_type&&(a="<span class='badge bg-secondary'>"+o("if_stats_config.target_profile")+" <i class='fas fa-ethernet'></i></span>"),a}(0,a)}},{columnName:o("if_stats_config.metric"),targets:4,width:"10",name:"metric",data:"metric",className:"text-center",responsivePriority:1,render:function(e,t,a){return function(e,t){let a=e;return t.metric_label?a=t.metric_label:"interface"!=t.rule_type?U.forEach((l=>{l.id==e&&(t.extra_metric?t.extra_metric==l.extra_metric&&(a=l.label):a=l.label)})):I.forEach((l=>{l.id==e&&(t.extra_metric?t.extra_metric==l.extra_metric&&(a=l.label):a=l.label)})),a}(e,a)}},{columnName:o("if_stats_config.frequency"),targets:5,width:"10",name:"frequency",data:"frequency",className:"text-center",responsivePriority:1,render:function(e){return function(e){let t="";return H.forEach((a=>{e==a.id&&(t=a.title)})),t}(e)}},{columnName:o("if_stats_config.last_measurement"),targets:6,width:"10",name:"last_measurement",data:"last_measurement",className:"text-center",responsivePriority:1,render:function(e,t,l){return function(e,t){let l=parseInt(e);if("*"==t.target)return"";if(null==e)return"";if(t.metric_type&&"throughput"==t.metric_type)l=a.bitsToSize(e);else if(t.metric_type&&"volume"==t.metric_type)l=a.bytesToSize(e);else if(t.metric_type&&t.metric_type.includes("percentage")){const t=e<0?-1:1,n=a.fpercent(e*t);l=-1==t?`<label title='${i18n("percentage_decrease")}'> (-) ${n} </label>`:`<label title='${i18n("percentage_increase")}'>${n}</label>`}return l}(e,l)}},{columnName:o("if_stats_config.threshold"),targets:7,width:"10",name:"threshold",data:"threshold",className:"text-end",responsivePriority:1,render:function(e,t,l){return function(e,t){let l=parseInt(e),n="> ";return t.threshold_sign&&"-1"==t.threshold_sign&&(n="< "),t.metric_type&&"throughput"==t.metric_type?l=n+a.bitsToSize(e):t.metric_type&&"volume"==t.metric_type?l=n+a.bytesToSize(e):t.metric_type&&t.metric_type.contains("percentage")?(e<0&&(e*=-1),l=n+a.fpercent(e)):t.metric_type&&"value"==t.metric_type&&(e<0&&(e*=-1),l=n+e),l}(e,l)}},{columnName:o("metric_type"),visible:!1,targets:8,name:"metric_type",data:"metric_type",className:"text-nowrap",responsivePriority:1}],l={table_buttons:e,data_url:a.buildURL(k,A),enable_search:!0,columns_config:t,table_config:{scrollX:!1,serverSide:!1,order:[[1,"desc"]],columnDefs:t}};E=l};return dn((async()=>{X(),await async function(){const e=a.buildURL(u,A);await $.get(e,(function(e,t){U=e.rsp}))}(),await async function(){const e=a.buildURL(y,A);await $.get(e,(function(e,t){j=e.rsp}))}(),await async function(){const e=a.buildURL(d,A);await $.get(e,(function(e,t){I=e.rsp}))}(),await async function(){const e=a.buildURL(m,{...A});await $.get(e,(function(e,t){L=e.rsp}))}(),await async function(){const e=a.buildURL(h,{...A});await $.get(e,(function(e,t){M=e.rsp}))}(),await async function(){const e=a.buildURL(g,A);let t;await $.get(e,(function(e,a){t=e.rsp})),t.sort(((e,t)=>e.label>t.label?1:t.label>e.label?-1:0)),F=t}(),await async function(){const e=a.buildURL(_,A);let t;await $.get(e,(function(e,a){t=e.rsp})),t.sort(((e,t)=>e.label>t.label?1:t.label>e.label?-1:0)),O=t}(),await async function(){const e=a.buildURL(b,A);let t;await $.get(e,(function(e,a){t=e.rsp})),t.sort(((e,t)=>e.label>t.label?1:t.label>e.label?-1:0)),R=t}(),await async function(){const e=a.buildURL(p,A);let t;await $.get(e,(function(e,a){t=e.rsp})),t.sort(((e,t)=>e.label>t.label?1:t.label>e.label?-1:0)),D=t}(),t.has_vlans&&(await async function(){const e=a.buildURL(w,A);await $.get(e,(function(e,t){z=JSON.parse(e).data}))}(),await async function(){const e=a.buildURL(f,A);let t;await $.get(e,(function(e,a){t=e.rsp})),t.sort(((e,t)=>e.label>t.label?1:t.label>e.label?-1:0)),q=t}()),t.has_profiles&&(await async function(){const e=a.buildURL(x,A);await $.get(e,(function(e,t){B=e.data}))}(),await async function(){const e=a.buildURL(v,A);let t;await $.get(e,(function(e,a){t=e.rsp})),V=t}()),s.value.metricsLoaded(U,j,I,M,L,t.page_csrf,null,null,F,R,O,D,z,q,B,V)})),mn((()=>{l.value.destroy_table()})),(e,a)=>(Ps(),Ms("div",rC,[Vs("div",cC,[Vs("div",uC,[dC,Vs("div",_C,[Vs("div",pC,[Vs("h4",null,te(o("if_stats_config.traffic_rules")),1)]),Vs("div",fC,[Hs(sx,{ref_key:"modal_delete_confirm",ref:n,title:ya(T),body:ya(P),onDelete:J},null,8,["title","body"]),Hs(iC,{ref_key:"modal_add_host_rule",ref:s,metric_list:ya(U),interface_metric_list:ya(I),frequency_list:H,init_func:W,has_vlans:t.has_vlans,has_profiles:t.has_profiles,onAdd:Y,onEdit:G},null,8,["metric_list","interface_metric_list","has_vlans","has_profiles"]),Hs($w,{ref_key:"table_host_rules",ref:l,table_buttons:ya(E).table_buttons,columns_config:ya(E).columns_config,data_url:ya(E).data_url,enable_search:ya(E).enable_search,table_config:ya(E).table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])]),Vs("div",vC,[Hs(fv,{note_list:C})])])])]))},__file:"http_src/vue/page-host-rules.vue"};const hC={class:"row"},gC={class:"col-md-12 col-lg-12"},bC={class:"card"},yC=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),wC={class:"card-body"},xC={id:"host_details_ports"},kC={class:"row mb-4 mt-4",id:"host_details_ports"},$C={class:"col-6"};var SC={__name:"page-host-details-ports",props:{page_csrf:String},setup(e){va(null),va([]),va({});const t=e=>i18n(e);dn((async()=>{await async function(){let e={};e.host=x.get_url_entry("host"),e.vlan=x.get_url_entry("vlan"),e.ifid=x.get_url_entry("ifid"),l.forEach((t=>{let l={...t.extra_params,...e};$.get(a.buildURL(t.url,l),(async function(e,a){let l=[];e.rsp.forEach((e=>{const t=e.port_info.port,a=e.port_info.l7_proto;l.push({label:`${t} (${a})`})})),t.stats_rows=l}))}))}()})),_n((async()=>{a.hideOverlays()})),mn((async()=>{traffic_table.value.destroy_table()})),i18n("graphs.cli_ports"),ntopChartApex.typeChart.DONUT,http_prefix,i18n("graphs.srv_ports"),ntopChartApex.typeChart.DONUT,http_prefix;const l=[{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"cli_port_flows",extra_params:{mode:"local",protocol:"tcp"},columns:[{id:"active_server_tcp_ports",label:t("ports_page.active_server_tcp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]},{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"cli_port_flows",extra_params:{mode:"local",protocol:"udp"},columns:[{id:"active_server_udp_ports",label:t("ports_page.active_server_udp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]},{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"srv_port_flows",extra_params:{mode:"remote",protocol:"tcp"},columns:[{id:"client_contacted_server_tcp_ports",label:t("ports_page.client_contacted_server_tcp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]},{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"srv_port_flows",extra_params:{mode:"remote",protocol:"udp"},columns:[{id:"client_contacted_server_udp_ports",label:t("ports_page.client_contacted_server_udp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]}];return(e,t)=>(Ps(),Ms("div",hC,[Vs("div",gC,[Vs("div",bC,[yC,Vs("div",wC,[Vs("div",xC,[Vs("div",kC,[(Ps(),Ms(Ss,null,En(l,(e=>Vs("div",$C,[Hs(Iw,{id:e.id,columns:e.columns,rows:e.stats_rows,print_html_column:e=>function(e){return e.label}(e),print_html_row:(e,t)=>function(e,t){return t.label}(0,t)},null,8,["id","columns","rows","print_html_column","print_html_row"])]))),64))])])])])])]))},__file:"http_src/vue/page-host-details-ports.vue"};const NC={class:"row"},CC={class:"col-12"},AC={class:"card"},EC={class:"card-body"},TC={class:"align-items-center justify-content-end mb-3",style:{height:"70vh"}},PC={class:"d-flex ms-auto flex-row-reverse"},UC=Vs("label",{class:"my-auto me-1"},null,-1),IC=[Vs("span",null,[Vs("i",{class:"fas fa-sync"})],-1)],OC={key:0,class:"m-1"},jC={style:{"min-width":"14rem"}},MC={class:"my-auto me-1"};var LC={__name:"page-alert-analysis",props:{ifid:String,page_csrf:String,charts_options:Array,available_filters:Object},setup(e){const t=e,l=e=>i18n(e),n=va(!1),s=ntopChartApex.typeChart.BUBBLE,o=`${http_prefix}/lua/pro/rest/v2/charts/alert/analysis.lua`,i="alerts-map",r={},c=va(null),u=function(){let e="";const t={bubble_mode:x.get_url_entry("bubble_mode"),timeframe:x.get_url_entry("timeframe"),vlan:x.get_url_entry("vlan"),ifid:x.get_url_entry("ifid")};for(const[a,l]of Object.entries(t))e=`${e}&${a}=${l}`;return e},d=function(){n.value=!0,c.value.update_chart(`${o}?${u()}`),n.value=!1},_=function(){return async e=>{let l=function(e){let l={};if(t.charts_options.forEach((t=>{t.mode_id==e&&(l=t)})),l&&l.chart&&l.chart.ntop_events){l.chart.events=l.chart.events||{};for(const[e,t]of Object.entries(l.chart.ntop_events))null!=t&&(l.chart.events[e]=a[t]||a.fnone)}return l&&l.xaxis&&l.xaxis.labels&&l.xaxis.labels.ntop_utils_formatter&&(l.xaxis.labels.formatter=a[l.xaxis.labels.ntop_utils_formatter]||a.fnone),l&&l.yaxis&&l.yaxis.labels&&l.yaxis.labels.ntop_utils_formatter&&(l.yaxis.labels.formatter=a[l.yaxis.labels.ntop_utils_formatter]||a.fnone),l&&l.tooltip&&l.tooltip.ntop_utils_formatter&&(l.tooltip.custom=a[l.tooltip.ntop_utils_formatter]),l}(Number(r.bubble_mode.id));const n=await ntopng_utility.http_request(e);return l.series=n.series||{},l}},p=function(e){n.value=!0,x.set_key_to_url(e.filter_name,e.id),c.value.update_chart(`${o}?${u()}`),n.value=!1};return dn((()=>{const e=x.get_url_entry("timeframe"),a=x.get_url_entry("vlan");x.get_url_entry("bubble_mode")||x.set_key_to_url("bubble_mode",0),e||x.set_key_to_url("timeframe",300),a||x.set_key_to_url("vlan",""),x.set_key_to_url("ifid",t.ifid);for(const[e,a]of Object.entries(t.available_filters))a.forEach((t=>{t.filter_name=e,t.currently_active&&(r[e]=t)}))})),_n((()=>{n.value=!1})),(t,a)=>(Ps(),Ms("div",NC,[Vs("div",CC,[Vs("div",AC,[Vs("div",EC,[Vs("div",TC,[Vs("div",PC,[Vs("div",null,[UC,Vs("div",null,[Vs("button",{class:"btn btn-link m-1",tabindex:"0",type:"button",onClick:d},IC)])]),(Ps(!0),Ms(Ss,null,En(e.available_filters,((e,t,a)=>(Ps(),Ms(Ss,null,[e.length>0?(Ps(),Ms("div",OC,[Vs("div",jC,[Vs("label",MC,te(l("bubble_map."+t))+": ",1),Hs(n_,{selected_option:r[t],"onUpdate:selected_option":e=>r[t]=e,options:e,onSelect_option:p},null,8,["selected_option","onUpdate:selected_option","options"])])])):Ys("v-if",!0)],64)))),256))]),n.value?(Ps(),Ls(wf,{key:0})):Ys("v-if",!0),Vs("div",{id:i,style:{height:"90%"},class:K([n.value?"ntopng-gray-out":""])},[Hs(A_,{ref_key:"bubble_chart",ref:c,id:i,chart_type:ya(s),base_url_request:o,get_params_url_request:u,get_custom_chart_options:_(),register_on_status_change:!1},null,8,["chart_type","get_custom_chart_options"])],2)])])])])]))},__file:"http_src/vue/page-alert-analysis.vue"};const FC={class:"row"},RC={class:"col-12"},DC={class:"card"},zC={class:"card-body"},qC={class:"align-items-center justify-content-end mb-3",style:{height:"70vh"}},BC={class:"d-flex ms-auto flex-row-reverse"},VC=Vs("label",{class:"my-auto me-1"},null,-1),HC={class:"m-1"},GC={key:0,style:{"min-width":"18rem"}},WC={class:"my-auto me-1"};var KC={__name:"page-host-map",props:{ifid:String,page_csrf:String,charts_options:Array,available_filters:Object},setup(e){const t=e,l=e=>i18n(e),n=ntopChartApex.typeChart.BUBBLE,s=`${http_prefix}/lua/rest/v2/charts/host/map.lua`,o="alerts-map",i={},r=va(null),c=function(){let e="";const t={bubble_mode:x.get_url_entry("bubble_mode"),ifid:x.get_url_entry("ifid")};for(const[a,l]of Object.entries(t))e=`${e}&${a}=${l}`;return e},u=function(){return async e=>{let l=function(e){let l={};if(t.charts_options.forEach((t=>{t.mode_id==e&&(l=t)})),l&&l.chart&&l.chart.ntop_events){l.chart.events=l.chart.events||{};for(const[e,t]of Object.entries(l.chart.ntop_events))null!=t&&(l.chart.events[e]=a[t]||a.fnone)}return l&&l.xaxis&&l.xaxis.labels&&l.xaxis.labels.ntop_utils_formatter&&(l.xaxis.labels.formatter=a[l.xaxis.labels.ntop_utils_formatter]||a.fnone),l&&l.yaxis&&l.yaxis.labels&&l.yaxis.labels.ntop_utils_formatter&&(l.yaxis.labels.formatter=a[l.yaxis.labels.ntop_utils_formatter]||a.fnone),l&&l.tooltip&&l.tooltip.ntop_utils_formatter&&(l.tooltip.custom=a[l.tooltip.ntop_utils_formatter]),l}(Number(i.bubble_mode.id));const n=await ntopng_utility.http_request(e);return l.series=n.series||{},l}},d=function(e){x.set_key_to_url(e.filter_name,e.id),r.value.update_chart(`${s}?${c()}`)};return dn((()=>{x.get_url_entry("bubble_mode")||x.set_key_to_url("bubble_mode",0),x.set_key_to_url("ifid",t.ifid);for(const[e,a]of Object.entries(t.available_filters))a.forEach((t=>{t.filter_name=e,t.currently_active&&(i[e]=t)}))})),(t,a)=>(Ps(),Ms("div",FC,[Vs("div",RC,[Vs("div",DC,[Vs("div",zC,[Vs("div",qC,[Vs("div",BC,[VC,(Ps(!0),Ms(Ss,null,En(e.available_filters,((e,t,a)=>(Ps(),Ms("div",HC,[e.length>0?(Ps(),Ms("div",GC,[Vs("label",WC,te(l("bubble_map."+t))+": ",1),Hs(n_,{selected_option:i[t],"onUpdate:selected_option":e=>i[t]=e,options:e,onSelect_option:d},null,8,["selected_option","onUpdate:selected_option","options"])])):Ys("v-if",!0)])))),256))]),Vs("div",{id:o,style:{height:"90%"}},[Hs(A_,{ref_key:"bubble_chart",ref:r,id:o,chart_type:ya(n),base_url_request:s,get_params_url_request:c,get_custom_chart_options:u(),register_on_status_change:!1},null,8,["chart_type","get_custom_chart_options"])])])])])])]))},__file:"http_src/vue/page-host-map.vue"};const JC={class:"row"},YC={class:"col-md-12 col-lg-12"},ZC={class:"card card-shadow"},XC={class:"card-body"},QC={class:"d-flex align-items-center flex-row-reverse mb-2"},eA=Vs("label",{class:"my-auto me-1"},null,-1),tA=[Vs("span",null,[Vs("i",{class:"fas fa-sync"})],-1)],aA={key:0,class:"m-1"},lA={style:{"min-width":"14rem"}},nA={class:"my-auto me-1"},sA=["title"],oA=[Vs("button",{type:"button",class:"btn btn-link",disabled:""},[Vs("i",{class:"text-danger fa-solid fa-triangle-exclamation"})],-1)];var iA={__name:"page-vlan-ports-sankey",props:{ifid:Number,available_filters:Object},setup(e){const t=e,a={},l=e=>i18n(e),n=va(!1),s=l("ports_analysis.max_entries"),o=l("ports_analysis.no_data"),i=va(null),r=va(null),c=va(null),u=va(null),d=va({}),_=`${http_prefix}/lua/pro/rest/v2/get/vlan/live_ports.lua`,p=`${http_prefix}/lua/pro/rest/v2/get/vlan/historical_ports.lua`,f=va(!1);function v(e){1!=e.is_link_node&&e.link&&x.go_to_url(e.link)}dn((()=>{const e=x.get_url_entry("timeframe"),l=x.get_url_entry("vlan");x.get_url_entry("l4proto"),e||x.set_key_to_url("timeframe","none"),l||x.set_key_to_url("vlan","none"),l||x.set_key_to_url("l4proto","none"),x.set_key_to_url("ifid",t.ifid);for(const[e,l]of Object.entries(t.available_filters))l.forEach((t=>{t.filter_name=e,t.currently_active&&(a[e]=t)}))})),_n((()=>{y(),w(),g()}));const m=function(){g()},h=function(e){x.set_key_to_url(e.filter_name,e.id),g()},g=function(){!async function(){f.value=!0;let e=await async function(){const e=function(){let e=x.get_url_entry("vlan"),t=x.get_url_entry("timeframe"),a=x.get_url_entry("l4proto");"none"==e&&(e="");"none"==t&&(t="");"none"==a&&(a="");let l="",n={ifid:x.get_url_entry("ifid"),vlan:e,timeframe:t,l4proto:a},s=x.obj_to_url_params(n);l=""==t?`${_}?${s}`:`${p}?${s}`;return l}();let t=await b.http_request(e);(function(e){n.value=e.max_entries_reached})(t),t=function(e){let t=e=>console.error(`link (source: ${e.source_node_id}, target: ${e.target_node_id}) removed for not existing source/target node`),a=function(e,t){let a={};e.nodes.forEach((e=>a[e.node_id]=!0));let l=e=>null!=a[e.source_node_id]&&null!=a[e.target_node_id],n=function(e,t,a){return e.filter((e=>{const l=t(e);return 0==l&&null!=a&&a(e),l}))}(e.links,l,t);return n}(e,t);return{nodes:e.nodes,links:a}}(t);const a=function(e){let t={},a={};e.nodes.forEach((e=>t[e.node_id]=e));let l=e=>`${e.source_node_id}_${e.label}`;e.links.forEach((e=>{let n=l(e),s=a[n];null==s&&(s={id:n,label:e.label,link:e.optional_info.link,node_links:[]},a[n]=s),s.node_links.push({source:t[e.source_node_id],target:t[e.target_node_id],value:e.value})}));let n=e.nodes.map((e=>e)),s=[];for(let e in a){let t=a[e],l={node_id:t.id,label:t.label,link:t.link};n.push(l),t.node_links.forEach((e=>{s.push({source_node_id:e.source.node_id,target_node_id:l.node_id,label:`${e.source.label} - ${e.target.label}: ${l.label}`,value:e.value}),s.push({source_node_id:l.node_id,target_node_id:e.target.node_id,label:`${e.source.label} - ${e.target.label}: ${l.label}`,value:e.value})}))}let o=n.map(((e,t)=>({index:t,label:e.label,data:e}))),i={};o.forEach(((e,t)=>i[e.data.node_id]=e));let r=s.map((e=>({source:i[e.source_node_id].index,target:i[e.target_node_id].index,value:e.value,label:e.label})));return{nodes:o,links:r}}(t);return a.links.length>0&&a.nodes.length>0?i.value.set_no_data_flag(!1):i.value.set_no_data_flag(!0),a}();d.value=e,f.value=!1}()};function y(){u.value=$(r.value).height()-100}function w(){c.value=$(r.value).width()-10}return(t,_)=>(Ps(),Ms("div",JC,[Vs("div",YC,[Vs("div",ZC,[f.value?(Ps(),Ls(wf,{key:0})):Ys("v-if",!0),Vs("div",XC,[Vs("div",{class:K(["align-items-center justify-content-end mb-2",[f.value?"ntopng-gray-out":""]]),style:{height:"70vh"},ref_key:"body_div",ref:r},[Vs("div",QC,[Vs("div",null,[eA,Vs("div",null,[Vs("button",{class:"btn btn-link m-1",tabindex:"0",type:"button",onClick:m},tA)])]),(Ps(!0),Ms(Ss,null,En(e.available_filters,((e,t,n)=>(Ps(),Ms(Ss,null,[e.length>0?(Ps(),Ms("div",aA,[Vs("div",lA,[Vs("label",nA,te(l("ports_analysis."+t))+": ",1),Hs(n_,{selected_option:a[t],"onUpdate:selected_option":e=>a[t]=e,options:e,onSelect_option:h},null,8,["selected_option","onUpdate:selected_option","options"])])])):Ys("v-if",!0)],64)))),256)),1==n.value?(Ps(),Ms("div",{key:0,class:"mt-auto m-1",title:ya(s),style:{cursor:"help"}},oA,8,sA)):Ys("v-if",!0)]),Hs(FS,{ref_key:"sankey_chart",ref:i,width:c.value,height:u.value,no_data_message:ya(o),sankey_data:d.value,onUpdate_width:w,onUpdate_height:y,onNode_click:v},null,8,["width","height","no_data_message","sankey_data"])],2)])])])]))},__file:"http_src/vue/page-vlan-ports-sankey.vue"};const rA={class:"row"},cA={class:"col-md-12 col-lg-12"},uA={class:"card card-shadow"},dA={class:"card-body"},_A={class:"d-flex align-items-center mb-2"},pA={class:"d-flex no-wrap",style:{"text-align":"left","margin-right":"1rem","min-width":"25rem"}},fA={class:"my-auto me-1"},vA=["title"],mA=["onClick","title"];var hA={__name:"page-aggregated-live-flows",props:{context:Object},setup(e){const t=e,l=va(t.context.csrf),n=e=>i18n(e),s=[{label:n("application_proto"),value:1,param:"application_protocol",table_id:"aggregated_app_proto",enterprise_m:!1,search_enabled:!0},{label:n("client"),value:2,param:"client",table_id:"aggregated_client",enterprise_m:!1,search_enabled:!1},{label:n("client_server"),value:4,param:"client_server",table_id:"aggregated_client_server",enterprise_m:!0,search_enabled:!1},{label:n("client_server_application_proto"),value:5,param:"app_client_server",table_id:"aggregated_app_client_server",enterprise_m:!0,search_enabled:!0},{label:n("client_server_srv_port"),value:7,param:"client_server_srv_port",table_id:"aggregated_client_server_srv_port",enterprise_m:!1,search_enabled:!1},{label:n("client_server_srv_port_app_proto"),value:8,param:"client_server_srv_port_app_proto",table_id:"aggregated_client_server_srv_port_app_proto",enterprise_m:!1,search_enabled:!1},{label:n("info"),value:6,param:"info",table_id:"aggregated_info",enterprise_m:!0,search_enabled:!0},{label:n("server"),value:3,param:"server",table_id:"aggregated_server",enterprise_m:!1,search_enabled:!1}];va(null);const o=va(),i=va([]),r=va([]),c=va("aggregated_live_flows"),u=xo((()=>{if(null==d.value?.value)return c.value;return`${c.value}_${d.value.value}`})),d=va(s[0]),_=function(){if(t.context.is_ntop_enterprise_m)return va(s);{let e=[];return s.forEach((t=>{t.enterprise_m||e.push(t)})),va(e)}}();async function p(){x.set_key_to_url("aggregation_criteria",d.value.param)}dn((async()=>{!function(){let e=x.get_url_entry("aggregation_criteria");if(null==e||""==e)return;d.value=s.find((t=>t.param==e))}()})),_n((async()=>{!async function(e){i.value=await h("overview"),v()}()}));const f=()=>({ifid:x.get_url_entry("ifid")||t.context.ifid,vlan_id:x.get_url_entry("vlan_id"),deviceIP:x.get_url_entry("deviceIP"),aggregation_criteria:x.get_url_entry("aggregation_criteria")||d.value.param,host:x.get_url_entry("host")||t.context.host});function v(){i.value.forEach(((e,t)=>{null==e.basic_label&&(e.basic_label=e.label);const a=x.get_url_entry(e.id);null!=a&&e.options.forEach((t=>{t.value.toString()===a&&(e.label=`${e.basic_label}: ${t.label||t.value}`)}))}))}const m=(e,t)=>a=>{!async function(e,t){if(e.show_spinner=!0,await Ja(),0==e.data_loaded){let a=await h(e.id);e.options=a.find((t=>t.id==e.id)).options,await Ja(),r.value[t].load_menu()}e.show_spinner=!1}(e,t)};async function h(e,a){let l={ifid:x.get_url_entry("ifid")||t.context.ifid},n=x.obj_to_url_params(l),s=x.get_url_params();const o=`${http_prefix}/lua/rest/v2/get/flow/aggregated_live_flows_filters.lua?action=${e}&${s}&${n}`;return(await b.http_request(o)).map((t=>({id:t.action||t.name,label:t.label,title:t.tooltip,data_loaded:"overview"!=e,options:t.value,hidden:1==t.value.length})))}const g=e=>(e.enable_search=1==d.value.search_enabled,e),y=async e=>((e=[]).push({sortable:!1,title_i18n:"flows_page.live_flows",name:"flows_icon",data_field:"live_flows",class:["text-center"],responsivePriority:1,render_func:(e,t)=>$(e,t)}),1==d.value.value?e.push({title_i18n:"application_proto",sortable:!0,name:"application",data_field:"application",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>S(e,t)}):2==d.value.value?e.push({title_i18n:"client",sortable:!0,name:"client",data_field:"client",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>w(e)}):3==d.value.value?e.push({title_i18n:"last_server",sortable:!0,name:"server",data_field:"server",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>k(e,t)}):7==d.value.value?e.push({title_i18n:"client",sortable:!0,name:"client",data_field:"client",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>w(e)},{title_i18n:"last_server",sortable:!0,name:"server",data_field:"server",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>k(e,t)}):8==d.value.value?e.push({title_i18n:"client",sortable:!0,name:"client",data_field:"client",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>w(e)},{title_i18n:"last_server",sortable:!0,name:"server",data_field:"server",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>k(e,t)},{title_i18n:"application_proto",sortable:!0,name:"application",data_field:"application",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>S(e,t)}):t.context.is_ntop_enterprise_m&&(4==d.value.value||7==d.value.value?e.push({title_i18n:"client",sortable:!0,name:"client",data_field:"client",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>w(e)},{title_i18n:"last_server",sortable:!0,name:"server",data_field:"server",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>k(e,t)}):5==d.value.value?e.push({title_i18n:"client",sortable:!0,name:"client",data_field:"client",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>w(e)},{title_i18n:"last_server",sortable:!0,name:"server",data_field:"server",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>k(e,t)},{title_i18n:"application_proto",sortable:!0,name:"application",data_field:"application",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>S(e,t)}):6==d.value.value&&e.push({title_i18n:"info",sortable:!0,name:"info",data_field:"info",class:["text-nowrap"],responsivePriority:1,render_func:e=>`${e.label}`})),t.context.vlans.length>2&&e.push({title_i18n:"vlan",sortable:!0,name:"vlan_id",data_field:"vlan_id",class:["text-nowrap ","text-center"],responsivePriority:1,render_func:e=>{if(0===e.id||null==e.id){const e=i18n("no_vlan");return`<a href="${http_prefix}/lua/flows_stats.lua?vlan=0">${e}</a>`}return`<a href="${http_prefix}/lua/flows_stats.lua?vlan=${e.id}">${e.label}</a>`}}),e.push({title_i18n:"flows",sortable:!0,name:"flows",data_field:"flows",class:["text-nowrap ","text-center"],responsivePriority:1},{title_i18n:"total_score",sortable:!0,name:"score",data_field:"tot_score",class:["text-center"],responsivePriority:1}),2!=d.value.value&&4!=d.value.value&&7!=d.value.value&&e.push({title_i18n:"clients",sortable:!0,name:"num_clients",data_field:"num_clients",class:["text-nowrap ","text-center"],responsivePriority:1}),3!=d.value.value&&4!=d.value.value&&7!=d.value.value&&e.push({title_i18n:"servers",sortable:!0,name:"num_servers",data_field:"num_servers",class:["text-nowrap ","text-center"],responsivePriority:1}),e.push({title_i18n:"breakdown",sortable:!1,name:"breakdown",data_field:"breakdown",class:["text-nowrap","text-center"],responsivePriority:1,render_func:e=>a.createBreakdown(e.percentage_bytes_sent,e.percentage_bytes_rcvd,i18n("sent"),i18n("rcvd"))},{title_i18n:"traffic_sent",sortable:!0,name:"bytes_sent",data_field:"bytes_sent",class:["text-nowrap","text-end"],responsivePriority:1,render_func:e=>a.bytesToSize(e)},{title_i18n:"traffic_rcvd",sortable:!0,name:"bytes_rcvd",data_field:"bytes_rcvd",class:["text-nowrap","text-end"],responsivePriority:1,render_func:e=>a.bytesToSize(e)},{title_i18n:"total_traffic",sortable:!0,name:"tot_traffic",data_field:"tot_traffic",class:["text-nowrap","text-end"],responsivePriority:1,render_func:e=>a.bytesToSize(e)}),e),w=function(e,t){let a="";return e.is_alerted&&(a="<i class='fas fa-exclamation-triangle' style='color: #B94A48;'></i>"),e.in_memory?`<a href="${http_prefix}/lua/flows_stats.lua?client=${e.ip}&vlan=${e.vlan_id}">${e.label}</a> ${a} ${e.extra_labels} <a href="${http_prefix}/lua/host_details.lua?host=${e.ip}&vlan=${e.vlan_id}" data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`:`${e.label} ${a} ${e.extra_labels}`},k=function(e,t){let a="";return e.is_alerted&&(a="<i class='fas fa-exclamation-triangle' style='color: #B94A48;'></i>"),e.in_memory?7!=d.value.value&&8!=d.value.value||null==t.srv_port?`<a href="${http_prefix}/lua/flows_stats.lua?server=${e.ip}&vlan=${e.vlan_id}">${e.label}</a> ${a} ${e.extra_labels} <a href="${http_prefix}/lua/host_details.lua?host=${e.ip}&vlan=${e.vlan_id}" data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`:`<a href="${http_prefix}/lua/flows_stats.lua?server=${e.ip}&vlan=${e.vlan_id}">${e.label}</a> ${a} ${e.extra_labels} <a href="${http_prefix}/lua/host_details.lua?host=${e.ip}&vlan=${e.vlan_id}" data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>:<a href="${http_prefix}/lua/flows_stats.lua?port=${t.srv_port.id}&vlan=${e.vlan_id}">${t.srv_port.label}</a>`:7!=d.value.value&&8!=d.value.value||null==t.srv_port?`${e.label} ${a} ${e.extra_labels}`:`${e.label} ${a} ${e.extra_labels}:${t.srv_port.label}`},$=function(e,a){let l="",n=!1;return null!=t.context.host&&""!=t.context.host&&(n=!0),1==d.value.value?(l=`${http_prefix}/lua/flows_stats.lua?application=${a.application.id}`,n&&(l=l+"&host="+t.context.host)):2==d.value.value?l=`${http_prefix}/lua/flows_stats.lua?client=${a.client.ip}&vlan=${a.client.vlan_id}`:3==d.value.value?l=`${http_prefix}/lua/flows_stats.lua?server=${a.server.ip}&vlan=${a.server.vlan_id}`:4==d.value.value?l=`${http_prefix}/lua/flows_stats.lua?client=${a.client.ip}&server=${a.server.ip}&vlan=${a.vlan_id.id}`:5==d.value.value?l=`${http_prefix}/lua/flows_stats.lua?application=${a.application.id}&client=${a.client.ip}&server=${a.server.ip}&vlan=${a.vlan_id.id}`:6==d.value.value?(l=`${http_prefix}/lua/flows_stats.lua?flow_info=${a.info.id}`,n&&(l=l+"&host="+t.context.host)):7==d.value.value?l=`${http_prefix}/lua/flows_stats.lua?client=${a.client.ip}&server=${a.server.ip}&vlan=${a.vlan_id.id}&srv_port=${a.srv_port.id}`:8==d.value.value&&(l=`${http_prefix}/lua/flows_stats.lua?application=${a.application.id}&client=${a.client.ip}&server=${a.server.ip}&vlan=${a.vlan_id.id}&srv_port=${a.srv_port.id}`),`<a href=${l} class="btn btn-sm btn-info" ><i class= 'fas fa-stream'></i></a>`},S=function(e,t){return 0==t.confidence?`${e.label_with_icons} <span class="badge bg-warning" title=" `+t.confidence_name+'">'+t.confidence_name+" </span>":t.confidence?`${e.label_with_icons} <span class="badge bg-success" title="`+t.confidence_name+' "> '+t.confidence_name+"</span>":void 0};return(e,t)=>(Ps(),Ms("div",rA,[Vs("div",cA,[Vs("div",uA,[Vs("div",dA,[Vs("div",_A,[Vs("div",pA,[Vs("label",fA,te(n("criteria_filter"))+": ",1),Hs(n_,{selected_option:d.value,"onUpdate:selected_option":t[0]||(t[0]=e=>d.value=e),options:ya(_),onSelect_option:p},null,8,["selected_option","options"])])]),Vs("div",null,[Hs(rv,{ref_key:"table_aggregated_live_flows",ref:o,csrf:l.value,table_id:ya(u),table_config_id:c.value,f_map_columns:y,get_extra_params_obj:f,f_map_config:g},{custom_header:ml((()=>[(Ps(!0),Ms(Ss,null,En(i.value,((e,t)=>(Ps(),Ls(Dd,{f_on_open:m(e,t),ref_for:!0,ref:e=>{r.value[t]=e},hidden:e.hidden},{title:ml((()=>[Hs(cv,{show:e.show_spinner,size:"1rem",class:"me-1"},null,8,["show"]),Vs("a",{class:"ntopng-truncate",title:e.title},te(e.label),9,vA)])),menu:ml((()=>[(Ps(!0),Ms(Ss,null,En(e.options,(e=>(Ps(),Ms("a",{style:{cursor:"pointer",display:"block"},onClick:t=>function(e,t){t.stopPropagation(),x.set_key_to_url(e.key,`${e.value}`),v(),o.value.refresh_table()}(e,t),class:"ntopng-truncate tag-filter",title:e.value},[null==e.count?(Ps(),Ms(Ss,{key:0},[Ks(te(e.label),1)],64)):(Ps(),Ms(Ss,{key:1},[Ks(te(e.label+" ("+e.count+")"),1)],64))],8,mA)))),256))])),_:2},1032,["f_on_open","hidden"])))),256))])),_:1},8,["csrf","table_id","table_config_id"])])])])])]))},__file:"http_src/vue/page-aggregated-live-flows.vue"};const gA={id:"aggregated_live_flows"};var bA={__name:"page-test-table",props:{url:String,ifid:Number,columns_config:Array},setup(e){const t=e,a=va({}),l=va(null);return dn((()=>{!function(){const e=[];let n={ifid:ntopng_url_manager.get_url_entry("ifid")||t.ifid},s=ntopng_url_manager.obj_to_url_params(n);e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,a,n){l.value.reload()}});let o={table_buttons:e,data_url:`${t.url}?${s}`,enable_search:!0};o.columns_config=t.columns_config,a.value=o}()})),(e,t)=>(Ps(),Ms("div",gA,[Hs($w,{ref_key:"table_test",ref:l,table_buttons:a.value.table_buttons,columns_config:a.value.columns_config,data_url:a.value.data_url,filter_buttons:a.value.table_filters,enable_search:a.value.enable_search,table_config:a.value.table_config},null,8,["table_buttons","columns_config","data_url","filter_buttons","enable_search","table_config"])]))},__file:"http_src/vue/page-test-table.vue"};const yA={class:"container-fluid"},wA={class:"row form-group mb-3"},xA={class:"col col-md-12"},kA={class:"form-label"},$A={class:"row form-group mb-3"},SA={class:"col col-md-6"},NA={class:"form-label"},CA={class:"col col-md-6"},AA={class:"form-label"},EA={key:0},TA={key:1},PA=["pattern"],UA={class:"row form-group mb-3"},IA={class:"col col-md-6"},OA={class:"form-label"},jA={class:"col col-md-6"},MA={class:"form-label"},LA={key:0},FA={key:1},RA=["pattern"],DA={class:"row form-group mb-3"},zA={class:"col col-md-12"},qA={class:"form-label"},BA={class:"row form-group mb-3"},VA={class:"col col-md-12"},HA={class:"form-label"},GA=["disabled"];var WA={__name:"modal-nedge-add-rule-config",props:{},emits:["edit","add"],setup(e,{expose:t,emit:a}){const l=e=>i18n(e),n=va(null),s=va(""),o=[{label:l("nedge.page_rules_config.modal_rule_config.ip"),value:"ip",default:!0},{label:l("nedge.page_rules_config.modal_rule_config.cidr"),value:"cidr"},{label:l("interface"),value:"interface"}];let i="source_to_dest";const r=[{label:l("nedge.page_rules_config.bidirectional"),value:"bidirectional",bidirectional:!0},{label:l("nedge.page_rules_config.source_to_dest"),value:"source_to_dest",bidirectional:!1}],c=va({});let u="accept";const d=[{label:l("nedge.page_rules_config.accept"),value:"accept"},{label:l("nedge.page_rules_config.deny"),value:"deny"}],_=va({}),p=va(0),f=va(0),v=va({}),m=va(""),h=va(""),g=va({}),y=va(""),w=va(""),x=`${http_prefix}/lua/rest/v2/get/nedge/interfaces.lua`;let k;const $=va([]),S=va({}),N=va({}),C=va(""),A=xo((()=>I(v.value,h.value,m.value))),E=xo((()=>I(g.value,w.value,y.value))),T=va(!0);async function P(e){let t=null;null!=e&&(t=e.source.value),"interface"==v.value.value?(await j(),S.value=null!=t?$.value.find((e=>e.value==t)):$.value[0]):(h.value=null!=e?e.source.value:"",M(m,v.value.value))}async function U(e){let t=null;null!=e&&(t=e.destination.value),"interface"==g.value.value?(await j(),N.value=null!=t?$.value.find((e=>e.value==t)):$.value[0]):(w.value=null!=e?e.destination.value:"",M(y,g.value.value))}function I(e,t,a){if("interface"==e.value)return!0;return new RegExp(a).test(t)}let O=!1;async function j(){if(1==O)return;null==k&&(k=b.http_request(x));let e=await k;$.value=e.filter((e=>"lan"==e.role)).map((e=>({label:e.label,value:e.ifname}))),O=!0}function M(e,t){e.value=wp.get_data_pattern(t)}const L=()=>{let e=v.value.value,t=h.value;"interface"==e&&(t=S.value.value);let l=g.value.value,n=w.value;"interface"==l&&(n=N.value.value);let s={src_type:e,src_value:t,dst_type:l,dst_value:n,policy:_.value.value,bidirectional:"bidirectional"==c.value.value},o="add";0==T.value&&(s.rule_id=p.value,s.new_rule_id=f.value,o="edit"),a(o,s),F()},F=()=>{n.value.close()};return t({show:(e,t)=>{!function(e,t){T.value=null==e,null!=t&&(u=t.value);if(0==T.value)s.value=l("nedge.page_rules_config.modal_rule_config.title_edit"),C.value=l("edit"),v.value=o.find((t=>t.value==e.source.type)),g.value=o.find((t=>t.value==e.destination.type)),c.value=r.find((t=>t.bidirectional==e.bidirectional)),_.value=d.find((t=>t.value==e.action)),p.value=e.rule_id,f.value=e.rule_id;else{s.value=l("nedge.page_rules_config.modal_rule_config.title_add"),C.value=l("add");let e=o.find((e=>1==e.default));v.value=e,g.value=e,c.value=r.find((e=>e.value==i)),_.value=d.find((e=>e.value!=u))}P(e),U(e)}(e,t),n.value.show()},close:F}),_n((()=>{})),(e,t)=>(Ps(),Ls(sp,{onShowed:t[12]||(t[12]=e=>{}),ref_key:"modal_id",ref:n},{title:ml((()=>[Ks(te(s.value),1)])),body:ml((()=>[Vs("div",yA,[Ys(" Rule ID "),wn(Vs("div",wA,[Vs("div",xA,[Vs("label",kA,te(l("nedge.page_rules_config.rule_id")),1),wn(Vs("input",{type:"text",class:"form-control","onUpdate:modelValue":t[0]||(t[0]=e=>f.value=e)},null,512),[[ji,f.value]]),wn(Vs("input",{type:"hidden",class:"form-control","onUpdate:modelValue":t[1]||(t[1]=e=>p.value=e)},null,512),[[ji,p.value]])])],512),[[Yi,!T.value]]),Ys(" Source "),Vs("div",$A,[Vs("div",SA,[Vs("label",NA,te(l("nedge.page_rules_config.modal_rule_config.source_type")),1),Hs(n_,{selected_option:v.value,"onUpdate:selected_option":t[2]||(t[2]=e=>v.value=e),onSelect_option:t[3]||(t[3]=e=>P()),options:o},null,8,["selected_option"])]),Vs("div",CA,[Vs("label",AA,te(l("nedge.page_rules_config.source")),1),"interface"==v.value.value?(Ps(),Ms("div",EA,[Hs(n_,{selected_option:S.value,"onUpdate:selected_option":t[4]||(t[4]=e=>S.value=e),options:$.value},null,8,["selected_option","options"])])):(Ps(),Ms("div",TA,[wn(Vs("input",{type:"text",class:"form-control",pattern:m.value,"onUpdate:modelValue":t[5]||(t[5]=e=>h.value=e)},null,8,PA),[[ji,h.value]])]))])]),Ys(" Dest "),Vs("div",UA,[Vs("div",IA,[Vs("label",OA,te(l("nedge.page_rules_config.modal_rule_config.dest_type")),1),Hs(n_,{selected_option:g.value,"onUpdate:selected_option":t[6]||(t[6]=e=>g.value=e),onSelect_option:t[7]||(t[7]=e=>U()),options:o},null,8,["selected_option"])]),Vs("div",jA,[Vs("label",MA,te(l("nedge.page_rules_config.dest")),1),"interface"==g.value.value?(Ps(),Ms("div",LA,[Hs(n_,{selected_option:N.value,"onUpdate:selected_option":t[8]||(t[8]=e=>N.value=e),options:$.value},null,8,["selected_option","options"])])):(Ps(),Ms("div",FA,[wn(Vs("input",{type:"text",class:"form-control",pattern:y.value,"onUpdate:modelValue":t[9]||(t[9]=e=>w.value=e)},null,8,RA),[[ji,w.value]])]))])]),Ys(" Direction "),Vs("div",DA,[Vs("div",zA,[Vs("label",qA,te(l("nedge.page_rules_config.direction")),1),Hs(n_,{selected_option:c.value,"onUpdate:selected_option":t[10]||(t[10]=e=>c.value=e),options:r},null,8,["selected_option"])])]),Ys(" Action "),Vs("div",BA,[Vs("div",VA,[Vs("label",HA,te(l("nedge.page_rules_config.action")),1),Hs(n_,{selected_option:_.value,"onUpdate:selected_option":t[11]||(t[11]=e=>_.value=e),options:d},null,8,["selected_option"])])])])])),footer:ml((()=>[Vs("button",{type:"button",disabled:!ya(A)||!ya(E),onClick:L,class:"btn btn-primary"},te(C.value),9,GA)])),_:1},512))}};np("\ninput[data-v-50692d68]:invalid {\n  border-color: #ff0000;\n}\n"),WA.__scopeId="data-v-50692d68",WA.__file="http_src/vue/modal-nedge-add-rule-config.vue";const KA={class:"container-fluid"},JA={class:"row form-group mb-3"},YA={class:"col col-md-12"},ZA={class:"form-label"};var XA={__name:"modal-nedge-change-default-policy",emits:["apply"],setup(e,{expose:t,emit:a}){const l=va(null),n=e=>i18n(e),s=n("nedge.page_rules_config.modal_change_default_policy.title"),o=[{label:n("nedge.page_rules_config.accept"),value:"accept"},{label:n("nedge.page_rules_config.deny"),value:"deny"}],i=va({}),r=()=>{l.value.close()};function c(){a("apply",i.value.value),r()}return t({show:e=>{i.value=o.find((t=>t.value==e.value)),l.value.show()},close:r}),(e,t)=>(Ps(),Ls(sp,{onShowed:t[1]||(t[1]=e=>{}),ref_key:"modal_id",ref:l},{title:ml((()=>[Ks(te(ya(s)),1)])),body:ml((()=>[Vs("div",KA,[Ys(" Default Policy "),Vs("div",JA,[Vs("div",YA,[Vs("label",ZA,te(n("nedge.page_rules_config.default policy")),1),Hs(n_,{selected_option:i.value,"onUpdate:selected_option":t[0]||(t[0]=e=>i.value=e),options:o},null,8,["selected_option"])])])])])),footer:ml((()=>[Vs("button",{type:"button",onClick:c,class:"btn btn-primary"},te(n("apply")),1)])),_:1},512))},__file:"http_src/vue/modal-nedge-change-default-policy.vue"};const QA={class:"mb-2"},eE=Vs("br",null,null,-1),tE={class:"d-inline-block"},aE={key:0,style:{color:"green"}},lE={key:1,style:{color:"red"}},nE=[Vs("i",{class:"fas fa-cog"},null,-1)],sE={id:"aggregated_live_flows"};var oE={__name:"page-nedge-rules-config",props:{url:String,ifid:Number,csrf:String,columns_config:Array},setup(e){const t=e,a=e=>i18n(e),l=500,n=va({}),s=va(null),o=va(null),i=va(null),r=va({});function c(e){p(e,`${http_prefix}/lua/rest/v2/edit/nedge/policy/rule.lua`)}function u(e){p(e,`${http_prefix}/lua/rest/v2/add/nedge/policy/rule.lua`)}async function d(e){if(null==e){const t=`${http_prefix}/lua/rest/v2/get/nedge/policy/default.lua`;e=(await b.http_request(t)).default_policy}r.value="accept"==e?{value:e,label:a("nedge.page_rules_config.accept")}:{value:e,label:a("nedge.page_rules_config.deny")}}async function _(e){const a=`${http_prefix}/lua/rest/v2/set/nedge/policy/default.lua`;let l=JSON.stringify({default_policy:e,csrf:t.csrf});await b.http_request(a,{method:"post",headers:{"Content-Type":"application/json"},body:l}),d(e),m()}function p(e,a){let l=JSON.stringify({...e,csrf:t.csrf});b.http_request(a,{method:"post",headers:{"Content-Type":"application/json"},body:l}),m()}function f(){i.value.show(r.value)}dn((async()=>{!function(){const e=[];let l={ifid:x.get_url_entry("ifid")||t.ifid},s=x.obj_to_url_params(l);e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,a,l){m()}},{text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){o.value.show(null,r.value)}});let i={table_buttons:e,data_url:`${t.url}?${s}`,enable_search:!1},c=[{columnName:a("nedge.page_rules_config.rule_id"),targets:0,name:"rule_id",data:"rule_id",className:"text-nowrap text-center",responsivePriority:1},{columnName:a("nedge.page_rules_config.source"),targets:0,name:"source",data:"source",className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,a){return null!=e.label&&""!=e.label?e.label:e.value}},{columnName:a("nedge.page_rules_config.dest"),targets:0,name:"dest",data:"destination",className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,a){return null!=e.label&&""!=e.label?e.label:e.value}},{columnName:a("nedge.page_rules_config.direction"),targets:0,name:"bidirectional",data:"bidirectional",className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,l){return a(1==e?"nedge.page_rules_config.bidirectional":"nedge.page_rules_config.source_to_dest")}},{columnName:a("nedge.page_rules_config.action"),targets:0,name:"action",data:"action",className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,l){let n="red",s=a("nedge.page_rules_config.deny");return"accept"==e&&(n="green",s=a("nedge.page_rules_config.accept")),`<span style="color:${n};">${s}</span>`}}].map((e=>e));c.push({columnName:a("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return v(a)}}),i.columns_config=c,n.value=i}(),d()}));const v=function(e){let a={handlerId:"delete_host",onClick:()=>{!async function(e){const a=`${http_prefix}/lua/rest/v2/delete/nedge/policy/rule.lua`;let l={"Content-Type":"application/json"},n=JSON.stringify({rule_id:e.rule_id,csrf:t.csrf});b.http_request(a,{method:"post",headers:l,body:n}),m()}(e)}},l={handlerId:"edit_rule",onClick:()=>{o.value.show(e)}};return DataTableUtils.createActionButtons([{class:"btn-secondary",handler:l,handlerId:"edit_rule",icon:"fa-edit",title:i18n("edit")},{class:"btn-danger",handler:a,handlerId:"delete_rule",icon:"fa-trash",title:i18n("delete")}])};function m(){setTimeout((()=>{x.reload_url()}),l)}return(e,t)=>(Ps(),Ms(Ss,null,[Vs("div",QA,[Vs("h2",null,te(a("nedge.rules_config_title")),1),eE,Vs("h5",tE,[Ks(te(a("nedge.page_rules_config.default policy"))+" ",1),"accept"==r.value?.value?(Ps(),Ms("span",aE,te(r.value?.label),1)):Ys("v-if",!0),"deny"==r.value?.value?(Ps(),Ms("span",lE,te(r.value?.label),1)):Ys("v-if",!0),Vs("small",null,[Vs("a",{href:"javascript:void(0)",style:{"margin-left":"0.5rem"},onClick:f},nE)])])]),Vs("div",sE,[Hs($w,{ref_key:"table_rules",ref:s,table_buttons:n.value.table_buttons,columns_config:n.value.columns_config,data_url:n.value.data_url,filter_buttons:n.value.table_filters,enable_search:n.value.enable_search,table_config:n.value.table_config},null,8,["table_buttons","columns_config","data_url","filter_buttons","enable_search","table_config"])]),Hs(WA,{ref_key:"modal_add_rule_config",ref:o,onAdd:u,onEdit:c},null,512),Hs(XA,{ref_key:"modal_change_default_policy",ref:i,onApply:_},null,512)],64))},__file:"http_src/vue/page-nedge-rules-config.vue"};const iE={key:0,class:"form-group ms-2 me-2 mt-3 row"},rE={class:"col-form-label col-sm-4"},cE={class:"col-8"},uE={key:1,class:"form-group ms-2 me-2 mt-3 row"},dE={class:"col-form-label col-sm-4"},_E={class:"col-8"},pE={class:"form-group ms-2 me-2 mt-3 row"},fE={class:"col-form-label col-sm-4"},vE={class:"col-8"},mE=["placeholder"],hE=["disabled"],gE=["disabled"];var bE={__name:"modal-add-application",props:{page_csrf:String,ifid:String},emits:["add"],setup(e,{expose:t,emit:a}){const l=va(null),n=va(!1),s=e=>i18n(e),o=va(!0);let i=va(i18n("add_application"));const r=va(i18n("details.custom_rules_placeholder")),c=va({}),u=va([]),d=va(""),_=va(""),p=va(null);va({});const f=[s("custom_categories.each_host_separate_line"),s("custom_categories.allowed_rules"),s("custom_categories.ip_address"),s("custom_categories.ip_address_port"),s("custom_categories.port"),s("custom_categories.port_range"),s("custom_categories.host_domain")];const v=()=>{1==m()&&1==h()?o.value=!1:o.value=!0},m=()=>/^[A-Za-z0-9_-]*$/.test(_.value),h=()=>{let e=!0;return d.value.split("\n").forEach((t=>{e=e&&(/^((tcp|udp):(6553[0-5]|655[0-2][0-9]\d|65[0-4](\d){2}|6[0-4](\d){3}|[1-5](\d){4}|[1-9](\d){0,3}))$/.test(t)||/^((tcp|udp):(6553[0-5]|655[0-2][0-9]\d|65[0-4](\d){2}|6[0-4](\d){3}|[1-5](\d){4}|[1-9](\d){0,3})-(6553[0-5]|655[0-2][0-9]\d|65[0-4](\d){2}|6[0-4](\d){3}|[1-5](\d){4}|[1-9](\d){0,3}))$/.test(t)||/^(ip):(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(t)||/^(ip):(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?):(6553[0-5]|655[0-2][0-9]\d|65[0-4](\d){2}|6[0-4](\d){3}|[1-5](\d){4}|[1-9](\d){0,3})$/.test(t)||/^((host):[a-zA-Z0-9]+)$/.test(t)||/(host):[a-zA-Z0-9].[a-zA-Z]/g.test(t)||""===t)})),e},g=()=>{a("add",{l7_proto_id:p.value,protocol_alias:_.value,category:c.value.id,custom_rules:d.value,is_edit_page:n.value}),b()},b=()=>{l.value.close()};return dn((()=>{})),t({show:e=>{_.value="",c.value=u.value[0],d.value="",n.value=!1,i.value=i18n("add_application"),null!=e&&(p.value=e.application_id,_.value=e.application,n.value=!0,i.value=`${i18n("edit_application")}: ${_.value}`,(e=>{let t=null;u.value.forEach((a=>{a.id==e.category_id&&(t=a)})),c.value=t,d.value=e.custom_rules?.replace(",","\n")})(e)),l.value.show(),v()},close:b,loadCategoryList:e=>{u.value=(e=>{let t=[];return e.forEach((e=>{t.push({id:e.cat_id,label:e.name,app_list:e.app_list})})),t=t.sort(((e,t)=>null==e||null==e.label?-1:null==t||null==t.label?1:e.label.toString().localeCompare(t.label.toString()))),t})(e)}}),(e,t)=>(Ps(),Ls(sp,{onShowed:t[4]||(t[4]=e=>{}),ref_key:"modal_id",ref:l},{title:ml((()=>[Ks(te(ya(i)),1)])),body:ml((()=>[wn(Vs("input",{class:"form-control",type:"text","onUpdate:modelValue":t[0]||(t[0]=e=>p.value=e),spellcheck:"false",hidden:""},null,512),[[ji,p.value]]),0==n.value?(Ps(),Ms("div",iE,[Vs("label",rE,[Vs("b",null,te(s("app_name")),1)]),Vs("div",cE,[wn(Vs("input",{class:"form-control",type:"text","onUpdate:modelValue":t[1]||(t[1]=e=>_.value=e),onInput:v,spellcheck:"false"},null,544),[[ji,_.value]])])])):(Ps(),Ms("div",uE,[Vs("label",dE,[Vs("b",null,te(s("category")),1)]),Vs("div",_E,[Hs(n_,{selected_option:c.value,"onUpdate:selected_option":t[2]||(t[2]=e=>c.value=e),options:u.value},null,8,["selected_option","options"])])])),Vs("div",pE,[Vs("label",fE,[Vs("b",null,te(s("category_custom_rule")),1)]),Vs("div",vE,[wn(Vs("textarea",{class:"form-control",onInput:v,placeholder:r.value,rows:"6","onUpdate:modelValue":t[3]||(t[3]=e=>d.value=e),spellcheck:"false"},null,40,mE),[[ji,d.value]])])])])),footer:ml((()=>[Hs(fv,{note_list:f}),0==n.value?(Ps(),Ms("button",{key:0,type:"button",onClick:g,class:"btn btn-primary",disabled:o.value},te(s("add")),9,hE)):(Ps(),Ms("button",{key:1,type:"button",onClick:g,class:"btn btn-primary",disabled:o.value},te(s("apply")),9,gE))])),_:1},512))},__file:"http_src/vue/modal-add-application.vue"},yE={__name:"modal-delete-application",emits:["remove"],setup(e,{expose:t,emit:a}){const l=va(null),n=e=>i18n(e),s=va(null);let o=va(i18n("custom_categories.delete_app"));const i=i18n("custom_categories.delete_app_confirm"),r=()=>{a("remove",{protocol_alias:s.value}),c()},c=()=>{l.value.close()};return t({show:e=>{null!=e&&(s.value=e.application,o.value=`${i18n("custom_categories.delete_app")}: ${s.value}`),l.value.show()},close:c}),(e,t)=>(Ps(),Ls(sp,{ref_key:"modal_id",ref:l},{title:ml((()=>[Ks(te(ya(o)),1)])),body:ml((()=>[Ks(te(ya(i)),1)])),footer:ml((()=>[Vs("button",{type:"button",onClick:r,class:"btn btn-primary"},te(n("delete")),1)])),default:ml((()=>[wn(Vs("input",{class:"form-control",type:"text","onUpdate:modelValue":t[0]||(t[0]=e=>s.value=e),spellcheck:"false",hidden:""},null,512),[[ji,s.value]])])),_:1},512))},__file:"http_src/vue/modal-delete-application.vue"};const wE=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1);var xE={__name:"page-edit-applications",props:{page_csrf:String,ifid:String,has_protos_file:Boolean},setup(e){const t=e,a=va(null),l=va(null),n=va(null),s=va({}),o=va([]),i=va(null),r=va(!0);let c="";const u=`${http_prefix}/lua/rest/v2/get/l7/category/consts.lua`,d=`${http_prefix}/lua/rest/v2/edit/application/application.lua`,_=`${http_prefix}/lua/rest/v2/delete/application/application.lua`,p=e=>i18n(e),f=async e=>{const a={csrf:t.page_csrf,ifid:t.ifid},l=NtopUtils.buildURL(_,{...a,...e});await $.get(l,(function(e,t){h(i18n("custom_categories.succesfully_removed"))})),g()},v=async e=>{const a=e.is_edit_page;e.is_edit_page=null;const l={csrf:t.page_csrf,ifid:t.ifid},n=NtopUtils.buildURL(d,{...l,...e});await $.get(n,(function(e,t){"success"==t&&h(a?i18n("custom_categories.succesfully_edited"):i18n("custom_categories.succesfully_added"))})),g()},m=e=>{n.value.show(e)},h=e=>{c=e,r.value=!1,setTimeout((()=>{r.value=!0,g()}),4e3)},g=()=>{a.value.reload()};dn((async()=>{!function(){const e=[];t.has_protos_file&&e.push({text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){m()}});e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(){g()}});let a={table_buttons:e,data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/ntopng/applications.lua`,{ifid:t.ifid}),enable_search:!0,table_config:{serverSide:!1,order:[[0,"asc"]]}},l=[{columnName:i18n("application"),name:"application",data:"application",className:"text-nowrap",responsivePriority:1},{columnName:i18n("category"),name:"category",data:"category",className:"text-nowrap",responsivePriority:1,render:function(e,t,a){return e}},{columnName:i18n("custom_categories.custom_hosts"),name:"custom_rules",data:"custom_rules",className:"text-nowrap",responsivePriority:2},{visible:!1,name:"application_hosts",data:"application_hosts"},{visible:!1,name:"application_id",data:"application_id"},{visible:!1,name:"category_id",data:"category_id"},{columnName:p("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return b(a)}}],n=ntopng_utility.clone(a);n.columns_config=l,s.value=n}()})),_n((async()=>{await(async()=>{await $.get(u,(function(e,t){o.value=e.rsp})),n.value.loadCategoryList(o.value)})();const e=ntopng_url_manager.get_url_entry("application");e&&(e=>{a.value.search_value(e)})(e)})),mn((async()=>{a.value.destroy_table()}));const b=function(e){const t=[{class:"pointer",handler:{handlerId:"edit_rule",onClick:()=>{m(e)}},icon:"fa-edit",title:i18n("edit")}];if(e.is_custom){let a={handlerId:"delete_rule",onClick:()=>{var t;t=e,l.value.show(t)}};t.push({class:"pointer",handler:a,icon:"fa-trash",title:i18n("delete")})}return DataTableUtils.createActionButtons(t)};return(t,u)=>(Ps(),Ms(Ss,null,[wE,wn(Vs("div",{ref_key:"update_message",ref:i,class:"alert alert-info"},te(ya(c)),513),[[Yi,!r.value]]),Hs(bE,{ref_key:"modal_add_application",ref:n,category_list:o.value,page_csrf:e.page_csrf,ifid:e.ifid,onAdd:v},null,8,["category_list","page_csrf","ifid"]),Hs(yE,{ref_key:"modal_delete_application",ref:l,onRemove:f},null,512),Hs($w,{ref_key:"applications_table",ref:a,table_buttons:s.value.table_buttons,columns_config:s.value.columns_config,data_url:s.value.data_url,enable_search:s.value.enable_search,table_config:s.value.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])],64))},__file:"http_src/vue/page-edit-applications.vue"};const kE={class:"row"},$E={class:"col-12"},SE={class:"card card-shadow"},NE={class:"card-body"},CE={key:0,class:"alert alert-danger",role:"alert",id:"error-alert"},AE={key:2,class:"alert alert-info alert-dismissable"},EE=Vs("span",{class:"spinner-border spinner-border-sm text-info"},null,-1),TE=["innerHTML"],PE=["innerHTML"];var UE={__name:"page-network-discovery",props:{ifid:String},setup(e){const t=e,a=va(!1),l=i18n("map_page.fetch_error"),n=va(!1),s=va(null),o=va({}),i=va(null),r=va(""),c=i18n("discover.network_discovery_not_enabled"),u=va(!1),d=i18n("discover.ghost_icon_descr"),_=i18n("discover.too_many_devices_descr"),p=va(!1);let f;const v=[i18n("discover.discovery_running"),i18n("discover.protocols_note")],m=`${http_prefix}/lua/get_discover_progress.lua`,h=`${http_prefix}/lua/rest/v2/get/network/discovery/discover.lua`,g=`${http_prefix}/lua/rest/v2/get/network/discovery/run_discovery.lua`,b=async function(){u.value=!1,await $.get(NtopUtils.buildURL(m,{ifid:t.ifid}),(function(e,t){1==e.rsp.discovery_requested?(n.value=!0,""!=e.rsp.progress&&(i.value=e.rsp.progress)):(n.value=!1,i.value="",clearInterval(f)),(e=>{1==e.ghost_found&&0==p.value&&(v.unshift(d),p.value=!0),1==e.too_many_devices_message&&0==_.value&&(v.unshift(_),_.value=!0),0==e.ghost_found&&0==p.value&&(v.shift(),p.value=!1),0==e.too_many_devices_message&&1==_.value&&(v.shift(),_.value=!1),r.value=e.last_network_discovery})(e.rsp)}))},y=()=>{s.value.reload()};return _n((()=>{f=setInterval(b,3e3)})),dn((async()=>{!function(){let e={table_buttons:[{text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(){y()}},{text:i18n("discover.start_discovery")+' <i class="fa-solid fa-play"></i>',action:function(){u.value=!1,$.get(NtopUtils.buildURL(g,{ifid:t.ifid}),(function(e){})),f=setInterval(b,1e3)}}],data_url:NtopUtils.buildURL(h,{ifid:t.ifid}),enable_search:!0,table_config:{serverSide:!1,order:[[0,"asc"]]}},a=[{columnName:i18n("ip_address"),name:"ip",data:"ip",className:"text-nowrap",responsivePriority:1},{columnName:i18n("name"),name:"name",data:"name",className:"text-nowrap text-center",responsivePriority:1},{columnName:i18n("mac_stats.manufacturer"),name:"manufacturer",data:"manufacturer",className:"text-nowrap",responsivePriority:2},{columnName:i18n("mac_address"),name:"mac_address",data:"mac_address",className:"text-nowrap",responsivePriority:2},{columnName:i18n("os"),name:"os",data:"os",className:"text-nowrap text-center",responsivePriority:2},{columnName:i18n("info"),name:"info",data:"info",className:"text-nowrap",responsivePriority:2},{columnName:i18n("device"),name:"device",data:"device",className:"text-nowrap",responsivePriority:2}],l=ntopng_utility.clone(e);l.columns_config=a,o.value=l}()})),mn((async()=>{s.value.destroy_table()})),(e,t)=>(Ps(),Ms("div",kE,[Vs("div",$E,[Vs("div",SE,[u.value?(Ps(),Ls(wf,{key:0})):Ys("v-if",!0),Vs("div",NE,[a.value?(Ps(),Ms("div",CE,te(ya(l)),1)):Ys("v-if",!0),n.value?(Ps(),Ms("div",AE,[EE,Ks(" "+te(ya(c))+" ",1),Vs("span",{innerHTML:i.value},null,8,TE)])):(Ps(),Ls($w,{key:1,ref_key:"network_discovery_table",ref:s,table_buttons:o.value.table_buttons,columns_config:o.value.columns_config,data_url:o.value.data_url,enable_search:o.value.enable_search,table_config:o.value.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])),Hs(fv,{note_list:v}),Ys(" Adding Extra Message "),Vs("div",{class:"p-1",innerHTML:r.value},null,8,PE)])])])]))},__file:"http_src/vue/page-network-discovery.vue"};const IE={class:"row"},OE={class:"col-md-12 col-lg-12"},jE={class:"card card-shadow"},ME={class:"card-body"},LE=Vs("div",{class:"d-flex align-items-center"},null,-1);var FE={__name:"page-manage-configurations-backup",props:{date_format:String},setup(e){const t=e,a=e=>i18n(e),l=va(null),n=`${http_prefix}/lua/rest/v2/get/system/configurations/list_available_backups.lua`,s=va({}),o=va(!1),i=function(e,a){const l=1e3*e;let n="HH:MM:SS";return n="little_endian"==t.date_format?"DD/MM/YYYY "+n:"middle_endian"==t.date_format?"MM/DD/YYYY "+n:"YYYY/MM/DD "+n,ntopng_utility.from_utc_to_server_date_format(l,n)},r=()=>{o.value=!0,l.value.reload(),o.value=!1};dn((async()=>{await async function(){const e=[];e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,a,l){r()}});let t={table_buttons:e,data_url:`${n}`,enable_search:!0,id:"manage_configurations_backup",table_config:{serverSide:!0,responsive:!1,scrollX:!0,columnDefs:[{type:"file-size",targets:0}]}},l=[];l.push({columnName:a("backup_date"),orderable:!0,targets:0,name:"epoch",data:"epoch",className:"text-left",responsivePriority:1,render:(e,t,a)=>i(e)},{columnName:a("actions"),orderable:!1,width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return c(a)}}),t.columns_config=l,s.value=t}()}));const c=function(e){let t={handlerId:"download_backup_handler",onClick:()=>{var t;t=e,window.open(`${http_prefix}/lua/rest/v2/get/system/configurations/download_backup.lua?epoch=${t.epoch}&download=true`)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:t,icon:"fas fa-download fa-lg",title:i18n("download")}])};return(e,t)=>(Ps(),Ms("div",IE,[Vs("div",OE,[Vs("div",jE,[Vs("div",ME,[o.value?(Ps(),Ls(wf,{key:0})):Ys("v-if",!0),Vs("div",{id:"manage_configurations_backup",class:K([o.value?"ntopng-gray-out":""])},[(Ps(),Ls($w,{ref_key:"table_manage_configurations_backup",ref:l,id:s.value.id,key:s.value.data_url,table_buttons:s.value.table_buttons,columns_config:s.value.columns_config,data_url:s.value.data_url,table_config:s.value.table_config},{menu:ml((()=>[LE])),_:1},8,["id","table_buttons","columns_config","data_url","table_config"]))],2)])])])]))},__file:"http_src/vue/page-manage-configurations-backup.vue"};const RE={class:"form-group ms-2 me-2 mt-3 row"},DE={class:"col-form-label col-sm-2"},zE={class:"col-10"},qE={key:0,class:"form-group ms-2 me-2 mt-3 row"},BE={class:"col-form-label col-sm-2"},VE={class:"col-10"},HE={class:"form-group ms-2 me-2 mt-3 row"},GE={class:"col-form-label col-sm-2"},WE={class:"col-10"},KE={class:"form-group ms-2 me-2 mt-3 row"},JE={class:"col-form-label col-sm-2"},YE={class:"col-10"},ZE={class:"form-group ms-2 me-2 mt-3 row",style:{"margin-top":"3px"}},XE={class:"col-form-label col-sm-2"},QE={class:"col-sm-3"},eT={class:"btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},tT=["value","id"],aT=["id","for"],lT=["value","id"],nT=["id","for"],sT=["value","id"],oT=["id","for"],iT={key:0,class:"col-sm-2 btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},rT=["value","id"],cT=["id","for"],uT={key:1,class:"col-sm-2 btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},dT=["value","id"],_T=["id","for"],pT={key:1,class:"message alert alert-warning mt-3"};var fT={__name:"modal-add-snmp-device-rules",props:{ifid_list:Array,snmp_devices_list:Array,snmp_metric_list:Array,frequency_list:Array,init_func:Function,page_csrf:String},emits:["add","edit"],setup(e,{expose:t,emit:l}){const n=e;va(""),va("");const s=va(null),o=e=>i18n(e);va(null),va(null);const i=va([]),r=va([]);let c=va([]),u=va(!0);const d=`${http_prefix}/lua/pro/rest/v2/get/snmp/device/available_interfaces.lua`,_=va([]),p=va(null),f=va(null),v=va({}),m=va({}),h=va({}),g=va({}),b=va({}),y=va(!0),w=va({}),x=va(!0),k=va("snmp"),S=va(!1),N=va(null);let C=va([]),A=o("if_stats_config.add_host_rules_title");const E=[o("if_stats_config.note_snmp_device_rules.note_1"),o("if_stats_config.note_snmp_device_rules.note_2"),o("if_stats_config.note_snmp_device_rules.note_3"),o("if_stats_config.note_3"),o("if_stats_config.note_4")],T=[o("if_stats_config.note_5")],P=va([{title:o("volume"),label:o("volume"),id:"volume",active:!0},{title:o("throughput"),label:o("throughput"),id:"throughput",active:!1},{title:o("percentage"),label:o("percentage"),id:"percentage",active:!1},{title:o("packets"),label:o("packets"),id:"packets",active:!1}]),U=va([{title:o("kb"),label:o("kb"),id:"kb",value:1024,active:!1},{title:o("mb"),label:o("mb"),id:"mb",value:1048576,active:!1},{title:o("gb"),label:o("gb"),id:"gb",value:1073741824,active:!0,default_active:!0}]),I=va([{title:o("kbps"),label:o("kbps"),id:"kbps",value:1e3,active:!1},{title:o("mbps"),label:o("mbps"),id:"mbps",value:1e6,active:!1},{title:o("gbps"),label:o("gbps"),id:"gbps",value:1e9,active:!0,default_active:!0}]),O=va([{title:"+",label:">",id:"plus",value:1,active:!1,absolute_value:!0},{title:"-",label:"<",id:"minus",value:-1,active:!0,default_active:!0}]),j=va([{title:"+",label:">",id:"plus",value:1,active:!0,absolute_value:!0}]),M=[{title:"+",label:"%",id:"plus",value:1,active:!0}],L=va(null),F=va(null),R={csrf:n.page_csrf};function D(e){e.forEach((e=>e.active=1==e.default_active))}const z=e=>{const t=e.target.id;O.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1}))},q=e=>{const t=e.target.id;"throughput"==w.value.id?I.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):"volume"==w.value.id?U.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):"percentage"==w.value.id?M.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):w.value.id};async function B(e){const t=a.buildURL(d+"?host="+m.value.label_to_insert,R);let l=[];await $.get(t,(function(e,t){l=e.rsp}));let n=[];l.forEach((e=>{null!=e.name&&""!=e.name&&e.name!=e.id?n.push({label:e.name+" ("+e.id+")",id:e.id,name:e.name}):n.push({label:e.id,id:e.id,name:e.id})})),n.push({label:"*",id:"*",name:"*"}),n.sort((function(e,t){return e.label.toLowerCase()>t.label.toLowerCase()?1:e.label.toLowerCase()<t.label.toLowerCase()?-1:0})),null!=e&&n.forEach((t=>{t.id==e&&(h.value=t)})),c.value=n,"all"==m.value.label_to_insert?u.value=!1:u.value=!0}function V(){let e=[];"packets"==g.value.id||"usage"==g.value.id?P.value.forEach((t=>{"percentage"!=t.id?t.active=!1:(t.active=!0,e.push(t),w.value=t)})):"errors"==g.value.id?P.value.forEach((t=>{"packets"!=t.id?t.active=!1:(t.active=!0,e.push(t),w.value=t)})):P.value.forEach((t=>{"packets"==t.id?t.active=!1:e.push(t)})),C.value=e}const H=e=>{k.value="snmp",L.value;const t=b.value.id,a=g.value.id,n=g.value.label,s=m.value.label_to_insert,o=m.value.label,i=null==h.value||0===Object.entries(h.value).length?"*":h.value.id,r=null==h.value||0===Object.entries(h.value).length?"*":h.value.label;let c,u,d,_,p,f=w.value.id;!1===x.value&&(f="",tmp_extra_metric="",_=F.value.value),"throughput"==f?(O.value.forEach((e=>{e.active&&(d=e.value)})),p=parseInt(d),I.value.forEach((e=>{e.active&&(c=e.value,u=e.label)})),_=c*parseInt(F.value.value)/8):"volume"==f?(O.value.forEach((e=>{e.active&&(d=e.value)})),p=parseInt(d),U.value.forEach((e=>{e.active&&(c=e.value,u=e.label)})),_=c*parseInt(F.value.value)):"percentage"==f?(O.value.forEach((e=>{e.active&&(d=e.value)})),p=parseInt(d),_=p*parseInt(F.value.value),u="%"):(p=1,_=parseInt(F.value.value));let v="add";1==e&&(v="edit"),l(v,{frequency:t,metric:a,metric_label:n,threshold:_,metric_type:f,snmp_device:s,snmp_device_label:o,snmp_device_port:i,snmp_device_port_label:r,rule_threshold_sign:p,snmp_threshold_value:F.value.value,snmp_threshold_unit:u,snmp_metric_type_label:w.value.title}),W()},G=()=>{H(!0)},W=()=>{s.value.close()};return dn((()=>{P.value.forEach((e=>{e.active&&(w.value=e)}))})),t({show:e=>{null!=e?(e=>{null!=e&&(S.value=!0,A=o("if_stats_config.edit_host_rules_title"),y.value=!1,r.value.forEach((t=>{t.label_to_insert==e.device&&(m.value=t)})),O.value.forEach((t=>{t.active=t.value==e.threshold_sign})),i.value.forEach((t=>{t.id==e.metric&&(g.value=t)})),"volume"==e.metric_type?U.value.forEach((t=>{if(e.threshold%t.value==0){let a=e.threshold/t.value;a<1024?(t.active=!0,F.value.value=0==a?1:a):t.active=!1}else t.active=!1})):"throughput"==e.metric_type?(e.threshold=8*e.threshold,I.value.forEach((t=>{if(e.threshold%t.value==0){let a=e.threshold/t.value;a<1e3?(t.active=!0,F.value.value=0==a?1:a):t.active=!1}else t.active=!1}))):F.value.value=e.threshold*e.threshold_sign,V(),C.value.forEach((t=>{t.id==e.metric_type?(w.value=t,t.active=!0):t.active=!1})),k.value=e.rule_type,r.value.forEach((t=>{t.label==e.device&&(m.value=t)})),_.value.forEach((t=>{t.id==e.frequency&&(b.value=t)})),B(e.device_port))})(e):async function(){L.value="",v.value=i.value[0],m.value=null,m.value=r.value[0],B(),g.value=i.value[0],V(),b.value=_.value[0],w.value=P.value[0],P.value.forEach((e=>e.active=!1)),P.value[0].active=!0,D(U.value),D(I.value),D(O.value),k.value="snmp",y.value=!0,u.value=!1,F.value.value=1,S.value=!1,A=o("if_stats_config.add_host_rules_title")}(),s.value.show()},close:W,metricsLoaded:(e,t,a)=>{r.value=function(e){let t=[];return e.data.forEach((e=>{null!=e.column_name&&""!=e.column_name&&"all"!=e.column_name?t.push({label:e.column_name+" ("+e.column_key+")",label_to_insert:e.column_key}):"all"==e.column_name?t.push({label:e.column_key,label_to_insert:e.column_name}):t.push({label:e.column_key,label_to_insert:e.column_key})})),t.sort((function(e,t){return e.label.toLowerCase()>t.label.toLowerCase()?1:e.label.toLowerCase()<t.label.toLowerCase()?-1:0})),t}(e),i.value=t,_.value=n.frequency_list,b.value=_.value[0],v.value=i.value[0],N.value=a}}),(e,t)=>(Ps(),Ls(sp,{onShowed:t[7]||(t[7]=e=>{}),ref_key:"modal_id",ref:s},{title:ml((()=>[Ks(te(ya(A)),1)])),body:ml((()=>[Ys(" Target information, here an IP is put "),Vs("div",RE,[Vs("label",DE,[Vs("b",null,te(o("if_stats_config.snmp_device")),1)]),Vs("div",zE,[Hs(n_,{selected_option:m.value,"onUpdate:selected_option":t[0]||(t[0]=e=>m.value=e),onSelect_option:t[1]||(t[1]=e=>B()),options:r.value},null,8,["selected_option","options"])])]),1==ya(u)?(Ps(),Ms("div",qE,[Vs("label",BE,[Vs("b",null,te(o("if_stats_config.snmp_interface")),1)]),Vs("div",VE,[Hs(n_,{selected_option:h.value,"onUpdate:selected_option":t[2]||(t[2]=e=>h.value=e),options:ya(c)},null,8,["selected_option","options"])])])):Ys("v-if",!0),Vs("div",HE,[Vs("label",GE,[Vs("b",null,te(o("if_stats_config.metric")),1)]),Vs("div",WE,[Hs(n_,{selected_option:g.value,"onUpdate:selected_option":t[3]||(t[3]=e=>g.value=e),onSelect_option:t[4]||(t[4]=e=>V()),options:i.value},null,8,["selected_option","options"])])]),Ys(" Frequency information, a frequency of 1 day, 5 minute or 1 hour for example "),Vs("div",KE,[Vs("label",JE,[Vs("b",null,te(o("if_stats_config.frequency")),1)]),Vs("div",YE,[Hs(n_,{selected_option:b.value,"onUpdate:selected_option":t[5]||(t[5]=e=>b.value=e),options:_.value},null,8,["selected_option","options"])])]),Ys(" Threshold information, maximum amount of bytes "),Vs("div",ZE,[Vs("label",XE,[Vs("b",null,te(o("if_stats_config.threshold")),1)]),x.value?(Ps(),Ms(Ss,{key:0},[Vs("div",QE,[Hs(n_,{selected_option:w.value,"onUpdate:selected_option":t[6]||(t[6]=e=>w.value=e),options:ya(C)},null,8,["selected_option","options"])]),Vs("div",{class:K(["col-3",["throughput"==w.value.id?"p-0":""]])},[Vs("div",eT,["throughput"==w.value.id&&"packets"!=w.value.id?(Ps(!0),Ms(Ss,{key:0},En(I.value,(e=>(Ps(),Ms(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:p,name:"threshold_measure"},null,8,tT),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:q,for:e.id},te(e.label),11,aT)],64)))),256)):Ys("v-if",!0),"percentage"==w.value.id&&"packets"!=w.value.id?(Ps(),Ms(Ss,{key:1},En(M,(e=>(Ps(),Ms(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:p,name:"threshold_measure"},null,8,lT),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:q,for:e.id},te(e.label),11,nT)],64)))),64)):Ys("v-if",!0),"volume"==w.value.id&&"packets"!=w.value.id?(Ps(!0),Ms(Ss,{key:2},En(U.value,(e=>(Ps(),Ms(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:p,name:"threshold_measure"},null,8,sT),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:q,for:e.id},te(e.label),11,oT)],64)))),256)):Ys("v-if",!0)])],2),"packets"!=w.value.id?(Ps(),Ms("div",iT,[(Ps(!0),Ms(Ss,null,En(O.value,(e=>(Ps(),Ms(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_sign",ref:f,name:"threshold_sign"},null,8,rT),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:z,for:e.id},te(e.label),11,cT)],64)))),256))])):(Ps(),Ms("div",uT,[(Ps(!0),Ms(Ss,null,En(j.value,(e=>(Ps(),Ms(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_sign",ref:f,name:"threshold_sign"},null,8,dT),Vs("label",{class:K(["btn",[e.absolute_value?"btn-primary active":"btn-secondary"]]),id:e.id,for:e.id},te(e.label),11,_T)],64)))),256))]))],64)):Ys("v-if",!0),Vs("div",{class:K([x.value?"col-sm-2":"col-sm-8"])},["percentage"==w.value.id?(Ps(),Ms("input",{key:0,value:"1",ref_key:"threshold",ref:F,type:"number",name:"threshold",class:"form-control",max:"100",min:"1",required:""},null,512)):(Ps(),Ms("input",{key:1,value:"1",ref_key:"threshold",ref:F,type:"number",name:"threshold",class:"form-control",max:"1023",min:"1",required:""},null,512))],2)]),"usage"!=g.value.id&&"percentage"==w.value.id?(Ps(),Ms("div",pT,te(o("show_alerts.host_rules_percentage")),1)):Ys("v-if",!0)])),footer:ml((()=>[Hs(fv,{note_list:E,add_sub_notes:!0,sub_note_list:T}),0==S.value?(Ps(),Ms("button",{key:0,type:"button",onClick:H,class:"btn btn-primary"},te(o("add")),1)):(Ps(),Ms("button",{key:1,type:"button",onClick:G,class:"btn btn-primary"},te(o("apply")),1))])),_:1},512))},__file:"http_src/vue/modal-add-snmp-device-rules.vue"};const vT={class:"row"},mT={class:"col-md-12 col-lg-12"},hT={class:"card"},gT=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),bT={class:"card-body"},yT={class:"mb-4"},wT={id:"host_rules"},xT={class:"card-footer"};var kT={__name:"page-snmp-device-rules",props:{page_csrf:String,ifid:String},setup(e){const t=e,l=va(null),n=va(null),s=va(null),o=e=>i18n(e),i=va({}),r=va({}),c=`${http_prefix}/lua/pro/rest/v2/get/snmp/metric/rule_metrics.lua`,u=`${http_prefix}/lua/pro/enterprise/get_snmp_devices_list.lua`,d=`${http_prefix}/lua/pro/rest/v2/get/snmp/device/rules.lua`,_=`${http_prefix}/lua/pro/rest/v2/add/snmp/device/rule.lua`,p=`${http_prefix}/lua/pro/rest/v2/delete/snmp/device/rule.lua`,f=[o("if_stats_config.generic_notes_1"),o("if_stats_config.generic_notes_2"),o("if_stats_config.generic_notes_3")],v={ifid:t.ifid,csrf:t.page_csrf};let m={},h=o("if_stats_config.delete_host_rules_title");o("if_stats_config.edit_local_network_rules");let g=o("if_stats_config.delete_host_rules_description"),b=[],y=[];const w=[{title:i18n("show_alerts.5_min"),label:i18n("show_alerts.5_min"),id:"5min"},{title:i18n("show_alerts.hourly"),label:i18n("show_alerts.hourly"),id:"hour"},{title:i18n("show_alerts.daily"),label:i18n("show_alerts.daily"),id:"day"}];async function x(e){await N(),await C(e)}const k=function(){const e=r.value;return r.value=null,e},S=function(){l.value.reload()},N=async function(){const e=i.value,t=a.buildURL(p,{...v,rule_id:e.id,rule_type:e.rule_type});await $.post(t,(function(e,t){S()}))},C=async function(e){const t=a.buildURL(_,{...v,...e});await $.post(t,(function(e,t){S()}))},A=function(e){let t={handlerId:"delete_host",onClick:()=>{var t;t=e,i.value=t,n.value.show()}},a={handlerId:"edit_rule",onClick:()=>{var t;t=e,r.value=t,i.value=t,s.value.show(t)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:a,icon:"fa-edit",title:i18n("edit")},{class:"pointer",handler:t,icon:"fa-trash",title:i18n("delete")}])},E=function(){const e=[];e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(){S()}},{text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){s.value.show()}});const t=[{columnName:o("actions"),targets:0,width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return A(a)}},{columnName:o("id"),visible:!1,targets:1,name:"id",data:"id",className:"text-nowrap",responsivePriority:1},{columnName:o("if_stats_config.snmp_device"),targets:2,width:"20",name:"device",data:"device",className:"text-nowrap",responsivePriority:1,render:function(e,t,a){return function(e,t){return t.device_label}(0,a)}},{columnName:o("if_stats_config.snmp_interface"),targets:3,width:"20",name:"interface",data:"interface",className:"text-center",responsivePriority:1,render:function(e,t,a){return function(e,t){return t.device_port_label}(0,a)}},{columnName:o("if_stats_config.metric"),targets:4,width:"10",name:"metric",data:"metric",className:"text-center",responsivePriority:1,render:function(e,t,a){return function(e,t){let a=e;return t.metric_label&&t.metric_label!=e&&""!=t.metric_label&&(a=t.metric_label),a}(e,a)}},{columnName:o("if_stats_config.frequency"),targets:5,width:"10",name:"frequency",data:"frequency",className:"text-center",responsivePriority:1,render:function(e){return function(e){let t="";return w.forEach((a=>{e==a.id&&(t=a.title)})),t}(e)}},{columnName:o("if_stats_config.threshold"),targets:6,width:"10",name:"threshold",data:"threshold",className:"text-end",responsivePriority:1,render:function(e,t,l){return function(e,t){let l=parseInt(e),n="> ";return t.threshold_sign&&"-1"==t.threshold_sign&&(n="< "),t.metric_type&&"throughput"==t.metric_type?l=n+a.bitsToSize_no_comma(8*e):t.metric_type&&"volume"==t.metric_type?l=n+a.bytesToSize(e):t.metric_type&&"percentage"==t.metric_type?(e<0&&(e*=-1),l=n+a.fpercent(e)):l=n+e,l}(e,l)}},{columnName:o("metric_type"),visible:!1,targets:7,name:"metric_type",data:"metric_type",className:"text-nowrap",responsivePriority:1}],l={table_buttons:e,data_url:a.buildURL(d,v),enable_search:!0,columns_config:t,table_config:{scrollX:!1,serverSide:!1,order:[[1,"desc"]],columnDefs:t}};m=l};return dn((async()=>{E(),await async function(){const e=a.buildURL(c,v);await $.get(e,(function(e,t){b=e.rsp}))}(),await async function(){v.verbose=!0;const e=a.buildURL(u,v);await $.get(e,(function(e,t){y=e.rsp})),y.data.push({column_key:"*",column_name:"all"})}(),s.value.metricsLoaded(y,b,t.page_csrf)})),mn((()=>{l.value.destroy_table()})),(e,t)=>(Ps(),Ms("div",vT,[Vs("div",mT,[Vs("div",hT,[gT,Vs("div",bT,[Vs("div",yT,[Vs("h4",null,te(o("if_stats_config.snmp_rules")),1)]),Vs("div",wT,[Hs(sx,{ref_key:"modal_delete_confirm",ref:n,title:ya(h),body:ya(g),onDelete:N},null,8,["title","body"]),Hs(fT,{ref_key:"modal_add_snmp_device_rule",ref:s,frequency_list:w,init_func:k,onAdd:C,onEdit:x},null,512),Hs($w,{ref_key:"table_host_rules",ref:l,table_buttons:ya(m).table_buttons,columns_config:ya(m).columns_config,data_url:ya(m).data_url,enable_search:ya(m).enable_search,table_config:ya(m).table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])]),Vs("div",xT,[Hs(fv,{note_list:f})])])])]))},__file:"http_src/vue/page-snmp-device-rules.vue"},$T={__name:"page-snmp-devices-interfaces-similarity",props:{context:Object},setup(e){const t=e,a=e=>i18n(e),l=[a("snmp.snmp_similarity_note"),a("snmp.snmp_similarity_time_note")];return _n((async()=>{Kd.build_table(http_prefix,"snmp_similarity_data")})),console.log(t.context),(e,t)=>(Ps(),Ms(Ss,null,[Ks(" Ciao Mondo "),Hs(fv,{note_list:l})],64))},__file:"http_src/vue/page-snmp-devices-interfaces-similarity.vue"};const ST={class:"row"},NT={class:"col-md-12 col-lg-12"},CT={class:"card card-shadow"},AT={class:"card-body"},ET={class:"d-flex mb-3"},TT={class:"d-flex align-items-center ml-2 mb-2"},PT={class:"d-flex no-wrap",style:{"text-align":"left","margin-right":"1rem","min-width":"25rem"}},UT={class:"my-auto me-1"},IT={class:"d-flex align-items-center mb-2"},OT={class:"d-flex no-wrap",style:{"text-align":"left","margin-right":"1rem","min-width":"25rem"}},jT={class:"my-auto me-1"},MT={class:"d-flex align-items-center mb-2"},LT={class:"d-flex no-wrap",style:{"text-align":"left","margin-right":"1rem","min-width":"25rem"}},FT={class:"my-auto me-1"},RT=["title"],DT=["onClick","title"];var zT={__name:"page-hosts-ports-analysis",props:{is_ntop_enterprise_m:Boolean,csrf:String,vlans:Array,ifid:Number,aggregation_criteria:String,page:Number,sort:String,order:String,start:Number,length:Number,host:String},setup(e){const t=e,l=va([]),n=va([]);va({csrf:t.csrf,ifid:t.ifid});const s=e=>i18n(e),o=[{label:s("tcp"),value:6,param:"tcp",table_id:"tcp_ports_analysis",enterprise_m:!1},{label:s("udp"),value:17,param:"udp",table_id:"udp_ports_analysis",enterprise_m:!1}],i=va(o[0]),r=va("server_ports_analysis"),c=va({}),u=va({}),d=va();let _=va([]),p=va([]);const f=function(){if(t.is_ntop_enterprise_m)return va(o);{let e=[];return o.forEach((t=>{t.enterprise_m||e.push(t)})),va(e)}}();_n((async()=>{let e=x.get_url_entry("port"),t=x.get_url_entry("protocol");const a=x.get_url_entry("application");null!=e&&0!=e.localeCompare("")&&null!=t&&0!=t.localeCompare("")&&null!=a&&0!=a.localeCompare("")?(e=Number(e),t=Number(t),i.value=o.find((e=>e.value==t)),await A(!1,a,e)):(i.value=o[0],await A(!1)),async function(e){l.value=await w("overview"),C()}(),d.value.refresh_table()}));const v=()=>x.get_url_object();async function m(){await A(!1),d.value.refresh_table()}async function h(){await A(!0),d.value.refresh_table()}function g(){y(),d.value.refresh_table()}function y(){x.set_key_to_url("port",c.value.id)}async function w(e,t){let a=v(),l=x.obj_to_url_params(a);const n=`${http_prefix}/lua/pro/rest/v2/get/host/hosts_details_by_port_filters.lua?action=${e}&${l}`;return(await b.http_request(n)).map((t=>({id:t.action||t.name,label:t.label,title:t.tooltip,data_loaded:"overview"!=e,options:t.value,hidden:1==t.value.length})))}const k=(e,t)=>a=>{!async function(e,t){if(e.show_spinner=!0,await Ja(),0==e.data_loaded){let a=await w(e.id);e.options=a.find((t=>t.id==e.id)).options,await Ja(),n.value[t].load_menu()}e.show_spinner=!1}(e,t)};function $(e){let t={click_button_flows:S};null!=t[e.event_id]&&t[e.event_id](e)}function S(e){N(e.row.ip)}const N=function(e){let t={l4proto:i.value.value,server:e,port:c.value.id,vlan:x.get_url_entry("vlan_id")},a=x.obj_to_url_params(t);const l=`${http_prefix}/lua/flows_stats.lua?${a}`;x.go_to_url(`${l}`)};function C(){l.value.forEach(((e,t)=>{null==e.basic_label&&(e.basic_label=e.label);const a=x.get_url_entry(e.id);null!=a&&e.options.forEach((t=>{t.value.toString()===a&&(e.label=`${e.basic_label}: ${t.label||t.value}`)}))}))}async function A(e,t,a){x.set_key_to_url("protocol",i.value.value);const l=`${http_prefix}/lua/pro/rest/v2/get/host/server_ports.lua?protocol=`+i.value.value;let n=await b.http_request(l,null,null,!0),s=[];p.value=[],_.value=[],n.rsp.forEach((e=>{let t=e.l7_proto_name;s.push({label:`${e.srv_port}/${t} (${e.n_hosts})`,id:e.srv_port,application:t,application_id:e.proto_id,num_hosts:e.n_hosts,vlan_id:e.vlan_id})})),s.forEach((e=>{let t=e.application_id;p.value.find((e=>e.id==t))||p.value.push({label:e.application,id:e.application_id,value:t})})),p.value.sort(((e,t)=>{let a=e.label.toLowerCase(),l=t.label.toLowerCase();return a<l?-1:a>l?1:0})),e||(u.value=null==t?p.value[0]:p.value.find((e=>e.id==t))),x.set_key_to_url("application",u.value.id),s.forEach((e=>{e.application==u.value.label&&_.value.push({label:e.id+" ("+e.num_hosts+")",id:e.id,value:e.id,vlan_id:e.vlan_id,n_hosts:e.num_hosts})})),_.value.sort(((e,t)=>{let a=e.id,l=t.id;return a<l?-1:a>l?1:0})),c.value=null!=a?_.value.find((e=>e.id==a)):_.value[0],y()}const E=async e=>{let t={ip:(e,t)=>{if(void 0!==e)return T(e,t)},name:(e,t)=>{if(void 0!==e)return U(e,t)},mac:(e,t)=>{if(void 0!==e)return P(e)},tot_traffic:(e,t)=>{if(void 0!==e)return a.bytesToSize(e)}};return e.forEach((e=>{e.render_func=t[e.data_field]})),e},T=function(e,t){return null!=e?0!=t.vlan_id?`<a href="${http_prefix}/lua/flows_stats.lua?server=${e}&vlan=${t.vlan_id}&port=${c.value.id}">${e}@${t.vlan_id}</a>`:`<a href="${http_prefix}/lua/flows_stats.lua?server=${e}&port=${c.value.id}">${e}</a>`:e},P=function(e,t){return null!=e?`<a href="${http_prefix}/lua/mac_details.lua?host=${e}">${e}</a>`:e},U=function(e,t){return null!=e?0!=t.vlan_id?`<a href="${http_prefix}/lua/host_details.lua?host=${t.ip}&vlan=${t.vlan_id}">${e}</a>`:`<a href="${http_prefix}/lua/host_details.lua?host=${t.ip}">${e}</a>`:e};return(t,a)=>(Ps(),Ms("div",ST,[Vs("div",NT,[Vs("div",CT,[Vs("div",AT,[Vs("div",ET,[Vs("div",TT,[Vs("div",PT,[Vs("label",UT,te(s("protocol"))+": ",1),Hs(n_,{selected_option:i.value,"onUpdate:selected_option":a[0]||(a[0]=e=>i.value=e),options:ya(f),onSelect_option:m},null,8,["selected_option","options"])])]),Vs("div",IT,[Vs("div",OT,[Vs("label",jT,te(s("application"))+": ",1),Hs(n_,{selected_option:u.value,"onUpdate:selected_option":a[1]||(a[1]=e=>u.value=e),options:ya(p),onSelect_option:h},null,8,["selected_option","options"])])]),Vs("div",MT,[Vs("div",LT,[Vs("label",FT,te(s("db_search.tags.srv_port"))+": ",1),Hs(n_,{selected_option:c.value,"onUpdate:selected_option":a[2]||(a[2]=e=>c.value=e),options:ya(_),onSelect_option:g},null,8,["selected_option","options"])])])]),Vs("div",null,[Hs(rv,{ref_key:"table_server_ports_analysis",ref:d,csrf:e.csrf,table_id:r.value,f_map_columns:E,get_extra_params_obj:v,onCustom_event:$},{custom_header:ml((()=>[(Ps(!0),Ms(Ss,null,En(l.value,((e,t)=>(Ps(),Ls(Dd,{f_on_open:k(e,t),ref_for:!0,ref:e=>{n.value[t]=e},hidden:e.hidden},{title:ml((()=>[Hs(cv,{show:e.show_spinner,size:"1rem",class:"me-1"},null,8,["show"]),Vs("a",{class:"ntopng-truncate",title:e.title},te(e.label),9,RT)])),menu:ml((()=>[(Ps(!0),Ms(Ss,null,En(e.options,(e=>(Ps(),Ms("a",{style:{cursor:"pointer",display:"block"},onClick:t=>function(e,t){t.stopPropagation(),x.set_key_to_url(e.key,`${e.value}`),C(),d.value.refresh_table()}(e,t),class:"ntopng-truncate tag-filter",title:e.value},[null==e.count?(Ps(),Ms(Ss,{key:0},[Ks(te(e.label),1)],64)):(Ps(),Ms(Ss,{key:1},[Ks(te(e.label+" ("+e.count+")"),1)],64))],8,DT)))),256))])),_:2},1032,["f_on_open","hidden"])))),256))])),_:1},8,["csrf","table_id"])])])])])]))},__file:"http_src/vue/page-hosts-ports-analysis.vue"};const qT={class:"form-group ms-2 me-2 mt-3 row"},BT={class:"col-form-label col-sm-3"},VT={class:"col-7"},HT={key:0},GT={class:"form-group ms-2 me-2 mt-3 row"},WT={class:"col-form-label col-sm-3"},KT={class:"col-7"},JT=["placeholder"],YT={key:1},ZT={class:"form-group ms-2 me-2 mt-3 row"},XT={class:"col-form-label col-sm-3"},QT={class:"col-7"},eP=["placeholder"],tP={key:2},aP={class:"form-group ms-2 me-2 mt-3 row"},lP={class:"col-form-label col-sm-3"},nP={class:"switch col-1 mt-3"},sP={class:"form-group ms-2 me-2 mt-3 row"},oP={class:"col-form-label col-sm-3"},iP={class:"col-7"},rP=["disabled"];var cP={__name:"modal-nedge-add-repeater-config",props:{},emits:["edit","add"],setup(e,{expose:t,emit:a}){const l=e=>i18n(e),n=i18n("if_stats_config.multicast_ip_placeholder"),s=i18n("if_stats_config.port_placeholder"),o=va(null),i=va([]),r=va(null),c=va(null),u=va({value:"mdns",label:"MDNS"}),d=va(null),_=va(!1),p=va(!0),f=va(!0),v=va(!0),m=va(!0),h=()=>{let e=new RegExp(wp.get_data_pattern("ip"));v.value=!(e.test(r.value)||"*"===r.value),p.value=y()},g=()=>{m.value=c.value<1||c.value>65535,p.value=y()},y=()=>"custom"==u.value.value?f.value||v.value||m.value:f.value,w=va(""),x=[{label:l("nedge.page_repeater_config.modal_repeater_config.mdns"),value:"mdns",default:!0},{label:l("nedge.page_repeater_config.modal_repeater_config.custom"),value:"custom"}],k=va(0),$=va({}),S=`${http_prefix}/lua/rest/v2/get/nedge/interfaces.lua`;let N;const C=va([]),A=va(""),E=e=>{f.value=e.length<2,p.value=y()},T=e=>{i.value=e},P=e=>{i.value=i.value.filter((t=>t.label!=e.label))},U=va(!0);async function I(e){u.value=$.value,"custom"==u.value.value&&await j()}let O=!1;async function j(){if(1==O)return;null==N&&(N=b.http_request(S));let e=await N;C.value=e.filter((e=>"lan"==e.role)).map((e=>({label:e.label,value:e.ifname}))),O=!0}const M=()=>{let e=u.value.label,t=_.value,l={repeater_type:e};if("custom"==u.value.value){l={repeater_type:e,ip:r.value,port:c.value,keep_src_address:t}}let n="add";0==U.value&&(l.repeater_id=k.value,n="edit");let s=[],o=[];i.value.forEach((e=>{s.push(e.value),e.value==e.label||e.label.includes(e.value)?o.push(e.label):o.push(e.label+" ("+e.value+")")}));const d=s.join(","),p=o.join(",");l.interfaces=d,l.interface_details=p,a(n,l),L()},L=()=>{o.value.close()};return t({show:e=>{$.value={},r.value="",c.value="",i.value=[],m.value=!0,v.value=!0,f.value=!0,function(e){U.value=null==e,0==U.value?(m.value=!1,v.value=!1,f.value=!1,p.value=!1,w.value=l("nedge.page_rules_config.modal_rule_config.title_edit"),A.value=l("edit"),k.value=e.repeater_id,$.value=x.find((t=>t.label==e.type)),"custom"==$.value.value&&(r.value=e.ip,c.value=e.port),_.value=e.keep_src_address,I()):(w.value=l("nedge.page_rules_config.modal_rule_config.title_add"),A.value=l("add"),x.find((e=>1==e.default)));if(0==U.value){const t=e.interfaces.split(",");let a=[];t.forEach((e=>{""!=e&&null!=e&&a.push(C.value.find((t=>t.value==e)))})),i.value=a}}(e),o.value.show()},close:L}),_n((async()=>{await j()})),(e,t)=>(Ps(),Ls(sp,{onShowed:t[6]||(t[6]=e=>{}),ref_key:"modal_id",ref:o},{title:ml((()=>[Ks(te(w.value),1)])),body:ml((()=>[Ys(" Repeater Type "),Vs("div",qT,[Vs("label",BT,[Vs("b",null,te(l("nedge.page_repeater_config.modal_repeater_config.repeater_type")),1)]),Vs("div",VT,[Hs(n_,{selected_option:$.value,"onUpdate:selected_option":t[0]||(t[0]=e=>$.value=e),onSelect_option:t[1]||(t[1]=e=>I()),options:x},null,8,["selected_option"])])]),Ys(" IP "),"custom"==$.value.value?(Ps(),Ms("div",HT,[Vs("div",GT,[Vs("label",WT,[Vs("b",null,te(l("nedge.page_repeater_config.ip")),1)]),Vs("div",KT,[wn(Vs("input",{"onUpdate:modelValue":t[2]||(t[2]=e=>r.value=e),onFocusout:h,class:"form-control col-7",type:"text",placeholder:ya(n),required:""},null,40,JT),[[ji,r.value]])])])])):Ys("v-if",!0),Ys(" Port "),"custom"==$.value.value?(Ps(),Ms("div",YT,[Vs("div",ZT,[Vs("label",XT,[Vs("b",null,te(l("nedge.page_repeater_config.port")),1)]),Vs("div",QT,[wn(Vs("input",{"onUpdate:modelValue":t[3]||(t[3]=e=>c.value=e),onFocusout:g,class:"form-control",type:"text",placeholder:ya(s),required:""},null,40,eP),[[ji,c.value]])])])])):Ys("v-if",!0),Ys(" Keep Source Address "),"custom"==$.value.value?(Ps(),Ms("div",tP,[Vs("div",aP,[Vs("label",lP,[Vs("b",null,te(l("nedge.page_repeater_config.keep_src_address")),1)]),Vs("label",nP,[wn(Vs("input",{type:"checkbox","onUpdate:modelValue":t[4]||(t[4]=e=>_.value=e)},null,512),[[Mi,_.value]])])])])):Ys("v-if",!0),Vs("div",sP,[Vs("label",oP,[Vs("b",null,te(l("nedge.page_repeater_config.interfaces")),1)]),Vs("div",iP,[Hs(n_,{ref_key:"interfaces_search",ref:d,selected_options:i.value,"onUpdate:selected_options":t[5]||(t[5]=e=>i.value=e),options:C.value,multiple:!0,onSelect_option:T,onUnselect_option:P,onChange_selected_options:E},null,8,["selected_options","options"])])])])),footer:ml((()=>[Vs("button",{type:"button",disabled:p.value,onClick:M,class:"btn btn-primary"},te(A.value),9,rP)])),_:1},512))}};np("\ninput[data-v-5b3dc248]:invalid {\n  border-color: #ff0000;\n}\n"),cP.__scopeId="data-v-5b3dc248",cP.__file="http_src/vue/modal-nedge-add-repeater-config.vue";const uP={class:"mb-2"},dP=Vs("br",null,null,-1),_P={id:"aggregated_live_flows"};var pP={__name:"page-nedge-repeaters-config",props:{url:String,ifid:Number,csrf:String,columns_config:Array},setup(e){const t=e,a=e=>i18n(e),l=500,n=va({}),s=va(null),o=va(null);function i(e){c(e,`${http_prefix}/lua/rest/v2/edit/nedge/forwarder.lua`)}function r(e){c(e,`${http_prefix}/lua/rest/v2/add/nedge/forwarder.lua`)}function c(e,a){let l=JSON.stringify({...e,csrf:t.csrf});b.http_request(a,{method:"post",headers:{"Content-Type":"application/json"},body:l}),_()}dn((async()=>{!function(){const e=[];let l={ifid:x.get_url_entry("ifid")||t.ifid},s=x.obj_to_url_params(l);e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,a,l){_()}},{text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){o.value.show(null)}});let i={table_buttons:e,data_url:`${t.url}?${s}`,enable_search:!1},r=[{columnName:a("nedge.page_repeater_config.type"),targets:0,name:"type",data:"type",className:"text-nowrap text-left",responsivePriority:1},{columnName:a("nedge.page_repeater_config.ip"),targets:0,name:"ip",data:"ip",className:"text-nowrap text-left",responsivePriority:1},{columnName:a("nedge.page_repeater_config.port"),targets:0,name:"port",data:"port",className:"text-nowrap text-left",responsivePriority:1},{columnName:a("nedge.page_repeater_config.interfaces"),targets:0,name:"interfaces",data:"details",className:"text-nowrap text-left",responsivePriority:1,render:function(e,t,a){return u(e)}}].map((e=>e));r.push({columnName:a("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return d(a)}}),i.columns_config=r,n.value=i}()}));const u=function(e,t){return e.split(",").join(", ")};const d=function(e){let a={handlerId:"delete_host",onClick:()=>{!function(e){const a=`${http_prefix}/lua/rest/v2/delete/nedge/forwarder.lua`;let l={"Content-Type":"application/json"},n=JSON.stringify({repeater_id:e.repeater_id,csrf:t.csrf});b.http_request(a,{method:"post",headers:l,body:n}),_()}(e)}},l={handlerId:"edit_rule",onClick:()=>{o.value.show(e)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:l,handlerId:"edit_rule",icon:"fa-edit",title:i18n("edit")},{class:"pointer",handler:a,handlerId:"delete_rule",icon:"fa-trash",title:i18n("delete")}])};function _(){setTimeout((()=>{x.reload_url()}),l)}return(e,t)=>(Ps(),Ms(Ss,null,[Vs("div",uP,[Vs("h2",null,te(a("nedge.repeaters_config_title")),1),dP]),Vs("div",_P,[Hs($w,{ref_key:"table_rules",ref:s,table_buttons:n.value.table_buttons,columns_config:n.value.columns_config,data_url:n.value.data_url,filter_buttons:n.value.table_filters,enable_search:n.value.enable_search,table_config:n.value.table_config},null,8,["table_buttons","columns_config","data_url","filter_buttons","enable_search","table_config"])]),Hs(cP,{ref_key:"modal_add_repeater_config",ref:o,onAdd:r,onEdit:i},null,512)],64))},__file:"http_src/vue/page-nedge-repeaters-config.vue"};const fP={key:0,class:"text-left"};var vP={__name:"modal-delete-inactive-host",props:{context:Object},emits:["delete_host"],setup(e,{expose:t,emit:a}){const l=e,n=e=>i18n(e),s=va(null),o=va(""),i=va(""),r=va(!1),c=va(!1),u=va({});async function d(){const e=`${http_prefix}/lua/rest/v2/delete/host/inactive_host.lua`,t={csrf:l.context.csrf,ifid:l.context.ifid,serial_key:u.value};const n=await b.http_request(e,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(n){c.value=!1,r.value=!0;let e="";n.deleted_hosts>1&&(e=". Number hosts deleted: "+n.deleted_hosts),i.value=i18n("succ_del_inactive_hosts")+e,a("delete_host"),_()}else c.value=!0,r.value=!0,i.value=i18n("err_del_inactive_hosts")}_n((()=>{}));const _=()=>{setTimeout((()=>{s.value.close()}),3e3)};return t({show:(e,t)=>{u.value=e,o.value=t,s.value.show()},close:_}),(e,t)=>(Ps(),Ls(sp,{ref_key:"modal_id",ref:s},{title:ml((()=>[Ks(te(n("delete_inactive_host_title")),1)])),body:ml((()=>[Ks(te(o.value)+" ",1),r.value?(Ps(),Ms("div",fP,[Vs("p",{class:K(["text-sm-start fs-6 fw-medium pt-3 m-0",c.value?"text-danger":"text-success"])},[Vs("small",null,te(i.value),1)],2)])):Ys("v-if",!0)])),footer:ml((()=>[Vs("button",{type:"button",onClick:d,class:"btn btn-primary"},te(n("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-inactive-host.vue"};const mP={class:"mt-3",style:{"max-width":"8rem"}},hP={key:0,class:"text-left"};var gP={__name:"modal-delete-inactive-host-epoch",props:{context:Object},emits:["delete_host"],setup(e,{expose:t,emit:a}){const l=e,n=e=>i18n(e);va("csv");const s=va(),o=va(""),i=va(!1),r=va(!1),c=[{label:n("show_alerts.presets.5_min"),value:300},{label:n("show_alerts.presets.30_min"),value:1800},{label:n("show_alerts.presets.hour"),value:3600},{label:n("show_alerts.presets.2_hours"),value:7200},{label:n("show_alerts.presets.6_hours"),value:21600},{label:n("show_alerts.presets.12_hours"),value:43200},{label:n("show_alerts.presets.day"),value:86400},{label:n("show_alerts.presets.week"),value:604800}],u=va();function d(e){s.value=e}async function _(){const e=`${http_prefix}/lua/rest/v2/delete/host/inactive_host.lua`,t={csrf:l.context.csrf,ifid:l.context.ifid,serial_key:s.value.value};const n=await b.http_request(e,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(n){r.value=!1,i.value=!0;let e="";n.deleted_hosts>1&&(e=". Number hosts deleted: "+n.deleted_hosts),o.value=i18n("succ_del_inactive_hosts")+e,a("delete_host"),p()}else r.value=!0,i.value=!0,o.value=i18n("err_del_inactive_hosts")}_n((()=>{s.value=c[0]}));const p=()=>{setTimeout((()=>{u.value.close()}),3e3)};return t({show:()=>{u.value.show()},close:p}),(e,t)=>(Ps(),Ls(sp,{ref_key:"modal_id",ref:u},{title:ml((()=>[Ks(te(n("delete")),1)])),body:ml((()=>[Ks(te(n("delete_since"))+" ",1),Vs("div",mP,[Hs(n_,{selected_option:s.value,"onUpdate:selected_option":t[0]||(t[0]=e=>s.value=e),options:c,onSelect_option:d},null,8,["selected_option"])]),i.value?(Ps(),Ms("div",hP,[Vs("p",{class:K(["text-sm-start fs-6 fw-medium pt-3 m-0",r.value?"text-danger":"text-success"])},[Vs("small",null,te(o.value),1)],2)])):Ys("v-if",!0)])),footer:ml((()=>[Vs("button",{type:"button",onClick:_,class:"btn btn-primary"},te(n("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-inactive-host-epoch.vue"};const bP={class:"mt-3",style:{"max-width":"8rem"}};var yP={__name:"modal-download-inactive-host",props:{context:Object},emits:["download"],setup(e,{expose:t,emit:a}){const l=e=>i18n(e);va("csv");const n=va(),s=[{label:l("csv"),value:"csv",param:"csv"},{label:l("json"),value:"json",param:"json"}],o=va();function i(e){n.value=e}async function r(){let e=ntopng_url_manager.get_url_object(window.location.search);e.download=!0,e.format=n.value.value;const t=`${http_prefix}/lua/rest/v2/get/host/inactive_list.lua?`+ntopng_url_manager.obj_to_url_params(e);b.download_URI(t,"inactive_hosts."+n.value.value),a("download"),c()}_n((()=>{n.value=s[0]}));const c=()=>{o.value.close()};return t({show:()=>{o.value.show()},close:c}),(e,t)=>(Ps(),Ls(sp,{ref_key:"modal_id",ref:o},{title:ml((()=>[Ks(te(l("download")),1)])),body:ml((()=>[Ks(te(l("download_format"))+" ",1),Vs("div",bP,[Hs(n_,{selected_option:n.value,"onUpdate:selected_option":t[0]||(t[0]=e=>n.value=e),options:s,onSelect_option:i},null,8,["selected_option"])])])),footer:ml((()=>[Vs("button",{type:"button",onClick:r,class:"btn btn-primary"},te(l("download")),1)])),_:1},512))},__file:"http_src/vue/modal-download-inactive-host.vue"};const wP={class:"row"},xP={class:"col-md-12 col-lg-12"},kP={class:"card card-shadow"},$P={class:"card-body"},SP={key:"1",class:"row mb-4 mt-4",id:"host_details_traffic"},NP={class:"col-4"},CP={class:"widget-name"},AP=["title"],EP=["onClick","title"],TP={class:"card-footer mt-3"},PP=Vs("i",{class:"fas fa-trash"},null,-1),UP=Vs("i",{class:"fas fa-trash"},null,-1),IP=[Vs("i",{class:"fas fa-download"},null,-1)];var OP={__name:"page-inactive-hosts",props:{ifid:Number,csrf:String,show_historical:Boolean},setup(e){const t=e,a=e=>i18n(e),l=va("inactive_hosts");va(a("local_hosts_only"));const n=va([]),s=va([]),o=va(),i=va(),r=va(),c=va(),u=va(),d=va(),_=va(),p=va(!1),f=va();va();const v="change_applications_tab_event",m=va({csrf:t.csrf,ifid:t.ifid}),h=[{ref:u,title:i18n("active_inactive"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/inactive/active_inactive.lua`,id:"active_inactive_distro"},{ref:d,title:i18n("inactivity_period"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/inactive/inactivity_period.lua`,id:"inactivity_period"},{ref:_,title:i18n("manufacturer"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/inactive/inactive_manufacturer.lua`,id:"inactive_manufacturer"}],g=va([{title:i18n("table_view"),active:0==p.value,id:"table"},{title:i18n("chart_view"),active:1==p.value,id:"chart"}]);_n((async()=>{ntopng_events_manager.on_custom_event("change_applications_tab_event",v,(e=>{x.set_key_to_url("view",e.id)})),async function(e){n.value=await w("overview"),b()}()}));function b(){n.value.forEach(((e,t)=>{null==e.basic_label&&(e.basic_label=e.label);const a=x.get_url_entry(e.id);null!=a?e.options.forEach((t=>{t.value.toString()===a&&(e.label=`${e.basic_label}: ${t.label||t.value}`)})):e.label=`${e.basic_label}: ${e.options[0].label||e.options[0].value}`}))}async function y(e,t){if(e.show_spinner=!0,await Ja(),0==e.data_loaded){let a=await w(e.id);e.options=a.find((t=>t.id==e.id)).options,await Ja(),s.value[t].load_menu()}e.show_spinner=!1}async function w(e){const t=x.get_url_params(),a=`${http_prefix}/lua/rest/v2/get/host/inactive_filters.lua?action=${e}&${t}`;return(await ntopng_utility.http_request(a)).map((t=>({id:t.action||t.name,label:t.label,title:t.tooltip,data_loaded:"overview"!=e,options:t.value,hidden:1==t.value.length})))}function k(){o.value.refresh_table()}function $(e){p.value=!p.value,g.value.forEach((e=>{e.active=!1,("table"==e.id&&0==p.value||"chart"==e.id&&1==p.value)&&(e.active=!0)})),ntopng_events_manager.emit_custom_event(v,e)}const S=()=>x.get_url_object();function N(e){let t={click_button_historical_flows:P,click_button_delete:C};null!=t[e.event_id]&&t[e.event_id](e)}function C(e){const t=e.row.serial_key;r.value.show(t,i18n("delete_inactive_host",{host:e.row.host.ip_address.value}))}function A(){r.value.show("all",i18n("delete_all_inactive_hosts"))}function E(){c.value.show()}function T(){i.value.show()}function P(e){const t=e.row;let a="";0!=t.vlan&&(a=`@${t.vlan}`),window.location.href=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${t.epoch_begin-100}&epoch_end=${t.epoch_end+100}&ip=${t.ip_address.value||t.ip_address}${a};eq&mac=${t.mac_address.value||t.mac_address};eq`}const U=e=>{let a={mac_address:(e,t)=>{let a=e;return null!=e&&null!=e.url&&null!=e.name&&null!=e.value&&(a=`<a href='${http_prefix}${e.url}' title='${e.value}'>${e.name}</a>`),a},network:(e,t)=>{let a=e;return null!=e.url&&null!=e.name&&null!=e.value&&(a=`<a href='${http_prefix}${e.url}' title='${e.value}'>${e.name}</a>`),a},host:(e,t)=>{let a="";const l=e.ip_address;if(a=`<a href='${http_prefix}${l.url}' title='${l.value}'>${l.name}</a>`,null!=e.vlan&&""!=e.vlan.name){const t=e.vlan;a=null!=t.url?`${a}@<a href='${http_prefix}${t.url||"#"}' title='${t.value}'>${t.name}</a>`:`${a}@${t.name}`}return`${a} ${e.device_type}`}};return e.forEach((e=>{if(e.render_func=a[e.data_field],"actions"==e.id){const a={historical_data:t.show_historical};e.button_def_array.forEach((e=>{a[e.id]||e.class.push("disabled")}))}})),e};return(t,u)=>(Ps(),Ms(Ss,null,[Vs("div",wP,[Vs("div",xP,[Vs("div",kP,[Vs("div",$P,[Hs(ex,{ref_key:"inactive_hosts_tab_list",ref:f,id:"inactive_hosts_tab_list",tab_list:g.value,onClick_item:$},null,8,["tab_list"]),Ys('\n          <div class="card card-shadow">\n            <div class="card-body p-1">\n              <transition name="component-fade" mode="out-in">\n                <div key="1" v-if="show_charts == true" class="row mb-4 mt-4" id="host_details_traffic">\n                  \n                </div>\n              </transition>\n            </div>\n          </div>\n          <div class="text-center" style="cursor: pointer;" @click="change_show_charts">\n            <i v-if="show_charts == false" class="fa-solid fa-angles-down"></i>\n            <i v-else class="fa-solid fa-angles-up"></i>\n          </div>\n          '),Vs("div",null,[1==p.value?(Ps(),Ms("div",SP,[1==p.value?(Ps(),Ms(Ss,{key:0},En(h,(e=>Vs("div",NP,[Vs("h3",CP,te(e.title),1),Hs(A_,{ref_for:!0,ref:e.ref,id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!0},null,8,["id","chart_type","base_url_request"])]))),64)):Ys("v-if",!0)])):(Ps(),Ls(rv,{key:1,ref_key:"table_inactive_hosts",ref:o,table_id:l.value,csrf:e.csrf,f_map_columns:U,get_extra_params_obj:S,onCustom_event:N},{custom_header:ml((()=>[(Ps(!0),Ms(Ss,null,En(n.value,((e,t)=>{return Ps(),Ls(Dd,{f_on_open:(a=e,l=t,e=>{y(a,l)}),ref_for:!0,ref:e=>{s.value[t]=e},hidden:e.hidden},{title:ml((()=>[Hs(cv,{show:e.show_spinner,size:"1rem",class:"me-1"},null,8,["show"]),Vs("a",{class:"ntopng-truncate",title:e.title},te(e.label),9,AP)])),menu:ml((()=>[(Ps(!0),Ms(Ss,null,En(e.options,(a=>(Ps(),Ms("a",{style:{cursor:"pointer",display:"block"},onClick:l=>function(e,t,a,l){t.stopPropagation(),x.set_key_to_url(e.key,`${e.value}`),b(),o.value.refresh_table(),1==p.value&&h.forEach((e=>{e.ref.value[0].update_chart()})),y(a,l)}(a,l,e,t),class:"ntopng-truncate tag-filter",title:a.value},[null==a.count?(Ps(),Ms(Ss,{key:0},[Ks(te(a.label),1)],64)):(Ps(),Ms(Ss,{key:1},[Ks(te(a.label+" ("+a.count+")"),1)],64))],8,EP)))),256))])),_:2},1032,["f_on_open","hidden"]);var a,l})),256)),Ys(" Dropdown filters ")])),_:1},8,["table_id","csrf"]))]),Vs("div",TP,[Vs("button",{type:"button",ref:"delete_all",onClick:A,class:"btn btn-danger me-1"},[PP,Ks(" "+te(a("delete_all_entries")),1)],512),Vs("button",{type:"button",ref:"delete_older",onClick:E,class:"btn btn-danger me-1"},[UP,Ks(" "+te(a("delete_older")),1)],512),Vs("button",{type:"button",ref:"download",onClick:T,class:"btn btn-primary me-1"},IP,512)])])])])]),Hs(vP,{ref_key:"modal_delete",ref:r,context:m.value,onDelete_host:k},null,8,["context"]),Hs(gP,{ref_key:"modal_delete_older",ref:c,context:m.value,onDelete_host:k},null,8,["context"]),Hs(yP,{ref_key:"modal_download",ref:i,context:m.value},null,8,["context"])],64))},__file:"http_src/vue/page-inactive-hosts.vue"};const jP={class:"row"},MP={class:"col-md-12 col-lg-12"},LP={class:"mt-4 card card-shadow"},FP={class:"card-body"};var RP={__name:"page-inactive-host-details",props:{ifid:Number,csrf:String},setup(e){const t=va("inactive_host_details"),a=va([]),l=function(e){return e||""},n=function(e){let t=e.name||"";return e.url&&""!=e.url&&(t=`<a href="${http_prefix}${e.url}">${t}</>`),t};return _n((async()=>{const e=ntopng_url_manager.get_url_object(),t=ntopng_url_manager.obj_to_url_params(e),l=await ntopng_utility.http_request(`${http_prefix}/lua/rest/v2/get/host/inactive_host.lua?${t}`);a.value=l.host_info,$("#navbar_title").html("<i class='fas fa-laptop'></i> "+(e=>i18n(e))("host_details.host")+": "+l.host_name)})),(e,s)=>(Ps(),Ms("div",jP,[Vs("div",MP,[Vs("div",LP,[Vs("div",FP,[Hs(Iw,{horizontal:!0,id:t.value,rows:a.value,print_html_title:l,print_html_row:n},null,8,["id","rows"])])])])]))},__file:"http_src/vue/page-inactive-host-details.vue"};const DP={class:"table table-bordered table-striped"};var zP={__name:"page-flowdevice-config",props:{ifid:Number,csrf:String,flowdev_ip:String},setup(e){const t=e,a=e=>i18n(e),l=va(null),n=va(""),s=va(!0),o=`${http_prefix}/lua/pro/rest/v2/get/flowdevice/alias.lua?flowdev_ip=${t.flowdev_ip}&ifid=${t.ifid}`,i=`${http_prefix}/lua/pro/rest/v2/set/flowdevice/alias.lua`;async function r(){const e=await ntopng_utility.http_request(`${o}`,{method:"get"});l.value.value=e||t.flowdev_ip,n.value=l.value.value}_n((async()=>{r()}));const c=async function(){const e={csrf:t.csrf,flowdev_ip:t.flowdev_ip,alias:l.value.value,ifid:t.ifid};await ntopng_utility.http_request(i,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}),r(),s.value=!0},u=function(){n.value==l.value.value?s.value=!0:s.value=!1};return(e,t)=>(Ps(),Ms(Ss,null,[Vs("table",DP,[Vs("tr",null,[Vs("th",null,te(a("flowdev_alias")),1),Vs("td",null,[Vs("input",{type:"text",ref_key:"custom_name",ref:l,class:"form-control",onInput:u},null,544)])])]),Vs("button",{class:K(["btn btn-primary",[s.value?"disabled":""]]),onClick:c,id:"save"},te(a("save_settings")),3)],64))},__file:"http_src/vue/page-flowdevice-config.vue"};const qP={class:"table table-striped table-bordered col-sm-12"},BP={class:"col-3"},VP={class:"col-9"},HP={class:"d-flex ps-0"},GP={class:"col-3"},WP={class:"col-9"},KP={class:"d-flex ps-0"},JP={class:"d-flex align-items-center me-2"},YP={class:"col-3"},ZP={class:"col-9"},XP={class:"d-flex ps-0"},QP={class:"d-flex align-items-center me-2"};var eU={__name:"page-flowdevice-interface-config",props:{ifid:String,csrf:String,device_ip:String,port_index:String},setup(e){const t=e,a=1e9,l=e=>i18n(e),n=va(null),s=va(""),o=va(null),i=va(""),r=va(null),c=va(""),u=va(!0),d=`${http_prefix}/lua/pro/rest/v2/get/flowdevice/interface/config.lua?device_ip=${t.device_ip}&port_index=${t.port_index}&ifid=${t.ifid}`,_=`${http_prefix}/lua/pro/rest/v2/set/flowdevice/interface/config.lua`;async function p(){const e=await ntopng_utility.http_request(`${d}`,{method:"get"});n.value.value=e.alias,s.value=n.value.value,o.value.value=e.uplink_speed/a,i.value=o.value.value,r.value.value=e.downlink_speed/a,c.value=r.value.value}_n((async()=>{p()}));const f=async function(){const e={ifid:t.ifid,csrf:t.csrf,device_ip:t.device_ip,port_index:t.port_index,alias:n.value.value,uplink_speed:Number(o.value.value)*a,downlink_speed:Number(r.value.value)*a};await ntopng_utility.http_request(_,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}),p(),u.value=!0},v=function(){s.value==n.value.value&&i.value==o.value.value&&c.value==r.value.value?u.value=!0:u.value=!1};return(e,t)=>(Ps(),Ms(Ss,null,[Vs("table",qP,[Vs("tbody",null,[Vs("tr",null,[Vs("th",BP,te(l("interface_alias")),1),Vs("td",VP,[Vs("div",HP,[Vs("input",{type:"text",ref_key:"custom_name",ref:n,class:"form-control",style:{width:"16rem"},onInput:v},null,544)])])]),Vs("tr",null,[Vs("th",GP,te(l("interface_uplink_speed")),1),Vs("td",WP,[Vs("div",KP,[Vs("label",JP,te(l("gbit")),1),Vs("input",{ref_key:"uplink_speed",ref:o,class:"form-control text-end",type:"number",min:"0",step:"0.01",style:{width:"8rem"},onInput:v},null,544)])])]),Vs("tr",null,[Vs("th",YP,te(l("interface_downlink_speed")),1),Vs("td",ZP,[Vs("div",XP,[Vs("label",QP,te(l("gbit")),1),Vs("input",{ref_key:"downlink_speed",ref:r,class:"form-control text-end",type:"number",min:"0",step:"0.001",style:{width:"8rem"},onInput:v},null,544)])])])])]),Vs("button",{class:K(["btn btn-primary d-flex ms-auto",[u.value?"disabled":""]]),onClick:f,id:"save"},te(l("save_settings")),3)],64))},__file:"http_src/vue/page-flowdevice-interface-config.vue"},tU={__name:"modal-delete-scan-confirm",props:{body:String,title:String},emits:["delete","delete_all"],setup(e,{expose:t,emit:a}){const l=va(null),n=va(""),s=va(""),o=va(""),i=va(!0),r=[i18n("note_scan_host")],c=()=>{"delete_all"==o.value?a("delete_all"):"delete_single_row"==o.value||"delete_single_report"==o.value?a("delete"):"scan_all_rows"==o.value?a("scan_all_rows"):"scan_row"==o.value&&a("scan_row"),u()},u=()=>{l.value.close()};t({show:(e,t)=>{i.value=!1,o.value=e,"delete_all"==e?(s.value=i18n("delete_all_entries"),n.value=t):"delete_single_row"==e?(s.value=i18n("delete_vs_host_title"),n.value=t):"scan_all_rows"==e?(s.value=i18n("scan_all_hosts_title"),n.value=t):"scan_row"==e?(i.value=!0,s.value=i18n("scan_host_title"),n.value=t):"delete_single_report"==e&&(s.value=i18n("hosts_stats.page_scan_hosts.reports_page.delete_title"),n.value=i18n("hosts_stats.page_scan_hosts.reports_page.delete_description")),l.value.show()},close:u}),_n((()=>{}));const d=e=>i18n(e);return(e,t)=>(Ps(),Ls(sp,{onShowed:t[0]||(t[0]=e=>{}),ref_key:"modal_id",ref:l},{title:ml((()=>[Ks(te(s.value),1)])),body:ml((()=>[Ks(te(n.value)+" ",1),i.value?(Ps(),Ls(fv,{key:0,note_list:r})):Ys("v-if",!0)])),footer:ml((()=>["delete_all"==o.value||"delete_single_row"==o.value||"delete_single_report"==o.value?(Ps(),Ms("button",{key:0,type:"button",onClick:c,class:"btn btn-danger"},te(d("delete")),1)):(Ps(),Ms("button",{key:1,type:"button",onClick:c,class:"btn btn-primary"},te(d("hosts_stats.page_scan_hosts.schedule_scan")),1))])),_:1},512))},__file:"http_src/vue/modal-delete-scan-confirm.vue"};const aU={class:"form-group ms-2 me-2 mt-3 row"},lU={class:"col-form-label col-sm-4"},nU={class:"col-8"};var sU={__name:"modal-update-periodicity-scan",props:{title:String},emits:["update"],setup(e,{expose:t,emit:a}){const l=va(null),n=va([{id:"disabled",label:i18n("hosts_stats.page_scan_hosts.disabled")},{id:"1day",label:i18n("hosts_stats.page_scan_hosts.every_night")},{id:"1week",label:i18n("hosts_stats.page_scan_hosts.every_week")}]);let s=va(n.value[0]);const o=()=>{a("update",{scan_frequency:s.value.id}),i()},i=()=>{l.value.close()};t({show:e=>{l.value.show()},close:i}),_n((()=>{}));const r=e=>i18n(e);return(t,a)=>(Ps(),Ls(sp,{onShowed:a[1]||(a[1]=e=>{}),ref_key:"modal_id",ref:l},{title:ml((()=>[Ks(te(e.title),1)])),body:ml((()=>[Vs("div",aU,[Vs("label",lU,[Vs("b",null,te(r("hosts_stats.page_scan_hosts.automatic_scan")),1)]),Vs("div",nU,[Hs(n_,{selected_option:ya(s),"onUpdate:selected_option":a[0]||(a[0]=e=>fa(s)?s.value=e:s=e),options:n.value},null,8,["selected_option","options"])])])])),footer:ml((()=>[Vs("button",{type:"button",onClick:o,class:"btn btn-secondary me-4"},te(r("hosts_stats.page_scan_hosts.update_all")),1)])),_:1},512))},__file:"http_src/vue/modal-update-periodicity-scan.vue"};const oU={class:"form-group ms-2 me-2 mt-3 row"},iU={class:"col-form-label col-sm-2"},rU={class:"col-sm-8"},cU=["disabled","placeholder"],uU={class:"col-sm-2"},dU={class:"form-group ms-2 me-2 mt-3 row"},_U={class:"col-form-label col-sm-2"},pU={class:"col-sm-10"},fU=["placeholder"],vU={class:"form-group ms-2 me-2 mt-3 row"},mU={class:"col-form-label col-sm-2"},hU={class:"col-10"},gU={key:0,class:"form-group ms-2 me-2 mt-3 row"},bU={class:"col-form-label col-sm-2"},yU={class:"col-10"},wU={key:1,class:"form-group ms-2 me-2 mt-3 row"},xU={class:"col-form-label col-sm-2"},kU={class:"col-10"},$U={class:"mt-4"},SU={key:0,class:"me-auto text-danger d-inline"},NU=["disabled"],CU=["disabled"];var AU={__name:"modal-add-vs-host",props:{context:Object},emits:["add","edit"],setup(e,{expose:t,emit:l}){const n=e=>i18n(e),s=va(i18n("hosts_stats.page_scan_hosts.add_host")),o=va(i18n("hosts_stats.page_scan_hosts.host_not_resolved")),i=i18n("hosts_stats.page_scan_hosts.host_placeholder"),r=i18n("hosts_stats.page_scan_hosts.ports_placeholder"),c=[n("hosts_stats.page_scan_hosts.notes.note_1"),n("hosts_stats.page_scan_hosts.notes.note_2"),n("hosts_stats.page_scan_hosts.notes.note_3"),n("hosts_stats.page_scan_hosts.notes.note_3_1")],u=[n("hosts_stats.page_scan_hosts.notes.note_1"),n("hosts_stats.page_scan_hosts.notes.note_2"),n("hosts_stats.page_scan_hosts.notes.note_3"),n("hosts_stats.page_scan_hosts.notes.note_3_1"),n("hosts_stats.page_scan_hosts.notes.note_4")],d=va(null),_=va({}),p=va([]),f=va(""),v=va(""),m=va(!1),h=va(!1),g=va([]),b=va([]),y=va(null),w=va(null),x=va(null),k=va(!1),$=va(null),S=va(!0),N=va(!0),C=va(!0),A=va(!1),E=va(!1),T=va([{id:"disabled",label:i18n("hosts_stats.page_scan_hosts.disabled")},{id:"1day",label:i18n("hosts_stats.page_scan_hosts.every_night")},{id:"1week",label:i18n("hosts_stats.page_scan_hosts.every_week")}]),P="32",U=va([{id:"24",label:"/24"},{id:"32",label:"/32"},{id:"128",label:"/128"}]),I=va(U.value[1]),O=va(T.value[0]),j=va(!1),M=va(!1),L=e=>{p.value=e,C.value=p.value.length>0},F=e=>{p.value=p.value.filter((t=>t.id!=e.id)),C.value=p.value.length>0},R=()=>{const e=wp.validateIPv4(w.value),t=wp.validateIPv6(w.value),a=wp.validateHostName(w.value);"ipv4_netscan"==_.value.id?(e&&(A.value=!0,C.value=p.value&&p.value.length>0),C.value=!0):e?(A.value=!0,w.value.endsWith(0)||(I.value=U.value.find((e=>e.id==P)))):t?(I.value=U.value[2],A.value=!0,I.value=U.value.find((e=>"128"==e.id))):a?(A.value=!0,I.value=U.value.find((e=>e.id==P))):A.value=!1},D=()=>{wp.validatePortRange(x.value)||wp.validateCommaSeparatedPortList(x.value)||ZS.isEmptyOrNull(x.value)?S.value=!0:S.value=!1};const z=()=>{q(!0)},q=async e=>{const t=x.value,n=_.value.id,s=!0===e?"edit":"add",i=!0===e?v.value:null;let r=w.value,c=!0;m.value=!0,wp.validateIP(w.value)||(A.value=!1,r=await async function(e){const t=`${http_prefix}/lua/rest/v2/get/host/resolve_host_name.lua`,l=a.buildURL(t,{host:e});return await ntopng_utility.http_request(l)}(w.value),"no_success"===r&&(c=!1,o.value=w.value+" "+i18n("hosts_stats.page_scan_hosts.host_not_resolved"),j.value=!0,setTimeout((()=>{j.value=!1}),4e3)),A.value=!0);let u=[];p.value.forEach((e=>{u.push(e.id)}));const d=u.join(",");m.value=c,c&&l(s,{host:r,scan_type:n,scan_ports:t,cidr:I.value.id,scan_frequency:$?O.value.id:null,scan_id:i,discovered_host_scan_type:d})};return t({show:(e,t)=>{w.value="",x.value="",S.value=!0,N.value=!0,A.value=!1,m.value=!1,k.value=!1,_.value=g.value[0],p.value=[],I.value=U.value[1],v.value=null,h.value=!1,j.value=!1,E.value=!1,C.value=!E.value,s.value=i18n("hosts_stats.page_scan_hosts.add_host"),ZS.isEmptyOrNull(e)||(s.value=i18n("hosts_stats.page_scan_hosts.edit_host_title"),(e=>{if(h.value=!0,w.value=e.host,x.value=e.ports,A.value=!0,S.value=!0,v.value=e.id,_.value=g.value.find((t=>t.id==e.scan_type)),null!=e.discovered_host_scan_type){const t=e.discovered_host_scan_type.split(",");let a,l=[];t.forEach((e=>{a=b.value.find((t=>t.id==e)),l.push(a)})),p.value=l}"ipv4_netscan"==_.value.id?I.value=U.value.find((e=>"24"==e.id)):wp.validateIPv4(e.host)?I.value=U.value.find((e=>e.id==P)):I.value=U.value.find((e=>"128"==e.id)),N.value=!0,$&&(O.value=T.value.find((t=>t.id==e.scan_frequency)))})(e)),ZS.isEmptyOrNull(t)||(w.value=t,A.value=!0),d.value.show()},close:()=>{M.value=!1,d.value.close()},metricsLoaded:async(e,t,a)=>{const l=e.sort(((e,t)=>e.label.localeCompare(t.label)));y.value=t,g.value=l,b.value=l.filter((e=>"ipv4_netscan"!=e.id)),$.value=a,_.value=g.value[0]}}),(e,t)=>(Ps(),Ls(sp,{ref_key:"modal_id",ref:d},{title:ml((()=>[Ks(te(s.value),1)])),body:ml((()=>[Ys(" Target information, here an IP is put "),Vs("div",oU,[Vs("label",iU,[Vs("b",null,te(n("hosts_stats.page_scan_hosts.host_or_network")),1)]),Vs("div",rU,[wn(Vs("input",{"onUpdate:modelValue":t[0]||(t[0]=e=>w.value=e),onInput:R,disabled:h.value,class:"form-control",type:"text",placeholder:ya(i),required:""},null,40,cU),[[ji,w.value]])]),Vs("div",uU,[Hs(n_,{selected_option:I.value,"onUpdate:selected_option":t[1]||(t[1]=e=>I.value=e),disabled:h.value||E.value,options:U.value},null,8,["selected_option","disabled","options"])])]),Vs("div",dU,[Vs("label",_U,[Vs("b",null,te(n("hosts_stats.page_scan_hosts.ports")),1)]),Vs("div",pU,[wn(Vs("input",{"onUpdate:modelValue":t[2]||(t[2]=e=>x.value=e),onFocusout:D,class:K(["form-control",!0===f.value?"ntopng-hide-placeholder":""]),type:"text",placeholder:ya(r),required:""},null,42,fU),[[ji,x.value]])])]),Vs("div",vU,[Vs("label",mU,[Vs("b",null,te(n("hosts_stats.page_scan_hosts.scan_type")),1)]),Vs("div",hU,[Hs(n_,{selected_option:_.value,"onUpdate:selected_option":t[3]||(t[3]=e=>_.value=e),options:g.value,disabled:h.value,onSelect_option:t[4]||(t[4]=e=>{"ipv4_netscan"==_.value.id?(I.value=U.value.find((e=>"24"==e.id)),E.value=!0,C.value=!1):(E.value=!1,C.value=!0)})},null,8,["selected_option","options","disabled"])])]),"ipv4_netscan"==_.value.id?(Ps(),Ms("div",gU,[Vs("label",bU,[Vs("b",null,te(n("hosts_stats.page_scan_hosts.host_discovered_scan_type")),1)]),Vs("div",yU,[Hs(n_,{selected_options:p.value,"onUpdate:selected_options":t[5]||(t[5]=e=>p.value=e),onChange_selected_options:L,onUnselect_option:F,options:b.value,multiple:!0},null,8,["selected_options","options"])])])):Ys("v-if",!0),1==$.value?(Ps(),Ms("div",wU,[Vs("label",xU,[Vs("b",null,te(n("hosts_stats.page_scan_hosts.periodicity")),1)]),Vs("div",kU,[Hs(n_,{selected_option:O.value,"onUpdate:selected_option":t[6]||(t[6]=e=>O.value=e),options:T.value},null,8,["selected_option","options"])])])):Ys("v-if",!0),Vs("div",$U,[0==$.value?(Ps(),Ls(fv,{key:0,note_list:c})):(Ps(),Ls(fv,{key:1,note_list:u}))])])),footer:ml((()=>[j.value?(Ps(),Ms("div",SU,te(o.value),1)):Ys("v-if",!0),Vs("div",null,[Hs(cv,{show:m.value,size:"1rem",class:"me-2"},null,8,["show"]),0==h.value?(Ps(),Ms("button",{key:0,type:"button",onClick:q,class:"btn btn-primary",disabled:!(N.value&&A.value&&S.value&&C.value)},te(n("add")),9,NU)):(Ps(),Ms("button",{key:1,type:"button",onClick:z,class:"btn btn-primary",disabled:!(N.value&&A.value&&S.value&&C.value)},te(n("apply")),9,CU))])])),_:1},512))},__file:"http_src/vue/modal-add-vs-host.vue"};const EU=(e,t)=>1==t.is_ok_last_scan&&null!=t.last_scan&&null!=t.last_scan.time?e:"",TU=(e,t)=>{let a="";if(1==t.is_ok_last_scan&&null!=t.last_scan&&null!=t.last_scan.time){const t=Number(e);let l="";null!=e&&(l=0==t?"green":t<3.9?"grey":t<7?"yellow":"red",0!=t&&(a=`<FONT COLOR=${l}>${e}`))}return a},PU=(e,t,a)=>{if(t&&a.is_down)return"";if(void 0!==e){let t=e;return t=i18n("hosts_stats.page_scan_hosts.scan_type_list."+e),t}},UU=(e,t)=>3==t.is_ok_last_scan?"":void 0!==e&&void 0!==e.time?e.time:void 0!==e?e:i18n("hosts_stats.page_scan_hosts.not_yet"),IU=(e,t)=>3==t.is_ok_last_scan?"":void 0!==t.last_scan&&void 0!==t.last_scan.duration?t.last_scan.duration:i18n("hosts_stats.page_scan_hosts.not_yet"),OU=e=>{let t="";return null==e||"disabled"==e?"":(t="1day"==e?i18n("hosts_stats.page_scan_hosts.daily"):i18n("hosts_stats.page_scan_hosts.weekly"),`<span class="badge bg-secondary" title="${t}">${t}</span>`)},jU=e=>{let t="";return 2==e?(t=i18n("hosts_stats.page_scan_hosts.scheduled"),`<span class="badge bg-dark" title="${t}">${t}</span>`):4==e?(t=i18n("hosts_stats.page_scan_hosts.scanning"),`<span class="badge bg-info" title="${t}">${t}</span>`):3==e||null==e?(t=i18n("hosts_stats.page_scan_hosts.not_scanned"),`<span class="badge bg-primary" title="${t}">${t}</span>`):1==e?(t=i18n("hosts_stats.page_scan_hosts.success"),`<span class="badge bg-success" title="${t}">${t}</span>`):0==e?(t=i18n("hosts_stats.page_scan_hosts.error"),`<span class="badge bg-danger" title="${t}">${t}</span>`):5==e?(t=i18n("hosts_stats.page_scan_hosts.failed"),`<span class="badge bg-warning" title="${t}">${t}</span>`):void 0},MU=e=>{let t="";return null!=e&&e.forEach((e=>{""==t?t=e:t+=`, ${e}`})),t},LU=(e,t,a)=>{let l=null;switch(e){case 4:l=` <span class="badge bg-secondary"><i class="fa-solid fa-ghost" title='${MU(t)}'></i></span></div>`;break;case 3:l=` <span class="badge bg-secondary"><i class="fa-solid fa-filter" title='${MU(a)}'></i></span>`}return l},FU=(e,t)=>{0==e&&0==t.udp_ports&&t.scan_type.contains("udp")&&(e=t.num_open_ports);let a="";if(null==e||e<=0)return a;if(1==t.is_ok_last_scan&&null!=t.last_scan&&null!=t.last_scan.time&&(a=`${e}`,t.host_in_mem)){const e=LU(t.udp_ports_case,t.udp_ports_unused,t.udp_filtered_ports);null!=e&&(a+=e)}return a},RU=(e,t)=>{0==e&&0==t.tcp_ports&&t.scan_type.contains("tcp")&&(e=t.num_open_ports);let a="";if(null==e||e<=0)return a;if(1==t.is_ok_last_scan&&null!=t.last_scan&&null!=t.last_scan.time&&(a=`${e}`,t.host_in_mem)){const e=LU(t.tcp_ports_case,t.tcp_ports_unused,t.tcp_ports_filtered);null!=e&&(a+=e)}return a},DU=(e,t,a,l)=>{let n=e.split(" ")[0].split("/")[0],s=((e,t,a,l)=>{let n="";return null!=a&&a.forEach((t=>{e==Number(t)&&(n="unused")})),""!=n||null!=l&&l.forEach((t=>{e==Number(t)&&(n="filtered")})),n})(Number(n),0,a,l),o=null;switch(s){case"unused":o=` &nbsp;<span class="badge bg-secondary" title='${i18n("hosts_stats.page_scan_hosts.unused_port")}'><i class="fa-solid fa-ghost"></i></span>`;break;case"filtered":o=` &nbsp;<span class="badge bg-primary" title='${i18n("hosts_stats.page_scan_hosts.filtered_port")}'><i class="fa-solid fa-filter"></i></span>`}return o},zU=(e,t,a,l)=>{let n={host:e,scan_type:t,scan_return_result:!0,page:"show_result",scan_date:a,epoch:l};return`${`${http_prefix}/lua/vulnerability_scan.lua`}?${ntopng_url_manager.obj_to_url_params(n)}`},qU=(e,t,a)=>{let l=e,n=5==t.is_ok_last_scan&&null!=t.is_down&&1==t.is_down;if((1==t.is_ok_last_scan||n)&&null!=t.last_scan&&null!=t.last_scan.time){let a=zU(e,t.scan_type,t.last_scan.time.replace(" ","_"),t.last_scan.epoch);"ipv4_netscan"==t.scan_type&&(e+="/24"),l=`<a href="${a}">${e}</a>`,n&&(l=`<a href="${a}">${e} <i class="fas fa-exclamation-triangle" style='color: #B94A48;'></i> </a>`)}return l},BU={class:"row"},VU={class:"col-md-12 col-lg-12"},HU={key:0,class:"alert alert-info alert-dismissable"},GU={class:"card card-shadow"},WU={class:"card-body"},KU={key:0,class:"alert alert-info alert-dismissable"},JU=Vs("span",{class:"spinner-border spinner-border-sm text-info me-1"},null,-1),YU={key:1,class:"alert alert-success alert-dismissable"},ZU=Vs("span",{class:"text-success me-1"},null,-1),XU={key:2,class:"alert alert-danger alert-dismissable"},QU=Vs("span",{class:"text-danger me-1"},null,-1),eI={id:"hosts_to_scan"},tI=[Vs("i",{class:"fas fa-plus"},null,-1)],aI={class:"card-footer mt-3"},lI=Vs("i",{class:"fas fa-trash"},null,-1),nI=Vs("i",{class:"fas fa-clock-rotate-left"},null,-1),sI={class:"card-footer"};var oI={__name:"page-vulnerability-scan",props:{context:Object},setup(e){const t=e,a=e=>i18n(e),l=[i18n("hosts_stats.page_scan_hosts.notes.generic_notes_1").replaceAll("${http_prefix}",`${http_prefix}`)],n=va(i18n("scan_host_inserted")),s=va(i18n("scan_host_already_inserted")),o=va(""),i=va(i18n("hosts_stats.page_scan_hosts.enable_clickhouse")),r=i18n("hosts_stats.page_scan_hosts.delete_host_title"),c=i18n("hosts_stats.page_scan_hosts.delete_host_description"),u=i18n("hosts_stats.page_scan_hosts.update_periodicity_title"),d=`${http_prefix}/lua/rest/v2/add/host/to_scan.lua`,_=`${http_prefix}/lua/rest/v2/edit/host/update_va_scan_period.lua`,p=`${http_prefix}/lua/rest/v2/delete/host/delete_host_to_scan.lua`,f=`${http_prefix}/lua/rest/v2/exec/host/schedule_vulnerability_scan.lua`,v=`${http_prefix}/lua/rest/v2/get/host/vulnerability_scan_type_list.lua`,m=`${http_prefix}/lua/vulnerability_scan.lua`,h=`${http_prefix}/lua/rest/v2/get/host/vulnerability_scan_result.lua`,g=`${http_prefix}/lua/rest/v2/get/host/vulnerability_scan_status.lua`,y=va("hosts_to_scan"),w=va(),k=va(),$=va(),S=va(),N=va(0),C=va(null),A=va({}),E=va({}),T=va(!1),P=va(!1),U=va(!1),I=va(!1),O=va(!1),j={csrf:t.context.csrf},M=va({csrf:t.context.csrf,ifid:t.context.ifid,is_enterprise_l:t.context.is_enterprise_l});let L=[],F=null;function R(){null!=t.context.host&&""!=t.context.host?$.value.show(null,t.context.host):$.value.show()}function D(e){null!=e?w.value.refresh_table(e):w.value.refresh_table(!0)}dn((()=>{F=Promise.all([oe(),ie()])})),_n((async()=>{await F,await $.value.metricsLoaded(L,t.context.ifid,t.context.is_enterprise_l),null!=t.context.host&&$.value.show(null,t.context.host),U.value=!t.context.is_clickhouse_enabled,setInterval(Q,1e4)}));const z=()=>x.get_url_object();function q(e){let t={click_button_edit_host:J,click_button_delete:G,click_button_scan:W,click_button_download:ve,click_button_show_result:me};null!=t[e.event_id]&&t[e.event_id](e)}function B(e,t){return aN.sortByIP(e.host,t.host,1)}function V(e,t){let a=t[e.data.data_field];var l;return"duration"==e.id?a=void 0===t.last_scan?-1:t.last_scan.duration_epoch:"last_scan"==e.id?a=void 0===t.last_scan?0:t.last_scan.epoch:"is_ok_last_scan"==e.id?a=function(e,t){let a="";a=2==e?i18n("hosts_stats.page_scan_hosts.scheduled"):4==e?i18n("hosts_stats.page_scan_hosts.scanning"):3==e||null==e?i18n("hosts_stats.page_scan_hosts.not_scanned"):1==e?i18n("hosts_stats.page_scan_hosts.success"):5==e?i18n("hosts_stats.page_scan_hosts.failed"):i18n("hosts_stats.page_scan_hosts.error");return a+t.id}(a,t):"scan_frequency"==e.id?a="1day"==(l=a)?i18n("hosts_stats.page_scan_hosts.daily"):"1week"==l?i18n("hosts_stats.page_scan_hosts.weekly"):"":"max_score_cve"!=e.id&&"num_vulnerabilities_found"!=e.id&&"tcp_ports"!=e.id&&"udp_ports"!=e.id||1!=t.is_ok_last_scan&&5!=t.is_ok_last_scan&&(a=0),a}function H(e,t,a){if(null!=e){let l=V(e,t),n=V(e,a);if(l==n)return B(t,a);if("host"==e.id)return aN.sortByIP(l,n,e.sort);if("host_name"==e.id)return aN.sortByName(l,n,e.sort);if("num_vulnerabilities_found"==e.id){const t=0;return aN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("tcp_ports"==e.id||"udp_ports"==e.id){const t=0;return aN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("duration"==e.id){const t=-1;return aN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("last_scan"==e.id){const t=0;return aN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("is_ok_last_scan"==e.id)return aN.sortByName(l,n,e.sort);if("max_score_cve"==e.id){const t=0;return aN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}return e.id,aN.sortByName(l,n,e.sort)}return B(t,a)}function G(e){I.value=!1,O.value=!1,ne(),A.value=e.row,k.value.show("delete_single_row",i18n("delete_vs_host"))}function W(e){I.value=!1,O.value=!1,ne(),E.value=e.row;const t=`${i18n("scan_host")}`;k.value.show("scan_row",t)}function J(e){$.value.show(e.row)}function Y(){I.value=!1,O.value=!1,ne(),k.value.show("delete_all",i18n("delete_all_vs_hosts"))}async function Z(e){e.is_edit=!0,await le(e)}function X(){!0===I.value&&(I.value=!1),!0===O.value&&(O.value=!1)}function Q(){ie()}function ee(){N.value=w.value.get_rows_num()}const ae=e=>((e,t,a,l)=>{const n={download:!0,show_result:!0};let s={host:(e,t)=>qU(e,t),scan_type:(e,a)=>PU(e,a,t),last_scan:(e,t)=>UU(e,t),duration:(e,t)=>IU(e,t),scan_frequency:e=>OU(e),is_ok_last_scan:e=>jU(e),max_score_cve:(e,t)=>TU(e,t),tcp_ports:(e,t)=>RU(e,t),udp_ports:(e,t)=>FU(e,t),num_vulnerabilities_found:(e,t)=>EU(e,t)};return e.forEach((e=>{e.render_func=s[e.data_field],"actions"==e.id&&e.button_def_array.forEach((e=>{e.f_map_class=(t,a)=>(t=t.filter((e=>"link-disabled"!=e)),(3==a.is_ok_last_scan||null==a.is_ok_last_scan||null==a.last_scan||null!=a.last_scan&&null==a.last_scan.time)&&n[e.id]&&t.push("link-disabled"),t)}))})),e})(e,L,0,t.context.ifid),le=async function(e){const t=NtopUtils.buildURL(d,{...e}),a=await b.http_post_request(t,j);if($.value.close(),!0===a.rsp)null!=e.cidr?n.value=i18n("scan_host_updated").replace("%{host}",`${e.host}/${e.cidr}`):n.value=i18n("scan_host_updated").replace("%{host}",`${e.host}`),I.value=!0,O.value=!1,setTimeout(X,1e4),D(!1);else{null!=e.cidr?s.value=i18n("scan_host_already_inserted").replace("%{host}",`${e.host}/${e.cidr}`):s.value=i18n("scan_host_already_inserted").replace("%{host}",`${e.host}`);let t="";L.forEach((a=>{a.id==e.scan_type&&(t=a.label)})),s.value=i18n("scan_host_already_inserted").replace("%{scan_type}",`${t}`),O.value=!0,I.value=!1,setTimeout(X,1e4)}!0!==e.is_edit&&D(!1)},ne=function(e){null!=e&&0!=e&&(o.value=i18n("scan_in_progress").replace("total",`${e}`))},se=async function(e){const t=NtopUtils.buildURL(_,{...e});await b.http_post_request(t,j),I.value=!1,O.value=!1,ne(),D(!1)},oe=async function(){const e=NtopUtils.buildURL(v,{...j}),t=await b.http_request(e);L=t.rsp},ie=async function(){const e=NtopUtils.buildURL(g,{...j}),t=await b.http_request(e);I.value=!1,O.value=!1,ne(t.rsp.total_in_progress),null==C.value&&(C.value=t.rsp.total_in_progress);const a=0==t.rsp.total_in_progress&&C.value>0;C.value=t.rsp.total_in_progress,T.value=C.value>0&&!1===P.value,!0===T.value?setTimeout((function(){D(!0)}),2e3):a&&setTimeout((function(){D(!0)}),5e3)},re=function(){k.value.show("scan_all_rows",i18n("scan_all_hosts")),D(!1)},ce=function(){S.value.show()},ue=async function(){const e=E.value;await de(e.host,e.scan_type,e.ports,e.id),D(!0)},de=async function(e,t,a,l){const n=NtopUtils.buildURL(f,{host:e,scan_type:t,scan_single_host:!0,scan_ports:a,scan_id:l});await b.http_post_request(n,j)};async function _e(){const e=NtopUtils.buildURL(f,{scan_single_host:!1});await b.http_post_request(e,j),D(!1)}const pe=async function(){const e=A.value,t=NtopUtils.buildURL(p,{host:e.host,scan_type:e.scan_type,delete_all_scan_hosts:!1,scan_id:e.id});await b.http_post_request(t,j),D(!1)},fe=async function(){const e=NtopUtils.buildURL(p,{delete_all_scan_hosts:!0});await b.http_post_request(e,j),D(!1)};function ve(e){const t={host:e.row.host,scan_type:e.row.scan_type,epoch:e.row.last_scan.epoch},a=x.obj_to_url_params(t),l=`${h}?${a}`;b.download_URI(l)}function me(e){const t=e.row.host,a=e.row.last_scan.time.replace(" ","_"),l={host:t,scan_type:e.row.scan_type,scan_return_result:!0,page:"show_result",epoch:e.row.last_scan.epoch,scan_date:a},n=x.obj_to_url_params(l),s=`${m}?${n}`;x.go_to_url(s)}function he(e){P.value=e}return(e,d)=>(Ps(),Ms(Ss,null,[Vs("div",BU,[Vs("div",VU,[U.value?(Ps(),Ms("div",HU,[Vs("span",null,te(i.value),1)])):Ys("v-if",!0),Vs("div",GU,[Vs("div",WU,[T.value?(Ps(),Ms("div",KU,[JU,Vs("span",null,te(o.value),1)])):Ys("v-if",!0),I.value?(Ps(),Ms("div",YU,[ZU,Vs("span",null,te(n.value),1)])):Ys("v-if",!0),O.value?(Ps(),Ms("div",XU,[QU,Vs("span",null,te(s.value),1)])):Ys("v-if",!0),Vs("div",eI,[Hs(tU,{ref_key:"modal_delete_confirm",ref:k,title:ya(r),body:ya(c),onDelete:pe,onDelete_all:fe,onScan_row:ue,onScan_all_rows:_e},null,8,["title","body"]),Hs(sU,{ref_key:"modal_update_perioditicy_scan",ref:S,title:ya(u),onUpdate:se},null,8,["title"]),Hs(rv,{ref_key:"table_hosts_to_scan",ref:w,table_id:y.value,csrf:M.value.csrf,f_map_columns:ae,get_extra_params_obj:z,f_sort_rows:H,onCustom_event:q,onRows_loaded:ee},{custom_header:ml((()=>[Vs("button",{class:"btn btn-link",type:"button",ref:"add_host",onClick:R},tI,512)])),_:1},8,["table_id","csrf"])])]),Vs("div",aI,[Vs("button",{type:"button",ref:"delete_all",onClick:Y,class:K(["btn btn-danger me-1",{disabled:0==N.value}])},[lI,Ks(" "+te(a("delete_all_entries")),1)],2),Vs("button",{type:"button",ref:"scan_all",onClick:re,class:K(["btn btn-primary me-1",{disabled:0==N.value}])},[nI,Ks(" "+te(a("hosts_stats.page_scan_hosts.schedule_all_scan")),1)],2),t.context.is_enterprise_l?(Ps(),Ms("button",{key:0,type:"button",ref:"update_all",onClick:ce,class:K(["btn btn-secondary me-1",{disabled:0==N.value}])},te(a("hosts_stats.page_scan_hosts.update_periodicity_title")),3)):Ys("v-if",!0)]),Vs("div",sI,[Hs(fv,{note_list:l})])])])]),Hs(AU,{ref_key:"modal_add",ref:$,context:M.value,onAdd:le,onEdit:Z,onCloseModal:d[0]||(d[0]=e=>he(!1)),onOpenModal:d[1]||(d[1]=e=>he(!0)),onHidden:d[2]||(d[2]=e=>he(!1))},null,8,["context"])],64))},__file:"http_src/vue/page-vulnerability-scan.vue"};const iI={class:"row"},rI={class:"col-md-12 col-lg-12"},cI={class:"card card-shadow"},uI=["innerHTML"],dI=["innerHTML"];var _I={__name:"page-host-vs-result",props:{context:Object},setup(e){const t=e,a=`${http_prefix}/lua/rest/v2/get/host/vulnerability_scan_result.lua`;va(null);const l=va(!1),n=va(""),s=va(""),o=va(""),i=va("");return va([]),dn((async()=>{await async function(e,r,c,u){l.value=!0;let d={host:e,scan_type:r,scan_return_result:!0,epoch:u},_=ntopng_url_manager.obj_to_url_params(d),p=`${a}?${_}`,f=await ntopng_utility.http_request(p);n.value=f.rsp,s.value=`<pre>${n.value}</pre>`,"ipv4_netscan"==r&&(e+="/24");const v="true"===t.context.is_in_mem||1==t.context.is_in_mem?`${e} <a href="${http_prefix}/lua/host_details.lua?host=${e}"><i class = "fas fa-laptop"></i></a>`:e;i.value=i18n("hosts_stats.page_scan_hosts.vs_result").replace("%{host}",v),null!=c&&(c=c.replaceAll("_"," ")),i.value=i.value.replace("%{date}",c),o.value=i.value,l.value=!1}(t.context.host,t.context.scan_type,t.context.date,t.context.epoch)})),(e,t)=>(Ps(),Ms("div",iI,[Vs("div",rI,[Vs("div",cI,[Vs("h3",{class:"d-inline-block pt-3 ps-3",innerHTML:o.value},null,8,uI),l.value?(Ps(),Ls(wf,{key:0})):Ys("v-if",!0),Vs("div",{class:K(["card-body",[l.value?"ntopng-gray-out":""]]),innerHTML:s.value},null,10,dI)])])]))},__file:"http_src/vue/page-host-vs-result.vue"};const pI={class:"row"},fI={class:"col-md-12 col-lg-12"},vI={class:"card card-shadow"},mI={class:"card-body"},hI={id:"open_ports"};var gI={__name:"page-open-ports",props:{context:Object},setup(e){const t=e,a=`${http_prefix}/lua/vulnerability_scan.lua`,l=va("open_ports"),n=e=>e,s=va();t.context.csrf;const o=va({csrf:t.context.csrf,ifid:t.context.ifid,is_enterprise_l:t.context.is_enterprise_l}),i=()=>x.get_url_object();function r(e){let t={click_button_show_hosts:f};null!=t[e.event_id]&&t[e.event_id](e)}function c(e,t){let a={title_i18n:"port",data_field:"port",sortable:!0,class:["text-nowrap","text-end"]},l=e[a.data_field],n=t[a.data_field];return l=_(l),n=_(n),l-n}function u(e,t,a){if(null!=e){let l=t[e.data.data_field],n=a[e.data.data_field];return"port"==e.id?(l=_(l),n=_(n),1==e.sort?l-n:n-l):"count_host"==e.id||"cves"==e.id?(l=d(l),n=d(n),l==n?c(t,a):1==e.sort?l-n:n-l):("hosts"==e.id||(null!=l||(l=""),null!=n||(n="")),l==n?c(t,a):1==e.sort?l.localeCompare(n):n.localeCompare(l))}return c(t,a)}function d(e){let t=0;return""===e||null===e||NaN===e||void 0===e?t=0:(e=e.split(",").join(""),t=parseInt(e)),t}function _(e){return""!=e&&null!=e&&NaN!=e&&null!=e||(e=0),e=parseInt(e)}const p=e=>{let t={hosts:(e,t)=>{let l="";const n=e.split(", "),s=n.length;let o=0;for(;o<5&&o<s;){const e=n[o].split("|"),t=e[0],s=e[1],i=e[2].replace(" ","_"),r="true"===e[3],c=e[4];let u="";e.length>5&&(u=e[5]);let d={host:t,scan_type:s,scan_return_result:!0,page:"show_result",epoch:c,scan_date:i},_=x.obj_to_url_params(d),p=`${a}?${_}`;const f=""!=u?0==r?`${u}  <span class="badge bg-secondary">${i18n("ipv6")}</span>`:u:t;l+=""==l?`<a href="${p}">${f}</a>`:`, <a href="${p}">${f}</a>`,o++}return s>5&&(l+="..."),l}};return e.forEach((e=>{e.render_func=t[e.data_field]})),e};async function f(e){let t={port:e.row.port_number},l=x.obj_to_url_params(t),n=`${a}?${l}`;x.go_to_url(n)}return(e,t)=>(Ps(),Ms("div",pI,[Vs("div",fI,[Vs("div",vI,[Vs("div",mI,[Vs("div",hI,[Hs(rv,{ref_key:"table_open_ports",ref:s,table_id:l.value,csrf:o.value.csrf,f_map_columns:p,get_extra_params_obj:i,f_sort_rows:u,f_map_config:n,onCustom_event:r},null,8,["table_id","csrf"])])])])])]))},__file:"http_src/vue/page-open-ports.vue"};const bI={class:"form-group ms-2 me-2 mt-3 row"},yI={class:"col-form-label col-sm-2"},wI={class:"col-sm-10"},xI={class:"form-group ms-2 me-2 mt-3 row"},kI={class:"col-form-label col-sm-2"},$I={class:"col-sm-10"},SI={class:"mt-4"},NI=["disabled"];var CI={__name:"modal-edit-vs-report",props:{context:Object},emits:["add","edit"],setup(e,{expose:t,emit:a}){const l=e=>i18n(e),n=va(i18n("hosts_stats.page_scan_hosts.reports_page.edit_report")),s=va(null),o=va(null),i=va(null),r=va(null),c=va(!1),u=[l("hosts_stats.page_scan_hosts.reports_page.notes.note_1")],d=()=>{const e=r.value.epoch,t=i.value.replaceAll(" ","_");a("edit",{report_title:t,epoch_end:e}),s.value.close()},_=()=>{const e=i.value.split(" ").every((e=>wp.validateSingleWord(e)));c.value=e};return t({show:e=>{o.value="",i.value="",r.value=null,(e=>{r.value=e,o.value=e.report_date,i.value=e.name})(e),s.value.show()},close:()=>{s.value.close()}}),(e,t)=>(Ps(),Ls(sp,{ref_key:"modal_id",ref:s},{title:ml((()=>[Ks(te(n.value),1)])),body:ml((()=>[Ys(" Target information, here an IP is put "),Vs("div",bI,[Vs("label",yI,[Vs("b",null,te(l("hosts_stats.page_scan_hosts.reports_page.date")),1)]),Vs("div",wI,[wn(Vs("input",{"onUpdate:modelValue":t[0]||(t[0]=e=>o.value=e),disabled:!0,class:"form-control",type:"text"},null,512),[[ji,o.value]])])]),Vs("div",xI,[Vs("label",kI,[Vs("b",null,te(l("hosts_stats.page_scan_hosts.reports_page.name")),1)]),Vs("div",$I,[wn(Vs("input",{"onUpdate:modelValue":t[1]||(t[1]=e=>i.value=e),class:"form-control",type:"text",onInput:_,required:""},null,544),[[ji,i.value]])])]),Vs("div",SI,[Hs(fv,{note_list:u})])])),footer:ml((()=>[Vs("div",null,[Vs("button",{type:"button",onClick:d,disabled:!c.value,class:"btn btn-primary"},te(l("apply")),9,NI)])])),_:1},512))},__file:"http_src/vue/modal-edit-vs-report.vue"};const AI={class:"row"},EI={class:"col-md-12 col-lg-12"},TI={class:"card card-shadow"},PI={class:"card-body"},UI={id:"vs_reports"};var II={__name:"page-vulnerability-scan-report",props:{context:Object},setup(e){const t=e,a=e=>i18n(e);i18n("hosts_stats.page_scan_hosts.notes.generic_notes_1").replaceAll("${http_prefix}",`${http_prefix}`);const l=a("hosts_stats.page_scan_hosts.report_page.delete_title"),n=a("hosts_stats.page_scan_hosts.report_page.delete_description"),s=`${http_prefix}/lua/enterprise/vulnerability_scan_report.lua`,o=`${http_prefix}/lua/pro/rest/v2/delete/vs/report.lua`,i=`${http_prefix}/lua/pro/rest/v2/edit/vs/report.lua`,r=va("vs_reports"),c=va(),u=va(),d=va(),_=va(0),p=va({}),f={csrf:t.context.csrf},v=va({csrf:t.context.csrf,ifid:t.context.ifid});function m(){c.value.refresh_table()}const h=()=>x.get_url_object();function g(e){let t={click_button_edit:S,click_button_delete:$};null!=t[e.event_id]&&t[e.event_id](e)}function y(e,t){let a=t[e.data.data_field];return"report_date"==e.data.data_field&&(a=t.epoch),"name"==e.data.data_field&&(a=function(e,t){let a=e;e.startsWith("Report of")&&(a="report_"+t);return a}(t.name,t.epoch)),a}function w(e,t){return aN.sortByNumber(e.epoch,t.epoch,0)}function k(e,t,a){if(null!=e){let l=y(e,t),n=y(e,a);return l==n?w(t,a):"report_date"==e.id||"tcp_ports"==e.id||"udp_ports"==e.id||"cves"==e.id?aN.sortByNumber(l,n,e.sort):"name"==e.id?aN.sortByName(l,n,e.sort):"num_hosts"==e.id?aN.sortByNumber(l,n,e.sort):aN.sortByName(l,n,e.sort)}return w(t,a)}function $(e){p.value=e.row,d.value.show("delete_single_report")}function S(e){u.value.show(e.row)}async function N(e){await C(e)}const C=async function(e){const t=NtopUtils.buildURL(i,{...e});await b.http_post_request(t,f),m()};function A(){_.value=c.value.get_rows_num()}const E=e=>{let t={report_date:(e,t)=>`<a href="${NtopUtils.buildURL(s,{printable:!1,epoch_end:t.epoch,epoch_begin:t.epoch})}">${e}</a>`};return e.forEach((e=>{e.render_func=t[e.data_field]})),e},T=async function(){const e=p.value,t=NtopUtils.buildURL(o,{epoch:e.epoch});await b.http_post_request(t,f),m()};return(e,t)=>(Ps(),Ms(Ss,null,[Vs("div",AI,[Vs("div",EI,[Vs("div",TI,[Vs("div",PI,[Vs("div",UI,[Hs(tU,{ref_key:"modal_delete_confirm",ref:d,title:ya(l),body:ya(n),onDelete:T},null,8,["title","body"]),Hs(rv,{ref_key:"table_vs_reports",ref:c,table_id:r.value,csrf:v.value.csrf,f_map_columns:E,get_extra_params_obj:h,f_sort_rows:k,onCustom_event:g,onRows_loaded:A},null,8,["table_id","csrf"])])])])])]),Hs(CI,{ref_key:"modal_edit",ref:u,context:v.value,onEdit:N},null,8,["context"])],64))},__file:"http_src/vue/page-vulnerability-scan-report.vue"};const OI={class:"card h-100 overflow-hidden"},jI={class:"m-2 mt-0",style:{"margin-bottom":""}},MI={class:"m-2 mb-3"},LI={class:"card-footer"};var FI={__name:"page-snmp-usage",props:{context:Object},setup(e){const t=e,a=[{value:"10_min",label:i18n("show_alerts.presets.10_min"),currently_active:!1},{value:"30_min",label:i18n("show_alerts.presets.30_min"),currently_active:!0},{value:"hour",label:i18n("show_alerts.presets.hour"),currently_active:!1},{value:"2_hours",label:i18n("show_alerts.presets.2_hours"),currently_active:!1},{value:"6_hours",label:i18n("show_alerts.presets.6_hours"),currently_active:!1},{value:"12_hours",label:i18n("show_alerts.presets.12_hours"),currently_active:!1},{value:"day",label:i18n("show_alerts.presets.day"),currently_active:!1},{value:"week",label:i18n("show_alerts.presets.week"),currently_active:!1},{value:"month",label:i18n("show_alerts.presets.month"),currently_active:!1},{value:"year",label:i18n("show_alerts.presets.year"),currently_active:!1},{value:"custom",label:i18n("show_alerts.presets.custom"),currently_active:!1,disabled:!0}],l="Congestion",n=va(null),s=va(null),o=va("snmp_usage"),i=va("snmp_usage_chart"),r=t.context.csrf,c=-1,u=va(null),d=va(ntopChartApex.typeChart.TS_LINE),_=`${http_prefix}/lua/pro/rest/v2/get/snmp/metric/usage_chart.lua`;let p="date_time_picker";const f=[i18n("snmp.chart_congestion_rate_note"),i18n("snmp.chart_congestion_link"),i18n("snmp.chart_congestion_configuration"),i18n("snmp.chart_congestion_rate_color")],m=e=>{const a=v.getFormatter("percentage");let l={ip:(e,t)=>`<a href=${`${http_prefix}/lua/pro/enterprise/snmp_device_details.lua?ip=${e}`}>${e}</a>`,interface:(e,t)=>`<a href=${`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${t.ip}&snmp_port_idx=${t.ifid}`}>${e}</a>`,type:(e,t)=>"uplink"==e?`${i18n("out_usage")} <i class="fa-solid fa-circle-arrow-up" style="color: #C6D9FD"></i>`:`${i18n("in_usage")} <i class="fa-solid fa-circle-arrow-down" style="color: #90EE90"></i>`,speed:(e,t)=>`${v.getFormatter("speed")(e)} <a target="_blank" href='${y(t)}'><i class="fas fa-cog"></i></a>`,min:(e,t)=>a(e),max:(e,t)=>a(e),average:(e,t)=>a(e),last_value:(e,t)=>a(e),congestion_rate:(e,t)=>a(e)};return e.forEach((e=>{if(e.render_func=l[e.data_field],"actions"==e.id){const a={historical_data:t.show_historical};e.button_def_array.forEach((e=>{a[e.id]||e.class.push("disabled")}))}})),e};function h(e,t,a){if(null!=e){const l=t[e.data.data_field],n=a[e.data.data_field];if(l==n)return aN.sortByName(t.device,a.device,e?e.sort:null);if("device_name"==e.id)return aN.sortByName(l,n,e.sort);if("ip"==e.id)return aN.sortByIP(l,n,e.sort);if("interface"==e.id)return aN.sortByName(l,n,e.sort);if("type"==e.id)return aN.sortByName(l,n,e.sort);if("speed"==e.id){const t=-1;return aN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("min"==e.id){const t=-1;return aN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("max"==e.id){const t=-1;return aN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("average"==e.id){const t=-1;return aN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("congestion_rate"==e.id){const t=-1;return aN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("last_value"==e.id){const t=-1;return aN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}}return aN.sortByName(t.device,a.device,e?e.sort:null)}async function g(){if(n.value&&n.value.refresh_table(!1),u.value){const e=await $();u.value.update_chart_series(e?.data)}}const b=()=>ntopng_url_manager.get_url_object();function y(e){return`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${e.ip}&snmp_port_idx=${e.ifid}&page=config`}function w(e){const t=e.row,a=ntopng_url_manager.get_url_entry("epoch_begin"),l=ntopng_url_manager.get_url_entry("epoch_end");window.open(`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${t.ip}&snmp_port_idx=${t.ifid}&page=historical&ifid=-1&epoch_end=${l}&epoch_begin=${a}&timeseries_groups_mode=1_chart_x_metric&timeseries_groups=snmp_interface;-1%2B${t.ip}%2B${t.ifid};snmp_if:usage;uplink=true:false:false:false|downlink=true:false:false:false`)}function x(e){const t=e.row;window.open(y(t))}function k(e){let t={click_button_timeseries:w,click_button_configuration:x};null!=t[e.event_id]&&t[e.event_id](e)}async function $(){let e=null;const t={csrf:r,ifid:c,epoch_begin:ntopng_url_manager.get_url_entry("epoch_begin"),epoch_end:ntopng_url_manager.get_url_entry("epoch_end"),host:ntopng_url_manager.get_url_entry("host")};e=await ntopng_utility.http_post_request(_,t);const a=Oy.formatSimpleSerie(e,l,"bar",["percentage"],[0,100]);return a.title='<div style="font-size:18px;">'+i18n("snmp.top_congested_devices")+"</div>",a.titleHeight=48,a.axes.y.axisLabelWidth=40,a.xAxisHeight=6,a.axes.x.axisLabelWidth=120,a.axes.x.pixelsPerLabel=20,a.xRangePad=50,localStorage.setItem(`${l}_x_axis_label`,JSON.stringify(e.labels)),localStorage.setItem(`${l}_metadata`,JSON.stringify(e.metadata)),a.axes.x.axisLabelFormatter=function(e,t,a,l){return""},a.axes.x.valueFormatter=function(e,t,a,n){if(null!=e){const t=Number(e.toFixed(4)),a=localStorage.getItem(`${l}_x_axis_label`),n=JSON.parse(a)[t-1];return n?`<span style="white-space: pre-wrap">${n}</span>`:""}},a.clickCallback=function(e,t,a){const n=Number(t.toFixed(4)),s=localStorage.getItem(`${l}_metadata`),o=JSON.parse(s)[n-1];o&&w({row:o})},a}return _n((async()=>{await Promise.all([ntopng_sync.on_ready(p)])})),(e,t)=>(Ps(),Ms("div",OI,[Hs(T_,{style:{"margin-top":"0.5rem"},class:"ms-1",id:ya(p),enable_refresh:!1,ref_key:"date_time_picker",ref:s,onEpoch_change:g,custom_time_interval_list:a},null,8,["id"]),Vs("div",jI,[Hs(Eg,{ref_key:"chart",ref:u,id:i.value,chart_type:d.value,base_url_request:_,get_custom_chart_options:$,register_on_status_change:!1,disable_pointer_events:!1},null,8,["id","chart_type"])]),Vs("div",MI,[Hs(rv,{ref_key:"table_snmp_usage",ref:n,table_id:o.value,csrf:ya(r),f_map_columns:m,get_extra_params_obj:b,f_sort_rows:h,onCustom_event:k},null,8,["table_id","csrf"])]),Vs("div",LI,[Hs(fv,{note_list:f})])]))}};np("\n.dygraph-axis-label.dygraph-axis-label-x[data-v-da0f3f1a] {\n    font-size: 12px;\n    transform: rotate(-90deg) translate(-20px, 0);\n}\n"),FI.__scopeId="data-v-da0f3f1a",FI.__file="http_src/vue/page-snmp-usage.vue";const RI={class:"m-2 mb-3"},DI=["title"],zI=["onClick","title"],qI={class:"card-footer"};var BI={__name:"page-snmp-interfaces",props:{context:Object},setup(e){const t=e,a=t.context?.inside_a_device?va("snmp_device_interfaces"):va("snmp_interfaces"),l=va(null),n=t.context.csrf,s=va([]),o=va([]),i=[i18n("snmp.snmp_note_periodic_interfaces_polling"),i18n("snmp.snmp_note_thpt_calc"),i18n("snmp.snmp_note_avg_usage")],r={1:"<font color=green>"+i18n("snmp.status_up")+"</font>",101:"<font color=green>"+i18n("snmp.status_up_in_use")+"</font>",2:"<font color=red>"+i18n("snmp.status_down")+"</font>",3:i18n("snmp.testing"),4:i18n("snmp.status_unknown"),5:i18n("snmp.status_dormant"),6:i18n("status_notpresent"),7:"<font color=red>"+i18n("snmp.status_lowerlayerdown")+"</font>"},c={1:i18n("unknown"),2:"<font color=orange>"+i18n("flow_devices.half_duplex")+"</font>",3:"<font color=green>"+i18n("flow_devices.full_duplex")+"</font>"},u=e=>{v.getFormatter("percentage");let a={device_name:(e,t)=>`<a href=${`${http_prefix}/lua/pro/enterprise/snmp_device_details.lua?ip=${t.device_ip}`}>${e}</a>`,interface_name:(e,t)=>`<a href=${`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${t.device_ip}&snmp_port_idx=${t.interface_id}`}>${e}</a>`,vlan:(e,t)=>{let a="";return""!=t.vlan_name&&(a="["+t.vlan_name+"]"),`${e} ${a}`},admin_status:(e,t)=>`${r[e]||""}`,status:(e,t)=>`${r[e]||""}`,duplex_status:(e,t)=>`${c[e]||""}`,num_macs:(e,t)=>{if(e>0){return`<a href=${`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${t.device_ip}&snmp_port_idx=${t.interface_id}&page=layer_2`}>${e}</a>`}return""},in_bytes:(e,t)=>e>0?v.getFormatter("bytes")(e):"",out_bytes:(e,t)=>e>0?v.getFormatter("bytes")(e):"",in_errors:(e,t)=>e>0?v.getFormatter("full_number")(e):"",in_discards:(e,t)=>e>0?v.getFormatter("full_number")(e):"",throughput:(e,t)=>e>0?v.getFormatter("bps")(e):"",uplink_speed:(e,t)=>`${v.getFormatter("speed")(e)} <a href='${m(t,!0)}'><i class="fas fa-cog"></i></a>`,downlink_speed:(e,t)=>`${v.getFormatter("speed")(e)} <a href='${m(t,!0)}'><i class="fas fa-cog"></i></a>`,last_in_usage:(e,t)=>e>0?v.getFormatter("percentage")(e):"",last_out_usage:(e,t)=>e>0?v.getFormatter("percentage")(e):"",last_change:(e,t)=>t.last_change_string};return e.forEach((e=>{if(e.render_func=a[e.data_field],"actions"==e.id){const a={historical_data:t.show_historical};e.button_def_array.forEach((e=>{a[e.id]||e.class.push("disabled")}))}})),e};function d(e,t){t.stopPropagation(),ntopng_url_manager.set_key_to_url(e.key,`${e.value}`),s.value.forEach(((e,t)=>{null==e.basic_label&&(e.basic_label=e.label);const a=ntopng_url_manager.get_url_entry(e.id);null!=a&&e.options.forEach((t=>{t.value.toString()===a&&(e.label=`${e.basic_label}: ${t.label||t.value}`)}))})),l.value.refresh_table()}const _=(e,t)=>a=>{!async function(e,t){e.show_spinner=!0,await Ja(),e.options=s.value.find((t=>t.id==e.id)).options,await Ja();let a=o.value[t];a.load_menu(),e.show_spinner=!1}(e,t)};function p(e,t,a){if(null!=e){const l=t[e.data.data_field],n=a[e.data.data_field];if(l==n)return aN.sortByName(t.device,a.device,e?e.sort:null);if("device_name"==e.id)return aN.sortByName(l,n,e.sort);if("ip"==e.id)return aN.sortByIP(l,n,e.sort);if("interface"==e.id)return aN.sortByName(l,n,e.sort);if("type"==e.id)return aN.sortByName(l,n,e.sort);if("speed"==e.id){const t=-1;return aN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("min"==e.id){const t=-1;return aN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("max"==e.id){const t=-1;return aN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("average"==e.id){const t=-1;return aN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("congestion_rate"==e.id){const t=-1;return aN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("last_value"==e.id){const t=-1;return aN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}}return aN.sortByName(t.device,a.device,e?e.sort:null)}const f=()=>ntopng_url_manager.get_url_object();function m(e,t){return t?`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${e.device_ip}&snmp_port_idx=${e.interface_id}&page=config`:`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${e.device_ip}&page=config`}function h(e){const t=e.row,a=ntopng_url_manager.get_url_entry("epoch_begin"),l=ntopng_url_manager.get_url_entry("epoch_end");window.open(`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${t.ip}&snmp_port_idx=${t.ifid}&page=historical&ifid=-1&epoch_end=${l}&epoch_begin=${a}&timeseries_groups_mode=1_chart_x_metric&timeseries_groups=snmp_interface;-1%2B${t.ip}%2B${t.ifid};snmp_if:usage;uplink=true:false:false:false|downlink=true:false:false:false`)}function g(e){const t=e.row;window.open(m(t))}function b(e){let t={click_button_timeseries:h,"clicfilter_table_array.valuek_button_configuration":g};null!=t[e.event_id]&&t[e.event_id](e)}return _n((async()=>{s.value=await async function(){let e=f(),t=ntopng_url_manager.obj_to_url_params(e);const a=`${http_prefix}/lua/pro/rest/v2/get/snmp/metric/interfaces_filters.lua?${t}`;return(await ntopng_utility.http_request(a)).map((e=>({id:e.name,label:e.label,title:e.tooltip,options:e.value,hidden:1==e.value.length})))}()})),(e,t)=>(Ps(),Ms(Ss,null,[Vs("div",RI,[Hs(rv,{ref_key:"table_snmp_interfaces",ref:l,table_id:ya(a),csrf:ya(n),f_map_columns:u,get_extra_params_obj:f,f_sort_rows:p,onCustom_event:b},{custom_header:ml((()=>[(Ps(!0),Ms(Ss,null,En(s.value,((e,t)=>(Ps(),Ls(Dd,{f_on_open:_(e,t),ref_for:!0,ref:e=>{o.value[t]=e},hidden:e.hidden},{title:ml((()=>[Hs(cv,{show:e.show_spinner,size:"1rem",class:"me-1"},null,8,["show"]),Vs("a",{class:"ntopng-truncate",title:e.title},te(e.label),9,DI)])),menu:ml((()=>[(Ps(!0),Ms(Ss,null,En(e.options,(e=>(Ps(),Ms("a",{style:{cursor:"pointer",display:"block"},onClick:t=>d(e,t),class:"ntopng-truncate tag-filter",title:e.value},[null==e.count?(Ps(),Ms(Ss,{key:0},[Ks(te(e.label),1)],64)):(Ps(),Ms(Ss,{key:1},[Ks(te(e.label+" ("+e.count+")"),1)],64))],8,zI)))),256))])),_:2},1032,["f_on_open","hidden"])))),256))])),_:1},8,["table_id","csrf"])]),Vs("div",qI,[Hs(fv,{note_list:i})])],64))},__file:"http_src/vue/page-snmp-interfaces.vue"};const VI={class:"row"},HI={class:"col-md-12 col-lg-12"},GI={class:"card card-shadow"},WI={class:"card-body"},KI={class:"card-footer"};var JI={__name:"page-topology",props:{context:Object},setup(e){const t=e,l=e=>i18n(e),n=[l("snmp.snmp_note_periodic_interfaces_polling"),l("snmp.snmp_note_thpt_calc"),l("snmp.snmp_lldp_cdp_descr")],s=va("topology"),o=va(),i=va(0),r=va({csrf:t.context.csrf,ifid:t.context.ifid}),c=()=>x.get_url_object();function u(e,t){let a=t[e.data.data_field];return"port_id"==e.data.data_field?Number(a.split(">")[1].split("<")[0]):a}function d(e,t,a){if(null!=e){let l=u(e,t),n=u(e,a);return"port_id"==e.id||"port_thpt_value"==e.id?aN.sortByNumber(l,n,e.sort):aN.sortByName(l,n,e.sort)}}function _(){i.value=o.value.get_rows_num()}const p=e=>{let t={uplink_speed:(e,t)=>a.bitsToSize(e),downlink_speed:(e,t)=>a.bitsToSize(e),port_thpt_value:(e,t)=>a.bitsToSize(e)};return e.forEach((e=>{e.render_func=t[e.data_field]})),e};return(e,t)=>(Ps(),Ms("div",VI,[Vs("div",HI,[Vs("div",GI,[Vs("div",WI,[Hs(rv,{ref_key:"table_topology",ref:o,table_id:s.value,csrf:r.value.csrf,f_map_columns:p,get_extra_params_obj:c,f_sort_rows:d,onRows_loaded:_},null,8,["table_id","csrf"])]),Vs("div",KI,[Hs(fv,{note_list:n})])])])]))},__file:"http_src/vue/page-topology.vue"};const YI={style:{"min-height":"8.5rem"}},ZI={class:"form-group ms-2 me-2 mt-3 row"},XI={class:"col-form-label col-sm-4"},QI={class:"col-sm-6"},eO=["pattern"],tO=["disabled"];var aO={__name:"modal-file-save",props:{csrf:String,title:String,get_suggested_file_name:Function,store_file:Function,allow_spaces:Boolean},emits:["file_stored"],setup(e,{expose:t,emit:a}){const l=e,n=va(null),s=va("");va("date");let o=NtopUtils.REGEXES.singleword;const i=xo((()=>!new RegExp(o).test(s.value)));const r=async()=>{l.store_file(s.value),a("file_stored",s.value),c()},c=()=>{n.value.close()};t({show:()=>{!async function(){s.value=l.get_suggested_file_name()}(),n.value.show()},close:c}),_n((()=>{o=l.allow_spaces?NtopUtils.REGEXES.multiword:NtopUtils.REGEXES.singleword}));const u=e=>i18n(e);return(t,a)=>(Ps(),Ls(sp,{onShowed:a[1]||(a[1]=e=>{}),ref_key:"modal_id",ref:n},{title:ml((()=>[Ks(te(e.title),1)])),body:ml((()=>[Vs("div",YI,[Vs("div",ZI,[Vs("label",XI,[Vs("b",null,te(u("name"))+":",1)]),Vs("div",QI,[wn(Vs("input",{pattern:ya(o),placeholder:"",required:"",type:"text",class:"form-control","onUpdate:modelValue":a[0]||(a[0]=e=>s.value=e)},null,8,eO),[[ji,s.value]])])])])])),footer:ml((()=>[Vs("button",{type:"button",onClick:r,disabled:ya(i),class:"btn btn-primary"},te(u("save")),9,tO)])),_:1},512))}};np("\ninput[data-v-87fda19e]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-87fda19e] {\n  cursor: not-allowed;\n}\n"),aO.__scopeId="data-v-87fda19e",aO.__file="http_src/vue/modal-file-save.vue";const lO={class:"form-group ms-2 me-2 mt-3 row"},nO={class:"col-form-label col-sm-4"},sO={class:"col-sm-8"},oO={value:"name"},iO={value:"date"},rO={class:"form-group ms-2 me-2 mt-3 row"},cO={class:"col-form-label col-sm-4"},uO={class:"col-sm-8"},dO=["disabled"],_O=["disabled"];var pO={__name:"modal-file-open",props:{csrf:String,title:String,file_title:String,list_files:Function,open_file:Function,delete_file:Function},emits:["file_deleted"],setup(e,{expose:t,emit:a}){const l=e,n=va(null),s=va({}),o=va(""),i=va([]),r=va("date");NtopUtils.REGEXES.singleword;const c=xo((()=>""==s.value));function u(){i.value=i.value.sort(((e,t)=>"name"==r.value?e.name.localeCompare(t.name):t.epoch-e.epoch)),i.value.length>0&&(s.value=i.value[0])}const d=()=>{p(),l.open_file(s.value.name)},_=async e=>{let t=s.value.name;1==e&&(t="*"),l.delete_file(t)&&a("file_deleted",t),p()},p=()=>{n.value.close()};t({show:()=>{!async function(){o.value="",i.value=await l.list_files(),i.value.forEach((e=>e.label=function(e){let t=1e3*e.epoch,a=ntopng_utility.from_utc_to_server_date_format(t,"DD/MM/YYYY");return`${e.name} (${a})`}(e))),u(),i.value.length>0&&(s.value=i.value[0])}(),n.value.show()},close:p}),_n((()=>{}));const f=e=>i18n(e);return(t,a)=>(Ps(),Ls(sp,{onShowed:a[4]||(a[4]=e=>{}),ref_key:"modal_id",ref:n},{title:ml((()=>[Ks(te(e.title),1)])),body:ml((()=>[Vs("div",lO,[Vs("label",nO,[Vs("b",null,te(f("order_by")),1)]),Vs("div",sO,[wn(Vs("select",{class:"form-select",onChange:a[0]||(a[0]=e=>u()),"onUpdate:modelValue":a[1]||(a[1]=e=>r.value=e)},[Vs("option",oO,te(f("name")),1),Vs("option",iO,te(f("date")),1)],544),[[Ri,r.value]])])]),Vs("div",rO,[Vs("label",cO,[Vs("b",null,te(e.file_title),1)]),Vs("div",uO,[Hs(n_,{selected_option:s.value,"onUpdate:selected_option":a[2]||(a[2]=e=>s.value=e),options:i.value},null,8,["selected_option","options"])])])])),footer:ml((()=>[Vs("button",{onClick:a[3]||(a[3]=e=>_(!0)),type:"button",style:{"text-align":"left","margin-left":"0px"},class:"btn btn-danger start-0 position-absolute ms-3"},te(f("delete_all_entries")),1),Vs("button",{type:"button",onClick:_,disabled:ya(c),class:"btn btn-danger"},te(f("delete")),9,dO),Vs("button",{type:"button",onClick:d,disabled:ya(c),class:"btn btn-primary"},te(f("open")),9,_O)])),_:1},512))}};np("\ninput[data-v-1976657e]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-1976657e] {\n  cursor: not-allowed;\n}\n"),pO.__scopeId="data-v-1976657e",pO.__file="http_src/vue/modal-file-open.vue";const fO=e=>(pl("data-v-9db8ba96"),e=e(),fl(),e),vO={class:"form-group ms-2 me-2 mt-3 row"},mO={class:"col-form-label col-sm-4"},hO={class:"col-sm-8"},gO=fO((()=>Vs("span",null," ",-1))),bO=["disabled"];var yO={__name:"modal-file-upload",props:{csrf:String,title:String,file_title:String,upload_file:Function},emits:["file_uploaded"],setup(e,{expose:t,emit:a}){const l=e,n=va(null),s=va(""),o=va(""),i=va(null);function r(){i.value.click()}function c(e){const t=e.target.files;o.value=t[0].name;const l=new FileReader;l.addEventListener("load",(()=>{s.value=l.result})),l.readAsText(t[0]),a("file_uploaded",o.value)}const u=()=>{d(),l.upload_file(s.value)},d=()=>{n.value.close()};t({show:()=>{!async function(){o.value="",s.value=""}(),n.value.show()},close:d}),_n((()=>{}));const _=e=>i18n(e);return(t,a)=>(Ps(),Ls(sp,{onShowed:a[0]||(a[0]=e=>{}),ref_key:"modal_id",ref:n},{title:ml((()=>[Ks(te(e.title),1)])),body:ml((()=>[Vs("div",vO,[Vs("label",mO,[Vs("b",null,te(e.file_title),1)]),Vs("div",hO,[Vs("button",{type:"button",onClick:r,class:"btn btn-primary"},te(_("upload")),1),gO,wn(Vs("small",null,"No file selected",512),[[Yi,!s.value]]),wn(Vs("small",null,te(o.value),513),[[Yi,o.value]]),Vs("input",{ref_key:"file_input",ref:i,type:"file",accept:"application/JSON",onChange:c,style:{display:"none"}},null,544)])])])),footer:ml((()=>[Vs("button",{type:"button",onClick:u,disabled:!s.value,class:"btn btn-primary"},te(_("open")),9,bO)])),_:1},512))}};np("\ninput[data-v-9db8ba96]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-9db8ba96] {\n  cursor: not-allowed;\n}\n"),yO.__scopeId="data-v-9db8ba96",yO.__file="http_src/vue/modal-file-upload.vue";const wO={class:"form-group ms-2 me-2 mt-3 row",style:{"overflow-y":"scroll",height:"45vh"}},xO=["onClick"],kO={class:"card-body"},$O={class:"form-group wizard-form-group"},SO={class:"form-text text-muted"};var NO={__name:"modal-select-component",props:{csrf:String,title:String,list_components:Function,add_component:Function},emits:[],setup(e,{expose:t,emit:a}){const l=e,n=va(null),s=va({}),o=va([]);va("date");function i(e){switch(e){case"pie":return"fa-solid fa-chart-pie";case"table":return"fa-solid fa-table";case"timeseries":return"fa-solid fa-chart-line";default:return""}}const r=()=>{n.value.close()};t({show:()=>{!async function(){o.value=await l.list_components(),o.value.length>0&&(s.value=o.value[0])}(),n.value.show()},close:r}),_n((()=>{}));const c=e=>i18n(e);return(t,a)=>(Ps(),Ls(sp,{onShowed:a[0]||(a[0]=e=>{}),ref_key:"modal_id",ref:n},{title:ml((()=>[Ks(te(e.title),1)])),body:ml((()=>[Vs("div",wO,[(Ps(!0),Ms(Ss,null,En(o.value,(e=>(Ps(),Ms("div",{class:K(["card w-100 wizard-card",{"wizard-selected":s.value==e}])},[Vs("a",{class:"wizard-link",href:"#",onClick:t=>{s.value=e,r(),l.add_component(s.value)}},[Vs("div",kO,[Vs("div",$O,[Vs("h5",null,[Vs("i",{class:K(i(e.component))},null,2),Ks(" "+te(c(e.i18n_name)),1)]),Vs("small",SO,te(c(e.i18n_descr)),1)])])],8,xO)],2)))),256))])])),footer:ml((()=>[])),_:1},512))}};np("\ninput[data-v-16713f39]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-16713f39] {\n  cursor: not-allowed;\n}\n"),NO.__scopeId="data-v-16713f39",NO.__file="http_src/vue/modal-select-component.vue";const CO={class:"form-group ms-2 me-2 mt-3 row"},AO={class:"col-sm-2 mt-2"},EO={class:"col-sm-10"},TO={class:"form-group ms-2 me-2 mt-4 row"},PO={class:"col-sm-2 mt-3"},UO={class:"col-sm-6 mt-2"},IO={class:"range"},OO={class:"sliderticks"},jO={class:"form-group ms-2 me-2 mt-3 row"},MO={class:"col-sm-2 mt-2"},LO={class:"col-sm-9 mt-2"},FO={class:"range"},RO={class:"sliderticks"},DO={key:0,class:"form-group ms-2 me-2 mt-3 row"},zO={class:"col-sm-2 mt-2"},qO={class:"col-sm-5"},BO={class:"form-group ms-2 me-2 mt-3 row"},VO={class:"col-sm-2 mt-2"},HO={class:"col-sm-5"},GO={class:"ms-2 mb-3 mt-4 row"},WO={class:"col-form-label col-sm-3 pe-0",id:"advanced-view"},KO={class:"col-sm-2 ps-0"},JO={class:"form-check form-switch mt-2",id:"advanced-view"},YO={key:1,class:"form-group ms-2 me-2 mt-3 row"},ZO={class:"col-sm-12"},XO={key:0,style:{color:"rgba(255, 0, 0, 0.797)"}},QO=["disabled"];var ej={__name:"modal-edit-component",props:{csrf:String},emits:["edit"],setup(e,{expose:t,emit:a}){const l=e=>i18n(e),n=va(i18n("dashboard.edit_component")),s=va(null),o=[{id:1,size_component_value:4},{id:2,size_component_value:6},{id:3,size_component_value:12},{id:4,size_component_value:-1}],i=va([{value:"current",label:l("dashboard.current_time"),default:!0},{value:"5_min",label:l("dashboard.time_window_list.5_min")},{value:"30_min",label:l("dashboard.time_window_list.30_min")},{value:"hour",label:l("dashboard.time_window_list.hour")},{value:"2_hours",label:l("dashboard.time_window_list.2_hours")},{value:"12_hours",label:l("dashboard.time_window_list.12_hours")},{value:"day",label:l("dashboard.time_window_list.day")},{value:"week",label:l("dashboard.time_window_list.week")},{value:"month",label:l("dashboard.time_window_list.month")},{value:"year",label:l("dashboard.time_window_list.year")}]),r=va([{value:"current",label:l("dashboard.current_time"),default:!0},{value:"hour",label:l("dashboard.time_offset_list.hour")},{value:"day",label:l("dashboard.time_offset_list.day")},{value:"week",label:l("dashboard.time_offset_list.week")},{value:"month",label:l("dashboard.time_offset_list.month")},{value:"year",label:l("dashboard.time_offset_list.year")}]),c=va(null),u=va(null),d=va(null),_=va(null),p=va(null),f=va(null),v=va(null),m=va(!1),h=va(!1),g=va(!1),b=function(){m.value=!m.value},y=function(){h.value=!1;try{p.value=JSON.stringify(JSON.parse(p.value),null,2)}catch(e){h.value=!0}return p.value},w=function(e,t){return ZS.isEmptyOrNull(e)?t.find((e=>e.default)):t.find((t=>t.value==e))},x=function(e){c.value=null,h.value=!1,g.value=e,u.value="",_.value=1,d.value=1},k=e=>{c.value=e,u.value=e.custom_name,d.value=S(e.width),_.value=S(e.height),f.value=w(e.time_window,i.value),v.value=w(e.time_offset,r.value),p.value=JSON.stringify(e.params,null,2)},$=e=>o.find((t=>t.id==Number(e))).size_component_value,S=e=>o.find((t=>t.size_component_value==Number(e))).id,N=()=>{const e=$(d.value),t=$(_.value),l=`${p.value}`;a("edit",{id:c.value.id,title:u.value,height:t,width:e,time_offset:v.value.value,time_window:f.value.value,rest_params:l}),s.value.close()};return t({show:(e,t)=>{x(t),k(e),s.value.show()}}),(e,t)=>(Ps(),Ls(sp,{ref_key:"modal_id",ref:s},{title:ml((()=>[Ks(te(n.value),1)])),body:ml((()=>[Ys(" Title "),Vs("div",CO,[Vs("label",AO,[Vs("b",null,te(l("dashboard.component_title")),1)]),Vs("div",EO,[wn(Vs("input",{"onUpdate:modelValue":t[0]||(t[0]=e=>u.value=e),class:"form-control",type:"text",required:""},null,512),[[ji,u.value]])])]),Ys(" Width "),Vs("div",TO,[Vs("label",PO,[Vs("b",null,te(l("dashboard.component_width")),1)]),Vs("div",UO,[Vs("div",IO,[wn(Vs("input",{type:"range",id:"slider","onUpdate:modelValue":t[1]||(t[1]=e=>d.value=e),style:{width:"100%"},min:"1",max:"3",step:"1"},null,512),[[ji,d.value]]),Vs("div",OO,[Vs("p",null,te(l("dashboard.component_sizes.small")),1),Vs("p",null,te(l("dashboard.component_sizes.medium")),1),Vs("p",null,te(l("dashboard.component_sizes.large")),1)])])])]),Ys(" Height "),Vs("div",jO,[Vs("label",MO,[Vs("b",null,te(l("dashboard.component_height")),1)]),Vs("div",LO,[Vs("div",FO,[wn(Vs("input",{type:"range",id:"slider","onUpdate:modelValue":t[2]||(t[2]=e=>_.value=e),style:{width:"100%"},min:"1",max:"4",step:"1"},null,512),[[ji,_.value]]),Vs("div",RO,[Vs("p",null,te(l("dashboard.component_sizes.small")),1),Vs("p",null,te(l("dashboard.component_sizes.medium")),1),Vs("p",null,te(l("dashboard.component_sizes.large")),1),Vs("p",null,te(l("dashboard.component_sizes.auto")),1)])])])]),Ys(" Time Window "),g.value?Ys("v-if",!0):(Ps(),Ms("div",DO,[Vs("label",zO,[Vs("b",null,te(l("dashboard.time_window")),1)]),Vs("div",qO,[Hs(n_,{selected_option:f.value,"onUpdate:selected_option":t[3]||(t[3]=e=>f.value=e),options:i.value},null,8,["selected_option","options"])])])),Ys(" Time Offset "),Vs("div",BO,[Vs("label",VO,[Vs("b",null,te(l("dashboard.time_offset")),1)]),Vs("div",HO,[Hs(n_,{selected_option:v.value,"onUpdate:selected_option":t[4]||(t[4]=e=>v.value=e),options:r.value},null,8,["selected_option","options"])])]),Ys(" Advanced Settings "),Vs("div",GO,[Vs("label",WO,[Vs("b",null,te(l("dashboard.advanced_settings")),1)]),Vs("div",KO,[Vs("div",JO,[Vs("input",{name:"show_advanced_settings",class:"form-check-input",type:"checkbox",onInput:b,role:"switch"},null,32)])])]),Ys(" REST Params "),m.value?(Ps(),Ms("div",YO,[Vs("div",ZO,[h.value?(Ps(),Ms("p",XO,te(l("dashboard.component_json_error")),1)):Ys("v-if",!0),wn(Vs("textarea",{class:"highlighted-json","onUpdate:modelValue":t[5]||(t[5]=e=>p.value=e),onFocusout:y,style:{width:"100%",height:"100%"},rows:"16",cols:"10"},null,544),[[ji,p.value]])])])):Ys("v-if",!0)])),footer:ml((()=>[Vs("div",null,[Vs("button",{type:"button",onClick:N,disabled:h.value,class:"btn btn-primary"},te(l("apply")),9,QO)])])),_:1},512))},__file:"http_src/vue/modal-edit-component.vue"};const tj={class:"mb-1 me-3",style:{position:"absolute",bottom:"0px",right:"0px"}};var aj={__name:"dashboard-box",props:{color:String,width:Number,height:Number},setup(e){const t=e,a=xo((()=>`col-${t.width||4}`)),l=xo((()=>{let e="";return t.color&&(e=`bg-${t.color}`),`row-${t.height||4} ${e}`}));return(e,t)=>(Ps(),Ms("div",{class:K([ya(a),"widget-box-main-dashboard"])},[Vs("div",{class:K([ya(l),"widget-box"]),style:{position:"relative"}},[Ys(" title "),Pn(e.$slots,"box_title"),Ys(" content "),Pn(e.$slots,"box_content"),Ys(" footer "),Vs("div",tj,[Pn(e.$slots,"box_footer")])],2)],2))},__file:"http_src/vue/dashboard-box.vue"},lj={__name:"dashboard-empty",props:{id:String,i18n_title:String,ifid:String,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function,filters:Object},setup(e){const t=e;async function a(){}return jl((()=>[t.epoch_begin,t.epoch_end,t.filters]),((e,t)=>{a()}),{flush:"pre",deep:!0}),dn((()=>{a()})),_n((()=>{})),(e,t)=>(Ps(),Ms("div"))},__file:"http_src/vue/dashboard-empty.vue"};const nj={class:"table-responsive",style:{"margin-left":"-1rem","margin-right":"-1rem"}};var sj={__name:"dashboard-table",props:{id:String,i18n_title:String,ifid:String,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function,filters:Object},setup(e){const t=e,l=va("simple_table"),n=va([]),s=xo((()=>{let e=t.params.columns.map((e=>(!e.style&&e.data_type&&("bytes"==e.data_type||"date"==e.data_type?e.style="text-align: right":"count_score"==e.data_type&&(e.style="text-align: center")),{...e})));return e[0].class=(e[0].class?e[0].class+" ":"")+"first-col-width",e}));jl((()=>[t.epoch_begin,t.epoch_end,t.filters]),((e,t)=>{c()}),{flush:"pre",deep:!0}),dn((()=>{c()})),_n((()=>{}));const o=function(e){return e.i18n_name?(e=>i18n(e))(e.i18n_name):""},i={throughput:function(e,t){return"name"==e.id?t.url?`<a href='${t.url}'>${t.name}</a>`:t.name:"throughput"==e.id?t.throughput_type&&"pps"==t.throughput_type?a.fpackets(t[e.id]):t.throughput_type&&"bps"==t.throughput_type?a.bitsToSize(t[e.id]):t.throughput:""},db_search:function(e,t){if("host"==e.data_type)return a.formatHost(t[e.id],t,"cli_ip"==e.id);if("network"==e.data_type)return a.formatNetwork(t[e.id],t);if("asn"==e.data_type)return a.formatASN(t[e.id],t);if("country"==e.data_type)return a.formatCountry(t[e.id],t);if(v.types[e.data_type]){return v.getFormatter(e.data_type)(t[e.id])}return"object"==typeof t[e.id]?a.formatGenericObj(t[e.id],t):t[e.id]},vs_scan_result:function(e,a){return"host"==e.id?qU(a[e.id],a,t.ifid):"last_scan"==e.id?UU(a[e.id],a):"duration"==e.id?IU(a[e.id],a):"scan_frequency"==e.id?OU(a[e.id]):"is_ok_last_scan"==e.id?jU(a[e.id]):"tcp_ports"==e.id?RU(a[e.id],a):"udp_ports"==e.id?FU(a[e.id],a):"scan_type"==e.id?PU(a[e.id],!0,a):"hosts"==e.id?((e,t)=>{const a=e.split(", ");let l="",n=new Map;return a.forEach((e=>{let t=e.split("|");n.set(t.length>5&&null!=t[5]&&""!=t[5]?t[5]:t[0],{scan_type:t[1],ip:t[0],date:t[2].replace(" ","_"),is_ipv4:"true"==t[3],epoch:t[4]})})),n=new Map([...n.entries()].sort()),n.forEach(((e,t)=>{let a=zU(e.ip,e.scan_type,e.date,e.epoch);e.is_ipv4?l+=`<li> <a href="${a}">${t}</a></li>`:l+=`<li> <a href="${a}">${t} <span class="badge bg-secondary">${i18n("ipv6")}</span></a></li>`})),l})(a[e.id]):"cve"==e.id||"cve_list"==e.id?((e,t)=>{let a="",l=0;if(1==t.is_ok_last_scan&&null!=t.last_scan&&null!=t.last_scan.time&&null!=e){let n=new Map;e.forEach((e=>{let t=e.split("|"),a=0;t.length>1&&(a=Number(t[1])),n.set(t[0],a)})),n=new Map([...n.entries()].sort(((e,t)=>t[1]-e[1]))),n.forEach(((e,n)=>{if(!(l<100))return a;{let s="";s=0==e?"bg-success":e<3.9?"bg-secondary":e<7?"bg-warning":"bg-danger";const o=ntopng_utility.get_cve_details_url(n,t.scan_type);a+=`<li  title='${i18n("hosts_stats.page_scan_hosts.report.cves_title")}'>\n                        <a href="${o}"><span class="badge ${s}">${n} </span></a> \n                        (${e})\n                    </li>`,l++}}))}return a})(a[e.id],a):"port"==e.id?((e,t)=>{let a=e;return null!=t.port_label&&t.port_label!=e&&(a+=` (${t.port_label})`),a})(a[e.id],a):"max_score_cve"==e.id?TU(a[e.id],a):"num_vulnerabilities_found"==e.id?EU(a[e.id],a):"tcp_udp_ports_list"==e.id?((e,t,a)=>{let l=new Map;if(1==a.is_ok_last_scan&&null!=a.last_scan&&null!=a.last_scan.time&&null!=e){const t=e.split(",");let n="",s="";t.forEach((e=>{if(null!=e&&""!=e){if(n=e,s=e,a.host_in_mem){const t=DU(e,0,a.tcp_ports_unused,a.tcp_ports_filtered);null!=t&&(n+=t)}n=`<li>${n}</li>`,l.set(e,{port_label:n,port_id:Number(s.split("/")[0])})}})),null!=a.tcp_ports_filtered&&a.tcp_ports_filtered.forEach((e=>{n=e+="/tcp",s=e,a.host_in_mem&&(n+=` <span class="badge bg-primary" title='${i18n("hosts_stats.page_scan_hosts.filtered_port")}'><i class="fa-solid fa-filter"></i></span>`),n=`<li>${n}</li>`,l.set(e,{port_label:n,port_id:Number(s.split("/")[0])})}))}if(1==a.is_ok_last_scan&&null!=a.last_scan&&null!=a.last_scan.time&&null!=t){const e=t.split(",");let n="",s="";e.forEach((e=>{if(null!=e&&""!=e){if(n=e,s=e,a.host_in_mem){const t=DU(e,0,a.udp_ports_unused,a.udp_ports_filtered);null!=t&&(n+=t)}n=`<li>${n}</li>`,l.set(e,{port_label:n,port_id:Number(s.split("/")[0])})}})),null!=a.udp_filtered_ports&&a.udp_ports_filtered.forEach((e=>{n=e+="/udp",s=e,a.host_in_mem&&(n+=` <span class="badge bg-primary" title='${i18n("hosts_stats.page_scan_hosts.filtered_port")}'><i class="fa-solid fa-filter"></i></span>`),n=`<li>${e}</li>`,l.set(e,{port_label:n,port_id:Number(s.split("/")[0])})}))}let n="";return l=new Map([...l.entries()].sort(((e,t)=>e[1].port_id-t[1].port_id))),l.forEach(((e,t)=>{n+=`${e.port_label}`})),n})(a.tcp_ports_list,a.udp_ports_list,a):"discovered_hosts"==e.id?(e=>{const t=e.split(",");let a="";return t.forEach((e=>{""!=e&&(a+=`<li>${e}</li>`)})),a})(a[e.id]):a[e.id]}},r=function(e,a){if(t.params&&t.params.table_type&&i[t.params.table_type]){return(0,i[t.params.table_type])(e,a)}return a[e.id]?a[e.id]:""};async function c(){const e={ifid:t.ifid,epoch_begin:t.epoch_begin,epoch_end:t.epoch_end,...t.params.url_params,...t.filters},a=ntopng_url_manager.obj_to_url_params(e);let l=await t.get_component_data(`${http_prefix}${t.params.url}`,a),s=[];if(s="db_search"==t.params.table_type?l.records:l,"vs_scan_result"!=t.params.table_type){const e=t.max_height?t.max_height/4*6:6;s=s.slice(0,e)}n.value=s}return(e,t)=>(Ps(),Ms("div",nj,[Hs(Iw,{id:l.value,columns:ya(s),rows:n.value,print_html_column:o,print_html_row:r,wrap_columns:!0},null,8,["id","columns","rows"])]))}};np("\n.first-col-width {\n    /* max-width: 100% !important; */\n}\n@media print and (max-width: 210mm) {\ntd.first-col-width {\n\tmax-width: 55mm !important;\n}\n}\n@media print and (min-width: 211mm) {\ntd.first-col-width {\n\tmax-width: 95mm !important;\n}\n}\n\n/* @media print and (max-width: 148mm){ */\n/* } */\n\n"),sj.__file="http_src/vue/dashboard-table.vue";const oj={class:"d-flex align-items-center justify-content-between"},ij=["href"],rj={class:"fw-normal text-white"},cj={class:"subtitle text-white text-sm text mb-0 h5"},uj={class:"flex-shrink-0 ms-3"};var dj={__name:"dashboard-badge",props:{id:String,i18n_title:String,ifid:String,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function,set_component_attr:Function,filters:Object},setup(e){const t=e,a=e=>i18n(e),l=va(""),n=va(""),s=va(""),o=va("#");async function i(){if(t.params.url){const e={ifid:t.ifid,epoch_begin:t.epoch_begin,epoch_end:t.epoch_end,...t.params.url_params,...t.filters},a=ntopng_url_manager.obj_to_url_params(e);let n=await t.get_component_data(`${http_prefix}${t.params.url}`,a),s=n[t.params.counter_path],i=n[t.params.counter_formatter];i||(i="number");let r=v.getFormatter(i);if(l.value=r(s),s&&t.set_component_attr("active",!0),t.params.link){const e={ifid:t.ifid,epoch_begin:t.epoch_begin,epoch_end:t.epoch_end,...t.params.link.url_params},a=ntopng_url_manager.obj_to_url_params(e);o.value=`${http_prefix}${t.params.link.url}?${a}`}}}return jl((()=>[t.epoch_begin,t.epoch_end,t.filters]),((e,t)=>{i()}),{flush:"pre",deep:!0}),dn((()=>{!function(){t.params.i18n_name&&(n.value=a(t.params.i18n_name));t.params.icon&&(s.value=t.params.icon+" fa-2xl");i()}()})),_n((()=>{})),(e,t)=>(Ps(),Ms("div",oj,[Vs("div",null,[Vs("a",{href:o.value},[Vs("h4",rj,te(l.value),1),Vs("p",cj,te(n.value),1)],8,ij)]),Vs("div",uj,[Vs("i",{class:K(["text-white",s.value])},null,2)])]))},__file:"http_src/vue/dashboard-badge.vue"},_j={__name:"dashboard-pie",props:{id:String,i18n_title:String,ifid:String,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function,filters:Object},setup(e){const t=e,a=va(ntopChartApex.typeChart.DONUT),l=va(null),n=xo((()=>`${http_prefix}${t.params.url}`)),s=()=>{const e={ifid:t.ifid,epoch_begin:t.epoch_begin,epoch_end:t.epoch_end,new_charts:!0,...t.params.url_params,...t.filters};let a=ntopng_url_manager.obj_to_url_params(e);return a=a.replaceAll("%24IFID%24",t.ifid),a};function o(){const e=n.value,a=s();return t.get_component_data(e,a)}return jl((()=>[t.epoch_begin,t.epoch_end,t.filters]),((e,t)=>{!async function(){l.value.update_chart()}()}),{flush:"pre",deep:!0}),dn((()=>{})),_n((()=>{})),(t,s)=>(Ps(),Ms("div",null,[Hs(A_,{ref_key:"chart",ref:l,id:e.id,chart_type:a.value,base_url_request:ya(n),get_custom_chart_options:o,register_on_status_change:!1},null,8,["id","chart_type","base_url_request"])]))},__file:"http_src/vue/dashboard-pie.vue"},pj={__name:"dashboard-timeseries",props:{id:String,i18n_title:String,ifid:String,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function,csrf:String,filters:Object},setup(e){const t=e,a=62.5,l=va(ntopChartApex.typeChart.TS_LINE),n=va(null),s=va([]),o=Oy.getGroupOptionMode("1_chart_x_yaxis"),i=va(null),r=va([]),c=xo((()=>`${http_prefix}${t.params.url}`));function u(e,t){let a={};for(const l in e)e[l].contains("$IFID$")?a[l]=e[l].replace("$IFID$",t):a[l]=e[l];return a}async function d(e){if(r.value.length>0)return;(await ntopng_utility.http_request(`${http_prefix}/lua/rest/v2/get/ntopng/interfaces.lua`)||[]).forEach((t=>{let a=u(e,t.ifid);a.source_def=[t.ifid],r.value.push(a)}))}async function _(e){if(r.value.length>0)return;const a=await ntopng_utility.http_request(`${http_prefix}/lua/pro/rest/v2/get/flowdevices/stats.lua?ifid=${t.ifid}&gui=true`)||[];a&&a.forEach((t=>{if(t){let a=function(e,t){let a={};for(const l in e)e[l].contains("$EXPORTER$")?a[l]=e[l].replace("$EXPORTER$",t):a[l]=e[l];return a}(e,t.probe_ip);a=u(a,t.ifid),a.source_def=[t.ifid,t.probe_ip],r.value.push(a)}}))}async function p(e){if(r.value.length>0)return;const a=await ntopng_utility.http_request(`${http_prefix}/lua/rest/v2/get/network/networks.lua?ifid=${t.ifid}`)||[];a&&a.forEach((a=>{if(a){let l=function(e,t){let a={};for(const l in e)e[l].contains("$NETWORK$")?a[l]=e[l].replace("$NETWORK$",t):a[l]=e[l];return a}(e,a.id);l=u(l,t.ifid),l.source_def=[t.ifid,a.id],r.value.push(l)}}))}async function f(e,a){const l={epoch_begin:t.epoch_begin,epoch_end:t.epoch_end},n=Jb.get_source_type_from_id(t.params?.source_type),s=await Jb.get_source_array_from_value_array(http_prefix,n,a),o=await Jb.get_metric_from_schema(http_prefix,n,s,e,null,l);return Jb.get_ts_group(n,s,o,{past:!1})}async function v(){await async function(){r.value=[];const e=t.params.post_params?.ts_requests;for(const a in e||{})switch(a){case"$ANY_IFID$":await d(e[a]);break;case"$ANY_EXPORTER$":await _(e[a]);break;case"$ANY_NETWORK$":await p(e[a]);break;default:let l=u(e[a],t.ifid);l.source_def=[t.ifid],r.value.push(l)}}(),await async function(){if(0==s.value.length)for(const e of r.value){const t=e?.ts_schema,a=e.source_def;delete e.source_def;const l=await f(t,a);s.value.push(l)}}(),function(){for(const e of r.value)e.source_def&&delete e.source_def}();const e=c.value,a={csrf:t.csrf,ifid:t.ifid,epoch_begin:t.epoch_begin,epoch_end:t.epoch_end,...t.params.post_params,ts_requests:r.value};let l=await t.get_component_data(e,"",a);return l=Oy.tsArrayToOptionsArray(l,s.value,o,""),l[0]&&(l[0].height=i.value),l?.[0]}return jl((()=>[t.epoch_begin,t.epoch_end,t.filters]),((e,t)=>{!async function(){if(n.value){const e=await v();n.value.update_chart_series(e.data)}}()}),{flush:"pre",deep:!0}),dn((async()=>{await async function(){i.value=(t.max_height||4)*a}()})),_n((async()=>{})),(t,a)=>(Ps(),Ms("div",null,[Hs(Eg,{ref_key:"chart",ref:n,id:e.id,chart_type:l.value,base_url_request:ya(c),get_custom_chart_options:v,register_on_status_change:!1,disable_pointer_events:!1},null,8,["id","chart_type","base_url_request"])]))},__file:"http_src/vue/dashboard-timeseries.vue"},fj={__name:"dashboard-sankey",props:{id:String,i18n_title:String,ifid:String,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function,filters:Object},setup(e){const t=e,a=(e=>i18n(e))("ports_analysis.no_data"),l=va(null),n=va({}),s=va(null),o=va(null),i=va(null),r=62.5;jl((()=>[t.epoch_begin,t.epoch_end,t.filters]),((e,t)=>{c()}),{flush:"pre",deep:!0}),dn((()=>{})),_n((()=>{i.value=r*t.max_height,o.value=$(s.value).width(),c()}));const c=function(){!async function(){let e=await async function(){const e=`${http_prefix}${t.params.url}`,a={ifid:t.ifid,epoch_begin:t.epoch_begin,epoch_end:t.epoch_end,sankey_version:3,...t.params.url_params,...t.filters};let n=ntopng_url_manager.obj_to_url_params(a),s=await t.get_component_data(e,n);s=function(e){let t=e=>console.error(`link (source: ${e.source_node_id}, target: ${e.target_node_id}) removed for not existing source/target node`),a=function(e,t){let a={};e.nodes.forEach((e=>a[e.node_id]=!0));let l=e=>null!=a[e.source_node_id]&&null!=a[e.target_node_id],n=function(e,t,a){return e.filter((e=>{const l=t(e);return 0==l&&null!=a&&a(e),l}))}(e.links,l,t);return n}(e,t);return{nodes:e.nodes,links:a}}(s);const o=function(e){let t={},a={};e.nodes.forEach((e=>t[e.node_id]=e));let l=e=>`${e.source_node_id}_${e.label}`;e.links.forEach((e=>{let n=l(e),s=a[n];null==s&&(s={id:n,label:e.label,link:e.optional_info.link,node_links:[]},a[n]=s),s.node_links.push({source:t[e.source_node_id],target:t[e.target_node_id],value:e.value})}));let n=e.nodes.map((e=>e)),s=[];for(let e in a){let t=a[e],l={node_id:t.id,label:t.label,link:t.link};n.push(l),t.node_links.forEach((e=>{s.push({source_node_id:e.source.node_id,target_node_id:l.node_id,label:`${e.source.label} - ${e.target.label}: ${l.label}`,value:e.value}),s.push({source_node_id:l.node_id,target_node_id:e.target.node_id,label:`${e.source.label} - ${e.target.label}: ${l.label}`,value:e.value})}))}let o=n.map(((e,t)=>({index:t,label:e.label,data:e}))),i={};o.forEach(((e,t)=>i[e.data.node_id]=e));let r=s.map((e=>({source:i[e.source_node_id].index,target:i[e.target_node_id].index,value:e.value,label:e.label})));return{nodes:o,links:r}}(s);return o.links.length>0&&o.nodes.length>0?l.value.set_no_data_flag(!1):l.value.set_no_data_flag(!0),o}();n.value=e}()};function u(e){1!=e.is_link_node&&e.link&&ntopng_url_manager.go_to_url(e.link)}return(e,t)=>(Ps(),Ms("div",{ref_key:"body_div",ref:s},[Hs(FS,{ref_key:"sankey_chart",ref:l,width:o.value,height:i.value,no_data_message:ya(a),sankey_data:n.value,onNode_click:u},null,8,["width","height","no_data_message","sankey_data"])],512))},__file:"http_src/vue/dashboard-sankey.vue"};const vj=e=>(pl("data-v-c360f212"),e=e(),fl(),e),mj={class:"row"},hj={class:"me-2"},gj=["title"],bj=[vj((()=>Vs("i",{class:"fa-solid fa-floppy-disk"},null,-1)))],yj=["title"],wj=[vj((()=>Vs("i",{class:"fa-solid fa-folder-open"},null,-1)))],xj=["title"],kj=[vj((()=>Vs("i",{class:"fa-solid fa-file-arrow-down"},null,-1)))],$j=["title"],Sj=[vj((()=>Vs("i",{class:"fa-solid fa-file-arrow-up"},null,-1)))],Nj=["title"],Cj=[vj((()=>Vs("i",{class:"fas fa-print"},null,-1)))],Aj=["title"],Ej=[vj((()=>Vs("i",{class:"fas fa-folder-plus"},null,-1)))],Tj=["title"],Pj=[vj((()=>Vs("i",{class:"fas fa-pen-to-square"},null,-1)))],Uj={class:"btn-group me-auto mt-2 btn-group-sm flex-wrap d-flex"},Ij={class:"me-2"},Oj={class:"ms-1 my-auto me-2 filters-label"},jj={key:0,class:"d-flex align-items-center ms-2"},Mj={class:"me-2"},Lj=vj((()=>Vs("div",null,[Vs("label",{class:"my-auto me-2"})],-1))),Fj={key:1,class:"me-auto mt-2 flex-wrap d-flex"},Rj=["title"],Dj=[vj((()=>Vs("i",{class:"fas fa-square-plus"},null,-1)))],zj=["title"],qj=[vj((()=>Vs("i",{class:"fas fa-trash-can"},null,-1)))],Bj={class:"text-warning",style:{"margin-top":"0.5rem","margin-left":"1rem"}},Vj={key:2,class:"mt-3",style:{"margin-bottom":"-0.5rem",display:"inline"}},Hj={style:{"text-align":"center"}},Gj={key:0},Wj=["title"],Kj=[vj((()=>Vs("i",{class:"fa-solid fa-file-arrow-down"},null,-1)))],Jj=["title"],Yj=[vj((()=>Vs("i",{class:"fa-solid fa-file-arrow-up"},null,-1)))],Zj=["title"],Xj=[vj((()=>Vs("i",{class:"fas fa-print"},null,-1)))],Qj={key:0,class:"col-sm mt-1"},eM={class:"alert alert-warning"},tM={key:1,class:"col-sm mt-1"},aM={class:"alert alert-secondary sm-1 text-center",style:{width:"40%",margin:"auto","margin-top":"5vh","margin-bottom":"5vh"}},lM={class:"alert-heading"},nM={class:"mb-0"},sM={key:0,class:"dashboard-component-title modal-header"},oM={class:"modal-title"},iM={style:{color:"gray"}},rM={key:0,class:"modal-close"},cM={class:"btn-group"},uM=["data-component-id"],dM=["data-component-id"],_M={key:0,style:{color:"lightgray","font-size":"12px"}};var pM={__name:"dashboard",props:{context:Object},setup(e){const t=e,a=e=>i18n(e),l=b.get_timeframes_dict(),n={badge:dj,empty:lj,pie:_j,timeseries:pj,table:sj,sankey:fj},s=va(!0),o=t.context.show_loading||!1,i=t.context.allow_edit||!1,r=va(null),c=va(null),u=va(null),d=va(null),_=va(null),p=va(null),f=va(null),v=va(null),m=va([]),h=va(!1),g=va({}),w=va({}),k=va({}),$=va([]),S=va([]),N=va([]),A=va({}),E=va("");let T={},P=!1,U=!1;const I=va(!1);let O=null;const j=va(null),M=xo((()=>"report"!=t.context.page&&"vs-report"!=t.context.page)),L=xo((()=>"report"==t.context.page&&!U)),F=xo((()=>"vs-report"==t.context.page)),R=xo((()=>!0)),D=xo((()=>1==A.value?.toolbox?.time?.hide)),z=xo((()=>1==A.value.is_open_report||D.value)),q=xo((()=>1==A.value.is_open_report||"vs-report"==t.context.page)),B=xo((()=>{let e="";return A.value.is_open_report?e=`Report: ${A.value.value}`:t.context.title&&(e=t.context.title),e})),H=xo((()=>e=>null==e.params.custom_style||U&&!e.params.custom_print_style?e.params.custom_print_style&&1==U?e.params.custom_print_style:"":e.params.custom_style)),G=xo((()=>e=>we(e.epoch_begin,e.epoch_end)));async function W(e){let a=null;U="true"==x.get_url_entry("printable"),"report"!=t.context.page&&"vs-report"!=t.context.page||("report"==t.context.page?a=b.check_and_set_default_time_interval(void 0,void 0,!0,"min"):"vs-report"==t.context.page&&(a=b.check_and_set_default_time_interval(void 0,void 0,!0)),v.value=a),await async function(e){const a=t.context.template_list_endpoint;let l=await b.http_request(a);if(null==l?.list)return;let n=l.list.map((e=>({value:e.name,label:e.label,disabled:!1,toolbox:e.toolbox,is_open_report:!1,allow_edit:e.allow_edit})));n.sort(((e,t)=>e.label.toUpperCase().localeCompare(t.label.toUpperCase()))),N.value=n;const s=e||x.get_url_entry("report_template")||t.context.template;t.context.template=s,A.value=N.value.find((e=>e.value==s)),null==A.value&&(A.value=N.value[0]);!A.value.allow_edit&&I.value&&Pe()}(e);let l=x.get_url_entry("report_name");null!=l&&""!=l?await fe(l):await ee(a,A.value.value),1==U&&xe(),h.value=!0}dn((async()=>{W()})),_n((async()=>{"dashboard"==t.context.page&&setInterval((()=>{Z()}),J)}));const J=1e4;function Y(e,t){t&&(t+=";eq"),x.set_key_to_url(e,t),m.value.forEach(((a,l)=>{!function(e,t,a){e.filters[t]=a}(a,e,t)}))}function Z(e){e&&(v.value=e),m.value.forEach(((t,a)=>{ae(t,e)}))}function X(){for(const[e,t]of Object.entries(w.value))Y(e,t[0].value),g.value[e]=t[0],le(e)}async function Q(e,a){const l=[];return!a&&`${t.context.report_filters_endpoint}`&&(a=await b.http_request(`${t.context.report_filters_endpoint}`)),e.forEach((async e=>{const t=e?.name||"",n=a.find((e=>e.id==t))?.options;if(n&&n.length>1){let s=i18n("db_search.all."+t);ZS.isEmptyOrNull(s)&&(s=i18n("all")+" "+i18n("db_search."+t)),n.unshift({value:null,label:s}),w.value[t]=n,g.value[t]=n[0],k.value[t]=n,l.push(t);const o=e?.nested||[];o.length>0&&(S.value[t]=await Q(o,a))}})),l}async function ee(e,a){P=!1;let l=`${t.context.template_endpoint}?template=${a}`,s=await b.http_request(l);m.value=s.list.filter((e=>null!=n[e.component])).map(((t,a)=>{let l={filters:{},component_id:`auto_${t.id}_${a}`,...t};return ae(l,e),l})),X(),s.filters&&($.value=await Q(s.filters)),await Ja()}function ae(e,t){const a=l[e.time_window||"5_min"];if(null==t){const e=b.get_utc_seconds();t={epoch_begin:e-a,epoch_end:e}}const n=l[e.time_offset]||0;e.epoch_begin=t.epoch_begin-n,e.epoch_end=t.epoch_end-n}function le(e){const t=S.value[e];t?.forEach((e=>{if($.value.includes(e)){$.value=$.value.filter((t=>t!=e));const t=w.value[e][0];g.value[e]=t,Y(e,t.value)}}))}function ne(e,t){const a=S.value[e];a?.forEach((a=>{const l=w.value[a],n=[];if(t==e){const e=w.value[a][0];g.value[a]=e,Y(a,e.value)}if(l?.forEach((t=>{t.show_only_value!==g.value[e].value&&null!=t.value||n.push(t)})),!$.value.includes(a)){const t=$.value.indexOf(e);$.value.splice(t+1,0,a)}n.length>0?k.value[a]=n:delete k.value[a]}))}function se(){if(!A.value.allow_edit&&I.value&&Pe(),1==U&&xe(),1==A.value.is_open_report)return;T={},ve();const e=y.get_status(!0);let a={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end};1==P&&(a=b.set_default_time_interval(void 0,"min"),C.emit_event(ntopng_events.EPOCH_CHANGE,a,t.context.page)),ee(a,A.value.value)}function oe(){c.value.show()}function ie(){u.value.show()}function re(){d.value.show()}function ce(){let e="report";return"vs-report"==t.context.page?e=t.context.title:v.value&&v.value.epoch_end&&(e+="-"+b.from_utc_to_server_date_format(1e3*v.value.epoch_end,"DD-MM-YYYY")),e}const ue=async e=>{let t=JSON.parse(e);de(t,t.name),x.delete_key_from_url("report_name")};function de(e,a){ve(a);const l={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end};C.emit_event(ntopng_events.EPOCH_CHANGE,l,t.context.page),pe(e)}const _e=async()=>{let e=`${t.context.report_list_endpoint}?ifid=${t.context.ifid}`,a=await b.http_request(e);return b.object_to_array(a)},pe=async e=>{let t={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end},a=e.template,l=e.data,n={};for(let e in l){let t={data:l[e]};n[e]=t}P=!0,T=n,m.value=a,Z(t)},fe=async e=>{let l=`${t.context.report_open_endpoint}?ifid=${t.context.ifid}&report_name=${e}`,n=await b.http_request(l);n?(de(n,e),E.value=""):E.value=a("report.unable_to_open")};function ve(e){if(N.value=N.value.filter((e=>0==e.is_open_report)),null==e)return x.set_key_to_url("report_template",A.value.value),t.context.template=A.value.value,void x.delete_key_from_url("report_name");let l={value:e,label:a("dashboard.custom"),disabled:!1,toolbox:null,is_open_report:!0,allow_edit:!1};N.value.push(l),A.value=l,t.context.template=e,x.set_key_to_url("report_name",A.value.value),x.delete_key_from_url("report_template")}const me=async e=>{let a=!1,l={csrf:t.context.csrf,ifid:t.context.ifid,report_name:e},n=`${t.context.report_delete_endpoint}`;try{let e={"Content-Type":"application/json"};await b.http_request(n,{method:"post",headers:e,body:JSON.stringify(l)}),a=!0}catch(e){console.error(e)}return a},he=async e=>{let t={};for(var a in T)t[a]=await T[a].data;let l={version:"1.0",name:e,template:m.value,data:t};return v.value&&v.value.epoch_begin&&v.value.epoch_end&&(l.epoch_begin=v.value.epoch_begin,l.epoch_end=v.value.epoch_end),JSON.stringify(l)},ge=async e=>{let a=!1,l={csrf:t.context.csrf,ifid:t.context.ifid,report_name:e,content:await he(e)},n=`${t.context.report_store_endpoint}`;try{let e={"Content-Type":"application/json"};await b.http_request(n,{method:"post",headers:e,body:JSON.stringify(l)}),a=!0}catch(e){console.error(e)}return a};async function be(){var e=ce(),t=e+".json",a=await he(e),l=document.createElement("a");l.setAttribute("href","data:text/plain;charset=utf-8,"+encodeURIComponent(a)),l.setAttribute("download",t),l.style.display="none",document.body.appendChild(l),l.click(),document.body.removeChild(l)}function ye(){if(1==U)return window.print(),!1;let e=x.get_url_object();e.printable=!0;const t=x.obj_to_url_params(e);let a=`${window.location.origin}${window.location.pathname}?${t}`;x.open_new_window(a)}function we(e,t){if(1==D.value)return"";const a=1e3*e,l=1e3*t,n=b.from_utc_to_server_date_format(a,"DD/MM/YYYY"),s=b.from_utc_to_server_date_format(a,"HH:mm:ss"),o=b.from_utc_to_server_date_format(l,"DD/MM/YYYY"),i=b.from_utc_to_server_date_format(l,"HH:mm:ss");return`${`${n} ${s}`} - ${n==o?`${i}`:`${o} ${i}`}`}function xe(){const e=y.get_status(!0),t=we(e.epoch_begin,e.epoch_end);let a=`ntopng - Report ${A.value.label} ${t}`;document.title=a}function ke(e){return async(t,a)=>{e[t]=a}}function $e(){j.value.show()}function Se(){return"New Template"}const Ne=async e=>{let a=!1,l={csrf:t.context.csrf,template_name:e},n=`${t.context.template_add_endpoint}`;try{let e={"Content-Type":"application/json"},t=await b.http_request(n,{method:"post",headers:e,body:JSON.stringify(l)});t&&t.template_id&&await W(t.template_id),a=!0}catch(e){console.error(e)}return a};async function Ce(e){let a=m.value.map((e=>e.id)),l={csrf:t.context.csrf,template:A.value.value,components:a.toString()},n=!1,s=`${t.context.template_edit_endpoint}`;try{let e={"Content-Type":"application/json"};await b.http_request(s,{method:"post",headers:e,body:JSON.stringify(l)});n=!0}catch(e){console.error(e)}return n}async function Ae(e){let t=O.toArray().map((e=>m.value.find((t=>t.id==e))));Te(),m.value=t,await Ja(),Ee(),Ce()}function Ee(){if(!O){var e=document.getElementById("drag-zone");O=window.Sortable.create(e,{draggable:".drag-item",dataIdAttr:"id",onUpdate:Ae})}}function Te(){O&&(O.destroy(),O=null)}function Pe(){I.value=!I.value,I.value?Ee():Te()}const Ue=async()=>{let e=`${t.context.template_list_widgets_endpoint}`,l=await b.http_request(e);if(null==l?.list)return{};let n=l.list;return n.sort(((e,t)=>a(e.i18n_name).toUpperCase().localeCompare(a(t.i18n_name).toUpperCase()))),n};function Ie(){_.value.show()}function Oe(){f.value.show()}const je=async e=>{Te();let l=`${t.context.template_component_add_endpoint}`,n={csrf:t.context.csrf,template:t.context.template,component:e.id},s={"Content-Type":"application/json"};try{await b.http_request(l,{method:"post",headers:s,body:JSON.stringify(n)});E.value="",await W(A.value.value)}catch(e){E.value=a("report.unable_to_open")}await Ja(),Ee()};async function Me(e){Te();const t=e.target.dataset.componentId;m.value=m.value.filter((e=>e.id!==t)),await Ja(),Ee(),Ce()}function Le(e){const a=e.target.dataset.componentId,l=m.value.find((e=>e.id===a)),n="report"==t.context.page;p.value.show(l,n)}async function Fe(e){Te();let l=`${t.context.template_component_edit_endpoint}`,n={csrf:t.context.csrf,template:t.context.template,component:e.id,component_title:e.title,component_height:e.height,component_width:e.width,component_time_offset:e.time_offset,component_time_window:e.time_window,component_params:e.rest_params},s={"Content-Type":"application/json"};try{await b.http_request(l,{method:"post",headers:s,body:JSON.stringify(n)});E.value="",await W(A.value.value)}catch(e){E.value=a("report.unable_to_open")}await Ja(),Ee()}async function Re(){let e=!1,a={csrf:t.context.csrf,template:A.value.value},l=`${t.context.template_delete_endpoint}`;try{let t={"Content-Type":"application/json"};await b.http_request(l,{method:"post",headers:t,body:JSON.stringify(a)});await W(),e=!0}catch(e){console.error(e)}return e}return(t,l)=>(Ps(),Ms(Ss,null,[Vs("div",mj,[Ys(' <Dropdown v-for="(t, t_index) in top_table_array" '),Ys('           :ref="el => { top_table_dropdown_array[t_index] = el }"> '),Ys("   <template v-slot:title> "),Ys('     <Spinner :show="t.show_spinner" size="1rem" class="me-1"></Spinner> '),Ys('     <a class="ntopng-truncate" :title="t.title">{{ t.label }}</a> '),Ys("   </template> "),Ys("   <template v-slot:menu> "),Ys('     <a v-for="opt in t.options" style="cursor:pointer; display: block;" '),Ys('        @click="add_top_table_filter(opt, $event)" class="ntopng-truncate tag-filter " '),Ys('        :title="opt.value">{{ opt.label }}</a> '),Ys("   </template>     "),Ys(" </Dropdown> "),ya(L)?(Ps(),Ls(T_,{key:0,class:"dontprint",disabled_date_picker:ya(z),id:"dashboard-date-time-picker",round_time:!0,min_time_interval_id:"min",onEpoch_change:Z},{begin:ml((()=>[Vs("div",hj,[Hs(n_,{selected_option:A.value,"onUpdate:selected_option":l[0]||(l[0]=e=>A.value=e),options:N.value,onSelect_option:se},null,8,["selected_option","options"])])])),extra_buttons:ml((()=>[Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:oe,title:a("dashboard.store")},bj,8,gj),Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:ie,title:a("dashboard.open")},wj,8,yj),Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:be,title:a("download")},kj,8,xj),Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:re,title:a("upload")},Sj,8,$j),Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:ye,title:a("dashboard.print")},Cj,8,Nj),ya(i)?(Ps(),Ms("button",{key:0,class:"btn btn-link btn-sm",type:"button",onClick:$e,title:a("dashboard.new_template")},Ej,8,Aj)):Ys("v-if",!0),ya(i)&&A.value.allow_edit?(Ps(),Ms("button",{key:1,class:K(["btn btn-link btn-sm",I.value?"text-warning":""]),type:"button",onClick:Pe,title:a("dashboard.edit_mode")},Pj,10,Tj)):Ys("v-if",!0)])),_:1},8,["disabled_date_picker"])):Ys("v-if",!0),Ys(" Filters "),Vs("div",Uj,[(Ps(!0),Ms(Ss,null,En($.value,(e=>(Ps(),Ms("div",Ij,[Vs("label",Oj,[Vs("b",null,te(a("db_search."+e)),1)]),Hs(n_,{selected_option:g.value[e],"onUpdate:selected_option":t=>g.value[e]=t,options:k.value[e],style:"width: 50%;",onSelect_option:t=>function(e,t){Y(t,e.value);for(const[e,a]of Object.entries(w.value)){const a=g.value[e];a?.value?ne(e,t):le(e)}}(g.value[e],e)},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256)),Object.keys($.value).length>0?(Ps(),Ms("div",jj,[Vs("div",Mj,[Lj,Vs("button",{type:"button",class:"btn btn-sm btn-primary",onClick:X},te(a("reset")),1)])])):Ys("v-if",!0)]),Ys(" Template Editor Toolbox "),I.value?(Ps(),Ms("div",Fj,[Vs("button",{class:"btn btn-lg btn-link text-warning",type:"button",onClick:Ie,title:a("dashboard.add_component")},Dj,8,Rj),Vs("button",{class:"btn btn-lg btn-link text-warning",type:"button",onClick:Oe,title:a("dashboard.del_template")},qj,8,zj),Vs("h2",Bj,te(a("dashboard.edit_mode")),1),Ys('\n            <div style="margin: auto"></div>\n            <h4><span class="badge bg-warning">{{ _i18n(\'dashboard.edit_mode\') }}</span></h4>\n            ')])):Ys("v-if",!0),Ys(" Report Title and small buttons "),ya(q)?(Ps(),Ms("div",Vj,[Vs("h3",Hj,[Ks(te(ya(B))+" ",1),ya(F)?(Ps(),Ms("span",Gj,[ya(R)?(Ps(),Ms(Ss,{key:0},[Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:be,title:a("download")},Kj,8,Wj),Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:re,title:a("upload")},Yj,8,Jj)],64)):Ys("v-if",!0),Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:ye,title:a("dashboard.print")},Xj,8,Zj)])):Ys("v-if",!0)])])):Ys("v-if",!0),Ys(" Report/Dashboard Content "),(Ps(),Ms("div",{ref_key:"report_box",ref:r,id:"drag-zone",class:"row",key:m.value},[Ys(" Warning Message "),E.value?(Ps(),Ms("div",Qj,[Vs("div",eM,te(E.value),1)])):Ys("v-if",!0),Ys(" Empty template message "),!h.value||m.value.length||I.value?Ys("v-if",!0):(Ps(),Ms("div",tM,[Vs("div",aM,[Vs("h4",lM,te(a("dashboard.empty_template")),1),Vs("p",nM,te(a("dashboard.empty_template_note")),1)])])),Ys(" Rendered Components "),(Ps(!0),Ms(Ss,null,En(m.value,(t=>(Ps(),Ls(aj,{style:{"min-width":"20rem"},color:t.active&&t.color||t.inactive_color,width:t.width,height:t.height,id:t.id,class:"drag-item"},{box_title:ml((()=>[t.i18n_name?(Ps(),Ms("div",sM,[Vs("h4",oM,[Ks(te(t.custom_name?t.custom_name:a(t.i18n_name))+" ",1),Vs("span",iM,te(t.time_offset?a("dashboard."+(ya(M)?"time_ago":"time_offset_list")+"."+t.time_offset):""),1)]),I.value?(Ps(),Ms("div",rM,[Vs("div",cM,[Vs("button",{type:"button",class:"btn-close btn-edit me-1","data-component-id":t.id,onClick:Le},null,8,uM),Vs("button",{type:"button",class:"btn-close","data-component-id":t.id,onClick:Me},null,8,dM)])])):Ys("v-if",!0)])):Ys("v-if",!0)])),box_content:ml((()=>{return[s.value&&ya(o)?(Ps(),Ls(wf,{key:0,styles:"margin-top: 2rem !important;"})):Ys("v-if",!0),Vs("div",{class:K([s.value&&ya(o)?"ntopng-gray-out":""])},[(Ps(),Ls(Sn(n[t.component]),{id:t.id,style:V(ya(H)(t)),epoch_begin:t.epoch_begin,epoch_end:t.epoch_end,i18n_title:t.i18n_name,ifid:t.ifid?t.ifid.toString():e.context.ifid.toString(),max_width:t.width,max_height:t.height,params:t.params,get_component_data:(a=t,async(e,t,l)=>{let n={};if(P)null==a.component_id&&(a.component_id=a.id),T[a.component_id]?n=T[a.component_id]:(console.error("No data for "+a.component_id),n.data={}),s.value=!1;else{T[a.component_id]&&(n=T[a.component_id],n.data&&await n.data);const o=`${e}?${t}`;s.value=!0,n.data=l?b.http_post_request(o,l):b.http_request(o),n.data.then((()=>{s.value=!1})),T[a.component_id]=n}return n.data}),set_component_attr:ke(t),csrf:e.context.csrf,filters:t.filters},null,8,["id","style","epoch_begin","epoch_end","i18n_title","ifid","max_width","max_height","params","get_component_data","set_component_attr","csrf","filters"]))],2)];var a})),box_footer:ml((()=>["empty"!=t.component&&t.i18n_name&&!ya(D)?(Ps(),Ms("span",_M,te(ya(G)(t)),1)):Ys("v-if",!0)])),_:2},1032,["color","width","height","id"])))),256))]))]),Ys(" div row "),Hs(aO,{ref_key:"modal_store_report",ref:c,get_suggested_file_name:ce,store_file:ge,csrf:e.context.csrf,title:a("dashboard.store")},null,8,["csrf","title"]),Hs(pO,{ref_key:"modal_open_report",ref:u,list_files:_e,open_file:fe,delete_file:me,csrf:e.context.csrf,title:a("dashboard.open"),file_title:a("report.report_name")},null,8,["csrf","title","file_title"]),Hs(yO,{ref_key:"modal_upload_report",ref:d,upload_file:ue,title:a("upload"),file_title:a("report.file")},null,8,["title","file_title"]),Hs(aO,{ref_key:"modal_new_template",ref:j,get_suggested_file_name:Se,store_file:Ne,allow_spaces:!0,csrf:e.context.csrf,title:a("dashboard.new_template")},null,8,["csrf","title"]),Hs(NO,{ref_key:"modal_add_template_component",ref:_,list_components:Ue,add_component:je,csrf:e.context.csrf,title:a("dashboard.add_component")},null,8,["csrf","title"]),Hs(ej,{ref_key:"modal_edit_template_component",ref:p,csrf:e.context.csrf,onEdit:Fe},null,8,["csrf"]),Hs(sx,{ref_key:"modal_delete_template",ref:f,title:a("dashboard.del_template"),body:a("dashboard.del_template_confirm"),onDelete:Re},null,8,["title","body"])],64))}};np("\n@media print {\n.dontprint[data-v-c360f212] {\n        display: none;\n}\n.pagebreak-begin[data-v-c360f212] {\n        page-break-before: always;\n}\n.pagebreak-end[data-v-c360f212] {\n        page-break-after: always !important;\n}\n.print-element-class[data-v-c360f212] {\n        page-break-inside: avoid !important;\n        page-break-after: auto\n}\n}\n\n/* @media print and (orientation: portrait) and (max-width: 297mm){ */\n/*     .col-4 { */\n/*         width: 50% !important; */\n/*         flex: 0 0 auto; */\n/*     } */\n/* } */\n@page {\n    /* size: A3 landscape; */\n    /* position:absolute; width:100%; top:0;left:0;right:0;bottom:0; padding:0; margin:-1px; */\n}\n\n/* Print on A4 */\n@media print and (max-width: 297mm) and (min-width: 210mm) {\n\n    /* .row { */\n    /*         padding-left: 0; */\n    /*         padding-right: 0; */\n    /*         margin-left: -10rem; */\n    /*         margin-right: 0; */\n    /* } */\n.col-4[data-v-c360f212] {\n        width: 50% !important;\n        flex: 0 0 auto;\n}\n}\n\n/* Print on A5 (commented out as this is not working on Chrome/Safari) */\n\n/* @media print and (max-width: 148mm){ */\n/*     .col-4 { */\n/*         width: 100% !important; */\n/*         flex: 0 0 auto; */\n/*     } */\n/*     .col-6 { */\n/*         width: 100% !important; */\n/*         flex: 0 0 auto; */\n/*     } */\n/* } */\n.align-center[data-v-c360f212] {}\n"),pM.__scopeId="data-v-c360f212",pM.__file="http_src/vue/dashboard.vue";const fM=e=>(pl("data-v-7e5acce0"),e=e(),fl(),e),vM={class:"mb-3 row"},mM={class:"col-form-label col-sm-4"},hM={class:"col-sm-6"},gM={class:"btn-group btn-group-toggle","data-bs-toggle":"buttons"},bM=fM((()=>Vs("hr",null,null,-1))),yM={class:"host-alert-fields"},wM={class:"mb-3 row"},xM={class:"col-form-label col-sm-4"},kM={class:"col-sm-6"},$M={value:""},SM={value:"0"},NM={disabled:""},CM=["value"],AM={class:"flow-alert-fields"},EM={class:"mb-3 row"},TM={class:"col-form-label col-sm-4"},PM={class:"col-sm-6"},UM={value:""},IM={value:"0"},OM={disabled:""},jM=["value"],MM={key:0,class:"ip-fields"},LM={class:"mb-3 row"},FM={class:"col-form-label col-sm-4"},RM={class:"col-sm-6"},DM=["pattern"],zM={key:1,class:"network-fields"},qM={class:"mb-3 row"},BM={class:"col-form-label col-sm-4"},VM={class:"col-sm-4 pr-0"},HM=["pattern"],GM={class:"col-sm-2 ps-4 pe-0"},WM=fM((()=>Vs("span",{class:"me-2"},"/",-1))),KM={class:"mb-3 row"},JM={class:"col-form-label col-sm-4"},YM={class:"col-sm-6"},ZM={class:"mb-3 row"},XM={class:"col-form-label col-sm-4"},QM={key:0},eL={key:1},tL={class:"col-sm-6"},aL=["pattern"],lL=["pattern"],nL=fM((()=>Vs("hr",{class:"separator mt-5"},null,-1))),sL={class:"form-group row"},oL={class:"col-form-label"},iL={class:"mt-1"},rL=["placeholder"],cL=["disabled"];var uL={__name:"modal-add-check-exclusion",props:{alert_exclusions_page:String,host_alert_types:Array,flow_alert_types:Array},emits:["add"],setup(e,{expose:t,emit:a}){const l=e,n=va(null);va(null);const s=va("ip"),o=va(""),i=va(""),r=va(0),c=va(""),u=va(""),d=va(""),_=va(""),p=va(null),f=i18n("details.comment_placeholder"),v=va(null),m=va(null);function h(e){if("text"==e)return NtopUtils.REGEXES.non_quoted_text;if("ip"==e){let e=NtopUtils.REGEXES.ipv4,t=e.replaceAll("$","@[0-9]{0,5}$"),a=NtopUtils.REGEXES.ipv6,l=a.replaceAll("$","@[0-9]{0,5}$");return`(${e})|(${t})|(${a})|(${l})`}return"hostname"==e?`${NtopUtils.REGEXES.singleword}|[a-zA-Z0-9._-]{3,250}@[0-9]{0,5}$`:"certificate"==e?NtopUtils.REGEXES.tls_certificate:NtopUtils.REGEXES[e]}let g=h("ip");h("text");let b=h("certificate"),y=h("domain_name_not_strict");const w=e=>{s.value=e},x=()=>{let e=null,t=!0;return"hosts"==l.alert_exclusions_page?(e=new RegExp(g),t="ip"==s.value?null==o.value||""==o.value||0==e.test(o.value)||""==u.value&&""==d.value:null==i.value||""==i.value||0==e.test(i.value)||""==u.value&&""==d.value||null==_.value||""==_.value||parseInt(_.value)<1||parseInt(_.value)>127):"domain_names"==l.alert_exclusions_page?(e=new RegExp(y),t=null==c.value||""==c.value||0==e.test(c.value)):"tls_certificate"==l.alert_exclusions_page&&(e=new RegExp(b),t=null==c.value||""==c.value||0==e.test(c.value)),t},k=()=>{n.value.close()},$=e=>""==e?-1:e,S=()=>{let e,t=o.value;"hosts"==l.alert_exclusions_page?("network"==s.value&&(t=`${i.value}/${_.value}`),null!=r.value&&0!=r.value&&(t=`${t}@${r.value}`),e={alert_addr:t,host_alert_key:$(u.value),flow_alert_key:$(d.value)}):"domain_names"==l.alert_exclusions_page?e={alert_domain:c.value}:"tls_certificate"==l.alert_exclusions_page&&(e={alert_certificate:c.value}),e.label=p.value,v.value&&(e.old_type=m.value.type,e.old_subdir=m.value.subdir,e.old_alert_domain=m.value.alert_domain,e.old_alert_certificate=m.value.alert_certificate,e.old_alert_addr=m.value.alert_addr,e.old_flow_alert_key=m.value.flow_alert_key,e.old_host_alert_key=m.value.host_alert_key),a("add",e),k()};t({show:e=>{if(e)if(v.value=!0,m.value=e,p.value=e.label,"host"==e.type){let t=e.alert_addr.split("/"),a=e.alert_addr.split("@");t.length>1?(s.value="network",i.value=t[0],_.value=t[1],o.value=""):(s.value="ip",o.value=a[0],i.value="",_.value=""),a.length>1?r.value=a[1]:r.value=0,null!=e.host_alert_key?u.value=""+e.host_alert_key:u.value="",null!=e.flow_alert_key?d.value=""+e.flow_alert_key:d.value=""}else"domain"==e.type?c.value=e.alert_domain:c.value=e.alert_certificate;else s.value="ip",o.value="",i.value="",r.value=0,u.value="0",d.value="",_.value="",c.value="",p.value="";n.value.show()},close:k}),_n((()=>{}));const N=e=>i18n(e);return(t,a)=>(Ps(),Ls(sp,{onShowed:a[11]||(a[11]=e=>{}),ref_key:"modal_id",ref:n},{title:ml((()=>[Ks(te(N("check_exclusion.add_exclusion")),1)])),body:ml((()=>["hosts"==e.alert_exclusions_page?(Ps(),Ms(Ss,{key:0},[Ys(" modal hosts "),Vs("div",vM,[Vs("label",mM,[Vs("b",null,te(N("check_exclusion.member_type")),1)]),Vs("div",hM,[Vs("div",gM,[Vs("label",{class:K([{active:"ip"==s.value},"btn btn-secondary"])},[Vs("input",{class:"btn-check",type:"radio",name:"member_type",value:"ip",onClick:a[0]||(a[0]=e=>w("ip"))}),Ks(" "+te(N("check_exclusion.ip_address")),1)],2),Vs("label",{class:K([{active:"network"==s.value},"btn btn-secondary"])},[Vs("input",{onClick:a[1]||(a[1]=e=>w("network")),class:"btn-check",type:"radio",name:"member_type",value:"network"}),Ks(" "+te(N("check_exclusion.network")),1)],2)])])]),bM,Vs("div",yM,[Vs("div",wM,[Vs("label",xM,[Vs("b",null,te(N("check_exclusion.host_alert_type")),1)]),Vs("div",kM,[wn(Vs("select",{name:"value",class:"form-select alert-select","onUpdate:modelValue":a[2]||(a[2]=e=>u.value=e)},[Vs("option",$M,te(N("check_exclusion.none")),1),Vs("option",SM,te(N("check_exclusion.exclude_all_alerts")),1),Vs("option",NM,te(N("check_exclusion.spacing_bar")),1),(Ps(!0),Ms(Ss,null,En(e.host_alert_types,(e=>(Ps(),Ms(Ss,null,[null!=e?(Ps(),Ms("option",{key:0,value:e.alert_id},te(e.label),9,CM)):Ys("v-if",!0)],64)))),256))],512),[[Ri,u.value]])])])]),Vs("div",AM,[Vs("div",EM,[Vs("label",TM,[Vs("b",null,te(N("check_exclusion.flow_alert_type")),1)]),Vs("div",PM,[wn(Vs("select",{id:"flow-alert-select",name:"value",class:"form-select alert-select","onUpdate:modelValue":a[3]||(a[3]=e=>d.value=e)},[Vs("option",UM,te(N("check_exclusion.none")),1),Vs("option",IM,te(N("check_exclusion.exclude_all_alerts")),1),Vs("option",OM,te(N("check_exclusion.spacing_bar")),1),(Ps(!0),Ms(Ss,null,En(e.flow_alert_types,(e=>(Ps(),Ms(Ss,null,[null!=e?(Ps(),Ms("option",{key:0,value:e.alert_id},te(e.label),9,jM)):Ys("v-if",!0)],64)))),256))],512),[[Ri,d.value]])])])]),"ip"==s.value?(Ps(),Ms("div",MM,[Vs("div",LM,[Vs("label",FM,[Vs("b",null,te(N("check_exclusion.ip_address")),1)]),Vs("div",RM,[wn(Vs("input",{pattern:ya(g),placeholder:"192.168.1.1",required:"",type:"text",name:"ip_address",class:"form-control","onUpdate:modelValue":a[4]||(a[4]=e=>o.value=e)},null,8,DM),[[ji,o.value]])])])])):Ys("v-if",!0),"network"==s.value?(Ps(),Ms("div",zM,[Vs("div",qM,[Vs("label",BM,[Vs("b",null,te(N("check_exclusion.network")),1)]),Vs("div",VM,[wn(Vs("input",{required:"",style:{width:"calc(100% - 10px)"},name:"network",class:"form-control d-inline",placeholder:"172.16.0.0",pattern:ya(g),"onUpdate:modelValue":a[5]||(a[5]=e=>i.value=e)},null,8,HM),[[ji,i.value]])]),Vs("div",GM,[WM,wn(Vs("input",{placeholder:"24",required:"",class:"form-control d-inline w-75",min:"1",max:"127",type:"number",name:"cidr","onUpdate:modelValue":a[6]||(a[6]=e=>_.value=e)},null,512),[[ji,_.value]])])])])):Ys("v-if",!0),Vs("div",KM,[Vs("label",JM,[Vs("b",null,te(N("vlan")),1)]),Vs("div",YM,[wn(Vs("input",{placeholder:"0",min:"0",type:"number","onUpdate:modelValue":a[7]||(a[7]=e=>r.value=e),class:"form-control"},null,512),[[ji,r.value]])])])],64)):Ys("v-if",!0),Ys(" mdoal hosts "),"hosts"!=e.alert_exclusions_page?(Ps(),Ms(Ss,{key:1},[Ys(" modal domain_names"),Vs("div",null,[Vs("div",ZM,[Vs("label",XM,["domain_names"==e.alert_exclusions_page?(Ps(),Ms("b",QM,te(N("check_exclusion.domain")),1)):Ys("v-if",!0),"tls_certificate"==e.alert_exclusions_page?(Ps(),Ms("b",eL,te(N("check_exclusion.tls_certificate")),1)):Ys("v-if",!0)]),Vs("div",tL,["domain_names"==e.alert_exclusions_page?wn((Ps(),Ms("input",{key:0,placeholder:"",pattern:ya(y),required:"",type:"text",name:"ip_address",class:"form-control","onUpdate:modelValue":a[8]||(a[8]=e=>c.value=e)},null,8,aL)),[[ji,c.value]]):Ys("v-if",!0),"tls_certificate"==e.alert_exclusions_page?wn((Ps(),Ms("input",{key:1,placeholder:"CN=813845657003339838, O=Code42, OU=TEST, ST=MN, C=U",pattern:ya(b),required:"",type:"text",name:"ip_address",class:"form-control","onUpdate:modelValue":a[9]||(a[9]=e=>c.value=e)},null,8,lL)),[[ji,c.value]]):Ys("v-if",!0)])])])],64)):Ys("v-if",!0),Ys(" modal comment"),nL,Vs("div",sL,[Vs("div",null,[Vs("label",oL,[Vs("b",null,te(N("show_alerts.add_a_comment")),1)])]),Vs("div",iL,[wn(Vs("textarea",{placeholder:ya(f),id:"alert-label",name:"label",rows:"3",class:"form-control",type:"text","onUpdate:modelValue":a[10]||(a[10]=e=>p.value=e),maxlength:"450"},null,8,rL),[[ji,p.value]])])])])),footer:ml((()=>[Vs("button",{type:"button",disabled:x(),onClick:S,class:"btn btn-primary"},te(N("add")),9,cL)])),_:1},512))}};np("\ninput[data-v-7e5acce0]:invalid {\n  border-color: #ff0000;\n}  \n"),uL.__scopeId="data-v-7e5acce0",uL.__file="http_src/vue/modal-add-check-exclusion.vue";let dL={PageAlertStats:Zh,PageFlowHistorical:Ag,PageStats:Qw,PageAssetTable:ix,PagePeriodicityTable:yx,PageServiceTable:Lx,PageServiceMap:tk,PagePeriodicityMap:wk,PageAssetMap:zk,PageDeviceExclusions:F$,PageHostTLS:R$,PageHostSSH:W$,PageHomeMap:tS,PageSankey:nS,PageHostRules:mC,PageAlertAnalysis:LC,PageHostMap:KC,PageManageConfigurationBackup:FE,PageSNMPDeviceRules:kT,PageHostsPortsAnalysis:zT,PageInactiveHosts:OP,PageInactiveHostDetails:RP,PageVulnerabilityScan:oI,PageHostVsResult:_I,PageOpenPorts:gI,PageVulnerabilityScanReport:II,PageSNMPUsage:FI,PageSNMPInterfaces:BI,PageTopology:JI,PageEditApplications:xE,PageVLANPortsFlowSankey:iA,PageTestTable:bA,PageSnmpDevicesInterfacesSimilarity:$T,NedgeRulesConfig:oE,NedgeRepeatersConfig:pP,PageHostDetailsApplications:oS,PageHostDetailsTraffic:SS,PageHostDetailsPackets:OS,PageHostDetailsFlowSankey:YS,PageHostDetailsPorts:SC,PageAggregatedLiveFlows:hA,PageNetworkDiscovery:UE,PageFlowDeviceDetails:zP,PageFlowDeviceInterfaceDetails:eU,AlertInfo:N_,Chart:A_,TimeseriesChart:Eg,Datatable:$w,DateTimeRangePicker:T_,NetworkMap:Xx,RangePicker:Kp,PageNavbar:s_,SelectSearch:n_,TabList:ex,Sankey:FS,NoteList:fv,Loading:wf,Dashboard:pM,DashboardBox:aj,DashboardEmpty:lj,DashboardTable:sj,DashboardBadge:dj,DashboardPie:_j,DashboardTimeseries:pj,DashboardSankey:fj,ListTimeseries:eb,Modal:sp,ModalAddCheckExclusion:uL,ModalAlertsFilter:Dm,ModalFilters:xp,ModalTimeseries:fw,ModalTrafficExtraction:vv,ModalDeleteConfirm:sx,ModalSnapshot:im,ModalAddDeviceExclusion:f$,ModalEditDeviceExclusion:N$,ModalAddHostRules:iC,ModalAddApplication:bE,ModalDeleteApplication:yE,ModalEditReport:CI,Vue:Od};window.ntopVue=dL;var _L=["html","clone","append","<div />",'<div><hr><div style="margin-left: auto;margin-right: auto;padding-left: var(--bs-gutter-x,.75rem);padding-right: var(--bs-gutter-x,.75rem);width: 100%;"><div class="row mt-2"><div class="col-12 col-md-4 pl-md-0 text-center text-md-start"><span style="font-size: .875em;"><a href="https://www.ntop.org/products/traffic-analysis/ntop/" target="_blank" id="footer-ntop-version"></a> | <span id="footer-ntop-github"></span></span></div><div class="col-12 col-md-4 text-center"><span style="font-size: .875em;" id="footer-ntop-age"></span></div><div class="col-12 col-md-4 text-center text-md-end pr-md-0"><span style="font-size: .875em;"><i class="fas fa-clock" title="Server Time"></i> <div class="d-inline-block" id="footer-network-clock"></div> UTC | Uptime: <div class="d-inline-block" id="footer-network-uptime"></div></span></div></div></div></div>',"ntopng_release_info","|","split","#footer-ntop-version","#footer-ntop-github","© 1998-","ntop_age_to"," - ntop","#footer-ntop-age","body div main","parent","#footer-network-clock","","#footer-network-uptime","remove","localtime","uptime","chart_colors","on_custom_event","ready"];function pL(){const e=e=>$(_L[3])[_L[2]]($(e)[_L[1]]())[_L[0]]();let t=_L[4];const a=(()=>{let a=$(t),l=i18n(_L[5])[_L[7]](_L[6]);$(_L[8],a)[_L[0]](l[0]),$(_L[9],a)[_L[0]](l[1]);let n=`${_L[10]}${i18n(_L[11])}${_L[12]}`;return $(_L[13],a)[_L[0]](n),e(a)})(),l=()=>{$(_L[14])[_L[2]](a)};l();const n=()=>$(_L[16])[_L[15]]()[_L[15]]()[_L[15]]()[_L[15]]()[_L[15]]();ntopng_events_manager[_L[23]](_L[22],ntopng_custom_events.GET_INTERFACE_DATA,(t=>{0==(()=>{let t=n();if(null==t)return!1;let l=t[_L[1]]();$(_L[16],l)[_L[0]](_L[17]),$(_L[18],l)[_L[0]](_L[17]);const s=e(l);return a===s})()&&((()=>{let e=n();null!=e&&e[_L[19]]()})(),l()),(e=>{$(_L[16])[_L[0]](e[_L[20]]),$(_L[18])[_L[0]](e[_L[21]])})(t)}))}$(document)[_L[24]]((()=>pL()))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
