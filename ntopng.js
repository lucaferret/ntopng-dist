!function(){"use strict";Date.prototype.format=function(e){var t={"M+":this.getMonth()+1,"d+":this.getDate(),"h+":this.getHours(),"m+":this.getMinutes(),"s+":this.getSeconds(),"q+":Math.floor((this.getMonth()+3)/3),S:this.getMilliseconds()};for(var a in/(y+)/.test(e)&&(e=e.replace(RegExp.$1,(this.getFullYear()+"").substr(4-RegExp.$1.length))),t)new RegExp("("+a+")").test(e)&&(e=e.replace(RegExp.$1,1==RegExp.$1.length?t[a]:("00"+t[a]).substr((""+t[a]).length)));return e},jQuery.fn.extend({disable:function(e){return this.each((function(){var t=$(this);t.is("input, button, textarea, select")?this.disabled=e:t.toggleClass("disabled",e)}))}});const e=.005,t={ipv4:String.raw`^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$`,ipv6:String.raw`^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$|^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*)$`,domainName:String.raw`^([a-zA-Z]([a-zA-Z]|[0-9])?\.[a-zA-Z]{2,13}|[a-zA-Z0-9]([\-_.a-zA-Z0-9]{1,61}[a-zA-Z0-9])?\.[a-zA-Z]{2,13}|[a-zA-Z0-9]([\-_.a-zA-Z0-9]{1,61}[a-zA-Z0-9])?\.[a-zA-Z]{2,30}\.[a-zA-Z]{2,3})$`,port:String.raw`^([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$`,latency:String.raw`^([0-9]*[.])?[0-9]+$`,url:String.raw`^(https?\:\/\/[^\/\s]+(\/.*)?)$`,emailUrl:String.raw`^smtps?:\/\/[\-a-zA-Z0-9:.]{1,256}$`,macAddress:String.raw`^([0-9A-Fa-f]{2}:){5}([0-9A-Fa-f]{2})$`,hostname:String.raw`^(?!\s*$)[a-zA-Z0-9._: \-\/]{1,250}|^[a-zA-Z0-9._: \-\/]{1,250}@[0-9]{0,5}`,username:String.raw`^[a-zA-Z0-9._@!-?]{3,30}$`,singleword:String.raw`^(?=[a-zA-Z0-9._:\-]{3,253}$)(?!.*[_.:\-]{2})[^_.:\-].*[^_.:\-]$`,multiword:String.raw`^([a-zA-Z0-9._:\-\s]{3,253})$`,email:String.raw`^([a-zA-Z0-9.!#$%&'*+\-\/=?^_\`\|~]+@[a-zA-Z0-9\-]+(?:\.[a-zA-Z0-9\-]+)*)$|^[a-zA-Z\d.!#$%&'*+\-\/=?^_\`\|~]{1,128}$`,emailCommaList:String.raw`^((?:[a-zA-Z0-9.!#$%&'*+\-\/=?^_\`\|~]+@[a-zA-Z0-9\-]+(?:\.[a-zA-Z0-9\-]+)*)|([a-zA-Z\d.!#$%&'*+\-\/=?^_\`\|~]{1,128}))(?:,((?:[a-zA-Z0-9.!#$%&'*+\-\/=?^_\`\|~]+@[a-zA-Z0-9\-]+(?:\.[a-zA-Z0-9\-]+)*)|([a-zA-Z\d.!#$%&'*+\-\/=?^_\`\|~]{1,128})))*$`,https:String.raw`^https?:\/\/.+$`,token:String.raw`^[0-9a-f]{32}`,score:String.raw`^[0-9]{1,5}`,telegram_channel:String.raw`^[0-9\-]{1,15}`,password:String.raw`^[\w\/$!\/()=?^*@_-]{5,31}$`,tls_certificate:String.raw`^[^=,]+=[^=,]+(,\s[^=,]+=[^=,]+)*$`,domain_name_not_strict:String.raw`^[a-zA-Z0-9\-_~]+((\.[a-zA-Z0-9\-_~]+)+)$`,non_quoted_text:String.raw`^[a-zA-Z0-9.-_]+$`};class a{static toggleOverlays(e=500){$(".overlay").toggle(e)}static showOverlays(e=500){$(".overlay").fadeIn(e)}static hideOverlays(e=500){$(".overlay").fadeOut(e)}static get REGEXES(){return t}static getIPv4RegexWithCIDR(){const e=t.ipv4.length;return`${t.ipv4.substring(0,e-1)}(\\/?)(\\b([0-9]|[12][0-9]|3[0-2])?\\b)$`}static getIPv6RegexWithCIDR(){const e=t.ipv6.length;return`${t.ipv6.substring(0,e-1)}(\\/?)\\b([0-9]|[1-9][0-9]|1[01][0-9]|12[0-8])?\\b$`}static async resolveDNS(e="ntop.org"){try{const t=await fetch(`${http_prefix}/lua/rest/v2/get/dns/resolve.lua?hostname=${e}`);return await t.json()}catch(e){console.error(`Something went wrong when resolving hostname: ${e}`)}return{rc:-1,rc_str:"FAILED_HTTP_REQUEST"}}static initDataPatterns(){$("input[data-pattern]").each((function(){const e=$(this).data("pattern");if(!e)return void console.warn("An empty data-pattern on an input was found!",this);const a=e.split("|").map((e=>t[e].toString())).join("|");$(this).attr("pattern",a),$(this).removeAttr("data-pattern")}))}static is_good_ipv4(e){return new RegExp(t.ipv4).test(e)}static is_good_ipv6(e){return new RegExp(t.ipv6).test(e)}static is_mac_address(e){return new RegExp(t.macAddress).test(e)}static isNumeric(e){return/^\d+$/.test(e)}static is_network_mask(e,t){var l,n=e.split("/"),s=null;if(2!=n.length){if(!t)return null;l=e}else{if(l=n[0],!a.isNumeric(n[1]))return null;if((s=parseInt(n[1]))<0)return null}if(a.is_good_ipv4(l)){if(null===s)s=32;else if(s>32)return null;return{type:"ipv4",address:l,mask:s}}if(a.is_good_ipv6(n[0])){if(null===s)s=128;else if(s>128)return!1;return{type:"ipv6",address:l,mask:s}}return null}static fbits(t){const a=["bps","Kbps","Mbps","Gbps","Tbps"];if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 bps";var l=Math.log(t)/Math.log(1e3),n=parseInt(Math.floor(l));if(n<0||isNaN(n))n=0;else if(n>=a.length)return"> "+a[a.length-1];if(n<=1)return Math.round(t/Math.pow(1e3,n)*100)/100+" "+a[n];var s=parseFloat(t/Math.pow(1e3,n)).toFixed(2);return s%1==0&&(s=Math.round(s)),s+" "+a[n]}static export_rate(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 exps/s";var l=a.scaleValue(t,["exp/s","Kexp/s"],1e3);return Math.round(100*l[0])/100+" "+l[1]}static exports_format(t){if(void 0===t)return"-";var l=i18n_ext.exports.toLowerCase(),n=[l,"K "+l];if(0==t)return"0";if(t>0&&t<e)return"< 0.005 exps/s";var s=a.scaleValue(t,n,1e3);return Math.round(100*s[0])/100+" "+s[1]}static fbits_from_bytes(e){return void 0===e?"-":a.fbits(8*e)}static fpackets(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 pps";var l=a.scaleValue(t,["pps","Kpps","Mpps","Gpps","Tpps"],1e3);return Math.round(100*l[0])/100+" "+l[1]}static fpoints(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 pt/s";var l=a.scaleValue(t,["pt/s","Kpt/s","Mpt/s","Gpt/s","Tpt/s"],1e3);return Math.round(100*l[0])/100+" "+l[1]}static fflows(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 fps";var l=a.scaleValue(t,["fps","Kfps","Mfps","Gfps","Tfps"],1e3);return Math.round(100*l[0])/100+" "+l[1]}static fmsgs(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 mps";var l=a.scaleValue(t,["msg/s","Kmsg/s","Msg/s","Gmsg/s","Tmsg/s"],1e3);return Math.round(100*l[0])/100+" "+l[1]}static fmillis(e){if(void 0===e)return"-";const t=a.scaleValue(e,["ms"],1e3);return Math.round(100*t[0])/100+" "+t[1]}static fnone(e){return void 0===e?"-":Math.round(100*e)/100}static falerts(e){return void 0===e?"-":Math.round(100*e)/100+" alerts/s"}static fint(e){return void 0===e?"-":Math.round(e).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")}static ffloat(e){return void 0===e?"-":(Math.round(100*e)/100).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")}static fpercent(e){return void 0===e?"-":Math.round(100*e)/100+" %"}static percentage(e,t){if(t>0){var a=Math.round(1e4*e/t);if(a>0)return" [ "+a/100+" % ] "}return""}static fdate(e){return new Date(1e3*e)}static capitaliseFirstLetter(e){return e.charAt(0).toUpperCase()+e.slice(1)}static get_trend(e,t){return void 0===e||void 0===t||e==t?'<i class="fas fa-minus"></i>':e>t?'<i class="fas fa-arrow-up"></i>':'<i class="fas fa-arrow-down"></i>'}static abbreviateString(e,t){return e?e.length<t?e:e.substring(0,t)+"...":""}static toFixed2(e){return e?e.toFixed(2):""}static bytesToSize(e){if(void 0===e)return"-";var t=1024,a=1048576,l=1073741824,n=1099511627776;return e>=0&&e<t?0!=e?parseFloat(e.toFixed(2))+" Bytes":parseFloat(e)+" Bytes":e>=t&&e<a?parseFloat((e/t).toFixed(2))+" KB":e>=a&&e<l?parseFloat((e/a).toFixed(2))+" MB":e>=l&&e<n?parseFloat((e/l).toFixed(2))+" GB":e>=n?parseFloat((e/n).toFixed(2))+" TB":parseFloat(e.toFixed(2))+" Bytes"}static drawTrend(e,t,a){return e==t?'<i class="fas fa-minus"></i>':e>t?'<i class="fas fa-arrow-up"'+a+"></i>":'<i class="fas fa-arrow-down"></i>'}static toggleAllTabs(e){!0===e?$("#historical-tabs-container").find("li").removeClass("disabled").find("a").attr("data-toggle","tab"):$("#historical-tabs-container").find("li").addClass("disabled").find("a").removeAttr("data-toggle")}static disableAllDropdownsAndTabs(){$("select").each((function(){$(this).prop("disabled",!0)})),a.toggleAllTabs(!1)}static enableAllDropdownsAndTabs(){$("select").each((function(){$(this).prop("disabled",!1)})),a.toggleAllTabs(!0)}static capitalize(e){return e&&e[0].toUpperCase()+e.slice(1)}static addCommas(e){for(var t=(e+="").split("."),a=t[0],l=t.length>1?"."+t[1]:"",n=/(\d+)(\d{3})/;n.test(a);)a=a.replace(n,"$1,$2");return a+l}static scaleValue(e,t,a,l){if(0==e)return[0,t[0]];let n=l?10*l:10;var s=parseInt(Math.floor(Math.log(e)/Math.log(a)));return s<0||isNaN(s)?s=0:s>=t.length&&(s=t.length-1),[Math.round(e/Math.pow(a,s)*n)/n,t[s]]}static formatValue(t,l){if(0==t)return"0";if(t>0&&t<e)return"< "+e;null==l&&(l=0);var n=a.scaleValue(t,["","K","M","G","T"],1e3,l);return n[0]+n[1]}static formatPackets(e){return a.addCommas(e.toFixed(0))+" Pkts"}static bytesToVolume(t){if(0==t)return"0 Bytes";if(t>0&&t<e)return"< 0.005 Bytes";var l=a.scaleValue(t,["Bytes","KB","MB","GB","TB"],1024);return parseFloat(l[0])+" "+l[1]}static bytesToVolumeAndLabel(e){if(0==e)return"0 Bytes";var t=parseInt(Math.floor(Math.log(e)/Math.log(1024)));return[(e/Math.pow(1024,t)).toFixed(2),["Bytes","KB","MB","GB","TB"][t]]}static bitsToSize(t,l){l=l||1e3;if(0==t)return"0 bps";if(t>0&&t<e)return"< 0.005 bps";var n=a.scaleValue(t,["bps","Kbps","Mbps","Gbps","Tbps"],l);return n[0].toFixed(2)+" "+n[1]}static bitsToSize_no_comma(t,l){l=l||1e3;if(0==t)return"0 bps";if(t>0&&t<e)return"< 0.005 bps";var n=a.scaleValue(t,["bps","Kbps","Mbps","Gbps","Tbps"],l);return n[0]+" "+n[1]}static secondsToTime(e){if(e<1)return"< 1 sec";let t=Math.floor(e/86400),a=Math.floor(e/3600-24*t),l=Math.floor(e/60-1440*t-60*a),n=e%60,s="",i=[];if(t>0){let e=Math.floor(t/365);e>0&&(t%=365,s=e+" year",e>1&&(s+="s"),i.push(s),s=""),s=t+" day",t>1&&(s+="s"),i.push(s),s=""}return a>0&&(a<10&&(s="0"),s+=a+":"),l<10&&(s+="0"),s+=l+":",n<10&&(s+="0"),s+=n,i.push(s),i.join(", ")}static msecToTime(e){return e>=1e3?a.secondsToTime(e/1e3):(Math.round(1e3*e)/1e3).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")+" ms"}static epoch2Seen(e){var t=new Date(1e3*e),l=Math.floor((new Date).getTime()/1e3-e);return t.format("dd/MM/yyyy hh:mm:ss")+" ["+a.secondsToTime(l)+" ago]"}static graphGetXAxisTicksFormat(e){return e<=86400?"%H:%M:%S":e<=172800?"%b %e, %H:%M:%S":"%b %e"}static paramsExtend(e,t){return $.extend({},e,t)}static paramsToForm(e,t){for(var a in e=$(e),t){if(t.hasOwnProperty(a))$('<input type="hidden" name="'+a+'" value="'+t[a]+'">').appendTo(e)}return e}static paramsPairsEncode(e){var t=0,a={};for(var l in e)a["key_"+t]=l,a["val_"+t]=e[l],t+=1;return a}static hostkey2hostInfo(e){return(e=(e=(e=e.replace(/____/g,":")).replace(/___/g,"/")).replace(/__/g,".")).split("@")}static handle_tab_state(e,t){$("a",e).click((function(e){e.preventDefault()})),$(" > li > a",e).on("shown.bs.tab",(function(e){var t=$(e.target).attr("href").substr(1);history.replaceState?history.replaceState(null,null,"#"+t):window.location.hash=t}));var a=window.location.hash;a||(a="#"+t),$('a[href="'+a+'"]',e).tab("show")}static _add_find_host_link(e,t,a){$("<input>").attr({type:"hidden",id:t,name:t,value:a}).appendTo(e)}static makeFindHostBeforeSubmitCallback(e){return function(t,l){return l.context&&"historical"==l.context?(t.attr("action",e+"/lua/pro/db_search.lua"),"ip"==l.type?a._add_find_host_link(t,"ip",l.ip):"mac"==l.type?a._add_find_host_link(t,"mac",l.mac):"community_id"==l.type?a._add_find_host_link(t,"community_id",l.community_id):"ja3_client"==l.type?a._add_find_host_link(t,"ja3_client",l.ja3_client):"ja3_server"==l.type?a._add_find_host_link(t,"ja3_server",l.ja3_server):a._add_find_host_link(t,"name",l.hostname?l.hostname:l.name)):"mac"==l.type?t.attr("action",e+"/lua/mac_details.lua"):"network"==l.type?(t.attr("action",e+"/lua/hosts_stats.lua"),a._add_find_host_link(t,"network",l.network)):"snmp"==l.type?(t.attr("action",e+"/lua/pro/enterprise/snmp_interface_details.lua"),a._add_find_host_link(t,"snmp_port_idx",l.snmp_port_idx)):"snmp_device"==l.type?t.attr("action",e+"/lua/pro/enterprise/snmp_device_details.lua"):"asn"==l.type?(t.attr("action",e+"/lua/hosts_stats.lua"),a._add_find_host_link(t,"asn",l.asn)):(t.attr("action",e+"/lua/host_details.lua"),a._add_find_host_link(t,"mode","restore")),!0}}static tstampToDateString(e,t,a){a=a||0;var l=parseInt(e.html())+a,n=d3.time.format(t)(new Date(1e3*l));return e.html(n).removeClass("hidden"),n}static noHtml(e){return e.replace(/<[^>]+>/g,"")}static cleanCustomHostUrl(e){return e.replace(/^http:\/\//gi,"").replace(/^https:\/\//gi,"").replace(/^www\./gi,"").replace(/[^0-9a-zA-Z\.:\/_-]/gi,"")}static parseQuery(e){for(var t={},a=("?"===e[0]?e.substr(1):e).split("&"),l=0;l<a.length;l++){var n=a[l].split("=");t[decodeURIComponent(n[0])]=decodeURIComponent(n[1]||"")}return t}static getHistoryParameters(e){var t=a.parseQuery(window.location.search),l=$.extend(t,e),n="?"+$.param(l,!0);return[location.protocol,"//",location.host,location.pathname].join("")+n}static check_status_code(e,t,a){const l=200!=e;if(l&&null!=a){let l=i18n_ext.request_failed_message;e&&t&&(l+=`: ${e} - ${t}`),a.text(l).show()}else l&&null==a&&alert(`${i18n_ext.request_failed_message}: ${e} - ${t}`);return l}static importModalHelper(e){if(!e.loadConfigXHR)throw"importModalHelper:: Missing 'loadConfigXHR' param";$("input#import-input").on("change",(function(){$("#btn-confirm-import").removeAttr("disabled")})),$("#import-modal").on("hidden.bs.modal",(function(){$("#import-input").val(""),$("#import-error").hide().removeClass("text-warning").addClass("invalid-feedback"),$("#btn-confirm-import").attr("disabled","disabled")})),$("#import-modal").on("submit","form",(function(t){t.preventDefault();const a=$("#btn-confirm-import");a.attr("disabled","");const l=$("#import-input")[0].files[0];if(!l)return $("#import-error").text(`${i18n_ext.no_file}`).show(),void a.removeAttr("disabled");const n=new FileReader;n.readAsText(l,"UTF-8"),n.onload=function(){let t=null;try{t=JSON.parse(n.result)}catch(e){}if(!t)return $("#import-error").text(i18n_ext.rest_consts[responseJSON.rc_str]||"Not Implemented Yet").show(),void a.removeAttr("disabled");e.loadConfigXHR(n.result).done(((t,a,l)=>{if(t.rc<0)return void $("#import-error").text(t.rc_str).show();e.successCallback&&e.successCallback(t);const n="all"==$("input[name='configuration']:checked").val()?i18n("manage_configurations.messages.import_all_success"):i18n("manage_configurations.messages.import_success");ToastUtils.showToast({id:"import-configuration-alert",level:"success",title:i18n("success"),body:n,delay:2e3}),$("#import-modal").modal("hide")})).fail((({responseJSON:t})=>{e.failureCallback&&e.failureCallback(t),t&&t.rc>0||(-28==t.rc&&$("#import-error").removeClass("invalid-feedback").addClass("text-warning"),$("#import-error").text(i18n_ext.rest_consts[t.rc_str]||i18n_ext.FAILED_HTTP_REQUEST).show())})).always((()=>{a.removeAttr("disabled")}))}}))}static serializeFormArray(e){const t={};return e.forEach((e=>{e.name.includes("[]")||("string"==typeof e.value&&(e.value=e.value.trim()),t[e.name]=e.value)})),t}static cleanForm(e){$(e).find("input,select,textarea").each((function(e,t){$(this).removeClass("is-valid").removeClass("is-invalid")})),$(e)[0].reset()}static fetchWithTimeout(e,t={},a=5e3){const l={...t,signal:(new AbortController).signal};return fetch(e,l).then((e=>{if(!e.ok)throw new Error(`${e.status}: ${e.statusText}`);return e})).catch((e=>{if("AbortError"===e.name)throw new Error("Response timed out")}))}static setPref(e,t,a,l){if(null==e)return void console.warn("An action key must be defined to set a preference!");const n=()=>{},s=$.post(`${http_prefix}/lua/update_prefs.lua`,{action:e,csrf:t});s.done(a||n),s.fail(l||n)}static arrayToListString(e,t){return null==e?"":e.length>t?e.slice(0,t).join(", ")+` ${i18n_ext.and_x_more.replace("$num",e.length-t)}`:e.slice(0,t).join(", ")}static buildURL(e,t={},a=!1,l={}){const n=new URL(e,window.location);for(const[e,a]of Object.entries(t))(a||0===a)&&n.searchParams.set(e,a);if(a){const e=new URL(window.location.href);for(const[t,a]of Object.entries(l))a&&e.searchParams.set(t,a);n.searchParams.set("referer",e.toString())}return n.toString()}static getEditPoolLink(e,t){const a=new URL(e,window.location);return a.searchParams.set("pool_id",t),a.toString()}static getPoolLink(e,t=0){return`${http_prefix}/lua/rest/v2/get/${e}/pools.lua?pool=${t}`}static async getPool(e,t=0){if(null===e)throw"A pool type must be defined!";try{const l=await fetch(a.getPoolLink(e,t)),n=await l.json();return n.rc<0?[!1,{}]:[!0,n.rsp[0]]}catch(e){return[!1,{}]}}static saveElementScale(e,t={width:0,height:0}){const l=a.generateScaleElementKey(e);localStorage.setItem(l,JSON.stringify(t))}static generateScaleElementKey(e){let t;const a=location.pathname,l=e.attr("id");if(""!==l)t=l;else{t=e.attr("class")}return`${t}-${a}-scale`}static loadElementScale(e){const t=a.generateScaleElementKey(e),l=localStorage.getItem(t);if(null!=l)return JSON.parse(l)}static fillFieldIfValid(e,t){void 0===t?e.val(""):e.val(t)}static copyToClipboard(e,t){const a=document.createElement("textarea");a.value=e,a.setAttribute("readonly",""),a.style.position="absolute",a.style.left="-9999px",document.body.appendChild(a),a.select(),document.execCommand("copy"),document.body.removeChild(a),$(t).attr("title","Copied!").tooltip("dispose").tooltip().tooltip("show"),$(t).removeAttr("data-bs-original-title"),$(t).attr("title",e)}static stripTags(e){let t=document.createElement("div");return t.innerHTML=e,t.textContent||t.innerText||""}static shortenLabel(e,t,a){let l=e;if(e.length>t+5)if(a){let n=e.lastIndexOf(a);const s=e.slice(n);t>n&&(t=n),l=e.slice(0,t)+"... "+s}else l=e.slice(0,t)+"...";return l}static sortAlphabetically(e,t){const a=e.label?.toUpperCase(),l=t.label?.toUpperCase();return a<l?-1:a>l?1:0}static formatNameValue(e,t,a){let l=e;return e!=t&&(a&&"number"==typeof a&&(l=this.shortenLabel(l,a,".")),l=`${l} [${t}]`),l}static removeVlan(e){let t=e;const a=t.lastIndexOf("@");if(-1!=a){0==t.slice(a+1)&&(t=t.slice(0,a))}return t}static formatGenericObj(e,t){let a=e.label?e.label:e.value;return e.value,a}static formatCountry(e,t){let a=e.value;return`${e.label?e.label:e.value} <img src="/dist/images/blank.gif" class="flag flag-${a.toLowerCase()}">`}static formatHost(e,t,l){let n="";if(!e)return n;let s=e.ip;t.vlan_id&&t.vlan_id.value&&(s=s+"@"+t.vlan_id.value),n=e.label?e.label:e.value,t.vlan_id&&t.vlan_id.label&&(n+=`@${t.vlan_id.label}`);n=`<a href="${a.buildURL(`${http_prefix}/lua/host_details.lua`,{host:s})}">${n}</a>`;let i=l?t.cli_country:t.srv_country;return!i&&t.country&&(i=t.country),i&&i.value&&(n+=` <img src="${http_prefix}/dist/images/blank.gif" class="flag flag-${i.value.toLowerCase()}" title="${i.title}"></a>`),n}static formatNetwork(e,t){let l="";if(!e)return l;let n=e.value;l=e.label?e.label:e.value,t.vlan_id&&t.vlan_id.label&&(l+=`@${t.vlan_id.label}`);return l=`<a href="${a.buildURL(`${http_prefix}/lua/hosts_stats.lua`,{network:n})}">${l}</a>`,l}static convertIPAddress(e){var t,a,l,n,s,i,o;if(!e)return 0;if(l=2==(s=(e=e.replace(/<[\s\S]*?>/g,"")).split(":")).length?s[0].split("."):e.split("."),n=e.split(":"),i="",o="",4==l.length)for(t=0;t<l.length;t++)1==(a=l[t]).length?i+="00"+a:2==a.length?i+="0"+a:i+=a;else if(n.length>0){var r=0;for(t=0;t<n.length;t++)t>0&&(o+=":"),0===(a=n[t]).length?r+=0:1==a.length?(o+="000"+a,r+=4):2==a.length?(o+="00"+a,r+=4):3==a.length?(o+="0"+a,r+=4):(o+=a,r+=4);n=o.split(":");var c=0;for(t=0;t<n.length;t++)if(0===(a=n[t]).length&&0===c)for(var u=0;u<32-r;u++)i+="0",c=1;else i+=a}return i}static formatASN(e,t){let l="";if(!e)return l;let n=e.value;l=e.label?e.label:e.value;return l=`<a href="${a.buildURL(`${http_prefix}/lua/hosts_stats.lua`,{asn:n})}">${l}</a>`,l}static createProgressBar(e){return`<div class="d-flex flex-row align-items-center">\n              <div class="col-9 progress">\n                <div class="progress-bar bg-warning" aria-valuenow="${e}" aria-valuemin="0" aria-valuemax="100" style="width: ${e}%;">\n                </div>\n              </div>\n              <div class="col"> ${e} %</div>\n            </div>`}static createBreakdown(e,t,a,l){return`<div class="d-flex flex-row align-items-center">\n              <div class="col-12 progress">\n                <div class="progress-bar bg-warning" aria-valuenow="${e}" aria-valuemin="0" aria-valuemax="100" style="width: ${e}%;">${a}</div>\n                <div class="progress-bar bg-success" aria-valuenow="${t}" aria-valuemin="0" aria-valuemax="100" style="width: ${t}%;">${l}</div>\n              </div>\n            </div>`}static getNumTableRows(){return[10,20,50,100]}static formatApexChartLabelFromXandName({series:e,seriesIndex:t,dataPointIndex:a,w:l}){const n=l.config.series[t].data[a],s=n.name,i=n.y;return`\n    <div class='apexcharts-theme-light apexcharts-active' id='test'>\n        <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n            ${n.meta.label}\n        </div>\n        <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n            <div class='apexcharts-tooltip-text text-left'>\n                <b>${l.config.xaxis.title.text}</b>: ${s}\n            </div>\n            <div class='apexcharts-tooltip-text text-left'>\n                <b>${l.config.yaxis[0].title.text}</b>: ${i}\n            </div>\n        </div>\n    </div>\n    `}static apexChartJumpToAlerts(e,t,a){const{seriesIndex:l,dataPointIndex:n}=a,{series:s}=a.config;if(-1===l)return;if(void 0===s)return;const i=s[l],o=i.base_url||s[0].base_url,r=i.start_url||s[0].start_url;if(null!=o&&null!=r){const e=i.data[n].meta.url_query;location.href=`${o}?${r}${e}`}}static apexChartJumpToHostDetails(e,t,a){const{seriesIndex:l,dataPointIndex:n}=a,{series:s}=a.config;if(-1===l)return;if(void 0===s)return;const i=s[l],o=i.base_url||s[0].base_url;if(null!=o){const e=`${o}?${i.data[n].meta.url_query}`;ntopng_url_manager.go_to_url(e)}}static formatApexChartLabelFromXandY({series:e,seriesIndex:t,dataPointIndex:a,w:l}){const n=l.config.series[t].data[a],s=n.x,i=n.y;return`\n      <div class='apexcharts-theme-light apexcharts-active' id='test'>\n          <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n              ${n.meta.label}\n          </div>\n          <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n              <div class='apexcharts-tooltip-text text-left'>\n                  <b>${l.config.xaxis.title.text}</b>: ${s}\n              </div>\n              <div class='apexcharts-tooltip-text text-left'>\n                  <b>${l.config.yaxis[0].title.text}</b>: ${i}\n              </div>\n          </div>\n      </div>\n    `}}function l(e,t){var a=$("thead th",$(e)).filter((function(){return"none"!=$(this).css("display")})).length;$("tbody",$(e)).html('<tr class="emptyRow"><td colspan="'+a+'"><i>'+t+"</i></td></tr>")}function n(e){return $("tr:not(.emptyRow)",$(e)).length-1}function s(e){return 0==n(e)}function i(e){return $("table",$("#dt-top-details",$(e)).parent())}function o(e,t,a,l,n,s=!0,i=""){0==$("td:nth-child("+e+")",$(this)).find("div.d-flex").length&&($("td:nth-child("+e+")",$(this)).empty(),$("td:nth-child("+e+")",$(this)).append($("<div class='d-flex justify-content-center'></div>"))),$("td:nth-child("+e+")",$(this)).find(".d-flex").append('<a href="'+n+`" title='${i}' data-placement="bottom" class="btn btn-sm mx-1 ${a} ${s?"":"disabled"}" onclick="`+l+'" role="button">'+t+"</a>")}function r(e,t){return e.data("datatable").options.columns.findIndex((function(e){return e.field===t}))}$((function(){a.initDataPatterns()}));var c=Object.freeze({__proto__:null,draw_processes_graph:function(e,t,a){var l,n={},s=e+"/lua/get_processes_graph_data.lua?host="+a;d3.json(s,(function(s,i){if(s)return console.warn(s);var o;(l=i).forEach((function(t){o=-1==t.source_pid?e+"/lua/host_details.lua?host="+t.source:e+"/lua/process_details.lua?pid="+t.source_pid+"&pid_name="+t.source_name+"&host="+a+"&page=flows",t.source=n[t.source]||(n[t.source]={name:t.source_name,num:t.source,link:o,type:t.source_type,pid:t.source_pid}),o=-1==t.target_pid?e+"/lua/host_details.lua?host="+t.target:e+"/lua/process_details.lua?pid="+t.target_pid+"&pid_name="+t.target_name+"&host="+a+"&page=flows",t.target=n[t.target]||(n[t.target]={name:t.target_name,num:t.target,link:o,type:t.target_type,pid:t.target_pid})}));var r=d3.scale.category10();r.proc="red",r.host="lightsteelblue";var c=d3.layout.force().nodes(d3.values(n)).links(l).size([960,500]).linkDistance(120).charge(-400).on("tick",(function(){d.attr("d",f),_.attr("transform",m),p.attr("transform",m)})).start(),u=d3.select("#"+t).append("svg").attr("id","ebpf_graph").attr("width",960).attr("height",500);u.append("defs").selectAll("marker").data(["proc2proc","proc2host","host2proc","host2host"]).enter().append("marker").attr("id",(function(e){return e})).attr("viewBox","0 -5 20 20").attr("refX",15).attr("refY",-1.5).attr("markerWidth",6).attr("markerHeight",6).attr("orient","auto").append("path").attr("d","M0,-5L10,0L0,5");var d=u.append("g").selectAll("path").data(c.links()).enter().append("path").attr("class",(function(e){return"link "+e.type})).attr("marker-end",(function(e){return"url(#"+e.type+")"})),_=u.append("g").selectAll("circle").data(c.nodes()).enter().append("circle").attr("class","ebpf_circle").attr("r",15).style("fill",(function(e){return r[e.type]})).call(c.drag).on("dblclick",(function(e){window.location.href=e.link})),p=u.append("g").selectAll("text").data(c.nodes()).enter().append("text").attr("class","ebpf_text").attr("x",12).attr("y","0.5rem").style("font-size","1rem").text((function(e){return e.pid>=0?e.name+" [pid: "+e.pid+"]":e.name}));function f(e){var t=e.target.x-e.source.x,a=e.target.y-e.source.y,l=Math.sqrt(t*t+a*a);return"M"+e.source.x+","+e.source.y+"A"+l+","+l+" 0 0,1 "+e.target.x+","+e.target.y}function m(e){return"translate("+e.x+","+e.y+")"}}))}});class u{constructor(e,t){if(void 0===t.csrf)throw new Error("ModalHandler::Missing CSRF token!");this.element=e,this.dialog=$(e).closest(".modal"),this.options=t,this.csrf=t.csrf,this.dontDisableSubmit=t.dontDisableSubmit,this.observer=new MutationObserver((e=>{this.bindFormValidation(),this.toggleFormSubmission(),this.initDataPatterns()})),this.observer.observe(this.element[0],{childList:!0,subtree:!0}),this.initialState=null,this.currentState=null,this.firstCloseAttempt=!1,this.isSubmitting=!1;if(0==$(this.element).find("[type='submit']").length)throw new Error("ModalHandler::The submit button was not found inside the form!");this.toggleFormSubmission()}initDataPatterns(){NtopUtils.initDataPatterns()}createFormSnapshot(){const e={inputs:{},hidden:[]};return $(this.element).find('textarea,select,input[type!="radio"]').each((function(){const t=$(this).prop("nodeName").toLowerCase(),a=$(this).attr("name");e.inputs[`${t}[name='${a}']`]=$(this).val()})),$(this.element).find("[style='display: none;'], span.invalid-feedback").each((function(){e.hidden.push($(this))})),e}compareFormSnaphsot(e,t){if(null==e||null==t)return!0;for(let[a,l]of Object.entries(e.inputs))if(t.inputs[a]!=l)return!1;return!0}delegateModalClosing(){const e=this;$(this.dialog).find("button.cancel").off("click").click((function(){e.firstCloseAttempt=!1,$(e.element)[0].reportValidity(),$(e.dialog).find(".confirm-closing").fadeOut(100,(function(){$(e.dialog).find("button.btn-close").fadeIn(100)}))})),$(this.dialog).off("hide.bs.modal").on("hide.bs.modal",(function(t){e.isSubmitting?t.preventDefault():e.compareFormSnaphsot(e.currentState,e.initialState)||e.firstCloseAttempt||(t.preventDefault(),e.firstCloseAttempt=!0,$(e.dialog).find("button.btn-close").fadeOut(100,(function(){$(e.dialog).find(".confirm-closing").fadeIn(100)})))})),$(this.dialog).off("hidden.bs.modal").on("hidden.bs.modal",(function(t){for(const[t,a]of Object.entries(e.initialState.inputs))$(e.dialog).find(t).val(a),$(e.dialog).find(t).removeClass("is-invalid");e.initialState.hidden.forEach((e=>{e.hide()})),e.element.find("[type='submit']").attr("disabled","disabled"),e.currentState=null,e.firstCloseAttempt=!1,$(e.dialog).find(".confirm-closing").fadeOut(100,(function(){$(e.dialog).find("button.btn-close").fadeIn(100)})),e.cleanForm()}))}fillFormModal(){return this.options.loadFormData()}invokeModalInit(e={}){const t=this;this.delegateModalClosing(),this.data=e||this.fillFormModal(),this.options.onModalInit(this.data,this),$(this.element).parents(".modal").on("show.bs.modal",(function(){t.options.onModalShow()})),this.initialState=this.createFormSnapshot(),this.currentState=null,this.delegateResetButton()}delegateSubmit(){this.bindFormValidation();const e=this;this.submitHandler=function(t){e.options.isSyncRequest||(t.preventDefault(),t.stopPropagation(),e.makeRequest())},$(this.element).on("submit",this.submitHandler)}bindFormValidation(){const e=this;$(this.element).find("input,select,textarea").each((async function(t,a){const l=$(this);let n=-1;const s=async e=>e.data.resolveDNS&&l.val().match(NtopUtils.REGEXES.domainName)?await(async()=>{const e=l.parent().find(".spinner-border");l.attr("readonly",!0),e.show();const t=await NtopUtils.resolveDNS($(a).val());return l.removeAttr("readonly"),e.hide(),t.rc<0?(a.setCustomValidity(t.rc_str),[!1,t.rc_str_hr]):(a.setCustomValidity(""),[!0,"Success"])})():e.data.cannotBeEmpty&&e.isInputEmpty?(a.setCustomValidity("Please fill the input."),[!1,e.data.validationEmptyMessage||i18n_ext.missing_field]):a.validity.patternMismatch?(a.setCustomValidity("Pattern mismatch."),[!1,e.data.validationMessage||i18n_ext.invalid_field]):a.validity.rangeOverflow?(a.setCustomValidity("Value exceed the maximum value."),[!1,e.data.rangeOverflowMessage||i18n_ext.invalid_field]):a.validity.rangeUnderflow?(a.setCustomValidity("Value is under the minimum value."),[!1,e.data.rangeUnderflowMessage||i18n_ext.invalid_field]):(a.setCustomValidity(""),[!0,"Success"]),i=async()=>{const e={data:{validationMessage:l.data("validationMessage"),validationEmptyMessage:l.data("validationEmptyMessage"),cannotBeEmpty:"required"===l.attr("required")||1==l.data("validationNotEmpty"),resolveDNS:l.data("validationResolvedns"),rangeOverflowMessage:l.data("validationRangeOverflowMessage"),rangeUnderflowMessage:l.data("validationUnderflowOverflowMessage")},isInputEmpty:"string"==typeof l.val()&&""==l.val().trim()},[t,a]=await s(e);let n=l.parent().find(".invalid-feedback");0==n.length&&(n=$("<span class='invalid-feedback'></span>")),t?(l.removeClass("is-invalid"),n.fadeOut(500,(function(){$(this).remove()}))):(l.addClass("is-invalid"),l.parent().append(n),n.text(a))};$(this).off("input").on("input",(function(t){e.currentState=e.createFormSnapshot(),-1!=n&&clearTimeout(n),l.attr("formnovalidate")||(n=setTimeout((()=>{i(),e.toggleFormSubmission()}),300),e.firstCloseAttempt=!1)})),$(this).off("invalid").on("invalid",(function(e){e.preventDefault(),l.attr("formnovalidate")||i()}))}))}getModalID(){return $(this.element).parents(".modal").attr("id")}toggleFormSubmission(){let e=!0;$(this.element).find("input:not(:disabled),select:not(:disabled),textarea:not(:disabled)").each((function(t,a){e&=a.validity.valid})),e?$(this.element).find("[type='submit'],[type='test']").removeAttr("disabled"):$(this.element).find("[type='submit'],[type='test']").attr("disabled","disabled")}cleanForm(){$(this.element).find("input,textarea,select").each((function(e,t){$(this).removeClass("is-valid").removeClass("is-invalid")})),$(this.element)[0].reset()}makeRequest(){const e=$(this.element).find(".invalid-feedback"),t=$(this.element).find("[type='submit']");let a=this.options.beforeSumbit(this.data);a.csrf=this.csrf,a=$.extend(a,this.options.submitOptions),t.attr("disabled","disabled");const l=this;if(this.options.endpoint){let n;n="post"==l.options.method?$.ajax({url:this.options.endpoint,data:JSON.stringify(a),method:l.options.method,dataType:"json",contentType:"application/json; charset=utf-8"}):$.get(this.options.endpoint,a),this.isSubmitting=!0,n.done((function(t,n){l.isSubmitting=!1,l.currentState=null,l.options.resetAfterSubmit&&l.cleanForm(),e.hide();l.options.onSubmitSuccess(t,a,l)&&(l.dialog.modal?l.dialog.modal("hide"):(l.dialog[0].hidden=!0,$(".modal-backdrop.fade.show").remove())),$(l.element).off("submit",l.submitHandler),l.delegateSubmit()})).fail((function(t,n,s){l.isSubmitting=!1;const i=t.responseJSON;void 0!==i.rc&&i.rc<0&&e.html(i.rc_str_hr).show(),l.options.onSubmitError(i,a,n,s)})).always((function(e){t.removeAttr("disabled")}))}else{l.currentState=null,e.hide();l.options.onSubmitSuccess({},a,l)&&(l.dialog.modal?l.dialog.modal("hide"):l.dialog[0].hidden=!0),$(l.element).off("submit",l.submitHandler),l.delegateSubmit(),t.removeAttr("disabled")}}delegateResetButton(){const e=this,t=$(this.element).find("[type='reset']");if(0==t.length)return;const a=NtopUtils.serializeFormArray($(this.element).serializeArray());t.click((function(t){t.preventDefault(),$(e.element).find("input:visible,select").each((function(e,t){const l=$(t).attr("name");$(t).val(a[l]).removeClass("is-invalid").removeClass("is-valid")}))}))}}const d={no_formatting:{id:"no_formatting",um:null,step:null,decimal:null,scale_values:null},number:{id:"number",um:["","K","M","G","T"],step:1e3,decimal:null,scale_values:null},full_number:{id:"number",um:["","K","M","G","T"],step:1e3,decimal:null,scale_values:null,thousands_sep:","},bytes:{id:"bytes",um:["B","KB","MB","GB","TB","PB","EB"],step:1024,decimal:2,scale_values:null,absolute_value:!0},bps:{id:"bps",um:["bps","Kbps","Mbps","Gbps","Tbps","Pbps"],step:1e3,decimal:2,scale_values:8,absolute_value:!0},bps_no_scale:{id:"bps_no_scale",um:["bps","Kbps","Mbps","Gbps","Tbps","Pbps"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},speed:{id:"speed",um:["bit","Kbit","Mbit","Gbit","Tbit","Pbit"],step:1e3,decimal:0,scale_values:null,absolute_value:!0},flows:{id:"flows",um:["flows","Kflows","Mflows","Gflows"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},fps:{id:"fps",um:["flows/s","Kflows/s","Mflows/s","Gflows/s"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},alerts:{id:"alerts",um:["alerts","Kalerts","Malerts","Galerts"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},alertps:{id:"alertps",um:["alerts/s","Kalerts/s","Malerts/s","Galerts/s"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},hits:{id:"hits",um:["hits","Khits","Mhits","Ghits"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},hitss:{id:"hitss",um:["hits/s","Khits/s","Mhits/s","Ghits/s"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},packets:{id:"packets",um:["packets","Kpackets","Mpackets","Gpackets","Tpackets"],step:1e3,decimal:0,scale_values:null,absolute_value:!0},pps:{id:"pps",um:["pps","Kpps","Mpps","Gpps","Tpps"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},ms:{id:"ms",um:["ms","s"],step:1e3,decimal:2,scale_values:null,absolute_value:!0},percentage:{id:"percentage",um:["%"],step:101,decimal:1,scale_values:null,max_value:100,absolute_value:!0}};function _(e){let t=d[e],a=3;null!=t.decimal&&t.decimal>0&&(a=6);let l=0;return null!=t.um&&(l=Math.max(...t.um.map((e=>e.length)))),a+1+l}function p(e,t){let a=d[e];if(e==d.no_formatting.id||null==t)return null;null!=a.scale_values&&(t*=a.scale_values);let l=a.step;t<0&&(t*=-1);let n=0,s=a.um;for(;t>=l&&n<s.length;)t/=l,n+=1;return n}function f(e,t,a){let l=d[e];if(null==l)return null;t|=l.absolute_value;return function(n){if(null==n)return"";if(e==d.no_formatting.id)return n;null!=l.scale_values&&(n*=l.scale_values);let s=n<0;if(s&&(n*=-1),null!=l.max_value&&n>l.max_value&&(n=l.max_value),l.thousands_sep){for(var i=(n+="").split("."),o=i[0],r=i.length>1?"."+i[1]:"",c=/(\d+)(\d{3})/;c.test(o);)o=o.replace(c,"$1,$2");return o+r}let u=l.step,_=l.decimal,p=l.um,f=0;for(;n>=u&&f<p.length&&!a||null!=a&&f<a;)n/=u,f+=1;return null!=_&&_>0?(n*=Math.pow(10,_),n=Math.round(n),n=(n/=Math.pow(10,_)).toFixed(_)):n=Math.round(n),s&&!t&&(n*=-1),`${`${n}`} ${`${p[f]}`}`}}const m={types:d,getUnitMeasureLen:_,getFormatter:f,getScaleFactorIndex:p};window.NtopUtils=a,window.datatableInitRefreshRows=function(e,t,a,l){var n=e.data("datatable"),s=n.resultset.data,i=e.data("dt-rr-timer"),o=e.data("dt-rr-ajax");l=l||{},i&&(clearInterval(i),e.removeData("dt-rr-timer")),o&&(o.abort(),e.removeData("dt-rr-ajax"));var c=[],u={};for(var d in s){var _=s[d];if(_[t]){var p=_[t];u[p]=d,c.push(p)}}var f={custom_hosts:c.join(",")},m=n.options.url,v=!0,h=function(a){if("string"==typeof a&&(a=JSON.parse(a)),a){for(var s in a.data){var i=a.data[s],o=i[t];if(o&&u[o]){var c=u[o],d=n.rows[c],_=$("td",d);for(var p in i){var f=_[r(e,p)],m=$(f),h=m.data("dt-rr-cur-val")||$(f).html(),g=l[p],b=i[p],y="";g&&(parseFloat(b)!=b&&console.warn("Invalid number: "+b),v||(y=" "+NtopUtils.drawTrend(parseFloat(b),parseFloat(h))),m.data("dt-rr-cur-val",b),b=g(b)),$(f).html(0!=b?b+y:"")}}}v=!1,e.removeData("dt-rr-ajax")}else console.error("Bad JSON result")};e.data("dt-rr-timer",setInterval((function(){e.data("dt-rr-ajax")||e.data("dt-rr-ajax",$.ajax({type:"GET",url:m,data:f,cache:!1,success:h}))}),a)),h(n.resultset)},window.datatableForEachRow=function(e,t){$("tr:not(:first)",e).each((function(e){var a;if("function"==typeof t)t.bind(this)(e);else for(a=0;a<t.length;a++)t[a].bind(this)(e)}))},window.datatableIsEmpty=s,window.datatableRemoveEmptyRow=function(e){$("tbody tr.emptyRow",$(e)).remove()},window.datatableAddEmptyRow=l,window.datatableGetNumDisplayedItems=n,window.datatableGetByForm=i,window.datatableUndoAddRow=function(e,t,a,n){a&&$(a).removeAttr("disabled").removeClass("disabled");var o=$(e).closest("form");$(e).remove(),aysUpdateForm(o);var r=i(o);s(r)&&l(r,t),n&&window[n](e)},window.datatableAddButtonCallback=o,window.datatableAddDeleteButtonCallback=function(e,t,a){o.bind(this)(e,a,"btn-danger",t,"javascript:void(0)",!0,"Delete")},window.datatableAddActionButtonCallback=function(e,t,a,l=!0,n=""){o.bind(this)(e,a,"btn-info",t,"javascript:void(0)",l,n)},window.datatableAddFilterButtonCallback=function(e,t,a,l="",n=!0){o.bind(this)(e,a,"btn-warning",t,"javascript:void(0)",n,l)},window.datatableAddLinkButtonCallback=function(e,t,a,l=""){o.bind(this)(e,a,"btn-info","",t,!0,l)},window.datatableMakeSelectUnique=function(e,t,a){function l(e,t,a,l){$("[id^="+t+"]").each((function(){var t=a($(this));t[0]!=e[0]&&l(t)}))}function n(e,t){if(t)e.removeAttr("disabled");else{var a=e.closest("select"),l=a.val()==e.val();if(e.attr("disabled","disabled"),l){var n=a.find("option:not([disabled])").first().val();a.val(n),a.attr("data-old-val",n)}}}function s(e,t,a){var s=$(this).attr("data-old-val")||"",i=$(this).val()||"",o=[];s==i&&(s=""),l($(this),e,t,(function(e){n(e.find("option[value='"+s+"']"),!0),n(e.find("option[value='"+i+"']"),!1),o.push(e)})),a($(this),s,i,o,n),$(this).attr("data-old-val",i)}var i=(a=NtopUtils.paramsExtend({on_change:$.noop,selector_fn:function(e){return e.find("select").first()}},a)).selector_fn(e);i.on("change",(function(){s.bind(this)(t,a.selector_fn,a.on_change)})),i.on("remove",(function(){$(this).val("").trigger("change")})),function(e,t,a){e.val(""),l(e,t,a,(function(e){e.trigger("change")}));var n=e.find("option:not([disabled])").first().val();e.val(n),e.trigger("change")}(i,t,a.selector_fn)},window.datatableIsLastPage=function(e){var t=$("#dt-bottom-details .pagination li:nth-last-child(3)",$(e));return!(1==t.length&&0==t.hasClass("active"))},window.datatableGetColumn=function(e,t,a){var l=e.data("datatable").resultset.data.filter((function(e){return e[t]===a}));if(l)return l[0]},window.datatableGetColumnIndex=r,window.$.fn.modalHandler=function(e){if(1!=this.length)throw new Error("Only a form element can by initialized!");const t=$.extend({csrf:"",endpoint:"",resetAfterSubmit:!0,dontDisableSubmit:!1,isSyncRequest:!1,method:"get",loadFormData:function(){},onModalInit:function(e){},onModalShow:function(){},beforeSumbit:function(){return{}},onSubmitSuccess:function(e){},onSubmitError:function(e,t,a){},onModalReset:function(e){}},e),a=new u(this,t);return a.delegateSubmit(),a},window.ebpfUtils=c,window.ntopFormatterUtils=m;var v={};window.makeUniqueValidator=function(e){return function(t){var a=t.val(),l=0;return!a||(e(t).each((function(){$(this).val()==a&&(l+=1)})),1==l)}},window.memberValueValidator=function(e){var t=e.val();return""===t||(NtopUtils.is_mac_address(t)||NtopUtils.is_network_mask(t,!0))},window.makePasswordPatternValidator=function(e){return function(t){return!t.val()||$(t).val().match(e)}},window.passwordMatchValidator=function(e){var t=$(e).closest("form").find("[data-passwordmatch]").not(e);return!e.val()||!t.val()||t.val()===e.val()},window.poolnameValidator=function(e){return!e.val()||$(e).val().match(/^[a-z0-9_]*$/)},window.passwordMatchRecheck=function(e){var t=$(e).find("[data-passwordmatch]"),a=0;t.each((function(){""!=$(this).val()&&a++})),a==t.length&&t.trigger("input")},window.hostOrMacValidator=function(e){var t=e.val();return""===t||(NtopUtils.is_mac_address(t)||NtopUtils.is_good_ipv4(t)||NtopUtils.is_good_ipv6(t))},window.ipAddressValidator=function(e){var t=e.val();return""===t||(NtopUtils.is_good_ipv4(t)||NtopUtils.is_good_ipv6(t))},window.bpfValidator=function(e,t=!1){var a=e.val();if(""===a.trim())return!0;var l=e.attr("name");v[l]||(v[l]={ajax_obj:null,valid:!0,timer:null,submit_remind:!1,last_val:null});var n=v[l],s=function(){n.timer=null;var e=function(e){n.ajax_obj=null,n.valid=e,n.last_val=a};n.last_val!==a?(n.ajax_obj&&n.ajax_obj.abort(),n.ajax_obj=$.ajax({type:"GET",url:`${http_prefix}/lua/pro/rest/v2/check/filter.lua`,async:!t,data:{query:a},error:function(){e(n.valid)},success:function(t){var a=!!t.response;e(a)}})):e(n.valid)};return t?s():n.last_val===a||(n.timer&&(clearTimeout(n.timer),n.submit_remind=!1),n.timer=setTimeout(s,250)),n.valid};const h=function(){let e={},t=[];return{ready:function(a){e[a]=!0,t.filter((e=>e.component_name==a)).forEach((e=>e.resolve())),t=t.filter((e=>e.component_name!=a))},on_ready:function(a){return new Promise(((l,n)=>{e[a]?l():t.push({resolve:l,component_name:a,completed:!1})}))}}}(),b=function(){let e={};return{is_array:function(e){return Array.isArray(e)},is_object:function(e){return"object"==typeof e&&!this.is_array(e)&&null!==e},clone:function(e){if(null==e)return null;if(this.is_object(e))return $.extend(!0,{},e);if(Array.isArray(e)){let t=[];for(let a=0;a<e.length;a+=1){let l=this.clone(e[a]);t.push(l)}return t}return e},object_to_array:function(e){if(null==e)return[];let t=[];for(let a in e)t.push(e[a]);return t},get_utc_seconds:function(e){return null==e&&(e=Date.now()),Number.parseInt(e/1e3)},get_timeframes_dict:function(){const e=60;let t=new Date,a=new Date,l=new Date,n=new Date;return{min:e,"5_min":300,"10_min":600,"30_min":1800,hour:3600,"2_hours":7200,"6_hours":21600,"12_hours":43200,day:this.get_utc_seconds(Date.now()-t.setDate(t.getDate()-1)),week:this.get_utc_seconds(Date.now()-a.setDate(a.getDate()-7)),month:this.get_utc_seconds(Date.now()-l.setMonth(l.getMonth()-1)),year:this.get_utc_seconds(Date.now()-n.setMonth(n.getMonth()-12))}},get_timeframe_from_timeframe_id:function(e){let t=this.get_timeframes_dict();if(null==t[e])throw`Wrong timeframe_id passed ${e}, valid intervals are: ${Object.keys(t).join(", ")}`;return t[e]},round_time_by_timeframe_id:function(e,t){return e-e%this.get_timeframe_from_timeframe_id(t)},set_default_time_interval:function(e="30_min",t){let a={epoch_begin:x.get_url_entry("epoch_begin"),epoch_end:x.get_url_entry("epoch_end")};const l=this.get_utc_seconds(Date.now());let n=this.get_timeframe_from_timeframe_id(e);return a.epoch_begin=l-n,a.epoch_end=l,null!=t&&(a.epoch_begin=this.round_time_by_timeframe_id(a.epoch_begin,t),a.epoch_end=this.round_time_by_timeframe_id(a.epoch_end,t)),x.set_key_to_url("epoch_begin",a.epoch_begin),x.set_key_to_url("epoch_end",a.epoch_end),a},check_and_set_default_time_interval:function(e="30_min",t,a=!1,l){let n=this.get_url_epoch_interval();return null==n.epoch_begin||null==n.epoch_end||null!=t&&1==t(n)?(n=this.set_default_time_interval(e,l),n):1==a?n:null},get_url_epoch_interval:function(){return{epoch_begin:x.get_url_entry("epoch_begin"),epoch_end:x.get_url_entry("epoch_end")}},from_utc_s_to_server_date:function(e){let t=1e3*e,a=new Date(t).getTimezoneOffset(),l=moment.tz(t,ntop_zoneinfo)._offset;return new Date(t+1e3*(l+a)*60)},get_date_format:async function(e,t,a){const l={csrf:t};let n=`${a}/lua/rest/v2/get/timeseries/date_format.lua`;const s=NtopUtils.buildURL(n,{is_range_picker:e});return await b.http_request(s,l)},from_utc_to_server_date_format:function(e,t){return null==t&&(t="DD/MMM/YYYY HH:mm:ss"),moment.tz(e,ntop_zoneinfo).format(t)},copy_object_keys:function(e,t,a=!1){if(null!=e)for(let l in e)null!=e[l]&&"__proto__"!==l&&"constructor"!==l&&(1==a&&this.is_object(e[l])&&this.is_object(t[l])?this.copy_object_keys(e[l],t[l],a):t[l]=e[l])},get_cve_details_url:(e,t)=>"cve"==t?`https://nvd.nist.gov/vuln/detail/${e}`:"openvas"==t?`https://vulners.com/openvas/OPENVAS:${e}`:void 0,set_http_globals_headers(t){e=t},http_post_request:async function(e,t,a,l){if(null==t.csrf)throw`NULL csrf in ${e} POST request.`;return this.http_request(e,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)},a,l)},http_request:async function(t,a,l,n){try{null==a&&(a={}),null==a.headers&&(a.headers={}),null!=a.headers&&null!=e&&(a.headers={...a.headers,...e});let l=await fetch(t,a);if(!1===l.ok)return console.error(`http_request ${t}\n ok == false`),console.error(l),null;let s=await l.json();return!0===n?s:s.rsp}catch(e){if(console.error(e),console.error("URL: "+t),1==l)throw e;return null}},download_URI:function(e,t){var a=document.createElement("a");a.download=t,a.href=e,document.body.appendChild(a),a.click(),document.body.removeChild(a)},get_random_string:function(){return Math.random().toString(16).substr(2,8)},string_hash_code:function(e){let t,a,l=0;if(0===e.length)return l;for(t=0;t<e.length;t++)a=e.charCodeAt(t),l=(l<<5)-l+a,l|=0;return l},mod:function(e,t){return(e%=t)<0&&(e+=t),e}}}(),y=function(){let e={},t={};const a=e=>b.clone(e),l=function(e,l){for(let n in t){if(n==l)continue;(0,t[n])(a(e))}};return{get_status:function(t){return 1==t?e:a(e)},update_subscribers:function(){const e=this.get_status();l(e)},on_status_change:function(e,l,n){if(t[e]=l,1==n){let e=this.get_status();l(a(e))}},replace_status:function(t,a){!function(t){e=t}(t),l(t,a)},add_obj_to_status:function(e,t){let a=this.get_status();b.copy_object_keys(e,a),this.replace_status(a,t)},add_value_to_status:function(e,t,a){let l=this.get_status();l[e]=t,this.replace_status(l,a)}}}(),w={},x=function(){let e={};return b.copy_object_keys(w,e),{get_url_params:function(){return window.location.search.substring(1)},get_url_search_params:function(e){null==e&&(e=this.get_url_params());return new URLSearchParams(e)},get_url_entries:function(e){return this.get_url_search_params(e).entries()},get_url_entry:function(e,t){let a=this.get_url_entries(t);for(const[t,l]of a)if(t==e)return l;return null},get_url_object:function(e){let t=this.get_url_entries(e),a={};for(const[e,l]of t)a[e]=l;return a},open_new_window:function(e){null==e&&(e=window.location),window.open(e)},reload_url:function(){window.location.reload()},go_to_url:function(e){window.history.pushState({},"",window.location),window.location.replace(e)},replace_url:function(e){window.history.replaceState({},null,`?${e}`)},replace_url_and_reload:function(e){this.replace_url(e),this.reload_url()},serialize_param:function(e,t){return null==t&&(t=""),`${e}=${encodeURIComponent(t)}`},set_custom_key_serializer:function(t,a){e[t]=a},obj_to_url_params:function(t){let a=[];const l=this.serialize_param;for(let n in t){let s=e[n];null==s&&(s=l);let i=s(n,t[n]);a.push(i)}return a.join("&")},delete_params:function(e){let t=this.get_url_search_params();e.forEach((e=>{t.delete(e)})),this.replace_url(t.toString())},delete_key_from_url:function(e){let t=this.get_url_search_params();t.delete(e),this.replace_url(t.toString())},set_key_to_url:function(e,t){null==t&&(t="");let a=this.get_url_search_params();a.set(e,t),this.replace_url(a.toString())},add_obj_to_url:function(e,t){let a=this.obj_to_url_params(e),l=this.get_url_search_params(t),n=this.get_url_entries(a);for(const[e,t]of n)l.set(e,t);let s=l.toString();if(null!=t)return s;this.replace_url(s)}}}(),k={EPOCH_CHANGE:"epoch_change",FILTERS_CHANGE:"filters_change"},S={EPOCH_CHANGE:function(e,t){return e.epoch_begin!=t.epoch_begin||e.epoch_end!=t.epoch_end},FILTERS_CHANGE:function(e,t){return null==e.filters&&null!=t.filters||null!=e.filters&&null==t.filters||null!=e.filters&&null!=t.filters&&(e.filters.length!=t.filters.length||e.filters.some((e=>null==t.filters.find((t=>t.id==e.id)))))}},N={SHOW_MODAL_FILTERS:"show_modal_filters",MODAL_FILTERS_APPLY:"modal_filters_apply",SHOW_GLOBAL_ALERT_INFO:"show_global_alert_info",VIS_DATA_LOADED:"vis_data_loaded",CHANGE_PAGE_TITLE:"change_page_title",DATATABLE_LOADED:"datatable_loaded",GET_INTERFACE_FATA:"get_interface_data",COMPONENT_EPOCH_INTERVAL_CHANGE:"component_epoch_interval_change"},C=function(){const e="events_manager";let t={},a={};const l=e=>b.clone(e),n=function(e,t,a){for(let n in e){if(n==a)continue;(0,e[n])(l(t))}},s=(e,t)=>`${e}_${t}`;y.on_status_change(e,(function(e){for(let l in k){if(1==(0,S[l])(e,t)){let t=a[l];n(t,e)}}t=e}),!0);const i=function(e,t,l,i){null!=i&&(e=s(e,i));let o=a[e];null!=o&&n(o,t,l)},o=function(e,t,n,i,o){if(1==o&&(t=s(t,e)),null==a[t]&&(a[t]={}),1==i){let e=y.get_status();n(l(e))}a[t][e]=n};return{emit_custom_event:function(e,t,a){i(e,t,null,a)},on_custom_event:function(e,t,a,l){o(e,t,a,null,l)},emit_event:function(t,a,l){i(t,a,l),y.add_obj_to_status(a,e)},on_event_change:function(e,t,a,l){o(e,t,a,l)}}}();function E(e,t,a,l,n){this.name=e,this.update_url=t,this.url_params=a,this.units=l,this.refresh=n;let s=[],i="",o=[],r=[],c=[];var u=[],d=[],_=[],p=function(e,t){var a=500,l=325,n=52,s=14,i=250,o=116;$(e).hasClass("pie-chart-small")&&(l=250,n=(o=(a=330)/5+15)/2);var r=d3.layout.pie().value((function(e){return 0==e.value&&(e.value=1),e.value})),c=d3.scale.category20(),u=d3.svg.arc().startAngle((function(e){return e.startAngle})).endAngle((function(e){return e.endAngle})).innerRadius(n).outerRadius(o),d=d3.select(e).append("svg:svg").attr("width",a).attr("height",l).attr("viewBox","0 0 "+a+" "+l).attr("preserveAspectRatio","xMidYMid"),_=d.append("svg:g").attr("class","arc").attr("transform","translate("+a/2+","+l/2+")"),p=d.append("svg:g").attr("class","label_group").attr("transform","translate("+a/2+","+l/2+")"),f=d.append("svg:g").attr("class","center_group").attr("transform","translate("+a/2+","+l/2+")");_.append("svg:circle").attr("fill","#EFEFEF").attr("r",o),f.append("svg:circle").attr("fill","white").attr("r",n);var m=null,v=null;t&&(f.append("svg:text").attr("class","label").attr("dy",-15).attr("text-anchor","middle").text("TOTAL"),v=f.append("svg:text").attr("class","total").attr("dy",7).attr("text-anchor","middle").text("Waiting..."),m=f.append("svg:text").attr("class","units").attr("dy",21).attr("text-anchor","middle").text(t));return[_,r,v,m,c,i,u,p,f,o,s]}(e,l),f=p[0],m=p[1],v=p[2],h=p[4],g=p[5],b=p[6],y=p[7],w=p[9],x=p[10];function k(e,t){return e.label<t.label?-1:e.label>t.label?1:0}function S(e,t){var a,l;d[t]?(a=d[t].startAngle,l=d[t].endAngle):!d[t]&&d[t-1]?(a=d[t-1].endAngle,l=d[t-1].endAngle):!d[t-1]&&d.length>0?(a=d[d.length-1].endAngle,l=d[d.length-1].endAngle):(a=0,l=0);t=d3.interpolate({startAngle:a,endAngle:l},{startAngle:e.startAngle,endAngle:e.endAngle});return function(e){var a=t(e);return b(a)}}function N(e,t){s0=2*Math.PI,e0=2*Math.PI;t=d3.interpolate({startAngle:e.startAngle,endAngle:e.endAngle},{startAngle:s0,endAngle:e0});return function(e){var a=t(e);return b(a)}}function C(e,t){var a;a=d[t]?(d[t].startAngle+d[t].endAngle-Math.PI)/2:!d[t]&&d[t-1]?(d[t-1].startAngle+d[t-1].endAngle-Math.PI)/2:!d[t-1]&&d.length>0?(d[d.length-1].startAngle+d[d.length-1].endAngle-Math.PI)/2:0;var l=(e.startAngle+e.endAngle-Math.PI)/2,n=d3.interpolateNumber(a,l);return function(e){var t=n(e);return"translate("+Math.cos(t)*(w+x)+","+Math.sin(t)*(w+x)+")"}}this.update=function(){$.ajax({type:"GET",url:this.update_url,data:this.url_params,success:function(e){let t;"object"==typeof e?t=e:"string"==typeof e&&(t=jQuery.parseJSON(e)),t&&function(e){e.rsp&&(e=e.rsp);e.sort(k),s=e,d=_,u=m(s);var t=0;function a(e,a,l){return e.name=s[a].label,e.value=s[a].value,e.url=s[a].url,t+=e.value,e.value>0}(_=u.filter(a)).length>0&&d.length>0&&(f.selectAll("circle").remove(),v&&v.text((function(){return(t/1024).toFixed(1)})),i=f.selectAll("path").data(_),i.enter().append("svg:path").attr("stroke","white").attr("stroke-width",.5).attr("fill",(function(e,t){return h(t)})).transition().duration(g).attrTween("d",S),i.transition().duration(g).attrTween("d",S),i.exit().transition().duration(g).attrTween("d",N).remove(),o=y.selectAll("line").data(_),o.enter().append("svg:line").attr("x1",0).attr("x2",0).attr("y1",-w-3).attr("y2",-w-8).attr("stroke","gray").attr("transform",(function(e){return"rotate("+(e.startAngle+e.endAngle)/2*(180/Math.PI)+")"})),o.transition().duration(g).attr("transform",(function(e){return"rotate("+(e.startAngle+e.endAngle)/2*(180/Math.PI)+")"})),o.exit().remove(),r=y.selectAll("text.value").data(_).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?5:-7})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){return(e.value/t*100).toFixed(1)+"%"})),r.enter().append("svg:text").attr("class","value").attr("transform",(function(e){return"translate("+Math.cos((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+","+Math.sin((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+")"})).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?5:-7})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){if(t<=1)return"";return(e.value/t*100).toFixed(1)+"%"})),r.transition().duration(g).attrTween("transform",C),r.exit().remove(),c=y.selectAll("text.units").data(_).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?17:5})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){return e.name})).on("click",(function(e){e.url&&(window.location.href=e.url)})),c.enter().append("svg:text").attr("class","units").attr("transform",(function(e){return"translate("+Math.cos((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+","+Math.sin((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+")"})).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?17:5})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){return e.name})).on("click",(function(e){e.url&&(window.location.href=e.url)})),c.transition().duration(g).attrTween("transform",C),c.exit().remove())}(t)}})},this.update(),this.update()}window.ntopng_events=k,window.ntopng_events_manager=C,window.ntopng_status_manager=y,window.ntopng_utility=b,window.ntopng_url_manager=x,window.ntopng_sync=h,window.ntopng_custom_events=N,E.prototype.setUrlParams=function(e){this.url_params=e,this.forceUpdate()},E.prototype.forceUpdate=function(e){this.stopInterval(),this.update(),this.startInterval()},E.prototype.setInterval=function(e){this.pieInterval=e},E.prototype.stopInterval=function(){clearInterval(this.pieInterval)},E.prototype.startInterval=function(){this.pieInterval=setInterval(this.update(),this.refresh)};const A={},T={db_analyze:function(e,t,a){const{dataPointIndex:l}=a,{filter:n}=a.w.config;let s;if(a.w.config.filtering_labels&&(s=a.w.config.filtering_labels[l]),0==n.length||void 0===s)return;let i=ntopng_status_manager.get_status().filters;i.push({id:n[0],operator:"eq",value:s}),ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:i})},none:function(e,t,a){},standard:function(e,t,a){const{seriesIndex:l,dataPointIndex:n}=a,{series:s}=a.w.config;if(-1===l)return;if(void 0===s)return;const i=s[l];if(void 0!==i.base_url){const e=i.start_url||"",t=i.data[n].meta.url_query;location.href=`${i.base_url}?${e}${t}`}}},O={format_bytes:function(e,{config:t,seriesIndex:a,dataPointIndex:l}){return NtopUtils.bytesToSize(e)},format_pkts:function(e,{config:t,seriesIndex:a,dataPointIndex:l}){return NtopUtils.formatPackets(e)},format_value:function(e,{config:t,seriesIndex:a,dataPointIndex:l}){return NtopUtils.formatValue(e)},format_multiple_date:function(e,{config:t,seriesIndex:a,dataPointIndex:l}){return new Date(e[0])+" - "+new Date(e[1])},format_label_from_xy:function({series:e,seriesIndex:t,dataPointIndex:a,w:l}){const n=l.config.series[t].data[a],s=n.x,i=n.y;return`\n            <div class='apexcharts-theme-light apexcharts-active' id='test'>\n                <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n                    ${n.meta.label}\n                </div>\n                <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${l.config.xaxis.title.text}</b>: ${s}\n                    </div>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${l.config.yaxis[0].title.text}</b>: ${i}\n                    </div>\n                </div>\n            </div>`},format_label_from_xname:function({series:e,seriesIndex:t,dataPointIndex:a,w:l}){const n=l.config.series[t].data[a],s=n.name,i=n.y;return`\n            <div class='apexcharts-theme-light apexcharts-active' id='test'>\n                <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n                    ${n.meta.label}\n                </div>\n                <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${l.config.xaxis.title.text}</b>: ${s}\n                    </div>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${l.config.yaxis[0].title.text}</b>: ${i}\n                    </div>\n                </div>\n            </div>`}},P=O.format_value;class U{static registerWidget(e){if(null===e)throw new Error("The passed widget reference is null!");if(e.name in A)throw new Error(`The widget ${e.name} is already defined!`);A[e.name]=e}static getWidgetByName(e){if(e in A)return A[e];throw new Error(`Widget ${e} not found!`)}}class I{constructor(e,t={},a=0,l={}){this._fetchedData=[],this.name=e,this._updateTime=a,this._datasource=t,this._additionalParams=l}async init(){U.registerWidget(this),this._fetchedData=await this._fetchData(),this._updateTime>0&&setInterval((async()=>{await this.update(this._datasource.params)}),this._updateTime)}async destroy(){}async destroyAndUpdate(e={}){await this.destroy(),await this.update(e)}async updateByUrl(e){const t=new URL(`${location.origin}${this._datasource.name}`);let a=ntopng_url_manager.get_url_entries(e);for(const[e,l]of a)t.searchParams.set(e,l);this._datasource.endpoint=t.pathname+t.search,this._fetchedData=await this._fetchData()}async update(e={}){const t=new URL(`${location.origin}${this._datasource.name}`);for(const[a,l]of Object.entries(e))t.searchParams.set(a,l);this._datasource.endpoint=t.pathname+t.search,this._fetchedData=await this._fetchData()}async _fetchData(){const e=await fetch(`${http_prefix}${this._datasource.endpoint}`);return await e.json()}}const j=(e,t)=>{let a=t.position().top;const l=e.height(),n=$(window).height();if(l+a>=n){const s=n-a;s<=150?a=a-l+t.outerHeight():e.css({"max-height":s-20,"overflow-y":"auto"})}e.css("top",`${a}px`)};$(window).on("scroll",(function(){$(this).scrollTop()>=32?$("#n-navbar").addClass("scrolled bg-light"):$("#n-navbar").removeClass("scrolled bg-light")})),$((()=>{const e=()=>{if(0==$(".sidebar-close-layer").length){const e=$("<div class='sidebar-close-layer' style='display:none'></div>");e.on("click",(function(){$("#n-sidebar").removeClass("active"),e.fadeOut((function(){$(this).remove()}))})),$("#wrapper").append(e),e.fadeIn()}else $(".sidebar-close-layer").fadeOut((function(){$(this).remove()}));$("#n-sidebar").toggleClass("active")};$("#n-sidebar a.submenu").bind({mouseenter:function(){let e=$(this).parent().find("div[id$='submenu']");j(e,$(this)),e.show()},mouseleave:function(){$(this).parent().find("div[id$='submenu']").hide()}}),$("div[id$='submenu']").bind({mouseenter:function(){$(this).show()},mouseleave:function(){$(this).hide()}}),$("button[data-bs-toggle='sidebar']").on("click",(function(){e()}))})),$(window).on("resize",(function(){const e=$("#n-sidebar").find("div.show[id$='submenu']");if(e.length>0){const t=e.parent().find("a[data-bs-toggle='collapse']");j(e,t)}}));const M=function(){const e={series:[],chart:{height:"100%",width:"100%",toolbar:{tools:{zoomout:!1,download:!1,zoomin:!1,zoom:" ",selection:!1,pan:!1,reset:!1}},events:{}},xaxis:{tooltip:{enabled:!1}},yaxis:{labels:{show:!0,style:{colors:[],fontSize:"11px",fontWeight:400,cssClass:""}},title:{rotate:-90,offsetY:0,offsetX:0,style:{fontSize:"11px",fontWeight:900,cssClass:""}},tooltip:{enabled:!1}},grid:{show:!1},legend:{show:!0}},t=function(e){e.xaxis.labels.formatter=function(e,{series:t,seriesIndex:a,dataPointIndex:l,w:n}){return b.from_utc_to_server_date_format(e)}},l=function(){let t=b.clone(e);return b.copy_object_keys({chart:{stacked:!0,type:"bar",zoom:{enabled:!0,type:"x"}},tooltip:{x:{format:"dd MMM yyyy HH:mm:ss"},y:{}},xaxis:{labels:{show:!0,datetimeUTC:!1,formatter:null},axisTicks:{show:!1},type:"datetime",axisBorder:{show:!0},convertedCatToNumeric:!1},dataLabels:{enabled:!1},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"}},t,!0),t}(),n=function(){let t=b.clone(e);return b.copy_object_keys({chart:{stacked:!0,type:"area",zoom:{enabled:!0,type:"x"}},tooltip:{x:{format:"dd MMM yyyy HH:mm:ss"},y:{}},xaxis:{labels:{show:!0,datetimeUTC:!1,formatter:null},axisTicks:{show:!1},type:"datetime",axisBorder:{show:!0},convertedCatToNumeric:!1},dataLabels:{enabled:!1},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"}},t,!0),t}(),s=function(){let t=b.clone(e),l={chart:{stacked:!0,type:"polarArea",height:400},yaxis:{show:!0,labels:{formatter:a.bytesToSize}},dataLabels:{enabled:!0,formatter:function(e,t){return e?`${e.toFixed(1)}%`:"0%"}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},tooltip:{y:{formatter:a.bytesToSize}}};return b.copy_object_keys(l,t,!0),t}(),i=function(){let t=b.clone(e),l={chart:{stacked:!0,type:"donut",height:300},yaxis:{show:!0,labels:{formatter:a.bytesToSize}},dataLabels:{enabled:!0,formatter:function(e,t){return e?`${e.toFixed(1)}%`:"0%"}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},tooltip:{y:{formatter:m.getFormatter("number")}},noData:{text:"No Data",style:{color:void 0,fontSize:"24px",fontFamily:void 0}}};return b.copy_object_keys(l,t,!0),t}(),o=function(){let t=b.clone(e),l={chart:{stacked:!0,type:"radialBar",height:300},yaxis:{show:!0},dataLabels:{enabled:!0,formatter:function(e,t){return e}},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},tooltip:{y:{formatter:a.bytesToSize}},noData:{text:"No Data",style:{color:void 0,fontSize:"24px",fontFamily:void 0}},plotOptions:{radialBar:{offsetY:0,startAngle:0,endAngle:270,hollow:{margin:5,size:"30%",background:"transparent",image:void 0},dataLabels:{name:{show:!1},value:{show:!1}}}},legend:{show:!0,floating:!0,fontSize:"16px",position:"left",offsetX:160,offsetY:15,labels:{useSeriesColors:!0},markers:{size:0},formatter:function(e,t){return e+":  "+t.w.globals.series[t.seriesIndex]},itemMargin:{vertical:3}},responsive:[{breakpoint:480,options:{legend:{show:!1}}}]};return b.copy_object_keys(l,t,!0),t}(),r=function(){let t=b.clone(e),l={chart:{stacked:!0,type:"pie",height:400},yaxis:{show:!0,labels:{formatter:a.bytesToSize}},dataLabels:{enabled:!0,formatter:function(e,t){return e?`${e.toFixed(1)}%`:"0%"}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},tooltip:{y:{formatter:a.bytesToSize}}};return b.copy_object_keys(l,t,!0),t}(),c=function(){let t=b.clone(e);return b.copy_object_keys({chart:{type:"line",zoom:{enabled:!0,type:"x"}},tooltip:{shared:!0,x:{format:"dd MMM yyyy HH:mm:ss"},y:{}},xaxis:{labels:{show:!1,datetimeUTC:!1,formatter:null},axisTicks:{show:!0},type:"datetime",axisBorder:{show:!0},convertedCatToNumeric:!1},stroke:{show:!0,width:2,curve:"smooth"},grid:{show:!0},dataLabels:{enabled:!1}},t,!0),t}(),u=function({series:e,seriesIndex:t,dataPointIndex:a,w:l}){const n=l.config.series[t].data[a],s=n.name,i=n.y;return`\n          <div class='apexcharts-theme-light apexcharts-active' id='test'>\n              <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n                  ${n.meta.label}\n              </div>\n              <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n                  <div class='apexcharts-tooltip-text text-left'>\n                      <b>${l.config.xaxis.title.text}</b>: ${s}\n                  </div>\n                  <div class='apexcharts-tooltip-text text-left'>\n                      <b>${l.config.yaxis[0].title.text}</b>: ${i}\n                  </div>\n              </div>\n          </div>`},d=function(){let t=b.clone(e),a={chart:{width:"100%",height:"100%",stacked:!0,type:"bubble",zoom:{autoScaleYaxis:!0}},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},events:{dataPointSelection:"standard"},grid:{padding:{left:6}},xaxis:{type:"numeric",labels:{}},yaxis:{type:"numeric",forceNiceScale:!0,labels:{}},dataLabels:{enabled:!1},tooltip:{custom:u}};return b.copy_object_keys(a,t,!0),t}();return{typeChart:{TS_LINE:"TS_LINE",TS_STACKED:"TS_STACKED",TS_COLUMN:"TS_COLUMN",PIE:"PIE",DONUT:"DONUT",RADIALBAR:"RADIALBAR",RADAR:"RADAR",BUBBLE:"BUBBLE",BASE:"BASE"},newChart:function(a){let u,_={};if(a==this.typeChart.TS_STACKED)_=b.clone(n),t(_);else if(a==this.typeChart.TS_LINE)_=b.clone(c),t(_);else if(a==this.typeChart.TS_COLUMN)_=b.clone(l),t(_);else if(a==this.typeChart.PIE)_=b.clone(r);else if(a==this.typeChart.DONUT)_=b.clone(i);else if(a==this.typeChart.RADIALBAR)_=b.clone(o);else if(a==this.typeChart.POLAR)_=b.clone(s);else if(a==this.typeChart.BUBBLE)_=b.clone(d);else{if(a!=this.typeChart.BASE)throw`ntopChartApex::newChart: chart type = ${a} unsupported`;_=b.clone(e)}const p=e=>{if("string"==typeof e?.yaxis?.labels?.formatter){const t=e.yaxis.labels.formatter;let a=m.getFormatter(t);null!=a?e.yaxis.labels.formatter=a:"formatValue"==t?e.yaxis.labels.formatter=m.getFormatter("number"):"bytesToSize"==t&&(e.yaxis.labels.formatter=m.getFormatter("bytes"))}};return{drawChart:function(e,t){p(t),b.copy_object_keys(t,_,!0),u=new ApexCharts(e,_),u.render()},to_data_uri:async function(e){if(null==u)return;return(await u.dataURI(e)).imgURI},destroyChart:function(){null!=u&&u.destroy()},updateChart:function(e){null!=u&&(p(e),u.updateOptions(e,!1,!1,!1))},updateSeries:function(e){null!=u&&u.updateSeries(e)},registerEvent:function(e,t,a=!1){_.chart.events[e]=t,1==a&&u.updateOptions(_)}}}}}(),L=function(){let e={};return{addHandler:function(t){let a=e[t.handlerId];return null==a&&(a=[],e[t.handlerId]=a),a.push((()=>{t.onClick()})),`window['_DataTableButtonsOnClick']('${t.handlerId}', '${a.length-1}')`},getHandler:function(t,a){let l=e[t];return null==l?null:l[a]},deleteHandlersById:function(t){e[t]=null}}}();window._DataTableButtonsOnClick=function(e,t){let a=L.getHandler(e,t);null!=a&&a()};class F{static getStdDatatableConfig(e=[],t="<'row'<'col-sm-2 d-inline-block'l><'col-sm-10 text-end d-inline-block'<'dt-search'f>B>rtip>"){return 0==e.length&&(t="fBrtip"),{dom:t,pagingType:"full_numbers",lengthMenu:[[10,20,50,100],[10,20,50,100]],language:{search:i18n.script_search,paginate:{previous:"&lt;",next:"&gt;",first:"«",last:"»"}},saveState:!0,responsive:!0,buttons:{buttons:e,dom:{button:{className:"btn btn-link"},container:{className:"d-inline-block"}}}}}static createLinkCallback(e){let t="";return t=`onclick="${L.addHandler(e.handler)}"`,`<a href=#\n                   ${t}>\n                   ${e.text||""}\n                </a>`}static createActionButtons(e=[]){const t=[];e.forEach(((e,a)=>{let l="";if(e.handler){l=`onclick="${L.addHandler(e.handler)}"`}let n=`\n            <li>\n                <a\n                    ${e.href||e.modal?`href='${e.href||e.modal}'`:""}\n                    ${l}\n                    ${e.onclick?`onclick='${e.onclick}'`:""}\n                    ${e.modal?"data-bs-toggle='modal'":""}\n                    class='dropdown-item ${e.class?e.class:""}'\n                    ${e.hidden?"style='display: none'":""}\n                    ${e.external?"target='_about'":""}\n                    >\n                    <i class='fas ${e.icon}'></i> ${e.title||""}\n                </a>\n            </li>\n            `;t.push(n)}));return`<div class='dropdown'><button type="button" class="btn btn-sm btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false"><i class="fas fa-align-justify"></i></button>${`<ul class="dropdown-menu">${t.join("")}</ul>`}</div>`}static deleteButtonHandlers(e){L.deleteHandlersById(e)}static setAjaxConfig(e,t,a="",l="get",n={}){return e.ajax={url:t,type:l,dataSrc:a,data:function(e){return $.extend({},e,n)}},e}static extendConfig(e,t){return t.hasFilters&&(t.stateSaveCallback=function(e,t){localStorage.setItem("DataTables_"+e.sInstance,JSON.stringify(t))},t.stateLoadCallback=function(e){return JSON.parse(localStorage.getItem("DataTables_"+e.sInstance))},t.stateSaveParams=function(e,t){$("[data-filter]").each((function(){const e=$(this).find("li.active").data("filter-key");e&&(t.filters||(t.filters={}),t.filters[$(this).data("filter")]=e)}))}),$.extend({},e,t)}static secondsToHHMMSS(e){const t=e=>`${e}`.padStart(2,"0"),a=e%60,l=Math.floor(e/60)%60;return`${t(Math.floor(e/3600))}:${t(l)}:${t(a)}`}static openEditModalByQuery(e){const t=new URLSearchParams(window.location.search);if(!t.has(e.paramName))return;const a=t.get(e.paramName),l=e.datatableInstance.data().toArray().find((t=>t[e.paramName]==a));if("function"==typeof e.cancelIf&&e.cancelIf(l))return;const n=$(`#${e.modalHandler.getModalID()}`);if(void 0!==l&&(e.modalHandler.invokeModalInit(l),n.modal("show")),!t.has("referer"))return void n.on("hidden.bs.modal",(function(t){const a=new URL(window.location.href);a.searchParams.delete(e.paramName),history.replaceState({},"",a.toString())}));const s=t.get("referer");n.on("hidden.bs.modal",(function(e){window.location=s}))}static addToggleColumnsDropdown(e,t=((e,t)=>{})){if(void 0===e)throw"The $table is undefined!";const a=e.table().node().id;F._loadColumnsVisibility(e).then((function(l){let n=[-1];l.success?n=l.columns.map((e=>parseInt(e))):console.warn(l.message);const s=[],i=[],o=$(e.context[0].nTableWrapper);e.columns().every((function(t){e.column(t).visible()?s.push({index:t,name:this.header().textContent,label:this.i18n.name}):i.push(t)}));const r=$('\n                <div class="btn-group">\n                    <button type="button" class="btn btn-link dropdown-toggle" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\n                        <i class="fas fa-eye"></i>\n                    </button>\n                </div>\n            '),c=$('<div class="dropdown-menu dropdown-menu-right" style=\'width: max-content;\'><h6 class="dropdown-header">Show Columns</h6></div>'),u=$("<div class='px-4'></div>");for(let l=0;l<s.length;l++){const o=s[l];if(""==o.name)continue;const r=`toggle-${o.name.split().join("_")}`,c=-1===n.indexOf(o.index);if(!c){e.column(o.index).visible(!1)}const d=$(`<input class="form-check-input" ${c?"checked":""} type="checkbox" id="${r}">`),_=$(`\n                    <div class="form-check form-switch">\n                        <label class="form-check-label" for="${r}">\n                            ${o.name}\n                        </label>\n                    </div>\n                `);d.on("change",(function(l){$(".overlay").toggle(500);const n=e.column(o.index);n.visible(!n.visible());const s=n.visible(),r=[];e.columns().every((function(t){e.column(t).visible()||-1!==i.indexOf(t)||r.push(t)})),$.post(`${http_prefix}/lua/datatable_columns.lua`,{action:"save",table:a,columns:r.join(","),csrf:window.__CSRF_DATATABLE__}).then((function(e){e.success||console.warn(e.message)})),void 0!==t&&t(n,s)})),_.prepend(d),u.append(_)}c.on("click.bs.dropdown",(function(e){e.stopPropagation()})),r.append(c.append(u)),o.find(".dt-search").parent().append(r)}))}static async _loadColumnsVisibility(e){const t=e.table().node().id;return $.get(`${http_prefix}/lua/datatable_columns.lua?table=${t}&action=load`)}}class R{static alertSeverityAndType(e,t,a){return`${R.formatValueLabel(e,t,a)} ${R.formatValueLabel(a.alert_id,t,a)}`}static hideIfZero(e,t,l,n){let s=void 0!==e.color?e.color:"#aaa",i=void 0!==e.value?e.value:e;"display"===t&&0===parseInt(i)&&(s="#aaa");let o=`<span style='color: ${s}'>${a.fint(i)}</span>`;return void 0!==e.url&&(o=`<a href="${e.url}">${o}</a>`),o}static secondsToTime(e,t,l,n){return"display"===t?a.secondsToTime(e):e}static filterize(e,t,l,n,s,i,o,r){let c=`<a class='tag-filter' data-tag-key='${e}' title='${s||t}' data-tag-value='${t}' data-tag-label='${n||l||t}' href='javascript:void(0)'>${i||l||t}</a>`;if(null!=o)if(o){if(t){c+=` <a href='${a.buildURL(`${http_prefix}/lua/pro/enterprise/snmp_device_details.lua?host=${t}`)}'data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`}}else if(r&&t){c+=` <a href='${a.buildURL(`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${r}&snmp_port_idx=${t}`)}'data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`}return c}static formatValueLabel(e,t,a,l){if("display"!==t)return e.value;let n=e.label;return 1==l&&0==e.value&&(n=""),e.color&&(n=`<span class='font-weight-bold' style='color: ${e.color}'>${n}</span>`),n}static formatCategory(e,t,a,l){if("display"!==t)return e.value;let n=`<a class='tag-filter' data-tag-key='alert_category' data-tag-value='${e.value}' data-tag-label='${e.label}' href='javascript:void(0)'><i class="fa fas ${e.icon}" title="${e.label}"></i></a>`;return 1==l&&0==e.value&&(n=""),n}static formatScore(e,t,a,l){if("display"!==t)return e.value;let n=e.label;return 1==l&&0==e.value&&(n=""),e.color&&(n=`<span class='font-weight-bold' style='color: ${e.color}'>${n}</span>`),`<a class='tag-filter' data-tag-key='score' title='${e.label}' data-tag-value='${e.value}' data-tag-label='${e.label}' href='javascript:void(0)'>${n}</a>`}static formatMessage(e,t,a,l){if("display"!==t)return e.value;let n=e.descr;return e.shorten_descr&&(n=`<span title="${e.descr}">${e.shorten_descr}</span>`),n}static formatTraffic(e,t,l,n){if("display"!==t)return e.total_bytes;return`${a.formatPackets(e.total_packets)} / ${a.bytesToVolume(e.total_bytes)}`}static formatSubtype(e,t,a,l){if("display"!==t)return e;return R.filterize("subtype",e,e)}static filterize_2(e,t,a,l,n,s){return null==t||0==t&&(null==a||""==a)?"":`<a class='tag-filter' data-tag-key='${e}' title='${n||t}' data-tag-value='${t}' data-tag-label='${l||a||t}' href='javascript:void(0)'>${s||a||t}</a>`}static getFormatGenericField(e,t){return function(a,l,n){if("display"!==l)return a.value;if(1==t&&0==a?.value)return"";let s="";return void 0!==a.reference&&(s=a.reference),R.filterize_2(e,n[e].value,n[e].label,n[e].label,n[e].label)+" "+s}}static formatSNMPInterface(e,t,a){if("display"!==t)return e.value;let l=R.filterize("snmp_interface",`${a.ip}_${e.value}`,e.label,e.label,e.label,null,!1,a.ip);return e.color&&(l=`<span class='font-weight-bold' style='color: ${e.color}'>${l}</span>`),l}static formatSNMPIP(e,t,a,l){return"display"!==t?e:R.filterize("ip",e,e,e,e,null,!0)}static formatNetwork(e,t,a,l){return"display"!==t?e:R.filterize("network_name",e,e,e,e,null,!1)}static formatProbeIP(e,t,a,l){if("display"!==t)return e;return R.filterize("probe_ip",e.value,e.label,e.label,e.label_long)}static formatHost(e,t,a,l){if("display"!==t)return e;let n="";void 0!==e.reference&&(n=e.reference);let s,i,o="";return e.label&&e.label!=e.value?(s="name",i=e.label_long,o=R.filterize("name",e.label_long,e.label,e.label,e.label_long)):(s="ip",i=e.value,o=R.filterize("ip",e.value,e.label,e.label,e.label_long)),a.vlan_id&&""!=a.vlan_id&&"0"!=a.vlan_id&&(o=R.filterize(s,`${i}@${a.vlan_id}`,`${e.label}@${a.vlan_id}`,`${e.label}@${a.vlan_id}`,`${e.label_long}@${a.vlan_id}`)),e.country&&(o+=R.filterize("country",e.country,e.country,e.country,e.country,' <img src="'+http_prefix+'/dist/images/blank.gif" class="flag flag-'+e.country.toLowerCase()+'"></a> ')),a.role&&"attacker"==a.role.value?o=o+" "+R.filterize("role",a.role.value,'<i class="fas fa-skull" title="'+a.role.label+'"></i>',a.role.label):a.role&&"victim"==a.role.value&&(o=o+" "+R.filterize("role",a.role.value,'<i class="fas fa-sad-tear" title="'+a.role.label+'"></i>',a.role.label)),a.role_cli_srv&&"client"==a.role_cli_srv.value?o=o+" "+R.filterize("role_cli_srv",a.role_cli_srv.value,'<i class="fas fa-long-arrow-alt-right" title="'+a.role_cli_srv.label+'"></i>',a.role_cli_srv.label):a.role_cli_srv&&"server"==a.role_cli_srv.value&&(o=o+" "+R.filterize("role_cli_srv",a.role_cli_srv.value,'<i class="fas fa-long-arrow-alt-left" title="'+a.role_cli_srv.label+'"></i>',a.role_cli_srv.label)),o+" "+n}static filterizeVlan(e,t,l,n,s,i){let o=n,r=s,c=i;return e.vlan&&0!=e.vlan.value&&(o=`${n}@${e.vlan.value}`,r=`${s}@${e.vlan.label}`,c=`${i}@${e.vlan.title}`),r=a.shortenLabel(r,16,"."),R.filterize(l,o,r,r,c)}static formatFlowTuple(e,t,a,l){let n=e.active_url?`<a href="${e.active_url}"><i class="fas fa-stream"></i></a>`:"",s="";if(e.cli_ip.name){let t="";e.cli_ip.label_long&&(t=e.cli_ip.value+" ["+e.cli_ip.label_long+"]"),s=R.filterizeVlan(e,a,"cli_name",e.cli_ip.name,e.cli_ip.label,t)}else s=R.filterizeVlan(e,a,"cli_ip",e.cli_ip.value,e.cli_ip.label,e.cli_ip.label_long);let i="";e.cli_ip.country&&"nil"!==e.cli_ip.country&&(i=R.filterize("cli_country",e.cli_ip.country,e.cli_ip.country,e.cli_ip.country,e.cli_ip.country,' <img src="'+http_prefix+'/dist/images/blank.gif" class="flag flag-'+e.cli_ip.country.toLowerCase()+'"></a> '));let o=e.cli_port&&e.cli_port>0?":"+R.filterize("cli_port",e.cli_port,e.cli_port):"",r="";1==e.cli_ip.blacklisted&&(r=" <i class='fas fa-ban fa-sm' title='"+i18n("hosts_stats.blacklisted")+"'></i>");let c="";if(e.srv_ip.name){let t="";e.srv_ip.label_long&&(t=e.srv_ip.value+" ["+e.srv_ip.label_long+"]"),c=R.filterizeVlan(e,a,"srv_name",e.srv_ip.name,e.srv_ip.label,t)}else c=R.filterizeVlan(e,a,"srv_ip",e.srv_ip.value,e.srv_ip.label,e.srv_ip.label_long);let u=e.srv_port&&e.srv_port>0?":"+R.filterize("srv_port",e.srv_port,e.srv_port):"",d="";e.srv_ip.country&&"nil"!==e.srv_ip.country&&(d=R.filterize("srv_country",e.srv_ip.country,e.srv_ip.country,e.srv_ip.country,e.srv_ip.country,' <img src="'+http_prefix+'/dist/images/blank.gif" class="flag flag-'+e.srv_ip.country.toLowerCase()+'"></a> '));let _="";1==e.srv_ip.blacklisted&&(_=" <i class='fas fa-ban fa-sm' title='"+i18n("hosts_stats.blacklisted")+"'></i>");let p="",f="";return a.cli_role&&("attacker"==a.cli_role.value?p+=R.filterize("role","attacker",'<i class="fas fa-skull" title="'+a.cli_role.label+'"></i>',a.cli_role.tag_label):"victim"==a.cli_role.value&&(p+=R.filterize("role","victim",'<i class="fas fa-sad-tear" title="'+a.cli_role.label+'"></i>',a.cli_role.tag_label))),a.srv_role&&("attacker"==a.srv_role.value?f+=R.filterize("role","attacker",'<i class="fas fa-skull" title="'+a.srv_role.label+'"></i>',a.srv_role.tag_label):"victim"==a.srv_role.value&&(f+=R.filterize("role","victim",'<i class="fas fa-sad-tear" title="'+a.srv_role.label+'"></i>',a.srv_role.tag_label))),`${n} ${s}${r}${i}${o} ${p} ${e.cli_ip.reference} <i class="fas fa-exchange-alt fa-lg" aria-hidden="true"></i> ${c}${_}${d}${u} ${f} ${e.srv_ip.reference}`}static formatSubtypeValueLabel(e,t,a,l){if("display"!==t)return e.name;return R.filterize("subtype",e.value,e.name,e.fullname,e.fullname)}static formatNameDescription(e,t,a,l){if("display"!==t)return e.name;return R.filterize("alert_id",e.value,e.name,e.fullname,e.fullname)}static applyCellStyle(e,t,a,l,n){t.highlight&&$(e).css("border-left","5px solid "+t.highlight)}}function D(e,t){const a=Object.create(null),l=e.split(",");for(let e=0;e<l.length;e++)a[l[e]]=!0;return t?e=>!!a[e.toLowerCase()]:e=>!!a[e]}window.do_pie=function(e,t,a,l,n){var s=new E(e,t,a,l,n);return n&&s.setInterval(setInterval((function(){s.update()}),n)),s},window.DataTableUtils=F,window.DataTableFiltersMenu=class{constructor({tableAPI:e,filterMenuKey:t,filterTitle:a,filters:l,columnIndex:n,icon:s=null,extraAttributes:i="",id:o=null,url:r=null,urlParams:c=null,removeAllEntry:u=!1,callbackFunction:d=null}){this.rawFilters=l,this.tableAPI=e,this.filterTitle=a,this.icon=s,this.filterMenuKey=t,this.columnIndex=n,this.preventUpdate=!1,this.currentFilterSelected=void 0,this.$datatableWrapper=$(e.context[0].nTableWrapper),this.extraAttributes=i,this.id=o,this.url=r,this.removeAllEntry=u,this.callbackFunction=d}get selectedFilter(){return this.currentFilterSelected}init(){const e=this;return this.$datatableWrapper.on("init.dt",(function(){e._render(e.rawFilters)})),this.tableAPI.on("draw",(function(){e._update()})),e}_countEntries(e,t=[]){void 0===e&&console.error("DataTableFiltersMenu::_countEntries() => the passed regex is undefined!");const a=new RegExp(e);return t.filter((e=>a.test(e))).length}_createMenuEntry(e){const t=this;let a=$(`<li class='dropdown-item pointer'>${e.label} </li>`);if(t.url){if(a=$(`<li class='dropdown-item pointer'><a href=# class='p-1 standard-color'>${e.label} </li>`),1==e.currently_active){0==t.$dropdown.title.parent().find("i.fas").length&&t.$dropdown.title.parent().prepend("<i class='fas fa-filter'></i>");const l=a.html();t.$dropdown.title.html(l),t.$dropdown.container.find("li").removeClass("active"),"all"!==e.key&&a.addClass("active")}}else if(void 0!==e.regex&&(void 0===e.countable||e.countable)){const t=this.tableAPI.columns(this.columnIndex).data()[0],l=this._countEntries(e.regex,t),n=$(`<span class='counter'>(${l})</span>`);0==l&&a.hide(),a.append(n)}return a.on("click",(function(l){0==t.$dropdown.title.parent().find("i.fas").length&&t.$dropdown.title.parent().prepend("<i class='fas fa-filter'></i>");const n=a.html();if(t.$dropdown.title.html(n),t.$dropdown.container.find("li").removeClass("active"),"all"!==e.key&&a.addClass("active"),t.callbackFunction)return t.callbackFunction(t.tableAPI,e),void(e.callback&&e.callback());if(t.url){t.urlParams=window.location.search;const a=new URLSearchParams(t.urlParams);a.set(t.filterMenuKey,void 0!==e.id?e.id:""),window.history.pushState("","",window.location.pathname+"?"+a.toString()),location.reload()}else t.preventUpdate=!0,e.callback&&e.callback(),t.tableAPI.column(t.columnIndex).search(e.regex,!0,!1).draw(),t.currentFilterSelected=e})),a}_createFilters(e){const t={};for(const a of e){const e=this._createMenuEntry(a);t[a.key]={filter:a,$node:e}}return t}_render(e){if(void 0===this.columnIndex)$(`<span id="${this.id}" ${this.extraAttributes} title="${this.filterTitle}">${this.icon||this.filterTitle}</span>`).insertBefore(this.$datatableWrapper.find(".dataTables_filter").parent());else{const t=$(`<div id='${this.filterMenuKey}_dropdown' class='dropdown d-inline'></div>`),a=$("<button class='btn-link btn dropdown-toggle' data-bs-toggle=\"dropdown\" type='button'></button>"),l=$(`<span class='filter-title'>${this.filterTitle}</span>`);a.append(l),this.$dropdown={container:t,title:l,button:a},this.filters=this._createFilters(e);const n=$(`<ul class='dropdown-menu dropdown-menu-lg-end scrollable-dropdown' id='${this.filterMenuKey}_dropdown_menu'></ul>`);for(const[e,t]of Object.entries(this.filters))n.append(t.$node);if(!this.removeAllEntry){const e=this._generateAllFilter();n.prepend(this._createMenuEntry(e))}t.append(a),t.append(n),t.insertBefore(this.$datatableWrapper.find(".dataTables_filter").parent()),this._selectFilterFromState(this.filterMenuKey)}}_selectFilterFromState(e){this.tableAPI.state&&this.tableAPI.state.loaded()&&this.tableAPI.state.loaded().filters&&tableAPI.state.save()}_generateAllFilter(){return{key:"all",label:i18n_ext.all,regex:"",countable:!1,callback:()=>{this.$dropdown.title.parent().find("i.fas.fa-filter").remove(),this.$dropdown.title.html(`${this.filterTitle}`)}}}_update(){if(void 0!==this.filters)if(this.preventUpdate)this.preventUpdate=!1;else for(const[e,t]of Object.entries(this.filters)){if(0==t.countable||0==t.filter.countable)continue;const e=this.tableAPI.columns(this.columnIndex).data()[0],a=this._countEntries(t.filter.regex,e);0==a?t.$node.hide():t.$node.show(),t.$node.find(".counter").text(`(${a})`),this.$dropdown.button.find(".counter").text(`(${a})`)}}},window.DataTableRenders=R,window.ChartWidget=class extends I{constructor(e,t="line",a={},l=0,n={}){super(e,a,l,n),this._chartType=t,this._chart={},this._$htmlChart=document.querySelector(`#canvas-widget-${e}`)}static registerEventCallback(e,t,a){setTimeout((async()=>{try{const l=U.getWidgetByName(e),n={chart:{events:{[t]:a}}};await l._chart.updateOptions(n)}catch(e){}}),1e3)}_generateConfig(){const e={series:[],tooltip:{enabledOnSeries:[0],x:{show:!0,format:"dd/MM/yyyy HH:mm:ss"},y:{formatter:function(e,{series:t,seriesIndex:a,dataPointIndex:l,w:n}){return e}},z:{show:!1}},chart:{type:this._chartType,events:{},height:"100%",toolbar:{show:!1}},xaxis:{labels:{style:{fontSize:"14px"}},tooltip:{enabled:!0,formatter:function(e){return e}}},yaxis:{labels:{style:{fontSize:"14px"}},tooltip:{enabled:!0,formatter:function(e){return e}}},zaxis:{labels:{style:{fontSize:"14px"}},tooltip:{enabled:!0}},dataLabels:{enabled:!0,style:{fontSize:"14px"}},labels:[],legend:{show:!0,fontSize:"14px",position:"bottom",onItemClick:{toggleDataSeries:!0}},plotOptions:{bar:{borderRadius:4,horizontal:!0}},noData:{text:"No Data",align:"center",verticalAlign:"middle",style:{fontSize:"24px"}}};if(this._additionalParams&&this._additionalParams.apex){return Object.assign(e,this._additionalParams.apex)}return e}_buildTooltip(e,t){if(e.tooltip.y={formatter:function(e,{series:t,seriesIndex:a,dataPointIndex:l,w:n}){return e}},t.tooltip){for(const a in t.tooltip)if("x"===a||"y"===a||"z"===a){const l=t.tooltip[a].formatter;e.tooltip[a]||(e.tooltip[a]={}),e.tooltip[a].formatter=O[l]||NtopUtils[l]}t.tooltip.custom&&(e.tooltip.custom=O[t.tooltip.custom]||NtopUtils[t.tooltip.custom])}}_buildAxisFormatter(e,t){const a=e[t];if(void 0!==a&&void 0!==a.labels&&void 0!==a.labels.ntop_utils_formatter&&"none"!==a.labels.ntop_utils_formatter){const e=a.labels.ntop_utils_formatter;void 0===NtopUtils[e]?console.error(`xaxis: Formatting function '${e}' didn't found inside NtopUtils.`):a.labels.formatter=NtopUtils[e]}}_buildDataLabels(e,t){if(t.dataLabels)for(const[a,l]of Object.entries(t.dataLabels))e.dataLabels[a]=l;let a=e.dataLabels.formatter;a&&O[a]&&(e.dataLabels.formatter=O[a])}_buildConfig(){const e=this._generateConfig(),t=this._fetchedData.rsp,a=["series","xaxis","yaxis","colors","labels","fill","filter","filtering_labels"];for(const l of a)void 0!==t[l]&&(void 0!==e[l]?e[l]=Object.assign(e[l],t[l]):e[l]=t[l]);if(t.events)for(const a in t.events)e.chart.events[a]=T[t.events[a]];return void 0!==t.horizontal_chart&&(e.plotOptions.bar.horizontal=t.horizontal_chart),this._buildTooltip(e,t),this._buildAxisFormatter(e,"xaxis"),this._buildAxisFormatter(e,"yaxis"),this._buildDataLabels(e,t),e}_initializeChart(){const e=this._buildConfig();this._chartConfig=e,this._chart=new ApexCharts(this._$htmlChart,this._chartConfig),this._chart.render()}async init(){await super.init(),this._initializeChart()}async destroy(){await super.destroy(),this._chart.destroy(),this._chart=null}async update(e={}){if(void 0!==this._chartConfig&&(e?await super.update(e):await super.updateByUrl(),null!=this._chart)){const{colors:e,series:t,dataLabels:a,labels:l,xaxis:n,filtering_labels:s}=this._fetchedData.rsp;if(this._chartConfig.colors=e,this._chartConfig.series=t,n&&n.categories&&(this._chartConfig.xaxis.categories=n.categories),s&&(this._chartConfig.filtering_labels=s),a){let e=this._chartConfig.dataLabels.formatter;this._chartConfig.dataLabels.formatter=e&&O[e]?O[e]:P}l&&(this._chartConfig.labels=l),this._chart.updateOptions(this._chartConfig,!0)}}async destroyAndUpdate(e={}){await super.destroyAndUpdate(e),this._initializeChart()}},window.WidgetUtils=U,window.ntopChartApex=M,$((function(){function e(e){if("mousedown"==e.type&&(e.metaKey||e.ctrlKey||2!==e.which))return;const t=$(this).data("id");$.post(`${http_prefix}/lua/update_blog_posts.lua`,{blog_notification_id:t,csrf:window.__BLOG_NOTIFICATION_CSRF__},(e=>{if(e.success){$(this).off("click").off("mousedown").attr("data-read","true").data("read","true").find(".badge").remove();const e=$(".blog-notification[data-read='false']").length;0==e?$(".notification-bell").remove():$(".notification-bell").html(e)}}))}$(".blog-notification[data-read='false']").on("click",e).on("mousedown",e)}));const z=D("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt"),q=D("itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly");function B(e){return!!e||""===e}function V(e){if(fe(e)){const t={};for(let a=0;a<e.length;a++){const l=e[a],n=be(l)?W(l):V(l);if(n)for(const e in n)t[e]=n[e]}return t}return be(e)||we(e)?e:void 0}const H=/;(?![^(]*\))/g,G=/:(.+)/;function W(e){const t={};return e.split(H).forEach((e=>{if(e){const a=e.split(G);a.length>1&&(t[a[0].trim()]=a[1].trim())}})),t}function K(e){let t="";if(be(e))t=e;else if(fe(e))for(let a=0;a<e.length;a++){const l=K(e[a]);l&&(t+=l+" ")}else if(we(e))for(const a in e)e[a]&&(t+=a+" ");return t.trim()}function J(e){if(!e)return null;let{class:t,style:a}=e;return t&&!be(t)&&(e.class=K(t)),a&&(e.style=V(a)),e}const Y=D("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot"),Z=D("svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view"),X=D("area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr");function Q(e,t){if(e===t)return!0;let a=he(e),l=he(t);if(a||l)return!(!a||!l)&&e.getTime()===t.getTime();if(a=ye(e),l=ye(t),a||l)return e===t;if(a=fe(e),l=fe(t),a||l)return!(!a||!l)&&function(e,t){if(e.length!==t.length)return!1;let a=!0;for(let l=0;a&&l<e.length;l++)a=Q(e[l],t[l]);return a}(e,t);if(a=we(e),l=we(t),a||l){if(!a||!l)return!1;if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const a in e){const l=e.hasOwnProperty(a),n=t.hasOwnProperty(a);if(l&&!n||!l&&n||!Q(e[a],t[a]))return!1}}return String(e)===String(t)}function ee(e,t){return e.findIndex((e=>Q(e,t)))}const te=e=>be(e)?e:null==e?"":fe(e)||we(e)&&(e.toString===ke||!ge(e.toString))?JSON.stringify(e,ae,2):String(e),ae=(e,t)=>t&&t.__v_isRef?ae(e,t.value):me(t)?{[`Map(${t.size})`]:[...t.entries()].reduce(((e,[t,a])=>(e[`${t} =>`]=a,e)),{})}:ve(t)?{[`Set(${t.size})`]:[...t.values()]}:!we(t)||fe(t)||Se(t)?t:String(t),le={},ne=[],se=()=>{},ie=()=>!1,oe=/^on[^a-z]/,re=e=>oe.test(e),ce=e=>e.startsWith("onUpdate:"),ue=Object.assign,de=(e,t)=>{const a=e.indexOf(t);a>-1&&e.splice(a,1)},_e=Object.prototype.hasOwnProperty,pe=(e,t)=>_e.call(e,t),fe=Array.isArray,me=e=>"[object Map]"===$e(e),ve=e=>"[object Set]"===$e(e),he=e=>"[object Date]"===$e(e),ge=e=>"function"==typeof e,be=e=>"string"==typeof e,ye=e=>"symbol"==typeof e,we=e=>null!==e&&"object"==typeof e,xe=e=>we(e)&&ge(e.then)&&ge(e.catch),ke=Object.prototype.toString,$e=e=>ke.call(e),Se=e=>"[object Object]"===$e(e),Ne=e=>be(e)&&"NaN"!==e&&"-"!==e[0]&&""+parseInt(e,10)===e,Ce=D(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),Ee=D("bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo"),Ae=e=>{const t=Object.create(null);return a=>t[a]||(t[a]=e(a))},Te=/-(\w)/g,Oe=Ae((e=>e.replace(Te,((e,t)=>t?t.toUpperCase():"")))),Pe=/\B([A-Z])/g,Ue=Ae((e=>e.replace(Pe,"-$1").toLowerCase())),Ie=Ae((e=>e.charAt(0).toUpperCase()+e.slice(1))),je=Ae((e=>e?`on${Ie(e)}`:"")),Me=(e,t)=>!Object.is(e,t),Le=(e,t)=>{for(let a=0;a<e.length;a++)e[a](t)},Fe=(e,t,a)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:a})},Re=e=>{const t=parseFloat(e);return isNaN(t)?e:t};let De,ze;class qe{constructor(e=!1){this.active=!0,this.effects=[],this.cleanups=[],!e&&ze&&(this.parent=ze,this.index=(ze.scopes||(ze.scopes=[])).push(this)-1)}run(e){if(this.active){const t=ze;try{return ze=this,e()}finally{ze=t}}}on(){ze=this}off(){ze=this.parent}stop(e){if(this.active){let t,a;for(t=0,a=this.effects.length;t<a;t++)this.effects[t].stop();for(t=0,a=this.cleanups.length;t<a;t++)this.cleanups[t]();if(this.scopes)for(t=0,a=this.scopes.length;t<a;t++)this.scopes[t].stop(!0);if(this.parent&&!e){const e=this.parent.scopes.pop();e&&e!==this&&(this.parent.scopes[this.index]=e,e.index=this.index)}this.active=!1}}}function Be(e){return new qe(e)}function Ve(e,t=ze){t&&t.active&&t.effects.push(e)}function He(){return ze}function Ge(e){ze&&ze.cleanups.push(e)}const We=e=>{const t=new Set(e);return t.w=0,t.n=0,t},Ke=e=>(e.w&Qe)>0,Je=e=>(e.n&Qe)>0,Ye=new WeakMap;let Ze,Xe=0,Qe=1;const et=Symbol(""),tt=Symbol("");class at{constructor(e,t=null,a){this.fn=e,this.scheduler=t,this.active=!0,this.deps=[],this.parent=void 0,Ve(this,a)}run(){if(!this.active)return this.fn();let e=Ze,t=it;for(;e;){if(e===this)return;e=e.parent}try{return this.parent=Ze,Ze=this,it=!0,Qe=1<<++Xe,Xe<=30?(({deps:e})=>{if(e.length)for(let t=0;t<e.length;t++)e[t].w|=Qe})(this):lt(this),this.fn()}finally{Xe<=30&&(e=>{const{deps:t}=e;if(t.length){let a=0;for(let l=0;l<t.length;l++){const n=t[l];Ke(n)&&!Je(n)?n.delete(e):t[a++]=n,n.w&=~Qe,n.n&=~Qe}t.length=a}})(this),Qe=1<<--Xe,Ze=this.parent,it=t,this.parent=void 0,this.deferStop&&this.stop()}}stop(){Ze===this?this.deferStop=!0:this.active&&(lt(this),this.onStop&&this.onStop(),this.active=!1)}}function lt(e){const{deps:t}=e;if(t.length){for(let a=0;a<t.length;a++)t[a].delete(e);t.length=0}}function nt(e,t){e.effect&&(e=e.effect.fn);const a=new at(e);t&&(ue(a,t),t.scope&&Ve(a,t.scope)),t&&t.lazy||a.run();const l=a.run.bind(a);return l.effect=a,l}function st(e){e.effect.stop()}let it=!0;const ot=[];function rt(){ot.push(it),it=!1}function ct(){const e=ot.pop();it=void 0===e||e}function ut(e,t,a){if(it&&Ze){let t=Ye.get(e);t||Ye.set(e,t=new Map);let l=t.get(a);l||t.set(a,l=We()),dt(l)}}function dt(e,t){let a=!1;Xe<=30?Je(e)||(e.n|=Qe,a=!Ke(e)):a=!e.has(Ze),a&&(e.add(Ze),Ze.deps.push(e))}function _t(e,t,a,l,n,s){const i=Ye.get(e);if(!i)return;let o=[];if("clear"===t)o=[...i.values()];else if("length"===a&&fe(e))i.forEach(((e,t)=>{("length"===t||t>=l)&&o.push(e)}));else switch(void 0!==a&&o.push(i.get(a)),t){case"add":fe(e)?Ne(a)&&o.push(i.get("length")):(o.push(i.get(et)),me(e)&&o.push(i.get(tt)));break;case"delete":fe(e)||(o.push(i.get(et)),me(e)&&o.push(i.get(tt)));break;case"set":me(e)&&o.push(i.get(et))}if(1===o.length)o[0]&&pt(o[0]);else{const e=[];for(const t of o)t&&e.push(...t);pt(We(e))}}function pt(e,t){const a=fe(e)?e:[...e];for(const e of a)e.computed&&ft(e);for(const e of a)e.computed||ft(e)}function ft(e,t){(e!==Ze||e.allowRecurse)&&(e.scheduler?e.scheduler():e.run())}const mt=D("__proto__,__v_isRef,__isVue"),vt=new Set(Object.getOwnPropertyNames(Symbol).filter((e=>"arguments"!==e&&"caller"!==e)).map((e=>Symbol[e])).filter(ye)),ht=xt(),gt=xt(!1,!0),bt=xt(!0),yt=xt(!0,!0),wt=function(){const e={};return["includes","indexOf","lastIndexOf"].forEach((t=>{e[t]=function(...e){const a=ra(this);for(let e=0,t=this.length;e<t;e++)ut(a,0,e+"");const l=a[t](...e);return-1===l||!1===l?a[t](...e.map(ra)):l}})),["push","pop","shift","unshift","splice"].forEach((t=>{e[t]=function(...e){rt();const a=ra(this)[t].apply(this,e);return ct(),a}})),e}();function xt(e=!1,t=!1){return function(a,l,n){if("__v_isReactive"===l)return!e;if("__v_isReadonly"===l)return e;if("__v_isShallow"===l)return t;if("__v_raw"===l&&n===(e?t?Xt:Zt:t?Yt:Jt).get(a))return a;const s=fe(a);if(!e&&s&&pe(wt,l))return Reflect.get(wt,l,n);const i=Reflect.get(a,l,n);return(ye(l)?vt.has(l):mt(l))?i:(e||ut(a,0,l),t?i:fa(i)?s&&Ne(l)?i:i.value:we(i)?e?ta(i):Qt(i):i)}}function kt(e=!1){return function(t,a,l,n){let s=t[a];if(sa(s)&&fa(s)&&!fa(l))return!1;if(!e&&!sa(l)&&(ia(l)||(l=ra(l),s=ra(s)),!fe(t)&&fa(s)&&!fa(l)))return s.value=l,!0;const i=fe(t)&&Ne(a)?Number(a)<t.length:pe(t,a),o=Reflect.set(t,a,l,n);return t===ra(n)&&(i?Me(l,s)&&_t(t,"set",a,l):_t(t,"add",a,l)),o}}const $t={get:ht,set:kt(),deleteProperty:function(e,t){const a=pe(e,t),l=Reflect.deleteProperty(e,t);return l&&a&&_t(e,"delete",t,void 0),l},has:function(e,t){const a=Reflect.has(e,t);return ye(t)&&vt.has(t)||ut(e,0,t),a},ownKeys:function(e){return ut(e,0,fe(e)?"length":et),Reflect.ownKeys(e)}},St={get:bt,set:(e,t)=>!0,deleteProperty:(e,t)=>!0},Nt=ue({},$t,{get:gt,set:kt(!0)}),Ct=ue({},St,{get:yt}),Et=e=>e,At=e=>Reflect.getPrototypeOf(e);function Tt(e,t,a=!1,l=!1){const n=ra(e=e.__v_raw),s=ra(t);a||(t!==s&&ut(n,0,t),ut(n,0,s));const{has:i}=At(n),o=l?Et:a?da:ua;return i.call(n,t)?o(e.get(t)):i.call(n,s)?o(e.get(s)):void(e!==n&&e.get(t))}function Ot(e,t=!1){const a=this.__v_raw,l=ra(a),n=ra(e);return t||(e!==n&&ut(l,0,e),ut(l,0,n)),e===n?a.has(e):a.has(e)||a.has(n)}function Pt(e,t=!1){return e=e.__v_raw,!t&&ut(ra(e),0,et),Reflect.get(e,"size",e)}function Ut(e){e=ra(e);const t=ra(this);return At(t).has.call(t,e)||(t.add(e),_t(t,"add",e,e)),this}function It(e,t){t=ra(t);const a=ra(this),{has:l,get:n}=At(a);let s=l.call(a,e);s||(e=ra(e),s=l.call(a,e));const i=n.call(a,e);return a.set(e,t),s?Me(t,i)&&_t(a,"set",e,t):_t(a,"add",e,t),this}function jt(e){const t=ra(this),{has:a,get:l}=At(t);let n=a.call(t,e);n||(e=ra(e),n=a.call(t,e)),l&&l.call(t,e);const s=t.delete(e);return n&&_t(t,"delete",e,void 0),s}function Mt(){const e=ra(this),t=0!==e.size,a=e.clear();return t&&_t(e,"clear",void 0,void 0),a}function Lt(e,t){return function(a,l){const n=this,s=n.__v_raw,i=ra(s),o=t?Et:e?da:ua;return!e&&ut(i,0,et),s.forEach(((e,t)=>a.call(l,o(e),o(t),n)))}}function Ft(e,t,a){return function(...l){const n=this.__v_raw,s=ra(n),i=me(s),o="entries"===e||e===Symbol.iterator&&i,r="keys"===e&&i,c=n[e](...l),u=a?Et:t?da:ua;return!t&&ut(s,0,r?tt:et),{next(){const{value:e,done:t}=c.next();return t?{value:e,done:t}:{value:o?[u(e[0]),u(e[1])]:u(e),done:t}},[Symbol.iterator](){return this}}}}function Rt(e){return function(...t){return"delete"!==e&&this}}const[Dt,zt,qt,Bt]=function(){const e={get(e){return Tt(this,e)},get size(){return Pt(this)},has:Ot,add:Ut,set:It,delete:jt,clear:Mt,forEach:Lt(!1,!1)},t={get(e){return Tt(this,e,!1,!0)},get size(){return Pt(this)},has:Ot,add:Ut,set:It,delete:jt,clear:Mt,forEach:Lt(!1,!0)},a={get(e){return Tt(this,e,!0)},get size(){return Pt(this,!0)},has(e){return Ot.call(this,e,!0)},add:Rt("add"),set:Rt("set"),delete:Rt("delete"),clear:Rt("clear"),forEach:Lt(!0,!1)},l={get(e){return Tt(this,e,!0,!0)},get size(){return Pt(this,!0)},has(e){return Ot.call(this,e,!0)},add:Rt("add"),set:Rt("set"),delete:Rt("delete"),clear:Rt("clear"),forEach:Lt(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach((n=>{e[n]=Ft(n,!1,!1),a[n]=Ft(n,!0,!1),t[n]=Ft(n,!1,!0),l[n]=Ft(n,!0,!0)})),[e,a,t,l]}();function Vt(e,t){const a=t?e?Bt:qt:e?zt:Dt;return(t,l,n)=>"__v_isReactive"===l?!e:"__v_isReadonly"===l?e:"__v_raw"===l?t:Reflect.get(pe(a,l)&&l in t?a:t,l,n)}const Ht={get:Vt(!1,!1)},Gt={get:Vt(!1,!0)},Wt={get:Vt(!0,!1)},Kt={get:Vt(!0,!0)},Jt=new WeakMap,Yt=new WeakMap,Zt=new WeakMap,Xt=new WeakMap;function Qt(e){return sa(e)?e:la(e,!1,$t,Ht,Jt)}function ea(e){return la(e,!1,Nt,Gt,Yt)}function ta(e){return la(e,!0,St,Wt,Zt)}function aa(e){return la(e,!0,Ct,Kt,Xt)}function la(e,t,a,l,n){if(!we(e))return e;if(e.__v_raw&&(!t||!e.__v_isReactive))return e;const s=n.get(e);if(s)return s;const i=function(e){return e.__v_skip||!Object.isExtensible(e)?0:function(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}((e=>$e(e).slice(8,-1))(e))}(e);if(0===i)return e;const o=new Proxy(e,2===i?l:a);return n.set(e,o),o}function na(e){return sa(e)?na(e.__v_raw):!(!e||!e.__v_isReactive)}function sa(e){return!(!e||!e.__v_isReadonly)}function ia(e){return!(!e||!e.__v_isShallow)}function oa(e){return na(e)||sa(e)}function ra(e){const t=e&&e.__v_raw;return t?ra(t):e}function ca(e){return Fe(e,"__v_skip",!0),e}const ua=e=>we(e)?Qt(e):e,da=e=>we(e)?ta(e):e;function _a(e){it&&Ze&&dt((e=ra(e)).dep||(e.dep=We()))}function pa(e,t){(e=ra(e)).dep&&pt(e.dep)}function fa(e){return!(!e||!0!==e.__v_isRef)}function ma(e){return ha(e,!1)}function va(e){return ha(e,!0)}function ha(e,t){return fa(e)?e:new ga(e,t)}class ga{constructor(e,t){this.__v_isShallow=t,this.dep=void 0,this.__v_isRef=!0,this._rawValue=t?e:ra(e),this._value=t?e:ua(e)}get value(){return _a(this),this._value}set value(e){e=this.__v_isShallow?e:ra(e),Me(e,this._rawValue)&&(this._rawValue=e,this._value=this.__v_isShallow?e:ua(e),pa(this))}}function ba(e){pa(e)}function ya(e){return fa(e)?e.value:e}const wa={get:(e,t,a)=>ya(Reflect.get(e,t,a)),set:(e,t,a,l)=>{const n=e[t];return fa(n)&&!fa(a)?(n.value=a,!0):Reflect.set(e,t,a,l)}};function xa(e){return na(e)?e:new Proxy(e,wa)}class ka{constructor(e){this.dep=void 0,this.__v_isRef=!0;const{get:t,set:a}=e((()=>_a(this)),(()=>pa(this)));this._get=t,this._set=a}get value(){return this._get()}set value(e){this._set(e)}}function $a(e){return new ka(e)}function Sa(e){const t=fe(e)?new Array(e.length):{};for(const a in e)t[a]=Ca(e,a);return t}class Na{constructor(e,t,a){this._object=e,this._key=t,this._defaultValue=a,this.__v_isRef=!0}get value(){const e=this._object[this._key];return void 0===e?this._defaultValue:e}set value(e){this._object[this._key]=e}}function Ca(e,t,a){const l=e[t];return fa(l)?l:new Na(e,t,a)}class Ea{constructor(e,t,a,l){this._setter=t,this.dep=void 0,this.__v_isRef=!0,this._dirty=!0,this.effect=new at(e,(()=>{this._dirty||(this._dirty=!0,pa(this))})),this.effect.computed=this,this.effect.active=this._cacheable=!l,this.__v_isReadonly=a}get value(){const e=ra(this);return _a(e),!e._dirty&&e._cacheable||(e._dirty=!1,e._value=e.effect.run()),e._value}set value(e){this._setter(e)}}const Aa=[];function Ta(e,...t){rt();const a=Aa.length?Aa[Aa.length-1].component:null,l=a&&a.appContext.config.warnHandler,n=function(){let e=Aa[Aa.length-1];if(!e)return[];const t=[];for(;e;){const a=t[0];a&&a.vnode===e?a.recurseCount++:t.push({vnode:e,recurseCount:0});const l=e.component&&e.component.parent;e=l&&l.vnode}return t}();if(l)Ua(l,a,11,[e+t.join(""),a&&a.proxy,n.map((({vnode:e})=>`at <${yi(a,e.type)}>`)).join("\n"),n]);else{const a=[`[Vue warn]: ${e}`,...t];n.length&&a.push("\n",...function(e){const t=[];return e.forEach(((e,a)=>{t.push(...0===a?[]:["\n"],...function({vnode:e,recurseCount:t}){const a=t>0?`... (${t} recursive calls)`:"",l=` at <${yi(e.component,e.type,!!e.component&&null==e.component.parent)}`,n=">"+a;return e.props?[l,...Oa(e.props),n]:[l+n]}(e))})),t}(n)),console.warn(...a)}ct()}function Oa(e){const t=[],a=Object.keys(e);return a.slice(0,3).forEach((a=>{t.push(...Pa(a,e[a]))})),a.length>3&&t.push(" ..."),t}function Pa(e,t,a){return be(t)?(t=JSON.stringify(t),a?t:[`${e}=${t}`]):"number"==typeof t||"boolean"==typeof t||null==t?a?t:[`${e}=${t}`]:fa(t)?(t=Pa(e,ra(t.value),!0),a?t:[`${e}=Ref<`,t,">"]):ge(t)?[`${e}=fn${t.name?`<${t.name}>`:""}`]:(t=ra(t),a?t:[`${e}=`,t])}function Ua(e,t,a,l){let n;try{n=l?e(...l):e()}catch(e){ja(e,t,a)}return n}function Ia(e,t,a,l){if(ge(e)){const n=Ua(e,t,a,l);return n&&xe(n)&&n.catch((e=>{ja(e,t,a)})),n}const n=[];for(let s=0;s<e.length;s++)n.push(Ia(e[s],t,a,l));return n}function ja(e,t,a,l=!0){if(t){let l=t.parent;const n=t.proxy,s=a;for(;l;){const t=l.ec;if(t)for(let a=0;a<t.length;a++)if(!1===t[a](e,n,s))return;l=l.parent}const i=t.appContext.config.errorHandler;if(i)return void Ua(i,null,10,[e,n,s])}!function(e,t,a,l=!0){console.error(e)}(e,0,0,l)}let Ma=!1,La=!1;const Fa=[];let Ra=0;const Da=[];let za=null,qa=0;const Ba=[];let Va=null,Ha=0;const Ga=Promise.resolve();let Wa=null,Ka=null;function Ja(e){const t=Wa||Ga;return e?t.then(this?e.bind(this):e):t}function Ya(e){Fa.length&&Fa.includes(e,Ma&&e.allowRecurse?Ra+1:Ra)||e===Ka||(null==e.id?Fa.push(e):Fa.splice(function(e){let t=Ra+1,a=Fa.length;for(;t<a;){const l=t+a>>>1;al(Fa[l])<e?t=l+1:a=l}return t}(e.id),0,e),Za())}function Za(){Ma||La||(La=!0,Wa=Ga.then(ll))}function Xa(e,t,a,l){fe(e)?a.push(...e):t&&t.includes(e,e.allowRecurse?l+1:l)||a.push(e),Za()}function Qa(e){Xa(e,Va,Ba,Ha)}function el(e,t=null){if(Da.length){for(Ka=t,za=[...new Set(Da)],Da.length=0,qa=0;qa<za.length;qa++)za[qa]();za=null,qa=0,Ka=null,el(e,t)}}function tl(e){if(el(),Ba.length){const e=[...new Set(Ba)];if(Ba.length=0,Va)return void Va.push(...e);for(Va=e,Va.sort(((e,t)=>al(e)-al(t))),Ha=0;Ha<Va.length;Ha++)Va[Ha]();Va=null,Ha=0}}const al=e=>null==e.id?1/0:e.id;function ll(e){La=!1,Ma=!0,el(e),Fa.sort(((e,t)=>al(e)-al(t)));try{for(Ra=0;Ra<Fa.length;Ra++){const e=Fa[Ra];e&&!1!==e.active&&Ua(e,null,14)}}finally{Ra=0,Fa.length=0,tl(),Ma=!1,Wa=null,(Fa.length||Da.length||Ba.length)&&ll(e)}}let nl,sl=[];function il(e,t){var a,l;nl=e,nl?(nl.enabled=!0,sl.forEach((({event:e,args:t})=>nl.emit(e,...t))),sl=[]):"undefined"!=typeof window&&window.HTMLElement&&!(null===(l=null===(a=window.navigator)||void 0===a?void 0:a.userAgent)||void 0===l?void 0:l.includes("jsdom"))?((t.__VUE_DEVTOOLS_HOOK_REPLAY__=t.__VUE_DEVTOOLS_HOOK_REPLAY__||[]).push((e=>{il(e,t)})),setTimeout((()=>{nl||(t.__VUE_DEVTOOLS_HOOK_REPLAY__=null,sl=[])}),3e3)):sl=[]}function ol(e,t,...a){if(e.isUnmounted)return;const l=e.vnode.props||le;let n=a;const s=t.startsWith("update:"),i=s&&t.slice(7);if(i&&i in l){const e=`${"modelValue"===i?"model":i}Modifiers`,{number:t,trim:s}=l[e]||le;s&&(n=a.map((e=>e.trim()))),t&&(n=a.map(Re))}let o,r=l[o=je(t)]||l[o=je(Oe(t))];!r&&s&&(r=l[o=je(Ue(t))]),r&&Ia(r,e,6,n);const c=l[o+"Once"];if(c){if(e.emitted){if(e.emitted[o])return}else e.emitted={};e.emitted[o]=!0,Ia(c,e,6,n)}}function rl(e,t,a=!1){const l=t.emitsCache,n=l.get(e);if(void 0!==n)return n;const s=e.emits;let i={},o=!1;if(!ge(e)){const l=e=>{const a=rl(e,t,!0);a&&(o=!0,ue(i,a))};!a&&t.mixins.length&&t.mixins.forEach(l),e.extends&&l(e.extends),e.mixins&&e.mixins.forEach(l)}return s||o?(fe(s)?s.forEach((e=>i[e]=null)):ue(i,s),l.set(e,i),i):(l.set(e,null),null)}function cl(e,t){return!(!e||!re(t))&&(t=t.slice(2).replace(/Once$/,""),pe(e,t[0].toLowerCase()+t.slice(1))||pe(e,Ue(t))||pe(e,t))}let ul=null,dl=null;function _l(e){const t=ul;return ul=e,dl=e&&e.type.__scopeId||null,t}function pl(e){dl=e}function fl(){dl=null}const ml=e=>vl;function vl(e,t=ul,a){if(!t)return e;if(e._n)return e;const l=(...a)=>{l._d&&Is(-1);const n=_l(t),s=e(...a);return _l(n),l._d&&Is(1),s};return l._n=!0,l._c=!0,l._d=!0,l}function hl(e){const{type:t,vnode:a,proxy:l,withProxy:n,props:s,propsOptions:[i],slots:o,attrs:r,emit:c,render:u,renderCache:d,data:_,setupState:p,ctx:f,inheritAttrs:m}=e;let v,h;const g=_l(e);try{if(4&a.shapeFlag){const e=n||l;v=Zs(u.call(e,e,d,s,p,_,f)),h=r}else{v=Zs(t(s,t.length>1?{attrs:r,slots:o,emit:c}:null)),h=t.props?r:gl(r)}}catch(t){As.length=0,ja(t,e,1),v=Hs(Cs)}let b=v;if(h&&!1!==m){const e=Object.keys(h),{shapeFlag:t}=b;e.length&&7&t&&(i&&e.some(ce)&&(h=bl(h,i)),b=Ws(b,h))}return a.dirs&&(b=Ws(b),b.dirs=b.dirs?b.dirs.concat(a.dirs):a.dirs),a.transition&&(b.transition=a.transition),v=b,_l(g),v}const gl=e=>{let t;for(const a in e)("class"===a||"style"===a||re(a))&&((t||(t={}))[a]=e[a]);return t},bl=(e,t)=>{const a={};for(const l in e)ce(l)&&l.slice(9)in t||(a[l]=e[l]);return a};function yl(e,t,a){const l=Object.keys(t);if(l.length!==Object.keys(e).length)return!0;for(let n=0;n<l.length;n++){const s=l[n];if(t[s]!==e[s]&&!cl(a,s))return!0}return!1}function wl({vnode:e,parent:t},a){for(;t&&t.subTree===e;)(e=t.vnode).el=a,t=t.parent}const xl=e=>e.__isSuspense,kl={name:"Suspense",__isSuspense:!0,process(e,t,a,l,n,s,i,o,r,c){null==e?function(e,t,a,l,n,s,i,o,r){const{p:c,o:{createElement:u}}=r,d=u("div"),_=e.suspense=Sl(e,n,l,t,d,a,s,i,o,r);c(null,_.pendingBranch=e.ssContent,d,null,l,_,s,i),_.deps>0?($l(e,"onPending"),$l(e,"onFallback"),c(null,e.ssFallback,t,a,l,null,s,i),El(_,e.ssFallback)):_.resolve()}(t,a,l,n,s,i,o,r,c):function(e,t,a,l,n,s,i,o,{p:r,um:c,o:{createElement:u}}){const d=t.suspense=e.suspense;d.vnode=t,t.el=e.el;const _=t.ssContent,p=t.ssFallback,{activeBranch:f,pendingBranch:m,isInFallback:v,isHydrating:h}=d;if(m)d.pendingBranch=_,Rs(_,m)?(r(m,_,d.hiddenContainer,null,n,d,s,i,o),d.deps<=0?d.resolve():v&&(r(f,p,a,l,n,null,s,i,o),El(d,p))):(d.pendingId++,h?(d.isHydrating=!1,d.activeBranch=m):c(m,n,d),d.deps=0,d.effects.length=0,d.hiddenContainer=u("div"),v?(r(null,_,d.hiddenContainer,null,n,d,s,i,o),d.deps<=0?d.resolve():(r(f,p,a,l,n,null,s,i,o),El(d,p))):f&&Rs(_,f)?(r(f,_,a,l,n,d,s,i,o),d.resolve(!0)):(r(null,_,d.hiddenContainer,null,n,d,s,i,o),d.deps<=0&&d.resolve()));else if(f&&Rs(_,f))r(f,_,a,l,n,d,s,i,o),El(d,_);else if($l(t,"onPending"),d.pendingBranch=_,d.pendingId++,r(null,_,d.hiddenContainer,null,n,d,s,i,o),d.deps<=0)d.resolve();else{const{timeout:e,pendingId:t}=d;e>0?setTimeout((()=>{d.pendingId===t&&d.fallback(p)}),e):0===e&&d.fallback(p)}}(e,t,a,l,n,i,o,r,c)},hydrate:function(e,t,a,l,n,s,i,o,r){const c=t.suspense=Sl(t,l,a,e.parentNode,document.createElement("div"),null,n,s,i,o,!0),u=r(e,c.pendingBranch=t.ssContent,a,c,s,i);return 0===c.deps&&c.resolve(),u},create:Sl,normalize:function(e){const{shapeFlag:t,children:a}=e,l=32&t;e.ssContent=Nl(l?a.default:a),e.ssFallback=l?Nl(a.fallback):Hs(Cs)}};function $l(e,t){const a=e.props&&e.props[t];ge(a)&&a()}function Sl(e,t,a,l,n,s,i,o,r,c,u=!1){const{p:d,m:_,um:p,n:f,o:{parentNode:m,remove:v}}=c,h=Re(e.props&&e.props.timeout),g={vnode:e,parent:t,parentComponent:a,isSVG:i,container:l,hiddenContainer:n,anchor:s,deps:0,pendingId:0,timeout:"number"==typeof h?h:-1,activeBranch:null,pendingBranch:null,isInFallback:!0,isHydrating:u,isUnmounted:!1,effects:[],resolve(e=!1){const{vnode:t,activeBranch:a,pendingBranch:l,pendingId:n,effects:s,parentComponent:i,container:o}=g;if(g.isHydrating)g.isHydrating=!1;else if(!e){const e=a&&l.transition&&"out-in"===l.transition.mode;e&&(a.transition.afterLeave=()=>{n===g.pendingId&&_(l,o,t,0)});let{anchor:t}=g;a&&(t=f(a),p(a,i,g,!0)),e||_(l,o,t,0)}El(g,l),g.pendingBranch=null,g.isInFallback=!1;let r=g.parent,c=!1;for(;r;){if(r.pendingBranch){r.effects.push(...s),c=!0;break}r=r.parent}c||Qa(s),g.effects=[],$l(t,"onResolve")},fallback(e){if(!g.pendingBranch)return;const{vnode:t,activeBranch:a,parentComponent:l,container:n,isSVG:s}=g;$l(t,"onFallback");const i=f(a),c=()=>{g.isInFallback&&(d(null,e,n,i,l,null,s,o,r),El(g,e))},u=e.transition&&"out-in"===e.transition.mode;u&&(a.transition.afterLeave=c),g.isInFallback=!0,p(a,l,null,!0),u||c()},move(e,t,a){g.activeBranch&&_(g.activeBranch,e,t,a),g.container=e},next:()=>g.activeBranch&&f(g.activeBranch),registerDep(e,t){const a=!!g.pendingBranch;a&&g.deps++;const l=e.vnode.el;e.asyncDep.catch((t=>{ja(t,e,0)})).then((n=>{if(e.isUnmounted||g.isUnmounted||g.pendingId!==e.suspenseId)return;e.asyncResolved=!0;const{vnode:s}=e;_i(e,n,!1),l&&(s.el=l);const o=!l&&e.subTree.el;t(e,s,m(l||e.subTree.el),l?null:f(e.subTree),g,i,r),o&&v(o),wl(e,s.el),a&&0==--g.deps&&g.resolve()}))},unmount(e,t){g.isUnmounted=!0,g.activeBranch&&p(g.activeBranch,a,e,t),g.pendingBranch&&p(g.pendingBranch,a,e,t)}};return g}function Nl(e){let t;if(ge(e)){const a=Us&&e._c;a&&(e._d=!1,Os()),e=e(),a&&(e._d=!0,t=Ts,Ps())}if(fe(e)){const t=function(e){let t;for(let a=0;a<e.length;a++){const l=e[a];if(!Fs(l))return;if(l.type!==Cs||"v-if"===l.children){if(t)return;t=l}}return t}(e);e=t}return e=Zs(e),t&&!e.dynamicChildren&&(e.dynamicChildren=t.filter((t=>t!==e))),e}function Cl(e,t){t&&t.pendingBranch?fe(e)?t.effects.push(...e):t.effects.push(e):Qa(e)}function El(e,t){e.activeBranch=t;const{vnode:a,parentComponent:l}=e,n=a.el=t.el;l&&l.subTree===a&&(l.vnode.el=n,wl(l,n))}function Al(e,t){if(ni){let a=ni.provides;const l=ni.parent&&ni.parent.provides;l===a&&(a=ni.provides=Object.create(l)),a[e]=t}}function Tl(e,t,a=!1){const l=ni||ul;if(l){const n=null==l.parent?l.vnode.appContext&&l.vnode.appContext.provides:l.parent.provides;if(n&&e in n)return n[e];if(arguments.length>1)return a&&ge(t)?t.call(l.proxy):t}}function Ol(e,t){return Ml(e,null,t)}function Pl(e,t){return Ml(e,null,{flush:"post"})}function Ul(e,t){return Ml(e,null,{flush:"sync"})}const Il={};function jl(e,t,a){return Ml(e,t,a)}function Ml(e,t,{immediate:a,deep:l,flush:n}=le){const s=ni;let i,o,r=!1,c=!1;if(fa(e)?(i=()=>e.value,r=ia(e)):na(e)?(i=()=>e,l=!0):fe(e)?(c=!0,r=e.some((e=>na(e)||ia(e))),i=()=>e.map((e=>fa(e)?e.value:na(e)?Rl(e):ge(e)?Ua(e,s,2):void 0))):i=ge(e)?t?()=>Ua(e,s,2):()=>{if(!s||!s.isUnmounted)return o&&o(),Ia(e,s,3,[u])}:se,t&&l){const e=i;i=()=>Rl(e())}let u=e=>{o=f.onStop=()=>{Ua(e,s,4)}},d=c?[]:Il;const _=()=>{if(f.active)if(t){const e=f.run();(l||r||(c?e.some(((e,t)=>Me(e,d[t]))):Me(e,d)))&&(o&&o(),Ia(t,s,3,[e,d===Il?void 0:d,u]),d=e)}else f.run()};let p;_.allowRecurse=!!t,p="sync"===n?_:"post"===n?()=>fs(_,s&&s.suspense):()=>function(e){Xa(e,za,Da,qa)}(_);const f=new at(i,p);return t?a?_():d=f.run():"post"===n?fs(f.run.bind(f),s&&s.suspense):f.run(),()=>{f.stop(),s&&s.scope&&de(s.scope.effects,f)}}function Ll(e,t,a){const l=this.proxy,n=be(e)?e.includes(".")?Fl(l,e):()=>l[e]:e.bind(l,l);let s;ge(t)?s=t:(s=t.handler,a=t);const i=ni;ii(this);const o=Ml(n,s.bind(l),a);return i?ii(i):oi(),o}function Fl(e,t){const a=t.split(".");return()=>{let t=e;for(let e=0;e<a.length&&t;e++)t=t[a[e]];return t}}function Rl(e,t){if(!we(e)||e.__v_skip)return e;if((t=t||new Set).has(e))return e;if(t.add(e),fa(e))Rl(e.value,t);else if(fe(e))for(let a=0;a<e.length;a++)Rl(e[a],t);else if(ve(e)||me(e))e.forEach((e=>{Rl(e,t)}));else if(Se(e))for(const a in e)Rl(e[a],t);return e}function Dl(){const e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return _n((()=>{e.isMounted=!0})),mn((()=>{e.isUnmounting=!0})),e}const zl=[Function,Array],ql={name:"BaseTransition",props:{mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:zl,onEnter:zl,onAfterEnter:zl,onEnterCancelled:zl,onBeforeLeave:zl,onLeave:zl,onAfterLeave:zl,onLeaveCancelled:zl,onBeforeAppear:zl,onAppear:zl,onAfterAppear:zl,onAppearCancelled:zl},setup(e,{slots:t}){const a=si(),l=Dl();let n;return()=>{const s=t.default&&Kl(t.default(),!0);if(!s||!s.length)return;let i=s[0];if(s.length>1)for(const e of s)if(e.type!==Cs){i=e;break}const o=ra(e),{mode:r}=o;if(l.isLeaving)return Hl(i);const c=Gl(i);if(!c)return Hl(i);const u=Vl(c,o,l,a);Wl(c,u);const d=a.subTree,_=d&&Gl(d);let p=!1;const{getTransitionKey:f}=c.type;if(f){const e=f();void 0===n?n=e:e!==n&&(n=e,p=!0)}if(_&&_.type!==Cs&&(!Rs(c,_)||p)){const e=Vl(_,o,l,a);if(Wl(_,e),"out-in"===r)return l.isLeaving=!0,e.afterLeave=()=>{l.isLeaving=!1,a.update()},Hl(i);"in-out"===r&&c.type!==Cs&&(e.delayLeave=(e,t,a)=>{Bl(l,_)[String(_.key)]=_,e._leaveCb=()=>{t(),e._leaveCb=void 0,delete u.delayedLeave},u.delayedLeave=a})}return i}}};function Bl(e,t){const{leavingVNodes:a}=e;let l=a.get(t.type);return l||(l=Object.create(null),a.set(t.type,l)),l}function Vl(e,t,a,l){const{appear:n,mode:s,persisted:i=!1,onBeforeEnter:o,onEnter:r,onAfterEnter:c,onEnterCancelled:u,onBeforeLeave:d,onLeave:_,onAfterLeave:p,onLeaveCancelled:f,onBeforeAppear:m,onAppear:v,onAfterAppear:h,onAppearCancelled:g}=t,b=String(e.key),y=Bl(a,e),w=(e,t)=>{e&&Ia(e,l,9,t)},x=(e,t)=>{const a=t[1];w(e,t),fe(e)?e.every((e=>e.length<=1))&&a():e.length<=1&&a()},k={mode:s,persisted:i,beforeEnter(t){let l=o;if(!a.isMounted){if(!n)return;l=m||o}t._leaveCb&&t._leaveCb(!0);const s=y[b];s&&Rs(e,s)&&s.el._leaveCb&&s.el._leaveCb(),w(l,[t])},enter(e){let t=r,l=c,s=u;if(!a.isMounted){if(!n)return;t=v||r,l=h||c,s=g||u}let i=!1;const o=e._enterCb=t=>{i||(i=!0,w(t?s:l,[e]),k.delayedLeave&&k.delayedLeave(),e._enterCb=void 0)};t?x(t,[e,o]):o()},leave(t,l){const n=String(e.key);if(t._enterCb&&t._enterCb(!0),a.isUnmounting)return l();w(d,[t]);let s=!1;const i=t._leaveCb=a=>{s||(s=!0,l(),w(a?f:p,[t]),t._leaveCb=void 0,y[n]===e&&delete y[n])};y[n]=e,_?x(_,[t,i]):i()},clone:e=>Vl(e,t,a,l)};return k}function Hl(e){if(Ql(e))return(e=Ws(e)).children=null,e}function Gl(e){return Ql(e)?e.children?e.children[0]:void 0:e}function Wl(e,t){6&e.shapeFlag&&e.component?Wl(e.component.subTree,t):128&e.shapeFlag?(e.ssContent.transition=t.clone(e.ssContent),e.ssFallback.transition=t.clone(e.ssFallback)):e.transition=t}function Kl(e,t=!1,a){let l=[],n=0;for(let s=0;s<e.length;s++){let i=e[s];const o=null==a?i.key:String(a)+String(null!=i.key?i.key:s);i.type===Ss?(128&i.patchFlag&&n++,l=l.concat(Kl(i.children,t,o))):(t||i.type!==Cs)&&l.push(null!=o?Ws(i,{key:o}):i)}if(n>1)for(let e=0;e<l.length;e++)l[e].patchFlag=-2;return l}function Jl(e){return ge(e)?{setup:e,name:e.name}:e}const Yl=e=>!!e.type.__asyncLoader;function Zl(e){ge(e)&&(e={loader:e});const{loader:t,loadingComponent:a,errorComponent:l,delay:n=200,timeout:s,suspensible:i=!0,onError:o}=e;let r,c=null,u=0;const d=()=>{let e;return c||(e=c=t().catch((e=>{if(e=e instanceof Error?e:new Error(String(e)),o)return new Promise(((t,a)=>{o(e,(()=>t((u++,c=null,d()))),(()=>a(e)),u+1)}));throw e})).then((t=>e!==c&&c?c:(t&&(t.__esModule||"Module"===t[Symbol.toStringTag])&&(t=t.default),r=t,t))))};return Jl({name:"AsyncComponentWrapper",__asyncLoader:d,get __asyncResolved(){return r},setup(){const e=ni;if(r)return()=>Xl(r,e);const t=t=>{c=null,ja(t,e,13,!l)};if(i&&e.suspense)return d().then((t=>()=>Xl(t,e))).catch((e=>(t(e),()=>l?Hs(l,{error:e}):null)));const o=ma(!1),u=ma(),_=ma(!!n);return n&&setTimeout((()=>{_.value=!1}),n),null!=s&&setTimeout((()=>{if(!o.value&&!u.value){const e=new Error(`Async component timed out after ${s}ms.`);t(e),u.value=e}}),s),d().then((()=>{o.value=!0,e.parent&&Ql(e.parent.vnode)&&Ya(e.parent.update)})).catch((e=>{t(e),u.value=e})),()=>o.value&&r?Xl(r,e):u.value&&l?Hs(l,{error:u.value}):a&&!_.value?Hs(a):void 0}})}function Xl(e,{vnode:{ref:t,props:a,children:l}}){const n=Hs(e,a,l);return n.ref=t,n}const Ql=e=>e.type.__isKeepAlive,en={name:"KeepAlive",__isKeepAlive:!0,props:{include:[String,RegExp,Array],exclude:[String,RegExp,Array],max:[String,Number]},setup(e,{slots:t}){const a=si(),l=a.ctx,n=new Map,s=new Set;let i=null;const o=a.suspense,{renderer:{p:r,m:c,um:u,o:{createElement:d}}}=l,_=d("div");function p(e){on(e),u(e,a,o,!0)}function f(e){n.forEach(((t,a)=>{const l=bi(t.type);!l||e&&e(l)||m(a)}))}function m(e){const t=n.get(e);i&&t.type===i.type?i&&on(i):p(t),n.delete(e),s.delete(e)}l.activate=(e,t,a,l,n)=>{const s=e.component;c(e,t,a,0,o),r(s.vnode,e,t,a,s,o,l,e.slotScopeIds,n),fs((()=>{s.isDeactivated=!1,s.a&&Le(s.a);const t=e.props&&e.props.onVnodeMounted;t&&ti(t,s.parent,e)}),o)},l.deactivate=e=>{const t=e.component;c(e,_,null,1,o),fs((()=>{t.da&&Le(t.da);const a=e.props&&e.props.onVnodeUnmounted;a&&ti(a,t.parent,e),t.isDeactivated=!0}),o)},jl((()=>[e.include,e.exclude]),(([e,t])=>{e&&f((t=>tn(e,t))),t&&f((e=>!tn(t,e)))}),{flush:"post",deep:!0});let v=null;const h=()=>{null!=v&&n.set(v,rn(a.subTree))};return _n(h),fn(h),mn((()=>{n.forEach((e=>{const{subTree:t,suspense:l}=a,n=rn(t);if(e.type!==n.type)p(e);else{on(n);const e=n.component.da;e&&fs(e,l)}}))})),()=>{if(v=null,!t.default)return null;const a=t.default(),l=a[0];if(a.length>1)return i=null,a;if(!Fs(l)||!(4&l.shapeFlag||128&l.shapeFlag))return i=null,l;let o=rn(l);const r=o.type,c=bi(Yl(o)?o.type.__asyncResolved||{}:r),{include:u,exclude:d,max:_}=e;if(u&&(!c||!tn(u,c))||d&&c&&tn(d,c))return i=o,l;const p=null==o.key?r:o.key,f=n.get(p);return o.el&&(o=Ws(o),128&l.shapeFlag&&(l.ssContent=o)),v=p,f?(o.el=f.el,o.component=f.component,o.transition&&Wl(o,o.transition),o.shapeFlag|=512,s.delete(p),s.add(p)):(s.add(p),_&&s.size>parseInt(_,10)&&m(s.values().next().value)),o.shapeFlag|=256,i=o,xl(l.type)?l:o}}};function tn(e,t){return fe(e)?e.some((e=>tn(e,t))):be(e)?e.split(",").includes(t):!!e.test&&e.test(t)}function an(e,t){nn(e,"a",t)}function ln(e,t){nn(e,"da",t)}function nn(e,t,a=ni){const l=e.__wdc||(e.__wdc=()=>{let t=a;for(;t;){if(t.isDeactivated)return;t=t.parent}return e()});if(cn(t,l,a),a){let e=a.parent;for(;e&&e.parent;)Ql(e.parent.vnode)&&sn(l,t,a,e),e=e.parent}}function sn(e,t,a,l){const n=cn(t,e,l,!0);vn((()=>{de(l[t],n)}),a)}function on(e){let t=e.shapeFlag;256&t&&(t-=256),512&t&&(t-=512),e.shapeFlag=t}function rn(e){return 128&e.shapeFlag?e.ssContent:e}function cn(e,t,a=ni,l=!1){if(a){const n=a[e]||(a[e]=[]),s=t.__weh||(t.__weh=(...l)=>{if(a.isUnmounted)return;rt(),ii(a);const n=Ia(t,a,e,l);return oi(),ct(),n});return l?n.unshift(s):n.push(s),s}}const un=e=>(t,a=ni)=>(!di||"sp"===e)&&cn(e,t,a),dn=un("bm"),_n=un("m"),pn=un("bu"),fn=un("u"),mn=un("bum"),vn=un("um"),hn=un("sp"),gn=un("rtg"),bn=un("rtc");function yn(e,t=ni){cn("ec",e,t)}function wn(e,t){const a=ul;if(null===a)return e;const l=hi(a)||a.proxy,n=e.dirs||(e.dirs=[]);for(let e=0;e<t.length;e++){let[a,s,i,o=le]=t[e];ge(a)&&(a={mounted:a,updated:a}),a.deep&&Rl(s),n.push({dir:a,instance:l,value:s,oldValue:void 0,arg:i,modifiers:o})}return e}function xn(e,t,a,l){const n=e.dirs,s=t&&t.dirs;for(let i=0;i<n.length;i++){const o=n[i];s&&(o.oldValue=s[i].value);let r=o.dir[l];r&&(rt(),Ia(r,a,8,[e.el,o,e,t]),ct())}}function kn(e,t){return Cn("components",e,!0,t)||e}const $n=Symbol();function Sn(e){return be(e)?Cn("components",e,!1)||e:e||$n}function Nn(e){return Cn("directives",e)}function Cn(e,t,a=!0,l=!1){const n=ul||ni;if(n){const a=n.type;if("components"===e){const e=bi(a,!1);if(e&&(e===t||e===Oe(t)||e===Ie(Oe(t))))return a}const s=En(n[e]||a[e],t)||En(n.appContext[e],t);return!s&&l?a:s}}function En(e,t){return e&&(e[t]||e[Oe(t)]||e[Ie(Oe(t))])}function An(e,t,a,l){let n;const s=a&&a[l];if(fe(e)||be(e)){n=new Array(e.length);for(let a=0,l=e.length;a<l;a++)n[a]=t(e[a],a,void 0,s&&s[a])}else if("number"==typeof e){n=new Array(e);for(let a=0;a<e;a++)n[a]=t(a+1,a,void 0,s&&s[a])}else if(we(e))if(e[Symbol.iterator])n=Array.from(e,((e,a)=>t(e,a,void 0,s&&s[a])));else{const a=Object.keys(e);n=new Array(a.length);for(let l=0,i=a.length;l<i;l++){const i=a[l];n[l]=t(e[i],i,l,s&&s[l])}}else n=[];return a&&(a[l]=n),n}function Tn(e,t){for(let a=0;a<t.length;a++){const l=t[a];if(fe(l))for(let t=0;t<l.length;t++)e[l[t].name]=l[t].fn;else l&&(e[l.name]=l.fn)}return e}function On(e,t,a={},l,n){if(ul.isCE||ul.parent&&Yl(ul.parent)&&ul.parent.isCE)return Hs("slot","default"===t?null:{name:t},l&&l());let s=e[t];s&&s._c&&(s._d=!1),Os();const i=s&&Pn(s(a)),o=Ls(Ss,{key:a.key||`_${t}`},i||(l?l():[]),i&&1===e._?64:-2);return!n&&o.scopeId&&(o.slotScopeIds=[o.scopeId+"-s"]),s&&s._c&&(s._d=!0),o}function Pn(e){return e.some((e=>!Fs(e)||e.type!==Cs&&!(e.type===Ss&&!Pn(e.children))))?e:null}function Un(e){const t={};for(const a in e)t[je(a)]=e[a];return t}const In=e=>e?ri(e)?hi(e)||e.proxy:In(e.parent):null,jn=ue(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>e.props,$attrs:e=>e.attrs,$slots:e=>e.slots,$refs:e=>e.refs,$parent:e=>In(e.parent),$root:e=>In(e.root),$emit:e=>e.emit,$options:e=>zn(e),$forceUpdate:e=>e.f||(e.f=()=>Ya(e.update)),$nextTick:e=>e.n||(e.n=Ja.bind(e.proxy)),$watch:e=>Ll.bind(e)}),Mn={get({_:e},t){const{ctx:a,setupState:l,data:n,props:s,accessCache:i,type:o,appContext:r}=e;let c;if("$"!==t[0]){const o=i[t];if(void 0!==o)switch(o){case 1:return l[t];case 2:return n[t];case 4:return a[t];case 3:return s[t]}else{if(l!==le&&pe(l,t))return i[t]=1,l[t];if(n!==le&&pe(n,t))return i[t]=2,n[t];if((c=e.propsOptions[0])&&pe(c,t))return i[t]=3,s[t];if(a!==le&&pe(a,t))return i[t]=4,a[t];Fn&&(i[t]=0)}}const u=jn[t];let d,_;return u?("$attrs"===t&&ut(e,0,t),u(e)):(d=o.__cssModules)&&(d=d[t])?d:a!==le&&pe(a,t)?(i[t]=4,a[t]):(_=r.config.globalProperties,pe(_,t)?_[t]:void 0)},set({_:e},t,a){const{data:l,setupState:n,ctx:s}=e;return n!==le&&pe(n,t)?(n[t]=a,!0):l!==le&&pe(l,t)?(l[t]=a,!0):!(pe(e.props,t)||"$"===t[0]&&t.slice(1)in e||(s[t]=a,0))},has({_:{data:e,setupState:t,accessCache:a,ctx:l,appContext:n,propsOptions:s}},i){let o;return!!a[i]||e!==le&&pe(e,i)||t!==le&&pe(t,i)||(o=s[0])&&pe(o,i)||pe(l,i)||pe(jn,i)||pe(n.config.globalProperties,i)},defineProperty(e,t,a){return null!=a.get?e._.accessCache[t]=0:pe(a,"value")&&this.set(e,t,a.value,null),Reflect.defineProperty(e,t,a)}},Ln=ue({},Mn,{get(e,t){if(t!==Symbol.unscopables)return Mn.get(e,t,e)},has:(e,t)=>"_"!==t[0]&&!z(t)});let Fn=!0;function Rn(e,t,a){Ia(fe(e)?e.map((e=>e.bind(t.proxy))):e.bind(t.proxy),t,a)}function Dn(e,t,a,l){const n=l.includes(".")?Fl(a,l):()=>a[l];if(be(e)){const a=t[e];ge(a)&&jl(n,a)}else if(ge(e))jl(n,e.bind(a));else if(we(e))if(fe(e))e.forEach((e=>Dn(e,t,a,l)));else{const l=ge(e.handler)?e.handler.bind(a):t[e.handler];ge(l)&&jl(n,l,e)}}function zn(e){const t=e.type,{mixins:a,extends:l}=t,{mixins:n,optionsCache:s,config:{optionMergeStrategies:i}}=e.appContext,o=s.get(t);let r;return o?r=o:n.length||a||l?(r={},n.length&&n.forEach((e=>qn(r,e,i,!0))),qn(r,t,i)):r=t,s.set(t,r),r}function qn(e,t,a,l=!1){const{mixins:n,extends:s}=t;s&&qn(e,s,a,!0),n&&n.forEach((t=>qn(e,t,a,!0)));for(const n in t)if(l&&"expose"===n);else{const l=Bn[n]||a&&a[n];e[n]=l?l(e[n],t[n]):t[n]}return e}const Bn={data:Vn,props:Wn,emits:Wn,methods:Wn,computed:Wn,beforeCreate:Gn,created:Gn,beforeMount:Gn,mounted:Gn,beforeUpdate:Gn,updated:Gn,beforeDestroy:Gn,beforeUnmount:Gn,destroyed:Gn,unmounted:Gn,activated:Gn,deactivated:Gn,errorCaptured:Gn,serverPrefetch:Gn,components:Wn,directives:Wn,watch:function(e,t){if(!e)return t;if(!t)return e;const a=ue(Object.create(null),e);for(const l in t)a[l]=Gn(e[l],t[l]);return a},provide:Vn,inject:function(e,t){return Wn(Hn(e),Hn(t))}};function Vn(e,t){return t?e?function(){return ue(ge(e)?e.call(this,this):e,ge(t)?t.call(this,this):t)}:t:e}function Hn(e){if(fe(e)){const t={};for(let a=0;a<e.length;a++)t[e[a]]=e[a];return t}return e}function Gn(e,t){return e?[...new Set([].concat(e,t))]:t}function Wn(e,t){return e?ue(ue(Object.create(null),e),t):t}function Kn(e,t,a,l){const[n,s]=e.propsOptions;let i,o=!1;if(t)for(let r in t){if(Ce(r))continue;const c=t[r];let u;n&&pe(n,u=Oe(r))?s&&s.includes(u)?(i||(i={}))[u]=c:a[u]=c:cl(e.emitsOptions,r)||r in l&&c===l[r]||(l[r]=c,o=!0)}if(s){const t=ra(a),l=i||le;for(let i=0;i<s.length;i++){const o=s[i];a[o]=Jn(n,t,o,l[o],e,!pe(l,o))}}return o}function Jn(e,t,a,l,n,s){const i=e[a];if(null!=i){const e=pe(i,"default");if(e&&void 0===l){const e=i.default;if(i.type!==Function&&ge(e)){const{propsDefaults:s}=n;a in s?l=s[a]:(ii(n),l=s[a]=e.call(null,t),oi())}else l=e}i[0]&&(s&&!e?l=!1:!i[1]||""!==l&&l!==Ue(a)||(l=!0))}return l}function Yn(e,t,a=!1){const l=t.propsCache,n=l.get(e);if(n)return n;const s=e.props,i={},o=[];let r=!1;if(!ge(e)){const l=e=>{r=!0;const[a,l]=Yn(e,t,!0);ue(i,a),l&&o.push(...l)};!a&&t.mixins.length&&t.mixins.forEach(l),e.extends&&l(e.extends),e.mixins&&e.mixins.forEach(l)}if(!s&&!r)return l.set(e,ne),ne;if(fe(s))for(let e=0;e<s.length;e++){const t=Oe(s[e]);Zn(t)&&(i[t]=le)}else if(s)for(const e in s){const t=Oe(e);if(Zn(t)){const a=s[e],l=i[t]=fe(a)||ge(a)?{type:a}:a;if(l){const e=es(Boolean,l.type),a=es(String,l.type);l[0]=e>-1,l[1]=a<0||e<a,(e>-1||pe(l,"default"))&&o.push(t)}}}const c=[i,o];return l.set(e,c),c}function Zn(e){return"$"!==e[0]}function Xn(e){const t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:null===e?"null":""}function Qn(e,t){return Xn(e)===Xn(t)}function es(e,t){return fe(t)?t.findIndex((t=>Qn(t,e))):ge(t)&&Qn(t,e)?0:-1}const ts=e=>"_"===e[0]||"$stable"===e,as=e=>fe(e)?e.map(Zs):[Zs(e)],ls=(e,t,a)=>{if(t._n)return t;const l=vl(((...e)=>as(t(...e))),a);return l._c=!1,l},ns=(e,t,a)=>{const l=e._ctx;for(const a in e){if(ts(a))continue;const n=e[a];if(ge(n))t[a]=ls(0,n,l);else if(null!=n){const e=as(n);t[a]=()=>e}}},ss=(e,t)=>{const a=as(t);e.slots.default=()=>a};function is(){return{app:null,config:{isNativeTag:ie,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let os=0;function rs(e,t){return function(a,l=null){ge(a)||(a=Object.assign({},a)),null==l||we(l)||(l=null);const n=is(),s=new Set;let i=!1;const o=n.app={_uid:os++,_component:a,_props:l,_container:null,_context:n,_instance:null,version:Fi,get config(){return n.config},set config(e){},use:(e,...t)=>(s.has(e)||(e&&ge(e.install)?(s.add(e),e.install(o,...t)):ge(e)&&(s.add(e),e(o,...t))),o),mixin:e=>(n.mixins.includes(e)||n.mixins.push(e),o),component:(e,t)=>t?(n.components[e]=t,o):n.components[e],directive:(e,t)=>t?(n.directives[e]=t,o):n.directives[e],mount(s,r,c){if(!i){const u=Hs(a,l);return u.appContext=n,r&&t?t(u,s):e(u,s,c),i=!0,o._container=s,s.__vue_app__=o,hi(u.component)||u.component.proxy}},unmount(){i&&(e(null,o._container),delete o._container.__vue_app__)},provide:(e,t)=>(n.provides[e]=t,o)};return o}}function cs(e,t,a,l,n=!1){if(fe(e))return void e.forEach(((e,s)=>cs(e,t&&(fe(t)?t[s]:t),a,l,n)));if(Yl(l)&&!n)return;const s=4&l.shapeFlag?hi(l.component)||l.component.proxy:l.el,i=n?null:s,{i:o,r:r}=e,c=t&&t.r,u=o.refs===le?o.refs={}:o.refs,d=o.setupState;if(null!=c&&c!==r&&(be(c)?(u[c]=null,pe(d,c)&&(d[c]=null)):fa(c)&&(c.value=null)),ge(r))Ua(r,o,12,[i,u]);else{const t=be(r),l=fa(r);if(t||l){const o=()=>{if(e.f){const a=t?u[r]:r.value;n?fe(a)&&de(a,s):fe(a)?a.includes(s)||a.push(s):t?(u[r]=[s],pe(d,r)&&(d[r]=u[r])):(r.value=[s],e.k&&(u[e.k]=r.value))}else t?(u[r]=i,pe(d,r)&&(d[r]=i)):l&&(r.value=i,e.k&&(u[e.k]=i))};i?(o.id=-1,fs(o,a)):o()}}}let us=!1;const ds=e=>/svg/.test(e.namespaceURI)&&"foreignObject"!==e.tagName,_s=e=>8===e.nodeType;function ps(e){const{mt:t,p:a,o:{patchProp:l,createText:n,nextSibling:s,parentNode:i,remove:o,insert:r,createComment:c}}=e,u=(a,l,o,c,v,h=!1)=>{const g=_s(a)&&"["===a.data,b=()=>f(a,l,o,c,v,g),{type:y,ref:w,shapeFlag:x,patchFlag:k}=l,$=a.nodeType;l.el=a,-2===k&&(h=!1,l.dynamicChildren=null);let S=null;switch(y){case Ns:3!==$?""===l.children?(r(l.el=n(""),i(a),a),S=a):S=b():(a.data!==l.children&&(us=!0,a.data=l.children),S=s(a));break;case Cs:S=8!==$||g?b():s(a);break;case Es:if(1===$||3===$){S=a;const e=!l.children.length;for(let t=0;t<l.staticCount;t++)e&&(l.children+=1===S.nodeType?S.outerHTML:S.data),t===l.staticCount-1&&(l.anchor=S),S=s(S);return S}S=b();break;case Ss:S=g?p(a,l,o,c,v,h):b();break;default:if(1&x)S=1!==$||l.type.toLowerCase()!==a.tagName.toLowerCase()?b():d(a,l,o,c,v,h);else if(6&x){l.slotScopeIds=v;const e=i(a);if(t(l,e,null,o,c,ds(e),h),S=g?m(a):s(a),S&&_s(S)&&"teleport end"===S.data&&(S=s(S)),Yl(l)){let t;g?(t=Hs(Ss),t.anchor=S?S.previousSibling:e.lastChild):t=3===a.nodeType?Ks(""):Hs("div"),t.el=a,l.component.subTree=t}}else 64&x?S=8!==$?b():l.type.hydrate(a,l,o,c,v,h,e,_):128&x&&(S=l.type.hydrate(a,l,o,c,ds(i(a)),v,h,e,u))}return null!=w&&cs(w,null,c,l),S},d=(e,t,a,n,s,i)=>{i=i||!!t.dynamicChildren;const{type:r,props:c,patchFlag:u,shapeFlag:d,dirs:p}=t,f="input"===r&&p||"option"===r;if(f||-1!==u){if(p&&xn(t,null,a,"created"),c)if(f||!i||48&u)for(const t in c)(f&&t.endsWith("value")||re(t)&&!Ce(t))&&l(e,t,null,c[t],!1,void 0,a);else c.onClick&&l(e,"onClick",null,c.onClick,!1,void 0,a);let r;if((r=c&&c.onVnodeBeforeMount)&&ti(r,a,t),p&&xn(t,null,a,"beforeMount"),((r=c&&c.onVnodeMounted)||p)&&Cl((()=>{r&&ti(r,a,t),p&&xn(t,null,a,"mounted")}),n),16&d&&(!c||!c.innerHTML&&!c.textContent)){let l=_(e.firstChild,t,e,a,n,s,i);for(;l;){us=!0;const e=l;l=l.nextSibling,o(e)}}else 8&d&&e.textContent!==t.children&&(us=!0,e.textContent=t.children)}return e.nextSibling},_=(e,t,l,n,s,i,o)=>{o=o||!!t.dynamicChildren;const r=t.children,c=r.length;for(let t=0;t<c;t++){const c=o?r[t]:r[t]=Zs(r[t]);if(e)e=u(e,c,n,s,i,o);else{if(c.type===Ns&&!c.children)continue;us=!0,a(null,c,l,null,n,s,ds(l),i)}}return e},p=(e,t,a,l,n,o)=>{const{slotScopeIds:u}=t;u&&(n=n?n.concat(u):u);const d=i(e),p=_(s(e),t,d,a,l,n,o);return p&&_s(p)&&"]"===p.data?s(t.anchor=p):(us=!0,r(t.anchor=c("]"),d,p),p)},f=(e,t,l,n,r,c)=>{if(us=!0,t.el=null,c){const t=m(e);for(;;){const a=s(e);if(!a||a===t)break;o(a)}}const u=s(e),d=i(e);return o(e),a(null,t,d,u,l,n,ds(d),r),u},m=e=>{let t=0;for(;e;)if((e=s(e))&&_s(e)&&("["===e.data&&t++,"]"===e.data)){if(0===t)return s(e);t--}return e};return[(e,t)=>{if(!t.hasChildNodes())return a(null,e,t),tl(),void(t._vnode=e);us=!1,u(t.firstChild,e,null,null,null),tl(),t._vnode=e,us&&console.error("Hydration completed but contains mismatches.")},u]}const fs=Cl;function ms(e){return hs(e)}function vs(e){return hs(e,ps)}function hs(e,t){(De||(De="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{})).__VUE__=!0;const{insert:a,remove:l,patchProp:n,createElement:s,createText:i,createComment:o,setText:r,setElementText:c,parentNode:u,nextSibling:d,setScopeId:_=se,cloneNode:p,insertStaticContent:f}=e,m=(e,t,a,l=null,n=null,s=null,i=!1,o=null,r=!!t.dynamicChildren)=>{if(e===t)return;e&&!Rs(e,t)&&(l=z(e),M(e,n,s,!0),e=null),-2===t.patchFlag&&(r=!1,t.dynamicChildren=null);const{type:c,ref:u,shapeFlag:d}=t;switch(c){case Ns:v(e,t,a,l);break;case Cs:h(e,t,a,l);break;case Es:null==e&&g(t,a,l,i);break;case Ss:N(e,t,a,l,n,s,i,o,r);break;default:1&d?b(e,t,a,l,n,s,i,o,r):6&d?C(e,t,a,l,n,s,i,o,r):(64&d||128&d)&&c.process(e,t,a,l,n,s,i,o,r,B)}null!=u&&n&&cs(u,e&&e.ref,s,t||e,!t)},v=(e,t,l,n)=>{if(null==e)a(t.el=i(t.children),l,n);else{const a=t.el=e.el;t.children!==e.children&&r(a,t.children)}},h=(e,t,l,n)=>{null==e?a(t.el=o(t.children||""),l,n):t.el=e.el},g=(e,t,a,l)=>{[e.el,e.anchor]=f(e.children,t,a,l,e.el,e.anchor)},b=(e,t,a,l,n,s,i,o,r)=>{i=i||"svg"===t.type,null==e?y(t,a,l,n,s,i,o,r):k(e,t,n,s,i,o,r)},y=(e,t,l,i,o,r,u,d)=>{let _,f;const{type:m,props:v,shapeFlag:h,transition:g,patchFlag:b,dirs:y}=e;if(e.el&&void 0!==p&&-1===b)_=e.el=p(e.el);else{if(_=e.el=s(e.type,r,v&&v.is,v),8&h?c(_,e.children):16&h&&x(e.children,_,null,i,o,r&&"foreignObject"!==m,u,d),y&&xn(e,null,i,"created"),v){for(const t in v)"value"===t||Ce(t)||n(_,t,null,v[t],r,e.children,i,o,D);"value"in v&&n(_,"value",null,v.value),(f=v.onVnodeBeforeMount)&&ti(f,i,e)}w(_,e,e.scopeId,u,i)}y&&xn(e,null,i,"beforeMount");const k=(!o||o&&!o.pendingBranch)&&g&&!g.persisted;k&&g.beforeEnter(_),a(_,t,l),((f=v&&v.onVnodeMounted)||k||y)&&fs((()=>{f&&ti(f,i,e),k&&g.enter(_),y&&xn(e,null,i,"mounted")}),o)},w=(e,t,a,l,n)=>{if(a&&_(e,a),l)for(let t=0;t<l.length;t++)_(e,l[t]);if(n&&t===n.subTree){const t=n.vnode;w(e,t,t.scopeId,t.slotScopeIds,n.parent)}},x=(e,t,a,l,n,s,i,o,r=0)=>{for(let c=r;c<e.length;c++){const r=e[c]=o?Xs(e[c]):Zs(e[c]);m(null,r,t,a,l,n,s,i,o)}},k=(e,t,a,l,s,i,o)=>{const r=t.el=e.el;let{patchFlag:u,dynamicChildren:d,dirs:_}=t;u|=16&e.patchFlag;const p=e.props||le,f=t.props||le;let m;a&&gs(a,!1),(m=f.onVnodeBeforeUpdate)&&ti(m,a,t,e),_&&xn(t,e,a,"beforeUpdate"),a&&gs(a,!0);const v=s&&"foreignObject"!==t.type;if(d?$(e.dynamicChildren,d,r,a,l,v,i):o||P(e,t,r,null,a,l,v,i,!1),u>0){if(16&u)S(r,t,p,f,a,l,s);else if(2&u&&p.class!==f.class&&n(r,"class",null,f.class,s),4&u&&n(r,"style",p.style,f.style,s),8&u){const i=t.dynamicProps;for(let t=0;t<i.length;t++){const o=i[t],c=p[o],u=f[o];u===c&&"value"!==o||n(r,o,c,u,s,e.children,a,l,D)}}1&u&&e.children!==t.children&&c(r,t.children)}else o||null!=d||S(r,t,p,f,a,l,s);((m=f.onVnodeUpdated)||_)&&fs((()=>{m&&ti(m,a,t,e),_&&xn(t,e,a,"updated")}),l)},$=(e,t,a,l,n,s,i)=>{for(let o=0;o<t.length;o++){const r=e[o],c=t[o],d=r.el&&(r.type===Ss||!Rs(r,c)||70&r.shapeFlag)?u(r.el):a;m(r,c,d,null,l,n,s,i,!0)}},S=(e,t,a,l,s,i,o)=>{if(a!==l){for(const r in l){if(Ce(r))continue;const c=l[r],u=a[r];c!==u&&"value"!==r&&n(e,r,u,c,o,t.children,s,i,D)}if(a!==le)for(const r in a)Ce(r)||r in l||n(e,r,a[r],null,o,t.children,s,i,D);"value"in l&&n(e,"value",a.value,l.value)}},N=(e,t,l,n,s,o,r,c,u)=>{const d=t.el=e?e.el:i(""),_=t.anchor=e?e.anchor:i("");let{patchFlag:p,dynamicChildren:f,slotScopeIds:m}=t;m&&(c=c?c.concat(m):m),null==e?(a(d,l,n),a(_,l,n),x(t.children,l,_,s,o,r,c,u)):p>0&&64&p&&f&&e.dynamicChildren?($(e.dynamicChildren,f,l,s,o,r,c),(null!=t.key||s&&t===s.subTree)&&bs(e,t,!0)):P(e,t,l,_,s,o,r,c,u)},C=(e,t,a,l,n,s,i,o,r)=>{t.slotScopeIds=o,null==e?512&t.shapeFlag?n.ctx.activate(t,a,l,i,r):E(t,a,l,n,s,i,r):A(e,t,r)},E=(e,t,a,l,n,s,i)=>{const o=e.component=function(e,t,a){const l=e.type,n=(t?t.appContext:e.appContext)||ai,s={uid:li++,vnode:e,type:l,parent:t,appContext:n,root:null,next:null,subTree:null,effect:null,update:null,scope:new qe(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:t?t.provides:Object.create(n.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:Yn(l,n),emitsOptions:rl(l,n),emit:null,emitted:null,propsDefaults:le,inheritAttrs:l.inheritAttrs,ctx:le,data:le,props:le,attrs:le,slots:le,refs:le,setupState:le,setupContext:null,suspense:a,suspenseId:a?a.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return s.ctx={_:s},s.root=t?t.root:s,s.emit=ol.bind(null,s),e.ce&&e.ce(s),s}(e,l,n);if(Ql(e)&&(o.ctx.renderer=B),function(e,t=!1){di=t;const{props:a,children:l}=e.vnode,n=ri(e);(function(e,t,a,l=!1){const n={},s={};Fe(s,zs,1),e.propsDefaults=Object.create(null),Kn(e,t,n,s);for(const t in e.propsOptions[0])t in n||(n[t]=void 0);e.props=a?l?n:ea(n):e.type.props?n:s,e.attrs=s})(e,a,n,t),((e,t)=>{if(32&e.vnode.shapeFlag){const a=t._;a?(e.slots=ra(t),Fe(t,"_",a)):ns(t,e.slots={})}else e.slots={},t&&ss(e,t);Fe(e.slots,zs,1)})(e,l),n&&function(e,t){const a=e.type;e.accessCache=Object.create(null),e.proxy=ca(new Proxy(e.ctx,Mn));const{setup:l}=a;if(l){const a=e.setupContext=l.length>1?vi(e):null;ii(e),rt();const n=Ua(l,e,0,[e.props,a]);if(ct(),oi(),xe(n)){if(n.then(oi,oi),t)return n.then((a=>{_i(e,a,t)})).catch((t=>{ja(t,e,0)}));e.asyncDep=n}else _i(e,n,t)}else mi(e,t)}(e,t),di=!1}(o),o.asyncDep){if(n&&n.registerDep(o,T),!e.el){const e=o.subTree=Hs(Cs);h(null,e,t,a)}}else T(o,e,t,a,n,s,i)},A=(e,t,a)=>{const l=t.component=e.component;if(function(e,t,a){const{props:l,children:n,component:s}=e,{props:i,children:o,patchFlag:r}=t,c=s.emitsOptions;if(t.dirs||t.transition)return!0;if(!(a&&r>=0))return!(!n&&!o||o&&o.$stable)||l!==i&&(l?!i||yl(l,i,c):!!i);if(1024&r)return!0;if(16&r)return l?yl(l,i,c):!!i;if(8&r){const e=t.dynamicProps;for(let t=0;t<e.length;t++){const a=e[t];if(i[a]!==l[a]&&!cl(c,a))return!0}}return!1}(e,t,a)){if(l.asyncDep&&!l.asyncResolved)return void O(l,t,a);l.next=t,function(e){const t=Fa.indexOf(e);t>Ra&&Fa.splice(t,1)}(l.update),l.update()}else t.el=e.el,l.vnode=t},T=(e,t,a,l,n,s,i)=>{const o=e.effect=new at((()=>{if(e.isMounted){let t,{next:a,bu:l,u:o,parent:r,vnode:c}=e,d=a;gs(e,!1),a?(a.el=c.el,O(e,a,i)):a=c,l&&Le(l),(t=a.props&&a.props.onVnodeBeforeUpdate)&&ti(t,r,a,c),gs(e,!0);const _=hl(e),p=e.subTree;e.subTree=_,m(p,_,u(p.el),z(p),e,n,s),a.el=_.el,null===d&&wl(e,_.el),o&&fs(o,n),(t=a.props&&a.props.onVnodeUpdated)&&fs((()=>ti(t,r,a,c)),n)}else{let i;const{el:o,props:r}=t,{bm:c,m:u,parent:d}=e,_=Yl(t);if(gs(e,!1),c&&Le(c),!_&&(i=r&&r.onVnodeBeforeMount)&&ti(i,d,t),gs(e,!0),o&&H){const a=()=>{e.subTree=hl(e),H(o,e.subTree,e,n,null)};_?t.type.__asyncLoader().then((()=>!e.isUnmounted&&a())):a()}else{const i=e.subTree=hl(e);m(null,i,a,l,e,n,s),t.el=i.el}if(u&&fs(u,n),!_&&(i=r&&r.onVnodeMounted)){const e=t;fs((()=>ti(i,d,e)),n)}(256&t.shapeFlag||d&&Yl(d.vnode)&&256&d.vnode.shapeFlag)&&e.a&&fs(e.a,n),e.isMounted=!0,t=a=l=null}}),(()=>Ya(r)),e.scope),r=e.update=()=>o.run();r.id=e.uid,gs(e,!0),r()},O=(e,t,a)=>{t.component=e;const l=e.vnode.props;e.vnode=t,e.next=null,function(e,t,a,l){const{props:n,attrs:s,vnode:{patchFlag:i}}=e,o=ra(n),[r]=e.propsOptions;let c=!1;if(!(l||i>0)||16&i){let l;Kn(e,t,n,s)&&(c=!0);for(const s in o)t&&(pe(t,s)||(l=Ue(s))!==s&&pe(t,l))||(r?!a||void 0===a[s]&&void 0===a[l]||(n[s]=Jn(r,o,s,void 0,e,!0)):delete n[s]);if(s!==o)for(const e in s)t&&pe(t,e)||(delete s[e],c=!0)}else if(8&i){const a=e.vnode.dynamicProps;for(let l=0;l<a.length;l++){let i=a[l];if(cl(e.emitsOptions,i))continue;const u=t[i];if(r)if(pe(s,i))u!==s[i]&&(s[i]=u,c=!0);else{const t=Oe(i);n[t]=Jn(r,o,t,u,e,!1)}else u!==s[i]&&(s[i]=u,c=!0)}}c&&_t(e,"set","$attrs")}(e,t.props,l,a),((e,t,a)=>{const{vnode:l,slots:n}=e;let s=!0,i=le;if(32&l.shapeFlag){const e=t._;e?a&&1===e?s=!1:(ue(n,t),a||1!==e||delete n._):(s=!t.$stable,ns(t,n)),i=t}else t&&(ss(e,t),i={default:1});if(s)for(const e in n)ts(e)||e in i||delete n[e]})(e,t.children,a),rt(),el(void 0,e.update),ct()},P=(e,t,a,l,n,s,i,o,r=!1)=>{const u=e&&e.children,d=e?e.shapeFlag:0,_=t.children,{patchFlag:p,shapeFlag:f}=t;if(p>0){if(128&p)return void I(u,_,a,l,n,s,i,o,r);if(256&p)return void U(u,_,a,l,n,s,i,o,r)}8&f?(16&d&&D(u,n,s),_!==u&&c(a,_)):16&d?16&f?I(u,_,a,l,n,s,i,o,r):D(u,n,s,!0):(8&d&&c(a,""),16&f&&x(_,a,l,n,s,i,o,r))},U=(e,t,a,l,n,s,i,o,r)=>{const c=(e=e||ne).length,u=(t=t||ne).length,d=Math.min(c,u);let _;for(_=0;_<d;_++){const l=t[_]=r?Xs(t[_]):Zs(t[_]);m(e[_],l,a,null,n,s,i,o,r)}c>u?D(e,n,s,!0,!1,d):x(t,a,l,n,s,i,o,r,d)},I=(e,t,a,l,n,s,i,o,r)=>{let c=0;const u=t.length;let d=e.length-1,_=u-1;for(;c<=d&&c<=_;){const l=e[c],u=t[c]=r?Xs(t[c]):Zs(t[c]);if(!Rs(l,u))break;m(l,u,a,null,n,s,i,o,r),c++}for(;c<=d&&c<=_;){const l=e[d],c=t[_]=r?Xs(t[_]):Zs(t[_]);if(!Rs(l,c))break;m(l,c,a,null,n,s,i,o,r),d--,_--}if(c>d){if(c<=_){const e=_+1,d=e<u?t[e].el:l;for(;c<=_;)m(null,t[c]=r?Xs(t[c]):Zs(t[c]),a,d,n,s,i,o,r),c++}}else if(c>_)for(;c<=d;)M(e[c],n,s,!0),c++;else{const p=c,f=c,v=new Map;for(c=f;c<=_;c++){const e=t[c]=r?Xs(t[c]):Zs(t[c]);null!=e.key&&v.set(e.key,c)}let h,g=0;const b=_-f+1;let y=!1,w=0;const x=new Array(b);for(c=0;c<b;c++)x[c]=0;for(c=p;c<=d;c++){const l=e[c];if(g>=b){M(l,n,s,!0);continue}let u;if(null!=l.key)u=v.get(l.key);else for(h=f;h<=_;h++)if(0===x[h-f]&&Rs(l,t[h])){u=h;break}void 0===u?M(l,n,s,!0):(x[u-f]=c+1,u>=w?w=u:y=!0,m(l,t[u],a,null,n,s,i,o,r),g++)}const k=y?function(e){const t=e.slice(),a=[0];let l,n,s,i,o;const r=e.length;for(l=0;l<r;l++){const r=e[l];if(0!==r){if(n=a[a.length-1],e[n]<r){t[l]=n,a.push(l);continue}for(s=0,i=a.length-1;s<i;)o=s+i>>1,e[a[o]]<r?s=o+1:i=o;r<e[a[s]]&&(s>0&&(t[l]=a[s-1]),a[s]=l)}}for(s=a.length,i=a[s-1];s-- >0;)a[s]=i,i=t[i];return a}(x):ne;for(h=k.length-1,c=b-1;c>=0;c--){const e=f+c,d=t[e],_=e+1<u?t[e+1].el:l;0===x[c]?m(null,d,a,_,n,s,i,o,r):y&&(h<0||c!==k[h]?j(d,a,_,2):h--)}}},j=(e,t,l,n,s=null)=>{const{el:i,type:o,transition:r,children:c,shapeFlag:u}=e;if(6&u)j(e.component.subTree,t,l,n);else if(128&u)e.suspense.move(t,l,n);else if(64&u)o.move(e,t,l,B);else if(o!==Ss)if(o!==Es)if(2!==n&&1&u&&r)if(0===n)r.beforeEnter(i),a(i,t,l),fs((()=>r.enter(i)),s);else{const{leave:e,delayLeave:n,afterLeave:s}=r,o=()=>a(i,t,l),c=()=>{e(i,(()=>{o(),s&&s()}))};n?n(i,o,c):c()}else a(i,t,l);else(({el:e,anchor:t},l,n)=>{let s;for(;e&&e!==t;)s=d(e),a(e,l,n),e=s;a(t,l,n)})(e,t,l);else{a(i,t,l);for(let e=0;e<c.length;e++)j(c[e],t,l,n);a(e.anchor,t,l)}},M=(e,t,a,l=!1,n=!1)=>{const{type:s,props:i,ref:o,children:r,dynamicChildren:c,shapeFlag:u,patchFlag:d,dirs:_}=e;if(null!=o&&cs(o,null,a,e,!0),256&u)return void t.ctx.deactivate(e);const p=1&u&&_,f=!Yl(e);let m;if(f&&(m=i&&i.onVnodeBeforeUnmount)&&ti(m,t,e),6&u)R(e.component,a,l);else{if(128&u)return void e.suspense.unmount(a,l);p&&xn(e,null,t,"beforeUnmount"),64&u?e.type.remove(e,t,a,n,B,l):c&&(s!==Ss||d>0&&64&d)?D(c,t,a,!1,!0):(s===Ss&&384&d||!n&&16&u)&&D(r,t,a),l&&L(e)}(f&&(m=i&&i.onVnodeUnmounted)||p)&&fs((()=>{m&&ti(m,t,e),p&&xn(e,null,t,"unmounted")}),a)},L=e=>{const{type:t,el:a,anchor:n,transition:s}=e;if(t===Ss)return void F(a,n);if(t===Es)return void(({el:e,anchor:t})=>{let a;for(;e&&e!==t;)a=d(e),l(e),e=a;l(t)})(e);const i=()=>{l(a),s&&!s.persisted&&s.afterLeave&&s.afterLeave()};if(1&e.shapeFlag&&s&&!s.persisted){const{leave:t,delayLeave:l}=s,n=()=>t(a,i);l?l(e.el,i,n):n()}else i()},F=(e,t)=>{let a;for(;e!==t;)a=d(e),l(e),e=a;l(t)},R=(e,t,a)=>{const{bum:l,scope:n,update:s,subTree:i,um:o}=e;l&&Le(l),n.stop(),s&&(s.active=!1,M(i,e,t,a)),o&&fs(o,t),fs((()=>{e.isUnmounted=!0}),t),t&&t.pendingBranch&&!t.isUnmounted&&e.asyncDep&&!e.asyncResolved&&e.suspenseId===t.pendingId&&(t.deps--,0===t.deps&&t.resolve())},D=(e,t,a,l=!1,n=!1,s=0)=>{for(let i=s;i<e.length;i++)M(e[i],t,a,l,n)},z=e=>6&e.shapeFlag?z(e.component.subTree):128&e.shapeFlag?e.suspense.next():d(e.anchor||e.el),q=(e,t,a)=>{null==e?t._vnode&&M(t._vnode,null,null,!0):m(t._vnode||null,e,t,null,null,null,a),tl(),t._vnode=e},B={p:m,um:M,m:j,r:L,mt:E,mc:x,pc:P,pbc:$,n:z,o:e};let V,H;return t&&([V,H]=t(B)),{render:q,hydrate:V,createApp:rs(q,V)}}function gs({effect:e,update:t},a){e.allowRecurse=t.allowRecurse=a}function bs(e,t,a=!1){const l=e.children,n=t.children;if(fe(l)&&fe(n))for(let e=0;e<l.length;e++){const t=l[e];let s=n[e];1&s.shapeFlag&&!s.dynamicChildren&&((s.patchFlag<=0||32===s.patchFlag)&&(s=n[e]=Xs(n[e]),s.el=t.el),a||bs(t,s))}}const ys=e=>e&&(e.disabled||""===e.disabled),ws=e=>"undefined"!=typeof SVGElement&&e instanceof SVGElement,xs=(e,t)=>{const a=e&&e.to;return be(a)?t?t(a):null:a};function ks(e,t,a,{o:{insert:l},m:n},s=2){0===s&&l(e.targetAnchor,t,a);const{el:i,anchor:o,shapeFlag:r,children:c,props:u}=e,d=2===s;if(d&&l(i,t,a),(!d||ys(u))&&16&r)for(let e=0;e<c.length;e++)n(c[e],t,a,2);d&&l(o,t,a)}const $s={__isTeleport:!0,process(e,t,a,l,n,s,i,o,r,c){const{mc:u,pc:d,pbc:_,o:{insert:p,querySelector:f,createText:m}}=c,v=ys(t.props);let{shapeFlag:h,children:g,dynamicChildren:b}=t;if(null==e){const e=t.el=m(""),c=t.anchor=m("");p(e,a,l),p(c,a,l);const d=t.target=xs(t.props,f),_=t.targetAnchor=m("");d&&(p(_,d),i=i||ws(d));const b=(e,t)=>{16&h&&u(g,e,t,n,s,i,o,r)};v?b(a,c):d&&b(d,_)}else{t.el=e.el;const l=t.anchor=e.anchor,u=t.target=e.target,p=t.targetAnchor=e.targetAnchor,m=ys(e.props),h=m?a:u,g=m?l:p;if(i=i||ws(u),b?(_(e.dynamicChildren,b,h,n,s,i,o),bs(e,t,!0)):r||d(e,t,h,g,n,s,i,o,!1),v)m||ks(t,a,l,c,1);else if((t.props&&t.props.to)!==(e.props&&e.props.to)){const e=t.target=xs(t.props,f);e&&ks(t,e,null,c,0)}else m&&ks(t,u,p,c,1)}},remove(e,t,a,l,{um:n,o:{remove:s}},i){const{shapeFlag:o,children:r,anchor:c,targetAnchor:u,target:d,props:_}=e;if(d&&s(u),(i||!ys(_))&&(s(c),16&o))for(let e=0;e<r.length;e++){const l=r[e];n(l,t,a,!0,!!l.dynamicChildren)}},move:ks,hydrate:function(e,t,a,l,n,s,{o:{nextSibling:i,parentNode:o,querySelector:r}},c){const u=t.target=xs(t.props,r);if(u){const r=u._lpa||u.firstChild;if(16&t.shapeFlag)if(ys(t.props))t.anchor=c(i(e),t,o(e),a,l,n,s),t.targetAnchor=r;else{t.anchor=i(e);let o=r;for(;o;)if(o=i(o),o&&8===o.nodeType&&"teleport anchor"===o.data){t.targetAnchor=o,u._lpa=t.targetAnchor&&i(t.targetAnchor);break}c(r,t,u,a,l,n,s)}}return t.anchor&&i(t.anchor)}},Ss=Symbol(void 0),Ns=Symbol(void 0),Cs=Symbol(void 0),Es=Symbol(void 0),As=[];let Ts=null;function Os(e=!1){As.push(Ts=e?null:[])}function Ps(){As.pop(),Ts=As[As.length-1]||null}let Us=1;function Is(e){Us+=e}function js(e){return e.dynamicChildren=Us>0?Ts||ne:null,Ps(),Us>0&&Ts&&Ts.push(e),e}function Ms(e,t,a,l,n,s){return js(Vs(e,t,a,l,n,s,!0))}function Ls(e,t,a,l,n){return js(Hs(e,t,a,l,n,!0))}function Fs(e){return!!e&&!0===e.__v_isVNode}function Rs(e,t){return e.type===t.type&&e.key===t.key}function Ds(e){}const zs="__vInternal",qs=({key:e})=>null!=e?e:null,Bs=({ref:e,ref_key:t,ref_for:a})=>null!=e?be(e)||fa(e)||ge(e)?{i:ul,r:e,k:t,f:!!a}:e:null;function Vs(e,t=null,a=null,l=0,n=null,s=(e===Ss?0:1),i=!1,o=!1){const r={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&qs(t),ref:t&&Bs(t),scopeId:dl,slotScopeIds:null,children:a,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:s,patchFlag:l,dynamicProps:n,dynamicChildren:null,appContext:null};return o?(Qs(r,a),128&s&&e.normalize(r)):a&&(r.shapeFlag|=be(a)?8:16),Us>0&&!i&&Ts&&(r.patchFlag>0||6&s)&&32!==r.patchFlag&&Ts.push(r),r}const Hs=function(e,t=null,a=null,l=0,n=null,s=!1){if(e&&e!==$n||(e=Cs),Fs(e)){const l=Ws(e,t,!0);return a&&Qs(l,a),Us>0&&!s&&Ts&&(6&l.shapeFlag?Ts[Ts.indexOf(e)]=l:Ts.push(l)),l.patchFlag|=-2,l}var i;if(ge(i=e)&&"__vccOpts"in i&&(e=e.__vccOpts),t){t=Gs(t);let{class:e,style:a}=t;e&&!be(e)&&(t.class=K(e)),we(a)&&(oa(a)&&!fe(a)&&(a=ue({},a)),t.style=V(a))}return Vs(e,t,a,l,n,be(e)?1:xl(e)?128:(e=>e.__isTeleport)(e)?64:we(e)?4:ge(e)?2:0,s,!0)};function Gs(e){return e?oa(e)||zs in e?ue({},e):e:null}function Ws(e,t,a=!1){const{props:l,ref:n,patchFlag:s,children:i}=e,o=t?ei(l||{},t):l;return{__v_isVNode:!0,__v_skip:!0,type:e.type,props:o,key:o&&qs(o),ref:t&&t.ref?a&&n?fe(n)?n.concat(Bs(t)):[n,Bs(t)]:Bs(t):n,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:i,target:e.target,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==Ss?-1===s?16:16|s:s,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:e.transition,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&Ws(e.ssContent),ssFallback:e.ssFallback&&Ws(e.ssFallback),el:e.el,anchor:e.anchor}}function Ks(e=" ",t=0){return Hs(Ns,null,e,t)}function Js(e,t){const a=Hs(Es,null,e);return a.staticCount=t,a}function Ys(e="",t=!1){return t?(Os(),Ls(Cs,null,e)):Hs(Cs,null,e)}function Zs(e){return null==e||"boolean"==typeof e?Hs(Cs):fe(e)?Hs(Ss,null,e.slice()):"object"==typeof e?Xs(e):Hs(Ns,null,String(e))}function Xs(e){return null===e.el||e.memo?e:Ws(e)}function Qs(e,t){let a=0;const{shapeFlag:l}=e;if(null==t)t=null;else if(fe(t))a=16;else if("object"==typeof t){if(65&l){const a=t.default;return void(a&&(a._c&&(a._d=!1),Qs(e,a()),a._c&&(a._d=!0)))}{a=32;const l=t._;l||zs in t?3===l&&ul&&(1===ul.slots._?t._=1:(t._=2,e.patchFlag|=1024)):t._ctx=ul}}else ge(t)?(t={default:t,_ctx:ul},a=32):(t=String(t),64&l?(a=16,t=[Ks(t)]):a=8);e.children=t,e.shapeFlag|=a}function ei(...e){const t={};for(let a=0;a<e.length;a++){const l=e[a];for(const e in l)if("class"===e)t.class!==l.class&&(t.class=K([t.class,l.class]));else if("style"===e)t.style=V([t.style,l.style]);else if(re(e)){const a=t[e],n=l[e];!n||a===n||fe(a)&&a.includes(n)||(t[e]=a?[].concat(a,n):n)}else""!==e&&(t[e]=l[e])}return t}function ti(e,t,a,l=null){Ia(e,t,7,[a,l])}const ai=is();let li=0,ni=null;const si=()=>ni||ul,ii=e=>{ni=e,e.scope.on()},oi=()=>{ni&&ni.scope.off(),ni=null};function ri(e){return 4&e.vnode.shapeFlag}let ci,ui,di=!1;function _i(e,t,a){ge(t)?e.render=t:we(t)&&(e.setupState=xa(t)),mi(e,a)}function pi(e){ci=e,ui=e=>{e.render._rc&&(e.withProxy=new Proxy(e.ctx,Ln))}}const fi=()=>!ci;function mi(e,t,a){const l=e.type;if(!e.render){if(!t&&ci&&!l.render){const t=l.template;if(t){const{isCustomElement:a,compilerOptions:n}=e.appContext.config,{delimiters:s,compilerOptions:i}=l,o=ue(ue({isCustomElement:a,delimiters:s},n),i);l.render=ci(t,o)}}e.render=l.render||se,ui&&ui(e)}ii(e),rt(),function(e){const t=zn(e),a=e.proxy,l=e.ctx;Fn=!1,t.beforeCreate&&Rn(t.beforeCreate,e,"bc");const{data:n,computed:s,methods:i,watch:o,provide:r,inject:c,created:u,beforeMount:d,mounted:_,beforeUpdate:p,updated:f,activated:m,deactivated:v,beforeUnmount:h,unmounted:g,render:b,renderTracked:y,renderTriggered:w,errorCaptured:x,serverPrefetch:k,expose:$,inheritAttrs:S,components:N,directives:C}=t;if(c&&function(e,t,a=se,l=!1){fe(e)&&(e=Hn(e));for(const a in e){const n=e[a];let s;s=we(n)?"default"in n?Tl(n.from||a,n.default,!0):Tl(n.from||a):Tl(n),fa(s)&&l?Object.defineProperty(t,a,{enumerable:!0,configurable:!0,get:()=>s.value,set:e=>s.value=e}):t[a]=s}}(c,l,null,e.appContext.config.unwrapInjectedRef),i)for(const e in i){const t=i[e];ge(t)&&(l[e]=t.bind(a))}if(n){const t=n.call(a,a);we(t)&&(e.data=Qt(t))}if(Fn=!0,s)for(const e in s){const t=s[e],n=ge(t)?t.bind(a,a):ge(t.get)?t.get.bind(a,a):se,i=!ge(t)&&ge(t.set)?t.set.bind(a):se,o=wi({get:n,set:i});Object.defineProperty(l,e,{enumerable:!0,configurable:!0,get:()=>o.value,set:e=>o.value=e})}if(o)for(const e in o)Dn(o[e],l,a,e);if(r){const e=ge(r)?r.call(a):r;Reflect.ownKeys(e).forEach((t=>{Al(t,e[t])}))}function E(e,t){fe(t)?t.forEach((t=>e(t.bind(a)))):t&&e(t.bind(a))}if(u&&Rn(u,e,"c"),E(dn,d),E(_n,_),E(pn,p),E(fn,f),E(an,m),E(ln,v),E(yn,x),E(bn,y),E(gn,w),E(mn,h),E(vn,g),E(hn,k),fe($))if($.length){const t=e.exposed||(e.exposed={});$.forEach((e=>{Object.defineProperty(t,e,{get:()=>a[e],set:t=>a[e]=t})}))}else e.exposed||(e.exposed={});b&&e.render===se&&(e.render=b),null!=S&&(e.inheritAttrs=S),N&&(e.components=N),C&&(e.directives=C)}(e),ct(),oi()}function vi(e){let t;return{get attrs(){return t||(t=function(e){return new Proxy(e.attrs,{get:(t,a)=>(ut(e,0,"$attrs"),t[a])})}(e))},slots:e.slots,emit:e.emit,expose:t=>{e.exposed=t||{}}}}function hi(e){if(e.exposed)return e.exposeProxy||(e.exposeProxy=new Proxy(xa(ca(e.exposed)),{get:(t,a)=>a in t?t[a]:a in jn?jn[a](e):void 0}))}const gi=/(?:^|[-_])(\w)/g;function bi(e,t=!0){return ge(e)?e.displayName||e.name:e.name||t&&e.__name}function yi(e,t,a=!1){let l=bi(t);if(!l&&t.__file){const e=t.__file.match(/([^/\\]+)\.\w+$/);e&&(l=e[1])}if(!l&&e&&e.parent){const a=e=>{for(const a in e)if(e[a]===t)return a};l=a(e.components||e.parent.type.components)||a(e.appContext.components)}return l?l.replace(gi,(e=>e.toUpperCase())).replace(/[-_]/g,""):a?"App":"Anonymous"}const wi=(e,t)=>function(e,t,a=!1){let l,n;const s=ge(e);return s?(l=e,n=se):(l=e.get,n=e.set),new Ea(l,n,s||!n,a)}(e,0,di);function xi(){return null}function ki(){return null}function $i(e){}function Si(e,t){return null}function Ni(){return Ei().slots}function Ci(){return Ei().attrs}function Ei(){const e=si();return e.setupContext||(e.setupContext=vi(e))}function Ai(e,t){const a=fe(e)?e.reduce(((e,t)=>(e[t]={},e)),{}):e;for(const e in t){const l=a[e];l?fe(l)||ge(l)?a[e]={type:l,default:t[e]}:l.default=t[e]:null===l&&(a[e]={default:t[e]})}return a}function Ti(e,t){const a={};for(const l in e)t.includes(l)||Object.defineProperty(a,l,{enumerable:!0,get:()=>e[l]});return a}function Oi(e){const t=si();let a=e();return oi(),xe(a)&&(a=a.catch((e=>{throw ii(t),e}))),[a,()=>ii(t)]}function Pi(e,t,a){const l=arguments.length;return 2===l?we(t)&&!fe(t)?Fs(t)?Hs(e,null,[t]):Hs(e,t):Hs(e,null,t):(l>3?a=Array.prototype.slice.call(arguments,2):3===l&&Fs(a)&&(a=[a]),Hs(e,t,a))}const Ui=Symbol(""),Ii=()=>{{const e=Tl(Ui);return e||Ta("Server rendering context not provided. Make sure to only call useSSRContext() conditionally in the server build."),e}};function ji(){}function Mi(e,t,a,l){const n=a[l];if(n&&Li(n,e))return n;const s=t();return s.memo=e.slice(),a[l]=s}function Li(e,t){const a=e.memo;if(a.length!=t.length)return!1;for(let e=0;e<a.length;e++)if(Me(a[e],t[e]))return!1;return Us>0&&Ts&&Ts.push(e),!0}const Fi="3.2.37",Ri="undefined"!=typeof document?document:null,Di=Ri&&Ri.createElement("template"),zi={insert:(e,t,a)=>{t.insertBefore(e,a||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,a,l)=>{const n=t?Ri.createElementNS("http://www.w3.org/2000/svg",e):Ri.createElement(e,a?{is:a}:void 0);return"select"===e&&l&&null!=l.multiple&&n.setAttribute("multiple",l.multiple),n},createText:e=>Ri.createTextNode(e),createComment:e=>Ri.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>Ri.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},cloneNode(e){const t=e.cloneNode(!0);return"_value"in e&&(t._value=e._value),t},insertStaticContent(e,t,a,l,n,s){const i=a?a.previousSibling:t.lastChild;if(n&&(n===s||n.nextSibling))for(;t.insertBefore(n.cloneNode(!0),a),n!==s&&(n=n.nextSibling););else{Di.innerHTML=l?`<svg>${e}</svg>`:e;const n=Di.content;if(l){const e=n.firstChild;for(;e.firstChild;)n.appendChild(e.firstChild);n.removeChild(e)}t.insertBefore(n,a)}return[i?i.nextSibling:t.firstChild,a?a.previousSibling:t.lastChild]}},qi=/\s*!important$/;function Bi(e,t,a){if(fe(a))a.forEach((a=>Bi(e,t,a)));else if(null==a&&(a=""),t.startsWith("--"))e.setProperty(t,a);else{const l=function(e,t){const a=Hi[t];if(a)return a;let l=Oe(t);if("filter"!==l&&l in e)return Hi[t]=l;l=Ie(l);for(let a=0;a<Vi.length;a++){const n=Vi[a]+l;if(n in e)return Hi[t]=n}return t}(e,t);qi.test(a)?e.setProperty(Ue(l),a.replace(qi,""),"important"):e[l]=a}}const Vi=["Webkit","Moz","ms"],Hi={},Gi="http://www.w3.org/1999/xlink",[Wi,Ki]=(()=>{let e=Date.now,t=!1;if("undefined"!=typeof window){Date.now()>document.createEvent("Event").timeStamp&&(e=performance.now.bind(performance));const a=navigator.userAgent.match(/firefox\/(\d+)/i);t=!!(a&&Number(a[1])<=53)}return[e,t]})();let Ji=0;const Yi=Promise.resolve(),Zi=()=>{Ji=0};function Xi(e,t,a,l){e.addEventListener(t,a,l)}const Qi=/(?:Once|Passive|Capture)$/,eo=/^on[a-z]/;function to(e,t){const a=Jl(e);class l extends no{constructor(e){super(a,e,t)}}return l.def=a,l}const ao=e=>to(e,nr),lo="undefined"!=typeof HTMLElement?HTMLElement:class{};class no extends lo{constructor(e,t={},a){super(),this._def=e,this._props=t,this._instance=null,this._connected=!1,this._resolved=!1,this._numberProps=null,this.shadowRoot&&a?a(this._createVNode(),this.shadowRoot):this.attachShadow({mode:"open"})}connectedCallback(){this._connected=!0,this._instance||this._resolveDef()}disconnectedCallback(){this._connected=!1,Ja((()=>{this._connected||(lr(null,this.shadowRoot),this._instance=null)}))}_resolveDef(){if(this._resolved)return;this._resolved=!0;for(let e=0;e<this.attributes.length;e++)this._setAttr(this.attributes[e].name);new MutationObserver((e=>{for(const t of e)this._setAttr(t.attributeName)})).observe(this,{attributes:!0});const e=e=>{const{props:t,styles:a}=e,l=!fe(t),n=t?l?Object.keys(t):t:[];let s;if(l)for(const e in this._props){const a=t[e];(a===Number||a&&a.type===Number)&&(this._props[e]=Re(this._props[e]),(s||(s=Object.create(null)))[e]=!0)}this._numberProps=s;for(const e of Object.keys(this))"_"!==e[0]&&this._setProp(e,this[e],!0,!1);for(const e of n.map(Oe))Object.defineProperty(this,e,{get(){return this._getProp(e)},set(t){this._setProp(e,t)}});this._applyStyles(a),this._update()},t=this._def.__asyncLoader;t?t().then(e):e(this._def)}_setAttr(e){let t=this.getAttribute(e);this._numberProps&&this._numberProps[e]&&(t=Re(t)),this._setProp(Oe(e),t,!1)}_getProp(e){return this._props[e]}_setProp(e,t,a=!0,l=!0){t!==this._props[e]&&(this._props[e]=t,l&&this._instance&&this._update(),a&&(!0===t?this.setAttribute(Ue(e),""):"string"==typeof t||"number"==typeof t?this.setAttribute(Ue(e),t+""):t||this.removeAttribute(Ue(e))))}_update(){lr(this._createVNode(),this.shadowRoot)}_createVNode(){const e=Hs(this._def,ue({},this._props));return this._instance||(e.ce=e=>{this._instance=e,e.isCE=!0,e.emit=(e,...t)=>{this.dispatchEvent(new CustomEvent(e,{detail:t}))};let t=this;for(;t=t&&(t.parentNode||t.host);)if(t instanceof no){e.parent=t._instance;break}}),e}_applyStyles(e){e&&e.forEach((e=>{const t=document.createElement("style");t.textContent=e,this.shadowRoot.appendChild(t)}))}}function so(e="$style"){{const t=si();if(!t)return le;const a=t.type.__cssModules;if(!a)return le;return a[e]||le}}function io(e){const t=si();if(!t)return;const a=()=>oo(t.subTree,e(t.proxy));Pl(a),_n((()=>{const e=new MutationObserver(a);e.observe(t.subTree.el.parentNode,{childList:!0}),vn((()=>e.disconnect()))}))}function oo(e,t){if(128&e.shapeFlag){const a=e.suspense;e=a.activeBranch,a.pendingBranch&&!a.isHydrating&&a.effects.push((()=>{oo(a.activeBranch,t)}))}for(;e.component;)e=e.component.subTree;if(1&e.shapeFlag&&e.el)ro(e.el,t);else if(e.type===Ss)e.children.forEach((e=>oo(e,t)));else if(e.type===Es){let{el:a,anchor:l}=e;for(;a&&(ro(a,t),a!==l);)a=a.nextSibling}}function ro(e,t){if(1===e.nodeType){const a=e.style;for(const e in t)a.setProperty(`--${e}`,t[e])}}const co=(e,{slots:t})=>Pi(ql,mo(e),t);co.displayName="Transition";const uo={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},_o=co.props=ue({},ql.props,uo),po=(e,t=[])=>{fe(e)?e.forEach((e=>e(...t))):e&&e(...t)},fo=e=>!!e&&(fe(e)?e.some((e=>e.length>1)):e.length>1);function mo(e){const t={};for(const a in e)a in uo||(t[a]=e[a]);if(!1===e.css)return t;const{name:a="v",type:l,duration:n,enterFromClass:s=`${a}-enter-from`,enterActiveClass:i=`${a}-enter-active`,enterToClass:o=`${a}-enter-to`,appearFromClass:r=s,appearActiveClass:c=i,appearToClass:u=o,leaveFromClass:d=`${a}-leave-from`,leaveActiveClass:_=`${a}-leave-active`,leaveToClass:p=`${a}-leave-to`}=e,f=function(e){if(null==e)return null;if(we(e))return[vo(e.enter),vo(e.leave)];{const t=vo(e);return[t,t]}}(n),m=f&&f[0],v=f&&f[1],{onBeforeEnter:h,onEnter:g,onEnterCancelled:b,onLeave:y,onLeaveCancelled:w,onBeforeAppear:x=h,onAppear:k=g,onAppearCancelled:$=b}=t,S=(e,t,a)=>{go(e,t?u:o),go(e,t?c:i),a&&a()},N=(e,t)=>{e._isLeaving=!1,go(e,d),go(e,p),go(e,_),t&&t()},C=e=>(t,a)=>{const n=e?k:g,i=()=>S(t,e,a);po(n,[t,i]),bo((()=>{go(t,e?r:s),ho(t,e?u:o),fo(n)||wo(t,l,m,i)}))};return ue(t,{onBeforeEnter(e){po(h,[e]),ho(e,s),ho(e,i)},onBeforeAppear(e){po(x,[e]),ho(e,r),ho(e,c)},onEnter:C(!1),onAppear:C(!0),onLeave(e,t){e._isLeaving=!0;const a=()=>N(e,t);ho(e,d),So(),ho(e,_),bo((()=>{e._isLeaving&&(go(e,d),ho(e,p),fo(y)||wo(e,l,v,a))})),po(y,[e,a])},onEnterCancelled(e){S(e,!1),po(b,[e])},onAppearCancelled(e){S(e,!0),po($,[e])},onLeaveCancelled(e){N(e),po(w,[e])}})}function vo(e){return Re(e)}function ho(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.add(t))),(e._vtc||(e._vtc=new Set)).add(t)}function go(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.remove(t)));const{_vtc:a}=e;a&&(a.delete(t),a.size||(e._vtc=void 0))}function bo(e){requestAnimationFrame((()=>{requestAnimationFrame(e)}))}let yo=0;function wo(e,t,a,l){const n=e._endId=++yo,s=()=>{n===e._endId&&l()};if(a)return setTimeout(s,a);const{type:i,timeout:o,propCount:r}=xo(e,t);if(!i)return l();const c=i+"end";let u=0;const d=()=>{e.removeEventListener(c,_),s()},_=t=>{t.target===e&&++u>=r&&d()};setTimeout((()=>{u<r&&d()}),o+1),e.addEventListener(c,_)}function xo(e,t){const a=window.getComputedStyle(e),l=e=>(a[e]||"").split(", "),n=l("transitionDelay"),s=l("transitionDuration"),i=ko(n,s),o=l("animationDelay"),r=l("animationDuration"),c=ko(o,r);let u=null,d=0,_=0;return"transition"===t?i>0&&(u="transition",d=i,_=s.length):"animation"===t?c>0&&(u="animation",d=c,_=r.length):(d=Math.max(i,c),u=d>0?i>c?"transition":"animation":null,_=u?"transition"===u?s.length:r.length:0),{type:u,timeout:d,propCount:_,hasTransform:"transition"===u&&/\b(transform|all)(,|$)/.test(a.transitionProperty)}}function ko(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max(...t.map(((t,a)=>$o(t)+$o(e[a]))))}function $o(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function So(){return document.body.offsetHeight}const No=new WeakMap,Co=new WeakMap,Eo={name:"TransitionGroup",props:ue({},_o,{tag:String,moveClass:String}),setup(e,{slots:t}){const a=si(),l=Dl();let n,s;return fn((()=>{if(!n.length)return;const t=e.moveClass||`${e.name||"v"}-move`;if(!function(e,t,a){const l=e.cloneNode();e._vtc&&e._vtc.forEach((e=>{e.split(/\s+/).forEach((e=>e&&l.classList.remove(e)))})),a.split(/\s+/).forEach((e=>e&&l.classList.add(e))),l.style.display="none";const n=1===t.nodeType?t:t.parentNode;n.appendChild(l);const{hasTransform:s}=xo(l);return n.removeChild(l),s}(n[0].el,a.vnode.el,t))return;n.forEach(Ao),n.forEach(To);const l=n.filter(Oo);So(),l.forEach((e=>{const a=e.el,l=a.style;ho(a,t),l.transform=l.webkitTransform=l.transitionDuration="";const n=a._moveCb=e=>{e&&e.target!==a||e&&!/transform$/.test(e.propertyName)||(a.removeEventListener("transitionend",n),a._moveCb=null,go(a,t))};a.addEventListener("transitionend",n)}))})),()=>{const i=ra(e),o=mo(i);let r=i.tag||Ss;n=s,s=t.default?Kl(t.default()):[];for(let e=0;e<s.length;e++){const t=s[e];null!=t.key&&Wl(t,Vl(t,o,l,a))}if(n)for(let e=0;e<n.length;e++){const t=n[e];Wl(t,Vl(t,o,l,a)),No.set(t,t.el.getBoundingClientRect())}return Hs(r,null,s)}}};function Ao(e){const t=e.el;t._moveCb&&t._moveCb(),t._enterCb&&t._enterCb()}function To(e){Co.set(e,e.el.getBoundingClientRect())}function Oo(e){const t=No.get(e),a=Co.get(e),l=t.left-a.left,n=t.top-a.top;if(l||n){const t=e.el.style;return t.transform=t.webkitTransform=`translate(${l}px,${n}px)`,t.transitionDuration="0s",e}}const Po=e=>{const t=e.props["onUpdate:modelValue"]||!1;return fe(t)?e=>Le(t,e):t};function Uo(e){e.target.composing=!0}function Io(e){const t=e.target;t.composing&&(t.composing=!1,t.dispatchEvent(new Event("input")))}const jo={created(e,{modifiers:{lazy:t,trim:a,number:l}},n){e._assign=Po(n);const s=l||n.props&&"number"===n.props.type;Xi(e,t?"change":"input",(t=>{if(t.target.composing)return;let l=e.value;a&&(l=l.trim()),s&&(l=Re(l)),e._assign(l)})),a&&Xi(e,"change",(()=>{e.value=e.value.trim()})),t||(Xi(e,"compositionstart",Uo),Xi(e,"compositionend",Io),Xi(e,"change",Io))},mounted(e,{value:t}){e.value=null==t?"":t},beforeUpdate(e,{value:t,modifiers:{lazy:a,trim:l,number:n}},s){if(e._assign=Po(s),e.composing)return;if(document.activeElement===e&&"range"!==e.type){if(a)return;if(l&&e.value.trim()===t)return;if((n||"number"===e.type)&&Re(e.value)===t)return}const i=null==t?"":t;e.value!==i&&(e.value=i)}},Mo={deep:!0,created(e,t,a){e._assign=Po(a),Xi(e,"change",(()=>{const t=e._modelValue,a=zo(e),l=e.checked,n=e._assign;if(fe(t)){const e=ee(t,a),s=-1!==e;if(l&&!s)n(t.concat(a));else if(!l&&s){const a=[...t];a.splice(e,1),n(a)}}else if(ve(t)){const e=new Set(t);l?e.add(a):e.delete(a),n(e)}else n(qo(e,l))}))},mounted:Lo,beforeUpdate(e,t,a){e._assign=Po(a),Lo(e,t,a)}};function Lo(e,{value:t,oldValue:a},l){e._modelValue=t,fe(t)?e.checked=ee(t,l.props.value)>-1:ve(t)?e.checked=t.has(l.props.value):t!==a&&(e.checked=Q(t,qo(e,!0)))}const Fo={created(e,{value:t},a){e.checked=Q(t,a.props.value),e._assign=Po(a),Xi(e,"change",(()=>{e._assign(zo(e))}))},beforeUpdate(e,{value:t,oldValue:a},l){e._assign=Po(l),t!==a&&(e.checked=Q(t,l.props.value))}},Ro={deep:!0,created(e,{value:t,modifiers:{number:a}},l){const n=ve(t);Xi(e,"change",(()=>{const t=Array.prototype.filter.call(e.options,(e=>e.selected)).map((e=>a?Re(zo(e)):zo(e)));e._assign(e.multiple?n?new Set(t):t:t[0])})),e._assign=Po(l)},mounted(e,{value:t}){Do(e,t)},beforeUpdate(e,t,a){e._assign=Po(a)},updated(e,{value:t}){Do(e,t)}};function Do(e,t){const a=e.multiple;if(!a||fe(t)||ve(t)){for(let l=0,n=e.options.length;l<n;l++){const n=e.options[l],s=zo(n);if(a)n.selected=fe(t)?ee(t,s)>-1:t.has(s);else if(Q(zo(n),t))return void(e.selectedIndex!==l&&(e.selectedIndex=l))}a||-1===e.selectedIndex||(e.selectedIndex=-1)}}function zo(e){return"_value"in e?e._value:e.value}function qo(e,t){const a=t?"_trueValue":"_falseValue";return a in e?e[a]:t}const Bo={created(e,t,a){Vo(e,t,a,null,"created")},mounted(e,t,a){Vo(e,t,a,null,"mounted")},beforeUpdate(e,t,a,l){Vo(e,t,a,l,"beforeUpdate")},updated(e,t,a,l){Vo(e,t,a,l,"updated")}};function Vo(e,t,a,l,n){const s=function(e,t){switch(e){case"SELECT":return Ro;case"TEXTAREA":return jo;default:switch(t){case"checkbox":return Mo;case"radio":return Fo;default:return jo}}}(e.tagName,a.props&&a.props.type)[n];s&&s(e,t,a,l)}const Ho=["ctrl","shift","alt","meta"],Go={stop:e=>e.stopPropagation(),prevent:e=>e.preventDefault(),self:e=>e.target!==e.currentTarget,ctrl:e=>!e.ctrlKey,shift:e=>!e.shiftKey,alt:e=>!e.altKey,meta:e=>!e.metaKey,left:e=>"button"in e&&0!==e.button,middle:e=>"button"in e&&1!==e.button,right:e=>"button"in e&&2!==e.button,exact:(e,t)=>Ho.some((a=>e[`${a}Key`]&&!t.includes(a)))},Wo=(e,t)=>(a,...l)=>{for(let e=0;e<t.length;e++){const l=Go[t[e]];if(l&&l(a,t))return}return e(a,...l)},Ko={esc:"escape",space:" ",up:"arrow-up",left:"arrow-left",right:"arrow-right",down:"arrow-down",delete:"backspace"},Jo=(e,t)=>a=>{if(!("key"in a))return;const l=Ue(a.key);return t.some((e=>e===l||Ko[e]===l))?e(a):void 0},Yo={beforeMount(e,{value:t},{transition:a}){e._vod="none"===e.style.display?"":e.style.display,a&&t?a.beforeEnter(e):Zo(e,t)},mounted(e,{value:t},{transition:a}){a&&t&&a.enter(e)},updated(e,{value:t,oldValue:a},{transition:l}){!t!=!a&&(l?t?(l.beforeEnter(e),Zo(e,!0),l.enter(e)):l.leave(e,(()=>{Zo(e,!1)})):Zo(e,t))},beforeUnmount(e,{value:t}){Zo(e,t)}};function Zo(e,t){e.style.display=t?e._vod:"none"}const Xo=ue({patchProp:(e,t,a,l,n=!1,s,i,o,r)=>{"class"===t?function(e,t,a){const l=e._vtc;l&&(t=(t?[t,...l]:[...l]).join(" ")),null==t?e.removeAttribute("class"):a?e.setAttribute("class",t):e.className=t}(e,l,n):"style"===t?function(e,t,a){const l=e.style,n=be(a);if(a&&!n){for(const e in a)Bi(l,e,a[e]);if(t&&!be(t))for(const e in t)null==a[e]&&Bi(l,e,"")}else{const s=l.display;n?t!==a&&(l.cssText=a):t&&e.removeAttribute("style"),"_vod"in e&&(l.display=s)}}(e,a,l):re(t)?ce(t)||function(e,t,a,l,n=null){const s=e._vei||(e._vei={}),i=s[t];if(l&&i)i.value=l;else{const[a,o]=function(e){let t;if(Qi.test(e)){let a;for(t={};a=e.match(Qi);)e=e.slice(0,e.length-a[0].length),t[a[0].toLowerCase()]=!0}return[Ue(e.slice(2)),t]}(t);if(l){const i=s[t]=function(e,t){const a=e=>{const l=e.timeStamp||Wi();(Ki||l>=a.attached-1)&&Ia(function(e,t){if(fe(t)){const a=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{a.call(e),e._stopped=!0},t.map((e=>t=>!t._stopped&&e&&e(t)))}return t}(e,a.value),t,5,[e])};return a.value=e,a.attached=Ji||(Yi.then(Zi),Ji=Wi()),a}(l,n);Xi(e,a,i,o)}else i&&(function(e,t,a,l){e.removeEventListener(t,a,l)}(e,a,i,o),s[t]=void 0)}}(e,t,0,l,i):("."===t[0]?(t=t.slice(1),1):"^"===t[0]?(t=t.slice(1),0):function(e,t,a,l){return l?"innerHTML"===t||"textContent"===t||!!(t in e&&eo.test(t)&&ge(a)):"spellcheck"!==t&&"draggable"!==t&&"translate"!==t&&("form"!==t&&(("list"!==t||"INPUT"!==e.tagName)&&(("type"!==t||"TEXTAREA"!==e.tagName)&&((!eo.test(t)||!be(a))&&t in e))))}(e,t,l,n))?function(e,t,a,l,n,s,i){if("innerHTML"===t||"textContent"===t)return l&&i(l,n,s),void(e[t]=null==a?"":a);if("value"===t&&"PROGRESS"!==e.tagName&&!e.tagName.includes("-")){e._value=a;const l=null==a?"":a;return e.value===l&&"OPTION"!==e.tagName||(e.value=l),void(null==a&&e.removeAttribute(t))}let o=!1;if(""===a||null==a){const l=typeof e[t];"boolean"===l?a=B(a):null==a&&"string"===l?(a="",o=!0):"number"===l&&(a=0,o=!0)}try{e[t]=a}catch(e){}o&&e.removeAttribute(t)}(e,t,l,s,i,o,r):("true-value"===t?e._trueValue=l:"false-value"===t&&(e._falseValue=l),function(e,t,a,l,n){if(l&&t.startsWith("xlink:"))null==a?e.removeAttributeNS(Gi,t.slice(6,t.length)):e.setAttributeNS(Gi,t,a);else{const l=q(t);null==a||l&&!B(a)?e.removeAttribute(t):e.setAttribute(t,l?"":a)}}(e,t,l,n))}},zi);let Qo,er=!1;function tr(){return Qo||(Qo=ms(Xo))}function ar(){return Qo=er?Qo:vs(Xo),er=!0,Qo}const lr=(...e)=>{tr().render(...e)},nr=(...e)=>{ar().hydrate(...e)},sr=(...e)=>{const t=tr().createApp(...e),{mount:a}=t;return t.mount=e=>{const l=or(e);if(!l)return;const n=t._component;ge(n)||n.render||n.template||(n.template=l.innerHTML),l.innerHTML="";const s=a(l,!1,l instanceof SVGElement);return l instanceof Element&&(l.removeAttribute("v-cloak"),l.setAttribute("data-v-app","")),s},t},ir=(...e)=>{const t=ar().createApp(...e),{mount:a}=t;return t.mount=e=>{const t=or(e);if(t)return a(t,!0,t instanceof SVGElement)},t};function or(e){return be(e)?document.querySelector(e):e}const rr=se;var cr=Object.freeze({__proto__:null,render:lr,hydrate:nr,createApp:sr,createSSRApp:ir,initDirectivesForSSR:rr,defineCustomElement:to,defineSSRCustomElement:ao,VueElement:no,useCssModule:so,useCssVars:io,Transition:co,TransitionGroup:Eo,vModelText:jo,vModelCheckbox:Mo,vModelRadio:Fo,vModelSelect:Ro,vModelDynamic:Bo,withModifiers:Wo,withKeys:Jo,vShow:Yo,reactive:Qt,ref:ma,readonly:ta,unref:ya,proxyRefs:xa,isRef:fa,toRef:Ca,toRefs:Sa,isProxy:oa,isReactive:na,isReadonly:sa,isShallow:ia,customRef:$a,triggerRef:ba,shallowRef:va,shallowReactive:ea,shallowReadonly:aa,markRaw:ca,toRaw:ra,effect:nt,stop:st,ReactiveEffect:at,effectScope:Be,EffectScope:qe,getCurrentScope:He,onScopeDispose:Ge,computed:wi,watch:jl,watchEffect:Ol,watchPostEffect:Pl,watchSyncEffect:Ul,onBeforeMount:dn,onMounted:_n,onBeforeUpdate:pn,onUpdated:fn,onBeforeUnmount:mn,onUnmounted:vn,onActivated:an,onDeactivated:ln,onRenderTracked:bn,onRenderTriggered:gn,onErrorCaptured:yn,onServerPrefetch:hn,provide:Al,inject:Tl,nextTick:Ja,defineComponent:Jl,defineAsyncComponent:Zl,useAttrs:Ci,useSlots:Ni,defineProps:xi,defineEmits:ki,defineExpose:$i,withDefaults:Si,mergeDefaults:Ai,createPropsRestProxy:Ti,withAsyncContext:Oi,getCurrentInstance:si,h:Pi,createVNode:Hs,cloneVNode:Ws,mergeProps:ei,isVNode:Fs,Fragment:Ss,Text:Ns,Comment:Cs,Static:Es,Teleport:$s,Suspense:kl,KeepAlive:en,BaseTransition:ql,withDirectives:wn,useSSRContext:Ii,ssrContextKey:Ui,createRenderer:ms,createHydrationRenderer:vs,queuePostFlushCb:Qa,warn:Ta,handleError:ja,callWithErrorHandling:Ua,callWithAsyncErrorHandling:Ia,resolveComponent:kn,resolveDirective:Nn,resolveDynamicComponent:Sn,registerRuntimeCompiler:pi,isRuntimeOnly:fi,useTransitionState:Dl,resolveTransitionHooks:Vl,setTransitionHooks:Wl,getTransitionRawChildren:Kl,initCustomFormatter:ji,get devtools(){return nl},setDevtoolsHook:il,withCtx:vl,pushScopeId:pl,popScopeId:fl,withScopeId:ml,renderList:An,toHandlers:Un,renderSlot:On,createSlots:Tn,withMemo:Mi,isMemoSame:Li,openBlock:Os,createBlock:Ls,setBlockTracking:Is,createTextVNode:Ks,createCommentVNode:Ys,createStaticVNode:Js,createElementVNode:Vs,createElementBlock:Ms,guardReactiveProps:Gs,toDisplayString:te,camelize:Oe,capitalize:Ie,toHandlerKey:je,normalizeProps:J,normalizeClass:K,normalizeStyle:V,transformVNodeArgs:Ds,version:Fi,ssrUtils:null,resolveFilter:null,compatUtils:null});function ur(e){throw e}function dr(e){}function _r(e,t,a,l){const n=new SyntaxError(String(e));return n.code=e,n.loc=t,n}const pr=Symbol(""),fr=Symbol(""),mr=Symbol(""),vr=Symbol(""),hr=Symbol(""),gr=Symbol(""),br=Symbol(""),yr=Symbol(""),wr=Symbol(""),xr=Symbol(""),kr=Symbol(""),$r=Symbol(""),Sr=Symbol(""),Nr=Symbol(""),Cr=Symbol(""),Er=Symbol(""),Ar=Symbol(""),Tr=Symbol(""),Or=Symbol(""),Pr=Symbol(""),Ur=Symbol(""),Ir=Symbol(""),jr=Symbol(""),Mr=Symbol(""),Lr=Symbol(""),Fr=Symbol(""),Rr=Symbol(""),Dr=Symbol(""),zr=Symbol(""),qr=Symbol(""),Br=Symbol(""),Vr=Symbol(""),Hr=Symbol(""),Gr=Symbol(""),Wr=Symbol(""),Kr=Symbol(""),Jr=Symbol(""),Yr=Symbol(""),Zr=Symbol(""),Xr={[pr]:"Fragment",[fr]:"Teleport",[mr]:"Suspense",[vr]:"KeepAlive",[hr]:"BaseTransition",[gr]:"openBlock",[br]:"createBlock",[yr]:"createElementBlock",[wr]:"createVNode",[xr]:"createElementVNode",[kr]:"createCommentVNode",[$r]:"createTextVNode",[Sr]:"createStaticVNode",[Nr]:"resolveComponent",[Cr]:"resolveDynamicComponent",[Er]:"resolveDirective",[Ar]:"resolveFilter",[Tr]:"withDirectives",[Or]:"renderList",[Pr]:"renderSlot",[Ur]:"createSlots",[Ir]:"toDisplayString",[jr]:"mergeProps",[Mr]:"normalizeClass",[Lr]:"normalizeStyle",[Fr]:"normalizeProps",[Rr]:"guardReactiveProps",[Dr]:"toHandlers",[zr]:"camelize",[qr]:"capitalize",[Br]:"toHandlerKey",[Vr]:"setBlockTracking",[Hr]:"pushScopeId",[Gr]:"popScopeId",[Wr]:"withCtx",[Kr]:"unref",[Jr]:"isRef",[Yr]:"withMemo",[Zr]:"isMemoSame"},Qr={source:"",start:{line:1,column:1,offset:0},end:{line:1,column:1,offset:0}};function ec(e,t,a,l,n,s,i,o=!1,r=!1,c=!1,u=Qr){return e&&(o?(e.helper(gr),e.helper(Ac(e.inSSR,c))):e.helper(Ec(e.inSSR,c)),i&&e.helper(Tr)),{type:13,tag:t,props:a,children:l,patchFlag:n,dynamicProps:s,directives:i,isBlock:o,disableTracking:r,isComponent:c,loc:u}}function tc(e,t=Qr){return{type:17,loc:t,elements:e}}function ac(e,t=Qr){return{type:15,loc:t,properties:e}}function lc(e,t){return{type:16,loc:Qr,key:be(e)?nc(e,!0):e,value:t}}function nc(e,t=!1,a=Qr,l=0){return{type:4,loc:a,content:e,isStatic:t,constType:t?3:l}}function sc(e,t=Qr){return{type:8,loc:t,children:e}}function ic(e,t=[],a=Qr){return{type:14,loc:a,callee:e,arguments:t}}function oc(e,t,a=!1,l=!1,n=Qr){return{type:18,params:e,returns:t,newline:a,isSlot:l,loc:n}}function rc(e,t,a,l=!0){return{type:19,test:e,consequent:t,alternate:a,newline:l,loc:Qr}}const cc=e=>4===e.type&&e.isStatic,uc=(e,t)=>e===t||e===Ue(t);function dc(e){return uc(e,"Teleport")?fr:uc(e,"Suspense")?mr:uc(e,"KeepAlive")?vr:uc(e,"BaseTransition")?hr:void 0}const _c=/^\d|[^\$\w]/,pc=e=>!_c.test(e),fc=/[A-Za-z_$\xA0-\uFFFF]/,mc=/[\.\?\w$\xA0-\uFFFF]/,vc=/\s+[.[]\s*|\s*[.[]\s+/g,hc=e=>{e=e.trim().replace(vc,(e=>e.trim()));let t=0,a=[],l=0,n=0,s=null;for(let i=0;i<e.length;i++){const o=e.charAt(i);switch(t){case 0:if("["===o)a.push(t),t=1,l++;else if("("===o)a.push(t),t=2,n++;else if(!(0===i?fc:mc).test(o))return!1;break;case 1:"'"===o||'"'===o||"`"===o?(a.push(t),t=3,s=o):"["===o?l++:"]"===o&&(--l||(t=a.pop()));break;case 2:if("'"===o||'"'===o||"`"===o)a.push(t),t=3,s=o;else if("("===o)n++;else if(")"===o){if(i===e.length-1)return!1;--n||(t=a.pop())}break;case 3:o===s&&(t=a.pop(),s=null)}}return!l&&!n};function gc(e,t,a){const l={source:e.source.slice(t,t+a),start:bc(e.start,e.source,t),end:e.end};return null!=a&&(l.end=bc(e.start,e.source,t+a)),l}function bc(e,t,a=t.length){return yc(ue({},e),t,a)}function yc(e,t,a=t.length){let l=0,n=-1;for(let e=0;e<a;e++)10===t.charCodeAt(e)&&(l++,n=e);return e.offset+=a,e.line+=l,e.column=-1===n?e.column+a:a-n,e}function wc(e,t,a=!1){for(let l=0;l<e.props.length;l++){const n=e.props[l];if(7===n.type&&(a||n.exp)&&(be(t)?n.name===t:t.test(n.name)))return n}}function xc(e,t,a=!1,l=!1){for(let n=0;n<e.props.length;n++){const s=e.props[n];if(6===s.type){if(a)continue;if(s.name===t&&(s.value||l))return s}else if("bind"===s.name&&(s.exp||l)&&kc(s.arg,t))return s}}function kc(e,t){return!(!e||!cc(e)||e.content!==t)}function $c(e){return 5===e.type||2===e.type}function Sc(e){return 7===e.type&&"slot"===e.name}function Nc(e){return 1===e.type&&3===e.tagType}function Cc(e){return 1===e.type&&2===e.tagType}function Ec(e,t){return e||t?wr:xr}function Ac(e,t){return e||t?br:yr}const Tc=new Set([Fr,Rr]);function Oc(e,t=[]){if(e&&!be(e)&&14===e.type){const a=e.callee;if(!be(a)&&Tc.has(a))return Oc(e.arguments[0],t.concat(e))}return[e,t]}function Pc(e,t,a){let l,n,s=13===e.type?e.props:e.arguments[2],i=[];if(s&&!be(s)&&14===s.type){const e=Oc(s);s=e[0],i=e[1],n=i[i.length-1]}if(null==s||be(s))l=ac([t]);else if(14===s.type){const e=s.arguments[0];be(e)||15!==e.type?s.callee===Dr?l=ic(a.helper(jr),[ac([t]),s]):s.arguments.unshift(ac([t])):e.properties.unshift(t),!l&&(l=s)}else if(15===s.type){let e=!1;if(4===t.key.type){const a=t.key.content;e=s.properties.some((e=>4===e.key.type&&e.key.content===a))}e||s.properties.unshift(t),l=s}else l=ic(a.helper(jr),[ac([t]),s]),n&&n.callee===Rr&&(n=i[i.length-2]);13===e.type?n?n.arguments[0]=l:e.props=l:n?n.arguments[0]=l:e.arguments[2]=l}function Uc(e,t){return`_${t}_${e.replace(/[^\w]/g,((t,a)=>"-"===t?"_":e.charCodeAt(a).toString()))}`}function Ic(e,{helper:t,removeHelper:a,inSSR:l}){e.isBlock||(e.isBlock=!0,a(Ec(l,e.isComponent)),t(gr),t(Ac(l,e.isComponent)))}const jc=/&(gt|lt|amp|apos|quot);/g,Mc={gt:">",lt:"<",amp:"&",apos:"'",quot:'"'},Lc={delimiters:["{{","}}"],getNamespace:()=>0,getTextMode:()=>0,isVoidTag:ie,isPreTag:ie,isCustomElement:ie,decodeEntities:e=>e.replace(jc,((e,t)=>Mc[t])),onError:ur,onWarn:dr,comments:!1};function Fc(e,t,a){const l=Qc(a),n=l?l.ns:0,s=[];for(;!nu(e,t,a);){const i=e.source;let o;if(0===t||1===t)if(!e.inVPre&&eu(i,e.options.delimiters[0]))o=Kc(e,t);else if(0===t&&"<"===i[0])if(1===i.length);else if("!"===i[1])o=eu(i,"\x3c!--")?zc(e):eu(i,"<!DOCTYPE")?qc(e):eu(i,"<![CDATA[")&&0!==n?Dc(e,a):qc(e);else if("/"===i[1])if(2===i.length);else{if(">"===i[2]){tu(e,3);continue}if(/[a-z]/i.test(i[2])){Hc(e,1,l);continue}o=qc(e)}else/[a-z]/i.test(i[1])?o=Bc(e,a):"?"===i[1]&&(o=qc(e));if(o||(o=Jc(e,t)),fe(o))for(let e=0;e<o.length;e++)Rc(s,o[e]);else Rc(s,o)}let i=!1;if(2!==t&&1!==t){const t="preserve"!==e.options.whitespace;for(let a=0;a<s.length;a++){const l=s[a];if(e.inPre||2!==l.type)3!==l.type||e.options.comments||(i=!0,s[a]=null);else if(/[^\t\r\n\f ]/.test(l.content))t&&(l.content=l.content.replace(/[\t\r\n\f ]+/g," "));else{const e=s[a-1],n=s[a+1];!e||!n||t&&(3===e.type||3===n.type||1===e.type&&1===n.type&&/[\r\n]/.test(l.content))?(i=!0,s[a]=null):l.content=" "}}if(e.inPre&&l&&e.options.isPreTag(l.tag)){const e=s[0];e&&2===e.type&&(e.content=e.content.replace(/^\r?\n/,""))}}return i?s.filter(Boolean):s}function Rc(e,t){if(2===t.type){const a=Qc(e);if(a&&2===a.type&&a.loc.end.offset===t.loc.start.offset)return a.content+=t.content,a.loc.end=t.loc.end,void(a.loc.source+=t.loc.source)}e.push(t)}function Dc(e,t){tu(e,9);const a=Fc(e,3,t);return 0===e.source.length||tu(e,3),a}function zc(e){const t=Zc(e);let a;const l=/--(\!)?>/.exec(e.source);if(l){a=e.source.slice(4,l.index);const t=e.source.slice(0,l.index);let n=1,s=0;for(;-1!==(s=t.indexOf("\x3c!--",n));)tu(e,s-n+1),n=s+1;tu(e,l.index+l[0].length-n+1)}else a=e.source.slice(4),tu(e,e.source.length);return{type:3,content:a,loc:Xc(e,t)}}function qc(e){const t=Zc(e),a="?"===e.source[1]?1:2;let l;const n=e.source.indexOf(">");return-1===n?(l=e.source.slice(a),tu(e,e.source.length)):(l=e.source.slice(a,n),tu(e,n+1)),{type:3,content:l,loc:Xc(e,t)}}function Bc(e,t){const a=e.inPre,l=e.inVPre,n=Qc(t),s=Hc(e,0,n),i=e.inPre&&!a,o=e.inVPre&&!l;if(s.isSelfClosing||e.options.isVoidTag(s.tag))return i&&(e.inPre=!1),o&&(e.inVPre=!1),s;t.push(s);const r=e.options.getTextMode(s,n),c=Fc(e,r,t);if(t.pop(),s.children=c,su(e.source,s.tag))Hc(e,1,n);else if(0===e.source.length&&"script"===s.tag.toLowerCase()){const e=c[0];e&&eu(e.loc.source,"\x3c!--")}return s.loc=Xc(e,s.loc.start),i&&(e.inPre=!1),o&&(e.inVPre=!1),s}const Vc=D("if,else,else-if,for,slot");function Hc(e,t,a){const l=Zc(e),n=/^<\/?([a-z][^\t\r\n\f />]*)/i.exec(e.source),s=n[1],i=e.options.getNamespace(s,a);tu(e,n[0].length),au(e);const o=Zc(e),r=e.source;e.options.isPreTag(s)&&(e.inPre=!0);let c=Gc(e,t);0===t&&!e.inVPre&&c.some((e=>7===e.type&&"pre"===e.name))&&(e.inVPre=!0,ue(e,o),e.source=r,c=Gc(e,t).filter((e=>"v-pre"!==e.name)));let u=!1;if(0===e.source.length||(u=eu(e.source,"/>"),tu(e,u?2:1)),1===t)return;let d=0;return e.inVPre||("slot"===s?d=2:"template"===s?c.some((e=>7===e.type&&Vc(e.name)))&&(d=3):function(e,t,a){const l=a.options;if(l.isCustomElement(e))return!1;if("component"===e||/^[A-Z]/.test(e)||dc(e)||l.isBuiltInComponent&&l.isBuiltInComponent(e)||l.isNativeTag&&!l.isNativeTag(e))return!0;for(let e=0;e<t.length;e++){const a=t[e];if(6===a.type){if("is"===a.name&&a.value&&a.value.content.startsWith("vue:"))return!0}else{if("is"===a.name)return!0;"bind"===a.name&&kc(a.arg,"is")}}}(s,c,e)&&(d=1)),{type:1,ns:i,tag:s,tagType:d,props:c,isSelfClosing:u,children:[],loc:Xc(e,l),codegenNode:void 0}}function Gc(e,t){const a=[],l=new Set;for(;e.source.length>0&&!eu(e.source,">")&&!eu(e.source,"/>");){if(eu(e.source,"/")){tu(e,1),au(e);continue}const n=Wc(e,l);6===n.type&&n.value&&"class"===n.name&&(n.value.content=n.value.content.replace(/\s+/g," ").trim()),0===t&&a.push(n),/^[^\t\r\n\f />]/.test(e.source),au(e)}return a}function Wc(e,t){const a=Zc(e),l=/^[^\t\r\n\f />][^\t\r\n\f />=]*/.exec(e.source)[0];t.has(l),t.add(l);{const e=/["'<]/g;for(;e.exec(l););}let n;tu(e,l.length),/^[\t\r\n\f ]*=/.test(e.source)&&(au(e),tu(e,1),au(e),n=function(e){const t=Zc(e);let a;const l=e.source[0],n='"'===l||"'"===l;if(n){tu(e,1);const t=e.source.indexOf(l);-1===t?a=Yc(e,e.source.length,4):(a=Yc(e,t,4),tu(e,1))}else{const t=/^[^\t\r\n\f >]+/.exec(e.source);if(!t)return;const l=/["'<=`]/g;for(;l.exec(t[0]););a=Yc(e,t[0].length,4)}return{content:a,isQuoted:n,loc:Xc(e,t)}}(e));const s=Xc(e,a);if(!e.inVPre&&/^(v-[A-Za-z0-9-]|:|\.|@|#)/.test(l)){const t=/(?:^v-([a-z0-9-]+))?(?:(?::|^\.|^@|^#)(\[[^\]]+\]|[^\.]+))?(.+)?$/i.exec(l);let i,o=eu(l,"."),r=t[1]||(o||eu(l,":")?"bind":eu(l,"@")?"on":"slot");if(t[2]){const n="slot"===r,s=l.lastIndexOf(t[2]),o=Xc(e,lu(e,a,s),lu(e,a,s+t[2].length+(n&&t[3]||"").length));let c=t[2],u=!0;c.startsWith("[")?(u=!1,c=c.endsWith("]")?c.slice(1,c.length-1):c.slice(1)):n&&(c+=t[3]||""),i={type:4,content:c,isStatic:u,constType:u?3:0,loc:o}}if(n&&n.isQuoted){const e=n.loc;e.start.offset++,e.start.column++,e.end=bc(e.start,n.content),e.source=e.source.slice(1,-1)}const c=t[3]?t[3].slice(1).split("."):[];return o&&c.push("prop"),{type:7,name:r,exp:n&&{type:4,content:n.content,isStatic:!1,constType:0,loc:n.loc},arg:i,modifiers:c,loc:s}}return!e.inVPre&&eu(l,"v-"),{type:6,name:l,value:n&&{type:2,content:n.content,loc:n.loc},loc:s}}function Kc(e,t){const[a,l]=e.options.delimiters,n=e.source.indexOf(l,a.length);if(-1===n)return;const s=Zc(e);tu(e,a.length);const i=Zc(e),o=Zc(e),r=n-a.length,c=e.source.slice(0,r),u=Yc(e,r,t),d=u.trim(),_=u.indexOf(d);return _>0&&yc(i,c,_),yc(o,c,r-(u.length-d.length-_)),tu(e,l.length),{type:5,content:{type:4,isStatic:!1,constType:0,content:d,loc:Xc(e,i,o)},loc:Xc(e,s)}}function Jc(e,t){const a=3===t?["]]>"]:["<",e.options.delimiters[0]];let l=e.source.length;for(let t=0;t<a.length;t++){const n=e.source.indexOf(a[t],1);-1!==n&&l>n&&(l=n)}const n=Zc(e);return{type:2,content:Yc(e,l,t),loc:Xc(e,n)}}function Yc(e,t,a){const l=e.source.slice(0,t);return tu(e,t),2!==a&&3!==a&&l.includes("&")?e.options.decodeEntities(l,4===a):l}function Zc(e){const{column:t,line:a,offset:l}=e;return{column:t,line:a,offset:l}}function Xc(e,t,a){return{start:t,end:a=a||Zc(e),source:e.originalSource.slice(t.offset,a.offset)}}function Qc(e){return e[e.length-1]}function eu(e,t){return e.startsWith(t)}function tu(e,t){const{source:a}=e;yc(e,a,t),e.source=a.slice(t)}function au(e){const t=/^[\t\r\n\f ]+/.exec(e.source);t&&tu(e,t[0].length)}function lu(e,t,a){return bc(t,e.originalSource.slice(t.offset,a),a)}function nu(e,t,a){const l=e.source;switch(t){case 0:if(eu(l,"</"))for(let e=a.length-1;e>=0;--e)if(su(l,a[e].tag))return!0;break;case 1:case 2:{const e=Qc(a);if(e&&su(l,e.tag))return!0;break}case 3:if(eu(l,"]]>"))return!0}return!l}function su(e,t){return eu(e,"</")&&e.slice(2,2+t.length).toLowerCase()===t.toLowerCase()&&/[\t\r\n\f />]/.test(e[2+t.length]||">")}function iu(e,t){ru(e,t,ou(e,e.children[0]))}function ou(e,t){const{children:a}=e;return 1===a.length&&1===t.type&&!Cc(t)}function ru(e,t,a=!1){const{children:l}=e,n=l.length;let s=0;for(let e=0;e<l.length;e++){const n=l[e];if(1===n.type&&0===n.tagType){const e=a?0:cu(n,t);if(e>0){if(e>=2){n.codegenNode.patchFlag="-1",n.codegenNode=t.hoist(n.codegenNode),s++;continue}}else{const e=n.codegenNode;if(13===e.type){const a=fu(e);if((!a||512===a||1===a)&&_u(n,t)>=2){const a=pu(n);a&&(e.props=t.hoist(a))}e.dynamicProps&&(e.dynamicProps=t.hoist(e.dynamicProps))}}}else 12===n.type&&cu(n.content,t)>=2&&(n.codegenNode=t.hoist(n.codegenNode),s++);if(1===n.type){const e=1===n.tagType;e&&t.scopes.vSlot++,ru(n,t),e&&t.scopes.vSlot--}else if(11===n.type)ru(n,t,1===n.children.length);else if(9===n.type)for(let e=0;e<n.branches.length;e++)ru(n.branches[e],t,1===n.branches[e].children.length)}s&&t.transformHoist&&t.transformHoist(l,t,e),s&&s===n&&1===e.type&&0===e.tagType&&e.codegenNode&&13===e.codegenNode.type&&fe(e.codegenNode.children)&&(e.codegenNode.children=t.hoist(tc(e.codegenNode.children)))}function cu(e,t){const{constantCache:a}=t;switch(e.type){case 1:if(0!==e.tagType)return 0;const l=a.get(e);if(void 0!==l)return l;const n=e.codegenNode;if(13!==n.type)return 0;if(n.isBlock&&"svg"!==e.tag&&"foreignObject"!==e.tag)return 0;if(fu(n))return a.set(e,0),0;{let l=3;const s=_u(e,t);if(0===s)return a.set(e,0),0;s<l&&(l=s);for(let n=0;n<e.children.length;n++){const s=cu(e.children[n],t);if(0===s)return a.set(e,0),0;s<l&&(l=s)}if(l>1)for(let n=0;n<e.props.length;n++){const s=e.props[n];if(7===s.type&&"bind"===s.name&&s.exp){const n=cu(s.exp,t);if(0===n)return a.set(e,0),0;n<l&&(l=n)}}if(n.isBlock){for(let t=0;t<e.props.length;t++)if(7===e.props[t].type)return a.set(e,0),0;t.removeHelper(gr),t.removeHelper(Ac(t.inSSR,n.isComponent)),n.isBlock=!1,t.helper(Ec(t.inSSR,n.isComponent))}return a.set(e,l),l}case 2:case 3:return 3;case 9:case 11:case 10:default:return 0;case 5:case 12:return cu(e.content,t);case 4:return e.constType;case 8:let s=3;for(let a=0;a<e.children.length;a++){const l=e.children[a];if(be(l)||ye(l))continue;const n=cu(l,t);if(0===n)return 0;n<s&&(s=n)}return s}}const uu=new Set([Mr,Lr,Fr,Rr]);function du(e,t){if(14===e.type&&!be(e.callee)&&uu.has(e.callee)){const a=e.arguments[0];if(4===a.type)return cu(a,t);if(14===a.type)return du(a,t)}return 0}function _u(e,t){let a=3;const l=pu(e);if(l&&15===l.type){const{properties:e}=l;for(let l=0;l<e.length;l++){const{key:n,value:s}=e[l],i=cu(n,t);if(0===i)return i;let o;if(i<a&&(a=i),o=4===s.type?cu(s,t):14===s.type?du(s,t):0,0===o)return o;o<a&&(a=o)}}return a}function pu(e){const t=e.codegenNode;if(13===t.type)return t.props}function fu(e){const t=e.patchFlag;return t?parseInt(t,10):void 0}function mu(e,t){const a=function(e,{filename:t="",prefixIdentifiers:a=!1,hoistStatic:l=!1,cacheHandlers:n=!1,nodeTransforms:s=[],directiveTransforms:i={},transformHoist:o=null,isBuiltInComponent:r=se,isCustomElement:c=se,expressionPlugins:u=[],scopeId:d=null,slotted:_=!0,ssr:p=!1,inSSR:f=!1,ssrCssVars:m="",bindingMetadata:v=le,inline:h=!1,isTS:g=!1,onError:b=ur,onWarn:y=dr,compatConfig:w}){const x=t.replace(/\?.*$/,"").match(/([^/\\]+)\.\w+$/),k={selfName:x&&Ie(Oe(x[1])),prefixIdentifiers:a,hoistStatic:l,cacheHandlers:n,nodeTransforms:s,directiveTransforms:i,transformHoist:o,isBuiltInComponent:r,isCustomElement:c,expressionPlugins:u,scopeId:d,slotted:_,ssr:p,inSSR:f,ssrCssVars:m,bindingMetadata:v,inline:h,isTS:g,onError:b,onWarn:y,compatConfig:w,root:e,helpers:new Map,components:new Set,directives:new Set,hoists:[],imports:[],constantCache:new Map,temps:0,cached:0,identifiers:Object.create(null),scopes:{vFor:0,vSlot:0,vPre:0,vOnce:0},parent:null,currentNode:e,childIndex:0,inVOnce:!1,helper(e){const t=k.helpers.get(e)||0;return k.helpers.set(e,t+1),e},removeHelper(e){const t=k.helpers.get(e);if(t){const a=t-1;a?k.helpers.set(e,a):k.helpers.delete(e)}},helperString:e=>`_${Xr[k.helper(e)]}`,replaceNode(e){k.parent.children[k.childIndex]=k.currentNode=e},removeNode(e){const t=e?k.parent.children.indexOf(e):k.currentNode?k.childIndex:-1;e&&e!==k.currentNode?k.childIndex>t&&(k.childIndex--,k.onNodeRemoved()):(k.currentNode=null,k.onNodeRemoved()),k.parent.children.splice(t,1)},onNodeRemoved:()=>{},addIdentifiers(e){},removeIdentifiers(e){},hoist(e){be(e)&&(e=nc(e)),k.hoists.push(e);const t=nc(`_hoisted_${k.hoists.length}`,!1,e.loc,2);return t.hoisted=e,t},cache:(e,t=!1)=>function(e,t,a=!1){return{type:20,index:e,value:t,isVNode:a,loc:Qr}}(k.cached++,e,t)};return k}(e,t);vu(e,a),t.hoistStatic&&iu(e,a),t.ssr||function(e,t){const{helper:a}=t,{children:l}=e;if(1===l.length){const a=l[0];if(ou(e,a)&&a.codegenNode){const l=a.codegenNode;13===l.type&&Ic(l,t),e.codegenNode=l}else e.codegenNode=a}else if(l.length>1){let l=64;e.codegenNode=ec(t,a(pr),void 0,e.children,l+"",void 0,void 0,!0,void 0,!1)}}(e,a),e.helpers=[...a.helpers.keys()],e.components=[...a.components],e.directives=[...a.directives],e.imports=a.imports,e.hoists=a.hoists,e.temps=a.temps,e.cached=a.cached}function vu(e,t){t.currentNode=e;const{nodeTransforms:a}=t,l=[];for(let n=0;n<a.length;n++){const s=a[n](e,t);if(s&&(fe(s)?l.push(...s):l.push(s)),!t.currentNode)return;e=t.currentNode}switch(e.type){case 3:t.ssr||t.helper(kr);break;case 5:t.ssr||t.helper(Ir);break;case 9:for(let a=0;a<e.branches.length;a++)vu(e.branches[a],t);break;case 10:case 11:case 1:case 0:!function(e,t){let a=0;const l=()=>{a--};for(;a<e.children.length;a++){const n=e.children[a];be(n)||(t.parent=e,t.childIndex=a,t.onNodeRemoved=l,vu(n,t))}}(e,t)}t.currentNode=e;let n=l.length;for(;n--;)l[n]()}function hu(e,t){const a=be(e)?t=>t===e:t=>e.test(t);return(e,l)=>{if(1===e.type){const{props:n}=e;if(3===e.tagType&&n.some(Sc))return;const s=[];for(let i=0;i<n.length;i++){const o=n[i];if(7===o.type&&a(o.name)){n.splice(i,1),i--;const a=t(e,o,l);a&&s.push(a)}}return s}}}const gu=e=>`${Xr[e]}: _${Xr[e]}`;function bu(e,t,{helper:a,push:l,newline:n,isTS:s}){const i=a("component"===t?Nr:Er);for(let a=0;a<e.length;a++){let o=e[a];const r=o.endsWith("__self");r&&(o=o.slice(0,-6)),l(`const ${Uc(o,t)} = ${i}(${JSON.stringify(o)}${r?", true":""})${s?"!":""}`),a<e.length-1&&n()}}function yu(e,t){const a=e.length>3||!1;t.push("["),a&&t.indent(),wu(e,t,a),a&&t.deindent(),t.push("]")}function wu(e,t,a=!1,l=!0){const{push:n,newline:s}=t;for(let i=0;i<e.length;i++){const o=e[i];be(o)?n(o):fe(o)?yu(o,t):xu(o,t),i<e.length-1&&(a?(l&&n(","),s()):l&&n(", "))}}function xu(e,t){if(be(e))t.push(e);else if(ye(e))t.push(t.helper(e));else switch(e.type){case 1:case 9:case 11:case 12:xu(e.codegenNode,t);break;case 2:!function(e,t){t.push(JSON.stringify(e.content),e)}(e,t);break;case 4:ku(e,t);break;case 5:!function(e,t){const{push:a,helper:l,pure:n}=t;n&&a("/*#__PURE__*/"),a(`${l(Ir)}(`),xu(e.content,t),a(")")}(e,t);break;case 8:$u(e,t);break;case 3:!function(e,t){const{push:a,helper:l,pure:n}=t;n&&a("/*#__PURE__*/"),a(`${l(kr)}(${JSON.stringify(e.content)})`,e)}(e,t);break;case 13:!function(e,t){const{push:a,helper:l,pure:n}=t,{tag:s,props:i,children:o,patchFlag:r,dynamicProps:c,directives:u,isBlock:d,disableTracking:_,isComponent:p}=e;u&&a(l(Tr)+"("),d&&a(`(${l(gr)}(${_?"true":""}), `),n&&a("/*#__PURE__*/");a(l(d?Ac(t.inSSR,p):Ec(t.inSSR,p))+"(",e),wu(function(e){let t=e.length;for(;t--&&null==e[t];);return e.slice(0,t+1).map((e=>e||"null"))}([s,i,o,r,c]),t),a(")"),d&&a(")"),u&&(a(", "),xu(u,t),a(")"))}(e,t);break;case 14:!function(e,t){const{push:a,helper:l,pure:n}=t,s=be(e.callee)?e.callee:l(e.callee);n&&a("/*#__PURE__*/"),a(s+"(",e),wu(e.arguments,t),a(")")}(e,t);break;case 15:!function(e,t){const{push:a,indent:l,deindent:n,newline:s}=t,{properties:i}=e;if(!i.length)return void a("{}",e);const o=i.length>1||!1;a(o?"{":"{ "),o&&l();for(let e=0;e<i.length;e++){const{key:l,value:n}=i[e];Su(l,t),a(": "),xu(n,t),e<i.length-1&&(a(","),s())}o&&n(),a(o?"}":" }")}(e,t);break;case 17:!function(e,t){yu(e.elements,t)}(e,t);break;case 18:!function(e,t){const{push:a,indent:l,deindent:n}=t,{params:s,returns:i,body:o,newline:r,isSlot:c}=e;c&&a(`_${Xr[Wr]}(`),a("(",e),fe(s)?wu(s,t):s&&xu(s,t),a(") => "),(r||o)&&(a("{"),l()),i?(r&&a("return "),fe(i)?yu(i,t):xu(i,t)):o&&xu(o,t),(r||o)&&(n(),a("}")),c&&a(")")}(e,t);break;case 19:!function(e,t){const{test:a,consequent:l,alternate:n,newline:s}=e,{push:i,indent:o,deindent:r,newline:c}=t;if(4===a.type){const e=!pc(a.content);e&&i("("),ku(a,t),e&&i(")")}else i("("),xu(a,t),i(")");s&&o(),t.indentLevel++,s||i(" "),i("? "),xu(l,t),t.indentLevel--,s&&c(),s||i(" "),i(": ");const u=19===n.type;u||t.indentLevel++,xu(n,t),u||t.indentLevel--,s&&r(!0)}(e,t);break;case 20:!function(e,t){const{push:a,helper:l,indent:n,deindent:s,newline:i}=t;a(`_cache[${e.index}] || (`),e.isVNode&&(n(),a(`${l(Vr)}(-1),`),i()),a(`_cache[${e.index}] = `),xu(e.value,t),e.isVNode&&(a(","),i(),a(`${l(Vr)}(1),`),i(),a(`_cache[${e.index}]`),s()),a(")")}(e,t);break;case 21:wu(e.body,t,!0,!1)}}function ku(e,t){const{content:a,isStatic:l}=e;t.push(l?JSON.stringify(a):a,e)}function $u(e,t){for(let a=0;a<e.children.length;a++){const l=e.children[a];be(l)?t.push(l):xu(l,t)}}function Su(e,t){const{push:a}=t;8===e.type?(a("["),$u(e,t),a("]")):e.isStatic?a(pc(e.content)?e.content:JSON.stringify(e.content),e):a(`[${e.content}]`,e)}const Nu=hu(/^(if|else|else-if)$/,((e,t,a)=>function(e,t,a,l){if("else"===t.name||t.exp&&t.exp.content.trim()||(t.exp=nc("true",!1,t.exp?t.exp.loc:e.loc)),"if"===t.name){const n=Cu(e,t),s={type:9,loc:e.loc,branches:[n]};if(a.replaceNode(s),l)return l(s,n,!0)}else{const n=a.parent.children;let s=n.indexOf(e);for(;s-- >=-1;){const i=n[s];if(!i||2!==i.type||i.content.trim().length){if(i&&9===i.type){a.removeNode();const n=Cu(e,t);i.branches.push(n);const s=l&&l(i,n,!1);vu(n,a),s&&s(),a.currentNode=null}break}a.removeNode(i)}}}(e,t,a,((e,t,l)=>{const n=a.parent.children;let s=n.indexOf(e),i=0;for(;s-- >=0;){const e=n[s];e&&9===e.type&&(i+=e.branches.length)}return()=>{if(l)e.codegenNode=Eu(t,i,a);else{const l=function(e){for(;;)if(19===e.type){if(19!==e.alternate.type)return e;e=e.alternate}else 20===e.type&&(e=e.value)}(e.codegenNode);l.alternate=Eu(t,i+e.branches.length-1,a)}}}))));function Cu(e,t){const a=3===e.tagType;return{type:10,loc:e.loc,condition:"else"===t.name?void 0:t.exp,children:a&&!wc(e,"for")?e.children:[e],userKey:xc(e,"key"),isTemplateIf:a}}function Eu(e,t,a){return e.condition?rc(e.condition,Au(e,t,a),ic(a.helper(kr),['""',"true"])):Au(e,t,a)}function Au(e,t,a){const{helper:l}=a,n=lc("key",nc(`${t}`,!1,Qr,2)),{children:s}=e,i=s[0];if(1!==s.length||1!==i.type){if(1===s.length&&11===i.type){const e=i.codegenNode;return Pc(e,n,a),e}{let t=64;return ec(a,l(pr),ac([n]),s,t+"",void 0,void 0,!0,!1,!1,e.loc)}}{const e=i.codegenNode,t=14===(o=e).type&&o.callee===Yr?o.arguments[1].returns:o;return 13===t.type&&Ic(t,a),Pc(t,n,a),e}var o}const Tu=hu("for",((e,t,a)=>{const{helper:l,removeHelper:n}=a;return function(e,t,a,l){if(!t.exp)return;const n=Iu(t.exp);if(!n)return;const{scopes:s}=a,{source:i,value:o,key:r,index:c}=n,u={type:11,loc:t.loc,source:i,valueAlias:o,keyAlias:r,objectIndexAlias:c,parseResult:n,children:Nc(e)?e.children:[e]};a.replaceNode(u),s.vFor++;const d=l&&l(u);return()=>{s.vFor--,d&&d()}}(e,t,a,(t=>{const s=ic(l(Or),[t.source]),i=Nc(e),o=wc(e,"memo"),r=xc(e,"key"),c=r&&(6===r.type?nc(r.value.content,!0):r.exp),u=r?lc("key",c):null,d=4===t.source.type&&t.source.constType>0,_=d?64:r?128:256;return t.codegenNode=ec(a,l(pr),void 0,s,_+"",void 0,void 0,!0,!d,!1,e.loc),()=>{let r;const{children:_}=t,p=1!==_.length||1!==_[0].type,f=Cc(e)?e:i&&1===e.children.length&&Cc(e.children[0])?e.children[0]:null;if(f?(r=f.codegenNode,i&&u&&Pc(r,u,a)):p?r=ec(a,l(pr),u?ac([u]):void 0,e.children,"64",void 0,void 0,!0,void 0,!1):(r=_[0].codegenNode,i&&u&&Pc(r,u,a),r.isBlock!==!d&&(r.isBlock?(n(gr),n(Ac(a.inSSR,r.isComponent))):n(Ec(a.inSSR,r.isComponent))),r.isBlock=!d,r.isBlock?(l(gr),l(Ac(a.inSSR,r.isComponent))):l(Ec(a.inSSR,r.isComponent))),o){const e=oc(Mu(t.parseResult,[nc("_cached")]));e.body={type:21,body:[sc(["const _memo = (",o.exp,")"]),sc(["if (_cached",...c?[" && _cached.key === ",c]:[],` && ${a.helperString(Zr)}(_cached, _memo)) return _cached`]),sc(["const _item = ",r]),nc("_item.memo = _memo"),nc("return _item")],loc:Qr},s.arguments.push(e,nc("_cache"),nc(String(a.cached++)))}else s.arguments.push(oc(Mu(t.parseResult),r,!0))}}))})),Ou=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,Pu=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,Uu=/^\(|\)$/g;function Iu(e,t){const a=e.loc,l=e.content,n=l.match(Ou);if(!n)return;const[,s,i]=n,o={source:ju(a,i.trim(),l.indexOf(i,s.length)),value:void 0,key:void 0,index:void 0};let r=s.trim().replace(Uu,"").trim();const c=s.indexOf(r),u=r.match(Pu);if(u){r=r.replace(Pu,"").trim();const e=u[1].trim();let t;if(e&&(t=l.indexOf(e,c+r.length),o.key=ju(a,e,t)),u[2]){const n=u[2].trim();n&&(o.index=ju(a,n,l.indexOf(n,o.key?t+e.length:c+r.length)))}}return r&&(o.value=ju(a,r,c)),o}function ju(e,t,a){return nc(t,!1,gc(e,a,t.length))}function Mu({value:e,key:t,index:a},l=[]){return function(e){let t=e.length;for(;t--&&!e[t];);return e.slice(0,t+1).map(((e,t)=>e||nc("_".repeat(t+1),!1)))}([e,t,a,...l])}const Lu=nc("undefined",!1),Fu=(e,t)=>{if(1===e.type&&(1===e.tagType||3===e.tagType)){if(wc(e,"slot"))return t.scopes.vSlot++,()=>{t.scopes.vSlot--}}},Ru=(e,t,a)=>oc(e,t,!1,!0,t.length?t[0].loc:a);function Du(e,t,a=Ru){t.helper(Wr);const{children:l,loc:n}=e,s=[],i=[];let o=t.scopes.vSlot>0||t.scopes.vFor>0;const r=wc(e,"slot",!0);if(r){const{arg:e,exp:t}=r;e&&!cc(e)&&(o=!0),s.push(lc(e||nc("default",!0),a(t,l,n)))}let c=!1,u=!1;const d=[],_=new Set;for(let e=0;e<l.length;e++){const n=l[e];let p;if(!Nc(n)||!(p=wc(n,"slot",!0))){3!==n.type&&d.push(n);continue}if(r)break;c=!0;const{children:f,loc:m}=n,{arg:v=nc("default",!0),exp:h}=p;let g;cc(v)?g=v?v.content:"default":o=!0;const b=a(h,f,m);let y,w,x;if(y=wc(n,"if"))o=!0,i.push(rc(y.exp,zu(v,b),Lu));else if(w=wc(n,/^else(-if)?$/,!0)){let t,a=e;for(;a--&&(t=l[a],3===t.type););if(t&&Nc(t)&&wc(t,"if")){l.splice(e,1),e--;let t=i[i.length-1];for(;19===t.alternate.type;)t=t.alternate;t.alternate=w.exp?rc(w.exp,zu(v,b),Lu):zu(v,b)}}else if(x=wc(n,"for")){o=!0;const e=x.parseResult||Iu(x.exp);e&&i.push(ic(t.helper(Or),[e.source,oc(Mu(e),zu(v,b),!0)]))}else{if(g){if(_.has(g))continue;_.add(g),"default"===g&&(u=!0)}s.push(lc(v,b))}}if(!r){const e=(e,t)=>lc("default",a(e,t,n));c?d.length&&d.some((e=>Bu(e)))&&(u||s.push(e(void 0,d))):s.push(e(void 0,l))}const p=o?2:qu(e.children)?3:1;let f=ac(s.concat(lc("_",nc(p+"",!1))),n);return i.length&&(f=ic(t.helper(Ur),[f,tc(i)])),{slots:f,hasDynamicSlots:o}}function zu(e,t){return ac([lc("name",e),lc("fn",t)])}function qu(e){for(let t=0;t<e.length;t++){const a=e[t];switch(a.type){case 1:if(2===a.tagType||qu(a.children))return!0;break;case 9:if(qu(a.branches))return!0;break;case 10:case 11:if(qu(a.children))return!0}}return!1}function Bu(e){return 2!==e.type&&12!==e.type||(2===e.type?!!e.content.trim():Bu(e.content))}const Vu=new WeakMap,Hu=(e,t)=>function(){if(1!==(e=t.currentNode).type||0!==e.tagType&&1!==e.tagType)return;const{tag:a,props:l}=e,n=1===e.tagType;let s=n?function(e,t,a=!1){let{tag:l}=e;const n=Ju(l),s=xc(e,"is");if(s)if(n){const e=6===s.type?s.value&&nc(s.value.content,!0):s.exp;if(e)return ic(t.helper(Cr),[e])}else 6===s.type&&s.value.content.startsWith("vue:")&&(l=s.value.content.slice(4));const i=!n&&wc(e,"is");if(i&&i.exp)return ic(t.helper(Cr),[i.exp]);const o=dc(l)||t.isBuiltInComponent(l);return o?(a||t.helper(o),o):(t.helper(Nr),t.components.add(l),Uc(l,"component"))}(e,t):`"${a}"`;const i=we(s)&&s.callee===Cr;let o,r,c,u,d,_,p=0,f=i||s===fr||s===mr||!n&&("svg"===a||"foreignObject"===a);if(l.length>0){const a=Gu(e,t,void 0,n,i);o=a.props,p=a.patchFlag,d=a.dynamicPropNames;const l=a.directives;_=l&&l.length?tc(l.map((e=>function(e,t){const a=[],l=Vu.get(e);l?a.push(t.helperString(l)):(t.helper(Er),t.directives.add(e.name),a.push(Uc(e.name,"directive")));const{loc:n}=e;if(e.exp&&a.push(e.exp),e.arg&&(e.exp||a.push("void 0"),a.push(e.arg)),Object.keys(e.modifiers).length){e.arg||(e.exp||a.push("void 0"),a.push("void 0"));const t=nc("true",!1,n);a.push(ac(e.modifiers.map((e=>lc(e,t))),n))}return tc(a,e.loc)}(e,t)))):void 0,a.shouldUseBlock&&(f=!0)}if(e.children.length>0)if(s===vr&&(f=!0,p|=1024),n&&s!==fr&&s!==vr){const{slots:a,hasDynamicSlots:l}=Du(e,t);r=a,l&&(p|=1024)}else if(1===e.children.length&&s!==fr){const a=e.children[0],l=a.type,n=5===l||8===l;n&&0===cu(a,t)&&(p|=1),r=n||2===l?a:e.children}else r=e.children;0!==p&&(c=String(p),d&&d.length&&(u=function(e){let t="[";for(let a=0,l=e.length;a<l;a++)t+=JSON.stringify(e[a]),a<l-1&&(t+=", ");return t+"]"}(d))),e.codegenNode=ec(t,s,o,r,c,u,_,!!f,!1,n,e.loc)};function Gu(e,t,a=e.props,l,n,s=!1){const{tag:i,loc:o,children:r}=e;let c=[];const u=[],d=[],_=r.length>0;let p=!1,f=0,m=!1,v=!1,h=!1,g=!1,b=!1,y=!1;const w=[],x=({key:e,value:a})=>{if(cc(e)){const s=e.content,i=re(s);if(!i||l&&!n||"onclick"===s.toLowerCase()||"onUpdate:modelValue"===s||Ce(s)||(g=!0),i&&Ce(s)&&(y=!0),20===a.type||(4===a.type||8===a.type)&&cu(a,t)>0)return;"ref"===s?m=!0:"class"===s?v=!0:"style"===s?h=!0:"key"===s||w.includes(s)||w.push(s),!l||"class"!==s&&"style"!==s||w.includes(s)||w.push(s)}else b=!0};for(let l=0;l<a.length;l++){const n=a[l];if(6===n.type){const{loc:e,name:a,value:l}=n;let s=!0;if("ref"===a&&(m=!0,t.scopes.vFor>0&&c.push(lc(nc("ref_for",!0),nc("true")))),"is"===a&&(Ju(i)||l&&l.content.startsWith("vue:")))continue;c.push(lc(nc(a,!0,gc(e,0,a.length)),nc(l?l.content:"",s,l?l.loc:e)))}else{const{name:a,arg:l,exp:r,loc:f}=n,m="bind"===a,v="on"===a;if("slot"===a)continue;if("once"===a||"memo"===a)continue;if("is"===a||m&&kc(l,"is")&&Ju(i))continue;if(v&&s)continue;if((m&&kc(l,"key")||v&&_&&kc(l,"vue:before-update"))&&(p=!0),m&&kc(l,"ref")&&t.scopes.vFor>0&&c.push(lc(nc("ref_for",!0),nc("true"))),!l&&(m||v)){b=!0,r&&(c.length&&(u.push(ac(Wu(c),o)),c=[]),u.push(m?r:{type:14,loc:f,callee:t.helper(Dr),arguments:[r]}));continue}const h=t.directiveTransforms[a];if(h){const{props:a,needRuntime:l}=h(n,e,t);!s&&a.forEach(x),c.push(...a),l&&(d.push(n),ye(l)&&Vu.set(n,l))}else Ee(a)||(d.push(n),_&&(p=!0))}}let k;if(u.length?(c.length&&u.push(ac(Wu(c),o)),k=u.length>1?ic(t.helper(jr),u,o):u[0]):c.length&&(k=ac(Wu(c),o)),b?f|=16:(v&&!l&&(f|=2),h&&!l&&(f|=4),w.length&&(f|=8),g&&(f|=32)),p||0!==f&&32!==f||!(m||y||d.length>0)||(f|=512),!t.inSSR&&k)switch(k.type){case 15:let e=-1,a=-1,l=!1;for(let t=0;t<k.properties.length;t++){const n=k.properties[t].key;cc(n)?"class"===n.content?e=t:"style"===n.content&&(a=t):n.isHandlerKey||(l=!0)}const n=k.properties[e],s=k.properties[a];l?k=ic(t.helper(Fr),[k]):(n&&!cc(n.value)&&(n.value=ic(t.helper(Mr),[n.value])),s&&(h||4===s.value.type&&"["===s.value.content.trim()[0]||17===s.value.type)&&(s.value=ic(t.helper(Lr),[s.value])));break;case 14:break;default:k=ic(t.helper(Fr),[ic(t.helper(Rr),[k])])}return{props:k,directives:d,patchFlag:f,dynamicPropNames:w,shouldUseBlock:p}}function Wu(e){const t=new Map,a=[];for(let l=0;l<e.length;l++){const n=e[l];if(8===n.key.type||!n.key.isStatic){a.push(n);continue}const s=n.key.content,i=t.get(s);i?("style"===s||"class"===s||re(s))&&Ku(i,n):(t.set(s,n),a.push(n))}return a}function Ku(e,t){17===e.value.type?e.value.elements.push(t.value):e.value=tc([e.value,t.value],e.loc)}function Ju(e){return"component"===e||"Component"===e}const Yu=(e,t)=>{if(Cc(e)){const{children:a,loc:l}=e,{slotName:n,slotProps:s}=function(e,t){let a,l='"default"';const n=[];for(let t=0;t<e.props.length;t++){const a=e.props[t];6===a.type?a.value&&("name"===a.name?l=JSON.stringify(a.value.content):(a.name=Oe(a.name),n.push(a))):"bind"===a.name&&kc(a.arg,"name")?a.exp&&(l=a.exp):("bind"===a.name&&a.arg&&cc(a.arg)&&(a.arg.content=Oe(a.arg.content)),n.push(a))}if(n.length>0){const{props:l,directives:s}=Gu(e,t,n,!1,!1);a=l}return{slotName:l,slotProps:a}}(e,t),i=[t.prefixIdentifiers?"_ctx.$slots":"$slots",n,"{}","undefined","true"];let o=2;s&&(i[2]=s,o=3),a.length&&(i[3]=oc([],a,!1,!1,l),o=4),t.scopeId&&!t.slotted&&(o=5),i.splice(o),e.codegenNode=ic(t.helper(Pr),i,l)}},Zu=/^\s*([\w$_]+|(async\s*)?\([^)]*?\))\s*=>|^\s*(async\s+)?function(?:\s+[\w$]+)?\s*\(/,Xu=(e,t,a,l)=>{const{loc:n,modifiers:s,arg:i}=e;let o;if(4===i.type)if(i.isStatic){let e=i.content;e.startsWith("vue:")&&(e=`vnode-${e.slice(4)}`),o=nc(je(Oe(e)),!0,i.loc)}else o=sc([`${a.helperString(Br)}(`,i,")"]);else o=i,o.children.unshift(`${a.helperString(Br)}(`),o.children.push(")");let r=e.exp;r&&!r.content.trim()&&(r=void 0);let c=a.cacheHandlers&&!r&&!a.inVOnce;if(r){const e=hc(r.content),t=!(e||Zu.test(r.content)),a=r.content.includes(";");(t||c&&e)&&(r=sc([`${t?"$event":"(...args)"} => ${a?"{":"("}`,r,a?"}":")"]))}let u={props:[lc(o,r||nc("() => {}",!1,n))]};return l&&(u=l(u)),c&&(u.props[0].value=a.cache(u.props[0].value)),u.props.forEach((e=>e.key.isHandlerKey=!0)),u},Qu=(e,t,a)=>{const{exp:l,modifiers:n,loc:s}=e,i=e.arg;return 4!==i.type?(i.children.unshift("("),i.children.push(') || ""')):i.isStatic||(i.content=`${i.content} || ""`),n.includes("camel")&&(4===i.type?i.content=i.isStatic?Oe(i.content):`${a.helperString(zr)}(${i.content})`:(i.children.unshift(`${a.helperString(zr)}(`),i.children.push(")"))),a.inSSR||(n.includes("prop")&&ed(i,"."),n.includes("attr")&&ed(i,"^")),!l||4===l.type&&!l.content.trim()?{props:[lc(i,nc("",!0,s))]}:{props:[lc(i,l)]}},ed=(e,t)=>{4===e.type?e.content=e.isStatic?t+e.content:`\`${t}\${${e.content}}\``:(e.children.unshift(`'${t}' + (`),e.children.push(")"))},td=(e,t)=>{if(0===e.type||1===e.type||11===e.type||10===e.type)return()=>{const a=e.children;let l,n=!1;for(let e=0;e<a.length;e++){const t=a[e];if($c(t)){n=!0;for(let n=e+1;n<a.length;n++){const s=a[n];if(!$c(s)){l=void 0;break}l||(l=a[e]=sc([t],t.loc)),l.children.push(" + ",s),a.splice(n,1),n--}}}if(n&&(1!==a.length||0!==e.type&&(1!==e.type||0!==e.tagType||e.props.find((e=>7===e.type&&!t.directiveTransforms[e.name])))))for(let e=0;e<a.length;e++){const l=a[e];if($c(l)||8===l.type){const n=[];2===l.type&&" "===l.content||n.push(l),t.ssr||0!==cu(l,t)||n.push("1"),a[e]={type:12,content:l,loc:l.loc,codegenNode:ic(t.helper($r),n)}}}}},ad=new WeakSet,ld=(e,t)=>{if(1===e.type&&wc(e,"once",!0)){if(ad.has(e)||t.inVOnce)return;return ad.add(e),t.inVOnce=!0,t.helper(Vr),()=>{t.inVOnce=!1;const e=t.currentNode;e.codegenNode&&(e.codegenNode=t.cache(e.codegenNode,!0))}}},nd=(e,t,a)=>{const{exp:l,arg:n}=e;if(!l)return sd();const s=l.loc.source,i=4===l.type?l.content:s;if(!i.trim()||!hc(i))return sd();const o=n||nc("modelValue",!0),r=n?cc(n)?`onUpdate:${n.content}`:sc(['"onUpdate:" + ',n]):"onUpdate:modelValue";let c;c=sc([(a.isTS?"($event: any)":"$event")+" => ((",l,") = $event)"]);const u=[lc(o,e.exp),lc(r,c)];if(e.modifiers.length&&1===t.tagType){const t=e.modifiers.map((e=>(pc(e)?e:JSON.stringify(e))+": true")).join(", "),a=n?cc(n)?`${n.content}Modifiers`:sc([n,' + "Modifiers"']):"modelModifiers";u.push(lc(a,nc(`{ ${t} }`,!1,e.loc,2)))}return sd(u)};function sd(e=[]){return{props:e}}const id=new WeakSet,od=(e,t)=>{if(1===e.type){const a=wc(e,"memo");if(!a||id.has(e))return;return id.add(e),()=>{const l=e.codegenNode||t.currentNode.codegenNode;l&&13===l.type&&(1!==e.tagType&&Ic(l,t),e.codegenNode=ic(t.helper(Yr),[a.exp,oc(void 0,l),"_cache",String(t.cached++)]))}}};function rd(e,t={}){const a=t.onError||ur,l="module"===t.mode;!0===t.prefixIdentifiers?a(_r(46)):l&&a(_r(47)),t.cacheHandlers&&a(_r(48)),t.scopeId&&!l&&a(_r(49));const n=be(e)?function(e,t={}){const a=function(e,t){const a=ue({},Lc);let l;for(l in t)a[l]=void 0===t[l]?Lc[l]:t[l];return{options:a,column:1,line:1,offset:0,originalSource:e,source:e,inPre:!1,inVPre:!1,onWarn:a.onWarn}}(e,t),l=Zc(a);return function(e,t=Qr){return{type:0,children:e,helpers:[],components:[],directives:[],hoists:[],imports:[],cached:0,temps:0,codegenNode:void 0,loc:t}}(Fc(a,0,[]),Xc(a,l))}(e,t):e,[s,i]=[[ld,Nu,od,Tu,Yu,Hu,Fu,td],{on:Xu,bind:Qu,model:nd}];return mu(n,ue({},t,{prefixIdentifiers:!1,nodeTransforms:[...s,...t.nodeTransforms||[]],directiveTransforms:ue({},i,t.directiveTransforms||{})})),function(e,t={}){const a=function(e,{mode:t="function",prefixIdentifiers:a="module"===t,sourceMap:l=!1,filename:n="template.vue.html",scopeId:s=null,optimizeImports:i=!1,runtimeGlobalName:o="Vue",runtimeModuleName:r="vue",ssrRuntimeModuleName:c="vue/server-renderer",ssr:u=!1,isTS:d=!1,inSSR:_=!1}){const p={mode:t,prefixIdentifiers:a,sourceMap:l,filename:n,scopeId:s,optimizeImports:i,runtimeGlobalName:o,runtimeModuleName:r,ssrRuntimeModuleName:c,ssr:u,isTS:d,inSSR:_,source:e.loc.source,code:"",column:1,line:1,offset:0,indentLevel:0,pure:!1,map:void 0,helper:e=>`_${Xr[e]}`,push(e,t){p.code+=e},indent(){f(++p.indentLevel)},deindent(e=!1){e?--p.indentLevel:f(--p.indentLevel)},newline(){f(p.indentLevel)}};function f(e){p.push("\n"+"  ".repeat(e))}return p}(e,t);t.onContextCreated&&t.onContextCreated(a);const{mode:l,push:n,prefixIdentifiers:s,indent:i,deindent:o,newline:r,ssr:c}=a,u=e.helpers.length>0,d=!s&&"module"!==l;if(function(e,t){const{push:a,newline:l,runtimeGlobalName:n}=t,s=n;e.helpers.length>0&&(a(`const _Vue = ${s}\n`),e.hoists.length)&&a(`const { ${[wr,xr,kr,$r,Sr].filter((t=>e.helpers.includes(t))).map(gu).join(", ")} } = _Vue\n`),function(e,t){if(!e.length)return;t.pure=!0;const{push:a,newline:l}=t;l();for(let n=0;n<e.length;n++){const s=e[n];s&&(a(`const _hoisted_${n+1} = `),xu(s,t),l())}t.pure=!1}(e.hoists,t),l(),a("return ")}(e,a),n(`function ${c?"ssrRender":"render"}(${(c?["_ctx","_push","_parent","_attrs"]:["_ctx","_cache"]).join(", ")}) {`),i(),d&&(n("with (_ctx) {"),i(),u&&(n(`const { ${e.helpers.map(gu).join(", ")} } = _Vue`),n("\n"),r())),e.components.length&&(bu(e.components,"component",a),(e.directives.length||e.temps>0)&&r()),e.directives.length&&(bu(e.directives,"directive",a),e.temps>0&&r()),e.temps>0){n("let ");for(let t=0;t<e.temps;t++)n(`${t>0?", ":""}_temp${t}`)}return(e.components.length||e.directives.length||e.temps)&&(n("\n"),r()),c||n("return "),e.codegenNode?xu(e.codegenNode,a):n("null"),d&&(o(),n("}")),o(),n("}"),{ast:e,code:a.code,preamble:"",map:a.map?a.map.toJSON():void 0}}(n,ue({},t,{prefixIdentifiers:!1}))}const cd=Symbol(""),ud=Symbol(""),dd=Symbol(""),_d=Symbol(""),pd=Symbol(""),fd=Symbol(""),md=Symbol(""),vd=Symbol(""),hd=Symbol(""),gd=Symbol("");var bd;let yd;bd={[cd]:"vModelRadio",[ud]:"vModelCheckbox",[dd]:"vModelText",[_d]:"vModelSelect",[pd]:"vModelDynamic",[fd]:"withModifiers",[md]:"withKeys",[vd]:"vShow",[hd]:"Transition",[gd]:"TransitionGroup"},Object.getOwnPropertySymbols(bd).forEach((e=>{Xr[e]=bd[e]}));const wd=D("style,iframe,script,noscript",!0),xd={isVoidTag:X,isNativeTag:e=>Y(e)||Z(e),isPreTag:e=>"pre"===e,decodeEntities:function(e,t=!1){return yd||(yd=document.createElement("div")),t?(yd.innerHTML=`<div foo="${e.replace(/"/g,"&quot;")}">`,yd.children[0].getAttribute("foo")):(yd.innerHTML=e,yd.textContent)},isBuiltInComponent:e=>uc(e,"Transition")?hd:uc(e,"TransitionGroup")?gd:void 0,getNamespace(e,t){let a=t?t.ns:0;if(t&&2===a)if("annotation-xml"===t.tag){if("svg"===e)return 1;t.props.some((e=>6===e.type&&"encoding"===e.name&&null!=e.value&&("text/html"===e.value.content||"application/xhtml+xml"===e.value.content)))&&(a=0)}else/^m(?:[ions]|text)$/.test(t.tag)&&"mglyph"!==e&&"malignmark"!==e&&(a=0);else t&&1===a&&("foreignObject"!==t.tag&&"desc"!==t.tag&&"title"!==t.tag||(a=0));if(0===a){if("svg"===e)return 1;if("math"===e)return 2}return a},getTextMode({tag:e,ns:t}){if(0===t){if("textarea"===e||"title"===e)return 1;if(wd(e))return 2}return 0}},kd=(e,t)=>{const a=W(e);return nc(JSON.stringify(a),!1,t,3)},$d=D("passive,once,capture"),Sd=D("stop,prevent,self,ctrl,shift,alt,meta,exact,middle"),Nd=D("left,right"),Cd=D("onkeyup,onkeydown,onkeypress",!0),Ed=(e,t)=>cc(e)&&"onclick"===e.content.toLowerCase()?nc(t,!0):4!==e.type?sc(["(",e,`) === "onClick" ? "${t}" : (`,e,")"]):e,Ad=(e,t)=>{1!==e.type||0!==e.tagType||"script"!==e.tag&&"style"!==e.tag||t.removeNode()},Td=[e=>{1===e.type&&e.props.forEach(((t,a)=>{6===t.type&&"style"===t.name&&t.value&&(e.props[a]={type:7,name:"bind",arg:nc("style",!0,t.loc),exp:kd(t.value.content,t.loc),modifiers:[],loc:t.loc})}))}],Od={cloak:()=>({props:[]}),html:(e,t,a)=>{const{exp:l,loc:n}=e;return t.children.length&&(t.children.length=0),{props:[lc(nc("innerHTML",!0,n),l||nc("",!0))]}},text:(e,t,a)=>{const{exp:l,loc:n}=e;return t.children.length&&(t.children.length=0),{props:[lc(nc("textContent",!0),l?cu(l,a)>0?l:ic(a.helperString(Ir),[l],n):nc("",!0))]}},model:(e,t,a)=>{const l=nd(e,t,a);if(!l.props.length||1===t.tagType)return l;const{tag:n}=t,s=a.isCustomElement(n);if("input"===n||"textarea"===n||"select"===n||s){let e=dd,i=!1;if("input"===n||s){const a=xc(t,"type");if(a){if(7===a.type)e=pd;else if(a.value)switch(a.value.content){case"radio":e=cd;break;case"checkbox":e=ud;break;case"file":i=!0}}else(function(e){return e.props.some((e=>!(7!==e.type||"bind"!==e.name||e.arg&&4===e.arg.type&&e.arg.isStatic)))})(t)&&(e=pd)}else"select"===n&&(e=_d);i||(l.needRuntime=a.helper(e))}return l.props=l.props.filter((e=>!(4===e.key.type&&"modelValue"===e.key.content))),l},on:(e,t,a)=>Xu(e,0,a,(t=>{const{modifiers:l}=e;if(!l.length)return t;let{key:n,value:s}=t.props[0];const{keyModifiers:i,nonKeyModifiers:o,eventOptionModifiers:r}=((e,t,a,l)=>{const n=[],s=[],i=[];for(let a=0;a<t.length;a++){const l=t[a];$d(l)?i.push(l):Nd(l)?cc(e)?Cd(e.content)?n.push(l):s.push(l):(n.push(l),s.push(l)):Sd(l)?s.push(l):n.push(l)}return{keyModifiers:n,nonKeyModifiers:s,eventOptionModifiers:i}})(n,l);if(o.includes("right")&&(n=Ed(n,"onContextmenu")),o.includes("middle")&&(n=Ed(n,"onMouseup")),o.length&&(s=ic(a.helper(fd),[s,JSON.stringify(o)])),!i.length||cc(n)&&!Cd(n.content)||(s=ic(a.helper(md),[s,JSON.stringify(i)])),r.length){const e=r.map(Ie).join("");n=cc(n)?nc(`${n.content}${e}`,!0):sc(["(",n,`) + "${e}"`])}return{props:[lc(n,s)]}})),show:(e,t,a)=>({props:[],needRuntime:a.helper(vd)})},Pd=Object.create(null);function Ud(e,t){if(!be(e)){if(!e.nodeType)return se;e=e.innerHTML}const a=e,l=Pd[a];if(l)return l;if("#"===e[0]){const t=document.querySelector(e);e=t?t.innerHTML:""}const{code:n}=function(e,t={}){return rd(e,ue({},xd,t,{nodeTransforms:[Ad,...Td,...t.nodeTransforms||[]],directiveTransforms:ue({},Od,t.directiveTransforms||{}),transformHoist:null}))}(e,ue({hoistStatic:!0,onError:void 0,onWarn:se},t)),s=new Function("Vue",n)(cr);return s._rc=!0,Pd[a]=s}pi(Ud);var Id=Object.freeze({__proto__:null,BaseTransition:ql,Comment:Cs,EffectScope:qe,Fragment:Ss,KeepAlive:en,ReactiveEffect:at,Static:Es,Suspense:kl,Teleport:$s,Text:Ns,Transition:co,TransitionGroup:Eo,VueElement:no,callWithAsyncErrorHandling:Ia,callWithErrorHandling:Ua,camelize:Oe,capitalize:Ie,cloneVNode:Ws,compatUtils:null,compile:Ud,computed:wi,createApp:sr,createBlock:Ls,createCommentVNode:Ys,createElementBlock:Ms,createElementVNode:Vs,createHydrationRenderer:vs,createPropsRestProxy:Ti,createRenderer:ms,createSSRApp:ir,createSlots:Tn,createStaticVNode:Js,createTextVNode:Ks,createVNode:Hs,customRef:$a,defineAsyncComponent:Zl,defineComponent:Jl,defineCustomElement:to,defineEmits:ki,defineExpose:$i,defineProps:xi,defineSSRCustomElement:ao,get devtools(){return nl},effect:nt,effectScope:Be,getCurrentInstance:si,getCurrentScope:He,getTransitionRawChildren:Kl,guardReactiveProps:Gs,h:Pi,handleError:ja,hydrate:nr,initCustomFormatter:ji,initDirectivesForSSR:rr,inject:Tl,isMemoSame:Li,isProxy:oa,isReactive:na,isReadonly:sa,isRef:fa,isRuntimeOnly:fi,isShallow:ia,isVNode:Fs,markRaw:ca,mergeDefaults:Ai,mergeProps:ei,nextTick:Ja,normalizeClass:K,normalizeProps:J,normalizeStyle:V,onActivated:an,onBeforeMount:dn,onBeforeUnmount:mn,onBeforeUpdate:pn,onDeactivated:ln,onErrorCaptured:yn,onMounted:_n,onRenderTracked:bn,onRenderTriggered:gn,onScopeDispose:Ge,onServerPrefetch:hn,onUnmounted:vn,onUpdated:fn,openBlock:Os,popScopeId:fl,provide:Al,proxyRefs:xa,pushScopeId:pl,queuePostFlushCb:Qa,reactive:Qt,readonly:ta,ref:ma,registerRuntimeCompiler:pi,render:lr,renderList:An,renderSlot:On,resolveComponent:kn,resolveDirective:Nn,resolveDynamicComponent:Sn,resolveFilter:null,resolveTransitionHooks:Vl,setBlockTracking:Is,setDevtoolsHook:il,setTransitionHooks:Wl,shallowReactive:ea,shallowReadonly:aa,shallowRef:va,ssrContextKey:Ui,ssrUtils:null,stop:st,toDisplayString:te,toHandlerKey:je,toHandlers:Un,toRaw:ra,toRef:Ca,toRefs:Sa,transformVNodeArgs:Ds,triggerRef:ba,unref:ya,useAttrs:Ci,useCssModule:so,useCssVars:io,useSSRContext:Ii,useSlots:Ni,useTransitionState:Dl,vModelCheckbox:Mo,vModelDynamic:Bo,vModelRadio:Fo,vModelSelect:Ro,vModelText:jo,vShow:Yo,version:Fi,warn:Ta,watch:jl,watchEffect:Ol,watchPostEffect:Pl,watchSyncEffect:Ul,withAsyncContext:Oi,withCtx:vl,withDefaults:Si,withDirectives:wn,withKeys:Jo,withMemo:Mi,withModifiers:Wo,withScopeId:ml});var jd={props:["content"],watch:{content:function(e,t){}},render(){return Pi(this.$props.content)},__file:"http_src/vue/vue_node.vue"};const Md=["id"],Ld=["aria-labelledby"],Fd={class:"dropdown-item"};var Rd={__name:"dropdown",props:{id:String,auto_load:Boolean,button_class:String,button_style:String,f_on_open:Function,f_on_close:Function},emits:[],setup(e,{expose:t,emit:a}){const l=e,n=Ni(),s=ma([]);ma([]);const i=ma([]),o=ma(null),r=ma(null);let c=null;_n((()=>{c=$(o.value).parent().closest("div").css("overflow"),1==l.auto_load&&d();let e={dropdown:o.value,dropdown_button:r.value};$(o.value).on("show.bs.dropdown",(function(){$(o.value).parent().closest("div").css("overflow","visible"),null!=l.f_on_open&&l.f_on_open(e)})),$(o.value).on("hide.bs.dropdown",(function(){$(o.value).parent().closest("div").css("overflow",c),null!=l.f_on_close&&l.f_on_close(e)}))}));const u=wi((()=>null!=l.button_class?l.button_class:"btn-link"));async function d(){if(s.value=[],null==n||null==n.menu)return;let e=n.menu();null!=e&&0!=e.length&&("symbol"==typeof e[0].type&&(e=e[0].children),i.value=[],e.forEach((e=>{let t=e;i.value.push(t)})),await Ja())}return t({load_menu:d}),(t,a)=>(Os(),Ms("div",{class:"dropdown",ref_key:"dropdown",ref:o,style:{display:"inline-block"}},[Vs("button",{class:K(["btn dropdown-toggle",ya(u)]),style:V(e.button_style),type:"button",id:e.id,ref_key:"dropdown_button",ref:r,"aria-expanded":"false","data-bs-toggle":"dropdown"},[On(t.$slots,"title")],14,Md),Vs("ul",{class:"dropdown-menu","aria-labelledby":e.id,style:{"max-height":"25rem",overflow:"auto"}},[Ys(' <slot name="menu"></slot> '),Ys(' <li class="dropdown-item" v-for="(opt, i) in options" :ref="el => { menu[i] = el }"> '),Ys("   asd "),Ys("   </li> "),(Os(!0),Ms(Ss,null,An(i.value,((e,t)=>(Os(),Ms("li",Fd,[Hs(jd,{content:e},null,8,["content"])])))),256))],8,Ld)],512))},__file:"http_src/vue/dropdown.vue"};const Dd=e=>i18n(e);function zd(e){const t={button_list:Bd(!0),button_array:Bd(!1)};return(e,a,l,n)=>{if(null==e.render_v_node_type&&null==e.render_v_func)return null;if(1==n)return!0;if(null!=e.render_v_func)return e.render_v_func(e,a,l,n);return(0,t[e.render_v_node_type])(e,a,l)}}function qd(e){return(e,t,a)=>{if(null!=e.render_v_func)return null;if(1==a)return!0;let l;if(null!=e.data_field&&(l=t[e.data_field]),null!=e.zero_is_null&&null!=l&&0==l&&(l=""),null!=e.render_generic){return R.getFormatGenericField(e.render_generic,e.zero_is_null)(l,"display",t)}if(null!=e.render_func)return e.render_func(l,t);if(null!=e.render_type){if(null!=m.types[e.render_type])return e.render_func=m.getFormatter(e.render_type),e.render_func(l);if(null!=R[e.render_type])return R[e.render_type](l,"display",t,e.zero_is_null);throw`In column ${e.data_field} render_type: ${e.render_type} not found`}return l}}function Bd(e){return(t,a,l)=>{const n=e=>n=>{n.stopPropagation();let s={event_id:e,row:a,col:t};l.emit("custom_event",s)};let s=t.button_def_array.map((t=>{let s={};null!=t.attributes&&(s=t.attributes);let i=b.clone(t.class);null!=t.f_map_class&&(i=t.f_map_class(i,a));let o="";return null!=i&&i.length>0&&(o=i.join(" ")),0==e?l.h("button",{class:`btn btn-sm btn-secondary ${o}`,style:"margin-right:0.2rem;",onClick:n(t.event_id),...s},[l.h("span",{class:t.icon,style:"",title:Dd(t.title_i18n)})]):l.h("a",{class:`${o} btn-sm`,onClick:n(t.event_id),style:"display:block;",...s},[l.h("span",{class:t.icon,style:"margin-right:0.2rem;cursor:pointer;"}),Dd(t.title_i18n)])}));if(1==e){let e=l.h("span",{class:"fas fa-sm fa-align-justify"});return l.h(Rd,{auto_load:!0,button_style:"",button_class:"btn-secondary btn-sm"},{title:()=>e,menu:()=>s})}return l.h("div",{class:"button-group"},s)}}function Vd(e,t,a){let l=Gd(e);return async(n,s,i,o,r)=>{let c=i.find((e=>0!=e.sort)),u=i.filter((e=>1==e.visible)).map((e=>l(e))).join(","),d={start:n*s,length:s,map_search:o,visible_columns:u};if(null!=c&&(d.sort=l(c.data),d.order=1==c.sort?"asc":"desc"),null!=t){let e=t();d={...d,...e}}const _=x.obj_to_url_params(d),p=`${http_prefix}/${e.data_url}?${_}`;let f=await b.http_request(p,null,null,!0);null!=a&&a(d);let m=f.rsp;null!=e.rsp_records_field&&(m=f.rsp[e.rsp_records_field]);let v=f.query_info;return null!=e.rsp_query_info_field&&(v=f.rsp[e.rsp_query_info_field]),f.recordsFiltered>f.recordsTotal&&(f.recordsTotal=f.recordsFiltered),{total_rows:f.recordsTotal,rows:m,query_info:v}}}function Hd(e){return e=>null!=e.title_i18n?Dd(e.title_i18n):null!=e.title?e.title:""}function Gd(e){return t=>null!=t.id?t.id:null!=t.data_field?t.data_field:e.columns.findIndex((e=>e==t))}const Wd={get_columns_from_datatable_columns:function(e,t){let a=t.map(((t,a)=>{t.data,e[a],null==t.orderable||t.orderable,null!=t.className&&t.className.split(" "),null!=t.render&&(t.render_func=(e,a)=>t.render(e,"display",a))}));return a},build_table:async function(e,t,a,l,n){let s=`${e}/tables_config/${t}.json?epoch_end=${Number.parseInt(Date.now()/1e3)}`,i=await b.http_request(s,null,null,!0);return null==i?{id:t,columns:[]}:(null!=a&&(i.columns=await a(i.columns)),{id:t,columns:i.columns,get_rows:Vd(i,l,n),get_column_id:Gd(i),print_column_name:Hd(),print_html_row:qd(),print_vue_node_row:zd(),f_is_column_sortable:e=>e.sortable,f_get_column_classes:e=>{let t=e?.class;if(null!=t)return t;return[]},f_get_column_style:e=>{let t=e?.style;if(null!=t)return t;return""},display_empty_rows:i.display_empty_rows,enable_search:i.enable_search,default_sort:i.default_sort,show_autorefresh:i.show_autorefresh,paging:i.paging})}};let Kd={};async function Jd(e){return null==Kd[e]&&(Kd[e]=ntopng_utility.http_request(e)),await Kd[e]}const Yd=async function(e){e.filter((e=>null==e.label)).forEach((e=>{console.error(`label not defined for filter ${JSON.stringify(e)}`),e.label=""})),e.sort(((e,t)=>e.label.localeCompare(t.label))),i18n_ext.tags={},TAG_OPERATORS={},DEFINED_TAGS={},e.forEach((e=>{i18n_ext.tags[e.id]=e.label,e.operators.forEach((e=>TAG_OPERATORS[e.id]=e.label)),DEFINED_TAGS[e.id]=e.operators.map((e=>e.id))}));let t=ntopng_url_manager.get_url_entries(),a=[];for(const[e,l]of t){let t=FILTERS_CONST.find((t=>t.id==e));if(null!=t){l.split(",").forEach((e=>{let[l,n]=e.split(";");if(null==n||null==l||""==n||null!=t.options&&null==t.options.find((e=>e.value==l)))return;let s=l;"array"==t.value_type&&(s=t?.options?.find((e=>e.value==l))?.label),a.push({id:t.id,operator:n,value:l,label:t.label,value_label:s})}))}}return a};function Zd(e){let t={};e.forEach((e=>{let a=t[e.id];null==a&&(a=[],t[e.id]=a),a.push(e)}));let a={};for(let e in t){let l=t[e].filter((e=>null!=e.value&&null!=e.operator&&""!=e.operator)).map((e=>`${e.value};${e.operator}`)).join(",");a[e]=l}return a}const Xd={get_filter_const:Jd,get_filters_object:Zd,load_filters_data:Yd,tag_operator_label_dict:{eq:"=",neq:"!=",lt:"<",gt:">",gte:">=",lte:"<=",in:"contains",nin:"does not contain"}},Qd=["multiple"],e_=["selected","value","disabled"],t_=["label"],a_=["selected","value","disabled"];var l_={__name:"select-search",props:{id:String,options:Array,selected_option:Object,selected_options:Array,multiple:Boolean,add_tag:Boolean,disable_change:Boolean,theme:String,dropdown_size:String},emits:["update:selected_option","update:selected_options","select_option","unselect_option","change_selected_options"],setup(e,{expose:t,emit:a}){const l=e,n=ma(null),s=ma([]),i=ma([]),o=ma({}),r=ma([]),c=ma(0);let u=!0;function d(){!function(){if(s.value=[],i.value=[],null==l.options)return;let e={};l.options.forEach((t=>{let a={...t};null==a.value&&(a.value=a.label),null==t.group?s.value.push(a):(null==e[t.group]&&(e[t.group]={group:a.group,options:[]}),e[t.group].options.push(a))})),i.value=ntopng_utility.object_to_array(e),c.value+=1}(),v(),m()}_n((()=>{l.options&&(l.disable_change&&u||d())})),jl((()=>l.selected_option),((e,t)=>{v(e),p()}),{flush:"pre"}),jl((()=>l.selected_options),((e,t)=>{m(),p()}),{flush:"pre"}),jl([c],((e,t)=>{_()}),{flush:"post"}),jl((()=>l.options),((e,t)=>{1!=l.disable_change&&null!=e&&d()}),{flush:"pre"});const _=()=>{let e=n.value;0==u&&w(),$(e).hasClass("select2-hidden-accessible")||($(e).select2({width:"100%",theme:l.theme?l.theme:"bootstrap-5",dropdownParent:$(e).parent(),dropdownAutoWidth:!0,tags:l.add_tag&&!l.multiple,selectionCssClass:"small"==l.dropdown_size?"select2--small":"",dropdownCssClass:"small"==l.dropdown_size?"select2--small":""}),$(e).on("select2:select",(function(e){let t=e.params.data;if(null===t.element){let e={label:t.text,value:t.id};return a("update:selected_option",e),void a("select_option",e)}let n=t.element._value,s=y(n);if(n!==l.selected_option&&(a("update:selected_option",s),a("select_option",s)),!l.multiple)return;r.value=r.value.filter((e=>e!=n)),r.value.push(n);let i=b(r.value);a("update:selected_options",i),a("change_selected_options",i)})),$(e).on("select2:unselect",(function(e){let t=e.params.data.element._value;if(!l.multiple)return;r.value=r.value.filter((e=>e!=t));let n=y(t),s=b(r.value);a("unselect_option",n),a("update:selected_options",s),a("change_selected_options",s)}))),u=!1,p()};function p(){let e=n.value;if(l.multiple)$(e).val(r.value),$(e).trigger("change");else{let t=g(l.selected_option);$(e).val(t),$(e).trigger("change")}}function f(e){if(!l.multiple){const t=0==o.value.value||"0"==o.value.value;return e.value==o.value.value||t&&e.label==o.value.label}return null!=r.value.find((t=>t==e.value))||e.selected}function m(){null!=l.selected_options&&l.multiple&&(r.value=[],l.selected_options.forEach((e=>{let t=e.value||e.label;r.value.push(t)})))}function v(e){null!=e||l.multiple||(e=h()),o.value=e}function h(){return null==l.selected_option?l.options[0]:l.selected_option}function g(e){let t;return null==e&&(e=h()),t=null!=e.value?e.value:e.label,t}function b(e){let t=e.map((e=>y(e)));return t}function y(e){let t=function(e){null==e&&(e=g());let t=s.value.find((t=>t.value===e));if(null!=t)return t;for(let a=0;a<i.value.length;a+=1){if(t=i.value[a].options.find((t=>t.value===e)),null!=t)return t}return null}(e),a=l.options.find((e=>e.value===t.value));return a}function w(){try{$(n.value).select2("destroy"),$(n.value).off("select2:select")}catch(e){console.error("Destroy select-search catch error:"),console.error(e)}}return t({render:_}),mn((()=>{w()})),(t,a)=>(Os(),Ms("select",{class:"select2 form-select",ref_key:"select2",ref:n,required:"",name:"filter_type",multiple:e.multiple},[(Os(!0),Ms(Ss,null,An(s.value,((e,t)=>(Os(),Ms("option",{class:"no-wrap p-0",selected:f(e),value:e.value,disabled:e.disabled},te(e.label),9,e_)))),256)),(Os(!0),Ms(Ss,null,An(i.value,((e,t)=>(Os(),Ms("optgroup",{label:e.group},[(Os(!0),Ms(Ss,null,An(e.options,((e,t)=>(Os(),Ms("option",{selected:f(e),value:e.value,disabled:e.disabled},te(e.label),9,a_)))),256))],8,t_)))),256))],8,Qd))},__file:"http_src/vue/select-search.vue"},n_=Jl({components:{},props:{id:String,main_title:Object,secondary_title_list:Array,help_link:String,items_table:Array},emits:["click_item"],created(){},data:()=>({}),mounted(){ntopng_sync.ready(this.$props.id)},methods:{}});const s_={class:"navbar navbar-shadow navbar-expand-lg navbar-light bg-light px-2 mb-2"},i_={class:"me-1 text-nowrap",style:{"font-size":"1.1rem"}},o_=["href","title"],r_=["title"],c_=["href","title"],u_=["title"],d_=Vs("span",{class:"text-muted ms-1 d-none d-lg-inline d-md-none"},"|",-1),__=Vs("button",{class:"navbar-toggler",type:"button"},[Vs("span",{class:"navbar-toggler-icon"})],-1),p_={class:"collapse navbar-collapse scroll-x",id:"navbarNav"},f_={class:"navbar-nav"},m_=["onClick"],v_={key:0,class:"badge rounded-pill bg-dark",style:{float:"right","margin-bottom":"-10px"}},h_=["onClick"],g_={key:0,class:"badge rounded-pill bg-dark",style:{float:"right","margin-bottom":"-10px"}},b_=["onClick"],y_={key:0,class:"badge rounded-pill bg-dark",style:{float:"right","margin-bottom":"-10px"}},w_={class:"navbar-nav ms-auto"},x_=Vs("a",{href:"javascript:history.back()",class:"nav-item nav-link text-muted"},[Vs("i",{class:"fas fa-arrow-left"})],-1),k_=["href"],$_=[Vs("i",{class:"fas fa-question-circle"},null,-1)];n_.render=function(e,t,a,l,n,s){return Os(),Ms("nav",s_,[Vs("span",i_,[Vs("i",{class:K(e.main_title.icon)},null,2),e.main_title.href?(Os(),Ms("a",{key:0,href:e.main_title.href,title:e.main_title.title},te(e.main_title.label),9,o_)):(Os(),Ms("span",{key:1,title:e.main_title.title},te(e.main_title.label),9,r_)),(Os(!0),Ms(Ss,null,An(e.secondary_title_list,(e=>(Os(),Ms(Ss,null,[Ks(" / "),e.href?(Os(),Ms("a",{key:0,class:K(e.class),href:e.href,title:e.title},[Ks(te(e.label)+" ",1),e.icon?(Os(),Ms("i",{key:0,class:K(e.icon)},null,2)):Ys("v-if",!0)],10,c_)):(Os(),Ms("span",{key:1,title:e.title},te(e.label),9,u_))],64)))),256))]),d_,__,Vs("div",p_,[Vs("ul",f_,[(Os(!0),Ms(Ss,null,An(e.items_table,(e=>(Os(),Ms(Ss,null,[e.active?(Os(),Ms(Ss,{key:0},[e.active?(Os(),Ms("li",{key:0,onClick:t=>this.$emit("click_item",e),class:K(["nav-item nav-link active",e.class])},[e.badge_num>0?(Os(),Ms("span",v_,te(e.badge_num),1)):Ys("v-if",!0),Vs("b",null,[Vs("i",{class:K(e.icon)},null,2),Ks(" "+te(e.label),1)])],10,m_)):(Os(),Ms("li",{key:1,onClick:t=>this.$emit("click_item",e),class:K(["nav-item nav-link",e.class])},[e.badge_num>0?(Os(),Ms("span",g_,te(e.badge_num),1)):Ys("v-if",!0),Vs("b",null,[Vs("i",{class:K(e.icon)},null,2),Ks(" "+te(e.label),1)])],10,h_))],64)):(Os(),Ms("a",{key:1,onClick:t=>this.$emit("click_item",e),href:"#",class:K(["nav-item nav-link",e.class])},[e.badge_num>0?(Os(),Ms("span",y_,te(e.badge_num),1)):Ys("v-if",!0),Vs("i",{class:K(e.icon)},null,2),Ks(" "+te(e.label),1)],10,b_))],64)))),256))]),Vs("ul",w_,[x_,Vs("a",{target:"_newtab",href:e.help_link,class:"nav-item nav-link text-muted"},$_,8,k_)])])])},n_.__file="http_src/vue/page-navbar.vue";var S_=Jl({components:{},props:{id:String,global:Boolean,no_close_button:Boolean},emits:[],created(){},data:()=>({show_alert:!1,i18n:e=>i18n(e),body:"",alert_type:"alert-success"}),mounted(){1==this.global&&ntopng_events_manager.on_custom_event(this.$props.id,ntopng_custom_events.SHOW_GLOBAL_ALERT_INFO,(e=>{null!=e.type&&(this.alert_type=e.type),null!=e.timeout&&setTimeout((()=>{this.close()}),1e3*e.timeout),this.show(e.text_html)}))},methods:{close:function(){this.show_alert=!1},show:function(e,t){this.show_alert=!0,this.body=e,null!=t&&(this.alert_type=t)}}});const N_=["innerHTML"];S_.render=function(e,t,a,l,n,s){return 1==e.show_alert?(Os(),Ms("div",{key:0,style:{width:"100%"},class:K(["alert alert-dismissable",e.alert_type])},[Vs("span",{innerHTML:e.body},null,8,N_),e.no_close_button?Ys("v-if",!0):(Os(),Ms("button",{key:0,type:"button",onClick:t[0]||(t[0]=(...t)=>e.close&&e.close(...t)),class:"btn-close","aria-label":"Close"}))],2)):Ys("v-if",!0)},S_.__file="http_src/vue/alert-info.vue";var C_={components:{},props:{id:String,chart_type:String,register_on_status_change:Boolean,not_emit_global_status_update:Boolean,base_url_request:String,get_params_url_request:Function,get_custom_chart_options:Function,map_chart_options:Function,min_time_interval_id:String,round_time:Boolean},emits:["apply","hidden","showed","chart_reloaded","zoom"],created(){},beforeUnmount(){this.chart.destroyChart()},data:()=>({chart:null,chart_options:null,from_zoom:!1}),async mounted(){await this.init(),ntopng_sync.ready(this.$props.id)},methods:{init:async function(){let e=ntopng_status_manager.get_status(),t=this.get_url_request(e);this.register_on_status_change&&this.register_status(e),await this.draw_chart(t)},get_data_uri:async function(e){if(null==this.chart)return null;return await this.chart.to_data_uri()},download_chart_png:async function(e,t){if(null==this.chart)return;let a=await this.chart.to_data_uri();downloadURI(a,e)},register_status:function(e){let t=this.get_url_request(e);ntopng_status_manager.on_status_change(this.id,(e=>{1==this.from_zoom&&(this.from_zoom=!1);let a=this.get_url_request(e);a!=t?(t=a,this.update_chart(a)):t=a}),!1)},get_url_request:function(e){let t;return null!=this.get_params_url_request?(null==e&&(e=ntopng_status_manager.get_status()),t=this.get_params_url_request(e)):t=x.get_url_params(),`${this.base_url_request}?${t}`},draw_chart:async function(e){let t=ntopChartApex,a=this.chart_type;null==a&&(a=t.typeChart.TS_STACKED),this.chart=t.newChart(a);let l=this;this.chart.registerEvent("beforeZoom",(function(e,t){l.on_before_zoom(e,t)})),this.chart.registerEvent("zoomed",(function(e,t){l.on_zoomed(e,t)}));let n=await this.get_chart_options(e);this.chart.drawChart(this.$refs.chart,n)},update_chart:async function(e){null==e&&(e=this.get_url_request());let t=await this.get_chart_options(e);this.chart.updateChart(t)},update_chart_options:function(e){this.chart.updateChart(e)},update_chart_series:function(e){null!=e&&this.chart.updateSeries(e)},get_chart_options:async function(e){let t;return t=null==this.get_custom_chart_options?await b.http_request(e):await this.get_custom_chart_options(e),null!=this.map_chart_options&&(t=this.map_chart_options(t)),this.$emit("chart_reloaded",t),t},on_before_zoom:function(e,{xaxis:t,yaxis:a}){let l=this.get_epoch_from_xaxis_event(t);if(null!=this.min_time_interval_id){const e=b.get_timeframe_from_timeframe_id(this.min_time_interval_id);l.epoch_end-l.epoch_begin<e&&(l.epoch_end=l.epoch_end+e,l.epoch_end=l.epoch_end-l.epoch_end%e,l.epoch_begin=l.epoch_end-e),1==this.round_time&&(l.epoch_begin=b.round_time_by_timeframe_id(l.epoch_begin,this.min_time_interval_id),l.epoch_end=b.round_time_by_timeframe_id(l.epoch_end,this.min_time_interval_id)),t.min=1e3*l.epoch_begin,t.max=1e3*l.epoch_end}return t},on_zoomed:function(e,{xaxis:t,yaxis:a}){this.from_zoom=!0;const l=this.get_epoch_from_xaxis_event(t);this.not_emit_global_status_update||C.emit_event(ntopng_events.EPOCH_CHANGE,l,this.id),this.$emit("zoom",l)},get_epoch_from_xaxis_event:function(e){const t=moment(e.min),a=moment(e.max);return{epoch_begin:Number.parseInt(t.unix()),epoch_end:Number.parseInt(a.unix())}}}};const E_={style:{width:"100%"},ref:"chart"};C_.render=function(e,t,a,l,n,s){return Os(),Ms("div",E_,null,512)},C_.__file="http_src/vue/chart.vue";var A_={components:{"select-search":l_},props:{id:String,enable_refresh:Boolean,disabled_date_picker:Boolean,min_time_interval_id:String,round_time:Boolean,custom_time_interval_list:Array},computed:{invalid_date_message:function(){if(this.wrong_date)return this.i18n("wrong_date_range");if(this.wrong_min_interval){let e=this.i18n("wrong_min_interval");return e.replace("%time_interval",this.i18n(`show_alerts.presets.${this.min_time_interval_id}`)),e}}},watch:{enable_refresh:function(e,t){1==e?this.start_refresh():null!=this.refresh_interval&&(clearInterval(this.refresh_interval),this.refresh_interval=null)},min_time_interval_id:function(){},round_time:function(){}},emits:["epoch_change"],created(){},beforeMount(){if(null!=this.$props.custom_time_interval_list&&(this.time_preset_list=this.$props.custom_time_interval_list),null==this.min_time_interval_id)return void(this.time_preset_list_filtered=this.time_preset_list);const e=this.get_timeframes_available(),t=e[this.min_time_interval_id];this.time_preset_list_filtered=this.time_preset_list.filter((a=>"custom"==a.value||(null==t||e[a.value]>=t)))},mounted(){let e=x.get_url_entry("epoch_begin"),t=x.get_url_entry("epoch_end");null!=e&&null!=t&&this.emit_epoch_change({epoch_begin:Number.parseInt(e),epoch_end:Number.parseInt(t)},this.$props.id,!0);let a=this,l=(e,t)=>flatpickr($(this.$refs[e]),{enableTime:!0,dateFormat:"d/m/Y H:i",time_24hr:!0,clickOpens:!0,onChange:function(e,t,l){a.enable_apply=!0,a.wrong_date=a.flat_begin_date.selectedDates[0].getTime()>a.flat_end_date.selectedDates[0].getTime(),a.wrong_min_interval=a.min_time_interval_id&&a.get_utc_seconds(a.flat_end_date.selectedDates[0].getTime()-a.flat_begin_date.selectedDates[0].getTime()<b.get_timeframe_from_timeframe_id(a.min_time_interval_id))}});this.flat_begin_date=l("begin-date"),this.flat_end_date=l("end-date"),C.on_event_change(this.$props.id,ntopng_events.EPOCH_CHANGE,(e=>this.on_status_updated(e)),!0),ntopng_sync.ready(this.$props.id),this.enable_refresh&&this.start_refresh()},methods:{start_refresh:function(){this.refresh_interval=setInterval((()=>{let e=this.selected_time_option?.value;this.enable_refresh&&null!=e&&"custom"!=e&&(this.update_from_interval=!0,this.change_select_time(!0))}),1e3*this.refresh_interval_seconds)},utc_s_to_server_date:function(e){let t=1e3*e,a=new Date(t).getTimezoneOffset(),l=moment.tz(t,ntop_zoneinfo)._offset;return new Date(t+1e3*(l+a)*60)},server_date_to_date:function(e,t){let a=e.getTime(),l=e.getTimezoneOffset(),n=moment.tz(a,ntop_zoneinfo)._offset;return new Date(a-1e3*(n+l)*60)},on_status_updated:function(e){let t=Date.now(),a=t-18e5;null!=e.epoch_end&&null!=e.epoch_begin&&Number.parseInt(e.epoch_end)>Number.parseInt(e.epoch_begin)?(e.epoch_begin=Number.parseInt(e.epoch_begin),e.epoch_end=Number.parseInt(e.epoch_end),t=1e3*e.epoch_end,a=1e3*e.epoch_begin):(e.epoch_end=this.get_utc_seconds(t),e.epoch_begin=this.get_utc_seconds(a),x.add_obj_to_url(e),this.emit_epoch_change(e,this.$props.id)),this.flat_begin_date.setDate(this.utc_s_to_server_date(e.epoch_begin)),this.flat_end_date.setDate(this.utc_s_to_server_date(e.epoch_end)),this.set_select_time_value(a,t),this.epoch_status={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end},0==this.update_from_interval&&this.add_status_in_history(this.epoch_status),this.enable_apply=!1,this.update_from_interval=!1,x.add_obj_to_url(this.epoch_status)},set_select_time_value:function(e,t){const a=this.get_timeframes_available();let l=this.get_utc_seconds(Date.now());1==this.round_time&&null!=this.min_time_interval_id&&(l=this.round_time_by_min_interval(l));const n=this.get_utc_seconds(t),s=this.get_utc_seconds(e);if(this.is_between(n,l,60)){this.select_time_value=null;for(let e in a)this.is_between(s,l-a[e],60)&&(this.select_time_value=e);null==this.select_time_value&&(this.select_time_value="custom")}else this.select_time_value="custom";this.time_preset_list_filtered.forEach((e=>{e.currently_active=!1,e.value==this.select_time_value&&(this.selected_time_option=e,e.currently_active=!0)}))},apply:function(){let e=this.get_utc_seconds(Date.now()),t=this.server_date_to_date(this.flat_begin_date.selectedDates[0]),a=this.get_utc_seconds(t.getTime()),l=this.server_date_to_date(this.flat_end_date.selectedDates[0]),n=this.get_utc_seconds(l.getTime());n>e&&(n=e);let s={epoch_begin:a,epoch_end:n};this.emit_epoch_change(s)},change_select_time:function(e){let t=this.get_timeframes_available()[this.selected_time_option.value],a=this.get_utc_seconds(Date.now()),l={epoch_begin:a-t,epoch_end:a,refresh_data:e};this.emit_epoch_change(l)},get_timeframes_available:function(){const e=b.get_timeframes_dict(),t=this.time_preset_list.map((e=>e.value));let a={};return t.forEach((t=>{a[t]=e[t]})),a},get_utc_seconds:function(e){return b.get_utc_seconds(e)},is_between:function(e,t,a){return e>=t-a&&e<=t},zoom:function(e){if(null==this.epoch_status)return;let t=(this.epoch_status.epoch_end-this.epoch_status.epoch_begin)/e,a=this.epoch_status.epoch_end/2+this.epoch_status.epoch_begin/2;this.epoch_status.epoch_begin=a-t/2,this.epoch_status.epoch_end=a+t/2;let l=this.get_utc_seconds(Date.now());this.epoch_status.epoch_end>l&&(this.epoch_status.epoch_end=l),this.epoch_status.epoch_end=Number.parseInt(this.epoch_status.epoch_end),this.epoch_status.epoch_begin=Number.parseInt(this.epoch_status.epoch_begin),this.epoch_status.epoch_begin==this.epoch_status.epoch_end&&(this.epoch_status.epoch_begin-=2),this.emit_epoch_change(this.epoch_status)},jump_time_back:function(){if(null==this.epoch_status)return;this.epoch_status.epoch_begin-=1800,this.epoch_status.epoch_end-=1800,this.emit_epoch_change(this.epoch_status)},jump_time_ahead:function(){if(null==this.epoch_status)return;let e=this.epoch_status.epoch_end,t=this.get_utc_seconds(Date.now());this.epoch_status.epoch_end+=1800,this.epoch_status.epoch_end>t&&(this.epoch_status.epoch_end=t),this.epoch_status.epoch_begin+=this.epoch_status.epoch_end-e,this.emit_epoch_change(this.epoch_status)},emit_epoch_change:function(e,t,a){null!=e.epoch_end&&null!=e.epoch_begin&&(this.wrong_date=!1,e.epoch_begin>e.epoch_end?this.wrong_date=!0:(this.min_time_interval_id&&1==this.round_time&&(e.epoch_begin=this.round_time_by_min_interval(e.epoch_begin),e.epoch_end=this.round_time_by_min_interval(e.epoch_end)),t!=this.id&&this.on_status_updated(e),C.emit_event(ntopng_events.EPOCH_CHANGE,e,this.id),a||this.$emit("epoch_change",e)))},round_time_by_min_interval:function(e){return b.round_time_by_timeframe_id(e,this.min_time_interval_id)},add_status_in_history:function(e){this.history_last_status=this.history[this.history.length-1],this.history.length>5&&this.history.shift(),this.history.push(e)},apply_status_by_history:function(){null!=this.history_last_status&&(this.history.pop(),this.history.pop(),this.emit_epoch_change(this.history_last_status))}},data:()=>({i18n:e=>i18n(e),epoch_status:null,refresh_interval:null,refresh_interval_seconds:60,update_from_interval:!1,history:[],history_last_status:null,enable_apply:!1,select_time_value:"5_min",selected_time_option:{value:"5_min",label:i18n("show_alerts.presets.5_min"),currently_active:!1},wrong_date:!1,wrong_min_interval:!1,flat_begin_date:null,flat_end_date:null,time_preset_list:[{value:"5_min",label:i18n("show_alerts.presets.5_min"),currently_active:!1},{value:"10_min",label:i18n("show_alerts.presets.10_min"),currently_active:!1},{value:"30_min",label:i18n("show_alerts.presets.30_min"),currently_active:!0},{value:"hour",label:i18n("show_alerts.presets.hour"),currently_active:!1},{value:"2_hours",label:i18n("show_alerts.presets.2_hours"),currently_active:!1},{value:"6_hours",label:i18n("show_alerts.presets.6_hours"),currently_active:!1},{value:"12_hours",label:i18n("show_alerts.presets.12_hours"),currently_active:!1},{value:"day",label:i18n("show_alerts.presets.day"),currently_active:!1},{value:"week",label:i18n("show_alerts.presets.week"),currently_active:!1},{value:"month",label:i18n("show_alerts.presets.month"),currently_active:!1},{value:"year",label:i18n("show_alerts.presets.year"),currently_active:!1},{value:"custom",label:i18n("show_alerts.presets.custom"),currently_active:!1,disabled:!0}],time_preset_list_filtered:[]})};const T_=e=>(pl("data-v-6ae24a28"),e=e(),fl(),e),O_={class:"input-group"},P_={class:"form-group"},U_={class:"controls"},I_={class:"btn-group me-auto btn-group-sm flex-wrap d-flex"},j_={class:"btn-group ms-2"},M_=T_((()=>Vs("span",{class:"input-group-text"},[Vs("i",{class:"fas fa-calendar-alt"})],-1))),L_=["disabled"],F_=T_((()=>Vs("span",{class:"input-group-text"},[Vs("i",{class:"fas fa-long-arrow-alt-right"})],-1))),R_=["disabled"],D_=["title"],z_=[T_((()=>Vs("i",{class:"fas fa-exclamation-circle"},null,-1)))],q_={class:"d-flex align-items-center ms-2"},B_=["disabled"],V_={class:"btn-group"},H_=["disabled","title"],G_=[T_((()=>Vs("i",{class:"fas fa-long-arrow-alt-left"},null,-1)))],W_=["disabled","title"],K_=[T_((()=>Vs("i",{class:"fas fa-long-arrow-alt-right"},null,-1)))],J_=["disabled","title"],Y_=[T_((()=>Vs("i",{class:"fas fa-search-plus"},null,-1)))],Z_=["disabled","title"],X_=[T_((()=>Vs("i",{class:"fas fa-search-minus"},null,-1)))],Q_=["disabled","title"],ep=[T_((()=>Vs("i",{class:"fas fa-undo"},null,-1)))],tp=["disabled","title"],ap=[T_((()=>Vs("i",{class:"fas fa-sync"},null,-1)))];function lp(e,t){void 0===t&&(t={});var a=t.insertAt;if(e&&"undefined"!=typeof document){var l=document.head||document.getElementsByTagName("head")[0],n=document.createElement("style");n.type="text/css","top"===a&&l.firstChild?l.insertBefore(n,l.firstChild):l.appendChild(n),n.styleSheet?n.styleSheet.cssText=e:n.appendChild(document.createTextNode(e))}}lp("\n.date_time_input[data-v-6ae24a28] {\n    width: 10.5rem;\n    max-width: 10.5rem;\n    min-width: 10.5rem;\n}\n"),A_.render=function(e,t,a,l,n,s){const i=kn("select-search");return Os(),Ms("div",O_,[Vs("div",P_,[Vs("div",U_,[Vs("div",I_,[On(e.$slots,"begin"),Vs("div",null,[Hs(i,{disabled:a.disabled_date_picker,selected_option:n.selected_time_option,"onUpdate:selected_option":t[0]||(t[0]=e=>n.selected_time_option=e),id:"time_preset_range_picker",options:n.time_preset_list_filtered,onSelect_option:t[1]||(t[1]=e=>s.change_select_time(null))},null,8,["disabled","selected_option","options"])]),Vs("div",j_,[M_,Vs("input",{disabled:a.disabled_date_picker,class:"flatpickr flatpickr-input form-control",type:"text",placeholder:"Choose a date..","data-id":"datetime",ref:"begin-date",style:{width:"10rem"}},null,8,L_),Ys(' <input ref="begin-date" @change="enable_apply=true" @change="change_begin_date" type="date" class="date_time_input begin-timepicker form-control border-right-0 fix-safari-input"> '),Ys(' <input ref="begin-time" @change="enable_apply=true" type="time" class="date_time_input begin-timepicker form-control border-right-0 fix-safari-input"> '),F_,Vs("input",{disabled:a.disabled_date_picker,class:"flatpickr flatpickr-input form-control",type:"text",placeholder:"Choose a date..","data-id":"datetime",ref:"end-date",style:{width:"10rem"}},null,8,R_),Ys(' <input ref="end-date" @change="enable_apply=true" type="date" class="date_time_input end-timepicker form-control border-left-0 fix-safari-input" style="width: 2.5rem;"> '),Ys(' <input ref="end-time" @change="enable_apply=true" type="time" class="date_time_input end-timepicker form-control border-left-0 fix-safari-input"> '),wn(Vs("span",{title:s.invalid_date_message,style:{"margin-left":"0.2rem",color:"red"}},z_,8,D_),[[Yo,n.wrong_date||n.wrong_min_interval]])]),Vs("div",q_,[Vs("button",{disabled:!n.enable_apply||n.wrong_date||n.wrong_min_interval,onClick:t[2]||(t[2]=(...e)=>s.apply&&s.apply(...e)),type:"button",class:"btn btn-sm btn-primary"},te(n.i18n("apply")),9,B_),Vs("div",V_,[Vs("button",{disabled:a.disabled_date_picker,onClick:t[3]||(t[3]=e=>s.jump_time_back()),type:"button",class:"btn btn-sm btn-link",ref:"btn-jump-time-back",title:n.i18n("date_time_range_picker.btn_move_left")},G_,8,H_),Vs("button",{disabled:a.disabled_date_picker,onClick:t[4]||(t[4]=e=>s.jump_time_ahead()),type:"button",class:"btn btn-sm btn-link me-2",ref:"btn-jump-time-ahead",title:n.i18n("date_time_range_picker.btn_move_right")},K_,8,W_),Vs("button",{disabled:a.disabled_date_picker,onClick:t[5]||(t[5]=e=>s.zoom(2)),type:"button",class:"btn btn-sm btn-link",ref:"btn-zoom-in",title:n.i18n("date_time_range_picker.btn_zoom_in")},Y_,8,J_),Vs("button",{disabled:a.disabled_date_picker,onClick:t[6]||(t[6]=e=>s.zoom(.5)),type:"button",class:"btn btn-sm btn-link",ref:"btn-zoom-out",title:n.i18n("date_time_range_picker.btn_zoom_out")},X_,8,Z_),Vs("button",{disabled:null==n.history_last_status||a.disabled_date_picker,type:"button",onClick:t[7]||(t[7]=e=>s.apply_status_by_history()),class:"btn btn-sm btn-link",title:n.i18n("date_time_range_picker.btn_undo")},ep,8,Q_),Vs("button",{disabled:"custom"==n.select_time_value||a.disabled_date_picker,onClick:t[8]||(t[8]=e=>s.change_select_time()),type:"button",class:"btn btn-sm btn-link",title:n.i18n("date_time_range_picker.btn_refresh")},ap,8,tp),On(e.$slots,"extra_buttons")])])])])])])},A_.__scopeId="data-v-6ae24a28",A_.__file="http_src/vue/date-time-range-picker.vue";var np=Jl({components:{},props:{id:String},emits:["hidden","showed","closeModal","openModal"],created(){},data:()=>({}),mounted(){let e=this;$(this.$refs.modal_id).on("shown.bs.modal",(function(t){e.$emit("showed")})),$(this.$refs.modal_id).on("hidden.bs.modal",(function(t){e.$emit("hidden")})),ntopng_sync.ready(this.$props.id)},methods:{show:function(){$(this.$refs.modal_id).modal("show"),this.$emit("openModal")},preventEnter:function(){},close:function(){$(this.$refs.modal_id).modal("hide"),this.$emit("closeModal")}}});const sp={class:"modal-dialog modal-dialog-centered modal-lg",role:"document"},ip={class:"modal-content"},op={class:"modal-header"},rp={class:"modal-title"},cp=Vs("div",{class:"modal-close"},[Vs("button",{type:"button",class:"btn-close","data-bs-dismiss":"modal","aria-label":"Close"})],-1),up={class:"modal-body"},dp={class:"modal-footer"},_p=Vs("div",{class:"mr-auto"},null,-1),pp=Vs("div",{class:"alert alert-info test-feedback w-100",style:{display:"none"}},null,-1);np.render=function(e,t,a,l,n,s){return Os(),Ms("div",{onSubmit:t[0]||(t[0]=Wo(((...t)=>e.preventEnter&&e.preventEnter(...t)),["prevent"])),class:"modal fade",ref:"modal_id",tabindex:"-1",role:"dialog","aria-labelledby":"dt-add-filter-modal-title","aria-hidden":"true"},[Vs("div",sp,[Vs("div",ip,[Vs("div",op,[Vs("h5",rp,[On(e.$slots,"title")]),cp]),Vs("div",up,[On(e.$slots,"body")]),Vs("div",dp,[_p,On(e.$slots,"footer"),pp])])])],544)},np.__file="http_src/vue/modal.vue";const fp={ipv4:String.raw`^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$`,ipv6:String.raw`^(?:(?:[a-fA-F\d]{1,4}:){7}(?:[a-fA-F\d]{1,4}|:)|(?:[a-fA-F\d]{1,4}:){6}(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|:[a-fA-F\d]{1,4}|:)|(?:[a-fA-F\d]{1,4}:){5}(?::(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,2}|:)|(?:[a-fA-F\d]{1,4}:){4}(?:(?::[a-fA-F\d]{1,4}){0,1}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,3}|:)|(?:[a-fA-F\d]{1,4}:){3}(?:(?::[a-fA-F\d]{1,4}){0,2}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,4}|:)|(?:[a-fA-F\d]{1,4}:){2}(?:(?::[a-fA-F\d]{1,4}){0,3}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,5}|:)|(?:[a-fA-F\d]{1,4}:){1}(?:(?::[a-fA-F\d]{1,4}){0,4}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,6}|:)|(?::(?:(?::[a-fA-F\d]{1,4}){0,5}:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)(?:\\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]\d|\d)){3}|(?::[a-fA-F\d]{1,4}){1,7}|:)))(?:%[0-9a-zA-Z]{1,})?$`,mac_address:String.raw`^([0-9A-Fa-f]{2}:){5}([0-9A-Fa-f]{2})$`,comma_separted_port_regex:String.raw`^(\d{1,5})(,\s*\d{1,5})*$`,port_range_regex:String.raw`^(\d{1,5})-(\d{1,5})$`,host_name:String.raw`^(?!\s*$)[a-zA-Z0-9._: \-\/]{1,250}|^[a-zA-Z0-9._: \-\/]{1,250}@[0-9]{0,5}`,singleword:String.raw`^(?=[a-zA-Z0-9._:\-]{3,253}$)(?!.*[_.:\-]{2})[^_.:\-].*[^_.:\-]$`},mp=e=>vp(e)||hp(e),vp=e=>new RegExp(fp.ipv4).test(e),hp=e=>new RegExp(fp.ipv6).test(e),gp=a;function bp(e){if("text"==e)return".*";if("vlan"==e){return String.raw`@(([1-9])|([1-9][0-9]{1,2})|([1-3][0-9]{3})|(40[0-8][0-9])|(409[0-5]))`}if("ip"==e||"cidr"==e){let t=bp("vlan"),a=gp.REGEXES.ipv4,l=a.replaceAll("$",`${t}$`),n=gp.REGEXES.ipv6,s=n.replaceAll("$",`${t}$`);if("cidr"==e){let e=String.raw`(\/(([1-9])|([1-2][0-9])|(3[0-2])))`,l=a.replaceAll("$",`${e}$`),s=a.replaceAll("$",`${e}${t}$`),i=String.raw`(\/(([1-9])|([1-9][0-9])|(1[0-1][0-9])|(12[0-8])))`;return`(${l}|${s}|${n.replaceAll("$",`${i}$`)}|${n.replaceAll("$",`${i}${t}$`)})`}return`(${a})|(${l})|(${n})|(${s})`}if("mac"==e)return gp.REGEXES.macAddress;if("ip,cidr"==e){return`(${bp("ip")})|(${bp("cidr")})`}return gp.REGEXES[e]}const yp={get_data_pattern:bp,validateIP:mp,validateIPv4:vp,validateIPv6:hp,validateHostName:e=>new RegExp(fp.host_name).test(e),validateCommaSeparatedPortList:e=>new RegExp(fp.comma_separted_port_regex).test(e),validatePortRange:e=>{const t=e.split("-",2),a=Number(t[0]),l=Number(t[1]);return!isNaN(a)&&!isNaN(l)&&(a>0&&a<l&&l<65536)},validateSingleWord:e=>new RegExp(fp.singleword).test(e)};var wp={components:{modal:np,"select-search":l_},props:{id:String,filters_options:Array},updated(){},data(){return{i18n:e=>i18n(e),jQuery:$,id_modal:`${this.$props.id}_modal`,filter_type_selected:{},filter_type_label_selected:null,operator_selected:{},option_selected:{},input_value:null,input_type:null,data_pattern_selected:null,input_required:!1,options_to_show:null,operators_to_show:[]}},emits:["apply"],created(){},async mounted(){await ntopng_sync.on_ready(this.id_modal),ntopng_events_manager.on_custom_event(this.$props.id,ntopng_custom_events.SHOW_MODAL_FILTERS,(e=>this.show(e))),ntopng_sync.ready(this.$props.id)},methods:{show:function(e){null!=this.$props.filters_options&&0!=this.$props.filters_options.length&&(null!=e?(this.filter_type_selected=e,this.change_filter(e)):(this.filter_type_selected=this.$props.filters_options[0],this.change_filter()),this.$refs.modal.show())},post_change:function(e,t){e.id&&this.$props.filters_options&&(this.filter_type_selected=this.$props.filters_options.find((t=>t.id==e.id))),null!=e.value&&(this.options_to_show?this.option_selected=this.options_to_show.find((t=>t.value==e.value)):(this.option_selected={},this.input_value=e.value,this.data_pattern_selected=this.get_data_pattern(t))),e.operator&&this.operators_to_show&&(this.operator_selected=this.operators_to_show.find((t=>t.id==e.operator)))},change_operator_type:function(e){this.operator_selected=e},change_data_filter:function(e){this.option_selected=e},change_input_value:function(e){this.input_value=e},change_filter:function(e){this.options_to_show=null,this.option_selected=null,this.input_value=null;let t=this.$props.filters_options.find((e=>e.id==this.filter_type_selected.id));null!=t&&(this.input_type=t.type,this.operators_to_show=t.operators,this.filter_type_label_selected=t.label,"select"==this.input_type?(this.options_to_show=t.options.sort(((e,t)=>null==e||null==e.label?-1:null==t||null==t.label?1:e.label.toString().localeCompare(t.label.toString()))),this.option_selected=this.options_to_show[0]):"select-with-input"==this.input_type?(this.options_to_show=t.options?.sort(((e,t)=>null==e||null==e.label?-1:null==t||null==t.label?1:e.label.toString().localeCompare(t.label.toString()))),this.option_selected=this.options_to_show[0],this.data_pattern_selected=this.get_data_pattern(t.value_type)):(this.options_to_show=null,this.data_pattern_selected=this.get_data_pattern(t.value_type)),t.operators&&null==this.operator_selected?.id&&(this.operator_selected=t.operators[0]),null!=e&&this.post_change(e,t.value_type))},get_data_pattern:function(e){return this.input_required=!0,"text"==e?(this.input_required=!1,".*"):yp.get_data_pattern(e)},check_disable_apply:function(){let e=new RegExp(this.data_pattern_selected);return!this.options_to_show&&(this.input_required&&(null==this.input_value||""==this.input_value)||0==e.test(this.input_value))},apply:function(){let e=this.input_value,t=this.input_value;if(null==e||null!=this.option_selected?.value){let a=this.filters_options.find((e=>e.id==this.filter_type_selected.id)),l=a.options.find((e=>e.value==this.option_selected.value));null==l&&(l=this.option_selected),e=l.value,t=l.value_label||l.label}let a={id:this.filter_type_selected.id,label:this.filter_type_label_selected,operator:this.operator_selected.id,value:e,value_label:t};this.$emit("apply",a),ntopng_events_manager.emit_custom_event(ntopng_custom_events.MODAL_FILTERS_APPLY,a),this.close()},close:function(){this.$refs.modal.close()}}};const xp=e=>(pl("data-v-3119c83e"),e=e(),fl(),e),kp={autocomplete:"off"},$p={class:"form-group row"},Sp=xp((()=>Vs("label",{class:"col-form-label col-sm-3",for:"dt-filter-type-select"},[Vs("b",null,"Filter")],-1))),Np={class:"col-sm-8"},Cp=xp((()=>Vs("hr",null,null,-1))),Ep={class:"dt-filter-template-container form-group row"},Ap={class:"col-form-label col-sm-3"},Tp={class:"col-sm-8"},Op={class:"input-group mb-3"},Pp={class:"input-group-prepend col-sm-3"},Up={key:0,class:"col-sm-9"},Ip={key:1,class:"col-sm-9"},jp=["pattern","required"],Mp={style:{margin:"0px",padding:"0"},class:"alert invalid-feedback"},Lp=["disabled"];lp("\ninput ~ .alert[data-v-3119c83e] {\n  display: none;\n}\ninput:invalid ~ .alert[data-v-3119c83e] {\n  display: block;\n}\n"),wp.render=function(e,t,a,l,n,s){const i=kn("select-search"),o=kn("modal");return Os(),Ls(o,{id:n.id_modal,ref:"modal"},{title:vl((()=>[Ks(te(n.i18n("alerts_dashboard.add_filter")),1)])),body:vl((()=>[Vs("form",kp,[Vs("div",$p,[Sp,Vs("div",Np,[Hs(i,{selected_option:n.filter_type_selected,"onUpdate:selected_option":t[0]||(t[0]=e=>n.filter_type_selected=e),id:"filter_type",options:a.filters_options,onSelect_option:t[1]||(t[1]=e=>s.change_filter())},null,8,["selected_option","options"])])]),Cp,Vs("div",Ep,[Vs("label",Ap,[Vs("b",null,te(n.filter_type_label_selected),1)]),Vs("div",Tp,[Vs("div",Op,[Vs("div",Pp,[Hs(i,{selected_option:n.operator_selected,"onUpdate:selected_option":t[2]||(t[2]=e=>n.operator_selected=e),id:"operator_filter",options:n.operators_to_show,onSelect_option:s.change_operator_type},null,8,["selected_option","options","onSelect_option"])]),"select"==n.input_type?(Os(),Ms("div",Up,[Hs(i,{selected_option:n.option_selected,"onUpdate:selected_option":t[3]||(t[3]=e=>n.option_selected=e),id:"data_filter",options:n.options_to_show,onSelect_option:s.change_data_filter},null,8,["selected_option","options","onSelect_option"])])):"select-with-input"==n.input_type?(Os(),Ms("div",Ip,[Hs(i,{selected_option:n.option_selected,"onUpdate:selected_option":t[4]||(t[4]=e=>n.option_selected=e),id:"data_filter",add_tag:!0,pattern:n.data_pattern_selected,options:n.options_to_show,onSelect_option:s.change_data_filter},null,8,["selected_option","pattern","options","onSelect_option"])])):(Os(),Ms(Ss,{key:2},[wn(Vs("input",{"onUpdate:modelValue":t[5]||(t[5]=e=>n.input_value=e),pattern:n.data_pattern_selected,name:"value",required:n.input_required,type:"text",class:"form-control"},null,8,jp),[[jo,n.input_value]]),Vs("span",Mp,te(n.i18n("invalid_value")),1)],64))]),Ys(" end div input-group mb-3 ")]),Ys(" end div form-group-row ")])])])),footer:vl((()=>[Vs("button",{type:"button",disabled:s.check_disable_apply(),onClick:t[6]||(t[6]=(...e)=>s.apply&&s.apply(...e)),class:"btn btn-primary"},te(n.i18n("apply")),9,Lp)])),_:1},8,["id"])},wp.__scopeId="data-v-3119c83e",wp.__file="http_src/vue/modal-filters.vue";let Fp,Rp,Dp,zp,qp=[],Bp=null!=window.location.toString().match(/alert_stats.lua/),Vp=ntopng_url_manager.get_url_entry("status");null!=Vp&&""!=Vp||(Vp="historical");let Hp=function(e){let t=ntopng_url_manager.get_url_entry("page");return null==t&&(t=e?"all":"overview"),t}(Bp);const Gp=async function(){qp=await async function(e,t){let a,l=ntopng_url_manager.get_url_entry("query_preset");if(null==l&&(l=""),e)a=`${http_prefix}/lua/rest/v2/get/alert/filter/consts.lua?page=${t}&query_preset=${l}`;else{let e=ntopng_url_manager.get_url_entry("aggregated");a=`${http_prefix}/lua/pro/rest/v2/get/db/filter/consts.lua?page=${t}&query_preset=${l}&aggregated=${e}`}return await ntopng_utility.http_request(a)}(Bp,Hp),qp.filter((e=>null==e.label)).forEach((e=>{console.error(`label not defined for filter ${JSON.stringify(e)}`),e.label=""})),qp.sort(((e,t)=>e.label.localeCompare(t.label))),i18n_ext.tags={},Fp={},Rp={},qp.forEach((e=>{i18n_ext.tags[e.id]=e.label,e.operators.forEach((e=>Fp[e.id]=e.label)),Rp[e.id]=e.operators.map((e=>e.id))}));let e=ntopng_url_manager.get_url_entries(),t=[];for(const[a,l]of e){let e=qp.find((e=>e.id==a));if(null!=e){l.split(",").forEach((a=>{let[l,n]=a.split(";");if(null==n||null==l||""==n||null!=e.options&&null==e.options.find((e=>e.value==l)))return;let s=l;"array"==e.value_type&&(s=e?.options?.find((e=>e.value==l))?.label),t.push({id:e.id,operator:n,value:l,label:e.label,value_label:s})}))}}return t};var Wp={props:{id:String,min_time_interval_id:String,round_time:Boolean},components:{"date-time-range-picker":A_,"modal-filters":wp},created(){},async mounted(){let e=ntopng_sync.on_ready(this.id_data_time_range_picker);if(ntopng_sync.on_ready(this.id_modal_filters),await e,"all"!=this.page){let e=await Gp();zp=function(e){const t=new Tagify(e.$refs.tagify,{duplicates:!0,delimiters:null,dropdown:{enabled:1,classname:"extra-properties"},autoComplete:{enabled:!1},templates:{tag:function(e){try{return`<tag title='${e.value}' contenteditable='false' spellcheck="false" class='tagify__tag'>\n                        <x title='remove tag' class='tagify__tag__removeBtn'></x>\n                        <div>\n                           <b>${e.label?e.label:e.key}</b>&nbsp;\n                           <b class='operator'>${e.selectedOperator?Fp[e.selectedOperator]:"="}</b>&nbsp;\n                            <span class='tagify__tag-text'>${e.value}</span>\n                        </div>\n                    </tag>`}catch(e){console.error(`An error occured when creating a new tag: ${e}`)}}},validate:function(e){return void 0!==e.key&&void 0!==e.selectedOperator&&void 0!==e.value}});$(document).ready((function(){t.addTags(Dp)}));const a=async function(e){"number"==typeof e.realValue&&(e.realValue=""+e.realValue),"number"==typeof e.value&&(e.value=""+e.value);let a=t.getTagElms().find((t=>t.getAttribute("key")===e.key&&t.getAttribute("realValue")===e.realValue));void 0===t.tagData(a)&&(Rp[e.key]&&!Array.isArray(Rp[e.key])&&(e.operators=Rp[e.key].operators),e.selectedOperator||(e.selectedOperator="eq"),t.addTags([e]))};return t.on("remove",(async function(e){const t=e.detail.data.key,a=e.detail.data.realValue,l=ntopng_status_manager.get_status();if(void 0===t)return;if(null==l.filters)return;const n=l.filters.filter((e=>e.id!=t||e.id==t&&e.value!=a));ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:n})})),t.on("add",(async function(e){const a=e.detail;if(void 0===a.data)return;return a.data.key?void 0:(t.removeTags([e.detail.tag]),e.preventDefault(),void e.stopPropagation())})),t.on("click",(async function(t){const a=t.detail;if(void 0===a.data)return;if(void 0===a.data.key)return;const l=a.data;e.edit_tag=l,ntopng_events_manager.emit_custom_event(ntopng_custom_events.SHOW_MODAL_FILTERS,{id:l.key,operator:l.selectedOperator,value:l.realValue})})),t.on("edit:updated",(async function(e){console.warn("UPDATED")})),$("tags").on("change","select.operator",(async function(e){console.warn("TAGS change")})),{tagify:t,addFilterTag:a}}(this),ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:e}),ntopng_events_manager.on_event_change(this.$props.id,ntopng_events.FILTERS_CHANGE,(e=>this.reload_status(e)),!0)}this.modal_data=qp,ntopng_sync.ready(this.$props.id)},data(){return{i18n:i18n,id_modal_filters:`${this.$props.id}_modal_filters`,id_data_time_range_picker:`${this.$props.id}_date-time-range-picker`,show_filters:!1,edit_tag:null,is_alert_stats_url:Bp,status_view:Vp,page:Hp,modal_data:[],last_filters:[]}},methods:{is_filter_defined:function(e){return null!=Rp[e.id]},update_status_view:function(e){ntopng_url_manager.set_key_to_url("status",e),ntopng_url_manager.reload_url()},show_modal_filters:function(){this.$refs.modal_filters.show()},remove_filters:function(){ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:[]})},reload_status:function(e){let t=e.filters;if(null==t)return;ntopng_url_manager.delete_params(qp.map((e=>e.id))),zp.tagify.removeAllTags();let a=Xd.get_filters_object(t);ntopng_url_manager.add_obj_to_url(a),t.forEach((e=>{let t=function(e){let t=qp.find((t=>t.id==e.id));null==t&&console.error("create_tag_from_filter: filter const not found;");let a=e.value;if(null!=t.options){let l=t.options.find((t=>t.value==e.value));null!=l&&(a=l.label)}const l={label:t.label,key:t.id,value:a,realValue:e.value,title:`${t.label}${e.operator}${a}`,selectedOperator:e.operator};return""==l.value&&(l.value="''"),null==l.realValue||null==l.selectedOperator||""==l.selectedOperator?null:l}(e);null!=t&&zp.addFilterTag(t)})),this.last_filters=t},apply_modal:function(e){let t=ntopng_status_manager.get_status().filters;null==t&&(t=[]),null!=this.edit_tag&&(t=t.filter((e=>e.id!=this.edit_tag.key||e.value!=this.edit_tag.realValue)),this.edit_tag=null),t.push(e),ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:t})}}};const Kp=e=>(pl("data-v-aaee59ea"),e=e(),fl(),e),Jp={style:{width:"100%"}},Yp={class:"mb-1"},Zp={key:0,style:{"margin-right":"0.1rem"},class:"d-flex align-items-center me-2"},Xp={class:"btn-group",id:"statusSwitch",role:"group"},Qp=[Kp((()=>Vs("i",{class:"fa-solid fa-hourglass-half",title:"Engaged"},null,-1)))],ef=[Kp((()=>Vs("i",{class:"fa-regular fa-eye",title:"Require Attention"},null,-1)))],tf=[Kp((()=>Vs("i",{class:"fa-solid fa-inbox",title:"All"},null,-1)))],af={key:0,class:"d-flex mt-1",style:{width:"100%"}},lf=["placeholder"],nf=[Kp((()=>Vs("span",null,[Vs("i",{class:"fas fa-plus","data-original-title":"",title:"Add Filter"})],-1)))],sf=[Kp((()=>Vs("i",{class:"fas fa-times"},null,-1)))];lp("\n.tagify__input[data-v-aaee59ea] {\n    min-width: 175px;\n}\n.tagify__tag[data-v-aaee59ea] {\n    white-space: nowrap;\n    margin: 3px 0px 5px 5px;\n}\n.tagify__tag select.operator[data-v-aaee59ea] {\n    margin: 0px 4px;\n    border: 1px solid #c4c4c4;\n    border-radius: 4px;\n}\n.tagify__tag b.operator[data-v-aaee59ea] {\n    margin: 0px 4px;\n    background-color: white;\n    border: 1px solid #c4c4c4;\n    border-radius: 4px;\n    padding: 0.05em 0.2em;\n}\n.tagify__tag>div[data-v-aaee59ea] {\n    display: flex;\n    align-items: center;\n}\n"),Wp.render=function(e,t,a,l,n,s){const i=kn("modal-filters"),o=kn("date-time-range-picker");return Os(),Ms("div",Jp,[Vs("div",Yp,[Hs(i,{filters_options:n.modal_data,onApply:s.apply_modal,ref:"modal_filters",id:n.id_modal_filters},null,8,["filters_options","onApply","id"]),Hs(o,{id:n.id_data_time_range_picker,min_time_interval_id:a.min_time_interval_id,round_time:a.round_time},{begin:vl((()=>[n.is_alert_stats_url?(Os(),Ms("div",Zp,[Vs("div",Xp,["flow"!=n.page?(Os(),Ms("a",{key:0,href:"#",onClick:t[0]||(t[0]=e=>s.update_status_view("engaged")),class:K(["btn btn-sm",{active:"engaged"==n.status_view,"btn-seconday":"engaged"!=n.status_view,"btn-primary":"engaged"==n.status_view}])},Qp,2)):Ys("v-if",!0),Vs("a",{href:"#",onClick:t[1]||(t[1]=e=>s.update_status_view("historical")),class:K(["btn btn-sm",{active:"historical"==n.status_view||"flow"==n.page&&"engaged"==n.status_view,"btn-seconday":"historical"!=n.status_view,"btn-primary":"historical"==n.status_view||"flow"==n.page&&"engaged"==n.status_view}])},ef,2),Ys(" <a href=\"#\" @click=\"update_status_view('acknowledged')\" class=\"btn btn-sm\"\n                                :class=\"{ 'active': status_view == 'acknowledged', 'btn-seconday': status_view != 'acknowledged', 'btn-primary': status_view == 'acknowledged' }\"><i class=\"fa-solid fa-check-double\" title=\"Acknowledged\"></i></a>"),Vs("a",{href:"#",onClick:t[2]||(t[2]=e=>s.update_status_view("any")),class:K(["btn btn-sm",{active:"any"==n.status_view,"btn-seconday":"any"!=n.status_view,"btn-primary":"any"==n.status_view}])},tf,2)])])):Ys("v-if",!0),On(e.$slots,"begin")])),extra_buttons:vl((()=>[On(e.$slots,"extra_range_buttons")])),_:3},8,["id","min_time_interval_id","round_time"])]),Ys(" tagify "),"all"!=n.page?(Os(),Ms("div",af,[Vs("input",{class:"w-100 form-control h-auto",name:"tags",ref:"tagify",placeholder:n.i18n("show_alerts.filters")},null,8,lf),wn(Vs("button",{class:"btn btn-link","aria-controls":"flow-alerts-table",type:"button",id:"btn-add-alert-filter",onClick:t[3]||(t[3]=(...e)=>s.show_modal_filters&&s.show_modal_filters(...e))},nf,512),[[Yo,n.modal_data&&n.modal_data.length>0]]),wn(Vs("button",{"data-bs-toggle":"tooltip","data-placement":"bottom",title:"{{ i18n('show_alerts.remove_filters') }}",onClick:t[4]||(t[4]=(...e)=>s.remove_filters&&s.remove_filters(...e)),class:"btn ms-1 my-auto btn-sm btn-remove-tags"},sf,512),[[Yo,n.modal_data&&n.modal_data.length>0]])])):Ys("v-if",!0),Ys(" end tagify ")])},Wp.__scopeId="data-v-aaee59ea",Wp.__file="http_src/vue/range-picker.vue";const of={class:"row",style:{"margin-left":"-2px","margin-right":"-2px","margin-top":"1rem","margin-bottom":"-1rem"}},rf={class:"col-sm-12 col-md-5"},cf={class:"dataTables_info",role:"status","aria-live":"polite"},uf={class:"col-sm-12 col-md-7"},df={class:"dataTables_paginate paging_simple_numbers",style:{display:"flex","justify-content":"flex-end"}},_f={class:"pagination"},pf={class:"paginate_button page-item previous"},ff=["onClick"],mf={href:"javascript:void(0);","aria-controls":"default-datatable","data-dt-idx":"1",tabindex:"0",class:"page-link"},vf={class:"paginate_button page-item previous"};var hf={__name:"select_table_page",props:{total_rows:Number,per_page:Number},emits:["change_active_page"],setup(e,{expose:t,emit:a}){const l=e,n=ma(0),s=ma(0),i=ma(0),o=ma(0),r=ma("");function c(){if(null==l.total_rows)return;let e=l.per_page;i.value=Number.parseInt((l.total_rows+e-1)/e),s.value=6,i.value<s.value&&(s.value=i.value),o.value>=i.value&&i.value>0&&(o.value=i.value-1,n.value=i.value-s.value,_(o.value)),p()}_n((()=>{c()})),jl((()=>[l.total_rows,l.per_page]),((e,t)=>{c()}),{flush:"pre",immediate:!0});const u=wi((()=>!(i.value<6)&&o.value>=s.value-1)),d=wi((()=>!(i.value<6)&&o.value<i.value-s.value+1));function _(e,t){null!=e&&(o.value=e),null!=t&&(n.value=t),o.value==n.value&&n.value>0&&(n.value-=1);const l=n.value+s.value-1;o.value==l&&i.value-1>l&&(n.value+=1),o.value>i.value-1&&0!=i.value&&(o.value=i.value-1,n.value=o.value),p(),a("change_active_page",o.value)}function p(){r.value="Showing page %active_page of %total_pages: total %total_rows rows".replace("%active_page",f(`${o.value+1}`)).replace("%total_pages",f(`${i.value}`)).replace("%total_rows",f(`${l.total_rows}`)).replace("%per_page",f(`${l.per_page}`))}function f(e){return e.replace(/(.)(?=(\d{3})+$)/g,"$1,")}return t({change_active_page:_}),(e,t)=>(Os(),Ms(Ss,null,[Ys(" PerPage "),Vs("div",of,[Ys(" div col-md-5 "),Vs("div",rf,[Vs("div",cf,te(r.value),1)]),Ys(" div col-md-5 "),Ys(" start div col-sm-12 "),wn(Vs("div",uf,[Vs("div",df,[Vs("ul",_f,[wn(Vs("li",pf,[Vs("a",{href:"javascript:void(0);",onClick:t[0]||(t[0]=e=>_(0,0)),"aria-controls":"default-datatable","data-dt-idx":"0",tabindex:"0",class:"page-link"}," « ")],512),[[Yo,ya(u)]]),Vs("li",{class:K(["paginate_button page-item previous",{disabled:0==o.value}])},[Vs("a",{href:"javascript:void(0);",onClick:t[1]||(t[1]=e=>{_(o.value-1)}),"aria-controls":"default-datatable","data-dt-idx":"0",tabindex:"0",class:"page-link"}," < ")],2),(Os(!0),Ms(Ss,null,An(s.value,(e=>(Os(),Ms("li",{onClick:t=>_(n.value+e-1),class:K([{active:o.value==n.value+e-1},"paginate_button page-item"])},[Vs("a",mf,te(n.value+e),1),Ys('  :key="total_rows"')],10,ff)))),256)),Vs("li",{class:K(["paginate_button page-item next",{disabled:o.value==i.value-1}]),id:"default-datatable_next"},[Vs("a",{href:"javascript:void(0);",onClick:t[2]||(t[2]=e=>{_(o.value+1)}),"aria-controls":"default-datatable","data-dt-idx":"7",tabindex:"0",class:"page-link"}," > ")],2),wn(Vs("li",vf,[Vs("a",{href:"javascript:void(0);",onClick:t[3]||(t[3]=e=>_(i.value-1,i.value-s.value)),"aria-controls":"default-datatable","data-dt-idx":"0",tabindex:"0",class:"page-link"}," » ")],512),[[Yo,ya(d)]])])])],512),[[Yo,i.value>0]]),Ys(" end div col-md-7 ")]),Ys(" PerPage ")],2112))},__file:"http_src/vue/select_table_page.vue"};const gf={class:"text-center"},bf={class:"sr-only position-absolute"};var yf={__name:"loading",props:{styles:String},setup(e,{expose:t}){const a=i18n("loading"),l=ma(null);return t({hide_loading:function(e=500){$(l.value).fadeOut(e)},show_loading:function(e=500){$(l.value).fadeIn(e)}}),(t,n)=>(Os(),Ms("div",{ref_key:"overlay",ref:l,class:"overlay centered-message"},[Vs("div",gf,[Vs("div",{class:"spinner-border text-primary mt-6",style:V(e.styles),role:"status"},[Vs("span",bf,te(ya(a)),1)],4)])],512))},__file:"http_src/vue/loading.vue"};const wf={class:"form-check form-switch ms-1",style:{"white-space":"nowrap"}},xf=["checked","title"],kf=["innerHTML"];var $f={__name:"switch",props:{value:Boolean,title:String,label:String},emits:["update:value","change_value"],setup(e,{emit:t}){const a=e,l=ma(!1);return _n((()=>{l.value=a.value})),jl((()=>a.value),((e,t)=>{l.value=a.value}),{flush:"pre"}),(a,n)=>(Os(),Ms("div",wf,[Vs("input",{class:"form-check-input",style:{cursor:"pointer"},checked:1==l.value,onClick:n[0]||(n[0]=e=>(t("update:value",!l.value),void t("change_value",!l.value))),type:"checkbox",id:"toggle-Begin",title:e.title},null,8,xf),Vs("label",{class:"form-check-label",for:"toggle-Begin",innerHTML:e.label},null,8,kf)]))},__file:"http_src/vue/switch.vue"};const Sf=e=>(pl("data-v-61956e9e"),e=e(),fl(),e),Nf=["id"],Cf={class:"button-group mb-2 d-flex align-items-center"},Ef={class:"form-group d-flex align-items-end",style:{"flex-wrap":"wrap"}},Af={style:{"text-align":"right"},class:"form-group d-flex align-items-center ms-auto"},Tf={class:"d-flex align-items-center"},Of={key:0,class:"d-inline me-2 ms-auto"},Pf={class:"me-2"},Uf=["value"],If=[Sf((()=>Vs("i",{class:"fas fa-columns"},null,-1)))],jf=[Sf((()=>Vs("i",{class:"fas fa-refresh"},null,-1)))],Mf={key:1,class:"d-inline-block"},Lf=Sf((()=>Vs("i",{class:"fas fa-eye"},null,-1))),Ff={class:"form-check form-switch ms-1"},Rf=["checked","onClick","id"],Df=["for","innerHTML"],zf={key:0,class:"centered-message"},qf=["innerHTML"],Bf=["data-resizable-columns-id"],Vf=["onClick","data-resizable-column-id"],Hf={style:{display:"flex"}},Gf=["innerHTML"],Wf={class:"fa fa-fw fa-sort-up"},Kf={class:"fa fa-fw fa-sort-down"},Jf={key:0,scope:"col",class:""},Yf=["innerHTML"],Zf={key:0,style:{},class:"",scope:"col"},Xf=[Sf((()=>Vs("div",{class:"wrap-column"},null,-1)))],Qf={key:1,class:"mt-2"},em={class:"text-end"},tm={style:{},class:"query text-end"},am={class:"records"},lm={class:"text-start"},nm={id:"historical_flows_table-query-time",style:{},class:"query"},sm={class:"seconds"},im=["title"];var om={__name:"table",props:{id:String,columns:Array,get_rows:Function,get_column_id:Function,print_column_name:Function,print_html_row:Function,print_vue_node_row:Function,f_is_column_sortable:Function,f_sort_rows:Function,f_get_column_classes:Function,f_get_column_style:Function,enable_search:Boolean,display_empty_rows:Boolean,show_autorefresh:Number,default_sort:Object,csrf:String,paging:Boolean,display_message:Boolean,message_to_display:String},emits:["custom_event","loaded","rows_loaded"],setup(e,{expose:t,emit:a}){const l=e,n={emit:a,h:Pi,nextTick:Ja},s=e=>i18n(e);ma(!0);const i=ma(null),o=ma(null),r=ma(null);ma([]);let c=0,u=[];const d=ma([]),_=ma([]),p=ma(0),f=[10,20,40,50,80,100],m=ma(10),v=window.store,h=ma(""),g=ma(null),y=ma(!1),w=ma(null),k=ma(null),S=ma(!1),N=ma(!1),C=ma(!1);_n((async()=>{null!=l.columns&&T()}));const E=wi((()=>{if(null==l.show_autorefresh||l.show_autorefresh<=0)return"";return s("table.autorefresh").replace("%time",l.show_autorefresh)}));function A(e){return null!=e&&null!=e.id?e.id:"toggle-Begin"}async function T(){await async function(){let e=await async function(){if(null==l.csrf)return{};const e={table_id:l.id},t=x.obj_to_url_params(e),a=`${http_prefix}/lua/rest/v2/get/tables/user_columns_config.lua?${t}`;let n=await b.http_request(a),s={};return n.forEach((e=>{s[e.id]=e})),s}(),t=!0;for(let a in e)t&=e[a]?.sort;d.value=l.columns.map(((a,n)=>{let s=[],i="";null!=l.f_get_column_classes&&(s=l.f_get_column_classes(a)),null!=l.f_get_column_style&&(i=l.f_get_column_style(a));let o=l.get_column_id(a),r=e[o],c=r?.sort;return c=1==t&&null==c&&null!=l.default_sort&&o==l.default_sort.column_id?l.default_sort.sort:r?.sort?r?.sort:0,{id:o,visible:null==r?.visible||1==r?.visible,sort:c,sortable:Y(a),order:r?.order||n,classes:s,style:i,data:a}})),await M()}(),await J(),j(),r.value.load_menu(),a("loaded")}let O;function P(){0!=C.value?O=setInterval((()=>{z()}),1e3*l.show_autorefresh):clearInterval(O)}async function U(){await async function(){I.value+=1,await Ja()}(),j()}jl((()=>[l.id,l.columns]),((e,t)=>{T()}),{flush:"pre"});const I=ma(0);function j(){let e={store:v,minWidth:72};$(o.value).resizableColumns(e)}async function M(){if(null==l.csrf)return;let e={table_id:l.id,visible_columns_ids:[],csrf:l.csrf};e.visible_columns_ids=d.value.map(((e,t)=>({id:e.id,visible:e.visible,order:e.order,sort:e.sort})));const t=`${http_prefix}/lua/rest/v2/add/tables/user_columns_config.lua`;await b.http_post_request(t,e)}async function L(){l.columns.forEach((e=>{let t=`${l.id}-${l.get_column_id(e)}`;v.remove(t)})),await U()}function F(){R.value+=1,z(0)}const R=ma(0);const D=ma(0);async function z(e){null!=e&&(c=e),null==c&&(c=0),1==l.paging||q?await J():Z(),D.value+=1}let q=!1,B=!1;async function H(e){q=!0,B=e||!1,B?g.value.change_active_page():g.value.change_active_page(0,0),await Ja(),q=!1,B=!1}let G,W=!0;async function J(){y.value=!B;let e=await l.get_rows(c,m.value,d.value,h.value,W);w.value=null,null!=e.query_info&&(w.value=e.query_info),W=!1,p.value=e.rows.length,1==l.paging&&(p.value=e.total_rows),u=e.rows,Z(),y.value=!1,await Ja(),a("rows_loaded",e)}function Y(e){return null==l.f_is_column_sortable||l.f_is_column_sortable(e)}function Z(){let e=0;if(0==l.paging&&(e=c*m.value),0==l.paging){let e=null!=l.f_sort_rows?l.f_sort_rows:(e,t,a)=>{let n=l.print_html_row(e.data,t),s=l.print_html_row(e.data,a);return 1==e.sort?n.localeCompare(s):s.localeCompare(n)},t=function(){let e=d.value.find((e=>0!=e.sort));return e}();u=u.sort(((a,l)=>e(t,a,l)))}_.value=u.slice(e,e+m.value)}async function X(){let e=1e3;null!=G?clearTimeout(G):e=0,G=setTimeout((async()=>{await J(),G=null}),e)}function Q(e){NtopUtils.copyToClipboard(w.value.query,k.value)}return t({load_table:T,refresh_table:H,get_columns_defs:function(){return d.value},get_rows_num:function(){return p.value},search_value:function(e){h.value=e,X()}}),(t,a)=>(Os(),Ms(Ss,null,[On(t.$slots,"custom_header2"),Vs("div",{ref_key:"table_container",ref:i,id:e.id},[y.value?(Os(),Ls(yf,{key:0})):Ys("v-if",!0),Vs("div",Cf,[Ys(" TableHeader "),Vs("div",Ef,[On(t.$slots,"custom_header")]),Vs("div",Af,[Vs("div",Tf,[e.enable_search?(Os(),Ms("div",Of,[Vs("label",null,[Ks(te(s("search"))+": ",1),wn(Vs("input",{type:"search","onUpdate:modelValue":a[0]||(a[0]=e=>h.value=e),onInput:X,class:""},null,544),[[jo,h.value]])])])):Ys("v-if",!0),Vs("div",Pf,[Vs("label",null,[wn(Vs("select",{"onUpdate:modelValue":a[1]||(a[1]=e=>m.value=e),onChange:F},[(Os(),Ms(Ss,null,An(f,(e=>Vs("option",{value:e},te(e),9,Uf))),64))],544),[[Ro,m.value]])])]),Vs("button",{class:"btn btn-link",type:"button",onClick:L},If),Vs("button",{class:"btn btn-link",type:"button",onClick:a[2]||(a[2]=e=>H())},jf),e.show_autorefresh>0?(Os(),Ms("div",Mf,[Hs($f,{value:C.value,"onUpdate:value":a[3]||(a[3]=e=>C.value=e),class:"me-2 mt-1",title:ya(E),style:{},onChange_value:P},null,8,["value","title"])])):Ys("v-if",!0),Hs(Rd,{id:e.id+"_dropdown",ref_key:"dropdown",ref:r},{title:vl((()=>[Lf])),menu:vl((()=>[(Os(!0),Ms(Ss,null,An(d.value,(t=>(Os(),Ms("div",Ff,[Vs("input",{class:"form-check-input",style:{cursor:"pointer"},checked:1==t.visible,onClick:e=>async function(e){S.value=!0,e.visible=!e.visible,l.paging&&await J(),await U(),await M(),S.value=!1}(t),type:"checkbox",id:A(t)},null,8,Rf),Vs("label",{class:"form-check-label",for:A(t),innerHTML:e.print_column_name(t.data)},null,8,Df)])))),256))])),_:1},8,["id"]),Ys(" Dropdown columns ")])])]),Ys(" TableHeader "),(Os(),Ms("div",{key:I.value,style:{overflow:"auto",width:"100%"}},[Ys(" Table "),1==e.display_message?(Os(),Ms("div",zf,[Vs("span",{innerHTML:e.message_to_display},null,8,qf)])):Ys("v-if",!0),Vs("table",{ref_key:"table",ref:o,class:K(["table table-striped table-bordered ml-0 mr-0 mb-0 ntopng-table",[e.display_message||y.value?"ntopng-gray-out":""]]),"data-resizable":"true","data-resizable-columns-id":e.id},[Ys(" Table "),Vs("thead",null,[Vs("tr",null,[(Os(!0),Ms(Ss,null,An(d.value,((t,a)=>(Os(),Ms(Ss,null,[t.visible?(Os(),Ms("th",{key:0,scope:"col",class:K({pointer:t.sortable,unset:!t.sortable}),style:{"white-space":"nowrap"},onClick:e=>async function(e,t){e.sortable&&(e.sort=(e.sort+1)%3,d.value.filter(((e,a)=>a!=t)).forEach((e=>e.sort=0)),0!=e.sort&&(l.paging?await J():Z(),await M()))}(t,a),"data-resizable-column-id":e.get_column_id(t.data)},[Vs("div",Hf,[Vs("span",{innerHTML:e.print_column_name(t.data),class:"wrap-column"},null,8,Gf),Ys(' <i v-show="col.sort == 0" class="fa fa-fw fa-sort"></i> '),wn(Vs("i",Wf,null,512),[[Yo,1==t.sort&&t.sortable]]),wn(Vs("i",Kf,null,512),[[Yo,2==t.sort&&t.sortable]])])],10,Vf)):Ys("v-if",!0)],64)))),256))])]),Vs("tbody",null,[S.value||N.value?Ys("v-if",!0):(Os(!0),Ms(Ss,{key:0},An(_.value,(t=>(Os(),Ms("tr",null,[(Os(!0),Ms(Ss,null,An(d.value,((a,l)=>(Os(),Ms(Ss,null,[a.visible?(Os(),Ms("td",Jf,[null!=e.print_html_row&&null!=e.print_html_row(a.data,t,!0)?(Os(),Ms("div",{key:0,class:K([a.classes,"wrap-column"]),style:V(a.style),innerHTML:e.print_html_row(a.data,t)},null,14,Yf)):Ys("v-if",!0),Vs("div",{style:V([a.style,{}]),class:K(["wrap-column margin-sm",a.classes])},[null!=e.print_vue_node_row&&null!=e.print_vue_node_row(a.data,t,n,!0)?(Os(),Ls(jd,{key:t,content:e.print_vue_node_row(a.data,t,n)},null,8,["content"])):Ys("v-if",!0)],6)])):Ys("v-if",!0)],64)))),256))])))),256)),e.display_empty_rows&&_.value.length<m.value?(Os(!0),Ms(Ss,{key:1},An(m.value-_.value.length,(e=>(Os(),Ms("tr",null,[(Os(!0),Ms(Ss,null,An(d.value,((e,t)=>(Os(),Ms(Ss,null,[e.visible?(Os(),Ms("td",Zf,Xf)):Ys("v-if",!0)],64)))),256))])))),256)):Ys("v-if",!0)])],10,Bf),Ys(" Table ")])),Ys(" Table div"),Vs("div",null,[(Os(),Ls(hf,{ref_key:"select_table_page",ref:g,key:R.value,total_rows:p.value,per_page:m.value,onChange_active_page:z},null,8,["total_rows","per_page"]))]),null!=w.value?(Os(),Ms("div",Qf,[Vs("div",em,[Vs("small",tm,[Vs("span",am,te(w.value.num_records_processed),1),Ks(".")])]),Vs("div",lm,[Vs("small",nm,[Ks("Query performed in "),Vs("span",sm,te((w.value.query_duration_msec/1e3).toFixed(3)),1),Ks(" seconds. "),Vs("span",{id:"historical_flows_table-query",style:{cursor:"pointer"},class:"badge bg-secondary",title:w.value.query,onClick:Q,ref_key:"query_info_sql_button",ref:k},"SQL",8,im)])])])):Ys("v-if",!0)],8,Nf)],64))}};lp("\n.sticky[data-v-61956e9e] {\n    position: sticky;\n    left: 0;\n    background-color: white;\n}\n.wrap-column[data-v-61956e9e] {\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow: hidden;\n    width: 100%;\n}\n.pointer[data-v-61956e9e] {\n    cursor: pointer;\n}\n.unset[data-v-61956e9e] {\n    cursor: unset;\n}\n.link-button[data-v-61956e9e] {\n    color: var(--bs-dropdown-link-color);\n    cursor: pointer;\n}\n.link-disabled[data-v-61956e9e] {\n    pointer-events: none;\n    color: #ccc;\n}\ntd[data-v-61956e9e] {\n    height: 2.5rem;\n}\n.margin-sm[data-v-61956e9e] {\n    margin-bottom: -0.25rem;\n    margin-top: -0.25rem;\n}\n"),om.__scopeId="data-v-61956e9e",om.__file="http_src/vue/table.vue";var rm={__name:"table-with-config",props:{table_config_id:String,table_id:String,csrf:String,f_map_config:Function,f_map_columns:Function,f_sort_rows:Function,get_extra_params_obj:Function,display_message:Boolean,message_to_display:String},emits:["custom_event","loaded","rows_loaded"],setup(e,{expose:t,emit:a}){const l=e,n=ma({}),s=ma(null),i=ma(!1);_n((async()=>{null==l.table_id&&null==l.table_config_id||r()})),jl((()=>[l.table_id,l.table_config_id]),((e,t)=>{r()}),{flush:"pre"});const o=wi((()=>null!=l.table_id?l.table_id:l.table_config_id));async function r(){i.value=!1,await Ja();let e=l.table_config_id;null==e&&(e=l.table_id),n.value=await Wd.build_table(http_prefix,e,l.f_map_columns,l.get_extra_params_obj),null!=l.f_map_config&&(n.value=l.f_map_config(n.value)),i.value=!0,await Ja()}function c(){a("loaded")}function u(e){a("custom_event",e)}function d(e){a("rows_loaded",e)}return t({refresh_table:e=>{s.value&&s.value.refresh_table(e)},get_columns_defs:()=>null==s.value?[]:s.value.get_columns_defs(),get_rows_num:()=>s.value.get_rows_num(),search_value:e=>{s.value.search_value(e)}}),(t,a)=>i.value?(Os(),Ls(om,{key:0,ref_key:"table",ref:s,id:ya(o),columns:n.value.columns,get_rows:n.value.get_rows,get_column_id:n.value.get_column_id,print_column_name:n.value.print_column_name,print_html_row:n.value.print_html_row,print_vue_node_row:n.value.print_vue_node_row,f_is_column_sortable:n.value.f_is_column_sortable,f_get_column_classes:n.value.f_get_column_classes,f_get_column_style:n.value.f_get_column_style,display_empty_rows:n.value.display_empty_rows,f_sort_rows:e.f_sort_rows,enable_search:n.value.enable_search,default_sort:n.value.default_sort,show_autorefresh:n.value.show_autorefresh,paging:n.value.paging,csrf:e.csrf,display_message:e.display_message,message_to_display:e.message_to_display,onLoaded:c,onRows_loaded:d,onCustom_event:u},{custom_header:vl((()=>[On(t.$slots,"custom_header")])),_:3},8,["id","columns","get_rows","get_column_id","print_column_name","print_html_row","print_vue_node_row","f_is_column_sortable","f_get_column_classes","f_get_column_style","display_empty_rows","f_sort_rows","enable_search","default_sort","show_autorefresh","paging","csrf","display_message","message_to_display"])):Ys("v-if",!0)},__file:"http_src/vue/table-with-config.vue"},cm={__name:"spinner",props:{size:String,show:Boolean},setup:e=>(_n((async()=>{})),(t,a)=>e.show?(Os(),Ms("div",{key:0,class:"spinner-border text-primary",style:V({width:e.size,height:e.size}),role:"status"},null,4)):Ys("v-if",!0)),__file:"http_src/vue/spinner.vue"};const um={id:"script-description",class:"notes bg-light border",role:"alert"},dm=["innerHTML"],_m={key:0},pm=["innerHTML"];var fm={__name:"note-list",props:{note_list:Array,sub_note_list:Array,add_sub_notes:Boolean},setup(e){const t=e,a=e=>i18n(e);return(e,l)=>(Os(),Ms("div",um,[Vs("b",null,te(a("notes")),1),Vs("ul",null,[(Os(!0),Ms(Ss,null,An(t.note_list,(e=>(Os(),Ms("li",{innerHTML:e},null,8,dm)))),256)),t.add_sub_notes?(Os(),Ms("ul",_m,[(Os(!0),Ms(Ss,null,An(t.sub_note_list,(e=>(Os(),Ms("li",{innerHTML:e},null,8,pm)))),256))])):Ys("v-if",!0)])]))},__file:"http_src/vue/note-list.vue"},mm=Jl({components:{modal:np},props:{id:String},updated(){},data(){return{description:"",invalid_bpf:!1,bpf_filter:"",extract_now:!0,show_menu:!0,data_available:0,i18n:e=>i18n(e),epoch_interval:null,id_modal:`${this.$props.id}_modal`}},emits:["apply"],created(){},mounted(){},methods:{pad2_number:function(e){return String(e).padStart(2,"0")},format_date:function(e){let t=e.valueOf();return ntopng_utility.from_utc_to_server_date_format(t)},apply:async function(){if(null!=this.bpf_filter&&""!=this.bpf_filter){let e=`${http_prefix}/lua/pro/rest/v2/check/filter.lua?query=${this.bpf_filter}`,t=await ntopng_utility.http_request(e,null,!1,!0);if(this.invalid_bpf=!t.response,1==this.invalid_bpf)return}let e={ifid:ntopng_url_manager.get_url_entry("ifid"),epoch_begin:this.epoch_interval.epoch_begin,epoch_end:this.epoch_interval.epoch_end,bpf_filter:this.bpf_filter},t=ntopng_url_manager.obj_to_url_params(e);if(1==this.extract_now){let e=`${http_prefix}/lua/rest/v2/get/pcap/live_extraction.lua?${t}`;window.open(e,"_self",!1)}else{let e=`${http_prefix}/lua/rest/v2/create/pcap/extraction/task.lua?${t}`,a=(await ntopng_utility.http_request(e)).id,l=i18n("traffic_recording.extraction_scheduled"),n=i18n("traffic_recording.traffic_extraction_jobs"),s=`<a href="/lua/if_stats.lua?ifid=${ntopng_url_manager.get_url_entry("ifid")}&page=traffic_recording&tab=jobs&job_id=${a}">${n}</a>`;l=l.replace("%{page}",s),l=`${l} ${a}`,ntopng_events_manager.emit_custom_event(ntopng_custom_events.SHOW_GLOBAL_ALERT_INFO,{text_html:l,type:"alert-success"})}this.close()},close:function(){this.$refs.modal.close(),setTimeout((()=>{this.data_available=0}),1e3)},show:async function(e,t){if(null==t){let e=ntopng_status_manager.get_status();if(null==e.epoch_begin||null==e.epoch_end)return void console.error("modal-traffic-extraction: epoch_begin and epoch_end undefined in url");t={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end}}this.epoch_interval=t;let a=ntopng_url_manager.obj_to_url_params(t),l=`${http_prefix}/lua/check_recording_data.lua?${a}`,n=await ntopng_utility.http_request(l,null,null,!0);if(0==n.available)return this.data_available=2,this.description=i18n("traffic_recording.no_recorded_data"),void this.$refs.modal.show();this.data_available=1;let s="";if(null!=n.info&&(s=n.info),null==e){let t=ntopng_url_manager.get_url_params(),a=`${http_prefix}/lua/pro/rest/v2/get/db/filter/bpf.lua?${t}`,l=await ntopng_utility.http_request(a);if(null==l||null==l.bpf)return void console.error(`modal-traffic-extraction: ${a} return null value`);e=l.bpf}this.set_descriptions(t.epoch_begin,t.epoch_end,s),this.bpf_filter=e,this.$refs.modal.show()},set_descriptions:function(e,t,a){let l=new Date(1e3*e),n=new Date(1e3*t),s=i18n("traffic_recording.about_to_download_flow");s=s.replace("%{date_begin}",this.format_date(l)),s=s.replace("%{date_end}",this.format_date(n)),s=s.replace("%{extra_info}",a),this.description=s},show_hide_menu:function(){this.show_menu=!this.show_menu}}});const vm=e=>(pl("data-v-0be978c4"),e=e(),fl(),e),hm=["innerHTML"],gm={key:0,style:{height:"95%"}},bm={class:"tab-content",style:{height:"100%"}},ym={class:"row"},wm={class:"form-group mb-3 col-md-3 has-feedback"},xm={class:"form-group mb-3 col-md-9 text-right asd"},km={class:"radio-inline",style:{"margin-left":"1rem"}},$m={class:"radio-inline"},Sm={class:"row",id:"pcapDownloadModal_advanced",style:{}},Nm={class:"form-group mb-3 col-md-12 has-feedback"},Cm=vm((()=>Vs("br",null,null,-1))),Em={class:"form-label"},Am=vm((()=>Vs("a",{class:"ntopng-external-link",href:"https://www.ntop.org/guides/n2disk/filters.html"},[Vs("i",{class:"fas fa-external-link-alt"})],-1))),Tm={class:"input-group"},Om=vm((()=>Vs("span",{class:"input-group-addon"},[Vs("span",{class:"glyphicon glyphicon-filter"})],-1))),Pm=vm((()=>Vs("br",null,null,-1))),Um={class:"form-label"},Im=vm((()=>Vs("br",null,null,-1))),jm=vm((()=>Vs("ul",null,[Vs("li",null,[Ks("Host: "),Vs("i",null,"host 192.168.1.2")]),Vs("li",null,[Ks("HTTP: "),Vs("i",null,"tcp and port 80")]),Vs("li",null,[Ks("Traffic between hosts: "),Vs("i",null,"ip host 192.168.1.1 and 192.168.1.2")]),Vs("li",null,[Ks("Traffic from an host to another: "),Vs("i",null,"ip src 192.168.1.1 and dst 192.168.1.2")])],-1)));lp("\ninput ~ .alert[data-v-0be978c4] {\n  display: none;\n}\ninput:invalid ~ .alert[data-v-0be978c4] {\n  display: block;\n}\n"),mm.render=function(e,t,a,l,n,s){const i=kn("modal");return Os(),Ls(i,{id:e.id_modal,onApply:e.apply,ref:"modal"},{title:vl((()=>[Ks(te(e.i18n("traffic_recording.pcap_extract")),1)])),body:vl((()=>[Vs("div",{class:K(["alert",{"alert-info":2!=e.data_available,"alert-warning":2==e.data_available}]),innerHTML:e.description},null,10,hm),1==e.data_available?(Os(),Ms("form",gm,[Vs("div",bm,[Vs("div",ym,[Vs("div",wm,[Vs("button",{class:"btn btn-sm btn-secondary",type:"button",onClick:t[0]||(t[0]=(...t)=>e.show_hide_menu&&e.show_hide_menu(...t))},[Ks(te(e.i18n("advanced")),1),Vs("i",{class:K({"fas fa-caret-down":e.show_menu,"fas fa-caret-up":!e.show_menu})},null,2)])]),Vs("div",xm,[Vs("label",km,[wn(Vs("input",{type:"radio",name:"extract_now","onUpdate:modelValue":t[1]||(t[1]=t=>e.extract_now=t),value:"true",checked:""},null,512),[[Fo,e.extract_now]]),Ks(" "+te(e.i18n("traffic_recording.extract_now")),1)]),Vs("label",$m,[wn(Vs("input",{type:"radio",name:"extract_now","onUpdate:modelValue":t[2]||(t[2]=t=>e.extract_now=t),value:"false"},null,512),[[Fo,e.extract_now]]),Ks(" "+te(e.i18n("traffic_recording.queue_as_job")),1)])])]),wn(Vs("div",Sm,[Vs("div",Nm,[Cm,Vs("label",Em,[Ks(te(e.i18n("traffic_recording.filter_bpf"))+" ",1),Am]),Vs("div",Tm,[Om,wn(Vs("input",{name:"bpf_filter","onUpdate:modelValue":t[3]||(t[3]=t=>e.bpf_filter=t),class:"form-control input-sm","data-bpf":"bpf",autocomplete:"off",spellcheck:"false"},null,512),[[jo,e.bpf_filter]]),wn(Vs("span",{style:{margin:"0px",padding:"0",display:"block"},class:"invalid-feedback"},te(e.i18n("invalid_value")),513),[[Yo,e.invalid_bpf]])]),Pm,Vs("label",Um,te(e.i18n("traffic_recording.filter_examples"))+":",1),Im,jm])],512),[[Yo,e.show_menu]])])])):Ys("v-if",!0)])),footer:vl((()=>[wn(Vs("button",{type:"button",onClick:t[4]||(t[4]=(...t)=>e.apply&&e.apply(...t)),class:"btn btn-primary"},te(e.i18n("apply")),513),[[Yo,2!=e.data_available]]),wn(Vs("button",{type:"button",onClick:t[5]||(t[5]=(...t)=>e.close&&e.close(...t)),class:"btn btn-primary"},te(e.i18n("ok")),513),[[Yo,2==e.data_available]])])),_:1},8,["id","onApply"])},mm.__scopeId="data-v-0be978c4",mm.__file="http_src/vue/modal-traffic-extraction.vue";const Mm=e=>(pl("data-v-089b0491"),e=e(),fl(),e),Lm=Mm((()=>Vs("a",{target:"_newtab",href:"#",style:{},class:"nav-item text-muted"},[Vs("i",{class:"fas fa-question-circle",style:{"margin-left":"28rem","padding-top":"0.8rem"}})],-1))),Fm={class:"nav nav-tabs"},Rm=["disabled"],Dm={key:0,style:{"min-height":"8.5rem"}},zm={class:"form-group ms-2 me-2 mt-3 row"},qm={class:"col-form-label col-sm-4"},Bm={class:"col-sm-6"},Vm=["pattern"],Hm={key:1,style:{"min-height":"8.5rem"}},Gm={class:"form-group ms-2 me-2 mt-3 row"},Wm={class:"col-form-label col-sm-4"},Km={class:"col-sm-8"},Jm={value:"name"},Ym={value:"date"},Zm={class:"form-group ms-2 me-2 mt-3 row"},Xm={class:"col-form-label col-sm-4"},Qm={class:"col-sm-8"},ev=["value"],tv={class:"form-group ms-2 me-2 mt-3 row"},av={class:"custom-control custom-switch"},lv={class:"custom-control-label ms-1 form-check-label"},nv=["disabled"],sv=["disabled"],iv=["disabled"];var ov={__name:"modal-snapshot",props:{csrf:String,page:String},emits:["added_snapshot","deleted_snapshot","deleted_all_snapshots"],setup(e,{expose:t,emit:a}){const l=e,n=ma(null),s=ma("add"),i=ma(""),o=ma(!1),r=ma(""),c=ma(!0),u=ma(""),d=ma(""),_=ma([]),p=ma("date");let f=NtopUtils.REGEXES.singleword;const m=wi((()=>!new RegExp(f).test(d.value))),v=wi((()=>""==i.value));function h(){if(null!=l.page)return l.page;let e="alerts";return null!=window.location.toString().match(/alert_stats.lua/)||(e="flows"),e}let g=null;function b(){g!=p.value&&(_.value.sort(((e,t)=>"name"==p.value?e.name.localeCompare(t.name):e.utc-t.utc)),_.value.length>0&&(i.value=_.value[0]),g=p.value)}let y=!0;const w=async()=>{let e;if(c.value)e=ntopng_url_manager.get_url_params();else{let t=ntopng_url_manager.get_url_object();delete t.epoch_begin,delete t.epoch_end,e=ntopng_url_manager.obj_to_url_params(t)}let t=h(),n={snapshot_name:d.value,filters:e,page:t};n.csrf=l.csrf;let s=`${http_prefix}/lua/pro/rest/v2/add/filters/snapshot.lua`;try{let e={"Content-Type":"application/json"};await ntopng_utility.http_request(s,{method:"post",headers:e,body:JSON.stringify(n)}),y=!0}catch(e){console.error(e)}$(),a("added_snapshots",n)},x=()=>{$();let e=i.value.filters;if(1==o.value){let t=ntopng_status_manager.get_status(),a=ntopng_url_manager.get_url_object(e);a.epoch_begin=t.epoch_begin,a.epoch_end=t.epoch_end,e=ntopng_url_manager.obj_to_url_params(a)}ntopng_url_manager.replace_url_and_reload(e)},k=async e=>{let t=i.value.name;1==e&&(t="*");let n={snapshot_name:t,page:h()};n.csrf=l.csrf;let s=`${http_prefix}/lua/pro/rest/v2/delete/filters/snapshot.lua`;try{let e={"Content-Type":"application/json"};await ntopng_utility.http_request(s,{method:"post",headers:e,body:JSON.stringify(n)}),y=!0}catch(e){console.error(e)}a(1==e?"deleted_all_snapshots":"deleted_snapshot",n),$()},$=()=>{n.value.close()};t({show:()=>{!async function(){s.value="add",d.value="",c.value=!0,o.value=!1;let e=ntopng_status_manager.get_status(),t=S("snapshots.save_time"),a=ntopng_utility.from_utc_to_server_date_format(1e3*e.epoch_begin,"DD/MM/YYYY HH:mm"),l=ntopng_utility.from_utc_to_server_date_format(1e3*e.epoch_end,"DD/MM/YYYY HH:mm");t=t.replace(/\%begin_time/,a),t=t.replace(/\%end_time/,l),u.value=t;let n=S("snapshots.apply_time");if(n=n.replace(/\%begin_time/,a),n=n.replace(/\%end_time/,l),r.value=n,y){y=!1;let e=h(),t=`${http_prefix}/lua/pro/rest/v2/get/filters/snapshots.lua?page=${e}`,a=await ntopng_utility.http_request(t);_.value=ntopng_utility.object_to_array(a)}b(),_.value.length>0&&(i.value=_.value[0])}(),n.value.show()},close:$}),_n((()=>{}));const S=e=>i18n(e);return(e,t)=>(Os(),Ls(np,{onShowed:t[8]||(t[8]=e=>{}),ref_key:"modal_id",ref:n},{title:vl((()=>[Ks(te(S("snapshots.manage"))+" ",1),Lm])),body:vl((()=>[Vs("ul",Fm,[Vs("li",{class:"nav-item",onClick:t[0]||(t[0]=e=>s.value="add")},[Vs("a",{class:K(["nav-link",{active:"add"==s.value}]),href:"#"},te(S("snapshots.add")),3)]),Vs("li",{class:"nav-item",onClick:t[1]||(t[1]=e=>(e=>{0==_.value.length&&"select"==e||(s.value=e)})("select"))},[Vs("a",{disabled:0==_.value.length,class:K(["nav-link",{active:"select"==s.value,"not-allowed":0==_.value.length}]),href:"#"},te(S("snapshots.manage")),11,Rm)])]),"add"==s.value?(Os(),Ms("div",Dm,[Vs("div",zm,[Vs("label",qm,[Vs("b",null,te(S("snapshots.name"))+":",1)]),Vs("div",Bm,[wn(Vs("input",{pattern:ya(f),placeholder:"",required:"",type:"text",class:"form-control","onUpdate:modelValue":t[2]||(t[2]=e=>d.value=e)},null,8,Vm),[[jo,d.value]])])]),Ys(' <div class="form-group ms-2 me-2 mt-3 row"> '),Ys(' \t<div class="custom-control custom-switch"> '),Ys(' \t  <input type="checkbox" class="custom-control-input whitespace form-check-input" v-model="save_time"> '),Ys(' \t  <label class="custom-control-label ms-1 form-check-label">{{save_time_text}}</label> '),Ys(" \t</div> "),Ys(" </div>       ")])):Ys("v-if",!0),Ys(" action add "),"select"==s.value?(Os(),Ms("div",Hm,[Vs("div",Gm,[Vs("label",Wm,[Vs("b",null,te(S("snapshots.order_by")),1)]),Vs("div",Km,[wn(Vs("select",{class:"form-select",onChange:t[3]||(t[3]=e=>b()),"onUpdate:modelValue":t[4]||(t[4]=e=>p.value=e)},[Vs("option",Jm,te(S("snapshots.name")),1),Vs("option",Ym,te(S("snapshots.date")),1)],544),[[Ro,p.value]])])]),Vs("div",Zm,[Vs("label",Xm,[Vs("b",null,te(S("snapshots.select")),1)]),Vs("div",Qm,[wn(Vs("select",{class:"form-select","onUpdate:modelValue":t[5]||(t[5]=e=>i.value=e)},[(Os(!0),Ms(Ss,null,An(_.value,(e=>(Os(),Ms("option",{value:e},te(function(e){let t=1e3*e.utc,a=ntopng_utility.from_utc_to_server_date_format(t,"DD/MM/YYYY");return`${e.name} (${a})`}(e)),9,ev)))),256))],512),[[Ro,i.value]])])]),Vs("div",tv,[Vs("div",av,[wn(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input","onUpdate:modelValue":t[6]||(t[6]=e=>o.value=e)},null,512),[[Mo,o.value]]),Vs("label",lv,te(r.value),1)])])])):Ys("v-if",!0),Ys(" action select ")])),footer:vl((()=>["add"==s.value?(Os(),Ms("button",{key:0,type:"button",onClick:w,disabled:ya(m),class:"btn btn-primary"},te(S("snapshots.add")),9,nv)):Ys("v-if",!0),"select"==s.value?(Os(),Ms("button",{key:1,onClick:t[7]||(t[7]=e=>k(!0)),type:"button",style:{"text-align":"left","margin-left":"0px"},class:"btn btn-danger start-0 position-absolute ms-3"},te(S("snapshots.delete_all")),1)):Ys("v-if",!0),"select"==s.value?(Os(),Ms("button",{key:2,type:"button",onClick:k,disabled:ya(v),class:"btn btn-danger"},te(S("snapshots.delete")),9,sv)):Ys("v-if",!0),"select"==s.value?(Os(),Ms("button",{key:3,type:"button",onClick:x,disabled:ya(v),class:"btn btn-primary"},te(S("snapshots.apply")),9,iv)):Ys("v-if",!0)])),_:1},512))}};lp("\ninput[data-v-089b0491]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-089b0491] {\n  cursor: not-allowed;\n}\n"),ov.__scopeId="data-v-089b0491",ov.__file="http_src/vue/modal-snapshot.vue";const rv=e=>(pl("data-v-19c5b1f1"),e=e(),fl(),e),cv=["innerHTML"],uv={class:"form-group mb-3"},dv=["innerHTML"],_v={class:"alert_label"},pv={class:"form-check"},fv={class:"form-check-label"},mv={key:0,class:"form-check"},vv={class:"form-check-label"},hv={class:"form-check"},gv={class:"form-check-label"},bv={class:"form-check"},yv={class:"form-check-label"},wv={key:0,class:"exclude-domain-certificate"},xv={class:"alert_label"},kv={key:0,class:"form-check"},$v={class:"form-check-label whitespace"},Sv=["pattern","disabled"],Nv={key:1,class:"form-check"},Cv={class:"form-check-label whitespace"},Ev=["disabled","pattern"],Av={key:0,class:"form-group row"},Tv={class:"col-form-label"},Ov={class:"mt-1"},Pv=["placeholder"],Uv={class:"separator"},Iv=rv((()=>Vs("hr",{class:"separator"},null,-1))),jv={class:"form-group mb-3"},Mv={class:"custom-control custom-switch"},Lv={class:"custom-control-label"},Fv={class:"alert alert-warning border",role:"alert"},Rv=["disabled"];var Dv={__name:"modal-alerts-filter",props:{alert:Object,page:String},emits:["exclude"],setup(e,{expose:t,emit:a}){const l=e,n=ma(null),s=ma("any"),i=ma(!0),o=ma(null),r=ma(null),c=ma(null),u=i18n("details.comment_placeholder");jl((()=>l.alert),((e,t)=>{null!=e&&(s.value="any",i.value=!0,o.value=""==e.info?.value?null:d(e.info?.value),r.value=""==e.info?.issuerdn?null:e.info?.issuerdn)}));const d=e=>{let t=e,a=e.split("://");a.length>1&&(t=a[1]),t=t.split(":")[0];let l=t.split("www.");return l.length>1&&(t=l[1]),t=t.split("/")[0],t},_=()=>{if("domain"==s.value){let e=new RegExp(v);return null==o.value||0==e.test(o.value)}if("certificate"==s.value){let e=new RegExp(h);return null==r.value||0==e.test(r.value)}return!1},p=wi((()=>l.alert?.alert_name)),f=wi((()=>{let e={value:"",label:""};if("host"!=l.page||null==l.alert)return e;let t=l.alert;return e.value=t.ip.value,null!=t.vlan&&null!=t.vlan.value&&0!=t.vlan.value&&(e.value=e.value+"@"+t.vlan.value),e.label=t.ip.label?`${t.ip.label} (${t.ip.value})`:t.ip.value,e})),m=wi((()=>{let e={cli_value:"",cli_label:"",srv_value:"",srv_label:""};if("flow"!=l.page||null==l.alert)return e;let t=l.alert;e.cli_value=t.flow.cli_ip.value,e.srv_value=t.flow.srv_ip.value;let a=`${t.flow.cli_ip.label||t.flow.cli_ip.value}`,n=`${t.flow.srv_ip.label||t.flow.srv_ip.value}`;return null!=t.flow.vlan&&null!=t.flow.vlan.value&&0!=t.flow.vlan.value&&(a=`${a}@${t.flow.vlan.label}`,n=`${n}@${t.flow.vlan.label}`,e.cli_value=e.cli_value+"@"+t.flow.vlan.value,e.srv_value=e.srv_value+"@"+t.flow.vlan.value),a!==e.cli_value&&(a=`${a} (${e.cli_value})`),n!==e.srv_value&&(n=`${n} (${e.srv_value})`),e.cli_label=a,e.srv_label=n,e}));let v=NtopUtils.REGEXES.domain_name_not_strict,h=NtopUtils.REGEXES.tls_certificate;const g=()=>{let e=l.page,t="domain"==s.value||"certificate"==s.value?s.value:"host",n={delete_alerts:i.value,label:c.value,type:t},u=null;"host"==t?("host"==s.value?u=f.value.value:"server_host"==s.value?u=m.value.srv_value:"client_host"==s.value&&(u=m.value.cli_value),n.alert_addr=u,"flow"==e?n.flow_alert_key=l.alert.alert_id.value:"host"==e&&(n.host_alert_key=l.alert.alert_id.value)):"domain"==t?(n.delete_alerts=!1,n.alert_domain=o.value):"certificate"==t&&(n.delete_alerts=!1,n.alert_certificate=r.value),b(),a("exclude",n)},b=()=>{n.value.close()};t({show:()=>{c.value="",n.value.show()},close:b}),_n((()=>{}));const y=e=>i18n(e);return(t,a)=>(Os(),Ls(np,{onShowed:a[10]||(a[10]=e=>{}),ref_key:"modal_id",ref:n},{title:vl((()=>[Ks(te(y("exclude_check"))+": ",1),Vs("span",{innerHTML:ya(p)},null,8,cv)])),body:vl((()=>[Vs("div",uv,[Vs("div",null,[Vs("label",null,[Ks(te(y("exclude_check"))+' "',1),Vs("b",{innerHTML:ya(p)},null,8,dv),Ks('". '),Vs("span",_v,te(y("exclude_for"))+":",1)]),Vs("div",pv,[wn(Vs("input",{class:"form-check-input",type:"radio",value:"any","onUpdate:modelValue":a[0]||(a[0]=e=>s.value=e)},null,512),[[Fo,s.value]]),Vs("label",fv,[Vs("span",null,te(y("show_alerts.filter_disable_check")),1)])]),"host"==e.page?(Os(),Ms("div",mv,[wn(Vs("input",{class:"form-check-input",type:"radio",value:"host","onUpdate:modelValue":a[1]||(a[1]=e=>s.value=e)},null,512),[[Fo,s.value]]),Vs("label",vv,[Vs("span",null,te(ya(f).label),1)])])):Ys("v-if",!0),"flow"==e.page?(Os(),Ms(Ss,{key:1},[Vs("div",hv,[wn(Vs("input",{class:"form-check-input",type:"radio",value:"client_host","onUpdate:modelValue":a[2]||(a[2]=e=>s.value=e)},null,512),[[Fo,s.value]]),Vs("label",gv,[Vs("span",null,te(y("client"))+": "+te(ya(m).cli_label),1)])]),Vs("div",bv,[wn(Vs("input",{class:"form-check-input",type:"radio",value:"server_host","onUpdate:modelValue":a[3]||(a[3]=e=>s.value=e)},null,512),[[Fo,s.value]]),Vs("label",yv,[Vs("span",null,te(y("server"))+": "+te(ya(m).srv_label),1)])])],64)):Ys("v-if",!0)]),null!=o.value||null!=r.value?(Os(),Ms("div",wv,[Vs("label",null,[Vs("span",xv,te(y("check_exclusion.exclude_all_checks_for"))+":",1)]),null!=o.value?(Os(),Ms("div",kv,[wn(Vs("input",{class:"form-check-input",type:"radio",value:"domain","onUpdate:modelValue":a[4]||(a[4]=e=>s.value=e)},null,512),[[Fo,s.value]]),Vs("label",$v,[Vs("span",null,te(y("check_exclusion.domain"))+":",1)]),wn(Vs("input",{type:"text",pattern:ya(v),disabled:"domain"!=s.value,required:"","onUpdate:modelValue":a[5]||(a[5]=e=>o.value=e),class:"form-check-label custom-width"},null,8,Sv),[[jo,o.value]])])):Ys("v-if",!0),null!=r.value?(Os(),Ms("div",Nv,[wn(Vs("input",{class:"form-check-input",type:"radio",value:"certificate","onUpdate:modelValue":a[6]||(a[6]=e=>s.value=e)},null,512),[[Fo,s.value]]),Vs("label",Cv,[Vs("span",null,te(y("check_exclusion.tls_certificate"))+":",1)]),wn(Vs("input",{type:"text",disabled:"certificate"!=s.value,"onUpdate:modelValue":a[7]||(a[7]=e=>r.value=e),pattern:ya(h),required:"",class:"form-check-label custom-width"},null,8,Ev),[[jo,r.value]])])):Ys("v-if",!0)])):Ys("v-if",!0)]),"any"!=s.value?(Os(),Ms("div",Av,[Vs("div",null,[Vs("label",Tv,[Vs("b",null,te(y("show_alerts.add_a_comment")),1)])]),Vs("div",Ov,[wn(Vs("textarea",{placeholder:ya(u),id:"alert-label",name:"label",rows:"3",class:"form-control",type:"text","onUpdate:modelValue":a[8]||(a[8]=e=>c.value=e),maxlength:"450"},null,8,Pv),[[jo,c.value]])])])):Ys("v-if",!0),wn(Vs("hr",Uv,null,512),[[Yo,i.value]]),"domain"!=s.value&&"certificate"!=s.value?(Os(),Ms(Ss,{key:1},[wn(Vs("div",{class:"message alert alert-danger"},te(y("show_alerts.confirm_delete_filtered_alerts")),513),[[Yo,i.value]]),Iv,Vs("div",jv,[Vs("div",Mv,[wn(Vs("input",{type:"checkbox",class:"custom-control-input whitespace","onUpdate:modelValue":a[9]||(a[9]=e=>i.value=e)},null,512),[[Mo,i.value]]),Vs("label",Lv,te(y("delete_disabled_alerts")),1)])])],64)):Ys("v-if",!0),Vs("div",Fv,te(y("show_alerts.confirm_filter_alert")),1)])),footer:vl((()=>[Vs("button",{type:"button",onClick:g,disabled:_(),class:"btn btn-warning"},te(y("filter")),9,Rv)])),_:1},512))}};lp("\n.whitespace[data-v-19c5b1f1] {\n  margin-right: 0.2rem;\n}\n.custom-width[data-v-19c5b1f1] {\n  display: block;\n  min-width: 100%;\n}\ninput[data-v-19c5b1f1]:invalid {\n  border-color: #ff0000;\n}\n.exclude-domain-certificate[data-v-19c5b1f1] {\n  margin-top: 0.4rem;\n}\n"),Dv.__scopeId="data-v-19c5b1f1",Dv.__file="http_src/vue/modal-alerts-filter.vue";const zv={class:"form-group row mb-2"},qv={class:"col-sm-6"},Bv={class:"col-form-label"},Vv={class:"col-sm-6 mt-1"};var Hv={__name:"modal-acknowledge-alert",props:{context:Object,page:String},emits:["acknowledge"],setup(e,{expose:t,emit:a}){const l=e,n=e=>i18n(e),s=ma(null),i=ma(null),o=ma(""),r=ma("");async function c(){const e=`${http_prefix}/lua/rest/v2/acknowledge/${l.page}/alerts.lua`,t={csrf:l.context.csrf,ifid:l.context.ifid,label:o.value,row_id:u.value.row_id};await b.http_request(e,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}),a("acknowledge"),d()}_n((()=>{}));const u=ma({}),d=()=>{s.value.close()};return t({show:e=>{u.value=e;const t=$(`<span>${e.alert_id.label}</span>`);r.value=t.text().trim(),o.value=e.user_label;let a=n("show_alerts.confirm_acknowledge_alert");i.value.show(a,"alert-warning"),s.value.show()},close:d}),(e,t)=>(Os(),Ls(np,{ref_key:"modal_id",ref:s},{title:vl((()=>[Ks(te(n("show_alerts.acknowledge_alert"))+": "+te(r.value),1)])),body:vl((()=>[Vs("div",zv,[Vs("div",qv,[Vs("label",Bv,[Vs("b",null,te(n("show_alerts.add_a_comment")),1)])]),Vs("div",Vv,[wn(Vs("input",{"onUpdate:modelValue":t[0]||(t[0]=e=>o.value=e),class:"form-control",type:"text",maxlength:"255"},null,512),[[jo,o.value]])])]),Hs(S_,{no_close_button:!0,ref_key:"alert_info",ref:i},null,512)])),footer:vl((()=>[Vs("button",{type:"button",onClick:c,class:"btn btn-primary"},te(n("acknowledge")),1)])),_:1},512))},__file:"http_src/vue/modal-acknowledge-alert.vue"},Gv={__name:"modal-delete-alert",props:{context:Object,page:String},emits:["delete_alert"],setup(e,{expose:t,emit:a}){const l=e,n=e=>i18n(e),s=ma(null),i=ma(null),o=ma({});let r="historical";async function c(){const e=`${http_prefix}/lua/rest/v2/delete/${l.page}/alerts.lua`,t={csrf:l.context.csrf,ifid:l.context.ifid,status:r,row_id:o.value.row_id};await b.http_request(e,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}),a("delete_alert"),u()}_n((()=>{}));const u=()=>{s.value.close()};return t({show:(e,t)=>{o.value=e,r=t;let a=n("show_alerts.confirm_label_alert");i.value.show(a,"alert-danger"),s.value.show()},close:u}),(e,t)=>(Os(),Ls(np,{ref_key:"modal_id",ref:s},{title:vl((()=>[Ks(te(n("show_alerts.delete_alert")),1)])),body:vl((()=>[Hs(S_,{no_close_button:!0,ref_key:"alert_info",ref:i},null,512)])),footer:vl((()=>[Vs("button",{type:"button",onClick:c,class:"btn btn-primary"},te(n("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-alert.vue"};const Wv={class:"form-group row"},Kv={class:"col-sm-6"},Jv={class:"col-form-label"},Yv={class:"col-sm-6"},Zv=["value"],Xv={class:"form-group row mb-2"},Qv={class:"col-sm-6"},eh={class:"col-form-label"},th={class:"col-sm-6 mt-1"},ah=["value"];var lh={__name:"modal-acknowledge-alerts",props:{page:String,context:Object},emits:["acknowledge_alerts"],setup(e,{expose:t,emit:a}){const l=e,n=e=>i18n(e),s=ma(null),i=ma(null),o=ma(""),r=ma("");ma([]),_n((()=>{}));async function c(){const e=`${http_prefix}/lua/rest/v2/acknowledge/${l.page}/alerts.lua`,t=x.get_url_object(),n={csrf:l.context.csrf,...t};await b.http_post_request(e,n),a("acknowledge_alerts"),u()}const u=()=>{s.value.close()};return t({show:e=>{o.value=b.from_utc_to_server_date_format(1e3*e.epoch_begin),r.value=b.from_utc_to_server_date_format(1e3*e.epoch_end);let t=n("show_alerts.confirm_acknowledge_alerts");i.value.show(t,"alert-danger"),s.value.show()},close:u}),(e,t)=>(Os(),Ls(np,{ref_key:"modal_id",ref:s},{title:vl((()=>[Ks(te(n("acknowledge_alerts")),1)])),body:vl((()=>[Vs("div",Wv,[Vs("div",Kv,[Vs("label",Jv,[Vs("b",null,te(n("date_from")),1)])]),Vs("div",Yv,[Vs("input",{class:"form-control",type:"text",value:o.value,disabled:""},null,8,Zv)])]),Vs("div",Xv,[Vs("div",Qv,[Vs("label",eh,[Vs("b",null,te(n("date_from")),1)])]),Vs("div",th,[Vs("input",{class:"form-control",type:"text",value:r.value,disabled:""},null,8,ah)])]),Hs(S_,{no_close_button:!0,ref_key:"alert_info",ref:i},null,512)])),footer:vl((()=>[Vs("button",{type:"button",onClick:c,class:"btn btn-primary"},te(n("acknowledge")),1)])),_:1},512))},__file:"http_src/vue/modal-acknowledge-alerts.vue"};const nh={class:"form-group row"},sh={class:"col-sm-6"},ih={class:"col-form-label"},oh={class:"col-sm-6"},rh=["value"],ch={class:"form-group row"},uh={class:"col-sm-6"},dh={class:"col-form-label"},_h={class:"col-sm-6 mt-1"},ph=["value"],fh={class:"form-group filters-list mb-2"},mh={class:"form-group row"},vh={class:"col-sm-6"},hh={class:"col-form-label"},gh={class:"col-sm-6 mt-1"},bh=["value"];var yh={__name:"modal-delete-alerts",props:{page:String,context:Object},emits:["delete_alerts"],setup(e,{expose:t,emit:a}){const l=e,n=e=>i18n(e),s=ma(null),i=ma(null),o=ma(""),r=ma(""),c=ma([]);_n((()=>{}));async function u(){const e=`${http_prefix}/lua/rest/v2/delete/${l.page}/alerts.lua`,t=x.get_url_object(),n={csrf:l.context.csrf,...t};await b.http_post_request(e,n),a("delete_alerts"),d()}const d=()=>{s.value.close()};return t({show:e=>{o.value=b.from_utc_to_server_date_format(1e3*e.epoch_begin),r.value=b.from_utc_to_server_date_format(1e3*e.epoch_end);const t=Xd.tag_operator_label_dict;c.value=e.filters.map((e=>({label:e.label,value:`${t[e.operator]} ${e.value_label}`})));let a=n("show_alerts.confirm_delete_alerts");i.value.show(a,"alert-danger"),s.value.show()},close:d}),(e,t)=>(Os(),Ls(np,{ref_key:"modal_id",ref:s},{title:vl((()=>[Ks(te(n("delete_alerts")),1)])),body:vl((()=>[Vs("div",nh,[Vs("div",sh,[Vs("label",ih,[Vs("b",null,te(n("date_from")),1)])]),Vs("div",oh,[Vs("input",{class:"form-control",type:"text",value:o.value,disabled:""},null,8,rh)])]),Vs("div",ch,[Vs("div",uh,[Vs("label",dh,[Vs("b",null,te(n("date_from")),1)])]),Vs("div",_h,[Vs("input",{class:"form-control",type:"text",value:r.value,disabled:""},null,8,ph)])]),Vs("div",fh,[(Os(!0),Ms(Ss,null,An(c.value,(e=>(Os(),Ms("div",mh,[Vs("div",vh,[Vs("label",hh,[Vs("b",null,te(e.label),1)])]),Vs("div",gh,[Vs("input",{class:"form-control",type:"text",value:e.value,disabled:""},null,8,bh)])])))),256))]),Hs(S_,{no_close_button:!0,ref_key:"alert_info",ref:i},null,512)])),footer:vl((()=>[Vs("button",{type:"button",onClick:u,class:"btn btn-primary"},te(n("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-alerts.vue"};const wh={class:"row"},xh={class:"col-12"},kh={class:"mb-2"},$h={class:"w-100"},Sh={clas:"range-container d-flex flex-wrap"},Nh={class:"range-picker d-flex m-auto flex-wrap"},Ch={key:0,class:"ms-1 me-2"},Eh=["value"],Ah=["label"],Th=["value"],Oh=["title"],Ph=[Vs("i",{class:"fas fa-lg fa-link"},null,-1)],Uh=["title","href"],Ih=[Vs("i",{class:"fas fa-lg fa-file"},null,-1)],jh=["title"],Mh=[Vs("i",{class:"fas fa-lg fa-download"},null,-1)],Lh=["title"],Fh=[Vs("i",{class:"fas fa-lg fa-camera-retro"},null,-1)],Rh={class:"col-12"},Dh={class:"card card-shadow"},zh={class:"card-body"},qh={key:0,class:"row"},Bh={class:"col-12 mb-2",id:"chart-vue"},Vh={class:"card h-100 overflow-hidden"},Hh=Vs("div",null,null,-1),Gh=["title"],Wh=["onClick","title"],Kh={class:"card-footer"},Jh=Vs("i",{class:"fas fa fa-user-check"},null,-1),Yh=Vs("i",{class:"fas fa fa-trash"},null,-1);var Zh={__name:"page-alert-stats",props:{context:Object},setup(e){const t=e,a=e=>i18n(e),l=ma(null),n=ma(null),s=ma(null),i=ma(null),o=ma(null),r=ma(null),c=ma(null),u=ma(null),d=ma(null),_=ma(null),p=ma(null),f=ma(null),m=ma(0),v=ma(!1),g=ma(""),w=ma(null),k=t.context.ifid;let S;const C=ma(""),E=ma("");let A=`${http_prefix}/lua/pro/rest/v2/get/db/ts.lua`;const T=M.typeChart.TS_COLUMN,O=ma([]),P=ma([]),U=ma([a("show_alerts.alerts_info")]),I=ma({}),j=ma([]),L=ma(!1),F=wi((()=>{if(!t.context.show_chart||null==s.value)return"";if(m.value<0)throw"never run";const e=t.context.download.endpoint;let a=x.get_url_object(),l=s.value.get_columns_defs().filter((e=>e.visible)).map((e=>e.id)).join(",");a.format="txt",a.visible_columns=l;const n=x.obj_to_url_params(a);return`${location.origin}/${e}?${n}`}));dn((async()=>{g.value=`<div class="alert alert-success alert-dismissable"><span>${i18n("no_alerts_require_attention")}</span></div>`,t.context.is_va&&b.check_and_set_default_time_interval("day"),async function(){S=x.get_url_entry("page");const e=x.get_url_entry("status");null==S&&(S="all");"engaged"==e&&"flow"==S&&x.set_key_to_url("status","historical");A="snmp_device"==S?`${http_prefix}/lua/pro/rest/v2/get/snmp/device/alert/ts.lua`:`${http_prefix}/lua/rest/v2/get/${S}/alert/ts.lua`,I.value={value:x.get_url_entry("query_preset"),count:x.get_url_entry("count")},null==I.value.value&&(I.value.value="");C.value=`alert_${S}`,E.value=`${C.value}_${I.value.value}`}(),function(){null==x.get_url_entry("ifid")&&x.set_key_to_url("ifid",k);if(null==x.get_url_entry("epoch_begin")||null==x.get_url_entry("epoch_end")){let e=Number.parseInt((Date.now()-18e5)/1e3),t=Number.parseInt(Date.now()/1e3);x.set_key_to_url("epoch_begin",e),x.set_key_to_url("epoch_end",t)}"flow"==x.get_url_entry("page")&&"engaged"==x.get_url_entry("status")&&x.set_key_to_url("status","historical")}(),await async function(){if(!t.context.is_ntop_enterprise_l||"engaged"==x.get_url_entry("status"))return void h.ready(D());let e=`${http_prefix}/lua/pro/rest/v2/get/alert/preset/consts.lua?page=${S}`,a=await b.http_request(e);if(null==a||0==a.length)return j.value=[],x.set_key_to_url("query_preset",""),x.set_key_to_url("count",""),void h.ready(D());j.value=a[0].list.map((e=>({value:e.id,name:e.name,count:e.count,builtin:!0}))),a.length>1&&a[1].list.forEach((e=>{let t={value:e.id,name:e.name,count:e.count,is_preset:!0};j.value.push(t)}));if(null==I.value||""==I.value.value)I.value=j.value[0];else{let e=j.value.find((e=>e.value==I.value.value));I.value=e||j.value[0]}x.set_key_to_url("query_preset",I.value.value),x.set_key_to_url("count",I.value.count),h.ready(D())}(),L.value=!0,await z()})),_n((async()=>{!async function(){await h.on_ready("range_picker"),n.value.register_status(),y.on_status_change(S,(e=>{x.get_url_params(),s.value.refresh_table(),z()}),!1)}()}));function D(){return"page-alert-stats_query_presets"}async function z(e){1==t.context.show_cards&&1!=I.value.is_preset&&(O.value=await q("overview"))}async function q(e,a){const l=x.get_url_params(),n=`${t.context.endpoint_cards}?${l}&action=${e}`;return(await b.http_request(n)).map((t=>({id:t.name,label:t.label,title:t.tooltip,show_spinner:!1,data_loaded:"overview"!=e,options:t.value})))}const B=(e,t)=>a=>{!async function(e,t){if(e.show_spinner=!0,await Ja(),0==e.data_loaded){let a=await q(e.id);e.options=a.find((t=>t.id==e.id)).options,await Ja(),P.value[t].load_menu()}e.show_spinner=!1}(e,t)};function V(){$(`#${E.value}`).on("click","a.tag-filter",(async function(e){G(e,$(this))}))}const H=async e=>{await h.on_ready("page-alert-stats_query_presets");let a={l7_proto:(e,t)=>{let a="";if(void 0!==e.confidence){const t=e.confidence;a="DPI"==t?`<span class="badge bg-success" title="${t}">${t}</span>`:`<span class="badge bg-warning" title="${t}">${t}</span>`}return R.filterize("l7proto",e.value,e.label)+" "+`${a}`},info:(e,t)=>{let a="";return e.value&&(a=`<button class="btn btn-light btn-sm border ms-1" data-placement="bottom" onclick="\n                    const textArea = document.createElement('textarea');\n                    textArea.value = '${e.value}';    \n                    textArea.style.position = 'absolute';\n                    textArea.style.left = '-999999px';    \n                    document.body.prepend(textArea);\n                    textArea.select();\n                    document.execCommand('copy');"\n                    ><i class="fas fa-copy"></i></button>`),`${a} ${R.filterize("info",e.value,e.label)}`}},l=I.value.is_preset&&e.length>0;return l&&(e=[e[0]].concat(t.context.columns_def)),e.forEach((e=>{if(e.render_func=a[e.data_field],"actions"==e.id){if(1==l)return void(e.button_def_array=[{id:"expand",icon:"fas fa fa-search-plus",class:["link-button"],title_i18n:"db_search.expand_button",event_id:"click_button_expand"}]);const a={snmp_info:t.context.actions.show_snmp_info,info:t.context.actions.show_info,historical_data:t.context.actions.show_historical,acknowledge:t.context.actions.show_acknowledge,disable:t.context.actions.show_disable,settings:t.context.actions.show_settings,remove:t.context.actions.show_delete};e.button_def_array.forEach((e=>{a[e.id]||e.class.push("link-disabled")}))}})),e},G=(e,t)=>{let a,l;e.stopPropagation();let n="eq";null!=t.data("tagKey")&&(a=t.data("tagKey")),null!=t.data("tagRealvalue")?l=t.data("tagRealvalue"):null!=t.data("tagValue")&&(l=t.data("tagValue")),null!=t.data("tagOperator")&&(n=t.data("tagOperator")),W({id:a,value:l,operator:n})};function W(e){if(!r.value.is_filter_defined(e))throw`Filter ${e.value} not defined`;ntopng_events_manager.emit_custom_event(N.SHOW_MODAL_FILTERS,e)}const K=()=>x.get_url_object();function J(e){x.set_key_to_url("page",e.page_name),null!=window.location.toString().match(/alert_stats.lua/)&&function(){let e=y.get_status().filters;if(null==e)return;x.delete_params(e.map((e=>e.id)))}(),x.reload_url()}function Y(){const e=$(c.value),t=document.createElement("input");t.value=location.href,document.body.appendChild(t),t.select(),document.execCommand("copy"),document.body.removeChild(t),e.attr("title",`${a("copied")}!`).tooltip("dispose").tooltip().tooltip("show")}function Z(){i.value.show()}function X(){o.value.show()}async function Q(e){e.csrf=t.context.csrf;let l=`${http_prefix}/lua/pro/rest/v2/add/alert/exclusion.lua`;try{let t={"Content-Type":"application/json"};await b.http_request(l,{method:"post",headers:t,body:JSON.stringify(e)});x.get_url_params();setTimeout((()=>{ntopng_events_manager.emit_custom_event(N.SHOW_GLOBAL_ALERT_INFO,{text_html:a("check_exclusion.disable_warn"),type:"alert-info",timeout:2})}),1e3)}catch(e){console.error(e)}}function ee(){let e=s.value,t=n.value;setTimeout((()=>{e.refresh_table(),t.update_chart()}),1e3)}function ae(e){null!=e?.rows&&(v.value=0==e.rows.length)}function le(e){let t={click_button_snmp_info:_e,click_button_info:pe,click_button_historical_flows:de,click_button_acknowledge:ue,click_button_disable:ce,click_button_settings:re,click_button_remove:oe,click_button_expand:ne};null!=t[e.event_id]&&t[e.event_id](e)}function ne(e){const t=e.row;x.set_key_to_url("query_preset",""),x.set_key_to_url("count","");let a=y.get_status().filters,l=t?.filter?.tag_filters;l?.length>0&&(l=l.map((e=>({id:e.id,operator:e.op,value:e.value}))),a=a.concat(l));let n={};a.forEach((e=>n[`${e.id}_${e.operator}_${e.value}`]=e)),a=b.object_to_array(n);let s=Xd.get_filters_object(a);x.add_obj_to_url(s),x.reload_url()}function se(){let e=y.get_status();p.value.show(e)}function ie(){let e=y.get_status();f.value.show(e)}function oe(e){const t=e.row;let a=fe();_.value.show(t,a)}function re(e){const t=e.row,a=$(t.msg.configset_ref).attr("href");window.location.href=a}function ce(e){!function(e){w.value=e,u.value.show()}(e.row)}function ue(e){const a=e.row;d.value.show(a,t.context)}function de(e){const t=e.row;t.link_to_past_flows?window.location.href=t.link_to_past_flows:window.location.href=`${http_prefix}/lua/pro/db_search.lua`}function _e(e){const t=e.row;let a="";a=null!=t.port.value?`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${t.ip}&snmp_port_idx=${t.port.value}`:`${http_prefix}/lua/pro/enterprise/snmp_device_details.lua?host=${t.ip}`,window.open(a,"_blank")}function pe(e){const a=e.row;let l=fe(),n={page:S,status:l,row_id:a.row_id,tstamp:a.tstamp.value},s=x.obj_to_url_params(n);const i=`${t.context.alert_details_url}?${s}`;window.open(i,"_blank")}function fe(){let e=x.get_url_entry("status");return null!=e&&""!=e||(e="historical"),e}return(t,m)=>(Os(),Ms(Ss,null,[Hs(n_,{id:"navbar",main_title:e.context.navbar.main_title,base_url:e.context.navbar.base_url,help_link:e.context.navbar.help_link,items_table:e.context.navbar.items_table,onClick_item:J},null,8,["main_title","base_url","help_link","items_table"]),Vs("div",wh,[Vs("div",xh,[Vs("div",kh,[Vs("div",$h,[Vs("div",Sh,[Vs("div",Nh,[Hs(S_,{id:"alert_info",global:!0,ref_key:"alert_info",ref:l},null,512),Hs(mm,{id:"modal_traffic_extraction",ref_key:"modal_traffic_extraction",ref:i},null,512),Hs(ov,{ref_key:"modal_snapshot",ref:o,csrf:e.context.csrf},null,8,["csrf"]),L.value?(Os(),Ls(Wp,{key:0,ref_key:"range_picker",ref:r,id:"range_picker"},{begin:vl((()=>[j.value.length>0?(Os(),Ms("div",Ch,[wn(Vs("select",{class:"me-2 form-select","onUpdate:modelValue":m[0]||(m[0]=e=>I.value=e),onChange:m[1]||(m[1]=e=>(x.get_url_params(),x.set_key_to_url("query_preset",I.value.value),x.set_key_to_url("count",I.value.count),void x.reload_url()))},[(Os(!0),Ms(Ss,null,An(j.value,(e=>(Os(),Ms(Ss,null,[1==e.builtin?(Os(),Ms("option",{key:0,value:e},te(e.name),9,Eh)):Ys("v-if",!0)],64)))),256)),"analysis"!=ya(S)?(Os(),Ms("optgroup",{key:0,label:a("queries.queries")},[(Os(!0),Ms(Ss,null,An(j.value,(e=>(Os(),Ms(Ss,null,[e.builtin?Ys("v-if",!0):(Os(),Ms("option",{key:0,value:e},te(e.name),9,Th))],64)))),256))],8,Ah)):Ys("v-if",!0)],544),[[Ro,I.value]])])):Ys("v-if",!0)])),extra_range_buttons:vl((()=>[e.context.show_permalink?(Os(),Ms("button",{key:0,class:"btn btn-link btn-sm",onClick:Y,title:a("graphs.get_permanent_link"),ref_key:"permanent_link_button",ref:c},Ph,8,Oh)):Ys("v-if",!0),e.context.show_download?(Os(),Ms("a",{key:1,class:"btn btn-link btn-sm",id:"dt-btn-download",title:a("graphs.download_records"),href:ya(F)},Ih,8,Uh)):Ys("v-if",!0),e.context.show_pcap_download?(Os(),Ms("button",{key:2,class:"btn btn-link btn-sm",onClick:Z,title:a("traffic_recording.pcap_download")},Mh,8,jh)):Ys("v-if",!0),e.context.is_ntop_enterprise_m?(Os(),Ms("button",{key:3,class:"btn btn-link btn-sm",onClick:X,title:a("datatable.manage_snapshots")},Fh,8,Lh)):Ys("v-if",!0)])),_:1},512)):Ys("v-if",!0)])])])])]),Vs("div",Rh,[Vs("div",Dh,[Vs("div",zh,[e.context.show_chart?(Os(),Ms("div",qh,[Vs("div",Bh,[Vs("div",Vh,[Hs(C_,{ref_key:"chart",ref:n,id:"chart_alert_stats",chart_type:ya(T),base_url_request:ya(A),register_on_status_change:!1},null,8,["chart_type","base_url_request"])])]),Hh,Hs(rm,{ref_key:"table_alerts",ref:s,table_config_id:C.value,table_id:E.value,csrf:e.context.csrf,f_map_columns:H,get_extra_params_obj:K,display_message:v.value,message_to_display:g.value,onLoaded:V,onCustom_event:le,onRows_loaded:ae},{custom_header:vl((()=>[(Os(!0),Ms(Ss,null,An(O.value,((e,t)=>(Os(),Ls(Rd,{f_on_open:B(e,t),ref_for:!0,ref:e=>{P.value[t]=e}},{title:vl((()=>[Hs(cm,{show:e.show_spinner,size:"1rem",class:"me-1"},null,8,["show"]),Vs("a",{class:"ntopng-truncate",title:e.title},te(e.label),9,Gh)])),menu:vl((()=>[(Os(!0),Ms(Ss,null,An(e.options,(e=>(Os(),Ms("a",{style:{cursor:"pointer",display:"block"},onClick:t=>function(e,t){t.stopPropagation(),W({id:e.key,value:e.value,operator:e.operator})}(e,t),class:"ntopng-truncate tag-filter",title:e.value},te(e.label),9,Wh)))),256))])),_:2},1032,["f_on_open"])))),256)),Ys(" Dropdown columns ")])),_:1},8,["table_config_id","table_id","csrf","display_message","message_to_display"])])):Ys("v-if",!0)]),Ys(" card body "),wn(Vs("div",Kh,[e.context.show_acknowledge_all?(Os(),Ms("button",{key:0,onClick:se,class:"btn btn-primary me-1"},[Jh,Ks(" "+te(a("acknowledge_alerts")),1)])):Ys("v-if",!0),e.context.show_delete_all?(Os(),Ms("button",{key:1,onClick:ie,class:"btn btn-danger"},[Yh,Ks(" "+te(a("delete_alerts")),1)])):Ys("v-if",!0)],512),[[Yo,"all"!=ya(S)]]),Ys(" card footer ")]),Ys(" card-shadow ")]),Ys(" div col "),Hs(fm,{note_list:U.value},null,8,["note_list"])]),Ys(" div row "),Hs(Hv,{ref_key:"modal_acknowledge",ref:d,context:e.context,page:ya(S),onAcknowledge:ee},null,8,["context","page"]),Hs(Gv,{ref_key:"modal_delete",ref:_,context:e.context,page:ya(S),onDelete_alert:ee},null,8,["context","page"]),Hs(lh,{ref_key:"modal_acknowledge_alerts",ref:p,context:e.context,page:ya(S),onAcknowledge_alerts:ee},null,8,["context","page"]),Hs(yh,{ref_key:"modal_delete_alerts",ref:f,context:e.context,page:ya(S),onDelete_alerts:ee},null,8,["context","page"]),Hs(Dv,{alert:w.value,page:ya(S),onExclude:Q,ref_key:"modal_alerts_filter",ref:u},null,8,["alert","page"])],64))},__file:"http_src/vue/page-alert-stats.vue"};const Xh={class:"row"},Qh={class:"col-12"},eg={class:"mb-2"},tg={class:"w-100"},ag={clas:"range-container d-flex flex-wrap"},lg={class:"range-picker d-flex m-auto flex-wrap"},ng={class:"ms-1 me-2"},sg=["value"],ig=["label"],og=["value"],rg=["title"],cg=[Vs("i",{class:"fas fa-lg fa-link"},null,-1)],ug=["title","href"],dg=[Vs("i",{class:"fas fa-lg fa-file"},null,-1)],_g=["title"],pg=[Vs("i",{class:"fas fa-lg fa-download"},null,-1)],fg=["title"],mg=[Vs("i",{class:"fas fa-lg fa-camera-retro"},null,-1)],vg={class:"col-12"},hg={class:"card card-shadow"},gg={class:"card-body"},bg={class:"row"},yg={key:0,class:"col-12 mb-2",id:"chart-vue"},wg=["title"],xg=["onClick","title"],kg={key:0,class:"card-footer"},$g={key:0,id:"dt-btn-acknowledge",disabled:!0,"data-bs-target":"#dt-acknowledge-modal","data-bs-toggle":"modal",class:"btn btn-primary me-1"},Sg=Vs("i",{class:"fas fa fa-user-check"},null,-1),Ng={key:1,id:"dt-btn-delete",disabled:!0,"data-bs-target":"#dt-delete-modal","data-bs-toggle":"modal",class:"btn btn-danger"},Cg=Vs("i",{class:"fas fa fa-trash"},null,-1);var Eg={__name:"page-flow-historical",props:{context:Object},setup(e){const t=e,l=e=>i18n(e),n=ma(null),s=ma(null),i=ma(null),o=ma(null),r=ma(null),c=ma(null),u=ma(null),d=ma(null),_=ma(null),p=ma(null),f=ma(null),v=t.context.ifid,g=ma(""),w=ma(""),k=wi((()=>{if(null==P.value?.value)return w.value;return`${w.value}_${P.value.value}`})),S=wi((()=>{if(z.value<0)throw"never run";const e=t.context.download.endpoint;let a=x.get_url_object(),l=i.value.get_columns_defs().filter((e=>e.visible)).map((e=>e.id)).join(",");a.format="txt",a.visible_columns=l;const n=x.obj_to_url_params(a);return`${location.origin}/${e}?${n}`}));let C=`${http_prefix}/lua/pro/rest/v2/get/db/ts.lua`;const E=wi((()=>"topk-timeseries"==t.context?.chart_type?"height:450px!important":"height:300px!important")),A=wi((()=>"topk-timeseries"==t.context?.chart_type?M.typeChart.TS_STACKED:M.typeChart.TS_COLUMN)),T=ma([]),O=ma([]),P=ma({}),U=ma([]);ma([]);const I=ma(!1),j=ma(!1),L=ma(l("datatable.aggregated")),F=ma(null),D=ma(!1),z=ma(0);function q(e){let t=e?.chart;return null!=t&&t.length>0?t[0]:{}}dn((async()=>{!function(){g.value=x.get_url_entry("page"),null==g.value&&(g.value="overview");C=`${http_prefix}/lua/pro/rest/v2/get/db/ts.lua`,P.value={value:x.get_url_entry("query_preset")},null==P.value.value&&(P.value.value="");w.value="flow_historical";"true"==x.get_url_entry("aggregated")&&(w.value="flow_historical_aggregated",j.value=!0,F.value="hour",D.value=!0)}(),function(){null==x.get_url_entry("ifid")&&x.set_key_to_url("ifid",v);if(0==j.value)b.check_and_set_default_time_interval();else{const e=e=>{let t=b.get_timeframe_from_timeframe_id(F.value);return e.epoch_end-e.epoch_begin<t},t=b.check_and_set_default_time_interval(F.value,e);null!=t&&(t.epoch_begin=b.round_time_by_timeframe_id(t.epoch_begin,F.value),t.epoch_end=b.round_time_by_timeframe_id(t.epoch_end,F.value),x.set_key_to_url("epoch_begin",t.epoch_begin),x.set_key_to_url("epoch_end",t.epoch_end))}"flow"==x.get_url_entry("page")&&"engaged"==x.get_url_entry("status")&&x.set_key_to_url("status","historical");null==x.get_url_entry("aggregated")&&x.set_key_to_url("aggregated","false")}(),await async function(){let e=`${http_prefix}/lua/pro/rest/v2/get/db/preset/consts.lua?page=${g.value}&aggregated=${j.value}`,t=await b.http_request(e);U.value=t[0].list.map((e=>{let t=q(e);return{value:e.id,name:e.name,count:t?.params?.count,chart_config:t,builtin:!0}})),t.length>1&&t[1].list.forEach((e=>{let t=q(e),a={value:e.id,name:e.name,count:t?.params?.count,chart_config:t,is_preset:!0};U.value.push(a)}));if(null==P.value||""==P.value.value)P.value=U.value[0];else{let e=U.value.find((e=>e.value==P.value.value));P.value=e||U.value[0]}x.set_key_to_url("query_preset",P.value.value),x.set_key_to_url("count",P.value.count),h.ready(pe())}(),I.value=!0})),_n((async()=>{!async function(){await h.on_ready("range_picker"),t.context.show_chart&&s.value.register_status();y.on_status_change(g.value,(e=>{x.get_url_params(),i.value.refresh_table(),G(),z.value+=1}),!1)}(),G()}));const B=async e=>{await h.on_ready(pe());let t=P.value.chart_config?.unit_measure;return null==t&&(t="number"),e.yaxis.labels.formatter=m.getFormatter(t),e};function H(){0==j.value?x.delete_params(["aggregated"]):x.set_key_to_url("aggregated","true"),x.reload_url()}async function G(e){1==t.context.show_cards&&(T.value=await W("overview"))}async function W(e,t){const a=x.get_url_params(),l=`${http_prefix}/lua/pro/rest/v2/get/flow/top.lua?${a}&action=${e}`;return(await b.http_request(l)).map((t=>({id:t.action||t.name,label:t.label,title:t.tooltip,show_spinner:!1,data_loaded:"overview"!=e,options:t.value})))}const K=(e,t)=>a=>{!async function(e,t){if(e.show_spinner=!0,await Ja(),0==e.data_loaded){let a=await W(e.id);e.options=a.find((t=>t.id==e.id)).options,await Ja(),O.value[t].load_menu()}e.show_spinner=!1}(e,t)};function J(){$(`#${k.value}`).on("click","a.tag-filter",(async function(e){Z(e,$(this))}))}const Y=async e=>{await h.on_ready(pe());const l=(e,t,a)=>void 0!==t&&0!=t.value?`<a class='tag-filter' data-tag-key='${e}' data-tag-value='${t.value}' title='${t.title}' href='javascript:void(0)'>${t.label}</a>`:"",n=(e,t,l)=>null==t||0==t?"":`<a class='tag-filter' data-tag-key='${e}' data-tag-value='${t}' href='javascript:void(0)'>${a.msecToTime(t)}</a>`,s=(e,t,a)=>null==t||0==t?"":`<a class='tag-filter' data-tag-key='${e}' data-tag-value='${t.value}' href='javascript:void(0)'>${t.title}</a>`;let i={first_seen:(e,t)=>{if(void 0!==e)return e.time},DURATION:(e,t)=>a.secondsToTime(e),THROUGHPUT:(e,t)=>m.getFormatter("bps_no_scale")(e),l7proto:(e,t)=>{let a="";if(void 0!==e.confidence){const t=e.confidence;a="DPI"==t?`<span class="badge bg-success" title="${t}">${t}</span>`:`<span class="badge bg-warning" title="${t}">${t}</span>`}return R.filterize("l7proto",e.value,e.label)+" "+`${a}`},asn:(e,t)=>l("asn",e),cli_asn:(e,t)=>l("cli_asn",e),srv_asn:(e,t)=>l("srv_asn",e),flow_risk:(e,t)=>{if(null==e)return"";let a=[];for(let t=0;t<e.length;t++){const l=e[t],n=l.label||l.value,s=l.help;a.push(`${n} ${s}`)}return a.join(", ")},cli_nw_latency:(e,t)=>n("cli_nw_latency",e),srv_nw_latency:(e,t)=>n("srv_nw_latency",e),major_connection_state:(e,t)=>s("major_connection_state",e),minor_connection_state:(e,t)=>s("minor_connection_state",e),info:(e,t)=>null==e?"":`<a class='tag-filter' data-tag-key='info' data-tag-value='${e.title}' title='${e.title}' href='javascript:void(0)'>${e.label}</a>`};return e=e.filter((e=>0!=t.context?.visible_columns[e.data_field])),P.value.is_preset&&e.length>0&&(e=[e[0]].concat(t.context.columns_def)),e.forEach((e=>{if(e.render_func=i[e.data_field],"actions"==e.id){const a={info:t.context.actions.show_info,historical_data:t.context.actions.show_historical,flow_alerts:t.context.actions.show_alerts,pcap_download:t.context.actions.show_pcap_download,row_data:t.context.is_enterprise_xl&&j.value};e.button_def_array.forEach((e=>{null!=a[e.id]&&0==a[e.id]&&e.class.push("link-disabled")}))}})),e},Z=(e,t)=>{let a,l;e.stopPropagation();let n="eq";null!=t.data("tagKey")&&(a=t.data("tagKey")),null!=t.data("tagRealvalue")?l=t.data("tagRealvalue"):null!=t.data("tagValue")&&(l=t.data("tagValue")),null!=t.data("tagOperator")&&(n=t.data("tagOperator")),X({id:a,value:l,operator:n})};function X(e){c.value.is_filter_defined(e)?ntopng_events_manager.emit_custom_event(N.SHOW_MODAL_FILTERS,e):(x.set_key_to_url("query_preset",""),x.set_key_to_url(e.id,`${e.value};${e.operator}`),x.reload_url())}const Q=()=>x.get_url_object();function ee(e){x.set_key_to_url("page",e.page_name),x.reload_url()}function ae(){const e=$(u.value),t=document.createElement("input");t.value=location.href,document.body.appendChild(t),t.select(),document.execCommand("copy"),document.body.removeChild(t),e.attr("title",`${l("copied")}!`).tooltip("dispose").tooltip().tooltip("show")}function le(){o.value.show()}function ne(){r.value.show()}async function se(e){e.csrf=t.context.csrf;let a=`${http_prefix}/lua/pro/rest/v2/add/alert/exclusion.lua`;try{let t={"Content-Type":"application/json"};await b.http_request(a,{method:"post",headers:t,body:JSON.stringify(e)});x.get_url_params();setTimeout((()=>{ntopng_events_manager.emit_custom_event(N.SHOW_GLOBAL_ALERT_INFO,{text_html:l("check_exclusion.disable_warn"),type:"alert-info",timeout:2})}),1e3)}catch(e){console.error(e)}}function ie(e){let t=i.value,a=s.value;setTimeout((()=>{e||t.refresh_table(),a.update_chart()}),1e3)}function oe(e){let t={click_button_info:re,click_button_flow_alerts:de,click_button_historical_flows:ue,click_button_pcap_download:ce,click_button_flows:_e};null!=t[e.event_id]&&t[e.event_id](e)}function re(e){const t=e.row,a=`${http_prefix}/lua/pro/db_flow_details.lua?row_id=${t.rowid}&tstamp=${t.tstamp}&instance_name=${t.NTOPNG_INSTANCE_NAME}`;window.open(a,"_blank")}function ce(e){const t=e.row,a={epoch_begin:t?.filter?.epoch_begin,epoch_end:t?.filter?.epoch_end};o.value.show(t?.filter?.bpf,a)}function ue(e){const t=e.row;let a={};for(let e in t){let l=e;if(null!=t[e].tag_key&&""!=t[e].tag_key&&(l=t[e].tag_key),null==t[e].value&&""!=t[e].value)continue;let n=`${t[e].value};eq`;a[l]=n}x.set_key_to_url("query_preset",""),x.add_obj_to_url(a),x.reload_url()}function de(e){const t=e.row;t.alerts_url&&x.go_to_url(t.alerts_url)}function _e(e){const t=e.row,a=t.filter.epoch_begin,l=t.filter.epoch_end,n=t.flow.cli_ip.value,s=t.flow.srv_ip.value,i=t.flow.srv_port,o=t.probe_ip.value,r=t.NTOPNG_INSTANCE_NAME,c=t.vlan_id.value;let u=0!=c;const d=t.output_snmp.value;let _=0!=d;const p=t.input_snmp.value;let f=`${http_prefix}/lua/pro/db_search.lua?aggregated=false&epoch_begin=${a}&epoch_end=${l}&cli_ip=${n};eq&srv_ip=${s};eq&srv_port=${i};eq&probe_ip=${o};eq&instance_name=${r}`;u&&(f+=`&vlan_id=${c};eq`),0!=p&&(f+=`&input_snmp=${p};eq`),_&&(f+=`&output_snmp=${d};eq`),x.go_to_url(f)}function pe(){return"page-flow-historical_query_presets"}return(a,m)=>(Os(),Ms(Ss,null,[Hs(n_,{id:"navbar",main_title:e.context.navbar.main_title,base_url:e.context.navbar.base_url,help_link:e.context.navbar.help_link,items_table:e.context.navbar.items_table,onClick_item:ee},null,8,["main_title","base_url","help_link","items_table"]),Vs("div",Xh,[Vs("div",Qh,[Vs("div",eg,[Vs("div",tg,[Vs("div",ag,[Vs("div",lg,[Hs(S_,{id:"alert_info",global:!0,ref_key:"alert_info",ref:n},null,512),I.value?(Os(),Ls(Wp,{key:0,ref_key:"range_picker",ref:c,id:"range_picker",min_time_interval_id:F.value,round_time:D.value},{begin:vl((()=>[t.context.is_enterprise_xl?(Os(),Ls($f,{key:0,value:j.value,"onUpdate:value":m[0]||(m[0]=e=>j.value=e),class:"me-2 mt-1",change_label_side:!0,label:L.value,style:{},onChange_value:H},null,8,["value","label"])):Ys("v-if",!0),Vs("div",ng,[wn(Vs("select",{class:"me-2 form-select",style:{"min-width":"8rem"},"onUpdate:modelValue":m[1]||(m[1]=e=>P.value=e),onChange:m[2]||(m[2]=e=>(x.get_url_params(),x.set_key_to_url("query_preset",P.value.value),x.set_key_to_url("count",P.value.count),void x.reload_url()))},[(Os(!0),Ms(Ss,null,An(U.value,(e=>(Os(),Ms(Ss,null,[1==e.builtin?(Os(),Ms("option",{key:0,value:e},te(e.name),9,sg)):Ys("v-if",!0)],64)))),256)),"analysis"!=g.value?(Os(),Ms("optgroup",{key:0,label:l("queries.queries")},[(Os(!0),Ms(Ss,null,An(U.value,(e=>(Os(),Ms(Ss,null,[e.builtin?Ys("v-if",!0):(Os(),Ms("option",{key:0,value:e},te(e.name),9,og))],64)))),256))],8,ig)):Ys("v-if",!0)],544),[[Ro,P.value]])])])),extra_range_buttons:vl((()=>[e.context.show_permalink?(Os(),Ms("button",{key:0,class:"btn btn-link btn-sm",onClick:ae,title:l("graphs.get_permanent_link"),ref_key:"permanent_link_button",ref:u},cg,8,rg)):Ys("v-if",!0),e.context.show_download?(Os(),Ms("a",{key:1,class:"btn btn-link btn-sm",title:l("graphs.download_records"),href:ya(S)},dg,8,ug)):Ys("v-if",!0),e.context.show_pcap_download?(Os(),Ms("button",{key:2,class:"btn btn-link btn-sm",onClick:le,title:l("traffic_recording.pcap_download")},pg,8,_g)):Ys("v-if",!0),e.context.is_ntop_enterprise_m?(Os(),Ms("button",{key:3,class:"btn btn-link btn-sm",onClick:ne,title:l("datatable.manage_snapshots")},mg,8,fg)):Ys("v-if",!0)])),_:1},8,["min_time_interval_id","round_time"])):Ys("v-if",!0)])])])])]),Vs("div",vg,[Vs("div",hg,[Vs("div",gg,[Vs("div",bg,[e.context.show_chart?(Os(),Ms("div",yg,[Vs("div",{class:"card overflow-hidden",style:V(ya(E))},[Ys(' <div class="card h-300 overflow-hidden"> '),Hs(C_,{ref_key:"chart",ref:s,id:"chart_0",chart_type:ya(A),base_url_request:ya(C),map_chart_options:B,register_on_status_change:!1,min_time_interval_id:F.value,round_time:D.value},null,8,["chart_type","base_url_request","min_time_interval_id","round_time"])],4)])):Ys("v-if",!0),Hs(rm,{ref_key:"table_flows",ref:i,table_id:ya(k),table_config_id:w.value,csrf:e.context.csrf,f_map_columns:Y,get_extra_params_obj:Q,onLoaded:J,onCustom_event:oe},{custom_header:vl((()=>[(Os(!0),Ms(Ss,null,An(T.value,((e,t)=>(Os(),Ls(Rd,{f_on_open:K(e,t),ref_for:!0,ref:e=>{O.value[t]=e}},{title:vl((()=>[Hs(cm,{show:e.show_spinner,size:"1rem",class:"me-1"},null,8,["show"]),Vs("a",{class:"ntopng-truncate",title:e.title},te(e.label),9,wg)])),menu:vl((()=>[(Os(!0),Ms(Ss,null,An(e.options,(e=>(Os(),Ms("a",{style:{cursor:"pointer",display:"block"},onClick:t=>function(e,t){t.stopPropagation(),X({id:e.key,value:e.value,operator:e.operator})}(e,t),class:"ntopng-truncate tag-filter",title:e.value},te(e.label),9,xg)))),256))])),_:2},1032,["f_on_open"])))),256)),Ys(" Dropdown columns ")])),_:1},8,["table_id","table_config_id","csrf"])])]),Ys(" card body "),t.context.show_acknowledge_all||t.context.show_delete_all?(Os(),Ms("div",kg,[t.context.show_acknowledge_all?(Os(),Ms("button",$g,[Sg,Ks(" Acknowledge Alerts ")])):Ys("v-if",!0),t.context.show_delete_all?(Os(),Ms("button",Ng,[Cg,Ks(" Delete Alerts ")])):Ys("v-if",!0)])):Ys("v-if",!0),Ys(" card footer ")]),Ys(" card-shadow ")]),Ys(" div col ")]),Ys(" div row "),Hs(mm,{id:"modal_traffic_extraction",ref_key:"modal_traffic_extraction",ref:o},null,512),Hs(ov,{ref_key:"modal_snapshot",ref:r,csrf:e.context.csrf},null,8,["csrf"]),Hs(Hv,{ref_key:"modal_acknowledge",ref:_,context:e.context,onAcknowledge:ie},null,8,["context"]),Hs(Gv,{ref_key:"modal_delete",ref:p,context:e.context,onDelete_alert:ie},null,8,["context"]),Hs(Dv,{alert:f.value,page:g.value,onExclude:se,ref_key:"modal_alerts_filter",ref:d},null,8,["alert","page"])],64))},__file:"http_src/vue/page-flow-historical.vue"},Ag={components:{},props:{id:String,chart_type:String,register_on_status_change:Boolean,base_url_request:String,get_params_url_request:Function,get_custom_chart_options:Function,disable_pointer_events:Boolean},emits:["apply","hidden","showed","chart_reloaded","zoom"],created(){},beforeUnmount(){},data:()=>({chart:null,chart_options:null,from_zoom:!1,timeseries_visibility:null,timeseries_list:[]}),async mounted(){await this.init(),ntopng_sync.ready(this.$props.id)},methods:{init:async function(){let e=ntopng_status_manager.get_status(),t=this.get_url_request(e);this.register_on_status_change&&this.register_status(e),await this.draw_chart(t)},get_image:function(e){return Dygraph.Export.asPNG(this.chart,e,this.$refs.chart)},change_visibility:function(e,t){null!=this.timeseries_list[t]&&(this.timeseries_list[t].checked=e,this.chart.setVisibility(t,e))},register_status:function(e){let t=this.get_url_request(e);ntopng_status_manager.on_status_change(this.id,(e=>{1==this.from_zoom&&(this.from_zoom=!1);let a=this.get_url_request(e);a!=t?(t=a,this.update_chart(a)):t=a}),!1)},get_url_request:function(e){let t;return null!=this.$props.get_params_url_request?(null==e&&(e=ntopng_status_manager.get_status()),t=this.$props.get_params_url_request(e)):t=ntopng_url_manager.get_url_params(),`${this.$props.base_url_request||""}?${t}`},get_chart_options:async function(e){let t=null;const a=await ntopng_utility.get_date_format(!1,this.$props.csrf,http_prefix);return t=null==this.$props.get_custom_chart_options?await ntopng_utility.http_request(e):await this.$props.get_custom_chart_options(e),t?.axes?.x?.axisLabelFormatter||(t.axes.x.axisLabelFormatter=function(e){return ntopng_utility.from_utc_to_server_date_format(e,a)}),t?.axes.x?.valueFormatter||(t.axes.x.valueFormatter=function(e){return ntopng_utility.from_utc_to_server_date_format(e,a)}),this.$emit("chart_reloaded",t),t},draw_chart:async function(e){let t=await this.get_chart_options(e);const a=t.data||[];t.data=null,t.zoomCallback=this.on_zoomed,this.timeseries_list=[];let l=0;if(!t.disableTsList)for(const e in t.series)this.timeseries_list.push({name:e,checked:!0,id:l,color:t.colors[l]+"!important"}),l+=1;this.chart=new Dygraph(this.$refs.chart,a,t)},update_chart:async function(e){if(this.chart){let t=await this.get_chart_options(e);this.chart.updateChart(t)}},update_chart_options:function(e){this.chart&&this.chart.updateChart(e)},update_chart_series:function(e){null!=e&&this.chart&&this.chart.updateOptions({file:e})},on_zoomed:function(e,t){this.from_zoom=!0;const a=moment(e),l=moment(t);let n={epoch_begin:Number.parseInt(a.unix()),epoch_end:Number.parseInt(l.unix())};ntopng_events_manager.emit_event(ntopng_events.EPOCH_CHANGE,n,this.id),this.$emit("zoom",n)}}};const Tg={style:{width:"100% height:380px"},class:"text-end mb-2"},Og={class:"form-check-label form-control-sm"},Pg=["onClick","checked"],Ug={key:0,class:"mb-3",style:{width:"100%","pointer-events":"none"},ref:"chart"},Ig={key:1,class:"mb-3",style:{width:"100%"},ref:"chart"};lp("\n.dygraph-legend {\n\tcolor: #111111;\n\tbackground-color: #FFFFFF !important;\n\tborder-color: #a7a6a6;\n\tborder-style: solid;\n\tborder-width: thin;\n\tz-index: 80 !important;\n\tbox-shadow: 0 0.5rem 1rem rgba(0, 0, 0, .15);\n\tborder-radius: 0.375rem;\n\tposition: fixed;\n\twidth: auto;\n\tword-wrap: break-word;\n\tpadding: 8px !important;\n}\n.dygraph-legend>span {\n\tcolor: #111111;\n\tpadding-left: 5px;\n\tpadding-right: 2px;\n\tmargin-left: -5px;\n\tbackground-color: #FFFFFF !important;\n}\n.dygraph-legend>span:first-child {\n\tmargin-top: 2px;\n}\n"),Ag.render=function(e,t,a,l,n,s){return Os(),Ms(Ss,null,[Vs("div",Tg,[(Os(!0),Ms(Ss,null,An(n.timeseries_list,((e,t)=>(Os(),Ms("label",Og,[Vs("input",{type:"checkbox",class:"form-check-input align-middle mt-0",onClick:a=>s.change_visibility(!e.checked,t),checked:e.checked,style:V([{"border-color":"#0d6efd"},{backgroundColor:e.color}])},null,12,Pg),Ks(" "+te(e.name),1)])))),256))]),1==a.disable_pointer_events?(Os(),Ms("div",Ug,null,512)):(Os(),Ms("div",Ig,null,512))],64)},Ag.__file="http_src/vue/timeseries-chart.vue";const jg=e=>(pl("data-v-185590b6"),e=e(),fl(),e),Mg={class:"form-group ms-2 me-2 mt-3 row"},Lg={class:"col-11"},Fg={class:"col-form-label"},Rg=[jg((()=>Vs("button",{type:"button",class:"btn border"},[Vs("span",null,[Vs("i",{class:"fas fa-trash"})])],-1)))],Dg={class:"container"},zg={class:"row custom-ms me-2 mt-1"},qg={class:"col-5"},Bg=["onUpdate:modelValue"],Vg={class:"custom-control-label ms-1 form-check-label"},Hg={class:"col-2"},Gg=["onUpdate:modelValue"],Wg=jg((()=>Vs("label",{class:"custom-control-label ms-1 form-check-label"},"Past ",-1))),Kg={class:"col-2"},Jg=["onUpdate:modelValue"],Yg=jg((()=>Vs("label",{class:"custom-control-label ms-1 form-check-label"},"Avg ",-1))),Zg={class:"col-3"},Xg=["onUpdate:modelValue"],Qg=jg((()=>Vs("label",{class:"custom-control-label ms-1 form-check-label"},"95th Perc ",-1)));var eb={__name:"list-timeseries",props:{id:String,timeseries:Array,title:String,show_delete_button:Boolean},emits:["delete_ts","update:timeseries"],setup(e,{emit:t}){const a=e;function l(){t("update:timeseries",a.timeseries)}function n(){t("delete_ts",a.id)}return(t,a)=>(Os(),Ms("div",null,[Vs("div",Mg,[Vs("div",Lg,[Vs("label",Fg,[Vs("b",null,te(e.title),1)])]),e.show_delete_button?(Os(),Ms("div",{key:0,class:"col-1",onClick:n},Rg)):Ys("v-if",!0)]),Vs("div",Dg,[(Os(!0),Ms(Ss,null,An(e.timeseries,(e=>(Os(),Ms("div",zg,[Vs("div",qg,[wn(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:l,"onUpdate:modelValue":t=>e.raw=t},null,40,Bg),[[Mo,e.raw]]),Vs("label",Vg,te(e.label),1)]),Vs("div",Hg,[wn(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:l,"onUpdate:modelValue":t=>e.past=t},null,40,Gg),[[Mo,e.past]]),Wg]),Vs("div",Kg,[wn(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:l,"onUpdate:modelValue":t=>e.avg=t},null,40,Jg),[[Mo,e.avg]]),Yg]),Vs("div",Zg,[wn(Vs("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:l,"onUpdate:modelValue":t=>e.perc_95=t},null,40,Xg),[[Mo,e.perc_95]]),Qg])])))),256))])]))}};lp("\n.custom-ms[data-v-185590b6] {\n  margin-left: 2rem !important;\n}\n.inline-block[data-v-185590b6] {\n    display: inline-block;\n    margin-right: 1rem;\n}\n.border[data-v-185590b6] {\n    border-style: solid !important;\n}\n"),eb.__scopeId="data-v-185590b6",eb.__file="http_src/vue/list-timeseries.vue";const tb=m.getFormatter(m.types.bytes.id),ab="page-stats-action-link",lb="page-stats-action-jump-historical",nb={table_value:"interface",title:i18n("page_stats.top.top_applications"),view:"top_protocols",default_sorting_columns:1,default:!0,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("application"),name:"application",data:"protocol",handlerId:ab,render:function(e,t,a){let l=this,n={handlerId:ab,onClick:function(){let e=`top:${a.ts_schema}`;l.add_metric_from_metric_schema(e,a.ts_query)}};return F.createLinkCallback({text:e.label,handler:n})}},{columnName:i18n("traffic"),name:"traffic",className:"text-end",data:"traffic",orderable:!0,render:e=>a.bytesToSize(e)},{columnName:i18n("percentage"),name:"traffic_perc",className:"text-center",data:"percentage",orderable:!1,render:e=>{const t=e.toFixed(1);return a.createProgressBar(t)}},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:lb,render_if:function(e){return e.is_history_enabled},render:function(e,t,a){let l=this;const n={handlerId:lb,onClick:function(){let e=x.serialize_param("l7proto",`${a.protocol.id};eq`),t=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}&${e}`,n=l.source_type,s=l.source_array,i="",o=n.source_def_array.map(((e,t)=>{let a=s[t];return"ifid"==e.value?x.serialize_param("ifid",a.value):"host"==e.value?x.serialize_param("ip",`${a.value};eq`):void 0}));i=o.join("&"),t=`${t}&${i}`,window.open(t)}};return F.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:n}])}}]},sb={table_value:"interface",title:i18n("page_stats.top.top_categories"),view:"top_categories",default_sorting_columns:2,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("category"),name:"category",data:"category",handlerId:ab,render:function(e,t,a){let l=this,n={handlerId:ab,onClick:function(){let e=`top:${a.ts_schema}`;l.add_metric_from_metric_schema(e,a.ts_query)}};return F.createLinkCallback({text:e.label,handler:n})}},{columnName:i18n("traffic"),name:"traffic",className:"text-end",data:"traffic",orderable:!0,render:e=>tb(e)},{columnName:i18n("percentage"),name:"traffic_perc",className:"text-center",data:"percentage",render:e=>{const t=e.toFixed(1);return a.createProgressBar(t)}},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:lb,render_if:function(e){return e.is_history_enabled},render:function(e,t,a){let l=this;const n={handlerId:lb,onClick:function(){let e=x.serialize_param("l7cat",`${a.category.id};eq`),t=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}&${e}`,n=l.source_type,s=l.source_array,i="",o=n.source_def_array.map(((e,t)=>{let a=s[t];return"ifid"==e.value?x.serialize_param("ifid",a.value):"host"==e.value?x.serialize_param("ip",`${a.value};eq`):void 0}));i=o.join("&"),t=`${t}&${i}`,window.open(t)}};return F.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:n}])}}]},ib=[nb,sb,{table_value:"interface",title:i18n("page_stats.top.top_senders"),view:"top_senders",default_sorting_columns:1,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("page_stats.top.host_name"),name:"host_name",data:"host",handlerId:ab,render:function(e,t,a){let l=this,n=e.label,s="",i={handlerId:ab,onClick:async function(){l.add_ts_group_from_source_value_dict("host",a.tags,"host:traffic")}};return l.sources_types_enabled.host&&e.is_local&&(n=F.createLinkCallback({text:e.label,handler:i})),e.is_available&&(s=` <a href="/lua/host_details.lua?host=${e.id}" data-bs-toggle="tooltip" title=""><i class="fas fa-laptop"></i></a>`),`${n}${s}`}},{columnName:i18n("page_stats.top.sent"),name:"sent",className:"text-end",data:"traffic",orderable:!0,render:e=>tb(e)},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:lb,render_if:function(e){return e.is_history_enabled},render:function(e,t,a){let l=this;const n=a.host.id,s=a.host.is_local,i={handlerId:lb,onClick:function(){let e=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}`,t="",n=[];for(let e in a.tags){let t=a.tags[e],l="";"ifid"==e?l=x.serialize_param(e,t):"host"==e&&(l=x.serialize_param("ip",`${t};eq`)),n.push(l)}t=n.join("&"),e=`${e}&${t}`,window.open(e)}},o={handlerId:lb,onClick:function(){const e=x.get_url_entry("ifid"),t=`${http_prefix}/lua/host_details.lua?host=${n}&page=historical&ts_query=ifid:${e},host:${n}&ts_schema=host:details&epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}`;window.open(t)}},r=[{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:i}];return l.sources_types_enabled.host&&s&&r.push({class:"dropdown-item",href:"#",title:i18n("db_explorer.host_data"),handler:o}),F.createActionButtons(r)}}]},{table_value:"interface",title:i18n("page_stats.top.top_receivers"),view:"top_receivers",default_sorting_columns:1,columnDefs:[{type:"file-size",targets:1}],columns:[{columnName:i18n("page_stats.top.host_name"),name:"host_name",data:"host",handlerId:ab,render:function(e,t,a){let l=this,n=e.label,s="",i={handlerId:ab,onClick:async function(){l.add_ts_group_from_source_value_dict("host",a.tags,"host:traffic")}};return l.sources_types_enabled.host&&e.is_local&&(n=F.createLinkCallback({text:e.label,handler:i})),e.is_available&&(s=` <a href="/lua/host_details.lua?host=${e.id}" data-bs-toggle="tooltip" title=""><i class="fas fa-laptop"></i></a>`),`${n}${s}`}},{columnName:i18n("page_stats.top.received"),name:"received",className:"text-end",data:"traffic",orderable:!0,render:e=>tb(e)},{columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:lb,render_if:function(e){return e.is_history_enabled},render:function(e,t,a){let l=this;const n=a.host.id,s=a.host.is_local,i={handlerId:lb,onClick:function(){let e=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}`,t="",n=[];for(let e in a.tags){let t=a.tags[e],l="";"ifid"==e?l=x.serialize_param(e,t):"host"==e&&(l=x.serialize_param("ip",`${t};eq`)),n.push(l)}t=n.join("&"),e=`${e}&${t}`,window.open(e)}},o={handlerId:lb,onClick:function(){const e=x.get_url_entry("ifid"),t=`${http_prefix}/lua/host_details.lua?host=${n}&page=historical&ts_query=ifid:${e},host:${n}&ts_schema=host:details&epoch_begin=${l.status.epoch_begin}&epoch_end=${l.status.epoch_end}`;window.open(t)}},r=[{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:i}];return l.sources_types_enabled.host&&s&&r.push({class:"dropdown-item",href:"#",title:i18n("db_explorer.host_data"),handler:o}),F.createActionButtons(r)}}]}];let ob=ib.find((e=>"top_protocols"==e.view));null!=ob&&(ob=b.clone(ob),ob.table_value="host");const rb=[ob],cb=m.getFormatter(m.types.bytes.id),ub=m.getFormatter(m.types.bps.id),db="page-stats-action-link",_b={table_value:"snmp",table_source_def_value_dict:{ifid:!0,device:!0,if_index:!1},title:i18n("page_stats.top.top_interfaces"),view:"top_snmp_ifaces",default_sorting_columns:4,columnDefs:[{type:"file-size",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3}],f_get_label:e=>{let t,a=e.source_type.source_def_array;for(let l=0;l<a.length;l+=1)if("device"==a[l].value){t=e.source_array[l].label;break}return`${i18n("page_stats.top.top_interfaces")} - SNMP ${i18n("page_stats.source_def.device")} ${t}`},default:!0,columns:[{columnName:i18n("interface_name"),name:"interface",data:"interface",handlerId:db,render:function(e,t,a){let l=this,n={handlerId:db,onClick:function(){l.add_ts_group_from_source_value_dict("snmp_interface",a.tags,"snmp_if:traffic")}},s=`${e.name}`;return F.createLinkCallback({text:s,handler:n})}},{columnName:i18n("interface_alias"),name:"interface",data:"interface",handlerId:db,render:function(e){return`${e.alias}`}},{columnName:i18n("page_stats.top.sent"),name:"sent",className:"text-end",data:"sent",orderable:!0,render:e=>cb(e)},{columnName:i18n("page_stats.top.received"),name:"received",className:"text-end",data:"rcvd",orderable:!0,render:e=>cb(e)},{columnName:i18n("traffic"),name:"traffic",className:"text-end",data:"total",orderable:!0,render:e=>cb(e)},{columnName:i18n("last_downlink_usage"),name:"traffic_perc",className:"text-center no-wrap",data:"downlink_usage_percentage",render:e=>{let t=e.toFixed(1);return t>100&&(t=100),a.createProgressBar(t)}},{columnName:i18n("last_uplink_usage"),name:"traffic_perc",className:"text-center no-wrap",data:"uplink_usage_percentage",render:e=>{let t=e.toFixed(1);return t>100&&(t=100),a.createProgressBar(t)}},{columnName:i18n("page_stats.top.throughput"),name:"throughput",className:"text-end",data:"throughput",orderable:!0,render:e=>ub(e)}]},pb=[_b],fb=m.getFormatter(m.types.bytes.id),mb=m.getFormatter(m.types.bps.id),vb="page-stats-action-link",hb={table_value:"flowdevice",table_source_def_value_dict:{ifid:!0,device:!0,if_index:!1},title:i18n("page_stats.top.top_interfaces"),view:"top_flowdev_ifaces",default_sorting_columns:4,columnDefs:[{type:"file-size",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3}],f_get_label:e=>{let t,a=e.source_type.source_def_array;for(let l=0;l<a.length;l+=1)if("device"==a[l].value){t=e.source_array[l].label;break}return`${i18n("page_stats.top.top_interfaces")} - Flow Exporter ${t}`},default:!0,columns:[{columnName:i18n("interface_name"),name:"interface",data:"interface",handlerId:vb,render:function(e,t,a){let l=this,n={handlerId:vb,onClick:function(){l.add_ts_group_from_source_value_dict("flow_interface",a.tags,"flowdev_port:traffic")}},s=`${e.label}`;return F.createLinkCallback({text:s,handler:n})}},{columnName:i18n("page_stats.top.sent"),name:"sent",className:"text-end",data:"sent",orderable:!0,render:e=>fb(e)},{columnName:i18n("page_stats.top.received"),name:"received",className:"text-end",data:"rcvd",orderable:!0,render:e=>fb(e)},{columnName:i18n("traffic"),name:"traffic",className:"text-end",data:"total",orderable:!0,render:e=>fb(e)},{columnName:i18n("percentage"),name:"traffic_perc",className:"text-center",data:"percentage",render:e=>{const t=e.toFixed(1);return a.createProgressBar(t)}},{columnName:i18n("page_stats.top.throughput"),name:"throughput",className:"text-end",data:"throughput",orderable:!0,render:e=>mb(e)}]},gb=[hb],bb=async e=>{const t={host:e},a=x.obj_to_url_params(t),l=`${http_prefix}/lua/pro/rest/v2/get/snmp/device/available_interfaces.lua?${a}`;return await b.http_request(l)},yb=async e=>(await bb(e)).map((e=>null!=e.name&&""!=e.name&&e.name!=e.id?{label:`${e.name} (${e.id})`,id:e.id,name:e.name}:{label:e.id,id:e.id,name:e.id})).sort(a.sortAlphabetically),wb={available_interfaces:bb,snmp_device_ports:yb},xb={hide:"hide",select:"select",input:"input",input:"input_confirm"},kb={ifid:e=>{let t=e.ifname;return null!=e.name&&(t=e.name),{label:t,value:e.ifid}},pool:e=>{let t=e.pool_id;return null!=e.name&&(t=e.name),{label:t,value:e.pool_id}},am_host:e=>({label:`${e.label} ${e.measurement}`,value:`${e.host},metric:${e.measurement_key}`}),blacklist:e=>{let t=`${e.column_name}`;return{label:t,value:t}},device:e=>({label:`${e.name}`,value:`${e.ip}`}),if_index:e=>""},$b={interface:ib,host:rb,snmp_interface:pb,snmp_device:pb,flow_device:gb,flow_interface:gb},Sb=[{id:"interface",regex_page_url:"lua/if_stats",label:i18n("page_stats.source_def.interface"),query:"iface",f_map_ts_options:null,source_def_array:[{main_source_def:!0,label:i18n("page_stats.source_def.interface"),regex_type:null,refresh_on_sources_change:!1,sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",sources_function:null,value:"ifid",value_url:null,value_map_sources_res:null,disable_tskey:null,f_get_value_url:null,f_set_value_url:null,ui_type:xb.select}]},{id:"blacklist",regex_page_url:"lua/blacklists_stats",label:i18n("page_stats.source_def.blacklist"),query:"blacklist",f_map_ts_options:(e,t)=>(null==e.series||e.series.forEach((e=>{null!=t.metric.query?e.name=t.metric.label:(e.name=e.name.replaceAll("_"," "),e.type=void 0)})),e),source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"System",value:-1}],value:"ifid",ui_type:xb.hide}]},{id:"vulnerability_scan",regex_page_url:"lua/vulnerability_scan",label:i18n("page_stats.source_def.vuln_scan"),query:"am_vuln_scan",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"System",value:-1}],value:"ifid",ui_type:xb.hide}]},{id:"host",regex_page_url:"lua/host_details",label:i18n("page_stats.source_def.host"),table_value:"host",query:"host",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{main_source_def:!0,label:i18n("page_stats.source_def.host"),regex_type:"ip",value:"host",ui_type:xb.input}]},{id:"mac",regex_page_url:"lua/mac_details",label:i18n("page_stats.source_def.mac"),query:"mac",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{main_source_def:!0,label:i18n("page_stats.source_def.mac"),regex_type:"macAddress",value:"mac",value_url:"host",ui_type:xb.input}]},{id:"network",regex_page_url:"lua/network_details",label:i18n("page_stats.source_def.network"),query:"subnet",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{main_source_def:!0,label:i18n("page_stats.source_def.network"),regex_type:"text",value:"subnet",ui_type:xb.input}]},{id:"as",regex_page_url:"lua/as_details",label:i18n("page_stats.source_def.as"),query:"asn",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{main_source_def:!0,label:i18n("page_stats.source_def.as"),regex_type:"text",value:"asn",ui_type:xb.input}]},{id:"country",regex_page_url:"lua/country_details",label:i18n("page_stats.source_def.country"),query:"country",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{main_source_def:!0,label:i18n("page_stats.source_def.country"),regex_type:"text",value:"country",ui_type:xb.input}]},{id:"os",regex_page_url:"lua/os_details",label:i18n("page_stats.source_def.os"),query:"os",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{main_source_def:!0,label:i18n("page_stats.source_def.os"),regex_type:"text",value:"os",ui_type:xb.input}]},{id:"vlan",regex_page_url:"lua/vlan_details",label:i18n("page_stats.source_def.vlan"),query:"vlan",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{main_source_def:!0,label:i18n("page_stats.source_def.vlan"),regex_type:"text",value:"vlan",ui_type:xb.input}]},{id:"pool",regex_page_url:"lua/pool_details",label:i18n("page_stats.source_def.pool"),query:"host_pool",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{main_source_def:!0,label:i18n("page_stats.source_def.pool"),sources_url:"lua/rest/v2/get/host/pools.lua",value:"pool",ui_type:xb.select}]},{id:"system",regex_page_url:"lua/system_stats",label:i18n("page_stats.source_def.system"),query:"system",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"System",value:-1}],value:"ifid",ui_type:xb.hide}]},{id:"profile",regex_page_url:"lua/profile_details",label:i18n("page_stats.source_def.profile"),query:"profile",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{main_source_def:!0,label:i18n("page_stats.source_def.profile"),regex_type:"text",value:"profile",ui_type:xb.input}]},{id:"redis",regex_page_url:"lua/monitor/redis_monitor.lua",label:i18n("page_stats.source_def.redis"),query:"redis",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"Redis",value:-1}],value:"ifid",ui_type:xb.hide}]},{id:"influx",regex_page_url:"lua/monitor/influxdb_monitor.lua",label:i18n("page_stats.source_def.influx"),query:"influxdb",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"Influx",value:-1}],value:"ifid",ui_type:xb.hide}]},{id:"active_monitoring",regex_page_url:"lua/monitor/active_monitoring_monitor.lua",label:i18n("page_stats.source_def.active_monitoring"),query:"am",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"",value:-1}],value:"ifid",ui_type:xb.hide},{main_source_def:!0,label:i18n("page_stats.source_def.active_monitoring"),sources_url:"lua/rest/v2/get/am_host/list.lua",value:"host",disable_tskey:!0,value_map_sources_res:"am_host",ui_type:xb.select}]},{id:"snmp_interface",id_group:"snmp",regex_page_url:"lua/pro/enterprise/snmp_interface_details",label:i18n("page_stats.source_def.snmp_interface"),query:"snmp_interface",f_map_ts_options:(e,t)=>e,source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"",value:-1}],value:"ifid",ui_type:xb.hide},{label:i18n("page_stats.source_def.device"),regex_type:"ip",sources_url:"lua/pro/rest/v2/get/snmp/device/list.lua",value:"device",value_url:"host",ui_type:xb.select},{main_source_def:!0,label:i18n("page_stats.source_def.snmp_interface"),regex_type:"text",refresh_on_sources_change:!0,sources_function:async e=>{const t=e[1];return(await wb.available_interfaces(t)).map((e=>({label:e.name,value:e.id})))},value:"if_index",value_url:"snmp_port_idx",ui_type:xb.select}]},{id:"snmp_device",id_group:"snmp",regex_page_url:"lua/pro/enterprise/snmp_device_details",label:i18n("page_stats.source_def.snmp_device"),query:"snmp_device",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_function:()=>[{label:"",value:-1}],value:"ifid",ui_type:xb.hide},{main_source_def:!0,label:i18n("page_stats.source_def.device"),regex_type:"ip",sources_url:"lua/pro/rest/v2/get/snmp/device/list.lua",value:"device",value_url:"host",ui_type:xb.input}]},{id:"flow_device",regex_page_url:"lua/pro/enterprise/flowdevices_stats",label:i18n("page_stats.source_def.flow_device"),query:"flowdev",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{main_source_def:!0,label:i18n("page_stats.source_def.device"),sources_url:"lua/pro/rest/v2/get/flowdevices/list.lua",regex_type:"ip",value:"device",value_url:"ip",ui_type:xb.input}]},{id:"flow_interface",regex_page_url:"lua/pro/enterprise/flowdevice_interface_details",label:i18n("page_stats.source_def.flow_interface"),query:"flowdev_port",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:xb.input},{main_source_def:!0,label:i18n("page_stats.source_def.port"),regex_type:"port",value:"port",value_url:"snmp_port_idx",ui_type:xb.input}]},{id:"sflow_device",regex_page_url:"lua/pro/enterprise/sflowdevices_stats",label:i18n("page_stats.source_def.sflow_device"),query:"sflowdev",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{main_source_def:!0,label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:xb.input}]},{id:"sflow_interface",regex_page_url:"lua/pro/enterprise/sflowdevice_interface_details",label:i18n("page_stats.source_def.sflow_interface"),query:"sflowdev_port",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{label:i18n("page_stats.source_def.device"),regex_type:"ip",value:"device",value_url:"ip",ui_type:xb.input},{main_source_def:!0,label:i18n("page_stats.source_def.port"),regex_type:"port",value:"port",value_url:"snmp_port_idx",ui_type:xb.input}]},{id:"observation_point",regex_page_url:"lua/pro/enterprise/observation_points",label:i18n("page_stats.source_def.observation_point"),query:"obs_point",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{main_source_def:!0,label:i18n("page_stats.source_def.observation_point"),regex_type:"text",value:"obs_point",value_url:"observation_point",ui_type:xb.input}]},{id:"pod",regex_page_url:"lua/pod_details",label:i18n("page_stats.source_def.pod"),query:"pod",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{main_source_def:!0,label:i18n("page_stats.source_def.pod"),regex_type:"text",value:"pod",ui_type:xb.input}]},{id:"container",regex_page_url:"lua/container_details",label:i18n("page_stats.source_def.container"),query:"container",source_def_array:[{label:i18n("page_stats.source_def.interface"),sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:xb.select},{main_source_def:!0,label:i18n("page_stats.source_def.container"),regex_type:"text",value:"container",ui_type:xb.input}]},{id:"nedge",regex_page_url:"lua/pro/nedge/if_stats.lua",label:i18n("page_stats.source_def.nedge"),query:"nedge",source_def_array:[{label:i18n("page_stats.source_def.interface"),regex_type:"text",value:"ifid",value_url:"ifname",ui_type:xb.input}]}],Nb={ui_types:xb,sources_url_el_to_source:kb,sources_types:Sb,sources_types_tables:$b},Cb=e=>{let t=[];e.forEach((e=>{let a=function(e){let t=[];e.timeseries.forEach((e=>{t.push(`${e.id}=${e.raw}:${e.past}:${e.avg}:${e.perc_95}`)}));let a=e.metric.schema;null!=e.metric.query&&(a=`${a}+${e.metric.query}`);let l=t.join("|"),n=e.source_array.map((e=>e.value)).join("+"),s=`${e.source_type.id};${n};${a};${l}`;return s}(e);t.push(a)}));let a=t.join(";;");x.set_key_to_url("timeseries_groups",a)};const Eb=(e,t,a,l)=>{let n={raw:!0,past:!0,avg:!1,perc_95:!1};l&&null!=l.raw&&(n.raw=l.raw),l&&null!=l.past&&(n.past=l.past),l&&null!=l.avg&&(n.avg=l.avg),l&&null!=l.perc_95&&(n.perc_95=l.perc_95);let s=Ob(e,t,a),i=[];for(let e in a.timeseries){let t=a.timeseries[e];n.id=e,n.label=t.label,i.push(n)}return{id:s,source_type:e,source_array:t,metric:a,timeseries:i}},Ab=async(e,t,a)=>{let l=Hb(),n=await jb(e,l),s=await Vb(e,l,n),i=Kb(s,t,a);return[Eb(l,n,i)]};async function Tb(e){let t=e.split(";"),a=t[0],l=t[1].split("+"),n=t[2].split("+");n.length<2&&n.push(null);let s=t[3],i=Ib(a),o=await Lb(http_prefix,i,l),r=await Gb(http_prefix,i,o,n[0],n[1]),c=function(e,t){let a=e.split("|"),l=/(.+)=(.+):(.+):(.+):(.+)/,n=[];return a.forEach((e=>{let a=l.exec(e);if(a.length>0){let e=a[1],l=t.timeseries[e].label,s=JSON.parse(a[2]),i=JSON.parse(a[3]),o=JSON.parse(a[4]),r=JSON.parse(a[5]);n.push({id:e,label:l,raw:s,past:i,avg:o,perc_95:r})}})),n}(s,r);return{id:Ob(i,o,r),source_type:i,source_array:o,metric:r,timeseries:c}}const Ob=(e,t,a,l,n)=>{let s="";null!=a&&(s=a.schema,null!=a.query&&(s=`${s} - ${a.query}`));let i=e.source_def_array,o=t.map(((e,t)=>{let a=i[t].value;return null==l||l[a]?e.value:null})).filter((e=>null!=e)).join("_"),r=e.id;return n&&null!=e.id_group&&(r=e.id_group),`${r} - ${o} - ${s}`};const Pb=Nb.sources_url_el_to_source,Ub=Nb.sources_types,Ib=e=>Ub.find((t=>t.id==e)),jb=async(e,t)=>{let a=zb(t);return await Lb(e,t,a)};async function Mb(e,t,a){let l=t.source_def_array.map((e=>a[e.value]));return await Lb(e,t,l)}const Lb=async(e,t,a)=>{null==t&&(t=Hb());let l,n=[];for(let s=0;s<a.length;s++){let i=a[s],o=t.source_def_array[s];if(o.sources_url||o.sources_function){let n=[];n=await Rb(e,t.id,o,a),l=n.find((e=>e.value==i)),null==l&&(l=n[0])}else l={label:i,value:i};n.push(l)}return n};let Fb={};const Rb=async(e,t,l,n)=>{let s=function(e,t,a){let l=`${e}_${t.value}`;return t.refresh_on_sources_change?(l=`${l}_${a.join("_")}`,l):l}(t,l,n);if(null==Fb[s])if(l.sources_url){let t=`${e}/${l.sources_url}`;Fb[s]=b.http_request(t)}else{if(!l.sources_function)return[];Fb[s]=l.sources_function(n)}let i=await Fb[s];if(l.sources_url){let e=Pb[l.value_map_sources_res];if(null==e&&(e=Pb[l.value]),null==e)throw`:Error: metrics-manager.js, missing sources_url_to_source ${l.value} key`;i=i.map((t=>e(t)))}return i.sort(a.sortAlphabetically)};function Db(e,t){e.source_def_array.forEach((e=>{let a=t[e.value];null!=a&&(null!=e.f_set_value_url?e.f_set_value_url():null!=e.value_url?x.set_key_to_url(e.value_url,a):x.set_key_to_url(e.value,a))}))}const zb=e=>(null==e&&(e=Hb()),e.source_def_array.map((e=>{if(null!=e.f_get_value_url)return e.f_get_value_url();let t=e.value_url;return null==t&&(t=e.value),x.get_url_entry(t)})));let qb={},Bb=null;const Vb=async(e,t,a,l)=>{let n=l?.epoch_begin||x.get_url_entry("epoch_begin"),s=l?.epoch_end||x.get_url_entry("epoch_end"),i=`${n}_${s}`;null==t&&(t=Hb()),null==a&&(a=await jb(e,t));let o=function(e,t,a,l){let n=t.source_def_array.map(((e,t)=>`${e.value}=${a[t].value}`)).join("&"),s="";return null!=l&&(s=`epoch_end=${l.epoch_end}&epoch_begin=${l.epoch_begin}`),`${e}/lua/rest/v2/get/timeseries/type/consts.lua?query=${t.query}&${n}&${s}`}(e,t,a,{epoch_begin:n,epoch_end:s}),r=function(e,t){let a=t.map((e=>e.value)).join("_");return`${e.id}_${a}`}(t,a);i!=Bb&&(qb[r]=null,Bb=i),null==qb[r]&&(qb[r]=b.http_request(o));let c=await qb[r];return null==c||0==c.length?[{}]:(0==c.some((e=>1==e.default_visible))&&(c[0].default_visible=!0),b.clone(c))},Hb=()=>{let e=window.location.pathname;for(let t=0;t<Ub.length;t+=1){if(1==new RegExp(Ub[t].regex_page_url).test(e))return Ub[t]}throw`source_type not found for ${e}`},Gb=async(e,t,a,l,n,s)=>(await Vb(e,t,a,s)).find((e=>e.schema==l&&e.query==n)),Wb=(e,t)=>{null==t&&(t=Hb());let a={};t.source_def_array.forEach((e=>a[e.value]=!0));let l=e.split(",");for(let e=0;e<l.length;e+=1){let t=l[e].split(":")[0];if(null==a[t])return l[e]}return null},Kb=(e,t,a)=>{let l;return null!=t&&(l=e.find((e=>e.schema==t&&(null==a||e.query==a)))),null==l&&(l=e.find((e=>1==e.default_visible))),null!=l?l:e[0]},Jb={set_timeseries_groups_in_url:Cb,get_timeseries_groups_from_url:async(e,t)=>{if(null==t&&(t=x.get_url_entry("timeseries_groups")),null==t||""==t)return null;let a=t.split(";;");return a.map((async e=>await Tb(e))),Promise.all(a.map((async e=>await Tb(e))))},get_default_timeseries_groups:Ab,get_ts_group:Eb,get_ts_group_id:Ob,sources_types:Ub,sources_types_tables:Nb.sources_types_tables,get_source_type_from_id:Ib,get_current_page_source_type:Hb,get_sources:Rb,get_default_source_array:jb,get_source_array_from_value_dict:Mb,get_source_array_from_value_array:Lb,get_default_source_value_array:zb,get_metrics:Vb,get_metric_from_schema:Gb,get_metric_query_from_ts_query:Wb,get_default_metric:Kb,set_source_value_object_in_url:Db,ui_types:Nb.ui_types};Dygraph.Plugins.Legend.prototype.select=function(e){var t=e.selectedX,a=e.selectedPoints,l=e.selectedRow,n=e.dygraph.getOption("legend");if("never"!==n){var s=Dygraph.Plugins.Legend.generateLegendHTML(e.dygraph,t,a,this.one_em_width_,l);if(s instanceof Node&&s.nodeType===Node.DOCUMENT_FRAGMENT_NODE?(this.legend_div_.innerHTML="",this.legend_div_.appendChild(s)):this.legend_div_.innerHTML=s,this.legend_div_.style.display="","follow"===n){var i,o=e.dygraph.plotter_.area,r=this.legend_div_.offsetWidth,c=e.dygraph.getOptionForAxis("axisLabelWidth","y"),u=e.dygraph.getHighlightSeries();u?(i=a.find((e=>e.name===u)),i||(i=a[0])):i=a[0];const t=e.dygraph.getNumericOption("legendFollowOffsetX");var d=(null!=i?.x?i.x:1)*o.w+t;d+r+1>o.w&&(d=d-2*t-r-(c-o.x)),this.legend_div_.style.left=c+d+"px",document.addEventListener("mousemove",(e=>{localStorage.setItem("timeseries-mouse-top-position",e.clientY+50+"px")})),this.legend_div_.style.top=localStorage.getItem("timeseries-mouse-top-position")}else if("onmouseover"===n&&this.is_generated_div_){o=e.dygraph.plotter_.area,r=this.legend_div_.offsetWidth;this.legend_div_.style.left=o.x+o.w-r-1+"px",this.legend_div_.style.top=o.y+"px"}}else this.legend_div_.style.display="none"};const Yb=["rgb(144, 238, 144)","rgb(25, 135, 84)","rgb(255, 193, 7)","rgb(220, 53, 69)"];function Zb(e,t,a){if(!t||!e)return function(e){const t=Dygraph.toRGB_(e);return t.r=Math.floor((255+t.r)/2),t.g=Math.floor((255+t.g)/2),t.b=Math.floor((255+t.b)/2),"rgb("+t.r+","+t.g+","+t.b+", 0.9)"}(a);e>t&&(e=t);const l=t/Yb.length;for(let t=1;t<Yb.length+1;t++)if(e<=l*t)return Yb[t-1]}function Xb(e){const t=e.drawingContext,a=e.points,l=e.dygraph.toDomYCoord(0),n=e.dygraph.user_attrs_.valueRange[1],s=e.color;let i=1/0;for(let e=1;e<a.length;e++){const t=a[e].canvasx-a[e-1].canvasx;t<i&&(i=t)}i>90&&(i=90);const o=Math.floor(.95*i);for(var r=0;r<a.length;r++){const e=a[r],i=e.canvasx,c=e.yval;t.fillStyle=Zb(Math.abs(c),Math.abs(n),s),t.fillRect(i-o/2,e.canvasy,o,l-e.canvasy),t.strokeRect(i-o/2,e.canvasy,o,l-e.canvasy)}}const Qb={barChartPlotter:Xb};function ey(e){let t={};e.forEach(((e,a)=>{null==t[e]?t[e]=[a]:t[e].push(a)}));let a=b.clone(e);for(let e in t){let l=t[e];ty(e,l.length).forEach(((e,t)=>{let n=l[t];a[n]=e}))}return a}function ty(e,t){return[...Array(t).keys()].map(((a,l)=>function(e,t,a){let l=e.replace("#",""),n=parseInt(l.substring(0,2),16),s=parseInt(l.substring(2,4),16),i=parseInt(l.substring(4,6),16),o=ay(n,t,a),r=ay(s,t,a),c=ay(i,t,a);return function(e,t,a){return"#"+ly(e)+ly(t)+ly(a)}(o,r,c)}(e,l+1,t)))}function ay(e,t,a){if(a<=1)return e;let l=Math.trunc(e/2),n=Math.trunc(e+(255-e)/2);return l+t*Math.trunc((n-l)/a)}function ly(e){let t=e.toString(16);return 1==t.length?"0"+t:t}const ny={transformColors:ey};function sy(e){return{axisLabelFormatter:e,valueFormatter:function(t,a,l,n,s,i){const o=n?.rawData_?.[s][i];let r="";return"object"==typeof o?(o.forEach((t=>{r=`${r} / ${e(t||0)}`})),r=r.substring(3)):r=e(t),r},axisLabelWidth:80}}function iy(e){const t=ny.transformColors(e.colors),a=function(){let e="rgb(255, 255, 255)";return document.getElementsByClassName("body dark").length>0&&(e="rgb(13, 17, 23)"),e}(),l={labelsSeparateLines:!0,legend:"follow",connectSeparatedPoints:!0,includeZero:!0,drawPoints:!0,highlightSeriesBackgroundAlpha:.7,highlightSeriesOpts:{strokeWidth:2,pointSize:3,highlightCircleSize:6},axisLabelFontSize:12,axes:{x:{axisLabelWidth:90}}};return l.customBars=e.customBars,l.labels=e.labels,l.series=e.properties,l.data=e.serie,l.stackedGraph=e.stacked,l.valueRange=e.value_range,l.highlightSeriesBackgroundColor=a,l.colors=t,l.disableTsList=e.disable_ts_list,l.yRangePad=e.yRangePad||1,e.plotter&&(l.plotter=e.plotter),function(e,t){t.formatters.length>1?(e.axes.y1=sy(m.getFormatter(t.formatters[0])),e.axes.y2=sy(m.getFormatter(t.formatters[1]))):1==t.formatters.length&&(e.axes.y=sy(m.getFormatter(t.formatters[0])))}(l,e),l}function oy(e){switch(e){case"dash":return{fillGraph:!1,customBars:!1,strokePattern:Dygraph.DASHED_LINE};case"point":return{fillGraph:!1,customBars:!1,strokeWidth:0,pointSize:2};case"bounds":return{fillGraph:!1,strokeWidth:1,pointSize:1.5,fillAlpha:.5};case"line":return{fillGraph:!1,customBars:!1,strokeWidth:1.5,pointSize:1.5};default:return{fillGraph:!0,customBars:!1,strokeWidth:1,pointSize:1.5,fillAlpha:.5}}}const ry={buildChartOptions:iy,formatSerieProperties:oy},cy=["#C6D9FD","#90EE90","#EE8434","#C95D63","#AE8799","#717EC3","#496DDB","#5A7ADE","#6986E1","#7791E4","#839BE6","#8EA4E8"],uy={default_color:"#C6D9FD","95_perc":"#8EA4E8",avg:"#839BE6"};function dy(e){return`${e.id}`}function _y(e){let t=e,a=0,l=0,n=cy,s=d3v7.schemeCategory10;t.forEach(((t,i)=>{0==t.palette?(e.find(((e,a)=>e.color===t.color&&a!==i))?e[i]=n[a%n.length]:e[i]=t.color,a+=1):1==t.palette&&(e[i]=s[l%s.length],l+=1)}))}function py(e,t,a,l){null==e&&(e=t);let n="";if(null!=e&&(n=`${e}`),0==l)return e;let s=0,i=a.source_type.source_def_array;for(let e=0;e<i.length;e+=1){if(1==i[e].main_source_def){s=e;break}}return`${`${a.source_array[s].label}`} - ${n}`}function fy(e){if("bar"===e)return Qb.barChartPlotter}function my(e,t,a,l){l.labels.push(e),null==l.properties&&(l.properties={}),l.properties[e]={},l.properties[e]=ry.formatSerieProperties(t),l.colors.push(a)}function vy(e,t,a){const l=e.metric.chart_type||"filled",n=t.series||[],s=t.metadata.epoch_begin,i=t.metadata.epoch_step,{serie:o,color:r,formatter:c,serie_name:u,properties:d}=function(e,t){let a={},l=null,n=null,s={},i=[];return e.forEach(((e,o)=>{const r=dy(e),c=e.data||[],u=t.metric.timeseries[r],d=!0===u?.invert_direction?1:-1;"metric"==u.type&&(n=py(u.label,r,t,!0),s=ry.formatSerieProperties("bounds"),a={color:u.color,palette:0},l=t.metric.measure_unit);for(let e=0;e<c.length;e++){let t=null===c[e]?NaN:c[e];null==i[e]&&(i[e]=[0,NaN,0]),"lower_bound"==u.type?i[e][0]=t*d:"metric"==u.type?i[e][1]=t*d:"upper_bound"==u.type&&(i[e][2]=t*d)}})),{serie:i,color:a,formatter:l,serie_name:n,properties:s}}(n,e);let _=s;const p=`${u} ${i18n("lower_value_upper")}`,f=a.formatters.find((e=>e==c));f||a.formatters.push(c),a.plotter=fy(l),a.customBars=!0,a.colors.push(r),a.labels.push(p),a.properties[p]=d,Object.keys(o).forEach((e=>{a.serie[_]||(a.serie[_]=[{value:new Date(1e3*_),name:"Time"},{value:o[e],name:p}]),_+=i}))}function hy(e,t,a,l){const n=t.series||[],s=e.metric.chart_type||"filled",i=t.metadata.epoch_begin,o=t.metadata.epoch_step,r=e.metric.measure_unit,c=e.metric.max_value||null,u=e.metric.min_value||null,d=t.additional_series;a.value_range=[u,c],a.plotter=fy(s),a.stacked||(a.stacked=e.metric.draw_stacked||!1),n.forEach(((t,n)=>{const c=t.data||[],u=e.timeseries[0],_=dy(t),p=e.metric.timeseries[_],f=!0===p.invert_direction?-1:1,m=function(e,t){let a=1==t.use_serie_name?e.name:t.label;return e.ext_label&&(a=e.ext_label),a}(t,p),v=py(m,_,e,a.use_full_name),h=py(m+" Avg",_,e,a.use_full_name),g=py(m+" 95th Perc",_,e,a.use_full_name),b=py(m+" "+l+" Ago",_,e,a.use_full_name),y=d?d[`${l}_ago`]?.series[n]?.data:null;if(p.hidden)return;const w=a.formatters.find((e=>e==r));w||a.formatters.push(r),my(v,s,{color:p.color,palette:0},a),1==u?.avg&&my(h,"point",{color:uy.avg,palette:1},a),1==u?.perc_95&&my(g,"point",{color:uy.perc_95,palette:1},a),1==u?.past&&my(b,"dash",{color:uy.past,palette:1},a),function(e,t,a,l,n,s,i,o,r){const c=t.statistics.average,u=t.statistics["95th_percentile"];let d=o;for(let t=0;t<l.length;t++){const o=l[t];if(e.serie[d]||(e.serie[d]=[{value:new Date(1e3*d),name:"Time"}]),null!==o?e.serie[d].push({value:o*s,name:r.serie_name}):e.serie[d].push({value:NaN,name:r.serie_name}),1==a?.avg&&e.serie[d].push({value:c*s,name:r.avg_name}),1==a?.perc_95&&e.serie[d].push({value:u*s,name:r.perc_name}),1==a?.past){const a=n?n[t]:null;a?e.serie[d].push({value:a*s,name:r.past_name}):e.serie[d].push({value:NaN,name:r.past_label})}d+=i}}(a,t,u,c,y,f,o,i,{serie_name:v,avg_name:h,perc_name:g,past_name:b})}))}function gy(e,t,a,l,n){let s=1;const i=[];e.serie.forEach((e=>{i.push([s,e]),s++})),0==i.length&&i.push([1,null]);const o={serie:i,formatters:l,labels:["index"],colors:[],stacked:!1,customBars:!1,use_full_name:!1,plotter:fy(a),value_range:n,disable_ts_list:!0};return"string"==typeof t?my(t,a,{color:uy.default_color,palette:0},o):t.forEach((e=>{my(e,a,{color:uy.default_color,palette:0},o)})),_y(o.colors),ry.buildChartOptions(o)}function by(e,t,a,l){const n={serie:[],formatters:[],labels:["Time"],colors:[],properties:[],stacked:!1,customBars:!1,use_full_name:null!=l&&l};return e.forEach(((e,l)=>{!function(e,t,a,l){null!=e.source_type.f_map_ts_options&&(t=(0,e.source_type.f_map_ts_options)(t,e));1==(e.metric.bounds||!1)?vy(e,t,l):hy(e,t,l,a)}(t[l],e,a,n)})),function(e){const t=[];Object.keys(e.serie).forEach(((a,l)=>{t[l]=[],e.labels.forEach((n=>{let s=!1;for(let i=0;i<e.serie[a].length;i++)if(e.serie[a][i].name==n){t[l].push(e.serie[a][i].value),s=!0;break}0==s&&t[l].push(null)}))})),e.serie=t}(n),_y(n.colors),ry.buildChartOptions(n)}const yy={formatSerie:by,formatSimpleSerie:gy,getSerieId:dy,getSerieName:py};function wy(e){return yy.getSerieId(e)}function xy(e,t,a,l){return yy.getSerieName(e,t,a,l)}const ky={"1_chart_x_metric":{value:"1_chart_x_metric",label:i18n("page_stats.layout_1_per_1")},"1_chart_x_yaxis":{value:"1_chart_x_yaxis",label:i18n("page_stats.layout_1_per_y")}};function $y(e){return ky[e]||null}function Sy(e,t,a,l){if(a.value==ky["1_chart_x_metric"].value)return Ny(e,t,a,l);let n=function(e,t){let a=[],l=[],n=[],s=[];return t.forEach(((t,i)=>{1==t.metric.draw_stacked?(a.push(e[i]),l.push(t)):(n.push(e[i]),s.push(t))})),{stacked:{tsOptionsArray:a,tsGroupsArray:l},not_stacked:{tsOptionsArray:n,tsGroupsArray:s}}}(e,t);return[...Ny(n.stacked.tsOptionsArray,n.stacked.tsGroupsArray,a,l),...Ny(n.not_stacked.tsOptionsArray,n.not_stacked.tsGroupsArray,a,l)]}function Ny(e,t,a,l){let n=!1;if(a.value==ky["1_chart_x_yaxis"].value){let a={};t.forEach(((t,l)=>{let n=`${(s=t.metric).measure_unit}_${s.scale}`;var s;let i={tsGroup:t,tsOptions:e[l]};null==a[n]?a[n]=[i]:a[n].push(i)})),n=t.length>1||t.length>0&&!0===t[0].source_type.display_full_name;let s=[];for(let e in a){let t=a[e],i=t.map((e=>e.tsOptions)),o=t.map((e=>e.tsGroup)),r=Ey(i,o,l,n);s.push(r)}return s}if(a.value==ky["1_chart_x_metric"].value){n=e.length>1||t.length>0&&!0===t[0].source_type.display_full_name;let a=[];return e.forEach(((e,s)=>{let i=Ey([e],[t[s]],l,n);a.push(i)})),a}return[]}function Cy(e,t,a,l,n){return yy.formatSimpleSerie(e,t,a,l,n)}function Ey(e,t,a,l){return yy.formatSerie(e,t,a,l)}function Ay(e,t,a){let l=e.source_type.source_def_array.map(((t,l)=>{if(null!=a&&!a[t.value])return null;let n=e.source_array[l].value;return`${t.value}:${n}`})).filter((e=>null!=e)).join(",");return t||null==e.metric.query||(l=`${l},${e.metric.query}`),l}function Ty(e){let t=e.source_type.source_def_array;for(let e=0;e<t.length;e+=1){if(1==t[e].main_source_def)return e}return 0}function Oy(e,t,a,l,n){let s={epoch_begin:t.epoch_begin,epoch_end:t.epoch_end},i={};if(n){let t={zoom:a,limit:180,version:4,ts_compare:a},n=l.map((e=>{let t=Ty(e),a={ts_query:Ay(e),ts_schema:`${e.metric.schema}`};return e.source_type.source_def_array[t].disable_tskey||(a.tskey=e.source_array[t].value),a}));i.url=`${e}/lua/pro/rest/v2/get/timeseries/ts_multi.lua`,i.body={ts_requests:n,...s,...t}}else{let t=`${e}/lua/rest/v2/get/timeseries/ts.lua`,n=`ts_compare=${a}&version=4&zoom=${a}&limit=180`,o=l[0],r=Ty(o),c=Ay(o),u={...s,ts_query:c,ts_schema:`${o.metric.schema}`};o.source_type.source_def_array[r].disable_tskey||(u.tskey=o.source_array[r].value);let d=x.add_obj_to_url(u,n);i.url=`${t}?${d}`}return i}async function Py(e,t,a,l,n){let s;const i=Oy(e,t,a,l,n);if(n){let e={"Content-Type":"application/json"};s=await b.http_request(i.url,{method:"post",headers:e,body:JSON.stringify(i.body)})}else{s=[await b.http_request(i.url)]}return s}const Uy={groupsOptionsModesEnum:ky,tsArrayToOptions:Ey,formatSimpleSerie:Cy,tsArrayToOptionsArray:Sy,getGroupOptionMode:$y,getSerieId:wy,getSerieName:xy,getTsChartsOptions:Py,getTsChartsDataUrl:Oy,getTsQuery:Ay,getMainSourceDefIndex:Ty},Iy=e=>(pl("data-v-103cd911"),e=e(),fl(),e),jy={class:"nav nav-tabs"},My={class:"form-group ms-2 me-2 mt-3 row"},Ly={class:"form-group row"},Fy={class:"col-form-label col-sm-4"},Ry={class:"col-sm-8"},Dy={key:0,class:"form-group ms-2 me-2 mb-2 mt-3 row"},zy={class:"form-group row"},qy={class:"col-form-label col-sm-4"},By={class:"col-sm-8"},Vy=["title"],Hy={key:0,class:"form-group mt-2 row"},Gy={class:"col-form-label col-sm-4"},Wy={class:"col-sm-8"},Ky={key:1,class:"form-group mt-2 row"},Jy={class:"col-form-label col-sm-4"},Yy={class:"col-sm-8"},Zy=["onInput","onUpdate:modelValue","pattern"],Xy={key:2,class:"form-group mt-2 row"},Qy={class:"col-form-label col-sm-4"},ew={class:"col-sm-7"},tw=["onInput","onUpdate:modelValue","pattern"],aw={class:"col-sm-1"},lw=["onClick","title","disabled"],nw=[Iy((()=>Vs("i",{class:"fas fa-refresh"},null,-1)))],sw={class:"form-group row mt-2",style:{"text-align":"end"}},iw={class:"col-sm-12"},ow=["disabled"],rw={class:"form-group ms-2 me-2 mt-3 row"},cw={class:"form-group row"},uw={class:"col-form-label col-sm-4"},dw={class:"col-sm-8"},_w=["disabled"];var pw={__name:"modal-timeseries",props:{sources_types_enabled:Object},emits:["apply"],setup(e,{expose:t,emit:a}){const l=e,n=ma(null),s=ma(null),i=ma("select");let o=Jb.get_current_page_source_type();const r=Jb.sources_types,c=ma(o),u=Jb.ui_types,d=ma([]),_=ma([]),p=ma([]),f=ma(""),m=ma([]),v=ma(!1),h=wi((()=>{if(0==v.value)return!1;for(let e=0;e<m.value.length;e+=1){let t=m.value[e];if(null==t)continue;let a=new RegExp(t),l=p.value[e];if(0==a.test(l))return!1}return!0})),g=ma(!1),y=ma([]),w=ma({}),x=ma([]),k=ma([]);let $=null;dn((()=>{r.forEach((e=>{l.sources_types_enabled[e.id]}))})),_n((async()=>{$=async function(){await N(),U()}()}));function S(e){i.value=e}async function N(){v.value=!1,function(){let e=c.value?.source_def_array.map((e=>e.regex_type));null==e&&(e=[]);m.value=e.map((e=>null==e?null:yp.get_data_pattern(e)))}(),function(){let e=c.value;g.value=e.source_def_array.map((e=>e.ui_type==u.hide)).every((e=>1==e))}(),await async function(){let e=c.value.source_def_array,t=[],a=await Jb.get_default_source_array(http_prefix,c.value),l=a.map((e=>e.value));for(let a=0;a<e.length;a+=1){let n=await Jb.get_sources(http_prefix,c.value.id,e[a],l);t.push(n)}_.value=a,d.value=t,p.value=l,O()}(),await P()}async function C(){v.value=!1,p.value.forEach(((e,t)=>{if(c.value.source_def_array[t].ui_type==u.input){E(_.value[t],e)}})),await async function(){await P()}(),O()}function E(e,t){e.value=t,e.label=t}function A(e,t,a){v.value=!0,1==a&&T(e,t)}async function T(e,t){e.ui_type==u.input_confirm&&E(_.value[t],p.value[t]);let a=c.value.source_def_array,l=_.value.map((e=>e.value));for(let e=t+1;e<a.length;e+=1){const t=a[e];if(!t.refresh_on_sources_change)continue;let n=await Jb.get_sources(http_prefix,c.value.id,t,l);d.value[e]=n,n.length>0?_.value[e]=n[0]:(_.value[e]={label:"",value:""},console.warn(`No sources availables to select for ${c.value.id} sorce_def`))}}function O(){f.value=`${_.value.filter((e=>null!=e.label&&""!=e.label)).map((e=>e.label)).join(" - ")}`}async function P(){y.value=await Jb.get_metrics(http_prefix,c.value,_.value),y.value.sort(NtopUtils.sortAlphabetically),w.value=Jb.get_default_metric(y.value),U()}function U(e){k.value=[];let t=w.value.timeseries;for(let e in t)k.value.push({id:e,label:t[e].label,raw:!0,past:!1,avg:!1,perc_95:!1})}function I(e){let t=e.source_type.label,a=Uy.getMainSourceDefIndex(e);return`${t} - ${e.source_array[a].label} - ${e.metric.label}`}function j(e){let t,a,l;return null==e?(t=c.value,a=_.value,l=w.value):(t=e.source_type,a=e.source_array,l=e.metric),Jb.get_ts_group_id(t,a,l)}const M=e=>{x.value=x.value.filter((t=>j(t)!=e))},L=(e,t)=>{let l=x.value.findIndex((t=>t.id==e.id));l<0?x.value.push(e):x.value[l]=e,t&&a("apply",x.value)},F=()=>{if("add"==i.value){let e={id:j(),source_type:c.value,source_array:b.clone(_.value),metric:w.value,timeseries:b.clone(k.value)};L(e)}a("apply",x.value),R()},R=()=>{n.value.close()},D=e=>i18n(e);return t({show:async e=>{x.value=e,await $,i.value="select",n.value.show()},close:R,add_ts_group:L,set_timeseries_groups:(e,t)=>{x.value=e,t&&a("apply",x.value)}}),(e,t)=>(Os(),Ls(np,{onShowed:t[8]||(t[8]=e=>{}),ref_key:"modal_id",ref:n},{title:vl((()=>[Ks(te(D("modal_timeseries.title")),1)])),body:vl((()=>[Vs("ul",jy,[Vs("li",{class:"nav-item",onClick:t[0]||(t[0]=e=>S("add"))},[Vs("a",{class:K(["nav-link",{active:"add"==i.value}]),href:"#"},te(D("modal_timeseries.add_timeseries")),3)]),Vs("li",{class:"nav-item",onClick:t[1]||(t[1]=e=>S("select"))},[Vs("a",{class:K(["nav-link",{active:"select"==i.value}]),href:"#"},te(D("modal_timeseries.manage_timeseries")),3)])]),Ys(" action add "),"add"==i.value?(Os(),Ms(Ss,{key:0},[Ys(" Sources Types "),Vs("div",My,[Vs("div",Ly,[Vs("label",Fy,[Vs("b",null,te(D("modal_timeseries.source_type")),1)]),Vs("div",Ry,[Hs(l_,{selected_option:c.value,"onUpdate:selected_option":t[2]||(t[2]=e=>c.value=e),onSelect_option:t[3]||(t[3]=e=>N()),options:ya(r)},null,8,["selected_option","options"])])])]),Ys(" Sources "),g.value?Ys("v-if",!0):(Os(),Ms("div",Dy,[Vs("div",zy,[Vs("label",qy,[Vs("b",null,te(D("modal_timeseries.source")),1)]),Vs("div",By,[wn(Vs("input",{class:"form-control","onUpdate:modelValue":t[4]||(t[4]=e=>f.value=e),title:f.value,style:{overflow:"hidden","text-overflow":"ellipsis","white-space":"nowrap"},type:"text",disabled:""},null,8,Vy),[[jo,f.value]])])]),(Os(!0),Ms(Ss,null,An(c.value.source_def_array,((e,t)=>(Os(),Ms(Ss,null,[Ys(" select "),e.ui_type==ya(u).select?(Os(),Ms("div",Hy,[Vs("label",Gy,[Vs("b",null,te(e.label),1)]),Vs("div",Wy,[Hs(l_,{selected_option:_.value[t],"onUpdate:selected_option":e=>_.value[t]=e,onSelect_option:a=>A(e,t,!0),options:d.value[t]},null,8,["selected_option","onUpdate:selected_option","onSelect_option","options"])])])):Ys("v-if",!0),Ys(" end select "),Ys(" input text "),e.ui_type==ya(u).input?(Os(),Ms("div",Ky,[Vs("label",Jy,[Vs("b",null,te(e.label),1)]),Vs("div",Yy,[wn(Vs("input",{class:"form-control",onInput:a=>A(e,t),"onUpdate:modelValue":e=>p.value[t]=e,pattern:m.value[t],required:"",type:"text",placeholder:""},null,40,Zy),[[jo,p.value[t]]])])])):Ys("v-if",!0),Ys(" input text "),Ys(" input confirm text "),e.ui_type==ya(u).input_confirm?(Os(),Ms("div",Xy,[Vs("label",Qy,[Vs("b",null,te(e.label),1)]),Vs("div",ew,[wn(Vs("input",{class:"form-control",onInput:a=>A(e,t),"onUpdate:modelValue":e=>p.value[t]=e,pattern:m.value[t],required:"",type:"text",placeholder:""},null,40,tw),[[jo,p.value[t]]])]),Vs("div",aw,[Vs("button",{type:"button",class:"btn btn-link btn-sm",onClick:a=>T(e,t),title:D(e.refresh_i18n),disabled:!ya(h)},nw,8,lw)])])):Ys("v-if",!0),Ys(" input confirm text ")],64)))),256)),wn(Vs("div",sw,[Vs("div",iw,[Vs("button",{type:"button",onClick:C,disabled:0==ya(h),class:"btn btn-primary"},te(D("modal_timeseries.apply_source")),9,ow)])],512),[[Yo,ya(h)]])])),Ys(" end Sources "),Ys(" Metrics "),Vs("div",rw,[Vs("div",cw,[Vs("label",uw,[Vs("b",null,te(D("modal_timeseries.metric")),1)]),Vs("div",dw,[Hs(l_,{ref_key:"select_search_metrics",ref:s,onSelect_option:t[5]||(t[5]=e=>U()),selected_option:w.value,"onUpdate:selected_option":t[6]||(t[6]=e=>w.value=e),options:y.value},null,8,["selected_option","options"])])])]),Hs(eb,{title:D("modal_timeseries.timeseries_list"),timeseries:k.value,"onUpdate:timeseries":t[7]||(t[7]=e=>k.value=e)},null,8,["title","timeseries"])],64)):Ys("v-if",!0),Ys(" action == add "),Ys(" action select"),"select"==i.value?(Os(),Ms(Ss,{key:1},[(Os(!0),Ms(Ss,null,An(x.value,(e=>(Os(),Ls(eb,{id:j(e),title:I(e),timeseries:e.timeseries,"onUpdate:timeseries":t=>e.timeseries=t,show_delete_button:x.value.length>1,onDelete_ts:M},null,8,["id","title","timeseries","onUpdate:timeseries","show_delete_button"])))),256)),Ys(" v-for timeseries_groups_added ")],64)):Ys("v-if",!0),Ys(" action == select ")])),footer:vl((()=>[wn(Vs("button",{type:"button",onClick:F,disabled:ya(h),class:"btn btn-primary"},te(D("modal_timeseries.add")),9,_w),[[Yo,"add"==i.value]]),wn(Vs("button",{type:"button",onClick:F,class:"btn btn-primary"},te(D("modal_timeseries.apply")),513),[[Yo,"select"==i.value]])])),_:1},512))}};lp("\ninput[data-v-103cd911]:invalid {\n  border-color: #ff0000;\n}\n.custom-margin[data-v-103cd911] {\nmargin-left: -0.4rem;\n}\n.warn[data-v-103cd911] {\nborder-color: #ffd500;\nborder-style: solid;\n}\n"),pw.__scopeId="data-v-103cd911",pw.__file="http_src/vue/modal-timeseries.vue";const fw={class:"form-group mt-2 row"},mw={class:"col-form-label col-sm-4"},vw={class:"col-sm-6"},hw={class:"col-form-label col-sm-2"},gw=["disabled"];var bw={__name:"modal-download-file",props:{title:String,ext:String},emits:["download"],setup(e,{expose:t,emit:a}){const l=e,n=ma(null),s=ma(""),i=String.raw`^[a-zA-Z_\-1-9]*$`,o=wi((()=>new RegExp(i).test(s.value)));function r(){let e=`${s.value}.${l.ext}`;a("download",e),c()}const c=()=>{n.value.close()};t({show:e=>{null==e&&(e=""),e=e.replaceAll(/[^a-zA-Z0-9]/g,"_"),s.value=e,n.value.show()},close:c}),_n((()=>{}));const u=e=>i18n(e);return(e,t)=>(Os(),Ls(np,{ref_key:"modal_id",ref:n},{title:vl((()=>[Ks(te(l.title),1)])),body:vl((()=>[Vs("div",fw,[Vs("label",mw,[Vs("b",null,te(u("modal_download_file.filename"))+":",1)]),Vs("div",vw,[wn(Vs("input",{class:"form-control",pattern:i,"onUpdate:modelValue":t[0]||(t[0]=e=>s.value=e),type:"text",required:""},null,512),[[jo,s.value]])]),Vs("label",hw," ."+te(l.ext),1)])])),footer:vl((()=>[Vs("button",{type:"button",onClick:r,class:"btn btn-primary",disabled:0==ya(o)},te(u("modal_download_file.download")),9,gw)])),_:1},512))}};lp("\ninput[data-v-59120eb8]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-59120eb8] {\n  cursor: not-allowed;\n}\n"),bw.__scopeId="data-v-59120eb8",bw.__file="http_src/vue/modal-download-file.vue";const yw={key:0},ww={class:"text-center"},xw=Vs("tbody",null,null,-1);var kw={__name:"datatable",props:{id:String,table_buttons:Array,columns_config:Array,data_url:String,enable_search:Boolean,filter_buttons:{type:Array,required:!1},table_config:{type:Object,required:!1},base_url:String,base_params:Object},emits:["drawed"],setup(e,{expose:t,emit:a}){const l=e,n=si(),s=Ni(),i=(e,t)=>{if((t||l.id)&&null!=e.dir){const a=[e.col,e.dir],n=`${t||l.id}_sorting_preferences`;localStorage.setItem(n,a)}},o=e=>{let t=null;if(e||l.id){const a=`${e||l.id}_sorting_preferences`,n=localStorage.getItem(a);if(n){const e=n.split(",");2==e.length&&(t=[Number(e[0]),e[1]])}}return t};let r=l.base_params;const c=ma(null),u=o()||[0,"asc"];let d=null;_n((()=>{!function(){let e=!1,t={serverSide:!1,scrollX:!1,destroy:!0,searching:l.enable_search,order:[u],pagingType:"full_numbers",columns:l.columns_config,autoWidth:!1,responsive:!0,ajax:{method:"get",url:l.data_url,dataSrc:"rsp",data:(e,t)=>{if(0==Object.keys(e).length)return;const a=t.oInstance.api(),l=e.order[0].column,n=a.column(l).name()||void 0;return e.order&&(e.order=e.order[0].dir,e.sort=n),void 0!==e.columns&&delete e.columns,void 0!==e.search&&(e.map_search=e.search.value,delete e.search),e},beforeSend:function(){NtopUtils.showOverlays()}},drawCallback:function(e){NtopUtils.hideOverlays(),a("drawed"),ntopng_events_manager.emit_custom_event(ntopng_custom_events.DATATABLE_LOADED),i(e.aLastSort[0])}};for(const e in l.table_config||{})t[e]=l.table_config[e];let n=DataTableUtils.getStdDatatableConfig(l.table_buttons);n=DataTableUtils.extendConfig(n,t),d=$(c.value).DataTable(n),p();for(const t of l.filter_buttons||[]){const a=x.get_url_entry(t.filterMenuKey);if(a&&""!=a){let l=0;t.filters.forEach((e=>{e.currently_active=!1,l+=1,e.id==a&&(e.currently_active=!0,l-=1)})),l==t.filters.length&&(x.set_key_to_url(t.filterMenuKey,""),e=!0)}new DataTableFiltersMenu({filterTitle:t.filterTitle,tableAPI:d,filters:t.filters,filterMenuKey:t.filterMenuKey,columnIndex:t.columnIndex,url:l.data_url,id:t.id,removeAllEntry:t.removeAllEntry,callbackFunction:t.callbackFunction}).init()}if(e&&l.base_params){const e=x.get_url_entries();for(const[t,a]of e)r[t]=a;d.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,r)),f()}}()}));let _=null;function p(){if(null==_&&(_=function(){if(null==d)return;let e=$(d.context[0].nTableWrapper);return $($(".row .text-end",e).children()[0])}()),null==s||null==s.menu)return;let e=s.menu();if(null==e||0==e.length)return;let t=s.menu()[0],a=$("<div class='d-inline-block'></div>")[0];const{vNode:l,el:i}=function(e,{props:t,children:a,element:l,app:n}={}){let s=l,i=Hs(e,t,a);return n&&n._context&&(i.appContext=n._context),s?lr(i,s):"undefined"!=typeof document&&lr(i,s=document.createElement("div")),{vNode:i,destroy:()=>{s&&lr(null,s),s=null,i=null},el:s}}(t,{app:n?.appContext?.app,element:a});let o=$(d.context[0].nTableWrapper);$($(".row .text-end",o).children()[0]).append(i)}const f=()=>{null!=d&&d.ajax.reload()},m=e=>{DataTableUtils.deleteButtonHandlers(e)};let v=!1;const h=()=>{d.clear(),d.destroy(!0),v=!0,l.columns_config.filter((e=>null!=e.handlerId)).forEach((e=>{m(e.handlerId)}))};return t({reload:f,delete_button_handlers:m,destroy_table:h,update_url:e=>{null!=d&&d.ajax.url(e)},refresh_menu:()=>{let e=$(d.context[0].nTableWrapper);$($(".row .text-end",e).children()[0]).html(""),p()},is_last_sorting_available:e=>null!=o(e),load_last_sort:o,save_last_sort:i,search_value:function(e){null!=d&&d.search(e).draw()}}),mn((()=>{1!=v&&h()})),(t,a)=>(Os(),Ms(Ss,null,[(Os(),Ms("div",yw,[Ys(' <slot name="menu"></slot> ')])),Vs("div",null,[Vs("table",{ref_key:"table_id",ref:c,class:"table w-100 table-striped table-hover table-bordered"},[Vs("thead",null,[Vs("tr",null,[(Os(!0),Ms(Ss,null,An(e.columns_config,(e=>(Os(),Ms("th",ww,te(e.columnName),1)))),256))])]),xw],512)])],64))},__file:"http_src/vue/datatable.vue"};const $w={key:0,class:"table table-striped table-bordered col-sm-12",style:{}},Sw=["innerHTML"],Nw={class:""},Cw=["innerHTML"],Ew=["innerHTML"],Aw={class:"table table-striped table-bordered"},Tw=["innerHTML"],Ow=["colspan","innerHTML"];var Pw={__name:"bootstrap-table",props:{id:String,columns:Array,rows:Array,print_html_column:Function,print_html_row:Function,print_html_title:Function,horizontal:Boolean,wrap_columns:Boolean},setup:e=>(t,a)=>(Os(),Ms(Ss,null,[Ys(" Normal table "),e.horizontal&&0!=e.horizontal?(Os(),Ms(Ss,{key:1},[Ys(" Horizontal table, with th on the rows "),Vs("table",Aw,[Vs("tbody",null,[(Os(!0),Ms(Ss,null,An(e.rows,(t=>(Os(),Ms("tr",null,[Vs("th",{class:"col 5",innerHTML:e.print_html_title(t.name)},null,8,Tw),(Os(!0),Ms(Ss,null,An(t.values,(a=>(Os(),Ms("td",{colspan:[t.values.length<=1?2:1],innerHTML:e.print_html_row(a)},null,8,Ow)))),256))])))),256))])])],2112)):(Os(),Ms("table",$w,[Vs("thead",null,[Vs("tr",null,[(Os(!0),Ms(Ss,null,An(e.columns,(t=>(Os(),Ms("th",{scope:"col",class:K(t.class),innerHTML:e.print_html_column(t)},null,10,Sw)))),256))])]),Vs("tbody",null,[(Os(!0),Ms(Ss,null,An(e.rows,(t=>(Os(),Ms("tr",Nw,[1==e.wrap_columns?(Os(!0),Ms(Ss,{key:0},An(e.columns,(a=>(Os(),Ms("td",{scope:"col",style:{height:"2.5rem"},class:K(a.class)},[Vs("div",{class:"wrap-column",style:V(a.style),innerHTML:e.print_html_row(a,t)},null,12,Cw)],2)))),256)):(Os(!0),Ms(Ss,{key:1},An(e.columns,(a=>(Os(),Ms("td",{scope:"col",class:K([a.class,"wrap_column"]),style:V(a.style),innerHTML:e.print_html_row(a,t)},null,14,Ew)))),256))])))),256))])]))],2112))};lp("\n.wrap-column[data-v-0533335c] {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n  max-width:100%;\n}\n"),Pw.__scopeId="data-v-0533335c",Pw.__file="http_src/vue/bootstrap-table.vue";const Uw=e=>(pl("data-v-937058e4"),e=e(),fl(),e),Iw={class:"col-12 mb-2 mt-2"},jw={class:"card h-100 overflow-hidden"},Mw=["title"],Lw=[Uw((()=>Vs("i",{class:"fas fa-lg fa-camera-retro"},null,-1)))],Fw=["title"],Rw=[Uw((()=>Vs("i",{class:"fas fa-lg fa-download"},null,-1)))],Dw=["disabled","title"],zw=[Uw((()=>Vs("i",{class:"fas fa-lg fa-file-image"},null,-1)))],qw=["title"],Bw=[Uw((()=>Vs("i",{class:"fas fa-lg fa-table"},null,-1)))],Vw={class:"form-group ms-1 mt-2 d-flex align-items-center"},Hw={class:"inline select2-size me-2"},Gw={class:"inline select2-size me-2"},Ww={key:0,class:"mt-4 card card-shadow"},Kw={class:"card-body"},Jw={key:1,class:"mt-4 card card-shadow"},Yw={class:"card-body"},Zw={key:0,class:"inline select2-size me-2 mt-2"};var Xw={__name:"page-stats",props:{csrf:String,is_ntop_pro:Boolean,source_value_object:Object,sources_types_enabled:Object,sources_types_top_enabled:Object,enable_snapshots:Boolean,is_history_enabled:Boolean,traffic_extraction_permitted:Boolean,is_dark_mode:Boolean},setup(e){const t=e,l=e=>i18n(e);let n="date_time_picker",s=ntopChartApex.typeChart.TS_LINE;ma({}),ma(!1);const i=ma([]),o=ma(null),r=ma(null),c=ma(null),u=ma(null),d=ma(null),_=/^((?!chrome|android).)*safari/i.test(navigator.userAgent),p=l(_?"page_stats.download_image_disabled":"page_stats.title_modal_download_file"),f=ma(null),v=ma([]),h=ma({});Jb.get_current_page_source_type();const g=ma(!1);ma(!1);const w=ma([]),k=b.object_to_array(Uy.groupsOptionsModesEnum),$=ma(function(){let e=x.get_url_entry("timeseries_groups_mode");if(null!=e&&""!=e)return Uy.getGroupOptionMode(e);return k[0]}());let S=null;const N={label:i18n("page_stats.custom_metrics"),currently_active:!1},C="timeseries",E=ma(!1),A=[{value:"10_min",label:i18n("show_alerts.presets.10_min"),currently_active:!1},{value:"30_min",label:i18n("show_alerts.presets.30_min"),currently_active:!0},{value:"hour",label:i18n("show_alerts.presets.hour"),currently_active:!1},{value:"2_hours",label:i18n("show_alerts.presets.2_hours"),currently_active:!1},{value:"6_hours",label:i18n("show_alerts.presets.6_hours"),currently_active:!1},{value:"12_hours",label:i18n("show_alerts.presets.12_hours"),currently_active:!1},{value:"day",label:i18n("show_alerts.presets.day"),currently_active:!1},{value:"week",label:i18n("show_alerts.presets.week"),currently_active:!1},{value:"month",label:i18n("show_alerts.presets.month"),currently_active:!1},{value:"year",label:i18n("show_alerts.presets.year"),currently_active:!1},{value:"custom",label:i18n("show_alerts.presets.custom"),currently_active:!1,disabled:!0}];dn((async()=>{if("va_historical"==x.get_url_entry("page")){let e=[];Z.forEach((t=>{t.va&&e.push(t)})),Z=e}t.source_value_object.is_va&&(f.value="hour",b.check_and_set_default_time_interval("day")),function(){if(null==t.source_value_object)return;let e=Jb.get_current_page_source_type();Jb.set_source_value_object_in_url(e,t.source_value_object)}()})),_n((async()=>{!async function(){let e,t,a=!0,l=await Jb.get_timeseries_groups_from_url(http_prefix);if(null==l){a=!1,e=x.get_url_entry("ts_schema");let n=x.get_url_entry("ts_query");null!=n&&""!=n&&(t=Jb.get_metric_query_from_ts_query(n)),""==e&&(e=null),l=await Jb.get_default_timeseries_groups(http_prefix,e,t)}v.value=await T(a),h.value=1==a?N:Jb.get_default_metric(v.value,e,t);E.value=!0,await W(l,!0,!0)}(),await Promise.all([ntopng_sync.on_ready(n)])}));async function T(e,l){let n=await Jb.get_metrics(http_prefix);if(!l&&null==e)return n.value;if(e&&n.push(N),(null==q||l)&&(q=await async function(){if(!t.enable_snapshots)return;let e=`${http_prefix}/lua/pro/rest/v2/get/filters/snapshots.lua?page=${C}`,a=await b.http_request(e),l=b.object_to_array(a).map((e=>({...e,is_snapshot:!0,label:`${e.name}`,group:"Snapshots"})));return l}()),t.enable_snapshots){q.forEach((e=>n.push(e)))}return n.length>0&&n.sort(a.sortAlphabetically),n}async function O(e){let t=Jb.get_current_page_source_type(),a=await Jb.get_default_source_array(http_prefix,t);return[Jb.get_ts_group(t,a,e)]}const P=async(e,t,a)=>{let l=Jb.get_source_type_from_id(e),n=await Jb.get_source_array_from_value_dict(http_prefix,l,t),s=await Jb.get_metric_from_schema(http_prefix,l,n,a);I(Jb.get_ts_group(l,n,s))},U=async(e,t)=>{let a=v.value.find((a=>a.schema==e&&a.query==t));null!=a?I((await O(a))[0]):console.error(`metric = ${e}, query = ${t} not found.`)};function I(e){c.value.set_timeseries_groups(S),c.value.add_ts_group(e,!0)}async function j(e){if(1==e.is_snapshot){let t=e.filters,a=x.get_url_entry("timeseries_groups",t),l=await Jb.get_timeseries_groups_from_url(http_prefix,a);$.value=Uy.getGroupOptionMode(x.get_url_entry("timeseries_groups_mode",t)),await W(l,!0,!1)}else await async function(){let e=await async function(){return O(h.value)}();await W(e,!0,!1)}(),V(!1)}function M(e){let a=h.value.label==N.label;W(S,!0,!1,e.refresh_data),async function(){if(!t.is_ntop_pro)return;let e=Y.value?.table_config_def;if(null==e)return;let a=K(e.ts_group,e.table_def.table_value,e.table_def.view,e.table_source_def_value_dict);r.value.update_url(a),r.value.reload()}(),V(a,!0)}function L(e){}function F(){u.value.show()}function R(){null!=S&&c.value.show(S)}function D(e){return async t=>w.value[e].chart_options}let z,q=null;function B(){V(h.value.label==N.label,!0)}async function V(e,t){v.value=await T(e,t),e&&(h.value=N)}async function H(e){V(!0),await W(e,!0,!0)}function G(){W(S,!1,!1)}async function W(e,a,l,n){let s=y.get_status(),o=function(e){let t=Number.parseInt((e.epoch_end-e.epoch_begin)/60);return t<=5?"5m":t<=30?"30m":t<=60?"1h":t<=1440?"1d":t<=10080?"1w":t<=43200?"1M":"1Y"}(s);if(a){if(null==e)return e=[],void console.warn("Empty timeseries_groups request");z=await Uy.getTsChartsOptions(http_prefix,s,o,e,t.is_ntop_pro)}!function(e,t){e.forEach(((e,a)=>{let l=t[a],n=l?.metadata?.label;if(null!=n){let t=Uy.getMainSourceDefIndex(e);e.source_array[t].label=n}}))}(e,z);let r=Uy.tsArrayToOptionsArray(z,e,$.value,o);n?function(e){e.forEach(((e,t)=>{i.value[t].update_chart_series(e?.serie)}))}(r):function(e){w.value=e.map(((e,t)=>({key:b.get_random_string(),chart_options:e})))}(r),function(e,t,a){const l=e.length>1;if(g.value=t.map((e=>!e.source_type.disable_stats)).reduce(((e,t)=>e|t),!1),!g.value)return;const n=e=>{let t={bps:"bytes",fps:"flows",alertps:"alerts",hitss:"hits",pps:"packets"};return null!=t[e]?t[e]:e};X.value=[],e.forEach(((e,a)=>{let s=t[a];1!=s.source_type.disable_stats&&e.series?.forEach(((e,t)=>{let a,i=Uy.getSerieId(e),o=s.metric.timeseries[i],r=m.getFormatter(s.metric.measure_unit),c=o.label;if(o.hidden)return;if(1==o.use_serie_name&&(c=e.name),e?.data.length>t&&(a=e.statistics),null==a)return;e.ext_label&&(c=e.ext_label),c=Uy.getSerieName(c,i,s,l);let u=n(s.metric.measure_unit),d={metric:c,total:m.getFormatter(u)(a.total),perc_95:r(a["95th_percentile"]),avg:r(a.average),max:r(a.max_val),min:r(a.min_val)};X.value.push(d)}))}))}(z,e),l&&function(e,a){if(!t.is_ntop_pro)return;null==e&&(e=S);null==a&&(a=y.get_status());let l=Jb.sources_types_tables,n={};e.forEach((e=>{e.source_type;let t=Jb.get_ts_group_id(e.source_type,e.source_array);n[t]=e}));let s={};J.value=[];for(let e in n){let i=n[e],o=Uy.getMainSourceDefIndex(i),r=i.source_array[o],c=i.source_type,u=l[c.id];null!=u&&u.forEach((e=>{let l=t.sources_types_top_enabled[e.table_value];if(null==l)return;if(!l[e.view])return;let n=e.table_source_def_value_dict,o=K(i,e.table_value,e.view,n,a),u=Jb.get_ts_group_id(i.source_type,i.source_array,null,n,!0);if(u=`${u}_${e.view}`,null!=s[u])return;s[u]=!0;let d,_=`${e.table_value}_${e.view}_${u}`;d=null==e.f_get_label?`${e.title} - ${c.label} ${r.label}`:e.f_get_label(i);const p={ts_group:i,table_def:e,table_buttons:[],data_url:o,enable_search:!0,table_config:{serverSide:!1,order:[[e.default_sorting_columns,"desc"]],columnDefs:e.columnDefs||[]}};p.columns_config=e.columns.map((e=>{let l={is_history_enabled:t.is_history_enabled},n={visible:!e.render_if||e.render_if(l),...e};return null==n.className&&(n.className="text-nowrap"),null==n.responsivePriority&&(n.responsivePriority=1),n.render=e.render.bind({add_metric_from_metric_schema:U,add_ts_group_from_source_value_dict:P,sources_types_enabled:t.sources_types_enabled,status:a,source_type:c,source_array:i.source_array}),n}));let f={value:_,label:d,table_config_def:p};J.value.push(f)}))}if(null!=Y.value&&J.value.find((e=>e.value==Y.value.value)))return;Y.value=J.value.find((e=>1==e.table_config_def.default)),null==Y.value&&(Y.value=J.value[0])}(e,s),S=e,x.set_key_to_url("timeseries_groups_mode",$.value.value),Jb.set_timeseries_groups_in_url(S)}function K(e,t,a,l,n){null==n&&(n=y.get_status());let s=Uy.getTsQuery(e,!0,l),i=`${http_prefix}/lua/pro/rest/v2/get/${t}/top/ts_stats.lua`,o={zoom:"5m",ts_query:s,epoch_begin:`${n.epoch_begin}`,epoch_end:`${n.epoch_end}`,detail_view:`${a}`,new_charts:"true"};return`${i}?${x.add_obj_to_url(o,"")}`}const J=ma([]),Y=ma({});let Z=[{id:"metric",label:l("page_stats.metric"),va:!0},{id:"avg",label:l("page_stats.average"),class:"text-end",va:!0},{id:"perc_95",label:l("page_stats.95_perc"),class:"text-end",va:!0},{id:"max",label:l("page_stats.max"),class:"text-end",va:!0},{id:"min",label:l("page_stats.min"),class:"text-end",va:!0},{id:"total",label:l("page_stats.total"),class:"text-end",va:!1}];const X=ma([]);function Q(){let e=y.get_status(),t={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end},a=x.obj_to_url_params(t);const l=`${http_prefix}/lua/pro/db_search.lua?${a}`;x.go_to_url(l)}const ee=ma(null);function te(){ee.value.show()}function ae(){if(!z?.length)return;let e=S[0],t=Uy.getSerieName(null,null,e);d.value.show(t)}async function le(e){let t=i.value.map((async e=>{let t=new Image;return e.get_image(t),new Promise((async(e,a)=>{t.onload=function(){e(t)}}))})),a=0,l=await Promise.all(t);l.forEach((e=>{a+=e.height}));let n=document.createElement("canvas"),s=n.getContext("2d");n.width=l[0].width,n.height=a,a=0,l.forEach((e=>{s.drawImage(e,0,a,e.width,e.height),a+=e.height})),b.download_URI(n.toDataURL(),e)}return(t,a)=>(Os(),Ms(Ss,null,[Vs("div",Iw,[Hs(S_),Vs("div",jw,[Hs(A_,{style:{"margin-top":"0.5rem"},class:"ms-1",id:ya(n),enable_refresh:!0,ref_key:"date_time_picker",ref:o,onEpoch_change:M,min_time_interval_id:f.value,custom_time_interval_list:A},{begin:vl((()=>[])),extra_buttons:vl((()=>[e.enable_snapshots?(Os(),Ms("button",{key:0,class:"btn btn-link btn-sm",onClick:F,title:l("page_stats.manage_snapshots_btn")},Lw,8,Mw)):Ys("v-if",!0),e.traffic_extraction_permitted?(Os(),Ms("button",{key:1,class:"btn btn-link btn-sm",onClick:te,title:l("traffic_recording.pcap_download")},Rw,8,Fw)):Ys("v-if",!0),Vs("button",{disabled:ya(_),class:"btn btn-link btn-sm",onClick:ae,title:ya(p)},zw,8,Dw),e.is_history_enabled?(Os(),Ms("button",{key:2,class:"btn btn-link btn-sm",onClick:Q,title:l("page_stats.historical_flows")},Bw,8,qw)):Ys("v-if",!0)])),_:1},8,["id","min_time_interval_id"]),Ys(" select metric "),wn(Vs("div",Vw,[Vs("div",Hw,[Hs(l_,{selected_option:h.value,"onUpdate:selected_option":a[0]||(a[0]=e=>h.value=e),options:v.value,onSelect_option:j},null,8,["selected_option","options"])]),Vs("div",Gw,[Hs(l_,{selected_option:$.value,"onUpdate:selected_option":a[1]||(a[1]=e=>$.value=e),options:ya(k),onSelect_option:G},null,8,["selected_option","options"])]),e.is_ntop_pro?(Os(),Ms("button",{key:0,type:"button",onClick:R,class:"btn btn-sm btn-primary inline",style:{"vertical-align":"super"}}," Manage Timeseries ")):Ys("v-if",!0)],512),[[Yo,E.value]]),(Os(!0),Ms(Ss,null,An(w.value,((e,t)=>(Os(),Ls(Ag,{key:e.key,id:ya("chart")+t,ref_for:!0,ref:e=>{i.value[t]=e},chart_type:ya(s),register_on_status_change:!1,get_custom_chart_options:D(t),onZoom:M,onChart_reloaded:L},null,8,["id","chart_type","get_custom_chart_options"])))),128))]),g.value?(Os(),Ms("div",Ww,[Vs("div",Kw,[Hs(Pw,{id:"page_stats_bootstrap_table",columns:ya(Z),rows:X.value,print_html_column:e=>function(e){return e.label}(e),print_html_row:(e,t)=>function(e,t){return t[e.id]}(e,t)},null,8,["columns","rows","print_html_column","print_html_row"])])])):Ys("v-if",!0),e.is_ntop_pro?(Os(),Ms("div",Jw,[Vs("div",Yw,[Y.value?.table_config_def?(Os(),Ms("div",Zw,[Hs(l_,{selected_option:Y.value,"onUpdate:selected_option":a[2]||(a[2]=e=>Y.value=e),options:J.value},null,8,["selected_option","options"])])):Ys("v-if",!0),Y.value?.table_config_def?(Os(),Ls(kw,{key:Y.value?.value,ref_key:"top_table_ref",ref:r,table_buttons:Y.value.table_config_def.table_button,columns_config:Y.value.table_config_def.columns_config,data_url:Y.value.table_config_def.data_url,enable_search:Y.value.table_config_def.enable_search,table_config:Y.value.table_config_def.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])):Ys("v-if",!0)])])):Ys("v-if",!0)]),e.enable_snapshots?(Os(),Ls(ov,{key:0,ref_key:"modal_snapshot",ref:u,csrf:e.csrf,page:C,onAdded_snapshot:B,onDeleted_snapshots:B,onDeleted_all_snapshots:B},null,8,["csrf"])):Ys("v-if",!0),e.is_ntop_pro?(Os(),Ls(pw,{key:1,ref_key:"modal_timeseries",ref:c,sources_types_enabled:e.sources_types_enabled,onApply:H},null,8,["sources_types_enabled"])):Ys("v-if",!0),Hs(mm,{id:"page_stats_modal_traffic_extraction",ref_key:"modal_traffic_extraction",ref:ee},null,512),Hs(bw,{ref_key:"modal_download_file",ref:d,title:l("page_stats.title_modal_download_file"),ext:"png",onDownload:le},null,8,["title"])],64))}};lp("\n.inline[data-v-937058e4] {\n    display: inline-block;\n}\n.select2-size[data-v-937058e4] {\n    min-width: 18rem;\n}\n"),Xw.__scopeId="data-v-937058e4",Xw.__file="http_src/vue/page-stats.vue";var Qw=Jl({components:{},props:{id:String,tab_list:Array},emits:["click_item"],created(){},data:()=>({old_tab:null}),mounted(){let e=null;this.$props.tab_list.forEach((function(t){t.active&&(e=t)})),this.old_tab=e||this.$props.tab_list[0],ntopng_sync.ready(this.$props.id)},methods:{change_tab:function(e){(null!=e.id&&this.old_tab.id!=e.id||null!=e.name&&this.old_tab.name!=e.name)&&(this.old_tab=e,this.$emit("click_item",e))}}});const ex={class:"card-header mb-2"},tx={class:"nav nav-tabs card-header-tabs",role:"tablist"},ax=["onClick"],lx=["onClick"];Qw.render=function(e,t,a,l,n,s){return Os(),Ms("div",ex,[Vs("ul",tx,[(Os(!0),Ms(Ss,null,An(e.tab_list,(t=>(Os(),Ms(Ss,null,[t.active?(Os(),Ms("li",{key:0,onClick:a=>e.change_tab(t),class:K([{active:t.active},"nav-item nav-link"])},te(t.title),11,ax)):(Os(),Ms("a",{key:1,onClick:a=>e.change_tab(t),href:"#",class:"nav-item nav-link"},te(t.title),9,lx))],64)))),256))])])},Qw.__file="http_src/vue/tab-list.vue";var nx={__name:"modal-delete-confirm",props:{body:String,title:String},emits:["delete","delete_all"],setup(e,{expose:t,emit:a}){const l=e,n=ma(null);let s=ma(""),i=ma("");const o=()=>{a("delete"),r()},r=()=>{n.value.close()};t({show:(e,t)=>{null!=e&&null!=t?(s.value=e,i.value=t):(s.value=l.body,i.value=l.title),n.value.show()},close:r}),_n((()=>{}));const c=e=>i18n(e);return(e,t)=>(Os(),Ls(np,{onShowed:t[0]||(t[0]=e=>{}),ref_key:"modal_id",ref:n},{title:vl((()=>[Ks(te(ya(i)),1)])),body:vl((()=>[Ks(te(ya(s)),1)])),footer:vl((()=>[Vs("button",{type:"button",onClick:o,class:"btn btn-danger"},te(c("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-confirm.vue"};const sx="change_asset_table_tab_event";var ix={components:{datatable:kw,"modal-delete-confirm":nx,"tab-list":Qw,NoteList:fm},props:{page_csrf:String,url_params:Object,view:String,table_filters:Array},created(){x.set_key_to_url("asset_family",this.$props.url_params.asset_family),this.asset_table_tab=x.get_url_entry("view")||"centrality",x.set_key_to_url("view",this.service_table_tab),this.tab_list.forEach((e=>{this.asset_table_tab==e.id&&(e.active=!0)})),function(e){const t=[];let a=[];e.get_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,url_params),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let l=url_params;l.view="standard";let n={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l),enable_search:!0},s=[];for(let t of e.$props.table_filters||[])t.callbackFunction=(a,n)=>{l.view=e.asset_table_tab,l[t.filterMenuKey]=n.id,x.set_key_to_url(t.filterMenuKey,n.id),a.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l)),NtopUtils.showOverlays(),a.ajax.reload(),NtopUtils.hideOverlays()},s.push(t);a=[{columnName:i18n("actions"),name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(t,a,l){return e.create_action_button_historical_flow_link(t,a,l)}},{columnName:i18n("map_page.client"),name:"client",data:"client",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.server"),name:"server",data:"server",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.asset_family"),name:"family",data:"family",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.last_seen"),name:"last_seen",data:"last_seen",className:"text-center",responsivePriority:2}];let i=ntopng_utility.clone(n);i.table_config={serverSide:!1,order:[[4,"desc"]]},i.columns_config=a,i.table_filters=s,e.config_devices_standard=i,l.view="centrality",n.data_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,l),a=[{columnName:i18n("map_page.host"),name:"host",data:"host",className:"text-nowrap",render:(e,t)=>e.label,responsivePriority:1},{columnName:i18n("map_page.asset_total_edges"),name:"total_edges",data:"total_edges",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.asset_in_edges"),name:"in_edges",data:"in_edges",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.asset_out_edges"),name:"out_edges",data:"out_edges",className:"text-center",responsivePriority:2}];let o=ntopng_utility.clone(n);o.table_config={serverSide:!1,order:[[1,"desc"]]},o.columns_config=a,o.table_filters=s,console.log(i),console.log(o),e.config_devices_centrality=o}(this)},mounted(){C.on_custom_event("page_asset_table",ntopng_custom_events.DATATABLE_LOADED,(()=>{x.get_url_entry("host")&&this.hide_dropdowns()})),C.on_custom_event("change_asset_table_tab",sx,(e=>{let t=this.get_active_table();x.set_key_to_url("view",e),t.destroy_table(),this.asset_table_tab=e})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog()))},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null,title_delete:i18n("map_page.delete_assets"),body_delete:i18n("map_page.delete_assets_message"),title_download:i18n("map_page.download"),body_download:i18n("map_page.download_message"),get_url:null,asset_table_tab:null,notes:[i18n("map_page.table_note_asset_map")],tab_list:[{title:i18n("map_page.standard_view"),active:"standard"==view,id:"standard"},{title:i18n("map_page.centrality_view"),active:"centrality"==view,id:"centrality"}]}),methods:{destroy:function(){this.get_active_table().destroy_table()},click_item:function(e){this.tab_list.forEach((e=>e.active=!1)),e.active=!0,C.emit_custom_event(sx,e.id)},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",page:this.url_params.page,csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)}),this.reload_table()}catch(e){this.reload_table()}},create_action_button_historical_flow_link:function(e,t,a){let l={handlerId:"historical_flow_link",onClick:()=>{!function(e){const t=e.client.split("host=")[1].split("&")[0],a=e.server.split("host=")[1].split("&")[0],l=e.epoch_end,n={epoch_begin:e.epoch_begin,epoch_end:l,srv_ip:`${a};eq`,cli_ip:`${t};eq`},s=x.obj_to_url_params(n);x.go_to_url(`${http_prefix}/lua/pro/db_search.lua?${s}`)}(a)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:l,icon:"fas fa-stream",title:i18n("db_explorer.historical_data")}])},hide_dropdowns:function(){$("#network_dropdown").removeClass("d-inline"),$("#vlan_id_dropdown").removeClass("d-inline"),$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},get_active_table:function(){return this.$refs[`table_asset_${this.asset_table_tab}`]},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()}}};const ox={class:"row"},rx={class:"col-md-12 col-lg-12"},cx=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),ux={class:"card"},dx=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),_x={class:"card-body"},px={id:"table_asset"},fx={class:"card-footer"},mx={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},vx=Vs("i",{class:"fas fa-trash"},null,-1),hx=["href"],gx=[Vs("i",{class:"fas fa-download"},null,-1)];ix.render=function(e,t,a,l,n,s){const i=kn("modal-delete-confirm"),o=kn("tab-list"),r=kn("datatable"),c=kn("NoteList");return Os(),Ms("div",ox,[Vs("div",rx,[cx,Vs("div",ux,[dx,Vs("div",_x,[Vs("div",px,[Hs(i,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(o,{ref:"asset_tab_list",id:"asset_tab_list",tab_list:n.tab_list,onClick_item:s.click_item},null,8,["tab_list","onClick_item"]),"standard"==n.asset_table_tab?(Os(),Ls(r,{key:0,ref:"table_asset_standard",table_buttons:n.config_devices_standard.table_buttons,columns_config:n.config_devices_standard.columns_config,data_url:n.config_devices_standard.data_url,enable_search:n.config_devices_standard.enable_search,filter_buttons:n.config_devices_standard.table_filters},{default:vl((()=>[Ks(' :table_config="config_devices_standard.table_config"> ')])),_:1},8,["table_buttons","columns_config","data_url","enable_search","filter_buttons"])):Ys("v-if",!0),"centrality"==n.asset_table_tab?(Os(),Ls(r,{key:1,ref:"table_asset_centrality",table_buttons:n.config_devices_centrality.table_buttons,columns_config:n.config_devices_centrality.columns_config,data_url:n.config_devices_centrality.data_url,enable_search:n.config_devices_centrality.enable_search,filter_buttons:n.config_devices_centrality.table_filters},{default:vl((()=>[Ks(' :table_config="config_devices_centrality.table_config"> ')])),_:1},8,["table_buttons","columns_config","data_url","enable_search","filter_buttons"])):Ys("v-if",!0)])]),Vs("div",fx,[Vs("button",mx,[vx,Ks(" "+te(n.i18n("map_page.delete_assets")),1)]),Vs("a",{href:n.get_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"asset_map.json",target:"_blank"},gx,8,hx)])]),Hs(c,{note_list:n.notes},null,8,["note_list"])])])},ix.__file="http_src/vue/page-asset-table.vue";var bx={components:{datatable:kw,"modal-delete-confirm":nx,NoteList:fm},props:{page_csrf:String,url_params:Object,view:String,table_filters:Array,is_admin:Boolean},created(){!function(e){const t=[];let a=[],l=0;e.get_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,url_params),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let n=ntopng_utility.clone(url_params);n.view=null;let s={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,n),enable_search:!0},i=[];for(let t of e.$props.table_filters||[])t.callbackFunction=(e,a)=>{n[t.filterMenuKey]=a.id,x.set_key_to_url(t.filterMenuKey,a.id),e.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,n)),NtopUtils.showOverlays(),e.ajax.reload(),NtopUtils.hideOverlays()},i.push(t);a=[{columnName:i18n("actions"),name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(t,a,l){return e.create_action_button_historical_flow_link(t,a,l)}},{columnName:i18n("map_page.last_seen"),name:"last_seen",data:"last_seen",className:"text-center text-nowrap",render:(e,t)=>e.value,responsivePriority:2},{columnName:i18n("map_page.client"),name:"client",data:"client",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.server"),name:"server",data:"server",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.port"),name:"port",data:"port",className:"text-center",responsivePriority:4},{columnName:i18n("map_page.protocol"),name:"l7proto",data:"protocol",className:"text-nowrap",responsivePriority:3},{columnName:i18n("map_page.first_seen"),name:"first_seen",data:"first_seen",visible:!1,responsivePriority:3},{columnName:i18n("duration"),name:"duration",data:"duration",className:"text-center text-nowrap",responsivePriority:3,orderable:!0},{columnName:i18n("map_page.observations"),name:"observations",data:"observations",className:"text-center",responsivePriority:4},{columnName:i18n("map_page.frequency"),name:"frequency",data:"frequency",className:"text-center",orderable:!0,responsivePriority:4,render:(e,t,a)=>"sort"==t||"type"==t?e:e+" sec"}],l=8;let o={serverSide:!0,order:[[l,"desc"]]},r=ntopng_utility.clone(s);r.table_buttons=s.table_buttons,r.data_url=`${r.data_url}`,r.columns_config=a,r.table_filters=i,r.table_config=ntopng_utility.clone(o),e.config_devices_standard=r}(this)},mounted(){$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),ntopng_events_manager.on_custom_event("page_periodicity_table",ntopng_custom_events.DATATABLE_LOADED,(()=>{x.get_url_entry("host")&&this.hide_dropdowns()}))},data:()=>({i18n:e=>i18n(e),base_url:`${http_prefix}/lua/pro/enterprise/get_map.lua`,config_devices_standard:null,config_devices_centrality:null,title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_download:i18n("map_page.download"),body_download:i18n("map_page.download_message"),notes:[i18n("map_page.table_note_periodicity_map")],get_url:null}),methods:{hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden"),$("#network_dropdown").removeClass("d-inline"),$("#vlan_id_dropdown").removeClass("d-inline")},create_action_button_historical_flow_link:function(e,t,a){let l={handlerId:"historical_flow_link",onClick:()=>{!function(e){const t=e.client.split("host=")[1].split(">")[0],a=t.substring(0,t.length-1),l=e.server.split("host=")[1].split(">")[0],n=l.substring(0,l.length-1),s=e.port,i=e.first_seen,o=e.last_seen.epoch_end,r={epoch_begin:i,epoch_end:o,srv_ip:`${n};eq`,cli_ip:`${a};eq`,srv_port:`${s};eq`},c=x.obj_to_url_params(r),u=`${http_prefix}/lua/pro/db_search.lua?${c}`;x.go_to_url(u)}(a)}},n={handlerId:"live_flow_link",onClick:()=>{!function(e){const t=e.client.split("host=")[1].split(">")[0],a=t.substring(0,t.length-1),l=e.server.split("host=")[1].split(">")[0],n=l.substring(0,l.length-1),s=e.port,i={server:`${n}`,client:`${a}`,port:`${s}`},o=x.obj_to_url_params(i),r=`${http_prefix}/lua/flows_stats.lua?${o}`;x.go_to_url(r)}(a)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:l,icon:"fas fa-stream",title:i18n("db_explorer.historical_data")},{class:"pointer",handler:n,icon:"fas fa-stream",title:i18n("live_flows")}])},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",page:this.url_params.page,csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)}),this.reload_table()}catch(e){this.reload_table()}},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},destroy:function(){this.get_active_table().destroy_table()},get_active_table:function(){return this.$refs.table_periodicity},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()}}};const yx={class:"row"},wx={class:"col-md-12 col-lg-12"},xx=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),kx={class:"card"},$x=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Sx={class:"card-body"},Nx={id:"periodicity-table"},Cx={class:"card-footer"},Ex={key:0,type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Ax=Vs("i",{class:"fas fa-trash"},null,-1),Tx=["href"],Ox=[Vs("i",{class:"fas fa-download"},null,-1)];bx.render=function(e,t,a,l,n,s){const i=kn("modal-delete-confirm"),o=kn("datatable"),r=kn("NoteList");return Os(),Ms("div",yx,[Vs("div",wx,[xx,Vs("div",kx,[$x,Vs("div",Sx,[Vs("div",Nx,[Hs(i,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(o,{ref:"table_periodicity",table_buttons:n.config_devices_standard.table_buttons,columns_config:n.config_devices_standard.columns_config,data_url:n.config_devices_standard.data_url,enable_search:n.config_devices_standard.enable_search,filter_buttons:n.config_devices_standard.table_filters,table_config:n.config_devices_standard.table_config,base_url:n.base_url,base_params:a.url_params},null,8,["table_buttons","columns_config","data_url","enable_search","filter_buttons","table_config","base_url","base_params"])])]),Vs("div",Cx,[a.is_admin?(Os(),Ms("button",Ex,[Ax,Ks(" "+te(n.i18n("map_page.delete_services")),1)])):Ys("v-if",!0),Vs("a",{href:n.get_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"periodicity_map.json",target:"_blank"},Ox,8,Tx)])]),Hs(r,{note_list:n.notes},null,8,["note_list"])])])},bx.__file="http_src/vue/page-periodicity-table.vue";const Px={autoResize:!0,nodes:{shape:"dot",scaling:{min:10,max:30,label:{enabled:!0,min:8,max:30,drawThreshold:12}},font:{color:"#212529"},shadow:!1},edges:{width:.2,color:{inherit:"from"},smooth:{type:"continuous",roundness:0},arrows:{to:{enabled:!0,scaleFactor:.3}},arrowStrikethrough:!1,scaling:{min:1,max:5}},layout:{improvedLayout:!1},interaction:{hideEdgesOnDrag:!1,hideEdgesOnZoom:!0,hover:!1,tooltipDelay:0},physics:{enabled:!0,solver:"forceAtlas2Based",stabilization:{iterations:300,enabled:!0},forceAtlas2Based:{centralGravity:.01,springLength:100}},groups:{unknown:{shape:"dot"},printer:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},video:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},workstation:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},laptop:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},tablet:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},phone:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},tv:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},networking:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},wifi:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},nas:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},multimedia:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}},iot:{shape:"icon",icon:{face:"FontAwesome",code:"",size:50,weight:700}}}},Ux=function(e,t,a,l){$.post(`${http_prefix}/lua/pro/enterprise/switch_service_state.lua`,{service_id:e,service_status:t,csrf:l}).then((e=>{e.success&&a&&a()}))},Ix=function(){return Px},jx="change_service_table_tab_event";var Mx={components:{datatable:kw,"modal-delete-confirm":nx,"tab-list":Qw,NoteList:fm},props:{page_csrf:String,url_params:Object,view:String,table_filters:Array,is_admin:Boolean,service_acceptance:Array},created(){this.service_table_tab=x.get_url_entry("view")||"standard",x.set_key_to_url("view",this.service_table_tab),this.tab_list.forEach((e=>{this.service_table_tab==e.id&&(e.active=!0)})),function(e){const t=[];let a=[],l=0;e.get_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,url_params),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let n=url_params;n.view="standard";let s={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,n),enable_search:!0},i=[];for(let t of e.$props.table_filters||[])t.callbackFunction=(a,l)=>{n.view=e.service_table_tab,n[t.filterMenuKey]=l.id,x.set_key_to_url(t.filterMenuKey,l.id),a.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,n)),NtopUtils.showOverlays(),a.ajax.reload(),NtopUtils.hideOverlays()},i.push(t);a=[{columnName:i18n("actions"),name:"actions",data:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(t,a,l){return e.create_action_button_historical_flow_link(t,a,l)},createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("map_page.last_seen"),name:"last_seen",data:"last_seen",className:"text-center text-nowrap",render:(e,t)=>e.value,responsivePriority:2},{columnName:i18n("map_page.client"),name:"client",data:"client",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.server"),name:"server",data:"server",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.port"),name:"port",data:"port",className:"text-center",responsivePriority:4},{columnName:i18n("map_page.protocol"),name:"l7proto",data:"protocol",className:"text-nowrap",responsivePriority:3},{columnName:i18n("map_page.first_seen"),name:"first_seen",data:"first_seen",visible:!1,responsivePriority:3},{columnName:i18n("map_page.num_uses"),name:"num_uses",data:"num_uses",className:"text-center text-nowrap",responsivePriority:4},{columnName:i18n("map_page.info"),name:"info",data:"info",responsivePriority:5}],l=7,e.is_admin&&a.push({columnName:i18n("map_page.status"),name:"service_acceptance",data:"service_acceptance",className:"text-center",orderable:!1,responsivePriority:1,render:(t,a,l)=>e.create_action_buttons(t,a,l)});let o={serverSide:!0,order:[[l,"desc"]]},r=ntopng_utility.clone(s);r.table_buttons=s.table_buttons,r.data_url=`${r.data_url}`,r.columns_config=a,r.table_filters=i,r.table_config=ntopng_utility.clone(o),e.config_devices_standard=r,n.view="centrality",s.data_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,n),a=[{columnName:i18n("map_page.host"),name:"host",data:"host",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.total_edges"),name:"total_edges",data:"total_edges",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.rank"),name:"rank",data:"rank",className:"text-center",responsivePriority:2},{columnName:i18n("map_page.in_edges"),name:"in_edges",data:"in_edges",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.out_edges"),name:"out_edges",data:"out_edges",className:"text-center",responsivePriority:2}],l=2,o.order=[[l,"desc"]],r=ntopng_utility.clone(s),r.table_buttons=s.table_buttons,r.data_url=`${r.data_url}`,r.columns_config=a,r.table_filters=i,r.table_config=ntopng_utility.clone(o),e.config_devices_centrality=r}(this)},mounted(){C.on_custom_event("page_service_table",ntopng_custom_events.DATATABLE_LOADED,(()=>{x.get_url_entry("host")&&this.hide_dropdowns()})),C.on_custom_event("change_service_table_tab",jx,(e=>{let t=this.get_active_table();x.set_key_to_url("view",e),t.delete_button_handlers(this.service_table_tab),t.destroy_table(),this.service_table_tab=e})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog()))},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null,title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),get_url:null,service_table_tab:null,notes:[i18n("map_page.table_note_service_map")],tab_list:[{title:i18n("map_page.standard_view"),active:"standard"==view,id:"standard"},{title:i18n("map_page.centrality_view"),active:"centrality"==view,id:"centrality"}]}),methods:{hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden"),$("#network_dropdown").removeClass("d-inline"),$("#vlan_id_dropdown").removeClass("d-inline")},destroy:function(){let e=this.get_active_table();e.delete_button_handlers(this.service_table_tab),e.destroy_table()},click_item:function(e){this.tab_list.forEach((e=>e.active=!1)),e.active=!0,C.emit_custom_event(jx,e.id)},create_action_buttons:function(e,t,a){const l=this.reload_table,n=this.$props.page_csrf,s={onClick:()=>{Ux(a.hash_id,this.$props.service_acceptance[0].id,l,n)}},i={onClick:()=>{Ux(a.hash_id,this.$props.service_acceptance[1].id,l,n)}},o={onClick:()=>{Ux(a.hash_id,this.$props.service_acceptance[2].id,l,n)}};if("display"!==t)return e;const r=a.acceptance,c={class:"dropdown-item",href:"#",title:this.$props.service_acceptance[0].label,handler:s},u={class:"dropdown-item",href:"#",title:this.$props.service_acceptance[1].label,handler:i},d={class:"dropdown-item disabled",href:"#",title:this.$props.service_acceptance[2].label,handler:o};switch(r){case 0:c.class="dropdown-item active";break;case 1:u.class="dropdown-item active";break;case 2:d.class="dropdown-item active disabled"}return DataTableUtils.createActionButtons([d,c,u])},create_action_button_historical_flow_link:function(e,t,a){let l={handlerId:"historical_flow_link",onClick:()=>{!function(e){const t=e.client.split("host=")[1].split(">")[0],a=t.substring(0,t.length-1),l=e.server.split("host=")[1].split(">")[0],n=l.substring(0,l.length-1),s=e.port,i=e.first_seen,o=e.last_seen.epoch_end,r={epoch_begin:i,epoch_end:o,srv_ip:`${n};eq`,cli_ip:`${a};eq`,srv_port:`${s};eq`},c=x.obj_to_url_params(r),u=`${http_prefix}/lua/pro/db_search.lua?${c}`;x.go_to_url(u)}(a)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:l,icon:"fas fa-stream",title:i18n("db_explorer.historical_data")}])},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",page:this.url_params.page,csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)}),this.reload_table()}catch(e){this.reload_table()}},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},get_active_table:function(){return this.$refs[`table_service_${this.service_table_tab}`]},switch_to_standard:function(){this.url_params.view="standard",document.location.href=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/network_maps.lua`,url_params)},switch_to_centrality:function(){this.url_params.view="centrality",document.location.href=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/network_maps.lua`,url_params)},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()}}};const Lx={class:"row"},Fx={class:"col-md-12 col-lg-12"},Rx=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),Dx={class:"card"},zx=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),qx={class:"card-body"},Bx={id:"table_service"},Vx={class:"card-footer"},Hx={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Gx=Vs("i",{class:"fas fa-trash"},null,-1),Wx=["href"],Kx=[Vs("i",{class:"fas fa-download"},null,-1)];Mx.render=function(e,t,a,l,n,s){const i=kn("modal-delete-confirm"),o=kn("tab-list"),r=kn("datatable"),c=kn("NoteList");return Os(),Ms("div",Lx,[Vs("div",Fx,[Rx,Vs("div",Dx,[zx,Vs("div",qx,[Vs("div",Bx,[Hs(i,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(o,{ref:"service_tab_list",id:"service_tab_list",tab_list:n.tab_list,onClick_item:s.click_item},null,8,["tab_list","onClick_item"]),"standard"==n.service_table_tab?(Os(),Ls(r,{key:0,ref:"table_service_standard",table_buttons:n.config_devices_standard.table_buttons,columns_config:n.config_devices_standard.columns_config,data_url:n.config_devices_standard.data_url,enable_search:n.config_devices_standard.enable_search,filter_buttons:n.config_devices_standard.table_filters,table_config:n.config_devices_standard.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","filter_buttons","table_config"])):Ys("v-if",!0),"centrality"==n.service_table_tab?(Os(),Ls(r,{key:1,ref:"table_service_centrality",table_buttons:n.config_devices_centrality.table_buttons,columns_config:n.config_devices_centrality.columns_config,data_url:n.config_devices_centrality.data_url,enable_search:n.config_devices_centrality.enable_search,filter_buttons:n.config_devices_centrality.table_filters,table_config:n.config_devices_centrality.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","filter_buttons","table_config"])):Ys("v-if",!0)])]),Vs("div",Vx,[Ys('\n        {% if is_admin then %}\n          <form class="d-inline" id=\'switch-state-form\'>\n            <div class="form-group mb-3 d-inline">\n              <label>{* i18n("map_page.set_state", {label = "<span class=\'count\'></span>"}) *}</label>\n              <select name="new_state" class="form-select d-inline" style="width: 16rem" {{ ternary(map.services_num == 0, "disabled=\'disabled\'", "") }}>\n              {% for _, status in pairsByField(map.filters.service_status_filters, label, asc_insensitive) do %}\n                <option value="{{ status.id }}">{* status.label *}</option>\n              {% end %}\n              </select>\n              <button class="btn btn-secondary d-inline" class="btn-switch-state" {{ ternary(map.services_num == 0, "disabled=\'disabled\'", "") }}>\n                <i class="fas fa-random"></i> {{ i18n("set") }}\n              </button>\n            </div>\n          </form>\n        {% end %}\n    '),Vs("button",Hx,[Gx,Ks(" "+te(n.i18n("map_page.delete_services")),1)]),Vs("a",{href:n.get_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"service_map.json",target:"_blank"},Kx,8,Wx)])]),Hs(c,{note_list:n.notes},null,8,["note_list"])])])},Mx.__file="http_src/vue/page-service-table.vue";const Jx={key:0,class:"alert alert-info"},Yx=["id"];var Zx={__name:"network-map",props:{empty_message:String,event_listeners:Object,page_csrf:String,url:String,url_params:Object,map_id:String},setup(e,{expose:t}){const a=e,l={ifid:a.url_params.ifid,action:"load_graph",map:a.url_params.map_id};let n={},s={},i=!1,o=null;const r=ma(!1),c=ma(!0),u=ma(!1),d=ma({}),_=ma(null),p=ma(null),f=ma(null);_n((async()=>{const e=document.getElementById(a.map_id);h(),await m(),p.value=Ix(),o=new vis.Network(e,_.value,p.value),g()})),mn((()=>{1!=u.value&&b()}));const m=async()=>{d.value=a.url_params;const e=NtopUtils.buildURL(a.url,d.value);await $.get(e,l,(async function(e){const{nodes:t,edges:a,max_entry_reached:l}=e.rsp;r.value=l,n=new vis.DataSet(t.map((e=>(e.title=(e=>{const t=document.createElement("div");return t.innerHTML=`<b>${e.label}</b><br><br>${i18n("db_explorer.host_data")}: ${e.id}`,t})(e),e)))),s=new vis.DataSet(a),_.value={nodes:n,edges:s},f.value=n.get({returnType:"Object"}),v()}))},v=()=>{0==_.value?.nodes.length&&0==_.value?.edges.length?c.value=!0:c.value=!1},h=()=>{const e=NtopUtils.loadElementScale($(".resizable-y-container"));if(null!=e)$(".resizable-y-container").width(e.width),$(".resizable-y-container").height(e.height),$(".resizable-y-container").on("mouseup",(function(){const e={width:$(".resizable-y-container").width(),height:$(".resizable-y-container").height()};NtopUtils.saveElementScale($(this),e)}));else{const e={width:$(".resizable-y-container").width(),height:$(".resizable-y-container").height()};NtopUtils.saveElementScale($(this),e)}};const g=()=>{o.on("stabilizationIterationsDone",(function(){o.setOptions({physics:!1})})),o.on("click",(function(e){!function(e){if(e.nodes.length>0){var t,a;i=!0;var l=e.nodes[0];for(var s in f.value)f.value[s].old_color||(f.value[s].old_color=f.value[s].color),f.value[s].old_icon_color||(f.value[s].old_icon_color=f.value[s].icon),f.value[s].color="#c8c8c8",f.value[s].icon={color:"#c8c8c8"},void 0===f.value[s].hiddenLabel&&(f.value[s].hiddenLabel=f.value[s].label,f.value[s].label=void 0);var r=o.getConnectedNodes(l),c=[];for(t=1;t<2;t++)for(a=0;a<r.length;a++)c=c.concat(o.getConnectedNodes(r[a]));for(t=0;t<r.length;t++)f.value[r[t]].color=f.value[r[t]].old_color,f.value[r[t]].icon=f.value[r[t]].old_icon_color,void 0!==f.value[r[t]].hiddenLabel&&(f.value[r[t]].label=f.value[r[t]].hiddenLabel,f.value[r[t]].hiddenLabel=void 0);f.value[l].color=f.value[l].old_color,f.value[l].icon=f.value[l].old_icon_color,void 0!==f.value[l].hiddenLabel&&(f.value[l].label=f.value[l].hiddenLabel,f.value[l].hiddenLabel=void 0)}else if(!0===i){for(var s in f.value)f.value[s].color=f.value[s].old_color,f.value[s].icon=f.value[s].old_icon_color,void 0!==f.value[s].hiddenLabel&&(f.value[s].label=f.value[s].hiddenLabel,f.value[s].hiddenLabel=void 0);i=!1}var u=[];for(s in f.value)f.value.hasOwnProperty(s)&&u.push(f.value[s]);n.update(u)}(e)})),o.on("doubleClick",(function(e){(async e=>{const t=e.id.split("@");d.value.host=t[0],d.value.vlan_id=t[1],x.set_key_to_url("host",d.value.host),x.set_key_to_url("vlan_id",d.value.vlan_id),C.emit_custom_event(ntopng_custom_events.CHANGE_PAGE_TITLE,e),await y()})(n.get(e.nodes[0]))})),o.on("afterDrawing",(function(e){C.emit_custom_event(ntopng_custom_events.VIS_DATA_LOADED)}));for(const e in a.event_listeners||{})o.on(e,a.event_listeners[e])},b=()=>{null!=o&&o.destroy(!0),u.value=!0},y=async()=>{await m(),null!=o&&(o.setOptions({physics:p.value.physics}),o.setData(_.value))};return t({reload:y,destroy:b,is_max_entry_reached:()=>r.value,autolayout:()=>{null!=o?o instanceof vis.Network?o.stabilize():console.error("Not a vis.Network instance!"):console.error("The network is undefined!")},update_url_params:e=>{d.value=e}}),(t,a)=>(Os(),Ms(Ss,null,[c.value?(Os(),Ms("div",Jx,te(e.empty_message),1)):Ys("v-if",!0),Vs("div",{class:"d-flex justify-content-center align-items-center resizable-y-container",style:{width:"100%",height:"60vh"},id:e.map_id},null,8,Yx)],64))},__file:"http_src/vue/network-map.vue"},Xx={__name:"modal-autolayout-confirm",props:{body:String,title:String},emits:["autolayout"],setup(e,{expose:t,emit:a}){const l=ma(null),n=()=>{a("autolayout"),s()},s=()=>{l.value.close()};t({show:()=>{l.value.show()},close:s}),_n((()=>{}));const i=e=>i18n(e);return(t,a)=>(Os(),Ls(np,{onShowed:a[0]||(a[0]=e=>{}),ref_key:"modal_id",ref:l},{title:vl((()=>[Ks(te(e.title),1)])),body:vl((()=>[Ks(te(e.body),1)])),footer:vl((()=>[Vs("button",{type:"button",onClick:n,class:"btn btn-primary"},te(i("confirm")),1)])),_:1},512))},__file:"http_src/vue/modal-autolayout-confirm.vue"};const Qx="change_filter_event";var ek={components:{"network-map":Zx,"modal-delete-confirm":nx,"modal-autolayout-confirm":Xx,"select-search":l_,NoteList:fm},props:{page_csrf:String,ifid:Number,url_params:Object,map_id:String,is_admin:Boolean,all_filter_list:Object},created(){!function(e){for(const t in e.$props.all_filter_list){e.filter_list.push(e.$props.all_filter_list[t]);const a=ntopng_url_manager.get_url_entry(t);for(let[l,n]of Object.entries(e.$props.all_filter_list[t]))n.filter_name=t,a?n.id==a&&e.active_filter_list.push(n):1==n.currently_active&&e.active_filter_list.push(n)}e.get_url=`${http_prefix}/lua/pro/rest/v2/get/interface/map/data.lua`,e.download_url=NtopUtils.buildURL(e.get_url,e.$props.url_params),e.event_listeners={}}(this)},mounted(){const e=this.max_entry_reached,t=this.reload_map;this.$props.url_params.host&&""!=this.$props.url_params.host&&this.hide_dropdowns(),C.on_custom_event("page_service_map",ntopng_custom_events.CHANGE_PAGE_TITLE,(e=>{this.hide_dropdowns()})),C.on_custom_event("change_filter_event",Qx,(e=>{this.active_filter_list.forEach(((t,a)=>{t.filter_name==e.filter_name&&(this.active_filter_list[a]=e)})),ntopng_url_manager.set_key_to_url(e.filter_name,e.key),this.url_params[e.filter_name]=e.key,this.update_and_reload_map()})),C.on_custom_event(this.get_map(),ntopng_custom_events.VIS_DATA_LOADED,(t=>{e()?$("#max-entries-reached").removeAttr("hidden"):$("#max-entries-reached").attr("hidden","hidden"),NtopUtils.hideOverlays()}));let a=ntopng_url_manager.get_url_entries();for(const[e,t]of a)this.url_params[e]=t;$("#reload-graph").click((function(e){t()})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),$("#autolayout").click((()=>this.show_autolayout_dialog()))},data:()=>({i18n:e=>i18n(e),container:null,update_view_state_id:null,get_url:null,download_url:null,filter_list:[],active_filter_list:[],event_listeners:{},title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_autolayout:i18n("map_page.autolayout_services"),body_autolayout:i18n("map_page.autolayout_services_message"),no_services_message:i18n("map_page.no_services"),max_entry_title:i18n("max_entries_reached"),notes:[i18n("map_page.graph_note_service_map")]}),methods:{destroy:function(){this.get_map().destroy()},click_item:function(e){C.emit_custom_event(Qx,e)},get_map:function(){return this.$refs.service_map},max_entry_reached:function(){return this.get_map().is_max_entry_reached()},reload_map:async function(){NtopUtils.showOverlays();let e=this.get_map();await e.reload()},update_and_reload_map:async function(){let e=this.get_map();NtopUtils.showOverlays(),e.update_url_params(this.url_params),await e.reload()},autolayout:function(){this.get_map().autolayout()},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_autolayout_dialog:function(){this.$refs.modal_autolayout.show()},hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)})}finally{this.reload_map()}}}};const tk={class:"row"},ak={class:"col-md-12 col-lg-12"},lk={class:"card card-shadow"},nk=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),sk={class:"card-body"},ik={id:"table_service"},ok={class:"d-flex align-items-center justify-content-end mb-2"},rk=["title"],ck=[Vs("i",{class:"text-danger fa-solid fa-triangle-exclamation"},null,-1)],uk={class:"d-flex ms-auto"},dk={class:"m-1"},_k=Vs("button",{type:"button",id:"reload-graph",class:"btn btn-link btn-reload-graph"},[Vs("i",{class:"fas fa-sync"})],-1),pk=Vs("button",{type:"button",id:"autolayout",class:"btn btn-link btn-stabilize"},[Vs("i",{class:"fas fa-magic"})],-1),fk={class:"card-footer"},mk={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},vk=Vs("i",{class:"fas fa-trash"},null,-1),hk=["href"],gk=[Vs("i",{class:"fas fa-download"},null,-1)];ek.render=function(e,t,a,l,n,s){const i=kn("select-search"),o=kn("modal-delete-confirm"),r=kn("modal-autolayout-confirm"),c=kn("network-map"),u=kn("NoteList");return Os(),Ms("div",tk,[Vs("div",ak,[Vs("div",lk,[nk,Vs("div",sk,[Vs("div",ik,[Vs("div",ok,[Vs("button",{id:"max-entries-reached",type:"button",class:"btn btn-link",title:n.max_entry_title,disabled:"",hidden:""},ck,8,rk),Vs("div",uk,[(Os(!0),Ms(Ss,null,An(n.filter_list,((e,t)=>(Os(),Ms("div",dk,[Hs(i,{selected_option:n.active_filter_list[t],"onUpdate:selected_option":e=>n.active_filter_list[t]=e,options:n.filter_list[t],onSelect_option:s.click_item},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256))]),_k,pk]),Hs(o,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(r,{ref:"modal_autolayout",title:n.title_autolayout,body:n.body_autolayout,onAutolayout:s.reload_map},null,8,["title","body","onAutolayout"]),Hs(c,{ref:"service_map",empty_message:n.no_services_message,event_listeners:n.event_listeners,page_csrf:a.page_csrf,url:n.get_url,url_params:a.url_params,map_id:a.map_id},null,8,["empty_message","event_listeners","page_csrf","url","url_params","map_id"])])]),Vs("div",fk,[Vs("button",mk,[vk,Ks(" "+te(n.i18n("map_page.delete_services")),1)]),Vs("a",{href:n.download_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"service_map.json",target:"_blank"},gk,8,hk)])]),Hs(u,{note_list:n.notes},null,8,["note_list"])])])},ek.__file="http_src/vue/page-service-map.vue";const bk="change_filter_event";var yk={components:{"network-map":Zx,"modal-delete-confirm":nx,"modal-autolayout-confirm":Xx,"select-search":l_,NoteList:fm},props:{page_csrf:String,ifid:Number,url_params:Object,map_id:String,is_admin:Boolean,all_filter_list:Object},created(){!function(e){for(const t in e.$props.all_filter_list){e.filter_list.push(e.$props.all_filter_list[t]);const a=ntopng_url_manager.get_url_entry(t);for(let[l,n]of Object.entries(e.$props.all_filter_list[t]))n.filter_name=t,a?n.id==a&&e.active_filter_list.push(n):1==n.currently_active&&e.active_filter_list.push(n)}e.get_url=`${http_prefix}/lua/pro/rest/v2/get/interface/map/data.lua`,e.download_url=NtopUtils.buildURL(e.get_url,e.updated_url_params),e.event_listeners={}}(this)},mounted(){this.updated_url_params=this.$props.url_params;let e=ntopng_url_manager.get_url_entries();for(const[t,a]of e)this.updated_url_params[t]=a;const t=this.max_entry_reached,a=this.reload_map;this.update_and_reload_map(),this.$props.url_params.host&&""!=this.$props.url_params.host&&this.hide_dropdowns(),C.on_custom_event("page_periodicity_map",ntopng_custom_events.CHANGE_PAGE_TITLE,(e=>{this.hide_dropdowns()})),C.on_custom_event("change_filter_event",bk,(e=>{this.active_filter_list.forEach(((t,a)=>{t.filter_name==e.filter_name&&(this.active_filter_list[a]=e)})),ntopng_url_manager.set_key_to_url(e.filter_name,e.key),this.url_params[e.filter_name]=e.key,this.update_and_reload_map()})),C.on_custom_event(this.get_map(),ntopng_custom_events.VIS_DATA_LOADED,(e=>{t()?$("#max-entries-reached").removeAttr("hidden"):$("#max-entries-reached").attr("hidden","hidden"),NtopUtils.hideOverlays()})),$("#reload-graph").click((function(e){a()})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),$("#autolayout").click((()=>this.show_autolayout_dialog()))},data:()=>({i18n:e=>i18n(e),container:null,update_view_state_id:null,get_url:null,download_url:null,updated_url_params:{},filter_list:[],active_filter_list:[],event_listeners:{},title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_autolayout:i18n("map_page.autolayout_services"),body_autolayout:i18n("map_page.autolayout_services_message"),no_services_message:i18n("map_page.no_services"),max_entry_title:i18n("max_entries_reached"),notes:[i18n("map_page.graph_note_periodicity_map")]}),methods:{destroy:function(){this.get_map().destroy()},click_item:function(e){C.emit_custom_event(bk,e)},get_map:function(){return this.$refs.periodicity_map},max_entry_reached:function(){return this.get_map().is_max_entry_reached()},reload_map:async function(){NtopUtils.showOverlays();let e=this.get_map();await e.reload()},hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},update_and_reload_map:async function(){let e=this.get_map();NtopUtils.showOverlays(),e.update_url_params(this.updated_url_params),await e.reload()},autolayout:function(){this.get_map().autolayout()},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_autolayout_dialog:function(){this.$refs.modal_autolayout.show()},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.updated_url_params.ifid,action:"reset",csrf:this.$props.page_csrf,map:this.updated_url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)})}finally{this.reload_map()}}}};const wk={class:"row"},xk={class:"col-md-12 col-lg-12"},kk={class:"card card-shadow"},$k=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Sk={class:"card-body"},Nk={id:"table_periodicity"},Ck={class:"d-flex align-items-center justify-content-end mb-2"},Ek=["title"],Ak=[Vs("i",{class:"text-danger fa-solid fa-triangle-exclamation"},null,-1)],Tk={class:"d-flex ms-auto"},Ok={class:"m-1"},Pk=Vs("button",{type:"button",id:"reload-graph",class:"btn btn-link btn-reload-graph"},[Vs("i",{class:"fas fa-sync"})],-1),Uk=Vs("button",{type:"button",id:"autolayout",class:"btn btn-link btn-stabilize"},[Vs("i",{class:"fas fa-magic"})],-1),Ik={class:"card-footer"},jk={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Mk=Vs("i",{class:"fas fa-trash"},null,-1),Lk=["href"],Fk=[Vs("i",{class:"fas fa-download"},null,-1)];yk.render=function(e,t,a,l,n,s){const i=kn("select-search"),o=kn("modal-delete-confirm"),r=kn("modal-autolayout-confirm"),c=kn("network-map"),u=kn("NoteList");return Os(),Ms("div",wk,[Vs("div",xk,[Vs("div",kk,[$k,Vs("div",Sk,[Vs("div",Nk,[Vs("div",Ck,[Vs("button",{id:"max-entries-reached",type:"button",class:"btn btn-link",title:n.max_entry_title,disabled:"",hidden:""},Ak,8,Ek),Vs("div",Tk,[(Os(!0),Ms(Ss,null,An(n.filter_list,((e,t)=>(Os(),Ms("div",Ok,[Hs(i,{selected_option:n.active_filter_list[t],"onUpdate:selected_option":e=>n.active_filter_list[t]=e,options:n.filter_list[t],onSelect_option:s.click_item},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256))]),Pk,Uk]),Hs(o,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(r,{ref:"modal_autolayout",title:n.title_autolayout,body:n.body_autolayout,onAutolayout:s.reload_map},null,8,["title","body","onAutolayout"]),Hs(c,{ref:"periodicity_map",empty_message:n.no_services_message,event_listeners:n.event_listeners,page_csrf:a.page_csrf,url:n.get_url,url_params:a.url_params,map_id:a.map_id},null,8,["empty_message","event_listeners","page_csrf","url","url_params","map_id"])])]),Vs("div",Ik,[Vs("button",jk,[Mk,Ks(" "+te(n.i18n("map_page.delete_services")),1)]),Vs("a",{href:n.download_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"periodicity_map.json",target:"_blank"},Fk,8,Lk)])]),Hs(u,{note_list:n.notes},null,8,["note_list"])])])},yk.__file="http_src/vue/page-periodicity-map.vue";const Rk="change_filter_event";var Dk={components:{"network-map":Zx,"modal-delete-confirm":nx,"modal-autolayout-confirm":Xx,"select-search":l_,NoteList:fm},props:{page_csrf:String,ifid:Number,url_params:Object,map_id:String,is_admin:Boolean,all_filter_list:Object},created(){!function(e){for(const t in e.$props.all_filter_list){e.filter_list.push(e.$props.all_filter_list[t]);const a=x.get_url_entry(t);for(let[l,n]of Object.entries(e.$props.all_filter_list[t]))n.filter_name=t,a?n.id==a&&e.active_filter_list.push(n):1==n.currently_active&&e.active_filter_list.push(n)}e.get_url=`${http_prefix}/lua/pro/rest/v2/get/interface/map/data.lua`,e.download_url=NtopUtils.buildURL(e.get_url,e.$props.url_params),e.event_listeners={}}(this)},mounted(){const e=this.max_entry_reached,t=this.reload_map;this.$props.url_params.host&&""!=this.$props.url_params.host&&this.hide_dropdowns(),C.on_custom_event("page_service_map",ntopng_custom_events.CHANGE_PAGE_TITLE,(e=>{this.hide_dropdowns()})),C.on_custom_event("change_filter_event",Rk,(e=>{this.active_filter_list.forEach(((t,a)=>{t.filter_name==e.filter_name&&(this.active_filter_list[a]=e)})),x.set_key_to_url(e.filter_name,e.key),this.url_params[e.filter_name]=e.key,this.update_and_reload_map()})),C.on_custom_event(this.get_map(),ntopng_custom_events.VIS_DATA_LOADED,(t=>{e()?$("#max-entries-reached").removeAttr("hidden"):$("#max-entries-reached").attr("hidden","hidden"),NtopUtils.hideOverlays()}));let a=x.get_url_entries();for(const[e,t]of a)this.url_params[e]=t;$("#reload-graph").click((function(e){t()})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),$("#autolayout").click((()=>this.show_autolayout_dialog()))},data:()=>({i18n:e=>i18n(e),container:null,update_view_state_id:null,get_url:null,download_url:null,filter_list:[],active_filter_list:[],event_listeners:{},title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_autolayout:i18n("map_page.autolayout_services"),body_autolayout:i18n("map_page.autolayout_services_message"),no_services_message:i18n("map_page.no_services"),max_entry_title:i18n("max_entries_reached"),notes:[i18n("map_page.graph_note_asset_map")]}),methods:{destroy:function(){this.get_map().destroy()},click_item:function(e){C.emit_custom_event(Rk,e)},get_map:function(){return this.$refs.asset_map},hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},max_entry_reached:function(){return this.get_map().is_max_entry_reached()},reload_map:async function(){NtopUtils.showOverlays();let e=this.get_map();await e.reload()},update_and_reload_map:async function(){let e=this.get_map();NtopUtils.showOverlays(),e.update_url_params(this.url_params),await e.reload()},autolayout:function(){this.get_map().autolayout()},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_autolayout_dialog:function(){this.$refs.modal_autolayout.show()},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",csrf:this.$props.page_csrf,map:this.url_params.map};try{let a={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:a,body:JSON.stringify(t)})}finally{NtopUtils.showOverlays(),this.reload_map()}}}};const zk={class:"row"},qk={class:"col-md-12 col-lg-12"},Bk={class:"card card-shadow"},Vk=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Hk={class:"card-body"},Gk={id:"table_asset"},Wk={class:"d-flex align-items-center justify-content-end mb-2"},Kk=["title"],Jk=[Vs("i",{class:"text-danger fa-solid fa-triangle-exclamation"},null,-1)],Yk={class:"d-flex ms-auto"},Zk={class:"m-1"},Xk=Vs("button",{type:"button",id:"reload-graph",class:"btn btn-link btn-reload-graph"},[Vs("i",{class:"fas fa-sync"})],-1),Qk=Vs("button",{type:"button",id:"autolayout",class:"btn btn-link btn-stabilize"},[Vs("i",{class:"fas fa-magic"})],-1),e$={class:"card-footer"},t$={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},a$=Vs("i",{class:"fas fa-trash"},null,-1),l$=["href"],n$=[Vs("i",{class:"fas fa-download"},null,-1)];Dk.render=function(e,t,a,l,n,s){const i=kn("select-search"),o=kn("modal-delete-confirm"),r=kn("modal-autolayout-confirm"),c=kn("network-map"),u=kn("NoteList");return Os(),Ms("div",zk,[Vs("div",qk,[Vs("div",Bk,[Vk,Vs("div",Hk,[Vs("div",Gk,[Vs("div",Wk,[Vs("button",{id:"max-entries-reached",type:"button",class:"btn btn-link",title:n.max_entry_title,disabled:"",hidden:""},Jk,8,Kk),Vs("div",Yk,[(Os(!0),Ms(Ss,null,An(n.filter_list,((e,t)=>(Os(),Ms("div",Zk,[Hs(i,{selected_option:n.active_filter_list[t],"onUpdate:selected_option":e=>n.active_filter_list[t]=e,options:n.filter_list[t],onSelect_option:s.click_item},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256))]),Xk,Qk]),Hs(o,{ref:"modal_delete_all",title:n.title_delete,body:n.body_delete,onDelete:s.delete_all},null,8,["title","body","onDelete"]),Hs(r,{ref:"modal_autolayout",title:n.title_autolayout,body:n.body_autolayout,onAutolayout:s.reload_map},null,8,["title","body","onAutolayout"]),Hs(c,{ref:"asset_map",empty_message:n.no_services_message,event_listeners:n.event_listeners,page_csrf:a.page_csrf,url:n.get_url,url_params:a.url_params,map_id:a.map_id},null,8,["empty_message","event_listeners","page_csrf","url","url_params","map_id"])])]),Vs("div",e$,[Vs("button",t$,[a$,Ks(" "+te(n.i18n("map_page.delete_services")),1)]),Vs("a",{href:n.download_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"asset_map.json",target:"_blank"},n$,8,l$)])]),Hs(u,{note_list:n.notes},null,8,["note_list"])])])},Dk.__file="http_src/vue/page-asset-map.vue";const s$={class:"form-group mb-3 row"},i$={class:"col-form-label col-sm-4"},o$={class:"col-sm-7"},r$=Vs("div",{class:"invalid-feedback"},null,-1),c$={class:"form-group mb-3 row"},u$={class:"col-form-label col-sm-4 pt-2"},d$={class:"form-switch col-sm-7 pt-2 ps-3"},_$={class:"col-form-label"};var p$={__name:"modal-add-device-exclusion",props:{body:String,title:String,footer:String,list_notes:String},emits:["add"],setup(e,{expose:t,emit:a}){const l=ma(""),n=ma(""),s=ma(null),i=()=>{a("add",{mac_list:l.value,trigger_alerts:n.value}),o()},o=()=>{s.value.close()};t({show:()=>{l.value="",s.value.show()},close:o}),_n((()=>{}));const r=e=>i18n(e);return(t,a)=>(Os(),Ls(np,{onShowed:a[2]||(a[2]=e=>{}),ref_key:"modal_id",ref:s},{title:vl((()=>[Ks(te(e.title),1)])),body:vl((()=>[Vs("div",s$,[Vs("label",i$,te(e.body),1),Vs("div",o$,[wn(Vs("textarea",{name:"items-list",id:"itemslist-textarea",class:"w-100 form-control",rows:"6","onUpdate:modelValue":a[0]||(a[0]=e=>l.value=e)},null,512),[[jo,l.value]]),Vs("small",null,te(e.list_notes),1),r$])]),Vs("div",c$,[Vs("label",u$,te(r("edit_check.trigger_device_disconnected_alert")),1),Vs("div",d$,[wn(Vs("input",{type:"checkbox",class:"form-check-input ms-0","onUpdate:modelValue":a[1]||(a[1]=e=>n.value=e)},null,512),[[Mo,n.value]])]),Vs("small",_$,te(r("edit_check.trigger_device_disconnected_alert_descr")),1)])])),footer:vl((()=>[Ks(te(r("host_details.notes"))+": "+te(e.footer)+" ",1),Vs("button",{type:"button",onClick:i,class:"btn btn-primary"},te(r("add")),1)])),_:1},512))},__file:"http_src/vue/modal-add-device-exclusion.vue"};const f$={key:0,class:"form-group mb-3 row"},m$={class:"col-form-label col-sm-4"},v$={class:"col-sm-7"},h$=["placeholder"],g$={class:"form-group mb-3 row"},b$={class:"col-form-label col-sm-4"},y$={class:"col-sm-7"},w$={class:"form-group mb-3 row"},x$={class:"col-form-label col-sm-4 pt-2"},k$={class:"form-switch col-sm-7 pt-2 ps-3"},$$={class:"col-form-label"};var S$={__name:"modal-edit-device-exclusion",props:{title:String,title_edit_all:String},emits:["edit"],setup(e,{expose:t,emit:a}){const l=ma(""),n=ma(""),s=ma(""),i=ma(i18n("if_stats_config.custom_name")),o=ma(null),r=e=>i18n(e),c=ma([{id:"allowed",value:"allowed",label:r("edit_check.authorized")},{id:"denied",value:"denied",label:r("edit_check.unauthorized")}]),u=ma(!1),d=()=>{0==u.value?a("edit",{mac_alias:l.value,mac_status:n.value.value,trigger_alerts:s.value}):a("edit",{mac_status:n.value.value,trigger_alerts:s.value,mac_alias:"all"}),_()},_=()=>{o.value.close()};return t({show:e=>{if(null!=e){let t=null;c.value.forEach((a=>{a.id==e.status&&(t=a)})),n.value=t,l.value=e.mac_address.mac,s.value=e.trigger_alert||!1}else n.value=c.value[0],u.value=!0;o.value.show()},close:_}),_n((()=>{})),(t,a)=>(Os(),Ls(np,{onShowed:a[3]||(a[3]=e=>{}),ref_key:"modal_id",ref:o},{title:vl((()=>[0==u.value?(Os(),Ms(Ss,{key:0},[Ks(te(e.title),1)],64)):(Os(),Ms(Ss,{key:1},[Ks(te(e.title_edit_all),1)],64))])),body:vl((()=>[0==u.value?(Os(),Ms("div",f$,[Vs("label",m$,te(r("edit_check.device_alias")),1),Vs("div",v$,[wn(Vs("input",{type:"text",name:"custom_name",class:"form-control",placeholder:i.value,"onUpdate:modelValue":a[0]||(a[0]=e=>l.value=e)},null,8,h$),[[jo,l.value]])])])):Ys("v-if",!0),Vs("div",g$,[Vs("label",b$,te(r("edit_check.device_status")),1),Vs("div",y$,[Hs(l_,{selected_option:n.value,"onUpdate:selected_option":a[1]||(a[1]=e=>n.value=e),options:c.value},null,8,["selected_option","options"])])]),Vs("div",w$,[Vs("label",x$,te(r("edit_check.trigger_device_disconnected_alert")),1),Vs("div",k$,[wn(Vs("input",{type:"checkbox",class:"form-check-input ms-0","onUpdate:modelValue":a[2]||(a[2]=e=>s.value=e)},null,512),[[Mo,s.value]])]),Vs("small",$$,te(r("edit_check.trigger_device_disconnected_alert_descr")),1)])])),footer:vl((()=>[Vs("button",{type:"button",onClick:d,class:"btn btn-primary"},te(r("edit")),1)])),_:1},512))},__file:"http_src/vue/modal-edit-device-exclusion.vue"};const N$={class:"row"},C$={class:"col-md-12 col-lg-12"},E$=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),A$={class:"card"},T$={class:"card-body"},O$={key:0,class:"alert alert-info"},P$={id:"table_devices_vue"},U$=[Vs("i",{class:"fas fa-plus"},null,-1)],I$={class:"card-footer mt-3"},j$=Vs("i",{class:"fas fa-trash"},null,-1),M$=Vs("i",{class:"fas fa-edit"},null,-1);var L$={__name:"page-device-exclusions",props:{context:Object},setup(e){const t=e,a=ma(),l=ma(),n=ma(),s=ma(),i=ma(),o=ma("device_exclusions"),r=`${http_prefix}/lua/pro/rest/v2/add/device/exclusion.lua`,c=`${http_prefix}/lua/pro/rest/v2/delete/device/exclusion.lua`,u=`${http_prefix}/lua/pro/rest/v2/edit/device/exclusion.lua`,d=`${http_prefix}/lua/pro/rest/v2/get/device/learning_status.lua`,_=ma(!1),p=e=>i18n(e);let f="",m="",v=p("edit_check.delete_all_device_exclusions"),h=p("edit_check.delete_all_device_exclusions_message"),g=p("edit_check.add_device_exclusion"),b=p("edit_check.add_device_exclusion_message"),y=p("edit_check.add_device_exclusion_notes"),w=p("edit_check.add_device_exclusion_list_notes"),x=p("edit_check.edit_device_exclusion"),k=p("edit_check.edit_all_devices_status"),$=p("edit_check.learning"),S=ma(null),N=ma(null);const C={csrf:t.context.csrf,ifid:t.context.ifid},E=[p("edit_check.device_exclusion_page_notes.note_1")],A=[p("edit_check.device_exclusion_page_notes.sub_note_1"),p("edit_check.device_exclusion_page_notes.sub_note_2")];function T(e){let t={click_button_edit_device:P,click_button_historical_flows:U,click_button_delete:O};null!=t[e.event_id]&&t[e.event_id](e)}async function O(e){let t=`${i18n("edit_check.delete_device_exclusion")} ${e.row.mac_address.mac}`;S.value=e.row,m=t,f=i18n("edit_check.device_exclusion"),l.value.show(m,f)}async function P(e){N.value=e.row,i.value.show(N.value)}function U(e){const t=e.row,a=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${t.first_seen.timestamp}&epoch_end=${t.last_seen.timestamp}&mac=${t.mac_address.mac};eq&aggregated=false`;window.open(a,"_blank")}_n((async()=>{await R()}));const I=t.crsf,j=async function(){const e=S.value,t=NtopUtils.buildURL(c,{device:e.mac_address.mac});C.device={mac:e.mac_address.mac},await ntopng_utility.http_post_request(t,C),D()},M=async function(){n.value.show()},L=async function(){i.value.show()},F=async function(){const e=NtopUtils.buildURL(c,{device:"all"});await ntopng_utility.http_post_request(e,C),D()},R=async function(){(await ntopng_utility.http_request(d)).learning_done?_.value=!1:_.value=!0},D=async function(){await R(),a.value.refresh_table()};function z(){s.value.show()}const q=async function(e){let t=e;t.mac_list=t.mac_list.replace(/(?:\t| )/g,""),t.mac_list=t.mac_list.replace(/(?:\r\n|\r|\n)/g,",");const a=NtopUtils.buildURL(r,{...t});await ntopng_utility.http_post_request(a,C),D()},B=async function(e){let a=N.value;null!=a&&(e.mac_alias=e.mac_alias.replace(/(?:\t| )/g,"")),null!=a&&(e.mac=a.mac_address.mac),e.csrf=t.context.csrf;const l=NtopUtils.buildURL(u,{...e});await ntopng_utility.http_post_request(l,C),D()};function V(e,t,a){if(null!=e){let l=t[e.data.data_field],n=a[e.data.data_field];if("last_ip"==e.id)return""!=l&&(l=H(l),l=NtopUtils.convertIPAddress(l)),""!=n&&(n=H(n),n=NtopUtils.convertIPAddress(n)),1==e.sort?l.localeCompare(n):n.localeCompare(l);if("manufacturer"==e.id)return void 0===l&&(l=""),void 0===n&&(n=""),1==e.sort?l.localeCompare(n):n.localeCompare(l);if("mac_address"==e.id)return l=l.mac,n=n.mac,1==e.sort?l.localeCompare(n):n.localeCompare(l);if("first_seen"==e.id)return l=0==t.first_seen.timestamp?"":t.first_seen.data,n=0==a.first_seen.timestamp?"":a.first_seen.data,1==e.sort?l.localeCompare(n):n.localeCompare(l);if("last_seen"==e.id)return l=0==t.last_seen.timestamp?"":t.last_seen.data,n=0==a.last_seen.timestamp?"":a.last_seen.data,1==e.sort?l.localeCompare(n):n.localeCompare(l);if("status"==e.id)return 1==e.sort?l.localeCompare(n):n.localeCompare(l);if("trigger_alert"==e.id)return l=G(l),n=G(n),1==e.sort?l.localeCompare(n):n.localeCompare(l)}}function H(e){return e.split("host=")[1].split("'")[0]}function G(e){return e?"true":e?"true"==e||"false"==e?e:void 0:"false"}const W=async e=>{let t={mac_address:(e,t)=>{let a=e.mac,l=e.alias;return e.symbolic_mac&&e.symbolic_mac!=a&&(a=e.symbolic_mac),null!=l&&l!=a&&(a=`${a} (${l})`),null!=e.url&&(a=`<a href='${e.url}' title='${e.mac}'>${a}</a>`),a},first_seen:(e,t)=>0==e.timestamp?"":e.data,last_seen:(e,t)=>0==e.timestamp?"":e.data,status:(e,t)=>{let a="";return"allowed"==e?(a=p("edit_check.authorized"),`<span class="badge bg-success" title="${a}">${a}</span>`):(a=p("edit_check.unauthorized"),`<span class="badge bg-danger" title="${a}">${a}</span>`)},trigger_alert:(e,t)=>{let a=!1;return a="false"!=e&&e,a?'<i class="fas fa-check text-success"></i>':'<i class="fas fa-times text-danger"></i>'}};return e.forEach((e=>{e.render_func=t[e.data_field]})),e},K=()=>({ifid:ntopng_url_manager.get_url_entry("ifid")||t.context.ifid});const J=e=>e;return(e,t)=>(Os(),Ms("div",N$,[Vs("div",C$,[E$,Vs("div",A$,[Vs("div",T$,[_.value?(Os(),Ms("div",O$,te(ya($)),1)):Ys("v-if",!0),Vs("div",P$,[Hs(nx,{ref_key:"modal_delete_confirm",ref:l,title:ya(f),body:ya(m),onDelete:j},null,8,["title","body"]),Hs(nx,{ref_key:"modal_delete_all",ref:n,title:ya(v),body:ya(h),onDelete:F},null,8,["title","body"]),Hs(p$,{ref_key:"modal_add_device",ref:s,title:ya(g),body:ya(b),footer:ya(y),list_notes:ya(w),onAdd:q},null,8,["title","body","footer","list_notes"]),Hs(S$,{ref_key:"modal_edit_device",ref:i,title:ya(x),title_edit_all:ya(k),onEdit:B},null,8,["title","title_edit_all"]),Hs(rm,{ref_key:"table_device_exclusions",ref:a,csrf:ya(I),table_id:o.value,f_map_columns:W,get_extra_params_obj:K,f_map_config:J,f_sort_rows:V,onCustom_event:T},{custom_header:vl((()=>[Vs("button",{class:"btn btn-link",type:"button",ref:"add_device",onClick:z},U$,512)])),_:1},8,["csrf","table_id"])])]),Vs("div",I$,[Vs("button",{type:"button",onClick:M,class:"btn btn-danger me-1"},[j$,Ks(" "+te(p("edit_check.delete_all_device_exclusions")),1)]),Vs("button",{type:"button",onClick:L,class:"btn btn-secondary"},[M$,Ks(" "+te(p("edit_check.edit_all_devices_status")),1)])])]),Hs(fm,{note_list:E,add_sub_notes:"true",sub_note_list:A})])]))},__file:"http_src/vue/page-device-exclusions.vue"},F$={components:{datatable:kw},props:{page_csrf:String,url_params:Object},created(){!function(e){const t=[];let a=[],l=3;t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let n={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/fingerprint/data.lua`,url_params),enable_search:!0};a=[{columnName:i18n("client_fingerprint_type"),name:"type",data:"type",className:"text-nowrap",render:(e,t)=>"JA3"==e?`<a class="ntopng-external-link" href="https://github.com/salesforce/ja3">${e} <i class="fas fa-external-link-alt"></i></a>`:`<a class="ntopng-external-link" href="https://github.com/FoxIO-LLC/ja4">${e} <i class="fas fa-external-link-alt"></i></a>`,responsivePriority:0,createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("client_fingerprint"),name:"hash",data:"hash",className:"text-nowrap",render:(e,t,a)=>"JA3"==a.type?`<a class="ntopng-external-link" style="max-width:315px" href="https://sslbl.abuse.ch/ja3-fingerprints/${e}">${e} <i class="fas fa-external-link-alt"></i></a>`:e,responsivePriority:0,createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("status"),name:"is_malicious",data:"is_malicious",className:"text-nowrap text-center",responsivePriority:0,render:(e,t)=>e?`<i class="fa-solid fa-face-frown text-danger" title="${i18n("malicious")}"></i>`:`<i class="fa-solid fa-face-smile text-success" title="${i18n("ok")}"></i>`},{columnName:i18n("app_name"),name:"app_name",data:"app_name",className:"text-nowrap text-right",responsivePriority:1},{columnName:i18n("num_uses"),name:"num_uses",data:"num_uses",className:"text-nowrap text-right",responsivePriority:1,render:e=>NtopUtils.formatValue(e)}];let s={serverSide:!1,order:[[l,"desc"]]},i=ntopng_utility.clone(n);i.table_buttons=n.table_buttons,i.data_url=`${i.data_url}`,i.columns_config=a,i.table_config=ntopng_utility.clone(s),e.config_devices_standard=i}(this)},mounted(){},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null}),methods:{reload_table:function(){this.get_active_table().reload()},get_active_table:function(){return this.$refs.table_fingerprint}}};const R$={class:"row"},D$={class:"col-md-12 col-lg-12"},z$=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),q$={class:"card"},B$={class:"card-body"},V$={id:"table_host_tls"},H$={class:"card-footer"};F$.render=function(e,t,a,l,n,s){const i=kn("datatable");return Os(),Ms("div",R$,[Vs("div",D$,[z$,Vs("div",q$,[Vs("div",B$,[Vs("div",V$,[Hs(i,{ref:"table_fingerprint",table_buttons:n.config_devices_standard.table_buttons,columns_config:n.config_devices_standard.columns_config,data_url:n.config_devices_standard.data_url,enable_search:n.config_devices_standard.enable_search,table_config:n.config_devices_standard.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])]),Vs("div",H$,[Vs("b",null,te(n.i18n("fingerprint_note")),1)])])])])},F$.__file="http_src/vue/page-host-tls.vue";var G$={components:{datatable:kw},props:{page_csrf:String,url_params:Object},created(){!function(e){const t=[];let a=[],l=3;t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let n={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/fingerprint/data.lua`,url_params),enable_search:!0};a=[{columnName:i18n("hassh_fingerprint"),name:"ja3",data:"ja3",className:"text-nowrap",render:(e,t)=>`<a class="ntopng-external-link" href="https://sslbl.abuse.ch/ja3-fingerprints/${e}">${e} <i class="fas fa-external-link-alt"></i></a>`,responsivePriority:0,createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("status"),name:"is_malicious",data:"is_malicious",className:"text-nowrap text-center",responsivePriority:0,render:(e,t)=>e?`<i class="fa-solid fa-face-frown text-danger" title="${i18n("malicious")}"></i>`:`<i class="fa-solid fa-face-smile text-success" title="${i18n("ok")}"></i>`},{columnName:i18n("app_name"),name:"app_name",data:"app_name",className:"text-nowrap text-right",responsivePriority:1},{columnName:i18n("num_uses"),name:"num_uses",data:"num_uses",className:"text-nowrap text-right",responsivePriority:1,render:e=>NtopUtils.formatValue(e)}];let s={serverSide:!1,order:[[l,"desc"]]},i=ntopng_utility.clone(n);i.table_buttons=n.table_buttons,i.data_url=`${i.data_url}`,i.columns_config=a,i.table_config=ntopng_utility.clone(s),e.config_devices_standard=i}(this)},mounted(){},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null}),methods:{reload_table:function(){this.get_active_table().reload()},get_active_table:function(){return this.$refs.table_hassh}}};const W$={class:"row"},K$={class:"col-md-12 col-lg-12"},J$=Vs("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),Y$={class:"card"},Z$={class:"card-body"},X$={id:"table_host_ssh"};G$.render=function(e,t,a,l,n,s){const i=kn("datatable");return Os(),Ms("div",W$,[Vs("div",K$,[J$,Vs("div",Y$,[Vs("div",Z$,[Vs("div",X$,[Hs(i,{ref:"table_hassh",table_buttons:n.config_devices_standard.table_buttons,columns_config:n.config_devices_standard.columns_config,data_url:n.config_devices_standard.data_url,enable_search:n.config_devices_standard.enable_search,table_config:n.config_devices_standard.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])])])])])},G$.__file="http_src/vue/page-host-ssh.vue";const Q$="change_map_event";var eS={components:{"page-periodicity-map":yk,"page-periodicity-table":bx,"page-asset-map":Dk,"page-asset-table":ix,"page-service-map":ek,"page-service-table":Mx,"page-navbar":n_},props:{page_csrf:String,base_url_params:Object,ifid:Number,is_admin:Boolean,map_id:String,view:String,navbar_info:Object,service_acceptance:Array,service_map_filter_list:Object,service_table_filter_list:Array,periodicity_map_filter_list:Object,periodicity_table_filter_list:Array,asset_map_filter_list:Object,asset_table_filter_list:Array},created(){this.url_params=this.$props.base_url_params,this.active_tab=this.$props.map_id,this.page=this.url_params.page,this.updated_view=this.$props.view,asset_map_filter_list&&asset_table_filter_list&&(this.navbar_context.items_table.push({active:!1,class:"disabled ps-0 pe-0",label:"-"}),this.navbar_context.items_table.push({active:!1,icon:"fas fa-lg fa-compass",class:"disabled pe-0",title:i18n("asset_map"),label:i18n("asset")+": "}),this.navbar_context.items_table.push({active:!1,label:i18n("map_format"),id:"asset_map",page:"graph"}),this.navbar_context.items_table.push({active:!1,class:"disabled ps-0 pe-0",label:"/"}),this.navbar_context.items_table.push({active:!1,label:i18n("table_format"),id:"asset_map",page:"table"})),this.navbar_context.items_table.forEach((e=>{e.id==this.active_tab&&e.page==this.page?e.active=!0:e.active=!1}))},mounted(){const e=this.format_navbar_title;e(this.$props.navbar_info),ntopng_events_manager.on_custom_event("page_navbar",ntopng_custom_events.CHANGE_PAGE_TITLE,(t=>{e({selected_iface:this.$props.navbar_info.selected_iface,selected_host:t})})),ntopng_events_manager.on_custom_event("change_service_table_tab",Q$,(t=>{x.set_key_to_url("map",t.id),x.set_key_to_url("page",t.page),"table"==t.page&&this.destroy(),this.active_tab=t.id,this.page=t.page,this.url_params.map=t.id,this.url_params.page=t.page,this.updated_view=x.get_url_entry("view"),e()}))},data:()=>({i18n:e=>i18n(e),active_tab:null,page:null,url_params:{},updated_view:null,navbar_node:{},navbar_context:{main_title:{label:" "+i18n("maps"),icon:"fas fa-map"},secondary_title_list:[],items_table:[{active:!1,icon:"fas fa-lg fa-concierge-bell",class:"disabled pe-0",title:i18n("service_map"),label:i18n("service")+": "},{active:!0,label:i18n("map_format"),id:"service_map",page:"graph"},{active:!1,class:"disabled ps-0 pe-0",label:"/"},{active:!1,label:i18n("table_format"),id:"service_map",page:"table"},{active:!1,class:"disabled ps-0 pe-0",label:"-"},{active:!1,icon:"fas fa-lg fa-clock",class:"disabled pe-0",title:i18n("periodicity_map"),label:i18n("periodicity")+": "},{active:!1,label:i18n("map_format"),id:"periodicity_map",page:"graph"},{active:!1,class:"disabled ps-0 pe-0",label:"/"},{active:!1,label:i18n("table_format"),id:"periodicity_map",page:"table"}]}}),methods:{destroy:function(){this.get_active_tab().destroy()},format_navbar_title:function(e){if(e?this.navbar_node=e:e=this.navbar_node,this.navbar_context.secondary_title_list=[{label:e.selected_iface.label,title:NtopUtils.shortenLabel(`${e.selected_iface.label}`,16)}],e.selected_host&&""!=e.selected_host.id){const t=e.selected_host.label,a=NtopUtils.removeVlan(e.selected_host.id);this.navbar_context.secondary_title_list[0].href=`${http_prefix}/lua/pro/enterprise/network_maps.lua?map=${this.active_tab}&page=${this.page}&ifid=${this.$props.ifid}`,this.navbar_context.secondary_title_list.push({label:`${NtopUtils.formatNameValue(t,a)}`,title:`${e.selected_host.label}`,href:e.selected_host.is_active?`${http_prefix}/lua/host_details.lua?host=${a}`:null,icon:"fa-solid fa-laptop",target_blank:"true"})}},get_active_tab:function(){return this.$refs[this.active_tab+"_"+this.page]},click_item:function(e){e.id==this.active_tab&&e.page==this.page||(this.navbar_context.items_table.forEach((e=>e.active=!1)),e.active=!0,ntopng_events_manager.emit_custom_event(Q$,e))}}};eS.render=function(e,t,a,l,n,s){const i=kn("page-navbar"),o=kn("page-service-map"),r=kn("page-service-table"),c=kn("page-periodicity-map"),u=kn("page-periodicity-table"),d=kn("page-asset-map"),_=kn("page-asset-table");return Os(),Ms(Ss,null,[Hs(i,{id:"page_navbar",main_title:n.navbar_context.main_title,secondary_title_list:n.navbar_context.secondary_title_list,help_link:n.navbar_context.help_link,items_table:n.navbar_context.items_table,onClick_item:s.click_item},null,8,["main_title","secondary_title_list","help_link","items_table","onClick_item"]),"service_map"==n.active_tab&&"graph"==n.page?(Os(),Ls(o,{key:0,ref:"service_map_graph",page_csrf:a.page_csrf,url_params:n.url_params,ifid:a.ifid,is_admin:a.is_admin,map_id:a.map_id,all_filter_list:a.service_map_filter_list},null,8,["page_csrf","url_params","ifid","is_admin","map_id","all_filter_list"])):Ys("v-if",!0),"service_map"==n.active_tab&&"table"==n.page?(Os(),Ls(r,{key:1,ref:"service_map_table",page_csrf:a.page_csrf,url_params:n.url_params,view:n.updated_view,table_filters:a.service_table_filter_list,is_admin:a.is_admin,service_acceptance:a.service_acceptance},null,8,["page_csrf","url_params","view","table_filters","is_admin","service_acceptance"])):Ys("v-if",!0),"periodicity_map"==n.active_tab&&"graph"==n.page?(Os(),Ls(c,{key:2,ref:"periodicity_map_graph",page_csrf:a.page_csrf,url_params:n.url_params,ifid:a.ifid,is_admin:a.is_admin,map_id:a.map_id,all_filter_list:a.periodicity_map_filter_list},null,8,["page_csrf","url_params","ifid","is_admin","map_id","all_filter_list"])):Ys("v-if",!0),"periodicity_map"==n.active_tab&&"table"==n.page?(Os(),Ls(u,{key:3,ref:"periodicity_map_table",page_csrf:a.page_csrf,url_params:n.url_params,view:n.updated_view,table_filters:a.periodicity_table_filter_list,is_admin:a.is_admin},null,8,["page_csrf","url_params","view","table_filters","is_admin"])):Ys("v-if",!0),a.asset_map_filter_list&&a.asset_table_filter_list?(Os(),Ms(Ss,{key:4},["asset_map"==n.active_tab&&"graph"==n.page?(Os(),Ls(d,{key:0,ref:"asset_map_graph",page_csrf:a.page_csrf,url_params:n.url_params,ifid:a.ifid,is_admin:a.is_admin,map_id:a.map_id,all_filter_list:a.asset_map_filter_list},null,8,["page_csrf","url_params","ifid","is_admin","map_id","all_filter_list"])):Ys("v-if",!0),"asset_map"==n.active_tab&&"table"==n.page?(Os(),Ls(_,{key:1,ref:"asset_map_table",page_csrf:a.page_csrf,url_params:n.url_params,view:n.updated_view,table_filters:a.asset_table_filter_list},null,8,["page_csrf","url_params","view","table_filters"])):Ys("v-if",!0)],64)):Ys("v-if",!0)],64)},eS.__file="http_src/vue/page-home-map.vue";const tS=["width","height"],aS=[Vs("defs",null,null,-1),Vs("g",{class:"nodes",style:{stroke:"#000",strokeOpacity:"0.5"}},null,-1),Vs("g",{class:"links",style:{stroke:"#000",strokeOpacity:"0.3",fill:"none"}},null,-1),Vs("g",{class:"texts"},null,-1)];var lS={__name:"page-sankey",props:{width:Number,height:Number},setup(e){const t=e,a=d3v7,l=ma(null),n=ma({});async function s(){return data=function(e){let t=[],a=[],l={};const n=(e,a,n)=>{if(null!=l[e])return;let s=t.length;l[e]=s;let i={index:s,name:e,href:a,color:n};t.push(i)},s=(e,t,n,s)=>{let i={source:l[e],target:l[t],value:n,label:s};a.push(i)};return e.forEach((e=>{n(e.source,e.source_link,e.source_color),n(e.target,e.target_link,e.target_color),s(e.source,e.target,e.value,e.link)})),{nodes:t,links:a}}([{link_color:"#e377c2",source_color:"#e377c2",source_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=IGMP",target:"224.0.0.251",source:"IGMP",link:"IGMP",target_link:"/lua/host_details.lua?host=224.0.0.251&vlan=0",target_node:"224.0.0.251",source_node:"192.168.1.7",value:60},{link_color:"#e377c2",source_link:"/lua/host_details.lua?host=192.168.1.7&vlan=0",target:"IGMP",source:"192.168.1.7",link:"IGMP",target_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=IGMP",target_node:"224.0.0.2",target_color:"#e377c2",source_node:"192.168.1.7",value:120},{link_color:"#e377c2",source_color:"#e377c2",source_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=IGMP",target:"224.0.0.2",source:"IGMP",link:"IGMP",target_link:"/lua/host_details.lua?host=224.0.0.2&vlan=0",target_node:"224.0.0.2",source_node:"192.168.1.7",value:60},{link_color:"#bcbd22",source_link:"/lua/host_details.lua?host=192.168.1.7&vlan=0",target:"MDNS",source:"192.168.1.7",link:"MDNS",target_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=MDNS",target_node:"224.0.0.251",target_color:"#bcbd22",source_node:"192.168.1.7",value:396},{link_color:"#bcbd22",source_color:"#bcbd22",source_link:"/lua/host_details.lua?page=flows&host=192.168.1.7&vlan=0&application=MDNS",target:"224.0.0.251",source:"MDNS",link:"MDNS",target_link:"/lua/host_details.lua?host=224.0.0.251&vlan=0",target_node:"224.0.0.251",source_node:"192.168.1.7",value:396}]),data}return dn((async()=>{})),_n((async()=>{!async function(){const e=a.scaleOrdinal(a.schemeCategory10);let i=await s();const o=function(){let e=t.width;null==e&&(e=window.innerWidth-200);let a=t.height;null==a&&(a=window.innerHeight-50);return{width:e,height:a}}();n.value=o;const{links:r,nodes:c}=function(e,t,l){return a.sankey().nodeAlign(a.sankeyCenter).nodeWidth(10).nodePadding(10).extent([[0,5],[t,l]])(e)}(i,o.width-10,o.height-5);a.select(l.value).select("g.nodes").selectAll("rect").data(c).join((t=>{const l=t.append("rect");l.attr("x",(e=>e.x0)).attr("y",(e=>e.y0)),l.transition(a.easeLinear).delay(1e3).duration(500).attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("dataIndex",(e=>e.index)).attr("fill",(t=>e(t.index/c.length))),l.append("title").text((e=>`${e.name}\n${e.hours}`))}),(t=>t.transition(a.easeLinear).delay(500).duration(500).attr("x",(e=>e.x0)).attr("y",(e=>e.y0)).attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("dataIndex",(e=>e.index)).attr("fill",(t=>e(t.index/c.length))).select("title").text((e=>`${e.name}\n${e.hours}`))),(e=>e.transition(a.easeLinear).duration(500).style("opacity",0).remove())).on("dblclick",(function(e){})),a.select(l.value).select("g.texts").selectAll("text").data(c).join((t=>{t.append("text").transition(a.easeLinear).delay(1e3).duration(500).attr("x",(e=>e.x0<o.width/2?e.x1+6:e.x0-6)).attr("y",(e=>(e.y1+e.y0)/2)).attr("fill",(t=>a.rgb(e(t.index/c.length)).darker())).attr("alignment-baseline","middle").attr("text-anchor",(e=>e.x0<o.width/2?"start":"end")).attr("font-size",9).text((e=>e.name))}),(t=>t.transition(a.easeLinear).delay(500).duration(500).attr("x",(e=>e.x0<o.width/2?e.x1+6:e.x0-6)).attr("y",(e=>(e.y1+e.y0)/2)).attr("fill",(t=>a.rgb(e(t.index/c.length)).darker())).attr("text-anchor",(e=>e.x0<o.width/2?"start":"end")).attr("font-size",9).text((e=>e.name))),(e=>e.transition(a.easeLinear).duration(500).style("opacity",0).remove())),a.select(l.value).select("defs").selectAll("linearGradient").data(r).join((t=>{const a=t.append("linearGradient");a.attr("id",(e=>`gradient-${e.index}`)).attr("gradientUnits","userSpaceOnUse").attr("x1",(e=>e.source.x1)).attr("x2",(e=>e.target.x0)),a.append("stop").attr("offset","0").attr("stop-color",(t=>e(t.source.index/c.length))),a.append("stop").attr("offset","100%").attr("stop-color",(t=>e(t.target.index/c.length)))}),(t=>{t.attr("id",(e=>`gradient-${e.index}`)).attr("gradientUnits","userSpaceOnUse").attr("x1",(e=>e.source.x1)).attr("x2",(e=>e.target.x0)),t.selectAll("stop").remove(),t.append("stop").attr("offset","0").attr("stop-color",(t=>e(t.source.index/c.length))),t.append("stop").attr("offset","100%").attr("stop-color",(t=>e(t.target.index/c.length)))}),(e=>e.remove())),a.select(l.value).select("g.links").selectAll("path").data(r).join((e=>{const t=e.append("path");t.transition(a.easeLinear).delay(1e3).duration(500).attr("d",a.sankeyLinkHorizontal()).attr("stroke",(e=>`url(#gradient-${e.index}`)).attr("stroke-width",(e=>e.width)),t.append("title").text((e=>`${e.hours}`))}),(e=>e.transition(a.easeLinear).delay(500).duration(500).attr("d",a.sankeyLinkHorizontal()).attr("stroke",(e=>`url(#gradient-${e.index}`)).attr("stroke-width",(e=>e.width)).select("title").text((e=>`${e.hours}`))),(e=>e.transition(a.easeLinear).duration(500).style("opacity",0).remove()))}()})),(e,t)=>(Os(),Ms("div",null,[(Os(),Ms("svg",{ref_key:"sankey_chart_ref",ref:l,width:n.value.width,height:n.value.height,style:{margin:"10px"}},aS,8,tS))]))}};lp("\n.node rect {\n  fill-opacity: 0.9;\n  shape-rendering: crispEdges;\n}\n.node text {\n  pointer-events: none;\n  text-shadow: 0 1px 0 #fff;\n}\n.link {\n  fill: none;\n  stroke: #000;\n  stroke-opacity: 0.2;\n}\n.link:hover {\n  stroke-opacity: 0.5;\n}\n"),lS.__file="http_src/vue/page-sankey.vue";const nS="change_applications_tab_event";var sS={components:{chart:C_,datatable:kw,"modal-delete-confirm":nx,"tab-list":Qw},props:{page_csrf:String,url_params:Object,view:String,is_ch_enabled:Boolean,is_locale:String,ts_l7_enabled:Boolean,ts_cat_enabled:Boolean},created(){this.applications_tab=x.get_url_entry("view")||this.$props.view,this.tab_list.forEach((e=>{this.applications_tab==e.id?e.active=!0:e.active=!1})),function(e){const t=[];t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,a,l,n){e.reload_table()}});let a=url_params;a.view="applications";let l={table_buttons:t,data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/l7/data.lua`,a),enable_search:!0,table_config:{serverSide:!1,order:[[6,"desc"]],columnDefs:[{type:"time-uni",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3},{type:"file-size",targets:5}]}},n=[{columnName:i18n("host_details.application"),targets:0,width:"20",name:"application",data:"application",className:"text-nowrap",responsivePriority:1,render:t=>"1"==e.$props.is_locale&&!0===e.$props.ts_l7_enabled?`<a href="${http_prefix}/lua/host_details.lua?host=${e.$props.url_params.host}@${e.$props.url_params.vlan}&page=historical&ifid=${e.$props.url_params.ifid}&protocol=${t.label}&ts_schema=host:ndpi" target="_blank">${t.label}</a>`:`${t.label}`},{columnName:i18n("host_details.duration"),targets:1,width:"10",name:"duration",data:"duration",className:"text-nowrap",responsivePriority:1,render:e=>NtopUtils.secondsToTime(e)},{columnName:i18n("host_details.sent"),targets:2,width:"10",name:"sent",data:"bytes_sent",className:"text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.rcvd"),targets:3,width:"10",name:"rcvd",data:"bytes_rcvd",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.breakdown"),targets:4,width:"10",name:"breakdown",data:"breakdown",orderable:!1,className:"text-center text-nowrap",responsivePriority:2,render:(e,t,a)=>{const l=100*a.bytes_sent/a.tot_bytes,n=100*a.bytes_rcvd/a.tot_bytes;return NtopUtils.createBreakdown(l,n,i18n("host_details.sent"),i18n("host_details.rcvd"))}},{columnName:i18n("host_details.tot_bytes"),targets:5,width:"20",name:"tot_bytes",data:"tot_bytes",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.tot_percentage"),targets:6,width:"20",name:"percentage",data:"percentage",className:"text-center text-nowrap",responsivePriority:2,render:e=>{const t=e.toFixed(1);return NtopUtils.createProgressBar(t)}}];is_ch_enabled&&e.add_action_column(n,"l7proto","application");let s=ntopng_utility.clone(l);s.columns_config=n,e.config_devices_applications=s,a.view="categories",l.data_url=NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/l7/data.lua`,a),n=[{columnName:i18n("host_details.category"),targets:0,name:"category",data:"category",className:"text-nowrap",responsivePriority:1,render:t=>"1"==e.$props.is_locale&&!0===e.$props.ts_cat_enabled?`<a href="${http_prefix}/lua/host_details.lua?host=${e.$props.url_params.host}@${e.$props.url_params.vlan}&ts_schema=host:ndpi_categories&page=historical&category=${t.label}" target="_blank">${t.label}</a>`:`${t.label}`},{columnName:i18n("host_details.applications"),targets:0,name:"applications",data:"applications",orderable:!1,className:"text-nowrap",responsivePriority:1,render:t=>"1"==e.$props.is_locale?`${t.label||""} <a href="${http_prefix}/${t.href}${t.category_id}">${t.more_protos||""}</a>`:`${t.label||""}`},{columnName:i18n("host_details.duration"),targets:0,name:"duration",data:"duration",className:"text-nowrap",responsivePriority:1,render:e=>NtopUtils.secondsToTime(e)},{columnName:i18n("host_details.tot_bytes"),targets:0,name:"tot_bytes",data:"tot_bytes",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.tot_percentage"),targets:0,name:"percentage",data:"percentage",className:"text-center text-nowrap",responsivePriority:2,render:e=>{const t=e.toFixed(1);return NtopUtils.createProgressBar(t)}}],is_ch_enabled&&e.add_action_column(n,"l7cat","category");let i=ntopng_utility.clone(l);i.columns_config=n,i.table_config.order=[[4,"desc"]],i.table_config.columnDefs=[{type:"time-uni",targets:2},{type:"file-size",targets:3}],e.config_devices_categories=i}(this)},mounted(){C.on_custom_event("change_applications_tab_event",nS,(e=>{let t=this.get_active_table();x.set_key_to_url("view",e.id),t.destroy_table(),this.applications_tab=e.id}))},data(){return{i18n:e=>i18n(e),applications_tab:null,config_devices_applications:null,config_devices_categories:null,chart_options:[{title:i18n("graphs.top_10_ndpi_protocols"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l7/proto_data.lua`,tab:"applications",id:"top_applications"},{title:i18n("graphs.top_breed"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l7/breed_data.lua`,tab:"applications",id:"top_breed"},{title:i18n("graphs.top_10_ndpi_categories"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l7/cat_data.lua`,tab:"categories",id:"top_categories"},{title:i18n("graphs.top_breed"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l7/breed_data.lua`,tab:"categories",id:"top_breed"}],tab_list:[{title:i18n("host_details.applications_tab"),active:"applications"==this.$props.view,id:"applications"},{title:i18n("host_details.categories_tab"),active:"categories"==this.$props.view,id:"categories"}]}},methods:{add_action_column:function(e,t,a){const l=`${this.$props.url_params.host}`,n=`${this.$props.url_params.vlan}`,s=`${this.$props.url_params.ifid}`;let i="page-stats-action-jump-historical";e.push({columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:i,render:(e,o,r)=>{const c={handlerId:i,onClick:()=>{let e=`${http_prefix}/lua/pro/db_search.lua?ifid=${s}&${t}=${r[a].id};eq&ip=${l};eq`;0!=n&&(e=`${e}&vlan_id=${n};eq`),window.open(e)}};return DataTableUtils.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:c}])}})},destroy:function(){this.get_active_table().destroy_table()},click_item:function(e){this.tab_list.forEach((e=>e.active=!1)),e.active=!0,C.emit_custom_event(nS,e)},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},get_active_table:function(){return this.$refs[`table_host_${this.applications_tab}`]},get_f_get_custom_chart_options:()=>(console.log("get_f_"),async e=>charts_options_items.value[chart_index].chart_options)}};const iS={class:"row"},oS={class:"col-md-12 col-lg-12"},rS={class:"card"},cS=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),uS={class:"card-body"},dS={id:"host_details_applications"},_S={class:"row mb-4 mt-4",id:"host_details_applications"},pS={class:"col-6"},fS={key:0,class:"widget-name"};sS.render=function(e,t,a,l,n,s){const i=kn("tab-list"),o=kn("chart"),r=kn("datatable");return Os(),Ms("div",iS,[Vs("div",oS,[Vs("div",rS,[cS,Vs("div",uS,[Vs("div",dS,[Hs(i,{ref:"host_details_applications_tab_list",id:"host_details_applications_tab_list",tab_list:n.tab_list,onClick_item:s.click_item},null,8,["tab_list","onClick_item"]),Vs("div",_S,[(Os(!0),Ms(Ss,null,An(n.chart_options,(e=>(Os(),Ms("div",pS,[e.tab==n.applications_tab?(Os(),Ms("h3",fS,te(e.title),1)):Ys("v-if",!0),e.tab==n.applications_tab?(Os(),Ls(o,{key:1,id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!1},null,8,["id","chart_type","base_url_request"])):Ys("v-if",!0)])))),256))]),"applications"==n.applications_tab?(Os(),Ls(r,{key:0,ref:"table_host_applications",table_buttons:n.config_devices_applications.table_buttons,columns_config:n.config_devices_applications.columns_config,data_url:n.config_devices_applications.data_url,enable_search:n.config_devices_applications.enable_search,table_config:n.config_devices_applications.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])):Ys("v-if",!0),"categories"==n.applications_tab?(Os(),Ls(r,{key:1,ref:"table_host_categories",table_buttons:n.config_devices_categories.table_buttons,columns_config:n.config_devices_categories.columns_config,data_url:n.config_devices_categories.data_url,enable_search:n.config_devices_categories.enable_search,table_config:n.config_devices_categories.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])):Ys("v-if",!0)])])])])])},sS.__file="http_src/vue/page-host-details-applications.vue";const mS={class:"row"},vS={class:"col-md-12 col-lg-12"},hS={class:"card"},gS=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),bS={class:"card-body"},yS={id:"host_details_traffic"},wS={class:"row mb-4 mt-4",id:"host_details_traffic"},xS={class:"col-4"},kS={class:"widget-name"};var $S={__name:"page-host-details-traffic",props:{page_csrf:String},setup(e){const t=ma(null);ma([]);const a=ma({});dn((async()=>{!function(e){const l=[];let n={};n.host=x.get_url_entry("host"),n.vlan=x.get_url_entry("vlan"),n.ifid=x.get_url_entry("ifid"),l.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,a,l,n){t.value.reload()}});let s={table_buttons:l,data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/l4/data.lua`,n),enable_search:!0,table_config:{serverSide:!1,order:[[6,"desc"]],columnDefs:[{type:"time-uni",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3},{type:"file-size",targets:5}]}},i=[{columnName:i18n("protocol"),targets:0,name:"protocol",data:"protocol",className:"text-nowrap",responsivePriority:1},{columnName:i18n("chart"),targets:1,name:"historical",data:"historical",className:"text-nowrap",responsivePriority:1},{columnName:i18n("traffic_labels.bytes_sent"),targets:2,name:"sent",data:"bytes_sent",className:"text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("traffic_labels.bytes_rcvd"),targets:3,name:"rcvd",data:"bytes_rcvd",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("traffic_labels.breakdown"),targets:4,name:"breakdown",data:"breakdown",orderable:!1,className:"text-center text-nowrap",responsivePriority:2,render:(e,t,a)=>{const l=100*a.bytes_sent/a.total_bytes,n=100*a.bytes_rcvd/a.total_bytes;return NtopUtils.createBreakdown(l,n,i18n("host_details.sent"),i18n("host_details.rcvd"))}},{columnName:i18n("traffic_labels.total_bytes"),targets:5,name:"tot_bytes",data:"total_bytes",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("traffic_labels.total_percentage"),targets:6,width:"20%",name:"percentage",data:"total_percentage",className:"text-center text-nowrap",responsivePriority:2,render:e=>{const t=e.toFixed(1);return NtopUtils.createProgressBar(t)}}],o=ntopng_utility.clone(s);o.columns_config=i,a.value=o}()})),vn((async()=>{t.value.destroy_table()}));const l=[{title:i18n("graphs.l4_proto"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l4/proto_data.lua`,id:"traffic_protos"},{title:i18n("graphs.contacted_hosts"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l4/contacted_hosts_data.lua`,id:"contacted_hosts"},{title:i18n("graphs.traffic"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/l4/traffic_data.lua`,id:"traffic"}];return(e,n)=>(Os(),Ms("div",mS,[Vs("div",vS,[Vs("div",hS,[gS,Vs("div",bS,[Vs("div",yS,[Vs("div",wS,[(Os(),Ms(Ss,null,An(l,(e=>Vs("div",xS,[Vs("h3",kS,te(e.title),1),Hs(C_,{id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!1},null,8,["id","chart_type","base_url_request"])]))),64))]),Hs(kw,{ref_key:"traffic_table",ref:t,table_buttons:a.value.table_buttons,columns_config:a.value.columns_config,data_url:a.value.data_url,enable_search:a.value.enable_search,table_config:a.value.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])])])])]))},__file:"http_src/vue/page-host-details-traffic.vue"};const SS={class:"row"},NS={class:"col-md-12 col-lg-12"},CS={class:"card"},ES=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),AS={class:"card-body"},TS={class:"row"},OS={class:"col-6 mb-4 mt-4"},PS={class:"widget-name"};var US={__name:"page-host-details-packets",props:{page_csrf:String,url_params:Object},setup(e){const t=[{title:i18n("graphs.packets_sent"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/packets/sent_data.lua`,id:"packets_sent"},{title:i18n("graphs.packets_rcvd"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/packets/rcvd_data.lua`,id:"packets_rcvd"},{title:i18n("graphs.tcp_flags"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/packets/tcp_flags_data.lua`,id:"tcp_flags"},{title:i18n("graphs.arp_distribution"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/packets/arp_data.lua`,id:"arp_requests"}];function l(e,t,l){a.hideOverlays()}return _n((()=>{})),(e,a)=>(Os(),Ms("div",SS,[Vs("div",NS,[Vs("div",CS,[ES,Vs("div",AS,[Vs("div",TS,[(Os(),Ms(Ss,null,An(t,(e=>Vs("div",OS,[Vs("h3",PS,te(e.title),1),Hs(C_,{id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!1,onChart_reloaded:l},null,8,["id","chart_type","base_url_request"])]))),64))])])])])]))},__file:"http_src/vue/page-host-details-packets.vue"};const IS={key:0,class:"alert alert-info",id:"empty-message"},jS=["width","height"],MS=[Vs("g",{class:"nodes",style:{stroke:"#000",strokeOpacity:"0.5"}},null,-1),Vs("g",{class:"links",style:{stroke:"#000",strokeOpacity:"0.3",fill:"none"}},null,-1)];var LS={__name:"sankey",props:{no_data_message:String,width:Number,height:Number,sankey_data:Object},emits:["node_click","update_width","update_height"],setup(e,{expose:t,emit:a}){const l=e,n=d3v7,s=ma(!1),i=ma(null),o=ma({});function r(e){e&&($(".nodes",i.value).empty(),$(".links",i.value).empty()),null!=l.sankey_data.nodes&&null!=l.sankey_data.links&&0!=l.sankey_data.length&&0!=l.sankey_data.links.length&&d()}dn((async()=>{})),_n((async()=>{r(),window.addEventListener("resize",(()=>r(!0)))})),jl((()=>l.sankey_data),((e,t)=>{r(!0)}));let c=null,u=null;async function d(){const e=n.scaleOrdinal(n.schemeCategory10);let t=l.sankey_data;const s=function(){a("update_width");let e=l.width;null==e&&(e=$(i.value).parent().parent().width()-10);a("update_height");let t=l.height;null==t&&(t=$(i.value).parent().parent().height()-80);return{width:e,height:t}}();var r,d;o.value=s,r=s.width-10,d=s.height-5,c=n.sankey().nodeAlign(n.sankeyCenter).nodeWidth(10).nodePadding(10).extent([[0,5],[r,d]]),u=c(t);const{links:m,nodes:v}=u;let h=n.select(i.value).select("g.nodes").selectAll("g").data(v).join((e=>e.append("g"))).attr("transform",(e=>`translate(${e.x0}, ${e.y0})`));n.zoom().scaleExtent([1,40]).on("zoom",f),h.append("rect").attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("dataIndex",(e=>e.index)).attr("fill",(t=>e(t.index/v.length))).attr("class","sankey-node").attr("style","cursor:move;"),n.selectAll("rect").append("title").text((e=>`${e?.label}`)),h.data(v).append("text").attr("class","label").style("pointer-events","auto").attr("style","cursor:pointer;").style("fill-opacity",(function(e){return 1})).attr("fill",(e=>"#000")).attr("x",(e=>e.x0<s.width/2?e.x1-e.x0+6:-6)).attr("y",(e=>(e.y1-e.y0)/2)).attr("alignment-baseline","middle").attr("text-anchor",(e=>e.x0<s.width/2?"start":"end")).attr("font-size",12).text((e=>e.label)).on("click",(function(e,t){a("node_click",t.data)})),h.call(n.drag().subject((e=>e)).on("start",_).on("drag",p));const g=n.select(i.value).select("g.links").selectAll("g").data(m).join((e=>e.append("g")));let b=g.append("linearGradient");b.attr("id",(e=>`gradient-${e.index}`)).attr("gradientUnits","userSpaceOnUse").attr("x1",(e=>e.source.x1)).attr("x2",(e=>e.target.x0)),b.append("stop").attr("offset","0").attr("stop-color",(t=>e(t.source.index/v.length))),b.append("stop").attr("offset","100%").attr("stop-color",(t=>e(t.target.index/v.length))),g.append("path").style("pointer-events","none").attr("class","sankey-link").attr("d",n.sankeyLinkHorizontal()).attr("stroke-width",(e=>Math.max(1,e.width))).attr("stroke",(e=>`url(#gradient-${e.index}`)),g.append("title").text((e=>`${e.label}`))}function _(e,t){t.__x=e.x,t.__y=e.y,t.__x0=t.x0,t.__y0=t.y0,t.__x1=t.x1,t.__y1=t.y1}function p(e,t){n.select(this).attr("transform",(function(t){const a=e.x-t.__x,l=e.y-t.__y,s=o.value.width,i=o.value.width;return t.x0=t.__x0+a,t.x1=t.__x1+a,t.y0=t.__y0+l,t.y1=t.__y1+l,t.x0<0&&(t.x0=0,t.x1=10),t.x1>s&&(t.x0=s-10,t.x1=s),t.y0<0&&(t.y0=0,t.y1=t.__y1-t.__y0),t.y1>i&&(t.y0=i-(t.__y1-t.__y0),t.y1=i),c.update(u),n.selectAll(".sankey-link").attr("d",n.sankeyLinkHorizontal()),`translate(${t.x0}, ${t.y0})`}))}function f({transform:e}){g.attr("transform",e)}const m=e=>i18n(e);return t({draw_sankey:d,set_no_data_flag:function(e){s.value=e}}),(t,a)=>(Os(),Ms(Ss,null,[s.value?(Os(),Ms("div",IS,te(e.no_data_message||m("flows_page.no_data")),1)):Ys("v-if",!0),Vs("div",null,[(Os(),Ms("svg",{ref_key:"sankey_chart_ref",ref:i,width:o.value.width,height:o.value.height,style:{margin:"10px"}},MS,8,jS))])],64))}};lp("\n/* .node rect { */\n/*   fill-opacity: 0.9; */\n/*   shape-rendering: crispEdges; */\n/* } */\n\n/* .node text { */\n/*   pointer-events: none; */\n/*   text-shadow: 0 1px 0 #fff; */\n/* } */\n\n/* path.link.link2 { */\n/*     all: initial; */\n/*     fill: unset; */\n/*     stroke: unset; */\n/*     stroke-opacity: unset; */\n/*     stroke-width: unset; */\n/* } */\n\n/* .link:hover { */\n/*   stroke-opacity: 0.5; */\n/* } */\n"),LS.__file="http_src/vue/sankey.vue";const FS={class:"row"},RS={class:"col-md-12 col-lg-12"},DS={class:"card card-shadow"},zS={class:"card-body"},qS={class:"d-flex align-items-center mb-2"},BS={class:"d-flex no-wrap ms-auto"},VS={class:"m-1"},HS={style:{"min-width":"16rem"}},GS={class:"my-auto me-1"},WS=Vs("label",{class:"my-auto me-1"},null,-1),KS=[Vs("span",null,[Vs("i",{class:"fas fa-sync"})],-1)];var JS={__name:"page-host-details-flow-sankey",props:{is_local:Boolean},setup(e){const t=e,a=e=>i18n(e),l=`${http_prefix}/lua/pro/rest/v2/get/host/flows/data.lua`,n=ma(null),s=ma(!1),i=[{filter_name:"hosts_type",key:3,id:"local_origin_remote_target",title:a("flows_page.local_cli_remote_srv"),label:a("flows_page.local_cli_remote_srv"),filter_icon:!1,countable:!1},{filter_name:"hosts_type",key:4,id:"remote_origin_local_target",title:a("flows_page.local_srv_remote_cli"),label:a("flows_page.local_srv_remote_cli"),filter_icon:!1,countable:!1},{filter_name:"hosts_type",key:5,id:"all_hosts",title:a("flows_page.all_flows"),label:a("flows_page.all_flows"),filter_icon:!1,countable:!1}];t.is_local?i.unshift({filter_name:"hosts_type",key:1,id:"local_only",title:a("flows_page.local_only"),label:a("flows_page.local_only"),filter_icon:!1,countable:!1}):i.unshift({filter_name:"hosts_type",key:2,id:"remote_only",title:a("flows_page.remote_only"),label:a("flows_page.remote_only"),filter_icon:!1,countable:!1});const o=ma(i[3]),r=ma({});function c(e){if(1==e.is_link_node)return;let t={host:e.info.ip,vlan:e.info.vlan},a=x.obj_to_url_params(t);const l=`${http_prefix}/lua/host_details.lua?${a}`;x.go_to_url(l)}dn((()=>{})),_n((()=>{u()}));const u=function(){let e=o.value;x.set_key_to_url(e.filter_name,e.id),async function(){s.value=!0;let e=await async function(){const e=function(){let e={host:x.get_url_entry("host"),vlan:x.get_url_entry("vlan"),ifid:x.get_url_entry("ifid"),hosts_type:x.get_url_entry("hosts_type")},t=x.obj_to_url_params(e),a=`${l}?${t}`;return a}();let t=await b.http_request(e);t=function(e){let t=e=>console.error(`link (source: ${e.source_node_id}, target: ${e.target_node_id}) removed for not existing source/target node`),a=function(e,t){let a={};e.nodes.forEach((e=>a[e.node_id]=!0));let l=e=>null!=a[e.source_node_id]&&null!=a[e.target_node_id],n=function(e,t,a){return e.filter((e=>{const l=t(e);return 0==l&&null!=a&&a(e),l}))}(e.links,l,t);return n}(e,t);return{nodes:e.nodes,links:a}}(t);let a=x.get_url_entry("host"),s=function(e,t){if(0==e.nodes.length&&0==e.links.length)return e;let a={};e.nodes.forEach((e=>a[e.node_id]=e));const l=e=>{if(e.source_node_id==t)return-1;if(e.target_node_id==t)return 1;throw`Wrong direction link ${e.source_node_id} -> ${e.target_node_id}`},n=(e,a)=>e==t?e:`${a}_${e}`;let s={},i={nodes:[],links:[]};e.links.forEach((e=>{let t,o=l(e),r={source_node_id:n(e.source_node_id,o),target_node_id:n(e.target_node_id,o),label:e.label,value:e.value,data:e};if(-1==o){let l=a[e.target_node_id];t={node_id:r.target_node_id,label:l.label,data:l}}else{let l=a[e.source_node_id];t={node_id:r.source_node_id,label:l.label,data:l}}i.links.push(r),null==s[t.node_id]&&(s[t.node_id]=!0,i.nodes.push(t))}));let o=a[t];i.nodes.push({node_id:o.node_id,label:o.label,data:o}),i.nodes.forEach((e=>a[e.node_id]=e));const r=e=>`${l(e)}_${e.label}`;let c={};i.links.forEach((e=>{let t=r(e),l=c[t];null==l&&(l={id:t,label:e.label,data:{...e,is_link_node:!0},node_links:[]},c[t]=l),l.node_links.push({source:a[e.source_node_id],target:a[e.target_node_id],value:_(e)})}));let u=i.nodes.map((e=>e)),d=[];for(let e in c){let t=c[e],a={node_id:t.id,label:t.label,data:t.data};u.push(a),t.node_links.forEach((e=>{d.push({source_node_id:e.source.node_id,target_node_id:a.node_id,label:`${e.source.label} - ${e.target.label}: ${a.label}`,value:e.value,data:e}),d.push({source_node_id:a.node_id,target_node_id:e.target.node_id,label:`${e.source.label} - ${e.target.label}: ${a.label}`,value:e.value,data:e})}))}let p={},f=[];u.map(((e,t)=>{let a={index:t,node_id:e.node_id,label:e.label,data:e.data};p[e.node_id]=a,f.push(a)}));let m=d.map((e=>{let t=p[e.source_node_id],a=p[e.target_node_id];return{source:t.index,target:a.index,source_node_id:t.index,target_node_id:a.index,value:e.value,label:e.label}}));return{nodes:f,links:m}}(t,a);return s.links.length>0&&s.nodes.length>0?n.value.set_no_data_flag(!1):n.value.set_no_data_flag(!0),s}();r.value=e,s.value=!1}()},d=function(){u()};function _(e){return e.data?.info?.traffic}return(e,t)=>(Os(),Ms("div",FS,[Vs("div",RS,[Vs("div",DS,[s.value?(Os(),Ls(yf,{key:0})):Ys("v-if",!0),Vs("div",zS,[Vs("div",{class:K(["align-items-center justify-content-end mb-3",[s.value?"ntopng-gray-out":""]]),style:{height:"70vh"}},[Vs("div",qS,[Vs("div",BS,[Vs("div",VS,[Vs("div",HS,[Vs("label",GS,te(a("hosts"))+": ",1),Hs(l_,{selected_option:o.value,"onUpdate:selected_option":t[0]||(t[0]=e=>o.value=e),options:i,onSelect_option:u},null,8,["selected_option","options","onSelect_option"])])]),Vs("div",null,[WS,Vs("div",null,[Vs("button",{class:"btn btn-link m-1",tabindex:"0",type:"button",onClick:t[1]||(t[1]=(...e)=>d&&d(...e))},KS)])])])]),Hs(LS,{ref_key:"sankey_chart",ref:n,onNode_click:c,sankey_data:r.value},null,8,["onNode_click","sankey_data"])],2)])])])]))},__file:"http_src/vue/page-host-details-flow-sankey.vue"};const YS={isEmptyOrNull:e=>!(null!=e&&""!=e&&0!=e),isEmptyArrayOrNull:e=>!(null!=e&&0!==e.length)};function ZS(e){if("number"==typeof e)return e;if("string"==typeof e){if(""==e)return 0;e=e.split(",").join(""),e=parseInt(e)}else e=0;return e}const XS=function(e,t,a){return t==e&&1==a&&(t=99999999999),t},QS=function(e,t,a){return e=ZS(e),t=ZS(t),1==a?e-t:t-e},eN=function(e,t,a,l){return e=XS(l,e,a),t=XS(l,t,a),QS(e,t,a)},tN={sortByIP:function(e,t,a){return e=NtopUtils.convertIPAddress(e),t=NtopUtils.convertIPAddress(t),1==a?e.localeCompare(t):t.localeCompare(e)},sortByName:function(e,t,a){return 1==a?e?.localeCompare(t):t?.localeCompare(e)},sortByNumber:QS,sortByNumberWithNormalizationValue:eN},aN={key:0,class:"alert alert-info alert-dismissable"},lN=Vs("span",{class:"text-info me-1"},null,-1),nN={class:"form-group ms-2 me-2 mt-3 row"},sN={class:"col-form-label col-sm-2"},iN={class:"col-sm-10"},oN={class:"btn-group btn-group-toggle","data-bs-toggle":"buttons"},rN={key:1,class:"form-group ms-2 me-2 mt-3 row"},cN={class:"col-form-label col-sm-2"},uN={class:"col-sm-10"},dN=["placeholder"],_N={key:2,class:"form-group ms-2 me-2 mt-3 row"},pN={class:"col-form-label col-sm-2"},fN={class:"col-sm-10"},mN={key:3,class:"form-group ms-2 me-2 mt-3 row"},vN={class:"col-form-label col-sm-2"},hN={class:"col-sm-10"},gN={key:4,class:"form-group ms-2 me-2 mt-3 row"},bN={class:"col-form-label col-sm-2"},yN={class:"col-10"},wN={key:5,class:"form-group ms-2 me-2 mt-3 row"},xN={class:"col-form-label col-sm-2"},kN={class:"col-10"},$N={class:"col-form-label col-sm-2"},SN={class:"col-10"},NN={key:6,class:"form-group ms-2 me-2 mt-3 row"},CN={class:"col-form-label col-sm-2"},EN={class:"col-10"},AN={key:7,class:"form-group ms-2 me-2 mt-3 row"},TN={class:"col-form-label col-sm-2"},ON={class:"col-10"},PN={key:8,class:"form-group ms-2 me-2 mt-3 row"},UN={class:"col-form-label col-sm-2"},IN={key:0,class:"col-10"},jN={key:1,class:"col-10"},MN={key:2,class:"col-10"},LN={key:3,class:"col-10"},FN={key:4,class:"col-10"},RN={key:5,class:"col-10"},DN={key:6,class:"col-10"},zN={key:9,class:"form-group ms-2 me-2 mt-3 row"},qN={class:"col-form-label col-sm-2"},BN={class:"col-10"},VN={class:"form-group ms-2 me-2 mt-3 row",style:{"margin-top":"3px"}},HN={class:"col-form-label col-sm-2"},GN={class:"col-sm-3"},WN={class:"btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},KN=["value","id"],JN=["id","for"],YN=["value","id"],ZN=["id","for"],XN=["value","id"],QN=["id","for"],eC={class:"col-sm-2 btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},tC=["value","id"],aC=["id","for"],lC={key:10,class:"message alert alert-warning mt-3"},nC=["disabled"],sC=["disabled"];var iC={__name:"modal-add-host-rules",props:{metric_list:Array,ifid_list:Array,flow_exporter_devices:Array,interface_metric_list:Array,flow_device_metric_list:Array,frequency_list:Array,has_vlans:Boolean,has_profiles:Boolean,init_func:Function,page_csrf:String},emits:["add","edit"],setup(e,{expose:t,emit:l}){const n=e;ma(""),ma("");let s=ma(!1),i=ma(!1);const o=ma(null);let r=i18n("if_stats_config.add_host_rules_title");const c=i18n("if_stats_config.host_placeholder"),u=ma(!1),d=e=>i18n(e),_=ma([]),p=ma(null),f=ma(null),m=ma([]),v=ma([]),h=ma([]),g=ma([]),b=ma([]),y=ma([]),w=ma([]),x=ma(null),k=ma(null),S=ma({}),N=ma({}),C=ma({}),E=ma({}),A=ma({}),T=ma({}),O=ma({}),P=ma({}),U=ma(!0),I=ma({}),j=ma(!0),M=ma("hosts"),L=ma(!1),F=ma(!1),R=ma(null),D=ma(null),z=ma(!1),q=ma(null),B=ma(null),V=ma({}),H=ma({}),G=ma({}),W=ma(null),J=ma([]),Y=ma({}),Z=ma(null),X=ma({}),Q=ma([]),ee=ma({}),ae=ma(null),le=ma({});let ne=ma([]);const se=[d("if_stats_config.note_1"),d("if_stats_config.note_2"),d("if_stats_config.note_3"),d("if_stats_config.note_4")],ie=[d("if_stats_config.note_5")],oe=ma([{title:d("volume"),label:d("volume"),id:"volume",active:!0},{title:d("throughput"),label:d("throughput"),id:"throughput",active:!1},{title:d("percentage"),label:d("percentage"),id:"percentage",active:!1}]),re=ma([{title:d("volume"),label:d("volume"),id:"volume",active:!0},{title:d("throughput"),label:d("throughput"),id:"throughput",active:!1},{title:d("percentage"),label:d("percentage"),id:"percentage",active:!1}]),ce=ma([{title:d("volume"),label:d("volume"),id:"volume",active:!0,measure_unit:"bps"},{title:d("throughput"),label:d("throughput"),id:"throughput",active:!1,measure_unit:"bps"},{title:d("percentage"),label:d("percentage"),id:"percentage",active:!1,measure_unit:"number"},{title:d("value"),label:d("value"),id:"value",active:!1,measure_unit:"number"}]),ue=ma([{title:d("percentage"),label:d("percentage"),id:"absolute_percentage",active:!1,measure_unit:"number"}]),de=ma([{title:d("kb"),label:d("kb"),id:"kb",value:1024,active:!1},{title:d("mb"),label:d("mb"),id:"mb",value:1048576,active:!1},{title:d("gb"),label:d("gb"),id:"gb",value:1073741824,active:!0,default_active:!0}]),_e=ma([{title:d("kbps"),label:d("kbps"),id:"kbps",value:1e3,active:!1},{title:d("mbps"),label:d("mbps"),id:"mbps",value:1e6,active:!1},{title:d("gbps"),label:d("gbps"),id:"gbps",value:1e9,active:!0,default_active:!0}]),pe=ma([{title:"+",label:">",id:"plus",value:1,active:!1},{title:"-",label:"<",id:"minus",value:-1,active:!0,default_active:!0}]),fe=[{title:"+",label:"%",id:"plus",value:1,active:!0}],me=ma(null),ve=ma(null);function he(e){e.forEach((e=>e.active=1==e.default_active))}n.page_csrf;const ge=e=>{M.value=e,ne.value=oe.value,"host_pool"==e||"CIDR"==e?(ye(),I.value="host_pool"==e?ne.value[1]:ne.value[0]):I.value=oe.value[0]},be=()=>{let e=[];"flowdev_port:usage"==P.value.id?(ue.value.forEach((t=>{"number"==t.measure_unit&&e.push(t)})),ne.value=e):(re.value.forEach((t=>{"value"!=t.id&&e.push(t)})),ne.value=e),I.value=ne.value[0]},ye=e=>{let t=[];"host_pool"==M.value&&"bps"!=O.value.measure_unit||"CIDR"==M.value&&"bps"!=G.value.measure_unit?(ce.value.forEach((e=>{"number"==e.measure_unit&&t.push(e)})),ne.value=t):(ce.value.forEach((e=>{"value"!=e.id&&t.push(e)})),ne.value=t),null!=e&&0!=e||(I.value=ne.value[0])},we=()=>{1==X.value.show_volume?j.value=!0:j.value=!1},xe=()=>{let e=new RegExp(yp.get_data_pattern("ip"));U.value=!(e.test(me.value)||"*"===me.value)},ke=e=>{const t=e.target.id;pe.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1}))},$e=e=>{const t=e.target.id;"throughput"==I.value.id?_e.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):"volume"==I.value.id?de.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):"percentage"==I.value.id&&fe.forEach((e=>{e.id===t?e.active=!0:e.active=!1}))},Se=e=>{let t="";"interface"!=M.value&&(t=me.value);const a=N.value.id;let n=S.value.id,s=S.value.label;const i=M.value;let o,r,c,u,d,_=I.value.id,p=e?D.value:null;!1===j.value&&(_="",o="",u=ve.value.value),"throughput"==_?(pe.value.forEach((e=>{e.active&&(c=e.value)})),d=parseInt(c),_e.value.forEach((e=>{e.active&&(r=e.value)})),u=r*parseInt(ve.value.value)):"volume"==_?(pe.value.forEach((e=>{e.active&&(c=e.value)})),d=parseInt(c),de.value.forEach((e=>{e.active&&(r=e.value)})),u=r*parseInt(ve.value.value)):"percentage"==_?(pe.value.forEach((e=>{e.active&&(c=e.value)})),d=parseInt(c),u=parseInt(ve.value.value)):"value"!=_&&"absolute_percentage"!=_||(pe.value.forEach((e=>{e.active&&(c=e.value)})),d=parseInt(c),u=d*parseInt(ve.value.value));let f="add";if(1==e&&(f="edit"),"Host"==M.value)o=S.value.extra_metric?S.value.extra_metric:null,l(f,{host:t,frequency:a,metric:n,metric_label:s,threshold:u,metric_type:_,extra_metric:o,rule_type:i,rule_threshold_sign:d,rule_id:p});else if("interface"==M.value){o=T.value.extra_metric?T.value.extra_metric:null,n=T.value.id,s=T.value.label;const e=T.value.id,t=C.value.id;l(f,{frequency:a,metric:e,metric_label:s,threshold:u,metric_type:_,extra_metric:o,rule_type:i,interface:t,rule_threshold_sign:d,rule_id:p})}else if("exporter"==M.value){let e=A.value.id;A.value.label;const t=E.value.id;"*"==t&&(e="*");const n=E.value.ifid;let s;P.value.id?s=y.value.find((e=>e.id==P.value.id)):(s=y.value.find((e=>null===e.id)),null!=e&&"*"!=e?(s=P.value,s.id="flowdev_port:traffic"):(s=P.value,s.id="flowdev:traffic"));let o=s.label;l(f,{host:t,frequency:a,metric:s.id,metric_label:o,threshold:u,metric_type:_,rule_type:i,interface:e,rule_ifid:n,rule_threshold_sign:d,rule_id:p})}else if("CIDR"==M.value){n=G.value.schema,s=G.value.label,t=H.value.id;const e=H.value.network_id;l(f,{host:t,frequency:a,metric:n,metric_label:s,threshold:u,metric_type:_,extra_metric:o,rule_type:i,rule_threshold_sign:d,rule_id:p,network:e})}else if("host_pool"==M.value){n=O.value.schema,s=O.value.label;const e=V.value.id,t=V.value.label;l(f,{host_pool_id:e,host_pool_label:t,frequency:a,metric:n,metric_label:s,threshold:u,metric_type:_,extra_metric:o,rule_type:i,rule_threshold_sign:d,rule_id:p})}else if("vlan"==M.value){n=X.value.schema,s=X.value.label;const e=Y.value.id,t=Y.value.label;l(f,{vlan_id:e,vlan_label:t,frequency:a,metric:n,metric_label:s,threshold:u,metric_type:_,extra_metric:o,rule_type:i,rule_threshold_sign:d,rule_id:p})}else if("profiles"==M.value){n=le.value.schema,s=le.value.label;const e=ee.value.id;l(f,{profile:e,frequency:a,metric:n,metric_label:s,threshold:u,metric_type:_,extra_metric:o,rule_type:i,rule_threshold_sign:d,rule_id:p})}},Ne=()=>{Se(!0)};async function Ce(){let e=[];if("*"==E.value.id)return;const t=a.buildURL(`${http_prefix}/lua/pro/rest/v2/get/flowdevice/stats.lua?ip=${E.value.id}&ifid=${E.value.ifid}`);await $.get(t,(function(t,a){e=t.rsp}));const l=[{id:"*",value:"*",label:"*",timeseries_available:e[0]?.timeseries_available}];e.forEach((e=>{l.push({id:e.id,label:e.name,timeseries_available:e.timeseries_available})})),h.value=l,A.value=h.value[1],L.value=h.value[0]?.timeseries_available}const Ee=function(e){const t=[{id:"*",value:"*",label:"*"}];return e.forEach((e=>{const a=e.probe_ip;t.push({id:a,label:a,value:a,ifid:e.ifid})})),t.sort(((e,t)=>tN.sortByIP(e.label,t.label,1))),t},Ae=function(e){const t=[];return e.forEach((e=>{if(0!=e.key){let a=e.key,l=e.column_vlan.split(">");l[1].split("[").length>1&&(a=l[1].split("<")[0]),t.push({id:e.key,label:a,value:e.key})}})),t.sort(((e,t)=>tN.sortByName(e.label,t.label,1))),t},Te=function(e){const t=[];return e.forEach((e=>{""!=e.column_profile&&t.push({id:e.column_profile,label:e.column_profile,value:e.column_profile})})),t.sort(((e,t)=>tN.sortByName(e.id,t.id,1))),t},Oe=function(){Ce()};return dn((()=>{oe.value.forEach((e=>{e.active&&(I.value=e)})),z.value=!1})),t({show:e=>{null!=e?(e=>{null!=e&&(r=d("if_stats_config.edit_host_rules_title"),F.value=!0,D.value=e.row_id,U.value=!1,pe.value.forEach((t=>{t.active=t.value==e.threshold_sign})),oe.value.forEach((t=>{t.id==e.metric_type?(t.active=!0,I.value=t):t.active=!1})),ne.value=oe.value,"volume"==e.metric_type?de.value.forEach((t=>{if(e.threshold%t.value==0){let a=e.threshold/t.value;a<1024?(t.active=!0,ve.value.value=0==a?1:a):t.active=!1}else t.active=!1})):"throughput"==e.metric_type?_e.value.forEach((t=>{if(e.threshold%t.value==0){let a=e.threshold/t.value;a<1e3?(t.active=!0,ve.value.value=0==a?1:a):t.active=!1}else t.active=!1})):"percentage"==e.metric_type?ve.value.value=e.threshold:"value"!=e.metric_type&&"absolute_percentage"!=e.metric_type||(ve.value.value=e.threshold*e.threshold_sign),M.value=e.rule_type,"interface"==M.value?(m.value.forEach((t=>{t.id==e.target&&(C.value=t)})),null!=e.extra_metric?g.value.forEach((t=>{t.id==e.metric&&t.extra_metric==e.extra_metric&&(T.value=t)})):g.value.forEach((t=>{t.id==e.metric&&(T.value=t)}))):"exporter"==M.value?(v.value.forEach((t=>{t.id==e.target&&(E.value=t)})),h.value.forEach((t=>{t.id==e.flow_exp_ifid&&(A.value=t)}))):"Host"==M.value?(me.value=e.target,null!=e.extra_metric?_.value.forEach((t=>{e.metric.contains(t.id)&&t.extra_metric==e.extra_metric&&(S.value=t)})):_.value.forEach((t=>{t.id==e.metric&&(S.value=t)}))):"CIDR"==M.value?(B.value.forEach((t=>{t.id==e.target&&(H.value=t)})),W.value.forEach((t=>{t.label==e.metric_label&&(G.value=t)})),ye(!0),ne.value.forEach((t=>{t.id==e.metric_type&&(I.value=t)}))):"host_pool"==M.value?(q.value.forEach((t=>{t.id==e.target&&(V.value=t)})),b.value.forEach((t=>{t.label==e.metric_label&&(O.value=t)})),ye(),ne.value.forEach((t=>{t.id==e.metric_type&&(I.value=t)}))):"vlan"==M.value?(Y.value=J.value.find((t=>t.id==e.target)),Z.value.forEach((t=>{t.schema==e.metric&&(X.value=t)}))):"profiles"==M.value&&(ee.value=Q.value.find((t=>t.id==e.target)),le.value=ae.value.find((t=>t.schema==e.metric))))})(e):async function(){z.value=!1,me.value="",M.value="Host",C.value=m.value[0],S.value=_.value[0],T.value=g.value[0],P.value=y.value[0],F.value=!1,r=i18n("if_stats_config.add_host_rules_title"),N.value=w.value[0],I.value=oe.value[0],E.value=v.value[1],null!=E.value&&Ce(),oe.value.forEach((e=>e.active=!1)),oe.value[0].active=!0,null!=q.value&&(V.value=q.value[0]),O.value=b.value[0],null!=B.value&&(H.value=B.value[0]),null!=W.value&&(G.value=W.value[0]),he(de.value),he(_e.value),he(pe.value),M.value="Host",U.value=!0,ve.value.value=1,D.value=null,ne.value=oe.value,"Host"==M||"interface"==M?I.vale=oe.value[0]:I.value=ne.value[0],n.has_vlans&&(Y.value=J.value[0],X.value=Z.value[0])}(),o.value.show()},close:()=>{F.value=!1,z.value=!1,o.value.close()},metricsLoaded:async(e,t,a,l,o,r,c,d,h,x,k,$,A,T,O,P)=>{u.value=!0,_.value=e,g.value=a,m.value=function(e){let t=[];return e.forEach((e=>{let a={id:e.ifid,label:e.name};t.push(a)})),t.sort(((e,t)=>function(e,t){let a=e.label.toLowerCase(),l=t.label.toLowerCase();return a<l?-1:a>l?1:0}(e,t))),t}(t),w.value=n.frequency_list,N.value=w.value[0],S.value=_.value[0],C.value=m.value[0],R.value=r,c&&(p.value=c),d&&(f.value=d),v.value=Ee(l),YS.isEmptyArrayOrNull(h)||(s.value=!0),q.value=h,b.value=k,YS.isEmptyArrayOrNull(x)||(i.value=!0),B.value=x,W.value=$,y.value=o,E.value=v.value[1],null!=E.value&&Ce(),n.has_vlans&&(J.value=Ae(A),Y.value=J.value[0],Z.value=T,X.value=Z.value[1]),n.has_profiles&&(Q.value=Te(O),ee.value=Q.value[0],ae.value=P,le.value=ae.value[0])},invalidAdd:()=>{z.value=!0}}),(e,t)=>(Os(),Ls(np,{onShowed:t[28]||(t[28]=e=>{}),ref_key:"modal_id",ref:o},{title:vl((()=>[Ks(te(ya(r)),1)])),body:vl((()=>[z.value?(Os(),Ms("div",aN,[lN,Vs("span",null,te(d("rule_already_present")),1)])):Ys("v-if",!0),Ys(" Target information, here an IP is put "),Vs("div",nN,[Vs("label",sN,[Vs("b",null,te(d("if_stats_config.add_rules_type")),1)]),Vs("div",iN,[Vs("div",oN,[Vs("label",{class:K(["btn",["Host"==M.value?"btn-primary active":"btn-secondary"]])},[Vs("input",{class:"btn-check",type:"radio",name:"rule_type",value:"hosts",onClick:t[0]||(t[0]=e=>ge("Host"))}),Ks(" "+te(d("if_stats_config.add_rules_type_host")),1)],2),Vs("label",{class:K(["btn",["interface"==M.value?"btn-primary active":"btn-secondary"]])},[Vs("input",{onClick:t[1]||(t[1]=e=>ge("interface")),class:"btn-check",type:"radio",name:"rule_type",value:"interface"}),Ks(" "+te(d("if_stats_config.add_rules_type_interface")),1)],2),1==L.value?(Os(),Ms("label",{key:0,class:K(["btn",["exporter"==M.value?"btn-primary active":"btn-secondary"]])},[Vs("input",{onClick:t[2]||(t[2]=e=>ge("exporter")),class:"btn-check",type:"radio",name:"rule_type",value:"exporter"}),Ks(" "+te(d("if_stats_config.add_rules_type_flow_exporter")),1)],2)):Ys("v-if",!0),1==ya(s)?(Os(),Ms("label",{key:1,class:K(["btn",["host_pool"==M.value?"btn-primary active":"btn-secondary"]])},[Vs("input",{onClick:t[3]||(t[3]=e=>ge("host_pool")),class:"btn-check",type:"radio",name:"rule_type",value:"host_pool"}),Ks(" "+te(d("if_stats_config.add_rules_type_host_pool")),1)],2)):Ys("v-if",!0),1==ya(i)?(Os(),Ms("label",{key:2,class:K(["btn",["CIDR"==M.value?"btn-primary active":"btn-secondary"]])},[Vs("input",{onClick:t[4]||(t[4]=e=>ge("CIDR")),class:"btn-check",type:"radio",name:"rule_type",value:"CIDR"}),Ks(" "+te(d("if_stats_config.add_rules_type_cidr")),1)],2)):Ys("v-if",!0),1==n.has_vlans?(Os(),Ms("label",{key:3,class:K(["btn",["vlan"==M.value?"btn-primary active":"btn-secondary"]])},[Vs("input",{onClick:t[5]||(t[5]=e=>ge("vlan")),class:"btn-check",type:"radio",name:"rule_type",value:"vlan"}),Ks(" "+te(d("if_stats_config.add_rules_type_vlans")),1)],2)):Ys("v-if",!0),1==n.has_profiles?(Os(),Ms("label",{key:4,class:K(["btn",["profiles"==M.value?"btn-primary active":"btn-secondary"]])},[Vs("input",{onClick:t[6]||(t[6]=e=>ge("profiles")),class:"btn-check",type:"radio",name:"rule_type",value:"profiles"}),Ks(" "+te(d("if_stats_config.add_rules_type_profiles")),1)],2)):Ys("v-if",!0)])])]),"Host"==M.value?(Os(),Ms("div",rN,[Vs("label",cN,[Vs("b",null,te(d("if_stats_config.target")),1)]),Vs("div",uN,[wn(Vs("input",{"onUpdate:modelValue":t[7]||(t[7]=e=>me.value=e),onInput:xe,class:"form-control",type:"text",placeholder:ya(c),required:""},null,40,dN),[[jo,me.value]])])])):Ys("v-if",!0),"CIDR"==M.value?(Os(),Ms("div",_N,[Vs("label",pN,[Vs("b",null,te(d("if_stats_config.target")),1)]),Vs("div",fN,[Hs(l_,{selected_option:H.value,"onUpdate:selected_option":t[8]||(t[8]=e=>H.value=e),options:B.value},null,8,["selected_option","options"])])])):Ys("v-if",!0),"host_pool"==M.value?(Os(),Ms("div",mN,[Vs("label",vN,[Vs("b",null,te(d("if_stats_config.target")),1)]),Vs("div",hN,[Hs(l_,{selected_option:V.value,"onUpdate:selected_option":t[9]||(t[9]=e=>V.value=e),options:q.value},null,8,["selected_option","options"])])])):Ys("v-if",!0),"interface"==M.value?(Os(),Ms("div",gN,[Vs("label",bN,[Vs("b",null,te(d("if_stats_config.target_interface")),1)]),Vs("div",yN,[Hs(l_,{selected_option:C.value,"onUpdate:selected_option":t[10]||(t[10]=e=>C.value=e),options:m.value},null,8,["selected_option","options"])])])):Ys("v-if",!0),"exporter"==M.value&&1==L.value?(Os(),Ms("div",wN,[Vs("label",xN,[Vs("b",null,te(d("if_stats_config.target_exporter_device")),1)]),Vs("div",kN,[Hs(l_,{selected_option:E.value,"onUpdate:selected_option":t[11]||(t[11]=e=>E.value=e),options:v.value,onSelect_option:Oe},null,8,["selected_option","options"])]),"*"!=E.value.id?(Os(),Ms(Ss,{key:0},[Vs("label",$N,[Vs("b",null,te(d("if_stats_config.target_exporter_device_ifid")),1)]),Vs("div",SN,[Hs(l_,{selected_option:A.value,"onUpdate:selected_option":t[12]||(t[12]=e=>A.value=e),options:h.value},null,8,["selected_option","options"])])],64)):Ys("v-if",!0)])):Ys("v-if",!0),"vlan"==M.value?(Os(),Ms("div",NN,[Vs("label",CN,[Vs("b",null,te(d("if_stats_config.target_vlan")),1)]),Vs("div",EN,[Hs(l_,{selected_option:Y.value,"onUpdate:selected_option":t[13]||(t[13]=e=>Y.value=e),options:J.value},null,8,["selected_option","options"])])])):Ys("v-if",!0),Ys(" Traffic Profiles "),"profiles"==M.value?(Os(),Ms("div",AN,[Vs("label",TN,[Vs("b",null,te(d("if_stats_config.target_profile")),1)]),Vs("div",ON,[Hs(l_,{selected_option:ee.value,"onUpdate:selected_option":t[14]||(t[14]=e=>ee.value=e),options:Q.value},null,8,["selected_option","options"])])])):Ys("v-if",!0),Ys(" Metric information, here a metric is selected (e.g. DNS traffic) "),u.value?(Os(),Ms("div",PN,[Vs("label",UN,[Vs("b",null,te(d("if_stats_config.metric")),1)]),"Host"==M.value?(Os(),Ms("div",IN,[Hs(l_,{selected_option:S.value,"onUpdate:selected_option":t[15]||(t[15]=e=>S.value=e),onSelect_option:t[16]||(t[16]=e=>{1==S.value.show_volume?j.value=!0:j.value=!1}),options:_.value},null,8,["selected_option","options"])])):"interface"==M.value?(Os(),Ms("div",jN,[Hs(l_,{selected_option:T.value,"onUpdate:selected_option":t[17]||(t[17]=e=>T.value=e),onSelect_option:t[18]||(t[18]=e=>{1==T.value.show_volume?j.value=!0:j.value=!1}),options:g.value},null,8,["selected_option","options"])])):"exporter"==M.value?(Os(),Ms("div",MN,[Hs(l_,{selected_option:P.value,"onUpdate:selected_option":t[19]||(t[19]=e=>P.value=e),onSelect_option:be,options:y.value},null,8,["selected_option","options"])])):"host_pool"==M.value?(Os(),Ms("div",LN,[Hs(l_,{selected_option:O.value,"onUpdate:selected_option":t[20]||(t[20]=e=>O.value=e),onSelect_option:t[21]||(t[21]=e=>ye()),options:b.value},null,8,["selected_option","options"])])):"CIDR"==M.value?(Os(),Ms("div",FN,[Hs(l_,{selected_option:G.value,"onUpdate:selected_option":t[22]||(t[22]=e=>G.value=e),onSelect_option:t[23]||(t[23]=e=>ye()),options:W.value},null,8,["selected_option","options"])])):"vlan"==M.value?(Os(),Ms("div",RN,[Hs(l_,{selected_option:X.value,"onUpdate:selected_option":t[24]||(t[24]=e=>X.value=e),options:Z.value,onSelect_option:we},null,8,["selected_option","options"])])):"profiles"==M.value?(Os(),Ms("div",DN,[Hs(l_,{selected_option:le.value,"onUpdate:selected_option":t[25]||(t[25]=e=>le.value=e),options:ae.value},null,8,["selected_option","options"])])):Ys("v-if",!0)])):Ys("v-if",!0),Ys(" Frequency information, a frequency of 1 day, 5 minute or 1 hour for example "),u.value?(Os(),Ms("div",zN,[Vs("label",qN,[Vs("b",null,te(d("if_stats_config.frequency")),1)]),Vs("div",BN,[Hs(l_,{selected_option:N.value,"onUpdate:selected_option":t[26]||(t[26]=e=>N.value=e),options:w.value},null,8,["selected_option","options"])])])):Ys("v-if",!0),Ys(" Threshold information, maximum amount of bytes "),Vs("div",VN,[Vs("label",HN,[Vs("b",null,te(d("if_stats_config.threshold")),1)]),j.value?(Os(),Ms(Ss,{key:0},[Vs("div",GN,[Hs(l_,{selected_option:I.value,"onUpdate:selected_option":t[27]||(t[27]=e=>I.value=e),options:ya(ne)},null,8,["selected_option","options"])]),Vs("div",{class:K(["col-3",["throughput"==I.value.id?"p-0":""]])},[Vs("div",WN,["throughput"==I.value.id?(Os(!0),Ms(Ss,{key:0},An(_e.value,(e=>(Os(),Ms(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:x,name:"threshold_measure"},null,8,KN),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:$e,for:e.id},te(e.label),11,JN)],64)))),256)):Ys("v-if",!0),"percentage"==I.value.id?(Os(),Ms(Ss,{key:1},An(fe,(e=>(Os(),Ms(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:x,name:"threshold_measure"},null,8,YN),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:$e,for:e.id},te(e.label),11,ZN)],64)))),64)):Ys("v-if",!0),"volume"==I.value.id?(Os(!0),Ms(Ss,{key:2},An(de.value,(e=>(Os(),Ms(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:x,name:"threshold_measure"},null,8,XN),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:$e,for:e.id},te(e.label),11,QN)],64)))),256)):Ys("v-if",!0)])],2),Vs("div",eC,[(Os(!0),Ms(Ss,null,An(pe.value,(e=>(Os(),Ms(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_sign",ref:k,name:"threshold_sign"},null,8,tC),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:ke,for:e.id},te(e.label),11,aC)],64)))),256))])],64)):Ys("v-if",!0),Vs("div",{class:K([j.value?"col-sm-2":"col-sm-8"])},["percentage"==I.value.id?(Os(),Ms("input",{key:0,value:"1",ref_key:"threshold",ref:ve,type:"number",name:"threshold",class:"form-control",max:"100",min:"1",required:""},null,512)):(Os(),Ms("input",{key:1,value:"1",ref_key:"threshold",ref:ve,type:"number",name:"threshold",class:"form-control",max:"1023",min:"1",required:""},null,512))],2)]),"percentage"==I.value.id?(Os(),Ms("div",lC,te(d("show_alerts.host_rules_percentage")),1)):Ys("v-if",!0)])),footer:vl((()=>[Hs(fm,{note_list:se,add_sub_notes:!0,sub_note_list:ie}),0==F.value?(Os(),Ms("button",{key:0,type:"button",onClick:Se,class:"btn btn-primary",disabled:U.value&&"Host"==M.value},te(d("add")),9,nC)):(Os(),Ms("button",{key:1,type:"button",onClick:Ne,class:"btn btn-primary",disabled:U.value&&"Host"==M.value},te(d("apply")),9,sC))])),_:1},512))},__file:"http_src/vue/modal-add-host-rules.vue"};const oC={class:"row"},rC={class:"col-md-12 col-lg-12"},cC={class:"card"},uC=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),dC={class:"card-body"},_C={class:"mb-4"},pC={id:"host_rules"},fC={class:"card-footer"};var mC={__name:"page-host-rules",props:{page_csrf:String,has_vlans:Boolean,has_profiles:Boolean,ifid:String},setup(e){const t=e,l=ma(null),n=ma(null),s=ma(null),i=e=>i18n(e),o=ma({}),r=ma({}),c=ma(!1),u=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=host`,d=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=interface`,_=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=host_pool`,p=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=CIDR`,f=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=vlan`,m=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=profiles`,v=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_metric.lua?rule_type=exporter`,h=`${http_prefix}/lua/pro/rest/v2/get/flowdevices/stats.lua`;http_prefix;const g=`${http_prefix}/lua/rest/v2/get/host/pool/pools.lua`,b=`${http_prefix}/lua/rest/v2/get/network/networks.lua`,y=`${http_prefix}/lua/rest/v2/get/ntopng/interfaces.lua`,w=`${http_prefix}/lua/get_vlans_data.lua`,x=`${http_prefix}/lua/get_traffic_profiles.lua`,k=`${http_prefix}/lua/pro/rest/v2/get/interface/host_rules/host_rules_data.lua`,S=`${http_prefix}/lua/pro/rest/v2/add/interface/host_rules/add_host_rule.lua`,N=`${http_prefix}/lua/pro/rest/v2/delete/interface/host_rules/delete_host_rule.lua`,C=[i("if_stats_config.generic_notes_1"),i("if_stats_config.generic_notes_2"),i("if_stats_config.generic_notes_3")],E={ifid:t.ifid,csrf:t.page_csrf,gui:!0};let A={},T=i("if_stats_config.delete_host_rules_title");i("if_stats_config.edit_local_network_rules");let O=i("if_stats_config.delete_host_rules_description"),P=[],U=[],I=[],j=[],M=[],L=[],F=[],R=[],D=[],z=[],q=[],B=[],V=[];const H=[{title:i18n("show_alerts.5_min"),label:i18n("show_alerts.5_min"),id:"5min",value:"5min"},{title:i18n("show_alerts.hourly"),label:i18n("show_alerts.hourly"),id:"hour",value:"hour"},{title:i18n("show_alerts.daily"),label:i18n("show_alerts.daily"),id:"day",value:"day"}];async function G(e){await Y(e)}const W=function(){const e=r.value;return r.value=null,e},K=function(){l.value.reload()},J=async function(){const e=o.value,t=a.buildURL(N,{...E,rule_id:e.id,rule_type:e.rule_type});await $.post(t,(function(e,t){K()}))},Y=async function(e){e.csrf=t.page_csrf,e.ifid=t.ifid;const a=await ntopng_utility.http_post_request(S,e);c.value=a.rsp,0==c.value?(s.value.close(),K()):s.value.invalidAdd()},Z=function(e){let t={handlerId:"delete_host",onClick:()=>{var t;t=e,o.value=t,n.value.show()}},a={handlerId:"edit_rule",onClick:()=>{var t;t=e,r.value=t,o.value=t,s.value.show(t)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:a,icon:"fa-edit",title:i18n("edit")},{class:"pointer",handler:t,icon:"fa-trash",title:i18n("delete")}])},X=function(){const e=[];e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(){K()}},{text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){s.value.show()}});const t=[{columnName:i("actions"),width:"5%",targets:0,name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return Z(a)}},{columnName:i("id"),visible:!1,targets:1,name:"id",data:"id",className:"text-nowrap",responsivePriority:1},{columnName:i("if_stats_config.target"),targets:2,width:"20",name:"target",data:"target",className:"text-nowrap",responsivePriority:1,render:function(e,t,a){return function(e,t){let a="";if(t.rule_type&&"interface"==t.rule_type)a=t.selected_iface;else if(!t.rule_type||"Host"!=t.rule_type&&"CIDR"!=t.rule_type)if("host_pool"==t.rule_type)a=t.host_pool_label;else if("vlan"==t.rule_type)a=t.vlan_label;else if("profiles"==t.rule_type)a=t.target;else if(t.rule_type&&"exporter"==t.rule_type&&"flowdev:traffic"==t.metric)a=t.target;else{let e=""!=t.flow_exp_ifid_name&&null!=t.flow_exp_ifid_name?t.flow_exp_ifid_name:t.flow_exp_ifid;a=t.target+" "+i("on_interface")+": "+e}else a=t.target;return a}(0,a)}},{columnName:i("if_stats_config.rule_type"),targets:3,width:"20",name:"rule_type",data:"rule_type",className:"text-center",responsivePriority:1,render:function(e,t,a){return function(e,t){let a="";return t.rule_type&&"interface"==t.rule_type?a="<span class='badge bg-secondary'>"+i("interface")+" <i class='fas fa-ethernet'></i></span>":t.rule_type&&"Host"==t.rule_type?a="<span class='badge bg-secondary'>"+i("about.host_checks_directory")+" <i class='fas fa-laptop'></i></span>":t.rule_type&&"host_pool"==t.rule_type?a="<span class='badge bg-secondary'>"+i("alert_entities.host_pool")+" <i class='fas fa-laptop'></i></span>":t.rule_type&&"CIDR"==t.rule_type?a="<span class='badge bg-secondary'>"+i("network")+" <i class='fas fa-laptop'></i></span>":t.rule_type&&"exporter"==t.rule_type&&"flowdev:traffic"==t.metric?a="<span class='badge bg-secondary'>"+i("flow_exporter_device")+" <i class='fas fa-laptop'></i></span>":t.rule_type&&"exporter"==t.rule_type&&t.metric.includes("flowdev_port")?a="<span class='badge bg-secondary'>"+i("interface_flow_exporter_device")+" <i class='fas fa-ethernet'></i></span>":t.rule_type&&"vlan"==t.rule_type?a="<span class='badge bg-secondary'>"+i("vlan")+" <i class='fas fa-ethernet'></i></span>":t.rule_type&&"profiles"==t.rule_type&&(a="<span class='badge bg-secondary'>"+i("if_stats_config.target_profile")+" <i class='fas fa-ethernet'></i></span>"),a}(0,a)}},{columnName:i("if_stats_config.metric"),targets:4,width:"10",name:"metric",data:"metric",className:"text-center",responsivePriority:1,render:function(e,t,a){return function(e,t){let a=e;return t.metric_label?a=t.metric_label:"interface"!=t.rule_type?P.forEach((l=>{l.id==e&&(t.extra_metric?t.extra_metric==l.extra_metric&&(a=l.label):a=l.label)})):U.forEach((l=>{l.id==e&&(t.extra_metric?t.extra_metric==l.extra_metric&&(a=l.label):a=l.label)})),a}(e,a)}},{columnName:i("if_stats_config.frequency"),targets:5,width:"10",name:"frequency",data:"frequency",className:"text-center",responsivePriority:1,render:function(e){return function(e){let t="";return H.forEach((a=>{e==a.id&&(t=a.title)})),t}(e)}},{columnName:i("if_stats_config.last_measurement"),targets:6,width:"10",name:"last_measurement",data:"last_measurement",className:"text-center",responsivePriority:1,render:function(e,t,l){return function(e,t){let l=parseInt(e);if("*"==t.target)return"";if(null==e)return"";if(t.metric_type&&"throughput"==t.metric_type)l=a.bitsToSize(e);else if(t.metric_type&&"volume"==t.metric_type)l=a.bytesToSize(e);else if(t.metric_type&&t.metric_type.includes("percentage")){const t=e<0?-1:1,n=a.fpercent(e*t);l=-1==t?`<label title='${i18n("percentage_decrease")}'> (-) ${n} </label>`:`<label title='${i18n("percentage_increase")}'>${n}</label>`}return l}(e,l)}},{columnName:i("if_stats_config.threshold"),targets:7,width:"10",name:"threshold",data:"threshold",className:"text-end",responsivePriority:1,render:function(e,t,l){return function(e,t){let l=parseInt(e),n="> ";return t.threshold_sign&&"-1"==t.threshold_sign&&(n="< "),t.metric_type&&"throughput"==t.metric_type?l=n+a.bitsToSize(e):t.metric_type&&"volume"==t.metric_type?l=n+a.bytesToSize(e):t.metric_type&&t.metric_type.contains("percentage")?(e<0&&(e*=-1),l=n+a.fpercent(e)):t.metric_type&&"value"==t.metric_type&&(e<0&&(e*=-1),l=n+e),l}(e,l)}},{columnName:i("metric_type"),visible:!1,targets:8,name:"metric_type",data:"metric_type",className:"text-nowrap",responsivePriority:1}],l={table_buttons:e,data_url:a.buildURL(k,E),enable_search:!0,columns_config:t,table_config:{scrollX:!1,serverSide:!1,order:[[1,"desc"]],columnDefs:t}};A=l};return dn((async()=>{X(),await async function(){const e=a.buildURL(u,E);await $.get(e,(function(e,t){P=e.rsp}))}(),await async function(){const e=a.buildURL(y,E);await $.get(e,(function(e,t){j=e.rsp}))}(),await async function(){const e=a.buildURL(d,E);await $.get(e,(function(e,t){U=e.rsp}))}(),await async function(){const e=a.buildURL(v,{...E});await $.get(e,(function(e,t){L=e.rsp}))}(),await async function(){const e=a.buildURL(h,{...E});await $.get(e,(function(e,t){M=e.rsp}))}(),await async function(){const e=a.buildURL(g,E);let t;await $.get(e,(function(e,a){t=e.rsp})),t.sort(((e,t)=>e.label>t.label?1:t.label>e.label?-1:0)),F=t}(),await async function(){const e=a.buildURL(_,E);let t;await $.get(e,(function(e,a){t=e.rsp})),t.sort(((e,t)=>e.label>t.label?1:t.label>e.label?-1:0)),I=t}(),await async function(){const e=a.buildURL(b,E);let t;await $.get(e,(function(e,a){t=e.rsp})),t.sort(((e,t)=>e.label>t.label?1:t.label>e.label?-1:0)),R=t}(),await async function(){const e=a.buildURL(p,E);let t;await $.get(e,(function(e,a){t=e.rsp})),t.sort(((e,t)=>e.label>t.label?1:t.label>e.label?-1:0)),D=t}(),t.has_vlans&&(await async function(){const e=a.buildURL(w,E);await $.get(e,(function(e,t){z=JSON.parse(e).data}))}(),await async function(){const e=a.buildURL(f,E);let t;await $.get(e,(function(e,a){t=e.rsp})),t.sort(((e,t)=>e.label>t.label?1:t.label>e.label?-1:0)),q=t}()),t.has_profiles&&(await async function(){const e=a.buildURL(x,E);await $.get(e,(function(e,t){B=e.data}))}(),await async function(){const e=a.buildURL(m,E);let t;await $.get(e,(function(e,a){t=e.rsp})),V=t}()),s.value.metricsLoaded(P,j,U,M,L,t.page_csrf,null,null,F,R,I,D,z,q,B,V)})),vn((()=>{l.value.destroy_table()})),(e,a)=>(Os(),Ms("div",oC,[Vs("div",rC,[Vs("div",cC,[uC,Vs("div",dC,[Vs("div",_C,[Vs("h4",null,te(i("if_stats_config.traffic_rules")),1)]),Vs("div",pC,[Hs(nx,{ref_key:"modal_delete_confirm",ref:n,title:ya(T),body:ya(O),onDelete:J},null,8,["title","body"]),Hs(iC,{ref_key:"modal_add_host_rule",ref:s,metric_list:ya(P),interface_metric_list:ya(U),frequency_list:H,init_func:W,has_vlans:t.has_vlans,has_profiles:t.has_profiles,onAdd:Y,onEdit:G},null,8,["metric_list","interface_metric_list","has_vlans","has_profiles"]),Hs(kw,{ref_key:"table_host_rules",ref:l,table_buttons:ya(A).table_buttons,columns_config:ya(A).columns_config,data_url:ya(A).data_url,enable_search:ya(A).enable_search,table_config:ya(A).table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])]),Vs("div",fC,[Hs(fm,{note_list:C})])])])]))},__file:"http_src/vue/page-host-rules.vue"};const vC={class:"row"},hC={class:"col-md-12 col-lg-12"},gC={class:"card"},bC=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),yC={class:"card-body"},wC={id:"host_details_ports"},xC={class:"row mb-4 mt-4",id:"host_details_ports"},kC={class:"col-6"};var $C={__name:"page-host-details-ports",props:{page_csrf:String},setup(e){ma(null),ma([]),ma({});const t=e=>i18n(e);dn((async()=>{await async function(){let e={};e.host=x.get_url_entry("host"),e.vlan=x.get_url_entry("vlan"),e.ifid=x.get_url_entry("ifid"),l.forEach((t=>{let l={...t.extra_params,...e};$.get(a.buildURL(t.url,l),(async function(e,a){let l=[];e.rsp.forEach((e=>{const t=e.port_info.port,a=e.port_info.l7_proto;l.push({label:`${t} (${a})`})})),t.stats_rows=l}))}))}()})),_n((async()=>{a.hideOverlays()})),vn((async()=>{traffic_table.value.destroy_table()})),i18n("graphs.cli_ports"),ntopChartApex.typeChart.DONUT,http_prefix,i18n("graphs.srv_ports"),ntopChartApex.typeChart.DONUT,http_prefix;const l=[{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"cli_port_flows",extra_params:{mode:"local",protocol:"tcp"},columns:[{id:"active_server_tcp_ports",label:t("ports_page.active_server_tcp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]},{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"cli_port_flows",extra_params:{mode:"local",protocol:"udp"},columns:[{id:"active_server_udp_ports",label:t("ports_page.active_server_udp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]},{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"srv_port_flows",extra_params:{mode:"remote",protocol:"tcp"},columns:[{id:"client_contacted_server_tcp_ports",label:t("ports_page.client_contacted_server_tcp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]},{url:`${http_prefix}/lua/rest/v2/get/host/port/table_port_data.lua`,id:"srv_port_flows",extra_params:{mode:"remote",protocol:"udp"},columns:[{id:"client_contacted_server_udp_ports",label:t("ports_page.client_contacted_server_udp_ports")},{id:"port_application",label:t("port")}],stats_rows:[]}];return(e,t)=>(Os(),Ms("div",vC,[Vs("div",hC,[Vs("div",gC,[bC,Vs("div",yC,[Vs("div",wC,[Vs("div",xC,[(Os(),Ms(Ss,null,An(l,(e=>Vs("div",kC,[Hs(Pw,{id:e.id,columns:e.columns,rows:e.stats_rows,print_html_column:e=>function(e){return e.label}(e),print_html_row:(e,t)=>function(e,t){return t.label}(0,t)},null,8,["id","columns","rows","print_html_column","print_html_row"])]))),64))])])])])])]))},__file:"http_src/vue/page-host-details-ports.vue"};const SC={class:"row"},NC={class:"col-12"},CC={class:"card"},EC={class:"card-body"},AC={class:"align-items-center justify-content-end mb-3",style:{height:"70vh"}},TC={class:"d-flex ms-auto flex-row-reverse"},OC=Vs("label",{class:"my-auto me-1"},null,-1),PC=[Vs("span",null,[Vs("i",{class:"fas fa-sync"})],-1)],UC={key:0,class:"m-1"},IC={style:{"min-width":"14rem"}},jC={class:"my-auto me-1"};var MC={__name:"page-alert-analysis",props:{ifid:String,page_csrf:String,charts_options:Array,available_filters:Object},setup(e){const t=e,l=e=>i18n(e),n=ma(!1),s=ntopChartApex.typeChart.BUBBLE,i=`${http_prefix}/lua/pro/rest/v2/charts/alert/analysis.lua`,o="alerts-map",r={},c=ma(null),u=function(){let e="";const t={bubble_mode:x.get_url_entry("bubble_mode"),timeframe:x.get_url_entry("timeframe"),vlan:x.get_url_entry("vlan"),ifid:x.get_url_entry("ifid")};for(const[a,l]of Object.entries(t))e=`${e}&${a}=${l}`;return e},d=function(){n.value=!0,c.value.update_chart(`${i}?${u()}`),n.value=!1},_=function(){return async e=>{let l=function(e){let l={};if(t.charts_options.forEach((t=>{t.mode_id==e&&(l=t)})),l&&l.chart&&l.chart.ntop_events){l.chart.events=l.chart.events||{};for(const[e,t]of Object.entries(l.chart.ntop_events))null!=t&&(l.chart.events[e]=a[t]||a.fnone)}return l&&l.xaxis&&l.xaxis.labels&&l.xaxis.labels.ntop_utils_formatter&&(l.xaxis.labels.formatter=a[l.xaxis.labels.ntop_utils_formatter]||a.fnone),l&&l.yaxis&&l.yaxis.labels&&l.yaxis.labels.ntop_utils_formatter&&(l.yaxis.labels.formatter=a[l.yaxis.labels.ntop_utils_formatter]||a.fnone),l&&l.tooltip&&l.tooltip.ntop_utils_formatter&&(l.tooltip.custom=a[l.tooltip.ntop_utils_formatter]),l}(Number(r.bubble_mode.id));const n=await ntopng_utility.http_request(e);return l.series=n.series||{},l}},p=function(e){n.value=!0,x.set_key_to_url(e.filter_name,e.id),c.value.update_chart(`${i}?${u()}`),n.value=!1};return dn((()=>{const e=x.get_url_entry("timeframe"),a=x.get_url_entry("vlan");x.get_url_entry("bubble_mode")||x.set_key_to_url("bubble_mode",0),e||x.set_key_to_url("timeframe",300),a||x.set_key_to_url("vlan",""),x.set_key_to_url("ifid",t.ifid);for(const[e,a]of Object.entries(t.available_filters))a.forEach((t=>{t.filter_name=e,t.currently_active&&(r[e]=t)}))})),_n((()=>{n.value=!1})),(t,a)=>(Os(),Ms("div",SC,[Vs("div",NC,[Vs("div",CC,[Vs("div",EC,[Vs("div",AC,[Vs("div",TC,[Vs("div",null,[OC,Vs("div",null,[Vs("button",{class:"btn btn-link m-1",tabindex:"0",type:"button",onClick:d},PC)])]),(Os(!0),Ms(Ss,null,An(e.available_filters,((e,t,a)=>(Os(),Ms(Ss,null,[e.length>0?(Os(),Ms("div",UC,[Vs("div",IC,[Vs("label",jC,te(l("bubble_map."+t))+": ",1),Hs(l_,{selected_option:r[t],"onUpdate:selected_option":e=>r[t]=e,options:e,onSelect_option:p},null,8,["selected_option","onUpdate:selected_option","options"])])])):Ys("v-if",!0)],64)))),256))]),n.value?(Os(),Ls(yf,{key:0})):Ys("v-if",!0),Vs("div",{id:o,style:{height:"90%"},class:K([n.value?"ntopng-gray-out":""])},[Hs(C_,{ref_key:"bubble_chart",ref:c,id:o,chart_type:ya(s),base_url_request:i,get_params_url_request:u,get_custom_chart_options:_(),register_on_status_change:!1},null,8,["chart_type","get_custom_chart_options"])],2)])])])])]))},__file:"http_src/vue/page-alert-analysis.vue"};const LC={class:"row"},FC={class:"col-12"},RC={class:"card"},DC={class:"card-body"},zC={class:"align-items-center justify-content-end mb-3",style:{height:"70vh"}},qC={class:"d-flex ms-auto flex-row-reverse"},BC=Vs("label",{class:"my-auto me-1"},null,-1),VC={class:"m-1"},HC={key:0,style:{"min-width":"18rem"}},GC={class:"my-auto me-1"};var WC={__name:"page-host-map",props:{ifid:String,page_csrf:String,charts_options:Array,available_filters:Object},setup(e){const t=e,l=e=>i18n(e),n=ntopChartApex.typeChart.BUBBLE,s=`${http_prefix}/lua/rest/v2/charts/host/map.lua`,i="alerts-map",o={},r=ma(null),c=function(){let e="";const t={bubble_mode:x.get_url_entry("bubble_mode"),ifid:x.get_url_entry("ifid")};for(const[a,l]of Object.entries(t))e=`${e}&${a}=${l}`;return e},u=function(){return async e=>{let l=function(e){let l={};if(t.charts_options.forEach((t=>{t.mode_id==e&&(l=t)})),l&&l.chart&&l.chart.ntop_events){l.chart.events=l.chart.events||{};for(const[e,t]of Object.entries(l.chart.ntop_events))null!=t&&(l.chart.events[e]=a[t]||a.fnone)}return l&&l.xaxis&&l.xaxis.labels&&l.xaxis.labels.ntop_utils_formatter&&(l.xaxis.labels.formatter=a[l.xaxis.labels.ntop_utils_formatter]||a.fnone),l&&l.yaxis&&l.yaxis.labels&&l.yaxis.labels.ntop_utils_formatter&&(l.yaxis.labels.formatter=a[l.yaxis.labels.ntop_utils_formatter]||a.fnone),l&&l.tooltip&&l.tooltip.ntop_utils_formatter&&(l.tooltip.custom=a[l.tooltip.ntop_utils_formatter]),l}(Number(o.bubble_mode.id));const n=await ntopng_utility.http_request(e);return l.series=n.series||{},l}},d=function(e){x.set_key_to_url(e.filter_name,e.id),r.value.update_chart(`${s}?${c()}`)};return dn((()=>{x.get_url_entry("bubble_mode")||x.set_key_to_url("bubble_mode",0),x.set_key_to_url("ifid",t.ifid);for(const[e,a]of Object.entries(t.available_filters))a.forEach((t=>{t.filter_name=e,t.currently_active&&(o[e]=t)}))})),(t,a)=>(Os(),Ms("div",LC,[Vs("div",FC,[Vs("div",RC,[Vs("div",DC,[Vs("div",zC,[Vs("div",qC,[BC,(Os(!0),Ms(Ss,null,An(e.available_filters,((e,t,a)=>(Os(),Ms("div",VC,[e.length>0?(Os(),Ms("div",HC,[Vs("label",GC,te(l("bubble_map."+t))+": ",1),Hs(l_,{selected_option:o[t],"onUpdate:selected_option":e=>o[t]=e,options:e,onSelect_option:d},null,8,["selected_option","onUpdate:selected_option","options"])])):Ys("v-if",!0)])))),256))]),Vs("div",{id:i,style:{height:"90%"}},[Hs(C_,{ref_key:"bubble_chart",ref:r,id:i,chart_type:ya(n),base_url_request:s,get_params_url_request:c,get_custom_chart_options:u(),register_on_status_change:!1},null,8,["chart_type","get_custom_chart_options"])])])])])])]))},__file:"http_src/vue/page-host-map.vue"};const KC={class:"row"},JC={class:"col-md-12 col-lg-12"},YC={class:"card card-shadow"},ZC={class:"card-body"},XC={class:"d-flex align-items-center flex-row-reverse mb-2"},QC=Vs("label",{class:"my-auto me-1"},null,-1),eE=[Vs("span",null,[Vs("i",{class:"fas fa-sync"})],-1)],tE={key:0,class:"m-1"},aE={style:{"min-width":"14rem"}},lE={class:"my-auto me-1"},nE=["title"],sE=[Vs("button",{type:"button",class:"btn btn-link",disabled:""},[Vs("i",{class:"text-danger fa-solid fa-triangle-exclamation"})],-1)];var iE={__name:"page-vlan-ports-sankey",props:{ifid:Number,available_filters:Object},setup(e){const t=e,a={},l=e=>i18n(e),n=ma(!1),s=l("ports_analysis.max_entries"),i=l("ports_analysis.no_data"),o=ma(null),r=ma(null),c=ma(null),u=ma(null),d=ma({}),_=`${http_prefix}/lua/pro/rest/v2/get/vlan/live_ports.lua`,p=`${http_prefix}/lua/pro/rest/v2/get/vlan/historical_ports.lua`,f=ma(!1);function m(e){1!=e.is_link_node&&e.link&&x.go_to_url(e.link)}dn((()=>{const e=x.get_url_entry("timeframe"),l=x.get_url_entry("vlan");x.get_url_entry("l4proto"),e||x.set_key_to_url("timeframe","none"),l||x.set_key_to_url("vlan","none"),l||x.set_key_to_url("l4proto","none"),x.set_key_to_url("ifid",t.ifid);for(const[e,l]of Object.entries(t.available_filters))l.forEach((t=>{t.filter_name=e,t.currently_active&&(a[e]=t)}))})),_n((()=>{y(),w(),g()}));const v=function(){g()},h=function(e){x.set_key_to_url(e.filter_name,e.id),g()},g=function(){!async function(){f.value=!0;let e=await async function(){const e=function(){let e=x.get_url_entry("vlan"),t=x.get_url_entry("timeframe"),a=x.get_url_entry("l4proto");"none"==e&&(e="");"none"==t&&(t="");"none"==a&&(a="");let l="",n={ifid:x.get_url_entry("ifid"),vlan:e,timeframe:t,l4proto:a},s=x.obj_to_url_params(n);l=""==t?`${_}?${s}`:`${p}?${s}`;return l}();let t=await b.http_request(e);(function(e){n.value=e.max_entries_reached})(t),t=function(e){let t=e=>console.error(`link (source: ${e.source_node_id}, target: ${e.target_node_id}) removed for not existing source/target node`),a=function(e,t){let a={};e.nodes.forEach((e=>a[e.node_id]=!0));let l=e=>null!=a[e.source_node_id]&&null!=a[e.target_node_id],n=function(e,t,a){return e.filter((e=>{const l=t(e);return 0==l&&null!=a&&a(e),l}))}(e.links,l,t);return n}(e,t);return{nodes:e.nodes,links:a}}(t);const a=function(e){let t={},a={};e.nodes.forEach((e=>t[e.node_id]=e));let l=e=>`${e.source_node_id}_${e.label}`;e.links.forEach((e=>{let n=l(e),s=a[n];null==s&&(s={id:n,label:e.label,link:e.optional_info.link,node_links:[]},a[n]=s),s.node_links.push({source:t[e.source_node_id],target:t[e.target_node_id],value:e.value})}));let n=e.nodes.map((e=>e)),s=[];for(let e in a){let t=a[e],l={node_id:t.id,label:t.label,link:t.link};n.push(l),t.node_links.forEach((e=>{s.push({source_node_id:e.source.node_id,target_node_id:l.node_id,label:`${e.source.label} - ${e.target.label}: ${l.label}`,value:e.value}),s.push({source_node_id:l.node_id,target_node_id:e.target.node_id,label:`${e.source.label} - ${e.target.label}: ${l.label}`,value:e.value})}))}let i=n.map(((e,t)=>({index:t,label:e.label,data:e}))),o={};i.forEach(((e,t)=>o[e.data.node_id]=e));let r=s.map((e=>({source:o[e.source_node_id].index,target:o[e.target_node_id].index,value:e.value,label:e.label})));return{nodes:i,links:r}}(t);return a.links.length>0&&a.nodes.length>0?o.value.set_no_data_flag(!1):o.value.set_no_data_flag(!0),a}();d.value=e,f.value=!1}()};function y(){u.value=$(r.value).height()-100}function w(){c.value=$(r.value).width()-10}return(t,_)=>(Os(),Ms("div",KC,[Vs("div",JC,[Vs("div",YC,[f.value?(Os(),Ls(yf,{key:0})):Ys("v-if",!0),Vs("div",ZC,[Vs("div",{class:K(["align-items-center justify-content-end mb-2",[f.value?"ntopng-gray-out":""]]),style:{height:"70vh"},ref_key:"body_div",ref:r},[Vs("div",XC,[Vs("div",null,[QC,Vs("div",null,[Vs("button",{class:"btn btn-link m-1",tabindex:"0",type:"button",onClick:v},eE)])]),(Os(!0),Ms(Ss,null,An(e.available_filters,((e,t,n)=>(Os(),Ms(Ss,null,[e.length>0?(Os(),Ms("div",tE,[Vs("div",aE,[Vs("label",lE,te(l("ports_analysis."+t))+": ",1),Hs(l_,{selected_option:a[t],"onUpdate:selected_option":e=>a[t]=e,options:e,onSelect_option:h},null,8,["selected_option","onUpdate:selected_option","options"])])])):Ys("v-if",!0)],64)))),256)),1==n.value?(Os(),Ms("div",{key:0,class:"mt-auto m-1",title:ya(s),style:{cursor:"help"}},sE,8,nE)):Ys("v-if",!0)]),Hs(LS,{ref_key:"sankey_chart",ref:o,width:c.value,height:u.value,no_data_message:ya(i),sankey_data:d.value,onUpdate_width:w,onUpdate_height:y,onNode_click:m},null,8,["width","height","no_data_message","sankey_data"])],2)])])])]))},__file:"http_src/vue/page-vlan-ports-sankey.vue"};const oE={class:"row"},rE={class:"col-md-12 col-lg-12"},cE={class:"card card-shadow"},uE={class:"card-body"},dE={class:"d-flex align-items-center mb-2"},_E={class:"d-flex no-wrap",style:{"text-align":"left","margin-right":"1rem","min-width":"25rem"}},pE={class:"my-auto me-1"},fE=["title"],mE=["onClick","title"];var vE={__name:"page-aggregated-live-flows",props:{context:Object},setup(e){const t=e,l=ma(t.context.csrf),n=e=>i18n(e),s=[{label:n("application_proto"),value:1,param:"application_protocol",table_id:"aggregated_app_proto",enterprise_m:!1,search_enabled:!0},{label:n("client"),value:2,param:"client",table_id:"aggregated_client",enterprise_m:!1,search_enabled:!1},{label:n("client_server"),value:4,param:"client_server",table_id:"aggregated_client_server",enterprise_m:!0,search_enabled:!1},{label:n("client_server_application_proto"),value:5,param:"app_client_server",table_id:"aggregated_app_client_server",enterprise_m:!0,search_enabled:!0},{label:n("client_server_srv_port"),value:7,param:"client_server_srv_port",table_id:"aggregated_client_server_srv_port",enterprise_m:!1,search_enabled:!1},{label:n("client_server_srv_port_app_proto"),value:8,param:"client_server_srv_port_app_proto",table_id:"aggregated_client_server_srv_port_app_proto",enterprise_m:!1,search_enabled:!1},{label:n("info"),value:6,param:"info",table_id:"aggregated_info",enterprise_m:!0,search_enabled:!0},{label:n("server"),value:3,param:"server",table_id:"aggregated_server",enterprise_m:!1,search_enabled:!1}];ma(null);const i=ma(),o=ma([]),r=ma([]),c=ma("aggregated_live_flows"),u=wi((()=>{if(null==d.value?.value)return c.value;return`${c.value}_${d.value.value}`})),d=ma(s[0]),_=function(){if(t.context.is_ntop_enterprise_m)return ma(s);{let e=[];return s.forEach((t=>{t.enterprise_m||e.push(t)})),ma(e)}}();async function p(){x.set_key_to_url("aggregation_criteria",d.value.param)}dn((async()=>{!function(){let e=x.get_url_entry("aggregation_criteria");if(null==e||""==e)return;d.value=s.find((t=>t.param==e))}()})),_n((async()=>{!async function(e){o.value=await h("overview"),m()}()}));const f=()=>({ifid:x.get_url_entry("ifid")||t.context.ifid,vlan_id:x.get_url_entry("vlan_id"),deviceIP:x.get_url_entry("deviceIP"),aggregation_criteria:x.get_url_entry("aggregation_criteria")||d.value.param,host:x.get_url_entry("host")||t.context.host});function m(){o.value.forEach(((e,t)=>{null==e.basic_label&&(e.basic_label=e.label);const a=x.get_url_entry(e.id);null!=a&&e.options.forEach((t=>{t.value.toString()===a&&(e.label=`${e.basic_label}: ${t.label||t.value}`)}))}))}const v=(e,t)=>a=>{!async function(e,t){if(e.show_spinner=!0,await Ja(),0==e.data_loaded){let a=await h(e.id);e.options=a.find((t=>t.id==e.id)).options,await Ja(),r.value[t].load_menu()}e.show_spinner=!1}(e,t)};async function h(e,a){let l={ifid:x.get_url_entry("ifid")||t.context.ifid},n=x.obj_to_url_params(l),s=x.get_url_params();const i=`${http_prefix}/lua/rest/v2/get/flow/aggregated_live_flows_filters.lua?action=${e}&${s}&${n}`;return(await b.http_request(i)).map((t=>({id:t.action||t.name,label:t.label,title:t.tooltip,data_loaded:"overview"!=e,options:t.value,hidden:1==t.value.length})))}const g=e=>(e.enable_search=1==d.value.search_enabled,e),y=async e=>((e=[]).push({sortable:!1,title_i18n:"flows_page.live_flows",name:"flows_icon",data_field:"live_flows",class:["text-center"],responsivePriority:1,render_func:(e,t)=>$(e,t)}),1==d.value.value?e.push({title_i18n:"application_proto",sortable:!0,name:"application",data_field:"application",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>S(e,t)}):2==d.value.value?e.push({title_i18n:"client",sortable:!0,name:"client",data_field:"client",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>w(e)}):3==d.value.value?e.push({title_i18n:"last_server",sortable:!0,name:"server",data_field:"server",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>k(e,t)}):7==d.value.value?e.push({title_i18n:"client",sortable:!0,name:"client",data_field:"client",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>w(e)},{title_i18n:"last_server",sortable:!0,name:"server",data_field:"server",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>k(e,t)}):8==d.value.value?e.push({title_i18n:"client",sortable:!0,name:"client",data_field:"client",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>w(e)},{title_i18n:"last_server",sortable:!0,name:"server",data_field:"server",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>k(e,t)},{title_i18n:"application_proto",sortable:!0,name:"application",data_field:"application",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>S(e,t)}):t.context.is_ntop_enterprise_m&&(4==d.value.value||7==d.value.value?e.push({title_i18n:"client",sortable:!0,name:"client",data_field:"client",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>w(e)},{title_i18n:"last_server",sortable:!0,name:"server",data_field:"server",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>k(e,t)}):5==d.value.value?e.push({title_i18n:"client",sortable:!0,name:"client",data_field:"client",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>w(e)},{title_i18n:"last_server",sortable:!0,name:"server",data_field:"server",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>k(e,t)},{title_i18n:"application_proto",sortable:!0,name:"application",data_field:"application",class:["text-nowrap"],responsivePriority:1,render_func:(e,t)=>S(e,t)}):6==d.value.value&&e.push({title_i18n:"info",sortable:!0,name:"info",data_field:"info",class:["text-nowrap"],responsivePriority:1,render_func:e=>`${e.label}`})),t.context.vlans.length>2&&e.push({title_i18n:"vlan",sortable:!0,name:"vlan_id",data_field:"vlan_id",class:["text-nowrap ","text-center"],responsivePriority:1,render_func:e=>{if(0===e.id||null==e.id){const e=i18n("no_vlan");return`<a href="${http_prefix}/lua/flows_stats.lua?vlan=0">${e}</a>`}return`<a href="${http_prefix}/lua/flows_stats.lua?vlan=${e.id}">${e.label}</a>`}}),e.push({title_i18n:"flows",sortable:!0,name:"flows",data_field:"flows",class:["text-nowrap ","text-center"],responsivePriority:1},{title_i18n:"total_score",sortable:!0,name:"score",data_field:"tot_score",class:["text-center"],responsivePriority:1}),2!=d.value.value&&4!=d.value.value&&7!=d.value.value&&e.push({title_i18n:"clients",sortable:!0,name:"num_clients",data_field:"num_clients",class:["text-nowrap ","text-center"],responsivePriority:1}),3!=d.value.value&&4!=d.value.value&&7!=d.value.value&&e.push({title_i18n:"servers",sortable:!0,name:"num_servers",data_field:"num_servers",class:["text-nowrap ","text-center"],responsivePriority:1}),e.push({title_i18n:"breakdown",sortable:!1,name:"breakdown",data_field:"breakdown",class:["text-nowrap","text-center"],responsivePriority:1,render_func:e=>a.createBreakdown(e.percentage_bytes_sent,e.percentage_bytes_rcvd,i18n("sent"),i18n("rcvd"))},{title_i18n:"traffic_sent",sortable:!0,name:"bytes_sent",data_field:"bytes_sent",class:["text-nowrap","text-end"],responsivePriority:1,render_func:e=>a.bytesToSize(e)},{title_i18n:"traffic_rcvd",sortable:!0,name:"bytes_rcvd",data_field:"bytes_rcvd",class:["text-nowrap","text-end"],responsivePriority:1,render_func:e=>a.bytesToSize(e)},{title_i18n:"total_traffic",sortable:!0,name:"tot_traffic",data_field:"tot_traffic",class:["text-nowrap","text-end"],responsivePriority:1,render_func:e=>a.bytesToSize(e)}),e),w=function(e,t){let a="";return e.is_alerted&&(a="<i class='fas fa-exclamation-triangle' style='color: #B94A48;'></i>"),e.in_memory?`<a href="${http_prefix}/lua/flows_stats.lua?client=${e.ip}&vlan=${e.vlan_id}">${e.label}</a> ${a} ${e.extra_labels} <a href="${http_prefix}/lua/host_details.lua?host=${e.ip}&vlan=${e.vlan_id}" data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`:`${e.label} ${a} ${e.extra_labels}`},k=function(e,t){let a="";return e.is_alerted&&(a="<i class='fas fa-exclamation-triangle' style='color: #B94A48;'></i>"),e.in_memory?7!=d.value.value&&8!=d.value.value||null==t.srv_port?`<a href="${http_prefix}/lua/flows_stats.lua?server=${e.ip}&vlan=${e.vlan_id}">${e.label}</a> ${a} ${e.extra_labels} <a href="${http_prefix}/lua/host_details.lua?host=${e.ip}&vlan=${e.vlan_id}" data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>`:`<a href="${http_prefix}/lua/flows_stats.lua?server=${e.ip}&vlan=${e.vlan_id}">${e.label}</a> ${a} ${e.extra_labels} <a href="${http_prefix}/lua/host_details.lua?host=${e.ip}&vlan=${e.vlan_id}" data-bs-toggle='tooltip' title=''><i class='fas fa-laptop'></i></a>:<a href="${http_prefix}/lua/flows_stats.lua?port=${t.srv_port.id}&vlan=${e.vlan_id}">${t.srv_port.label}</a>`:7!=d.value.value&&8!=d.value.value||null==t.srv_port?`${e.label} ${a} ${e.extra_labels}`:`${e.label} ${a} ${e.extra_labels}:${t.srv_port.label}`},$=function(e,a){let l="",n=!1;return null!=t.context.host&&""!=t.context.host&&(n=!0),1==d.value.value?(l=`${http_prefix}/lua/flows_stats.lua?application=${a.application.id}`,n&&(l=l+"&host="+t.context.host)):2==d.value.value?l=`${http_prefix}/lua/flows_stats.lua?client=${a.client.ip}&vlan=${a.client.vlan_id}`:3==d.value.value?l=`${http_prefix}/lua/flows_stats.lua?server=${a.server.ip}&vlan=${a.server.vlan_id}`:4==d.value.value?l=`${http_prefix}/lua/flows_stats.lua?client=${a.client.ip}&server=${a.server.ip}&vlan=${a.vlan_id.id}`:5==d.value.value?l=`${http_prefix}/lua/flows_stats.lua?application=${a.application.id}&client=${a.client.ip}&server=${a.server.ip}&vlan=${a.vlan_id.id}`:6==d.value.value?(l=`${http_prefix}/lua/flows_stats.lua?flow_info=${a.info.id}`,n&&(l=l+"&host="+t.context.host)):7==d.value.value?l=`${http_prefix}/lua/flows_stats.lua?client=${a.client.ip}&server=${a.server.ip}&vlan=${a.vlan_id.id}&srv_port=${a.srv_port.id}`:8==d.value.value&&(l=`${http_prefix}/lua/flows_stats.lua?application=${a.application.id}&client=${a.client.ip}&server=${a.server.ip}&vlan=${a.vlan_id.id}&srv_port=${a.srv_port.id}`),`<a href=${l} class="btn btn-sm btn-info" ><i class= 'fas fa-stream'></i></a>`},S=function(e,t){return 0==t.confidence?`${e.label_with_icons} <span class="badge bg-warning" title=" `+t.confidence_name+'">'+t.confidence_name+" </span>":t.confidence?`${e.label_with_icons} <span class="badge bg-success" title="`+t.confidence_name+' "> '+t.confidence_name+"</span>":void 0};return(e,t)=>(Os(),Ms("div",oE,[Vs("div",rE,[Vs("div",cE,[Vs("div",uE,[Vs("div",dE,[Vs("div",_E,[Vs("label",pE,te(n("criteria_filter"))+": ",1),Hs(l_,{selected_option:d.value,"onUpdate:selected_option":t[0]||(t[0]=e=>d.value=e),options:ya(_),onSelect_option:p},null,8,["selected_option","options"])])]),Vs("div",null,[Hs(rm,{ref_key:"table_aggregated_live_flows",ref:i,csrf:l.value,table_id:ya(u),table_config_id:c.value,f_map_columns:y,get_extra_params_obj:f,f_map_config:g},{custom_header:vl((()=>[(Os(!0),Ms(Ss,null,An(o.value,((e,t)=>(Os(),Ls(Rd,{f_on_open:v(e,t),ref_for:!0,ref:e=>{r.value[t]=e},hidden:e.hidden},{title:vl((()=>[Hs(cm,{show:e.show_spinner,size:"1rem",class:"me-1"},null,8,["show"]),Vs("a",{class:"ntopng-truncate",title:e.title},te(e.label),9,fE)])),menu:vl((()=>[(Os(!0),Ms(Ss,null,An(e.options,(e=>(Os(),Ms("a",{style:{cursor:"pointer",display:"block"},onClick:t=>function(e,t){t.stopPropagation(),x.set_key_to_url(e.key,`${e.value}`),m(),i.value.refresh_table()}(e,t),class:"ntopng-truncate tag-filter",title:e.value},[null==e.count?(Os(),Ms(Ss,{key:0},[Ks(te(e.label),1)],64)):(Os(),Ms(Ss,{key:1},[Ks(te(e.label+" ("+e.count+")"),1)],64))],8,mE)))),256))])),_:2},1032,["f_on_open","hidden"])))),256))])),_:1},8,["csrf","table_id","table_config_id"])])])])])]))},__file:"http_src/vue/page-aggregated-live-flows.vue"};const hE={id:"aggregated_live_flows"};var gE={__name:"page-test-table",props:{url:String,ifid:Number,columns_config:Array},setup(e){const t=e,a=ma({}),l=ma(null);return dn((()=>{!function(){const e=[];let n={ifid:ntopng_url_manager.get_url_entry("ifid")||t.ifid},s=ntopng_url_manager.obj_to_url_params(n);e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,a,n){l.value.reload()}});let i={table_buttons:e,data_url:`${t.url}?${s}`,enable_search:!0};i.columns_config=t.columns_config,a.value=i}()})),(e,t)=>(Os(),Ms("div",hE,[Hs(kw,{ref_key:"table_test",ref:l,table_buttons:a.value.table_buttons,columns_config:a.value.columns_config,data_url:a.value.data_url,filter_buttons:a.value.table_filters,enable_search:a.value.enable_search,table_config:a.value.table_config},null,8,["table_buttons","columns_config","data_url","filter_buttons","enable_search","table_config"])]))},__file:"http_src/vue/page-test-table.vue"};const bE={class:"container-fluid"},yE={class:"row form-group mb-3"},wE={class:"col col-md-12"},xE={class:"form-label"},kE={class:"row form-group mb-3"},$E={class:"col col-md-6"},SE={class:"form-label"},NE={class:"col col-md-6"},CE={class:"form-label"},EE={key:0},AE={key:1},TE=["pattern"],OE={class:"row form-group mb-3"},PE={class:"col col-md-6"},UE={class:"form-label"},IE={class:"col col-md-6"},jE={class:"form-label"},ME={key:0},LE={key:1},FE=["pattern"],RE={class:"row form-group mb-3"},DE={class:"col col-md-12"},zE={class:"form-label"},qE={class:"row form-group mb-3"},BE={class:"col col-md-12"},VE={class:"form-label"},HE=["disabled"];var GE={__name:"modal-nedge-add-rule-config",props:{},emits:["edit","add"],setup(e,{expose:t,emit:a}){const l=e=>i18n(e),n=ma(null),s=ma(""),i=[{label:l("nedge.page_rules_config.modal_rule_config.ip"),value:"ip",default:!0},{label:l("nedge.page_rules_config.modal_rule_config.cidr"),value:"cidr"},{label:l("interface"),value:"interface"}];let o="source_to_dest";const r=[{label:l("nedge.page_rules_config.bidirectional"),value:"bidirectional",bidirectional:!0},{label:l("nedge.page_rules_config.source_to_dest"),value:"source_to_dest",bidirectional:!1}],c=ma({});let u="accept";const d=[{label:l("nedge.page_rules_config.accept"),value:"accept"},{label:l("nedge.page_rules_config.deny"),value:"deny"}],_=ma({}),p=ma(0),f=ma(0),m=ma({}),v=ma(""),h=ma(""),g=ma({}),y=ma(""),w=ma(""),x=`${http_prefix}/lua/rest/v2/get/nedge/interfaces.lua`;let k;const $=ma([]),S=ma({}),N=ma({}),C=ma(""),E=wi((()=>U(m.value,h.value,v.value))),A=wi((()=>U(g.value,w.value,y.value))),T=ma(!0);async function O(e){let t=null;null!=e&&(t=e.source.value),"interface"==m.value.value?(await j(),S.value=null!=t?$.value.find((e=>e.value==t)):$.value[0]):(h.value=null!=e?e.source.value:"",M(v,m.value.value))}async function P(e){let t=null;null!=e&&(t=e.destination.value),"interface"==g.value.value?(await j(),N.value=null!=t?$.value.find((e=>e.value==t)):$.value[0]):(w.value=null!=e?e.destination.value:"",M(y,g.value.value))}function U(e,t,a){if("interface"==e.value)return!0;return new RegExp(a).test(t)}let I=!1;async function j(){if(1==I)return;null==k&&(k=b.http_request(x));let e=await k;$.value=e.filter((e=>"lan"==e.role)).map((e=>({label:e.label,value:e.ifname}))),I=!0}function M(e,t){e.value=yp.get_data_pattern(t)}const L=()=>{let e=m.value.value,t=h.value;"interface"==e&&(t=S.value.value);let l=g.value.value,n=w.value;"interface"==l&&(n=N.value.value);let s={src_type:e,src_value:t,dst_type:l,dst_value:n,policy:_.value.value,bidirectional:"bidirectional"==c.value.value},i="add";0==T.value&&(s.rule_id=p.value,s.new_rule_id=f.value,i="edit"),a(i,s),F()},F=()=>{n.value.close()};return t({show:(e,t)=>{!function(e,t){T.value=null==e,null!=t&&(u=t.value);if(0==T.value)s.value=l("nedge.page_rules_config.modal_rule_config.title_edit"),C.value=l("edit"),m.value=i.find((t=>t.value==e.source.type)),g.value=i.find((t=>t.value==e.destination.type)),c.value=r.find((t=>t.bidirectional==e.bidirectional)),_.value=d.find((t=>t.value==e.action)),p.value=e.rule_id,f.value=e.rule_id;else{s.value=l("nedge.page_rules_config.modal_rule_config.title_add"),C.value=l("add");let e=i.find((e=>1==e.default));m.value=e,g.value=e,c.value=r.find((e=>e.value==o)),_.value=d.find((e=>e.value!=u))}O(e),P(e)}(e,t),n.value.show()},close:F}),_n((()=>{})),(e,t)=>(Os(),Ls(np,{onShowed:t[12]||(t[12]=e=>{}),ref_key:"modal_id",ref:n},{title:vl((()=>[Ks(te(s.value),1)])),body:vl((()=>[Vs("div",bE,[Ys(" Rule ID "),wn(Vs("div",yE,[Vs("div",wE,[Vs("label",xE,te(l("nedge.page_rules_config.rule_id")),1),wn(Vs("input",{type:"text",class:"form-control","onUpdate:modelValue":t[0]||(t[0]=e=>f.value=e)},null,512),[[jo,f.value]]),wn(Vs("input",{type:"hidden",class:"form-control","onUpdate:modelValue":t[1]||(t[1]=e=>p.value=e)},null,512),[[jo,p.value]])])],512),[[Yo,!T.value]]),Ys(" Source "),Vs("div",kE,[Vs("div",$E,[Vs("label",SE,te(l("nedge.page_rules_config.modal_rule_config.source_type")),1),Hs(l_,{selected_option:m.value,"onUpdate:selected_option":t[2]||(t[2]=e=>m.value=e),onSelect_option:t[3]||(t[3]=e=>O()),options:i},null,8,["selected_option"])]),Vs("div",NE,[Vs("label",CE,te(l("nedge.page_rules_config.source")),1),"interface"==m.value.value?(Os(),Ms("div",EE,[Hs(l_,{selected_option:S.value,"onUpdate:selected_option":t[4]||(t[4]=e=>S.value=e),options:$.value},null,8,["selected_option","options"])])):(Os(),Ms("div",AE,[wn(Vs("input",{type:"text",class:"form-control",pattern:v.value,"onUpdate:modelValue":t[5]||(t[5]=e=>h.value=e)},null,8,TE),[[jo,h.value]])]))])]),Ys(" Dest "),Vs("div",OE,[Vs("div",PE,[Vs("label",UE,te(l("nedge.page_rules_config.modal_rule_config.dest_type")),1),Hs(l_,{selected_option:g.value,"onUpdate:selected_option":t[6]||(t[6]=e=>g.value=e),onSelect_option:t[7]||(t[7]=e=>P()),options:i},null,8,["selected_option"])]),Vs("div",IE,[Vs("label",jE,te(l("nedge.page_rules_config.dest")),1),"interface"==g.value.value?(Os(),Ms("div",ME,[Hs(l_,{selected_option:N.value,"onUpdate:selected_option":t[8]||(t[8]=e=>N.value=e),options:$.value},null,8,["selected_option","options"])])):(Os(),Ms("div",LE,[wn(Vs("input",{type:"text",class:"form-control",pattern:y.value,"onUpdate:modelValue":t[9]||(t[9]=e=>w.value=e)},null,8,FE),[[jo,w.value]])]))])]),Ys(" Direction "),Vs("div",RE,[Vs("div",DE,[Vs("label",zE,te(l("nedge.page_rules_config.direction")),1),Hs(l_,{selected_option:c.value,"onUpdate:selected_option":t[10]||(t[10]=e=>c.value=e),options:r},null,8,["selected_option"])])]),Ys(" Action "),Vs("div",qE,[Vs("div",BE,[Vs("label",VE,te(l("nedge.page_rules_config.action")),1),Hs(l_,{selected_option:_.value,"onUpdate:selected_option":t[11]||(t[11]=e=>_.value=e),options:d},null,8,["selected_option"])])])])])),footer:vl((()=>[Vs("button",{type:"button",disabled:!ya(E)||!ya(A),onClick:L,class:"btn btn-primary"},te(C.value),9,HE)])),_:1},512))}};lp("\ninput[data-v-50692d68]:invalid {\n  border-color: #ff0000;\n}\n"),GE.__scopeId="data-v-50692d68",GE.__file="http_src/vue/modal-nedge-add-rule-config.vue";const WE={class:"container-fluid"},KE={class:"row form-group mb-3"},JE={class:"col col-md-12"},YE={class:"form-label"};var ZE={__name:"modal-nedge-change-default-policy",emits:["apply"],setup(e,{expose:t,emit:a}){const l=ma(null),n=e=>i18n(e),s=n("nedge.page_rules_config.modal_change_default_policy.title"),i=[{label:n("nedge.page_rules_config.accept"),value:"accept"},{label:n("nedge.page_rules_config.deny"),value:"deny"}],o=ma({}),r=()=>{l.value.close()};function c(){a("apply",o.value.value),r()}return t({show:e=>{o.value=i.find((t=>t.value==e.value)),l.value.show()},close:r}),(e,t)=>(Os(),Ls(np,{onShowed:t[1]||(t[1]=e=>{}),ref_key:"modal_id",ref:l},{title:vl((()=>[Ks(te(ya(s)),1)])),body:vl((()=>[Vs("div",WE,[Ys(" Default Policy "),Vs("div",KE,[Vs("div",JE,[Vs("label",YE,te(n("nedge.page_rules_config.default policy")),1),Hs(l_,{selected_option:o.value,"onUpdate:selected_option":t[0]||(t[0]=e=>o.value=e),options:i},null,8,["selected_option"])])])])])),footer:vl((()=>[Vs("button",{type:"button",onClick:c,class:"btn btn-primary"},te(n("apply")),1)])),_:1},512))},__file:"http_src/vue/modal-nedge-change-default-policy.vue"};const XE={class:"mb-2"},QE=Vs("br",null,null,-1),eA={class:"d-inline-block"},tA={key:0,style:{color:"green"}},aA={key:1,style:{color:"red"}},lA=[Vs("i",{class:"fas fa-cog"},null,-1)],nA={id:"aggregated_live_flows"};var sA={__name:"page-nedge-rules-config",props:{url:String,ifid:Number,csrf:String,columns_config:Array},setup(e){const t=e,a=e=>i18n(e),l=ma({}),n=ma(null),s=ma(null),i=ma(null),o=ma({});function r(e){_(e,`${http_prefix}/lua/rest/v2/edit/nedge/policy/rule.lua`)}function c(e){_(e,`${http_prefix}/lua/rest/v2/add/nedge/policy/rule.lua`)}async function u(e){if(null==e){const t=`${http_prefix}/lua/rest/v2/get/nedge/policy/default.lua`;e=(await b.http_request(t)).default_policy}o.value="accept"==e?{value:e,label:a("nedge.page_rules_config.accept")}:{value:e,label:a("nedge.page_rules_config.deny")}}async function d(e){const a=`${http_prefix}/lua/rest/v2/set/nedge/policy/default.lua`;let l=JSON.stringify({default_policy:e,csrf:t.csrf});await b.http_request(a,{method:"post",headers:{"Content-Type":"application/json"},body:l}),u(e),m()}function _(e,a){let l=JSON.stringify({...e,csrf:t.csrf});b.http_request(a,{method:"post",headers:{"Content-Type":"application/json"},body:l}),m()}function p(){i.value.show(o.value)}dn((async()=>{!function(){const e=[];let n={ifid:x.get_url_entry("ifid")||t.ifid},i=x.obj_to_url_params(n);e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,a,l){m()}},{text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){s.value.show(null,o.value)}});let r={table_buttons:e,data_url:`${t.url}?${i}`,enable_search:!1},c=[{columnName:a("nedge.page_rules_config.rule_id"),targets:0,name:"rule_id",data:"rule_id",className:"text-nowrap text-center",responsivePriority:1},{columnName:a("nedge.page_rules_config.source"),targets:0,name:"source",data:"source",className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,a){return null!=e.label&&""!=e.label?e.label:e.value}},{columnName:a("nedge.page_rules_config.dest"),targets:0,name:"dest",data:"destination",className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,a){return null!=e.label&&""!=e.label?e.label:e.value}},{columnName:a("nedge.page_rules_config.direction"),targets:0,name:"bidirectional",data:"bidirectional",className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,l){return a(1==e?"nedge.page_rules_config.bidirectional":"nedge.page_rules_config.source_to_dest")}},{columnName:a("nedge.page_rules_config.action"),targets:0,name:"action",data:"action",className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,l){let n="red",s=a("nedge.page_rules_config.deny");return"accept"==e&&(n="green",s=a("nedge.page_rules_config.accept")),`<span style="color:${n};">${s}</span>`}}].map((e=>e));c.push({columnName:a("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return f(a)}}),r.columns_config=c,l.value=r}(),u()}));const f=function(e){let a={handlerId:"delete_host",onClick:()=>{!async function(e){const a=`${http_prefix}/lua/rest/v2/delete/nedge/policy/rule.lua`;let l={"Content-Type":"application/json"},n=JSON.stringify({rule_id:e.rule_id,csrf:t.csrf});b.http_request(a,{method:"post",headers:l,body:n}),m()}(e)}},l={handlerId:"edit_rule",onClick:()=>{s.value.show(e)}};return DataTableUtils.createActionButtons([{class:"btn-secondary",handler:l,handlerId:"edit_rule",icon:"fa-edit",title:i18n("edit")},{class:"btn-danger",handler:a,handlerId:"delete_rule",icon:"fa-trash",title:i18n("delete")}])};function m(){setTimeout((()=>{x.reload_url()}),500)}return(e,t)=>(Os(),Ms(Ss,null,[Vs("div",XE,[Vs("h2",null,te(a("nedge.rules_config_title")),1),QE,Vs("h5",eA,[Ks(te(a("nedge.page_rules_config.default policy"))+" ",1),"accept"==o.value?.value?(Os(),Ms("span",tA,te(o.value?.label),1)):Ys("v-if",!0),"deny"==o.value?.value?(Os(),Ms("span",aA,te(o.value?.label),1)):Ys("v-if",!0),Vs("small",null,[Vs("a",{href:"javascript:void(0)",style:{"margin-left":"0.5rem"},onClick:p},lA)])])]),Vs("div",nA,[Hs(kw,{ref_key:"table_rules",ref:n,table_buttons:l.value.table_buttons,columns_config:l.value.columns_config,data_url:l.value.data_url,filter_buttons:l.value.table_filters,enable_search:l.value.enable_search,table_config:l.value.table_config},null,8,["table_buttons","columns_config","data_url","filter_buttons","enable_search","table_config"])]),Hs(GE,{ref_key:"modal_add_rule_config",ref:s,onAdd:c,onEdit:r},null,512),Hs(ZE,{ref_key:"modal_change_default_policy",ref:i,onApply:d},null,512)],64))},__file:"http_src/vue/page-nedge-rules-config.vue"};const iA={key:0,class:"form-group ms-2 me-2 mt-3 row"},oA={class:"col-form-label col-sm-4"},rA={class:"col-8"},cA={key:1,class:"form-group ms-2 me-2 mt-3 row"},uA={class:"col-form-label col-sm-4"},dA={class:"col-8"},_A={class:"form-group ms-2 me-2 mt-3 row"},pA={class:"col-form-label col-sm-4"},fA={class:"col-8"},mA=["placeholder"],vA=["disabled"],hA=["disabled"];var gA={__name:"modal-add-application",props:{page_csrf:String,ifid:String},emits:["add"],setup(e,{expose:t,emit:a}){const l=ma(null),n=ma(!1),s=e=>i18n(e),i=ma(!0);let o=ma(i18n("add_application"));const r=ma(i18n("details.custom_rules_placeholder")),c=ma({}),u=ma([]),d=ma(""),_=ma(""),p=ma(null);ma({});const f=[s("custom_categories.each_host_separate_line"),s("custom_categories.allowed_rules"),s("custom_categories.ip_address"),s("custom_categories.ip_address_port"),s("custom_categories.port"),s("custom_categories.port_range"),s("custom_categories.host_domain")];const m=()=>{1==v()&&1==h()?i.value=!1:i.value=!0},v=()=>/^[A-Za-z0-9_-]*$/.test(_.value),h=()=>{let e=!0;return d.value.split("\n").forEach((t=>{e=e&&(/^((tcp|udp):(6553[0-5]|655[0-2][0-9]\d|65[0-4](\d){2}|6[0-4](\d){3}|[1-5](\d){4}|[1-9](\d){0,3}))$/.test(t)||/^((tcp|udp):(6553[0-5]|655[0-2][0-9]\d|65[0-4](\d){2}|6[0-4](\d){3}|[1-5](\d){4}|[1-9](\d){0,3})-(6553[0-5]|655[0-2][0-9]\d|65[0-4](\d){2}|6[0-4](\d){3}|[1-5](\d){4}|[1-9](\d){0,3}))$/.test(t)||/^(ip):(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(t)||/^(ip):(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?):(6553[0-5]|655[0-2][0-9]\d|65[0-4](\d){2}|6[0-4](\d){3}|[1-5](\d){4}|[1-9](\d){0,3})$/.test(t)||/^((host):[a-zA-Z0-9]+)$/.test(t)||/(host):[a-zA-Z0-9].[a-zA-Z]/g.test(t)||""===t)})),e},g=()=>{a("add",{l7_proto_id:p.value,protocol_alias:_.value,category:c.value.id,custom_rules:d.value,is_edit_page:n.value}),b()},b=()=>{l.value.close()};return dn((()=>{})),t({show:e=>{_.value="",c.value=u.value[0],d.value="",n.value=!1,o.value=i18n("add_application"),null!=e&&(p.value=e.application_id,_.value=e.application,n.value=!0,o.value=`${i18n("edit_application")}: ${_.value}`,(e=>{let t=null;u.value.forEach((a=>{a.id==e.category_id&&(t=a)})),c.value=t,d.value=e.custom_rules?.replace(",","\n")})(e)),l.value.show(),m()},close:b,loadCategoryList:e=>{u.value=(e=>{let t=[];return e.forEach((e=>{t.push({id:e.cat_id,label:e.name,app_list:e.app_list})})),t=t.sort(((e,t)=>null==e||null==e.label?-1:null==t||null==t.label?1:e.label.toString().localeCompare(t.label.toString()))),t})(e)}}),(e,t)=>(Os(),Ls(np,{onShowed:t[4]||(t[4]=e=>{}),ref_key:"modal_id",ref:l},{title:vl((()=>[Ks(te(ya(o)),1)])),body:vl((()=>[wn(Vs("input",{class:"form-control",type:"text","onUpdate:modelValue":t[0]||(t[0]=e=>p.value=e),spellcheck:"false",hidden:""},null,512),[[jo,p.value]]),0==n.value?(Os(),Ms("div",iA,[Vs("label",oA,[Vs("b",null,te(s("app_name")),1)]),Vs("div",rA,[wn(Vs("input",{class:"form-control",type:"text","onUpdate:modelValue":t[1]||(t[1]=e=>_.value=e),onInput:m,spellcheck:"false"},null,544),[[jo,_.value]])])])):(Os(),Ms("div",cA,[Vs("label",uA,[Vs("b",null,te(s("category")),1)]),Vs("div",dA,[Hs(l_,{selected_option:c.value,"onUpdate:selected_option":t[2]||(t[2]=e=>c.value=e),options:u.value},null,8,["selected_option","options"])])])),Vs("div",_A,[Vs("label",pA,[Vs("b",null,te(s("category_custom_rule")),1)]),Vs("div",fA,[wn(Vs("textarea",{class:"form-control",onInput:m,placeholder:r.value,rows:"6","onUpdate:modelValue":t[3]||(t[3]=e=>d.value=e),spellcheck:"false"},null,40,mA),[[jo,d.value]])])])])),footer:vl((()=>[Hs(fm,{note_list:f}),0==n.value?(Os(),Ms("button",{key:0,type:"button",onClick:g,class:"btn btn-primary",disabled:i.value},te(s("add")),9,vA)):(Os(),Ms("button",{key:1,type:"button",onClick:g,class:"btn btn-primary",disabled:i.value},te(s("apply")),9,hA))])),_:1},512))},__file:"http_src/vue/modal-add-application.vue"},bA={__name:"modal-delete-application",emits:["remove"],setup(e,{expose:t,emit:a}){const l=ma(null),n=e=>i18n(e),s=ma(null);let i=ma(i18n("custom_categories.delete_app"));const o=i18n("custom_categories.delete_app_confirm"),r=()=>{a("remove",{protocol_alias:s.value}),c()},c=()=>{l.value.close()};return t({show:e=>{null!=e&&(s.value=e.application,i.value=`${i18n("custom_categories.delete_app")}: ${s.value}`),l.value.show()},close:c}),(e,t)=>(Os(),Ls(np,{ref_key:"modal_id",ref:l},{title:vl((()=>[Ks(te(ya(i)),1)])),body:vl((()=>[Ks(te(ya(o)),1)])),footer:vl((()=>[Vs("button",{type:"button",onClick:r,class:"btn btn-primary"},te(n("delete")),1)])),default:vl((()=>[wn(Vs("input",{class:"form-control",type:"text","onUpdate:modelValue":t[0]||(t[0]=e=>s.value=e),spellcheck:"false",hidden:""},null,512),[[jo,s.value]])])),_:1},512))},__file:"http_src/vue/modal-delete-application.vue"};const yA=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1);var wA={__name:"page-edit-applications",props:{page_csrf:String,ifid:String,has_protos_file:Boolean},setup(e){const t=e,a=ma(null),l=ma(null),n=ma(null),s=ma({}),i=ma([]),o=ma(null),r=ma(!0);let c="";const u=`${http_prefix}/lua/rest/v2/get/l7/category/consts.lua`,d=`${http_prefix}/lua/rest/v2/edit/application/application.lua`,_=`${http_prefix}/lua/rest/v2/delete/application/application.lua`,p=e=>i18n(e),f=async e=>{const a={csrf:t.page_csrf,ifid:t.ifid},l=NtopUtils.buildURL(_,{...a,...e});await $.get(l,(function(e,t){h(i18n("custom_categories.succesfully_removed"))})),g()},m=async e=>{const a=e.is_edit_page;e.is_edit_page=null;const l={csrf:t.page_csrf,ifid:t.ifid},n=NtopUtils.buildURL(d,{...l,...e});await $.get(n,(function(e,t){"success"==t&&h(a?i18n("custom_categories.succesfully_edited"):i18n("custom_categories.succesfully_added"))})),g()},v=e=>{n.value.show(e)},h=e=>{c=e,r.value=!1,setTimeout((()=>{r.value=!0,g()}),4e3)},g=()=>{a.value.reload()};dn((async()=>{!function(){const e=[];t.has_protos_file&&e.push({text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){v()}});e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(){g()}});let a={table_buttons:e,data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/ntopng/applications.lua`,{ifid:t.ifid}),enable_search:!0,table_config:{serverSide:!1,order:[[0,"asc"]]}},n=[{columnName:i18n("application"),name:"application",data:"application",className:"text-nowrap",responsivePriority:1},{columnName:i18n("category"),name:"category",data:"category",className:"text-nowrap",responsivePriority:1,render:function(e,t,a){return e}},{columnName:i18n("custom_categories.custom_hosts"),name:"custom_rules",data:"custom_rules",className:"text-nowrap",responsivePriority:2},{visible:!1,name:"application_hosts",data:"application_hosts"},{visible:!1,name:"application_id",data:"application_id"},{visible:!1,name:"category_id",data:"category_id"},{columnName:p("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return function(e){let t={handlerId:"edit_rule",onClick:()=>{v(e)}};const a=[{class:"pointer",handler:t,icon:"fa-edit",title:i18n("edit")}];if(e.is_custom){let t={handlerId:"delete_rule",onClick:()=>{var t;t=e,l.value.show(t)}};a.push({class:"pointer",handler:t,icon:"fa-trash",title:i18n("delete")})}return DataTableUtils.createActionButtons(a)}(a)}}],i=ntopng_utility.clone(a);i.columns_config=n,s.value=i}()})),_n((async()=>{await(async()=>{await $.get(u,(function(e,t){i.value=e.rsp})),n.value.loadCategoryList(i.value)})();const e=ntopng_url_manager.get_url_entry("application");e&&(e=>{a.value.search_value(e)})(e)})),vn((async()=>{a.value.destroy_table()}));return(t,u)=>(Os(),Ms(Ss,null,[yA,wn(Vs("div",{ref_key:"update_message",ref:o,class:"alert alert-info"},te(ya(c)),513),[[Yo,!r.value]]),Hs(gA,{ref_key:"modal_add_application",ref:n,category_list:i.value,page_csrf:e.page_csrf,ifid:e.ifid,onAdd:m},null,8,["category_list","page_csrf","ifid"]),Hs(bA,{ref_key:"modal_delete_application",ref:l,onRemove:f},null,512),Hs(kw,{ref_key:"applications_table",ref:a,table_buttons:s.value.table_buttons,columns_config:s.value.columns_config,data_url:s.value.data_url,enable_search:s.value.enable_search,table_config:s.value.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])],64))},__file:"http_src/vue/page-edit-applications.vue"};const xA={class:"row"},kA={class:"col-12"},$A={class:"card card-shadow"},SA={class:"card-body"},NA={key:0,class:"alert alert-danger",role:"alert",id:"error-alert"},CA={key:2,class:"alert alert-info alert-dismissable"},EA=Vs("span",{class:"spinner-border spinner-border-sm text-info"},null,-1),AA=["innerHTML"],TA=["innerHTML"];var OA={__name:"page-network-discovery",props:{ifid:String},setup(e){const t=e,a=ma(!1),l=i18n("map_page.fetch_error"),n=ma(!1),s=ma(null),i=ma({}),o=ma(null),r=ma(""),c=i18n("discover.network_discovery_not_enabled"),u=ma(!1),d=i18n("discover.ghost_icon_descr"),_=i18n("discover.too_many_devices_descr"),p=ma(!1);let f;const m=[i18n("discover.discovery_running"),i18n("discover.protocols_note")],v=`${http_prefix}/lua/get_discover_progress.lua`,h=`${http_prefix}/lua/rest/v2/get/network/discovery/discover.lua`,g=`${http_prefix}/lua/rest/v2/get/network/discovery/run_discovery.lua`,b=async function(){u.value=!1,await $.get(NtopUtils.buildURL(v,{ifid:t.ifid}),(function(e,t){1==e.rsp.discovery_requested?(n.value=!0,""!=e.rsp.progress&&(o.value=e.rsp.progress)):(n.value=!1,o.value="",clearInterval(f)),(e=>{1==e.ghost_found&&0==p.value&&(m.unshift(d),p.value=!0),1==e.too_many_devices_message&&0==_.value&&(m.unshift(_),_.value=!0),0==e.ghost_found&&0==p.value&&(m.shift(),p.value=!1),0==e.too_many_devices_message&&1==_.value&&(m.shift(),_.value=!1),r.value=e.last_network_discovery})(e.rsp)}))};return _n((()=>{f=setInterval(b,3e3)})),dn((async()=>{!function(){let e={table_buttons:[{text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(){s.value.reload()}},{text:i18n("discover.start_discovery")+' <i class="fa-solid fa-play"></i>',action:function(){u.value=!1,$.get(NtopUtils.buildURL(g,{ifid:t.ifid}),(function(e){})),f=setInterval(b,1e3)}}],data_url:NtopUtils.buildURL(h,{ifid:t.ifid}),enable_search:!0,table_config:{serverSide:!1,order:[[0,"asc"]]}},a=[{columnName:i18n("ip_address"),name:"ip",data:"ip",className:"text-nowrap",responsivePriority:1},{columnName:i18n("name"),name:"name",data:"name",className:"text-nowrap text-center",responsivePriority:1},{columnName:i18n("mac_stats.manufacturer"),name:"manufacturer",data:"manufacturer",className:"text-nowrap",responsivePriority:2},{columnName:i18n("mac_address"),name:"mac_address",data:"mac_address",className:"text-nowrap",responsivePriority:2},{columnName:i18n("os"),name:"os",data:"os",className:"text-nowrap text-center",responsivePriority:2},{columnName:i18n("info"),name:"info",data:"info",className:"text-nowrap",responsivePriority:2},{columnName:i18n("device"),name:"device",data:"device",className:"text-nowrap",responsivePriority:2}],l=ntopng_utility.clone(e);l.columns_config=a,i.value=l}()})),vn((async()=>{s.value.destroy_table()})),(e,t)=>(Os(),Ms("div",xA,[Vs("div",kA,[Vs("div",$A,[u.value?(Os(),Ls(yf,{key:0})):Ys("v-if",!0),Vs("div",SA,[a.value?(Os(),Ms("div",NA,te(ya(l)),1)):Ys("v-if",!0),n.value?(Os(),Ms("div",CA,[EA,Ks(" "+te(ya(c))+" ",1),Vs("span",{innerHTML:o.value},null,8,AA)])):(Os(),Ls(kw,{key:1,ref_key:"network_discovery_table",ref:s,table_buttons:i.value.table_buttons,columns_config:i.value.columns_config,data_url:i.value.data_url,enable_search:i.value.enable_search,table_config:i.value.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])),Hs(fm,{note_list:m}),Ys(" Adding Extra Message "),Vs("div",{class:"p-1",innerHTML:r.value},null,8,TA)])])])]))},__file:"http_src/vue/page-network-discovery.vue"};const PA={class:"row"},UA={class:"col-md-12 col-lg-12"},IA={class:"card card-shadow"},jA={class:"card-body"},MA=Vs("div",{class:"d-flex align-items-center"},null,-1);var LA={__name:"page-manage-configurations-backup",props:{date_format:String},setup(e){const t=e,a=e=>i18n(e),l=ma(null),n=`${http_prefix}/lua/rest/v2/get/system/configurations/list_available_backups.lua`,s=ma({}),i=ma(!1);dn((async()=>{await async function(){const e=[];e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,a,n){i.value=!0,l.value.reload(),i.value=!1}});let o={table_buttons:e,data_url:`${n}`,enable_search:!0,id:"manage_configurations_backup",table_config:{serverSide:!0,responsive:!1,scrollX:!0,columnDefs:[{type:"file-size",targets:0}]}},r=[];r.push({columnName:a("backup_date"),orderable:!0,targets:0,name:"epoch",data:"epoch",className:"text-left",responsivePriority:1,render:(e,a,l)=>function(e,a){const l=1e3*e;let n="HH:MM:SS";return n="little_endian"==t.date_format?"DD/MM/YYYY "+n:"middle_endian"==t.date_format?"MM/DD/YYYY "+n:"YYYY/MM/DD "+n,ntopng_utility.from_utc_to_server_date_format(l,n)}(e)},{columnName:a("actions"),orderable:!1,width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return function(e){let t={handlerId:"download_backup_handler",onClick:()=>{var t;t=e,window.open(`${http_prefix}/lua/rest/v2/get/system/configurations/download_backup.lua?epoch=${t.epoch}&download=true`)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:t,icon:"fas fa-download fa-lg",title:i18n("download")}])}(a)}}),o.columns_config=r,s.value=o}()}));return(e,t)=>(Os(),Ms("div",PA,[Vs("div",UA,[Vs("div",IA,[Vs("div",jA,[i.value?(Os(),Ls(yf,{key:0})):Ys("v-if",!0),Vs("div",{id:"manage_configurations_backup",class:K([i.value?"ntopng-gray-out":""])},[(Os(),Ls(kw,{ref_key:"table_manage_configurations_backup",ref:l,id:s.value.id,key:s.value.data_url,table_buttons:s.value.table_buttons,columns_config:s.value.columns_config,data_url:s.value.data_url,table_config:s.value.table_config},{menu:vl((()=>[MA])),_:1},8,["id","table_buttons","columns_config","data_url","table_config"]))],2)])])])]))},__file:"http_src/vue/page-manage-configurations-backup.vue"};const FA={class:"form-group ms-2 me-2 mt-3 row"},RA={class:"col-form-label col-sm-2"},DA={class:"col-10"},zA={key:0,class:"form-group ms-2 me-2 mt-3 row"},qA={class:"col-form-label col-sm-2"},BA={class:"col-10"},VA={class:"form-group ms-2 me-2 mt-3 row"},HA={class:"col-form-label col-sm-2"},GA={class:"col-10"},WA={class:"form-group ms-2 me-2 mt-3 row"},KA={class:"col-form-label col-sm-2"},JA={class:"col-10"},YA={class:"form-group ms-2 me-2 mt-3 row",style:{"margin-top":"3px"}},ZA={class:"col-form-label col-sm-2"},XA={class:"col-sm-3"},QA={class:"btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},eT=["value","id"],tT=["id","for"],aT=["value","id"],lT=["id","for"],nT=["value","id"],sT=["id","for"],iT={key:0,class:"col-sm-2 btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},oT=["value","id"],rT=["id","for"],cT={key:1,class:"col-sm-2 btn-group float-end btn-group-toggle","data-bs-toggle":"buttons"},uT=["value","id"],dT=["id","for"],_T={key:1,class:"message alert alert-warning mt-3"};var pT={__name:"modal-add-snmp-device-rules",props:{ifid_list:Array,snmp_devices_list:Array,snmp_metric_list:Array,frequency_list:Array,init_func:Function,page_csrf:String},emits:["add","edit"],setup(e,{expose:t,emit:l}){const n=e;ma(""),ma("");const s=ma(null),i=e=>i18n(e);ma(null),ma(null);const o=ma([]),r=ma([]);let c=ma([]),u=ma(!0);const d=`${http_prefix}/lua/pro/rest/v2/get/snmp/device/available_interfaces.lua`,_=ma([]),p=ma(null),f=ma(null),m=ma({}),v=ma({}),h=ma({}),g=ma({}),b=ma({}),y=ma(!0),w=ma({}),x=ma(!0),k=ma("snmp"),S=ma(!1),N=ma(null);let C=ma([]),E=i("if_stats_config.add_host_rules_title");const A=[i("if_stats_config.note_snmp_device_rules.note_1"),i("if_stats_config.note_snmp_device_rules.note_2"),i("if_stats_config.note_snmp_device_rules.note_3"),i("if_stats_config.note_3"),i("if_stats_config.note_4")],T=[i("if_stats_config.note_5")],O=ma([{title:i("volume"),label:i("volume"),id:"volume",active:!0},{title:i("throughput"),label:i("throughput"),id:"throughput",active:!1},{title:i("percentage"),label:i("percentage"),id:"percentage",active:!1},{title:i("packets"),label:i("packets"),id:"packets",active:!1}]),P=ma([{title:i("kb"),label:i("kb"),id:"kb",value:1024,active:!1},{title:i("mb"),label:i("mb"),id:"mb",value:1048576,active:!1},{title:i("gb"),label:i("gb"),id:"gb",value:1073741824,active:!0,default_active:!0}]),U=ma([{title:i("kbps"),label:i("kbps"),id:"kbps",value:1e3,active:!1},{title:i("mbps"),label:i("mbps"),id:"mbps",value:1e6,active:!1},{title:i("gbps"),label:i("gbps"),id:"gbps",value:1e9,active:!0,default_active:!0}]),I=ma([{title:"+",label:">",id:"plus",value:1,active:!1,absolute_value:!0},{title:"-",label:"<",id:"minus",value:-1,active:!0,default_active:!0}]),j=ma([{title:"+",label:">",id:"plus",value:1,active:!0,absolute_value:!0}]),M=[{title:"+",label:"%",id:"plus",value:1,active:!0}],L=ma(null),F=ma(null),R={csrf:n.page_csrf};function D(e){e.forEach((e=>e.active=1==e.default_active))}const z=e=>{const t=e.target.id;I.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1}))},q=e=>{const t=e.target.id;"throughput"==w.value.id?U.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):"volume"==w.value.id?P.value.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):"percentage"==w.value.id?M.forEach((e=>{e.id===t?e.active=!0:e.active=!1})):w.value.id};async function B(e){const t=a.buildURL(d+"?host="+v.value.label_to_insert,R);let l=[];await $.get(t,(function(e,t){l=e.rsp}));let n=[];l.forEach((e=>{null!=e.name&&""!=e.name&&e.name!=e.id?n.push({label:e.name+" ("+e.id+")",id:e.id,name:e.name}):n.push({label:e.id,id:e.id,name:e.id})})),n.push({label:"*",id:"*",name:"*"}),n.sort((function(e,t){return e.label.toLowerCase()>t.label.toLowerCase()?1:e.label.toLowerCase()<t.label.toLowerCase()?-1:0})),null!=e&&n.forEach((t=>{t.id==e&&(h.value=t)})),c.value=n,"all"==v.value.label_to_insert?u.value=!1:u.value=!0}function V(){let e=[];"packets"==g.value.id||"usage"==g.value.id?O.value.forEach((t=>{"percentage"!=t.id?t.active=!1:(t.active=!0,e.push(t),w.value=t)})):"errors"==g.value.id?O.value.forEach((t=>{"packets"!=t.id?t.active=!1:(t.active=!0,e.push(t),w.value=t)})):O.value.forEach((t=>{"packets"==t.id?t.active=!1:e.push(t)})),C.value=e}const H=e=>{k.value="snmp",L.value;const t=b.value.id,a=g.value.id,n=g.value.label,s=v.value.label_to_insert,i=v.value.label,o=null==h.value||0===Object.entries(h.value).length?"*":h.value.id,r=null==h.value||0===Object.entries(h.value).length?"*":h.value.label;let c,u,d,_,p,f=w.value.id;!1===x.value&&(f="",tmp_extra_metric="",_=F.value.value),"throughput"==f?(I.value.forEach((e=>{e.active&&(d=e.value)})),p=parseInt(d),U.value.forEach((e=>{e.active&&(c=e.value,u=e.label)})),_=c*parseInt(F.value.value)/8):"volume"==f?(I.value.forEach((e=>{e.active&&(d=e.value)})),p=parseInt(d),P.value.forEach((e=>{e.active&&(c=e.value,u=e.label)})),_=c*parseInt(F.value.value)):"percentage"==f?(I.value.forEach((e=>{e.active&&(d=e.value)})),p=parseInt(d),_=p*parseInt(F.value.value),u="%"):(p=1,_=parseInt(F.value.value));let m="add";1==e&&(m="edit"),l(m,{frequency:t,metric:a,metric_label:n,threshold:_,metric_type:f,snmp_device:s,snmp_device_label:i,snmp_device_port:o,snmp_device_port_label:r,rule_threshold_sign:p,snmp_threshold_value:F.value.value,snmp_threshold_unit:u,snmp_metric_type_label:w.value.title}),W()},G=()=>{H(!0)},W=()=>{s.value.close()};return dn((()=>{O.value.forEach((e=>{e.active&&(w.value=e)}))})),t({show:e=>{null!=e?(e=>{null!=e&&(S.value=!0,E=i("if_stats_config.edit_host_rules_title"),y.value=!1,r.value.forEach((t=>{t.label_to_insert==e.device&&(v.value=t)})),I.value.forEach((t=>{t.active=t.value==e.threshold_sign})),o.value.forEach((t=>{t.id==e.metric&&(g.value=t)})),"volume"==e.metric_type?P.value.forEach((t=>{if(e.threshold%t.value==0){let a=e.threshold/t.value;a<1024?(t.active=!0,F.value.value=0==a?1:a):t.active=!1}else t.active=!1})):"throughput"==e.metric_type?(e.threshold=8*e.threshold,U.value.forEach((t=>{if(e.threshold%t.value==0){let a=e.threshold/t.value;a<1e3?(t.active=!0,F.value.value=0==a?1:a):t.active=!1}else t.active=!1}))):F.value.value=e.threshold*e.threshold_sign,V(),C.value.forEach((t=>{t.id==e.metric_type?(w.value=t,t.active=!0):t.active=!1})),k.value=e.rule_type,r.value.forEach((t=>{t.label==e.device&&(v.value=t)})),_.value.forEach((t=>{t.id==e.frequency&&(b.value=t)})),B(e.device_port))})(e):async function(){L.value="",m.value=o.value[0],v.value=null,v.value=r.value[0],B(),g.value=o.value[0],V(),b.value=_.value[0],w.value=O.value[0],O.value.forEach((e=>e.active=!1)),O.value[0].active=!0,D(P.value),D(U.value),D(I.value),k.value="snmp",y.value=!0,u.value=!1,F.value.value=1,S.value=!1,E=i("if_stats_config.add_host_rules_title")}(),s.value.show()},close:W,metricsLoaded:(e,t,a)=>{r.value=function(e){let t=[];return e.data.forEach((e=>{null!=e.column_name&&""!=e.column_name&&"all"!=e.column_name?t.push({label:e.column_name+" ("+e.column_key+")",label_to_insert:e.column_key}):"all"==e.column_name?t.push({label:e.column_key,label_to_insert:e.column_name}):t.push({label:e.column_key,label_to_insert:e.column_key})})),t.sort((function(e,t){return e.label.toLowerCase()>t.label.toLowerCase()?1:e.label.toLowerCase()<t.label.toLowerCase()?-1:0})),t}(e),o.value=t,_.value=n.frequency_list,b.value=_.value[0],m.value=o.value[0],N.value=a}}),(e,t)=>(Os(),Ls(np,{onShowed:t[7]||(t[7]=e=>{}),ref_key:"modal_id",ref:s},{title:vl((()=>[Ks(te(ya(E)),1)])),body:vl((()=>[Ys(" Target information, here an IP is put "),Vs("div",FA,[Vs("label",RA,[Vs("b",null,te(i("if_stats_config.snmp_device")),1)]),Vs("div",DA,[Hs(l_,{selected_option:v.value,"onUpdate:selected_option":t[0]||(t[0]=e=>v.value=e),onSelect_option:t[1]||(t[1]=e=>B()),options:r.value},null,8,["selected_option","options"])])]),1==ya(u)?(Os(),Ms("div",zA,[Vs("label",qA,[Vs("b",null,te(i("if_stats_config.snmp_interface")),1)]),Vs("div",BA,[Hs(l_,{selected_option:h.value,"onUpdate:selected_option":t[2]||(t[2]=e=>h.value=e),options:ya(c)},null,8,["selected_option","options"])])])):Ys("v-if",!0),Vs("div",VA,[Vs("label",HA,[Vs("b",null,te(i("if_stats_config.metric")),1)]),Vs("div",GA,[Hs(l_,{selected_option:g.value,"onUpdate:selected_option":t[3]||(t[3]=e=>g.value=e),onSelect_option:t[4]||(t[4]=e=>V()),options:o.value},null,8,["selected_option","options"])])]),Ys(" Frequency information, a frequency of 1 day, 5 minute or 1 hour for example "),Vs("div",WA,[Vs("label",KA,[Vs("b",null,te(i("if_stats_config.frequency")),1)]),Vs("div",JA,[Hs(l_,{selected_option:b.value,"onUpdate:selected_option":t[5]||(t[5]=e=>b.value=e),options:_.value},null,8,["selected_option","options"])])]),Ys(" Threshold information, maximum amount of bytes "),Vs("div",YA,[Vs("label",ZA,[Vs("b",null,te(i("if_stats_config.threshold")),1)]),x.value?(Os(),Ms(Ss,{key:0},[Vs("div",XA,[Hs(l_,{selected_option:w.value,"onUpdate:selected_option":t[6]||(t[6]=e=>w.value=e),options:ya(C)},null,8,["selected_option","options"])]),Vs("div",{class:K(["col-3",["throughput"==w.value.id?"p-0":""]])},[Vs("div",QA,["throughput"==w.value.id&&"packets"!=w.value.id?(Os(!0),Ms(Ss,{key:0},An(U.value,(e=>(Os(),Ms(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:p,name:"threshold_measure"},null,8,eT),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:q,for:e.id},te(e.label),11,tT)],64)))),256)):Ys("v-if",!0),"percentage"==w.value.id&&"packets"!=w.value.id?(Os(),Ms(Ss,{key:1},An(M,(e=>(Os(),Ms(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:p,name:"threshold_measure"},null,8,aT),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:q,for:e.id},te(e.label),11,lT)],64)))),64)):Ys("v-if",!0),"volume"==w.value.id&&"packets"!=w.value.id?(Os(!0),Ms(Ss,{key:2},An(P.value,(e=>(Os(),Ms(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_measure",ref:p,name:"threshold_measure"},null,8,nT),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:q,for:e.id},te(e.label),11,sT)],64)))),256)):Ys("v-if",!0)])],2),"packets"!=w.value.id?(Os(),Ms("div",iT,[(Os(!0),Ms(Ss,null,An(I.value,(e=>(Os(),Ms(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_sign",ref:f,name:"threshold_sign"},null,8,oT),Vs("label",{class:K(["btn",[e.active?"btn-primary active":"btn-secondary"]]),id:e.id,onClick:z,for:e.id},te(e.label),11,rT)],64)))),256))])):(Os(),Ms("div",cT,[(Os(!0),Ms(Ss,null,An(j.value,(e=>(Os(),Ms(Ss,null,[Vs("input",{value:e.value,id:e.id,type:"radio",class:"btn-check",autocomplete:"off",ref_for:!0,ref_key:"threshold_sign",ref:f,name:"threshold_sign"},null,8,uT),Vs("label",{class:K(["btn",[e.absolute_value?"btn-primary active":"btn-secondary"]]),id:e.id,for:e.id},te(e.label),11,dT)],64)))),256))]))],64)):Ys("v-if",!0),Vs("div",{class:K([x.value?"col-sm-2":"col-sm-8"])},["percentage"==w.value.id?(Os(),Ms("input",{key:0,value:"1",ref_key:"threshold",ref:F,type:"number",name:"threshold",class:"form-control",max:"100",min:"1",required:""},null,512)):(Os(),Ms("input",{key:1,value:"1",ref_key:"threshold",ref:F,type:"number",name:"threshold",class:"form-control",max:"1023",min:"1",required:""},null,512))],2)]),"usage"!=g.value.id&&"percentage"==w.value.id?(Os(),Ms("div",_T,te(i("show_alerts.host_rules_percentage")),1)):Ys("v-if",!0)])),footer:vl((()=>[Hs(fm,{note_list:A,add_sub_notes:!0,sub_note_list:T}),0==S.value?(Os(),Ms("button",{key:0,type:"button",onClick:H,class:"btn btn-primary"},te(i("add")),1)):(Os(),Ms("button",{key:1,type:"button",onClick:G,class:"btn btn-primary"},te(i("apply")),1))])),_:1},512))},__file:"http_src/vue/modal-add-snmp-device-rules.vue"};const fT={class:"row"},mT={class:"col-md-12 col-lg-12"},vT={class:"card"},hT=Vs("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Vs("div",{class:"text-center"},[Vs("div",{class:"spinner-border text-primary mt-5",role:"status"},[Vs("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),gT={class:"card-body"},bT={class:"mb-4"},yT={id:"host_rules"},wT={class:"card-footer"};var xT={__name:"page-snmp-device-rules",props:{page_csrf:String,ifid:String},setup(e){const t=e,l=ma(null),n=ma(null),s=ma(null),i=e=>i18n(e),o=ma({}),r=ma({}),c=`${http_prefix}/lua/pro/rest/v2/get/snmp/metric/rule_metrics.lua`,u=`${http_prefix}/lua/pro/enterprise/get_snmp_devices_list.lua`,d=`${http_prefix}/lua/pro/rest/v2/get/snmp/device/rules.lua`,_=`${http_prefix}/lua/pro/rest/v2/add/snmp/device/rule.lua`,p=`${http_prefix}/lua/pro/rest/v2/delete/snmp/device/rule.lua`,f=[i("if_stats_config.generic_notes_1"),i("if_stats_config.generic_notes_2"),i("if_stats_config.generic_notes_3")],m={ifid:t.ifid,csrf:t.page_csrf};let v={},h=i("if_stats_config.delete_host_rules_title");i("if_stats_config.edit_local_network_rules");let g=i("if_stats_config.delete_host_rules_description"),b=[],y=[];const w=[{title:i18n("show_alerts.5_min"),label:i18n("show_alerts.5_min"),id:"5min"},{title:i18n("show_alerts.hourly"),label:i18n("show_alerts.hourly"),id:"hour"},{title:i18n("show_alerts.daily"),label:i18n("show_alerts.daily"),id:"day"}];async function x(e){await N(),await C(e)}const k=function(){const e=r.value;return r.value=null,e},S=function(){l.value.reload()},N=async function(){const e=o.value,t=a.buildURL(p,{...m,rule_id:e.id,rule_type:e.rule_type});await $.post(t,(function(e,t){S()}))},C=async function(e){const t=a.buildURL(_,{...m,...e});await $.post(t,(function(e,t){S()}))},E=function(e){let t={handlerId:"delete_host",onClick:()=>{var t;t=e,o.value=t,n.value.show()}},a={handlerId:"edit_rule",onClick:()=>{var t;t=e,r.value=t,o.value=t,s.value.show(t)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:a,icon:"fa-edit",title:i18n("edit")},{class:"pointer",handler:t,icon:"fa-trash",title:i18n("delete")}])},A=function(){const e=[];e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(){S()}},{text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){s.value.show()}});const t=[{columnName:i("actions"),targets:0,width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return E(a)}},{columnName:i("id"),visible:!1,targets:1,name:"id",data:"id",className:"text-nowrap",responsivePriority:1},{columnName:i("if_stats_config.snmp_device"),targets:2,width:"20",name:"device",data:"device",className:"text-nowrap",responsivePriority:1,render:function(e,t,a){return function(e,t){return t.device_label}(0,a)}},{columnName:i("if_stats_config.snmp_interface"),targets:3,width:"20",name:"interface",data:"interface",className:"text-center",responsivePriority:1,render:function(e,t,a){return function(e,t){return t.device_port_label}(0,a)}},{columnName:i("if_stats_config.metric"),targets:4,width:"10",name:"metric",data:"metric",className:"text-center",responsivePriority:1,render:function(e,t,a){return function(e,t){let a=e;return t.metric_label&&t.metric_label!=e&&""!=t.metric_label&&(a=t.metric_label),a}(e,a)}},{columnName:i("if_stats_config.frequency"),targets:5,width:"10",name:"frequency",data:"frequency",className:"text-center",responsivePriority:1,render:function(e){return function(e){let t="";return w.forEach((a=>{e==a.id&&(t=a.title)})),t}(e)}},{columnName:i("if_stats_config.threshold"),targets:6,width:"10",name:"threshold",data:"threshold",className:"text-end",responsivePriority:1,render:function(e,t,l){return function(e,t){let l=parseInt(e),n="> ";return t.threshold_sign&&"-1"==t.threshold_sign&&(n="< "),t.metric_type&&"throughput"==t.metric_type?l=n+a.bitsToSize_no_comma(8*e):t.metric_type&&"volume"==t.metric_type?l=n+a.bytesToSize(e):t.metric_type&&"percentage"==t.metric_type?(e<0&&(e*=-1),l=n+a.fpercent(e)):l=n+e,l}(e,l)}},{columnName:i("metric_type"),visible:!1,targets:7,name:"metric_type",data:"metric_type",className:"text-nowrap",responsivePriority:1}],l={table_buttons:e,data_url:a.buildURL(d,m),enable_search:!0,columns_config:t,table_config:{scrollX:!1,serverSide:!1,order:[[1,"desc"]],columnDefs:t}};v=l};return dn((async()=>{A(),await async function(){const e=a.buildURL(c,m);await $.get(e,(function(e,t){b=e.rsp}))}(),await async function(){m.verbose=!0;const e=a.buildURL(u,m);await $.get(e,(function(e,t){y=e.rsp})),y.data.push({column_key:"*",column_name:"all"})}(),s.value.metricsLoaded(y,b,t.page_csrf)})),vn((()=>{l.value.destroy_table()})),(e,t)=>(Os(),Ms("div",fT,[Vs("div",mT,[Vs("div",vT,[hT,Vs("div",gT,[Vs("div",bT,[Vs("h4",null,te(i("if_stats_config.snmp_rules")),1)]),Vs("div",yT,[Hs(nx,{ref_key:"modal_delete_confirm",ref:n,title:ya(h),body:ya(g),onDelete:N},null,8,["title","body"]),Hs(pT,{ref_key:"modal_add_snmp_device_rule",ref:s,frequency_list:w,init_func:k,onAdd:C,onEdit:x},null,512),Hs(kw,{ref_key:"table_host_rules",ref:l,table_buttons:ya(v).table_buttons,columns_config:ya(v).columns_config,data_url:ya(v).data_url,enable_search:ya(v).enable_search,table_config:ya(v).table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])]),Vs("div",wT,[Hs(fm,{note_list:f})])])])]))},__file:"http_src/vue/page-snmp-device-rules.vue"},kT={__name:"page-snmp-devices-interfaces-similarity",props:{context:Object},setup(e){const t=e,a=e=>i18n(e),l=[a("snmp.snmp_similarity_note"),a("snmp.snmp_similarity_time_note")];return _n((async()=>{Wd.build_table(http_prefix,"snmp_similarity_data")})),console.log(t.context),(e,t)=>(Os(),Ms(Ss,null,[Ks(" Ciao Mondo "),Hs(fm,{note_list:l})],64))},__file:"http_src/vue/page-snmp-devices-interfaces-similarity.vue"};const $T={class:"row"},ST={class:"col-md-12 col-lg-12"},NT={class:"card card-shadow"},CT={class:"card-body"},ET={class:"d-flex mb-3"},AT={class:"d-flex align-items-center ml-2 mb-2"},TT={class:"d-flex no-wrap",style:{"text-align":"left","margin-right":"1rem","min-width":"25rem"}},OT={class:"my-auto me-1"},PT={class:"d-flex align-items-center mb-2"},UT={class:"d-flex no-wrap",style:{"text-align":"left","margin-right":"1rem","min-width":"25rem"}},IT={class:"my-auto me-1"},jT={class:"d-flex align-items-center mb-2"},MT={class:"d-flex no-wrap",style:{"text-align":"left","margin-right":"1rem","min-width":"25rem"}},LT={class:"my-auto me-1"},FT=["title"],RT=["onClick","title"];var DT={__name:"page-hosts-ports-analysis",props:{is_ntop_enterprise_m:Boolean,csrf:String,vlans:Array,ifid:Number,aggregation_criteria:String,page:Number,sort:String,order:String,start:Number,length:Number,host:String},setup(e){const t=e,l=ma([]),n=ma([]);ma({csrf:t.csrf,ifid:t.ifid});const s=e=>i18n(e),i=[{label:s("tcp"),value:6,param:"tcp",table_id:"tcp_ports_analysis",enterprise_m:!1},{label:s("udp"),value:17,param:"udp",table_id:"udp_ports_analysis",enterprise_m:!1}],o=ma(i[0]),r=ma("server_ports_analysis"),c=ma({}),u=ma({}),d=ma();let _=ma([]),p=ma([]);const f=function(){if(t.is_ntop_enterprise_m)return ma(i);{let e=[];return i.forEach((t=>{t.enterprise_m||e.push(t)})),ma(e)}}();_n((async()=>{let e=x.get_url_entry("port"),a=x.get_url_entry("protocol");const n=x.get_url_entry("application");x.set_key_to_url("ifid",t.ifid),null!=e&&0!=e.localeCompare("")&&null!=a&&0!=a.localeCompare("")&&null!=n&&0!=n.localeCompare("")?(e=Number(e),a=Number(a),o.value=i.find((e=>e.value==a)),await E(!1,n,e)):(o.value=i[0],await E(!1)),async function(e){l.value=await w("overview"),C()}(),d.value.refresh_table()}));const m=()=>x.get_url_object();async function v(){await E(!1),d.value.refresh_table()}async function h(){await E(!0),d.value.refresh_table()}function g(){y(),d.value.refresh_table()}function y(){x.set_key_to_url("port",c.value.id)}async function w(e,t){let a=m(),l=x.obj_to_url_params(a);const n=`${http_prefix}/lua/pro/rest/v2/get/host/hosts_details_by_port_filters.lua?action=${e}&${l}`;return(await b.http_request(n)).map((t=>({id:t.action||t.name,label:t.label,title:t.tooltip,data_loaded:"overview"!=e,options:t.value,hidden:1==t.value.length})))}const k=(e,t)=>a=>{!async function(e,t){if(e.show_spinner=!0,await Ja(),0==e.data_loaded){let a=await w(e.id);e.options=a.find((t=>t.id==e.id)).options,await Ja(),n.value[t].load_menu()}e.show_spinner=!1}(e,t)};function $(e){let t={click_button_flows:S};null!=t[e.event_id]&&t[e.event_id](e)}function S(e){N(e.row.ip)}const N=function(e){let t={l4proto:o.value.value,server:e,port:c.value.id,vlan:x.get_url_entry("vlan_id")},a=x.obj_to_url_params(t);const l=`${http_prefix}/lua/flows_stats.lua?${a}`;x.go_to_url(`${l}`)};function C(){l.value.forEach(((e,t)=>{null==e.basic_label&&(e.basic_label=e.label);const a=x.get_url_entry(e.id);null!=a&&e.options.forEach((t=>{t.value.toString()===a&&(e.label=`${e.basic_label}: ${t.label||t.value}`)}))}))}async function E(e,a,l){x.set_key_to_url("protocol",o.value.value);const n=x.get_url_entry("vlan_id")||"",s=`${http_prefix}/lua/pro/rest/v2/get/host/server_ports.lua?protocol=${o.value.value}&ifid=${t.ifid}&vlan_id=${n}`;let i=await b.http_request(s,null,null,!0),r=[];p.value=[],_.value=[],i.rsp.forEach((e=>{let t=e.l7_proto_name;r.push({label:`${e.srv_port}/${t} (${e.n_hosts})`,id:e.srv_port,application:t,application_id:e.proto_id,num_hosts:e.n_hosts,vlan_id:e.vlan_id})})),r.forEach((e=>{let t=e.application_id;p.value.find((e=>e.id==t))||p.value.push({label:e.application,id:e.application_id,value:t})})),p.value.sort(((e,t)=>{let a=e.label.toLowerCase(),l=t.label.toLowerCase();return a<l?-1:a>l?1:0})),e||(u.value=null==a?p.value[0]:p.value.find((e=>e.id==a))),x.set_key_to_url("application",u.value.id),r.forEach((e=>{e.application==u.value.label&&_.value.push({label:e.id+" ("+e.num_hosts+")",id:e.id,value:e.id,vlan_id:e.vlan_id,n_hosts:e.num_hosts})})),_.value.sort(((e,t)=>{let a=e.id,l=t.id;return a<l?-1:a>l?1:0})),c.value=null!=l?_.value.find((e=>e.id==l)):_.value[0],y()}const A=async e=>{let t={ip:(e,t)=>{if(void 0!==e)return T(e,t)},name:(e,t)=>{if(void 0!==e)return P(e,t)},mac:(e,t)=>{if(void 0!==e)return O(e)},tot_traffic:(e,t)=>{if(void 0!==e)return a.bytesToSize(e)}};return e.forEach((e=>{e.render_func=t[e.data_field]})),e},T=function(e,t){return null!=e?0!=t.vlan_id?`<a href="${http_prefix}/lua/flows_stats.lua?server=${e}&vlan=${t.vlan_id}&port=${c.value.id}">${e}@${t.vlan_id}</a>`:`<a href="${http_prefix}/lua/flows_stats.lua?server=${e}&port=${c.value.id}">${e}</a>`:e},O=function(e,t){return null!=e?`<a href="${http_prefix}/lua/mac_details.lua?host=${e}">${e}</a>`:e},P=function(e,t){return null!=e?0!=t.vlan_id?`<a href="${http_prefix}/lua/host_details.lua?host=${t.ip}&vlan=${t.vlan_id}">${e}</a>`:`<a href="${http_prefix}/lua/host_details.lua?host=${t.ip}">${e}</a>`:e};return(t,a)=>(Os(),Ms("div",$T,[Vs("div",ST,[Vs("div",NT,[Vs("div",CT,[Vs("div",ET,[Vs("div",AT,[Vs("div",TT,[Vs("label",OT,te(s("protocol"))+": ",1),Hs(l_,{selected_option:o.value,"onUpdate:selected_option":a[0]||(a[0]=e=>o.value=e),options:ya(f),onSelect_option:v},null,8,["selected_option","options"])])]),Vs("div",PT,[Vs("div",UT,[Vs("label",IT,te(s("application"))+": ",1),Hs(l_,{selected_option:u.value,"onUpdate:selected_option":a[1]||(a[1]=e=>u.value=e),options:ya(p),onSelect_option:h},null,8,["selected_option","options"])])]),Vs("div",jT,[Vs("div",MT,[Vs("label",LT,te(s("db_search.tags.srv_port"))+": ",1),Hs(l_,{selected_option:c.value,"onUpdate:selected_option":a[2]||(a[2]=e=>c.value=e),options:ya(_),onSelect_option:g},null,8,["selected_option","options"])])])]),Vs("div",null,[Hs(rm,{ref_key:"table_server_ports_analysis",ref:d,csrf:e.csrf,table_id:r.value,f_map_columns:A,get_extra_params_obj:m,onCustom_event:$},{custom_header:vl((()=>[(Os(!0),Ms(Ss,null,An(l.value,((e,t)=>(Os(),Ls(Rd,{f_on_open:k(e,t),ref_for:!0,ref:e=>{n.value[t]=e},hidden:e.hidden},{title:vl((()=>[Hs(cm,{show:e.show_spinner,size:"1rem",class:"me-1"},null,8,["show"]),Vs("a",{class:"ntopng-truncate",title:e.title},te(e.label),9,FT)])),menu:vl((()=>[(Os(!0),Ms(Ss,null,An(e.options,(e=>(Os(),Ms("a",{style:{cursor:"pointer",display:"block"},onClick:t=>function(e,t){t.stopPropagation(),x.set_key_to_url(e.key,`${e.value}`),C(),d.value.refresh_table()}(e,t),class:"ntopng-truncate tag-filter",title:e.value},[null==e.count?(Os(),Ms(Ss,{key:0},[Ks(te(e.label),1)],64)):(Os(),Ms(Ss,{key:1},[Ks(te(e.label+" ("+e.count+")"),1)],64))],8,RT)))),256))])),_:2},1032,["f_on_open","hidden"])))),256))])),_:1},8,["csrf","table_id"])])])])])]))},__file:"http_src/vue/page-hosts-ports-analysis.vue"};const zT={class:"form-group ms-2 me-2 mt-3 row"},qT={class:"col-form-label col-sm-3"},BT={class:"col-7"},VT={key:0},HT={class:"form-group ms-2 me-2 mt-3 row"},GT={class:"col-form-label col-sm-3"},WT={class:"col-7"},KT=["placeholder"],JT={key:1},YT={class:"form-group ms-2 me-2 mt-3 row"},ZT={class:"col-form-label col-sm-3"},XT={class:"switch col-1 mt-3"},QT={class:"form-group ms-2 me-2 mt-3 row"},eO={class:"col-form-label col-sm-3"},tO={class:"col-7"},aO=["disabled"];var lO={__name:"modal-nedge-add-repeater-config",props:{},emits:["edit","add"],setup(e,{expose:t,emit:a}){const l=e=>i18n(e),n=i18n("if_stats_config.multicast_ip_placeholder"),s=ma(null),i=ma([]),o=ma(null),r=ma({value:"mdns",label:"MDNS"}),c=ma(null),u=ma(!1),d=ma(!0),_=ma(!0),p=ma(!0),f=()=>{let e=new RegExp(yp.get_data_pattern("ip"));p.value=!(e.test(o.value)||"*"===o.value),d.value=m()},m=()=>"custom"==r.value.value?_.value||p.value:_.value,v=ma(""),h=[{label:l("nedge.page_repeater_config.modal_repeater_config.mdns"),value:"mdns",default:!0},{label:l("nedge.page_repeater_config.modal_repeater_config.custom"),value:"custom"}],g=ma(0),y=ma({}),w=`${http_prefix}/lua/rest/v2/get/nedge/interfaces.lua`;let x;const k=ma([]),$=ma(""),S=e=>{_.value=e.length<2,d.value=m()},N=e=>{i.value=e},C=e=>{i.value=i.value.filter((t=>t.label!=e.label))},E=ma(!0);async function A(e){r.value=y.value,"custom"==r.value.value&&await O()}let T=!1;async function O(){if(1==T)return;null==x&&(x=b.http_request(w));let e=await x;k.value=e.filter((e=>"lan"==e.role)).map((e=>({label:e.label,value:e.ifname}))),T=!0}const P=()=>{let e=r.value.value,t=u.value,l={repeater_type:e};if("custom"==r.value.value){l={repeater_type:e,ip:o.value,keep_src_address:t}}let n="add";0==E.value&&(l.repeater_id=g.value,n="edit");let s=[],c=[];i.value.forEach((e=>{s.push(e.value),e.value==e.label||e.label.includes(e.value)?c.push(e.label):c.push(e.label+" ("+e.value+")")}));const d=s.join(","),_=c.join(",");l.interfaces=d,l.interface_details=_,a(n,l),U()},U=()=>{s.value.close()};return t({show:e=>{y.value={},o.value="",i.value=[],p.value=!0,_.value=!0,function(e){E.value=null==e,0==E.value?(p.value=!1,_.value=!1,d.value=!1,v.value=l("nedge.page_rules_config.modal_rule_config.title_edit"),$.value=l("edit"),g.value=e.repeater_id,y.value=h.find((t=>t.value==e.type)),"custom"==y.value.value&&(o.value=e.ip),u.value=e.keep_src_address,A()):(v.value=l("nedge.page_rules_config.modal_rule_config.title_add"),$.value=l("add"),h.find((e=>1==e.default)));if(0==E.value){const t=e.interfaces.split(",");let a=[];t.forEach((e=>{""!=e&&null!=e&&a.push(k.value.find((t=>t.value==e)))})),i.value=a}}(e),s.value.show()},close:U}),_n((async()=>{await O()})),(e,t)=>(Os(),Ls(np,{onShowed:t[5]||(t[5]=e=>{}),ref_key:"modal_id",ref:s},{title:vl((()=>[Ks(te(v.value),1)])),body:vl((()=>[Ys(" Repeater Type "),Vs("div",zT,[Vs("label",qT,[Vs("b",null,te(l("nedge.page_repeater_config.modal_repeater_config.repeater_type")),1)]),Vs("div",BT,[Hs(l_,{selected_option:y.value,"onUpdate:selected_option":t[0]||(t[0]=e=>y.value=e),onSelect_option:t[1]||(t[1]=e=>A()),options:h},null,8,["selected_option"])])]),Ys(" IP "),"custom"==y.value.value?(Os(),Ms("div",VT,[Vs("div",HT,[Vs("label",GT,[Vs("b",null,te(l("nedge.page_repeater_config.ip")),1)]),Vs("div",WT,[wn(Vs("input",{"onUpdate:modelValue":t[2]||(t[2]=e=>o.value=e),onFocusout:f,class:"form-control col-7",type:"text",placeholder:ya(n),required:""},null,40,KT),[[jo,o.value]])])])])):Ys("v-if",!0),Ys(' Port \n\t\n\n\t\t<div v-if="selected_repeater_type.value == \'custom\'" >\n\t\t\t<div class="form-group ms-2 me-2 mt-3 row">\n\n\t\t\t\t<label class="col-form-label col-sm-3" >\n\t\t\t\t\t<b>{{_i18n("nedge.page_repeater_config.port")}}</b>\n\t\t\t\t</label>\n\t\t\t\t<div class="col-7">\n\n\t      <input v-model="port"  @focusout="check_empty_port" class="form-control" type="text" :placeholder="port_placeholder" required>\n\t\t\t\t</div>\n\n    \t</div>\n\t\t</div>\n\t\t'),Ys(" Keep Source Address "),"custom"==y.value.value?(Os(),Ms("div",JT,[Vs("div",YT,[Vs("label",ZT,[Vs("b",null,te(l("nedge.page_repeater_config.keep_src_address")),1)]),Vs("label",XT,[wn(Vs("input",{type:"checkbox","onUpdate:modelValue":t[3]||(t[3]=e=>u.value=e)},null,512),[[Mo,u.value]])])])])):Ys("v-if",!0),Vs("div",QT,[Vs("label",eO,[Vs("b",null,te(l("nedge.page_repeater_config.interfaces")),1)]),Vs("div",tO,[Hs(l_,{ref_key:"interfaces_search",ref:c,selected_options:i.value,"onUpdate:selected_options":t[4]||(t[4]=e=>i.value=e),options:k.value,multiple:!0,onSelect_option:N,onUnselect_option:C,onChange_selected_options:S},null,8,["selected_options","options"])])])])),footer:vl((()=>[Vs("button",{type:"button",disabled:d.value,onClick:P,class:"btn btn-primary"},te($.value),9,aO)])),_:1},512))}};lp("\ninput[data-v-5b3dc248]:invalid {\n  border-color: #ff0000;\n}\n"),lO.__scopeId="data-v-5b3dc248",lO.__file="http_src/vue/modal-nedge-add-repeater-config.vue";const nO={class:"mb-2"},sO=Vs("br",null,null,-1),iO={id:"aggregated_live_flows"};var oO={__name:"page-nedge-repeaters-config",props:{url:String,ifid:Number,csrf:String,columns_config:Array},setup(e){const t=e,a=e=>i18n(e),l=ma({}),n=ma(null),s=ma(null);function i(e){r(e,`${http_prefix}/lua/rest/v2/edit/nedge/forwarder.lua`)}function o(e){r(e,`${http_prefix}/lua/rest/v2/add/nedge/forwarder.lua`)}function r(e,a){let l=JSON.stringify({...e,csrf:t.csrf});b.http_request(a,{method:"post",headers:{"Content-Type":"application/json"},body:l}),u()}dn((async()=>{!function(){const e=[];let n={ifid:x.get_url_entry("ifid")||t.ifid},i=x.obj_to_url_params(n);e.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,t,a,l){u()}},{text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(){s.value.show(null)}});let o={table_buttons:e,data_url:`${t.url}?${i}`,enable_search:!1},r=[{columnName:a("nedge.page_repeater_config.type"),targets:0,name:"type",data:"type",className:"text-nowrap text-left",responsivePriority:1,render:function(e,t,l){return a("custom"==e?"nedge.page_repeater_config.modal_repeater_config.custom":"nedge.page_repeater_config.modal_repeater_config.mdns")}},{columnName:a("nedge.page_repeater_config.ip"),targets:0,name:"ip",data:"ip",className:"text-nowrap text-left",responsivePriority:1},{columnName:a("nedge.page_repeater_config.port"),targets:0,name:"port",data:"port",className:"text-nowrap text-left",responsivePriority:1},{columnName:a("nedge.page_repeater_config.interfaces"),targets:0,name:"interfaces",data:"details",className:"text-nowrap text-left",responsivePriority:1,render:function(e,t,a){return function(e,t){return e.split(",").join(", ")}(e)}}].map((e=>e));r.push({columnName:a("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,render:function(e,t,a){return c(a)}}),o.columns_config=r,l.value=o}()}));const c=function(e){let a={handlerId:"delete_host",onClick:()=>{!function(e){const a=`${http_prefix}/lua/rest/v2/delete/nedge/forwarder.lua`;let l={"Content-Type":"application/json"},n=JSON.stringify({repeater_id:e.repeater_id,csrf:t.csrf});b.http_request(a,{method:"post",headers:l,body:n}),u()}(e)}},l={handlerId:"edit_rule",onClick:()=>{s.value.show(e)}};return DataTableUtils.createActionButtons([{class:"pointer",handler:l,handlerId:"edit_rule",icon:"fa-edit",title:i18n("edit")},{class:"pointer",handler:a,handlerId:"delete_rule",icon:"fa-trash",title:i18n("delete")}])};function u(){setTimeout((()=>{x.reload_url()}),500)}return(e,t)=>(Os(),Ms(Ss,null,[Vs("div",nO,[Vs("h2",null,te(a("nedge.repeaters_config_title")),1),sO]),Vs("div",iO,[Hs(kw,{ref_key:"table_rules",ref:n,table_buttons:l.value.table_buttons,columns_config:l.value.columns_config,data_url:l.value.data_url,filter_buttons:l.value.table_filters,enable_search:l.value.enable_search,table_config:l.value.table_config},null,8,["table_buttons","columns_config","data_url","filter_buttons","enable_search","table_config"])]),Hs(lO,{ref_key:"modal_add_repeater_config",ref:s,onAdd:o,onEdit:i},null,512)],64))},__file:"http_src/vue/page-nedge-repeaters-config.vue"};const rO={key:0,class:"text-left"};var cO={__name:"modal-delete-inactive-host",props:{context:Object},emits:["delete_host"],setup(e,{expose:t,emit:a}){const l=e,n=e=>i18n(e),s=ma(null),i=ma(""),o=ma(""),r=ma(!1),c=ma(!1),u=ma({});async function d(){const e=`${http_prefix}/lua/rest/v2/delete/host/inactive_host.lua`,t={csrf:l.context.csrf,ifid:l.context.ifid,serial_key:u.value};const n=await b.http_request(e,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(n){c.value=!1,r.value=!0;let e="";n.deleted_hosts>1&&(e=". Number hosts deleted: "+n.deleted_hosts),o.value=i18n("succ_del_inactive_hosts")+e,a("delete_host"),_()}else c.value=!0,r.value=!0,o.value=i18n("err_del_inactive_hosts")}_n((()=>{}));const _=()=>{setTimeout((()=>{s.value.close()}),3e3)};return t({show:(e,t)=>{u.value=e,i.value=t,s.value.show()},close:_}),(e,t)=>(Os(),Ls(np,{ref_key:"modal_id",ref:s},{title:vl((()=>[Ks(te(n("delete_inactive_host_title")),1)])),body:vl((()=>[Ks(te(i.value)+" ",1),r.value?(Os(),Ms("div",rO,[Vs("p",{class:K(["text-sm-start fs-6 fw-medium pt-3 m-0",c.value?"text-danger":"text-success"])},[Vs("small",null,te(o.value),1)],2)])):Ys("v-if",!0)])),footer:vl((()=>[Vs("button",{type:"button",onClick:d,class:"btn btn-primary"},te(n("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-inactive-host.vue"};const uO={class:"mt-3",style:{"max-width":"8rem"}},dO={key:0,class:"text-left"};var _O={__name:"modal-delete-inactive-host-epoch",props:{context:Object},emits:["delete_host"],setup(e,{expose:t,emit:a}){const l=e,n=e=>i18n(e);ma("csv");const s=ma(),i=ma(""),o=ma(!1),r=ma(!1),c=[{label:n("show_alerts.presets.5_min"),value:300},{label:n("show_alerts.presets.30_min"),value:1800},{label:n("show_alerts.presets.hour"),value:3600},{label:n("show_alerts.presets.2_hours"),value:7200},{label:n("show_alerts.presets.6_hours"),value:21600},{label:n("show_alerts.presets.12_hours"),value:43200},{label:n("show_alerts.presets.day"),value:86400},{label:n("show_alerts.presets.week"),value:604800}],u=ma();function d(e){s.value=e}async function _(){const e=`${http_prefix}/lua/rest/v2/delete/host/inactive_host.lua`,t={csrf:l.context.csrf,ifid:l.context.ifid,serial_key:s.value.value};const n=await b.http_request(e,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(n){r.value=!1,o.value=!0;let e="";n.deleted_hosts>1&&(e=". Number hosts deleted: "+n.deleted_hosts),i.value=i18n("succ_del_inactive_hosts")+e,a("delete_host"),p()}else r.value=!0,o.value=!0,i.value=i18n("err_del_inactive_hosts")}_n((()=>{s.value=c[0]}));const p=()=>{setTimeout((()=>{u.value.close()}),3e3)};return t({show:()=>{u.value.show()},close:p}),(e,t)=>(Os(),Ls(np,{ref_key:"modal_id",ref:u},{title:vl((()=>[Ks(te(n("delete")),1)])),body:vl((()=>[Ks(te(n("delete_since"))+" ",1),Vs("div",uO,[Hs(l_,{selected_option:s.value,"onUpdate:selected_option":t[0]||(t[0]=e=>s.value=e),options:c,onSelect_option:d},null,8,["selected_option"])]),o.value?(Os(),Ms("div",dO,[Vs("p",{class:K(["text-sm-start fs-6 fw-medium pt-3 m-0",r.value?"text-danger":"text-success"])},[Vs("small",null,te(i.value),1)],2)])):Ys("v-if",!0)])),footer:vl((()=>[Vs("button",{type:"button",onClick:_,class:"btn btn-primary"},te(n("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-inactive-host-epoch.vue"};const pO={class:"mt-3",style:{"max-width":"8rem"}};var fO={__name:"modal-download-inactive-host",props:{context:Object},emits:["download"],setup(e,{expose:t,emit:a}){const l=e=>i18n(e);ma("csv");const n=ma(),s=[{label:l("csv"),value:"csv",param:"csv"},{label:l("json"),value:"json",param:"json"}],i=ma();function o(e){n.value=e}async function r(){let e=ntopng_url_manager.get_url_object(window.location.search);e.download=!0,e.format=n.value.value;const t=`${http_prefix}/lua/rest/v2/get/host/inactive_list.lua?`+ntopng_url_manager.obj_to_url_params(e);b.download_URI(t,"inactive_hosts."+n.value.value),a("download"),c()}_n((()=>{n.value=s[0]}));const c=()=>{i.value.close()};return t({show:()=>{i.value.show()},close:c}),(e,t)=>(Os(),Ls(np,{ref_key:"modal_id",ref:i},{title:vl((()=>[Ks(te(l("download")),1)])),body:vl((()=>[Ks(te(l("download_format"))+" ",1),Vs("div",pO,[Hs(l_,{selected_option:n.value,"onUpdate:selected_option":t[0]||(t[0]=e=>n.value=e),options:s,onSelect_option:o},null,8,["selected_option"])])])),footer:vl((()=>[Vs("button",{type:"button",onClick:r,class:"btn btn-primary"},te(l("download")),1)])),_:1},512))},__file:"http_src/vue/modal-download-inactive-host.vue"};const mO={class:"row"},vO={class:"col-md-12 col-lg-12"},hO={class:"card card-shadow"},gO={class:"card-body"},bO={key:"1",class:"row mb-4 mt-4",id:"host_details_traffic"},yO={class:"col-4"},wO={class:"widget-name"},xO=["title"],kO=["onClick","title"],$O={class:"card-footer mt-3"},SO=Vs("i",{class:"fas fa-trash"},null,-1),NO=Vs("i",{class:"fas fa-trash"},null,-1),CO=[Vs("i",{class:"fas fa-download"},null,-1)];var EO={__name:"page-inactive-hosts",props:{ifid:Number,csrf:String,show_historical:Boolean},setup(e){const t=e,a=e=>i18n(e),l=ma("inactive_hosts");ma(a("local_hosts_only"));const n=ma([]),s=ma([]),i=ma(),o=ma(),r=ma(),c=ma(),u=ma(),d=ma(),_=ma(),p=ma(!1),f=ma();ma();const m="change_applications_tab_event",v=ma({csrf:t.csrf,ifid:t.ifid}),h=[{ref:u,title:i18n("active_inactive"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/inactive/active_inactive.lua`,id:"active_inactive_distro"},{ref:d,title:i18n("inactivity_period"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/inactive/inactivity_period.lua`,id:"inactivity_period"},{ref:_,title:i18n("manufacturer"),type:ntopChartApex.typeChart.DONUT,url:`${http_prefix}/lua/rest/v2/get/host/inactive/inactive_manufacturer.lua`,id:"inactive_manufacturer"}],g=ma([{title:i18n("table_view"),active:0==p.value,id:"table"},{title:i18n("chart_view"),active:1==p.value,id:"chart"}]);_n((async()=>{ntopng_events_manager.on_custom_event("change_applications_tab_event",m,(e=>{x.set_key_to_url("view",e.id)})),async function(e){n.value=await w("overview"),b()}()}));function b(){n.value.forEach(((e,t)=>{null==e.basic_label&&(e.basic_label=e.label);const a=x.get_url_entry(e.id);null!=a?e.options.forEach((t=>{t.value.toString()===a&&(e.label=`${e.basic_label}: ${t.label||t.value}`)})):e.label=`${e.basic_label}: ${e.options[0].label||e.options[0].value}`}))}async function y(e,t){if(e.show_spinner=!0,await Ja(),0==e.data_loaded){let a=await w(e.id);e.options=a.find((t=>t.id==e.id)).options,await Ja(),s.value[t].load_menu()}e.show_spinner=!1}async function w(e){const t=x.get_url_params(),a=`${http_prefix}/lua/rest/v2/get/host/inactive_filters.lua?action=${e}&${t}`;return(await ntopng_utility.http_request(a)).map((t=>({id:t.action||t.name,label:t.label,title:t.tooltip,data_loaded:"overview"!=e,options:t.value,hidden:1==t.value.length})))}function k(){i.value.refresh_table()}function $(e){p.value=!p.value,g.value.forEach((e=>{e.active=!1,("table"==e.id&&0==p.value||"chart"==e.id&&1==p.value)&&(e.active=!0)})),ntopng_events_manager.emit_custom_event(m,e)}const S=()=>x.get_url_object();function N(e){let t={click_button_historical_flows:O,click_button_delete:C};null!=t[e.event_id]&&t[e.event_id](e)}function C(e){const t=e.row.serial_key;r.value.show(t,i18n("delete_inactive_host",{host:e.row.host.ip_address.value}))}function E(){r.value.show("all",i18n("delete_all_inactive_hosts"))}function A(){c.value.show()}function T(){o.value.show()}function O(e){const t=e.row;let a="";0!=t.vlan&&(a=`@${t.vlan}`),window.location.href=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${t.epoch_begin-100}&epoch_end=${t.epoch_end+100}&ip=${t.ip_address.value||t.ip_address}${a};eq&mac=${t.mac_address.value||t.mac_address};eq`}const P=e=>{let a={mac_address:(e,t)=>{let a=e;return null!=e&&null!=e.url&&null!=e.name&&null!=e.value&&(a=`<a href='${http_prefix}${e.url}' title='${e.value}'>${e.name}</a>`),a},network:(e,t)=>{let a=e;return null!=e.url&&null!=e.name&&null!=e.value&&(a=`<a href='${http_prefix}${e.url}' title='${e.value}'>${e.name}</a>`),a},host:(e,t)=>{let a="";const l=e.ip_address;if(a=`<a href='${http_prefix}${l.url}' title='${l.value}'>${l.name}</a>`,null!=e.vlan&&""!=e.vlan.name){const t=e.vlan;a=null!=t.url?`${a}@<a href='${http_prefix}${t.url||"#"}' title='${t.value}'>${t.name}</a>`:`${a}@${t.name}`}return`${a} ${e.device_type}`}};return e.forEach((e=>{if(e.render_func=a[e.data_field],"actions"==e.id){const a={historical_data:t.show_historical};e.button_def_array.forEach((e=>{a[e.id]||e.class.push("disabled")}))}})),e};return(t,u)=>(Os(),Ms(Ss,null,[Vs("div",mO,[Vs("div",vO,[Vs("div",hO,[Vs("div",gO,[Hs(Qw,{ref_key:"inactive_hosts_tab_list",ref:f,id:"inactive_hosts_tab_list",tab_list:g.value,onClick_item:$},null,8,["tab_list"]),Ys('\n          <div class="card card-shadow">\n            <div class="card-body p-1">\n              <transition name="component-fade" mode="out-in">\n                <div key="1" v-if="show_charts == true" class="row mb-4 mt-4" id="host_details_traffic">\n                  \n                </div>\n              </transition>\n            </div>\n          </div>\n          <div class="text-center" style="cursor: pointer;" @click="change_show_charts">\n            <i v-if="show_charts == false" class="fa-solid fa-angles-down"></i>\n            <i v-else class="fa-solid fa-angles-up"></i>\n          </div>\n          '),Vs("div",null,[1==p.value?(Os(),Ms("div",bO,[1==p.value?(Os(),Ms(Ss,{key:0},An(h,(e=>Vs("div",yO,[Vs("h3",wO,te(e.title),1),Hs(C_,{ref_for:!0,ref:e.ref,id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!0},null,8,["id","chart_type","base_url_request"])]))),64)):Ys("v-if",!0)])):(Os(),Ls(rm,{key:1,ref_key:"table_inactive_hosts",ref:i,table_id:l.value,csrf:e.csrf,f_map_columns:P,get_extra_params_obj:S,onCustom_event:N},{custom_header:vl((()=>[(Os(!0),Ms(Ss,null,An(n.value,((e,t)=>{return Os(),Ls(Rd,{f_on_open:(a=e,l=t,e=>{y(a,l)}),ref_for:!0,ref:e=>{s.value[t]=e},hidden:e.hidden},{title:vl((()=>[Hs(cm,{show:e.show_spinner,size:"1rem",class:"me-1"},null,8,["show"]),Vs("a",{class:"ntopng-truncate",title:e.title},te(e.label),9,xO)])),menu:vl((()=>[(Os(!0),Ms(Ss,null,An(e.options,(a=>(Os(),Ms("a",{style:{cursor:"pointer",display:"block"},onClick:l=>function(e,t,a,l){t.stopPropagation(),x.set_key_to_url(e.key,`${e.value}`),b(),i.value.refresh_table(),1==p.value&&h.forEach((e=>{e.ref.value[0].update_chart()})),y(a,l)}(a,l,e,t),class:"ntopng-truncate tag-filter",title:a.value},[null==a.count?(Os(),Ms(Ss,{key:0},[Ks(te(a.label),1)],64)):(Os(),Ms(Ss,{key:1},[Ks(te(a.label+" ("+a.count+")"),1)],64))],8,kO)))),256))])),_:2},1032,["f_on_open","hidden"]);var a,l})),256)),Ys(" Dropdown filters ")])),_:1},8,["table_id","csrf"]))]),Vs("div",$O,[Vs("button",{type:"button",ref:"delete_all",onClick:E,class:"btn btn-danger me-1"},[SO,Ks(" "+te(a("delete_all_entries")),1)],512),Vs("button",{type:"button",ref:"delete_older",onClick:A,class:"btn btn-danger me-1"},[NO,Ks(" "+te(a("delete_older")),1)],512),Vs("button",{type:"button",ref:"download",onClick:T,class:"btn btn-primary me-1"},CO,512)])])])])]),Hs(cO,{ref_key:"modal_delete",ref:r,context:v.value,onDelete_host:k},null,8,["context"]),Hs(_O,{ref_key:"modal_delete_older",ref:c,context:v.value,onDelete_host:k},null,8,["context"]),Hs(fO,{ref_key:"modal_download",ref:o,context:v.value},null,8,["context"])],64))},__file:"http_src/vue/page-inactive-hosts.vue"};const AO={class:"row"},TO={class:"col-md-12 col-lg-12"},OO={class:"mt-4 card card-shadow"},PO={class:"card-body"};var UO={__name:"page-inactive-host-details",props:{ifid:Number,csrf:String},setup(e){const t=ma("inactive_host_details"),a=ma([]),l=function(e){return e||""},n=function(e){let t=e.name||"";return e.url&&""!=e.url&&(t=`<a href="${http_prefix}${e.url}">${t}</>`),t};return _n((async()=>{const e=ntopng_url_manager.get_url_object(),t=ntopng_url_manager.obj_to_url_params(e),l=await ntopng_utility.http_request(`${http_prefix}/lua/rest/v2/get/host/inactive_host.lua?${t}`);a.value=l.host_info,$("#navbar_title").html("<i class='fas fa-laptop'></i> "+(e=>i18n(e))("host_details.host")+": "+l.host_name)})),(e,s)=>(Os(),Ms("div",AO,[Vs("div",TO,[Vs("div",OO,[Vs("div",PO,[Hs(Pw,{horizontal:!0,id:t.value,rows:a.value,print_html_title:l,print_html_row:n},null,8,["id","rows"])])])])]))},__file:"http_src/vue/page-inactive-host-details.vue"};const IO={class:"table table-bordered table-striped"};var jO={__name:"page-flowdevice-config",props:{ifid:Number,csrf:String,flowdev_ip:String},setup(e){const t=e,a=e=>i18n(e),l=ma(null),n=ma(""),s=ma(!0),i=`${http_prefix}/lua/pro/rest/v2/get/flowdevice/alias.lua?flowdev_ip=${t.flowdev_ip}&ifid=${t.ifid}`,o=`${http_prefix}/lua/pro/rest/v2/set/flowdevice/alias.lua`;async function r(){const e=await ntopng_utility.http_request(`${i}`,{method:"get"});l.value.value=e||t.flowdev_ip,n.value=l.value.value}_n((async()=>{r()}));const c=async function(){const e={csrf:t.csrf,flowdev_ip:t.flowdev_ip,alias:l.value.value,ifid:t.ifid};await ntopng_utility.http_request(o,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}),r(),s.value=!0},u=function(){n.value==l.value.value?s.value=!0:s.value=!1};return(e,t)=>(Os(),Ms(Ss,null,[Vs("table",IO,[Vs("tr",null,[Vs("th",null,te(a("flowdev_alias")),1),Vs("td",null,[Vs("input",{type:"text",ref_key:"custom_name",ref:l,class:"form-control",onInput:u},null,544)])])]),Vs("button",{class:K(["btn btn-primary",[s.value?"disabled":""]]),onClick:c,id:"save"},te(a("save_settings")),3)],64))},__file:"http_src/vue/page-flowdevice-config.vue"};const MO={class:"table table-striped table-bordered col-sm-12"},LO={class:"col-3"},FO={class:"col-9"},RO={class:"d-flex ps-0"},DO={class:"col-3"},zO={class:"col-9"},qO={class:"d-flex ps-0"},BO={class:"d-flex align-items-center me-2"},VO={class:"col-3"},HO={class:"col-9"},GO={class:"d-flex ps-0"},WO={class:"d-flex align-items-center me-2"};var KO={__name:"page-flowdevice-interface-config",props:{ifid:String,csrf:String,device_ip:String,port_index:String},setup(e){const t=e,a=1e9,l=e=>i18n(e),n=ma(null),s=ma(""),i=ma(null),o=ma(""),r=ma(null),c=ma(""),u=ma(!0),d=`${http_prefix}/lua/pro/rest/v2/get/flowdevice/interface/config.lua?device_ip=${t.device_ip}&port_index=${t.port_index}&ifid=${t.ifid}`,_=`${http_prefix}/lua/pro/rest/v2/set/flowdevice/interface/config.lua`;async function p(){const e=await ntopng_utility.http_request(`${d}`,{method:"get"});n.value.value=e.alias,s.value=n.value.value,i.value.value=e.uplink_speed/a,o.value=i.value.value,r.value.value=e.downlink_speed/a,c.value=r.value.value}_n((async()=>{p()}));const f=async function(){const e={ifid:t.ifid,csrf:t.csrf,device_ip:t.device_ip,port_index:t.port_index,alias:n.value.value,uplink_speed:Number(i.value.value)*a,downlink_speed:Number(r.value.value)*a};await ntopng_utility.http_request(_,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}),p(),u.value=!0},m=function(){s.value==n.value.value&&o.value==i.value.value&&c.value==r.value.value?u.value=!0:u.value=!1};return(e,t)=>(Os(),Ms(Ss,null,[Vs("table",MO,[Vs("tbody",null,[Vs("tr",null,[Vs("th",LO,te(l("interface_alias")),1),Vs("td",FO,[Vs("div",RO,[Vs("input",{type:"text",ref_key:"custom_name",ref:n,class:"form-control",style:{width:"16rem"},onInput:m},null,544)])])]),Vs("tr",null,[Vs("th",DO,te(l("interface_uplink_speed")),1),Vs("td",zO,[Vs("div",qO,[Vs("label",BO,te(l("gbit")),1),Vs("input",{ref_key:"uplink_speed",ref:i,class:"form-control text-end",type:"number",min:"0",step:"0.01",style:{width:"8rem"},onInput:m},null,544)])])]),Vs("tr",null,[Vs("th",VO,te(l("interface_downlink_speed")),1),Vs("td",HO,[Vs("div",GO,[Vs("label",WO,te(l("gbit")),1),Vs("input",{ref_key:"downlink_speed",ref:r,class:"form-control text-end",type:"number",min:"0",step:"0.001",style:{width:"8rem"},onInput:m},null,544)])])])])]),Vs("button",{class:K(["btn btn-primary d-flex ms-auto",[u.value?"disabled":""]]),onClick:f,id:"save"},te(l("save_settings")),3)],64))},__file:"http_src/vue/page-flowdevice-interface-config.vue"},JO={__name:"modal-delete-scan-confirm",props:{body:String,title:String},emits:["delete","delete_all"],setup(e,{expose:t,emit:a}){const l=ma(null),n=ma(""),s=ma(""),i=ma(""),o=ma(!0),r=[i18n("note_scan_host")],c=()=>{"delete_all"==i.value?a("delete_all"):"delete_single_row"==i.value||"delete_single_report"==i.value?a("delete"):"scan_all_rows"==i.value?a("scan_all_rows"):"scan_row"==i.value&&a("scan_row"),u()},u=()=>{l.value.close()};t({show:(e,t)=>{o.value=!1,i.value=e,"delete_all"==e?(s.value=i18n("delete_all_entries"),n.value=t):"delete_single_row"==e?(s.value=i18n("delete_vs_host_title"),n.value=t):"scan_all_rows"==e?(s.value=i18n("scan_all_hosts_title"),n.value=t):"scan_row"==e?(o.value=!0,s.value=i18n("scan_host_title"),n.value=t):"delete_single_report"==e&&(s.value=i18n("hosts_stats.page_scan_hosts.reports_page.delete_title"),n.value=i18n("hosts_stats.page_scan_hosts.reports_page.delete_description")),l.value.show()},close:u}),_n((()=>{}));const d=e=>i18n(e);return(e,t)=>(Os(),Ls(np,{onShowed:t[0]||(t[0]=e=>{}),ref_key:"modal_id",ref:l},{title:vl((()=>[Ks(te(s.value),1)])),body:vl((()=>[Ks(te(n.value)+" ",1),o.value?(Os(),Ls(fm,{key:0,note_list:r})):Ys("v-if",!0)])),footer:vl((()=>["delete_all"==i.value||"delete_single_row"==i.value||"delete_single_report"==i.value?(Os(),Ms("button",{key:0,type:"button",onClick:c,class:"btn btn-danger"},te(d("delete")),1)):(Os(),Ms("button",{key:1,type:"button",onClick:c,class:"btn btn-primary"},te(d("hosts_stats.page_scan_hosts.schedule_scan")),1))])),_:1},512))},__file:"http_src/vue/modal-delete-scan-confirm.vue"};const YO={class:"form-group ms-2 me-2 mt-3 row"},ZO={class:"col-form-label col-sm-4"},XO={class:"col-8"};var QO={__name:"modal-update-periodicity-scan",props:{title:String},emits:["update"],setup(e,{expose:t,emit:a}){const l=ma(null),n=ma([{id:"disabled",label:i18n("hosts_stats.page_scan_hosts.disabled")},{id:"1day",label:i18n("hosts_stats.page_scan_hosts.every_night")},{id:"1week",label:i18n("hosts_stats.page_scan_hosts.every_week")}]);let s=ma(n.value[0]);const i=()=>{a("update",{scan_frequency:s.value.id}),o()},o=()=>{l.value.close()};t({show:e=>{l.value.show()},close:o}),_n((()=>{}));const r=e=>i18n(e);return(t,a)=>(Os(),Ls(np,{onShowed:a[1]||(a[1]=e=>{}),ref_key:"modal_id",ref:l},{title:vl((()=>[Ks(te(e.title),1)])),body:vl((()=>[Vs("div",YO,[Vs("label",ZO,[Vs("b",null,te(r("hosts_stats.page_scan_hosts.automatic_scan")),1)]),Vs("div",XO,[Hs(l_,{selected_option:ya(s),"onUpdate:selected_option":a[0]||(a[0]=e=>fa(s)?s.value=e:s=e),options:n.value},null,8,["selected_option","options"])])])])),footer:vl((()=>[Vs("button",{type:"button",onClick:i,class:"btn btn-secondary me-4"},te(r("hosts_stats.page_scan_hosts.update_all")),1)])),_:1},512))},__file:"http_src/vue/modal-update-periodicity-scan.vue"};const eP={class:"form-group ms-2 me-2 mt-3 row"},tP={class:"col-form-label col-sm-2"},aP={class:"col-sm-8"},lP=["disabled","placeholder"],nP={class:"col-sm-2"},sP={class:"form-group ms-2 me-2 mt-3 row"},iP={class:"col-form-label col-sm-2"},oP={class:"col-sm-10"},rP=["placeholder"],cP={class:"form-group ms-2 me-2 mt-3 row"},uP={class:"col-form-label col-sm-2"},dP={class:"col-10"},_P={key:0,class:"form-group ms-2 me-2 mt-3 row"},pP={class:"col-form-label col-sm-2"},fP={class:"col-10"},mP={key:1,class:"form-group ms-2 me-2 mt-3 row"},vP={class:"col-form-label col-sm-2"},hP={class:"col-10"},gP={class:"mt-4"},bP={key:0,class:"me-auto text-danger d-inline"},yP=["disabled"],wP=["disabled"];var xP={__name:"modal-add-vs-host",props:{context:Object},emits:["add","edit"],setup(e,{expose:t,emit:l}){const n=e=>i18n(e),s=ma(i18n("hosts_stats.page_scan_hosts.add_host")),i=ma(i18n("hosts_stats.page_scan_hosts.host_not_resolved")),o=i18n("hosts_stats.page_scan_hosts.host_placeholder"),r=i18n("hosts_stats.page_scan_hosts.ports_placeholder"),c=[n("hosts_stats.page_scan_hosts.notes.note_1"),n("hosts_stats.page_scan_hosts.notes.note_2"),n("hosts_stats.page_scan_hosts.notes.note_3"),n("hosts_stats.page_scan_hosts.notes.note_3_1")],u=[n("hosts_stats.page_scan_hosts.notes.note_1"),n("hosts_stats.page_scan_hosts.notes.note_2"),n("hosts_stats.page_scan_hosts.notes.note_3"),n("hosts_stats.page_scan_hosts.notes.note_3_1"),n("hosts_stats.page_scan_hosts.notes.note_4")],d=ma(null),_=ma({}),p=ma([]),f=ma(""),m=ma(""),v=ma(!1),h=ma(!1),g=ma([]),b=ma([]),y=ma(null),w=ma(null),x=ma(null),k=ma(!1),$=ma(null),S=ma(!0),N=ma(!0),C=ma(!0),E=ma(!1),A=ma(!1),T=ma([{id:"disabled",label:i18n("hosts_stats.page_scan_hosts.disabled")},{id:"1day",label:i18n("hosts_stats.page_scan_hosts.every_night")},{id:"1week",label:i18n("hosts_stats.page_scan_hosts.every_week")}]),O="32",P=ma([{id:"24",label:"/24"},{id:"32",label:"/32"},{id:"128",label:"/128"}]),U=ma(P.value[1]),I=ma(T.value[0]),j=ma(!1),M=ma(!1),L=e=>{p.value=e,C.value=p.value.length>0},F=e=>{p.value=p.value.filter((t=>t.id!=e.id)),C.value=p.value.length>0},R=()=>{const e=yp.validateIPv4(w.value),t=yp.validateIPv6(w.value),a=yp.validateHostName(w.value);"ipv4_netscan"==_.value.id?(e&&(E.value=!0,C.value=p.value&&p.value.length>0),C.value=!0):e?(E.value=!0,w.value.endsWith(0)||(U.value=P.value.find((e=>e.id==O)))):t?(U.value=P.value[2],E.value=!0,U.value=P.value.find((e=>"128"==e.id))):a?(E.value=!0,U.value=P.value.find((e=>e.id==O))):E.value=!1},D=()=>{yp.validatePortRange(x.value)||yp.validateCommaSeparatedPortList(x.value)||YS.isEmptyOrNull(x.value)?S.value=!0:S.value=!1};const z=()=>{q(!0)},q=async e=>{const t=x.value,n=_.value.id,s=!0===e?"edit":"add",o=!0===e?m.value:null;let r=w.value,c=!0;v.value=!0,yp.validateIP(w.value)||(E.value=!1,r=await async function(e){const t=`${http_prefix}/lua/rest/v2/get/host/resolve_host_name.lua`,l=a.buildURL(t,{host:e});return await ntopng_utility.http_request(l)}(w.value),"no_success"===r&&(c=!1,i.value=w.value+" "+i18n("hosts_stats.page_scan_hosts.host_not_resolved"),j.value=!0,setTimeout((()=>{j.value=!1}),4e3)),E.value=!0);let u=[];p.value.forEach((e=>{u.push(e.id)}));const d=u.join(",");v.value=c,c&&l(s,{host:r,scan_type:n,scan_ports:t,cidr:U.value.id,scan_frequency:$?I.value.id:null,scan_id:o,discovered_host_scan_type:d})};return t({show:(e,t)=>{w.value="",x.value="",S.value=!0,N.value=!0,E.value=!1,v.value=!1,k.value=!1,_.value=g.value[0],p.value=[],U.value=P.value[1],m.value=null,h.value=!1,j.value=!1,A.value=!1,C.value=!A.value,s.value=i18n("hosts_stats.page_scan_hosts.add_host"),YS.isEmptyOrNull(e)||(s.value=i18n("hosts_stats.page_scan_hosts.edit_host_title"),(e=>{if(h.value=!0,w.value=e.host,x.value=e.ports,E.value=!0,S.value=!0,m.value=e.id,_.value=g.value.find((t=>t.id==e.scan_type)),null!=e.discovered_host_scan_type){const t=e.discovered_host_scan_type.split(",");let a,l=[];t.forEach((e=>{a=b.value.find((t=>t.id==e)),l.push(a)})),p.value=l}"ipv4_netscan"==_.value.id?U.value=P.value.find((e=>"24"==e.id)):yp.validateIPv4(e.host)?U.value=P.value.find((e=>e.id==O)):U.value=P.value.find((e=>"128"==e.id)),N.value=!0,$&&(I.value=T.value.find((t=>t.id==e.scan_frequency)))})(e)),YS.isEmptyOrNull(t)||(w.value=t,E.value=!0),d.value.show()},close:()=>{M.value=!1,d.value.close()},metricsLoaded:async(e,t,a)=>{const l=e.sort(((e,t)=>e.label.localeCompare(t.label)));y.value=t,g.value=l,b.value=l.filter((e=>"ipv4_netscan"!=e.id)),$.value=a,_.value=g.value[0]}}),(e,t)=>(Os(),Ls(np,{ref_key:"modal_id",ref:d},{title:vl((()=>[Ks(te(s.value),1)])),body:vl((()=>[Ys(" Target information, here an IP is put "),Vs("div",eP,[Vs("label",tP,[Vs("b",null,te(n("hosts_stats.page_scan_hosts.host_or_network")),1)]),Vs("div",aP,[wn(Vs("input",{"onUpdate:modelValue":t[0]||(t[0]=e=>w.value=e),onInput:R,disabled:h.value,class:"form-control",type:"text",placeholder:ya(o),required:""},null,40,lP),[[jo,w.value]])]),Vs("div",nP,[Hs(l_,{selected_option:U.value,"onUpdate:selected_option":t[1]||(t[1]=e=>U.value=e),disabled:h.value||A.value,options:P.value},null,8,["selected_option","disabled","options"])])]),Vs("div",sP,[Vs("label",iP,[Vs("b",null,te(n("hosts_stats.page_scan_hosts.ports")),1)]),Vs("div",oP,[wn(Vs("input",{"onUpdate:modelValue":t[2]||(t[2]=e=>x.value=e),onFocusout:D,class:K(["form-control",!0===f.value?"ntopng-hide-placeholder":""]),type:"text",placeholder:ya(r),required:""},null,42,rP),[[jo,x.value]])])]),Vs("div",cP,[Vs("label",uP,[Vs("b",null,te(n("hosts_stats.page_scan_hosts.scan_type")),1)]),Vs("div",dP,[Hs(l_,{selected_option:_.value,"onUpdate:selected_option":t[3]||(t[3]=e=>_.value=e),options:g.value,disabled:h.value,onSelect_option:t[4]||(t[4]=e=>{"ipv4_netscan"==_.value.id?(U.value=P.value.find((e=>"24"==e.id)),A.value=!0,C.value=!1):(A.value=!1,C.value=!0)})},null,8,["selected_option","options","disabled"])])]),"ipv4_netscan"==_.value.id?(Os(),Ms("div",_P,[Vs("label",pP,[Vs("b",null,te(n("hosts_stats.page_scan_hosts.host_discovered_scan_type")),1)]),Vs("div",fP,[Hs(l_,{selected_options:p.value,"onUpdate:selected_options":t[5]||(t[5]=e=>p.value=e),onChange_selected_options:L,onUnselect_option:F,options:b.value,multiple:!0},null,8,["selected_options","options"])])])):Ys("v-if",!0),1==$.value?(Os(),Ms("div",mP,[Vs("label",vP,[Vs("b",null,te(n("hosts_stats.page_scan_hosts.periodicity")),1)]),Vs("div",hP,[Hs(l_,{selected_option:I.value,"onUpdate:selected_option":t[6]||(t[6]=e=>I.value=e),options:T.value},null,8,["selected_option","options"])])])):Ys("v-if",!0),Vs("div",gP,[0==$.value?(Os(),Ls(fm,{key:0,note_list:c})):(Os(),Ls(fm,{key:1,note_list:u}))])])),footer:vl((()=>[j.value?(Os(),Ms("div",bP,te(i.value),1)):Ys("v-if",!0),Vs("div",null,[Hs(cm,{show:v.value,size:"1rem",class:"me-2"},null,8,["show"]),0==h.value?(Os(),Ms("button",{key:0,type:"button",onClick:q,class:"btn btn-primary",disabled:!(N.value&&E.value&&S.value&&C.value)},te(n("add")),9,yP)):(Os(),Ms("button",{key:1,type:"button",onClick:z,class:"btn btn-primary",disabled:!(N.value&&E.value&&S.value&&C.value)},te(n("apply")),9,wP))])])),_:1},512))},__file:"http_src/vue/modal-add-vs-host.vue"};const kP=(e,t)=>1==t.is_ok_last_scan&&null!=t.last_scan&&null!=t.last_scan.time?e:"",$P=(e,t)=>{let a="";if(1==t.is_ok_last_scan&&null!=t.last_scan&&null!=t.last_scan.time){const t=Number(e);let l="";null!=e&&(l=0==t?"green":t<3.9?"grey":t<7?"yellow":"red",0!=t&&(a=`<FONT COLOR=${l}>${e}`))}return a},SP=(e,t,a)=>{if(t&&a.is_down)return"";if(void 0!==e){let t=e;return t=i18n("hosts_stats.page_scan_hosts.scan_type_list."+e),t}},NP=(e,t)=>3==t.is_ok_last_scan?"":void 0!==e&&void 0!==e.time?e.time:void 0!==e?e:i18n("hosts_stats.page_scan_hosts.not_yet"),CP=(e,t)=>3==t.is_ok_last_scan?"":void 0!==t.last_scan&&void 0!==t.last_scan.duration?t.last_scan.duration:i18n("hosts_stats.page_scan_hosts.not_yet"),EP=e=>{let t="";return null==e||"disabled"==e?"":(t="1day"==e?i18n("hosts_stats.page_scan_hosts.daily"):i18n("hosts_stats.page_scan_hosts.weekly"),`<span class="badge bg-secondary" title="${t}">${t}</span>`)},AP=e=>{let t="";return 2==e?(t=i18n("hosts_stats.page_scan_hosts.scheduled"),`<span class="badge bg-dark" title="${t}">${t}</span>`):4==e?(t=i18n("hosts_stats.page_scan_hosts.scanning"),`<span class="badge bg-info" title="${t}">${t}</span>`):3==e||null==e?(t=i18n("hosts_stats.page_scan_hosts.not_scanned"),`<span class="badge bg-primary" title="${t}">${t}</span>`):1==e?(t=i18n("hosts_stats.page_scan_hosts.success"),`<span class="badge bg-success" title="${t}">${t}</span>`):0==e?(t=i18n("hosts_stats.page_scan_hosts.error"),`<span class="badge bg-danger" title="${t}">${t}</span>`):5==e?(t=i18n("hosts_stats.page_scan_hosts.failed"),`<span class="badge bg-warning" title="${t}">${t}</span>`):void 0},TP=e=>{let t="";return null!=e&&e.forEach((e=>{""==t?t=e:t+=`, ${e}`})),t},OP=(e,t,a)=>{let l=null;switch(e){case 4:l=` <span class="badge bg-secondary"><i class="fa-solid fa-ghost" title='${TP(t)}'></i></span></div>`;break;case 3:l=` <span class="badge bg-secondary"><i class="fa-solid fa-filter" title='${TP(a)}'></i></span>`}return l},PP=(e,t)=>{0==e&&0==t.udp_ports&&t.scan_type.contains("udp")&&(e=t.num_open_ports);let a="";if(null==e||e<=0)return a;if(1==t.is_ok_last_scan&&null!=t.last_scan&&null!=t.last_scan.time&&(a=`${e}`,t.host_in_mem)){const e=OP(t.udp_ports_case,t.udp_ports_unused,t.udp_filtered_ports);null!=e&&(a+=e)}return a},UP=(e,t)=>{0==e&&0==t.tcp_ports&&t.scan_type.contains("tcp")&&(e=t.num_open_ports);let a="";if(null==e||e<=0)return a;if(1==t.is_ok_last_scan&&null!=t.last_scan&&null!=t.last_scan.time&&(a=`${e}`,t.host_in_mem)){const e=OP(t.tcp_ports_case,t.tcp_ports_unused,t.tcp_ports_filtered);null!=e&&(a+=e)}return a},IP=(e,t,a,l)=>{let n=e.split(" ")[0].split("/")[0],s=((e,t,a,l)=>{let n="";return null!=a&&a.forEach((t=>{e==Number(t)&&(n="unused")})),""!=n||null!=l&&l.forEach((t=>{e==Number(t)&&(n="filtered")})),n})(Number(n),0,a,l),i=null;switch(s){case"unused":i=` &nbsp;<span class="badge bg-secondary" title='${i18n("hosts_stats.page_scan_hosts.unused_port")}'><i class="fa-solid fa-ghost"></i></span>`;break;case"filtered":i=` &nbsp;<span class="badge bg-primary" title='${i18n("hosts_stats.page_scan_hosts.filtered_port")}'><i class="fa-solid fa-filter"></i></span>`}return i},jP=(e,t,a,l)=>{let n={host:e,scan_type:t,scan_return_result:!0,page:"show_result",scan_date:a,epoch:l};return`${`${http_prefix}/lua/vulnerability_scan.lua`}?${ntopng_url_manager.obj_to_url_params(n)}`},MP=(e,t,a)=>{let l=e,n=5==t.is_ok_last_scan&&null!=t.is_down&&1==t.is_down;if((1==t.is_ok_last_scan||n)&&null!=t.last_scan&&null!=t.last_scan.time){let a=jP(e,t.scan_type,t.last_scan.time.replace(" ","_"),t.last_scan.epoch);"ipv4_netscan"==t.scan_type&&(e+="/24"),l=`<a href="${a}">${e}</a>`,n&&(l=`<a href="${a}">${e} <i class="fas fa-exclamation-triangle" style='color: #B94A48;'></i> </a>`)}return l},LP={class:"row"},FP={class:"col-md-12 col-lg-12"},RP={key:0,class:"alert alert-info alert-dismissable"},DP={class:"card card-shadow"},zP={class:"card-body"},qP={key:0,class:"alert alert-info alert-dismissable"},BP=Vs("span",{class:"spinner-border spinner-border-sm text-info me-1"},null,-1),VP={key:1,class:"alert alert-success alert-dismissable"},HP=Vs("span",{class:"text-success me-1"},null,-1),GP={key:2,class:"alert alert-danger alert-dismissable"},WP=Vs("span",{class:"text-danger me-1"},null,-1),KP={id:"hosts_to_scan"},JP=[Vs("i",{class:"fas fa-plus"},null,-1)],YP={class:"card-footer mt-3"},ZP=Vs("i",{class:"fas fa-trash"},null,-1),XP=Vs("i",{class:"fas fa-clock-rotate-left"},null,-1),QP={class:"card-footer"};var eU={__name:"page-vulnerability-scan",props:{context:Object},setup(e){const t=e,a=e=>i18n(e),l=[i18n("hosts_stats.page_scan_hosts.notes.generic_notes_1").replaceAll("${http_prefix}",`${http_prefix}`)],n=ma(i18n("scan_host_inserted")),s=ma(i18n("scan_host_already_inserted")),i=ma(""),o=ma(i18n("hosts_stats.page_scan_hosts.enable_clickhouse")),r=i18n("hosts_stats.page_scan_hosts.delete_host_title"),c=i18n("hosts_stats.page_scan_hosts.delete_host_description"),u=i18n("hosts_stats.page_scan_hosts.update_periodicity_title"),d=`${http_prefix}/lua/rest/v2/add/host/to_scan.lua`,_=`${http_prefix}/lua/rest/v2/edit/host/update_va_scan_period.lua`,p=`${http_prefix}/lua/rest/v2/delete/host/delete_host_to_scan.lua`,f=`${http_prefix}/lua/rest/v2/exec/host/schedule_vulnerability_scan.lua`,m=`${http_prefix}/lua/rest/v2/get/host/vulnerability_scan_type_list.lua`,v=`${http_prefix}/lua/vulnerability_scan.lua`,h=`${http_prefix}/lua/rest/v2/get/host/vulnerability_scan_result.lua`,g=`${http_prefix}/lua/rest/v2/get/host/vulnerability_scan_status.lua`,y=ma("hosts_to_scan"),w=ma(),k=ma(),$=ma(),S=ma(),N=ma(0),C=ma(null),E=ma({}),A=ma({}),T=ma(!1),O=ma(!1),P=ma(!1),U=ma(!1),I=ma(!1),j={csrf:t.context.csrf},M=ma({csrf:t.context.csrf,ifid:t.context.ifid,is_enterprise_l:t.context.is_enterprise_l});let L=[],F=null;function R(){null!=t.context.host&&""!=t.context.host?$.value.show(null,t.context.host):$.value.show()}function D(e){null!=e?w.value.refresh_table(e):w.value.refresh_table(!0)}dn((()=>{F=Promise.all([ie(),oe()])})),_n((async()=>{await F,await $.value.metricsLoaded(L,t.context.ifid,t.context.is_enterprise_l),null!=t.context.host&&$.value.show(null,t.context.host),P.value=!t.context.is_clickhouse_enabled,setInterval(Q,1e4)}));const z=()=>x.get_url_object();function q(e){let t={click_button_edit_host:J,click_button_delete:G,click_button_scan:W,click_button_download:me,click_button_show_result:ve};null!=t[e.event_id]&&t[e.event_id](e)}function B(e,t){return tN.sortByIP(e.host,t.host,1)}function V(e,t){let a=t[e.data.data_field];var l;return"duration"==e.id?a=void 0===t.last_scan?-1:t.last_scan.duration_epoch:"last_scan"==e.id?a=void 0===t.last_scan?0:t.last_scan.epoch:"is_ok_last_scan"==e.id?a=function(e,t){let a="";a=2==e?i18n("hosts_stats.page_scan_hosts.scheduled"):4==e?i18n("hosts_stats.page_scan_hosts.scanning"):3==e||null==e?i18n("hosts_stats.page_scan_hosts.not_scanned"):1==e?i18n("hosts_stats.page_scan_hosts.success"):5==e?i18n("hosts_stats.page_scan_hosts.failed"):i18n("hosts_stats.page_scan_hosts.error");return a+t.id}(a,t):"scan_frequency"==e.id?a="1day"==(l=a)?i18n("hosts_stats.page_scan_hosts.daily"):"1week"==l?i18n("hosts_stats.page_scan_hosts.weekly"):"":"max_score_cve"!=e.id&&"num_vulnerabilities_found"!=e.id&&"tcp_ports"!=e.id&&"udp_ports"!=e.id||1!=t.is_ok_last_scan&&5!=t.is_ok_last_scan&&(a=0),a}function H(e,t,a){if(null!=e){let l=V(e,t),n=V(e,a);if(l==n)return B(t,a);if("host"==e.id)return tN.sortByIP(l,n,e.sort);if("host_name"==e.id)return tN.sortByName(l,n,e.sort);if("num_vulnerabilities_found"==e.id){const t=0;return tN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("tcp_ports"==e.id||"udp_ports"==e.id){const t=0;return tN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("duration"==e.id){const t=-1;return tN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("last_scan"==e.id){const t=0;return tN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("is_ok_last_scan"==e.id)return tN.sortByName(l,n,e.sort);if("max_score_cve"==e.id){const t=0;return tN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}return e.id,tN.sortByName(l,n,e.sort)}return B(t,a)}function G(e){U.value=!1,I.value=!1,ne(),E.value=e.row,k.value.show("delete_single_row",i18n("delete_vs_host"))}function W(e){U.value=!1,I.value=!1,ne(),A.value=e.row;const t=`${i18n("scan_host")}`;k.value.show("scan_row",t)}function J(e){$.value.show(e.row)}function Y(){U.value=!1,I.value=!1,ne(),k.value.show("delete_all",i18n("delete_all_vs_hosts"))}async function Z(e){e.is_edit=!0,await le(e)}function X(){!0===U.value&&(U.value=!1),!0===I.value&&(I.value=!1)}function Q(){oe()}function ee(){N.value=w.value.get_rows_num()}const ae=e=>((e,t,a,l)=>{const n={download:!0,show_result:!0};let s={host:(e,t)=>MP(e,t),scan_type:(e,a)=>SP(e,a,t),last_scan:(e,t)=>NP(e,t),duration:(e,t)=>CP(e,t),scan_frequency:e=>EP(e),is_ok_last_scan:e=>AP(e),max_score_cve:(e,t)=>$P(e,t),tcp_ports:(e,t)=>UP(e,t),udp_ports:(e,t)=>PP(e,t),num_vulnerabilities_found:(e,t)=>kP(e,t)};return e.forEach((e=>{e.render_func=s[e.data_field],"actions"==e.id&&e.button_def_array.forEach((e=>{e.f_map_class=(t,a)=>(t=t.filter((e=>"link-disabled"!=e)),(3==a.is_ok_last_scan||null==a.is_ok_last_scan||null==a.last_scan||null!=a.last_scan&&null==a.last_scan.time)&&n[e.id]&&t.push("link-disabled"),t)}))})),e})(e,L,0,t.context.ifid),le=async function(e){const t=NtopUtils.buildURL(d,{...e}),a=await b.http_post_request(t,j);if($.value.close(),!0===a.rsp)null!=e.cidr?n.value=i18n("scan_host_updated").replace("%{host}",`${e.host}/${e.cidr}`):n.value=i18n("scan_host_updated").replace("%{host}",`${e.host}`),U.value=!0,I.value=!1,setTimeout(X,1e4),D(!1);else{null!=e.cidr?s.value=i18n("scan_host_already_inserted").replace("%{host}",`${e.host}/${e.cidr}`):s.value=i18n("scan_host_already_inserted").replace("%{host}",`${e.host}`);let t="";L.forEach((a=>{a.id==e.scan_type&&(t=a.label)})),s.value=i18n("scan_host_already_inserted").replace("%{scan_type}",`${t}`),I.value=!0,U.value=!1,setTimeout(X,1e4)}!0!==e.is_edit&&D(!1)},ne=function(e){null!=e&&0!=e&&(i.value=i18n("scan_in_progress").replace("total",`${e}`))},se=async function(e){const t=NtopUtils.buildURL(_,{...e});await b.http_post_request(t,j),U.value=!1,I.value=!1,ne(),D(!1)},ie=async function(){const e=NtopUtils.buildURL(m,{...j}),t=await b.http_request(e);L=t.rsp},oe=async function(){const e=NtopUtils.buildURL(g,{...j}),t=await b.http_request(e);U.value=!1,I.value=!1,ne(t.rsp.total_in_progress),null==C.value&&(C.value=t.rsp.total_in_progress);const a=0==t.rsp.total_in_progress&&C.value>0;C.value=t.rsp.total_in_progress,T.value=C.value>0&&!1===O.value,!0===T.value?setTimeout((function(){D(!0)}),2e3):a&&setTimeout((function(){D(!0)}),5e3)},re=function(){k.value.show("scan_all_rows",i18n("scan_all_hosts")),D(!1)},ce=function(){S.value.show()},ue=async function(){const e=A.value;await de(e.host,e.scan_type,e.ports,e.id),D(!0)},de=async function(e,t,a,l){const n=NtopUtils.buildURL(f,{host:e,scan_type:t,scan_single_host:!0,scan_ports:a,scan_id:l});await b.http_post_request(n,j)};async function _e(){const e=NtopUtils.buildURL(f,{scan_single_host:!1});await b.http_post_request(e,j),D(!1)}const pe=async function(){const e=E.value,t=NtopUtils.buildURL(p,{host:e.host,scan_type:e.scan_type,delete_all_scan_hosts:!1,scan_id:e.id});await b.http_post_request(t,j),D(!1)},fe=async function(){const e=NtopUtils.buildURL(p,{delete_all_scan_hosts:!0});await b.http_post_request(e,j),D(!1)};function me(e){const t={host:e.row.host,scan_type:e.row.scan_type,epoch:e.row.last_scan.epoch},a=x.obj_to_url_params(t),l=`${h}?${a}`;b.download_URI(l)}function ve(e){const t=e.row.host,a=e.row.last_scan.time.replace(" ","_"),l={host:t,scan_type:e.row.scan_type,scan_return_result:!0,page:"show_result",epoch:e.row.last_scan.epoch,scan_date:a},n=x.obj_to_url_params(l),s=`${v}?${n}`;x.go_to_url(s)}function he(e){O.value=e}return(e,d)=>(Os(),Ms(Ss,null,[Vs("div",LP,[Vs("div",FP,[P.value?(Os(),Ms("div",RP,[Vs("span",null,te(o.value),1)])):Ys("v-if",!0),Vs("div",DP,[Vs("div",zP,[T.value?(Os(),Ms("div",qP,[BP,Vs("span",null,te(i.value),1)])):Ys("v-if",!0),U.value?(Os(),Ms("div",VP,[HP,Vs("span",null,te(n.value),1)])):Ys("v-if",!0),I.value?(Os(),Ms("div",GP,[WP,Vs("span",null,te(s.value),1)])):Ys("v-if",!0),Vs("div",KP,[Hs(JO,{ref_key:"modal_delete_confirm",ref:k,title:ya(r),body:ya(c),onDelete:pe,onDelete_all:fe,onScan_row:ue,onScan_all_rows:_e},null,8,["title","body"]),Hs(QO,{ref_key:"modal_update_perioditicy_scan",ref:S,title:ya(u),onUpdate:se},null,8,["title"]),Hs(rm,{ref_key:"table_hosts_to_scan",ref:w,table_id:y.value,csrf:M.value.csrf,f_map_columns:ae,get_extra_params_obj:z,f_sort_rows:H,onCustom_event:q,onRows_loaded:ee},{custom_header:vl((()=>[Vs("button",{class:"btn btn-link",type:"button",ref:"add_host",onClick:R},JP,512)])),_:1},8,["table_id","csrf"])])]),Vs("div",YP,[Vs("button",{type:"button",ref:"delete_all",onClick:Y,class:K(["btn btn-danger me-1",{disabled:0==N.value}])},[ZP,Ks(" "+te(a("delete_all_entries")),1)],2),Vs("button",{type:"button",ref:"scan_all",onClick:re,class:K(["btn btn-primary me-1",{disabled:0==N.value}])},[XP,Ks(" "+te(a("hosts_stats.page_scan_hosts.schedule_all_scan")),1)],2),t.context.is_enterprise_l?(Os(),Ms("button",{key:0,type:"button",ref:"update_all",onClick:ce,class:K(["btn btn-secondary me-1",{disabled:0==N.value}])},te(a("hosts_stats.page_scan_hosts.update_periodicity_title")),3)):Ys("v-if",!0)]),Vs("div",QP,[Hs(fm,{note_list:l})])])])]),Hs(xP,{ref_key:"modal_add",ref:$,context:M.value,onAdd:le,onEdit:Z,onCloseModal:d[0]||(d[0]=e=>he(!1)),onOpenModal:d[1]||(d[1]=e=>he(!0)),onHidden:d[2]||(d[2]=e=>he(!1))},null,8,["context"])],64))},__file:"http_src/vue/page-vulnerability-scan.vue"};const tU={class:"row"},aU={class:"col-md-12 col-lg-12"},lU={class:"card card-shadow"},nU=["innerHTML"],sU=["innerHTML"];var iU={__name:"page-host-vs-result",props:{context:Object},setup(e){const t=e,a=`${http_prefix}/lua/rest/v2/get/host/vulnerability_scan_result.lua`;ma(null);const l=ma(!1),n=ma(""),s=ma(""),i=ma(""),o=ma("");return ma([]),dn((async()=>{await async function(e,r,c,u){l.value=!0;let d={host:e,scan_type:r,scan_return_result:!0,epoch:u},_=ntopng_url_manager.obj_to_url_params(d),p=`${a}?${_}`,f=await ntopng_utility.http_request(p);n.value=f.rsp,s.value=`<pre>${n.value}</pre>`,"ipv4_netscan"==r&&(e+="/24");const m="true"===t.context.is_in_mem||1==t.context.is_in_mem?`${e} <a href="${http_prefix}/lua/host_details.lua?host=${e}"><i class = "fas fa-laptop"></i></a>`:e;o.value=i18n("hosts_stats.page_scan_hosts.vs_result").replace("%{host}",m),null!=c&&(c=c.replaceAll("_"," ")),o.value=o.value.replace("%{date}",c),i.value=o.value,l.value=!1}(t.context.host,t.context.scan_type,t.context.date,t.context.epoch)})),(e,t)=>(Os(),Ms("div",tU,[Vs("div",aU,[Vs("div",lU,[Vs("h3",{class:"d-inline-block pt-3 ps-3",innerHTML:i.value},null,8,nU),l.value?(Os(),Ls(yf,{key:0})):Ys("v-if",!0),Vs("div",{class:K(["card-body",[l.value?"ntopng-gray-out":""]]),innerHTML:s.value},null,10,sU)])])]))},__file:"http_src/vue/page-host-vs-result.vue"};const oU={class:"row"},rU={class:"col-md-12 col-lg-12"},cU={class:"card card-shadow"},uU={class:"card-body"},dU={id:"open_ports"};var _U={__name:"page-open-ports",props:{context:Object},setup(e){const t=e,a=`${http_prefix}/lua/vulnerability_scan.lua`,l=ma("open_ports"),n=e=>e,s=ma();t.context.csrf;const i=ma({csrf:t.context.csrf,ifid:t.context.ifid,is_enterprise_l:t.context.is_enterprise_l}),o=()=>x.get_url_object();function r(e){let t={click_button_show_hosts:f};null!=t[e.event_id]&&t[e.event_id](e)}function c(e,t){let a={title_i18n:"port",data_field:"port",sortable:!0,class:["text-nowrap","text-end"]},l=e[a.data_field],n=t[a.data_field];return l=_(l),n=_(n),l-n}function u(e,t,a){if(null!=e){let l=t[e.data.data_field],n=a[e.data.data_field];return"port"==e.id?(l=_(l),n=_(n),1==e.sort?l-n:n-l):"count_host"==e.id||"cves"==e.id?(l=d(l),n=d(n),l==n?c(t,a):1==e.sort?l-n:n-l):("hosts"==e.id||(null!=l||(l=""),null!=n||(n="")),l==n?c(t,a):1==e.sort?l.localeCompare(n):n.localeCompare(l))}return c(t,a)}function d(e){let t=0;return""===e||null===e||NaN===e||void 0===e?t=0:(e=e.split(",").join(""),t=parseInt(e)),t}function _(e){return""!=e&&null!=e&&NaN!=e&&null!=e||(e=0),e=parseInt(e)}const p=e=>{let t={hosts:(e,t)=>{let l="";const n=e.split(", "),s=n.length;let i=0;for(;i<5&&i<s;){const e=n[i].split("|"),t=e[0],s=e[1],o=e[2].replace(" ","_"),r="true"===e[3],c=e[4];let u="";e.length>5&&(u=e[5]);let d={host:t,scan_type:s,scan_return_result:!0,page:"show_result",epoch:c,scan_date:o},_=x.obj_to_url_params(d),p=`${a}?${_}`;const f=""!=u?0==r?`${u}  <span class="badge bg-secondary">${i18n("ipv6")}</span>`:u:t;l+=""==l?`<a href="${p}">${f}</a>`:`, <a href="${p}">${f}</a>`,i++}return s>5&&(l+="..."),l}};return e.forEach((e=>{e.render_func=t[e.data_field]})),e};async function f(e){let t={port:e.row.port_number},l=x.obj_to_url_params(t),n=`${a}?${l}`;x.go_to_url(n)}return(e,t)=>(Os(),Ms("div",oU,[Vs("div",rU,[Vs("div",cU,[Vs("div",uU,[Vs("div",dU,[Hs(rm,{ref_key:"table_open_ports",ref:s,table_id:l.value,csrf:i.value.csrf,f_map_columns:p,get_extra_params_obj:o,f_sort_rows:u,f_map_config:n,onCustom_event:r},null,8,["table_id","csrf"])])])])])]))},__file:"http_src/vue/page-open-ports.vue"};const pU={class:"form-group ms-2 me-2 mt-3 row"},fU={class:"col-form-label col-sm-2"},mU={class:"col-sm-10"},vU={class:"form-group ms-2 me-2 mt-3 row"},hU={class:"col-form-label col-sm-2"},gU={class:"col-sm-10"},bU={class:"mt-4"},yU=["disabled"];var wU={__name:"modal-edit-vs-report",props:{context:Object},emits:["add","edit"],setup(e,{expose:t,emit:a}){const l=e=>i18n(e),n=ma(i18n("hosts_stats.page_scan_hosts.reports_page.edit_report")),s=ma(null),i=ma(null),o=ma(null),r=ma(null),c=ma(!1),u=[l("hosts_stats.page_scan_hosts.reports_page.notes.note_1")],d=()=>{const e=r.value.epoch,t=o.value.replaceAll(" ","_");a("edit",{report_title:t,epoch_end:e}),s.value.close()},_=()=>{const e=o.value.split(" ").every((e=>yp.validateSingleWord(e)));c.value=e};return t({show:e=>{i.value="",o.value="",r.value=null,(e=>{r.value=e,i.value=e.report_date,o.value=e.name})(e),s.value.show()},close:()=>{s.value.close()}}),(e,t)=>(Os(),Ls(np,{ref_key:"modal_id",ref:s},{title:vl((()=>[Ks(te(n.value),1)])),body:vl((()=>[Ys(" Target information, here an IP is put "),Vs("div",pU,[Vs("label",fU,[Vs("b",null,te(l("hosts_stats.page_scan_hosts.reports_page.date")),1)]),Vs("div",mU,[wn(Vs("input",{"onUpdate:modelValue":t[0]||(t[0]=e=>i.value=e),disabled:!0,class:"form-control",type:"text"},null,512),[[jo,i.value]])])]),Vs("div",vU,[Vs("label",hU,[Vs("b",null,te(l("hosts_stats.page_scan_hosts.reports_page.name")),1)]),Vs("div",gU,[wn(Vs("input",{"onUpdate:modelValue":t[1]||(t[1]=e=>o.value=e),class:"form-control",type:"text",onInput:_,required:""},null,544),[[jo,o.value]])])]),Vs("div",bU,[Hs(fm,{note_list:u})])])),footer:vl((()=>[Vs("div",null,[Vs("button",{type:"button",onClick:d,disabled:!c.value,class:"btn btn-primary"},te(l("apply")),9,yU)])])),_:1},512))},__file:"http_src/vue/modal-edit-vs-report.vue"};const xU={class:"row"},kU={class:"col-md-12 col-lg-12"},$U={class:"card card-shadow"},SU={class:"card-body"},NU={id:"vs_reports"};var CU={__name:"page-vulnerability-scan-report",props:{context:Object},setup(e){const t=e,a=e=>i18n(e);i18n("hosts_stats.page_scan_hosts.notes.generic_notes_1").replaceAll("${http_prefix}",`${http_prefix}`);const l=a("hosts_stats.page_scan_hosts.report_page.delete_title"),n=a("hosts_stats.page_scan_hosts.report_page.delete_description"),s=`${http_prefix}/lua/enterprise/vulnerability_scan_report.lua`,i=`${http_prefix}/lua/pro/rest/v2/delete/vs/report.lua`,o=`${http_prefix}/lua/pro/rest/v2/edit/vs/report.lua`,r=ma("vs_reports"),c=ma(),u=ma(),d=ma(),_=ma(0),p=ma({}),f={csrf:t.context.csrf},m=ma({csrf:t.context.csrf,ifid:t.context.ifid});function v(){c.value.refresh_table()}const h=()=>x.get_url_object();function g(e){let t={click_button_edit:S,click_button_delete:$};null!=t[e.event_id]&&t[e.event_id](e)}function y(e,t){let a=t[e.data.data_field];return"report_date"==e.data.data_field&&(a=t.epoch),"name"==e.data.data_field&&(a=function(e,t){let a=e;e.startsWith("Report of")&&(a="report_"+t);return a}(t.name,t.epoch)),a}function w(e,t){return tN.sortByNumber(e.epoch,t.epoch,0)}function k(e,t,a){if(null!=e){let l=y(e,t),n=y(e,a);return l==n?w(t,a):"report_date"==e.id||"tcp_ports"==e.id||"udp_ports"==e.id||"cves"==e.id?tN.sortByNumber(l,n,e.sort):"name"==e.id?tN.sortByName(l,n,e.sort):"num_hosts"==e.id?tN.sortByNumber(l,n,e.sort):tN.sortByName(l,n,e.sort)}return w(t,a)}function $(e){p.value=e.row,d.value.show("delete_single_report")}function S(e){u.value.show(e.row)}async function N(e){await C(e)}const C=async function(e){const t=NtopUtils.buildURL(o,{...e});await b.http_post_request(t,f),v()};function E(){_.value=c.value.get_rows_num()}const A=e=>{let t={report_date:(e,t)=>`<a href="${NtopUtils.buildURL(s,{printable:!1,epoch_end:t.epoch,epoch_begin:t.epoch})}">${e}</a>`};return e.forEach((e=>{e.render_func=t[e.data_field]})),e},T=async function(){const e=p.value,t=NtopUtils.buildURL(i,{epoch:e.epoch});await b.http_post_request(t,f),v()};return(e,t)=>(Os(),Ms(Ss,null,[Vs("div",xU,[Vs("div",kU,[Vs("div",$U,[Vs("div",SU,[Vs("div",NU,[Hs(JO,{ref_key:"modal_delete_confirm",ref:d,title:ya(l),body:ya(n),onDelete:T},null,8,["title","body"]),Hs(rm,{ref_key:"table_vs_reports",ref:c,table_id:r.value,csrf:m.value.csrf,f_map_columns:A,get_extra_params_obj:h,f_sort_rows:k,onCustom_event:g,onRows_loaded:E},null,8,["table_id","csrf"])])])])])]),Hs(wU,{ref_key:"modal_edit",ref:u,context:m.value,onEdit:N},null,8,["context"])],64))},__file:"http_src/vue/page-vulnerability-scan-report.vue"};const EU={class:"card h-100 overflow-hidden"},AU={class:"m-2 mt-0",style:{"margin-bottom":""}},TU={class:"m-2 mb-3"},OU={class:"card-footer"};var PU={__name:"page-snmp-usage",props:{context:Object},setup(e){const t=e,a=[{value:"10_min",label:i18n("show_alerts.presets.10_min"),currently_active:!1},{value:"30_min",label:i18n("show_alerts.presets.30_min"),currently_active:!0},{value:"hour",label:i18n("show_alerts.presets.hour"),currently_active:!1},{value:"2_hours",label:i18n("show_alerts.presets.2_hours"),currently_active:!1},{value:"6_hours",label:i18n("show_alerts.presets.6_hours"),currently_active:!1},{value:"12_hours",label:i18n("show_alerts.presets.12_hours"),currently_active:!1},{value:"day",label:i18n("show_alerts.presets.day"),currently_active:!1},{value:"week",label:i18n("show_alerts.presets.week"),currently_active:!1},{value:"month",label:i18n("show_alerts.presets.month"),currently_active:!1},{value:"year",label:i18n("show_alerts.presets.year"),currently_active:!1},{value:"custom",label:i18n("show_alerts.presets.custom"),currently_active:!1,disabled:!0}],l="Congestion",n=ma(null),s=ma(null),i=ma("snmp_usage"),o=ma("snmp_usage_chart"),r=t.context.csrf,c=ma(null),u=ma(ntopChartApex.typeChart.TS_LINE),d=`${http_prefix}/lua/pro/rest/v2/get/snmp/metric/usage_chart.lua`;let _="date_time_picker";const p=[i18n("snmp.chart_congestion_rate_note"),i18n("snmp.chart_congestion_link"),i18n("snmp.chart_congestion_configuration"),i18n("snmp.chart_congestion_rate_color")],f=e=>{const a=m.getFormatter("percentage");let l={ip:(e,t)=>`<a href=${`${http_prefix}/lua/pro/enterprise/snmp_device_details.lua?ip=${e}`}>${e}</a>`,interface:(e,t)=>`<a href=${`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${t.ip}&snmp_port_idx=${t.ifid}`}>${e}</a>`,type:(e,t)=>"uplink"==e?`${i18n("out_usage")} <i class="fa-solid fa-circle-arrow-up" style="color: #C6D9FD"></i>`:`${i18n("in_usage")} <i class="fa-solid fa-circle-arrow-down" style="color: #90EE90"></i>`,speed:(e,t)=>`${m.getFormatter("speed")(e)} <a target="_blank" href='${b(t)}'><i class="fas fa-cog"></i></a>`,min:(e,t)=>a(e),max:(e,t)=>a(e),average:(e,t)=>a(e),last_value:(e,t)=>a(e),congestion_rate:(e,t)=>a(e)};return e.forEach((e=>{if(e.render_func=l[e.data_field],"actions"==e.id){const a={historical_data:t.show_historical};e.button_def_array.forEach((e=>{a[e.id]||e.class.push("disabled")}))}})),e};function v(e,t,a){if(null!=e){const l=t[e.data.data_field],n=a[e.data.data_field];if(l==n)return tN.sortByName(t.device,a.device,e?e.sort:null);if("device_name"==e.id)return tN.sortByName(l,n,e.sort);if("ip"==e.id)return tN.sortByIP(l,n,e.sort);if("interface"==e.id)return tN.sortByName(l,n,e.sort);if("type"==e.id)return tN.sortByName(l,n,e.sort);if("speed"==e.id){const t=-1;return tN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("min"==e.id){const t=-1;return tN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("max"==e.id){const t=-1;return tN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("average"==e.id){const t=-1;return tN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("congestion_rate"==e.id){const t=-1;return tN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("last_value"==e.id){const t=-1;return tN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}}return tN.sortByName(t.device,a.device,e?e.sort:null)}async function h(){if(n.value&&n.value.refresh_table(!1),c.value){const e=await k();c.value.update_chart_series(e?.data)}}const g=()=>ntopng_url_manager.get_url_object();function b(e){return`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${e.ip}&snmp_port_idx=${e.ifid}&page=config`}function y(e){const t=e.row,a=ntopng_url_manager.get_url_entry("epoch_begin"),l=ntopng_url_manager.get_url_entry("epoch_end");window.open(`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${t.ip}&snmp_port_idx=${t.ifid}&page=historical&ifid=-1&epoch_end=${l}&epoch_begin=${a}&timeseries_groups_mode=1_chart_x_metric&timeseries_groups=snmp_interface;-1%2B${t.ip}%2B${t.ifid};snmp_if:usage;uplink=true:false:false:false|downlink=true:false:false:false`)}function w(e){const t=e.row;window.open(b(t))}function x(e){let t={click_button_timeseries:y,click_button_configuration:w};null!=t[e.event_id]&&t[e.event_id](e)}async function k(){let e=null;const t={csrf:r,ifid:-1,epoch_begin:ntopng_url_manager.get_url_entry("epoch_begin"),epoch_end:ntopng_url_manager.get_url_entry("epoch_end"),host:ntopng_url_manager.get_url_entry("host")};e=await ntopng_utility.http_post_request(d,t);const a=Uy.formatSimpleSerie(e,l,"bar",["percentage"],[0,100]);return a.title='<div style="font-size:18px;">'+i18n("snmp.top_congested_devices")+"</div>",a.titleHeight=48,a.axes.y.axisLabelWidth=40,a.xAxisHeight=6,a.axes.x.axisLabelWidth=120,a.axes.x.pixelsPerLabel=20,a.xRangePad=50,localStorage.setItem(`${l}_x_axis_label`,JSON.stringify(e.labels)),localStorage.setItem(`${l}_metadata`,JSON.stringify(e.metadata)),a.axes.x.axisLabelFormatter=function(e,t,a,l){return""},a.axes.x.valueFormatter=function(e,t,a,n){if(null!=e){const t=Number(e.toFixed(4)),a=localStorage.getItem(`${l}_x_axis_label`),n=JSON.parse(a)[t-1];return n?`<span style="white-space: pre-wrap">${n}</span>`:""}},a.clickCallback=function(e,t,a){const n=Number(t.toFixed(4)),s=localStorage.getItem(`${l}_metadata`),i=JSON.parse(s)[n-1];i&&y({row:i})},a}return _n((async()=>{await Promise.all([ntopng_sync.on_ready(_)])})),(e,t)=>(Os(),Ms("div",EU,[Hs(A_,{style:{"margin-top":"0.5rem"},class:"ms-1",id:ya(_),enable_refresh:!1,ref_key:"date_time_picker",ref:s,onEpoch_change:h,custom_time_interval_list:a},null,8,["id"]),Vs("div",AU,[Hs(Ag,{ref_key:"chart",ref:c,id:o.value,chart_type:u.value,base_url_request:d,get_custom_chart_options:k,register_on_status_change:!1,disable_pointer_events:!1},null,8,["id","chart_type"])]),Vs("div",TU,[Hs(rm,{ref_key:"table_snmp_usage",ref:n,table_id:i.value,csrf:ya(r),f_map_columns:f,get_extra_params_obj:g,f_sort_rows:v,onCustom_event:x},null,8,["table_id","csrf"])]),Vs("div",OU,[Hs(fm,{note_list:p})])]))}};lp("\n.dygraph-axis-label.dygraph-axis-label-x[data-v-da0f3f1a] {\n    font-size: 12px;\n    transform: rotate(-90deg) translate(-20px, 0);\n}\n"),PU.__scopeId="data-v-da0f3f1a",PU.__file="http_src/vue/page-snmp-usage.vue";const UU=[{name:"Unknown",icon:""},{name:"Linux",icon:"<i class='fab fa-linux fa-lg'></i>"},{name:"Windows",icon:"<i class='fab fa-windows fa-lg'></i>"},{name:"MacOS",icon:"<i class='fab fa-apple fa-lg'></i>"},{name:"iOS",icon:"<i class='fab fa-apple fa-lg'></i>"},{name:"Android",icon:"<i class='fab fa-android fa-lg'></i>"},{name:"LaserJET",icon:"LasetJET"},{name:"AppleAirport",icon:"Apple Airport"}],IU=[{id:"unknown",icon:"",name:i18n("device_types.unknown")},{id:"printer",icon:'<i class="fas fa-print fa-lg devtype-icon" aria-hidden="true"></i>',name:i18n("device_types.printer")},{id:"video",icon:'<i class="fas fa-video fa-lg devtype-icon" aria-hidden="true"></i>',name:i18n("device_types.video")},{id:"workstation",icon:'<i class="fas fa-desktop fa-lg devtype-icon" aria-hidden="true"></i>',name:i18n("device_types.workstation")},{id:"laptop",icon:'<i class="fas fa-laptop fa-lg devtype-icon" aria-hidden="true"></i>',name:i18n("device_types.laptop")},{id:"tablet",icon:'<i class="fas fa-tablet fa-lg devtype-icon" aria-hidden="true"></i>',name:i18n("device_types.tablet")},{id:"phone",icon:'<i class="fas fa-mobile fa-lg devtype-icon" aria-hidden="true"></i>',name:i18n("device_types.phone")},{id:"tv",icon:'<i class="fas fa-tv fa-lg devtype-icon" aria-hidden="true"></i>',name:i18n("device_types.tv")},{id:"networking",icon:'<i class="fas fa-arrows-alt fa-lg devtype-icon" aria-hidden="true"></i>',name:i18n("device_types.networking")},{id:"wifi",icon:'<i class="fas fa-wifi fa-lg devtype-icon" aria-hidden="true"></i>',name:i18n("device_types.wifi")},{id:"nas",icon:'<i class="fas fa-database fa-lg devtype-icon" aria-hidden="true"></i>',name:i18n("device_types.nas")},{id:"multimedia",icon:'<i class="fas fa-music fa-lg devtype-icon" aria-hidden="true"></i>',name:i18n("device_types.multimedia")},{id:"iot",icon:'<i class="fas fa-thermometer fa-lg devtype-icon" aria-hidden="true"></i>',name:i18n("device_types.iot")}],jU={getOSList:()=>icons,getAssetIconsList:()=>IU,getOS:e=>UU[e]||UU[0],getAssetIcon:e=>null!=IU[e]?IU[e].icon:""},MU={class:"m-2 mb-3"},LU={class:"dropdown me-3 d-inline-block"},FU={class:"no-wrap d-flex align-items-center my-auto me-2 filters-label"};var RU={__name:"page-hosts-list",props:{context:Object},setup(e){const t=e,l=t.context?.has_vlans?ma("hosts_list_with_vlans"):ma("hosts_list"),n=ma(null),s=t.context.csrf,i=ma([]);ma([]);const o="<font color='#5cb85c'><i class='fas fa-lg fa-child' aria-hidden='true' title='"+i18n("host_pools.children_safe")+"'></i></font>",r="<i class='fas fa-flag' title='"+i18n("system_host")+"'></i>",c="<i class='fas fa-eye-slash' title='"+i18n("hidden_from_top_talkers")+"'></i>",u="<i class='fas fa-ban fa-sm' title='"+i18n("hosts_stats.blacklisted")+"'></i>",d="<i class='fas fa-spider fa-sm' title='"+i18n("hosts_stats.crawler_bot_scanner")+"'></i>",_="<abbr title='"+i18n("multicast")+"'><span class='badge bg-primary'>"+i18n("short_multicast")+"</span></abbr>",p="<abbr title='"+i18n("details.label_local_host")+"'><span class='badge bg-success'>"+i18n("details.label_short_local_host")+"</span></abbr>",f="<abbr title='"+i18n("details.label_remote")+"'><span class='badge bg-secondary'>"+i18n("details.label_short_remote")+"</span></abbr>",v="<abbr title='"+i18n("details.label_blackhole")+"'><span class='badge bg-info'>"+i18n("details.label_short_blackhole")+"</span></abbr>",h="<i class='fas fa-hourglass' title='"+i18n("hosts_stats.blocking_traffic_policy_popup_msg")+"'></i>",g={1:"<i class='fas fa-arrow-up'></i>",2:"<i class='fas fa-arrow-down'></i>",3:"<i class='fas fa-minus'></i>"},b=e=>{let t={ip_address:(e,t)=>{const a=t.host;let l=a.ip,n="";const s=`${http_prefix}/lua/host_details.lua?host=${a.ip}&vlan=${a.vlan.id}`;if(YS.isEmptyOrNull(a.system_host)||(n=`${n} ${r}`),!YS.isEmptyOrNull(a.os)){n=`${n} ${jU.getOS(a.os).icon}`}return YS.isEmptyOrNull(a.device_type)||(n=`${n} ${jU.getAssetIcon(a.device_type)||""}`),YS.isEmptyOrNull(a.hidden_from_top)||(n=`${n} ${c}`),YS.isEmptyOrNull(a.child_safe)||(n=`${n} ${o}`),YS.isEmptyOrNull(a.dhcp_host)||(n=`${n} <i class="fa-solid fa-bolt" title="DHCP Host"></i>`),YS.isEmptyOrNull(a.blocking_traffic_policy)||(n=`${n} ${h}`),YS.isEmptyOrNull(a.country)||(n=`${n} <a href='${http_prefix}/lua/hosts_stats.lua?country=${a.country}'><img src='${http_prefix}/dist/images/blank.gif' class='flag flag-${a.country.toLowerCase()}'></a>`),YS.isEmptyOrNull(a.is_blacklisted)||(n=`${n} ${u}`),YS.isEmptyOrNull(a.crawler_bot_scanner_host)||(n=`${n} ${d}`),YS.isEmptyOrNull(a.is_multicast)||(n=`${n} ${_}`),YS.isEmptyOrNull(a.localhost)||(n=`${n} ${p}`),YS.isEmptyOrNull(a.remotehost)||(n=`${n} ${f}`),YS.isEmptyOrNull(a.is_blackhole)||(n=`${n} ${v}`),`<a href=${s}>${l}</a> ${n}`},num_flows:(e,t)=>e>0?m.getFormatter("full_number")(e):"",alerts:(e,t)=>e>0?m.getFormatter("full_number")(e)+" <i class='fas fa-exclamation-triangle' style='color: #B94A48;'></i>":"",vlan:(e,t)=>{const a=t.host.vlan;return YS.isEmptyOrNull(a.name)?YS.isEmptyOrNull(a.id)?"":a.id:a.name},num_cves:(e,t)=>e>0?m.getFormatter("full_number")(e):"",tcp_unresp_as_server:(e,t)=>e>0?m.getFormatter("full_number")(e):"",hostname:(e,t)=>{let a=e.name;return YS.isEmptyOrNull(e.alt_name)||(a=e.alt_name,e.alt_name==e.name||YS.isEmptyOrNull(e.name)||(a=`${a} [${e.name}]`)),a},first_seen:(e,t)=>e>0?a.secondsToTime(Math.round((new Date).getTime()/1e3)-e):"",score:(e,t)=>e>0?m.getFormatter("full_number")(e):"",traffic_breakdown:(e,t)=>{const l=100*t.bytes.sent/t.bytes.total,n=100*t.bytes.rcvd/t.bytes.total;return a.createBreakdown(l,n,i18n("sent"),i18n("rcvd"))},throughput:(e,t)=>{let a="";return"bps"!==e.type||YS.isEmptyOrNull(e.bps)?"pps"!==e.type||YS.isEmptyOrNull(e.pps)||(a=m.getFormatter("pps")(e.pps)):a=m.getFormatter("bps")(e.bps),YS.isEmptyOrNull(a)||YS.isEmptyOrNull(e.trend)||(a=`${a} ${g[e.trend]}`),a},bytes:(e,t)=>YS.isEmptyOrNull(e.total)?"":m.getFormatter("bytes")(e.total)};return e.forEach((e=>{e.render_func=t[e.data_field]})),e};function y(){i.value.forEach(((e,t)=>{null==e.basic_label&&(e.basic_label=e.label);const a=ntopng_url_manager.get_url_entry(e.id);e.options.forEach((t=>{t.value.toString()===a&&(e.current_option=t)}))}))}function w(){y()}function x(e){ntopng_url_manager.set_key_to_url(e.key,`${e.value}`),y(),n.value.refresh_table()}function k(e,t,a){}const $=()=>ntopng_url_manager.get_url_object();function S(e){const t=e.row;window.open(function(e){return`${http_prefix}/lua/host_details.lua?host=${e.host.ip}&vlan=${e.host.vlan.id}&page=flows`}(t))}function N(e){let t={click_button_live_flows:S};null!=t[e.event_id]&&t[e.event_id](e)}function C(){n.value.refresh_table(!0)}return _n((async()=>{setInterval(C,1e4),i.value=await async function(){let e=$(),t=ntopng_url_manager.obj_to_url_params(e);const a=`${http_prefix}/lua/rest/v2/get/host/host_filters.lua?${t}`;return(await ntopng_utility.http_request(a)).map((e=>{const t=ntopng_url_manager.get_url_entry(e.name);return YS.isEmptyOrNull(t)&&ntopng_url_manager.set_key_to_url(e.name,""),{id:e.name,label:e.label,title:e.tooltip,options:e.value,hidden:1==e.value.length}}))}(),y()})),(e,t)=>(Os(),Ms("div",MU,[Hs(rm,{ref_key:"table_hosts_list",ref:n,table_id:ya(l),csrf:ya(s),f_map_columns:b,get_extra_params_obj:$,f_sort_rows:k,onCustom_event:N,onRows_loaded:w},{custom_header:vl((()=>[(Os(!0),Ms(Ss,null,An(i.value,(e=>(Os(),Ms("div",LU,[Vs("span",FU,[Vs("b",null,te(e.basic_label),1)]),Hs(l_,{selected_option:e.current_option,"onUpdate:selected_option":t=>e.current_option=t,theme:"bootstrap-5",dropdown_size:"small",options:e.options,onSelect_option:x},null,8,["selected_option","onUpdate:selected_option","options"])])))),256))])),_:1},8,["table_id","csrf"])]))},__file:"http_src/vue/page-hosts-list.vue"},DU={__name:"piety-chart",props:{id:String,refresh_rate:Number},setup(e,{expose:t}){const a=e,l=ma(null),n=ma(ntopChartApex.typeChart.TS_LINE);let s=[],i=!0;const o=Math.floor((new Date).getTime());for(let e=0;e<60;e++){const t=o-(59-e)*a.refresh_rate;s.push([t,0,0])}let r=[...s];const c=function(){const e=Uy.formatSimpleSerie({serie:[]},[i18n("sent"),i18n("rcvd")],"normal",["bps","bps"]);return e.data=s,e.colors=["#c6d9fd","#90ee90"],e.axes.y={axisLabelFormatter:function(e,t,a,l){return""},valueFormatter:function(e,t,a,l){return m.getFormatter("bps")(e)},pixelsPerLabel:10,axisLabelWidth:0},e.xAxisHeight=6,e.axes.x.axisLabelFormatter=function(e,t,a,l){return""},e.axes.x.pixelsPerLabel=0,e.height=60,e.drawGrid=!1,e.axisLineColor="transparent",e.ylabel="",e.yRangePad=0,e};return t({update:async function(e){const t=await ntopng_utility.http_request(e);s.shift(),r.shift();const n=r[r.length-1][0],o=a.refresh_rate/1e3,c=n+1e3*o,u=t.totBytesSent-r[r.length-1][1],d=t.totBytesRcvd-r[r.length-1][2];if(i)s.push([c,0,0]),i=!1;else{const e=8*u/o,t=8*d/o;s.push([c,e<0?0:e,t<0?0:-t])}r.push([c,t.totBytesSent,t.totBytesRcvd]);const _=s.map((e=>[e[0],e[1],e[2]]));l.value.update_chart_series(_)},reset:async function(){const e=Math.floor((new Date).getTime());s=[];for(let t=0;t<60;t++){const l=e-(59-t)*a.refresh_rate;s.push([l,0,0])}r=[...s],i=!0,l.value.update_chart_series(s)}}),(t,a)=>(Os(),Ls(Ag,{ref_key:"chart",ref:l,id:e.id,chart_type:n.value,get_custom_chart_options:c,register_on_status_change:!1,disable_pointer_events:!1},null,8,["id","chart_type"]))},__file:"http_src/components/charts/piety-chart.vue"};const zU={Safe:"<i class='fas fa-thumbs-up'></i>",Acceptable:"<i class='fas fa-thumbs-up'></i>",Fun:"<i class='fas fa-smile'></i>",Unsafe:"<i class='fas fa-thumbs-down'></i>",Dangerous:"<i class='fas fa-exclamation-triangle'></i>"},qU=[{id:-1,icon_class:"badge bg-warning"},{id:0,icon_class:"badge bg-warning"},{id:1,icon_class:"badge bg-success"}],BU=function(e,t){let a="";return qU.forEach((l=>{Number(l.id)===Number(t)&&(a=`<span class="${l.icon_class}" title="${e}">${e}</span>`)})),a},VU={formatBreedIcon:function(e,t){let a="";return zU[e]&&(a=zU[e]),t?`${a} <i class='fas fa-lock'></i>`:a},formatConfidence:BU},HU={none:{severity_id:0,label:"bg-info",color:"#a8e4ef",icon:"",i18n_title:"alerts_dashboard.none",syslog_severity:10},debug:{severity_id:1,label:"bg-info",icon:"fas fa-bug text-info",color:"#a8e4ef",i18n_title:"alerts_dashboard.debug",syslog_severity:7,emoji:"â¹"},info:{severity_id:2,label:"bg-info",icon:"fas fa-info-circle text-info",color:"#c1f0c1",i18n_title:"alerts_dashboard.info",syslog_severity:6,used_by_alerts:!0,emoji:"â¹"},notice:{severity_id:3,label:"bg-info",icon:"fas fa-info-circle text-info",color:"#5cd65c",i18n_title:"alerts_dashboard.notice",syslog_severity:5,used_by_alerts:!0,emoji:"â¹"},warning:{severity_id:4,label:"bg-warning",icon:"fas fa-exclamation-triangle text-warning",color:"#ffc007",i18n_title:"alerts_dashboard.warning",syslog_severity:4,used_by_alerts:!0,emoji:"â "},error:{severity_id:5,label:"bg-danger",icon:"fas fa-exclamation-triangle text-danger",color:"#ff3231",i18n_title:"alerts_dashboard.error",syslog_severity:3,used_by_alerts:!0,emoji:"â"},critical:{severity_id:6,label:"bg-danger",icon:"fas fa-exclamation-triangle text-danger",color:"#fb6962",i18n_title:"alerts_dashboard.critical",syslog_severity:2,emoji:"â"},emergency:{severity_id:8,label:"bg-danger text-danger",icon:"fas fa-bomb text-danger",color:"#fb6962",i18n_title:"alerts_dashboard.emergency",syslog_severity:0,emoji:"ð©"}},GU={getSeverityIcon:function(e){for(const[t,a]of Object.entries(HU))if(Number(e)==Number(a.severity_id))return a.icon}},WU={class:"m-2 mb-3"},KU={class:"d-flex justify-content-center align-items-center"},JU={class:"col-12"},YU={class:"dropdown me-3 d-inline-block"},ZU={class:"no-wrap d-flex align-items-center pe-1"},XU={class:"d-inline-block"};var QU={__name:"page-flows-list",props:{context:Object},setup(e){const t=e,l=e=>i18n(e),n=t.context?.has_exporters?ma("flows_list_with_exporters"):ma("flows_list"),s=ma(null),i=t.context.csrf,o=ma(null),r=ma([]),c=`${http_prefix}/lua/rest/v2/get/flow/traffic_stats.lua`,u=ma("throughput_piety"),d="<font color='#5cb85c'><i class='fas fa-lg fa-child' aria-hidden='true' title='"+i18n("host_pools.children_safe")+"'></i></font>",_="<i class='fas fa-flag' title='"+i18n("system_host")+"'></i>",p="<i class='fas fa-eye-slash' title='"+i18n("hidden_from_top_talkers")+"'></i>",f='<i class="fa-solid fa-bolt" title="DHCP Host"></i>',v="<i class='fas fa-ban fa-sm' title='"+i18n("hosts_stats.blacklisted")+"'></i>",h="<i class='fas fa-spider fa-sm' title='"+i18n("hosts_stats.crawler_bot_scanner")+"'></i>",g="<abbr title='"+i18n("multicast")+"'><span class='badge bg-primary'>"+i18n("short_multicast")+"</span></abbr>",b="<abbr title='"+i18n("details.label_local_host")+"'><span class='badge bg-success'>"+i18n("details.label_short_local_host")+"</span></abbr>",y="<abbr title='"+i18n("details.label_remote")+"'><span class='badge bg-secondary'>"+i18n("details.label_short_remote")+"</span></abbr>",w="<abbr title='"+i18n("details.label_blackhole")+"'><span class='badge bg-info'>"+i18n("details.label_short_blackhole")+"</span></abbr>",x="<i class='fas fa-hourglass' title='"+i18n("hosts_stats.blocking_traffic_policy_popup_msg")+"'></i>",k={1:"<i class='fas fa-arrow-up'></i>",2:"<i class='fas fa-arrow-down'></i>",3:"<i class='fas fa-minus'></i>"},$=e=>{let t={client:(e,t)=>{let a="",l=` : ${e.port}`,n="",s="";const i=`${http_prefix}/lua/host_details.lua?host=${e.ip}&vlan=${e.vlan}`;if(YS.isEmptyOrNull(e.system_host)||(a=`${a} ${_}`),!YS.isEmptyOrNull(e.os)){a=`${a} ${osUtils.getOS(e.os).icon}`}return YS.isEmptyOrNull(e.device_type)||(a=`${a} ${osUtils.getAssetIcon(e.device_type)||""}`),YS.isEmptyOrNull(e.hidden_from_top)||(a=`${a} ${p}`),YS.isEmptyOrNull(e.child_safe)||(a=`${a} ${d}`),YS.isEmptyOrNull(e.dhcp_host)||(a=`${a} ${f}`),YS.isEmptyOrNull(e.blocking_traffic_policy)||(a=`${a} ${x}`),YS.isEmptyOrNull(e.country)||(a=`${a} <a href='${http_prefix}/lua/hosts_stats.lua?country=${e.country}'><img src='${http_prefix}/dist/images/blank.gif' class='flag flag-${e.country.toLowerCase()}'></a>`),YS.isEmptyOrNull(e.is_blacklisted)||(a=`${a} ${v}`),YS.isEmptyOrNull(e.crawler_bot_scanner_host)||(a=`${a} ${h}`),YS.isEmptyOrNull(e.is_multicast)||(a=`${a} ${g}`),YS.isEmptyOrNull(e.localhost)||(a=`${a} ${b}`),YS.isEmptyOrNull(e.remotehost)||(a=`${a} ${y}`),YS.isEmptyOrNull(e.is_blackhole)||(a=`${a} ${w}`),0===e.port||YS.isEmptyOrNull(e.service_port)||(l=` : <a href="#" class="tableFilter" tag-filter="port" tag-value="${e.port}">${e.service_port}</a>`),0===e.port&&(l=""),YS.isEmptyOrNull(e.process.name)||(n=` <a href="${http_prefix}/lua/process_details.lua?host=${e.ip}&vlan=${e.vlan}&pid_name=${e.process.pid_name}&pid=${e.process.pid}"><i class='fas fa-terminal'></i> ${e.process.process_name}</a>`),YS.isEmptyOrNull(e.container.id)||(s=` <a href="${http_prefix}/lua/flows_stats.lua?container=${e.container.id}"><i class='fas fa-ship'></i> ${e.container.name}</a>`),`<a href=${i}>${e.name}</a> ${a}${l}${n}${s}`},server:(e,t)=>{let a="",l=` : ${e.port}`,n="",s="";const i=`${http_prefix}/lua/host_details.lua?host=${e.ip}&vlan=${e.vlan}`;if(YS.isEmptyOrNull(e.system_host)||(a=`${a} ${_}`),!YS.isEmptyOrNull(e.os)){a=`${a} ${osUtils.getOS(e.os).icon}`}return YS.isEmptyOrNull(e.device_type)||(a=`${a} ${osUtils.getAssetIcon(e.device_type)||""}`),YS.isEmptyOrNull(e.hidden_from_top)||(a=`${a} ${p}`),YS.isEmptyOrNull(e.child_safe)||(a=`${a} ${d}`),YS.isEmptyOrNull(e.dhcp_host)||(a=`${a} ${f}`),YS.isEmptyOrNull(e.blocking_traffic_policy)||(a=`${a} ${x}`),YS.isEmptyOrNull(e.country)||(a=`${a} <a href='${http_prefix}/lua/hosts_stats.lua?country=${e.country}'><img src='${http_prefix}/dist/images/blank.gif' class='flag flag-${e.country.toLowerCase()}'></a>`),YS.isEmptyOrNull(e.is_blacklisted)||(a=`${a} ${v}`),YS.isEmptyOrNull(e.crawler_bot_scanner_host)||(a=`${a} ${h}`),YS.isEmptyOrNull(e.is_multicast)||(a=`${a} ${g}`),YS.isEmptyOrNull(e.localhost)||(a=`${a} ${b}`),YS.isEmptyOrNull(e.remotehost)||(a=`${a} ${y}`),YS.isEmptyOrNull(e.is_blackhole)||(a=`${a} ${w}`),0===e.port||YS.isEmptyOrNull(e.service_port)||(l=` : <a href="#" class="tableFilter" tag-filter="port" tag-value="${e.port}">${e.service_port}</a>`),0===e.port&&(l=""),YS.isEmptyOrNull(e.process.name)||(n=` <a href="${http_prefix}/lua/process_details.lua?host=${e.ip}&vlan=${e.vlan}&pid_name=${e.process.pid_name}&pid=${e.process.pid}"><i class='fas fa-terminal'></i> ${e.process.process_name}</a>`),YS.isEmptyOrNull(e.container.id)||(s=` <a href="${http_prefix}/lua/flows_stats.lua?container=${e.container.id}"><i class='fas fa-ship'></i> ${e.container.name}</a>`),`<a href=${i}>${e.name}</a> ${a}${l}${n}${s}`},application:(e,t)=>{const a=t.verdict?` <strike>${e.name}</strike>`:`${e.name}`;return`<a href="#" class="tableFilter" tag-filter="application" tag-value="${YS.isEmptyOrNull(e.master_id)||e.master_id===e.app_id?e.app_id:`${e.master_id}.${e.app_id}`}"">${a} ${VU.formatBreedIcon(e.breed,e.encrypted)}</a> ${VU.formatConfidence(e.confidence,e.confidence_id)}`},l4_proto:(e,t)=>{if(e){return t.verdict?` <strike>${e}</strike>`:`${e}`}return""},first_seen:(e,t)=>e>0?a.secondsToTime(Math.round((new Date).getTime()/1e3)-e):"",last_seen:(e,t)=>e>0?a.secondsToTime(Math.round((new Date).getTime()/1e3)-e):"",score:(e,t)=>{if(e>0){let a="";return YS.isEmptyOrNull(t.predominant_alert)||(a=` <i class="${GU.getSeverityIcon(t.predominant_alert.severity_id)}" title="${t.predominant_alert.name}"></i>`),`${m.getFormatter("full_number")(e)}${a}`}return""},traffic_breakdown:(e,t)=>{const l=100*t.bytes.cli_bytes/t.bytes.total,n=100*(t.bytes.total-t.bytes.cli_bytes)/t.bytes.total;return a.createBreakdown(l,n,i18n("client"),i18n("server"))},throughput:(e,t)=>{let a="";return"bps"!==e.type||YS.isEmptyOrNull(e.bps)?"pps"!==e.type||YS.isEmptyOrNull(e.pps)||(a=m.getFormatter("pps")(e.pps)):a=m.getFormatter("bps")(e.bps),YS.isEmptyOrNull(a)||YS.isEmptyOrNull(e.trend)||(a=`${a} ${k[e.trend]}`),a},bytes:(e,t)=>YS.isEmptyOrNull(e.total)?"":m.getFormatter("bytes")(e.total),info:(e,t)=>{let a="";if(!YS.isEmptyOrNull(e)){const l=`${http_prefix}/lua/pro/enterprise/network_maps.lua?map=periodicity_map&page=table`;if(t.periodic_flow){a=`${e} <a href="${l}&host=${t.client.mac?t.client.mac:t.client.host}&l7proto=${t.application.name}"><span class="badge bg-warning text-dark">${i18n("periodic_flow")}</span></a>`}if(t.application.http_method){let e="warning",l="badge bg-danger";"GET"==t.application.http_method&&(e="success"),t.application.return_code<400&&(l="badge bg-success"),a=`<span class=badge bg-${e}">${t.application.http_method}</span> <span class="${l}">${t.application.rsp_status_code}</span> ${a}`}}return""},flow_exporter:e=>YS.isEmptyOrNull(e)?"":`<a href="${http_prefix}/lua/pro/enterprise/flowdevice_details.lua?ip=${e.device.ip}">${e.device.name}</a>`,in_index:(e,t)=>{if(!YS.isEmptyOrNull(t.flow_exporter)){let e=t.flow_exporter.in_port.name;return e!==t.flow_exporter.in_port.index&&(e=`${e} [${t.flow_exporter.in_port.index}]`),`<a href="${http_prefix}/lua/pro/enterprise/flowdevice_details.lua?ip=${t.flow_exporter.device.ip}&snmp_port_idx=${t.flow_exporter.in_port.index}">${e}</a>`}return""},out_index:(e,t)=>{if(!YS.isEmptyOrNull(t.flow_exporter)){let e=t.flow_exporter.out_port.name;return e!==t.flow_exporter.out_port.index&&(e=`${e} [${t.flow_exporter.out_port.index}]`),`<a href="${http_prefix}/lua/pro/enterprise/flowdevice_details.lua?ip=${t.flow_exporter.device.ip}&snmp_port_idx=${t.flow_exporter.out_port.index}">${e}</a>`}return""}};return e.forEach((e=>{e.render_func=t[e.data_field]})),e};function S(){r.value.forEach(((e,t)=>{null==e.basic_label&&(e.basic_label=e.label);const a=ntopng_url_manager.get_url_entry(e.id);e.options.forEach((t=>{t.value.toString()===a&&(e.current_option=t)}))}))}function N(e){const t=e.target.getAttribute("tag-value");E({key:e.target.getAttribute("tag-filter"),value:t})}function C(){document.querySelectorAll(".tableFilter").forEach((e=>{e.addEventListener("click",N)})),S()}async function E(e){ntopng_url_manager.set_key_to_url(e.key,`${e.value}`),T(),r.value=await A(),S(),s.value.refresh_table()}async function A(){let e=U(),t=ntopng_url_manager.obj_to_url_params(e);const a=`${http_prefix}/lua/rest/v2/get/flow/flow_filters.lua?${t}`;return(await ntopng_utility.http_request(a)).map((e=>(null===ntopng_url_manager.get_url_entry(e.name)&&ntopng_url_manager.set_key_to_url(e.name,""),{id:e.name,label:e.label,title:e.tooltip,options:e.value,hidden:1==e.value.length})))}const T=async function(){await o.value.reset(),await o.value.update(c+"?"+ntopng_url_manager.get_url_params())};async function O(){r.value.forEach(((e,t)=>{ntopng_url_manager.set_key_to_url(e.id,"")})),T(),r.value=await A(),S(),s.value.refresh_table()}function P(e,t,a){}const U=()=>ntopng_url_manager.get_url_object();function I(e){const t=e.row;window.open(function(e){return`${http_prefix}/lua/flow_details.lua?flow_key=${e.key}&flow_hash_id=${e.hash_id}`}(t))}function j(e){let t={click_button_live_flows:I};null!=t[e.event_id]&&t[e.event_id](e)}function M(){o.value.update(c+"?"+ntopng_url_manager.get_url_params()),s.value.refresh_table(!0)}return _n((async()=>{setInterval(M,1e4),o.value.update(c+"?"+ntopng_url_manager.get_url_params()),r.value=await A(),S()})),(e,t)=>(Os(),Ms("div",WU,[Vs("div",KU,[Vs("div",JU,[Hs(DU,{ref_key:"chart",ref:o,id:u.value,refresh_rate:1e4},null,8,["id"])])]),Hs(rm,{ref_key:"table_flows_list",ref:s,table_id:ya(n),csrf:ya(i),f_map_columns:$,get_extra_params_obj:U,f_sort_rows:P,onCustom_event:j,onRows_loaded:C},{custom_header:vl((()=>[(Os(!0),Ms(Ss,null,An(r.value,(e=>(Os(),Ms("div",YU,[Vs("span",ZU,te(e.basic_label+": "),1),Hs(l_,{selected_option:e.current_option,"onUpdate:selected_option":t=>e.current_option=t,theme:"bootstrap-5",dropdown_size:"small",options:e.options,onSelect_option:E},null,8,["selected_option","onUpdate:selected_option","options"])])))),256)),Vs("div",XU,[Vs("div",{class:"btn btn-sm btn-primary",type:"button",onClick:O},te(l("reset")),1)])])),_:1},8,["table_id","csrf"])]))},__file:"http_src/vue/page-flows-list.vue"};const eI={class:"m-2 mb-3"},tI=["title"],aI=["onClick","title"],lI={class:"card-footer"};var nI={__name:"page-snmp-interfaces",props:{context:Object},setup(e){const t=e,a=t.context?.inside_a_device?ma("snmp_device_interfaces"):ma("snmp_interfaces"),l=ma(null),n=t.context.csrf,s=ma([]),i=ma([]),o=[i18n("snmp.snmp_note_periodic_interfaces_polling"),i18n("snmp.snmp_note_thpt_calc"),i18n("snmp.snmp_note_avg_usage")],r={1:"<font color=green>"+i18n("snmp.status_up")+"</font>",101:"<font color=green>"+i18n("snmp.status_up_in_use")+"</font>",2:"<font color=red>"+i18n("snmp.status_down")+"</font>",3:i18n("snmp.testing"),4:i18n("snmp.status_unknown"),5:i18n("snmp.status_dormant"),6:i18n("status_notpresent"),7:"<font color=red>"+i18n("snmp.status_lowerlayerdown")+"</font>"},c={1:i18n("unknown"),2:"<font color=orange>"+i18n("flow_devices.half_duplex")+"</font>",3:"<font color=green>"+i18n("flow_devices.full_duplex")+"</font>"},u=e=>{m.getFormatter("percentage");let a={device_name:(e,t)=>`<a href=${`${http_prefix}/lua/pro/enterprise/snmp_device_details.lua?ip=${t.device_ip}`}>${e}</a>`,interface_name:(e,t)=>`<a href=${`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${t.device_ip}&snmp_port_idx=${t.interface_id}`}>${e}</a>`,vlan:(e,t)=>{let a="";return""!=t.vlan_name&&(a="["+t.vlan_name+"]"),`${e} ${a}`},admin_status:(e,t)=>`${r[e]||""}`,status:(e,t)=>`${r[e]||""}`,duplex_status:(e,t)=>`${c[e]||""}`,num_macs:(e,t)=>{if(e>0){return`<a href=${`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${t.device_ip}&snmp_port_idx=${t.interface_id}&page=layer_2`}>${e}</a>`}return""},in_bytes:(e,t)=>e>0?m.getFormatter("bytes")(e):"",out_bytes:(e,t)=>e>0?m.getFormatter("bytes")(e):"",in_errors:(e,t)=>e>0?m.getFormatter("full_number")(e):"",in_discards:(e,t)=>e>0?m.getFormatter("full_number")(e):"",throughput:(e,t)=>e>0?m.getFormatter("bps")(e):"",uplink_speed:(e,t)=>`${m.getFormatter("speed")(e)} <a href='${v(t,!0)}'><i class="fas fa-cog"></i></a>`,downlink_speed:(e,t)=>`${m.getFormatter("speed")(e)} <a href='${v(t,!0)}'><i class="fas fa-cog"></i></a>`,last_in_usage:(e,t)=>e>0?m.getFormatter("percentage")(e):"",last_out_usage:(e,t)=>e>0?m.getFormatter("percentage")(e):"",last_change:(e,t)=>t.last_change_string};return e.forEach((e=>{if(e.render_func=a[e.data_field],"actions"==e.id){const a={historical_data:t.show_historical};e.button_def_array.forEach((e=>{a[e.id]||e.class.push("disabled")}))}})),e};function d(e,t){t.stopPropagation(),ntopng_url_manager.set_key_to_url(e.key,`${e.value}`),s.value.forEach(((e,t)=>{null==e.basic_label&&(e.basic_label=e.label);const a=ntopng_url_manager.get_url_entry(e.id);null!=a&&e.options.forEach((t=>{t.value.toString()===a&&(e.label=`${e.basic_label}: ${t.label||t.value}`)}))})),l.value.refresh_table()}const _=(e,t)=>a=>{!async function(e,t){e.show_spinner=!0,await Ja(),e.options=s.value.find((t=>t.id==e.id)).options,await Ja();let a=i.value[t];a.load_menu(),e.show_spinner=!1}(e,t)};function p(e,t,a){if(null!=e){const l=t[e.data.data_field],n=a[e.data.data_field];if(l==n)return tN.sortByName(t.device,a.device,e?e.sort:null);if("device_name"==e.id)return tN.sortByName(l,n,e.sort);if("ip"==e.id)return tN.sortByIP(l,n,e.sort);if("interface"==e.id)return tN.sortByName(l,n,e.sort);if("type"==e.id)return tN.sortByName(l,n,e.sort);if("speed"==e.id){const t=-1;return tN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("min"==e.id){const t=-1;return tN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("max"==e.id){const t=-1;return tN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("average"==e.id){const t=-1;return tN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("congestion_rate"==e.id){const t=-1;return tN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}if("last_value"==e.id){const t=-1;return tN.sortByNumberWithNormalizationValue(l,n,e.sort,t)}}return tN.sortByName(t.device,a.device,e?e.sort:null)}const f=()=>ntopng_url_manager.get_url_object();function v(e,t){return t?`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${e.device_ip}&snmp_port_idx=${e.interface_id}&page=config`:`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${e.device_ip}&page=config`}function h(e){const t=e.row,a=ntopng_url_manager.get_url_entry("epoch_begin"),l=ntopng_url_manager.get_url_entry("epoch_end");window.open(`${http_prefix}/lua/pro/enterprise/snmp_interface_details.lua?host=${t.ip}&snmp_port_idx=${t.ifid}&page=historical&ifid=-1&epoch_end=${l}&epoch_begin=${a}&timeseries_groups_mode=1_chart_x_metric&timeseries_groups=snmp_interface;-1%2B${t.ip}%2B${t.ifid};snmp_if:usage;uplink=true:false:false:false|downlink=true:false:false:false`)}function g(e){const t=e.row;window.open(v(t,!0))}function b(e){let t={click_button_timeseries:h,click_button_configuration:g};null!=t[e.event_id]&&t[e.event_id](e)}return _n((async()=>{s.value=await async function(){let e=f(),t=ntopng_url_manager.obj_to_url_params(e);const a=`${http_prefix}/lua/pro/rest/v2/get/snmp/metric/interfaces_filters.lua?${t}`;return(await ntopng_utility.http_request(a)).map((e=>({id:e.name,label:e.label,title:e.tooltip,options:e.value,hidden:1==e.value.length})))}()})),(e,t)=>(Os(),Ms(Ss,null,[Vs("div",eI,[Hs(rm,{ref_key:"table_snmp_interfaces",ref:l,table_id:ya(a),csrf:ya(n),f_map_columns:u,get_extra_params_obj:f,f_sort_rows:p,onCustom_event:b},{custom_header:vl((()=>[(Os(!0),Ms(Ss,null,An(s.value,((e,t)=>(Os(),Ls(Rd,{f_on_open:_(e,t),ref_for:!0,ref:e=>{i.value[t]=e},hidden:e.hidden},{title:vl((()=>[Hs(cm,{show:e.show_spinner,size:"1rem",class:"me-1"},null,8,["show"]),Vs("a",{class:"ntopng-truncate",title:e.title},te(e.label),9,tI)])),menu:vl((()=>[(Os(!0),Ms(Ss,null,An(e.options,(e=>(Os(),Ms("a",{style:{cursor:"pointer",display:"block"},onClick:t=>d(e,t),class:"ntopng-truncate tag-filter",title:e.value},[null==e.count?(Os(),Ms(Ss,{key:0},[Ks(te(e.label),1)],64)):(Os(),Ms(Ss,{key:1},[Ks(te(e.label+" ("+e.count+")"),1)],64))],8,aI)))),256))])),_:2},1032,["f_on_open","hidden"])))),256))])),_:1},8,["table_id","csrf"])]),Vs("div",lI,[Hs(fm,{note_list:o})])],64))},__file:"http_src/vue/page-snmp-interfaces.vue"};const sI={class:"row"},iI={class:"col-md-12 col-lg-12"},oI={class:"card card-shadow"},rI={class:"card-body"},cI={class:"card-footer"};var uI={__name:"page-topology",props:{context:Object},setup(e){const t=e,l=e=>i18n(e),n=[l("snmp.snmp_note_periodic_interfaces_polling"),l("snmp.snmp_note_thpt_calc"),l("snmp.snmp_lldp_cdp_descr")],s=ma("topology"),i=ma(),o=ma(0),r=ma({csrf:t.context.csrf,ifid:t.context.ifid}),c=()=>x.get_url_object();function u(e,t){let a=t[e.data.data_field];return"port_id"==e.data.data_field?Number(a.split(">")[1].split("<")[0]):a}function d(e,t,a){if(null!=e){let l=u(e,t),n=u(e,a);return"port_id"==e.id||"port_thpt_value"==e.id?tN.sortByNumber(l,n,e.sort):tN.sortByName(l,n,e.sort)}}function _(){o.value=i.value.get_rows_num()}const p=e=>{let t={uplink_speed:(e,t)=>a.bitsToSize(e),downlink_speed:(e,t)=>a.bitsToSize(e),port_thpt_value:(e,t)=>a.bitsToSize(e)};return e.forEach((e=>{e.render_func=t[e.data_field]})),e};return(e,t)=>(Os(),Ms("div",sI,[Vs("div",iI,[Vs("div",oI,[Vs("div",rI,[Hs(rm,{ref_key:"table_topology",ref:i,table_id:s.value,csrf:r.value.csrf,f_map_columns:p,get_extra_params_obj:c,f_sort_rows:d,onRows_loaded:_},null,8,["table_id","csrf"])]),Vs("div",cI,[Hs(fm,{note_list:n})])])])]))},__file:"http_src/vue/page-topology.vue"};const dI={style:{"min-height":"8.5rem"}},_I={class:"form-group ms-2 me-2 mt-3 row"},pI={class:"col-form-label col-sm-4"},fI={class:"col-sm-6"},mI=["pattern"],vI=["disabled"];var hI={__name:"modal-file-save",props:{csrf:String,title:String,get_suggested_file_name:Function,store_file:Function,allow_spaces:Boolean},emits:["file_stored"],setup(e,{expose:t,emit:a}){const l=e,n=ma(null),s=ma("");ma("date");let i=NtopUtils.REGEXES.singleword;const o=wi((()=>!new RegExp(i).test(s.value)));const r=async()=>{l.store_file(s.value),a("file_stored",s.value),c()},c=()=>{n.value.close()};t({show:()=>{!async function(){s.value=l.get_suggested_file_name()}(),n.value.show()},close:c}),_n((()=>{i=l.allow_spaces?NtopUtils.REGEXES.multiword:NtopUtils.REGEXES.singleword}));const u=e=>i18n(e);return(t,a)=>(Os(),Ls(np,{onShowed:a[1]||(a[1]=e=>{}),ref_key:"modal_id",ref:n},{title:vl((()=>[Ks(te(e.title),1)])),body:vl((()=>[Vs("div",dI,[Vs("div",_I,[Vs("label",pI,[Vs("b",null,te(u("name"))+":",1)]),Vs("div",fI,[wn(Vs("input",{pattern:ya(i),placeholder:"",required:"",type:"text",class:"form-control","onUpdate:modelValue":a[0]||(a[0]=e=>s.value=e)},null,8,mI),[[jo,s.value]])])])])])),footer:vl((()=>[Vs("button",{type:"button",onClick:r,disabled:ya(o),class:"btn btn-primary"},te(u("save")),9,vI)])),_:1},512))}};lp("\ninput[data-v-87fda19e]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-87fda19e] {\n  cursor: not-allowed;\n}\n"),hI.__scopeId="data-v-87fda19e",hI.__file="http_src/vue/modal-file-save.vue";const gI={class:"form-group ms-2 me-2 mt-3 row"},bI={class:"col-form-label col-sm-4"},yI={class:"col-sm-8"},wI={value:"name"},xI={value:"date"},kI={class:"form-group ms-2 me-2 mt-3 row"},$I={class:"col-form-label col-sm-4"},SI={class:"col-sm-8"},NI=["disabled"],CI=["disabled"];var EI={__name:"modal-file-open",props:{csrf:String,title:String,file_title:String,list_files:Function,open_file:Function,delete_file:Function},emits:["file_deleted"],setup(e,{expose:t,emit:a}){const l=e,n=ma(null),s=ma({}),i=ma(""),o=ma([]),r=ma("date");NtopUtils.REGEXES.singleword;const c=wi((()=>""==s.value));function u(){o.value=o.value.sort(((e,t)=>"name"==r.value?e.name.localeCompare(t.name):t.epoch-e.epoch)),o.value.length>0&&(s.value=o.value[0])}const d=()=>{p(),l.open_file(s.value.name)},_=async e=>{let t=s.value.name;1==e&&(t="*"),l.delete_file(t)&&a("file_deleted",t),p()},p=()=>{n.value.close()};t({show:()=>{!async function(){i.value="",o.value=await l.list_files(),o.value.forEach((e=>e.label=function(e){let t=1e3*e.epoch,a=ntopng_utility.from_utc_to_server_date_format(t,"DD/MM/YYYY");return`${e.name} (${a})`}(e))),u(),o.value.length>0&&(s.value=o.value[0])}(),n.value.show()},close:p}),_n((()=>{}));const f=e=>i18n(e);return(t,a)=>(Os(),Ls(np,{onShowed:a[4]||(a[4]=e=>{}),ref_key:"modal_id",ref:n},{title:vl((()=>[Ks(te(e.title),1)])),body:vl((()=>[Vs("div",gI,[Vs("label",bI,[Vs("b",null,te(f("order_by")),1)]),Vs("div",yI,[wn(Vs("select",{class:"form-select",onChange:a[0]||(a[0]=e=>u()),"onUpdate:modelValue":a[1]||(a[1]=e=>r.value=e)},[Vs("option",wI,te(f("name")),1),Vs("option",xI,te(f("date")),1)],544),[[Ro,r.value]])])]),Vs("div",kI,[Vs("label",$I,[Vs("b",null,te(e.file_title),1)]),Vs("div",SI,[Hs(l_,{selected_option:s.value,"onUpdate:selected_option":a[2]||(a[2]=e=>s.value=e),options:o.value},null,8,["selected_option","options"])])])])),footer:vl((()=>[Vs("button",{onClick:a[3]||(a[3]=e=>_(!0)),type:"button",style:{"text-align":"left","margin-left":"0px"},class:"btn btn-danger start-0 position-absolute ms-3"},te(f("delete_all_entries")),1),Vs("button",{type:"button",onClick:_,disabled:ya(c),class:"btn btn-danger"},te(f("delete")),9,NI),Vs("button",{type:"button",onClick:d,disabled:ya(c),class:"btn btn-primary"},te(f("open")),9,CI)])),_:1},512))}};lp("\ninput[data-v-1976657e]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-1976657e] {\n  cursor: not-allowed;\n}\n"),EI.__scopeId="data-v-1976657e",EI.__file="http_src/vue/modal-file-open.vue";const AI=e=>(pl("data-v-9db8ba96"),e=e(),fl(),e),TI={class:"form-group ms-2 me-2 mt-3 row"},OI={class:"col-form-label col-sm-4"},PI={class:"col-sm-8"},UI=AI((()=>Vs("span",null," ",-1))),II=["disabled"];var jI={__name:"modal-file-upload",props:{csrf:String,title:String,file_title:String,upload_file:Function},emits:["file_uploaded"],setup(e,{expose:t,emit:a}){const l=e,n=ma(null),s=ma(""),i=ma(""),o=ma(null);function r(){o.value.click()}function c(e){const t=e.target.files;i.value=t[0].name;const l=new FileReader;l.addEventListener("load",(()=>{s.value=l.result})),l.readAsText(t[0]),a("file_uploaded",i.value)}const u=()=>{d(),l.upload_file(s.value)},d=()=>{n.value.close()};t({show:()=>{!async function(){i.value="",s.value=""}(),n.value.show()},close:d}),_n((()=>{}));const _=e=>i18n(e);return(t,a)=>(Os(),Ls(np,{onShowed:a[0]||(a[0]=e=>{}),ref_key:"modal_id",ref:n},{title:vl((()=>[Ks(te(e.title),1)])),body:vl((()=>[Vs("div",TI,[Vs("label",OI,[Vs("b",null,te(e.file_title),1)]),Vs("div",PI,[Vs("button",{type:"button",onClick:r,class:"btn btn-primary"},te(_("upload")),1),UI,wn(Vs("small",null,"No file selected",512),[[Yo,!s.value]]),wn(Vs("small",null,te(i.value),513),[[Yo,i.value]]),Vs("input",{ref_key:"file_input",ref:o,type:"file",accept:"application/JSON",onChange:c,style:{display:"none"}},null,544)])])])),footer:vl((()=>[Vs("button",{type:"button",onClick:u,disabled:!s.value,class:"btn btn-primary"},te(_("open")),9,II)])),_:1},512))}};lp("\ninput[data-v-9db8ba96]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-9db8ba96] {\n  cursor: not-allowed;\n}\n"),jI.__scopeId="data-v-9db8ba96",jI.__file="http_src/vue/modal-file-upload.vue";const MI={class:"form-group ms-2 me-2 mt-3 row",style:{"overflow-y":"scroll",height:"45vh"}},LI=["onClick"],FI={class:"card-body"},RI={class:"form-group wizard-form-group"},DI={class:"form-text text-muted"};var zI={__name:"modal-select-component",props:{csrf:String,title:String,list_components:Function,add_component:Function},emits:[],setup(e,{expose:t,emit:a}){const l=e,n=ma(null),s=ma({}),i=ma([]);ma("date");function o(e){switch(e){case"pie":return"fa-solid fa-chart-pie";case"table":return"fa-solid fa-table";case"timeseries":return"fa-solid fa-chart-line";default:return""}}const r=()=>{n.value.close()};t({show:()=>{!async function(){i.value=await l.list_components(),i.value.length>0&&(s.value=i.value[0])}(),n.value.show()},close:r}),_n((()=>{}));const c=e=>i18n(e);return(t,a)=>(Os(),Ls(np,{onShowed:a[0]||(a[0]=e=>{}),ref_key:"modal_id",ref:n},{title:vl((()=>[Ks(te(e.title),1)])),body:vl((()=>[Vs("div",MI,[(Os(!0),Ms(Ss,null,An(i.value,(e=>(Os(),Ms("div",{class:K(["card w-100 wizard-card",{"wizard-selected":s.value==e}])},[Vs("a",{class:"wizard-link",href:"#",onClick:t=>{s.value=e,r(),l.add_component(s.value)}},[Vs("div",FI,[Vs("div",RI,[Vs("h5",null,[Vs("i",{class:K(o(e.component))},null,2),Ks(" "+te(c(e.i18n_name)),1)]),Vs("small",DI,te(c(e.i18n_descr)),1)])])],8,LI)],2)))),256))])])),footer:vl((()=>[])),_:1},512))}};lp("\ninput[data-v-16713f39]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-16713f39] {\n  cursor: not-allowed;\n}\n"),zI.__scopeId="data-v-16713f39",zI.__file="http_src/vue/modal-select-component.vue";const qI={class:"form-group ms-2 me-2 mt-3 row"},BI={class:"col-sm-2 mt-2"},VI={class:"col-sm-10"},HI={class:"form-group ms-2 me-2 mt-4 row"},GI={class:"col-sm-2 mt-3"},WI={class:"col-sm-6 mt-2"},KI={class:"range"},JI={class:"sliderticks"},YI={class:"form-group ms-2 me-2 mt-3 row"},ZI={class:"col-sm-2 mt-2"},XI={class:"col-sm-9 mt-2"},QI={class:"range"},ej={class:"sliderticks"},tj={key:0,class:"form-group ms-2 me-2 mt-3 row"},aj={class:"col-sm-2 mt-2"},lj={class:"col-sm-5"},nj={class:"form-group ms-2 me-2 mt-3 row"},sj={class:"col-sm-2 mt-2"},ij={class:"col-sm-5"},oj={class:"ms-2 mb-3 mt-4 row"},rj={class:"col-form-label col-sm-3 pe-0",id:"advanced-view"},cj={class:"col-sm-2 ps-0"},uj={class:"form-check form-switch mt-2",id:"advanced-view"},dj={key:1,class:"form-group ms-2 me-2 mt-3 row"},_j={class:"col-sm-12"},pj={key:0,style:{color:"rgba(255, 0, 0, 0.797)"}},fj=["disabled"];var mj={__name:"modal-edit-component",props:{csrf:String},emits:["edit"],setup(e,{expose:t,emit:a}){const l=e=>i18n(e),n=ma(i18n("dashboard.edit_component")),s=ma(null),i=[{id:1,size_component_value:4},{id:2,size_component_value:6},{id:3,size_component_value:12},{id:4,size_component_value:-1}],o=ma([{value:"current",label:l("dashboard.current_time"),default:!0},{value:"5_min",label:l("dashboard.time_window_list.5_min")},{value:"30_min",label:l("dashboard.time_window_list.30_min")},{value:"hour",label:l("dashboard.time_window_list.hour")},{value:"2_hours",label:l("dashboard.time_window_list.2_hours")},{value:"12_hours",label:l("dashboard.time_window_list.12_hours")},{value:"day",label:l("dashboard.time_window_list.day")},{value:"week",label:l("dashboard.time_window_list.week")},{value:"month",label:l("dashboard.time_window_list.month")},{value:"year",label:l("dashboard.time_window_list.year")}]),r=ma([{value:"current",label:l("dashboard.current_time"),default:!0},{value:"hour",label:l("dashboard.time_offset_list.hour")},{value:"day",label:l("dashboard.time_offset_list.day")},{value:"week",label:l("dashboard.time_offset_list.week")},{value:"month",label:l("dashboard.time_offset_list.month")},{value:"year",label:l("dashboard.time_offset_list.year")}]),c=ma(null),u=ma(null),d=ma(null),_=ma(null),p=ma(null),f=ma(null),m=ma(null),v=ma(!1),h=ma(!1),g=ma(!1),b=function(){v.value=!v.value},y=function(){h.value=!1;try{p.value=JSON.stringify(JSON.parse(p.value),null,2)}catch(e){h.value=!0}return p.value},w=function(e,t){return YS.isEmptyOrNull(e)?t.find((e=>e.default)):t.find((t=>t.value==e))},x=function(e){c.value=null,h.value=!1,g.value=e,u.value="",_.value=1,d.value=1},k=e=>{c.value=e,u.value=e.custom_name,d.value=S(e.width),_.value=S(e.height),f.value=w(e.time_window,o.value),m.value=w(e.time_offset,r.value),p.value=JSON.stringify(e.params,null,2)},$=e=>i.find((t=>t.id==Number(e))).size_component_value,S=e=>i.find((t=>t.size_component_value==Number(e))).id,N=()=>{const e=$(d.value),t=$(_.value),l=`${p.value}`;a("edit",{id:c.value.id,title:u.value,height:t,width:e,time_offset:m.value.value,time_window:f.value.value,rest_params:l}),s.value.close()};return t({show:(e,t)=>{x(t),k(e),s.value.show()}}),(e,t)=>(Os(),Ls(np,{ref_key:"modal_id",ref:s},{title:vl((()=>[Ks(te(n.value),1)])),body:vl((()=>[Ys(" Title "),Vs("div",qI,[Vs("label",BI,[Vs("b",null,te(l("dashboard.component_title")),1)]),Vs("div",VI,[wn(Vs("input",{"onUpdate:modelValue":t[0]||(t[0]=e=>u.value=e),class:"form-control",type:"text",required:""},null,512),[[jo,u.value]])])]),Ys(" Width "),Vs("div",HI,[Vs("label",GI,[Vs("b",null,te(l("dashboard.component_width")),1)]),Vs("div",WI,[Vs("div",KI,[wn(Vs("input",{type:"range",id:"slider","onUpdate:modelValue":t[1]||(t[1]=e=>d.value=e),style:{width:"100%"},min:"1",max:"3",step:"1"},null,512),[[jo,d.value]]),Vs("div",JI,[Vs("p",null,te(l("dashboard.component_sizes.small")),1),Vs("p",null,te(l("dashboard.component_sizes.medium")),1),Vs("p",null,te(l("dashboard.component_sizes.large")),1)])])])]),Ys(" Height "),Vs("div",YI,[Vs("label",ZI,[Vs("b",null,te(l("dashboard.component_height")),1)]),Vs("div",XI,[Vs("div",QI,[wn(Vs("input",{type:"range",id:"slider","onUpdate:modelValue":t[2]||(t[2]=e=>_.value=e),style:{width:"100%"},min:"1",max:"4",step:"1"},null,512),[[jo,_.value]]),Vs("div",ej,[Vs("p",null,te(l("dashboard.component_sizes.small")),1),Vs("p",null,te(l("dashboard.component_sizes.medium")),1),Vs("p",null,te(l("dashboard.component_sizes.large")),1),Vs("p",null,te(l("dashboard.component_sizes.auto")),1)])])])]),Ys(" Time Window "),g.value?Ys("v-if",!0):(Os(),Ms("div",tj,[Vs("label",aj,[Vs("b",null,te(l("dashboard.time_window")),1)]),Vs("div",lj,[Hs(l_,{selected_option:f.value,"onUpdate:selected_option":t[3]||(t[3]=e=>f.value=e),options:o.value},null,8,["selected_option","options"])])])),Ys(" Time Offset "),Vs("div",nj,[Vs("label",sj,[Vs("b",null,te(l("dashboard.time_offset")),1)]),Vs("div",ij,[Hs(l_,{selected_option:m.value,"onUpdate:selected_option":t[4]||(t[4]=e=>m.value=e),options:r.value},null,8,["selected_option","options"])])]),Ys(" Advanced Settings "),Vs("div",oj,[Vs("label",rj,[Vs("b",null,te(l("dashboard.advanced_settings")),1)]),Vs("div",cj,[Vs("div",uj,[Vs("input",{name:"show_advanced_settings",class:"form-check-input",type:"checkbox",onInput:b,role:"switch"},null,32)])])]),Ys(" REST Params "),v.value?(Os(),Ms("div",dj,[Vs("div",_j,[h.value?(Os(),Ms("p",pj,te(l("dashboard.component_json_error")),1)):Ys("v-if",!0),wn(Vs("textarea",{class:"highlighted-json","onUpdate:modelValue":t[5]||(t[5]=e=>p.value=e),onFocusout:y,style:{width:"100%",height:"100%"},rows:"16",cols:"10"},null,544),[[jo,p.value]])])])):Ys("v-if",!0)])),footer:vl((()=>[Vs("div",null,[Vs("button",{type:"button",onClick:N,disabled:h.value,class:"btn btn-primary"},te(l("apply")),9,fj)])])),_:1},512))},__file:"http_src/vue/modal-edit-component.vue"};const vj={class:"mb-1 me-3",style:{position:"absolute",bottom:"0px",right:"0px"}};var hj={__name:"dashboard-box",props:{color:String,width:Number,height:Number},setup(e){const t=e,a=wi((()=>`col-${t.width||4}`)),l=wi((()=>{let e="";return t.color&&(e=`bg-${t.color}`),`row-${t.height||4} ${e}`}));return(e,t)=>(Os(),Ms("div",{class:K([ya(a),"widget-box-main-dashboard"])},[Vs("div",{class:K([ya(l),"widget-box"]),style:{position:"relative"}},[Ys(" title "),On(e.$slots,"box_title"),Ys(" content "),On(e.$slots,"box_content"),Ys(" footer "),Vs("div",vj,[On(e.$slots,"box_footer")])],2)],2))},__file:"http_src/vue/dashboard-box.vue"},gj={__name:"dashboard-empty",props:{id:String,i18n_title:String,ifid:String,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function,filters:Object},setup(e){const t=e;async function a(){}return jl((()=>[t.epoch_begin,t.epoch_end,t.filters]),((e,t)=>{a()}),{flush:"pre",deep:!0}),dn((()=>{a()})),_n((()=>{})),(e,t)=>(Os(),Ms("div"))},__file:"http_src/vue/dashboard-empty.vue"};const bj={class:"table-responsive",style:{"margin-left":"-1rem","margin-right":"-1rem"}};var yj={__name:"dashboard-table",props:{id:String,i18n_title:String,ifid:String,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function,filters:Object},setup(e){const t=e,l=ma("simple_table"),n=ma([]),s=wi((()=>{let e=t.params.columns.map((e=>(!e.style&&e.data_type&&("bytes"==e.data_type||"date"==e.data_type?e.style="text-align: right":"count_score"==e.data_type&&(e.style="text-align: center")),{...e})));return e[0].class=(e[0].class?e[0].class+" ":"")+"first-col-width",e}));jl((()=>[t.epoch_begin,t.epoch_end,t.filters]),((e,t)=>{c()}),{flush:"pre",deep:!0}),dn((()=>{c()})),_n((()=>{}));const i=function(e){return e.i18n_name?(e=>i18n(e))(e.i18n_name):""},o={throughput:function(e,t){return"name"==e.id?t.url?`<a href='${t.url}'>${t.name}</a>`:t.name:"throughput"==e.id?t.throughput_type&&"pps"==t.throughput_type?a.fpackets(t[e.id]):t.throughput_type&&"bps"==t.throughput_type?a.bitsToSize(t[e.id]):t.throughput:""},db_search:function(e,t){if("host"==e.data_type)return a.formatHost(t[e.id],t,"cli_ip"==e.id);if("network"==e.data_type)return a.formatNetwork(t[e.id],t);if("asn"==e.data_type)return a.formatASN(t[e.id],t);if("country"==e.data_type)return a.formatCountry(t[e.id],t);if(m.types[e.data_type]){return m.getFormatter(e.data_type)(t[e.id])}return"object"==typeof t[e.id]?a.formatGenericObj(t[e.id],t):t[e.id]},vs_scan_result:function(e,a){return"host"==e.id?MP(a[e.id],a,t.ifid):"last_scan"==e.id?NP(a[e.id],a):"duration"==e.id?CP(a[e.id],a):"scan_frequency"==e.id?EP(a[e.id]):"is_ok_last_scan"==e.id?AP(a[e.id]):"tcp_ports"==e.id?UP(a[e.id],a):"udp_ports"==e.id?PP(a[e.id],a):"scan_type"==e.id?SP(a[e.id],!0,a):"hosts"==e.id?((e,t)=>{const a=e.split(", ");let l="",n=new Map;return a.forEach((e=>{let t=e.split("|");n.set(t.length>5&&null!=t[5]&&""!=t[5]?t[5]:t[0],{scan_type:t[1],ip:t[0],date:t[2].replace(" ","_"),is_ipv4:"true"==t[3],epoch:t[4]})})),n=new Map([...n.entries()].sort()),n.forEach(((e,t)=>{let a=jP(e.ip,e.scan_type,e.date,e.epoch);e.is_ipv4?l+=`<li> <a href="${a}">${t}</a></li>`:l+=`<li> <a href="${a}">${t} <span class="badge bg-secondary">${i18n("ipv6")}</span></a></li>`})),l})(a[e.id]):"cve"==e.id||"cve_list"==e.id?((e,t)=>{let a="",l=0;if(1==t.is_ok_last_scan&&null!=t.last_scan&&null!=t.last_scan.time&&null!=e){let n=new Map;e.forEach((e=>{let t=e.split("|"),a=0;t.length>1&&(a=Number(t[1])),n.set(t[0],a)})),n=new Map([...n.entries()].sort(((e,t)=>t[1]-e[1]))),n.forEach(((e,n)=>{if(!(l<100))return a;{let s="";s=0==e?"bg-success":e<3.9?"bg-secondary":e<7?"bg-warning":"bg-danger";const i=ntopng_utility.get_cve_details_url(n,t.scan_type);a+=`<li  title='${i18n("hosts_stats.page_scan_hosts.report.cves_title")}'>\n                        <a href="${i}"><span class="badge ${s}">${n} </span></a> \n                        (${e})\n                    </li>`,l++}}))}return a})(a[e.id],a):"port"==e.id?((e,t)=>{let a=e;return null!=t.port_label&&t.port_label!=e&&(a+=` (${t.port_label})`),a})(a[e.id],a):"max_score_cve"==e.id?$P(a[e.id],a):"num_vulnerabilities_found"==e.id?kP(a[e.id],a):"tcp_udp_ports_list"==e.id?((e,t,a)=>{let l=new Map;if(1==a.is_ok_last_scan&&null!=a.last_scan&&null!=a.last_scan.time&&null!=e){const t=e.split(",");let n="",s="";t.forEach((e=>{if(null!=e&&""!=e){if(n=e,s=e,a.host_in_mem){const t=IP(e,0,a.tcp_ports_unused,a.tcp_ports_filtered);null!=t&&(n+=t)}n=`<li>${n}</li>`,l.set(e,{port_label:n,port_id:Number(s.split("/")[0])})}})),null!=a.tcp_ports_filtered&&a.tcp_ports_filtered.forEach((e=>{n=e+="/tcp",s=e,a.host_in_mem&&(n+=` <span class="badge bg-primary" title='${i18n("hosts_stats.page_scan_hosts.filtered_port")}'><i class="fa-solid fa-filter"></i></span>`),n=`<li>${n}</li>`,l.set(e,{port_label:n,port_id:Number(s.split("/")[0])})}))}if(1==a.is_ok_last_scan&&null!=a.last_scan&&null!=a.last_scan.time&&null!=t){const e=t.split(",");let n="",s="";e.forEach((e=>{if(null!=e&&""!=e){if(n=e,s=e,a.host_in_mem){const t=IP(e,0,a.udp_ports_unused,a.udp_ports_filtered);null!=t&&(n+=t)}n=`<li>${n}</li>`,l.set(e,{port_label:n,port_id:Number(s.split("/")[0])})}})),null!=a.udp_filtered_ports&&a.udp_ports_filtered.forEach((e=>{n=e+="/udp",s=e,a.host_in_mem&&(n+=` <span class="badge bg-primary" title='${i18n("hosts_stats.page_scan_hosts.filtered_port")}'><i class="fa-solid fa-filter"></i></span>`),n=`<li>${e}</li>`,l.set(e,{port_label:n,port_id:Number(s.split("/")[0])})}))}let n="";return l=new Map([...l.entries()].sort(((e,t)=>e[1].port_id-t[1].port_id))),l.forEach(((e,t)=>{n+=`${e.port_label}`})),n})(a.tcp_ports_list,a.udp_ports_list,a):"discovered_hosts"==e.id?(e=>{const t=e.split(",");let a="";return t.forEach((e=>{""!=e&&(a+=`<li>${e}</li>`)})),a})(a[e.id]):a[e.id]}},r=function(e,a){if(t.params&&t.params.table_type&&o[t.params.table_type]){return(0,o[t.params.table_type])(e,a)}return a[e.id]?a[e.id]:""};async function c(){const e={ifid:t.ifid,epoch_begin:t.epoch_begin,epoch_end:t.epoch_end,...t.params.url_params,...t.filters},a=ntopng_url_manager.obj_to_url_params(e);let l=await t.get_component_data(`${http_prefix}${t.params.url}`,a),s=[];if(s="db_search"==t.params.table_type?l.records:l,"vs_scan_result"!=t.params.table_type){const e=t.max_height?t.max_height/4*6:6;s=s.slice(0,e)}n.value=s}return(e,t)=>(Os(),Ms("div",bj,[Hs(Pw,{id:l.value,columns:ya(s),rows:n.value,print_html_column:i,print_html_row:r,wrap_columns:!0},null,8,["id","columns","rows"])]))}};lp("\n.first-col-width {\n    /* max-width: 100% !important; */\n}\n@media print and (max-width: 210mm) {\ntd.first-col-width {\n\tmax-width: 55mm !important;\n}\n}\n@media print and (min-width: 211mm) {\ntd.first-col-width {\n\tmax-width: 95mm !important;\n}\n}\n\n/* @media print and (max-width: 148mm){ */\n/* } */\n\n"),yj.__file="http_src/vue/dashboard-table.vue";const wj={class:"d-flex align-items-center justify-content-between"},xj=["href"],kj={class:"fw-normal text-white"},$j={class:"subtitle text-white text-sm text mb-0 h5"},Sj={class:"flex-shrink-0 ms-3"};var Nj={__name:"dashboard-badge",props:{id:String,i18n_title:String,ifid:String,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function,set_component_attr:Function,filters:Object},setup(e){const t=e,a=ma(""),l=ma(""),n=ma(""),s=ma("#");async function i(){if(t.params.url){const e={ifid:t.ifid,epoch_begin:t.epoch_begin,epoch_end:t.epoch_end,...t.params.url_params,...t.filters},l=ntopng_url_manager.obj_to_url_params(e);let n=await t.get_component_data(`${http_prefix}${t.params.url}`,l),i=n[t.params.counter_path],o=n[t.params.counter_formatter];o||(o="number");let r=m.getFormatter(o);if(a.value=r(i),i&&t.set_component_attr("active",!0),t.params.link){const e={ifid:t.ifid,epoch_begin:t.epoch_begin,epoch_end:t.epoch_end,...t.params.link.url_params},a=ntopng_url_manager.obj_to_url_params(e);s.value=`${http_prefix}${t.params.link.url}?${a}`}}}return jl((()=>[t.epoch_begin,t.epoch_end,t.filters]),((e,t)=>{i()}),{flush:"pre",deep:!0}),dn((()=>{!function(){t.params.i18n_name&&(l.value=(e=>i18n(e))(t.params.i18n_name));t.params.icon&&(n.value=t.params.icon+" fa-2xl");i()}()})),_n((()=>{})),(e,t)=>(Os(),Ms("div",wj,[Vs("div",null,[Vs("a",{href:s.value},[Vs("h4",kj,te(a.value),1),Vs("p",$j,te(l.value),1)],8,xj)]),Vs("div",Sj,[Vs("i",{class:K(["text-white",n.value])},null,2)])]))},__file:"http_src/vue/dashboard-badge.vue"},Cj={__name:"dashboard-pie",props:{id:String,i18n_title:String,ifid:String,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function,filters:Object},setup(e){const t=e,a=ma(ntopChartApex.typeChart.DONUT),l=ma(null),n=wi((()=>`${http_prefix}${t.params.url}`));function s(){const e=n.value,a=(()=>{const e={ifid:t.ifid,epoch_begin:t.epoch_begin,epoch_end:t.epoch_end,new_charts:!0,...t.params.url_params,...t.filters};let a=ntopng_url_manager.obj_to_url_params(e);return a=a.replaceAll("%24IFID%24",t.ifid),a})();return t.get_component_data(e,a)}return jl((()=>[t.epoch_begin,t.epoch_end,t.filters]),((e,t)=>{!async function(){l.value.update_chart()}()}),{flush:"pre",deep:!0}),dn((()=>{})),_n((()=>{})),(t,i)=>(Os(),Ms("div",null,[Hs(C_,{ref_key:"chart",ref:l,id:e.id,chart_type:a.value,base_url_request:ya(n),get_custom_chart_options:s,register_on_status_change:!1},null,8,["id","chart_type","base_url_request"])]))},__file:"http_src/vue/dashboard-pie.vue"},Ej={__name:"dashboard-timeseries",props:{id:String,i18n_title:String,ifid:String,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function,csrf:String,filters:Object},setup(e){const t=e,a=ma(ntopChartApex.typeChart.TS_LINE),l=ma(null),n=ma([]),s=Uy.getGroupOptionMode("1_chart_x_yaxis"),i=ma(null),o=ma([]),r=wi((()=>`${http_prefix}${t.params.url}`));function c(e,t){let a={};for(const l in e)e[l].contains("$IFID$")?a[l]=e[l].replace("$IFID$",t):a[l]=e[l];return a}async function u(e){if(o.value.length>0)return;(await ntopng_utility.http_request(`${http_prefix}/lua/rest/v2/get/ntopng/interfaces.lua`)||[]).forEach((t=>{let a=c(e,t.ifid);a.source_def=[t.ifid],o.value.push(a)}))}async function d(e){if(o.value.length>0)return;const a=await ntopng_utility.http_request(`${http_prefix}/lua/pro/rest/v2/get/flowdevices/stats.lua?ifid=${t.ifid}&gui=true`)||[];a&&a.forEach((t=>{if(t){let a=function(e,t){let a={};for(const l in e)e[l].contains("$EXPORTER$")?a[l]=e[l].replace("$EXPORTER$",t):a[l]=e[l];return a}(e,t.probe_ip);a=c(a,t.ifid),a.source_def=[t.ifid,t.probe_ip],o.value.push(a)}}))}async function _(e){if(o.value.length>0)return;const a=await ntopng_utility.http_request(`${http_prefix}/lua/rest/v2/get/network/networks.lua?ifid=${t.ifid}`)||[];a&&a.forEach((a=>{if(a){let l=function(e,t){let a={};for(const l in e)e[l].contains("$NETWORK$")?a[l]=e[l].replace("$NETWORK$",t):a[l]=e[l];return a}(e,a.id);l=c(l,t.ifid),l.source_def=[t.ifid,a.id],o.value.push(l)}}))}async function p(e,a){const l={epoch_begin:t.epoch_begin,epoch_end:t.epoch_end},n=Jb.get_source_type_from_id(t.params?.source_type),s=await Jb.get_source_array_from_value_array(http_prefix,n,a),i=await Jb.get_metric_from_schema(http_prefix,n,s,e,null,l);return Jb.get_ts_group(n,s,i,{past:!1})}async function f(){await async function(){o.value=[];const e=t.params.post_params?.ts_requests;for(const a in e||{})switch(a){case"$ANY_IFID$":await u(e[a]);break;case"$ANY_EXPORTER$":await d(e[a]);break;case"$ANY_NETWORK$":await _(e[a]);break;default:let l=c(e[a],t.ifid);l.source_def=[t.ifid],o.value.push(l)}}(),await async function(){if(0==n.value.length)for(const e of o.value){const t=e?.ts_schema,a=e.source_def;delete e.source_def;const l=await p(t,a);n.value.push(l)}}(),function(){for(const e of o.value)e.source_def&&delete e.source_def}();const e=r.value,a={csrf:t.csrf,ifid:t.ifid,epoch_begin:t.epoch_begin,epoch_end:t.epoch_end,...t.params.post_params,ts_requests:o.value};let l=await t.get_component_data(e,"",a);return l=Uy.tsArrayToOptionsArray(l,n.value,s,""),l[0]&&(l[0].height=i.value),l?.[0]}return jl((()=>[t.epoch_begin,t.epoch_end,t.filters]),((e,t)=>{!async function(){if(l.value){const e=await f();l.value.update_chart_series(e.data)}}()}),{flush:"pre",deep:!0}),dn((async()=>{await async function(){i.value=62.5*(t.max_height||4)}()})),_n((async()=>{})),(t,n)=>(Os(),Ms("div",null,[Hs(Ag,{ref_key:"chart",ref:l,id:e.id,chart_type:a.value,base_url_request:ya(r),get_custom_chart_options:f,register_on_status_change:!1,disable_pointer_events:!1},null,8,["id","chart_type","base_url_request"])]))},__file:"http_src/vue/dashboard-timeseries.vue"},Aj={__name:"dashboard-sankey",props:{id:String,i18n_title:String,ifid:String,epoch_begin:Number,epoch_end:Number,max_width:Number,max_height:Number,params:Object,get_component_data:Function,filters:Object},setup(e){const t=e,a=(e=>i18n(e))("ports_analysis.no_data"),l=ma(null),n=ma({}),s=ma(null),i=ma(null),o=ma(null);jl((()=>[t.epoch_begin,t.epoch_end,t.filters]),((e,t)=>{r()}),{flush:"pre",deep:!0}),dn((()=>{})),_n((()=>{o.value=62.5*t.max_height,i.value=$(s.value).width(),r()}));const r=function(){!async function(){let e=await async function(){const e=`${http_prefix}${t.params.url}`,a={ifid:t.ifid,epoch_begin:t.epoch_begin,epoch_end:t.epoch_end,sankey_version:3,...t.params.url_params,...t.filters};let n=ntopng_url_manager.obj_to_url_params(a),s=await t.get_component_data(e,n);s=function(e){let t=e=>console.error(`link (source: ${e.source_node_id}, target: ${e.target_node_id}) removed for not existing source/target node`),a=function(e,t){let a={};e.nodes.forEach((e=>a[e.node_id]=!0));let l=e=>null!=a[e.source_node_id]&&null!=a[e.target_node_id],n=function(e,t,a){return e.filter((e=>{const l=t(e);return 0==l&&null!=a&&a(e),l}))}(e.links,l,t);return n}(e,t);return{nodes:e.nodes,links:a}}(s);const i=function(e){let t={},a={};e.nodes.forEach((e=>t[e.node_id]=e));let l=e=>`${e.source_node_id}_${e.label}`;e.links.forEach((e=>{let n=l(e),s=a[n];null==s&&(s={id:n,label:e.label,link:e.optional_info.link,node_links:[]},a[n]=s),s.node_links.push({source:t[e.source_node_id],target:t[e.target_node_id],value:e.value})}));let n=e.nodes.map((e=>e)),s=[];for(let e in a){let t=a[e],l={node_id:t.id,label:t.label,link:t.link};n.push(l),t.node_links.forEach((e=>{s.push({source_node_id:e.source.node_id,target_node_id:l.node_id,label:`${e.source.label} - ${e.target.label}: ${l.label}`,value:e.value}),s.push({source_node_id:l.node_id,target_node_id:e.target.node_id,label:`${e.source.label} - ${e.target.label}: ${l.label}`,value:e.value})}))}let i=n.map(((e,t)=>({index:t,label:e.label,data:e}))),o={};i.forEach(((e,t)=>o[e.data.node_id]=e));let r=s.map((e=>({source:o[e.source_node_id].index,target:o[e.target_node_id].index,value:e.value,label:e.label})));return{nodes:i,links:r}}(s);return i.links.length>0&&i.nodes.length>0?l.value.set_no_data_flag(!1):l.value.set_no_data_flag(!0),i}();n.value=e}()};function c(e){1!=e.is_link_node&&e.link&&ntopng_url_manager.go_to_url(e.link)}return(e,t)=>(Os(),Ms("div",{ref_key:"body_div",ref:s},[Hs(LS,{ref_key:"sankey_chart",ref:l,width:i.value,height:o.value,no_data_message:ya(a),sankey_data:n.value,onNode_click:c},null,8,["width","height","no_data_message","sankey_data"])],512))},__file:"http_src/vue/dashboard-sankey.vue"};const Tj=e=>(pl("data-v-c360f212"),e=e(),fl(),e),Oj={class:"row"},Pj={class:"me-2"},Uj=["title"],Ij=[Tj((()=>Vs("i",{class:"fa-solid fa-floppy-disk"},null,-1)))],jj=["title"],Mj=[Tj((()=>Vs("i",{class:"fa-solid fa-folder-open"},null,-1)))],Lj=["title"],Fj=[Tj((()=>Vs("i",{class:"fa-solid fa-file-arrow-down"},null,-1)))],Rj=["title"],Dj=[Tj((()=>Vs("i",{class:"fa-solid fa-file-arrow-up"},null,-1)))],zj=["title"],qj=[Tj((()=>Vs("i",{class:"fas fa-print"},null,-1)))],Bj=["title"],Vj=[Tj((()=>Vs("i",{class:"fas fa-folder-plus"},null,-1)))],Hj=["title"],Gj=[Tj((()=>Vs("i",{class:"fas fa-pen-to-square"},null,-1)))],Wj={class:"btn-group me-auto mt-2 btn-group-sm flex-wrap d-flex"},Kj={class:"me-2"},Jj={class:"ms-1 my-auto me-2 filters-label"},Yj={key:0,class:"d-flex align-items-center ms-2"},Zj={class:"me-2"},Xj=Tj((()=>Vs("div",null,[Vs("label",{class:"my-auto me-2"})],-1))),Qj={key:1,class:"me-auto mt-2 flex-wrap d-flex"},eM=["title"],tM=[Tj((()=>Vs("i",{class:"fas fa-square-plus"},null,-1)))],aM=["title"],lM=[Tj((()=>Vs("i",{class:"fas fa-trash-can"},null,-1)))],nM={class:"text-warning",style:{"margin-top":"0.5rem","margin-left":"1rem"}},sM={key:2,class:"mt-3",style:{"margin-bottom":"-0.5rem",display:"inline"}},iM={style:{"text-align":"center"}},oM={key:0},rM=["title"],cM=[Tj((()=>Vs("i",{class:"fa-solid fa-file-arrow-down"},null,-1)))],uM=["title"],dM=[Tj((()=>Vs("i",{class:"fa-solid fa-file-arrow-up"},null,-1)))],_M=["title"],pM=[Tj((()=>Vs("i",{class:"fas fa-print"},null,-1)))],fM={key:0,class:"col-sm mt-1"},mM={class:"alert alert-warning"},vM={key:1,class:"col-sm mt-1"},hM={class:"alert alert-secondary sm-1 text-center",style:{width:"40%",margin:"auto","margin-top":"5vh","margin-bottom":"5vh"}},gM={class:"alert-heading"},bM={class:"mb-0"},yM={key:0,class:"dashboard-component-title modal-header"},wM={class:"modal-title"},xM={style:{color:"gray"}},kM={key:0,class:"modal-close"},$M={class:"btn-group"},SM=["data-component-id"],NM=["data-component-id"],CM={key:0,style:{color:"lightgray","font-size":"12px"}};var EM={__name:"dashboard",props:{context:Object},setup(e){const t=e,a=e=>i18n(e),l=b.get_timeframes_dict(),n={badge:Nj,empty:gj,pie:Cj,timeseries:Ej,table:yj,sankey:Aj},s=ma(!0),i=t.context.show_loading||!1,o=t.context.allow_edit||!1,r=ma(null),c=ma(null),u=ma(null),d=ma(null),_=ma(null),p=ma(null),f=ma(null),m=ma(null),v=ma([]),h=ma(!1),g=ma({}),w=ma({}),k=ma({}),$=ma([]),S=ma([]),N=ma([]),E=ma({}),A=ma("");let T={},O=!1,P=!1;const U=ma(!1);let I=null;const j=ma(null),M=wi((()=>"report"!=t.context.page&&"vs-report"!=t.context.page)),L=wi((()=>"report"==t.context.page&&!P)),F=wi((()=>"vs-report"==t.context.page)),R=wi((()=>!0)),D=wi((()=>1==E.value?.toolbox?.time?.hide)),z=wi((()=>1==E.value.is_open_report||D.value)),q=wi((()=>1==E.value.is_open_report||"vs-report"==t.context.page)),B=wi((()=>{let e="";return E.value.is_open_report?e=`Report: ${E.value.value}`:t.context.title&&(e=t.context.title),e})),H=wi((()=>e=>null==e.params.custom_style||P&&!e.params.custom_print_style?e.params.custom_print_style&&1==P?e.params.custom_print_style:"":e.params.custom_style)),G=wi((()=>e=>ye(e.epoch_begin,e.epoch_end)));async function W(e){let a=null;P="true"==x.get_url_entry("printable"),"report"!=t.context.page&&"vs-report"!=t.context.page||("report"==t.context.page?a=b.check_and_set_default_time_interval(void 0,void 0,!0,"min"):"vs-report"==t.context.page&&(a=b.check_and_set_default_time_interval(void 0,void 0,!0)),m.value=a),await async function(e){const a=t.context.template_list_endpoint;let l=await b.http_request(a);if(null==l?.list)return;let n=l.list.map((e=>({value:e.name,label:e.label,disabled:!1,toolbox:e.toolbox,is_open_report:!1,allow_edit:e.allow_edit})));n.sort(((e,t)=>e.label.toUpperCase().localeCompare(t.label.toUpperCase()))),N.value=n;const s=e||x.get_url_entry("report_template")||t.context.template;t.context.template=s,E.value=N.value.find((e=>e.value==s)),null==E.value&&(E.value=N.value[0]);!E.value.allow_edit&&U.value&&Te()}(e);let l=x.get_url_entry("report_name");null!=l&&""!=l?await pe(l):await Q(a,E.value.value),1==P&&we(),h.value=!0}dn((async()=>{W()})),_n((async()=>{"dashboard"==t.context.page&&setInterval((()=>{Y()}),1e4)}));function J(e,t){t&&(t+=";eq"),x.set_key_to_url(e,t),v.value.forEach(((a,l)=>{!function(e,t,a){e.filters[t]=a}(a,e,t)}))}function Y(e){e&&(m.value=e),v.value.forEach(((t,a)=>{ee(t,e)}))}function Z(){for(const[e,t]of Object.entries(w.value))J(e,t[0].value),g.value[e]=t[0],ae(e)}async function X(e,a){const l=[];return!a&&`${t.context.report_filters_endpoint}`&&(a=await b.http_request(`${t.context.report_filters_endpoint}`)),e.forEach((async e=>{const t=e?.name||"",n=a.find((e=>e.id==t))?.options;if(n&&n.length>1){let s=i18n("db_search.all."+t);YS.isEmptyOrNull(s)&&(s=i18n("all")+" "+i18n("db_search."+t)),n.unshift({value:null,label:s}),w.value[t]=n,g.value[t]=n[0],k.value[t]=n,l.push(t);const i=e?.nested||[];i.length>0&&(S.value[t]=await X(i,a))}})),l}async function Q(e,a){O=!1;let l=`${t.context.template_endpoint}?template=${a}`,s=await b.http_request(l);v.value=s.list.filter((e=>null!=n[e.component])).map(((t,a)=>{let l={filters:{},component_id:`auto_${t.id}_${a}`,...t};return ee(l,e),l})),Z(),s.filters&&($.value=await X(s.filters)),await Ja()}function ee(e,t){const a=l[e.time_window||"5_min"];if(null==t){const e=b.get_utc_seconds();t={epoch_begin:e-a,epoch_end:e}}const n=l[e.time_offset]||0;e.epoch_begin=t.epoch_begin-n,e.epoch_end=t.epoch_end-n}function ae(e){const t=S.value[e];t?.forEach((e=>{if($.value.includes(e)){$.value=$.value.filter((t=>t!=e));const t=w.value[e][0];g.value[e]=t,J(e,t.value)}}))}function le(e,t){const a=S.value[e];a?.forEach((a=>{const l=w.value[a],n=[];if(t==e){const e=w.value[a][0];g.value[a]=e,J(a,e.value)}if(l?.forEach((t=>{t.show_only_value!==g.value[e].value&&null!=t.value||n.push(t)})),!$.value.includes(a)){const t=$.value.indexOf(e);$.value.splice(t+1,0,a)}n.length>0?k.value[a]=n:delete k.value[a]}))}function ne(){if(!E.value.allow_edit&&U.value&&Te(),1==P&&we(),1==E.value.is_open_report)return;T={},fe();const e=y.get_status(!0);let a={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end};1==O&&(a=b.set_default_time_interval(void 0,"min"),C.emit_event(ntopng_events.EPOCH_CHANGE,a,t.context.page)),Q(a,E.value.value)}function se(){c.value.show()}function ie(){u.value.show()}function oe(){d.value.show()}function re(){let e="report";return"vs-report"==t.context.page?e=t.context.title:m.value&&m.value.epoch_end&&(e+="-"+b.from_utc_to_server_date_format(1e3*m.value.epoch_end,"DD-MM-YYYY")),e}const ce=async e=>{let t=JSON.parse(e);ue(t,t.name),x.delete_key_from_url("report_name")};function ue(e,a){fe(a);const l={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end};C.emit_event(ntopng_events.EPOCH_CHANGE,l,t.context.page),_e(e)}const de=async()=>{let e=`${t.context.report_list_endpoint}?ifid=${t.context.ifid}`,a=await b.http_request(e);return b.object_to_array(a)},_e=async e=>{let t={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end},a=e.template,l=e.data,n={};for(let e in l){let t={data:l[e]};n[e]=t}O=!0,T=n,v.value=a,Y(t)},pe=async e=>{let l=`${t.context.report_open_endpoint}?ifid=${t.context.ifid}&report_name=${e}`,n=await b.http_request(l);n?(ue(n,e),A.value=""):A.value=a("report.unable_to_open")};function fe(e){if(N.value=N.value.filter((e=>0==e.is_open_report)),null==e)return x.set_key_to_url("report_template",E.value.value),t.context.template=E.value.value,void x.delete_key_from_url("report_name");let l={value:e,label:a("dashboard.custom"),disabled:!1,toolbox:null,is_open_report:!0,allow_edit:!1};N.value.push(l),E.value=l,t.context.template=e,x.set_key_to_url("report_name",E.value.value),x.delete_key_from_url("report_template")}const me=async e=>{let a=!1,l={csrf:t.context.csrf,ifid:t.context.ifid,report_name:e},n=`${t.context.report_delete_endpoint}`;try{let e={"Content-Type":"application/json"};await b.http_request(n,{method:"post",headers:e,body:JSON.stringify(l)}),a=!0}catch(e){console.error(e)}return a},ve=async e=>{let t={};for(var a in T)t[a]=await T[a].data;let l={version:"1.0",name:e,template:v.value,data:t};return m.value&&m.value.epoch_begin&&m.value.epoch_end&&(l.epoch_begin=m.value.epoch_begin,l.epoch_end=m.value.epoch_end),JSON.stringify(l)},he=async e=>{let a=!1,l={csrf:t.context.csrf,ifid:t.context.ifid,report_name:e,content:await ve(e)},n=`${t.context.report_store_endpoint}`;try{let e={"Content-Type":"application/json"};await b.http_request(n,{method:"post",headers:e,body:JSON.stringify(l)}),a=!0}catch(e){console.error(e)}return a};async function ge(){var e=re(),t=e+".json",a=await ve(e),l=document.createElement("a");l.setAttribute("href","data:text/plain;charset=utf-8,"+encodeURIComponent(a)),l.setAttribute("download",t),l.style.display="none",document.body.appendChild(l),l.click(),document.body.removeChild(l)}function be(){if(1==P)return window.print(),!1;let e=x.get_url_object();e.printable=!0;const t=x.obj_to_url_params(e);let a=`${window.location.origin}${window.location.pathname}?${t}`;x.open_new_window(a)}function ye(e,t){if(1==D.value)return"";const a=1e3*e,l=1e3*t,n=b.from_utc_to_server_date_format(a,"DD/MM/YYYY"),s=b.from_utc_to_server_date_format(a,"HH:mm:ss"),i=b.from_utc_to_server_date_format(l,"DD/MM/YYYY"),o=b.from_utc_to_server_date_format(l,"HH:mm:ss");return`${`${n} ${s}`} - ${n==i?`${o}`:`${i} ${o}`}`}function we(){const e=y.get_status(!0),t=ye(e.epoch_begin,e.epoch_end);let a=`ntopng - Report ${E.value.label} ${t}`;document.title=a}function xe(e){return async(t,a)=>{e[t]=a}}function ke(){j.value.show()}function $e(){return"New Template"}const Se=async e=>{let a=!1,l={csrf:t.context.csrf,template_name:e},n=`${t.context.template_add_endpoint}`;try{let e={"Content-Type":"application/json"},t=await b.http_request(n,{method:"post",headers:e,body:JSON.stringify(l)});t&&t.template_id&&await W(t.template_id),a=!0}catch(e){console.error(e)}return a};async function Ne(e){let a=v.value.map((e=>e.id)),l={csrf:t.context.csrf,template:E.value.value,components:a.toString()},n=!1,s=`${t.context.template_edit_endpoint}`;try{let e={"Content-Type":"application/json"};await b.http_request(s,{method:"post",headers:e,body:JSON.stringify(l)});n=!0}catch(e){console.error(e)}return n}async function Ce(e){let t=I.toArray().map((e=>v.value.find((t=>t.id==e))));Ae(),v.value=t,await Ja(),Ee(),Ne()}function Ee(){if(!I){var e=document.getElementById("drag-zone");I=window.Sortable.create(e,{draggable:".drag-item",dataIdAttr:"id",onUpdate:Ce})}}function Ae(){I&&(I.destroy(),I=null)}function Te(){U.value=!U.value,U.value?Ee():Ae()}const Oe=async()=>{let e=`${t.context.template_list_widgets_endpoint}`,l=await b.http_request(e);if(null==l?.list)return{};let n=l.list;return n.sort(((e,t)=>a(e.i18n_name).toUpperCase().localeCompare(a(t.i18n_name).toUpperCase()))),n};function Pe(){_.value.show()}function Ue(){f.value.show()}const Ie=async e=>{Ae();let l=`${t.context.template_component_add_endpoint}`,n={csrf:t.context.csrf,template:t.context.template,component:e.id},s={"Content-Type":"application/json"};try{await b.http_request(l,{method:"post",headers:s,body:JSON.stringify(n)});A.value="",await W(E.value.value)}catch(e){A.value=a("report.unable_to_open")}await Ja(),Ee()};async function je(e){Ae();const t=e.target.dataset.componentId;v.value=v.value.filter((e=>e.id!==t)),await Ja(),Ee(),Ne()}function Me(e){const a=e.target.dataset.componentId,l=v.value.find((e=>e.id===a)),n="report"==t.context.page;p.value.show(l,n)}async function Le(e){Ae();let l=`${t.context.template_component_edit_endpoint}`,n={csrf:t.context.csrf,template:t.context.template,component:e.id,component_title:e.title,component_height:e.height,component_width:e.width,component_time_offset:e.time_offset,component_time_window:e.time_window,component_params:e.rest_params},s={"Content-Type":"application/json"};try{await b.http_request(l,{method:"post",headers:s,body:JSON.stringify(n)});A.value="",await W(E.value.value)}catch(e){A.value=a("report.unable_to_open")}await Ja(),Ee()}async function Fe(){let e=!1,a={csrf:t.context.csrf,template:E.value.value},l=`${t.context.template_delete_endpoint}`;try{let t={"Content-Type":"application/json"};await b.http_request(l,{method:"post",headers:t,body:JSON.stringify(a)});await W(),e=!0}catch(e){console.error(e)}return e}return(t,l)=>(Os(),Ms(Ss,null,[Vs("div",Oj,[Ys(' <Dropdown v-for="(t, t_index) in top_table_array" '),Ys('           :ref="el => { top_table_dropdown_array[t_index] = el }"> '),Ys("   <template v-slot:title> "),Ys('     <Spinner :show="t.show_spinner" size="1rem" class="me-1"></Spinner> '),Ys('     <a class="ntopng-truncate" :title="t.title">{{ t.label }}</a> '),Ys("   </template> "),Ys("   <template v-slot:menu> "),Ys('     <a v-for="opt in t.options" style="cursor:pointer; display: block;" '),Ys('        @click="add_top_table_filter(opt, $event)" class="ntopng-truncate tag-filter " '),Ys('        :title="opt.value">{{ opt.label }}</a> '),Ys("   </template>     "),Ys(" </Dropdown> "),ya(L)?(Os(),Ls(A_,{key:0,class:"dontprint",disabled_date_picker:ya(z),id:"dashboard-date-time-picker",round_time:!0,min_time_interval_id:"min",onEpoch_change:Y},{begin:vl((()=>[Vs("div",Pj,[Hs(l_,{selected_option:E.value,"onUpdate:selected_option":l[0]||(l[0]=e=>E.value=e),options:N.value,onSelect_option:ne},null,8,["selected_option","options"])])])),extra_buttons:vl((()=>[Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:se,title:a("dashboard.store")},Ij,8,Uj),Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:ie,title:a("dashboard.open")},Mj,8,jj),Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:ge,title:a("download")},Fj,8,Lj),Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:oe,title:a("upload")},Dj,8,Rj),Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:be,title:a("dashboard.print")},qj,8,zj),ya(o)?(Os(),Ms("button",{key:0,class:"btn btn-link btn-sm",type:"button",onClick:ke,title:a("dashboard.new_template")},Vj,8,Bj)):Ys("v-if",!0),ya(o)&&E.value.allow_edit?(Os(),Ms("button",{key:1,class:K(["btn btn-link btn-sm",U.value?"text-warning":""]),type:"button",onClick:Te,title:a("dashboard.edit_mode")},Gj,10,Hj)):Ys("v-if",!0)])),_:1},8,["disabled_date_picker"])):Ys("v-if",!0),Ys(" Filters "),Vs("div",Wj,[(Os(!0),Ms(Ss,null,An($.value,(e=>(Os(),Ms("div",Kj,[Vs("label",Jj,[Vs("b",null,te(a("db_search."+e)),1)]),Hs(l_,{selected_option:g.value[e],"onUpdate:selected_option":t=>g.value[e]=t,options:k.value[e],style:"width: 50%;",onSelect_option:t=>function(e,t){J(t,e.value);for(const[e,a]of Object.entries(w.value)){const a=g.value[e];a?.value?le(e,t):ae(e)}}(g.value[e],e)},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256)),Object.keys($.value).length>0?(Os(),Ms("div",Yj,[Vs("div",Zj,[Xj,Vs("button",{type:"button",class:"btn btn-sm btn-primary",onClick:Z},te(a("reset")),1)])])):Ys("v-if",!0)]),Ys(" Template Editor Toolbox "),U.value?(Os(),Ms("div",Qj,[Vs("button",{class:"btn btn-lg btn-link text-warning",type:"button",onClick:Pe,title:a("dashboard.add_component")},tM,8,eM),Vs("button",{class:"btn btn-lg btn-link text-warning",type:"button",onClick:Ue,title:a("dashboard.del_template")},lM,8,aM),Vs("h2",nM,te(a("dashboard.edit_mode")),1),Ys('\n            <div style="margin: auto"></div>\n            <h4><span class="badge bg-warning">{{ _i18n(\'dashboard.edit_mode\') }}</span></h4>\n            ')])):Ys("v-if",!0),Ys(" Report Title and small buttons "),ya(q)?(Os(),Ms("div",sM,[Vs("h3",iM,[Ks(te(ya(B))+" ",1),ya(F)?(Os(),Ms("span",oM,[ya(R)?(Os(),Ms(Ss,{key:0},[Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:ge,title:a("download")},cM,8,rM),Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:oe,title:a("upload")},dM,8,uM)],64)):Ys("v-if",!0),Vs("button",{class:"btn btn-link btn-sm",type:"button",onClick:be,title:a("dashboard.print")},pM,8,_M)])):Ys("v-if",!0)])])):Ys("v-if",!0),Ys(" Report/Dashboard Content "),(Os(),Ms("div",{ref_key:"report_box",ref:r,id:"drag-zone",class:"row",key:v.value},[Ys(" Warning Message "),A.value?(Os(),Ms("div",fM,[Vs("div",mM,te(A.value),1)])):Ys("v-if",!0),Ys(" Empty template message "),!h.value||v.value.length||U.value?Ys("v-if",!0):(Os(),Ms("div",vM,[Vs("div",hM,[Vs("h4",gM,te(a("dashboard.empty_template")),1),Vs("p",bM,te(a("dashboard.empty_template_note")),1)])])),Ys(" Rendered Components "),(Os(!0),Ms(Ss,null,An(v.value,(t=>(Os(),Ls(hj,{style:{"min-width":"20rem"},color:t.active&&t.color||t.inactive_color,width:t.width,height:t.height,id:t.id,class:"drag-item"},{box_title:vl((()=>[t.i18n_name?(Os(),Ms("div",yM,[Vs("h4",wM,[Ks(te(t.custom_name?t.custom_name:a(t.i18n_name))+" ",1),Vs("span",xM,te(t.time_offset?a("dashboard."+(ya(M)?"time_ago":"time_offset_list")+"."+t.time_offset):""),1)]),U.value?(Os(),Ms("div",kM,[Vs("div",$M,[Vs("button",{type:"button",class:"btn-close btn-edit me-1","data-component-id":t.id,onClick:Me},null,8,SM),Vs("button",{type:"button",class:"btn-close","data-component-id":t.id,onClick:je},null,8,NM)])])):Ys("v-if",!0)])):Ys("v-if",!0)])),box_content:vl((()=>{return[s.value&&ya(i)?(Os(),Ls(yf,{key:0,styles:"margin-top: 2rem !important;"})):Ys("v-if",!0),Vs("div",{class:K([s.value&&ya(i)?"ntopng-gray-out":""])},[(Os(),Ls(Sn(n[t.component]),{id:t.id,style:V(ya(H)(t)),epoch_begin:t.epoch_begin,epoch_end:t.epoch_end,i18n_title:t.i18n_name,ifid:t.ifid?t.ifid.toString():e.context.ifid.toString(),max_width:t.width,max_height:t.height,params:t.params,get_component_data:(a=t,async(e,t,l)=>{let n={};if(O)null==a.component_id&&(a.component_id=a.id),T[a.component_id]?n=T[a.component_id]:(console.error("No data for "+a.component_id),n.data={}),s.value=!1;else{T[a.component_id]&&(n=T[a.component_id],n.data&&await n.data);const i=`${e}?${t}`;s.value=!0,n.data=l?b.http_post_request(i,l):b.http_request(i),n.data.then((()=>{s.value=!1})),T[a.component_id]=n}return n.data}),set_component_attr:xe(t),csrf:e.context.csrf,filters:t.filters},null,8,["id","style","epoch_begin","epoch_end","i18n_title","ifid","max_width","max_height","params","get_component_data","set_component_attr","csrf","filters"]))],2)];var a})),box_footer:vl((()=>["empty"!=t.component&&t.i18n_name&&!ya(D)?(Os(),Ms("span",CM,te(ya(G)(t)),1)):Ys("v-if",!0)])),_:2},1032,["color","width","height","id"])))),256))]))]),Ys(" div row "),Hs(hI,{ref_key:"modal_store_report",ref:c,get_suggested_file_name:re,store_file:he,csrf:e.context.csrf,title:a("dashboard.store")},null,8,["csrf","title"]),Hs(EI,{ref_key:"modal_open_report",ref:u,list_files:de,open_file:pe,delete_file:me,csrf:e.context.csrf,title:a("dashboard.open"),file_title:a("report.report_name")},null,8,["csrf","title","file_title"]),Hs(jI,{ref_key:"modal_upload_report",ref:d,upload_file:ce,title:a("upload"),file_title:a("report.file")},null,8,["title","file_title"]),Hs(hI,{ref_key:"modal_new_template",ref:j,get_suggested_file_name:$e,store_file:Se,allow_spaces:!0,csrf:e.context.csrf,title:a("dashboard.new_template")},null,8,["csrf","title"]),Hs(zI,{ref_key:"modal_add_template_component",ref:_,list_components:Oe,add_component:Ie,csrf:e.context.csrf,title:a("dashboard.add_component")},null,8,["csrf","title"]),Hs(mj,{ref_key:"modal_edit_template_component",ref:p,csrf:e.context.csrf,onEdit:Le},null,8,["csrf"]),Hs(nx,{ref_key:"modal_delete_template",ref:f,title:a("dashboard.del_template"),body:a("dashboard.del_template_confirm"),onDelete:Fe},null,8,["title","body"])],64))}};lp("\n@media print {\n.dontprint[data-v-c360f212] {\n        display: none;\n}\n.pagebreak-begin[data-v-c360f212] {\n        page-break-before: always;\n}\n.pagebreak-end[data-v-c360f212] {\n        page-break-after: always !important;\n}\n.print-element-class[data-v-c360f212] {\n        page-break-inside: avoid !important;\n        page-break-after: auto\n}\n}\n\n/* @media print and (orientation: portrait) and (max-width: 297mm){ */\n/*     .col-4 { */\n/*         width: 50% !important; */\n/*         flex: 0 0 auto; */\n/*     } */\n/* } */\n@page {\n    /* size: A3 landscape; */\n    /* position:absolute; width:100%; top:0;left:0;right:0;bottom:0; padding:0; margin:-1px; */\n}\n\n/* Print on A4 */\n@media print and (max-width: 297mm) and (min-width: 210mm) {\n\n    /* .row { */\n    /*         padding-left: 0; */\n    /*         padding-right: 0; */\n    /*         margin-left: -10rem; */\n    /*         margin-right: 0; */\n    /* } */\n.col-4[data-v-c360f212] {\n        width: 50% !important;\n        flex: 0 0 auto;\n}\n}\n\n/* Print on A5 (commented out as this is not working on Chrome/Safari) */\n\n/* @media print and (max-width: 148mm){ */\n/*     .col-4 { */\n/*         width: 100% !important; */\n/*         flex: 0 0 auto; */\n/*     } */\n/*     .col-6 { */\n/*         width: 100% !important; */\n/*         flex: 0 0 auto; */\n/*     } */\n/* } */\n.align-center[data-v-c360f212] {}\n"),EM.__scopeId="data-v-c360f212",EM.__file="http_src/vue/dashboard.vue";const AM=e=>(pl("data-v-7e5acce0"),e=e(),fl(),e),TM={class:"mb-3 row"},OM={class:"col-form-label col-sm-4"},PM={class:"col-sm-6"},UM={class:"btn-group btn-group-toggle","data-bs-toggle":"buttons"},IM=AM((()=>Vs("hr",null,null,-1))),jM={class:"host-alert-fields"},MM={class:"mb-3 row"},LM={class:"col-form-label col-sm-4"},FM={class:"col-sm-6"},RM={value:""},DM={value:"0"},zM={disabled:""},qM=["value"],BM={class:"flow-alert-fields"},VM={class:"mb-3 row"},HM={class:"col-form-label col-sm-4"},GM={class:"col-sm-6"},WM={value:""},KM={value:"0"},JM={disabled:""},YM=["value"],ZM={key:0,class:"ip-fields"},XM={class:"mb-3 row"},QM={class:"col-form-label col-sm-4"},eL={class:"col-sm-6"},tL=["pattern"],aL={key:1,class:"network-fields"},lL={class:"mb-3 row"},nL={class:"col-form-label col-sm-4"},sL={class:"col-sm-4 pr-0"},iL=["pattern"],oL={class:"col-sm-2 ps-4 pe-0"},rL=AM((()=>Vs("span",{class:"me-2"},"/",-1))),cL={class:"mb-3 row"},uL={class:"col-form-label col-sm-4"},dL={class:"col-sm-6"},_L={class:"mb-3 row"},pL={class:"col-form-label col-sm-4"},fL={key:0},mL={key:1},vL={class:"col-sm-6"},hL=["pattern"],gL=["pattern"],bL=AM((()=>Vs("hr",{class:"separator mt-5"},null,-1))),yL={class:"form-group row"},wL={class:"col-form-label"},xL={class:"mt-1"},kL=["placeholder"],$L=["disabled"];var SL={__name:"modal-add-check-exclusion",props:{alert_exclusions_page:String,host_alert_types:Array,flow_alert_types:Array},emits:["add"],setup(e,{expose:t,emit:a}){const l=e,n=ma(null);ma(null);const s=ma("ip"),i=ma(""),o=ma(""),r=ma(0),c=ma(""),u=ma(""),d=ma(""),_=ma(""),p=ma(null),f=i18n("details.comment_placeholder"),m=ma(null),v=ma(null);function h(e){if("text"==e)return NtopUtils.REGEXES.non_quoted_text;if("ip"==e){let e=NtopUtils.REGEXES.ipv4,t=e.replaceAll("$","@[0-9]{0,5}$"),a=NtopUtils.REGEXES.ipv6,l=a.replaceAll("$","@[0-9]{0,5}$");return`(${e})|(${t})|(${a})|(${l})`}return"hostname"==e?`${NtopUtils.REGEXES.singleword}|[a-zA-Z0-9._-]{3,250}@[0-9]{0,5}$`:"certificate"==e?NtopUtils.REGEXES.tls_certificate:NtopUtils.REGEXES[e]}let g=h("ip");h("text");let b=h("certificate"),y=h("domain_name_not_strict");const w=e=>{s.value=e},x=()=>{let e=null,t=!0;return"hosts"==l.alert_exclusions_page?(e=new RegExp(g),t="ip"==s.value?null==i.value||""==i.value||0==e.test(i.value)||""==u.value&&""==d.value:null==o.value||""==o.value||0==e.test(o.value)||""==u.value&&""==d.value||null==_.value||""==_.value||parseInt(_.value)<1||parseInt(_.value)>127):"domain_names"==l.alert_exclusions_page?(e=new RegExp(y),t=null==c.value||""==c.value||0==e.test(c.value)):"tls_certificate"==l.alert_exclusions_page&&(e=new RegExp(b),t=null==c.value||""==c.value||0==e.test(c.value)),t},k=()=>{n.value.close()},$=e=>""==e?-1:e,S=()=>{let e,t=i.value;"hosts"==l.alert_exclusions_page?("network"==s.value&&(t=`${o.value}/${_.value}`),null!=r.value&&0!=r.value&&(t=`${t}@${r.value}`),e={alert_addr:t,host_alert_key:$(u.value),flow_alert_key:$(d.value)}):"domain_names"==l.alert_exclusions_page?e={alert_domain:c.value}:"tls_certificate"==l.alert_exclusions_page&&(e={alert_certificate:c.value}),e.label=p.value,m.value&&(e.old_type=v.value.type,e.old_subdir=v.value.subdir,e.old_alert_domain=v.value.alert_domain,e.old_alert_certificate=v.value.alert_certificate,e.old_alert_addr=v.value.alert_addr,e.old_flow_alert_key=v.value.flow_alert_key,e.old_host_alert_key=v.value.host_alert_key),a("add",e),k()};t({show:e=>{if(e)if(m.value=!0,v.value=e,p.value=e.label,"host"==e.type){let t=e.alert_addr.split("/"),a=e.alert_addr.split("@");t.length>1?(s.value="network",o.value=t[0],_.value=t[1],i.value=""):(s.value="ip",i.value=a[0],o.value="",_.value=""),a.length>1?r.value=a[1]:r.value=0,null!=e.host_alert_key?u.value=""+e.host_alert_key:u.value="",null!=e.flow_alert_key?d.value=""+e.flow_alert_key:d.value=""}else"domain"==e.type?c.value=e.alert_domain:c.value=e.alert_certificate;else s.value="ip",i.value="",o.value="",r.value=0,u.value="0",d.value="",_.value="",c.value="",p.value="";n.value.show()},close:k}),_n((()=>{}));const N=e=>i18n(e);return(t,a)=>(Os(),Ls(np,{onShowed:a[11]||(a[11]=e=>{}),ref_key:"modal_id",ref:n},{title:vl((()=>[Ks(te(N("check_exclusion.add_exclusion")),1)])),body:vl((()=>["hosts"==e.alert_exclusions_page?(Os(),Ms(Ss,{key:0},[Ys(" modal hosts "),Vs("div",TM,[Vs("label",OM,[Vs("b",null,te(N("check_exclusion.member_type")),1)]),Vs("div",PM,[Vs("div",UM,[Vs("label",{class:K([{active:"ip"==s.value},"btn btn-secondary"])},[Vs("input",{class:"btn-check",type:"radio",name:"member_type",value:"ip",onClick:a[0]||(a[0]=e=>w("ip"))}),Ks(" "+te(N("check_exclusion.ip_address")),1)],2),Vs("label",{class:K([{active:"network"==s.value},"btn btn-secondary"])},[Vs("input",{onClick:a[1]||(a[1]=e=>w("network")),class:"btn-check",type:"radio",name:"member_type",value:"network"}),Ks(" "+te(N("check_exclusion.network")),1)],2)])])]),IM,Vs("div",jM,[Vs("div",MM,[Vs("label",LM,[Vs("b",null,te(N("check_exclusion.host_alert_type")),1)]),Vs("div",FM,[wn(Vs("select",{name:"value",class:"form-select alert-select","onUpdate:modelValue":a[2]||(a[2]=e=>u.value=e)},[Vs("option",RM,te(N("check_exclusion.none")),1),Vs("option",DM,te(N("check_exclusion.exclude_all_alerts")),1),Vs("option",zM,te(N("check_exclusion.spacing_bar")),1),(Os(!0),Ms(Ss,null,An(e.host_alert_types,(e=>(Os(),Ms(Ss,null,[null!=e?(Os(),Ms("option",{key:0,value:e.alert_id},te(e.label),9,qM)):Ys("v-if",!0)],64)))),256))],512),[[Ro,u.value]])])])]),Vs("div",BM,[Vs("div",VM,[Vs("label",HM,[Vs("b",null,te(N("check_exclusion.flow_alert_type")),1)]),Vs("div",GM,[wn(Vs("select",{id:"flow-alert-select",name:"value",class:"form-select alert-select","onUpdate:modelValue":a[3]||(a[3]=e=>d.value=e)},[Vs("option",WM,te(N("check_exclusion.none")),1),Vs("option",KM,te(N("check_exclusion.exclude_all_alerts")),1),Vs("option",JM,te(N("check_exclusion.spacing_bar")),1),(Os(!0),Ms(Ss,null,An(e.flow_alert_types,(e=>(Os(),Ms(Ss,null,[null!=e?(Os(),Ms("option",{key:0,value:e.alert_id},te(e.label),9,YM)):Ys("v-if",!0)],64)))),256))],512),[[Ro,d.value]])])])]),"ip"==s.value?(Os(),Ms("div",ZM,[Vs("div",XM,[Vs("label",QM,[Vs("b",null,te(N("check_exclusion.ip_address")),1)]),Vs("div",eL,[wn(Vs("input",{pattern:ya(g),placeholder:"192.168.1.1",required:"",type:"text",name:"ip_address",class:"form-control","onUpdate:modelValue":a[4]||(a[4]=e=>i.value=e)},null,8,tL),[[jo,i.value]])])])])):Ys("v-if",!0),"network"==s.value?(Os(),Ms("div",aL,[Vs("div",lL,[Vs("label",nL,[Vs("b",null,te(N("check_exclusion.network")),1)]),Vs("div",sL,[wn(Vs("input",{required:"",style:{width:"calc(100% - 10px)"},name:"network",class:"form-control d-inline",placeholder:"172.16.0.0",pattern:ya(g),"onUpdate:modelValue":a[5]||(a[5]=e=>o.value=e)},null,8,iL),[[jo,o.value]])]),Vs("div",oL,[rL,wn(Vs("input",{placeholder:"24",required:"",class:"form-control d-inline w-75",min:"1",max:"127",type:"number",name:"cidr","onUpdate:modelValue":a[6]||(a[6]=e=>_.value=e)},null,512),[[jo,_.value]])])])])):Ys("v-if",!0),Vs("div",cL,[Vs("label",uL,[Vs("b",null,te(N("vlan")),1)]),Vs("div",dL,[wn(Vs("input",{placeholder:"0",min:"0",type:"number","onUpdate:modelValue":a[7]||(a[7]=e=>r.value=e),class:"form-control"},null,512),[[jo,r.value]])])])],64)):Ys("v-if",!0),Ys(" mdoal hosts "),"hosts"!=e.alert_exclusions_page?(Os(),Ms(Ss,{key:1},[Ys(" modal domain_names"),Vs("div",null,[Vs("div",_L,[Vs("label",pL,["domain_names"==e.alert_exclusions_page?(Os(),Ms("b",fL,te(N("check_exclusion.domain")),1)):Ys("v-if",!0),"tls_certificate"==e.alert_exclusions_page?(Os(),Ms("b",mL,te(N("check_exclusion.tls_certificate")),1)):Ys("v-if",!0)]),Vs("div",vL,["domain_names"==e.alert_exclusions_page?wn((Os(),Ms("input",{key:0,placeholder:"",pattern:ya(y),required:"",type:"text",name:"ip_address",class:"form-control","onUpdate:modelValue":a[8]||(a[8]=e=>c.value=e)},null,8,hL)),[[jo,c.value]]):Ys("v-if",!0),"tls_certificate"==e.alert_exclusions_page?wn((Os(),Ms("input",{key:1,placeholder:"CN=813845657003339838, O=Code42, OU=TEST, ST=MN, C=U",pattern:ya(b),required:"",type:"text",name:"ip_address",class:"form-control","onUpdate:modelValue":a[9]||(a[9]=e=>c.value=e)},null,8,gL)),[[jo,c.value]]):Ys("v-if",!0)])])])],64)):Ys("v-if",!0),Ys(" modal comment"),bL,Vs("div",yL,[Vs("div",null,[Vs("label",wL,[Vs("b",null,te(N("show_alerts.add_a_comment")),1)])]),Vs("div",xL,[wn(Vs("textarea",{placeholder:ya(f),id:"alert-label",name:"label",rows:"3",class:"form-control",type:"text","onUpdate:modelValue":a[10]||(a[10]=e=>p.value=e),maxlength:"450"},null,8,kL),[[jo,p.value]])])])])),footer:vl((()=>[Vs("button",{type:"button",disabled:x(),onClick:S,class:"btn btn-primary"},te(N("add")),9,$L)])),_:1},512))}};lp("\ninput[data-v-7e5acce0]:invalid {\n  border-color: #ff0000;\n}  \n"),SL.__scopeId="data-v-7e5acce0",SL.__file="http_src/vue/modal-add-check-exclusion.vue";let NL={PageAlertStats:Zh,PageFlowHistorical:Eg,PageStats:Xw,PageAssetTable:ix,PagePeriodicityTable:bx,PageServiceTable:Mx,PageServiceMap:ek,PagePeriodicityMap:yk,PageAssetMap:Dk,PageDeviceExclusions:L$,PageHostTLS:F$,PageHostSSH:G$,PageHomeMap:eS,PageSankey:lS,PageHostRules:mC,PageAlertAnalysis:MC,PageHostMap:WC,PageManageConfigurationBackup:LA,PageSNMPDeviceRules:xT,PageHostsPortsAnalysis:DT,PageInactiveHosts:EO,PageInactiveHostDetails:UO,PageVulnerabilityScan:eU,PageHostVsResult:iU,PageOpenPorts:_U,PageVulnerabilityScanReport:CU,PageSNMPUsage:PU,PageSNMPInterfaces:nI,PageTopology:uI,PageFlowsList:QU,PageEditApplications:wA,PageVLANPortsFlowSankey:iE,PageTestTable:gE,PageSnmpDevicesInterfacesSimilarity:kT,NedgeRulesConfig:sA,NedgeRepeatersConfig:oO,PageHostDetailsApplications:sS,PageHostDetailsTraffic:$S,PageHostDetailsPackets:US,PageHostDetailsFlowSankey:JS,PageHostDetailsPorts:$C,PageHostsList:RU,PageAggregatedLiveFlows:vE,PageNetworkDiscovery:OA,PageFlowDeviceDetails:jO,PageFlowDeviceInterfaceDetails:KO,AlertInfo:S_,Chart:C_,TimeseriesChart:Ag,Datatable:kw,DateTimeRangePicker:A_,NetworkMap:Zx,RangePicker:Wp,PageNavbar:n_,SelectSearch:l_,TabList:Qw,Sankey:LS,NoteList:fm,Loading:yf,Dashboard:EM,DashboardBox:hj,DashboardEmpty:gj,DashboardTable:yj,DashboardBadge:Nj,DashboardPie:Cj,DashboardTimeseries:Ej,DashboardSankey:Aj,ListTimeseries:eb,Modal:np,ModalAddCheckExclusion:SL,ModalAlertsFilter:Dv,ModalFilters:wp,ModalTimeseries:pw,ModalTrafficExtraction:mm,ModalDeleteConfirm:nx,ModalSnapshot:ov,ModalAddDeviceExclusion:p$,ModalEditDeviceExclusion:S$,ModalAddHostRules:iC,ModalAddApplication:gA,ModalDeleteApplication:bA,ModalEditReport:wU,Vue:Id};window.ntopVue=NL;var CL=["html","clone","append","<div />",'<div><hr><div style="margin-left: auto;margin-right: auto;padding-left: var(--bs-gutter-x,.75rem);padding-right: var(--bs-gutter-x,.75rem);width: 100%;"><div class="row mt-2"><div class="col-12 col-md-4 pl-md-0 text-center text-md-start"><span style="font-size: .875em;"><a href="https://www.ntop.org/products/traffic-analysis/ntop/" target="_blank" id="footer-ntop-version"></a> | <span id="footer-ntop-github"></span></span></div><div class="col-12 col-md-4 text-center"><span style="font-size: .875em;" id="footer-ntop-age"></span></div><div class="col-12 col-md-4 text-center text-md-end pr-md-0"><span style="font-size: .875em;"><i class="fas fa-clock" title="Server Time"></i> <div class="d-inline-block" id="footer-network-clock"></div> UTC | Uptime: <div class="d-inline-block" id="footer-network-uptime"></div></span></div></div></div></div>',"ntopng_release_info","|","split","#footer-ntop-version","#footer-ntop-github","© 1998-","ntop_age_to"," - ntop","#footer-ntop-age","body div main","parent","#footer-network-clock","","#footer-network-uptime","remove","localtime","uptime","chart_colors","on_custom_event","ready"];function EL(){const e=e=>$(CL[3])[CL[2]]($(e)[CL[1]]())[CL[0]]();let t=CL[4];const a=(()=>{let a=$(t),l=i18n(CL[5])[CL[7]](CL[6]);$(CL[8],a)[CL[0]](l[0]),$(CL[9],a)[CL[0]](l[1]);let n=`${CL[10]}${i18n(CL[11])}${CL[12]}`;return $(CL[13],a)[CL[0]](n),e(a)})(),l=()=>{$(CL[14])[CL[2]](a)};l();const n=()=>$(CL[16])[CL[15]]()[CL[15]]()[CL[15]]()[CL[15]]()[CL[15]]();ntopng_events_manager[CL[23]](CL[22],ntopng_custom_events.GET_INTERFACE_DATA,(t=>{0==(()=>{let t=n();if(null==t)return!1;let l=t[CL[1]]();$(CL[16],l)[CL[0]](CL[17]),$(CL[18],l)[CL[0]](CL[17]);const s=e(l);return a===s})()&&((()=>{let e=n();null!=e&&e[CL[19]]()})(),l()),(e=>{$(CL[16])[CL[0]](e[CL[20]]),$(CL[18])[CL[0]](e[CL[21]])})(t)}))}$(document)[CL[24]]((()=>EL()))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
