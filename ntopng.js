!function(){"use strict";Date.prototype.format=function(e){var t={"M+":this.getMonth()+1,"d+":this.getDate(),"h+":this.getHours(),"m+":this.getMinutes(),"s+":this.getSeconds(),"q+":Math.floor((this.getMonth()+3)/3),S:this.getMilliseconds()};for(var n in/(y+)/.test(e)&&(e=e.replace(RegExp.$1,(this.getFullYear()+"").substr(4-RegExp.$1.length))),t)new RegExp("("+n+")").test(e)&&(e=e.replace(RegExp.$1,1==RegExp.$1.length?t[n]:("00"+t[n]).substr((""+t[n]).length)));return e},jQuery.fn.extend({disable:function(e){return this.each((function(){var t=$(this);t.is("input, button, textarea, select")?this.disabled=e:t.toggleClass("disabled",e)}))}});const e=.005,t={ipv4:"^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",ipv6:"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$|^s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:)))(%.+)?s*$",domainName:"^(([a-zA-Z]{1})|([a-zA-Z]{1}[a-zA-Z]{1})|([a-zA-Z]{1}[0-9]{1})|([0-9]{1}[a-zA-Z]{1})|([a-zA-Z0-9][-_.a-zA-Z0-9]{1,61}[a-zA-Z0-9])).([a-zA-Z]{2,13}|[a-zA-Z0-9-]{2,30}.[a-zA-Z]{2,3})",port:"^([0-9]{1,4}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])$",latency:"^([0-9]*[.])?[0-9]+$",url:"^(https?://[^/\\s]+(/.*)?)$",emailUrl:"^smtps?://[-a-zA-Z0-9:.]{1,256}+$",macAddress:"^([0-9A-Fa-f]{2}:){5}([0-9A-Fa-f]{2})$",hostname:"^[a-zA-Z0-9._:-]{3,250}|^[a-zA-Z0-9._:-]{3,250}@[0-9]{0,5}",username:"^[a-zA-Z0-9._@!-?]{3,30}$",singleword:"^(?=[a-zA-Z0-9._:-]{3,253}$)(?!.*[_.:-]{2})[^_.:-].*[^_.:-]$",email:"^([a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:.[a-zA-Z0-9-]+)*)$",https:"^https?://.+$",token:"^[0-9a-f]{32}",score:"^[0-9]{1,5}",telegram_channel:"^[0-9-]{1,15}",password:"^[w/$!/()=?^*@_-]{5,31}$",tls_certificate:String.raw`^[^=,]+=[^=,]+(,\s[^=,]+=[^=,]+)*$`,domain_name_not_strict:String.raw`^[a-zA-Z0-9\-_~]+((\.[a-zA-Z0-9\-_~]+)+)$`,non_quoted_text:"^[a-zA-Z0-9.-_]+$"};class n{static toggleOverlays(e=500){$(".overlay").toggle(e)}static showOverlays(e=500){$(".overlay").fadeIn(e)}static hideOverlays(e=500){$(".overlay").fadeOut(e)}static get REGEXES(){return t}static getIPv4RegexWithCIDR(){const e=t.ipv4.length;return`${t.ipv4.substring(0,e-1)}(\\/?)(\\b([0-9]|[12][0-9]|3[0-2])?\\b)$`}static getIPv6RegexWithCIDR(){const e=t.ipv6.length;return`${t.ipv6.substring(0,e-1)}(\\/?)\\b([0-9]|[1-9][0-9]|1[01][0-9]|12[0-8])?\\b$`}static async resolveDNS(e="ntop.org"){try{const t=await fetch(`${http_prefix}/lua/rest/v2/get/dns/resolve.lua?hostname=${e}`);return await t.json()}catch(e){console.error(`Something went wrong when resolving hostname: ${e}`)}return{rc:-1,rc_str:"FAILED_HTTP_REQUEST"}}static initDataPatterns(){$("input[data-pattern]").each((function(){const e=$(this).data("pattern");if(!e)return void console.warn("An empty data-pattern on an input was found!",this);const n=e.split("|").map((e=>t[e].toString())).join("|");$(this).attr("pattern",n),$(this).removeAttr("data-pattern")}))}static is_good_ipv4(e){return new RegExp(t.ipv4).test(e)}static is_good_ipv6(e){return new RegExp(t.ipv6).test(e)}static is_mac_address(e){return new RegExp(t.macAddress).test(e)}static isNumeric(e){return/^\d+$/.test(e)}static is_network_mask(e,t){var a,s=e.split("/"),l=null;if(2!=s.length){if(!t)return null;a=e}else{if(a=s[0],!n.isNumeric(s[1]))return null;if((l=parseInt(s[1]))<0)return null}if(n.is_good_ipv4(a)){if(null===l)l=32;else if(l>32)return null;return{type:"ipv4",address:a,mask:l}}if(n.is_good_ipv6(s[0])){if(null===l)l=128;else if(l>128)return!1;return{type:"ipv6",address:a,mask:l}}return null}static fbits(t){const n=["bps","Kbps","Mbps","Gbps","Tbps"];if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 bps";var a=Math.log(t)/Math.log(1e3),s=parseInt(Math.floor(a));if(s<0||isNaN(s))s=0;else if(s>=n.length)return"> "+n[n.length-1];if(s<=1)return Math.round(t/Math.pow(1e3,s)*100)/100+" "+n[s];var l=parseFloat(t/Math.pow(1e3,s)).toFixed(2);return l%1==0&&(l=Math.round(l)),l+" "+n[s]}static export_rate(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 exps/s";var a=n.scaleValue(t,["exp/s","Kexp/s"],1e3);return Math.round(100*a[0])/100+" "+a[1]}static exports_format(t){if(void 0===t)return"-";var a=i18n_ext.exports.toLowerCase(),s=[a,"K "+a];if(0==t)return"0";if(t>0&&t<e)return"< 0.005 exps/s";var l=n.scaleValue(t,s,1e3);return Math.round(100*l[0])/100+" "+l[1]}static fbits_from_bytes(e){return void 0===e?"-":n.fbits(8*e)}static fpackets(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 pps";var a=n.scaleValue(t,["pps","Kpps","Mpps","Gpps","Tpps"],1e3);return Math.round(100*a[0])/100+" "+a[1]}static fpoints(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 pt/s";var a=n.scaleValue(t,["pt/s","Kpt/s","Mpt/s","Gpt/s","Tpt/s"],1e3);return Math.round(100*a[0])/100+" "+a[1]}static fflows(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 fps";var a=n.scaleValue(t,["fps","Kfps","Mfps","Gfps","Tfps"],1e3);return Math.round(100*a[0])/100+" "+a[1]}static fmsgs(t){if(void 0===t)return"-";if(0==t)return"0";if(t>0&&t<e)return"< 0.005 mps";var a=n.scaleValue(t,["msg/s","Kmsg/s","Msg/s","Gmsg/s","Tmsg/s"],1e3);return Math.round(100*a[0])/100+" "+a[1]}static fmillis(e){if(void 0===e)return"-";const t=n.scaleValue(e,["ms"],1e3);return Math.round(100*t[0])/100+" "+t[1]}static fnone(e){return void 0===e?"-":Math.round(100*e)/100}static falerts(e){return void 0===e?"-":Math.round(100*e)/100+" alerts/s"}static fint(e){return void 0===e?"-":Math.round(e).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")}static ffloat(e){return void 0===e?"-":(Math.round(100*e)/100).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")}static fpercent(e){return void 0===e?"-":Math.round(100*e)/100+"%"}static fdate(e){return new Date(1e3*e)}static capitaliseFirstLetter(e){return e.charAt(0).toUpperCase()+e.slice(1)}static get_trend(e,t){return void 0===e||void 0===t||e==t?'<i class="fas fa-minus"></i>':e>t?'<i class="fas fa-arrow-up"></i>':'<i class="fas fa-arrow-down"></i>'}static abbreviateString(e,t){return e?e.length<t?e:e.substring(0,t)+"...":""}static toFixed2(e){return e?e.toFixed(2):""}static bytesToSize(e){if(void 0===e)return"-";var t=1024,n=1048576,a=1073741824,s=1099511627776;return e>=0&&e<t?parseFloat(e.toFixed(2))+" Bytes":e>=t&&e<n?parseFloat((e/t).toFixed(2))+" KB":e>=n&&e<a?parseFloat((e/n).toFixed(2))+" MB":e>=a&&e<s?parseFloat((e/a).toFixed(2))+" GB":e>=s?parseFloat((e/s).toFixed(2))+" TB":parseFloat(e.toFixed(2))+" Bytes"}static drawTrend(e,t,n){return e==t?'<i class="fas fa-minus"></i>':e>t?'<i class="fas fa-arrow-up"'+n+"></i>":'<i class="fas fa-arrow-down"></i>'}static toggleAllTabs(e){!0===e?$("#historical-tabs-container").find("li").removeClass("disabled").find("a").attr("data-toggle","tab"):$("#historical-tabs-container").find("li").addClass("disabled").find("a").removeAttr("data-toggle")}static disableAllDropdownsAndTabs(){$("select").each((function(){$(this).prop("disabled",!0)})),n.toggleAllTabs(!1)}static enableAllDropdownsAndTabs(){$("select").each((function(){$(this).prop("disabled",!1)})),n.toggleAllTabs(!0)}static capitalize(e){return e&&e[0].toUpperCase()+e.slice(1)}static addCommas(e){for(var t=(e+="").split("."),n=t[0],a=t.length>1?"."+t[1]:"",s=/(\d+)(\d{3})/;s.test(n);)n=n.replace(s,"$1,$2");return n+a}static scaleValue(e,t,n,a){if(0==e)return[0,t[0]];let s=a?10*a:10;var l=parseInt(Math.floor(Math.log(e)/Math.log(n)));return l<0||isNaN(l)?l=0:l>=t.length&&(l=t.length-1),[Math.round(e/Math.pow(n,l)*s)/s,t[l]]}static formatValue(t,a){if(0==t)return"0";if(t>0&&t<e)return"< 0.005";null==a&&(a=0);var s=n.scaleValue(t,["","K","M","G","T"],1e3,a);return s[0]+s[1]}static formatPackets(e){return n.addCommas(e.toFixed(0))+" Pkts"}static bytesToVolume(t){if(0==t)return"0 Bytes";if(t>0&&t<e)return"< 0.005 Bytes";var a=n.scaleValue(t,["Bytes","KB","MB","GB","TB"],1024);return parseFloat(a[0])+" "+a[1]}static bytesToVolumeAndLabel(e){if(0==e)return"0 Bytes";var t=parseInt(Math.floor(Math.log(e)/Math.log(1024)));return[(e/Math.pow(1024,t)).toFixed(2),["Bytes","KB","MB","GB","TB"][t]]}static bitsToSize(t,a){a=a||1e3;if(0==t)return"0 bps";if(t>0&&t<e)return"< 0.005 bps";var s=n.scaleValue(t,["bps","Kbps","Mbps","Gbps","Tbps"],a);return s[0].toFixed(2)+" "+s[1]}static secondsToTime(e){if(e<1)return"< 1 sec";let t=Math.floor(e/86400),n=Math.floor(e/3600-24*t),a=Math.floor(e/60-1440*t-60*n),s=e%60,l="",i=[];if(t>0){let e=Math.floor(t/365);e>0&&(t%=365,l=e+" year",e>1&&(l+="s"),i.push(l),l=""),l=t+" day",t>1&&(l+="s"),i.push(l),l=""}return n>0&&(n<10&&(l="0"),l+=n+":"),a<10&&(l+="0"),l+=a+":",s<10&&(l+="0"),l+=s,i.push(l),i.join(", ")}static msecToTime(e){return e>=1e3?n.secondsToTime(e/1e3):(Math.round(1e3*e)/1e3).toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")+" ms"}static epoch2Seen(e){var t=new Date(1e3*e),a=Math.floor((new Date).getTime()/1e3-e);return t.format("dd/MM/yyyy hh:mm:ss")+" ["+n.secondsToTime(a)+" ago]"}static graphGetXAxisTicksFormat(e){return e<=86400?"%H:%M:%S":e<=172800?"%b %e, %H:%M:%S":"%b %e"}static paramsExtend(e,t){return $.extend({},e,t)}static paramsToForm(e,t){for(var n in e=$(e),t){if(t.hasOwnProperty(n))$('<input type="hidden" name="'+n+'" value="'+t[n]+'">').appendTo(e)}return e}static paramsPairsEncode(e){var t=0,n={};for(var a in e)n["key_"+t]=a,n["val_"+t]=e[a],t+=1;return n}static hostkey2hostInfo(e){return(e=(e=(e=e.replace(/____/g,":")).replace(/___/g,"/")).replace(/__/g,".")).split("@")}static handle_tab_state(e,t){$("a",e).click((function(e){e.preventDefault()})),$(" > li > a",e).on("shown.bs.tab",(function(e){var t=$(e.target).attr("href").substr(1);history.replaceState?history.replaceState(null,null,"#"+t):window.location.hash=t}));var n=window.location.hash;n||(n="#"+t),$('a[href="'+n+'"]',e).tab("show")}static _add_find_host_link(e,t,n){$("<input>").attr({type:"hidden",id:t,name:t,value:n}).appendTo(e)}static makeFindHostBeforeSubmitCallback(e){return function(t,a){return a.context&&"historical"==a.context?(t.attr("action",e+"/lua/pro/db_search.lua"),"ip"==a.type?n._add_find_host_link(t,"ip",a.ip):"mac"==a.type?n._add_find_host_link(t,"mac",a.mac):n._add_find_host_link(t,"name",a.hostname?a.hostname:a.name)):"mac"==a.type?t.attr("action",e+"/lua/mac_details.lua"):"network"==a.type?(t.attr("action",e+"/lua/hosts_stats.lua"),n._add_find_host_link(t,"network",a.network)):"snmp"==a.type?(t.attr("action",e+"/lua/pro/enterprise/snmp_interface_details.lua"),n._add_find_host_link(t,"snmp_port_idx",a.snmp_port_idx)):"snmp_device"==a.type?t.attr("action",e+"/lua/pro/enterprise/snmp_device_details.lua"):"asn"==a.type?(t.attr("action",e+"/lua/hosts_stats.lua"),n._add_find_host_link(t,"asn",a.asn)):(t.attr("action",e+"/lua/host_details.lua"),n._add_find_host_link(t,"mode","restore")),!0}}static tstampToDateString(e,t,n){n=n||0;var a=parseInt(e.html())+n,s=d3.time.format(t)(new Date(1e3*a));return e.html(s).removeClass("hidden"),s}static noHtml(e){return e.replace(/<[^>]+>/g,"")}static cleanCustomHostUrl(e){return e.replace(/^http:\/\//gi,"").replace(/^https:\/\//gi,"").replace(/^www\./gi,"").replace(/[^0-9a-zA-Z\.:\/_-]/gi,"")}static parseQuery(e){for(var t={},n=("?"===e[0]?e.substr(1):e).split("&"),a=0;a<n.length;a++){var s=n[a].split("=");t[decodeURIComponent(s[0])]=decodeURIComponent(s[1]||"")}return t}static getHistoryParameters(e){var t=n.parseQuery(window.location.search),a=$.extend(t,e),s="?"+$.param(a,!0);return[location.protocol,"//",location.host,location.pathname].join("")+s}static check_status_code(e,t,n){const a=200!=e;if(a&&null!=n){let a=i18n_ext.request_failed_message;e&&t&&(a+=`: ${e} - ${t}`),n.text(a).show()}else a&&null==n&&alert(`${i18n_ext.request_failed_message}: ${e} - ${t}`);return a}static importModalHelper(e){if(!e.loadConfigXHR)throw"importModalHelper:: Missing 'loadConfigXHR' param";$("input#import-input").on("change",(function(){$(this).val().replace("C:\\fakepath\\",""),$("#btn-confirm-import").removeAttr("disabled")})),$("#import-modal").on("hidden.bs.modal",(function(){$("#import-input").val(""),$("#import-error").hide().removeClass("text-warning").addClass("invalid-feedback"),$("#btn-confirm-import").attr("disabled","disabled")})),$("#import-modal").on("submit","form",(function(t){t.preventDefault();const n=$("#btn-confirm-import");n.attr("disabled","");const a=$("#import-input")[0].files[0];if(!a)return $("#import-error").text(`${i18n_ext.no_file}`).show(),void n.removeAttr("disabled");const s=new FileReader;s.readAsText(a,"UTF-8"),s.onload=function(){let t=null;try{t=JSON.parse(s.result)}catch(e){}if(!t)return $("#import-error").text(i18n_ext.rest_consts[responseJSON.rc_str]||"Not Implemented Yet").show(),void n.removeAttr("disabled");e.loadConfigXHR(s.result).done(((t,n,a)=>{if(t.rc<0)return void $("#import-error").text(t.rc_str).show();e.successCallback&&e.successCallback(t);const s="all"==$("input[name='configuration']:checked").val()?i18n_ext.manage_configurations.messagges.import_all_success:i18n_ext.manage_configurations.messagges.import_success;ToastUtils.showToast({id:"import-configuration-alert",level:"success",title:i18n_ext.success,body:s,delay:2e3}),$("#import-modal").modal("hide")})).fail((({responseJSON:t})=>{e.failureCallback&&e.failureCallback(t),t&&t.rc>0||(-28==t.rc&&$("#import-error").removeClass("invalid-feedback").addClass("text-warning"),$("#import-error").text(i18n_ext.rest_consts[t.rc_str]||i18n_ext.FAILED_HTTP_REQUEST).show())})).always((()=>{n.removeAttr("disabled")}))}}))}static serializeFormArray(e){const t={};return e.forEach((e=>{e.name.includes("[]")||("string"==typeof e.value&&(e.value=e.value.trim()),t[e.name]=e.value)})),t}static cleanForm(e){$(e).find("input,select,textarea").each((function(e,t){$(this).removeClass("is-valid").removeClass("is-invalid")})),$(e)[0].reset()}static fetchWithTimeout(e,t={},n=5e3){const a=new AbortController,s={...t,signal:a.signal};return setTimeout((()=>{a.abort()}),n),fetch(e,s).then((e=>{if(!e.ok)throw new Error(`${e.status}: ${e.statusText}`);return e})).catch((e=>{if("AbortError"===e.name)throw new Error("Response timed out")}))}static setPref(e,t,n,a){if(null==e)return void console.warn("An action key must be defined to set a preference!");const s=()=>{},l=$.post(`${http_prefix}/lua/update_prefs.lua`,{action:e,csrf:t});l.done(n||s),l.fail(a||s)}static arrayToListString(e,t){return null==e?"":e.length>t?e.slice(0,t).join(", ")+` ${i18n_ext.and_x_more.replace("$num",e.length-t)}`:e.slice(0,t).join(", ")}static buildURL(e,t={},n=!1,a={}){const s=new URL(e,window.location);for(const[e,n]of Object.entries(t))(n||0===n)&&s.searchParams.set(e,n);if(n){const e=new URL(window.location.href);for(const[t,n]of Object.entries(a))n&&e.searchParams.set(t,n);s.searchParams.set("referer",e.toString())}return s.toString()}static getEditPoolLink(e,t){const n=new URL(e,window.location);return n.searchParams.set("pool_id",t),n.toString()}static getPoolLink(e,t=0){return`${http_prefix}/lua/rest/v2/get/${e}/pools.lua?pool=${t}`}static async getPool(e,t=0){if(null===e)throw"A pool type must be defined!";try{const a=await fetch(n.getPoolLink(e,t)),s=await a.json();return s.rc<0?[!1,{}]:[!0,s.rsp[0]]}catch(e){return[!1,{}]}}static saveElementScale(e,t={width:0,height:0}){const a=n.generateScaleElementKey(e);localStorage.setItem(a,JSON.stringify(t))}static generateScaleElementKey(e){let t;const n=location.pathname,a=e.attr("id");if(""!==a)t=a;else{t=e.attr("class")}return`${t}-${n}-scale`}static loadElementScale(e){const t=n.generateScaleElementKey(e),a=localStorage.getItem(t);if(null!=a)return JSON.parse(a)}static fillFieldIfValid(e,t){void 0===t?e.val(""):e.val(t)}static copyToClipboard(e,t){const n=document.createElement("textarea");n.value=e,n.setAttribute("readonly",""),n.style.position="absolute",n.style.left="-9999px",document.body.appendChild(n),n.select(),document.execCommand("copy"),document.body.removeChild(n),$(t).attr("title","Copied!").tooltip("dispose").tooltip().tooltip("show"),$(t).removeAttr("data-bs-original-title"),$(t).attr("title",e)}static stripTags(e){let t=document.createElement("div");return t.innerHTML=e,t.textContent||t.innerText||""}static shortenLabel(e,t,n){let a=e;if(e.length>t+5){let s=t;if(n){s=e.lastIndexOf(n);const l=e.slice(s);t>s&&(t=s),a=e.slice(0,t)+"... "+l}else a=e.slice(0,t)+"..."}return a}static sortAlphabetically(e,t){const n=e.label.toUpperCase(),a=t.label.toUpperCase();return n<a?-1:n>a?1:0}static createProgressBar(e){return`<div class="d-flex flex-row">\n              <div class="col-9 progress">\n                <div class="progress-bar bg-warning" aria-valuenow="${e}" aria-valuemin="0" aria-valuemax="100" style="width: ${e}%;">\n                </div>\n              </div>\n              <div class="col ms-3"> ${e} %</div>\n            </div>`}static createBreakdown(e,t,n,a){return`<div class="d-flex flex-row">\n              <div class="col-12 progress">\n                <div class="progress-bar bg-warning" aria-valuenow="${e}" aria-valuemin="0" aria-valuemax="100" style="width: ${e}%;">${n}</div>\n                <div class="progress-bar bg-success" aria-valuenow="${t}" aria-valuemin="0" aria-valuemax="100" style="width: ${t}%;">${a}</div>\n              </div>\n            </div>`}}function a(e,t){var n=$("thead th",$(e)).filter((function(){return"none"!=$(this).css("display")})).length;$("tbody",$(e)).html('<tr class="emptyRow"><td colspan="'+n+'"><i>'+t+"</i></td></tr>")}function s(e){return $("tr:not(.emptyRow)",$(e)).length-1}function l(e){return 0==s(e)}function i(e){return $("table",$("#dt-top-details",$(e)).parent())}function o(e,t,n,a,s,l=!0,i=""){0==$("td:nth-child("+e+")",$(this)).find("div.d-flex").length&&($("td:nth-child("+e+")",$(this)).empty(),$("td:nth-child("+e+")",$(this)).append($("<div class='d-flex justify-content-center'></div>"))),$("td:nth-child("+e+")",$(this)).find(".d-flex").append('<a href="'+s+`" title='${i}' data-placement="bottom" class="btn btn-sm mx-1 ${n} ${l?"":"disabled"}" onclick="`+a+'" role="button">'+t+"</a>")}function r(e,t){return e.data("datatable").options.columns.findIndex((function(e){return e.field===t}))}$((function(){n.initDataPatterns()}));var c=Object.freeze({__proto__:null,draw_processes_graph:function(e,t,n){var a,s={},l=e+"/lua/get_processes_graph_data.lua?host="+n;d3.json(l,(function(l,i){if(l)return console.warn(l);var o;(a=i).forEach((function(t){o=-1==t.source_pid?e+"/lua/host_details.lua?host="+t.source:e+"/lua/process_details.lua?pid="+t.source_pid+"&pid_name="+t.source_name+"&host="+n+"&page=flows",t.source=s[t.source]||(s[t.source]={name:t.source_name,num:t.source,link:o,type:t.source_type,pid:t.source_pid}),o=-1==t.target_pid?e+"/lua/host_details.lua?host="+t.target:e+"/lua/process_details.lua?pid="+t.target_pid+"&pid_name="+t.target_name+"&host="+n+"&page=flows",t.target=s[t.target]||(s[t.target]={name:t.target_name,num:t.target,link:o,type:t.target_type,pid:t.target_pid})}));var r=d3.scale.category10();r.proc="red",r.host="lightsteelblue";var c=d3.layout.force().nodes(d3.values(s)).links(a).size([960,500]).linkDistance(120).charge(-400).on("tick",(function(){d.attr("d",f),p.attr("transform",h),_.attr("transform",h)})).start(),u=d3.select("#"+t).append("svg").attr("id","ebpf_graph").attr("width",960).attr("height",500);u.append("defs").selectAll("marker").data(["proc2proc","proc2host","host2proc","host2host"]).enter().append("marker").attr("id",(function(e){return e})).attr("viewBox","0 -5 20 20").attr("refX",15).attr("refY",-1.5).attr("markerWidth",6).attr("markerHeight",6).attr("orient","auto").append("path").attr("d","M0,-5L10,0L0,5");var d=u.append("g").selectAll("path").data(c.links()).enter().append("path").attr("class",(function(e){return"link "+e.type})).attr("marker-end",(function(e){return"url(#"+e.type+")"})),p=u.append("g").selectAll("circle").data(c.nodes()).enter().append("circle").attr("class","ebpf_circle").attr("r",15).style("fill",(function(e){return r[e.type]})).call(c.drag).on("dblclick",(function(e){window.location.href=e.link})),_=u.append("g").selectAll("text").data(c.nodes()).enter().append("text").attr("class","ebpf_text").attr("x",12).attr("y","0.5rem").style("font-size","1rem").text((function(e){return e.pid>=0?e.name+" [pid: "+e.pid+"]":e.name}));function f(e){var t=e.target.x-e.source.x,n=e.target.y-e.source.y,a=Math.sqrt(t*t+n*n);return"M"+e.source.x+","+e.source.y+"A"+a+","+a+" 0 0,1 "+e.target.x+","+e.target.y}function h(e){return"translate("+e.x+","+e.y+")"}}))}});history.state&&history.state.zoom_level;class u{constructor(e,t){if(void 0===t.csrf)throw new Error("ModalHandler::Missing CSRF token!");this.element=e,this.dialog=$(e).closest(".modal"),this.options=t,this.csrf=t.csrf,this.dontDisableSubmit=t.dontDisableSubmit,this.observer=new MutationObserver((e=>{this.bindFormValidation(),this.toggleFormSubmission(),this.initDataPatterns()})),this.observer.observe(this.element[0],{childList:!0,subtree:!0}),this.initialState=null,this.currentState=null,this.firstCloseAttempt=!1,this.isSubmitting=!1;if(0==$(this.element).find("[type='submit']").length)throw new Error("ModalHandler::The submit button was not found inside the form!");this.toggleFormSubmission()}initDataPatterns(){NtopUtils.initDataPatterns()}createFormSnapshot(){const e={inputs:{},hidden:[]};return $(this.element).find('textarea,select,input[type!="radio"]').each((function(){const t=$(this).prop("nodeName").toLowerCase(),n=$(this).attr("name");e.inputs[`${t}[name='${n}']`]=$(this).val()})),$(this.element).find("[style='display: none;'], span.invalid-feedback").each((function(){e.hidden.push($(this))})),e}compareFormSnaphsot(e,t){if(null==e||null==t)return!0;for(let[n,a]of Object.entries(e.inputs))if(t.inputs[n]!=a)return!1;return!0}delegateModalClosing(){const e=this;$(this.dialog).find("button.cancel").off("click").click((function(){e.firstCloseAttempt=!1,$(e.element)[0].reportValidity(),$(e.dialog).find(".confirm-closing").fadeOut(100,(function(){$(e.dialog).find("button.btn-close").fadeIn(100)}))})),$(this.dialog).off("hide.bs.modal").on("hide.bs.modal",(function(t){e.isSubmitting?t.preventDefault():e.compareFormSnaphsot(e.currentState,e.initialState)||e.firstCloseAttempt||(t.preventDefault(),e.firstCloseAttempt=!0,$(e.dialog).find("button.btn-close").fadeOut(100,(function(){$(e.dialog).find(".confirm-closing").fadeIn(100)})))})),$(this.dialog).off("hidden.bs.modal").on("hidden.bs.modal",(function(t){for(const[t,n]of Object.entries(e.initialState.inputs))$(e.dialog).find(t).val(n),$(e.dialog).find(t).removeClass("is-invalid");e.initialState.hidden.forEach((e=>{e.hide()})),e.element.find("[type='submit']").attr("disabled","disabled"),e.currentState=null,e.firstCloseAttempt=!1,$(e.dialog).find(".confirm-closing").fadeOut(100,(function(){$(e.dialog).find("button.btn-close").fadeIn(100)})),e.cleanForm()}))}fillFormModal(){return this.options.loadFormData()}invokeModalInit(e={}){const t=this;this.delegateModalClosing(),this.data=e||this.fillFormModal(),this.options.onModalInit(this.data,this),$(this.element).parents(".modal").on("show.bs.modal",(function(){t.options.onModalShow()})),this.initialState=this.createFormSnapshot(),this.currentState=null,this.delegateResetButton()}delegateSubmit(){this.bindFormValidation();const e=this;this.submitHandler=function(t){e.options.isSyncRequest||(t.preventDefault(),t.stopPropagation(),e.makeRequest())},$(this.element).on("submit",this.submitHandler)}bindFormValidation(){const e=this;$(this.element).find("input,select,textarea").each((async function(t,n){const a=$(this);let s=-1;const l=async e=>e.data.resolveDNS&&a.val().match(NtopUtils.REGEXES.domainName)?await(async()=>{const e=a.parent().find(".spinner-border");a.attr("readonly",!0),e.show();const t=await NtopUtils.resolveDNS($(n).val());return a.removeAttr("readonly"),e.hide(),t.rc<0?(n.setCustomValidity(t.rc_str),[!1,t.rc_str_hr]):(n.setCustomValidity(""),[!0,"Success"])})():e.data.cannotBeEmpty&&e.isInputEmpty?(n.setCustomValidity("Please fill the input."),[!1,e.data.validationEmptyMessage||i18n_ext.missing_field]):n.validity.patternMismatch?(n.setCustomValidity("Pattern mismatch."),[!1,e.data.validationMessage||i18n_ext.invalid_field]):n.validity.rangeOverflow?(n.setCustomValidity("Value exceed the maximum value."),[!1,e.data.rangeOverflowMessage||i18n_ext.invalid_field]):n.validity.rangeUnderflow?(n.setCustomValidity("Value is under the minimum value."),[!1,e.data.rangeUnderflowMessage||i18n_ext.invalid_field]):(n.setCustomValidity(""),[!0,"Success"]),i=async()=>{const e={data:{validationMessage:a.data("validationMessage"),validationEmptyMessage:a.data("validationEmptyMessage"),cannotBeEmpty:"required"===a.attr("required")||1==a.data("validationNotEmpty"),resolveDNS:a.data("validationResolvedns"),rangeOverflowMessage:a.data("validationRangeOverflowMessage"),rangeUnderflowMessage:a.data("validationUnderflowOverflowMessage")},isInputEmpty:"string"==typeof a.val()&&""==a.val().trim()},[t,n]=await l(e);let s=a.parent().find(".invalid-feedback");0==s.length&&(s=$("<span class='invalid-feedback'></span>")),t?(a.removeClass("is-invalid"),s.fadeOut(500,(function(){$(this).remove()}))):(a.addClass("is-invalid"),a.parent().append(s),s.text(n))};$(this).off("input").on("input",(function(t){e.currentState=e.createFormSnapshot(),-1!=s&&clearTimeout(s),a.attr("formnovalidate")||(s=setTimeout((()=>{i(),e.toggleFormSubmission()}),300),e.firstCloseAttempt=!1)})),$(this).off("invalid").on("invalid",(function(e){e.preventDefault(),a.attr("formnovalidate")||i()}))}))}getModalID(){return $(this.element).parents(".modal").attr("id")}toggleFormSubmission(){let e=!0;$(this.element).find("input:not(:disabled),select:not(:disabled),textarea:not(:disabled)").each((function(t,n){e&=n.validity.valid})),e?$(this.element).find("[type='submit'],[type='test']").removeAttr("disabled"):$(this.element).find("[type='submit'],[type='test']").attr("disabled","disabled")}cleanForm(){$(this.element).find("input,textarea,select").each((function(e,t){$(this).removeClass("is-valid").removeClass("is-invalid")})),$(this.element)[0].reset()}makeRequest(){const e=$(this.element).find(".invalid-feedback"),t=$(this.element).find("[type='submit']");let n=this.options.beforeSumbit(this.data);n.csrf=this.csrf,n=$.extend(n,this.options.submitOptions),t.attr("disabled","disabled");const a=this;if(this.options.endpoint){let s;s="post"==a.options.method?$.ajax({url:this.options.endpoint,data:JSON.stringify(n),method:a.options.method,dataType:"json",contentType:"application/json; charset=utf-8"}):$.get(this.options.endpoint,n),this.isSubmitting=!0,s.done((function(t,s){a.isSubmitting=!1,a.currentState=null,a.options.resetAfterSubmit&&a.cleanForm(),e.hide();a.options.onSubmitSuccess(t,n,a)&&(a.dialog.modal?a.dialog.modal("hide"):(a.dialog[0].hidden=!0,$(".modal-backdrop.fade.show").remove())),$(a.element).off("submit",a.submitHandler),a.delegateSubmit()})).fail((function(t,s,l){a.isSubmitting=!1;const i=t.responseJSON;void 0!==i.rc&&i.rc<0&&e.html(i.rc_str_hr).show(),a.options.onSubmitError(i,n,s,l)})).always((function(e){t.removeAttr("disabled")}))}else{a.currentState=null,e.hide();a.options.onSubmitSuccess({},n,a)&&(a.dialog.modal?a.dialog.modal("hide"):a.dialog[0].hidden=!0),$(a.element).off("submit",a.submitHandler),a.delegateSubmit(),t.removeAttr("disabled")}}delegateResetButton(){const e=this,t=$(this.element).find("[type='reset']");if(0==t.length)return;const n=NtopUtils.serializeFormArray($(this.element).serializeArray());t.click((function(t){t.preventDefault(),$(e.element).find("input:visible,select").each((function(e,t){const a=$(t).attr("name");$(t).val(n[a]).removeClass("is-invalid").removeClass("is-valid")}))}))}}const d={no_formatting:{id:"no_formatting",um:null,step:null,decimal:null,scale_values:null},number:{id:"number",um:["","K","M","G","T"],step:1e3,decimal:null,scale_values:null},bytes:{id:"bytes",um:["B","KB","MB","GB","TB"],step:1024,decimal:2,scale_values:null},bytes_network:{id:"bytes_network",um:["B","KB","MB","GB","TB"],step:1e3,decimal:2,scale_values:null},bps:{id:"bps",um:["bps","Kbps","Mbps","Gbps","Tbps"],step:1e3,decimal:2,scale_values:8},fps:{id:"fps",um:["flows/s","Kflows/s","Mflows/s","Gflows/s"],step:1e3,decimal:2,scale_values:null},pps:{id:"pps",um:["pps","Kpps","Mpps","Gpps","Tpps"],step:1e3,decimal:2,scale_values:null},ms:{id:"ms",um:["ms","Kms","Mms","Gms","Tms"],step:1e3,decimal:2,scale_values:null}};function p(e){let t=d[e],n=3;null!=t.decimal&&t.decimal>0&&(n=6);let a=0;return null!=t.um&&(a=Math.max(...t.um.map((e=>e.length)))),n+1+a}function _(e,t){let n=d[e];return function(a){if(null==a)return"";if(e==d.no_formatting.id)return a;null!=n.scale_values&&(a*=n.scale_values);let s=a<0;s&&(a*=-1);let l=n.step,i=n.decimal,o=n.um,r=0;for(;a>=l&&r<o.length;)a/=l,r+=1;return null!=i&&i>0?(a*=Math.pow(10,i),a=Math.round(a),a=(a/=Math.pow(10,i)).toFixed(i)):a=Math.round(a),s&&!t&&(a*=-1),`${`${a}`} ${`${o[r]}`}`}}const f={types:d,getUnitMeasureLen:p,getFormatter:_};window.NtopUtils=n,window.datatableInitRefreshRows=function(e,t,n,a){var s=e.data("datatable"),l=s.resultset.data,i=e.data("dt-rr-timer"),o=e.data("dt-rr-ajax");a=a||{},i&&(clearInterval(i),e.removeData("dt-rr-timer")),o&&(o.abort(),e.removeData("dt-rr-ajax"));var c=[],u={};for(var d in l){var p=l[d];if(p[t]){var _=p[t];u[_]=d,c.push(_)}}if(!c)return!1;var f={custom_hosts:c.join(",")},h=s.options.url,m=!0,g=function(n){if("string"==typeof n&&(n=JSON.parse(n)),n){for(var l in n.data){var i=n.data[l],o=i[t];if(o&&u[o]){var c=u[o],d=s.rows[c],p=$("td",d);for(var _ in i){var f=p[r(e,_)],h=$(f),g=h.data("dt-rr-cur-val")||$(f).html(),v=a[_],b=i[_],y="";v&&(parseFloat(b)!=b&&console.warn("Invalid number: "+b),m||(y=" "+NtopUtils.drawTrend(parseFloat(b),parseFloat(g))),h.data("dt-rr-cur-val",b),b=v(b)),$(f).html(0!=b?b+y:"")}}}m=!1,e.removeData("dt-rr-ajax")}else console.error("Bad JSON result")};e.data("dt-rr-timer",setInterval((function(){e.data("dt-rr-ajax")||e.data("dt-rr-ajax",$.ajax({type:"GET",url:h,data:f,cache:!1,success:g}))}),n)),g(s.resultset)},window.datatableForEachRow=function(e,t){$("tr:not(:first)",e).each((function(e){var n;if("function"==typeof t)t.bind(this)(e);else for(n=0;n<t.length;n++)t[n].bind(this)(e)}))},window.datatableIsEmpty=l,window.datatableRemoveEmptyRow=function(e){$("tbody tr.emptyRow",$(e)).remove()},window.datatableAddEmptyRow=a,window.datatableGetNumDisplayedItems=s,window.datatableGetByForm=i,window.datatableUndoAddRow=function(e,t,n,s){n&&$(n).removeAttr("disabled").removeClass("disabled");var o=$(e).closest("form");$(e).remove(),aysUpdateForm(o);var r=i(o);l(r)&&a(r,t),s&&window[s](e)},window.datatableAddButtonCallback=o,window.datatableAddDeleteButtonCallback=function(e,t,n){o.bind(this)(e,n,"btn-danger",t,"javascript:void(0)",!0,"Delete")},window.datatableAddActionButtonCallback=function(e,t,n,a=!0,s=""){o.bind(this)(e,n,"btn-info",t,"javascript:void(0)",a,s)},window.datatableAddFilterButtonCallback=function(e,t,n,a="",s=!0){o.bind(this)(e,n,"btn-warning",t,"javascript:void(0)",s,a)},window.datatableAddLinkButtonCallback=function(e,t,n,a=""){o.bind(this)(e,n,"btn-info","",t,!0,a)},window.datatableMakeSelectUnique=function(e,t,n){function a(e,t,n,a){$("[id^="+t+"]").each((function(){var t=n($(this));t[0]!=e[0]&&a(t)}))}function s(e,t){if(t)e.removeAttr("disabled");else{var n=e.closest("select"),a=n.val()==e.val();if(e.attr("disabled","disabled"),a){var s=n.find("option:not([disabled])").first().val();n.val(s),n.attr("data-old-val",s)}}}function l(e,t,n){var l=$(this).attr("data-old-val")||"",i=$(this).val()||"",o=[];l==i&&(l=""),a($(this),e,t,(function(e){s(e.find("option[value='"+l+"']"),!0),s(e.find("option[value='"+i+"']"),!1),o.push(e)})),n($(this),l,i,o,s),$(this).attr("data-old-val",i)}var i=(n=NtopUtils.paramsExtend({on_change:$.noop,selector_fn:function(e){return e.find("select").first()}},n)).selector_fn(e);i.on("change",(function(){l.bind(this)(t,n.selector_fn,n.on_change)})),i.on("remove",(function(){$(this).val("").trigger("change")})),function(e,t,n){e.val(""),a(e,t,n,(function(e){e.trigger("change")}));var s=e.find("option:not([disabled])").first().val();e.val(s),e.trigger("change")}(i,t,n.selector_fn)},window.datatableIsLastPage=function(e){var t=$("#dt-bottom-details .pagination li:nth-last-child(3)",$(e));return!(1==t.length&&0==t.hasClass("active"))},window.datatableGetColumn=function(e,t,n){var a=e.data("datatable").resultset.data.filter((function(e){return e[t]===n}));if(a)return a[0]},window.datatableGetColumnIndex=r,window.$.fn.modalHandler=function(e){if(1!=this.length)throw new Error("Only a form element can by initialized!");const t=$.extend({csrf:"",endpoint:"",resetAfterSubmit:!0,dontDisableSubmit:!1,isSyncRequest:!1,method:"get",loadFormData:function(){},onModalInit:function(e){},onModalShow:function(){},beforeSumbit:function(){return{}},onSubmitSuccess:function(e){},onSubmitError:function(e,t,n){},onModalReset:function(e){}},e),n=new u(this,t);return n.delegateSubmit(),n},window.ebpfUtils=c,window.ntopFormatterUtils=f;var h={};window.makeUniqueValidator=function(e){return function(t){var n=t.val(),a=0;return!n||(e(t).each((function(){$(this).val()==n&&(a+=1)})),1==a)}},window.memberValueValidator=function(e){var t=e.val();return""===t||(NtopUtils.is_mac_address(t)||NtopUtils.is_network_mask(t,!0))},window.makePasswordPatternValidator=function(e){return function(t){return!t.val()||$(t).val().match(e)}},window.passwordMatchValidator=function(e){var t=$(e).closest("form").find("[data-passwordmatch]").not(e);return!e.val()||!t.val()||t.val()===e.val()},window.poolnameValidator=function(e){return!e.val()||$(e).val().match(/^[a-z0-9_]*$/)},window.passwordMatchRecheck=function(e){var t=$(e).find("[data-passwordmatch]"),n=0;t.each((function(){""!=$(this).val()&&n++})),n==t.length&&t.trigger("input")},window.hostOrMacValidator=function(e){var t=e.val();return""===t||(NtopUtils.is_mac_address(t)||NtopUtils.is_good_ipv4(t)||NtopUtils.is_good_ipv6(t))},window.ipAddressValidator=function(e){var t=e.val();return""===t||(NtopUtils.is_good_ipv4(t)||NtopUtils.is_good_ipv6(t))},window.bpfValidator=function(e,t=!1){var n=e.val();if(""===n.trim())return!0;var a=e.attr("name");h[a]||(h[a]={ajax_obj:null,valid:!0,timer:null,submit_remind:!1,last_val:null});var s=h[a],l=function(){s.timer=null;var e=function(e){s.ajax_obj=null,s.valid=e,s.last_val=n};s.last_val!==n?(s.ajax_obj&&s.ajax_obj.abort(),s.ajax_obj=$.ajax({type:"GET",url:`${http_prefix}/lua/pro/rest/v2/check/filter.lua`,async:!t,data:{query:n},error:function(){e(s.valid)},success:function(t){var n=!!t.response;e(n)}})):e(s.valid)};return t?l():s.last_val===n||(s.timer&&(clearTimeout(s.timer),s.submit_remind=!1),s.timer=setTimeout(l,250)),s.valid};const m=function(){let e={},t=[];return{ready:function(n){e[n]=!0,t.filter((e=>e.component_name==n)).forEach((e=>e.resolve())),t=t.filter((e=>e.component_name!=n))},on_ready:function(n){return new Promise(((a,s)=>{e[n]?a():t.push({resolve:a,component_name:n,completed:!1})}))}}}(),g=function(){let e={};return{is_array:function(e){return Array.isArray(e)},is_object:function(e){return"object"==typeof e&&!this.is_array(e)&&null!==e},clone:function(e){if(null==e)return null;if(this.is_object(e))return $.extend(!0,{},e);if(Array.isArray(e)){let t=[];for(let n=0;n<e.length;n+=1){let a=this.clone(e[n]);t.push(a)}return t}return e},object_to_array:function(e){if(null==e)return[];let t=[];for(let n in e)t.push(e[n]);return t},check_and_set_default_interval_time:function(){if(null==y.get_url_entry("epoch_begin")||null==y.get_url_entry("epoch_end")){let e=Number.parseInt((Date.now()-18e5)/1e3),t=Number.parseInt(Date.now()/1e3);y.set_key_to_url("epoch_begin",e),y.set_key_to_url("epoch_end",t)}},from_utc_s_to_server_date:function(e){let t=1e3*e,n=new Date(t).getTimezoneOffset(),a=moment.tz(t,ntop_zoneinfo)._offset;return new Date(t+1e3*(a+n)*60)},from_utc_to_server_date_format:function(e,t){null==t&&(t="DD/MMM/YYYY HH:mm");let n=moment.tz(e,ntop_zoneinfo);return moment(e).format(t),n.format(t)},copy_object_keys:function(e,t,n=!1){if(null!=e)for(let a in e)null!=e[a]&&(1==n&&this.is_object(e[a])&&this.is_object(t[a])?this.copy_object_keys(e[a],t[a],n):t[a]=e[a])},set_http_globals_headers(t){e=t},http_request:async function(t,n,a,s){try{null==n&&(n={}),null==n.headers&&(n.headers={}),null!=n&&null!=n.headers&&null!=e&&(n.headers={...n.headers,...e});let a=await fetch(t,n);if(0==a.ok)return console.error(`http_request ${t}\n ok == false`),console.error(a),null;let l=await a.json();return 1==s?l:l.rsp}catch(e){if(console.error(e),1==a)throw e;return null}},get_random_string:function(){return Math.random().toString(16).substr(2,8)},string_hash_code:function(e){let t,n,a=0;if(0===e.length)return a;for(t=0;t<e.length;t++)n=e.charCodeAt(t),a=(a<<5)-a+n,a|=0;return a},mod:function(e,t){return(e%=t)<0&&(e+=t),e}}}(),v=function(){let e={},t={};const n=e=>g.clone(e),a=function(e,a){for(let s in t){if(s==a)continue;(0,t[s])(n(e))}};return{get_status:function(){return n(e)},update_subscribers:function(){const e=this.get_status();a(e)},on_status_change:function(e,a,s){if(t[e]=a,1==s){let e=this.get_status();a(n(e))}},replace_status:function(t,n){!function(t){e=t}(t),a(t,n)},add_obj_to_status:function(e,t){let n=this.get_status();g.copy_object_keys(e,n),this.replace_status(n,t)},add_value_to_status:function(e,t,n){let a=this.get_status();a[e]=t,this.replace_status(a,n)}}}(),b={},y=function(){let e={};return g.copy_object_keys(b,e),{get_url_params:function(){return window.location.search.substring(1)},get_url_search_params:function(e){null==e&&(e=this.get_url_params());return new URLSearchParams(e)},get_url_entries:function(e){return this.get_url_search_params(e).entries()},get_url_entry:function(e,t){let n=this.get_url_entries(t);for(const[t,a]of n)if(t==e)return a;return null},get_url_object:function(e){let t=this.get_url_entries(e),n={};for(const[e,a]of t)n[e]=a;return n},reload_url:function(){window.location.reload()},replace_url:function(e){window.history.replaceState({},null,`?${e}`)},replace_url_and_reload:function(e){this.replace_url(e),this.reload_url()},serialize_param:function(e,t){return null==t&&(t=""),`${e}=${encodeURIComponent(t)}`},set_custom_key_serializer:function(t,n){e[t]=n},obj_to_url_params:function(t){let n=[];const a=this.serialize_param;for(let s in t){let l=e[s];null==l&&(l=a);let i=l(s,t[s]);n.push(i)}return n.join("&")},delete_params:function(e){let t=this.get_url_search_params();e.forEach((e=>{t.delete(e)})),this.replace_url(t.toString())},set_key_to_url:function(e,t){null==t&&(t="");let n=this.get_url_search_params();n.set(e,t),this.replace_url(n.toString())},add_obj_to_url:function(e,t){let n=this.obj_to_url_params(e),a=this.get_url_search_params(t),s=this.get_url_entries(n);for(const[e,t]of s)a.set(e,t);let l=a.toString();if(null!=t)return l;this.replace_url(l)}}}(),w={EPOCH_CHANGE:"epoch_change",FILTERS_CHANGE:"filters_change"},x={EPOCH_CHANGE:function(e,t){return e.epoch_begin!=t.epoch_begin||e.epoch_end!=t.epoch_end},FILTERS_CHANGE:function(e,t){return null==e.filters&&null!=t.filters||null!=e.filters&&null==t.filters||null!=e.filters&&null!=t.filters&&(e.filters.length!=t.filters.length||e.filters.some((e=>null==t.filters.find((t=>t.id==e.id)))))}},k=function(){const e="events_manager";let t={},n={};const a=e=>g.clone(e),s=function(e,t,n){for(let s in e){if(s==n)continue;(0,e[s])(a(t))}};v.on_status_change(e,(function(e){for(let a in w){if(1==(0,x[a])(e,t)){let t=n[a];s(t,e)}}t=e}),!0);const l=function(e,t,a){let l=n[e];null!=l&&s(l,t,a)},i=function(e,t,s,l){if(null==n[t]&&(n[t]={}),1==l){let e=v.get_status();s(a(e))}n[t][e]=s};return{emit_custom_event:function(e,t){l(e,t)},on_custom_event:function(e,t,n){i(e,t,n)},emit_event:function(t,n,a){l(t,n,a),v.add_obj_to_status(n,e)},on_event_change:function(e,t,n,a){i(e,t,n,a)}}}();function S(e,t,n,a,s){this.name=e,this.update_url=t,this.url_params=n,this.units=a,this.refresh=s,this.pieInterval;let l=[],i="",o=[],r=[],c=[];var u=[],d=[],p=[],_=function(e,t){var n=500,a=325,s=52,l=14,i=250,o=116;$(e).hasClass("pie-chart-small")&&(a=250,s=(o=(n=330)/5+15)/2);var r=d3.layout.pie().value((function(e){return 0==e.value&&(e.value=1),e.value})),c=d3.scale.category20(),u=d3.svg.arc().startAngle((function(e){return e.startAngle})).endAngle((function(e){return e.endAngle})).innerRadius(s).outerRadius(o),d=d3.select(e).append("svg:svg").attr("width",n).attr("height",a).attr("viewBox","0 0 "+n+" "+a).attr("preserveAspectRatio","xMidYMid"),p=d.append("svg:g").attr("class","arc").attr("transform","translate("+n/2+","+a/2+")"),_=d.append("svg:g").attr("class","label_group").attr("transform","translate("+n/2+","+a/2+")"),f=d.append("svg:g").attr("class","center_group").attr("transform","translate("+n/2+","+a/2+")");p.append("svg:circle").attr("fill","#EFEFEF").attr("r",o),f.append("svg:circle").attr("fill","white").attr("r",s);var h=null,m=null;t&&(f.append("svg:text").attr("class","label").attr("dy",-15).attr("text-anchor","middle").text("TOTAL"),m=f.append("svg:text").attr("class","total").attr("dy",7).attr("text-anchor","middle").text("Waiting..."),h=f.append("svg:text").attr("class","units").attr("dy",21).attr("text-anchor","middle").text(t));return[p,r,m,h,c,i,u,_,f,o,l]}(e,a),f=_[0],h=_[1],m=_[2],g=_[4],v=_[5],b=_[6],y=_[7],w=_[9],x=_[10];function k(e,t){return e.label<t.label?-1:e.label>t.label?1:0}function S(e,t){var n,a;d[t]?(n=d[t].startAngle,a=d[t].endAngle):!d[t]&&d[t-1]?(n=d[t-1].endAngle,a=d[t-1].endAngle):!d[t-1]&&d.length>0?(n=d[d.length-1].endAngle,a=d[d.length-1].endAngle):(n=0,a=0);t=d3.interpolate({startAngle:n,endAngle:a},{startAngle:e.startAngle,endAngle:e.endAngle});return function(e){var n=t(e);return b(n)}}function C(e,t){s0=2*Math.PI,e0=2*Math.PI;t=d3.interpolate({startAngle:e.startAngle,endAngle:e.endAngle},{startAngle:s0,endAngle:e0});return function(e){var n=t(e);return b(n)}}function N(e,t){var n;n=d[t]?(d[t].startAngle+d[t].endAngle-Math.PI)/2:!d[t]&&d[t-1]?(d[t-1].startAngle+d[t-1].endAngle-Math.PI)/2:!d[t-1]&&d.length>0?(d[d.length-1].startAngle+d[d.length-1].endAngle-Math.PI)/2:0;var a=(e.startAngle+e.endAngle-Math.PI)/2,s=d3.interpolateNumber(n,a);return function(e){var t=s(e);return"translate("+Math.cos(t)*(w+x)+","+Math.sin(t)*(w+x)+")"}}this.update=function(){$.ajax({type:"GET",url:this.update_url,data:this.url_params,success:function(e){let t;"object"==typeof e?t=e:"string"==typeof e&&(t=jQuery.parseJSON(e)),t&&function(e){e.rsp&&(e=e.rsp);e.sort(k),l=e,d=p,u=h(l);var t=0;function n(e,n,a){return e.name=l[n].label,e.value=l[n].value,e.url=l[n].url,t+=e.value,e.value>0}(p=u.filter(n)).length>0&&d.length>0&&(f.selectAll("circle").remove(),m&&m.text((function(){return(t/1024).toFixed(1)})),i=f.selectAll("path").data(p),i.enter().append("svg:path").attr("stroke","white").attr("stroke-width",.5).attr("fill",(function(e,t){return g(t)})).transition().duration(v).attrTween("d",S),i.transition().duration(v).attrTween("d",S),i.exit().transition().duration(v).attrTween("d",C).remove(),o=y.selectAll("line").data(p),o.enter().append("svg:line").attr("x1",0).attr("x2",0).attr("y1",-w-3).attr("y2",-w-8).attr("stroke","gray").attr("transform",(function(e){return"rotate("+(e.startAngle+e.endAngle)/2*(180/Math.PI)+")"})),o.transition().duration(v).attr("transform",(function(e){return"rotate("+(e.startAngle+e.endAngle)/2*(180/Math.PI)+")"})),o.exit().remove(),r=y.selectAll("text.value").data(p).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?5:-7})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){return(e.value/t*100).toFixed(1)+"%"})),r.enter().append("svg:text").attr("class","value").attr("transform",(function(e){return"translate("+Math.cos((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+","+Math.sin((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+")"})).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?5:-7})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){if(t<=1)return"";return(e.value/t*100).toFixed(1)+"%"})),r.transition().duration(v).attrTween("transform",N),r.exit().remove(),c=y.selectAll("text.units").data(p).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?17:5})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){return e.name})).on("click",(function(e){e.url&&(window.location.href=e.url)})),c.enter().append("svg:text").attr("class","units").attr("transform",(function(e){return"translate("+Math.cos((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+","+Math.sin((e.startAngle+e.endAngle-Math.PI)/2)*(w+x)+")"})).attr("dy",(function(e){return(e.startAngle+e.endAngle)/2>Math.PI/2&&(e.startAngle+e.endAngle)/2<1.5*Math.PI?17:5})).attr("text-anchor",(function(e){return(e.startAngle+e.endAngle)/2<Math.PI?"beginning":"end"})).text((function(e){return e.name})).on("click",(function(e){e.url&&(window.location.href=e.url)})),c.transition().duration(v).attrTween("transform",N),c.exit().remove())}(t)}})},this.update(),this.update()}window.ntopng_events=w,window.ntopng_events_manager=k,window.ntopng_status_manager=v,window.ntopng_utility=g,window.ntopng_url_manager=y,window.ntopng_sync=m,window.ntopng_custom_events={SHOW_MODAL_FILTERS:"show_modal_filters",MODAL_FILTERS_APPLY:"modal_filters_apply",SHOW_GLOBAL_ALERT_INFO:"show_global_alert_info",VIS_DATA_LOADED:"vis_data_loaded",CHANGE_PAGE_TITLE:"change_page_title",DATATABLE_LOADED:"datatable_loaded"},S.prototype.setUrlParams=function(e){this.url_params=e,this.forceUpdate()},S.prototype.forceUpdate=function(e){this.stopInterval(),this.update(),this.startInterval()},S.prototype.setInterval=function(e){this.pieInterval=e},S.prototype.stopInterval=function(){clearInterval(this.pieInterval)},S.prototype.startInterval=function(){this.pieInterval=setInterval(this.update(),this.refresh)};const C={},N={db_analyze:function(e,t,n){const{dataPointIndex:a}=n,{filter:s}=n.w.config;let l;if(n.w.config.filtering_labels&&(l=n.w.config.filtering_labels[a]),n.w.config.labels&&n.w.config.labels[a],0==s.length||void 0===l)return;let i=ntopng_status_manager.get_status().filters;i.push({id:s[0],operator:"eq",value:l}),ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:i})},none:function(e,t,n){},standard:function(e,t,n){const{seriesIndex:a,dataPointIndex:s}=n,{series:l}=n.w.config;if(-1===a)return;if(void 0===l)return;const i=l[a];if(void 0!==i.base_url){const e=i.data[s].meta.url_query;location.href=`${i.base_url}?${e}`}}},A={format_bytes:function(e,{config:t,seriesIndex:n,dataPointIndex:a}){return NtopUtils.bytesToSize(e)},format_pkts:function(e,{config:t,seriesIndex:n,dataPointIndex:a}){return NtopUtils.formatPackets(e)},format_value:function(e,{config:t,seriesIndex:n,dataPointIndex:a}){return NtopUtils.formatValue(e)},format_multiple_date:function(e,{config:t,seriesIndex:n,dataPointIndex:a}){return new Date(e[0])+" - "+new Date(e[1])},format_label_from_xy:function({series:e,seriesIndex:t,dataPointIndex:n,w:a}){const s=a.config.series[t].data[n],l=s.x,i=s.y;return`\n            <div class='apexcharts-theme-light apexcharts-active' id='test'>\n                <div class='apexcharts-tooltip-title' style='font-family: Helvetica, Arial, sans-serif; font-size: 12px;'>\n                    ${s.meta.label}\n                </div>\n                <div class='apexcharts-tooltip-series-group apexcharts-active d-block'>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${a.config.xaxis.title.text}</b>: ${l}\n                    </div>\n                    <div class='apexcharts-tooltip-text text-left'>\n                        <b>${a.config.yaxis[0].title.text}</b>: ${i}\n                    </div>\n                </div>\n            </div>`}},T=A.format_value;class E{static registerWidget(e){if(null===e)throw new Error("The passed widget reference is null!");if(e.name in C)throw new Error(`The widget ${e.name} is already defined!`);C[e.name]=e}static getWidgetByName(e){if(e in C)return C[e];throw new Error(`Widget ${e} not found!`)}}const P=(e,t)=>{let n=t.position().top;const a=e.height(),s=$(window).height();if(a+n>=s){const l=s-n;l<=150?n=n-a+t.outerHeight():e.css({"max-height":l-20,"overflow-y":"auto"})}e.css("top",`${n}px`)};$(window).on("scroll",(function(){$("#n-navbar").height();$(this).scrollTop()>=32?$("#n-navbar").addClass("scrolled bg-light"):$("#n-navbar").removeClass("scrolled bg-light")})),$((()=>{const e=()=>{if(0==$(".sidebar-close-layer").length){const e=$("<div class='sidebar-close-layer' style='display:none'></div>");e.on("click",(function(){$("#n-sidebar").removeClass("active"),e.fadeOut((function(){$(this).remove()}))})),$("#wrapper").append(e),e.fadeIn()}else $(".sidebar-close-layer").fadeOut((function(){$(this).remove()}));$("#n-sidebar").toggleClass("active")};$("#n-sidebar a.submenu").bind({mouseenter:function(){let e=$(this).parent().find("div[id$='submenu']");P(e,$(this)),e.show()},mouseleave:function(){$(this).parent().find("div[id$='submenu']").hide()}}),$("div[id$='submenu']").bind({mouseenter:function(){$(this).show()},mouseleave:function(){$(this).hide()}}),$("button[data-bs-toggle='sidebar']").on("click",(function(){e()}))})),$(window).on("resize",(function(){const e=$("#n-sidebar").find("div.show[id$='submenu']");if(e.length>0){const t=e.parent().find("a[data-bs-toggle='collapse']");P(e,t)}}));const M=function(){const e={series:[],chart:{height:"100%",width:"100%",toolbar:{tools:{zoomout:!1,download:!1,zoomin:!1,zoom:" ",selection:!1,pan:!1,reset:!1}},events:{}},xaxis:{tooltip:{enabled:!1}},yaxis:{labels:{show:!0,style:{colors:[],fontSize:"11px",fontWeight:400,cssClass:""}},title:{rotate:-90,offsetY:0,offsetX:0,style:{fontSize:"11px",fontWeight:900,cssClass:""}},tooltip:{enabled:!1}},grid:{show:!1},legend:{show:!0}},t=function(e){e.xaxis.labels.formatter=function(e,{series:t,seriesIndex:n,dataPointIndex:a,w:s}){return g.from_utc_to_server_date_format(e)}},a=function(){let t=g.clone(e);return g.copy_object_keys({chart:{stacked:!0,type:"area",zoom:{enabled:!0,type:"x"}},tooltip:{x:{format:"dd MMM yyyy HH:mm:ss"},y:{}},xaxis:{labels:{show:!0,datetimeUTC:!1,formatter:null},axisTicks:{show:!1},type:"datetime",axisBorder:{show:!0},convertedCatToNumeric:!1},dataLabels:{enabled:!1},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"}},t,!0),t}(),s=function(){let t=g.clone(e),a={chart:{stacked:!0,type:"polarArea",height:400},yaxis:{show:!0,labels:{formatter:n.bytesToSize}},dataLabels:{enabled:!0},legend:{enabled:!0,position:"bottom"},stroke:{show:!1,curve:"smooth"},fill:{type:"solid"},tooltip:{y:{formatter:n.bytesToSize}}};return g.copy_object_keys(a,t,!0),t}(),l=function(){let t=g.clone(e);return g.copy_object_keys({chart:{type:"line",zoom:{enabled:!0,type:"x"}},tooltip:{shared:!0,x:{format:"dd MMM yyyy HH:mm:ss"},y:{}},xaxis:{labels:{show:!1,datetimeUTC:!1,formatter:null},axisTicks:{show:!0},type:"datetime",axisBorder:{show:!0},convertedCatToNumeric:!1},stroke:{show:!0,width:2,curve:"smooth"},grid:{show:!0},dataLabels:{enabled:!1}},t,!0),t}();return{typeChart:{TS_LINE:"TS_LINE",TS_STACKED:"TS_STACKED",PIE:"PIE",BASE:"BASE"},newChart:function(i){let o,r={};if(i==this.typeChart.TS_STACKED)r=g.clone(a),t(r);else if(i==this.typeChart.TS_LINE)r=g.clone(l),t(r);else if(i==this.typeChart.PIE)r=g.clone(s);else{if(i!=this.typeChart.BASE)throw`ntopChartApex::newChart: chart type = ${i} unsupported`;r=g.clone(e)}return{drawChart:function(e,t){if(t.yaxis&&t.yaxis.labels&&t.yaxis.labels.formatter){const e=t.yaxis.labels.formatter;"formatValue"==e?t.yaxis.labels.formatter=n.formatValue:"bytesToSize"==e&&(t.yaxis.labels.formatter=n.bytesToSize)}g.copy_object_keys(t,r,!0),o=new ApexCharts(e,r),o.render()},destroyChart:function(){null!=o&&o.destroy()},updateChart:function(e){null!=o&&o.updateOptions(e,!0)},registerEvent:function(e,t,n=!1){r.chart.events[e]=t,1==n&&o.updateOptions(r)}}}}}(),I=function(){let e={};return{addHandler:function(t){let n=e[t.handlerId];return null==n&&(n=[],e[t.handlerId]=n),n.push((()=>{t.onClick()})),`window['_DataTableButtonsOnClick']('${t.handlerId}', '${n.length-1}')`},getHandler:function(t,n){let a=e[t];return null==a?null:a[n]},deleteHandlersById:function(t){e[t]=null}}}();window._DataTableButtonsOnClick=function(e,t){let n=I.getHandler(e,t);null!=n&&n()};class O{static getStdDatatableConfig(e=[],t="<'row'<'col-sm-2 d-inline-block'l><'col-sm-10 text-end d-inline-block'<'dt-search'f>B>rtip>"){return 0==e.length&&(t="fBrtip"),{dom:t,pagingType:"full_numbers",lengthMenu:[[10,25,50,100,250],[10,25,50,100,250]],language:{search:i18n.script_search,paginate:{previous:"&lt;",next:"&gt;",first:"«",last:"»"}},saveState:!0,responsive:!0,buttons:{buttons:e,dom:{button:{className:"btn btn-link"},container:{className:"d-inline-block"}}}}}static createLinkCallback(e){let t="";return t=`onclick="${I.addHandler(e.handler)}"`,`<a href=#\n                   ${t}>\n                   ${e.text||""}\n                </a>`}static createActionButtons(e=[]){const t=[];e.forEach(((e,n)=>{let a="";if(e.handler){a=`onclick="${I.addHandler(e.handler)}"`}let s=`\n            <li>\n                <a\n                    ${e.href||e.modal?`href='${e.href||e.modal}'`:""}\n                    ${a}\n                    ${e.onclick?`onclick='${e.onclick}'`:""}\n                    ${e.modal?"data-bs-toggle='modal'":""}\n                    class='dropdown-item ${e.class?e.class:""}'\n                    ${e.hidden?"style='display: none'":""}\n                    ${e.external?"target='_about'":""}\n                    >\n                    <i class='fas ${e.icon}'></i> ${e.title||""}\n                </a>\n            </li>\n            `;t.push(s)}));return`<div class='dropdown'><button type="button" class="btn btn-sm btn-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false"><i class="fas fa-align-justify"></i></button>${`<ul class="dropdown-menu">${t.join("")}</ul>`}</div>`}static deleteButtonHandlers(e){I.deleteHandlersById(e)}static setAjaxConfig(e,t,n="",a="get",s={}){return e.ajax={url:t,type:a,dataSrc:n,data:function(e){return $.extend({},e,s)}},e}static extendConfig(e,t){return t.hasFilters&&(t.stateSaveCallback=function(e,t){localStorage.setItem("DataTables_"+e.sInstance,JSON.stringify(t))},t.stateLoadCallback=function(e){return JSON.parse(localStorage.getItem("DataTables_"+e.sInstance))},t.stateSaveParams=function(e,t){$("[data-filter]").each((function(){const e=$(this).find("li.active").data("filter-key");e&&(t.filters||(t.filters={}),t.filters[$(this).data("filter")]=e)}))}),$.extend({},e,t)}static secondsToHHMMSS(e){const t=e=>`${e}`.padStart(2,"0"),n=e%60,a=Math.floor(e/60)%60;return`${t(Math.floor(e/3600))}:${t(a)}:${t(n)}`}static openEditModalByQuery(e){const t=new URLSearchParams(window.location.search);if(!t.has(e.paramName))return;const n=t.get(e.paramName),a=e.datatableInstance.data().toArray().find((t=>t[e.paramName]==n));if("function"==typeof e.cancelIf&&e.cancelIf(a))return;const s=$(`#${e.modalHandler.getModalID()}`);if(void 0!==a&&(e.modalHandler.invokeModalInit(a),s.modal("show")),!t.has("referer"))return void s.on("hidden.bs.modal",(function(t){const n=new URL(window.location.href);n.searchParams.delete(e.paramName),history.replaceState({},"",n.toString())}));const l=t.get("referer");s.on("hidden.bs.modal",(function(e){window.location=l}))}static addToggleColumnsDropdown(e,t=((e,t)=>{})){if(void 0===e)throw"The $table is undefined!";const n=e.table().node().id;O._loadColumnsVisibility(e).then((function(a){let s=[-1];a.success?s=a.columns.map((e=>parseInt(e))):console.warn(a.message);const l=[],i=[],o=$(e.context[0].nTableWrapper);e.columns().every((function(t){e.column(t).visible()?l.push({index:t,name:this.header().textContent,label:this.i18n.name}):i.push(t)}));const r=$('\n                <div class="btn-group">\n                    <button type="button" class="btn btn-link dropdown-toggle" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\n                        <i class="fas fa-eye"></i>\n                    </button>\n                </div>\n            '),c=$('<div class="dropdown-menu dropdown-menu-right" style=\'width: max-content;\'><h6 class="dropdown-header">Show Columns</h6></div>'),u=$("<div class='px-4'></div>");for(let a=0;a<l.length;a++){const o=l[a];if(""==o.name)continue;const r=`toggle-${o.name.split().join("_")}`,c=-1===s.indexOf(o.index);if(!c){e.column(o.index).visible(!1)}const d=$(`<input class="form-check-input" ${c?"checked":""} type="checkbox" id="${r}">`),p=$(`\n                    <div class="form-check form-switch">\n                        <label class="form-check-label" for="${r}">\n                            ${o.name}\n                        </label>\n                    </div>\n                `);d.on("change",(function(a){$(".overlay").toggle(500);const s=e.column(o.index);s.visible(!s.visible());const l=s.visible(),r=[];e.columns().every((function(t){e.column(t).visible()||-1!==i.indexOf(t)||r.push(t)})),$.post(`${http_prefix}/lua/datatable_columns.lua`,{action:"save",table:n,columns:r.join(","),csrf:window.__CSRF_DATATABLE__}).then((function(e){e.success||console.warn(e.message)})),void 0!==t&&t(s,l)})),p.prepend(d),u.append(p)}c.on("click.bs.dropdown",(function(e){e.stopPropagation()})),r.append(c.append(u)),o.find(".dt-search").parent().append(r)}))}static async _loadColumnsVisibility(e){const t=e.table().node().id;return $.get(`${http_prefix}/lua/datatable_columns.lua?table=${t}&action=load`)}}class U{static alertSeverityAndType(e,t,n){return`${U.formatValueLabel(e,t,n)} ${U.formatValueLabel(n.alert_id,t,n)}`}static hideIfZero(e,t,a){let s=void 0!==e.color?e.color:"#aaa",l=void 0!==e.value?e.value:e;"display"===t&&0===parseInt(l)&&(s="#aaa");let i=`<span style='color: ${s}'>${n.fint(l)}</span>`;return void 0!==e.url&&(i=`<a href="${e.url}">${i}</a>`),i}static secondsToTime(e,t,a){return"display"===t?n.secondsToTime(e):e}static filterize(e,t,n,a,s,l){return`<a class='tag-filter' data-tag-key='${e}' title='${s||t}' data-tag-value='${t}' data-tag-label='${a||n||t}' href='#'>${l||n||t}</a>`}static formatValueLabel(e,t,n){if("display"!==t)return e.value;let a=e.label;return e.color&&(a=`<span class='font-weight-bold' style='color: ${e.color}'>${a}</span>`),a}static formatMessage(e,t,n){if("display"!==t)return e.value;let a=e.descr;return e.shorten_descr&&(a=`<span title="${e.descr}">${e.shorten_descr}</span>`),a}static formatSubtype(e,t,n){if("display"!==t)return e;return U.filterize("subtype",e,e)}static getFormatGenericField(e){return function(t,n,a){if("display"!==n)return t.value;let s="";return void 0!==t.reference&&(s=t.reference),U.filterize(e,a[e].value,a[e].label,a[e].label,a[e].label)+" "+s}}static formatSNMPInterface(e,t,n){if("display"!==t)return e.value;let a=U.filterize("snmp_interface",e.value,e.label,e.label,e.label);return e.color&&(a=`<span class='font-weight-bold' style='color: ${e.color}'>${a}</span>`),a}static formatSNMPIP(e,t,n){return"display"!==t?e:U.filterize("ip",e,e,e,e)}static formatProbeIP(e,t,n){if("display"!==t)return e;return U.filterize("probe_ip",e.value,e.label,e.label,e.label_long)}static formatHost(e,t,n){if("display"!==t)return e;let a="";void 0!==e.reference&&(a=e.reference);let s,l,i="";return e.label&&e.label!=e.value?(s="name",l=e.label_long,i=U.filterize("name",e.label_long,e.label,e.label,e.label_long)):(s="ip",l=e.value,i=U.filterize("ip",e.value,e.label,e.label,e.label_long)),n.vlan_id&&""!=n.vlan_id&&"0"!=n.vlan_id&&(i=U.filterize(s,`${l}@${n.vlan_id}`,`${e.label}@${n.vlan_id}`,`${e.label}@${n.vlan_id}`,`${e.label_long}@${n.vlan_id}`)),e.country&&(i+=U.filterize("country",e.country,e.country,e.country,e.country,' <img src="'+http_prefix+'/dist/images/blank.gif" class="flag flag-'+e.country.toLowerCase()+'"></a> ')),n.role&&"attacker"==n.role.value?i=i+" "+U.filterize("role",n.role.value,'<i class="fas fa-skull" title="'+n.role.label+'"></i>',n.role.label):n.role&&"victim"==n.role.value&&(i=i+" "+U.filterize("role",n.role.value,'<i class="fas fa-sad-tear" title="'+n.role.label+'"></i>',n.role.label)),n.role_cli_srv&&"client"==n.role_cli_srv.value?i=i+" "+U.filterize("role_cli_srv",n.role_cli_srv.value,'<i class="fas fa-long-arrow-alt-right" title="'+n.role_cli_srv.label+'"></i>',n.role_cli_srv.label):n.role_cli_srv&&"server"==n.role_cli_srv.value&&(i=i+" "+U.filterize("role_cli_srv",n.role_cli_srv.value,'<i class="fas fa-long-arrow-alt-left" title="'+n.role_cli_srv.label+'"></i>',n.role_cli_srv.label)),i+" "+a}static filterizeVlan(e,t,a,s,l,i){let o=s,r=l,c=i;return e.vlan&&0!=e.vlan.value&&(o=`${s}@${e.vlan.value}`,r=`${l}@${e.vlan.label}`,c=`${i}@${e.vlan.title}`),r=n.shortenLabel(r,16,"."),U.filterize(a,o,r,r,c)}static formatFlowTuple(e,t,n){let a=e.active_url?`<a href="${e.active_url}"><i class="fas fa-stream"></i></a>`:"",s="";if(e.cli_ip.name){let t="";e.cli_ip.label_long&&(t=e.cli_ip.value+" ["+e.cli_ip.label_long+"]"),s=U.filterizeVlan(e,n,"cli_name",e.cli_ip.name,e.cli_ip.label,t)}else s=U.filterizeVlan(e,n,"cli_ip",e.cli_ip.value,e.cli_ip.label,e.cli_ip.label_long);let l="";e.cli_ip.country&&"nil"!==e.cli_ip.country&&(l=U.filterize("cli_country",e.cli_ip.country,e.cli_ip.country,e.cli_ip.country,e.cli_ip.country,' <img src="'+http_prefix+'/dist/images/blank.gif" class="flag flag-'+e.cli_ip.country.toLowerCase()+'"></a> '));let i=e.cli_port&&e.cli_port>0?":"+U.filterize("cli_port",e.cli_port,e.cli_port):"",o="";1==e.cli_ip.blacklisted&&(o=" <i class='fas fa-ban fa-sm' title='"+i18n("hosts_stats.blacklisted")+"'></i>");let r="";if(e.srv_ip.name){let t="";e.srv_ip.label_long&&(t=e.srv_ip.value+" ["+e.srv_ip.label_long+"]"),r=U.filterizeVlan(e,n,"srv_name",e.srv_ip.name,e.srv_ip.label,t)}else r=U.filterizeVlan(e,n,"srv_ip",e.srv_ip.value,e.srv_ip.label,e.srv_ip.label_long);let c=e.cli_port&&e.cli_port>0?":"+U.filterize("srv_port",e.srv_port,e.srv_port):"",u="";e.srv_ip.country&&"nil"!==e.srv_ip.country&&(u=U.filterize("srv_country",e.srv_ip.country,e.srv_ip.country,e.srv_ip.country,e.srv_ip.country,' <img src="'+http_prefix+'/dist/images/blank.gif" class="flag flag-'+e.srv_ip.country.toLowerCase()+'"></a> '));let d="";1==e.srv_ip.blacklisted&&(d=" <i class='fas fa-ban fa-sm' title='"+i18n("hosts_stats.blacklisted")+"'></i>");let p="",_="";return n.cli_role&&("attacker"==n.cli_role.value?p+=U.filterize("role","attacker",'<i class="fas fa-skull" title="'+n.cli_role.label+'"></i>',n.cli_role.tag_label):"victim"==n.cli_role.value&&(p+=U.filterize("role","victim",'<i class="fas fa-sad-tear" title="'+n.cli_role.label+'"></i>',n.cli_role.tag_label))),n.srv_role&&("attacker"==n.srv_role.value?_+=U.filterize("role","attacker",'<i class="fas fa-skull" title="'+n.srv_role.label+'"></i>',n.srv_role.tag_label):"victim"==n.srv_role.value&&(_+=U.filterize("role","victim",'<i class="fas fa-sad-tear" title="'+n.srv_role.label+'"></i>',n.srv_role.tag_label))),`${a} ${s}${o}${l}${i} ${p} ${e.cli_ip.reference} <i class="fas fa-exchange-alt fa-lg" aria-hidden="true"></i> ${r}${d}${u}${c} ${_} ${e.srv_ip.reference}`}static formatNameDescription(e,t,n){if("display"!==t)return e.name;return U.filterize("alert_id",e.value,e.name,e.fullname,e.fullname)}static applyCellStyle(e,t,n,a,s){t.highlight&&$(e).css("border-left","5px solid "+t.highlight)}}function F(e,t){const n=Object.create(null),a=e.split(",");for(let e=0;e<a.length;e++)n[a[e]]=!0;return t?e=>!!n[e.toLowerCase()]:e=>!!n[e]}window.do_pie=function(e,t,n,a,s){var l=new S(e,t,n,a,s);return s&&l.setInterval(setInterval((function(){l.update()}),s)),l},window.DataTableUtils=O,window.DataTableFiltersMenu=class{constructor({tableAPI:e,filterMenuKey:t,filterTitle:n,filters:a,columnIndex:s,icon:l=null,extraAttributes:i="",id:o=null,url:r=null,urlParams:c=null,removeAllEntry:u=!1,callbackFunction:d=null}){this.rawFilters=a,this.tableAPI=e,this.filterTitle=n,this.icon=l,this.filterMenuKey=t,this.columnIndex=s,this.preventUpdate=!1,this.currentFilterSelected=void 0,this.$datatableWrapper=$(e.context[0].nTableWrapper),this.extraAttributes=i,this.id=o,this.url=r,this.urlParams,this.removeAllEntry=u,this.callbackFunction=d}get selectedFilter(){return this.currentFilterSelected}init(){const e=this;return this.$datatableWrapper.on("init.dt",(function(){e._render(e.rawFilters)})),this.tableAPI.on("draw",(function(){e._update()})),e}_countEntries(e,t=[]){void 0===e&&console.error("DataTableFiltersMenu::_countEntries() => the passed regex is undefined!");const n=new RegExp(e);return t.filter((e=>n.test(e))).length}_createMenuEntry(e){const t=this;let n=$(`<li class='dropdown-item pointer'>${e.label} </li>`);if(t.url){if(n=$(`<li class='dropdown-item pointer'><a href=# class='p-1 standard-color'>${e.label} </li>`),1==e.currently_active){0==t.$dropdown.title.parent().find("i.fas").length&&t.$dropdown.title.parent().prepend("<i class='fas fa-filter'></i>");const a=n.html();t.$dropdown.title.html(a),t.$dropdown.container.find("li").removeClass("active"),"all"!==e.key&&n.addClass("active")}}else if(void 0!==e.regex&&(void 0===e.countable||e.countable)){const t=this.tableAPI.columns(this.columnIndex).data()[0],a=this._countEntries(e.regex,t),s=$(`<span class='counter'>(${a})</span>`);0==a&&n.hide(),n.append(s)}return n.on("click",(function(a){0==t.$dropdown.title.parent().find("i.fas").length&&t.$dropdown.title.parent().prepend("<i class='fas fa-filter'></i>");const s=n.html();if(t.$dropdown.title.html(s),t.$dropdown.container.find("li").removeClass("active"),"all"!==e.key&&n.addClass("active"),t.callbackFunction)return t.callbackFunction(t.tableAPI,e),void(e.callback&&e.callback());if(t.url){t.urlParams=window.location.search;const n=new URLSearchParams(t.urlParams);n.set(t.filterMenuKey,null!=typeof e.id?e.id:""),t.url,n.toString(),window.history.pushState("","",window.location.pathname+"?"+n.toString()),location.reload()}else t.preventUpdate=!0,e.callback&&e.callback(),t.tableAPI.column(t.columnIndex).search(e.regex,!0,!1).draw(),t.currentFilterSelected=e})),n}_createFilters(e){const t={};for(const n of e){const e=this._createMenuEntry(n);t[n.key]={filter:n,$node:e}}return t}_render(e){if(void 0===this.columnIndex)$(`<span id="${this.id}" ${this.extraAttributes} title="${this.filterTitle}">${this.icon||this.filterTitle}</span>`).insertBefore(this.$datatableWrapper.find(".dataTables_filter").parent());else{const t=$(`<div id='${this.filterMenuKey}_dropdown' class='dropdown d-inline'></div>`),n=$("<button class='btn-link btn dropdown-toggle' data-bs-toggle=\"dropdown\" type='button'></button>"),a=$(`<span class='filter-title'>${this.filterTitle}</span>`);n.append(a),this.$dropdown={container:t,title:a,button:n},this.filters=this._createFilters(e);const s=$(`<ul class='dropdown-menu dropdown-menu-lg-end scrollable-dropdown' id='${this.filterMenuKey}_dropdown_menu'></ul>`);for(const[e,t]of Object.entries(this.filters))s.append(t.$node);if(!this.removeAllEntry){const e=this._generateAllFilter();s.prepend(this._createMenuEntry(e))}t.append(n),t.append(s),t.insertBefore(this.$datatableWrapper.find(".dataTables_filter").parent()),this._selectFilterFromState(this.filterMenuKey)}}_selectFilterFromState(e){this.tableAPI.state&&this.tableAPI.state.loaded()&&this.tableAPI.state.loaded().filters&&tableAPI.state.save()}_generateAllFilter(){return{key:"all",label:i18n_ext.all,regex:"",countable:!1,callback:()=>{this.$dropdown.title.parent().find("i.fas.fa-filter").remove(),this.$dropdown.title.html(`${this.filterTitle}`)}}}_update(){if(void 0!==this.filters)if(this.preventUpdate)this.preventUpdate=!1;else for(const[e,t]of Object.entries(this.filters)){if(0==t.countable||0==t.filter.countable)continue;const e=this.tableAPI.columns(this.columnIndex).data()[0],n=this._countEntries(t.filter.regex,e);0==n?t.$node.hide():t.$node.show(),t.$node.find(".counter").text(`(${n})`),this.$dropdown.button.find(".counter").text(`(${n})`)}}},window.DataTableRenders=U,window.ChartWidget=class extends class{constructor(e,t={},n=0,a={}){this._fetchedData=[],this.name=e,this._updateTime=n,this._datasource=t,this._additionalParams=a}async init(){E.registerWidget(this),this._fetchedData=await this._fetchData(),this._updateTime>0&&setInterval((async()=>{await this.update(this._datasource.params)}),this._updateTime)}async destroy(){}async destroyAndUpdate(e={}){await this.destroy(),await this.update(e)}async updateByUrl(e){const t=new URL(`${location.origin}${this._datasource.name}`);let n=ntopng_url_manager.get_url_entries(e);for(const[e,a]of n)t.searchParams.set(e,a);this._datasource.endpoint=t.pathname+t.search,this._fetchedData=await this._fetchData()}async update(e={}){const t=new URL(`${location.origin}${this._datasource.name}`);for(const[n,a]of Object.entries(e))t.searchParams.set(n,a);this._datasource.endpoint=t.pathname+t.search,this._fetchedData=await this._fetchData()}async _fetchData(){const e=await fetch(`${http_prefix}${this._datasource.endpoint}`);return await e.json()}}{constructor(e,t="line",n={},a=0,s={}){super(e,n,a,s),this._chartType=t,this._chart={},this._$htmlChart=document.querySelector(`#canvas-widget-${e}`)}static registerEventCallback(e,t,n){setTimeout((async()=>{try{const a=E.getWidgetByName(e),s={chart:{events:{[t]:n}}};await a._chart.updateOptions(s)}catch(e){}}),1e3)}_generateConfig(){const e={series:[],tooltip:{enabledOnSeries:[0],x:{show:!0,format:"dd/MM/yyyy HH:mm:ss"},y:{formatter:function(e,{series:t,seriesIndex:n,dataPointIndex:a,w:s}){return e}},z:{show:!1}},chart:{type:this._chartType,events:{},height:"100%",toolbar:{show:!1}},xaxis:{labels:{style:{fontSize:"14px"}},tooltip:{enabled:!0,formatter:function(e){return e}}},yaxis:{labels:{style:{fontSize:"14px"}},tooltip:{enabled:!0,formatter:function(e){return e}}},zaxis:{labels:{style:{fontSize:"14px"}},tooltip:{enabled:!0}},dataLabels:{enabled:!0,style:{fontSize:"14px"}},labels:[],legend:{show:!0,fontSize:"14px",position:"bottom",onItemClick:{toggleDataSeries:!0}},plotOptions:{bar:{borderRadius:4,horizontal:!0}},noData:{text:"No Data",align:"center",verticalAlign:"middle",style:{fontSize:"24px"}}};if(this._additionalParams&&this._additionalParams.apex){return Object.assign(e,this._additionalParams.apex)}return e}_buildTooltip(e,t){if(e.tooltip.y={formatter:function(e,{series:t,seriesIndex:n,dataPointIndex:a,w:s}){return e}},t.tooltip){for(const n in t.tooltip)if("x"===n||"y"===n||"z"===n){const a=t.tooltip[n].formatter;e.tooltip[n]||(e.tooltip[n]={}),e.tooltip[n].formatter=A[a]||NtopUtils[a]}t.tooltip.custom&&(e.tooltip.custom=A[t.tooltip.custom]||NtopUtils[t.tooltip.custom])}}_buildAxisFormatter(e,t){const n=e[t];if(void 0!==n&&void 0!==n.labels&&void 0!==n.labels.ntop_utils_formatter&&"none"!==n.labels.ntop_utils_formatter){const e=n.labels.ntop_utils_formatter;void 0===NtopUtils[e]?console.error(`xaxis: Formatting function '${e}' didn't found inside NtopUtils.`):n.labels.formatter=NtopUtils[e]}}_buildDataLabels(e,t){if(t.dataLabels)for(const[n,a]of Object.entries(t.dataLabels))e.dataLabels[n]=a;let n=e.dataLabels.formatter;n&&A[n]&&(e.dataLabels.formatter=A[n])}_buildConfig(){const e=this._generateConfig(),t=this._fetchedData.rsp,n=["series","xaxis","yaxis","colors","labels","fill","filter","filtering_labels"];for(const a of n)void 0!==t[a]&&(void 0!==e[a]?e[a]=Object.assign(e[a],t[a]):e[a]=t[a]);if(t.events)for(const n in t.events)e.chart.events[n]=N[t.events[n]];return void 0!==t.horizontal_chart&&(e.plotOptions.bar.horizontal=t.horizontal_chart),this._buildTooltip(e,t),this._buildAxisFormatter(e,"xaxis"),this._buildAxisFormatter(e,"yaxis"),this._buildDataLabels(e,t),e}_initializeChart(){const e=this._buildConfig();this._chartConfig=e,this._chart=new ApexCharts(this._$htmlChart,this._chartConfig),this._chart.render()}async init(){await super.init(),this._initializeChart()}async destroy(){await super.destroy(),this._chart.destroy(),this._chart=null}async update(e={}){if(void 0!==this._chartConfig&&(e?await super.update(e):await super.updateByUrl(),null!=this._chart)){const{colors:e,series:t,dataLabels:n,labels:a,xaxis:s,filtering_labels:l}=this._fetchedData.rsp;if(this._chartConfig.colors=e,this._chartConfig.series=t,s&&s.categories&&(this._chartConfig.xaxis.categories=s.categories),l&&(this._chartConfig.filtering_labels=l),n){let e=this._chartConfig.dataLabels.formatter;this._chartConfig.dataLabels.formatter=e&&A[e]?A[e]:T}a&&(this._chartConfig.labels=a),this._chart.updateOptions(this._chartConfig,!0)}}async destroyAndUpdate(e={}){await super.destroyAndUpdate(e),this._initializeChart()}},window.WidgetUtils=E,window.ntopChartApex=M,$((function(){function e(e){if("mousedown"==e.type&&(e.metaKey||e.ctrlKey||2!==e.which))return;const t=$(this).data("id");$.post(`${http_prefix}/lua/update_blog_posts.lua`,{blog_notification_id:t,csrf:window.__BLOG_NOTIFICATION_CSRF__},(e=>{if(e.success){$(this).off("click").off("mousedown").attr("data-read","true").data("read","true").find(".badge").remove();const e=$(".blog-notification[data-read='false']").length;0==e?$(".notification-bell").remove():$(".notification-bell").html(e)}}))}$(".blog-notification[data-read='false']").on("click",e).on("mousedown",e)}));const R=F("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt"),D=F("itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly");function j(e){return!!e||""===e}function L(e){if(ue(e)){const t={};for(let n=0;n<e.length;n++){const a=e[n],s=he(a)?B(a):L(a);if(s)for(const e in s)t[e]=s[e]}return t}return he(e)||ge(e)?e:void 0}const V=/;(?![^(]*\))/g,z=/:(.+)/;function B(e){const t={};return e.split(V).forEach((e=>{if(e){const n=e.split(z);n.length>1&&(t[n[0].trim()]=n[1].trim())}})),t}function q(e){let t="";if(he(e))t=e;else if(ue(e))for(let n=0;n<e.length;n++){const a=q(e[n]);a&&(t+=a+" ")}else if(ge(e))for(const n in e)e[n]&&(t+=n+" ");return t.trim()}function H(e){if(!e)return null;let{class:t,style:n}=e;return t&&!he(t)&&(e.class=q(t)),n&&(e.style=L(n)),e}const G=F("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot"),K=F("svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view"),W=F("area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr");function J(e,t){if(e===t)return!0;let n=_e(e),a=_e(t);if(n||a)return!(!n||!a)&&e.getTime()===t.getTime();if(n=me(e),a=me(t),n||a)return e===t;if(n=ue(e),a=ue(t),n||a)return!(!n||!a)&&function(e,t){if(e.length!==t.length)return!1;let n=!0;for(let a=0;n&&a<e.length;a++)n=J(e[a],t[a]);return n}(e,t);if(n=ge(e),a=ge(t),n||a){if(!n||!a)return!1;if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const n in e){const a=e.hasOwnProperty(n),s=t.hasOwnProperty(n);if(a&&!s||!a&&s||!J(e[n],t[n]))return!1}}return String(e)===String(t)}function Y(e,t){return e.findIndex((e=>J(e,t)))}const Z=e=>he(e)?e:null==e?"":ue(e)||ge(e)&&(e.toString===be||!fe(e.toString))?JSON.stringify(e,X,2):String(e),X=(e,t)=>t&&t.__v_isRef?X(e,t.value):de(t)?{[`Map(${t.size})`]:[...t.entries()].reduce(((e,[t,n])=>(e[`${t} =>`]=n,e)),{})}:pe(t)?{[`Set(${t.size})`]:[...t.values()]}:!ge(t)||ue(t)||we(t)?t:String(t),Q={},ee=[],te=()=>{},ne=()=>!1,ae=/^on[^a-z]/,se=e=>ae.test(e),le=e=>e.startsWith("onUpdate:"),ie=Object.assign,oe=(e,t)=>{const n=e.indexOf(t);n>-1&&e.splice(n,1)},re=Object.prototype.hasOwnProperty,ce=(e,t)=>re.call(e,t),ue=Array.isArray,de=e=>"[object Map]"===ye(e),pe=e=>"[object Set]"===ye(e),_e=e=>"[object Date]"===ye(e),fe=e=>"function"==typeof e,he=e=>"string"==typeof e,me=e=>"symbol"==typeof e,ge=e=>null!==e&&"object"==typeof e,ve=e=>ge(e)&&fe(e.then)&&fe(e.catch),be=Object.prototype.toString,ye=e=>be.call(e),we=e=>"[object Object]"===ye(e),xe=e=>he(e)&&"NaN"!==e&&"-"!==e[0]&&""+parseInt(e,10)===e,ke=F(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),$e=F("bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo"),Se=e=>{const t=Object.create(null);return n=>t[n]||(t[n]=e(n))},Ce=/-(\w)/g,Ne=Se((e=>e.replace(Ce,((e,t)=>t?t.toUpperCase():"")))),Ae=/\B([A-Z])/g,Te=Se((e=>e.replace(Ae,"-$1").toLowerCase())),Ee=Se((e=>e.charAt(0).toUpperCase()+e.slice(1))),Pe=Se((e=>e?`on${Ee(e)}`:"")),Me=(e,t)=>!Object.is(e,t),Ie=(e,t)=>{for(let n=0;n<e.length;n++)e[n](t)},Oe=(e,t,n)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:n})},Ue=e=>{const t=parseFloat(e);return isNaN(t)?e:t};let Fe,Re;class De{constructor(e=!1){this.active=!0,this.effects=[],this.cleanups=[],!e&&Re&&(this.parent=Re,this.index=(Re.scopes||(Re.scopes=[])).push(this)-1)}run(e){if(this.active){const t=Re;try{return Re=this,e()}finally{Re=t}}}on(){Re=this}off(){Re=this.parent}stop(e){if(this.active){let t,n;for(t=0,n=this.effects.length;t<n;t++)this.effects[t].stop();for(t=0,n=this.cleanups.length;t<n;t++)this.cleanups[t]();if(this.scopes)for(t=0,n=this.scopes.length;t<n;t++)this.scopes[t].stop(!0);if(this.parent&&!e){const e=this.parent.scopes.pop();e&&e!==this&&(this.parent.scopes[this.index]=e,e.index=this.index)}this.active=!1}}}function je(e){return new De(e)}function Le(e,t=Re){t&&t.active&&t.effects.push(e)}function Ve(){return Re}function ze(e){Re&&Re.cleanups.push(e)}const Be=e=>{const t=new Set(e);return t.w=0,t.n=0,t},qe=e=>(e.w&Je)>0,He=e=>(e.n&Je)>0,Ge=new WeakMap;let Ke,We=0,Je=1;const Ye=Symbol(""),Ze=Symbol("");class Xe{constructor(e,t=null,n){this.fn=e,this.scheduler=t,this.active=!0,this.deps=[],this.parent=void 0,Le(this,n)}run(){if(!this.active)return this.fn();let e=Ke,t=nt;for(;e;){if(e===this)return;e=e.parent}try{return this.parent=Ke,Ke=this,nt=!0,Je=1<<++We,We<=30?(({deps:e})=>{if(e.length)for(let t=0;t<e.length;t++)e[t].w|=Je})(this):Qe(this),this.fn()}finally{We<=30&&(e=>{const{deps:t}=e;if(t.length){let n=0;for(let a=0;a<t.length;a++){const s=t[a];qe(s)&&!He(s)?s.delete(e):t[n++]=s,s.w&=~Je,s.n&=~Je}t.length=n}})(this),Je=1<<--We,Ke=this.parent,nt=t,this.parent=void 0,this.deferStop&&this.stop()}}stop(){Ke===this?this.deferStop=!0:this.active&&(Qe(this),this.onStop&&this.onStop(),this.active=!1)}}function Qe(e){const{deps:t}=e;if(t.length){for(let n=0;n<t.length;n++)t[n].delete(e);t.length=0}}function et(e,t){e.effect&&(e=e.effect.fn);const n=new Xe(e);t&&(ie(n,t),t.scope&&Le(n,t.scope)),t&&t.lazy||n.run();const a=n.run.bind(n);return a.effect=n,a}function tt(e){e.effect.stop()}let nt=!0;const at=[];function st(){at.push(nt),nt=!1}function lt(){const e=at.pop();nt=void 0===e||e}function it(e,t,n){if(nt&&Ke){let t=Ge.get(e);t||Ge.set(e,t=new Map);let a=t.get(n);a||t.set(n,a=Be()),ot(a)}}function ot(e,t){let n=!1;We<=30?He(e)||(e.n|=Je,n=!qe(e)):n=!e.has(Ke),n&&(e.add(Ke),Ke.deps.push(e))}function rt(e,t,n,a,s,l){const i=Ge.get(e);if(!i)return;let o=[];if("clear"===t)o=[...i.values()];else if("length"===n&&ue(e))i.forEach(((e,t)=>{("length"===t||t>=a)&&o.push(e)}));else switch(void 0!==n&&o.push(i.get(n)),t){case"add":ue(e)?xe(n)&&o.push(i.get("length")):(o.push(i.get(Ye)),de(e)&&o.push(i.get(Ze)));break;case"delete":ue(e)||(o.push(i.get(Ye)),de(e)&&o.push(i.get(Ze)));break;case"set":de(e)&&o.push(i.get(Ye))}if(1===o.length)o[0]&&ct(o[0]);else{const e=[];for(const t of o)t&&e.push(...t);ct(Be(e))}}function ct(e,t){const n=ue(e)?e:[...e];for(const e of n)e.computed&&ut(e);for(const e of n)e.computed||ut(e)}function ut(e,t){(e!==Ke||e.allowRecurse)&&(e.scheduler?e.scheduler():e.run())}const dt=F("__proto__,__v_isRef,__isVue"),pt=new Set(Object.getOwnPropertyNames(Symbol).filter((e=>"arguments"!==e&&"caller"!==e)).map((e=>Symbol[e])).filter(me)),_t=vt(),ft=vt(!1,!0),ht=vt(!0),mt=vt(!0,!0),gt=function(){const e={};return["includes","indexOf","lastIndexOf"].forEach((t=>{e[t]=function(...e){const n=sn(this);for(let e=0,t=this.length;e<t;e++)it(n,0,e+"");const a=n[t](...e);return-1===a||!1===a?n[t](...e.map(sn)):a}})),["push","pop","shift","unshift","splice"].forEach((t=>{e[t]=function(...e){st();const n=sn(this)[t].apply(this,e);return lt(),n}})),e}();function vt(e=!1,t=!1){return function(n,a,s){if("__v_isReactive"===a)return!e;if("__v_isReadonly"===a)return e;if("__v_isShallow"===a)return t;if("__v_raw"===a&&s===(e?t?Wt:Kt:t?Gt:Ht).get(n))return n;const l=ue(n);if(!e&&l&&ce(gt,a))return Reflect.get(gt,a,s);const i=Reflect.get(n,a,s);return(me(a)?pt.has(a):dt(a))?i:(e||it(n,0,a),t?i:dn(i)?l&&xe(a)?i:i.value:ge(i)?e?Zt(i):Jt(i):i)}}function bt(e=!1){return function(t,n,a,s){let l=t[n];if(tn(l)&&dn(l)&&!dn(a))return!1;if(!e&&!tn(a)&&(nn(a)||(a=sn(a),l=sn(l)),!ue(t)&&dn(l)&&!dn(a)))return l.value=a,!0;const i=ue(t)&&xe(n)?Number(n)<t.length:ce(t,n),o=Reflect.set(t,n,a,s);return t===sn(s)&&(i?Me(a,l)&&rt(t,"set",n,a):rt(t,"add",n,a)),o}}const yt={get:_t,set:bt(),deleteProperty:function(e,t){const n=ce(e,t),a=Reflect.deleteProperty(e,t);return a&&n&&rt(e,"delete",t,void 0),a},has:function(e,t){const n=Reflect.has(e,t);return me(t)&&pt.has(t)||it(e,0,t),n},ownKeys:function(e){return it(e,0,ue(e)?"length":Ye),Reflect.ownKeys(e)}},wt={get:ht,set:(e,t)=>!0,deleteProperty:(e,t)=>!0},xt=ie({},yt,{get:ft,set:bt(!0)}),kt=ie({},wt,{get:mt}),$t=e=>e,St=e=>Reflect.getPrototypeOf(e);function Ct(e,t,n=!1,a=!1){const s=sn(e=e.__v_raw),l=sn(t);n||(t!==l&&it(s,0,t),it(s,0,l));const{has:i}=St(s),o=a?$t:n?rn:on;return i.call(s,t)?o(e.get(t)):i.call(s,l)?o(e.get(l)):void(e!==s&&e.get(t))}function Nt(e,t=!1){const n=this.__v_raw,a=sn(n),s=sn(e);return t||(e!==s&&it(a,0,e),it(a,0,s)),e===s?n.has(e):n.has(e)||n.has(s)}function At(e,t=!1){return e=e.__v_raw,!t&&it(sn(e),0,Ye),Reflect.get(e,"size",e)}function Tt(e){e=sn(e);const t=sn(this);return St(t).has.call(t,e)||(t.add(e),rt(t,"add",e,e)),this}function Et(e,t){t=sn(t);const n=sn(this),{has:a,get:s}=St(n);let l=a.call(n,e);l||(e=sn(e),l=a.call(n,e));const i=s.call(n,e);return n.set(e,t),l?Me(t,i)&&rt(n,"set",e,t):rt(n,"add",e,t),this}function Pt(e){const t=sn(this),{has:n,get:a}=St(t);let s=n.call(t,e);s||(e=sn(e),s=n.call(t,e)),a&&a.call(t,e);const l=t.delete(e);return s&&rt(t,"delete",e,void 0),l}function Mt(){const e=sn(this),t=0!==e.size,n=e.clear();return t&&rt(e,"clear",void 0,void 0),n}function It(e,t){return function(n,a){const s=this,l=s.__v_raw,i=sn(l),o=t?$t:e?rn:on;return!e&&it(i,0,Ye),l.forEach(((e,t)=>n.call(a,o(e),o(t),s)))}}function Ot(e,t,n){return function(...a){const s=this.__v_raw,l=sn(s),i=de(l),o="entries"===e||e===Symbol.iterator&&i,r="keys"===e&&i,c=s[e](...a),u=n?$t:t?rn:on;return!t&&it(l,0,r?Ze:Ye),{next(){const{value:e,done:t}=c.next();return t?{value:e,done:t}:{value:o?[u(e[0]),u(e[1])]:u(e),done:t}},[Symbol.iterator](){return this}}}}function Ut(e){return function(...t){return"delete"!==e&&this}}const[Ft,Rt,Dt,jt]=function(){const e={get(e){return Ct(this,e)},get size(){return At(this)},has:Nt,add:Tt,set:Et,delete:Pt,clear:Mt,forEach:It(!1,!1)},t={get(e){return Ct(this,e,!1,!0)},get size(){return At(this)},has:Nt,add:Tt,set:Et,delete:Pt,clear:Mt,forEach:It(!1,!0)},n={get(e){return Ct(this,e,!0)},get size(){return At(this,!0)},has(e){return Nt.call(this,e,!0)},add:Ut("add"),set:Ut("set"),delete:Ut("delete"),clear:Ut("clear"),forEach:It(!0,!1)},a={get(e){return Ct(this,e,!0,!0)},get size(){return At(this,!0)},has(e){return Nt.call(this,e,!0)},add:Ut("add"),set:Ut("set"),delete:Ut("delete"),clear:Ut("clear"),forEach:It(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach((s=>{e[s]=Ot(s,!1,!1),n[s]=Ot(s,!0,!1),t[s]=Ot(s,!1,!0),a[s]=Ot(s,!0,!0)})),[e,n,t,a]}();function Lt(e,t){const n=t?e?jt:Dt:e?Rt:Ft;return(t,a,s)=>"__v_isReactive"===a?!e:"__v_isReadonly"===a?e:"__v_raw"===a?t:Reflect.get(ce(n,a)&&a in t?n:t,a,s)}const Vt={get:Lt(!1,!1)},zt={get:Lt(!1,!0)},Bt={get:Lt(!0,!1)},qt={get:Lt(!0,!0)},Ht=new WeakMap,Gt=new WeakMap,Kt=new WeakMap,Wt=new WeakMap;function Jt(e){return tn(e)?e:Qt(e,!1,yt,Vt,Ht)}function Yt(e){return Qt(e,!1,xt,zt,Gt)}function Zt(e){return Qt(e,!0,wt,Bt,Kt)}function Xt(e){return Qt(e,!0,kt,qt,Wt)}function Qt(e,t,n,a,s){if(!ge(e))return e;if(e.__v_raw&&(!t||!e.__v_isReactive))return e;const l=s.get(e);if(l)return l;const i=function(e){return e.__v_skip||!Object.isExtensible(e)?0:function(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}((e=>ye(e).slice(8,-1))(e))}(e);if(0===i)return e;const o=new Proxy(e,2===i?a:n);return s.set(e,o),o}function en(e){return tn(e)?en(e.__v_raw):!(!e||!e.__v_isReactive)}function tn(e){return!(!e||!e.__v_isReadonly)}function nn(e){return!(!e||!e.__v_isShallow)}function an(e){return en(e)||tn(e)}function sn(e){const t=e&&e.__v_raw;return t?sn(t):e}function ln(e){return Oe(e,"__v_skip",!0),e}const on=e=>ge(e)?Jt(e):e,rn=e=>ge(e)?Zt(e):e;function cn(e){nt&&Ke&&ot((e=sn(e)).dep||(e.dep=Be()))}function un(e,t){(e=sn(e)).dep&&ct(e.dep)}function dn(e){return!(!e||!0!==e.__v_isRef)}function pn(e){return fn(e,!1)}function _n(e){return fn(e,!0)}function fn(e,t){return dn(e)?e:new hn(e,t)}class hn{constructor(e,t){this.__v_isShallow=t,this.dep=void 0,this.__v_isRef=!0,this._rawValue=t?e:sn(e),this._value=t?e:on(e)}get value(){return cn(this),this._value}set value(e){e=this.__v_isShallow?e:sn(e),Me(e,this._rawValue)&&(this._rawValue=e,this._value=this.__v_isShallow?e:on(e),un(this))}}function mn(e){un(e)}function gn(e){return dn(e)?e.value:e}const vn={get:(e,t,n)=>gn(Reflect.get(e,t,n)),set:(e,t,n,a)=>{const s=e[t];return dn(s)&&!dn(n)?(s.value=n,!0):Reflect.set(e,t,n,a)}};function bn(e){return en(e)?e:new Proxy(e,vn)}class yn{constructor(e){this.dep=void 0,this.__v_isRef=!0;const{get:t,set:n}=e((()=>cn(this)),(()=>un(this)));this._get=t,this._set=n}get value(){return this._get()}set value(e){this._set(e)}}function wn(e){return new yn(e)}function xn(e){const t=ue(e)?new Array(e.length):{};for(const n in e)t[n]=$n(e,n);return t}class kn{constructor(e,t,n){this._object=e,this._key=t,this._defaultValue=n,this.__v_isRef=!0}get value(){const e=this._object[this._key];return void 0===e?this._defaultValue:e}set value(e){this._object[this._key]=e}}function $n(e,t,n){const a=e[t];return dn(a)?a:new kn(e,t,n)}class Sn{constructor(e,t,n,a){this._setter=t,this.dep=void 0,this.__v_isRef=!0,this._dirty=!0,this.effect=new Xe(e,(()=>{this._dirty||(this._dirty=!0,un(this))})),this.effect.computed=this,this.effect.active=this._cacheable=!a,this.__v_isReadonly=n}get value(){const e=sn(this);return cn(e),!e._dirty&&e._cacheable||(e._dirty=!1,e._value=e.effect.run()),e._value}set value(e){this._setter(e)}}const Cn=[];function Nn(e,...t){st();const n=Cn.length?Cn[Cn.length-1].component:null,a=n&&n.appContext.config.warnHandler,s=function(){let e=Cn[Cn.length-1];if(!e)return[];const t=[];for(;e;){const n=t[0];n&&n.vnode===e?n.recurseCount++:t.push({vnode:e,recurseCount:0});const a=e.component&&e.component.parent;e=a&&a.vnode}return t}();if(a)En(a,n,11,[e+t.join(""),n&&n.proxy,s.map((({vnode:e})=>`at <${mi(n,e.type)}>`)).join("\n"),s]);else{const n=[`[Vue warn]: ${e}`,...t];s.length&&n.push("\n",...function(e){const t=[];return e.forEach(((e,n)=>{t.push(...0===n?[]:["\n"],...function({vnode:e,recurseCount:t}){const n=t>0?`... (${t} recursive calls)`:"",a=` at <${mi(e.component,e.type,!!e.component&&null==e.component.parent)}`,s=">"+n;return e.props?[a,...An(e.props),s]:[a+s]}(e))})),t}(s)),console.warn(...n)}lt()}function An(e){const t=[],n=Object.keys(e);return n.slice(0,3).forEach((n=>{t.push(...Tn(n,e[n]))})),n.length>3&&t.push(" ..."),t}function Tn(e,t,n){return he(t)?(t=JSON.stringify(t),n?t:[`${e}=${t}`]):"number"==typeof t||"boolean"==typeof t||null==t?n?t:[`${e}=${t}`]:dn(t)?(t=Tn(e,sn(t.value),!0),n?t:[`${e}=Ref<`,t,">"]):fe(t)?[`${e}=fn${t.name?`<${t.name}>`:""}`]:(t=sn(t),n?t:[`${e}=`,t])}function En(e,t,n,a){let s;try{s=a?e(...a):e()}catch(e){Mn(e,t,n)}return s}function Pn(e,t,n,a){if(fe(e)){const s=En(e,t,n,a);return s&&ve(s)&&s.catch((e=>{Mn(e,t,n)})),s}const s=[];for(let l=0;l<e.length;l++)s.push(Pn(e[l],t,n,a));return s}function Mn(e,t,n,a=!0){if(t){let a=t.parent;const s=t.proxy,l=n;for(;a;){const t=a.ec;if(t)for(let n=0;n<t.length;n++)if(!1===t[n](e,s,l))return;a=a.parent}const i=t.appContext.config.errorHandler;if(i)return void En(i,null,10,[e,s,l])}!function(e,t,n,a=!0){console.error(e)}(e,0,0,a)}let In=!1,On=!1;const Un=[];let Fn=0;const Rn=[];let Dn=null,jn=0;const Ln=[];let Vn=null,zn=0;const Bn=Promise.resolve();let qn=null,Hn=null;function Gn(e){const t=qn||Bn;return e?t.then(this?e.bind(this):e):t}function Kn(e){Un.length&&Un.includes(e,In&&e.allowRecurse?Fn+1:Fn)||e===Hn||(null==e.id?Un.push(e):Un.splice(function(e){let t=Fn+1,n=Un.length;for(;t<n;){const a=t+n>>>1;Qn(Un[a])<e?t=a+1:n=a}return t}(e.id),0,e),Wn())}function Wn(){In||On||(On=!0,qn=Bn.then(ea))}function Jn(e,t,n,a){ue(e)?n.push(...e):t&&t.includes(e,e.allowRecurse?a+1:a)||n.push(e),Wn()}function Yn(e){Jn(e,Vn,Ln,zn)}function Zn(e,t=null){if(Rn.length){for(Hn=t,Dn=[...new Set(Rn)],Rn.length=0,jn=0;jn<Dn.length;jn++)Dn[jn]();Dn=null,jn=0,Hn=null,Zn(e,t)}}function Xn(e){if(Zn(),Ln.length){const e=[...new Set(Ln)];if(Ln.length=0,Vn)return void Vn.push(...e);for(Vn=e,Vn.sort(((e,t)=>Qn(e)-Qn(t))),zn=0;zn<Vn.length;zn++)Vn[zn]();Vn=null,zn=0}}const Qn=e=>null==e.id?1/0:e.id;function ea(e){On=!1,In=!0,Zn(e),Un.sort(((e,t)=>Qn(e)-Qn(t)));try{for(Fn=0;Fn<Un.length;Fn++){const e=Un[Fn];e&&!1!==e.active&&En(e,null,14)}}finally{Fn=0,Un.length=0,Xn(),In=!1,qn=null,(Un.length||Rn.length||Ln.length)&&ea(e)}}let ta,na=[];function aa(e,t){var n,a;ta=e,ta?(ta.enabled=!0,na.forEach((({event:e,args:t})=>ta.emit(e,...t))),na=[]):"undefined"!=typeof window&&window.HTMLElement&&!(null===(a=null===(n=window.navigator)||void 0===n?void 0:n.userAgent)||void 0===a?void 0:a.includes("jsdom"))?((t.__VUE_DEVTOOLS_HOOK_REPLAY__=t.__VUE_DEVTOOLS_HOOK_REPLAY__||[]).push((e=>{aa(e,t)})),setTimeout((()=>{ta||(t.__VUE_DEVTOOLS_HOOK_REPLAY__=null,na=[])}),3e3)):na=[]}function sa(e,t,...n){if(e.isUnmounted)return;const a=e.vnode.props||Q;let s=n;const l=t.startsWith("update:"),i=l&&t.slice(7);if(i&&i in a){const e=`${"modelValue"===i?"model":i}Modifiers`,{number:t,trim:l}=a[e]||Q;l&&(s=n.map((e=>e.trim()))),t&&(s=n.map(Ue))}let o,r=a[o=Pe(t)]||a[o=Pe(Ne(t))];!r&&l&&(r=a[o=Pe(Te(t))]),r&&Pn(r,e,6,s);const c=a[o+"Once"];if(c){if(e.emitted){if(e.emitted[o])return}else e.emitted={};e.emitted[o]=!0,Pn(c,e,6,s)}}function la(e,t,n=!1){const a=t.emitsCache,s=a.get(e);if(void 0!==s)return s;const l=e.emits;let i={},o=!1;if(!fe(e)){const a=e=>{const n=la(e,t,!0);n&&(o=!0,ie(i,n))};!n&&t.mixins.length&&t.mixins.forEach(a),e.extends&&a(e.extends),e.mixins&&e.mixins.forEach(a)}return l||o?(ue(l)?l.forEach((e=>i[e]=null)):ie(i,l),a.set(e,i),i):(a.set(e,null),null)}function ia(e,t){return!(!e||!se(t))&&(t=t.slice(2).replace(/Once$/,""),ce(e,t[0].toLowerCase()+t.slice(1))||ce(e,Te(t))||ce(e,t))}let oa=null,ra=null;function ca(e){const t=oa;return oa=e,ra=e&&e.type.__scopeId||null,t}function ua(e){ra=e}function da(){ra=null}const pa=e=>_a;function _a(e,t=oa,n){if(!t)return e;if(e._n)return e;const a=(...n)=>{a._d&&El(-1);const s=ca(t),l=e(...n);return ca(s),a._d&&El(1),l};return a._n=!0,a._c=!0,a._d=!0,a}function fa(e){const{type:t,vnode:n,proxy:a,withProxy:s,props:l,propsOptions:[i],slots:o,attrs:r,emit:c,render:u,renderCache:d,data:p,setupState:_,ctx:f,inheritAttrs:h}=e;let m,g;const v=ca(e);try{if(4&n.shapeFlag){const e=s||a;m=Kl(u.call(e,e,d,l,_,p,f)),g=r}else{m=Kl(t(l,t.length>1?{attrs:r,slots:o,emit:c}:null)),g=t.props?r:ha(r)}}catch(t){Sl.length=0,Mn(t,e,1),m=Vl(kl)}let b=m;if(g&&!1!==h){const e=Object.keys(g),{shapeFlag:t}=b;e.length&&7&t&&(i&&e.some(le)&&(g=ma(g,i)),b=Bl(b,g))}return n.dirs&&(b=Bl(b),b.dirs=b.dirs?b.dirs.concat(n.dirs):n.dirs),n.transition&&(b.transition=n.transition),m=b,ca(v),m}const ha=e=>{let t;for(const n in e)("class"===n||"style"===n||se(n))&&((t||(t={}))[n]=e[n]);return t},ma=(e,t)=>{const n={};for(const a in e)le(a)&&a.slice(9)in t||(n[a]=e[a]);return n};function ga(e,t,n){const a=Object.keys(t);if(a.length!==Object.keys(e).length)return!0;for(let s=0;s<a.length;s++){const l=a[s];if(t[l]!==e[l]&&!ia(n,l))return!0}return!1}function va({vnode:e,parent:t},n){for(;t&&t.subTree===e;)(e=t.vnode).el=n,t=t.parent}const ba=e=>e.__isSuspense,ya={name:"Suspense",__isSuspense:!0,process(e,t,n,a,s,l,i,o,r,c){null==e?function(e,t,n,a,s,l,i,o,r){const{p:c,o:{createElement:u}}=r,d=u("div"),p=e.suspense=xa(e,s,a,t,d,n,l,i,o,r);c(null,p.pendingBranch=e.ssContent,d,null,a,p,l,i),p.deps>0?(wa(e,"onPending"),wa(e,"onFallback"),c(null,e.ssFallback,t,n,a,null,l,i),Sa(p,e.ssFallback)):p.resolve()}(t,n,a,s,l,i,o,r,c):function(e,t,n,a,s,l,i,o,{p:r,um:c,o:{createElement:u}}){const d=t.suspense=e.suspense;d.vnode=t,t.el=e.el;const p=t.ssContent,_=t.ssFallback,{activeBranch:f,pendingBranch:h,isInFallback:m,isHydrating:g}=d;if(h)d.pendingBranch=p,Ul(p,h)?(r(h,p,d.hiddenContainer,null,s,d,l,i,o),d.deps<=0?d.resolve():m&&(r(f,_,n,a,s,null,l,i,o),Sa(d,_))):(d.pendingId++,g?(d.isHydrating=!1,d.activeBranch=h):c(h,s,d),d.deps=0,d.effects.length=0,d.hiddenContainer=u("div"),m?(r(null,p,d.hiddenContainer,null,s,d,l,i,o),d.deps<=0?d.resolve():(r(f,_,n,a,s,null,l,i,o),Sa(d,_))):f&&Ul(p,f)?(r(f,p,n,a,s,d,l,i,o),d.resolve(!0)):(r(null,p,d.hiddenContainer,null,s,d,l,i,o),d.deps<=0&&d.resolve()));else if(f&&Ul(p,f))r(f,p,n,a,s,d,l,i,o),Sa(d,p);else if(wa(t,"onPending"),d.pendingBranch=p,d.pendingId++,r(null,p,d.hiddenContainer,null,s,d,l,i,o),d.deps<=0)d.resolve();else{const{timeout:e,pendingId:t}=d;e>0?setTimeout((()=>{d.pendingId===t&&d.fallback(_)}),e):0===e&&d.fallback(_)}}(e,t,n,a,s,i,o,r,c)},hydrate:function(e,t,n,a,s,l,i,o,r){const c=t.suspense=xa(t,a,n,e.parentNode,document.createElement("div"),null,s,l,i,o,!0),u=r(e,c.pendingBranch=t.ssContent,n,c,l,i);return 0===c.deps&&c.resolve(),u},create:xa,normalize:function(e){const{shapeFlag:t,children:n}=e,a=32&t;e.ssContent=ka(a?n.default:n),e.ssFallback=a?ka(n.fallback):Vl(kl)}};function wa(e,t){const n=e.props&&e.props[t];fe(n)&&n()}function xa(e,t,n,a,s,l,i,o,r,c,u=!1){const{p:d,m:p,um:_,n:f,o:{parentNode:h,remove:m}}=c,g=Ue(e.props&&e.props.timeout),v={vnode:e,parent:t,parentComponent:n,isSVG:i,container:a,hiddenContainer:s,anchor:l,deps:0,pendingId:0,timeout:"number"==typeof g?g:-1,activeBranch:null,pendingBranch:null,isInFallback:!0,isHydrating:u,isUnmounted:!1,effects:[],resolve(e=!1){const{vnode:t,activeBranch:n,pendingBranch:a,pendingId:s,effects:l,parentComponent:i,container:o}=v;if(v.isHydrating)v.isHydrating=!1;else if(!e){const e=n&&a.transition&&"out-in"===a.transition.mode;e&&(n.transition.afterLeave=()=>{s===v.pendingId&&p(a,o,t,0)});let{anchor:t}=v;n&&(t=f(n),_(n,i,v,!0)),e||p(a,o,t,0)}Sa(v,a),v.pendingBranch=null,v.isInFallback=!1;let r=v.parent,c=!1;for(;r;){if(r.pendingBranch){r.effects.push(...l),c=!0;break}r=r.parent}c||Yn(l),v.effects=[],wa(t,"onResolve")},fallback(e){if(!v.pendingBranch)return;const{vnode:t,activeBranch:n,parentComponent:a,container:s,isSVG:l}=v;wa(t,"onFallback");const i=f(n),c=()=>{v.isInFallback&&(d(null,e,s,i,a,null,l,o,r),Sa(v,e))},u=e.transition&&"out-in"===e.transition.mode;u&&(n.transition.afterLeave=c),v.isInFallback=!0,_(n,a,null,!0),u||c()},move(e,t,n){v.activeBranch&&p(v.activeBranch,e,t,n),v.container=e},next:()=>v.activeBranch&&f(v.activeBranch),registerDep(e,t){const n=!!v.pendingBranch;n&&v.deps++;const a=e.vnode.el;e.asyncDep.catch((t=>{Mn(t,e,0)})).then((s=>{if(e.isUnmounted||v.isUnmounted||v.pendingId!==e.suspenseId)return;e.asyncResolved=!0;const{vnode:l}=e;ri(e,s,!1),a&&(l.el=a);const o=!a&&e.subTree.el;t(e,l,h(a||e.subTree.el),a?null:f(e.subTree),v,i,r),o&&m(o),va(e,l.el),n&&0==--v.deps&&v.resolve()}))},unmount(e,t){v.isUnmounted=!0,v.activeBranch&&_(v.activeBranch,n,e,t),v.pendingBranch&&_(v.pendingBranch,n,e,t)}};return v}function ka(e){let t;if(fe(e)){const n=Tl&&e._c;n&&(e._d=!1,Nl()),e=e(),n&&(e._d=!0,t=Cl,Al())}if(ue(e)){const t=function(e){let t;for(let n=0;n<e.length;n++){const a=e[n];if(!Ol(a))return;if(a.type!==kl||"v-if"===a.children){if(t)return;t=a}}return t}(e);e=t}return e=Kl(e),t&&!e.dynamicChildren&&(e.dynamicChildren=t.filter((t=>t!==e))),e}function $a(e,t){t&&t.pendingBranch?ue(e)?t.effects.push(...e):t.effects.push(e):Yn(e)}function Sa(e,t){e.activeBranch=t;const{vnode:n,parentComponent:a}=e,s=n.el=t.el;a&&a.subTree===n&&(a.vnode.el=s,va(a,s))}function Ca(e,t){if(ei){let n=ei.provides;const a=ei.parent&&ei.parent.provides;a===n&&(n=ei.provides=Object.create(a)),n[e]=t}}function Na(e,t,n=!1){const a=ei||oa;if(a){const s=null==a.parent?a.vnode.appContext&&a.vnode.appContext.provides:a.parent.provides;if(s&&e in s)return s[e];if(arguments.length>1)return n&&fe(t)?t.call(a.proxy):t}}function Aa(e,t){return Ia(e,null,t)}function Ta(e,t){return Ia(e,null,{flush:"post"})}function Ea(e,t){return Ia(e,null,{flush:"sync"})}const Pa={};function Ma(e,t,n){return Ia(e,t,n)}function Ia(e,t,{immediate:n,deep:a,flush:s}=Q){const l=ei;let i,o,r=!1,c=!1;if(dn(e)?(i=()=>e.value,r=nn(e)):en(e)?(i=()=>e,a=!0):ue(e)?(c=!0,r=e.some((e=>en(e)||nn(e))),i=()=>e.map((e=>dn(e)?e.value:en(e)?Fa(e):fe(e)?En(e,l,2):void 0))):i=fe(e)?t?()=>En(e,l,2):()=>{if(!l||!l.isUnmounted)return o&&o(),Pn(e,l,3,[u])}:te,t&&a){const e=i;i=()=>Fa(e())}let u=e=>{o=f.onStop=()=>{En(e,l,4)}},d=c?[]:Pa;const p=()=>{if(f.active)if(t){const e=f.run();(a||r||(c?e.some(((e,t)=>Me(e,d[t]))):Me(e,d)))&&(o&&o(),Pn(t,l,3,[e,d===Pa?void 0:d,u]),d=e)}else f.run()};let _;p.allowRecurse=!!t,_="sync"===s?p:"post"===s?()=>ul(p,l&&l.suspense):()=>function(e){Jn(e,Dn,Rn,jn)}(p);const f=new Xe(i,_);return t?n?p():d=f.run():"post"===s?ul(f.run.bind(f),l&&l.suspense):f.run(),()=>{f.stop(),l&&l.scope&&oe(l.scope.effects,f)}}function Oa(e,t,n){const a=this.proxy,s=he(e)?e.includes(".")?Ua(a,e):()=>a[e]:e.bind(a,a);let l;fe(t)?l=t:(l=t.handler,n=t);const i=ei;ni(this);const o=Ia(s,l.bind(a),n);return i?ni(i):ai(),o}function Ua(e,t){const n=t.split(".");return()=>{let t=e;for(let e=0;e<n.length&&t;e++)t=t[n[e]];return t}}function Fa(e,t){if(!ge(e)||e.__v_skip)return e;if((t=t||new Set).has(e))return e;if(t.add(e),dn(e))Fa(e.value,t);else if(ue(e))for(let n=0;n<e.length;n++)Fa(e[n],t);else if(pe(e)||de(e))e.forEach((e=>{Fa(e,t)}));else if(we(e))for(const n in e)Fa(e[n],t);return e}function Ra(){const e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return rs((()=>{e.isMounted=!0})),ds((()=>{e.isUnmounting=!0})),e}const Da=[Function,Array],ja={name:"BaseTransition",props:{mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:Da,onEnter:Da,onAfterEnter:Da,onEnterCancelled:Da,onBeforeLeave:Da,onLeave:Da,onAfterLeave:Da,onLeaveCancelled:Da,onBeforeAppear:Da,onAppear:Da,onAfterAppear:Da,onAppearCancelled:Da},setup(e,{slots:t}){const n=ti(),a=Ra();let s;return()=>{const l=t.default&&Ha(t.default(),!0);if(!l||!l.length)return;let i=l[0];if(l.length>1)for(const e of l)if(e.type!==kl){i=e;break}const o=sn(e),{mode:r}=o;if(a.isLeaving)return za(i);const c=Ba(i);if(!c)return za(i);const u=Va(c,o,a,n);qa(c,u);const d=n.subTree,p=d&&Ba(d);let _=!1;const{getTransitionKey:f}=c.type;if(f){const e=f();void 0===s?s=e:e!==s&&(s=e,_=!0)}if(p&&p.type!==kl&&(!Ul(c,p)||_)){const e=Va(p,o,a,n);if(qa(p,e),"out-in"===r)return a.isLeaving=!0,e.afterLeave=()=>{a.isLeaving=!1,n.update()},za(i);"in-out"===r&&c.type!==kl&&(e.delayLeave=(e,t,n)=>{La(a,p)[String(p.key)]=p,e._leaveCb=()=>{t(),e._leaveCb=void 0,delete u.delayedLeave},u.delayedLeave=n})}return i}}};function La(e,t){const{leavingVNodes:n}=e;let a=n.get(t.type);return a||(a=Object.create(null),n.set(t.type,a)),a}function Va(e,t,n,a){const{appear:s,mode:l,persisted:i=!1,onBeforeEnter:o,onEnter:r,onAfterEnter:c,onEnterCancelled:u,onBeforeLeave:d,onLeave:p,onAfterLeave:_,onLeaveCancelled:f,onBeforeAppear:h,onAppear:m,onAfterAppear:g,onAppearCancelled:v}=t,b=String(e.key),y=La(n,e),w=(e,t)=>{e&&Pn(e,a,9,t)},x=(e,t)=>{const n=t[1];w(e,t),ue(e)?e.every((e=>e.length<=1))&&n():e.length<=1&&n()},k={mode:l,persisted:i,beforeEnter(t){let a=o;if(!n.isMounted){if(!s)return;a=h||o}t._leaveCb&&t._leaveCb(!0);const l=y[b];l&&Ul(e,l)&&l.el._leaveCb&&l.el._leaveCb(),w(a,[t])},enter(e){let t=r,a=c,l=u;if(!n.isMounted){if(!s)return;t=m||r,a=g||c,l=v||u}let i=!1;const o=e._enterCb=t=>{i||(i=!0,w(t?l:a,[e]),k.delayedLeave&&k.delayedLeave(),e._enterCb=void 0)};t?x(t,[e,o]):o()},leave(t,a){const s=String(e.key);if(t._enterCb&&t._enterCb(!0),n.isUnmounting)return a();w(d,[t]);let l=!1;const i=t._leaveCb=n=>{l||(l=!0,a(),w(n?f:_,[t]),t._leaveCb=void 0,y[s]===e&&delete y[s])};y[s]=e,p?x(p,[t,i]):i()},clone:e=>Va(e,t,n,a)};return k}function za(e){if(Ya(e))return(e=Bl(e)).children=null,e}function Ba(e){return Ya(e)?e.children?e.children[0]:void 0:e}function qa(e,t){6&e.shapeFlag&&e.component?qa(e.component.subTree,t):128&e.shapeFlag?(e.ssContent.transition=t.clone(e.ssContent),e.ssFallback.transition=t.clone(e.ssFallback)):e.transition=t}function Ha(e,t=!1,n){let a=[],s=0;for(let l=0;l<e.length;l++){let i=e[l];const o=null==n?i.key:String(n)+String(null!=i.key?i.key:l);i.type===wl?(128&i.patchFlag&&s++,a=a.concat(Ha(i.children,t,o))):(t||i.type!==kl)&&a.push(null!=o?Bl(i,{key:o}):i)}if(s>1)for(let e=0;e<a.length;e++)a[e].patchFlag=-2;return a}function Ga(e){return fe(e)?{setup:e,name:e.name}:e}const Ka=e=>!!e.type.__asyncLoader;function Wa(e){fe(e)&&(e={loader:e});const{loader:t,loadingComponent:n,errorComponent:a,delay:s=200,timeout:l,suspensible:i=!0,onError:o}=e;let r,c=null,u=0;const d=()=>{let e;return c||(e=c=t().catch((e=>{if(e=e instanceof Error?e:new Error(String(e)),o)return new Promise(((t,n)=>{o(e,(()=>t((u++,c=null,d()))),(()=>n(e)),u+1)}));throw e})).then((t=>e!==c&&c?c:(t&&(t.__esModule||"Module"===t[Symbol.toStringTag])&&(t=t.default),r=t,t))))};return Ga({name:"AsyncComponentWrapper",__asyncLoader:d,get __asyncResolved(){return r},setup(){const e=ei;if(r)return()=>Ja(r,e);const t=t=>{c=null,Mn(t,e,13,!a)};if(i&&e.suspense)return d().then((t=>()=>Ja(t,e))).catch((e=>(t(e),()=>a?Vl(a,{error:e}):null)));const o=pn(!1),u=pn(),p=pn(!!s);return s&&setTimeout((()=>{p.value=!1}),s),null!=l&&setTimeout((()=>{if(!o.value&&!u.value){const e=new Error(`Async component timed out after ${l}ms.`);t(e),u.value=e}}),l),d().then((()=>{o.value=!0,e.parent&&Ya(e.parent.vnode)&&Kn(e.parent.update)})).catch((e=>{t(e),u.value=e})),()=>o.value&&r?Ja(r,e):u.value&&a?Vl(a,{error:u.value}):n&&!p.value?Vl(n):void 0}})}function Ja(e,{vnode:{ref:t,props:n,children:a}}){const s=Vl(e,n,a);return s.ref=t,s}const Ya=e=>e.type.__isKeepAlive,Za={name:"KeepAlive",__isKeepAlive:!0,props:{include:[String,RegExp,Array],exclude:[String,RegExp,Array],max:[String,Number]},setup(e,{slots:t}){const n=ti(),a=n.ctx,s=new Map,l=new Set;let i=null;const o=n.suspense,{renderer:{p:r,m:c,um:u,o:{createElement:d}}}=a,p=d("div");function _(e){as(e),u(e,n,o,!0)}function f(e){s.forEach(((t,n)=>{const a=hi(t.type);!a||e&&e(a)||h(n)}))}function h(e){const t=s.get(e);i&&t.type===i.type?i&&as(i):_(t),s.delete(e),l.delete(e)}a.activate=(e,t,n,a,s)=>{const l=e.component;c(e,t,n,0,o),r(l.vnode,e,t,n,l,o,a,e.slotScopeIds,s),ul((()=>{l.isDeactivated=!1,l.a&&Ie(l.a);const t=e.props&&e.props.onVnodeMounted;t&&Zl(t,l.parent,e)}),o)},a.deactivate=e=>{const t=e.component;c(e,p,null,1,o),ul((()=>{t.da&&Ie(t.da);const n=e.props&&e.props.onVnodeUnmounted;n&&Zl(n,t.parent,e),t.isDeactivated=!0}),o)},Ma((()=>[e.include,e.exclude]),(([e,t])=>{e&&f((t=>Xa(e,t))),t&&f((e=>!Xa(t,e)))}),{flush:"post",deep:!0});let m=null;const g=()=>{null!=m&&s.set(m,ss(n.subTree))};return rs(g),us(g),ds((()=>{s.forEach((e=>{const{subTree:t,suspense:a}=n,s=ss(t);if(e.type!==s.type)_(e);else{as(s);const e=s.component.da;e&&ul(e,a)}}))})),()=>{if(m=null,!t.default)return null;const n=t.default(),a=n[0];if(n.length>1)return i=null,n;if(!Ol(a)||!(4&a.shapeFlag||128&a.shapeFlag))return i=null,a;let o=ss(a);const r=o.type,c=hi(Ka(o)?o.type.__asyncResolved||{}:r),{include:u,exclude:d,max:p}=e;if(u&&(!c||!Xa(u,c))||d&&c&&Xa(d,c))return i=o,a;const _=null==o.key?r:o.key,f=s.get(_);return o.el&&(o=Bl(o),128&a.shapeFlag&&(a.ssContent=o)),m=_,f?(o.el=f.el,o.component=f.component,o.transition&&qa(o,o.transition),o.shapeFlag|=512,l.delete(_),l.add(_)):(l.add(_),p&&l.size>parseInt(p,10)&&h(l.values().next().value)),o.shapeFlag|=256,i=o,ba(a.type)?a:o}}};function Xa(e,t){return ue(e)?e.some((e=>Xa(e,t))):he(e)?e.split(",").includes(t):!!e.test&&e.test(t)}function Qa(e,t){ts(e,"a",t)}function es(e,t){ts(e,"da",t)}function ts(e,t,n=ei){const a=e.__wdc||(e.__wdc=()=>{let t=n;for(;t;){if(t.isDeactivated)return;t=t.parent}return e()});if(ls(t,a,n),n){let e=n.parent;for(;e&&e.parent;)Ya(e.parent.vnode)&&ns(a,t,n,e),e=e.parent}}function ns(e,t,n,a){const s=ls(t,e,a,!0);ps((()=>{oe(a[t],s)}),n)}function as(e){let t=e.shapeFlag;256&t&&(t-=256),512&t&&(t-=512),e.shapeFlag=t}function ss(e){return 128&e.shapeFlag?e.ssContent:e}function ls(e,t,n=ei,a=!1){if(n){const s=n[e]||(n[e]=[]),l=t.__weh||(t.__weh=(...a)=>{if(n.isUnmounted)return;st(),ni(n);const s=Pn(t,n,e,a);return ai(),lt(),s});return a?s.unshift(l):s.push(l),l}}const is=e=>(t,n=ei)=>(!oi||"sp"===e)&&ls(e,t,n),os=is("bm"),rs=is("m"),cs=is("bu"),us=is("u"),ds=is("bum"),ps=is("um"),_s=is("sp"),fs=is("rtg"),hs=is("rtc");function ms(e,t=ei){ls("ec",e,t)}function gs(e,t){const n=oa;if(null===n)return e;const a=_i(n)||n.proxy,s=e.dirs||(e.dirs=[]);for(let e=0;e<t.length;e++){let[n,l,i,o=Q]=t[e];fe(n)&&(n={mounted:n,updated:n}),n.deep&&Fa(l),s.push({dir:n,instance:a,value:l,oldValue:void 0,arg:i,modifiers:o})}return e}function vs(e,t,n,a){const s=e.dirs,l=t&&t.dirs;for(let i=0;i<s.length;i++){const o=s[i];l&&(o.oldValue=l[i].value);let r=o.dir[a];r&&(st(),Pn(r,n,8,[e.el,o,e,t]),lt())}}function bs(e,t){return ks("components",e,!0,t)||e}const ys=Symbol();function ws(e){return he(e)?ks("components",e,!1)||e:e||ys}function xs(e){return ks("directives",e)}function ks(e,t,n=!0,a=!1){const s=oa||ei;if(s){const n=s.type;if("components"===e){const e=hi(n,!1);if(e&&(e===t||e===Ne(t)||e===Ee(Ne(t))))return n}const l=$s(s[e]||n[e],t)||$s(s.appContext[e],t);return!l&&a?n:l}}function $s(e,t){return e&&(e[t]||e[Ne(t)]||e[Ee(Ne(t))])}function Ss(e,t,n,a){let s;const l=n&&n[a];if(ue(e)||he(e)){s=new Array(e.length);for(let n=0,a=e.length;n<a;n++)s[n]=t(e[n],n,void 0,l&&l[n])}else if("number"==typeof e){s=new Array(e);for(let n=0;n<e;n++)s[n]=t(n+1,n,void 0,l&&l[n])}else if(ge(e))if(e[Symbol.iterator])s=Array.from(e,((e,n)=>t(e,n,void 0,l&&l[n])));else{const n=Object.keys(e);s=new Array(n.length);for(let a=0,i=n.length;a<i;a++){const i=n[a];s[a]=t(e[i],i,a,l&&l[a])}}else s=[];return n&&(n[a]=s),s}function Cs(e,t){for(let n=0;n<t.length;n++){const a=t[n];if(ue(a))for(let t=0;t<a.length;t++)e[a[t].name]=a[t].fn;else a&&(e[a.name]=a.fn)}return e}function Ns(e,t,n={},a,s){if(oa.isCE||oa.parent&&Ka(oa.parent)&&oa.parent.isCE)return Vl("slot","default"===t?null:{name:t},a&&a());let l=e[t];l&&l._c&&(l._d=!1),Nl();const i=l&&As(l(n)),o=Il(wl,{key:n.key||`_${t}`},i||(a?a():[]),i&&1===e._?64:-2);return!s&&o.scopeId&&(o.slotScopeIds=[o.scopeId+"-s"]),l&&l._c&&(l._d=!0),o}function As(e){return e.some((e=>!Ol(e)||e.type!==kl&&!(e.type===wl&&!As(e.children))))?e:null}function Ts(e){const t={};for(const n in e)t[Pe(n)]=e[n];return t}const Es=e=>e?si(e)?_i(e)||e.proxy:Es(e.parent):null,Ps=ie(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>e.props,$attrs:e=>e.attrs,$slots:e=>e.slots,$refs:e=>e.refs,$parent:e=>Es(e.parent),$root:e=>Es(e.root),$emit:e=>e.emit,$options:e=>Rs(e),$forceUpdate:e=>e.f||(e.f=()=>Kn(e.update)),$nextTick:e=>e.n||(e.n=Gn.bind(e.proxy)),$watch:e=>Oa.bind(e)}),Ms={get({_:e},t){const{ctx:n,setupState:a,data:s,props:l,accessCache:i,type:o,appContext:r}=e;let c;if("$"!==t[0]){const o=i[t];if(void 0!==o)switch(o){case 1:return a[t];case 2:return s[t];case 4:return n[t];case 3:return l[t]}else{if(a!==Q&&ce(a,t))return i[t]=1,a[t];if(s!==Q&&ce(s,t))return i[t]=2,s[t];if((c=e.propsOptions[0])&&ce(c,t))return i[t]=3,l[t];if(n!==Q&&ce(n,t))return i[t]=4,n[t];Os&&(i[t]=0)}}const u=Ps[t];let d,p;return u?("$attrs"===t&&it(e,0,t),u(e)):(d=o.__cssModules)&&(d=d[t])?d:n!==Q&&ce(n,t)?(i[t]=4,n[t]):(p=r.config.globalProperties,ce(p,t)?p[t]:void 0)},set({_:e},t,n){const{data:a,setupState:s,ctx:l}=e;return s!==Q&&ce(s,t)?(s[t]=n,!0):a!==Q&&ce(a,t)?(a[t]=n,!0):!(ce(e.props,t)||"$"===t[0]&&t.slice(1)in e||(l[t]=n,0))},has({_:{data:e,setupState:t,accessCache:n,ctx:a,appContext:s,propsOptions:l}},i){let o;return!!n[i]||e!==Q&&ce(e,i)||t!==Q&&ce(t,i)||(o=l[0])&&ce(o,i)||ce(a,i)||ce(Ps,i)||ce(s.config.globalProperties,i)},defineProperty(e,t,n){return null!=n.get?e._.accessCache[t]=0:ce(n,"value")&&this.set(e,t,n.value,null),Reflect.defineProperty(e,t,n)}},Is=ie({},Ms,{get(e,t){if(t!==Symbol.unscopables)return Ms.get(e,t,e)},has:(e,t)=>"_"!==t[0]&&!R(t)});let Os=!0;function Us(e,t,n){Pn(ue(e)?e.map((e=>e.bind(t.proxy))):e.bind(t.proxy),t,n)}function Fs(e,t,n,a){const s=a.includes(".")?Ua(n,a):()=>n[a];if(he(e)){const n=t[e];fe(n)&&Ma(s,n)}else if(fe(e))Ma(s,e.bind(n));else if(ge(e))if(ue(e))e.forEach((e=>Fs(e,t,n,a)));else{const a=fe(e.handler)?e.handler.bind(n):t[e.handler];fe(a)&&Ma(s,a,e)}}function Rs(e){const t=e.type,{mixins:n,extends:a}=t,{mixins:s,optionsCache:l,config:{optionMergeStrategies:i}}=e.appContext,o=l.get(t);let r;return o?r=o:s.length||n||a?(r={},s.length&&s.forEach((e=>Ds(r,e,i,!0))),Ds(r,t,i)):r=t,l.set(t,r),r}function Ds(e,t,n,a=!1){const{mixins:s,extends:l}=t;l&&Ds(e,l,n,!0),s&&s.forEach((t=>Ds(e,t,n,!0)));for(const s in t)if(a&&"expose"===s);else{const a=js[s]||n&&n[s];e[s]=a?a(e[s],t[s]):t[s]}return e}const js={data:Ls,props:Bs,emits:Bs,methods:Bs,computed:Bs,beforeCreate:zs,created:zs,beforeMount:zs,mounted:zs,beforeUpdate:zs,updated:zs,beforeDestroy:zs,beforeUnmount:zs,destroyed:zs,unmounted:zs,activated:zs,deactivated:zs,errorCaptured:zs,serverPrefetch:zs,components:Bs,directives:Bs,watch:function(e,t){if(!e)return t;if(!t)return e;const n=ie(Object.create(null),e);for(const a in t)n[a]=zs(e[a],t[a]);return n},provide:Ls,inject:function(e,t){return Bs(Vs(e),Vs(t))}};function Ls(e,t){return t?e?function(){return ie(fe(e)?e.call(this,this):e,fe(t)?t.call(this,this):t)}:t:e}function Vs(e){if(ue(e)){const t={};for(let n=0;n<e.length;n++)t[e[n]]=e[n];return t}return e}function zs(e,t){return e?[...new Set([].concat(e,t))]:t}function Bs(e,t){return e?ie(ie(Object.create(null),e),t):t}function qs(e,t,n,a){const[s,l]=e.propsOptions;let i,o=!1;if(t)for(let r in t){if(ke(r))continue;const c=t[r];let u;s&&ce(s,u=Ne(r))?l&&l.includes(u)?(i||(i={}))[u]=c:n[u]=c:ia(e.emitsOptions,r)||r in a&&c===a[r]||(a[r]=c,o=!0)}if(l){const t=sn(n),a=i||Q;for(let i=0;i<l.length;i++){const o=l[i];n[o]=Hs(s,t,o,a[o],e,!ce(a,o))}}return o}function Hs(e,t,n,a,s,l){const i=e[n];if(null!=i){const e=ce(i,"default");if(e&&void 0===a){const e=i.default;if(i.type!==Function&&fe(e)){const{propsDefaults:l}=s;n in l?a=l[n]:(ni(s),a=l[n]=e.call(null,t),ai())}else a=e}i[0]&&(l&&!e?a=!1:!i[1]||""!==a&&a!==Te(n)||(a=!0))}return a}function Gs(e,t,n=!1){const a=t.propsCache,s=a.get(e);if(s)return s;const l=e.props,i={},o=[];let r=!1;if(!fe(e)){const a=e=>{r=!0;const[n,a]=Gs(e,t,!0);ie(i,n),a&&o.push(...a)};!n&&t.mixins.length&&t.mixins.forEach(a),e.extends&&a(e.extends),e.mixins&&e.mixins.forEach(a)}if(!l&&!r)return a.set(e,ee),ee;if(ue(l))for(let e=0;e<l.length;e++){const t=Ne(l[e]);Ks(t)&&(i[t]=Q)}else if(l)for(const e in l){const t=Ne(e);if(Ks(t)){const n=l[e],a=i[t]=ue(n)||fe(n)?{type:n}:n;if(a){const e=Ys(Boolean,a.type),n=Ys(String,a.type);a[0]=e>-1,a[1]=n<0||e<n,(e>-1||ce(a,"default"))&&o.push(t)}}}const c=[i,o];return a.set(e,c),c}function Ks(e){return"$"!==e[0]}function Ws(e){const t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:null===e?"null":""}function Js(e,t){return Ws(e)===Ws(t)}function Ys(e,t){return ue(t)?t.findIndex((t=>Js(t,e))):fe(t)&&Js(t,e)?0:-1}const Zs=e=>"_"===e[0]||"$stable"===e,Xs=e=>ue(e)?e.map(Kl):[Kl(e)],Qs=(e,t,n)=>{if(t._n)return t;const a=_a(((...e)=>Xs(t(...e))),n);return a._c=!1,a},el=(e,t,n)=>{const a=e._ctx;for(const n in e){if(Zs(n))continue;const s=e[n];if(fe(s))t[n]=Qs(0,s,a);else if(null!=s){const e=Xs(s);t[n]=()=>e}}},tl=(e,t)=>{const n=Xs(t);e.slots.default=()=>n};function nl(){return{app:null,config:{isNativeTag:ne,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let al=0;function sl(e,t){return function(n,a=null){fe(n)||(n=Object.assign({},n)),null==a||ge(a)||(a=null);const s=nl(),l=new Set;let i=!1;const o=s.app={_uid:al++,_component:n,_props:a,_container:null,_context:s,_instance:null,version:Oi,get config(){return s.config},set config(e){},use:(e,...t)=>(l.has(e)||(e&&fe(e.install)?(l.add(e),e.install(o,...t)):fe(e)&&(l.add(e),e(o,...t))),o),mixin:e=>(s.mixins.includes(e)||s.mixins.push(e),o),component:(e,t)=>t?(s.components[e]=t,o):s.components[e],directive:(e,t)=>t?(s.directives[e]=t,o):s.directives[e],mount(l,r,c){if(!i){const u=Vl(n,a);return u.appContext=s,r&&t?t(u,l):e(u,l,c),i=!0,o._container=l,l.__vue_app__=o,_i(u.component)||u.component.proxy}},unmount(){i&&(e(null,o._container),delete o._container.__vue_app__)},provide:(e,t)=>(s.provides[e]=t,o)};return o}}function ll(e,t,n,a,s=!1){if(ue(e))return void e.forEach(((e,l)=>ll(e,t&&(ue(t)?t[l]:t),n,a,s)));if(Ka(a)&&!s)return;const l=4&a.shapeFlag?_i(a.component)||a.component.proxy:a.el,i=s?null:l,{i:o,r:r}=e,c=t&&t.r,u=o.refs===Q?o.refs={}:o.refs,d=o.setupState;if(null!=c&&c!==r&&(he(c)?(u[c]=null,ce(d,c)&&(d[c]=null)):dn(c)&&(c.value=null)),fe(r))En(r,o,12,[i,u]);else{const t=he(r),a=dn(r);if(t||a){const o=()=>{if(e.f){const n=t?u[r]:r.value;s?ue(n)&&oe(n,l):ue(n)?n.includes(l)||n.push(l):t?(u[r]=[l],ce(d,r)&&(d[r]=u[r])):(r.value=[l],e.k&&(u[e.k]=r.value))}else t?(u[r]=i,ce(d,r)&&(d[r]=i)):a&&(r.value=i,e.k&&(u[e.k]=i))};i?(o.id=-1,ul(o,n)):o()}}}let il=!1;const ol=e=>/svg/.test(e.namespaceURI)&&"foreignObject"!==e.tagName,rl=e=>8===e.nodeType;function cl(e){const{mt:t,p:n,o:{patchProp:a,createText:s,nextSibling:l,parentNode:i,remove:o,insert:r,createComment:c}}=e,u=(n,a,o,c,m,g=!1)=>{const v=rl(n)&&"["===n.data,b=()=>f(n,a,o,c,m,v),{type:y,ref:w,shapeFlag:x,patchFlag:k}=a,$=n.nodeType;a.el=n,-2===k&&(g=!1,a.dynamicChildren=null);let S=null;switch(y){case xl:3!==$?""===a.children?(r(a.el=s(""),i(n),n),S=n):S=b():(n.data!==a.children&&(il=!0,n.data=a.children),S=l(n));break;case kl:S=8!==$||v?b():l(n);break;case $l:if(1===$||3===$){S=n;const e=!a.children.length;for(let t=0;t<a.staticCount;t++)e&&(a.children+=1===S.nodeType?S.outerHTML:S.data),t===a.staticCount-1&&(a.anchor=S),S=l(S);return S}S=b();break;case wl:S=v?_(n,a,o,c,m,g):b();break;default:if(1&x)S=1!==$||a.type.toLowerCase()!==n.tagName.toLowerCase()?b():d(n,a,o,c,m,g);else if(6&x){a.slotScopeIds=m;const e=i(n);if(t(a,e,null,o,c,ol(e),g),S=v?h(n):l(n),S&&rl(S)&&"teleport end"===S.data&&(S=l(S)),Ka(a)){let t;v?(t=Vl(wl),t.anchor=S?S.previousSibling:e.lastChild):t=3===n.nodeType?ql(""):Vl("div"),t.el=n,a.component.subTree=t}}else 64&x?S=8!==$?b():a.type.hydrate(n,a,o,c,m,g,e,p):128&x&&(S=a.type.hydrate(n,a,o,c,ol(i(n)),m,g,e,u))}return null!=w&&ll(w,null,c,a),S},d=(e,t,n,s,l,i)=>{i=i||!!t.dynamicChildren;const{type:r,props:c,patchFlag:u,shapeFlag:d,dirs:_}=t,f="input"===r&&_||"option"===r;if(f||-1!==u){if(_&&vs(t,null,n,"created"),c)if(f||!i||48&u)for(const t in c)(f&&t.endsWith("value")||se(t)&&!ke(t))&&a(e,t,null,c[t],!1,void 0,n);else c.onClick&&a(e,"onClick",null,c.onClick,!1,void 0,n);let r;if((r=c&&c.onVnodeBeforeMount)&&Zl(r,n,t),_&&vs(t,null,n,"beforeMount"),((r=c&&c.onVnodeMounted)||_)&&$a((()=>{r&&Zl(r,n,t),_&&vs(t,null,n,"mounted")}),s),16&d&&(!c||!c.innerHTML&&!c.textContent)){let a=p(e.firstChild,t,e,n,s,l,i);for(;a;){il=!0;const e=a;a=a.nextSibling,o(e)}}else 8&d&&e.textContent!==t.children&&(il=!0,e.textContent=t.children)}return e.nextSibling},p=(e,t,a,s,l,i,o)=>{o=o||!!t.dynamicChildren;const r=t.children,c=r.length;for(let t=0;t<c;t++){const c=o?r[t]:r[t]=Kl(r[t]);if(e)e=u(e,c,s,l,i,o);else{if(c.type===xl&&!c.children)continue;il=!0,n(null,c,a,null,s,l,ol(a),i)}}return e},_=(e,t,n,a,s,o)=>{const{slotScopeIds:u}=t;u&&(s=s?s.concat(u):u);const d=i(e),_=p(l(e),t,d,n,a,s,o);return _&&rl(_)&&"]"===_.data?l(t.anchor=_):(il=!0,r(t.anchor=c("]"),d,_),_)},f=(e,t,a,s,r,c)=>{if(il=!0,t.el=null,c){const t=h(e);for(;;){const n=l(e);if(!n||n===t)break;o(n)}}const u=l(e),d=i(e);return o(e),n(null,t,d,u,a,s,ol(d),r),u},h=e=>{let t=0;for(;e;)if((e=l(e))&&rl(e)&&("["===e.data&&t++,"]"===e.data)){if(0===t)return l(e);t--}return e};return[(e,t)=>{if(!t.hasChildNodes())return n(null,e,t),Xn(),void(t._vnode=e);il=!1,u(t.firstChild,e,null,null,null),Xn(),t._vnode=e,il&&console.error("Hydration completed but contains mismatches.")},u]}const ul=$a;function dl(e){return _l(e)}function pl(e){return _l(e,cl)}function _l(e,t){(Fe||(Fe="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{})).__VUE__=!0;const{insert:n,remove:a,patchProp:s,createElement:l,createText:i,createComment:o,setText:r,setElementText:c,parentNode:u,nextSibling:d,setScopeId:p=te,cloneNode:_,insertStaticContent:f}=e,h=(e,t,n,a=null,s=null,l=null,i=!1,o=null,r=!!t.dynamicChildren)=>{if(e===t)return;e&&!Ul(e,t)&&(a=V(e),F(e,s,l,!0),e=null),-2===t.patchFlag&&(r=!1,t.dynamicChildren=null);const{type:c,ref:u,shapeFlag:d}=t;switch(c){case xl:m(e,t,n,a);break;case kl:g(e,t,n,a);break;case $l:null==e&&v(t,n,a,i);break;case wl:C(e,t,n,a,s,l,i,o,r);break;default:1&d?b(e,t,n,a,s,l,i,o,r):6&d?N(e,t,n,a,s,l,i,o,r):(64&d||128&d)&&c.process(e,t,n,a,s,l,i,o,r,B)}null!=u&&s&&ll(u,e&&e.ref,l,t||e,!t)},m=(e,t,a,s)=>{if(null==e)n(t.el=i(t.children),a,s);else{const n=t.el=e.el;t.children!==e.children&&r(n,t.children)}},g=(e,t,a,s)=>{null==e?n(t.el=o(t.children||""),a,s):t.el=e.el},v=(e,t,n,a)=>{[e.el,e.anchor]=f(e.children,t,n,a,e.el,e.anchor)},b=(e,t,n,a,s,l,i,o,r)=>{i=i||"svg"===t.type,null==e?y(t,n,a,s,l,i,o,r):k(e,t,s,l,i,o,r)},y=(e,t,a,i,o,r,u,d)=>{let p,f;const{type:h,props:m,shapeFlag:g,transition:v,patchFlag:b,dirs:y}=e;if(e.el&&void 0!==_&&-1===b)p=e.el=_(e.el);else{if(p=e.el=l(e.type,r,m&&m.is,m),8&g?c(p,e.children):16&g&&x(e.children,p,null,i,o,r&&"foreignObject"!==h,u,d),y&&vs(e,null,i,"created"),m){for(const t in m)"value"===t||ke(t)||s(p,t,null,m[t],r,e.children,i,o,L);"value"in m&&s(p,"value",null,m.value),(f=m.onVnodeBeforeMount)&&Zl(f,i,e)}w(p,e,e.scopeId,u,i)}y&&vs(e,null,i,"beforeMount");const k=(!o||o&&!o.pendingBranch)&&v&&!v.persisted;k&&v.beforeEnter(p),n(p,t,a),((f=m&&m.onVnodeMounted)||k||y)&&ul((()=>{f&&Zl(f,i,e),k&&v.enter(p),y&&vs(e,null,i,"mounted")}),o)},w=(e,t,n,a,s)=>{if(n&&p(e,n),a)for(let t=0;t<a.length;t++)p(e,a[t]);if(s&&t===s.subTree){const t=s.vnode;w(e,t,t.scopeId,t.slotScopeIds,s.parent)}},x=(e,t,n,a,s,l,i,o,r=0)=>{for(let c=r;c<e.length;c++){const r=e[c]=o?Wl(e[c]):Kl(e[c]);h(null,r,t,n,a,s,l,i,o)}},k=(e,t,n,a,l,i,o)=>{const r=t.el=e.el;let{patchFlag:u,dynamicChildren:d,dirs:p}=t;u|=16&e.patchFlag;const _=e.props||Q,f=t.props||Q;let h;n&&fl(n,!1),(h=f.onVnodeBeforeUpdate)&&Zl(h,n,t,e),p&&vs(t,e,n,"beforeUpdate"),n&&fl(n,!0);const m=l&&"foreignObject"!==t.type;if(d?$(e.dynamicChildren,d,r,n,a,m,i):o||M(e,t,r,null,n,a,m,i,!1),u>0){if(16&u)S(r,t,_,f,n,a,l);else if(2&u&&_.class!==f.class&&s(r,"class",null,f.class,l),4&u&&s(r,"style",_.style,f.style,l),8&u){const i=t.dynamicProps;for(let t=0;t<i.length;t++){const o=i[t],c=_[o],u=f[o];u===c&&"value"!==o||s(r,o,c,u,l,e.children,n,a,L)}}1&u&&e.children!==t.children&&c(r,t.children)}else o||null!=d||S(r,t,_,f,n,a,l);((h=f.onVnodeUpdated)||p)&&ul((()=>{h&&Zl(h,n,t,e),p&&vs(t,e,n,"updated")}),a)},$=(e,t,n,a,s,l,i)=>{for(let o=0;o<t.length;o++){const r=e[o],c=t[o],d=r.el&&(r.type===wl||!Ul(r,c)||70&r.shapeFlag)?u(r.el):n;h(r,c,d,null,a,s,l,i,!0)}},S=(e,t,n,a,l,i,o)=>{if(n!==a){for(const r in a){if(ke(r))continue;const c=a[r],u=n[r];c!==u&&"value"!==r&&s(e,r,u,c,o,t.children,l,i,L)}if(n!==Q)for(const r in n)ke(r)||r in a||s(e,r,n[r],null,o,t.children,l,i,L);"value"in a&&s(e,"value",n.value,a.value)}},C=(e,t,a,s,l,o,r,c,u)=>{const d=t.el=e?e.el:i(""),p=t.anchor=e?e.anchor:i("");let{patchFlag:_,dynamicChildren:f,slotScopeIds:h}=t;h&&(c=c?c.concat(h):h),null==e?(n(d,a,s),n(p,a,s),x(t.children,a,p,l,o,r,c,u)):_>0&&64&_&&f&&e.dynamicChildren?($(e.dynamicChildren,f,a,l,o,r,c),(null!=t.key||l&&t===l.subTree)&&hl(e,t,!0)):M(e,t,a,p,l,o,r,c,u)},N=(e,t,n,a,s,l,i,o,r)=>{t.slotScopeIds=o,null==e?512&t.shapeFlag?s.ctx.activate(t,n,a,i,r):A(t,n,a,s,l,i,r):T(e,t,r)},A=(e,t,n,a,s,l,i)=>{const o=e.component=function(e,t,n){const a=e.type,s=(t?t.appContext:e.appContext)||Xl,l={uid:Ql++,vnode:e,type:a,parent:t,appContext:s,root:null,next:null,subTree:null,effect:null,update:null,scope:new De(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:t?t.provides:Object.create(s.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:Gs(a,s),emitsOptions:la(a,s),emit:null,emitted:null,propsDefaults:Q,inheritAttrs:a.inheritAttrs,ctx:Q,data:Q,props:Q,attrs:Q,slots:Q,refs:Q,setupState:Q,setupContext:null,suspense:n,suspenseId:n?n.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return l.ctx={_:l},l.root=t?t.root:l,l.emit=sa.bind(null,l),e.ce&&e.ce(l),l}(e,a,s);if(Ya(e)&&(o.ctx.renderer=B),function(e,t=!1){oi=t;const{props:n,children:a}=e.vnode,s=si(e);(function(e,t,n,a=!1){const s={},l={};Oe(l,Rl,1),e.propsDefaults=Object.create(null),qs(e,t,s,l);for(const t in e.propsOptions[0])t in s||(s[t]=void 0);e.props=n?a?s:Yt(s):e.type.props?s:l,e.attrs=l})(e,n,s,t),((e,t)=>{if(32&e.vnode.shapeFlag){const n=t._;n?(e.slots=sn(t),Oe(t,"_",n)):el(t,e.slots={})}else e.slots={},t&&tl(e,t);Oe(e.slots,Rl,1)})(e,a),s&&function(e,t){const n=e.type;e.accessCache=Object.create(null),e.proxy=ln(new Proxy(e.ctx,Ms));const{setup:a}=n;if(a){const n=e.setupContext=a.length>1?pi(e):null;ni(e),st();const s=En(a,e,0,[e.props,n]);if(lt(),ai(),ve(s)){if(s.then(ai,ai),t)return s.then((n=>{ri(e,n,t)})).catch((t=>{Mn(t,e,0)}));e.asyncDep=s}else ri(e,s,t)}else di(e,t)}(e,t),oi=!1}(o),o.asyncDep){if(s&&s.registerDep(o,E),!e.el){const e=o.subTree=Vl(kl);g(null,e,t,n)}}else E(o,e,t,n,s,l,i)},T=(e,t,n)=>{const a=t.component=e.component;if(function(e,t,n){const{props:a,children:s,component:l}=e,{props:i,children:o,patchFlag:r}=t,c=l.emitsOptions;if(t.dirs||t.transition)return!0;if(!(n&&r>=0))return!(!s&&!o||o&&o.$stable)||a!==i&&(a?!i||ga(a,i,c):!!i);if(1024&r)return!0;if(16&r)return a?ga(a,i,c):!!i;if(8&r){const e=t.dynamicProps;for(let t=0;t<e.length;t++){const n=e[t];if(i[n]!==a[n]&&!ia(c,n))return!0}}return!1}(e,t,n)){if(a.asyncDep&&!a.asyncResolved)return void P(a,t,n);a.next=t,function(e){const t=Un.indexOf(e);t>Fn&&Un.splice(t,1)}(a.update),a.update()}else t.el=e.el,a.vnode=t},E=(e,t,n,a,s,l,i)=>{const o=e.effect=new Xe((()=>{if(e.isMounted){let t,{next:n,bu:a,u:o,parent:r,vnode:c}=e,d=n;fl(e,!1),n?(n.el=c.el,P(e,n,i)):n=c,a&&Ie(a),(t=n.props&&n.props.onVnodeBeforeUpdate)&&Zl(t,r,n,c),fl(e,!0);const p=fa(e),_=e.subTree;e.subTree=p,h(_,p,u(_.el),V(_),e,s,l),n.el=p.el,null===d&&va(e,p.el),o&&ul(o,s),(t=n.props&&n.props.onVnodeUpdated)&&ul((()=>Zl(t,r,n,c)),s)}else{let i;const{el:o,props:r}=t,{bm:c,m:u,parent:d}=e,p=Ka(t);if(fl(e,!1),c&&Ie(c),!p&&(i=r&&r.onVnodeBeforeMount)&&Zl(i,d,t),fl(e,!0),o&&H){const n=()=>{e.subTree=fa(e),H(o,e.subTree,e,s,null)};p?t.type.__asyncLoader().then((()=>!e.isUnmounted&&n())):n()}else{const i=e.subTree=fa(e);h(null,i,n,a,e,s,l),t.el=i.el}if(u&&ul(u,s),!p&&(i=r&&r.onVnodeMounted)){const e=t;ul((()=>Zl(i,d,e)),s)}(256&t.shapeFlag||d&&Ka(d.vnode)&&256&d.vnode.shapeFlag)&&e.a&&ul(e.a,s),e.isMounted=!0,t=n=a=null}}),(()=>Kn(r)),e.scope),r=e.update=()=>o.run();r.id=e.uid,fl(e,!0),r()},P=(e,t,n)=>{t.component=e;const a=e.vnode.props;e.vnode=t,e.next=null,function(e,t,n,a){const{props:s,attrs:l,vnode:{patchFlag:i}}=e,o=sn(s),[r]=e.propsOptions;let c=!1;if(!(a||i>0)||16&i){let a;qs(e,t,s,l)&&(c=!0);for(const l in o)t&&(ce(t,l)||(a=Te(l))!==l&&ce(t,a))||(r?!n||void 0===n[l]&&void 0===n[a]||(s[l]=Hs(r,o,l,void 0,e,!0)):delete s[l]);if(l!==o)for(const e in l)t&&ce(t,e)||(delete l[e],c=!0)}else if(8&i){const n=e.vnode.dynamicProps;for(let a=0;a<n.length;a++){let i=n[a];if(ia(e.emitsOptions,i))continue;const u=t[i];if(r)if(ce(l,i))u!==l[i]&&(l[i]=u,c=!0);else{const t=Ne(i);s[t]=Hs(r,o,t,u,e,!1)}else u!==l[i]&&(l[i]=u,c=!0)}}c&&rt(e,"set","$attrs")}(e,t.props,a,n),((e,t,n)=>{const{vnode:a,slots:s}=e;let l=!0,i=Q;if(32&a.shapeFlag){const e=t._;e?n&&1===e?l=!1:(ie(s,t),n||1!==e||delete s._):(l=!t.$stable,el(t,s)),i=t}else t&&(tl(e,t),i={default:1});if(l)for(const e in s)Zs(e)||e in i||delete s[e]})(e,t.children,n),st(),Zn(void 0,e.update),lt()},M=(e,t,n,a,s,l,i,o,r=!1)=>{const u=e&&e.children,d=e?e.shapeFlag:0,p=t.children,{patchFlag:_,shapeFlag:f}=t;if(_>0){if(128&_)return void O(u,p,n,a,s,l,i,o,r);if(256&_)return void I(u,p,n,a,s,l,i,o,r)}8&f?(16&d&&L(u,s,l),p!==u&&c(n,p)):16&d?16&f?O(u,p,n,a,s,l,i,o,r):L(u,s,l,!0):(8&d&&c(n,""),16&f&&x(p,n,a,s,l,i,o,r))},I=(e,t,n,a,s,l,i,o,r)=>{const c=(e=e||ee).length,u=(t=t||ee).length,d=Math.min(c,u);let p;for(p=0;p<d;p++){const a=t[p]=r?Wl(t[p]):Kl(t[p]);h(e[p],a,n,null,s,l,i,o,r)}c>u?L(e,s,l,!0,!1,d):x(t,n,a,s,l,i,o,r,d)},O=(e,t,n,a,s,l,i,o,r)=>{let c=0;const u=t.length;let d=e.length-1,p=u-1;for(;c<=d&&c<=p;){const a=e[c],u=t[c]=r?Wl(t[c]):Kl(t[c]);if(!Ul(a,u))break;h(a,u,n,null,s,l,i,o,r),c++}for(;c<=d&&c<=p;){const a=e[d],c=t[p]=r?Wl(t[p]):Kl(t[p]);if(!Ul(a,c))break;h(a,c,n,null,s,l,i,o,r),d--,p--}if(c>d){if(c<=p){const e=p+1,d=e<u?t[e].el:a;for(;c<=p;)h(null,t[c]=r?Wl(t[c]):Kl(t[c]),n,d,s,l,i,o,r),c++}}else if(c>p)for(;c<=d;)F(e[c],s,l,!0),c++;else{const _=c,f=c,m=new Map;for(c=f;c<=p;c++){const e=t[c]=r?Wl(t[c]):Kl(t[c]);null!=e.key&&m.set(e.key,c)}let g,v=0;const b=p-f+1;let y=!1,w=0;const x=new Array(b);for(c=0;c<b;c++)x[c]=0;for(c=_;c<=d;c++){const a=e[c];if(v>=b){F(a,s,l,!0);continue}let u;if(null!=a.key)u=m.get(a.key);else for(g=f;g<=p;g++)if(0===x[g-f]&&Ul(a,t[g])){u=g;break}void 0===u?F(a,s,l,!0):(x[u-f]=c+1,u>=w?w=u:y=!0,h(a,t[u],n,null,s,l,i,o,r),v++)}const k=y?function(e){const t=e.slice(),n=[0];let a,s,l,i,o;const r=e.length;for(a=0;a<r;a++){const r=e[a];if(0!==r){if(s=n[n.length-1],e[s]<r){t[a]=s,n.push(a);continue}for(l=0,i=n.length-1;l<i;)o=l+i>>1,e[n[o]]<r?l=o+1:i=o;r<e[n[l]]&&(l>0&&(t[a]=n[l-1]),n[l]=a)}}for(l=n.length,i=n[l-1];l-- >0;)n[l]=i,i=t[i];return n}(x):ee;for(g=k.length-1,c=b-1;c>=0;c--){const e=f+c,d=t[e],p=e+1<u?t[e+1].el:a;0===x[c]?h(null,d,n,p,s,l,i,o,r):y&&(g<0||c!==k[g]?U(d,n,p,2):g--)}}},U=(e,t,a,s,l=null)=>{const{el:i,type:o,transition:r,children:c,shapeFlag:u}=e;if(6&u)U(e.component.subTree,t,a,s);else if(128&u)e.suspense.move(t,a,s);else if(64&u)o.move(e,t,a,B);else if(o!==wl)if(o!==$l)if(2!==s&&1&u&&r)if(0===s)r.beforeEnter(i),n(i,t,a),ul((()=>r.enter(i)),l);else{const{leave:e,delayLeave:s,afterLeave:l}=r,o=()=>n(i,t,a),c=()=>{e(i,(()=>{o(),l&&l()}))};s?s(i,o,c):c()}else n(i,t,a);else(({el:e,anchor:t},a,s)=>{let l;for(;e&&e!==t;)l=d(e),n(e,a,s),e=l;n(t,a,s)})(e,t,a);else{n(i,t,a);for(let e=0;e<c.length;e++)U(c[e],t,a,s);n(e.anchor,t,a)}},F=(e,t,n,a=!1,s=!1)=>{const{type:l,props:i,ref:o,children:r,dynamicChildren:c,shapeFlag:u,patchFlag:d,dirs:p}=e;if(null!=o&&ll(o,null,n,e,!0),256&u)return void t.ctx.deactivate(e);const _=1&u&&p,f=!Ka(e);let h;if(f&&(h=i&&i.onVnodeBeforeUnmount)&&Zl(h,t,e),6&u)j(e.component,n,a);else{if(128&u)return void e.suspense.unmount(n,a);_&&vs(e,null,t,"beforeUnmount"),64&u?e.type.remove(e,t,n,s,B,a):c&&(l!==wl||d>0&&64&d)?L(c,t,n,!1,!0):(l===wl&&384&d||!s&&16&u)&&L(r,t,n),a&&R(e)}(f&&(h=i&&i.onVnodeUnmounted)||_)&&ul((()=>{h&&Zl(h,t,e),_&&vs(e,null,t,"unmounted")}),n)},R=e=>{const{type:t,el:n,anchor:s,transition:l}=e;if(t===wl)return void D(n,s);if(t===$l)return void(({el:e,anchor:t})=>{let n;for(;e&&e!==t;)n=d(e),a(e),e=n;a(t)})(e);const i=()=>{a(n),l&&!l.persisted&&l.afterLeave&&l.afterLeave()};if(1&e.shapeFlag&&l&&!l.persisted){const{leave:t,delayLeave:a}=l,s=()=>t(n,i);a?a(e.el,i,s):s()}else i()},D=(e,t)=>{let n;for(;e!==t;)n=d(e),a(e),e=n;a(t)},j=(e,t,n)=>{const{bum:a,scope:s,update:l,subTree:i,um:o}=e;a&&Ie(a),s.stop(),l&&(l.active=!1,F(i,e,t,n)),o&&ul(o,t),ul((()=>{e.isUnmounted=!0}),t),t&&t.pendingBranch&&!t.isUnmounted&&e.asyncDep&&!e.asyncResolved&&e.suspenseId===t.pendingId&&(t.deps--,0===t.deps&&t.resolve())},L=(e,t,n,a=!1,s=!1,l=0)=>{for(let i=l;i<e.length;i++)F(e[i],t,n,a,s)},V=e=>6&e.shapeFlag?V(e.component.subTree):128&e.shapeFlag?e.suspense.next():d(e.anchor||e.el),z=(e,t,n)=>{null==e?t._vnode&&F(t._vnode,null,null,!0):h(t._vnode||null,e,t,null,null,null,n),Xn(),t._vnode=e},B={p:h,um:F,m:U,r:R,mt:A,mc:x,pc:M,pbc:$,n:V,o:e};let q,H;return t&&([q,H]=t(B)),{render:z,hydrate:q,createApp:sl(z,q)}}function fl({effect:e,update:t},n){e.allowRecurse=t.allowRecurse=n}function hl(e,t,n=!1){const a=e.children,s=t.children;if(ue(a)&&ue(s))for(let e=0;e<a.length;e++){const t=a[e];let l=s[e];1&l.shapeFlag&&!l.dynamicChildren&&((l.patchFlag<=0||32===l.patchFlag)&&(l=s[e]=Wl(s[e]),l.el=t.el),n||hl(t,l))}}const ml=e=>e&&(e.disabled||""===e.disabled),gl=e=>"undefined"!=typeof SVGElement&&e instanceof SVGElement,vl=(e,t)=>{const n=e&&e.to;return he(n)?t?t(n):null:n};function bl(e,t,n,{o:{insert:a},m:s},l=2){0===l&&a(e.targetAnchor,t,n);const{el:i,anchor:o,shapeFlag:r,children:c,props:u}=e,d=2===l;if(d&&a(i,t,n),(!d||ml(u))&&16&r)for(let e=0;e<c.length;e++)s(c[e],t,n,2);d&&a(o,t,n)}const yl={__isTeleport:!0,process(e,t,n,a,s,l,i,o,r,c){const{mc:u,pc:d,pbc:p,o:{insert:_,querySelector:f,createText:h}}=c,m=ml(t.props);let{shapeFlag:g,children:v,dynamicChildren:b}=t;if(null==e){const e=t.el=h(""),c=t.anchor=h("");_(e,n,a),_(c,n,a);const d=t.target=vl(t.props,f),p=t.targetAnchor=h("");d&&(_(p,d),i=i||gl(d));const b=(e,t)=>{16&g&&u(v,e,t,s,l,i,o,r)};m?b(n,c):d&&b(d,p)}else{t.el=e.el;const a=t.anchor=e.anchor,u=t.target=e.target,_=t.targetAnchor=e.targetAnchor,h=ml(e.props),g=h?n:u,v=h?a:_;if(i=i||gl(u),b?(p(e.dynamicChildren,b,g,s,l,i,o),hl(e,t,!0)):r||d(e,t,g,v,s,l,i,o,!1),m)h||bl(t,n,a,c,1);else if((t.props&&t.props.to)!==(e.props&&e.props.to)){const e=t.target=vl(t.props,f);e&&bl(t,e,null,c,0)}else h&&bl(t,u,_,c,1)}},remove(e,t,n,a,{um:s,o:{remove:l}},i){const{shapeFlag:o,children:r,anchor:c,targetAnchor:u,target:d,props:p}=e;if(d&&l(u),(i||!ml(p))&&(l(c),16&o))for(let e=0;e<r.length;e++){const a=r[e];s(a,t,n,!0,!!a.dynamicChildren)}},move:bl,hydrate:function(e,t,n,a,s,l,{o:{nextSibling:i,parentNode:o,querySelector:r}},c){const u=t.target=vl(t.props,r);if(u){const r=u._lpa||u.firstChild;if(16&t.shapeFlag)if(ml(t.props))t.anchor=c(i(e),t,o(e),n,a,s,l),t.targetAnchor=r;else{t.anchor=i(e);let o=r;for(;o;)if(o=i(o),o&&8===o.nodeType&&"teleport anchor"===o.data){t.targetAnchor=o,u._lpa=t.targetAnchor&&i(t.targetAnchor);break}c(r,t,u,n,a,s,l)}}return t.anchor&&i(t.anchor)}},wl=Symbol(void 0),xl=Symbol(void 0),kl=Symbol(void 0),$l=Symbol(void 0),Sl=[];let Cl=null;function Nl(e=!1){Sl.push(Cl=e?null:[])}function Al(){Sl.pop(),Cl=Sl[Sl.length-1]||null}let Tl=1;function El(e){Tl+=e}function Pl(e){return e.dynamicChildren=Tl>0?Cl||ee:null,Al(),Tl>0&&Cl&&Cl.push(e),e}function Ml(e,t,n,a,s,l){return Pl(Ll(e,t,n,a,s,l,!0))}function Il(e,t,n,a,s){return Pl(Vl(e,t,n,a,s,!0))}function Ol(e){return!!e&&!0===e.__v_isVNode}function Ul(e,t){return e.type===t.type&&e.key===t.key}function Fl(e){}const Rl="__vInternal",Dl=({key:e})=>null!=e?e:null,jl=({ref:e,ref_key:t,ref_for:n})=>null!=e?he(e)||dn(e)||fe(e)?{i:oa,r:e,k:t,f:!!n}:e:null;function Ll(e,t=null,n=null,a=0,s=null,l=(e===wl?0:1),i=!1,o=!1){const r={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&Dl(t),ref:t&&jl(t),scopeId:ra,slotScopeIds:null,children:n,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:l,patchFlag:a,dynamicProps:s,dynamicChildren:null,appContext:null};return o?(Jl(r,n),128&l&&e.normalize(r)):n&&(r.shapeFlag|=he(n)?8:16),Tl>0&&!i&&Cl&&(r.patchFlag>0||6&l)&&32!==r.patchFlag&&Cl.push(r),r}const Vl=function(e,t=null,n=null,a=0,s=null,l=!1){if(e&&e!==ys||(e=kl),Ol(e)){const a=Bl(e,t,!0);return n&&Jl(a,n),Tl>0&&!l&&Cl&&(6&a.shapeFlag?Cl[Cl.indexOf(e)]=a:Cl.push(a)),a.patchFlag|=-2,a}var i;if(fe(i=e)&&"__vccOpts"in i&&(e=e.__vccOpts),t){t=zl(t);let{class:e,style:n}=t;e&&!he(e)&&(t.class=q(e)),ge(n)&&(an(n)&&!ue(n)&&(n=ie({},n)),t.style=L(n))}return Ll(e,t,n,a,s,he(e)?1:ba(e)?128:(e=>e.__isTeleport)(e)?64:ge(e)?4:fe(e)?2:0,l,!0)};function zl(e){return e?an(e)||Rl in e?ie({},e):e:null}function Bl(e,t,n=!1){const{props:a,ref:s,patchFlag:l,children:i}=e,o=t?Yl(a||{},t):a;return{__v_isVNode:!0,__v_skip:!0,type:e.type,props:o,key:o&&Dl(o),ref:t&&t.ref?n&&s?ue(s)?s.concat(jl(t)):[s,jl(t)]:jl(t):s,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:i,target:e.target,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==wl?-1===l?16:16|l:l,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:e.transition,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&Bl(e.ssContent),ssFallback:e.ssFallback&&Bl(e.ssFallback),el:e.el,anchor:e.anchor}}function ql(e=" ",t=0){return Vl(xl,null,e,t)}function Hl(e,t){const n=Vl($l,null,e);return n.staticCount=t,n}function Gl(e="",t=!1){return t?(Nl(),Il(kl,null,e)):Vl(kl,null,e)}function Kl(e){return null==e||"boolean"==typeof e?Vl(kl):ue(e)?Vl(wl,null,e.slice()):"object"==typeof e?Wl(e):Vl(xl,null,String(e))}function Wl(e){return null===e.el||e.memo?e:Bl(e)}function Jl(e,t){let n=0;const{shapeFlag:a}=e;if(null==t)t=null;else if(ue(t))n=16;else if("object"==typeof t){if(65&a){const n=t.default;return void(n&&(n._c&&(n._d=!1),Jl(e,n()),n._c&&(n._d=!0)))}{n=32;const a=t._;a||Rl in t?3===a&&oa&&(1===oa.slots._?t._=1:(t._=2,e.patchFlag|=1024)):t._ctx=oa}}else fe(t)?(t={default:t,_ctx:oa},n=32):(t=String(t),64&a?(n=16,t=[ql(t)]):n=8);e.children=t,e.shapeFlag|=n}function Yl(...e){const t={};for(let n=0;n<e.length;n++){const a=e[n];for(const e in a)if("class"===e)t.class!==a.class&&(t.class=q([t.class,a.class]));else if("style"===e)t.style=L([t.style,a.style]);else if(se(e)){const n=t[e],s=a[e];!s||n===s||ue(n)&&n.includes(s)||(t[e]=n?[].concat(n,s):s)}else""!==e&&(t[e]=a[e])}return t}function Zl(e,t,n,a=null){Pn(e,t,7,[n,a])}const Xl=nl();let Ql=0,ei=null;const ti=()=>ei||oa,ni=e=>{ei=e,e.scope.on()},ai=()=>{ei&&ei.scope.off(),ei=null};function si(e){return 4&e.vnode.shapeFlag}let li,ii,oi=!1;function ri(e,t,n){fe(t)?e.render=t:ge(t)&&(e.setupState=bn(t)),di(e,n)}function ci(e){li=e,ii=e=>{e.render._rc&&(e.withProxy=new Proxy(e.ctx,Is))}}const ui=()=>!li;function di(e,t,n){const a=e.type;if(!e.render){if(!t&&li&&!a.render){const t=a.template;if(t){const{isCustomElement:n,compilerOptions:s}=e.appContext.config,{delimiters:l,compilerOptions:i}=a,o=ie(ie({isCustomElement:n,delimiters:l},s),i);a.render=li(t,o)}}e.render=a.render||te,ii&&ii(e)}ni(e),st(),function(e){const t=Rs(e),n=e.proxy,a=e.ctx;Os=!1,t.beforeCreate&&Us(t.beforeCreate,e,"bc");const{data:s,computed:l,methods:i,watch:o,provide:r,inject:c,created:u,beforeMount:d,mounted:p,beforeUpdate:_,updated:f,activated:h,deactivated:m,beforeUnmount:g,unmounted:v,render:b,renderTracked:y,renderTriggered:w,errorCaptured:x,serverPrefetch:k,expose:$,inheritAttrs:S,components:C,directives:N}=t;if(c&&function(e,t,n=te,a=!1){ue(e)&&(e=Vs(e));for(const n in e){const s=e[n];let l;l=ge(s)?"default"in s?Na(s.from||n,s.default,!0):Na(s.from||n):Na(s),dn(l)&&a?Object.defineProperty(t,n,{enumerable:!0,configurable:!0,get:()=>l.value,set:e=>l.value=e}):t[n]=l}}(c,a,null,e.appContext.config.unwrapInjectedRef),i)for(const e in i){const t=i[e];fe(t)&&(a[e]=t.bind(n))}if(s){const t=s.call(n,n);ge(t)&&(e.data=Jt(t))}if(Os=!0,l)for(const e in l){const t=l[e],s=fe(t)?t.bind(n,n):fe(t.get)?t.get.bind(n,n):te,i=!fe(t)&&fe(t.set)?t.set.bind(n):te,o=gi({get:s,set:i});Object.defineProperty(a,e,{enumerable:!0,configurable:!0,get:()=>o.value,set:e=>o.value=e})}if(o)for(const e in o)Fs(o[e],a,n,e);if(r){const e=fe(r)?r.call(n):r;Reflect.ownKeys(e).forEach((t=>{Ca(t,e[t])}))}function A(e,t){ue(t)?t.forEach((t=>e(t.bind(n)))):t&&e(t.bind(n))}if(u&&Us(u,e,"c"),A(os,d),A(rs,p),A(cs,_),A(us,f),A(Qa,h),A(es,m),A(ms,x),A(hs,y),A(fs,w),A(ds,g),A(ps,v),A(_s,k),ue($))if($.length){const t=e.exposed||(e.exposed={});$.forEach((e=>{Object.defineProperty(t,e,{get:()=>n[e],set:t=>n[e]=t})}))}else e.exposed||(e.exposed={});b&&e.render===te&&(e.render=b),null!=S&&(e.inheritAttrs=S),C&&(e.components=C),N&&(e.directives=N)}(e),lt(),ai()}function pi(e){let t;return{get attrs(){return t||(t=function(e){return new Proxy(e.attrs,{get:(t,n)=>(it(e,0,"$attrs"),t[n])})}(e))},slots:e.slots,emit:e.emit,expose:t=>{e.exposed=t||{}}}}function _i(e){if(e.exposed)return e.exposeProxy||(e.exposeProxy=new Proxy(bn(ln(e.exposed)),{get:(t,n)=>n in t?t[n]:n in Ps?Ps[n](e):void 0}))}const fi=/(?:^|[-_])(\w)/g;function hi(e,t=!0){return fe(e)?e.displayName||e.name:e.name||t&&e.__name}function mi(e,t,n=!1){let a=hi(t);if(!a&&t.__file){const e=t.__file.match(/([^/\\]+)\.\w+$/);e&&(a=e[1])}if(!a&&e&&e.parent){const n=e=>{for(const n in e)if(e[n]===t)return n};a=n(e.components||e.parent.type.components)||n(e.appContext.components)}return a?a.replace(fi,(e=>e.toUpperCase())).replace(/[-_]/g,""):n?"App":"Anonymous"}const gi=(e,t)=>function(e,t,n=!1){let a,s;const l=fe(e);return l?(a=e,s=te):(a=e.get,s=e.set),new Sn(a,s,l||!s,n)}(e,0,oi);function vi(){return null}function bi(){return null}function yi(e){}function wi(e,t){return null}function xi(){return $i().slots}function ki(){return $i().attrs}function $i(){const e=ti();return e.setupContext||(e.setupContext=pi(e))}function Si(e,t){const n=ue(e)?e.reduce(((e,t)=>(e[t]={},e)),{}):e;for(const e in t){const a=n[e];a?ue(a)||fe(a)?n[e]={type:a,default:t[e]}:a.default=t[e]:null===a&&(n[e]={default:t[e]})}return n}function Ci(e,t){const n={};for(const a in e)t.includes(a)||Object.defineProperty(n,a,{enumerable:!0,get:()=>e[a]});return n}function Ni(e){const t=ti();let n=e();return ai(),ve(n)&&(n=n.catch((e=>{throw ni(t),e}))),[n,()=>ni(t)]}function Ai(e,t,n){const a=arguments.length;return 2===a?ge(t)&&!ue(t)?Ol(t)?Vl(e,null,[t]):Vl(e,t):Vl(e,null,t):(a>3?n=Array.prototype.slice.call(arguments,2):3===a&&Ol(n)&&(n=[n]),Vl(e,t,n))}const Ti=Symbol(""),Ei=()=>{{const e=Na(Ti);return e||Nn("Server rendering context not provided. Make sure to only call useSSRContext() conditionally in the server build."),e}};function Pi(){}function Mi(e,t,n,a){const s=n[a];if(s&&Ii(s,e))return s;const l=t();return l.memo=e.slice(),n[a]=l}function Ii(e,t){const n=e.memo;if(n.length!=t.length)return!1;for(let e=0;e<n.length;e++)if(Me(n[e],t[e]))return!1;return Tl>0&&Cl&&Cl.push(e),!0}const Oi="3.2.37",Ui="undefined"!=typeof document?document:null,Fi=Ui&&Ui.createElement("template"),Ri={insert:(e,t,n)=>{t.insertBefore(e,n||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,n,a)=>{const s=t?Ui.createElementNS("http://www.w3.org/2000/svg",e):Ui.createElement(e,n?{is:n}:void 0);return"select"===e&&a&&null!=a.multiple&&s.setAttribute("multiple",a.multiple),s},createText:e=>Ui.createTextNode(e),createComment:e=>Ui.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>Ui.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},cloneNode(e){const t=e.cloneNode(!0);return"_value"in e&&(t._value=e._value),t},insertStaticContent(e,t,n,a,s,l){const i=n?n.previousSibling:t.lastChild;if(s&&(s===l||s.nextSibling))for(;t.insertBefore(s.cloneNode(!0),n),s!==l&&(s=s.nextSibling););else{Fi.innerHTML=a?`<svg>${e}</svg>`:e;const s=Fi.content;if(a){const e=s.firstChild;for(;e.firstChild;)s.appendChild(e.firstChild);s.removeChild(e)}t.insertBefore(s,n)}return[i?i.nextSibling:t.firstChild,n?n.previousSibling:t.lastChild]}},Di=/\s*!important$/;function ji(e,t,n){if(ue(n))n.forEach((n=>ji(e,t,n)));else if(null==n&&(n=""),t.startsWith("--"))e.setProperty(t,n);else{const a=function(e,t){const n=Vi[t];if(n)return n;let a=Ne(t);if("filter"!==a&&a in e)return Vi[t]=a;a=Ee(a);for(let n=0;n<Li.length;n++){const s=Li[n]+a;if(s in e)return Vi[t]=s}return t}(e,t);Di.test(n)?e.setProperty(Te(a),n.replace(Di,""),"important"):e[a]=n}}const Li=["Webkit","Moz","ms"],Vi={},zi="http://www.w3.org/1999/xlink",[Bi,qi]=(()=>{let e=Date.now,t=!1;if("undefined"!=typeof window){Date.now()>document.createEvent("Event").timeStamp&&(e=performance.now.bind(performance));const n=navigator.userAgent.match(/firefox\/(\d+)/i);t=!!(n&&Number(n[1])<=53)}return[e,t]})();let Hi=0;const Gi=Promise.resolve(),Ki=()=>{Hi=0};function Wi(e,t,n,a){e.addEventListener(t,n,a)}const Ji=/(?:Once|Passive|Capture)$/,Yi=/^on[a-z]/;function Zi(e,t){const n=Ga(e);class a extends eo{constructor(e){super(n,e,t)}}return a.def=n,a}const Xi=e=>Zi(e,er),Qi="undefined"!=typeof HTMLElement?HTMLElement:class{};class eo extends Qi{constructor(e,t={},n){super(),this._def=e,this._props=t,this._instance=null,this._connected=!1,this._resolved=!1,this._numberProps=null,this.shadowRoot&&n?n(this._createVNode(),this.shadowRoot):this.attachShadow({mode:"open"})}connectedCallback(){this._connected=!0,this._instance||this._resolveDef()}disconnectedCallback(){this._connected=!1,Gn((()=>{this._connected||(Qo(null,this.shadowRoot),this._instance=null)}))}_resolveDef(){if(this._resolved)return;this._resolved=!0;for(let e=0;e<this.attributes.length;e++)this._setAttr(this.attributes[e].name);new MutationObserver((e=>{for(const t of e)this._setAttr(t.attributeName)})).observe(this,{attributes:!0});const e=e=>{const{props:t,styles:n}=e,a=!ue(t),s=t?a?Object.keys(t):t:[];let l;if(a)for(const e in this._props){const n=t[e];(n===Number||n&&n.type===Number)&&(this._props[e]=Ue(this._props[e]),(l||(l=Object.create(null)))[e]=!0)}this._numberProps=l;for(const e of Object.keys(this))"_"!==e[0]&&this._setProp(e,this[e],!0,!1);for(const e of s.map(Ne))Object.defineProperty(this,e,{get(){return this._getProp(e)},set(t){this._setProp(e,t)}});this._applyStyles(n),this._update()},t=this._def.__asyncLoader;t?t().then(e):e(this._def)}_setAttr(e){let t=this.getAttribute(e);this._numberProps&&this._numberProps[e]&&(t=Ue(t)),this._setProp(Ne(e),t,!1)}_getProp(e){return this._props[e]}_setProp(e,t,n=!0,a=!0){t!==this._props[e]&&(this._props[e]=t,a&&this._instance&&this._update(),n&&(!0===t?this.setAttribute(Te(e),""):"string"==typeof t||"number"==typeof t?this.setAttribute(Te(e),t+""):t||this.removeAttribute(Te(e))))}_update(){Qo(this._createVNode(),this.shadowRoot)}_createVNode(){const e=Vl(this._def,ie({},this._props));return this._instance||(e.ce=e=>{this._instance=e,e.isCE=!0,e.emit=(e,...t)=>{this.dispatchEvent(new CustomEvent(e,{detail:t}))};let t=this;for(;t=t&&(t.parentNode||t.host);)if(t instanceof eo){e.parent=t._instance;break}}),e}_applyStyles(e){e&&e.forEach((e=>{const t=document.createElement("style");t.textContent=e,this.shadowRoot.appendChild(t)}))}}function to(e="$style"){{const t=ti();if(!t)return Q;const n=t.type.__cssModules;if(!n)return Q;return n[e]||Q}}function no(e){const t=ti();if(!t)return;const n=()=>ao(t.subTree,e(t.proxy));Ta(n),rs((()=>{const e=new MutationObserver(n);e.observe(t.subTree.el.parentNode,{childList:!0}),ps((()=>e.disconnect()))}))}function ao(e,t){if(128&e.shapeFlag){const n=e.suspense;e=n.activeBranch,n.pendingBranch&&!n.isHydrating&&n.effects.push((()=>{ao(n.activeBranch,t)}))}for(;e.component;)e=e.component.subTree;if(1&e.shapeFlag&&e.el)so(e.el,t);else if(e.type===wl)e.children.forEach((e=>ao(e,t)));else if(e.type===$l){let{el:n,anchor:a}=e;for(;n&&(so(n,t),n!==a);)n=n.nextSibling}}function so(e,t){if(1===e.nodeType){const n=e.style;for(const e in t)n.setProperty(`--${e}`,t[e])}}const lo=(e,{slots:t})=>Ai(ja,uo(e),t);lo.displayName="Transition";const io={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},oo=lo.props=ie({},ja.props,io),ro=(e,t=[])=>{ue(e)?e.forEach((e=>e(...t))):e&&e(...t)},co=e=>!!e&&(ue(e)?e.some((e=>e.length>1)):e.length>1);function uo(e){const t={};for(const n in e)n in io||(t[n]=e[n]);if(!1===e.css)return t;const{name:n="v",type:a,duration:s,enterFromClass:l=`${n}-enter-from`,enterActiveClass:i=`${n}-enter-active`,enterToClass:o=`${n}-enter-to`,appearFromClass:r=l,appearActiveClass:c=i,appearToClass:u=o,leaveFromClass:d=`${n}-leave-from`,leaveActiveClass:p=`${n}-leave-active`,leaveToClass:_=`${n}-leave-to`}=e,f=function(e){if(null==e)return null;if(ge(e))return[po(e.enter),po(e.leave)];{const t=po(e);return[t,t]}}(s),h=f&&f[0],m=f&&f[1],{onBeforeEnter:g,onEnter:v,onEnterCancelled:b,onLeave:y,onLeaveCancelled:w,onBeforeAppear:x=g,onAppear:k=v,onAppearCancelled:$=b}=t,S=(e,t,n)=>{fo(e,t?u:o),fo(e,t?c:i),n&&n()},C=(e,t)=>{e._isLeaving=!1,fo(e,d),fo(e,_),fo(e,p),t&&t()},N=e=>(t,n)=>{const s=e?k:v,i=()=>S(t,e,n);ro(s,[t,i]),ho((()=>{fo(t,e?r:l),_o(t,e?u:o),co(s)||go(t,a,h,i)}))};return ie(t,{onBeforeEnter(e){ro(g,[e]),_o(e,l),_o(e,i)},onBeforeAppear(e){ro(x,[e]),_o(e,r),_o(e,c)},onEnter:N(!1),onAppear:N(!0),onLeave(e,t){e._isLeaving=!0;const n=()=>C(e,t);_o(e,d),wo(),_o(e,p),ho((()=>{e._isLeaving&&(fo(e,d),_o(e,_),co(y)||go(e,a,m,n))})),ro(y,[e,n])},onEnterCancelled(e){S(e,!1),ro(b,[e])},onAppearCancelled(e){S(e,!0),ro($,[e])},onLeaveCancelled(e){C(e),ro(w,[e])}})}function po(e){return Ue(e)}function _o(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.add(t))),(e._vtc||(e._vtc=new Set)).add(t)}function fo(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.remove(t)));const{_vtc:n}=e;n&&(n.delete(t),n.size||(e._vtc=void 0))}function ho(e){requestAnimationFrame((()=>{requestAnimationFrame(e)}))}let mo=0;function go(e,t,n,a){const s=e._endId=++mo,l=()=>{s===e._endId&&a()};if(n)return setTimeout(l,n);const{type:i,timeout:o,propCount:r}=vo(e,t);if(!i)return a();const c=i+"end";let u=0;const d=()=>{e.removeEventListener(c,p),l()},p=t=>{t.target===e&&++u>=r&&d()};setTimeout((()=>{u<r&&d()}),o+1),e.addEventListener(c,p)}function vo(e,t){const n=window.getComputedStyle(e),a=e=>(n[e]||"").split(", "),s=a("transitionDelay"),l=a("transitionDuration"),i=bo(s,l),o=a("animationDelay"),r=a("animationDuration"),c=bo(o,r);let u=null,d=0,p=0;return"transition"===t?i>0&&(u="transition",d=i,p=l.length):"animation"===t?c>0&&(u="animation",d=c,p=r.length):(d=Math.max(i,c),u=d>0?i>c?"transition":"animation":null,p=u?"transition"===u?l.length:r.length:0),{type:u,timeout:d,propCount:p,hasTransform:"transition"===u&&/\b(transform|all)(,|$)/.test(n.transitionProperty)}}function bo(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max(...t.map(((t,n)=>yo(t)+yo(e[n]))))}function yo(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function wo(){return document.body.offsetHeight}const xo=new WeakMap,ko=new WeakMap,$o={name:"TransitionGroup",props:ie({},oo,{tag:String,moveClass:String}),setup(e,{slots:t}){const n=ti(),a=Ra();let s,l;return us((()=>{if(!s.length)return;const t=e.moveClass||`${e.name||"v"}-move`;if(!function(e,t,n){const a=e.cloneNode();e._vtc&&e._vtc.forEach((e=>{e.split(/\s+/).forEach((e=>e&&a.classList.remove(e)))})),n.split(/\s+/).forEach((e=>e&&a.classList.add(e))),a.style.display="none";const s=1===t.nodeType?t:t.parentNode;s.appendChild(a);const{hasTransform:l}=vo(a);return s.removeChild(a),l}(s[0].el,n.vnode.el,t))return;s.forEach(So),s.forEach(Co);const a=s.filter(No);wo(),a.forEach((e=>{const n=e.el,a=n.style;_o(n,t),a.transform=a.webkitTransform=a.transitionDuration="";const s=n._moveCb=e=>{e&&e.target!==n||e&&!/transform$/.test(e.propertyName)||(n.removeEventListener("transitionend",s),n._moveCb=null,fo(n,t))};n.addEventListener("transitionend",s)}))})),()=>{const i=sn(e),o=uo(i);let r=i.tag||wl;s=l,l=t.default?Ha(t.default()):[];for(let e=0;e<l.length;e++){const t=l[e];null!=t.key&&qa(t,Va(t,o,a,n))}if(s)for(let e=0;e<s.length;e++){const t=s[e];qa(t,Va(t,o,a,n)),xo.set(t,t.el.getBoundingClientRect())}return Vl(r,null,l)}}};function So(e){const t=e.el;t._moveCb&&t._moveCb(),t._enterCb&&t._enterCb()}function Co(e){ko.set(e,e.el.getBoundingClientRect())}function No(e){const t=xo.get(e),n=ko.get(e),a=t.left-n.left,s=t.top-n.top;if(a||s){const t=e.el.style;return t.transform=t.webkitTransform=`translate(${a}px,${s}px)`,t.transitionDuration="0s",e}}const Ao=e=>{const t=e.props["onUpdate:modelValue"]||!1;return ue(t)?e=>Ie(t,e):t};function To(e){e.target.composing=!0}function Eo(e){const t=e.target;t.composing&&(t.composing=!1,t.dispatchEvent(new Event("input")))}const Po={created(e,{modifiers:{lazy:t,trim:n,number:a}},s){e._assign=Ao(s);const l=a||s.props&&"number"===s.props.type;Wi(e,t?"change":"input",(t=>{if(t.target.composing)return;let a=e.value;n&&(a=a.trim()),l&&(a=Ue(a)),e._assign(a)})),n&&Wi(e,"change",(()=>{e.value=e.value.trim()})),t||(Wi(e,"compositionstart",To),Wi(e,"compositionend",Eo),Wi(e,"change",Eo))},mounted(e,{value:t}){e.value=null==t?"":t},beforeUpdate(e,{value:t,modifiers:{lazy:n,trim:a,number:s}},l){if(e._assign=Ao(l),e.composing)return;if(document.activeElement===e&&"range"!==e.type){if(n)return;if(a&&e.value.trim()===t)return;if((s||"number"===e.type)&&Ue(e.value)===t)return}const i=null==t?"":t;e.value!==i&&(e.value=i)}},Mo={deep:!0,created(e,t,n){e._assign=Ao(n),Wi(e,"change",(()=>{const t=e._modelValue,n=Ro(e),a=e.checked,s=e._assign;if(ue(t)){const e=Y(t,n),l=-1!==e;if(a&&!l)s(t.concat(n));else if(!a&&l){const n=[...t];n.splice(e,1),s(n)}}else if(pe(t)){const e=new Set(t);a?e.add(n):e.delete(n),s(e)}else s(Do(e,a))}))},mounted:Io,beforeUpdate(e,t,n){e._assign=Ao(n),Io(e,t,n)}};function Io(e,{value:t,oldValue:n},a){e._modelValue=t,ue(t)?e.checked=Y(t,a.props.value)>-1:pe(t)?e.checked=t.has(a.props.value):t!==n&&(e.checked=J(t,Do(e,!0)))}const Oo={created(e,{value:t},n){e.checked=J(t,n.props.value),e._assign=Ao(n),Wi(e,"change",(()=>{e._assign(Ro(e))}))},beforeUpdate(e,{value:t,oldValue:n},a){e._assign=Ao(a),t!==n&&(e.checked=J(t,a.props.value))}},Uo={deep:!0,created(e,{value:t,modifiers:{number:n}},a){const s=pe(t);Wi(e,"change",(()=>{const t=Array.prototype.filter.call(e.options,(e=>e.selected)).map((e=>n?Ue(Ro(e)):Ro(e)));e._assign(e.multiple?s?new Set(t):t:t[0])})),e._assign=Ao(a)},mounted(e,{value:t}){Fo(e,t)},beforeUpdate(e,t,n){e._assign=Ao(n)},updated(e,{value:t}){Fo(e,t)}};function Fo(e,t){const n=e.multiple;if(!n||ue(t)||pe(t)){for(let a=0,s=e.options.length;a<s;a++){const s=e.options[a],l=Ro(s);if(n)s.selected=ue(t)?Y(t,l)>-1:t.has(l);else if(J(Ro(s),t))return void(e.selectedIndex!==a&&(e.selectedIndex=a))}n||-1===e.selectedIndex||(e.selectedIndex=-1)}}function Ro(e){return"_value"in e?e._value:e.value}function Do(e,t){const n=t?"_trueValue":"_falseValue";return n in e?e[n]:t}const jo={created(e,t,n){Lo(e,t,n,null,"created")},mounted(e,t,n){Lo(e,t,n,null,"mounted")},beforeUpdate(e,t,n,a){Lo(e,t,n,a,"beforeUpdate")},updated(e,t,n,a){Lo(e,t,n,a,"updated")}};function Lo(e,t,n,a,s){const l=function(e,t){switch(e){case"SELECT":return Uo;case"TEXTAREA":return Po;default:switch(t){case"checkbox":return Mo;case"radio":return Oo;default:return Po}}}(e.tagName,n.props&&n.props.type)[s];l&&l(e,t,n,a)}const Vo=["ctrl","shift","alt","meta"],zo={stop:e=>e.stopPropagation(),prevent:e=>e.preventDefault(),self:e=>e.target!==e.currentTarget,ctrl:e=>!e.ctrlKey,shift:e=>!e.shiftKey,alt:e=>!e.altKey,meta:e=>!e.metaKey,left:e=>"button"in e&&0!==e.button,middle:e=>"button"in e&&1!==e.button,right:e=>"button"in e&&2!==e.button,exact:(e,t)=>Vo.some((n=>e[`${n}Key`]&&!t.includes(n)))},Bo=(e,t)=>(n,...a)=>{for(let e=0;e<t.length;e++){const a=zo[t[e]];if(a&&a(n,t))return}return e(n,...a)},qo={esc:"escape",space:" ",up:"arrow-up",left:"arrow-left",right:"arrow-right",down:"arrow-down",delete:"backspace"},Ho=(e,t)=>n=>{if(!("key"in n))return;const a=Te(n.key);return t.some((e=>e===a||qo[e]===a))?e(n):void 0},Go={beforeMount(e,{value:t},{transition:n}){e._vod="none"===e.style.display?"":e.style.display,n&&t?n.beforeEnter(e):Ko(e,t)},mounted(e,{value:t},{transition:n}){n&&t&&n.enter(e)},updated(e,{value:t,oldValue:n},{transition:a}){!t!=!n&&(a?t?(a.beforeEnter(e),Ko(e,!0),a.enter(e)):a.leave(e,(()=>{Ko(e,!1)})):Ko(e,t))},beforeUnmount(e,{value:t}){Ko(e,t)}};function Ko(e,t){e.style.display=t?e._vod:"none"}const Wo=ie({patchProp:(e,t,n,a,s=!1,l,i,o,r)=>{"class"===t?function(e,t,n){const a=e._vtc;a&&(t=(t?[t,...a]:[...a]).join(" ")),null==t?e.removeAttribute("class"):n?e.setAttribute("class",t):e.className=t}(e,a,s):"style"===t?function(e,t,n){const a=e.style,s=he(n);if(n&&!s){for(const e in n)ji(a,e,n[e]);if(t&&!he(t))for(const e in t)null==n[e]&&ji(a,e,"")}else{const l=a.display;s?t!==n&&(a.cssText=n):t&&e.removeAttribute("style"),"_vod"in e&&(a.display=l)}}(e,n,a):se(t)?le(t)||function(e,t,n,a,s=null){const l=e._vei||(e._vei={}),i=l[t];if(a&&i)i.value=a;else{const[n,o]=function(e){let t;if(Ji.test(e)){let n;for(t={};n=e.match(Ji);)e=e.slice(0,e.length-n[0].length),t[n[0].toLowerCase()]=!0}return[Te(e.slice(2)),t]}(t);if(a){const i=l[t]=function(e,t){const n=e=>{const a=e.timeStamp||Bi();(qi||a>=n.attached-1)&&Pn(function(e,t){if(ue(t)){const n=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{n.call(e),e._stopped=!0},t.map((e=>t=>!t._stopped&&e&&e(t)))}return t}(e,n.value),t,5,[e])};return n.value=e,n.attached=Hi||(Gi.then(Ki),Hi=Bi()),n}(a,s);Wi(e,n,i,o)}else i&&(function(e,t,n,a){e.removeEventListener(t,n,a)}(e,n,i,o),l[t]=void 0)}}(e,t,0,a,i):("."===t[0]?(t=t.slice(1),1):"^"===t[0]?(t=t.slice(1),0):function(e,t,n,a){return a?"innerHTML"===t||"textContent"===t||!!(t in e&&Yi.test(t)&&fe(n)):"spellcheck"!==t&&"draggable"!==t&&"translate"!==t&&("form"!==t&&(("list"!==t||"INPUT"!==e.tagName)&&(("type"!==t||"TEXTAREA"!==e.tagName)&&((!Yi.test(t)||!he(n))&&t in e))))}(e,t,a,s))?function(e,t,n,a,s,l,i){if("innerHTML"===t||"textContent"===t)return a&&i(a,s,l),void(e[t]=null==n?"":n);if("value"===t&&"PROGRESS"!==e.tagName&&!e.tagName.includes("-")){e._value=n;const a=null==n?"":n;return e.value===a&&"OPTION"!==e.tagName||(e.value=a),void(null==n&&e.removeAttribute(t))}let o=!1;if(""===n||null==n){const a=typeof e[t];"boolean"===a?n=j(n):null==n&&"string"===a?(n="",o=!0):"number"===a&&(n=0,o=!0)}try{e[t]=n}catch(e){}o&&e.removeAttribute(t)}(e,t,a,l,i,o,r):("true-value"===t?e._trueValue=a:"false-value"===t&&(e._falseValue=a),function(e,t,n,a,s){if(a&&t.startsWith("xlink:"))null==n?e.removeAttributeNS(zi,t.slice(6,t.length)):e.setAttributeNS(zi,t,n);else{const a=D(t);null==n||a&&!j(n)?e.removeAttribute(t):e.setAttribute(t,a?"":n)}}(e,t,a,s))}},Ri);let Jo,Yo=!1;function Zo(){return Jo||(Jo=dl(Wo))}function Xo(){return Jo=Yo?Jo:pl(Wo),Yo=!0,Jo}const Qo=(...e)=>{Zo().render(...e)},er=(...e)=>{Xo().hydrate(...e)},tr=(...e)=>{const t=Zo().createApp(...e),{mount:n}=t;return t.mount=e=>{const a=ar(e);if(!a)return;const s=t._component;fe(s)||s.render||s.template||(s.template=a.innerHTML),a.innerHTML="";const l=n(a,!1,a instanceof SVGElement);return a instanceof Element&&(a.removeAttribute("v-cloak"),a.setAttribute("data-v-app","")),l},t},nr=(...e)=>{const t=Xo().createApp(...e),{mount:n}=t;return t.mount=e=>{const t=ar(e);if(t)return n(t,!0,t instanceof SVGElement)},t};function ar(e){return he(e)?document.querySelector(e):e}const sr=te;var lr=Object.freeze({__proto__:null,render:Qo,hydrate:er,createApp:tr,createSSRApp:nr,initDirectivesForSSR:sr,defineCustomElement:Zi,defineSSRCustomElement:Xi,VueElement:eo,useCssModule:to,useCssVars:no,Transition:lo,TransitionGroup:$o,vModelText:Po,vModelCheckbox:Mo,vModelRadio:Oo,vModelSelect:Uo,vModelDynamic:jo,withModifiers:Bo,withKeys:Ho,vShow:Go,reactive:Jt,ref:pn,readonly:Zt,unref:gn,proxyRefs:bn,isRef:dn,toRef:$n,toRefs:xn,isProxy:an,isReactive:en,isReadonly:tn,isShallow:nn,customRef:wn,triggerRef:mn,shallowRef:_n,shallowReactive:Yt,shallowReadonly:Xt,markRaw:ln,toRaw:sn,effect:et,stop:tt,ReactiveEffect:Xe,effectScope:je,EffectScope:De,getCurrentScope:Ve,onScopeDispose:ze,computed:gi,watch:Ma,watchEffect:Aa,watchPostEffect:Ta,watchSyncEffect:Ea,onBeforeMount:os,onMounted:rs,onBeforeUpdate:cs,onUpdated:us,onBeforeUnmount:ds,onUnmounted:ps,onActivated:Qa,onDeactivated:es,onRenderTracked:hs,onRenderTriggered:fs,onErrorCaptured:ms,onServerPrefetch:_s,provide:Ca,inject:Na,nextTick:Gn,defineComponent:Ga,defineAsyncComponent:Wa,useAttrs:ki,useSlots:xi,defineProps:vi,defineEmits:bi,defineExpose:yi,withDefaults:wi,mergeDefaults:Si,createPropsRestProxy:Ci,withAsyncContext:Ni,getCurrentInstance:ti,h:Ai,createVNode:Vl,cloneVNode:Bl,mergeProps:Yl,isVNode:Ol,Fragment:wl,Text:xl,Comment:kl,Static:$l,Teleport:yl,Suspense:ya,KeepAlive:Za,BaseTransition:ja,withDirectives:gs,useSSRContext:Ei,ssrContextKey:Ti,createRenderer:dl,createHydrationRenderer:pl,queuePostFlushCb:Yn,warn:Nn,handleError:Mn,callWithErrorHandling:En,callWithAsyncErrorHandling:Pn,resolveComponent:bs,resolveDirective:xs,resolveDynamicComponent:ws,registerRuntimeCompiler:ci,isRuntimeOnly:ui,useTransitionState:Ra,resolveTransitionHooks:Va,setTransitionHooks:qa,getTransitionRawChildren:Ha,initCustomFormatter:Pi,get devtools(){return ta},setDevtoolsHook:aa,withCtx:_a,pushScopeId:ua,popScopeId:da,withScopeId:pa,renderList:Ss,toHandlers:Ts,renderSlot:Ns,createSlots:Cs,withMemo:Mi,isMemoSame:Ii,openBlock:Nl,createBlock:Il,setBlockTracking:El,createTextVNode:ql,createCommentVNode:Gl,createStaticVNode:Hl,createElementVNode:Ll,createElementBlock:Ml,guardReactiveProps:zl,toDisplayString:Z,camelize:Ne,capitalize:Ee,toHandlerKey:Pe,normalizeProps:H,normalizeClass:q,normalizeStyle:L,transformVNodeArgs:Fl,version:Oi,ssrUtils:null,resolveFilter:null,compatUtils:null});function ir(e){throw e}function or(e){}function rr(e,t,n,a){const s=new SyntaxError(String(e));return s.code=e,s.loc=t,s}const cr=Symbol(""),ur=Symbol(""),dr=Symbol(""),pr=Symbol(""),_r=Symbol(""),fr=Symbol(""),hr=Symbol(""),mr=Symbol(""),gr=Symbol(""),vr=Symbol(""),br=Symbol(""),yr=Symbol(""),wr=Symbol(""),xr=Symbol(""),kr=Symbol(""),$r=Symbol(""),Sr=Symbol(""),Cr=Symbol(""),Nr=Symbol(""),Ar=Symbol(""),Tr=Symbol(""),Er=Symbol(""),Pr=Symbol(""),Mr=Symbol(""),Ir=Symbol(""),Or=Symbol(""),Ur=Symbol(""),Fr=Symbol(""),Rr=Symbol(""),Dr=Symbol(""),jr=Symbol(""),Lr=Symbol(""),Vr=Symbol(""),zr=Symbol(""),Br=Symbol(""),qr=Symbol(""),Hr=Symbol(""),Gr=Symbol(""),Kr=Symbol(""),Wr={[cr]:"Fragment",[ur]:"Teleport",[dr]:"Suspense",[pr]:"KeepAlive",[_r]:"BaseTransition",[fr]:"openBlock",[hr]:"createBlock",[mr]:"createElementBlock",[gr]:"createVNode",[vr]:"createElementVNode",[br]:"createCommentVNode",[yr]:"createTextVNode",[wr]:"createStaticVNode",[xr]:"resolveComponent",[kr]:"resolveDynamicComponent",[$r]:"resolveDirective",[Sr]:"resolveFilter",[Cr]:"withDirectives",[Nr]:"renderList",[Ar]:"renderSlot",[Tr]:"createSlots",[Er]:"toDisplayString",[Pr]:"mergeProps",[Mr]:"normalizeClass",[Ir]:"normalizeStyle",[Or]:"normalizeProps",[Ur]:"guardReactiveProps",[Fr]:"toHandlers",[Rr]:"camelize",[Dr]:"capitalize",[jr]:"toHandlerKey",[Lr]:"setBlockTracking",[Vr]:"pushScopeId",[zr]:"popScopeId",[Br]:"withCtx",[qr]:"unref",[Hr]:"isRef",[Gr]:"withMemo",[Kr]:"isMemoSame"},Jr={source:"",start:{line:1,column:1,offset:0},end:{line:1,column:1,offset:0}};function Yr(e,t,n,a,s,l,i,o=!1,r=!1,c=!1,u=Jr){return e&&(o?(e.helper(fr),e.helper(Sc(e.inSSR,c))):e.helper($c(e.inSSR,c)),i&&e.helper(Cr)),{type:13,tag:t,props:n,children:a,patchFlag:s,dynamicProps:l,directives:i,isBlock:o,disableTracking:r,isComponent:c,loc:u}}function Zr(e,t=Jr){return{type:17,loc:t,elements:e}}function Xr(e,t=Jr){return{type:15,loc:t,properties:e}}function Qr(e,t){return{type:16,loc:Jr,key:he(e)?ec(e,!0):e,value:t}}function ec(e,t=!1,n=Jr,a=0){return{type:4,loc:n,content:e,isStatic:t,constType:t?3:a}}function tc(e,t=Jr){return{type:8,loc:t,children:e}}function nc(e,t=[],n=Jr){return{type:14,loc:n,callee:e,arguments:t}}function ac(e,t,n=!1,a=!1,s=Jr){return{type:18,params:e,returns:t,newline:n,isSlot:a,loc:s}}function sc(e,t,n,a=!0){return{type:19,test:e,consequent:t,alternate:n,newline:a,loc:Jr}}const lc=e=>4===e.type&&e.isStatic,ic=(e,t)=>e===t||e===Te(t);function oc(e){return ic(e,"Teleport")?ur:ic(e,"Suspense")?dr:ic(e,"KeepAlive")?pr:ic(e,"BaseTransition")?_r:void 0}const rc=/^\d|[^\$\w]/,cc=e=>!rc.test(e),uc=/[A-Za-z_$\xA0-\uFFFF]/,dc=/[\.\?\w$\xA0-\uFFFF]/,pc=/\s+[.[]\s*|\s*[.[]\s+/g,_c=e=>{e=e.trim().replace(pc,(e=>e.trim()));let t=0,n=[],a=0,s=0,l=null;for(let i=0;i<e.length;i++){const o=e.charAt(i);switch(t){case 0:if("["===o)n.push(t),t=1,a++;else if("("===o)n.push(t),t=2,s++;else if(!(0===i?uc:dc).test(o))return!1;break;case 1:"'"===o||'"'===o||"`"===o?(n.push(t),t=3,l=o):"["===o?a++:"]"===o&&(--a||(t=n.pop()));break;case 2:if("'"===o||'"'===o||"`"===o)n.push(t),t=3,l=o;else if("("===o)s++;else if(")"===o){if(i===e.length-1)return!1;--s||(t=n.pop())}break;case 3:o===l&&(t=n.pop(),l=null)}}return!a&&!s};function fc(e,t,n){const a={source:e.source.slice(t,t+n),start:hc(e.start,e.source,t),end:e.end};return null!=n&&(a.end=hc(e.start,e.source,t+n)),a}function hc(e,t,n=t.length){return mc(ie({},e),t,n)}function mc(e,t,n=t.length){let a=0,s=-1;for(let e=0;e<n;e++)10===t.charCodeAt(e)&&(a++,s=e);return e.offset+=n,e.line+=a,e.column=-1===s?e.column+n:n-s,e}function gc(e,t,n=!1){for(let a=0;a<e.props.length;a++){const s=e.props[a];if(7===s.type&&(n||s.exp)&&(he(t)?s.name===t:t.test(s.name)))return s}}function vc(e,t,n=!1,a=!1){for(let s=0;s<e.props.length;s++){const l=e.props[s];if(6===l.type){if(n)continue;if(l.name===t&&(l.value||a))return l}else if("bind"===l.name&&(l.exp||a)&&bc(l.arg,t))return l}}function bc(e,t){return!(!e||!lc(e)||e.content!==t)}function yc(e){return 5===e.type||2===e.type}function wc(e){return 7===e.type&&"slot"===e.name}function xc(e){return 1===e.type&&3===e.tagType}function kc(e){return 1===e.type&&2===e.tagType}function $c(e,t){return e||t?gr:vr}function Sc(e,t){return e||t?hr:mr}const Cc=new Set([Or,Ur]);function Nc(e,t=[]){if(e&&!he(e)&&14===e.type){const n=e.callee;if(!he(n)&&Cc.has(n))return Nc(e.arguments[0],t.concat(e))}return[e,t]}function Ac(e,t,n){let a,s,l=13===e.type?e.props:e.arguments[2],i=[];if(l&&!he(l)&&14===l.type){const e=Nc(l);l=e[0],i=e[1],s=i[i.length-1]}if(null==l||he(l))a=Xr([t]);else if(14===l.type){const e=l.arguments[0];he(e)||15!==e.type?l.callee===Fr?a=nc(n.helper(Pr),[Xr([t]),l]):l.arguments.unshift(Xr([t])):e.properties.unshift(t),!a&&(a=l)}else if(15===l.type){let e=!1;if(4===t.key.type){const n=t.key.content;e=l.properties.some((e=>4===e.key.type&&e.key.content===n))}e||l.properties.unshift(t),a=l}else a=nc(n.helper(Pr),[Xr([t]),l]),s&&s.callee===Ur&&(s=i[i.length-2]);13===e.type?s?s.arguments[0]=a:e.props=a:s?s.arguments[0]=a:e.arguments[2]=a}function Tc(e,t){return`_${t}_${e.replace(/[^\w]/g,((t,n)=>"-"===t?"_":e.charCodeAt(n).toString()))}`}function Ec(e,{helper:t,removeHelper:n,inSSR:a}){e.isBlock||(e.isBlock=!0,n($c(a,e.isComponent)),t(fr),t(Sc(a,e.isComponent)))}const Pc=/&(gt|lt|amp|apos|quot);/g,Mc={gt:">",lt:"<",amp:"&",apos:"'",quot:'"'},Ic={delimiters:["{{","}}"],getNamespace:()=>0,getTextMode:()=>0,isVoidTag:ne,isPreTag:ne,isCustomElement:ne,decodeEntities:e=>e.replace(Pc,((e,t)=>Mc[t])),onError:ir,onWarn:or,comments:!1};function Oc(e,t,n){const a=Jc(n),s=a?a.ns:0,l=[];for(;!eu(e,t,n);){const i=e.source;let o;if(0===t||1===t)if(!e.inVPre&&Yc(i,e.options.delimiters[0]))o=qc(e,t);else if(0===t&&"<"===i[0])if(1===i.length);else if("!"===i[1])o=Yc(i,"\x3c!--")?Rc(e):Yc(i,"<!DOCTYPE")?Dc(e):Yc(i,"<![CDATA[")&&0!==s?Fc(e,n):Dc(e);else if("/"===i[1])if(2===i.length);else{if(">"===i[2]){Zc(e,3);continue}if(/[a-z]/i.test(i[2])){Vc(e,1,a);continue}o=Dc(e)}else/[a-z]/i.test(i[1])?o=jc(e,n):"?"===i[1]&&(o=Dc(e));if(o||(o=Hc(e,t)),ue(o))for(let e=0;e<o.length;e++)Uc(l,o[e]);else Uc(l,o)}let i=!1;if(2!==t&&1!==t){const t="preserve"!==e.options.whitespace;for(let n=0;n<l.length;n++){const a=l[n];if(e.inPre||2!==a.type)3!==a.type||e.options.comments||(i=!0,l[n]=null);else if(/[^\t\r\n\f ]/.test(a.content))t&&(a.content=a.content.replace(/[\t\r\n\f ]+/g," "));else{const e=l[n-1],s=l[n+1];!e||!s||t&&(3===e.type||3===s.type||1===e.type&&1===s.type&&/[\r\n]/.test(a.content))?(i=!0,l[n]=null):a.content=" "}}if(e.inPre&&a&&e.options.isPreTag(a.tag)){const e=l[0];e&&2===e.type&&(e.content=e.content.replace(/^\r?\n/,""))}}return i?l.filter(Boolean):l}function Uc(e,t){if(2===t.type){const n=Jc(e);if(n&&2===n.type&&n.loc.end.offset===t.loc.start.offset)return n.content+=t.content,n.loc.end=t.loc.end,void(n.loc.source+=t.loc.source)}e.push(t)}function Fc(e,t){Zc(e,9);const n=Oc(e,3,t);return 0===e.source.length||Zc(e,3),n}function Rc(e){const t=Kc(e);let n;const a=/--(\!)?>/.exec(e.source);if(a){n=e.source.slice(4,a.index);const t=e.source.slice(0,a.index);let s=1,l=0;for(;-1!==(l=t.indexOf("\x3c!--",s));)Zc(e,l-s+1),s=l+1;Zc(e,a.index+a[0].length-s+1)}else n=e.source.slice(4),Zc(e,e.source.length);return{type:3,content:n,loc:Wc(e,t)}}function Dc(e){const t=Kc(e),n="?"===e.source[1]?1:2;let a;const s=e.source.indexOf(">");return-1===s?(a=e.source.slice(n),Zc(e,e.source.length)):(a=e.source.slice(n,s),Zc(e,s+1)),{type:3,content:a,loc:Wc(e,t)}}function jc(e,t){const n=e.inPre,a=e.inVPre,s=Jc(t),l=Vc(e,0,s),i=e.inPre&&!n,o=e.inVPre&&!a;if(l.isSelfClosing||e.options.isVoidTag(l.tag))return i&&(e.inPre=!1),o&&(e.inVPre=!1),l;t.push(l);const r=e.options.getTextMode(l,s),c=Oc(e,r,t);if(t.pop(),l.children=c,tu(e.source,l.tag))Vc(e,1,s);else if(0===e.source.length&&"script"===l.tag.toLowerCase()){const e=c[0];e&&Yc(e.loc.source,"\x3c!--")}return l.loc=Wc(e,l.loc.start),i&&(e.inPre=!1),o&&(e.inVPre=!1),l}const Lc=F("if,else,else-if,for,slot");function Vc(e,t,n){const a=Kc(e),s=/^<\/?([a-z][^\t\r\n\f />]*)/i.exec(e.source),l=s[1],i=e.options.getNamespace(l,n);Zc(e,s[0].length),Xc(e);const o=Kc(e),r=e.source;e.options.isPreTag(l)&&(e.inPre=!0);let c=zc(e,t);0===t&&!e.inVPre&&c.some((e=>7===e.type&&"pre"===e.name))&&(e.inVPre=!0,ie(e,o),e.source=r,c=zc(e,t).filter((e=>"v-pre"!==e.name)));let u=!1;if(0===e.source.length||(u=Yc(e.source,"/>"),Zc(e,u?2:1)),1===t)return;let d=0;return e.inVPre||("slot"===l?d=2:"template"===l?c.some((e=>7===e.type&&Lc(e.name)))&&(d=3):function(e,t,n){const a=n.options;if(a.isCustomElement(e))return!1;if("component"===e||/^[A-Z]/.test(e)||oc(e)||a.isBuiltInComponent&&a.isBuiltInComponent(e)||a.isNativeTag&&!a.isNativeTag(e))return!0;for(let e=0;e<t.length;e++){const n=t[e];if(6===n.type){if("is"===n.name&&n.value&&n.value.content.startsWith("vue:"))return!0}else{if("is"===n.name)return!0;"bind"===n.name&&bc(n.arg,"is")}}}(l,c,e)&&(d=1)),{type:1,ns:i,tag:l,tagType:d,props:c,isSelfClosing:u,children:[],loc:Wc(e,a),codegenNode:void 0}}function zc(e,t){const n=[],a=new Set;for(;e.source.length>0&&!Yc(e.source,">")&&!Yc(e.source,"/>");){if(Yc(e.source,"/")){Zc(e,1),Xc(e);continue}const s=Bc(e,a);6===s.type&&s.value&&"class"===s.name&&(s.value.content=s.value.content.replace(/\s+/g," ").trim()),0===t&&n.push(s),/^[^\t\r\n\f />]/.test(e.source),Xc(e)}return n}function Bc(e,t){const n=Kc(e),a=/^[^\t\r\n\f />][^\t\r\n\f />=]*/.exec(e.source)[0];t.has(a),t.add(a);{const e=/["'<]/g;for(;e.exec(a););}let s;Zc(e,a.length),/^[\t\r\n\f ]*=/.test(e.source)&&(Xc(e),Zc(e,1),Xc(e),s=function(e){const t=Kc(e);let n;const a=e.source[0],s='"'===a||"'"===a;if(s){Zc(e,1);const t=e.source.indexOf(a);-1===t?n=Gc(e,e.source.length,4):(n=Gc(e,t,4),Zc(e,1))}else{const t=/^[^\t\r\n\f >]+/.exec(e.source);if(!t)return;const a=/["'<=`]/g;for(;a.exec(t[0]););n=Gc(e,t[0].length,4)}return{content:n,isQuoted:s,loc:Wc(e,t)}}(e));const l=Wc(e,n);if(!e.inVPre&&/^(v-[A-Za-z0-9-]|:|\.|@|#)/.test(a)){const t=/(?:^v-([a-z0-9-]+))?(?:(?::|^\.|^@|^#)(\[[^\]]+\]|[^\.]+))?(.+)?$/i.exec(a);let i,o=Yc(a,"."),r=t[1]||(o||Yc(a,":")?"bind":Yc(a,"@")?"on":"slot");if(t[2]){const s="slot"===r,l=a.lastIndexOf(t[2]),o=Wc(e,Qc(e,n,l),Qc(e,n,l+t[2].length+(s&&t[3]||"").length));let c=t[2],u=!0;c.startsWith("[")?(u=!1,c=c.endsWith("]")?c.slice(1,c.length-1):c.slice(1)):s&&(c+=t[3]||""),i={type:4,content:c,isStatic:u,constType:u?3:0,loc:o}}if(s&&s.isQuoted){const e=s.loc;e.start.offset++,e.start.column++,e.end=hc(e.start,s.content),e.source=e.source.slice(1,-1)}const c=t[3]?t[3].slice(1).split("."):[];return o&&c.push("prop"),{type:7,name:r,exp:s&&{type:4,content:s.content,isStatic:!1,constType:0,loc:s.loc},arg:i,modifiers:c,loc:l}}return!e.inVPre&&Yc(a,"v-"),{type:6,name:a,value:s&&{type:2,content:s.content,loc:s.loc},loc:l}}function qc(e,t){const[n,a]=e.options.delimiters,s=e.source.indexOf(a,n.length);if(-1===s)return;const l=Kc(e);Zc(e,n.length);const i=Kc(e),o=Kc(e),r=s-n.length,c=e.source.slice(0,r),u=Gc(e,r,t),d=u.trim(),p=u.indexOf(d);return p>0&&mc(i,c,p),mc(o,c,r-(u.length-d.length-p)),Zc(e,a.length),{type:5,content:{type:4,isStatic:!1,constType:0,content:d,loc:Wc(e,i,o)},loc:Wc(e,l)}}function Hc(e,t){const n=3===t?["]]>"]:["<",e.options.delimiters[0]];let a=e.source.length;for(let t=0;t<n.length;t++){const s=e.source.indexOf(n[t],1);-1!==s&&a>s&&(a=s)}const s=Kc(e);return{type:2,content:Gc(e,a,t),loc:Wc(e,s)}}function Gc(e,t,n){const a=e.source.slice(0,t);return Zc(e,t),2!==n&&3!==n&&a.includes("&")?e.options.decodeEntities(a,4===n):a}function Kc(e){const{column:t,line:n,offset:a}=e;return{column:t,line:n,offset:a}}function Wc(e,t,n){return{start:t,end:n=n||Kc(e),source:e.originalSource.slice(t.offset,n.offset)}}function Jc(e){return e[e.length-1]}function Yc(e,t){return e.startsWith(t)}function Zc(e,t){const{source:n}=e;mc(e,n,t),e.source=n.slice(t)}function Xc(e){const t=/^[\t\r\n\f ]+/.exec(e.source);t&&Zc(e,t[0].length)}function Qc(e,t,n){return hc(t,e.originalSource.slice(t.offset,n),n)}function eu(e,t,n){const a=e.source;switch(t){case 0:if(Yc(a,"</"))for(let e=n.length-1;e>=0;--e)if(tu(a,n[e].tag))return!0;break;case 1:case 2:{const e=Jc(n);if(e&&tu(a,e.tag))return!0;break}case 3:if(Yc(a,"]]>"))return!0}return!a}function tu(e,t){return Yc(e,"</")&&e.slice(2,2+t.length).toLowerCase()===t.toLowerCase()&&/[\t\r\n\f />]/.test(e[2+t.length]||">")}function nu(e,t){su(e,t,au(e,e.children[0]))}function au(e,t){const{children:n}=e;return 1===n.length&&1===t.type&&!kc(t)}function su(e,t,n=!1){const{children:a}=e,s=a.length;let l=0;for(let e=0;e<a.length;e++){const s=a[e];if(1===s.type&&0===s.tagType){const e=n?0:lu(s,t);if(e>0){if(e>=2){s.codegenNode.patchFlag="-1",s.codegenNode=t.hoist(s.codegenNode),l++;continue}}else{const e=s.codegenNode;if(13===e.type){const n=uu(e);if((!n||512===n||1===n)&&ru(s,t)>=2){const n=cu(s);n&&(e.props=t.hoist(n))}e.dynamicProps&&(e.dynamicProps=t.hoist(e.dynamicProps))}}}else 12===s.type&&lu(s.content,t)>=2&&(s.codegenNode=t.hoist(s.codegenNode),l++);if(1===s.type){const e=1===s.tagType;e&&t.scopes.vSlot++,su(s,t),e&&t.scopes.vSlot--}else if(11===s.type)su(s,t,1===s.children.length);else if(9===s.type)for(let e=0;e<s.branches.length;e++)su(s.branches[e],t,1===s.branches[e].children.length)}l&&t.transformHoist&&t.transformHoist(a,t,e),l&&l===s&&1===e.type&&0===e.tagType&&e.codegenNode&&13===e.codegenNode.type&&ue(e.codegenNode.children)&&(e.codegenNode.children=t.hoist(Zr(e.codegenNode.children)))}function lu(e,t){const{constantCache:n}=t;switch(e.type){case 1:if(0!==e.tagType)return 0;const a=n.get(e);if(void 0!==a)return a;const s=e.codegenNode;if(13!==s.type)return 0;if(s.isBlock&&"svg"!==e.tag&&"foreignObject"!==e.tag)return 0;if(uu(s))return n.set(e,0),0;{let a=3;const l=ru(e,t);if(0===l)return n.set(e,0),0;l<a&&(a=l);for(let s=0;s<e.children.length;s++){const l=lu(e.children[s],t);if(0===l)return n.set(e,0),0;l<a&&(a=l)}if(a>1)for(let s=0;s<e.props.length;s++){const l=e.props[s];if(7===l.type&&"bind"===l.name&&l.exp){const s=lu(l.exp,t);if(0===s)return n.set(e,0),0;s<a&&(a=s)}}if(s.isBlock){for(let t=0;t<e.props.length;t++)if(7===e.props[t].type)return n.set(e,0),0;t.removeHelper(fr),t.removeHelper(Sc(t.inSSR,s.isComponent)),s.isBlock=!1,t.helper($c(t.inSSR,s.isComponent))}return n.set(e,a),a}case 2:case 3:return 3;case 9:case 11:case 10:default:return 0;case 5:case 12:return lu(e.content,t);case 4:return e.constType;case 8:let l=3;for(let n=0;n<e.children.length;n++){const a=e.children[n];if(he(a)||me(a))continue;const s=lu(a,t);if(0===s)return 0;s<l&&(l=s)}return l}}const iu=new Set([Mr,Ir,Or,Ur]);function ou(e,t){if(14===e.type&&!he(e.callee)&&iu.has(e.callee)){const n=e.arguments[0];if(4===n.type)return lu(n,t);if(14===n.type)return ou(n,t)}return 0}function ru(e,t){let n=3;const a=cu(e);if(a&&15===a.type){const{properties:e}=a;for(let a=0;a<e.length;a++){const{key:s,value:l}=e[a],i=lu(s,t);if(0===i)return i;let o;if(i<n&&(n=i),o=4===l.type?lu(l,t):14===l.type?ou(l,t):0,0===o)return o;o<n&&(n=o)}}return n}function cu(e){const t=e.codegenNode;if(13===t.type)return t.props}function uu(e){const t=e.patchFlag;return t?parseInt(t,10):void 0}function du(e,t){const n=function(e,{filename:t="",prefixIdentifiers:n=!1,hoistStatic:a=!1,cacheHandlers:s=!1,nodeTransforms:l=[],directiveTransforms:i={},transformHoist:o=null,isBuiltInComponent:r=te,isCustomElement:c=te,expressionPlugins:u=[],scopeId:d=null,slotted:p=!0,ssr:_=!1,inSSR:f=!1,ssrCssVars:h="",bindingMetadata:m=Q,inline:g=!1,isTS:v=!1,onError:b=ir,onWarn:y=or,compatConfig:w}){const x=t.replace(/\?.*$/,"").match(/([^/\\]+)\.\w+$/),k={selfName:x&&Ee(Ne(x[1])),prefixIdentifiers:n,hoistStatic:a,cacheHandlers:s,nodeTransforms:l,directiveTransforms:i,transformHoist:o,isBuiltInComponent:r,isCustomElement:c,expressionPlugins:u,scopeId:d,slotted:p,ssr:_,inSSR:f,ssrCssVars:h,bindingMetadata:m,inline:g,isTS:v,onError:b,onWarn:y,compatConfig:w,root:e,helpers:new Map,components:new Set,directives:new Set,hoists:[],imports:[],constantCache:new Map,temps:0,cached:0,identifiers:Object.create(null),scopes:{vFor:0,vSlot:0,vPre:0,vOnce:0},parent:null,currentNode:e,childIndex:0,inVOnce:!1,helper(e){const t=k.helpers.get(e)||0;return k.helpers.set(e,t+1),e},removeHelper(e){const t=k.helpers.get(e);if(t){const n=t-1;n?k.helpers.set(e,n):k.helpers.delete(e)}},helperString:e=>`_${Wr[k.helper(e)]}`,replaceNode(e){k.parent.children[k.childIndex]=k.currentNode=e},removeNode(e){const t=e?k.parent.children.indexOf(e):k.currentNode?k.childIndex:-1;e&&e!==k.currentNode?k.childIndex>t&&(k.childIndex--,k.onNodeRemoved()):(k.currentNode=null,k.onNodeRemoved()),k.parent.children.splice(t,1)},onNodeRemoved:()=>{},addIdentifiers(e){},removeIdentifiers(e){},hoist(e){he(e)&&(e=ec(e)),k.hoists.push(e);const t=ec(`_hoisted_${k.hoists.length}`,!1,e.loc,2);return t.hoisted=e,t},cache:(e,t=!1)=>function(e,t,n=!1){return{type:20,index:e,value:t,isVNode:n,loc:Jr}}(k.cached++,e,t)};return k}(e,t);pu(e,n),t.hoistStatic&&nu(e,n),t.ssr||function(e,t){const{helper:n}=t,{children:a}=e;if(1===a.length){const n=a[0];if(au(e,n)&&n.codegenNode){const a=n.codegenNode;13===a.type&&Ec(a,t),e.codegenNode=a}else e.codegenNode=n}else if(a.length>1){let a=64;e.codegenNode=Yr(t,n(cr),void 0,e.children,a+"",void 0,void 0,!0,void 0,!1)}}(e,n),e.helpers=[...n.helpers.keys()],e.components=[...n.components],e.directives=[...n.directives],e.imports=n.imports,e.hoists=n.hoists,e.temps=n.temps,e.cached=n.cached}function pu(e,t){t.currentNode=e;const{nodeTransforms:n}=t,a=[];for(let s=0;s<n.length;s++){const l=n[s](e,t);if(l&&(ue(l)?a.push(...l):a.push(l)),!t.currentNode)return;e=t.currentNode}switch(e.type){case 3:t.ssr||t.helper(br);break;case 5:t.ssr||t.helper(Er);break;case 9:for(let n=0;n<e.branches.length;n++)pu(e.branches[n],t);break;case 10:case 11:case 1:case 0:!function(e,t){let n=0;const a=()=>{n--};for(;n<e.children.length;n++){const s=e.children[n];he(s)||(t.parent=e,t.childIndex=n,t.onNodeRemoved=a,pu(s,t))}}(e,t)}t.currentNode=e;let s=a.length;for(;s--;)a[s]()}function _u(e,t){const n=he(e)?t=>t===e:t=>e.test(t);return(e,a)=>{if(1===e.type){const{props:s}=e;if(3===e.tagType&&s.some(wc))return;const l=[];for(let i=0;i<s.length;i++){const o=s[i];if(7===o.type&&n(o.name)){s.splice(i,1),i--;const n=t(e,o,a);n&&l.push(n)}}return l}}}const fu=e=>`${Wr[e]}: _${Wr[e]}`;function hu(e,t,{helper:n,push:a,newline:s,isTS:l}){const i=n("component"===t?xr:$r);for(let n=0;n<e.length;n++){let o=e[n];const r=o.endsWith("__self");r&&(o=o.slice(0,-6)),a(`const ${Tc(o,t)} = ${i}(${JSON.stringify(o)}${r?", true":""})${l?"!":""}`),n<e.length-1&&s()}}function mu(e,t){const n=e.length>3||!1;t.push("["),n&&t.indent(),gu(e,t,n),n&&t.deindent(),t.push("]")}function gu(e,t,n=!1,a=!0){const{push:s,newline:l}=t;for(let i=0;i<e.length;i++){const o=e[i];he(o)?s(o):ue(o)?mu(o,t):vu(o,t),i<e.length-1&&(n?(a&&s(","),l()):a&&s(", "))}}function vu(e,t){if(he(e))t.push(e);else if(me(e))t.push(t.helper(e));else switch(e.type){case 1:case 9:case 11:case 12:vu(e.codegenNode,t);break;case 2:!function(e,t){t.push(JSON.stringify(e.content),e)}(e,t);break;case 4:bu(e,t);break;case 5:!function(e,t){const{push:n,helper:a,pure:s}=t;s&&n("/*#__PURE__*/"),n(`${a(Er)}(`),vu(e.content,t),n(")")}(e,t);break;case 8:yu(e,t);break;case 3:!function(e,t){const{push:n,helper:a,pure:s}=t;s&&n("/*#__PURE__*/"),n(`${a(br)}(${JSON.stringify(e.content)})`,e)}(e,t);break;case 13:!function(e,t){const{push:n,helper:a,pure:s}=t,{tag:l,props:i,children:o,patchFlag:r,dynamicProps:c,directives:u,isBlock:d,disableTracking:p,isComponent:_}=e;u&&n(a(Cr)+"("),d&&n(`(${a(fr)}(${p?"true":""}), `),s&&n("/*#__PURE__*/");n(a(d?Sc(t.inSSR,_):$c(t.inSSR,_))+"(",e),gu(function(e){let t=e.length;for(;t--&&null==e[t];);return e.slice(0,t+1).map((e=>e||"null"))}([l,i,o,r,c]),t),n(")"),d&&n(")"),u&&(n(", "),vu(u,t),n(")"))}(e,t);break;case 14:!function(e,t){const{push:n,helper:a,pure:s}=t,l=he(e.callee)?e.callee:a(e.callee);s&&n("/*#__PURE__*/"),n(l+"(",e),gu(e.arguments,t),n(")")}(e,t);break;case 15:!function(e,t){const{push:n,indent:a,deindent:s,newline:l}=t,{properties:i}=e;if(!i.length)return void n("{}",e);const o=i.length>1||!1;n(o?"{":"{ "),o&&a();for(let e=0;e<i.length;e++){const{key:a,value:s}=i[e];wu(a,t),n(": "),vu(s,t),e<i.length-1&&(n(","),l())}o&&s(),n(o?"}":" }")}(e,t);break;case 17:!function(e,t){mu(e.elements,t)}(e,t);break;case 18:!function(e,t){const{push:n,indent:a,deindent:s}=t,{params:l,returns:i,body:o,newline:r,isSlot:c}=e;c&&n(`_${Wr[Br]}(`),n("(",e),ue(l)?gu(l,t):l&&vu(l,t),n(") => "),(r||o)&&(n("{"),a()),i?(r&&n("return "),ue(i)?mu(i,t):vu(i,t)):o&&vu(o,t),(r||o)&&(s(),n("}")),c&&n(")")}(e,t);break;case 19:!function(e,t){const{test:n,consequent:a,alternate:s,newline:l}=e,{push:i,indent:o,deindent:r,newline:c}=t;if(4===n.type){const e=!cc(n.content);e&&i("("),bu(n,t),e&&i(")")}else i("("),vu(n,t),i(")");l&&o(),t.indentLevel++,l||i(" "),i("? "),vu(a,t),t.indentLevel--,l&&c(),l||i(" "),i(": ");const u=19===s.type;u||t.indentLevel++,vu(s,t),u||t.indentLevel--,l&&r(!0)}(e,t);break;case 20:!function(e,t){const{push:n,helper:a,indent:s,deindent:l,newline:i}=t;n(`_cache[${e.index}] || (`),e.isVNode&&(s(),n(`${a(Lr)}(-1),`),i()),n(`_cache[${e.index}] = `),vu(e.value,t),e.isVNode&&(n(","),i(),n(`${a(Lr)}(1),`),i(),n(`_cache[${e.index}]`),l()),n(")")}(e,t);break;case 21:gu(e.body,t,!0,!1)}}function bu(e,t){const{content:n,isStatic:a}=e;t.push(a?JSON.stringify(n):n,e)}function yu(e,t){for(let n=0;n<e.children.length;n++){const a=e.children[n];he(a)?t.push(a):vu(a,t)}}function wu(e,t){const{push:n}=t;8===e.type?(n("["),yu(e,t),n("]")):e.isStatic?n(cc(e.content)?e.content:JSON.stringify(e.content),e):n(`[${e.content}]`,e)}const xu=_u(/^(if|else|else-if)$/,((e,t,n)=>function(e,t,n,a){if("else"===t.name||t.exp&&t.exp.content.trim()||(t.exp=ec("true",!1,t.exp?t.exp.loc:e.loc)),"if"===t.name){const s=ku(e,t),l={type:9,loc:e.loc,branches:[s]};if(n.replaceNode(l),a)return a(l,s,!0)}else{const s=n.parent.children;let l=s.indexOf(e);for(;l-- >=-1;){const i=s[l];if(!i||2!==i.type||i.content.trim().length){if(i&&9===i.type){n.removeNode();const s=ku(e,t);i.branches.push(s);const l=a&&a(i,s,!1);pu(s,n),l&&l(),n.currentNode=null}break}n.removeNode(i)}}}(e,t,n,((e,t,a)=>{const s=n.parent.children;let l=s.indexOf(e),i=0;for(;l-- >=0;){const e=s[l];e&&9===e.type&&(i+=e.branches.length)}return()=>{if(a)e.codegenNode=$u(t,i,n);else{const a=function(e){for(;;)if(19===e.type){if(19!==e.alternate.type)return e;e=e.alternate}else 20===e.type&&(e=e.value)}(e.codegenNode);a.alternate=$u(t,i+e.branches.length-1,n)}}}))));function ku(e,t){const n=3===e.tagType;return{type:10,loc:e.loc,condition:"else"===t.name?void 0:t.exp,children:n&&!gc(e,"for")?e.children:[e],userKey:vc(e,"key"),isTemplateIf:n}}function $u(e,t,n){return e.condition?sc(e.condition,Su(e,t,n),nc(n.helper(br),['""',"true"])):Su(e,t,n)}function Su(e,t,n){const{helper:a}=n,s=Qr("key",ec(`${t}`,!1,Jr,2)),{children:l}=e,i=l[0];if(1!==l.length||1!==i.type){if(1===l.length&&11===i.type){const e=i.codegenNode;return Ac(e,s,n),e}{let t=64;return Yr(n,a(cr),Xr([s]),l,t+"",void 0,void 0,!0,!1,!1,e.loc)}}{const e=i.codegenNode,t=14===(o=e).type&&o.callee===Gr?o.arguments[1].returns:o;return 13===t.type&&Ec(t,n),Ac(t,s,n),e}var o}const Cu=_u("for",((e,t,n)=>{const{helper:a,removeHelper:s}=n;return function(e,t,n,a){if(!t.exp)return;const s=Eu(t.exp);if(!s)return;const{scopes:l}=n,{source:i,value:o,key:r,index:c}=s,u={type:11,loc:t.loc,source:i,valueAlias:o,keyAlias:r,objectIndexAlias:c,parseResult:s,children:xc(e)?e.children:[e]};n.replaceNode(u),l.vFor++;const d=a&&a(u);return()=>{l.vFor--,d&&d()}}(e,t,n,(t=>{const l=nc(a(Nr),[t.source]),i=xc(e),o=gc(e,"memo"),r=vc(e,"key"),c=r&&(6===r.type?ec(r.value.content,!0):r.exp),u=r?Qr("key",c):null,d=4===t.source.type&&t.source.constType>0,p=d?64:r?128:256;return t.codegenNode=Yr(n,a(cr),void 0,l,p+"",void 0,void 0,!0,!d,!1,e.loc),()=>{let r;const{children:p}=t,_=1!==p.length||1!==p[0].type,f=kc(e)?e:i&&1===e.children.length&&kc(e.children[0])?e.children[0]:null;if(f?(r=f.codegenNode,i&&u&&Ac(r,u,n)):_?r=Yr(n,a(cr),u?Xr([u]):void 0,e.children,"64",void 0,void 0,!0,void 0,!1):(r=p[0].codegenNode,i&&u&&Ac(r,u,n),r.isBlock!==!d&&(r.isBlock?(s(fr),s(Sc(n.inSSR,r.isComponent))):s($c(n.inSSR,r.isComponent))),r.isBlock=!d,r.isBlock?(a(fr),a(Sc(n.inSSR,r.isComponent))):a($c(n.inSSR,r.isComponent))),o){const e=ac(Mu(t.parseResult,[ec("_cached")]));e.body={type:21,body:[tc(["const _memo = (",o.exp,")"]),tc(["if (_cached",...c?[" && _cached.key === ",c]:[],` && ${n.helperString(Kr)}(_cached, _memo)) return _cached`]),tc(["const _item = ",r]),ec("_item.memo = _memo"),ec("return _item")],loc:Jr},l.arguments.push(e,ec("_cache"),ec(String(n.cached++)))}else l.arguments.push(ac(Mu(t.parseResult),r,!0))}}))})),Nu=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,Au=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,Tu=/^\(|\)$/g;function Eu(e,t){const n=e.loc,a=e.content,s=a.match(Nu);if(!s)return;const[,l,i]=s,o={source:Pu(n,i.trim(),a.indexOf(i,l.length)),value:void 0,key:void 0,index:void 0};let r=l.trim().replace(Tu,"").trim();const c=l.indexOf(r),u=r.match(Au);if(u){r=r.replace(Au,"").trim();const e=u[1].trim();let t;if(e&&(t=a.indexOf(e,c+r.length),o.key=Pu(n,e,t)),u[2]){const s=u[2].trim();s&&(o.index=Pu(n,s,a.indexOf(s,o.key?t+e.length:c+r.length)))}}return r&&(o.value=Pu(n,r,c)),o}function Pu(e,t,n){return ec(t,!1,fc(e,n,t.length))}function Mu({value:e,key:t,index:n},a=[]){return function(e){let t=e.length;for(;t--&&!e[t];);return e.slice(0,t+1).map(((e,t)=>e||ec("_".repeat(t+1),!1)))}([e,t,n,...a])}const Iu=ec("undefined",!1),Ou=(e,t)=>{if(1===e.type&&(1===e.tagType||3===e.tagType)){if(gc(e,"slot"))return t.scopes.vSlot++,()=>{t.scopes.vSlot--}}},Uu=(e,t,n)=>ac(e,t,!1,!0,t.length?t[0].loc:n);function Fu(e,t,n=Uu){t.helper(Br);const{children:a,loc:s}=e,l=[],i=[];let o=t.scopes.vSlot>0||t.scopes.vFor>0;const r=gc(e,"slot",!0);if(r){const{arg:e,exp:t}=r;e&&!lc(e)&&(o=!0),l.push(Qr(e||ec("default",!0),n(t,a,s)))}let c=!1,u=!1;const d=[],p=new Set;for(let e=0;e<a.length;e++){const s=a[e];let _;if(!xc(s)||!(_=gc(s,"slot",!0))){3!==s.type&&d.push(s);continue}if(r)break;c=!0;const{children:f,loc:h}=s,{arg:m=ec("default",!0),exp:g}=_;let v;lc(m)?v=m?m.content:"default":o=!0;const b=n(g,f,h);let y,w,x;if(y=gc(s,"if"))o=!0,i.push(sc(y.exp,Ru(m,b),Iu));else if(w=gc(s,/^else(-if)?$/,!0)){let t,n=e;for(;n--&&(t=a[n],3===t.type););if(t&&xc(t)&&gc(t,"if")){a.splice(e,1),e--;let t=i[i.length-1];for(;19===t.alternate.type;)t=t.alternate;t.alternate=w.exp?sc(w.exp,Ru(m,b),Iu):Ru(m,b)}}else if(x=gc(s,"for")){o=!0;const e=x.parseResult||Eu(x.exp);e&&i.push(nc(t.helper(Nr),[e.source,ac(Mu(e),Ru(m,b),!0)]))}else{if(v){if(p.has(v))continue;p.add(v),"default"===v&&(u=!0)}l.push(Qr(m,b))}}if(!r){const e=(e,t)=>Qr("default",n(e,t,s));c?d.length&&d.some((e=>ju(e)))&&(u||l.push(e(void 0,d))):l.push(e(void 0,a))}const _=o?2:Du(e.children)?3:1;let f=Xr(l.concat(Qr("_",ec(_+"",!1))),s);return i.length&&(f=nc(t.helper(Tr),[f,Zr(i)])),{slots:f,hasDynamicSlots:o}}function Ru(e,t){return Xr([Qr("name",e),Qr("fn",t)])}function Du(e){for(let t=0;t<e.length;t++){const n=e[t];switch(n.type){case 1:if(2===n.tagType||Du(n.children))return!0;break;case 9:if(Du(n.branches))return!0;break;case 10:case 11:if(Du(n.children))return!0}}return!1}function ju(e){return 2!==e.type&&12!==e.type||(2===e.type?!!e.content.trim():ju(e.content))}const Lu=new WeakMap,Vu=(e,t)=>function(){if(1!==(e=t.currentNode).type||0!==e.tagType&&1!==e.tagType)return;const{tag:n,props:a}=e,s=1===e.tagType;let l=s?function(e,t,n=!1){let{tag:a}=e;const s=Hu(a),l=vc(e,"is");if(l)if(s){const e=6===l.type?l.value&&ec(l.value.content,!0):l.exp;if(e)return nc(t.helper(kr),[e])}else 6===l.type&&l.value.content.startsWith("vue:")&&(a=l.value.content.slice(4));const i=!s&&gc(e,"is");if(i&&i.exp)return nc(t.helper(kr),[i.exp]);const o=oc(a)||t.isBuiltInComponent(a);return o?(n||t.helper(o),o):(t.helper(xr),t.components.add(a),Tc(a,"component"))}(e,t):`"${n}"`;const i=ge(l)&&l.callee===kr;let o,r,c,u,d,p,_=0,f=i||l===ur||l===dr||!s&&("svg"===n||"foreignObject"===n);if(a.length>0){const n=zu(e,t,void 0,s,i);o=n.props,_=n.patchFlag,d=n.dynamicPropNames;const a=n.directives;p=a&&a.length?Zr(a.map((e=>function(e,t){const n=[],a=Lu.get(e);a?n.push(t.helperString(a)):(t.helper($r),t.directives.add(e.name),n.push(Tc(e.name,"directive")));const{loc:s}=e;if(e.exp&&n.push(e.exp),e.arg&&(e.exp||n.push("void 0"),n.push(e.arg)),Object.keys(e.modifiers).length){e.arg||(e.exp||n.push("void 0"),n.push("void 0"));const t=ec("true",!1,s);n.push(Xr(e.modifiers.map((e=>Qr(e,t))),s))}return Zr(n,e.loc)}(e,t)))):void 0,n.shouldUseBlock&&(f=!0)}if(e.children.length>0)if(l===pr&&(f=!0,_|=1024),s&&l!==ur&&l!==pr){const{slots:n,hasDynamicSlots:a}=Fu(e,t);r=n,a&&(_|=1024)}else if(1===e.children.length&&l!==ur){const n=e.children[0],a=n.type,s=5===a||8===a;s&&0===lu(n,t)&&(_|=1),r=s||2===a?n:e.children}else r=e.children;0!==_&&(c=String(_),d&&d.length&&(u=function(e){let t="[";for(let n=0,a=e.length;n<a;n++)t+=JSON.stringify(e[n]),n<a-1&&(t+=", ");return t+"]"}(d))),e.codegenNode=Yr(t,l,o,r,c,u,p,!!f,!1,s,e.loc)};function zu(e,t,n=e.props,a,s,l=!1){const{tag:i,loc:o,children:r}=e;let c=[];const u=[],d=[],p=r.length>0;let _=!1,f=0,h=!1,m=!1,g=!1,v=!1,b=!1,y=!1;const w=[],x=({key:e,value:n})=>{if(lc(e)){const l=e.content,i=se(l);if(!i||a&&!s||"onclick"===l.toLowerCase()||"onUpdate:modelValue"===l||ke(l)||(v=!0),i&&ke(l)&&(y=!0),20===n.type||(4===n.type||8===n.type)&&lu(n,t)>0)return;"ref"===l?h=!0:"class"===l?m=!0:"style"===l?g=!0:"key"===l||w.includes(l)||w.push(l),!a||"class"!==l&&"style"!==l||w.includes(l)||w.push(l)}else b=!0};for(let a=0;a<n.length;a++){const s=n[a];if(6===s.type){const{loc:e,name:n,value:a}=s;let l=!0;if("ref"===n&&(h=!0,t.scopes.vFor>0&&c.push(Qr(ec("ref_for",!0),ec("true")))),"is"===n&&(Hu(i)||a&&a.content.startsWith("vue:")))continue;c.push(Qr(ec(n,!0,fc(e,0,n.length)),ec(a?a.content:"",l,a?a.loc:e)))}else{const{name:n,arg:a,exp:r,loc:f}=s,h="bind"===n,m="on"===n;if("slot"===n)continue;if("once"===n||"memo"===n)continue;if("is"===n||h&&bc(a,"is")&&Hu(i))continue;if(m&&l)continue;if((h&&bc(a,"key")||m&&p&&bc(a,"vue:before-update"))&&(_=!0),h&&bc(a,"ref")&&t.scopes.vFor>0&&c.push(Qr(ec("ref_for",!0),ec("true"))),!a&&(h||m)){b=!0,r&&(c.length&&(u.push(Xr(Bu(c),o)),c=[]),u.push(h?r:{type:14,loc:f,callee:t.helper(Fr),arguments:[r]}));continue}const g=t.directiveTransforms[n];if(g){const{props:n,needRuntime:a}=g(s,e,t);!l&&n.forEach(x),c.push(...n),a&&(d.push(s),me(a)&&Lu.set(s,a))}else $e(n)||(d.push(s),p&&(_=!0))}}let k;if(u.length?(c.length&&u.push(Xr(Bu(c),o)),k=u.length>1?nc(t.helper(Pr),u,o):u[0]):c.length&&(k=Xr(Bu(c),o)),b?f|=16:(m&&!a&&(f|=2),g&&!a&&(f|=4),w.length&&(f|=8),v&&(f|=32)),_||0!==f&&32!==f||!(h||y||d.length>0)||(f|=512),!t.inSSR&&k)switch(k.type){case 15:let e=-1,n=-1,a=!1;for(let t=0;t<k.properties.length;t++){const s=k.properties[t].key;lc(s)?"class"===s.content?e=t:"style"===s.content&&(n=t):s.isHandlerKey||(a=!0)}const s=k.properties[e],l=k.properties[n];a?k=nc(t.helper(Or),[k]):(s&&!lc(s.value)&&(s.value=nc(t.helper(Mr),[s.value])),l&&(g||4===l.value.type&&"["===l.value.content.trim()[0]||17===l.value.type)&&(l.value=nc(t.helper(Ir),[l.value])));break;case 14:break;default:k=nc(t.helper(Or),[nc(t.helper(Ur),[k])])}return{props:k,directives:d,patchFlag:f,dynamicPropNames:w,shouldUseBlock:_}}function Bu(e){const t=new Map,n=[];for(let a=0;a<e.length;a++){const s=e[a];if(8===s.key.type||!s.key.isStatic){n.push(s);continue}const l=s.key.content,i=t.get(l);i?("style"===l||"class"===l||se(l))&&qu(i,s):(t.set(l,s),n.push(s))}return n}function qu(e,t){17===e.value.type?e.value.elements.push(t.value):e.value=Zr([e.value,t.value],e.loc)}function Hu(e){return"component"===e||"Component"===e}const Gu=(e,t)=>{if(kc(e)){const{children:n,loc:a}=e,{slotName:s,slotProps:l}=function(e,t){let n,a='"default"';const s=[];for(let t=0;t<e.props.length;t++){const n=e.props[t];6===n.type?n.value&&("name"===n.name?a=JSON.stringify(n.value.content):(n.name=Ne(n.name),s.push(n))):"bind"===n.name&&bc(n.arg,"name")?n.exp&&(a=n.exp):("bind"===n.name&&n.arg&&lc(n.arg)&&(n.arg.content=Ne(n.arg.content)),s.push(n))}if(s.length>0){const{props:a,directives:l}=zu(e,t,s,!1,!1);n=a}return{slotName:a,slotProps:n}}(e,t),i=[t.prefixIdentifiers?"_ctx.$slots":"$slots",s,"{}","undefined","true"];let o=2;l&&(i[2]=l,o=3),n.length&&(i[3]=ac([],n,!1,!1,a),o=4),t.scopeId&&!t.slotted&&(o=5),i.splice(o),e.codegenNode=nc(t.helper(Ar),i,a)}},Ku=/^\s*([\w$_]+|(async\s*)?\([^)]*?\))\s*=>|^\s*(async\s+)?function(?:\s+[\w$]+)?\s*\(/,Wu=(e,t,n,a)=>{const{loc:s,modifiers:l,arg:i}=e;let o;if(4===i.type)if(i.isStatic){let e=i.content;e.startsWith("vue:")&&(e=`vnode-${e.slice(4)}`),o=ec(Pe(Ne(e)),!0,i.loc)}else o=tc([`${n.helperString(jr)}(`,i,")"]);else o=i,o.children.unshift(`${n.helperString(jr)}(`),o.children.push(")");let r=e.exp;r&&!r.content.trim()&&(r=void 0);let c=n.cacheHandlers&&!r&&!n.inVOnce;if(r){const e=_c(r.content),t=!(e||Ku.test(r.content)),n=r.content.includes(";");(t||c&&e)&&(r=tc([`${t?"$event":"(...args)"} => ${n?"{":"("}`,r,n?"}":")"]))}let u={props:[Qr(o,r||ec("() => {}",!1,s))]};return a&&(u=a(u)),c&&(u.props[0].value=n.cache(u.props[0].value)),u.props.forEach((e=>e.key.isHandlerKey=!0)),u},Ju=(e,t,n)=>{const{exp:a,modifiers:s,loc:l}=e,i=e.arg;return 4!==i.type?(i.children.unshift("("),i.children.push(') || ""')):i.isStatic||(i.content=`${i.content} || ""`),s.includes("camel")&&(4===i.type?i.content=i.isStatic?Ne(i.content):`${n.helperString(Rr)}(${i.content})`:(i.children.unshift(`${n.helperString(Rr)}(`),i.children.push(")"))),n.inSSR||(s.includes("prop")&&Yu(i,"."),s.includes("attr")&&Yu(i,"^")),!a||4===a.type&&!a.content.trim()?{props:[Qr(i,ec("",!0,l))]}:{props:[Qr(i,a)]}},Yu=(e,t)=>{4===e.type?e.content=e.isStatic?t+e.content:`\`${t}\${${e.content}}\``:(e.children.unshift(`'${t}' + (`),e.children.push(")"))},Zu=(e,t)=>{if(0===e.type||1===e.type||11===e.type||10===e.type)return()=>{const n=e.children;let a,s=!1;for(let e=0;e<n.length;e++){const t=n[e];if(yc(t)){s=!0;for(let s=e+1;s<n.length;s++){const l=n[s];if(!yc(l)){a=void 0;break}a||(a=n[e]=tc([t],t.loc)),a.children.push(" + ",l),n.splice(s,1),s--}}}if(s&&(1!==n.length||0!==e.type&&(1!==e.type||0!==e.tagType||e.props.find((e=>7===e.type&&!t.directiveTransforms[e.name])))))for(let e=0;e<n.length;e++){const a=n[e];if(yc(a)||8===a.type){const s=[];2===a.type&&" "===a.content||s.push(a),t.ssr||0!==lu(a,t)||s.push("1"),n[e]={type:12,content:a,loc:a.loc,codegenNode:nc(t.helper(yr),s)}}}}},Xu=new WeakSet,Qu=(e,t)=>{if(1===e.type&&gc(e,"once",!0)){if(Xu.has(e)||t.inVOnce)return;return Xu.add(e),t.inVOnce=!0,t.helper(Lr),()=>{t.inVOnce=!1;const e=t.currentNode;e.codegenNode&&(e.codegenNode=t.cache(e.codegenNode,!0))}}},ed=(e,t,n)=>{const{exp:a,arg:s}=e;if(!a)return td();const l=a.loc.source,i=4===a.type?a.content:l;if(!i.trim()||!_c(i))return td();const o=s||ec("modelValue",!0),r=s?lc(s)?`onUpdate:${s.content}`:tc(['"onUpdate:" + ',s]):"onUpdate:modelValue";let c;c=tc([(n.isTS?"($event: any)":"$event")+" => ((",a,") = $event)"]);const u=[Qr(o,e.exp),Qr(r,c)];if(e.modifiers.length&&1===t.tagType){const t=e.modifiers.map((e=>(cc(e)?e:JSON.stringify(e))+": true")).join(", "),n=s?lc(s)?`${s.content}Modifiers`:tc([s,' + "Modifiers"']):"modelModifiers";u.push(Qr(n,ec(`{ ${t} }`,!1,e.loc,2)))}return td(u)};function td(e=[]){return{props:e}}const nd=new WeakSet,ad=(e,t)=>{if(1===e.type){const n=gc(e,"memo");if(!n||nd.has(e))return;return nd.add(e),()=>{const a=e.codegenNode||t.currentNode.codegenNode;a&&13===a.type&&(1!==e.tagType&&Ec(a,t),e.codegenNode=nc(t.helper(Gr),[n.exp,ac(void 0,a),"_cache",String(t.cached++)]))}}};function sd(e,t={}){const n=t.onError||ir,a="module"===t.mode;!0===t.prefixIdentifiers?n(rr(46)):a&&n(rr(47)),t.cacheHandlers&&n(rr(48)),t.scopeId&&!a&&n(rr(49));const s=he(e)?function(e,t={}){const n=function(e,t){const n=ie({},Ic);let a;for(a in t)n[a]=void 0===t[a]?Ic[a]:t[a];return{options:n,column:1,line:1,offset:0,originalSource:e,source:e,inPre:!1,inVPre:!1,onWarn:n.onWarn}}(e,t),a=Kc(n);return function(e,t=Jr){return{type:0,children:e,helpers:[],components:[],directives:[],hoists:[],imports:[],cached:0,temps:0,codegenNode:void 0,loc:t}}(Oc(n,0,[]),Wc(n,a))}(e,t):e,[l,i]=[[Qu,xu,ad,Cu,Gu,Vu,Ou,Zu],{on:Wu,bind:Ju,model:ed}];return du(s,ie({},t,{prefixIdentifiers:!1,nodeTransforms:[...l,...t.nodeTransforms||[]],directiveTransforms:ie({},i,t.directiveTransforms||{})})),function(e,t={}){const n=function(e,{mode:t="function",prefixIdentifiers:n="module"===t,sourceMap:a=!1,filename:s="template.vue.html",scopeId:l=null,optimizeImports:i=!1,runtimeGlobalName:o="Vue",runtimeModuleName:r="vue",ssrRuntimeModuleName:c="vue/server-renderer",ssr:u=!1,isTS:d=!1,inSSR:p=!1}){const _={mode:t,prefixIdentifiers:n,sourceMap:a,filename:s,scopeId:l,optimizeImports:i,runtimeGlobalName:o,runtimeModuleName:r,ssrRuntimeModuleName:c,ssr:u,isTS:d,inSSR:p,source:e.loc.source,code:"",column:1,line:1,offset:0,indentLevel:0,pure:!1,map:void 0,helper:e=>`_${Wr[e]}`,push(e,t){_.code+=e},indent(){f(++_.indentLevel)},deindent(e=!1){e?--_.indentLevel:f(--_.indentLevel)},newline(){f(_.indentLevel)}};function f(e){_.push("\n"+"  ".repeat(e))}return _}(e,t);t.onContextCreated&&t.onContextCreated(n);const{mode:a,push:s,prefixIdentifiers:l,indent:i,deindent:o,newline:r,ssr:c}=n,u=e.helpers.length>0,d=!l&&"module"!==a;if(function(e,t){const{push:n,newline:a,runtimeGlobalName:s}=t,l=s;e.helpers.length>0&&(n(`const _Vue = ${l}\n`),e.hoists.length)&&n(`const { ${[gr,vr,br,yr,wr].filter((t=>e.helpers.includes(t))).map(fu).join(", ")} } = _Vue\n`),function(e,t){if(!e.length)return;t.pure=!0;const{push:n,newline:a}=t;a();for(let s=0;s<e.length;s++){const l=e[s];l&&(n(`const _hoisted_${s+1} = `),vu(l,t),a())}t.pure=!1}(e.hoists,t),a(),n("return ")}(e,n),s(`function ${c?"ssrRender":"render"}(${(c?["_ctx","_push","_parent","_attrs"]:["_ctx","_cache"]).join(", ")}) {`),i(),d&&(s("with (_ctx) {"),i(),u&&(s(`const { ${e.helpers.map(fu).join(", ")} } = _Vue`),s("\n"),r())),e.components.length&&(hu(e.components,"component",n),(e.directives.length||e.temps>0)&&r()),e.directives.length&&(hu(e.directives,"directive",n),e.temps>0&&r()),e.temps>0){s("let ");for(let t=0;t<e.temps;t++)s(`${t>0?", ":""}_temp${t}`)}return(e.components.length||e.directives.length||e.temps)&&(s("\n"),r()),c||s("return "),e.codegenNode?vu(e.codegenNode,n):s("null"),d&&(o(),s("}")),o(),s("}"),{ast:e,code:n.code,preamble:"",map:n.map?n.map.toJSON():void 0}}(s,ie({},t,{prefixIdentifiers:!1}))}const ld=Symbol(""),id=Symbol(""),od=Symbol(""),rd=Symbol(""),cd=Symbol(""),ud=Symbol(""),dd=Symbol(""),pd=Symbol(""),_d=Symbol(""),fd=Symbol("");var hd;let md;hd={[ld]:"vModelRadio",[id]:"vModelCheckbox",[od]:"vModelText",[rd]:"vModelSelect",[cd]:"vModelDynamic",[ud]:"withModifiers",[dd]:"withKeys",[pd]:"vShow",[_d]:"Transition",[fd]:"TransitionGroup"},Object.getOwnPropertySymbols(hd).forEach((e=>{Wr[e]=hd[e]}));const gd=F("style,iframe,script,noscript",!0),vd={isVoidTag:W,isNativeTag:e=>G(e)||K(e),isPreTag:e=>"pre"===e,decodeEntities:function(e,t=!1){return md||(md=document.createElement("div")),t?(md.innerHTML=`<div foo="${e.replace(/"/g,"&quot;")}">`,md.children[0].getAttribute("foo")):(md.innerHTML=e,md.textContent)},isBuiltInComponent:e=>ic(e,"Transition")?_d:ic(e,"TransitionGroup")?fd:void 0,getNamespace(e,t){let n=t?t.ns:0;if(t&&2===n)if("annotation-xml"===t.tag){if("svg"===e)return 1;t.props.some((e=>6===e.type&&"encoding"===e.name&&null!=e.value&&("text/html"===e.value.content||"application/xhtml+xml"===e.value.content)))&&(n=0)}else/^m(?:[ions]|text)$/.test(t.tag)&&"mglyph"!==e&&"malignmark"!==e&&(n=0);else t&&1===n&&("foreignObject"!==t.tag&&"desc"!==t.tag&&"title"!==t.tag||(n=0));if(0===n){if("svg"===e)return 1;if("math"===e)return 2}return n},getTextMode({tag:e,ns:t}){if(0===t){if("textarea"===e||"title"===e)return 1;if(gd(e))return 2}return 0}},bd=(e,t)=>{const n=B(e);return ec(JSON.stringify(n),!1,t,3)},yd=F("passive,once,capture"),wd=F("stop,prevent,self,ctrl,shift,alt,meta,exact,middle"),xd=F("left,right"),kd=F("onkeyup,onkeydown,onkeypress",!0),$d=(e,t)=>lc(e)&&"onclick"===e.content.toLowerCase()?ec(t,!0):4!==e.type?tc(["(",e,`) === "onClick" ? "${t}" : (`,e,")"]):e,Sd=(e,t)=>{1!==e.type||0!==e.tagType||"script"!==e.tag&&"style"!==e.tag||t.removeNode()},Cd=[e=>{1===e.type&&e.props.forEach(((t,n)=>{6===t.type&&"style"===t.name&&t.value&&(e.props[n]={type:7,name:"bind",arg:ec("style",!0,t.loc),exp:bd(t.value.content,t.loc),modifiers:[],loc:t.loc})}))}],Nd={cloak:()=>({props:[]}),html:(e,t,n)=>{const{exp:a,loc:s}=e;return t.children.length&&(t.children.length=0),{props:[Qr(ec("innerHTML",!0,s),a||ec("",!0))]}},text:(e,t,n)=>{const{exp:a,loc:s}=e;return t.children.length&&(t.children.length=0),{props:[Qr(ec("textContent",!0),a?lu(a,n)>0?a:nc(n.helperString(Er),[a],s):ec("",!0))]}},model:(e,t,n)=>{const a=ed(e,t,n);if(!a.props.length||1===t.tagType)return a;const{tag:s}=t,l=n.isCustomElement(s);if("input"===s||"textarea"===s||"select"===s||l){let e=od,i=!1;if("input"===s||l){const n=vc(t,"type");if(n){if(7===n.type)e=cd;else if(n.value)switch(n.value.content){case"radio":e=ld;break;case"checkbox":e=id;break;case"file":i=!0}}else(function(e){return e.props.some((e=>!(7!==e.type||"bind"!==e.name||e.arg&&4===e.arg.type&&e.arg.isStatic)))})(t)&&(e=cd)}else"select"===s&&(e=rd);i||(a.needRuntime=n.helper(e))}return a.props=a.props.filter((e=>!(4===e.key.type&&"modelValue"===e.key.content))),a},on:(e,t,n)=>Wu(e,0,n,(t=>{const{modifiers:a}=e;if(!a.length)return t;let{key:s,value:l}=t.props[0];const{keyModifiers:i,nonKeyModifiers:o,eventOptionModifiers:r}=((e,t,n,a)=>{const s=[],l=[],i=[];for(let n=0;n<t.length;n++){const a=t[n];yd(a)?i.push(a):xd(a)?lc(e)?kd(e.content)?s.push(a):l.push(a):(s.push(a),l.push(a)):wd(a)?l.push(a):s.push(a)}return{keyModifiers:s,nonKeyModifiers:l,eventOptionModifiers:i}})(s,a);if(o.includes("right")&&(s=$d(s,"onContextmenu")),o.includes("middle")&&(s=$d(s,"onMouseup")),o.length&&(l=nc(n.helper(ud),[l,JSON.stringify(o)])),!i.length||lc(s)&&!kd(s.content)||(l=nc(n.helper(dd),[l,JSON.stringify(i)])),r.length){const e=r.map(Ee).join("");s=lc(s)?ec(`${s.content}${e}`,!0):tc(["(",s,`) + "${e}"`])}return{props:[Qr(s,l)]}})),show:(e,t,n)=>({props:[],needRuntime:n.helper(pd)})},Ad=Object.create(null);function Td(e,t){if(!he(e)){if(!e.nodeType)return te;e=e.innerHTML}const n=e,a=Ad[n];if(a)return a;if("#"===e[0]){const t=document.querySelector(e);e=t?t.innerHTML:""}const{code:s}=function(e,t={}){return sd(e,ie({},vd,t,{nodeTransforms:[Sd,...Cd,...t.nodeTransforms||[]],directiveTransforms:ie({},Nd,t.directiveTransforms||{}),transformHoist:null}))}(e,ie({hoistStatic:!0,onError:void 0,onWarn:te},t)),l=new Function("Vue",s)(lr);return l._rc=!0,Ad[n]=l}ci(Td);var Ed=Object.freeze({__proto__:null,BaseTransition:ja,Comment:kl,EffectScope:De,Fragment:wl,KeepAlive:Za,ReactiveEffect:Xe,Static:$l,Suspense:ya,Teleport:yl,Text:xl,Transition:lo,TransitionGroup:$o,VueElement:eo,callWithAsyncErrorHandling:Pn,callWithErrorHandling:En,camelize:Ne,capitalize:Ee,cloneVNode:Bl,compatUtils:null,compile:Td,computed:gi,createApp:tr,createBlock:Il,createCommentVNode:Gl,createElementBlock:Ml,createElementVNode:Ll,createHydrationRenderer:pl,createPropsRestProxy:Ci,createRenderer:dl,createSSRApp:nr,createSlots:Cs,createStaticVNode:Hl,createTextVNode:ql,createVNode:Vl,customRef:wn,defineAsyncComponent:Wa,defineComponent:Ga,defineCustomElement:Zi,defineEmits:bi,defineExpose:yi,defineProps:vi,defineSSRCustomElement:Xi,get devtools(){return ta},effect:et,effectScope:je,getCurrentInstance:ti,getCurrentScope:Ve,getTransitionRawChildren:Ha,guardReactiveProps:zl,h:Ai,handleError:Mn,hydrate:er,initCustomFormatter:Pi,initDirectivesForSSR:sr,inject:Na,isMemoSame:Ii,isProxy:an,isReactive:en,isReadonly:tn,isRef:dn,isRuntimeOnly:ui,isShallow:nn,isVNode:Ol,markRaw:ln,mergeDefaults:Si,mergeProps:Yl,nextTick:Gn,normalizeClass:q,normalizeProps:H,normalizeStyle:L,onActivated:Qa,onBeforeMount:os,onBeforeUnmount:ds,onBeforeUpdate:cs,onDeactivated:es,onErrorCaptured:ms,onMounted:rs,onRenderTracked:hs,onRenderTriggered:fs,onScopeDispose:ze,onServerPrefetch:_s,onUnmounted:ps,onUpdated:us,openBlock:Nl,popScopeId:da,provide:Ca,proxyRefs:bn,pushScopeId:ua,queuePostFlushCb:Yn,reactive:Jt,readonly:Zt,ref:pn,registerRuntimeCompiler:ci,render:Qo,renderList:Ss,renderSlot:Ns,resolveComponent:bs,resolveDirective:xs,resolveDynamicComponent:ws,resolveFilter:null,resolveTransitionHooks:Va,setBlockTracking:El,setDevtoolsHook:aa,setTransitionHooks:qa,shallowReactive:Yt,shallowReadonly:Xt,shallowRef:_n,ssrContextKey:Ti,ssrUtils:null,stop:tt,toDisplayString:Z,toHandlerKey:Pe,toHandlers:Ts,toRaw:sn,toRef:$n,toRefs:xn,transformVNodeArgs:Fl,triggerRef:mn,unref:gn,useAttrs:ki,useCssModule:to,useCssVars:no,useSSRContext:Ei,useSlots:xi,useTransitionState:Ra,vModelCheckbox:Mo,vModelDynamic:jo,vModelRadio:Oo,vModelSelect:Uo,vModelText:Po,vShow:Go,version:Oi,warn:Nn,watch:Ma,watchEffect:Aa,watchPostEffect:Ta,watchSyncEffect:Ea,withAsyncContext:Ni,withCtx:_a,withDefaults:wi,withDirectives:gs,withKeys:Ho,withMemo:Mi,withModifiers:Bo,withScopeId:pa}),Pd={components:{},props:{id:String,chart_type:String,register_on_status_change:Boolean,base_url_request:String,get_params_url_request:Function,get_custom_chart_options:Function},emits:["apply","hidden","showed","chart_reloaded","zoom"],created(){},beforeUnmount(){this.chart.destroyChart()},data:()=>({chart:null,chart_options:null,from_zoom:!1}),async mounted(){await this.init(),ntopng_sync.ready(this.$props.id)},methods:{init:async function(){let e=ntopng_status_manager.get_status(),t=this.get_url_request(e);this.register_on_status_change&&this.register_status(e),await this.draw_chart(t)},register_status:function(e){let t=this.get_url_request(e);ntopng_status_manager.on_status_change(this.id,(e=>{1==this.from_zoom&&(this.from_zoom=!1);let n=this.get_url_request(e);n!=t?(t=n,this.update_chart(n)):t=n}),!1)},get_url_request:function(e){let t;return null!=this.get_params_url_request?(null==e&&(e=ntopng_status_manager.get_status()),t=this.get_params_url_request(e)):t=ntopng_url_manager.get_url_params(),`${this.base_url_request}?${t}`},draw_chart:async function(e){let t=ntopChartApex,n=this.chart_type;null==n&&(n=t.typeChart.TS_STACKED),this.chart=t.newChart(n),this.chart.registerEvent("zoomed",((e,t)=>this.on_zoomed(e,t)));let a=await this.get_chart_options(e);this.chart.drawChart(this.$refs.chart,a)},update_chart:async function(e){let t=await this.get_chart_options(e);this.chart.updateChart(t)},get_chart_options:async function(e){let t;return t=null==this.get_custom_chart_options?await ntopng_utility.http_request(e):await this.get_custom_chart_options(e),this.$emit("chart_reloaded",t),t},on_zoomed:function(e,{xaxis:t,yaxis:n}){this.from_zoom=!0;const a=moment(t.min),s=moment(t.max);let l={epoch_begin:Number.parseInt(a.unix()),epoch_end:Number.parseInt(s.unix())};ntopng_events_manager.emit_event(ntopng_events.EPOCH_CHANGE,l,this.id),this.$emit("zoom",l)}}};const Md={style:{width:"100%"},ref:"chart"};Pd.render=function(e,t,n,a,s,l){return Nl(),Ml("div",Md,null,512)},Pd.__file="http_src/vue/chart.vue";const Id=["selected","value","disabled"],Od=["label"],Ud=["selected","value","disabled"];var Fd={__name:"select-search",props:{id:String,options:Array,selected_option:Object,disable_change:Boolean},emits:["update:selected_option","select_option"],setup(e,{expose:t,emit:n}){const a=e,s=pn(null),l=pn([]),i=pn([]),o=pn({});function r(){return null==a.selected_option?a.options[0]:a.selected_option}function c(e){null==e&&(e=r()),o.value=e,null==o.value.value&&(o.value.value=e.label)}function u(e){let t;return null==e&&(e=r()),t=e.value?e.value:e.label,t}Ma((()=>a.selected_option),((e,t)=>{c(e);let n=s.value,a=u(e);$(n).val(a),$(n).trigger("change")}),{flush:"pre"});let d=!0;function p(){!function(){if(l.value=[],i.value=[],null==a.options)return;let e={};a.options.forEach((t=>{let n={...t};0!=n.value&&"0"!=n.value||(n.value=null),null==n.value&&(n.value=n.label),null==t.group?l.value.push(n):(null==e[t.group]&&(e[t.group]={group:n.group,options:[]}),e[t.group].options.push(n))})),i.value=ntopng_utility.object_to_array(e)}(),c()}Ma((()=>a.options),((e,t)=>{1!=a.disable_change&&p()}),{flush:"pre"}),rs((()=>{a.disable_change&&d||p()})),Ma([l,i],((e,t)=>{_()}),{flush:"post"});const _=()=>{let e=s.value;0==d&&f(),$(e).hasClass("select2-hidden-accessible")||($(e).select2({width:"100%",height:"500px",theme:"bootstrap-5",dropdownParent:$(e).parent(),dropdownAutoWidth:!0}),$(e).on("select2:select",(function(e){let t=e.params.data.element._value,s=function(e){null==e&&(e=u());let t=l.value.find((t=>t.value==e));if(null!=t)return t;for(let n=0;n<i.value.length;n+=1)if(t=i.value[n].options.find((t=>t.value==e)),null!=t)return t;return null}(t),o=a.options.find((e=>e.label==s.label));t!=a.selected_option&&(n("update:selected_option",o),n("select_option",o))}))),d=!1};function f(){try{$(s.value).select2("destroy"),$(s.value).off("select2:select")}catch(e){console.error("Destroy select-search catch error:"),console.error(e)}}return t({render:_}),ds((()=>{f()})),(e,t)=>(Nl(),Ml("select",{class:"select2 form-select",ref_key:"select2",ref:s,required:"",name:"filter_type"},[(Nl(!0),Ml(wl,null,Ss(l.value,((e,t)=>(Nl(),Ml("option",{selected:e.value==o.value.value,value:e.value,disabled:e.disabled},Z(e.label),9,Id)))),256)),(Nl(!0),Ml(wl,null,Ss(i.value,((e,t)=>(Nl(),Ml("optgroup",{label:e.group},[(Nl(!0),Ml(wl,null,Ss(e.options,((t,n)=>(Nl(),Ml("option",{selected:e.value==o.value.value,value:t.value,disabled:t.disabled},Z(t.label),9,Ud)))),256))],8,Od)))),256))],512))},__file:"http_src/vue/select-search.vue"},Rd={components:{"select-search":Fd},props:{id:String,enable_refresh:Boolean},watch:{enable_refresh:function(e,t){1==e?this.start_refresh():null!=this.refresh_interval&&(clearInterval(this.refresh_interval),this.refresh_interval=null)}},emits:["epoch_change"],created(){},mounted(){let e=ntopng_url_manager.get_url_entry("epoch_begin"),t=ntopng_url_manager.get_url_entry("epoch_end");null!=e&&null!=t&&ntopng_events_manager.emit_event(ntopng_events.EPOCH_CHANGE,{epoch_begin:Number.parseInt(e),epoch_end:Number.parseInt(t)},this.$props.id);let n=this,a=(e,t)=>flatpickr($(this.$refs[e]),{enableTime:!0,dateFormat:"d/m/Y H:i",time_24hr:!0,clickOpens:!0,onChange:function(e,t,a){n.enable_apply=!0,n.wrong_date=n.flat_begin_date.selectedDates[0].getTime()>n.flat_end_date.selectedDates[0].getTime()}});this.flat_begin_date=a("begin-date"),this.flat_end_date=a("end-date"),ntopng_events_manager.on_event_change(this.$props.id,ntopng_events.EPOCH_CHANGE,(e=>this.on_status_updated(e)),!0),ntopng_sync.ready(this.$props.id),this.enable_refresh&&this.start_refresh()},methods:{start_refresh:function(){this.refresh_interval=setInterval((()=>{let e=this.selected_time_option?.value;this.enable_refresh&&null!=e&&"custom"!=e&&(this.update_from_interval=!0,this.change_select_time())}),this.refresh_interval_seconds)},utc_s_to_server_date:function(e){let t=1e3*e,n=new Date(t).getTimezoneOffset(),a=moment.tz(t,ntop_zoneinfo)._offset;return new Date(t+1e3*(a+n)*60)},server_date_to_date:function(e,t){let n=e.getTime(),a=e.getTimezoneOffset(),s=moment.tz(n,ntop_zoneinfo)._offset;return new Date(n-1e3*(s+a)*60)},on_status_updated:function(e){let t=Date.now(),n=t-18e5;null!=e.epoch_end&&null!=e.epoch_begin&&Number.parseInt(e.epoch_end)>Number.parseInt(e.epoch_begin)?(e.epoch_begin=Number.parseInt(e.epoch_begin),e.epoch_end=Number.parseInt(e.epoch_end),t=1e3*e.epoch_end,n=1e3*e.epoch_begin):(e.epoch_end=this.get_utc_seconds(t),e.epoch_begin=this.get_utc_seconds(n),ntopng_url_manager.add_obj_to_url(e),this.emit_epoch_change(e,this.$props.id)),this.flat_begin_date.setDate(this.utc_s_to_server_date(e.epoch_begin)),this.flat_end_date.setDate(this.utc_s_to_server_date(e.epoch_end)),this.set_select_time_value(n,t),this.epoch_status={epoch_begin:e.epoch_begin,epoch_end:e.epoch_end},0==this.update_from_interval&&this.add_status_in_history(this.epoch_status),this.enable_apply=!1,this.update_from_interval=!1,ntopng_url_manager.add_obj_to_url(this.epoch_status)},set_select_time_value:function(e,t){let n=this.get_select_values();const a=60,s=this.get_utc_seconds(Date.now()),l=this.get_utc_seconds(t),i=this.get_utc_seconds(e);this.is_between(l,s,a)?this.is_between(i,s-n.min_5,a)?this.select_time_value="min_5":this.is_between(i,s-n.min_30,a)?this.select_time_value="min_30":this.is_between(i,s-n.hour,a)?this.select_time_value="hour":this.is_between(i,s-n.day,a)?this.select_time_value="day":this.is_between(i,s-n.week,a)?this.select_time_value="week":this.is_between(i,s-n.month,a)?this.select_time_value="month":this.is_between(i,s-n.year,a)?this.select_time_value="year":this.select_time_value="custom":this.select_time_value="custom",this.time_preset_list.forEach((e=>{e.currently_active=!1,e.value==this.select_time_value&&(this.selected_time_option=e,e.currently_active=!0)}))},apply:function(){let e=this.get_utc_seconds(Date.now()),t=this.server_date_to_date(this.flat_begin_date.selectedDates[0]),n=this.get_utc_seconds(t.getTime()),a=this.server_date_to_date(this.flat_end_date.selectedDates[0]),s=this.get_utc_seconds(a.getTime());s>e&&(s=e);let l={epoch_begin:n,epoch_end:s};this.emit_epoch_change(l)},change_select_time:function(){let e=this.get_select_values()[this.selected_time_option.value],t=this.get_utc_seconds(Date.now()),n={epoch_begin:t-e,epoch_end:t};this.emit_epoch_change(n)},get_select_values:function(){return{min_5:300,min_30:1800,hour:3600,day:this.get_last_day_seconds(),week:this.get_last_week_seconds(),month:this.get_last_month_seconds(),year:this.get_last_year_seconds()}},get_utc_seconds:function(e){return Number.parseInt(e/1e3)},is_between:function(e,t,n){return e>=t-n&&e<=t},get_last_day_seconds:function(){let e=new Date;return this.get_utc_seconds(Date.now()-e.setDate(e.getDate()-1))},get_last_week_seconds:function(){let e=new Date;return this.get_utc_seconds(Date.now()-e.setDate(e.getDate()-7))},get_last_month_seconds:function(){let e=new Date;return this.get_utc_seconds(Date.now()-e.setMonth(e.getMonth()-1))},get_last_year_seconds:function(){let e=new Date;return this.get_utc_seconds(Date.now()-e.setMonth(e.getMonth()-12))},zoom:function(e){if(null==this.epoch_status)return;let t=(this.epoch_status.epoch_end-this.epoch_status.epoch_begin)/e,n=this.epoch_status.epoch_end/2+this.epoch_status.epoch_begin/2;this.epoch_status.epoch_begin=n-t/2,this.epoch_status.epoch_end=n+t/2;let a=this.get_utc_seconds(Date.now());this.epoch_status.epoch_end>a&&(this.epoch_status.epoch_end=a),this.epoch_status.epoch_end=Number.parseInt(this.epoch_status.epoch_end),this.epoch_status.epoch_begin=Number.parseInt(this.epoch_status.epoch_begin),this.epoch_status.epoch_begin==this.epoch_status.epoch_end&&(this.epoch_status.epoch_begin-=2),this.emit_epoch_change(this.epoch_status)},jump_time_back:function(){if(null==this.epoch_status)return;this.epoch_status.epoch_begin-=1800,this.epoch_status.epoch_end-=1800,this.emit_epoch_change(this.epoch_status)},jump_time_ahead:function(){if(null==this.epoch_status)return;let e=this.epoch_status.epoch_end,t=this.get_utc_seconds(Date.now());this.epoch_status.epoch_end+=1800,this.epoch_status.epoch_end>t&&(this.epoch_status.epoch_end=t),this.epoch_status.epoch_begin+=this.epoch_status.epoch_end-e,this.emit_epoch_change(this.epoch_status)},emit_epoch_change:function(e,t){null!=e.epoch_end&&null!=e.epoch_begin&&(this.wrong_date=!1,e.epoch_begin>e.epoch_end?this.wrong_date=!0:(t!=this.id&&this.on_status_updated(e),ntopng_events_manager.emit_event(ntopng_events.EPOCH_CHANGE,e,this.id),this.$emit("epoch_change",e)))},add_status_in_history:function(e){this.history_last_status=this.history[this.history.length-1],this.history.length>5&&this.history.shift(),this.history.push(e)},apply_status_by_history:function(){null!=this.history_last_status&&(this.history.pop(),this.history.pop(),this.emit_epoch_change(this.history_last_status))}},data:()=>({i18n:e=>i18n(e),epoch_status:null,refresh_interval:null,refresh_interval_seconds:6e4,update_from_interval:!1,history:[],history_last_status:null,enable_apply:!1,select_time_value:"min_5",selected_time_option:{value:"min_5",label:i18n("show_alerts.presets.5_min"),currently_active:!1},wrong_date:!1,flat_begin_date:null,flat_end_date:null,time_preset_list:[{value:"min_5",label:i18n("show_alerts.presets.5_min"),currently_active:!1},{value:"min_30",label:i18n("show_alerts.presets.30_min"),currently_active:!0},{value:"hour",label:i18n("show_alerts.presets.hour"),currently_active:!1},{value:"day",label:i18n("show_alerts.presets.day"),currently_active:!1},{value:"week",label:i18n("show_alerts.presets.week"),currently_active:!1},{value:"month",label:i18n("show_alerts.presets.month"),currently_active:!1},{value:"year",label:i18n("show_alerts.presets.year"),currently_active:!1},{value:"custom",label:i18n("show_alerts.presets.custom"),currently_active:!1,disabled:!0}]})};const Dd=e=>(ua("data-v-bc6f1430"),e=e(),da(),e),jd={class:"input-group"},Ld={class:"form-group"},Vd={class:"controls d-flex flex-wrap"},zd={class:"btn-group me-auto btn-group-sm"},Bd={class:"btn-group ms-2"},qd=Dd((()=>Ll("span",{class:"input-group-text"},[Ll("i",{class:"fas fa-calendar-alt"})],-1))),Hd={class:"flatpickr flatpickr-input",type:"text",placeholder:"Choose a date..","data-id":"datetime",ref:"begin-date"},Gd=Dd((()=>Ll("span",{class:"input-group-text"},[Ll("i",{class:"fas fa-long-arrow-alt-right"})],-1))),Kd={class:"flatpickr flatpickr-input",type:"text",placeholder:"Choose a date..","data-id":"datetime",ref:"end-date"},Wd=["title"],Jd=[Dd((()=>Ll("i",{class:"fas fa-exclamation-circle"},null,-1)))],Yd={class:"d-flex align-items-center ms-2"},Zd=["disabled"],Xd={class:"btn-group"},Qd=["title"],ep=[Dd((()=>Ll("i",{class:"fas fa-long-arrow-alt-left"},null,-1)))],tp=["title"],np=[Dd((()=>Ll("i",{class:"fas fa-long-arrow-alt-right"},null,-1)))],ap=["title"],sp=[Dd((()=>Ll("i",{class:"fas fa-search-plus"},null,-1)))],lp=["title"],ip=[Dd((()=>Ll("i",{class:"fas fa-search-minus"},null,-1)))],op=["disabled","title"],rp=[Dd((()=>Ll("i",{class:"fas fa-undo"},null,-1)))],cp=["disabled","title"],up=[Dd((()=>Ll("i",{class:"fas fa-sync"},null,-1)))];function dp(e,t){void 0===t&&(t={});var n=t.insertAt;if(e&&"undefined"!=typeof document){var a=document.head||document.getElementsByTagName("head")[0],s=document.createElement("style");s.type="text/css","top"===n&&a.firstChild?a.insertBefore(s,a.firstChild):a.appendChild(s),s.styleSheet?s.styleSheet.cssText=e:s.appendChild(document.createTextNode(e))}}dp("\n.date_time_input[data-v-bc6f1430] {\n  width: 10.5rem;\n  max-width: 10.5rem;\n  min-width: 10.5rem;\n}\n"),Rd.render=function(e,t,n,a,s,l){const i=bs("select-search");return Nl(),Ml("div",jd,[Ll("div",Ld,[Ll("div",Vd,[Ll("div",zd,[Ns(e.$slots,"begin"),Vl(i,{selected_option:s.selected_time_option,"onUpdate:selected_option":t[0]||(t[0]=e=>s.selected_time_option=e),id:"time_preset_range_picker",options:s.time_preset_list,onSelect_option:l.change_select_time},null,8,["selected_option","options","onSelect_option"]),Ll("div",Bd,[qd,Ll("input",Hd,null,512),Gl(' <input ref="begin-date" @change="enable_apply=true" @change="change_begin_date" type="date" class="date_time_input begin-timepicker form-control border-right-0 fix-safari-input"> '),Gl(' <input ref="begin-time" @change="enable_apply=true" type="time" class="date_time_input begin-timepicker form-control border-right-0 fix-safari-input"> '),Gd,Ll("input",Kd,null,512),Gl(' <input ref="end-date" @change="enable_apply=true" type="date" class="date_time_input end-timepicker form-control border-left-0 fix-safari-input" style="width: 2.5rem;"> '),Gl(' <input ref="end-time" @change="enable_apply=true" type="time" class="date_time_input end-timepicker form-control border-left-0 fix-safari-input"> '),gs(Ll("span",{title:s.i18n("wrong_date_range"),style:{"margin-left":"0.2rem",color:"red"}},Jd,8,Wd),[[Go,s.wrong_date]])]),Ll("div",Yd,[Ll("button",{disabled:!s.enable_apply||s.wrong_date,onClick:t[1]||(t[1]=(...e)=>l.apply&&l.apply(...e)),class:"btn btn-sm btn-primary"},Z(s.i18n("apply")),9,Zd),Ll("div",Xd,[Ll("button",{onClick:t[2]||(t[2]=e=>l.jump_time_back()),class:"btn btn-sm btn-link",ref:"btn-jump-time-back",title:s.i18n("date_time_range_picker.btn_move_left")},ep,8,Qd),Ll("button",{onClick:t[3]||(t[3]=e=>l.jump_time_ahead()),class:"btn btn-sm btn-link me-2",ref:"btn-jump-time-ahead",title:s.i18n("date_time_range_picker.btn_move_right")},np,8,tp),Ll("button",{onClick:t[4]||(t[4]=e=>l.zoom(2)),class:"btn btn-sm btn-link",ref:"btn-zoom-in",title:s.i18n("date_time_range_picker.btn_zoom_in")},sp,8,ap),Ll("button",{onClick:t[5]||(t[5]=e=>l.zoom(.5)),class:"btn btn-sm btn-link",ref:"btn-zoom-out",title:s.i18n("date_time_range_picker.btn_zoom_out")},ip,8,lp),Ll("button",{disabled:null==s.history_last_status,onClick:t[6]||(t[6]=e=>l.apply_status_by_history()),class:"btn btn-sm btn-link",title:s.i18n("date_time_range_picker.btn_undo")},rp,8,op),Ll("button",{disabled:"custom"==s.select_time_value,onClick:t[7]||(t[7]=e=>l.change_select_time()),class:"btn btn-sm btn-link",title:s.i18n("date_time_range_picker.btn_refresh")},up,8,cp),Ns(e.$slots,"extra_buttons")])])])])])])},Rd.__scopeId="data-v-bc6f1430",Rd.__file="http_src/vue/data-time-range-picker.vue";var pp=Ga({components:{},props:{id:String},emits:["hidden","showed"],created(){},data:()=>({}),mounted(){let e=this;$(this.$refs.modal_id).on("shown.bs.modal",(function(t){e.$emit("showed")})),$(this.$refs.modal_id).on("hidden.bs.modal",(function(t){e.$emit("hidden")})),ntopng_sync.ready(this.$props.id)},methods:{show:function(){$(this.$refs.modal_id).modal("show")},preventEnter:function(){},close:function(){$(this.$refs.modal_id).modal("hide")}}});const _p={class:"modal-dialog modal-dialog-centered modal-lg",role:"document"},fp={class:"modal-content"},hp={class:"modal-header"},mp={class:"modal-title"},gp=Ll("div",{class:"modal-close"},[Ll("button",{type:"button",class:"btn-close","data-bs-dismiss":"modal","aria-label":"Close"})],-1),vp={class:"modal-body"},bp={class:"modal-footer"},yp=Ll("div",{class:"mr-auto"},null,-1),wp=Ll("div",{class:"alert alert-info test-feedback w-100",style:{display:"none"}},null,-1);pp.render=function(e,t,n,a,s,l){return Nl(),Ml("div",{onSubmit:t[0]||(t[0]=Bo(((...t)=>e.preventEnter&&e.preventEnter(...t)),["prevent"])),class:"modal fade",ref:"modal_id",tabindex:"-1",role:"dialog","aria-labelledby":"dt-add-filter-modal-title","aria-hidden":"true"},[Ll("div",_p,[Ll("div",fp,[Ll("div",hp,[Ll("h5",mp,[Ns(e.$slots,"title")]),gp]),Ll("div",vp,[Ns(e.$slots,"body")]),Ll("div",bp,[yp,Ns(e.$slots,"footer"),wp])])])],544)},pp.__file="http_src/vue/modal.vue";const xp=e=>(ua("data-v-089b0491"),e=e(),da(),e),kp=xp((()=>Ll("a",{target:"_newtab",href:"#",style:{},class:"nav-item text-muted"},[Ll("i",{class:"fas fa-question-circle",style:{"margin-left":"28rem","padding-top":"0.8rem"}})],-1))),$p={class:"nav nav-tabs"},Sp=["disabled"],Cp={key:0,style:{"min-height":"8.5rem"}},Np={class:"form-group ms-2 me-2 mt-3 row"},Ap={class:"col-form-label col-sm-4"},Tp={class:"col-sm-6"},Ep=["pattern"],Pp={key:1,style:{"min-height":"8.5rem"}},Mp={class:"form-group ms-2 me-2 mt-3 row"},Ip={class:"col-form-label col-sm-4"},Op={class:"col-sm-8"},Up={value:"name"},Fp={value:"date"},Rp={class:"form-group ms-2 me-2 mt-3 row"},Dp={class:"col-form-label col-sm-4"},jp={class:"col-sm-8"},Lp=["value"],Vp={class:"form-group ms-2 me-2 mt-3 row"},zp={class:"custom-control custom-switch"},Bp={class:"custom-control-label ms-1 form-check-label"},qp=["disabled"],Hp=["disabled"],Gp=["disabled"];var Kp={__name:"modal-snapshot",props:{csrf:String,page:String},emits:["added_snapshot","deleted_snapshot","deleted_all_snapshots"],setup(e,{expose:t,emit:n}){const a=e,s=pn(null),l=pn("add"),i=pn(""),o=pn(!1),r=pn(""),c=pn(!0),u=pn(""),d=pn(""),p=pn([]),_=pn("date");let f=NtopUtils.REGEXES.singleword;const h=gi((()=>!new RegExp(f).test(d.value))),m=gi((()=>""==i.value));function g(){if(null!=a.page)return a.page;let e="alerts";return null!=window.location.toString().match(/alert_stats.lua/)||(e="flows"),e}let v=null;function b(){v!=_.value&&(p.value.sort(((e,t)=>"name"==_.value?e.name.localeCompare(t.name):e.utc-t.utc)),p.value.length>0&&(i.value=p.value[0]),v=_.value)}let y=!0;const w=async()=>{let e;if(c.value)e=ntopng_url_manager.get_url_params();else{let t=ntopng_url_manager.get_url_object();delete t.epoch_begin,delete t.epoch_end,e=ntopng_url_manager.obj_to_url_params(t)}let t=g(),s={snapshot_name:d.value,filters:e,page:t};s.csrf=a.csrf;let l=`${http_prefix}/lua/pro/rest/v2/add/filters/snapshot.lua`;try{let e={"Content-Type":"application/json"};await ntopng_utility.http_request(l,{method:"post",headers:e,body:JSON.stringify(s)}),y=!0}catch(e){console.error(e)}$(),n("added_snapshots",s)},x=()=>{$();let e=i.value.filters;if(1==o.value){let t=ntopng_status_manager.get_status(),n=ntopng_url_manager.get_url_object(e);n.epoch_begin=t.epoch_begin,n.epoch_end=t.epoch_end,e=ntopng_url_manager.obj_to_url_params(n)}ntopng_url_manager.replace_url_and_reload(e)},k=async e=>{let t=i.value.name;1==e&&(t="*");let s={snapshot_name:t,page:g()};s.csrf=a.csrf;let l=`${http_prefix}/lua/pro/rest/v2/delete/filters/snapshot.lua`;try{let e={"Content-Type":"application/json"};await ntopng_utility.http_request(l,{method:"post",headers:e,body:JSON.stringify(s)}),y=!0}catch(e){console.error(e)}n(1==e?"deleted_all_snapshots":"deleted_snapshot",s),$()},$=()=>{s.value.close()};t({show:()=>{!async function(){l.value="add",d.value="",c.value=!0,o.value=!1;let e=ntopng_status_manager.get_status(),t=S("snapshots.save_time"),n=ntopng_utility.from_utc_to_server_date_format(1e3*e.epoch_begin,"DD/MM/YYYY HH:mm"),a=ntopng_utility.from_utc_to_server_date_format(1e3*e.epoch_end,"DD/MM/YYYY HH:mm");t=t.replace(/\%begin_time/,n),t=t.replace(/\%end_time/,a),u.value=t;let s=S("snapshots.apply_time");if(s=s.replace(/\%begin_time/,n),s=s.replace(/\%end_time/,a),r.value=s,y){y=!1;let e=g(),t=`${http_prefix}/lua/pro/rest/v2/get/filters/snapshots.lua?page=${e}`,n=await ntopng_utility.http_request(t);p.value=ntopng_utility.object_to_array(n)}b(),p.value.length>0&&(i.value=p.value[0])}(),s.value.show()},close:$}),rs((()=>{}));const S=e=>i18n(e);return(e,t)=>(Nl(),Il(pp,{onShowed:t[8]||(t[8]=e=>{}),ref_key:"modal_id",ref:s},{title:_a((()=>[ql(Z(S("snapshots.manage"))+" ",1),kp])),body:_a((()=>[Ll("ul",$p,[Ll("li",{class:"nav-item",onClick:t[0]||(t[0]=e=>l.value="add")},[Ll("a",{class:q(["nav-link",{active:"add"==l.value}]),href:"#"},Z(S("snapshots.add")),3)]),Ll("li",{class:"nav-item",onClick:t[1]||(t[1]=e=>(e=>{0==p.value.length&&"select"==e||(l.value=e)})("select"))},[Ll("a",{disabled:0==p.value.length,class:q(["nav-link",{active:"select"==l.value,"not-allowed":0==p.value.length}]),href:"#"},Z(S("snapshots.manage")),11,Sp)])]),"add"==l.value?(Nl(),Ml("div",Cp,[Ll("div",Np,[Ll("label",Ap,[Ll("b",null,Z(S("snapshots.name"))+":",1)]),Ll("div",Tp,[gs(Ll("input",{pattern:gn(f),placeholder:"",required:"",type:"text",class:"form-control","onUpdate:modelValue":t[2]||(t[2]=e=>d.value=e)},null,8,Ep),[[Po,d.value]])])]),Gl(' <div class="form-group ms-2 me-2 mt-3 row"> '),Gl(' \t<div class="custom-control custom-switch"> '),Gl(' \t  <input type="checkbox" class="custom-control-input whitespace form-check-input" v-model="save_time"> '),Gl(' \t  <label class="custom-control-label ms-1 form-check-label">{{save_time_text}}</label> '),Gl(" \t</div> "),Gl(" </div>       ")])):Gl("v-if",!0),Gl(" action add "),"select"==l.value?(Nl(),Ml("div",Pp,[Ll("div",Mp,[Ll("label",Ip,[Ll("b",null,Z(S("snapshots.order_by")),1)]),Ll("div",Op,[gs(Ll("select",{class:"form-select",onClick:t[3]||(t[3]=e=>b()),"onUpdate:modelValue":t[4]||(t[4]=e=>_.value=e)},[Ll("option",Up,Z(S("snapshots.name")),1),Ll("option",Fp,Z(S("snapshots.date")),1)],512),[[Uo,_.value]])])]),Ll("div",Rp,[Ll("label",Dp,[Ll("b",null,Z(S("snapshots.select")),1)]),Ll("div",jp,[gs(Ll("select",{class:"form-select","onUpdate:modelValue":t[5]||(t[5]=e=>i.value=e)},[(Nl(!0),Ml(wl,null,Ss(p.value,(e=>(Nl(),Ml("option",{value:e},Z(function(e){let t=1e3*e.utc,n=ntopng_utility.from_utc_to_server_date_format(t,"DD/MM/YYYY");return`${e.name} (${n})`}(e)),9,Lp)))),256))],512),[[Uo,i.value]])])]),Ll("div",Vp,[Ll("div",zp,[gs(Ll("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input","onUpdate:modelValue":t[6]||(t[6]=e=>o.value=e)},null,512),[[Mo,o.value]]),Ll("label",Bp,Z(r.value),1)])])])):Gl("v-if",!0),Gl(" action select ")])),footer:_a((()=>["add"==l.value?(Nl(),Ml("button",{key:0,type:"button",onClick:w,disabled:gn(h),class:"btn btn-primary"},Z(S("snapshots.add")),9,qp)):Gl("v-if",!0),"select"==l.value?(Nl(),Ml("button",{key:1,onClick:t[7]||(t[7]=e=>k(!0)),type:"button",style:{"text-align":"left","margin-left":"0px"},class:"btn btn-danger start-0 position-absolute ms-3"},Z(S("snapshots.delete_all")),1)):Gl("v-if",!0),"select"==l.value?(Nl(),Ml("button",{key:2,type:"button",onClick:k,disabled:gn(m),class:"btn btn-danger"},Z(S("snapshots.delete")),9,Hp)):Gl("v-if",!0),"select"==l.value?(Nl(),Ml("button",{key:3,type:"button",onClick:x,disabled:gn(m),class:"btn btn-primary"},Z(S("snapshots.apply")),9,Gp)):Gl("v-if",!0)])),_:1},512))}};dp("\ninput[data-v-089b0491]:invalid {\n  border-color: #ff0000;\n}\n.not-allowed[data-v-089b0491] {\n  cursor: not-allowed;\n}\n"),Kp.__scopeId="data-v-089b0491",Kp.__file="http_src/vue/modal-snapshot.vue";const Wp=e=>(ua("data-v-185590b6"),e=e(),da(),e),Jp={class:"form-group ms-2 me-2 mt-3 row"},Yp={class:"col-11"},Zp={class:"col-form-label"},Xp=[Wp((()=>Ll("button",{type:"button",class:"btn border"},[Ll("span",null,[Ll("i",{class:"fas fa-trash"})])],-1)))],Qp={class:"container"},e_={class:"row custom-ms me-2 mt-1"},t_={class:"col-5"},n_=["onUpdate:modelValue"],a_={class:"custom-control-label ms-1 form-check-label"},s_={class:"col-2"},l_=["onUpdate:modelValue"],i_=Wp((()=>Ll("label",{class:"custom-control-label ms-1 form-check-label"},"Past ",-1))),o_={class:"col-2"},r_=["onUpdate:modelValue"],c_=Wp((()=>Ll("label",{class:"custom-control-label ms-1 form-check-label"},"Avg ",-1))),u_={class:"col-3"},d_=["onUpdate:modelValue"],p_=Wp((()=>Ll("label",{class:"custom-control-label ms-1 form-check-label"},"95th Perc ",-1)));var __={__name:"list-timeseries",props:{id:String,timeseries:Array,title:String,show_delete_button:Boolean},emits:["delete_ts","update:timeseries"],setup(e,{emit:t}){const n=e;function a(){console.log(n.timeseries),t("update:timeseries",n.timeseries)}function s(){t("delete_ts",n.id)}return(t,n)=>(Nl(),Ml("div",null,[Ll("div",Jp,[Ll("div",Yp,[Ll("label",Zp,[Ll("b",null,Z(e.title),1)])]),e.show_delete_button?(Nl(),Ml("div",{key:0,class:"col-1",onClick:s},Xp)):Gl("v-if",!0)]),Ll("div",Qp,[(Nl(!0),Ml(wl,null,Ss(e.timeseries,(e=>(Nl(),Ml("div",e_,[Ll("div",t_,[gs(Ll("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:a,"onUpdate:modelValue":t=>e.raw=t},null,40,n_),[[Mo,e.raw]]),Ll("label",a_,Z(e.label),1)]),Ll("div",s_,[gs(Ll("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:a,"onUpdate:modelValue":t=>e.past=t},null,40,l_),[[Mo,e.past]]),i_]),Ll("div",o_,[gs(Ll("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:a,"onUpdate:modelValue":t=>e.avg=t},null,40,r_),[[Mo,e.avg]]),c_]),Ll("div",u_,[gs(Ll("input",{type:"checkbox",class:"custom-control-input whitespace form-check-input",onChange:a,"onUpdate:modelValue":t=>e.perc_95=t},null,40,d_),[[Mo,e.perc_95]]),p_])])))),256))])]))}};dp("\n.custom-ms[data-v-185590b6] {\n  margin-left: 2rem !important;\n}\n.inline-block[data-v-185590b6] {\n    display: inline-block;\n    margin-right: 1rem;\n}\n.border[data-v-185590b6] {\n    border-style: solid !important;\n}\n"),__.__scopeId="data-v-185590b6",__.__file="http_src/vue/list-timeseries.vue";const f_=e=>{let t=[];e.forEach((e=>{let n=function(e){let t=[];e.timeseries.forEach((e=>{t.push(`${e.id}=${e.raw}:${e.past}:${e.avg}:${e.perc_95}`)}));let n=e.metric.schema;null!=e.metric.query&&(n=`${n}+${e.metric.query}`);let a=t.join("|"),s=e.source.value;null!=e.source.sub_value&&(s=`${s}+${e.source.sub_value}`);return`${e.source_type.id},${s},${n},${a}`}(e);t.push(n)}));let n=t.join(";");y.set_key_to_url("timeseries_groups",n)};const h_=async(e,t)=>{if(null==t&&(t=y.get_url_entry("timeseries_groups")),null==t||""==t)return null;let n=t.split(";");if(!n?.length>0)return null;let a=Promise.all(n.map((async e=>await v_(e))));return a},m_=(e,t,n)=>{let a=b_(e,t,n),s=[];for(let e in n.timeseries){let t=n.timeseries[e];s.push({id:e,label:t.label,raw:!0,past:!1,avg:!1,perc_95:!1})}return{id:a,source_type:e,source:t,metric:n,timeseries:s}},g_=async(e,t)=>{let n=R_(),a=await S_(e,n),s=await F_(e,n,a),l=j_(s,t);return[m_(n,a,l)]};async function v_(e){let t=e.split(","),n=t[0],a=t[1].split("+");a.lenght<2&&a.push(null);let s=t[2].split("+");s.lenght<2&&s.push(null);let l=t[3],i=k_(n),o=await N_(http_prefix,i,a[0],a[1]),r=await D_(http_prefix,i,o,s[0],s[1]),c=function(e,t){let n=e.split("|"),a=/(.+)=(.+):(.+):(.+):(.+)/,s=[];return n.forEach((e=>{let n=a.exec(e),l=n[1],i=t.timeseries[l].label,o=JSON.parse(n[2]),r=JSON.parse(n[3]),c=JSON.parse(n[4]),u=JSON.parse(n[5]);s.push({id:l,label:i,raw:o,past:r,avg:c,perc_95:u})})),s}(l,r);return{id:b_(i,o,r),source_type:i,source:o,metric:r,timeseries:c}}const b_=(e,t,n)=>{let a=n.schema;null!=n.query&&(a=`${a} - ${n.query}`);let s=t.value;return null!=t.sub_value&&(s=`${s}_${t.sub_value}`),`${e.value} - ${s} - ${a}`};const y_={hide:"hide",select:"select",select_and_select:"select_and_select",select_and_input:"select_and_input"},w_={ifid:e=>{let t=e.ifname;return null!=e.name&&(t=e.name),{label:t,value:e.ifid}},pool:e=>{let t=e.pool_id;return null!=e.name&&(t=e.name),{label:t,value:e.pool_id}}},x_=[{id:"interface",regex_page_url:"lua/if_stats",label:"Interface",sources_url:"lua/rest/v2/get/ntopng/interfaces.lua",value:"ifid",ui_type:y_.select,table_value:"interface",query:"iface"},{id:"host",regex_page_url:"lua/host_details",label:"Host",value:"host",regex_type:"ip",sources_sub_url:"lua/rest/v2/get/ntopng/interfaces.lua",sub_value:"ifid",sub_label:"Interface",ui_type:y_.select_and_input,table_value:"host",query:"host"},{id:"mac",regex_page_url:"lua/mac_details",label:"Mac",value_url:"host",value:"mac",regex_type:"macAddress",sources_sub_url:"lua/rest/v2/get/ntopng/interfaces.lua",sub_value:"ifid",sub_label:"Interface",ui_type:y_.select_and_input,query:"mac"},{id:"network",regex_page_url:"lua/network_details",label:"Network",value:"subnet",regex_type:"text",sources_sub_url:"lua/rest/v2/get/ntopng/interfaces.lua",sub_value:"ifid",sub_label:"Interface",ui_type:y_.select_and_input,query:"subnet"},{id:"as",regex_page_url:"lua/as_details",label:"ASN",value:"asn",regex_type:"text",sources_sub_url:"lua/rest/v2/get/ntopng/interfaces.lua",sub_value:"ifid",sub_label:"Interface",ui_type:y_.select_and_input,query:"asn"},{id:"country",regex_page_url:"lua/country_details",label:"Country",value:"country",regex_type:"text",sources_sub_url:"lua/rest/v2/get/ntopng/interfaces.lua",sub_value:"ifid",sub_label:"Interface",ui_type:y_.select_and_input,query:"country"},{id:"os",regex_page_url:"lua/os_details",label:"OS",value:"os",regex_type:"text",sources_sub_url:"lua/rest/v2/get/ntopng/interfaces.lua",sub_value:"ifid",sub_label:"Interface",ui_type:y_.select_and_input,query:"os"},{id:"vlan",regex_page_url:"lua/vlan_details",label:"VLAN",value:"vlan",regex_type:"text",sources_sub_url:"lua/rest/v2/get/ntopng/interfaces.lua",sub_value:"ifid",sub_label:"Interface",ui_type:y_.select_and_input,query:"vlan"},{id:"pool",regex_page_url:"lua/pool_details",label:"Host Pool",sources_url:"lua/rest/v2/get/host/pools.lua",value:"pool",regex_type:"text",sources_sub_url:"lua/rest/v2/get/ntopng/interfaces.lua",sub_value:"ifid",sub_label:"Interface",ui_type:y_.select_and_select,query:"host_pool"},{id:"observation",regex_page_url:"lua/pro/enterprise/observation_points",label:"Observation",value:"observation_point",regex_type:"text",sources_sub_url:"lua/rest/v2/get/ntopng/interfaces.lua",sub_value:"ifid",sub_label:"Interface",ui_type:y_.select_and_input,query:"obs_point",ts_query:"obs_point"},{id:"pod",regex_page_url:"lua/pod_details",label:"Pod",value:"pod",regex_type:"text",sources_sub_url:"lua/rest/v2/get/ntopng/interfaces.lua",sub_value:"ifid",sub_label:"Interface",ui_type:y_.select_and_input,query:"pod",ts_query:"pod"},{id:"container",regex_page_url:"lua/container_details",label:"Container",value:"container",regex_type:"text",sources_sub_url:"lua/rest/v2/get/ntopng/interfaces.lua",sub_value:"ifid",sub_label:"Interface",ui_type:y_.select_and_input,query:"container"},{id:"hash",regex_page_url:"lua/hash_table_details",label:"Hash Table",value:"hash_table",regex_type:"text",sources_sub_url:"lua/rest/v2/get/ntopng/interfaces.lua",sub_value:"ifid",sub_label:"Interface",ui_type:y_.select_and_input,query:"ht"},{id:"system",regex_page_url:"lua/system_stats",label:"System Stats",value:"ifid",sources_function:()=>[{label:"",value:-1}],regex_type:"text",ui_type:y_.hide,query:"system"},{id:"profile",regex_page_url:"lua/profile_details",label:"Profile",value:"profile",regex_type:"text",sources_sub_url:"lua/rest/v2/get/ntopng/interfaces.lua",sub_value:"ifid",sub_label:"Interface",ui_type:y_.select_and_input,query:"profile"},{id:"n_edge_interface",regex_page_url:"lua/pro/nedge/if_stats.lua",label:"Profile",value:"ifid",regex_type:"text",ui_type:y_.select_and_input,query:"iface:nedge"},{id:"redis",regex_page_url:"lua/monitor/redis_monitor.lua",label:"Redis",value:"ifid",regex_type:"text",ui_type:y_.select_and_input,query:"redis"},{id:"influx",regex_page_url:"lua/monitor/influxdb_monitor.lua",label:"Influx DB",value:"ifid",regex_type:"text",ui_type:y_.select_and_input,query:"influxdb"},{id:"active_monitoring",regex_page_url:"lua/monitor/active_monitoring_monitor.lua",label:"Active Monitoring",value:"am_host",regex_type:"text",ui_type:y_.select_and_input,query:"am_host",ts_query:"host"}],k_=e=>x_.find((t=>t.id==e));async function $_(e,t){let n=k_(t);return S_(e,n)}const S_=async(e,t)=>{let n,a=I_(t);return t.sub_value&&(n=I_({value:t.sub_value})),await N_(e,t,a,n)};async function C_(e,t,n){let a=await E_(e,t),s=a.some((e=>e.value==n.value&&e.sub_value==n.sub_value));0==s&&a.push(n)}const N_=async(e,t,n,a)=>{if(null==t&&(t=R_()),t.sources_url||t.sources_function){let s;s=t.sources_url?await E_(e,t):t.sources_function();let l=s.find((e=>e.value==n));return null!=l&&null!=a&&(l.sub_value=a),l}return null==a&&(a=I_({value:t.sub_value})),null==n&&(n=""),{label:n,value:n,sub_value:a}};let A_={};async function T_(e,t){let n=x_.find((e=>e.value=t));return E_(e,n)}const E_=async(e,t)=>{null==t&&(t=R_());let a=t.value;if(null==A_[a])if(t.sources_url){let n=`${e}/${t.sources_url}`;A_[a]=g.http_request(n)}else{if(!t.sources_function)return[];A_[a]=t.sources_function()}let s=await A_[a];if(t.sources_url){let e=w_[t.value];if(null==e)throw`:Error: metrics-manager.js, missing sources_url_to_source ${t.value} key`;s=s.map((t=>e(t)))}return s.sort(n.sortAlphabetically)};function P_(e){return null!=e.value_url?e.value_url:e.value}function M_(e){return null!=e.sub_value_url?e.sub_value_url:e.sub_value}const I_=e=>{null==e&&(e=R_());let t=e.value_url;return null==t&&(t=e.value),y.get_url_entry(t)};let O_={},U_=null;const F_=async(e,t,n)=>{let a=`${y.get_url_entry("epoch_begin")}_${y.get_url_entry("epoch_end")}`;null==t&&(t=R_()),null==n&&(n=await S_(e,t));let s=function(e,t,n,a){let s=`${t.value}=${n}`;return null!=t.sub_value&&null!=a&&(s=`${s}&${t.sub_value}=${a}`),`${e}/lua/rest/v2/get/timeseries/type/consts.lua?query=${t.query}&${s}`}(e,t,n.value,n.sub_value),l=function(e,t){let n=`${e.value}_${t.value}`;return null!=t.sub_value&&(n=`${n}_${t.sub_value}`),n}(t,n);a!=U_&&(O_[l]=null,U_=a),null==O_[l]&&(O_[l]=g.http_request(s));let i=await O_[l];return g.clone(i)},R_=()=>{let e=window.location.pathname;for(let t=0;t<x_.length;t+=1){if(1==new RegExp(x_[t].regex_page_url).test(e))return x_[t]}throw`source_type not found for ${e}`},D_=async(e,t,n,a,s)=>(await F_(e,t,n)).find((e=>e.schema==a&&e.query==s)),j_=(e,t)=>{let n;return null!=t&&(n=e.find((e=>e.schema==t))),null==n&&(n=e.find((e=>1==e.default_visible))),null!=n?n:e[0]},L_={set_timeseries_groups_in_url:f_,get_timeseries_groups_from_url:h_,get_default_timeseries_groups:g_,get_ts_group:m_,get_ts_group_id:b_,sources_types:x_,get_source_type_from_id:k_,get_current_page_source_type:R_,get_sources:E_,get_sub_sources:T_,get_default_source:S_,get_default_sub_source:$_,get_source_from_value:N_,get_default_source_value:I_,add_source_to_sources:C_,get_metrics:F_,get_metrics_from_schema:D_,get_default_metric:j_,get_source_type_key_value_url:P_,get_source_type_key_sub_value_url:M_,ui_types:y_},V_=n;function z_(e){if("text"==e)return".*";if("ip"==e){let e=V_.REGEXES.ipv4,t=e.replace("$","@[0-9]{0,5}$"),n=V_.REGEXES.ipv6,a=n.replaceAll("$","@[0-9]{0,5}$");return`(${e})|(${t})|(${n})|(${a})`}return V_.REGEXES[e]}const B_={get_data_pattern:z_},q_={class:"nav nav-tabs"},H_={class:"form-group ms-2 me-2 mt-3 row"},G_={class:"col-form-label col-sm-4"},K_={class:"col-sm-8"},W_={key:0,class:"form-group ms-2 me-2 mt-3 row"},J_={class:"col-form-label col-sm-4"},Y_={class:"col-sm-8"},Z_={class:"form-group ms-2 me-2 mt-3 ms-1 me-1"},X_={class:"form-group row ms-1 mb-2"},Q_={class:"col-form-label col-sm-4"},ef={class:"col-sm-8"},tf={class:"form-group ms-2 me-2 mt-3 ms-3 me-1 row"},nf={class:"col-form-label col-sm-4"},af={class:"col-sm-8"},sf={class:"form-group ms-2 me-2 mt-3 ms-3 me-1 row"},lf={class:"col-form-label col-sm-4"},of={class:"col-sm-6"},rf={class:"col-sm-2",style:{"text-align":"end !important"}},cf=["disabled"],uf={key:2,class:"form-group ms-2 me-2 mt-3"},df={class:"form-group row ms-1 me-1 mb-2"},pf={class:"col-form-label col-sm-4"},_f={class:"col-sm-8"},ff={class:"form-group row ms-3 me-1"},hf={class:"col-form-label col-sm-4"},mf={class:"col-sm-8"},gf={class:"form-group row ms-3 me-1"},vf={class:"col-form-label col-sm-4"},bf={class:"col-sm-6"},yf=["pattern"],wf={class:"col-sm-2",style:{"text-align":"end !important"}},xf=["disabled"],kf={class:"form-group ms-2 me-2 mt-3 row"},$f={class:"col-form-label col-sm-4"},Sf={class:"col-sm-8"};var Cf={__name:"modal-timeseries",emits:["apply"],setup(e,{expose:t,emit:n}){const a=pn(null),s=pn(null),l=pn("select");let i=L_.get_current_page_source_type();const o=L_.sources_types,r=pn(i),c=L_.ui_types,u=pn([]),d=pn({}),p=pn(""),_=pn([]),f=pn({}),h=pn(""),m=r.value?.regex_type,v=pn(B_.get_data_pattern(m)),b=gi((()=>new RegExp(v.value).test(h.value))),y=pn([]),w=pn({}),x=pn([]),k=pn([]);let $=null;rs((async()=>{$=async function(){console.log("INIT MODAL TIMESERIES"),await A(),await T(),E(),console.log("emit")}()})),Ma((()=>l.value),((e,t)=>{}),{flush:"post"});function S(e){l.value=e}async function C(e){1==e?d.value=await L_.get_source_from_value(http_prefix,r.value,h.value,f.value.value):d.value.sub_value=f.value.value,N(),await T()}function N(){var e;p.value=(null==e&&(e=d.value.label),`${f.value.label} - ${e}`)}async function A(){null!=r.value.sub_value&&(_.value=await L_.get_sub_sources(http_prefix,r.value.sub_value),f.value=await L_.get_default_sub_source(http_prefix,r.value.sub_value)),r.value.disable_url||(u.value=await L_.get_sources(http_prefix,r.value));let e=await L_.get_default_source(http_prefix,r.value);d.value=e,h.value=d.value.value,N()}async function T(){y.value=await L_.get_metrics(http_prefix,r.value,d.value),y.value.sort(NtopUtils.sortAlphabetically),w.value=L_.get_default_metric(y.value)}function E(e){k.value=[];let t=w.value.timeseries;for(let e in t)k.value.push({id:e,label:t[e].label,raw:!0,past:!1,avg:!1,perc_95:!1})}function P(e){let t,n,a;null==e?(t=r.value,n=d.value,a=w.value):(t=e.source_type,n=e.source,a=e.metric);let s=L_.get_ts_group_id(t,n,a);return console.log(`modal-timeseries: id = ${s}`),s}const M=e=>{x.value=x.value.filter((t=>P(t)!=e))},I=(e,t)=>{let a=x.value.findIndex((t=>t.id==e.id));a<0?x.value.push(e):x.value[a]=e,t&&n("apply",x.value)},O=()=>{if("add"==l.value){let e={id:P(),source_type:r.value,source:d.value,metric:w.value,timeseries:g.clone(k.value)};I(e)}n("apply",x.value),U()},U=()=>{a.value.close()},F=e=>i18n(e);return t({show:async e=>{console.log(w.value),x.value=e,await $,l.value="select",a.value.show()},close:U,add_ts_group:I,set_timeseries_groups:(e,t)=>{x.value=e,t&&n("apply",x.value)}}),(e,t)=>(Nl(),Il(pp,{onShowed:t[17]||(t[17]=e=>{}),ref_key:"modal_id",ref:a},{title:_a((()=>[ql(Z(F("modal_timeseries.title")),1)])),body:_a((()=>[Ll("ul",q_,[Ll("li",{class:"nav-item",onClick:t[0]||(t[0]=e=>S("add"))},[Ll("a",{class:q(["nav-link",{active:"add"==l.value}]),href:"#"},Z(F("modal_timeseries.add_timeseries")),3)]),Ll("li",{class:"nav-item",onClick:t[1]||(t[1]=e=>S("select"))},[Ll("a",{class:q(["nav-link",{active:"select"==l.value}]),href:"#"},Z(F("modal_timeseries.manage_timeseries")),3)])]),Gl(" action add "),"add"==l.value?(Nl(),Ml(wl,{key:0},[Gl(" Sources Types "),Ll("div",H_,[Ll("label",G_,[Ll("b",null,Z(F("modal_timeseries.source_type")),1)]),Ll("div",K_,[Vl(Fd,{selected_option:r.value,"onUpdate:selected_option":t[2]||(t[2]=e=>r.value=e),onSelect_option:t[3]||(t[3]=e=>async function(){let e=r.value?.regex_type;v.value=B_.get_data_pattern(e),await A(),await T()}()),options:gn(o)},null,8,["selected_option","options"])])]),Gl(" Sources "),Gl(" Interface "),r.value.ui_type==gn(c).select?(Nl(),Ml("div",W_,[Ll("label",J_,[Ll("b",null,Z(F("modal_timeseries.source")),1)]),Ll("div",Y_,[Vl(Fd,{selected_option:d.value,"onUpdate:selected_option":t[4]||(t[4]=e=>d.value=e),onSelect_option:t[5]||(t[5]=e=>async function(){await T()}()),options:u.value},null,8,["selected_option","options"])])])):Gl("v-if",!0),Gl(" Pool "),r.value.ui_type==gn(c).select_and_select?(Nl(),Ml(wl,{key:1},[Ll("div",Z_,[Ll("div",X_,[Ll("label",Q_,[Ll("b",null,Z(F("modal_timeseries.source")),1)]),Ll("div",ef,[gs(Ll("input",{class:"form-control","onUpdate:modelValue":t[6]||(t[6]=e=>p.value=e),type:"text",disabled:""},null,512),[[Po,p.value]])])])]),Ll("div",tf,[Ll("label",nf,[Ll("b",null,Z(r.value.sub_label),1)]),Ll("div",af,[Vl(Fd,{selected_option:f.value,"onUpdate:selected_option":t[7]||(t[7]=e=>f.value=e),options:_.value},null,8,["selected_option","options"])])]),Ll("div",sf,[Ll("label",lf,[Ll("b",null,Z(r.value.label),1)]),Ll("div",of,[Vl(Fd,{selected_option:d.value,"onUpdate:selected_option":t[8]||(t[8]=e=>d.value=e),options:u.value},null,8,["selected_option","options"])]),Ll("div",rf,[Ll("button",{type:"button",disabled:!gn(b),onClick:t[9]||(t[9]=e=>C(!1)),class:"btn btn-primary"},Z(F("modal_timeseries.apply")),9,cf)])])],64)):Gl("v-if",!0),Gl(" Host, Mac "),r.value.ui_type==gn(c).select_and_input?(Nl(),Ml("div",uf,[Ll("div",df,[Ll("label",pf,[Ll("b",null,Z(F("modal_timeseries.source")),1)]),Ll("div",_f,[gs(Ll("input",{class:"form-control","onUpdate:modelValue":t[10]||(t[10]=e=>p.value=e),type:"text",disabled:""},null,512),[[Po,p.value]])])]),Ll("div",ff,[Ll("label",hf,[Ll("b",null,Z(r.value.sub_label),1)]),Ll("div",mf,[Vl(Fd,{selected_option:f.value,"onUpdate:selected_option":t[11]||(t[11]=e=>f.value=e),options:_.value},null,8,["selected_option","options"])])]),Ll("div",gf,[Ll("label",vf,[Ll("b",null,Z(r.value.label),1)]),Ll("div",bf,[gs(Ll("input",{class:"form-control","onUpdate:modelValue":t[12]||(t[12]=e=>h.value=e),pattern:v.value,required:"",type:"text",placeholder:""},null,8,yf),[[Po,h.value]])]),Ll("div",wf,[Ll("button",{type:"button",disabled:!gn(b),onClick:t[13]||(t[13]=e=>C(!0)),class:"btn btn-primary"},Z(F("modal_timeseries.apply")),9,xf)])])])):Gl("v-if",!0),Gl(" Metrics "),Ll("div",kf,[Ll("label",$f,[Ll("b",null,Z(F("modal_timeseries.metric")),1)]),Ll("div",Sf,[Gl(' <select class="form-select" @click="update_timeseries_to_add()" v-model="selected_metric"> '),Gl('   <option v-for="item in metrics" :value="item">{{item.label}}</option> '),Gl(" </select> "),Vl(Fd,{ref_key:"select_search_metrics",ref:s,onSelect_option:t[14]||(t[14]=e=>E()),selected_option:w.value,"onUpdate:selected_option":t[15]||(t[15]=e=>w.value=e),options:y.value},null,8,["selected_option","options"])])]),Vl(__,{id:P(),title:F("modal_timeseries.timeseries_list"),timeseries:k.value,"onUpdate:timeseries":t[16]||(t[16]=e=>k.value=e)},null,8,["id","title","timeseries"])],64)):Gl("v-if",!0),Gl(" action == add "),Gl(" action select"),"select"==l.value?(Nl(),Ml(wl,{key:1},[(Nl(!0),Ml(wl,null,Ss(x.value,(e=>{return Nl(),Il(__,{id:P(e),title:(t=e,`${t.source_type.label} - ${t.source.label} - ${t.metric.label}`),timeseries:e.timeseries,"onUpdate:timeseries":t=>e.timeseries=t,show_delete_button:x.value.length>1,onDelete_ts:M},null,8,["id","title","timeseries","onUpdate:timeseries","show_delete_button"]);var t})),256)),Gl(" v-for timeseries_groups_added ")],64)):Gl("v-if",!0),Gl(" action == select ")])),footer:_a((()=>[gs(Ll("button",{type:"button",onClick:O,class:"btn btn-primary"},Z(F("modal_timeseries.add")),513),[[Go,"add"==l.value]]),gs(Ll("button",{type:"button",onClick:O,class:"btn btn-primary"},Z(F("modal_timeseries.apply")),513),[[Go,"select"==l.value]])])),_:1},512))}};dp("\ninput[data-v-103cd911]:invalid {\n  border-color: #ff0000;\n}\n.warn[data-v-103cd911] {\nborder-color: #ffd500;\nborder-style: solid;\n}\n"),Cf.__scopeId="data-v-103cd911",Cf.__file="http_src/vue/modal-timeseries.vue";var Nf=Ga({components:{modal:pp},props:{id:String},updated(){},data(){return{description:"",invalid_bpf:!1,bpf_filter:"",extract_now:!0,show_menu:!0,i18n:e=>i18n(e),id_modal:`${this.$props.id}_modal`}},emits:["apply"],created(){},mounted(){},methods:{pad2_number:function(e){return String(e).padStart(2,"0")},format_date:function(e){let t=e.valueOf();return ntopng_utility.from_utc_to_server_date_format(t)},apply:async function(){if(null!=this.bpf_filter&&""!=this.bpf_filter){let e=`${http_prefix}/lua/pro/rest/v2/check/filter.lua?query=${this.bpf_filter}`,t=await ntopng_utility.http_request(e,null,!1,!0);if(this.invalid_bpf=!t.response,1==this.invalid_bpf)return}let e={ifid:ntopng_url_manager.get_url_entry("ifid"),epoch_begin:ntopng_url_manager.get_url_entry("epoch_begin"),epoch_end:ntopng_url_manager.get_url_entry("epoch_end"),bpf_filter:this.bpf_filter},t=ntopng_url_manager.obj_to_url_params(e);if(1==this.extract_now){let e=`${http_prefix}/lua/rest/v2/get/pcap/live_extraction.lua?${t}`;window.open(e,"_self",!1)}else{let e=`${http_prefix}/lua/traffic_extraction.lua?${t}`,n=(await ntopng_utility.http_request(e,null,!1,!0)).id,a=i18n("traffic_recording.extraction_scheduled"),s=i18n("traffic_recording.traffic_extraction_jobs"),l=`<a href="/lua/if_stats.lua?ifid=${ntopng_url_manager.get_url_entry("ifid")}&page=traffic_recording&tab=jobs&job_id=${n}">${s}</a>`;a=a.replace("%{page}",l),a=`${a} ${n}`,ntopng_events_manager.emit_custom_event(ntopng_custom_events.SHOW_GLOBAL_ALERT_INFO,a)}this.$refs.modal.close()},show:async function(e){if(null==e){let t=ntopng_url_manager.get_url_params(),n=`${http_prefix}/lua/pro/rest/v2/get/db/filter/bpf.lua?${t}`,a=await ntopng_utility.http_request(n);if(null==a||null==a.bpf)return void console.error(`modal-traffic-extraction: ${n} return null value`);e=a.bpf}let t=ntopng_status_manager.get_status();if(null==t.epoch_begin||null==t.epoch_end)return void console.error("modal-traffic-extraction: epoch_begin and epoch_end undefined in url");let n=new Date(1e3*t.epoch_begin),a=new Date(1e3*t.epoch_end),s=i18n("traffic_recording.about_to_download_flow");s=s.replace("%{date_begin}",this.format_date(n)),s=s.replace("%{date_end}",this.format_date(a)),this.description=s,this.bpf_filter=e,this.$refs.modal.show()},show_hide_menu:function(){this.show_menu=!this.show_menu}}});const Af=e=>(ua("data-v-0be978c4"),e=e(),da(),e),Tf=["innerHTML"],Ef={style:{height:"95%"}},Pf={class:"tab-content",style:{height:"100%"}},Mf={class:"row"},If={class:"form-group mb-3 col-md-3 has-feedback"},Of={class:"form-group mb-3 col-md-9 text-right asd"},Uf={class:"radio-inline",style:{"margin-left":"1rem"}},Ff={class:"radio-inline"},Rf={class:"row",id:"pcapDownloadModal_advanced",style:{}},Df={class:"form-group mb-3 col-md-12 has-feedback"},jf=Af((()=>Ll("br",null,null,-1))),Lf={class:"form-label"},Vf=Af((()=>Ll("a",{class:"ntopng-external-link",href:"https://www.ntop.org/guides/n2disk/filters.html"},[Ll("i",{class:"fas fa-external-link-alt"})],-1))),zf={class:"input-group"},Bf=Af((()=>Ll("span",{class:"input-group-addon"},[Ll("span",{class:"glyphicon glyphicon-filter"})],-1))),qf=Af((()=>Ll("br",null,null,-1))),Hf={class:"form-label"},Gf=Af((()=>Ll("br",null,null,-1))),Kf=Af((()=>Ll("ul",null,[Ll("li",null,[ql("Host: "),Ll("i",null,"host 192.168.1.2")]),Ll("li",null,[ql("HTTP: "),Ll("i",null,"tcp and port 80")]),Ll("li",null,[ql("Traffic between hosts: "),Ll("i",null,"ip host 192.168.1.1 and 192.168.1.2")]),Ll("li",null,[ql("Traffic from an host to another: "),Ll("i",null,"ip src 192.168.1.1 and dst 192.168.1.2")])],-1)));dp("\ninput ~ .alert[data-v-0be978c4] {\n  display: none;\n}\ninput:invalid ~ .alert[data-v-0be978c4] {\n  display: block;\n}\n"),Nf.render=function(e,t,n,a,s,l){const i=bs("modal");return Nl(),Il(i,{id:e.id_modal,onApply:e.apply,ref:"modal"},{title:_a((()=>[ql(Z(e.i18n("traffic_recording.pcap_extract")),1)])),body:_a((()=>[Ll("div",{class:"alert alert-info",innerHTML:e.description},null,8,Tf),Ll("form",Ef,[Ll("div",Pf,[Ll("div",Mf,[Ll("div",If,[Ll("button",{class:"btn btn-sm btn-secondary",type:"button",onClick:t[0]||(t[0]=(...t)=>e.show_hide_menu&&e.show_hide_menu(...t))},[ql(Z(e.i18n("advanced")),1),Ll("i",{class:q({"fas fa-caret-down":e.show_menu,"fas fa-caret-up":!e.show_menu})},null,2)])]),Ll("div",Of,[Ll("label",Uf,[gs(Ll("input",{type:"radio",name:"extract_now","onUpdate:modelValue":t[1]||(t[1]=t=>e.extract_now=t),value:"true",checked:""},null,512),[[Oo,e.extract_now]]),ql(" "+Z(e.i18n("traffic_recording.extract_now")),1)]),Ll("label",Ff,[gs(Ll("input",{type:"radio",name:"extract_now","onUpdate:modelValue":t[2]||(t[2]=t=>e.extract_now=t),value:"false"},null,512),[[Oo,e.extract_now]]),ql(" "+Z(e.i18n("traffic_recording.queue_as_job")),1)])])]),gs(Ll("div",Rf,[Ll("div",Df,[jf,Ll("label",Lf,[ql(Z(e.i18n("traffic_recording.filter_bpf"))+" ",1),Vf]),Ll("div",zf,[Bf,gs(Ll("input",{name:"bpf_filter","onUpdate:modelValue":t[3]||(t[3]=t=>e.bpf_filter=t),class:"form-control input-sm","data-bpf":"bpf",autocomplete:"off",spellcheck:"false"},null,512),[[Po,e.bpf_filter]]),gs(Ll("span",{style:{margin:"0px",padding:"0",display:"block"},class:"invalid-feedback"},Z(e.i18n("invalid_value")),513),[[Go,e.invalid_bpf]])]),qf,Ll("label",Hf,Z(e.i18n("traffic_recording.filter_examples"))+":",1),Gf,Kf])],512),[[Go,e.show_menu]])])])])),footer:_a((()=>[Ll("button",{type:"button",onClick:t[4]||(t[4]=(...t)=>e.apply&&e.apply(...t)),class:"btn btn-primary"},Z(e.i18n("apply")),1)])),_:1},8,["id","onApply"])},Nf.__scopeId="data-v-0be978c4",Nf.__file="http_src/vue/modal-traffic-extraction.vue";var Wf=Ga({components:{},props:{id:String},emits:[],created(){},data:()=>({show_alert:!1,i18n:e=>i18n(e),body:""}),mounted(){ntopng_events_manager.on_custom_event(this.$props.id,ntopng_custom_events.SHOW_GLOBAL_ALERT_INFO,(e=>this.show(e)))},methods:{close:function(){this.show_alert=!1},show:function(e){this.show_alert=!0,this.body=e}}});const Jf={key:0,style:{width:"100%"},class:"alert alert-success alert-dismissable"},Yf=["innerHTML"];Wf.render=function(e,t,n,a,s,l){return 1==e.show_alert?(Nl(),Ml("div",Jf,[Ll("span",{innerHTML:e.body},null,8,Yf),Ll("button",{type:"button",onClick:t[0]||(t[0]=(...t)=>e.close&&e.close(...t)),class:"btn-close","aria-label":"Close"})])):Gl("v-if",!0)},Wf.__file="http_src/vue/alert-info.vue";const Zf=Ll("tbody",null,null,-1);var Xf={__name:"datatable",props:{table_buttons:Array,columns_config:Array,data_url:String,enable_search:Boolean,filter_buttons:{type:Array,required:!1},table_config:{type:Object,required:!1},base_url:String,base_params:Object},setup(e,{expose:t}){const n=e;let a=n.base_params;const s=pn(null);function l(){!function(){let e,t=JSON.parse(localStorage.getItem(s.value))||[];0!==t.length&&n.columns_config.forEach((function(n){e=t.find((function(e){return e.targets===n.targets})),e&&(n.width=e.width+"px")}))}();let e=!1,t={serverSide:!1,scrollX:!0,destroy:!0,searching:n.enable_search,order:[[0,"asc"]],pagingType:"full_numbers",columnDefs:n.columns_config,columns:n.columns_config,autoWidth:!1,ajax:{method:"get",url:n.data_url,dataSrc:"rsp",data:(e,t)=>{if(0==Object.keys(e).length)return;const n=t.oInstance.api(),a=e.order[0].column,s=n.column(a).name()||void 0;return e.order&&(e.order=e.order[0].dir,e.sort=s),void 0!==e.columns&&delete e.columns,void 0!==e.search&&(e.map_search=e.search.value,delete e.search),e},beforeSend:function(){NtopUtils.showOverlays()}},initComplete:function(e){$("#"+s.value.id+"_wrapper .dataTables_scrollHead thead th").resizable({handles:"e",alsoResize:"#"+s.value.id+"_wrapper .dataTables_scrollHead table",stop:function(){var e,t,n,a;a=JSON.parse(localStorage.getItem(s.value))||[],i.columns().every((function(s){n=a.findIndex((function(e){return e.targets===s})),t=this.header(),e=$(t).width(),-1!==n?a[n].width=e:a.push({targets:s,width:e})})),localStorage.setItem(s.value,JSON.stringify(a)),l()}})},drawCallback:function(e){NtopUtils.hideOverlays(),ntopng_events_manager.emit_custom_event(ntopng_custom_events.DATATABLE_LOADED)}};for(const e in n.table_config||{})t[e]=n.table_config[e];let r=DataTableUtils.getStdDatatableConfig(n.table_buttons);r=DataTableUtils.extendConfig(r,t),i=$(s.value).DataTable(r);for(const t of n.filter_buttons||[]){const a=y.get_url_entry(t.filterMenuKey);if(a&&""!=a){let n=0;t.filters.forEach((e=>{e.currently_active=!1,n+=1,e.id==a&&(e.currently_active=!0,n-=1)})),n==t.filters.length&&(y.set_key_to_url(t.filterMenuKey,""),e=!0)}new DataTableFiltersMenu({filterTitle:t.filterTitle,tableAPI:i,filters:t.filters,filterMenuKey:t.filterMenuKey,columnIndex:t.columnIndex,url:n.data_url,id:t.id,removeAllEntry:t.removeAllEntry,callbackFunction:t.callbackFunction}).init()}if(e&&n.base_params){const e=y.get_url_entries();for(const[t,n]of e)a[t]=n;i.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,a)),o()}}let i=null;rs((()=>{l()}));const o=()=>{null!=i&&i.ajax.reload()},r=e=>{DataTableUtils.deleteButtonHandlers(e)};let c=!1;const u=()=>{i.clear(),i.destroy(!0),c=!0,n.columns_config.filter((e=>null!=e.handlerId)).forEach((e=>{r(e.handlerId)}))};return t({reload:o,delete_button_handlers:r,destroy_table:u,update_url:e=>{null!=i&&i.ajax.url(e)}}),ds((()=>{1!=c&&u()})),(t,n)=>(Nl(),Ml("div",null,[Ll("table",{ref_key:"table_id",ref:s,class:"table w-100 table-striped table-hover table-bordered"},[Ll("thead",null,[Ll("tr",null,[(Nl(!0),Ml(wl,null,Ss(e.columns_config,(e=>(Nl(),Ml("th",null,Z(e.columnName),1)))),256))])]),Zf],512)]))},__file:"http_src/vue/datatable.vue"};const Qf={class:"table table-hover table-borderless mb-0"},eh=["innerHTML"],th=["innerHTML"];var nh={__name:"bootstrap-table",props:{id:String,columns:Array,rows:Array,print_html_column:Function,print_html_row:Function},setup:e=>(t,n)=>(Nl(),Ml("table",Qf,[Ll("thead",null,[Ll("tr",null,[(Nl(!0),Ml(wl,null,Ss(e.columns,(t=>(Nl(),Ml("th",{scope:"col",innerHTML:e.print_html_column(t)},null,8,eh)))),256))])]),Ll("tbody",null,[(Nl(!0),Ml(wl,null,Ss(e.rows,(t=>(Nl(),Ml("tr",null,[(Nl(!0),Ml(wl,null,Ss(e.columns,(n=>(Nl(),Ml("td",{scope:"col",innerHTML:e.print_html_row(n,t)},null,8,th)))),256))])))),256))])]))};function ah(e,t){let n=e.start,a=1e3*e.step;e.series.forEach((e=>{e.name=e.label,delete e.type;let t=1e3*n;e.data=e.data.map((e=>{let n={x:t,y:e};return t+=a,n}))})),e.xaxis={labels:{show:!0},axisTicks:{show:!0}},e.yaxis={labels:{formatter:f.getFormatter(t.measure_unit)},axisBorder:{show:!0},title:{text:t.measure_unit}}}function sh(e){return`${e.label}`}function lh(e,t){return"number"==e?t:e}function ih(e,t,n,a){if(null==e&&(e=t),0==a)return e;return`${`${n.source.label}`} ${e} (${lh(n.metric.measure_unit,n.metric.scale)})`}function oh(e){return`${e.measure_unit}_${e.scale}`}nh.__file="http_src/vue/bootstrap-table.vue";const rh=["#C6D9FD","#90EE90","#EE8434","#C95D63","#AE8799","#717EC3","#496DDB","#5A7ADE","#6986E1","#7791E4","#839BE6","#8EA4E8"];const ch={"1_chart":{value:"1_chart",label:i18n("page_stats.layout_1_per_all")},"1_chart_x_yaxis":{value:"1_chart_x_yaxis",label:i18n("page_stats.layout_1_per_y")},"1_chart_x_metric":{value:"1_chart_x_metric",label:i18n("page_stats.layout_1_per_1")}};function uh(e){return ch[e]||null}function dh(e,t,n,a){if(n.value==ch["1_chart"].value){let n=[_h(e,t,a)];return ph(n),n}if(n.value==ch["1_chart_x_yaxis"].value){let n={};t.forEach(((t,a)=>{let s=oh(t.metric),l={tsGroup:t,tsOptions:e[a]};null==n[s]?n[s]=[l]:n[s].push(l)}));let s=[];for(let e in n){let t=n[e],l=t.map((e=>e.tsOptions)),i=t.map((e=>e.tsGroup)),o=_h(l,i,a);s.push(o)}return ph(s),s}if(n.value==ch["1_chart_x_metric"].value){let n=[];return e.forEach(((e,s)=>{let l=_h([e],[t[s]],a);n.push(l)})),ph(n),n}return[]}function ph(e){let t=1==e.length;e.forEach((e=>{t||e.yaxis.filter((e=>e.show)).forEach((e=>{e.labels.minWidth=60})),e.yaxis.length<2||(e.yaxis.forEach((e=>{e.labels.offsetX=-20})),e.grid.padding.left=-7)}))}function _h(e,t,n){if(e.length!=t.length)return void console.error(`Error in timeseries-utils:tsArrayToApexOptions: tsOptionsArray ${e} different length from tsGrpupsArray ${t}`);let a=[],s=[],l={};!function(e){e[0]?.source?.name}(t);let i=null;e.forEach(((e,o)=>{let r=t[o];o>0&&(i="line");let c=function(e,t,n,a,s){let l=1e3*e.start,i=1e3*e.step,o=[],r=Object.keys(t.metric.timeseries);return e.series?.length!=r.length&&(e.series=r.map(((t,n)=>{let a=e.series.find((e=>sh(e)==t));return null!=a?a:{label:t,data:[null]}}))),e.series.forEach(((r,c)=>{let u=sh(r),d=t.metric.timeseries[u],p=1;1==d.invert_direction&&(p=-1);let _=e=>{let t=l,n=e.map((e=>{let n={x:t,y:e*p};return t+=i,n}));return n},f=t.timeseries?.find((e=>e.id==u)),h=ih(d.label,u,t,n);if(null==f||1==f.raw){let e=_(r.data),t=d.draw_type;null==t&&null!=a?t=a:null==t&&(t="area");let n={id:u,colorPalette:0,color:d.color,type:t,name:h,data:e};o.push(n)}if(1==f?.past&&g.is_object(e.additional_series)){let t=g.object_to_array(e.additional_series)[0],n={id:u,colorPalette:1,color:d.color,type:"line",name:`${h} ${s} Ago`,data:_(t)};o.push(n)}let m=(e,t,n)=>{if(null==n)return null;let a=`${h} (${e})`;null!=n&&(n*=p);let s=l,o=r.data.map((e=>{let t={x:s,y:n};return s+=i,t}));return{id:t,name:a,colorPalette:1,color:d.color,type:"line",stacked:!1,data:o}};if(1==f?.avg){let t=e.statistics?.by_serie[c].average,n=m("Avg",u,t);o.push(n)}if(1==f?.perc_95){let t=e.statistics?.by_serie[c]["95th_percentile"],n=m("95th Perc",u,t);o.push(n)}})),o}(e,r,!0,i,n);a=a.concat(c);let u=function(e,t,n){let a=t.metric,s=oh(a),l=!1,i=Object.keys(n).length,o=[];for(let e in t.metric.timeseries)l|=t.metric.timeseries[e].invert_direction;return e.forEach((e=>{let r=n[s];if(null==r){let r={seriesName:e.name,show:!0,labels:{formatter:f.getFormatter(a.measure_unit,l)},axisTicks:{show:!0},axisBorder:{show:!0},title:{text:lh(t.metric.measure_unit,t.metric.scale)},opposite:i%2==1};n[s]=r.seriesName,o.push(r)}else o.push({seriesName:r,labels:{formatter:f.getFormatter(a.measure_unit,l)},show:!1})})),o}(c,r,l);s=s.concat(u)})),function(e){let t=0,n=0,a=rh,s=d3v7.schemeCategory10;e.forEach((e=>{0==e.colorPalette?(e.color=a[t%a.length],t+=1):1==e.colorPalette&&(e.color=s[n%s.length],n+=1)}))}(a),function(e,t){let n={},a={};for(let s=0;s<t.length;s+=1){let l=t[s],i=e[s],o=i.seriesName;null==n[o]&&(n[o]=[],a[o]={min:Number.MAX_SAFE_INTEGER,max:Number.MIN_SAFE_INTEGER}),n[o].push(i);let r=a[o];l.data.forEach((e=>{r.max=Math.max(r.max,e.y),r.min=Math.min(r.min,e.y)}))}let s=(e,t)=>{if(0==e||null==e||e==Number.MAX_SAFE_INTEGER||e==Number.MIN_SAFE_INTEGER)return 0;let n=e/100*3;return t&&e>0||!t&&e<0?e+n:e-n};for(let e in n){let t=n[e],l=a[e];l.min=s(l.min,!1),l.max=s(l.max,!0),t.forEach((e=>{e.min=l.min,e.max=l.max}))}}(s,a);let o=function(e,t){return{chart:{id:g.get_random_string(),group:"timeseries"},grid:{padding:{}},fill:{opacity:.5,type:"solid",pattern:{strokeWidth:10}},stroke:{show:!0,lineCap:"butt",width:3},legend:{show:!0,showForSingleSeries:!0,position:"top",horizontalAlign:"right",onItemClick:{toggleDataSeries:!1}},series:e,yaxis:t,xaxis:{labels:{show:!0},axisTicks:{show:!0}}}}(a,s);return o}function fh(e){let t;if(null==e.source_type.sub_value)t=`${e.source_type.value}:${e.source.value}`;else{let n=e.source.sub_value;t=`${e.source_type.sub_value}:${n},${e.source_type.ts_query||e.source_type.value}:${e.metric.ts_query||e.source.value}`}return null!=e.metric.query&&(t=`${t},${e.metric.query}`),t}async function hh(e,t,n,a,s){let l,i={epoch_begin:t.epoch_begin,epoch_end:t.epoch_end};if(s){let t={zoom:n,initial_point:!0,limit:180,version:4,ts_compare:n},s=`${e}/lua/pro/rest/v2/get/timeseries/ts_multi.lua`,o={ts_requests:a.map((e=>{let n=fh(e);return{...i,...t,ts_query:n,tskey:e.source.value,ts_schema:`${e.metric.schema}`}}))},r={"Content-Type":"application/json"};l=await g.http_request(s,{method:"post",headers:r,body:JSON.stringify(o)})}else{let t=`${e}/lua/rest/v2/get/timeseries/ts.lua`,s=`ts_compare=${n}&version=4&zoom=${n}&initial_point=true&limit=180`,o=a[0],r=fh(o),c={...i,ts_query:r,tskey:o.source.value,ts_schema:`${o.metric.schema}`},u=`${t}?${y.add_obj_to_url(c,s)}`;l=[await g.http_request(u)]}return l}const mh={groupsOptionsModesEnum:ch,tsToApexOptions:ah,tsArrayToApexOptions:_h,tsArrayToApexOptionsArray:dh,getGroupOptionMode:uh,getSerieId:sh,getSerieName:ih,getTsChartsOptions:hh,getTsQuery:fh},gh=e=>(ua("data-v-937058e4"),e=e(),da(),e),vh={class:"col-12 mb-2 mt-2"},bh={class:"card h-100 overflow-hidden"},yh=["title"],wh=[gh((()=>Ll("i",{class:"fas fa-lg fa-camera-retro"},null,-1)))],xh=["title"],kh=[gh((()=>Ll("i",{class:"fas fa-lg fa-download"},null,-1)))],$h={class:"form-group ms-1 me-1 mt-1"},Sh={class:"inline select2-size me-2 mt-2"},Ch={class:"inline select2-size me-2 mt-2"},Nh={class:"mt-4 card card-shadow"},Ah={class:"card-body"},Th={key:0,class:"mt-4 card card-shadow"},Eh={class:"card-body"},Ph={class:"mb-4 text-nowrap",style:{"font-size":"1.1rem"}},Mh=gh((()=>Ll("i",{class:"fa-solid fa-chart-line"},null,-1)));var Ih={__name:"page-stats",props:{csrf:String,is_ntop_pro:Boolean,source_value:String,source_sub_value:String,enable_snapshots:Boolean,is_history_enabled:Boolean,traffic_extraction_permitted:Boolean},setup(e){const t=e;g.check_and_set_default_interval_time();const a=e=>i18n(e);let s="date_time_picker",l=ntopChartApex.typeChart.TS_LINE;const i=pn({}),o=pn(!1),r=pn([]),c=pn(null),u=pn(null),d=pn(null),p=pn(null),_=pn([]),h=pn({}),m=null!=L_.get_current_page_source_type().table_value,b=pn([]),w=g.object_to_array(mh.groupsOptionsModesEnum),x=pn(function(){let e=y.get_url_entry("timeseries_groups_mode");if(null!=e&&""!=e)return mh.getGroupOptionMode(e);return w[0]}());let k=null;const $={label:i18n("page_stats.custom_metrics"),currently_active:!1},S="timeseries",C=pn(!1);os((async()=>{!function(){let e=L_.get_current_page_source_type();if(null!=t.source_value&&""!=t.source_value){let n=L_.get_source_type_key_value_url(e);y.set_key_to_url(n,t.source_value)}if(e.sub_value&&null!=t.source_sub_value&&""!=t.source_sub_value){let n=L_.get_source_type_key_sub_value_url(e);y.set_key_to_url(n,t.source_sub_value)}}(),await async function(){if(0==m||!t.is_ntop_pro)return;!function(e){const a=2;let s=[{columnName:i18n("application"),name:"application",data:"protocol",className:"text-nowrap",responsivePriority:1,handlerId:"page-stats-action-link-application",render:(e,t,n)=>{let a={handlerId:"page-stats-action-link-application",onClick:()=>{console.log(e),console.log(n),async function(e,t){let n=_.value.find((n=>n.schema==e&&n.query==t));if(null==n)return void console.error(`metric = ${e}, query = ${t} not found.`);let a=await A(n);d.value.set_timeseries_groups(k),d.value.add_ts_group(a[0],!0)}(`top:${n.ts_schema}`,n.ts_query)}};return O.createLinkCallback({text:e.label,handler:a})}},{columnName:i18n("traffic"),name:"traffic",data:"traffic",orderable:!1,className:"text-nowrap",responsivePriority:1,render:e=>n.bytesToSize(e)},{columnName:i18n("percentage"),name:"traffic_perc",data:"percentage",className:"text-nowrap",responsivePriority:1,render:e=>{const t=e.toFixed(1);return n.createProgressBar(t)}}];if(t.is_history_enabled){let e="page-stats-action-jump-historical";s.push({columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:e,render:(t,n,a)=>{const s={handlerId:e,onClick:()=>{let e=y.serialize_param("l7proto",`${a.protocol.id};eq`),t=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${y.get_url_entry("epoch_begin")}&epoch_end=${y.get_url_entry("epoch_end")}&${e}`,n=L_.get_current_page_source_type(),s="";if("host"==n.value){let e=`ifid=${y.get_url_entry("ifid")}`,t=y.serialize_param("ip",`${t};eq`);s=`${e}&${t}`}else{if("ifid"!=n.value)throw"page-stats:set_table_configuration source_type not managed";s=`ifid=${y.get_url_entry("ifid")}`}t=`${t}&${s}`,console.log(t),window.open(t)}};return O.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:s}])}})}const l={table_buttons:[],columns_config:s,data_url:e,enable_search:!0,table_config:{serverSide:!1,order:[[a,"desc"]]}};o.value=!0,i.value=l}(await B())}()})),rs((async()=>{!async function(){let e,t=!0,n=await L_.get_timeseries_groups_from_url(http_prefix);null==n&&(t=!1,e=y.get_url_entry("ts_schema"),""==e&&(e=null),n=await L_.get_default_timeseries_groups(http_prefix,e));_.value=await N(t),h.value=1==t?$:L_.get_default_metric(_.value,e);C.value=!0,await z(n)}(),await Promise.all([ntopng_sync.on_ready(s)])}));async function N(e,a){if(!a&&null==e)return s.value;let s=await L_.get_metrics(http_prefix);if(e&&s.push($),(null==R||a)&&(R=await async function(){if(!t.enable_snapshots)return;let e=`${http_prefix}/lua/pro/rest/v2/get/filters/snapshots.lua?page=timeseries`,n=await g.http_request(e),a=g.object_to_array(n),s=a.map((e=>({...e,is_snapshot:!0,label:`${e.name}`,group:"Snapshots"})));return console.log(a),s}()),t.enable_snapshots){R.forEach((e=>s.push(e)))}return s.sort(n.sortAlphabetically),s}async function A(e){let t=L_.get_current_page_source_type(),n=await L_.get_default_source(http_prefix,t);return[L_.get_ts_group(t,n,e)]}async function T(e){if(1==e.is_snapshot){let t=e.filters,n=y.get_url_entry("timeseries_groups",t),a=await L_.get_timeseries_groups_from_url(http_prefix,n);x.value=mh.getGroupOptionMode(y.get_url_entry("timeseries_groups_mode",t)),await z(a)}else await async function(){let e=await async function(){return A(h.value)}();await z(e)}(),j(!1)}function E(e){console.log(e);let n=h.value.label==$.label;z(k),async function(){if(0==m||!t.is_ntop_pro)return;const e=await B();u.value.update_url(e),u.value.reload()}(),j(n,!0)}function P(e){console.log("chart reloaded")}function M(){p.value.show()}function I(){null!=k&&d.value.show(k)}function U(e){return console.log("get_f_"),async t=>(console.log("get_charts_options"),b.value[e].chart_options)}let F,R=null;function D(){j(h.value.label==$.label,!0)}async function j(e,t){_.value=await N(e,t),e&&(h.value=$)}async function L(e){console.log("apply modal-timeseries in page-stats"),j(!0),await z(e)}function V(){z(k,!0)}async function z(e,n){let a=v.get_status(),s=function(e){let t=Number.parseInt((e.epoch_end-e.epoch_begin)/60);return t<=5?"5m":t<=30?"30m":t<=60?"1h":t<=1440?"1d":t<=10080?"1w":t<=43200?"1M":"1Y"}(a);n||(F=await mh.getTsChartsOptions(http_prefix,a,s,e,t.is_ntop_pro)),console.log(F),console.log(e),function(e,t){e.forEach(((e,n)=>{let a=t[n]?.query?.label;null!=a&&(e.source.label=a)}))}(e,F),function(e){b.value=e.map(((e,t)=>({key:g.get_random_string(),chart_options:e})))}(mh.tsArrayToApexOptionsArray(F,e,x.value,s)),function(e,t,n){let a=!0;const s=e=>"bps"==e?"bytes_network":e;H.value=[],e.forEach(((e,l)=>{let i=t[l];e.series.forEach(((t,l)=>{let o=mh.getSerieId(t),r=i.metric.timeseries[o],c=f.getFormatter(i.metric.measure_unit),u=e.statistics?.by_serie[l];if(null==u)return;let d=mh.getSerieName(r.label,o,i,a),p=null,_=s(i.metric.measure_unit),h=f.getFormatter(_);if(null!=u.total){p=(n.epoch_end-n.epoch_begin)*u.average}let m={metric:d,total:h(p),perc_95:c(u["95th_percentile"]),avg:c(u.average),max:c(u.max_val),min:c(u.min_val)};H.value.push(m)}))}))}(F,e,a),k=e,console.log("SET last_timeseries_groups_loaded"),console.log(k),y.set_key_to_url("timeseries_groups_mode",x.value.value),L_.set_timeseries_groups_in_url(k)}async function B(){let e=L_.get_current_page_source_type(),t={source_type:e,source:await L_.get_default_source(http_prefix,e),metric:{}};if(e.sub_value){let n=await L_.get_default_sub_source(http_prefix,e.sub_value);t.sub_source=n}let n=mh.getTsQuery(t),a=e.table_value,s=`${http_prefix}/lua/pro/rest/v2/get/${a}/top/ts_stats.lua`,l={zoom:"5m",ts_query:n,epoch_begin:`${y.get_url_entry("epoch_begin")}`,epoch_end:`${y.get_url_entry("epoch_end")}`,detail_view:"top_protocols",new_charts:"true"};return`${s}?${y.add_obj_to_url(l,"")}`}let q=[{id:"metric",label:a("page_stats.metric")},{id:"avg",label:a("page_stats.average")},{id:"perc_95",label:a("page_stats.95_perc")},{id:"max",label:a("page_stats.max")},{id:"min",label:a("page_stats.min")},{id:"total",label:a("page_stats.total")}];const H=pn([]);const G=pn(null);function K(){G.value.show()}return(t,n)=>(Nl(),Ml(wl,null,[Ll("div",vh,[Vl(Wf),Ll("div",bh,[Vl(Rd,{style:{"margin-top":"0.5rem"},id:gn(s),enable_refresh:!0,ref_key:"date_time_picker",ref:c,onEpoch_change:E},{begin:_a((()=>[])),extra_buttons:_a((()=>[e.enable_snapshots?(Nl(),Ml("button",{key:0,class:"btn btn-link btn-sm",onClick:M,title:a("page_stats.manage_snapshots_btn")},wh,8,yh)):Gl("v-if",!0),e.traffic_extraction_permitted?(Nl(),Ml("button",{key:1,class:"btn btn-link btn-sm",onClick:K,title:a("traffic_recording.pcap_download")},kh,8,xh)):Gl("v-if",!0)])),_:1},8,["id"]),Gl(" select metric "),gs(Ll("div",$h,[Ll("div",Sh,[Vl(Fd,{selected_option:h.value,"onUpdate:selected_option":n[0]||(n[0]=e=>h.value=e),options:_.value,onSelect_option:T},null,8,["selected_option","options"])]),Ll("div",Ch,[Vl(Fd,{selected_option:x.value,"onUpdate:selected_option":n[1]||(n[1]=e=>x.value=e),options:gn(w),onSelect_option:V},null,8,["selected_option","options"])]),e.is_ntop_pro?(Nl(),Ml("button",{key:0,type:"button",onClick:I,class:"btn btn-sm btn-primary inline",style:{"vertical-align":"super"}}," Manage Timeseries ")):Gl("v-if",!0)],512),[[Go,C.value]]),(Nl(!0),Ml(wl,null,Ss(b.value,((e,t)=>(Nl(),Ml("div",{key:e.key,class:"m-3",style:{height:"300px"}},[Vl(Pd,{id:gn("chart")+t,ref_for:!0,ref:e=>{r.value[t]=e},chart_type:gn(l),register_on_status_change:!1,get_custom_chart_options:U(t),onZoom:E,onChart_reloaded:P},null,8,["id","chart_type","get_custom_chart_options"])])))),128))]),Ll("div",Nh,[Ll("div",Ah,[Vl(nh,{id:"page_stats_bootstrap_table",columns:gn(q),rows:H.value,print_html_column:e=>function(e){return e.label}(e),print_html_row:(e,t)=>function(e,t){return t[e.id]}(e,t)},null,8,["columns","rows","print_html_column","print_html_row"])])]),1==gn(m)&&e.is_ntop_pro?(Nl(),Ml("div",Th,[Ll("div",Eh,[Ll("div",Ph,[Mh,ql(" "+Z(a("page_stats.top_applications")),1)]),o.value?(Nl(),Il(Xf,{key:0,ref_key:"top_applications_table",ref:u,table_buttons:i.value.table_buttons,columns_config:i.value.columns_config,data_url:i.value.data_url,enable_search:i.value.enable_search,table_config:i.value.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])):Gl("v-if",!0)])])):Gl("v-if",!0)]),e.enable_snapshots?(Nl(),Il(Kp,{key:0,ref_key:"modal_snapshot",ref:p,csrf:e.csrf,page:S,onAdded_snapshot:D,onDeleted_snapshots:D,onDeleted_all_snapshots:D},null,8,["csrf"])):Gl("v-if",!0),e.is_ntop_pro?(Nl(),Il(Cf,{key:1,ref_key:"modal_timeseries",ref:d,onApply:L},null,512)):Gl("v-if",!0),Vl(Nf,{id:"page_stats_modal_traffic_extraction",ref_key:"modal_traffic_extraction",ref:G},null,512)],64))}};dp("\n.inline[data-v-937058e4] {\n    display: inline-block;\n}\n.select2-size[data-v-937058e4] {\n    min-width: 18rem;\n}\n"),Ih.__scopeId="data-v-937058e4",Ih.__file="http_src/vue/page-stats.vue";var Oh=Ga({components:{},props:{id:String,tab_list:Array},emits:["click_item"],created(){},data:()=>({old_tab:null}),mounted(){let e;this.tab_list.forEach((function(t){t.active&&(e=t)})),null==e&&(e=this.tab_list[0]),this.old_tab=e.id||e.name,ntopng_sync.ready(this.$props.id)},methods:{change_tab:function(e){e.id&&this.old_tab==e.id||e.name&&this.old_tab==e.name||(this.old_tab=e.id||e.name,this.$emit("click_item",e))}}});const Uh={class:"card-header mb-2"},Fh={class:"nav nav-tabs card-header-tabs",role:"tablist"},Rh=["onClick"],Dh=["onClick"];Oh.render=function(e,t,n,a,s,l){return Nl(),Ml("div",Uh,[Ll("ul",Fh,[(Nl(!0),Ml(wl,null,Ss(e.tab_list,(t=>(Nl(),Ml(wl,null,[t.active?(Nl(),Ml("li",{key:0,onClick:n=>e.change_tab(t),class:q([{active:t.active},"nav-item nav-link"])},Z(t.title),11,Rh)):(Nl(),Ml("a",{key:1,onClick:n=>e.change_tab(t),href:"#",class:"nav-item nav-link"},Z(t.title),9,Dh))],64)))),256))])])},Oh.__file="http_src/vue/tab-list.vue";var jh={__name:"modal-delete-confirm",props:{body:String,title:String},emits:["delete"],setup(e,{expose:t,emit:n}){const a=pn(null),s=()=>{n("delete"),l()},l=()=>{a.value.close()};t({show:()=>{a.value.show()},close:l}),rs((()=>{}));const i=e=>i18n(e);return(t,n)=>(Nl(),Il(pp,{onShowed:n[0]||(n[0]=e=>{}),ref_key:"modal_id",ref:a},{title:_a((()=>[ql(Z(e.title),1)])),body:_a((()=>[ql(Z(e.body),1)])),footer:_a((()=>[Ll("button",{type:"button",onClick:s,class:"btn btn-danger"},Z(i("delete")),1)])),_:1},512))},__file:"http_src/vue/modal-delete-confirm.vue"};const Lh="change_asset_table_tab_event";var Vh={components:{datatable:Xf,"modal-delete-confirm":jh,"tab-list":Oh},props:{page_csrf:String,url_params:Object,view:String,table_filters:Array},created(){y.set_key_to_url("asset_family",this.$props.url_params.asset_family),function(e){const t=[];let n=[];e.get_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,url_params),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,n,a,s){e.reload_table()}});let a=url_params;a.view="standard";let s={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,a),enable_search:!0},l=[];for(let t of e.$props.table_filters||[])t.callbackFunction=(n,s)=>{a.view=e.asset_table_tab,a[t.filterMenuKey]=s.id,y.set_key_to_url(t.filterMenuKey,s.id),n.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,a)),NtopUtils.showOverlays(),n.ajax.reload(),NtopUtils.hideOverlays()},l.push(t);n=[{columnName:i18n("map_page.client"),name:"client",data:"client",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.server"),name:"server",data:"server",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.asset_family"),name:"family",data:"family",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.last_seen"),name:"last_seen",data:"last_seen",className:"text-center",responsivePriority:2}];let i=ntopng_utility.clone(s);i.table_config={serverSide:!1,order:[[3,"desc"]]},i.columns_config=n,i.table_filters=l,e.config_devices_standard=i,a.view="centrality",s.data_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,a),n=[{columnName:i18n("map_page.host"),name:"host",data:"host",className:"text-nowrap",render:(e,t)=>e.label,responsivePriority:1},{columnName:i18n("map_page.asset_total_edges"),name:"total_edges",data:"total_edges",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.asset_in_edges"),name:"in_edges",data:"in_edges",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.asset_out_edges"),name:"out_edges",data:"out_edges",className:"text-center",responsivePriority:2}];let o=ntopng_utility.clone(s);o.table_config={serverSide:!1,order:[[1,"desc"]]},o.columns_config=n,o.table_filters=l,console.log(i),console.log(o),e.config_devices_centrality=o}(this)},mounted(){this.asset_table_tab=y.get_url_entry("view")||"standard",this.tab_list.forEach((e=>{this.asset_table_tab==e.id?e.active=!0:e.active=!1})),k.on_custom_event("page_asset_table",ntopng_custom_events.DATATABLE_LOADED,(()=>{y.get_url_entry("host")&&this.hide_dropdowns()})),k.on_custom_event("change_asset_table_tab",Lh,(e=>{let t=this.get_active_table();y.set_key_to_url("view",e),t.destroy_table(),this.asset_table_tab=e})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog()))},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null,title_delete:i18n("map_page.delete_assets"),body_delete:i18n("map_page.delete_assets_message"),title_download:i18n("map_page.download"),body_download:i18n("map_page.download_message"),get_url:null,asset_table_tab:null,tab_list:[{title:i18n("map_page.standard_view"),active:"standard"==view,id:"standard"},{title:i18n("map_page.centrality_view"),active:"centrality"==view,id:"centrality"}]}),methods:{destroy:function(){this.get_active_table().destroy_table()},click_item:function(e){this.tab_list.forEach((e=>e.active=!1)),e.active=!0,k.emit_custom_event(Lh,e.id)},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",page:this.url_params.page,csrf:this.$props.page_csrf,map:this.url_params.map};try{let n={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:n,body:JSON.stringify(t)}),this.reload_table()}catch(e){this.reload_table()}},hide_dropdowns:function(){$("#network_dropdown").removeClass("d-inline"),$("#vlan_id_dropdown").removeClass("d-inline"),$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},get_active_table:function(){return this.$refs[`table_asset_${this.asset_table_tab}`]},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()}}};const zh={class:"row"},Bh={class:"col-md-12 col-lg-12"},qh=Ll("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),Hh={class:"card"},Gh=Ll("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Ll("div",{class:"text-center"},[Ll("div",{class:"spinner-border text-primary mt-5",role:"status"},[Ll("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Kh={class:"card-body"},Wh={id:"table_asset"},Jh=ql(' :table_config="config_devices_standard.table_config"> '),Yh=ql(' :table_config="config_devices_centrality.table_config"> '),Zh={class:"card-footer"},Xh={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Qh=Ll("i",{class:"fas fa-trash"},null,-1),em=["href"],tm=[Ll("i",{class:"fas fa-download"},null,-1)];Vh.render=function(e,t,n,a,s,l){const i=bs("modal-delete-confirm"),o=bs("tab-list"),r=bs("datatable");return Nl(),Ml("div",zh,[Ll("div",Bh,[qh,Ll("div",Hh,[Gh,Ll("div",Kh,[Ll("div",Wh,[Vl(i,{ref:"modal_delete_all",title:s.title_delete,body:s.body_delete,onDelete:l.delete_all},null,8,["title","body","onDelete"]),Vl(o,{ref:"asset_tab_list",id:"asset_tab_list",tab_list:s.tab_list,onClick_item:l.click_item},null,8,["tab_list","onClick_item"]),"standard"==s.asset_table_tab?(Nl(),Il(r,{key:0,ref:"table_asset_standard",table_buttons:s.config_devices_standard.table_buttons,columns_config:s.config_devices_standard.columns_config,data_url:s.config_devices_standard.data_url,enable_search:s.config_devices_standard.enable_search,filter_buttons:s.config_devices_standard.table_filters},{default:_a((()=>[Jh])),_:1},8,["table_buttons","columns_config","data_url","enable_search","filter_buttons"])):Gl("v-if",!0),"centrality"==s.asset_table_tab?(Nl(),Il(r,{key:1,ref:"table_asset_centrality",table_buttons:s.config_devices_centrality.table_buttons,columns_config:s.config_devices_centrality.columns_config,data_url:s.config_devices_centrality.data_url,enable_search:s.config_devices_centrality.enable_search,filter_buttons:s.config_devices_centrality.table_filters},{default:_a((()=>[Yh])),_:1},8,["table_buttons","columns_config","data_url","enable_search","filter_buttons"])):Gl("v-if",!0)])]),Ll("div",Zh,[Ll("button",Xh,[Qh,ql(" "+Z(s.i18n("map_page.delete_assets")),1)]),Ll("a",{href:s.get_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"asset_map.json",target:"_blank"},tm,8,em)])])])])},Vh.__file="http_src/vue/page-asset-table.vue";var nm={components:{datatable:Xf,"modal-delete-confirm":jh},props:{page_csrf:String,url_params:Object,view:String,table_filters:Array,is_admin:Boolean},created(){!function(e){const t=[];let n=[],a=0;e.get_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,url_params),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,n,a,s){e.reload_table()}});let s=ntopng_utility.clone(url_params);s.view=null;let l={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,s),enable_search:!0},i=[];for(let t of e.$props.table_filters||[])t.callbackFunction=(e,n)=>{s[t.filterMenuKey]=n.id,y.set_key_to_url(t.filterMenuKey,n.id),e.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,s)),NtopUtils.showOverlays(),e.ajax.reload(),NtopUtils.hideOverlays()},i.push(t);n=[{columnName:i18n("map_page.last_seen"),name:"last_seen",data:"last_seen",className:"text-center text-nowrap",render:(e,t)=>e.value,responsivePriority:2},{columnName:i18n("map_page.client"),name:"client",data:"client",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.server"),name:"server",data:"server",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.port"),name:"port",data:"port",className:"text-center",responsivePriority:4},{columnName:i18n("map_page.protocol"),name:"l7proto",data:"protocol",className:"text-nowrap",responsivePriority:3},{columnName:i18n("map_page.first_seen"),name:"first_seen",data:"first_seen",visible:!1,responsivePriority:3},{columnName:i18n("map_page.observations"),name:"observations",data:"observations",className:"text-center",responsivePriority:4},{columnName:i18n("map_page.frequency"),name:"frequency",data:"frequency",className:"text-center",orderable:!0,responsivePriority:4,render:(e,t,n)=>"sort"==t||"type"==t?e:e+" sec"}],a=6;let o={serverSide:!0,order:[[a,"desc"]]},r=ntopng_utility.clone(l);r.table_buttons=l.table_buttons,r.data_url=`${r.data_url}`,r.columns_config=n,r.table_filters=i,r.table_config=ntopng_utility.clone(o),e.config_devices_standard=r}(this)},mounted(){$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),ntopng_events_manager.on_custom_event("page_periodicity_table",ntopng_custom_events.DATATABLE_LOADED,(()=>{y.get_url_entry("host")&&this.hide_dropdowns()}))},data:()=>({i18n:e=>i18n(e),base_url:`${http_prefix}/lua/pro/enterprise/get_map.lua`,config_devices_standard:null,config_devices_centrality:null,title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_download:i18n("map_page.download"),body_download:i18n("map_page.download_message"),get_url:null}),methods:{hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden"),$("#network_dropdown").removeClass("d-inline"),$("#vlan_id_dropdown").removeClass("d-inline")},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",page:this.url_params.page,csrf:this.$props.page_csrf,map:this.url_params.map};try{let n={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:n,body:JSON.stringify(t)}),this.reload_table()}catch(e){this.reload_table()}},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},destroy:function(){this.get_active_table().destroy_table()},get_active_table:function(){return this.$refs.table_periodicity},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()}}};const am={class:"row"},sm={class:"col-md-12 col-lg-12"},lm=Ll("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),im={class:"card"},om=Ll("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Ll("div",{class:"text-center"},[Ll("div",{class:"spinner-border text-primary mt-5",role:"status"},[Ll("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),rm={class:"card-body"},cm={id:"periodicity-table"},um={class:"card-footer"},dm={key:0,type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},pm=Ll("i",{class:"fas fa-trash"},null,-1),_m=["href"],fm=[Ll("i",{class:"fas fa-download"},null,-1)];nm.render=function(e,t,n,a,s,l){const i=bs("modal-delete-confirm"),o=bs("datatable");return Nl(),Ml("div",am,[Ll("div",sm,[lm,Ll("div",im,[om,Ll("div",rm,[Ll("div",cm,[Vl(i,{ref:"modal_delete_all",title:s.title_delete,body:s.body_delete,onDelete:l.delete_all},null,8,["title","body","onDelete"]),Vl(o,{ref:"table_periodicity",table_buttons:s.config_devices_standard.table_buttons,columns_config:s.config_devices_standard.columns_config,data_url:s.config_devices_standard.data_url,enable_search:s.config_devices_standard.enable_search,filter_buttons:s.config_devices_standard.table_filters,table_config:s.config_devices_standard.table_config,base_url:s.base_url,base_params:n.url_params},null,8,["table_buttons","columns_config","data_url","enable_search","filter_buttons","table_config","base_url","base_params"])])]),Ll("div",um,[n.is_admin?(Nl(),Ml("button",dm,[pm,ql(" "+Z(s.i18n("map_page.delete_services")),1)])):Gl("v-if",!0),Ll("a",{href:s.get_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"periodicity_map.json",target:"_blank"},fm,8,_m)])])])])},nm.__file="http_src/vue/page-periodicity-table.vue";const hm={autoResize:!0,nodes:{shape:"dot",scaling:{min:10,max:30,label:{min:15,max:15}},shadow:!1},edges:{width:.15,color:{inherit:"from"},smooth:{type:"continuous",roundness:0}},interaction:{tooltipDelay:150,hideEdgesOnDrag:!0,hideEdgesOnZoom:!0,hover:!0,tooltipDelay:0},physics:{barnesHut:{springConstant:0,avoidOverlap:.3,gravitationalConstant:-1e3,damping:.65,centralGravity:0},stabilization:{onlyDynamicEdges:!1}},groups:{unknown:{shape:"dot"},printer:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},video:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},workstation:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},laptop:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},tablet:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},phone:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},tv:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},networking:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},wifi:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},nas:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},multimedia:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}},iot:{shape:"icon",icon:{face:"'FontAwesome'",code:"",size:50,weight:700}}}},mm=function(e,t,n,a){$.post(`${http_prefix}/lua/pro/enterprise/switch_service_state.lua`,{service_id:e,service_status:t,csrf:a}).then((e=>{e.success&&n&&n()}))},gm=function(){return hm},vm="change_service_table_tab_event";var bm={components:{datatable:Xf,"modal-delete-confirm":jh,"tab-list":Oh},props:{page_csrf:String,url_params:Object,view:String,table_filters:Array,is_admin:Boolean,service_acceptance:Array},created(){!function(e){const t=[];let n=[],a=0;e.get_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,url_params),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,n,a,s){e.reload_table()}});let s=url_params;s.view="standard";let l={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,s),enable_search:!0},i=[];for(let t of e.$props.table_filters||[])t.callbackFunction=(n,a)=>{s.view=e.service_table_tab,s[t.filterMenuKey]=a.id,y.set_key_to_url(t.filterMenuKey,a.id),n.ajax.url(NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,s)),NtopUtils.showOverlays(),n.ajax.reload(),NtopUtils.hideOverlays()},i.push(t);n=[{columnName:i18n("map_page.last_seen"),name:"last_seen",data:"last_seen",className:"text-center text-nowrap",render:(e,t)=>e.value,responsivePriority:2,createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("map_page.client"),name:"client",data:"client",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.server"),name:"server",data:"server",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.port"),name:"port",data:"port",className:"text-center",responsivePriority:4},{columnName:i18n("map_page.protocol"),name:"l7proto",data:"protocol",className:"text-nowrap",responsivePriority:3},{columnName:i18n("map_page.first_seen"),name:"first_seen",data:"first_seen",visible:!1,responsivePriority:3},{columnName:i18n("map_page.num_uses"),name:"num_uses",data:"num_uses",className:"text-center text-nowrap",responsivePriority:4},{columnName:i18n("map_page.info"),name:"info",data:"info",responsivePriority:5}],a=6,e.is_admin&&n.push({columnName:i18n("map_page.status"),name:"service_acceptance",data:"service_acceptance",className:"text-center",orderable:!1,responsivePriority:1,render:(t,n,a)=>e.create_action_buttons(t,n,a)});let o={serverSide:!0,order:[[a,"desc"]]},r=ntopng_utility.clone(l);r.table_buttons=l.table_buttons,r.data_url=`${r.data_url}`,r.columns_config=n,r.table_filters=i,r.table_config=ntopng_utility.clone(o),e.config_devices_standard=r,s.view="centrality",l.data_url=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/get_map.lua`,s),n=[{columnName:i18n("map_page.host"),name:"host",data:"host",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.total_edges"),name:"total_edges",data:"total_edges",className:"text-nowrap",responsivePriority:1},{columnName:i18n("map_page.rank"),name:"rank",data:"rank",className:"text-center",responsivePriority:2},{columnName:i18n("map_page.in_edges"),name:"in_edges",data:"in_edges",className:"text-nowrap",responsivePriority:2},{columnName:i18n("map_page.out_edges"),name:"out_edges",data:"out_edges",className:"text-center",responsivePriority:2}],a=2,o.order=[[a,"desc"]],r=ntopng_utility.clone(l),r.table_buttons=l.table_buttons,r.data_url=`${r.data_url}`,r.columns_config=n,r.table_filters=i,r.table_config=ntopng_utility.clone(o),e.config_devices_centrality=r}(this)},mounted(){this.service_table_tab=this.$props.url_params.view,this.tab_list.forEach((e=>{this.service_table_tab==e.id?e.active=!0:e.active=!1})),k.on_custom_event("page_service_table",ntopng_custom_events.DATATABLE_LOADED,(()=>{y.get_url_entry("host")&&this.hide_dropdowns()})),k.on_custom_event("change_service_table_tab",vm,(e=>{let t=this.get_active_table();y.set_key_to_url("view",e),t.delete_button_handlers(this.service_table_tab),t.destroy_table(),this.service_table_tab=e})),$("#btn-delete-all").click((()=>this.show_delete_all_dialog()))},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null,title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),get_url:null,service_table_tab:null,tab_list:[{title:i18n("map_page.standard_view"),active:"standard"==view,id:"standard"},{title:i18n("map_page.centrality_view"),active:"centrality"==view,id:"centrality"}]}),methods:{hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden"),$("#network_dropdown").removeClass("d-inline"),$("#vlan_id_dropdown").removeClass("d-inline")},destroy:function(){let e=this.get_active_table();e.delete_button_handlers(this.service_table_tab),e.destroy_table()},click_item:function(e){this.tab_list.forEach((e=>e.active=!1)),e.active=!0,k.emit_custom_event(vm,e.id)},create_action_buttons:function(e,t,n){const a=this.reload_table,s=this.$props.page_csrf,l={onClick:()=>{mm(n.hash_id,this.$props.service_acceptance[0].id,a,s)}},i={onClick:()=>{mm(n.hash_id,this.$props.service_acceptance[1].id,a,s)}},o={onClick:()=>{mm(n.hash_id,this.$props.service_acceptance[2].id,a,s)}};if("display"!==t)return e;const r=n.acceptance,c={class:"dropdown-item",href:"#",title:this.$props.service_acceptance[0].label,handler:l},u={class:"dropdown-item",href:"#",title:this.$props.service_acceptance[1].label,handler:i},d={class:"dropdown-item disabled",href:"#",title:this.$props.service_acceptance[2].label,handler:o};switch(r){case 0:c.class="dropdown-item active";break;case 1:u.class="dropdown-item active";break;case 2:d.class="dropdown-item active disabled"}return DataTableUtils.createActionButtons([d,c,u])},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",page:this.url_params.page,csrf:this.$props.page_csrf,map:this.url_params.map};try{let n={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:n,body:JSON.stringify(t)}),this.reload_table()}catch(e){this.reload_table()}},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},get_active_table:function(){return this.$refs[`table_service_${this.service_table_tab}`]},switch_to_standard:function(){this.url_params.view="standard",document.location.href=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/network_maps.lua`,url_params)},switch_to_centrality:function(){this.url_params.view="centrality",document.location.href=NtopUtils.buildURL(`${http_prefix}/lua/pro/enterprise/network_maps.lua`,url_params)},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()}}};const ym={class:"row"},wm={class:"col-md-12 col-lg-12"},xm=Ll("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),km={class:"card"},$m=Ll("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Ll("div",{class:"text-center"},[Ll("div",{class:"spinner-border text-primary mt-5",role:"status"},[Ll("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Sm={class:"card-body"},Cm={id:"table_service"},Nm={class:"card-footer"},Am={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Tm=Ll("i",{class:"fas fa-trash"},null,-1),Em=["href"],Pm=[Ll("i",{class:"fas fa-download"},null,-1)];bm.render=function(e,t,n,a,s,l){const i=bs("modal-delete-confirm"),o=bs("tab-list"),r=bs("datatable");return Nl(),Ml("div",ym,[Ll("div",wm,[xm,Ll("div",km,[$m,Ll("div",Sm,[Ll("div",Cm,[Vl(i,{ref:"modal_delete_all",title:s.title_delete,body:s.body_delete,onDelete:l.delete_all},null,8,["title","body","onDelete"]),Vl(o,{ref:"service_tab_list",id:"service_tab_list",tab_list:s.tab_list,onClick_item:l.click_item},null,8,["tab_list","onClick_item"]),"standard"==s.service_table_tab?(Nl(),Il(r,{key:0,ref:"table_service_standard",table_buttons:s.config_devices_standard.table_buttons,columns_config:s.config_devices_standard.columns_config,data_url:s.config_devices_standard.data_url,enable_search:s.config_devices_standard.enable_search,filter_buttons:s.config_devices_standard.table_filters,table_config:s.config_devices_standard.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","filter_buttons","table_config"])):Gl("v-if",!0),"centrality"==s.service_table_tab?(Nl(),Il(r,{key:1,ref:"table_service_centrality",table_buttons:s.config_devices_centrality.table_buttons,columns_config:s.config_devices_centrality.columns_config,data_url:s.config_devices_centrality.data_url,enable_search:s.config_devices_centrality.enable_search,filter_buttons:s.config_devices_centrality.table_filters,table_config:s.config_devices_centrality.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","filter_buttons","table_config"])):Gl("v-if",!0)])]),Ll("div",Nm,[Gl('\n        {% if is_admin then %}\n          <form class="d-inline" id=\'switch-state-form\'>\n            <div class="form-group mb-3 d-inline">\n              <label>{* i18n("map_page.set_state", {label = "<span class=\'count\'></span>"}) *}</label>\n              <select name="new_state" class="form-select d-inline" style="width: 16rem" {{ ternary(map.services_num == 0, "disabled=\'disabled\'", "") }}>\n              {% for _, status in pairsByField(map.filters.service_status_filters, label, asc_insensitive) do %}\n                <option value="{{ status.id }}">{* status.label *}</option>\n              {% end %}\n              </select>\n              <button class="btn btn-secondary d-inline" class="btn-switch-state" {{ ternary(map.services_num == 0, "disabled=\'disabled\'", "") }}>\n                <i class="fas fa-random"></i> {{ i18n("set") }}\n              </button>\n            </div>\n          </form>\n        {% end %}\n    '),Ll("button",Am,[Tm,ql(" "+Z(s.i18n("map_page.delete_services")),1)]),Ll("a",{href:s.get_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"service_map.json",target:"_blank"},Pm,8,Em)])])])])},bm.__file="http_src/vue/page-service-table.vue";const Mm={id:"empty-map-message",class:"alert alert-info",hidden:""},Im=["id"];var Om={__name:"network-map",props:{empty_message:String,event_listeners:Object,page_csrf:String,url:String,url_params:Object,map_id:String},setup(e,{expose:t}){const n=e,a={ifid:n.url_params.ifid,action:"load_graph",map:n.url_params.map_id};let s=null,l={},i={},o=null,r=!1,c=null,u={},d=!1;rs((async()=>{_(),u=n.url_params,o=document.getElementById(n.map_id);const e=NtopUtils.buildURL(n.url,u);await $.get(e,a,(function(e){const{nodes:t,edges:n,max_entry_reached:a}=e.rsp;r=a,l=new vis.DataSet(t),i=new vis.DataSet(n);const c={nodes:l,edges:i};p(c),s=new vis.Network(o,c,gm()),h(),f(),k.emit_custom_event(ntopng_custom_events.VIS_DATA_LOADED)}))})),ds((()=>{1!=d&&v()}));const p=e=>{0==e.nodes.length&&0==e.edges.length?$("#empty-map-message").removeAttr("hidden"):$("#empty-map-message").attr("hidden","hidden")},_=()=>{const e=NtopUtils.loadElementScale($(".resizable-y-container"));if(void 0!==e)$(".resizable-y-container").width(e.width),$(".resizable-y-container").height(e.height),$(".resizable-y-container").on("mouseup",(function(){const e={width:$(".resizable-y-container").width(),height:$(".resizable-y-container").height()};NtopUtils.saveElementScale($(this),e)})),$('button[data-toggle="tooltip"]').tooltip();else{const e={width:$(".resizable-y-container").width(),height:$(".resizable-y-container").height()};NtopUtils.saveElementScale($(this),e)}},f=()=>{s.on("hoverEdge",(function(){$(".vis-tooltip").css("position","absolute")})),s.on("doubleClick",(function(e){(e=>{const t=e.id.split("@");u.host=t[0],u.vlan_id=t[1],y.set_key_to_url("host",u.host),y.set_key_to_url("vlan_id",u.vlan_id),k.emit_custom_event(ntopng_custom_events.CHANGE_PAGE_TITLE,e),b()})(l.get(e.nodes[0]))})),s.on("zoom",(function(e){c=m()})),s.on("dragEnd",(function(e){g()}));for(const e in n.event_listeners||{})s.on(e,n.event_listeners[e])},h=()=>{if(!s)return;const e=s.getPositions(s.body.data.nodes.map((e=>e.id))),t={positions:e,network:{scale:s.getScale(),position:s.getViewPosition()}};$.post(n.url,{...u,csrf:n.page_csrf,JSON:JSON.stringify(t),action:"save_view"})},m=()=>(s.getScale()<=.15&&s.moveTo({scale:.4,position:{x:0,y:0},animation:{duration:1e3,easingFunction:"easeInOutCubic"}}),clearTimeout(c),setTimeout(h)),g=()=>{c&&clearTimeout(c),h()},v=()=>{s.destroy(!0),d=!0},b=async()=>{console.log(u);const e=NtopUtils.buildURL(n.url,u);await $.get(e,a,(function(e){const{nodes:t,edges:n,max_entry_reached:a}=e.rsp;r=a,l=new vis.DataSet(t),i=new vis.DataSet(n);const o={nodes:l,edges:i};p(o),s&&s.setData(o),k.emit_custom_event(ntopng_custom_events.VIS_DATA_LOADED),h()}))};return t({reload:b,destroy:v,is_max_entry_reached:()=>r,autolayout:()=>{void 0!==s?s instanceof vis.Network?(s.stabilize(),setTimeout((()=>{h()}),1e3)):console.error("Not a vis.Network instance!"):console.error("The network is undefined!")},update_url_params:e=>{u=e}}),(t,n)=>(Nl(),Ml(wl,null,[Ll("div",Mm,Z(e.empty_message),1),Ll("div",{class:"d-flex justify-content-center align-items-center resizable-y-container",style:{width:"100%",height:"60vh"},id:e.map_id},null,8,Im)],64))},__file:"http_src/vue/network-map.vue"},Um={__name:"modal-autolayout-confirm",props:{body:String,title:String},emits:["autolayout"],setup(e,{expose:t,emit:n}){const a=pn(null),s=()=>{n("autolayout"),l()},l=()=>{a.value.close()};t({show:()=>{a.value.show()},close:l}),rs((()=>{}));const i=e=>i18n(e);return(t,n)=>(Nl(),Il(pp,{onShowed:n[0]||(n[0]=e=>{}),ref_key:"modal_id",ref:a},{title:_a((()=>[ql(Z(e.title),1)])),body:_a((()=>[ql(Z(e.body),1)])),footer:_a((()=>[Ll("button",{type:"button",onClick:s,class:"btn btn-primary"},Z(i("confirm")),1)])),_:1},512))},__file:"http_src/vue/modal-autolayout-confirm.vue"};const Fm="change_filter_event";var Rm={components:{"network-map":Om,"modal-delete-confirm":jh,"modal-autolayout-confirm":Um,"select-search":Fd},props:{page_csrf:String,ifid:Number,url_params:Object,map_id:String,is_admin:Boolean,all_filter_list:Object},created(){!function(e){for(const t in e.$props.all_filter_list){e.filter_list.push(e.$props.all_filter_list[t]);const n=ntopng_url_manager.get_url_entry(t);for(let[a,s]of Object.entries(e.$props.all_filter_list[t]))s.filter_name=t,n?s.id==n&&e.active_filter_list.push(s):1==s.currently_active&&e.active_filter_list.push(s)}e.get_url=`${http_prefix}/lua/pro/rest/v2/get/interface/map/data.lua`,e.download_url=NtopUtils.buildURL(e.get_url,e.$props.url_params),e.event_listeners={}}(this)},mounted(){const e=this.max_entry_reached,t=this.reload_map;this.$props.url_params.host&&""!=this.$props.url_params.host&&this.hide_dropdowns(),k.on_custom_event("page_service_map",ntopng_custom_events.CHANGE_PAGE_TITLE,(e=>{this.hide_dropdowns()})),k.on_custom_event("change_filter_event",Fm,(e=>{this.active_filter_list[e.id]=e,ntopng_url_manager.set_key_to_url(e.filter_name,e.key),this.url_params[e.filter_name]=e.key,this.update_and_reload_map()})),k.on_custom_event(this.get_map(),ntopng_custom_events.VIS_DATA_LOADED,(t=>{e()?$("#max-entries-reached").removeAttr("hidden"):$("#max-entries-reached").attr("hidden","hidden")}));let n=ntopng_url_manager.get_url_entries();for(const[e,t]of n)this.url_params[e]=t;$("#reload-graph").click((function(e){t()})),setTimeout((()=>NtopUtils.hideOverlays()),0),$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),$("#autolayout").click((()=>this.show_autolayout_dialog()))},data:()=>({i18n:e=>i18n(e),container:null,update_view_state_id:null,get_url:null,download_url:null,filter_list:[],active_filter_list:[],event_listeners:{},title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_autolayout:i18n("map_page.autolayout_services"),body_autolayout:i18n("map_page.autolayout_services_message"),no_services_message:i18n("map_page.no_services"),max_entry_title:i18n("max_entries_reached")}),methods:{destroy:function(){this.get_map().destroy()},click_item:function(e){k.emit_custom_event(Fm,e)},get_map:function(){return this.$refs.service_map},max_entry_reached:function(){return this.get_map().is_max_entry_reached()},reload_map:async function(){NtopUtils.showOverlays();let e=this.get_map();await e.reload(),NtopUtils.hideOverlays()},update_and_reload_map:async function(){let e=this.get_map();NtopUtils.showOverlays(),e.update_url_params(this.url_params),await e.reload(),NtopUtils.hideOverlays()},autolayout:function(){this.get_map().autolayout()},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_autolayout_dialog:function(){this.$refs.modal_autolayout.show()},hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",csrf:this.$props.page_csrf,map:this.url_params.map};try{let n={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:n,body:JSON.stringify(t)})}finally{this.reload_map()}}}};const Dm={class:"row"},jm={class:"col-md-12 col-lg-12"},Lm={class:"card card-shadow"},Vm=Ll("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Ll("div",{class:"text-center"},[Ll("div",{class:"spinner-border text-primary mt-5",role:"status"},[Ll("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),zm={class:"card-body"},Bm={id:"table_service"},qm={class:"d-flex align-items-center justify-content-end mb-2"},Hm=["title"],Gm=[Ll("i",{class:"text-danger fa-solid fa-triangle-exclamation"},null,-1)],Km={class:"d-flex ms-auto"},Wm={class:"m-1"},Jm=Ll("button",{type:"button",id:"reload-graph",class:"btn btn-link btn-reload-graph"},[Ll("i",{class:"fas fa-sync"})],-1),Ym=Ll("button",{type:"button",id:"autolayout",class:"btn btn-link btn-stabilize"},[Ll("i",{class:"fas fa-magic"})],-1),Zm={class:"card-footer"},Xm={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},Qm=Ll("i",{class:"fas fa-trash"},null,-1),eg=["href"],tg=[Ll("i",{class:"fas fa-download"},null,-1)];Rm.render=function(e,t,n,a,s,l){const i=bs("select-search"),o=bs("modal-delete-confirm"),r=bs("modal-autolayout-confirm"),c=bs("network-map");return Nl(),Ml("div",Dm,[Ll("div",jm,[Ll("div",Lm,[Vm,Ll("div",zm,[Ll("div",Bm,[Ll("div",qm,[Ll("button",{id:"max-entries-reached",type:"button",class:"btn btn-link",title:s.max_entry_title,disabled:"",hidden:""},Gm,8,Hm),Ll("div",Km,[(Nl(!0),Ml(wl,null,Ss(s.filter_list,((e,t)=>(Nl(),Ml("div",Wm,[Vl(i,{selected_option:s.active_filter_list[t],"onUpdate:selected_option":e=>s.active_filter_list[t]=e,options:s.filter_list[t],onSelect_option:l.click_item},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256))]),Jm,Ym]),Vl(o,{ref:"modal_delete_all",title:s.title_delete,body:s.body_delete,onDelete:l.delete_all},null,8,["title","body","onDelete"]),Vl(r,{ref:"modal_autolayout",title:s.title_autolayout,body:s.body_autolayout,onAutolayout:l.reload_map},null,8,["title","body","onAutolayout"]),Vl(c,{ref:"service_map",empty_message:s.no_services_message,event_listeners:s.event_listeners,page_csrf:n.page_csrf,url:s.get_url,url_params:n.url_params,map_id:n.map_id},null,8,["empty_message","event_listeners","page_csrf","url","url_params","map_id"])])]),Ll("div",Zm,[Ll("button",Xm,[Qm,ql(" "+Z(s.i18n("map_page.delete_services")),1)]),Ll("a",{href:s.download_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"service_map.json",target:"_blank"},tg,8,eg)])])])])},Rm.__file="http_src/vue/page-service-map.vue";const ng="change_filter_event";var ag={components:{"network-map":Om,"modal-delete-confirm":jh,"modal-autolayout-confirm":Um,"select-search":Fd},props:{page_csrf:String,ifid:Number,url_params:Object,map_id:String,is_admin:Boolean,all_filter_list:Object},created(){!function(e){for(const t in e.$props.all_filter_list){e.filter_list.push(e.$props.all_filter_list[t]);const n=ntopng_url_manager.get_url_entry(t);for(let[a,s]of Object.entries(e.$props.all_filter_list[t]))s.filter_name=t,n?s.id==n&&e.active_filter_list.push(s):1==s.currently_active&&e.active_filter_list.push(s)}e.get_url=`${http_prefix}/lua/pro/rest/v2/get/interface/map/data.lua`,e.download_url=NtopUtils.buildURL(e.get_url,e.updated_url_params),e.event_listeners={}}(this)},mounted(){this.updated_url_params=this.$props.url_params;let e=ntopng_url_manager.get_url_entries();for(const[t,n]of e)this.updated_url_params[t]=n;const t=this.max_entry_reached,n=this.reload_map;this.update_and_reload_map(),this.$props.url_params.host&&""!=this.$props.url_params.host&&this.hide_dropdowns(),k.on_custom_event("page_periodicity_map",ntopng_custom_events.CHANGE_PAGE_TITLE,(e=>{this.hide_dropdowns()})),k.on_custom_event("change_filter_event",ng,(e=>{this.active_filter_list[e.id]=e,ntopng_url_manager.set_key_to_url(e.filter_name,e.key),this.url_params[e.filter_name]=e.key,this.update_and_reload_map()})),k.on_custom_event(this.get_map(),ntopng_custom_events.VIS_DATA_LOADED,(e=>{t()?$("#max-entries-reached").removeAttr("hidden"):$("#max-entries-reached").attr("hidden","hidden")})),$("#reload-graph").click((function(e){n()})),setTimeout((()=>NtopUtils.hideOverlays()),0),$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),$("#autolayout").click((()=>this.show_autolayout_dialog()))},data:()=>({i18n:e=>i18n(e),container:null,update_view_state_id:null,get_url:null,download_url:null,updated_url_params:{},filter_list:[],active_filter_list:[],event_listeners:{},title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_autolayout:i18n("map_page.autolayout_services"),body_autolayout:i18n("map_page.autolayout_services_message"),no_services_message:i18n("map_page.no_services"),max_entry_title:i18n("max_entries_reached")}),methods:{destroy:function(){this.get_map().destroy()},click_item:function(e){k.emit_custom_event(ng,e)},get_map:function(){return this.$refs.periodicity_map},max_entry_reached:function(){return this.get_map().is_max_entry_reached()},reload_map:async function(){NtopUtils.showOverlays();let e=this.get_map();await e.reload(),NtopUtils.hideOverlays()},hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},update_and_reload_map:async function(){let e=this.get_map();NtopUtils.showOverlays(),e.update_url_params(this.updated_url_params),await e.reload(),NtopUtils.hideOverlays()},autolayout:function(){this.get_map().autolayout()},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_autolayout_dialog:function(){this.$refs.modal_autolayout.show()},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.updated_url_params.ifid,action:"reset",csrf:this.$props.page_csrf,map:this.updated_url_params.map};try{let n={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:n,body:JSON.stringify(t)})}finally{this.reload_map()}}}};const sg={class:"row"},lg={class:"col-md-12 col-lg-12"},ig={class:"card card-shadow"},og=Ll("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Ll("div",{class:"text-center"},[Ll("div",{class:"spinner-border text-primary mt-5",role:"status"},[Ll("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),rg={class:"card-body"},cg={id:"table_periodicity"},ug={class:"d-flex align-items-center justify-content-end mb-2"},dg=["title"],pg=[Ll("i",{class:"text-danger fa-solid fa-triangle-exclamation"},null,-1)],_g={class:"d-flex ms-auto"},fg={class:"m-1"},hg=Ll("button",{type:"button",id:"reload-graph",class:"btn btn-link btn-reload-graph"},[Ll("i",{class:"fas fa-sync"})],-1),mg=Ll("button",{type:"button",id:"autolayout",class:"btn btn-link btn-stabilize"},[Ll("i",{class:"fas fa-magic"})],-1),gg={class:"card-footer"},vg={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},bg=Ll("i",{class:"fas fa-trash"},null,-1),yg=["href"],wg=[Ll("i",{class:"fas fa-download"},null,-1)];ag.render=function(e,t,n,a,s,l){const i=bs("select-search"),o=bs("modal-delete-confirm"),r=bs("modal-autolayout-confirm"),c=bs("network-map");return Nl(),Ml("div",sg,[Ll("div",lg,[Ll("div",ig,[og,Ll("div",rg,[Ll("div",cg,[Ll("div",ug,[Ll("button",{id:"max-entries-reached",type:"button",class:"btn btn-link",title:s.max_entry_title,disabled:"",hidden:""},pg,8,dg),Ll("div",_g,[(Nl(!0),Ml(wl,null,Ss(s.filter_list,((e,t)=>(Nl(),Ml("div",fg,[Vl(i,{selected_option:s.active_filter_list[t],"onUpdate:selected_option":e=>s.active_filter_list[t]=e,options:s.filter_list[t],onSelect_option:l.click_item},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256))]),hg,mg]),Vl(o,{ref:"modal_delete_all",title:s.title_delete,body:s.body_delete,onDelete:l.delete_all},null,8,["title","body","onDelete"]),Vl(r,{ref:"modal_autolayout",title:s.title_autolayout,body:s.body_autolayout,onAutolayout:l.reload_map},null,8,["title","body","onAutolayout"]),Vl(c,{ref:"periodicity_map",empty_message:s.no_services_message,event_listeners:s.event_listeners,page_csrf:n.page_csrf,url:s.get_url,url_params:n.url_params,map_id:n.map_id},null,8,["empty_message","event_listeners","page_csrf","url","url_params","map_id"])])]),Ll("div",gg,[Ll("button",vg,[bg,ql(" "+Z(s.i18n("map_page.delete_services")),1)]),Ll("a",{href:s.download_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"periodicity_map.json",target:"_blank"},wg,8,yg)])])])])},ag.__file="http_src/vue/page-periodicity-map.vue";const xg="change_filter_event";var kg={components:{"network-map":Om,"modal-delete-confirm":jh,"modal-autolayout-confirm":Um,"select-search":Fd},props:{page_csrf:String,ifid:Number,url_params:Object,map_id:String,is_admin:Boolean,all_filter_list:Object},created(){!function(e){for(const t in e.$props.all_filter_list){e.filter_list.push(e.$props.all_filter_list[t]);const n=y.get_url_entry(t);for(let[a,s]of Object.entries(e.$props.all_filter_list[t]))s.filter_name=t,n?s.id==n&&e.active_filter_list.push(s):1==s.currently_active&&e.active_filter_list.push(s)}e.get_url=`${http_prefix}/lua/pro/rest/v2/get/interface/map/data.lua`,e.download_url=NtopUtils.buildURL(e.get_url,e.$props.url_params),e.event_listeners={}}(this)},mounted(){const e=this.max_entry_reached,t=this.reload_map;this.$props.url_params.host&&""!=this.$props.url_params.host&&this.hide_dropdowns(),k.on_custom_event("page_service_map",ntopng_custom_events.CHANGE_PAGE_TITLE,(e=>{this.hide_dropdowns()})),k.on_custom_event("change_filter_event",xg,(e=>{this.active_filter_list[e.id]=e,y.set_key_to_url(e.filter_name,e.key),this.url_params[e.filter_name]=e.key,this.update_and_reload_map()})),k.on_custom_event(this.get_map(),ntopng_custom_events.VIS_DATA_LOADED,(t=>{e()?$("#max-entries-reached").removeAttr("hidden"):$("#max-entries-reached").attr("hidden","hidden")}));let n=y.get_url_entries();for(const[e,t]of n)this.url_params[e]=t;$("#reload-graph").click((function(e){t()})),NtopUtils.hideOverlays(),$("#btn-delete-all").click((()=>this.show_delete_all_dialog())),$("#autolayout").click((()=>this.show_autolayout_dialog()))},data:()=>({i18n:e=>i18n(e),container:null,update_view_state_id:null,get_url:null,download_url:null,filter_list:[],active_filter_list:[],event_listeners:{},title_delete:i18n("map_page.delete_services"),body_delete:i18n("map_page.delete_services_message"),title_autolayout:i18n("map_page.autolayout_services"),body_autolayout:i18n("map_page.autolayout_services_message"),no_services_message:i18n("map_page.no_services"),max_entry_title:i18n("max_entries_reached")}),methods:{destroy:function(){this.get_map().destroy()},click_item:function(e){k.emit_custom_event(xg,e)},get_map:function(){return this.$refs.asset_map},hide_dropdowns:function(){$("#network_dropdown").attr("hidden","hidden"),$("#vlan_id_dropdown").attr("hidden","hidden")},max_entry_reached:function(){return this.get_map().is_max_entry_reached()},reload_map:async function(){NtopUtils.showOverlays();let e=this.get_map();await e.reload(),NtopUtils.hideOverlays()},update_and_reload_map:async function(){let e=this.get_map();NtopUtils.showOverlays(),e.update_url_params(this.url_params),await e.reload(),NtopUtils.hideOverlays()},autolayout:function(){this.get_map().autolayout()},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_autolayout_dialog:function(){this.$refs.modal_autolayout.show()},delete_all:async function(){let e=`${http_prefix}/lua/pro/enterprise/network_maps.lua`,t={ifid:this.url_params.ifid,action:"reset",csrf:this.$props.page_csrf,map:this.url_params.map};try{let n={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:n,body:JSON.stringify(t)})}finally{NtopUtils.showOverlays(),this.reload_map(),NtopUtils.hideOverlays()}}}};const $g={class:"row"},Sg={class:"col-md-12 col-lg-12"},Cg={class:"card card-shadow"},Ng=Ll("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Ll("div",{class:"text-center"},[Ll("div",{class:"spinner-border text-primary mt-5",role:"status"},[Ll("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Ag={class:"card-body"},Tg={id:"table_asset"},Eg={class:"d-flex align-items-center justify-content-end mb-2"},Pg=["title"],Mg=[Ll("i",{class:"text-danger fa-solid fa-triangle-exclamation"},null,-1)],Ig={class:"d-flex ms-auto"},Og={class:"m-1"},Ug=Ll("button",{type:"button",id:"reload-graph",class:"btn btn-link btn-reload-graph"},[Ll("i",{class:"fas fa-sync"})],-1),Fg=Ll("button",{type:"button",id:"autolayout",class:"btn btn-link btn-stabilize"},[Ll("i",{class:"fas fa-magic"})],-1),Rg={class:"card-footer"},Dg={type:"button",id:"btn-delete-all",class:"btn btn-danger me-1"},jg=Ll("i",{class:"fas fa-trash"},null,-1),Lg=["href"],Vg=[Ll("i",{class:"fas fa-download"},null,-1)];kg.render=function(e,t,n,a,s,l){const i=bs("select-search"),o=bs("modal-delete-confirm"),r=bs("modal-autolayout-confirm"),c=bs("network-map");return Nl(),Ml("div",$g,[Ll("div",Sg,[Ll("div",Cg,[Ng,Ll("div",Ag,[Ll("div",Tg,[Ll("div",Eg,[Ll("button",{id:"max-entries-reached",type:"button",class:"btn btn-link",title:s.max_entry_title,disabled:"",hidden:""},Mg,8,Pg),Ll("div",Ig,[(Nl(!0),Ml(wl,null,Ss(s.filter_list,((e,t)=>(Nl(),Ml("div",Og,[Vl(i,{selected_option:s.active_filter_list[t],"onUpdate:selected_option":e=>s.active_filter_list[t]=e,options:s.filter_list[t],onSelect_option:l.click_item},null,8,["selected_option","onUpdate:selected_option","options","onSelect_option"])])))),256))]),Ug,Fg]),Vl(o,{ref:"modal_delete_all",title:s.title_delete,body:s.body_delete,onDelete:l.delete_all},null,8,["title","body","onDelete"]),Vl(r,{ref:"modal_autolayout",title:s.title_autolayout,body:s.body_autolayout,onAutolayout:l.reload_map},null,8,["title","body","onAutolayout"]),Vl(c,{ref:"asset_map",empty_message:s.no_services_message,event_listeners:s.event_listeners,page_csrf:n.page_csrf,url:s.get_url,url_params:n.url_params,map_id:n.map_id},null,8,["empty_message","event_listeners","page_csrf","url","url_params","map_id"])])]),Ll("div",Rg,[Ll("button",Dg,[jg,ql(" "+Z(s.i18n("map_page.delete_services")),1)]),Ll("a",{href:s.download_url,class:"btn btn-primary",role:"button","aria-disabled":"true",download:"asset_map.json",target:"_blank"},Vg,8,Lg)])])])])},kg.__file="http_src/vue/page-asset-map.vue";var zg=Ga({components:{},props:{id:String,main_title:Object,secondary_title_list:Array,help_link:String,items_table:Array},emits:["click_item"],created(){},data:()=>({}),mounted(){ntopng_sync.ready(this.$props.id)},methods:{}});const Bg={class:"navbar navbar-shadow navbar-expand-lg navbar-light bg-light px-2 mb-2"},qg={class:"me-1 text-nowrap",style:{"font-size":"1.1rem"}},Hg=["href","title"],Gg=["title"],Kg=ql(" / "),Wg=["href","title"],Jg=["title"],Yg=Ll("span",{class:"text-muted ms-1 d-none d-lg-inline d-md-none"},"|",-1),Zg=Ll("button",{class:"navbar-toggler",type:"button"},[Ll("span",{class:"navbar-toggler-icon"})],-1),Xg={class:"collapse navbar-collapse scroll-x",id:"navbarNav"},Qg={class:"navbar-nav"},ev=["onClick"],tv={key:0,class:"badge rounded-pill bg-dark",style:{float:"right","margin-bottom":"-10px"}},nv=["onClick"],av={key:0,class:"badge rounded-pill bg-dark",style:{float:"right","margin-bottom":"-10px"}},sv={class:"navbar-nav ms-auto"},lv=Ll("a",{href:"javascript:history.back()",class:"nav-item nav-link text-muted"},[Ll("i",{class:"fas fa-arrow-left"})],-1),iv=["href"],ov=[Ll("i",{class:"fas fa-question-circle"},null,-1)];zg.render=function(e,t,n,a,s,l){return Nl(),Ml("nav",Bg,[Ll("span",qg,[Ll("i",{class:q(e.main_title.icon)},null,2),e.main_title.href?(Nl(),Ml("a",{key:0,href:e.main_title.href,title:e.main_title.title},Z(e.main_title.label),9,Hg)):(Nl(),Ml("span",{key:1,title:e.main_title.title},Z(e.main_title.label),9,Gg)),(Nl(!0),Ml(wl,null,Ss(e.secondary_title_list,(e=>(Nl(),Ml(wl,null,[Kg,e.href?(Nl(),Ml("a",{key:0,href:e.href,title:e.title},Z(e.label),9,Wg)):(Nl(),Ml("span",{key:1,title:e.title},Z(e.label),9,Jg))],64)))),256))]),Yg,Zg,Ll("div",Xg,[Ll("ul",Qg,[(Nl(!0),Ml(wl,null,Ss(e.items_table,(e=>(Nl(),Ml(wl,null,[e.active?(Nl(),Ml("li",{key:0,onClick:t=>this.$emit("click_item",e),class:q([{active:e.active},"nav-item nav-link"])},[e.badge_num>0?(Nl(),Ml("span",tv,Z(e.badge_num),1)):Gl("v-if",!0),Ll("b",null,[Ll("i",{class:q(e.icon)},null,2),ql(" "+Z(e.label),1)])],10,ev)):(Nl(),Ml("a",{key:1,onClick:t=>this.$emit("click_item",e),href:"#",class:"nav-item nav-link"},[e.badge_num>0?(Nl(),Ml("span",av,Z(e.badge_num),1)):Gl("v-if",!0),Ll("i",{class:q(e.icon)},null,2),ql(" "+Z(e.label),1)],8,nv))],64)))),256))]),Ll("ul",sv,[lv,Ll("a",{target:"_newtab",href:e.help_link,class:"nav-item nav-link text-muted"},ov,8,iv)])])])},zg.__file="http_src/vue/page-navbar.vue";const rv={class:"form-group mb-3 row"},cv={class:"col-form-label col-sm-4"},uv={class:"col-sm-7"},dv=Ll("div",{class:"invalid-feedback"},null,-1),pv={class:"form-group mb-3 row"},_v={class:"col-form-label col-sm-4 pt-2"},fv={class:"form-switch col-sm-7 pt-2 ps-3"},hv={class:"col-form-label"};var mv={__name:"modal-add-device-exclusion",props:{body:String,title:String,footer:String,list_notes:String},emits:["add"],setup(e,{expose:t,emit:n}){const a=pn(""),s=pn(""),l=pn(null),i=()=>{n("add",{mac_list:a.value,trigger_alerts:s.value}),o()},o=()=>{l.value.close()};t({show:()=>{a.value="",l.value.show()},close:o}),rs((()=>{}));const r=e=>i18n(e);return(t,n)=>(Nl(),Il(pp,{onShowed:n[2]||(n[2]=e=>{}),ref_key:"modal_id",ref:l},{title:_a((()=>[ql(Z(e.title),1)])),body:_a((()=>[Ll("div",rv,[Ll("label",cv,Z(e.body),1),Ll("div",uv,[gs(Ll("textarea",{name:"items-list",id:"itemslist-textarea",class:"w-100 form-control",rows:"6","onUpdate:modelValue":n[0]||(n[0]=e=>a.value=e)},null,512),[[Po,a.value]]),Ll("small",null,Z(e.list_notes),1),dv])]),Ll("div",pv,[Ll("label",_v,Z(r("edit_check.trigger_device_disconnected_alert")),1),Ll("div",fv,[gs(Ll("input",{type:"checkbox",class:"form-check-input ms-0","onUpdate:modelValue":n[1]||(n[1]=e=>s.value=e)},null,512),[[Mo,s.value]])]),Ll("small",hv,Z(r("edit_check.trigger_device_disconnected_alert_descr")),1)])])),footer:_a((()=>[ql(Z(r("host_details.notes"))+": "+Z(e.footer)+" ",1),Ll("button",{type:"button",onClick:i,class:"btn btn-primary"},Z(r("add")),1)])),_:1},512))},__file:"http_src/vue/modal-add-device-exclusion.vue"};const gv={class:"form-group mb-3 row"},vv={class:"col-form-label col-sm-4"},bv={class:"col-sm-7"},yv={class:"form-group mb-3 row"},wv={class:"col-form-label col-sm-4"},xv={class:"col-sm-7"},kv={value:"allowed"},$v={value:"denied"},Sv={class:"form-group mb-3 row"},Cv={class:"col-form-label col-sm-4 pt-2"},Nv={class:"form-switch col-sm-7 pt-2 ps-3"},Av={class:"col-form-label"};var Tv={__name:"modal-edit-device-exclusion",props:{title:String},emits:["edit"],setup(e,{expose:t,emit:n}){const a=pn(""),s=pn(""),l=pn(""),i=pn(null),o=()=>{n("edit",{mac_alias:a.value,mac_status:s.value,trigger_alerts:l.value}),r()},r=()=>{i.value.close()};t({show:e=>{s.value=e.status,a.value=e.mac_address_label.label,l.value=e.trigger_alert||!1,i.value.show()},close:r}),rs((()=>{}));const c=e=>i18n(e);return(t,n)=>(Nl(),Il(pp,{onShowed:n[3]||(n[3]=e=>{}),ref_key:"modal_id",ref:i},{title:_a((()=>[ql(Z(e.title),1)])),body:_a((()=>[Ll("div",gv,[Ll("label",vv,Z(c("edit_check.device_alias")),1),Ll("div",bv,[gs(Ll("input",{type:"text",name:"custom_name",class:"form-control",placeholder:"{{_i18n('custom_name')}}","onUpdate:modelValue":n[0]||(n[0]=e=>a.value=e)},null,512),[[Po,a.value]])])]),Ll("div",yv,[Ll("label",wv,Z(c("edit_check.device_status")),1),Ll("div",xv,[gs(Ll("select",{name:"device_status",class:"form-select","onUpdate:modelValue":n[1]||(n[1]=e=>s.value=e)},[Ll("option",kv,Z(c("allowed")),1),Ll("option",$v,Z(c("denied")),1)],512),[[Uo,s.value]])])]),Ll("div",Sv,[Ll("label",Cv,Z(c("edit_check.trigger_device_disconnected_alert")),1),Ll("div",Nv,[gs(Ll("input",{type:"checkbox",class:"form-check-input ms-0","onUpdate:modelValue":n[2]||(n[2]=e=>l.value=e)},null,512),[[Mo,l.value]])]),Ll("small",Av,Z(c("edit_check.trigger_device_disconnected_alert_descr")),1)])])),footer:_a((()=>[Ll("button",{type:"button",onClick:o,class:"btn btn-primary"},Z(c("edit")),1)])),_:1},512))},__file:"http_src/vue/modal-edit-device-exclusion.vue"},Ev={components:{"page-navbar":zg,datatable:Xf,"modal-delete-confirm":jh,"modal-add-device-exclusion":mv,"modal-edit-device-exclusion":Tv},props:{page_csrf:String,is_clickhouse_enabled:Boolean},created(){!function(e){const t=[];t.push({text:'<i class="fas fa-plus"></i>',className:"btn-link",action:function(t,n,a,s){e.show_add_device_dialog()}}),t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,n,a,s){e.reload_table()}});let n={table_buttons:t,columns_config:[],data_url:`${http_prefix}/lua/pro/rest/v2/get/device/exclusion.lua`,enable_search:!0},a=ntopng_utility.clone(n);a.table_buttons=n.table_buttons,a.data_url=`${a.data_url}`,a.columns_config=[{sortable:!1,searchable:!1,visible:!1,data:"mac_address",type:"mac-address",responsivePriority:1},{columnName:i18n("edit_check.excluded_device"),data:"mac_address_label",type:"mac-address",className:"text-nowrap",sortable:!0,searchable:!0,createdCell:DataTableRenders.applyCellStyle,responsivePriority:1,render:function(e,t,n){let a=e.label;return e.label!==e.mac&&(a=a+" ["+e.mac+"]"),e.url&&(a=`<a href='${e.url}' title='${e.mac}'>${a}</a>`),a}},{columnName:i18n("first_seen"),data:"first_seen",type:"time",sortable:!0,searchable:!0,className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,n){return e.data}},{columnName:i18n("last_seen"),data:"last_seen",type:"time",sortable:!0,searchable:!0,className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,n){return e.data}},{columnName:i18n("edit_check.device_status"),data:"status",type:"status",sortable:!0,searchable:!0,className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,n){return i18n(e)}},{columnName:i18n("edit_check.trigger_alert"),data:"trigger_alert",type:"boolean",sortable:!0,searchable:!0,className:"text-nowrap text-center",responsivePriority:1,render:function(e,t,n){return e?'<i class="fas fa-check text-success"></i>':'<i class="fas fa-times text-danger"></i>'}},{targets:-1,columnName:i18n("action"),data:null,name:"actions",className:"text-center text-nowrap",sortable:!1,responsivePriority:1,render:function(t,n,a){let s={handlerId:"delete_device",onClick:()=>{let n=`${i18n("edit_check.delete_device_exclusion")} ${t.mac_address_label.label}`;e.show_delete_dialog(i18n("edit_check.device_exclusion"),n,t)}},l={handlerId:"edit_device",onClick:()=>{e.show_edit_device_dialog(t)}},i={onClick:()=>{const e=`${http_prefix}/lua/pro/db_search.lua?epoch_begin=${t.first_seen.timestamp}&epoch_end=${t.last_seen.timestamp}&mac=${t.mac_address};eq`;window.open(e,"_blank")}};return DataTableUtils.createActionButtons([{class:"pointer",handler:i,icon:"fa-stream",title:i18n("db_explorer.historical_data"),hidden:!isClickhouseEnabled},{class:"btn-secondary",handler:l,icon:"fa-edit",title:i18n("edit"),class:"pointer"},{class:"btn-danger",handler:s,icon:"fa-trash",title:i18n("delete"),class:"pointer"}])}}],e.config_devices=a}(this)},mounted(){this.learning_status(),$("#btn-delete-all-devices").click((()=>this.show_delete_all_dialog()))},data:()=>({i18n:e=>i18n(e),config_devices:null,navbar_context:{main_title:{label:i18n("edit_check.device_exclusion_list"),icon:"fas fa-bell-slash"},base_url:"#",items_table:[{active:!0,label:i18n("devices"),id:"devices"}]},title_delete:"",body_delete:"",title_delete_all:i18n("edit_check.delete_all_device_exclusions"),body_delete_all:i18n("edit_check.delete_all_device_exclusions_message"),title_add:i18n("edit_check.add_device_exclusion"),body_add:i18n("edit_check.add_device_exclusion_message"),footer_add:i18n("edit_check.add_device_exclusion_notes"),list_notes_add:i18n("edit_check.add_device_exclusion_list_notes"),title_edit:i18n("edit_check.edit_device_exclusion"),learning_message:i18n("edit_check.learning"),row_to_delete:null,row_to_edit:null}),methods:{add_device:async function(e){e.mac_list=e.mac_list.replace(/(?:\t| )/g,""),e.mac_list=e.mac_list.replace(/(?:\r\n|\r|\n)/g,","),e.csrf=this.$props.page_csrf;let t=`${http_prefix}/lua/pro/rest/v2/add/device/exclusion.lua`;try{let n={"Content-Type":"application/json"};await ntopng_utility.http_request(t,{method:"post",headers:n,body:JSON.stringify(e)}),this.reload_table()}catch(e){console.error(e)}},delete_all:async function(){let e=`${http_prefix}/lua/pro/rest/v2/delete/device/exclusion.lua`,t={device:"all",csrf:this.$props.page_csrf};try{let n={"Content-Type":"application/json"};await ntopng_utility.http_request(e,{method:"post",headers:n,body:JSON.stringify(t)}),this.reload_table()}catch(e){console.error(e)}},delete_row:async function(){let e={device:this.row_to_delete.mac_address,csrf:this.$props.page_csrf},t=`${http_prefix}/lua/pro/rest/v2/delete/device/exclusion.lua`;try{let n={"Content-Type":"application/json"};await ntopng_utility.http_request(t,{method:"post",headers:n,body:JSON.stringify(e)}),setTimeout((()=>this.reload_table()),300)}catch(e){console.error(e)}},edit_row:async function(e){let t=this.row_to_edit;e.mac_alias=e.mac_alias.replace(/(?:\t| )/g,""),e.csrf=this.$props.page_csrf,e.mac=t.mac_address;let n=`${http_prefix}/lua/pro/rest/v2/edit/device/exclusion.lua`;try{let t={"Content-Type":"application/json"};await ntopng_utility.http_request(n,{method:"post",headers:t,body:JSON.stringify(e)}),setTimeout((()=>this.reload_table()),300)}catch(e){console.error(e)}},learning_status:async function(){let e=`${http_prefix}/lua/pro/rest/v2/get/device/learning_status.lua`;try{let t={"Content-Type":"application/json"};(await ntopng_utility.http_request(e,{method:"get",headers:t})).learning_done?$("#devices-learning-status").attr("hidden","hidden"):$("#devices-learning-status").removeAttr("hidden")}catch(e){console.error(e)}},reload_table:function(){this.get_active_table().reload(),this.learning_status()},get_active_table:function(){return this.$refs.table_devices_exclusion},show_add_device_dialog:function(){this.$refs.modal_add_device.show()},show_edit_device_dialog:function(e){this.row_to_edit=e,this.$refs.modal_edit_device.show(e)},show_delete_all_dialog:function(){this.$refs.modal_delete_all.show()},show_delete_dialog:function(e,t,n){this.row_to_delete=n,this.title_delete=e,this.body_delete=t,this.$refs.modal_delete_confirm.show()}}};const Pv={id:"navbar"},Mv={class:"row"},Iv={class:"col-md-12 col-lg-12"},Ov=Ll("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),Uv={class:"card"},Fv={class:"card-body"},Rv={id:"devices-learning-status",class:"alert alert-info",hidden:""},Dv={id:"table_devices_vue"},jv={class:"card-footer"},Lv={type:"button",id:"btn-delete-all-devices",class:"btn btn-danger"},Vv=Ll("i",{class:"fas fa-trash"},null,-1);Ev.render=function(e,t,n,a,s,l){const i=bs("page-navbar"),o=bs("modal-delete-confirm"),r=bs("modal-add-device-exclusion"),c=bs("modal-edit-device-exclusion"),u=bs("datatable");return Nl(),Ml(wl,null,[Ll("div",Pv,[Vl(i,{id:"page_navbar",main_title:s.navbar_context.main_title,base_url:s.navbar_context.base_url,help_link:s.navbar_context.help_link,items_table:s.navbar_context.items_table,onClick_item:e.click_item},null,8,["main_title","base_url","help_link","items_table","onClick_item"])]),Ll("div",Mv,[Ll("div",Iv,[Ov,Ll("div",Uv,[Ll("div",Fv,[Ll("div",Rv,Z(s.learning_message),1),Ll("div",Dv,[Vl(o,{ref:"modal_delete_confirm",title:s.title_delete,body:s.body_delete,onDelete:l.delete_row},null,8,["title","body","onDelete"]),Vl(o,{ref:"modal_delete_all",title:s.title_delete_all,body:s.body_delete_all,onDelete:l.delete_all},null,8,["title","body","onDelete"]),Vl(r,{ref:"modal_add_device",title:s.title_add,body:s.body_add,footer:s.footer_add,list_notes:s.list_notes_add,onAdd:l.add_device},null,8,["title","body","footer","list_notes","onAdd"]),Vl(c,{ref:"modal_edit_device",title:s.title_edit,onEdit:l.edit_row},null,8,["title","onEdit"]),Vl(u,{ref:"table_devices_exclusion",table_buttons:s.config_devices.table_buttons,columns_config:s.config_devices.columns_config,data_url:s.config_devices.data_url,enable_search:s.config_devices.enable_search},null,8,["table_buttons","columns_config","data_url","enable_search"])])]),Ll("div",jv,[Ll("button",Lv,[Vv,ql(" "+Z(s.i18n("edit_check.delete_all_device_exclusions")),1)])])])])])],64)},Ev.__file="http_src/vue/page-device-exclusions.vue";var zv={components:{datatable:Xf},props:{page_csrf:String,url_params:Object},created(){!function(e){const t=[];let n=[],a=3;t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,n,a,s){e.reload_table()}});let s={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/fingerprint/data.lua`,url_params),enable_search:!0};n=[{columnName:i18n("ja3_client_fingerprint"),name:"ja3",data:"ja3",className:"text-nowrap",render:(e,t)=>`<a class="ntopng-external-link" href="https://sslbl.abuse.ch/ja3-fingerprints/${e}">${e} <i class="fas fa-external-link-alt"></i></a>`,responsivePriority:0,createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("status"),name:"is_malicious",data:"is_malicious",className:"text-nowrap text-center",responsivePriority:0,render:(e,t)=>e?`<i class="fa-solid fa-face-frown text-danger" title="${i18n("malicious")}"></i>`:`<i class="fa-solid fa-face-smile text-success" title="${i18n("ok")}"></i>`},{columnName:i18n("app_name"),name:"app_name",data:"app_name",className:"text-nowrap text-right",responsivePriority:1},{columnName:i18n("num_uses"),name:"num_uses",data:"num_uses",className:"text-nowrap text-right",responsivePriority:1,render:e=>NtopUtils.formatValue(e)}];let l={serverSide:!1,order:[[a,"desc"]]},i=ntopng_utility.clone(s);i.table_buttons=s.table_buttons,i.data_url=`${i.data_url}`,i.columns_config=n,i.table_config=ntopng_utility.clone(l),e.config_devices_standard=i}(this)},mounted(){},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null}),methods:{reload_table:function(){this.get_active_table().reload()},get_active_table:function(){return this.$refs.table_fingerprint}}};const Bv={class:"row"},qv={class:"col-md-12 col-lg-12"},Hv=Ll("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),Gv={class:"card"},Kv={class:"card-body"},Wv={id:"table_host_tls"},Jv={class:"card-footer"};zv.render=function(e,t,n,a,s,l){const i=bs("datatable");return Nl(),Ml("div",Bv,[Ll("div",qv,[Hv,Ll("div",Gv,[Ll("div",Kv,[Ll("div",Wv,[Vl(i,{ref:"table_fingerprint",table_buttons:s.config_devices_standard.table_buttons,columns_config:s.config_devices_standard.columns_config,data_url:s.config_devices_standard.data_url,enable_search:s.config_devices_standard.enable_search,table_config:s.config_devices_standard.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])]),Ll("div",Jv,[Ll("b",null,Z(s.i18n("fingerprint_note")),1)])])])])},zv.__file="http_src/vue/page-host-tls.vue";var Yv={components:{datatable:Xf},props:{page_csrf:String,url_params:Object},created(){!function(e){const t=[];let n=[],a=3;t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,n,a,s){e.reload_table()}});let s={table_buttons:t,columns_config:[],data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/fingerprint/data.lua`,url_params),enable_search:!0};n=[{columnName:i18n("hassh_fingerprint"),name:"ja3",data:"ja3",className:"text-nowrap",render:(e,t)=>`<a class="ntopng-external-link" href="https://sslbl.abuse.ch/ja3-fingerprints/${e}">${e} <i class="fas fa-external-link-alt"></i></a>`,responsivePriority:0,createdCell:DataTableRenders.applyCellStyle},{columnName:i18n("status"),name:"is_malicious",data:"is_malicious",className:"text-nowrap text-center",responsivePriority:0,render:(e,t)=>e?`<i class="fa-solid fa-face-frown text-danger" title="${i18n("malicious")}"></i>`:`<i class="fa-solid fa-face-smile text-success" title="${i18n("ok")}"></i>`},{columnName:i18n("app_name"),name:"app_name",data:"app_name",className:"text-nowrap text-right",responsivePriority:1},{columnName:i18n("num_uses"),name:"num_uses",data:"num_uses",className:"text-nowrap text-right",responsivePriority:1,render:e=>NtopUtils.formatValue(e)}];let l={serverSide:!1,order:[[a,"desc"]]},i=ntopng_utility.clone(s);i.table_buttons=s.table_buttons,i.data_url=`${i.data_url}`,i.columns_config=n,i.table_config=ntopng_utility.clone(l),e.config_devices_standard=i}(this)},mounted(){},data:()=>({i18n:e=>i18n(e),config_devices_standard:null,config_devices_centrality:null}),methods:{reload_table:function(){this.get_active_table().reload()},get_active_table:function(){return this.$refs.table_hassh}}};const Zv={class:"row"},Xv={class:"col-md-12 col-lg-12"},Qv=Ll("div",{class:"alert alert-danger d-none",id:"alert-row-buttons",role:"alert"},null,-1),eb={class:"card"},tb={class:"card-body"},nb={id:"table_host_ssh"};Yv.render=function(e,t,n,a,s,l){const i=bs("datatable");return Nl(),Ml("div",Zv,[Ll("div",Xv,[Qv,Ll("div",eb,[Ll("div",tb,[Ll("div",nb,[Vl(i,{ref:"table_hassh",table_buttons:s.config_devices_standard.table_buttons,columns_config:s.config_devices_standard.columns_config,data_url:s.config_devices_standard.data_url,enable_search:s.config_devices_standard.enable_search,table_config:s.config_devices_standard.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])])])])])},Yv.__file="http_src/vue/page-host-ssh.vue";const ab="change_map_event";var sb={components:{"page-periodicity-map":ag,"page-periodicity-table":nm,"page-asset-map":kg,"page-asset-table":Vh,"page-service-map":Rm,"page-service-table":bm,"page-navbar":zg},props:{page_csrf:String,base_url_params:Object,ifid:Number,is_admin:Boolean,map_id:String,view:String,navbar_info:Object,service_acceptance:Array,service_map_filter_list:Object,service_table_filter_list:Array,periodicity_map_filter_list:Object,periodicity_table_filter_list:Array,asset_map_filter_list:Object,asset_table_filter_list:Array},created(){this.url_params=this.$props.base_url_params,this.active_tab=this.$props.map_id,this.page=this.url_params.page,this.updated_view=this.$props.view,asset_map_filter_list&&asset_table_filter_list&&(this.navbar_context.items_table.push({active:!1,label:i18n("asset_map"),id:"asset_map",page:"graph"}),this.navbar_context.items_table.push({active:!1,label:i18n("asset_table"),id:"asset_map",page:"table"})),this.navbar_context.items_table.forEach((e=>{e.id==this.active_tab&&e.page==this.page?e.active=!0:e.active=!1}))},mounted(){const e=this.format_navbar_title;e(this.$props.navbar_info),ntopng_events_manager.on_custom_event("page_navbar",ntopng_custom_events.CHANGE_PAGE_TITLE,(t=>{e({selected_iface:this.$props.navbar_info.selected_iface,selected_host:t})})),ntopng_events_manager.on_custom_event("change_service_table_tab",ab,(t=>{y.set_key_to_url("map",t.id),y.set_key_to_url("page",t.page),"table"==t.page&&this.destroy(),this.active_tab=t.id,this.page=t.page,this.url_params.map=t.id,this.url_params.page=t.page,this.updated_view=y.get_url_entry("view"),e()}))},data:()=>({i18n:e=>i18n(e),active_tab:null,page:null,url_params:{},updated_view:null,navbar_node:{},navbar_context:{main_title:{label:" "+i18n("maps"),icon:"fas fa-map"},secondary_title_list:[],items_table:[{active:!0,label:i18n("service_map"),id:"service_map",page:"graph"},{active:!1,label:i18n("service_table"),id:"service_map",page:"table"},{active:!1,label:i18n("periodicity_map"),id:"periodicity_map",page:"graph"},{active:!1,label:i18n("periodicity_table"),id:"periodicity_map",page:"table"}]}}),methods:{destroy:function(){this.get_active_tab().destroy()},format_navbar_title:function(e){e?this.navbar_node=e:e=this.navbar_node,this.navbar_context.secondary_title_list=[{label:e.selected_iface.label,title:NtopUtils.shortenLabel(`${e.selected_iface.label}`,16)}],e.selected_host&&""!=e.selected_host.id&&(this.navbar_context.secondary_title_list[0].href=`${http_prefix}/lua/pro/enterprise/network_maps.lua?map=${this.active_tab}&page=${this.page}&ifid=${this.$props.ifid}`,this.navbar_context.secondary_title_list.push({label:NtopUtils.shortenLabel(`${e.selected_host.label}`,16,"."),title:`${e.selected_host.label}`,href:e.selected_host.is_active?`${http_prefix}/lua/host_details.lua?host=${e.selected_host.id}`:null,target_blank:"true"}))},get_active_tab:function(){return this.$refs[this.active_tab+"_"+this.page]},click_item:function(e){this.navbar_context.items_table.forEach((e=>e.active=!1)),e.active=!0,ntopng_events_manager.emit_custom_event(ab,e)}}};sb.render=function(e,t,n,a,s,l){const i=bs("page-navbar"),o=bs("page-service-map"),r=bs("page-service-table"),c=bs("page-periodicity-map"),u=bs("page-periodicity-table"),d=bs("page-asset-map"),p=bs("page-asset-table");return Nl(),Ml(wl,null,[Vl(i,{id:"page_navbar",main_title:s.navbar_context.main_title,secondary_title_list:s.navbar_context.secondary_title_list,help_link:s.navbar_context.help_link,items_table:s.navbar_context.items_table,onClick_item:l.click_item},null,8,["main_title","secondary_title_list","help_link","items_table","onClick_item"]),"service_map"==s.active_tab&&"graph"==s.page?(Nl(),Il(o,{key:0,ref:"service_map_graph",page_csrf:n.page_csrf,url_params:s.url_params,ifid:n.ifid,is_admin:n.is_admin,map_id:n.map_id,all_filter_list:n.service_map_filter_list},null,8,["page_csrf","url_params","ifid","is_admin","map_id","all_filter_list"])):Gl("v-if",!0),"service_map"==s.active_tab&&"table"==s.page?(Nl(),Il(r,{key:1,ref:"service_map_table",page_csrf:n.page_csrf,url_params:s.url_params,view:s.updated_view,table_filters:n.service_table_filter_list,is_admin:n.is_admin,service_acceptance:n.service_acceptance},null,8,["page_csrf","url_params","view","table_filters","is_admin","service_acceptance"])):Gl("v-if",!0),"periodicity_map"==s.active_tab&&"graph"==s.page?(Nl(),Il(c,{key:2,ref:"periodicity_map_graph",page_csrf:n.page_csrf,url_params:s.url_params,ifid:n.ifid,is_admin:n.is_admin,map_id:n.map_id,all_filter_list:n.periodicity_map_filter_list},null,8,["page_csrf","url_params","ifid","is_admin","map_id","all_filter_list"])):Gl("v-if",!0),"periodicity_map"==s.active_tab&&"table"==s.page?(Nl(),Il(u,{key:3,ref:"periodicity_map_table",page_csrf:n.page_csrf,url_params:s.url_params,view:s.updated_view,table_filters:n.periodicity_table_filter_list,is_admin:n.is_admin},null,8,["page_csrf","url_params","view","table_filters","is_admin"])):Gl("v-if",!0),n.asset_map_filter_list&&n.asset_table_filter_list?(Nl(),Ml(wl,{key:4},["asset_map"==s.active_tab&&"graph"==s.page?(Nl(),Il(d,{key:0,ref:"asset_map_graph",page_csrf:n.page_csrf,url_params:s.url_params,ifid:n.ifid,is_admin:n.is_admin,map_id:n.map_id,all_filter_list:n.asset_map_filter_list},null,8,["page_csrf","url_params","ifid","is_admin","map_id","all_filter_list"])):Gl("v-if",!0),"asset_map"==s.active_tab&&"table"==s.page?(Nl(),Il(p,{key:1,ref:"asset_map_table",page_csrf:n.page_csrf,url_params:s.url_params,view:s.updated_view,table_filters:n.asset_table_filter_list},null,8,["page_csrf","url_params","view","table_filters"])):Gl("v-if",!0)],64)):Gl("v-if",!0)],64)},sb.__file="http_src/vue/page-home-map.vue";const lb={id:"my_dataviz"};var ib={__name:"page-sankey",props:{},setup(e){os((async()=>{}));let t=d3v7;return rs((async()=>{var e=10,n=10,a=10,s=10,l=450-s-n,i=480-e-a,o=t.select("#my_dataviz").append("svg").attr("width",l+s+n).attr("height",i+e+a).append("g").attr("transform","translate("+s+","+e+")");let r={nodes:[{node:0,name:"node0"},{node:1,name:"node1"},{node:2,name:"node2"},{node:3,name:"node3"},{node:4,name:"node4"}],links:[{source:0,target:2,value:2},{source:1,target:2,value:2},{source:1,target:3,value:2},{source:0,target:4,value:2},{source:2,target:3,value:2},{source:2,target:4,value:2},{source:3,target:4,value:4}]};console.log(r);var c=t.scaleOrdinal(t.schemeCategory10),u=t.sankey().nodeWidth(36).nodePadding(290).size([l,i]);u.nodes(r.nodes).links(r.links);var d=o.append("g").selectAll(".link").data(r.links).enter().append("path").attr("class","link").style("stroke-width",(function(e){return Math.max(1,e.dy)})).sort((function(e,t){return t.dy-e.dy})),p=o.append("g").selectAll(".node").data(r.nodes).enter().append("g").attr("class","node").attr("transform",(function(e){return"translate("+e.x+","+e.y+")"})).call(t.drag().subject((function(e){return e})).on("start",(function(){this.parentNode.appendChild(this)})).on("drag",(function(e){t.select(this).attr("transform","translate("+e.x+","+(e.y=Math.max(0,Math.min(i-e.dy,t.event.y)))+")"),u.relayout(),d.attr("d",u.link())})));p.append("rect").attr("height",(function(e){return e.dy})).attr("width",u.nodeWidth()).style("fill",(function(e){return e.color=c(e.name.replace(/ .*/,""))})).style("stroke",(function(e){return t.rgb(e.color).darker(2)})).append("title").text((function(e){return e.name+"\nThere is "+e.value+" stuff in this node"})),p.append("text").attr("x",-6).attr("y",(function(e){return e.dy/2})).attr("dy",".35em").attr("text-anchor","end").attr("transform",null).text((function(e){return e.name})).filter((function(e){return e.x<l/2})).attr("x",6+u.nodeWidth()).attr("text-anchor","start")})),(e,t)=>(Nl(),Ml("div",lb))}};dp("\n.node rect {\n  fill-opacity: 0.9;\n  shape-rendering: crispEdges;\n}\n.node text {\n  pointer-events: none;\n  text-shadow: 0 1px 0 #fff;\n}\n.link {\n  fill: none;\n  stroke: #000;\n  stroke-opacity: 0.2;\n}\n.link:hover {\n  stroke-opacity: 0.5;\n}\n"),ib.__file="http_src/vue/page-sankey.vue";const ob="change_applications_tab_event";var rb={components:{chart:Pd,datatable:Xf,"modal-delete-confirm":jh,"tab-list":Oh},props:{page_csrf:String,url_params:Object,view:String,is_ch_enabled:Boolean},created(){this.applications_tab=y.get_url_entry("view")||this.$props.view,this.tab_list.forEach((e=>{this.applications_tab==e.id?e.active=!0:e.active=!1})),function(e){const t=[];t.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(t,n,a,s){e.reload_table()}});let n=url_params;n.view="applications";let a={table_buttons:t,data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/l7/data.lua`,n),enable_search:!0,table_config:{serverSide:!1,order:[[6,"desc"]],columnDefs:[{type:"time-uni",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3},{type:"file-size",targets:5}]}},s=[{columnName:i18n("host_details.application"),targets:0,width:"20",name:"application",data:"application",className:"text-nowrap",responsivePriority:1,render:t=>`<a href="${http_prefix}/lua/host_details.lua?host=${e.$props.url_params.host}@${e.$props.url_params.vlan}&ts_schema=host:ndpi&page=historical&protocol=${t.label}" target="_blank">${t.label}</a>`},{columnName:i18n("host_details.duration"),targets:1,width:"10",name:"duration",data:"duration",className:"text-nowrap",responsivePriority:1,render:e=>NtopUtils.secondsToTime(e)},{columnName:i18n("host_details.sent"),targets:2,width:"10",name:"sent",data:"bytes_sent",className:"text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.rcvd"),targets:3,width:"10",name:"rcvd",data:"bytes_rcvd",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.breakdown"),targets:4,width:"10",name:"breakdown",data:"breakdown",orderable:!1,className:"text-center text-nowrap",responsivePriority:2,render:(e,t,n)=>{const a=100*n.bytes_sent/n.tot_bytes,s=100*n.bytes_rcvd/n.tot_bytes;return NtopUtils.createBreakdown(a,s,i18n("host_details.sent"),i18n("host_details.rcvd"))}},{columnName:i18n("host_details.tot_bytes"),targets:5,width:"20",name:"tot_bytes",data:"tot_bytes",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.tot_percentage"),targets:6,width:"20",name:"percentage",data:"percentage",className:"text-center text-nowrap",responsivePriority:2,render:e=>{const t=e.toFixed(1);return NtopUtils.createProgressBar(t)}}];is_ch_enabled&&e.add_action_column(s,"l7proto","application");let l=ntopng_utility.clone(a);l.columns_config=s,e.config_devices_applications=l,n.view="categories",a.data_url=NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/l7/data.lua`,n),s=[{columnName:i18n("host_details.category"),targets:0,width:"20",name:"category",data:"category",className:"text-nowrap",responsivePriority:1,render:t=>`<a href="${http_prefix}/lua/host_details.lua?host=${e.$props.url_params.host}@${e.$props.url_params.vlan}&ts_schema=host:ndpi_categories&page=historical&category=${t.label}" target="_blank">${t.label}</a>`},{columnName:i18n("host_details.applications"),targets:0,width:"20",name:"applications",data:"applications",orderable:!1,className:"text-nowrap",responsivePriority:1,render:e=>`${e.label||""} <a href="${http_prefix}/${e.href}${e.category_id}">${e.more_protos||""}</a>`},{columnName:i18n("host_details.duration"),targets:0,width:"15",name:"duration",data:"duration",className:"text-nowrap",responsivePriority:1,render:e=>NtopUtils.secondsToTime(e)},{columnName:i18n("host_details.tot_bytes"),targets:0,width:"20",name:"tot_bytes",data:"tot_bytes",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("host_details.tot_percentage"),targets:0,width:"25",name:"percentage",data:"percentage",width:"20%",className:"text-center text-nowrap",responsivePriority:2,render:e=>{const t=e.toFixed(1);return NtopUtils.createProgressBar(t)}}],is_ch_enabled&&e.add_action_column(s,"l7cat","category");let i=ntopng_utility.clone(a);i.columns_config=s,i.table_config.order=[[4,"desc"]],i.table_config.columnDefs=[{type:"time-uni",targets:2},{type:"file-size",targets:3}],e.config_devices_categories=i}(this)},mounted(){k.on_custom_event("change_applications_tab_event",ob,(e=>{let t=this.get_active_table();y.set_key_to_url("view",e.id),t.destroy_table(),this.applications_tab=e.id}))},data(){return{i18n:e=>i18n(e),applications_tab:null,config_devices_applications:null,config_devices_categories:null,chart_options:[{title:i18n("graphs.top_10_ndpi_protocols"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/l7/proto_data.lua`,tab:"applications",id:"top_applications"},{title:i18n("graphs.top_breed"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/l7/breed_data.lua`,tab:"applications",id:"top_breed"},{title:i18n("graphs.top_10_ndpi_categories"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/l7/cat_data.lua`,tab:"categories",id:"top_categories"},{title:i18n("graphs.top_breed"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/l7/breed_data.lua`,tab:"categories",id:"top_breed"}],tab_list:[{title:i18n("host_details.applications_tab"),active:"applications"==this.$props.view,id:"applications"},{title:i18n("host_details.categories_tab"),active:"categories"==this.$props.view,id:"categories"}]}},methods:{add_action_column:function(e,t,n){const a=`${this.$props.url_params.host}`,s=`${this.$props.url_params.vlan}`,l=`${this.$props.url_params.ifid}`;let i="page-stats-action-jump-historical";e.push({columnName:i18n("actions"),width:"5%",name:"actions",className:"text-center",orderable:!1,responsivePriority:0,handlerId:i,render:(e,o,r)=>{const c={handlerId:i,onClick:()=>{let e=`${http_prefix}/lua/pro/db_search.lua?ifid=${l}&${t}=${r[n].id};eq&ip=${a};eq`;0!=s&&(e=`${e}&vlan_id=${s};eq`),window.open(e)}};return DataTableUtils.createActionButtons([{class:"dropdown-item",href:"#",title:i18n("db_explorer.historical_data"),handler:c}])}})},destroy:function(){this.get_active_table().destroy_table()},click_item:function(e){this.tab_list.forEach((e=>e.active=!1)),e.active=!0,k.emit_custom_event(ob,e)},reload_table:function(){let e=this.get_active_table();NtopUtils.showOverlays(),e.reload(),NtopUtils.hideOverlays()},get_active_table:function(){return this.$refs[`table_host_${this.applications_tab}`]},get_f_get_custom_chart_options:()=>(console.log("get_f_"),async e=>charts_options_items.value[chart_index].chart_options)}};const cb={class:"row"},ub={class:"col-md-12 col-lg-12"},db={class:"card"},pb=Ll("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Ll("div",{class:"text-center"},[Ll("div",{class:"spinner-border text-primary mt-5",role:"status"},[Ll("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),_b={class:"card-body"},fb={id:"host_details_applications"},hb={class:"row mb-4 mt-4",id:"host_details_applications"},mb={class:"col-6"},gb={key:0,class:"widget-name"};rb.render=function(e,t,n,a,s,l){const i=bs("tab-list"),o=bs("chart"),r=bs("datatable");return Nl(),Ml("div",cb,[Ll("div",ub,[Ll("div",db,[pb,Ll("div",_b,[Ll("div",fb,[Vl(i,{ref:"host_details_applications_tab_list",id:"host_details_applications_tab_list",tab_list:s.tab_list,onClick_item:l.click_item},null,8,["tab_list","onClick_item"]),Ll("div",hb,[(Nl(!0),Ml(wl,null,Ss(s.chart_options,(e=>(Nl(),Ml("div",mb,[e.tab==s.applications_tab?(Nl(),Ml("h3",gb,Z(e.title),1)):Gl("v-if",!0),e.tab==s.applications_tab?(Nl(),Il(o,{key:1,id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!1},null,8,["id","chart_type","base_url_request"])):Gl("v-if",!0)])))),256))]),"applications"==s.applications_tab?(Nl(),Il(r,{key:0,ref:"table_host_applications",table_buttons:s.config_devices_applications.table_buttons,columns_config:s.config_devices_applications.columns_config,data_url:s.config_devices_applications.data_url,enable_search:s.config_devices_applications.enable_search,table_config:s.config_devices_applications.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])):Gl("v-if",!0),"categories"==s.applications_tab?(Nl(),Il(r,{key:1,ref:"table_host_categories",table_buttons:s.config_devices_categories.table_buttons,columns_config:s.config_devices_categories.columns_config,data_url:s.config_devices_categories.data_url,enable_search:s.config_devices_categories.enable_search,table_config:s.config_devices_categories.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])):Gl("v-if",!0)])])])])])},rb.__file="http_src/vue/page-host-details-applications.vue";const vb={class:"row"},bb={class:"col-md-12 col-lg-12"},yb={class:"card"},wb=Ll("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Ll("div",{class:"text-center"},[Ll("div",{class:"spinner-border text-primary mt-5",role:"status"},[Ll("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),xb={class:"card-body"},kb={id:"host_details_traffic"},$b={class:"row mb-4 mt-4",id:"host_details_traffic"},Sb={class:"col-4"},Cb={class:"widget-name"};var Nb={__name:"page-host-details-traffic",props:{page_csrf:String},setup(e){const t=pn(null);pn([]);const n=pn({});os((async()=>{!function(e){const a=[];let s={};s.host=y.get_url_entry("host"),s.vlan=y.get_url_entry("vlan"),s.ifid=y.get_url_entry("ifid"),a.push({text:'<i class="fas fa-sync"></i>',className:"btn-link",action:function(e,n,a,s){t.value.reload()}});let l={table_buttons:a,data_url:NtopUtils.buildURL(`${http_prefix}/lua/rest/v2/get/host/l4/data.lua`,s),enable_search:!0,table_config:{serverSide:!1,order:[[6,"desc"]],columnDefs:[{type:"time-uni",targets:1},{type:"file-size",targets:2},{type:"file-size",targets:3},{type:"file-size",targets:5}]}},i=[{columnName:i18n("protocol"),targets:0,width:"10",name:"protocol",data:"protocol",className:"text-nowrap",responsivePriority:1},{columnName:i18n("chart"),targets:1,width:"10",name:"historical",data:"historical",className:"text-nowrap",responsivePriority:1},{columnName:i18n("traffic_labels.bytes_sent"),targets:2,width:"10",name:"sent",data:"bytes_sent",className:"text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("traffic_labels.bytes_rcvd"),targets:3,width:"10",name:"rcvd",data:"bytes_rcvd",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("traffic_labels.breakdown"),targets:4,width:"20",name:"breakdown",data:"breakdown",orderable:!1,className:"text-center text-nowrap",responsivePriority:2,render:(e,t,n)=>{const a=100*n.bytes_sent/n.total_bytes,s=100*n.bytes_rcvd/n.total_bytes;return NtopUtils.createBreakdown(a,s,i18n("host_details.sent"),i18n("host_details.rcvd"))}},{columnName:i18n("traffic_labels.total_bytes"),targets:5,width:"20",name:"tot_bytes",data:"total_bytes",className:"text-center text-nowrap",responsivePriority:2,render:e=>NtopUtils.bytesToSize(e)},{columnName:i18n("traffic_labels.total_percentage"),targets:6,width:"20",name:"percentage",data:"total_percentage",className:"text-center text-nowrap",responsivePriority:2,render:e=>{const t=e.toFixed(1);return NtopUtils.createProgressBar(t)}}],o=ntopng_utility.clone(l);o.columns_config=i,n.value=o}()})),ps((async()=>{t.value.destroy_table()}));const a=[{title:i18n("graphs.l4_proto"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/l4/proto_data.lua`,id:"traffic_protos"},{title:i18n("graphs.contacted_hosts"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/l4/contacted_hosts_data.lua`,id:"contacted_hosts"},{title:i18n("graphs.traffic"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/l4/traffic_data.lua`,id:"traffic"}];return(e,s)=>(Nl(),Ml("div",vb,[Ll("div",bb,[Ll("div",yb,[wb,Ll("div",xb,[Ll("div",kb,[Ll("div",$b,[(Nl(),Ml(wl,null,Ss(a,(e=>Ll("div",Sb,[Ll("h3",Cb,Z(e.title),1),Vl(Pd,{id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!1},null,8,["id","chart_type","base_url_request"])]))),64))]),Vl(Xf,{ref_key:"traffic_table",ref:t,table_buttons:n.value.table_buttons,columns_config:n.value.columns_config,data_url:n.value.data_url,enable_search:n.value.enable_search,table_config:n.value.table_config},null,8,["table_buttons","columns_config","data_url","enable_search","table_config"])])])])])]))},__file:"http_src/vue/page-host-details-traffic.vue"};const Ab={class:"row"},Tb={class:"col-md-12 col-lg-12"},Eb={class:"card"},Pb=Ll("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Ll("div",{class:"text-center"},[Ll("div",{class:"spinner-border text-primary mt-5",role:"status"},[Ll("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Mb={class:"card-body"},Ib={class:"row"},Ob={class:"col-6 mb-4 mt-4"},Ub={class:"widget-name"};var Fb={__name:"page-host-details-packets",props:{page_csrf:String,url_params:Object},setup(e){const t=[{title:i18n("graphs.packets_sent"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/packets/sent_data.lua`,id:"packets_sent"},{title:i18n("graphs.packets_rcvd"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/packets/rcvd_data.lua`,id:"packets_rcvd"},{title:i18n("graphs.tcp_flags"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/packets/tcp_flags_data.lua`,id:"tcp_flags"},{title:i18n("graphs.arp_distribution"),type:ntopChartApex.typeChart.PIE,url:`${http_prefix}/lua/rest/v2/get/host/packets/arp_data.lua`,id:"arp_requests"}];function a(e,t,a){n.hideOverlays()}return rs((()=>{})),(e,n)=>(Nl(),Ml("div",Ab,[Ll("div",Tb,[Ll("div",Eb,[Pb,Ll("div",Mb,[Ll("div",Ib,[(Nl(),Ml(wl,null,Ss(t,(e=>Ll("div",Ob,[Ll("h3",Ub,Z(e.title),1),Vl(Pd,{id:e.id,chart_type:e.type,base_url_request:e.url,register_on_status_change:!1,onChart_reloaded:a},null,8,["id","chart_type","base_url_request"])]))),64))])])])])]))},__file:"http_src/vue/page-host-details-packets.vue"};let Rb=d3v7;const Db={align:"justify",nodeId:e=>e.id,nodeTitle:e=>`${e.id}`,nodeGroup:e=>e.id.split(/\W/)[0],nodeAlign:Rb.sankeyJustify,nodeWidth:15,nodePadding:10,nodeLabel:e=>e.id,nodeLabelPadding:6,nodeStroke:"currentColor",linkSource:({source:e})=>e,linkTarget:({target:e})=>e,linkSourceNode:({source_node:e})=>e,linkTargetNode:({target_node:e})=>e,linkPath:Rb.sankeyLinkHorizontal(),linkValue:({value:e})=>e,linkLink:({link:e})=>e,linkTitle:e=>`${e.source_node} → ${e.target_node} : ${e.link}\n${e.value}`,linkColor:({link_color:e})=>e,sourceColor:({source_color:e})=>e||"",targetColor:({target_color:e})=>e||"",sourceLink:({source_link:e})=>e||"",targetLink:({target_link:e})=>e||"",linkStrokeOpacity:.5,linkMixBlendMode:"multiply",colors:Rb.schemeTableau10,width:1200,height:600,marginTop:5,marginRight:1,marginBottom:5,marginLeft:1},jb=e=>`${i18n("flow")}: ${e.source_node} → ${e.target_node}\n${i18n("protocol")}: ${e.link}\n${i18n("traffic")}: ${n.bytesToSize(e.value)}`,Lb=function(e){Rb.select(this).attr("transform","translate("+e.x+","+(e.y=Math.max(0,Math.min(height-e.dy,Rb.event.y)))+")"),sankey.relayout(),link.attr("d",path)},Vb={formatFlowTitle:jb,dragNodeEvent:Lb,getDefaultSankeySettings:function(){return Db}},zb=["id"];var Bb={__name:"sankey",props:{id:String,page_csrf:String,url:String,url_params:Array,extra_settings:Object},setup(e,{expose:t}){const n=e;let a=d3v7;return rs((()=>{})),t({updateData:async function(e){NtopUtils.showOverlays();const t=function(){let e={};return n.url_params.forEach((t=>{e[t]=ntopng_url_manager.get_url_entry(t)})),NtopUtils.buildURL(n.url,e)}();await $.get(t,(function(e,t){let s=function(e){let t={...Vb.getDefaultSankeySettings(),...n.extra_settings};const s=a.map(e,t.linkSource).map($),l=a.map(e,t.linkTarget).map($),i=a.map(e,t.linkSourceNode).map($),o=a.map(e,t.linkTargetNode).map($),r=a.map(e,t.linkLink).map($),c=a.map(e,t.linkValue),u=a.map(e,t.linkColor),d=a.map(e,t.sourceColor),p=a.map(e,t.targetColor),_=a.map(e,t.sourceLink),f=a.map(e,t.targetLink);let h=e,m=Array.from(a.union(s,l),(e=>({id:e})));const g=a.map(m,t.nodeId).map($);t.nodeGroups=a.map(m,t.nodeGroup).map($),m=a.map(m,((e,t)=>({id:g[t]}))),h=a.map(h,((e,t)=>({source:s[t],target:l[t],value:c[t],source_node:i[t],target_node:o[t],link:r[t],color:u[t],source_color:d[t],target_color:p[t],source_link:_[t],target_link:f[t]})));const v=a.scaleOrdinal(t.nodeGroups,t.colors),b=a.map(m,t.nodeLabel),y=a.map(m,t.nodeTitle),w=a.map(h,t.linkTitle);d3v7.sankey().nodeId((({index:e})=>g[e])).nodeAlign(t.nodeAlign).nodeWidth(t.nodeWidth).nodePadding(t.nodePadding).extent([[t.marginLeft,t.marginTop],[t.width-t.marginRight,t.height-t.marginBottom]])({nodes:m,links:h});const x=a.create("svg").attr("viewBox",[0,0,t.width,t.height]).attr("style","max-width: 100%; height: 60vh; height: intrinsic;");x.append("g").attr("stroke",t.nodeStroke).attr("stroke-width",t.nodeStrokeWidth).attr("stroke-opacity",t.nodeStrokeOpacity).attr("stroke-linejoin",t.nodeStrokeLinejoin).selectAll("rect").data(m).join("rect").on("dblclick",(function(e){const t=(e=e.currentTarget.__data__).sourceLinks,n=e.targetLinks,a=t&&t[0]?t[0]:n[0];a&&(a.source.id===e.id?a.source_link&&""!==a.source_link&&window.open(a.source_link,"_blank"):a.target.id===e.id&&a.target_link&&""!==a.target_link&&window.open(a.target_link,"_blank"))})).attr("x",(e=>e.x0)).attr("y",(e=>e.y0)).attr("height",(e=>e.y1-e.y0)).attr("width",(e=>e.x1-e.x0)).attr("cursor","pointer").attr("fill",(e=>{const n=e.sourceLinks;let a=v(t.nodeGroups[e.index]);return n&&n[0]&&(n[0].source.id===e.id?a=n[0].source_color&&""!==n[0].source_color?n[0].source_color:a:n[0].target.id===e.id&&(a=n[0].target_color&&""!==n[0].target_color?n[0].target_color:a)),a})).append("title").text((({index:e})=>y[e]));const k=t.width;function $(e){return null!==e&&"object"==typeof e?e.valueOf():e}return x.append("g").attr("fill","none").attr("stroke-opacity",t.linkStrokeOpacity).selectAll("g").data(h).join("g").style("mix-blend-mode",t.linkMixBlendMode).append("path").attr("d",t.linkPath).attr("stroke",(({color:e})=>e)).attr("stroke-width",(({width:e})=>Math.max(1,e))).call(w?e=>e.append("title").text((({index:e})=>w[e])):()=>{}),x.append("g").attr("font-family","sans-serif").attr("font-size",10).selectAll("text").data(m).join("text").attr("x",(e=>e.x0<k/2?e.x1+t.nodeLabelPadding:e.x0-t.nodeLabelPadding)).attr("y",(e=>(e.y1+e.y0)/2)).attr("dy","0.35em").attr("text-anchor",(e=>e.x0<t.width/2?"start":"end")).text((({index:e})=>b[e])),Object.assign(x.node(),{scales:{color:v}})}(e.rsp);$(`#${n.id}`).append(s)})),NtopUtils.hideOverlays()}}),(t,n)=>(Nl(),Ml("div",{class:"d-flex justify-content-center align-items-center",id:e.id},null,8,zb))},__file:"http_src/vue/sankey.vue"};const qb={class:"row"},Hb={class:"col-md-12 col-lg-12"},Gb={class:"card card-shadow"},Kb=Ll("div",{class:"overlay justify-content-center align-items-center position-absolute h-100 w-100"},[Ll("div",{class:"text-center"},[Ll("div",{class:"spinner-border text-primary mt-5",role:"status"},[Ll("span",{class:"sr-only position-absolute"},"Loading...")])])],-1),Wb={class:"card-body"};var Jb={__name:"page-host-details-flow-sankey",props:{page_csrf:String,url:String,url_params:Object},setup(e){const t=e,n=pn(null),a={};return rs((()=>{a.linkTitle=Vb.formatFlowTitle,n.value.updateData()})),(e,s)=>(Nl(),Ml("div",qb,[Ll("div",Hb,[Ll("div",Gb,[Kb,Ll("div",Wb,[Vl(Bb,{ref_key:"flow_sankey",ref:n,id:"flow-sankey",page_csrf:t.page_csrf,url:t.url,url_params:t.url_params,extra_settings:a},null,8,["page_csrf","url","url_params"])])])])]))},__file:"http_src/vue/page-host-details-flow-sankey.vue"},Yb={components:{modal:pp,"select-search":Fd},props:{id:String,filters_options:Array},updated(){},data(){return{i18n:e=>i18n(e),jQuery:$,id_modal:`${this.$props.id}_modal`,filter_type_selected:[],filter_type_label_selected:null,operator_selected:[],option_selected:[],input_value:null,data_pattern_selected:null,input_required:!1,options_to_show:null,operators_to_show:[]}},emits:["apply"],created(){},async mounted(){await ntopng_sync.on_ready(this.id_modal),ntopng_events_manager.on_custom_event(this.$props.id,ntopng_custom_events.SHOW_MODAL_FILTERS,(e=>this.show(e))),ntopng_sync.ready(this.$props.id)},methods:{show:function(e){null!=this.$props.filters_options&&0!=this.$props.filters_options.length&&(null!=e?(this.filter_type_selected=e,this.change_filter(e)):(this.filter_type_selected=this.$props.filters_options[0],this.change_filter()),this.$refs.modal.show())},post_change:function(e){e.id&&this.$props.filters_options&&(this.filter_type_selected=this.$props.filters_options.find((t=>t.id==e.id))),e.value&&(this.options_to_show?this.option_selected=this.options_to_show.find((t=>t.value==e.value)):(this.option_selected=[],this.input_value=e.value,this.data_pattern_selected=this.get_data_pattern(e.value_type))),e.operator&&this.operators_to_show&&(this.operator_selected=this.operators_to_show.find((t=>t.id==e.operator)))},change_operator_type:function(e){e!=[]&&(this.operator_selected=e)},change_data_filter:function(e){e!=[]&&(this.option_selected=e)},change_filter:function(e){this.options_to_show=null,this.option_selected=null,this.input_value=null;let t=this.$props.filters_options.find((e=>e.id==this.filter_type_selected.id));null!=t&&(this.operators_to_show=t.operators,this.filter_type_label_selected=t.label,null!=t.options?(this.options_to_show=t.options.sort(((e,t)=>null==e||null==e.label?-1:null==t||null==t.label?1:e.label.toString().localeCompare(t.label.toString()))),this.option_selected||(this.option_selected=this.options_to_show[0])):(this.options_to_show=null,this.data_pattern_selected=this.get_data_pattern(t.value_type)),t.operators&&0==this.operator_selected.length&&(this.operator_selected=t.operators[0]),null!=e&&this.post_change(e))},get_data_pattern:function(e){if(this.input_required=!0,"text"==e)return this.input_required=!1,".*";if("ip"==e){let e=NtopUtils.REGEXES.ipv4,t=e.replace("$","@[0-9]{0,5}$"),n=NtopUtils.REGEXES.ipv6,a=n.replaceAll("$","@[0-9]{0,5}$");return`(${e})|(${t})|(${n})|(${a})`}return NtopUtils.REGEXES[e]},check_disable_apply:function(){let e=new RegExp(this.data_pattern_selected);return!this.options_to_show&&(this.input_required&&(null==this.input_value||""==this.input_value)||0==e.test(this.input_value))},apply:function(){let e=this.input_value,t=this.input_value;if(null==e||null!=this.option_selected&&0!=this.option_selected.length){let n=this.filters_options.find((e=>e.id==this.filter_type_selected.id)),a=n.options.find((e=>e.value==this.option_selected.value));e=a.value,t=a.value_label||a.label}else null==e&&(e="");let n={id:this.filter_type_selected.id,label:this.filter_type_label_selected,operator:this.operator_selected.id,value:e,value_label:t};this.$emit("apply",n),ntopng_events_manager.emit_custom_event(ntopng_custom_events.MODAL_FILTERS_APPLY,n),this.close()},close:function(){this.$refs.modal.close()}}};const Zb=e=>(ua("data-v-3119c83e"),e=e(),da(),e),Xb={autocomplete:"off"},Qb={class:"form-group row"},ey=Zb((()=>Ll("label",{class:"col-form-label col-sm-3",for:"dt-filter-type-select"},[Ll("b",null,"Filter")],-1))),ty={class:"col-sm-8"},ny=Zb((()=>Ll("hr",null,null,-1))),ay={class:"dt-filter-template-container form-group row"},sy={class:"col-form-label col-sm-3"},ly={class:"col-sm-8"},iy={class:"input-group mb-3"},oy={class:"input-group-prepend col-sm-3"},ry={key:0,class:"col-sm-9"},cy=["pattern","required"],uy={style:{margin:"0px",padding:"0"},class:"alert invalid-feedback"},dy=["disabled"];dp("\ninput ~ .alert[data-v-3119c83e] {\n  display: none;\n}\ninput:invalid ~ .alert[data-v-3119c83e] {\n  display: block;\n}\n"),Yb.render=function(e,t,n,a,s,l){const i=bs("select-search"),o=bs("modal");return Nl(),Il(o,{id:s.id_modal,ref:"modal"},{title:_a((()=>[ql(Z(s.i18n("alerts_dashboard.add_filter")),1)])),body:_a((()=>[Ll("form",Xb,[Ll("div",Qb,[ey,Ll("div",ty,[Vl(i,{selected_option:s.filter_type_selected,"onUpdate:selected_option":t[0]||(t[0]=e=>s.filter_type_selected=e),id:"filter_type",options:n.filters_options,onSelect_option:t[1]||(t[1]=e=>l.change_filter())},null,8,["selected_option","options"])])]),ny,Ll("div",ay,[Ll("label",sy,[Ll("b",null,Z(s.filter_type_label_selected),1)]),Ll("div",ly,[Ll("div",iy,[Ll("div",oy,[Vl(i,{selected_option:s.operator_selected,"onUpdate:selected_option":t[2]||(t[2]=e=>s.operator_selected=e),id:"operator_filter",options:s.operators_to_show,onSelect_option:l.change_operator_type},null,8,["selected_option","options","onSelect_option"])]),s.options_to_show?(Nl(),Ml("div",ry,[Vl(i,{selected_option:s.option_selected,"onUpdate:selected_option":t[3]||(t[3]=e=>s.option_selected=e),id:"data_filter",options:s.options_to_show,onSelect_option:l.change_data_filter},null,8,["selected_option","options","onSelect_option"])])):(Nl(),Ml(wl,{key:1},[gs(Ll("input",{"onUpdate:modelValue":t[4]||(t[4]=e=>s.input_value=e),pattern:s.data_pattern_selected,name:"value",required:s.input_required,type:"text",class:"form-control"},null,8,cy),[[Po,s.input_value]]),Ll("span",uy,Z(s.i18n("invalid_value")),1)],64))]),Gl(" end div input-group mb-3 ")]),Gl(" end div form-group-row ")])])])),footer:_a((()=>[Ll("button",{type:"button",disabled:l.check_disable_apply(),onClick:t[5]||(t[5]=(...e)=>l.apply&&l.apply(...e)),class:"btn btn-primary"},Z(s.i18n("apply")),9,dy)])),_:1},8,["id"])},Yb.__scopeId="data-v-3119c83e",Yb.__file="http_src/vue/modal-filters.vue";let py,_y,fy=[];let hy,my,gy=null!=window.location.toString().match(/alert_stats.lua/),vy={value:ntopng_url_manager.get_url_entry("query_preset"),count:ntopng_url_manager.get_url_entry("count")};null==vy.value&&(vy.value="");let by=ntopng_url_manager.get_url_entry("status");null!=by&&""!=by||(by="historical");const yy=!gy;let wy=function(e){let t=ntopng_url_manager.get_url_entry("page");return null==t&&(t=e?"all":"overview"),t}(gy);const xy=async function(){fy=await async function(e,t){let n;if(e)n=`${base_path}/lua/rest/v2/get/alert/filter/consts.lua?page=${t}`;else{let e=ntopng_url_manager.get_url_entry("query_preset");null==e&&(e=""),n=`${base_path}/lua/pro/rest/v2/get/db/filter/consts.lua?page=${t}&query_preset=${e}`}return await ntopng_utility.http_request(n)}(gy,wy),fy.filter((e=>null==e.label)).forEach((e=>{console.error(`label not defined for filter ${JSON.stringify(e)}`),e.label=""})),fy.sort(((e,t)=>e.label.localeCompare(t.label))),i18n_ext.tags={},py={},_y={},fy.forEach((e=>{i18n_ext.tags[e.id]=e.label,e.operators.forEach((e=>py[e.id]=e.label)),_y[e.id]=e.operators.map((e=>e.id))}));let e=ntopng_url_manager.get_url_entries(),t=[];for(const[n,a]of e){let e=fy.find((e=>e.id==n));if(null!=e){a.split(",").forEach((n=>{let[a,s]=n.split(";");null==s||null==a||""==s||null!=e.options&&null==e.options.find((e=>e.value==a))||t.push({id:e.id,operator:s,value:a})}))}}return t};var ky={props:{id:String},components:{"data-time-range-picker":Rd,"modal-filters":Yb},created(){},async mounted(){let e=ntopng_sync.on_ready(this.id_data_time_range_picker);if(ntopng_sync.on_ready(this.id_modal_filters),await e,this.enable_query_presets&&await async function(e){let t=e.page,n=`${base_path}/lua/pro/rest/v2/get/db/preset/consts.lua?page=${t}`,a=await ntopng_utility.http_request(n),s=a[0].list.map((e=>({value:e.id,name:e.name,count:e.count,builtin:!0})));if(a.length>1&&a[1].list.forEach((e=>{let t={value:e.id,name:e.name,count:e.count};s.push(t)})),null==e.query_preset||""==e.query_preset.value)e.query_preset=s[0];else{let t=s.find((t=>t.value==e.query_preset.value));e.query_preset=t}return ntopng_url_manager.set_key_to_url("query_preset",e.query_preset.value),ntopng_url_manager.set_key_to_url("count",e.query_preset.count),e.query_presets=s,a}(this),"all"!=this.page){let e=await xy();my=function(e){const t=new Tagify(e.$refs.tagify,{duplicates:!0,delimiters:null,dropdown:{enabled:1,classname:"extra-properties"},autoComplete:{enabled:!1},templates:{tag:function(e){try{return`<tag title='${e.value}' contenteditable='false' spellcheck="false" class='tagify__tag ${e.class?e.class:""}' ${this.getAttributes(e)}>\n                        <x title='remove tag' class='tagify__tag__removeBtn'></x>\n                        <div>\n                            ${e.label?`<b>${e.label}</b>&nbsp;`:""}\n                            <b class='operator'>${e.selectedOperator?py[e.selectedOperator]:"="}</b>&nbsp;\n                            <span class='tagify__tag-text'>${e.value}</span>\n                        </div>\n                    </tag>`}catch(e){console.error(`An error occured when creating a new tag: ${e}`)}}},validate:function(e){return void 0!==e.key&&void 0!==e.selectedOperator&&void 0!==e.value}});$(document).ready((function(){t.addTags(hy)}));const n=async function(e){"number"==typeof e.realValue&&(e.realValue=""+e.realValue),"number"==typeof e.value&&(e.value=""+e.value);let n=t.getTagElms().find((t=>t.getAttribute("key")===e.key&&t.getAttribute("realValue")===e.realValue));void 0===t.tagData(n)&&(_y[e.key]&&!Array.isArray(_y[e.key])&&(e.operators=_y[e.key].operators),e.selectedOperator||(e.selectedOperator="eq"),t.addTags([e]))};return t.on("remove",(async function(e){const t=e.detail.data.key,n=e.detail.data.realValue,a=ntopng_status_manager.get_status();if(void 0===t)return;if(null==a.filters)return;const s=a.filters.filter((e=>e.id!=t||e.id==t&&e.value!=n));ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:s})})),t.on("add",(async function(e){const n=e.detail;if(void 0===n.data)return;return n.data.key?void 0:(t.removeTags([e.detail.tag]),e.preventDefault(),void e.stopPropagation())})),t.on("click",(async function(t){const n=t.detail;if(void 0===n.data)return;if(void 0===n.data.key)return;const a=n.data;e.edit_tag=a,ntopng_events_manager.emit_custom_event(ntopng_custom_events.SHOW_MODAL_FILTERS,{id:a.key,operator:a.selectedOperator,value:a.realValue})})),t.on("edit:updated",(async function(e){console.warn("UPDATED")})),$("tags").on("change","select.operator",(async function(e){console.warn("TAGS change")})),{tagify:t,addFilterTag:n}}(this),ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:e}),ntopng_events_manager.on_event_change(this.$props.id,ntopng_events.FILTERS_CHANGE,(e=>this.reload_status(e)),!0)}this.modal_data=fy,ntopng_sync.ready(this.$props.id)},data(){return{i18n:i18n,id_modal_filters:`${this.$props.id}_modal_filters`,id_data_time_range_picker:`${this.$props.id}_data-time-range-picker`,show_filters:!1,edit_tag:null,is_alert_stats_url:gy,query_presets:[],query_preset:vy,status_view:by,enable_query_presets:yy,page:wy,modal_data:[],last_filters:[]}},methods:{is_filter_defined:function(e){return null!=_y[e.id]},update_status_view:function(e){ntopng_url_manager.set_key_to_url("status",e),ntopng_url_manager.reload_url()},update_select_query_presets:function(){ntopng_url_manager.get_url_params(),ntopng_url_manager.set_key_to_url("query_preset",this.query_preset.value),ntopng_url_manager.set_key_to_url("count",this.query_preset.count),ntopng_url_manager.reload_url()},show_modal_filters:function(){this.$refs.modal_filters.show()},remove_filters:function(){ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:[]})},reload_status:function(e){let t=e.filters;if(null==t)return;ntopng_url_manager.delete_params(fy.map((e=>e.id))),my.tagify.removeAllTags();let n=function(e){if(null==e)return{};let t={};e.forEach((e=>{let n=t[e.id];null==n&&(n=[],t[e.id]=n),n.push(e)}));let n={};for(let e in t){let a=t[e].filter((e=>null!=e.value&&null!=e.operator&&""!=e.operator)).map((e=>`${e.value};${e.operator}`)).join(",");n[e]=a}return n}(t);ntopng_url_manager.add_obj_to_url(n),t.forEach((e=>{let t=function(e){let t=fy.find((t=>t.id==e.id));null==t&&console.error("create_tag_from_filter: filter const not found;");let n=e.value;if(null!=t.options){let a=t.options.find((t=>t.value==e.value));null!=a&&(n=a.label)}const a={label:t.label,key:t.id,value:n,realValue:e.value,title:`${t.label}${e.operator}${n}`,selectedOperator:e.operator};return""==a.value&&(a.value="''"),null==a.realValue||null==a.selectedOperator||""==a.selectedOperator?null:a}(e);null!=t&&my.addFilterTag(t)})),this.last_filters=t},apply_modal:function(e){let t=ntopng_status_manager.get_status().filters;null==t&&(t=[]),null!=this.edit_tag&&(t=t.filter((e=>e.id!=this.edit_tag.key||e.value!=this.edit_tag.realValue)),this.edit_tag=null),t.push(e),ntopng_events_manager.emit_event(ntopng_events.FILTERS_CHANGE,{filters:t})}}};const $y=e=>(ua("data-v-aaee59ea"),e=e(),da(),e),Sy={style:{width:"100%"}},Cy={class:"mb-1"},Ny={key:0,class:"d-flex align-items-center me-2"},Ay={class:"btn-group",id:"statusSwitch",role:"group"},Ty=["value"],Ey=["label"],Py=["value"],My={key:0,class:"d-flex mt-1",style:{width:"100%"}},Iy=["placeholder"],Oy=[$y((()=>Ll("span",null,[Ll("i",{class:"fas fa-plus","data-original-title":"",title:"Add Filter"})],-1)))],Uy=[$y((()=>Ll("i",{class:"fas fa-times"},null,-1)))];dp("\n.tagify__input[data-v-aaee59ea] {\n  min-width: 175px;\n}\n.tagify__tag[data-v-aaee59ea] {\n  white-space: nowrap;\n  margin: 3px 0px 5px 5px;\n}\n.tagify__tag select.operator[data-v-aaee59ea] {\n  margin: 0px 4px;\n  border: 1px solid #c4c4c4;\n  border-radius: 4px;\n}\n.tagify__tag b.operator[data-v-aaee59ea] {\n  margin: 0px 4px;\n  background-color: white;\n  border: 1px solid #c4c4c4;\n  border-radius: 4px;\n  padding: 0.05em 0.2em;\n}\n.tagify__tag > div[data-v-aaee59ea] {\n  display: flex;\n  align-items: center;\n}\n"),ky.render=function(e,t,n,a,s,l){const i=bs("modal-filters"),o=bs("data-time-range-picker");return Nl(),Ml("div",Sy,[Ll("div",Cy,[Vl(i,{filters_options:s.modal_data,onApply:l.apply_modal,ref:"modal_filters",id:s.id_modal_filters},null,8,["filters_options","onApply","id"]),Vl(o,{id:s.id_data_time_range_picker},{begin:_a((()=>[s.is_alert_stats_url?(Nl(),Ml("div",Ny,[Ll("div",Ay,[Ll("a",{href:"#",onClick:t[0]||(t[0]=e=>l.update_status_view("historical")),class:q(["btn btn-sm",{active:"historical"==s.status_view,"btn-seconday":"historical"!=s.status_view,"btn-primary":"historical"==s.status_view}])},"Past",2),Ll("a",{href:"#",onClick:t[1]||(t[1]=e=>l.update_status_view("acknowledged")),class:q(["btn btn-sm",{active:"acknowledged"==s.status_view,"btn-seconday":"acknowledged"!=s.status_view,"btn-primary":"acknowledged"==s.status_view}])},"Ack",2),"flow"!=s.page?(Nl(),Ml("a",{key:0,href:"#",onClick:t[2]||(t[2]=e=>l.update_status_view("engaged")),class:q(["btn btn-sm",{active:"engaged"==s.status_view,"btn-seconday":"engaged"!=s.status_view,"btn-primary":"engaged"==s.status_view}])},"Engaged",2)):Gl("v-if",!0)])])):Gl("v-if",!0),s.enable_query_presets?gs((Nl(),Ml("select",{key:1,class:"me-2 form-select","onUpdate:modelValue":t[3]||(t[3]=e=>s.query_preset=e),onChange:t[4]||(t[4]=e=>l.update_select_query_presets())},[(Nl(!0),Ml(wl,null,Ss(s.query_presets,(e=>(Nl(),Ml(wl,null,[1==e.builtin?(Nl(),Ml("option",{key:0,value:e},Z(e.name),9,Ty)):Gl("v-if",!0)],64)))),256)),"analysis"!=s.page?(Nl(),Ml("optgroup",{key:0,label:s.i18n("queries.queries")},[(Nl(!0),Ml(wl,null,Ss(s.query_presets,(e=>(Nl(),Ml(wl,null,[e.builtin?Gl("v-if",!0):(Nl(),Ml("option",{key:0,value:e},Z(e.name),9,Py))],64)))),256))],8,Ey)):Gl("v-if",!0)],544)),[[Uo,s.query_preset]]):Gl("v-if",!0)])),extra_buttons:_a((()=>[Ns(e.$slots,"extra_range_buttons")])),_:3},8,["id"])]),Gl(" tagify "),"all"!=s.page?(Nl(),Ml("div",My,[Ll("input",{class:"w-100 form-control h-auto",name:"tags",ref:"tagify",placeholder:s.i18n("show_alerts.filters")},null,8,Iy),gs(Ll("button",{class:"btn btn-link","aria-controls":"flow-alerts-table",type:"button",id:"btn-add-alert-filter",onClick:t[5]||(t[5]=(...e)=>l.show_modal_filters&&l.show_modal_filters(...e))},Oy,512),[[Go,s.modal_data&&s.modal_data.length>0]]),gs(Ll("button",{"data-bs-toggle":"tooltip","data-placement":"bottom",title:"{{ i18n('show_alerts.remove_filters') }}",onClick:t[6]||(t[6]=(...e)=>l.remove_filters&&l.remove_filters(...e)),class:"btn ms-1 my-auto btn-sm btn-remove-tags"},Uy,512),[[Go,s.modal_data&&s.modal_data.length>0]])])):Gl("v-if",!0),Gl(" end tagify ")])},ky.__scopeId="data-v-aaee59ea",ky.__file="http_src/vue/range-picker.vue";var Fy={components:{},props:{chart_options:Object},watch:{chart_options:function(e,t){this.reloaded_table()}},emits:[],created(){},data:()=>({total:0,percentile_sent:0,percentile_rcvd:0,avg_sent:0,avg_rcvd:0,max_sent:0,max_rcvd:0}),async mounted(){console.log("Mounted Simple table")},methods:{reloaded_table:function(){let e=ntopChartApex.chartOptionsUtility.getApexYFormatter(ntopChartApex.chartOptionsUtility.apexYFormatterTypes.bps.id),t=ntopChartApex.chartOptionsUtility.getApexYFormatter(ntopChartApex.chartOptionsUtility.apexYFormatterTypes.bytes.id);console.log("reloaded table called"),console.log(this.chart_options.statistics.by_serie),console.log("OBJECT KEYS");let n=this.chart_options.statistics.total,a=this.chart_options.statistics.by_serie[0].max_val,s=this.chart_options.statistics.by_serie[1].max_val,l=this.chart_options.statistics.by_serie[0].average,i=this.chart_options.statistics.by_serie[1].average,o=this.chart_options.statistics.by_serie[0]["95th_percentile"],r=this.chart_options.statistics.by_serie[1]["95th_percentile"];this.max_sent=e(8*a),this.max_rcvd=e(8*s),this.avg_sent=e(8*l),this.avg_rcvd=e(8*i),this.percentile_sent=e(8*o),this.percentile_rcvd=e(8*r),this.total=t(n)}}};const Ry={class:"table table-borderless graph-statistics mb-2",style:{}},Dy=Ll("thead",{class:"text-center"},[Ll("tr",null,[Ll("th",{class:"graph-val-total-title fs-6",style:{"border-left-width":"1px","border-top-width":"1px"}}," Total:"),Ll("th",{class:"graph-val-95percentile-title fs-6",style:{"border-left-width":"1px","border-top-width":"1px"}},[ql("95th "),Ll("a",{href:"https://en.wikipedia.org/wiki/Percentile"},"Percentile"),ql(":")]),Ll("th",{class:"graph-val-average-title fs-6",style:{"border-left-width":"1px","border-top-width":"1px"}},"Average:"),Ll("th",{class:"graph-val-max-title fs-6",style:{"border-left-width":"1px","border-top-width":"1px","border-right-width":"1px"}},"Max:")])],-1),jy={class:"graph-val-total text-center",style:{"border-width":"1px"}},Ly={class:"graph-val-95percentile text-center",style:{"border-top-width":"1px","border-right-width":"1px","border-bottom-width":"1px"}},Vy=Ll("br",null,null,-1),zy={class:"graph-val-average text-center",style:{"border-top-width":"1px","border-right-width":"1px","border-bottom-width":"1px"}},By=Ll("br",null,null,-1),qy={class:"graph-val-max text-center",style:{"border-bottom-width":"1px","border-top-width":"1px","border-right-width":"1px"}},Hy=Ll("br",null,null,-1);Fy.render=function(e,t,n,a,s,l){return Nl(),Ml("div",null,[Ll("table",Ry,[Dy,Ll("tbody",null,[Ll("tr",null,[Ll("td",jy,[Ll("span",null,Z(s.total),1)]),Ll("td",Ly,[Ll("span",null,[ql(Z(s.percentile_sent)+" [Sent]",1),Vy,ql(Z(s.percentile_rcvd)+" [Rcvd]",1)])]),Ll("td",zy,[Ll("span",null,[ql(Z(s.avg_sent)+" Kbit/s [Sent]",1),By,ql(Z(s.avg_rcvd)+" [Rcvd]",1)])]),Gl(' <td class="graph-val-min" style="display:none;border-bottom-width: 1px;border-top-width: 1px;border-right-width: 1px;">nil: <span></span></td> '),Ll("td",qy,[Ll("span",null,[ql(Z(s.max_sent)+" [Sent]",1),Hy,ql(Z(s.max_rcvd)+" [Rcvd]",1)])])])])])])},Fy.__file="http_src/vue/simple-table.vue";const Gy=e=>(ua("data-v-7e5acce0"),e=e(),da(),e),Ky={class:"mb-3 row"},Wy={class:"col-form-label col-sm-4"},Jy={class:"col-sm-6"},Yy={class:"btn-group btn-group-toggle","data-bs-toggle":"buttons"},Zy=Gy((()=>Ll("hr",null,null,-1))),Xy={class:"host-alert-fields"},Qy={class:"mb-3 row"},ew={class:"col-form-label col-sm-4"},tw={class:"col-sm-6"},nw={value:""},aw={value:"0"},sw={disabled:""},lw=["value"],iw={class:"flow-alert-fields"},ow={class:"mb-3 row"},rw={class:"col-form-label col-sm-4"},cw={class:"col-sm-6"},uw={value:""},dw={value:"0"},pw={disabled:""},_w=["value"],fw={key:0,class:"ip-fields"},hw={class:"mb-3 row"},mw={class:"col-form-label col-sm-4"},gw={class:"col-sm-6"},vw=["pattern"],bw={key:1,class:"network-fields"},yw={class:"mb-3 row"},ww={class:"col-form-label col-sm-4"},xw={class:"col-sm-4 pr-0"},kw=["pattern"],$w={class:"col-sm-2 ps-4 pe-0"},Sw=Gy((()=>Ll("span",{class:"me-2"},"/",-1))),Cw={class:"mb-3 row"},Nw={class:"col-form-label col-sm-4"},Aw={class:"col-sm-6"},Tw={class:"mb-3 row"},Ew={class:"col-form-label col-sm-4"},Pw={key:0},Mw={key:1},Iw={class:"col-sm-6"},Ow=["pattern"],Uw=["pattern"],Fw=["disabled"];var Rw={__name:"modal-add-check-exclusion",props:{alert_exclusions_page:String,host_alert_types:Array,flow_alert_types:Array},emits:["add"],setup(e,{expose:t,emit:n}){const a=e,s=pn(null),l=pn("ip"),i=pn(""),o=pn(""),r=pn(0),c=pn(""),u=pn(""),d=pn(""),p=pn("");function _(e){if("text"==e)return NtopUtils.REGEXES.non_quoted_text;if("ip"==e){let e=NtopUtils.REGEXES.ipv4,t=e.replace("$","@[0-9]{0,5}$"),n=NtopUtils.REGEXES.ipv6,a=n.replaceAll("$","@[0-9]{0,5}$");return`(${e})|(${t})|(${n})|(${a})`}return"hostname"==e?`${NtopUtils.REGEXES.singleword}|[a-zA-Z0-9._-]{3,250}@[0-9]{0,5}$`:"certificate"==e?NtopUtils.REGEXES.tls_certificate:NtopUtils.REGEXES[e]}let f=_("ip"),h=_("text"),m=_("certificate");const g=e=>{l.value=e},v=()=>{let e=null,t=!0;return"hosts"==a.alert_exclusions_page?(e=new RegExp(f),t="ip"==l.value?null==i.value||""==i.value||0==e.test(i.value)||""==u.value&&""==d.value:null==o.value||""==o.value||0==e.test(o.value)||""==u.value&&""==d.value||null==p.value||""==p.value||parseInt(p.value)<1||parseInt(p.value)>127):"domain_names"==a.alert_exclusions_page?(e=new RegExp(h),t=null==c.value||""==c.value||0==e.test(c.value)):"tls_certificate"==a.alert_exclusions_page&&(e=new RegExp(m),t=null==c.value||""==c.value||0==e.test(c.value)),t},b=()=>{s.value.close()},y=()=>{let e,t=i.value;"hosts"==a.alert_exclusions_page?("network"==l.value&&(t=`${o.value}/${p.value}`),null!=r.value&&0!=r.value&&(t=`${t}@${r.value}`),e={alert_addr:t,host_alert_key:u.value,flow_alert_key:d.value}):"domain_names"==a.alert_exclusions_page?e={alert_domain:c.value}:"tls_certificate"==a.alert_exclusions_page&&(e={alert_certificate:c.value}),n("add",e),b()};t({show:()=>{l.value="ip",i.value="",o.value="",r.value=0,u.value="",d.value="",p.value="",c.value="",s.value.show()},close:b}),rs((()=>{}));const w=e=>i18n(e);return(t,n)=>(Nl(),Il(pp,{onShowed:n[10]||(n[10]=e=>{}),ref_key:"modal_id",ref:s},{title:_a((()=>[ql(Z(w("check_exclusion.add_exclusion")),1)])),body:_a((()=>["hosts"==e.alert_exclusions_page?(Nl(),Ml(wl,{key:0},[Gl(" modal hosts "),Ll("div",Ky,[Ll("label",Wy,[Ll("b",null,Z(w("check_exclusion.member_type")),1)]),Ll("div",Jy,[Ll("div",Yy,[Ll("label",{class:q([{active:"ip"==l.value},"btn btn-secondary"])},[Ll("input",{class:"btn-check",type:"radio",name:"member_type",value:"ip",onClick:n[0]||(n[0]=e=>g("ip"))}),ql(" "+Z(w("check_exclusion.ip_address")),1)],2),Ll("label",{class:q([{active:"network"==l.value},"btn btn-secondary"])},[Ll("input",{onClick:n[1]||(n[1]=e=>g("network")),class:"btn-check",type:"radio",name:"member_type",value:"network"}),ql(" "+Z(w("check_exclusion.network")),1)],2)])])]),Zy,Ll("div",Xy,[Ll("div",Qy,[Ll("label",ew,[Ll("b",null,Z(w("check_exclusion.host_alert_type")),1)]),Ll("div",tw,[gs(Ll("select",{name:"value",class:"form-select alert-select","onUpdate:modelValue":n[2]||(n[2]=e=>u.value=e)},[Ll("option",nw,Z(w("check_exclusion.none")),1),Ll("option",aw,Z(w("check_exclusion.exclude_all_alerts")),1),Ll("option",sw,Z(w("check_exclusion.spacing_bar")),1),(Nl(!0),Ml(wl,null,Ss(e.host_alert_types,(e=>(Nl(),Ml(wl,null,[null!=e?(Nl(),Ml("option",{key:0,value:e.alert_id},Z(e.label),9,lw)):Gl("v-if",!0)],64)))),256))],512),[[Uo,u.value]])])])]),Ll("div",iw,[Ll("div",ow,[Ll("label",rw,[Ll("b",null,Z(w("check_exclusion.flow_alert_type")),1)]),Ll("div",cw,[gs(Ll("select",{id:"flow-alert-select",name:"value",class:"form-select alert-select","onUpdate:modelValue":n[3]||(n[3]=e=>d.value=e)},[Ll("option",uw,Z(w("check_exclusion.none")),1),Ll("option",dw,Z(w("check_exclusion.exclude_all_alerts")),1),Ll("option",pw,Z(w("check_exclusion.spacing_bar")),1),(Nl(!0),Ml(wl,null,Ss(e.flow_alert_types,(e=>(Nl(),Ml(wl,null,[null!=e?(Nl(),Ml("option",{key:0,value:e.alert_id},Z(e.label),9,_w)):Gl("v-if",!0)],64)))),256))],512),[[Uo,d.value]])])])]),"ip"==l.value?(Nl(),Ml("div",fw,[Ll("div",hw,[Ll("label",mw,[Ll("b",null,Z(w("check_exclusion.ip_address")),1)]),Ll("div",gw,[gs(Ll("input",{pattern:gn(f),placeholder:"192.168.1.1",required:"",type:"text",name:"ip_address",class:"form-control","onUpdate:modelValue":n[4]||(n[4]=e=>i.value=e)},null,8,vw),[[Po,i.value]])])])])):Gl("v-if",!0),"network"==l.value?(Nl(),Ml("div",bw,[Ll("div",yw,[Ll("label",ww,[Ll("b",null,Z(w("check_exclusion.network")),1)]),Ll("div",xw,[gs(Ll("input",{required:"",style:{width:"calc(100% - 10px)"},name:"network",class:"form-control d-inline",placeholder:"172.16.0.0",pattern:gn(f),"onUpdate:modelValue":n[5]||(n[5]=e=>o.value=e)},null,8,kw),[[Po,o.value]])]),Ll("div",$w,[Sw,gs(Ll("input",{placeholder:"24",required:"",class:"form-control d-inline w-75",min:"1",max:"127",type:"number",name:"cidr","onUpdate:modelValue":n[6]||(n[6]=e=>p.value=e)},null,512),[[Po,p.value]])])])])):Gl("v-if",!0),Ll("div",Cw,[Ll("label",Nw,[Ll("b",null,Z(w("vlan")),1)]),Ll("div",Aw,[gs(Ll("input",{placeholder:"0",min:"0",type:"number","onUpdate:modelValue":n[7]||(n[7]=e=>r.value=e),class:"form-control"},null,512),[[Po,r.value]])])])],64)):Gl("v-if",!0),Gl(" mdoal hosts "),"hosts"!=e.alert_exclusions_page?(Nl(),Ml(wl,{key:1},[Gl(" modal domain_names"),Ll("div",null,[Ll("div",Tw,[Ll("label",Ew,["domain_names"==e.alert_exclusions_page?(Nl(),Ml("b",Pw,Z(w("check_exclusion.domain")),1)):Gl("v-if",!0),"tls_certificate"==e.alert_exclusions_page?(Nl(),Ml("b",Mw,Z(w("check_exclusion.tls_certificate")),1)):Gl("v-if",!0)]),Ll("div",Iw,["domain_names"==e.alert_exclusions_page?gs((Nl(),Ml("input",{key:0,placeholder:"",pattern:gn(h),required:"",type:"text",name:"ip_address",class:"form-control","onUpdate:modelValue":n[8]||(n[8]=e=>c.value=e)},null,8,Ow)),[[Po,c.value]]):Gl("v-if",!0),"tls_certificate"==e.alert_exclusions_page?gs((Nl(),Ml("input",{key:1,placeholder:"CN=813845657003339838, O=Code42, OU=TEST, ST=MN, C=U",pattern:gn(m),required:"",type:"text",name:"ip_address",class:"form-control","onUpdate:modelValue":n[9]||(n[9]=e=>c.value=e)},null,8,Uw)),[[Po,c.value]]):Gl("v-if",!0)])])])],64)):Gl("v-if",!0),Gl(" modal domain_names")])),footer:_a((()=>[Ll("button",{type:"button",disabled:v(),onClick:y,class:"btn btn-primary"},Z(w("add")),9,Fw)])),_:1},512))}};dp("\ninput[data-v-7e5acce0]:invalid {\n  border-color: #ff0000;\n}  \n"),Rw.__scopeId="data-v-7e5acce0",Rw.__file="http_src/vue/modal-add-check-exclusion.vue";const Dw=e=>(ua("data-v-19c5b1f1"),e=e(),da(),e),jw=["innerHTML"],Lw={class:"form-group mb-3"},Vw=["innerHTML"],zw=ql('". '),Bw={class:"alert_label"},qw={class:"form-check"},Hw={class:"form-check-label"},Gw={key:0,class:"form-check"},Kw={class:"form-check-label"},Ww={class:"form-check"},Jw={class:"form-check-label"},Yw={class:"form-check"},Zw={class:"form-check-label"},Xw={key:0,class:"exclude-domain-certificate"},Qw={class:"alert_label"},ex={key:0,class:"form-check"},tx={class:"form-check-label whitespace"},nx=["pattern","disabled"],ax={key:1,class:"form-check"},sx={class:"form-check-label whitespace"},lx=["disabled","pattern"],ix=Dw((()=>Ll("hr",{class:"separator"},null,-1))),ox={class:"form-group mb-3"},rx={class:"custom-control custom-switch"},cx={class:"custom-control-label"},ux={class:"alert alert-warning border",role:"alert"},dx=["disabled"];var px={__name:"modal-alerts-filter",props:{alert:Object,page:String},emits:["exclude"],setup(e,{expose:t,emit:n}){const a=e,s=pn(null),l=pn("any"),i=pn(!0),o=pn(null),r=pn(null);Ma((()=>a.alert),((e,t)=>{null!=e&&(l.value="any",i.value=!0,o.value=""==e.info?.value?null:e.info?.value,r.value=""==e.info?.issuerdn?null:e.info?.issuerdn)}));const c=()=>{if("domain"==l.value){let e=new RegExp(_);return null==o.value||0==e.test(o.value)}if("certificate"==l.value){let e=new RegExp(f);return null==r.value||0==e.test(r.value)}return!1},u=gi((()=>a.alert?.alert_name)),d=gi((()=>{let e={value:"",label:""};if("host"!=a.page||null==a.alert)return e;let t=a.alert;return e.value=t.ip.value,null!=t.vlan&&null!=t.vlan.value&&0!=t.vlan.value&&(e.value=e.value+"@"+t.vlan.value),e.label=t.ip.label?`${t.ip.label} (${t.ip.value})`:t.ip.value,e})),p=gi((()=>{let e={cli_value:"",cli_label:"",srv_value:"",srv_label:""};if("flow"!=a.page||null==a.alert)return e;let t=a.alert;return e.cli_value=t.flow.cli_ip.value,e.srv_value=t.flow.srv_ip.value,null!=t.flow.vlan&&null!=t.flow.vlan.value&&0!=t.flow.vlan.value&&(e.cli_value=e.cli_value+"@"+t.flow.vlan.value,e.srv_value=e.srv_value+"@"+t.flow.vlan.value),e.cli_label=t.flow.cli_ip.label?`${t.flow.cli_ip.label} (${e.cli_value})`:e.cli_value,e.srv_label=t.flow.srv_ip.label?`${t.flow.srv_ip.label} (${e.srv_value})`:e.srv_value,e}));let _=NtopUtils.REGEXES.non_quoted_text,f=NtopUtils.REGEXES.tls_certificate;const h=()=>{let e=a.page,t="domain"==l.value||"certificate"==l.value?l.value:"host",s={delete_alerts:i.value,type:t},c=null;"host"==t?("host"==l.value?c=d.value.value:"server_host"==l.value?c=p.value.srv_value:"client_host"==l.value&&(c=p.value.cli_value),s.alert_addr=c,"flow"==e?s.flow_alert_key=a.alert.alert_id.value:"host"==e&&(s.host_alert_key=a.alert.alert_id.value)):"domain"==t?(s.delete_alerts=!1,s.alert_domain=o.value):"certificate"==t&&(s.delete_alerts=!1,s.alert_certificate=r.value),m(),n("exclude",s)},m=()=>{s.value.close()};t({show:()=>{s.value.show()},close:m}),rs((()=>{}));const g=e=>i18n(e);return(t,n)=>(Nl(),Il(pp,{onShowed:n[9]||(n[9]=e=>{}),ref_key:"modal_id",ref:s},{title:_a((()=>[ql(Z(g("exclude_check"))+": ",1),Ll("span",{innerHTML:gn(u)},null,8,jw)])),body:_a((()=>[Ll("div",Lw,[Ll("div",null,[Ll("label",null,[ql(Z(g("exclude_check"))+' "',1),Ll("b",{innerHTML:gn(u)},null,8,Vw),zw,Ll("span",Bw,Z(g("exclude_for"))+":",1)]),Ll("div",qw,[gs(Ll("input",{class:"form-check-input",type:"radio",value:"any","onUpdate:modelValue":n[0]||(n[0]=e=>l.value=e)},null,512),[[Oo,l.value]]),Ll("label",Hw,[Ll("span",null,Z(g("show_alerts.filter_disable_check")),1)])]),"host"==e.page?(Nl(),Ml("div",Gw,[gs(Ll("input",{class:"form-check-input",type:"radio",value:"host","onUpdate:modelValue":n[1]||(n[1]=e=>l.value=e)},null,512),[[Oo,l.value]]),Ll("label",Kw,[Ll("span",null,Z(gn(d).label),1)])])):Gl("v-if",!0),"flow"==e.page?(Nl(),Ml(wl,{key:1},[Ll("div",Ww,[gs(Ll("input",{class:"form-check-input",type:"radio",value:"client_host","onUpdate:modelValue":n[2]||(n[2]=e=>l.value=e)},null,512),[[Oo,l.value]]),Ll("label",Jw,[Ll("span",null,Z(g("client"))+": "+Z(gn(p).cli_label),1)])]),Ll("div",Yw,[gs(Ll("input",{class:"form-check-input",type:"radio",value:"server_host","onUpdate:modelValue":n[3]||(n[3]=e=>l.value=e)},null,512),[[Oo,l.value]]),Ll("label",Zw,[Ll("span",null,Z(g("server"))+": "+Z(gn(p).srv_label),1)])])],64)):Gl("v-if",!0)]),null!=o.value||null!=r.value?(Nl(),Ml("div",Xw,[Ll("label",null,[Ll("span",Qw,Z(g("check_exclusion.exclude_all_checks_for"))+":",1)]),null!=o.value?(Nl(),Ml("div",ex,[gs(Ll("input",{class:"form-check-input",type:"radio",value:"domain","onUpdate:modelValue":n[4]||(n[4]=e=>l.value=e)},null,512),[[Oo,l.value]]),Ll("label",tx,[Ll("span",null,Z(g("check_exclusion.domain"))+":",1)]),gs(Ll("input",{type:"text",pattern:gn(_),disabled:"domain"!=l.value,required:"","onUpdate:modelValue":n[5]||(n[5]=e=>o.value=e),class:"form-check-label custom-width"},null,8,nx),[[Po,o.value]])])):Gl("v-if",!0),null!=r.value?(Nl(),Ml("div",ax,[gs(Ll("input",{class:"form-check-input",type:"radio",value:"certificate","onUpdate:modelValue":n[6]||(n[6]=e=>l.value=e)},null,512),[[Oo,l.value]]),Ll("label",sx,[Ll("span",null,Z(g("check_exclusion.tls_certificate"))+":",1)]),gs(Ll("input",{type:"text",disabled:"certificate"!=l.value,"onUpdate:modelValue":n[7]||(n[7]=e=>r.value=e),pattern:gn(f),required:"",class:"form-check-label custom-width"},null,8,lx),[[Po,r.value]])])):Gl("v-if",!0)])):Gl("v-if",!0)]),"domain"!=l.value&&"certificate"!=l.value?(Nl(),Ml(wl,{key:0},[gs(Ll("div",{class:"message alert alert-danger"},Z(g("show_alerts.confirm_delete_filtered_alerts")),513),[[Go,i.value]]),ix,Ll("div",ox,[Ll("div",rx,[gs(Ll("input",{type:"checkbox",class:"custom-control-input whitespace","onUpdate:modelValue":n[8]||(n[8]=e=>i.value=e)},null,512),[[Mo,i.value]]),Ll("label",cx,Z(g("delete_disabled_alerts")),1)])])],64)):Gl("v-if",!0),Ll("div",ux,Z(g("show_alerts.confirm_filter_alert")),1)])),footer:_a((()=>[Ll("button",{type:"button",onClick:h,disabled:c(),class:"btn btn-warning"},Z(g("filter")),9,dx)])),_:1},512))}};dp("\n.whitespace[data-v-19c5b1f1] {\n  margin-right: 0.2rem;\n}\n.custom-width[data-v-19c5b1f1] {\n  display: block;\n  min-width: 100%;\n}\ninput[data-v-19c5b1f1]:invalid {\n  border-color: #ff0000;\n}\n.exclude-domain-certificate[data-v-19c5b1f1] {\n  margin-top: 0.4rem;\n}\n"),px.__scopeId="data-v-19c5b1f1",px.__file="http_src/vue/modal-alerts-filter.vue";let _x={PageStats:Ih,PageAssetTable:Vh,PagePeriodicityTable:nm,PageServiceTable:bm,PageServiceMap:Rm,PagePeriodicityMap:ag,PageAssetMap:kg,PageDeviceExclusions:Ev,PageHostTLS:zv,PageHostSSH:Yv,PageHomeMap:sb,PageSankey:ib,PageHostDetailsApplications:rb,PageHostDetailsTraffic:Nb,PageHostDetailsPackets:Fb,PageHostDetailsFlowSankey:Jb,AlertInfo:Wf,Chart:Pd,Datatable:Xf,DateTimeRangePicker:Rd,NetworkMap:Om,RangePicker:ky,PageNavbar:zg,SimpleTable:Fy,SelectSearch:Fd,TabList:Oh,Sankey:Bb,ListTimeseries:__,Modal:pp,ModalAddCheckExclusion:Rw,ModalAlertsFilter:px,ModalFilters:Yb,ModalTimeseries:Cf,ModalTrafficExtraction:Nf,ModalDeleteConfirm:jh,ModalSnapshot:Kp,ModalAddDeviceExclusion:mv,ModalEditDeviceExclusion:Tv,Vue:Ed};window.ntopVue=_x}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
